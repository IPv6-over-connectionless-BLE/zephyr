
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:
};
#endif

/* Linker needs this */
GEN_ABS_SYM_BEGIN(isr_tables_syms)
GEN_ABSOLUTE_SYM(__ISR_LIST_SIZEOF, sizeof(struct _isr_list));
       0:	200029a0 	.word	0x200029a0

#ifdef CONFIG_ERRNO
int *__errno(void)
{
	return &_current->errno_var;
}
       4:	00000f9d 	.word	0x00000f9d
       8:	00000fed 	.word	0x00000fed
       c:	00000e35 	.word	0x00000e35
      10:	00000e35 	.word	0x00000e35
      14:	00000e35 	.word	0x00000e35
      18:	00000e35 	.word	0x00000e35
      1c:	00000e35 	.word	0x00000e35
      20:	00000e35 	.word	0x00000e35
      24:	00000e35 	.word	0x00000e35
      28:	00000e35 	.word	0x00000e35
      2c:	00000a29 	.word	0x00000a29
      30:	00000e35 	.word	0x00000e35
      34:	00000e35 	.word	0x00000e35
      38:	000009e5 	.word	0x000009e5
      3c:	00000e35 	.word	0x00000e35

00000040 <_irq_vector_table>:
      40:	00000f61 00008b93 00000f61 00000f61     a.......a...a...
      50:	00000f61 00000f61 00000f61 00000f61     a...a...a...a...
      60:	00000f61 00000f61 00000f61 00000f61     a...a...a...a...
      70:	00000f61 00000f61 00000f61 00000f61     a...a...a...a...
      80:	00000f61 00000f61 00000f61 00000f61     a...a...a...a...
      90:	00000f61 00000f61 00000f61 00000f61     a...a...a...a...
      a0:	00000f61 00000f61 00000f61 00000f61     a...a...a...a...
      b0:	00000f61 00000f61 00000f61 00000f61     a...a...a...a...
      c0:	00000f61 00000f61 00000f61 00000f61     a...a...a...a...
      d0:	00000f61 00000f61 00000f61 00000f61     a...a...a...a...
      e0:	00000f61 00000f61 00000f61 00000f61     a...a...a...a...
      f0:	00000f61 00000f61                       a...a...

000000f8 <_sw_isr_table>:
      f8:	00000000 000016b5 00000000 00000dad     ................
     108:	00000000 00000dad 00000000 00000dad     ................
     118:	00000000 00000dad 00000000 00000dad     ................
     128:	200039bc 00001899 00000000 00000dad     .9. ............
     138:	00000000 00000dad 00000000 00000dad     ................
     148:	00000000 00000dad 00000000 00008b59     ............Y...
     158:	00000000 00000dad 20003998 00001c61     .........9. a...
     168:	00000000 00000dad 00000000 00000dad     ................
     178:	00000000 00000dad 00000000 00001d91     ................
     188:	00000000 00000dad 00000000 00000dad     ................
     198:	00000000 00000dad 00000000 00000dad     ................
     1a8:	00000000 00000dad 00000000 00000dad     ................
     1b8:	00000000 00008b8d 00000000 00000dad     ................
     1c8:	00000000 00000dad 00000000 00000dad     ................
     1d8:	00000000 00000dad 00000000 00000dad     ................
     1e8:	00000000 00000dad 00000000 00000dad     ................
     1f8:	00000000 00000dad 00000000 00000dad     ................
     208:	00000000 00000dad 00000000 00000dad     ................
     218:	00000000 00000dad 00000000 00000dad     ................
     228:	00000000 00000dad 00000000 00000dad     ................
     238:	00000000 00000dad 00000000 00000dad     ................
     248:	00000000 00000dad 00000000 00000dad     ................
     258:	00000000 00000dad 00000000 00000dad     ................

00000268 <__aeabi_uldivmod>:
     268:	b953      	cbnz	r3, 280 <CONFIG_BT_HCI_TX_STACK_SIZE>
     26a:	b94a      	cbnz	r2, 280 <CONFIG_BT_HCI_TX_STACK_SIZE>
     26c:	2900      	cmp	r1, #0
     26e:	bf08      	it	eq
     270:	2800      	cmpeq	r0, #0
     272:	bf1c      	itt	ne
     274:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     278:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     27c:	f000 b98e 	b.w	59c <__aeabi_idiv0>
     280:	f1ad 0c08 	sub.w	ip, sp, #8
     284:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     288:	f000 f81a 	bl	2c0 <__udivmoddi4>
     28c:	f8dd e004 	ldr.w	lr, [sp, #4]
     290:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     294:	b004      	add	sp, #16
     296:	4770      	bx	lr

00000298 <__popcountsi2>:
     298:	0843      	lsrs	r3, r0, #1
     29a:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
     29e:	1ac0      	subs	r0, r0, r3
     2a0:	0883      	lsrs	r3, r0, #2
     2a2:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
     2a6:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
     2aa:	4418      	add	r0, r3
     2ac:	eb00 1010 	add.w	r0, r0, r0, lsr #4
     2b0:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
     2b4:	eb00 2000 	add.w	r0, r0, r0, lsl #8
     2b8:	eb00 4000 	add.w	r0, r0, r0, lsl #16
     2bc:	0e00      	lsrs	r0, r0, #24
     2be:	4770      	bx	lr

000002c0 <__udivmoddi4>:
     2c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     2c4:	468c      	mov	ip, r1
     2c6:	460d      	mov	r5, r1
     2c8:	4604      	mov	r4, r0
     2ca:	9e08      	ldr	r6, [sp, #32]
     2cc:	2b00      	cmp	r3, #0
     2ce:	d151      	bne.n	374 <__udivmoddi4+0xb4>
     2d0:	428a      	cmp	r2, r1
     2d2:	4617      	mov	r7, r2
     2d4:	d96d      	bls.n	3b2 <__udivmoddi4+0xf2>
     2d6:	fab2 fe82 	clz	lr, r2
     2da:	f1be 0f00 	cmp.w	lr, #0
     2de:	d00b      	beq.n	2f8 <__udivmoddi4+0x38>
     2e0:	f1ce 0c20 	rsb	ip, lr, #32
     2e4:	fa01 f50e 	lsl.w	r5, r1, lr
     2e8:	fa20 fc0c 	lsr.w	ip, r0, ip
     2ec:	fa02 f70e 	lsl.w	r7, r2, lr
     2f0:	ea4c 0c05 	orr.w	ip, ip, r5
     2f4:	fa00 f40e 	lsl.w	r4, r0, lr
     2f8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
     2fc:	0c25      	lsrs	r5, r4, #16
     2fe:	fbbc f8fa 	udiv	r8, ip, sl
     302:	fa1f f987 	uxth.w	r9, r7
     306:	fb0a cc18 	mls	ip, sl, r8, ip
     30a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     30e:	fb08 f309 	mul.w	r3, r8, r9
     312:	42ab      	cmp	r3, r5
     314:	d90a      	bls.n	32c <__udivmoddi4+0x6c>
     316:	19ed      	adds	r5, r5, r7
     318:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
     31c:	f080 8123 	bcs.w	566 <CONFIG_BT_RX_STACK_SIZE+0x166>
     320:	42ab      	cmp	r3, r5
     322:	f240 8120 	bls.w	566 <CONFIG_BT_RX_STACK_SIZE+0x166>
     326:	f1a8 0802 	sub.w	r8, r8, #2
     32a:	443d      	add	r5, r7
     32c:	1aed      	subs	r5, r5, r3
     32e:	b2a4      	uxth	r4, r4
     330:	fbb5 f0fa 	udiv	r0, r5, sl
     334:	fb0a 5510 	mls	r5, sl, r0, r5
     338:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     33c:	fb00 f909 	mul.w	r9, r0, r9
     340:	45a1      	cmp	r9, r4
     342:	d909      	bls.n	358 <__udivmoddi4+0x98>
     344:	19e4      	adds	r4, r4, r7
     346:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     34a:	f080 810a 	bcs.w	562 <CONFIG_BT_RX_STACK_SIZE+0x162>
     34e:	45a1      	cmp	r9, r4
     350:	f240 8107 	bls.w	562 <CONFIG_BT_RX_STACK_SIZE+0x162>
     354:	3802      	subs	r0, #2
     356:	443c      	add	r4, r7
     358:	eba4 0409 	sub.w	r4, r4, r9
     35c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     360:	2100      	movs	r1, #0
     362:	2e00      	cmp	r6, #0
     364:	d061      	beq.n	42a <CONFIG_BT_RX_STACK_SIZE+0x2a>
     366:	fa24 f40e 	lsr.w	r4, r4, lr
     36a:	2300      	movs	r3, #0
     36c:	6034      	str	r4, [r6, #0]
     36e:	6073      	str	r3, [r6, #4]
     370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     374:	428b      	cmp	r3, r1
     376:	d907      	bls.n	388 <__udivmoddi4+0xc8>
     378:	2e00      	cmp	r6, #0
     37a:	d054      	beq.n	426 <CONFIG_BT_RX_STACK_SIZE+0x26>
     37c:	2100      	movs	r1, #0
     37e:	e886 0021 	stmia.w	r6, {r0, r5}
     382:	4608      	mov	r0, r1
     384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     388:	fab3 f183 	clz	r1, r3
     38c:	2900      	cmp	r1, #0
     38e:	f040 808e 	bne.w	4ae <CONFIG_BT_RX_STACK_SIZE+0xae>
     392:	42ab      	cmp	r3, r5
     394:	d302      	bcc.n	39c <__udivmoddi4+0xdc>
     396:	4282      	cmp	r2, r0
     398:	f200 80fa 	bhi.w	590 <CONFIG_BT_RX_STACK_SIZE+0x190>
     39c:	1a84      	subs	r4, r0, r2
     39e:	eb65 0503 	sbc.w	r5, r5, r3
     3a2:	2001      	movs	r0, #1
     3a4:	46ac      	mov	ip, r5
     3a6:	2e00      	cmp	r6, #0
     3a8:	d03f      	beq.n	42a <CONFIG_BT_RX_STACK_SIZE+0x2a>
     3aa:	e886 1010 	stmia.w	r6, {r4, ip}
     3ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3b2:	b912      	cbnz	r2, 3ba <__udivmoddi4+0xfa>
     3b4:	2701      	movs	r7, #1
     3b6:	fbb7 f7f2 	udiv	r7, r7, r2
     3ba:	fab7 fe87 	clz	lr, r7
     3be:	f1be 0f00 	cmp.w	lr, #0
     3c2:	d134      	bne.n	42e <CONFIG_BT_RX_STACK_SIZE+0x2e>
     3c4:	1beb      	subs	r3, r5, r7
     3c6:	0c3a      	lsrs	r2, r7, #16
     3c8:	fa1f fc87 	uxth.w	ip, r7
     3cc:	2101      	movs	r1, #1
     3ce:	fbb3 f8f2 	udiv	r8, r3, r2
     3d2:	0c25      	lsrs	r5, r4, #16
     3d4:	fb02 3318 	mls	r3, r2, r8, r3
     3d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     3dc:	fb0c f308 	mul.w	r3, ip, r8
     3e0:	42ab      	cmp	r3, r5
     3e2:	d907      	bls.n	3f4 <__udivmoddi4+0x134>
     3e4:	19ed      	adds	r5, r5, r7
     3e6:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     3ea:	d202      	bcs.n	3f2 <__udivmoddi4+0x132>
     3ec:	42ab      	cmp	r3, r5
     3ee:	f200 80d1 	bhi.w	594 <CONFIG_BT_RX_STACK_SIZE+0x194>
     3f2:	4680      	mov	r8, r0
     3f4:	1aed      	subs	r5, r5, r3
     3f6:	b2a3      	uxth	r3, r4
     3f8:	fbb5 f0f2 	udiv	r0, r5, r2
     3fc:	fb02 5510 	mls	r5, r2, r0, r5
     400:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     404:	fb0c fc00 	mul.w	ip, ip, r0
     408:	45a4      	cmp	ip, r4
     40a:	d907      	bls.n	41c <CONFIG_BT_RX_STACK_SIZE+0x1c>
     40c:	19e4      	adds	r4, r4, r7
     40e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     412:	d202      	bcs.n	41a <CONFIG_BT_RX_STACK_SIZE+0x1a>
     414:	45a4      	cmp	ip, r4
     416:	f200 80b8 	bhi.w	58a <CONFIG_BT_RX_STACK_SIZE+0x18a>
     41a:	4618      	mov	r0, r3
     41c:	eba4 040c 	sub.w	r4, r4, ip
     420:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     424:	e79d      	b.n	362 <__udivmoddi4+0xa2>
     426:	4631      	mov	r1, r6
     428:	4630      	mov	r0, r6
     42a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     42e:	f1ce 0420 	rsb	r4, lr, #32
     432:	fa05 f30e 	lsl.w	r3, r5, lr
     436:	fa07 f70e 	lsl.w	r7, r7, lr
     43a:	fa20 f804 	lsr.w	r8, r0, r4
     43e:	0c3a      	lsrs	r2, r7, #16
     440:	fa25 f404 	lsr.w	r4, r5, r4
     444:	ea48 0803 	orr.w	r8, r8, r3
     448:	fbb4 f1f2 	udiv	r1, r4, r2
     44c:	ea4f 4518 	mov.w	r5, r8, lsr #16
     450:	fb02 4411 	mls	r4, r2, r1, r4
     454:	fa1f fc87 	uxth.w	ip, r7
     458:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
     45c:	fb01 f30c 	mul.w	r3, r1, ip
     460:	42ab      	cmp	r3, r5
     462:	fa00 f40e 	lsl.w	r4, r0, lr
     466:	d909      	bls.n	47c <CONFIG_BT_RX_STACK_SIZE+0x7c>
     468:	19ed      	adds	r5, r5, r7
     46a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
     46e:	f080 808a 	bcs.w	586 <CONFIG_BT_RX_STACK_SIZE+0x186>
     472:	42ab      	cmp	r3, r5
     474:	f240 8087 	bls.w	586 <CONFIG_BT_RX_STACK_SIZE+0x186>
     478:	3902      	subs	r1, #2
     47a:	443d      	add	r5, r7
     47c:	1aeb      	subs	r3, r5, r3
     47e:	fa1f f588 	uxth.w	r5, r8
     482:	fbb3 f0f2 	udiv	r0, r3, r2
     486:	fb02 3310 	mls	r3, r2, r0, r3
     48a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     48e:	fb00 f30c 	mul.w	r3, r0, ip
     492:	42ab      	cmp	r3, r5
     494:	d907      	bls.n	4a6 <CONFIG_BT_RX_STACK_SIZE+0xa6>
     496:	19ed      	adds	r5, r5, r7
     498:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
     49c:	d26f      	bcs.n	57e <CONFIG_BT_RX_STACK_SIZE+0x17e>
     49e:	42ab      	cmp	r3, r5
     4a0:	d96d      	bls.n	57e <CONFIG_BT_RX_STACK_SIZE+0x17e>
     4a2:	3802      	subs	r0, #2
     4a4:	443d      	add	r5, r7
     4a6:	1aeb      	subs	r3, r5, r3
     4a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     4ac:	e78f      	b.n	3ce <__udivmoddi4+0x10e>
     4ae:	f1c1 0720 	rsb	r7, r1, #32
     4b2:	fa22 f807 	lsr.w	r8, r2, r7
     4b6:	408b      	lsls	r3, r1
     4b8:	fa05 f401 	lsl.w	r4, r5, r1
     4bc:	ea48 0303 	orr.w	r3, r8, r3
     4c0:	fa20 fe07 	lsr.w	lr, r0, r7
     4c4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
     4c8:	40fd      	lsrs	r5, r7
     4ca:	ea4e 0e04 	orr.w	lr, lr, r4
     4ce:	fbb5 f9fc 	udiv	r9, r5, ip
     4d2:	ea4f 441e 	mov.w	r4, lr, lsr #16
     4d6:	fb0c 5519 	mls	r5, ip, r9, r5
     4da:	fa1f f883 	uxth.w	r8, r3
     4de:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
     4e2:	fb09 f408 	mul.w	r4, r9, r8
     4e6:	42ac      	cmp	r4, r5
     4e8:	fa02 f201 	lsl.w	r2, r2, r1
     4ec:	fa00 fa01 	lsl.w	sl, r0, r1
     4f0:	d908      	bls.n	504 <CONFIG_BT_RX_STACK_SIZE+0x104>
     4f2:	18ed      	adds	r5, r5, r3
     4f4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     4f8:	d243      	bcs.n	582 <CONFIG_BT_RX_STACK_SIZE+0x182>
     4fa:	42ac      	cmp	r4, r5
     4fc:	d941      	bls.n	582 <CONFIG_BT_RX_STACK_SIZE+0x182>
     4fe:	f1a9 0902 	sub.w	r9, r9, #2
     502:	441d      	add	r5, r3
     504:	1b2d      	subs	r5, r5, r4
     506:	fa1f fe8e 	uxth.w	lr, lr
     50a:	fbb5 f0fc 	udiv	r0, r5, ip
     50e:	fb0c 5510 	mls	r5, ip, r0, r5
     512:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
     516:	fb00 f808 	mul.w	r8, r0, r8
     51a:	45a0      	cmp	r8, r4
     51c:	d907      	bls.n	52e <CONFIG_BT_RX_STACK_SIZE+0x12e>
     51e:	18e4      	adds	r4, r4, r3
     520:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
     524:	d229      	bcs.n	57a <CONFIG_BT_RX_STACK_SIZE+0x17a>
     526:	45a0      	cmp	r8, r4
     528:	d927      	bls.n	57a <CONFIG_BT_RX_STACK_SIZE+0x17a>
     52a:	3802      	subs	r0, #2
     52c:	441c      	add	r4, r3
     52e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     532:	eba4 0408 	sub.w	r4, r4, r8
     536:	fba0 8902 	umull	r8, r9, r0, r2
     53a:	454c      	cmp	r4, r9
     53c:	46c6      	mov	lr, r8
     53e:	464d      	mov	r5, r9
     540:	d315      	bcc.n	56e <CONFIG_BT_RX_STACK_SIZE+0x16e>
     542:	d012      	beq.n	56a <CONFIG_BT_RX_STACK_SIZE+0x16a>
     544:	b156      	cbz	r6, 55c <CONFIG_BT_RX_STACK_SIZE+0x15c>
     546:	ebba 030e 	subs.w	r3, sl, lr
     54a:	eb64 0405 	sbc.w	r4, r4, r5
     54e:	fa04 f707 	lsl.w	r7, r4, r7
     552:	40cb      	lsrs	r3, r1
     554:	431f      	orrs	r7, r3
     556:	40cc      	lsrs	r4, r1
     558:	6037      	str	r7, [r6, #0]
     55a:	6074      	str	r4, [r6, #4]
     55c:	2100      	movs	r1, #0
     55e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     562:	4618      	mov	r0, r3
     564:	e6f8      	b.n	358 <__udivmoddi4+0x98>
     566:	4690      	mov	r8, r2
     568:	e6e0      	b.n	32c <__udivmoddi4+0x6c>
     56a:	45c2      	cmp	sl, r8
     56c:	d2ea      	bcs.n	544 <CONFIG_BT_RX_STACK_SIZE+0x144>
     56e:	ebb8 0e02 	subs.w	lr, r8, r2
     572:	eb69 0503 	sbc.w	r5, r9, r3
     576:	3801      	subs	r0, #1
     578:	e7e4      	b.n	544 <CONFIG_BT_RX_STACK_SIZE+0x144>
     57a:	4628      	mov	r0, r5
     57c:	e7d7      	b.n	52e <CONFIG_BT_RX_STACK_SIZE+0x12e>
     57e:	4640      	mov	r0, r8
     580:	e791      	b.n	4a6 <CONFIG_BT_RX_STACK_SIZE+0xa6>
     582:	4681      	mov	r9, r0
     584:	e7be      	b.n	504 <CONFIG_BT_RX_STACK_SIZE+0x104>
     586:	4601      	mov	r1, r0
     588:	e778      	b.n	47c <CONFIG_BT_RX_STACK_SIZE+0x7c>
     58a:	3802      	subs	r0, #2
     58c:	443c      	add	r4, r7
     58e:	e745      	b.n	41c <CONFIG_BT_RX_STACK_SIZE+0x1c>
     590:	4608      	mov	r0, r1
     592:	e708      	b.n	3a6 <__udivmoddi4+0xe6>
     594:	f1a8 0802 	sub.w	r8, r8, #2
     598:	443d      	add	r5, r7
     59a:	e72b      	b.n	3f4 <__udivmoddi4+0x134>

0000059c <__aeabi_idiv0>:
     59c:	4770      	bx	lr
     59e:	bf00      	nop

000005a0 <strcpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
     5a0:	3901      	subs	r1, #1
	char *dest = d;

	while (*s != '\0') {
     5a2:	4603      	mov	r3, r0
     5a4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
     5a8:	b90a      	cbnz	r2, 5ae <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
     5aa:	701a      	strb	r2, [r3, #0]

	return dest;
}
     5ac:	4770      	bx	lr
		*d = *s;
     5ae:	f803 2b01 	strb.w	r2, [r3], #1
     5b2:	e7f7      	b.n	5a4 <strcpy+0x4>

000005b4 <strcmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
     5b4:	3801      	subs	r0, #1
     5b6:	3901      	subs	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
     5b8:	f810 3f01 	ldrb.w	r3, [r0, #1]!
     5bc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
     5c0:	4293      	cmp	r3, r2
     5c2:	d102      	bne.n	5ca <strcmp+0x16>
     5c4:	2b00      	cmp	r3, #0
     5c6:	d1f7      	bne.n	5b8 <strcmp+0x4>
     5c8:	461a      	mov	r2, r3
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
     5ca:	1a98      	subs	r0, r3, r2
     5cc:	4770      	bx	lr

000005ce <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
     5ce:	b570      	push	{r4, r5, r6, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n)
     5d0:	b182      	cbz	r2, 5f4 <CONFIG_BT_CTLR_COMPANY_ID+0x3>
		return 0;

	while ((--n > 0) && (*c1 == *c2)) {
     5d2:	3a01      	subs	r2, #1
     5d4:	460c      	mov	r4, r1
     5d6:	4603      	mov	r3, r0
     5d8:	d103      	bne.n	5e2 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x6>
		c1++;
		c2++;
	}

	return *c1 - *c2;
     5da:	781a      	ldrb	r2, [r3, #0]
     5dc:	7820      	ldrb	r0, [r4, #0]
     5de:	1a10      	subs	r0, r2, r0
     5e0:	bd70      	pop	{r4, r5, r6, pc}
	while ((--n > 0) && (*c1 == *c2)) {
     5e2:	781e      	ldrb	r6, [r3, #0]
     5e4:	7825      	ldrb	r5, [r4, #0]
     5e6:	42ae      	cmp	r6, r5
     5e8:	f100 0001 	add.w	r0, r0, #1
     5ec:	f101 0101 	add.w	r1, r1, #1
     5f0:	d0ef      	beq.n	5d2 <memcmp+0x4>
     5f2:	e7f2      	b.n	5da <memcmp+0xc>
		return 0;
     5f4:	4610      	mov	r0, r2
}
     5f6:	bd70      	pop	{r4, r5, r6, pc}

000005f8 <memcpy>:
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
     5f8:	ea81 0300 	eor.w	r3, r1, r0
     5fc:	f013 0f03 	tst.w	r3, #3
{
     600:	b570      	push	{r4, r5, r6, lr}
     602:	4603      	mov	r3, r0
	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
     604:	d00b      	beq.n	61e <memcpy+0x26>
     606:	3b01      	subs	r3, #1
     608:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
     60a:	4291      	cmp	r1, r2
     60c:	d11b      	bne.n	646 <memcpy+0x4e>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
     60e:	bd70      	pop	{r4, r5, r6, pc}
			if (n == 0) {
     610:	2a00      	cmp	r2, #0
     612:	d0fc      	beq.n	60e <memcpy+0x16>
			*(d_byte++) = *(s_byte++);
     614:	f811 4b01 	ldrb.w	r4, [r1], #1
     618:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
     61c:	3a01      	subs	r2, #1
		while (((unsigned int)d_byte) & 0x3) {
     61e:	079c      	lsls	r4, r3, #30
     620:	d1f6      	bne.n	610 <memcpy+0x18>
     622:	1f1e      	subs	r6, r3, #4
     624:	460d      	mov	r5, r1
     626:	1b54      	subs	r4, r2, r5
     628:	440c      	add	r4, r1
		while (n >= sizeof(unsigned int)) {
     62a:	2c03      	cmp	r4, #3
     62c:	d806      	bhi.n	63c <memcpy+0x44>
     62e:	f022 0403 	bic.w	r4, r2, #3
     632:	4421      	add	r1, r4
     634:	4423      	add	r3, r4
     636:	f002 0203 	and.w	r2, r2, #3
     63a:	e7e4      	b.n	606 <memcpy+0xe>
			*(d_word++) = *(s_word++);
     63c:	f855 4b04 	ldr.w	r4, [r5], #4
     640:	f846 4f04 	str.w	r4, [r6, #4]!
     644:	e7ef      	b.n	626 <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
     646:	f811 4b01 	ldrb.w	r4, [r1], #1
     64a:	f803 4f01 	strb.w	r4, [r3, #1]!
     64e:	e7dc      	b.n	60a <memcpy+0x12>

00000650 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
     650:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
     652:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
     654:	4603      	mov	r3, r0

	while (((unsigned int)d_byte) & 0x3) {
     656:	079c      	lsls	r4, r3, #30
     658:	d111      	bne.n	67e <memset+0x2e>
	/* do word-sized initialization as long as possible */

	unsigned int *d_word = (unsigned int *)d_byte;
	unsigned int c_word = (unsigned int)(unsigned char)c;

	c_word |= c_word << 8;
     65a:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
     65e:	ea44 4404 	orr.w	r4, r4, r4, lsl #16

	while (n >= sizeof(unsigned int)) {
     662:	461e      	mov	r6, r3
     664:	1b95      	subs	r5, r2, r6
     666:	441d      	add	r5, r3
     668:	2d03      	cmp	r5, #3
     66a:	d80e      	bhi.n	68a <memset+0x3a>
     66c:	f022 0403 	bic.w	r4, r2, #3
     670:	4423      	add	r3, r4
     672:	f002 0203 	and.w	r2, r2, #3
     676:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
     678:	4293      	cmp	r3, r2
     67a:	d109      	bne.n	690 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
     67c:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
     67e:	2a00      	cmp	r2, #0
     680:	d0fc      	beq.n	67c <memset+0x2c>
		*(d_byte++) = c_byte;
     682:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
     686:	3a01      	subs	r2, #1
     688:	e7e5      	b.n	656 <memset+0x6>
		*(d_word++) = c_word;
     68a:	f846 4b04 	str.w	r4, [r6], #4
     68e:	e7e9      	b.n	664 <memset+0x14>
		*(d_byte++) = c_byte;
     690:	f803 1b01 	strb.w	r1, [r3], #1
     694:	e7f0      	b.n	678 <memset+0x28>
	...

00000698 <scan_cb>:
	BT_DATA(BT_DATA_MANUFACTURER_DATA, mfg_data, 10),
};

static void scan_cb(const bt_addr_le_t *addr, s8_t rssi, u8_t adv_type,
		    struct net_buf_simple *buf)
{	
     698:	b5f0      	push	{r4, r5, r6, r7, lr}
     69a:	b091      	sub	sp, #68	; 0x44
     69c:	461e      	mov	r6, r3

	int n = 0;
	u8_t data[buf->len];
     69e:	889b      	ldrh	r3, [r3, #4]
     6a0:	3307      	adds	r3, #7
     6a2:	f023 0307 	bic.w	r3, r3, #7
{	
     6a6:	af06      	add	r7, sp, #24
	
	char addr_str[BT_ADDR_LE_STR_LEN];

	if(adv_type == 0x07 ){										//|| adv_type == 0x03
     6a8:	2a07      	cmp	r2, #7
	u8_t data[buf->len];
     6aa:	ebad 0d03 	sub.w	sp, sp, r3
{	
     6ae:	4605      	mov	r5, r0
	u8_t data[buf->len];
     6b0:	ac06      	add	r4, sp, #24
	if(adv_type == 0x07 ){										//|| adv_type == 0x03
     6b2:	d14f      	bne.n	754 <scan_cb+0xbc>
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
     6b4:	7803      	ldrb	r3, [r0, #0]
     6b6:	2b03      	cmp	r3, #3
     6b8:	d855      	bhi.n	766 <scan_cb+0xce>
     6ba:	e8df f003 	tbb	[pc, r3]
     6be:	4e02      	.short	0x4e02
     6c0:	5250      	.short	0x5250
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
     6c2:	492f      	ldr	r1, [pc, #188]	; (780 <scan_cb+0xe8>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
     6c4:	4638      	mov	r0, r7
     6c6:	f7ff ff6b 	bl	5a0 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
     6ca:	79ab      	ldrb	r3, [r5, #6]
     6cc:	9705      	str	r7, [sp, #20]
     6ce:	786a      	ldrb	r2, [r5, #1]
     6d0:	9204      	str	r2, [sp, #16]
     6d2:	78aa      	ldrb	r2, [r5, #2]
     6d4:	9203      	str	r2, [sp, #12]
     6d6:	78ea      	ldrb	r2, [r5, #3]
     6d8:	9202      	str	r2, [sp, #8]
     6da:	792a      	ldrb	r2, [r5, #4]
     6dc:	9201      	str	r2, [sp, #4]
     6de:	796a      	ldrb	r2, [r5, #5]
     6e0:	9200      	str	r2, [sp, #0]
     6e2:	211b      	movs	r1, #27
     6e4:	4a27      	ldr	r2, [pc, #156]	; (784 <scan_cb+0xec>)
     6e6:	f107 000c 	add.w	r0, r7, #12
     6ea:	f000 fe7d 	bl	13e8 <snprintk>
	//	printk(" \n scan report adv_type : %d \n", adv_type);
		bt_addr_le_to_str(addr, addr_str, sizeof(addr_str));
	//	printk("Device found: %s (RSSI %d)\n", addr_str, rssi);
		printk("RECEIVED AUX_PACKET LENGHT: %d \n", buf->len);
     6ee:	88b1      	ldrh	r1, [r6, #4]
     6f0:	4825      	ldr	r0, [pc, #148]	; (788 <scan_cb+0xf0>)
     6f2:	f000 fe6b 	bl	13cc <printk>
	//	snprintk(data ,buf->len, buf->data);
		for( int i=0 ; i<= buf->len; i++){
     6f6:	88b5      	ldrh	r5, [r6, #4]
     6f8:	4623      	mov	r3, r4
     6fa:	1b1a      	subs	r2, r3, r4
     6fc:	4295      	cmp	r5, r2
     6fe:	da38      	bge.n	772 <scan_cb+0xda>
		//char buffer[buf->len];
		//bzero(buffer, buf->len);
		//n = read(buf->data,buffer,buf->len);
		//if (n < 0) printf("ERROR reading from socket");
		n = buf->len;
		printk("Here is the message: \n");
     700:	4822      	ldr	r0, [pc, #136]	; (78c <scan_cb+0xf4>)
     702:	f000 fe63 	bl	13cc <printk>
		if(n > 0){
     706:	b315      	cbz	r5, 74e <scan_cb+0xb6>
			i++;
     708:	4b21      	ldr	r3, [pc, #132]	; (790 <scan_cb+0xf8>)
			printk("%d   ", i);
     70a:	4822      	ldr	r0, [pc, #136]	; (794 <scan_cb+0xfc>)
			i++;
     70c:	8819      	ldrh	r1, [r3, #0]
     70e:	3101      	adds	r1, #1
     710:	b289      	uxth	r1, r1
     712:	8019      	strh	r1, [r3, #0]
			printk("%d   ", i);
     714:	f000 fe5a 	bl	13cc <printk>
		for (int i = 0; i < 6; i++)
		{
			if((i == 30) || (i ==60) ||(i == 90) ||(i == 120) ||(i == 150) ||(i == 180) ||(i == 210) || (i == 240)){
				printk("\n");
			}
			printk("0x%02X ", data[i]);
     718:	7821      	ldrb	r1, [r4, #0]
     71a:	481f      	ldr	r0, [pc, #124]	; (798 <scan_cb+0x100>)
     71c:	f000 fe56 	bl	13cc <printk>
     720:	7861      	ldrb	r1, [r4, #1]
     722:	481d      	ldr	r0, [pc, #116]	; (798 <scan_cb+0x100>)
     724:	f000 fe52 	bl	13cc <printk>
     728:	78a1      	ldrb	r1, [r4, #2]
     72a:	481b      	ldr	r0, [pc, #108]	; (798 <scan_cb+0x100>)
     72c:	f000 fe4e 	bl	13cc <printk>
     730:	78e1      	ldrb	r1, [r4, #3]
     732:	4819      	ldr	r0, [pc, #100]	; (798 <scan_cb+0x100>)
     734:	f000 fe4a 	bl	13cc <printk>
     738:	7921      	ldrb	r1, [r4, #4]
     73a:	4817      	ldr	r0, [pc, #92]	; (798 <scan_cb+0x100>)
     73c:	f000 fe46 	bl	13cc <printk>
     740:	7961      	ldrb	r1, [r4, #5]
     742:	4815      	ldr	r0, [pc, #84]	; (798 <scan_cb+0x100>)
     744:	f000 fe42 	bl	13cc <printk>
		}
		printk("\n");
     748:	4814      	ldr	r0, [pc, #80]	; (79c <scan_cb+0x104>)
     74a:	f000 fe3f 	bl	13cc <printk>
				printk("\n");
			}
			printk("0x%02X ", data[i]);
		}
		printk("\n");
*/		printk("\n");
     74e:	4813      	ldr	r0, [pc, #76]	; (79c <scan_cb+0x104>)
     750:	f000 fe3c 	bl	13cc <printk>
			printk("%d ", data[i]);
		}
		printk(" \n");
	*/
	}
}
     754:	372c      	adds	r7, #44	; 0x2c
     756:	46bd      	mov	sp, r7
     758:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
     75a:	4911      	ldr	r1, [pc, #68]	; (7a0 <scan_cb+0x108>)
     75c:	e7b2      	b.n	6c4 <scan_cb+0x2c>
		strcpy(type, "public id");
     75e:	4911      	ldr	r1, [pc, #68]	; (7a4 <scan_cb+0x10c>)
     760:	e7b0      	b.n	6c4 <scan_cb+0x2c>
		strcpy(type, "random id");
     762:	4911      	ldr	r1, [pc, #68]	; (7a8 <scan_cb+0x110>)
     764:	e7ae      	b.n	6c4 <scan_cb+0x2c>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
     766:	4a11      	ldr	r2, [pc, #68]	; (7ac <scan_cb+0x114>)
     768:	210a      	movs	r1, #10
     76a:	4638      	mov	r0, r7
     76c:	f000 fe3c 	bl	13e8 <snprintk>
     770:	e7ab      	b.n	6ca <scan_cb+0x32>
			data[i] = *(buf->data ++);
     772:	6832      	ldr	r2, [r6, #0]
     774:	1c51      	adds	r1, r2, #1
     776:	6031      	str	r1, [r6, #0]
     778:	7812      	ldrb	r2, [r2, #0]
     77a:	f803 2b01 	strb.w	r2, [r3], #1
     77e:	e7bc      	b.n	6fa <scan_cb+0x62>
     780:	0000af3c 	.word	0x0000af3c
     784:	0000af65 	.word	0x0000af65
     788:	0000af88 	.word	0x0000af88
     78c:	0000afa9 	.word	0x0000afa9
     790:	20000000 	.word	0x20000000
     794:	0000afc0 	.word	0x0000afc0
     798:	0000afc6 	.word	0x0000afc6
     79c:	0000afbe 	.word	0x0000afbe
     7a0:	0000af43 	.word	0x0000af43
     7a4:	0000af4a 	.word	0x0000af4a
     7a8:	0000af54 	.word	0x0000af54
     7ac:	0000af5e 	.word	0x0000af5e

000007b0 <main>:


void main(void)
{
     7b0:	b507      	push	{r0, r1, r2, lr}
	struct bt_le_scan_param scan_param = {
     7b2:	4b11      	ldr	r3, [pc, #68]	; (7f8 <main+0x48>)
     7b4:	6818      	ldr	r0, [r3, #0]
     7b6:	9000      	str	r0, [sp, #0]
     7b8:	889b      	ldrh	r3, [r3, #4]
		.interval   = 0x0010,
		.window     = 0x0010,
	};
	int err;

	printk("Starting Scanner Demo\n");
     7ba:	4810      	ldr	r0, [pc, #64]	; (7fc <main+0x4c>)
	struct bt_le_scan_param scan_param = {
     7bc:	f8ad 3004 	strh.w	r3, [sp, #4]
	printk("Starting Scanner Demo\n");
     7c0:	f000 fe04 	bl	13cc <printk>

	/* Initialize the Bluetooth Subsystem */
	err = bt_enable(NULL);
     7c4:	2000      	movs	r0, #0
     7c6:	f002 f8a5 	bl	2914 <bt_enable>
	if (err) {
     7ca:	4601      	mov	r1, r0
     7cc:	b128      	cbz	r0, 7da <main+0x2a>
		printk("Bluetooth init failed (err %d)\n", err);
     7ce:	480c      	ldr	r0, [pc, #48]	; (800 <CONFIG_ISR_STACK_SIZE>)

	printk("Bluetooth initialized\n");

	err = bt_le_scan_start(&scan_param, scan_cb);
	if (err) {
		printk("Starting scanning failed (err %d)\n", err);
     7d0:	f000 fdfc 	bl	13cc <printk>
		return;
	}
	printk("scanning started\n");
}
     7d4:	b003      	add	sp, #12
     7d6:	f85d fb04 	ldr.w	pc, [sp], #4
	printk("Bluetooth initialized\n");
     7da:	480a      	ldr	r0, [pc, #40]	; (804 <CONFIG_ISR_STACK_SIZE+0x4>)
     7dc:	f000 fdf6 	bl	13cc <printk>
	err = bt_le_scan_start(&scan_param, scan_cb);
     7e0:	4909      	ldr	r1, [pc, #36]	; (808 <CONFIG_ISR_STACK_SIZE+0x8>)
     7e2:	4668      	mov	r0, sp
     7e4:	f002 f8ec 	bl	29c0 <bt_le_scan_start>
	if (err) {
     7e8:	4601      	mov	r1, r0
     7ea:	b108      	cbz	r0, 7f0 <main+0x40>
		printk("Starting scanning failed (err %d)\n", err);
     7ec:	4807      	ldr	r0, [pc, #28]	; (80c <CONFIG_ISR_STACK_SIZE+0xc>)
     7ee:	e7ef      	b.n	7d0 <main+0x20>
	printk("scanning started\n");
     7f0:	4807      	ldr	r0, [pc, #28]	; (810 <CONFIG_ISR_STACK_SIZE+0x10>)
     7f2:	f000 fdeb 	bl	13cc <printk>
     7f6:	e7ed      	b.n	7d4 <main+0x24>
     7f8:	0000ae8c 	.word	0x0000ae8c
     7fc:	0000aeb9 	.word	0x0000aeb9
     800:	0000aed0 	.word	0x0000aed0
     804:	0000aef0 	.word	0x0000aef0
     808:	00000699 	.word	0x00000699
     80c:	0000af07 	.word	0x0000af07
     810:	0000af2a 	.word	0x0000af2a

00000814 <errata_103>:
	return false;
}

static bool errata_136_nrf52840(void)
{
	if ((*(u32_t *)0x10000130ul == 0x8ul) &&
     814:	4b05      	ldr	r3, [pc, #20]	; (82c <errata_103+0x18>)
     816:	681b      	ldr	r3, [r3, #0]
     818:	2b08      	cmp	r3, #8
	    (*(u32_t *)0x10000134ul == 0x0ul)) {
     81a:	bf01      	itttt	eq
     81c:	4b04      	ldreq	r3, [pc, #16]	; (830 <errata_103+0x1c>)
	if ((*(u32_t *)0x10000130ul == 0x8ul) &&
     81e:	6818      	ldreq	r0, [r3, #0]
     820:	fab0 f080 	clzeq	r0, r0
     824:	0940      	lsreq	r0, r0, #5
		return true;
	}

	return false;
     826:	bf18      	it	ne
     828:	2000      	movne	r0, #0
}
     82a:	4770      	bx	lr
     82c:	10000130 	.word	0x10000130
     830:	10000134 	.word	0x10000134

00000834 <nordicsemi_nrf52_init>:
{
	SystemCoreClock = __SYSTEM_CLOCK_64M;
}

static int nordicsemi_nrf52_init(struct device *arg)
{
     834:	b508      	push	{r3, lr}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     836:	f04f 0320 	mov.w	r3, #32
     83a:	f3ef 8111 	mrs	r1, BASEPRI
     83e:	f383 8811 	msr	BASEPRI, r3
	if (errata_36()) {
     842:	f7ff ffe7 	bl	814 <errata_103>
     846:	b140      	cbz	r0, 85a <nordicsemi_nrf52_init+0x26>
		NRF_CLOCK->EVENTS_DONE = 0;
     848:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     84c:	2200      	movs	r2, #0
     84e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		NRF_CLOCK->EVENTS_CTTO = 0;
     852:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
		NRF_CLOCK->CTIV = 0;
     856:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
	if (errata_98()) {
     85a:	f7ff ffdb 	bl	814 <errata_103>
     85e:	b110      	cbz	r0, 866 <nordicsemi_nrf52_init+0x32>
		*(volatile u32_t *)0x4000568Cul = 0x00038148ul;
     860:	4b38      	ldr	r3, [pc, #224]	; (944 <nordicsemi_nrf52_init+0x110>)
     862:	4a39      	ldr	r2, [pc, #228]	; (948 <nordicsemi_nrf52_init+0x114>)
     864:	601a      	str	r2, [r3, #0]
	if (errata_103()) {
     866:	f7ff ffd5 	bl	814 <errata_103>
     86a:	b118      	cbz	r0, 874 <nordicsemi_nrf52_init+0x40>
		NRF_CCM->MAXPACKETSIZE = 0xFBul;
     86c:	4b37      	ldr	r3, [pc, #220]	; (94c <nordicsemi_nrf52_init+0x118>)
     86e:	22fb      	movs	r2, #251	; 0xfb
     870:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	if (errata_115()) {
     874:	f7ff ffce 	bl	814 <errata_103>
     878:	b148      	cbz	r0, 88e <nordicsemi_nrf52_init+0x5a>
			(*(volatile u32_t *) 0x40000EE4 & 0xFFFFFFF0) |
     87a:	4835      	ldr	r0, [pc, #212]	; (950 <nordicsemi_nrf52_init+0x11c>)
			(*(u32_t *)0x10000258 & 0x0000000F);
     87c:	4b35      	ldr	r3, [pc, #212]	; (954 <nordicsemi_nrf52_init+0x120>)
			(*(volatile u32_t *) 0x40000EE4 & 0xFFFFFFF0) |
     87e:	6802      	ldr	r2, [r0, #0]
			(*(u32_t *)0x10000258 & 0x0000000F);
     880:	681b      	ldr	r3, [r3, #0]
			(*(volatile u32_t *) 0x40000EE4 & 0xFFFFFFF0) |
     882:	f022 020f 	bic.w	r2, r2, #15
			(*(u32_t *)0x10000258 & 0x0000000F);
     886:	f003 030f 	and.w	r3, r3, #15
			(*(volatile u32_t *) 0x40000EE4 & 0xFFFFFFF0) |
     88a:	4313      	orrs	r3, r2
		*(volatile u32_t *)0x40000EE4 =
     88c:	6003      	str	r3, [r0, #0]
	if (errata_120()) {
     88e:	f7ff ffc1 	bl	814 <errata_103>
     892:	b118      	cbz	r0, 89c <nordicsemi_nrf52_init+0x68>
		*(volatile u32_t *)0x40029640ul = 0x200ul;
     894:	4b30      	ldr	r3, [pc, #192]	; (958 <nordicsemi_nrf52_init+0x124>)
     896:	f44f 7200 	mov.w	r2, #512	; 0x200
     89a:	601a      	str	r2, [r3, #0]
	if (errata_136_nrf52840()) {
     89c:	f7ff ffba 	bl	814 <errata_103>
     8a0:	b148      	cbz	r0, 8b6 <nordicsemi_nrf52_init+0x82>
		if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk) {
     8a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     8a6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     8aa:	07d2      	lsls	r2, r2, #31
			NRF_POWER->RESETREAS = ~POWER_RESETREAS_RESETPIN_Msk;
     8ac:	bf44      	itt	mi
     8ae:	f06f 0201 	mvnmi.w	r2, #1
     8b2:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
	if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
     8b6:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     8ba:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
     8be:	2a00      	cmp	r2, #0
     8c0:	db03      	blt.n	8ca <nordicsemi_nrf52_init+0x96>
	    ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) !=
     8c2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
	     (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
     8c6:	2b00      	cmp	r3, #0
     8c8:	da2f      	bge.n	92a <nordicsemi_nrf52_init+0xf6>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
     8ca:	4b24      	ldr	r3, [pc, #144]	; (95c <nordicsemi_nrf52_init+0x128>)
     8cc:	2201      	movs	r2, #1
     8ce:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     8d2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     8d6:	2a00      	cmp	r2, #0
     8d8:	d0fb      	beq.n	8d2 <nordicsemi_nrf52_init+0x9e>
		NRF_UICR->PSELRESET[0] = 18;
     8da:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
     8de:	2112      	movs	r1, #18
     8e0:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     8e4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     8e8:	2a00      	cmp	r2, #0
     8ea:	d0fb      	beq.n	8e4 <nordicsemi_nrf52_init+0xb0>
		NRF_UICR->PSELRESET[1] = 18;
     8ec:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     8f0:	2212      	movs	r2, #18
     8f2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     8f6:	4b19      	ldr	r3, [pc, #100]	; (95c <nordicsemi_nrf52_init+0x128>)
     8f8:	461a      	mov	r2, r3
     8fa:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
     8fe:	2900      	cmp	r1, #0
     900:	d0fb      	beq.n	8fa <nordicsemi_nrf52_init+0xc6>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
     902:	2100      	movs	r1, #0
     904:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     908:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
     90c:	2b00      	cmp	r3, #0
     90e:	d0fb      	beq.n	908 <nordicsemi_nrf52_init+0xd4>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     910:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     914:	4912      	ldr	r1, [pc, #72]	; (960 <nordicsemi_nrf52_init+0x12c>)
     916:	4b13      	ldr	r3, [pc, #76]	; (964 <nordicsemi_nrf52_init+0x130>)
     918:	68ca      	ldr	r2, [r1, #12]
     91a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
     91e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     920:	60cb      	str	r3, [r1, #12]
     922:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     926:	bf00      	nop
     928:	e7fd      	b.n	926 <nordicsemi_nrf52_init+0xf2>
static ALWAYS_INLINE void _ClearFaults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
     92a:	4b0d      	ldr	r3, [pc, #52]	; (960 <nordicsemi_nrf52_init+0x12c>)
     92c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     930:	629a      	str	r2, [r3, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
     932:	62da      	str	r2, [r3, #44]	; 0x2c
	SystemCoreClock = __SYSTEM_CLOCK_64M;
     934:	4b0c      	ldr	r3, [pc, #48]	; (968 <nordicsemi_nrf52_init+0x134>)
     936:	4a0d      	ldr	r2, [pc, #52]	; (96c <nordicsemi_nrf52_init+0x138>)
     938:	601a      	str	r2, [r3, #0]
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
     93a:	f381 8811 	msr	BASEPRI, r1
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     93e:	2000      	movs	r0, #0
     940:	bd08      	pop	{r3, pc}
     942:	bf00      	nop
     944:	4000568c 	.word	0x4000568c
     948:	00038148 	.word	0x00038148
     94c:	4000f000 	.word	0x4000f000
     950:	40000ee4 	.word	0x40000ee4
     954:	10000258 	.word	0x10000258
     958:	40029640 	.word	0x40029640
     95c:	4001e000 	.word	0x4001e000
     960:	e000ed00 	.word	0xe000ed00
     964:	05fa0004 	.word	0x05fa0004
     968:	20003724 	.word	0x20003724
     96c:	03d09000 	.word	0x03d09000

00000970 <_ExcExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
     970:	4808      	ldr	r0, [pc, #32]	; (994 <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
     972:	6881      	ldr	r1, [r0, #8]

    /*
     * Non-preemptible thread ? Do not schedule (see explanation of
     * preempt field in kernel_struct.h).
     */
    ldrh r2, [r1, #_thread_offset_to_preempt]
     974:	894a      	ldrh	r2, [r1, #10]
    cmp r2, #_PREEMPT_THRESHOLD
     976:	2a7f      	cmp	r2, #127	; 0x7f
    bhi _EXIT_EXC
     978:	d80b      	bhi.n	992 <_EXIT_EXC>

    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
     97a:	69c0      	ldr	r0, [r0, #28]
    cmp r0, r1
     97c:	4288      	cmp	r0, r1
    beq _EXIT_EXC
     97e:	d008      	beq.n	992 <_EXIT_EXC>

#ifdef CONFIG_TIMESLICING
    push {lr}
     980:	b500      	push	{lr}
    bl _update_time_slice_before_swap
     982:	f009 fccb 	bl	a31c <_update_time_slice_before_swap>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    pop {r0}
    mov lr, r0
#else
    pop {lr}
     986:	f85d eb04 	ldr.w	lr, [sp], #4
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TIMESLICING */

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
     98a:	4903      	ldr	r1, [pc, #12]	; (998 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
     98c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
     990:	600a      	str	r2, [r1, #0]

00000992 <_EXIT_EXC>:
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

    bx lr
     992:	4770      	bx	lr
    ldr r0, =_kernel
     994:	200017e8 	.word	0x200017e8
    ldr r1, =_SCS_ICSR
     998:	e000ed04 	.word	0xe000ed04

0000099c <_IntLibInit>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     99c:	4804      	ldr	r0, [pc, #16]	; (9b0 <_IntLibInit+0x14>)
 * @return N/A
 */

void _IntLibInit(void)
{
	int irq = 0;
     99e:	2300      	movs	r3, #0
     9a0:	2120      	movs	r1, #32
     9a2:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
     9a4:	3301      	adds	r3, #1
     9a6:	2b2e      	cmp	r3, #46	; 0x2e
     9a8:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
     9ac:	d1f9      	bne.n	9a2 <_IntLibInit+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
     9ae:	4770      	bx	lr
     9b0:	e000e100 	.word	0xe000e100

000009b4 <__swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
     9b4:	4a08      	ldr	r2, [pc, #32]	; (9d8 <__swap+0x24>)
	_current->arch.swap_return_value = _k_neg_eagain;
     9b6:	4909      	ldr	r1, [pc, #36]	; (9dc <__swap+0x28>)
	_current->arch.basepri = key;
     9b8:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
     9ba:	6809      	ldr	r1, [r1, #0]
     9bc:	6659      	str	r1, [r3, #100]	; 0x64

	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
     9be:	4908      	ldr	r1, [pc, #32]	; (9e0 <__swap+0x2c>)
	_current->arch.basepri = key;
     9c0:	6618      	str	r0, [r3, #96]	; 0x60
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
     9c2:	684b      	ldr	r3, [r1, #4]
     9c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
     9c8:	604b      	str	r3, [r1, #4]
     9ca:	2300      	movs	r3, #0
     9cc:	f383 8811 	msr	BASEPRI, r3

	/* clear mask or enable all irqs to take a pendsv */
	irq_unlock(0);

	return _current->arch.swap_return_value;
     9d0:	6893      	ldr	r3, [r2, #8]
}
     9d2:	6e58      	ldr	r0, [r3, #100]	; 0x64
     9d4:	4770      	bx	lr
     9d6:	bf00      	nop
     9d8:	200017e8 	.word	0x200017e8
     9dc:	0000b58c 	.word	0x0000b58c
     9e0:	e000ed00 	.word	0xe000ed00

000009e4 <__pendsv>:
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_KERNEL_EVENT_LOGGER_CONTEXT_SWITCH  */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
     9e4:	490e      	ldr	r1, [pc, #56]	; (a20 <__pendsv+0x3c>)
    ldr r2, [r1, #_kernel_offset_to_current]
     9e6:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
     9e8:	2028      	movs	r0, #40	; 0x28
    add r0, r2
     9ea:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
     9ec:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
     9f0:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
     9f4:	4f0b      	ldr	r7, [pc, #44]	; (a24 <__pendsv+0x40>)
    ldr v3, =_SCS_ICSR_UNPENDSV
     9f6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
     9fa:	2020      	movs	r0, #32
    msr BASEPRI, r0
     9fc:	f380 8811 	msr	BASEPRI, r0
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, _kernel_offset_to_ready_q_cache]
     a00:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
     a02:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
     a04:	603e      	str	r6, [r7, #0]

    /* Restore previous interrupt disable state (irq_lock key) */
    ldr r0, [r2, #_thread_offset_to_basepri]
     a06:	6e10      	ldr	r0, [r2, #96]	; 0x60
    movs.n r3, #0
     a08:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
     a0a:	6613      	str	r3, [r2, #96]	; 0x60
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
     a0c:	f380 8811 	msr	BASEPRI, r0
    blx configure_mpu_user_context
    pop {r2, lr}
#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
     a10:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
     a14:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    msr PSP, ip
     a18:	f38c 8809 	msr	PSP, ip
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
    ldm sp!,{r0-r3} /* Load back regs ro to r4 */
#endif /* CONFIG_EXECUTION_BENCHMARKING */

    /* exc return */
    bx lr
     a1c:	4770      	bx	lr
     a1e:	0000      	.short	0x0000
    ldr r1, =_kernel
     a20:	200017e8 	.word	0x200017e8
    ldr v4, =_SCS_ICSR
     a24:	e000ed04 	.word	0xe000ed04

00000a28 <__svc>:
 *
 * @return N/A
 */

SECTION_FUNC(TEXT, __svc)
    tst lr, #0x4    /* did we come from thread mode ? */
     a28:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
     a2c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
     a2e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
     a32:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
     a36:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read  encoding */
    ldrh r1, [r1, #-2]
     a38:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 2: kernel panic or oops (software generated fatal exception)
    * 3: System call
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
     a3c:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    tst r2, #0x1
    bne _oops

    cmp r1, #0
#endif
    beq _context_switch
     a40:	d001      	beq.n	a46 <_context_switch>

    cmp r1, #2
     a42:	2902      	cmp	r1, #2
    beq _oops
     a44:	d007      	beq.n	a56 <_oops>

00000a46 <_context_switch>:
    /*
     * Unlock interrupts:
     * - in a SVC call, so protected against context switches
     * - allow PendSV, since it's running at prio 0xff
     */
    eors.n r0, r0
     a46:	4040      	eors	r0, r0
    msr BASEPRI, r0
     a48:	f380 8811 	msr	BASEPRI, r0

     /* set PENDSV bit, pending the PendSV exception */
    ldr r1, =_SCS_ICSR
     a4c:	4904      	ldr	r1, [pc, #16]	; (a60 <_oops+0xa>)
    ldr r2, =_SCS_ICSR_PENDSV
     a4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1, #0]
     a52:	600a      	str	r2, [r1, #0]

    /* handler mode exit, to PendSV */
    bx lr
     a54:	4770      	bx	lr

00000a56 <_oops>:

_oops:
    push {lr}
     a56:	b500      	push	{lr}
    blx _do_kernel_oops
     a58:	f000 fa2c 	bl	eb4 <_do_kernel_oops>
    pop {pc}
     a5c:	bd00      	pop	{pc}
     a5e:	0000      	.short	0x0000
    ldr r1, =_SCS_ICSR
     a60:	e000ed04 	.word	0xe000ed04

00000a64 <_FaultThreadShow.isra.2>:
 *
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _FaultThreadShow(const NANO_ESF *esf)
     a64:	b510      	push	{r4, lr}
     a66:	4604      	mov	r4, r0

K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_WAKEUP, k_wakeup, k_tid_t, thread);

K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
     a68:	f009 fc2e 	bl	a2c8 <_impl_k_current_get>
{
	PR_EXC("  Executing thread ID (thread): %p\n"
     a6c:	6822      	ldr	r2, [r4, #0]
     a6e:	4601      	mov	r1, r0
	       "  Faulting instruction address:  0x%x\n",
	       k_current_get(), esf->pc);
}
     a70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PR_EXC("  Executing thread ID (thread): %p\n"
     a74:	4801      	ldr	r0, [pc, #4]	; (a7c <_FaultThreadShow.isra.2+0x18>)
     a76:	f000 bca9 	b.w	13cc <printk>
     a7a:	bf00      	nop
     a7c:	0000b133 	.word	0x0000b133

00000a80 <_UsageFault>:
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _UsageFault(const NANO_ESF *esf)
{
     a80:	b510      	push	{r4, lr}
     a82:	4604      	mov	r4, r0
	PR_EXC("***** USAGE FAULT *****\n");
     a84:	481a      	ldr	r0, [pc, #104]	; (af0 <_UsageFault+0x70>)
     a86:	f000 fca1 	bl	13cc <printk>

	_FaultThreadShow(esf);
     a8a:	f104 0018 	add.w	r0, r4, #24

	/* bits are sticky: they stack and must be reset */
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
     a8e:	4c19      	ldr	r4, [pc, #100]	; (af4 <_UsageFault+0x74>)
	_FaultThreadShow(esf);
     a90:	f7ff ffe8 	bl	a64 <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
     a94:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     a96:	019a      	lsls	r2, r3, #6
     a98:	d502      	bpl.n	aa0 <_UsageFault+0x20>
		PR_EXC("  Division by zero\n");
     a9a:	4817      	ldr	r0, [pc, #92]	; (af8 <_UsageFault+0x78>)
     a9c:	f000 fc96 	bl	13cc <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) {
     aa0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     aa2:	01db      	lsls	r3, r3, #7
     aa4:	d502      	bpl.n	aac <_UsageFault+0x2c>
		PR_EXC("  Unaligned memory access\n");
     aa6:	4815      	ldr	r0, [pc, #84]	; (afc <_UsageFault+0x7c>)
     aa8:	f000 fc90 	bl	13cc <printk>
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if (SCB->CFSR & SCB_CFSR_STKOF_Msk) {
		PR_EXC("  Stack overflow\n");
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if (SCB->CFSR & SCB_CFSR_NOCP_Msk) {
     aac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     aae:	0318      	lsls	r0, r3, #12
     ab0:	d502      	bpl.n	ab8 <_UsageFault+0x38>
		PR_EXC("  No coprocessor instructions\n");
     ab2:	4813      	ldr	r0, [pc, #76]	; (b00 <_UsageFault+0x80>)
     ab4:	f000 fc8a 	bl	13cc <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVPC_Msk) {
     ab8:	4c0e      	ldr	r4, [pc, #56]	; (af4 <_UsageFault+0x74>)
     aba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     abc:	0359      	lsls	r1, r3, #13
     abe:	d502      	bpl.n	ac6 <_UsageFault+0x46>
		PR_EXC("  Illegal load of EXC_RETURN into PC\n");
     ac0:	4810      	ldr	r0, [pc, #64]	; (b04 <_UsageFault+0x84>)
     ac2:	f000 fc83 	bl	13cc <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVSTATE_Msk) {
     ac6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     ac8:	039a      	lsls	r2, r3, #14
     aca:	d502      	bpl.n	ad2 <_UsageFault+0x52>
		PR_EXC("  Illegal use of the EPSR\n");
     acc:	480e      	ldr	r0, [pc, #56]	; (b08 <_UsageFault+0x88>)
     ace:	f000 fc7d 	bl	13cc <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) {
     ad2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     ad4:	03db      	lsls	r3, r3, #15
     ad6:	d502      	bpl.n	ade <_UsageFault+0x5e>
		PR_EXC("  Attempt to execute undefined instruction\n");
     ad8:	480c      	ldr	r0, [pc, #48]	; (b0c <_UsageFault+0x8c>)
     ada:	f000 fc77 	bl	13cc <printk>
	}

	/* clear USFR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
     ade:	4a05      	ldr	r2, [pc, #20]	; (af4 <_UsageFault+0x74>)
     ae0:	6a93      	ldr	r3, [r2, #40]	; 0x28
     ae2:	ea6f 4303 	mvn.w	r3, r3, lsl #16
     ae6:	ea6f 4313 	mvn.w	r3, r3, lsr #16
     aea:	6293      	str	r3, [r2, #40]	; 0x28
     aec:	bd10      	pop	{r4, pc}
     aee:	bf00      	nop
     af0:	0000b234 	.word	0x0000b234
     af4:	e000ed00 	.word	0xe000ed00
     af8:	0000b24d 	.word	0x0000b24d
     afc:	0000b261 	.word	0x0000b261
     b00:	0000b27c 	.word	0x0000b27c
     b04:	0000b29b 	.word	0x0000b29b
     b08:	0000b2c1 	.word	0x0000b2c1
     b0c:	0000b2dc 	.word	0x0000b2dc

00000b10 <_MpuFault>:
{
     b10:	b538      	push	{r3, r4, r5, lr}
     b12:	4604      	mov	r4, r0
	PR_EXC("***** MPU FAULT *****\n");
     b14:	4819      	ldr	r0, [pc, #100]	; (b7c <_MpuFault+0x6c>)
{
     b16:	460d      	mov	r5, r1
	PR_EXC("***** MPU FAULT *****\n");
     b18:	f000 fc58 	bl	13cc <printk>
	_FaultThreadShow(esf);
     b1c:	f104 0018 	add.w	r0, r4, #24
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
     b20:	4c17      	ldr	r4, [pc, #92]	; (b80 <_MpuFault+0x70>)
	_FaultThreadShow(esf);
     b22:	f7ff ff9f 	bl	a64 <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
     b26:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     b28:	06d9      	lsls	r1, r3, #27
     b2a:	d504      	bpl.n	b36 <_MpuFault+0x26>
		PR_EXC("  Stacking error\n");
     b2c:	4815      	ldr	r0, [pc, #84]	; (b84 <_MpuFault+0x74>)
}
     b2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		PR_EXC("  Floating-point lazy state preservation error\n");
     b32:	f000 bc4b 	b.w	13cc <printk>
	} else if (SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) {
     b36:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     b38:	071a      	lsls	r2, r3, #28
     b3a:	d501      	bpl.n	b40 <_MpuFault+0x30>
		PR_EXC("  Unstacking error\n");
     b3c:	4812      	ldr	r0, [pc, #72]	; (b88 <_MpuFault+0x78>)
     b3e:	e7f6      	b.n	b2e <_MpuFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) {
     b40:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     b42:	079b      	lsls	r3, r3, #30
     b44:	d50f      	bpl.n	b66 <_MpuFault+0x56>
		PR_EXC("  Data Access Violation\n");
     b46:	4811      	ldr	r0, [pc, #68]	; (b8c <_MpuFault+0x7c>)
     b48:	f000 fc40 	bl	13cc <printk>
		STORE_xFAR(mmfar, SCB->MMFAR);
     b4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
		if (SCB->CFSR & SCB_CFSR_MMARVALID_Msk) {
     b4e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     b50:	0618      	lsls	r0, r3, #24
     b52:	d512      	bpl.n	b7a <_MpuFault+0x6a>
			PR_EXC("  Address: 0x%x\n", mmfar);
     b54:	480e      	ldr	r0, [pc, #56]	; (b90 <_MpuFault+0x80>)
     b56:	f000 fc39 	bl	13cc <printk>
			if (fromHardFault) {
     b5a:	b175      	cbz	r5, b7a <_MpuFault+0x6a>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
     b5c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     b5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
     b62:	62a3      	str	r3, [r4, #40]	; 0x28
     b64:	bd38      	pop	{r3, r4, r5, pc}
	} else if (SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) {
     b66:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     b68:	07da      	lsls	r2, r3, #31
     b6a:	d501      	bpl.n	b70 <_MpuFault+0x60>
		PR_EXC("  Instruction Access Violation\n");
     b6c:	4809      	ldr	r0, [pc, #36]	; (b94 <_MpuFault+0x84>)
     b6e:	e7de      	b.n	b2e <_MpuFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_MLSPERR_Msk) {
     b70:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     b72:	069b      	lsls	r3, r3, #26
     b74:	d501      	bpl.n	b7a <_MpuFault+0x6a>
		PR_EXC("  Floating-point lazy state preservation error\n");
     b76:	4808      	ldr	r0, [pc, #32]	; (b98 <_MpuFault+0x88>)
     b78:	e7d9      	b.n	b2e <_MpuFault+0x1e>
     b7a:	bd38      	pop	{r3, r4, r5, pc}
     b7c:	0000b17d 	.word	0x0000b17d
     b80:	e000ed00 	.word	0xe000ed00
     b84:	0000b194 	.word	0x0000b194
     b88:	0000b1a6 	.word	0x0000b1a6
     b8c:	0000b1ba 	.word	0x0000b1ba
     b90:	0000b1d3 	.word	0x0000b1d3
     b94:	0000b1e4 	.word	0x0000b1e4
     b98:	0000b204 	.word	0x0000b204

00000b9c <_BusFault>:
{
     b9c:	b538      	push	{r3, r4, r5, lr}
     b9e:	4604      	mov	r4, r0
	PR_EXC("***** BUS FAULT *****\n");
     ba0:	481d      	ldr	r0, [pc, #116]	; (c18 <_BusFault+0x7c>)
{
     ba2:	460d      	mov	r5, r1
	PR_EXC("***** BUS FAULT *****\n");
     ba4:	f000 fc12 	bl	13cc <printk>
	_FaultThreadShow(esf);
     ba8:	f104 0018 	add.w	r0, r4, #24
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
     bac:	4c1b      	ldr	r4, [pc, #108]	; (c1c <_BusFault+0x80>)
	_FaultThreadShow(esf);
     bae:	f7ff ff59 	bl	a64 <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
     bb2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     bb4:	04d8      	lsls	r0, r3, #19
     bb6:	d504      	bpl.n	bc2 <_BusFault+0x26>
		PR_EXC("  Stacking error\n");
     bb8:	4819      	ldr	r0, [pc, #100]	; (c20 <_BusFault+0x84>)
}
     bba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		PR_EXC("  Floating-point lazy state preservation error\n");
     bbe:	f000 bc05 	b.w	13cc <printk>
	} else if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
     bc2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     bc4:	0519      	lsls	r1, r3, #20
     bc6:	d501      	bpl.n	bcc <_BusFault+0x30>
		PR_EXC("  Unstacking error\n");
     bc8:	4816      	ldr	r0, [pc, #88]	; (c24 <_BusFault+0x88>)
     bca:	e7f6      	b.n	bba <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
     bcc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     bce:	059a      	lsls	r2, r3, #22
     bd0:	d514      	bpl.n	bfc <_BusFault+0x60>
		PR_EXC("  Precise data bus error\n");
     bd2:	4815      	ldr	r0, [pc, #84]	; (c28 <_BusFault+0x8c>)
     bd4:	f000 fbfa 	bl	13cc <printk>
		STORE_xFAR(bfar, SCB->BFAR);
     bd8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
		if (SCB->CFSR & SCB_CFSR_BFARVALID_Msk) {
     bda:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     bdc:	041b      	lsls	r3, r3, #16
     bde:	d507      	bpl.n	bf0 <_BusFault+0x54>
			PR_EXC("  Address: 0x%x\n", bfar);
     be0:	4812      	ldr	r0, [pc, #72]	; (c2c <_BusFault+0x90>)
     be2:	f000 fbf3 	bl	13cc <printk>
			if (fromHardFault) {
     be6:	b11d      	cbz	r5, bf0 <_BusFault+0x54>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
     be8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     bea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
     bee:	62a3      	str	r3, [r4, #40]	; 0x28
		if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
     bf0:	4b0a      	ldr	r3, [pc, #40]	; (c1c <_BusFault+0x80>)
     bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     bf4:	0558      	lsls	r0, r3, #21
     bf6:	d50e      	bpl.n	c16 <_BusFault+0x7a>
			PR_EXC("  Imprecise data bus error\n");
     bf8:	480d      	ldr	r0, [pc, #52]	; (c30 <_BusFault+0x94>)
     bfa:	e7de      	b.n	bba <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
     bfc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     bfe:	0559      	lsls	r1, r3, #21
     c00:	d4fa      	bmi.n	bf8 <_BusFault+0x5c>
	} else if (SCB->CFSR & SCB_CFSR_IBUSERR_Msk) {
     c02:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     c04:	05da      	lsls	r2, r3, #23
     c06:	d501      	bpl.n	c0c <_BusFault+0x70>
		PR_EXC("  Instruction bus error\n");
     c08:	480a      	ldr	r0, [pc, #40]	; (c34 <_BusFault+0x98>)
     c0a:	e7d6      	b.n	bba <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
     c0c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     c0e:	049b      	lsls	r3, r3, #18
     c10:	d501      	bpl.n	c16 <_BusFault+0x7a>
		PR_EXC("  Floating-point lazy state preservation error\n");
     c12:	4809      	ldr	r0, [pc, #36]	; (c38 <_BusFault+0x9c>)
     c14:	e7d1      	b.n	bba <_BusFault+0x1e>
     c16:	bd38      	pop	{r3, r4, r5, pc}
     c18:	0000affa 	.word	0x0000affa
     c1c:	e000ed00 	.word	0xe000ed00
     c20:	0000b194 	.word	0x0000b194
     c24:	0000b1a6 	.word	0x0000b1a6
     c28:	0000b011 	.word	0x0000b011
     c2c:	0000b1d3 	.word	0x0000b1d3
     c30:	0000b02b 	.word	0x0000b02b
     c34:	0000b047 	.word	0x0000b047
     c38:	0000b204 	.word	0x0000b204

00000c3c <_Fault>:
 *
 * @param esf ESF on the stack, either MSP or PSP depending at what processor
 *            state the exception was taken.
 */
void _Fault(const NANO_ESF *esf)
{
     c3c:	b538      	push	{r3, r4, r5, lr}
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
     c3e:	4d27      	ldr	r5, [pc, #156]	; (cdc <_Fault+0xa0>)
     c40:	686b      	ldr	r3, [r5, #4]
     c42:	f3c3 0308 	ubfx	r3, r3, #0, #9
	switch (fault) {
     c46:	1eda      	subs	r2, r3, #3
{
     c48:	4604      	mov	r4, r0
	switch (fault) {
     c4a:	2a09      	cmp	r2, #9
     c4c:	d83a      	bhi.n	cc4 <_Fault+0x88>
     c4e:	e8df f002 	tbb	[pc, r2]
     c52:	3305      	.short	0x3305
     c54:	39392f35 	.word	0x39392f35
     c58:	37393939 	.word	0x37393939
	PR_EXC("***** HARD FAULT *****\n");
     c5c:	4820      	ldr	r0, [pc, #128]	; (ce0 <_Fault+0xa4>)
     c5e:	f000 fbb5 	bl	13cc <printk>
	if (SCB->HFSR & SCB_HFSR_VECTTBL_Msk) {
     c62:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
     c64:	079a      	lsls	r2, r3, #30
     c66:	d503      	bpl.n	c70 <_Fault+0x34>
		PR_EXC("  Bus fault on vector table read\n");
     c68:	481e      	ldr	r0, [pc, #120]	; (ce4 <_Fault+0xa8>)
	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
     c6a:	f000 fbaf 	bl	13cc <printk>
     c6e:	e00c      	b.n	c8a <_Fault+0x4e>
	} else if (SCB->HFSR & SCB_HFSR_FORCED_Msk) {
     c70:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
     c72:	005b      	lsls	r3, r3, #1
     c74:	d509      	bpl.n	c8a <_Fault+0x4e>
		PR_EXC("  Fault escalation (see below)\n");
     c76:	481c      	ldr	r0, [pc, #112]	; (ce8 <_Fault+0xac>)
     c78:	f000 fba8 	bl	13cc <printk>
		if (SCB_MMFSR) {
     c7c:	4b1b      	ldr	r3, [pc, #108]	; (cec <_Fault+0xb0>)
     c7e:	781b      	ldrb	r3, [r3, #0]
     c80:	b14b      	cbz	r3, c96 <_Fault+0x5a>
			_MpuFault(esf, 1);
     c82:	2101      	movs	r1, #1
		_MpuFault(esf, 0);
     c84:	4620      	mov	r0, r4
     c86:	f7ff ff43 	bl	b10 <_MpuFault>

	FAULT_DUMP(esf, fault);

	_SysFatalErrorHandler(_NANO_ERR_HW_EXCEPTION, esf);
     c8a:	4621      	mov	r1, r4
     c8c:	2000      	movs	r0, #0
}
     c8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(_NANO_ERR_HW_EXCEPTION, esf);
     c92:	f000 b913 	b.w	ebc <_SysFatalErrorHandler>
		} else if (SCB_BFSR) {
     c96:	4b16      	ldr	r3, [pc, #88]	; (cf0 <_Fault+0xb4>)
     c98:	781b      	ldrb	r3, [r3, #0]
     c9a:	b123      	cbz	r3, ca6 <_Fault+0x6a>
			_BusFault(esf, 1);
     c9c:	2101      	movs	r1, #1
		_BusFault(esf, 0);
     c9e:	4620      	mov	r0, r4
     ca0:	f7ff ff7c 	bl	b9c <_BusFault>
     ca4:	e7f1      	b.n	c8a <_Fault+0x4e>
		} else if (SCB_UFSR) {
     ca6:	4b13      	ldr	r3, [pc, #76]	; (cf4 <_Fault+0xb8>)
     ca8:	881b      	ldrh	r3, [r3, #0]
     caa:	b29b      	uxth	r3, r3
     cac:	2b00      	cmp	r3, #0
     cae:	d0ec      	beq.n	c8a <_Fault+0x4e>
		_UsageFault(esf);
     cb0:	4620      	mov	r0, r4
     cb2:	f7ff fee5 	bl	a80 <_UsageFault>
     cb6:	e7e8      	b.n	c8a <_Fault+0x4e>
		_MpuFault(esf, 0);
     cb8:	2100      	movs	r1, #0
     cba:	e7e3      	b.n	c84 <_Fault+0x48>
		_BusFault(esf, 0);
     cbc:	2100      	movs	r1, #0
     cbe:	e7ee      	b.n	c9e <_Fault+0x62>
	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
     cc0:	480d      	ldr	r0, [pc, #52]	; (cf8 <_Fault+0xbc>)
     cc2:	e7d2      	b.n	c6a <_Fault+0x2e>
	PR_EXC("***** %s %d) *****\n",
     cc4:	480d      	ldr	r0, [pc, #52]	; (cfc <_Fault+0xc0>)
     cc6:	490e      	ldr	r1, [pc, #56]	; (d00 <_Fault+0xc4>)
     cc8:	f1a3 0210 	sub.w	r2, r3, #16
     ccc:	2b0f      	cmp	r3, #15
     cce:	bfd8      	it	le
     cd0:	4601      	movle	r1, r0
     cd2:	480c      	ldr	r0, [pc, #48]	; (d04 <_Fault+0xc8>)
     cd4:	f000 fb7a 	bl	13cc <printk>
     cd8:	e7d7      	b.n	c8a <_Fault+0x4e>
     cda:	bf00      	nop
     cdc:	e000ed00 	.word	0xe000ed00
     ce0:	0000b08e 	.word	0x0000b08e
     ce4:	0000b0a6 	.word	0x0000b0a6
     ce8:	0000b0c8 	.word	0x0000b0c8
     cec:	e000ed28 	.word	0xe000ed28
     cf0:	e000ed29 	.word	0xe000ed29
     cf4:	e000ed2a 	.word	0xe000ed2a
     cf8:	0000b0e8 	.word	0x0000b0e8
     cfc:	0000b060 	.word	0x0000b060
     d00:	0000b075 	.word	0x0000b075
     d04:	0000b11f 	.word	0x0000b11f

00000d08 <_FaultInit>:
 */
void _FaultInit(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
     d08:	4a02      	ldr	r2, [pc, #8]	; (d14 <_FaultInit+0xc>)
     d0a:	6953      	ldr	r3, [r2, #20]
     d0c:	f043 0310 	orr.w	r3, r3, #16
     d10:	6153      	str	r3, [r2, #20]
     d12:	4770      	bx	lr
     d14:	e000ed00 	.word	0xe000ed00

00000d18 <_arch_irq_enable>:
 *
 * @return N/A
 */
void _arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
     d18:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
     d1a:	2b00      	cmp	r3, #0
     d1c:	db08      	blt.n	d30 <_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     d1e:	2201      	movs	r2, #1
     d20:	f000 001f 	and.w	r0, r0, #31
     d24:	fa02 f000 	lsl.w	r0, r2, r0
     d28:	095b      	lsrs	r3, r3, #5
     d2a:	4a02      	ldr	r2, [pc, #8]	; (d34 <_arch_irq_enable+0x1c>)
     d2c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
     d30:	4770      	bx	lr
     d32:	bf00      	nop
     d34:	e000e100 	.word	0xe000e100

00000d38 <_arch_irq_disable>:
 *
 * @return N/A
 */
void _arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
     d38:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
     d3a:	2b00      	cmp	r3, #0
     d3c:	db0d      	blt.n	d5a <_arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     d3e:	2201      	movs	r2, #1
     d40:	095b      	lsrs	r3, r3, #5
     d42:	f000 001f 	and.w	r0, r0, #31
     d46:	fa02 f000 	lsl.w	r0, r2, r0
     d4a:	3320      	adds	r3, #32
     d4c:	4a03      	ldr	r2, [pc, #12]	; (d5c <_arch_irq_disable+0x24>)
     d4e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
     d52:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     d56:	f3bf 8f6f 	isb	sy
     d5a:	4770      	bx	lr
     d5c:	e000e100 	.word	0xe000e100

00000d60 <_arch_irq_is_enabled>:
 * @param irq IRQ line
 * @return interrupt enable state, true or false
 */
int _arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & (1 << BIT_FROM_IRQ(irq));
     d60:	0942      	lsrs	r2, r0, #5
     d62:	4b05      	ldr	r3, [pc, #20]	; (d78 <_arch_irq_is_enabled+0x18>)
     d64:	f000 001f 	and.w	r0, r0, #31
     d68:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
     d6c:	2301      	movs	r3, #1
     d6e:	fa03 f000 	lsl.w	r0, r3, r0
}
     d72:	4010      	ands	r0, r2
     d74:	4770      	bx	lr
     d76:	bf00      	nop
     d78:	e000e100 	.word	0xe000e100

00000d7c <_irq_priority_set>:
	 */
	__ASSERT(prio <= ((1 << CONFIG_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << CONFIG_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
     d7c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
     d7e:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     d80:	bfa8      	it	ge
     d82:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
     d86:	f101 0101 	add.w	r1, r1, #1
     d8a:	ea4f 1141 	mov.w	r1, r1, lsl #5
     d8e:	bfad      	iteet	ge
     d90:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     d94:	f000 000f 	andlt.w	r0, r0, #15
     d98:	4b03      	ldrlt	r3, [pc, #12]	; (da8 <_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     d9a:	b2c9      	uxtbge	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     d9c:	bfb6      	itet	lt
     d9e:	b2c9      	uxtblt	r1, r1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     da0:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     da4:	5419      	strblt	r1, [r3, r0]
     da6:	4770      	bx	lr
     da8:	e000ed14 	.word	0xe000ed14

00000dac <_irq_spurious>:
 * @return N/A
 */
void _irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	__reserved();
     dac:	f000 b842 	b.w	e34 <__bus_fault>

00000db0 <_arch_isr_direct_pm>:
 * See https://jira.zephyrproject.org/browse/ZEP-1595
 */

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
     db0:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
     db2:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
     db4:	4b04      	ldr	r3, [pc, #16]	; (dc8 <_arch_isr_direct_pm+0x18>)
     db6:	6998      	ldr	r0, [r3, #24]
     db8:	b118      	cbz	r0, dc2 <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
     dba:	2200      	movs	r2, #0
     dbc:	619a      	str	r2, [r3, #24]
		_sys_power_save_idle_exit(idle_val);
     dbe:	f008 fef9 	bl	9bb4 <_sys_power_save_idle_exit>
	}

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
     dc2:	b662      	cpsie	i
     dc4:	bd08      	pop	{r3, pc}
     dc6:	bf00      	nop
     dc8:	200017e8 	.word	0x200017e8

00000dcc <_new_thread>:

void _new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
     dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     dce:	460c      	mov	r4, r1
     dd0:	4616      	mov	r6, r2
     dd2:	461f      	mov	r7, r3
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
     dd4:	2204      	movs	r2, #4
     dd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     dd8:	9909      	ldr	r1, [sp, #36]	; 0x24
     dda:	4605      	mov	r5, r0
     ddc:	f009 fd82 	bl	a8e4 <_init_thread_base>

	_new_thread_init(thread, pStackMem, stackEnd - pStackMem, priority,
			 options);

	/* carve the thread entry struct from the "base" of the stack */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
     de0:	f1a6 0120 	sub.w	r1, r6, #32
     de4:	4421      	add	r1, r4
#else
	pInitCtx->pc = (u32_t)_thread_entry;
#endif

	/* force ARM mode by clearing LSB of address */
	pInitCtx->pc &= 0xfffffffe;
     de6:	4a0c      	ldr	r2, [pc, #48]	; (e18 <_new_thread+0x4c>)
#if defined(CONFIG_USERSPACE)
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (u32_t)pStack;
     de8:	65ac      	str	r4, [r5, #88]	; 0x58
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
     dea:	f021 0107 	bic.w	r1, r1, #7
	thread->init_data = NULL;
     dee:	2300      	movs	r3, #0
	pInitCtx->pc &= 0xfffffffe;
     df0:	f022 0201 	bic.w	r2, r2, #1
     df4:	64eb      	str	r3, [r5, #76]	; 0x4c
	thread->fn_abort = NULL;
     df6:	652b      	str	r3, [r5, #80]	; 0x50
	thread->stack_info.size = (u32_t)stackSize;
     df8:	65ee      	str	r6, [r5, #92]	; 0x5c
     dfa:	618a      	str	r2, [r1, #24]

	pInitCtx->a1 = (u32_t)pEntry;
	pInitCtx->a2 = (u32_t)parameter1;
     dfc:	9a06      	ldr	r2, [sp, #24]
     dfe:	604a      	str	r2, [r1, #4]
	pInitCtx->a3 = (u32_t)parameter2;
     e00:	9a07      	ldr	r2, [sp, #28]
     e02:	608a      	str	r2, [r1, #8]
	pInitCtx->a4 = (u32_t)parameter3;
     e04:	9a08      	ldr	r2, [sp, #32]
     e06:	60ca      	str	r2, [r1, #12]
	pInitCtx->a1 = (u32_t)pEntry;
     e08:	600f      	str	r7, [r1, #0]
	pInitCtx->xpsr =
     e0a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     e0e:	61ca      	str	r2, [r1, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
     e10:	64a9      	str	r1, [r5, #72]	; 0x48
	thread->arch.basepri = 0;
     e12:	662b      	str	r3, [r5, #96]	; 0x60
     e14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     e16:	bf00      	nop
     e18:	0000a759 	.word	0x0000a759

00000e1c <_CpuIdleInit>:
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
     e1c:	4901      	ldr	r1, [pc, #4]	; (e24 <_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
     e1e:	2210      	movs	r2, #16
	str r2, [r1]
     e20:	600a      	str	r2, [r1, #0]
	bx lr
     e22:	4770      	bx	lr
	ldr r1, =_SCB_SCR
     e24:	e000ed10 	.word	0xe000ed10

00000e28 <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
     e28:	4040      	eors	r0, r0
	msr BASEPRI, r0
     e2a:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
     e2e:	bf30      	wfi

	bx lr
     e30:	4770      	bx	lr
     e32:	bf00      	nop

00000e34 <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
     e34:	4040      	eors	r0, r0
	msr BASEPRI, r0
     e36:	f380 8811 	msr	BASEPRI, r0

	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
     e3a:	f8df c01c 	ldr.w	ip, [pc, #28]	; e58 <__bus_fault+0x24>
	ldr ip, [ip]
     e3e:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
     e42:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
     e46:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
     e48:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
     e4c:	f3ef 8009 	mrsne	r0, PSP
				 * frame is on the PSP */
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	push {lr}
     e50:	b500      	push	{lr}
	bl _Fault
     e52:	f7ff fef3 	bl	c3c <_Fault>

	pop {pc}
     e56:	bd00      	pop	{pc}
	ldr ip, =_SCS_ICSR
     e58:	e000ed04 	.word	0xe000ed04

00000e5c <_NanoFatalErrorHandler>:
 * @param pEsf pointer to the exception stack frame
 */
void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
	switch (reason) {
     e5c:	2804      	cmp	r0, #4
{
     e5e:	b538      	push	{r3, r4, r5, lr}
     e60:	4604      	mov	r4, r0
     e62:	460d      	mov	r5, r1
	switch (reason) {
     e64:	d013      	beq.n	e8e <_NanoFatalErrorHandler+0x32>
     e66:	2805      	cmp	r0, #5
     e68:	d013      	beq.n	e92 <_NanoFatalErrorHandler+0x36>
     e6a:	2803      	cmp	r0, #3
     e6c:	d113      	bne.n	e96 <_NanoFatalErrorHandler+0x3a>
		printk("***** Stack Check Fail! *****\n");
		break;
#endif /* CONFIG_STACK_CANARIES */

	case _NANO_ERR_ALLOCATION_FAIL:
		printk("**** Kernel Allocation Failure! ****\n");
     e6e:	480c      	ldr	r0, [pc, #48]	; (ea0 <_NanoFatalErrorHandler+0x44>)
		break;

	case _NANO_ERR_KERNEL_OOPS:
		printk("***** Kernel OOPS! *****\n");
     e70:	f000 faac 	bl	13cc <printk>
     e74:	f009 fa28 	bl	a2c8 <_impl_k_current_get>

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
		break;
	}
	printk("Current thread ID = %p\n"
     e78:	69aa      	ldr	r2, [r5, #24]
     e7a:	4601      	mov	r1, r0
     e7c:	4809      	ldr	r0, [pc, #36]	; (ea4 <_NanoFatalErrorHandler+0x48>)
     e7e:	f000 faa5 	bl	13cc <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	_SysFatalErrorHandler(reason, pEsf);
     e82:	4629      	mov	r1, r5
     e84:	4620      	mov	r0, r4
}
     e86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(reason, pEsf);
     e8a:	f000 b817 	b.w	ebc <_SysFatalErrorHandler>
		printk("***** Kernel OOPS! *****\n");
     e8e:	4806      	ldr	r0, [pc, #24]	; (ea8 <_NanoFatalErrorHandler+0x4c>)
     e90:	e7ee      	b.n	e70 <_NanoFatalErrorHandler+0x14>
		printk("***** Kernel Panic! *****\n");
     e92:	4806      	ldr	r0, [pc, #24]	; (eac <_NanoFatalErrorHandler+0x50>)
     e94:	e7ec      	b.n	e70 <_NanoFatalErrorHandler+0x14>
		printk("**** Unknown Fatal Error %d! ****\n", reason);
     e96:	4601      	mov	r1, r0
     e98:	4805      	ldr	r0, [pc, #20]	; (eb0 <_NanoFatalErrorHandler+0x54>)
     e9a:	f000 fa97 	bl	13cc <printk>
		break;
     e9e:	e7e9      	b.n	e74 <_NanoFatalErrorHandler+0x18>
     ea0:	0000b308 	.word	0x0000b308
     ea4:	0000b386 	.word	0x0000b386
     ea8:	0000b32e 	.word	0x0000b32e
     eac:	0000b348 	.word	0x0000b348
     eb0:	0000b363 	.word	0x0000b363

00000eb4 <_do_kernel_oops>:

void _do_kernel_oops(const NANO_ESF *esf)
{
     eb4:	4601      	mov	r1, r0
	_NanoFatalErrorHandler(esf->r0, esf);
     eb6:	6800      	ldr	r0, [r0, #0]
     eb8:	f7ff bfd0 	b.w	e5c <_NanoFatalErrorHandler>

00000ebc <_SysFatalErrorHandler>:
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
     ebc:	2805      	cmp	r0, #5
{
     ebe:	b510      	push	{r4, lr}
	if (reason == _NANO_ERR_KERNEL_PANIC) {
     ec0:	d00c      	beq.n	edc <_SysFatalErrorHandler+0x20>
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
     ec2:	f009 fc31 	bl	a728 <k_is_in_isr>
     ec6:	b160      	cbz	r0, ee2 <_SysFatalErrorHandler+0x26>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
     ec8:	f009 fc2e 	bl	a728 <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
     ecc:	4b0c      	ldr	r3, [pc, #48]	; (f00 <_SysFatalErrorHandler+0x44>)
     ece:	490d      	ldr	r1, [pc, #52]	; (f04 <_SysFatalErrorHandler+0x48>)
     ed0:	2800      	cmp	r0, #0
     ed2:	bf08      	it	eq
     ed4:	4619      	moveq	r1, r3
     ed6:	480c      	ldr	r0, [pc, #48]	; (f08 <_SysFatalErrorHandler+0x4c>)
     ed8:	f000 fa78 	bl	13cc <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
     edc:	f7ff ffa4 	bl	e28 <k_cpu_idle>
     ee0:	e7fc      	b.n	edc <_SysFatalErrorHandler+0x20>
	if (k_is_in_isr() || _is_thread_essential()) {
     ee2:	f009 fc31 	bl	a748 <_is_thread_essential>
     ee6:	2800      	cmp	r0, #0
     ee8:	d1ee      	bne.n	ec8 <_SysFatalErrorHandler+0xc>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
     eea:	4c08      	ldr	r4, [pc, #32]	; (f0c <_SysFatalErrorHandler+0x50>)
     eec:	4808      	ldr	r0, [pc, #32]	; (f10 <_SysFatalErrorHandler+0x54>)
     eee:	68a1      	ldr	r1, [r4, #8]
     ef0:	f000 fa6c 	bl	13cc <printk>

K_SYSCALL_DECLARE1(K_SYSCALL_K_THREAD_CANCEL, k_thread_cancel, int, k_tid_t, thread);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
     ef4:	68a0      	ldr	r0, [r4, #8]
	}
	CODE_UNREACHABLE;
}
     ef6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     efa:	f000 b80b 	b.w	f14 <_impl_k_thread_abort>
     efe:	bf00      	nop
     f00:	0000b3c6 	.word	0x0000b3c6
     f04:	0000b3c2 	.word	0x0000b3c2
     f08:	0000b3d7 	.word	0x0000b3d7
     f0c:	200017e8 	.word	0x200017e8
     f10:	0000b3f7 	.word	0x0000b3f7

00000f14 <_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void _k_thread_single_abort(struct k_thread *thread);

void _impl_k_thread_abort(k_tid_t thread)
{
     f14:	b538      	push	{r3, r4, r5, lr}
     f16:	4605      	mov	r5, r0
	__asm__ volatile(
     f18:	f04f 0320 	mov.w	r3, #32
     f1c:	f3ef 8411 	mrs	r4, BASEPRI
     f20:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	_k_thread_single_abort(thread);
     f24:	f009 fc6e 	bl	a804 <_k_thread_single_abort>
	_thread_monitor_exit(thread);

	if (_current == thread) {
     f28:	4b0b      	ldr	r3, [pc, #44]	; (f58 <_impl_k_thread_abort+0x44>)
     f2a:	689b      	ldr	r3, [r3, #8]
     f2c:	429d      	cmp	r5, r3
     f2e:	d10d      	bne.n	f4c <_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
     f30:	4b0a      	ldr	r3, [pc, #40]	; (f5c <_impl_k_thread_abort+0x48>)
     f32:	685a      	ldr	r2, [r3, #4]
     f34:	f3c2 0208 	ubfx	r2, r2, #0, #9
     f38:	b922      	cbnz	r2, f44 <_impl_k_thread_abort+0x30>
extern unsigned int __swap(unsigned int key);

static inline unsigned int _Swap(unsigned int key)
{
	_check_stack_sentinel();
	_update_time_slice_before_swap();
     f3a:	f009 f9ef 	bl	a31c <_update_time_slice_before_swap>

	return __swap(key);
     f3e:	4620      	mov	r0, r4
     f40:	f7ff fd38 	bl	9b4 <__swap>
			_Swap(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
     f44:	685a      	ldr	r2, [r3, #4]
     f46:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
     f4a:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule_threads(key);
     f4c:	4620      	mov	r0, r4
}
     f4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_reschedule_threads(key);
     f52:	f009 b947 	b.w	a1e4 <_reschedule_threads>
     f56:	bf00      	nop
     f58:	200017e8 	.word	0x200017e8
     f5c:	e000ed00 	.word	0xe000ed00

00000f60 <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {lr}		/* lr is now the first item on the stack */
     f60:	b500      	push	{lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, _sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
     f62:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
     f64:	4a0b      	ldr	r2, [pc, #44]	; (f94 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
     f66:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
     f68:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	blx _sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
     f6a:	bf1e      	ittt	ne
	movne	r1, #0
     f6c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
     f6e:	6191      	strne	r1, [r2, #24]
		blxne	_sys_power_save_idle_exit
     f70:	f008 fe20 	blne	9bb4 <_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
     f74:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
     f76:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
     f7a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
     f7e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
     f82:	4905      	ldr	r1, [pc, #20]	; (f98 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
     f84:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
     f86:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r4 regs */
#endif
	blx r3		/* call ISR */
     f88:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {lr}
     f8a:	f85d eb04 	ldr.w	lr, [sp], #4
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* exception return is done in _IntExit() */
	b _IntExit
     f8e:	f7ff bcef 	b.w	970 <_ExcExit>
     f92:	0000      	.short	0x0000
	ldr r2, =_kernel
     f94:	200017e8 	.word	0x200017e8
	ldr r1, =_sw_isr_table
     f98:	000000f8 	.word	0x000000f8

00000f9c <__reset>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
     f9c:	2020      	movs	r0, #32
    msr BASEPRI, r0
     f9e:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialisation.
     */
    ldr r0, =_interrupt_stack
     fa2:	4805      	ldr	r0, [pc, #20]	; (fb8 <__reset+0x1c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
     fa4:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
     fa8:	1840      	adds	r0, r0, r1
    msr PSP, r0
     faa:	f380 8809 	msr	PSP, r0
    movs.n r0, #2	/* switch to using PSP (bit1 of CONTROL reg) */
     fae:	2002      	movs	r0, #2
    msr CONTROL, r0
     fb0:	f380 8814 	msr	CONTROL, r0

    b _PrepC
     fb4:	f000 b806 	b.w	fc4 <_PrepC>
    ldr r0, =_interrupt_stack
     fb8:	20002ae0 	.word	0x20002ae0

00000fbc <_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(_SysNmiOnReset)

SECTION_FUNC(TEXT, _SysNmiOnReset)
    wfi
     fbc:	bf30      	wfi
    b _SysNmiOnReset
     fbe:	f7ff bffd 	b.w	fbc <_SysNmiOnReset>
     fc2:	bf00      	nop

00000fc4 <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
     fc4:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
     fc6:	4b07      	ldr	r3, [pc, #28]	; (fe4 <_PrepC+0x20>)
     fc8:	4a07      	ldr	r2, [pc, #28]	; (fe8 <_PrepC+0x24>)
     fca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     fce:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
     fd0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     fd4:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	_bss_zero();
     fd8:	f008 fe1c 	bl	9c14 <_bss_zero>
	_data_copy();
     fdc:	f008 fe24 	bl	9c28 <_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0;
#endif
	_Cstart();
     fe0:	f008 fe4a 	bl	9c78 <_Cstart>
     fe4:	00000000 	.word	0x00000000
     fe8:	e000ed00 	.word	0xe000ed00

00000fec <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
     fec:	b508      	push	{r3, lr}
	handler();
     fee:	f7ff ffe5 	bl	fbc <_SysNmiOnReset>
	_ExcExit();
}
     ff2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	_ExcExit();
     ff6:	f7ff bcbb 	b.w	970 <_ExcExit>
	...

00000ffc <arm_mpu_init>:
	}
}

static inline u8_t _get_num_regions(void)
{
	u32_t type = ARM_MPU_DEV->type;
     ffc:	4b15      	ldr	r3, [pc, #84]	; (1054 <arm_mpu_init+0x58>)
static void _arm_mpu_config(void)
{
	u32_t r_index;

	/* ARM MPU supports up to 16 Regions */
	if (mpu_config.num_regions > _get_num_regions()) {
     ffe:	4916      	ldr	r1, [pc, #88]	; (1058 <arm_mpu_init+0x5c>)
	u32_t type = ARM_MPU_DEV->type;
    1000:	681a      	ldr	r2, [r3, #0]
	__DSB();
	__ISB();
}

static int arm_mpu_init(struct device *arg)
{
    1002:	b530      	push	{r4, r5, lr}
	if (mpu_config.num_regions > _get_num_regions()) {
    1004:	680d      	ldr	r5, [r1, #0]
    1006:	f3c2 2207 	ubfx	r2, r2, #8, #8
    100a:	4295      	cmp	r5, r2
    100c:	d80f      	bhi.n	102e <arm_mpu_init+0x32>
	ARM_MPU_DEV->ctrl = 0;
    100e:	2200      	movs	r2, #0
    1010:	6848      	ldr	r0, [r1, #4]
    1012:	605a      	str	r2, [r3, #4]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
    1014:	4295      	cmp	r5, r2
    1016:	f100 000c 	add.w	r0, r0, #12
    101a:	d10a      	bne.n	1032 <arm_mpu_init+0x36>
	ARM_MPU_DEV->ctrl = ARM_MPU_ENABLE | ARM_MPU_PRIVDEFENA;
    101c:	2205      	movs	r2, #5
    101e:	605a      	str	r2, [r3, #4]
	arm_mpu_enabled = 1;
    1020:	4b0e      	ldr	r3, [pc, #56]	; (105c <arm_mpu_init+0x60>)
    1022:	2201      	movs	r2, #1
    1024:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
    1026:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    102a:	f3bf 8f6f 	isb	sy
	ARG_UNUSED(arg);

	_arm_mpu_config();

	return 0;
}
    102e:	2000      	movs	r0, #0
    1030:	bd30      	pop	{r4, r5, pc}
		_region_init(r_index,
    1032:	f850 1c0c 	ldr.w	r1, [r0, #-12]
    1036:	f850 4c04 	ldr.w	r4, [r0, #-4]
	ARM_MPU_DEV->rnr = index;
    103a:	609a      	str	r2, [r3, #8]
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
    103c:	f021 011f 	bic.w	r1, r1, #31
				| REGION_VALID | index;
    1040:	f041 0110 	orr.w	r1, r1, #16
    1044:	4311      	orrs	r1, r2
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
    1046:	f044 0401 	orr.w	r4, r4, #1
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
    104a:	60d9      	str	r1, [r3, #12]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
    104c:	3201      	adds	r2, #1
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
    104e:	611c      	str	r4, [r3, #16]
    1050:	e7e0      	b.n	1014 <arm_mpu_init+0x18>
    1052:	bf00      	nop
    1054:	e000ed90 	.word	0xe000ed90
    1058:	200036e0 	.word	0x200036e0
    105c:	20000002 	.word	0x20000002

00001060 <_nop_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
    1060:	2000      	movs	r0, #0
    1062:	4770      	bx	lr

00001064 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    1064:	680b      	ldr	r3, [r1, #0]
    1066:	3301      	adds	r3, #1
    1068:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    106a:	4b01      	ldr	r3, [pc, #4]	; (1070 <char_out+0xc>)
    106c:	681b      	ldr	r3, [r3, #0]
    106e:	4718      	bx	r3
    1070:	20003728 	.word	0x20003728

00001074 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    1074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1078:	b085      	sub	sp, #20
    107a:	469b      	mov	fp, r3
    107c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    107e:	f8df a090 	ldr.w	sl, [pc, #144]	; 1110 <_printk_dec_ulong+0x9c>
    1082:	2c01      	cmp	r4, #1
    1084:	bfb8      	it	lt
    1086:	2401      	movlt	r4, #1
    1088:	2b01      	cmp	r3, #1
    108a:	bf0c      	ite	eq
    108c:	2330      	moveq	r3, #48	; 0x30
    108e:	2320      	movne	r3, #32
    1090:	4615      	mov	r5, r2
    1092:	4680      	mov	r8, r0
    1094:	4689      	mov	r9, r1
    1096:	9401      	str	r4, [sp, #4]
    1098:	9302      	str	r3, [sp, #8]
    109a:	2601      	movs	r6, #1
    109c:	270a      	movs	r7, #10
    109e:	2200      	movs	r2, #0
    10a0:	f10a 0401 	add.w	r4, sl, #1
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
    10a4:	b90a      	cbnz	r2, 10aa <_printk_dec_ulong+0x36>
    10a6:	45aa      	cmp	sl, r5
    10a8:	d21f      	bcs.n	10ea <_printk_dec_ulong+0x76>
			found_largest_digit = 1;
			out((int)((remainder / (pos + 1)) + 48), ctx);
    10aa:	fbb5 f0f4 	udiv	r0, r5, r4
    10ae:	4649      	mov	r1, r9
    10b0:	3030      	adds	r0, #48	; 0x30
    10b2:	47c0      	blx	r8
			digits++;
    10b4:	3601      	adds	r6, #1
			found_largest_digit = 1;
    10b6:	2201      	movs	r2, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
    10b8:	3f01      	subs	r7, #1
	while (pos >= 9) {
    10ba:	2f01      	cmp	r7, #1
		remainder %= (pos + 1);
    10bc:	fbb5 f1f4 	udiv	r1, r5, r4
		pos /= 10;
    10c0:	f04f 030a 	mov.w	r3, #10
		remainder %= (pos + 1);
    10c4:	fb04 5511 	mls	r5, r4, r1, r5
		pos /= 10;
    10c8:	fbba faf3 	udiv	sl, sl, r3
	while (pos >= 9) {
    10cc:	d1e8      	bne.n	10a0 <_printk_dec_ulong+0x2c>
	}
	out((int)(remainder + 48), ctx);
    10ce:	4649      	mov	r1, r9
    10d0:	f105 0030 	add.w	r0, r5, #48	; 0x30
    10d4:	47c0      	blx	r8

	if (padding == PAD_SPACE_AFTER) {
    10d6:	f1bb 0f03 	cmp.w	fp, #3
    10da:	d103      	bne.n	10e4 <_printk_dec_ulong+0x70>
		remaining = min_width - digits;
    10dc:	9b01      	ldr	r3, [sp, #4]
    10de:	1b9c      	subs	r4, r3, r6
		while (remaining-- > 0) {
    10e0:	2c00      	cmp	r4, #0
    10e2:	dc0f      	bgt.n	1104 <_printk_dec_ulong+0x90>
			out(' ', ctx);
		}
	}
}
    10e4:	b005      	add	sp, #20
    10e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
    10ea:	9b01      	ldr	r3, [sp, #4]
    10ec:	42bb      	cmp	r3, r7
    10ee:	dbe3      	blt.n	10b8 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
    10f0:	f1bb 0f02 	cmp.w	fp, #2
    10f4:	d8e0      	bhi.n	10b8 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    10f6:	4649      	mov	r1, r9
    10f8:	9802      	ldr	r0, [sp, #8]
    10fa:	9203      	str	r2, [sp, #12]
			digits++;
    10fc:	3601      	adds	r6, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    10fe:	47c0      	blx	r8
			digits++;
    1100:	9a03      	ldr	r2, [sp, #12]
    1102:	e7d9      	b.n	10b8 <_printk_dec_ulong+0x44>
			out(' ', ctx);
    1104:	4649      	mov	r1, r9
    1106:	2020      	movs	r0, #32
    1108:	47c0      	blx	r8
    110a:	3c01      	subs	r4, #1
    110c:	e7e8      	b.n	10e0 <_printk_dec_ulong+0x6c>
    110e:	bf00      	nop
    1110:	3b9ac9ff 	.word	0x3b9ac9ff

00001114 <str_out>:
	int count;
};

static int str_out(int c, struct str_context *ctx)
{
	if (!ctx->str || ctx->count >= ctx->max) {
    1114:	680a      	ldr	r2, [r1, #0]
    1116:	688b      	ldr	r3, [r1, #8]
{
    1118:	b530      	push	{r4, r5, lr}
	if (!ctx->str || ctx->count >= ctx->max) {
    111a:	b112      	cbz	r2, 1122 <str_out+0xe>
    111c:	684c      	ldr	r4, [r1, #4]
    111e:	42a3      	cmp	r3, r4
    1120:	db02      	blt.n	1128 <str_out+0x14>
		ctx->count++;
    1122:	3301      	adds	r3, #1
    1124:	608b      	str	r3, [r1, #8]
		return c;
    1126:	bd30      	pop	{r4, r5, pc}
	}

	if (ctx->count == ctx->max - 1) {
    1128:	1e65      	subs	r5, r4, #1
    112a:	42ab      	cmp	r3, r5
		ctx->str[ctx->count++] = '\0';
    112c:	bf0b      	itete	eq
    112e:	608c      	streq	r4, [r1, #8]
	} else {
		ctx->str[ctx->count++] = c;
    1130:	1c5c      	addne	r4, r3, #1
		ctx->str[ctx->count++] = '\0';
    1132:	2100      	moveq	r1, #0
		ctx->str[ctx->count++] = c;
    1134:	608c      	strne	r4, [r1, #8]
		ctx->str[ctx->count++] = '\0';
    1136:	bf0c      	ite	eq
    1138:	54d1      	strbeq	r1, [r2, r3]
		ctx->str[ctx->count++] = c;
    113a:	54d0      	strbne	r0, [r2, r3]
	}

	return c;
}
    113c:	bd30      	pop	{r4, r5, pc}
	...

00001140 <__printk_hook_install>:
	_char_out = fn;
    1140:	4b01      	ldr	r3, [pc, #4]	; (1148 <__printk_hook_install+0x8>)
    1142:	6018      	str	r0, [r3, #0]
    1144:	4770      	bx	lr
    1146:	bf00      	nop
    1148:	20003728 	.word	0x20003728

0000114c <_vprintk>:
{
    114c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1150:	b089      	sub	sp, #36	; 0x24
	int long_ctr = 0;
    1152:	f04f 0a00 	mov.w	sl, #0
{
    1156:	4606      	mov	r6, r0
    1158:	460f      	mov	r7, r1
    115a:	9204      	str	r2, [sp, #16]
    115c:	461c      	mov	r4, r3
	int min_width = -1;
    115e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
    1162:	46d0      	mov	r8, sl
	int might_format = 0; /* 1 if encountered a '%' */
    1164:	4655      	mov	r5, sl
	while (*fmt) {
    1166:	9b04      	ldr	r3, [sp, #16]
    1168:	7818      	ldrb	r0, [r3, #0]
    116a:	b910      	cbnz	r0, 1172 <_vprintk+0x26>
}
    116c:	b009      	add	sp, #36	; 0x24
    116e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!might_format) {
    1172:	b945      	cbnz	r5, 1186 <_vprintk+0x3a>
			if (*fmt != '%') {
    1174:	2825      	cmp	r0, #37	; 0x25
    1176:	f000 810c 	beq.w	1392 <_vprintk+0x246>
				out((int)*fmt, ctx);
    117a:	4639      	mov	r1, r7
    117c:	47b0      	blx	r6
		++fmt;
    117e:	9b04      	ldr	r3, [sp, #16]
    1180:	3301      	adds	r3, #1
    1182:	9304      	str	r3, [sp, #16]
    1184:	e7ef      	b.n	1166 <_vprintk+0x1a>
			switch (*fmt) {
    1186:	2864      	cmp	r0, #100	; 0x64
    1188:	d061      	beq.n	124e <_vprintk+0x102>
    118a:	d819      	bhi.n	11c0 <_vprintk+0x74>
    118c:	2839      	cmp	r0, #57	; 0x39
    118e:	d80a      	bhi.n	11a6 <_vprintk+0x5a>
    1190:	2831      	cmp	r0, #49	; 0x31
    1192:	d250      	bcs.n	1236 <_vprintk+0xea>
    1194:	282d      	cmp	r0, #45	; 0x2d
    1196:	d03c      	beq.n	1212 <_vprintk+0xc6>
    1198:	2830      	cmp	r0, #48	; 0x30
    119a:	d03d      	beq.n	1218 <_vprintk+0xcc>
    119c:	2825      	cmp	r0, #37	; 0x25
    119e:	d108      	bne.n	11b2 <_vprintk+0x66>
				out((int)'%', ctx);
    11a0:	4639      	mov	r1, r7
				out((int)*fmt, ctx);
    11a2:	47b0      	blx	r6
    11a4:	e06f      	b.n	1286 <_vprintk+0x13a>
			switch (*fmt) {
    11a6:	2858      	cmp	r0, #88	; 0x58
    11a8:	f000 8089 	beq.w	12be <_vprintk+0x172>
    11ac:	2863      	cmp	r0, #99	; 0x63
    11ae:	f000 80ea 	beq.w	1386 <_vprintk+0x23a>
				out((int)'%', ctx);
    11b2:	4639      	mov	r1, r7
    11b4:	2025      	movs	r0, #37	; 0x25
    11b6:	47b0      	blx	r6
				out((int)*fmt, ctx);
    11b8:	9b04      	ldr	r3, [sp, #16]
    11ba:	4639      	mov	r1, r7
    11bc:	7818      	ldrb	r0, [r3, #0]
    11be:	e7f0      	b.n	11a2 <_vprintk+0x56>
			switch (*fmt) {
    11c0:	2870      	cmp	r0, #112	; 0x70
    11c2:	d072      	beq.n	12aa <_vprintk+0x15e>
    11c4:	d806      	bhi.n	11d4 <_vprintk+0x88>
    11c6:	2869      	cmp	r0, #105	; 0x69
    11c8:	d041      	beq.n	124e <_vprintk+0x102>
    11ca:	286c      	cmp	r0, #108	; 0x6c
    11cc:	d03c      	beq.n	1248 <_vprintk+0xfc>
    11ce:	2868      	cmp	r0, #104	; 0x68
    11d0:	d0d5      	beq.n	117e <_vprintk+0x32>
    11d2:	e7ee      	b.n	11b2 <_vprintk+0x66>
    11d4:	2875      	cmp	r0, #117	; 0x75
    11d6:	d058      	beq.n	128a <_vprintk+0x13e>
    11d8:	d817      	bhi.n	120a <_vprintk+0xbe>
    11da:	2873      	cmp	r0, #115	; 0x73
    11dc:	d1e9      	bne.n	11b2 <_vprintk+0x66>
				char *s = va_arg(ap, char *);
    11de:	6823      	ldr	r3, [r4, #0]
    11e0:	f104 0b04 	add.w	fp, r4, #4
    11e4:	461c      	mov	r4, r3
				while (*s)
    11e6:	4625      	mov	r5, r4
    11e8:	f815 0b01 	ldrb.w	r0, [r5], #1
    11ec:	2800      	cmp	r0, #0
    11ee:	f040 80bf 	bne.w	1370 <_vprintk+0x224>
				if (padding == PAD_SPACE_AFTER) {
    11f2:	f1b8 0f03 	cmp.w	r8, #3
    11f6:	f040 80d5 	bne.w	13a4 <_vprintk+0x258>
					int remaining = min_width - (s - start);
    11fa:	1ae4      	subs	r4, r4, r3
    11fc:	eba9 0404 	sub.w	r4, r9, r4
					while (remaining-- > 0) {
    1200:	2c00      	cmp	r4, #0
    1202:	f300 80bb 	bgt.w	137c <_vprintk+0x230>
				char *s = va_arg(ap, char *);
    1206:	465c      	mov	r4, fp
    1208:	e03d      	b.n	1286 <_vprintk+0x13a>
			switch (*fmt) {
    120a:	2878      	cmp	r0, #120	; 0x78
    120c:	d057      	beq.n	12be <_vprintk+0x172>
    120e:	287a      	cmp	r0, #122	; 0x7a
    1210:	e7de      	b.n	11d0 <_vprintk+0x84>
				padding = PAD_SPACE_AFTER;
    1212:	f04f 0803 	mov.w	r8, #3
    1216:	e7b2      	b.n	117e <_vprintk+0x32>
				if (min_width < 0 && padding == PAD_NONE) {
    1218:	f1b9 0f00 	cmp.w	r9, #0
    121c:	da0e      	bge.n	123c <_vprintk+0xf0>
    121e:	f1b8 0f00 	cmp.w	r8, #0
    1222:	f000 80bc 	beq.w	139e <_vprintk+0x252>
					min_width = *fmt - '0';
    1226:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
    122a:	f1b8 0f00 	cmp.w	r8, #0
    122e:	bf08      	it	eq
    1230:	f04f 0802 	moveq.w	r8, #2
    1234:	e7a3      	b.n	117e <_vprintk+0x32>
				if (min_width < 0) {
    1236:	f1b9 0f00 	cmp.w	r9, #0
    123a:	dbf4      	blt.n	1226 <_vprintk+0xda>
					min_width = 10 * min_width + *fmt - '0';
    123c:	230a      	movs	r3, #10
    123e:	fb03 0909 	mla	r9, r3, r9, r0
    1242:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
    1246:	e7f0      	b.n	122a <_vprintk+0xde>
				long_ctr++;
    1248:	f10a 0a01 	add.w	sl, sl, #1
    124c:	e797      	b.n	117e <_vprintk+0x32>
				if (long_ctr < 2) {
    124e:	f1ba 0f01 	cmp.w	sl, #1
					d = (long)va_arg(ap, long long);
    1252:	bfc5      	ittet	gt
    1254:	3407      	addgt	r4, #7
    1256:	f024 0307 	bicgt.w	r3, r4, #7
					d = va_arg(ap, long);
    125a:	6825      	ldrle	r5, [r4, #0]
					d = (long)va_arg(ap, long long);
    125c:	681d      	ldrgt	r5, [r3, #0]
					d = va_arg(ap, long);
    125e:	bfd4      	ite	le
    1260:	3404      	addle	r4, #4
					d = (long)va_arg(ap, long long);
    1262:	f103 0408 	addgt.w	r4, r3, #8
				if (d < 0) {
    1266:	2d00      	cmp	r5, #0
    1268:	da05      	bge.n	1276 <_vprintk+0x12a>
					out((int)'-', ctx);
    126a:	4639      	mov	r1, r7
    126c:	202d      	movs	r0, #45	; 0x2d
    126e:	47b0      	blx	r6
					d = -d;
    1270:	426d      	negs	r5, r5
					min_width--;
    1272:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
    1276:	f8cd 9000 	str.w	r9, [sp]
    127a:	4643      	mov	r3, r8
    127c:	462a      	mov	r2, r5
				_printk_dec_ulong(out, ctx, u, padding,
    127e:	4639      	mov	r1, r7
    1280:	4630      	mov	r0, r6
    1282:	f7ff fef7 	bl	1074 <_printk_dec_ulong>
			might_format = 0;
    1286:	2500      	movs	r5, #0
				break;
    1288:	e779      	b.n	117e <_vprintk+0x32>
				if (long_ctr < 2) {
    128a:	f1ba 0f01 	cmp.w	sl, #1
					u = (unsigned long)va_arg(ap,
    128e:	bfc5      	ittet	gt
    1290:	3407      	addgt	r4, #7
    1292:	f024 0307 	bicgt.w	r3, r4, #7
					u = va_arg(ap, unsigned long);
    1296:	6822      	ldrle	r2, [r4, #0]
					u = (unsigned long)va_arg(ap,
    1298:	681a      	ldrgt	r2, [r3, #0]
				_printk_dec_ulong(out, ctx, u, padding,
    129a:	f8cd 9000 	str.w	r9, [sp]
					u = (unsigned long)va_arg(ap,
    129e:	bfcc      	ite	gt
    12a0:	f103 0408 	addgt.w	r4, r3, #8
					u = va_arg(ap, unsigned long);
    12a4:	3404      	addle	r4, #4
				_printk_dec_ulong(out, ctx, u, padding,
    12a6:	4643      	mov	r3, r8
    12a8:	e7e9      	b.n	127e <_vprintk+0x132>
				  out('0', ctx);
    12aa:	4639      	mov	r1, r7
    12ac:	2030      	movs	r0, #48	; 0x30
    12ae:	47b0      	blx	r6
				  out('x', ctx);
    12b0:	4639      	mov	r1, r7
    12b2:	2078      	movs	r0, #120	; 0x78
    12b4:	47b0      	blx	r6
				  min_width = 8;
    12b6:	f04f 0908 	mov.w	r9, #8
				  padding = PAD_ZERO_BEFORE;
    12ba:	f04f 0801 	mov.w	r8, #1
				if (long_ctr < 2) {
    12be:	f1ba 0f01 	cmp.w	sl, #1
					x = (unsigned long)va_arg(ap,
    12c2:	bfc7      	ittee	gt
    12c4:	3407      	addgt	r4, #7
    12c6:	f024 0307 	bicgt.w	r3, r4, #7
					x = va_arg(ap, unsigned long);
    12ca:	6823      	ldrle	r3, [r4, #0]
    12cc:	9305      	strle	r3, [sp, #20]
					x = (unsigned long)va_arg(ap,
    12ce:	bfc2      	ittt	gt
    12d0:	f103 0408 	addgt.w	r4, r3, #8
    12d4:	681b      	ldrgt	r3, [r3, #0]
    12d6:	9305      	strgt	r3, [sp, #20]
	int remaining = 8; /* 8 digits max */
    12d8:	f04f 0208 	mov.w	r2, #8
	int digits = 0;
    12dc:	f04f 0300 	mov.w	r3, #0
					x = va_arg(ap, unsigned long);
    12e0:	bfd8      	it	le
    12e2:	3404      	addle	r4, #4
	int digits = 0;
    12e4:	9303      	str	r3, [sp, #12]
	int found_largest_digit = 0;
    12e6:	9307      	str	r3, [sp, #28]
	int size = sizeof(num) * 2;
    12e8:	4693      	mov	fp, r2
		char nibble = (num >> ((size - 1) << 2) & 0xf);
    12ea:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    12ee:	9b05      	ldr	r3, [sp, #20]
    12f0:	ea4f 008b 	mov.w	r0, fp, lsl #2
    12f4:	fa23 f000 	lsr.w	r0, r3, r0
		if (nibble || found_largest_digit || size == 1) {
    12f8:	f010 000f 	ands.w	r0, r0, #15
    12fc:	d109      	bne.n	1312 <_vprintk+0x1c6>
    12fe:	9b07      	ldr	r3, [sp, #28]
    1300:	b913      	cbnz	r3, 1308 <_vprintk+0x1bc>
    1302:	f1bb 0f00 	cmp.w	fp, #0
    1306:	d122      	bne.n	134e <_vprintk+0x202>
			nibble += nibble > 9 ? 87 : 48;
    1308:	f04f 0e30 	mov.w	lr, #48	; 0x30
    130c:	e007      	b.n	131e <_vprintk+0x1d2>
	for (; size; size--) {
    130e:	9a06      	ldr	r2, [sp, #24]
    1310:	e7eb      	b.n	12ea <_vprintk+0x19e>
			nibble += nibble > 9 ? 87 : 48;
    1312:	2809      	cmp	r0, #9
    1314:	bf8c      	ite	hi
    1316:	f04f 0e57 	movhi.w	lr, #87	; 0x57
    131a:	f04f 0e30 	movls.w	lr, #48	; 0x30
			out((int)nibble, ctx);
    131e:	4639      	mov	r1, r7
    1320:	4470      	add	r0, lr
    1322:	9206      	str	r2, [sp, #24]
    1324:	47b0      	blx	r6
			digits++;
    1326:	9b03      	ldr	r3, [sp, #12]
			found_largest_digit = 1;
    1328:	9507      	str	r5, [sp, #28]
			digits++;
    132a:	3301      	adds	r3, #1
    132c:	9303      	str	r3, [sp, #12]
	for (; size; size--) {
    132e:	f1bb 0f00 	cmp.w	fp, #0
    1332:	d1ec      	bne.n	130e <_vprintk+0x1c2>
	if (padding == PAD_SPACE_AFTER) {
    1334:	f1b8 0f03 	cmp.w	r8, #3
    1338:	d1a5      	bne.n	1286 <_vprintk+0x13a>
		remaining = min_width * 2 - digits;
    133a:	9b03      	ldr	r3, [sp, #12]
    133c:	ebc3 0549 	rsb	r5, r3, r9, lsl #1
		while (remaining-- > 0) {
    1340:	2d00      	cmp	r5, #0
    1342:	dda0      	ble.n	1286 <_vprintk+0x13a>
			out(' ', ctx);
    1344:	4639      	mov	r1, r7
    1346:	2020      	movs	r0, #32
    1348:	47b0      	blx	r6
    134a:	3d01      	subs	r5, #1
    134c:	e7f8      	b.n	1340 <_vprintk+0x1f4>
		if (remaining-- <= min_width) {
    134e:	1e53      	subs	r3, r2, #1
    1350:	4591      	cmp	r9, r2
    1352:	9306      	str	r3, [sp, #24]
    1354:	dbeb      	blt.n	132e <_vprintk+0x1e2>
			if (padding == PAD_ZERO_BEFORE) {
    1356:	f1b8 0f01 	cmp.w	r8, #1
    135a:	d103      	bne.n	1364 <_vprintk+0x218>
				out('0', ctx);
    135c:	4639      	mov	r1, r7
    135e:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
    1360:	47b0      	blx	r6
    1362:	e7e4      	b.n	132e <_vprintk+0x1e2>
			} else if (padding == PAD_SPACE_BEFORE) {
    1364:	f1b8 0f02 	cmp.w	r8, #2
    1368:	d1e1      	bne.n	132e <_vprintk+0x1e2>
				out(' ', ctx);
    136a:	4639      	mov	r1, r7
    136c:	2020      	movs	r0, #32
    136e:	e7f7      	b.n	1360 <_vprintk+0x214>
					out((int)(*s++), ctx);
    1370:	4639      	mov	r1, r7
    1372:	9303      	str	r3, [sp, #12]
    1374:	462c      	mov	r4, r5
    1376:	47b0      	blx	r6
    1378:	9b03      	ldr	r3, [sp, #12]
    137a:	e734      	b.n	11e6 <_vprintk+0x9a>
						out(' ', ctx);
    137c:	4639      	mov	r1, r7
    137e:	2020      	movs	r0, #32
    1380:	47b0      	blx	r6
    1382:	3c01      	subs	r4, #1
    1384:	e73c      	b.n	1200 <_vprintk+0xb4>
				out(c, ctx);
    1386:	6820      	ldr	r0, [r4, #0]
				int c = va_arg(ap, int);
    1388:	1d25      	adds	r5, r4, #4
				out(c, ctx);
    138a:	4639      	mov	r1, r7
    138c:	47b0      	blx	r6
				int c = va_arg(ap, int);
    138e:	462c      	mov	r4, r5
    1390:	e779      	b.n	1286 <_vprintk+0x13a>
				long_ctr = 0;
    1392:	46aa      	mov	sl, r5
				padding = PAD_NONE;
    1394:	46a8      	mov	r8, r5
				min_width = -1;
    1396:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
				might_format = 1;
    139a:	2501      	movs	r5, #1
    139c:	e6ef      	b.n	117e <_vprintk+0x32>
					padding = PAD_ZERO_BEFORE;
    139e:	f04f 0801 	mov.w	r8, #1
    13a2:	e6ec      	b.n	117e <_vprintk+0x32>
				char *s = va_arg(ap, char *);
    13a4:	465c      	mov	r4, fp
			might_format = 0;
    13a6:	4605      	mov	r5, r0
    13a8:	e6e9      	b.n	117e <_vprintk+0x32>
	...

000013ac <vprintk>:
{
    13ac:	b513      	push	{r0, r1, r4, lr}
	struct out_context ctx = { 0 };
    13ae:	ac02      	add	r4, sp, #8
    13b0:	2300      	movs	r3, #0
    13b2:	f844 3d04 	str.w	r3, [r4, #-4]!
	_vprintk(char_out, &ctx, fmt, ap);
    13b6:	4602      	mov	r2, r0
    13b8:	460b      	mov	r3, r1
    13ba:	4803      	ldr	r0, [pc, #12]	; (13c8 <vprintk+0x1c>)
    13bc:	4621      	mov	r1, r4
    13be:	f7ff fec5 	bl	114c <_vprintk>
}
    13c2:	9801      	ldr	r0, [sp, #4]
    13c4:	b002      	add	sp, #8
    13c6:	bd10      	pop	{r4, pc}
    13c8:	00001065 	.word	0x00001065

000013cc <printk>:
{
    13cc:	b40f      	push	{r0, r1, r2, r3}
    13ce:	b507      	push	{r0, r1, r2, lr}
    13d0:	a904      	add	r1, sp, #16
    13d2:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    13d6:	9101      	str	r1, [sp, #4]
	ret = vprintk(fmt, ap);
    13d8:	f7ff ffe8 	bl	13ac <vprintk>
}
    13dc:	b003      	add	sp, #12
    13de:	f85d eb04 	ldr.w	lr, [sp], #4
    13e2:	b004      	add	sp, #16
    13e4:	4770      	bx	lr
	...

000013e8 <snprintk>:

int snprintk(char *str, size_t size, const char *fmt, ...)
{
    13e8:	b40c      	push	{r2, r3}
    13ea:	b530      	push	{r4, r5, lr}
    13ec:	b085      	sub	sp, #20
    13ee:	ab08      	add	r3, sp, #32
    13f0:	4604      	mov	r4, r0
    13f2:	f853 2b04 	ldr.w	r2, [r3], #4
	struct str_context ctx = { str, size, 0 };
    13f6:	9001      	str	r0, [sp, #4]
    13f8:	9102      	str	r1, [sp, #8]
    13fa:	2500      	movs	r5, #0
	va_list ap;

	va_start(ap, fmt);
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    13fc:	a901      	add	r1, sp, #4
    13fe:	4807      	ldr	r0, [pc, #28]	; (141c <snprintk+0x34>)
	va_start(ap, fmt);
    1400:	9300      	str	r3, [sp, #0]
	struct str_context ctx = { str, size, 0 };
    1402:	9503      	str	r5, [sp, #12]
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    1404:	f7ff fea2 	bl	114c <_vprintk>
	va_end(ap);

	if (ctx.count < ctx.max) {
    1408:	9803      	ldr	r0, [sp, #12]
    140a:	9b02      	ldr	r3, [sp, #8]
    140c:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    140e:	bfb8      	it	lt
    1410:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    1412:	b005      	add	sp, #20
    1414:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    1418:	b002      	add	sp, #8
    141a:	4770      	bx	lr
    141c:	00001115 	.word	0x00001115

00001420 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_NET_BUF_USER_DATA_SIZE, 4);
GEN_ABSOLUTE_SYM(CONFIG_ENTROPY_DEVICE_RANDOM_GENERATOR, 1);
GEN_ABSOLUTE_SYM(CONFIG_HAS_CMSIS, 1);
GEN_ABSOLUTE_SYM(CONFIG_HAS_NRFX, 1);
GEN_ABSOLUTE_SYM(CONFIG_TEST_EXTRA_STACKSIZE, 0);
GEN_ABSOLUTE_SYM(CONFIG_NUM_IRQS, 46);
    1420:	4770      	bx	lr
	...

00001424 <sys_rand32_get>:
#include <entropy.h>

static atomic_t entropy_driver;

u32_t sys_rand32_get(void)
{
    1424:	b513      	push	{r0, r1, r4, lr}
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1426:	4c11      	ldr	r4, [pc, #68]	; (146c <sys_rand32_get+0x48>)
    1428:	f3bf 8f5b 	dmb	ish
    142c:	6820      	ldr	r0, [r4, #0]
    142e:	f3bf 8f5b 	dmb	ish
	struct device *dev = (struct device *)atomic_get(&entropy_driver);
	u32_t random_num;
	int ret;

	if (unlikely(!dev)) {
    1432:	b960      	cbnz	r0, 144e <sys_rand32_get+0x2a>
		/* Only one entropy device exists, so this is safe even
		 * if the whole operation isn't atomic.
		 */
		dev = device_get_binding(CONFIG_ENTROPY_NAME);
    1434:	480e      	ldr	r0, [pc, #56]	; (1470 <sys_rand32_get+0x4c>)
    1436:	f008 fb97 	bl	9b68 <device_get_binding>
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    143a:	f3bf 8f5b 	dmb	ish
    143e:	e854 3f00 	ldrex	r3, [r4]
    1442:	e844 0200 	strex	r2, r0, [r4]
    1446:	2a00      	cmp	r2, #0
    1448:	d1f9      	bne.n	143e <sys_rand32_get+0x1a>
    144a:	f3bf 8f5b 	dmb	ish
					    u16_t length)
{
	const struct entropy_driver_api *api = dev->driver_api;

	__ASSERT(api->get_entropy, "Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
    144e:	6843      	ldr	r3, [r0, #4]
    1450:	2204      	movs	r2, #4
    1452:	681b      	ldr	r3, [r3, #0]
    1454:	eb0d 0102 	add.w	r1, sp, r2
    1458:	4798      	blx	r3
		atomic_set(&entropy_driver, (atomic_t)(uintptr_t)dev);
	}

	ret = entropy_get_entropy(dev, (u8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
    145a:	2800      	cmp	r0, #0
    145c:	da02      	bge.n	1464 <sys_rand32_get+0x40>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
    145e:	f000 fd05 	bl	1e6c <_timer_cycle_get_32>
    1462:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
    1464:	9801      	ldr	r0, [sp, #4]
    1466:	b002      	add	sp, #8
    1468:	bd10      	pop	{r4, pc}
    146a:	bf00      	nop
    146c:	20000004 	.word	0x20000004
    1470:	0000b41c 	.word	0x0000b41c

00001474 <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    1474:	280a      	cmp	r0, #10
{
    1476:	b538      	push	{r3, r4, r5, lr}
    1478:	4604      	mov	r4, r0
    147a:	4d07      	ldr	r5, [pc, #28]	; (1498 <console_out+0x24>)
	if ('\n' == c) {
    147c:	d104      	bne.n	1488 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    147e:	6828      	ldr	r0, [r5, #0]
static inline unsigned char _impl_uart_poll_out(struct device *dev,
						unsigned char out_char)
{
	const struct uart_driver_api *api = dev->driver_api;

	return api->poll_out(dev, out_char);
    1480:	6843      	ldr	r3, [r0, #4]
    1482:	210d      	movs	r1, #13
    1484:	685b      	ldr	r3, [r3, #4]
    1486:	4798      	blx	r3
	}
	uart_poll_out(uart_console_dev, c);
    1488:	6828      	ldr	r0, [r5, #0]
    148a:	6843      	ldr	r3, [r0, #4]
    148c:	b2e1      	uxtb	r1, r4
    148e:	685b      	ldr	r3, [r3, #4]
    1490:	4798      	blx	r3

	return c;
}
    1492:	4620      	mov	r0, r4
    1494:	bd38      	pop	{r3, r4, r5, pc}
    1496:	bf00      	nop
    1498:	20000008 	.word	0x20000008

0000149c <uart_console_hook_install>:
 */

void uart_console_hook_install(void)
{
	__stdout_hook_install(console_out);
	__printk_hook_install(console_out);
    149c:	4801      	ldr	r0, [pc, #4]	; (14a4 <uart_console_hook_install+0x8>)
    149e:	f7ff be4f 	b.w	1140 <__printk_hook_install>
    14a2:	bf00      	nop
    14a4:	00001475 	.word	0x00001475

000014a8 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    14a8:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    14aa:	4804      	ldr	r0, [pc, #16]	; (14bc <uart_console_init+0x14>)
    14ac:	f008 fb5c 	bl	9b68 <device_get_binding>
    14b0:	4b03      	ldr	r3, [pc, #12]	; (14c0 <uart_console_init+0x18>)
    14b2:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    14b4:	f7ff fff2 	bl	149c <uart_console_hook_install>

	return 0;
}
    14b8:	2000      	movs	r0, #0
    14ba:	bd08      	pop	{r3, pc}
    14bc:	0000b426 	.word	0x0000b426
    14c0:	20000008 	.word	0x20000008

000014c4 <_m16src_stop>:
		return -EINPROGRESS;
	}
}

static int _m16src_stop(struct device *dev, clock_control_subsys_t sub_system)
{
    14c4:	b510      	push	{r4, lr}
    14c6:	f04f 0320 	mov.w	r3, #32
    14ca:	f3ef 8211 	mrs	r2, BASEPRI
    14ce:	f383 8811 	msr	BASEPRI, r3
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
    14d2:	4c11      	ldr	r4, [pc, #68]	; (1518 <_m16src_stop+0x54>)
    14d4:	7823      	ldrb	r3, [r4, #0]
    14d6:	b923      	cbnz	r3, 14e2 <_m16src_stop+0x1e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    14d8:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EALREADY;
    14dc:	f06f 0044 	mvn.w	r0, #68	; 0x44
    14e0:	bd10      	pop	{r4, pc}
	}

	if (--m16src_ref) {
    14e2:	3b01      	subs	r3, #1
    14e4:	b2db      	uxtb	r3, r3
    14e6:	7023      	strb	r3, [r4, #0]
    14e8:	b123      	cbz	r3, 14f4 <_m16src_stop+0x30>
    14ea:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EBUSY;
    14ee:	f06f 000f 	mvn.w	r0, #15
    14f2:	bd10      	pop	{r4, pc}
	}

	if (m16src_grd) {
    14f4:	4b09      	ldr	r3, [pc, #36]	; (151c <_m16src_stop+0x58>)
    14f6:	7818      	ldrb	r0, [r3, #0]
    14f8:	2101      	movs	r1, #1
    14fa:	b128      	cbz	r0, 1508 <_m16src_stop+0x44>
		m16src_ref++;
    14fc:	7021      	strb	r1, [r4, #0]
    14fe:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EAGAIN;
    1502:	f06f 000a 	mvn.w	r0, #10
    1506:	bd10      	pop	{r4, pc}
	}

	m16src_grd = 1;
    1508:	7019      	strb	r1, [r3, #0]
    150a:	f382 8811 	msr	BASEPRI, r2

	irq_unlock(imask);

	/* re-entrancy and mult-context safe, and reference count is zero, */

	NRF_CLOCK->TASKS_HFCLKSTOP = 1;
    150e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1512:	6051      	str	r1, [r2, #4]

	/* release resource guard */
	m16src_grd = 0;
    1514:	7018      	strb	r0, [r3, #0]

	return 0;
}
    1516:	bd10      	pop	{r4, pc}
    1518:	2000000e 	.word	0x2000000e
    151c:	2000000d 	.word	0x2000000d

00001520 <_clock_control_init>:
		}
	}
}

static int _clock_control_init(struct device *dev)
{
    1520:	b508      	push	{r3, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(NRF5_IRQ_POWER_CLOCK_IRQn,
    1522:	2200      	movs	r2, #0
    1524:	4610      	mov	r0, r2
    1526:	2101      	movs	r1, #1
    1528:	f7ff fc28 	bl	d7c <_irq_priority_set>
		    CONFIG_CLOCK_CONTROL_NRF5_IRQ_PRIORITY,
		    _power_clock_isr, 0, 0);

	irq_enable(POWER_CLOCK_IRQn);
    152c:	2000      	movs	r0, #0
    152e:	f7ff fbf3 	bl	d18 <_arch_irq_enable>

	return 0;
}
    1532:	2000      	movs	r0, #0
    1534:	bd08      	pop	{r3, pc}
	...

00001538 <_m16src_start>:
{
    1538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    153a:	f04f 0220 	mov.w	r2, #32
    153e:	f3ef 8311 	mrs	r3, BASEPRI
    1542:	f382 8811 	msr	BASEPRI, r2
	if (m16src_ref++) {
    1546:	4a25      	ldr	r2, [pc, #148]	; (15dc <_m16src_start+0xa4>)
    1548:	7810      	ldrb	r0, [r2, #0]
    154a:	1c44      	adds	r4, r0, #1
    154c:	7014      	strb	r4, [r2, #0]
    154e:	b160      	cbz	r0, 156a <_m16src_start+0x32>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1550:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) {
    1554:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1558:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		return -EINPROGRESS;
    155c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1560:	bf14      	ite	ne
    1562:	2000      	movne	r0, #0
    1564:	f06f 0043 	mvneq.w	r0, #67	; 0x43
}
    1568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (m16src_grd) {
    156a:	4d1d      	ldr	r5, [pc, #116]	; (15e0 <_m16src_start+0xa8>)
    156c:	782f      	ldrb	r7, [r5, #0]
    156e:	b12f      	cbz	r7, 157c <_m16src_start+0x44>
		m16src_ref--;
    1570:	7010      	strb	r0, [r2, #0]
    1572:	f383 8811 	msr	BASEPRI, r3
		return -EAGAIN;
    1576:	f06f 000a 	mvn.w	r0, #10
    157a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	m16src_grd = 1;
    157c:	2601      	movs	r6, #1
    157e:	702e      	strb	r6, [r5, #0]
    1580:	f383 8811 	msr	BASEPRI, r3
    1584:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
	if (blocking) {
    1588:	b319      	cbz	r1, 15d2 <_m16src_start+0x9a>
		irq_disable(POWER_CLOCK_IRQn);
    158a:	4638      	mov	r0, r7
    158c:	f7ff fbd4 	bl	d38 <_arch_irq_disable>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1590:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
		intenset = NRF_CLOCK->INTENSET;
    1594:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    1598:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    159c:	6026      	str	r6, [r4, #0]
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    159e:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    15a2:	b192      	cbz	r2, 15ca <_m16src_start+0x92>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    15a4:	2200      	movs	r2, #0
    15a6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    15aa:	4a0e      	ldr	r2, [pc, #56]	; (15e4 <_m16src_start+0xac>)
		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
    15ac:	f013 0f01 	tst.w	r3, #1
    15b0:	f04f 0301 	mov.w	r3, #1
			NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    15b4:	bf08      	it	eq
    15b6:	f8c4 3308 	streq.w	r3, [r4, #776]	; 0x308
		irq_enable(POWER_CLOCK_IRQn);
    15ba:	2000      	movs	r0, #0
    15bc:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    15c0:	f7ff fbaa 	bl	d18 <_arch_irq_enable>
	m16src_grd = 0;
    15c4:	2300      	movs	r3, #0
    15c6:	702b      	strb	r3, [r5, #0]
    15c8:	e7c4      	b.n	1554 <_m16src_start+0x1c>
			__WFE();
    15ca:	bf20      	wfe
			__SEV();
    15cc:	bf40      	sev
			__WFE();
    15ce:	bf20      	wfe
    15d0:	e7e5      	b.n	159e <_m16src_start+0x66>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    15d2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    15d6:	6026      	str	r6, [r4, #0]
    15d8:	e7f4      	b.n	15c4 <_m16src_start+0x8c>
    15da:	bf00      	nop
    15dc:	2000000e 	.word	0x2000000e
    15e0:	2000000d 	.word	0x2000000d
    15e4:	e000e100 	.word	0xe000e100

000015e8 <_k32src_start>:
{
    15e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    15ea:	4606      	mov	r6, r0
    15ec:	460c      	mov	r4, r1
	__asm__ volatile(
    15ee:	f04f 0220 	mov.w	r2, #32
    15f2:	f3ef 8311 	mrs	r3, BASEPRI
    15f6:	f382 8811 	msr	BASEPRI, r2
	if (k32src_initialized) {
    15fa:	4a2c      	ldr	r2, [pc, #176]	; (16ac <_k32src_start+0xc4>)
    15fc:	7815      	ldrb	r5, [r2, #0]
    15fe:	b165      	cbz	r5, 161a <_k32src_start+0x32>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1600:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) {
    1604:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1608:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
		return -EINPROGRESS;
    160c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
}
    1610:	bf0c      	ite	eq
    1612:	f06f 0043 	mvneq.w	r0, #67	; 0x43
    1616:	2000      	movne	r0, #0
    1618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	k32src_initialized = 1;
    161a:	2701      	movs	r7, #1
    161c:	7017      	strb	r7, [r2, #0]
    161e:	f383 8811 	msr	BASEPRI, r3
	irq_disable(POWER_CLOCK_IRQn);
    1622:	4628      	mov	r0, r5
    1624:	f7ff fb88 	bl	d38 <_arch_irq_disable>
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    1628:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    162c:	2102      	movs	r1, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    162e:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
	intenset = NRF_CLOCK->INTENSET;
    1632:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    1636:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
    163a:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
	NRF_CLOCK->TASKS_LFCLKSTART = 1;
    163e:	609f      	str	r7, [r3, #8]
	while (NRF_CLOCK->EVENTS_LFCLKSTARTED == 0) {
    1640:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    1644:	b371      	cbz	r1, 16a4 <_k32src_start+0xbc>
	if (!(intenset & CLOCK_INTENSET_LFCLKSTARTED_Msk)) {
    1646:	0792      	lsls	r2, r2, #30
    1648:	4f19      	ldr	r7, [pc, #100]	; (16b0 <_k32src_start+0xc8>)
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    164a:	bf58      	it	pl
    164c:	2202      	movpl	r2, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    164e:	f04f 0100 	mov.w	r1, #0
    1652:	f04f 0501 	mov.w	r5, #1
    1656:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	irq_enable(POWER_CLOCK_IRQn);
    165a:	f04f 0000 	mov.w	r0, #0
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    165e:	bf58      	it	pl
    1660:	f8c3 2308 	strpl.w	r2, [r3, #776]	; 0x308
    1664:	f8c7 5180 	str.w	r5, [r7, #384]	; 0x180
	irq_enable(POWER_CLOCK_IRQn);
    1668:	f7ff fb56 	bl	d18 <_arch_irq_enable>
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    166c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	NRF_CLOCK->EVENTS_DONE = 0;
    1670:	2100      	movs	r1, #0
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    1672:	2218      	movs	r2, #24
    1674:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	NRF_CLOCK->EVENTS_DONE = 0;
    1678:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
	NRF_CLOCK->EVENTS_CTTO = 0;
    167c:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    1680:	f014 0103 	ands.w	r1, r4, #3
    1684:	d1be      	bne.n	1604 <_k32src_start+0x1c>
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
    1686:	2010      	movs	r0, #16
    1688:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
		NRF_CLOCK->INTENSET =
    168c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    1690:	4630      	mov	r0, r6
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    1692:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    1696:	f7ff ff4f 	bl	1538 <_m16src_start>
		if (!err) {
    169a:	2800      	cmp	r0, #0
    169c:	d1b2      	bne.n	1604 <_k32src_start+0x1c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    169e:	f8c7 5100 	str.w	r5, [r7, #256]	; 0x100
    16a2:	e7af      	b.n	1604 <_k32src_start+0x1c>
		__WFE();
    16a4:	bf20      	wfe
		__SEV();
    16a6:	bf40      	sev
		__WFE();
    16a8:	bf20      	wfe
    16aa:	e7c9      	b.n	1640 <_k32src_start+0x58>
    16ac:	2000000c 	.word	0x2000000c
    16b0:	e000e100 	.word	0xe000e100

000016b4 <_power_clock_isr>:
{
    16b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    16b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
{
    16ba:	4605      	mov	r5, r0
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    16bc:	f8d3 e108 	ldr.w	lr, [r3, #264]	; 0x108
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    16c0:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
    16c4:	f8d3 440c 	ldr.w	r4, [r3, #1036]	; 0x40c
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
    16c8:	f8d3 7100 	ldr.w	r7, [r3, #256]	; 0x100
	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
    16cc:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
	done = (NRF_CLOCK->EVENTS_DONE != 0);
    16d0:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    16d4:	f8d3 6110 	ldr.w	r6, [r3, #272]	; 0x110
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    16d8:	f002 0201 	and.w	r2, r2, #1
	if (pof) {
    16dc:	f1be 0f00 	cmp.w	lr, #0
    16e0:	d003      	beq.n	16ea <_power_clock_isr+0x36>
		NRF_POWER->EVENTS_POFWARN = 0;
    16e2:	f04f 0e00 	mov.w	lr, #0
    16e6:	f8c3 e108 	str.w	lr, [r3, #264]	; 0x108
	if (hf) {
    16ea:	b127      	cbz	r7, 16f6 <_power_clock_isr+0x42>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    16ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    16f0:	2700      	movs	r7, #0
    16f2:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
	if (hf_intenset && hf_stat) {
    16f6:	b13a      	cbz	r2, 1708 <_power_clock_isr+0x54>
    16f8:	03e3      	lsls	r3, r4, #15
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    16fa:	bf41      	itttt	mi
    16fc:	f04f 4380 	movmi.w	r3, #1073741824	; 0x40000000
    1700:	2201      	movmi	r2, #1
    1702:	f8c3 2308 	strmi.w	r2, [r3, #776]	; 0x308
		NRF_CLOCK->TASKS_CAL = 1;
    1706:	611a      	strmi	r2, [r3, #16]
	if (lf) {
    1708:	b120      	cbz	r0, 1714 <_power_clock_isr+0x60>
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    170a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    170e:	2200      	movs	r2, #0
    1710:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (done) {
    1714:	b149      	cbz	r1, 172a <_power_clock_isr+0x76>
		NRF_CLOCK->EVENTS_DONE = 0;
    1716:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    171a:	2100      	movs	r1, #0
    171c:	f8c4 110c 	str.w	r1, [r4, #268]	; 0x10c
		err = _m16src_stop(dev, NULL);
    1720:	4628      	mov	r0, r5
    1722:	f7ff fecf 	bl	14c4 <_m16src_stop>
		NRF_CLOCK->TASKS_CTSTART = 1;
    1726:	2301      	movs	r3, #1
    1728:	6163      	str	r3, [r4, #20]
	if (ctto) {
    172a:	b176      	cbz	r6, 174a <_power_clock_isr+0x96>
		NRF_CLOCK->EVENTS_CTTO = 0;
    172c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1730:	2100      	movs	r1, #0
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    1732:	2401      	movs	r4, #1
		NRF_CLOCK->EVENTS_CTTO = 0;
    1734:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
		err = _m16src_start(dev, false);
    1738:	4628      	mov	r0, r5
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    173a:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    173e:	f7ff fefb 	bl	1538 <_m16src_start>
		if (!err) {
    1742:	b910      	cbnz	r0, 174a <_power_clock_isr+0x96>
    1744:	4b01      	ldr	r3, [pc, #4]	; (174c <_power_clock_isr+0x98>)
    1746:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
    174a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    174c:	e000e100 	.word	0xe000e100

00001750 <gpiote_find_channel>:
#define GPIOTE_CFG_PIN_GET(config) ((config & GPIOTE_CONFIG_PSEL_Msk) >> \
				GPIOTE_CONFIG_PSEL_Pos)

static int gpiote_find_channel(struct device *dev, u32_t pin)
{
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1750:	6803      	ldr	r3, [r0, #0]
    1752:	689b      	ldr	r3, [r3, #8]
    1754:	689a      	ldr	r2, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
		if ((data->gpiote_chan_mask & BIT(i)) &&
    1756:	6883      	ldr	r3, [r0, #8]
{
    1758:	b510      	push	{r4, lr}
		if ((data->gpiote_chan_mask & BIT(i)) &&
    175a:	68dc      	ldr	r4, [r3, #12]
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    175c:	2000      	movs	r0, #0
		if ((data->gpiote_chan_mask & BIT(i)) &&
    175e:	fa24 f300 	lsr.w	r3, r4, r0
    1762:	07db      	lsls	r3, r3, #31
    1764:	d507      	bpl.n	1776 <gpiote_find_channel+0x26>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin)) {
    1766:	f500 73a2 	add.w	r3, r0, #324	; 0x144
    176a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    176e:	f3c3 2304 	ubfx	r3, r3, #8, #5
		if ((data->gpiote_chan_mask & BIT(i)) &&
    1772:	428b      	cmp	r3, r1
    1774:	d004      	beq.n	1780 <gpiote_find_channel+0x30>
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    1776:	3001      	adds	r0, #1
    1778:	2808      	cmp	r0, #8
    177a:	d1f0      	bne.n	175e <gpiote_find_channel+0xe>
			return i;
		}
	}

	return -ENODEV;
    177c:	f06f 0012 	mvn.w	r0, #18
}
    1780:	bd10      	pop	{r4, pc}

00001782 <gpio_nrf5_read>:
}

static int gpio_nrf5_read(struct device *dev,
			  int access_op, u32_t pin, u32_t *value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    1782:	6800      	ldr	r0, [r0, #0]
    1784:	6880      	ldr	r0, [r0, #8]
    1786:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
    1788:	b941      	cbnz	r1, 179c <gpio_nrf5_read+0x1a>
		*value = (gpio->IN >> pin) & 0x1;
    178a:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    178e:	fa21 f202 	lsr.w	r2, r1, r2
    1792:	f002 0201 	and.w	r2, r2, #1
	} else {
		*value = gpio->IN;
    1796:	601a      	str	r2, [r3, #0]
	}
	return 0;
}
    1798:	2000      	movs	r0, #0
    179a:	4770      	bx	lr
		*value = gpio->IN;
    179c:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
    17a0:	e7f9      	b.n	1796 <gpio_nrf5_read+0x14>

000017a2 <gpio_nrf5_write>:

static int gpio_nrf5_write(struct device *dev,
			   int access_op, u32_t pin, u32_t value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    17a2:	6800      	ldr	r0, [r0, #0]
    17a4:	6880      	ldr	r0, [r0, #8]
    17a6:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
    17a8:	b949      	cbnz	r1, 17be <gpio_nrf5_write+0x1c>
    17aa:	2101      	movs	r1, #1
		if (value) { /* 1 */
			gpio->OUTSET = BIT(pin);
    17ac:	4091      	lsls	r1, r2
		if (value) { /* 1 */
    17ae:	b11b      	cbz	r3, 17b8 <gpio_nrf5_write+0x16>
			gpio->OUTSET = BIT(pin);
    17b0:	f8c0 1508 	str.w	r1, [r0, #1288]	; 0x508
		}
	} else {
		gpio->OUT = value;
	}
	return 0;
}
    17b4:	2000      	movs	r0, #0
    17b6:	4770      	bx	lr
			gpio->OUTCLR = BIT(pin);
    17b8:	f8c0 150c 	str.w	r1, [r0, #1292]	; 0x50c
    17bc:	e7fa      	b.n	17b4 <gpio_nrf5_write+0x12>
		gpio->OUT = value;
    17be:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
    17c2:	e7f7      	b.n	17b4 <gpio_nrf5_write+0x12>

000017c4 <gpio_nrf5_manage_callback>:

static int gpio_nrf5_manage_callback(struct device *dev,
				    struct gpio_callback *callback, bool set)
{
    17c4:	b510      	push	{r4, lr}
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    17c6:	6883      	ldr	r3, [r0, #8]
					 bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (set) {
    17c8:	b13a      	cbz	r2, 17da <gpio_nrf5_manage_callback+0x16>
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
    17ca:	681a      	ldr	r2, [r3, #0]
    17cc:	600a      	str	r2, [r1, #0]
	list->head = node;

	if (!list->tail) {
    17ce:	685a      	ldr	r2, [r3, #4]
	list->head = node;
    17d0:	6019      	str	r1, [r3, #0]
	if (!list->tail) {
    17d2:	b902      	cbnz	r2, 17d6 <gpio_nrf5_manage_callback+0x12>
		list->tail = list->head;
    17d4:	6059      	str	r1, [r3, #4]

	_gpio_manage_callback(&data->callbacks, callback, set);

	return 0;
}
    17d6:	2000      	movs	r0, #0
    17d8:	bd10      	pop	{r4, pc}
    17da:	6818      	ldr	r0, [r3, #0]
					     sys_snode_t *node)
{
	sys_snode_t *prev = NULL;
	sys_snode_t *test;

	SYS_SLIST_FOR_EACH_NODE(list, test) {
    17dc:	2800      	cmp	r0, #0
    17de:	d0fa      	beq.n	17d6 <gpio_nrf5_manage_callback+0x12>
		if (test == node) {
    17e0:	4281      	cmp	r1, r0
    17e2:	d10e      	bne.n	1802 <gpio_nrf5_manage_callback+0x3e>
    17e4:	685c      	ldr	r4, [r3, #4]
    17e6:	6808      	ldr	r0, [r1, #0]
	if (!prev_node) {
    17e8:	b932      	cbnz	r2, 17f8 <gpio_nrf5_manage_callback+0x34>
		if (list->tail == node) {
    17ea:	42a1      	cmp	r1, r4
		list->head = node->next;
    17ec:	6018      	str	r0, [r3, #0]
		if (list->tail == node) {
    17ee:	d100      	bne.n	17f2 <gpio_nrf5_manage_callback+0x2e>
			list->tail = list->head;
    17f0:	6058      	str	r0, [r3, #4]
	node->next = NULL;
    17f2:	2300      	movs	r3, #0
    17f4:	600b      	str	r3, [r1, #0]
    17f6:	e7ee      	b.n	17d6 <gpio_nrf5_manage_callback+0x12>
		if (list->tail == node) {
    17f8:	42a1      	cmp	r1, r4
		prev_node->next = node->next;
    17fa:	6010      	str	r0, [r2, #0]
			list->tail = prev_node;
    17fc:	bf08      	it	eq
    17fe:	605a      	streq	r2, [r3, #4]
    1800:	e7f7      	b.n	17f2 <gpio_nrf5_manage_callback+0x2e>
	SYS_SLIST_FOR_EACH_NODE(list, test) {
    1802:	4602      	mov	r2, r0
    1804:	6800      	ldr	r0, [r0, #0]
    1806:	e7e9      	b.n	17dc <gpio_nrf5_manage_callback+0x18>

00001808 <gpio_nrf5_enable_callback>:


static int gpio_nrf5_enable_callback(struct device *dev,
				    int access_op, u32_t pin)
{
    1808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    180a:	4614      	mov	r4, r2
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    180c:	6802      	ldr	r2, [r0, #0]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    180e:	6887      	ldr	r7, [r0, #8]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1810:	6892      	ldr	r2, [r2, #8]
	int i;

	if (access_op == GPIO_ACCESS_BY_PIN) {
    1812:	460d      	mov	r5, r1
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1814:	6896      	ldr	r6, [r2, #8]
	if (access_op == GPIO_ACCESS_BY_PIN) {
    1816:	b9a1      	cbnz	r1, 1842 <gpio_nrf5_enable_callback+0x3a>

		i = gpiote_find_channel(dev, pin);
    1818:	4621      	mov	r1, r4
    181a:	f7ff ff99 	bl	1750 <gpiote_find_channel>
		if (i < 0) {
    181e:	2800      	cmp	r0, #0
    1820:	db11      	blt.n	1846 <gpio_nrf5_enable_callback+0x3e>
			return i;
		}

		data->pin_callback_enables |= BIT(pin);
    1822:	68ba      	ldr	r2, [r7, #8]
    1824:	2301      	movs	r3, #1
    1826:	fa03 f404 	lsl.w	r4, r3, r4
    182a:	4314      	orrs	r4, r2
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
    182c:	f100 0240 	add.w	r2, r0, #64	; 0x40
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
    1830:	fa03 f000 	lsl.w	r0, r3, r0
		data->pin_callback_enables |= BIT(pin);
    1834:	60bc      	str	r4, [r7, #8]
		gpiote->EVENTS_IN[i] = 0;
    1836:	f846 5022 	str.w	r5, [r6, r2, lsl #2]
		gpiote->INTENSET = BIT(i);
    183a:	f8c6 0304 	str.w	r0, [r6, #772]	; 0x304
	} else {
		return -ENOTSUP;
	}

	return 0;
    183e:	4628      	mov	r0, r5
    1840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOTSUP;
    1842:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
    1846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00001848 <gpio_nrf5_disable_callback>:


static int gpio_nrf5_disable_callback(struct device *dev,
				     int access_op, u32_t pin)
{
    1848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    184a:	4614      	mov	r4, r2
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    184c:	6802      	ldr	r2, [r0, #0]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    184e:	6886      	ldr	r6, [r0, #8]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1850:	6892      	ldr	r2, [r2, #8]
	int i;

	if (access_op == GPIO_ACCESS_BY_PIN) {
    1852:	460d      	mov	r5, r1
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1854:	6897      	ldr	r7, [r2, #8]
	if (access_op == GPIO_ACCESS_BY_PIN) {
    1856:	b989      	cbnz	r1, 187c <gpio_nrf5_disable_callback+0x34>
		i = gpiote_find_channel(dev, pin);
    1858:	4621      	mov	r1, r4
    185a:	f7ff ff79 	bl	1750 <gpiote_find_channel>
		if (i < 0) {
    185e:	2800      	cmp	r0, #0
    1860:	db0e      	blt.n	1880 <gpio_nrf5_disable_callback+0x38>
			return i;
		}

		data->pin_callback_enables &= ~(BIT(pin));
    1862:	68b2      	ldr	r2, [r6, #8]
    1864:	2301      	movs	r3, #1
    1866:	fa03 f404 	lsl.w	r4, r3, r4
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR = BIT(i);
    186a:	fa03 f000 	lsl.w	r0, r3, r0
		data->pin_callback_enables &= ~(BIT(pin));
    186e:	ea22 0404 	bic.w	r4, r2, r4
    1872:	60b4      	str	r4, [r6, #8]
		gpiote->INTENCLR = BIT(i);
    1874:	f8c7 0308 	str.w	r0, [r7, #776]	; 0x308
	} else {
		return -ENOTSUP;
	}

	return 0;
    1878:	4628      	mov	r0, r5
    187a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOTSUP;
    187c:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
    1880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00001882 <gpio_nrf5_P0_init>:
		    &gpio_data_P0, &gpio_nrf5_P0_cfg,
		    POST_KERNEL, CONFIG_KERNEL_INIT_PRIORITY_DEFAULT,
		    &gpio_nrf5_drv_api_funcs);

static int gpio_nrf5_P0_init(struct device *dev)
{
    1882:	b508      	push	{r3, lr}
	IRQ_CONNECT(NRF5_IRQ_GPIOTE_IRQn, CONFIG_GPIO_NRF5_PORT_P0_PRI,
    1884:	2200      	movs	r2, #0
    1886:	2101      	movs	r1, #1
    1888:	2006      	movs	r0, #6
    188a:	f7ff fa77 	bl	d7c <_irq_priority_set>
		    gpio_nrf5_port_isr, DEVICE_GET(gpio_nrf5_P0), 0);

	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    188e:	2006      	movs	r0, #6
    1890:	f7ff fa42 	bl	d18 <_arch_irq_enable>

	return 0;
}
    1894:	2000      	movs	r0, #0
    1896:	bd08      	pop	{r3, pc}

00001898 <gpio_nrf5_port_isr>:
{
    1898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    189a:	6803      	ldr	r3, [r0, #0]
{
    189c:	4606      	mov	r6, r0
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    189e:	689b      	ldr	r3, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    18a0:	68b4      	ldr	r4, [r6, #8]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    18a2:	6898      	ldr	r0, [r3, #8]
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    18a4:	2200      	movs	r2, #0
	u32_t enabled_int, int_status = 0;
    18a6:	4613      	mov	r3, r2
			gpiote->EVENTS_IN[i] = 0;
    18a8:	4615      	mov	r5, r2
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
    18aa:	2701      	movs	r7, #1
    18ac:	eb00 0182 	add.w	r1, r0, r2, lsl #2
		if (gpiote->EVENTS_IN[i]) {
    18b0:	f8d1 e100 	ldr.w	lr, [r1, #256]	; 0x100
    18b4:	f1be 0f00 	cmp.w	lr, #0
    18b8:	d008      	beq.n	18cc <gpio_nrf5_port_isr+0x34>
			gpiote->EVENTS_IN[i] = 0;
    18ba:	f8c1 5100 	str.w	r5, [r1, #256]	; 0x100
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
    18be:	f8d1 1510 	ldr.w	r1, [r1, #1296]	; 0x510
    18c2:	f3c1 2104 	ubfx	r1, r1, #8, #5
    18c6:	fa07 f101 	lsl.w	r1, r7, r1
    18ca:	430b      	orrs	r3, r1
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    18cc:	3201      	adds	r2, #1
    18ce:	2a08      	cmp	r2, #8
    18d0:	d1ec      	bne.n	18ac <gpio_nrf5_port_isr+0x14>
	enabled_int = int_status & data->pin_callback_enables;
    18d2:	68a5      	ldr	r5, [r4, #8]
	irq_disable(NRF5_IRQ_GPIOTE_IRQn);
    18d4:	2006      	movs	r0, #6
	enabled_int = int_status & data->pin_callback_enables;
    18d6:	401d      	ands	r5, r3
	irq_disable(NRF5_IRQ_GPIOTE_IRQn);
    18d8:	f7ff fa2e 	bl	d38 <_arch_irq_disable>
    18dc:	6824      	ldr	r4, [r4, #0]
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
    18de:	b924      	cbnz	r4, 18ea <gpio_nrf5_port_isr+0x52>
	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    18e0:	2006      	movs	r0, #6
}
    18e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    18e6:	f7ff ba17 	b.w	d18 <_arch_irq_enable>
		if (cb->pin_mask & pins) {
    18ea:	68a3      	ldr	r3, [r4, #8]
    18ec:	421d      	tst	r5, r3
    18ee:	d0f5      	beq.n	18dc <gpio_nrf5_port_isr+0x44>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
    18f0:	6863      	ldr	r3, [r4, #4]
    18f2:	462a      	mov	r2, r5
    18f4:	4621      	mov	r1, r4
    18f6:	4630      	mov	r0, r6
    18f8:	4798      	blx	r3
    18fa:	e7ef      	b.n	18dc <gpio_nrf5_port_isr+0x44>

000018fc <gpio_nrf5_config>:
{
    18fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1900:	4614      	mov	r4, r2
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1902:	6802      	ldr	r2, [r0, #0]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    1904:	6887      	ldr	r7, [r0, #8]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1906:	6892      	ldr	r2, [r2, #8]
{
    1908:	4680      	mov	r8, r0
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    190a:	6895      	ldr	r5, [r2, #8]
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    190c:	6810      	ldr	r0, [r2, #0]
	if (access_op == GPIO_ACCESS_BY_PIN) {
    190e:	b119      	cbz	r1, 1918 <gpio_nrf5_config+0x1c>
		return -ENOTSUP;
    1910:	f06f 0022 	mvn.w	r0, #34	; 0x22
    1914:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    1918:	f403 7240 	and.w	r2, r3, #768	; 0x300
    191c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
		int ds_low = (flags & GPIO_DS_LOW_MASK) >> GPIO_DS_LOW_POS;
    1920:	f3c3 3101 	ubfx	r1, r3, #12, #2
		int ds_high = (flags & GPIO_DS_HIGH_MASK) >> GPIO_DS_HIGH_POS;
    1924:	f3c3 3981 	ubfx	r9, r3, #14, #2
		unsigned int sense = (flags & GPIO_PIN_CNF_SENSE_Msk);
    1928:	f403 3e40 	and.w	lr, r3, #196608	; 0x30000
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    192c:	d056      	beq.n	19dc <gpio_nrf5_config+0xe0>
		u8_t pull = GPIO_PULL_DISABLE;
    192e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    1932:	bf0c      	ite	eq
    1934:	2204      	moveq	r2, #4
    1936:	2200      	movne	r2, #0
			sense = GPIO_SENSE_DISABLE;
    1938:	f5be 3f80 	cmp.w	lr, #65536	; 0x10000
    193c:	bf08      	it	eq
    193e:	f04f 0e00 	moveq.w	lr, #0
		if ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT) {
    1942:	f013 0f01 	tst.w	r3, #1
    1946:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 1a10 <gpio_nrf5_config+0x114>
    194a:	ea4f 0181 	mov.w	r1, r1, lsl #2
    194e:	f504 76e0 	add.w	r6, r4, #448	; 0x1c0
    1952:	d04e      	beq.n	19f2 <gpio_nrf5_config+0xf6>
			if (pull == GPIO_PULL_UP) {
    1954:	2a0c      	cmp	r2, #12
    1956:	d143      	bne.n	19e0 <gpio_nrf5_config+0xe4>
				gpio->OUTSET = BIT(pin);
    1958:	f04f 0e01 	mov.w	lr, #1
    195c:	fa0e fe04 	lsl.w	lr, lr, r4
    1960:	f8c0 e508 	str.w	lr, [r0, #1288]	; 0x508
					      drive_strength[ds_low][ds_high] |
    1964:	4449      	add	r1, r9
					      GPIO_INPUT_DISCONNECT |
    1966:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
    196a:	f041 0103 	orr.w	r1, r1, #3
    196e:	430a      	orrs	r2, r1
			gpio->PIN_CNF[pin] = (sense |
    1970:	f840 2026 	str.w	r2, [r0, r6, lsl #2]
	if (flags & GPIO_INT) {
    1974:	f013 0002 	ands.w	r0, r3, #2
    1978:	d047      	beq.n	1a0a <gpio_nrf5_config+0x10e>
		if (flags & GPIO_INT_EDGE) {
    197a:	0699      	lsls	r1, r3, #26
    197c:	d5c8      	bpl.n	1910 <gpio_nrf5_config+0x14>
			if (flags & GPIO_INT_DOUBLE_EDGE) {
    197e:	065a      	lsls	r2, r3, #25
    1980:	d43e      	bmi.n	1a00 <gpio_nrf5_config+0x104>
				config |= GPIOTE_CFG_POL_H2L;
    1982:	f013 0f04 	tst.w	r3, #4
    1986:	bf14      	ite	ne
    1988:	f44f 3680 	movne.w	r6, #65536	; 0x10000
    198c:	f44f 3600 	moveq.w	r6, #131072	; 0x20000
		if (__builtin_popcount(data->gpiote_chan_mask) ==
    1990:	68f8      	ldr	r0, [r7, #12]
    1992:	f7fe fc81 	bl	298 <__popcountsi2>
    1996:	2808      	cmp	r0, #8
    1998:	d035      	beq.n	1a06 <gpio_nrf5_config+0x10a>
		int i = gpiote_find_channel(dev, pin);
    199a:	4621      	mov	r1, r4
    199c:	4640      	mov	r0, r8
    199e:	f7ff fed7 	bl	1750 <gpiote_find_channel>
		if (i < 0) {
    19a2:	2800      	cmp	r0, #0
    19a4:	68fb      	ldr	r3, [r7, #12]
    19a6:	da08      	bge.n	19ba <gpio_nrf5_config+0xbe>
			i = __builtin_ffs(~(data->gpiote_chan_mask)) - 1;
    19a8:	43da      	mvns	r2, r3
    19aa:	fa92 f0a2 	rbit	r0, r2
    19ae:	2a00      	cmp	r2, #0
    19b0:	fab0 f080 	clz	r0, r0
    19b4:	bf08      	it	eq
    19b6:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
		config |= GPIOTE_CFG_PIN(pin);
    19ba:	0224      	lsls	r4, r4, #8
		data->gpiote_chan_mask |= BIT(i);
    19bc:	2201      	movs	r2, #1
		config |= GPIOTE_CFG_PIN(pin);
    19be:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
		data->gpiote_chan_mask |= BIT(i);
    19c2:	4082      	lsls	r2, r0
		config |= GPIOTE_CFG_PIN(pin);
    19c4:	f044 0401 	orr.w	r4, r4, #1
		gpiote->CONFIG[i] = config;
    19c8:	f500 70a2 	add.w	r0, r0, #324	; 0x144
		data->gpiote_chan_mask |= BIT(i);
    19cc:	4313      	orrs	r3, r2
		config |= GPIOTE_CFG_PIN(pin);
    19ce:	4334      	orrs	r4, r6
		data->gpiote_chan_mask |= BIT(i);
    19d0:	60fb      	str	r3, [r7, #12]
		gpiote->CONFIG[i] = config;
    19d2:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
	return 0;
    19d6:	2000      	movs	r0, #0
    19d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			pull = GPIO_PULL_UP;
    19dc:	220c      	movs	r2, #12
    19de:	e7ab      	b.n	1938 <gpio_nrf5_config+0x3c>
			} else if (pull == GPIO_PULL_DOWN) {
    19e0:	2a04      	cmp	r2, #4
				gpio->OUTCLR = BIT(pin);
    19e2:	bf02      	ittt	eq
    19e4:	f04f 0e01 	moveq.w	lr, #1
    19e8:	fa0e fe04 	lsleq.w	lr, lr, r4
    19ec:	f8c0 e50c 	streq.w	lr, [r0, #1292]	; 0x50c
    19f0:	e7b8      	b.n	1964 <gpio_nrf5_config+0x68>
					      drive_strength[ds_low][ds_high] |
    19f2:	4449      	add	r1, r9
    19f4:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
    19f8:	430a      	orrs	r2, r1
    19fa:	ea42 020e 	orr.w	r2, r2, lr
    19fe:	e7b7      	b.n	1970 <gpio_nrf5_config+0x74>
				config |= GPIOTE_CFG_POL_TOGG;
    1a00:	f44f 3640 	mov.w	r6, #196608	; 0x30000
    1a04:	e7c4      	b.n	1990 <gpio_nrf5_config+0x94>
			return -EIO;
    1a06:	f06f 0004 	mvn.w	r0, #4
}
    1a0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1a0e:	bf00      	nop
    1a10:	0000b460 	.word	0x0000b460

00001a14 <uart_nrf5_poll_in>:
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */

static int uart_nrf5_poll_in(struct device *dev, unsigned char *c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    1a14:	6803      	ldr	r3, [r0, #0]
    1a16:	689b      	ldr	r3, [r3, #8]
    1a18:	681b      	ldr	r3, [r3, #0]

	if (!uart->EVENTS_RXDRDY) {
    1a1a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
    1a1e:	b132      	cbz	r2, 1a2e <uart_nrf5_poll_in+0x1a>
		return -1;
	}

	/* Clear the interrupt */
	uart->EVENTS_RXDRDY = 0;
    1a20:	2000      	movs	r0, #0
    1a22:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108

	/* got a character */
	*c = (unsigned char)uart->RXD;
    1a26:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    1a2a:	700b      	strb	r3, [r1, #0]

	return 0;
    1a2c:	4770      	bx	lr
		return -1;
    1a2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    1a32:	4770      	bx	lr

00001a34 <uart_nrf5_poll_out>:
 * @return Sent character
 */
static unsigned char uart_nrf5_poll_out(struct device *dev,
					unsigned char c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    1a34:	6803      	ldr	r3, [r0, #0]
    1a36:	689b      	ldr	r3, [r3, #8]
    1a38:	681b      	ldr	r3, [r3, #0]

	/* send a character */
	uart->TXD = (u8_t)c;
    1a3a:	f8c3 151c 	str.w	r1, [r3, #1308]	; 0x51c

	/* Wait for transmitter to be ready */
	while (!uart->EVENTS_TXDRDY) {
    1a3e:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
    1a42:	2a00      	cmp	r2, #0
    1a44:	d0fb      	beq.n	1a3e <uart_nrf5_poll_out+0xa>
	}

	uart->EVENTS_TXDRDY = 0;
    1a46:	2200      	movs	r2, #0
    1a48:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

	return c;
}
    1a4c:	4608      	mov	r0, r1
    1a4e:	4770      	bx	lr

00001a50 <uart_nrf5_err_check>:

/** Console I/O function */
static int uart_nrf5_err_check(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    1a50:	6803      	ldr	r3, [r0, #0]
    1a52:	689b      	ldr	r3, [r3, #8]
    1a54:	681b      	ldr	r3, [r3, #0]
	u32_t error = 0;

	if (uart->EVENTS_ERROR) {
    1a56:	f8d3 0124 	ldr.w	r0, [r3, #292]	; 0x124
    1a5a:	b118      	cbz	r0, 1a64 <uart_nrf5_err_check+0x14>
		/* register bitfields maps to the defines in uart.h */
		error = uart->ERRORSRC;
    1a5c:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480

		/* Clear the register */
		uart->ERRORSRC = error;
    1a60:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
	}

	error = error & 0x0F;

	return error;
}
    1a64:	f000 000f 	and.w	r0, r0, #15
    1a68:	4770      	bx	lr
	...

00001a6c <uart_nrf5_init>:
{
    1a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _uart *uart = UART_STRUCT(dev);
    1a6e:	6803      	ldr	r3, [r0, #0]
    1a70:	689b      	ldr	r3, [r3, #8]
{
    1a72:	4605      	mov	r5, r0
	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
    1a74:	4818      	ldr	r0, [pc, #96]	; (1ad8 <uart_nrf5_init+0x6c>)
	volatile struct _uart *uart = UART_STRUCT(dev);
    1a76:	681c      	ldr	r4, [r3, #0]
	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
    1a78:	f008 f876 	bl	9b68 <device_get_binding>
static inline int _impl_gpio_config(struct device *port, int access_op,
				    u32_t pin, int flags)
{
	const struct gpio_driver_api *api = port->driver_api;

	return api->config(port, access_op, pin, flags);
    1a7c:	6843      	ldr	r3, [r0, #4]
    1a7e:	4606      	mov	r6, r0
    1a80:	681f      	ldr	r7, [r3, #0]
    1a82:	2206      	movs	r2, #6
    1a84:	f240 1301 	movw	r3, #257	; 0x101
    1a88:	2100      	movs	r1, #0
    1a8a:	47b8      	blx	r7
    1a8c:	6873      	ldr	r3, [r6, #4]
    1a8e:	681f      	ldr	r7, [r3, #0]
    1a90:	2300      	movs	r3, #0
    1a92:	4619      	mov	r1, r3
    1a94:	2208      	movs	r2, #8
    1a96:	4630      	mov	r0, r6
    1a98:	47b8      	blx	r7
	uart->PSELTXD = CONFIG_UART_NRF5_GPIO_TX_PIN;
    1a9a:	2306      	movs	r3, #6
    1a9c:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
	uart->PSELRXD = CONFIG_UART_NRF5_GPIO_RX_PIN;
    1aa0:	2308      	movs	r3, #8
    1aa2:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
	DEV_DATA(dev)->baud_rate = CONFIG_UART_NRF5_BAUD_RATE;
    1aa6:	68ab      	ldr	r3, [r5, #8]
    1aa8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
    1aac:	601a      	str	r2, [r3, #0]
	volatile struct _uart *uart = UART_STRUCT(dev);
    1aae:	682b      	ldr	r3, [r5, #0]
    1ab0:	689b      	ldr	r3, [r3, #8]
    1ab2:	681b      	ldr	r3, [r3, #0]
	uart->BAUDRATE = divisor << UART_BAUDRATE_BAUDRATE_Pos;
    1ab4:	f04f 72eb 	mov.w	r2, #30801920	; 0x1d60000
    1ab8:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	uart->ENABLE = (UART_ENABLE_ENABLE_Enabled << UART_ENABLE_ENABLE_Pos);
    1abc:	2304      	movs	r3, #4
    1abe:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	uart->EVENTS_TXDRDY = 0;
    1ac2:	2000      	movs	r0, #0
	uart->TASKS_STARTTX = 1;
    1ac4:	2301      	movs	r3, #1
	uart->EVENTS_TXDRDY = 0;
    1ac6:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
	uart->EVENTS_RXDRDY = 0;
    1aca:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
	uart->TASKS_STARTTX = 1;
    1ace:	60a3      	str	r3, [r4, #8]
	uart->TASKS_STARTRX = 1;
    1ad0:	6023      	str	r3, [r4, #0]
	dev->driver_api = &uart_nrf5_driver_api;
    1ad2:	4b02      	ldr	r3, [pc, #8]	; (1adc <uart_nrf5_init+0x70>)
    1ad4:	606b      	str	r3, [r5, #4]
}
    1ad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1ad8:	0000b4c8 	.word	0x0000b4c8
    1adc:	0000b4d8 	.word	0x0000b4d8

00001ae0 <get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static inline u8_t get(struct rand *rng, u8_t octets, u8_t *rand)
{
    1ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u8_t first, last, avail, remaining, *d, *s;

	__ASSERT_NO_MSG(rng);

	first = rng->first;
    1ae4:	7883      	ldrb	r3, [r0, #2]
	last = rng->last;
    1ae6:	78c4      	ldrb	r4, [r0, #3]

	d = &rand[octets];
	s = &rng->rand[first];
    1ae8:	1d1e      	adds	r6, r3, #4

	if (first <= last) {
    1aea:	42a3      	cmp	r3, r4
	d = &rand[octets];
    1aec:	440a      	add	r2, r1
	s = &rng->rand[first];
    1aee:	4406      	add	r6, r0
	if (first <= last) {
    1af0:	d81f      	bhi.n	1b32 <get+0x52>
		/* copy octets from contiguous memory */
		avail = last - first;
    1af2:	1ae4      	subs	r4, r4, r3
    1af4:	b2e4      	uxtb	r4, r4
		if (octets < avail) {
    1af6:	42a1      	cmp	r1, r4
			remaining = avail - octets;
    1af8:	bf3e      	ittt	cc
    1afa:	1a64      	subcc	r4, r4, r1
    1afc:	b2e7      	uxtbcc	r7, r4
    1afe:	460c      	movcc	r4, r1
			avail = octets;
		} else {
			remaining = 0;
		}

		first += avail;
    1b00:	4423      	add	r3, r4
		octets -= avail;
    1b02:	eba1 0104 	sub.w	r1, r1, r4
			remaining = 0;
    1b06:	bf28      	it	cs
    1b08:	2700      	movcs	r7, #0
		first += avail;
    1b0a:	b2db      	uxtb	r3, r3
		octets -= avail;
    1b0c:	b2c9      	uxtb	r1, r1
    1b0e:	4434      	add	r4, r6

		while (avail--) {
    1b10:	42a6      	cmp	r6, r4
    1b12:	d109      	bne.n	1b28 <get+0x48>
			while (last--) {
				*(--d) = *s++;
			}
		}

		rng->first = first;
    1b14:	7083      	strb	r3, [r0, #2]
	}

	if (remaining < rng->threshold) {
    1b16:	7843      	ldrb	r3, [r0, #1]
    1b18:	42bb      	cmp	r3, r7
		NRF_RNG->TASKS_START = 1;
    1b1a:	bf82      	ittt	hi
    1b1c:	4b20      	ldrhi	r3, [pc, #128]	; (1ba0 <get+0xc0>)
    1b1e:	2201      	movhi	r2, #1
    1b20:	601a      	strhi	r2, [r3, #0]
		NRF_RNG_regw_sideeffects();
#endif
	}

	return octets;
}
    1b22:	4608      	mov	r0, r1
    1b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			*(--d) = *s++;
    1b28:	f816 5b01 	ldrb.w	r5, [r6], #1
    1b2c:	f802 5d01 	strb.w	r5, [r2, #-1]!
    1b30:	e7ee      	b.n	1b10 <get+0x30>
		avail = rng->count - first;
    1b32:	7805      	ldrb	r5, [r0, #0]
    1b34:	1aed      	subs	r5, r5, r3
    1b36:	b2ed      	uxtb	r5, r5
		if (octets < avail) {
    1b38:	42a9      	cmp	r1, r5
			remaining = avail + last - octets;
    1b3a:	bf3f      	itttt	cc
    1b3c:	1a67      	subcc	r7, r4, r1
    1b3e:	19ed      	addcc	r5, r5, r7
    1b40:	b2ef      	uxtbcc	r7, r5
    1b42:	460d      	movcc	r5, r1
			first += avail;
    1b44:	bf38      	it	cc
    1b46:	185b      	addcc	r3, r3, r1
		octets -= avail;
    1b48:	eba1 0105 	sub.w	r1, r1, r5
			first += avail;
    1b4c:	bf32      	itee	cc
    1b4e:	b2db      	uxtbcc	r3, r3
    1b50:	4627      	movcs	r7, r4
			first = 0;
    1b52:	2300      	movcs	r3, #0
		octets -= avail;
    1b54:	b2c9      	uxtb	r1, r1
    1b56:	4696      	mov	lr, r2
    1b58:	eb06 0c05 	add.w	ip, r6, r5
		while (avail--) {
    1b5c:	4566      	cmp	r6, ip
    1b5e:	d119      	bne.n	1b94 <get+0xb4>
    1b60:	1b52      	subs	r2, r2, r5
		if (octets && last) {
    1b62:	2900      	cmp	r1, #0
    1b64:	d0d6      	beq.n	1b14 <get+0x34>
    1b66:	2c00      	cmp	r4, #0
    1b68:	d0d4      	beq.n	1b14 <get+0x34>
			if (octets < last) {
    1b6a:	428c      	cmp	r4, r1
    1b6c:	bf8a      	itet	hi
    1b6e:	460b      	movhi	r3, r1
    1b70:	4623      	movls	r3, r4
				remaining = last - octets;
    1b72:	1a64      	subhi	r4, r4, r1
			s = &rng->rand[0];
    1b74:	f100 0604 	add.w	r6, r0, #4
			octets -= last;
    1b78:	eba1 0103 	sub.w	r1, r1, r3
				remaining = last - octets;
    1b7c:	bf8c      	ite	hi
    1b7e:	b2e7      	uxtbhi	r7, r4
				remaining = 0;
    1b80:	2700      	movls	r7, #0
			octets -= last;
    1b82:	b2c9      	uxtb	r1, r1
    1b84:	18f4      	adds	r4, r6, r3
			while (last--) {
    1b86:	42a6      	cmp	r6, r4
    1b88:	d0c4      	beq.n	1b14 <get+0x34>
				*(--d) = *s++;
    1b8a:	f816 5b01 	ldrb.w	r5, [r6], #1
    1b8e:	f802 5d01 	strb.w	r5, [r2, #-1]!
    1b92:	e7f8      	b.n	1b86 <get+0xa6>
			*(--d) = *s++;
    1b94:	f816 8b01 	ldrb.w	r8, [r6], #1
    1b98:	f80e 8d01 	strb.w	r8, [lr, #-1]!
    1b9c:	e7de      	b.n	1b5c <get+0x7c>
    1b9e:	bf00      	nop
    1ba0:	4000d000 	.word	0x4000d000

00001ba4 <isr>:
#pragma GCC pop_options

static int isr(struct rand *rng, bool store)
{
    1ba4:	b530      	push	{r4, r5, lr}
	u8_t last;

	if (!rng) {
    1ba6:	b1d0      	cbz	r0, 1bde <isr+0x3a>
		return -ENOBUFS;
	}

	last = rng->last + 1;
    1ba8:	78c2      	ldrb	r2, [r0, #3]
	if (last == rng->count) {
    1baa:	7805      	ldrb	r5, [r0, #0]
		last = 0;
	}

	if (last == rng->first) {
    1bac:	7884      	ldrb	r4, [r0, #2]
	last = rng->last + 1;
    1bae:	1c53      	adds	r3, r2, #1
    1bb0:	b2db      	uxtb	r3, r3
		last = 0;
    1bb2:	42ab      	cmp	r3, r5
    1bb4:	bf08      	it	eq
    1bb6:	2300      	moveq	r3, #0
	if (last == rng->first) {
    1bb8:	42a3      	cmp	r3, r4
    1bba:	d010      	beq.n	1bde <isr+0x3a>
		 * new value could be generated before NRF_RNG task is stopped.
		 */
		return -ENOBUFS;
	}

	if (!store) {
    1bbc:	b161      	cbz	r1, 1bd8 <isr+0x34>
		return -EBUSY;
	}

	rng->rand[rng->last] = NRF_RNG->VALUE;
    1bbe:	490a      	ldr	r1, [pc, #40]	; (1be8 <isr+0x44>)
    1bc0:	4402      	add	r2, r0
    1bc2:	f8d1 1508 	ldr.w	r1, [r1, #1288]	; 0x508
    1bc6:	7111      	strb	r1, [r2, #4]
	rng->last = last;
    1bc8:	70c3      	strb	r3, [r0, #3]

	last = rng->last + 1;
    1bca:	3301      	adds	r3, #1
    1bcc:	b2db      	uxtb	r3, r3
	if (last == rng->count) {
		last = 0;
    1bce:	429d      	cmp	r5, r3
    1bd0:	bf08      	it	eq
    1bd2:	2300      	moveq	r3, #0
	}

	if (last == rng->first) {
    1bd4:	42a3      	cmp	r3, r4
    1bd6:	d005      	beq.n	1be4 <isr+0x40>
		return 0;
	}

	return -EBUSY;
    1bd8:	f06f 000f 	mvn.w	r0, #15
    1bdc:	bd30      	pop	{r4, r5, pc}
		return -ENOBUFS;
    1bde:	f06f 0036 	mvn.w	r0, #54	; 0x36
    1be2:	bd30      	pop	{r4, r5, pc}
		return 0;
    1be4:	2000      	movs	r0, #0
}
    1be6:	bd30      	pop	{r4, r5, pc}
    1be8:	4000d000 	.word	0x4000d000

00001bec <entropy_nrf5_init>:
		    entropy_nrf5_init, &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(struct device *device)
{
    1bec:	b570      	push	{r4, r5, r6, lr}
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
    1bee:	6884      	ldr	r4, [r0, #8]

K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex);

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    1bf0:	2201      	movs	r2, #1
    1bf2:	4611      	mov	r1, r2
    1bf4:	4620      	mov	r0, r4
    1bf6:	f008 fbbb 	bl	a370 <_impl_k_sem_init>
    1bfa:	f104 0018 	add.w	r0, r4, #24
    1bfe:	2201      	movs	r2, #1
    1c00:	2100      	movs	r1, #0
    1c02:	f008 fbb5 	bl	a370 <_impl_k_sem_init>
	rng->threshold = threshold;
    1c06:	2304      	movs	r3, #4
    1c08:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
    1c0c:	230c      	movs	r3, #12
	rng->first = rng->last = 0;
    1c0e:	2500      	movs	r5, #0
	rng->threshold = threshold;
    1c10:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	rng->count = len;
    1c14:	2105      	movs	r1, #5
	init((struct rand *)dev_data->isr, RAND_ISR_LEN,
	     CONFIG_ENTROPY_NRF5_ISR_THRESHOLD);

	/* Enable or disable bias correction */
	if (IS_ENABLED(CONFIG_ENTROPY_NRF5_BIAS_CORRECTION)) {
		NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
    1c16:	4b11      	ldr	r3, [pc, #68]	; (1c5c <entropy_nrf5_init+0x70>)
	rng->count = len;
    1c18:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
    1c1c:	260d      	movs	r6, #13
	rng->first = rng->last = 0;
    1c1e:	f884 5033 	strb.w	r5, [r4, #51]	; 0x33
    1c22:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
	rng->count = len;
    1c26:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
	rng->first = rng->last = 0;
    1c2a:	f884 503f 	strb.w	r5, [r4, #63]	; 0x3f
    1c2e:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
		NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
    1c32:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
    1c36:	f042 0201 	orr.w	r2, r2, #1
    1c3a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	} else {
		NRF_RNG->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
	}

	NRF_RNG->EVENTS_VALRDY = 0;
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
    1c3e:	2201      	movs	r2, #1
	NRF_RNG->EVENTS_VALRDY = 0;
    1c40:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
	NRF_RNG->TASKS_START = 1;
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RNG_regw_sideeffects();
#endif

	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr_rand,
    1c44:	4630      	mov	r0, r6
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
    1c46:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	NRF_RNG->TASKS_START = 1;
    1c4a:	601a      	str	r2, [r3, #0]
	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr_rand,
    1c4c:	462a      	mov	r2, r5
    1c4e:	f7ff f895 	bl	d7c <_irq_priority_set>
		    DEVICE_GET(entropy_nrf5), 0);
	irq_enable(NRF5_IRQ_RNG_IRQn);
    1c52:	4630      	mov	r0, r6
    1c54:	f7ff f860 	bl	d18 <_arch_irq_enable>

	return 0;
}
    1c58:	4628      	mov	r0, r5
    1c5a:	bd70      	pop	{r4, r5, r6, pc}
    1c5c:	4000d000 	.word	0x4000d000

00001c60 <isr_rand>:
{
    1c60:	b538      	push	{r3, r4, r5, lr}
	if (NRF_RNG->EVENTS_VALRDY) {
    1c62:	4b12      	ldr	r3, [pc, #72]	; (1cac <isr_rand+0x4c>)
    1c64:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    1c68:	b1fb      	cbz	r3, 1caa <isr_rand+0x4a>
		struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
    1c6a:	6885      	ldr	r5, [r0, #8]
		ret = isr((struct rand *)dev_data->isr, true);
    1c6c:	2101      	movs	r1, #1
    1c6e:	f105 003c 	add.w	r0, r5, #60	; 0x3c
    1c72:	f7ff ff97 	bl	1ba4 <isr>
		if (ret != -EBUSY) {
    1c76:	f110 0f10 	cmn.w	r0, #16
		ret = isr((struct rand *)dev_data->isr, true);
    1c7a:	4604      	mov	r4, r0
		if (ret != -EBUSY) {
    1c7c:	d00d      	beq.n	1c9a <isr_rand+0x3a>
			ret = isr((struct rand *)dev_data->thr,
    1c7e:	f110 0437 	adds.w	r4, r0, #55	; 0x37
    1c82:	bf14      	ite	ne
    1c84:	2100      	movne	r1, #0
    1c86:	2101      	moveq	r1, #1
    1c88:	f105 0030 	add.w	r0, r5, #48	; 0x30
    1c8c:	f7ff ff8a 	bl	1ba4 <isr>
    1c90:	4604      	mov	r4, r0

K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    1c92:	f105 0018 	add.w	r0, r5, #24
    1c96:	f008 fb75 	bl	a384 <_impl_k_sem_give>
		NRF_RNG->EVENTS_VALRDY = 0;
    1c9a:	4b04      	ldr	r3, [pc, #16]	; (1cac <isr_rand+0x4c>)
    1c9c:	2200      	movs	r2, #0
		if (ret != -EBUSY) {
    1c9e:	3410      	adds	r4, #16
		NRF_RNG->EVENTS_VALRDY = 0;
    1ca0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
			NRF_RNG->TASKS_STOP = 1;
    1ca4:	bf1c      	itt	ne
    1ca6:	2201      	movne	r2, #1
    1ca8:	605a      	strne	r2, [r3, #4]
    1caa:	bd38      	pop	{r3, r4, r5, pc}
    1cac:	4000d000 	.word	0x4000d000

00001cb0 <entropy_nrf5_get_entropy>:
{
    1cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
    1cb4:	6885      	ldr	r5, [r0, #8]
{
    1cb6:	460f      	mov	r7, r1
    1cb8:	4614      	mov	r4, r2
				k_sem_take(&dev_data->sem_sync, K_FOREVER);
    1cba:	f105 0818 	add.w	r8, r5, #24
	while (len) {
    1cbe:	b914      	cbnz	r4, 1cc6 <entropy_nrf5_get_entropy+0x16>
}
    1cc0:	4620      	mov	r0, r4
    1cc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1cc6:	2cff      	cmp	r4, #255	; 0xff
    1cc8:	4623      	mov	r3, r4
    1cca:	bf28      	it	cs
    1ccc:	23ff      	movcs	r3, #255	; 0xff
		len -= len8;
    1cce:	1ae4      	subs	r4, r4, r3
    1cd0:	b2de      	uxtb	r6, r3
    1cd2:	b2a4      	uxth	r4, r4
			len8 = get((struct rand *)dev_data->thr, len8, buf);
    1cd4:	f105 0930 	add.w	r9, r5, #48	; 0x30
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    1cd8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    1cdc:	4628      	mov	r0, r5
    1cde:	f008 fbb1 	bl	a444 <_impl_k_sem_take>
    1ce2:	4631      	mov	r1, r6
    1ce4:	463a      	mov	r2, r7
    1ce6:	4648      	mov	r0, r9
    1ce8:	f7ff fefa 	bl	1ae0 <get>
    1cec:	4606      	mov	r6, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    1cee:	4628      	mov	r0, r5
    1cf0:	f008 fb48 	bl	a384 <_impl_k_sem_give>
			if (len8) {
    1cf4:	2e00      	cmp	r6, #0
    1cf6:	d0e2      	beq.n	1cbe <entropy_nrf5_get_entropy+0xe>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    1cf8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    1cfc:	4640      	mov	r0, r8
    1cfe:	f008 fba1 	bl	a444 <_impl_k_sem_take>
    1d02:	e7e9      	b.n	1cd8 <entropy_nrf5_get_entropy+0x28>

00001d04 <rtc_compare_set>:
static void rtc_compare_set(u32_t rtc_ticks)
{
	u32_t rtc_now;

	/* Try to set CC value. We assume the procedure is always successful. */
	RTC_CC_VALUE = rtc_ticks;
    1d04:	4b08      	ldr	r3, [pc, #32]	; (1d28 <rtc_compare_set+0x24>)
    1d06:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
	rtc_now = RTC_COUNTER;
    1d0a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	 * by checking if the unsigned subtraction wraps around.
	 * If either of the above are true then instead of waiting for the CC
	 * event to trigger in the form of an interrupt, trigger it directly
	 * using the NVIC.
	 */
	if ((((rtc_ticks - rtc_now) & RTC_MASK) < RTC_MIN_DELTA) ||
    1d0e:	1ac0      	subs	r0, r0, r3
    1d10:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1d14:	4b05      	ldr	r3, [pc, #20]	; (1d2c <rtc_compare_set+0x28>)
    1d16:	3802      	subs	r0, #2
    1d18:	4298      	cmp	r0, r3
    1d1a:	bf82      	ittt	hi
    1d1c:	4b04      	ldrhi	r3, [pc, #16]	; (1d30 <rtc_compare_set+0x2c>)
    1d1e:	f44f 3200 	movhi.w	r2, #131072	; 0x20000
    1d22:	f8c3 2100 	strhi.w	r2, [r3, #256]	; 0x100
    1d26:	4770      	bx	lr
    1d28:	40011000 	.word	0x40011000
    1d2c:	007ffffd 	.word	0x007ffffd
    1d30:	e000e100 	.word	0xe000e100

00001d34 <rtc_announce_set_next>:
 * Since this function can be preempted, we need to take some provisions to
 * announce all expected sys ticks that have passed.
 *
 */
static void rtc_announce_set_next(void)
{
    1d34:	b510      	push	{r4, lr}

	/* Read the RTC counter one single time in the beginning, so that an
	 * increase in the counter during this procedure leads to no race
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;
    1d36:	4b12      	ldr	r3, [pc, #72]	; (1d80 <rtc_announce_set_next+0x4c>)

	/* Calculate how many RTC ticks elapsed since the last sys tick. */
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    1d38:	4c12      	ldr	r4, [pc, #72]	; (1d84 <rtc_announce_set_next+0x50>)
	rtc_now = RTC_COUNTER;
    1d3a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    1d3e:	6822      	ldr	r2, [r4, #0]
    1d40:	1a80      	subs	r0, r0, r2
    1d42:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	/* If no sys ticks have elapsed, there is no point in incrementing the
	 * counters or announcing it.
	 */
	if (rtc_elapsed >= RTC_TICKS_PER_SYS_TICK) {
    1d46:	f5b0 7fa3 	cmp.w	r0, #326	; 0x146
    1d4a:	d911      	bls.n	1d70 <rtc_announce_set_next+0x3c>
		/* Calculate how many sys ticks elapsed since the last sys tick
		 * and notify the kernel if necessary.
		 */
		sys_elapsed = rtc_elapsed / RTC_TICKS_PER_SYS_TICK;

		if (sys_elapsed > expected_sys_ticks) {
    1d4c:	490e      	ldr	r1, [pc, #56]	; (1d88 <rtc_announce_set_next+0x54>)
    1d4e:	6809      	ldr	r1, [r1, #0]
		sys_elapsed = rtc_elapsed / RTC_TICKS_PER_SYS_TICK;
    1d50:	f240 1347 	movw	r3, #327	; 0x147
    1d54:	fbb0 f0f3 	udiv	r0, r0, r3
    1d58:	4288      	cmp	r0, r1
    1d5a:	bf28      	it	cs
    1d5c:	4608      	movcs	r0, r1

		/* Store RTC_COUNTER floored to the last sys tick. This is
		 * done, so that ISR can properly calculate that 1 sys tick
		 * has passed.
		 */
		rtc_past = (rtc_past +
    1d5e:	fb03 2300 	mla	r3, r3, r0, r2
				(sys_elapsed * RTC_TICKS_PER_SYS_TICK)
			   ) & RTC_MASK;
    1d62:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		rtc_past = (rtc_past +
    1d66:	6023      	str	r3, [r4, #0]

		_sys_idle_elapsed_ticks = sys_elapsed;
    1d68:	4b08      	ldr	r3, [pc, #32]	; (1d8c <rtc_announce_set_next+0x58>)
    1d6a:	6018      	str	r0, [r3, #0]
		_sys_clock_tick_announce();
    1d6c:	f008 fb92 	bl	a494 <_nano_sys_clock_tick_announce>
	}

	/* Set the RTC to the next sys tick */
	rtc_compare_set(rtc_past + RTC_TICKS_PER_SYS_TICK);
    1d70:	6820      	ldr	r0, [r4, #0]
}
    1d72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rtc_compare_set(rtc_past + RTC_TICKS_PER_SYS_TICK);
    1d76:	f200 1047 	addw	r0, r0, #327	; 0x147
    1d7a:	f7ff bfc3 	b.w	1d04 <rtc_compare_set>
    1d7e:	bf00      	nop
    1d80:	40011000 	.word	0x40011000
    1d84:	20000074 	.word	0x20000074
    1d88:	20000070 	.word	0x20000070
    1d8c:	20003944 	.word	0x20003944

00001d90 <rtc1_nrf5_isr>:
 */
static void rtc1_nrf5_isr(void *arg)
{

	ARG_UNUSED(arg);
	RTC_CC_EVENT = 0;
    1d90:	4b02      	ldr	r3, [pc, #8]	; (1d9c <rtc1_nrf5_isr+0xc>)
    1d92:	2200      	movs	r2, #0
    1d94:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	 */
	expected_sys_ticks = 0;
	/* Anounce elapsed of _sys_idle_elapsed_ticks systicks*/
	_sys_clock_tick_announce();
#else
	rtc_announce_set_next();
    1d98:	f7ff bfcc 	b.w	1d34 <rtc_announce_set_next>
    1d9c:	40011000 	.word	0x40011000

00001da0 <_timer_idle_enter>:
	if ((sys_ticks < 0) ||
    1da0:	f246 4335 	movw	r3, #25653	; 0x6435
		sys_ticks = RTC_HALF / RTC_TICKS_PER_SYS_TICK;
    1da4:	4298      	cmp	r0, r3
    1da6:	bf28      	it	cs
    1da8:	4618      	movcs	r0, r3
	expected_sys_ticks = sys_ticks;
    1daa:	4b05      	ldr	r3, [pc, #20]	; (1dc0 <_timer_idle_enter+0x20>)
    1dac:	6018      	str	r0, [r3, #0]
	rtc_compare_set(rtc_past + (sys_ticks * RTC_TICKS_PER_SYS_TICK));
    1dae:	4b05      	ldr	r3, [pc, #20]	; (1dc4 <_timer_idle_enter+0x24>)
    1db0:	681b      	ldr	r3, [r3, #0]
    1db2:	f240 1247 	movw	r2, #327	; 0x147
    1db6:	fb02 3000 	mla	r0, r2, r0, r3
    1dba:	f7ff bfa3 	b.w	1d04 <rtc_compare_set>
    1dbe:	bf00      	nop
    1dc0:	20000070 	.word	0x20000070
    1dc4:	20000074 	.word	0x20000074

00001dc8 <_timer_idle_exit>:
{
    1dc8:	b508      	push	{r3, lr}
	RTC_CC_EVENT = 0;
    1dca:	4b07      	ldr	r3, [pc, #28]	; (1de8 <_timer_idle_exit+0x20>)
    1dcc:	2200      	movs	r2, #0
    1dce:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1dd2:	4b06      	ldr	r3, [pc, #24]	; (1dec <_timer_idle_exit+0x24>)
    1dd4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1dd8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	rtc_announce_set_next();
    1ddc:	f7ff ffaa 	bl	1d34 <rtc_announce_set_next>
	expected_sys_ticks = 1;
    1de0:	4b03      	ldr	r3, [pc, #12]	; (1df0 <_timer_idle_exit+0x28>)
    1de2:	2201      	movs	r2, #1
    1de4:	601a      	str	r2, [r3, #0]
    1de6:	bd08      	pop	{r3, pc}
    1de8:	40011000 	.word	0x40011000
    1dec:	e000e100 	.word	0xe000e100
    1df0:	20000070 	.word	0x20000070

00001df4 <_sys_clock_driver_init>:
#endif

}

int _sys_clock_driver_init(struct device *device)
{
    1df4:	b570      	push	{r4, r5, r6, lr}
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    1df6:	4818      	ldr	r0, [pc, #96]	; (1e58 <_sys_clock_driver_init+0x64>)
    1df8:	f007 feb6 	bl	9b68 <device_get_binding>
	if (!clock) {
    1dfc:	b348      	cbz	r0, 1e52 <_sys_clock_driver_init+0x5e>
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->on(dev, sys);
    1dfe:	6843      	ldr	r3, [r0, #4]
#ifdef CONFIG_TICKLESS_IDLE
	expected_sys_ticks = 1;
#endif /* CONFIG_TICKLESS_IDLE */

	/* TODO: replace with counter driver to access RTC */
	SYS_CLOCK_RTC->PRESCALER = 0;
    1e00:	4d16      	ldr	r5, [pc, #88]	; (1e5c <_sys_clock_driver_init+0x68>)
    1e02:	681b      	ldr	r3, [r3, #0]
    1e04:	2101      	movs	r1, #1
    1e06:	4798      	blx	r3
	rtc_past = 0;
    1e08:	4b15      	ldr	r3, [pc, #84]	; (1e60 <_sys_clock_driver_init+0x6c>)
    1e0a:	2400      	movs	r4, #0
    1e0c:	601c      	str	r4, [r3, #0]
	expected_sys_ticks = 1;
    1e0e:	4b15      	ldr	r3, [pc, #84]	; (1e64 <_sys_clock_driver_init+0x70>)
    1e10:	2601      	movs	r6, #1
    1e12:	601e      	str	r6, [r3, #0]
	SYS_CLOCK_RTC->CC[0] = RTC_TICKS_PER_SYS_TICK;
    1e14:	f240 1347 	movw	r3, #327	; 0x147
	SYS_CLOCK_RTC->PRESCALER = 0;
    1e18:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
	SYS_CLOCK_RTC->CC[0] = RTC_TICKS_PER_SYS_TICK;
    1e1c:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
	SYS_CLOCK_RTC->EVTENSET = RTC_EVTENSET_COMPARE0_Msk;
    1e20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    1e24:	f8c5 3344 	str.w	r3, [r5, #836]	; 0x344
	SYS_CLOCK_RTC->INTENSET = RTC_INTENSET_COMPARE0_Msk;
    1e28:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    1e2c:	4b0e      	ldr	r3, [pc, #56]	; (1e68 <_sys_clock_driver_init+0x74>)

	/* Clear the event flag and possible pending interrupt */
	RTC_CC_EVENT = 0;
    1e2e:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    1e32:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1e36:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ClearPendingIRQ(NRF5_IRQ_RTC1_IRQn);

	IRQ_CONNECT(NRF5_IRQ_RTC1_IRQn, 1, rtc1_nrf5_isr, 0, 0);
    1e3a:	4631      	mov	r1, r6
    1e3c:	4622      	mov	r2, r4
    1e3e:	2011      	movs	r0, #17
    1e40:	f7fe ff9c 	bl	d7c <_irq_priority_set>
	irq_enable(NRF5_IRQ_RTC1_IRQn);
    1e44:	2011      	movs	r0, #17
    1e46:	f7fe ff67 	bl	d18 <_arch_irq_enable>

	SYS_CLOCK_RTC->TASKS_CLEAR = 1;
    1e4a:	60ae      	str	r6, [r5, #8]
	SYS_CLOCK_RTC->TASKS_START = 1;

	return 0;
    1e4c:	4620      	mov	r0, r4
	SYS_CLOCK_RTC->TASKS_START = 1;
    1e4e:	602e      	str	r6, [r5, #0]
	return 0;
    1e50:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    1e52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    1e56:	bd70      	pop	{r4, r5, r6, pc}
    1e58:	0000b448 	.word	0x0000b448
    1e5c:	40011000 	.word	0x40011000
    1e60:	20000074 	.word	0x20000074
    1e64:	20000070 	.word	0x20000070
    1e68:	e000e100 	.word	0xe000e100

00001e6c <_timer_cycle_get_32>:

u32_t _timer_cycle_get_32(void)
{
    1e6c:	b530      	push	{r4, r5, lr}
	u32_t elapsed_cycles;
	u32_t sys_clock_tick_count;
	u32_t rtc_prev;
	u32_t rtc_now;

	rtc_now = RTC_COUNTER;
    1e6e:	4a0b      	ldr	r2, [pc, #44]	; (1e9c <_timer_cycle_get_32+0x30>)
	/* Discard value of  RTC_COUNTER read at LFCLK transition */
	do {
		sys_clock_tick_count = _sys_clock_tick_count;
    1e70:	480b      	ldr	r0, [pc, #44]	; (1ea0 <_timer_cycle_get_32+0x34>)
	rtc_now = RTC_COUNTER;
    1e72:	f8d2 1504 	ldr.w	r1, [r2, #1284]	; 0x504
		sys_clock_tick_count = _sys_clock_tick_count;
    1e76:	e9d0 4500 	ldrd	r4, r5, [r0]
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
					     RTC_TICKS_PER_SYS_TICK)) &
				 RTC_MASK;
		rtc_prev = rtc_now;
		rtc_now = RTC_COUNTER;
    1e7a:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	} while (rtc_now != rtc_prev);
    1e7e:	4299      	cmp	r1, r3
    1e80:	d10a      	bne.n	1e98 <_timer_cycle_get_32+0x2c>

	return (sys_clock_tick_count * sys_clock_hw_cycles_per_tick) +
    1e82:	4a08      	ldr	r2, [pc, #32]	; (1ea4 <_timer_cycle_get_32+0x38>)
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
    1e84:	f240 1347 	movw	r3, #327	; 0x147
    1e88:	fb03 1314 	mls	r3, r3, r4, r1
	return (sys_clock_tick_count * sys_clock_hw_cycles_per_tick) +
    1e8c:	6810      	ldr	r0, [r2, #0]
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
    1e8e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	       elapsed_cycles;
}
    1e92:	fb00 3004 	mla	r0, r0, r4, r3
    1e96:	bd30      	pop	{r4, r5, pc}
    1e98:	4619      	mov	r1, r3
    1e9a:	e7ec      	b.n	1e76 <_timer_cycle_get_32+0xa>
    1e9c:	40011000 	.word	0x40011000
    1ea0:	20001ae8 	.word	0x20001ae8
    1ea4:	20003948 	.word	0x20003948

00001ea8 <atomic_or>:
 *
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
    1ea8:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
}
    1eaa:	f3bf 8f5b 	dmb	ish
    1eae:	e850 3f00 	ldrex	r3, [r0]
    1eb2:	ea43 0201 	orr.w	r2, r3, r1
    1eb6:	e840 2e00 	strex	lr, r2, [r0]
    1eba:	f1be 0f00 	cmp.w	lr, #0
    1ebe:	d1f6      	bne.n	1eae <atomic_or+0x6>
    1ec0:	f3bf 8f5b 	dmb	ish
    1ec4:	4618      	mov	r0, r3
    1ec6:	f85d fb04 	ldr.w	pc, [sp], #4

00001eca <atomic_and>:
 *
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
    1eca:	b500      	push	{lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
}
    1ecc:	f3bf 8f5b 	dmb	ish
    1ed0:	e850 3f00 	ldrex	r3, [r0]
    1ed4:	ea03 0201 	and.w	r2, r3, r1
    1ed8:	e840 2e00 	strex	lr, r2, [r0]
    1edc:	f1be 0f00 	cmp.w	lr, #0
    1ee0:	d1f6      	bne.n	1ed0 <atomic_and+0x6>
    1ee2:	f3bf 8f5b 	dmb	ish
    1ee6:	4618      	mov	r0, r3
    1ee8:	f85d fb04 	ldr.w	pc, [sp], #4

00001eec <hci_cmd_done.isra.9>:

	/* we only allow to enable once so this bit must be keep set */
	atomic_set(bt_dev.flags, BIT(BT_DEV_ENABLE));
}

static void hci_cmd_done(u16_t opcode, u8_t status, struct net_buf *buf)
    1eec:	b570      	push	{r4, r5, r6, lr}
    1eee:	4606      	mov	r6, r0
{
	BT_DBG("opcode 0x%04x status 0x%02x buf %p", opcode, status, buf);

	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    1ef0:	7988      	ldrb	r0, [r1, #6]
static void hci_cmd_done(u16_t opcode, u8_t status, struct net_buf *buf)
    1ef2:	460d      	mov	r5, r1
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    1ef4:	f007 fd0a 	bl	990c <net_buf_pool_get>
    1ef8:	4b0e      	ldr	r3, [pc, #56]	; (1f34 <hci_cmd_done.isra.9+0x48>)
    1efa:	4283      	cmp	r3, r0
    1efc:	d119      	bne.n	1f32 <hci_cmd_done.isra.9+0x46>
			opcode, buf->pool_id, net_buf_pool_get(buf->pool_id),
			&hci_cmd_pool);
		return;
	}

	if (cmd(buf)->opcode != opcode) {
    1efe:	4628      	mov	r0, r5
    1f00:	f007 fd0a 	bl	9918 <net_buf_id>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
			opcode, cmd(buf)->opcode);
	}

	/* If the command was synchronous wake up bt_hci_cmd_send_sync() */
	if (cmd(buf)->sync) {
    1f04:	4628      	mov	r0, r5
    1f06:	f007 fd07 	bl	9918 <net_buf_id>
    1f0a:	4c0b      	ldr	r4, [pc, #44]	; (1f38 <hci_cmd_done.isra.9+0x4c>)
    1f0c:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    1f10:	6843      	ldr	r3, [r0, #4]
    1f12:	b173      	cbz	r3, 1f32 <hci_cmd_done.isra.9+0x46>
		cmd(buf)->status = status;
    1f14:	4628      	mov	r0, r5
    1f16:	f007 fcff 	bl	9918 <net_buf_id>
    1f1a:	f804 6030 	strb.w	r6, [r4, r0, lsl #3]
		k_sem_give(cmd(buf)->sync);
    1f1e:	4628      	mov	r0, r5
    1f20:	f007 fcfa 	bl	9918 <net_buf_id>
    1f24:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
	}
}
    1f28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    1f2c:	6840      	ldr	r0, [r0, #4]
    1f2e:	f008 ba29 	b.w	a384 <_impl_k_sem_give>
    1f32:	bd70      	pop	{r4, r5, r6, pc}
    1f34:	20003a3c 	.word	0x20003a3c
    1f38:	20000078 	.word	0x20000078

00001f3c <atomic_test_bit.constprop.25>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1f3c:	4b07      	ldr	r3, [pc, #28]	; (1f5c <atomic_test_bit.constprop.25+0x20>)
    1f3e:	f3bf 8f5b 	dmb	ish
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    1f42:	0942      	lsrs	r2, r0, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1f44:	eb03 0382 	add.w	r3, r3, r2, lsl #2

	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    1f48:	f000 001f 	and.w	r0, r0, #31
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    1f4e:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    1f52:	fa43 f000 	asr.w	r0, r3, r0
}
    1f56:	f000 0001 	and.w	r0, r0, #1
    1f5a:	4770      	bx	lr
    1f5c:	20003730 	.word	0x20003730

00001f60 <bt_hci_cmd_create>:
{
    1f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1f64:	4680      	mov	r8, r0
    1f66:	4689      	mov	r9, r1
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    1f68:	4813      	ldr	r0, [pc, #76]	; (1fb8 <bt_hci_cmd_create+0x58>)
	cmd(buf)->opcode = opcode;
    1f6a:	4d14      	ldr	r5, [pc, #80]	; (1fbc <bt_hci_cmd_create+0x5c>)
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    1f6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    1f70:	f007 fd60 	bl	9a34 <net_buf_alloc_fixed>
    1f74:	4604      	mov	r4, r0
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    1f76:	f100 0608 	add.w	r6, r0, #8
    1f7a:	2100      	movs	r1, #0
    1f7c:	4630      	mov	r0, r6
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	*(u8_t *)net_buf_user_data(buf) = type;
    1f7e:	2700      	movs	r7, #0
    1f80:	f007 fd77 	bl	9a72 <net_buf_simple_reserve>
    1f84:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
    1f86:	4620      	mov	r0, r4
    1f88:	f007 fcc6 	bl	9918 <net_buf_id>
    1f8c:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    1f90:	f8a0 8002 	strh.w	r8, [r0, #2]
	cmd(buf)->sync = NULL;
    1f94:	4620      	mov	r0, r4
    1f96:	f007 fcbf 	bl	9918 <net_buf_id>
    1f9a:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
	hdr = net_buf_add(buf, sizeof(*hdr));
    1f9e:	2103      	movs	r1, #3
	cmd(buf)->sync = NULL;
    1fa0:	6047      	str	r7, [r0, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    1fa2:	4630      	mov	r0, r6
    1fa4:	f007 fda8 	bl	9af8 <net_buf_simple_add>
	hdr->param_len = param_len;
    1fa8:	f880 9002 	strb.w	r9, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    1fac:	f8a0 8000 	strh.w	r8, [r0]
}
    1fb0:	4620      	mov	r0, r4
    1fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1fb6:	bf00      	nop
    1fb8:	20003a3c 	.word	0x20003a3c
    1fbc:	20000078 	.word	0x20000078

00001fc0 <bt_hci_cmd_send_sync>:
{
    1fc0:	b570      	push	{r4, r5, r6, lr}
    1fc2:	4615      	mov	r5, r2
    1fc4:	b086      	sub	sp, #24
	if (!buf) {
    1fc6:	460c      	mov	r4, r1
    1fc8:	b919      	cbnz	r1, 1fd2 <bt_hci_cmd_send_sync+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
    1fca:	f7ff ffc9 	bl	1f60 <bt_hci_cmd_create>
		if (!buf) {
    1fce:	4604      	mov	r4, r0
    1fd0:	b368      	cbz	r0, 202e <bt_hci_cmd_send_sync+0x6e>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    1fd2:	2201      	movs	r2, #1
    1fd4:	2100      	movs	r1, #0
    1fd6:	4668      	mov	r0, sp
    1fd8:	f008 f9ca 	bl	a370 <_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    1fdc:	4620      	mov	r0, r4
    1fde:	f007 fc9b 	bl	9918 <net_buf_id>
    1fe2:	4e14      	ldr	r6, [pc, #80]	; (2034 <bt_hci_cmd_send_sync+0x74>)
    1fe4:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
    1fe8:	f8c0 d004 	str.w	sp, [r0, #4]
	net_buf_ref(buf);
    1fec:	4620      	mov	r0, r4
    1fee:	f007 fd7f 	bl	9af0 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    1ff2:	4621      	mov	r1, r4
    1ff4:	4810      	ldr	r0, [pc, #64]	; (2038 <bt_hci_cmd_send_sync+0x78>)
    1ff6:	f007 fd40 	bl	9a7a <net_buf_put>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    1ffa:	f242 7110 	movw	r1, #10000	; 0x2710
    1ffe:	4668      	mov	r0, sp
    2000:	f008 fa20 	bl	a444 <_impl_k_sem_take>
	if (cmd(buf)->status) {
    2004:	4620      	mov	r0, r4
    2006:	f007 fc87 	bl	9918 <net_buf_id>
    200a:	f816 0030 	ldrb.w	r0, [r6, r0, lsl #3]
    200e:	b130      	cbz	r0, 201e <bt_hci_cmd_send_sync+0x5e>
		net_buf_unref(buf);
    2010:	4620      	mov	r0, r4
    2012:	f007 fd3f 	bl	9a94 <net_buf_unref>
		err = -EIO;
    2016:	f06f 0004 	mvn.w	r0, #4
}
    201a:	b006      	add	sp, #24
    201c:	bd70      	pop	{r4, r5, r6, pc}
		if (rsp) {
    201e:	b10d      	cbz	r5, 2024 <bt_hci_cmd_send_sync+0x64>
			*rsp = buf;
    2020:	602c      	str	r4, [r5, #0]
    2022:	e7fa      	b.n	201a <bt_hci_cmd_send_sync+0x5a>
			net_buf_unref(buf);
    2024:	4620      	mov	r0, r4
    2026:	f007 fd35 	bl	9a94 <net_buf_unref>
		err = 0;
    202a:	4628      	mov	r0, r5
    202c:	e7f5      	b.n	201a <bt_hci_cmd_send_sync+0x5a>
			return -ENOBUFS;
    202e:	f06f 0036 	mvn.w	r0, #54	; 0x36
    2032:	e7f2      	b.n	201a <bt_hci_cmd_send_sync+0x5a>
    2034:	20000078 	.word	0x20000078
    2038:	200037e4 	.word	0x200037e4

0000203c <set_random_address>:
{
    203c:	b570      	push	{r4, r5, r6, lr}
#define BT_ADDR_LE_NONE (&(bt_addr_le_t) { 0, \
			 { { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff } } })

static inline int bt_addr_cmp(const bt_addr_t *a, const bt_addr_t *b)
{
	return memcmp(a, b, sizeof(*a));
    203e:	4d15      	ldr	r5, [pc, #84]	; (2094 <set_random_address+0x58>)
    2040:	2206      	movs	r2, #6
    2042:	f105 0108 	add.w	r1, r5, #8
    2046:	4606      	mov	r6, r0
    2048:	f7fe fac1 	bl	5ce <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    204c:	4604      	mov	r4, r0
    204e:	b1d8      	cbz	r0, 2088 <set_random_address+0x4c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    2050:	2106      	movs	r1, #6
    2052:	f242 0005 	movw	r0, #8197	; 0x2005
    2056:	f7ff ff83 	bl	1f60 <bt_hci_cmd_create>
	if (!buf) {
    205a:	4604      	mov	r4, r0
    205c:	b1b0      	cbz	r0, 208c <set_random_address+0x50>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    205e:	2206      	movs	r2, #6
    2060:	4631      	mov	r1, r6
    2062:	3008      	adds	r0, #8
    2064:	f007 fd4e 	bl	9b04 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    2068:	4621      	mov	r1, r4
    206a:	2200      	movs	r2, #0
    206c:	f242 0005 	movw	r0, #8197	; 0x2005
    2070:	f7ff ffa6 	bl	1fc0 <bt_hci_cmd_send_sync>
	if (err) {
    2074:	4604      	mov	r4, r0
    2076:	b938      	cbnz	r0, 2088 <set_random_address+0x4c>
	return memcmp(a, b, sizeof(*a));
}

static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    2078:	2206      	movs	r2, #6
    207a:	4631      	mov	r1, r6
    207c:	f105 0008 	add.w	r0, r5, #8
    2080:	f7fe faba 	bl	5f8 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    2084:	2301      	movs	r3, #1
    2086:	71eb      	strb	r3, [r5, #7]
}
    2088:	4620      	mov	r0, r4
    208a:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    208c:	f06f 0436 	mvn.w	r4, #54	; 0x36
    2090:	e7fa      	b.n	2088 <set_random_address+0x4c>
    2092:	bf00      	nop
    2094:	20003730 	.word	0x20003730

00002098 <le_set_private_addr>:
{
    2098:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
    209a:	2106      	movs	r1, #6
    209c:	4668      	mov	r0, sp
    209e:	f001 fd93 	bl	3bc8 <bt_rand>
	if (err) {
    20a2:	b940      	cbnz	r0, 20b6 <le_set_private_addr+0x1e>
	nrpa.val[5] &= 0x3f;
    20a4:	f89d 3005 	ldrb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
    20a8:	4668      	mov	r0, sp
	nrpa.val[5] &= 0x3f;
    20aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    20ae:	f88d 3005 	strb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
    20b2:	f7ff ffc3 	bl	203c <set_random_address>
}
    20b6:	b003      	add	sp, #12
    20b8:	f85d fb04 	ldr.w	pc, [sp], #4

000020bc <set_le_scan_enable>:
{
    20bc:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    20be:	2102      	movs	r1, #2
{
    20c0:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    20c2:	f242 000c 	movw	r0, #8204	; 0x200c
    20c6:	f7ff ff4b 	bl	1f60 <bt_hci_cmd_create>
	if (!buf) {
    20ca:	4604      	mov	r4, r0
    20cc:	b320      	cbz	r0, 2118 <set_le_scan_enable+0x5c>
	cp = net_buf_add(buf, sizeof(*cp));
    20ce:	2102      	movs	r1, #2
    20d0:	3008      	adds	r0, #8
    20d2:	f007 fd11 	bl	9af8 <net_buf_simple_add>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    20d6:	2d01      	cmp	r5, #1
	cp = net_buf_add(buf, sizeof(*cp));
    20d8:	4601      	mov	r1, r0
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    20da:	d114      	bne.n	2106 <set_le_scan_enable+0x4a>
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
    20dc:	200a      	movs	r0, #10
    20de:	f7ff ff2d 	bl	1f3c <atomic_test_bit.constprop.25>
    20e2:	7048      	strb	r0, [r1, #1]
	cp->enable = enable;
    20e4:	700d      	strb	r5, [r1, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    20e6:	2200      	movs	r2, #0
    20e8:	4621      	mov	r1, r4
    20ea:	f242 000c 	movw	r0, #8204	; 0x200c
    20ee:	f7ff ff67 	bl	1fc0 <bt_hci_cmd_send_sync>
	if (err) {
    20f2:	4604      	mov	r4, r0
    20f4:	b928      	cbnz	r0, 2102 <set_le_scan_enable+0x46>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    20f6:	2d01      	cmp	r5, #1
    20f8:	d108      	bne.n	210c <set_le_scan_enable+0x50>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    20fa:	2180      	movs	r1, #128	; 0x80
    20fc:	4808      	ldr	r0, [pc, #32]	; (2120 <set_le_scan_enable+0x64>)
    20fe:	f7ff fed3 	bl	1ea8 <atomic_or>
}
    2102:	4620      	mov	r0, r4
    2104:	bd38      	pop	{r3, r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    2106:	2300      	movs	r3, #0
    2108:	7043      	strb	r3, [r0, #1]
    210a:	e7eb      	b.n	20e4 <set_le_scan_enable+0x28>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    210c:	f06f 0180 	mvn.w	r1, #128	; 0x80
    2110:	4803      	ldr	r0, [pc, #12]	; (2120 <set_le_scan_enable+0x64>)
    2112:	f7ff feda 	bl	1eca <atomic_and>
    2116:	e7f4      	b.n	2102 <set_le_scan_enable+0x46>
		return -ENOBUFS;
    2118:	f06f 0436 	mvn.w	r4, #54	; 0x36
    211c:	e7f1      	b.n	2102 <set_le_scan_enable+0x46>
    211e:	bf00      	nop
    2120:	200037a0 	.word	0x200037a0

00002124 <bt_le_scan_update>:

	return 0;
}

int bt_le_scan_update(bool fast_scan)
{
    2124:	b508      	push	{r3, lr}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    2126:	2008      	movs	r0, #8
    2128:	f7ff ff08 	bl	1f3c <atomic_test_bit.constprop.25>
    212c:	4601      	mov	r1, r0
    212e:	b940      	cbnz	r0, 2142 <bt_le_scan_update+0x1e>
		return 0;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    2130:	2007      	movs	r0, #7
    2132:	f7ff ff03 	bl	1f3c <atomic_test_bit.constprop.25>
    2136:	b120      	cbz	r0, 2142 <bt_le_scan_update+0x1e>
		int err;

		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    2138:	4608      	mov	r0, r1

		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window);
	}

	return 0;
}
    213a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    213e:	f7ff bfbd 	b.w	20bc <set_le_scan_enable>
}
    2142:	2000      	movs	r0, #0
    2144:	bd08      	pop	{r3, pc}

00002146 <bt_addr_le_create_static>:
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
}

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
    2146:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
    2148:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
    214a:	2106      	movs	r1, #6
{
    214c:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
    214e:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
    2152:	f001 fd39 	bl	3bc8 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
    2156:	b918      	cbnz	r0, 2160 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
    2158:	79a3      	ldrb	r3, [r4, #6]
    215a:	f063 033f 	orn	r3, r3, #63	; 0x3f
    215e:	71a3      	strb	r3, [r4, #6]

	return 0;
}
    2160:	bd10      	pop	{r4, pc}
	...

00002164 <hci_init>:
	net_buf_unref(rsp);
}
#endif /* CONFIG_BT_HCI_VS_EXT */

static int hci_init(void)
{
    2164:	b5f0      	push	{r4, r5, r6, r7, lr}
    2166:	b087      	sub	sp, #28
	err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    2168:	aa04      	add	r2, sp, #16
    216a:	2100      	movs	r1, #0
    216c:	f640 4003 	movw	r0, #3075	; 0xc03
    2170:	f7ff ff26 	bl	1fc0 <bt_hci_cmd_send_sync>
	if (err) {
    2174:	4604      	mov	r4, r0
    2176:	2800      	cmp	r0, #0
    2178:	f040 8149 	bne.w	240e <hci_init+0x2aa>
	u8_t status = buf->data[0];
    217c:	9b04      	ldr	r3, [sp, #16]
    217e:	689b      	ldr	r3, [r3, #8]
	if (status) {
    2180:	781b      	ldrb	r3, [r3, #0]
    2182:	b96b      	cbnz	r3, 21a0 <hci_init+0x3c>
	scan_dev_found_cb = NULL;
    2184:	4ab6      	ldr	r2, [pc, #728]	; (2460 <hci_init+0x2fc>)
    2186:	6013      	str	r3, [r2, #0]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2188:	4bb6      	ldr	r3, [pc, #728]	; (2464 <hci_init+0x300>)
    218a:	f3bf 8f5b 	dmb	ish
    218e:	2201      	movs	r2, #1
    2190:	e853 1f00 	ldrex	r1, [r3]
    2194:	e843 2000 	strex	r0, r2, [r3]
    2198:	2800      	cmp	r0, #0
    219a:	d1f9      	bne.n	2190 <hci_init+0x2c>
    219c:	f3bf 8f5b 	dmb	ish
	net_buf_unref(rsp);
    21a0:	9804      	ldr	r0, [sp, #16]
    21a2:	f007 fc77 	bl	9a94 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    21a6:	aa04      	add	r2, sp, #16
    21a8:	2100      	movs	r1, #0
    21aa:	f241 0003 	movw	r0, #4099	; 0x1003
    21ae:	f7ff ff07 	bl	1fc0 <bt_hci_cmd_send_sync>
	if (err) {
    21b2:	4604      	mov	r4, r0
    21b4:	2800      	cmp	r0, #0
    21b6:	f040 812a 	bne.w	240e <hci_init+0x2aa>
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    21ba:	9b04      	ldr	r3, [sp, #16]
    21bc:	4daa      	ldr	r5, [pc, #680]	; (2468 <hci_init+0x304>)
    21be:	6899      	ldr	r1, [r3, #8]
    21c0:	2208      	movs	r2, #8
    21c2:	3101      	adds	r1, #1
    21c4:	f105 0016 	add.w	r0, r5, #22
    21c8:	f7fe fa16 	bl	5f8 <memcpy>
	net_buf_unref(rsp);
    21cc:	9804      	ldr	r0, [sp, #16]
    21ce:	f007 fc61 	bl	9a94 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    21d2:	4621      	mov	r1, r4
    21d4:	aa04      	add	r2, sp, #16
    21d6:	f241 0001 	movw	r0, #4097	; 0x1001
    21da:	f7ff fef1 	bl	1fc0 <bt_hci_cmd_send_sync>
	if (err) {
    21de:	4604      	mov	r4, r0
    21e0:	2800      	cmp	r0, #0
    21e2:	f040 8114 	bne.w	240e <hci_init+0x2aa>
	read_local_ver_complete(rsp);
    21e6:	9804      	ldr	r0, [sp, #16]
    21e8:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    21ea:	785a      	ldrb	r2, [r3, #1]
    21ec:	73aa      	strb	r2, [r5, #14]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    21ee:	78d9      	ldrb	r1, [r3, #3]
    21f0:	789a      	ldrb	r2, [r3, #2]
    21f2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    21f6:	822a      	strh	r2, [r5, #16]
	bt_dev.lmp_version = rp->lmp_version;
    21f8:	791a      	ldrb	r2, [r3, #4]
    21fa:	73ea      	strb	r2, [r5, #15]
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    21fc:	7a19      	ldrb	r1, [r3, #8]
    21fe:	79da      	ldrb	r2, [r3, #7]
    2200:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    2204:	826a      	strh	r2, [r5, #18]
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    2206:	795a      	ldrb	r2, [r3, #5]
    2208:	799b      	ldrb	r3, [r3, #6]
    220a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    220e:	82ab      	strh	r3, [r5, #20]
	net_buf_unref(rsp);
    2210:	f007 fc40 	bl	9a94 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    2214:	4621      	mov	r1, r4
    2216:	aa04      	add	r2, sp, #16
    2218:	f241 0009 	movw	r0, #4105	; 0x1009
    221c:	f7ff fed0 	bl	1fc0 <bt_hci_cmd_send_sync>
	if (err) {
    2220:	4604      	mov	r4, r0
    2222:	2800      	cmp	r0, #0
    2224:	f040 80f3 	bne.w	240e <hci_init+0x2aa>
	bt_addr_copy(&bt_dev.id_addr.a, &rp->bdaddr);
    2228:	9b04      	ldr	r3, [sp, #16]
    222a:	6899      	ldr	r1, [r3, #8]
    222c:	2206      	movs	r2, #6
    222e:	3101      	adds	r1, #1
    2230:	1c68      	adds	r0, r5, #1
    2232:	f7fe f9e1 	bl	5f8 <memcpy>
	net_buf_unref(rsp);
    2236:	9804      	ldr	r0, [sp, #16]
	bt_dev.id_addr.type = BT_ADDR_LE_PUBLIC;
    2238:	702c      	strb	r4, [r5, #0]
	net_buf_unref(rsp);
    223a:	f007 fc2b 	bl	9a94 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    223e:	4621      	mov	r1, r4
    2240:	aa04      	add	r2, sp, #16
    2242:	f241 0002 	movw	r0, #4098	; 0x1002
    2246:	f7ff febb 	bl	1fc0 <bt_hci_cmd_send_sync>
	if (err) {
    224a:	4604      	mov	r4, r0
    224c:	2800      	cmp	r0, #0
    224e:	f040 80de 	bne.w	240e <hci_init+0x2aa>
	memcpy(bt_dev.supported_commands, rp->commands,
    2252:	9b04      	ldr	r3, [sp, #16]
    2254:	6899      	ldr	r1, [r3, #8]
    2256:	2240      	movs	r2, #64	; 0x40
    2258:	3101      	adds	r1, #1
    225a:	f105 001e 	add.w	r0, r5, #30
    225e:	f7fe f9cb 	bl	5f8 <memcpy>
	net_buf_unref(rsp);
    2262:	9804      	ldr	r0, [sp, #16]
    2264:	f007 fc16 	bl	9a94 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    2268:	7eab      	ldrb	r3, [r5, #26]
    226a:	0658      	lsls	r0, r3, #25
    226c:	f140 813f 	bpl.w	24ee <hci_init+0x38a>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    2270:	4621      	mov	r1, r4
    2272:	aa04      	add	r2, sp, #16
    2274:	f242 0003 	movw	r0, #8195	; 0x2003
    2278:	f7ff fea2 	bl	1fc0 <bt_hci_cmd_send_sync>
	if (err) {
    227c:	4604      	mov	r4, r0
    227e:	2800      	cmp	r0, #0
    2280:	f040 80c5 	bne.w	240e <hci_init+0x2aa>
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    2284:	9b04      	ldr	r3, [sp, #16]
    2286:	6899      	ldr	r1, [r3, #8]
    2288:	2208      	movs	r2, #8
    228a:	3101      	adds	r1, #1
    228c:	f105 0078 	add.w	r0, r5, #120	; 0x78
    2290:	f7fe f9b2 	bl	5f8 <memcpy>
	net_buf_unref(rsp);
    2294:	9804      	ldr	r0, [sp, #16]
    2296:	f007 fbfd 	bl	9a94 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    229a:	7eab      	ldrb	r3, [r5, #26]
    229c:	0699      	lsls	r1, r3, #26
    229e:	f140 809b 	bpl.w	23d8 <hci_init+0x274>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    22a2:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
    22a6:	071a      	lsls	r2, r3, #28
    22a8:	f100 80b4 	bmi.w	2414 <hci_init+0x2b0>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    22ac:	2108      	movs	r1, #8
    22ae:	f242 0001 	movw	r0, #8193	; 0x2001
    22b2:	f7ff fe55 	bl	1f60 <bt_hci_cmd_create>
	if (!buf) {
    22b6:	4604      	mov	r4, r0
    22b8:	2800      	cmp	r0, #0
    22ba:	f000 8094 	beq.w	23e6 <hci_init+0x282>
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    22be:	2108      	movs	r1, #8
    22c0:	4408      	add	r0, r1
    22c2:	f007 fc19 	bl	9af8 <net_buf_simple_add>
	if ((bt_dev.supported_commands[34] & 0x02) &&
    22c6:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    22ca:	f003 0306 	and.w	r3, r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    22ce:	2b06      	cmp	r3, #6
    22d0:	bf14      	ite	ne
    22d2:	2302      	movne	r3, #2
    22d4:	f44f 73c1 	moveq.w	r3, #386	; 0x182
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    22d8:	2200      	movs	r2, #0
    22da:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    22dc:	0a1b      	lsrs	r3, r3, #8
    22de:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
    22e0:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    22e2:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    22e4:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    22e6:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    22e8:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    22ea:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    22ec:	4621      	mov	r1, r4
    22ee:	f242 0001 	movw	r0, #8193	; 0x2001
    22f2:	f7ff fe65 	bl	1fc0 <bt_hci_cmd_send_sync>
	if (err) {
		return err;
	}

	err = le_init();
	if (err) {
    22f6:	4604      	mov	r4, r0
    22f8:	2800      	cmp	r0, #0
    22fa:	f040 8088 	bne.w	240e <hci_init+0x2aa>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    22fe:	2108      	movs	r1, #8
    2300:	f640 4001 	movw	r0, #3073	; 0xc01
    2304:	f7ff fe2c 	bl	1f60 <bt_hci_cmd_create>
	if (!buf) {
    2308:	4606      	mov	r6, r0
    230a:	2800      	cmp	r0, #0
    230c:	d06b      	beq.n	23e6 <hci_init+0x282>
	ev = net_buf_add(buf, sizeof(*ev));
    230e:	2108      	movs	r1, #8
    2310:	4408      	add	r0, r1
    2312:	f007 fbf1 	bl	9af8 <net_buf_simple_add>
    2316:	2380      	movs	r3, #128	; 0x80
    2318:	7043      	strb	r3, [r0, #1]
    231a:	2702      	movs	r7, #2
    231c:	2320      	movs	r3, #32
	dst[0] = val;
    231e:	7004      	strb	r4, [r0, #0]
    2320:	7084      	strb	r4, [r0, #2]
    2322:	7104      	strb	r4, [r0, #4]
	dst[1] = val >> 8;
    2324:	7144      	strb	r4, [r0, #5]
	dst[0] = val;
    2326:	7184      	strb	r4, [r0, #6]
	dst[1] = val >> 8;
    2328:	70c7      	strb	r7, [r0, #3]
    232a:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    232c:	4622      	mov	r2, r4
    232e:	4631      	mov	r1, r6
    2330:	f640 4001 	movw	r0, #3073	; 0xc01
    2334:	f7ff fe44 	bl	1fc0 <bt_hci_cmd_send_sync>
		BT_ERR("Non-BR/EDR controller detected");
		return -EIO;
	}

	err = set_event_mask();
	if (err) {
    2338:	4604      	mov	r4, r0
    233a:	2800      	cmp	r0, #0
    233c:	d167      	bne.n	240e <hci_init+0x2aa>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    233e:	4601      	mov	r1, r0
    2340:	aa04      	add	r2, sp, #16
    2342:	f64f 4001 	movw	r0, #64513	; 0xfc01
    2346:	f7ff fe3b 	bl	1fc0 <bt_hci_cmd_send_sync>
	if (err) {
    234a:	bb20      	cbnz	r0, 2396 <hci_init+0x232>
	net_buf_unref(rsp);
    234c:	9804      	ldr	r0, [sp, #16]
    234e:	f007 fba1 	bl	9a94 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    2352:	aa04      	add	r2, sp, #16
    2354:	4621      	mov	r1, r4
    2356:	f64f 4002 	movw	r0, #64514	; 0xfc02
    235a:	f7ff fe31 	bl	1fc0 <bt_hci_cmd_send_sync>
	if (err) {
    235e:	b9d0      	cbnz	r0, 2396 <hci_init+0x232>
	rp.cmds = (void *)rsp->data;
    2360:	9b04      	ldr	r3, [sp, #16]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    2362:	4842      	ldr	r0, [pc, #264]	; (246c <hci_init+0x308>)
    2364:	6899      	ldr	r1, [r3, #8]
    2366:	463a      	mov	r2, r7
    2368:	3101      	adds	r1, #1
    236a:	f7fe f945 	bl	5f8 <memcpy>
	net_buf_unref(rsp);
    236e:	9804      	ldr	r0, [sp, #16]
    2370:	f007 fb90 	bl	9a94 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    2374:	aa04      	add	r2, sp, #16
    2376:	4621      	mov	r1, r4
    2378:	f64f 4003 	movw	r0, #64515	; 0xfc03
    237c:	f7ff fe20 	bl	1fc0 <bt_hci_cmd_send_sync>
	if (err) {
    2380:	b948      	cbnz	r0, 2396 <hci_init+0x232>
	rp.feat = (void *)rsp->data;
    2382:	9b04      	ldr	r3, [sp, #16]
	memcpy(bt_dev.vs_features, rp.feat->features, BT_DEV_VS_FEAT_MAX);
    2384:	483a      	ldr	r0, [pc, #232]	; (2470 <hci_init+0x30c>)
    2386:	6899      	ldr	r1, [r3, #8]
    2388:	2201      	movs	r2, #1
    238a:	4411      	add	r1, r2
    238c:	f7fe f934 	bl	5f8 <memcpy>
	net_buf_unref(rsp);
    2390:	9804      	ldr	r0, [sp, #16]
    2392:	f007 fb7f 	bl	9a94 <net_buf_unref>

#if defined(CONFIG_BT_HCI_VS_EXT)
	hci_vs_init();
#endif

	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    2396:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    2398:	2207      	movs	r2, #7
    239a:	a902      	add	r1, sp, #8
    239c:	4832      	ldr	r0, [pc, #200]	; (2468 <hci_init+0x304>)
    239e:	9302      	str	r3, [sp, #8]
    23a0:	f8cd 300b 	str.w	r3, [sp, #11]
    23a4:	f7fe f913 	bl	5ce <memcmp>
    23a8:	2800      	cmp	r0, #0
    23aa:	d148      	bne.n	243e <hci_init+0x2da>
	if (bt_storage) {
    23ac:	4e31      	ldr	r6, [pc, #196]	; (2474 <hci_init+0x310>)
    23ae:	6833      	ldr	r3, [r6, #0]
    23b0:	2b00      	cmp	r3, #0
    23b2:	d163      	bne.n	247c <hci_init+0x318>
	if (bt_dev.vs_commands[1] & BIT(0)) {
    23b4:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
    23b8:	07db      	lsls	r3, r3, #31
    23ba:	d47a      	bmi.n	24b2 <hci_init+0x34e>
	err = bt_addr_le_create_static(&bt_dev.id_addr);
    23bc:	482a      	ldr	r0, [pc, #168]	; (2468 <hci_init+0x304>)
    23be:	f7ff fec2 	bl	2146 <bt_addr_le_create_static>
	if (err) {
    23c2:	4604      	mov	r4, r0
    23c4:	bb18      	cbnz	r0, 240e <hci_init+0x2aa>
	if (bt_storage) {
    23c6:	6833      	ldr	r3, [r6, #0]
    23c8:	2b00      	cmp	r3, #0
    23ca:	d05f      	beq.n	248c <hci_init+0x328>
		ret = bt_storage->write(NULL, BT_STORAGE_ID_ADDR,
    23cc:	685e      	ldr	r6, [r3, #4]
    23ce:	4a26      	ldr	r2, [pc, #152]	; (2468 <hci_init+0x304>)
    23d0:	2307      	movs	r3, #7
    23d2:	4601      	mov	r1, r0
    23d4:	47b0      	blx	r6
    23d6:	e059      	b.n	248c <hci_init+0x328>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    23d8:	2102      	movs	r1, #2
    23da:	f640 406d 	movw	r0, #3181	; 0xc6d
    23de:	f7ff fdbf 	bl	1f60 <bt_hci_cmd_create>
		if (!buf) {
    23e2:	4606      	mov	r6, r0
    23e4:	b910      	cbnz	r0, 23ec <hci_init+0x288>
		return -ENOBUFS;
    23e6:	f06f 0436 	mvn.w	r4, #54	; 0x36
    23ea:	e010      	b.n	240e <hci_init+0x2aa>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
    23ec:	2102      	movs	r1, #2
    23ee:	3008      	adds	r0, #8
    23f0:	f007 fb82 	bl	9af8 <net_buf_simple_add>
		cp_le->le = 0x01;
    23f4:	2301      	movs	r3, #1
		cp_le->simul = 0x00;
    23f6:	7044      	strb	r4, [r0, #1]
		cp_le->le = 0x01;
    23f8:	7003      	strb	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    23fa:	4622      	mov	r2, r4
    23fc:	4631      	mov	r1, r6
    23fe:	f640 406d 	movw	r0, #3181	; 0xc6d
    2402:	f7ff fddd 	bl	1fc0 <bt_hci_cmd_send_sync>
		if (err) {
    2406:	4604      	mov	r4, r0
    2408:	2800      	cmp	r0, #0
    240a:	f43f af4a 	beq.w	22a2 <hci_init+0x13e>
	}

	show_dev_info();

	return 0;
}
    240e:	4620      	mov	r0, r4
    2410:	b007      	add	sp, #28
    2412:	bdf0      	pop	{r4, r5, r6, r7, pc}
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    2414:	aa04      	add	r2, sp, #16
    2416:	2100      	movs	r1, #0
    2418:	f242 001c 	movw	r0, #8220	; 0x201c
    241c:	f7ff fdd0 	bl	1fc0 <bt_hci_cmd_send_sync>
		if (err) {
    2420:	4604      	mov	r4, r0
    2422:	2800      	cmp	r0, #0
    2424:	d1f3      	bne.n	240e <hci_init+0x2aa>
		le_read_supp_states_complete(rsp);
    2426:	9804      	ldr	r0, [sp, #16]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    2428:	6883      	ldr	r3, [r0, #8]
    242a:	f853 2f01 	ldr.w	r2, [r3, #1]!
    242e:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    2430:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    2434:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
		net_buf_unref(rsp);
    2438:	f007 fb2c 	bl	9a94 <net_buf_unref>
    243c:	e736      	b.n	22ac <hci_init+0x148>
	    !bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_NONE)) {
    243e:	4b0e      	ldr	r3, [pc, #56]	; (2478 <hci_init+0x314>)
    2440:	6818      	ldr	r0, [r3, #0]
    2442:	889a      	ldrh	r2, [r3, #4]
    2444:	9004      	str	r0, [sp, #16]
    2446:	799b      	ldrb	r3, [r3, #6]
    2448:	f8ad 2014 	strh.w	r2, [sp, #20]
    244c:	a904      	add	r1, sp, #16
    244e:	2207      	movs	r2, #7
    2450:	4805      	ldr	r0, [pc, #20]	; (2468 <hci_init+0x304>)
    2452:	f88d 3016 	strb.w	r3, [sp, #22]
    2456:	f7fe f8ba 	bl	5ce <memcmp>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    245a:	2800      	cmp	r0, #0
    245c:	d0a6      	beq.n	23ac <hci_init+0x248>
    245e:	e7d6      	b.n	240e <hci_init+0x2aa>
    2460:	200000d4 	.word	0x200000d4
    2464:	200037a0 	.word	0x200037a0
    2468:	20003730 	.word	0x20003730
    246c:	2000378f 	.word	0x2000378f
    2470:	2000378e 	.word	0x2000378e
    2474:	20001914 	.word	0x20001914
    2478:	0000ae92 	.word	0x0000ae92
		ret = bt_storage->read(NULL, BT_STORAGE_ID_ADDR,
    247c:	2100      	movs	r1, #0
    247e:	681c      	ldr	r4, [r3, #0]
    2480:	4a1c      	ldr	r2, [pc, #112]	; (24f4 <hci_init+0x390>)
    2482:	2307      	movs	r3, #7
    2484:	4608      	mov	r0, r1
    2486:	47a0      	blx	r4
		if (ret == sizeof(bt_dev.id_addr)) {
    2488:	2807      	cmp	r0, #7
    248a:	d193      	bne.n	23b4 <hci_init+0x250>
	if (bt_dev.id_addr.type != BT_ADDR_LE_RANDOM ||
    248c:	782b      	ldrb	r3, [r5, #0]
    248e:	2b01      	cmp	r3, #1
    2490:	d12a      	bne.n	24e8 <hci_init+0x384>
    2492:	79ab      	ldrb	r3, [r5, #6]
    2494:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    2498:	2bc0      	cmp	r3, #192	; 0xc0
    249a:	d125      	bne.n	24e8 <hci_init+0x384>
	err = set_random_address(&bt_dev.id_addr.a);
    249c:	4816      	ldr	r0, [pc, #88]	; (24f8 <hci_init+0x394>)
    249e:	f7ff fdcd 	bl	203c <set_random_address>
	if (err) {
    24a2:	4604      	mov	r4, r0
    24a4:	2800      	cmp	r0, #0
    24a6:	d1b2      	bne.n	240e <hci_init+0x2aa>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    24a8:	2104      	movs	r1, #4
    24aa:	4814      	ldr	r0, [pc, #80]	; (24fc <hci_init+0x398>)
    24ac:	f7ff fcfc 	bl	1ea8 <atomic_or>
    24b0:	e7ad      	b.n	240e <hci_init+0x2aa>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS,
    24b2:	aa01      	add	r2, sp, #4
    24b4:	2100      	movs	r1, #0
    24b6:	f64f 4009 	movw	r0, #64521	; 0xfc09
    24ba:	f7ff fd81 	bl	1fc0 <bt_hci_cmd_send_sync>
		if (err) {
    24be:	2800      	cmp	r0, #0
    24c0:	f47f af7c 	bne.w	23bc <hci_init+0x258>
		rp = (void *)rsp->data;
    24c4:	9801      	ldr	r0, [sp, #4]
    24c6:	6881      	ldr	r1, [r0, #8]
		if (rp->num_addrs) {
    24c8:	784b      	ldrb	r3, [r1, #1]
    24ca:	b153      	cbz	r3, 24e2 <hci_init+0x37e>
			bt_dev.id_addr.type = BT_ADDR_LE_RANDOM;
    24cc:	2301      	movs	r3, #1
	memcpy(dst, src, sizeof(*dst));
    24ce:	2206      	movs	r2, #6
    24d0:	3102      	adds	r1, #2
    24d2:	4809      	ldr	r0, [pc, #36]	; (24f8 <hci_init+0x394>)
    24d4:	702b      	strb	r3, [r5, #0]
    24d6:	f7fe f88f 	bl	5f8 <memcpy>
			net_buf_unref(rsp);
    24da:	9801      	ldr	r0, [sp, #4]
    24dc:	f007 fada 	bl	9a94 <net_buf_unref>
    24e0:	e7d4      	b.n	248c <hci_init+0x328>
		net_buf_unref(rsp);
    24e2:	f007 fad7 	bl	9a94 <net_buf_unref>
    24e6:	e769      	b.n	23bc <hci_init+0x258>
		return -EINVAL;
    24e8:	f06f 0415 	mvn.w	r4, #21
    24ec:	e78f      	b.n	240e <hci_init+0x2aa>
		return -ENODEV;
    24ee:	f06f 0412 	mvn.w	r4, #18
    24f2:	e78c      	b.n	240e <hci_init+0x2aa>
    24f4:	20003730 	.word	0x20003730
    24f8:	20003731 	.word	0x20003731
    24fc:	200037a0 	.word	0x200037a0

00002500 <init_work>:

	return 0;
}

static void init_work(struct k_work *work)
{
    2500:	b510      	push	{r4, lr}
	err = hci_init();
    2502:	f7ff fe2f 	bl	2164 <hci_init>
	if (err) {
    2506:	4604      	mov	r4, r0
    2508:	b930      	cbnz	r0, 2518 <init_work+0x18>
    250a:	2102      	movs	r1, #2
    250c:	4806      	ldr	r0, [pc, #24]	; (2528 <init_work+0x28>)
    250e:	f7ff fccb 	bl	1ea8 <atomic_or>
	bt_le_scan_update(false);
    2512:	4620      	mov	r0, r4
    2514:	f7ff fe06 	bl	2124 <bt_le_scan_update>
	int err;

	err = bt_init();
	if (ready_cb) {
    2518:	4b04      	ldr	r3, [pc, #16]	; (252c <init_work+0x2c>)
    251a:	681b      	ldr	r3, [r3, #0]
    251c:	b11b      	cbz	r3, 2526 <init_work+0x26>
		ready_cb(err);
    251e:	4620      	mov	r0, r4
	}
}
    2520:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    2524:	4718      	bx	r3
    2526:	bd10      	pop	{r4, pc}
    2528:	200037a0 	.word	0x200037a0
    252c:	200000d0 	.word	0x200000d0

00002530 <bt_send>:
	return bt_dev.drv->send(buf);
    2530:	4b02      	ldr	r3, [pc, #8]	; (253c <bt_send+0xc>)
    2532:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    2536:	68db      	ldr	r3, [r3, #12]
    2538:	4718      	bx	r3
    253a:	bf00      	nop
    253c:	20003730 	.word	0x20003730

00002540 <bt_hci_cmd_send>:
{
    2540:	b538      	push	{r3, r4, r5, lr}
    2542:	4605      	mov	r5, r0
	if (!buf) {
    2544:	460c      	mov	r4, r1
    2546:	b919      	cbnz	r1, 2550 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    2548:	f7ff fd0a 	bl	1f60 <bt_hci_cmd_create>
		if (!buf) {
    254c:	4604      	mov	r4, r0
    254e:	b198      	cbz	r0, 2578 <bt_hci_cmd_send+0x38>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    2550:	f640 4335 	movw	r3, #3125	; 0xc35
    2554:	429d      	cmp	r5, r3
    2556:	d109      	bne.n	256c <bt_hci_cmd_send+0x2c>
		err = bt_send(buf);
    2558:	4620      	mov	r0, r4
    255a:	f7ff ffe9 	bl	2530 <bt_send>
		if (err) {
    255e:	4605      	mov	r5, r0
    2560:	b110      	cbz	r0, 2568 <bt_hci_cmd_send+0x28>
			net_buf_unref(buf);
    2562:	4620      	mov	r0, r4
    2564:	f007 fa96 	bl	9a94 <net_buf_unref>
}
    2568:	4628      	mov	r0, r5
    256a:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    256c:	4621      	mov	r1, r4
    256e:	4804      	ldr	r0, [pc, #16]	; (2580 <bt_hci_cmd_send+0x40>)
    2570:	f007 fa83 	bl	9a7a <net_buf_put>
	return 0;
    2574:	2500      	movs	r5, #0
    2576:	e7f7      	b.n	2568 <bt_hci_cmd_send+0x28>
			return -ENOBUFS;
    2578:	f06f 0536 	mvn.w	r5, #54	; 0x36
    257c:	e7f4      	b.n	2568 <bt_hci_cmd_send+0x28>
    257e:	bf00      	nop
    2580:	200037e4 	.word	0x200037e4

00002584 <hci_tx_thread>:
{
    2584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    2588:	4c26      	ldr	r4, [pc, #152]	; (2624 <hci_tx_thread+0xa0>)
		events[0].state = K_POLL_STATE_NOT_READY;
    258a:	4e27      	ldr	r6, [pc, #156]	; (2628 <hci_tx_thread+0xa4>)
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    258c:	f104 08b4 	add.w	r8, r4, #180	; 0xb4
		events[0].state = K_POLL_STATE_NOT_READY;
    2590:	7b73      	ldrb	r3, [r6, #13]
		err = k_poll(events, ev_count, K_FOREVER);
    2592:	4825      	ldr	r0, [pc, #148]	; (2628 <hci_tx_thread+0xa4>)
		events[0].state = K_POLL_STATE_NOT_READY;
    2594:	f36f 1307 	bfc	r3, #4, #4
		err = k_poll(events, ev_count, K_FOREVER);
    2598:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    259c:	2101      	movs	r1, #1
		events[0].state = K_POLL_STATE_NOT_READY;
    259e:	7373      	strb	r3, [r6, #13]
		err = k_poll(events, ev_count, K_FOREVER);
    25a0:	f008 fb70 	bl	ac84 <k_poll>
		BT_ASSERT(err == 0);
    25a4:	bbc0      	cbnz	r0, 2618 <hci_tx_thread+0x94>
		switch (ev->state) {
    25a6:	7b73      	ldrb	r3, [r6, #13]
    25a8:	091b      	lsrs	r3, r3, #4
    25aa:	2b04      	cmp	r3, #4
    25ac:	d12c      	bne.n	2608 <hci_tx_thread+0x84>
			if (ev->tag == BT_EVENT_CMD_TX) {
    25ae:	7b37      	ldrb	r7, [r6, #12]
    25b0:	bb57      	cbnz	r7, 2608 <hci_tx_thread+0x84>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    25b2:	4639      	mov	r1, r7
    25b4:	4640      	mov	r0, r8
    25b6:	f007 fa43 	bl	9a40 <net_buf_get>
	BT_ASSERT(buf);
    25ba:	4605      	mov	r5, r0
    25bc:	b360      	cbz	r0, 2618 <hci_tx_thread+0x94>
    25be:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    25c2:	481a      	ldr	r0, [pc, #104]	; (262c <hci_tx_thread+0xa8>)
    25c4:	f007 ff3e 	bl	a444 <_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    25c8:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    25cc:	b9f8      	cbnz	r0, 260e <hci_tx_thread+0x8a>
	bt_dev.sent_cmd = net_buf_ref(buf);
    25ce:	4628      	mov	r0, r5
    25d0:	f007 fa8e 	bl	9af0 <net_buf_ref>
    25d4:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
	err = bt_send(buf);
    25d8:	4628      	mov	r0, r5
    25da:	f7ff ffa9 	bl	2530 <bt_send>
	if (err) {
    25de:	b198      	cbz	r0, 2608 <hci_tx_thread+0x84>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    25e0:	4812      	ldr	r0, [pc, #72]	; (262c <hci_tx_thread+0xa8>)
    25e2:	f007 fecf 	bl	a384 <_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED,
    25e6:	4628      	mov	r0, r5
    25e8:	f007 f996 	bl	9918 <net_buf_id>
    25ec:	2100      	movs	r1, #0
    25ee:	201f      	movs	r0, #31
    25f0:	f7ff fc7c 	bl	1eec <hci_cmd_done.isra.9>
		net_buf_unref(bt_dev.sent_cmd);
    25f4:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    25f8:	f007 fa4c 	bl	9a94 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    25fc:	2300      	movs	r3, #0
		net_buf_unref(buf);
    25fe:	4628      	mov	r0, r5
		bt_dev.sent_cmd = NULL;
    2600:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		net_buf_unref(buf);
    2604:	f007 fa46 	bl	9a94 <net_buf_unref>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    2608:	f007 fe40 	bl	a28c <_impl_k_yield>
    260c:	e7c0      	b.n	2590 <hci_tx_thread+0xc>
		net_buf_unref(bt_dev.sent_cmd);
    260e:	f007 fa41 	bl	9a94 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    2612:	f8c4 70a0 	str.w	r7, [r4, #160]	; 0xa0
    2616:	e7da      	b.n	25ce <hci_tx_thread+0x4a>
	BT_ASSERT(buf);
    2618:	4040      	eors	r0, r0
    261a:	f380 8811 	msr	BASEPRI, r0
    261e:	f04f 0004 	mov.w	r0, #4
    2622:	df02      	svc	2
    2624:	20003730 	.word	0x20003730
    2628:	200037f8 	.word	0x200037f8
    262c:	200037b8 	.word	0x200037b8

00002630 <bt_recv>:
{
    2630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (bt_buf_get_type(buf)) {
    2634:	7d06      	ldrb	r6, [r0, #20]
    2636:	2e01      	cmp	r6, #1
{
    2638:	b085      	sub	sp, #20
    263a:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    263c:	f040 80d1 	bne.w	27e2 <bt_recv+0x1b2>
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    2640:	6887      	ldr	r7, [r0, #8]
 * @return true if the event can be processed in the RX thread, false
 *         if it cannot.
 */
static inline bool bt_hci_evt_is_prio(u8_t evt)
{
	switch (evt) {
    2642:	783b      	ldrb	r3, [r7, #0]
    2644:	3b0e      	subs	r3, #14
    2646:	2b01      	cmp	r3, #1
    2648:	f200 80d0 	bhi.w	27ec <bt_recv+0x1bc>
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    264c:	4040      	eors	r0, r0
    264e:	f380 8811 	msr	BASEPRI, r0
    2652:	f04f 0004 	mov.w	r0, #4
    2656:	df02      	svc	2
    2658:	68a6      	ldr	r6, [r4, #8]
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    265a:	487c      	ldr	r0, [pc, #496]	; (284c <bt_recv+0x21c>)
    265c:	f06f 0110 	mvn.w	r1, #16
    2660:	f7ff fc33 	bl	1eca <atomic_and>
	if (!evt->status) {
    2664:	7833      	ldrb	r3, [r6, #0]
    2666:	b943      	cbnz	r3, 267a <bt_recv+0x4a>
		memcpy(pub_key, evt->key, 64);
    2668:	1c71      	adds	r1, r6, #1
    266a:	2240      	movs	r2, #64	; 0x40
    266c:	4878      	ldr	r0, [pc, #480]	; (2850 <bt_recv+0x220>)
    266e:	f7fd ffc3 	bl	5f8 <memcpy>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2672:	2108      	movs	r1, #8
    2674:	4875      	ldr	r0, [pc, #468]	; (284c <bt_recv+0x21c>)
    2676:	f7ff fc17 	bl	1ea8 <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    267a:	4b76      	ldr	r3, [pc, #472]	; (2854 <bt_recv+0x224>)
    267c:	681d      	ldr	r5, [r3, #0]
		cb->func(evt->status ? NULL : evt->key);
    267e:	1c77      	adds	r7, r6, #1
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    2680:	b935      	cbnz	r5, 2690 <bt_recv+0x60>
	net_buf_unref(buf);
    2682:	4620      	mov	r0, r4
    2684:	f007 fa06 	bl	9a94 <net_buf_unref>
		return 0;
    2688:	2000      	movs	r0, #0
}
    268a:	b005      	add	sp, #20
    268c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		cb->func(evt->status ? NULL : evt->key);
    2690:	7832      	ldrb	r2, [r6, #0]
    2692:	682b      	ldr	r3, [r5, #0]
    2694:	2a00      	cmp	r2, #0
    2696:	bf0c      	ite	eq
    2698:	4638      	moveq	r0, r7
    269a:	2000      	movne	r0, #0
    269c:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    269e:	686d      	ldr	r5, [r5, #4]
    26a0:	e7ee      	b.n	2680 <bt_recv+0x50>
	if (dh_key_cb) {
    26a2:	4d6d      	ldr	r5, [pc, #436]	; (2858 <bt_recv+0x228>)
    26a4:	68a0      	ldr	r0, [r4, #8]
    26a6:	682a      	ldr	r2, [r5, #0]
    26a8:	2a00      	cmp	r2, #0
    26aa:	d0ea      	beq.n	2682 <bt_recv+0x52>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    26ac:	7803      	ldrb	r3, [r0, #0]
    26ae:	b923      	cbnz	r3, 26ba <bt_recv+0x8a>
    26b0:	3001      	adds	r0, #1
    26b2:	4790      	blx	r2
		dh_key_cb = NULL;
    26b4:	2300      	movs	r3, #0
    26b6:	602b      	str	r3, [r5, #0]
    26b8:	e7e3      	b.n	2682 <bt_recv+0x52>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    26ba:	2000      	movs	r0, #0
    26bc:	e7f9      	b.n	26b2 <bt_recv+0x82>
	u8_t num_reports = net_buf_pull_u8(buf);
    26be:	4628      	mov	r0, r5
    26c0:	f007 fa31 	bl	9b26 <net_buf_simple_pull_u8>
		if (scan_dev_found_cb) {
    26c4:	f8df a194 	ldr.w	sl, [pc, #404]	; 285c <bt_recv+0x22c>
	u8_t num_reports = net_buf_pull_u8(buf);
    26c8:	9001      	str	r0, [sp, #4]
	while (num_reports--) {
    26ca:	9b01      	ldr	r3, [sp, #4]
    26cc:	2b00      	cmp	r3, #0
    26ce:	d0d8      	beq.n	2682 <bt_recv+0x52>
		info = (void *)buf->data;
    26d0:	68a6      	ldr	r6, [r4, #8]
		net_buf_pull(buf, sizeof(*info));
    26d2:	2109      	movs	r1, #9
    26d4:	4628      	mov	r0, r5
    26d6:	f007 fa1e 	bl	9b16 <net_buf_simple_pull>
		rssi = info->data[info->length];
    26da:	7a33      	ldrb	r3, [r6, #8]
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    26dc:	4631      	mov	r1, r6
		rssi = info->data[info->length];
    26de:	4433      	add	r3, r6
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    26e0:	2207      	movs	r2, #7
    26e2:	f893 b009 	ldrb.w	fp, [r3, #9]
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    26e6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    26ea:	3b02      	subs	r3, #2
    26ec:	2b01      	cmp	r3, #1
    26ee:	a802      	add	r0, sp, #8
    26f0:	d82b      	bhi.n	274a <bt_recv+0x11a>
    26f2:	f7fd ff81 	bl	5f8 <memcpy>
			id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    26f6:	f89d 3008 	ldrb.w	r3, [sp, #8]
    26fa:	3b02      	subs	r3, #2
    26fc:	f88d 3008 	strb.w	r3, [sp, #8]
		if (scan_dev_found_cb) {
    2700:	f8da 3000 	ldr.w	r3, [sl]
    2704:	b1ab      	cbz	r3, 2732 <bt_recv+0x102>
 *  @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    2706:	4628      	mov	r0, r5
    2708:	f007 fa15 	bl	9b36 <net_buf_simple_headroom>
			buf->len = info->length;
    270c:	7a33      	ldrb	r3, [r6, #8]
	state->len = buf->len;
    270e:	f8b4 800c 	ldrh.w	r8, [r4, #12]
    2712:	81a3      	strh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    2714:	4681      	mov	r9, r0
			scan_dev_found_cb(&id_addr, rssi, info->evt_type,
    2716:	462b      	mov	r3, r5
    2718:	7832      	ldrb	r2, [r6, #0]
    271a:	f8da 7000 	ldr.w	r7, [sl]
    271e:	fa4f f18b 	sxtb.w	r1, fp
    2722:	a802      	add	r0, sp, #8
    2724:	47b8      	blx	r7
 *  @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
    2726:	6923      	ldr	r3, [r4, #16]
	buf->len = state->len;
    2728:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    272c:	fa13 f389 	uxtah	r3, r3, r9
    2730:	60a3      	str	r3, [r4, #8]
		net_buf_pull(buf, info->length + sizeof(rssi));
    2732:	7a31      	ldrb	r1, [r6, #8]
    2734:	4628      	mov	r0, r5
    2736:	3101      	adds	r1, #1
    2738:	f007 f9ed 	bl	9b16 <net_buf_simple_pull>
    273c:	9b01      	ldr	r3, [sp, #4]
    273e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    2742:	fa5f f388 	uxtb.w	r3, r8
    2746:	9301      	str	r3, [sp, #4]
    2748:	e7bf      	b.n	26ca <bt_recv+0x9a>
    274a:	f7fd ff55 	bl	5f8 <memcpy>
    274e:	e7d7      	b.n	2700 <bt_recv+0xd0>
	u8_t num_reports = net_buf_pull_u8(buf);
    2750:	4628      	mov	r0, r5
    2752:	f007 f9e8 	bl	9b26 <net_buf_simple_pull_u8>
		if (scan_dev_found_cb) {
    2756:	f8df a104 	ldr.w	sl, [pc, #260]	; 285c <bt_recv+0x22c>
	u8_t num_reports = net_buf_pull_u8(buf);
    275a:	9001      	str	r0, [sp, #4]
	while (num_reports--) {
    275c:	9b01      	ldr	r3, [sp, #4]
    275e:	2b00      	cmp	r3, #0
    2760:	d08f      	beq.n	2682 <bt_recv+0x52>
		info = (void *)buf->data;
    2762:	68a6      	ldr	r6, [r4, #8]
		net_buf_pull(buf, sizeof(*info));
    2764:	2117      	movs	r1, #23
    2766:	4628      	mov	r0, r5
    2768:	f007 f9d5 	bl	9b16 <net_buf_simple_pull>
		rssi = info->data[info->length];
    276c:	7db3      	ldrb	r3, [r6, #22]
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    276e:	4631      	mov	r1, r6
		rssi = info->data[info->length];
    2770:	4433      	add	r3, r6
    2772:	2207      	movs	r2, #7
    2774:	f893 b017 	ldrb.w	fp, [r3, #23]
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    2778:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    277c:	3b02      	subs	r3, #2
    277e:	2b01      	cmp	r3, #1
    2780:	a802      	add	r0, sp, #8
    2782:	d82b      	bhi.n	27dc <bt_recv+0x1ac>
    2784:	f7fd ff38 	bl	5f8 <memcpy>
			id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    2788:	f89d 3008 	ldrb.w	r3, [sp, #8]
    278c:	3b02      	subs	r3, #2
    278e:	f88d 3008 	strb.w	r3, [sp, #8]
		if (scan_dev_found_cb) {
    2792:	f8da 3000 	ldr.w	r3, [sl]
    2796:	b1ab      	cbz	r3, 27c4 <bt_recv+0x194>
	state->offset = net_buf_simple_headroom(buf);
    2798:	4628      	mov	r0, r5
    279a:	f007 f9cc 	bl	9b36 <net_buf_simple_headroom>
			buf->len = info->length;
    279e:	7db3      	ldrb	r3, [r6, #22]
	state->len = buf->len;
    27a0:	f8b4 800c 	ldrh.w	r8, [r4, #12]
    27a4:	81a3      	strh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    27a6:	4681      	mov	r9, r0
			scan_dev_found_cb(&id_addr, rssi, info->evt_type,
    27a8:	462b      	mov	r3, r5
    27aa:	7832      	ldrb	r2, [r6, #0]
    27ac:	f8da 7000 	ldr.w	r7, [sl]
    27b0:	fa4f f18b 	sxtb.w	r1, fp
    27b4:	a802      	add	r0, sp, #8
    27b6:	47b8      	blx	r7
	buf->data = buf->__buf + state->offset;
    27b8:	6923      	ldr	r3, [r4, #16]
	buf->len = state->len;
    27ba:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    27be:	fa13 f389 	uxtah	r3, r3, r9
    27c2:	60a3      	str	r3, [r4, #8]
		net_buf_pull(buf, info->length + sizeof(rssi));
    27c4:	7db1      	ldrb	r1, [r6, #22]
    27c6:	4628      	mov	r0, r5
    27c8:	3101      	adds	r1, #1
    27ca:	f007 f9a4 	bl	9b16 <net_buf_simple_pull>
    27ce:	9b01      	ldr	r3, [sp, #4]
    27d0:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    27d4:	fa5f f388 	uxtb.w	r3, r8
    27d8:	9301      	str	r3, [sp, #4]
    27da:	e7bf      	b.n	275c <bt_recv+0x12c>
    27dc:	f7fd ff0c 	bl	5f8 <memcpy>
    27e0:	e7d7      	b.n	2792 <bt_recv+0x162>
		net_buf_unref(buf);
    27e2:	f007 f957 	bl	9a94 <net_buf_unref>
		return -EINVAL;
    27e6:	f06f 0015 	mvn.w	r0, #21
    27ea:	e74e      	b.n	268a <bt_recv+0x5a>
	net_buf_pull(buf, sizeof(*hdr));
    27ec:	f100 0508 	add.w	r5, r0, #8
    27f0:	2102      	movs	r1, #2
    27f2:	4628      	mov	r0, r5
    27f4:	f007 f98f 	bl	9b16 <net_buf_simple_pull>
	switch (hdr->evt) {
    27f8:	783b      	ldrb	r3, [r7, #0]
    27fa:	2b3e      	cmp	r3, #62	; 0x3e
    27fc:	f47f af41 	bne.w	2682 <bt_recv+0x52>
	struct bt_hci_evt_le_meta_event *evt = (void *)buf->data;
    2800:	68a7      	ldr	r7, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    2802:	4631      	mov	r1, r6
    2804:	4628      	mov	r0, r5
    2806:	f007 f986 	bl	9b16 <net_buf_simple_pull>
	switch (evt->subevent) {
    280a:	783b      	ldrb	r3, [r7, #0]
    280c:	3b02      	subs	r3, #2
    280e:	2b0b      	cmp	r3, #11
    2810:	f63f af37 	bhi.w	2682 <bt_recv+0x52>
    2814:	a201      	add	r2, pc, #4	; (adr r2, 281c <bt_recv+0x1ec>)
    2816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    281a:	bf00      	nop
    281c:	000026bf 	.word	0x000026bf
    2820:	00002683 	.word	0x00002683
    2824:	00002683 	.word	0x00002683
    2828:	00002683 	.word	0x00002683
    282c:	00002683 	.word	0x00002683
    2830:	00002683 	.word	0x00002683
    2834:	00002659 	.word	0x00002659
    2838:	000026a3 	.word	0x000026a3
    283c:	00002683 	.word	0x00002683
    2840:	00002683 	.word	0x00002683
    2844:	00002683 	.word	0x00002683
    2848:	00002751 	.word	0x00002751
    284c:	200037a0 	.word	0x200037a0
    2850:	2000008c 	.word	0x2000008c
    2854:	200000cc 	.word	0x200000cc
    2858:	20000088 	.word	0x20000088
    285c:	200000d4 	.word	0x200000d4

00002860 <bt_recv_prio>:
{
    2860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    2862:	7d03      	ldrb	r3, [r0, #20]
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    2864:	6886      	ldr	r6, [r0, #8]
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    2866:	2b01      	cmp	r3, #1
{
    2868:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    286a:	d005      	beq.n	2878 <bt_recv_prio+0x18>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    286c:	4040      	eors	r0, r0
    286e:	f380 8811 	msr	BASEPRI, r0
    2872:	f04f 0004 	mov.w	r0, #4
    2876:	df02      	svc	2
	BT_ASSERT(buf->len >= sizeof(*hdr));
    2878:	8983      	ldrh	r3, [r0, #12]
    287a:	2b01      	cmp	r3, #1
    287c:	d9f6      	bls.n	286c <bt_recv_prio+0xc>
    287e:	7833      	ldrb	r3, [r6, #0]
    2880:	3b0e      	subs	r3, #14
    2882:	2b01      	cmp	r3, #1
    2884:	d8f2      	bhi.n	286c <bt_recv_prio+0xc>
	net_buf_pull(buf, sizeof(*hdr));
    2886:	f100 0508 	add.w	r5, r0, #8
    288a:	2102      	movs	r1, #2
    288c:	4628      	mov	r0, r5
    288e:	f007 f942 	bl	9b16 <net_buf_simple_pull>
	switch (hdr->evt) {
    2892:	7833      	ldrb	r3, [r6, #0]
    2894:	2b0e      	cmp	r3, #14
    2896:	d005      	beq.n	28a4 <bt_recv_prio+0x44>
    2898:	2b0f      	cmp	r3, #15
    289a:	d017      	beq.n	28cc <bt_recv_prio+0x6c>
		net_buf_unref(buf);
    289c:	4620      	mov	r0, r4
    289e:	f007 f8f9 	bl	9a94 <net_buf_unref>
    28a2:	e7e3      	b.n	286c <bt_recv_prio+0xc>
	u8_t status, ncmd = evt->ncmd;
    28a4:	68a3      	ldr	r3, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    28a6:	2103      	movs	r1, #3
    28a8:	4628      	mov	r0, r5
	u8_t status, ncmd = evt->ncmd;
    28aa:	781e      	ldrb	r6, [r3, #0]
	net_buf_pull(buf, sizeof(*evt));
    28ac:	f007 f933 	bl	9b16 <net_buf_simple_pull>
	status = buf->data[0];
    28b0:	68a3      	ldr	r3, [r4, #8]
	hci_cmd_done(opcode, status, buf);
    28b2:	4621      	mov	r1, r4
    28b4:	7818      	ldrb	r0, [r3, #0]
    28b6:	f7ff fb19 	bl	1eec <hci_cmd_done.isra.9>
	if (ncmd) {
    28ba:	b116      	cbz	r6, 28c2 <bt_recv_prio+0x62>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    28bc:	480a      	ldr	r0, [pc, #40]	; (28e8 <bt_recv_prio+0x88>)
    28be:	f007 fd61 	bl	a384 <_impl_k_sem_give>
	net_buf_unref(buf);
    28c2:	4620      	mov	r0, r4
    28c4:	f007 f8e6 	bl	9a94 <net_buf_unref>
}
    28c8:	2000      	movs	r0, #0
    28ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	struct bt_hci_evt_cmd_status *evt = (void *)buf->data;
    28cc:	68a6      	ldr	r6, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    28ce:	2104      	movs	r1, #4
	u8_t ncmd = evt->ncmd;
    28d0:	7877      	ldrb	r7, [r6, #1]
	net_buf_pull(buf, sizeof(*evt));
    28d2:	4628      	mov	r0, r5
    28d4:	f007 f91f 	bl	9b16 <net_buf_simple_pull>
	hci_cmd_done(opcode, evt->status, buf);
    28d8:	4621      	mov	r1, r4
    28da:	7830      	ldrb	r0, [r6, #0]
    28dc:	f7ff fb06 	bl	1eec <hci_cmd_done.isra.9>
	if (ncmd) {
    28e0:	2f00      	cmp	r7, #0
    28e2:	d0ee      	beq.n	28c2 <bt_recv_prio+0x62>
    28e4:	e7ea      	b.n	28bc <bt_recv_prio+0x5c>
    28e6:	bf00      	nop
    28e8:	200037b8 	.word	0x200037b8

000028ec <bt_hci_driver_register>:
	if (bt_dev.drv) {
    28ec:	4a08      	ldr	r2, [pc, #32]	; (2910 <bt_hci_driver_register+0x24>)
    28ee:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
    28f2:	b93b      	cbnz	r3, 2904 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    28f4:	6881      	ldr	r1, [r0, #8]
    28f6:	b141      	cbz	r1, 290a <bt_hci_driver_register+0x1e>
    28f8:	68c1      	ldr	r1, [r0, #12]
    28fa:	b131      	cbz	r1, 290a <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    28fc:	f8c2 00c4 	str.w	r0, [r2, #196]	; 0xc4
	return 0;
    2900:	4618      	mov	r0, r3
    2902:	4770      	bx	lr
		return -EALREADY;
    2904:	f06f 0044 	mvn.w	r0, #68	; 0x44
    2908:	4770      	bx	lr
		return -EINVAL;
    290a:	f06f 0015 	mvn.w	r0, #21
}
    290e:	4770      	bx	lr
    2910:	20003730 	.word	0x20003730

00002914 <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
    2914:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!bt_dev.drv) {
    2916:	4d24      	ldr	r5, [pc, #144]	; (29a8 <bt_enable+0x94>)
    2918:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
{
    291c:	b086      	sub	sp, #24
    291e:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    2920:	2b00      	cmp	r3, #0
    2922:	d03b      	beq.n	299c <bt_enable+0x88>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    2924:	2101      	movs	r1, #1
    2926:	f105 0070 	add.w	r0, r5, #112	; 0x70
    292a:	f7ff fabd 	bl	1ea8 <atomic_or>
		BT_ERR("No HCI driver registered");
		return -ENODEV;
	}

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    292e:	f010 0001 	ands.w	r0, r0, #1
    2932:	d136      	bne.n	29a2 <bt_enable+0x8e>
		return -EALREADY;
	}

	ready_cb = cb;
    2934:	4b1d      	ldr	r3, [pc, #116]	; (29ac <bt_enable+0x98>)

    2936:	491e      	ldr	r1, [pc, #120]	; (29b0 <bt_enable+0x9c>)
    2938:	601e      	str	r6, [r3, #0]
    293a:	f06f 0308 	mvn.w	r3, #8
    293e:	9005      	str	r0, [sp, #20]
    2940:	9004      	str	r0, [sp, #16]
    2942:	9303      	str	r3, [sp, #12]
    2944:	9002      	str	r0, [sp, #8]
    2946:	9001      	str	r0, [sp, #4]
    2948:	9000      	str	r0, [sp, #0]
    294a:	4b1a      	ldr	r3, [pc, #104]	; (29b4 <bt_enable+0xa0>)
    294c:	481a      	ldr	r0, [pc, #104]	; (29b8 <bt_enable+0xa4>)
    294e:	f44f 7220 	mov.w	r2, #640	; 0x280
    2952:	f007 ff39 	bl	a7c8 <_impl_k_thread_create>

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		bt_hci_ecc_init();
	}

	err = bt_dev.drv->open();
    2956:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
    295a:	689b      	ldr	r3, [r3, #8]
    295c:	4798      	blx	r3
	if (err) {
    295e:	4604      	mov	r4, r0
    2960:	b960      	cbnz	r0, 297c <bt_enable+0x68>
		BT_ERR("HCI driver open failed (%d)", err);
		return err;
	}

	if (!cb) {
    2962:	b976      	cbnz	r6, 2982 <bt_enable+0x6e>
	err = hci_init();
    2964:	f7ff fbfe 	bl	2164 <hci_init>
	if (err) {
    2968:	4604      	mov	r4, r0
    296a:	b938      	cbnz	r0, 297c <bt_enable+0x68>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    296c:	2102      	movs	r1, #2
    296e:	f105 0070 	add.w	r0, r5, #112	; 0x70
    2972:	f7ff fa99 	bl	1ea8 <atomic_or>
	bt_le_scan_update(false);
    2976:	4620      	mov	r0, r4
    2978:	f7ff fbd4 	bl	2124 <bt_le_scan_update>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
    297c:	4620      	mov	r0, r4
    297e:	b006      	add	sp, #24
    2980:	bd70      	pop	{r4, r5, r6, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    2982:	2101      	movs	r1, #1
    2984:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    2988:	f7ff fa8e 	bl	1ea8 <atomic_or>
 * @return N/A
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    298c:	07c3      	lsls	r3, r0, #31
    298e:	d4f5      	bmi.n	297c <bt_enable+0x68>
		k_queue_append(&work_q->queue, work);
    2990:	f105 0164 	add.w	r1, r5, #100	; 0x64
    2994:	4809      	ldr	r0, [pc, #36]	; (29bc <bt_enable+0xa8>)
    2996:	f007 faaa 	bl	9eee <k_queue_append>
    299a:	e7ef      	b.n	297c <bt_enable+0x68>
		return -ENODEV;
    299c:	f06f 0412 	mvn.w	r4, #18
    29a0:	e7ec      	b.n	297c <bt_enable+0x68>
		return -EALREADY;
    29a2:	f06f 0444 	mvn.w	r4, #68	; 0x44
    29a6:	e7e9      	b.n	297c <bt_enable+0x68>
    29a8:	20003730 	.word	0x20003730
    29ac:	200000d0 	.word	0x200000d0
    29b0:	20001b68 	.word	0x20001b68
    29b4:	00002585 	.word	0x00002585
    29b8:	200000d8 	.word	0x200000d8
    29bc:	20001af0 	.word	0x20001af0

000029c0 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
    29c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    29c4:	7803      	ldrb	r3, [r0, #0]
    29c6:	2b01      	cmp	r3, #1
{
    29c8:	4605      	mov	r5, r0
    29ca:	460f      	mov	r7, r1
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    29cc:	d810      	bhi.n	29f0 <bt_le_scan_start+0x30>
	if (param->filter_dup != BT_HCI_LE_SCAN_FILTER_DUP_DISABLE &&
    29ce:	7843      	ldrb	r3, [r0, #1]
    29d0:	2b01      	cmp	r3, #1
    29d2:	d80d      	bhi.n	29f0 <bt_le_scan_start+0x30>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
    29d4:	8841      	ldrh	r1, [r0, #2]
    29d6:	1f0b      	subs	r3, r1, #4
    29d8:	b29b      	uxth	r3, r3
    29da:	f643 70fc 	movw	r0, #16380	; 0x3ffc
    29de:	4283      	cmp	r3, r0
    29e0:	d806      	bhi.n	29f0 <bt_le_scan_start+0x30>
	if (param->window < 0x0004 || param->window > 0x4000) {
    29e2:	88aa      	ldrh	r2, [r5, #4]
    29e4:	1f13      	subs	r3, r2, #4
    29e6:	b29b      	uxth	r3, r3
    29e8:	4283      	cmp	r3, r0
    29ea:	d801      	bhi.n	29f0 <bt_le_scan_start+0x30>
	if (param->window > param->interval) {
    29ec:	4291      	cmp	r1, r2
    29ee:	d26c      	bcs.n	2aca <bt_le_scan_start+0x10a>
	int err;

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
    29f0:	f06f 0415 	mvn.w	r4, #21
	}

	scan_dev_found_cb = cb;

	return 0;
}
    29f4:	4620      	mov	r0, r4
    29f6:	b002      	add	sp, #8
    29f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    29fc:	2007      	movs	r0, #7
    29fe:	f7ff fa9d 	bl	1f3c <atomic_test_bit.constprop.25>
    2a02:	b150      	cbz	r0, 2a1a <bt_le_scan_start+0x5a>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    2a04:	4608      	mov	r0, r1
    2a06:	f7ff fb59 	bl	20bc <set_le_scan_enable>
		if (err) {
    2a0a:	4604      	mov	r4, r0
    2a0c:	b128      	cbz	r0, 2a1a <bt_le_scan_start+0x5a>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2a0e:	f46f 7180 	mvn.w	r1, #256	; 0x100
    2a12:	4835      	ldr	r0, [pc, #212]	; (2ae8 <bt_le_scan_start+0x128>)
    2a14:	f7ff fa59 	bl	1eca <atomic_and>
		return err;
    2a18:	e7ec      	b.n	29f4 <bt_le_scan_start+0x34>
	if (param->filter_dup) {
    2a1a:	786b      	ldrb	r3, [r5, #1]
    2a1c:	2b00      	cmp	r3, #0
    2a1e:	d048      	beq.n	2ab2 <bt_le_scan_start+0xf2>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2a20:	f44f 6180 	mov.w	r1, #1024	; 0x400
    2a24:	4830      	ldr	r0, [pc, #192]	; (2ae8 <bt_le_scan_start+0x128>)
    2a26:	f7ff fa3f 	bl	1ea8 <atomic_or>
	memset(&set_param, 0, sizeof(set_param));
    2a2a:	2207      	movs	r2, #7
    2a2c:	2100      	movs	r1, #0
    2a2e:	4668      	mov	r0, sp
	err = start_le_scan(param->type, param->interval, param->window);
    2a30:	782e      	ldrb	r6, [r5, #0]
    2a32:	f8b5 8002 	ldrh.w	r8, [r5, #2]
    2a36:	88ac      	ldrh	r4, [r5, #4]
	memset(&set_param, 0, sizeof(set_param));
    2a38:	f7fd fe0a 	bl	650 <memset>
	set_param.filter_policy = 0x00;
    2a3c:	2300      	movs	r3, #0
    2a3e:	f88d 3006 	strb.w	r3, [sp, #6]
		set_param.addr_type =  bt_dev.id_addr.type;
    2a42:	4b2a      	ldr	r3, [pc, #168]	; (2aec <bt_le_scan_start+0x12c>)
	set_param.scan_type = scan_type;
    2a44:	f88d 6000 	strb.w	r6, [sp]
		set_param.addr_type =  bt_dev.id_addr.type;
    2a48:	781b      	ldrb	r3, [r3, #0]
	set_param.interval = sys_cpu_to_le16(interval);
    2a4a:	f8ad 8001 	strh.w	r8, [sp, #1]
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    2a4e:	2e01      	cmp	r6, #1
	set_param.window = sys_cpu_to_le16(window);
    2a50:	f8ad 4003 	strh.w	r4, [sp, #3]
		set_param.addr_type =  bt_dev.id_addr.type;
    2a54:	f88d 3005 	strb.w	r3, [sp, #5]
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    2a58:	d10a      	bne.n	2a70 <bt_le_scan_start+0xb0>
		    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    2a5a:	2005      	movs	r0, #5
    2a5c:	f7ff fa6e 	bl	1f3c <atomic_test_bit.constprop.25>
		    scan_type == BT_HCI_LE_SCAN_ACTIVE &&
    2a60:	b930      	cbnz	r0, 2a70 <bt_le_scan_start+0xb0>
			err = le_set_private_addr();
    2a62:	f7ff fb19 	bl	2098 <le_set_private_addr>
			if (err) {
    2a66:	4604      	mov	r4, r0
    2a68:	2800      	cmp	r0, #0
    2a6a:	d1d0      	bne.n	2a0e <bt_le_scan_start+0x4e>
			set_param.addr_type = BT_ADDR_LE_RANDOM;
    2a6c:	f88d 6005 	strb.w	r6, [sp, #5]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    2a70:	2107      	movs	r1, #7
    2a72:	f242 000b 	movw	r0, #8203	; 0x200b
    2a76:	f7ff fa73 	bl	1f60 <bt_hci_cmd_create>
	if (!buf) {
    2a7a:	4604      	mov	r4, r0
    2a7c:	b380      	cbz	r0, 2ae0 <bt_le_scan_start+0x120>
	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    2a7e:	2207      	movs	r2, #7
    2a80:	4669      	mov	r1, sp
    2a82:	3008      	adds	r0, #8
    2a84:	f007 f83e 	bl	9b04 <net_buf_simple_add_mem>
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_SCAN_PARAM, buf);
    2a88:	4621      	mov	r1, r4
    2a8a:	f242 000b 	movw	r0, #8203	; 0x200b
    2a8e:	f7ff fd57 	bl	2540 <bt_hci_cmd_send>
	err = set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
    2a92:	2001      	movs	r0, #1
    2a94:	f7ff fb12 	bl	20bc <set_le_scan_enable>
	if (err) {
    2a98:	4604      	mov	r4, r0
    2a9a:	2800      	cmp	r0, #0
    2a9c:	d1b7      	bne.n	2a0e <bt_le_scan_start+0x4e>
	if (scan_type == BT_HCI_LE_SCAN_ACTIVE) {
    2a9e:	2e01      	cmp	r6, #1
    2aa0:	d10d      	bne.n	2abe <bt_le_scan_start+0xfe>
    2aa2:	f44f 7100 	mov.w	r1, #512	; 0x200
    2aa6:	4810      	ldr	r0, [pc, #64]	; (2ae8 <bt_le_scan_start+0x128>)
    2aa8:	f7ff f9fe 	bl	1ea8 <atomic_or>
	scan_dev_found_cb = cb;
    2aac:	4b10      	ldr	r3, [pc, #64]	; (2af0 <bt_le_scan_start+0x130>)
    2aae:	601f      	str	r7, [r3, #0]
	return 0;
    2ab0:	e7a0      	b.n	29f4 <bt_le_scan_start+0x34>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2ab2:	f46f 6180 	mvn.w	r1, #1024	; 0x400
    2ab6:	480c      	ldr	r0, [pc, #48]	; (2ae8 <bt_le_scan_start+0x128>)
    2ab8:	f7ff fa07 	bl	1eca <atomic_and>
    2abc:	e7b5      	b.n	2a2a <bt_le_scan_start+0x6a>
    2abe:	f46f 7100 	mvn.w	r1, #512	; 0x200
    2ac2:	4809      	ldr	r0, [pc, #36]	; (2ae8 <bt_le_scan_start+0x128>)
    2ac4:	f7ff fa01 	bl	1eca <atomic_and>
    2ac8:	e7f0      	b.n	2aac <bt_le_scan_start+0xec>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    2aca:	f44f 7180 	mov.w	r1, #256	; 0x100
    2ace:	4806      	ldr	r0, [pc, #24]	; (2ae8 <bt_le_scan_start+0x128>)
    2ad0:	f7ff f9ea 	bl	1ea8 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    2ad4:	f410 7180 	ands.w	r1, r0, #256	; 0x100
    2ad8:	d090      	beq.n	29fc <bt_le_scan_start+0x3c>
		return -EALREADY;
    2ada:	f06f 0444 	mvn.w	r4, #68	; 0x44
    2ade:	e789      	b.n	29f4 <bt_le_scan_start+0x34>
		return -ENOBUFS;
    2ae0:	f06f 0436 	mvn.w	r4, #54	; 0x36
    2ae4:	e793      	b.n	2a0e <bt_le_scan_start+0x4e>
    2ae6:	bf00      	nop
    2ae8:	200037a0 	.word	0x200037a0
    2aec:	20003730 	.word	0x20003730
    2af0:	200000d4 	.word	0x200000d4

00002af4 <bt_buf_get_rx>:

	return bt_le_scan_update(false);
}

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, s32_t timeout)
{
    2af4:	b538      	push	{r3, r4, r5, lr}
    2af6:	4605      	mov	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    2af8:	4805      	ldr	r0, [pc, #20]	; (2b10 <bt_buf_get_rx+0x1c>)
    2afa:	f006 ff9b 	bl	9a34 <net_buf_alloc_fixed>
#endif

	if (buf) {
    2afe:	4604      	mov	r4, r0
    2b00:	b120      	cbz	r0, 2b0c <bt_buf_get_rx+0x18>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    2b02:	2100      	movs	r1, #0
    2b04:	3008      	adds	r0, #8
    2b06:	f006 ffb4 	bl	9a72 <net_buf_simple_reserve>
    2b0a:	7525      	strb	r5, [r4, #20]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    2b0c:	4620      	mov	r0, r4
    2b0e:	bd38      	pop	{r3, r4, r5, pc}
    2b10:	20003a5c 	.word	0x20003a5c

00002b14 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(s32_t timeout)
{
    2b14:	b510      	push	{r4, lr}
    2b16:	4601      	mov	r1, r0
	__asm__ volatile(
    2b18:	f04f 0320 	mov.w	r3, #32
    2b1c:	f3ef 8011 	mrs	r0, BASEPRI
    2b20:	f383 8811 	msr	BASEPRI, r3
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    2b24:	4a0b      	ldr	r2, [pc, #44]	; (2b54 <bt_buf_get_cmd_complete+0x40>)
	bt_dev.sent_cmd = NULL;
    2b26:	2300      	movs	r3, #0
	buf = bt_dev.sent_cmd;
    2b28:	f8d2 40a0 	ldr.w	r4, [r2, #160]	; 0xa0
	bt_dev.sent_cmd = NULL;
    2b2c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    2b30:	f380 8811 	msr	BASEPRI, r0
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    2b34:	b924      	cbnz	r4, 2b40 <bt_buf_get_cmd_complete+0x2c>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    2b36:	2001      	movs	r0, #1
}
    2b38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    2b3c:	f7ff bfda 	b.w	2af4 <bt_buf_get_rx>
    2b40:	2201      	movs	r2, #1
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    2b42:	f104 0008 	add.w	r0, r4, #8
    2b46:	7522      	strb	r2, [r4, #20]
		buf->len = 0;
    2b48:	81a3      	strh	r3, [r4, #12]
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    2b4a:	4619      	mov	r1, r3
    2b4c:	f006 ff91 	bl	9a72 <net_buf_simple_reserve>
}
    2b50:	4620      	mov	r0, r4
    2b52:	bd10      	pop	{r4, pc}
    2b54:	20003730 	.word	0x20003730

00002b58 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
    2b58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	*mem_head = mem_pool;
    2b5a:	6018      	str	r0, [r3, #0]

	/* Store free mem_count after the list's next pointer at an aligned
	 * memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    2b5c:	1dc3      	adds	r3, r0, #7
{
    2b5e:	4605      	mov	r5, r0
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    2b60:	f023 0303 	bic.w	r3, r3, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    2b64:	1e50      	subs	r0, r2, #1
{
    2b66:	460e      	mov	r6, r1
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    2b68:	b280      	uxth	r0, r0
{
    2b6a:	4614      	mov	r4, r2
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    2b6c:	801a      	strh	r2, [r3, #0]
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    2b6e:	2100      	movs	r1, #0
    2b70:	2204      	movs	r2, #4
    2b72:	fb06 5000 	mla	r0, r6, r0, r5
    2b76:	f7fd fd6b 	bl	650 <memset>
    2b7a:	3c02      	subs	r4, #2
    2b7c:	b2a4      	uxth	r4, r4
	       sizeof(mem_pool));
	while (mem_count--) {
    2b7e:	f64f 77ff 	movw	r7, #65535	; 0xffff
    2b82:	42bc      	cmp	r4, r7
    2b84:	d101      	bne.n	2b8a <mem_init+0x32>
		next = (u32_t)((u8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
		       (void *)&next, sizeof(next));
	}
}
    2b86:	b003      	add	sp, #12
    2b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
			       (mem_size * (mem_count + 1)));
    2b8a:	fb04 6006 	mla	r0, r4, r6, r6
		next = (u32_t)((u8_t *) mem_pool +
    2b8e:	182b      	adds	r3, r5, r0
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    2b90:	2204      	movs	r2, #4
    2b92:	1b80      	subs	r0, r0, r6
    2b94:	eb0d 0102 	add.w	r1, sp, r2
    2b98:	4428      	add	r0, r5
    2b9a:	3c01      	subs	r4, #1
		next = (u32_t)((u8_t *) mem_pool +
    2b9c:	9301      	str	r3, [sp, #4]
    2b9e:	b2a4      	uxth	r4, r4
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    2ba0:	f7fd fd2a 	bl	5f8 <memcpy>
    2ba4:	e7ed      	b.n	2b82 <mem_init+0x2a>

00002ba6 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    2ba6:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (*mem_head) {
    2ba8:	6805      	ldr	r5, [r0, #0]
{
    2baa:	4606      	mov	r6, r0
	if (*mem_head) {
    2bac:	b195      	cbz	r5, 2bd4 <mem_acquire+0x2e>
		u16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    2bae:	1deb      	adds	r3, r5, #7
    2bb0:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    2bb4:	2204      	movs	r2, #4
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    2bb6:	881c      	ldrh	r4, [r3, #0]
		memcpy(&head, mem, sizeof(head));
    2bb8:	4629      	mov	r1, r5
    2bba:	eb0d 0002 	add.w	r0, sp, r2
    2bbe:	f7fd fd1b 	bl	5f8 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    2bc2:	9b01      	ldr	r3, [sp, #4]
		free_count--;
    2bc4:	3c01      	subs	r4, #1
    2bc6:	b2a4      	uxth	r4, r4
		if (head) {
    2bc8:	b11b      	cbz	r3, 2bd2 <mem_acquire+0x2c>
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
    2bca:	1dda      	adds	r2, r3, #7
    2bcc:	f022 0203 	bic.w	r2, r2, #3
    2bd0:	8014      	strh	r4, [r2, #0]
				free_count;
		}

		*mem_head = head;
    2bd2:	6033      	str	r3, [r6, #0]
		return mem;
	}

	return NULL;
}
    2bd4:	4628      	mov	r0, r5
    2bd6:	b002      	add	sp, #8
    2bd8:	bd70      	pop	{r4, r5, r6, pc}

00002bda <mem_release>:

void mem_release(void *mem, void **mem_head)
{
    2bda:	b570      	push	{r4, r5, r6, lr}
	u16_t free_count = 0;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    2bdc:	680c      	ldr	r4, [r1, #0]
{
    2bde:	4606      	mov	r6, r0
    2be0:	460d      	mov	r5, r1
	if (*mem_head) {
    2be2:	b11c      	cbz	r4, 2bec <mem_release+0x12>
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    2be4:	1de3      	adds	r3, r4, #7
    2be6:	f023 0303 	bic.w	r3, r3, #3
    2bea:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
    2bec:	2204      	movs	r2, #4
    2bee:	4629      	mov	r1, r5
    2bf0:	4630      	mov	r0, r6
    2bf2:	f7fd fd01 	bl	5f8 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    2bf6:	1df2      	adds	r2, r6, #7
    2bf8:	f022 0203 	bic.w	r2, r2, #3
	free_count++;
    2bfc:	1c63      	adds	r3, r4, #1
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    2bfe:	8013      	strh	r3, [r2, #0]

	*mem_head = mem;
    2c00:	602e      	str	r6, [r5, #0]
    2c02:	bd70      	pop	{r4, r5, r6, pc}

00002c04 <mem_get>:
}

void *mem_get(void *mem_pool, u16_t mem_size, u16_t index)
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
}
    2c04:	fb02 0001 	mla	r0, r2, r1, r0
    2c08:	4770      	bx	lr

00002c0a <mem_index_get>:

u16_t mem_index_get(void *mem, void *mem_pool, u16_t mem_size)
{
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
    2c0a:	1a40      	subs	r0, r0, r1
    2c0c:	b280      	uxth	r0, r0
}
    2c0e:	fbb0 f0f2 	udiv	r0, r0, r2
    2c12:	4770      	bx	lr

00002c14 <mem_rcopy>:

void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
    2c14:	b510      	push	{r4, lr}
	src += len;
    2c16:	4411      	add	r1, r2
    2c18:	3801      	subs	r0, #1
	while (len--) {
    2c1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2c1e:	3a01      	subs	r2, #1
    2c20:	b292      	uxth	r2, r2
    2c22:	429a      	cmp	r2, r3
    2c24:	d100      	bne.n	2c28 <mem_rcopy+0x14>
		*dst++ = *--src;
	}
}
    2c26:	bd10      	pop	{r4, pc}
		*dst++ = *--src;
    2c28:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
    2c2c:	f800 4f01 	strb.w	r4, [r0, #1]!
    2c30:	e7f5      	b.n	2c1e <mem_rcopy+0xa>

00002c32 <memq_init>:
inline memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem);

memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* head and tail pointer to the initial link */
	*head = *tail = link;
    2c32:	6010      	str	r0, [r2, #0]
    2c34:	6008      	str	r0, [r1, #0]

	return link;
}
    2c36:	4770      	bx	lr

00002c38 <memq_enqueue>:

memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
    2c38:	b510      	push	{r4, lr}
	/* make the current tail link's next point to new link */
	(*tail)->next = link;
    2c3a:	6814      	ldr	r4, [r2, #0]
    2c3c:	6020      	str	r0, [r4, #0]

	/* assign mem to current tail link's mem */
	(*tail)->mem = mem;
    2c3e:	6814      	ldr	r4, [r2, #0]
    2c40:	6061      	str	r1, [r4, #4]

	/* increment the tail! */
	*tail = link;
    2c42:	6010      	str	r0, [r2, #0]

	return link;
}
    2c44:	bd10      	pop	{r4, pc}

00002c46 <memq_peek>:

memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* if head and tail are equal, then queue empty */
	if (head == tail) {
    2c46:	4288      	cmp	r0, r1
    2c48:	d003      	beq.n	2c52 <memq_peek+0xc>
		return NULL;
	}

	/* extract the link's mem */
	if (mem) {
    2c4a:	b11a      	cbz	r2, 2c54 <memq_peek+0xe>
		*mem = head->mem;
    2c4c:	6843      	ldr	r3, [r0, #4]
    2c4e:	6013      	str	r3, [r2, #0]
    2c50:	4770      	bx	lr
		return NULL;
    2c52:	2000      	movs	r0, #0
	}

	return head;
}
    2c54:	4770      	bx	lr

00002c56 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *link;

	/* use memq peek to get the link and mem */
	link = memq_peek(*head, tail, mem);
    2c56:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    2c58:	4283      	cmp	r3, r0
    2c5a:	d009      	beq.n	2c70 <memq_dequeue+0x1a>
	if (mem) {
    2c5c:	b122      	cbz	r2, 2c68 <memq_dequeue+0x12>
		*mem = head->mem;
    2c5e:	6858      	ldr	r0, [r3, #4]
    2c60:	6010      	str	r0, [r2, #0]
	if (!link) {
		return link;
	}

	/* increment the head to next link node */
	*head = link->next;
    2c62:	681a      	ldr	r2, [r3, #0]
    2c64:	600a      	str	r2, [r1, #0]

	return link;
    2c66:	e001      	b.n	2c6c <memq_dequeue+0x16>
	if (!link) {
    2c68:	2b00      	cmp	r3, #0
    2c6a:	d1fa      	bne.n	2c62 <memq_dequeue+0xc>
}
    2c6c:	4618      	mov	r0, r3
    2c6e:	4770      	bx	lr
		return NULL;
    2c70:	2300      	movs	r3, #0
    2c72:	e7fb      	b.n	2c6c <memq_dequeue+0x16>

00002c74 <mayfly_init>:
} mft[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

static memq_link_t mfl[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

void mayfly_init(void)
{
    2c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (callee_id--) {
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(&mfl[callee_id][caller_id],
    2c78:	4f11      	ldr	r7, [pc, #68]	; (2cc0 <mayfly_init+0x4c>)
    2c7a:	f8df 9048 	ldr.w	r9, [pc, #72]	; 2cc4 <mayfly_init+0x50>
	callee_id = MAYFLY_CALLEE_COUNT;
    2c7e:	2604      	movs	r6, #4
	while (callee_id--) {
    2c80:	3e01      	subs	r6, #1
    2c82:	b2f6      	uxtb	r6, r6
    2c84:	2eff      	cmp	r6, #255	; 0xff
    2c86:	d019      	beq.n	2cbc <mayfly_init+0x48>
    2c88:	b233      	sxth	r3, r6
    2c8a:	ea4f 0883 	mov.w	r8, r3, lsl #2
    2c8e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2c92:	011d      	lsls	r5, r3, #4
    2c94:	2404      	movs	r4, #4
    2c96:	f04f 0a0c 	mov.w	sl, #12
    2c9a:	e00a      	b.n	2cb2 <mayfly_init+0x3e>
    2c9c:	fb1a 5104 	smlabb	r1, sl, r4, r5
			memq_init(&mfl[callee_id][caller_id],
    2ca0:	1d0a      	adds	r2, r1, #4
    2ca2:	eb04 0008 	add.w	r0, r4, r8
    2ca6:	443a      	add	r2, r7
    2ca8:	4439      	add	r1, r7
    2caa:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
    2cae:	f7ff ffc0 	bl	2c32 <memq_init>
		while (caller_id--) {
    2cb2:	3c01      	subs	r4, #1
    2cb4:	b2e4      	uxtb	r4, r4
    2cb6:	2cff      	cmp	r4, #255	; 0xff
    2cb8:	d1f0      	bne.n	2c9c <mayfly_init+0x28>
    2cba:	e7e1      	b.n	2c80 <mayfly_init+0xc>
    2cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2cc0:	200001c0 	.word	0x200001c0
    2cc4:	20000140 	.word	0x20000140

00002cc8 <mayfly_enable>:
		}
	}
}

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
    2cc8:	b4f0      	push	{r4, r5, r6, r7}
    2cca:	4b12      	ldr	r3, [pc, #72]	; (2d14 <mayfly_enable+0x4c>)
    2ccc:	4605      	mov	r5, r0
    2cce:	460f      	mov	r7, r1
    2cd0:	260c      	movs	r6, #12
    2cd2:	2430      	movs	r4, #48	; 0x30
	if (enable) {
    2cd4:	b172      	cbz	r2, 2cf4 <mayfly_enable+0x2c>
		if (mft[callee_id][caller_id].enable_req ==
    2cd6:	4361      	muls	r1, r4
    2cd8:	fb06 1400 	mla	r4, r6, r0, r1
    2cdc:	4423      	add	r3, r4
    2cde:	7a59      	ldrb	r1, [r3, #9]
    2ce0:	7a18      	ldrb	r0, [r3, #8]
    2ce2:	4281      	cmp	r1, r0
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    2ce4:	bf04      	itt	eq
    2ce6:	3101      	addeq	r1, #1
    2ce8:	7219      	strbeq	r1, [r3, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    2cea:	4628      	mov	r0, r5
    2cec:	4639      	mov	r1, r7
			mft[callee_id][caller_id].disable_req++;

			mayfly_pend(caller_id, callee_id);
		}
	}
}
    2cee:	bcf0      	pop	{r4, r5, r6, r7}
		mayfly_enable_cb(caller_id, callee_id, enable);
    2cf0:	f006 bd78 	b.w	97e4 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
    2cf4:	434c      	muls	r4, r1
    2cf6:	fb06 4400 	mla	r4, r6, r0, r4
    2cfa:	4423      	add	r3, r4
    2cfc:	7a9c      	ldrb	r4, [r3, #10]
    2cfe:	7ada      	ldrb	r2, [r3, #11]
    2d00:	42a2      	cmp	r2, r4
    2d02:	d104      	bne.n	2d0e <mayfly_enable+0x46>
			mft[callee_id][caller_id].disable_req++;
    2d04:	3201      	adds	r2, #1
    2d06:	729a      	strb	r2, [r3, #10]
}
    2d08:	bcf0      	pop	{r4, r5, r6, r7}
			mayfly_pend(caller_id, callee_id);
    2d0a:	f006 bd99 	b.w	9840 <mayfly_pend>
}
    2d0e:	bcf0      	pop	{r4, r5, r6, r7}
    2d10:	4770      	bx	lr
    2d12:	bf00      	nop
    2d14:	200001c0 	.word	0x200001c0

00002d18 <mayfly_enqueue>:

u32_t mayfly_enqueue(u8_t caller_id, u8_t callee_id, u8_t chain,
			struct mayfly *m)
{
    2d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d1a:	4605      	mov	r5, r0
    2d1c:	460e      	mov	r6, r1
    2d1e:	461c      	mov	r4, r3
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    2d20:	b18a      	cbz	r2, 2d46 <mayfly_enqueue+0x2e>
    2d22:	2301      	movs	r3, #1
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
    2d24:	7862      	ldrb	r2, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    2d26:	7820      	ldrb	r0, [r4, #0]
    2d28:	1a80      	subs	r0, r0, r2
	if (state != 0) {
    2d2a:	f010 0703 	ands.w	r7, r0, #3
    2d2e:	d029      	beq.n	2d84 <mayfly_enqueue+0x6c>
		if (chain) {
    2d30:	b303      	cbz	r3, 2d74 <mayfly_enqueue+0x5c>
			if (state != 1) {
    2d32:	2f01      	cmp	r7, #1
    2d34:	d039      	beq.n	2daa <mayfly_enqueue+0x92>
				/* mark as ready in queue */
				m->_req = ack + 1;
    2d36:	3201      	adds	r2, #1
    2d38:	b2d2      	uxtb	r2, r2
    2d3a:	7022      	strb	r2, [r4, #0]
	/* new, add as ready in the queue */
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    2d3c:	4631      	mov	r1, r6
    2d3e:	4628      	mov	r0, r5
    2d40:	f006 fd7e 	bl	9840 <mayfly_pend>
    2d44:	e01c      	b.n	2d80 <mayfly_enqueue+0x68>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    2d46:	f006 fd69 	bl	981c <mayfly_prio_is_equal>
    2d4a:	2800      	cmp	r0, #0
    2d4c:	d0e9      	beq.n	2d22 <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
    2d4e:	4631      	mov	r1, r6
    2d50:	4628      	mov	r0, r5
    2d52:	f006 fd55 	bl	9800 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    2d56:	2800      	cmp	r0, #0
    2d58:	d0e3      	beq.n	2d22 <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
    2d5a:	2330      	movs	r3, #48	; 0x30
    2d5c:	220c      	movs	r2, #12
    2d5e:	4373      	muls	r3, r6
    2d60:	fb02 3305 	mla	r3, r2, r5, r3
    2d64:	4a12      	ldr	r2, [pc, #72]	; (2db0 <mayfly_enqueue+0x98>)
    2d66:	441a      	add	r2, r3
		!mayfly_is_enabled(caller_id, callee_id) ||
    2d68:	7a93      	ldrb	r3, [r2, #10]
    2d6a:	7ad2      	ldrb	r2, [r2, #11]
    2d6c:	1a9b      	subs	r3, r3, r2
    2d6e:	bf18      	it	ne
    2d70:	2301      	movne	r3, #1
    2d72:	e7d7      	b.n	2d24 <mayfly_enqueue+0xc>
		m->_req = ack + 2;
    2d74:	3202      	adds	r2, #2
    2d76:	b2d2      	uxtb	r2, r2
    2d78:	7022      	strb	r2, [r4, #0]
		m->fp(m->param);
    2d7a:	68e3      	ldr	r3, [r4, #12]
    2d7c:	68a0      	ldr	r0, [r4, #8]
    2d7e:	4798      	blx	r3
		return 0;
    2d80:	2000      	movs	r0, #0
    2d82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!chain) {
    2d84:	2b00      	cmp	r3, #0
    2d86:	d0f8      	beq.n	2d7a <mayfly_enqueue+0x62>
	m->_req = ack + 1;
    2d88:	3201      	adds	r2, #1
    2d8a:	b2d2      	uxtb	r2, r2
    2d8c:	7022      	strb	r2, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    2d8e:	2304      	movs	r3, #4
    2d90:	2230      	movs	r2, #48	; 0x30
    2d92:	fb12 3206 	smlabb	r2, r2, r6, r3
    2d96:	230c      	movs	r3, #12
    2d98:	fb13 2305 	smlabb	r3, r3, r5, r2
    2d9c:	4a04      	ldr	r2, [pc, #16]	; (2db0 <mayfly_enqueue+0x98>)
    2d9e:	6860      	ldr	r0, [r4, #4]
    2da0:	441a      	add	r2, r3
    2da2:	4621      	mov	r1, r4
    2da4:	f7ff ff48 	bl	2c38 <memq_enqueue>
    2da8:	e7c8      	b.n	2d3c <mayfly_enqueue+0x24>
			return 1;
    2daa:	4638      	mov	r0, r7

	return 0;
}
    2dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2dae:	bf00      	nop
    2db0:	200001c0 	.word	0x200001c0

00002db4 <mayfly_run>:

void mayfly_run(u8_t callee_id)
{
    2db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2db8:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    2dbc:	b089      	sub	sp, #36	; 0x24
    2dbe:	011b      	lsls	r3, r3, #4
	u8_t disable = 0;
	u8_t enable = 0;
    2dc0:	f04f 0800 	mov.w	r8, #0
	while (caller_id--) {
		memq_link_t *link;
		struct mayfly *m = 0;

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
    2dc4:	4e43      	ldr	r6, [pc, #268]	; (2ed4 <mayfly_run+0x120>)
    2dc6:	9304      	str	r3, [sp, #16]
{
    2dc8:	4605      	mov	r5, r0
	caller_id = MAYFLY_CALLER_COUNT;
    2dca:	2404      	movs	r4, #4
	u8_t disable = 0;
    2dcc:	f8cd 8004 	str.w	r8, [sp, #4]
	while (caller_id--) {
    2dd0:	3c01      	subs	r4, #1
    2dd2:	b2e4      	uxtb	r4, r4
    2dd4:	2cff      	cmp	r4, #255	; 0xff
    2dd6:	d10b      	bne.n	2df0 <mayfly_run+0x3c>
			mft[callee_id][caller_id].enable_ack =
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    2dd8:	9b01      	ldr	r3, [sp, #4]
    2dda:	2b00      	cmp	r3, #0
    2ddc:	d076      	beq.n	2ecc <mayfly_run+0x118>
    2dde:	f1b8 0f00 	cmp.w	r8, #0
    2de2:	d173      	bne.n	2ecc <mayfly_run+0x118>
		mayfly_enable_cb(callee_id, callee_id, 0);
    2de4:	4642      	mov	r2, r8
    2de6:	4629      	mov	r1, r5
    2de8:	4628      	mov	r0, r5
    2dea:	f006 fcfb 	bl	97e4 <mayfly_enable_cb>
    2dee:	e06d      	b.n	2ecc <mayfly_run+0x118>
		struct mayfly *m = 0;
    2df0:	f10d 0b20 	add.w	fp, sp, #32
    2df4:	2300      	movs	r3, #0
		link = memq_peek(mft[callee_id][caller_id].head,
    2df6:	270c      	movs	r7, #12
		struct mayfly *m = 0;
    2df8:	f84b 3d04 	str.w	r3, [fp, #-4]!
		link = memq_peek(mft[callee_id][caller_id].head,
    2dfc:	f04f 0930 	mov.w	r9, #48	; 0x30
    2e00:	fb07 f304 	mul.w	r3, r7, r4
    2e04:	fb09 3005 	mla	r0, r9, r5, r3
    2e08:	1831      	adds	r1, r6, r0
    2e0a:	465a      	mov	r2, fp
    2e0c:	6849      	ldr	r1, [r1, #4]
    2e0e:	5830      	ldr	r0, [r6, r0]
    2e10:	9302      	str	r3, [sp, #8]
    2e12:	f7ff ff18 	bl	2c46 <memq_peek>
				memq_dequeue(mft[callee_id][caller_id].tail,
    2e16:	9b04      	ldr	r3, [sp, #16]
    2e18:	fb17 3704 	smlabb	r7, r7, r4, r3
    2e1c:	19f3      	adds	r3, r6, r7
		link = memq_peek(mft[callee_id][caller_id].head,
    2e1e:	4682      	mov	sl, r0
				memq_dequeue(mft[callee_id][caller_id].tail,
    2e20:	9303      	str	r3, [sp, #12]
		while (link) {
    2e22:	f1ba 0f00 	cmp.w	sl, #0
    2e26:	d119      	bne.n	2e5c <mayfly_run+0xa8>
		if (mft[callee_id][caller_id].disable_req !=
    2e28:	2230      	movs	r2, #48	; 0x30
    2e2a:	230c      	movs	r3, #12
    2e2c:	436a      	muls	r2, r5
    2e2e:	fb03 2204 	mla	r2, r3, r4, r2
    2e32:	4432      	add	r2, r6
    2e34:	7a91      	ldrb	r1, [r2, #10]
    2e36:	7ad0      	ldrb	r0, [r2, #11]
    2e38:	4288      	cmp	r0, r1
			mft[callee_id][caller_id].disable_ack =
    2e3a:	bf1e      	ittt	ne
    2e3c:	72d1      	strbne	r1, [r2, #11]
			disable = 1;
    2e3e:	2201      	movne	r2, #1
    2e40:	9201      	strne	r2, [sp, #4]
		if (mft[callee_id][caller_id].enable_req !=
    2e42:	2230      	movs	r2, #48	; 0x30
    2e44:	436a      	muls	r2, r5
    2e46:	fb03 2304 	mla	r3, r3, r4, r2
    2e4a:	4433      	add	r3, r6
    2e4c:	7a1a      	ldrb	r2, [r3, #8]
    2e4e:	7a59      	ldrb	r1, [r3, #9]
    2e50:	4291      	cmp	r1, r2
			mft[callee_id][caller_id].enable_ack =
    2e52:	bf1c      	itt	ne
    2e54:	725a      	strbne	r2, [r3, #9]
			enable = 1;
    2e56:	f04f 0801 	movne.w	r8, #1
    2e5a:	e7b9      	b.n	2dd0 <mayfly_run+0x1c>
			req = m->_req;
    2e5c:	9b07      	ldr	r3, [sp, #28]
    2e5e:	781f      	ldrb	r7, [r3, #0]
			state = (req - m->_ack) & 0x03;
    2e60:	785a      	ldrb	r2, [r3, #1]
    2e62:	1abf      	subs	r7, r7, r2
    2e64:	f007 0703 	and.w	r7, r7, #3
			if (state == 1) {
    2e68:	2f01      	cmp	r7, #1
    2e6a:	d104      	bne.n	2e76 <mayfly_run+0xc2>
				m->_ack--;
    2e6c:	3a01      	subs	r2, #1
    2e6e:	705a      	strb	r2, [r3, #1]
				m->fp(m->param);
    2e70:	6898      	ldr	r0, [r3, #8]
    2e72:	68da      	ldr	r2, [r3, #12]
    2e74:	4790      	blx	r2
			req = m->_req;
    2e76:	9a07      	ldr	r2, [sp, #28]
    2e78:	7813      	ldrb	r3, [r2, #0]
			if (((req - m->_ack) & 0x03) != 1) {
    2e7a:	7852      	ldrb	r2, [r2, #1]
			req = m->_req;
    2e7c:	b2db      	uxtb	r3, r3
			if (((req - m->_ack) & 0x03) != 1) {
    2e7e:	1a9a      	subs	r2, r3, r2
    2e80:	f002 0203 	and.w	r2, r2, #3
    2e84:	2a01      	cmp	r2, #1
    2e86:	9305      	str	r3, [sp, #20]
    2e88:	d00d      	beq.n	2ea6 <mayfly_run+0xf2>
				memq_dequeue(mft[callee_id][caller_id].tail,
    2e8a:	9b02      	ldr	r3, [sp, #8]
    2e8c:	9903      	ldr	r1, [sp, #12]
    2e8e:	fb09 3005 	mla	r0, r9, r5, r3
    2e92:	4430      	add	r0, r6
    2e94:	2200      	movs	r2, #0
    2e96:	6840      	ldr	r0, [r0, #4]
    2e98:	f7ff fedd 	bl	2c56 <memq_dequeue>
				m->_link = link;
    2e9c:	9a07      	ldr	r2, [sp, #28]
				m->_ack = req;
    2e9e:	9b05      	ldr	r3, [sp, #20]
				m->_link = link;
    2ea0:	f8c2 a004 	str.w	sl, [r2, #4]
				m->_ack = req;
    2ea4:	7053      	strb	r3, [r2, #1]
			link = memq_peek(mft[callee_id][caller_id].head,
    2ea6:	9b02      	ldr	r3, [sp, #8]
    2ea8:	fb09 3305 	mla	r3, r9, r5, r3
    2eac:	18f1      	adds	r1, r6, r3
    2eae:	465a      	mov	r2, fp
    2eb0:	6849      	ldr	r1, [r1, #4]
    2eb2:	58f0      	ldr	r0, [r6, r3]
    2eb4:	f7ff fec7 	bl	2c46 <memq_peek>
			if (state == 1) {
    2eb8:	2f01      	cmp	r7, #1
			link = memq_peek(mft[callee_id][caller_id].head,
    2eba:	4682      	mov	sl, r0
			if (state == 1) {
    2ebc:	d1b1      	bne.n	2e22 <mayfly_run+0x6e>
				if (caller_id || link) {
    2ebe:	b90c      	cbnz	r4, 2ec4 <mayfly_run+0x110>
    2ec0:	2800      	cmp	r0, #0
    2ec2:	d0b1      	beq.n	2e28 <mayfly_run+0x74>
					mayfly_pend(callee_id, callee_id);
    2ec4:	4629      	mov	r1, r5
    2ec6:	4628      	mov	r0, r5
    2ec8:	f006 fcba 	bl	9840 <mayfly_pend>
	}
}
    2ecc:	b009      	add	sp, #36	; 0x24
    2ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2ed2:	bf00      	nop
    2ed4:	200001c0 	.word	0x200001c0

00002ed8 <util_ones_count_get>:

#include <zephyr/types.h>
#include "util.h"

u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
    2ed8:	b510      	push	{r4, lr}
    2eda:	1e42      	subs	r2, r0, #1
	u8_t one_count = 0;
    2edc:	2000      	movs	r0, #0

	while (octets_len--) {
    2ede:	3901      	subs	r1, #1
    2ee0:	b2c9      	uxtb	r1, r1
    2ee2:	29ff      	cmp	r1, #255	; 0xff
    2ee4:	d100      	bne.n	2ee8 <util_ones_count_get+0x10>
		}
		octets++;
	}

	return one_count;
}
    2ee6:	bd10      	pop	{r4, pc}
		bite = *octets;
    2ee8:	f812 3f01 	ldrb.w	r3, [r2, #1]!
		while (bite) {
    2eec:	2b00      	cmp	r3, #0
    2eee:	d0f6      	beq.n	2ede <util_ones_count_get+0x6>
			bite &= (bite - 1);
    2ef0:	1e5c      	subs	r4, r3, #1
			one_count++;
    2ef2:	3001      	adds	r0, #1
			bite &= (bite - 1);
    2ef4:	4023      	ands	r3, r4
			one_count++;
    2ef6:	b2c0      	uxtb	r0, r0
    2ef8:	e7f8      	b.n	2eec <util_ones_count_get+0x14>

00002efa <ticker_dequeue>:

	return id;
}

static u32_t ticker_dequeue(struct ticker_instance *instance, u8_t id)
{
    2efa:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t current;
	u32_t total;

	/* find the ticker's position in ticker list */
	node = &instance->node[0];
	previous = instance->ticker_id_head;
    2efc:	7f43      	ldrb	r3, [r0, #29]
	node = &instance->node[0];
    2efe:	6805      	ldr	r5, [r0, #0]
	current = previous;
    2f00:	461a      	mov	r2, r3
	total = 0;
    2f02:	2400      	movs	r4, #0
	ticker_current = 0;
	while (current != TICKER_NULL) {
    2f04:	2aff      	cmp	r2, #255	; 0xff
    2f06:	d101      	bne.n	2f0c <ticker_dequeue+0x12>
		current = ticker_current->next;
	}

	/* ticker not in active list */
	if (current == TICKER_NULL) {
		return 0;
    2f08:	2000      	movs	r0, #0
    2f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ticker_current = &node[current];
    2f0c:	eb02 0782 	add.w	r7, r2, r2, lsl #2
		if (current == id) {
    2f10:	428a      	cmp	r2, r1
		ticker_current = &node[current];
    2f12:	eb05 06c7 	add.w	r6, r5, r7, lsl #3
    2f16:	f815 7037 	ldrb.w	r7, [r5, r7, lsl #3]
		if (current == id) {
    2f1a:	d004      	beq.n	2f26 <ticker_dequeue+0x2c>
		total += ticker_current->ticks_to_expire;
    2f1c:	68b3      	ldr	r3, [r6, #8]
    2f1e:	441c      	add	r4, r3
		current = ticker_current->next;
    2f20:	4613      	mov	r3, r2
    2f22:	463a      	mov	r2, r7
    2f24:	e7ee      	b.n	2f04 <ticker_dequeue+0xa>
	}

	/* ticker is the first in the list */
	if (previous == current) {
    2f26:	4293      	cmp	r3, r2
    2f28:	d100      	bne.n	2f2c <ticker_dequeue+0x32>
		instance->ticker_id_head = ticker_current->next;
    2f2a:	7747      	strb	r7, [r0, #29]
	timeout = ticker_current->ticks_to_expire;

	/* link previous ticker with next of this ticker
	 * i.e. removing the ticker from list
	 */
	node[previous].next = ticker_current->next;
    2f2c:	b21b      	sxth	r3, r3
    2f2e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2f32:	7832      	ldrb	r2, [r6, #0]
	timeout = ticker_current->ticks_to_expire;
    2f34:	68b0      	ldr	r0, [r6, #8]
	node[previous].next = ticker_current->next;
    2f36:	f805 2033 	strb.w	r2, [r5, r3, lsl #3]

	/* if this is not the last ticker, increment the
	 * next ticker by this ticker timeout
	 */
	if (ticker_current->next != TICKER_NULL) {
    2f3a:	7833      	ldrb	r3, [r6, #0]
    2f3c:	2bff      	cmp	r3, #255	; 0xff
    2f3e:	d006      	beq.n	2f4e <ticker_dequeue+0x54>
		node[ticker_current->next].ticks_to_expire += timeout;
    2f40:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2f44:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    2f48:	689a      	ldr	r2, [r3, #8]
    2f4a:	4402      	add	r2, r0
    2f4c:	609a      	str	r2, [r3, #8]
	}

	return (total + timeout);
    2f4e:	4420      	add	r0, r4
    2f50:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002f52 <ticks_to_expire_prep>:
			   instance);
}

static void ticks_to_expire_prep(struct ticker_node *ticker,
				 u32_t ticks_current, u32_t ticks_at_start)
{
    2f52:	b530      	push	{r4, r5, lr}
	u32_t ticks_to_expire = ticker->ticks_to_expire;
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    2f54:	1a55      	subs	r5, r2, r1
    2f56:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
	u32_t ticks_to_expire = ticker->ticks_to_expire;
    2f5a:	6883      	ldr	r3, [r0, #8]
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
    2f5c:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    2f5e:	d109      	bne.n	2f74 <ticks_to_expire_prep+0x22>
	return cntr_cnt_get();
}

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    2f60:	f025 427f 	bic.w	r2, r5, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    2f64:	441a      	add	r2, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
    2f66:	42a2      	cmp	r2, r4
    2f68:	d90e      	bls.n	2f88 <ticks_to_expire_prep+0x36>
		ticks_to_expire -= ticks_to_expire_minus;
    2f6a:	1b12      	subs	r2, r2, r4
		ticks_to_expire_minus = 0;
    2f6c:	2400      	movs	r4, #0
	ticker->ticks_to_expire = ticks_to_expire;
    2f6e:	6082      	str	r2, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    2f70:	6144      	str	r4, [r0, #20]
    2f72:	bd30      	pop	{r4, r5, pc}
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    2f74:	1a8a      	subs	r2, r1, r2
    2f76:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    2f7a:	4293      	cmp	r3, r2
    2f7c:	d901      	bls.n	2f82 <ticks_to_expire_prep+0x30>
			ticks_to_expire -= delta_current_start;
    2f7e:	1a9a      	subs	r2, r3, r2
    2f80:	e7f1      	b.n	2f66 <ticks_to_expire_prep+0x14>
    2f82:	4422      	add	r2, r4
			ticks_to_expire_minus +=
    2f84:	1ad4      	subs	r4, r2, r3
			ticks_to_expire = 0;
    2f86:	2200      	movs	r2, #0
		ticks_to_expire_minus -= ticks_to_expire;
    2f88:	1aa4      	subs	r4, r4, r2
		ticks_to_expire = 0;
    2f8a:	2200      	movs	r2, #0
    2f8c:	e7ef      	b.n	2f6e <ticks_to_expire_prep+0x1c>

00002f8e <ticker_job_op_cb>:
{
    2f8e:	4603      	mov	r3, r0
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    2f90:	2200      	movs	r2, #0
    2f92:	701a      	strb	r2, [r3, #0]
	if (user_op->fp_op_func) {
    2f94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	user_op->status = status;
    2f96:	6259      	str	r1, [r3, #36]	; 0x24
{
    2f98:	4608      	mov	r0, r1
	if (user_op->fp_op_func) {
    2f9a:	b10a      	cbz	r2, 2fa0 <ticker_job_op_cb+0x12>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    2f9c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    2f9e:	4710      	bx	r2
    2fa0:	4770      	bx	lr

00002fa2 <ticker_worker>:
{
    2fa2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (instance->job_guard) {
    2fa6:	7f85      	ldrb	r5, [r0, #30]
	instance->worker_trigger = 1;
    2fa8:	2301      	movs	r3, #1
{
    2faa:	4604      	mov	r4, r0
	instance->worker_trigger = 1;
    2fac:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
    2fae:	2d00      	cmp	r5, #0
    2fb0:	d14c      	bne.n	304c <ticker_worker+0xaa>
	if (instance->ticker_id_head == TICKER_NULL) {
    2fb2:	7f43      	ldrb	r3, [r0, #29]
    2fb4:	2bff      	cmp	r3, #255	; 0xff
    2fb6:	d102      	bne.n	2fbe <ticker_worker+0x1c>
		instance->worker_trigger = 0;
    2fb8:	77c5      	strb	r5, [r0, #31]
		return;
    2fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
    2fbe:	f005 ffb9 	bl	8f34 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    2fc2:	6967      	ldr	r7, [r4, #20]
	ticker_id_head = instance->ticker_id_head;
    2fc4:	7f66      	ldrb	r6, [r4, #29]
	node = &instance->node[0];
    2fc6:	f8d4 8000 	ldr.w	r8, [r4]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    2fca:	1bc7      	subs	r7, r0, r7
    2fcc:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
	while (ticker_id_head != TICKER_NULL) {
    2fd0:	2eff      	cmp	r6, #255	; 0xff
    2fd2:	d006      	beq.n	2fe2 <ticker_worker+0x40>
		ticker = &node[ticker_id_head];
    2fd4:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    2fd8:	eb08 01c6 	add.w	r1, r8, r6, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    2fdc:	688b      	ldr	r3, [r1, #8]
		if (ticks_elapsed < ticks_to_expire) {
    2fde:	429f      	cmp	r7, r3
    2fe0:	d218      	bcs.n	3014 <ticker_worker+0x72>
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
    2fe2:	7aa2      	ldrb	r2, [r4, #10]
    2fe4:	7ae3      	ldrb	r3, [r4, #11]
    2fe6:	4293      	cmp	r3, r2
    2fe8:	d105      	bne.n	2ff6 <ticker_worker+0x54>
		last = instance->ticks_elapsed_last + 1;
    2fea:	3301      	adds	r3, #1
    2fec:	b2db      	uxtb	r3, r3
			last = 0;
    2fee:	2b02      	cmp	r3, #2
    2ff0:	bf08      	it	eq
    2ff2:	2300      	moveq	r3, #0
		instance->ticks_elapsed_last = last;
    2ff4:	72e3      	strb	r3, [r4, #11]
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    2ff6:	7ae3      	ldrb	r3, [r4, #11]
    2ff8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    2ffc:	2201      	movs	r2, #1
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    2ffe:	60dd      	str	r5, [r3, #12]
	instance->worker_trigger = 0;
    3000:	2300      	movs	r3, #0
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    3002:	6a65      	ldr	r5, [r4, #36]	; 0x24
	instance->worker_trigger = 0;
    3004:	77e3      	strb	r3, [r4, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    3006:	46ac      	mov	ip, r5
    3008:	4623      	mov	r3, r4
    300a:	2104      	movs	r1, #4
    300c:	2003      	movs	r0, #3
}
    300e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    3012:	4760      	bx	ip
		ticks_elapsed -= ticks_to_expire;
    3014:	1aff      	subs	r7, r7, r3
		ticks_expired += ticks_to_expire;
    3016:	441d      	add	r5, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    3018:	788a      	ldrb	r2, [r1, #2]
    301a:	784b      	ldrb	r3, [r1, #1]
		ticker_id_head = ticker->next;
    301c:	f818 6036 	ldrb.w	r6, [r8, r6, lsl #3]
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    3020:	1a9b      	subs	r3, r3, r2
    3022:	b2db      	uxtb	r3, r3
    3024:	2b01      	cmp	r3, #1
    3026:	d1d3      	bne.n	2fd0 <ticker_worker+0x2e>
		if (ticker->timeout_func) {
    3028:	f8d1 900c 	ldr.w	r9, [r1, #12]
		ticker->ack--;
    302c:	3a01      	subs	r2, #1
    302e:	708a      	strb	r2, [r1, #2]
		if (ticker->timeout_func) {
    3030:	f1b9 0f00 	cmp.w	r9, #0
    3034:	d0cc      	beq.n	2fd0 <ticker_worker+0x2e>
					   ticks_expired -
    3036:	6948      	ldr	r0, [r1, #20]
    3038:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
    303a:	8bca      	ldrh	r2, [r1, #30]
					   ticks_expired -
    303c:	1a28      	subs	r0, r5, r0
    303e:	4418      	add	r0, r3
			ticker->timeout_func(ticks_at_expire,
    3040:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3044:	690b      	ldr	r3, [r1, #16]
    3046:	6a49      	ldr	r1, [r1, #36]	; 0x24
    3048:	47c8      	blx	r9
    304a:	e7c1      	b.n	2fd0 <ticker_worker+0x2e>
    304c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00003050 <ticker_job>:
{
    3050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->worker_trigger) {
    3054:	7fc2      	ldrb	r2, [r0, #31]
{
    3056:	b093      	sub	sp, #76	; 0x4c
    3058:	4683      	mov	fp, r0
	if (instance->worker_trigger) {
    305a:	2a00      	cmp	r2, #0
    305c:	f040 83b5 	bne.w	37ca <ticker_job+0x77a>
	ticks_previous = instance->ticks_current;
    3060:	6943      	ldr	r3, [r0, #20]
    3062:	9305      	str	r3, [sp, #20]
	instance->job_guard = 1;
    3064:	2101      	movs	r1, #1
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    3066:	7a83      	ldrb	r3, [r0, #10]
	instance->job_guard = 1;
    3068:	7781      	strb	r1, [r0, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    306a:	7ac0      	ldrb	r0, [r0, #11]
    306c:	4298      	cmp	r0, r3
    306e:	f000 808f 	beq.w	3190 <ticker_job+0x140>
		first = instance->ticks_elapsed_first + 1;
    3072:	440b      	add	r3, r1
    3074:	b2db      	uxtb	r3, r3
			first = 0;
    3076:	2b02      	cmp	r3, #2
    3078:	bf08      	it	eq
    307a:	2300      	moveq	r3, #0
		instance->ticks_elapsed_first = first;
    307c:	f88b 300a 	strb.w	r3, [fp, #10]
		ticks_elapsed =
    3080:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
		flag_elapsed = 1;
    3084:	9101      	str	r1, [sp, #4]
		ticks_elapsed =
    3086:	f8d3 800c 	ldr.w	r8, [r3, #12]
		instance->ticks_current += ticks_elapsed;
    308a:	9b05      	ldr	r3, [sp, #20]
    308c:	4443      	add	r3, r8
		instance->ticks_current &= 0x00FFFFFF;
    308e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    3092:	f8cb 3014 	str.w	r3, [fp, #20]
	ticker_id_old_head = instance->ticker_id_head;
    3096:	f89b 301d 	ldrb.w	r3, [fp, #29]
    309a:	9303      	str	r3, [sp, #12]
	node = &instance->node[0];
    309c:	f8db 3000 	ldr.w	r3, [fp]
    30a0:	9304      	str	r3, [sp, #16]
	users = &instance->user[0];
    30a2:	f8db 3004 	ldr.w	r3, [fp, #4]
    30a6:	930b      	str	r3, [sp, #44]	; 0x2c
    30a8:	f89b 3009 	ldrb.w	r3, [fp, #9]
    30ac:	3b01      	subs	r3, #1
    30ae:	b2db      	uxtb	r3, r3
    30b0:	9302      	str	r3, [sp, #8]
	pending = 0;
    30b2:	2300      	movs	r3, #0
    30b4:	9307      	str	r3, [sp, #28]
	insert_head = TICKER_NULL;
    30b6:	f04f 0aff 	mov.w	sl, #255	; 0xff
	while (count_user--) {
    30ba:	9b02      	ldr	r3, [sp, #8]
    30bc:	2bff      	cmp	r3, #255	; 0xff
    30be:	d16a      	bne.n	3196 <ticker_job+0x146>
	if (instance->ticker_id_head != ticker_id_old_head) {
    30c0:	f89b 301d 	ldrb.w	r3, [fp, #29]
	flag_compare_update = 0;
    30c4:	9a03      	ldr	r2, [sp, #12]
    30c6:	1a9b      	subs	r3, r3, r2
    30c8:	bf18      	it	ne
    30ca:	2301      	movne	r3, #1
    30cc:	9302      	str	r3, [sp, #8]
	if (flag_elapsed) {
    30ce:	9b01      	ldr	r3, [sp, #4]
    30d0:	b1e3      	cbz	r3, 310c <ticker_job+0xbc>
	node = &instance->node[0];
    30d2:	f8db 3000 	ldr.w	r3, [fp]
    30d6:	9304      	str	r3, [sp, #16]
	ticks_expired = 0;
    30d8:	f04f 0900 	mov.w	r9, #0
	while (instance->ticker_id_head != TICKER_NULL) {
    30dc:	f89b 601d 	ldrb.w	r6, [fp, #29]
    30e0:	2eff      	cmp	r6, #255	; 0xff
    30e2:	d00c      	beq.n	30fe <ticker_job+0xae>
		ticker = &node[id_expired];
    30e4:	b237      	sxth	r7, r6
    30e6:	9b04      	ldr	r3, [sp, #16]
    30e8:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    30ec:	eb03 04c7 	add.w	r4, r3, r7, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    30f0:	68a5      	ldr	r5, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    30f2:	4545      	cmp	r5, r8
    30f4:	f240 8136 	bls.w	3364 <ticker_job+0x314>
			ticker->ticks_to_expire -= ticks_elapsed;
    30f8:	eba5 0508 	sub.w	r5, r5, r8
    30fc:	60a5      	str	r5, [r4, #8]
			flag_compare_update = 1;
    30fe:	9b02      	ldr	r3, [sp, #8]
    3100:	9a01      	ldr	r2, [sp, #4]
    3102:	9903      	ldr	r1, [sp, #12]
    3104:	42b1      	cmp	r1, r6
    3106:	bf18      	it	ne
    3108:	4613      	movne	r3, r2
    310a:	9302      	str	r3, [sp, #8]
	node = &instance->node[0];
    310c:	f8db 3000 	ldr.w	r3, [fp]
    3110:	9308      	str	r3, [sp, #32]
	users = &instance->user[0];
    3112:	f8db 3004 	ldr.w	r3, [fp, #4]
    3116:	9310      	str	r3, [sp, #64]	; 0x40
    3118:	f89b 3009 	ldrb.w	r3, [fp, #9]
    311c:	3b01      	subs	r3, #1
    311e:	b2db      	uxtb	r3, r3
    3120:	9301      	str	r3, [sp, #4]
	while (count_user--) {
    3122:	9b01      	ldr	r3, [sp, #4]
    3124:	2bff      	cmp	r3, #255	; 0xff
    3126:	f040 8170 	bne.w	340a <ticker_job+0x3ba>
	if (instance->ticker_id_head != ticker_id_old_head) {
    312a:	f89b 301d 	ldrb.w	r3, [fp, #29]
    312e:	9a03      	ldr	r2, [sp, #12]
    3130:	4293      	cmp	r3, r2
	if (!pending) {
    3132:	9b07      	ldr	r3, [sp, #28]
	if (instance->ticker_id_head != ticker_id_old_head) {
    3134:	f040 8340 	bne.w	37b8 <ticker_job+0x768>
	if (!pending) {
    3138:	b95b      	cbnz	r3, 3152 <ticker_job+0x102>
    313a:	f89b 4009 	ldrb.w	r4, [fp, #9]
	users = &instance->user[0];
    313e:	f8db 3004 	ldr.w	r3, [fp, #4]
    3142:	9301      	str	r3, [sp, #4]
    3144:	3c01      	subs	r4, #1
    3146:	b2e4      	uxtb	r4, r4
		uop->status = TICKER_STATUS_SUCCESS;
    3148:	f04f 0800 	mov.w	r8, #0
	while (count_user--) {
    314c:	2cff      	cmp	r4, #255	; 0xff
    314e:	f040 82a0 	bne.w	3692 <ticker_job+0x642>
	instance->job_guard = 0;
    3152:	2300      	movs	r3, #0
    3154:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
    3158:	9b02      	ldr	r3, [sp, #8]
    315a:	b14b      	cbz	r3, 3170 <ticker_job+0x120>
	if (instance->ticker_id_head == TICKER_NULL) {
    315c:	f89b 301d 	ldrb.w	r3, [fp, #29]
    3160:	2bff      	cmp	r3, #255	; 0xff
    3162:	f040 82e9 	bne.w	3738 <ticker_job+0x6e8>
		if (cntr_stop() == 0) {
    3166:	f005 fecd 	bl	8f04 <cntr_stop>
    316a:	b908      	cbnz	r0, 3170 <ticker_job+0x120>
			instance->ticks_slot_previous = 0;
    316c:	f8cb 0018 	str.w	r0, [fp, #24]
	if (instance->worker_trigger) {
    3170:	f89b 301f 	ldrb.w	r3, [fp, #31]
    3174:	2b00      	cmp	r3, #0
    3176:	f000 8328 	beq.w	37ca <ticker_job+0x77a>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    317a:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    317e:	465b      	mov	r3, fp
    3180:	2201      	movs	r2, #1
    3182:	2103      	movs	r1, #3
    3184:	2004      	movs	r0, #4
    3186:	46a4      	mov	ip, r4
}
    3188:	b013      	add	sp, #76	; 0x4c
    318a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    318e:	4760      	bx	ip
		flag_elapsed = 0;
    3190:	9201      	str	r2, [sp, #4]
		ticks_elapsed = 0;
    3192:	4690      	mov	r8, r2
    3194:	e77f      	b.n	3096 <ticker_job+0x46>
		user = &users[count_user];
    3196:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3198:	9a02      	ldr	r2, [sp, #8]
    319a:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
		user_ops = &user->user_op[0];
    319e:	687b      	ldr	r3, [r7, #4]
    31a0:	9306      	str	r3, [sp, #24]
		while (user->middle != user->last) {
    31a2:	78f9      	ldrb	r1, [r7, #3]
    31a4:	78be      	ldrb	r6, [r7, #2]
    31a6:	428e      	cmp	r6, r1
    31a8:	f000 80d7 	beq.w	335a <ticker_job+0x30a>
			user_op = &user_ops[user->middle];
    31ac:	9b06      	ldr	r3, [sp, #24]
			if (middle == user->count_user_op) {
    31ae:	7838      	ldrb	r0, [r7, #0]
			user_op = &user_ops[user->middle];
    31b0:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    31b4:	0112      	lsls	r2, r2, #4
    31b6:	189d      	adds	r5, r3, r2
			middle = user->middle + 1;
    31b8:	1c73      	adds	r3, r6, #1
    31ba:	b2db      	uxtb	r3, r3
				middle = 0;
    31bc:	4298      	cmp	r0, r3
    31be:	bf08      	it	eq
    31c0:	2300      	moveq	r3, #0
			user->middle = middle;
    31c2:	70bb      	strb	r3, [r7, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    31c4:	9b06      	ldr	r3, [sp, #24]
    31c6:	5c9a      	ldrb	r2, [r3, r2]
    31c8:	2a03      	cmp	r2, #3
    31ca:	d9eb      	bls.n	31a4 <ticker_job+0x154>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    31cc:	2a05      	cmp	r2, #5
    31ce:	d817      	bhi.n	3200 <ticker_job+0x1b0>
			ticker = &node[user_op->id];
    31d0:	7869      	ldrb	r1, [r5, #1]
    31d2:	eb01 0381 	add.w	r3, r1, r1, lsl #2
    31d6:	930a      	str	r3, [sp, #40]	; 0x28
    31d8:	980a      	ldr	r0, [sp, #40]	; 0x28
    31da:	9b04      	ldr	r3, [sp, #16]
    31dc:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
			state = (ticker->req - ticker->ack) & 0xff;
    31e0:	7863      	ldrb	r3, [r4, #1]
    31e2:	78a0      	ldrb	r0, [r4, #2]
    31e4:	1a1b      	subs	r3, r3, r0
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    31e6:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    31ea:	d009      	beq.n	3200 <ticker_job+0x1b0>
			    (state == 0) ||
    31ec:	2a04      	cmp	r2, #4
    31ee:	d10c      	bne.n	320a <ticker_job+0x1ba>
			     (user_op->params.update.ticks_drift_plus == 0) &&
    31f0:	686a      	ldr	r2, [r5, #4]
    31f2:	b952      	cbnz	r2, 320a <ticker_job+0x1ba>
			     (user_op->params.update.ticks_slot_plus == 0) &&
    31f4:	68aa      	ldr	r2, [r5, #8]
    31f6:	b942      	cbnz	r2, 320a <ticker_job+0x1ba>
			     (user_op->params.update.lazy == 0) &&
    31f8:	68ea      	ldr	r2, [r5, #12]
    31fa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    31fe:	d104      	bne.n	320a <ticker_job+0x1ba>
				ticker_job_op_cb(user_op,
    3200:	2101      	movs	r1, #1
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    3202:	4628      	mov	r0, r5
    3204:	f7ff fec3 	bl	2f8e <ticker_job_op_cb>
    3208:	e7cb      	b.n	31a2 <ticker_job+0x152>
			if (state == 1) {
    320a:	2b01      	cmp	r3, #1
    320c:	f040 809b 	bne.w	3346 <ticker_job+0x2f6>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    3210:	4658      	mov	r0, fp
    3212:	f7ff fe72 	bl	2efa <ticker_dequeue>
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    3216:	782b      	ldrb	r3, [r5, #0]
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    3218:	60a0      	str	r0, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    321a:	2b04      	cmp	r3, #4
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    321c:	4606      	mov	r6, r0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    321e:	f040 8084 	bne.w	332a <ticker_job+0x2da>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    3222:	f8db 3014 	ldr.w	r3, [fp, #20]
    3226:	9308      	str	r3, [sp, #32]
	ticks_now = cntr_cnt_get();
    3228:	f005 fe84 	bl	8f34 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    322c:	9b08      	ldr	r3, [sp, #32]
	ticks_now = cntr_cnt_get();
    322e:	9009      	str	r0, [sp, #36]	; 0x24
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    3230:	1ac3      	subs	r3, r0, r3
    3232:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    3236:	4443      	add	r3, r8
	if (ticks_to_expire > ticks_elapsed) {
    3238:	429e      	cmp	r6, r3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    323a:	4602      	mov	r2, r0
		ticker->ticks_to_expire_minus += ticks_elapsed -
    323c:	bf9e      	ittt	ls
    323e:	6962      	ldrls	r2, [r4, #20]
    3240:	1b92      	subls	r2, r2, r6
    3242:	189b      	addls	r3, r3, r2
	if ((ticker->ticks_periodic != 0) &&
    3244:	6862      	ldr	r2, [r4, #4]
		ticker->ticks_to_expire_minus += ticks_elapsed -
    3246:	bf96      	itet	ls
    3248:	6163      	strls	r3, [r4, #20]
		ticks_to_expire -= ticks_elapsed;
    324a:	1af3      	subhi	r3, r6, r3
		ticks_to_expire = 0;
    324c:	2300      	movls	r3, #0
	if ((ticker->ticks_periodic != 0) &&
    324e:	b18a      	cbz	r2, 3274 <ticker_job+0x224>
	    (user_op->params.update.lazy != 0)) {
    3250:	89a9      	ldrh	r1, [r5, #12]
	if ((ticker->ticks_periodic != 0) &&
    3252:	b179      	cbz	r1, 3274 <ticker_job+0x224>
		user_op->params.update.lazy--;
    3254:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
    3258:	fa1f fe8e 	uxth.w	lr, lr
    325c:	f8a5 e00c 	strh.w	lr, [r5, #12]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    3260:	429a      	cmp	r2, r3
    3262:	d32b      	bcc.n	32bc <ticker_job+0x26c>
		ticker->remainder_current -= 30517578UL;
    3264:	f8df 9324 	ldr.w	r9, [pc, #804]	; 358c <ticker_job+0x53c>
		while (ticker->lazy_current < user_op->params.update.lazy) {
    3268:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    326c:	45e6      	cmp	lr, ip
    326e:	d847      	bhi.n	3300 <ticker_job+0x2b0>
		ticker->lazy_periodic = user_op->params.update.lazy;
    3270:	f8a4 e01c 	strh.w	lr, [r4, #28]
				  user_op->params.update.ticks_drift_plus;
    3274:	88aa      	ldrh	r2, [r5, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    3276:	9908      	ldr	r1, [sp, #32]
	ticker->ticks_to_expire = ticks_to_expire +
    3278:	4413      	add	r3, r2
    327a:	60a3      	str	r3, [r4, #8]
				user_op->params.update.ticks_drift_minus;
    327c:	88ea      	ldrh	r2, [r5, #6]
	ticker->ticks_to_expire_minus +=
    327e:	6963      	ldr	r3, [r4, #20]
    3280:	4413      	add	r3, r2
    3282:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    3284:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3286:	4620      	mov	r0, r4
    3288:	f7ff fe63 	bl	2f52 <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    328c:	69a2      	ldr	r2, [r4, #24]
    328e:	892b      	ldrh	r3, [r5, #8]
    3290:	4413      	add	r3, r2
    3292:	61a3      	str	r3, [r4, #24]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    3294:	896a      	ldrh	r2, [r5, #10]
    3296:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
    3298:	bf8c      	ite	hi
    329a:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0;
    329c:	2300      	movls	r3, #0
    329e:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0) {
    32a0:	7bab      	ldrb	r3, [r5, #14]
    32a2:	b103      	cbz	r3, 32a6 <ticker_job+0x256>
		ticker->force = user_op->params.update.force;
    32a4:	70e3      	strb	r3, [r4, #3]
	ticker->next = *insert_head;
    32a6:	9b04      	ldr	r3, [sp, #16]
    32a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    32aa:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
		ticker->req++;
    32ae:	7863      	ldrb	r3, [r4, #1]
	*insert_head = user_op->id;
    32b0:	f895 a001 	ldrb.w	sl, [r5, #1]
		ticker->req++;
    32b4:	3301      	adds	r3, #1
    32b6:	7063      	strb	r3, [r4, #1]
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    32b8:	2100      	movs	r1, #0
    32ba:	e7a2      	b.n	3202 <ticker_job+0x1b2>
		       (ticker->lazy_current > user_op->params.update.lazy)) {
    32bc:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    32c0:	45e6      	cmp	lr, ip
    32c2:	d2cf      	bcs.n	3264 <ticker_job+0x214>
	if ((ticker->remainder_current >= BIT(31)) ||
    32c4:	6a61      	ldr	r1, [r4, #36]	; 0x24
    32c6:	4eaf      	ldr	r6, [pc, #700]	; (3584 <ticker_job+0x534>)
    32c8:	48af      	ldr	r0, [pc, #700]	; (3588 <ticker_job+0x538>)
    32ca:	198e      	adds	r6, r1, r6
    32cc:	4286      	cmp	r6, r0
		ticker->remainder_current += 30517578UL;
    32ce:	bf81      	itttt	hi
    32d0:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
    32d4:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
    32d8:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
    32dc:	6261      	strhi	r1, [r4, #36]	; 0x24
	ticker->remainder_current -= ticker->remainder_periodic;
    32de:	6a66      	ldr	r6, [r4, #36]	; 0x24
    32e0:	6a21      	ldr	r1, [r4, #32]
		decrement++;
    32e2:	bf8c      	ite	hi
    32e4:	f04f 0901 	movhi.w	r9, #1
	u8_t decrement = 0;
    32e8:	f04f 0900 	movls.w	r9, #0
	ticker->remainder_current -= ticker->remainder_periodic;
    32ec:	1a76      	subs	r6, r6, r1
			ticks_to_expire -= ticker->ticks_periodic +
    32ee:	4491      	add	r9, r2
			ticker->lazy_current--;
    32f0:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
	ticker->remainder_current -= ticker->remainder_periodic;
    32f4:	6266      	str	r6, [r4, #36]	; 0x24
			ticks_to_expire -= ticker->ticks_periodic +
    32f6:	eba3 0309 	sub.w	r3, r3, r9
			ticker->lazy_current--;
    32fa:	f8a4 c01e 	strh.w	ip, [r4, #30]
    32fe:	e7af      	b.n	3260 <ticker_job+0x210>
	ticker->remainder_current += ticker->remainder_periodic;
    3300:	6a66      	ldr	r6, [r4, #36]	; 0x24
    3302:	6a21      	ldr	r1, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    3304:	48a0      	ldr	r0, [pc, #640]	; (3588 <ticker_job+0x538>)
	ticker->remainder_current += ticker->remainder_periodic;
    3306:	440e      	add	r6, r1
	if ((ticker->remainder_current < BIT(31)) &&
    3308:	499e      	ldr	r1, [pc, #632]	; (3584 <ticker_job+0x534>)
    330a:	1871      	adds	r1, r6, r1
    330c:	4281      	cmp	r1, r0
	return 0;
    330e:	bf8e      	itee	hi
    3310:	2100      	movhi	r1, #0
		return 1;
    3312:	2101      	movls	r1, #1
		ticker->remainder_current -= 30517578UL;
    3314:	444e      	addls	r6, r9
			ticks_to_expire += ticker->ticks_periodic +
    3316:	4411      	add	r1, r2
			ticker->lazy_current++;
    3318:	f10c 0c01 	add.w	ip, ip, #1
	ticker->remainder_current += ticker->remainder_periodic;
    331c:	bf8c      	ite	hi
    331e:	6266      	strhi	r6, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
    3320:	6266      	strls	r6, [r4, #36]	; 0x24
			ticks_to_expire += ticker->ticks_periodic +
    3322:	440b      	add	r3, r1
			ticker->lazy_current++;
    3324:	f8a4 c01e 	strh.w	ip, [r4, #30]
    3328:	e79e      	b.n	3268 <ticker_job+0x218>
		ticker->req = ticker->ack;
    332a:	78a3      	ldrb	r3, [r4, #2]
    332c:	7063      	strb	r3, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
    332e:	786b      	ldrb	r3, [r5, #1]
    3330:	f89b 201c 	ldrb.w	r2, [fp, #28]
    3334:	429a      	cmp	r2, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    3336:	bf01      	itttt	eq
    3338:	23ff      	moveq	r3, #255	; 0xff
    333a:	f88b 301c 	strbeq.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
    333e:	2300      	moveq	r3, #0
    3340:	f8cb 3018 	streq.w	r3, [fp, #24]
    3344:	e7b8      	b.n	32b8 <ticker_job+0x268>
				instance->sched_cb(TICKER_CALL_ID_JOB,
    3346:	2104      	movs	r1, #4
    3348:	465b      	mov	r3, fp
    334a:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    334e:	2201      	movs	r2, #1
    3350:	4608      	mov	r0, r1
    3352:	47a0      	blx	r4
				pending = 1;
    3354:	2301      	movs	r3, #1
				user->middle = prev;
    3356:	70be      	strb	r6, [r7, #2]
				pending = 1;
    3358:	9307      	str	r3, [sp, #28]
    335a:	9b02      	ldr	r3, [sp, #8]
    335c:	3b01      	subs	r3, #1
    335e:	b2db      	uxtb	r3, r3
    3360:	9302      	str	r3, [sp, #8]
    3362:	e6aa      	b.n	30ba <ticker_job+0x6a>
		if (instance->ticks_slot_previous > ticks_to_expire) {
    3364:	f8db 3018 	ldr.w	r3, [fp, #24]
    3368:	429d      	cmp	r5, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    336a:	bf29      	itett	cs
    336c:	23ff      	movcs	r3, #255	; 0xff
			instance->ticks_slot_previous -= ticks_to_expire;
    336e:	1b5b      	subcc	r3, r3, r5
			instance->ticker_id_slot_previous = TICKER_NULL;
    3370:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
    3374:	2300      	movcs	r3, #0
    3376:	f8cb 3018 	str.w	r3, [fp, #24]
		if (ticker->ticks_slot != 0) {
    337a:	69a3      	ldr	r3, [r4, #24]
		ticks_expired += ticks_to_expire;
    337c:	44a9      	add	r9, r5
		if (ticker->ticks_slot != 0) {
    337e:	b11b      	cbz	r3, 3388 <ticker_job+0x338>
			instance->ticker_id_slot_previous = id_expired;
    3380:	f88b 601c 	strb.w	r6, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
    3384:	f8cb 3018 	str.w	r3, [fp, #24]
		ticker->ticks_to_expire = 0;
    3388:	2200      	movs	r2, #0
		instance->ticker_id_head = ticker->next;
    338a:	9b04      	ldr	r3, [sp, #16]
		ticker->ticks_to_expire = 0;
    338c:	60a2      	str	r2, [r4, #8]
		instance->ticker_id_head = ticker->next;
    338e:	f813 3037 	ldrb.w	r3, [r3, r7, lsl #3]
    3392:	f88b 301d 	strb.w	r3, [fp, #29]
		if (ticker->ticks_periodic != 0) {
    3396:	f8d4 e004 	ldr.w	lr, [r4, #4]
    339a:	f1be 0f00 	cmp.w	lr, #0
    339e:	d030      	beq.n	3402 <ticker_job+0x3b2>
    33a0:	8ba0      	ldrh	r0, [r4, #28]
	if ((ticker->remainder_current < BIT(31)) &&
    33a2:	f8df c1e4 	ldr.w	ip, [pc, #484]	; 3588 <ticker_job+0x538>
	ticker->remainder_current += ticker->remainder_periodic;
    33a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    33a8:	6a21      	ldr	r1, [r4, #32]
    33aa:	440b      	add	r3, r1
	if ((ticker->remainder_current < BIT(31)) &&
    33ac:	4975      	ldr	r1, [pc, #468]	; (3584 <ticker_job+0x534>)
    33ae:	1859      	adds	r1, r3, r1
    33b0:	4561      	cmp	r1, ip
		ticker->remainder_current -= 30517578UL;
    33b2:	bf9f      	itttt	ls
    33b4:	f1a3 73e8 	subls.w	r3, r3, #30408704	; 0x1d00000
    33b8:	f5a3 33d4 	subls.w	r3, r3, #108544	; 0x1a800
    33bc:	f5a3 73a5 	subls.w	r3, r3, #330	; 0x14a
    33c0:	6263      	strls	r3, [r4, #36]	; 0x24
		return 1;
    33c2:	bf92      	itee	ls
    33c4:	9b01      	ldrls	r3, [sp, #4]
	ticker->remainder_current += ticker->remainder_periodic;
    33c6:	6263      	strhi	r3, [r4, #36]	; 0x24
	return 0;
    33c8:	2300      	movhi	r3, #0
				ticks_to_expire += ticker_remainder_inc(ticker);
    33ca:	4473      	add	r3, lr
			while (count--) {
    33cc:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
				ticks_to_expire += ticker_remainder_inc(ticker);
    33d0:	441a      	add	r2, r3
			while (count--) {
    33d2:	d2e8      	bcs.n	33a6 <ticker_job+0x356>
			ticks_to_expire_prep(ticker, instance->ticks_current,
    33d4:	9b05      	ldr	r3, [sp, #20]
			ticker->ticks_to_expire = ticks_to_expire;
    33d6:	60a2      	str	r2, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
    33d8:	f8db 1014 	ldr.w	r1, [fp, #20]
    33dc:	eb03 0209 	add.w	r2, r3, r9
    33e0:	4620      	mov	r0, r4
    33e2:	f7ff fdb6 	bl	2f52 <ticks_to_expire_prep>
			ticker->lazy_current = ticker->lazy_periodic;
    33e6:	8ba3      	ldrh	r3, [r4, #28]
    33e8:	83e3      	strh	r3, [r4, #30]
			ticker->force = 0;
    33ea:	2300      	movs	r3, #0
    33ec:	70e3      	strb	r3, [r4, #3]
			ticker->next = *insert_head;
    33ee:	9b04      	ldr	r3, [sp, #16]
    33f0:	f803 a037 	strb.w	sl, [r3, r7, lsl #3]
			ticker->req++;
    33f4:	7863      	ldrb	r3, [r4, #1]
    33f6:	3301      	adds	r3, #1
    33f8:	7063      	strb	r3, [r4, #1]
		ticks_elapsed -= ticks_to_expire;
    33fa:	eba8 0805 	sub.w	r8, r8, r5
    33fe:	46b2      	mov	sl, r6
    3400:	e66c      	b.n	30dc <ticker_job+0x8c>
			ticker->req = ticker->ack;
    3402:	78a3      	ldrb	r3, [r4, #2]
    3404:	7063      	strb	r3, [r4, #1]
    3406:	4656      	mov	r6, sl
    3408:	e7f7      	b.n	33fa <ticker_job+0x3aa>
		user = &users[count_user];
    340a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    340c:	9a01      	ldr	r2, [sp, #4]
    340e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    3412:	9304      	str	r3, [sp, #16]
		user_ops = (void *)&user->user_op[0];
    3414:	685b      	ldr	r3, [r3, #4]
    3416:	930a      	str	r3, [sp, #40]	; 0x28
		user_ops_first = user->first;
    3418:	9b04      	ldr	r3, [sp, #16]
    341a:	f893 9001 	ldrb.w	r9, [r3, #1]
		while ((insert_head != TICKER_NULL) ||
    341e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    3422:	f000 808e 	beq.w	3542 <ticker_job+0x4f2>
				ticker = &node[id_insert];
    3426:	fa0f f38a 	sxth.w	r3, sl
    342a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    342e:	9a08      	ldr	r2, [sp, #32]
				insert_head = ticker->next;
    3430:	46d0      	mov	r8, sl
    3432:	f812 a033 	ldrb.w	sl, [r2, r3, lsl #3]
				ticker = &node[id_insert];
    3436:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
				user_op = NULL;
    343a:	2500      	movs	r5, #0
	struct ticker_node *node = &instance->node[0];
    343c:	f8db 3000 	ldr.w	r3, [fp]
    3440:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker->next = TICKER_NULL;
    3442:	23ff      	movs	r3, #255	; 0xff
	if (ticker->lazy_current > ticker->lazy_periodic) {
    3444:	8ba2      	ldrh	r2, [r4, #28]
	ticker->next = TICKER_NULL;
    3446:	7023      	strb	r3, [r4, #0]
	if (ticker->lazy_current > ticker->lazy_periodic) {
    3448:	8be3      	ldrh	r3, [r4, #30]
    344a:	4293      	cmp	r3, r2
		skip = ticker->lazy_current -
    344c:	bf86      	itte	hi
    344e:	1a9b      	subhi	r3, r3, r2
    3450:	b29b      	uxthhi	r3, r3
		skip = 0;
    3452:	2300      	movls	r3, #0
    3454:	930c      	str	r3, [sp, #48]	; 0x30
	ticker_new = &node[id];
    3456:	fa0f f388 	sxth.w	r3, r8
    345a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    345e:	00db      	lsls	r3, r3, #3
    3460:	9311      	str	r3, [sp, #68]	; 0x44
    3462:	9b11      	ldr	r3, [sp, #68]	; 0x44
	node = &instance->node[0];
    3464:	f8db 2000 	ldr.w	r2, [fp]
	ticks_slot_previous = instance->ticks_slot_previous;
    3468:	f8db 0018 	ldr.w	r0, [fp, #24]
    346c:	9005      	str	r0, [sp, #20]
	ticker_new = &node[id];
    346e:	eb02 0e03 	add.w	lr, r2, r3
	collide = ticker_id_slot_previous = TICKER_NULL;
    3472:	20ff      	movs	r0, #255	; 0xff
	current = instance->ticker_id_head;
    3474:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker_new->ticks_to_expire;
    3478:	f8de 1008 	ldr.w	r1, [lr, #8]
	previous = current;
    347c:	9309      	str	r3, [sp, #36]	; 0x24
	collide = ticker_id_slot_previous = TICKER_NULL;
    347e:	9006      	str	r0, [sp, #24]
	while ((current != TICKER_NULL) &&
    3480:	2bff      	cmp	r3, #255	; 0xff
    3482:	d007      	beq.n	3494 <ticker_job+0x444>
		 (ticker_current = &node[current])->ticks_to_expire))) {
    3484:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
    3488:	eb02 06cc 	add.w	r6, r2, ip, lsl #3
		(ticks_to_expire_current =
    348c:	68b0      	ldr	r0, [r6, #8]
	while ((current != TICKER_NULL) &&
    348e:	4281      	cmp	r1, r0
    3490:	f200 80a9 	bhi.w	35e6 <ticker_job+0x596>
				     ticks_to_expire + ticker_new->ticks_slot);
    3494:	f8de 0018 	ldr.w	r0, [lr, #24]
    3498:	900d      	str	r0, [sp, #52]	; 0x34
	collide = ticker_by_slot_get(&node[0], current,
    349a:	eb01 0c00 	add.w	ip, r1, r0
    349e:	461e      	mov	r6, r3
	while (ticker_id_head != TICKER_NULL) {
    34a0:	2eff      	cmp	r6, #255	; 0xff
    34a2:	f040 80ae 	bne.w	3602 <ticker_job+0x5b2>
	if ((ticker_new->ticks_slot == 0) ||
    34a6:	980d      	ldr	r0, [sp, #52]	; 0x34
    34a8:	b130      	cbz	r0, 34b8 <ticker_job+0x468>
    34aa:	9805      	ldr	r0, [sp, #20]
    34ac:	4281      	cmp	r1, r0
    34ae:	f0c0 80bf 	bcc.w	3630 <ticker_job+0x5e0>
	    ((ticks_slot_previous <= ticks_to_expire) &&
    34b2:	2eff      	cmp	r6, #255	; 0xff
    34b4:	f040 8185 	bne.w	37c2 <ticker_job+0x772>
		if (previous == current) {
    34b8:	9809      	ldr	r0, [sp, #36]	; 0x24
		ticker_new->ticks_to_expire = ticks_to_expire;
    34ba:	f8ce 1008 	str.w	r1, [lr, #8]
		if (previous == current) {
    34be:	4283      	cmp	r3, r0
			node[previous].next = id;
    34c0:	bf18      	it	ne
    34c2:	f9bd 0024 	ldrshne.w	r0, [sp, #36]	; 0x24
		ticker_new->next = current;
    34c6:	f88e 3000 	strb.w	r3, [lr]
			node[previous].next = id;
    34ca:	bf16      	itet	ne
    34cc:	eb00 0080 	addne.w	r0, r0, r0, lsl #2
			instance->ticker_id_head = id;
    34d0:	f88b 801d 	strbeq.w	r8, [fp, #29]
			node[previous].next = id;
    34d4:	f802 8030 	strbne.w	r8, [r2, r0, lsl #3]
		if (current != TICKER_NULL) {
    34d8:	2bff      	cmp	r3, #255	; 0xff
    34da:	d006      	beq.n	34ea <ticker_job+0x49a>
			node[current].ticks_to_expire -= ticks_to_expire;
    34dc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    34e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    34e4:	689a      	ldr	r2, [r3, #8]
    34e6:	1a51      	subs	r1, r2, r1
    34e8:	6099      	str	r1, [r3, #8]
	ticker->req = ticker->ack + 1;
    34ea:	78a3      	ldrb	r3, [r4, #2]
    34ec:	3301      	adds	r3, #1
    34ee:	7063      	strb	r3, [r4, #1]
	return TICKER_STATUS_SUCCESS;
    34f0:	2100      	movs	r1, #0
			if (user_op) {
    34f2:	2d00      	cmp	r5, #0
    34f4:	d093      	beq.n	341e <ticker_job+0x3ce>
				ticker_job_op_cb(user_op, status);
    34f6:	4628      	mov	r0, r5
    34f8:	f7ff fd49 	bl	2f8e <ticker_job_op_cb>
    34fc:	e78f      	b.n	341e <ticker_job+0x3ce>
				user_op = &user_ops[user_ops_first];
    34fe:	eb09 0349 	add.w	r3, r9, r9, lsl #1
    3502:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3504:	011b      	lsls	r3, r3, #4
    3506:	18d5      	adds	r5, r2, r3
				first = user_ops_first + 1;
    3508:	f109 0201 	add.w	r2, r9, #1
    350c:	fa5f f982 	uxtb.w	r9, r2
				if (first == user->count_user_op) {
    3510:	9a04      	ldr	r2, [sp, #16]
    3512:	7812      	ldrb	r2, [r2, #0]
					first = 0;
    3514:	454a      	cmp	r2, r9
    3516:	bf08      	it	eq
    3518:	f04f 0900 	moveq.w	r9, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    351c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    351e:	5cd3      	ldrb	r3, [r2, r3]
    3520:	2b03      	cmp	r3, #3
    3522:	d10e      	bne.n	3542 <ticker_job+0x4f2>
				id_insert = user_op->id;
    3524:	f895 8001 	ldrb.w	r8, [r5, #1]
				ticker = &node[id_insert];
    3528:	9b08      	ldr	r3, [sp, #32]
    352a:	eb08 0488 	add.w	r4, r8, r8, lsl #2
    352e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
				if (((ticker->req - ticker->ack) & 0xff) != 0) {
    3532:	7862      	ldrb	r2, [r4, #1]
    3534:	78a3      	ldrb	r3, [r4, #2]
    3536:	429a      	cmp	r2, r3
    3538:	d009      	beq.n	354e <ticker_job+0x4fe>
					ticker_job_op_cb(user_op,
    353a:	2101      	movs	r1, #1
    353c:	4628      	mov	r0, r5
    353e:	f7ff fd26 	bl	2f8e <ticker_job_op_cb>
		while ((insert_head != TICKER_NULL) ||
    3542:	9b04      	ldr	r3, [sp, #16]
    3544:	789b      	ldrb	r3, [r3, #2]
    3546:	454b      	cmp	r3, r9
    3548:	d1d9      	bne.n	34fe <ticker_job+0x4ae>
    354a:	9b01      	ldr	r3, [sp, #4]
    354c:	e5e6      	b.n	311c <ticker_job+0xcc>
	ticker->ticks_periodic = start->ticks_periodic;
    354e:	68eb      	ldr	r3, [r5, #12]
				ticker_job_op_start(ticker, user_op,
    3550:	f8db 1014 	ldr.w	r1, [fp, #20]
	ticker->ticks_periodic = start->ticks_periodic;
    3554:	6063      	str	r3, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    3556:	692b      	ldr	r3, [r5, #16]
    3558:	6223      	str	r3, [r4, #32]
	ticker->lazy_periodic = start->lazy;
    355a:	8aab      	ldrh	r3, [r5, #20]
    355c:	83a3      	strh	r3, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
    355e:	69ab      	ldr	r3, [r5, #24]
    3560:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
    3562:	69eb      	ldr	r3, [r5, #28]
    3564:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
    3566:	6a2b      	ldr	r3, [r5, #32]
    3568:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire_minus = 0;
    356a:	2600      	movs	r6, #0
	ticker->ticks_to_expire = start->ticks_first;
    356c:	68ab      	ldr	r3, [r5, #8]
    356e:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0;
    3570:	6166      	str	r6, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    3572:	686a      	ldr	r2, [r5, #4]
    3574:	4620      	mov	r0, r4
    3576:	f7ff fcec 	bl	2f52 <ticks_to_expire_prep>
	ticker->force = 1;
    357a:	2301      	movs	r3, #1
	ticker->remainder_current = 0;
    357c:	6266      	str	r6, [r4, #36]	; 0x24
	ticker->lazy_current = 0;
    357e:	83e6      	strh	r6, [r4, #30]
	ticker->force = 1;
    3580:	70e3      	strb	r3, [r4, #3]
    3582:	e75b      	b.n	343c <ticker_job+0x3ec>
    3584:	ff172b5a 	.word	0xff172b5a
    3588:	7f172b59 	.word	0x7f172b59
    358c:	fe2e56b6 	.word	0xfe2e56b6
		if (ticker->ticks_periodic != 0) {
    3590:	6860      	ldr	r0, [r4, #4]
    3592:	2800      	cmp	r0, #0
    3594:	d07b      	beq.n	368e <ticker_job+0x63e>
	ticker->remainder_current += ticker->remainder_periodic;
    3596:	6a62      	ldr	r2, [r4, #36]	; 0x24
    3598:	6a21      	ldr	r1, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    359a:	4b8d      	ldr	r3, [pc, #564]	; (37d0 <ticker_job+0x780>)
	ticker->remainder_current += ticker->remainder_periodic;
    359c:	440a      	add	r2, r1
	if ((ticker->remainder_current < BIT(31)) &&
    359e:	498d      	ldr	r1, [pc, #564]	; (37d4 <ticker_job+0x784>)
    35a0:	18d3      	adds	r3, r2, r3
    35a2:	428b      	cmp	r3, r1
		ticker->remainder_current -= 30517578UL;
    35a4:	bf9c      	itt	ls
    35a6:	f1a2 72e8 	subls.w	r2, r2, #30408704	; 0x1d00000
    35aa:	f5a2 32d4 	subls.w	r2, r2, #108544	; 0x1a800
			ticker->ticks_to_expire += ticker->ticks_periodic +
    35ae:	68a3      	ldr	r3, [r4, #8]
	ticker->remainder_current += ticker->remainder_periodic;
    35b0:	bf8b      	itete	hi
    35b2:	6262      	strhi	r2, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
    35b4:	f5a2 72a5 	subls.w	r2, r2, #330	; 0x14a
	return 0;
    35b8:	2200      	movhi	r2, #0
		ticker->remainder_current -= 30517578UL;
    35ba:	6262      	strls	r2, [r4, #36]	; 0x24
			ticker->ticks_to_expire += ticker->ticks_periodic +
    35bc:	4403      	add	r3, r0
		return 1;
    35be:	bf98      	it	ls
    35c0:	2201      	movls	r2, #1
			ticker->ticks_to_expire += ticker->ticks_periodic +
    35c2:	4413      	add	r3, r2
			ticker->lazy_current++;
    35c4:	8be2      	ldrh	r2, [r4, #30]
			ticker->ticks_to_expire += ticker->ticks_periodic +
    35c6:	60a3      	str	r3, [r4, #8]
			ticker->lazy_current++;
    35c8:	3201      	adds	r2, #1
    35ca:	83e2      	strh	r2, [r4, #30]
			    ticker->ticks_to_expire_minus) {
    35cc:	6962      	ldr	r2, [r4, #20]
			if (ticker->ticks_to_expire >
    35ce:	4293      	cmp	r3, r2
    35d0:	f04f 0100 	mov.w	r1, #0
				ticker->ticks_to_expire -=
    35d4:	bf89      	itett	hi
    35d6:	1a9b      	subhi	r3, r3, r2
				ticker->ticks_to_expire_minus -=
    35d8:	1ad3      	subls	r3, r2, r3
				ticker->ticks_to_expire -=
    35da:	60a3      	strhi	r3, [r4, #8]
				ticker->ticks_to_expire_minus = 0;
    35dc:	6161      	strhi	r1, [r4, #20]
				ticker->ticks_to_expire_minus -=
    35de:	bf9c      	itt	ls
    35e0:	6163      	strls	r3, [r4, #20]
				ticker->ticks_to_expire = 0;
    35e2:	60a1      	strls	r1, [r4, #8]
    35e4:	e73d      	b.n	3462 <ticker_job+0x412>
		if (ticker_current->ticks_slot != 0) {
    35e6:	69b6      	ldr	r6, [r6, #24]
		ticks_to_expire -= ticks_to_expire_current;
    35e8:	1a09      	subs	r1, r1, r0
		if (ticker_current->ticks_slot != 0) {
    35ea:	b946      	cbnz	r6, 35fe <ticker_job+0x5ae>
			if (ticks_slot_previous > ticks_to_expire_current) {
    35ec:	9f05      	ldr	r7, [sp, #20]
    35ee:	42b8      	cmp	r0, r7
    35f0:	d200      	bcs.n	35f4 <ticker_job+0x5a4>
				ticks_slot_previous -= ticks_to_expire_current;
    35f2:	1a3e      	subs	r6, r7, r0
		current = ticker_current->next;
    35f4:	9309      	str	r3, [sp, #36]	; 0x24
    35f6:	9605      	str	r6, [sp, #20]
    35f8:	f812 303c 	ldrb.w	r3, [r2, ip, lsl #3]
    35fc:	e740      	b.n	3480 <ticker_job+0x430>
		if (ticker_current->ticks_slot != 0) {
    35fe:	9306      	str	r3, [sp, #24]
    3600:	e7f8      	b.n	35f4 <ticker_job+0x5a4>
		ticker = &node[ticker_id_head];
    3602:	b230      	sxth	r0, r6
    3604:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    3608:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
    360c:	970e      	str	r7, [sp, #56]	; 0x38
		ticks_to_expire = ticker->ticks_to_expire;
    360e:	68bf      	ldr	r7, [r7, #8]
    3610:	970f      	str	r7, [sp, #60]	; 0x3c
		if (ticks_slot <= ticks_to_expire) {
    3612:	4567      	cmp	r7, ip
    3614:	d20a      	bcs.n	362c <ticker_job+0x5dc>
		if (ticker->ticks_slot) {
    3616:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    3618:	69bf      	ldr	r7, [r7, #24]
    361a:	2f00      	cmp	r7, #0
    361c:	f47f af43 	bne.w	34a6 <ticker_job+0x456>
		ticks_slot -= ticks_to_expire;
    3620:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    3622:	ebac 0c06 	sub.w	ip, ip, r6
		ticker_id_head = ticker->next;
    3626:	f812 6030 	ldrb.w	r6, [r2, r0, lsl #3]
    362a:	e739      	b.n	34a0 <ticker_job+0x450>
			return TICKER_NULL;
    362c:	26ff      	movs	r6, #255	; 0xff
    362e:	e73a      	b.n	34a6 <ticker_job+0x456>
	while (id_insert !=
    3630:	9b06      	ldr	r3, [sp, #24]
    3632:	4598      	cmp	r8, r3
    3634:	f43f af59 	beq.w	34ea <ticker_job+0x49a>
		if (id_collide != TICKER_NULL) {
    3638:	9b06      	ldr	r3, [sp, #24]
    363a:	2bff      	cmp	r3, #255	; 0xff
    363c:	d0a8      	beq.n	3590 <ticker_job+0x540>
    363e:	461e      	mov	r6, r3
			struct ticker_node *ticker_collide = &node[id_collide];
    3640:	b233      	sxth	r3, r6
    3642:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3646:	9305      	str	r3, [sp, #20]
    3648:	9a05      	ldr	r2, [sp, #20]
    364a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    364c:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
			if (ticker_collide->lazy_current >
    3650:	8bfb      	ldrh	r3, [r7, #30]
			    ticker_collide->lazy_periodic) {
    3652:	8bba      	ldrh	r2, [r7, #28]
			if (ticker_collide->lazy_current >
    3654:	4293      	cmp	r3, r2
				skip_collide = ticker_collide->lazy_current -
    3656:	bf88      	it	hi
    3658:	1a9b      	subhi	r3, r3, r2
			if (ticker_collide->ticks_periodic &&
    365a:	687a      	ldr	r2, [r7, #4]
				skip_collide = ticker_collide->lazy_current -
    365c:	bf8c      	ite	hi
    365e:	b29b      	uxthhi	r3, r3
				skip_collide = 0;
    3660:	2300      	movls	r3, #0
			if (ticker_collide->ticks_periodic &&
    3662:	2a00      	cmp	r2, #0
    3664:	d094      	beq.n	3590 <ticker_job+0x540>
    3666:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    3668:	4293      	cmp	r3, r2
    366a:	d891      	bhi.n	3590 <ticker_job+0x540>
			    skip_collide <= skip &&
    366c:	78fa      	ldrb	r2, [r7, #3]
    366e:	78e3      	ldrb	r3, [r4, #3]
    3670:	429a      	cmp	r2, r3
    3672:	d28d      	bcs.n	3590 <ticker_job+0x540>
					ticker_dequeue(instance, id_collide);
    3674:	4631      	mov	r1, r6
    3676:	4658      	mov	r0, fp
    3678:	f7ff fc3f 	bl	2efa <ticker_dequeue>
				ticker_collide->req = ticker_collide->ack;
    367c:	78bb      	ldrb	r3, [r7, #2]
    367e:	707b      	strb	r3, [r7, #1]
				ticker_collide->next = *insert_head;
    3680:	9a05      	ldr	r2, [sp, #20]
    3682:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
				ticker_collide->ticks_to_expire =
    3684:	60b8      	str	r0, [r7, #8]
				ticker_collide->next = *insert_head;
    3686:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
    368a:	46b2      	mov	sl, r6
    368c:	e6e9      	b.n	3462 <ticker_job+0x412>
			return TICKER_STATUS_FAILURE;
    368e:	2101      	movs	r1, #1
    3690:	e72f      	b.n	34f2 <ticker_job+0x4a2>
		user = &users[count_user];
    3692:	9b01      	ldr	r3, [sp, #4]
    3694:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
		user_op = &user->user_op[0];
    3698:	686e      	ldr	r6, [r5, #4]
		while (user->first != user->last) {
    369a:	786b      	ldrb	r3, [r5, #1]
    369c:	78ea      	ldrb	r2, [r5, #3]
    369e:	429a      	cmp	r2, r3
    36a0:	d102      	bne.n	36a8 <ticker_job+0x658>
    36a2:	3c01      	subs	r4, #1
    36a4:	b2e4      	uxtb	r4, r4
    36a6:	e551      	b.n	314c <ticker_job+0xfc>
			ticker_job_op_inquire(instance, &user_op[user->first]);
    36a8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    36ac:	011b      	lsls	r3, r3, #4
    36ae:	18f2      	adds	r2, r6, r3
	switch (uop->op) {
    36b0:	5cf3      	ldrb	r3, [r6, r3]
    36b2:	2b01      	cmp	r3, #1
    36b4:	d025      	beq.n	3702 <ticker_job+0x6b2>
    36b6:	2b02      	cmp	r3, #2
    36b8:	d12a      	bne.n	3710 <ticker_job+0x6c0>
		ticker_by_next_slot_get(instance,
    36ba:	f8d2 c004 	ldr.w	ip, [r2, #4]
    36be:	6893      	ldr	r3, [r2, #8]
	_ticker_id_head = *ticker_id_head;
    36c0:	f89c 0000 	ldrb.w	r0, [ip]
		ticker_by_next_slot_get(instance,
    36c4:	f8d2 900c 	ldr.w	r9, [r2, #12]
	node = instance->node;
    36c8:	f8db e000 	ldr.w	lr, [fp]
	if ((_ticker_id_head == TICKER_NULL) ||
    36cc:	28ff      	cmp	r0, #255	; 0xff
    36ce:	d004      	beq.n	36da <ticker_job+0x68a>
    36d0:	6819      	ldr	r1, [r3, #0]
    36d2:	f8db 7014 	ldr.w	r7, [fp, #20]
    36d6:	42b9      	cmp	r1, r7
    36d8:	d023      	beq.n	3722 <ticker_job+0x6d2>
		*ticks_current = instance->ticks_current;
    36da:	f8db 0014 	ldr.w	r0, [fp, #20]
		_ticker_id_head = instance->ticker_id_head;
    36de:	f89b 101d 	ldrb.w	r1, [fp, #29]
		*ticks_current = instance->ticks_current;
    36e2:	6018      	str	r0, [r3, #0]
		_ticks_to_expire = 0;
    36e4:	2300      	movs	r3, #0
	while ((_ticker_id_head != TICKER_NULL) &&
    36e6:	29ff      	cmp	r1, #255	; 0xff
    36e8:	d007      	beq.n	36fa <ticker_job+0x6aa>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0)) {
    36ea:	eb01 0a81 	add.w	sl, r1, r1, lsl #2
    36ee:	eb0e 00ca 	add.w	r0, lr, sl, lsl #3
	while ((_ticker_id_head != TICKER_NULL) &&
    36f2:	6987      	ldr	r7, [r0, #24]
    36f4:	6880      	ldr	r0, [r0, #8]
    36f6:	b1df      	cbz	r7, 3730 <ticker_job+0x6e0>
		_ticks_to_expire += ticker->ticks_to_expire;
    36f8:	4403      	add	r3, r0
	*ticker_id_head = _ticker_id_head;
    36fa:	f88c 1000 	strb.w	r1, [ip]
	*ticks_to_expire = _ticks_to_expire;
    36fe:	f8c9 3000 	str.w	r3, [r9]
		fp_op_func = uop->fp_op_func;
    3702:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uop->status = TICKER_STATUS_SUCCESS;
    3704:	f8c2 8024 	str.w	r8, [r2, #36]	; 0x24
	if (fp_op_func) {
    3708:	b113      	cbz	r3, 3710 <ticker_job+0x6c0>
		fp_op_func(uop->status, uop->op_context);
    370a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    370c:	2000      	movs	r0, #0
    370e:	4798      	blx	r3
			first = user->first + 1;
    3710:	786b      	ldrb	r3, [r5, #1]
			if (first == user->count_user_op) {
    3712:	782a      	ldrb	r2, [r5, #0]
			first = user->first + 1;
    3714:	3301      	adds	r3, #1
    3716:	b2db      	uxtb	r3, r3
				first = 0;
    3718:	429a      	cmp	r2, r3
    371a:	bf08      	it	eq
    371c:	2300      	moveq	r3, #0
			user->first = first;
    371e:	706b      	strb	r3, [r5, #1]
    3720:	e7bb      	b.n	369a <ticker_job+0x64a>
		ticker = &node[_ticker_id_head];
    3722:	eb00 0080 	add.w	r0, r0, r0, lsl #2
	_ticks_to_expire = *ticks_to_expire;
    3726:	f8d9 3000 	ldr.w	r3, [r9]
		_ticker_id_head = ticker->next;
    372a:	f81e 1030 	ldrb.w	r1, [lr, r0, lsl #3]
    372e:	e7da      	b.n	36e6 <ticker_job+0x696>
		_ticks_to_expire += ticker->ticks_to_expire;
    3730:	4403      	add	r3, r0
		_ticker_id_head = ticker->next;
    3732:	f81e 103a 	ldrb.w	r1, [lr, sl, lsl #3]
    3736:	e7d6      	b.n	36e6 <ticker_job+0x696>
	if (ticker_id_old_head == TICKER_NULL) {
    3738:	9b03      	ldr	r3, [sp, #12]
    373a:	2bff      	cmp	r3, #255	; 0xff
    373c:	d107      	bne.n	374e <ticker_job+0x6fe>
		ticks_current = cntr_cnt_get();
    373e:	f005 fbf9 	bl	8f34 <cntr_cnt_get>
    3742:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
    3744:	f005 fbd0 	bl	8ee8 <cntr_start>
    3748:	b908      	cbnz	r0, 374e <ticker_job+0x6fe>
			instance->ticks_current = ticks_current;
    374a:	f8cb 4014 	str.w	r4, [fp, #20]
	ticker = &instance->node[instance->ticker_id_head];
    374e:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker->ticks_to_expire;
    3752:	f8db 2000 	ldr.w	r2, [fp]
	ticker = &instance->node[instance->ticker_id_head];
    3756:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	ticks_to_expire = ticker->ticks_to_expire;
    375a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    375e:	260a      	movs	r6, #10
    3760:	689d      	ldr	r5, [r3, #8]
		ctr = cntr_cnt_get();
    3762:	f005 fbe7 	bl	8f34 <cntr_cnt_get>
		cc = instance->ticks_current;
    3766:	f8db 4014 	ldr.w	r4, [fp, #20]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    376a:	1b03      	subs	r3, r0, r4
    376c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
    3770:	3303      	adds	r3, #3
		cc += ((ticks_elapsed < ticks_to_expire) ?
    3772:	42ab      	cmp	r3, r5
    3774:	bf2c      	ite	cs
    3776:	18e4      	addcs	r4, r4, r3
    3778:	1964      	addcc	r4, r4, r5
		cc &= 0x00FFFFFF;
    377a:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		ctr = cntr_cnt_get();
    377e:	4607      	mov	r7, r0
		instance->trigger_set_cb(cc);
    3780:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
    3784:	4620      	mov	r0, r4
    3786:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
    3788:	f005 fbd4 	bl	8f34 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    378c:	1bc0      	subs	r0, r0, r7
    378e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3792:	1be4      	subs	r4, r4, r7
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
    3794:	3003      	adds	r0, #3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    3796:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
    379a:	42a0      	cmp	r0, r4
    379c:	f67f ace8 	bls.w	3170 <ticker_job+0x120>
		LL_ASSERT(i);
    37a0:	3e01      	subs	r6, #1
    37a2:	d1de      	bne.n	3762 <ticker_job+0x712>
    37a4:	4040      	eors	r0, r0
    37a6:	f380 8811 	msr	BASEPRI, r0
    37aa:	f04f 0004 	mov.w	r0, #4
    37ae:	df02      	svc	2
	instance->job_guard = 0;
    37b0:	2300      	movs	r3, #0
    37b2:	f88b 301e 	strb.w	r3, [fp, #30]
    37b6:	e4d1      	b.n	315c <ticker_job+0x10c>
	if (!pending) {
    37b8:	2b00      	cmp	r3, #0
    37ba:	d1f9      	bne.n	37b0 <ticker_job+0x760>
		flag_compare_update = 1;
    37bc:	2301      	movs	r3, #1
    37be:	9302      	str	r3, [sp, #8]
    37c0:	e4bb      	b.n	313a <ticker_job+0xea>
	while (id_insert !=
    37c2:	45b0      	cmp	r8, r6
    37c4:	f47f af3c 	bne.w	3640 <ticker_job+0x5f0>
    37c8:	e68f      	b.n	34ea <ticker_job+0x49a>
}
    37ca:	b013      	add	sp, #76	; 0x4c
    37cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    37d0:	ff172b5a 	.word	0xff172b5a
    37d4:	7f172b59 	.word	0x7f172b59

000037d8 <ticker_init>:
{
    37d8:	b5f0      	push	{r4, r5, r6, r7, lr}
	instance->count_node = count_node;
    37da:	4d1a      	ldr	r5, [pc, #104]	; (3844 <ticker_init+0x6c>)
{
    37dc:	9f05      	ldr	r7, [sp, #20]
    37de:	f89d 4018 	ldrb.w	r4, [sp, #24]
	instance->count_node = count_node;
    37e2:	262c      	movs	r6, #44	; 0x2c
    37e4:	4346      	muls	r6, r0
    37e6:	eb05 0e06 	add.w	lr, r5, r6
	instance->node = node;
    37ea:	51aa      	str	r2, [r5, r6]
	instance->count_node = count_node;
    37ec:	f88e 1008 	strb.w	r1, [lr, #8]
	struct ticker_user_op *user_op_ = (void *)user_op;
    37f0:	9907      	ldr	r1, [sp, #28]
	instance->count_user = count_user;
    37f2:	f88e 3009 	strb.w	r3, [lr, #9]
	instance->user = user;
    37f6:	f8ce 7004 	str.w	r7, [lr, #4]
	while (count_user--) {
    37fa:	3b01      	subs	r3, #1
    37fc:	b2db      	uxtb	r3, r3
    37fe:	2bff      	cmp	r3, #255	; 0xff
    3800:	d111      	bne.n	3826 <ticker_init+0x4e>
	if (count_op) {
    3802:	b9ec      	cbnz	r4, 3840 <ticker_init+0x68>
	instance->caller_id_get_cb = caller_id_get_cb;
    3804:	222c      	movs	r2, #44	; 0x2c
    3806:	fb02 5200 	mla	r2, r2, r0, r5
    380a:	9908      	ldr	r1, [sp, #32]
    380c:	6211      	str	r1, [r2, #32]
	instance->sched_cb = sched_cb;
    380e:	9909      	ldr	r1, [sp, #36]	; 0x24
    3810:	6251      	str	r1, [r2, #36]	; 0x24
	instance->trigger_set_cb = trigger_set_cb;
    3812:	990a      	ldr	r1, [sp, #40]	; 0x28
    3814:	6291      	str	r1, [r2, #40]	; 0x28
	instance->ticker_id_head = TICKER_NULL;
    3816:	7753      	strb	r3, [r2, #29]
	instance->ticker_id_slot_previous = TICKER_NULL;
    3818:	7713      	strb	r3, [r2, #28]
	instance->ticks_slot_previous = 0;
    381a:	6194      	str	r4, [r2, #24]
	instance->ticks_current = 0;
    381c:	6154      	str	r4, [r2, #20]
	instance->ticks_elapsed_first = 0;
    381e:	7294      	strb	r4, [r2, #10]
	instance->ticks_elapsed_last = 0;
    3820:	72d4      	strb	r4, [r2, #11]
	return TICKER_STATUS_SUCCESS;
    3822:	4620      	mov	r0, r4
    3824:	bdf0      	pop	{r4, r5, r6, r7, pc}
		users[count_user].user_op = user_op_;
    3826:	b21a      	sxth	r2, r3
    3828:	eb07 06c2 	add.w	r6, r7, r2, lsl #3
    382c:	6071      	str	r1, [r6, #4]
		user_op_ += users[count_user].count_user_op;
    382e:	f817 2032 	ldrb.w	r2, [r7, r2, lsl #3]
    3832:	eb02 0642 	add.w	r6, r2, r2, lsl #1
		count_op -= users[count_user].count_user_op;
    3836:	1aa4      	subs	r4, r4, r2
		user_op_ += users[count_user].count_user_op;
    3838:	eb01 1106 	add.w	r1, r1, r6, lsl #4
		count_op -= users[count_user].count_user_op;
    383c:	b2e4      	uxtb	r4, r4
    383e:	e7dc      	b.n	37fa <ticker_init+0x22>
		return TICKER_STATUS_FAILURE;
    3840:	2001      	movs	r0, #1
}
    3842:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3844:	20000280 	.word	0x20000280

00003848 <ticker_trigger>:
	instance = &_instance[instance_index];
    3848:	4a07      	ldr	r2, [pc, #28]	; (3868 <ticker_trigger+0x20>)
    384a:	212c      	movs	r1, #44	; 0x2c
    384c:	fb00 2301 	mla	r3, r0, r1, r2
{
    3850:	b410      	push	{r4}
	if (instance->sched_cb) {
    3852:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    3854:	b12c      	cbz	r4, 3862 <ticker_trigger+0x1a>
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    3856:	46a4      	mov	ip, r4
    3858:	2201      	movs	r2, #1
    385a:	2103      	movs	r1, #3
    385c:	2002      	movs	r0, #2
}
    385e:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    3860:	4760      	bx	ip
}
    3862:	bc10      	pop	{r4}
    3864:	4770      	bx	lr
    3866:	bf00      	nop
    3868:	20000280 	.word	0x20000280

0000386c <ticker_start>:
{
    386c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    3870:	4f25      	ldr	r7, [pc, #148]	; (3908 <ticker_start+0x9c>)
    3872:	f04f 082c 	mov.w	r8, #44	; 0x2c
{
    3876:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    3878:	fb08 7000 	mla	r0, r8, r0, r7
    387c:	fa0f fc81 	sxth.w	ip, r1
    3880:	f8d0 e004 	ldr.w	lr, [r0, #4]
    3884:	eb0e 06cc 	add.w	r6, lr, ip, lsl #3
	if (last >= user->count_user_op) {
    3888:	f81e e03c 	ldrb.w	lr, [lr, ip, lsl #3]
	last = user->last + 1;
    388c:	78f4      	ldrb	r4, [r6, #3]
    388e:	1c65      	adds	r5, r4, #1
    3890:	b2ed      	uxtb	r5, r5
		last = 0;
    3892:	45ae      	cmp	lr, r5
    3894:	bf98      	it	ls
    3896:	2500      	movls	r5, #0
	if (last == user->first) {
    3898:	f896 e001 	ldrb.w	lr, [r6, #1]
    389c:	45ae      	cmp	lr, r5
    389e:	d02f      	beq.n	3900 <ticker_start+0x94>
	user_op = &user->user_op[user->last];
    38a0:	f8d6 c004 	ldr.w	ip, [r6, #4]
    38a4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    38a8:	ea4f 1e04 	mov.w	lr, r4, lsl #4
    38ac:	eb0c 040e 	add.w	r4, ip, lr
	user_op->op = TICKER_USER_OP_TYPE_START;
    38b0:	f04f 0a03 	mov.w	sl, #3
    38b4:	f80c a00e 	strb.w	sl, [ip, lr]
	user_op->params.start.ticks_at_start = ticks_anchor;
    38b8:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
    38ba:	9b08      	ldr	r3, [sp, #32]
    38bc:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    38be:	9b09      	ldr	r3, [sp, #36]	; 0x24
    38c0:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    38c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    38c4:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    38c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    38c8:	61a3      	str	r3, [r4, #24]
	user_op->params.start.lazy = lazy;
    38ca:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    38ce:	82a3      	strh	r3, [r4, #20]
	user_op->params.start.fp_timeout_func = fp_timeout_func;
    38d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    38d2:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
    38d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    38d6:	6223      	str	r3, [r4, #32]
	user_op->status = TICKER_STATUS_BUSY;
    38d8:	2302      	movs	r3, #2
    38da:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    38dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    38de:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    38e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
	user_op->id = ticker_id;
    38e2:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    38e4:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    38e6:	70f5      	strb	r5, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    38e8:	6a45      	ldr	r5, [r0, #36]	; 0x24
    38ea:	6a03      	ldr	r3, [r0, #32]
    38ec:	4608      	mov	r0, r1
    38ee:	4798      	blx	r3
    38f0:	fb09 7308 	mla	r3, r9, r8, r7
    38f4:	2200      	movs	r2, #0
    38f6:	2104      	movs	r1, #4
    38f8:	47a8      	blx	r5
	return user_op->status;
    38fa:	6a60      	ldr	r0, [r4, #36]	; 0x24
    38fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    3900:	2001      	movs	r0, #1
}
    3902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3906:	bf00      	nop
    3908:	20000280 	.word	0x20000280

0000390c <ticker_update>:
{
    390c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    3910:	f8df 8090 	ldr.w	r8, [pc, #144]	; 39a4 <ticker_update+0x98>
    3914:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    3918:	fb0a 8e00 	mla	lr, sl, r0, r8
    391c:	b20f      	sxth	r7, r1
    391e:	f8de 5004 	ldr.w	r5, [lr, #4]
{
    3922:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    3924:	eb05 00c7 	add.w	r0, r5, r7, lsl #3
	if (last >= user->count_user_op) {
    3928:	f815 5037 	ldrb.w	r5, [r5, r7, lsl #3]
	last = user->last + 1;
    392c:	78c4      	ldrb	r4, [r0, #3]
    392e:	1c66      	adds	r6, r4, #1
    3930:	b2f6      	uxtb	r6, r6
		last = 0;
    3932:	42b5      	cmp	r5, r6
    3934:	bf98      	it	ls
    3936:	2600      	movls	r6, #0
	if (last == user->first) {
    3938:	7845      	ldrb	r5, [r0, #1]
    393a:	42b5      	cmp	r5, r6
    393c:	d02f      	beq.n	399e <ticker_update+0x92>
	user_op = &user->user_op[user->last];
    393e:	f8d0 c004 	ldr.w	ip, [r0, #4]
    3942:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    3946:	0125      	lsls	r5, r4, #4
    3948:	eb0c 0405 	add.w	r4, ip, r5
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    394c:	2704      	movs	r7, #4
    394e:	f80c 7005 	strb.w	r7, [ip, r5]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    3952:	80a3      	strh	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    3954:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    3958:	80e3      	strh	r3, [r4, #6]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    395a:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    395e:	8123      	strh	r3, [r4, #8]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    3960:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    3964:	8163      	strh	r3, [r4, #10]
	user_op->params.update.lazy = lazy;
    3966:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    396a:	81a3      	strh	r3, [r4, #12]
	user_op->params.update.force = force;
    396c:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    3970:	73a3      	strb	r3, [r4, #14]
	user_op->status = TICKER_STATUS_BUSY;
    3972:	2302      	movs	r3, #2
    3974:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    3976:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3978:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    397a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	user_op->id = ticker_id;
    397c:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    397e:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    3980:	70c6      	strb	r6, [r0, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    3982:	f8de 3020 	ldr.w	r3, [lr, #32]
    3986:	f8de 5024 	ldr.w	r5, [lr, #36]	; 0x24
    398a:	4608      	mov	r0, r1
    398c:	4798      	blx	r3
    398e:	fb09 830a 	mla	r3, r9, sl, r8
    3992:	2200      	movs	r2, #0
    3994:	4639      	mov	r1, r7
    3996:	47a8      	blx	r5
	return user_op->status;
    3998:	6a60      	ldr	r0, [r4, #36]	; 0x24
    399a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    399e:	2001      	movs	r0, #1
}
    39a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    39a4:	20000280 	.word	0x20000280

000039a8 <ticker_stop>:
{
    39a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    39ac:	f8df 906c 	ldr.w	r9, [pc, #108]	; 3a1c <ticker_stop+0x74>
    39b0:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    39b4:	fb0a 9e00 	mla	lr, sl, r0, r9
{
    39b8:	4680      	mov	r8, r0
	user = &instance->user[user_id];
    39ba:	f8de 0004 	ldr.w	r0, [lr, #4]
    39be:	b20e      	sxth	r6, r1
    39c0:	eb00 07c6 	add.w	r7, r0, r6, lsl #3
	if (last >= user->count_user_op) {
    39c4:	f810 0036 	ldrb.w	r0, [r0, r6, lsl #3]
	last = user->last + 1;
    39c8:	78fc      	ldrb	r4, [r7, #3]
    39ca:	1c65      	adds	r5, r4, #1
    39cc:	b2ed      	uxtb	r5, r5
		last = 0;
    39ce:	42a8      	cmp	r0, r5
    39d0:	bf98      	it	ls
    39d2:	2500      	movls	r5, #0
	if (last == user->first) {
    39d4:	7878      	ldrb	r0, [r7, #1]
    39d6:	42a8      	cmp	r0, r5
    39d8:	d01d      	beq.n	3a16 <ticker_stop+0x6e>
	user_op = &user->user_op[user->last];
    39da:	6878      	ldr	r0, [r7, #4]
    39dc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    39e0:	0124      	lsls	r4, r4, #4
    39e2:	1906      	adds	r6, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    39e4:	f04f 0c05 	mov.w	ip, #5
    39e8:	f800 c004 	strb.w	ip, [r0, r4]
	user_op->id = ticker_id;
    39ec:	7072      	strb	r2, [r6, #1]
	user_op->fp_op_func = fp_op_func;
    39ee:	62b3      	str	r3, [r6, #40]	; 0x28
	user_op->status = TICKER_STATUS_BUSY;
    39f0:	2202      	movs	r2, #2
	user_op->op_context = op_context;
    39f2:	9b08      	ldr	r3, [sp, #32]
	user_op->status = TICKER_STATUS_BUSY;
    39f4:	6272      	str	r2, [r6, #36]	; 0x24
	user_op->op_context = op_context;
    39f6:	62f3      	str	r3, [r6, #44]	; 0x2c
	user->last = last;
    39f8:	70fd      	strb	r5, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    39fa:	f8de 3020 	ldr.w	r3, [lr, #32]
    39fe:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
    3a02:	4608      	mov	r0, r1
    3a04:	4798      	blx	r3
    3a06:	fb08 930a 	mla	r3, r8, sl, r9
    3a0a:	2200      	movs	r2, #0
    3a0c:	2104      	movs	r1, #4
    3a0e:	47a0      	blx	r4
	return user_op->status;
    3a10:	6a70      	ldr	r0, [r6, #36]	; 0x24
    3a12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    3a16:	2001      	movs	r0, #1
}
    3a18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3a1c:	20000280 	.word	0x20000280

00003a20 <ticker_next_slot_get>:
{
    3a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    3a24:	f8df 8078 	ldr.w	r8, [pc, #120]	; 3aa0 <ticker_next_slot_get+0x80>
    3a28:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
{
    3a2c:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    3a2e:	fb0a 8000 	mla	r0, sl, r0, r8
    3a32:	fa0f fe81 	sxth.w	lr, r1
    3a36:	6845      	ldr	r5, [r0, #4]
    3a38:	eb05 07ce 	add.w	r7, r5, lr, lsl #3
	if (last >= user->count_user_op) {
    3a3c:	f815 503e 	ldrb.w	r5, [r5, lr, lsl #3]
	last = user->last + 1;
    3a40:	78fc      	ldrb	r4, [r7, #3]
    3a42:	1c66      	adds	r6, r4, #1
    3a44:	b2f6      	uxtb	r6, r6
		last = 0;
    3a46:	42b5      	cmp	r5, r6
    3a48:	bf98      	it	ls
    3a4a:	2600      	movls	r6, #0
	if (last == user->first) {
    3a4c:	787d      	ldrb	r5, [r7, #1]
    3a4e:	42b5      	cmp	r5, r6
    3a50:	d023      	beq.n	3a9a <ticker_next_slot_get+0x7a>
	user_op = &user->user_op[user->last];
    3a52:	f8d7 c004 	ldr.w	ip, [r7, #4]
    3a56:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    3a5a:	0125      	lsls	r5, r4, #4
    3a5c:	eb0c 0405 	add.w	r4, ip, r5
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
    3a60:	f04f 0e02 	mov.w	lr, #2
    3a64:	f80c e005 	strb.w	lr, [ip, r5]
	user_op->params.slot_get.ticks_current = ticks_current;
    3a68:	60a3      	str	r3, [r4, #8]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
    3a6a:	9b08      	ldr	r3, [sp, #32]
    3a6c:	60e3      	str	r3, [r4, #12]
	user_op->fp_op_func = fp_op_func;
    3a6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3a70:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->id = TICKER_NULL;
    3a72:	25ff      	movs	r5, #255	; 0xff
	user_op->op_context = op_context;
    3a74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	user_op->params.slot_get.ticker_id = ticker_id;
    3a76:	6062      	str	r2, [r4, #4]
	user_op->id = TICKER_NULL;
    3a78:	7065      	strb	r5, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
    3a7a:	f8c4 e024 	str.w	lr, [r4, #36]	; 0x24
	user_op->op_context = op_context;
    3a7e:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    3a80:	70fe      	strb	r6, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    3a82:	6a45      	ldr	r5, [r0, #36]	; 0x24
    3a84:	6a03      	ldr	r3, [r0, #32]
    3a86:	4608      	mov	r0, r1
    3a88:	4798      	blx	r3
    3a8a:	fb09 830a 	mla	r3, r9, sl, r8
    3a8e:	2200      	movs	r2, #0
    3a90:	2104      	movs	r1, #4
    3a92:	47a8      	blx	r5
	return user_op->status;
    3a94:	6a60      	ldr	r0, [r4, #36]	; 0x24
    3a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    3a9a:	2001      	movs	r0, #1
}
    3a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3aa0:	20000280 	.word	0x20000280

00003aa4 <ticker_job_idle_get>:
{
    3aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    3aa8:	f8df 906c 	ldr.w	r9, [pc, #108]	; 3b18 <ticker_job_idle_get+0x74>
    3aac:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    3ab0:	fb0a 9e00 	mla	lr, sl, r0, r9
{
    3ab4:	4680      	mov	r8, r0
	user = &instance->user[user_id];
    3ab6:	f8de 0004 	ldr.w	r0, [lr, #4]
    3aba:	b20e      	sxth	r6, r1
    3abc:	eb00 07c6 	add.w	r7, r0, r6, lsl #3
	if (last >= user->count_user_op) {
    3ac0:	f810 0036 	ldrb.w	r0, [r0, r6, lsl #3]
	last = user->last + 1;
    3ac4:	78fc      	ldrb	r4, [r7, #3]
    3ac6:	1c65      	adds	r5, r4, #1
    3ac8:	b2ed      	uxtb	r5, r5
		last = 0;
    3aca:	42a8      	cmp	r0, r5
    3acc:	bf98      	it	ls
    3ace:	2500      	movls	r5, #0
	if (last == user->first) {
    3ad0:	7878      	ldrb	r0, [r7, #1]
    3ad2:	42a8      	cmp	r0, r5
    3ad4:	d01d      	beq.n	3b12 <ticker_job_idle_get+0x6e>
	user_op = &user->user_op[user->last];
    3ad6:	6878      	ldr	r0, [r7, #4]
    3ad8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    3adc:	0124      	lsls	r4, r4, #4
    3ade:	1906      	adds	r6, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
    3ae0:	f04f 0c01 	mov.w	ip, #1
    3ae4:	f800 c004 	strb.w	ip, [r0, r4]
	user_op->id = TICKER_NULL;
    3ae8:	20ff      	movs	r0, #255	; 0xff
    3aea:	7070      	strb	r0, [r6, #1]
	user_op->status = TICKER_STATUS_BUSY;
    3aec:	2002      	movs	r0, #2
    3aee:	6270      	str	r0, [r6, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    3af0:	62b2      	str	r2, [r6, #40]	; 0x28
	user_op->op_context = op_context;
    3af2:	62f3      	str	r3, [r6, #44]	; 0x2c
	user->last = last;
    3af4:	70fd      	strb	r5, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    3af6:	f8de 3020 	ldr.w	r3, [lr, #32]
    3afa:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
    3afe:	4608      	mov	r0, r1
    3b00:	4798      	blx	r3
    3b02:	fb08 930a 	mla	r3, r8, sl, r9
    3b06:	2200      	movs	r2, #0
    3b08:	2104      	movs	r1, #4
    3b0a:	47a0      	blx	r4
	return user_op->status;
    3b0c:	6a70      	ldr	r0, [r6, #36]	; 0x24
    3b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    3b12:	2001      	movs	r0, #1
}
    3b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3b18:	20000280 	.word	0x20000280

00003b1c <ticker_job_sched>:
{
    3b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    3b20:	4c08      	ldr	r4, [pc, #32]	; (3b44 <ticker_job_sched+0x28>)
    3b22:	252c      	movs	r5, #44	; 0x2c
    3b24:	fb05 4300 	mla	r3, r5, r0, r4
{
    3b28:	4606      	mov	r6, r0
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    3b2a:	6a5f      	ldr	r7, [r3, #36]	; 0x24
    3b2c:	6a1b      	ldr	r3, [r3, #32]
    3b2e:	4608      	mov	r0, r1
    3b30:	4798      	blx	r3
    3b32:	fb06 4305 	mla	r3, r6, r5, r4
    3b36:	46bc      	mov	ip, r7
    3b38:	2200      	movs	r2, #0
    3b3a:	2104      	movs	r1, #4
}
    3b3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    3b40:	4760      	bx	ip
    3b42:	bf00      	nop
    3b44:	20000280 	.word	0x20000280

00003b48 <ticker_ticks_now_get>:
	return cntr_cnt_get();
    3b48:	f005 b9f4 	b.w	8f34 <cntr_cnt_get>

00003b4c <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    3b4c:	1a40      	subs	r0, r0, r1
}
    3b4e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3b52:	4770      	bx	lr

00003b54 <ll_addr_get>:

static u8_t pub_addr[BDADDR_SIZE];
static u8_t rnd_addr[BDADDR_SIZE];

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
    3b54:	b508      	push	{r3, lr}
    3b56:	4603      	mov	r3, r0
	if (addr_type > 1) {
    3b58:	2b01      	cmp	r3, #1
{
    3b5a:	4608      	mov	r0, r1
	if (addr_type > 1) {
    3b5c:	d80e      	bhi.n	3b7c <ll_addr_get+0x28>
		return NULL;
	}

	if (addr_type) {
    3b5e:	b133      	cbz	r3, 3b6e <ll_addr_get+0x1a>
		if (bdaddr) {
    3b60:	b119      	cbz	r1, 3b6a <ll_addr_get+0x16>
			memcpy(bdaddr, rnd_addr, BDADDR_SIZE);
    3b62:	2206      	movs	r2, #6
    3b64:	4906      	ldr	r1, [pc, #24]	; (3b80 <ll_addr_get+0x2c>)
    3b66:	f7fc fd47 	bl	5f8 <memcpy>
		}

		return rnd_addr;
    3b6a:	4805      	ldr	r0, [pc, #20]	; (3b80 <ll_addr_get+0x2c>)
    3b6c:	bd08      	pop	{r3, pc}
	}

	if (bdaddr) {
    3b6e:	b119      	cbz	r1, 3b78 <ll_addr_get+0x24>
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
    3b70:	2206      	movs	r2, #6
    3b72:	4904      	ldr	r1, [pc, #16]	; (3b84 <ll_addr_get+0x30>)
    3b74:	f7fc fd40 	bl	5f8 <memcpy>
	}

	return pub_addr;
    3b78:	4802      	ldr	r0, [pc, #8]	; (3b84 <ll_addr_get+0x30>)
}
    3b7a:	bd08      	pop	{r3, pc}
		return NULL;
    3b7c:	2000      	movs	r0, #0
    3b7e:	bd08      	pop	{r3, pc}
    3b80:	200002de 	.word	0x200002de
    3b84:	200002d8 	.word	0x200002d8

00003b88 <ll_addr_set>:

u32_t ll_addr_set(u8_t addr_type, u8_t const *const bdaddr)
{
    3b88:	b570      	push	{r4, r5, r6, lr}
    3b8a:	4606      	mov	r6, r0
    3b8c:	460d      	mov	r5, r1
	if (ll_adv_is_enabled() ||
    3b8e:	f004 fd47 	bl	8620 <ll_adv_is_enabled>
    3b92:	4604      	mov	r4, r0
    3b94:	b110      	cbz	r0, 3b9c <ll_addr_set+0x14>
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
    3b96:	240c      	movs	r4, #12
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
}
    3b98:	4620      	mov	r0, r4
    3b9a:	bd70      	pop	{r4, r5, r6, pc}
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
    3b9c:	f004 fd56 	bl	864c <ll_scan_is_enabled>
	if (ll_adv_is_enabled() ||
    3ba0:	f010 0f06 	tst.w	r0, #6
    3ba4:	d1f7      	bne.n	3b96 <ll_addr_set+0xe>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    3ba6:	2206      	movs	r2, #6
    3ba8:	4629      	mov	r1, r5
	if (addr_type) {
    3baa:	b11e      	cbz	r6, 3bb4 <ll_addr_set+0x2c>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    3bac:	4802      	ldr	r0, [pc, #8]	; (3bb8 <ll_addr_set+0x30>)
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    3bae:	f7fc fd23 	bl	5f8 <memcpy>
    3bb2:	e7f1      	b.n	3b98 <ll_addr_set+0x10>
    3bb4:	4801      	ldr	r0, [pc, #4]	; (3bbc <ll_addr_set+0x34>)
    3bb6:	e7fa      	b.n	3bae <ll_addr_set+0x26>
    3bb8:	200002de 	.word	0x200002de
    3bbc:	200002d8 	.word	0x200002d8

00003bc0 <ll_tx_pwr_get>:
}

void ll_tx_pwr_get(s8_t *min, s8_t *max)
{
	/* TODO: Support TX Power Level other than 0dBm */
	*min = 0;
    3bc0:	2300      	movs	r3, #0
    3bc2:	7003      	strb	r3, [r0, #0]
	*max = 0;
    3bc4:	700b      	strb	r3, [r1, #0]
    3bc6:	4770      	bx	lr

00003bc8 <bt_rand>:
#include "common/log.h"

#include "hal/ecb.h"

int bt_rand(void *buf, size_t len)
{
    3bc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3bca:	4607      	mov	r7, r0
    3bcc:	460e      	mov	r6, r1
	while (len) {
    3bce:	460c      	mov	r4, r1
    3bd0:	1b35      	subs	r5, r6, r4
    3bd2:	443d      	add	r5, r7
    3bd4:	b18c      	cbz	r4, 3bfa <bt_rand+0x32>
		u32_t v = sys_rand32_get();
    3bd6:	f7fd fc25 	bl	1424 <sys_rand32_get>

		if (len >= sizeof(v)) {
    3bda:	2c03      	cmp	r4, #3
		u32_t v = sys_rand32_get();
    3bdc:	9001      	str	r0, [sp, #4]
		if (len >= sizeof(v)) {
    3bde:	d907      	bls.n	3bf0 <bt_rand+0x28>
			memcpy(buf, &v, sizeof(v));
    3be0:	2204      	movs	r2, #4
    3be2:	eb0d 0102 	add.w	r1, sp, r2
    3be6:	4628      	mov	r0, r5
    3be8:	f7fc fd06 	bl	5f8 <memcpy>

			buf += sizeof(v);
			len -= sizeof(v);
    3bec:	3c04      	subs	r4, #4
    3bee:	e7ef      	b.n	3bd0 <bt_rand+0x8>
		} else {
			memcpy(buf, &v, len);
    3bf0:	4622      	mov	r2, r4
    3bf2:	a901      	add	r1, sp, #4
    3bf4:	4628      	mov	r0, r5
    3bf6:	f7fc fcff 	bl	5f8 <memcpy>
			break;
		}
	}

	return 0;
}
    3bfa:	2000      	movs	r0, #0
    3bfc:	b003      	add	sp, #12
    3bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003c00 <_hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int _hci_driver_init(struct device *unused)
{
    3c00:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    3c02:	4802      	ldr	r0, [pc, #8]	; (3c0c <_hci_driver_init+0xc>)
    3c04:	f7fe fe72 	bl	28ec <bt_hci_driver_register>

	return 0;
}
    3c08:	2000      	movs	r0, #0
    3c0a:	bd08      	pop	{r3, pc}
    3c0c:	0000b514 	.word	0x0000b514

00003c10 <hci_driver_send>:
{
    3c10:	b510      	push	{r4, lr}
	if (!buf->len) {
    3c12:	8983      	ldrh	r3, [r0, #12]
{
    3c14:	4604      	mov	r4, r0
	if (!buf->len) {
    3c16:	b15b      	cbz	r3, 3c30 <hci_driver_send+0x20>
	switch (type) {
    3c18:	7d03      	ldrb	r3, [r0, #20]
    3c1a:	b94b      	cbnz	r3, 3c30 <hci_driver_send+0x20>
	evt = hci_cmd_handle(buf);
    3c1c:	f000 fa8c 	bl	4138 <hci_cmd_handle>
	if (evt) {
    3c20:	b108      	cbz	r0, 3c26 <hci_driver_send+0x16>
		bt_recv_prio(evt);
    3c22:	f7fe fe1d 	bl	2860 <bt_recv_prio>
		net_buf_unref(buf);
    3c26:	4620      	mov	r0, r4
    3c28:	f005 ff34 	bl	9a94 <net_buf_unref>
	return err;
    3c2c:	2000      	movs	r0, #0
    3c2e:	bd10      	pop	{r4, pc}
		return -EINVAL;
    3c30:	f06f 0015 	mvn.w	r0, #21
}
    3c34:	bd10      	pop	{r4, pc}
	...

00003c38 <recv_thread>:
{
    3c38:	b573      	push	{r0, r1, r4, r5, r6, lr}
		node_rx = k_fifo_get(&recv_fifo, K_FOREVER);
    3c3a:	4d1c      	ldr	r5, [pc, #112]	; (3cac <recv_thread+0x74>)
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    3c3c:	2600      	movs	r6, #0
		node_rx = k_fifo_get(&recv_fifo, K_FOREVER);
    3c3e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3c42:	4628      	mov	r0, r5
    3c44:	f006 f977 	bl	9f36 <k_queue_get>
		if (node_rx && !buf) {
    3c48:	4604      	mov	r4, r0
    3c4a:	b318      	cbz	r0, 3c94 <recv_thread+0x5c>
	s8_t class = hci_get_class(node_rx);
    3c4c:	f000 fde8 	bl	4820 <hci_get_class>
	switch (class) {
    3c50:	2802      	cmp	r0, #2
    3c52:	9401      	str	r4, [sp, #4]
    3c54:	d821      	bhi.n	3c9a <recv_thread+0x62>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    3c56:	2801      	cmp	r0, #1
			buf = bt_buf_get_rx(BT_BUF_EVT, K_NO_WAIT);
    3c58:	bf0e      	itee	eq
    3c5a:	2100      	moveq	r1, #0
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    3c5c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    3c60:	2001      	movne	r0, #1
    3c62:	f7fe ff47 	bl	2af4 <bt_buf_get_rx>
    3c66:	4604      	mov	r4, r0
		if (buf) {
    3c68:	b118      	cbz	r0, 3c72 <recv_thread+0x3a>
			hci_evt_encode(node_rx, buf);
    3c6a:	4601      	mov	r1, r0
    3c6c:	9801      	ldr	r0, [sp, #4]
    3c6e:	f000 fd49 	bl	4704 <hci_evt_encode>
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    3c72:	9b01      	ldr	r3, [sp, #4]
    3c74:	2100      	movs	r1, #0
    3c76:	88d8      	ldrh	r0, [r3, #6]
    3c78:	f004 fdae 	bl	87d8 <radio_rx_fc_set>
	node_rx->hdr.onion.next = 0;
    3c7c:	a802      	add	r0, sp, #8
    3c7e:	f850 3d04 	ldr.w	r3, [r0, #-4]!
    3c82:	601e      	str	r6, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    3c84:	f004 fd48 	bl	8718 <ll_rx_mem_release>
		if (buf) {
    3c88:	b124      	cbz	r4, 3c94 <recv_thread+0x5c>
			if (buf->len) {
    3c8a:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
    3c8c:	4620      	mov	r0, r4
			if (buf->len) {
    3c8e:	b153      	cbz	r3, 3ca6 <recv_thread+0x6e>
				bt_recv(buf);
    3c90:	f7fe fcce 	bl	2630 <bt_recv>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    3c94:	f006 fafa 	bl	a28c <_impl_k_yield>
    3c98:	e7d1      	b.n	3c3e <recv_thread+0x6>
		LL_ASSERT(0);
    3c9a:	4040      	eors	r0, r0
    3c9c:	f380 8811 	msr	BASEPRI, r0
    3ca0:	f04f 0004 	mov.w	r0, #4
    3ca4:	df02      	svc	2
				net_buf_unref(buf);
    3ca6:	f005 fef5 	bl	9a94 <net_buf_unref>
    3caa:	e7f3      	b.n	3c94 <recv_thread+0x5c>
    3cac:	20003a2c 	.word	0x20003a2c

00003cb0 <prio_recv_thread>:
{
    3cb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    3cb2:	4c0c      	ldr	r4, [pc, #48]	; (3ce4 <prio_recv_thread+0x34>)
			k_fifo_put(&recv_fifo, node_rx);
    3cb4:	4d0c      	ldr	r5, [pc, #48]	; (3ce8 <prio_recv_thread+0x38>)
		while ((num_cmplt = ll_rx_get(&node_rx, &handle))) {
    3cb6:	f10d 0102 	add.w	r1, sp, #2
    3cba:	a801      	add	r0, sp, #4
    3cbc:	f004 fcf4 	bl	86a8 <ll_rx_get>
    3cc0:	2800      	cmp	r0, #0
    3cc2:	d1f8      	bne.n	3cb6 <prio_recv_thread+0x6>
		if (node_rx) {
    3cc4:	9b01      	ldr	r3, [sp, #4]
    3cc6:	b133      	cbz	r3, 3cd6 <prio_recv_thread+0x26>
			ll_rx_dequeue();
    3cc8:	f004 fed6 	bl	8a78 <ll_rx_dequeue>
			k_fifo_put(&recv_fifo, node_rx);
    3ccc:	9901      	ldr	r1, [sp, #4]
    3cce:	4628      	mov	r0, r5
    3cd0:	f006 f90d 	bl	9eee <k_queue_append>
    3cd4:	e7ef      	b.n	3cb6 <prio_recv_thread+0x6>
    3cd6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3cda:	4620      	mov	r0, r4
    3cdc:	f006 fbb2 	bl	a444 <_impl_k_sem_take>
    3ce0:	e7e9      	b.n	3cb6 <prio_recv_thread+0x6>
    3ce2:	bf00      	nop
    3ce4:	20003a14 	.word	0x20003a14
    3ce8:	20003a2c 	.word	0x20003a2c

00003cec <hci_driver_open>:
{
    3cec:	b510      	push	{r4, lr}
	err = ll_init(&sem_prio_recv);
    3cee:	4814      	ldr	r0, [pc, #80]	; (3d40 <hci_driver_open+0x54>)
{
    3cf0:	b086      	sub	sp, #24
	err = ll_init(&sem_prio_recv);
    3cf2:	f004 ff65 	bl	8bc0 <ll_init>
	if (err) {
    3cf6:	4604      	mov	r4, r0
    3cf8:	b9f8      	cbnz	r0, 3d3a <hci_driver_open+0x4e>
	hci_init(NULL);
    3cfa:	f000 fdb1 	bl	4860 <hci_init>

    3cfe:	f06f 0309 	mvn.w	r3, #9
    3d02:	9303      	str	r3, [sp, #12]
    3d04:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    3d08:	4b0e      	ldr	r3, [pc, #56]	; (3d44 <hci_driver_open+0x58>)
    3d0a:	490f      	ldr	r1, [pc, #60]	; (3d48 <hci_driver_open+0x5c>)
    3d0c:	9405      	str	r4, [sp, #20]
    3d0e:	9404      	str	r4, [sp, #16]
    3d10:	9402      	str	r4, [sp, #8]
    3d12:	9401      	str	r4, [sp, #4]
    3d14:	9400      	str	r4, [sp, #0]
    3d16:	480d      	ldr	r0, [pc, #52]	; (3d4c <hci_driver_open+0x60>)
    3d18:	f006 fd56 	bl	a7c8 <_impl_k_thread_create>
    3d1c:	f06f 0307 	mvn.w	r3, #7
    3d20:	9303      	str	r3, [sp, #12]
    3d22:	9405      	str	r4, [sp, #20]
    3d24:	9404      	str	r4, [sp, #16]
    3d26:	9402      	str	r4, [sp, #8]
    3d28:	9401      	str	r4, [sp, #4]
    3d2a:	9400      	str	r4, [sp, #0]
    3d2c:	4b08      	ldr	r3, [pc, #32]	; (3d50 <hci_driver_open+0x64>)
    3d2e:	4909      	ldr	r1, [pc, #36]	; (3d54 <hci_driver_open+0x68>)
    3d30:	4809      	ldr	r0, [pc, #36]	; (3d58 <hci_driver_open+0x6c>)
    3d32:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3d36:	f006 fd47 	bl	a7c8 <_impl_k_thread_create>
}
    3d3a:	4620      	mov	r0, r4
    3d3c:	b006      	add	sp, #24
    3d3e:	bd10      	pop	{r4, pc}
    3d40:	20003a14 	.word	0x20003a14
    3d44:	00003cb1 	.word	0x00003cb1
    3d48:	20001fe0 	.word	0x20001fe0
    3d4c:	20001980 	.word	0x20001980
    3d50:	00003c39 	.word	0x00003c39
    3d54:	200021a0 	.word	0x200021a0
    3d58:	20001918 	.word	0x20001918

00003d5c <sys_put_le32>:
	dst[1] = val >> 8;
    3d5c:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
    3d60:	7008      	strb	r0, [r1, #0]
	sys_put_le16(val >> 16, &dst[2]);
    3d62:	0c00      	lsrs	r0, r0, #16
	dst[0] = val;
    3d64:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
    3d66:	0a00      	lsrs	r0, r0, #8
    3d68:	704b      	strb	r3, [r1, #1]
    3d6a:	70c8      	strb	r0, [r1, #3]
    3d6c:	4770      	bx	lr

00003d6e <evt_create>:
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
			     u16_t handle, struct net_buf *buf);
#endif /* CONFIG_BT_CONN */

static void evt_create(struct net_buf *buf, u8_t evt, u8_t len)
{
    3d6e:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_hdr *hdr;

	hdr = net_buf_add(buf, sizeof(*hdr));
    3d70:	3008      	adds	r0, #8
{
    3d72:	460d      	mov	r5, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
    3d74:	2102      	movs	r1, #2
{
    3d76:	4614      	mov	r4, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
    3d78:	f005 febe 	bl	9af8 <net_buf_simple_add>
	hdr->evt = evt;
    3d7c:	7005      	strb	r5, [r0, #0]
	hdr->len = len;
    3d7e:	7044      	strb	r4, [r0, #1]
    3d80:	bd38      	pop	{r3, r4, r5, pc}
	...

00003d84 <cmd_complete>:
}

static void *cmd_complete(struct net_buf **buf, u8_t plen)
{
    3d84:	b538      	push	{r3, r4, r5, lr}
    3d86:	4604      	mov	r4, r0
	struct bt_hci_evt_cmd_complete *cc;

	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    3d88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
{
    3d8c:	460d      	mov	r5, r1
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    3d8e:	f7fe fec1 	bl	2b14 <bt_buf_get_cmd_complete>

	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    3d92:	1cea      	adds	r2, r5, #3
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    3d94:	6020      	str	r0, [r4, #0]
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    3d96:	b2d2      	uxtb	r2, r2
    3d98:	210e      	movs	r1, #14
    3d9a:	f7ff ffe8 	bl	3d6e <evt_create>

	cc = net_buf_add(*buf, sizeof(*cc));
    3d9e:	6820      	ldr	r0, [r4, #0]
    3da0:	2103      	movs	r1, #3
    3da2:	3008      	adds	r0, #8
    3da4:	f005 fea8 	bl	9af8 <net_buf_simple_add>
	cc->ncmd = 1;
    3da8:	2301      	movs	r3, #1
    3daa:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(_opcode);
    3dac:	4b05      	ldr	r3, [pc, #20]	; (3dc4 <cmd_complete+0x40>)
    3dae:	881b      	ldrh	r3, [r3, #0]
    3db0:	f8a0 3001 	strh.w	r3, [r0, #1]

	return net_buf_add(*buf, plen);
    3db4:	6820      	ldr	r0, [r4, #0]
    3db6:	4629      	mov	r1, r5
    3db8:	3008      	adds	r0, #8
}
    3dba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_buf_add(*buf, plen);
    3dbe:	f005 be9b 	b.w	9af8 <net_buf_simple_add>
    3dc2:	bf00      	nop
    3dc4:	200002e4 	.word	0x200002e4

00003dc8 <meta_evt>:
	return buf;
}
#endif

static void *meta_evt(struct net_buf *buf, u8_t subevt, u8_t melen)
{
    3dc8:	b570      	push	{r4, r5, r6, lr}
    3dca:	4604      	mov	r4, r0
    3dcc:	4615      	mov	r5, r2
	struct bt_hci_evt_le_meta_event *me;

	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    3dce:	3201      	adds	r2, #1
{
    3dd0:	460e      	mov	r6, r1
	me = net_buf_add(buf, sizeof(*me));
    3dd2:	3408      	adds	r4, #8
	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    3dd4:	b2d2      	uxtb	r2, r2
    3dd6:	213e      	movs	r1, #62	; 0x3e
    3dd8:	f7ff ffc9 	bl	3d6e <evt_create>
	me = net_buf_add(buf, sizeof(*me));
    3ddc:	2101      	movs	r1, #1
    3dde:	4620      	mov	r0, r4
    3de0:	f005 fe8a 	bl	9af8 <net_buf_simple_add>
	me->subevent = subevt;
    3de4:	7006      	strb	r6, [r0, #0]

	return net_buf_add(buf, melen);
    3de6:	4629      	mov	r1, r5
    3de8:	4620      	mov	r0, r4
}
    3dea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return net_buf_add(buf, melen);
    3dee:	f005 be83 	b.w	9af8 <net_buf_simple_add>
	...

00003df4 <le_advertising_report>:
}
#endif /* CONFIG_BT_CTLR_DUP_FILTER_LEN > 0 */

static void le_advertising_report(struct pdu_data *pdu_data, u8_t *b,
				  struct net_buf *buf)
{
    3df4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    3df8:	2301      	movs	r3, #1
    3dfa:	f88d 3001 	strb.w	r3, [sp, #1]
    3dfe:	2303      	movs	r3, #3
    3e00:	f88d 3002 	strb.w	r3, [sp, #2]
    3e04:	23ff      	movs	r3, #255	; 0xff
    3e06:	f88d 3003 	strb.w	r3, [sp, #3]
    3e0a:	f88d 3005 	strb.w	r3, [sp, #5]
    3e0e:	2302      	movs	r3, #2
    3e10:	f88d 3006 	strb.w	r3, [sp, #6]
	if (adv->tx_addr) {
		ll_rl_crpa_set(0x00, NULL, rl_idx, &adv->adv_ind.addr[0]);
	}
#endif

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    3e14:	4b54      	ldr	r3, [pc, #336]	; (3f68 <le_advertising_report+0x174>)
{
    3e16:	4691      	mov	r9, r2
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    3e18:	2204      	movs	r2, #4
    3e1a:	f88d 2004 	strb.w	r2, [sp, #4]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    3e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
    3e22:	2200      	movs	r2, #0
    3e24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    3e28:	2500      	movs	r5, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    3e2a:	4313      	orrs	r3, r2
{
    3e2c:	4604      	mov	r4, r0
    3e2e:	4688      	mov	r8, r1
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    3e30:	f88d 5000 	strb.w	r5, [sp]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    3e34:	f000 8094 	beq.w	3f60 <le_advertising_report+0x16c>
	if ((!direct && !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) ||
	    (direct && !(le_event_mask & BT_HCI_EVT_LE_DIRECT_ADV_REPORT))) {
		return;
	}
#else
	if (!(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) {
    3e38:	4b4c      	ldr	r3, [pc, #304]	; (3f6c <le_advertising_report+0x178>)
    3e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
    3e3e:	2300      	movs	r3, #0
    3e40:	f002 0202 	and.w	r2, r2, #2
    3e44:	4313      	orrs	r3, r2
    3e46:	f000 808b 	beq.w	3f60 <le_advertising_report+0x16c>
	if (dup_count >= 0) {
    3e4a:	4e49      	ldr	r6, [pc, #292]	; (3f70 <le_advertising_report+0x17c>)
    3e4c:	6833      	ldr	r3, [r6, #0]
    3e4e:	42ab      	cmp	r3, r5
    3e50:	f100 0702 	add.w	r7, r0, #2
    3e54:	db49      	blt.n	3eea <le_advertising_report+0xf6>
    3e56:	f8df a124 	ldr.w	sl, [pc, #292]	; 3f7c <le_advertising_report+0x188>
		for (i = 0; i < dup_count; i++) {
    3e5a:	6833      	ldr	r3, [r6, #0]
    3e5c:	429d      	cmp	r5, r3
    3e5e:	db27      	blt.n	3eb0 <le_advertising_report+0xbc>
		memcpy(&dup_filter[dup_curr].addr.a.val[0],
    3e60:	4d44      	ldr	r5, [pc, #272]	; (3f74 <le_advertising_report+0x180>)
    3e62:	f8df a114 	ldr.w	sl, [pc, #276]	; 3f78 <le_advertising_report+0x184>
    3e66:	6828      	ldr	r0, [r5, #0]
    3e68:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
    3e6c:	2206      	movs	r2, #6
    3e6e:	4639      	mov	r1, r7
    3e70:	3002      	adds	r0, #2
    3e72:	f7fc fbc1 	bl	5f8 <memcpy>
		dup_filter[dup_curr].addr.type = adv->tx_addr;
    3e76:	682a      	ldr	r2, [r5, #0]
    3e78:	7823      	ldrb	r3, [r4, #0]
    3e7a:	eb0a 01c2 	add.w	r1, sl, r2, lsl #3
    3e7e:	f3c3 1380 	ubfx	r3, r3, #6, #1
    3e82:	704b      	strb	r3, [r1, #1]
		dup_filter[dup_curr].mask = BIT(adv->type);
    3e84:	7823      	ldrb	r3, [r4, #0]
    3e86:	f003 010f 	and.w	r1, r3, #15
    3e8a:	2301      	movs	r3, #1
    3e8c:	408b      	lsls	r3, r1
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    3e8e:	6831      	ldr	r1, [r6, #0]
		dup_filter[dup_curr].mask = BIT(adv->type);
    3e90:	f80a 3032 	strb.w	r3, [sl, r2, lsl #3]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    3e94:	290f      	cmp	r1, #15
			dup_count++;
    3e96:	bfd5      	itete	le
    3e98:	3101      	addle	r1, #1
			dup_curr++;
    3e9a:	3201      	addgt	r2, #1
			dup_curr = dup_count;
    3e9c:	6029      	strle	r1, [r5, #0]
			dup_curr++;
    3e9e:	602a      	strgt	r2, [r5, #0]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    3ea0:	682a      	ldr	r2, [r5, #0]
			dup_count++;
    3ea2:	bfd8      	it	le
    3ea4:	6031      	strle	r1, [r6, #0]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    3ea6:	2a10      	cmp	r2, #16
    3ea8:	d11f      	bne.n	3eea <le_advertising_report+0xf6>
			dup_curr = 0;
    3eaa:	2200      	movs	r2, #0
    3eac:	602a      	str	r2, [r5, #0]
    3eae:	e01c      	b.n	3eea <le_advertising_report+0xf6>
			if (!memcmp(&adv->adv_ind.addr[0],
    3eb0:	2206      	movs	r2, #6
    3eb2:	4651      	mov	r1, sl
    3eb4:	4638      	mov	r0, r7
    3eb6:	f7fc fb8a 	bl	5ce <memcmp>
    3eba:	b9f0      	cbnz	r0, 3efa <le_advertising_report+0x106>
			    adv->tx_addr == dup_filter[i].addr.type) {
    3ebc:	7823      	ldrb	r3, [r4, #0]
    3ebe:	f81a 1c01 	ldrb.w	r1, [sl, #-1]
    3ec2:	461a      	mov	r2, r3
    3ec4:	f3c3 1380 	ubfx	r3, r3, #6, #1
				    sizeof(bt_addr_t)) &&
    3ec8:	428b      	cmp	r3, r1
    3eca:	d116      	bne.n	3efa <le_advertising_report+0x106>
				if (dup_filter[i].mask & BIT(adv->type)) {
    3ecc:	482a      	ldr	r0, [pc, #168]	; (3f78 <le_advertising_report+0x184>)
    3ece:	f810 3035 	ldrb.w	r3, [r0, r5, lsl #3]
    3ed2:	f002 020f 	and.w	r2, r2, #15
    3ed6:	fa23 f102 	lsr.w	r1, r3, r2
    3eda:	07c9      	lsls	r1, r1, #31
    3edc:	d440      	bmi.n	3f60 <le_advertising_report+0x16c>
				dup_filter[i].mask |= BIT(adv->type);
    3ede:	2101      	movs	r1, #1
    3ee0:	fa01 f202 	lsl.w	r2, r1, r2
    3ee4:	4313      	orrs	r3, r2
    3ee6:	f800 3035 	strb.w	r3, [r0, r5, lsl #3]
	if (dup_found(adv)) {
		return;
	}
#endif /* CONFIG_BT_CTLR_DUP_FILTER_LEN > 0 */

	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    3eea:	7823      	ldrb	r3, [r4, #0]
    3eec:	f003 030f 	and.w	r3, r3, #15
    3ef0:	2b01      	cmp	r3, #1
    3ef2:	7863      	ldrb	r3, [r4, #1]
    3ef4:	d105      	bne.n	3f02 <le_advertising_report+0x10e>
		data_len = (adv->len - BDADDR_SIZE);
	} else {
		data_len = 0;
    3ef6:	2600      	movs	r6, #0
    3ef8:	e005      	b.n	3f06 <le_advertising_report+0x112>
		for (i = 0; i < dup_count; i++) {
    3efa:	3501      	adds	r5, #1
    3efc:	f10a 0a08 	add.w	sl, sl, #8
    3f00:	e7ab      	b.n	3e5a <le_advertising_report+0x66>
		data_len = (adv->len - BDADDR_SIZE);
    3f02:	1f9e      	subs	r6, r3, #6
    3f04:	b2f6      	uxtb	r6, r6
	}

	/* The Link Layer currently returns RSSI as an absolute value */
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    3f06:	4498      	add	r8, r3
	}
#endif /* CONFIG_BT_CTLR_EXT_SCAN_FP */

	info_len = sizeof(struct bt_hci_evt_le_advertising_info) + data_len +
		   sizeof(*prssi);
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    3f08:	f106 020b 	add.w	r2, r6, #11
    3f0c:	b2d2      	uxtb	r2, r2
    3f0e:	2102      	movs	r1, #2
    3f10:	4648      	mov	r0, r9
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    3f12:	f898 800a 	ldrb.w	r8, [r8, #10]
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    3f16:	f7ff ff57 	bl	3dc8 <meta_evt>
		       sizeof(*sep) + info_len);

	sep->num_reports = 1;
    3f1a:	2301      	movs	r3, #1
    3f1c:	7003      	strb	r3, [r0, #0]
	adv_info = (void *)(((u8_t *)sep) + sizeof(*sep));

	adv_info->evt_type = c_adv_type[adv->type];
    3f1e:	7823      	ldrb	r3, [r4, #0]
    3f20:	aa02      	add	r2, sp, #8
    3f22:	f003 030f 	and.w	r3, r3, #15
    3f26:	4413      	add	r3, r2
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    3f28:	4605      	mov	r5, r0
	adv_info->evt_type = c_adv_type[adv->type];
    3f2a:	f813 3c08 	ldrb.w	r3, [r3, #-8]
    3f2e:	7043      	strb	r3, [r0, #1]
	} else {
#else
	if (1) {
#endif /* CONFIG_BT_CTLR_PRIVACY */

		adv_info->addr.type = adv->tx_addr;
    3f30:	f814 3b08 	ldrb.w	r3, [r4], #8
    3f34:	f3c3 1380 	ubfx	r3, r3, #6, #1
    3f38:	7083      	strb	r3, [r0, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
    3f3a:	2206      	movs	r2, #6
    3f3c:	4639      	mov	r1, r7
    3f3e:	3003      	adds	r0, #3
    3f40:	f7fc fb5a 	bl	5f8 <memcpy>
		       sizeof(bt_addr_t));
	}

	adv_info->length = data_len;
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    3f44:	350a      	adds	r5, #10
	adv_info->length = data_len;
    3f46:	f805 6c01 	strb.w	r6, [r5, #-1]
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    3f4a:	f1c8 0800 	rsb	r8, r8, #0
    3f4e:	fa4f f888 	sxtb.w	r8, r8
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    3f52:	4632      	mov	r2, r6
    3f54:	4621      	mov	r1, r4
    3f56:	4628      	mov	r0, r5
    3f58:	f7fc fb4e 	bl	5f8 <memcpy>
	/* RSSI */
	prssi = &adv_info->data[0] + data_len;
	*prssi = rssi;
    3f5c:	f805 8006 	strb.w	r8, [r5, r6]
}
    3f60:	b002      	add	sp, #8
    3f62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3f66:	bf00      	nop
    3f68:	20003810 	.word	0x20003810
    3f6c:	20003818 	.word	0x20003818
    3f70:	200002e8 	.word	0x200002e8
    3f74:	200002ec 	.word	0x200002ec
    3f78:	200002f0 	.word	0x200002f0
    3f7c:	200002f2 	.word	0x200002f2

00003f80 <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
    3f80:	b570      	push	{r4, r5, r6, lr}
    3f82:	4604      	mov	r4, r0
    3f84:	4618      	mov	r0, r3
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    3f86:	4b13      	ldr	r3, [pc, #76]	; (3fd4 <le_remote_feat_complete+0x54>)
{
    3f88:	4616      	mov	r6, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    3f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
    3f8e:	2200      	movs	r2, #0
    3f90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    3f94:	4313      	orrs	r3, r2
{
    3f96:	460d      	mov	r5, r1
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    3f98:	d01b      	beq.n	3fd2 <le_remote_feat_complete+0x52>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    3f9a:	4b0f      	ldr	r3, [pc, #60]	; (3fd8 <le_remote_feat_complete+0x58>)
    3f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
    3fa0:	2300      	movs	r3, #0
    3fa2:	f002 0208 	and.w	r2, r2, #8
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    3fa6:	4313      	orrs	r3, r2
    3fa8:	d013      	beq.n	3fd2 <le_remote_feat_complete+0x52>
		return;
	}

	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
    3faa:	220b      	movs	r2, #11
    3fac:	2104      	movs	r1, #4
    3fae:	f7ff ff0b 	bl	3dc8 <meta_evt>

	sep->status = status;
	sep->handle = sys_cpu_to_le16(handle);
	if (!status) {
		memcpy(&sep->features[0],
    3fb2:	2208      	movs	r2, #8
	sep->status = status;
    3fb4:	7004      	strb	r4, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    3fb6:	f8a0 6001 	strh.w	r6, [r0, #1]
    3fba:	3003      	adds	r0, #3
	if (!status) {
    3fbc:	b924      	cbnz	r4, 3fc8 <le_remote_feat_complete+0x48>
		memcpy(&sep->features[0],
    3fbe:	1d29      	adds	r1, r5, #4
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
    3fc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(&sep->features[0],
    3fc4:	f7fc bb18 	b.w	5f8 <memcpy>
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    3fc8:	2100      	movs	r1, #0
}
    3fca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    3fce:	f7fc bb3f 	b.w	650 <memset>
    3fd2:	bd70      	pop	{r4, r5, r6, pc}
    3fd4:	20003810 	.word	0x20003810
    3fd8:	20003818 	.word	0x20003818

00003fdc <bt_addr_le_to_str.constprop.36>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    3fdc:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    3fde:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    3fe0:	b08a      	sub	sp, #40	; 0x28
    3fe2:	4604      	mov	r4, r0
    3fe4:	460e      	mov	r6, r1
    3fe6:	ad07      	add	r5, sp, #28
	switch (addr->type) {
    3fe8:	2b03      	cmp	r3, #3
    3fea:	d820      	bhi.n	402e <bt_addr_le_to_str.constprop.36+0x52>
    3fec:	e8df f003 	tbb	[pc, r3]
    3ff0:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    3ff4:	4911      	ldr	r1, [pc, #68]	; (403c <bt_addr_le_to_str.constprop.36+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    3ff6:	4628      	mov	r0, r5
    3ff8:	f7fc fad2 	bl	5a0 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    3ffc:	7862      	ldrb	r2, [r4, #1]
    3ffe:	9204      	str	r2, [sp, #16]
    4000:	78a2      	ldrb	r2, [r4, #2]
    4002:	9203      	str	r2, [sp, #12]
    4004:	78e2      	ldrb	r2, [r4, #3]
    4006:	9202      	str	r2, [sp, #8]
    4008:	7922      	ldrb	r2, [r4, #4]
    400a:	9201      	str	r2, [sp, #4]
    400c:	7962      	ldrb	r2, [r4, #5]
    400e:	9200      	str	r2, [sp, #0]
    4010:	79a3      	ldrb	r3, [r4, #6]
    4012:	9505      	str	r5, [sp, #20]
    4014:	4a0a      	ldr	r2, [pc, #40]	; (4040 <bt_addr_le_to_str.constprop.36+0x64>)
    4016:	211b      	movs	r1, #27
    4018:	4630      	mov	r0, r6
    401a:	f7fd f9e5 	bl	13e8 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    401e:	b00a      	add	sp, #40	; 0x28
    4020:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    4022:	4908      	ldr	r1, [pc, #32]	; (4044 <bt_addr_le_to_str.constprop.36+0x68>)
    4024:	e7e7      	b.n	3ff6 <bt_addr_le_to_str.constprop.36+0x1a>
		strcpy(type, "public id");
    4026:	4908      	ldr	r1, [pc, #32]	; (4048 <bt_addr_le_to_str.constprop.36+0x6c>)
    4028:	e7e5      	b.n	3ff6 <bt_addr_le_to_str.constprop.36+0x1a>
		strcpy(type, "random id");
    402a:	4908      	ldr	r1, [pc, #32]	; (404c <bt_addr_le_to_str.constprop.36+0x70>)
    402c:	e7e3      	b.n	3ff6 <bt_addr_le_to_str.constprop.36+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    402e:	4a08      	ldr	r2, [pc, #32]	; (4050 <bt_addr_le_to_str.constprop.36+0x74>)
    4030:	210a      	movs	r1, #10
    4032:	4628      	mov	r0, r5
    4034:	f7fd f9d8 	bl	13e8 <snprintk>
    4038:	e7e0      	b.n	3ffc <bt_addr_le_to_str.constprop.36+0x20>
    403a:	bf00      	nop
    403c:	0000af3c 	.word	0x0000af3c
    4040:	0000af65 	.word	0x0000af65
    4044:	0000af43 	.word	0x0000af43
    4048:	0000af4a 	.word	0x0000af4a
    404c:	0000af54 	.word	0x0000af54
    4050:	0000af5e 	.word	0x0000af5e

00004054 <le_adv_ext_report.isra.34>:
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    4054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    4058:	7803      	ldrb	r3, [r0, #0]
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    405a:	4616      	mov	r6, r2
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    405c:	f003 020f 	and.w	r2, r3, #15
    4060:	2a07      	cmp	r2, #7
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    4062:	b08a      	sub	sp, #40	; 0x28
    4064:	4604      	mov	r4, r0
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    4066:	d15d      	bne.n	4124 <le_adv_ext_report.isra.34+0xd0>
		  offsetof(struct pdu_adv, payload) + adv->len];
    4068:	7842      	ldrb	r2, [r0, #1]
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    406a:	2a00      	cmp	r2, #0
    406c:	d05a      	beq.n	4124 <le_adv_ext_report.isra.34+0xd0>
		if (!p->ext_hdr_len) {
    406e:	7880      	ldrb	r0, [r0, #2]
    4070:	0680      	lsls	r0, r0, #26
    4072:	d054      	beq.n	411e <le_adv_ext_report.isra.34+0xca>
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    4074:	4411      	add	r1, r2
		if (h->adv_addr) {
    4076:	78e2      	ldrb	r2, [r4, #3]
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    4078:	7a8f      	ldrb	r7, [r1, #10]
		if (h->adv_addr) {
    407a:	07d1      	lsls	r1, r2, #31
		ptr = (u8_t *)h + sizeof(*h);
    407c:	f104 0504 	add.w	r5, r4, #4
		if (h->adv_addr) {
    4080:	d511      	bpl.n	40a6 <le_adv_ext_report.isra.34+0x52>
			addr.type = adv->tx_addr;
    4082:	f10d 0828 	add.w	r8, sp, #40	; 0x28
    4086:	f3c3 1380 	ubfx	r3, r3, #6, #1
    408a:	f808 3d24 	strb.w	r3, [r8, #-36]!
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    408e:	4629      	mov	r1, r5
    4090:	2206      	movs	r2, #6
    4092:	f10d 0005 	add.w	r0, sp, #5
    4096:	f7fc faaf 	bl	5f8 <memcpy>
			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    409a:	a903      	add	r1, sp, #12
    409c:	4640      	mov	r0, r8
			ptr += BDADDR_SIZE;
    409e:	f104 050a 	add.w	r5, r4, #10
			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    40a2:	f7ff ff9b 	bl	3fdc <bt_addr_le_to_str.constprop.36>
		if(h->tgt_addr){
    40a6:	78e3      	ldrb	r3, [r4, #3]
    40a8:	079a      	lsls	r2, r3, #30
			ptr += BDADDR_SIZE;
    40aa:	bf48      	it	mi
    40ac:	3506      	addmi	r5, #6
		if(h->adi){
    40ae:	0718      	lsls	r0, r3, #28
			ptr += sizeof(*adi_ptr);
    40b0:	bf48      	it	mi
    40b2:	3502      	addmi	r5, #2
		if(h->aux_ptr){
    40b4:	06d9      	lsls	r1, r3, #27
			ptr += sizeof(*ap);
    40b6:	bf48      	it	mi
    40b8:	3503      	addmi	r5, #3
		if (h->tx_pwr) {
    40ba:	065a      	lsls	r2, r3, #25
		data_len = adv->len -(p->ext_hdr_len + offsetof(struct pdu_adv_com_ext_adv,
    40bc:	78a2      	ldrb	r2, [r4, #2]
    40be:	f3c2 0305 	ubfx	r3, r2, #0, #6
    40c2:	7862      	ldrb	r2, [r4, #1]
    40c4:	eba2 0203 	sub.w	r2, r2, r3
    40c8:	b2d2      	uxtb	r2, r2
    40ca:	f102 38ff 	add.w	r8, r2, #4294967295	; 0xffffffff
		sep = meta_evt(buf, BT_HCI_EVT_LE_EXT_ADVERTISING_REPORT,
    40ce:	f102 0218 	add.w	r2, r2, #24
    40d2:	4630      	mov	r0, r6
    40d4:	b2d2      	uxtb	r2, r2
    40d6:	f04f 010d 	mov.w	r1, #13
			ptr++;
    40da:	bf48      	it	mi
    40dc:	3501      	addmi	r5, #1
		sep = meta_evt(buf, BT_HCI_EVT_LE_EXT_ADVERTISING_REPORT,
    40de:	f7ff fe73 	bl	3dc8 <meta_evt>
		sep->num_reports = 1;
    40e2:	2301      	movs	r3, #1
    40e4:	7003      	strb	r3, [r0, #0]
		if(h->adv_addr){
    40e6:	78e3      	ldrb	r3, [r4, #3]
    40e8:	07db      	lsls	r3, r3, #31
		data_len = adv->len -(p->ext_hdr_len + offsetof(struct pdu_adv_com_ext_adv,
    40ea:	fa5f f888 	uxtb.w	r8, r8
		sep = meta_evt(buf, BT_HCI_EVT_LE_EXT_ADVERTISING_REPORT,
    40ee:	4606      	mov	r6, r0
		if(h->adv_addr){
    40f0:	d508      	bpl.n	4104 <le_adv_ext_report.isra.34+0xb0>
			adv_info->addr.type = addr.type;
    40f2:	f89d 3004 	ldrb.w	r3, [sp, #4]
    40f6:	7083      	strb	r3, [r0, #2]
			memcpy(&adv_info->addr.a.val[0], &addr.a.val[0],
    40f8:	2206      	movs	r2, #6
    40fa:	f10d 0105 	add.w	r1, sp, #5
    40fe:	3003      	adds	r0, #3
    4100:	f7fc fa7a 	bl	5f8 <memcpy>
		adv_info->evt_type = 0x07;
    4104:	2307      	movs	r3, #7
    4106:	7073      	strb	r3, [r6, #1]
		adv_info->length = data_len;
    4108:	f886 8017 	strb.w	r8, [r6, #23]
		memcpy(&adv_info->data[0], ptr, data_len);
    410c:	3618      	adds	r6, #24
    410e:	4642      	mov	r2, r8
    4110:	4629      	mov	r1, r5
    4112:	4630      	mov	r0, r6
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    4114:	427f      	negs	r7, r7
		memcpy(&adv_info->data[0], ptr, data_len);
    4116:	f7fc fa6f 	bl	5f8 <memcpy>
		*prssi = rssi;
    411a:	f806 7008 	strb.w	r7, [r6, r8]
}
    411e:	b00a      	add	sp, #40	; 0x28
    4120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		le_advertising_report(pdu_data, b, buf);
    4124:	4632      	mov	r2, r6
    4126:	4620      	mov	r0, r4
    4128:	f7ff fe64 	bl	3df4 <le_advertising_report>
    412c:	e7f7      	b.n	411e <le_adv_ext_report.isra.34+0xca>

0000412e <sys_get_le64>:
{
    412e:	4603      	mov	r3, r0
}
    4130:	6800      	ldr	r0, [r0, #0]
    4132:	6859      	ldr	r1, [r3, #4]
    4134:	4770      	bx	lr
	...

00004138 <hci_cmd_handle>:
{
    4138:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
    413a:	8981      	ldrh	r1, [r0, #12]
{
    413c:	b08f      	sub	sp, #60	; 0x3c
	struct net_buf *evt = NULL;
    413e:	2600      	movs	r6, #0
	if (cmd->len < sizeof(*chdr)) {
    4140:	2902      	cmp	r1, #2
{
    4142:	4605      	mov	r5, r0
	struct net_buf *evt = NULL;
    4144:	9603      	str	r6, [sp, #12]
	if (cmd->len < sizeof(*chdr)) {
    4146:	d802      	bhi.n	414e <hci_cmd_handle+0x16>
		return NULL;
    4148:	2000      	movs	r0, #0
}
    414a:	b00f      	add	sp, #60	; 0x3c
    414c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chdr = (void *)cmd->data;
    414e:	6883      	ldr	r3, [r0, #8]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    4150:	4cc3      	ldr	r4, [pc, #780]	; (4460 <hci_cmd_handle+0x328>)
    4152:	781a      	ldrb	r2, [r3, #0]
    4154:	7858      	ldrb	r0, [r3, #1]
	if (cmd->len < chdr->param_len) {
    4156:	789b      	ldrb	r3, [r3, #2]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    4158:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	if (cmd->len < chdr->param_len) {
    415c:	428b      	cmp	r3, r1
	_opcode = sys_le16_to_cpu(chdr->opcode);
    415e:	8022      	strh	r2, [r4, #0]
	if (cmd->len < chdr->param_len) {
    4160:	d8f2      	bhi.n	4148 <hci_cmd_handle+0x10>
	net_buf_pull(cmd, sizeof(*chdr));
    4162:	2103      	movs	r1, #3
    4164:	f105 0008 	add.w	r0, r5, #8
    4168:	f005 fcd5 	bl	9b16 <net_buf_simple_pull>
	ocf = BT_OCF(_opcode);
    416c:	8827      	ldrh	r7, [r4, #0]
    416e:	f3c7 0409 	ubfx	r4, r7, #0, #10
	switch (BT_OGF(_opcode)) {
    4172:	0abf      	lsrs	r7, r7, #10
    4174:	2f04      	cmp	r7, #4
    4176:	d067      	beq.n	4248 <hci_cmd_handle+0x110>
    4178:	d807      	bhi.n	418a <hci_cmd_handle+0x52>
    417a:	2f03      	cmp	r7, #3
    417c:	d024      	beq.n	41c8 <hci_cmd_handle+0x90>
		ccst = cmd_complete(&evt, sizeof(*ccst));
    417e:	2101      	movs	r1, #1
    4180:	a803      	add	r0, sp, #12
    4182:	f7ff fdff 	bl	3d84 <cmd_complete>
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    4186:	2301      	movs	r3, #1
    4188:	e1ab      	b.n	44e2 <hci_cmd_handle+0x3aa>
	switch (BT_OGF(_opcode)) {
    418a:	2f08      	cmp	r7, #8
    418c:	f000 80e9 	beq.w	4362 <hci_cmd_handle+0x22a>
    4190:	2f3f      	cmp	r7, #63	; 0x3f
    4192:	d1f4      	bne.n	417e <hci_cmd_handle+0x46>
	switch (ocf) {
    4194:	3c01      	subs	r4, #1
    4196:	2c09      	cmp	r4, #9
    4198:	d8f1      	bhi.n	417e <hci_cmd_handle+0x46>
    419a:	a301      	add	r3, pc, #4	; (adr r3, 41a0 <hci_cmd_handle+0x68>)
    419c:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
    41a0:	0000451f 	.word	0x0000451f
    41a4:	0000454d 	.word	0x0000454d
    41a8:	00004575 	.word	0x00004575
    41ac:	0000417f 	.word	0x0000417f
    41b0:	0000417f 	.word	0x0000417f
    41b4:	000045b9 	.word	0x000045b9
    41b8:	0000417f 	.word	0x0000417f
    41bc:	0000458b 	.word	0x0000458b
    41c0:	000045c3 	.word	0x000045c3
    41c4:	0000462f 	.word	0x0000462f
	switch (ocf) {
    41c8:	2c03      	cmp	r4, #3
    41ca:	d014      	beq.n	41f6 <hci_cmd_handle+0xbe>
    41cc:	d808      	bhi.n	41e0 <hci_cmd_handle+0xa8>
    41ce:	2c01      	cmp	r4, #1
    41d0:	d1d5      	bne.n	417e <hci_cmd_handle+0x46>
	event_mask = sys_get_le64(cmd->events);
    41d2:	68a8      	ldr	r0, [r5, #8]
    41d4:	f7ff ffab 	bl	412e <sys_get_le64>
    41d8:	4ba2      	ldr	r3, [pc, #648]	; (4464 <hci_cmd_handle+0x32c>)
    41da:	e9c3 0100 	strd	r0, r1, [r3]
    41de:	e003      	b.n	41e8 <hci_cmd_handle+0xb0>
	switch (ocf) {
    41e0:	2c2d      	cmp	r4, #45	; 0x2d
    41e2:	d01b      	beq.n	421c <hci_cmd_handle+0xe4>
    41e4:	2c63      	cmp	r4, #99	; 0x63
    41e6:	d1ca      	bne.n	417e <hci_cmd_handle+0x46>
	ccst = cmd_complete(evt, sizeof(*ccst));
    41e8:	2101      	movs	r1, #1
    41ea:	a803      	add	r0, sp, #12
    41ec:	f7ff fdca 	bl	3d84 <cmd_complete>
	ccst->status = 0x00;
    41f0:	7006      	strb	r6, [r0, #0]
	return evt;
    41f2:	9803      	ldr	r0, [sp, #12]
    41f4:	e7a9      	b.n	414a <hci_cmd_handle+0x12>
	dup_count = -1;
    41f6:	4b9c      	ldr	r3, [pc, #624]	; (4468 <hci_cmd_handle+0x330>)
    41f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    41fc:	601a      	str	r2, [r3, #0]
	event_mask = DEFAULT_EVENT_MASK;
    41fe:	4b99      	ldr	r3, [pc, #612]	; (4464 <hci_cmd_handle+0x32c>)
    4200:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4204:	f641 71ff 	movw	r1, #8191	; 0x1fff
    4208:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    420c:	4b97      	ldr	r3, [pc, #604]	; (446c <hci_cmd_handle+0x334>)
    420e:	201f      	movs	r0, #31
    4210:	2100      	movs	r1, #0
    4212:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
    4216:	f004 f9b3 	bl	8580 <ll_reset>
    421a:	e7e5      	b.n	41e8 <hci_cmd_handle+0xb0>
    421c:	68ab      	ldr	r3, [r5, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    421e:	2104      	movs	r1, #4
    4220:	a803      	add	r0, sp, #12
	handle = sys_le16_to_cpu(cmd->handle);
    4222:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
    4224:	789f      	ldrb	r7, [r3, #2]
	rp = cmd_complete(evt, sizeof(*rp));
    4226:	f7ff fdad 	bl	3d84 <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    422a:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    422c:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(handle, type, &rp->tx_power_level);
    422e:	1cc2      	adds	r2, r0, #3
    4230:	4639      	mov	r1, r7
    4232:	4630      	mov	r0, r6
    4234:	f004 fa2e 	bl	8694 <ll_tx_pwr_lvl_get>
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    4238:	2800      	cmp	r0, #0
    423a:	bf14      	ite	ne
    423c:	2302      	movne	r3, #2
    423e:	2300      	moveq	r3, #0
    4240:	7023      	strb	r3, [r4, #0]
	rp->handle = sys_cpu_to_le16(handle);
    4242:	f8a4 5001 	strh.w	r5, [r4, #1]
    4246:	e7d4      	b.n	41f2 <hci_cmd_handle+0xba>
	switch (ocf) {
    4248:	3c01      	subs	r4, #1
    424a:	2c08      	cmp	r4, #8
    424c:	d897      	bhi.n	417e <hci_cmd_handle+0x46>
    424e:	a301      	add	r3, pc, #4	; (adr r3, 4254 <hci_cmd_handle+0x11c>)
    4250:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
    4254:	00004279 	.word	0x00004279
    4258:	000042a3 	.word	0x000042a3
    425c:	0000432f 	.word	0x0000432f
    4260:	0000417f 	.word	0x0000417f
    4264:	0000417f 	.word	0x0000417f
    4268:	0000417f 	.word	0x0000417f
    426c:	0000417f 	.word	0x0000417f
    4270:	0000417f 	.word	0x0000417f
    4274:	0000434b 	.word	0x0000434b
	rp = cmd_complete(evt, sizeof(*rp));
    4278:	2109      	movs	r1, #9
    427a:	a803      	add	r0, sp, #12
    427c:	f7ff fd82 	bl	3d84 <cmd_complete>
	rp->status = 0x00;
    4280:	2300      	movs	r3, #0
    4282:	7003      	strb	r3, [r0, #0]
	rp->hci_revision = sys_cpu_to_le16(0);
    4284:	7083      	strb	r3, [r0, #2]
    4286:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    4288:	f06f 030e 	mvn.w	r3, #14
    428c:	7143      	strb	r3, [r0, #5]
    428e:	2305      	movs	r3, #5
	rp->hci_version = BT_HCI_VERSION_5_0;
    4290:	2209      	movs	r2, #9
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    4292:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    4294:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	rp->hci_version = BT_HCI_VERSION_5_0;
    4298:	7042      	strb	r2, [r0, #1]
	rp->lmp_version = RADIO_BLE_VERSION_NUMBER;
    429a:	7102      	strb	r2, [r0, #4]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    429c:	71c3      	strb	r3, [r0, #7]
    429e:	7203      	strb	r3, [r0, #8]
    42a0:	e7a7      	b.n	41f2 <hci_cmd_handle+0xba>
	rp = cmd_complete(evt, sizeof(*rp));
    42a2:	2141      	movs	r1, #65	; 0x41
    42a4:	a803      	add	r0, sp, #12
    42a6:	f7ff fd6d 	bl	3d84 <cmd_complete>
	rp->status = 0x00;
    42aa:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    42ac:	4604      	mov	r4, r0
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    42ae:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    42b0:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    42b4:	f7fc f9cc 	bl	650 <memset>
	rp->commands[2] |= BIT(7);
    42b8:	78e3      	ldrb	r3, [r4, #3]
	rp->commands[27] |= BIT(6) | BIT(7);
    42ba:	7f21      	ldrb	r1, [r4, #28]
	rp->commands[26] |= BIT(6) | BIT(7);
    42bc:	7ee2      	ldrb	r2, [r4, #27]
	rp->commands[2] |= BIT(7);
    42be:	f063 037f 	orn	r3, r3, #127	; 0x7f
    42c2:	70e3      	strb	r3, [r4, #3]
	rp->commands[5] |= BIT(6) | BIT(7);
    42c4:	79a3      	ldrb	r3, [r4, #6]
    42c6:	f063 033f 	orn	r3, r3, #63	; 0x3f
    42ca:	71a3      	strb	r3, [r4, #6]
	rp->commands[10] |= BIT(2);
    42cc:	7ae3      	ldrb	r3, [r4, #11]
    42ce:	f043 0304 	orr.w	r3, r3, #4
    42d2:	72e3      	strb	r3, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
    42d4:	7be3      	ldrb	r3, [r4, #15]
    42d6:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    42da:	73e3      	strb	r3, [r4, #15]
	rp->commands[15] |= BIT(1);
    42dc:	7c23      	ldrb	r3, [r4, #16]
    42de:	f043 0302 	orr.w	r3, r3, #2
    42e2:	7423      	strb	r3, [r4, #16]
	rp->commands[22] |= BIT(2);
    42e4:	7de3      	ldrb	r3, [r4, #23]
    42e6:	f043 0304 	orr.w	r3, r3, #4
    42ea:	75e3      	strb	r3, [r4, #23]
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
    42ec:	7ea3      	ldrb	r3, [r4, #26]
    42ee:	f043 0317 	orr.w	r3, r3, #23
    42f2:	76a3      	strb	r3, [r4, #26]
	rp->commands[36] |= BIT(1);
    42f4:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
	rp->commands[36] |= BIT(4);
    42f8:	f043 0312 	orr.w	r3, r3, #18
    42fc:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	rp->commands[37] |= BIT(6);
    4300:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
	rp->commands[27] |= BIT(6) | BIT(7);
    4304:	f061 013c 	orn	r1, r1, #60	; 0x3c
	rp->commands[37] |= BIT(6);
    4308:	f043 0340 	orr.w	r3, r3, #64	; 0x40
	rp->commands[27] |= BIT(6) | BIT(7);
    430c:	7721      	strb	r1, [r4, #28]
	rp->commands[37] |= BIT(6);
    430e:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	rp->commands[28] |= BIT(3);
    4312:	7f61      	ldrb	r1, [r4, #29]
	rp->commands[38] |= BIT(7);
    4314:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	rp->commands[28] |= BIT(3);
    4318:	f041 0108 	orr.w	r1, r1, #8
	rp->commands[26] |= BIT(2) | BIT(3);
    431c:	f062 0233 	orn	r2, r2, #51	; 0x33
	rp->commands[38] |= BIT(7);
    4320:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[28] |= BIT(3);
    4324:	7761      	strb	r1, [r4, #29]
	rp->commands[26] |= BIT(2) | BIT(3);
    4326:	76e2      	strb	r2, [r4, #27]
	rp->commands[38] |= BIT(7);
    4328:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
    432c:	e761      	b.n	41f2 <hci_cmd_handle+0xba>
	rp = cmd_complete(evt, sizeof(*rp));
    432e:	2109      	movs	r1, #9
    4330:	a803      	add	r0, sp, #12
    4332:	f7ff fd27 	bl	3d84 <cmd_complete>
	rp->status = 0x00;
    4336:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    4338:	4604      	mov	r4, r0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    433a:	2208      	movs	r2, #8
	rp->status = 0x00;
    433c:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    4340:	f7fc f986 	bl	650 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
    4344:	2360      	movs	r3, #96	; 0x60
    4346:	7163      	strb	r3, [r4, #5]
    4348:	e753      	b.n	41f2 <hci_cmd_handle+0xba>
	rp = cmd_complete(evt, sizeof(*rp));
    434a:	2107      	movs	r1, #7
    434c:	a803      	add	r0, sp, #12
    434e:	f7ff fd19 	bl	3d84 <cmd_complete>
	rp->status = 0x00;
    4352:	4601      	mov	r1, r0
    4354:	2300      	movs	r3, #0
    4356:	f801 3b01 	strb.w	r3, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
    435a:	4618      	mov	r0, r3
    435c:	f7ff fbfa 	bl	3b54 <ll_addr_get>
    4360:	e747      	b.n	41f2 <hci_cmd_handle+0xba>
	switch (ocf) {
    4362:	2c0f      	cmp	r4, #15
    4364:	d065      	beq.n	4432 <hci_cmd_handle+0x2fa>
    4366:	d826      	bhi.n	43b6 <hci_cmd_handle+0x27e>
    4368:	2c03      	cmp	r4, #3
    436a:	d050      	beq.n	440e <hci_cmd_handle+0x2d6>
    436c:	d80f      	bhi.n	438e <hci_cmd_handle+0x256>
    436e:	2c01      	cmp	r4, #1
    4370:	d041      	beq.n	43f6 <hci_cmd_handle+0x2be>
    4372:	2c02      	cmp	r4, #2
    4374:	f47f af03 	bne.w	417e <hci_cmd_handle+0x46>
	rp = cmd_complete(evt, sizeof(*rp));
    4378:	2104      	movs	r1, #4
    437a:	a803      	add	r0, sp, #12
    437c:	f7ff fd02 	bl	3d84 <cmd_complete>
	rp->status = 0x00;
    4380:	2300      	movs	r3, #0
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    4382:	221b      	movs	r2, #27
	rp->status = 0x00;
    4384:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    4386:	7042      	strb	r2, [r0, #1]
    4388:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    438a:	70c4      	strb	r4, [r0, #3]
    438c:	e731      	b.n	41f2 <hci_cmd_handle+0xba>
	switch (ocf) {
    438e:	2c0b      	cmp	r4, #11
    4390:	f000 8093 	beq.w	44ba <hci_cmd_handle+0x382>
    4394:	2c0c      	cmp	r4, #12
    4396:	f000 80a6 	beq.w	44e6 <hci_cmd_handle+0x3ae>
    439a:	2c05      	cmp	r4, #5
    439c:	f47f aeef 	bne.w	417e <hci_cmd_handle+0x46>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
    43a0:	68a9      	ldr	r1, [r5, #8]
    43a2:	2001      	movs	r0, #1
    43a4:	f7ff fbf0 	bl	3b88 <ll_addr_set>
	status = ll_wl_remove(&cmd->addr);
    43a8:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    43aa:	2101      	movs	r1, #1
    43ac:	a803      	add	r0, sp, #12
    43ae:	f7ff fce9 	bl	3d84 <cmd_complete>
	ccst->status = status;
    43b2:	7004      	strb	r4, [r0, #0]
    43b4:	e71d      	b.n	41f2 <hci_cmd_handle+0xba>
	switch (ocf) {
    43b6:	2c17      	cmp	r4, #23
    43b8:	d05a      	beq.n	4470 <hci_cmd_handle+0x338>
    43ba:	d809      	bhi.n	43d0 <hci_cmd_handle+0x298>
    43bc:	2c11      	cmp	r4, #17
    43be:	d04b      	beq.n	4458 <hci_cmd_handle+0x320>
    43c0:	d341      	bcc.n	4446 <hci_cmd_handle+0x30e>
    43c2:	2c12      	cmp	r4, #18
    43c4:	f47f aedb 	bne.w	417e <hci_cmd_handle+0x46>
	status = ll_wl_remove(&cmd->addr);
    43c8:	68a8      	ldr	r0, [r5, #8]
    43ca:	f004 fd2d 	bl	8e28 <ll_wl_remove>
    43ce:	e7eb      	b.n	43a8 <hci_cmd_handle+0x270>
	switch (ocf) {
    43d0:	2c1c      	cmp	r4, #28
    43d2:	d060      	beq.n	4496 <hci_cmd_handle+0x35e>
    43d4:	2c4b      	cmp	r4, #75	; 0x4b
    43d6:	f000 8096 	beq.w	4506 <hci_cmd_handle+0x3ce>
    43da:	2c18      	cmp	r4, #24
    43dc:	f47f aecf 	bne.w	417e <hci_cmd_handle+0x46>
	rp = cmd_complete(evt, sizeof(*rp));
    43e0:	2109      	movs	r1, #9
    43e2:	a803      	add	r0, sp, #12
    43e4:	f7ff fcce 	bl	3d84 <cmd_complete>
	rp->status = 0x00;
    43e8:	2300      	movs	r3, #0
    43ea:	f800 3b01 	strb.w	r3, [r0], #1
	bt_rand(rp->rand, count);
    43ee:	2108      	movs	r1, #8
    43f0:	f7ff fbea 	bl	3bc8 <bt_rand>
    43f4:	e6fd      	b.n	41f2 <hci_cmd_handle+0xba>
	le_event_mask = sys_get_le64(cmd->events);
    43f6:	68a8      	ldr	r0, [r5, #8]
    43f8:	f7ff fe99 	bl	412e <sys_get_le64>
    43fc:	4b1b      	ldr	r3, [pc, #108]	; (446c <hci_cmd_handle+0x334>)
    43fe:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
    4402:	2101      	movs	r1, #1
    4404:	a803      	add	r0, sp, #12
    4406:	f7ff fcbd 	bl	3d84 <cmd_complete>
	ccst->status = 0x00;
    440a:	2300      	movs	r3, #0
    440c:	e069      	b.n	44e2 <hci_cmd_handle+0x3aa>
	rp = cmd_complete(evt, sizeof(*rp));
    440e:	2109      	movs	r1, #9
    4410:	a803      	add	r0, sp, #12
    4412:	f7ff fcb7 	bl	3d84 <cmd_complete>
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    4416:	463a      	mov	r2, r7
	rp = cmd_complete(evt, sizeof(*rp));
    4418:	4604      	mov	r4, r0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    441a:	4631      	mov	r1, r6
	rp->status = 0x00;
    441c:	f800 6b01 	strb.w	r6, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    4420:	f7fc f916 	bl	650 <memset>
	rp->features[0] = RADIO_BLE_FEAT & 0xFF;
    4424:	230c      	movs	r3, #12
    4426:	7063      	strb	r3, [r4, #1]
	rp->features[1] = (RADIO_BLE_FEAT >> 8)  & 0xFF;
    4428:	2340      	movs	r3, #64	; 0x40
    442a:	70a3      	strb	r3, [r4, #2]
	rp->features[2] = (RADIO_BLE_FEAT >> 16)  & 0xFF;
    442c:	2301      	movs	r3, #1
    442e:	70e3      	strb	r3, [r4, #3]
    4430:	e6df      	b.n	41f2 <hci_cmd_handle+0xba>
	rp = cmd_complete(evt, sizeof(*rp));
    4432:	2102      	movs	r1, #2
    4434:	a803      	add	r0, sp, #12
    4436:	f7ff fca5 	bl	3d84 <cmd_complete>
	rp->status = 0x00;
    443a:	7006      	strb	r6, [r0, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    443c:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
    443e:	f004 fca3 	bl	8d88 <ll_wl_size_get>
    4442:	7060      	strb	r0, [r4, #1]
    4444:	e6d5      	b.n	41f2 <hci_cmd_handle+0xba>
	ccst = cmd_complete(evt, sizeof(*ccst));
    4446:	2101      	movs	r1, #1
    4448:	a803      	add	r0, sp, #12
    444a:	f7ff fc9b 	bl	3d84 <cmd_complete>
    444e:	4604      	mov	r4, r0
	ccst->status = ll_wl_clear();
    4450:	f004 fc9c 	bl	8d8c <ll_wl_clear>
    4454:	7020      	strb	r0, [r4, #0]
    4456:	e6cc      	b.n	41f2 <hci_cmd_handle+0xba>
	status = ll_wl_add(&cmd->addr);
    4458:	68a8      	ldr	r0, [r5, #8]
    445a:	f004 fcad 	bl	8db8 <ll_wl_add>
    445e:	e7a3      	b.n	43a8 <hci_cmd_handle+0x270>
    4460:	200002e4 	.word	0x200002e4
    4464:	20003810 	.word	0x20003810
    4468:	200002e8 	.word	0x200002e8
    446c:	20003818 	.word	0x20003818
    4470:	68a8      	ldr	r0, [r5, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    4472:	aa04      	add	r2, sp, #16
    4474:	f100 0110 	add.w	r1, r0, #16
    4478:	4633      	mov	r3, r6
    447a:	f004 fd8f 	bl	8f9c <ecb_encrypt>
	rp = cmd_complete(evt, sizeof(*rp));
    447e:	2111      	movs	r1, #17
    4480:	a803      	add	r0, sp, #12
    4482:	f7ff fc7f 	bl	3d84 <cmd_complete>
	memcpy(rp->enc_data, enc_data, 16);
    4486:	2210      	movs	r2, #16
	rp->status = 0x00;
    4488:	f800 6b01 	strb.w	r6, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
    448c:	eb0d 0102 	add.w	r1, sp, r2
	memcpy(rp->info, build_info, sizeof(build_info));
    4490:	f7fc f8b2 	bl	5f8 <memcpy>
    4494:	e6ad      	b.n	41f2 <hci_cmd_handle+0xba>
	rp = cmd_complete(evt, sizeof(*rp));
    4496:	2109      	movs	r1, #9
    4498:	a803      	add	r0, sp, #12
    449a:	f7ff fc73 	bl	3d84 <cmd_complete>
	rp->status = 0x00;
    449e:	4601      	mov	r1, r0
    44a0:	2200      	movs	r2, #0
	rp = cmd_complete(evt, sizeof(*rp));
    44a2:	4604      	mov	r4, r0
	rp->status = 0x00;
    44a4:	f801 2b01 	strb.w	r2, [r1], #1
	sys_put_le32(val, dst);
    44a8:	f243 3030 	movw	r0, #13104	; 0x3330
    44ac:	f7ff fc56 	bl	3d5c <sys_put_le32>
	sys_put_le32(val >> 32, &dst[4]);
    44b0:	1d61      	adds	r1, r4, #5
    44b2:	4610      	mov	r0, r2
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    44b4:	f7ff fc52 	bl	3d5c <sys_put_le32>
    44b8:	e69b      	b.n	41f2 <hci_cmd_handle+0xba>
    44ba:	68ac      	ldr	r4, [r5, #8]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
    44bc:	7963      	ldrb	r3, [r4, #5]
    44be:	f8b4 2003 	ldrh.w	r2, [r4, #3]
    44c2:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    44c6:	7820      	ldrb	r0, [r4, #0]
    44c8:	79a4      	ldrb	r4, [r4, #6]
    44ca:	9400      	str	r4, [sp, #0]
    44cc:	f004 fc02 	bl	8cd4 <ll_scan_params_set>
	status = ll_scan_enable(cmd->enable);
    44d0:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    44d2:	2101      	movs	r1, #1
    44d4:	a803      	add	r0, sp, #12
    44d6:	f7ff fc55 	bl	3d84 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    44da:	2c00      	cmp	r4, #0
    44dc:	bf14      	ite	ne
    44de:	230c      	movne	r3, #12
    44e0:	2300      	moveq	r3, #0
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    44e2:	7003      	strb	r3, [r0, #0]
    44e4:	e685      	b.n	41f2 <hci_cmd_handle+0xba>
    44e6:	68aa      	ldr	r2, [r5, #8]
    44e8:	4b83      	ldr	r3, [pc, #524]	; (46f8 <hci_cmd_handle+0x5c0>)
	if (cmd->enable && cmd->filter_dup) {
    44ea:	7810      	ldrb	r0, [r2, #0]
    44ec:	b140      	cbz	r0, 4500 <hci_cmd_handle+0x3c8>
    44ee:	7852      	ldrb	r2, [r2, #1]
    44f0:	b132      	cbz	r2, 4500 <hci_cmd_handle+0x3c8>
		dup_count = 0;
    44f2:	2200      	movs	r2, #0
    44f4:	601a      	str	r2, [r3, #0]
		dup_curr = 0;
    44f6:	4b81      	ldr	r3, [pc, #516]	; (46fc <hci_cmd_handle+0x5c4>)
		dup_count = -1;
    44f8:	601a      	str	r2, [r3, #0]
	status = ll_scan_enable(cmd->enable);
    44fa:	f004 fc0f 	bl	8d1c <ll_scan_enable>
    44fe:	e7e7      	b.n	44d0 <hci_cmd_handle+0x398>
		dup_count = -1;
    4500:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4504:	e7f8      	b.n	44f8 <hci_cmd_handle+0x3c0>
	rp = cmd_complete(evt, sizeof(*rp));
    4506:	2103      	movs	r1, #3
    4508:	a803      	add	r0, sp, #12
    450a:	f7ff fc3b 	bl	3d84 <cmd_complete>
	rp->status = 0x00;
    450e:	4601      	mov	r1, r0
    4510:	2300      	movs	r3, #0
    4512:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    4516:	3001      	adds	r0, #1
    4518:	f7ff fb52 	bl	3bc0 <ll_tx_pwr_get>
    451c:	e669      	b.n	41f2 <hci_cmd_handle+0xba>
	rp = cmd_complete(evt, sizeof(*rp));
    451e:	210d      	movs	r1, #13
    4520:	a803      	add	r0, sp, #12
    4522:	f7ff fc2f 	bl	3d84 <cmd_complete>
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    4526:	2202      	movs	r2, #2
    4528:	7042      	strb	r2, [r0, #1]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    452a:	70c2      	strb	r2, [r0, #3]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    452c:	2201      	movs	r2, #1
    452e:	7182      	strb	r2, [r0, #6]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    4530:	220b      	movs	r2, #11
	rp->status = 0x00;
    4532:	2300      	movs	r3, #0
	rp->fw_revision = KERNEL_VERSION_MINOR;
    4534:	71c2      	strb	r2, [r0, #7]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    4536:	2263      	movs	r2, #99	; 0x63
	rp->status = 0x00;
    4538:	7003      	strb	r3, [r0, #0]
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    453a:	7083      	strb	r3, [r0, #2]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    453c:	7103      	strb	r3, [r0, #4]
	rp->fw_variant = 0;
    453e:	7143      	strb	r3, [r0, #5]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    4540:	7203      	strb	r3, [r0, #8]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    4542:	7242      	strb	r2, [r0, #9]
    4544:	7283      	strb	r3, [r0, #10]
    4546:	72c3      	strb	r3, [r0, #11]
    4548:	7303      	strb	r3, [r0, #12]
    454a:	e652      	b.n	41f2 <hci_cmd_handle+0xba>
	rp = cmd_complete(evt, sizeof(*rp));
    454c:	2141      	movs	r1, #65	; 0x41
    454e:	a803      	add	r0, sp, #12
    4550:	f7ff fc18 	bl	3d84 <cmd_complete>
	rp->status = 0x00;
    4554:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    4556:	4604      	mov	r4, r0
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    4558:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    455a:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    455e:	f7fc f877 	bl	650 <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
    4562:	7863      	ldrb	r3, [r4, #1]
    4564:	f063 0358 	orn	r3, r3, #88	; 0x58
    4568:	7063      	strb	r3, [r4, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    456a:	78a3      	ldrb	r3, [r4, #2]
    456c:	f043 0303 	orr.w	r3, r3, #3
    4570:	70a3      	strb	r3, [r4, #2]
    4572:	e63e      	b.n	41f2 <hci_cmd_handle+0xba>
	rp = cmd_complete(evt, sizeof(*rp));
    4574:	2109      	movs	r1, #9
    4576:	a803      	add	r0, sp, #12
    4578:	f7ff fc04 	bl	3d84 <cmd_complete>
	rp->status = 0x00;
    457c:	2100      	movs	r1, #0
    457e:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    4582:	2208      	movs	r2, #8
		memset(rp->er, 0x00, sizeof(rp->er));
    4584:	f7fc f864 	bl	650 <memset>
    4588:	e633      	b.n	41f2 <hci_cmd_handle+0xba>
	const char build_info[] = HCI_VS_BUILD_INFO;
    458a:	4b5d      	ldr	r3, [pc, #372]	; (4700 <hci_cmd_handle+0x5c8>)
    458c:	aa04      	add	r2, sp, #16
    458e:	f103 0628 	add.w	r6, r3, #40	; 0x28
    4592:	4615      	mov	r5, r2
    4594:	6818      	ldr	r0, [r3, #0]
    4596:	6859      	ldr	r1, [r3, #4]
    4598:	4614      	mov	r4, r2
    459a:	c403      	stmia	r4!, {r0, r1}
    459c:	3308      	adds	r3, #8
    459e:	42b3      	cmp	r3, r6
    45a0:	4622      	mov	r2, r4
    45a2:	d1f7      	bne.n	4594 <hci_cmd_handle+0x45c>
	rp = cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
    45a4:	2129      	movs	r1, #41	; 0x29
    45a6:	a803      	add	r0, sp, #12
    45a8:	f7ff fbec 	bl	3d84 <cmd_complete>
	rp->status = 0x00;
    45ac:	2300      	movs	r3, #0
    45ae:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
    45b2:	2228      	movs	r2, #40	; 0x28
    45b4:	4629      	mov	r1, r5
    45b6:	e76b      	b.n	4490 <hci_cmd_handle+0x358>
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    45b8:	68a9      	ldr	r1, [r5, #8]
    45ba:	2000      	movs	r0, #0
    45bc:	f7ff fae4 	bl	3b88 <ll_addr_set>
    45c0:	e71f      	b.n	4402 <hci_cmd_handle+0x2ca>
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    45c2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    45c6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
    45ca:	3201      	adds	r2, #1
    45cc:	d106      	bne.n	45dc <hci_cmd_handle+0x4a4>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    45ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    45d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    45d6:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    45d8:	4293      	cmp	r3, r2
    45da:	d020      	beq.n	461e <hci_cmd_handle+0x4e6>
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
    45dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    45e0:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    45e4:	07db      	lsls	r3, r3, #31
    45e6:	d51a      	bpl.n	461e <hci_cmd_handle+0x4e6>
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    45e8:	2118      	movs	r1, #24
    45ea:	a803      	add	r0, sp, #12
    45ec:	f7ff fbca 	bl	3d84 <cmd_complete>
		rp->status = 0x00;
    45f0:	2600      	movs	r6, #0
		rp->num_addrs = 1;
    45f2:	2301      	movs	r3, #1
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    45f4:	4604      	mov	r4, r0
		rp->num_addrs = 1;
    45f6:	7043      	strb	r3, [r0, #1]
		rp->status = 0x00;
    45f8:	7006      	strb	r6, [r0, #0]
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addr->bdaddr.val[0]);
    45fa:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    45fe:	1ca1      	adds	r1, r4, #2
    4600:	f7ff fbac 	bl	3d5c <sys_put_le32>
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addr->bdaddr.val[4]);
    4604:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
	dst[0] = val;
    4608:	71a3      	strb	r3, [r4, #6]
	dst[1] = val >> 8;
    460a:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addr->bdaddr);
    460e:	f063 033f 	orn	r3, r3, #63	; 0x3f
    4612:	71e3      	strb	r3, [r4, #7]
		memset(addr->ir, 0x00, sizeof(addr->ir));
    4614:	2210      	movs	r2, #16
    4616:	4631      	mov	r1, r6
    4618:	f104 0008 	add.w	r0, r4, #8
    461c:	e7b2      	b.n	4584 <hci_cmd_handle+0x44c>
	rp = cmd_complete(evt, sizeof(*rp));
    461e:	2102      	movs	r1, #2
    4620:	a803      	add	r0, sp, #12
    4622:	f7ff fbaf 	bl	3d84 <cmd_complete>
	rp->status = 0x00;
    4626:	2300      	movs	r3, #0
    4628:	7003      	strb	r3, [r0, #0]
	rp->num_addrs = 0;
    462a:	7043      	strb	r3, [r0, #1]
    462c:	e5e1      	b.n	41f2 <hci_cmd_handle+0xba>
	rp = cmd_complete(evt, sizeof(*rp));
    462e:	2121      	movs	r1, #33	; 0x21
    4630:	a803      	add	r0, sp, #12
    4632:	f7ff fba7 	bl	3d84 <cmd_complete>
	rp->status = 0x00;
    4636:	4603      	mov	r3, r0
    4638:	2200      	movs	r2, #0
    463a:	f803 2b01 	strb.w	r2, [r3], #1
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    463e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	rp = cmd_complete(evt, sizeof(*rp));
    4642:	4604      	mov	r4, r0
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    4644:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
    4648:	3101      	adds	r1, #1
    464a:	d04b      	beq.n	46e4 <hci_cmd_handle+0x5ac>
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    464c:	f8d2 1094 	ldr.w	r1, [r2, #148]	; 0x94
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    4650:	3101      	adds	r1, #1
    4652:	d047      	beq.n	46e4 <hci_cmd_handle+0x5ac>
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    4654:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    4658:	3101      	adds	r1, #1
    465a:	d043      	beq.n	46e4 <hci_cmd_handle+0x5ac>
	    (NRF_FICR->IR[3] != UINT32_MAX)) {
    465c:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    4660:	3101      	adds	r1, #1
    4662:	d03f      	beq.n	46e4 <hci_cmd_handle+0x5ac>
		sys_put_le32(NRF_FICR->IR[0], &rp->ir[0]);
    4664:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
    4668:	4619      	mov	r1, r3
    466a:	f7ff fb77 	bl	3d5c <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[1], &rp->ir[4]);
    466e:	1d61      	adds	r1, r4, #5
    4670:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
    4674:	f7ff fb72 	bl	3d5c <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[2], &rp->ir[8]);
    4678:	f104 0109 	add.w	r1, r4, #9
    467c:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    4680:	f7ff fb6c 	bl	3d5c <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[3], &rp->ir[12]);
    4684:	f104 010d 	add.w	r1, r4, #13
    4688:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
    468c:	f7ff fb66 	bl	3d5c <sys_put_le32>
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    4690:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4694:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    4698:	3301      	adds	r3, #1
    469a:	f104 0311 	add.w	r3, r4, #17
    469e:	d027      	beq.n	46f0 <hci_cmd_handle+0x5b8>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    46a0:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    46a4:	3101      	adds	r1, #1
    46a6:	d023      	beq.n	46f0 <hci_cmd_handle+0x5b8>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    46a8:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    46ac:	3101      	adds	r1, #1
    46ae:	d01f      	beq.n	46f0 <hci_cmd_handle+0x5b8>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
    46b0:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    46b4:	3101      	adds	r1, #1
    46b6:	d01b      	beq.n	46f0 <hci_cmd_handle+0x5b8>
		sys_put_le32(NRF_FICR->ER[0], &rp->er[0]);
    46b8:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
    46bc:	4619      	mov	r1, r3
    46be:	f7ff fb4d 	bl	3d5c <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[1], &rp->er[4]);
    46c2:	f104 0115 	add.w	r1, r4, #21
    46c6:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    46ca:	f7ff fb47 	bl	3d5c <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[2], &rp->er[8]);
    46ce:	f104 0119 	add.w	r1, r4, #25
    46d2:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
    46d6:	f7ff fb41 	bl	3d5c <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    46da:	f104 011d 	add.w	r1, r4, #29
    46de:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
    46e2:	e6e7      	b.n	44b4 <hci_cmd_handle+0x37c>
		memset(rp->ir, 0x00, sizeof(rp->ir));
    46e4:	2210      	movs	r2, #16
    46e6:	2100      	movs	r1, #0
    46e8:	4618      	mov	r0, r3
    46ea:	f7fb ffb1 	bl	650 <memset>
    46ee:	e7cf      	b.n	4690 <hci_cmd_handle+0x558>
		memset(rp->er, 0x00, sizeof(rp->er));
    46f0:	2210      	movs	r2, #16
    46f2:	2100      	movs	r1, #0
    46f4:	4618      	mov	r0, r3
    46f6:	e745      	b.n	4584 <hci_cmd_handle+0x44c>
    46f8:	200002e8 	.word	0x200002e8
    46fc:	200002ec 	.word	0x200002ec
    4700:	0000b52f 	.word	0x0000b52f

00004704 <hci_evt_encode>:

}
#endif

void hci_evt_encode(struct radio_pdu_node_rx *node_rx, struct net_buf *buf)
{
    4704:	b570      	push	{r4, r5, r6, lr}
    4706:	4604      	mov	r4, r0
    4708:	b08a      	sub	sp, #40	; 0x28
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    470a:	7923      	ldrb	r3, [r4, #4]
    470c:	2b01      	cmp	r3, #1
{
    470e:	460d      	mov	r5, r1
	pdu_data = (void *)node_rx->pdu_data;
    4710:	f100 0008 	add.w	r0, r0, #8
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    4714:	d045      	beq.n	47a2 <hci_evt_encode+0x9e>
	switch (node_rx->hdr.type) {
    4716:	3b02      	subs	r3, #2
    4718:	2b03      	cmp	r3, #3
    471a:	d876      	bhi.n	480a <hci_evt_encode+0x106>
    471c:	e8df f003 	tbb	[pc, r3]
    4720:	0d080802 	.word	0x0d080802
		le_advertising_report(pdu_data, b, buf);
    4724:	460a      	mov	r2, r1
    4726:	4621      	mov	r1, r4
    4728:	f7ff fb64 	bl	3df4 <le_advertising_report>
		encode_control(node_rx, pdu_data, buf);
	} else {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
    472c:	b00a      	add	sp, #40	; 0x28
    472e:	bd70      	pop	{r4, r5, r6, pc}
	le_adv_ext_report(pdu_data, b, buf, BIT(2));
    4730:	460a      	mov	r2, r1
    4732:	4621      	mov	r1, r4
    4734:	f7ff fc8e 	bl	4054 <le_adv_ext_report.isra.34>
    4738:	e7f8      	b.n	472c <hci_evt_encode+0x28>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    473a:	4b37      	ldr	r3, [pc, #220]	; (4818 <hci_evt_encode+0x114>)
    473c:	e9d3 2300 	ldrd	r2, r3, [r3]
    4740:	2200      	movs	r2, #0
    4742:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    4746:	4313      	orrs	r3, r2
    4748:	f104 060a 	add.w	r6, r4, #10
    474c:	d007      	beq.n	475e <hci_evt_encode+0x5a>
	    !(le_event_mask & BT_EVT_MASK_LE_SCAN_REQ_RECEIVED)) {
    474e:	4b33      	ldr	r3, [pc, #204]	; (481c <hci_evt_encode+0x118>)
    4750:	e9d3 2300 	ldrd	r2, r3, [r3]
    4754:	2300      	movs	r3, #0
    4756:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    475a:	4313      	orrs	r3, r2
    475c:	d110      	bne.n	4780 <hci_evt_encode+0x7c>
		addr.type = adv->tx_addr;
    475e:	7a23      	ldrb	r3, [r4, #8]
    4760:	ac0a      	add	r4, sp, #40	; 0x28
    4762:	f3c3 1380 	ubfx	r3, r3, #6, #1
    4766:	f804 3d24 	strb.w	r3, [r4, #-36]!
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    476a:	4631      	mov	r1, r6
    476c:	2206      	movs	r2, #6
    476e:	f10d 0005 	add.w	r0, sp, #5
    4772:	f7fb ff41 	bl	5f8 <memcpy>
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    4776:	a903      	add	r1, sp, #12
    4778:	4620      	mov	r0, r4
    477a:	f7ff fc2f 	bl	3fdc <bt_addr_le_to_str.constprop.36>
    477e:	e7d5      	b.n	472c <hci_evt_encode+0x28>
	sep = meta_evt(buf, BT_HCI_EVT_LE_SCAN_REQ_RECEIVED, sizeof(*sep));
    4780:	2208      	movs	r2, #8
    4782:	2113      	movs	r1, #19
    4784:	4628      	mov	r0, r5
    4786:	f7ff fb1f 	bl	3dc8 <meta_evt>
	sep->handle = 0;
    478a:	2300      	movs	r3, #0
    478c:	7003      	strb	r3, [r0, #0]
	sep->addr.type = adv->tx_addr;
    478e:	7a23      	ldrb	r3, [r4, #8]
    4790:	f3c3 1380 	ubfx	r3, r3, #6, #1
    4794:	7043      	strb	r3, [r0, #1]
	memcpy(&sep->addr.a.val[0], &adv->scan_req.scan_addr[0],
    4796:	2206      	movs	r2, #6
    4798:	4631      	mov	r1, r6
    479a:	3002      	adds	r0, #2
    479c:	f7fb ff2c 	bl	5f8 <memcpy>
    47a0:	e7c4      	b.n	472c <hci_evt_encode+0x28>
	switch (pdu_data->llctrl.opcode) {
    47a2:	7ae1      	ldrb	r1, [r4, #11]
    47a4:	88e6      	ldrh	r6, [r4, #6]
    47a6:	2909      	cmp	r1, #9
    47a8:	d00b      	beq.n	47c2 <hci_evt_encode+0xbe>
    47aa:	290c      	cmp	r1, #12
    47ac:	d010      	beq.n	47d0 <hci_evt_encode+0xcc>
    47ae:	2907      	cmp	r1, #7
    47b0:	d12b      	bne.n	480a <hci_evt_encode+0x106>
	switch (pdu_data->llctrl.unknown_rsp.type) {
    47b2:	7b23      	ldrb	r3, [r4, #12]
    47b4:	2b0e      	cmp	r3, #14
    47b6:	d1b9      	bne.n	472c <hci_evt_encode+0x28>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    47b8:	462b      	mov	r3, r5
    47ba:	4632      	mov	r2, r6
    47bc:	2100      	movs	r1, #0
    47be:	201a      	movs	r0, #26
    47c0:	e003      	b.n	47ca <hci_evt_encode+0xc6>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    47c2:	4601      	mov	r1, r0
    47c4:	462b      	mov	r3, r5
    47c6:	4632      	mov	r2, r6
    47c8:	2000      	movs	r0, #0
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    47ca:	f7ff fbd9 	bl	3f80 <le_remote_feat_complete>
    47ce:	e7ad      	b.n	472c <hci_evt_encode+0x28>
	if (!(event_mask & BT_EVT_MASK_REMOTE_VERSION_INFO)) {
    47d0:	4b11      	ldr	r3, [pc, #68]	; (4818 <hci_evt_encode+0x114>)
    47d2:	e9d3 2300 	ldrd	r2, r3, [r3]
    47d6:	2300      	movs	r3, #0
    47d8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
    47dc:	4313      	orrs	r3, r2
    47de:	d0a5      	beq.n	472c <hci_evt_encode+0x28>
	evt_create(buf, BT_HCI_EVT_REMOTE_VERSION_INFO, sizeof(*ep));
    47e0:	2208      	movs	r2, #8
    47e2:	4628      	mov	r0, r5
    47e4:	f7ff fac3 	bl	3d6e <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    47e8:	2108      	movs	r1, #8
    47ea:	1868      	adds	r0, r5, r1
    47ec:	f005 f984 	bl	9af8 <net_buf_simple_add>
	ep->status = 0x00;
    47f0:	2300      	movs	r3, #0
    47f2:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    47f4:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->version = ver_ind->version_number;
    47f8:	7b23      	ldrb	r3, [r4, #12]
    47fa:	70c3      	strb	r3, [r0, #3]
	ep->manufacturer = sys_cpu_to_le16(ver_ind->company_id);
    47fc:	f8b4 300d 	ldrh.w	r3, [r4, #13]
    4800:	8083      	strh	r3, [r0, #4]
	ep->subversion = sys_cpu_to_le16(ver_ind->sub_version_number);
    4802:	f8b4 300f 	ldrh.w	r3, [r4, #15]
    4806:	80c3      	strh	r3, [r0, #6]
    4808:	e790      	b.n	472c <hci_evt_encode+0x28>
		LL_ASSERT(0);
    480a:	4040      	eors	r0, r0
    480c:	f380 8811 	msr	BASEPRI, r0
    4810:	f04f 0004 	mov.w	r0, #4
    4814:	df02      	svc	2
    4816:	bf00      	nop
    4818:	20003810 	.word	0x20003810
    481c:	20003818 	.word	0x20003818

00004820 <hci_get_class>:
{
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    4820:	7903      	ldrb	r3, [r0, #4]
    4822:	2b01      	cmp	r3, #1
    4824:	d00f      	beq.n	4846 <hci_get_class+0x26>
    4826:	2b0a      	cmp	r3, #10
    4828:	d815      	bhi.n	4856 <hci_get_class+0x36>
    482a:	2001      	movs	r0, #1
    482c:	fa00 f303 	lsl.w	r3, r0, r3
    4830:	f413 6fb0 	tst.w	r3, #1408	; 0x580
    4834:	d112      	bne.n	485c <hci_get_class+0x3c>
    4836:	f013 0f3c 	tst.w	r3, #60	; 0x3c
    483a:	d110      	bne.n	485e <hci_get_class+0x3e>
    483c:	f083 0340 	eor.w	r3, r3, #64	; 0x40
    4840:	f343 1080 	sbfx	r0, r3, #6, #1
    4844:	4770      	bx	lr
			return HCI_CLASS_EVT_CONNECTION;
		default:
			return -1;
		}

	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    4846:	7a03      	ldrb	r3, [r0, #8]
    4848:	f003 0303 	and.w	r3, r3, #3
    484c:	2b03      	cmp	r3, #3
		return HCI_CLASS_EVT_CONNECTION;
	} else {
		return HCI_CLASS_ACL_DATA;
    484e:	bf0c      	ite	eq
    4850:	2002      	moveq	r0, #2
    4852:	2003      	movne	r0, #3
    4854:	4770      	bx	lr
			return -1;
    4856:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    485a:	4770      	bx	lr
			return HCI_CLASS_EVT_CONNECTION;
    485c:	2002      	movs	r0, #2
	}
}
    485e:	4770      	bx	lr

00004860 <hci_init>:
	dup_count = -1;
    4860:	4b08      	ldr	r3, [pc, #32]	; (4884 <hci_init+0x24>)
    4862:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4866:	601a      	str	r2, [r3, #0]
	event_mask = DEFAULT_EVENT_MASK;
    4868:	4b07      	ldr	r3, [pc, #28]	; (4888 <hci_init+0x28>)
    486a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    486e:	f641 71ff 	movw	r1, #8191	; 0x1fff
    4872:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    4876:	4b05      	ldr	r3, [pc, #20]	; (488c <hci_init+0x2c>)
    4878:	201f      	movs	r0, #31
    487a:	2100      	movs	r1, #0
    487c:	e9c3 0100 	strd	r0, r1, [r3]
    4880:	4770      	bx	lr
    4882:	bf00      	nop
    4884:	200002e8 	.word	0x200002e8
    4888:	20003810 	.word	0x20003810
    488c:	20003818 	.word	0x20003818

00004890 <cpu_sleep>:
#ifndef _CPU_H_
#define _CPU_H_

static inline void cpu_sleep(void)
{
	__WFE();
    4890:	bf20      	wfe
	__SEV();
    4892:	bf40      	sev
	__WFE();
    4894:	bf20      	wfe
    4896:	4770      	bx	lr

00004898 <pdu_len_cmp>:
	return nack;
}
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

static inline bool pdu_len_cmp(u8_t opcode, u8_t len)
{
    4898:	b5f0      	push	{r4, r5, r6, r7, lr}
	const u8_t ctrl_len_lut[] = {
    489a:	4b0d      	ldr	r3, [pc, #52]	; (48d0 <pdu_len_cmp+0x38>)
{
    489c:	b089      	sub	sp, #36	; 0x24
    489e:	4605      	mov	r5, r0
    48a0:	460e      	mov	r6, r1
	const u8_t ctrl_len_lut[] = {
    48a2:	aa01      	add	r2, sp, #4
    48a4:	f103 0718 	add.w	r7, r3, #24
    48a8:	6818      	ldr	r0, [r3, #0]
    48aa:	6859      	ldr	r1, [r3, #4]
    48ac:	4614      	mov	r4, r2
    48ae:	c403      	stmia	r4!, {r0, r1}
    48b0:	3308      	adds	r3, #8
    48b2:	42bb      	cmp	r3, r7
    48b4:	4622      	mov	r2, r4
    48b6:	d1f7      	bne.n	48a8 <pdu_len_cmp+0x10>
    48b8:	881b      	ldrh	r3, [r3, #0]
    48ba:	8023      	strh	r3, [r4, #0]
		 sizeof(struct pdu_data_llctrl_phy_upd_ind)),
		(offsetof(struct pdu_data_llctrl, min_used_chans_ind) +
		 sizeof(struct pdu_data_llctrl_min_used_chans_ind)),
	};

	return ctrl_len_lut[opcode] == len;
    48bc:	ab08      	add	r3, sp, #32
    48be:	441d      	add	r5, r3
    48c0:	f815 0c1c 	ldrb.w	r0, [r5, #-28]
}
    48c4:	1b83      	subs	r3, r0, r6
    48c6:	4258      	negs	r0, r3
    48c8:	4158      	adcs	r0, r3
    48ca:	b009      	add	sp, #36	; 0x24
    48cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    48ce:	bf00      	nop
    48d0:	0000ae9f 	.word	0x0000ae9f

000048d4 <ticker_if_done>:
}
#endif

static void ticker_if_done(u32_t status, void *ops_context)
{
	*((u32_t volatile *)ops_context) = status;
    48d4:	6008      	str	r0, [r1, #0]
    48d6:	4770      	bx	lr

000048d8 <prepare_reduced>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    48d8:	b918      	cbnz	r0, 48e2 <prepare_reduced+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start |= XON_BITMASK;
    48da:	680b      	ldr	r3, [r1, #0]
    48dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    48e0:	600b      	str	r3, [r1, #0]
    48e2:	4770      	bx	lr

000048e4 <prepare_normal>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    48e4:	b918      	cbnz	r0, 48ee <prepare_normal+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start &= ~XON_BITMASK;
    48e6:	680b      	ldr	r3, [r1, #0]
    48e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    48ec:	600b      	str	r3, [r1, #0]
    48ee:	4770      	bx	lr

000048f0 <chan_sel_remap>:
	}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */
}

static u8_t chan_sel_remap(u8_t *chan_map, u8_t chan_index)
{
    48f0:	b570      	push	{r4, r5, r6, lr}
    48f2:	1d03      	adds	r3, r0, #4
    48f4:	1e45      	subs	r5, r0, #1
	u8_t chan_next;
	u8_t byte_count;

	chan_next = 0;
    48f6:	2400      	movs	r4, #0
	byte_count = 5;
	while (byte_count--) {
    48f8:	429d      	cmp	r5, r3
    48fa:	d101      	bne.n	4900 <chan_sel_remap+0x10>
    48fc:	4620      	mov	r0, r4

		chan_map++;
	}

	return chan_next;
}
    48fe:	bd70      	pop	{r4, r5, r6, pc}
		bite = *chan_map;
    4900:	f815 6f01 	ldrb.w	r6, [r5, #1]!
		while (bit_count--) {
    4904:	2200      	movs	r2, #0
    4906:	18a0      	adds	r0, r4, r2
    4908:	2a08      	cmp	r2, #8
    490a:	b2c0      	uxtb	r0, r0
    490c:	d101      	bne.n	4912 <chan_sel_remap+0x22>
    490e:	4604      	mov	r4, r0
    4910:	e7f2      	b.n	48f8 <chan_sel_remap+0x8>
			if (bite & 0x01) {
    4912:	f016 0f01 	tst.w	r6, #1
    4916:	d003      	beq.n	4920 <chan_sel_remap+0x30>
				if (chan_index == 0) {
    4918:	2900      	cmp	r1, #0
    491a:	d0f0      	beq.n	48fe <chan_sel_remap+0xe>
				chan_index--;
    491c:	3901      	subs	r1, #1
    491e:	b2c9      	uxtb	r1, r1
			bite >>= 1;
    4920:	0876      	lsrs	r6, r6, #1
    4922:	3201      	adds	r2, #1
    4924:	e7ef      	b.n	4906 <chan_sel_remap+0x16>
	...

00004928 <packet_rx_reserve_get>:
			_radio.packet_rx_acquire);
	}
}

static inline struct radio_pdu_node_rx *packet_rx_reserve_get(u8_t count)
{
    4928:	b510      	push	{r4, lr}
	if (_radio.packet_rx_acquire >=
    492a:	4a0c      	ldr	r2, [pc, #48]	; (495c <packet_rx_reserve_get+0x34>)
    492c:	f892 3742 	ldrb.w	r3, [r2, #1858]	; 0x742
	    _radio.packet_rx_last) {
    4930:	f892 1741 	ldrb.w	r1, [r2, #1857]	; 0x741
	if (_radio.packet_rx_acquire >=
    4934:	428b      	cmp	r3, r1
			_radio.packet_rx_last +
    4936:	bf38      	it	cc
    4938:	f892 4740 	ldrbcc.w	r4, [r2, #1856]	; 0x740
			_radio.packet_rx_last);
    493c:	f892 1741 	ldrb.w	r1, [r2, #1857]	; 0x741
			_radio.packet_rx_last +
    4940:	bf38      	it	cc
    4942:	191b      	addcc	r3, r3, r4
    4944:	1a5b      	subs	r3, r3, r1
    4946:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
    4948:	4298      	cmp	r0, r3
		return 0;
	}

	return _radio.packet_rx[_radio.packet_rx_last];
    494a:	bf9d      	ittte	ls
    494c:	f892 1741 	ldrbls.w	r1, [r2, #1857]	; 0x741
    4950:	f8d2 373c 	ldrls.w	r3, [r2, #1852]	; 0x73c
    4954:	f853 0021 	ldrls.w	r0, [r3, r1, lsl #2]
		return 0;
    4958:	2000      	movhi	r0, #0
}
    495a:	bd10      	pop	{r4, pc}
    495c:	20000370 	.word	0x20000370

00004960 <conn_update_req>:
}

#if defined (CONFIG_BT_CTLR_XTAL_ADVANCED) && \
    defined(CONFIG_BT_CTLR_SCHED_ADVANCED)
static u32_t conn_update_req(struct connection *conn)
{
    4960:	b530      	push	{r4, r5, lr}
	if (conn->llcp_req != conn->llcp_ack) {
    4962:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
    4966:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
    496a:	4299      	cmp	r1, r3
    496c:	d128      	bne.n	49c0 <conn_update_req+0x60>
	if (conn->llcp_conn_param.req != conn->llcp_conn_param.ack) {
		return 1;
	}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	if (!conn->role) {
    496e:	f990 301d 	ldrsb.w	r3, [r0, #29]
    4972:	2b00      	cmp	r3, #0
    4974:	db26      	blt.n	49c4 <conn_update_req+0x64>
		conn->llcp.conn_upd.win_size = 1;
		conn->llcp.conn_upd.win_offset_us = 0;
		conn->llcp.conn_upd.interval = conn->conn_interval;
		conn->llcp.conn_upd.latency = conn->latency;
    4976:	8cc4      	ldrh	r4, [r0, #38]	; 0x26
		conn->llcp.conn_upd.interval = conn->conn_interval;
    4978:	8c82      	ldrh	r2, [r0, #36]	; 0x24
		conn->llcp.conn_upd.latency = conn->latency;
    497a:	f8a0 4064 	strh.w	r4, [r0, #100]	; 0x64
		conn->llcp.conn_upd.timeout = conn->conn_interval *
					      conn->supervision_reload *
    497e:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
		conn->llcp.conn_upd.interval = conn->conn_interval;
    4980:	f8a0 2062 	strh.w	r2, [r0, #98]	; 0x62
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    4984:	4354      	muls	r4, r2
					      conn->supervision_reload *
    4986:	227d      	movs	r2, #125	; 0x7d
    4988:	4362      	muls	r2, r4
					      125 / 1000;
    498a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    498e:	fb92 f2f4 	sdiv	r2, r2, r4
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    4992:	f8a0 2066 	strh.w	r2, [r0, #102]	; 0x66
		/* conn->llcp.conn_upd.instant     = 0; */
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    4996:	f890 2060 	ldrb.w	r2, [r0, #96]	; 0x60
		conn->llcp.conn_upd.win_size = 1;
    499a:	2501      	movs	r5, #1
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    499c:	f365 0201 	bfi	r2, r5, #0, #2
		conn->llcp.conn_upd.is_internal = 1;
    49a0:	b2d2      	uxtb	r2, r2
		conn->llcp.conn_upd.win_offset_us = 0;
    49a2:	2300      	movs	r3, #0
		conn->llcp.conn_upd.is_internal = 1;
    49a4:	f042 0204 	orr.w	r2, r2, #4

		conn->llcp_type = LLCP_CONN_UPD;
		conn->llcp_ack--;
    49a8:	3901      	subs	r1, #1
		conn->llcp.conn_upd.win_size = 1;
    49aa:	f880 5070 	strb.w	r5, [r0, #112]	; 0x70
		conn->llcp.conn_upd.win_offset_us = 0;
    49ae:	66c3      	str	r3, [r0, #108]	; 0x6c
		conn->llcp.conn_upd.is_internal = 1;
    49b0:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
		conn->llcp_ack--;
    49b4:	f880 105d 	strb.w	r1, [r0, #93]	; 0x5d
		conn->llcp_type = LLCP_CONN_UPD;
    49b8:	f880 505e 	strb.w	r5, [r0, #94]	; 0x5e

		return 0;
    49bc:	4618      	mov	r0, r3
    49be:	bd30      	pop	{r4, r5, pc}
		return 1;
    49c0:	2001      	movs	r0, #1
    49c2:	bd30      	pop	{r4, r5, pc}
		return 0;
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	}

	return 2;
    49c4:	2002      	movs	r0, #2
}
    49c6:	bd30      	pop	{r4, r5, pc}

000049c8 <tx_cmplt_get>:
	return 0;
}
#endif /* CONFIG_BT_CTLR_PHY */

static u8_t tx_cmplt_get(u16_t *handle, u8_t *first, u8_t last)
{
    49c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t _first;
	u8_t cmplt;

	_first = *first;
    49cc:	780c      	ldrb	r4, [r1, #0]
	if (_first == last) {
    49ce:	4294      	cmp	r4, r2
{
    49d0:	4681      	mov	r9, r0
    49d2:	460f      	mov	r7, r1
    49d4:	4690      	mov	r8, r2
	if (_first == last) {
    49d6:	d03d      	beq.n	4a54 <tx_cmplt_get+0x8c>
		return 0;
	}

	cmplt = 0;
	*handle = _radio.pkt_release[_first].handle;
    49d8:	4e1f      	ldr	r6, [pc, #124]	; (4a58 <tx_cmplt_get+0x90>)
    49da:	f8d6 3770 	ldr.w	r3, [r6, #1904]	; 0x770
    49de:	f833 3034 	ldrh.w	r3, [r3, r4, lsl #3]
    49e2:	8003      	strh	r3, [r0, #0]
	cmplt = 0;
    49e4:	2500      	movs	r5, #0
			_radio.pkt_release[_first].node_tx = (void *)1;

			cmplt++;
		} else {
			/* ctrl packet, hence not num cmplt */
			_radio.pkt_release[_first].node_tx = (void *)2;
    49e6:	f04f 0b02 	mov.w	fp, #2
		}

		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    49ea:	f206 7a64 	addw	sl, r6, #1892	; 0x764
		if (*handle != _radio.pkt_release[_first].handle) {
    49ee:	b222      	sxth	r2, r4
    49f0:	f8d6 0770 	ldr.w	r0, [r6, #1904]	; 0x770
    49f4:	f8b9 e000 	ldrh.w	lr, [r9]
    49f8:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    49fc:	f830 2032 	ldrh.w	r2, [r0, r2, lsl #3]
    4a00:	4596      	cmp	lr, r2
    4a02:	d120      	bne.n	4a46 <tx_cmplt_get+0x7e>
		node_tx = _radio.pkt_release[_first].node_tx;
    4a04:	6848      	ldr	r0, [r1, #4]
		if ((!node_tx) || (node_tx == (void *)1) ||
    4a06:	2801      	cmp	r0, #1
    4a08:	f020 0303 	bic.w	r3, r0, #3
    4a0c:	d90a      	bls.n	4a24 <tx_cmplt_get+0x5c>
    4a0e:	b1f3      	cbz	r3, 4a4e <tx_cmplt_get+0x86>
		    ((((u32_t)node_tx & ~(0x00000003)) != 0) &&
    4a10:	1d02      	adds	r2, r0, #4
    4a12:	d01c      	beq.n	4a4e <tx_cmplt_get+0x86>
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    4a14:	7942      	ldrb	r2, [r0, #5]
    4a16:	b1d2      	cbz	r2, 4a4e <tx_cmplt_get+0x86>
		     ((pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_START) ||
    4a18:	7902      	ldrb	r2, [r0, #4]
    4a1a:	f002 0203 	and.w	r2, r2, #3
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    4a1e:	3a01      	subs	r2, #1
    4a20:	2a01      	cmp	r2, #1
    4a22:	d814      	bhi.n	4a4e <tx_cmplt_get+0x86>
			_radio.pkt_release[_first].node_tx = (void *)1;
    4a24:	2201      	movs	r2, #1
			cmplt++;
    4a26:	4415      	add	r5, r2
			_radio.pkt_release[_first].node_tx = (void *)1;
    4a28:	604a      	str	r2, [r1, #4]
			cmplt++;
    4a2a:	b2ed      	uxtb	r5, r5
		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
    4a2c:	b113      	cbz	r3, 4a34 <tx_cmplt_get+0x6c>
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    4a2e:	4651      	mov	r1, sl
    4a30:	f7fe f8d3 	bl	2bda <mem_release>
		}

		_first = _first + 1;
    4a34:	3401      	adds	r4, #1
		if (_first == _radio.packet_tx_count) {
    4a36:	f896 2774 	ldrb.w	r2, [r6, #1908]	; 0x774
		_first = _first + 1;
    4a3a:	b2e4      	uxtb	r4, r4
			_first = 0;
    4a3c:	42a2      	cmp	r2, r4
    4a3e:	bf08      	it	eq
    4a40:	2400      	moveq	r4, #0
		}

	} while (_first != last);
    4a42:	4544      	cmp	r4, r8
    4a44:	d1d3      	bne.n	49ee <tx_cmplt_get+0x26>

	*first = _first;
    4a46:	703c      	strb	r4, [r7, #0]

	return cmplt;
}
    4a48:	4628      	mov	r0, r5
    4a4a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			_radio.pkt_release[_first].node_tx = (void *)2;
    4a4e:	f8c1 b004 	str.w	fp, [r1, #4]
    4a52:	e7eb      	b.n	4a2c <tx_cmplt_get+0x64>
		return 0;
    4a54:	2500      	movs	r5, #0
    4a56:	e7f7      	b.n	4a48 <tx_cmplt_get+0x80>
    4a58:	20000370 	.word	0x20000370

00004a5c <connection_get>:
{
    4a5c:	b510      	push	{r4, lr}
	if (handle < _radio.connection_count) {
    4a5e:	4b09      	ldr	r3, [pc, #36]	; (4a84 <connection_get+0x28>)
    4a60:	f893 2718 	ldrb.w	r2, [r3, #1816]	; 0x718
    4a64:	4282      	cmp	r2, r0
{
    4a66:	4604      	mov	r4, r0
	if (handle < _radio.connection_count) {
    4a68:	d90a      	bls.n	4a80 <connection_get+0x24>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE, handle);
    4a6a:	4602      	mov	r2, r0
    4a6c:	f44f 7182 	mov.w	r1, #260	; 0x104
    4a70:	f8d3 0710 	ldr.w	r0, [r3, #1808]	; 0x710
    4a74:	f7fe f8c6 	bl	2c04 <mem_get>
		if ((conn) && (conn->handle == handle)) {
    4a78:	b110      	cbz	r0, 4a80 <connection_get+0x24>
    4a7a:	8c03      	ldrh	r3, [r0, #32]
    4a7c:	42a3      	cmp	r3, r4
    4a7e:	d000      	beq.n	4a82 <connection_get+0x26>
	return 0;
    4a80:	2000      	movs	r0, #0
}
    4a82:	bd10      	pop	{r4, pc}
    4a84:	20000370 	.word	0x20000370

00004a88 <role_disable>:
{
    4a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4a8c:	b086      	sub	sp, #24
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    4a8e:	2302      	movs	r3, #2
	switch (ticker_id_primary) {
    4a90:	2805      	cmp	r0, #5
{
    4a92:	4605      	mov	r5, r0
    4a94:	460f      	mov	r7, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    4a96:	9302      	str	r3, [sp, #8]
	switch (ticker_id_primary) {
    4a98:	d00e      	beq.n	4ab8 <role_disable+0x30>
    4a9a:	2806      	cmp	r0, #6
    4a9c:	f000 808e 	beq.w	4bbc <role_disable+0x134>
		if (ticker_id_primary >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    4aa0:	f240 8086 	bls.w	4bb0 <role_disable+0x128>
			conn_handle = ticker_id_primary -
    4aa4:	3807      	subs	r0, #7
			conn = connection_get(conn_handle);
    4aa6:	b280      	uxth	r0, r0
    4aa8:	f7ff ffd8 	bl	4a5c <connection_get>
			if (!conn) {
    4aac:	2800      	cmp	r0, #0
    4aae:	f000 80d9 	beq.w	4c64 <role_disable+0x1dc>
			ticks_active_to_start =
    4ab2:	e890 0140 	ldmia.w	r0, {r6, r8}
		break;
    4ab6:	e010      	b.n	4ada <role_disable+0x52>
		ticks_xtal_to_start =
    4ab8:	4b6b      	ldr	r3, [pc, #428]	; (4c68 <role_disable+0x1e0>)
    4aba:	699e      	ldr	r6, [r3, #24]
		ticks_active_to_start =
    4abc:	f8d3 801c 	ldr.w	r8, [r3, #28]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    4ac0:	ab02      	add	r3, sp, #8
    4ac2:	9300      	str	r3, [sp, #0]
    4ac4:	460a      	mov	r2, r1
    4ac6:	4b69      	ldr	r3, [pc, #420]	; (4c6c <role_disable+0x1e4>)
    4ac8:	2103      	movs	r1, #3
    4aca:	2000      	movs	r0, #0
    4acc:	f7fe ff6c 	bl	39a8 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    4ad0:	2802      	cmp	r0, #2
    4ad2:	d066      	beq.n	4ba2 <role_disable+0x11a>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    4ad4:	9b02      	ldr	r3, [sp, #8]
    4ad6:	2b00      	cmp	r3, #0
    4ad8:	d167      	bne.n	4baa <role_disable+0x122>
	LL_ASSERT(!_radio.ticker_id_stop);
    4ada:	4c63      	ldr	r4, [pc, #396]	; (4c68 <role_disable+0x1e0>)
    4adc:	7ca3      	ldrb	r3, [r4, #18]
    4ade:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    4ae2:	2b00      	cmp	r3, #0
    4ae4:	d164      	bne.n	4bb0 <role_disable+0x128>
	ret_cb = TICKER_STATUS_BUSY;
    4ae6:	ab06      	add	r3, sp, #24
    4ae8:	2202      	movs	r2, #2
	_radio.ticker_id_stop = ticker_id_primary;
    4aea:	74a5      	strb	r5, [r4, #18]
	ret_cb = TICKER_STATUS_BUSY;
    4aec:	f843 2d10 	str.w	r2, [r3, #-16]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    4af0:	2103      	movs	r1, #3
    4af2:	9300      	str	r3, [sp, #0]
    4af4:	462a      	mov	r2, r5
    4af6:	4b5d      	ldr	r3, [pc, #372]	; (4c6c <role_disable+0x1e4>)
    4af8:	f7fe ff56 	bl	39a8 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    4afc:	2802      	cmp	r0, #2
    4afe:	d063      	beq.n	4bc8 <role_disable+0x140>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
    4b00:	9b02      	ldr	r3, [sp, #8]
    4b02:	2b00      	cmp	r3, #0
    4b04:	d145      	bne.n	4b92 <role_disable+0x10a>
	if ((_radio.ticker_id_prepare == ticker_id_primary)
    4b06:	7c23      	ldrb	r3, [r4, #16]
    4b08:	429d      	cmp	r5, r3
    4b0a:	d002      	beq.n	4b12 <role_disable+0x8a>
	    || (_radio.ticker_id_event == ticker_id_primary)) {
    4b0c:	7c63      	ldrb	r3, [r4, #17]
    4b0e:	429d      	cmp	r5, r3
    4b10:	d13b      	bne.n	4b8a <role_disable+0x102>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
    4b12:	ab06      	add	r3, sp, #24
    4b14:	2202      	movs	r2, #2
    4b16:	f843 2d0c 	str.w	r2, [r3, #-12]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    4b1a:	2200      	movs	r2, #0
    4b1c:	9300      	str	r3, [sp, #0]
    4b1e:	2103      	movs	r1, #3
    4b20:	4b52      	ldr	r3, [pc, #328]	; (4c6c <role_disable+0x1e4>)
    4b22:	4610      	mov	r0, r2
    4b24:	f7fe ff40 	bl	39a8 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    4b28:	2802      	cmp	r0, #2
    4b2a:	d107      	bne.n	4b3c <role_disable+0xb4>
		mayfly_enable(RADIO_TICKER_USER_ID_APP,
    4b2c:	2201      	movs	r2, #1
    4b2e:	4611      	mov	r1, r2
    4b30:	2003      	movs	r0, #3
    4b32:	f7fe f8c9 	bl	2cc8 <mayfly_enable>
		LL_ASSERT(ret_cb_evt != TICKER_STATUS_BUSY);
    4b36:	9b03      	ldr	r3, [sp, #12]
    4b38:	2b02      	cmp	r3, #2
    4b3a:	d039      	beq.n	4bb0 <role_disable+0x128>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
    4b3c:	9803      	ldr	r0, [sp, #12]
    4b3e:	2800      	cmp	r0, #0
    4b40:	d15e      	bne.n	4c00 <role_disable+0x178>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
    4b42:	2302      	movs	r3, #2
    4b44:	9304      	str	r3, [sp, #16]
		LL_ASSERT(_radio.ticker_id_prepare);
    4b46:	7c23      	ldrb	r3, [r4, #16]
    4b48:	2b00      	cmp	r3, #0
    4b4a:	d031      	beq.n	4bb0 <role_disable+0x128>
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    4b4c:	ab04      	add	r3, sp, #16
    4b4e:	9300      	str	r3, [sp, #0]
    4b50:	2201      	movs	r2, #1
    4b52:	4b46      	ldr	r3, [pc, #280]	; (4c6c <role_disable+0x1e4>)
		_radio.ticker_id_prepare = 0;
    4b54:	7420      	strb	r0, [r4, #16]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    4b56:	2103      	movs	r1, #3
    4b58:	f7fe ff26 	bl	39a8 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    4b5c:	2802      	cmp	r0, #2
    4b5e:	d107      	bne.n	4b70 <role_disable+0xe8>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    4b60:	2201      	movs	r2, #1
    4b62:	4611      	mov	r1, r2
    4b64:	2003      	movs	r0, #3
    4b66:	f7fe f8af 	bl	2cc8 <mayfly_enable>
			LL_ASSERT(ret_cb_m0 != TICKER_STATUS_BUSY);
    4b6a:	9b04      	ldr	r3, [sp, #16]
    4b6c:	2b02      	cmp	r3, #2
    4b6e:	d01f      	beq.n	4bb0 <role_disable+0x128>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
    4b70:	9a04      	ldr	r2, [sp, #16]
    4b72:	2a00      	cmp	r2, #0
    4b74:	d136      	bne.n	4be4 <role_disable+0x15c>
			ticks_xtal_to_start &= ~XON_BITMASK;
    4b76:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
			if (ticks_active_to_start > ticks_xtal_to_start) {
    4b7a:	45b0      	cmp	r8, r6
    4b7c:	d93e      	bls.n	4bfc <role_disable+0x174>
				ret = mayfly_enqueue(
    4b7e:	4b3c      	ldr	r3, [pc, #240]	; (4c70 <role_disable+0x1e8>)
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    4b80:	4611      	mov	r1, r2
    4b82:	2003      	movs	r0, #3
    4b84:	f7fe f8c8 	bl	2d18 <mayfly_enqueue>
			LL_ASSERT(!ret);
    4b88:	b990      	cbnz	r0, 4bb0 <role_disable+0x128>
	if (!_radio.ticker_id_stop) {
    4b8a:	7ca3      	ldrb	r3, [r4, #18]
    4b8c:	b90b      	cbnz	r3, 4b92 <role_disable+0x10a>
		ret_cb = TICKER_STATUS_FAILURE;
    4b8e:	2301      	movs	r3, #1
    4b90:	9302      	str	r3, [sp, #8]
	_radio.ticker_id_stop = 0;
    4b92:	2300      	movs	r3, #0
    4b94:	74a3      	strb	r3, [r4, #18]
	return ret_cb;
    4b96:	9802      	ldr	r0, [sp, #8]
}
    4b98:	b006      	add	sp, #24
    4b9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				cpu_sleep();
    4b9e:	f7ff fe77 	bl	4890 <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
    4ba2:	9b02      	ldr	r3, [sp, #8]
    4ba4:	2b02      	cmp	r3, #2
    4ba6:	d0fa      	beq.n	4b9e <role_disable+0x116>
    4ba8:	e794      	b.n	4ad4 <role_disable+0x4c>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    4baa:	9b02      	ldr	r3, [sp, #8]
    4bac:	2b01      	cmp	r3, #1
    4bae:	d094      	beq.n	4ada <role_disable+0x52>
		LL_ASSERT(0);
    4bb0:	4040      	eors	r0, r0
    4bb2:	f380 8811 	msr	BASEPRI, r0
    4bb6:	f04f 0004 	mov.w	r0, #4
    4bba:	df02      	svc	2
		ticks_xtal_to_start =
    4bbc:	4b2a      	ldr	r3, [pc, #168]	; (4c68 <role_disable+0x1e0>)
    4bbe:	f8d3 663c 	ldr.w	r6, [r3, #1596]	; 0x63c
		ticks_active_to_start =
    4bc2:	f8d3 8640 	ldr.w	r8, [r3, #1600]	; 0x640
		break;
    4bc6:	e788      	b.n	4ada <role_disable+0x52>
		if (_radio.ticker_id_event == ticker_id_primary) {
    4bc8:	7c63      	ldrb	r3, [r4, #17]
    4bca:	429d      	cmp	r5, r3
    4bcc:	d104      	bne.n	4bd8 <role_disable+0x150>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    4bce:	2201      	movs	r2, #1
    4bd0:	4611      	mov	r1, r2
    4bd2:	2003      	movs	r0, #3
    4bd4:	f7fe f878 	bl	2cc8 <mayfly_enable>
		while (ret_cb == TICKER_STATUS_BUSY) {
    4bd8:	9b02      	ldr	r3, [sp, #8]
    4bda:	2b02      	cmp	r3, #2
    4bdc:	d190      	bne.n	4b00 <role_disable+0x78>
			cpu_sleep();
    4bde:	f7ff fe57 	bl	4890 <cpu_sleep>
    4be2:	e7f9      	b.n	4bd8 <role_disable+0x150>
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
    4be4:	9b04      	ldr	r3, [sp, #16]
    4be6:	2b01      	cmp	r3, #1
    4be8:	d1e2      	bne.n	4bb0 <role_disable+0x128>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    4bea:	2200      	movs	r2, #0
    4bec:	4611      	mov	r1, r2
    4bee:	4b20      	ldr	r3, [pc, #128]	; (4c70 <role_disable+0x1e8>)
    4bf0:	2003      	movs	r0, #3
    4bf2:	f7fe f891 	bl	2d18 <mayfly_enqueue>
			LL_ASSERT(!ret);
    4bf6:	4602      	mov	r2, r0
    4bf8:	2800      	cmp	r0, #0
    4bfa:	d1d9      	bne.n	4bb0 <role_disable+0x128>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    4bfc:	4b1d      	ldr	r3, [pc, #116]	; (4c74 <role_disable+0x1ec>)
    4bfe:	e7bf      	b.n	4b80 <role_disable+0xf8>
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
    4c00:	9d03      	ldr	r5, [sp, #12]
    4c02:	2d01      	cmp	r5, #1
    4c04:	d1d4      	bne.n	4bb0 <role_disable+0x128>
		if (ticker_id_stop != TICKER_NULL) {
    4c06:	2fff      	cmp	r7, #255	; 0xff
    4c08:	d019      	beq.n	4c3e <role_disable+0x1b6>
			u32_t volatile ret_cb_stop = TICKER_STATUS_BUSY;
    4c0a:	ab06      	add	r3, sp, #24
    4c0c:	2202      	movs	r2, #2
    4c0e:	f843 2d04 	str.w	r2, [r3, #-4]!
			ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    4c12:	2103      	movs	r1, #3
    4c14:	9300      	str	r3, [sp, #0]
    4c16:	463a      	mov	r2, r7
    4c18:	4b14      	ldr	r3, [pc, #80]	; (4c6c <role_disable+0x1e4>)
    4c1a:	2000      	movs	r0, #0
    4c1c:	f7fe fec4 	bl	39a8 <ticker_stop>
			if (ret == TICKER_STATUS_BUSY) {
    4c20:	2802      	cmp	r0, #2
    4c22:	d107      	bne.n	4c34 <role_disable+0x1ac>
				mayfly_enable(RADIO_TICKER_USER_ID_APP,
    4c24:	462a      	mov	r2, r5
    4c26:	4629      	mov	r1, r5
    4c28:	2003      	movs	r0, #3
    4c2a:	f7fe f84d 	bl	2cc8 <mayfly_enable>
				LL_ASSERT(ret_cb_stop != TICKER_STATUS_BUSY);
    4c2e:	9b05      	ldr	r3, [sp, #20]
    4c30:	2b02      	cmp	r3, #2
    4c32:	d0bd      	beq.n	4bb0 <role_disable+0x128>
			LL_ASSERT((ret_cb_stop == TICKER_STATUS_SUCCESS) ||
    4c34:	9b05      	ldr	r3, [sp, #20]
    4c36:	b113      	cbz	r3, 4c3e <role_disable+0x1b6>
    4c38:	9b05      	ldr	r3, [sp, #20]
    4c3a:	2b01      	cmp	r3, #1
    4c3c:	d1b8      	bne.n	4bb0 <role_disable+0x128>
		if (_radio.role != ROLE_NONE) {
    4c3e:	7ce3      	ldrb	r3, [r4, #19]
    4c40:	2b00      	cmp	r3, #0
    4c42:	d0a2      	beq.n	4b8a <role_disable+0x102>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    4c44:	4b0c      	ldr	r3, [pc, #48]	; (4c78 <role_disable+0x1f0>)
    4c46:	2204      	movs	r2, #4
    4c48:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    4c4a:	2200      	movs	r2, #0
    4c4c:	4611      	mov	r1, r2
    4c4e:	2003      	movs	r0, #3
    4c50:	f7fe f862 	bl	2d18 <mayfly_enqueue>
			LL_ASSERT(!ret);
    4c54:	2800      	cmp	r0, #0
    4c56:	d1ab      	bne.n	4bb0 <role_disable+0x128>
			while (_radio.role != ROLE_NONE) {
    4c58:	7ce3      	ldrb	r3, [r4, #19]
    4c5a:	2b00      	cmp	r3, #0
    4c5c:	d095      	beq.n	4b8a <role_disable+0x102>
				cpu_sleep();
    4c5e:	f7ff fe17 	bl	4890 <cpu_sleep>
    4c62:	e7f9      	b.n	4c58 <role_disable+0x1d0>
				return 1;
    4c64:	2001      	movs	r0, #1
    4c66:	e797      	b.n	4b98 <role_disable+0x110>
    4c68:	20000370 	.word	0x20000370
    4c6c:	000048d5 	.word	0x000048d5
    4c70:	20003840 	.word	0x20003840
    4c74:	200038d0 	.word	0x200038d0
    4c78:	20003860 	.word	0x20003860

00004c7c <chan_set>:
{
    4c7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	pdu = (void *)_radio.advertiser.adv_data.data
    4c80:	4e84      	ldr	r6, [pc, #528]	; (4e94 <chan_set+0x218>)
    4c82:	f896 322d 	ldrb.w	r3, [r6, #557]	; 0x22d
	if(pdu->type == PDU_ADV_TYPE_EXT_IND){
    4c86:	eb03 2303 	add.w	r3, r3, r3, lsl #8
    4c8a:	4433      	add	r3, r6
{
    4c8c:	4604      	mov	r4, r0
	if(pdu->type == PDU_ADV_TYPE_EXT_IND){
    4c8e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
    4c92:	f003 030f 	and.w	r3, r3, #15
    4c96:	2b07      	cmp	r3, #7
    4c98:	f040 80ed 	bne.w	4e76 <chan_set+0x1fa>
		switch (chan) {
    4c9c:	2826      	cmp	r0, #38	; 0x26
    4c9e:	f8df 8238 	ldr.w	r8, [pc, #568]	; 4ed8 <chan_set+0x25c>
    4ca2:	d02e      	beq.n	4d02 <chan_set+0x86>
    4ca4:	2827      	cmp	r0, #39	; 0x27
    4ca6:	f8df 9234 	ldr.w	r9, [pc, #564]	; 4edc <chan_set+0x260>
    4caa:	d034      	beq.n	4d16 <chan_set+0x9a>
    4cac:	2825      	cmp	r0, #37	; 0x25
    4cae:	d162      	bne.n	4d76 <chan_set+0xfa>
			stop_time_37 = k_cycle_get_32();
    4cb0:	f7fd f8dc 	bl	1e6c <_timer_cycle_get_32>
			cycles_spent_37 = stop_time_37 - start_time37;
    4cb4:	4e78      	ldr	r6, [pc, #480]	; (4e98 <chan_set+0x21c>)
			stop_time_37 = k_cycle_get_32();
    4cb6:	4b79      	ldr	r3, [pc, #484]	; (4e9c <chan_set+0x220>)
			cycles_spent_37 = stop_time_37 - start_time37;
    4cb8:	6837      	ldr	r7, [r6, #0]
			stop_time_37 = k_cycle_get_32();
    4cba:	6018      	str	r0, [r3, #0]
			cycles_spent_37 = stop_time_37 - start_time37;
    4cbc:	4b78      	ldr	r3, [pc, #480]	; (4ea0 <chan_set+0x224>)
    4cbe:	1bc7      	subs	r7, r0, r7
    4cc0:	601f      	str	r7, [r3, #0]
			us_spent_37 = SYS_CLOCK_HW_CYCLES_TO_NS(cycles_spent_37)/1000;
    4cc2:	4b78      	ldr	r3, [pc, #480]	; (4ea4 <chan_set+0x228>)
    4cc4:	681a      	ldr	r2, [r3, #0]
    4cc6:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    4cca:	fb82 2305 	smull	r2, r3, r2, r5
    4cce:	fba2 0107 	umull	r0, r1, r2, r7
    4cd2:	f8d9 2000 	ldr.w	r2, [r9]
    4cd6:	fb07 1103 	mla	r1, r7, r3, r1
    4cda:	17d3      	asrs	r3, r2, #31
    4cdc:	f7fb fac4 	bl	268 <__aeabi_uldivmod>
    4ce0:	4b71      	ldr	r3, [pc, #452]	; (4ea8 <chan_set+0x22c>)
    4ce2:	fbb0 f0f5 	udiv	r0, r0, r5
    4ce6:	6018      	str	r0, [r3, #0]
			start_time = k_cycle_get_32();
    4ce8:	f7fd f8c0 	bl	1e6c <_timer_cycle_get_32>
    4cec:	f8c8 0000 	str.w	r0, [r8]
			start_time37= k_cycle_get_32();
    4cf0:	f7fd f8bc 	bl	1e6c <_timer_cycle_get_32>
			pckt_send++;
    4cf4:	4a6d      	ldr	r2, [pc, #436]	; (4eac <chan_set+0x230>)
			start_time37= k_cycle_get_32();
    4cf6:	6030      	str	r0, [r6, #0]
			pckt_send++;
    4cf8:	7813      	ldrb	r3, [r2, #0]
    4cfa:	3301      	adds	r3, #1
    4cfc:	7013      	strb	r3, [r2, #0]
			radio_freq_chan_set(2);
    4cfe:	2002      	movs	r0, #2
    4d00:	e0ad      	b.n	4e5e <chan_set+0x1e2>
			start_time = k_cycle_get_32();
    4d02:	f7fd f8b3 	bl	1e6c <_timer_cycle_get_32>
			pckt_send++;
    4d06:	4a69      	ldr	r2, [pc, #420]	; (4eac <chan_set+0x230>)
			start_time = k_cycle_get_32();
    4d08:	f8c8 0000 	str.w	r0, [r8]
			pckt_send++;
    4d0c:	7813      	ldrb	r3, [r2, #0]
    4d0e:	3301      	adds	r3, #1
    4d10:	7013      	strb	r3, [r2, #0]
			radio_freq_chan_set(26);
    4d12:	201a      	movs	r0, #26
    4d14:	e0a3      	b.n	4e5e <chan_set+0x1e2>
			stop_time_39 = k_cycle_get_32();
    4d16:	f7fd f8a9 	bl	1e6c <_timer_cycle_get_32>
    4d1a:	4b65      	ldr	r3, [pc, #404]	; (4eb0 <chan_set+0x234>)
    4d1c:	6018      	str	r0, [r3, #0]
			Time_difference = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_39 - start_time)/1000;
    4d1e:	f8d8 3000 	ldr.w	r3, [r8]
    4d22:	eba0 0e03 	sub.w	lr, r0, r3
    4d26:	4b5f      	ldr	r3, [pc, #380]	; (4ea4 <chan_set+0x228>)
    4d28:	681a      	ldr	r2, [r3, #0]
    4d2a:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
    4d2e:	fb82 2307 	smull	r2, r3, r2, r7
    4d32:	fbae 0102 	umull	r0, r1, lr, r2
    4d36:	f8d9 2000 	ldr.w	r2, [r9]
    4d3a:	fb0e 1103 	mla	r1, lr, r3, r1
    4d3e:	17d3      	asrs	r3, r2, #31
    4d40:	f7fb fa92 	bl	268 <__aeabi_uldivmod>
    4d44:	4b5b      	ldr	r3, [pc, #364]	; (4eb4 <chan_set+0x238>)
    4d46:	fbb0 f0f7 	udiv	r0, r0, r7
    4d4a:	6018      	str	r0, [r3, #0]
			pckt_send = 0;
    4d4c:	4b57      	ldr	r3, [pc, #348]	; (4eac <chan_set+0x230>)
			Time_difference = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_39 - start_time)/1000;
    4d4e:	2500      	movs	r5, #0
			pckt_send = 0;
    4d50:	701d      	strb	r5, [r3, #0]
			start_time = k_cycle_get_32();
    4d52:	f7fd f88b 	bl	1e6c <_timer_cycle_get_32>
			_radio.ext_advertiser.current_slot++;
    4d56:	f896 3689 	ldrb.w	r3, [r6, #1673]	; 0x689
			if(_radio.ext_advertiser.current_slot > _radio.ext_advertiser.max_skip){
    4d5a:	f896 2688 	ldrb.w	r2, [r6, #1672]	; 0x688
			start_time = k_cycle_get_32();
    4d5e:	f8c8 0000 	str.w	r0, [r8]
			_radio.ext_advertiser.current_slot++;
    4d62:	3301      	adds	r3, #1
    4d64:	b2db      	uxtb	r3, r3
			if(_radio.ext_advertiser.current_slot > _radio.ext_advertiser.max_skip){
    4d66:	429a      	cmp	r2, r3
			_radio.ext_advertiser.current_slot++;
    4d68:	f886 3689 	strb.w	r3, [r6, #1673]	; 0x689
			if(_radio.ext_advertiser.current_slot > _radio.ext_advertiser.max_skip){
    4d6c:	d201      	bcs.n	4d72 <chan_set+0xf6>
			_radio.ext_advertiser.current_slot= 0;
    4d6e:	f886 5689 	strb.w	r5, [r6, #1673]	; 0x689
			radio_freq_chan_set(80);
    4d72:	2050      	movs	r0, #80	; 0x50
    4d74:	e073      	b.n	4e5e <chan_set+0x1e2>
			stop_time_aux1 = k_cycle_get_32();
    4d76:	f7fd f879 	bl	1e6c <_timer_cycle_get_32>
    4d7a:	4b4f      	ldr	r3, [pc, #316]	; (4eb8 <chan_set+0x23c>)
    4d7c:	6018      	str	r0, [r3, #0]
    4d7e:	4b49      	ldr	r3, [pc, #292]	; (4ea4 <chan_set+0x228>)
    4d80:	681b      	ldr	r3, [r3, #0]
    4d82:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    4d86:	fb83 ab05 	smull	sl, fp, r3, r5
			us_spent_aux1 = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_aux1 - start_time)/1000;
    4d8a:	f8d9 3000 	ldr.w	r3, [r9]
    4d8e:	4619      	mov	r1, r3
    4d90:	17da      	asrs	r2, r3, #31
    4d92:	f8d8 3000 	ldr.w	r3, [r8]
			us_spent_5 = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_aux1 - start_time_5)/1000;
    4d96:	f8df 8148 	ldr.w	r8, [pc, #328]	; 4ee0 <chan_set+0x264>
			us_spent_aux1 = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_aux1 - start_time)/1000;
    4d9a:	1ac3      	subs	r3, r0, r3
			stop_time_aux1 = k_cycle_get_32();
    4d9c:	4607      	mov	r7, r0
			us_spent_aux1 = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_aux1 - start_time)/1000;
    4d9e:	e9cd 1200 	strd	r1, r2, [sp]
    4da2:	fba3 010a 	umull	r0, r1, r3, sl
    4da6:	fb03 110b 	mla	r1, r3, fp, r1
    4daa:	e9dd 2300 	ldrd	r2, r3, [sp]
    4dae:	f7fb fa5b 	bl	268 <__aeabi_uldivmod>
    4db2:	4b42      	ldr	r3, [pc, #264]	; (4ebc <chan_set+0x240>)
    4db4:	fbb0 f0f5 	udiv	r0, r0, r5
    4db8:	6018      	str	r0, [r3, #0]
			us_spent_aux = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_aux1 - start_time37)/1000;
    4dba:	4b37      	ldr	r3, [pc, #220]	; (4e98 <chan_set+0x21c>)
    4dbc:	681b      	ldr	r3, [r3, #0]
    4dbe:	1afb      	subs	r3, r7, r3
    4dc0:	fba3 010a 	umull	r0, r1, r3, sl
    4dc4:	fb03 110b 	mla	r1, r3, fp, r1
    4dc8:	e9dd 2300 	ldrd	r2, r3, [sp]
    4dcc:	f7fb fa4c 	bl	268 <__aeabi_uldivmod>
    4dd0:	4b3b      	ldr	r3, [pc, #236]	; (4ec0 <chan_set+0x244>)
    4dd2:	fbb0 f0f5 	udiv	r0, r0, r5
    4dd6:	6018      	str	r0, [r3, #0]
			us_spent_5 = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_aux1 - start_time_5)/1000;
    4dd8:	f8d8 3000 	ldr.w	r3, [r8]
    4ddc:	1aff      	subs	r7, r7, r3
    4dde:	fba7 010a 	umull	r0, r1, r7, sl
    4de2:	e9dd 2300 	ldrd	r2, r3, [sp]
    4de6:	fb07 110b 	mla	r1, r7, fp, r1
    4dea:	f7fb fa3d 	bl	268 <__aeabi_uldivmod>
    4dee:	4b35      	ldr	r3, [pc, #212]	; (4ec4 <chan_set+0x248>)
    4df0:	fbb0 f0f5 	udiv	r0, r0, r5
    4df4:	6018      	str	r0, [r3, #0]
 			stop_dynamic_cal = k_cycle_get_32(); 
    4df6:	f7fd f839 	bl	1e6c <_timer_cycle_get_32>
    4dfa:	4b33      	ldr	r3, [pc, #204]	; (4ec8 <chan_set+0x24c>)
			last_dynamic_cal = final_dynamic_cal;
    4dfc:	4f33      	ldr	r7, [pc, #204]	; (4ecc <chan_set+0x250>)
 			stop_dynamic_cal = k_cycle_get_32(); 
    4dfe:	2100      	movs	r1, #0
    4e00:	e9c3 0100 	strd	r0, r1, [r3]
			last_dynamic_cal = final_dynamic_cal;
    4e04:	4b32      	ldr	r3, [pc, #200]	; (4ed0 <chan_set+0x254>)
    4e06:	f8d7 b000 	ldr.w	fp, [r7]
    4e0a:	687a      	ldr	r2, [r7, #4]
    4e0c:	f8c3 b000 	str.w	fp, [r3]
    4e10:	605a      	str	r2, [r3, #4]
			final_dynamic_cal = SYS_CLOCK_HW_CYCLES_TO_NS(stop_dynamic_cal - start_dynamic_cal)/1000;
    4e12:	4b30      	ldr	r3, [pc, #192]	; (4ed4 <chan_set+0x258>)
    4e14:	e9d3 2300 	ldrd	r2, r3, [r3]
    4e18:	1a82      	subs	r2, r0, r2
    4e1a:	eb61 0303 	sbc.w	r3, r1, r3
    4e1e:	4921      	ldr	r1, [pc, #132]	; (4ea4 <chan_set+0x228>)
    4e20:	6808      	ldr	r0, [r1, #0]
    4e22:	fb80 0105 	smull	r0, r1, r0, r5
    4e26:	4351      	muls	r1, r2
    4e28:	fb00 1303 	mla	r3, r0, r3, r1
    4e2c:	fba2 0100 	umull	r0, r1, r2, r0
    4e30:	f8d9 2000 	ldr.w	r2, [r9]
    4e34:	4419      	add	r1, r3
    4e36:	17d3      	asrs	r3, r2, #31
    4e38:	f7fb fa16 	bl	268 <__aeabi_uldivmod>
    4e3c:	2300      	movs	r3, #0
    4e3e:	fbb0 f0f5 	udiv	r0, r0, r5
    4e42:	6038      	str	r0, [r7, #0]
			_radio.ext_advertiser.last_dynamic_cal = final_dynamic_cal-last_dynamic_cal;
    4e44:	eba0 000b 	sub.w	r0, r0, fp
			final_dynamic_cal = SYS_CLOCK_HW_CYCLES_TO_NS(stop_dynamic_cal - start_dynamic_cal)/1000;
    4e48:	607b      	str	r3, [r7, #4]
			_radio.ext_advertiser.last_dynamic_cal = final_dynamic_cal-last_dynamic_cal;
    4e4a:	f8c6 06a8 	str.w	r0, [r6, #1704]	; 0x6a8
			start_time_5 = k_cycle_get_32();
    4e4e:	f7fd f80d 	bl	1e6c <_timer_cycle_get_32>
    4e52:	f8c8 0000 	str.w	r0, [r8]
			if (chan < 11) {
    4e56:	2c0a      	cmp	r4, #10
    4e58:	d809      	bhi.n	4e6e <chan_set+0x1f2>
				radio_freq_chan_set(4 + (2 * chan));
    4e5a:	1ca0      	adds	r0, r4, #2
				radio_freq_chan_set(28 + (2 * (chan - 11)));
    4e5c:	0040      	lsls	r0, r0, #1
    4e5e:	f004 f9a9 	bl	91b4 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
    4e62:	4620      	mov	r0, r4
}
    4e64:	b003      	add	sp, #12
    4e66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	radio_whiten_iv_set(chan);
    4e6a:	f004 b9a9 	b.w	91c0 <radio_whiten_iv_set>
			} else if (chan < 40) {
    4e6e:	2c27      	cmp	r4, #39	; 0x27
    4e70:	d80a      	bhi.n	4e88 <chan_set+0x20c>
				radio_freq_chan_set(28 + (2 * (chan - 11)));
    4e72:	1ce0      	adds	r0, r4, #3
    4e74:	e7f2      	b.n	4e5c <chan_set+0x1e0>
		switch (chan) {
    4e76:	2826      	cmp	r0, #38	; 0x26
    4e78:	f43f af4b 	beq.w	4d12 <chan_set+0x96>
    4e7c:	2827      	cmp	r0, #39	; 0x27
    4e7e:	f43f af78 	beq.w	4d72 <chan_set+0xf6>
    4e82:	2825      	cmp	r0, #37	; 0x25
    4e84:	d1e7      	bne.n	4e56 <chan_set+0x1da>
    4e86:	e73a      	b.n	4cfe <chan_set+0x82>
				LL_ASSERT(0);
    4e88:	4040      	eors	r0, r0
    4e8a:	f380 8811 	msr	BASEPRI, r0
    4e8e:	f04f 0004 	mov.w	r0, #4
    4e92:	df02      	svc	2
    4e94:	20000370 	.word	0x20000370
    4e98:	20001a00 	.word	0x20001a00
    4e9c:	20001a6c 	.word	0x20001a6c
    4ea0:	20001abc 	.word	0x20001abc
    4ea4:	2000394c 	.word	0x2000394c
    4ea8:	20001ad8 	.word	0x20001ad8
    4eac:	20000b30 	.word	0x20000b30
    4eb0:	20001a70 	.word	0x20001a70
    4eb4:	20001ac0 	.word	0x20001ac0
    4eb8:	20001acc 	.word	0x20001acc
    4ebc:	20001a98 	.word	0x20001a98
    4ec0:	200019ec 	.word	0x200019ec
    4ec4:	20001ad0 	.word	0x20001ad0
    4ec8:	20001a90 	.word	0x20001a90
    4ecc:	20000b08 	.word	0x20000b08
    4ed0:	20000b10 	.word	0x20000b10
    4ed4:	200019f8 	.word	0x200019f8
    4ed8:	20001a88 	.word	0x20001a88
    4edc:	20003948 	.word	0x20003948
    4ee0:	20001aac 	.word	0x20001aac

00004ee4 <adv_setup>:
{
    4ee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (_radio.advertiser.adv_data.first !=
    4ee8:	4c81      	ldr	r4, [pc, #516]	; (50f0 <adv_setup+0x20c>)
    4eea:	f894 322d 	ldrb.w	r3, [r4, #557]	; 0x22d
    4eee:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    4ef2:	429a      	cmp	r2, r3
    4ef4:	d006      	beq.n	4f04 <adv_setup+0x20>
		first = _radio.advertiser.adv_data.first + 1;
    4ef6:	3301      	adds	r3, #1
    4ef8:	b2db      	uxtb	r3, r3
			first = 0;
    4efa:	2b02      	cmp	r3, #2
    4efc:	bf08      	it	eq
    4efe:	2300      	moveq	r3, #0
		_radio.advertiser.adv_data.first = first;
    4f00:	f884 322d 	strb.w	r3, [r4, #557]	; 0x22d
	if (_radio.advertiser.scan_data.first != _radio.
    4f04:	f894 3635 	ldrb.w	r3, [r4, #1589]	; 0x635
    4f08:	f894 2636 	ldrb.w	r2, [r4, #1590]	; 0x636
    4f0c:	429a      	cmp	r2, r3
    4f0e:	d006      	beq.n	4f1e <adv_setup+0x3a>
		first = _radio.advertiser.scan_data.first + 1;
    4f10:	3301      	adds	r3, #1
    4f12:	b2db      	uxtb	r3, r3
			first = 0;
    4f14:	2b02      	cmp	r3, #2
    4f16:	bf08      	it	eq
    4f18:	2300      	moveq	r3, #0
		_radio.advertiser.scan_data.first = first;
    4f1a:	f884 3635 	strb.w	r3, [r4, #1589]	; 0x635
	pdu = (void *)_radio.advertiser.adv_data.data
    4f1e:	f894 722d 	ldrb.w	r7, [r4, #557]	; 0x22d
    4f22:	eb07 2707 	add.w	r7, r7, r7, lsl #8
    4f26:	372b      	adds	r7, #43	; 0x2b
    4f28:	eb04 0907 	add.w	r9, r4, r7
	if(pdu->type == PDU_ADV_TYPE_EXT_IND){
    4f2c:	5de3      	ldrb	r3, [r4, r7]
    4f2e:	f003 030f 	and.w	r3, r3, #15
    4f32:	2b07      	cmp	r3, #7
    4f34:	d161      	bne.n	4ffa <adv_setup+0x116>
			if(h->adv_addr){
    4f36:	f899 3003 	ldrb.w	r3, [r9, #3]
    4f3a:	07dd      	lsls	r5, r3, #31
				ptr += BDADDR_SIZE;
    4f3c:	bf4c      	ite	mi
    4f3e:	f109 050a 	addmi.w	r5, r9, #10
		ptr = (u8_t *)h + sizeof(*h);
    4f42:	f109 0504 	addpl.w	r5, r9, #4
			if(h->tgt_addr){
    4f46:	079a      	lsls	r2, r3, #30
				ptr += BDADDR_SIZE;
    4f48:	bf48      	it	mi
    4f4a:	3506      	addmi	r5, #6
			if(h->adi){
    4f4c:	071e      	lsls	r6, r3, #28
				ptr += sizeof(*adi_ptr);
    4f4e:	bf48      	it	mi
    4f50:	3502      	addmi	r5, #2
			if(h->aux_ptr){
    4f52:	06da      	lsls	r2, r3, #27
    4f54:	d54b      	bpl.n	4fee <adv_setup+0x10a>
					_radio.ext_advertiser.slot = ( _radio.ext_advertiser.prim_interval + _radio.ext_advertiser.ticker_offset) * _radio.ext_advertiser.current_slot;
    4f56:	f8d4 26a4 	ldr.w	r2, [r4, #1700]	; 0x6a4
    4f5a:	f8d4 3680 	ldr.w	r3, [r4, #1664]	; 0x680
				if((_radio.advertiser.chan_map & 0x07)== 0x07) {
    4f5e:	f894 6029 	ldrb.w	r6, [r4, #41]	; 0x29
					_radio.ext_advertiser.slot = ( _radio.ext_advertiser.prim_interval + _radio.ext_advertiser.ticker_offset) * _radio.ext_advertiser.current_slot;
    4f62:	4413      	add	r3, r2
    4f64:	f894 2689 	ldrb.w	r2, [r4, #1673]	; 0x689
				if((_radio.advertiser.chan_map & 0x07)== 0x07) {
    4f68:	f3c6 1602 	ubfx	r6, r6, #4, #3
					_radio.ext_advertiser.slot = ( _radio.ext_advertiser.prim_interval + _radio.ext_advertiser.ticker_offset) * _radio.ext_advertiser.current_slot;
    4f6c:	435a      	muls	r2, r3
				if((_radio.advertiser.chan_map & 0x07)== 0x07) {
    4f6e:	2e07      	cmp	r6, #7
					_radio.ext_advertiser.slot = ( _radio.ext_advertiser.prim_interval + _radio.ext_advertiser.ticker_offset) * _radio.ext_advertiser.current_slot;
    4f70:	f8c4 268c 	str.w	r2, [r4, #1676]	; 0x68c
				if((_radio.advertiser.chan_map & 0x07)== 0x07) {
    4f74:	f040 8095 	bne.w	50a2 <adv_setup+0x1be>
					if((_radio.advertiser.chan_map_current & 0x07) == 0x07){
    4f78:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    4f7c:	f003 0307 	and.w	r3, r3, #7
    4f80:	2b07      	cmp	r3, #7
    4f82:	f040 8081 	bne.w	5088 <adv_setup+0x1a4>
						offset = (_radio.ext_advertiser.chan_37 -  _radio.ext_advertiser.slot );
    4f86:	f8d4 0690 	ldr.w	r0, [r4, #1680]	; 0x690
    4f8a:	1a82      	subs	r2, r0, r2
    4f8c:	4610      	mov	r0, r2
    4f8e:	2100      	movs	r1, #0
						_radio.ext_advertiser.chan_offset = offset;
    4f90:	f8c4 269c 	str.w	r2, [r4, #1692]	; 0x69c
				if(offset > 245700){
    4f94:	4a57      	ldr	r2, [pc, #348]	; (50f4 <adv_setup+0x210>)
    4f96:	78ae      	ldrb	r6, [r5, #2]
    4f98:	f895 8000 	ldrb.w	r8, [r5]
    4f9c:	2300      	movs	r3, #0
    4f9e:	428b      	cmp	r3, r1
    4fa0:	bf08      	it	eq
    4fa2:	4282      	cmpeq	r2, r0
    4fa4:	f080 808e 	bcs.w	50c4 <adv_setup+0x1e0>
					ap->offs = offset/1200;
    4fa8:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
    4fac:	2300      	movs	r3, #0
    4fae:	f7fb f95b 	bl	268 <__aeabi_uldivmod>
    4fb2:	f026 061f 	bic.w	r6, r6, #31
    4fb6:	7068      	strb	r0, [r5, #1]
    4fb8:	f3c0 2004 	ubfx	r0, r0, #8, #5
    4fbc:	4330      	orrs	r0, r6
    4fbe:	70a8      	strb	r0, [r5, #2]
					ap->offs_units = EXT_ADV_AUX_PTR_OFFS_UNITS_300;
    4fc0:	f048 0880 	orr.w	r8, r8, #128	; 0x80
				if(_radio.advertiser.ext_adv == 1){
    4fc4:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
					ap->offs_units = EXT_ADV_AUX_PTR_OFFS_UNITS_30;
    4fc8:	f885 8000 	strb.w	r8, [r5]
				if(_radio.advertiser.ext_adv == 1){
    4fcc:	07db      	lsls	r3, r3, #31
    4fce:	d508      	bpl.n	4fe2 <adv_setup+0xfe>
					_radio.ext_advertiser.aux_pckt_chan++;
    4fd0:	f894 36a0 	ldrb.w	r3, [r4, #1696]	; 0x6a0
    4fd4:	3301      	adds	r3, #1
    4fd6:	b2db      	uxtb	r3, r3
					if(_radio.ext_advertiser.aux_pckt_chan == 0x25){ //37 channel
    4fd8:	2b25      	cmp	r3, #37	; 0x25
						_radio.ext_advertiser.aux_pckt_chan = 0;
    4fda:	bf08      	it	eq
    4fdc:	2300      	moveq	r3, #0
    4fde:	f884 36a0 	strb.w	r3, [r4, #1696]	; 0x6a0
				ap->chan_idx = _radio.ext_advertiser.aux_pckt_chan;	
    4fe2:	782b      	ldrb	r3, [r5, #0]
    4fe4:	f894 26a0 	ldrb.w	r2, [r4, #1696]	; 0x6a0
    4fe8:	f362 0305 	bfi	r3, r2, #0, #6
    4fec:	702b      	strb	r3, [r5, #0]
		_radio.advertiser.ext_adv = 0;
    4fee:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    4ff2:	f36f 0300 	bfc	r3, #0, #1
    4ff6:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
		radio_pkt_tx_set(pdu);
    4ffa:	4648      	mov	r0, r9
    4ffc:	f004 f93e 	bl	927c <radio_pkt_tx_set>
		if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
    5000:	5de3      	ldrb	r3, [r4, r7]
    5002:	f003 030f 	and.w	r3, r3, #15
    5006:	2b02      	cmp	r3, #2
    5008:	d06a      	beq.n	50e0 <adv_setup+0x1fc>
    500a:	2b07      	cmp	r3, #7
    500c:	d068      	beq.n	50e0 <adv_setup+0x1fc>
			_radio.state = STATE_TX;
    500e:	2302      	movs	r3, #2
			radio_tmr_tifs_set(RADIO_TIFS);
    5010:	2096      	movs	r0, #150	; 0x96
			_radio.state = STATE_TX;
    5012:	7523      	strb	r3, [r4, #20]
			radio_tmr_tifs_set(RADIO_TIFS);
    5014:	f004 fa3c 	bl	9490 <radio_tmr_tifs_set>
			radio_switch_complete_and_rx(0);
    5018:	2000      	movs	r0, #0
    501a:	f004 f9a9 	bl	9370 <radio_switch_complete_and_rx>
		bitmap = _radio.advertiser.chan_map_current;
    501e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    5022:	f3c3 0202 	ubfx	r2, r3, #0, #3
    5026:	b2d3      	uxtb	r3, r2
    5028:	4619      	mov	r1, r3
		while ((bitmap & 0x01) == 0) {
    502a:	2000      	movs	r0, #0
    502c:	07ce      	lsls	r6, r1, #31
    502e:	f100 0501 	add.w	r5, r0, #1
    5032:	d55a      	bpl.n	50ea <adv_setup+0x206>
			(_radio.advertiser.chan_map_current - 1);
    5034:	3b01      	subs	r3, #1
			_radio.advertiser.chan_map_current &=
    5036:	4013      	ands	r3, r2
    5038:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
		count++;
    503c:	4d2e      	ldr	r5, [pc, #184]	; (50f8 <adv_setup+0x214>)
			_radio.advertiser.chan_map_current &=
    503e:	f363 0202 	bfi	r2, r3, #0, #3
    5042:	4b2e      	ldr	r3, [pc, #184]	; (50fc <adv_setup+0x218>)
    5044:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
		if(! _radio.advertiser.chan_map_current){	
    5048:	f012 0f07 	tst.w	r2, #7
			chan_case ++;
    504c:	bf08      	it	eq
    504e:	781a      	ldrbeq	r2, [r3, #0]
		count++;
    5050:	7829      	ldrb	r1, [r5, #0]
			chan_case ++;
    5052:	bf0c      	ite	eq
    5054:	3201      	addeq	r2, #1
*/			chan_case = 0 ;
    5056:	2200      	movne	r2, #0
    5058:	701a      	strb	r2, [r3, #0]
		_radio.ext_advertiser.event++;
    505a:	f894 368a 	ldrb.w	r3, [r4, #1674]	; 0x68a
		if(_radio.ext_advertiser.event > _radio.ext_advertiser.max_skip){
    505e:	f894 2688 	ldrb.w	r2, [r4, #1672]	; 0x688
		_radio.ext_advertiser.event++;
    5062:	3301      	adds	r3, #1
    5064:	b2db      	uxtb	r3, r3
		if(_radio.ext_advertiser.event > _radio.ext_advertiser.max_skip){
    5066:	429a      	cmp	r2, r3
		count++;
    5068:	f101 0101 	add.w	r1, r1, #1
		_radio.ext_advertiser.event++;
    506c:	f884 368a 	strb.w	r3, [r4, #1674]	; 0x68a
		count++;
    5070:	7029      	strb	r1, [r5, #0]
			_radio.ext_advertiser.event = 0;
    5072:	bf38      	it	cc
    5074:	2300      	movcc	r3, #0
		chan_set(37 + chan);
    5076:	b2c0      	uxtb	r0, r0
			_radio.ext_advertiser.event = 0;
    5078:	bf38      	it	cc
    507a:	f884 368a 	strbcc.w	r3, [r4, #1674]	; 0x68a
		chan_set(37 + chan);
    507e:	3025      	adds	r0, #37	; 0x25
}
    5080:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		chan_set(37 + chan);
    5084:	f7ff bdfa 	b.w	4c7c <chan_set>
					}else if((_radio.advertiser.chan_map_current & 0x07) == 0x06){
    5088:	2b06      	cmp	r3, #6
    508a:	d104      	bne.n	5096 <adv_setup+0x1b2>
						offset = (_radio.ext_advertiser.chan_38 - _radio.ext_advertiser.slot );
    508c:	f8d4 0694 	ldr.w	r0, [r4, #1684]	; 0x694
						offset = (_radio.ext_advertiser.chan_39 - _radio.ext_advertiser.slot );
    5090:	1a80      	subs	r0, r0, r2
					offset = (_radio.ext_advertiser.chan_37 -  _radio.ext_advertiser.slot );
    5092:	2100      	movs	r1, #0
    5094:	e77e      	b.n	4f94 <adv_setup+0xb0>
					}else if((_radio.advertiser.chan_map_current & 0x07) == 0x04){
    5096:	2b04      	cmp	r3, #4
    5098:	f47f af7c 	bne.w	4f94 <adv_setup+0xb0>
						offset = (_radio.ext_advertiser.chan_39 - _radio.ext_advertiser.slot );
    509c:	f8d4 0698 	ldr.w	r0, [r4, #1688]	; 0x698
    50a0:	e7f6      	b.n	5090 <adv_setup+0x1ac>
					_radio.ext_advertiser.slot = ( _radio.ext_advertiser.prim_interval + _radio.ext_advertiser.ticker_offset ) * _radio.ext_advertiser.event;
    50a2:	f894 668a 	ldrb.w	r6, [r4, #1674]	; 0x68a
    50a6:	4373      	muls	r3, r6
    50a8:	f8c4 368c 	str.w	r3, [r4, #1676]	; 0x68c
					if(_radio.ext_advertiser.event == 0){
    50ac:	b926      	cbnz	r6, 50b8 <adv_setup+0x1d4>
						start_dynamic_cal = k_cycle_get_32(); 
    50ae:	f7fc fedd 	bl	1e6c <_timer_cycle_get_32>
    50b2:	4b13      	ldr	r3, [pc, #76]	; (5100 <adv_setup+0x21c>)
    50b4:	e883 0041 	stmia.w	r3, {r0, r6}
					offset = (_radio.ext_advertiser.chan_37 -  _radio.ext_advertiser.slot );
    50b8:	f8d4 0690 	ldr.w	r0, [r4, #1680]	; 0x690
    50bc:	f8d4 368c 	ldr.w	r3, [r4, #1676]	; 0x68c
    50c0:	1ac0      	subs	r0, r0, r3
    50c2:	e7e6      	b.n	5092 <adv_setup+0x1ae>
					ap->offs = offset /30;
    50c4:	221e      	movs	r2, #30
    50c6:	2300      	movs	r3, #0
    50c8:	f7fb f8ce 	bl	268 <__aeabi_uldivmod>
    50cc:	f026 061f 	bic.w	r6, r6, #31
    50d0:	7068      	strb	r0, [r5, #1]
    50d2:	f3c0 2004 	ubfx	r0, r0, #8, #5
    50d6:	4306      	orrs	r6, r0
    50d8:	70ae      	strb	r6, [r5, #2]
					ap->offs_units = EXT_ADV_AUX_PTR_OFFS_UNITS_30;
    50da:	f36f 18c7 	bfc	r8, #7, #1
    50de:	e771      	b.n	4fc4 <adv_setup+0xe0>
			_radio.state = STATE_CLOSE;
    50e0:	2303      	movs	r3, #3
    50e2:	7523      	strb	r3, [r4, #20]
			radio_switch_complete_and_disable();
    50e4:	f004 f95a 	bl	939c <radio_switch_complete_and_disable>
    50e8:	e799      	b.n	501e <adv_setup+0x13a>
			bitmap >>= 1;
    50ea:	0849      	lsrs	r1, r1, #1
    50ec:	4628      	mov	r0, r5
    50ee:	e79d      	b.n	502c <adv_setup+0x148>
    50f0:	20000370 	.word	0x20000370
    50f4:	0003bfc4 	.word	0x0003bfc4
    50f8:	20000b02 	.word	0x20000b02
    50fc:	20000b01 	.word	0x20000b01
    5100:	200019f8 	.word	0x200019f8
    5104:	00000000 	.word	0x00000000

00005108 <sched_after_mstr_free_slot_get>:
{
    5108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    510c:	b08b      	sub	sp, #44	; 0x2c
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    510e:	2400      	movs	r4, #0
	ticker_id = ticker_id_prev = 0xff;
    5110:	25ff      	movs	r5, #255	; 0xff
				  _radio.connection_count)) {
    5112:	f8df 9114 	ldr.w	r9, [pc, #276]	; 5228 <sched_after_mstr_free_slot_get+0x120>
	ticker_id = ticker_id_prev = 0xff;
    5116:	f88d 501f 	strb.w	r5, [sp, #31]
{
    511a:	4680      	mov	r8, r0
    511c:	4693      	mov	fp, r2
    511e:	461f      	mov	r7, r3
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(RADIO_TICKER_JITTER_US << 3);
    5120:	f101 0a04 	add.w	sl, r1, #4
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    5124:	601c      	str	r4, [r3, #0]
    5126:	9408      	str	r4, [sp, #32]
    5128:	4626      	mov	r6, r4
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    512a:	2302      	movs	r3, #2
    512c:	9309      	str	r3, [sp, #36]	; 0x24
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    512e:	ab09      	add	r3, sp, #36	; 0x24
    5130:	9302      	str	r3, [sp, #8]
    5132:	4b3b      	ldr	r3, [pc, #236]	; (5220 <sched_after_mstr_free_slot_get+0x118>)
    5134:	9301      	str	r3, [sp, #4]
    5136:	ab08      	add	r3, sp, #32
    5138:	9300      	str	r3, [sp, #0]
    513a:	f10d 021f 	add.w	r2, sp, #31
    513e:	465b      	mov	r3, fp
    5140:	4641      	mov	r1, r8
    5142:	2000      	movs	r0, #0
    5144:	f7fe fc6c 	bl	3a20 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    5148:	2802      	cmp	r0, #2
    514a:	d00b      	beq.n	5164 <sched_after_mstr_free_slot_get+0x5c>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    514c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    514e:	b16b      	cbz	r3, 516c <sched_after_mstr_free_slot_get+0x64>
    5150:	4040      	eors	r0, r0
    5152:	f380 8811 	msr	BASEPRI, r0
    5156:	f04f 0004 	mov.w	r0, #4
    515a:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    515c:	4641      	mov	r1, r8
    515e:	2000      	movs	r0, #0
    5160:	f7fe fcdc 	bl	3b1c <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    5164:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5166:	2b02      	cmp	r3, #2
    5168:	d0f8      	beq.n	515c <sched_after_mstr_free_slot_get+0x54>
    516a:	e7ef      	b.n	514c <sched_after_mstr_free_slot_get+0x44>
		if (ticker_id == 0xff) {
    516c:	f89d 201f 	ldrb.w	r2, [sp, #31]
    5170:	2aff      	cmp	r2, #255	; 0xff
    5172:	d04e      	beq.n	5212 <sched_after_mstr_free_slot_get+0x10a>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    5174:	2a06      	cmp	r2, #6
    5176:	d9d8      	bls.n	512a <sched_after_mstr_free_slot_get+0x22>
				  _radio.connection_count)) {
    5178:	f899 3718 	ldrb.w	r3, [r9, #1816]	; 0x718
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    517c:	3307      	adds	r3, #7
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    517e:	429a      	cmp	r2, r3
    5180:	dad3      	bge.n	512a <sched_after_mstr_free_slot_get+0x22>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    5182:	3a07      	subs	r2, #7
    5184:	b292      	uxth	r2, r2
    5186:	f44f 7182 	mov.w	r1, #260	; 0x104
    518a:	f8d9 0710 	ldr.w	r0, [r9, #1808]	; 0x710
    518e:	f7fd fd39 	bl	2c04 <mem_get>
		if (conn && !conn->role) {
    5192:	2800      	cmp	r0, #0
    5194:	d0c9      	beq.n	512a <sched_after_mstr_free_slot_get+0x22>
    5196:	f990 301d 	ldrsb.w	r3, [r0, #29]
    519a:	2b00      	cmp	r3, #0
    519c:	dbc5      	blt.n	512a <sched_after_mstr_free_slot_get+0x22>
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    519e:	6803      	ldr	r3, [r0, #0]
			u32_t ticks_to_expire_normal = ticks_to_expire;
    51a0:	9a08      	ldr	r2, [sp, #32]
    51a2:	f8d0 e004 	ldr.w	lr, [r0, #4]
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    51a6:	2b00      	cmp	r3, #0
    51a8:	da12      	bge.n	51d0 <sched_after_mstr_free_slot_get+0xc8>
    51aa:	6881      	ldr	r1, [r0, #8]
				ticks_slot_abs_curr =
    51ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    51b0:	4571      	cmp	r1, lr
    51b2:	bf2c      	ite	cs
    51b4:	1852      	addcs	r2, r2, r1
    51b6:	4472      	addcc	r2, lr
				ticks_to_expire_normal -=
    51b8:	1ad2      	subs	r2, r2, r3
			ticks_slot_abs_curr +=
    51ba:	68c1      	ldr	r1, [r0, #12]
			if ((ticker_id_prev != 0xFF) &&
    51bc:	2dff      	cmp	r5, #255	; 0xff
			ticks_slot_abs_curr +=
    51be:	f101 0104 	add.w	r1, r1, #4
    51c2:	440b      	add	r3, r1
			if ((ticker_id_prev != 0xFF) &&
    51c4:	d108      	bne.n	51d8 <sched_after_mstr_free_slot_get+0xd0>
			ticker_id_prev = ticker_id;
    51c6:	f89d 501f 	ldrb.w	r5, [sp, #31]
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    51ca:	461c      	mov	r4, r3
			ticks_to_expire_prev = ticks_to_expire_normal;
    51cc:	4616      	mov	r6, r2
    51ce:	e7ac      	b.n	512a <sched_after_mstr_free_slot_get+0x22>
				u32_t ticks_prepare_to_start =
    51d0:	4573      	cmp	r3, lr
    51d2:	bf38      	it	cc
    51d4:	4673      	movcc	r3, lr
    51d6:	e7f0      	b.n	51ba <sched_after_mstr_free_slot_get+0xb2>
			    (ticker_ticks_diff_get(ticks_to_expire_normal,
    51d8:	4631      	mov	r1, r6
    51da:	4610      	mov	r0, r2
    51dc:	9305      	str	r3, [sp, #20]
    51de:	9204      	str	r2, [sp, #16]
    51e0:	f7fe fcb4 	bl	3b4c <ticker_ticks_diff_get>
			     (ticks_slot_abs_prev + ticks_slot_abs))) {
    51e4:	eb04 010a 	add.w	r1, r4, sl
			if ((ticker_id_prev != 0xFF) &&
    51e8:	4288      	cmp	r0, r1
    51ea:	9a04      	ldr	r2, [sp, #16]
    51ec:	9b05      	ldr	r3, [sp, #20]
    51ee:	d9ea      	bls.n	51c6 <sched_after_mstr_free_slot_get+0xbe>
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    51f0:	480c      	ldr	r0, [pc, #48]	; (5224 <sched_after_mstr_free_slot_get+0x11c>)
    51f2:	4434      	add	r4, r6
    51f4:	fba4 0100 	umull	r0, r1, r4, r0
    51f8:	2307      	movs	r3, #7
    51fa:	fb03 1104 	mla	r1, r3, r4, r1
    51fe:	a306      	add	r3, pc, #24	; (adr r3, 5218 <sched_after_mstr_free_slot_get+0x110>)
    5200:	e9d3 2300 	ldrd	r2, r3, [r3]
    5204:	f7fb f830 	bl	268 <__aeabi_uldivmod>
						    ticks_slot_abs_prev) +
    5208:	3080      	adds	r0, #128	; 0x80
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    520a:	6038      	str	r0, [r7, #0]
}
    520c:	b00b      	add	sp, #44	; 0x2c
    520e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (ticker_id_prev != 0xff) {
    5212:	2dff      	cmp	r5, #255	; 0xff
    5214:	d1ec      	bne.n	51f0 <sched_after_mstr_free_slot_get+0xe8>
    5216:	e7f9      	b.n	520c <sched_after_mstr_free_slot_get+0x104>
    5218:	3b9aca00 	.word	0x3b9aca00
    521c:	00000000 	.word	0x00000000
    5220:	000048d5 	.word	0x000048d5
    5224:	1afd498d 	.word	0x1afd498d
    5228:	20000370 	.word	0x20000370

0000522c <isr_adv_ci_adva_check>:
{
    522c:	b570      	push	{r4, r5, r6, lr}
	return (adv->tx_addr == ci->rx_addr) &&
    522e:	7804      	ldrb	r4, [r0, #0]
    5230:	780a      	ldrb	r2, [r1, #0]
    5232:	f3c4 1380 	ubfx	r3, r4, #6, #1
    5236:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    523a:	d119      	bne.n	5270 <isr_adv_ci_adva_check+0x44>
    523c:	f004 040f 	and.w	r4, r4, #15
    5240:	2c01      	cmp	r4, #1
    5242:	f101 0608 	add.w	r6, r1, #8
    5246:	f100 0502 	add.w	r5, r0, #2
    524a:	d008      	beq.n	525e <isr_adv_ci_adva_check+0x32>
		 (!memcmp(adv->adv_ind.addr, ci->connect_ind.adv_addr,
    524c:	2206      	movs	r2, #6
    524e:	4631      	mov	r1, r6
    5250:	4628      	mov	r0, r5
    5252:	f7fb f9bc 	bl	5ce <memcmp>
			 BDADDR_SIZE)) ||
    5256:	fab0 f080 	clz	r0, r0
    525a:	0940      	lsrs	r0, r0, #5
    525c:	bd70      	pop	{r4, r5, r6, pc}
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
    525e:	2206      	movs	r2, #6
    5260:	4631      	mov	r1, r6
    5262:	4628      	mov	r0, r5
    5264:	f7fb f9b3 	bl	5ce <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
    5268:	2800      	cmp	r0, #0
    526a:	d1ef      	bne.n	524c <isr_adv_ci_adva_check+0x20>
	return (adv->tx_addr == ci->rx_addr) &&
    526c:	4620      	mov	r0, r4
    526e:	bd70      	pop	{r4, r5, r6, pc}
    5270:	2000      	movs	r0, #0
}
    5272:	bd70      	pop	{r4, r5, r6, pc}

00005274 <rx_fc_lock>:
	packet_rx_allocate(0xff);
}

static void rx_fc_lock(u16_t handle)
{
	if (_radio.fc_req == _radio.fc_ack) {
    5274:	4a0b      	ldr	r2, [pc, #44]	; (52a4 <rx_fc_lock+0x30>)
    5276:	f892 3780 	ldrb.w	r3, [r2, #1920]	; 0x780
    527a:	f892 1781 	ldrb.w	r1, [r2, #1921]	; 0x781
    527e:	4299      	cmp	r1, r3
    5280:	d10e      	bne.n	52a0 <rx_fc_lock+0x2c>
		u8_t req;

		_radio.fc_handle[_radio.fc_req] = handle;
    5282:	f892 3780 	ldrb.w	r3, [r2, #1920]	; 0x780
    5286:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    528a:	f8a3 077a 	strh.w	r0, [r3, #1914]	; 0x77a
		req = _radio.fc_req + 1;
    528e:	f892 3780 	ldrb.w	r3, [r2, #1920]	; 0x780
    5292:	3301      	adds	r3, #1
    5294:	b2db      	uxtb	r3, r3
		if (req == TRIPLE_BUFFER_SIZE) {
			req = 0;
    5296:	2b03      	cmp	r3, #3
    5298:	bf08      	it	eq
    529a:	2300      	moveq	r3, #0
		}
		_radio.fc_req = req;
    529c:	f882 3780 	strb.w	r3, [r2, #1920]	; 0x780
    52a0:	4770      	bx	lr
    52a2:	bf00      	nop
    52a4:	20000370 	.word	0x20000370

000052a8 <ticker_job_disable>:
	if (_radio.state != STATE_NONE) {
    52a8:	4b04      	ldr	r3, [pc, #16]	; (52bc <ticker_job_disable+0x14>)
    52aa:	7d1b      	ldrb	r3, [r3, #20]
    52ac:	b123      	cbz	r3, 52b8 <ticker_job_disable+0x10>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    52ae:	2101      	movs	r1, #1
    52b0:	2200      	movs	r2, #0
    52b2:	4608      	mov	r0, r1
    52b4:	f7fd bd08 	b.w	2cc8 <mayfly_enable>
    52b8:	4770      	bx	lr
    52ba:	bf00      	nop
    52bc:	20000370 	.word	0x20000370

000052c0 <hdr_conn_get>:
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    52c0:	2806      	cmp	r0, #6
{
    52c2:	b510      	push	{r4, lr}
    52c4:	460c      	mov	r4, r1
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    52c6:	d90a      	bls.n	52de <hdr_conn_get+0x1e>
		*conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    52c8:	4b09      	ldr	r3, [pc, #36]	; (52f0 <hdr_conn_get+0x30>)
    52ca:	1fc2      	subs	r2, r0, #7
    52cc:	b292      	uxth	r2, r2
    52ce:	f44f 7182 	mov.w	r1, #260	; 0x104
    52d2:	f8d3 0710 	ldr.w	r0, [r3, #1808]	; 0x710
    52d6:	f7fd fc95 	bl	2c04 <mem_get>
    52da:	6020      	str	r0, [r4, #0]
    52dc:	bd10      	pop	{r4, pc}
	} else if (ticker_id == RADIO_TICKER_ID_ADV) {
    52de:	2805      	cmp	r0, #5
    52e0:	d004      	beq.n	52ec <hdr_conn_get+0x2c>
	} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
    52e2:	2806      	cmp	r0, #6
	return NULL;
    52e4:	4803      	ldr	r0, [pc, #12]	; (52f4 <hdr_conn_get+0x34>)
    52e6:	bf18      	it	ne
    52e8:	2000      	movne	r0, #0
    52ea:	bd10      	pop	{r4, pc}
		return &_radio.advertiser.hdr;
    52ec:	4802      	ldr	r0, [pc, #8]	; (52f8 <hdr_conn_get+0x38>)
}
    52ee:	bd10      	pop	{r4, pc}
    52f0:	20000370 	.word	0x20000370
    52f4:	200009ac 	.word	0x200009ac
    52f8:	20000388 	.word	0x20000388

000052fc <mayfly_xtal_retain.part.16>:
static void mayfly_xtal_retain(u8_t caller_id, u8_t retain)
    52fc:	b508      	push	{r3, lr}
			s_xtal_retained = 0;
    52fe:	4b0a      	ldr	r3, [pc, #40]	; (5328 <mayfly_xtal_retain.part.16+0x2c>)
    5300:	2200      	movs	r2, #0
    5302:	701a      	strb	r2, [r3, #0]
			switch (caller_id) {
    5304:	b168      	cbz	r0, 5322 <mayfly_xtal_retain.part.16+0x26>
    5306:	2801      	cmp	r0, #1
    5308:	d105      	bne.n	5316 <mayfly_xtal_retain.part.16+0x1a>
				p_mfy_xtal_stop = &s_mfy_xtal_stop[1];
    530a:	4b08      	ldr	r3, [pc, #32]	; (532c <mayfly_xtal_retain.part.16+0x30>)
			retval = mayfly_enqueue(caller_id,
    530c:	2200      	movs	r2, #0
    530e:	4611      	mov	r1, r2
    5310:	f7fd fd02 	bl	2d18 <mayfly_enqueue>
			LL_ASSERT(!retval);
    5314:	b138      	cbz	r0, 5326 <mayfly_xtal_retain.part.16+0x2a>
    5316:	4040      	eors	r0, r0
    5318:	f380 8811 	msr	BASEPRI, r0
    531c:	f04f 0004 	mov.w	r0, #4
    5320:	df02      	svc	2
				p_mfy_xtal_stop = &s_mfy_xtal_stop[0];
    5322:	4b03      	ldr	r3, [pc, #12]	; (5330 <mayfly_xtal_retain.part.16+0x34>)
    5324:	e7f2      	b.n	530c <mayfly_xtal_retain.part.16+0x10>
    5326:	bd08      	pop	{r3, pc}
    5328:	20000b84 	.word	0x20000b84
    532c:	200038c0 	.word	0x200038c0
    5330:	200038b0 	.word	0x200038b0

00005334 <rx_packet_set>:
{
    5334:	b538      	push	{r3, r4, r5, lr}
    5336:	4605      	mov	r5, r0
    5338:	460c      	mov	r4, r1
	radio_phy_set(phy, 0);
    533a:	2100      	movs	r1, #0
    533c:	4608      	mov	r0, r1
    533e:	f003 ff23 	bl	9188 <radio_phy_set>
	if (conn->enc_rx) {
    5342:	f895 30a8 	ldrb.w	r3, [r5, #168]	; 0xa8
    5346:	06db      	lsls	r3, r3, #27
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
    5348:	f04f 0201 	mov.w	r2, #1
	if (conn->enc_rx) {
    534c:	d50d      	bpl.n	536a <rx_packet_set+0x36>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
    534e:	211f      	movs	r1, #31
    5350:	2008      	movs	r0, #8
    5352:	f003 ff5f 	bl	9214 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&conn->ccm_rx, phy,
    5356:	4622      	mov	r2, r4
    5358:	2100      	movs	r1, #0
    535a:	f105 00a9 	add.w	r0, r5, #169	; 0xa9
    535e:	f004 f991 	bl	9684 <radio_ccm_rx_pkt_set>
}
    5362:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		radio_pkt_rx_set(pdu_data_rx);
    5366:	f003 bf83 	b.w	9270 <radio_pkt_rx_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
    536a:	2008      	movs	r0, #8
    536c:	211b      	movs	r1, #27
    536e:	f003 ff51 	bl	9214 <radio_pkt_configure>
		radio_pkt_rx_set(pdu_data_rx);
    5372:	4620      	mov	r0, r4
    5374:	e7f5      	b.n	5362 <rx_packet_set+0x2e>

00005376 <tx_packet_set>:
{
    5376:	b538      	push	{r3, r4, r5, lr}
    5378:	4605      	mov	r5, r0
    537a:	460c      	mov	r4, r1
	radio_phy_set(phy, flags);
    537c:	2100      	movs	r1, #0
    537e:	4608      	mov	r0, r1
    5380:	f003 ff02 	bl	9188 <radio_phy_set>
	if (conn->enc_tx) {
    5384:	f895 30a8 	ldrb.w	r3, [r5, #168]	; 0xa8
    5388:	069b      	lsls	r3, r3, #26
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
    538a:	f04f 0201 	mov.w	r2, #1
	if (conn->enc_tx) {
    538e:	d50c      	bpl.n	53aa <tx_packet_set+0x34>
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
    5390:	211f      	movs	r1, #31
    5392:	2008      	movs	r0, #8
    5394:	f003 ff3e 	bl	9214 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&conn->ccm_tx,
    5398:	4621      	mov	r1, r4
    539a:	f105 00ca 	add.w	r0, r5, #202	; 0xca
    539e:	f004 f9ad 	bl	96fc <radio_ccm_tx_pkt_set>
}
    53a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		radio_pkt_tx_set(pdu_data_tx);
    53a6:	f003 bf69 	b.w	927c <radio_pkt_tx_set>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
    53aa:	2008      	movs	r0, #8
    53ac:	211b      	movs	r1, #27
    53ae:	f003 ff31 	bl	9214 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
    53b2:	4620      	mov	r0, r4
    53b4:	e7f5      	b.n	53a2 <tx_packet_set+0x2c>
	...

000053b8 <isr_scan_tgta_check.isra.30>:
static inline bool isr_scan_tgta_check(bool init, struct pdu_adv *pdu,
    53b8:	b570      	push	{r4, r5, r6, lr}
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    53ba:	4c16      	ldr	r4, [pc, #88]	; (5414 <isr_scan_tgta_check.isra.30+0x5c>)
    53bc:	7803      	ldrb	r3, [r0, #0]
    53be:	f894 264d 	ldrb.w	r2, [r4, #1613]	; 0x64d
			BDADDR_SIZE) == 0))) ||
    53c2:	09db      	lsrs	r3, r3, #7
    53c4:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
static inline bool isr_scan_tgta_check(bool init, struct pdu_adv *pdu,
    53c8:	4605      	mov	r5, r0
    53ca:	460e      	mov	r6, r1
			BDADDR_SIZE) == 0))) ||
    53cc:	d007      	beq.n	53de <isr_scan_tgta_check.isra.30+0x26>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    53ce:	f894 064d 	ldrb.w	r0, [r4, #1613]	; 0x64d
    53d2:	f3c0 1001 	ubfx	r0, r0, #4, #2
    53d6:	f010 0002 	ands.w	r0, r0, #2
    53da:	d10b      	bne.n	53f4 <isr_scan_tgta_check.isra.30+0x3c>
    53dc:	bd70      	pop	{r4, r5, r6, pc}
		(memcmp(&_radio.scanner.init_addr[0],
    53de:	f100 0108 	add.w	r1, r0, #8
    53e2:	2206      	movs	r2, #6
    53e4:	f204 604e 	addw	r0, r4, #1614	; 0x64e
    53e8:	f7fb f8f1 	bl	5ce <memcmp>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    53ec:	2800      	cmp	r0, #0
    53ee:	d1ee      	bne.n	53ce <isr_scan_tgta_check.isra.30+0x16>
			BDADDR_SIZE) == 0))) ||
    53f0:	2001      	movs	r0, #1
    53f2:	bd70      	pop	{r4, r5, r6, pc}
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    53f4:	f995 3000 	ldrsb.w	r3, [r5]
    53f8:	2b00      	cmp	r3, #0
    53fa:	da09      	bge.n	5410 <isr_scan_tgta_check.isra.30+0x58>
	    (pdu->rx_addr != 0) &&
    53fc:	7b6b      	ldrb	r3, [r5, #13]
    53fe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    5402:	2b40      	cmp	r3, #64	; 0x40
    5404:	d104      	bne.n	5410 <isr_scan_tgta_check.isra.30+0x58>
		if (dir_report) {
    5406:	2e00      	cmp	r6, #0
    5408:	d0f2      	beq.n	53f0 <isr_scan_tgta_check.isra.30+0x38>
			*dir_report = true;
    540a:	2001      	movs	r0, #1
    540c:	7030      	strb	r0, [r6, #0]
    540e:	bd70      	pop	{r4, r5, r6, pc}
			BDADDR_SIZE) == 0))) ||
    5410:	2000      	movs	r0, #0
}
    5412:	bd70      	pop	{r4, r5, r6, pc}
    5414:	20000370 	.word	0x20000370

00005418 <event_active.part.17>:
	LL_ASSERT(!_radio.ticker_id_prepare);
    5418:	4040      	eors	r0, r0
    541a:	f380 8811 	msr	BASEPRI, r0
    541e:	f04f 0004 	mov.w	r0, #4
    5422:	df02      	svc	2

00005424 <prepare_normal_set>:
{
    5424:	b530      	push	{r4, r5, lr}
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    5426:	6804      	ldr	r4, [r0, #0]
    5428:	2c00      	cmp	r4, #0
{
    542a:	b089      	sub	sp, #36	; 0x24
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    542c:	da19      	bge.n	5462 <prepare_normal_set+0x3e>
		u32_t ticks_prepare_to_start =
    542e:	6843      	ldr	r3, [r0, #4]
    5430:	6885      	ldr	r5, [r0, #8]
		ticker_status =
    5432:	9006      	str	r0, [sp, #24]
		u32_t ticks_drift_minus = (hdr->ticks_xtal_to_start &
    5434:	429d      	cmp	r5, r3
    5436:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
    543a:	bf34      	ite	cc
    543c:	1ae4      	subcc	r4, r4, r3
    543e:	1b64      	subcs	r4, r4, r5
		ticker_status =
    5440:	4b09      	ldr	r3, [pc, #36]	; (5468 <prepare_normal_set+0x44>)
    5442:	9305      	str	r3, [sp, #20]
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    5444:	b2a4      	uxth	r4, r4
		ticker_status =
    5446:	2300      	movs	r3, #0
    5448:	9304      	str	r3, [sp, #16]
    544a:	9303      	str	r3, [sp, #12]
    544c:	9302      	str	r3, [sp, #8]
    544e:	4618      	mov	r0, r3
    5450:	9401      	str	r4, [sp, #4]
    5452:	9400      	str	r4, [sp, #0]
    5454:	f7fe fa5a 	bl	390c <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    5458:	f030 0302 	bics.w	r3, r0, #2
    545c:	d001      	beq.n	5462 <prepare_normal_set+0x3e>
    545e:	f7ff ffdb 	bl	5418 <event_active.part.17>
}
    5462:	b009      	add	sp, #36	; 0x24
    5464:	bd30      	pop	{r4, r5, pc}
    5466:	bf00      	nop
    5468:	000048e5 	.word	0x000048e5
    546c:	00000000 	.word	0x00000000

00005470 <scan_ticker_enable>:
static void scan_ticker_enable (void){
    5470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			HAL_TICKER_US_TO_TICKS((u64_t) _radio.scanner.interval * 625),
    5474:	4f2c      	ldr	r7, [pc, #176]	; (5528 <scan_ticker_enable+0xb8>)
static void scan_ticker_enable (void){
    5476:	b08a      	sub	sp, #40	; 0x28
	ticks_anchor = ticker_ticks_now_get();
    5478:	f7fe fb66 	bl	3b48 <ticker_ticks_now_get>
			HAL_TICKER_US_TO_TICKS((u64_t) _radio.scanner.interval * 625),
    547c:	f8d7 8660 	ldr.w	r8, [r7, #1632]	; 0x660
			HAL_TICKER_REMAINDER((u64_t) (_radio.scanner.interval * 625)),
    5480:	4b2a      	ldr	r3, [pc, #168]	; (552c <scan_ticker_enable+0xbc>)
    5482:	f240 2471 	movw	r4, #625	; 0x271
    5486:	fb04 f408 	mul.w	r4, r4, r8
    548a:	fba4 4503 	umull	r4, r5, r4, r3
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    548e:	f642 5359 	movw	r3, #11609	; 0x2d59
    5492:	9308      	str	r3, [sp, #32]
    5494:	4b26      	ldr	r3, [pc, #152]	; (5530 <scan_ticker_enable+0xc0>)
    5496:	9307      	str	r3, [sp, #28]
    5498:	2600      	movs	r6, #0
    549a:	4b26      	ldr	r3, [pc, #152]	; (5534 <scan_ticker_enable+0xc4>)
    549c:	9606      	str	r6, [sp, #24]
    549e:	9305      	str	r3, [sp, #20]
    54a0:	f8d7 2648 	ldr.w	r2, [r7, #1608]	; 0x648
    54a4:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
    54a8:	9603      	str	r6, [sp, #12]
    54aa:	4413      	add	r3, r2
    54ac:	9304      	str	r3, [sp, #16]
			HAL_TICKER_REMAINDER((u64_t) (_radio.scanner.interval * 625)),
    54ae:	4620      	mov	r0, r4
    54b0:	a31b      	add	r3, pc, #108	; (adr r3, 5520 <scan_ticker_enable+0xb0>)
    54b2:	e9d3 2300 	ldrd	r2, r3, [r3]
    54b6:	4629      	mov	r1, r5
    54b8:	f7fa fed6 	bl	268 <__aeabi_uldivmod>
    54bc:	4a1e      	ldr	r2, [pc, #120]	; (5538 <scan_ticker_enable+0xc8>)
    54be:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    54c2:	2307      	movs	r3, #7
    54c4:	2100      	movs	r1, #0
    54c6:	4343      	muls	r3, r0
    54c8:	fb02 3301 	mla	r3, r2, r1, r3
    54cc:	fba0 0102 	umull	r0, r1, r0, r2
    54d0:	1a20      	subs	r0, r4, r0
    54d2:	4419      	add	r1, r3
    54d4:	eb65 0101 	sbc.w	r1, r5, r1
    54d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    54dc:	2300      	movs	r3, #0
    54de:	f7fa fec3 	bl	268 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    54e2:	9002      	str	r0, [sp, #8]
			HAL_TICKER_US_TO_TICKS((u64_t) _radio.scanner.interval * 625),
    54e4:	4815      	ldr	r0, [pc, #84]	; (553c <scan_ticker_enable+0xcc>)
    54e6:	2391      	movs	r3, #145	; 0x91
    54e8:	fba8 0100 	umull	r0, r1, r8, r0
    54ec:	fb03 1108 	mla	r1, r3, r8, r1
    54f0:	a30b      	add	r3, pc, #44	; (adr r3, 5520 <scan_ticker_enable+0xb0>)
    54f2:	e9d3 2300 	ldrd	r2, r3, [r3]
    54f6:	f7fa feb7 	bl	268 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    54fa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    54fe:	9001      	str	r0, [sp, #4]
    5500:	9600      	str	r6, [sp, #0]
    5502:	f8d7 370c 	ldr.w	r3, [r7, #1804]	; 0x70c
    5506:	2206      	movs	r2, #6
    5508:	4631      	mov	r1, r6
    550a:	4630      	mov	r0, r6
    550c:	f7fe f9ae 	bl	386c <ticker_start>
			LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    5510:	f030 0302 	bics.w	r3, r0, #2
    5514:	d001      	beq.n	551a <scan_ticker_enable+0xaa>
    5516:	f7ff ff7f 	bl	5418 <event_active.part.17>
}
    551a:	b00a      	add	sp, #40	; 0x28
    551c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5520:	1afd498d 	.word	0x1afd498d
    5524:	00000007 	.word	0x00000007
    5528:	20000370 	.word	0x20000370
    552c:	3b9aca00 	.word	0x3b9aca00
    5530:	00005a05 	.word	0x00005a05
    5534:	00005c61 	.word	0x00005c61
    5538:	1afd498d 	.word	0x1afd498d
    553c:	84e72a00 	.word	0x84e72a00

00005540 <aux_packet_function>:
scan_ticker_enable();	
    5540:	f7ff bf96 	b.w	5470 <scan_ticker_enable>

00005544 <terminate_ind_rx_enqueue>:
{
    5544:	b510      	push	{r4, lr}
    5546:	4603      	mov	r3, r0
    5548:	460a      	mov	r2, r1
	node_rx = (void *)&conn->llcp_terminate.radio_pdu_node_rx;
    554a:	f100 019c 	add.w	r1, r0, #156	; 0x9c
	LL_ASSERT(node_rx->hdr.onion.link);
    554e:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
    5552:	b908      	cbnz	r0, 5558 <terminate_ind_rx_enqueue+0x14>
    5554:	f7ff ff60 	bl	5418 <event_active.part.17>
	node_rx->hdr.handle = conn->handle;
    5558:	8c1c      	ldrh	r4, [r3, #32]
    555a:	f8a3 40a2 	strh.w	r4, [r3, #162]	; 0xa2
	*((u8_t *)node_rx->pdu_data) = reason;
    555e:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    5562:	2407      	movs	r4, #7
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    5564:	4a0a      	ldr	r2, [pc, #40]	; (5590 <terminate_ind_rx_enqueue+0x4c>)
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    5566:	f883 40a0 	strb.w	r4, [r3, #160]	; 0xa0
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    556a:	f892 4778 	ldrb.w	r4, [r2, #1912]	; 0x778
    556e:	f883 409c 	strb.w	r4, [r3, #156]	; 0x9c
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    5572:	f502 62ea 	add.w	r2, r2, #1872	; 0x750
    5576:	f7fd fb5f 	bl	2c38 <memq_enqueue>
	LL_ASSERT(link);
    557a:	b928      	cbnz	r0, 5588 <terminate_ind_rx_enqueue+0x44>
    557c:	4040      	eors	r0, r0
    557e:	f380 8811 	msr	BASEPRI, r0
    5582:	f04f 0004 	mov.w	r0, #4
    5586:	df02      	svc	2
}
    5588:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
    558c:	f003 bb12 	b.w	8bb4 <radio_event_callback>
    5590:	20000370 	.word	0x20000370

00005594 <packet_rx_enqueue>:
{
    5594:	b510      	push	{r4, lr}
	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
    5596:	4a16      	ldr	r2, [pc, #88]	; (55f0 <packet_rx_enqueue+0x5c>)
    5598:	f892 3741 	ldrb.w	r3, [r2, #1857]	; 0x741
    559c:	f892 1742 	ldrb.w	r1, [r2, #1858]	; 0x742
    55a0:	4299      	cmp	r1, r3
    55a2:	d101      	bne.n	55a8 <packet_rx_enqueue+0x14>
    55a4:	f7ff ff38 	bl	5418 <event_active.part.17>
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    55a8:	f892 1741 	ldrb.w	r1, [r2, #1857]	; 0x741
    55ac:	f8d2 373c 	ldr.w	r3, [r2, #1852]	; 0x73c
    55b0:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    55b4:	f892 3778 	ldrb.w	r3, [r2, #1912]	; 0x778
	link = node_rx->hdr.onion.link;
    55b8:	6808      	ldr	r0, [r1, #0]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    55ba:	700b      	strb	r3, [r1, #0]
	last = _radio.packet_rx_last + 1;
    55bc:	f892 3741 	ldrb.w	r3, [r2, #1857]	; 0x741
	if (last == _radio.packet_rx_count) {
    55c0:	f892 4740 	ldrb.w	r4, [r2, #1856]	; 0x740
	last = _radio.packet_rx_last + 1;
    55c4:	3301      	adds	r3, #1
    55c6:	b2db      	uxtb	r3, r3
		last = 0;
    55c8:	429c      	cmp	r4, r3
    55ca:	bf08      	it	eq
    55cc:	2300      	moveq	r3, #0
	_radio.packet_rx_last = last;
    55ce:	f882 3741 	strb.w	r3, [r2, #1857]	; 0x741
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    55d2:	f502 62ea 	add.w	r2, r2, #1872	; 0x750
    55d6:	f7fd fb2f 	bl	2c38 <memq_enqueue>
	LL_ASSERT(link);
    55da:	b928      	cbnz	r0, 55e8 <packet_rx_enqueue+0x54>
    55dc:	4040      	eors	r0, r0
    55de:	f380 8811 	msr	BASEPRI, r0
    55e2:	f04f 0004 	mov.w	r0, #4
    55e6:	df02      	svc	2
}
    55e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
    55ec:	f003 bae2 	b.w	8bb4 <radio_event_callback>
    55f0:	20000370 	.word	0x20000370
    55f4:	00000000 	.word	0x00000000

000055f8 <sched_after_mstr_free_offset_get>:
{
    55f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    55fa:	4616      	mov	r6, r2
	u32_t ticks_anchor_offset = ticks_anchor;
    55fc:	aa02      	add	r2, sp, #8
{
    55fe:	461c      	mov	r4, r3
    5600:	4605      	mov	r5, r0
	u32_t ticks_anchor_offset = ticks_anchor;
    5602:	f842 6d04 	str.w	r6, [r2, #-4]!
	sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_JOB,
    5606:	3127      	adds	r1, #39	; 0x27
    5608:	2001      	movs	r0, #1
    560a:	f7ff fd7d 	bl	5108 <sched_after_mstr_free_slot_get>
	if (!*win_offset_us) {
    560e:	6823      	ldr	r3, [r4, #0]
    5610:	b1fb      	cbz	r3, 5652 <sched_after_mstr_free_offset_get+0x5a>
	LL_ASSERT(!((ticks_anchor_offset - ticks_anchor) &
    5612:	9801      	ldr	r0, [sp, #4]
    5614:	1b83      	subs	r3, r0, r6
    5616:	021b      	lsls	r3, r3, #8
    5618:	d501      	bpl.n	561e <sched_after_mstr_free_offset_get+0x26>
    561a:	f7ff fefd 	bl	5418 <event_active.part.17>
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
    561e:	4631      	mov	r1, r6
    5620:	f7fe fa94 	bl	3b4c <ticker_ticks_diff_get>
    5624:	4602      	mov	r2, r0
    5626:	4810      	ldr	r0, [pc, #64]	; (5668 <sched_after_mstr_free_offset_get+0x70>)
    5628:	2307      	movs	r3, #7
    562a:	fba2 0100 	umull	r0, r1, r2, r0
    562e:	fb03 1102 	mla	r1, r3, r2, r1
    5632:	a30b      	add	r3, pc, #44	; (adr r3, 5660 <sched_after_mstr_free_offset_get+0x68>)
    5634:	e9d3 2300 	ldrd	r2, r3, [r3]
    5638:	f7fa fe16 	bl	268 <__aeabi_uldivmod>
    563c:	6823      	ldr	r3, [r4, #0]
    563e:	4418      	add	r0, r3
	if ((*win_offset_us & BIT(31)) == 0) {
    5640:	2800      	cmp	r0, #0
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
    5642:	6020      	str	r0, [r4, #0]
	if ((*win_offset_us & BIT(31)) == 0) {
    5644:	db05      	blt.n	5652 <sched_after_mstr_free_offset_get+0x5a>
		u32_t conn_interval_us = conn_interval * 1250;
    5646:	f240 40e2 	movw	r0, #1250	; 0x4e2
    564a:	4368      	muls	r0, r5
		while (*win_offset_us > conn_interval_us) {
    564c:	6823      	ldr	r3, [r4, #0]
    564e:	4298      	cmp	r0, r3
    5650:	d301      	bcc.n	5656 <sched_after_mstr_free_offset_get+0x5e>
}
    5652:	b002      	add	sp, #8
    5654:	bd70      	pop	{r4, r5, r6, pc}
			*win_offset_us -= conn_interval_us;
    5656:	1a1b      	subs	r3, r3, r0
    5658:	6023      	str	r3, [r4, #0]
    565a:	e7f7      	b.n	564c <sched_after_mstr_free_offset_get+0x54>
    565c:	f3af 8000 	nop.w
    5660:	3b9aca00 	.word	0x3b9aca00
    5664:	00000000 	.word	0x00000000
    5668:	1afd498d 	.word	0x1afd498d

0000566c <mayfly_sched_win_offset_use>:
{
    566c:	b513      	push	{r0, r1, r4, lr}
	sched_after_mstr_free_offset_get(conn->conn_interval,
    566e:	f100 036c 	add.w	r3, r0, #108	; 0x6c
{
    5672:	4604      	mov	r4, r0
	sched_after_mstr_free_offset_get(conn->conn_interval,
    5674:	6f82      	ldr	r2, [r0, #120]	; 0x78
    5676:	68c1      	ldr	r1, [r0, #12]
    5678:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    567a:	f7ff ffbd 	bl	55f8 <sched_after_mstr_free_offset_get>
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    567e:	a902      	add	r1, sp, #8
    5680:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    5682:	6f60      	ldr	r0, [r4, #116]	; 0x74
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    5684:	f240 42e2 	movw	r2, #1250	; 0x4e2
    5688:	fbb3 f3f2 	udiv	r3, r3, r2
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    568c:	2202      	movs	r2, #2
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    568e:	f821 3d02 	strh.w	r3, [r1, #-2]!
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    5692:	f7fa ffb1 	bl	5f8 <memcpy>
}
    5696:	b002      	add	sp, #8
    5698:	bd10      	pop	{r4, pc}
	...

0000569c <mayfly_sched_after_mstr_free_offset_get>:
{
    569c:	b410      	push	{r4}
	sched_after_mstr_free_offset_get(_radio.scanner.conn_interval,
    569e:	4c05      	ldr	r4, [pc, #20]	; (56b4 <mayfly_sched_after_mstr_free_offset_get+0x18>)
    56a0:	4602      	mov	r2, r0
    56a2:	f504 63cf 	add.w	r3, r4, #1656	; 0x678
    56a6:	f8d4 1670 	ldr.w	r1, [r4, #1648]	; 0x670
    56aa:	f8b4 0668 	ldrh.w	r0, [r4, #1640]	; 0x668
}
    56ae:	bc10      	pop	{r4}
	sched_after_mstr_free_offset_get(_radio.scanner.conn_interval,
    56b0:	f7ff bfa2 	b.w	55f8 <sched_after_mstr_free_offset_get>
    56b4:	20000370 	.word	0x20000370

000056b8 <pdu_node_tx_release>:
{
    56b8:	b538      	push	{r3, r4, r5, lr}
	last = _radio.packet_release_last + 1;
    56ba:	4a10      	ldr	r2, [pc, #64]	; (56fc <pdu_node_tx_release+0x44>)
    56bc:	f892 3778 	ldrb.w	r3, [r2, #1912]	; 0x778
	if (last == _radio.packet_tx_count) {
    56c0:	f892 4774 	ldrb.w	r4, [r2, #1908]	; 0x774
	last = _radio.packet_release_last + 1;
    56c4:	3301      	adds	r3, #1
    56c6:	b2db      	uxtb	r3, r3
		last = 0;
    56c8:	429c      	cmp	r4, r3
    56ca:	bf08      	it	eq
    56cc:	2300      	moveq	r3, #0
	LL_ASSERT(last != _radio.packet_release_first);
    56ce:	f892 4777 	ldrb.w	r4, [r2, #1911]	; 0x777
    56d2:	429c      	cmp	r4, r3
    56d4:	d101      	bne.n	56da <pdu_node_tx_release+0x22>
    56d6:	f7ff fe9f 	bl	5418 <event_active.part.17>
	_radio.pkt_release[_radio.packet_release_last].handle = handle;
    56da:	f892 5778 	ldrb.w	r5, [r2, #1912]	; 0x778
    56de:	f8d2 4770 	ldr.w	r4, [r2, #1904]	; 0x770
    56e2:	f824 0035 	strh.w	r0, [r4, r5, lsl #3]
	_radio.pkt_release[_radio.packet_release_last].node_tx = node_tx;
    56e6:	f892 0778 	ldrb.w	r0, [r2, #1912]	; 0x778
    56ea:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
    56ee:	6061      	str	r1, [r4, #4]
	_radio.packet_release_last = last;
    56f0:	f882 3778 	strb.w	r3, [r2, #1912]	; 0x778
}
    56f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_event_callback();
    56f8:	f003 ba5c 	b.w	8bb4 <radio_event_callback>
    56fc:	20000370 	.word	0x20000370

00005700 <packet_tx_enqueue>:
{
    5700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    5704:	4c24      	ldr	r4, [pc, #144]	; (5798 <packet_tx_enqueue+0x98>)
{
    5706:	4606      	mov	r6, r0
		node_tx_new->next = NULL;
    5708:	2700      	movs	r7, #0
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    570a:	b12e      	cbz	r6, 5718 <packet_tx_enqueue+0x18>
    570c:	f894 3775 	ldrb.w	r3, [r4, #1909]	; 0x775
    5710:	f894 2776 	ldrb.w	r2, [r4, #1910]	; 0x776
    5714:	429a      	cmp	r2, r3
    5716:	d101      	bne.n	571c <packet_tx_enqueue+0x1c>
    5718:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    571c:	f894 8775 	ldrb.w	r8, [r4, #1909]	; 0x775
    5720:	f8d4 976c 	ldr.w	r9, [r4, #1900]	; 0x76c
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    5724:	f8d4 0710 	ldr.w	r0, [r4, #1808]	; 0x710
    5728:	f839 2038 	ldrh.w	r2, [r9, r8, lsl #3]
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    572c:	eb09 03c8 	add.w	r3, r9, r8, lsl #3
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    5730:	f44f 7182 	mov.w	r1, #260	; 0x104
		node_tx_new = pdu_data_q_tx->node_tx;
    5734:	685d      	ldr	r5, [r3, #4]
		node_tx_new->next = NULL;
    5736:	602f      	str	r7, [r5, #0]
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    5738:	f7fd fa64 	bl	2c04 <mem_get>
    573c:	4603      	mov	r3, r0
		if (conn->handle == pdu_data_q_tx->handle) {
    573e:	f839 0038 	ldrh.w	r0, [r9, r8, lsl #3]
    5742:	8c1a      	ldrh	r2, [r3, #32]
    5744:	4282      	cmp	r2, r0
    5746:	d11f      	bne.n	5788 <packet_tx_enqueue+0x88>
			if (conn->pkt_tx_data == 0) {
    5748:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
    574c:	b942      	cbnz	r2, 5760 <packet_tx_enqueue+0x60>
				if (conn->pkt_tx_head == 0) {
    574e:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
				conn->pkt_tx_data = node_tx_new;
    5752:	f8c3 50f8 	str.w	r5, [r3, #248]	; 0xf8
				if (conn->pkt_tx_head == 0) {
    5756:	b91a      	cbnz	r2, 5760 <packet_tx_enqueue+0x60>
					conn->pkt_tx_head = node_tx_new;
    5758:	f8c3 50ec 	str.w	r5, [r3, #236]	; 0xec
					conn->pkt_tx_last = NULL;
    575c:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
			if (conn->pkt_tx_last) {
    5760:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
    5764:	b102      	cbz	r2, 5768 <packet_tx_enqueue+0x68>
				conn->pkt_tx_last->next = node_tx_new;
    5766:	6015      	str	r5, [r2, #0]
			conn->pkt_tx_last = node_tx_new;
    5768:	f8c3 50fc 	str.w	r5, [r3, #252]	; 0xfc
		first = _radio.packet_tx_first + 1;
    576c:	f894 3775 	ldrb.w	r3, [r4, #1909]	; 0x775
		if (first == _radio.packet_tx_count) {
    5770:	f894 2774 	ldrb.w	r2, [r4, #1908]	; 0x774
		first = _radio.packet_tx_first + 1;
    5774:	3301      	adds	r3, #1
    5776:	b2db      	uxtb	r3, r3
			first = 0;
    5778:	429a      	cmp	r2, r3
    577a:	bf08      	it	eq
    577c:	2300      	moveq	r3, #0
    577e:	3e01      	subs	r6, #1
		_radio.packet_tx_first = first;
    5780:	f884 3775 	strb.w	r3, [r4, #1909]	; 0x775
    5784:	b2f6      	uxtb	r6, r6
    5786:	e7c0      	b.n	570a <packet_tx_enqueue+0xa>
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    5788:	792b      	ldrb	r3, [r5, #4]
    578a:	f367 0301 	bfi	r3, r7, #0, #2
    578e:	712b      	strb	r3, [r5, #4]
			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
    5790:	4629      	mov	r1, r5
    5792:	f7ff ff91 	bl	56b8 <pdu_node_tx_release>
    5796:	e7e9      	b.n	576c <packet_tx_enqueue+0x6c>
    5798:	20000370 	.word	0x20000370

0000579c <connection_release>:
{
    579c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    579e:	2201      	movs	r2, #1
{
    57a0:	4604      	mov	r4, r0
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    57a2:	4611      	mov	r1, r2
    57a4:	2000      	movs	r0, #0
    57a6:	f7fd fa8f 	bl	2cc8 <mayfly_enable>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    57aa:	f894 2020 	ldrb.w	r2, [r4, #32]
	ticker_status =
    57ae:	2100      	movs	r1, #0
    57b0:	f44f 531d 	mov.w	r3, #10048	; 0x2740
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    57b4:	3207      	adds	r2, #7
	ticker_status =
    57b6:	9300      	str	r3, [sp, #0]
    57b8:	4608      	mov	r0, r1
    57ba:	4b3a      	ldr	r3, [pc, #232]	; (58a4 <connection_release+0x108>)
    57bc:	b2d2      	uxtb	r2, r2
    57be:	f7fe f8f3 	bl	39a8 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    57c2:	f030 0102 	bics.w	r1, r0, #2
    57c6:	d005      	beq.n	57d4 <connection_release+0x38>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    57c8:	4040      	eors	r0, r0
    57ca:	f380 8811 	msr	BASEPRI, r0
    57ce:	f04f 0004 	mov.w	r0, #4
    57d2:	df02      	svc	2
	if ((_radio.state == STATE_ABORT) &&
    57d4:	4b34      	ldr	r3, [pc, #208]	; (58a8 <connection_release+0x10c>)
    57d6:	7d1a      	ldrb	r2, [r3, #20]
    57d8:	2a05      	cmp	r2, #5
    57da:	461d      	mov	r5, r3
    57dc:	d11b      	bne.n	5816 <connection_release+0x7a>
					  conn->handle))) {
    57de:	8c22      	ldrh	r2, [r4, #32]
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
    57e0:	7c18      	ldrb	r0, [r3, #16]
    57e2:	3207      	adds	r2, #7
	if ((_radio.state == STATE_ABORT) &&
    57e4:	4290      	cmp	r0, r2
    57e6:	d116      	bne.n	5816 <connection_release+0x7a>
		_radio.ticker_id_prepare = 0;
    57e8:	7419      	strb	r1, [r3, #16]
		ticker_status =
    57ea:	f242 7351 	movw	r3, #10065	; 0x2751
    57ee:	9300      	str	r3, [sp, #0]
    57f0:	2201      	movs	r2, #1
    57f2:	4b2c      	ldr	r3, [pc, #176]	; (58a4 <connection_release+0x108>)
    57f4:	4608      	mov	r0, r1
    57f6:	f7fe f8d7 	bl	39a8 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    57fa:	f030 0202 	bics.w	r2, r0, #2
    57fe:	d1e3      	bne.n	57c8 <connection_release+0x2c>
		ticker_status =
    5800:	f242 7358 	movw	r3, #10072	; 0x2758
    5804:	9300      	str	r3, [sp, #0]
    5806:	4611      	mov	r1, r2
    5808:	4b26      	ldr	r3, [pc, #152]	; (58a4 <connection_release+0x108>)
    580a:	4610      	mov	r0, r2
    580c:	f7fe f8cc 	bl	39a8 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    5810:	f030 0302 	bics.w	r3, r0, #2
    5814:	d1d8      	bne.n	57c8 <connection_release+0x2c>
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
    5816:	f8d4 10ec 	ldr.w	r1, [r4, #236]	; 0xec
    581a:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
    581e:	4299      	cmp	r1, r3
    5820:	d003      	beq.n	582a <connection_release+0x8e>
    5822:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
    5826:	4299      	cmp	r1, r3
    5828:	d101      	bne.n	582e <connection_release+0x92>
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    582a:	4e20      	ldr	r6, [pc, #128]	; (58ac <connection_release+0x110>)
    582c:	e012      	b.n	5854 <connection_release+0xb8>
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    582e:	790b      	ldrb	r3, [r1, #4]
    5830:	f36f 0301 	bfc	r3, #0, #2
    5834:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    5836:	680b      	ldr	r3, [r1, #0]
    5838:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
		pdu_node_tx_release(conn->handle, node_tx);
    583c:	8c20      	ldrh	r0, [r4, #32]
    583e:	f7ff ff3b 	bl	56b8 <pdu_node_tx_release>
    5842:	e7e8      	b.n	5816 <connection_release+0x7a>
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    5844:	6803      	ldr	r3, [r0, #0]
    5846:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
		conn->pkt_tx_ctrl = conn->pkt_tx_head;
    584a:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    584e:	4631      	mov	r1, r6
    5850:	f7fd f9c3 	bl	2bda <mem_release>
	while ((conn->pkt_tx_head) &&
    5854:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
    5858:	b118      	cbz	r0, 5862 <connection_release+0xc6>
    585a:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
    585e:	4298      	cmp	r0, r3
    5860:	d1f0      	bne.n	5844 <connection_release+0xa8>
	conn->pkt_tx_ctrl = NULL;
    5862:	2300      	movs	r3, #0
    5864:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
	conn->pkt_tx_ctrl_last = NULL;
    5868:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
	while (conn->pkt_tx_head) {
    586c:	f8d4 10ec 	ldr.w	r1, [r4, #236]	; 0xec
    5870:	b951      	cbnz	r1, 5888 <connection_release+0xec>
	conn->handle = 0xffff;
    5872:	f64f 73ff 	movw	r3, #65535	; 0xffff
    5876:	8423      	strh	r3, [r4, #32]
	if (_radio.conn_upd == conn) {
    5878:	f8d5 3788 	ldr.w	r3, [r5, #1928]	; 0x788
    587c:	429c      	cmp	r4, r3
		_radio.conn_upd = NULL;
    587e:	bf08      	it	eq
    5880:	f8c5 1788 	streq.w	r1, [r5, #1928]	; 0x788
}
    5884:	b002      	add	sp, #8
    5886:	bd70      	pop	{r4, r5, r6, pc}
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    5888:	790b      	ldrb	r3, [r1, #4]
    588a:	f36f 0301 	bfc	r3, #0, #2
    588e:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    5890:	680b      	ldr	r3, [r1, #0]
    5892:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
		conn->pkt_tx_data = conn->pkt_tx_head;
    5896:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
		pdu_node_tx_release(conn->handle, node_tx);
    589a:	8c20      	ldrh	r0, [r4, #32]
    589c:	f7ff ff0c 	bl	56b8 <pdu_node_tx_release>
    58a0:	e7e4      	b.n	586c <connection_release+0xd0>
    58a2:	bf00      	nop
    58a4:	00005a05 	.word	0x00005a05
    58a8:	20000370 	.word	0x20000370
    58ac:	20000acc 	.word	0x20000acc

000058b0 <mayfly_radio_stop>:
	enum state state = (enum state)((u32_t)params & 0xff);
    58b0:	b2c0      	uxtb	r0, r0
{
    58b2:	b508      	push	{r3, lr}
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
    58b4:	1f03      	subs	r3, r0, #4
    58b6:	2b01      	cmp	r3, #1
    58b8:	d901      	bls.n	58be <mayfly_radio_stop+0xe>
    58ba:	f7ff fdad 	bl	5418 <event_active.part.17>
	radio_used = ((_radio.state != STATE_NONE) &&
    58be:	4a08      	ldr	r2, [pc, #32]	; (58e0 <mayfly_radio_stop+0x30>)
    58c0:	7d13      	ldrb	r3, [r2, #20]
		      (_radio.state != STATE_STOP) &&
    58c2:	b13b      	cbz	r3, 58d4 <mayfly_radio_stop+0x24>
	radio_used = ((_radio.state != STATE_NONE) &&
    58c4:	3b04      	subs	r3, #4
    58c6:	2b01      	cmp	r3, #1
    58c8:	d904      	bls.n	58d4 <mayfly_radio_stop+0x24>
			_radio.state = state;
    58ca:	7510      	strb	r0, [r2, #20]
}
    58cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		radio_disable();
    58d0:	f003 bcf4 	b.w	92bc <radio_disable>
	if (radio_used || !radio_is_idle()) {
    58d4:	f003 fd24 	bl	9320 <radio_is_idle>
    58d8:	2800      	cmp	r0, #0
    58da:	d0f7      	beq.n	58cc <mayfly_radio_stop+0x1c>
}
    58dc:	bd08      	pop	{r3, pc}
    58de:	bf00      	nop
    58e0:	20000370 	.word	0x20000370

000058e4 <mayfly_radio_active>:
{
    58e4:	b508      	push	{r3, lr}
    58e6:	4a0a      	ldr	r2, [pc, #40]	; (5910 <mayfly_radio_active+0x2c>)
		if (s_active++) {
    58e8:	7813      	ldrb	r3, [r2, #0]
	if ((u32_t)params) {
    58ea:	b138      	cbz	r0, 58fc <mayfly_radio_active+0x18>
		if (s_active++) {
    58ec:	1c59      	adds	r1, r3, #1
    58ee:	7011      	strb	r1, [r2, #0]
    58f0:	b963      	cbnz	r3, 590c <mayfly_radio_active+0x28>
		radio_active_callback(1);
    58f2:	2001      	movs	r0, #1
}
    58f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		radio_active_callback(0);
    58f8:	f003 b95a 	b.w	8bb0 <radio_active_callback>
		LL_ASSERT(s_active);
    58fc:	b90b      	cbnz	r3, 5902 <mayfly_radio_active+0x1e>
    58fe:	f7ff fd8b 	bl	5418 <event_active.part.17>
		if (--s_active) {
    5902:	3b01      	subs	r3, #1
    5904:	b2db      	uxtb	r3, r3
    5906:	7013      	strb	r3, [r2, #0]
    5908:	2b00      	cmp	r3, #0
    590a:	d0f3      	beq.n	58f4 <mayfly_radio_active+0x10>
    590c:	bd08      	pop	{r3, pc}
    590e:	bf00      	nop
    5910:	20000b31 	.word	0x20000b31

00005914 <mayfly_radio_inactive>:
	mayfly_radio_active(0);
    5914:	2000      	movs	r0, #0
    5916:	f7ff bfe5 	b.w	58e4 <mayfly_radio_active>
	...

0000591c <event_xtal>:
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    591c:	2200      	movs	r2, #0
{
    591e:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    5920:	4611      	mov	r1, r2
    5922:	4b04      	ldr	r3, [pc, #16]	; (5934 <event_xtal+0x18>)
    5924:	4610      	mov	r0, r2
    5926:	f7fd f9f7 	bl	2d18 <mayfly_enqueue>
	LL_ASSERT(!retval);
    592a:	b108      	cbz	r0, 5930 <event_xtal+0x14>
    592c:	f7ff fd74 	bl	5418 <event_active.part.17>
    5930:	bd08      	pop	{r3, pc}
    5932:	bf00      	nop
    5934:	20003890 	.word	0x20003890

00005938 <event_active>:
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    5938:	2200      	movs	r2, #0
{
    593a:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    593c:	4611      	mov	r1, r2
    593e:	4b04      	ldr	r3, [pc, #16]	; (5950 <event_active+0x18>)
    5940:	4610      	mov	r0, r2
    5942:	f7fd f9e9 	bl	2d18 <mayfly_enqueue>
	LL_ASSERT(!retval);
    5946:	b108      	cbz	r0, 594c <event_active+0x14>
    5948:	f7ff fd66 	bl	5418 <event_active.part.17>
    594c:	bd08      	pop	{r3, pc}
    594e:	bf00      	nop
    5950:	20003820 	.word	0x20003820

00005954 <event_stop>:
	s_mfy_radio_stop.param = context;
    5954:	4a06      	ldr	r2, [pc, #24]	; (5970 <event_stop+0x1c>)
{
    5956:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
    5958:	6093      	str	r3, [r2, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    595a:	4613      	mov	r3, r2
    595c:	2200      	movs	r2, #0
    595e:	4611      	mov	r1, r2
    5960:	4610      	mov	r0, r2
    5962:	f7fd f9d9 	bl	2d18 <mayfly_enqueue>
	LL_ASSERT(!retval);
    5966:	b108      	cbz	r0, 596c <event_stop+0x18>
    5968:	f7ff fd56 	bl	5418 <event_active.part.17>
    596c:	bd08      	pop	{r3, pc}
    596e:	bf00      	nop
    5970:	20003850 	.word	0x20003850

00005974 <ticker_update_slave_assert>:
{
    5974:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    5976:	b130      	cbz	r0, 5986 <ticker_update_slave_assert+0x12>
    5978:	4b03      	ldr	r3, [pc, #12]	; (5988 <ticker_update_slave_assert+0x14>)
    597a:	7c9b      	ldrb	r3, [r3, #18]
    597c:	b2c9      	uxtb	r1, r1
    597e:	4299      	cmp	r1, r3
    5980:	d001      	beq.n	5986 <ticker_update_slave_assert+0x12>
    5982:	f7ff fd49 	bl	5418 <event_active.part.17>
    5986:	bd08      	pop	{r3, pc}
    5988:	20000370 	.word	0x20000370

0000598c <ticker_update_adv_assert>:
{
    598c:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    598e:	b128      	cbz	r0, 599c <ticker_update_adv_assert+0x10>
    5990:	4b03      	ldr	r3, [pc, #12]	; (59a0 <ticker_update_adv_assert+0x14>)
    5992:	7c9b      	ldrb	r3, [r3, #18]
    5994:	2b05      	cmp	r3, #5
    5996:	d001      	beq.n	599c <ticker_update_adv_assert+0x10>
    5998:	f7ff fd3e 	bl	5418 <event_active.part.17>
    599c:	bd08      	pop	{r3, pc}
    599e:	bf00      	nop
    59a0:	20000370 	.word	0x20000370

000059a4 <ticker_stop_scan_assert>:
	if (status == TICKER_STATUS_FAILURE) {
    59a4:	2801      	cmp	r0, #1
{
    59a6:	b508      	push	{r3, lr}
    59a8:	4b09      	ldr	r3, [pc, #36]	; (59d0 <ticker_stop_scan_assert+0x2c>)
	if (status == TICKER_STATUS_FAILURE) {
    59aa:	d107      	bne.n	59bc <ticker_stop_scan_assert+0x18>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_SCAN) {
    59ac:	7c9a      	ldrb	r2, [r3, #18]
    59ae:	2a06      	cmp	r2, #6
    59b0:	d102      	bne.n	59b8 <ticker_stop_scan_assert+0x14>
			_radio.ticker_id_stop = 0;
    59b2:	2200      	movs	r2, #0
    59b4:	749a      	strb	r2, [r3, #18]
    59b6:	bd08      	pop	{r3, pc}
    59b8:	f7ff fd2e 	bl	5418 <event_active.part.17>
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_SCAN);
    59bc:	7c1b      	ldrb	r3, [r3, #16]
    59be:	2b06      	cmp	r3, #6
    59c0:	d105      	bne.n	59ce <ticker_stop_scan_assert+0x2a>
    59c2:	4040      	eors	r0, r0
    59c4:	f380 8811 	msr	BASEPRI, r0
    59c8:	f04f 0004 	mov.w	r0, #4
    59cc:	df02      	svc	2
    59ce:	bd08      	pop	{r3, pc}
    59d0:	20000370 	.word	0x20000370

000059d4 <ticker_stop_adv_assert>:
	if (status == TICKER_STATUS_FAILURE) {
    59d4:	2801      	cmp	r0, #1
{
    59d6:	b508      	push	{r3, lr}
    59d8:	4b09      	ldr	r3, [pc, #36]	; (5a00 <ticker_stop_adv_assert+0x2c>)
	if (status == TICKER_STATUS_FAILURE) {
    59da:	d107      	bne.n	59ec <ticker_stop_adv_assert+0x18>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_ADV) {
    59dc:	7c9a      	ldrb	r2, [r3, #18]
    59de:	2a05      	cmp	r2, #5
    59e0:	d102      	bne.n	59e8 <ticker_stop_adv_assert+0x14>
			_radio.ticker_id_stop = 0;
    59e2:	2200      	movs	r2, #0
    59e4:	749a      	strb	r2, [r3, #18]
    59e6:	bd08      	pop	{r3, pc}
    59e8:	f7ff fd16 	bl	5418 <event_active.part.17>
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_ADV);
    59ec:	7c1b      	ldrb	r3, [r3, #16]
    59ee:	2b05      	cmp	r3, #5
    59f0:	d105      	bne.n	59fe <ticker_stop_adv_assert+0x2a>
    59f2:	4040      	eors	r0, r0
    59f4:	f380 8811 	msr	BASEPRI, r0
    59f8:	f04f 0004 	mov.w	r0, #4
    59fc:	df02      	svc	2
    59fe:	bd08      	pop	{r3, pc}
    5a00:	20000370 	.word	0x20000370

00005a04 <ticker_success_assert>:
{
    5a04:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    5a06:	b108      	cbz	r0, 5a0c <ticker_success_assert+0x8>
    5a08:	f7ff fd06 	bl	5418 <event_active.part.17>
    5a0c:	bd08      	pop	{r3, pc}

00005a0e <isr.part.46>:
		LL_ASSERT(0);
    5a0e:	4040      	eors	r0, r0
    5a10:	f380 8811 	msr	BASEPRI, r0
    5a14:	f04f 0004 	mov.w	r0, #4
    5a18:	df02      	svc	2
	...

00005a1c <isr_rx_scan_report.isra.38>:
static u32_t isr_rx_scan_report(u8_t rssi_ready, u8_t rl_idx, bool dir_report)
    5a1c:	b570      	push	{r4, r5, r6, lr}
    5a1e:	4606      	mov	r6, r0
	node_rx = packet_rx_reserve_get(3);
    5a20:	2003      	movs	r0, #3
    5a22:	f7fe ff81 	bl	4928 <packet_rx_reserve_get>
	if (node_rx == 0) {
    5a26:	b320      	cbz	r0, 5a72 <isr_rx_scan_report.isra.38+0x56>
	node_rx->hdr.handle = 0xffff;
    5a28:	f64f 73ff 	movw	r3, #65535	; 0xffff
    5a2c:	80c3      	strh	r3, [r0, #6]
	} else if (_radio.scanner.phy) {
    5a2e:	4b12      	ldr	r3, [pc, #72]	; (5a78 <isr_rx_scan_report.isra.38+0x5c>)
    5a30:	f893 364d 	ldrb.w	r3, [r3, #1613]	; 0x64d
    5a34:	075a      	lsls	r2, r3, #29
    5a36:	d018      	beq.n	5a6a <isr_rx_scan_report.isra.38+0x4e>
		switch (_radio.scanner.phy) {
    5a38:	f3c3 0302 	ubfx	r3, r3, #0, #3
    5a3c:	b2da      	uxtb	r2, r3
    5a3e:	2a01      	cmp	r2, #1
    5a40:	d003      	beq.n	5a4a <isr_rx_scan_report.isra.38+0x2e>
    5a42:	2a04      	cmp	r2, #4
    5a44:	d002      	beq.n	5a4c <isr_rx_scan_report.isra.38+0x30>
    5a46:	f7ff ffe2 	bl	5a0e <isr.part.46>
			node_rx->hdr.type = NODE_RX_TYPE_EXT_1M_REPORT;
    5a4a:	2303      	movs	r3, #3
			     pdu_adv_rx->len] =
    5a4c:	7a44      	ldrb	r4, [r0, #9]
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    5a4e:	7103      	strb	r3, [r0, #4]
	pdu_adv_rx = (void *)node_rx->pdu_data;
    5a50:	f100 0508 	add.w	r5, r0, #8
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    5a54:	3402      	adds	r4, #2
			     pdu_adv_rx->len] =
    5a56:	b156      	cbz	r6, 5a6e <isr_rx_scan_report.isra.38+0x52>
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;
    5a58:	f003 fcb8 	bl	93cc <radio_rssi_get>
			     pdu_adv_rx->len] =
    5a5c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    5a60:	5528      	strb	r0, [r5, r4]
	packet_rx_enqueue();
    5a62:	f7ff fd97 	bl	5594 <packet_rx_enqueue>
	return 0;
    5a66:	2000      	movs	r0, #0
    5a68:	bd70      	pop	{r4, r5, r6, pc}
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    5a6a:	2302      	movs	r3, #2
    5a6c:	e7ee      	b.n	5a4c <isr_rx_scan_report.isra.38+0x30>
			     pdu_adv_rx->len] =
    5a6e:	207f      	movs	r0, #127	; 0x7f
    5a70:	e7f6      	b.n	5a60 <isr_rx_scan_report.isra.38+0x44>
		return 1;
    5a72:	2001      	movs	r0, #1
}
    5a74:	bd70      	pop	{r4, r5, r6, pc}
    5a76:	bf00      	nop
    5a78:	20000370 	.word	0x20000370

00005a7c <adv_scan_configure.constprop.49>:
static void adv_scan_configure(u8_t phy, u8_t flags)
    5a7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	u32_t aa = 0x8e89bed6;
    5a7e:	ad02      	add	r5, sp, #8
    5a80:	4b10      	ldr	r3, [pc, #64]	; (5ac4 <adv_scan_configure.constprop.49+0x48>)
    5a82:	f845 3d04 	str.w	r3, [r5, #-4]!
static void adv_scan_configure(u8_t phy, u8_t flags)
    5a86:	4604      	mov	r4, r0
	radio_reset();
    5a88:	f003 fb64 	bl	9154 <radio_reset>
	radio_tx_power_set(0);
    5a8c:	2000      	movs	r0, #0
    5a8e:	f003 fb8b 	bl	91a8 <radio_tx_power_set>
	radio_isr_set(isr);
    5a92:	480d      	ldr	r0, [pc, #52]	; (5ac8 <adv_scan_configure.constprop.49+0x4c>)
    5a94:	f003 fb28 	bl	90e8 <radio_isr_set>
	radio_phy_set(phy, flags);
    5a98:	2101      	movs	r1, #1
    5a9a:	4620      	mov	r0, r4
    5a9c:	f003 fb74 	bl	9188 <radio_phy_set>
	radio_aa_set((u8_t *)&aa);
    5aa0:	4628      	mov	r0, r5
    5aa2:	f003 fb9f 	bl	91e4 <radio_aa_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, (phy << 1));
    5aa6:	0062      	lsls	r2, r4, #1
    5aa8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    5aac:	21ff      	movs	r1, #255	; 0xff
    5aae:	2008      	movs	r0, #8
    5ab0:	f003 fbb0 	bl	9214 <radio_pkt_configure>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    5ab4:	4905      	ldr	r1, [pc, #20]	; (5acc <adv_scan_configure.constprop.49+0x50>)
    5ab6:	f240 605b 	movw	r0, #1627	; 0x65b
    5aba:	f003 fc3b 	bl	9334 <radio_crc_configure>
}
    5abe:	b003      	add	sp, #12
    5ac0:	bd30      	pop	{r4, r5, pc}
    5ac2:	bf00      	nop
    5ac4:	8e89bed6 	.word	0x8e89bed6
    5ac8:	00006b91 	.word	0x00006b91
    5acc:	00555555 	.word	0x00555555

00005ad0 <event_stop.constprop.50>:
static void event_stop(u32_t ticks_at_expire, u32_t remainder,
    5ad0:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
    5ad2:	4b05      	ldr	r3, [pc, #20]	; (5ae8 <event_stop.constprop.50+0x18>)
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    5ad4:	2200      	movs	r2, #0
	s_mfy_radio_stop.param = context;
    5ad6:	6098      	str	r0, [r3, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    5ad8:	4611      	mov	r1, r2
    5ada:	4610      	mov	r0, r2
    5adc:	f7fd f91c 	bl	2d18 <mayfly_enqueue>
	LL_ASSERT(!retval);
    5ae0:	b108      	cbz	r0, 5ae6 <event_stop.constprop.50+0x16>
    5ae2:	f7ff fc99 	bl	5418 <event_active.part.17>
    5ae6:	bd08      	pop	{r3, pc}
    5ae8:	20003850 	.word	0x20003850

00005aec <event_common_prepare>:
{
    5aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u32_t _ticks_xtal_to_start = *ticks_xtal_to_start;
    5af0:	6814      	ldr	r4, [r2, #0]
	u32_t _ticks_active_to_start = *ticks_active_to_start;
    5af2:	681d      	ldr	r5, [r3, #0]
{
    5af4:	b08d      	sub	sp, #52	; 0x34
	if (_ticks_xtal_to_start & XON_BITMASK) {
    5af6:	2c00      	cmp	r4, #0
{
    5af8:	4681      	mov	r9, r0
    5afa:	910b      	str	r1, [sp, #44]	; 0x2c
    5afc:	4690      	mov	r8, r2
    5afe:	469b      	mov	fp, r3
    5b00:	f89d a05c 	ldrb.w	sl, [sp, #92]	; 0x5c
	if (_ticks_xtal_to_start & XON_BITMASK) {
    5b04:	da03      	bge.n	5b0e <event_common_prepare+0x22>
		_ticks_xtal_to_start =
    5b06:	9c16      	ldr	r4, [sp, #88]	; 0x58
    5b08:	42ac      	cmp	r4, r5
    5b0a:	bf38      	it	cc
    5b0c:	462c      	movcc	r4, r5
	if (_ticks_active_to_start < _ticks_xtal_to_start) {
    5b0e:	42ac      	cmp	r4, r5
    5b10:	4f4e      	ldr	r7, [pc, #312]	; (5c4c <event_common_prepare+0x160>)
    5b12:	d91b      	bls.n	5b4c <event_common_prepare+0x60>
		ticker_status =
    5b14:	f241 63e7 	movw	r3, #5863	; 0x16e7
    5b18:	9308      	str	r3, [sp, #32]
    5b1a:	4b4d      	ldr	r3, [pc, #308]	; (5c50 <event_common_prepare+0x164>)
    5b1c:	9305      	str	r3, [sp, #20]
    5b1e:	2100      	movs	r1, #0
		ticks_to_active = _ticks_xtal_to_start - _ticks_active_to_start;
    5b20:	1b63      	subs	r3, r4, r5
		ticker_status =
    5b22:	9300      	str	r3, [sp, #0]
    5b24:	9707      	str	r7, [sp, #28]
    5b26:	464b      	mov	r3, r9
    5b28:	9106      	str	r1, [sp, #24]
    5b2a:	9104      	str	r1, [sp, #16]
    5b2c:	9103      	str	r1, [sp, #12]
    5b2e:	9102      	str	r1, [sp, #8]
    5b30:	9101      	str	r1, [sp, #4]
    5b32:	2201      	movs	r2, #1
    5b34:	4608      	mov	r0, r1
    5b36:	f7fd fe99 	bl	386c <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    5b3a:	f030 0302 	bics.w	r3, r0, #2
    5b3e:	d02b      	beq.n	5b98 <event_common_prepare+0xac>
		LL_ASSERT(!retval);
    5b40:	4040      	eors	r0, r0
    5b42:	f380 8811 	msr	BASEPRI, r0
    5b46:	f04f 0004 	mov.w	r0, #4
    5b4a:	df02      	svc	2
	} else if (_ticks_active_to_start > _ticks_xtal_to_start) {
    5b4c:	d21d      	bcs.n	5b8a <event_common_prepare+0x9e>
		event_active(0, 0, 0, NULL);
    5b4e:	2300      	movs	r3, #0
    5b50:	461a      	mov	r2, r3
    5b52:	4619      	mov	r1, r3
    5b54:	4618      	mov	r0, r3
    5b56:	f7ff feef 	bl	5938 <event_active>
		ticker_status =
    5b5a:	f241 63fc 	movw	r3, #5884	; 0x16fc
    5b5e:	2100      	movs	r1, #0
    5b60:	9308      	str	r3, [sp, #32]
		ticks_to_xtal = _ticks_active_to_start - _ticks_xtal_to_start;
    5b62:	1b2c      	subs	r4, r5, r4
		ticker_status =
    5b64:	4b3b      	ldr	r3, [pc, #236]	; (5c54 <event_common_prepare+0x168>)
    5b66:	9305      	str	r3, [sp, #20]
    5b68:	9707      	str	r7, [sp, #28]
    5b6a:	464b      	mov	r3, r9
    5b6c:	9106      	str	r1, [sp, #24]
    5b6e:	9104      	str	r1, [sp, #16]
    5b70:	9103      	str	r1, [sp, #12]
    5b72:	9102      	str	r1, [sp, #8]
    5b74:	9101      	str	r1, [sp, #4]
    5b76:	9400      	str	r4, [sp, #0]
    5b78:	2201      	movs	r2, #1
    5b7a:	4608      	mov	r0, r1
    5b7c:	f7fd fe76 	bl	386c <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    5b80:	f030 0302 	bics.w	r3, r0, #2
    5b84:	d1dc      	bne.n	5b40 <event_common_prepare+0x54>
    5b86:	462c      	mov	r4, r5
    5b88:	e00b      	b.n	5ba2 <event_common_prepare+0xb6>
		event_active(0, 0, 0, NULL);
    5b8a:	2300      	movs	r3, #0
    5b8c:	461a      	mov	r2, r3
    5b8e:	4619      	mov	r1, r3
    5b90:	4618      	mov	r0, r3
    5b92:	f7ff fed1 	bl	5938 <event_active>
		event_xtal(0, 0, 0, NULL);
    5b96:	2300      	movs	r3, #0
    5b98:	461a      	mov	r2, r3
    5b9a:	4619      	mov	r1, r3
    5b9c:	4618      	mov	r0, r3
    5b9e:	f7ff febd 	bl	591c <event_xtal>
	_radio.remainder_anchor = remainder;
    5ba2:	4e2d      	ldr	r6, [pc, #180]	; (5c58 <event_common_prepare+0x16c>)
    5ba4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5ba6:	60f3      	str	r3, [r6, #12]
	ticker_status =
    5ba8:	f241 7314 	movw	r3, #5908	; 0x1714
    5bac:	9308      	str	r3, [sp, #32]
    5bae:	9b19      	ldr	r3, [sp, #100]	; 0x64
    5bb0:	9306      	str	r3, [sp, #24]
    5bb2:	2200      	movs	r2, #0
    5bb4:	9b18      	ldr	r3, [sp, #96]	; 0x60
    5bb6:	9305      	str	r3, [sp, #20]
    5bb8:	9707      	str	r7, [sp, #28]
    5bba:	464b      	mov	r3, r9
    5bbc:	9204      	str	r2, [sp, #16]
    5bbe:	9203      	str	r2, [sp, #12]
    5bc0:	9202      	str	r2, [sp, #8]
    5bc2:	9201      	str	r2, [sp, #4]
    5bc4:	9400      	str	r4, [sp, #0]
    5bc6:	4611      	mov	r1, r2
    5bc8:	4610      	mov	r0, r2
    5bca:	f7fd fe4f 	bl	386c <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    5bce:	f030 0302 	bics.w	r3, r0, #2
    5bd2:	d1b5      	bne.n	5b40 <event_common_prepare+0x54>
	event_stop(0, 0, 0, (void *)STATE_ABORT);
    5bd4:	2005      	movs	r0, #5
    5bd6:	f7ff ff7b 	bl	5ad0 <event_stop.constprop.50>
	if (_radio.ticks_active_to_start != _ticks_active_to_start) {
    5bda:	f8d6 3784 	ldr.w	r3, [r6, #1924]	; 0x784
    5bde:	429d      	cmp	r5, r3
    5be0:	d023      	beq.n	5c2a <event_common_prepare+0x13e>
		*ticks_active_to_start = _radio.ticks_active_to_start;
    5be2:	f8cb 3000 	str.w	r3, [fp]
		if (*ticks_xtal_to_start & XON_BITMASK) {
    5be6:	f8d8 3000 	ldr.w	r3, [r8]
		ticker_status =
    5bea:	9705      	str	r7, [sp, #20]
		if (*ticks_xtal_to_start & XON_BITMASK) {
    5bec:	2b00      	cmp	r3, #0
			*ticks_xtal_to_start &= ~XON_BITMASK;
    5bee:	bfbc      	itt	lt
    5bf0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    5bf4:	f8c8 3000 	strlt.w	r3, [r8]
		ticks_to_start_new = (_radio.ticks_active_to_start <
    5bf8:	f8d6 2784 	ldr.w	r2, [r6, #1924]	; 0x784
    5bfc:	f8d8 1000 	ldr.w	r1, [r8]
    5c00:	428a      	cmp	r2, r1
    5c02:	bf38      	it	cc
    5c04:	460a      	movcc	r2, r1
		ticker_status =
    5c06:	f241 7144 	movw	r1, #5956	; 0x1744
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    5c0a:	b2a3      	uxth	r3, r4
    5c0c:	b292      	uxth	r2, r2
		ticker_status =
    5c0e:	9106      	str	r1, [sp, #24]
    5c10:	2100      	movs	r1, #0
    5c12:	9302      	str	r3, [sp, #8]
    5c14:	9201      	str	r2, [sp, #4]
    5c16:	9200      	str	r2, [sp, #0]
    5c18:	9104      	str	r1, [sp, #16]
    5c1a:	9103      	str	r1, [sp, #12]
    5c1c:	4652      	mov	r2, sl
    5c1e:	4608      	mov	r0, r1
    5c20:	f7fd fe74 	bl	390c <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    5c24:	f030 0302 	bics.w	r3, r0, #2
    5c28:	d18a      	bne.n	5b40 <event_common_prepare+0x54>
	packet_tx_enqueue(0xFF);
    5c2a:	20ff      	movs	r0, #255	; 0xff
    5c2c:	f7ff fd68 	bl	5700 <packet_tx_enqueue>
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    5c30:	4b0a      	ldr	r3, [pc, #40]	; (5c5c <event_common_prepare+0x170>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    5c32:	2201      	movs	r2, #1
    5c34:	4611      	mov	r1, r2
    5c36:	2000      	movs	r0, #0
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    5c38:	f8c3 a008 	str.w	sl, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    5c3c:	f7fd f86c 	bl	2d18 <mayfly_enqueue>
		LL_ASSERT(!retval);
    5c40:	2800      	cmp	r0, #0
    5c42:	f47f af7d 	bne.w	5b40 <event_common_prepare+0x54>
}
    5c46:	b00d      	add	sp, #52	; 0x34
    5c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5c4c:	00005a05 	.word	0x00005a05
    5c50:	00005939 	.word	0x00005939
    5c54:	0000591d 	.word	0x0000591d
    5c58:	20000370 	.word	0x20000370
    5c5c:	200038e0 	.word	0x200038e0

00005c60 <event_scan_prepare>:
{
    5c60:	b530      	push	{r4, r5, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    5c62:	4c1d      	ldr	r4, [pc, #116]	; (5cd8 <event_scan_prepare+0x78>)
    5c64:	7c23      	ldrb	r3, [r4, #16]
{
    5c66:	b085      	sub	sp, #20
    5c68:	4605      	mov	r5, r0
	LL_ASSERT(!_radio.ticker_id_prepare);
    5c6a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    5c6e:	b12b      	cbz	r3, 5c7c <event_scan_prepare+0x1c>
		LL_ASSERT(!retval);
    5c70:	4040      	eors	r0, r0
    5c72:	f380 8811 	msr	BASEPRI, r0
    5c76:	f04f 0004 	mov.w	r0, #4
    5c7a:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_SCAN;
    5c7c:	2306      	movs	r3, #6
    5c7e:	7423      	strb	r3, [r4, #16]
	event_common_prepare(ticks_at_expire, remainder,
    5c80:	9203      	str	r2, [sp, #12]
    5c82:	9301      	str	r3, [sp, #4]
    5c84:	4a15      	ldr	r2, [pc, #84]	; (5cdc <event_scan_prepare+0x7c>)
    5c86:	f8d4 3644 	ldr.w	r3, [r4, #1604]	; 0x644
    5c8a:	9202      	str	r2, [sp, #8]
    5c8c:	9300      	str	r3, [sp, #0]
    5c8e:	f204 623c 	addw	r2, r4, #1596	; 0x63c
    5c92:	f504 63c8 	add.w	r3, r4, #1600	; 0x640
    5c96:	f7ff ff29 	bl	5aec <event_common_prepare>
	if (_radio.scanner.conn) {
    5c9a:	f8d4 3674 	ldr.w	r3, [r4, #1652]	; 0x674
    5c9e:	b1cb      	cbz	r3, 5cd4 <event_scan_prepare+0x74>
		if (_radio.scanner.hdr.ticks_xtal_to_start & XON_BITMASK) {
    5ca0:	f8d4 363c 	ldr.w	r3, [r4, #1596]	; 0x63c
    5ca4:	2b00      	cmp	r3, #0
    5ca6:	da0c      	bge.n	5cc2 <event_scan_prepare+0x62>
			u32_t ticks_prepare_to_start =
    5ca8:	f8d4 1644 	ldr.w	r1, [r4, #1604]	; 0x644
    5cac:	f8d4 2640 	ldr.w	r2, [r4, #1600]	; 0x640
				(_radio.scanner.hdr.ticks_xtal_to_start &
    5cb0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
				 ~XON_BITMASK) - ticks_prepare_to_start;
    5cb4:	4291      	cmp	r1, r2
    5cb6:	bf2c      	ite	cs
    5cb8:	ebc3 0301 	rsbcs	r3, r3, r1
    5cbc:	ebc3 0302 	rsbcc	r3, r3, r2
			ticks_at_expire_normal -=
    5cc0:	441d      	add	r5, r3
		s_mfy_sched_after_mstr_free_offset_get.param =
    5cc2:	4b07      	ldr	r3, [pc, #28]	; (5ce0 <event_scan_prepare+0x80>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    5cc4:	2201      	movs	r2, #1
    5cc6:	4611      	mov	r1, r2
    5cc8:	2000      	movs	r0, #0
		s_mfy_sched_after_mstr_free_offset_get.param =
    5cca:	609d      	str	r5, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    5ccc:	f7fd f824 	bl	2d18 <mayfly_enqueue>
		LL_ASSERT(!retval);
    5cd0:	2800      	cmp	r0, #0
    5cd2:	d1cd      	bne.n	5c70 <event_scan_prepare+0x10>
}
    5cd4:	b005      	add	sp, #20
    5cd6:	bd30      	pop	{r4, r5, pc}
    5cd8:	20000370 	.word	0x20000370
    5cdc:	00005f39 	.word	0x00005f39
    5ce0:	20003870 	.word	0x20003870

00005ce4 <packet_rx_allocate.constprop.51>:
static void packet_rx_allocate(u8_t max)
    5ce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (max > _radio.link_rx_data_quota) {
    5ce8:	4d21      	ldr	r5, [pc, #132]	; (5d70 <packet_rx_allocate.constprop.51+0x8c>)
	acquire = _radio.packet_rx_acquire + 1;
    5cea:	f895 4742 	ldrb.w	r4, [r5, #1858]	; 0x742
	if (acquire == _radio.packet_rx_count) {
    5cee:	f895 3740 	ldrb.w	r3, [r5, #1856]	; 0x740
	if (max > _radio.link_rx_data_quota) {
    5cf2:	f895 9754 	ldrb.w	r9, [r5, #1876]	; 0x754
	acquire = _radio.packet_rx_acquire + 1;
    5cf6:	3401      	adds	r4, #1
    5cf8:	b2e4      	uxtb	r4, r4
		acquire = 0;
    5cfa:	42a3      	cmp	r3, r4
    5cfc:	bf08      	it	eq
    5cfe:	2400      	moveq	r4, #0
		link = mem_acquire(&_radio.link_rx_free);
    5d00:	f505 67e9 	add.w	r7, r5, #1864	; 0x748
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    5d04:	f505 68e6 	add.w	r8, r5, #1840	; 0x730
	while ((max--) && (acquire != _radio.packet_rx_last)) {
    5d08:	f1b9 0f00 	cmp.w	r9, #0
    5d0c:	d003      	beq.n	5d16 <packet_rx_allocate.constprop.51+0x32>
    5d0e:	f895 3741 	ldrb.w	r3, [r5, #1857]	; 0x741
    5d12:	429c      	cmp	r4, r3
    5d14:	d101      	bne.n	5d1a <packet_rx_allocate.constprop.51+0x36>
    5d16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		link = mem_acquire(&_radio.link_rx_free);
    5d1a:	4638      	mov	r0, r7
    5d1c:	f7fc ff43 	bl	2ba6 <mem_acquire>
		if (!link) {
    5d20:	4606      	mov	r6, r0
    5d22:	2800      	cmp	r0, #0
    5d24:	d0f7      	beq.n	5d16 <packet_rx_allocate.constprop.51+0x32>
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    5d26:	4640      	mov	r0, r8
    5d28:	f7fc ff3d 	bl	2ba6 <mem_acquire>
		if (!node_rx) {
    5d2c:	b928      	cbnz	r0, 5d3a <packet_rx_allocate.constprop.51+0x56>
			mem_release(link, &_radio.link_rx_free);
    5d2e:	4630      	mov	r0, r6
    5d30:	4910      	ldr	r1, [pc, #64]	; (5d74 <packet_rx_allocate.constprop.51+0x90>)
}
    5d32:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			mem_release(link, &_radio.link_rx_free);
    5d36:	f7fc bf50 	b.w	2bda <mem_release>
		node_rx->hdr.onion.link = link;
    5d3a:	6006      	str	r6, [r0, #0]
		_radio.packet_rx[_radio.packet_rx_acquire] = node_rx;
    5d3c:	f895 2742 	ldrb.w	r2, [r5, #1858]	; 0x742
    5d40:	f8d5 373c 	ldr.w	r3, [r5, #1852]	; 0x73c
    5d44:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
		_radio.packet_rx_acquire = acquire;
    5d48:	f885 4742 	strb.w	r4, [r5, #1858]	; 0x742
		if (acquire == _radio.packet_rx_count) {
    5d4c:	f895 3740 	ldrb.w	r3, [r5, #1856]	; 0x740
		acquire = _radio.packet_rx_acquire + 1;
    5d50:	3401      	adds	r4, #1
    5d52:	b2e4      	uxtb	r4, r4
			acquire = 0;
    5d54:	42a3      	cmp	r3, r4
    5d56:	bf08      	it	eq
    5d58:	2400      	moveq	r4, #0
		_radio.link_rx_data_quota--;
    5d5a:	f895 3754 	ldrb.w	r3, [r5, #1876]	; 0x754
    5d5e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    5d62:	3b01      	subs	r3, #1
    5d64:	f885 3754 	strb.w	r3, [r5, #1876]	; 0x754
    5d68:	fa5f f989 	uxtb.w	r9, r9
    5d6c:	e7cc      	b.n	5d08 <packet_rx_allocate.constprop.51+0x24>
    5d6e:	bf00      	nop
    5d70:	20000370 	.word	0x20000370
    5d74:	20000ab8 	.word	0x20000ab8

00005d78 <common_init>:
{
    5d78:	b510      	push	{r4, lr}
	if (_radio.connection_count) {
    5d7a:	4c2e      	ldr	r4, [pc, #184]	; (5e34 <common_init+0xbc>)
    5d7c:	f894 2718 	ldrb.w	r2, [r4, #1816]	; 0x718
    5d80:	2a00      	cmp	r2, #0
    5d82:	d037      	beq.n	5df4 <common_init+0x7c>
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
    5d84:	f204 7314 	addw	r3, r4, #1812	; 0x714
    5d88:	f44f 7182 	mov.w	r1, #260	; 0x104
    5d8c:	f8d4 0710 	ldr.w	r0, [r4, #1808]	; 0x710
    5d90:	f7fc fee2 	bl	2b58 <mem_init>
	mem_init(_radio.pkt_rx_data_pool,
    5d94:	4b28      	ldr	r3, [pc, #160]	; (5e38 <common_init+0xc0>)
    5d96:	f894 273a 	ldrb.w	r2, [r4, #1850]	; 0x73a
    5d9a:	f8b4 1738 	ldrh.w	r1, [r4, #1848]	; 0x738
    5d9e:	f8d4 072c 	ldr.w	r0, [r4, #1836]	; 0x72c
    5da2:	f7fc fed9 	bl	2b58 <mem_init>
		 (_radio.packet_rx_count + _radio.connection_count),
    5da6:	f894 1740 	ldrb.w	r1, [r4, #1856]	; 0x740
    5daa:	f894 2718 	ldrb.w	r2, [r4, #1816]	; 0x718
	mem_init(_radio.link_rx_pool, (sizeof(memq_link_t)),
    5dae:	4b23      	ldr	r3, [pc, #140]	; (5e3c <common_init+0xc4>)
    5db0:	f8d4 0744 	ldr.w	r0, [r4, #1860]	; 0x744
    5db4:	440a      	add	r2, r1
    5db6:	2108      	movs	r1, #8
    5db8:	f7fc fece 	bl	2b58 <mem_init>
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
    5dbc:	4b20      	ldr	r3, [pc, #128]	; (5e40 <common_init+0xc8>)
    5dbe:	f8d4 0758 	ldr.w	r0, [r4, #1880]	; 0x758
    5dc2:	2202      	movs	r2, #2
    5dc4:	2124      	movs	r1, #36	; 0x24
    5dc6:	f7fc fec7 	bl	2b58 <mem_init>
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
    5dca:	f894 2774 	ldrb.w	r2, [r4, #1908]	; 0x774
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
    5dce:	f8d4 0760 	ldr.w	r0, [r4, #1888]	; 0x760
    5dd2:	4b1c      	ldr	r3, [pc, #112]	; (5e44 <common_init+0xcc>)
    5dd4:	f8b4 1768 	ldrh.w	r1, [r4, #1896]	; 0x768
    5dd8:	3a01      	subs	r2, #1
    5dda:	b292      	uxth	r2, r2
    5ddc:	f7fc febc 	bl	2b58 <mem_init>
	link = mem_acquire(&_radio.link_rx_free);
    5de0:	4816      	ldr	r0, [pc, #88]	; (5e3c <common_init+0xc4>)
    5de2:	f7fc fee0 	bl	2ba6 <mem_acquire>
	LL_ASSERT(link);
    5de6:	b940      	cbnz	r0, 5dfa <common_init+0x82>
    5de8:	4040      	eors	r0, r0
    5dea:	f380 8811 	msr	BASEPRI, r0
    5dee:	f04f 0004 	mov.w	r0, #4
    5df2:	df02      	svc	2
		_radio.conn_free = NULL;
    5df4:	f8c4 2714 	str.w	r2, [r4, #1812]	; 0x714
    5df8:	e7cc      	b.n	5d94 <common_init+0x1c>
	memq_init(link, &_radio.link_rx_head, (void *)&_radio.link_rx_tail);
    5dfa:	4a13      	ldr	r2, [pc, #76]	; (5e48 <common_init+0xd0>)
    5dfc:	1f11      	subs	r1, r2, #4
    5dfe:	f7fc ff18 	bl	2c32 <memq_init>
	_radio.advertiser.chan_map = 0x07;
    5e02:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    5e06:	f043 0370 	orr.w	r3, r3, #112	; 0x70
    5e0a:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	_radio.data_chan_map[0] = 0xFF;
    5e0e:	23ff      	movs	r3, #255	; 0xff
    5e10:	f884 3722 	strb.w	r3, [r4, #1826]	; 0x722
	_radio.data_chan_map[1] = 0xFF;
    5e14:	f884 3723 	strb.w	r3, [r4, #1827]	; 0x723
	_radio.data_chan_map[2] = 0xFF;
    5e18:	f884 3724 	strb.w	r3, [r4, #1828]	; 0x724
	_radio.data_chan_map[3] = 0xFF;
    5e1c:	f884 3725 	strb.w	r3, [r4, #1829]	; 0x725
	_radio.data_chan_map[4] = 0x1F;
    5e20:	231f      	movs	r3, #31
    5e22:	f884 3726 	strb.w	r3, [r4, #1830]	; 0x726
	_radio.data_chan_count = 37;
    5e26:	2325      	movs	r3, #37	; 0x25
    5e28:	f884 3727 	strb.w	r3, [r4, #1831]	; 0x727
}
    5e2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	packet_rx_allocate(0xFF);
    5e30:	f7ff bf58 	b.w	5ce4 <packet_rx_allocate.constprop.51>
    5e34:	20000370 	.word	0x20000370
    5e38:	20000aa0 	.word	0x20000aa0
    5e3c:	20000ab8 	.word	0x20000ab8
    5e40:	20000acc 	.word	0x20000acc
    5e44:	20000ad4 	.word	0x20000ad4
    5e48:	20000ac0 	.word	0x20000ac0

00005e4c <mayfly_xtal_start>:
	clock_control_on(_radio.hf_clock, NULL);
    5e4c:	4b02      	ldr	r3, [pc, #8]	; (5e58 <mayfly_xtal_start+0xc>)
    5e4e:	6818      	ldr	r0, [r3, #0]
    5e50:	6843      	ldr	r3, [r0, #4]
    5e52:	2100      	movs	r1, #0
    5e54:	681b      	ldr	r3, [r3, #0]
    5e56:	4718      	bx	r3
    5e58:	20000370 	.word	0x20000370

00005e5c <mayfly_xtal_stop>:
	clock_control_off(_radio.hf_clock, NULL);
    5e5c:	4b02      	ldr	r3, [pc, #8]	; (5e68 <mayfly_xtal_stop+0xc>)
    5e5e:	6818      	ldr	r0, [r3, #0]
static inline int clock_control_off(struct device *dev,
				    clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->off(dev, sys);
    5e60:	6843      	ldr	r3, [r0, #4]
    5e62:	2100      	movs	r1, #0
    5e64:	685b      	ldr	r3, [r3, #4]
    5e66:	4718      	bx	r3
    5e68:	20000370 	.word	0x20000370

00005e6c <chan_sel_2>:
{
    5e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
	prn_e = counter ^ chan_id;
    5e6e:	4048      	eors	r0, r1
    5e70:	2703      	movs	r7, #3
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    5e72:	ea4f 2e10 	mov.w	lr, r0, lsr #8
    5e76:	2608      	movs	r6, #8
	o = 0;
    5e78:	2400      	movs	r4, #0
		o |= (i & 1);
    5e7a:	f00e 0501 	and.w	r5, lr, #1
    5e7e:	3e01      	subs	r6, #1
    5e80:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
	for (iterate = 0; iterate < 8; iterate++) {
    5e84:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
		o |= (i & 1);
    5e88:	b2ec      	uxtb	r4, r5
		i >>= 1;
    5e8a:	ea4f 0e5e 	mov.w	lr, lr, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
    5e8e:	d1f4      	bne.n	5e7a <chan_sel_2+0xe>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    5e90:	0225      	lsls	r5, r4, #8
    5e92:	b22d      	sxth	r5, r5
    5e94:	b2c0      	uxtb	r0, r0
    5e96:	f04f 0e08 	mov.w	lr, #8
	o = 0;
    5e9a:	4634      	mov	r4, r6
		o |= (i & 1);
    5e9c:	f000 0601 	and.w	r6, r0, #1
    5ea0:	ea46 0444 	orr.w	r4, r6, r4, lsl #1
    5ea4:	f10e 36ff 	add.w	r6, lr, #4294967295	; 0xffffffff
	for (iterate = 0; iterate < 8; iterate++) {
    5ea8:	f016 0eff 	ands.w	lr, r6, #255	; 0xff
		o |= (i & 1);
    5eac:	b2e4      	uxtb	r4, r4
		i >>= 1;
    5eae:	ea4f 0050 	mov.w	r0, r0, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
    5eb2:	d1f3      	bne.n	5e9c <chan_sel_2+0x30>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    5eb4:	432c      	orrs	r4, r5
	return ((u32_t)a * 17 + b) & 0xFFFF;
    5eb6:	eb04 1404 	add.w	r4, r4, r4, lsl #4
    5eba:	3f01      	subs	r7, #1
    5ebc:	440c      	add	r4, r1
	for (iterate = 0; iterate < 3; iterate++) {
    5ebe:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
	return ((u32_t)a * 17 + b) & 0xFFFF;
    5ec2:	b2a0      	uxth	r0, r4
	for (iterate = 0; iterate < 3; iterate++) {
    5ec4:	d1d5      	bne.n	5e72 <chan_sel_2+0x6>
	chan_next = prn_e % 37;
    5ec6:	2425      	movs	r4, #37	; 0x25
	prn_e ^= chan_id;
    5ec8:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
    5eca:	fbb1 f0f4 	udiv	r0, r1, r4
    5ece:	fb04 1010 	mls	r0, r4, r0, r1
    5ed2:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    5ed4:	08c4      	lsrs	r4, r0, #3
    5ed6:	f000 0507 	and.w	r5, r0, #7
    5eda:	5d14      	ldrb	r4, [r2, r4]
    5edc:	412c      	asrs	r4, r5
    5ede:	07e4      	lsls	r4, r4, #31
    5ee0:	d407      	bmi.n	5ef2 <chan_sel_2+0x86>
		chan_index = ((u32_t)chan_count * prn_e) >> 16;
    5ee2:	4359      	muls	r1, r3
		chan_next = chan_sel_remap(chan_map, chan_index);
    5ee4:	f3c1 4107 	ubfx	r1, r1, #16, #8
    5ee8:	4610      	mov	r0, r2
}
    5eea:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		chan_next = chan_sel_remap(chan_map, chan_index);
    5eee:	f7fe bcff 	b.w	48f0 <chan_sel_remap>
}
    5ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005ef4 <preempt_calc>:
{
    5ef4:	b570      	push	{r4, r5, r6, lr}
    5ef6:	4614      	mov	r4, r2
    5ef8:	460e      	mov	r6, r1
    5efa:	4605      	mov	r5, r0
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);
    5efc:	f7fd fe24 	bl	3b48 <ticker_ticks_now_get>
	u32_t diff =
    5f00:	4621      	mov	r1, r4
    5f02:	f7fd fe23 	bl	3b4c <ticker_ticks_diff_get>
	diff += 3;
    5f06:	1cc4      	adds	r4, r0, #3
	if (diff > HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
    5f08:	2c09      	cmp	r4, #9
    5f0a:	d911      	bls.n	5f30 <preempt_calc+0x3c>
		if (s_xtal_retained) {
    5f0c:	4b09      	ldr	r3, [pc, #36]	; (5f34 <preempt_calc+0x40>)
    5f0e:	781b      	ldrb	r3, [r3, #0]
    5f10:	b113      	cbz	r3, 5f18 <preempt_calc+0x24>
    5f12:	2000      	movs	r0, #0
    5f14:	f7ff f9f2 	bl	52fc <mayfly_xtal_retain.part.16>
		prepare_normal_set(hdr, RADIO_TICKER_USER_ID_WORKER, ticker_id);
    5f18:	4632      	mov	r2, r6
    5f1a:	2100      	movs	r1, #0
    5f1c:	4628      	mov	r0, r5
    5f1e:	f7ff fa81 	bl	5424 <prepare_normal_set>
		diff += hdr->ticks_preempt_to_start;
    5f22:	68ab      	ldr	r3, [r5, #8]
    5f24:	441c      	add	r4, r3
		if (diff <
    5f26:	2c26      	cmp	r4, #38	; 0x26
    5f28:	d800      	bhi.n	5f2c <preempt_calc+0x38>
			hdr->ticks_preempt_to_start = diff;
    5f2a:	60ac      	str	r4, [r5, #8]
		return 1;
    5f2c:	2001      	movs	r0, #1
}
    5f2e:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
    5f30:	2000      	movs	r0, #0
    5f32:	bd70      	pop	{r4, r5, r6, pc}
    5f34:	20000b84 	.word	0x20000b84

00005f38 <event_scan>:
{
    5f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
    5f3c:	4b7f      	ldr	r3, [pc, #508]	; (613c <event_scan+0x204>)
    5f3e:	7cd9      	ldrb	r1, [r3, #19]
{
    5f40:	b08a      	sub	sp, #40	; 0x28
    5f42:	4605      	mov	r5, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    5f44:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    5f48:	461c      	mov	r4, r3
    5f4a:	b129      	cbz	r1, 5f58 <event_scan+0x20>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    5f4c:	4040      	eors	r0, r0
    5f4e:	f380 8811 	msr	BASEPRI, r0
    5f52:	f04f 0004 	mov.w	r0, #4
    5f56:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_SCAN);
    5f58:	7c1b      	ldrb	r3, [r3, #16]
    5f5a:	b2db      	uxtb	r3, r3
    5f5c:	2b06      	cmp	r3, #6
    5f5e:	d1f5      	bne.n	5f4c <event_scan+0x14>
	_radio.role = ROLE_SCAN;
    5f60:	2102      	movs	r1, #2
    5f62:	74e1      	strb	r1, [r4, #19]
	_radio.ticks_anchor = ticks_at_expire;
    5f64:	60a0      	str	r0, [r4, #8]
	_radio.ticker_id_prepare = 0;
    5f66:	7422      	strb	r2, [r4, #16]
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    5f68:	f894 064d 	ldrb.w	r0, [r4, #1613]	; 0x64d
	_radio.ticker_id_event = RADIO_TICKER_ID_SCAN;
    5f6c:	7463      	strb	r3, [r4, #17]
	_radio.scanner.state = 0;
    5f6e:	f894 364c 	ldrb.w	r3, [r4, #1612]	; 0x64c
	_radio.state = STATE_RX;
    5f72:	2101      	movs	r1, #1
	_radio.scanner.state = 0;
    5f74:	f362 0341 	bfi	r3, r2, #1, #1
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    5f78:	f000 0007 	and.w	r0, r0, #7
	_radio.scanner.state = 0;
    5f7c:	f884 364c 	strb.w	r3, [r4, #1612]	; 0x64c
	_radio.state = STATE_RX;
    5f80:	7521      	strb	r1, [r4, #20]
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    5f82:	f7ff fd7b 	bl	5a7c <adv_scan_configure.constprop.49>
	if(aux_scan){
    5f86:	4b6e      	ldr	r3, [pc, #440]	; (6140 <event_scan+0x208>)
    5f88:	781e      	ldrb	r6, [r3, #0]
    5f8a:	4698      	mov	r8, r3
    5f8c:	2e00      	cmp	r6, #0
    5f8e:	f000 809a 	beq.w	60c6 <event_scan+0x18e>
		stop_time_ticker = k_cycle_get_32();
    5f92:	f7fb ff6b 	bl	1e6c <_timer_cycle_get_32>
    5f96:	4b6b      	ldr	r3, [pc, #428]	; (6144 <event_scan+0x20c>)
    5f98:	6018      	str	r0, [r3, #0]
		event_time_diff = (stop_time_ticker - start_time_ticker);
    5f9a:	4b6b      	ldr	r3, [pc, #428]	; (6148 <event_scan+0x210>)
    5f9c:	681f      	ldr	r7, [r3, #0]
    5f9e:	4b6b      	ldr	r3, [pc, #428]	; (614c <event_scan+0x214>)
    5fa0:	1bc7      	subs	r7, r0, r7
    5fa2:	601f      	str	r7, [r3, #0]
		Time_difference_ticker = (SYS_CLOCK_HW_CYCLES_TO_NS(event_time_diff))/1000;
    5fa4:	4b6a      	ldr	r3, [pc, #424]	; (6150 <event_scan+0x218>)
    5fa6:	681a      	ldr	r2, [r3, #0]
    5fa8:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    5fac:	fb82 2306 	smull	r2, r3, r2, r6
    5fb0:	fba2 0107 	umull	r0, r1, r2, r7
    5fb4:	fb07 1103 	mla	r1, r7, r3, r1
    5fb8:	4b66      	ldr	r3, [pc, #408]	; (6154 <event_scan+0x21c>)
    5fba:	681a      	ldr	r2, [r3, #0]
    5fbc:	17d3      	asrs	r3, r2, #31
    5fbe:	f7fa f953 	bl	268 <__aeabi_uldivmod>
    5fc2:	4b65      	ldr	r3, [pc, #404]	; (6158 <event_scan+0x220>)
		counter++;
    5fc4:	4a65      	ldr	r2, [pc, #404]	; (615c <event_scan+0x224>)
		Time_difference_ticker = (SYS_CLOCK_HW_CYCLES_TO_NS(event_time_diff))/1000;
    5fc6:	fbb0 f0f6 	udiv	r0, r0, r6
    5fca:	2100      	movs	r1, #0
    5fcc:	e9c3 0100 	strd	r0, r1, [r3]
		counter++;
    5fd0:	7813      	ldrb	r3, [r2, #0]
    5fd2:	3301      	adds	r3, #1
    5fd4:	7013      	strb	r3, [r2, #0]
		if(Time_difference_ticker < _radio.ext_scanner.chan_off){
    5fd6:	f504 63d7 	add.w	r3, r4, #1720	; 0x6b8
    5fda:	e9d3 6700 	ldrd	r6, r7, [r3]
    5fde:	42b9      	cmp	r1, r7
    5fe0:	bf08      	it	eq
    5fe2:	42b0      	cmpeq	r0, r6
    5fe4:	f504 6ed9 	add.w	lr, r4, #1736	; 0x6c8
    5fe8:	d206      	bcs.n	5ff8 <event_scan+0xc0>
			_radio.ext_scanner.chan_off_calculation -= Time_difference_ticker;
    5fea:	e9de 2300 	ldrd	r2, r3, [lr]
    5fee:	1a10      	subs	r0, r2, r0
    5ff0:	eb63 0101 	sbc.w	r1, r3, r1
    5ff4:	e9ce 0100 	strd	r0, r1, [lr]
		if( _radio.ext_scanner.chan_off_calculation < 0x2710){
    5ff8:	e9de 2300 	ldrd	r2, r3, [lr]
    5ffc:	2100      	movs	r1, #0
    5ffe:	f242 700f 	movw	r0, #9999	; 0x270f
    6002:	4299      	cmp	r1, r3
    6004:	bf08      	it	eq
    6006:	4290      	cmpeq	r0, r2
    6008:	d35a      	bcc.n	60c0 <event_scan+0x188>
			if( _radio.ext_scanner.chan_off_calculation <(int)1000){
    600a:	2b00      	cmp	r3, #0
    600c:	bf08      	it	eq
    600e:	f5b2 7f7a 	cmpeq.w	r2, #1000	; 0x3e8
    6012:	d215      	bcs.n	6040 <event_scan+0x108>
					ticker_status =
    6014:	f641 4354 	movw	r3, #7252	; 0x1c54
    6018:	2100      	movs	r1, #0
    601a:	9306      	str	r3, [sp, #24]
    601c:	4b50      	ldr	r3, [pc, #320]	; (6160 <event_scan+0x228>)
    601e:	9305      	str	r3, [sp, #20]
    6020:	9104      	str	r1, [sp, #16]
    6022:	2320      	movs	r3, #32
    6024:	9103      	str	r1, [sp, #12]
    6026:	9102      	str	r1, [sp, #8]
    6028:	9101      	str	r1, [sp, #4]
    602a:	9100      	str	r1, [sp, #0]
    602c:	2206      	movs	r2, #6
    602e:	4608      	mov	r0, r1
    6030:	f7fd fc6c 	bl	390c <ticker_update>
				LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    6034:	f030 0302 	bics.w	r3, r0, #2
    6038:	d002      	beq.n	6040 <event_scan+0x108>
    603a:	7ca3      	ldrb	r3, [r4, #18]
    603c:	2b06      	cmp	r3, #6
    603e:	d185      	bne.n	5f4c <event_scan+0x14>
			chan_set(_radio.ext_scanner.chan_index);
    6040:	f894 06b0 	ldrb.w	r0, [r4, #1712]	; 0x6b0
    6044:	f7fe fe1a 	bl	4c7c <chan_set>
			aux_scan = 0x00;
    6048:	2300      	movs	r3, #0
    604a:	f888 3000 	strb.w	r3, [r8]
	radio_tmr_tifs_set(RADIO_TIFS);
    604e:	2096      	movs	r0, #150	; 0x96
    6050:	f003 fa1e 	bl	9490 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
    6054:	2300      	movs	r3, #0
    6056:	4619      	mov	r1, r3
    6058:	461a      	mov	r2, r3
    605a:	4618      	mov	r0, r3
    605c:	f003 f994 	bl	9388 <radio_switch_complete_and_tx>
	radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    6060:	f8d4 373c 	ldr.w	r3, [r4, #1852]	; 0x73c
    6064:	f894 2741 	ldrb.w	r2, [r4, #1857]	; 0x741
    6068:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    606c:	3008      	adds	r0, #8
    606e:	f003 f8ff 	bl	9270 <radio_pkt_rx_set>
	radio_rssi_measure();
    6072:	f003 f9a1 	bl	93b8 <radio_rssi_measure>
	pdu = (void *)radio_pkt_scratch_get();
    6076:	f003 f977 	bl	9368 <radio_pkt_scratch_get>
	if (_radio.scanner.filter_policy) {
    607a:	f894 364d 	ldrb.w	r3, [r4, #1613]	; 0x64d
    607e:	f013 0f30 	tst.w	r3, #48	; 0x30
    6082:	d007      	beq.n	6094 <event_scan+0x15c>
		struct ll_filter *wl = ctrl_filter_get(true);
    6084:	2001      	movs	r0, #1
    6086:	f002 fe73 	bl	8d70 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
    608a:	1c82      	adds	r2, r0, #2
    608c:	7841      	ldrb	r1, [r0, #1]
    608e:	7800      	ldrb	r0, [r0, #0]
    6090:	f003 f9b4 	bl	93fc <radio_filter_configure>
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    6094:	68e2      	ldr	r2, [r4, #12]
    6096:	f105 0109 	add.w	r1, r5, #9
    609a:	2000      	movs	r0, #0
    609c:	f003 fa04 	bl	94a8 <radio_tmr_start>
	radio_tmr_end_capture();
    60a0:	f003 fad2 	bl	9648 <radio_tmr_end_capture>
	if (preempt_calc(&_radio.scanner.hdr, RADIO_TICKER_ID_SCAN,
    60a4:	2106      	movs	r1, #6
    60a6:	462a      	mov	r2, r5
    60a8:	482e      	ldr	r0, [pc, #184]	; (6164 <event_scan+0x22c>)
    60aa:	f7ff ff23 	bl	5ef4 <preempt_calc>
    60ae:	4601      	mov	r1, r0
    60b0:	b300      	cbz	r0, 60f4 <event_scan+0x1bc>
		_radio.state = STATE_STOP;
    60b2:	2304      	movs	r3, #4
    60b4:	7523      	strb	r3, [r4, #20]
}
    60b6:	b00a      	add	sp, #40	; 0x28
    60b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		radio_disable();
    60bc:	f003 b8fe 	b.w	92bc <radio_disable>
			_radio.ext_scanner.chan_off_calculation = _radio.ext_scanner.chan_off;
    60c0:	e9ce 6700 	strd	r6, r7, [lr]
    60c4:	e7c3      	b.n	604e <event_scan+0x116>
		chan_set(37 + _radio.scanner.chan++);
    60c6:	f894 364c 	ldrb.w	r3, [r4, #1612]	; 0x64c
    60ca:	f3c3 0081 	ubfx	r0, r3, #2, #2
    60ce:	1c42      	adds	r2, r0, #1
    60d0:	f362 0383 	bfi	r3, r2, #2, #2
    60d4:	3025      	adds	r0, #37	; 0x25
    60d6:	f884 364c 	strb.w	r3, [r4, #1612]	; 0x64c
    60da:	f7fe fdcf 	bl	4c7c <chan_set>
		if (_radio.scanner.chan == 3) {
    60de:	f894 364c 	ldrb.w	r3, [r4, #1612]	; 0x64c
    60e2:	f003 020c 	and.w	r2, r3, #12
    60e6:	2a0c      	cmp	r2, #12
			_radio.scanner.chan = 0;
    60e8:	bf04      	itt	eq
    60ea:	f366 0383 	bfieq	r3, r6, #2, #2
    60ee:	f884 364c 	strbeq.w	r3, [r4, #1612]	; 0x64c
    60f2:	e7ac      	b.n	604e <event_scan+0x116>
		ret = ticker_start(															//this ticker was for closing the window.we ll use it for Aux packet
    60f4:	f641 43cb 	movw	r3, #7371	; 0x1ccb
    60f8:	9308      	str	r3, [sp, #32]
    60fa:	4b1b      	ldr	r3, [pc, #108]	; (6168 <event_scan+0x230>)
    60fc:	9307      	str	r3, [sp, #28]
    60fe:	2204      	movs	r2, #4
    6100:	4b1a      	ldr	r3, [pc, #104]	; (616c <event_scan+0x234>)
    6102:	9206      	str	r2, [sp, #24]
    6104:	9305      	str	r3, [sp, #20]
    6106:	9004      	str	r0, [sp, #16]
    6108:	9003      	str	r0, [sp, #12]
    610a:	9002      	str	r0, [sp, #8]
    610c:	9001      	str	r0, [sp, #4]
    610e:	f8d4 365c 	ldr.w	r3, [r4, #1628]	; 0x65c
    6112:	3309      	adds	r3, #9
    6114:	9300      	str	r3, [sp, #0]
    6116:	462b      	mov	r3, r5
    6118:	f7fd fba8 	bl	386c <ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    611c:	f030 0302 	bics.w	r3, r0, #2
    6120:	f47f af14 	bne.w	5f4c <event_scan+0x14>
		ret = ticker_job_idle_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    6124:	4619      	mov	r1, r3
    6126:	4618      	mov	r0, r3
    6128:	4a11      	ldr	r2, [pc, #68]	; (6170 <event_scan+0x238>)
    612a:	f7fd fcbb 	bl	3aa4 <ticker_job_idle_get>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    612e:	f030 0302 	bics.w	r3, r0, #2
    6132:	f47f af0b 	bne.w	5f4c <event_scan+0x14>
}
    6136:	b00a      	add	sp, #40	; 0x28
    6138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    613c:	20000370 	.word	0x20000370
    6140:	20000b00 	.word	0x20000b00
    6144:	20001aa4 	.word	0x20001aa4
    6148:	20001aa8 	.word	0x20001aa8
    614c:	20001ac8 	.word	0x20001ac8
    6150:	2000394c 	.word	0x2000394c
    6154:	20003948 	.word	0x20003948
    6158:	20001a78 	.word	0x20001a78
    615c:	20000b03 	.word	0x20000b03
    6160:	0000598d 	.word	0x0000598d
    6164:	200009ac 	.word	0x200009ac
    6168:	00005a05 	.word	0x00005a05
    616c:	00005955 	.word	0x00005955
    6170:	000052a9 	.word	0x000052a9

00006174 <ctrl_tx_enqueue>:
{
    6174:	b510      	push	{r4, lr}
	    !conn->empty &&
    6176:	f890 40a8 	ldrb.w	r4, [r0, #168]	; 0xa8
    617a:	f8d0 20f0 	ldr.w	r2, [r0, #240]	; 0xf0
	if (
    617e:	f014 0f80 	tst.w	r4, #128	; 0x80
    6182:	d118      	bne.n	61b6 <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
    6184:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
	    !conn->empty &&
    6188:	b1ab      	cbz	r3, 61b6 <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
    618a:	0724      	lsls	r4, r4, #28
    618c:	d413      	bmi.n	61b6 <ctrl_tx_enqueue+0x42>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    618e:	f8d0 40f8 	ldr.w	r4, [r0, #248]	; 0xf8
    6192:	42a3      	cmp	r3, r4
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    6194:	bf04      	itt	eq
    6196:	681c      	ldreq	r4, [r3, #0]
    6198:	f8c0 40f8 	streq.w	r4, [r0, #248]	; 0xf8
		if (!conn->pkt_tx_ctrl) {
    619c:	b992      	cbnz	r2, 61c4 <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head->next;
    619e:	681a      	ldr	r2, [r3, #0]
    61a0:	600a      	str	r2, [r1, #0]
			conn->pkt_tx_head->next = node_tx;
    61a2:	6019      	str	r1, [r3, #0]
			conn->pkt_tx_ctrl = node_tx;
    61a4:	f8c0 10f0 	str.w	r1, [r0, #240]	; 0xf0
	conn->pkt_tx_ctrl_last = node_tx;
    61a8:	f8c0 10f4 	str.w	r1, [r0, #244]	; 0xf4
	if (node_tx->next == 0) {
    61ac:	680b      	ldr	r3, [r1, #0]
    61ae:	b90b      	cbnz	r3, 61b4 <ctrl_tx_enqueue+0x40>
		conn->pkt_tx_last = node_tx;
    61b0:	f8c0 10fc 	str.w	r1, [r0, #252]	; 0xfc
    61b4:	bd10      	pop	{r4, pc}
		if (!conn->pkt_tx_ctrl) {
    61b6:	b92a      	cbnz	r2, 61c4 <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head;
    61b8:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
    61bc:	600b      	str	r3, [r1, #0]
			conn->pkt_tx_head = node_tx;
    61be:	f8c0 10ec 	str.w	r1, [r0, #236]	; 0xec
    61c2:	e7ef      	b.n	61a4 <ctrl_tx_enqueue+0x30>
	node_tx->next = conn->pkt_tx_ctrl_last->next;
    61c4:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
    61c8:	681a      	ldr	r2, [r3, #0]
    61ca:	600a      	str	r2, [r1, #0]
	conn->pkt_tx_ctrl_last->next = node_tx;
    61cc:	6019      	str	r1, [r3, #0]
    61ce:	e7eb      	b.n	61a8 <ctrl_tx_enqueue+0x34>

000061d0 <ctrl_tx_sec_enqueue>:
{
    61d0:	b410      	push	{r4}
	if (conn->pause_tx) {
    61d2:	f890 40a8 	ldrb.w	r4, [r0, #168]	; 0xa8
    61d6:	0724      	lsls	r4, r4, #28
{
    61d8:	460a      	mov	r2, r1
	if (conn->pause_tx) {
    61da:	d50f      	bpl.n	61fc <ctrl_tx_sec_enqueue+0x2c>
		if (!conn->pkt_tx_ctrl) {
    61dc:	f8d0 10f0 	ldr.w	r1, [r0, #240]	; 0xf0
    61e0:	b931      	cbnz	r1, 61f0 <ctrl_tx_sec_enqueue+0x20>
			node_tx->next = conn->pkt_tx_head;
    61e2:	f8d0 10ec 	ldr.w	r1, [r0, #236]	; 0xec
    61e6:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_head = node_tx;
    61e8:	f8c0 20ec 	str.w	r2, [r0, #236]	; 0xec
}
    61ec:	bc10      	pop	{r4}
    61ee:	4770      	bx	lr
			node_tx->next = conn->pkt_tx_ctrl_last->next;
    61f0:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
    61f4:	6819      	ldr	r1, [r3, #0]
    61f6:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_ctrl_last->next = node_tx;
    61f8:	601a      	str	r2, [r3, #0]
    61fa:	e7f7      	b.n	61ec <ctrl_tx_sec_enqueue+0x1c>
}
    61fc:	bc10      	pop	{r4}
		ctrl_tx_enqueue(conn, node_tx);
    61fe:	f7ff bfb9 	b.w	6174 <ctrl_tx_enqueue>
	...

00006204 <feature_rsp_send>:
{
    6204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    6206:	4f21      	ldr	r7, [pc, #132]	; (628c <feature_rsp_send+0x88>)
{
    6208:	4605      	mov	r5, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    620a:	f207 705c 	addw	r0, r7, #1884	; 0x75c
{
    620e:	460e      	mov	r6, r1
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    6210:	f7fc fcc9 	bl	2ba6 <mem_acquire>
	if (!node_tx) {
    6214:	4604      	mov	r4, r0
    6216:	b3b0      	cbz	r0, 6286 <feature_rsp_send+0x82>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    6218:	7933      	ldrb	r3, [r6, #4]
	       (features[1] << 8) | (features[2] << 16);
    621a:	7971      	ldrb	r1, [r6, #5]
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    621c:	f8d7 271c 	ldr.w	r2, [r7, #1820]	; 0x71c
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    6220:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    6224:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
    6228:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
    622c:	f043 0310 	orr.w	r3, r3, #16
    6230:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	       (features[1] << 8) | (features[2] << 16);
    6234:	79b1      	ldrb	r1, [r6, #6]
    6236:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    623a:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
    623e:	f3c1 0110 	ubfx	r1, r1, #0, #17
    6242:	400b      	ands	r3, r1
    6244:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	_radio.conn_curr->common.fex_valid = 1;
    6248:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
    624c:	f043 0320 	orr.w	r3, r3, #32
    6250:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    6254:	7903      	ldrb	r3, [r0, #4]
    6256:	f043 0303 	orr.w	r3, r3, #3
    625a:	7103      	strb	r3, [r0, #4]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    625c:	2208      	movs	r2, #8
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    625e:	2309      	movs	r3, #9
    6260:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    6262:	71c3      	strb	r3, [r0, #7]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    6264:	2100      	movs	r1, #0
    6266:	4410      	add	r0, r2
    6268:	f7fa f9f2 	bl	650 <memset>
		conn->llcp_features & 0xFF;
    626c:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
	pdu_ctrl_tx->llctrl.feature_req.features[0] =
    6270:	7223      	strb	r3, [r4, #8]
		(conn->llcp_features >> 8) & 0xFF;
    6272:	0a1a      	lsrs	r2, r3, #8
		(conn->llcp_features >> 16) & 0xFF;
    6274:	0c1b      	lsrs	r3, r3, #16
	ctrl_tx_sec_enqueue(conn, node_tx);
    6276:	4628      	mov	r0, r5
	pdu_ctrl_tx->llctrl.feature_req.features[1] =
    6278:	7262      	strb	r2, [r4, #9]
	pdu_ctrl_tx->llctrl.feature_req.features[2] =
    627a:	72a3      	strb	r3, [r4, #10]
	ctrl_tx_sec_enqueue(conn, node_tx);
    627c:	4621      	mov	r1, r4
    627e:	f7ff ffa7 	bl	61d0 <ctrl_tx_sec_enqueue>
	return 0;
    6282:	2000      	movs	r0, #0
    6284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
    6286:	2001      	movs	r0, #1
}
    6288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    628a:	bf00      	nop
    628c:	20000370 	.word	0x20000370

00006290 <event_connection_prepare>:
{
    6290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    6294:	4d6f      	ldr	r5, [pc, #444]	; (6454 <event_connection_prepare+0x1c4>)
{
    6296:	461c      	mov	r4, r3
	LL_ASSERT(!_radio.ticker_id_prepare);
    6298:	7c2b      	ldrb	r3, [r5, #16]
{
    629a:	b08f      	sub	sp, #60	; 0x3c
    629c:	4680      	mov	r8, r0
    629e:	4689      	mov	r9, r1
	LL_ASSERT(!_radio.ticker_id_prepare);
    62a0:	b12b      	cbz	r3, 62ae <event_connection_prepare+0x1e>
			LL_ASSERT(0);
    62a2:	4040      	eors	r0, r0
    62a4:	f380 8811 	msr	BASEPRI, r0
    62a8:	f04f 0004 	mov.w	r0, #4
    62ac:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_FIRST_CONNECTION +
    62ae:	f894 3020 	ldrb.w	r3, [r4, #32]
    62b2:	3307      	adds	r3, #7
    62b4:	b2db      	uxtb	r3, r3
    62b6:	742b      	strb	r3, [r5, #16]
	if (conn->role) {
    62b8:	f994 301d 	ldrsb.w	r3, [r4, #29]
    62bc:	2b00      	cmp	r3, #0
    62be:	da09      	bge.n	62d4 <event_connection_prepare+0x44>
		    conn->slave.window_widening_periodic_us * (lazy + 1);
    62c0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
		conn->slave.window_widening_prepare_us +=
    62c2:	6c61      	ldr	r1, [r4, #68]	; 0x44
		    conn->slave.window_widening_periodic_us * (lazy + 1);
    62c4:	fb02 3303 	mla	r3, r2, r3, r3
		conn->slave.window_widening_prepare_us +=
    62c8:	440b      	add	r3, r1
		    conn->slave.window_widening_max_us) {
    62ca:	6c21      	ldr	r1, [r4, #64]	; 0x40
		conn->slave.window_widening_prepare_us +=
    62cc:	6463      	str	r3, [r4, #68]	; 0x44
		if (conn->slave.window_widening_prepare_us >
    62ce:	428b      	cmp	r3, r1
			conn->slave.window_widening_prepare_us =
    62d0:	bf88      	it	hi
    62d2:	6461      	strhi	r1, [r4, #68]	; 0x44
	conn->latency_prepare += lazy;
    62d4:	8d26      	ldrh	r6, [r4, #40]	; 0x28
	if (conn->llcp_ack != conn->llcp_req) {
    62d6:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
	conn->latency_prepare += lazy;
    62da:	4432      	add	r2, r6
	event_counter = conn->event_counter + conn->latency_prepare;
    62dc:	8c66      	ldrh	r6, [r4, #34]	; 0x22
	conn->latency_prepare += lazy;
    62de:	b292      	uxth	r2, r2
    62e0:	8522      	strh	r2, [r4, #40]	; 0x28
	event_counter = conn->event_counter + conn->latency_prepare;
    62e2:	4432      	add	r2, r6
    62e4:	b296      	uxth	r6, r2
	if (conn->llcp_ack != conn->llcp_req) {
    62e6:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
    62ea:	429a      	cmp	r2, r3
    62ec:	d071      	beq.n	63d2 <event_connection_prepare+0x142>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    62ee:	2005      	movs	r0, #5
    62f0:	f7ff fbee 	bl	5ad0 <event_stop.constprop.50>
		switch (conn->llcp_type) {
    62f4:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
    62f8:	3b01      	subs	r3, #1
    62fa:	2b03      	cmp	r3, #3
    62fc:	d8d1      	bhi.n	62a2 <event_connection_prepare+0x12>
    62fe:	e8df f013 	tbh	[pc, r3, lsl #1]
    6302:	0004      	.short	0x0004
    6304:	02680226 	.word	0x02680226
    6308:	02b1      	.short	0x02b1
	if (!conn_upd) {
    630a:	f8d5 3788 	ldr.w	r3, [r5, #1928]	; 0x788
    630e:	b90b      	cbnz	r3, 6314 <event_connection_prepare+0x84>
		_radio.conn_upd = conn;
    6310:	f8c5 4788 	str.w	r4, [r5, #1928]	; 0x788
	if (conn->llcp.conn_upd.state != LLCP_CUI_STATE_INPROG) {
    6314:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
    6318:	f013 0303 	ands.w	r3, r3, #3
    631c:	f000 80a6 	beq.w	646c <event_connection_prepare+0x1dc>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    6320:	484d      	ldr	r0, [pc, #308]	; (6458 <event_connection_prepare+0x1c8>)
    6322:	f7fc fc40 	bl	2ba6 <mem_acquire>
		if (!node_tx) {
    6326:	4605      	mov	r5, r0
    6328:	2800      	cmp	r0, #0
    632a:	d052      	beq.n	63d2 <event_connection_prepare+0x142>
		switch (conn->llcp.conn_upd.state) {
    632c:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
    6330:	f003 0203 	and.w	r2, r3, #3
    6334:	2a01      	cmp	r2, #1
    6336:	d1b4      	bne.n	62a2 <event_connection_prepare+0x12>
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    6338:	f36f 0301 	bfc	r3, #0, #2
    633c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
		event_counter + conn->latency + 6;
    6340:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    6342:	3306      	adds	r3, #6
    6344:	4433      	add	r3, r6
    6346:	b29b      	uxth	r3, r3
	conn->llcp.conn_upd.instant =
    6348:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    634c:	7902      	ldrb	r2, [r0, #4]
    634e:	f042 0203 	orr.w	r2, r2, #3
    6352:	7102      	strb	r2, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    6354:	220c      	movs	r2, #12
    6356:	7142      	strb	r2, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    6358:	2200      	movs	r2, #0
    635a:	71c2      	strb	r2, [r0, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size =
    635c:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
    6360:	7202      	strb	r2, [r0, #8]
		win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    6362:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
    6364:	f240 41e2 	movw	r1, #1250	; 0x4e2
    6368:	fbb2 f2f1 	udiv	r2, r2, r1
    636c:	f8a0 2009 	strh.w	r2, [r0, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    6370:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
    6374:	f8a0 200b 	strh.w	r2, [r0, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    6378:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
    637c:	f8a0 200d 	strh.w	r2, [r0, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    6380:	f8b4 2066 	ldrh.w	r2, [r4, #102]	; 0x66
    6384:	f8a0 200f 	strh.w	r2, [r0, #15]
	pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    6388:	f8a0 3011 	strh.w	r3, [r0, #17]
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    638c:	6822      	ldr	r2, [r4, #0]
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
    638e:	f8c4 8078 	str.w	r8, [r4, #120]	; 0x78
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    6392:	2a00      	cmp	r2, #0
    6394:	da0a      	bge.n	63ac <event_connection_prepare+0x11c>
			u32_t ticks_prepare_to_start =
    6396:	68a3      	ldr	r3, [r4, #8]
    6398:	6861      	ldr	r1, [r4, #4]
				(conn->hdr.ticks_xtal_to_start &
    639a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
			conn->llcp.conn_upd.ticks_anchor -=
    639e:	428b      	cmp	r3, r1
    63a0:	bf2c      	ite	cs
    63a2:	4443      	addcs	r3, r8
    63a4:	eb08 0301 	addcc.w	r3, r8, r1
    63a8:	1a9b      	subs	r3, r3, r2
    63aa:	67a3      	str	r3, [r4, #120]	; 0x78
		conn->llcp.conn_upd.pdu_win_offset = (u16_t *)
    63ac:	f105 0309 	add.w	r3, r5, #9
    63b0:	6763      	str	r3, [r4, #116]	; 0x74
		mayfly_sched_offset->fp = fp_mayfly_select_or_use;
    63b2:	4b2a      	ldr	r3, [pc, #168]	; (645c <event_connection_prepare+0x1cc>)
    63b4:	4a2a      	ldr	r2, [pc, #168]	; (6460 <event_connection_prepare+0x1d0>)
    63b6:	60da      	str	r2, [r3, #12]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    63b8:	2201      	movs	r2, #1
    63ba:	4611      	mov	r1, r2
    63bc:	2000      	movs	r0, #0
		mayfly_sched_offset->param = (void *)conn;
    63be:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    63c0:	f7fc fcaa 	bl	2d18 <mayfly_enqueue>
		LL_ASSERT(!retval);
    63c4:	2800      	cmp	r0, #0
    63c6:	f47f af6c 	bne.w	62a2 <event_connection_prepare+0x12>
			ctrl_tx_enqueue(conn, node_tx);
    63ca:	4629      	mov	r1, r5
    63cc:	4620      	mov	r0, r4
    63ce:	f7ff fed1 	bl	6174 <ctrl_tx_enqueue>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
    63d2:	f894 2099 	ldrb.w	r2, [r4, #153]	; 0x99
    63d6:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
    63da:	429a      	cmp	r2, r3
    63dc:	d01d      	beq.n	641a <event_connection_prepare+0x18a>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    63de:	2005      	movs	r0, #5
    63e0:	f7ff fb76 	bl	5ad0 <event_stop.constprop.50>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    63e4:	481c      	ldr	r0, [pc, #112]	; (6458 <event_connection_prepare+0x1c8>)
    63e6:	f7fc fbde 	bl	2ba6 <mem_acquire>
		if (node_tx) {
    63ea:	4601      	mov	r1, r0
    63ec:	b1a8      	cbz	r0, 641a <event_connection_prepare+0x18a>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
    63ee:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
    63f2:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    63f6:	7903      	ldrb	r3, [r0, #4]
    63f8:	f043 0303 	orr.w	r3, r3, #3
    63fc:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    63fe:	2302      	movs	r3, #2
    6400:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    6402:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.terminate_ind.error_code =
    6404:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
    6408:	7203      	strb	r3, [r0, #8]
			ctrl_tx_enqueue(conn, node_tx);
    640a:	4620      	mov	r0, r4
    640c:	f7ff feb2 	bl	6174 <ctrl_tx_enqueue>
			conn->procedure_expire = conn->supervision_reload;
    6410:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
			if (conn->procedure_expire <= 1) {
    6412:	2b01      	cmp	r3, #1
				conn->procedure_expire++;
    6414:	bf98      	it	ls
    6416:	3301      	addls	r3, #1
    6418:	86a3      	strh	r3, [r4, #52]	; 0x34
	event_common_prepare(ticks_at_expire, remainder,
    641a:	f894 3020 	ldrb.w	r3, [r4, #32]
    641e:	f994 501d 	ldrsb.w	r5, [r4, #29]
    6422:	4810      	ldr	r0, [pc, #64]	; (6464 <event_connection_prepare+0x1d4>)
    6424:	4910      	ldr	r1, [pc, #64]	; (6468 <event_connection_prepare+0x1d8>)
    6426:	68a2      	ldr	r2, [r4, #8]
    6428:	9403      	str	r4, [sp, #12]
    642a:	3307      	adds	r3, #7
    642c:	ea11 0125 	ands.w	r1, r1, r5, asr #32
    6430:	bf38      	it	cc
    6432:	4601      	movcc	r1, r0
    6434:	b2db      	uxtb	r3, r3
    6436:	e88d 000c 	stmia.w	sp, {r2, r3}
    643a:	9102      	str	r1, [sp, #8]
    643c:	1d23      	adds	r3, r4, #4
    643e:	4622      	mov	r2, r4
    6440:	4649      	mov	r1, r9
    6442:	4640      	mov	r0, r8
	conn->event_counter = event_counter + 1;
    6444:	3601      	adds	r6, #1
	event_common_prepare(ticks_at_expire, remainder,
    6446:	f7ff fb51 	bl	5aec <event_common_prepare>
	conn->event_counter = event_counter + 1;
    644a:	8466      	strh	r6, [r4, #34]	; 0x22
}
    644c:	b00f      	add	sp, #60	; 0x3c
    644e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6452:	bf00      	nop
    6454:	20000370 	.word	0x20000370
    6458:	20000acc 	.word	0x20000acc
    645c:	20003880 	.word	0x20003880
    6460:	0000566d 	.word	0x0000566d
    6464:	00008349 	.word	0x00008349
    6468:	0000694d 	.word	0x0000694d
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    646c:	f8b4 7068 	ldrh.w	r7, [r4, #104]	; 0x68
    6470:	1bf7      	subs	r7, r6, r7
    6472:	b2bf      	uxth	r7, r7
	} else if (instant_latency <= 0x7FFF) {
    6474:	0438      	lsls	r0, r7, #16
    6476:	d4ac      	bmi.n	63d2 <event_connection_prepare+0x142>
		conn->llcp_ack = conn->llcp_req;
    6478:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
    647c:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
		if (_radio.conn_upd == conn) {
    6480:	f8d5 2788 	ldr.w	r2, [r5, #1928]	; 0x788
		_radio.ticker_id_prepare = 0;
    6484:	742b      	strb	r3, [r5, #16]
		if (_radio.conn_upd == conn) {
    6486:	4294      	cmp	r4, r2
			_radio.conn_upd = NULL;
    6488:	bf08      	it	eq
    648a:	f8c5 3788 	streq.w	r3, [r5, #1928]	; 0x788
		if ((conn->llcp.conn_upd.interval !=
    648e:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
    6492:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    6494:	429a      	cmp	r2, r3
    6496:	d114      	bne.n	64c2 <event_connection_prepare+0x232>
		     conn->conn_interval) ||
    6498:	f8b4 1064 	ldrh.w	r1, [r4, #100]	; 0x64
    649c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    649e:	4299      	cmp	r1, r3
    64a0:	d10f      	bne.n	64c2 <event_connection_prepare+0x232>
		    (RADIO_CONN_EVENTS(conn->llcp.conn_upd.timeout *
    64a2:	f240 43e2 	movw	r3, #1250	; 0x4e2
    64a6:	435a      	muls	r2, r3
    64a8:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    64ac:	f242 7110 	movw	r1, #10000	; 0x2710
    64b0:	fb01 2303 	mla	r3, r1, r3, r2
    64b4:	3b01      	subs	r3, #1
    64b6:	fb93 f3f2 	sdiv	r3, r3, r2
		    (conn->llcp.conn_upd.latency != conn->latency) ||
    64ba:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
    64bc:	b29b      	uxth	r3, r3
    64be:	429a      	cmp	r2, r3
    64c0:	d016      	beq.n	64f0 <event_connection_prepare+0x260>
			node_rx = packet_rx_reserve_get(2);
    64c2:	2002      	movs	r0, #2
    64c4:	f7fe fa30 	bl	4928 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    64c8:	2800      	cmp	r0, #0
    64ca:	f43f aeea 	beq.w	62a2 <event_connection_prepare+0x12>
			node_rx->hdr.handle = conn->handle;
    64ce:	8c23      	ldrh	r3, [r4, #32]
    64d0:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    64d2:	2308      	movs	r3, #8
    64d4:	7103      	strb	r3, [r0, #4]
			radio_le_conn_update_cmplt->status =
    64d6:	2300      	movs	r3, #0
    64d8:	72c3      	strb	r3, [r0, #11]
			radio_le_conn_update_cmplt->interval =
    64da:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
    64de:	8183      	strh	r3, [r0, #12]
			radio_le_conn_update_cmplt->latency =
    64e0:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
    64e4:	81c3      	strh	r3, [r0, #14]
			radio_le_conn_update_cmplt->timeout =
    64e6:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    64ea:	8203      	strh	r3, [r0, #16]
			packet_rx_enqueue();
    64ec:	f7ff f852 	bl	5594 <packet_rx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    64f0:	6823      	ldr	r3, [r4, #0]
    64f2:	6866      	ldr	r6, [r4, #4]
    64f4:	2b00      	cmp	r3, #0
    64f6:	da09      	bge.n	650c <event_connection_prepare+0x27c>
			u32_t ticks_prepare_to_start =
    64f8:	68a0      	ldr	r0, [r4, #8]
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    64fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    64fe:	42b0      	cmp	r0, r6
    6500:	bf2c      	ite	cs
    6502:	4480      	addcs	r8, r0
    6504:	44b0      	addcc	r8, r6
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    6506:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    6508:	eba8 0803 	sub.w	r8, r8, r3
		conn_interval_old = instant_latency * conn->conn_interval;
    650c:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
			conn->llcp.conn_upd.interval;
    650e:	f8b4 a062 	ldrh.w	sl, [r4, #98]	; 0x62
    6512:	49c9      	ldr	r1, [pc, #804]	; (6838 <event_connection_prepare+0x5a8>)
		conn_interval_old = instant_latency * conn->conn_interval;
    6514:	fb13 f307 	smulbb	r3, r3, r7
    6518:	b29b      	uxth	r3, r3
		latency = conn_interval_old /
    651a:	fbb3 f2fa 	udiv	r2, r3, sl
    651e:	fa1f f982 	uxth.w	r9, r2
		conn_interval_new = latency *
    6522:	fb1a f009 	smulbb	r0, sl, r9
    6526:	b280      	uxth	r0, r0
		if (conn_interval_new > conn_interval_old) {
    6528:	4283      	cmp	r3, r0
    652a:	f080 80f2 	bcs.w	6712 <event_connection_prepare+0x482>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    652e:	1ac0      	subs	r0, r0, r3
    6530:	f240 1223 	movw	r2, #291	; 0x123
    6534:	4342      	muls	r2, r0
    6536:	17c3      	asrs	r3, r0, #31
    6538:	fb01 2303 	mla	r3, r1, r3, r2
    653c:	fba0 0101 	umull	r0, r1, r0, r1
    6540:	4419      	add	r1, r3
    6542:	a3bb      	add	r3, pc, #748	; (adr r3, 6830 <event_connection_prepare+0x5a0>)
    6544:	e9d3 2300 	ldrd	r2, r3, [r3]
    6548:	f7f9 fe8e 	bl	268 <__aeabi_uldivmod>
    654c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    6550:	eb00 0308 	add.w	r3, r0, r8
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    6554:	930b      	str	r3, [sp, #44]	; 0x2c
		conn->latency_prepare -= (instant_latency - latency);
    6556:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    6558:	f8df b304 	ldr.w	fp, [pc, #772]	; 6860 <event_connection_prepare+0x5d0>
    655c:	1bdb      	subs	r3, r3, r7
    655e:	444b      	add	r3, r9
    6560:	8523      	strh	r3, [r4, #40]	; 0x28
		ticks_slot_offset =
    6562:	6823      	ldr	r3, [r4, #0]
    6564:	429e      	cmp	r6, r3
    6566:	bf38      	it	cc
    6568:	461e      	movcc	r6, r3
		if (conn->role) {
    656a:	f994 301d 	ldrsb.w	r3, [r4, #29]
		ticks_slot_offset =
    656e:	960d      	str	r6, [sp, #52]	; 0x34
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
    6570:	f240 48e2 	movw	r8, #1250	; 0x4e2
		if (conn->role) {
    6574:	2b00      	cmp	r3, #0
    6576:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    6578:	930c      	str	r3, [sp, #48]	; 0x30
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
    657a:	fb08 f60a 	mul.w	r6, r8, sl
		if (conn->role) {
    657e:	f280 80d9 	bge.w	6734 <event_connection_prepare+0x4a4>
				conn->slave.window_widening_periodic_us *
    6582:	6be3      	ldr	r3, [r4, #60]	; 0x3c
			conn->slave.window_widening_prepare_us -=
    6584:	6c62      	ldr	r2, [r4, #68]	; 0x44
    6586:	fb03 2717 	mls	r7, r3, r7, r2
				(((gc_lookup_ppm[_radio.sca] +
    658a:	f895 3728 	ldrb.w	r3, [r5, #1832]	; 0x728
    658e:	4aab      	ldr	r2, [pc, #684]	; (683c <event_connection_prepare+0x5ac>)
    6590:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
				   gc_lookup_ppm[conn->slave.sca]) *
    6594:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    6598:	f3c3 0382 	ubfx	r3, r3, #2, #3
    659c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				conn->llcp.conn_upd.win_size * 1250;
    65a0:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
				(((gc_lookup_ppm[_radio.sca] +
    65a4:	441d      	add	r5, r3
				   gc_lookup_ppm[conn->slave.sca]) *
    65a6:	4375      	muls	r5, r6
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    65a8:	f505 2574 	add.w	r5, r5, #999424	; 0xf4000
    65ac:	4ba4      	ldr	r3, [pc, #656]	; (6840 <event_connection_prepare+0x5b0>)
				conn->llcp.conn_upd.win_size * 1250;
    65ae:	fb08 f202 	mul.w	r2, r8, r2
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    65b2:	f205 253f 	addw	r5, r5, #575	; 0x23f
    65b6:	fbb5 f5f3 	udiv	r5, r5, r3
				(conn_interval_us >> 1) - RADIO_TIFS;
    65ba:	0873      	lsrs	r3, r6, #1
				conn->slave.window_widening_periodic_us *
    65bc:	fb05 f009 	mul.w	r0, r5, r9
				(conn_interval_us >> 1) - RADIO_TIFS;
    65c0:	3b96      	subs	r3, #150	; 0x96
			conn->slave.window_widening_prepare_us +=
    65c2:	4407      	add	r7, r0
			conn->slave.window_size_prepare_us =
    65c4:	64e2      	str	r2, [r4, #76]	; 0x4c
			conn->slave.ticks_to_offset = 0;
    65c6:	2200      	movs	r2, #0
			conn->slave.window_widening_prepare_us +=
    65c8:	429f      	cmp	r7, r3
    65ca:	bf94      	ite	ls
    65cc:	6467      	strls	r7, [r4, #68]	; 0x44
    65ce:	6463      	strhi	r3, [r4, #68]	; 0x44
			conn->slave.window_widening_periodic_us =
    65d0:	63e5      	str	r5, [r4, #60]	; 0x3c
			conn->slave.window_widening_max_us =
    65d2:	6423      	str	r3, [r4, #64]	; 0x40
			conn->slave.ticks_to_offset = 0;
    65d4:	65a2      	str	r2, [r4, #88]	; 0x58
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    65d6:	fba0 010b 	umull	r0, r1, r0, fp
    65da:	a395      	add	r3, pc, #596	; (adr r3, 6830 <event_connection_prepare+0x5a0>)
    65dc:	e9d3 2300 	ldrd	r2, r3, [r3]
    65e0:	f7f9 fe42 	bl	268 <__aeabi_uldivmod>
    65e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    65e6:	1a1b      	subs	r3, r3, r0
    65e8:	930b      	str	r3, [sp, #44]	; 0x2c
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    65ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    65ec:	fbb3 f0f8 	udiv	r0, r3, r8
    65f0:	fb08 f000 	mul.w	r0, r8, r0
    65f4:	a38e      	add	r3, pc, #568	; (adr r3, 6830 <event_connection_prepare+0x5a0>)
    65f6:	e9d3 2300 	ldrd	r2, r3, [r3]
    65fa:	fba0 010b 	umull	r0, r1, r0, fp
    65fe:	f7f9 fe33 	bl	268 <__aeabi_uldivmod>
			periodic_us -= conn->slave.window_widening_periodic_us;
    6602:	1b75      	subs	r5, r6, r5
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    6604:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
		conn->latency = conn->llcp.conn_upd.latency;
    6608:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
    660c:	84e3      	strh	r3, [r4, #38]	; 0x26
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    660e:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
		conn->conn_interval = conn->llcp.conn_upd.interval;
    6612:	f8a4 a024 	strh.w	sl, [r4, #36]	; 0x24
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    6616:	f242 7210 	movw	r2, #10000	; 0x2710
    661a:	fb02 6303 	mla	r3, r2, r3, r6
    661e:	3b01      	subs	r3, #1
    6620:	fbb3 f3f6 	udiv	r3, r3, r6
    6624:	85e3      	strh	r3, [r4, #46]	; 0x2e
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    6626:	4b87      	ldr	r3, [pc, #540]	; (6844 <event_connection_prepare+0x5b4>)
    6628:	4433      	add	r3, r6
    662a:	fbb3 f6f6 	udiv	r6, r3, r6
		if (!conn->llcp.conn_upd.is_internal) {
    662e:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    6632:	8666      	strh	r6, [r4, #50]	; 0x32
		if (!conn->llcp.conn_upd.is_internal) {
    6634:	f013 0304 	ands.w	r3, r3, #4
			conn->supervision_expire = 0;
    6638:	bf08      	it	eq
    663a:	8623      	strheq	r3, [r4, #48]	; 0x30
		mayfly_was_enabled =
    663c:	2101      	movs	r1, #1
    663e:	2000      	movs	r0, #0
    6640:	f003 f8de 	bl	9800 <mayfly_is_enabled>
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    6644:	2200      	movs	r2, #0
    6646:	2101      	movs	r1, #1
		mayfly_was_enabled =
    6648:	4681      	mov	r9, r0
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    664a:	4610      	mov	r0, r2
    664c:	f7fc fb3c 	bl	2cc8 <mayfly_enable>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    6650:	f894 2020 	ldrb.w	r2, [r4, #32]
		ticker_status =
    6654:	f641 63d9 	movw	r3, #7897	; 0x1ed9
    6658:	2100      	movs	r1, #0
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    665a:	3207      	adds	r2, #7
		ticker_status =
    665c:	9300      	str	r3, [sp, #0]
    665e:	b2d2      	uxtb	r2, r2
    6660:	4b79      	ldr	r3, [pc, #484]	; (6848 <event_connection_prepare+0x5b8>)
    6662:	4608      	mov	r0, r1
    6664:	f7fd f9a0 	bl	39a8 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    6668:	f030 0802 	bics.w	r8, r0, #2
    666c:	f47f ae19 	bne.w	62a2 <event_connection_prepare+0x12>
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    6670:	fba5 ab0b 	umull	sl, fp, r5, fp
    6674:	a36e      	add	r3, pc, #440	; (adr r3, 6830 <event_connection_prepare+0x5a0>)
    6676:	e9d3 2300 	ldrd	r2, r3, [r3]
    667a:	4650      	mov	r0, sl
    667c:	4659      	mov	r1, fp
    667e:	f7f9 fdf3 	bl	268 <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(periodic_us),
    6682:	4a72      	ldr	r2, [pc, #456]	; (684c <event_connection_prepare+0x5bc>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    6684:	f894 6020 	ldrb.w	r6, [r4, #32]
    6688:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
				     HAL_TICKER_REMAINDER(periodic_us),
    668c:	2307      	movs	r3, #7
    668e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    6692:	2100      	movs	r1, #0
    6694:	4343      	muls	r3, r0
    6696:	fb02 3301 	mla	r3, r2, r1, r3
    669a:	fba0 0102 	umull	r0, r1, r0, r2
    669e:	ebba 0000 	subs.w	r0, sl, r0
    66a2:	4419      	add	r1, r3
    66a4:	eb6b 0101 	sbc.w	r1, fp, r1
    66a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    66ac:	2300      	movs	r3, #0
    66ae:	f7f9 fddb 	bl	268 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    66b2:	68e3      	ldr	r3, [r4, #12]
    66b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    66b6:	f994 e01d 	ldrsb.w	lr, [r4, #29]
    66ba:	4965      	ldr	r1, [pc, #404]	; (6850 <event_connection_prepare+0x5c0>)
		ticker_status =
    66bc:	9002      	str	r0, [sp, #8]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    66be:	441a      	add	r2, r3
    66c0:	4613      	mov	r3, r2
    66c2:	4a64      	ldr	r2, [pc, #400]	; (6854 <event_connection_prepare+0x5c4>)
		ticker_status =
    66c4:	9304      	str	r3, [sp, #16]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    66c6:	ea12 022e 	ands.w	r2, r2, lr, asr #32
    66ca:	bf38      	it	cc
    66cc:	460a      	movcc	r2, r1
    66ce:	3607      	adds	r6, #7
		ticker_status =
    66d0:	f641 61e9 	movw	r1, #7913	; 0x1ee9
    66d4:	9108      	str	r1, [sp, #32]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    66d6:	b2f6      	uxtb	r6, r6
		ticker_status =
    66d8:	495b      	ldr	r1, [pc, #364]	; (6848 <event_connection_prepare+0x5b8>)
    66da:	9107      	str	r1, [sp, #28]
    66dc:	9205      	str	r2, [sp, #20]
    66de:	9406      	str	r4, [sp, #24]
    66e0:	f8cd 800c 	str.w	r8, [sp, #12]
    66e4:	9501      	str	r5, [sp, #4]
    66e6:	9700      	str	r7, [sp, #0]
    66e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    66ea:	4632      	mov	r2, r6
    66ec:	4641      	mov	r1, r8
    66ee:	4640      	mov	r0, r8
    66f0:	f7fd f8bc 	bl	386c <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    66f4:	f030 0002 	bics.w	r0, r0, #2
    66f8:	f47f add3 	bne.w	62a2 <event_connection_prepare+0x12>
		if (mayfly_was_enabled) {
    66fc:	f1b9 0f00 	cmp.w	r9, #0
    6700:	f43f aea4 	beq.w	644c <event_connection_prepare+0x1bc>
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    6704:	2201      	movs	r2, #1
    6706:	4611      	mov	r1, r2
}
    6708:	b00f      	add	sp, #60	; 0x3c
    670a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    670e:	f7fc badb 	b.w	2cc8 <mayfly_enable>
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    6712:	fb0a 3212 	mls	r2, sl, r2, r3
    6716:	b292      	uxth	r2, r2
    6718:	fba2 0101 	umull	r0, r1, r2, r1
    671c:	f240 1323 	movw	r3, #291	; 0x123
    6720:	fb03 1102 	mla	r1, r3, r2, r1
    6724:	a342      	add	r3, pc, #264	; (adr r3, 6830 <event_connection_prepare+0x5a0>)
    6726:	e9d3 2300 	ldrd	r2, r3, [r3]
    672a:	f7f9 fd9d 	bl	268 <__aeabi_uldivmod>
    672e:	eba8 0300 	sub.w	r3, r8, r0
    6732:	e70f      	b.n	6554 <event_connection_prepare+0x2c4>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    6734:	990c      	ldr	r1, [sp, #48]	; 0x30
    6736:	a33e      	add	r3, pc, #248	; (adr r3, 6830 <event_connection_prepare+0x5a0>)
    6738:	e9d3 2300 	ldrd	r2, r3, [r3]
    673c:	fba1 010b 	umull	r0, r1, r1, fp
    6740:	f7f9 fd92 	bl	268 <__aeabi_uldivmod>
    6744:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_win_offset += 1;
    6748:	1c47      	adds	r7, r0, #1
		periodic_us = conn_interval_us;
    674a:	4635      	mov	r5, r6
    674c:	e75c      	b.n	6608 <event_connection_prepare+0x378>
	if (conn->llcp.chan_map.initiate) {
    674e:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
    6752:	b30b      	cbz	r3, 6798 <event_connection_prepare+0x508>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    6754:	4840      	ldr	r0, [pc, #256]	; (6858 <event_connection_prepare+0x5c8>)
    6756:	f7fc fa26 	bl	2ba6 <mem_acquire>
		if (node_tx) {
    675a:	4605      	mov	r5, r0
    675c:	2800      	cmp	r0, #0
    675e:	f43f ae38 	beq.w	63d2 <event_connection_prepare+0x142>
			conn->llcp.chan_map.initiate = 0;
    6762:	2300      	movs	r3, #0
    6764:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
				event_counter + conn->latency + 6;
    6768:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    676a:	3306      	adds	r3, #6
    676c:	4433      	add	r3, r6
			conn->llcp.chan_map.instant =
    676e:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    6772:	7903      	ldrb	r3, [r0, #4]
    6774:	f043 0303 	orr.w	r3, r3, #3
    6778:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    677a:	2308      	movs	r3, #8
    677c:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    677e:	2301      	movs	r3, #1
    6780:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
    6782:	2205      	movs	r2, #5
    6784:	f104 0161 	add.w	r1, r4, #97	; 0x61
    6788:	3008      	adds	r0, #8
    678a:	f7f9 ff35 	bl	5f8 <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
    678e:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    6792:	f8a5 300d 	strh.w	r3, [r5, #13]
    6796:	e618      	b.n	63ca <event_connection_prepare+0x13a>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    6798:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    679c:	1af3      	subs	r3, r6, r3
    679e:	0419      	lsls	r1, r3, #16
    67a0:	f53f ae17 	bmi.w	63d2 <event_connection_prepare+0x142>
		conn->llcp_ack = conn->llcp_req;
    67a4:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    67a8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		memcpy(&conn->data_chan_map[0],
    67ac:	f104 0517 	add.w	r5, r4, #23
    67b0:	2205      	movs	r2, #5
    67b2:	f104 0161 	add.w	r1, r4, #97	; 0x61
    67b6:	4628      	mov	r0, r5
    67b8:	f7f9 ff1e 	bl	5f8 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    67bc:	2105      	movs	r1, #5
    67be:	4628      	mov	r0, r5
    67c0:	f7fc fb8a 	bl	2ed8 <util_ones_count_get>
		conn->data_chan_count =
    67c4:	7f63      	ldrb	r3, [r4, #29]
    67c6:	f360 0305 	bfi	r3, r0, #0, #6
    67ca:	7763      	strb	r3, [r4, #29]
		conn->chm_update = 1;
    67cc:	2301      	movs	r3, #1
    67ce:	7723      	strb	r3, [r4, #28]
    67d0:	e5ff      	b.n	63d2 <event_connection_prepare+0x142>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    67d2:	4821      	ldr	r0, [pc, #132]	; (6858 <event_connection_prepare+0x5c8>)
    67d4:	f7fc f9e7 	bl	2ba6 <mem_acquire>
	if (node_tx) {
    67d8:	4605      	mov	r5, r0
    67da:	2800      	cmp	r0, #0
    67dc:	f43f adf9 	beq.w	63d2 <event_connection_prepare+0x142>
		conn->llcp_ack = conn->llcp_req;
    67e0:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    67e4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		conn->llcp_features = RADIO_BLE_FEAT;
    67e8:	4b1c      	ldr	r3, [pc, #112]	; (685c <event_connection_prepare+0x5cc>)
    67ea:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    67ee:	7903      	ldrb	r3, [r0, #4]
    67f0:	f043 0303 	orr.w	r3, r3, #3
    67f4:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    67f6:	2309      	movs	r3, #9
    67f8:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode =
    67fa:	f994 301d 	ldrsb.w	r3, [r4, #29]
    67fe:	2b00      	cmp	r3, #0
    6800:	bfac      	ite	ge
    6802:	2308      	movge	r3, #8
    6804:	230e      	movlt	r3, #14
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
    6806:	2208      	movs	r2, #8
		pdu_ctrl_tx->llctrl.opcode =
    6808:	71c3      	strb	r3, [r0, #7]
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
    680a:	2100      	movs	r1, #0
    680c:	4410      	add	r0, r2
    680e:	f7f9 ff1f 	bl	650 <memset>
			conn->llcp_features & 0xFF;
    6812:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		pdu_ctrl_tx->llctrl.feature_req.features[0] =
    6816:	722b      	strb	r3, [r5, #8]
			(conn->llcp_features >> 8) & 0xFF;
    6818:	0a1a      	lsrs	r2, r3, #8
			(conn->llcp_features >> 16) & 0xFF;
    681a:	0c1b      	lsrs	r3, r3, #16
		pdu_ctrl_tx->llctrl.feature_req.features[1] =
    681c:	726a      	strb	r2, [r5, #9]
		pdu_ctrl_tx->llctrl.feature_req.features[2] =
    681e:	72ab      	strb	r3, [r5, #10]
		ctrl_tx_enqueue(conn, node_tx);
    6820:	4629      	mov	r1, r5
			ctrl_tx_enqueue(conn, node_tx);
    6822:	4620      	mov	r0, r4
    6824:	f7ff fca6 	bl	6174 <ctrl_tx_enqueue>
			conn->procedure_expire = conn->procedure_reload;
    6828:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    682a:	86a3      	strh	r3, [r4, #52]	; 0x34
    682c:	e5d1      	b.n	63d2 <event_connection_prepare+0x142>
    682e:	bf00      	nop
    6830:	1afd498d 	.word	0x1afd498d
    6834:	00000007 	.word	0x00000007
    6838:	09ce5400 	.word	0x09ce5400
    683c:	0000b558 	.word	0x0000b558
    6840:	000f4240 	.word	0x000f4240
    6844:	026259ff 	.word	0x026259ff
    6848:	00005a05 	.word	0x00005a05
    684c:	1afd498d 	.word	0x1afd498d
    6850:	00006909 	.word	0x00006909
    6854:	0000690d 	.word	0x0000690d
    6858:	20000acc 	.word	0x20000acc
    685c:	0001400c 	.word	0x0001400c
    6860:	3b9aca00 	.word	0x3b9aca00
	if (conn->llcp_version.tx == 0) {
    6864:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
    6868:	07da      	lsls	r2, r3, #31
    686a:	d424      	bmi.n	68b6 <event_connection_prepare+0x626>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    686c:	4825      	ldr	r0, [pc, #148]	; (6904 <event_connection_prepare+0x674>)
    686e:	f7fc f99a 	bl	2ba6 <mem_acquire>
		if (node_tx) {
    6872:	4601      	mov	r1, r0
    6874:	2800      	cmp	r0, #0
    6876:	f43f adac 	beq.w	63d2 <event_connection_prepare+0x142>
			conn->llcp_ack = conn->llcp_req;
    687a:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    687e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			conn->llcp_version.tx = 1;
    6882:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
    6886:	f043 0301 	orr.w	r3, r3, #1
    688a:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    688e:	7903      	ldrb	r3, [r0, #4]
    6890:	f043 0303 	orr.w	r3, r3, #3
    6894:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len =
    6896:	2306      	movs	r3, #6
    6898:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    689a:	230c      	movs	r3, #12
    689c:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.version_ind.version_number =
    689e:	2309      	movs	r3, #9
    68a0:	7203      	strb	r3, [r0, #8]
			pdu_ctrl_tx->llctrl.version_ind.company_id =
    68a2:	f06f 030e 	mvn.w	r3, #14
    68a6:	7243      	strb	r3, [r0, #9]
    68a8:	2305      	movs	r3, #5
    68aa:	7283      	strb	r3, [r0, #10]
			pdu_ctrl_tx->llctrl.version_ind.sub_version_number =
    68ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    68b0:	72c3      	strb	r3, [r0, #11]
    68b2:	7303      	strb	r3, [r0, #12]
    68b4:	e7b5      	b.n	6822 <event_connection_prepare+0x592>
	} else if (conn->llcp_version.rx != 0) {
    68b6:	079b      	lsls	r3, r3, #30
    68b8:	f57f acf3 	bpl.w	62a2 <event_connection_prepare+0x12>
		conn->llcp_ack = conn->llcp_req;
    68bc:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    68c0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		node_rx = packet_rx_reserve_get(2);
    68c4:	2002      	movs	r0, #2
    68c6:	f7fe f82f 	bl	4928 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    68ca:	2800      	cmp	r0, #0
    68cc:	f43f ace9 	beq.w	62a2 <event_connection_prepare+0x12>
		node_rx->hdr.handle = conn->handle;
    68d0:	8c23      	ldrh	r3, [r4, #32]
    68d2:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    68d4:	2301      	movs	r3, #1
    68d6:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    68d8:	7a03      	ldrb	r3, [r0, #8]
    68da:	f043 0303 	orr.w	r3, r3, #3
    68de:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len =
    68e0:	2306      	movs	r3, #6
    68e2:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode =
    68e4:	230c      	movs	r3, #12
    68e6:	72c3      	strb	r3, [r0, #11]
		pdu_ctrl_rx->llctrl.version_ind.version_number =
    68e8:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
    68ec:	7303      	strb	r3, [r0, #12]
		pdu_ctrl_rx->llctrl.version_ind.company_id =
    68ee:	f8b4 3092 	ldrh.w	r3, [r4, #146]	; 0x92
    68f2:	f8a0 300d 	strh.w	r3, [r0, #13]
		pdu_ctrl_rx->llctrl.version_ind.sub_version_number =
    68f6:	f8b4 3094 	ldrh.w	r3, [r4, #148]	; 0x94
    68fa:	f8a0 300f 	strh.w	r3, [r0, #15]
		packet_rx_enqueue();
    68fe:	f7fe fe49 	bl	5594 <packet_rx_enqueue>
    6902:	e566      	b.n	63d2 <event_connection_prepare+0x142>
    6904:	20000acc 	.word	0x20000acc

00006908 <event_master_prepare>:
	event_connection_prepare(ticks_at_expire, remainder, lazy, context);
    6908:	f7ff bcc2 	b.w	6290 <event_connection_prepare>

0000690c <event_slave_prepare>:
    690c:	f7ff bcc0 	b.w	6290 <event_connection_prepare>

00006910 <connection_configure>:
{
    6910:	b510      	push	{r4, lr}
    6912:	4604      	mov	r4, r0
	radio_reset();
    6914:	f002 fc1e 	bl	9154 <radio_reset>
	radio_tx_power_set(0);
    6918:	2000      	movs	r0, #0
    691a:	f002 fc45 	bl	91a8 <radio_tx_power_set>
	radio_isr_set(isr);
    691e:	480a      	ldr	r0, [pc, #40]	; (6948 <connection_configure+0x38>)
    6920:	f002 fbe2 	bl	90e8 <radio_isr_set>
	radio_aa_set(conn->access_addr);
    6924:	f104 0010 	add.w	r0, r4, #16
    6928:	f002 fc5c 	bl	91e4 <radio_aa_set>
			     ((u32_t)conn->crc_init[1] << 8) |
    692c:	7d63      	ldrb	r3, [r4, #21]
			    (((u32_t)conn->crc_init[2] << 16) |
    692e:	7da1      	ldrb	r1, [r4, #22]
			     ((u32_t)conn->crc_init[1] << 8) |
    6930:	021b      	lsls	r3, r3, #8
			    (((u32_t)conn->crc_init[2] << 16) |
    6932:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			     ((u32_t)conn->crc_init[0])));
    6936:	7d21      	ldrb	r1, [r4, #20]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    6938:	f240 605b 	movw	r0, #1627	; 0x65b
    693c:	4319      	orrs	r1, r3
}
    693e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    6942:	f002 bcf7 	b.w	9334 <radio_crc_configure>
    6946:	bf00      	nop
    6948:	00006b91 	.word	0x00006b91

0000694c <event_slave>:
{
    694c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6950:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    6952:	4b5a      	ldr	r3, [pc, #360]	; (6abc <event_slave+0x170>)
    6954:	7cda      	ldrb	r2, [r3, #19]
{
    6956:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    6958:	f002 06ff 	and.w	r6, r2, #255	; 0xff
    695c:	461d      	mov	r5, r3
    695e:	b12a      	cbz	r2, 696c <event_slave+0x20>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    6960:	4040      	eors	r0, r0
    6962:	f380 8811 	msr	BASEPRI, r0
    6966:	f04f 0004 	mov.w	r0, #4
    696a:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare ==
    696c:	7c1a      	ldrb	r2, [r3, #16]
    696e:	8c23      	ldrh	r3, [r4, #32]
    6970:	b2d2      	uxtb	r2, r2
    6972:	3307      	adds	r3, #7
    6974:	429a      	cmp	r2, r3
    6976:	d1f3      	bne.n	6960 <event_slave+0x14>
	_radio.role = ROLE_SLAVE;
    6978:	2303      	movs	r3, #3
    697a:	74eb      	strb	r3, [r5, #19]
	_radio.packet_counter = 0;
    697c:	f885 6720 	strb.w	r6, [r5, #1824]	; 0x720
	_radio.crc_expire = 0;
    6980:	f885 6721 	strb.w	r6, [r5, #1825]	; 0x721
	_radio.state = STATE_RX;
    6984:	2301      	movs	r3, #1
    6986:	752b      	strb	r3, [r5, #20]
	conn->latency_event = conn->latency_prepare;
    6988:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
    698a:	f8c5 471c 	str.w	r4, [r5, #1820]	; 0x71c
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    698e:	b2d2      	uxtb	r2, r2
	conn->latency_event = conn->latency_prepare;
    6990:	8563      	strh	r3, [r4, #42]	; 0x2a
	_radio.ticks_anchor = ticks_at_expire;
    6992:	60a8      	str	r0, [r5, #8]
	conn->latency_prepare = 0;
    6994:	8526      	strh	r6, [r4, #40]	; 0x28
	connection_configure(conn);
    6996:	4620      	mov	r0, r4
	_radio.ticker_id_prepare = 0;
    6998:	742e      	strb	r6, [r5, #16]
	_radio.ticker_id_event =
    699a:	746a      	strb	r2, [r5, #17]
	connection_configure(conn);
    699c:	f7ff ffb8 	bl	6910 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
    69a0:	2096      	movs	r0, #150	; 0x96
    69a2:	f002 fd75 	bl	9490 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
    69a6:	4633      	mov	r3, r6
    69a8:	4632      	mov	r2, r6
    69aa:	4631      	mov	r1, r6
    69ac:	4630      	mov	r0, r6
    69ae:	f002 fceb 	bl	9388 <radio_switch_complete_and_tx>
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    69b2:	f895 2741 	ldrb.w	r2, [r5, #1857]	; 0x741
    69b6:	f8d5 373c 	ldr.w	r3, [r5, #1852]	; 0x73c
    69ba:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
	rx_packet_set(conn, (void *)
    69be:	4620      	mov	r0, r4
    69c0:	3108      	adds	r1, #8
    69c2:	f7fe fcb7 	bl	5334 <rx_packet_set>
	if (conn->data_chan_sel) {
    69c6:	7f63      	ldrb	r3, [r4, #29]
    69c8:	f013 0f40 	tst.w	r3, #64	; 0x40
    69cc:	f104 0217 	add.w	r2, r4, #23
    69d0:	d04a      	beq.n	6a68 <event_slave+0x11c>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    69d2:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    69d4:	8be1      	ldrh	r1, [r4, #30]
    69d6:	3801      	subs	r0, #1
    69d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    69dc:	b280      	uxth	r0, r0
    69de:	f7ff fa45 	bl	5e6c <chan_sel_2>
	chan_set(data_chan_use);
    69e2:	f7fe f94b 	bl	4c7c <chan_set>
	conn->slave.window_widening_event_us +=
    69e6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    69e8:	6c62      	ldr	r2, [r4, #68]	; 0x44
    69ea:	4413      	add	r3, r2
	conn->slave.window_widening_prepare_us = 0;
    69ec:	2200      	movs	r2, #0
    69ee:	6462      	str	r2, [r4, #68]	; 0x44
	    conn->slave.window_widening_max_us) {
    69f0:	6c22      	ldr	r2, [r4, #64]	; 0x40
	conn->slave.window_widening_event_us +=
    69f2:	64a3      	str	r3, [r4, #72]	; 0x48
	if (conn->slave.window_widening_event_us >
    69f4:	4293      	cmp	r3, r2
		conn->slave.window_widening_event_us =
    69f6:	bf88      	it	hi
    69f8:	64a2      	strhi	r2, [r4, #72]	; 0x48
	conn->slave.window_size_event_us +=
    69fa:	6d23      	ldr	r3, [r4, #80]	; 0x50
    69fc:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
	conn->slave.window_size_prepare_us = 0;
    69fe:	2600      	movs	r6, #0
	conn->slave.window_size_event_us +=
    6a00:	4413      	add	r3, r2
    6a02:	6523      	str	r3, [r4, #80]	; 0x50
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    6a04:	68ea      	ldr	r2, [r5, #12]
	conn->slave.window_size_prepare_us = 0;
    6a06:	64e6      	str	r6, [r4, #76]	; 0x4c
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    6a08:	f107 0109 	add.w	r1, r7, #9
    6a0c:	4630      	mov	r0, r6
    6a0e:	f002 fd4b 	bl	94a8 <radio_tmr_start>
    6a12:	4680      	mov	r8, r0
	radio_tmr_aa_capture();
    6a14:	f002 fde4 	bl	95e0 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
    6a18:	4630      	mov	r0, r6
    6a1a:	f002 fe03 	bl	9624 <radio_tmr_aa_save>
    6a1e:	6d23      	ldr	r3, [r4, #80]	; 0x50
	       (conn->slave.window_widening_event_us << 1) +
    6a20:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    6a22:	3378      	adds	r3, #120	; 0x78
	hcto += radio_rx_ready_delay_get(0, 0);
    6a24:	4631      	mov	r1, r6
    6a26:	4630      	mov	r0, r6
    6a28:	eb03 0942 	add.w	r9, r3, r2, lsl #1
    6a2c:	f002 fc33 	bl	9296 <radio_rx_ready_delay_get>
	hcto += addr_us_get(0);
    6a30:	44c8      	add	r8, r9
	hcto += radio_rx_chain_delay_get(0, 0);
    6a32:	4631      	mov	r1, r6
	hcto += addr_us_get(0);
    6a34:	4480      	add	r8, r0
	hcto += radio_rx_chain_delay_get(0, 0);
    6a36:	4630      	mov	r0, r6
    6a38:	f002 fc2f 	bl	929a <radio_rx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
    6a3c:	4440      	add	r0, r8
    6a3e:	f002 fdb1 	bl	95a4 <radio_tmr_hcto_configure>
	if (preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    6a42:	f894 1020 	ldrb.w	r1, [r4, #32]
    6a46:	3107      	adds	r1, #7
    6a48:	463a      	mov	r2, r7
    6a4a:	b2c9      	uxtb	r1, r1
    6a4c:	4620      	mov	r0, r4
    6a4e:	f7ff fa51 	bl	5ef4 <preempt_calc>
    6a52:	4603      	mov	r3, r0
    6a54:	b340      	cbz	r0, 6aa8 <event_slave+0x15c>
		_radio.state = STATE_STOP;
    6a56:	2304      	movs	r3, #4
    6a58:	752b      	strb	r3, [r5, #20]
		radio_disable();
    6a5a:	f002 fc2f 	bl	92bc <radio_disable>
	packet_tx_enqueue(2);
    6a5e:	2002      	movs	r0, #2
}
    6a60:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	packet_tx_enqueue(2);
    6a64:	f7fe be4c 	b.w	5700 <packet_tx_enqueue>
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    6a68:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    6a6a:	7fa6      	ldrb	r6, [r4, #30]
    6a6c:	fb01 6606 	mla	r6, r1, r6, r6
    6a70:	7fe1      	ldrb	r1, [r4, #31]
    6a72:	2025      	movs	r0, #37	; 0x25
    6a74:	440e      	add	r6, r1
    6a76:	fb96 f1f0 	sdiv	r1, r6, r0
    6a7a:	fb00 6611 	mls	r6, r0, r1, r6
    6a7e:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    6a80:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
    6a82:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    6a84:	5c51      	ldrb	r1, [r2, r1]
    6a86:	f006 0607 	and.w	r6, r6, #7
    6a8a:	fa41 f606 	asr.w	r6, r1, r6
    6a8e:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
    6a90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    6a94:	d4a5      	bmi.n	69e2 <event_slave+0x96>
		chan_index = chan_next % chan_count;
    6a96:	fbb0 f1f3 	udiv	r1, r0, r3
    6a9a:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
    6a9e:	b2c9      	uxtb	r1, r1
    6aa0:	4610      	mov	r0, r2
    6aa2:	f7fd ff25 	bl	48f0 <chan_sel_remap>
    6aa6:	e79c      	b.n	69e2 <event_slave+0x96>
		ticker_status =
    6aa8:	4a05      	ldr	r2, [pc, #20]	; (6ac0 <event_slave+0x174>)
    6aaa:	4601      	mov	r1, r0
    6aac:	f7fc fffa 	bl	3aa4 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    6ab0:	f030 0302 	bics.w	r3, r0, #2
    6ab4:	f47f af54 	bne.w	6960 <event_slave+0x14>
    6ab8:	e7d1      	b.n	6a5e <event_slave+0x112>
    6aba:	bf00      	nop
    6abc:	20000370 	.word	0x20000370
    6ac0:	000052a9 	.word	0x000052a9

00006ac4 <prepare_pdu_data_tx>:
{
    6ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	    conn->empty ||
    6ac6:	f890 30a8 	ldrb.w	r3, [r0, #168]	; 0xa8
	if (/* empty packet */
    6aca:	061a      	lsls	r2, r3, #24
{
    6acc:	4604      	mov	r4, r0
    6ace:	460f      	mov	r7, r1
	if (/* empty packet */
    6ad0:	d409      	bmi.n	6ae6 <prepare_pdu_data_tx+0x22>
	    !conn->pkt_tx_head ||
    6ad2:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
	    conn->empty ||
    6ad6:	b135      	cbz	r5, 6ae6 <prepare_pdu_data_tx+0x22>
	    !conn->pkt_tx_head ||
    6ad8:	f013 0f08 	tst.w	r3, #8
    6adc:	f8d0 e0f0 	ldr.w	lr, [r0, #240]	; 0xf0
    6ae0:	d022      	beq.n	6b28 <prepare_pdu_data_tx+0x64>
	    (conn->pause_tx && (conn->pkt_tx_head != conn->pkt_tx_ctrl))) {
    6ae2:	4575      	cmp	r5, lr
    6ae4:	d020      	beq.n	6b28 <prepare_pdu_data_tx+0x64>
	conn->empty = 1;
    6ae6:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    6aea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    6aee:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
	pdu_data_tx = (void *)radio_pkt_empty_get();
    6af2:	f002 fc35 	bl	9360 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    6af6:	7803      	ldrb	r3, [r0, #0]
    6af8:	2201      	movs	r2, #1
    6afa:	f362 0301 	bfi	r3, r2, #0, #2
	pdu_data_tx->len = 0;
    6afe:	2200      	movs	r2, #0
    6b00:	7042      	strb	r2, [r0, #1]
	if (conn->pkt_tx_head) {
    6b02:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    6b06:	7003      	strb	r3, [r0, #0]
    6b08:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
    6b0a:	b152      	cbz	r2, 6b22 <prepare_pdu_data_tx+0x5e>
		pdu_data_tx->md = 1;
    6b0c:	f043 0310 	orr.w	r3, r3, #16
		pdu_data_tx->md = 0;
    6b10:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->rfu = 0;
    6b12:	7803      	ldrb	r3, [r0, #0]
    6b14:	f36f 1347 	bfc	r3, #5, #3
    6b18:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->resv = 0;
    6b1a:	2300      	movs	r3, #0
    6b1c:	7083      	strb	r3, [r0, #2]
	*pdu_data_tx = _pdu_data_tx;
    6b1e:	6038      	str	r0, [r7, #0]
    6b20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pdu_data_tx->md = 0;
    6b22:	f362 1304 	bfi	r3, r2, #4, #1
    6b26:	e7f3      	b.n	6b10 <prepare_pdu_data_tx+0x4c>
					conn->packet_tx_head_offset);
    6b28:	f894 3101 	ldrb.w	r3, [r4, #257]	; 0x101
		if (!conn->packet_tx_head_len) {
    6b2c:	f894 1100 	ldrb.w	r1, [r4, #256]	; 0x100
		_pdu_data_tx = (void *)(conn->pkt_tx_head->pdu_data +
    6b30:	1d2a      	adds	r2, r5, #4
    6b32:	18d0      	adds	r0, r2, r3
		if (!conn->packet_tx_head_len) {
    6b34:	b911      	cbnz	r1, 6b3c <prepare_pdu_data_tx+0x78>
			conn->packet_tx_head_len = _pdu_data_tx->len;
    6b36:	7841      	ldrb	r1, [r0, #1]
    6b38:	f884 1100 	strb.w	r1, [r4, #256]	; 0x100
		if (conn->packet_tx_head_offset) {
    6b3c:	b123      	cbz	r3, 6b48 <prepare_pdu_data_tx+0x84>
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    6b3e:	5cd1      	ldrb	r1, [r2, r3]
    6b40:	2601      	movs	r6, #1
    6b42:	f366 0101 	bfi	r1, r6, #0, #2
    6b46:	54d1      	strb	r1, [r2, r3]
		_pdu_data_tx->len = conn->packet_tx_head_len -
    6b48:	f894 6100 	ldrb.w	r6, [r4, #256]	; 0x100
    6b4c:	1af6      	subs	r6, r6, r3
    6b4e:	b2f6      	uxtb	r6, r6
    6b50:	7046      	strb	r6, [r0, #1]
		_pdu_data_tx->md = 0;
    6b52:	5cd1      	ldrb	r1, [r2, r3]
		if (_pdu_data_tx->len > max_tx_octets) {
    6b54:	2e1b      	cmp	r6, #27
		_pdu_data_tx->md = 0;
    6b56:	f36f 1104 	bfc	r1, #4, #1
    6b5a:	54d1      	strb	r1, [r2, r3]
		if (_pdu_data_tx->len > max_tx_octets) {
    6b5c:	d905      	bls.n	6b6a <prepare_pdu_data_tx+0xa6>
			_pdu_data_tx->len = max_tx_octets;
    6b5e:	211b      	movs	r1, #27
    6b60:	7041      	strb	r1, [r0, #1]
			_pdu_data_tx->md = 1;
    6b62:	5cd1      	ldrb	r1, [r2, r3]
    6b64:	f041 0110 	orr.w	r1, r1, #16
    6b68:	54d1      	strb	r1, [r2, r3]
		if (conn->pkt_tx_head->next) {
    6b6a:	6829      	ldr	r1, [r5, #0]
    6b6c:	b119      	cbz	r1, 6b76 <prepare_pdu_data_tx+0xb2>
			_pdu_data_tx->md = 1;
    6b6e:	5cd1      	ldrb	r1, [r2, r3]
    6b70:	f041 0110 	orr.w	r1, r1, #16
    6b74:	54d1      	strb	r1, [r2, r3]
		if (!conn->pkt_tx_ctrl &&
    6b76:	f1be 0f00 	cmp.w	lr, #0
    6b7a:	d1ca      	bne.n	6b12 <prepare_pdu_data_tx+0x4e>
    6b7c:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
    6b80:	429d      	cmp	r5, r3
			conn->pkt_tx_ctrl = conn->pkt_tx_ctrl_last =
    6b82:	bf1c      	itt	ne
    6b84:	f8c4 50f4 	strne.w	r5, [r4, #244]	; 0xf4
    6b88:	f8c4 50f0 	strne.w	r5, [r4, #240]	; 0xf0
    6b8c:	e7c1      	b.n	6b12 <prepare_pdu_data_tx+0x4e>
	...

00006b90 <isr>:
{
    6b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6b94:	b08f      	sub	sp, #60	; 0x3c
	trx_done = radio_is_done();
    6b96:	f002 fbb9 	bl	930c <radio_is_done>
    6b9a:	b2c6      	uxtb	r6, r0
	if (trx_done) {
    6b9c:	b336      	cbz	r6, 6bec <isr+0x5c>
		crc_ok = radio_crc_is_valid();
    6b9e:	f002 fbd5 	bl	934c <radio_crc_is_valid>
    6ba2:	b2c7      	uxtb	r7, r0
		devmatch_ok = radio_filter_has_match();
    6ba4:	f002 fc56 	bl	9454 <radio_filter_has_match>
    6ba8:	b2c4      	uxtb	r4, r0
		devmatch_id = radio_filter_match_get();
    6baa:	f002 fc5d 	bl	9468 <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
    6bae:	f002 fe05 	bl	97bc <radio_ar_has_match>
		irkmatch_id = radio_ar_match_get();
    6bb2:	f002 fdf1 	bl	9798 <radio_ar_match_get>
		rssi_ready = radio_rssi_is_ready();
    6bb6:	f002 fc17 	bl	93e8 <radio_rssi_is_ready>
    6bba:	b2c5      	uxtb	r5, r0
	radio_status_reset();
    6bbc:	f002 fb90 	bl	92e0 <radio_status_reset>
	radio_tmr_status_reset();
    6bc0:	f002 fc58 	bl	9474 <radio_tmr_status_reset>
	radio_filter_status_reset();
    6bc4:	f002 fc3e 	bl	9444 <radio_filter_status_reset>
	radio_ar_status_reset();
    6bc8:	f002 fdec 	bl	97a4 <radio_ar_status_reset>
	radio_rssi_status_reset();
    6bcc:	f002 fc04 	bl	93d8 <radio_rssi_status_reset>
	switch (_radio.state) {
    6bd0:	4a6e      	ldr	r2, [pc, #440]	; (6d8c <isr+0x1fc>)
    6bd2:	7d13      	ldrb	r3, [r2, #20]
    6bd4:	4693      	mov	fp, r2
    6bd6:	2b05      	cmp	r3, #5
    6bd8:	f201 82b4 	bhi.w	8144 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x144>
    6bdc:	e8df f013 	tbh	[pc, r3, lsl #1]
    6be0:	00880060 	.word	0x00880060
    6be4:	0941000a 	.word	0x0941000a
    6be8:	09410941 	.word	0x09410941
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0;
    6bec:	4635      	mov	r5, r6
    6bee:	4634      	mov	r4, r6
    6bf0:	4637      	mov	r7, r6
    6bf2:	e7e3      	b.n	6bbc <isr+0x2c>
	_radio.state = STATE_RX;
    6bf4:	2301      	movs	r3, #1
    6bf6:	f88b 3014 	strb.w	r3, [fp, #20]
	hcto = radio_tmr_tifs_base_get()
    6bfa:	f002 fd3d 	bl	9678 <radio_tmr_tifs_base_get>
    6bfe:	4604      	mov	r4, r0
	radio_tmr_tifs_set(RADIO_TIFS);
    6c00:	2096      	movs	r0, #150	; 0x96
    6c02:	f002 fc45 	bl	9490 <radio_tmr_tifs_set>
	switch (_radio.role) {
    6c06:	f89b 3013 	ldrb.w	r3, [fp, #19]
    6c0a:	3b01      	subs	r3, #1
    6c0c:	34c3      	adds	r4, #195	; 0xc3
    6c0e:	2b03      	cmp	r3, #3
    6c10:	d811      	bhi.n	6c36 <isr+0xa6>
    6c12:	e8df f003 	tbb	[pc, r3]
    6c16:	2402      	.short	0x2402
    6c18:	4848      	.short	0x4848
		radio_switch_complete_and_tx(0, 0, 0, 0);
    6c1a:	2300      	movs	r3, #0
    6c1c:	461a      	mov	r2, r3
    6c1e:	4619      	mov	r1, r3
    6c20:	4618      	mov	r0, r3
    6c22:	f002 fbb1 	bl	9388 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(radio_pkt_scratch_get());
    6c26:	f002 fb9f 	bl	9368 <radio_pkt_scratch_get>
    6c2a:	f002 fb21 	bl	9270 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    6c2e:	f002 fb63 	bl	92f8 <radio_is_ready>
    6c32:	4605      	mov	r5, r0
    6c34:	b128      	cbz	r0, 6c42 <isr+0xb2>
	LL_ASSERT(!retval);
    6c36:	4040      	eors	r0, r0
    6c38:	f380 8811 	msr	BASEPRI, r0
    6c3c:	f04f 0004 	mov.w	r0, #4
    6c40:	df02      	svc	2
		hcto += radio_rx_chain_delay_get(0, 0);
    6c42:	4601      	mov	r1, r0
    6c44:	f002 fb29 	bl	929a <radio_rx_chain_delay_get>
		hcto -= radio_tx_chain_delay_get(0, 0);
    6c48:	4629      	mov	r1, r5
		hcto += addr_us_get(0);
    6c4a:	4404      	add	r4, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    6c4c:	4628      	mov	r0, r5
    6c4e:	f002 fb20 	bl	9292 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    6c52:	1a20      	subs	r0, r4, r0
    6c54:	f002 fca6 	bl	95a4 <radio_tmr_hcto_configure>
		radio_tmr_end_capture();
    6c58:	f002 fcf6 	bl	9648 <radio_tmr_end_capture>
    6c5c:	e020      	b.n	6ca0 <isr+0x110>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    6c5e:	2300      	movs	r3, #0
    6c60:	4619      	mov	r1, r3
    6c62:	461a      	mov	r2, r3
    6c64:	4618      	mov	r0, r3
    6c66:	f002 fb8f 	bl	9388 <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
    6c6a:	f89b 2741 	ldrb.w	r2, [fp, #1857]	; 0x741
    6c6e:	f8db 373c 	ldr.w	r3, [fp, #1852]	; 0x73c
		radio_pkt_rx_set(_radio.packet_rx
    6c72:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    6c76:	3008      	adds	r0, #8
    6c78:	f002 fafa 	bl	9270 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    6c7c:	f002 fb3c 	bl	92f8 <radio_is_ready>
    6c80:	4605      	mov	r5, r0
    6c82:	2800      	cmp	r0, #0
    6c84:	d1d7      	bne.n	6c36 <isr+0xa6>
		hcto += radio_rx_chain_delay_get(0, 0);
    6c86:	4601      	mov	r1, r0
    6c88:	f002 fb07 	bl	929a <radio_rx_chain_delay_get>
		hcto -= radio_tx_chain_delay_get(0, 0);
    6c8c:	4629      	mov	r1, r5
		hcto += addr_us_get(0);
    6c8e:	4404      	add	r4, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    6c90:	4628      	mov	r0, r5
    6c92:	f002 fafe 	bl	9292 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    6c96:	1a20      	subs	r0, r4, r0
    6c98:	f002 fc84 	bl	95a4 <radio_tmr_hcto_configure>
		radio_rssi_measure();
    6c9c:	f002 fb8c 	bl	93b8 <radio_rssi_measure>
}
    6ca0:	b00f      	add	sp, #60	; 0x3c
    6ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		radio_switch_complete_and_tx(0, 0, 0, 0);
    6ca6:	2300      	movs	r3, #0
    6ca8:	461a      	mov	r2, r3
    6caa:	4619      	mov	r1, r3
    6cac:	4618      	mov	r0, r3
    6cae:	f002 fb6b 	bl	9388 <radio_switch_complete_and_tx>
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    6cb2:	f89b 2741 	ldrb.w	r2, [fp, #1857]	; 0x741
    6cb6:	f8db 373c 	ldr.w	r3, [fp, #1852]	; 0x73c
		rx_packet_set(_radio.conn_curr,	(void *)
    6cba:	f8db 071c 	ldr.w	r0, [fp, #1820]	; 0x71c
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    6cbe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		rx_packet_set(_radio.conn_curr,	(void *)
    6cc2:	3108      	adds	r1, #8
    6cc4:	f7fe fb36 	bl	5334 <rx_packet_set>
		LL_ASSERT(!radio_is_ready());
    6cc8:	f002 fb16 	bl	92f8 <radio_is_ready>
    6ccc:	4605      	mov	r5, r0
    6cce:	2800      	cmp	r0, #0
    6cd0:	d1b1      	bne.n	6c36 <isr+0xa6>
		hcto += radio_rx_chain_delay_get(0, 0);
    6cd2:	4601      	mov	r1, r0
    6cd4:	f002 fae1 	bl	929a <radio_rx_chain_delay_get>
		hcto -= radio_tx_chain_delay_get(0, 0);
    6cd8:	4629      	mov	r1, r5
		hcto += addr_us_get(0);
    6cda:	4404      	add	r4, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    6cdc:	4628      	mov	r0, r5
    6cde:	f002 fad8 	bl	9292 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    6ce2:	1a20      	subs	r0, r4, r0
    6ce4:	f002 fc5e 	bl	95a4 <radio_tmr_hcto_configure>
		packet_tx_enqueue(1);
    6ce8:	2001      	movs	r0, #1
    6cea:	f7fe fd09 	bl	5700 <packet_tx_enqueue>
    6cee:	e7d7      	b.n	6ca0 <isr+0x110>
	if (!((trx_done) || ((SILENT_CONNECTION) &&
    6cf0:	b92e      	cbnz	r6, 6cfe <isr+0x16e>
		_radio.state = STATE_CLOSE;
    6cf2:	2303      	movs	r3, #3
    6cf4:	f88b 3014 	strb.w	r3, [fp, #20]
		radio_disable();
    6cf8:	f002 fae0 	bl	92bc <radio_disable>
    6cfc:	e7d0      	b.n	6ca0 <isr+0x110>
	switch (_radio.role) {
    6cfe:	f89b 3013 	ldrb.w	r3, [fp, #19]
    6d02:	3b01      	subs	r3, #1
    6d04:	2b03      	cmp	r3, #3
    6d06:	d896      	bhi.n	6c36 <isr+0xa6>
    6d08:	e8df f013 	tbh	[pc, r3, lsl #1]
    6d0c:	020a0004 	.word	0x020a0004
    6d10:	04ee04ee 	.word	0x04ee04ee
		if (crc_ok) {
    6d14:	2f00      	cmp	r7, #0
    6d16:	d0ec      	beq.n	6cf2 <isr+0x162>
	pdu_adv = (void *)radio_pkt_scratch_get();
    6d18:	f002 fb26 	bl	9368 <radio_pkt_scratch_get>
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    6d1c:	f89b 922d 	ldrb.w	r9, [fp, #557]	; 0x22d
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    6d20:	7802      	ldrb	r2, [r0, #0]
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    6d22:	eb09 2909 	add.w	r9, r9, r9, lsl #8
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    6d26:	f002 030f 	and.w	r3, r2, #15
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    6d2a:	f109 092b 	add.w	r9, r9, #43	; 0x2b
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    6d2e:	2b03      	cmp	r3, #3
	pdu_adv = (void *)radio_pkt_scratch_get();
    6d30:	4607      	mov	r7, r0
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    6d32:	eb0b 0509 	add.w	r5, fp, r9
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    6d36:	d12b      	bne.n	6d90 <isr+0x200>
    6d38:	7843      	ldrb	r3, [r0, #1]
    6d3a:	2b0c      	cmp	r3, #12
    6d3c:	d128      	bne.n	6d90 <isr+0x200>
	return (((_radio.advertiser.filter_policy & 0x01) == 0) ||
    6d3e:	f89b 302a 	ldrb.w	r3, [fp, #42]	; 0x2a
		(devmatch_ok)) &&
    6d42:	07db      	lsls	r3, r3, #31
    6d44:	d500      	bpl.n	6d48 <isr+0x1b8>
	return (((_radio.advertiser.filter_policy & 0x01) == 0) ||
    6d46:	b31c      	cbz	r4, 6d90 <isr+0x200>
	return (adv->tx_addr == sr->rx_addr) &&
    6d48:	f81b 3009 	ldrb.w	r3, [fp, r9]
    6d4c:	f3c3 1380 	ubfx	r3, r3, #6, #1
    6d50:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    6d54:	d11c      	bne.n	6d90 <isr+0x200>
		!memcmp(adv->adv_ind.addr, sr->scan_req.adv_addr, BDADDR_SIZE);
    6d56:	2206      	movs	r2, #6
    6d58:	f107 0108 	add.w	r1, r7, #8
    6d5c:	1ca8      	adds	r0, r5, #2
    6d5e:	f7f9 fc36 	bl	5ce <memcmp>
	    (pdu_adv->len == sizeof(struct pdu_adv_scan_req)) &&
    6d62:	b9a8      	cbnz	r0, 6d90 <isr+0x200>
		_radio.state = STATE_CLOSE;
    6d64:	2303      	movs	r3, #3
    6d66:	f88b 3014 	strb.w	r3, [fp, #20]
		radio_switch_complete_and_disable();
    6d6a:	f002 fb17 	bl	939c <radio_switch_complete_and_disable>
		radio_pkt_tx_set(&_radio.advertiser.scan_data.data
    6d6e:	f89b 0635 	ldrb.w	r0, [fp, #1589]	; 0x635
    6d72:	eb00 2000 	add.w	r0, r0, r0, lsl #8
    6d76:	f200 4033 	addw	r0, r0, #1075	; 0x433
    6d7a:	4458      	add	r0, fp
    6d7c:	f002 fa7e 	bl	927c <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    6d80:	f002 faba 	bl	92f8 <radio_is_ready>
    6d84:	2800      	cmp	r0, #0
    6d86:	d08b      	beq.n	6ca0 <isr+0x110>
    6d88:	e755      	b.n	6c36 <isr+0xa6>
    6d8a:	bf00      	nop
    6d8c:	20000370 	.word	0x20000370
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
    6d90:	783b      	ldrb	r3, [r7, #0]
    6d92:	f003 030f 	and.w	r3, r3, #15
    6d96:	2b05      	cmp	r3, #5
    6d98:	d1ab      	bne.n	6cf2 <isr+0x162>
    6d9a:	787b      	ldrb	r3, [r7, #1]
    6d9c:	2b22      	cmp	r3, #34	; 0x22
    6d9e:	d1a8      	bne.n	6cf2 <isr+0x162>
	if (adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    6da0:	f81b 3009 	ldrb.w	r3, [fp, r9]
    6da4:	f003 030f 	and.w	r3, r3, #15
    6da8:	2b01      	cmp	r3, #1
    6daa:	f040 8193 	bne.w	70d4 <isr+0x544>
		       isr_adv_ci_adva_check(adv, ci) &&
    6dae:	4639      	mov	r1, r7
    6db0:	4628      	mov	r0, r5
    6db2:	f7fe fa3b 	bl	522c <isr_adv_ci_adva_check>
    6db6:	b188      	cbz	r0, 6ddc <isr+0x24c>
	return (adv->rx_addr == ci->tx_addr) &&
    6db8:	783b      	ldrb	r3, [r7, #0]
    6dba:	f81b 2009 	ldrb.w	r2, [fp, r9]
    6dbe:	f3c3 1380 	ubfx	r3, r3, #6, #1
    6dc2:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    6dc6:	f040 8183 	bne.w	70d0 <isr+0x540>
	       !memcmp(adv->direct_ind.tgt_addr, ci->connect_ind.init_addr,
    6dca:	2206      	movs	r2, #6
    6dcc:	1cb9      	adds	r1, r7, #2
    6dce:	f105 0008 	add.w	r0, r5, #8
    6dd2:	f7f9 fbfc 	bl	5ce <memcmp>
	return (adv->rx_addr == ci->tx_addr) &&
    6dd6:	fab0 f080 	clz	r0, r0
    6dda:	0940      	lsrs	r0, r0, #5
		   (pdu_adv->len == sizeof(struct pdu_adv_connect_ind)) &&
    6ddc:	2800      	cmp	r0, #0
    6dde:	d088      	beq.n	6cf2 <isr+0x162>
		   isr_adv_ci_check(_pdu_adv, pdu_adv, devmatch_ok, &rl_idx) &&
    6de0:	f89b 3782 	ldrb.w	r3, [fp, #1922]	; 0x782
    6de4:	b133      	cbz	r3, 6df4 <isr+0x264>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
    6de6:	f89b 3780 	ldrb.w	r3, [fp, #1920]	; 0x780
    6dea:	f89b 2781 	ldrb.w	r2, [fp, #1921]	; 0x781
    6dee:	429a      	cmp	r2, r3
    6df0:	f47f af7f 	bne.w	6cf2 <isr+0x162>
    6df4:	f8db 3638 	ldr.w	r3, [fp, #1592]	; 0x638
    6df8:	2b00      	cmp	r3, #0
    6dfa:	f43f af7a 	beq.w	6cf2 <isr+0x162>
			node_rx = packet_rx_reserve_get(4);
    6dfe:	2004      	movs	r0, #4
    6e00:	f7fd fd92 	bl	4928 <packet_rx_reserve_get>
		if (!node_rx) {
    6e04:	4605      	mov	r5, r0
    6e06:	2800      	cmp	r0, #0
    6e08:	f43f af73 	beq.w	6cf2 <isr+0x162>
		_radio.state = STATE_STOP;
    6e0c:	f04f 0a04 	mov.w	sl, #4
    6e10:	f88b a014 	strb.w	sl, [fp, #20]
		radio_disable();
    6e14:	f002 fa52 	bl	92bc <radio_disable>
		conn = _radio.advertiser.conn;
    6e18:	f8db 4638 	ldr.w	r4, [fp, #1592]	; 0x638
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    6e1c:	f8db 1710 	ldr.w	r1, [fp, #1808]	; 0x710
		_radio.advertiser.conn = NULL;
    6e20:	f04f 0800 	mov.w	r8, #0
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    6e24:	f44f 7282 	mov.w	r2, #260	; 0x104
    6e28:	4620      	mov	r0, r4
		_radio.advertiser.conn = NULL;
    6e2a:	f8cb 8638 	str.w	r8, [fp, #1592]	; 0x638
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    6e2e:	f7fb feec 	bl	2c0a <mem_index_get>
		memcpy(&conn->crc_init[0],
    6e32:	2203      	movs	r2, #3
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    6e34:	8420      	strh	r0, [r4, #32]
		memcpy(&conn->crc_init[0],
    6e36:	f107 0112 	add.w	r1, r7, #18
    6e3a:	f104 0014 	add.w	r0, r4, #20
    6e3e:	f7f9 fbdb 	bl	5f8 <memcpy>
		memcpy(&conn->access_addr[0],
    6e42:	f104 0310 	add.w	r3, r4, #16
    6e46:	4618      	mov	r0, r3
		memcpy(&conn->data_chan_map[0],
    6e48:	f104 0617 	add.w	r6, r4, #23
		memcpy(&conn->access_addr[0],
    6e4c:	4652      	mov	r2, sl
    6e4e:	f107 010e 	add.w	r1, r7, #14
    6e52:	930a      	str	r3, [sp, #40]	; 0x28
    6e54:	f7f9 fbd0 	bl	5f8 <memcpy>
		memcpy(&conn->data_chan_map[0],
    6e58:	2205      	movs	r2, #5
    6e5a:	f107 011e 	add.w	r1, r7, #30
    6e5e:	4630      	mov	r0, r6
    6e60:	f7f9 fbca 	bl	5f8 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    6e64:	2105      	movs	r1, #5
    6e66:	4630      	mov	r0, r6
    6e68:	f7fc f836 	bl	2ed8 <util_ones_count_get>
		conn->data_chan_count =
    6e6c:	7f62      	ldrb	r2, [r4, #29]
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    6e6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		conn->data_chan_count =
    6e70:	f360 0205 	bfi	r2, r0, #0, #6
    6e74:	7762      	strb	r2, [r4, #29]
		conn->data_chan_hop = pdu_adv->connect_ind.hop;
    6e76:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    6e7a:	f3c2 0204 	ubfx	r2, r2, #0, #5
    6e7e:	77a2      	strb	r2, [r4, #30]
			pdu_adv->connect_ind.interval;
    6e80:	8b3a      	ldrh	r2, [r7, #24]
		conn->conn_interval =
    6e82:	84a2      	strh	r2, [r4, #36]	; 0x24
			pdu_adv->connect_ind.interval * 1250;
    6e84:	f240 46e2 	movw	r6, #1250	; 0x4e2
    6e88:	4356      	muls	r6, r2
		conn->latency = pdu_adv->connect_ind.latency;
    6e8a:	7ef9      	ldrb	r1, [r7, #27]
    6e8c:	7eba      	ldrb	r2, [r7, #26]
    6e8e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    6e92:	84e2      	strh	r2, [r4, #38]	; 0x26
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    6e94:	4619      	mov	r1, r3
    6e96:	4652      	mov	r2, sl
    6e98:	f104 0054 	add.w	r0, r4, #84	; 0x54
    6e9c:	f7f9 fbac 	bl	5f8 <memcpy>
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
    6ea0:	8bbb      	ldrh	r3, [r7, #28]
    6ea2:	f242 7210 	movw	r2, #10000	; 0x2710
    6ea6:	fb02 6303 	mla	r3, r2, r3, r6
    6eaa:	3b01      	subs	r3, #1
    6eac:	fbb3 f3f6 	udiv	r3, r3, r6
    6eb0:	85e3      	strh	r3, [r4, #46]	; 0x2e
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
    6eb2:	4b93      	ldr	r3, [pc, #588]	; (7100 <isr+0x570>)
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    6eb4:	4639      	mov	r1, r7
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
    6eb6:	4433      	add	r3, r6
    6eb8:	fbb3 f3f6 	udiv	r3, r3, r6
    6ebc:	8663      	strh	r3, [r4, #50]	; 0x32
		node_rx->hdr.handle = conn->handle;
    6ebe:	8c23      	ldrh	r3, [r4, #32]
		radio_le_conn_cmplt->status = 0x00;
    6ec0:	f885 800b 	strb.w	r8, [r5, #11]
		radio_le_conn_cmplt->role = 0x01;
    6ec4:	f04f 0801 	mov.w	r8, #1
    6ec8:	f885 800c 	strb.w	r8, [r5, #12]
		node_rx->hdr.handle = conn->handle;
    6ecc:	80eb      	strh	r3, [r5, #6]
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    6ece:	f811 3b02 	ldrb.w	r3, [r1], #2
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    6ed2:	2206      	movs	r2, #6
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    6ed4:	f3c3 1380 	ubfx	r3, r3, #6, #1
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    6ed8:	712a      	strb	r2, [r5, #4]
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    6eda:	736b      	strb	r3, [r5, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    6edc:	f105 000e 	add.w	r0, r5, #14
    6ee0:	f7f9 fb8a 	bl	5f8 <memcpy>
			pdu_adv->connect_ind.interval;
    6ee4:	8b3b      	ldrh	r3, [r7, #24]
		radio_le_conn_cmplt->interval =
    6ee6:	82ab      	strh	r3, [r5, #20]
			pdu_adv->connect_ind.latency;
    6ee8:	8b7b      	ldrh	r3, [r7, #26]
		radio_le_conn_cmplt->latency =
    6eea:	82eb      	strh	r3, [r5, #22]
			pdu_adv->connect_ind.timeout;
    6eec:	8bbb      	ldrh	r3, [r7, #28]
		radio_le_conn_cmplt->timeout =
    6eee:	832b      	strh	r3, [r5, #24]
			pdu_adv->connect_ind.sca;
    6ef0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    6ef4:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
    6ef8:	76ab      	strb	r3, [r5, #26]
		rx_fc_lock(conn->handle);
    6efa:	8c20      	ldrh	r0, [r4, #32]
    6efc:	f7fe f9ba 	bl	5274 <rx_fc_lock>
		packet_rx_enqueue();
    6f00:	f7fe fb48 	bl	5594 <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
    6f04:	2003      	movs	r0, #3
    6f06:	f7fd fd0f 	bl	4928 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    6f0a:	2800      	cmp	r0, #0
    6f0c:	f43f ae93 	beq.w	6c36 <isr+0xa6>
			node_rx->hdr.handle = conn->handle;
    6f10:	8c23      	ldrh	r3, [r4, #32]
    6f12:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    6f14:	230a      	movs	r3, #10
    6f16:	7103      	strb	r3, [r0, #4]
			if (pdu_adv->chan_sel) {
    6f18:	783b      	ldrb	r3, [r7, #0]
    6f1a:	f013 0320 	ands.w	r3, r3, #32
    6f1e:	f000 80e7 	beq.w	70f0 <isr+0x560>
					((u16_t)conn->access_addr[1] << 8) |
    6f22:	7c62      	ldrb	r2, [r4, #17]
					conn->access_addr[0];
    6f24:	7c23      	ldrb	r3, [r4, #16]
					((u16_t)conn->access_addr[3] << 8) |
    6f26:	7ce1      	ldrb	r1, [r4, #19]
				u16_t aa_ls =
    6f28:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
    6f2c:	7ca2      	ldrb	r2, [r4, #18]
				u16_t aa_ms =
    6f2e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
    6f32:	7f61      	ldrb	r1, [r4, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    6f34:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
    6f36:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    6f3a:	7761      	strb	r1, [r4, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    6f3c:	83e3      	strh	r3, [r4, #30]
				le_chan_sel_algo->chan_sel_algo = 0x01;
    6f3e:	f880 800b 	strb.w	r8, [r0, #11]
			packet_rx_enqueue();
    6f42:	f7fe fb27 	bl	5594 <packet_rx_enqueue>
		conn->slave.sca = pdu_adv->connect_ind.sca;
    6f46:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    6f4a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
			(((gc_lookup_ppm[_radio.sca] +
    6f4e:	496d      	ldr	r1, [pc, #436]	; (7104 <isr+0x574>)
		conn->slave.sca = pdu_adv->connect_ind.sca;
    6f50:	0952      	lsrs	r2, r2, #5
    6f52:	f362 0384 	bfi	r3, r2, #2, #3
    6f56:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
			(((gc_lookup_ppm[_radio.sca] +
    6f5a:	f89b 3728 	ldrb.w	r3, [fp, #1832]	; 0x728
			   gc_lookup_ppm[conn->slave.sca]) *
    6f5e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
			(((gc_lookup_ppm[_radio.sca] +
    6f62:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    6f66:	4413      	add	r3, r2
			   gc_lookup_ppm[conn->slave.sca]) *
    6f68:	4373      	muls	r3, r6
			  conn_interval_us) + (1000000 - 1)) / 1000000;
    6f6a:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
    6f6e:	4a66      	ldr	r2, [pc, #408]	; (7108 <isr+0x578>)
    6f70:	f203 233f 	addw	r3, r3, #575	; 0x23f
    6f74:	fbb3 f3f2 	udiv	r3, r3, r2
		conn->slave.window_widening_periodic_us =
    6f78:	63e3      	str	r3, [r4, #60]	; 0x3c
			(conn_interval_us >> 1) - RADIO_TIFS;
    6f7a:	0873      	lsrs	r3, r6, #1
    6f7c:	3b96      	subs	r3, #150	; 0x96
		conn->slave.window_widening_max_us =
    6f7e:	6423      	str	r3, [r4, #64]	; 0x40
			pdu_adv->connect_ind.win_size * 1250;
    6f80:	7d7b      	ldrb	r3, [r7, #21]
    6f82:	f240 4ae2 	movw	sl, #1250	; 0x4e2
		conn->slave.window_size_prepare_us = 0;
    6f86:	f04f 0800 	mov.w	r8, #0
			pdu_adv->connect_ind.win_size * 1250;
    6f8a:	fb0a f303 	mul.w	r3, sl, r3
		conn->slave.window_size_event_us =
    6f8e:	6523      	str	r3, [r4, #80]	; 0x50
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    6f90:	4641      	mov	r1, r8
		conn->slave.window_size_prepare_us = 0;
    6f92:	f8c4 804c 	str.w	r8, [r4, #76]	; 0x4c
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    6f96:	4640      	mov	r0, r8
    6f98:	f002 f97d 	bl	9296 <radio_rx_ready_delay_get>
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    6f9c:	495b      	ldr	r1, [pc, #364]	; (710c <isr+0x57c>)
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    6f9e:	900a      	str	r0, [sp, #40]	; 0x28
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    6fa0:	f200 4052 	addw	r0, r0, #1106	; 0x452
    6fa4:	a354      	add	r3, pc, #336	; (adr r3, 70f8 <isr+0x568>)
    6fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
    6faa:	fba0 0101 	umull	r0, r1, r0, r1
    6fae:	f7f9 f95b 	bl	268 <__aeabi_uldivmod>
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    6fb2:	f8db 5784 	ldr.w	r5, [fp, #1924]	; 0x784
    6fb6:	6065      	str	r5, [r4, #4]
		conn->hdr.ticks_xtal_to_start =
    6fb8:	2327      	movs	r3, #39	; 0x27
		ticks_slot_offset =
    6fba:	429d      	cmp	r5, r3
    6fbc:	bf38      	it	cc
    6fbe:	461d      	movcc	r5, r3
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    6fc0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		conn->hdr.ticks_xtal_to_start =
    6fc4:	6023      	str	r3, [r4, #0]
		conn_interval_us -=
    6fc6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
		conn->hdr.ticks_slot =
    6fc8:	60e0      	str	r0, [r4, #12]
		conn->hdr.ticks_preempt_to_start =
    6fca:	f8c4 8008 	str.w	r8, [r4, #8]
		conn_interval_us -=
    6fce:	1af6      	subs	r6, r6, r3
		conn_offset_us = radio_tmr_end_get();
    6fd0:	f002 fb4c 	bl	966c <radio_tmr_end_get>
    6fd4:	900b      	str	r0, [sp, #44]	; 0x2c
			((u64_t)pdu_adv->connect_ind.win_offset +
    6fd6:	8af8      	ldrh	r0, [r7, #22]
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    6fd8:	4641      	mov	r1, r8
		conn_offset_us +=
    6fda:	fb00 aa0a 	mla	sl, r0, sl, sl
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    6fde:	4640      	mov	r0, r8
    6fe0:	f002 f957 	bl	9292 <radio_tx_chain_delay_get>
    6fe4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6fe6:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
    6fea:	449a      	add	sl, r3
		conn_offset_us -= RADIO_TICKER_JITTER_US;
    6fec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6fee:	ebaa 0a00 	sub.w	sl, sl, r0
    6ff2:	ebaa 0303 	sub.w	r3, sl, r3
    6ff6:	930a      	str	r3, [sp, #40]	; 0x28
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    6ff8:	f240 5325 	movw	r3, #1317	; 0x525
    6ffc:	9300      	str	r3, [sp, #0]
    6ffe:	2205      	movs	r2, #5
    7000:	4b43      	ldr	r3, [pc, #268]	; (7110 <isr+0x580>)
    7002:	f8df a108 	ldr.w	sl, [pc, #264]	; 710c <isr+0x57c>
    7006:	4641      	mov	r1, r8
    7008:	4640      	mov	r0, r8
    700a:	f7fc fccd 	bl	39a8 <ticker_stop>
		ticker_stop_adv_assert(ticker_status, (void *)__LINE__);
    700e:	f240 5126 	movw	r1, #1318	; 0x526
    7012:	f7fe fcdf 	bl	59d4 <ticker_stop_adv_assert>
		if (_pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    7016:	f81b 3009 	ldrb.w	r3, [fp, r9]
    701a:	f003 030f 	and.w	r3, r3, #15
    701e:	2b01      	cmp	r3, #1
    7020:	d107      	bne.n	7032 <isr+0x4a2>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    7022:	f8cd 8000 	str.w	r8, [sp]
    7026:	4643      	mov	r3, r8
    7028:	2203      	movs	r2, #3
    702a:	4641      	mov	r1, r8
    702c:	4640      	mov	r0, r8
    702e:	f7fc fcbb 	bl	39a8 <ticker_stop>
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    7032:	fba6 670a 	umull	r6, r7, r6, sl
    7036:	a330      	add	r3, pc, #192	; (adr r3, 70f8 <isr+0x568>)
    7038:	e9d3 2300 	ldrd	r2, r3, [r3]
    703c:	4630      	mov	r0, r6
    703e:	4639      	mov	r1, r7
    7040:	f7f9 f912 	bl	268 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7044:	f8db 3008 	ldr.w	r3, [fp, #8]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    7048:	4a32      	ldr	r2, [pc, #200]	; (7114 <isr+0x584>)
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    704a:	eba3 0b05 	sub.w	fp, r3, r5
    704e:	f894 3020 	ldrb.w	r3, [r4, #32]
    7052:	9406      	str	r4, [sp, #24]
    7054:	3307      	adds	r3, #7
    7056:	b2db      	uxtb	r3, r3
    7058:	930b      	str	r3, [sp, #44]	; 0x2c
    705a:	f240 533d 	movw	r3, #1341	; 0x53d
    705e:	9308      	str	r3, [sp, #32]
    7060:	4b2d      	ldr	r3, [pc, #180]	; (7118 <isr+0x588>)
    7062:	9307      	str	r3, [sp, #28]
    7064:	4b2d      	ldr	r3, [pc, #180]	; (711c <isr+0x58c>)
    7066:	9305      	str	r3, [sp, #20]
    7068:	68e3      	ldr	r3, [r4, #12]
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    706a:	4680      	mov	r8, r0
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    706c:	441d      	add	r5, r3
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    706e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    7072:	2307      	movs	r3, #7
    7074:	2100      	movs	r1, #0
    7076:	4343      	muls	r3, r0
    7078:	fb02 3301 	mla	r3, r2, r1, r3
    707c:	fba0 0102 	umull	r0, r1, r0, r2
    7080:	1a30      	subs	r0, r6, r0
    7082:	4419      	add	r1, r3
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7084:	f04f 0400 	mov.w	r4, #0
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    7088:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    708c:	f04f 0300 	mov.w	r3, #0
    7090:	eb67 0101 	sbc.w	r1, r7, r1
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7094:	9504      	str	r5, [sp, #16]
    7096:	9403      	str	r4, [sp, #12]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    7098:	f7f9 f8e6 	bl	268 <__aeabi_uldivmod>
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    709c:	990a      	ldr	r1, [sp, #40]	; 0x28
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    709e:	9002      	str	r0, [sp, #8]
    70a0:	f028 437f 	bic.w	r3, r8, #4278190080	; 0xff000000
    70a4:	9301      	str	r3, [sp, #4]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    70a6:	fba1 010a 	umull	r0, r1, r1, sl
    70aa:	a313      	add	r3, pc, #76	; (adr r3, 70f8 <isr+0x568>)
    70ac:	e9d3 2300 	ldrd	r2, r3, [r3]
    70b0:	f7f9 f8da 	bl	268 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    70b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    70b6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    70ba:	9000      	str	r0, [sp, #0]
    70bc:	465b      	mov	r3, fp
    70be:	4621      	mov	r1, r4
		ticker_status =
    70c0:	4608      	mov	r0, r1
    70c2:	f7fc fbd3 	bl	386c <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    70c6:	f030 0302 	bics.w	r3, r0, #2
    70ca:	f47f adb4 	bne.w	6c36 <isr+0xa6>
    70ce:	e5e7      	b.n	6ca0 <isr+0x110>
	return (adv->rx_addr == ci->tx_addr) &&
    70d0:	2000      	movs	r0, #0
    70d2:	e683      	b.n	6ddc <isr+0x24c>
	return (((_radio.advertiser.filter_policy & 0x02) == 0) ||
    70d4:	f89b 302a 	ldrb.w	r3, [fp, #42]	; 0x2a
		(devmatch_ok)) &&
    70d8:	079e      	lsls	r6, r3, #30
    70da:	d500      	bpl.n	70de <isr+0x54e>
	return (((_radio.advertiser.filter_policy & 0x02) == 0) ||
    70dc:	b134      	cbz	r4, 70ec <isr+0x55c>
	       isr_adv_ci_adva_check(adv, ci);
    70de:	4639      	mov	r1, r7
    70e0:	4628      	mov	r0, r5
    70e2:	f7fe f8a3 	bl	522c <isr_adv_ci_adva_check>
		(devmatch_ok)) &&
    70e6:	f000 0001 	and.w	r0, r0, #1
    70ea:	e677      	b.n	6ddc <isr+0x24c>
    70ec:	4620      	mov	r0, r4
    70ee:	e7fa      	b.n	70e6 <isr+0x556>
				le_chan_sel_algo->chan_sel_algo = 0x00;
    70f0:	72c3      	strb	r3, [r0, #11]
    70f2:	e726      	b.n	6f42 <isr+0x3b2>
    70f4:	f3af 8000 	nop.w
    70f8:	1afd498d 	.word	0x1afd498d
    70fc:	00000007 	.word	0x00000007
    7100:	026259ff 	.word	0x026259ff
    7104:	0000b558 	.word	0x0000b558
    7108:	000f4240 	.word	0x000f4240
    710c:	3b9aca00 	.word	0x3b9aca00
    7110:	000059d5 	.word	0x000059d5
    7114:	1afd498d 	.word	0x1afd498d
    7118:	00005a05 	.word	0x00005a05
    711c:	0000690d 	.word	0x0000690d
		if (crc_ok &&
    7120:	2f00      	cmp	r7, #0
    7122:	f000 829d 	beq.w	7660 <isr+0xad0>
	return ((_radio.scanner.filter_policy & 0x01) == 0) ||
    7126:	f89b 364d 	ldrb.w	r3, [fp, #1613]	; 0x64d
    712a:	06d8      	lsls	r0, r3, #27
    712c:	d502      	bpl.n	7134 <isr+0x5a4>
		if (crc_ok &&
    712e:	2c00      	cmp	r4, #0
    7130:	f000 8296 	beq.w	7660 <isr+0xad0>
	bool dir_report = false;
    7134:	2300      	movs	r3, #0
    7136:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    713a:	f89b 2741 	ldrb.w	r2, [fp, #1857]	; 0x741
    713e:	f8db 373c 	ldr.w	r3, [fp, #1852]	; 0x73c
    7142:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
		if(pdu_adv_rx->type == 0x07){			//PDU_ADV_TYPE_EXT_IND
    7146:	7a3b      	ldrb	r3, [r7, #8]
    7148:	f003 030f 	and.w	r3, r3, #15
    714c:	2b07      	cmp	r3, #7
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    714e:	f107 0408 	add.w	r4, r7, #8
		if(pdu_adv_rx->type == 0x07){			//PDU_ADV_TYPE_EXT_IND
    7152:	d169      	bne.n	7228 <isr+0x698>
		if(h->adv_addr){
    7154:	7afb      	ldrb	r3, [r7, #11]
    7156:	07d9      	lsls	r1, r3, #31
			ptr += BDADDR_SIZE;
    7158:	bf4c      	ite	mi
    715a:	f107 0612 	addmi.w	r6, r7, #18
		ptr = (u8_t *)h + sizeof(*h);
    715e:	f107 060c 	addpl.w	r6, r7, #12
		if(h->tgt_addr){
    7162:	079a      	lsls	r2, r3, #30
			ptr += BDADDR_SIZE;
    7164:	bf48      	it	mi
    7166:	3606      	addmi	r6, #6
		if(h->adi){
    7168:	0718      	lsls	r0, r3, #28
		if(pdu_adv_rx->len == 0x12){
    716a:	7a7b      	ldrb	r3, [r7, #9]
			ptr += sizeof(*adi_ptr);
    716c:	bf48      	it	mi
    716e:	3602      	addmi	r6, #2
		if(pdu_adv_rx->len == 0x12){
    7170:	2b12      	cmp	r3, #18
    7172:	d11d      	bne.n	71b0 <isr+0x620>
			stop_time_int = k_cycle_get_32();
    7174:	f7fa fe7a 	bl	1e6c <_timer_cycle_get_32>
    7178:	4bd1      	ldr	r3, [pc, #836]	; (74c0 <isr+0x930>)
    717a:	6018      	str	r0, [r3, #0]
			event_time_int = (stop_time_int - start_time_int);
    717c:	4bd1      	ldr	r3, [pc, #836]	; (74c4 <isr+0x934>)
    717e:	681b      	ldr	r3, [r3, #0]
    7180:	eba0 0e03 	sub.w	lr, r0, r3
    7184:	4bd0      	ldr	r3, [pc, #832]	; (74c8 <isr+0x938>)
    7186:	f8c3 e000 	str.w	lr, [r3]
			Time_difference_int = (SYS_CLOCK_HW_CYCLES_TO_NS(event_time_int))/1000;
    718a:	4bd0      	ldr	r3, [pc, #832]	; (74cc <isr+0x93c>)
    718c:	681a      	ldr	r2, [r3, #0]
    718e:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
    7192:	fb82 2308 	smull	r2, r3, r2, r8
    7196:	fba2 010e 	umull	r0, r1, r2, lr
    719a:	fb0e 1103 	mla	r1, lr, r3, r1
    719e:	4bcc      	ldr	r3, [pc, #816]	; (74d0 <isr+0x940>)
    71a0:	681a      	ldr	r2, [r3, #0]
    71a2:	17d3      	asrs	r3, r2, #31
    71a4:	f7f9 f860 	bl	268 <__aeabi_uldivmod>
    71a8:	4bca      	ldr	r3, [pc, #808]	; (74d4 <isr+0x944>)
    71aa:	fbb0 f0f8 	udiv	r0, r0, r8
    71ae:	6018      	str	r0, [r3, #0]
		if(h->aux_ptr && !aux_scan ){
    71b0:	7afb      	ldrb	r3, [r7, #11]
    71b2:	06d9      	lsls	r1, r3, #27
    71b4:	d538      	bpl.n	7228 <isr+0x698>
    71b6:	4bc8      	ldr	r3, [pc, #800]	; (74d8 <isr+0x948>)
    71b8:	781a      	ldrb	r2, [r3, #0]
    71ba:	2a00      	cmp	r2, #0
    71bc:	d134      	bne.n	7228 <isr+0x698>
			aux_scan = 0x01;
    71be:	2201      	movs	r2, #1
    71c0:	701a      	strb	r2, [r3, #0]
			_radio.ext_scanner.chan_index = ap->chan_idx;
    71c2:	7833      	ldrb	r3, [r6, #0]
    71c4:	f3c3 0305 	ubfx	r3, r3, #0, #6
    71c8:	f88b 36b0 	strb.w	r3, [fp, #1712]	; 0x6b0
			_radio.ext_scanner.chan_off	= ap->offs;
    71cc:	78b3      	ldrb	r3, [r6, #2]
    71ce:	7872      	ldrb	r2, [r6, #1]
    71d0:	f003 031f 	and.w	r3, r3, #31
    71d4:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    71d8:	4bc0      	ldr	r3, [pc, #768]	; (74dc <isr+0x94c>)
    71da:	b290      	uxth	r0, r2
    71dc:	2100      	movs	r1, #0
    71de:	e9c3 0100 	strd	r0, r1, [r3]
			_radio.ext_scanner.chan_off_debug = ap->offs;
    71e2:	e9c3 0102 	strd	r0, r1, [r3, #8]
			_radio.ext_scanner.off_unit	= ap->offs_units;
    71e6:	7831      	ldrb	r1, [r6, #0]
    71e8:	f3c1 11c0 	ubfx	r1, r1, #7, #1
			if(_radio.ext_scanner.off_unit == 0 ){
    71ec:	f011 0fff 	tst.w	r1, #255	; 0xff
			_radio.ext_scanner.off_unit	= ap->offs_units;
    71f0:	f88b 16d4 	strb.w	r1, [fp, #1748]	; 0x6d4
    71f4:	4619      	mov	r1, r3
				_radio.ext_scanner.chan_off *= 30;
    71f6:	bf0c      	ite	eq
    71f8:	231e      	moveq	r3, #30
				_radio.ext_scanner.chan_off *= 1200;//300;
    71fa:	f44f 6396 	movne.w	r3, #1200	; 0x4b0
    71fe:	fba2 2303 	umull	r2, r3, r2, r3
    7202:	e9c1 2300 	strd	r2, r3, [r1]
			_radio.ext_scanner.chan_off_calculation = _radio.ext_scanner.chan_off;
    7206:	e9d1 0100 	ldrd	r0, r1, [r1]
    720a:	4bb5      	ldr	r3, [pc, #724]	; (74e0 <isr+0x950>)
    720c:	e9c3 0100 	strd	r0, r1, [r3]
			start_time_ticker = k_cycle_get_32();
    7210:	f7fa fe2c 	bl	1e6c <_timer_cycle_get_32>
    7214:	4bb3      	ldr	r3, [pc, #716]	; (74e4 <isr+0x954>)
    7216:	6018      	str	r0, [r3, #0]
			start_time_int = k_cycle_get_32();
    7218:	f7fa fe28 	bl	1e6c <_timer_cycle_get_32>
    721c:	4ba9      	ldr	r3, [pc, #676]	; (74c4 <isr+0x934>)
    721e:	6018      	str	r0, [r3, #0]
		_radio.ext_scanner.ticks_now = ticker_ticks_now_get();
    7220:	f7fc fc92 	bl	3b48 <ticker_ticks_now_get>
    7224:	f8cb 070c 	str.w	r0, [fp, #1804]	; 0x70c
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    7228:	f8db 3674 	ldr.w	r3, [fp, #1652]	; 0x674
    722c:	2b00      	cmp	r3, #0
    722e:	f000 81a7 	beq.w	7580 <isr+0x9f0>
    7232:	f89b 3782 	ldrb.w	r3, [fp, #1922]	; 0x782
    7236:	b133      	cbz	r3, 7246 <isr+0x6b6>
				      (_radio.fc_req == _radio.fc_ack)) &&
    7238:	f89b 3780 	ldrb.w	r3, [fp, #1920]	; 0x780
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    723c:	f89b 2781 	ldrb.w	r2, [fp, #1921]	; 0x781
    7240:	429a      	cmp	r2, r3
    7242:	f040 819d 	bne.w	7580 <isr+0x9f0>
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
    7246:	f89b 364d 	ldrb.w	r3, [fp, #1613]	; 0x64d
		isr_scan_init_adva_check(pdu, rl_idx)) &&
    724a:	06da      	lsls	r2, r3, #27
    724c:	f140 8188 	bpl.w	7560 <isr+0x9d0>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
    7250:	7a3b      	ldrb	r3, [r7, #8]
		isr_scan_init_adva_check(pdu, rl_idx)) &&
    7252:	f013 030f 	ands.w	r3, r3, #15
    7256:	f040 81e5 	bne.w	7624 <isr+0xa94>
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
    725a:	f002 fa07 	bl	966c <radio_tmr_end_get>
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
    725e:	f8db 3648 	ldr.w	r3, [fp, #1608]	; 0x648
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
    7262:	f200 2616 	addw	r6, r0, #534	; 0x216
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
    7266:	48a0      	ldr	r0, [pc, #640]	; (74e8 <isr+0x958>)
    7268:	2207      	movs	r2, #7
    726a:	fba3 0100 	umull	r0, r1, r3, r0
    726e:	fb02 1103 	mla	r1, r2, r3, r1
    7272:	a391      	add	r3, pc, #580	; (adr r3, 74b8 <isr+0x928>)
    7274:	e9d3 2300 	ldrd	r2, r3, [r3]
    7278:	f7f8 fff6 	bl	268 <__aeabi_uldivmod>
    727c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
	    isr_scan_init_check(pdu_adv_rx, rl_idx) &&
    7280:	4286      	cmp	r6, r0
    7282:	f080 817d 	bcs.w	7580 <isr+0x9f0>
			node_rx = packet_rx_reserve_get(4);
    7286:	2004      	movs	r0, #4
    7288:	f7fd fb4e 	bl	4928 <packet_rx_reserve_get>
		if (node_rx == 0) {
    728c:	4682      	mov	sl, r0
    728e:	2800      	cmp	r0, #0
    7290:	f000 81e6 	beq.w	7660 <isr+0xad0>
		_radio.state = STATE_STOP;
    7294:	2604      	movs	r6, #4
		_radio.scanner.conn = NULL;
    7296:	2300      	movs	r3, #0
		conn = _radio.scanner.conn;
    7298:	f8db 4674 	ldr.w	r4, [fp, #1652]	; 0x674
		_radio.state = STATE_STOP;
    729c:	f88b 6014 	strb.w	r6, [fp, #20]
		_radio.scanner.conn = NULL;
    72a0:	f8cb 3674 	str.w	r3, [fp, #1652]	; 0x674
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    72a4:	f002 f860 	bl	9368 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_IND;
    72a8:	7803      	ldrb	r3, [r0, #0]
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    72aa:	4990      	ldr	r1, [pc, #576]	; (74ec <isr+0x95c>)
			pdu_adv_tx->chan_sel = 1;
    72ac:	f003 03d0 	and.w	r3, r3, #208	; 0xd0
    72b0:	f043 0325 	orr.w	r3, r3, #37	; 0x25
    72b4:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    72b6:	7a3a      	ldrb	r2, [r7, #8]
    72b8:	b2db      	uxtb	r3, r3
    72ba:	f3c2 1280 	ubfx	r2, r2, #6, #1
    72be:	f362 13c7 	bfi	r3, r2, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_connect_ind);
    72c2:	2222      	movs	r2, #34	; 0x22
    72c4:	7042      	strb	r2, [r0, #1]
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    72c6:	f89b 264d 	ldrb.w	r2, [fp, #1613]	; 0x64d
    72ca:	09d2      	lsrs	r2, r2, #7
    72cc:	f362 1386 	bfi	r3, r2, #6, #1
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    72d0:	4605      	mov	r5, r0
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    72d2:	2206      	movs	r2, #6
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    72d4:	f800 3b02 	strb.w	r3, [r0], #2
		memcpy(&pdu_adv_tx->connect_ind.adv_addr[0],
    72d8:	f105 0908 	add.w	r9, r5, #8
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    72dc:	f7f9 f98c 	bl	5f8 <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.adv_addr[0],
    72e0:	2206      	movs	r2, #6
    72e2:	f107 010a 	add.w	r1, r7, #10
    72e6:	4648      	mov	r0, r9
    72e8:	f7f9 f986 	bl	5f8 <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.
    72ec:	4632      	mov	r2, r6
    72ee:	f104 0110 	add.w	r1, r4, #16
    72f2:	f105 000e 	add.w	r0, r5, #14
    72f6:	f7f9 f97f 	bl	5f8 <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.crc_init[0],
    72fa:	2203      	movs	r2, #3
    72fc:	f104 0114 	add.w	r1, r4, #20
    7300:	f105 0012 	add.w	r0, r5, #18
    7304:	f7f9 f978 	bl	5f8 <memcpy>
		pdu_adv_tx->connect_ind.win_size = 1;
    7308:	2301      	movs	r3, #1
    730a:	756b      	strb	r3, [r5, #21]
			(u32_t)_radio.scanner.conn_interval * 1250;
    730c:	f8bb 3668 	ldrh.w	r3, [fp, #1640]	; 0x668
		conn_interval_us =
    7310:	f240 46e2 	movw	r6, #1250	; 0x4e2
    7314:	435e      	muls	r6, r3
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    7316:	f002 f9a9 	bl	966c <radio_tmr_end_get>
		if (!_radio.remainder_anchor ||
    731a:	f8db 300c 	ldr.w	r3, [fp, #12]
		if (_radio.scanner.win_offset_us == 0) {
    731e:	f8db 8678 	ldr.w	r8, [fp, #1656]	; 0x678
		if (!_radio.remainder_anchor ||
    7322:	2b00      	cmp	r3, #0
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    7324:	bfcc      	ite	gt
    7326:	f500 60db 	addgt.w	r0, r0, #1752	; 0x6d8
			conn_offset_us -= HAL_TICKER_TICKS_TO_US(1);
    732a:	f200 60ba 	addwle	r0, r0, #1722	; 0x6ba
		if (_radio.scanner.win_offset_us == 0) {
    732e:	f1b8 0f00 	cmp.w	r8, #0
    7332:	f040 8181 	bne.w	7638 <isr+0xaa8>
			pdu_adv_tx->connect_ind.win_offset = 0;
    7336:	f885 8016 	strb.w	r8, [r5, #22]
    733a:	f885 8017 	strb.w	r8, [r5, #23]
    733e:	4680      	mov	r8, r0
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
    7340:	2100      	movs	r1, #0
    7342:	4608      	mov	r0, r1
    7344:	f001 ffa0 	bl	9288 <radio_tx_ready_delay_get>
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
    7348:	2100      	movs	r1, #0
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
    734a:	eba8 0800 	sub.w	r8, r8, r0
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
    734e:	4608      	mov	r0, r1
    7350:	f001 ff9f 	bl	9292 <radio_tx_chain_delay_get>
    7354:	eba8 0000 	sub.w	r0, r8, r0
		conn_space_us += HAL_TICKER_TICKS_TO_US(1);
    7358:	f100 031e 	add.w	r3, r0, #30
    735c:	930a      	str	r3, [sp, #40]	; 0x28
		pdu_adv_tx->connect_ind.interval =
    735e:	f8bb 3668 	ldrh.w	r3, [fp, #1640]	; 0x668
    7362:	832b      	strh	r3, [r5, #24]
		pdu_adv_tx->connect_ind.latency =
    7364:	f8bb 366a 	ldrh.w	r3, [fp, #1642]	; 0x66a
    7368:	836b      	strh	r3, [r5, #26]
		pdu_adv_tx->connect_ind.timeout =
    736a:	f8bb 366c 	ldrh.w	r3, [fp, #1644]	; 0x66c
    736e:	83ab      	strh	r3, [r5, #28]
		memcpy(&pdu_adv_tx->connect_ind.chan_map[0],
    7370:	f104 0117 	add.w	r1, r4, #23
    7374:	2205      	movs	r2, #5
    7376:	f105 001e 	add.w	r0, r5, #30
    737a:	f7f9 f93d 	bl	5f8 <memcpy>
		pdu_adv_tx->connect_ind.hop =
    737e:	7fa2      	ldrb	r2, [r4, #30]
    7380:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    7384:	f362 0304 	bfi	r3, r2, #0, #5
    7388:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		pdu_adv_tx->connect_ind.sca = _radio.sca;
    738c:	f89b 2728 	ldrb.w	r2, [fp, #1832]	; 0x728
    7390:	f362 1347 	bfi	r3, r2, #5, #3
    7394:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		radio_switch_complete_and_disable();
    7398:	f002 f800 	bl	939c <radio_switch_complete_and_disable>
		radio_pkt_tx_set(pdu_adv_tx);
    739c:	4628      	mov	r0, r5
    739e:	f001 ff6d 	bl	927c <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    73a2:	f001 ffa9 	bl	92f8 <radio_is_ready>
    73a6:	4680      	mov	r8, r0
    73a8:	2800      	cmp	r0, #0
    73aa:	f47f ac44 	bne.w	6c36 <isr+0xa6>
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    73ae:	f44f 7282 	mov.w	r2, #260	; 0x104
    73b2:	f8db 1710 	ldr.w	r1, [fp, #1808]	; 0x710
    73b6:	4620      	mov	r0, r4
    73b8:	f7fb fc27 	bl	2c0a <mem_index_get>
    73bc:	8420      	strh	r0, [r4, #32]
		radio_le_conn_cmplt->status = 0x00;
    73be:	f88a 800b 	strb.w	r8, [sl, #11]
		radio_le_conn_cmplt->role = 0x00;
    73c2:	f88a 800c 	strb.w	r8, [sl, #12]
				pdu_adv_tx->rx_addr;
    73c6:	782b      	ldrb	r3, [r5, #0]
		node_rx->hdr.handle = conn->handle;
    73c8:	f8aa 0006 	strh.w	r0, [sl, #6]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    73cc:	2206      	movs	r2, #6
				pdu_adv_tx->rx_addr;
    73ce:	f3c3 13c0 	ubfx	r3, r3, #7, #1
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    73d2:	f88a 2004 	strb.w	r2, [sl, #4]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    73d6:	4649      	mov	r1, r9
			radio_le_conn_cmplt->peer_addr_type =
    73d8:	f88a 300d 	strb.w	r3, [sl, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    73dc:	f10a 000e 	add.w	r0, sl, #14
    73e0:	f7f9 f90a 	bl	5f8 <memcpy>
		radio_le_conn_cmplt->interval = _radio.scanner.conn_interval;
    73e4:	f8bb 3668 	ldrh.w	r3, [fp, #1640]	; 0x668
    73e8:	f8aa 3014 	strh.w	r3, [sl, #20]
		radio_le_conn_cmplt->latency = _radio.scanner.conn_latency;
    73ec:	f8bb 366a 	ldrh.w	r3, [fp, #1642]	; 0x66a
    73f0:	f8aa 3016 	strh.w	r3, [sl, #22]
		radio_le_conn_cmplt->timeout = _radio.scanner.conn_timeout;
    73f4:	f8bb 366c 	ldrh.w	r3, [fp, #1644]	; 0x66c
    73f8:	f8aa 3018 	strh.w	r3, [sl, #24]
			pdu_adv_tx->connect_ind.sca;
    73fc:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    7400:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
    7404:	f88a 301a 	strb.w	r3, [sl, #26]
		rx_fc_lock(conn->handle);
    7408:	8c20      	ldrh	r0, [r4, #32]
    740a:	f7fd ff33 	bl	5274 <rx_fc_lock>
		packet_rx_enqueue();
    740e:	f7fe f8c1 	bl	5594 <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
    7412:	2003      	movs	r0, #3
    7414:	f7fd fa88 	bl	4928 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    7418:	2800      	cmp	r0, #0
    741a:	f43f ac0c 	beq.w	6c36 <isr+0xa6>
			node_rx->hdr.handle = conn->handle;
    741e:	8c23      	ldrh	r3, [r4, #32]
    7420:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    7422:	230a      	movs	r3, #10
    7424:	7103      	strb	r3, [r0, #4]
			if (pdu_adv_rx->chan_sel) {
    7426:	7a3b      	ldrb	r3, [r7, #8]
    7428:	f013 0320 	ands.w	r3, r3, #32
    742c:	d00e      	beq.n	744c <isr+0x8bc>
					((u16_t)conn->access_addr[1] << 8) |
    742e:	7c62      	ldrb	r2, [r4, #17]
					conn->access_addr[0];
    7430:	7c23      	ldrb	r3, [r4, #16]
					((u16_t)conn->access_addr[3] << 8) |
    7432:	7ce1      	ldrb	r1, [r4, #19]
				u16_t aa_ls =
    7434:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
    7438:	7ca2      	ldrb	r2, [r4, #18]
				u16_t aa_ms =
    743a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
    743e:	7f61      	ldrb	r1, [r4, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    7440:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
    7442:	f041 0140 	orr.w	r1, r1, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
    7446:	83e3      	strh	r3, [r4, #30]
				conn->data_chan_sel = 1;
    7448:	7761      	strb	r1, [r4, #29]
				le_chan_sel_algo->chan_sel_algo = 0x01;
    744a:	2301      	movs	r3, #1
				le_chan_sel_algo->chan_sel_algo = 0x00;
    744c:	72c3      	strb	r3, [r0, #11]
			packet_rx_enqueue();
    744e:	f7fe f8a1 	bl	5594 <packet_rx_enqueue>
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    7452:	f8db 3784 	ldr.w	r3, [fp, #1924]	; 0x784
    7456:	6063      	str	r3, [r4, #4]
		ticks_slot_offset = (conn->hdr.ticks_active_to_start <
    7458:	2b27      	cmp	r3, #39	; 0x27
    745a:	bf38      	it	cc
    745c:	2327      	movcc	r3, #39	; 0x27
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
    745e:	2227      	movs	r2, #39	; 0x27
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
    7460:	2500      	movs	r5, #0
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
    7462:	6022      	str	r2, [r4, #0]
		ticks_slot_offset = (conn->hdr.ticks_active_to_start <
    7464:	4698      	mov	r8, r3
		conn->hdr.ticks_slot = _radio.scanner.ticks_conn_slot;
    7466:	f8db 2670 	ldr.w	r2, [fp, #1648]	; 0x670
    746a:	60e2      	str	r2, [r4, #12]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    746c:	f240 7372 	movw	r3, #1906	; 0x772
    7470:	2206      	movs	r2, #6
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
    7472:	60a5      	str	r5, [r4, #8]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    7474:	4629      	mov	r1, r5
    7476:	9300      	str	r3, [sp, #0]
    7478:	4628      	mov	r0, r5
    747a:	4b1d      	ldr	r3, [pc, #116]	; (74f0 <isr+0x960>)
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    747c:	f8df a07c 	ldr.w	sl, [pc, #124]	; 74fc <isr+0x96c>
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    7480:	f7fc fa92 	bl	39a8 <ticker_stop>
		ticker_stop_scan_assert(ticker_status, (void *)__LINE__);
    7484:	f240 7173 	movw	r1, #1907	; 0x773
    7488:	f7fe fa8c 	bl	59a4 <ticker_stop_scan_assert>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    748c:	462b      	mov	r3, r5
    748e:	2204      	movs	r2, #4
    7490:	4629      	mov	r1, r5
    7492:	9500      	str	r5, [sp, #0]
    7494:	4628      	mov	r0, r5
    7496:	f7fc fa87 	bl	39a8 <ticker_stop>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    749a:	f8db 3008 	ldr.w	r3, [fp, #8]
    749e:	f894 9020 	ldrb.w	r9, [r4, #32]
		ticker_status =
    74a2:	9406      	str	r4, [sp, #24]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    74a4:	eba3 0b08 	sub.w	fp, r3, r8
		ticker_status =
    74a8:	f240 738a 	movw	r3, #1930	; 0x78a
    74ac:	9308      	str	r3, [sp, #32]
    74ae:	4b11      	ldr	r3, [pc, #68]	; (74f4 <isr+0x964>)
    74b0:	9307      	str	r3, [sp, #28]
    74b2:	4b11      	ldr	r3, [pc, #68]	; (74f8 <isr+0x968>)
    74b4:	9305      	str	r3, [sp, #20]
    74b6:	e023      	b.n	7500 <isr+0x970>
    74b8:	3b9aca00 	.word	0x3b9aca00
    74bc:	00000000 	.word	0x00000000
    74c0:	20001a80 	.word	0x20001a80
    74c4:	200019f0 	.word	0x200019f0
    74c8:	20001ab0 	.word	0x20001ab0
    74cc:	2000394c 	.word	0x2000394c
    74d0:	20003948 	.word	0x20003948
    74d4:	20001ad4 	.word	0x20001ad4
    74d8:	20000b00 	.word	0x20000b00
    74dc:	20000a28 	.word	0x20000a28
    74e0:	20000a38 	.word	0x20000a38
    74e4:	20001aa8 	.word	0x20001aa8
    74e8:	1afd498d 	.word	0x1afd498d
    74ec:	200009be 	.word	0x200009be
    74f0:	000059a5 	.word	0x000059a5
    74f4:	00005a05 	.word	0x00005a05
    74f8:	00006909 	.word	0x00006909
    74fc:	3b9aca00 	.word	0x3b9aca00
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7500:	68e3      	ldr	r3, [r4, #12]
		ticker_status =
    7502:	9503      	str	r5, [sp, #12]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    7504:	fba6 670a 	umull	r6, r7, r6, sl
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7508:	4443      	add	r3, r8
		ticker_status =
    750a:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    750c:	4630      	mov	r0, r6
    750e:	a3dd      	add	r3, pc, #884	; (adr r3, 7884 <isr+0xcf4>)
    7510:	e9d3 2300 	ldrd	r2, r3, [r3]
    7514:	4639      	mov	r1, r7
    7516:	f7f8 fea7 	bl	268 <__aeabi_uldivmod>
    751a:	4610      	mov	r0, r2
    751c:	4619      	mov	r1, r3
    751e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    7522:	2300      	movs	r3, #0
    7524:	f7f8 fea0 	bl	268 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    7528:	a3d6      	add	r3, pc, #856	; (adr r3, 7884 <isr+0xcf4>)
    752a:	e9d3 2300 	ldrd	r2, r3, [r3]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    752e:	9002      	str	r0, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    7530:	4639      	mov	r1, r7
    7532:	4630      	mov	r0, r6
    7534:	f7f8 fe98 	bl	268 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
    7538:	990a      	ldr	r1, [sp, #40]	; 0x28
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    753a:	9001      	str	r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
    753c:	a3d1      	add	r3, pc, #836	; (adr r3, 7884 <isr+0xcf4>)
    753e:	e9d3 2300 	ldrd	r2, r3, [r3]
    7542:	fba1 010a 	umull	r0, r1, r1, sl
    7546:	f7f8 fe8f 	bl	268 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    754a:	f109 0907 	add.w	r9, r9, #7
		ticker_status =
    754e:	fa5f f989 	uxtb.w	r9, r9
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7552:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticker_status =
    7556:	9000      	str	r0, [sp, #0]
    7558:	465b      	mov	r3, fp
    755a:	464a      	mov	r2, r9
    755c:	4629      	mov	r1, r5
    755e:	e5af      	b.n	70c0 <isr+0x530>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
    7560:	7a3a      	ldrb	r2, [r7, #8]
    7562:	f3c3 1380 	ubfx	r3, r3, #6, #1
    7566:	f3c2 1280 	ubfx	r2, r2, #6, #1
    756a:	4293      	cmp	r3, r2
    756c:	d108      	bne.n	7580 <isr+0x9f0>
		(memcmp(&_radio.scanner.adv_addr[0],
    756e:	2206      	movs	r2, #6
    7570:	f107 010a 	add.w	r1, r7, #10
    7574:	48c0      	ldr	r0, [pc, #768]	; (7878 <isr+0xce8>)
    7576:	f7f9 f82a 	bl	5ce <memcmp>
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
    757a:	2800      	cmp	r0, #0
    757c:	f43f ae68 	beq.w	7250 <isr+0x6c0>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    7580:	7a3b      	ldrb	r3, [r7, #8]
    7582:	f013 030f 	ands.w	r3, r3, #15
    7586:	d001      	beq.n	758c <isr+0x9fc>
    7588:	2b06      	cmp	r3, #6
    758a:	d176      	bne.n	767a <isr+0xaea>
		 (_radio.scanner.type != 0) &&
    758c:	f89b 264d 	ldrb.w	r2, [fp, #1613]	; 0x64d
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    7590:	0716      	lsls	r6, r2, #28
    7592:	d561      	bpl.n	7658 <isr+0xac8>
		 (_radio.scanner.type != 0) &&
    7594:	f8db 2674 	ldr.w	r2, [fp, #1652]	; 0x674
    7598:	2a00      	cmp	r2, #0
    759a:	d15d      	bne.n	7658 <isr+0xac8>
		err = isr_rx_scan_report(rssi_ready,
    759c:	4628      	mov	r0, r5
    759e:	f7fe fa3d 	bl	5a1c <isr_rx_scan_report.isra.38>
		if (err) {
    75a2:	2800      	cmp	r0, #0
    75a4:	d15c      	bne.n	7660 <isr+0xad0>
		if(pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND){
    75a6:	7a3b      	ldrb	r3, [r7, #8]
    75a8:	f003 030f 	and.w	r3, r3, #15
    75ac:	2b07      	cmp	r3, #7
    75ae:	d101      	bne.n	75b4 <isr+0xa24>
			pdu_adv_tx = (void *)radio_pkt_scratch_get();
    75b0:	f001 feda 	bl	9368 <radio_pkt_scratch_get>
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    75b4:	f001 fed8 	bl	9368 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    75b8:	7803      	ldrb	r3, [r0, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    75ba:	49b0      	ldr	r1, [pc, #704]	; (787c <isr+0xcec>)
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    75bc:	2203      	movs	r2, #3
    75be:	f362 0303 	bfi	r3, r2, #0, #4
    75c2:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    75c4:	7a3a      	ldrb	r2, [r7, #8]
    75c6:	b2db      	uxtb	r3, r3
    75c8:	f3c2 1280 	ubfx	r2, r2, #6, #1
    75cc:	f362 13c7 	bfi	r3, r2, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_scan_req);
    75d0:	220c      	movs	r2, #12
    75d2:	7042      	strb	r2, [r0, #1]
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    75d4:	f89b 264d 	ldrb.w	r2, [fp, #1613]	; 0x64d
    75d8:	09d2      	lsrs	r2, r2, #7
    75da:	f362 1386 	bfi	r3, r2, #6, #1
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    75de:	4604      	mov	r4, r0
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    75e0:	2206      	movs	r2, #6
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    75e2:	f800 3b02 	strb.w	r3, [r0], #2
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    75e6:	f7f9 f807 	bl	5f8 <memcpy>
		memcpy(&pdu_adv_tx->scan_req.adv_addr[0],
    75ea:	2206      	movs	r2, #6
    75ec:	f107 010a 	add.w	r1, r7, #10
    75f0:	f104 0008 	add.w	r0, r4, #8
    75f4:	f7f9 f800 	bl	5f8 <memcpy>
		_radio.scanner.state = 1;
    75f8:	f89b 364c 	ldrb.w	r3, [fp, #1612]	; 0x64c
    75fc:	f043 0302 	orr.w	r3, r3, #2
    7600:	f88b 364c 	strb.w	r3, [fp, #1612]	; 0x64c
		radio_tmr_tifs_set(RADIO_TIFS);
    7604:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
    7606:	2302      	movs	r3, #2
    7608:	f88b 3014 	strb.w	r3, [fp, #20]
		radio_tmr_tifs_set(RADIO_TIFS);
    760c:	f001 ff40 	bl	9490 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    7610:	2000      	movs	r0, #0
    7612:	f001 fead 	bl	9370 <radio_switch_complete_and_rx>
		radio_pkt_tx_set(pdu_adv_tx);
    7616:	4620      	mov	r0, r4
    7618:	f001 fe30 	bl	927c <radio_pkt_tx_set>
		radio_tmr_end_capture();
    761c:	f002 f814 	bl	9648 <radio_tmr_end_capture>
    7620:	f7ff bbae 	b.w	6d80 <isr+0x1f0>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
    7624:	2b01      	cmp	r3, #1
    7626:	d1af      	bne.n	7588 <isr+0x9f8>
		  isr_scan_tgta_check(true, pdu, rl_idx, NULL)))));
    7628:	2100      	movs	r1, #0
    762a:	4620      	mov	r0, r4
    762c:	f7fd fec4 	bl	53b8 <isr_scan_tgta_check.isra.30>
				      (_radio.fc_req == _radio.fc_ack)) &&
    7630:	2800      	cmp	r0, #0
    7632:	d0a5      	beq.n	7580 <isr+0x9f0>
    7634:	e611      	b.n	725a <isr+0x6ca>
				conn_space_us += conn_interval_us;
    7636:	44b0      	add	r8, r6
			while ((conn_space_us & ((u32_t)1 << 31)) ||
    7638:	f1b8 0f00 	cmp.w	r8, #0
    763c:	dbfb      	blt.n	7636 <isr+0xaa6>
    763e:	4580      	cmp	r8, r0
    7640:	d3f9      	bcc.n	7636 <isr+0xaa6>
			pdu_adv_tx->connect_ind.win_offset =
    7642:	f240 43e2 	movw	r3, #1250	; 0x4e2
				(conn_space_us - conn_offset_us) / 1250;
    7646:	eba8 0000 	sub.w	r0, r8, r0
			pdu_adv_tx->connect_ind.win_offset =
    764a:	fbb0 f0f3 	udiv	r0, r0, r3
			pdu_adv_tx->connect_ind.win_size++;
    764e:	7d6b      	ldrb	r3, [r5, #21]
			pdu_adv_tx->connect_ind.win_offset =
    7650:	82e8      	strh	r0, [r5, #22]
			pdu_adv_tx->connect_ind.win_size++;
    7652:	3301      	adds	r3, #1
    7654:	756b      	strb	r3, [r5, #21]
    7656:	e673      	b.n	7340 <isr+0x7b0>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    7658:	b97b      	cbnz	r3, 767a <isr+0xaea>
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
    765a:	7a7b      	ldrb	r3, [r7, #9]
    765c:	2b00      	cmp	r3, #0
    765e:	d13b      	bne.n	76d8 <isr+0xb48>
			_radio.state = STATE_CLOSE;
    7660:	2303      	movs	r3, #3
    7662:	f88b 3014 	strb.w	r3, [fp, #20]
			radio_disable();
    7666:	f001 fe29 	bl	92bc <radio_disable>
			_radio.scanner.state = 0;
    766a:	f89b 364c 	ldrb.w	r3, [fp, #1612]	; 0x64c
    766e:	f36f 0341 	bfc	r3, #1, #1
    7672:	f88b 364c 	strb.w	r3, [fp, #1612]	; 0x64c
    7676:	f7ff bb13 	b.w	6ca0 <isr+0x110>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    767a:	2b01      	cmp	r3, #1
    767c:	d00d      	beq.n	769a <isr+0xb0a>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    767e:	7a3b      	ldrb	r3, [r7, #8]
					&dir_report))) ||
    7680:	f003 020b 	and.w	r2, r3, #11
    7684:	2a02      	cmp	r2, #2
    7686:	d0e8      	beq.n	765a <isr+0xaca>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    7688:	f003 030f 	and.w	r3, r3, #15
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND) ||
    768c:	2b07      	cmp	r3, #7
    768e:	d10b      	bne.n	76a8 <isr+0xb18>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
    7690:	f89b 364d 	ldrb.w	r3, [fp, #1613]	; 0x64d
    7694:	075c      	lsls	r4, r3, #29
    7696:	d1e0      	bne.n	765a <isr+0xaca>
    7698:	e7e2      	b.n	7660 <isr+0xad0>
		    isr_scan_tgta_check(false, pdu_adv_rx, rl_idx,
    769a:	a90d      	add	r1, sp, #52	; 0x34
    769c:	4620      	mov	r0, r4
    769e:	f7fd fe8b 	bl	53b8 <isr_scan_tgta_check.isra.30>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
    76a2:	2800      	cmp	r0, #0
    76a4:	d1d9      	bne.n	765a <isr+0xaca>
    76a6:	e7ea      	b.n	767e <isr+0xaee>
		   (_radio.scanner.phy)) ||
    76a8:	2b04      	cmp	r3, #4
    76aa:	d1d9      	bne.n	7660 <isr+0xad0>
		   (_radio.scanner.state != 0) &&
    76ac:	f89b 364c 	ldrb.w	r3, [fp, #1612]	; 0x64c
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
    76b0:	0798      	lsls	r0, r3, #30
    76b2:	d5d5      	bpl.n	7660 <isr+0xad0>
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
    76b4:	f001 fe58 	bl	9368 <radio_pkt_scratch_get>
	return ((sreq->rx_addr == srsp->tx_addr) &&
    76b8:	7a3b      	ldrb	r3, [r7, #8]
    76ba:	7802      	ldrb	r2, [r0, #0]
    76bc:	f3c3 1380 	ubfx	r3, r3, #6, #1
    76c0:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    76c4:	d1cc      	bne.n	7660 <isr+0xad0>
		(memcmp(&sreq->scan_req.adv_addr[0],
    76c6:	2206      	movs	r2, #6
    76c8:	f107 010a 	add.w	r1, r7, #10
    76cc:	3008      	adds	r0, #8
    76ce:	f7f8 ff7e 	bl	5ce <memcmp>
		   (_radio.scanner.state != 0) &&
    76d2:	2800      	cmp	r0, #0
    76d4:	d0c1      	beq.n	765a <isr+0xaca>
    76d6:	e7c3      	b.n	7660 <isr+0xad0>
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
    76d8:	f8db 3674 	ldr.w	r3, [fp, #1652]	; 0x674
    76dc:	2b00      	cmp	r3, #0
    76de:	d1bf      	bne.n	7660 <isr+0xad0>
		err = isr_rx_scan_report(rssi_ready,
    76e0:	4628      	mov	r0, r5
    76e2:	f7fe f99b 	bl	5a1c <isr_rx_scan_report.isra.38>
    76e6:	e7bb      	b.n	7660 <isr+0xad0>
	_radio.packet_counter++;
    76e8:	f89b 3720 	ldrb.w	r3, [fp, #1824]	; 0x720
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    76ec:	f89b 2741 	ldrb.w	r2, [fp, #1857]	; 0x741
	_radio.packet_counter++;
    76f0:	3301      	adds	r3, #1
    76f2:	f88b 3720 	strb.w	r3, [fp, #1824]	; 0x720
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    76f6:	f8db 373c 	ldr.w	r3, [fp, #1852]	; 0x73c
    76fa:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    76fe:	2301      	movs	r3, #1
    7700:	7133      	strb	r3, [r6, #4]
	if (crc_ok) {
    7702:	2f00      	cmp	r7, #0
    7704:	f000 8371 	beq.w	7dea <isr+0x125a>
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
    7708:	f8db 371c 	ldr.w	r3, [fp, #1820]	; 0x71c
    770c:	7a30      	ldrb	r0, [r6, #8]
    770e:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
    7712:	f3c0 0080 	ubfx	r0, r0, #2, #1
    7716:	f002 0101 	and.w	r1, r2, #1
    771a:	4288      	cmp	r0, r1
    771c:	f000 80ba 	beq.w	7894 <isr+0xd04>
		_radio.conn_curr->sn++;
    7720:	f081 0101 	eor.w	r1, r1, #1
    7724:	f361 0200 	bfi	r2, r1, #0, #1
    7728:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
		if (_radio.role == ROLE_SLAVE) {
    772c:	f89b 2013 	ldrb.w	r2, [fp, #19]
    7730:	2a03      	cmp	r2, #3
			_radio.conn_curr->slave.latency_enabled = 1;
    7732:	bf02      	ittt	eq
    7734:	f893 2038 	ldrbeq.w	r2, [r3, #56]	; 0x38
    7738:	f042 0201 	orreq.w	r2, r2, #1
    773c:	f883 2038 	strbeq.w	r2, [r3, #56]	; 0x38
		if (_radio.conn_curr->empty == 0) {
    7740:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
    7744:	0611      	lsls	r1, r2, #24
    7746:	f100 80a1 	bmi.w	788c <isr+0xcfc>
			node_tx = _radio.conn_curr->pkt_tx_head;
    774a:	f8d3 80ec 	ldr.w	r8, [r3, #236]	; 0xec
				_radio.conn_curr->packet_tx_head_offset);
    774e:	f893 e101 	ldrb.w	lr, [r3, #257]	; 0x101
			pdu_data_tx = (void *)(node_tx->pdu_data +
    7752:	f108 0c04 	add.w	ip, r8, #4
    7756:	eb0c 050e 	add.w	r5, ip, lr
			pdu_data_tx_len = pdu_data_tx->len;
    775a:	786c      	ldrb	r4, [r5, #1]
			if (pdu_data_tx_len != 0) {
    775c:	b90c      	cbnz	r4, 7762 <isr+0xbd2>
	u8_t terminate = 0;
    775e:	2500      	movs	r5, #0
    7760:	e027      	b.n	77b2 <isr+0xc22>
				if (_radio.conn_curr->enc_tx) {
    7762:	0692      	lsls	r2, r2, #26
    7764:	d50a      	bpl.n	777c <isr+0xbec>
					_radio.conn_curr->ccm_tx.counter++;
    7766:	f8d3 00da 	ldr.w	r0, [r3, #218]	; 0xda
    776a:	f8d3 10de 	ldr.w	r1, [r3, #222]	; 0xde
    776e:	3001      	adds	r0, #1
    7770:	f141 0100 	adc.w	r1, r1, #0
    7774:	f8c3 00da 	str.w	r0, [r3, #218]	; 0xda
    7778:	f8c3 10de 	str.w	r1, [r3, #222]	; 0xde
				if (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) {
    777c:	f81c 300e 	ldrb.w	r3, [ip, lr]
    7780:	f003 0303 	and.w	r3, r3, #3
    7784:	2b03      	cmp	r3, #3
    7786:	d1ea      	bne.n	775e <isr+0xbce>
	switch (pdu_data_tx->llctrl.opcode) {
    7788:	78ea      	ldrb	r2, [r5, #3]
    778a:	2a02      	cmp	r2, #2
    778c:	d1e7      	bne.n	775e <isr+0xbce>
		_radio.state = STATE_CLOSE;
    778e:	f88b 3014 	strb.w	r3, [fp, #20]
		radio_disable();
    7792:	f001 fd93 	bl	92bc <radio_disable>
		LL_ASSERT(!radio_is_ready());
    7796:	f001 fdaf 	bl	92f8 <radio_is_ready>
    779a:	2800      	cmp	r0, #0
    779c:	f47f aa4b 	bne.w	6c36 <isr+0xa6>
		     (pdu_data_tx->llctrl.terminate_ind.error_code == 0x13) ?
    77a0:	7929      	ldrb	r1, [r5, #4]
		terminate_ind_rx_enqueue(_radio.conn_curr,
    77a2:	f8db 071c 	ldr.w	r0, [fp, #1820]	; 0x71c
    77a6:	2913      	cmp	r1, #19
    77a8:	bf08      	it	eq
    77aa:	2116      	moveq	r1, #22
    77ac:	f7fd feca 	bl	5544 <terminate_ind_rx_enqueue>
		terminate = 1;
    77b0:	2501      	movs	r5, #1
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    77b2:	f8db 371c 	ldr.w	r3, [fp, #1820]	; 0x71c
    77b6:	f893 2101 	ldrb.w	r2, [r3, #257]	; 0x101
			if (_radio.conn_curr->packet_tx_head_offset ==
    77ba:	f893 1100 	ldrb.w	r1, [r3, #256]	; 0x100
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    77be:	4422      	add	r2, r4
    77c0:	b2d2      	uxtb	r2, r2
			if (_radio.conn_curr->packet_tx_head_offset ==
    77c2:	4291      	cmp	r1, r2
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    77c4:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
			if (_radio.conn_curr->packet_tx_head_offset ==
    77c8:	d11e      	bne.n	7808 <isr+0xc78>
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    77ca:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
    77ce:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
	conn->packet_tx_head_len = 0;
    77d2:	2000      	movs	r0, #0
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    77d4:	428a      	cmp	r2, r1
	conn->packet_tx_head_len = 0;
    77d6:	f883 0100 	strb.w	r0, [r3, #256]	; 0x100
	conn->packet_tx_head_offset = 0;
    77da:	f883 0101 	strb.w	r0, [r3, #257]	; 0x101
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    77de:	d116      	bne.n	780e <isr+0xc7e>
		if (node_tx) {
    77e0:	f1b8 0f00 	cmp.w	r8, #0
    77e4:	d010      	beq.n	7808 <isr+0xc78>
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
    77e6:	f8d3 10f4 	ldr.w	r1, [r3, #244]	; 0xf4
			conn->pkt_tx_head = conn->pkt_tx_head->next;
    77ea:	6814      	ldr	r4, [r2, #0]
    77ec:	f8c3 40ec 	str.w	r4, [r3, #236]	; 0xec
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
    77f0:	428a      	cmp	r2, r1
				conn->pkt_tx_ctrl = NULL;
    77f2:	bf06      	itte	eq
    77f4:	f8c3 00f0 	streq.w	r0, [r3, #240]	; 0xf0
				conn->pkt_tx_ctrl_last = NULL;
    77f8:	f8c3 00f4 	streq.w	r0, [r3, #244]	; 0xf4
				conn->pkt_tx_ctrl = conn->pkt_tx_head;
    77fc:	f8c3 40f0 	strne.w	r4, [r3, #240]	; 0xf0
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    7800:	491f      	ldr	r1, [pc, #124]	; (7880 <isr+0xcf0>)
    7802:	4640      	mov	r0, r8
    7804:	f7fb f9e9 	bl	2bda <mem_release>
	struct radio_pdu_node_tx *tx_release = NULL;
    7808:	f04f 0800 	mov.w	r8, #0
    780c:	e008      	b.n	7820 <isr+0xc90>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    780e:	f8d3 10f8 	ldr.w	r1, [r3, #248]	; 0xf8
    7812:	428a      	cmp	r2, r1
    7814:	6812      	ldr	r2, [r2, #0]
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    7816:	bf08      	it	eq
    7818:	f8c3 20f8 	streq.w	r2, [r3, #248]	; 0xf8
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    781c:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
	if (terminate) {
    7820:	2d00      	cmp	r5, #0
    7822:	d039      	beq.n	7898 <isr+0xd08>
		connection_release(_radio.conn_curr);
    7824:	f8db 071c 	ldr.w	r0, [fp, #1820]	; 0x71c
    7828:	f7fd ffb8 	bl	579c <connection_release>
		_radio.conn_curr = NULL;
    782c:	2500      	movs	r5, #0
				_radio.conn_curr = NULL;
    782e:	f8cb 571c 	str.w	r5, [fp, #1820]	; 0x71c
	if (!radio_tmr_aa_restore()) {
    7832:	f001 fefd 	bl	9630 <radio_tmr_aa_restore>
    7836:	b918      	cbnz	r0, 7840 <isr+0xcb0>
		radio_tmr_aa_save(radio_tmr_aa_get());
    7838:	f001 feee 	bl	9618 <radio_tmr_aa_get>
    783c:	f001 fef2 	bl	9624 <radio_tmr_aa_save>
	if (!_radio.conn_curr) {
    7840:	f8db 371c 	ldr.w	r3, [fp, #1820]	; 0x71c
    7844:	2b00      	cmp	r3, #0
    7846:	f43f aa2b 	beq.w	6ca0 <isr+0x110>
	if (tx_release) {
    784a:	f1b8 0f00 	cmp.w	r8, #0
    784e:	d003      	beq.n	7858 <isr+0xcc8>
		pdu_node_tx_release(_radio.conn_curr->handle, tx_release);
    7850:	4641      	mov	r1, r8
    7852:	8c18      	ldrh	r0, [r3, #32]
    7854:	f7fd ff30 	bl	56b8 <pdu_node_tx_release>
	if (rx_enqueue) {
    7858:	2d00      	cmp	r5, #0
    785a:	f43f aa21 	beq.w	6ca0 <isr+0x110>
		rx_fc_lock(_radio.conn_curr->handle);
    785e:	f8db 371c 	ldr.w	r3, [fp, #1820]	; 0x71c
    7862:	8c18      	ldrh	r0, [r3, #32]
    7864:	f7fd fd06 	bl	5274 <rx_fc_lock>
		node_rx->hdr.handle = _radio.conn_curr->handle;
    7868:	f8db 371c 	ldr.w	r3, [fp, #1820]	; 0x71c
    786c:	8c1b      	ldrh	r3, [r3, #32]
    786e:	80f3      	strh	r3, [r6, #6]
		packet_rx_enqueue();
    7870:	f7fd fe90 	bl	5594 <packet_rx_enqueue>
    7874:	f7ff ba14 	b.w	6ca0 <isr+0x110>
    7878:	200009c4 	.word	0x200009c4
    787c:	200009be 	.word	0x200009be
    7880:	20000acc 	.word	0x20000acc
    7884:	1afd498d 	.word	0x1afd498d
    7888:	00000007 	.word	0x00000007
			_radio.conn_curr->empty = 0;
    788c:	f36f 12c7 	bfc	r2, #7, #1
    7890:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
    7894:	f04f 0800 	mov.w	r8, #0
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    7898:	f8db 371c 	ldr.w	r3, [fp, #1820]	; 0x71c
    789c:	7a32      	ldrb	r2, [r6, #8]
    789e:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
    78a2:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    78a6:	f3c3 0340 	ubfx	r3, r3, #1, #1
    78aa:	429a      	cmp	r2, r3
    78ac:	d03c      	beq.n	7928 <isr+0xd98>
	u8_t rx_enqueue = 0;
    78ae:	2500      	movs	r5, #0
		_radio.conn_curr->supervision_expire = 0;
    78b0:	f8db 371c 	ldr.w	r3, [fp, #1820]	; 0x71c
		_radio.crc_expire = 0;
    78b4:	2400      	movs	r4, #0
    78b6:	f88b 4721 	strb.w	r4, [fp, #1825]	; 0x721
		_radio.conn_curr->supervision_expire = 0;
    78ba:	861c      	strh	r4, [r3, #48]	; 0x30
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    78bc:	f8db 071c 	ldr.w	r0, [fp, #1820]	; 0x71c
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
    78c0:	a90d      	add	r1, sp, #52	; 0x34
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    78c2:	f890 90a8 	ldrb.w	r9, [r0, #168]	; 0xa8
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
    78c6:	f7ff f8fd 	bl	6ac4 <prepare_pdu_data_tx>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    78ca:	f89b 3014 	ldrb.w	r3, [fp, #20]
    78ce:	2b03      	cmp	r3, #3
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    78d0:	ea4f 19d9 	mov.w	r9, r9, lsr #7
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    78d4:	d013      	beq.n	78fe <isr+0xd6e>
    78d6:	2c00      	cmp	r4, #0
    78d8:	f040 82a0 	bne.w	7e1c <isr+0x128c>
    78dc:	b13f      	cbz	r7, 78ee <isr+0xd5e>
			((crc_ok) && (pdu_data_rx->md == 0) &&
    78de:	7a33      	ldrb	r3, [r6, #8]
    78e0:	06df      	lsls	r7, r3, #27
    78e2:	d404      	bmi.n	78ee <isr+0xd5e>
			 (pdu_data_tx->len == 0)) ||
    78e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
			((crc_ok) && (pdu_data_rx->md == 0) &&
    78e6:	785b      	ldrb	r3, [r3, #1]
    78e8:	2b00      	cmp	r3, #0
    78ea:	f000 8297 	beq.w	7e1c <isr+0x128c>
			_radio.conn_curr->llcp_terminate.reason_peer) ?
    78ee:	f8db 371c 	ldr.w	r3, [fp, #1820]	; 0x71c
			 (pdu_data_tx->len == 0)) ||
    78f2:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    78f6:	2b00      	cmp	r3, #0
    78f8:	bf0c      	ite	eq
    78fa:	2302      	moveq	r3, #2
    78fc:	2303      	movne	r3, #3
	if (_radio.state == STATE_CLOSE) {
    78fe:	2b03      	cmp	r3, #3
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    7900:	f88b 3014 	strb.w	r3, [fp, #20]
	if (_radio.state == STATE_CLOSE) {
    7904:	f040 82a4 	bne.w	7e50 <isr+0x12c0>
		if (_radio.role == ROLE_MASTER) {
    7908:	f89b 3013 	ldrb.w	r3, [fp, #19]
    790c:	2b04      	cmp	r3, #4
    790e:	f040 8287 	bne.w	7e20 <isr+0x1290>
			_radio.conn_curr->empty = is_empty_pdu_tx_retry;
    7912:	f8db 371c 	ldr.w	r3, [fp, #1820]	; 0x71c
    7916:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
    791a:	f369 12c7 	bfi	r2, r9, #7, #1
    791e:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
			radio_disable();
    7922:	f001 fccb 	bl	92bc <radio_disable>
    7926:	e784      	b.n	7832 <isr+0xca2>
	    (packet_rx_reserve_get(3) != 0) &&
    7928:	2003      	movs	r0, #3
    792a:	f7fc fffd 	bl	4928 <packet_rx_reserve_get>
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    792e:	2800      	cmp	r0, #0
    7930:	d0bd      	beq.n	78ae <isr+0xd1e>
	    (packet_rx_reserve_get(3) != 0) &&
    7932:	f89b 3782 	ldrb.w	r3, [fp, #1922]	; 0x782
    7936:	b373      	cbz	r3, 7996 <isr+0xe06>
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    7938:	f8db 374c 	ldr.w	r3, [fp, #1868]	; 0x74c
    793c:	f8db 2750 	ldr.w	r2, [fp, #1872]	; 0x750
	    ((_radio.fc_ena == 0) ||
    7940:	4293      	cmp	r3, r2
    7942:	d105      	bne.n	7950 <isr+0xdc0>
	      (_radio.fc_req == _radio.fc_ack)) ||
    7944:	f89b 2780 	ldrb.w	r2, [fp, #1920]	; 0x780
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    7948:	f89b 1781 	ldrb.w	r1, [fp, #1921]	; 0x781
    794c:	4291      	cmp	r1, r2
    794e:	d022      	beq.n	7996 <isr+0xe06>
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    7950:	f8db 2750 	ldr.w	r2, [fp, #1872]	; 0x750
	      (_radio.fc_req == _radio.fc_ack)) ||
    7954:	4293      	cmp	r3, r2
    7956:	d0aa      	beq.n	78ae <isr+0xd1e>
	      (_radio.fc_req != _radio.fc_ack) &&
    7958:	f89b 3780 	ldrb.w	r3, [fp, #1920]	; 0x780
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    795c:	f89b 2781 	ldrb.w	r2, [fp, #1921]	; 0x781
    7960:	429a      	cmp	r2, r3
    7962:	d0a4      	beq.n	78ae <isr+0xd1e>
		(((_radio.fc_req == 0) &&
    7964:	f89b 3780 	ldrb.w	r3, [fp, #1920]	; 0x780
	      (_radio.fc_req != _radio.fc_ack) &&
    7968:	b933      	cbnz	r3, 7978 <isr+0xde8>
		   _radio.conn_curr->handle)) ||
    796a:	f8db 371c 	ldr.w	r3, [fp, #1820]	; 0x71c
		(((_radio.fc_req == 0) &&
    796e:	f8bb 277e 	ldrh.w	r2, [fp, #1918]	; 0x77e
    7972:	8c1b      	ldrh	r3, [r3, #32]
    7974:	429a      	cmp	r2, r3
    7976:	d00e      	beq.n	7996 <isr+0xe06>
		 ((_radio.fc_req != 0) &&
    7978:	f89b 3780 	ldrb.w	r3, [fp, #1920]	; 0x780
		   _radio.conn_curr->handle)) ||
    797c:	2b00      	cmp	r3, #0
    797e:	d096      	beq.n	78ae <isr+0xd1e>
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    7980:	f89b 3780 	ldrb.w	r3, [fp, #1920]	; 0x780
		   _radio.conn_curr->handle)))))) {
    7984:	f8db 171c 	ldr.w	r1, [fp, #1820]	; 0x71c
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    7988:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
		 ((_radio.fc_req != 0) &&
    798c:	f8b3 2778 	ldrh.w	r2, [r3, #1912]	; 0x778
    7990:	8c0b      	ldrh	r3, [r1, #32]
    7992:	429a      	cmp	r2, r3
    7994:	d18b      	bne.n	78ae <isr+0xd1e>
		if (pdu_data_rx->len != 0) {
    7996:	f896 9009 	ldrb.w	r9, [r6, #9]
    799a:	f1b9 0f00 	cmp.w	r9, #0
    799e:	f000 81da 	beq.w	7d56 <isr+0x11c6>
			if (_radio.conn_curr->enc_rx) {
    79a2:	f8db 371c 	ldr.w	r3, [fp, #1820]	; 0x71c
    79a6:	f893 90a8 	ldrb.w	r9, [r3, #168]	; 0xa8
    79aa:	f019 0910 	ands.w	r9, r9, #16
    79ae:	d006      	beq.n	79be <isr+0xe2e>
				done = radio_ccm_is_done();
    79b0:	f001 feca 	bl	9748 <radio_ccm_is_done>
				LL_ASSERT(done);
    79b4:	2800      	cmp	r0, #0
    79b6:	f43f a93e 	beq.w	6c36 <isr+0xa6>
				ccm_rx_increment = 1;
    79ba:	f04f 0901 	mov.w	r9, #1
			if ((_radio.conn_curr->enc_rx &&
    79be:	f8db 371c 	ldr.w	r3, [fp, #1820]	; 0x71c
    79c2:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
    79c6:	06dc      	lsls	r4, r3, #27
    79c8:	d40f      	bmi.n	79ea <isr+0xe5a>
			    (_radio.conn_curr->pause_rx &&
    79ca:	f8db 471c 	ldr.w	r4, [fp, #1820]	; 0x71c
    79ce:	7a33      	ldrb	r3, [r6, #8]
    79d0:	f894 20a8 	ldrb.w	r2, [r4, #168]	; 0xa8
			     !radio_ccm_mic_is_valid()) ||
    79d4:	f012 0f04 	tst.w	r2, #4
    79d8:	d120      	bne.n	7a1c <isr+0xe8c>
			switch (pdu_data_rx->ll_id) {
    79da:	f013 0303 	ands.w	r3, r3, #3
    79de:	f000 81ba 	beq.w	7d56 <isr+0x11c6>
    79e2:	2b02      	cmp	r3, #2
    79e4:	d847      	bhi.n	7a76 <isr+0xee6>
				*rx_enqueue = 1;
    79e6:	2501      	movs	r5, #1
    79e8:	e0b3      	b.n	7b52 <isr+0xfc2>
			     !radio_ccm_mic_is_valid()) ||
    79ea:	f001 fecb 	bl	9784 <radio_ccm_mic_is_valid>
			if ((_radio.conn_curr->enc_rx &&
    79ee:	2800      	cmp	r0, #0
    79f0:	d1eb      	bne.n	79ca <isr+0xe3a>
				_radio.state = STATE_CLOSE;
    79f2:	2303      	movs	r3, #3
    79f4:	f88b 3014 	strb.w	r3, [fp, #20]
				radio_disable();
    79f8:	f001 fc60 	bl	92bc <radio_disable>
				LL_ASSERT(!radio_is_ready());
    79fc:	f001 fc7c 	bl	92f8 <radio_is_ready>
    7a00:	4605      	mov	r5, r0
    7a02:	2800      	cmp	r0, #0
    7a04:	f47f a917 	bne.w	6c36 <isr+0xa6>
				terminate_ind_rx_enqueue(_radio.conn_curr,
    7a08:	f8db 071c 	ldr.w	r0, [fp, #1820]	; 0x71c
    7a0c:	213d      	movs	r1, #61	; 0x3d
    7a0e:	f7fd fd99 	bl	5544 <terminate_ind_rx_enqueue>
				connection_release(_radio.conn_curr);
    7a12:	f8db 071c 	ldr.w	r0, [fp, #1820]	; 0x71c
    7a16:	f7fd fec1 	bl	579c <connection_release>
    7a1a:	e708      	b.n	782e <isr+0xc9e>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
    7a1c:	f003 0103 	and.w	r1, r3, #3
    7a20:	2903      	cmp	r1, #3
    7a22:	d1e6      	bne.n	79f2 <isr+0xe62>
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
    7a24:	f994 001d 	ldrsb.w	r0, [r4, #29]
	u8_t opcode = pdu_data->llctrl.opcode;
    7a28:	7af1      	ldrb	r1, [r6, #11]
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
    7a2a:	2800      	cmp	r0, #0
    7a2c:	f002 0240 	and.w	r2, r2, #64	; 0x40
    7a30:	db15      	blt.n	7a5e <isr+0xece>
	       (!conn->role &&
    7a32:	b922      	cbnz	r2, 7a3e <isr+0xeae>
		((!conn->refresh &&
    7a34:	2902      	cmp	r1, #2
    7a36:	d0d0      	beq.n	79da <isr+0xe4a>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    7a38:	2911      	cmp	r1, #17
    7a3a:	d8da      	bhi.n	79f2 <isr+0xe62>
    7a3c:	e009      	b.n	7a52 <isr+0xec2>
		 (conn->refresh &&
    7a3e:	1e8a      	subs	r2, r1, #2
    7a40:	b2d2      	uxtb	r2, r2
    7a42:	2a09      	cmp	r2, #9
    7a44:	d8f8      	bhi.n	7a38 <isr+0xea8>
    7a46:	f240 2005 	movw	r0, #517	; 0x205
    7a4a:	fa20 f202 	lsr.w	r2, r0, r2
    7a4e:	07d0      	lsls	r0, r2, #31
    7a50:	d4c3      	bmi.n	79da <isr+0xe4a>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    7a52:	4ac2      	ldr	r2, [pc, #776]	; (7d5c <isr+0x11cc>)
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    7a54:	fa22 f101 	lsr.w	r1, r2, r1
    7a58:	07c9      	lsls	r1, r1, #31
    7a5a:	d5ca      	bpl.n	79f2 <isr+0xe62>
    7a5c:	e7bd      	b.n	79da <isr+0xe4a>
	       (conn->role &&
    7a5e:	b92a      	cbnz	r2, 7a6c <isr+0xedc>
		((!conn->refresh &&
    7a60:	2902      	cmp	r1, #2
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    7a62:	d0ba      	beq.n	79da <isr+0xe4a>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    7a64:	2911      	cmp	r1, #17
    7a66:	d8c4      	bhi.n	79f2 <isr+0xe62>
    7a68:	4abd      	ldr	r2, [pc, #756]	; (7d60 <isr+0x11d0>)
    7a6a:	e7f3      	b.n	7a54 <isr+0xec4>
		 (conn->refresh &&
    7a6c:	1e8a      	subs	r2, r1, #2
    7a6e:	2a01      	cmp	r2, #1
    7a70:	d9b3      	bls.n	79da <isr+0xe4a>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    7a72:	290b      	cmp	r1, #11
    7a74:	e7f5      	b.n	7a62 <isr+0xed2>
	switch (pdu_data_rx->llctrl.opcode) {
    7a76:	7af5      	ldrb	r5, [r6, #11]
	pdu_data_rx = (void *)node_rx->pdu_data;
    7a78:	f106 0a08 	add.w	sl, r6, #8
	switch (pdu_data_rx->llctrl.opcode) {
    7a7c:	2d19      	cmp	r5, #25
    7a7e:	f200 8179 	bhi.w	7d74 <isr+0x11e4>
    7a82:	e8df f015 	tbh	[pc, r5, lsl #1]
    7a86:	001a      	.short	0x001a
    7a88:	00b1007e 	.word	0x00b1007e
    7a8c:	01770177 	.word	0x01770177
    7a90:	01770177 	.word	0x01770177
    7a94:	00bc0171 	.word	0x00bc0171
    7a98:	017700d9 	.word	0x017700d9
    7a9c:	00ff0177 	.word	0x00ff0177
    7aa0:	00d10177 	.word	0x00d10177
    7aa4:	01770177 	.word	0x01770177
    7aa8:	01770163 	.word	0x01770163
    7aac:	01770177 	.word	0x01770177
    7ab0:	01770177 	.word	0x01770177
    7ab4:	01770177 	.word	0x01770177
    7ab8:	018b      	.short	0x018b
		if (!_radio.conn_curr->role ||
    7aba:	f994 301d 	ldrsb.w	r3, [r4, #29]
    7abe:	2b00      	cmp	r3, #0
    7ac0:	f280 8158 	bge.w	7d74 <isr+0x11e4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND,
    7ac4:	7a71      	ldrb	r1, [r6, #9]
    7ac6:	2000      	movs	r0, #0
    7ac8:	f7fc fee6 	bl	4898 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    7acc:	2800      	cmp	r0, #0
    7ace:	f000 8151 	beq.w	7d74 <isr+0x11e4>
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    7ad2:	f8b6 1015 	ldrh.w	r1, [r6, #21]
	      conn->event_counter) & 0xFFFF) > 0x7FFF) {
    7ad6:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    7ad8:	1acb      	subs	r3, r1, r3
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    7ada:	041a      	lsls	r2, r3, #16
    7adc:	f100 8334 	bmi.w	8148 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x148>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    7ae0:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    7ae4:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
    7ae8:	429a      	cmp	r2, r3
    7aea:	f47f a8a4 	bne.w	6c36 <isr+0xa6>
	if (_radio.conn_upd == 0) {
    7aee:	f8db 2788 	ldr.w	r2, [fp, #1928]	; 0x788
    7af2:	b90a      	cbnz	r2, 7af8 <isr+0xf68>
		_radio.conn_upd = conn;
    7af4:	f8cb 4788 	str.w	r4, [fp, #1928]	; 0x788
	conn->llcp.conn_upd.win_size =
    7af8:	7b32      	ldrb	r2, [r6, #12]
    7afa:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
		pdu_data_rx->llctrl.conn_update_ind.win_offset * 1250;
    7afe:	f8b6 000d 	ldrh.w	r0, [r6, #13]
    7b02:	f240 42e2 	movw	r2, #1250	; 0x4e2
    7b06:	4342      	muls	r2, r0
	conn->llcp.conn_upd.win_offset_us =
    7b08:	66e2      	str	r2, [r4, #108]	; 0x6c
		pdu_data_rx->llctrl.conn_update_ind.interval;
    7b0a:	7c30      	ldrb	r0, [r6, #16]
    7b0c:	7bf2      	ldrb	r2, [r6, #15]
    7b0e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.interval =
    7b12:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
		pdu_data_rx->llctrl.conn_update_ind.latency;
    7b16:	7cb0      	ldrb	r0, [r6, #18]
    7b18:	7c72      	ldrb	r2, [r6, #17]
    7b1a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.latency =
    7b1e:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
		pdu_data_rx->llctrl.conn_update_ind.timeout;
    7b22:	7cf2      	ldrb	r2, [r6, #19]
    7b24:	7d30      	ldrb	r0, [r6, #20]
	conn->llcp.conn_upd.instant =
    7b26:	f8a4 1068 	strh.w	r1, [r4, #104]	; 0x68
		pdu_data_rx->llctrl.conn_update_ind.timeout;
    7b2a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.timeout =
    7b2e:	f8a4 2066 	strh.w	r2, [r4, #102]	; 0x66
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    7b32:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
	conn->llcp.conn_upd.is_internal = 0;
    7b36:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    7b3a:	f36f 0282 	bfc	r2, #2, #1
    7b3e:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
	conn->llcp_ack--;
    7b42:	3b01      	subs	r3, #1
	conn->llcp_type = LLCP_CONN_UPD;
    7b44:	2201      	movs	r2, #1
			_radio.conn_curr->procedure_expire = 0;
    7b46:	2500      	movs	r5, #0
	conn->llcp_type = LLCP_CONN_UPD;
    7b48:	f884 205e 	strb.w	r2, [r4, #94]	; 0x5e
	conn->llcp_ack--;
    7b4c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			_radio.conn_curr->procedure_expire = 0;
    7b50:	86a5      	strh	r5, [r4, #52]	; 0x34
			_radio.conn_curr->nesn++;
    7b52:	f8db 171c 	ldr.w	r1, [fp, #1820]	; 0x71c
    7b56:	f891 30a8 	ldrb.w	r3, [r1, #168]	; 0xa8
    7b5a:	f083 0302 	eor.w	r3, r3, #2
    7b5e:	f881 30a8 	strb.w	r3, [r1, #168]	; 0xa8
			if (ccm_rx_increment) {
    7b62:	f1b9 0f00 	cmp.w	r9, #0
    7b66:	f43f aea3 	beq.w	78b0 <isr+0xd20>
				_radio.conn_curr->ccm_rx.counter++;
    7b6a:	f8d1 20b9 	ldr.w	r2, [r1, #185]	; 0xb9
    7b6e:	f8d1 30bd 	ldr.w	r3, [r1, #189]	; 0xbd
    7b72:	3201      	adds	r2, #1
    7b74:	f143 0300 	adc.w	r3, r3, #0
    7b78:	f8c1 20b9 	str.w	r2, [r1, #185]	; 0xb9
    7b7c:	f8c1 30bd 	str.w	r3, [r1, #189]	; 0xbd
    7b80:	e696      	b.n	78b0 <isr+0xd20>
		if (!_radio.conn_curr->role ||
    7b82:	f994 301d 	ldrsb.w	r3, [r4, #29]
    7b86:	2b00      	cmp	r3, #0
    7b88:	f280 80f4 	bge.w	7d74 <isr+0x11e4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CHAN_MAP_IND,
    7b8c:	7a71      	ldrb	r1, [r6, #9]
    7b8e:	2001      	movs	r0, #1
    7b90:	f7fc fe82 	bl	4898 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    7b94:	2800      	cmp	r0, #0
    7b96:	f000 80ed 	beq.w	7d74 <isr+0x11e4>
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    7b9a:	f8b6 3011 	ldrh.w	r3, [r6, #17]
	      conn->event_counter) & 0xffff) > 0x7fff) {
    7b9e:	8c62      	ldrh	r2, [r4, #34]	; 0x22
    7ba0:	1a9b      	subs	r3, r3, r2
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    7ba2:	041b      	lsls	r3, r3, #16
    7ba4:	f100 82d0 	bmi.w	8148 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x148>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    7ba8:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
    7bac:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
    7bb0:	429a      	cmp	r2, r3
    7bb2:	f47f a840 	bne.w	6c36 <isr+0xa6>
	memcpy(&conn->llcp.chan_map.chm[0],
    7bb6:	2205      	movs	r2, #5
    7bb8:	f106 010c 	add.w	r1, r6, #12
    7bbc:	f104 0061 	add.w	r0, r4, #97	; 0x61
    7bc0:	f7f8 fd1a 	bl	5f8 <memcpy>
		pdu_data_rx->llctrl.chan_map_ind.instant;
    7bc4:	7c73      	ldrb	r3, [r6, #17]
    7bc6:	7cb2      	ldrb	r2, [r6, #18]
    7bc8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp.chan_map.instant =
    7bcc:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
	conn->llcp_type = LLCP_CHAN_MAP;
    7bd0:	2302      	movs	r3, #2
    7bd2:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
	conn->llcp_ack--;
    7bd6:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
	conn->llcp.chan_map.initiate = 0;
    7bda:	2500      	movs	r5, #0
	conn->llcp_ack--;
    7bdc:	3b01      	subs	r3, #1
	conn->llcp.chan_map.initiate = 0;
    7bde:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
	conn->llcp_ack--;
    7be2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    7be6:	e7b4      	b.n	7b52 <isr+0xfc2>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_TERMINATE_IND,
    7be8:	7a71      	ldrb	r1, [r6, #9]
    7bea:	2002      	movs	r0, #2
    7bec:	f7fc fe54 	bl	4898 <pdu_len_cmp>
    7bf0:	2800      	cmp	r0, #0
    7bf2:	f000 80bf 	beq.w	7d74 <isr+0x11e4>
		_radio.conn_curr->llcp_terminate.reason_peer =
    7bf6:	7b33      	ldrb	r3, [r6, #12]
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
    7bf8:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
    7bfc:	e0ab      	b.n	7d56 <isr+0x11c6>
		if (!_radio.conn_curr->role ||
    7bfe:	f994 301d 	ldrsb.w	r3, [r4, #29]
    7c02:	2b00      	cmp	r3, #0
    7c04:	f280 80b6 	bge.w	7d74 <isr+0x11e4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_REQ,
    7c08:	7a71      	ldrb	r1, [r6, #9]
    7c0a:	2008      	movs	r0, #8
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    7c0c:	f7fc fe44 	bl	4898 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    7c10:	2800      	cmp	r0, #0
    7c12:	f000 80af 	beq.w	7d74 <isr+0x11e4>
		nack = feature_rsp_send(_radio.conn_curr, pdu_data_rx);
    7c16:	4651      	mov	r1, sl
    7c18:	4620      	mov	r0, r4
    7c1a:	f7fe faf3 	bl	6204 <feature_rsp_send>
    7c1e:	4605      	mov	r5, r0
		if (!nack) {
    7c20:	2800      	cmp	r0, #0
    7c22:	f47f ae44 	bne.w	78ae <isr+0xd1e>
    7c26:	e794      	b.n	7b52 <isr+0xfc2>
		if (_radio.conn_curr->role ||
    7c28:	f994 301d 	ldrsb.w	r3, [r4, #29]
    7c2c:	2b00      	cmp	r3, #0
    7c2e:	f2c0 80a1 	blt.w	7d74 <isr+0x11e4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    7c32:	7a71      	ldrb	r1, [r6, #9]
    7c34:	200e      	movs	r0, #14
    7c36:	e7e9      	b.n	7c0c <isr+0x107c>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_RSP,
    7c38:	7a71      	ldrb	r1, [r6, #9]
    7c3a:	2009      	movs	r0, #9
    7c3c:	f7fc fe2c 	bl	4898 <pdu_len_cmp>
    7c40:	2800      	cmp	r0, #0
    7c42:	f000 8097 	beq.w	7d74 <isr+0x11e4>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    7c46:	7b33      	ldrb	r3, [r6, #12]
	       (features[1] << 8) | (features[2] << 16);
    7c48:	7b72      	ldrb	r2, [r6, #13]
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    7c4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    7c4e:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
    7c52:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
    7c56:	f043 0310 	orr.w	r3, r3, #16
    7c5a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	       (features[1] << 8) | (features[2] << 16);
    7c5e:	7bb2      	ldrb	r2, [r6, #14]
    7c60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    7c64:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
    7c68:	f3c2 0210 	ubfx	r2, r2, #0, #17
    7c6c:	4013      	ands	r3, r2
    7c6e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		_radio.conn_curr->common.fex_valid = 1;
    7c72:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    7c76:	f043 0320 	orr.w	r3, r3, #32
    7c7a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		_radio.conn_curr->procedure_expire = 0;
    7c7e:	2300      	movs	r3, #0
    7c80:	86a3      	strh	r3, [r4, #52]	; 0x34
    7c82:	e6b0      	b.n	79e6 <isr+0xe56>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_VERSION_IND,
    7c84:	7a71      	ldrb	r1, [r6, #9]
    7c86:	200c      	movs	r0, #12
    7c88:	f7fc fe06 	bl	4898 <pdu_len_cmp>
    7c8c:	2800      	cmp	r0, #0
    7c8e:	d071      	beq.n	7d74 <isr+0x11e4>
	if (!conn->llcp_version.tx) {
    7c90:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
    7c94:	f013 0501 	ands.w	r5, r3, #1
    7c98:	d152      	bne.n	7d40 <isr+0x11b0>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    7c9a:	4832      	ldr	r0, [pc, #200]	; (7d64 <isr+0x11d4>)
    7c9c:	f7fa ff83 	bl	2ba6 <mem_acquire>
		if (!node_tx) {
    7ca0:	4601      	mov	r1, r0
    7ca2:	2800      	cmp	r0, #0
    7ca4:	f43f ae03 	beq.w	78ae <isr+0xd1e>
		conn->llcp_version.tx = 1;
    7ca8:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
    7cac:	f043 0301 	orr.w	r3, r3, #1
    7cb0:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    7cb4:	7903      	ldrb	r3, [r0, #4]
    7cb6:	f043 0303 	orr.w	r3, r3, #3
    7cba:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    7cbc:	2306      	movs	r3, #6
    7cbe:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    7cc0:	230c      	movs	r3, #12
    7cc2:	71c3      	strb	r3, [r0, #7]
		v->version_number = RADIO_BLE_VERSION_NUMBER;
    7cc4:	2309      	movs	r3, #9
    7cc6:	7203      	strb	r3, [r0, #8]
		v->company_id =	RADIO_BLE_COMPANY_ID;
    7cc8:	f06f 030e 	mvn.w	r3, #14
    7ccc:	7243      	strb	r3, [r0, #9]
    7cce:	2305      	movs	r3, #5
    7cd0:	7283      	strb	r3, [r0, #10]
		v->sub_version_number =	RADIO_BLE_SUB_VERSION_NUMBER;
    7cd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7cd6:	72c3      	strb	r3, [r0, #11]
    7cd8:	7303      	strb	r3, [r0, #12]
		ctrl_tx_sec_enqueue(conn, node_tx);
    7cda:	4620      	mov	r0, r4
    7cdc:	f7fe fa78 	bl	61d0 <ctrl_tx_sec_enqueue>
	conn->empty = 1;
    7ce0:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    7ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    7ce8:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
	pdu_data_tx = (void *)radio_pkt_empty_get();
    7cec:	f001 fb38 	bl	9360 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    7cf0:	7803      	ldrb	r3, [r0, #0]
	pdu_data_tx->len = 0;
    7cf2:	7045      	strb	r5, [r0, #1]
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    7cf4:	2201      	movs	r2, #1
    7cf6:	f362 0301 	bfi	r3, r2, #0, #2
	if (conn->pkt_tx_head) {
    7cfa:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    7cfe:	7003      	strb	r3, [r0, #0]
    7d00:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
    7d02:	b1c2      	cbz	r2, 7d36 <isr+0x11a6>
		pdu_data_tx->md = 1;
    7d04:	f043 0310 	orr.w	r3, r3, #16
    7d08:	7003      	strb	r3, [r0, #0]
	conn->llcp_version.version_number = v->version_number;
    7d0a:	7b33      	ldrb	r3, [r6, #12]
    7d0c:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
	conn->llcp_version.company_id = v->company_id;
    7d10:	7bb2      	ldrb	r2, [r6, #14]
    7d12:	7b73      	ldrb	r3, [r6, #13]
    7d14:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    7d18:	f8a4 3092 	strh.w	r3, [r4, #146]	; 0x92
	conn->llcp_version.sub_version_number = v->sub_version_number;
    7d1c:	7bf3      	ldrb	r3, [r6, #15]
    7d1e:	7c32      	ldrb	r2, [r6, #16]
    7d20:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    7d24:	f8a4 3094 	strh.w	r3, [r4, #148]	; 0x94
	conn->llcp_version.rx = 1;
    7d28:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
    7d2c:	f043 0302 	orr.w	r3, r3, #2
    7d30:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    7d34:	e70d      	b.n	7b52 <isr+0xfc2>
		pdu_data_tx->md = 0;
    7d36:	f362 1304 	bfi	r3, r2, #4, #1
    7d3a:	7003      	strb	r3, [r0, #0]
	u8_t rx_enqueue = 0;
    7d3c:	4615      	mov	r5, r2
    7d3e:	e7e4      	b.n	7d0a <isr+0x117a>
	} else if (!conn->llcp_version.rx) {
    7d40:	f013 0302 	ands.w	r3, r3, #2
    7d44:	d107      	bne.n	7d56 <isr+0x11c6>
		conn->procedure_expire = 0;
    7d46:	86a3      	strh	r3, [r4, #52]	; 0x34
		*rx_enqueue = 1;
    7d48:	2501      	movs	r5, #1
    7d4a:	e7de      	b.n	7d0a <isr+0x117a>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND,
    7d4c:	7a71      	ldrb	r1, [r6, #9]
    7d4e:	2011      	movs	r0, #17
    7d50:	f7fc fda2 	bl	4898 <pdu_len_cmp>
    7d54:	b170      	cbz	r0, 7d74 <isr+0x11e4>
	u8_t rx_enqueue = 0;
    7d56:	2500      	movs	r5, #0
    7d58:	e6fb      	b.n	7b52 <isr+0xfc2>
    7d5a:	bf00      	nop
    7d5c:	00022060 	.word	0x00022060
    7d60:	00022040 	.word	0x00022040
    7d64:	20000acc 	.word	0x20000acc
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP,
    7d68:	7a71      	ldrb	r1, [r6, #9]
    7d6a:	2007      	movs	r0, #7
    7d6c:	f7fc fd94 	bl	4898 <pdu_len_cmp>
    7d70:	2800      	cmp	r0, #0
    7d72:	d184      	bne.n	7c7e <isr+0x10ee>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    7d74:	48be      	ldr	r0, [pc, #760]	; (8070 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x70>)
    7d76:	f7fa ff16 	bl	2ba6 <mem_acquire>
	if (!node_tx) {
    7d7a:	4601      	mov	r1, r0
    7d7c:	2800      	cmp	r0, #0
    7d7e:	f43f ad96 	beq.w	78ae <isr+0xd1e>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    7d82:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.unknown_rsp.type = type;
    7d84:	7205      	strb	r5, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    7d86:	f043 0303 	orr.w	r3, r3, #3
    7d8a:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
    7d8c:	2302      	movs	r3, #2
    7d8e:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
    7d90:	2307      	movs	r3, #7
    7d92:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, node_tx);
    7d94:	4620      	mov	r0, r4
    7d96:	f7fe f9ed 	bl	6174 <ctrl_tx_enqueue>
    7d9a:	e7dc      	b.n	7d56 <isr+0x11c6>
		if (_radio.conn_curr->role ||
    7d9c:	f994 301d 	ldrsb.w	r3, [r4, #29]
    7da0:	2b00      	cmp	r3, #0
    7da2:	dbe7      	blt.n	7d74 <isr+0x11e4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND,
    7da4:	7a71      	ldrb	r1, [r6, #9]
    7da6:	2019      	movs	r0, #25
    7da8:	f7fc fd76 	bl	4898 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    7dac:	2800      	cmp	r0, #0
    7dae:	d0e1      	beq.n	7d74 <isr+0x11e4>
			if (!(p->phys & 0x01)) {
    7db0:	7b35      	ldrb	r5, [r6, #12]
    7db2:	f015 0501 	ands.w	r5, r5, #1
    7db6:	f43f aecc 	beq.w	7b52 <isr+0xfc2>
			if (conn->llcp_req != conn->llcp_ack) {
    7dba:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
    7dbe:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
    7dc2:	429a      	cmp	r2, r3
    7dc4:	d1c7      	bne.n	7d56 <isr+0x11c6>
			memcpy(&conn->llcp.chan_map.chm[0],
    7dc6:	2205      	movs	r2, #5
    7dc8:	49aa      	ldr	r1, [pc, #680]	; (8074 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x74>)
    7dca:	f104 0061 	add.w	r0, r4, #97	; 0x61
    7dce:	f7f8 fc13 	bl	5f8 <memcpy>
			conn->llcp.chan_map.initiate = 1;
    7dd2:	2301      	movs	r3, #1
    7dd4:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
			conn->llcp_type = LLCP_CHAN_MAP;
    7dd8:	2302      	movs	r3, #2
    7dda:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
			conn->llcp_ack--;
    7dde:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
    7de2:	3b01      	subs	r3, #1
    7de4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    7de8:	e7b5      	b.n	7d56 <isr+0x11c6>
		if (_radio.crc_expire == 0) {
    7dea:	f89b 3721 	ldrb.w	r3, [fp, #1825]	; 0x721
    7dee:	b913      	cbnz	r3, 7df6 <isr+0x1266>
			_radio.crc_expire = 2;
    7df0:	2302      	movs	r3, #2
    7df2:	f88b 3721 	strb.w	r3, [fp, #1825]	; 0x721
		_radio.crc_expire--;
    7df6:	f89b 4721 	ldrb.w	r4, [fp, #1825]	; 0x721
		if (!_radio.conn_curr->supervision_expire) {
    7dfa:	f8db 371c 	ldr.w	r3, [fp, #1820]	; 0x71c
		_radio.crc_expire--;
    7dfe:	3c01      	subs	r4, #1
    7e00:	b2e4      	uxtb	r4, r4
    7e02:	f88b 4721 	strb.w	r4, [fp, #1825]	; 0x721
		if (!_radio.conn_curr->supervision_expire) {
    7e06:	8e1d      	ldrh	r5, [r3, #48]	; 0x30
		crc_close = (_radio.crc_expire == 0);
    7e08:	fab4 f484 	clz	r4, r4
    7e0c:	0964      	lsrs	r4, r4, #5
		if (!_radio.conn_curr->supervision_expire) {
    7e0e:	b91d      	cbnz	r5, 7e18 <isr+0x1288>
			_radio.conn_curr->supervision_expire =
    7e10:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
    7e12:	861a      	strh	r2, [r3, #48]	; 0x30
	struct radio_pdu_node_tx *tx_release = NULL;
    7e14:	46a8      	mov	r8, r5
    7e16:	e551      	b.n	78bc <isr+0xd2c>
	u8_t rx_enqueue = 0;
    7e18:	2500      	movs	r5, #0
    7e1a:	e7fb      	b.n	7e14 <isr+0x1284>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    7e1c:	2303      	movs	r3, #3
    7e1e:	e56e      	b.n	78fe <isr+0xd6e>
			radio_switch_complete_and_disable();
    7e20:	f001 fabc 	bl	939c <radio_switch_complete_and_disable>
	pdu_data_tx->sn = _radio.conn_curr->sn;
    7e24:	990d      	ldr	r1, [sp, #52]	; 0x34
    7e26:	f8db 071c 	ldr.w	r0, [fp, #1820]	; 0x71c
    7e2a:	780b      	ldrb	r3, [r1, #0]
    7e2c:	f890 20a8 	ldrb.w	r2, [r0, #168]	; 0xa8
    7e30:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
    7e34:	f3c2 0240 	ubfx	r2, r2, #1, #1
    7e38:	f362 0382 	bfi	r3, r2, #2, #1
    7e3c:	700b      	strb	r3, [r1, #0]
	tx_packet_set(_radio.conn_curr, pdu_data_tx);
    7e3e:	f7fd fa9a 	bl	5376 <tx_packet_set>
	LL_ASSERT(!radio_is_ready());
    7e42:	f001 fa59 	bl	92f8 <radio_is_ready>
    7e46:	2800      	cmp	r0, #0
    7e48:	f43f acf3 	beq.w	7832 <isr+0xca2>
    7e4c:	f7fe bef3 	b.w	6c36 <isr+0xa6>
		radio_tmr_tifs_set(RADIO_TIFS);
    7e50:	2096      	movs	r0, #150	; 0x96
    7e52:	f001 fb1d 	bl	9490 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    7e56:	2000      	movs	r0, #0
    7e58:	f001 fa8a 	bl	9370 <radio_switch_complete_and_rx>
		radio_tmr_end_capture();
    7e5c:	f001 fbf4 	bl	9648 <radio_tmr_end_capture>
    7e60:	e7e0      	b.n	7e24 <isr+0x1294>
	switch (_radio.role) {
    7e62:	f89b 2013 	ldrb.w	r2, [fp, #19]
    7e66:	2a04      	cmp	r2, #4
    7e68:	f63e aee5 	bhi.w	6c36 <isr+0xa6>
    7e6c:	e8df f012 	tbh	[pc, r2, lsl #1]
    7e70:	00050161 	.word	0x00050161
    7e74:	00620037 	.word	0x00620037
    7e78:	0062      	.short	0x0062
	if ((_radio.state == STATE_CLOSE) && (_radio.advertiser.ext_adv == 0) &&
    7e7a:	2b03      	cmp	r3, #3
    7e7c:	d10d      	bne.n	7e9a <isr+0x130a>
    7e7e:	f89b 3029 	ldrb.w	r3, [fp, #41]	; 0x29
    7e82:	07de      	lsls	r6, r3, #31
    7e84:	d409      	bmi.n	7e9a <isr+0x130a>
	    (_radio.advertiser.chan_map_current != 0)) {
    7e86:	f89b 3028 	ldrb.w	r3, [fp, #40]	; 0x28
	if ((_radio.state == STATE_CLOSE) && (_radio.advertiser.ext_adv == 0) &&
    7e8a:	075d      	lsls	r5, r3, #29
    7e8c:	d005      	beq.n	7e9a <isr+0x130a>
		adv_setup();
    7e8e:	f7fd f829 	bl	4ee4 <adv_setup>
		radio_tx_enable();
    7e92:	f001 fa0d 	bl	92b0 <radio_tx_enable>
    7e96:	f7fe bedf 	b.w	6c58 <isr+0xc8>
		radio_filter_disable();
    7e9a:	f001 fac9 	bl	9430 <radio_filter_disable>
	_radio.role = ROLE_NONE;
    7e9e:	2400      	movs	r4, #0
    7ea0:	f88b 4013 	strb.w	r4, [fp, #19]
	_radio.state = STATE_NONE;
    7ea4:	f88b 4014 	strb.w	r4, [fp, #20]
	_radio.ticker_id_event = 0;
    7ea8:	f88b 4011 	strb.w	r4, [fp, #17]
	radio_tmr_stop();
    7eac:	f001 fb6e 	bl	958c <radio_tmr_stop>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    7eb0:	4622      	mov	r2, r4
    7eb2:	4621      	mov	r1, r4
    7eb4:	4620      	mov	r0, r4
    7eb6:	4b70      	ldr	r3, [pc, #448]	; (8078 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x78>)
    7eb8:	f7fa ff2e 	bl	2d18 <mayfly_enqueue>
	LL_ASSERT(!retval);
    7ebc:	4604      	mov	r4, r0
    7ebe:	2800      	cmp	r0, #0
    7ec0:	f47e aeb9 	bne.w	6c36 <isr+0xa6>
	clock_control_off(_radio.hf_clock, NULL);
    7ec4:	f8db 0000 	ldr.w	r0, [fp]
    7ec8:	6843      	ldr	r3, [r0, #4]
    7eca:	4621      	mov	r1, r4
    7ecc:	685b      	ldr	r3, [r3, #4]
    7ece:	4798      	blx	r3
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    7ed0:	2201      	movs	r2, #1
    7ed2:	4611      	mov	r1, r2
    7ed4:	4620      	mov	r0, r4
    7ed6:	f7fa fef7 	bl	2cc8 <mayfly_enable>
    7eda:	f7fe bee1 	b.w	6ca0 <isr+0x110>
	if (_radio.state == STATE_CLOSE) {
    7ede:	2b03      	cmp	r3, #3
    7ee0:	d11a      	bne.n	7f18 <isr+0x1388>
		radio_tmr_tifs_set(RADIO_TIFS);
    7ee2:	2096      	movs	r0, #150	; 0x96
    7ee4:	f001 fad4 	bl	9490 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    7ee8:	2300      	movs	r3, #0
    7eea:	4619      	mov	r1, r3
    7eec:	461a      	mov	r2, r3
    7eee:	4618      	mov	r0, r3
    7ef0:	f001 fa4a 	bl	9388 <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
    7ef4:	f8db 373c 	ldr.w	r3, [fp, #1852]	; 0x73c
    7ef8:	f89b 2741 	ldrb.w	r2, [fp, #1857]	; 0x741
		radio_pkt_rx_set(_radio.packet_rx
    7efc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    7f00:	3008      	adds	r0, #8
    7f02:	f001 f9b5 	bl	9270 <radio_pkt_rx_set>
		radio_rssi_measure();
    7f06:	f001 fa57 	bl	93b8 <radio_rssi_measure>
		_radio.state = STATE_RX;
    7f0a:	2301      	movs	r3, #1
    7f0c:	f88b 3014 	strb.w	r3, [fp, #20]
		radio_rx_enable();
    7f10:	f001 f9c8 	bl	92a4 <radio_rx_enable>
    7f14:	f7fe bea0 	b.w	6c58 <isr+0xc8>
		radio_filter_disable();
    7f18:	f001 fa8a 	bl	9430 <radio_filter_disable>
		if (_radio.state == STATE_ABORT) {
    7f1c:	f89b 3014 	ldrb.w	r3, [fp, #20]
    7f20:	2b05      	cmp	r3, #5
    7f22:	d1bc      	bne.n	7e9e <isr+0x130e>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    7f24:	2300      	movs	r3, #0
    7f26:	9300      	str	r3, [sp, #0]
    7f28:	2204      	movs	r2, #4
    7f2a:	4619      	mov	r1, r3
    7f2c:	4618      	mov	r0, r3
    7f2e:	f7fb fd3b 	bl	39a8 <ticker_stop>
    7f32:	e7b4      	b.n	7e9e <isr+0x130e>
	if (_radio.conn_curr == 0) {
    7f34:	f8db 071c 	ldr.w	r0, [fp, #1820]	; 0x71c
    7f38:	2800      	cmp	r0, #0
    7f3a:	d0b0      	beq.n	7e9e <isr+0x130e>
	reason_peer = _radio.conn_curr->llcp_terminate.reason_peer;
    7f3c:	f890 109b 	ldrb.w	r1, [r0, #155]	; 0x9b
	if (reason_peer && ((_radio.role == ROLE_SLAVE) ||
    7f40:	b189      	cbz	r1, 7f66 <isr+0x13d6>
    7f42:	f89b 3013 	ldrb.w	r3, [fp, #19]
    7f46:	2b03      	cmp	r3, #3
    7f48:	d003      	beq.n	7f52 <isr+0x13c2>
    7f4a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    7f4e:	07dc      	lsls	r4, r3, #31
    7f50:	d509      	bpl.n	7f66 <isr+0x13d6>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
    7f52:	f7fd faf7 	bl	5544 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    7f56:	f8db 071c 	ldr.w	r0, [fp, #1820]	; 0x71c
    7f5a:	f7fd fc1f 	bl	579c <connection_release>
			_radio.conn_curr = NULL;
    7f5e:	2300      	movs	r3, #0
    7f60:	f8cb 371c 	str.w	r3, [fp, #1820]	; 0x71c
    7f64:	e79b      	b.n	7e9e <isr+0x130e>
	latency_event = _radio.conn_curr->latency_event;
    7f66:	8d46      	ldrh	r6, [r0, #42]	; 0x2a
	if (_radio.packet_counter &&
    7f68:	f89b 7720 	ldrb.w	r7, [fp, #1824]	; 0x720
	elapsed_event = latency_event + 1;
    7f6c:	1c75      	adds	r5, r6, #1
    7f6e:	b2ad      	uxth	r5, r5
	if (_radio.packet_counter &&
    7f70:	2f00      	cmp	r7, #0
    7f72:	d06d      	beq.n	8050 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x50>
		if (_radio.role == ROLE_SLAVE) {
    7f74:	f89b 3013 	ldrb.w	r3, [fp, #19]
    7f78:	2b03      	cmp	r3, #3
    7f7a:	d15d      	bne.n	8038 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x38>
			start_to_address_actual_us = radio_tmr_aa_restore() -
    7f7c:	f001 fb58 	bl	9630 <radio_tmr_aa_restore>
    7f80:	4680      	mov	r8, r0
						     radio_tmr_ready_get();
    7f82:	f001 fb5b 	bl	963c <radio_tmr_ready_get>
				_radio.conn_curr->slave.window_widening_event_us;
    7f86:	f8db 771c 	ldr.w	r7, [fp, #1820]	; 0x71c
    7f8a:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 807c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7c>
			start_to_address_actual_us = radio_tmr_aa_restore() -
    7f8e:	eba8 0800 	sub.w	r8, r8, r0
			window_widening_event_us =
    7f92:	6cb8      	ldr	r0, [r7, #72]	; 0x48
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
    7f94:	f100 0a58 	add.w	sl, r0, #88	; 0x58
			if (start_to_address_actual_us <=
    7f98:	45d0      	cmp	r8, sl
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    7f9a:	a333      	add	r3, pc, #204	; (adr r3, 8068 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x68>)
    7f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
			if (start_to_address_actual_us <=
    7fa0:	d83d      	bhi.n	801e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1e>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    7fa2:	fba0 0109 	umull	r0, r1, r0, r9
    7fa6:	f7f8 f95f 	bl	268 <__aeabi_uldivmod>
    7faa:	b284      	uxth	r4, r0
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    7fac:	ebaa 0008 	sub.w	r0, sl, r8
    7fb0:	a32d      	add	r3, pc, #180	; (adr r3, 8068 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x68>)
    7fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
    7fb6:	fba0 0109 	umull	r0, r1, r0, r9
    7fba:	f7f8 f955 	bl	268 <__aeabi_uldivmod>
    7fbe:	b283      	uxth	r3, r0
			_radio.conn_curr->slave.window_widening_event_us = 0;
    7fc0:	2200      	movs	r2, #0
    7fc2:	64ba      	str	r2, [r7, #72]	; 0x48
			_radio.conn_curr->slave.window_size_event_us = 0;
    7fc4:	653a      	str	r2, [r7, #80]	; 0x50
			if (_radio.conn_curr->pkt_tx_head) {
    7fc6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
    7fca:	b37a      	cbz	r2, 802c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2c>
				if (pdu_data_tx->len ||
    7fcc:	7952      	ldrb	r2, [r2, #5]
    7fce:	b912      	cbnz	r2, 7fd6 <isr+0x1446>
    7fd0:	f897 2101 	ldrb.w	r2, [r7, #257]	; 0x101
    7fd4:	b10a      	cbz	r2, 7fda <isr+0x144a>
					_radio.conn_curr->latency_event = 0;
    7fd6:	2200      	movs	r2, #0
				_radio.conn_curr->latency_event =
    7fd8:	857a      	strh	r2, [r7, #42]	; 0x2a
		_radio.conn_curr->connect_expire = 0;
    7fda:	f8db 271c 	ldr.w	r2, [fp, #1820]	; 0x71c
    7fde:	2100      	movs	r1, #0
    7fe0:	8591      	strh	r1, [r2, #44]	; 0x2c
	if (_radio.conn_curr->supervision_expire) {
    7fe2:	f8db 071c 	ldr.w	r0, [fp, #1820]	; 0x71c
    7fe6:	8e02      	ldrh	r2, [r0, #48]	; 0x30
    7fe8:	b1ba      	cbz	r2, 801a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a>
		if (_radio.conn_curr->supervision_expire > elapsed_event) {
    7fea:	4295      	cmp	r5, r2
    7fec:	f080 8099 	bcs.w	8122 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x122>
			_radio.conn_curr->supervision_expire -= elapsed_event;
    7ff0:	1b52      	subs	r2, r2, r5
    7ff2:	b292      	uxth	r2, r2
			_radio.conn_curr->latency_event = 0;
    7ff4:	2100      	movs	r1, #0
			if (_radio.conn_curr->supervision_expire <= 6) {
    7ff6:	2a06      	cmp	r2, #6
			_radio.conn_curr->supervision_expire -= elapsed_event;
    7ff8:	8602      	strh	r2, [r0, #48]	; 0x30
			_radio.conn_curr->latency_event = 0;
    7ffa:	8541      	strh	r1, [r0, #42]	; 0x2a
			if (_radio.conn_curr->supervision_expire <= 6) {
    7ffc:	f240 8093 	bls.w	8126 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x126>
			else if (_radio.role == ROLE_SLAVE) {
    8000:	f89b 2013 	ldrb.w	r2, [fp, #19]
    8004:	2a03      	cmp	r2, #3
    8006:	d108      	bne.n	801a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a>
				if (latency_event != 0) {
    8008:	2e00      	cmp	r6, #0
    800a:	f040 808c 	bne.w	8126 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x126>
					force = _radio.conn_curr->slave.force & 0x01;
    800e:	6d47      	ldr	r7, [r0, #84]	; 0x54
					_radio.conn_curr->slave.force >>= 1;
    8010:	087a      	lsrs	r2, r7, #1
					if (force) {
    8012:	f017 0701 	ands.w	r7, r7, #1
    8016:	d144      	bne.n	80a2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa2>
					_radio.conn_curr->slave.force >>= 1;
    8018:	6542      	str	r2, [r0, #84]	; 0x54
	force = 0;
    801a:	2700      	movs	r7, #0
    801c:	e044      	b.n	80a8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa8>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    801e:	fba8 0109 	umull	r0, r1, r8, r9
    8022:	f7f8 f921 	bl	268 <__aeabi_uldivmod>
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    8026:	2302      	movs	r3, #2
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    8028:	b284      	uxth	r4, r0
    802a:	e7c9      	b.n	7fc0 <isr+0x1430>
			} else if (_radio.conn_curr->slave.latency_enabled) {
    802c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
    8030:	07d2      	lsls	r2, r2, #31
    8032:	d5d2      	bpl.n	7fda <isr+0x144a>
				_radio.conn_curr->latency_event =
    8034:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    8036:	e7cf      	b.n	7fd8 <isr+0x1448>
		} else if (reason_peer) {
    8038:	b141      	cbz	r1, 804c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4c>
			_radio.conn_curr->master.terminate_ack = 1;
    803a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    803e:	f043 0301 	orr.w	r3, r3, #1
    8042:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
	ticks_drift_minus = 0;
    8046:	2300      	movs	r3, #0
	ticks_drift_plus = 0;
    8048:	461c      	mov	r4, r3
    804a:	e7c6      	b.n	7fda <isr+0x144a>
	ticks_drift_minus = 0;
    804c:	460b      	mov	r3, r1
    804e:	e7fb      	b.n	8048 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x48>
	else if (_radio.conn_curr->connect_expire) {
    8050:	8d84      	ldrh	r4, [r0, #44]	; 0x2c
    8052:	b1fc      	cbz	r4, 8094 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x94>
		if (_radio.conn_curr->connect_expire > elapsed_event) {
    8054:	42a5      	cmp	r5, r4
    8056:	d213      	bcs.n	8080 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x80>
			_radio.conn_curr->connect_expire -= elapsed_event;
    8058:	1b64      	subs	r4, r4, r5
    805a:	8584      	strh	r4, [r0, #44]	; 0x2c
	ticks_drift_minus = 0;
    805c:	463c      	mov	r4, r7
    805e:	4623      	mov	r3, r4
    8060:	e7bf      	b.n	7fe2 <isr+0x1452>
    8062:	bf00      	nop
    8064:	f3af 8000 	nop.w
    8068:	1afd498d 	.word	0x1afd498d
    806c:	00000007 	.word	0x00000007
    8070:	20000acc 	.word	0x20000acc
    8074:	20000a92 	.word	0x20000a92
    8078:	20003830 	.word	0x20003830
    807c:	3b9aca00 	.word	0x3b9aca00
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x3e);
    8080:	213e      	movs	r1, #62	; 0x3e
    8082:	f7fd fa5f 	bl	5544 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    8086:	f8db 071c 	ldr.w	r0, [fp, #1820]	; 0x71c
    808a:	f7fd fb87 	bl	579c <connection_release>
			_radio.conn_curr = NULL;
    808e:	f8cb 771c 	str.w	r7, [fp, #1820]	; 0x71c
    8092:	e704      	b.n	7e9e <isr+0x130e>
		if (!_radio.conn_curr->supervision_expire) {
    8094:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    8096:	2b00      	cmp	r3, #0
    8098:	d1e1      	bne.n	805e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5e>
			_radio.conn_curr->supervision_expire =
    809a:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    809c:	8602      	strh	r2, [r0, #48]	; 0x30
	ticks_drift_plus = 0;
    809e:	461c      	mov	r4, r3
    80a0:	e79f      	b.n	7fe2 <isr+0x1452>
						_radio.conn_curr->slave.force |=
    80a2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    80a6:	6542      	str	r2, [r0, #84]	; 0x54
	if (_radio.conn_curr->procedure_expire != 0) {
    80a8:	8e82      	ldrh	r2, [r0, #52]	; 0x34
    80aa:	b11a      	cbz	r2, 80b4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb4>
		if (_radio.conn_curr->procedure_expire > elapsed_event) {
    80ac:	4295      	cmp	r5, r2
    80ae:	d23c      	bcs.n	812a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x12a>
			_radio.conn_curr->procedure_expire -= elapsed_event;
    80b0:	1b55      	subs	r5, r2, r5
    80b2:	8685      	strh	r5, [r0, #52]	; 0x34
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    80b4:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
    80b8:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
    80bc:	4291      	cmp	r1, r2
    80be:	d006      	beq.n	80ce <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xce>
	    ((_radio.conn_curr->llcp_type == LLCP_CONN_UPD) ||
    80c0:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    80c4:	3a01      	subs	r2, #1
    80c6:	2a01      	cmp	r2, #1
		_radio.conn_curr->latency_event = 0;
    80c8:	bf9c      	itt	ls
    80ca:	2200      	movls	r2, #0
    80cc:	8542      	strhls	r2, [r0, #42]	; 0x2a
	if ((force) || (latency_event != _radio.conn_curr->latency_event)) {
    80ce:	b917      	cbnz	r7, 80d6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd6>
    80d0:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
    80d2:	42b2      	cmp	r2, r6
    80d4:	d02b      	beq.n	812e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x12e>
		lazy = _radio.conn_curr->latency_event + 1;
    80d6:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
    80d8:	3101      	adds	r1, #1
    80da:	b289      	uxth	r1, r1
	if ((ticks_drift_plus != 0) || (ticks_drift_minus != 0) ||
    80dc:	b924      	cbnz	r4, 80e8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe8>
    80de:	b91b      	cbnz	r3, 80e8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe8>
    80e0:	b911      	cbnz	r1, 80e8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe8>
	    (lazy != 0) || (force != 0)) {
    80e2:	2f00      	cmp	r7, #0
    80e4:	f43f aedb 	beq.w	7e9e <isr+0x130e>
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    80e8:	f890 5020 	ldrb.w	r5, [r0, #32]
		ticker_status =
    80ec:	4a17      	ldr	r2, [pc, #92]	; (814c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14c>)
    80ee:	9103      	str	r1, [sp, #12]
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    80f0:	3507      	adds	r5, #7
		ticker_status =
    80f2:	2100      	movs	r1, #0
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    80f4:	b2ed      	uxtb	r5, r5
		ticker_status =
    80f6:	9205      	str	r2, [sp, #20]
    80f8:	9300      	str	r3, [sp, #0]
				      (void *)(u32_t)ticker_id);
    80fa:	9506      	str	r5, [sp, #24]
		ticker_status =
    80fc:	4623      	mov	r3, r4
    80fe:	9704      	str	r7, [sp, #16]
    8100:	9102      	str	r1, [sp, #8]
    8102:	9101      	str	r1, [sp, #4]
    8104:	462a      	mov	r2, r5
    8106:	4608      	mov	r0, r1
    8108:	f7fb fc00 	bl	390c <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    810c:	f030 0302 	bics.w	r3, r0, #2
    8110:	f43f aec5 	beq.w	7e9e <isr+0x130e>
    8114:	f89b 3012 	ldrb.w	r3, [fp, #18]
    8118:	429d      	cmp	r5, r3
    811a:	f43f aec0 	beq.w	7e9e <isr+0x130e>
    811e:	f7fe bd8a 	b.w	6c36 <isr+0xa6>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
    8122:	2108      	movs	r1, #8
    8124:	e715      	b.n	7f52 <isr+0x13c2>
				force = 1;
    8126:	2701      	movs	r7, #1
    8128:	e7be      	b.n	80a8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa8>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x22);
    812a:	2122      	movs	r1, #34	; 0x22
    812c:	e711      	b.n	7f52 <isr+0x13c2>
	lazy = 0;
    812e:	4639      	mov	r1, r7
    8130:	e7d4      	b.n	80dc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xdc>
		LL_ASSERT((_radio.state == STATE_STOP) ||
    8132:	3b04      	subs	r3, #4
    8134:	2b01      	cmp	r3, #1
    8136:	f63e ad7e 	bhi.w	6c36 <isr+0xa6>
		_radio.state = STATE_NONE;
    813a:	2300      	movs	r3, #0
    813c:	f88b 3014 	strb.w	r3, [fp, #20]
    8140:	f7fe bdae 	b.w	6ca0 <isr+0x110>
    8144:	f7fd fc63 	bl	5a0e <isr.part.46>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
    8148:	2328      	movs	r3, #40	; 0x28
    814a:	e555      	b.n	7bf8 <isr+0x1068>
    814c:	00005975 	.word	0x00005975

00008150 <mayfly_xtal_stop_calc>:
{
    8150:	b5f0      	push	{r4, r5, r6, r7, lr}
    8152:	b08f      	sub	sp, #60	; 0x3c
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    8154:	2302      	movs	r3, #2
    8156:	9309      	str	r3, [sp, #36]	; 0x24
	ticker_id_next = 0xff;
    8158:	22ff      	movs	r2, #255	; 0xff
	struct connection *conn_curr = NULL;
    815a:	2300      	movs	r3, #0
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    815c:	4e74      	ldr	r6, [pc, #464]	; (8330 <mayfly_xtal_stop_calc+0x1e0>)
				    _radio.connection_count));
    815e:	4d75      	ldr	r5, [pc, #468]	; (8334 <mayfly_xtal_stop_calc+0x1e4>)
	struct connection *conn_curr = NULL;
    8160:	930a      	str	r3, [sp, #40]	; 0x28
{
    8162:	4604      	mov	r4, r0
	struct connection *conn_next = NULL;
    8164:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker_id_next = 0xff;
    8166:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
	ticks_to_expire = 0;
    816a:	930c      	str	r3, [sp, #48]	; 0x30
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    816c:	ab09      	add	r3, sp, #36	; 0x24
    816e:	9302      	str	r3, [sp, #8]
    8170:	ab0c      	add	r3, sp, #48	; 0x30
    8172:	9300      	str	r3, [sp, #0]
    8174:	9601      	str	r6, [sp, #4]
    8176:	ab0d      	add	r3, sp, #52	; 0x34
    8178:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    817c:	2101      	movs	r1, #1
    817e:	2000      	movs	r0, #0
    8180:	f7fb fc4e 	bl	3a20 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    8184:	2802      	cmp	r0, #2
    8186:	d00b      	beq.n	81a0 <mayfly_xtal_stop_calc+0x50>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    8188:	9b09      	ldr	r3, [sp, #36]	; 0x24
    818a:	b16b      	cbz	r3, 81a8 <mayfly_xtal_stop_calc+0x58>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    818c:	4040      	eors	r0, r0
    818e:	f380 8811 	msr	BASEPRI, r0
    8192:	f04f 0004 	mov.w	r0, #4
    8196:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    8198:	2101      	movs	r1, #1
    819a:	2000      	movs	r0, #0
    819c:	f7fb fcbe 	bl	3b1c <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    81a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    81a2:	2b02      	cmp	r3, #2
    81a4:	d0f8      	beq.n	8198 <mayfly_xtal_stop_calc+0x48>
    81a6:	e7ef      	b.n	8188 <mayfly_xtal_stop_calc+0x38>
	} while (ticker_id_next != TICKER_NULL &&
    81a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				    _radio.connection_count));
    81ac:	2bff      	cmp	r3, #255	; 0xff
    81ae:	d004      	beq.n	81ba <mayfly_xtal_stop_calc+0x6a>
    81b0:	f895 2718 	ldrb.w	r2, [r5, #1816]	; 0x718
		 ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    81b4:	3207      	adds	r2, #7
	} while (ticker_id_next != TICKER_NULL &&
    81b6:	4293      	cmp	r3, r2
    81b8:	dad8      	bge.n	816c <mayfly_xtal_stop_calc+0x1c>
	if ((ticker_id_next == TICKER_NULL) ||
    81ba:	1f5a      	subs	r2, r3, #5
    81bc:	b2d2      	uxtb	r2, r2
    81be:	2af9      	cmp	r2, #249	; 0xf9
    81c0:	4f5d      	ldr	r7, [pc, #372]	; (8338 <mayfly_xtal_stop_calc+0x1e8>)
    81c2:	d805      	bhi.n	81d0 <mayfly_xtal_stop_calc+0x80>
				_radio.connection_count))) {
    81c4:	4a5b      	ldr	r2, [pc, #364]	; (8334 <mayfly_xtal_stop_calc+0x1e4>)
    81c6:	f892 2718 	ldrb.w	r2, [r2, #1816]	; 0x718
	    (ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    81ca:	3207      	adds	r2, #7
	    (ticker_id_next < RADIO_TICKER_ID_ADV) ||
    81cc:	4293      	cmp	r3, r2
    81ce:	db06      	blt.n	81de <mayfly_xtal_stop_calc+0x8e>
		if (s_xtal_retained) {
    81d0:	783b      	ldrb	r3, [r7, #0]
    81d2:	b113      	cbz	r3, 81da <mayfly_xtal_stop_calc+0x8a>
    81d4:	2001      	movs	r0, #1
    81d6:	f7fd f891 	bl	52fc <mayfly_xtal_retain.part.16>
}
    81da:	b00f      	add	sp, #60	; 0x3c
    81dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	hdr_curr = hdr_conn_get(ticker_id_curr, &conn_curr);
    81de:	a90a      	add	r1, sp, #40	; 0x28
    81e0:	b2e0      	uxtb	r0, r4
    81e2:	f7fd f86d 	bl	52c0 <hdr_conn_get>
	LL_ASSERT(hdr_curr);
    81e6:	2800      	cmp	r0, #0
    81e8:	d0d0      	beq.n	818c <mayfly_xtal_stop_calc+0x3c>
	if (hdr_curr->ticks_xtal_to_start & XON_BITMASK) {
    81ea:	6803      	ldr	r3, [r0, #0]
    81ec:	6844      	ldr	r4, [r0, #4]
    81ee:	2b00      	cmp	r3, #0
		ticks_slot_abs = (hdr_curr->ticks_active_to_start >
    81f0:	bfb8      	it	lt
    81f2:	6883      	ldrlt	r3, [r0, #8]
		ticks_slot_abs = (hdr_curr->ticks_active_to_start >
    81f4:	429c      	cmp	r4, r3
    81f6:	bf38      	it	cc
    81f8:	461c      	movcc	r4, r3
	ticks_slot_abs += hdr_curr->ticks_slot;
    81fa:	68c3      	ldr	r3, [r0, #12]
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    81fc:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    8200:	a90b      	add	r1, sp, #44	; 0x2c
	ticks_slot_abs += hdr_curr->ticks_slot;
    8202:	441c      	add	r4, r3
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    8204:	f7fd f85c 	bl	52c0 <hdr_conn_get>
	LL_ASSERT(hdr_next);
    8208:	4605      	mov	r5, r0
    820a:	2800      	cmp	r0, #0
    820c:	d0be      	beq.n	818c <mayfly_xtal_stop_calc+0x3c>
	ticks_prepare_to_start_next = (hdr_next->ticks_active_to_start >
    820e:	6886      	ldr	r6, [r0, #8]
    8210:	6843      	ldr	r3, [r0, #4]
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
    8212:	6802      	ldr	r2, [r0, #0]
	ticks_prepare_to_start_next = (hdr_next->ticks_active_to_start >
    8214:	429e      	cmp	r6, r3
    8216:	bf38      	it	cc
    8218:	461e      	movcc	r6, r3
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
    821a:	2a00      	cmp	r2, #0
    821c:	da05      	bge.n	822a <mayfly_xtal_stop_calc+0xda>
		ticks_to_expire -=
    821e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			(hdr_next->ticks_xtal_to_start &
    8220:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
		ticks_to_expire -=
    8224:	4433      	add	r3, r6
    8226:	1a9b      	subs	r3, r3, r2
    8228:	930c      	str	r3, [sp, #48]	; 0x30
	if (ticks_to_expire >
    822a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	    (ticks_slot_abs +
    822c:	f104 0331 	add.w	r3, r4, #49	; 0x31
	if (ticks_to_expire >
    8230:	4293      	cmp	r3, r2
    8232:	d20b      	bcs.n	824c <mayfly_xtal_stop_calc+0xfc>
		if (s_xtal_retained) {
    8234:	783b      	ldrb	r3, [r7, #0]
    8236:	b113      	cbz	r3, 823e <mayfly_xtal_stop_calc+0xee>
    8238:	2001      	movs	r0, #1
    823a:	f7fd f85f 	bl	52fc <mayfly_xtal_retain.part.16>
		prepare_normal_set(hdr_next, RADIO_TICKER_USER_ID_JOB,
    823e:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    8242:	2101      	movs	r1, #1
    8244:	4628      	mov	r0, r5
    8246:	f7fd f8ed 	bl	5424 <prepare_normal_set>
    824a:	e7c6      	b.n	81da <mayfly_xtal_stop_calc+0x8a>
		if (!s_xtal_retained) {
    824c:	783a      	ldrb	r2, [r7, #0]
    824e:	b93a      	cbnz	r2, 8260 <mayfly_xtal_stop_calc+0x110>
			s_xtal_retained = 1;
    8250:	2001      	movs	r0, #1
			retval = mayfly_enqueue(caller_id,
    8252:	4b3a      	ldr	r3, [pc, #232]	; (833c <mayfly_xtal_stop_calc+0x1ec>)
			s_xtal_retained = 1;
    8254:	7038      	strb	r0, [r7, #0]
			retval = mayfly_enqueue(caller_id,
    8256:	4611      	mov	r1, r2
    8258:	f7fa fd5e 	bl	2d18 <mayfly_enqueue>
			LL_ASSERT(!retval);
    825c:	2800      	cmp	r0, #0
    825e:	d195      	bne.n	818c <mayfly_xtal_stop_calc+0x3c>
		if (!(hdr_next->ticks_xtal_to_start & XON_BITMASK) &&
    8260:	682b      	ldr	r3, [r5, #0]
    8262:	2b00      	cmp	r3, #0
    8264:	db15      	blt.n	8292 <mayfly_xtal_stop_calc+0x142>
    8266:	429e      	cmp	r6, r3
    8268:	d213      	bcs.n	8292 <mayfly_xtal_stop_calc+0x142>
			u32_t ticks_drift_plus = hdr_next->ticks_xtal_to_start -
    826a:	1b9b      	subs	r3, r3, r6
			ticker_status =
    826c:	2000      	movs	r0, #0
				ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    826e:	b29b      	uxth	r3, r3
			ticker_status =
    8270:	4933      	ldr	r1, [pc, #204]	; (8340 <mayfly_xtal_stop_calc+0x1f0>)
    8272:	9105      	str	r1, [sp, #20]
    8274:	9302      	str	r3, [sp, #8]
    8276:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    827a:	9506      	str	r5, [sp, #24]
    827c:	9004      	str	r0, [sp, #16]
    827e:	9003      	str	r0, [sp, #12]
    8280:	9001      	str	r0, [sp, #4]
    8282:	9000      	str	r0, [sp, #0]
    8284:	2101      	movs	r1, #1
    8286:	f7fb fb41 	bl	390c <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    828a:	f030 0302 	bics.w	r3, r0, #2
    828e:	f47f af7d 	bne.w	818c <mayfly_xtal_stop_calc+0x3c>
		if (!conn_curr || !conn_next) {
    8292:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    8294:	2e00      	cmp	r6, #0
    8296:	d0a0      	beq.n	81da <mayfly_xtal_stop_calc+0x8a>
    8298:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    829a:	2d00      	cmp	r5, #0
    829c:	d09d      	beq.n	81da <mayfly_xtal_stop_calc+0x8a>
		if (conn_curr->conn_interval == conn_next->conn_interval) {
    829e:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
    82a0:	8caa      	ldrh	r2, [r5, #36]	; 0x24
    82a2:	429a      	cmp	r2, r3
    82a4:	d199      	bne.n	81da <mayfly_xtal_stop_calc+0x8a>
			u32_t ticks_conn_interval = HAL_TICKER_US_TO_TICKS(
    82a6:	4827      	ldr	r0, [pc, #156]	; (8344 <mayfly_xtal_stop_calc+0x1f4>)
    82a8:	b292      	uxth	r2, r2
    82aa:	fba2 0100 	umull	r0, r1, r2, r0
    82ae:	f240 1323 	movw	r3, #291	; 0x123
    82b2:	fb03 1102 	mla	r1, r3, r2, r1
    82b6:	a31c      	add	r3, pc, #112	; (adr r3, 8328 <mayfly_xtal_stop_calc+0x1d8>)
    82b8:	e9d3 2300 	ldrd	r2, r3, [r3]
    82bc:	f7f7 ffd4 	bl	268 <__aeabi_uldivmod>
    82c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    82c2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			while (ticks_to_expire > ticks_conn_interval) {
    82c6:	2200      	movs	r2, #0
    82c8:	4298      	cmp	r0, r3
    82ca:	d318      	bcc.n	82fe <mayfly_xtal_stop_calc+0x1ae>
    82cc:	b102      	cbz	r2, 82d0 <mayfly_xtal_stop_calc+0x180>
    82ce:	930c      	str	r3, [sp, #48]	; 0x30
			if (conn_curr->role && !conn_next->role &&
    82d0:	f996 201d 	ldrsb.w	r2, [r6, #29]
    82d4:	2a00      	cmp	r2, #0
    82d6:	f995 201d 	ldrsb.w	r2, [r5, #29]
    82da:	da13      	bge.n	8304 <mayfly_xtal_stop_calc+0x1b4>
    82dc:	2a00      	cmp	r2, #0
    82de:	f6ff af7c 	blt.w	81da <mayfly_xtal_stop_calc+0x8a>
			     (ticks_slot_abs +
    82e2:	3414      	adds	r4, #20
			if (conn_curr->role && !conn_next->role &&
    82e4:	429c      	cmp	r4, r3
    82e6:	f67f af78 	bls.w	81da <mayfly_xtal_stop_calc+0x8a>
				status = conn_update_req(conn_curr);
    82ea:	4630      	mov	r0, r6
    82ec:	f7fc fb38 	bl	4960 <conn_update_req>
				if (status == 2) {
    82f0:	2802      	cmp	r0, #2
    82f2:	f47f af72 	bne.w	81da <mayfly_xtal_stop_calc+0x8a>
					conn_update_req(conn_next);
    82f6:	980b      	ldr	r0, [sp, #44]	; 0x2c
					conn_update_req(conn_curr);
    82f8:	f7fc fb32 	bl	4960 <conn_update_req>
    82fc:	e76d      	b.n	81da <mayfly_xtal_stop_calc+0x8a>
				ticks_to_expire -= ticks_conn_interval;
    82fe:	1a1b      	subs	r3, r3, r0
    8300:	2201      	movs	r2, #1
    8302:	e7e1      	b.n	82c8 <mayfly_xtal_stop_calc+0x178>
			} else if (!conn_curr->role && conn_next->role &&
    8304:	2a00      	cmp	r2, #0
    8306:	f6bf af68 	bge.w	81da <mayfly_xtal_stop_calc+0x8a>
				    (ticks_slot_abs +
    830a:	3414      	adds	r4, #20
			} else if (!conn_curr->role && conn_next->role &&
    830c:	429c      	cmp	r4, r3
    830e:	f67f af64 	bls.w	81da <mayfly_xtal_stop_calc+0x8a>
				status = conn_update_req(conn_next);
    8312:	4628      	mov	r0, r5
    8314:	f7fc fb24 	bl	4960 <conn_update_req>
				if (status == 2) {
    8318:	2802      	cmp	r0, #2
    831a:	f47f af5e 	bne.w	81da <mayfly_xtal_stop_calc+0x8a>
					conn_update_req(conn_curr);
    831e:	980a      	ldr	r0, [sp, #40]	; 0x28
    8320:	e7ea      	b.n	82f8 <mayfly_xtal_stop_calc+0x1a8>
    8322:	bf00      	nop
    8324:	f3af 8000 	nop.w
    8328:	1afd498d 	.word	0x1afd498d
    832c:	00000007 	.word	0x00000007
    8330:	000048d5 	.word	0x000048d5
    8334:	20000370 	.word	0x20000370
    8338:	20000b84 	.word	0x20000b84
    833c:	200038a0 	.word	0x200038a0
    8340:	000048d9 	.word	0x000048d9
    8344:	09ce5400 	.word	0x09ce5400

00008348 <event_master>:
{
    8348:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    834a:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    834c:	4b49      	ldr	r3, [pc, #292]	; (8474 <event_master+0x12c>)
    834e:	7cda      	ldrb	r2, [r3, #19]
{
    8350:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    8352:	f002 06ff 	and.w	r6, r2, #255	; 0xff
    8356:	461d      	mov	r5, r3
    8358:	b12a      	cbz	r2, 8366 <event_master+0x1e>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    835a:	4040      	eors	r0, r0
    835c:	f380 8811 	msr	BASEPRI, r0
    8360:	f04f 0004 	mov.w	r0, #4
    8364:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare ==
    8366:	7c1b      	ldrb	r3, [r3, #16]
    8368:	8c22      	ldrh	r2, [r4, #32]
    836a:	b2db      	uxtb	r3, r3
    836c:	3207      	adds	r2, #7
    836e:	4293      	cmp	r3, r2
    8370:	d1f3      	bne.n	835a <event_master+0x12>
	_radio.role = ROLE_MASTER;
    8372:	2204      	movs	r2, #4
	_radio.packet_counter = 0;
    8374:	f885 6720 	strb.w	r6, [r5, #1824]	; 0x720
	_radio.crc_expire = 0;
    8378:	f885 6721 	strb.w	r6, [r5, #1825]	; 0x721
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    837c:	b2db      	uxtb	r3, r3
	_radio.role = ROLE_MASTER;
    837e:	74ea      	strb	r2, [r5, #19]
	_radio.ticker_id_prepare = 0;
    8380:	742e      	strb	r6, [r5, #16]
	_radio.ticker_id_event =
    8382:	746b      	strb	r3, [r5, #17]
	conn->latency_event = conn->latency_prepare;
    8384:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
    8386:	f8c5 471c 	str.w	r4, [r5, #1820]	; 0x71c
	_radio.state = STATE_TX;
    838a:	2002      	movs	r0, #2
	conn->latency_event = conn->latency_prepare;
    838c:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;
    838e:	8526      	strh	r6, [r4, #40]	; 0x28
	_radio.state = STATE_TX;
    8390:	7528      	strb	r0, [r5, #20]
	_radio.ticks_anchor = ticks_at_expire;
    8392:	60af      	str	r7, [r5, #8]
	packet_tx_enqueue(2);
    8394:	f7fd f9b4 	bl	5700 <packet_tx_enqueue>
	prepare_pdu_data_tx(conn, &pdu_data_tx);
    8398:	a901      	add	r1, sp, #4
    839a:	4620      	mov	r0, r4
    839c:	f7fe fb92 	bl	6ac4 <prepare_pdu_data_tx>
	pdu_data_tx->sn = conn->sn;
    83a0:	9901      	ldr	r1, [sp, #4]
    83a2:	f894 20a8 	ldrb.w	r2, [r4, #168]	; 0xa8
    83a6:	780b      	ldrb	r3, [r1, #0]
    83a8:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = conn->nesn;
    83ac:	f3c2 0240 	ubfx	r2, r2, #1, #1
    83b0:	f362 0382 	bfi	r3, r2, #2, #1
    83b4:	700b      	strb	r3, [r1, #0]
	connection_configure(conn);
    83b6:	4620      	mov	r0, r4
    83b8:	f7fe faaa 	bl	6910 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
    83bc:	2096      	movs	r0, #150	; 0x96
    83be:	f001 f867 	bl	9490 <radio_tmr_tifs_set>
	radio_switch_complete_and_rx(0);
    83c2:	4630      	mov	r0, r6
    83c4:	f000 ffd4 	bl	9370 <radio_switch_complete_and_rx>
	tx_packet_set(conn, pdu_data_tx);
    83c8:	9901      	ldr	r1, [sp, #4]
    83ca:	4620      	mov	r0, r4
    83cc:	f7fc ffd3 	bl	5376 <tx_packet_set>
	if (conn->data_chan_sel) {
    83d0:	7f63      	ldrb	r3, [r4, #29]
    83d2:	f013 0f40 	tst.w	r3, #64	; 0x40
    83d6:	f104 0217 	add.w	r2, r4, #23
    83da:	d021      	beq.n	8420 <event_master+0xd8>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    83dc:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    83de:	8be1      	ldrh	r1, [r4, #30]
    83e0:	3801      	subs	r0, #1
    83e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    83e6:	b280      	uxth	r0, r0
    83e8:	f7fd fd40 	bl	5e6c <chan_sel_2>
	chan_set(data_chan_use);
    83ec:	f7fc fc46 	bl	4c7c <chan_set>
		remainder_us = radio_tmr_start(1,
    83f0:	68ea      	ldr	r2, [r5, #12]
    83f2:	f107 0109 	add.w	r1, r7, #9
    83f6:	2001      	movs	r0, #1
    83f8:	f001 f856 	bl	94a8 <radio_tmr_start>
		radio_tmr_end_capture();
    83fc:	f001 f924 	bl	9648 <radio_tmr_end_capture>
	    preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    8400:	f894 1020 	ldrb.w	r1, [r4, #32]
    8404:	3107      	adds	r1, #7
    8406:	463a      	mov	r2, r7
    8408:	b2c9      	uxtb	r1, r1
    840a:	4620      	mov	r0, r4
    840c:	f7fd fd72 	bl	5ef4 <preempt_calc>
	if (0 !=
    8410:	4603      	mov	r3, r0
    8412:	b328      	cbz	r0, 8460 <event_master+0x118>
		_radio.state = STATE_STOP;
    8414:	2304      	movs	r3, #4
    8416:	752b      	strb	r3, [r5, #20]
		radio_disable();
    8418:	f000 ff50 	bl	92bc <radio_disable>
}
    841c:	b003      	add	sp, #12
    841e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    8420:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    8422:	7fa6      	ldrb	r6, [r4, #30]
    8424:	fb01 6606 	mla	r6, r1, r6, r6
    8428:	7fe1      	ldrb	r1, [r4, #31]
    842a:	2025      	movs	r0, #37	; 0x25
    842c:	440e      	add	r6, r1
    842e:	fb96 f1f0 	sdiv	r1, r6, r0
    8432:	fb00 6611 	mls	r6, r0, r1, r6
    8436:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    8438:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
    843a:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    843c:	5c51      	ldrb	r1, [r2, r1]
    843e:	f006 0607 	and.w	r6, r6, #7
    8442:	fa41 f606 	asr.w	r6, r1, r6
    8446:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
    8448:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    844c:	d4ce      	bmi.n	83ec <event_master+0xa4>
		chan_index = chan_next % chan_count;
    844e:	fbb0 f1f3 	udiv	r1, r0, r3
    8452:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
    8456:	b2c9      	uxtb	r1, r1
    8458:	4610      	mov	r0, r2
    845a:	f7fc fa49 	bl	48f0 <chan_sel_remap>
    845e:	e7c5      	b.n	83ec <event_master+0xa4>
		ticker_status =
    8460:	4a05      	ldr	r2, [pc, #20]	; (8478 <event_master+0x130>)
    8462:	4601      	mov	r1, r0
    8464:	f7fb fb1e 	bl	3aa4 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    8468:	f030 0302 	bics.w	r3, r0, #2
    846c:	f47f af75 	bne.w	835a <event_master+0x12>
    8470:	e7d4      	b.n	841c <event_master+0xd4>
    8472:	bf00      	nop
    8474:	20000370 	.word	0x20000370
    8478:	000052a9 	.word	0x000052a9

0000847c <radio_init>:
{
    847c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	_radio.hf_clock = hf_clock;
    8480:	4e3e      	ldr	r6, [pc, #248]	; (857c <radio_init+0x100>)
{
    8482:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    8484:	f89d c01c 	ldrb.w	ip, [sp, #28]
    8488:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
    848c:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    8490:	f89d e018 	ldrb.w	lr, [sp, #24]
	_radio.hf_clock = hf_clock;
    8494:	6030      	str	r0, [r6, #0]
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
    8496:	f44f 7082 	mov.w	r0, #260	; 0x104
    849a:	fb00 4003 	mla	r0, r0, r3, r4
	_radio.sca = sca;
    849e:	f886 1728 	strb.w	r1, [r6, #1832]	; 0x728
	_radio.conn_pool = mem_radio;
    84a2:	f8c6 4710 	str.w	r4, [r6, #1808]	; 0x710
	mem_radio_end = mem_radio + mem_size;
    84a6:	1961      	adds	r1, r4, r5
	tx_count_max += 1;
    84a8:	f10c 0401 	add.w	r4, ip, #1
    84ac:	b2e7      	uxtb	r7, r4
	_radio.entropy = entropy;
    84ae:	6072      	str	r2, [r6, #4]
	    (offsetof(struct pdu_data, lldata) +
    84b0:	f108 0403 	add.w	r4, r8, #3
	rx_count_max += 3;
    84b4:	f10e 0203 	add.w	r2, lr, #3
	if ((PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA) <
    84b8:	f5b4 7f81 	cmp.w	r4, #258	; 0x102
	rx_count_max += 3;
    84bc:	b2d2      	uxtb	r2, r2
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
    84be:	bf98      	it	ls
    84c0:	eb02 1442 	addls.w	r4, r2, r2, lsl #5
	_radio.packet_data_octets_max = packet_data_octets_max;
    84c4:	f8a6 8734 	strh.w	r8, [r6, #1844]	; 0x734
		    (MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
    84c8:	bf88      	it	hi
    84ca:	f108 080e 	addhi.w	r8, r8, #14
	_radio.link_rx_data_quota = rx_count_max;
    84ce:	f886 2754 	strb.w	r2, [r6, #1876]	; 0x754
		_radio.packet_rx_data_pool_size =
    84d2:	bf8c      	ite	hi
    84d4:	f028 0803 	bichi.w	r8, r8, #3
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
    84d8:	eb02 0244 	addls.w	r2, r2, r4, lsl #1
	_radio.packet_rx_count = (rx_count_max + 1);
    84dc:	f10e 0e04 	add.w	lr, lr, #4
	_radio.packet_tx_count = (tx_count_max + 1);
    84e0:	f10c 0c02 	add.w	ip, ip, #2
	_radio.packet_rx_count = (rx_count_max + 1);
    84e4:	fa5f fe8e 	uxtb.w	lr, lr
		_radio.packet_rx_data_pool_size =
    84e8:	bf8c      	ite	hi
    84ea:	fb18 f202 	smulbbhi	r2, r8, r2
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
    84ee:	0092      	lslls	r2, r2, #2
	_radio.packet_tx_count = (tx_count_max + 1);
    84f0:	fa5f fc8c 	uxtb.w	ip, ip
		_radio.packet_rx_data_pool_size =
    84f4:	f8a6 2736 	strh.w	r2, [r6, #1846]	; 0x736
	_radio.packet_tx_count = (tx_count_max + 1);
    84f8:	f886 c774 	strb.w	ip, [r6, #1908]	; 0x774
	_radio.packet_rx = (void *)mem_radio;
    84fc:	f8c6 073c 	str.w	r0, [r6, #1852]	; 0x73c
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    8500:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
	mem_radio +=
    8504:	eb00 008e 	add.w	r0, r0, lr, lsl #2
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    8508:	f8b6 4736 	ldrh.w	r4, [r6, #1846]	; 0x736
	_radio.pkt_tx = (void *)mem_radio;
    850c:	f8c6 076c 	str.w	r0, [r6, #1900]	; 0x76c
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    8510:	4460      	add	r0, ip
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    8512:	f44f 7286 	mov.w	r2, #268	; 0x10c
	_radio.pkt_release = (void *)mem_radio;
    8516:	f8c6 0770 	str.w	r0, [r6, #1904]	; 0x770
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    851a:	4460      	add	r0, ip
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    851c:	f8a6 2738 	strh.w	r2, [r6, #1848]	; 0x738
	_radio.pkt_rx_data_pool = mem_radio;
    8520:	f8c6 072c 	str.w	r0, [r6, #1836]	; 0x72c
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    8524:	fbb4 f2f2 	udiv	r2, r4, r2
	mem_radio += _radio.packet_rx_data_pool_size;
    8528:	4420      	add	r0, r4
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
    852a:	eb0e 0403 	add.w	r4, lr, r3
	_radio.link_rx_pool = mem_radio;
    852e:	f8c6 0744 	str.w	r0, [r6, #1860]	; 0x744
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
    8532:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    8536:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
	_radio.pkt_tx_ctrl_pool = mem_radio;
    853a:	f8c6 0758 	str.w	r0, [r6, #1880]	; 0x758
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    853e:	340a      	adds	r4, #10
    8540:	f024 0403 	bic.w	r4, r4, #3
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;
    8544:	3048      	adds	r0, #72	; 0x48
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    8546:	b2a4      	uxth	r4, r4
	_radio.packet_tx_data_size =
    8548:	f8a6 4768 	strh.w	r4, [r6, #1896]	; 0x768
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);
    854c:	fb07 0404 	mla	r4, r7, r4, r0
	if (retcode) {
    8550:	1a64      	subs	r4, r4, r1
	_radio.connection_count = connection_count_max;
    8552:	f886 3718 	strb.w	r3, [r6, #1816]	; 0x718
	_radio.packet_rx_count = (rx_count_max + 1);
    8556:	f886 e740 	strb.w	lr, [r6, #1856]	; 0x740
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    855a:	f886 273a 	strb.w	r2, [r6, #1850]	; 0x73a
	_radio.pkt_tx_data_pool = mem_radio;
    855e:	f8c6 0760 	str.w	r0, [r6, #1888]	; 0x760
	if (retcode) {
    8562:	d003      	beq.n	856c <radio_init+0xf0>
		return (retcode + mem_size);
    8564:	442c      	add	r4, r5
}
    8566:	4620      	mov	r0, r4
    8568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_radio.fc_ena = 1;
    856c:	2301      	movs	r3, #1
    856e:	f886 3782 	strb.w	r3, [r6, #1922]	; 0x782
	common_init();
    8572:	f7fd fc01 	bl	5d78 <common_init>
	radio_setup();
    8576:	f000 fdcb 	bl	9110 <radio_setup>
	return retcode;
    857a:	e7f4      	b.n	8566 <radio_init+0xea>
    857c:	20000370 	.word	0x20000370

00008580 <ll_reset>:
{
    8580:	b538      	push	{r3, r4, r5, lr}
	role_disable(RADIO_TICKER_ID_ADV, RADIO_TICKER_ID_ADV_STOP);
    8582:	2103      	movs	r1, #3
    8584:	2005      	movs	r0, #5
    8586:	f7fc fa7f 	bl	4a88 <role_disable>
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);
    858a:	2104      	movs	r1, #4
    858c:	2006      	movs	r0, #6
    858e:	f7fc fa7b 	bl	4a88 <role_disable>
	for (conn_handle = 0; conn_handle < _radio.connection_count;
    8592:	4c22      	ldr	r4, [pc, #136]	; (861c <ll_reset+0x9c>)
    8594:	2500      	movs	r5, #0
    8596:	f894 2718 	ldrb.w	r2, [r4, #1816]	; 0x718
    859a:	b2ab      	uxth	r3, r5
    859c:	429a      	cmp	r2, r3
    859e:	f105 0501 	add.w	r5, r5, #1
    85a2:	d835      	bhi.n	8610 <ll_reset+0x90>
	_radio.advertiser.is_enabled = 0;
    85a4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    85a8:	f36f 13c7 	bfc	r3, #7, #1
    85ac:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	_radio.scanner.is_enabled = 0;
    85b0:	f894 364c 	ldrb.w	r3, [r4, #1612]	; 0x64c
	_radio.advertiser.conn = NULL;
    85b4:	2000      	movs	r0, #0
	_radio.scanner.is_enabled = 0;
    85b6:	f360 0300 	bfi	r3, r0, #0, #1
    85ba:	f884 364c 	strb.w	r3, [r4, #1612]	; 0x64c
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    85be:	f44f 7286 	mov.w	r2, #268	; 0x10c
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    85c2:	f8b4 3736 	ldrh.w	r3, [r4, #1846]	; 0x736
    85c6:	fbb3 f3f2 	udiv	r3, r3, r2
    85ca:	f884 373a 	strb.w	r3, [r4, #1850]	; 0x73a
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    85ce:	f894 3740 	ldrb.w	r3, [r4, #1856]	; 0x740
	_radio.packet_rx_last = 0;
    85d2:	f884 0741 	strb.w	r0, [r4, #1857]	; 0x741
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    85d6:	3b01      	subs	r3, #1
	_radio.packet_tx_first = 0;
    85d8:	f884 0775 	strb.w	r0, [r4, #1909]	; 0x775
	_radio.packet_release_last = 0;
    85dc:	f884 0778 	strb.w	r0, [r4, #1912]	; 0x778
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    85e0:	f884 3754 	strb.w	r3, [r4, #1876]	; 0x754
	_radio.fc_ack = _radio.fc_req;
    85e4:	f894 3780 	ldrb.w	r3, [r4, #1920]	; 0x780
	_radio.advertiser.conn = NULL;
    85e8:	f8c4 0638 	str.w	r0, [r4, #1592]	; 0x638
	_radio.scanner.conn = NULL;
    85ec:	f8c4 0674 	str.w	r0, [r4, #1652]	; 0x674
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    85f0:	f8a4 2738 	strh.w	r2, [r4, #1848]	; 0x738
	_radio.packet_rx_acquire = 0;
    85f4:	f884 0742 	strb.w	r0, [r4, #1858]	; 0x742
	_radio.packet_tx_last = 0;
    85f8:	f884 0776 	strb.w	r0, [r4, #1910]	; 0x776
	_radio.packet_release_first = 0;
    85fc:	f884 0777 	strb.w	r0, [r4, #1911]	; 0x777
	_radio.fc_ack = _radio.fc_req;
    8600:	f884 3781 	strb.w	r3, [r4, #1921]	; 0x781
	ll_filter_reset(false);
    8604:	f000 fc56 	bl	8eb4 <ll_filter_reset>
}
    8608:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	common_init();
    860c:	f7fd bbb4 	b.w	5d78 <common_init>
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
    8610:	1da8      	adds	r0, r5, #6
    8612:	21ff      	movs	r1, #255	; 0xff
    8614:	b2c0      	uxtb	r0, r0
    8616:	f7fc fa37 	bl	4a88 <role_disable>
    861a:	e7bc      	b.n	8596 <ll_reset+0x16>
    861c:	20000370 	.word	0x20000370

00008620 <ll_adv_is_enabled>:
	return _radio.advertiser.is_enabled;
    8620:	4b02      	ldr	r3, [pc, #8]	; (862c <ll_adv_is_enabled+0xc>)
    8622:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
}
    8626:	09c0      	lsrs	r0, r0, #7
    8628:	4770      	bx	lr
    862a:	bf00      	nop
    862c:	20000370 	.word	0x20000370

00008630 <radio_adv_filter_pol_get>:
	if (_radio.advertiser.is_enabled) {
    8630:	4b05      	ldr	r3, [pc, #20]	; (8648 <radio_adv_filter_pol_get+0x18>)
    8632:	f993 2028 	ldrsb.w	r2, [r3, #40]	; 0x28
    8636:	2a00      	cmp	r2, #0
		return _radio.advertiser.filter_policy;
    8638:	bfba      	itte	lt
    863a:	f893 002a 	ldrblt.w	r0, [r3, #42]	; 0x2a
    863e:	f000 0003 	andlt.w	r0, r0, #3
    8642:	2000      	movge	r0, #0
}
    8644:	4770      	bx	lr
    8646:	bf00      	nop
    8648:	20000370 	.word	0x20000370

0000864c <ll_scan_is_enabled>:
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    864c:	4a09      	ldr	r2, [pc, #36]	; (8674 <ll_scan_is_enabled+0x28>)
    864e:	f892 364c 	ldrb.w	r3, [r2, #1612]	; 0x64c
    8652:	f892 064d 	ldrb.w	r0, [r2, #1613]	; 0x64d
	       (_radio.scanner.conn ? BIT(2) : 0);
    8656:	f8d2 2674 	ldr.w	r2, [r2, #1652]	; 0x674
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    865a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
	       (_radio.scanner.conn ? BIT(2) : 0);
    865e:	2a00      	cmp	r2, #0
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    8660:	f003 0301 	and.w	r3, r3, #1
    8664:	fa03 f300 	lsl.w	r3, r3, r0
	       (_radio.scanner.conn ? BIT(2) : 0);
    8668:	bf14      	ite	ne
    866a:	2004      	movne	r0, #4
    866c:	2000      	moveq	r0, #0
}
    866e:	4318      	orrs	r0, r3
    8670:	4770      	bx	lr
    8672:	bf00      	nop
    8674:	20000370 	.word	0x20000370

00008678 <radio_scan_filter_pol_get>:
	if (_radio.scanner.is_enabled) {
    8678:	4b05      	ldr	r3, [pc, #20]	; (8690 <radio_scan_filter_pol_get+0x18>)
    867a:	f893 064c 	ldrb.w	r0, [r3, #1612]	; 0x64c
    867e:	f010 0001 	ands.w	r0, r0, #1
		return _radio.scanner.filter_policy;
    8682:	bf1c      	itt	ne
    8684:	f893 064d 	ldrbne.w	r0, [r3, #1613]	; 0x64d
    8688:	f3c0 1001 	ubfxne	r0, r0, #4, #2
}
    868c:	4770      	bx	lr
    868e:	bf00      	nop
    8690:	20000370 	.word	0x20000370

00008694 <ll_tx_pwr_lvl_get>:
{
    8694:	b510      	push	{r4, lr}
    8696:	4614      	mov	r4, r2
	conn = connection_get(handle);
    8698:	f7fc f9e0 	bl	4a5c <connection_get>
	if (!conn) {
    869c:	b110      	cbz	r0, 86a4 <ll_tx_pwr_lvl_get+0x10>
	*tx_pwr_lvl = 0;
    869e:	2000      	movs	r0, #0
    86a0:	7020      	strb	r0, [r4, #0]
	return 0;
    86a2:	bd10      	pop	{r4, pc}
		return 1;
    86a4:	2001      	movs	r0, #1
}
    86a6:	bd10      	pop	{r4, pc}

000086a8 <ll_rx_get>:
{
    86a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    86ac:	4605      	mov	r5, r0
    86ae:	4608      	mov	r0, r1
	if (_radio.link_rx_head != _radio.link_rx_tail) {
    86b0:	4918      	ldr	r1, [pc, #96]	; (8714 <ll_rx_get+0x6c>)
    86b2:	f8d1 374c 	ldr.w	r3, [r1, #1868]	; 0x74c
    86b6:	f8d1 2750 	ldr.w	r2, [r1, #1872]	; 0x750
    86ba:	4293      	cmp	r3, r2
    86bc:	460f      	mov	r7, r1
    86be:	d01f      	beq.n	8700 <ll_rx_get+0x58>
		_node_rx = _radio.link_rx_head->mem;
    86c0:	f8d3 8004 	ldr.w	r8, [r3, #4]
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
    86c4:	f201 7177 	addw	r1, r1, #1911	; 0x777
    86c8:	f898 2000 	ldrb.w	r2, [r8]
    86cc:	f7fc f97c 	bl	49c8 <tx_cmplt_get>
		if (!cmplt) {
    86d0:	4604      	mov	r4, r0
    86d2:	b9e0      	cbnz	r0, 870e <ll_rx_get+0x66>
			first = _radio.packet_release_first;
    86d4:	ae02      	add	r6, sp, #8
    86d6:	f897 3777 	ldrb.w	r3, [r7, #1911]	; 0x777
    86da:	f806 3d03 	strb.w	r3, [r6, #-3]!
				cmplt_curr = tx_cmplt_get(&h, &first,
    86de:	f897 2778 	ldrb.w	r2, [r7, #1912]	; 0x778
    86e2:	4631      	mov	r1, r6
    86e4:	f10d 0006 	add.w	r0, sp, #6
    86e8:	f7fc f96e 	bl	49c8 <tx_cmplt_get>
				 (cmplt_prev != cmplt_curr));
    86ec:	b934      	cbnz	r4, 86fc <ll_rx_get+0x54>
			} while ((cmplt_prev != 0) ||
    86ee:	b928      	cbnz	r0, 86fc <ll_rx_get+0x54>
			*node_rx = _node_rx;
    86f0:	f8c5 8000 	str.w	r8, [r5]
}
    86f4:	4620      	mov	r0, r4
    86f6:	b002      	add	sp, #8
    86f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
    86fc:	4604      	mov	r4, r0
    86fe:	e7ee      	b.n	86de <ll_rx_get+0x36>
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
    8700:	f891 2778 	ldrb.w	r2, [r1, #1912]	; 0x778
    8704:	f201 7177 	addw	r1, r1, #1911	; 0x777
    8708:	f7fc f95e 	bl	49c8 <tx_cmplt_get>
    870c:	4604      	mov	r4, r0
		*node_rx = NULL;
    870e:	2300      	movs	r3, #0
    8710:	602b      	str	r3, [r5, #0]
    8712:	e7ef      	b.n	86f4 <ll_rx_get+0x4c>
    8714:	20000370 	.word	0x20000370

00008718 <ll_rx_mem_release>:
{
    8718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			mem_release(_node_rx_free,
    871c:	4c16      	ldr	r4, [pc, #88]	; (8778 <ll_rx_mem_release+0x60>)
{
    871e:	4605      	mov	r5, r0
	_node_rx = *node_rx;
    8720:	6800      	ldr	r0, [r0, #0]
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    8722:	f5a4 66e6 	sub.w	r6, r4, #1840	; 0x730
			mem_release(conn, &_radio.conn_free);
    8726:	f1a4 071c 	sub.w	r7, r4, #28
	while (_node_rx) {
    872a:	b920      	cbnz	r0, 8736 <ll_rx_mem_release+0x1e>
	*node_rx = _node_rx;
    872c:	6028      	str	r0, [r5, #0]
}
    872e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	packet_rx_allocate(0xff);
    8732:	f7fd bad7 	b.w	5ce4 <packet_rx_allocate.constprop.51>
		switch (_node_rx_free->hdr.type) {
    8736:	7902      	ldrb	r2, [r0, #4]
		_node_rx = _node_rx->hdr.onion.next;
    8738:	f8d0 8000 	ldr.w	r8, [r0]
    873c:	2a0a      	cmp	r2, #10
    873e:	d807      	bhi.n	8750 <ll_rx_mem_release+0x38>
    8740:	2301      	movs	r3, #1
    8742:	4093      	lsls	r3, r2
    8744:	f240 727e 	movw	r2, #1918	; 0x77e
    8748:	4213      	tst	r3, r2
    874a:	d107      	bne.n	875c <ll_rx_mem_release+0x44>
    874c:	061b      	lsls	r3, r3, #24
    874e:	d40a      	bmi.n	8766 <ll_rx_mem_release+0x4e>
			LL_ASSERT(0);
    8750:	4040      	eors	r0, r0
    8752:	f380 8811 	msr	BASEPRI, r0
    8756:	f04f 0004 	mov.w	r0, #4
    875a:	df02      	svc	2
			mem_release(_node_rx_free,
    875c:	4621      	mov	r1, r4
			mem_release(conn, &_radio.conn_free);
    875e:	f7fa fa3c 	bl	2bda <mem_release>
{
    8762:	4640      	mov	r0, r8
    8764:	e7e1      	b.n	872a <ll_rx_mem_release+0x12>
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    8766:	88c2      	ldrh	r2, [r0, #6]
    8768:	f8d6 0710 	ldr.w	r0, [r6, #1808]	; 0x710
    876c:	f44f 7182 	mov.w	r1, #260	; 0x104
    8770:	f7fa fa48 	bl	2c04 <mem_get>
			mem_release(conn, &_radio.conn_free);
    8774:	4639      	mov	r1, r7
    8776:	e7f2      	b.n	875e <ll_rx_mem_release+0x46>
    8778:	20000aa0 	.word	0x20000aa0

0000877c <do_radio_rx_fc_set>:
	}
}

u8_t do_radio_rx_fc_set(u16_t handle, u8_t req, u8_t ack)
{
	if (req == ack) {
    877c:	4291      	cmp	r1, r2
{
    877e:	b510      	push	{r4, lr}
    8780:	4b14      	ldr	r3, [pc, #80]	; (87d4 <do_radio_rx_fc_set+0x58>)
	if (req == ack) {
    8782:	d119      	bne.n	87b8 <do_radio_rx_fc_set+0x3c>
		if (_radio.link_rx_head == _radio.link_rx_tail) {
    8784:	f8d3 2750 	ldr.w	r2, [r3, #1872]	; 0x750
    8788:	f8d3 474c 	ldr.w	r4, [r3, #1868]	; 0x74c
    878c:	4294      	cmp	r4, r2
    878e:	d111      	bne.n	87b4 <do_radio_rx_fc_set+0x38>
			u8_t ack1 = ack;

			if (ack1 == 0) {
    8790:	2900      	cmp	r1, #0
				ack1 = TRIPLE_BUFFER_SIZE;
    8792:	bf14      	ite	ne
    8794:	460a      	movne	r2, r1
    8796:	2203      	moveq	r2, #3
			}
			_radio.fc_handle[--ack1] = handle;
    8798:	3a01      	subs	r2, #1
    879a:	b2d2      	uxtb	r2, r2
    879c:	eb03 0442 	add.w	r4, r3, r2, lsl #1
			_radio.fc_ack = ack1;
    87a0:	f883 2781 	strb.w	r2, [r3, #1921]	; 0x781

			/* check if ISR updated FC by changing fc_req */
			if (req != _radio.fc_req) {
    87a4:	f893 2780 	ldrb.w	r2, [r3, #1920]	; 0x780
			_radio.fc_handle[--ack1] = handle;
    87a8:	f8a4 077a 	strh.w	r0, [r4, #1914]	; 0x77a
			if (req != _radio.fc_req) {
    87ac:	4291      	cmp	r1, r2
    87ae:	d00f      	beq.n	87d0 <do_radio_rx_fc_set+0x54>
				_radio.fc_ack = ack;
    87b0:	f883 1781 	strb.w	r1, [r3, #1921]	; 0x781

				return 1;
			}
		} else {
			return 1;
    87b4:	2001      	movs	r0, #1
    87b6:	bd10      	pop	{r4, pc}
		}
	} else if (((req == 0) &&
    87b8:	b929      	cbnz	r1, 87c6 <do_radio_rx_fc_set+0x4a>
    87ba:	f8b3 377e 	ldrh.w	r3, [r3, #1918]	; 0x77e
				return 1;
    87be:	1a18      	subs	r0, r3, r0
    87c0:	bf18      	it	ne
    87c2:	2001      	movne	r0, #1
    87c4:	bd10      	pop	{r4, pc}
		    (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] != handle)) ||
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
    87c6:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    87ca:	f8b3 3778 	ldrh.w	r3, [r3, #1912]	; 0x778
    87ce:	e7f6      	b.n	87be <do_radio_rx_fc_set+0x42>
		return 1;
	}

	return 0;
    87d0:	2000      	movs	r0, #0
}
    87d2:	bd10      	pop	{r4, pc}
    87d4:	20000370 	.word	0x20000370

000087d8 <radio_rx_fc_set>:

u8_t radio_rx_fc_set(u16_t handle, u8_t fc)
{
    87d8:	b430      	push	{r4, r5}
	if (_radio.fc_ena) {
    87da:	4b14      	ldr	r3, [pc, #80]	; (882c <radio_rx_fc_set+0x54>)
    87dc:	f893 2782 	ldrb.w	r2, [r3, #1922]	; 0x782
{
    87e0:	460d      	mov	r5, r1
	if (_radio.fc_ena) {
    87e2:	b302      	cbz	r2, 8826 <radio_rx_fc_set+0x4e>
		u8_t req = _radio.fc_req;
    87e4:	f893 2780 	ldrb.w	r2, [r3, #1920]	; 0x780
    87e8:	b2d1      	uxtb	r1, r2
		u8_t ack = _radio.fc_ack;
    87ea:	f893 2781 	ldrb.w	r2, [r3, #1921]	; 0x781

		if (fc) {
    87ee:	b135      	cbz	r5, 87fe <radio_rx_fc_set+0x26>
			if (handle != 0xffff) {
    87f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    87f4:	4298      	cmp	r0, r3
    87f6:	d016      	beq.n	8826 <radio_rx_fc_set+0x4e>
			}
		}
	}

	return 0;
}
    87f8:	bc30      	pop	{r4, r5}
				return do_radio_rx_fc_set(handle, req, ack);
    87fa:	f7ff bfbf 	b.w	877c <do_radio_rx_fc_set>
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
    87fe:	f8d3 074c 	ldr.w	r0, [r3, #1868]	; 0x74c
    8802:	f8d3 4750 	ldr.w	r4, [r3, #1872]	; 0x750
    8806:	42a0      	cmp	r0, r4
    8808:	d10d      	bne.n	8826 <radio_rx_fc_set+0x4e>
    880a:	4291      	cmp	r1, r2
    880c:	d00b      	beq.n	8826 <radio_rx_fc_set+0x4e>
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    880e:	f8d3 4750 	ldr.w	r4, [r3, #1872]	; 0x750
			_radio.fc_ack = req;
    8812:	f883 1781 	strb.w	r1, [r3, #1921]	; 0x781
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    8816:	42a0      	cmp	r0, r4
    8818:	d005      	beq.n	8826 <radio_rx_fc_set+0x4e>
			    (req == _radio.fc_req)) {
    881a:	f893 0780 	ldrb.w	r0, [r3, #1920]	; 0x780
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    881e:	4281      	cmp	r1, r0
				_radio.fc_ack = ack;
    8820:	bf08      	it	eq
    8822:	f883 2781 	strbeq.w	r2, [r3, #1921]	; 0x781
}
    8826:	2000      	movs	r0, #0
    8828:	bc30      	pop	{r4, r5}
    882a:	4770      	bx	lr
    882c:	20000370 	.word	0x20000370

00008830 <ll_adv_scan_state_cb>:

	return 0;
}

void __weak ll_adv_scan_state_cb(u8_t bm)
{
    8830:	4770      	bx	lr
    8832:	0000      	movs	r0, r0
    8834:	0000      	movs	r0, r0
	...

00008838 <radio_scan_enable>:
{
    8838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (_radio.scanner.is_enabled) {
    883c:	4c70      	ldr	r4, [pc, #448]	; (8a00 <radio_scan_enable+0x1c8>)
    883e:	f894 764c 	ldrb.w	r7, [r4, #1612]	; 0x64c
{
    8842:	b08e      	sub	sp, #56	; 0x38
    8844:	461d      	mov	r5, r3
	if (_radio.scanner.is_enabled) {
    8846:	f017 0701 	ands.w	r7, r7, #1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    884a:	f04f 0302 	mov.w	r3, #2
{
    884e:	460e      	mov	r6, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    8850:	930b      	str	r3, [sp, #44]	; 0x2c
{
    8852:	4611      	mov	r1, r2
	if (_radio.scanner.is_enabled) {
    8854:	d003      	beq.n	885e <radio_scan_enable+0x26>
		return BT_HCI_ERR_CMD_DISALLOWED;
    8856:	200c      	movs	r0, #12
}
    8858:	b00e      	add	sp, #56	; 0x38
    885a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	_radio.scanner.type = type;
    885e:	f894 364d 	ldrb.w	r3, [r4, #1613]	; 0x64d
    8862:	f360 03c3 	bfi	r3, r0, #3, #1
	_radio.scanner.phy = type >> 1;				//1
    8866:	0840      	lsrs	r0, r0, #1
    8868:	f360 0302 	bfi	r3, r0, #0, #3
	_radio.scanner.init_addr_type = init_addr_type;
    886c:	f366 13c7 	bfi	r3, r6, #7, #1
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
    8870:	2206      	movs	r2, #6
    8872:	f204 604e 	addw	r0, r4, #1614	; 0x64e
	_radio.scanner.init_addr_type = init_addr_type;
    8876:	f884 364d 	strb.w	r3, [r4, #1613]	; 0x64d
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
    887a:	4e62      	ldr	r6, [pc, #392]	; (8a04 <radio_scan_enable+0x1cc>)
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
    887c:	f7f7 febc 	bl	5f8 <memcpy>
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
    8880:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
    8884:	f04f 0891 	mov.w	r8, #145	; 0x91
    8888:	fba2 0106 	umull	r0, r1, r2, r6
    888c:	fb08 1102 	mla	r1, r8, r2, r1
    8890:	a359      	add	r3, pc, #356	; (adr r3, 89f8 <radio_scan_enable+0x1c0>)
    8892:	e9d3 2300 	ldrd	r2, r3, [r3]
    8896:	f7f7 fce7 	bl	268 <__aeabi_uldivmod>
	_radio.scanner.filter_policy = filter_policy;
    889a:	f894 364d 	ldrb.w	r3, [r4, #1613]	; 0x64d
    889e:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
	_radio.scanner.hdr.ticks_preempt_to_start =
    88a2:	f8c4 7644 	str.w	r7, [r4, #1604]	; 0x644
	_radio.scanner.filter_policy = filter_policy;
    88a6:	f362 1305 	bfi	r3, r2, #4, #2
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
    88aa:	b2aa      	uxth	r2, r5
    88ac:	fba2 6706 	umull	r6, r7, r2, r6
		_radio.ticks_active_to_start;
    88b0:	f8d4 a784 	ldr.w	sl, [r4, #1924]	; 0x784
	_radio.scanner.filter_policy = filter_policy;
    88b4:	f884 364d 	strb.w	r3, [r4, #1613]	; 0x64d
		_radio.scanner.ticks_window +
    88b8:	f100 0909 	add.w	r9, r0, #9
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
    88bc:	fb08 7702 	mla	r7, r8, r2, r7
	_radio.scanner.hdr.ticks_xtal_to_start =
    88c0:	2327      	movs	r3, #39	; 0x27
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
    88c2:	f8c4 065c 	str.w	r0, [r4, #1628]	; 0x65c
	_radio.scanner.hdr.ticks_active_to_start =
    88c6:	f8c4 a640 	str.w	sl, [r4, #1600]	; 0x640
	_radio.scanner.hdr.ticks_xtal_to_start =
    88ca:	f8c4 363c 	str.w	r3, [r4, #1596]	; 0x63c
	_radio.scanner.hdr.ticks_slot =
    88ce:	f8c4 9648 	str.w	r9, [r4, #1608]	; 0x648
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
    88d2:	a349      	add	r3, pc, #292	; (adr r3, 89f8 <radio_scan_enable+0x1c0>)
    88d4:	e9d3 2300 	ldrd	r2, r3, [r3]
    88d8:	4630      	mov	r0, r6
    88da:	4639      	mov	r1, r7
    88dc:	f7f7 fcc4 	bl	268 <__aeabi_uldivmod>
	    (ticks_interval -
    88e0:	f1a0 0327 	sub.w	r3, r0, #39	; 0x27
	if (_radio.scanner.hdr.ticks_slot >
    88e4:	4599      	cmp	r9, r3
	_radio.scanner.interval = interval;
    88e6:	f8c4 5660 	str.w	r5, [r4, #1632]	; 0x660
	ticks_slot_offset =
    88ea:	4655      	mov	r5, sl
		_radio.scanner.hdr.ticks_slot =
    88ec:	bf88      	it	hi
    88ee:	f8c4 3648 	strhi.w	r3, [r4, #1608]	; 0x648
	ticks_slot_offset =
    88f2:	2d27      	cmp	r5, #39	; 0x27
    88f4:	bf38      	it	cc
    88f6:	2527      	movcc	r5, #39	; 0x27
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
    88f8:	4680      	mov	r8, r0
	_radio.scanner.slot_offset = ticks_slot_offset ;
    88fa:	f8c4 5664 	str.w	r5, [r4, #1636]	; 0x664
	ticks_anchor = ticker_ticks_now_get();
    88fe:	f7fb f923 	bl	3b48 <ticker_ticks_now_get>
	if ((_radio.scanner.conn) ||
    8902:	f8d4 3674 	ldr.w	r3, [r4, #1652]	; 0x674
	ticks_anchor = ticker_ticks_now_get();
    8906:	4682      	mov	sl, r0
	if ((_radio.scanner.conn) ||
    8908:	2b00      	cmp	r3, #0
    890a:	d05e      	beq.n	89ca <radio_scan_enable+0x192>
		us_offset = 0;
    890c:	2300      	movs	r3, #0
    890e:	930c      	str	r3, [sp, #48]	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    8910:	483d      	ldr	r0, [pc, #244]	; (8a08 <radio_scan_enable+0x1d0>)
    8912:	f3bf 8f5b 	dmb	ish
    8916:	e850 3f00 	ldrex	r3, [r0]
    891a:	f023 0301 	bic.w	r3, r3, #1
    891e:	e840 3200 	strex	r2, r3, [r0]
    8922:	2a00      	cmp	r2, #0
    8924:	d1f7      	bne.n	8916 <radio_scan_enable+0xde>
    8926:	f3bf 8f5b 	dmb	ish
	work->handler = handler;
    892a:	4938      	ldr	r1, [pc, #224]	; (8a0c <radio_scan_enable+0x1d4>)
    892c:	f840 1c04 	str.w	r1, [r0, #-4]
	k_delayed_work_init(&aux_scanning.work_d, aux_packet_function);
    8930:	3004      	adds	r0, #4
    8932:	f002 f839 	bl	a9a8 <k_delayed_work_init>
			   (ticks_anchor + HAL_TICKER_US_TO_TICKS(us_offset)),
    8936:	980c      	ldr	r0, [sp, #48]	; 0x30
    8938:	4935      	ldr	r1, [pc, #212]	; (8a10 <radio_scan_enable+0x1d8>)
    893a:	a32f      	add	r3, pc, #188	; (adr r3, 89f8 <radio_scan_enable+0x1c0>)
    893c:	e9d3 2300 	ldrd	r2, r3, [r3]
    8940:	fba0 0101 	umull	r0, r1, r0, r1
    8944:	f7f7 fc90 	bl	268 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    8948:	ab0b      	add	r3, sp, #44	; 0x2c
    894a:	9308      	str	r3, [sp, #32]
    894c:	4b31      	ldr	r3, [pc, #196]	; (8a14 <radio_scan_enable+0x1dc>)
    894e:	9307      	str	r3, [sp, #28]
    8950:	4b31      	ldr	r3, [pc, #196]	; (8a18 <radio_scan_enable+0x1e0>)
    8952:	9305      	str	r3, [sp, #20]
    8954:	f8d4 3648 	ldr.w	r3, [r4, #1608]	; 0x648
			   (ticks_anchor + HAL_TICKER_US_TO_TICKS(us_offset)),
    8958:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    895c:	f04f 0900 	mov.w	r9, #0
    8960:	4482      	add	sl, r0
    8962:	441d      	add	r5, r3
			   HAL_TICKER_REMAINDER((u64_t) interval * 625),
    8964:	4630      	mov	r0, r6
    8966:	a324      	add	r3, pc, #144	; (adr r3, 89f8 <radio_scan_enable+0x1c0>)
    8968:	e9d3 2300 	ldrd	r2, r3, [r3]
    896c:	4639      	mov	r1, r7
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    896e:	f8cd 9018 	str.w	r9, [sp, #24]
    8972:	9504      	str	r5, [sp, #16]
    8974:	f8cd 900c 	str.w	r9, [sp, #12]
			   HAL_TICKER_REMAINDER((u64_t) interval * 625),
    8978:	f7f7 fc76 	bl	268 <__aeabi_uldivmod>
    897c:	4610      	mov	r0, r2
    897e:	4619      	mov	r1, r3
    8980:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8984:	2300      	movs	r3, #0
    8986:	f7f7 fc6f 	bl	268 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    898a:	f8cd 8004 	str.w	r8, [sp, #4]
    898e:	9002      	str	r0, [sp, #8]
    8990:	f8cd 9000 	str.w	r9, [sp]
    8994:	4653      	mov	r3, sl
    8996:	2206      	movs	r2, #6
    8998:	2103      	movs	r1, #3
    899a:	4648      	mov	r0, r9
    899c:	f7fa ff66 	bl	386c <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
    89a0:	2802      	cmp	r0, #2
    89a2:	d023      	beq.n	89ec <radio_scan_enable+0x1b4>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
    89a4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    89a6:	2d00      	cmp	r5, #0
    89a8:	f47f af55 	bne.w	8856 <radio_scan_enable+0x1e>
	_radio.scanner.is_enabled = 1;
    89ac:	f894 364c 	ldrb.w	r3, [r4, #1612]	; 0x64c
    89b0:	f043 0301 	orr.w	r3, r3, #1
    89b4:	f884 364c 	strb.w	r3, [r4, #1612]	; 0x64c
	if (!_radio.advertiser.is_enabled) {
    89b8:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
    89bc:	2b00      	cmp	r3, #0
    89be:	db02      	blt.n	89c6 <radio_scan_enable+0x18e>
		ll_adv_scan_state_cb(BIT(1));
    89c0:	2002      	movs	r0, #2
    89c2:	f7ff ff35 	bl	8830 <ll_adv_scan_state_cb>
	return 0;
    89c6:	4628      	mov	r0, r5
    89c8:	e746      	b.n	8858 <radio_scan_enable+0x20>
		sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_APP,
    89ca:	f8d4 1648 	ldr.w	r1, [r4, #1608]	; 0x648
		u32_t ticks_ref = 0;
    89ce:	930d      	str	r3, [sp, #52]	; 0x34
		sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_APP,
    89d0:	aa0d      	add	r2, sp, #52	; 0x34
    89d2:	ab0c      	add	r3, sp, #48	; 0x30
    89d4:	4429      	add	r1, r5
    89d6:	2003      	movs	r0, #3
    89d8:	f7fc fb96 	bl	5108 <sched_after_mstr_free_slot_get>
		if (us_offset) {
    89dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    89de:	2b00      	cmp	r3, #0
    89e0:	d096      	beq.n	8910 <radio_scan_enable+0xd8>
			ticks_anchor = ticks_ref;
    89e2:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
    89e6:	e793      	b.n	8910 <radio_scan_enable+0xd8>
			cpu_sleep();
    89e8:	f7fb ff52 	bl	4890 <cpu_sleep>
		while (ret_cb == TICKER_STATUS_BUSY) {
    89ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    89ee:	2b02      	cmp	r3, #2
    89f0:	d0fa      	beq.n	89e8 <radio_scan_enable+0x1b0>
    89f2:	e7d7      	b.n	89a4 <radio_scan_enable+0x16c>
    89f4:	f3af 8000 	nop.w
    89f8:	1afd498d 	.word	0x1afd498d
    89fc:	00000007 	.word	0x00000007
    8a00:	20000370 	.word	0x20000370
    8a04:	84e72a00 	.word	0x84e72a00
    8a08:	20001a38 	.word	0x20001a38
    8a0c:	00005541 	.word	0x00005541
    8a10:	3b9aca00 	.word	0x3b9aca00
    8a14:	000048d5 	.word	0x000048d5
    8a18:	00005c61 	.word	0x00005c61

00008a1c <radio_scan_disable>:
{
    8a1c:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_SCAN,
    8a1e:	2104      	movs	r1, #4
    8a20:	2006      	movs	r0, #6
    8a22:	f7fc f831 	bl	4a88 <role_disable>
	if (!status) {
    8a26:	4605      	mov	r5, r0
    8a28:	b9e8      	cbnz	r0, 8a66 <radio_scan_disable+0x4a>
		_radio.scanner.is_enabled = 0;
    8a2a:	4c10      	ldr	r4, [pc, #64]	; (8a6c <radio_scan_disable+0x50>)
    8a2c:	f894 264c 	ldrb.w	r2, [r4, #1612]	; 0x64c
    8a30:	f360 0200 	bfi	r2, r0, #0, #1
    8a34:	f884 264c 	strb.w	r2, [r4, #1612]	; 0x64c
		if (!_radio.advertiser.is_enabled) {
    8a38:	f994 2028 	ldrsb.w	r2, [r4, #40]	; 0x28
    8a3c:	2a00      	cmp	r2, #0
    8a3e:	db01      	blt.n	8a44 <radio_scan_disable+0x28>
			ll_adv_scan_state_cb(0);
    8a40:	f7ff fef6 	bl	8830 <ll_adv_scan_state_cb>
		conn = _radio.scanner.conn;
    8a44:	f8d4 6674 	ldr.w	r6, [r4, #1652]	; 0x674
		if (conn) {
    8a48:	b15e      	cbz	r6, 8a62 <radio_scan_disable+0x46>
			_radio.scanner.conn = NULL;
    8a4a:	2300      	movs	r3, #0
    8a4c:	f8c4 3674 	str.w	r3, [r4, #1652]	; 0x674
			mem_release(conn->llcp_terminate.
    8a50:	4907      	ldr	r1, [pc, #28]	; (8a70 <radio_scan_disable+0x54>)
    8a52:	f8d6 009c 	ldr.w	r0, [r6, #156]	; 0x9c
    8a56:	f7fa f8c0 	bl	2bda <mem_release>
			mem_release(conn, &_radio.conn_free);
    8a5a:	4906      	ldr	r1, [pc, #24]	; (8a74 <radio_scan_disable+0x58>)
    8a5c:	4630      	mov	r0, r6
    8a5e:	f7fa f8bc 	bl	2bda <mem_release>
}
    8a62:	4628      	mov	r0, r5
    8a64:	bd70      	pop	{r4, r5, r6, pc}
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
    8a66:	250c      	movs	r5, #12
    8a68:	e7fb      	b.n	8a62 <radio_scan_disable+0x46>
    8a6a:	bf00      	nop
    8a6c:	20000370 	.word	0x20000370
    8a70:	20000ab8 	.word	0x20000ab8
    8a74:	20000a84 	.word	0x20000a84

00008a78 <ll_rx_dequeue>:
{
    8a78:	b537      	push	{r0, r1, r2, r4, r5, lr}
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
    8a7a:	4d34      	ldr	r5, [pc, #208]	; (8b4c <ll_rx_dequeue+0xd4>)
	struct radio_pdu_node_rx *node_rx = NULL;
    8a7c:	aa02      	add	r2, sp, #8
    8a7e:	2300      	movs	r3, #0
    8a80:	f842 3d04 	str.w	r3, [r2, #-4]!
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
    8a84:	f8d5 0750 	ldr.w	r0, [r5, #1872]	; 0x750
    8a88:	f205 714c 	addw	r1, r5, #1868	; 0x74c
    8a8c:	f7fa f8e3 	bl	2c56 <memq_dequeue>
    8a90:	462c      	mov	r4, r5
	LL_ASSERT(link);
    8a92:	b928      	cbnz	r0, 8aa0 <ll_rx_dequeue+0x28>
			LL_ASSERT(_radio.scanner.is_enabled);
    8a94:	4040      	eors	r0, r0
    8a96:	f380 8811 	msr	BASEPRI, r0
    8a9a:	f04f 0004 	mov.w	r0, #4
    8a9e:	df02      	svc	2
	mem_release(link, &_radio.link_rx_free);
    8aa0:	f505 61e9 	add.w	r1, r5, #1864	; 0x748
    8aa4:	f7fa f899 	bl	2bda <mem_release>
	switch (node_rx->hdr.type) {
    8aa8:	9a01      	ldr	r2, [sp, #4]
    8aaa:	7911      	ldrb	r1, [r2, #4]
    8aac:	290a      	cmp	r1, #10
    8aae:	d8f1      	bhi.n	8a94 <ll_rx_dequeue+0x1c>
    8ab0:	2301      	movs	r3, #1
    8ab2:	408b      	lsls	r3, r1
    8ab4:	f240 707e 	movw	r0, #1918	; 0x77e
    8ab8:	4203      	tst	r3, r0
    8aba:	d111      	bne.n	8ae0 <ll_rx_dequeue+0x68>
    8abc:	0618      	lsls	r0, r3, #24
    8abe:	d5e9      	bpl.n	8a94 <ll_rx_dequeue+0x1c>
	if (node_rx->hdr.type == NODE_RX_TYPE_CONNECTION) {
    8ac0:	2906      	cmp	r1, #6
    8ac2:	d134      	bne.n	8b2e <ll_rx_dequeue+0xb6>
		if ((radio_le_conn_cmplt->status == 0x3c) ||
    8ac4:	7ad3      	ldrb	r3, [r2, #11]
    8ac6:	2b3c      	cmp	r3, #60	; 0x3c
    8ac8:	d015      	beq.n	8af6 <ll_rx_dequeue+0x7e>
    8aca:	7b12      	ldrb	r2, [r2, #12]
    8acc:	bb8a      	cbnz	r2, 8b32 <ll_rx_dequeue+0xba>
			LL_ASSERT(_radio.scanner.is_enabled);
    8ace:	f894 364c 	ldrb.w	r3, [r4, #1612]	; 0x64c
    8ad2:	07d9      	lsls	r1, r3, #31
    8ad4:	d5de      	bpl.n	8a94 <ll_rx_dequeue+0x1c>
			_radio.scanner.is_enabled = 0;
    8ad6:	f362 0300 	bfi	r3, r2, #0, #1
    8ada:	f884 364c 	strb.w	r3, [r4, #1612]	; 0x64c
    8ade:	e01a      	b.n	8b16 <ll_rx_dequeue+0x9e>
		LL_ASSERT(_radio.link_rx_data_quota <
    8ae0:	f895 0740 	ldrb.w	r0, [r5, #1856]	; 0x740
    8ae4:	f895 3754 	ldrb.w	r3, [r5, #1876]	; 0x754
    8ae8:	3801      	subs	r0, #1
    8aea:	4283      	cmp	r3, r0
    8aec:	dad2      	bge.n	8a94 <ll_rx_dequeue+0x1c>
		_radio.link_rx_data_quota++;
    8aee:	3301      	adds	r3, #1
    8af0:	f885 3754 	strb.w	r3, [r5, #1876]	; 0x754
		break;
    8af4:	e7e4      	b.n	8ac0 <ll_rx_dequeue+0x48>
				_radio.advertiser.conn = NULL;
    8af6:	2300      	movs	r3, #0
				conn = _radio.advertiser.conn;
    8af8:	f8d4 5638 	ldr.w	r5, [r4, #1592]	; 0x638
				_radio.advertiser.conn = NULL;
    8afc:	f8c4 3638 	str.w	r3, [r4, #1592]	; 0x638
			LL_ASSERT(_radio.advertiser.is_enabled);
    8b00:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
    8b04:	2b00      	cmp	r3, #0
    8b06:	dac5      	bge.n	8a94 <ll_rx_dequeue+0x1c>
			_radio.advertiser.is_enabled = 0;
    8b08:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    8b0c:	f36f 13c7 	bfc	r3, #7, #1
    8b10:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (conn) {
    8b14:	b97d      	cbnz	r5, 8b36 <ll_rx_dequeue+0xbe>
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
    8b16:	f894 064c 	ldrb.w	r0, [r4, #1612]	; 0x64c
		     _radio.advertiser.is_enabled;
    8b1a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
    8b1e:	f000 0001 	and.w	r0, r0, #1
    8b22:	0040      	lsls	r0, r0, #1
		if (!bm) {
    8b24:	ea50 10d3 	orrs.w	r0, r0, r3, lsr #7
    8b28:	d101      	bne.n	8b2e <ll_rx_dequeue+0xb6>
			ll_adv_scan_state_cb(0);
    8b2a:	f7ff fe81 	bl	8830 <ll_adv_scan_state_cb>
}
    8b2e:	b003      	add	sp, #12
    8b30:	bd30      	pop	{r4, r5, pc}
		struct connection *conn = NULL;
    8b32:	2500      	movs	r5, #0
    8b34:	e7e4      	b.n	8b00 <ll_rx_dequeue+0x88>
			mem_release(node_rx->hdr.onion.link,
    8b36:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    8b3a:	4905      	ldr	r1, [pc, #20]	; (8b50 <ll_rx_dequeue+0xd8>)
    8b3c:	f7fa f84d 	bl	2bda <mem_release>
			mem_release(conn, &_radio.conn_free);
    8b40:	4904      	ldr	r1, [pc, #16]	; (8b54 <ll_rx_dequeue+0xdc>)
    8b42:	4628      	mov	r0, r5
    8b44:	f7fa f849 	bl	2bda <mem_release>
    8b48:	e7e5      	b.n	8b16 <ll_rx_dequeue+0x9e>
    8b4a:	bf00      	nop
    8b4c:	20000370 	.word	0x20000370
    8b50:	20000ab8 	.word	0x20000ab8
    8b54:	20000a84 	.word	0x20000a84

00008b58 <rtc0_nrf5_isr>:
	ISR_DIRECT_PM();
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
    8b58:	b538      	push	{r3, r4, r5, lr}
	u32_t compare0, compare1;

	/* store interested events */
	compare0 = NRF_RTC0->EVENTS_COMPARE[0];
    8b5a:	4c0b      	ldr	r4, [pc, #44]	; (8b88 <rtc0_nrf5_isr+0x30>)
    8b5c:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
	compare1 = NRF_RTC0->EVENTS_COMPARE[1];
    8b60:	f8d4 5144 	ldr.w	r5, [r4, #324]	; 0x144

	/* On compare0 run ticker worker instance0 */
	if (compare0) {
    8b64:	b122      	cbz	r2, 8b70 <rtc0_nrf5_isr+0x18>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
    8b66:	2000      	movs	r0, #0
    8b68:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140

		ticker_trigger(0);
    8b6c:	f7fa fe6c 	bl	3848 <ticker_trigger>
	}

	/* On compare1 run ticker worker instance1 */
	if (compare1) {
    8b70:	b12d      	cbz	r5, 8b7e <rtc0_nrf5_isr+0x26>
		NRF_RTC0->EVENTS_COMPARE[1] = 0;
    8b72:	2300      	movs	r3, #0
    8b74:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144

		ticker_trigger(1);
    8b78:	2001      	movs	r0, #1
    8b7a:	f7fa fe65 	bl	3848 <ticker_trigger>
	}

	mayfly_run(MAYFLY_CALL_ID_0);
    8b7e:	2000      	movs	r0, #0
}
    8b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	mayfly_run(MAYFLY_CALL_ID_0);
    8b84:	f7fa b916 	b.w	2db4 <mayfly_run>
    8b88:	4000b000 	.word	0x4000b000

00008b8c <swi4_nrf5_isr>:

static void swi4_nrf5_isr(void *arg)
{
	mayfly_run(MAYFLY_CALL_ID_1);
    8b8c:	2001      	movs	r0, #1
    8b8e:	f7fa b911 	b.w	2db4 <mayfly_run>

00008b92 <radio_nrf5_isr>:
ISR_DIRECT_DECLARE(radio_nrf5_isr)
    8b92:	4668      	mov	r0, sp
    8b94:	f020 0107 	bic.w	r1, r0, #7
    8b98:	468d      	mov	sp, r1
    8b9a:	b501      	push	{r0, lr}
	isr_radio();
    8b9c:	f000 fa9c 	bl	90d8 <isr_radio>
	ISR_DIRECT_PM();
    8ba0:	f7f8 f906 	bl	db0 <_arch_isr_direct_pm>
extern void _IntExit(void);

static inline void _arch_isr_direct_footer(int maybe_swap)
{
	if (maybe_swap) {
		_IntExit();
    8ba4:	f7f7 fee4 	bl	970 <_ExcExit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
    8ba8:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    8bac:	4685      	mov	sp, r0
    8bae:	4770      	bx	lr

00008bb0 <radio_active_callback>:
{
    8bb0:	4770      	bx	lr
	...

00008bb4 <radio_event_callback>:
	k_sem_give(sem_recv);
    8bb4:	4b01      	ldr	r3, [pc, #4]	; (8bbc <radio_event_callback+0x8>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    8bb6:	6818      	ldr	r0, [r3, #0]
    8bb8:	f001 bbe4 	b.w	a384 <_impl_k_sem_give>
    8bbc:	20001490 	.word	0x20001490

00008bc0 <ll_init>:
}

int ll_init(struct k_sem *sem_rx)
{
    8bc0:	b570      	push	{r4, r5, r6, lr}
	struct device *clk_k32;
	struct device *clk_m16;
	struct device *entropy;
	u32_t err;

	sem_recv = sem_rx;
    8bc2:	4b39      	ldr	r3, [pc, #228]	; (8ca8 <ll_init+0xe8>)
{
    8bc4:	b086      	sub	sp, #24
	sem_recv = sem_rx;
    8bc6:	6018      	str	r0, [r3, #0]

	clk_k32 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    8bc8:	4838      	ldr	r0, [pc, #224]	; (8cac <ll_init+0xec>)
    8bca:	f000 ffcd 	bl	9b68 <device_get_binding>
	if (!clk_k32) {
    8bce:	b918      	cbnz	r0, 8bd8 <ll_init+0x18>
		return -ENODEV;
    8bd0:	f06f 0012 	mvn.w	r0, #18
	irq_enable(NRF5_IRQ_RADIO_IRQn);
	irq_enable(NRF5_IRQ_RTC0_IRQn);
	irq_enable(NRF5_IRQ_SWI4_IRQn);

	return 0;
}
    8bd4:	b006      	add	sp, #24
    8bd6:	bd70      	pop	{r4, r5, r6, pc}
	return api->on(dev, sys);
    8bd8:	6843      	ldr	r3, [r0, #4]
    8bda:	2101      	movs	r1, #1
    8bdc:	681b      	ldr	r3, [r3, #0]
    8bde:	4798      	blx	r3
	entropy = device_get_binding(CONFIG_ENTROPY_NAME);
    8be0:	4833      	ldr	r0, [pc, #204]	; (8cb0 <ll_init+0xf0>)
    8be2:	f000 ffc1 	bl	9b68 <device_get_binding>
	if (!entropy) {
    8be6:	4604      	mov	r4, r0
    8be8:	2800      	cmp	r0, #0
    8bea:	d0f1      	beq.n	8bd0 <ll_init+0x10>
	cntr_init();
    8bec:	f000 f96e 	bl	8ecc <cntr_init>
	mayfly_init();
    8bf0:	f7fa f840 	bl	2c74 <mayfly_init>
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
    8bf4:	4b2f      	ldr	r3, [pc, #188]	; (8cb4 <ll_init+0xf4>)
    8bf6:	2208      	movs	r2, #8
    8bf8:	701a      	strb	r2, [r3, #0]
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
    8bfa:	2203      	movs	r2, #3
    8bfc:	721a      	strb	r2, [r3, #8]
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
    8bfe:	2000      	movs	r0, #0
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
    8c00:	4a2d      	ldr	r2, [pc, #180]	; (8cb8 <ll_init+0xf8>)
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
    8c02:	7418      	strb	r0, [r3, #16]
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
    8c04:	2502      	movs	r5, #2
    8c06:	761d      	strb	r5, [r3, #24]
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
    8c08:	9205      	str	r2, [sp, #20]
    8c0a:	4a2c      	ldr	r2, [pc, #176]	; (8cbc <ll_init+0xfc>)
    8c0c:	9204      	str	r2, [sp, #16]
    8c0e:	4a2c      	ldr	r2, [pc, #176]	; (8cc0 <ll_init+0x100>)
    8c10:	9203      	str	r2, [sp, #12]
    8c12:	4a2c      	ldr	r2, [pc, #176]	; (8cc4 <ll_init+0x104>)
    8c14:	9202      	str	r2, [sp, #8]
    8c16:	220d      	movs	r2, #13
    8c18:	9201      	str	r2, [sp, #4]
    8c1a:	9300      	str	r3, [sp, #0]
    8c1c:	4a2a      	ldr	r2, [pc, #168]	; (8cc8 <ll_init+0x108>)
    8c1e:	2304      	movs	r3, #4
    8c20:	2107      	movs	r1, #7
    8c22:	f7fa fdd9 	bl	37d8 <ticker_init>
	LL_ASSERT(!err);
    8c26:	4606      	mov	r6, r0
    8c28:	b128      	cbz	r0, 8c36 <ll_init+0x76>
    8c2a:	4040      	eors	r0, r0
    8c2c:	f380 8811 	msr	BASEPRI, r0
    8c30:	f04f 0004 	mov.w	r0, #4
    8c34:	df02      	svc	2
	clk_m16 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_M16SRC_DRV_NAME);
    8c36:	4825      	ldr	r0, [pc, #148]	; (8ccc <ll_init+0x10c>)
    8c38:	f000 ff96 	bl	9b68 <device_get_binding>
	if (!clk_m16) {
    8c3c:	2800      	cmp	r0, #0
    8c3e:	d0c7      	beq.n	8bd0 <ll_init+0x10>
	err = radio_init(clk_m16, CLOCK_CONTROL_NRF5_K32SRC_ACCURACY, entropy,
    8c40:	f44f 63ac 	mov.w	r3, #1376	; 0x560
    8c44:	9305      	str	r3, [sp, #20]
    8c46:	4b22      	ldr	r3, [pc, #136]	; (8cd0 <ll_init+0x110>)
    8c48:	9304      	str	r3, [sp, #16]
    8c4a:	231b      	movs	r3, #27
    8c4c:	9303      	str	r3, [sp, #12]
    8c4e:	9501      	str	r5, [sp, #4]
    8c50:	23fb      	movs	r3, #251	; 0xfb
    8c52:	2501      	movs	r5, #1
    8c54:	9302      	str	r3, [sp, #8]
    8c56:	4622      	mov	r2, r4
    8c58:	9500      	str	r5, [sp, #0]
    8c5a:	4633      	mov	r3, r6
    8c5c:	2107      	movs	r1, #7
    8c5e:	f7ff fc0d 	bl	847c <radio_init>
	if (err) {
    8c62:	4604      	mov	r4, r0
    8c64:	b9e0      	cbnz	r0, 8ca0 <ll_init+0xe0>
	ll_filter_reset(true);
    8c66:	4628      	mov	r0, r5
    8c68:	f000 f924 	bl	8eb4 <ll_filter_reset>
	IRQ_DIRECT_CONNECT(NRF5_IRQ_RADIO_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
    8c6c:	4622      	mov	r2, r4
    8c6e:	4621      	mov	r1, r4
    8c70:	4628      	mov	r0, r5
    8c72:	f7f8 f883 	bl	d7c <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_RTC0_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
    8c76:	4622      	mov	r2, r4
    8c78:	4621      	mov	r1, r4
    8c7a:	200b      	movs	r0, #11
    8c7c:	f7f8 f87e 	bl	d7c <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_SWI4_IRQn, CONFIG_BT_CTLR_JOB_PRIO, swi4_nrf5_isr,
    8c80:	4622      	mov	r2, r4
    8c82:	4621      	mov	r1, r4
    8c84:	2018      	movs	r0, #24
    8c86:	f7f8 f879 	bl	d7c <_irq_priority_set>
	irq_enable(NRF5_IRQ_RADIO_IRQn);
    8c8a:	4628      	mov	r0, r5
    8c8c:	f7f8 f844 	bl	d18 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RTC0_IRQn);
    8c90:	200b      	movs	r0, #11
    8c92:	f7f8 f841 	bl	d18 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_SWI4_IRQn);
    8c96:	2018      	movs	r0, #24
    8c98:	f7f8 f83e 	bl	d18 <_arch_irq_enable>
	return 0;
    8c9c:	4620      	mov	r0, r4
    8c9e:	e799      	b.n	8bd4 <ll_init+0x14>
		return -ENOMEM;
    8ca0:	f06f 000b 	mvn.w	r0, #11
    8ca4:	e796      	b.n	8bd4 <ll_init+0x14>
    8ca6:	bf00      	nop
    8ca8:	20001490 	.word	0x20001490
    8cac:	0000b448 	.word	0x0000b448
    8cb0:	0000b41c 	.word	0x0000b41c
    8cb4:	20001470 	.word	0x20001470
    8cb8:	00009901 	.word	0x00009901
    8cbc:	00009889 	.word	0x00009889
    8cc0:	00009869 	.word	0x00009869
    8cc4:	20001200 	.word	0x20001200
    8cc8:	200010e8 	.word	0x200010e8
    8ccc:	0000b453 	.word	0x0000b453
    8cd0:	20000b88 	.word	0x20000b88

00008cd4 <ll_scan_params_set>:
	u8_t  filter_policy:2;
} ll_scan;

u32_t ll_scan_params_set(u8_t type, u16_t interval, u16_t window,
			 u8_t own_addr_type, u8_t filter_policy)
{
    8cd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8cd8:	4606      	mov	r6, r0
    8cda:	4689      	mov	r9, r1
    8cdc:	4690      	mov	r8, r2
    8cde:	461f      	mov	r7, r3
	if (ll_scan_is_enabled()) {
    8ce0:	f7ff fcb4 	bl	864c <ll_scan_is_enabled>
    8ce4:	b9a0      	cbnz	r0, 8d10 <ll_scan_params_set+0x3c>
	 * 1001b - Ext. Coded active
	 */


	/* for ext adv 0010 type */
	ll_scan.type = type | 0x02;  			//for time being just to test
    8ce6:	4d0c      	ldr	r5, [pc, #48]	; (8d18 <ll_scan_params_set+0x44>)
    8ce8:	792c      	ldrb	r4, [r5, #4]
	ll_scan.interval = interval;
    8cea:	f8a5 9000 	strh.w	r9, [r5]
	ll_scan.type = type | 0x02;  			//for time being just to test
    8cee:	f046 0602 	orr.w	r6, r6, #2
    8cf2:	f366 0403 	bfi	r4, r6, #0, #4
	ll_scan.window = window;
	ll_scan.own_addr_type = own_addr_type;
    8cf6:	4622      	mov	r2, r4
    8cf8:	f367 1205 	bfi	r2, r7, #4, #2
	ll_scan.filter_policy = filter_policy;
    8cfc:	4613      	mov	r3, r2
    8cfe:	f89d 2020 	ldrb.w	r2, [sp, #32]
	ll_scan.window = window;
    8d02:	f8a5 8002 	strh.w	r8, [r5, #2]
	ll_scan.filter_policy = filter_policy;
    8d06:	f362 1387 	bfi	r3, r2, #6, #2
    8d0a:	712b      	strb	r3, [r5, #4]

	return 0;
    8d0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    8d10:	200c      	movs	r0, #12
}
    8d12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8d16:	bf00      	nop
    8d18:	20001494 	.word	0x20001494

00008d1c <ll_scan_enable>:

u32_t ll_scan_enable(u8_t enable)
{
    8d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    8d1e:	b085      	sub	sp, #20
	u32_t status;
	u8_t  rpa_gen = 0;

	if (!enable) {
    8d20:	b920      	cbnz	r0, 8d2c <ll_scan_enable+0x10>
				   ll_scan.interval, ll_scan.window,
				   ll_scan.filter_policy, rpa_gen,
				   FILTER_IDX_NONE);

	return status;
}
    8d22:	b005      	add	sp, #20
    8d24:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return radio_scan_disable();
    8d28:	f7ff be78 	b.w	8a1c <radio_scan_disable>
	} else if (ll_scan_is_enabled()) {
    8d2c:	f7ff fc8e 	bl	864c <ll_scan_is_enabled>
    8d30:	4606      	mov	r6, r0
    8d32:	b9c8      	cbnz	r0, 8d68 <ll_scan_enable+0x4c>
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
    8d34:	4d0d      	ldr	r5, [pc, #52]	; (8d6c <ll_scan_enable+0x50>)
    8d36:	792c      	ldrb	r4, [r5, #4]
    8d38:	f004 070f 	and.w	r7, r4, #15
    8d3c:	f3c4 1400 	ubfx	r4, r4, #4, #1
    8d40:	4601      	mov	r1, r0
    8d42:	4620      	mov	r0, r4
    8d44:	f7fa ff06 	bl	3b54 <ll_addr_get>
    8d48:	22ff      	movs	r2, #255	; 0xff
    8d4a:	9203      	str	r2, [sp, #12]
				   ll_scan.filter_policy, rpa_gen,
    8d4c:	792a      	ldrb	r2, [r5, #4]
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
    8d4e:	882b      	ldrh	r3, [r5, #0]
    8d50:	9602      	str	r6, [sp, #8]
    8d52:	0992      	lsrs	r2, r2, #6
    8d54:	9201      	str	r2, [sp, #4]
    8d56:	886a      	ldrh	r2, [r5, #2]
    8d58:	9200      	str	r2, [sp, #0]
    8d5a:	4621      	mov	r1, r4
    8d5c:	4602      	mov	r2, r0
    8d5e:	4638      	mov	r0, r7
    8d60:	f7ff fd6a 	bl	8838 <radio_scan_enable>
}
    8d64:	b005      	add	sp, #20
    8d66:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return 0;
    8d68:	2000      	movs	r0, #0
    8d6a:	e7fb      	b.n	8d64 <ll_scan_enable+0x48>
    8d6c:	20001494 	.word	0x20001494

00008d70 <ctrl_filter_get>:
	if (whitelist) {
		return &wl_filter;
	}
	return &rl_filter;
#else
	LL_ASSERT(whitelist);
    8d70:	b928      	cbnz	r0, 8d7e <ctrl_filter_get+0xe>
    8d72:	4040      	eors	r0, r0
    8d74:	f380 8811 	msr	BASEPRI, r0
    8d78:	f04f 0004 	mov.w	r0, #4
    8d7c:	df02      	svc	2
	return &wl_filter;
#endif
}
    8d7e:	4801      	ldr	r0, [pc, #4]	; (8d84 <ctrl_filter_get+0x14>)
    8d80:	4770      	bx	lr
    8d82:	bf00      	nop
    8d84:	2000149a 	.word	0x2000149a

00008d88 <ll_wl_size_get>:

u32_t ll_wl_size_get(void)
{
	return WL_SIZE;
}
    8d88:	2008      	movs	r0, #8
    8d8a:	4770      	bx	lr

00008d8c <ll_wl_clear>:

u32_t ll_wl_clear(void)
{
    8d8c:	b510      	push	{r4, lr}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    8d8e:	f7ff fc4f 	bl	8630 <radio_adv_filter_pol_get>
    8d92:	4604      	mov	r4, r0
    8d94:	b110      	cbz	r0, 8d9c <ll_wl_clear+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
    8d96:	240c      	movs	r4, #12
	filter_clear(&wl_filter);
#endif /* CONFIG_BT_CTLR_PRIVACY */
	wl_anon = 0;

	return 0;
}
    8d98:	4620      	mov	r0, r4
    8d9a:	bd10      	pop	{r4, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    8d9c:	f7ff fc6c 	bl	8678 <radio_scan_filter_pol_get>
    8da0:	07c3      	lsls	r3, r0, #31
    8da2:	d4f8      	bmi.n	8d96 <ll_wl_clear+0xa>
	filter->enable_bitmask = 0;
    8da4:	4b02      	ldr	r3, [pc, #8]	; (8db0 <ll_wl_clear+0x24>)
    8da6:	701c      	strb	r4, [r3, #0]
	filter->addr_type_bitmask = 0;
    8da8:	705c      	strb	r4, [r3, #1]
	wl_anon = 0;
    8daa:	4b02      	ldr	r3, [pc, #8]	; (8db4 <ll_wl_clear+0x28>)
    8dac:	701c      	strb	r4, [r3, #0]
	return 0;
    8dae:	e7f3      	b.n	8d98 <ll_wl_clear+0xc>
    8db0:	2000149a 	.word	0x2000149a
    8db4:	20001adc 	.word	0x20001adc

00008db8 <ll_wl_add>:

u32_t ll_wl_add(bt_addr_le_t *addr)
{
    8db8:	b570      	push	{r4, r5, r6, lr}
    8dba:	4604      	mov	r4, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    8dbc:	f7ff fc38 	bl	8630 <radio_adv_filter_pol_get>
    8dc0:	4605      	mov	r5, r0
    8dc2:	b110      	cbz	r0, 8dca <ll_wl_add+0x12>
		return BT_HCI_ERR_CMD_DISALLOWED;
    8dc4:	250c      	movs	r5, #12
#if defined(CONFIG_BT_CTLR_PRIVACY)
	return wl_add(addr);
#else
	return filter_add(&wl_filter, addr->type, addr->a.val);
#endif /* CONFIG_BT_CTLR_PRIVACY */
}
    8dc6:	4628      	mov	r0, r5
    8dc8:	bd70      	pop	{r4, r5, r6, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    8dca:	f7ff fc55 	bl	8678 <radio_scan_filter_pol_get>
    8dce:	07c3      	lsls	r3, r0, #31
    8dd0:	d4f8      	bmi.n	8dc4 <ll_wl_add+0xc>
	if (addr->type == ADDR_TYPE_ANON) {
    8dd2:	7823      	ldrb	r3, [r4, #0]
    8dd4:	2bff      	cmp	r3, #255	; 0xff
    8dd6:	d103      	bne.n	8de0 <ll_wl_add+0x28>
		wl_anon = 1;
    8dd8:	4b11      	ldr	r3, [pc, #68]	; (8e20 <ll_wl_add+0x68>)
    8dda:	2201      	movs	r2, #1
    8ddc:	701a      	strb	r2, [r3, #0]
		return 0;
    8dde:	e7f2      	b.n	8dc6 <ll_wl_add+0xe>
	if (filter->enable_bitmask == 0xFF) {
    8de0:	4910      	ldr	r1, [pc, #64]	; (8e24 <ll_wl_add+0x6c>)
    8de2:	780a      	ldrb	r2, [r1, #0]
    8de4:	2aff      	cmp	r2, #255	; 0xff
    8de6:	d018      	beq.n	8e1a <ll_wl_add+0x62>
    8de8:	4628      	mov	r0, r5
	     (filter->enable_bitmask & BIT(index));
    8dea:	fa22 f600 	lsr.w	r6, r2, r0
	for (index = 0;
    8dee:	07f6      	lsls	r6, r6, #31
    8df0:	d411      	bmi.n	8e16 <ll_wl_add+0x5e>
	filter->enable_bitmask |= BIT(index);
    8df2:	2601      	movs	r6, #1
    8df4:	4086      	lsls	r6, r0
    8df6:	4332      	orrs	r2, r6
    8df8:	700a      	strb	r2, [r1, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    8dfa:	f003 0301 	and.w	r3, r3, #1
    8dfe:	784a      	ldrb	r2, [r1, #1]
    8e00:	4083      	lsls	r3, r0
    8e02:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    8e04:	2206      	movs	r2, #6
    8e06:	fb02 1000 	mla	r0, r2, r0, r1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    8e0a:	704b      	strb	r3, [r1, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    8e0c:	3002      	adds	r0, #2
    8e0e:	1c61      	adds	r1, r4, #1
    8e10:	f7f7 fbf2 	bl	5f8 <memcpy>
    8e14:	e7d7      	b.n	8dc6 <ll_wl_add+0xe>
	     index++) {
    8e16:	3001      	adds	r0, #1
    8e18:	e7e7      	b.n	8dea <ll_wl_add+0x32>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    8e1a:	2507      	movs	r5, #7
    8e1c:	e7d3      	b.n	8dc6 <ll_wl_add+0xe>
    8e1e:	bf00      	nop
    8e20:	20001adc 	.word	0x20001adc
    8e24:	2000149a 	.word	0x2000149a

00008e28 <ll_wl_remove>:

u32_t ll_wl_remove(bt_addr_le_t *addr)
{
    8e28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8e2c:	4607      	mov	r7, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    8e2e:	f7ff fbff 	bl	8630 <radio_adv_filter_pol_get>
    8e32:	4606      	mov	r6, r0
    8e34:	b118      	cbz	r0, 8e3e <ll_wl_remove+0x16>
		return BT_HCI_ERR_CMD_DISALLOWED;
    8e36:	260c      	movs	r6, #12
#if defined(CONFIG_BT_CTLR_PRIVACY)
	return wl_remove(addr);
#else
	return filter_remove(&wl_filter, addr->type, addr->a.val);
#endif /* CONFIG_BT_CTLR_PRIVACY */
}
    8e38:	4630      	mov	r0, r6
    8e3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    8e3e:	f7ff fc1b 	bl	8678 <radio_scan_filter_pol_get>
    8e42:	07c1      	lsls	r1, r0, #31
    8e44:	d4f7      	bmi.n	8e36 <ll_wl_remove+0xe>
	if (addr->type == ADDR_TYPE_ANON) {
    8e46:	f897 8000 	ldrb.w	r8, [r7]
    8e4a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    8e4e:	d102      	bne.n	8e56 <ll_wl_remove+0x2e>
		wl_anon = 0;
    8e50:	4b16      	ldr	r3, [pc, #88]	; (8eac <ll_wl_remove+0x84>)
    8e52:	701e      	strb	r6, [r3, #0]
		return 0;
    8e54:	e7f0      	b.n	8e38 <ll_wl_remove+0x10>
	if (!filter->enable_bitmask) {
    8e56:	4c16      	ldr	r4, [pc, #88]	; (8eb0 <ll_wl_remove+0x88>)
    8e58:	7823      	ldrb	r3, [r4, #0]
    8e5a:	b133      	cbz	r3, 8e6a <ll_wl_remove+0x42>
    8e5c:	2508      	movs	r5, #8
	return filter_remove(&wl_filter, addr->type, addr->a.val);
    8e5e:	3701      	adds	r7, #1
		    !memcmp(filter->bdaddr[index], bdaddr, BDADDR_SIZE)) {
    8e60:	f04f 0906 	mov.w	r9, #6
	while (index--) {
    8e64:	f115 35ff 	adds.w	r5, r5, #4294967295	; 0xffffffff
    8e68:	d201      	bcs.n	8e6e <ll_wl_remove+0x46>
		return BT_HCI_ERR_INVALID_PARAM;
    8e6a:	2612      	movs	r6, #18
    8e6c:	e7e4      	b.n	8e38 <ll_wl_remove+0x10>
		if ((filter->enable_bitmask & BIT(index)) &&
    8e6e:	7823      	ldrb	r3, [r4, #0]
    8e70:	40eb      	lsrs	r3, r5
    8e72:	07da      	lsls	r2, r3, #31
    8e74:	d5f6      	bpl.n	8e64 <ll_wl_remove+0x3c>
		    (((filter->addr_type_bitmask >> index) & 0x01) ==
    8e76:	7863      	ldrb	r3, [r4, #1]
    8e78:	412b      	asrs	r3, r5
    8e7a:	ea83 0308 	eor.w	r3, r3, r8
		if ((filter->enable_bitmask & BIT(index)) &&
    8e7e:	07db      	lsls	r3, r3, #31
    8e80:	d4f0      	bmi.n	8e64 <ll_wl_remove+0x3c>
		    !memcmp(filter->bdaddr[index], bdaddr, BDADDR_SIZE)) {
    8e82:	fb09 4005 	mla	r0, r9, r5, r4
    8e86:	2206      	movs	r2, #6
    8e88:	4639      	mov	r1, r7
    8e8a:	3002      	adds	r0, #2
    8e8c:	f7f7 fb9f 	bl	5ce <memcmp>
		     (addr_type & 0x01)) &&
    8e90:	2800      	cmp	r0, #0
    8e92:	d1e7      	bne.n	8e64 <ll_wl_remove+0x3c>
			filter->enable_bitmask &= ~BIT(index);
    8e94:	2301      	movs	r3, #1
    8e96:	40ab      	lsls	r3, r5
    8e98:	7822      	ldrb	r2, [r4, #0]
    8e9a:	43db      	mvns	r3, r3
    8e9c:	b2db      	uxtb	r3, r3
    8e9e:	401a      	ands	r2, r3
    8ea0:	7022      	strb	r2, [r4, #0]
			filter->addr_type_bitmask &= ~BIT(index);
    8ea2:	7862      	ldrb	r2, [r4, #1]
    8ea4:	4013      	ands	r3, r2
    8ea6:	7063      	strb	r3, [r4, #1]
    8ea8:	e7c6      	b.n	8e38 <ll_wl_remove+0x10>
    8eaa:	bf00      	nop
    8eac:	20001adc 	.word	0x20001adc
    8eb0:	2000149a 	.word	0x2000149a

00008eb4 <ll_filter_reset>:

#endif /* CONFIG_BT_CTLR_PRIVACY */

void ll_filter_reset(bool init)
{
	wl_anon = 0;
    8eb4:	4a03      	ldr	r2, [pc, #12]	; (8ec4 <ll_filter_reset+0x10>)
    8eb6:	2300      	movs	r3, #0
    8eb8:	7013      	strb	r3, [r2, #0]
	filter->enable_bitmask = 0;
    8eba:	4a03      	ldr	r2, [pc, #12]	; (8ec8 <ll_filter_reset+0x14>)
    8ebc:	7013      	strb	r3, [r2, #0]
	filter->addr_type_bitmask = 0;
    8ebe:	7053      	strb	r3, [r2, #1]
    8ec0:	4770      	bx	lr
    8ec2:	bf00      	nop
    8ec4:	20001adc 	.word	0x20001adc
    8ec8:	2000149a 	.word	0x2000149a

00008ecc <cntr_init>:

static u8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
    8ecc:	4b05      	ldr	r3, [pc, #20]	; (8ee4 <cntr_init+0x18>)
    8ece:	2200      	movs	r2, #0
    8ed0:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	NRF_RTC->EVTENSET = (RTC_EVTENSET_COMPARE0_Msk |
    8ed4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    8ed8:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
			     RTC_EVTENSET_COMPARE1_Msk);
	NRF_RTC->INTENSET = (RTC_INTENSET_COMPARE0_Msk |
    8edc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    8ee0:	4770      	bx	lr
    8ee2:	bf00      	nop
    8ee4:	4000b000 	.word	0x4000b000

00008ee8 <cntr_start>:
#endif
}

u32_t cntr_start(void)
{
	if (_refcount++) {
    8ee8:	4a04      	ldr	r2, [pc, #16]	; (8efc <cntr_start+0x14>)
    8eea:	7813      	ldrb	r3, [r2, #0]
    8eec:	1c59      	adds	r1, r3, #1
    8eee:	7011      	strb	r1, [r2, #0]
    8ef0:	2001      	movs	r0, #1
    8ef2:	b913      	cbnz	r3, 8efa <cntr_start+0x12>
		return 1;
	}

	NRF_RTC->TASKS_START = 1;
    8ef4:	4a02      	ldr	r2, [pc, #8]	; (8f00 <cntr_start+0x18>)
    8ef6:	6010      	str	r0, [r2, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
    8ef8:	4618      	mov	r0, r3
}
    8efa:	4770      	bx	lr
    8efc:	200014cc 	.word	0x200014cc
    8f00:	4000b000 	.word	0x4000b000

00008f04 <cntr_stop>:

u32_t cntr_stop(void)
{
	LL_ASSERT(_refcount);
    8f04:	4b09      	ldr	r3, [pc, #36]	; (8f2c <cntr_stop+0x28>)
    8f06:	7818      	ldrb	r0, [r3, #0]
    8f08:	b928      	cbnz	r0, 8f16 <cntr_stop+0x12>
    8f0a:	4040      	eors	r0, r0
    8f0c:	f380 8811 	msr	BASEPRI, r0
    8f10:	f04f 0004 	mov.w	r0, #4
    8f14:	df02      	svc	2

	if (--_refcount) {
    8f16:	3801      	subs	r0, #1
    8f18:	b2c0      	uxtb	r0, r0
    8f1a:	7018      	strb	r0, [r3, #0]
    8f1c:	2301      	movs	r3, #1
    8f1e:	b910      	cbnz	r0, 8f26 <cntr_stop+0x22>
		return 1;
	}

	NRF_RTC->TASKS_STOP = 1;
    8f20:	4a03      	ldr	r2, [pc, #12]	; (8f30 <cntr_stop+0x2c>)
    8f22:	6053      	str	r3, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
    8f24:	4770      	bx	lr
		return 1;
    8f26:	4618      	mov	r0, r3
}
    8f28:	4770      	bx	lr
    8f2a:	bf00      	nop
    8f2c:	200014cc 	.word	0x200014cc
    8f30:	4000b000 	.word	0x4000b000

00008f34 <cntr_cnt_get>:

u32_t cntr_cnt_get(void)
{
	return NRF_RTC->COUNTER;
    8f34:	4b01      	ldr	r3, [pc, #4]	; (8f3c <cntr_cnt_get+0x8>)
    8f36:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
}
    8f3a:	4770      	bx	lr
    8f3c:	4000b000 	.word	0x4000b000

00008f40 <cntr_cmp_set>:

void cntr_cmp_set(u8_t cmp, u32_t value)
{
	NRF_RTC->CC[cmp] = value;
    8f40:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    8f44:	4b01      	ldr	r3, [pc, #4]	; (8f4c <cntr_cmp_set+0xc>)
    8f46:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
    8f4a:	4770      	bx	lr
    8f4c:	4000b000 	.word	0x4000b000

00008f50 <do_ecb>:
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
	do {
		NRF_ECB->TASKS_STOPECB = 1;
    8f50:	4b11      	ldr	r3, [pc, #68]	; (8f98 <do_ecb+0x48>)
{
    8f52:	b570      	push	{r4, r5, r6, lr}
		NRF_ECB->TASKS_STOPECB = 1;
    8f54:	2101      	movs	r1, #1
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
    8f56:	2500      	movs	r5, #0
    8f58:	461a      	mov	r2, r3
		NRF_ECB->TASKS_STOPECB = 1;
    8f5a:	6059      	str	r1, [r3, #4]
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
    8f5c:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
    8f60:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
    8f64:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
		NRF_ECB->TASKS_STARTECB = 1;
    8f68:	6019      	str	r1, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
		NRF_ECB_regw_sideeffects_TASKS_STARTECB();
#endif
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    8f6a:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
    8f6e:	b934      	cbnz	r4, 8f7e <do_ecb+0x2e>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    8f70:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    8f74:	b91c      	cbnz	r4, 8f7e <do_ecb+0x2e>
		       (NRF_ECB->ECBDATAPTR != 0)) {
    8f76:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    8f7a:	2c00      	cmp	r4, #0
    8f7c:	d1f5      	bne.n	8f6a <do_ecb+0x1a>
			__WFE();
#else
			/*__WFE();*/
#endif
		}
		NRF_ECB->TASKS_STOPECB = 1;
    8f7e:	6051      	str	r1, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
#endif
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
    8f80:	f8d2 4104 	ldr.w	r4, [r2, #260]	; 0x104
    8f84:	2c00      	cmp	r4, #0
    8f86:	d1e8      	bne.n	8f5a <do_ecb+0xa>
    8f88:	f8d2 6504 	ldr.w	r6, [r2, #1284]	; 0x504
    8f8c:	2e00      	cmp	r6, #0
    8f8e:	d0e4      	beq.n	8f5a <do_ecb+0xa>

	NRF_ECB->ECBDATAPTR = 0;
    8f90:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
    8f94:	bd70      	pop	{r4, r5, r6, pc}
    8f96:	bf00      	nop
    8f98:	4000e000 	.word	0x4000e000

00008f9c <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
    8f9c:	b570      	push	{r4, r5, r6, lr}
    8f9e:	b08c      	sub	sp, #48	; 0x30
    8fa0:	460e      	mov	r6, r1
    8fa2:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    8fa4:	4601      	mov	r1, r0
    8fa6:	2210      	movs	r2, #16
    8fa8:	4668      	mov	r0, sp
{
    8faa:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    8fac:	f7f9 fe32 	bl	2c14 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
    8fb0:	2210      	movs	r2, #16
    8fb2:	eb0d 0002 	add.w	r0, sp, r2
    8fb6:	4631      	mov	r1, r6
    8fb8:	f7f9 fe2c 	bl	2c14 <mem_rcopy>

	do_ecb(&ecb);
    8fbc:	4668      	mov	r0, sp
    8fbe:	f7ff ffc7 	bl	8f50 <do_ecb>

	if (cipher_text_le) {
    8fc2:	b125      	cbz	r5, 8fce <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
    8fc4:	2210      	movs	r2, #16
    8fc6:	a908      	add	r1, sp, #32
    8fc8:	4628      	mov	r0, r5
    8fca:	f7f9 fe23 	bl	2c14 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
    8fce:	b124      	cbz	r4, 8fda <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
    8fd0:	2210      	movs	r2, #16
    8fd2:	a908      	add	r1, sp, #32
    8fd4:	4620      	mov	r0, r4
    8fd6:	f7f7 fb0f 	bl	5f8 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
    8fda:	b00c      	add	sp, #48	; 0x30
    8fdc:	bd70      	pop	{r4, r5, r6, pc}
	...

00008fe0 <hal_radio_enable_on_tick_ppi_config_and_enable>:
#define HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX \
	((u32_t)&(NRF_RADIO->TASKS_RXEN))

static inline void hal_radio_enable_on_tick_ppi_config_and_enable(u8_t trx)
{
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_EVT =
    8fe0:	4b07      	ldr	r3, [pc, #28]	; (9000 <hal_radio_enable_on_tick_ppi_config_and_enable+0x20>)
    8fe2:	4a08      	ldr	r2, [pc, #32]	; (9004 <hal_radio_enable_on_tick_ppi_config_and_enable+0x24>)
    8fe4:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
		HAL_RADIO_ENABLE_ON_TICK_PPI_EVT;
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
		(trx) ? HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_TX :
    8fe8:	4907      	ldr	r1, [pc, #28]	; (9008 <hal_radio_enable_on_tick_ppi_config_and_enable+0x28>)
    8fea:	4a08      	ldr	r2, [pc, #32]	; (900c <hal_radio_enable_on_tick_ppi_config_and_enable+0x2c>)
    8fec:	2800      	cmp	r0, #0
    8fee:	bf14      	ite	ne
    8ff0:	4610      	movne	r0, r2
    8ff2:	4608      	moveq	r0, r1
			HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX;
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
    8ff4:	2201      	movs	r2, #1
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
    8ff6:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
    8ffa:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    8ffe:	4770      	bx	lr
    9000:	4001f000 	.word	0x4001f000
    9004:	40008140 	.word	0x40008140
    9008:	40001004 	.word	0x40001004
    900c:	40001000 	.word	0x40001000

00009010 <sw_switch.isra.9>:
}

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
static u8_t sw_tifs_toggle;

static void sw_switch(u8_t dir, u8_t phy_curr, u8_t flags_curr, u8_t phy_next,
    9010:	b5f0      	push	{r4, r5, r6, r7, lr}
		      u8_t flags_next)
{
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
    9012:	4e2c      	ldr	r6, [pc, #176]	; (90c4 <sw_switch.isra.9+0xb4>)
	u8_t cc = SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle);
	u32_t delay;

	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_EVT =
    9014:	4f2c      	ldr	r7, [pc, #176]	; (90c8 <sw_switch.isra.9+0xb8>)
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
    9016:	7835      	ldrb	r5, [r6, #0]
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_EVT =
    9018:	4b2c      	ldr	r3, [pc, #176]	; (90cc <sw_switch.isra.9+0xbc>)
    901a:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_EVT;
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_TASK =
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(sw_tifs_toggle);
    901e:	b22b      	sxth	r3, r5
    9020:	00dc      	lsls	r4, r3, #3
    9022:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    9026:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_TASK =
    902a:	f8c7 4564 	str.w	r4, [r7, #1380]	; 0x564
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
    902e:	f105 040b 	add.w	r4, r5, #11
    9032:	b2e4      	uxtb	r4, r4
    9034:	00e4      	lsls	r4, r4, #3

	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi) =
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(cc);
    9036:	f5a7 37af 	sub.w	r7, r7, #89600	; 0x15e00
    903a:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    903e:	3fc0      	subs	r7, #192	; 0xc0
    9040:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
    9044:	eb07 0783 	add.w	r7, r7, r3, lsl #2
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi) =
    9048:	f8c4 7510 	str.w	r7, [r4, #1296]	; 0x510

	if (dir) {
    904c:	2800      	cmp	r0, #0
    904e:	d034      	beq.n	90ba <sw_switch.isra.9+0xaa>
static inline u32_t hal_radio_tx_ready_delay_ns_get(u8_t phy, u8_t flags)
{
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_1M_NS;
    9050:	f649 77c4 	movw	r7, #40900	; 0x9fc4
    9054:	f649 4040 	movw	r0, #40000	; 0x9c40
    9058:	2a02      	cmp	r2, #2
    905a:	bf0c      	ite	eq
    905c:	4602      	moveq	r2, r0
    905e:	463a      	movne	r2, r7
static inline u32_t hal_radio_rx_chain_delay_ns_get(u8_t phy, u8_t flags)
{
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_NS;
    9060:	f242 47b8 	movw	r7, #9400	; 0x24b8
    9064:	f241 3088 	movw	r0, #5000	; 0x1388
    9068:	2902      	cmp	r1, #2
    906a:	bf18      	it	ne
    906c:	4638      	movne	r0, r7
		/* TX */

		/* Calculate delay with respect to current (RX) and next
		 * (TX) PHY. If RX PHY is LE Coded, assume S8 coding scheme.
		 */
		delay = HAL_RADIO_NS2US_ROUND(
    906e:	f502 71fa 	add.w	r1, r2, #500	; 0x1f4
    9072:	4401      	add	r1, r0
    9074:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    9078:	fbb1 f1f2 	udiv	r1, r1, r2
	((u32_t)&(NRF_RADIO->TASKS_RXEN))


static inline void hal_radio_txen_on_sw_switch(u8_t ppi)
{
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi) =
    907c:	4a14      	ldr	r2, [pc, #80]	; (90d0 <sw_switch.isra.9+0xc0>)
    907e:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    9082:	009b      	lsls	r3, r3, #2
    9084:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    9088:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay <
		SW_SWITCH_TIMER->CC[cc]) {
    908c:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
	if (delay <
    9090:	428a      	cmp	r2, r1
		SW_SWITCH_TIMER->CC[cc] -= delay;
    9092:	bf8b      	itete	hi
    9094:	f8d3 2540 	ldrhi.w	r2, [r3, #1344]	; 0x540
	} else {
		SW_SWITCH_TIMER->CC[cc] = 1;
    9098:	2201      	movls	r2, #1
		SW_SWITCH_TIMER->CC[cc] -= delay;
    909a:	1a51      	subhi	r1, r2, r1
		SW_SWITCH_TIMER->CC[cc] = 1;
    909c:	f8c3 2540 	strls.w	r2, [r3, #1344]	; 0x540
		SW_SWITCH_TIMER->CC[cc] -= delay;
    90a0:	bf88      	it	hi
    90a2:	f8c3 1540 	strhi.w	r1, [r3, #1344]	; 0x540
	}

	NRF_PPI->CHENSET =
    90a6:	4b08      	ldr	r3, [pc, #32]	; (90c8 <sw_switch.isra.9+0xb8>)
    90a8:	f44f 6290 	mov.w	r2, #1152	; 0x480
    90ac:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	 * always need to capture the PDU END time-stamp.
	 */
	radio_tmr_end_capture();
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	sw_tifs_toggle += 1;
    90b0:	1c6b      	adds	r3, r5, #1
	sw_tifs_toggle &= 1;
    90b2:	f003 0301 	and.w	r3, r3, #1
    90b6:	7033      	strb	r3, [r6, #0]
    90b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_TASK_TX;
}

static inline void hal_radio_rxen_on_sw_switch(u8_t ppi)
{
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi) =
    90ba:	4a06      	ldr	r2, [pc, #24]	; (90d4 <sw_switch.isra.9+0xc4>)
    90bc:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
		delay = HAL_RADIO_NS2US_CEIL(
    90c0:	212c      	movs	r1, #44	; 0x2c
    90c2:	e7de      	b.n	9082 <sw_switch.isra.9+0x72>
    90c4:	200016ec 	.word	0x200016ec
    90c8:	4001f000 	.word	0x4001f000
    90cc:	4000110c 	.word	0x4000110c
    90d0:	40001000 	.word	0x40001000
    90d4:	40001004 	.word	0x40001004

000090d8 <isr_radio>:
	if (sfp_radio_isr) {
    90d8:	4b02      	ldr	r3, [pc, #8]	; (90e4 <isr_radio+0xc>)
    90da:	681b      	ldr	r3, [r3, #0]
    90dc:	b103      	cbz	r3, 90e0 <isr_radio+0x8>
		sfp_radio_isr();
    90de:	4718      	bx	r3
    90e0:	4770      	bx	lr
    90e2:	bf00      	nop
    90e4:	200016e8 	.word	0x200016e8

000090e8 <radio_isr_set>:
	sfp_radio_isr = fp_radio_isr;	/* atomic assignment of 32-bit word */
    90e8:	4b06      	ldr	r3, [pc, #24]	; (9104 <radio_isr_set+0x1c>)
    90ea:	6018      	str	r0, [r3, #0]
	NRF_RADIO->INTENSET = (0 |
    90ec:	4b06      	ldr	r3, [pc, #24]	; (9108 <radio_isr_set+0x20>)
    90ee:	2210      	movs	r2, #16
    90f0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    90f4:	4b05      	ldr	r3, [pc, #20]	; (910c <radio_isr_set+0x24>)
    90f6:	2202      	movs	r2, #2
    90f8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
    90fc:	2001      	movs	r0, #1
    90fe:	f7f7 be0b 	b.w	d18 <_arch_irq_enable>
    9102:	bf00      	nop
    9104:	200016e8 	.word	0x200016e8
    9108:	40001000 	.word	0x40001000
    910c:	e000e100 	.word	0xe000e100

00009110 <radio_setup>:
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
    9110:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9114:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
    9118:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
    911a:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
    911e:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
    9122:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
    9126:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
    912a:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
    912e:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
    9132:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
    9136:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
    913a:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
    913e:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
    9142:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
    9146:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
    914a:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
    914e:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
    9152:	4770      	bx	lr

00009154 <radio_reset>:
{
    9154:	b508      	push	{r3, lr}
	irq_disable(RADIO_IRQn);
    9156:	2001      	movs	r0, #1
    9158:	f7f7 fdee 	bl	d38 <_arch_irq_disable>
	NRF_RADIO->POWER =
    915c:	4b08      	ldr	r3, [pc, #32]	; (9180 <radio_reset+0x2c>)
    915e:	2200      	movs	r2, #0
    9160:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	NRF_RADIO->POWER =
    9164:	2201      	movs	r2, #1
    9166:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
    916a:	4a06      	ldr	r2, [pc, #24]	; (9184 <radio_reset+0x30>)
    916c:	6813      	ldr	r3, [r2, #0]
					 0xfffffffe) | 0x01000000;
    916e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    9172:	f023 0301 	bic.w	r3, r3, #1
    9176:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
    917a:	6013      	str	r3, [r2, #0]
    917c:	bd08      	pop	{r3, pc}
    917e:	bf00      	nop
    9180:	40001000 	.word	0x40001000
    9184:	40001774 	.word	0x40001774

00009188 <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
    9188:	4b06      	ldr	r3, [pc, #24]	; (91a4 <radio_phy_set+0x1c>)
	switch (phy) {
    918a:	2802      	cmp	r0, #2
		mode = RADIO_MODE_MODE_Ble_1Mbit;
    918c:	bf0c      	ite	eq
    918e:	2204      	moveq	r2, #4
    9190:	2203      	movne	r2, #3
    9192:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
    9196:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
    919a:	f042 0201 	orr.w	r2, r2, #1
    919e:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
    91a2:	4770      	bx	lr
    91a4:	40001000 	.word	0x40001000

000091a8 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = power;
    91a8:	4b01      	ldr	r3, [pc, #4]	; (91b0 <radio_tx_power_set+0x8>)
    91aa:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    91ae:	4770      	bx	lr
    91b0:	40001000 	.word	0x40001000

000091b4 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
    91b4:	4b01      	ldr	r3, [pc, #4]	; (91bc <radio_freq_chan_set+0x8>)
    91b6:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    91ba:	4770      	bx	lr
    91bc:	40001000 	.word	0x40001000

000091c0 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
    91c0:	4b07      	ldr	r3, [pc, #28]	; (91e0 <radio_whiten_iv_set+0x20>)
    91c2:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
    91c6:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
    91ca:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
    91ce:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
    91d2:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
    91d6:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
    91da:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    91de:	4770      	bx	lr
    91e0:	40001000 	.word	0x40001000

000091e4 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
    91e4:	4a0a      	ldr	r2, [pc, #40]	; (9210 <radio_aa_set+0x2c>)
    91e6:	2300      	movs	r3, #0
    91e8:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
    91ec:	2301      	movs	r3, #1
    91ee:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
    91f2:	78c3      	ldrb	r3, [r0, #3]
    91f4:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
    91f8:	7843      	ldrb	r3, [r0, #1]
    91fa:	7881      	ldrb	r1, [r0, #2]
    91fc:	041b      	lsls	r3, r3, #16
    91fe:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    9202:	7801      	ldrb	r1, [r0, #0]
    9204:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    9208:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
    920c:	4770      	bx	lr
    920e:	bf00      	nop
    9210:	40001000 	.word	0x40001000

00009214 <radio_pkt_configure>:
	switch (phy) {
    9214:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
    9218:	2b02      	cmp	r3, #2
{
    921a:	b510      	push	{r4, lr}
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
    921c:	bf0c      	ite	eq
    921e:	f04f 7480 	moveq.w	r4, #16777216	; 0x1000000
    9222:	2400      	movne	r4, #0
	if (dc) {
    9224:	07d3      	lsls	r3, r2, #31
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
    9226:	f1c0 0308 	rsb	r3, r0, #8
    922a:	ea4f 4303 	mov.w	r3, r3, lsl #16
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
    922e:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
    9232:	f440 7080 	orr.w	r0, r0, #256	; 0x100
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
    9236:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
    923a:	4a0b      	ldr	r2, [pc, #44]	; (9268 <radio_pkt_configure+0x54>)
			    RADIO_PCNF0_S1LEN_Msk) |
    923c:	ea43 0300 	orr.w	r3, r3, r0
		extra |= (RADIO_PCNF0_S1INCL_Include <<
    9240:	bf48      	it	mi
    9242:	f444 1480 	orrmi.w	r4, r4, #1048576	; 0x100000
			    RADIO_PCNF0_S1LEN_Msk) |
    9246:	4323      	orrs	r3, r4
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
    9248:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
    924c:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
    9250:	4b06      	ldr	r3, [pc, #24]	; (926c <radio_pkt_configure+0x58>)
    9252:	4003      	ands	r3, r0
    9254:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((u32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
    9258:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
    925c:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    9260:	4319      	orrs	r1, r3
    9262:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
    9266:	bd10      	pop	{r4, pc}
    9268:	40001000 	.word	0x40001000
    926c:	fef80000 	.word	0xfef80000

00009270 <radio_pkt_rx_set>:
    9270:	4b01      	ldr	r3, [pc, #4]	; (9278 <radio_pkt_rx_set+0x8>)
    9272:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    9276:	4770      	bx	lr
    9278:	40001000 	.word	0x40001000

0000927c <radio_pkt_tx_set>:
	NRF_RADIO->PACKETPTR = (u32_t)tx_packet;
    927c:	4b01      	ldr	r3, [pc, #4]	; (9284 <radio_pkt_tx_set+0x8>)
    927e:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    9282:	4770      	bx	lr
    9284:	40001000 	.word	0x40001000

00009288 <radio_tx_ready_delay_get>:
	switch (phy) {
    9288:	2802      	cmp	r0, #2
}
    928a:	bf0c      	ite	eq
    928c:	2028      	moveq	r0, #40	; 0x28
    928e:	2029      	movne	r0, #41	; 0x29
    9290:	4770      	bx	lr

00009292 <radio_tx_chain_delay_get>:
}
    9292:	2001      	movs	r0, #1
    9294:	4770      	bx	lr

00009296 <radio_rx_ready_delay_get>:
}
    9296:	2029      	movs	r0, #41	; 0x29
    9298:	4770      	bx	lr

0000929a <radio_rx_chain_delay_get>:
	switch (phy) {
    929a:	2802      	cmp	r0, #2
}
    929c:	bf0c      	ite	eq
    929e:	2005      	moveq	r0, #5
    92a0:	200a      	movne	r0, #10
    92a2:	4770      	bx	lr

000092a4 <radio_rx_enable>:
	NRF_RADIO->TASKS_RXEN = 1;
    92a4:	4b01      	ldr	r3, [pc, #4]	; (92ac <radio_rx_enable+0x8>)
    92a6:	2201      	movs	r2, #1
    92a8:	605a      	str	r2, [r3, #4]
    92aa:	4770      	bx	lr
    92ac:	40001000 	.word	0x40001000

000092b0 <radio_tx_enable>:
	NRF_RADIO->TASKS_TXEN = 1;
    92b0:	4b01      	ldr	r3, [pc, #4]	; (92b8 <radio_tx_enable+0x8>)
    92b2:	2201      	movs	r2, #1
    92b4:	601a      	str	r2, [r3, #0]
    92b6:	4770      	bx	lr
    92b8:	40001000 	.word	0x40001000

000092bc <radio_disable>:
	NRF_PPI->CHENCLR = HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
    92bc:	4a07      	ldr	r2, [pc, #28]	; (92dc <radio_disable+0x20>)
    92be:	f44f 6390 	mov.w	r3, #1152	; 0x480
    92c2:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	NRF_PPI->TASKS_CHG[SW_SWITCH_TIMER_TASK_GROUP(0)].DIS = 1;
    92c6:	2301      	movs	r3, #1
    92c8:	6053      	str	r3, [r2, #4]
	NRF_PPI->TASKS_CHG[SW_SWITCH_TIMER_TASK_GROUP(1)].DIS = 1;
    92ca:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
    92cc:	f5a2 32f0 	sub.w	r2, r2, #122880	; 0x1e000
    92d0:	2100      	movs	r1, #0
    92d2:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
	NRF_RADIO->TASKS_DISABLE = 1;
    92d6:	6113      	str	r3, [r2, #16]
    92d8:	4770      	bx	lr
    92da:	bf00      	nop
    92dc:	4001f000 	.word	0x4001f000

000092e0 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
    92e0:	4b04      	ldr	r3, [pc, #16]	; (92f4 <radio_status_reset+0x14>)
    92e2:	2200      	movs	r2, #0
    92e4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
    92e8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
    92ec:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    92f0:	4770      	bx	lr
    92f2:	bf00      	nop
    92f4:	40001000 	.word	0x40001000

000092f8 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
    92f8:	4b03      	ldr	r3, [pc, #12]	; (9308 <radio_is_ready+0x10>)
    92fa:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
    92fe:	3000      	adds	r0, #0
    9300:	bf18      	it	ne
    9302:	2001      	movne	r0, #1
    9304:	4770      	bx	lr
    9306:	bf00      	nop
    9308:	40001000 	.word	0x40001000

0000930c <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
    930c:	4b03      	ldr	r3, [pc, #12]	; (931c <radio_is_done+0x10>)
    930e:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
    9312:	3000      	adds	r0, #0
    9314:	bf18      	it	ne
    9316:	2001      	movne	r0, #1
    9318:	4770      	bx	lr
    931a:	bf00      	nop
    931c:	40001000 	.word	0x40001000

00009320 <radio_is_idle>:
	return (NRF_RADIO->STATE == 0);
    9320:	4b03      	ldr	r3, [pc, #12]	; (9330 <radio_is_idle+0x10>)
    9322:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
    9326:	fab0 f080 	clz	r0, r0
    932a:	0940      	lsrs	r0, r0, #5
    932c:	4770      	bx	lr
    932e:	bf00      	nop
    9330:	40001000 	.word	0x40001000

00009334 <radio_crc_configure>:
	NRF_RADIO->CRCCNF =
    9334:	4b04      	ldr	r3, [pc, #16]	; (9348 <radio_crc_configure+0x14>)
    9336:	f240 1203 	movw	r2, #259	; 0x103
    933a:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_RADIO->CRCPOLY = polynomial;
    933e:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
    9342:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
    9346:	4770      	bx	lr
    9348:	40001000 	.word	0x40001000

0000934c <radio_crc_is_valid>:
	return (NRF_RADIO->CRCSTATUS != 0);
    934c:	4b03      	ldr	r3, [pc, #12]	; (935c <radio_crc_is_valid+0x10>)
    934e:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    9352:	3000      	adds	r0, #0
    9354:	bf18      	it	ne
    9356:	2001      	movne	r0, #1
    9358:	4770      	bx	lr
    935a:	bf00      	nop
    935c:	40001000 	.word	0x40001000

00009360 <radio_pkt_empty_get>:
}
    9360:	4800      	ldr	r0, [pc, #0]	; (9364 <radio_pkt_empty_get+0x4>)
    9362:	4770      	bx	lr
    9364:	200015dc 	.word	0x200015dc

00009368 <radio_pkt_scratch_get>:
}
    9368:	4800      	ldr	r0, [pc, #0]	; (936c <radio_pkt_scratch_get+0x4>)
    936a:	4770      	bx	lr
    936c:	200015e0 	.word	0x200015e0

00009370 <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    9370:	4b04      	ldr	r3, [pc, #16]	; (9384 <radio_switch_complete_and_rx+0x14>)
    9372:	2203      	movs	r2, #3
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
    9374:	2100      	movs	r1, #0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    9376:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	sw_switch(0, 0, 0, phy_rx, 0);
    937a:	4602      	mov	r2, r0
    937c:	4608      	mov	r0, r1
    937e:	f7ff be47 	b.w	9010 <sw_switch.isra.9>
    9382:	bf00      	nop
    9384:	40001000 	.word	0x40001000

00009388 <radio_switch_complete_and_tx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    9388:	4b03      	ldr	r3, [pc, #12]	; (9398 <radio_switch_complete_and_tx+0x10>)
    938a:	2103      	movs	r1, #3
    938c:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
    9390:	4601      	mov	r1, r0
    9392:	2001      	movs	r0, #1
    9394:	f7ff be3c 	b.w	9010 <sw_switch.isra.9>
    9398:	40001000 	.word	0x40001000

0000939c <radio_switch_complete_and_disable>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
    939c:	4b05      	ldr	r3, [pc, #20]	; (93b4 <radio_switch_complete_and_disable+0x18>)
    939e:	2203      	movs	r2, #3
    93a0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_PPI->CHENCLR = HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
    93a4:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
    93a8:	f44f 6290 	mov.w	r2, #1152	; 0x480
    93ac:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    93b0:	4770      	bx	lr
    93b2:	bf00      	nop
    93b4:	40001000 	.word	0x40001000

000093b8 <radio_rssi_measure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
    93b8:	4a03      	ldr	r2, [pc, #12]	; (93c8 <radio_rssi_measure+0x10>)
    93ba:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    93be:	f443 7388 	orr.w	r3, r3, #272	; 0x110
    93c2:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    93c6:	4770      	bx	lr
    93c8:	40001000 	.word	0x40001000

000093cc <radio_rssi_get>:
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}

u32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
    93cc:	4b01      	ldr	r3, [pc, #4]	; (93d4 <radio_rssi_get+0x8>)
    93ce:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
    93d2:	4770      	bx	lr
    93d4:	40001000 	.word	0x40001000

000093d8 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
    93d8:	4b02      	ldr	r3, [pc, #8]	; (93e4 <radio_rssi_status_reset+0xc>)
    93da:	2200      	movs	r2, #0
    93dc:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    93e0:	4770      	bx	lr
    93e2:	bf00      	nop
    93e4:	40001000 	.word	0x40001000

000093e8 <radio_rssi_is_ready>:
}

u32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
    93e8:	4b03      	ldr	r3, [pc, #12]	; (93f8 <radio_rssi_is_ready+0x10>)
    93ea:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
    93ee:	3000      	adds	r0, #0
    93f0:	bf18      	it	ne
    93f2:	2001      	movne	r0, #1
    93f4:	4770      	bx	lr
    93f6:	bf00      	nop
    93f8:	40001000 	.word	0x40001000

000093fc <radio_filter_configure>:

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
    93fc:	b530      	push	{r4, r5, lr}
    93fe:	2400      	movs	r4, #0
    9400:	00a3      	lsls	r3, r4, #2
    9402:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    9406:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
	u8_t index;

	for (index = 0; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
    940a:	6815      	ldr	r5, [r2, #0]
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    940c:	f8c3 5600 	str.w	r5, [r3, #1536]	; 0x600
    9410:	3401      	adds	r4, #1
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
    9412:	8895      	ldrh	r5, [r2, #4]
    9414:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	for (index = 0; index < 8; index++) {
    9418:	2c08      	cmp	r4, #8
		bdaddr += 6;
    941a:	f102 0206 	add.w	r2, r2, #6
	for (index = 0; index < 8; index++) {
    941e:	d1ef      	bne.n	9400 <radio_filter_configure+0x4>
	}

	NRF_RADIO->DACNF = ((u32_t)bitmask_addr_type << 8) | bitmask_enable;
    9420:	4b02      	ldr	r3, [pc, #8]	; (942c <radio_filter_configure+0x30>)
    9422:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
    9426:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
    942a:	bd30      	pop	{r4, r5, pc}
    942c:	40001000 	.word	0x40001000

00009430 <radio_filter_disable>:
}

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
    9430:	4a03      	ldr	r2, [pc, #12]	; (9440 <radio_filter_disable+0x10>)
    9432:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
    9436:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    943a:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
    943e:	4770      	bx	lr
    9440:	40001000 	.word	0x40001000

00009444 <radio_filter_status_reset>:
}

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
    9444:	4b02      	ldr	r3, [pc, #8]	; (9450 <radio_filter_status_reset+0xc>)
    9446:	2200      	movs	r2, #0
    9448:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    944c:	4770      	bx	lr
    944e:	bf00      	nop
    9450:	40001000 	.word	0x40001000

00009454 <radio_filter_has_match>:
}

u32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
    9454:	4b03      	ldr	r3, [pc, #12]	; (9464 <radio_filter_has_match+0x10>)
    9456:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
    945a:	3000      	adds	r0, #0
    945c:	bf18      	it	ne
    945e:	2001      	movne	r0, #1
    9460:	4770      	bx	lr
    9462:	bf00      	nop
    9464:	40001000 	.word	0x40001000

00009468 <radio_filter_match_get>:

u32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
    9468:	4b01      	ldr	r3, [pc, #4]	; (9470 <radio_filter_match_get+0x8>)
    946a:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
    946e:	4770      	bx	lr
    9470:	40001000 	.word	0x40001000

00009474 <radio_tmr_status_reset>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
}

void radio_tmr_status_reset(void)
{
	NRF_RTC0->EVTENCLR = RTC_EVTENCLR_COMPARE2_Msk;
    9474:	4b05      	ldr	r3, [pc, #20]	; (948c <radio_tmr_status_reset+0x18>)
    9476:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    947a:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	NRF_PPI->CHENCLR =
    947e:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
    9482:	227f      	movs	r2, #127	; 0x7f
    9484:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    9488:	4770      	bx	lr
    948a:	bf00      	nop
    948c:	4000b000 	.word	0x4000b000

00009490 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(u32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	SW_SWITCH_TIMER->CC[SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle)] = tifs;
    9490:	4b03      	ldr	r3, [pc, #12]	; (94a0 <radio_tmr_tifs_set+0x10>)
    9492:	4a04      	ldr	r2, [pc, #16]	; (94a4 <radio_tmr_tifs_set+0x14>)
    9494:	781b      	ldrb	r3, [r3, #0]
    9496:	f503 73a8 	add.w	r3, r3, #336	; 0x150
    949a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    949e:	4770      	bx	lr
    94a0:	200016ec 	.word	0x200016ec
    94a4:	40009000 	.word	0x40009000

000094a8 <radio_tmr_start>:
#endif
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
    94a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
    94ac:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
    94b0:	4c30      	ldr	r4, [pc, #192]	; (9574 <radio_tmr_start+0xcc>)
		ticks_start--;
		remainder += 30517578UL;
	}
	remainder /= 1000000UL;
    94b2:	4d31      	ldr	r5, [pc, #196]	; (9578 <radio_tmr_start+0xd0>)
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
    94b4:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
    94b8:	42a3      	cmp	r3, r4
		remainder += 30517578UL;
    94ba:	bf88      	it	hi
    94bc:	f102 72e8 	addhi.w	r2, r2, #30408704	; 0x1d00000

	EVENT_TIMER->TASKS_CLEAR = 1;
    94c0:	4b2e      	ldr	r3, [pc, #184]	; (957c <radio_tmr_start+0xd4>)

#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(EVENT_TIMER_NBR);
#endif

	NRF_RTC0->CC[2] = ticks_start;
    94c2:	4c2f      	ldr	r4, [pc, #188]	; (9580 <radio_tmr_start+0xd8>)
		remainder += 30517578UL;
    94c4:	bf82      	ittt	hi
    94c6:	f502 32d4 	addhi.w	r2, r2, #108544	; 0x1a800
		ticks_start--;
    94ca:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
		remainder += 30517578UL;
    94ce:	f502 72a5 	addhi.w	r2, r2, #330	; 0x14a
	EVENT_TIMER->TASKS_CLEAR = 1;
    94d2:	2601      	movs	r6, #1
	remainder /= 1000000UL;
    94d4:	fbb2 f5f5 	udiv	r5, r2, r5
	EVENT_TIMER->MODE = 0;
    94d8:	2700      	movs	r7, #0
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
    94da:	2202      	movs	r2, #2
	EVENT_TIMER->PRESCALER = 4;
    94dc:	f04f 0804 	mov.w	r8, #4
	EVENT_TIMER->TASKS_CLEAR = 1;
    94e0:	60de      	str	r6, [r3, #12]
	EVENT_TIMER->MODE = 0;
    94e2:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	EVENT_TIMER->PRESCALER = 4;
    94e6:	f8c3 8510 	str.w	r8, [r3, #1296]	; 0x510
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
    94ea:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	EVENT_TIMER->CC[0] = remainder;
    94ee:	f8c3 5540 	str.w	r5, [r3, #1344]	; 0x540
	NRF_RTC0->CC[2] = ticks_start;
    94f2:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
	NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE2_Msk;
    94f6:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    94fa:	f8c4 1344 	str.w	r1, [r4, #836]	; 0x344

	HAL_EVENT_TIMER_START_PPI_REGISTER_EVT = HAL_EVENT_TIMER_START_EVT;
    94fe:	f504 34a0 	add.w	r4, r4, #81920	; 0x14000
    9502:	4920      	ldr	r1, [pc, #128]	; (9584 <radio_tmr_start+0xdc>)
    9504:	f8c4 1518 	str.w	r1, [r4, #1304]	; 0x518
	HAL_EVENT_TIMER_START_PPI_REGISTER_TASK = HAL_EVENT_TIMER_START_TASK;
    9508:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
	NRF_PPI->CHENSET = HAL_EVENT_TIMER_START_PPI_ENABLE;
    950c:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects_CHEN();
#endif

	hal_radio_enable_on_tick_ppi_config_and_enable(trx);
    9510:	f7ff fd66 	bl	8fe0 <hal_radio_enable_on_tick_ppi_config_and_enable>
#if !defined(CONFIG_BT_CTLR_TIFS_HW)
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	SW_SWITCH_TIMER->TASKS_CLEAR = 1;
    9514:	4b1c      	ldr	r3, [pc, #112]	; (9588 <radio_tmr_start+0xe0>)
    9516:	60de      	str	r6, [r3, #12]
	SW_SWITCH_TIMER->MODE = 0;
    9518:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
    951c:	f8c3 8510 	str.w	r8, [r3, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
    9520:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
	SW_SWITCH_TIMER->TASKS_START = 1;
    9524:	601e      	str	r6, [r3, #0]
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(SW_SWITCH_TIMER_NBR);
	NRF_TIMER_regw_sideeffects_TASKS_START(SW_SWITCH_TIMER_NBR);
#endif
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	HAL_SW_SWITCH_TIMER_CLEAR_PPI_REGISTER_EVT =
    9526:	f5a3 43fd 	sub.w	r3, r3, #32384	; 0x7e80
    952a:	3b74      	subs	r3, #116	; 0x74
    952c:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
		HAL_SW_SWITCH_TIMER_CLEAR_PPI_EVT;
	HAL_SW_SWITCH_TIMER_CLEAR_PPI_REGISTER_TASK =
    9530:	f503 43fe 	add.w	r3, r3, #32512	; 0x7f00
    9534:	f8c4 354c 	str.w	r3, [r4, #1356]	; 0x54c
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || !defined(CONFIG_SOC_NRF52840)
	/* NOTE: PPI channel group disable is setup explicitly in sw_switch
	 *       function when Coded PHY on nRF52840 is supported.
	 */
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_EVT(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) =
    9538:	f503 739a 	add.w	r3, r3, #308	; 0x134
    953c:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(
			SW_SWITCH_TIMER_EVTS_COMP(0));
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) =
    9540:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
    9544:	33c4      	adds	r3, #196	; 0xc4
    9546:	f8c4 3554 	str.w	r3, [r4, #1364]	; 0x554
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(0);

	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_EVT(
			HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(1)) =
    954a:	f5a3 33af 	sub.w	r3, r3, #89600	; 0x15e00
    954e:	3bc0      	subs	r3, #192	; 0xc0
    9550:	f8c4 3558 	str.w	r3, [r4, #1368]	; 0x558
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(
			SW_SWITCH_TIMER_EVTS_COMP(1));
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(1)) =
    9554:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
    9558:	33c8      	adds	r3, #200	; 0xc8
    955a:	f8c4 355c 	str.w	r3, [r4, #1372]	; 0x55c
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(1);
#endif /* !CONFIG_BT_CTLR_PHY_CODED || !CONFIG_SOC_NRF52840 */

	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
    955e:	f44f 6310 	mov.w	r3, #2304	; 0x900
    9562:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_0_INCLUDE |
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_0_INCLUDE;
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
    9566:	f44f 5390 	mov.w	r3, #4608	; 0x1200
    956a:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
	NRF_PPI_regw_sideeffects();
#endif
	return remainder;
}
    956e:	4628      	mov	r0, r5
    9570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9574:	7ff0bdbf 	.word	0x7ff0bdbf
    9578:	000f4240 	.word	0x000f4240
    957c:	40008000 	.word	0x40008000
    9580:	4000b000 	.word	0x4000b000
    9584:	4000b148 	.word	0x4000b148
    9588:	40009000 	.word	0x40009000

0000958c <radio_tmr_stop>:
	return start;
}

void radio_tmr_stop(void)
{
	EVENT_TIMER->TASKS_STOP = 1;
    958c:	4a04      	ldr	r2, [pc, #16]	; (95a0 <radio_tmr_stop+0x14>)
    958e:	2301      	movs	r3, #1
    9590:	6053      	str	r3, [r2, #4]
	EVENT_TIMER->TASKS_SHUTDOWN = 1;
    9592:	6113      	str	r3, [r2, #16]
	NRF_TIMER_regw_sideeffects_TASKS_STOP(EVENT_TIMER_NBR);
	/* Shutdown not modelled (deprecated) */
#endif

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	SW_SWITCH_TIMER->TASKS_STOP = 1;
    9594:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    9598:	6053      	str	r3, [r2, #4]
	SW_SWITCH_TIMER->TASKS_SHUTDOWN = 1;
    959a:	6113      	str	r3, [r2, #16]
    959c:	4770      	bx	lr
    959e:	bf00      	nop
    95a0:	40008000 	.word	0x40008000

000095a4 <radio_tmr_hcto_configure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_tmr_hcto_configure(u32_t hcto)
{
	EVENT_TIMER->CC[1] = hcto;
    95a4:	4b0c      	ldr	r3, [pc, #48]	; (95d8 <radio_tmr_hcto_configure+0x34>)
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_CC(EVENT_TIMER_NBR, 1);
#endif

	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
    95a6:	4a0d      	ldr	r2, [pc, #52]	; (95dc <radio_tmr_hcto_configure+0x38>)
	EVENT_TIMER->CC[1] = hcto;
    95a8:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
    95ac:	f503 33b8 	add.w	r3, r3, #94208	; 0x17000
    95b0:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
    95b4:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    95b8:	3240      	adds	r2, #64	; 0x40
    95ba:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_EVT =
    95be:	f502 7280 	add.w	r2, r2, #256	; 0x100
    95c2:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
		HAL_RADIO_DISABLE_ON_HCTO_PPI_EVT;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_TASK =
    95c6:	f5a2 42e2 	sub.w	r2, r2, #28928	; 0x7100
    95ca:	3a34      	subs	r2, #52	; 0x34
    95cc:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
		HAL_RADIO_DISABLE_ON_HCTO_PPI_TASK;
	NRF_PPI->CHENSET =
    95d0:	2218      	movs	r2, #24
    95d2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    95d6:	4770      	bx	lr
    95d8:	40008000 	.word	0x40008000
    95dc:	40001104 	.word	0x40001104

000095e0 <radio_tmr_aa_capture>:
#endif
}

void radio_tmr_aa_capture(void)
{
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_EVT =
    95e0:	4b0b      	ldr	r3, [pc, #44]	; (9610 <radio_tmr_aa_capture+0x30>)
    95e2:	4a0c      	ldr	r2, [pc, #48]	; (9614 <radio_tmr_aa_capture+0x34>)
    95e4:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
		HAL_RADIO_READY_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_TASK =
    95e8:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    95ec:	3240      	adds	r2, #64	; 0x40
    95ee:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
		HAL_RADIO_READY_TIME_CAPTURE_PPI_TASK;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
    95f2:	f5a2 42de 	sub.w	r2, r2, #28416	; 0x6f00
    95f6:	3a3c      	subs	r2, #60	; 0x3c
    95f8:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
    95fc:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    9600:	3240      	adds	r2, #64	; 0x40
    9602:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	NRF_PPI->CHENSET =
    9606:	220c      	movs	r2, #12
    9608:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    960c:	4770      	bx	lr
    960e:	bf00      	nop
    9610:	4001f000 	.word	0x4001f000
    9614:	40001100 	.word	0x40001100

00009618 <radio_tmr_aa_get>:
#endif
}

u32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
    9618:	4b01      	ldr	r3, [pc, #4]	; (9620 <radio_tmr_aa_get+0x8>)
    961a:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
    961e:	4770      	bx	lr
    9620:	40008000 	.word	0x40008000

00009624 <radio_tmr_aa_save>:

static u32_t radio_tmr_aa;

void radio_tmr_aa_save(u32_t aa)
{
	radio_tmr_aa = aa;
    9624:	4b01      	ldr	r3, [pc, #4]	; (962c <radio_tmr_aa_save+0x8>)
    9626:	6018      	str	r0, [r3, #0]
    9628:	4770      	bx	lr
    962a:	bf00      	nop
    962c:	200016e4 	.word	0x200016e4

00009630 <radio_tmr_aa_restore>:

u32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
}
    9630:	4b01      	ldr	r3, [pc, #4]	; (9638 <radio_tmr_aa_restore+0x8>)
    9632:	6818      	ldr	r0, [r3, #0]
    9634:	4770      	bx	lr
    9636:	bf00      	nop
    9638:	200016e4 	.word	0x200016e4

0000963c <radio_tmr_ready_get>:

u32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
    963c:	4b01      	ldr	r3, [pc, #4]	; (9644 <radio_tmr_ready_get+0x8>)
    963e:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
    9642:	4770      	bx	lr
    9644:	40008000 	.word	0x40008000

00009648 <radio_tmr_end_capture>:

void radio_tmr_end_capture(void)
{
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_EVT =
    9648:	4b06      	ldr	r3, [pc, #24]	; (9664 <radio_tmr_end_capture+0x1c>)
    964a:	4a07      	ldr	r2, [pc, #28]	; (9668 <radio_tmr_end_capture+0x20>)
    964c:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
		HAL_RADIO_END_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_TASK =
    9650:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    9654:	323c      	adds	r2, #60	; 0x3c
    9656:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
		HAL_RADIO_END_TIME_CAPTURE_PPI_TASK;
	NRF_PPI->CHENSET = HAL_RADIO_END_TIME_CAPTURE_PPI_ENABLE;
    965a:	2220      	movs	r2, #32
    965c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    9660:	4770      	bx	lr
    9662:	bf00      	nop
    9664:	4001f000 	.word	0x4001f000
    9668:	4000110c 	.word	0x4000110c

0000966c <radio_tmr_end_get>:
    966c:	4b01      	ldr	r3, [pc, #4]	; (9674 <radio_tmr_end_get+0x8>)
    966e:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
    9672:	4770      	bx	lr
    9674:	40008000 	.word	0x40008000

00009678 <radio_tmr_tifs_base_get>:
u32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
    9678:	4b01      	ldr	r3, [pc, #4]	; (9680 <radio_tmr_tifs_base_get+0x8>)
    967a:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

u32_t radio_tmr_tifs_base_get(void)
{
	return radio_tmr_end_get();
}
    967e:	4770      	bx	lr
    9680:	40008000 	.word	0x40008000

00009684 <radio_ccm_rx_pkt_set>:
void *radio_ccm_rx_pkt_set(struct ccm *ccm, u8_t phy, void *pkt)
{

	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    9684:	4b16      	ldr	r3, [pc, #88]	; (96e0 <radio_ccm_rx_pkt_set+0x5c>)
{
    9686:	b570      	push	{r4, r5, r6, lr}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    9688:	2400      	movs	r4, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    968a:	2502      	movs	r5, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    968c:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500

	/* Select CCM data rate based on current PHY in use. */
	switch (phy) {
	default:
	case BIT(0):
		mode |= (CCM_MODE_DATARATE_1Mbit <<
    9690:	4e14      	ldr	r6, [pc, #80]	; (96e4 <radio_ccm_rx_pkt_set+0x60>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    9692:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
		mode |= (CCM_MODE_DATARATE_1Mbit <<
    9696:	4d14      	ldr	r5, [pc, #80]	; (96e8 <radio_ccm_rx_pkt_set+0x64>)
    9698:	2902      	cmp	r1, #2
    969a:	bf0c      	ite	eq
    969c:	4629      	moveq	r1, r5
    969e:	4631      	movne	r1, r6
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}
#endif /* CONFIG_SOC_SERIES_NRF52X */

	NRF_CCM->MODE = mode;
    96a0:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
    96a4:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)_pkt_scratch;
    96a8:	4810      	ldr	r0, [pc, #64]	; (96ec <radio_ccm_rx_pkt_set+0x68>)
    96aa:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)pkt;
    96ae:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    96b2:	4a0f      	ldr	r2, [pc, #60]	; (96f0 <radio_ccm_rx_pkt_set+0x6c>)
    96b4:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = 0;
	NRF_CCM->EVENTS_ENDCRYPT = 0;
	NRF_CCM->EVENTS_ERROR = 0;

	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
    96b8:	490e      	ldr	r1, [pc, #56]	; (96f4 <radio_ccm_rx_pkt_set+0x70>)
    96ba:	4a0f      	ldr	r2, [pc, #60]	; (96f8 <radio_ccm_rx_pkt_set+0x74>)
	NRF_CCM->SHORTS = 0;
    96bc:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
    96c0:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
    96c4:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
    96c8:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	HAL_TRIGGER_CRYPT_PPI_REGISTER_TASK = HAL_TRIGGER_CRYPT_PPI_TASK;
    96cc:	f501 415f 	add.w	r1, r1, #57088	; 0xdf00
    96d0:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
	NRF_PPI->CHENSET = HAL_TRIGGER_CRYPT_PPI_ENABLE;
    96d4:	2140      	movs	r1, #64	; 0x40
    96d6:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects();
#endif

	NRF_CCM->TASKS_KSGEN = 1;
    96da:	2201      	movs	r2, #1
    96dc:	601a      	str	r2, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
    96de:	bd70      	pop	{r4, r5, r6, pc}
    96e0:	4000f000 	.word	0x4000f000
    96e4:	01000001 	.word	0x01000001
    96e8:	01010001 	.word	0x01010001
    96ec:	200015e0 	.word	0x200015e0
    96f0:	200014d0 	.word	0x200014d0
    96f4:	40001104 	.word	0x40001104
    96f8:	4001f000 	.word	0x4001f000

000096fc <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
    96fc:	b510      	push	{r4, lr}
	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    96fe:	4b0e      	ldr	r3, [pc, #56]	; (9738 <radio_ccm_tx_pkt_set+0x3c>)
    9700:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    9702:	2402      	movs	r4, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    9704:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    9708:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
    970c:	4c0b      	ldr	r4, [pc, #44]	; (973c <radio_ccm_tx_pkt_set+0x40>)
    970e:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
    9712:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)pkt;
    9716:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
    971a:	4809      	ldr	r0, [pc, #36]	; (9740 <radio_ccm_tx_pkt_set+0x44>)
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    971c:	4909      	ldr	r1, [pc, #36]	; (9744 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
    971e:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    9722:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
    9726:	2101      	movs	r1, #1
    9728:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
    972c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
    9730:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	NRF_CCM->TASKS_KSGEN = 1;
    9734:	6019      	str	r1, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
    9736:	bd10      	pop	{r4, pc}
    9738:	4000f000 	.word	0x4000f000
    973c:	01010000 	.word	0x01010000
    9740:	200015e0 	.word	0x200015e0
    9744:	200014d0 	.word	0x200014d0

00009748 <radio_ccm_is_done>:

u32_t radio_ccm_is_done(void)
{
	NRF_CCM->INTENSET = CCM_INTENSET_ENDCRYPT_Msk;
    9748:	4b0c      	ldr	r3, [pc, #48]	; (977c <radio_ccm_is_done+0x34>)
    974a:	2202      	movs	r2, #2
    974c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENSET();
#endif
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
    9750:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    9754:	b16a      	cbz	r2, 9772 <radio_ccm_is_done+0x2a>
		__WFE();
		__SEV();
		__WFE();
	}
	NRF_CCM->INTENCLR = CCM_INTENCLR_ENDCRYPT_Msk;
    9756:	2202      	movs	r2, #2
    9758:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    975c:	4a08      	ldr	r2, [pc, #32]	; (9780 <radio_ccm_is_done+0x38>)
    975e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    9762:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENCLR();
#endif
	NVIC_ClearPendingIRQ(CCM_AAR_IRQn);

	return (NRF_CCM->EVENTS_ERROR == 0);
    9766:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
    976a:	fab0 f080 	clz	r0, r0
    976e:	0940      	lsrs	r0, r0, #5
    9770:	4770      	bx	lr
		__WFE();
    9772:	bf20      	wfe
		__SEV();
    9774:	bf40      	sev
		__WFE();
    9776:	bf20      	wfe
    9778:	e7ea      	b.n	9750 <radio_ccm_is_done+0x8>
    977a:	bf00      	nop
    977c:	4000f000 	.word	0x4000f000
    9780:	e000e100 	.word	0xe000e100

00009784 <radio_ccm_mic_is_valid>:

u32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
    9784:	4b03      	ldr	r3, [pc, #12]	; (9794 <radio_ccm_mic_is_valid+0x10>)
    9786:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    978a:	3000      	adds	r0, #0
    978c:	bf18      	it	ne
    978e:	2001      	movne	r0, #1
    9790:	4770      	bx	lr
    9792:	bf00      	nop
    9794:	4000f000 	.word	0x4000f000

00009798 <radio_ar_match_get>:
#endif
}

u32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
    9798:	4b01      	ldr	r3, [pc, #4]	; (97a0 <radio_ar_match_get+0x8>)
    979a:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    979e:	4770      	bx	lr
    97a0:	4000f000 	.word	0x4000f000

000097a4 <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
    97a4:	4a04      	ldr	r2, [pc, #16]	; (97b8 <radio_ar_status_reset+0x14>)
    97a6:	2300      	movs	r3, #0
    97a8:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

void radio_ar_status_reset(void)
{
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
    97ac:	f502 4260 	add.w	r2, r2, #57344	; 0xe000
    97b0:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    97b4:	4770      	bx	lr
    97b6:	bf00      	nop
    97b8:	40001000 	.word	0x40001000

000097bc <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
    97bc:	4b08      	ldr	r3, [pc, #32]	; (97e0 <radio_ar_has_match+0x24>)
    97be:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
    97c2:	b160      	cbz	r0, 97de <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
    97c4:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
    97c8:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
    97cc:	b138      	cbz	r0, 97de <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
    97ce:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
    97d2:	b120      	cbz	r0, 97de <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
    97d4:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
    97d8:	fab0 f080 	clz	r0, r0
    97dc:	0940      	lsrs	r0, r0, #5
}
    97de:	4770      	bx	lr
    97e0:	40001000 	.word	0x40001000

000097e4 <mayfly_enable_cb>:

void mayfly_enable_cb(u8_t caller_id, u8_t callee_id, u8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
    97e4:	2901      	cmp	r1, #1
    97e6:	d005      	beq.n	97f4 <mayfly_enable_cb+0x10>
    97e8:	4040      	eors	r0, r0
    97ea:	f380 8811 	msr	BASEPRI, r0
    97ee:	f04f 0004 	mov.w	r0, #4
    97f2:	df02      	svc	2

	if (enable) {
		irq_enable(SWI4_IRQn);
    97f4:	2018      	movs	r0, #24
	if (enable) {
    97f6:	b10a      	cbz	r2, 97fc <mayfly_enable_cb+0x18>
		irq_enable(SWI4_IRQn);
    97f8:	f7f7 ba8e 	b.w	d18 <_arch_irq_enable>
	} else {
		irq_disable(SWI4_IRQn);
    97fc:	f7f7 ba9c 	b.w	d38 <_arch_irq_disable>

00009800 <mayfly_is_enabled>:

u32_t mayfly_is_enabled(u8_t caller_id, u8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
    9800:	b139      	cbz	r1, 9812 <mayfly_is_enabled+0x12>
    9802:	2901      	cmp	r1, #1
    9804:	d008      	beq.n	9818 <mayfly_is_enabled+0x18>

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(SWI4_IRQn);

	default:
		LL_ASSERT(0);
    9806:	4040      	eors	r0, r0
    9808:	f380 8811 	msr	BASEPRI, r0
    980c:	f04f 0004 	mov.w	r0, #4
    9810:	df02      	svc	2
		return irq_is_enabled(RTC0_IRQn);
    9812:	200b      	movs	r0, #11
		return irq_is_enabled(SWI4_IRQn);
    9814:	f7f7 baa4 	b.w	d60 <_arch_irq_is_enabled>
    9818:	2018      	movs	r0, #24
    981a:	e7fb      	b.n	9814 <mayfly_is_enabled+0x14>

0000981c <mayfly_prio_is_equal>:
u32_t mayfly_prio_is_equal(u8_t caller_id, u8_t callee_id)
{
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
	return (caller_id == callee_id) ||
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
    981c:	4288      	cmp	r0, r1
    981e:	d00a      	beq.n	9836 <mayfly_prio_is_equal+0x1a>
	return (caller_id == callee_id) ||
    9820:	b918      	cbnz	r0, 982a <mayfly_prio_is_equal+0xe>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
    9822:	1e4b      	subs	r3, r1, #1
    9824:	4258      	negs	r0, r3
    9826:	4158      	adcs	r0, r3
    9828:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
    982a:	2801      	cmp	r0, #1
    982c:	d105      	bne.n	983a <mayfly_prio_is_equal+0x1e>
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
    982e:	fab1 f081 	clz	r0, r1
    9832:	0940      	lsrs	r0, r0, #5
    9834:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
    9836:	2001      	movs	r0, #1
    9838:	4770      	bx	lr
    983a:	2000      	movs	r0, #0
		(callee_id == MAYFLY_CALL_ID_WORKER));
#else
	/* TODO: check Kconfig set priorities */
	return caller_id == callee_id;
#endif
}
    983c:	4770      	bx	lr
	...

00009840 <mayfly_pend>:

void mayfly_pend(u8_t caller_id, u8_t callee_id)
{
    9840:	4b08      	ldr	r3, [pc, #32]	; (9864 <mayfly_pend+0x24>)
	(void)caller_id;

	switch (callee_id) {
    9842:	b139      	cbz	r1, 9854 <mayfly_pend+0x14>
    9844:	2901      	cmp	r1, #1
    9846:	d00a      	beq.n	985e <mayfly_pend+0x1e>
	case MAYFLY_CALL_ID_JOB:
		NVIC_SetPendingIRQ(SWI4_IRQn);
		break;

	default:
		LL_ASSERT(0);
    9848:	4040      	eors	r0, r0
    984a:	f380 8811 	msr	BASEPRI, r0
    984e:	f04f 0004 	mov.w	r0, #4
    9852:	df02      	svc	2
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    9854:	f44f 6200 	mov.w	r2, #2048	; 0x800
    9858:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    985c:	4770      	bx	lr
    985e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    9862:	e7f9      	b.n	9858 <mayfly_pend+0x18>
    9864:	e000e100 	.word	0xe000e100

00009868 <hal_ticker_instance0_caller_id_get>:

u8_t hal_ticker_instance0_caller_id_get(u8_t user_id)
{
	u8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
    9868:	2803      	cmp	r0, #3
    986a:	d905      	bls.n	9878 <hal_ticker_instance0_caller_id_get+0x10>

	caller_id = caller_id_lut[user_id];
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
    986c:	4040      	eors	r0, r0
    986e:	f380 8811 	msr	BASEPRI, r0
    9872:	f04f 0004 	mov.w	r0, #4
    9876:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
    9878:	4b02      	ldr	r3, [pc, #8]	; (9884 <hal_ticker_instance0_caller_id_get+0x1c>)
    987a:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
    987c:	2800      	cmp	r0, #0
    987e:	d0f5      	beq.n	986c <hal_ticker_instance0_caller_id_get+0x4>

	return caller_id;
}
    9880:	4770      	bx	lr
    9882:	bf00      	nop
    9884:	0000b568 	.word	0x0000b568

00009888 <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
    9888:	3802      	subs	r0, #2
{
    988a:	b410      	push	{r4}
    988c:	461c      	mov	r4, r3
	switch (caller_id) {
    988e:	2803      	cmp	r0, #3
    9890:	d816      	bhi.n	98c0 <hal_ticker_instance0_sched+0x38>
    9892:	e8df f000 	tbb	[pc, r0]
    9896:	0b02      	.short	0x0b02
    9898:	2411      	.short	0x2411
	case TICKER_CALL_ID_TRIGGER:
		switch (callee_id) {
    989a:	2903      	cmp	r1, #3
    989c:	d110      	bne.n	98c0 <hal_ticker_instance0_sched+0x38>
		{
			static memq_link_t link;
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_worker};

			m.param = instance;
    989e:	4b13      	ldr	r3, [pc, #76]	; (98ec <hal_ticker_instance0_sched+0x64>)

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
    98a0:	2100      	movs	r1, #0
			m.param = instance;
    98a2:	609c      	str	r4, [r3, #8]
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_job};

			m.param = instance;

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
    98a4:	2000      	movs	r0, #0

	default:
		LL_ASSERT(0);
		break;
	}
}
    98a6:	bc10      	pop	{r4}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
    98a8:	f7f9 ba36 	b.w	2d18 <mayfly_enqueue>
		switch (callee_id) {
    98ac:	2904      	cmp	r1, #4
    98ae:	d107      	bne.n	98c0 <hal_ticker_instance0_sched+0x38>
			m.param = instance;
    98b0:	4b0f      	ldr	r3, [pc, #60]	; (98f0 <hal_ticker_instance0_sched+0x68>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
    98b2:	2101      	movs	r1, #1
			m.param = instance;
    98b4:	609c      	str	r4, [r3, #8]
    98b6:	e7f5      	b.n	98a4 <hal_ticker_instance0_sched+0x1c>
		switch (callee_id) {
    98b8:	2903      	cmp	r1, #3
    98ba:	d007      	beq.n	98cc <hal_ticker_instance0_sched+0x44>
    98bc:	2904      	cmp	r1, #4
    98be:	d00a      	beq.n	98d6 <hal_ticker_instance0_sched+0x4e>
		LL_ASSERT(0);
    98c0:	4040      	eors	r0, r0
    98c2:	f380 8811 	msr	BASEPRI, r0
    98c6:	f04f 0004 	mov.w	r0, #4
    98ca:	df02      	svc	2
			m.param = instance;
    98cc:	4b09      	ldr	r3, [pc, #36]	; (98f4 <hal_ticker_instance0_sched+0x6c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
    98ce:	2100      	movs	r1, #0
			m.param = instance;
    98d0:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
    98d2:	2001      	movs	r0, #1
    98d4:	e7e7      	b.n	98a6 <hal_ticker_instance0_sched+0x1e>
			m.param = instance;
    98d6:	4b08      	ldr	r3, [pc, #32]	; (98f8 <hal_ticker_instance0_sched+0x70>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
    98d8:	2101      	movs	r1, #1
			m.param = instance;
    98da:	609c      	str	r4, [r3, #8]
    98dc:	e7f9      	b.n	98d2 <hal_ticker_instance0_sched+0x4a>
		switch (callee_id) {
    98de:	2904      	cmp	r1, #4
    98e0:	d1ee      	bne.n	98c0 <hal_ticker_instance0_sched+0x38>
			m.param = instance;
    98e2:	4b06      	ldr	r3, [pc, #24]	; (98fc <hal_ticker_instance0_sched+0x74>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
    98e4:	2101      	movs	r1, #1
			m.param = instance;
    98e6:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
    98e8:	2003      	movs	r0, #3
    98ea:	e7dc      	b.n	98a6 <hal_ticker_instance0_sched+0x1e>
    98ec:	200038f0 	.word	0x200038f0
    98f0:	20003900 	.word	0x20003900
    98f4:	20003910 	.word	0x20003910
    98f8:	20003920 	.word	0x20003920
    98fc:	20003930 	.word	0x20003930

00009900 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(u32_t value)
{
	cntr_cmp_set(0, value);
    9900:	4601      	mov	r1, r0
    9902:	2000      	movs	r0, #0
    9904:	f7ff bb1c 	b.w	8f40 <cntr_cmp_set>

00009908 <fixed_data_unref>:

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
}

static void fixed_data_unref(struct net_buf *buf, u8_t *data)
{
    9908:	4770      	bx	lr
	...

0000990c <net_buf_pool_get>:
}
    990c:	4b01      	ldr	r3, [pc, #4]	; (9914 <net_buf_pool_get+0x8>)
    990e:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    9912:	4770      	bx	lr
    9914:	20003a3c 	.word	0x20003a3c

00009918 <net_buf_id>:
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    9918:	7982      	ldrb	r2, [r0, #6]
	return buf - pool->__bufs;
    991a:	4b04      	ldr	r3, [pc, #16]	; (992c <net_buf_id+0x14>)
    991c:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    9920:	69db      	ldr	r3, [r3, #28]
    9922:	1ac0      	subs	r0, r0, r3
}
    9924:	4b02      	ldr	r3, [pc, #8]	; (9930 <net_buf_id+0x18>)
	return buf - pool->__bufs;
    9926:	10c0      	asrs	r0, r0, #3
}
    9928:	4358      	muls	r0, r3
    992a:	4770      	bx	lr
    992c:	20003a3c 	.word	0x20003a3c
    9930:	aaaaaaab 	.word	0xaaaaaaab

00009934 <fixed_data_alloc>:
{
    9934:	b510      	push	{r4, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    9936:	4b09      	ldr	r3, [pc, #36]	; (995c <fixed_data_alloc+0x28>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    9938:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    993a:	eb03 1342 	add.w	r3, r3, r2, lsl #5
	*size = min(fixed->data_size, *size);
    993e:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    9940:	699b      	ldr	r3, [r3, #24]
    9942:	685c      	ldr	r4, [r3, #4]
	*size = min(fixed->data_size, *size);
    9944:	6823      	ldr	r3, [r4, #0]
    9946:	429a      	cmp	r2, r3
    9948:	bf94      	ite	ls
    994a:	600a      	strls	r2, [r1, #0]
    994c:	600b      	strhi	r3, [r1, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
    994e:	f7ff ffe3 	bl	9918 <net_buf_id>
    9952:	e894 000c 	ldmia.w	r4, {r2, r3}
}
    9956:	fb02 3000 	mla	r0, r2, r0, r3
    995a:	bd10      	pop	{r4, pc}
    995c:	20003a3c 	.word	0x20003a3c

00009960 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  s32_t timeout)
#endif
{
    9960:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    9964:	4605      	mov	r5, r0
    9966:	9101      	str	r1, [sp, #4]
    9968:	4616      	mov	r6, r2
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
    996a:	f000 fd89 	bl	a480 <_impl_k_uptime_get_32>
    996e:	4607      	mov	r7, r0
	__asm__ volatile(
    9970:	f04f 0320 	mov.w	r3, #32
    9974:	f3ef 8811 	mrs	r8, BASEPRI
    9978:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
    997c:	8a6b      	ldrh	r3, [r5, #18]
    997e:	2b00      	cmp	r3, #0
    9980:	d03d      	beq.n	99fe <net_buf_alloc_len+0x9e>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
    9982:	8a2a      	ldrh	r2, [r5, #16]
    9984:	429a      	cmp	r2, r3
    9986:	d92a      	bls.n	99de <net_buf_alloc_len+0x7e>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
    9988:	2100      	movs	r1, #0
    998a:	4628      	mov	r0, r5
    998c:	f000 fad3 	bl	9f36 <k_queue_get>
			if (buf) {
    9990:	4604      	mov	r4, r0
    9992:	b320      	cbz	r0, 99de <net_buf_alloc_len+0x7e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    9994:	f388 8811 	msr	BASEPRI, r8
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
    9998:	9b01      	ldr	r3, [sp, #4]
    999a:	2b00      	cmp	r3, #0
    999c:	d03c      	beq.n	9a18 <net_buf_alloc_len+0xb8>
		if (timeout != K_NO_WAIT && timeout != K_FOREVER) {
    999e:	1c73      	adds	r3, r6, #1
    99a0:	2b01      	cmp	r3, #1
    99a2:	d906      	bls.n	99b2 <net_buf_alloc_len+0x52>
    99a4:	f000 fd6c 	bl	a480 <_impl_k_uptime_get_32>
			u32_t diff = k_uptime_get_32() - alloc_start;
    99a8:	1bc0      	subs	r0, r0, r7

			timeout -= min(timeout, diff);
    99aa:	42b0      	cmp	r0, r6
    99ac:	bf94      	ite	ls
    99ae:	1a36      	subls	r6, r6, r0
    99b0:	1bb6      	subhi	r6, r6, r6
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    99b2:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
    99b4:	4f1e      	ldr	r7, [pc, #120]	; (9a30 <net_buf_alloc_len+0xd0>)
    99b6:	eb07 1343 	add.w	r3, r7, r3, lsl #5
    99ba:	4632      	mov	r2, r6
    99bc:	699b      	ldr	r3, [r3, #24]
    99be:	681b      	ldr	r3, [r3, #0]
    99c0:	a901      	add	r1, sp, #4
    99c2:	681b      	ldr	r3, [r3, #0]
    99c4:	4620      	mov	r0, r4
    99c6:	4798      	blx	r3
    99c8:	4605      	mov	r5, r0
		}

		buf->__buf = data_alloc(buf, &size, timeout);
    99ca:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
    99cc:	bb28      	cbnz	r0, 9a1a <net_buf_alloc_len+0xba>
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	k_lifo_put(&pool->free, buf);
    99ce:	79a0      	ldrb	r0, [r4, #6]
    99d0:	4621      	mov	r1, r4
    99d2:	eb07 1040 	add.w	r0, r7, r0, lsl #5
    99d6:	f000 fa8e 	bl	9ef6 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
    99da:	462c      	mov	r4, r5
    99dc:	e018      	b.n	9a10 <net_buf_alloc_len+0xb0>
		uninit_count = pool->uninit_count--;
    99de:	8a6b      	ldrh	r3, [r5, #18]
    99e0:	1e5a      	subs	r2, r3, #1
    99e2:	826a      	strh	r2, [r5, #18]
    99e4:	f388 8811 	msr	BASEPRI, r8
	buf = &pool->__bufs[pool->buf_count - uninit_count];
    99e8:	8a2c      	ldrh	r4, [r5, #16]
    99ea:	1ae4      	subs	r4, r4, r3
    99ec:	69eb      	ldr	r3, [r5, #28]
    99ee:	2218      	movs	r2, #24
    99f0:	fb02 3404 	mla	r4, r2, r4, r3
	return pool - _net_buf_pool_list;
    99f4:	4b0e      	ldr	r3, [pc, #56]	; (9a30 <net_buf_alloc_len+0xd0>)
    99f6:	1aed      	subs	r5, r5, r3
    99f8:	116d      	asrs	r5, r5, #5
	buf->pool_id = pool_id(pool);
    99fa:	71a5      	strb	r5, [r4, #6]
		goto success;
    99fc:	e7cc      	b.n	9998 <net_buf_alloc_len+0x38>
    99fe:	f388 8811 	msr	BASEPRI, r8
	buf = k_lifo_get(&pool->free, timeout);
    9a02:	4631      	mov	r1, r6
    9a04:	4628      	mov	r0, r5
    9a06:	f000 fa96 	bl	9f36 <k_queue_get>
	if (!buf) {
    9a0a:	4604      	mov	r4, r0
    9a0c:	2800      	cmp	r0, #0
    9a0e:	d1c3      	bne.n	9998 <net_buf_alloc_len+0x38>
	pool->avail_count--;
	NET_BUF_ASSERT(pool->avail_count >= 0);
#endif

	return buf;
}
    9a10:	4620      	mov	r0, r4
    9a12:	b002      	add	sp, #8
    9a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		buf->__buf = NULL;
    9a18:	6123      	str	r3, [r4, #16]
	buf->ref   = 1;
    9a1a:	2301      	movs	r3, #1
    9a1c:	7123      	strb	r3, [r4, #4]
	buf->flags = 0;
    9a1e:	2300      	movs	r3, #0
	buf->frags = NULL;
    9a20:	6023      	str	r3, [r4, #0]
	buf->flags = 0;
    9a22:	7163      	strb	r3, [r4, #5]
	buf->size  = size;
    9a24:	9a01      	ldr	r2, [sp, #4]
	buf->len  = 0;
    9a26:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
    9a28:	6923      	ldr	r3, [r4, #16]
    9a2a:	81e2      	strh	r2, [r4, #14]
    9a2c:	60a3      	str	r3, [r4, #8]
	return buf;
    9a2e:	e7ef      	b.n	9a10 <net_buf_alloc_len+0xb0>
    9a30:	20003a3c 	.word	0x20003a3c

00009a34 <net_buf_alloc_fixed>:
				       line);
}
#else
struct net_buf *net_buf_alloc_fixed(struct net_buf_pool *pool, s32_t timeout)
{
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    9a34:	6983      	ldr	r3, [r0, #24]

	return net_buf_alloc_len(pool, fixed->data_size, timeout);
    9a36:	685b      	ldr	r3, [r3, #4]
    9a38:	460a      	mov	r2, r1
    9a3a:	6819      	ldr	r1, [r3, #0]
    9a3c:	f7ff bf90 	b.w	9960 <net_buf_alloc_len>

00009a40 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, s32_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, s32_t timeout)
#endif
{
    9a40:	b570      	push	{r4, r5, r6, lr}
    9a42:	4606      	mov	r6, r0
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p timeout %d", func, line, fifo, timeout);

	buf = k_fifo_get(fifo, timeout);
    9a44:	f000 fa77 	bl	9f36 <k_queue_get>
	if (!buf) {
    9a48:	4605      	mov	r5, r0
    9a4a:	b128      	cbz	r0, 9a58 <net_buf_get+0x18>
    9a4c:	4604      	mov	r4, r0
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
    9a4e:	7963      	ldrb	r3, [r4, #5]
    9a50:	f013 0301 	ands.w	r3, r3, #1
    9a54:	d102      	bne.n	9a5c <net_buf_get+0x1c>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
    9a56:	6023      	str	r3, [r4, #0]

	return buf;
}
    9a58:	4628      	mov	r0, r5
    9a5a:	bd70      	pop	{r4, r5, r6, pc}
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
    9a5c:	2100      	movs	r1, #0
    9a5e:	4630      	mov	r0, r6
    9a60:	f000 fa69 	bl	9f36 <k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
    9a64:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
    9a66:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
    9a68:	f023 0301 	bic.w	r3, r3, #1
    9a6c:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
    9a6e:	4604      	mov	r4, r0
    9a70:	e7ed      	b.n	9a4e <net_buf_get+0xe>

00009a72 <net_buf_simple_reserve>:
{
	NET_BUF_ASSERT(buf);
	NET_BUF_ASSERT(buf->len == 0);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
    9a72:	6883      	ldr	r3, [r0, #8]
    9a74:	4419      	add	r1, r3
    9a76:	6001      	str	r1, [r0, #0]
    9a78:	4770      	bx	lr

00009a7a <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
    9a7a:	b410      	push	{r4}
	struct net_buf *tail;

	NET_BUF_ASSERT(fifo);
	NET_BUF_ASSERT(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
    9a7c:	460a      	mov	r2, r1
    9a7e:	6814      	ldr	r4, [r2, #0]
    9a80:	b914      	cbnz	r4, 9a88 <net_buf_put+0xe>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
}
    9a82:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
    9a84:	f000 ba3b 	b.w	9efe <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
    9a88:	7953      	ldrb	r3, [r2, #5]
    9a8a:	f043 0301 	orr.w	r3, r3, #1
    9a8e:	7153      	strb	r3, [r2, #5]
    9a90:	4622      	mov	r2, r4
    9a92:	e7f4      	b.n	9a7e <net_buf_put+0x4>

00009a94 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
    9a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9a96:	4d15      	ldr	r5, [pc, #84]	; (9aec <net_buf_unref+0x58>)
    9a98:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
    9a9a:	2600      	movs	r6, #0
	while (buf) {
    9a9c:	b904      	cbnz	r4, 9aa0 <net_buf_unref+0xc>
    9a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (--buf->ref > 0) {
    9aa0:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
    9aa2:	6827      	ldr	r7, [r4, #0]
		if (--buf->ref > 0) {
    9aa4:	3b01      	subs	r3, #1
    9aa6:	b2db      	uxtb	r3, r3
    9aa8:	7123      	strb	r3, [r4, #4]
    9aaa:	2b00      	cmp	r3, #0
    9aac:	d1f7      	bne.n	9a9e <net_buf_unref+0xa>
		if (buf->__buf) {
    9aae:	6921      	ldr	r1, [r4, #16]
    9ab0:	b159      	cbz	r1, 9aca <net_buf_unref+0x36>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
    9ab2:	7963      	ldrb	r3, [r4, #5]
    9ab4:	079b      	lsls	r3, r3, #30
    9ab6:	d407      	bmi.n	9ac8 <net_buf_unref+0x34>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    9ab8:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
    9aba:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    9abe:	4620      	mov	r0, r4
    9ac0:	699b      	ldr	r3, [r3, #24]
    9ac2:	681b      	ldr	r3, [r3, #0]
    9ac4:	689b      	ldr	r3, [r3, #8]
    9ac6:	4798      	blx	r3
			buf->__buf = NULL;
    9ac8:	6126      	str	r6, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
    9aca:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
    9acc:	60a6      	str	r6, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		pool->avail_count++;
		NET_BUF_ASSERT(pool->avail_count <= pool->buf_count);
#endif

		if (pool->destroy) {
    9ace:	eb05 1340 	add.w	r3, r5, r0, lsl #5
		buf->frags = NULL;
    9ad2:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
    9ad4:	695b      	ldr	r3, [r3, #20]
    9ad6:	b11b      	cbz	r3, 9ae0 <net_buf_unref+0x4c>
			pool->destroy(buf);
    9ad8:	4620      	mov	r0, r4
    9ada:	4798      	blx	r3
{
    9adc:	463c      	mov	r4, r7
    9ade:	e7dd      	b.n	9a9c <net_buf_unref+0x8>
	k_lifo_put(&pool->free, buf);
    9ae0:	4621      	mov	r1, r4
    9ae2:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    9ae6:	f000 fa06 	bl	9ef6 <k_queue_prepend>
    9aea:	e7f7      	b.n	9adc <net_buf_unref+0x48>
    9aec:	20003a3c 	.word	0x20003a3c

00009af0 <net_buf_ref>:
{
	NET_BUF_ASSERT(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
    9af0:	7903      	ldrb	r3, [r0, #4]
    9af2:	3301      	adds	r3, #1
    9af4:	7103      	strb	r3, [r0, #4]
	return buf;
}
    9af6:	4770      	bx	lr

00009af8 <net_buf_simple_add>:
	return buf->data + buf->len;
    9af8:	8883      	ldrh	r3, [r0, #4]
    9afa:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
    9afc:	4419      	add	r1, r3
    9afe:	8081      	strh	r1, [r0, #4]
	return tail;
}
    9b00:	18d0      	adds	r0, r2, r3
    9b02:	4770      	bx	lr

00009b04 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
    9b04:	b430      	push	{r4, r5}
    9b06:	8883      	ldrh	r3, [r0, #4]
    9b08:	6804      	ldr	r4, [r0, #0]
	buf->len += len;
    9b0a:	189d      	adds	r5, r3, r2
    9b0c:	8085      	strh	r5, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
    9b0e:	18e0      	adds	r0, r4, r3
}
    9b10:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
    9b12:	f7f6 bd71 	b.w	5f8 <memcpy>

00009b16 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
    9b16:	8883      	ldrh	r3, [r0, #4]
    9b18:	1a5b      	subs	r3, r3, r1
    9b1a:	8083      	strh	r3, [r0, #4]
	return buf->data += len;
    9b1c:	6803      	ldr	r3, [r0, #0]
    9b1e:	4419      	add	r1, r3
    9b20:	6001      	str	r1, [r0, #0]
}
    9b22:	4608      	mov	r0, r1
    9b24:	4770      	bx	lr

00009b26 <net_buf_simple_pull_u8>:

u8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
    9b26:	b508      	push	{r3, lr}
	u8_t val;

	val = buf->data[0];
    9b28:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
    9b2a:	2101      	movs	r1, #1
	val = buf->data[0];
    9b2c:	781a      	ldrb	r2, [r3, #0]
	net_buf_simple_pull(buf, 1);
    9b2e:	f7ff fff2 	bl	9b16 <net_buf_simple_pull>

	return val;
}
    9b32:	4610      	mov	r0, r2
    9b34:	bd08      	pop	{r3, pc}

00009b36 <net_buf_simple_headroom>:
	return sys_be32_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
    9b36:	6802      	ldr	r2, [r0, #0]
    9b38:	6880      	ldr	r0, [r0, #8]
}
    9b3a:	1a10      	subs	r0, r2, r0
    9b3c:	4770      	bx	lr
	...

00009b40 <_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void _sys_device_do_config_level(int level)
{
    9b40:	b538      	push	{r3, r4, r5, lr}
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1];
    9b42:	4b08      	ldr	r3, [pc, #32]	; (9b64 <_sys_device_do_config_level+0x24>)
    9b44:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    9b48:	3001      	adds	r0, #1
    9b4a:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    9b4e:	4620      	mov	r0, r4
    9b50:	42a8      	cmp	r0, r5
    9b52:	f104 040c 	add.w	r4, r4, #12
    9b56:	d300      	bcc.n	9b5a <_sys_device_do_config_level+0x1a>
		struct device_config *device = info->config;

		device->init(info);
		_k_object_init(info);
	}
}
    9b58:	bd38      	pop	{r3, r4, r5, pc}
		device->init(info);
    9b5a:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    9b5e:	685b      	ldr	r3, [r3, #4]
    9b60:	4798      	blx	r3
    9b62:	e7f4      	b.n	9b4e <_sys_device_do_config_level+0xe>
    9b64:	0000b578 	.word	0x0000b578

00009b68 <device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
    9b68:	4b10      	ldr	r3, [pc, #64]	; (9bac <device_get_binding+0x44>)
{
    9b6a:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
    9b6c:	4c10      	ldr	r4, [pc, #64]	; (9bb0 <device_get_binding+0x48>)
{
    9b6e:	4605      	mov	r5, r0
    9b70:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
    9b72:	429c      	cmp	r4, r3
    9b74:	d104      	bne.n	9b80 <device_get_binding+0x18>
    9b76:	4c0e      	ldr	r4, [pc, #56]	; (9bb0 <device_get_binding+0x48>)
		if (info->driver_api != NULL && info->config->name == name) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
    9b78:	42b4      	cmp	r4, r6
    9b7a:	d109      	bne.n	9b90 <device_get_binding+0x28>
		if (!strcmp(name, info->config->name)) {
			return info;
		}
	}

	return NULL;
    9b7c:	2400      	movs	r4, #0
    9b7e:	e012      	b.n	9ba6 <device_get_binding+0x3e>
		if (info->driver_api != NULL && info->config->name == name) {
    9b80:	6862      	ldr	r2, [r4, #4]
    9b82:	b11a      	cbz	r2, 9b8c <device_get_binding+0x24>
    9b84:	6822      	ldr	r2, [r4, #0]
    9b86:	6812      	ldr	r2, [r2, #0]
    9b88:	42aa      	cmp	r2, r5
    9b8a:	d00c      	beq.n	9ba6 <device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
    9b8c:	340c      	adds	r4, #12
    9b8e:	e7f0      	b.n	9b72 <device_get_binding+0xa>
		if (!info->driver_api) {
    9b90:	6863      	ldr	r3, [r4, #4]
    9b92:	b90b      	cbnz	r3, 9b98 <device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
    9b94:	340c      	adds	r4, #12
    9b96:	e7ef      	b.n	9b78 <device_get_binding+0x10>
		if (!strcmp(name, info->config->name)) {
    9b98:	6823      	ldr	r3, [r4, #0]
    9b9a:	4628      	mov	r0, r5
    9b9c:	6819      	ldr	r1, [r3, #0]
    9b9e:	f7f6 fd09 	bl	5b4 <strcmp>
    9ba2:	2800      	cmp	r0, #0
    9ba4:	d1f6      	bne.n	9b94 <device_get_binding+0x2c>
}
    9ba6:	4620      	mov	r0, r4
    9ba8:	bd70      	pop	{r4, r5, r6, pc}
    9baa:	bf00      	nop
    9bac:	200039e0 	.word	0x200039e0
    9bb0:	20003950 	.word	0x20003950

00009bb4 <_sys_power_save_idle_exit>:
	if (_sys_pm_idle_exit_notify) {
		_sys_soc_resume();
	}
#endif

	if (_must_enter_tickless_idle(ticks)) {
    9bb4:	1c43      	adds	r3, r0, #1
    9bb6:	d003      	beq.n	9bc0 <_sys_power_save_idle_exit+0xc>
    9bb8:	4b03      	ldr	r3, [pc, #12]	; (9bc8 <_sys_power_save_idle_exit+0x14>)
    9bba:	681b      	ldr	r3, [r3, #0]
    9bbc:	4298      	cmp	r0, r3
    9bbe:	db01      	blt.n	9bc4 <_sys_power_save_idle_exit+0x10>
		/* Resume normal periodic system timer interrupts */
		_timer_idle_exit();
    9bc0:	f7f8 b902 	b.w	1dc8 <_timer_idle_exit>
    9bc4:	4770      	bx	lr
    9bc6:	bf00      	nop
    9bc8:	20003940 	.word	0x20003940

00009bcc <idle>:
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    9bcc:	4d0f      	ldr	r5, [pc, #60]	; (9c0c <idle+0x40>)
#else
#define IDLE_YIELD_IF_COOP() do { } while ((0))
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
    9bce:	b580      	push	{r7, lr}
	if (_must_enter_tickless_idle(ticks)) {
    9bd0:	4f0f      	ldr	r7, [pc, #60]	; (9c10 <idle+0x44>)
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9bd2:	f105 0610 	add.w	r6, r5, #16
	__asm__ volatile(
    9bd6:	f04f 0220 	mov.w	r2, #32
    9bda:	f3ef 8311 	mrs	r3, BASEPRI
    9bde:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
    9be2:	692b      	ldr	r3, [r5, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9be4:	42b3      	cmp	r3, r6
    9be6:	d00a      	beq.n	9bfe <idle+0x32>
static inline s32_t _get_next_timeout_expiry(void)
{
	struct _timeout *t = (struct _timeout *)
			     sys_dlist_peek_head(&_timeout_q);

	return t ? t->delta_ticks_from_prev : K_FOREVER;
    9be8:	b14b      	cbz	r3, 9bfe <idle+0x32>
    9bea:	691c      	ldr	r4, [r3, #16]
    9bec:	1c63      	adds	r3, r4, #1
    9bee:	d008      	beq.n	9c02 <idle+0x36>
    9bf0:	683b      	ldr	r3, [r7, #0]
    9bf2:	42a3      	cmp	r3, r4
    9bf4:	dd05      	ble.n	9c02 <idle+0x36>
	_kernel.idle = ticks;
    9bf6:	61ac      	str	r4, [r5, #24]
	k_cpu_idle();
    9bf8:	f7f7 f916 	bl	e28 <k_cpu_idle>
    9bfc:	e7eb      	b.n	9bd6 <idle+0xa>
    9bfe:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		_timer_idle_enter(ticks);
    9c02:	4620      	mov	r0, r4
    9c04:	f7f8 f8cc 	bl	1da0 <_timer_idle_enter>
    9c08:	e7f5      	b.n	9bf6 <idle+0x2a>
    9c0a:	bf00      	nop
    9c0c:	200017e8 	.word	0x200017e8
    9c10:	20003940 	.word	0x20003940

00009c14 <_bss_zero>:
 *
 * @return N/A
 */
void _bss_zero(void)
{
	memset(&__bss_start, 0,
    9c14:	4802      	ldr	r0, [pc, #8]	; (9c20 <_bss_zero+0xc>)
    9c16:	4a03      	ldr	r2, [pc, #12]	; (9c24 <_bss_zero+0x10>)
    9c18:	2100      	movs	r1, #0
    9c1a:	1a12      	subs	r2, r2, r0
    9c1c:	f7f6 bd18 	b.w	650 <memset>
    9c20:	20000000 	.word	0x20000000
    9c24:	20001b68 	.word	0x20001b68

00009c28 <_data_copy>:
 *
 * @return N/A
 */
void _data_copy(void)
{
	memcpy(&__data_ram_start, &__data_rom_start,
    9c28:	4802      	ldr	r0, [pc, #8]	; (9c34 <_data_copy+0xc>)
    9c2a:	4a03      	ldr	r2, [pc, #12]	; (9c38 <_data_copy+0x10>)
    9c2c:	4903      	ldr	r1, [pc, #12]	; (9c3c <_data_copy+0x14>)
    9c2e:	1a12      	subs	r2, r2, r0
    9c30:	f7f6 bce2 	b.w	5f8 <memcpy>
    9c34:	200036e0 	.word	0x200036e0
    9c38:	20003a7c 	.word	0x20003a7c
    9c3c:	0000b5e0 	.word	0x0000b5e0

00009c40 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    9c40:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
    9c42:	2002      	movs	r0, #2
    9c44:	f7ff ff7c 	bl	9b40 <_sys_device_do_config_level>
	if (boot_delay > 0) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
    9c48:	4908      	ldr	r1, [pc, #32]	; (9c6c <bg_thread_main+0x2c>)
    9c4a:	4809      	ldr	r0, [pc, #36]	; (9c70 <bg_thread_main+0x30>)
    9c4c:	f7f7 fbbe 	bl	13cc <printk>

	/* Final init level before app starts */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
    9c50:	2003      	movs	r0, #3
    9c52:	f7ff ff75 	bl	9b40 <_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	_init_static_threads();
    9c56:	f000 fdfb 	bl	a850 <_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
    9c5a:	f7f6 fda9 	bl	7b0 <main>

	/* Terminate thread normally since it has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
    9c5e:	4a05      	ldr	r2, [pc, #20]	; (9c74 <bg_thread_main+0x34>)
    9c60:	7a13      	ldrb	r3, [r2, #8]
    9c62:	f023 0301 	bic.w	r3, r3, #1
    9c66:	7213      	strb	r3, [r2, #8]
    9c68:	bd08      	pop	{r3, pc}
    9c6a:	bf00      	nop
    9c6c:	0000b594 	.word	0x0000b594
    9c70:	0000b5b0 	.word	0x0000b5b0
    9c74:	20001780 	.word	0x20001780

00009c78 <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
    9c78:	b580      	push	{r7, lr}
    9c7a:	b086      	sub	sp, #24
    9c7c:	4e32      	ldr	r6, [pc, #200]	; (9d48 <_Cstart+0xd0>)
    9c7e:	af06      	add	r7, sp, #24
	_IntLibInit();
    9c80:	f7f6 fe8c 	bl	99c <_IntLibInit>
    9c84:	2324      	movs	r3, #36	; 0x24
    9c86:	199a      	adds	r2, r3, r6
	list->head = (sys_dnode_t *)list;
    9c88:	519a      	str	r2, [r3, r6]
    9c8a:	3308      	adds	r3, #8
	for (int ii = 0; ii < K_NUM_PRIORITIES; ii++) {
    9c8c:	f5b3 7f92 	cmp.w	r3, #292	; 0x124
	list->tail = (sys_dnode_t *)list;
    9c90:	6052      	str	r2, [r2, #4]
    9c92:	d1f8      	bne.n	9c86 <_Cstart+0xe>
	_ready_q.cache = _main_thread;
    9c94:	4d2d      	ldr	r5, [pc, #180]	; (9d4c <_Cstart+0xd4>)
	_setup_new_thread(_main_thread, _main_stack,
    9c96:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 9d74 <_Cstart+0xfc>
	_ready_q.cache = _main_thread;
    9c9a:	61f5      	str	r5, [r6, #28]
	_setup_new_thread(_main_thread, _main_stack,
    9c9c:	2400      	movs	r4, #0
    9c9e:	f04f 0901 	mov.w	r9, #1
    9ca2:	4643      	mov	r3, r8
    9ca4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    9ca8:	4929      	ldr	r1, [pc, #164]	; (9d50 <_Cstart+0xd8>)
    9caa:	f8cd 9010 	str.w	r9, [sp, #16]
    9cae:	4628      	mov	r0, r5
    9cb0:	9403      	str	r4, [sp, #12]
    9cb2:	9402      	str	r4, [sp, #8]
    9cb4:	9401      	str	r4, [sp, #4]
    9cb6:	9400      	str	r4, [sp, #0]
    9cb8:	f000 fd82 	bl	a7c0 <_setup_new_thread>
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    9cbc:	7a6b      	ldrb	r3, [r5, #9]
	_add_thread_to_ready_q(_main_thread);
    9cbe:	4628      	mov	r0, r5
    9cc0:	f023 0304 	bic.w	r3, r3, #4
    9cc4:	726b      	strb	r3, [r5, #9]
    9cc6:	f000 f97d 	bl	9fc4 <_add_thread_to_ready_q>
	_setup_new_thread(thr, stack,
    9cca:	230f      	movs	r3, #15
    9ccc:	9303      	str	r3, [sp, #12]
    9cce:	4921      	ldr	r1, [pc, #132]	; (9d54 <_Cstart+0xdc>)
    9cd0:	f8cd 9010 	str.w	r9, [sp, #16]
    9cd4:	9402      	str	r4, [sp, #8]
    9cd6:	9401      	str	r4, [sp, #4]
    9cd8:	9400      	str	r4, [sp, #0]
    9cda:	4b1f      	ldr	r3, [pc, #124]	; (9d58 <_Cstart+0xe0>)
    9cdc:	481f      	ldr	r0, [pc, #124]	; (9d5c <_Cstart+0xe4>)
    9cde:	f44f 72a0 	mov.w	r2, #320	; 0x140
    9ce2:	f000 fd6d 	bl	a7c0 <_setup_new_thread>
    9ce6:	4b1d      	ldr	r3, [pc, #116]	; (9d5c <_Cstart+0xe4>)
    9ce8:	4a1c      	ldr	r2, [pc, #112]	; (9d5c <_Cstart+0xe4>)
    9cea:	7a5b      	ldrb	r3, [r3, #9]
    9cec:	f023 0304 	bic.w	r3, r3, #4
    9cf0:	7253      	strb	r3, [r2, #9]
	_add_thread_to_ready_q(thr);
    9cf2:	4610      	mov	r0, r2
    9cf4:	f000 f966 	bl	9fc4 <_add_thread_to_ready_q>
	list->head = (sys_dnode_t *)list;
    9cf8:	4b19      	ldr	r3, [pc, #100]	; (9d60 <_Cstart+0xe8>)
    9cfa:	6133      	str	r3, [r6, #16]
	list->tail = (sys_dnode_t *)list;
    9cfc:	6173      	str	r3, [r6, #20]
 * @return N/A
 */
static ALWAYS_INLINE void _InterruptStackSetup(void)
{
#ifdef CONFIG_MPU_REQUIRES_POWER_OF_TWO_ALIGNMENT
	u32_t msp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
    9cfe:	4b19      	ldr	r3, [pc, #100]	; (9d64 <_Cstart+0xec>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    9d00:	f383 8808 	msr	MSP, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9d04:	4b18      	ldr	r3, [pc, #96]	; (9d68 <_Cstart+0xf0>)
    9d06:	22e0      	movs	r2, #224	; 0xe0
    9d08:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    9d0c:	77dc      	strb	r4, [r3, #31]
    9d0e:	761c      	strb	r4, [r3, #24]
    9d10:	765c      	strb	r4, [r3, #25]
    9d12:	769c      	strb	r4, [r3, #26]
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    9d14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    9d16:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
    9d1a:	625a      	str	r2, [r3, #36]	; 0x24
extern void _CpuIdleInit(void);
static ALWAYS_INLINE void kernel_arch_init(void)
{
	_InterruptStackSetup();
	_ExcSetup();
	_FaultInit();
    9d1c:	f7f6 fff4 	bl	d08 <_FaultInit>
	_CpuIdleInit();
    9d20:	f7f7 f87c 	bl	e1c <_CpuIdleInit>
	 */

	prepare_multithreading(dummy_thread);

	/* perform basic hardware initialization */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    9d24:	4620      	mov	r0, r4
    9d26:	f7ff ff0b 	bl	9b40 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    9d2a:	4648      	mov	r0, r9
    9d2c:	f7ff ff08 	bl	9b40 <_sys_device_do_config_level>
		MPU_GUARD_ALIGN_AND_SIZE;
#else
	start_of_main_stack =
		K_THREAD_STACK_BUFFER(main_stack) + main_stack_size;
#endif
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
    9d30:	4b0e      	ldr	r3, [pc, #56]	; (9d6c <_Cstart+0xf4>)

	_current = main_thread;
    9d32:	60b5      	str	r5, [r6, #8]
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
    9d34:	f023 0307 	bic.w	r3, r3, #7

	/* the ready queue cache already contains the main thread */

	__asm__ __volatile__(
    9d38:	4a0d      	ldr	r2, [pc, #52]	; (9d70 <_Cstart+0xf8>)
    9d3a:	f383 8809 	msr	PSP, r3
    9d3e:	2100      	movs	r1, #0
    9d40:	f381 8811 	msr	BASEPRI, r1
    9d44:	4640      	mov	r0, r8
    9d46:	4710      	bx	r2
    9d48:	200017e8 	.word	0x200017e8
    9d4c:	20001780 	.word	0x20001780
    9d50:	200025a0 	.word	0x200025a0
    9d54:	200029a0 	.word	0x200029a0
    9d58:	00009bcd 	.word	0x00009bcd
    9d5c:	20001718 	.word	0x20001718
    9d60:	200017f8 	.word	0x200017f8
    9d64:	200032e0 	.word	0x200032e0
    9d68:	e000ed00 	.word	0xe000ed00
    9d6c:	200029a0 	.word	0x200029a0
    9d70:	0000a759 	.word	0x0000a759
    9d74:	00009c41 	.word	0x00009c41

00009d78 <get_bit_ptr>:

/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct k_mem_pool *p, int level, int bn, u32_t **word)
{
    9d78:	b510      	push	{r4, lr}
	u32_t *bitarray = level <= p->max_inline_level ?
    9d7a:	7ac4      	ldrb	r4, [r0, #11]
    9d7c:	68c0      	ldr	r0, [r0, #12]
		&p->levels[level].bits : p->levels[level].bits_p;
    9d7e:	428c      	cmp	r4, r1
    9d80:	f04f 040c 	mov.w	r4, #12
    9d84:	bfb6      	itet	lt
    9d86:	4361      	mullt	r1, r4
    9d88:	fb04 0101 	mlage	r1, r4, r1, r0
    9d8c:	5841      	ldrlt	r1, [r0, r1]

	*word = &bitarray[bn / 32];
    9d8e:	2420      	movs	r4, #32
    9d90:	fb92 f4f4 	sdiv	r4, r2, r4
    9d94:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    9d98:	6019      	str	r1, [r3, #0]

	return bn & 0x1f;
}
    9d9a:	f002 001f 	and.w	r0, r2, #31
    9d9e:	bd10      	pop	{r4, pc}

00009da0 <set_free_bit>:

static void set_free_bit(struct k_mem_pool *p, int level, int bn)
{
    9da0:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
    9da2:	ab01      	add	r3, sp, #4
    9da4:	f7ff ffe8 	bl	9d78 <get_bit_ptr>

	*word |= (1<<bit);
    9da8:	9a01      	ldr	r2, [sp, #4]
    9daa:	2301      	movs	r3, #1
    9dac:	fa03 f000 	lsl.w	r0, r3, r0
    9db0:	6813      	ldr	r3, [r2, #0]
    9db2:	4303      	orrs	r3, r0
    9db4:	6013      	str	r3, [r2, #0]
}
    9db6:	b003      	add	sp, #12
    9db8:	f85d fb04 	ldr.w	pc, [sp], #4

00009dbc <init_static_pools>:
		set_free_bit(p, 0, i);
	}
}

int init_static_pools(struct device *unused)
{
    9dbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9dc0:	4c30      	ldr	r4, [pc, #192]	; (9e84 <init_static_pools+0xc8>)
	ARG_UNUSED(unused);
	struct k_mem_pool *p;

	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
    9dc2:	4e31      	ldr	r6, [pc, #196]	; (9e88 <init_static_pools+0xcc>)
		sys_dlist_init(&p->levels[i].free_list);
    9dc4:	270c      	movs	r7, #12
    9dc6:	f1a4 0510 	sub.w	r5, r4, #16
	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
    9dca:	42b5      	cmp	r5, r6
    9dcc:	d302      	bcc.n	9dd4 <init_static_pools+0x18>
		init_mem_pool(p);
	}

	return 0;
}
    9dce:	2000      	movs	r0, #0
    9dd0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    9dd4:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    9dd8:	f834 ec08 	ldrh.w	lr, [r4, #-8]
	u32_t *bits = p->buf + buflen;
    9ddc:	f854 0c10 	ldr.w	r0, [r4, #-16]
	list->head = (sys_dnode_t *)list;
    9de0:	6024      	str	r4, [r4, #0]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    9de2:	fb03 fe0e 	mul.w	lr, r3, lr
	u32_t *bits = p->buf + buflen;
    9de6:	4470      	add	r0, lr
	list->tail = (sys_dnode_t *)list;
    9de8:	6064      	str	r4, [r4, #4]
	for (i = 0; i < p->n_levels; i++) {
    9dea:	2100      	movs	r1, #0
			bits += (nblocks + 31)/32;
    9dec:	f04f 0c20 	mov.w	ip, #32
	for (i = 0; i < p->n_levels; i++) {
    9df0:	f814 2c06 	ldrb.w	r2, [r4, #-6]
    9df4:	4291      	cmp	r1, r2
    9df6:	db07      	blt.n	9e08 <init_static_pools+0x4c>
    9df8:	f04f 0800 	mov.w	r8, #0
	for (i = 0; i < p->n_max; i++) {
    9dfc:	f834 3c08 	ldrh.w	r3, [r4, #-8]
    9e00:	4598      	cmp	r8, r3
    9e02:	db24      	blt.n	9e4e <init_static_pools+0x92>
    9e04:	3418      	adds	r4, #24
    9e06:	e7de      	b.n	9dc6 <init_static_pools+0xa>
		sys_dlist_init(&p->levels[i].free_list);
    9e08:	f854 ac04 	ldr.w	sl, [r4, #-4]
		int nblocks = buflen / sz;
    9e0c:	fbbe f2f3 	udiv	r2, lr, r3
		sys_dlist_init(&p->levels[i].free_list);
    9e10:	fb07 f901 	mul.w	r9, r7, r1
		if (nblocks < 32) {
    9e14:	2a1f      	cmp	r2, #31
		sys_dlist_init(&p->levels[i].free_list);
    9e16:	eb0a 0809 	add.w	r8, sl, r9
		sz = _ALIGN4(sz / 4);
    9e1a:	ea4f 0393 	mov.w	r3, r3, lsr #2
		sys_dlist_init(&p->levels[i].free_list);
    9e1e:	f108 0b04 	add.w	fp, r8, #4
			bits += (nblocks + 31)/32;
    9e22:	bfc8      	it	gt
    9e24:	321f      	addgt	r2, #31
		sz = _ALIGN4(sz / 4);
    9e26:	f103 0303 	add.w	r3, r3, #3
	list->head = (sys_dnode_t *)list;
    9e2a:	f8c8 b004 	str.w	fp, [r8, #4]
	list->tail = (sys_dnode_t *)list;
    9e2e:	f8c8 b008 	str.w	fp, [r8, #8]
			bits += (nblocks + 31)/32;
    9e32:	bfca      	itet	gt
    9e34:	fb92 f2fc 	sdivgt	r2, r2, ip
			p->max_inline_level = i;
    9e38:	f804 1c05 	strble.w	r1, [r4, #-5]
			p->levels[i].bits_p = bits;
    9e3c:	f84a 0009 	strgt.w	r0, [sl, r9]
		sz = _ALIGN4(sz / 4);
    9e40:	f023 0303 	bic.w	r3, r3, #3
			bits += (nblocks + 31)/32;
    9e44:	bfc8      	it	gt
    9e46:	eb00 0082 	addgt.w	r0, r0, r2, lsl #2
	for (i = 0; i < p->n_levels; i++) {
    9e4a:	3101      	adds	r1, #1
    9e4c:	e7d0      	b.n	9df0 <init_static_pools+0x34>
	return p->buf + lsz * block;
    9e4e:	f854 2c0c 	ldr.w	r2, [r4, #-12]
		sys_dlist_append(&p->levels[0].free_list, block);
    9e52:	f854 3c04 	ldr.w	r3, [r4, #-4]
	return p->buf + lsz * block;
    9e56:	f854 0c10 	ldr.w	r0, [r4, #-16]
    9e5a:	fb02 f208 	mul.w	r2, r2, r8
		sys_dlist_append(&p->levels[0].free_list, block);
    9e5e:	f103 0e04 	add.w	lr, r3, #4
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
    9e62:	f840 e002 	str.w	lr, [r0, r2]
	return p->buf + lsz * block;
    9e66:	1881      	adds	r1, r0, r2
	node->prev = list->tail;
    9e68:	689a      	ldr	r2, [r3, #8]
    9e6a:	604a      	str	r2, [r1, #4]

	list->tail->next = node;
    9e6c:	689a      	ldr	r2, [r3, #8]
		set_free_bit(p, 0, i);
    9e6e:	4628      	mov	r0, r5
    9e70:	6011      	str	r1, [r2, #0]
	list->tail = node;
    9e72:	6099      	str	r1, [r3, #8]
    9e74:	4642      	mov	r2, r8
    9e76:	2100      	movs	r1, #0
    9e78:	f7ff ff92 	bl	9da0 <set_free_bit>
	for (i = 0; i < p->n_max; i++) {
    9e7c:	f108 0801 	add.w	r8, r8, #1
    9e80:	e7bc      	b.n	9dfc <init_static_pools+0x40>
    9e82:	bf00      	nop
    9e84:	20003a24 	.word	0x20003a24
    9e88:	20003a14 	.word	0x20003a14

00009e8c <k_queue_init>:
	list->head = NULL;
    9e8c:	2300      	movs	r3, #0
    9e8e:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
    9e90:	6043      	str	r3, [r0, #4]
void k_queue_init(struct k_queue *queue)
{
	sys_slist_init(&queue->data_q);
	sys_dlist_init(&queue->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&queue->poll_events);
    9e92:	f100 0308 	add.w	r3, r0, #8
	list->head = (sys_dnode_t *)list;
    9e96:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
    9e98:	60c3      	str	r3, [r0, #12]
    9e9a:	4770      	bx	lr

00009e9c <k_queue_insert>:

	irq_unlock(key);
}

void k_queue_insert(struct k_queue *queue, void *prev, void *data)
{
    9e9c:	b510      	push	{r4, lr}
    9e9e:	f04f 0320 	mov.w	r3, #32
    9ea2:	f3ef 8411 	mrs	r4, BASEPRI
    9ea6:	f383 8811 	msr	BASEPRI, r3
	if (!prev) {
    9eaa:	b931      	cbnz	r1, 9eba <k_queue_insert+0x1e>
	node->next = list->head;
    9eac:	6803      	ldr	r3, [r0, #0]
    9eae:	6013      	str	r3, [r2, #0]
	if (!list->tail) {
    9eb0:	6843      	ldr	r3, [r0, #4]
	list->head = node;
    9eb2:	6002      	str	r2, [r0, #0]
	if (!list->tail) {
    9eb4:	b943      	cbnz	r3, 9ec8 <k_queue_insert+0x2c>
		list->tail = node;
    9eb6:	6042      	str	r2, [r0, #4]
    9eb8:	e006      	b.n	9ec8 <k_queue_insert+0x2c>
	} else if (!prev->next) {
    9eba:	680b      	ldr	r3, [r1, #0]
	node->next = NULL;
    9ebc:	6013      	str	r3, [r2, #0]
	} else if (!prev->next) {
    9ebe:	b98b      	cbnz	r3, 9ee4 <k_queue_insert+0x48>
	if (!list->tail) {
    9ec0:	6843      	ldr	r3, [r0, #4]
    9ec2:	b96b      	cbnz	r3, 9ee0 <k_queue_insert+0x44>
		list->tail = node;
    9ec4:	6042      	str	r2, [r0, #4]
		list->head = node;
    9ec6:	6002      	str	r2, [r0, #0]
	return _handle_obj_poll_events(&queue->poll_events, state);
    9ec8:	2104      	movs	r1, #4
    9eca:	3008      	adds	r0, #8
    9ecc:	f000 ff7e 	bl	adcc <_handle_obj_poll_events>
#endif /* !CONFIG_POLL */

	sys_slist_insert(&queue->data_q, prev, data);

#if defined(CONFIG_POLL)
	if (handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE)) {
    9ed0:	b150      	cbz	r0, 9ee8 <k_queue_insert+0x4c>
	_update_time_slice_before_swap();
    9ed2:	f000 fa23 	bl	a31c <_update_time_slice_before_swap>
	return __swap(key);
    9ed6:	4620      	mov	r0, r4
		return;
	}
#endif /* CONFIG_POLL */

	irq_unlock(key);
}
    9ed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9edc:	f7f6 bd6a 	b.w	9b4 <__swap>
		list->tail->next = node;
    9ee0:	601a      	str	r2, [r3, #0]
    9ee2:	e7e8      	b.n	9eb6 <k_queue_insert+0x1a>
		prev->next = node;
    9ee4:	600a      	str	r2, [r1, #0]
    9ee6:	e7ef      	b.n	9ec8 <k_queue_insert+0x2c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    9ee8:	f384 8811 	msr	BASEPRI, r4
    9eec:	bd10      	pop	{r4, pc}

00009eee <k_queue_append>:

void k_queue_append(struct k_queue *queue, void *data)
{
	return k_queue_insert(queue, queue->data_q.tail, data);
    9eee:	460a      	mov	r2, r1
    9ef0:	6841      	ldr	r1, [r0, #4]
    9ef2:	f7ff bfd3 	b.w	9e9c <k_queue_insert>

00009ef6 <k_queue_prepend>:
}

void k_queue_prepend(struct k_queue *queue, void *data)
{
	return k_queue_insert(queue, NULL, data);
    9ef6:	460a      	mov	r2, r1
    9ef8:	2100      	movs	r1, #0
    9efa:	f7ff bfcf 	b.w	9e9c <k_queue_insert>

00009efe <k_queue_append_list>:
}

void k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
    9efe:	b510      	push	{r4, lr}
	__asm__ volatile(
    9f00:	f04f 0320 	mov.w	r3, #32
    9f04:	f3ef 8411 	mrs	r4, BASEPRI
    9f08:	f383 8811 	msr	BASEPRI, r3
	if (!list->tail) {
    9f0c:	6843      	ldr	r3, [r0, #4]
    9f0e:	b96b      	cbnz	r3, 9f2c <k_queue_append_list+0x2e>
		list->head = (sys_snode_t *)head;
    9f10:	6001      	str	r1, [r0, #0]
		list->tail = (sys_snode_t *)tail;
    9f12:	6042      	str	r2, [r0, #4]
	return _handle_obj_poll_events(&queue->poll_events, state);
    9f14:	2104      	movs	r1, #4
    9f16:	3008      	adds	r0, #8
    9f18:	f000 ff58 	bl	adcc <_handle_obj_poll_events>
			return;
		}
	}
#else
	sys_slist_append_list(&queue->data_q, head, tail);
	if (handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE)) {
    9f1c:	b140      	cbz	r0, 9f30 <k_queue_append_list+0x32>
	_update_time_slice_before_swap();
    9f1e:	f000 f9fd 	bl	a31c <_update_time_slice_before_swap>
	return __swap(key);
    9f22:	4620      	mov	r0, r4
		return;
	}
#endif /* !CONFIG_POLL */

	irq_unlock(key);
}
    9f24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9f28:	f7f6 bd44 	b.w	9b4 <__swap>
		list->tail->next = (sys_snode_t *)head;
    9f2c:	6019      	str	r1, [r3, #0]
    9f2e:	e7f0      	b.n	9f12 <k_queue_append_list+0x14>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    9f30:	f384 8811 	msr	BASEPRI, r4
    9f34:	bd10      	pop	{r4, pc}

00009f36 <k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *k_queue_get(struct k_queue *queue, s32_t timeout)
{
    9f36:	b530      	push	{r4, r5, lr}
    9f38:	4604      	mov	r4, r0
    9f3a:	b087      	sub	sp, #28
    9f3c:	460d      	mov	r5, r1
	__asm__ volatile(
    9f3e:	f04f 0220 	mov.w	r2, #32
    9f42:	f3ef 8311 	mrs	r3, BASEPRI
    9f46:	f382 8811 	msr	BASEPRI, r2
    9f4a:	6802      	ldr	r2, [r0, #0]
	unsigned int key;
	void *data;

	key = irq_lock();

	if (likely(!sys_slist_is_empty(&queue->data_q))) {
    9f4c:	b152      	cbz	r2, 9f64 <k_queue_get+0x2e>
	list->head = node->next;
    9f4e:	6811      	ldr	r1, [r2, #0]
    9f50:	6001      	str	r1, [r0, #0]
	if (list->tail == node) {
    9f52:	6840      	ldr	r0, [r0, #4]
    9f54:	4282      	cmp	r2, r0
		list->tail = list->head;
    9f56:	bf08      	it	eq
    9f58:	6061      	streq	r1, [r4, #4]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    9f5a:	f383 8811 	msr	BASEPRI, r3
#else
	_pend_current_thread(&queue->wait_q, timeout);

	return _Swap(key) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
    9f5e:	4610      	mov	r0, r2
    9f60:	b007      	add	sp, #28
    9f62:	bd30      	pop	{r4, r5, pc}
	if (timeout == K_NO_WAIT) {
    9f64:	b919      	cbnz	r1, 9f6e <k_queue_get+0x38>
    9f66:	f383 8811 	msr	BASEPRI, r3
			return NULL;
    9f6a:	2200      	movs	r2, #0
    9f6c:	e7f7      	b.n	9f5e <k_queue_get+0x28>
    9f6e:	f383 8811 	msr	BASEPRI, r3
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
    9f72:	2104      	movs	r1, #4
    9f74:	4603      	mov	r3, r0
    9f76:	eb0d 0001 	add.w	r0, sp, r1
    9f7a:	f000 fe6f 	bl	ac5c <k_poll_event_init>
		event.state = K_POLL_STATE_NOT_READY;
    9f7e:	f89d 3011 	ldrb.w	r3, [sp, #17]
		err = k_poll(&event, 1, timeout);
    9f82:	462a      	mov	r2, r5
		event.state = K_POLL_STATE_NOT_READY;
    9f84:	f36f 1307 	bfc	r3, #4, #4
		err = k_poll(&event, 1, timeout);
    9f88:	2101      	movs	r1, #1
    9f8a:	a801      	add	r0, sp, #4
		event.state = K_POLL_STATE_NOT_READY;
    9f8c:	f88d 3011 	strb.w	r3, [sp, #17]
		err = k_poll(&event, 1, timeout);
    9f90:	f000 fe78 	bl	ac84 <k_poll>
		if (err) {
    9f94:	2800      	cmp	r0, #0
    9f96:	d1e8      	bne.n	9f6a <k_queue_get+0x34>
	__asm__ volatile(
    9f98:	f04f 0320 	mov.w	r3, #32
    9f9c:	f3ef 8111 	mrs	r1, BASEPRI
    9fa0:	f383 8811 	msr	BASEPRI, r3
    9fa4:	6822      	ldr	r2, [r4, #0]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    9fa6:	b12a      	cbz	r2, 9fb4 <k_queue_get+0x7e>
	if (list->tail == node) {
    9fa8:	6860      	ldr	r0, [r4, #4]
	list->head = node->next;
    9faa:	6813      	ldr	r3, [r2, #0]
    9fac:	6023      	str	r3, [r4, #0]
	if (list->tail == node) {
    9fae:	4282      	cmp	r2, r0
		list->tail = list->head;
    9fb0:	bf08      	it	eq
    9fb2:	6063      	streq	r3, [r4, #4]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    9fb4:	f381 8811 	msr	BASEPRI, r1
	} while (!val && timeout == K_FOREVER);
    9fb8:	2a00      	cmp	r2, #0
    9fba:	d1d0      	bne.n	9f5e <k_queue_get+0x28>
    9fbc:	1c6b      	adds	r3, r5, #1
    9fbe:	d0de      	beq.n	9f7e <k_queue_get+0x48>
    9fc0:	e7d3      	b.n	9f6a <k_queue_get+0x34>
	...

00009fc4 <_add_thread_to_ready_q>:
 *
 * Interrupts must be locked when calling this function.
 */

void _add_thread_to_ready_q(struct k_thread *thread)
{
    9fc4:	b530      	push	{r4, r5, lr}
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
    9fc6:	f990 300a 	ldrsb.w	r3, [r0, #10]
	*bmap |= _get_ready_q_prio_bit(prio);
    9fca:	4911      	ldr	r1, [pc, #68]	; (a010 <_add_thread_to_ready_q+0x4c>)
	return prio + _NUM_COOP_PRIO;
    9fcc:	f103 0410 	add.w	r4, r3, #16
	return (prio + _NUM_COOP_PRIO) >> 5;
    9fd0:	1162      	asrs	r2, r4, #5
    9fd2:	3206      	adds	r2, #6
    9fd4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
    9fd8:	f004 051f 	and.w	r5, r4, #31
    9fdc:	2401      	movs	r4, #1
    9fde:	40ac      	lsls	r4, r5
    9fe0:	6895      	ldr	r5, [r2, #8]
	sys_dlist_t *q = &_ready_q.q[q_index];
    9fe2:	3314      	adds	r3, #20
	*bmap |= _get_ready_q_prio_bit(prio);
    9fe4:	432c      	orrs	r4, r5
	sys_dlist_t *q = &_ready_q.q[q_index];
    9fe6:	00db      	lsls	r3, r3, #3
	*bmap |= _get_ready_q_prio_bit(prio);
    9fe8:	6094      	str	r4, [r2, #8]
	sys_dlist_t *q = &_ready_q.q[q_index];
    9fea:	1d1a      	adds	r2, r3, #4
    9fec:	440a      	add	r2, r1
	node->prev = list->tail;
    9fee:	440b      	add	r3, r1
	node->next = list;
    9ff0:	6002      	str	r2, [r0, #0]
	node->prev = list->tail;
    9ff2:	689a      	ldr	r2, [r3, #8]
    9ff4:	6042      	str	r2, [r0, #4]
	list->tail->next = node;
    9ff6:	689a      	ldr	r2, [r3, #8]
    9ff8:	6010      	str	r0, [r2, #0]
	list->tail = node;
    9ffa:	6098      	str	r0, [r3, #8]
	sys_dlist_append(q, &thread->base.k_q_node);

# ifndef CONFIG_SMP
	struct k_thread **cache = &_ready_q.cache;

	*cache = _is_t1_higher_prio_than_t2(thread, *cache) ? thread : *cache;
    9ffc:	69cb      	ldr	r3, [r1, #28]
    9ffe:	f990 400a 	ldrsb.w	r4, [r0, #10]
    a002:	f993 200a 	ldrsb.w	r2, [r3, #10]
    a006:	4294      	cmp	r4, r2
    a008:	bfa8      	it	ge
    a00a:	4618      	movge	r0, r3
    a00c:	61c8      	str	r0, [r1, #28]
    a00e:	bd30      	pop	{r4, r5, pc}
    a010:	200017e8 	.word	0x200017e8

0000a014 <_ready_thread>:
	thread->base.thread_state &= ~_THREAD_PRESTART;
    a014:	7a42      	ldrb	r2, [r0, #9]
    a016:	f022 0104 	bic.w	r1, r2, #4
	return !(_is_thread_prevented_from_running(thread) ||
    a01a:	f012 0f1b 	tst.w	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    a01e:	7241      	strb	r1, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
    a020:	d104      	bne.n	a02c <_ready_thread+0x18>
    a022:	6a03      	ldr	r3, [r0, #32]
    a024:	3301      	adds	r3, #1
    a026:	d101      	bne.n	a02c <_ready_thread+0x18>

	/* needed to handle the start-with-delay case */
	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
		_add_thread_to_ready_q(thread);
    a028:	f7ff bfcc 	b.w	9fc4 <_add_thread_to_ready_q>
    a02c:	4770      	bx	lr
	...

0000a030 <_add_timeout>:
{
    a030:	b570      	push	{r4, r5, r6, lr}
	timeout->delta_ticks_from_prev = timeout_in_ticks;
    a032:	610b      	str	r3, [r1, #16]
	timeout->thread = thread;
    a034:	6088      	str	r0, [r1, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
    a036:	60ca      	str	r2, [r1, #12]
	if (!timeout_in_ticks) {
    a038:	bb13      	cbnz	r3, a080 <_add_timeout+0x50>
	__asm__ volatile(
    a03a:	f04f 0220 	mov.w	r2, #32
    a03e:	f3ef 8411 	mrs	r4, BASEPRI
    a042:	f382 8811 	msr	BASEPRI, r2
	timeout->delta_ticks_from_prev = _INACTIVE;
    a046:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a04a:	610a      	str	r2, [r1, #16]
	if (thread) {
    a04c:	b180      	cbz	r0, a070 <_add_timeout+0x40>
	if (timeout_obj->wait_q) {
    a04e:	68ca      	ldr	r2, [r1, #12]
    a050:	b14a      	cbz	r2, a066 <_add_timeout+0x36>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    a052:	e890 0006 	ldmia.w	r0, {r1, r2}
    a056:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
    a058:	6801      	ldr	r1, [r0, #0]
    a05a:	604a      	str	r2, [r1, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
    a05c:	7a42      	ldrb	r2, [r0, #9]
		thread->base.timeout.wait_q = NULL;
    a05e:	61c3      	str	r3, [r0, #28]
    a060:	f022 0202 	bic.w	r2, r2, #2
    a064:	7242      	strb	r2, [r0, #9]
		_ready_thread(thread);
    a066:	f7ff ffd5 	bl	a014 <_ready_thread>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    a06a:	f384 8811 	msr	BASEPRI, r4
    a06e:	bd70      	pop	{r4, r5, r6, pc}
    a070:	f384 8811 	msr	BASEPRI, r4
		if (timeout->func) {
    a074:	694b      	ldr	r3, [r1, #20]
    a076:	b32b      	cbz	r3, a0c4 <_add_timeout+0x94>
			timeout->func(timeout);
    a078:	4608      	mov	r0, r1
}
    a07a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			timeout->func(timeout);
    a07e:	4718      	bx	r3
	return list->head == list;
    a080:	4a11      	ldr	r2, [pc, #68]	; (a0c8 <_add_timeout+0x98>)
    a082:	4610      	mov	r0, r2
    a084:	f850 3f10 	ldr.w	r3, [r0, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a088:	4283      	cmp	r3, r0
    a08a:	d10c      	bne.n	a0a6 <_add_timeout+0x76>
	node->next = list;
    a08c:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
    a08e:	6953      	ldr	r3, [r2, #20]
    a090:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
    a092:	6953      	ldr	r3, [r2, #20]
    a094:	6019      	str	r1, [r3, #0]
	list->tail = node;
    a096:	6151      	str	r1, [r2, #20]
    a098:	bd70      	pop	{r4, r5, r6, pc}
		*delta -= in_q->delta_ticks_from_prev;
    a09a:	1b64      	subs	r4, r4, r5
    a09c:	610c      	str	r4, [r1, #16]
	return (node == list->tail) ? NULL : node->next;
    a09e:	6954      	ldr	r4, [r2, #20]
    a0a0:	42a3      	cmp	r3, r4
    a0a2:	d0f3      	beq.n	a08c <_add_timeout+0x5c>
    a0a4:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
    a0a6:	2b00      	cmp	r3, #0
    a0a8:	d0f0      	beq.n	a08c <_add_timeout+0x5c>
		if (*delta <= in_q->delta_ticks_from_prev) {
    a0aa:	690c      	ldr	r4, [r1, #16]
    a0ac:	691d      	ldr	r5, [r3, #16]
    a0ae:	42ac      	cmp	r4, r5
    a0b0:	dcf3      	bgt.n	a09a <_add_timeout+0x6a>
		node->prev = insert_point->prev;
    a0b2:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
    a0b4:	1b2c      	subs	r4, r5, r4
    a0b6:	611c      	str	r4, [r3, #16]
    a0b8:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
    a0ba:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
    a0bc:	685a      	ldr	r2, [r3, #4]
    a0be:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
    a0c0:	6059      	str	r1, [r3, #4]
    a0c2:	bd70      	pop	{r4, r5, r6, pc}
    a0c4:	bd70      	pop	{r4, r5, r6, pc}
    a0c6:	bf00      	nop
    a0c8:	200017e8 	.word	0x200017e8

0000a0cc <_remove_thread_from_ready_q>:
	node->prev->next = node->next;
    a0cc:	e890 000a 	ldmia.w	r0, {r1, r3}
 *
 * Interrupts must be locked when calling this function.
 */

void _remove_thread_from_ready_q(struct k_thread *thread)
{
    a0d0:	b510      	push	{r4, lr}
#if defined(CONFIG_MULTITHREADING) && !defined(CONFIG_SMP)
	int q_index = _get_ready_q_q_index(thread->base.prio);
    a0d2:	f990 200a 	ldrsb.w	r2, [r0, #10]
    a0d6:	6019      	str	r1, [r3, #0]
	node->next->prev = node->prev;
    a0d8:	6801      	ldr	r1, [r0, #0]
	sys_dlist_t *q = &_ready_q.q[q_index];
    a0da:	3214      	adds	r2, #20
    a0dc:	604b      	str	r3, [r1, #4]
    a0de:	4b14      	ldr	r3, [pc, #80]	; (a130 <_remove_thread_from_ready_q+0x64>)
    a0e0:	00d2      	lsls	r2, r2, #3
    a0e2:	1d11      	adds	r1, r2, #4
	return list->head == list;
    a0e4:	441a      	add	r2, r3
    a0e6:	4419      	add	r1, r3

	sys_dlist_remove(&thread->base.k_q_node);
	if (sys_dlist_is_empty(q)) {
    a0e8:	6852      	ldr	r2, [r2, #4]
    a0ea:	428a      	cmp	r2, r1
    a0ec:	d10f      	bne.n	a10e <_remove_thread_from_ready_q+0x42>
		clear_ready_q_prio_bit(thread->base.prio);
    a0ee:	f990 100a 	ldrsb.w	r1, [r0, #10]
	return (prio + _NUM_COOP_PRIO) >> 5;
    a0f2:	3110      	adds	r1, #16
    a0f4:	114a      	asrs	r2, r1, #5
	*bmap &= ~_get_ready_q_prio_bit(prio);
    a0f6:	3206      	adds	r2, #6
    a0f8:	eb03 0282 	add.w	r2, r3, r2, lsl #2
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
    a0fc:	2401      	movs	r4, #1
    a0fe:	f001 011f 	and.w	r1, r1, #31
    a102:	fa04 f101 	lsl.w	r1, r4, r1
    a106:	6894      	ldr	r4, [r2, #8]
    a108:	ea24 0401 	bic.w	r4, r4, r1
    a10c:	6094      	str	r4, [r2, #8]
	}

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? get_ready_q_head() : *cache;
    a10e:	69da      	ldr	r2, [r3, #28]
    a110:	4290      	cmp	r0, r2
    a112:	d10b      	bne.n	a12c <_remove_thread_from_ready_q+0x60>
	return __builtin_ffs(op);
    a114:	6a19      	ldr	r1, [r3, #32]
    a116:	fa91 f2a1 	rbit	r2, r1
    a11a:	2900      	cmp	r1, #0
    a11c:	fab2 f282 	clz	r2, r2
    a120:	bf08      	it	eq
    a122:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
    a126:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    a12a:	6a52      	ldr	r2, [r2, #36]	; 0x24
    a12c:	61da      	str	r2, [r3, #28]
    a12e:	bd10      	pop	{r4, pc}
    a130:	200017e8 	.word	0x200017e8

0000a134 <_pend_thread>:
#endif

/* pend the specified thread: it must *not* be in the ready queue */
/* must be called with interrupts locked */
void _pend_thread(struct k_thread *thread, _wait_q_t *wait_q, s32_t timeout)
{
    a134:	b430      	push	{r4, r5}
    a136:	680c      	ldr	r4, [r1, #0]
#ifdef CONFIG_MULTITHREADING
	sys_dlist_t *wait_q_list = (sys_dlist_t *)wait_q;
	struct k_thread *pending;

	SYS_DLIST_FOR_EACH_CONTAINER(wait_q_list, pending, base.k_q_node) {
    a138:	42a1      	cmp	r1, r4
    a13a:	bf08      	it	eq
    a13c:	2400      	moveq	r4, #0
    a13e:	b314      	cbz	r4, a186 <_pend_thread+0x52>
		if (_is_t1_higher_prio_than_t2(thread, pending)) {
    a140:	f990 500a 	ldrsb.w	r5, [r0, #10]
    a144:	f994 300a 	ldrsb.w	r3, [r4, #10]
    a148:	429d      	cmp	r5, r3
    a14a:	da16      	bge.n	a17a <_pend_thread+0x46>
		node->prev = insert_point->prev;
    a14c:	6863      	ldr	r3, [r4, #4]
    a14e:	6043      	str	r3, [r0, #4]
		node->next = insert_point;
    a150:	6004      	str	r4, [r0, #0]
		insert_point->prev->next = node;
    a152:	6863      	ldr	r3, [r4, #4]
    a154:	6018      	str	r0, [r3, #0]
		insert_point->prev = node;
    a156:	6060      	str	r0, [r4, #4]
	thread->base.thread_state |= _THREAD_PENDING;
    a158:	7a43      	ldrb	r3, [r0, #9]
    a15a:	f043 0302 	orr.w	r3, r3, #2
    a15e:	7243      	strb	r3, [r0, #9]
	sys_dlist_append(wait_q_list, &thread->base.k_q_node);

inserted:
	_mark_thread_as_pending(thread);

	if (timeout != K_FOREVER) {
    a160:	1c53      	adds	r3, r2, #1
    a162:	d017      	beq.n	a194 <_pend_thread+0x60>
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
    a164:	3209      	adds	r2, #9
    a166:	230a      	movs	r3, #10
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(timeout);

		_add_thread_timeout(thread, wait_q, ticks);
	}
#endif
}
    a168:	bc30      	pop	{r4, r5}
    a16a:	fbb2 f3f3 	udiv	r3, r2, r3
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
    a16e:	460a      	mov	r2, r1
    a170:	3301      	adds	r3, #1
    a172:	f100 0110 	add.w	r1, r0, #16
    a176:	f7ff bf5b 	b.w	a030 <_add_timeout>
	return (node == list->tail) ? NULL : node->next;
    a17a:	684b      	ldr	r3, [r1, #4]
    a17c:	429c      	cmp	r4, r3
    a17e:	d002      	beq.n	a186 <_pend_thread+0x52>
    a180:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(wait_q_list, pending, base.k_q_node) {
    a182:	2c00      	cmp	r4, #0
    a184:	d1db      	bne.n	a13e <_pend_thread+0xa>
	node->next = list;
    a186:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
    a188:	684b      	ldr	r3, [r1, #4]
    a18a:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
    a18c:	684b      	ldr	r3, [r1, #4]
    a18e:	6018      	str	r0, [r3, #0]
	list->tail = node;
    a190:	6048      	str	r0, [r1, #4]
    a192:	e7e1      	b.n	a158 <_pend_thread+0x24>
}
    a194:	bc30      	pop	{r4, r5}
    a196:	4770      	bx	lr

0000a198 <_pend_current_thread>:

/* pend the current thread */
/* must be called with interrupts locked */
void _pend_current_thread(_wait_q_t *wait_q, s32_t timeout)
{
    a198:	b570      	push	{r4, r5, r6, lr}
	_remove_thread_from_ready_q(_current);
    a19a:	4c06      	ldr	r4, [pc, #24]	; (a1b4 <_pend_current_thread+0x1c>)
{
    a19c:	460e      	mov	r6, r1
    a19e:	4605      	mov	r5, r0
	_remove_thread_from_ready_q(_current);
    a1a0:	68a0      	ldr	r0, [r4, #8]
    a1a2:	f7ff ff93 	bl	a0cc <_remove_thread_from_ready_q>
	_pend_thread(_current, wait_q, timeout);
    a1a6:	4632      	mov	r2, r6
    a1a8:	4629      	mov	r1, r5
    a1aa:	68a0      	ldr	r0, [r4, #8]
}
    a1ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	_pend_thread(_current, wait_q, timeout);
    a1b0:	f7ff bfc0 	b.w	a134 <_pend_thread>
    a1b4:	200017e8 	.word	0x200017e8

0000a1b8 <__must_switch_threads>:
	ready_range = _ready_q.prio_bmap[0];
    a1b8:	4a09      	ldr	r2, [pc, #36]	; (a1e0 <__must_switch_threads+0x28>)
    a1ba:	6a11      	ldr	r1, [r2, #32]

#ifdef CONFIG_KERNEL_DEBUG
	dump_ready_q();
#endif  /* CONFIG_KERNEL_DEBUG */

	return _is_prio_higher(_get_highest_ready_prio(), _current->base.prio);
    a1bc:	6892      	ldr	r2, [r2, #8]
    a1be:	2900      	cmp	r1, #0
    a1c0:	fa91 f3a1 	rbit	r3, r1
    a1c4:	f992 000a 	ldrsb.w	r0, [r2, #10]
    a1c8:	fab3 f383 	clz	r3, r3
    a1cc:	bf08      	it	eq
    a1ce:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
	return abs_prio - _NUM_COOP_PRIO;
    a1d2:	3b10      	subs	r3, #16
#else
	return 0;
#endif
}
    a1d4:	4298      	cmp	r0, r3
    a1d6:	bfd4      	ite	le
    a1d8:	2000      	movle	r0, #0
    a1da:	2001      	movgt	r0, #1
    a1dc:	4770      	bx	lr
    a1de:	bf00      	nop
    a1e0:	200017e8 	.word	0x200017e8

0000a1e4 <_reschedule_threads>:
{
    a1e4:	b510      	push	{r4, lr}
	return _is_preempt(_current) && __must_switch_threads();
    a1e6:	4b0a      	ldr	r3, [pc, #40]	; (a210 <_reschedule_threads+0x2c>)
    a1e8:	689b      	ldr	r3, [r3, #8]
    a1ea:	895b      	ldrh	r3, [r3, #10]
    a1ec:	2b7f      	cmp	r3, #127	; 0x7f
    a1ee:	4604      	mov	r4, r0
    a1f0:	d802      	bhi.n	a1f8 <_reschedule_threads+0x14>
    a1f2:	f7ff ffe1 	bl	a1b8 <__must_switch_threads>
    a1f6:	b910      	cbnz	r0, a1fe <_reschedule_threads+0x1a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    a1f8:	f384 8811 	msr	BASEPRI, r4
    a1fc:	bd10      	pop	{r4, pc}
		_set_time(remaining);
	}

#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
    a1fe:	4b05      	ldr	r3, [pc, #20]	; (a214 <_reschedule_threads+0x30>)
    a200:	2200      	movs	r2, #0
    a202:	4620      	mov	r0, r4
}
    a204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_time_slice_elapsed = 0;
    a208:	601a      	str	r2, [r3, #0]
    a20a:	f7f6 bbd3 	b.w	9b4 <__swap>
    a20e:	bf00      	nop
    a210:	200017e8 	.word	0x200017e8
    a214:	20001ae4 	.word	0x20001ae4

0000a218 <k_sched_unlock>:
	__asm__ volatile(
    a218:	f04f 0320 	mov.w	r3, #32
    a21c:	f3ef 8011 	mrs	r0, BASEPRI
    a220:	f383 8811 	msr	BASEPRI, r3
	++_current->base.sched_locked;
    a224:	4b03      	ldr	r3, [pc, #12]	; (a234 <k_sched_unlock+0x1c>)
    a226:	689a      	ldr	r2, [r3, #8]
    a228:	7ad3      	ldrb	r3, [r2, #11]
    a22a:	3301      	adds	r3, #1
    a22c:	72d3      	strb	r3, [r2, #11]
	_reschedule_threads(key);
    a22e:	f7ff bfd9 	b.w	a1e4 <_reschedule_threads>
    a232:	bf00      	nop
    a234:	200017e8 	.word	0x200017e8

0000a238 <_move_thread_to_end_of_prio_q>:
	int q_index = _get_ready_q_q_index(thread->base.prio);
    a238:	f990 300a 	ldrsb.w	r3, [r0, #10]
	sys_dlist_t *q = &_ready_q.q[q_index];
    a23c:	4a12      	ldr	r2, [pc, #72]	; (a288 <_move_thread_to_end_of_prio_q+0x50>)
{
    a23e:	b530      	push	{r4, r5, lr}
	sys_dlist_t *q = &_ready_q.q[q_index];
    a240:	3314      	adds	r3, #20
    a242:	00db      	lsls	r3, r3, #3
    a244:	1d19      	adds	r1, r3, #4
    a246:	4411      	add	r1, r2
	if (sys_dlist_is_tail(q, &thread->base.k_q_node)) {
    a248:	684c      	ldr	r4, [r1, #4]
    a24a:	42a0      	cmp	r0, r4
    a24c:	d01b      	beq.n	a286 <_move_thread_to_end_of_prio_q+0x4e>
	node->prev->next = node->next;
    a24e:	6844      	ldr	r4, [r0, #4]
    a250:	6805      	ldr	r5, [r0, #0]
    a252:	6025      	str	r5, [r4, #0]
	node->next->prev = node->prev;
    a254:	6805      	ldr	r5, [r0, #0]
	node->prev = list->tail;
    a256:	4413      	add	r3, r2
	node->next->prev = node->prev;
    a258:	606c      	str	r4, [r5, #4]
	node->next = list;
    a25a:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
    a25c:	6899      	ldr	r1, [r3, #8]
    a25e:	6041      	str	r1, [r0, #4]
	list->tail->next = node;
    a260:	6899      	ldr	r1, [r3, #8]
    a262:	6008      	str	r0, [r1, #0]
	list->tail = node;
    a264:	6098      	str	r0, [r3, #8]
	*cache = *cache == thread ? get_ready_q_head() : *cache;
    a266:	69d3      	ldr	r3, [r2, #28]
    a268:	4298      	cmp	r0, r3
    a26a:	d10b      	bne.n	a284 <_move_thread_to_end_of_prio_q+0x4c>
	return __builtin_ffs(op);
    a26c:	6a11      	ldr	r1, [r2, #32]
    a26e:	fa91 f3a1 	rbit	r3, r1
    a272:	2900      	cmp	r1, #0
    a274:	fab3 f383 	clz	r3, r3
    a278:	bf08      	it	eq
    a27a:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    a27e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    a282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    a284:	61d3      	str	r3, [r2, #28]
    a286:	bd30      	pop	{r4, r5, pc}
    a288:	200017e8 	.word	0x200017e8

0000a28c <_impl_k_yield>:
{
    a28c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    a28e:	f04f 0320 	mov.w	r3, #32
    a292:	f3ef 8511 	mrs	r5, BASEPRI
    a296:	f383 8811 	msr	BASEPRI, r3
	_move_thread_to_end_of_prio_q(_current);
    a29a:	4c09      	ldr	r4, [pc, #36]	; (a2c0 <_impl_k_yield+0x34>)
    a29c:	68a0      	ldr	r0, [r4, #8]
    a29e:	f7ff ffcb 	bl	a238 <_move_thread_to_end_of_prio_q>
	if (_current == _get_next_ready_thread()) {
    a2a2:	68a2      	ldr	r2, [r4, #8]
    a2a4:	69e3      	ldr	r3, [r4, #28]
    a2a6:	429a      	cmp	r2, r3
    a2a8:	d102      	bne.n	a2b0 <_impl_k_yield+0x24>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    a2aa:	f385 8811 	msr	BASEPRI, r5
    a2ae:	bd38      	pop	{r3, r4, r5, pc}
	_time_slice_elapsed = 0;
    a2b0:	4b04      	ldr	r3, [pc, #16]	; (a2c4 <_impl_k_yield+0x38>)
    a2b2:	2200      	movs	r2, #0
    a2b4:	601a      	str	r2, [r3, #0]
    a2b6:	4628      	mov	r0, r5
}
    a2b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    a2bc:	f7f6 bb7a 	b.w	9b4 <__swap>
    a2c0:	200017e8 	.word	0x200017e8
    a2c4:	20001ae4 	.word	0x20001ae4

0000a2c8 <_impl_k_current_get>:
}
    a2c8:	4b01      	ldr	r3, [pc, #4]	; (a2d0 <_impl_k_current_get+0x8>)
    a2ca:	6898      	ldr	r0, [r3, #8]
    a2cc:	4770      	bx	lr
    a2ce:	bf00      	nop
    a2d0:	200017e8 	.word	0x200017e8

0000a2d4 <_is_thread_time_slicing>:
	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
    a2d4:	4b0d      	ldr	r3, [pc, #52]	; (a30c <_is_thread_time_slicing+0x38>)
    a2d6:	681b      	ldr	r3, [r3, #0]
    a2d8:	2b00      	cmp	r3, #0
    a2da:	dd14      	ble.n	a306 <_is_thread_time_slicing+0x32>
	return thread == _idle_thread;
    a2dc:	4b0c      	ldr	r3, [pc, #48]	; (a310 <_is_thread_time_slicing+0x3c>)
    a2de:	681b      	ldr	r3, [r3, #0]
    a2e0:	4298      	cmp	r0, r3
    a2e2:	d010      	beq.n	a306 <_is_thread_time_slicing+0x32>
	    || _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
    a2e4:	4a0b      	ldr	r2, [pc, #44]	; (a314 <_is_thread_time_slicing+0x40>)
    a2e6:	f990 300a 	ldrsb.w	r3, [r0, #10]
    a2ea:	6812      	ldr	r2, [r2, #0]
    a2ec:	4293      	cmp	r3, r2
    a2ee:	db0a      	blt.n	a306 <_is_thread_time_slicing+0x32>
	return list->head != list->tail;
    a2f0:	f103 0214 	add.w	r2, r3, #20
    a2f4:	4b08      	ldr	r3, [pc, #32]	; (a318 <_is_thread_time_slicing+0x44>)
    a2f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    a2fa:	6858      	ldr	r0, [r3, #4]
    a2fc:	689b      	ldr	r3, [r3, #8]
    a2fe:	1ac0      	subs	r0, r0, r3
    a300:	bf18      	it	ne
    a302:	2001      	movne	r0, #1
	return sys_dlist_has_multiple_nodes(q);
    a304:	4770      	bx	lr
		return 0;
    a306:	2000      	movs	r0, #0
}
    a308:	4770      	bx	lr
    a30a:	bf00      	nop
    a30c:	2000190c 	.word	0x2000190c
    a310:	0000b590 	.word	0x0000b590
    a314:	20001910 	.word	0x20001910
    a318:	200017e8 	.word	0x200017e8

0000a31c <_update_time_slice_before_swap>:
	_time_slice_elapsed = 0;
    a31c:	4b01      	ldr	r3, [pc, #4]	; (a324 <_update_time_slice_before_swap+0x8>)
    a31e:	2200      	movs	r2, #0
    a320:	601a      	str	r2, [r3, #0]
    a322:	4770      	bx	lr
    a324:	20001ae4 	.word	0x20001ae4

0000a328 <_unpend_first_thread>:
_find_first_thread_to_unpend(_wait_q_t *wait_q, struct k_thread *from)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	extern volatile int _handling_timeouts;

	if (_handling_timeouts) {
    a328:	4a10      	ldr	r2, [pc, #64]	; (a36c <_unpend_first_thread+0x44>)
    a32a:	6812      	ldr	r2, [r2, #0]
}

/* unpend the first thread from a wait queue */
/* must be called with interrupts locked */
static inline struct k_thread *_unpend_first_thread(_wait_q_t *wait_q)
{
    a32c:	4603      	mov	r3, r0
    a32e:	6800      	ldr	r0, [r0, #0]
	if (_handling_timeouts) {
    a330:	b16a      	cbz	r2, a34e <_unpend_first_thread+0x26>
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a332:	4283      	cmp	r3, r0
    a334:	bf08      	it	eq
    a336:	2000      	moveq	r0, #0
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
    a338:	b908      	cbnz	r0, a33e <_unpend_first_thread+0x16>
    a33a:	2000      	movs	r0, #0
    a33c:	4770      	bx	lr
			if (_is_thread_timeout_expired(thread)) {
    a33e:	6a02      	ldr	r2, [r0, #32]
    a340:	3202      	adds	r2, #2
    a342:	d107      	bne.n	a354 <_unpend_first_thread+0x2c>
	return (node == list->tail) ? NULL : node->next;
    a344:	685a      	ldr	r2, [r3, #4]
    a346:	4290      	cmp	r0, r2
    a348:	d0f7      	beq.n	a33a <_unpend_first_thread+0x12>
    a34a:	6800      	ldr	r0, [r0, #0]
    a34c:	e7f4      	b.n	a338 <_unpend_first_thread+0x10>
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a34e:	4283      	cmp	r3, r0
    a350:	d00a      	beq.n	a368 <_unpend_first_thread+0x40>
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);

	if (thread) {
    a352:	b150      	cbz	r0, a36a <_unpend_first_thread+0x42>
	node->prev->next = node->next;
    a354:	e890 000c 	ldmia.w	r0, {r2, r3}
    a358:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    a35a:	6802      	ldr	r2, [r0, #0]
    a35c:	6053      	str	r3, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
    a35e:	7a43      	ldrb	r3, [r0, #9]
    a360:	f023 0302 	bic.w	r3, r3, #2
    a364:	7243      	strb	r3, [r0, #9]
    a366:	4770      	bx	lr
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a368:	4610      	mov	r0, r2
		_unpend_thread(thread);
	}

	return thread;
}
    a36a:	4770      	bx	lr
    a36c:	20001ae0 	.word	0x20001ae0

0000a370 <_impl_k_sem_init>:

	sem->count = initial_count;
	sem->limit = limit;
	sys_dlist_init(&sem->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&sem->poll_events);
    a370:	f100 0310 	add.w	r3, r0, #16
	sem->count = initial_count;
    a374:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
    a376:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
    a378:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
    a37a:	6040      	str	r0, [r0, #4]
	list->head = (sys_dnode_t *)list;
    a37c:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
    a37e:	6143      	str	r3, [r0, #20]
    a380:	4770      	bx	lr
	...

0000a384 <_impl_k_sem_give>:

	_set_thread_return_value(thread, 0);
}

void _impl_k_sem_give(struct k_sem *sem)
{
    a384:	b570      	push	{r4, r5, r6, lr}
    a386:	4605      	mov	r5, r0
	__asm__ volatile(
    a388:	f04f 0320 	mov.w	r3, #32
    a38c:	f3ef 8611 	mrs	r6, BASEPRI
    a390:	f383 8811 	msr	BASEPRI, r3
	struct k_thread *thread = _unpend_first_thread(&sem->wait_q);
    a394:	f7ff ffc8 	bl	a328 <_unpend_first_thread>
	if (!thread) {
    a398:	4604      	mov	r4, r0
    a39a:	b998      	cbnz	r0, a3c4 <_impl_k_sem_give+0x40>
	sem->count += (sem->count != sem->limit);
    a39c:	68ab      	ldr	r3, [r5, #8]
    a39e:	68ea      	ldr	r2, [r5, #12]
    a3a0:	429a      	cmp	r2, r3
    a3a2:	bf18      	it	ne
    a3a4:	3301      	addne	r3, #1
    a3a6:	60ab      	str	r3, [r5, #8]
	return _handle_obj_poll_events(&sem->poll_events, state);
    a3a8:	2102      	movs	r1, #2
    a3aa:	f105 0010 	add.w	r0, r5, #16
    a3ae:	f000 fd0d 	bl	adcc <_handle_obj_poll_events>
	unsigned int key;

	key = irq_lock();

	if (do_sem_give(sem)) {
    a3b2:	2800      	cmp	r0, #0
    a3b4:	d03b      	beq.n	a42e <_impl_k_sem_give+0xaa>
	_update_time_slice_before_swap();
    a3b6:	f7ff ffb1 	bl	a31c <_update_time_slice_before_swap>
	return __swap(key);
    a3ba:	4630      	mov	r0, r6
		_Swap(key);
	} else {
		irq_unlock(key);
	}
}
    a3bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a3c0:	f7f6 baf8 	b.w	9b4 <__swap>
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    a3c4:	6a01      	ldr	r1, [r0, #32]
	return _abort_timeout(&thread->base.timeout);
    a3c6:	f100 0210 	add.w	r2, r0, #16
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    a3ca:	1c48      	adds	r0, r1, #1
    a3cc:	d00f      	beq.n	a3ee <_impl_k_sem_give+0x6a>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
    a3ce:	4b1b      	ldr	r3, [pc, #108]	; (a43c <_impl_k_sem_give+0xb8>)
    a3d0:	695b      	ldr	r3, [r3, #20]
    a3d2:	429a      	cmp	r2, r3
	return (node == list->tail) ? NULL : node->next;
    a3d4:	bf1f      	itttt	ne
    a3d6:	6922      	ldrne	r2, [r4, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
    a3d8:	6913      	ldrne	r3, [r2, #16]
    a3da:	185b      	addne	r3, r3, r1
    a3dc:	6113      	strne	r3, [r2, #16]
	node->prev->next = node->next;
    a3de:	6963      	ldr	r3, [r4, #20]
    a3e0:	6922      	ldr	r2, [r4, #16]
    a3e2:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    a3e4:	6922      	ldr	r2, [r4, #16]
    a3e6:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
    a3e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a3ec:	6223      	str	r3, [r4, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
    a3ee:	7a63      	ldrb	r3, [r4, #9]
    a3f0:	f023 0204 	bic.w	r2, r3, #4
	return !(_is_thread_prevented_from_running(thread) ||
    a3f4:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    a3f8:	7262      	strb	r2, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
    a3fa:	d102      	bne.n	a402 <_impl_k_sem_give+0x7e>
    a3fc:	6a23      	ldr	r3, [r4, #32]
    a3fe:	3301      	adds	r3, #1
    a400:	d018      	beq.n	a434 <_impl_k_sem_give+0xb0>
}

static ALWAYS_INLINE void
_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    a402:	2300      	movs	r3, #0
    a404:	6663      	str	r3, [r4, #100]	; 0x64
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    a406:	f3ef 8305 	mrs	r3, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
    a40a:	2b0d      	cmp	r3, #13
    a40c:	d80f      	bhi.n	a42e <_impl_k_sem_give+0xaa>
    a40e:	b11b      	cbz	r3, a418 <_impl_k_sem_give+0x94>
    a410:	4b0b      	ldr	r3, [pc, #44]	; (a440 <_impl_k_sem_give+0xbc>)
    a412:	685b      	ldr	r3, [r3, #4]
    a414:	051b      	lsls	r3, r3, #20
    a416:	d50a      	bpl.n	a42e <_impl_k_sem_give+0xaa>
	return _is_preempt(_current) && __must_switch_threads();
    a418:	4b08      	ldr	r3, [pc, #32]	; (a43c <_impl_k_sem_give+0xb8>)
    a41a:	689b      	ldr	r3, [r3, #8]
    a41c:	895b      	ldrh	r3, [r3, #10]
    a41e:	2b7f      	cmp	r3, #127	; 0x7f
    a420:	d805      	bhi.n	a42e <_impl_k_sem_give+0xaa>
    a422:	f7ff fec9 	bl	a1b8 <__must_switch_threads>
    a426:	3000      	adds	r0, #0
    a428:	bf18      	it	ne
    a42a:	2001      	movne	r0, #1
    a42c:	e7c1      	b.n	a3b2 <_impl_k_sem_give+0x2e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    a42e:	f386 8811 	msr	BASEPRI, r6
    a432:	bd70      	pop	{r4, r5, r6, pc}
		_add_thread_to_ready_q(thread);
    a434:	4620      	mov	r0, r4
    a436:	f7ff fdc5 	bl	9fc4 <_add_thread_to_ready_q>
    a43a:	e7e2      	b.n	a402 <_impl_k_sem_give+0x7e>
    a43c:	200017e8 	.word	0x200017e8
    a440:	e000ed00 	.word	0xe000ed00

0000a444 <_impl_k_sem_take>:
#ifdef CONFIG_USERSPACE
_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
#endif

int _impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
    a444:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    a446:	f04f 0320 	mov.w	r3, #32
    a44a:	f3ef 8411 	mrs	r4, BASEPRI
    a44e:	f383 8811 	msr	BASEPRI, r3
	__ASSERT(!_is_in_isr() || timeout == K_NO_WAIT, "");

	unsigned int key = irq_lock();

	if (likely(sem->count > 0)) {
    a452:	6883      	ldr	r3, [r0, #8]
    a454:	b12b      	cbz	r3, a462 <_impl_k_sem_take+0x1e>
		sem->count--;
    a456:	3b01      	subs	r3, #1
    a458:	6083      	str	r3, [r0, #8]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    a45a:	f384 8811 	msr	BASEPRI, r4
		irq_unlock(key);
		return 0;
    a45e:	2000      	movs	r0, #0
    a460:	bd38      	pop	{r3, r4, r5, pc}
	}

	if (timeout == K_NO_WAIT) {
    a462:	b921      	cbnz	r1, a46e <_impl_k_sem_take+0x2a>
    a464:	f384 8811 	msr	BASEPRI, r4
		irq_unlock(key);
		return -EBUSY;
    a468:	f06f 000f 	mvn.w	r0, #15
    a46c:	bd38      	pop	{r3, r4, r5, pc}
	}

	_pend_current_thread(&sem->wait_q, timeout);
    a46e:	f7ff fe93 	bl	a198 <_pend_current_thread>
	_update_time_slice_before_swap();
    a472:	f7ff ff53 	bl	a31c <_update_time_slice_before_swap>
	return __swap(key);
    a476:	4620      	mov	r0, r4

	return _Swap(key);
}
    a478:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    a47c:	f7f6 ba9a 	b.w	9b4 <__swap>

0000a480 <_impl_k_uptime_get_32>:
u32_t _tick_get_32(void)
{
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)_get_elapsed_clock_time();
#else
	return (u32_t)_sys_clock_tick_count;
    a480:	4b03      	ldr	r3, [pc, #12]	; (a490 <_impl_k_uptime_get_32+0x10>)
    a482:	e9d3 0100 	ldrd	r0, r1, [r3]
	return (u64_t)ticks * _ms_per_tick;
    a486:	230a      	movs	r3, #10
    a488:	fba0 0103 	umull	r0, r1, r0, r3
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get_32());
}
    a48c:	4770      	bx	lr
    a48e:	bf00      	nop
    a490:	20001ae8 	.word	0x20001ae8

0000a494 <_nano_sys_clock_tick_announce>:
 * timers that have expired and wake up the threads pending on them.
 *
 * @return N/A
 */
void _nano_sys_clock_tick_announce(s32_t ticks)
{
    a494:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a498:	4607      	mov	r7, r0
	__asm__ volatile(
    a49a:	f04f 0320 	mov.w	r3, #32
    a49e:	f3ef 8011 	mrs	r0, BASEPRI
    a4a2:	f383 8811 	msr	BASEPRI, r3

	K_DEBUG("ticks: %d\n", ticks);

	/* 64-bit value, ensure atomic access with irq lock */
	key = irq_lock();
	_sys_clock_tick_count += ticks;
    a4a6:	4963      	ldr	r1, [pc, #396]	; (a634 <_nano_sys_clock_tick_announce+0x1a0>)
    a4a8:	e9d1 4500 	ldrd	r4, r5, [r1]
    a4ac:	19e2      	adds	r2, r4, r7
    a4ae:	eb45 73e7 	adc.w	r3, r5, r7, asr #31
    a4b2:	e9c1 2300 	strd	r2, r3, [r1]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    a4b6:	f380 8811 	msr	BASEPRI, r0
	list->head = (sys_dnode_t *)list;
    a4ba:	466e      	mov	r6, sp
    a4bc:	f8cd d000 	str.w	sp, [sp]
	list->tail = (sys_dnode_t *)list;
    a4c0:	f8cd d004 	str.w	sp, [sp, #4]
	__asm__ volatile(
    a4c4:	f04f 0320 	mov.w	r3, #32
    a4c8:	f3ef 8011 	mrs	r0, BASEPRI
    a4cc:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
    a4d0:	4c59      	ldr	r4, [pc, #356]	; (a638 <_nano_sys_clock_tick_announce+0x1a4>)
    a4d2:	4621      	mov	r1, r4
    a4d4:	4602      	mov	r2, r0
    a4d6:	f851 3f10 	ldr.w	r3, [r1, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a4da:	428b      	cmp	r3, r1
    a4dc:	d000      	beq.n	a4e0 <_nano_sys_clock_tick_announce+0x4c>
	if (!next) {
    a4de:	b9fb      	cbnz	r3, a520 <_nano_sys_clock_tick_announce+0x8c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    a4e0:	f380 8811 	msr	BASEPRI, r0
	if (!_is_thread_time_slicing(_current)) {
    a4e4:	68a0      	ldr	r0, [r4, #8]
    a4e6:	f7ff fef5 	bl	a2d4 <_is_thread_time_slicing>
    a4ea:	b1b0      	cbz	r0, a51a <_nano_sys_clock_tick_announce+0x86>
	_time_slice_elapsed += __ticks_to_ms(ticks);
    a4ec:	4a53      	ldr	r2, [pc, #332]	; (a63c <_nano_sys_clock_tick_announce+0x1a8>)
    a4ee:	6811      	ldr	r1, [r2, #0]
    a4f0:	230a      	movs	r3, #10
    a4f2:	fb07 1703 	mla	r7, r7, r3, r1
	if (_time_slice_elapsed >= _time_slice_duration) {
    a4f6:	4b52      	ldr	r3, [pc, #328]	; (a640 <_nano_sys_clock_tick_announce+0x1ac>)
	_time_slice_elapsed += __ticks_to_ms(ticks);
    a4f8:	6017      	str	r7, [r2, #0]
	if (_time_slice_elapsed >= _time_slice_duration) {
    a4fa:	681b      	ldr	r3, [r3, #0]
    a4fc:	429f      	cmp	r7, r3
    a4fe:	db0c      	blt.n	a51a <_nano_sys_clock_tick_announce+0x86>
		_time_slice_elapsed = 0;
    a500:	2300      	movs	r3, #0
    a502:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    a504:	f04f 0320 	mov.w	r3, #32
    a508:	f3ef 8511 	mrs	r5, BASEPRI
    a50c:	f383 8811 	msr	BASEPRI, r3
		_move_thread_to_end_of_prio_q(_current);
    a510:	68a0      	ldr	r0, [r4, #8]
    a512:	f7ff fe91 	bl	a238 <_move_thread_to_end_of_prio_q>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    a516:	f385 8811 	msr	BASEPRI, r5
	if ((!remaining && next_to) || (next_to < remaining)) {
		/* Clears current program if next_to = 0 and remaining > 0 */
		_set_time(next_to);
	}
#endif
}
    a51a:	b003      	add	sp, #12
    a51c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_handling_timeouts = 1;
    a520:	4d48      	ldr	r5, [pc, #288]	; (a644 <_nano_sys_clock_tick_announce+0x1b0>)
    a522:	2101      	movs	r1, #1
    a524:	6029      	str	r1, [r5, #0]
    a526:	46ab      	mov	fp, r5
    a528:	4639      	mov	r1, r7
			timeout->delta_ticks_from_prev = 0;
    a52a:	f04f 0e00 	mov.w	lr, #0
			timeout->delta_ticks_from_prev = _EXPIRED;
    a52e:	f06f 0c01 	mvn.w	ip, #1
		s32_t tmp = timeout->delta_ticks_from_prev;
    a532:	6918      	ldr	r0, [r3, #16]
		if (timeout->delta_ticks_from_prev < ticks) {
    a534:	4288      	cmp	r0, r1
			timeout->delta_ticks_from_prev -= ticks;
    a536:	bfaa      	itet	ge
    a538:	eba0 0801 	subge.w	r8, r0, r1
			timeout->delta_ticks_from_prev = 0;
    a53c:	f8c3 e010 	strlt.w	lr, [r3, #16]
			timeout->delta_ticks_from_prev -= ticks;
    a540:	f8c3 8010 	strge.w	r8, [r3, #16]
		ticks -= tmp;
    a544:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    a546:	6960      	ldr	r0, [r4, #20]
		if (timeout->delta_ticks_from_prev == 0) {
    a548:	691d      	ldr	r5, [r3, #16]
    a54a:	4298      	cmp	r0, r3
    a54c:	bf14      	ite	ne
    a54e:	6818      	ldrne	r0, [r3, #0]
    a550:	2000      	moveq	r0, #0
    a552:	b9d5      	cbnz	r5, a58a <_nano_sys_clock_tick_announce+0xf6>
	node->prev->next = node->next;
    a554:	e893 0220 	ldmia.w	r3, {r5, r9}
    a558:	f8c9 5000 	str.w	r5, [r9]
	node->next->prev = node->prev;
    a55c:	681d      	ldr	r5, [r3, #0]
    a55e:	f8c5 9004 	str.w	r9, [r5, #4]
	node->next = list->head;
    a562:	9d00      	ldr	r5, [sp, #0]
	node->prev = list;
    a564:	e883 0060 	stmia.w	r3, {r5, r6}
	list->head->prev = node;
    a568:	9d00      	ldr	r5, [sp, #0]
	list->head = node;
    a56a:	9300      	str	r3, [sp, #0]
	list->head->prev = node;
    a56c:	606b      	str	r3, [r5, #4]
			timeout->delta_ticks_from_prev = _EXPIRED;
    a56e:	f8c3 c010 	str.w	ip, [r3, #16]
    a572:	f382 8811 	msr	BASEPRI, r2
	__asm__ volatile(
    a576:	f04f 0320 	mov.w	r3, #32
    a57a:	f3ef 8211 	mrs	r2, BASEPRI
    a57e:	f383 8811 	msr	BASEPRI, r3
	while (next) {
    a582:	4603      	mov	r3, r0
    a584:	2800      	cmp	r0, #0
    a586:	d1d4      	bne.n	a532 <_nano_sys_clock_tick_announce+0x9e>
    a588:	e001      	b.n	a58e <_nano_sys_clock_tick_announce+0xfa>
		} else if (ticks <= 0) {
    a58a:	2900      	cmp	r1, #0
    a58c:	dcf1      	bgt.n	a572 <_nano_sys_clock_tick_announce+0xde>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    a58e:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
    a592:	9800      	ldr	r0, [sp, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a594:	42b0      	cmp	r0, r6
    a596:	d103      	bne.n	a5a0 <_nano_sys_clock_tick_announce+0x10c>
	_handling_timeouts = 0;
    a598:	2300      	movs	r3, #0
    a59a:	f8cb 3000 	str.w	r3, [fp]
    a59e:	e7a1      	b.n	a4e4 <_nano_sys_clock_tick_announce+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
    a5a0:	2800      	cmp	r0, #0
    a5a2:	d0f9      	beq.n	a598 <_nano_sys_clock_tick_announce+0x104>
	return (node == list->tail) ? NULL : node->next;
    a5a4:	9b01      	ldr	r3, [sp, #4]
    a5a6:	4298      	cmp	r0, r3
    a5a8:	d101      	bne.n	a5ae <_nano_sys_clock_tick_announce+0x11a>
    a5aa:	2600      	movs	r6, #0
    a5ac:	e000      	b.n	a5b0 <_nano_sys_clock_tick_announce+0x11c>
    a5ae:	6806      	ldr	r6, [r0, #0]
	timeout->delta_ticks_from_prev = _INACTIVE;
    a5b0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
		thread->base.timeout.wait_q = NULL;
    a5b4:	f04f 0900 	mov.w	r9, #0
	node->prev->next = node->next;
    a5b8:	e890 000c 	ldmia.w	r0, {r2, r3}
    a5bc:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    a5be:	6802      	ldr	r2, [r0, #0]
    a5c0:	6053      	str	r3, [r2, #4]
	struct k_thread *thread = timeout->thread;
    a5c2:	6883      	ldr	r3, [r0, #8]
	__asm__ volatile(
    a5c4:	f04f 0220 	mov.w	r2, #32
    a5c8:	f3ef 8a11 	mrs	sl, BASEPRI
    a5cc:	f382 8811 	msr	BASEPRI, r2
	timeout->delta_ticks_from_prev = _INACTIVE;
    a5d0:	f8c0 8010 	str.w	r8, [r0, #16]
	if (thread) {
    a5d4:	b1fb      	cbz	r3, a616 <_nano_sys_clock_tick_announce+0x182>
	if (timeout_obj->wait_q) {
    a5d6:	68c2      	ldr	r2, [r0, #12]
    a5d8:	b152      	cbz	r2, a5f0 <_nano_sys_clock_tick_announce+0x15c>
	node->prev->next = node->next;
    a5da:	6859      	ldr	r1, [r3, #4]
    a5dc:	681a      	ldr	r2, [r3, #0]
    a5de:	600a      	str	r2, [r1, #0]
	node->next->prev = node->prev;
    a5e0:	681a      	ldr	r2, [r3, #0]
    a5e2:	6051      	str	r1, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
    a5e4:	7a5a      	ldrb	r2, [r3, #9]
		thread->base.timeout.wait_q = NULL;
    a5e6:	f8c3 901c 	str.w	r9, [r3, #28]
    a5ea:	f022 0202 	bic.w	r2, r2, #2
    a5ee:	725a      	strb	r2, [r3, #9]
	thread->base.thread_state &= ~_THREAD_PRESTART;
    a5f0:	7a5a      	ldrb	r2, [r3, #9]
    a5f2:	f022 0104 	bic.w	r1, r2, #4
	return !(_is_thread_prevented_from_running(thread) ||
    a5f6:	f012 0f1b 	tst.w	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    a5fa:	7259      	strb	r1, [r3, #9]
	return !(_is_thread_prevented_from_running(thread) ||
    a5fc:	d102      	bne.n	a604 <_nano_sys_clock_tick_announce+0x170>
    a5fe:	6a1a      	ldr	r2, [r3, #32]
    a600:	3201      	adds	r2, #1
    a602:	d013      	beq.n	a62c <_nano_sys_clock_tick_announce+0x198>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    a604:	f38a 8811 	msr	BASEPRI, sl
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
    a608:	2e00      	cmp	r6, #0
    a60a:	d0c5      	beq.n	a598 <_nano_sys_clock_tick_announce+0x104>
	return (node == list->tail) ? NULL : node->next;
    a60c:	9b01      	ldr	r3, [sp, #4]
    a60e:	42b3      	cmp	r3, r6
    a610:	d108      	bne.n	a624 <_nano_sys_clock_tick_announce+0x190>
    a612:	2300      	movs	r3, #0
    a614:	e007      	b.n	a626 <_nano_sys_clock_tick_announce+0x192>
    a616:	f38a 8811 	msr	BASEPRI, sl
		if (timeout->func) {
    a61a:	6943      	ldr	r3, [r0, #20]
    a61c:	2b00      	cmp	r3, #0
    a61e:	d0f3      	beq.n	a608 <_nano_sys_clock_tick_announce+0x174>
			timeout->func(timeout);
    a620:	4798      	blx	r3
    a622:	e7f1      	b.n	a608 <_nano_sys_clock_tick_announce+0x174>
    a624:	6833      	ldr	r3, [r6, #0]
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
    a626:	4630      	mov	r0, r6
    a628:	461e      	mov	r6, r3
    a62a:	e7c5      	b.n	a5b8 <_nano_sys_clock_tick_announce+0x124>
		_add_thread_to_ready_q(thread);
    a62c:	4618      	mov	r0, r3
    a62e:	f7ff fcc9 	bl	9fc4 <_add_thread_to_ready_q>
    a632:	e7e7      	b.n	a604 <_nano_sys_clock_tick_announce+0x170>
    a634:	20001ae8 	.word	0x20001ae8
    a638:	200017e8 	.word	0x200017e8
    a63c:	20001ae4 	.word	0x20001ae4
    a640:	2000190c 	.word	0x2000190c
    a644:	20001ae0 	.word	0x20001ae0

0000a648 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
    a648:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
    a64a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    a64e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a652:	4903      	ldr	r1, [pc, #12]	; (a660 <k_sys_work_q_init+0x18>)
    a654:	4803      	ldr	r0, [pc, #12]	; (a664 <k_sys_work_q_init+0x1c>)
    a656:	f000 f98d 	bl	a974 <k_work_q_start>
		       sys_work_q_stack,
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);

	return 0;
}
    a65a:	2000      	movs	r0, #0
    a65c:	bd08      	pop	{r3, pc}
    a65e:	bf00      	nop
    a660:	200032e0 	.word	0x200032e0
    a664:	20001af0 	.word	0x20001af0

0000a668 <_is_thread_ready>:
	return !(_is_thread_prevented_from_running(thread) ||
    a668:	7a43      	ldrb	r3, [r0, #9]
    a66a:	06da      	lsls	r2, r3, #27
    a66c:	d104      	bne.n	a678 <_is_thread_ready+0x10>
    a66e:	6a00      	ldr	r0, [r0, #32]
    a670:	1c43      	adds	r3, r0, #1
    a672:	4258      	negs	r0, r3
    a674:	4158      	adcs	r0, r3
    a676:	4770      	bx	lr
    a678:	2000      	movs	r0, #0
}
    a67a:	4770      	bx	lr

0000a67c <_abort_timeout>:
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    a67c:	6903      	ldr	r3, [r0, #16]
    a67e:	1c5a      	adds	r2, r3, #1
    a680:	d011      	beq.n	a6a6 <_abort_timeout+0x2a>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
    a682:	4a0a      	ldr	r2, [pc, #40]	; (a6ac <_abort_timeout+0x30>)
    a684:	6952      	ldr	r2, [r2, #20]
    a686:	4290      	cmp	r0, r2
    a688:	bf1f      	itttt	ne
    a68a:	6801      	ldrne	r1, [r0, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
    a68c:	690a      	ldrne	r2, [r1, #16]
    a68e:	189b      	addne	r3, r3, r2
    a690:	610b      	strne	r3, [r1, #16]
	node->prev->next = node->next;
    a692:	e890 000c 	ldmia.w	r0, {r2, r3}
    a696:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    a698:	6802      	ldr	r2, [r0, #0]
    a69a:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
    a69c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a6a0:	6103      	str	r3, [r0, #16]
	return 0;
    a6a2:	2000      	movs	r0, #0
    a6a4:	4770      	bx	lr
		return _INACTIVE;
    a6a6:	4618      	mov	r0, r3
}
    a6a8:	4770      	bx	lr
    a6aa:	bf00      	nop
    a6ac:	200017e8 	.word	0x200017e8

0000a6b0 <schedule_new_thread.part.13>:
_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_start, K_OBJ_THREAD, struct k_thread *);
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
    a6b0:	b5f0      	push	{r4, r5, r6, r7, lr}
	__asm__ volatile(
    a6b2:	f04f 0320 	mov.w	r3, #32
    a6b6:	f3ef 8611 	mrs	r6, BASEPRI
    a6ba:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
    a6be:	4a19      	ldr	r2, [pc, #100]	; (a724 <schedule_new_thread.part.13+0x74>)
	timeout->thread = thread;
    a6c0:	6180      	str	r0, [r0, #24]
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
    a6c2:	230a      	movs	r3, #10
    a6c4:	3109      	adds	r1, #9
    a6c6:	fbb1 f1f3 	udiv	r1, r1, r3
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (delay == 0) {
		k_thread_start(thread);
	} else {
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(delay);
    a6ca:	3101      	adds	r1, #1
	timeout->delta_ticks_from_prev = timeout_in_ticks;
    a6cc:	6201      	str	r1, [r0, #32]
    a6ce:	4611      	mov	r1, r2
	timeout->wait_q = (sys_dlist_t *)wait_q;
    a6d0:	2300      	movs	r3, #0
    a6d2:	61c3      	str	r3, [r0, #28]
    a6d4:	f851 3f10 	ldr.w	r3, [r1, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a6d8:	428b      	cmp	r3, r1
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
    a6da:	f100 0510 	add.w	r5, r0, #16
    a6de:	d108      	bne.n	a6f2 <schedule_new_thread.part.13+0x42>
	node->next = list;
    a6e0:	6101      	str	r1, [r0, #16]
	node->prev = list->tail;
    a6e2:	6953      	ldr	r3, [r2, #20]
    a6e4:	6143      	str	r3, [r0, #20]
	list->tail->next = node;
    a6e6:	6953      	ldr	r3, [r2, #20]
    a6e8:	601d      	str	r5, [r3, #0]
	list->tail = node;
    a6ea:	6155      	str	r5, [r2, #20]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    a6ec:	f386 8811 	msr	BASEPRI, r6
    a6f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
    a6f2:	2b00      	cmp	r3, #0
    a6f4:	d0f4      	beq.n	a6e0 <schedule_new_thread.part.13+0x30>
    a6f6:	f8d2 e014 	ldr.w	lr, [r2, #20]
		if (*delta <= in_q->delta_ticks_from_prev) {
    a6fa:	6a04      	ldr	r4, [r0, #32]
    a6fc:	691f      	ldr	r7, [r3, #16]
    a6fe:	42bc      	cmp	r4, r7
    a700:	dc08      	bgt.n	a714 <schedule_new_thread.part.13+0x64>
		node->prev = insert_point->prev;
    a702:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
    a704:	1b3c      	subs	r4, r7, r4
    a706:	611c      	str	r4, [r3, #16]
    a708:	6142      	str	r2, [r0, #20]
		node->next = insert_point;
    a70a:	6103      	str	r3, [r0, #16]
		insert_point->prev->next = node;
    a70c:	685a      	ldr	r2, [r3, #4]
    a70e:	6015      	str	r5, [r2, #0]
		insert_point->prev = node;
    a710:	605d      	str	r5, [r3, #4]
    a712:	e7eb      	b.n	a6ec <schedule_new_thread.part.13+0x3c>
		*delta -= in_q->delta_ticks_from_prev;
    a714:	1be4      	subs	r4, r4, r7
	return (node == list->tail) ? NULL : node->next;
    a716:	4573      	cmp	r3, lr
    a718:	6204      	str	r4, [r0, #32]
    a71a:	d0e1      	beq.n	a6e0 <schedule_new_thread.part.13+0x30>
    a71c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
    a71e:	2b00      	cmp	r3, #0
    a720:	d1eb      	bne.n	a6fa <schedule_new_thread.part.13+0x4a>
    a722:	e7dd      	b.n	a6e0 <schedule_new_thread.part.13+0x30>
    a724:	200017e8 	.word	0x200017e8

0000a728 <k_is_in_isr>:
    a728:	f3ef 8005 	mrs	r0, IPSR
    a72c:	280d      	cmp	r0, #13
    a72e:	d807      	bhi.n	a740 <k_is_in_isr+0x18>
    a730:	b138      	cbz	r0, a742 <k_is_in_isr+0x1a>
    a732:	4b04      	ldr	r3, [pc, #16]	; (a744 <k_is_in_isr+0x1c>)
    a734:	6858      	ldr	r0, [r3, #4]
    a736:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
    a73a:	f3c0 20c0 	ubfx	r0, r0, #11, #1
    a73e:	4770      	bx	lr
    a740:	2001      	movs	r0, #1
}
    a742:	4770      	bx	lr
    a744:	e000ed00 	.word	0xe000ed00

0000a748 <_is_thread_essential>:
	return _current->base.user_options & K_ESSENTIAL;
    a748:	4b02      	ldr	r3, [pc, #8]	; (a754 <_is_thread_essential+0xc>)
    a74a:	689b      	ldr	r3, [r3, #8]
    a74c:	7a18      	ldrb	r0, [r3, #8]
}
    a74e:	f000 0001 	and.w	r0, r0, #1
    a752:	4770      	bx	lr
    a754:	200017e8 	.word	0x200017e8

0000a758 <_thread_entry>:
{
    a758:	b508      	push	{r3, lr}
    a75a:	4604      	mov	r4, r0
    a75c:	4608      	mov	r0, r1
    a75e:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    a760:	461a      	mov	r2, r3
    a762:	47a0      	blx	r4
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    a764:	f7ff fdb0 	bl	a2c8 <_impl_k_current_get>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
    a768:	f7f6 fbd4 	bl	f14 <_impl_k_thread_abort>

0000a76c <_impl_k_thread_start>:
{
    a76c:	b510      	push	{r4, lr}
    a76e:	4601      	mov	r1, r0
	__asm__ volatile(
    a770:	f04f 0320 	mov.w	r3, #32
    a774:	f3ef 8411 	mrs	r4, BASEPRI
    a778:	f383 8811 	msr	BASEPRI, r3
    a77c:	7a43      	ldrb	r3, [r0, #9]
	if (_has_thread_started(thread)) {
    a77e:	075a      	lsls	r2, r3, #29
    a780:	d402      	bmi.n	a788 <_impl_k_thread_start+0x1c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    a782:	f384 8811 	msr	BASEPRI, r4
    a786:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    a788:	f023 0304 	bic.w	r3, r3, #4
    a78c:	7243      	strb	r3, [r0, #9]
	if (_is_thread_ready(thread)) {
    a78e:	f7ff ff6b 	bl	a668 <_is_thread_ready>
    a792:	2800      	cmp	r0, #0
    a794:	d0f5      	beq.n	a782 <_impl_k_thread_start+0x16>
		_add_thread_to_ready_q(thread);
    a796:	4608      	mov	r0, r1
    a798:	f7ff fc14 	bl	9fc4 <_add_thread_to_ready_q>
	return _is_preempt(_current) && __must_switch_threads();
    a79c:	4b07      	ldr	r3, [pc, #28]	; (a7bc <_impl_k_thread_start+0x50>)
    a79e:	689b      	ldr	r3, [r3, #8]
    a7a0:	895b      	ldrh	r3, [r3, #10]
    a7a2:	2b7f      	cmp	r3, #127	; 0x7f
    a7a4:	d8ed      	bhi.n	a782 <_impl_k_thread_start+0x16>
    a7a6:	f7ff fd07 	bl	a1b8 <__must_switch_threads>
    a7aa:	2800      	cmp	r0, #0
    a7ac:	d0e9      	beq.n	a782 <_impl_k_thread_start+0x16>
	_update_time_slice_before_swap();
    a7ae:	f7ff fdb5 	bl	a31c <_update_time_slice_before_swap>
	return __swap(key);
    a7b2:	4620      	mov	r0, r4
}
    a7b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a7b8:	f7f6 b8fc 	b.w	9b4 <__swap>
    a7bc:	200017e8 	.word	0x200017e8

0000a7c0 <_setup_new_thread>:
void _setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options)
{
    a7c0:	b410      	push	{r4}

	if (options & K_INHERIT_PERMS) {
		_thread_perms_inherit(_current, new_thread);
	}
#endif
}
    a7c2:	bc10      	pop	{r4}
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    a7c4:	f7f6 bb02 	b.w	dcc <_new_thread>

0000a7c8 <_impl_k_thread_create>:
k_tid_t _impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
    a7c8:	b570      	push	{r4, r5, r6, lr}
    a7ca:	b086      	sub	sp, #24
    a7cc:	4604      	mov	r4, r0
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    a7ce:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    a7d0:	9604      	str	r6, [sp, #16]
    a7d2:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    a7d4:	9603      	str	r6, [sp, #12]
    a7d6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    a7d8:	9602      	str	r6, [sp, #8]
    a7da:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
{
    a7dc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    a7de:	9601      	str	r6, [sp, #4]
    a7e0:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    a7e2:	9600      	str	r6, [sp, #0]
    a7e4:	f7f6 faf2 	bl	dcc <_new_thread>
	__ASSERT(!_is_in_isr(), "Threads may not be created in ISRs");
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
			  prio, options);

	if (delay != K_FOREVER) {
    a7e8:	1c6b      	adds	r3, r5, #1
    a7ea:	d003      	beq.n	a7f4 <_impl_k_thread_create+0x2c>
	if (delay == 0) {
    a7ec:	b92d      	cbnz	r5, a7fa <_impl_k_thread_create+0x32>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread);
    a7ee:	4620      	mov	r0, r4
    a7f0:	f7ff ffbc 	bl	a76c <_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}
	return new_thread;
}
    a7f4:	4620      	mov	r0, r4
    a7f6:	b006      	add	sp, #24
    a7f8:	bd70      	pop	{r4, r5, r6, pc}
    a7fa:	4629      	mov	r1, r5
    a7fc:	4620      	mov	r0, r4
    a7fe:	f7ff ff57 	bl	a6b0 <schedule_new_thread.part.13>
    a802:	e7f7      	b.n	a7f4 <_impl_k_thread_create+0x2c>

0000a804 <_k_thread_single_abort>:
_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_resume, K_OBJ_THREAD, k_tid_t);
#endif

void _k_thread_single_abort(struct k_thread *thread)
{
	if (thread->fn_abort != NULL) {
    a804:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
    a806:	b510      	push	{r4, lr}
    a808:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
    a80a:	b103      	cbz	r3, a80e <_k_thread_single_abort+0xa>
		thread->fn_abort();
    a80c:	4798      	blx	r3
	}

	if (_is_thread_ready(thread)) {
    a80e:	4620      	mov	r0, r4
    a810:	f7ff ff2a 	bl	a668 <_is_thread_ready>
    a814:	b138      	cbz	r0, a826 <_k_thread_single_abort+0x22>
		_remove_thread_from_ready_q(thread);
    a816:	4620      	mov	r0, r4
    a818:	f7ff fc58 	bl	a0cc <_remove_thread_from_ready_q>
		if (_is_thread_timeout_active(thread)) {
			_abort_thread_timeout(thread);
		}
	}

	thread->base.thread_state |= _THREAD_DEAD;
    a81c:	7a63      	ldrb	r3, [r4, #9]
    a81e:	f043 0308 	orr.w	r3, r3, #8
    a822:	7263      	strb	r3, [r4, #9]
    a824:	bd10      	pop	{r4, pc}
		if (_is_thread_pending(thread)) {
    a826:	7a63      	ldrb	r3, [r4, #9]
    a828:	079b      	lsls	r3, r3, #30
    a82a:	d508      	bpl.n	a83e <_k_thread_single_abort+0x3a>
	node->prev->next = node->next;
    a82c:	e894 000c 	ldmia.w	r4, {r2, r3}
    a830:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    a832:	6822      	ldr	r2, [r4, #0]
    a834:	6053      	str	r3, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
    a836:	7a63      	ldrb	r3, [r4, #9]
    a838:	f023 0302 	bic.w	r3, r3, #2
    a83c:	7263      	strb	r3, [r4, #9]
		if (_is_thread_timeout_active(thread)) {
    a83e:	6a23      	ldr	r3, [r4, #32]
    a840:	3301      	adds	r3, #1
    a842:	d0eb      	beq.n	a81c <_k_thread_single_abort+0x18>
	return _abort_timeout(&thread->base.timeout);
    a844:	f104 0010 	add.w	r0, r4, #16
    a848:	f7ff ff18 	bl	a67c <_abort_timeout>
    a84c:	e7e6      	b.n	a81c <_k_thread_single_abort+0x18>
	...

0000a850 <_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void _init_static_threads(void)
{
    a850:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
    a852:	4f21      	ldr	r7, [pc, #132]	; (a8d8 <_init_static_threads+0x88>)
    a854:	4d21      	ldr	r5, [pc, #132]	; (a8dc <_init_static_threads+0x8c>)
{
    a856:	b087      	sub	sp, #28
    a858:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
    a85a:	42bd      	cmp	r5, r7
    a85c:	f105 042c 	add.w	r4, r5, #44	; 0x2c
    a860:	d314      	bcc.n	a88c <_init_static_threads+0x3c>
	--_current->base.sched_locked;
    a862:	4b1f      	ldr	r3, [pc, #124]	; (a8e0 <_init_static_threads+0x90>)
    a864:	689a      	ldr	r2, [r3, #8]
    a866:	7ad3      	ldrb	r3, [r2, #11]
    a868:	3b01      	subs	r3, #1
    a86a:	72d3      	strb	r3, [r2, #11]
	__asm__ volatile(
    a86c:	f04f 0320 	mov.w	r3, #32
    a870:	f3ef 8511 	mrs	r5, BASEPRI
    a874:	f383 8811 	msr	BASEPRI, r3
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
    a878:	4c18      	ldr	r4, [pc, #96]	; (a8dc <_init_static_threads+0x8c>)
    a87a:	42b4      	cmp	r4, r6
    a87c:	d31f      	bcc.n	a8be <_init_static_threads+0x6e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    a87e:	f385 8811 	msr	BASEPRI, r5
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
}
    a882:	b007      	add	sp, #28
    a884:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
    a888:	f7ff bcc6 	b.w	a218 <k_sched_unlock>
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    a88c:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    a890:	9304      	str	r3, [sp, #16]
    a892:	f854 3c10 	ldr.w	r3, [r4, #-16]
    a896:	9303      	str	r3, [sp, #12]
    a898:	f854 3c14 	ldr.w	r3, [r4, #-20]
    a89c:	9302      	str	r3, [sp, #8]
    a89e:	f854 3c18 	ldr.w	r3, [r4, #-24]
    a8a2:	9301      	str	r3, [sp, #4]
    a8a4:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    a8a8:	9300      	str	r3, [sp, #0]
    a8aa:	f1a4 002c 	sub.w	r0, r4, #44	; 0x2c
    a8ae:	c80f      	ldmia	r0, {r0, r1, r2, r3}
    a8b0:	f7f6 fa8c 	bl	dcc <_new_thread>
		thread_data->init_thread->init_data = thread_data;
    a8b4:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    a8b8:	64dd      	str	r5, [r3, #76]	; 0x4c
    a8ba:	4625      	mov	r5, r4
    a8bc:	e7cd      	b.n	a85a <_init_static_threads+0xa>
		if (thread_data->init_delay != K_FOREVER) {
    a8be:	6a61      	ldr	r1, [r4, #36]	; 0x24
    a8c0:	1c4b      	adds	r3, r1, #1
    a8c2:	d003      	beq.n	a8cc <_init_static_threads+0x7c>
			schedule_new_thread(thread_data->init_thread,
    a8c4:	6820      	ldr	r0, [r4, #0]
	if (delay == 0) {
    a8c6:	b919      	cbnz	r1, a8d0 <_init_static_threads+0x80>
    a8c8:	f7ff ff50 	bl	a76c <_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    a8cc:	342c      	adds	r4, #44	; 0x2c
    a8ce:	e7d4      	b.n	a87a <_init_static_threads+0x2a>
    a8d0:	f7ff feee 	bl	a6b0 <schedule_new_thread.part.13>
    a8d4:	e7fa      	b.n	a8cc <_init_static_threads+0x7c>
    a8d6:	bf00      	nop
    a8d8:	200039e0 	.word	0x200039e0
    a8dc:	200039e0 	.word	0x200039e0
    a8e0:	200017e8 	.word	0x200017e8

0000a8e4 <_init_thread_base>:
void _init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
    a8e4:	7203      	strb	r3, [r0, #8]
	thread_base->thread_state = (u8_t)initial_state;
    a8e6:	7242      	strb	r2, [r0, #9]

	thread_base->prio = priority;

	thread_base->sched_locked = 0;
    a8e8:	2300      	movs	r3, #0
	t->delta_ticks_from_prev = _INACTIVE;
    a8ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	thread_base->prio = priority;
    a8ee:	7281      	strb	r1, [r0, #10]
	thread_base->sched_locked = 0;
    a8f0:	72c3      	strb	r3, [r0, #11]
    a8f2:	6202      	str	r2, [r0, #32]
	t->wait_q = NULL;
    a8f4:	61c3      	str	r3, [r0, #28]
	t->thread = NULL;
    a8f6:	6183      	str	r3, [r0, #24]
	t->func = func;
    a8f8:	6243      	str	r3, [r0, #36]	; 0x24
    a8fa:	4770      	bx	lr

0000a8fc <k_work_submit_to_queue>:
{
    a8fc:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a8fe:	f101 0308 	add.w	r3, r1, #8
    a902:	f3bf 8f5b 	dmb	ish
    a906:	e853 2f00 	ldrex	r2, [r3]
    a90a:	f042 0e01 	orr.w	lr, r2, #1
    a90e:	e843 ec00 	strex	ip, lr, [r3]
    a912:	f1bc 0f00 	cmp.w	ip, #0
    a916:	d1f6      	bne.n	a906 <k_work_submit_to_queue+0xa>
    a918:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    a91c:	07d3      	lsls	r3, r2, #31
    a91e:	d403      	bmi.n	a928 <k_work_submit_to_queue+0x2c>
	}
}
    a920:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
    a924:	f7ff bae3 	b.w	9eee <k_queue_append>
    a928:	f85d fb04 	ldr.w	pc, [sp], #4

0000a92c <work_timeout>:
{
	struct k_delayed_work *w = CONTAINER_OF(t, struct k_delayed_work,
						   timeout);

	/* submit work to workqueue */
	k_work_submit_to_queue(w->work_q, &w->work);
    a92c:	f1a0 010c 	sub.w	r1, r0, #12
    a930:	6980      	ldr	r0, [r0, #24]
    a932:	f7ff bfe3 	b.w	a8fc <k_work_submit_to_queue>

0000a936 <work_q_main>:
{
    a936:	b510      	push	{r4, lr}
    a938:	4604      	mov	r4, r0
		work = k_queue_get(&work_q->queue, K_FOREVER);
    a93a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a93e:	4620      	mov	r0, r4
    a940:	f7ff faf9 	bl	9f36 <k_queue_get>
		if (!work) {
    a944:	4603      	mov	r3, r0
    a946:	2800      	cmp	r0, #0
    a948:	d0f7      	beq.n	a93a <work_q_main+0x4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a94a:	3308      	adds	r3, #8
		handler = work->handler;
    a94c:	6842      	ldr	r2, [r0, #4]
    a94e:	f3bf 8f5b 	dmb	ish
    a952:	e853 1f00 	ldrex	r1, [r3]
    a956:	f021 0e01 	bic.w	lr, r1, #1
    a95a:	e843 ec00 	strex	ip, lr, [r3]
    a95e:	f1bc 0f00 	cmp.w	ip, #0
    a962:	d1f6      	bne.n	a952 <work_q_main+0x1c>
    a964:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(work->flags,
    a968:	07cb      	lsls	r3, r1, #31
    a96a:	d500      	bpl.n	a96e <work_q_main+0x38>
			handler(work);
    a96c:	4790      	blx	r2
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    a96e:	f7ff fc8d 	bl	a28c <_impl_k_yield>
    a972:	e7e2      	b.n	a93a <work_q_main+0x4>

0000a974 <k_work_q_start>:
{
    a974:	b5f0      	push	{r4, r5, r6, r7, lr}
    a976:	b087      	sub	sp, #28
    a978:	4604      	mov	r4, r0
    a97a:	461f      	mov	r7, r3
    a97c:	460d      	mov	r5, r1
    a97e:	4616      	mov	r6, r2
	k_queue_init(&work_q->queue);
    a980:	f7ff fa84 	bl	9e8c <k_queue_init>

    a984:	2000      	movs	r0, #0
    a986:	9005      	str	r0, [sp, #20]
    a988:	9004      	str	r0, [sp, #16]
    a98a:	9002      	str	r0, [sp, #8]
    a98c:	9001      	str	r0, [sp, #4]
    a98e:	9703      	str	r7, [sp, #12]
    a990:	9400      	str	r4, [sp, #0]
    a992:	4b04      	ldr	r3, [pc, #16]	; (a9a4 <k_work_q_start+0x30>)
    a994:	4632      	mov	r2, r6
    a996:	4629      	mov	r1, r5
    a998:	f104 0010 	add.w	r0, r4, #16
    a99c:	f7ff ff14 	bl	a7c8 <_impl_k_thread_create>
}
    a9a0:	b007      	add	sp, #28
    a9a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a9a4:	0000a937 	.word	0x0000a937

0000a9a8 <k_delayed_work_init>:
}

void k_delayed_work_init(struct k_delayed_work *work, k_work_handler_t handler)
{
    a9a8:	b500      	push	{lr}
    a9aa:	f100 0308 	add.w	r3, r0, #8
    a9ae:	f3bf 8f5b 	dmb	ish
    a9b2:	e853 2f00 	ldrex	r2, [r3]
    a9b6:	f022 0201 	bic.w	r2, r2, #1
    a9ba:	e843 2e00 	strex	lr, r2, [r3]
    a9be:	f1be 0f00 	cmp.w	lr, #0
    a9c2:	d1f6      	bne.n	a9b2 <k_delayed_work_init+0xa>
    a9c4:	f3bf 8f5b 	dmb	ish
	t->delta_ticks_from_prev = _INACTIVE;
    a9c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a9cc:	61c3      	str	r3, [r0, #28]
	t->func = func;
    a9ce:	4a04      	ldr	r2, [pc, #16]	; (a9e0 <k_delayed_work_init+0x38>)
	work->handler = handler;
    a9d0:	6041      	str	r1, [r0, #4]
	t->wait_q = NULL;
    a9d2:	2300      	movs	r3, #0
    a9d4:	6183      	str	r3, [r0, #24]
	t->thread = NULL;
    a9d6:	6143      	str	r3, [r0, #20]
	t->func = func;
    a9d8:	6202      	str	r2, [r0, #32]
	k_work_init(&work->work, handler);
	_init_timeout(&work->timeout, work_timeout);
	work->work_q = NULL;
    a9da:	6243      	str	r3, [r0, #36]	; 0x24
    a9dc:	f85d fb04 	ldr.w	pc, [sp], #4
    a9e0:	0000a92d 	.word	0x0000a92d

0000a9e4 <_ready_thread>:
	thread->base.thread_state &= ~_THREAD_PRESTART;
    a9e4:	7a42      	ldrb	r2, [r0, #9]
    a9e6:	f022 0104 	bic.w	r1, r2, #4
	return !(_is_thread_prevented_from_running(thread) ||
    a9ea:	f012 0f1b 	tst.w	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    a9ee:	7241      	strb	r1, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
    a9f0:	d104      	bne.n	a9fc <_ready_thread+0x18>
    a9f2:	6a03      	ldr	r3, [r0, #32]
    a9f4:	3301      	adds	r3, #1
    a9f6:	d101      	bne.n	a9fc <_ready_thread+0x18>
		_add_thread_to_ready_q(thread);
    a9f8:	f7ff bae4 	b.w	9fc4 <_add_thread_to_ready_q>
    a9fc:	4770      	bx	lr

0000a9fe <_unpend_thread>:
	node->prev->next = node->next;
    a9fe:	e890 000c 	ldmia.w	r0, {r2, r3}
    aa02:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    aa04:	6802      	ldr	r2, [r0, #0]
    aa06:	6053      	str	r3, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
    aa08:	7a43      	ldrb	r3, [r0, #9]
    aa0a:	f023 0302 	bic.w	r3, r3, #2
    aa0e:	7243      	strb	r3, [r0, #9]
    aa10:	4770      	bx	lr
	...

0000aa14 <_add_timeout.constprop.9>:
static inline void _add_timeout(struct k_thread *thread,
    aa14:	b430      	push	{r4, r5}
	timeout->thread = thread;
    aa16:	2400      	movs	r4, #0
static inline void _add_timeout(struct k_thread *thread,
    aa18:	4603      	mov	r3, r0
	timeout->delta_ticks_from_prev = timeout_in_ticks;
    aa1a:	6102      	str	r2, [r0, #16]
	timeout->thread = thread;
    aa1c:	6084      	str	r4, [r0, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
    aa1e:	60c1      	str	r1, [r0, #12]
	if (!timeout_in_ticks) {
    aa20:	b972      	cbnz	r2, aa40 <_add_timeout.constprop.9+0x2c>
	__asm__ volatile(
    aa22:	f04f 0120 	mov.w	r1, #32
    aa26:	f3ef 8211 	mrs	r2, BASEPRI
    aa2a:	f381 8811 	msr	BASEPRI, r1
	timeout->delta_ticks_from_prev = _INACTIVE;
    aa2e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    aa32:	6101      	str	r1, [r0, #16]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    aa34:	f382 8811 	msr	BASEPRI, r2
		if (timeout->func) {
    aa38:	6943      	ldr	r3, [r0, #20]
    aa3a:	b16b      	cbz	r3, aa58 <_add_timeout.constprop.9+0x44>
}
    aa3c:	bc30      	pop	{r4, r5}
			timeout->func(timeout);
    aa3e:	4718      	bx	r3
	return list->head == list;
    aa40:	4911      	ldr	r1, [pc, #68]	; (aa88 <_add_timeout.constprop.9+0x74>)
    aa42:	4608      	mov	r0, r1
    aa44:	f850 2f10 	ldr.w	r2, [r0, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    aa48:	4282      	cmp	r2, r0
    aa4a:	d10d      	bne.n	aa68 <_add_timeout.constprop.9+0x54>
	node->next = list;
    aa4c:	6018      	str	r0, [r3, #0]
	node->prev = list->tail;
    aa4e:	694a      	ldr	r2, [r1, #20]
    aa50:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
    aa52:	694a      	ldr	r2, [r1, #20]
    aa54:	6013      	str	r3, [r2, #0]
	list->tail = node;
    aa56:	614b      	str	r3, [r1, #20]
}
    aa58:	bc30      	pop	{r4, r5}
    aa5a:	4770      	bx	lr
		*delta -= in_q->delta_ticks_from_prev;
    aa5c:	1b64      	subs	r4, r4, r5
    aa5e:	611c      	str	r4, [r3, #16]
	return (node == list->tail) ? NULL : node->next;
    aa60:	694c      	ldr	r4, [r1, #20]
    aa62:	42a2      	cmp	r2, r4
    aa64:	d0f2      	beq.n	aa4c <_add_timeout.constprop.9+0x38>
    aa66:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
    aa68:	2a00      	cmp	r2, #0
    aa6a:	d0ef      	beq.n	aa4c <_add_timeout.constprop.9+0x38>
		if (*delta <= in_q->delta_ticks_from_prev) {
    aa6c:	691c      	ldr	r4, [r3, #16]
    aa6e:	6915      	ldr	r5, [r2, #16]
    aa70:	42ac      	cmp	r4, r5
    aa72:	dcf3      	bgt.n	aa5c <_add_timeout.constprop.9+0x48>
		node->prev = insert_point->prev;
    aa74:	6851      	ldr	r1, [r2, #4]
			in_q->delta_ticks_from_prev -= *delta;
    aa76:	1b2c      	subs	r4, r5, r4
    aa78:	6114      	str	r4, [r2, #16]
    aa7a:	6059      	str	r1, [r3, #4]
		node->next = insert_point;
    aa7c:	601a      	str	r2, [r3, #0]
		insert_point->prev->next = node;
    aa7e:	6851      	ldr	r1, [r2, #4]
    aa80:	600b      	str	r3, [r1, #0]
		insert_point->prev = node;
    aa82:	6053      	str	r3, [r2, #4]
    aa84:	e7e8      	b.n	aa58 <_add_timeout.constprop.9+0x44>
    aa86:	bf00      	nop
    aa88:	200017e8 	.word	0x200017e8

0000aa8c <_timer_expiration_handler>:

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (timer->period > 0) {
    aa8c:	6a83      	ldr	r3, [r0, #40]	; 0x28
    aa8e:	2b00      	cmp	r3, #0
{
    aa90:	b570      	push	{r4, r5, r6, lr}
    aa92:	4604      	mov	r4, r0
    aa94:	f100 0518 	add.w	r5, r0, #24
	if (timer->period > 0) {
    aa98:	dd0b      	ble.n	aab2 <_timer_expiration_handler+0x26>
	__asm__ volatile(
    aa9a:	f04f 0320 	mov.w	r3, #32
    aa9e:	f3ef 8611 	mrs	r6, BASEPRI
    aaa2:	f383 8811 	msr	BASEPRI, r3
		key = irq_lock();
		_add_timeout(NULL, &timer->timeout, &timer->wait_q,
    aaa6:	6a82      	ldr	r2, [r0, #40]	; 0x28
    aaa8:	4629      	mov	r1, r5
    aaaa:	f7ff ffb3 	bl	aa14 <_add_timeout.constprop.9>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    aaae:	f386 8811 	msr	BASEPRI, r6
				timer->period);
		irq_unlock(key);
	}

	/* update timer's status */
	timer->status += 1;
    aab2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    aab4:	3301      	adds	r3, #1
    aab6:	62e3      	str	r3, [r4, #44]	; 0x2c

	/* invoke timer expiry function */
	if (timer->expiry_fn) {
    aab8:	6a23      	ldr	r3, [r4, #32]
    aaba:	b10b      	cbz	r3, aac0 <_timer_expiration_handler+0x34>
		timer->expiry_fn(timer);
    aabc:	4620      	mov	r0, r4
    aabe:	4798      	blx	r3
	return list->head == list;
    aac0:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    aac2:	42ac      	cmp	r4, r5
    aac4:	d010      	beq.n	aae8 <_timer_expiration_handler+0x5c>
	}

	thread = (struct k_thread *)sys_dlist_peek_head(&timer->wait_q);

	if (!thread) {
    aac6:	b17c      	cbz	r4, aae8 <_timer_expiration_handler+0x5c>
	 * calling _unpend_thread() because a) this is the only place a thread
	 * can be taken off this pend queue, and b) the only place a thread
	 * can be put on the pend queue is at thread level, which of course
	 * cannot interrupt the current context.
	 */
	_unpend_thread(thread);
    aac8:	4620      	mov	r0, r4
    aaca:	f7ff ff98 	bl	a9fe <_unpend_thread>
	__asm__ volatile(
    aace:	f04f 0320 	mov.w	r3, #32
    aad2:	f3ef 8511 	mrs	r5, BASEPRI
    aad6:	f383 8811 	msr	BASEPRI, r3

	key = irq_lock();
	_ready_thread(thread);
    aada:	4620      	mov	r0, r4
    aadc:	f7ff ff82 	bl	a9e4 <_ready_thread>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    aae0:	f385 8811 	msr	BASEPRI, r5
    aae4:	2300      	movs	r3, #0
    aae6:	6663      	str	r3, [r4, #100]	; 0x64
    aae8:	bd70      	pop	{r4, r5, r6, pc}

0000aaea <sys_dlist_remove>:
	node->prev->next = node->next;
    aaea:	e890 000c 	ldmia.w	r0, {r2, r3}
    aaee:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    aaf0:	6802      	ldr	r2, [r0, #0]
    aaf2:	6053      	str	r3, [r2, #4]
    aaf4:	4770      	bx	lr

0000aaf6 <clear_event_registrations>:

/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int last_registered,
					      unsigned int key)
{
    aaf6:	b570      	push	{r4, r5, r6, lr}
    aaf8:	2414      	movs	r4, #20
    aafa:	4615      	mov	r5, r2
    aafc:	fb04 0401 	mla	r4, r4, r1, r0
	event->poller = NULL;
    ab00:	2600      	movs	r6, #0
	for (; last_registered >= 0; last_registered--) {
    ab02:	2900      	cmp	r1, #0
    ab04:	da00      	bge.n	ab08 <clear_event_registrations+0x12>
		clear_event_registration(&events[last_registered]);
		irq_unlock(key);
		key = irq_lock();
	}
}
    ab06:	bd70      	pop	{r4, r5, r6, pc}
	switch (event->type) {
    ab08:	7b63      	ldrb	r3, [r4, #13]
	event->poller = NULL;
    ab0a:	60a6      	str	r6, [r4, #8]
	switch (event->type) {
    ab0c:	f003 030f 	and.w	r3, r3, #15
    ab10:	2b02      	cmp	r3, #2
    ab12:	d003      	beq.n	ab1c <clear_event_registrations+0x26>
    ab14:	2b04      	cmp	r3, #4
    ab16:	d001      	beq.n	ab1c <clear_event_registrations+0x26>
    ab18:	2b01      	cmp	r3, #1
    ab1a:	d102      	bne.n	ab22 <clear_event_registrations+0x2c>
		sys_dlist_remove(&event->_node);
    ab1c:	4620      	mov	r0, r4
    ab1e:	f7ff ffe4 	bl	aaea <sys_dlist_remove>
    ab22:	f385 8811 	msr	BASEPRI, r5
	__asm__ volatile(
    ab26:	f04f 0320 	mov.w	r3, #32
    ab2a:	f3ef 8511 	mrs	r5, BASEPRI
    ab2e:	f383 8811 	msr	BASEPRI, r3
	for (; last_registered >= 0; last_registered--) {
    ab32:	3901      	subs	r1, #1
    ab34:	3c14      	subs	r4, #20
    ab36:	e7e4      	b.n	ab02 <clear_event_registrations+0xc>

0000ab38 <signal_poll_event>:
}

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state,
			      int *must_reschedule)
{
    ab38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	*must_reschedule = 0;
    ab3a:	2300      	movs	r3, #0
    ab3c:	6013      	str	r3, [r2, #0]

	if (!event->poller) {
    ab3e:	6883      	ldr	r3, [r0, #8]
{
    ab40:	4605      	mov	r5, r0
    ab42:	460e      	mov	r6, r1
    ab44:	4617      	mov	r7, r2
	if (!event->poller) {
    ab46:	2b00      	cmp	r3, #0
    ab48:	d049      	beq.n	abde <signal_poll_event+0xa6>
		goto ready_event;
	}

	struct k_thread *thread = event->poller->thread;
    ab4a:	6819      	ldr	r1, [r3, #0]
	thread->base.thread_state &= ~states;
    ab4c:	7a4b      	ldrb	r3, [r1, #9]
    ab4e:	f023 0220 	bic.w	r2, r3, #32

	__ASSERT(event->poller->thread, "poller should have a thread\n");

	clear_polling_state(thread);

	if (!_is_thread_pending(thread)) {
    ab52:	0798      	lsls	r0, r3, #30
    ab54:	724a      	strb	r2, [r1, #9]
    ab56:	d542      	bpl.n	abde <signal_poll_event+0xa6>
		goto ready_event;
	}

	if (_is_thread_timeout_expired(thread)) {
    ab58:	6a0b      	ldr	r3, [r1, #32]
    ab5a:	3302      	adds	r3, #2
    ab5c:	d04a      	beq.n	abf4 <signal_poll_event+0xbc>
	sys_dlist_remove(&thread->base.k_q_node);
    ab5e:	4608      	mov	r0, r1
    ab60:	f7ff ffc3 	bl	aaea <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    ab64:	7a4b      	ldrb	r3, [r1, #9]
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    ab66:	6a0c      	ldr	r4, [r1, #32]
    ab68:	f023 0302 	bic.w	r3, r3, #2
    ab6c:	1c62      	adds	r2, r4, #1
    ab6e:	724b      	strb	r3, [r1, #9]
	return _abort_timeout(&thread->base.timeout);
    ab70:	f101 0010 	add.w	r0, r1, #16
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    ab74:	d00c      	beq.n	ab90 <signal_poll_event+0x58>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
    ab76:	4b21      	ldr	r3, [pc, #132]	; (abfc <signal_poll_event+0xc4>)
    ab78:	695b      	ldr	r3, [r3, #20]
    ab7a:	4298      	cmp	r0, r3
	return (node == list->tail) ? NULL : node->next;
    ab7c:	bf1f      	itttt	ne
    ab7e:	690a      	ldrne	r2, [r1, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
    ab80:	6913      	ldrne	r3, [r2, #16]
    ab82:	191b      	addne	r3, r3, r4
    ab84:	6113      	strne	r3, [r2, #16]
	sys_dlist_remove(&timeout->node);
    ab86:	f7ff ffb0 	bl	aaea <sys_dlist_remove>
	timeout->delta_ticks_from_prev = _INACTIVE;
    ab8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ab8e:	620b      	str	r3, [r1, #32]
	return !(_is_thread_prevented_from_running(thread) ||
    ab90:	7a48      	ldrb	r0, [r1, #9]
		return -EAGAIN;
	}

	_unpend_thread(thread);
	_abort_thread_timeout(thread);
	_set_thread_return_value(thread,
    ab92:	2e00      	cmp	r6, #0
    ab94:	bf0c      	ite	eq
    ab96:	f06f 0303 	mvneq.w	r3, #3
    ab9a:	2300      	movne	r3, #0
    ab9c:	f010 041f 	ands.w	r4, r0, #31
    aba0:	664b      	str	r3, [r1, #100]	; 0x64
    aba2:	d11c      	bne.n	abde <signal_poll_event+0xa6>
    aba4:	6a0b      	ldr	r3, [r1, #32]
    aba6:	3301      	adds	r3, #1
    aba8:	d119      	bne.n	abde <signal_poll_event+0xa6>

	if (!_is_thread_ready(thread)) {
		goto ready_event;
	}

	_add_thread_to_ready_q(thread);
    abaa:	4608      	mov	r0, r1
    abac:	f7ff fa0a 	bl	9fc4 <_add_thread_to_ready_q>
    abb0:	f3ef 8305 	mrs	r3, IPSR
    abb4:	2b0d      	cmp	r3, #13
    abb6:	d81b      	bhi.n	abf0 <signal_poll_event+0xb8>
    abb8:	b123      	cbz	r3, abc4 <signal_poll_event+0x8c>
    abba:	4b11      	ldr	r3, [pc, #68]	; (ac00 <signal_poll_event+0xc8>)
    abbc:	6858      	ldr	r0, [r3, #4]
    abbe:	f410 6000 	ands.w	r0, r0, #2048	; 0x800
    abc2:	d00b      	beq.n	abdc <signal_poll_event+0xa4>
	return _is_preempt(_current) && __must_switch_threads();
    abc4:	4b0d      	ldr	r3, [pc, #52]	; (abfc <signal_poll_event+0xc4>)
    abc6:	689b      	ldr	r3, [r3, #8]
    abc8:	895b      	ldrh	r3, [r3, #10]
    abca:	2b7f      	cmp	r3, #127	; 0x7f
    abcc:	d901      	bls.n	abd2 <signal_poll_event+0x9a>
	*must_reschedule = !_is_in_isr() && _must_switch_threads();
    abce:	2000      	movs	r0, #0
    abd0:	e004      	b.n	abdc <signal_poll_event+0xa4>
    abd2:	f7ff faf1 	bl	a1b8 <__must_switch_threads>
    abd6:	3000      	adds	r0, #0
    abd8:	bf18      	it	ne
    abda:	2001      	movne	r0, #1
    abdc:	6038      	str	r0, [r7, #0]
	event->state |= state;
    abde:	7b6b      	ldrb	r3, [r5, #13]
    abe0:	ea46 1613 	orr.w	r6, r6, r3, lsr #4
    abe4:	f366 1307 	bfi	r3, r6, #4, #4
	event->poller = NULL;
    abe8:	2000      	movs	r0, #0
	event->state |= state;
    abea:	736b      	strb	r3, [r5, #13]
	event->poller = NULL;
    abec:	60a8      	str	r0, [r5, #8]

ready_event:
	set_event_ready(event, state);
	return 0;
    abee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	*must_reschedule = !_is_in_isr() && _must_switch_threads();
    abf0:	4620      	mov	r0, r4
    abf2:	e7f3      	b.n	abdc <signal_poll_event+0xa4>
		return -EAGAIN;
    abf4:	f06f 000a 	mvn.w	r0, #10
    abf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    abfa:	bf00      	nop
    abfc:	200017e8 	.word	0x200017e8
    ac00:	e000ed00 	.word	0xe000ed00

0000ac04 <add_event>:
	return list->head == list;
    ac04:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
    ac06:	4298      	cmp	r0, r3
{
    ac08:	b530      	push	{r4, r5, lr}
    ac0a:	d00a      	beq.n	ac22 <add_event+0x1e>
    ac0c:	6844      	ldr	r4, [r0, #4]
	if (!pending || _is_t1_higher_prio_than_t2(pending->poller->thread,
    ac0e:	b144      	cbz	r4, ac22 <add_event+0x1e>
    ac10:	68a5      	ldr	r5, [r4, #8]
    ac12:	6812      	ldr	r2, [r2, #0]
    ac14:	682d      	ldr	r5, [r5, #0]
    ac16:	f992 200a 	ldrsb.w	r2, [r2, #10]
    ac1a:	f995 500a 	ldrsb.w	r5, [r5, #10]
    ac1e:	4295      	cmp	r5, r2
    ac20:	da17      	bge.n	ac52 <add_event+0x4e>
	node->next = list;
    ac22:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
    ac24:	6843      	ldr	r3, [r0, #4]
    ac26:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
    ac28:	6843      	ldr	r3, [r0, #4]
    ac2a:	6019      	str	r1, [r3, #0]
	list->tail = node;
    ac2c:	6041      	str	r1, [r0, #4]
    ac2e:	bd30      	pop	{r4, r5, pc}
		if (_is_t1_higher_prio_than_t2(poller->thread,
    ac30:	689d      	ldr	r5, [r3, #8]
    ac32:	682d      	ldr	r5, [r5, #0]
    ac34:	f995 500a 	ldrsb.w	r5, [r5, #10]
    ac38:	4295      	cmp	r5, r2
    ac3a:	dd06      	ble.n	ac4a <add_event+0x46>
		node->prev = insert_point->prev;
    ac3c:	685a      	ldr	r2, [r3, #4]
    ac3e:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
    ac40:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
    ac42:	685a      	ldr	r2, [r3, #4]
    ac44:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
    ac46:	6059      	str	r1, [r3, #4]
    ac48:	bd30      	pop	{r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    ac4a:	42a3      	cmp	r3, r4
    ac4c:	d003      	beq.n	ac56 <add_event+0x52>
    ac4e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
    ac50:	b10b      	cbz	r3, ac56 <add_event+0x52>
    ac52:	2b00      	cmp	r3, #0
    ac54:	d1ec      	bne.n	ac30 <add_event+0x2c>
	node->prev = list->tail;
    ac56:	e881 0011 	stmia.w	r1, {r0, r4}
    ac5a:	e7e5      	b.n	ac28 <add_event+0x24>

0000ac5c <k_poll_event_init>:
{
    ac5c:	b530      	push	{r4, r5, lr}
	event->type = type;
    ac5e:	7b44      	ldrb	r4, [r0, #13]
	event->obj = obj;
    ac60:	6103      	str	r3, [r0, #16]
	event->type = type;
    ac62:	f361 0403 	bfi	r4, r1, #0, #4
	event->mode = mode;
    ac66:	7b81      	ldrb	r1, [r0, #14]
    ac68:	f362 0100 	bfi	r1, r2, #0, #1
    ac6c:	7381      	strb	r1, [r0, #14]
	event->unused = 0;
    ac6e:	89c2      	ldrh	r2, [r0, #14]
	event->poller = NULL;
    ac70:	2500      	movs	r5, #0
	event->state = K_POLL_STATE_NOT_READY;
    ac72:	f365 1407 	bfi	r4, r5, #4, #4
	event->unused = 0;
    ac76:	f365 024f 	bfi	r2, r5, #1, #15
	event->poller = NULL;
    ac7a:	6085      	str	r5, [r0, #8]
	event->state = K_POLL_STATE_NOT_READY;
    ac7c:	7344      	strb	r4, [r0, #13]
	event->unused = 0;
    ac7e:	81c2      	strh	r2, [r0, #14]
	event->obj = obj;
    ac80:	bd30      	pop	{r4, r5, pc}
	...

0000ac84 <k_poll>:
{
    ac84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ac88:	b087      	sub	sp, #28
    ac8a:	4680      	mov	r8, r0
    ac8c:	9101      	str	r1, [sp, #4]
    ac8e:	4691      	mov	r9, r2
    ac90:	f04f 0320 	mov.w	r3, #32
    ac94:	f3ef 8111 	mrs	r1, BASEPRI
    ac98:	f383 8811 	msr	BASEPRI, r3
	set_polling_state(_current);
    ac9c:	4d4a      	ldr	r5, [pc, #296]	; (adc8 <k_poll+0x144>)
    ac9e:	68aa      	ldr	r2, [r5, #8]
	thread->base.thread_state |= states;
    aca0:	7a53      	ldrb	r3, [r2, #9]
    aca2:	f043 0320 	orr.w	r3, r3, #32
    aca6:	7253      	strb	r3, [r2, #9]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    aca8:	f381 8811 	msr	BASEPRI, r1
	struct _poller poller = { .thread = _current };
    acac:	f10d 0a18 	add.w	sl, sp, #24
    acb0:	68aa      	ldr	r2, [r5, #8]
    acb2:	f84a 2d0c 	str.w	r2, [sl, #-12]!
    acb6:	4604      	mov	r4, r0
	for (int ii = 0; ii < num_events; ii++) {
    acb8:	2700      	movs	r7, #0
	int last_registered = -1, rc;
    acba:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
	for (int ii = 0; ii < num_events; ii++) {
    acbe:	9b01      	ldr	r3, [sp, #4]
    acc0:	429f      	cmp	r7, r3
    acc2:	db15      	blt.n	acf0 <k_poll+0x6c>
	__asm__ volatile(
    acc4:	f04f 0320 	mov.w	r3, #32
    acc8:	f3ef 8711 	mrs	r7, BASEPRI
    accc:	f383 8811 	msr	BASEPRI, r3
	return _is_thread_polling(_current);
    acd0:	68aa      	ldr	r2, [r5, #8]
    acd2:	7a53      	ldrb	r3, [r2, #9]
	if (!is_polling()) {
    acd4:	f013 0420 	ands.w	r4, r3, #32
    acd8:	d144      	bne.n	ad64 <k_poll+0xe0>
		clear_event_registrations(events, last_registered, key);
    acda:	463a      	mov	r2, r7
    acdc:	4631      	mov	r1, r6
    acde:	4640      	mov	r0, r8
    ace0:	f7ff ff09 	bl	aaf6 <clear_event_registrations>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    ace4:	f387 8811 	msr	BASEPRI, r7
}
    ace8:	4620      	mov	r0, r4
    acea:	b007      	add	sp, #28
    acec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
    acf0:	f04f 0220 	mov.w	r2, #32
    acf4:	f3ef 8b11 	mrs	fp, BASEPRI
    acf8:	f382 8811 	msr	BASEPRI, r2
	switch (event->type) {
    acfc:	7b61      	ldrb	r1, [r4, #13]
    acfe:	f001 020f 	and.w	r2, r1, #15
    ad02:	2a02      	cmp	r2, #2
    ad04:	d003      	beq.n	ad0e <k_poll+0x8a>
    ad06:	2a04      	cmp	r2, #4
    ad08:	d004      	beq.n	ad14 <k_poll+0x90>
    ad0a:	2a01      	cmp	r2, #1
    ad0c:	d106      	bne.n	ad1c <k_poll+0x98>
		if (event->signal->signaled) {
    ad0e:	6920      	ldr	r0, [r4, #16]
    ad10:	6880      	ldr	r0, [r0, #8]
    ad12:	e001      	b.n	ad18 <k_poll+0x94>
		if (!k_queue_is_empty(event->queue)) {
    ad14:	6920      	ldr	r0, [r4, #16]
    ad16:	6800      	ldr	r0, [r0, #0]
		if (event->signal->signaled) {
    ad18:	2800      	cmp	r0, #0
    ad1a:	d148      	bne.n	adae <k_poll+0x12a>
		} else if (timeout != K_NO_WAIT && is_polling()) {
    ad1c:	f1b9 0f00 	cmp.w	r9, #0
    ad20:	d016      	beq.n	ad50 <k_poll+0xcc>
    ad22:	68a9      	ldr	r1, [r5, #8]
    ad24:	7a49      	ldrb	r1, [r1, #9]
    ad26:	068b      	lsls	r3, r1, #26
    ad28:	d512      	bpl.n	ad50 <k_poll+0xcc>
	switch (event->type) {
    ad2a:	2a02      	cmp	r2, #2
    ad2c:	d007      	beq.n	ad3e <k_poll+0xba>
    ad2e:	2a04      	cmp	r2, #4
    ad30:	d013      	beq.n	ad5a <k_poll+0xd6>
    ad32:	2a01      	cmp	r2, #1
    ad34:	d109      	bne.n	ad4a <k_poll+0xc6>
		add_event(&event->signal->poll_events, event, poller);
    ad36:	4652      	mov	r2, sl
    ad38:	4621      	mov	r1, r4
    ad3a:	6920      	ldr	r0, [r4, #16]
    ad3c:	e003      	b.n	ad46 <k_poll+0xc2>
		add_event(&event->sem->poll_events, event, poller);
    ad3e:	6920      	ldr	r0, [r4, #16]
    ad40:	4652      	mov	r2, sl
    ad42:	4621      	mov	r1, r4
    ad44:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
    ad46:	f7ff ff5d 	bl	ac04 <add_event>
	event->poller = poller;
    ad4a:	f8c4 a008 	str.w	sl, [r4, #8]
				++last_registered;
    ad4e:	3601      	adds	r6, #1
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    ad50:	f38b 8811 	msr	BASEPRI, fp
	for (int ii = 0; ii < num_events; ii++) {
    ad54:	3701      	adds	r7, #1
    ad56:	3414      	adds	r4, #20
    ad58:	e7b1      	b.n	acbe <k_poll+0x3a>
		add_event(&event->queue->poll_events, event, poller);
    ad5a:	6920      	ldr	r0, [r4, #16]
    ad5c:	4652      	mov	r2, sl
    ad5e:	4621      	mov	r1, r4
    ad60:	3008      	adds	r0, #8
    ad62:	e7f0      	b.n	ad46 <k_poll+0xc2>
	thread->base.thread_state &= ~states;
    ad64:	f023 0320 	bic.w	r3, r3, #32
    ad68:	7253      	strb	r3, [r2, #9]
	if (timeout == K_NO_WAIT) {
    ad6a:	f1b9 0f00 	cmp.w	r9, #0
    ad6e:	d104      	bne.n	ad7a <k_poll+0xf6>
    ad70:	f387 8811 	msr	BASEPRI, r7
		return -EAGAIN;
    ad74:	f06f 040a 	mvn.w	r4, #10
    ad78:	e7b6      	b.n	ace8 <k_poll+0x64>
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
    ad7a:	a804      	add	r0, sp, #16
	_pend_current_thread(&wait_q, timeout);
    ad7c:	4649      	mov	r1, r9
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
    ad7e:	9004      	str	r0, [sp, #16]
    ad80:	9005      	str	r0, [sp, #20]
	_pend_current_thread(&wait_q, timeout);
    ad82:	f7ff fa09 	bl	a198 <_pend_current_thread>
	_update_time_slice_before_swap();
    ad86:	f7ff fac9 	bl	a31c <_update_time_slice_before_swap>
	return __swap(key);
    ad8a:	4638      	mov	r0, r7
    ad8c:	f7f5 fe12 	bl	9b4 <__swap>
    ad90:	4604      	mov	r4, r0
	__asm__ volatile(
    ad92:	f04f 0320 	mov.w	r3, #32
    ad96:	f3ef 8511 	mrs	r5, BASEPRI
    ad9a:	f383 8811 	msr	BASEPRI, r3
	clear_event_registrations(events, last_registered, key);
    ad9e:	462a      	mov	r2, r5
    ada0:	4631      	mov	r1, r6
    ada2:	4640      	mov	r0, r8
    ada4:	f7ff fea7 	bl	aaf6 <clear_event_registrations>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    ada8:	f385 8811 	msr	BASEPRI, r5
	return swap_rc;
    adac:	e79c      	b.n	ace8 <k_poll+0x64>
	event->state |= state;
    adae:	ea42 1211 	orr.w	r2, r2, r1, lsr #4
    adb2:	f362 1107 	bfi	r1, r2, #4, #4
	event->poller = NULL;
    adb6:	2300      	movs	r3, #0
    adb8:	60a3      	str	r3, [r4, #8]
	event->state |= state;
    adba:	7361      	strb	r1, [r4, #13]
			clear_polling_state(_current);
    adbc:	68a9      	ldr	r1, [r5, #8]
    adbe:	7a4a      	ldrb	r2, [r1, #9]
    adc0:	f022 0220 	bic.w	r2, r2, #32
    adc4:	724a      	strb	r2, [r1, #9]
    adc6:	e7c3      	b.n	ad50 <k_poll+0xcc>
    adc8:	200017e8 	.word	0x200017e8

0000adcc <_handle_obj_poll_events>:
}

/* returns 1 if a reschedule must take place, 0 otherwise */
int _handle_obj_poll_events(sys_dlist_t *events, u32_t state)
{
    adcc:	b513      	push	{r0, r1, r4, lr}
	return list->head == list;
    adce:	6804      	ldr	r4, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node;

	if (sys_dlist_is_empty(list)) {
    add0:	42a0      	cmp	r0, r4
    add2:	d102      	bne.n	adda <_handle_obj_poll_events+0xe>
	struct k_poll_event *poll_event;
	int must_reschedule;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (!poll_event) {
		return 0;
    add4:	2000      	movs	r0, #0
	}

	(void) signal_poll_event(poll_event, state, &must_reschedule);
	return must_reschedule;
}
    add6:	b002      	add	sp, #8
    add8:	bd10      	pop	{r4, pc}
		return NULL;
	}

	node = list->head;
	sys_dlist_remove(node);
    adda:	4620      	mov	r0, r4
    addc:	f7ff fe85 	bl	aaea <sys_dlist_remove>
	if (!poll_event) {
    ade0:	2c00      	cmp	r4, #0
    ade2:	d0f7      	beq.n	add4 <_handle_obj_poll_events+0x8>
	(void) signal_poll_event(poll_event, state, &must_reschedule);
    ade4:	aa01      	add	r2, sp, #4
    ade6:	4620      	mov	r0, r4
    ade8:	f7ff fea6 	bl	ab38 <signal_poll_event>
	return must_reschedule;
    adec:	9801      	ldr	r0, [sp, #4]
    adee:	e7f2      	b.n	add6 <_handle_obj_poll_events+0xa>

0000adf0 <_OffsetAbsSyms>:

#ifdef CONFIG_FLOAT
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread) -
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
    adf0:	4770      	bx	lr
