
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:
};
#endif

/* Linker needs this */
GEN_ABS_SYM_BEGIN(isr_tables_syms)
GEN_ABSOLUTE_SYM(__ISR_LIST_SIZEOF, sizeof(struct _isr_list));
       0:	20008f28 	.word	0x20008f28
       4:	00001e65 	.word	0x00001e65
       8:	00001ec1 	.word	0x00001ec1
       c:	00001cfd 	.word	0x00001cfd
      10:	00001cfd 	.word	0x00001cfd
      14:	00001cfd 	.word	0x00001cfd
      18:	00001cfd 	.word	0x00001cfd
      1c:	00001cfd 	.word	0x00001cfd
      20:	00001cfd 	.word	0x00001cfd
      24:	00001cfd 	.word	0x00001cfd
      28:	00001cfd 	.word	0x00001cfd
      2c:	000018e9 	.word	0x000018e9
      30:	00001cfd 	.word	0x00001cfd
      34:	00001cfd 	.word	0x00001cfd
      38:	000018a5 	.word	0x000018a5
      3c:	00001cfd 	.word	0x00001cfd

00000040 <_irq_vector_table>:
      40:	00001e29 00016cdb 00001e29 00001e29     )....l..)...)...
      50:	00001e29 00001e29 00001e29 00001e29     )...)...)...)...
      60:	00001e29 00001e29 00001e29 00001e29     )...)...)...)...
      70:	00001e29 00001e29 00001e29 00001e29     )...)...)...)...
      80:	00001e29 00001e29 00001e29 00001e29     )...)...)...)...
      90:	00001e29 00001e29 00001e29 00001e29     )...)...)...)...
      a0:	00001e29 00001e29 00001e29 00001e29     )...)...)...)...
      b0:	00001e29 00001e29 00001e29 00001e29     )...)...)...)...
      c0:	00001e29 00001e29 00001e29 00001e29     )...)...)...)...
      d0:	00001e29 00001e29 00001e29 00001e29     )...)...)...)...
      e0:	00001e29 00001e29 00001e29 00001e29     )...)...)...)...
      f0:	00001e29 00001e29                       )...)...

000000f8 <_sw_isr_table>:
      f8:	00000000 00002aad 00000000 00001c6d     .....*......m...
     108:	00000000 00001c6d 00000000 00001c6d     ....m.......m...
     118:	00000000 00001c6d 00000000 00001c6d     ....m.......m...
     128:	2000a8e4 00002c91 00000000 00001c6d     ... .,......m...
     138:	00000000 00001c6d 00000000 00001c6d     ....m.......m...
     148:	00000000 00001c6d 00000000 00016ca1     ....m........l..
     158:	00000000 00001c6d 2000a8c0 00003059     ....m...... Y0..
     168:	00000000 00001c6d 00000000 00001c6d     ....m.......m...
     178:	00000000 00001c6d 00000000 00003199     ....m........1..
     188:	00000000 00001c6d 00000000 00001c6d     ....m.......m...
     198:	00000000 00001c6d 00000000 00001c6d     ....m.......m...
     1a8:	00000000 00001c6d 00000000 00001c6d     ....m.......m...
     1b8:	00000000 00016cd5 00000000 00001c6d     .....l......m...
     1c8:	00000000 00001c6d 00000000 00001c6d     ....m.......m...
     1d8:	00000000 00001c6d 00000000 00001c6d     ....m.......m...
     1e8:	00000000 00001c6d 00000000 00001c6d     ....m.......m...
     1f8:	00000000 00001c6d 00000000 00001c6d     ....m.......m...
     208:	00000000 00001c6d 00000000 00001c6d     ....m.......m...
     218:	00000000 00001c6d 00000000 00001c6d     ....m.......m...
     228:	00000000 00001c6d 00000000 00001c6d     ....m.......m...
     238:	00000000 00001c6d 00000000 00001c6d     ....m.......m...
     248:	00000000 00001c6d 00000000 00001c6d     ....m.......m...
     258:	00000000 00001c6d 00000000 00001c6d     ....m.......m...

00000268 <__aeabi_llsr>:
     268:	40d0      	lsrs	r0, r2
     26a:	1c0b      	adds	r3, r1, #0
     26c:	40d1      	lsrs	r1, r2
     26e:	469c      	mov	ip, r3
     270:	3a20      	subs	r2, #32
     272:	40d3      	lsrs	r3, r2
     274:	4318      	orrs	r0, r3
     276:	4252      	negs	r2, r2
     278:	4663      	mov	r3, ip
     27a:	4093      	lsls	r3, r2
     27c:	4318      	orrs	r0, r3
     27e:	4770      	bx	lr

00000280 <__aeabi_llsl>:
     280:	4091      	lsls	r1, r2
     282:	1c03      	adds	r3, r0, #0
     284:	4090      	lsls	r0, r2
     286:	469c      	mov	ip, r3
     288:	3a20      	subs	r2, #32
     28a:	4093      	lsls	r3, r2
     28c:	4319      	orrs	r1, r3
     28e:	4252      	negs	r2, r2
     290:	4663      	mov	r3, ip
     292:	40d3      	lsrs	r3, r2
     294:	4319      	orrs	r1, r3
     296:	4770      	bx	lr

00000298 <__aeabi_uldivmod>:
     298:	b953      	cbnz	r3, 2b0 <__aeabi_uldivmod+0x18>
     29a:	b94a      	cbnz	r2, 2b0 <__aeabi_uldivmod+0x18>
     29c:	2900      	cmp	r1, #0
     29e:	bf08      	it	eq
     2a0:	2800      	cmpeq	r0, #0
     2a2:	bf1c      	itt	ne
     2a4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     2a8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     2ac:	f000 b98e 	b.w	5cc <__aeabi_idiv0>
     2b0:	f1ad 0c08 	sub.w	ip, sp, #8
     2b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     2b8:	f000 f81a 	bl	2f0 <__udivmoddi4>
     2bc:	f8dd e004 	ldr.w	lr, [sp, #4]
     2c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     2c4:	b004      	add	sp, #16
     2c6:	4770      	bx	lr

000002c8 <__popcountsi2>:
     2c8:	0843      	lsrs	r3, r0, #1
     2ca:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
     2ce:	1ac0      	subs	r0, r0, r3
     2d0:	0883      	lsrs	r3, r0, #2
     2d2:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
     2d6:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
     2da:	4418      	add	r0, r3
     2dc:	eb00 1010 	add.w	r0, r0, r0, lsr #4
     2e0:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
     2e4:	eb00 2000 	add.w	r0, r0, r0, lsl #8
     2e8:	eb00 4000 	add.w	r0, r0, r0, lsl #16
     2ec:	0e00      	lsrs	r0, r0, #24
     2ee:	4770      	bx	lr

000002f0 <__udivmoddi4>:
     2f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     2f4:	468c      	mov	ip, r1
     2f6:	460d      	mov	r5, r1
     2f8:	4604      	mov	r4, r0
     2fa:	9e08      	ldr	r6, [sp, #32]
     2fc:	2b00      	cmp	r3, #0
     2fe:	d151      	bne.n	3a4 <__udivmoddi4+0xb4>
     300:	428a      	cmp	r2, r1
     302:	4617      	mov	r7, r2
     304:	d96d      	bls.n	3e2 <__udivmoddi4+0xf2>
     306:	fab2 fe82 	clz	lr, r2
     30a:	f1be 0f00 	cmp.w	lr, #0
     30e:	d00b      	beq.n	328 <__udivmoddi4+0x38>
     310:	f1ce 0c20 	rsb	ip, lr, #32
     314:	fa01 f50e 	lsl.w	r5, r1, lr
     318:	fa20 fc0c 	lsr.w	ip, r0, ip
     31c:	fa02 f70e 	lsl.w	r7, r2, lr
     320:	ea4c 0c05 	orr.w	ip, ip, r5
     324:	fa00 f40e 	lsl.w	r4, r0, lr
     328:	ea4f 4a17 	mov.w	sl, r7, lsr #16
     32c:	0c25      	lsrs	r5, r4, #16
     32e:	fbbc f8fa 	udiv	r8, ip, sl
     332:	fa1f f987 	uxth.w	r9, r7
     336:	fb0a cc18 	mls	ip, sl, r8, ip
     33a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     33e:	fb08 f309 	mul.w	r3, r8, r9
     342:	42ab      	cmp	r3, r5
     344:	d90a      	bls.n	35c <__udivmoddi4+0x6c>
     346:	19ed      	adds	r5, r5, r7
     348:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
     34c:	f080 8123 	bcs.w	596 <CONFIG_NET_TX_STACK_SIZE+0xe6>
     350:	42ab      	cmp	r3, r5
     352:	f240 8120 	bls.w	596 <CONFIG_NET_TX_STACK_SIZE+0xe6>
     356:	f1a8 0802 	sub.w	r8, r8, #2
     35a:	443d      	add	r5, r7
     35c:	1aed      	subs	r5, r5, r3
     35e:	b2a4      	uxth	r4, r4
     360:	fbb5 f0fa 	udiv	r0, r5, sl
     364:	fb0a 5510 	mls	r5, sl, r0, r5
     368:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     36c:	fb00 f909 	mul.w	r9, r0, r9
     370:	45a1      	cmp	r9, r4
     372:	d909      	bls.n	388 <__udivmoddi4+0x98>
     374:	19e4      	adds	r4, r4, r7
     376:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     37a:	f080 810a 	bcs.w	592 <CONFIG_NET_TX_STACK_SIZE+0xe2>
     37e:	45a1      	cmp	r9, r4
     380:	f240 8107 	bls.w	592 <CONFIG_NET_TX_STACK_SIZE+0xe2>
     384:	3802      	subs	r0, #2
     386:	443c      	add	r4, r7
     388:	eba4 0409 	sub.w	r4, r4, r9
     38c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     390:	2100      	movs	r1, #0
     392:	2e00      	cmp	r6, #0
     394:	d061      	beq.n	45a <CONFIG_BT_RX_STACK_SIZE+0x5a>
     396:	fa24 f40e 	lsr.w	r4, r4, lr
     39a:	2300      	movs	r3, #0
     39c:	6034      	str	r4, [r6, #0]
     39e:	6073      	str	r3, [r6, #4]
     3a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3a4:	428b      	cmp	r3, r1
     3a6:	d907      	bls.n	3b8 <__udivmoddi4+0xc8>
     3a8:	2e00      	cmp	r6, #0
     3aa:	d054      	beq.n	456 <CONFIG_BT_RX_STACK_SIZE+0x56>
     3ac:	2100      	movs	r1, #0
     3ae:	e886 0021 	stmia.w	r6, {r0, r5}
     3b2:	4608      	mov	r0, r1
     3b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3b8:	fab3 f183 	clz	r1, r3
     3bc:	2900      	cmp	r1, #0
     3be:	f040 808e 	bne.w	4de <CONFIG_NET_TX_STACK_SIZE+0x2e>
     3c2:	42ab      	cmp	r3, r5
     3c4:	d302      	bcc.n	3cc <__udivmoddi4+0xdc>
     3c6:	4282      	cmp	r2, r0
     3c8:	f200 80fa 	bhi.w	5c0 <CONFIG_NET_TX_STACK_SIZE+0x110>
     3cc:	1a84      	subs	r4, r0, r2
     3ce:	eb65 0503 	sbc.w	r5, r5, r3
     3d2:	2001      	movs	r0, #1
     3d4:	46ac      	mov	ip, r5
     3d6:	2e00      	cmp	r6, #0
     3d8:	d03f      	beq.n	45a <CONFIG_BT_RX_STACK_SIZE+0x5a>
     3da:	e886 1010 	stmia.w	r6, {r4, ip}
     3de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3e2:	b912      	cbnz	r2, 3ea <CONFIG_NET_TCP_ACK_TIMEOUT+0x2>
     3e4:	2701      	movs	r7, #1
     3e6:	fbb7 f7f2 	udiv	r7, r7, r2
     3ea:	fab7 fe87 	clz	lr, r7
     3ee:	f1be 0f00 	cmp.w	lr, #0
     3f2:	d134      	bne.n	45e <CONFIG_BT_RX_STACK_SIZE+0x5e>
     3f4:	1beb      	subs	r3, r5, r7
     3f6:	0c3a      	lsrs	r2, r7, #16
     3f8:	fa1f fc87 	uxth.w	ip, r7
     3fc:	2101      	movs	r1, #1
     3fe:	fbb3 f8f2 	udiv	r8, r3, r2
     402:	0c25      	lsrs	r5, r4, #16
     404:	fb02 3318 	mls	r3, r2, r8, r3
     408:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     40c:	fb0c f308 	mul.w	r3, ip, r8
     410:	42ab      	cmp	r3, r5
     412:	d907      	bls.n	424 <CONFIG_BT_RX_STACK_SIZE+0x24>
     414:	19ed      	adds	r5, r5, r7
     416:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     41a:	d202      	bcs.n	422 <CONFIG_BT_RX_STACK_SIZE+0x22>
     41c:	42ab      	cmp	r3, r5
     41e:	f200 80d1 	bhi.w	5c4 <CONFIG_NET_TX_STACK_SIZE+0x114>
     422:	4680      	mov	r8, r0
     424:	1aed      	subs	r5, r5, r3
     426:	b2a3      	uxth	r3, r4
     428:	fbb5 f0f2 	udiv	r0, r5, r2
     42c:	fb02 5510 	mls	r5, r2, r0, r5
     430:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     434:	fb0c fc00 	mul.w	ip, ip, r0
     438:	45a4      	cmp	ip, r4
     43a:	d907      	bls.n	44c <CONFIG_BT_RX_STACK_SIZE+0x4c>
     43c:	19e4      	adds	r4, r4, r7
     43e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     442:	d202      	bcs.n	44a <CONFIG_BT_RX_STACK_SIZE+0x4a>
     444:	45a4      	cmp	ip, r4
     446:	f200 80b8 	bhi.w	5ba <CONFIG_NET_TX_STACK_SIZE+0x10a>
     44a:	4618      	mov	r0, r3
     44c:	eba4 040c 	sub.w	r4, r4, ip
     450:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     454:	e79d      	b.n	392 <__udivmoddi4+0xa2>
     456:	4631      	mov	r1, r6
     458:	4630      	mov	r0, r6
     45a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     45e:	f1ce 0420 	rsb	r4, lr, #32
     462:	fa05 f30e 	lsl.w	r3, r5, lr
     466:	fa07 f70e 	lsl.w	r7, r7, lr
     46a:	fa20 f804 	lsr.w	r8, r0, r4
     46e:	0c3a      	lsrs	r2, r7, #16
     470:	fa25 f404 	lsr.w	r4, r5, r4
     474:	ea48 0803 	orr.w	r8, r8, r3
     478:	fbb4 f1f2 	udiv	r1, r4, r2
     47c:	ea4f 4518 	mov.w	r5, r8, lsr #16
     480:	fb02 4411 	mls	r4, r2, r1, r4
     484:	fa1f fc87 	uxth.w	ip, r7
     488:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
     48c:	fb01 f30c 	mul.w	r3, r1, ip
     490:	42ab      	cmp	r3, r5
     492:	fa00 f40e 	lsl.w	r4, r0, lr
     496:	d909      	bls.n	4ac <CONFIG_BT_RX_STACK_SIZE+0xac>
     498:	19ed      	adds	r5, r5, r7
     49a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
     49e:	f080 808a 	bcs.w	5b6 <CONFIG_NET_TX_STACK_SIZE+0x106>
     4a2:	42ab      	cmp	r3, r5
     4a4:	f240 8087 	bls.w	5b6 <CONFIG_NET_TX_STACK_SIZE+0x106>
     4a8:	3902      	subs	r1, #2
     4aa:	443d      	add	r5, r7
     4ac:	1aeb      	subs	r3, r5, r3
     4ae:	fa1f f588 	uxth.w	r5, r8
     4b2:	fbb3 f0f2 	udiv	r0, r3, r2
     4b6:	fb02 3310 	mls	r3, r2, r0, r3
     4ba:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     4be:	fb00 f30c 	mul.w	r3, r0, ip
     4c2:	42ab      	cmp	r3, r5
     4c4:	d907      	bls.n	4d6 <CONFIG_NET_TX_STACK_SIZE+0x26>
     4c6:	19ed      	adds	r5, r5, r7
     4c8:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
     4cc:	d26f      	bcs.n	5ae <CONFIG_NET_TX_STACK_SIZE+0xfe>
     4ce:	42ab      	cmp	r3, r5
     4d0:	d96d      	bls.n	5ae <CONFIG_NET_TX_STACK_SIZE+0xfe>
     4d2:	3802      	subs	r0, #2
     4d4:	443d      	add	r5, r7
     4d6:	1aeb      	subs	r3, r5, r3
     4d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     4dc:	e78f      	b.n	3fe <CONFIG_NET_TCP_ACK_TIMEOUT+0x16>
     4de:	f1c1 0720 	rsb	r7, r1, #32
     4e2:	fa22 f807 	lsr.w	r8, r2, r7
     4e6:	408b      	lsls	r3, r1
     4e8:	fa05 f401 	lsl.w	r4, r5, r1
     4ec:	ea48 0303 	orr.w	r3, r8, r3
     4f0:	fa20 fe07 	lsr.w	lr, r0, r7
     4f4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
     4f8:	40fd      	lsrs	r5, r7
     4fa:	ea4e 0e04 	orr.w	lr, lr, r4
     4fe:	fbb5 f9fc 	udiv	r9, r5, ip
     502:	ea4f 441e 	mov.w	r4, lr, lsr #16
     506:	fb0c 5519 	mls	r5, ip, r9, r5
     50a:	fa1f f883 	uxth.w	r8, r3
     50e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
     512:	fb09 f408 	mul.w	r4, r9, r8
     516:	42ac      	cmp	r4, r5
     518:	fa02 f201 	lsl.w	r2, r2, r1
     51c:	fa00 fa01 	lsl.w	sl, r0, r1
     520:	d908      	bls.n	534 <CONFIG_NET_TX_STACK_SIZE+0x84>
     522:	18ed      	adds	r5, r5, r3
     524:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     528:	d243      	bcs.n	5b2 <CONFIG_NET_TX_STACK_SIZE+0x102>
     52a:	42ac      	cmp	r4, r5
     52c:	d941      	bls.n	5b2 <CONFIG_NET_TX_STACK_SIZE+0x102>
     52e:	f1a9 0902 	sub.w	r9, r9, #2
     532:	441d      	add	r5, r3
     534:	1b2d      	subs	r5, r5, r4
     536:	fa1f fe8e 	uxth.w	lr, lr
     53a:	fbb5 f0fc 	udiv	r0, r5, ip
     53e:	fb0c 5510 	mls	r5, ip, r0, r5
     542:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
     546:	fb00 f808 	mul.w	r8, r0, r8
     54a:	45a0      	cmp	r8, r4
     54c:	d907      	bls.n	55e <CONFIG_NET_TX_STACK_SIZE+0xae>
     54e:	18e4      	adds	r4, r4, r3
     550:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
     554:	d229      	bcs.n	5aa <CONFIG_NET_TX_STACK_SIZE+0xfa>
     556:	45a0      	cmp	r8, r4
     558:	d927      	bls.n	5aa <CONFIG_NET_TX_STACK_SIZE+0xfa>
     55a:	3802      	subs	r0, #2
     55c:	441c      	add	r4, r3
     55e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     562:	eba4 0408 	sub.w	r4, r4, r8
     566:	fba0 8902 	umull	r8, r9, r0, r2
     56a:	454c      	cmp	r4, r9
     56c:	46c6      	mov	lr, r8
     56e:	464d      	mov	r5, r9
     570:	d315      	bcc.n	59e <CONFIG_NET_TX_STACK_SIZE+0xee>
     572:	d012      	beq.n	59a <CONFIG_NET_TX_STACK_SIZE+0xea>
     574:	b156      	cbz	r6, 58c <CONFIG_NET_TX_STACK_SIZE+0xdc>
     576:	ebba 030e 	subs.w	r3, sl, lr
     57a:	eb64 0405 	sbc.w	r4, r4, r5
     57e:	fa04 f707 	lsl.w	r7, r4, r7
     582:	40cb      	lsrs	r3, r1
     584:	431f      	orrs	r7, r3
     586:	40cc      	lsrs	r4, r1
     588:	6037      	str	r7, [r6, #0]
     58a:	6074      	str	r4, [r6, #4]
     58c:	2100      	movs	r1, #0
     58e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     592:	4618      	mov	r0, r3
     594:	e6f8      	b.n	388 <__udivmoddi4+0x98>
     596:	4690      	mov	r8, r2
     598:	e6e0      	b.n	35c <__udivmoddi4+0x6c>
     59a:	45c2      	cmp	sl, r8
     59c:	d2ea      	bcs.n	574 <CONFIG_NET_TX_STACK_SIZE+0xc4>
     59e:	ebb8 0e02 	subs.w	lr, r8, r2
     5a2:	eb69 0503 	sbc.w	r5, r9, r3
     5a6:	3801      	subs	r0, #1
     5a8:	e7e4      	b.n	574 <CONFIG_NET_TX_STACK_SIZE+0xc4>
     5aa:	4628      	mov	r0, r5
     5ac:	e7d7      	b.n	55e <CONFIG_NET_TX_STACK_SIZE+0xae>
     5ae:	4640      	mov	r0, r8
     5b0:	e791      	b.n	4d6 <CONFIG_NET_TX_STACK_SIZE+0x26>
     5b2:	4681      	mov	r9, r0
     5b4:	e7be      	b.n	534 <CONFIG_NET_TX_STACK_SIZE+0x84>
     5b6:	4601      	mov	r1, r0
     5b8:	e778      	b.n	4ac <CONFIG_BT_RX_STACK_SIZE+0xac>
     5ba:	3802      	subs	r0, #2
     5bc:	443c      	add	r4, r7
     5be:	e745      	b.n	44c <CONFIG_BT_RX_STACK_SIZE+0x4c>
     5c0:	4608      	mov	r0, r1
     5c2:	e708      	b.n	3d6 <__udivmoddi4+0xe6>
     5c4:	f1a8 0802 	sub.w	r8, r8, #2
     5c8:	443d      	add	r5, r7
     5ca:	e72b      	b.n	424 <CONFIG_BT_RX_STACK_SIZE+0x24>

000005cc <__aeabi_idiv0>:
     5cc:	4770      	bx	lr
     5ce:	bf00      	nop

000005d0 <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
     5d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     5d4:	4686      	mov	lr, r0
     5d6:	460f      	mov	r7, r1
	register const char *s = nptr;
     5d8:	4605      	mov	r5, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
     5da:	462c      	mov	r4, r5
     5dc:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (((unsigned)c|32)-'a') < 26;
}

static inline int isspace(int c)
{
	return c == ' ' || ((unsigned)c-'\t') < 5;
     5e0:	2b20      	cmp	r3, #32
     5e2:	d003      	beq.n	5ec <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x10>
     5e4:	f1a3 0109 	sub.w	r1, r3, #9
     5e8:	2904      	cmp	r1, #4
     5ea:	d857      	bhi.n	69c <CONFIG_BT_CTLR_COMPANY_ID+0xab>
{
     5ec:	4625      	mov	r5, r4
     5ee:	e7f4      	b.n	5da <strtol+0xa>
	} while (isspace(c));
	if (c == '-') {
		neg = 1;
		c = *s++;
	} else if (c == '+')
     5f0:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
     5f2:	bf04      	itt	eq
     5f4:	1cac      	addeq	r4, r5, #2
     5f6:	786b      	ldrbeq	r3, [r5, #1]
	register int neg = 0, any, cutlim;
     5f8:	2100      	movs	r1, #0
     5fa:	e054      	b.n	6a6 <CONFIG_BT_CTLR_COMPANY_ID+0xb5>
	if ((base == 0 || base == 16) &&
     5fc:	2b30      	cmp	r3, #48	; 0x30
     5fe:	d127      	bne.n	650 <CONFIG_BT_CTLR_COMPANY_ID+0x5f>
	    c == '0' && (*s == 'x' || *s == 'X')) {
     600:	7823      	ldrb	r3, [r4, #0]
     602:	f003 03df 	and.w	r3, r3, #223	; 0xdf
     606:	2b58      	cmp	r3, #88	; 0x58
     608:	d154      	bne.n	6b4 <CONFIG_BT_CTLR_COMPANY_ID+0xc3>
		c = s[1];
     60a:	7863      	ldrb	r3, [r4, #1]
		s += 2;
		base = 16;
     60c:	2210      	movs	r2, #16
		s += 2;
     60e:	3402      	adds	r4, #2
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
     610:	2900      	cmp	r1, #0
     612:	bf0c      	ite	eq
     614:	f06f 4800 	mvneq.w	r8, #2147483648	; 0x80000000
     618:	f04f 4800 	movne.w	r8, #2147483648	; 0x80000000
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
     61c:	2600      	movs	r6, #0
	cutlim = cutoff % (unsigned long)base;
     61e:	fbb8 fcf2 	udiv	ip, r8, r2
	for (acc = 0, any = 0;; c = *s++) {
     622:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
     624:	fb02 891c 	mls	r9, r2, ip, r8
	return ((((unsigned)c) >= ' ') && (((unsigned)c) <= '~'));
}

static inline int isdigit(int a)
{
	return (((unsigned)(a)-'0') < 10);
     628:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c))
     62c:	2d09      	cmp	r5, #9
     62e:	d811      	bhi.n	654 <CONFIG_BT_CTLR_COMPANY_ID+0x63>
			c -= '0';
     630:	462b      	mov	r3, r5
		else if (isalpha(c))
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		else
			break;
		if (c >= base)
     632:	429a      	cmp	r2, r3
     634:	dd1e      	ble.n	674 <CONFIG_BT_CTLR_COMPANY_ID+0x83>
			break;
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
     636:	1c75      	adds	r5, r6, #1
     638:	d007      	beq.n	64a <CONFIG_BT_CTLR_COMPANY_ID+0x59>
     63a:	4560      	cmp	r0, ip
     63c:	d817      	bhi.n	66e <CONFIG_BT_CTLR_COMPANY_ID+0x7d>
     63e:	d101      	bne.n	644 <CONFIG_BT_CTLR_COMPANY_ID+0x53>
     640:	454b      	cmp	r3, r9
     642:	dc14      	bgt.n	66e <CONFIG_BT_CTLR_COMPANY_ID+0x7d>
			any = -1;
		else {
			any = 1;
			acc *= base;
			acc += c;
     644:	fb02 3000 	mla	r0, r2, r0, r3
			any = 1;
     648:	2601      	movs	r6, #1
	for (acc = 0, any = 0;; c = *s++) {
     64a:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c))
     64e:	e7eb      	b.n	628 <CONFIG_BT_CTLR_COMPANY_ID+0x37>
		base = c == '0' ? 8 : 10;
     650:	220a      	movs	r2, #10
     652:	e7dd      	b.n	610 <CONFIG_BT_CTLR_COMPANY_ID+0x1f>
	return (((unsigned)c|32)-'a') < 26;
     654:	f043 0520 	orr.w	r5, r3, #32
     658:	3d61      	subs	r5, #97	; 0x61
		else if (isalpha(c))
     65a:	2d19      	cmp	r5, #25
     65c:	d80a      	bhi.n	674 <CONFIG_BT_CTLR_COMPANY_ID+0x83>
	return ((unsigned)(a)-'A') < 26;
     65e:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
     662:	2d19      	cmp	r5, #25
     664:	bf8c      	ite	hi
     666:	2557      	movhi	r5, #87	; 0x57
     668:	2537      	movls	r5, #55	; 0x37
     66a:	1b5b      	subs	r3, r3, r5
     66c:	e7e1      	b.n	632 <CONFIG_BT_CTLR_COMPANY_ID+0x41>
			any = -1;
     66e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
     672:	e7ea      	b.n	64a <CONFIG_BT_CTLR_COMPANY_ID+0x59>
		}
	}
	if (any < 0) {
     674:	1c73      	adds	r3, r6, #1
     676:	d107      	bne.n	688 <CONFIG_BT_CTLR_COMPANY_ID+0x97>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
     678:	f020 fdb4 	bl	211e4 <__errno>
     67c:	2326      	movs	r3, #38	; 0x26
     67e:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
     680:	4640      	mov	r0, r8
	} else if (neg)
		acc = -acc;
	if (endptr != 0)
     682:	b92f      	cbnz	r7, 690 <CONFIG_BT_CTLR_COMPANY_ID+0x9f>
     684:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg)
     688:	b101      	cbz	r1, 68c <CONFIG_BT_CTLR_COMPANY_ID+0x9b>
		acc = -acc;
     68a:	4240      	negs	r0, r0
	if (endptr != 0)
     68c:	b1bf      	cbz	r7, 6be <CONFIG_BT_CTLR_COMPANY_ID+0xcd>
		*endptr = (char *)(any ? s - 1 : nptr);
     68e:	b10e      	cbz	r6, 694 <CONFIG_BT_CTLR_COMPANY_ID+0xa3>
     690:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
     694:	f8c7 e000 	str.w	lr, [r7]
	return acc;
     698:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (c == '-') {
     69c:	2b2d      	cmp	r3, #45	; 0x2d
     69e:	d1a7      	bne.n	5f0 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x14>
		c = *s++;
     6a0:	786b      	ldrb	r3, [r5, #1]
     6a2:	1cac      	adds	r4, r5, #2
		neg = 1;
     6a4:	2101      	movs	r1, #1
	if ((base == 0 || base == 16) &&
     6a6:	2a00      	cmp	r2, #0
     6a8:	d0a8      	beq.n	5fc <CONFIG_BT_CTLR_COMPANY_ID+0xb>
     6aa:	2a10      	cmp	r2, #16
     6ac:	d1b0      	bne.n	610 <CONFIG_BT_CTLR_COMPANY_ID+0x1f>
     6ae:	2b30      	cmp	r3, #48	; 0x30
     6b0:	d0a6      	beq.n	600 <CONFIG_BT_CTLR_COMPANY_ID+0xf>
     6b2:	e7ad      	b.n	610 <CONFIG_BT_CTLR_COMPANY_ID+0x1f>
	if (base == 0)
     6b4:	2330      	movs	r3, #48	; 0x30
     6b6:	2a00      	cmp	r2, #0
     6b8:	d1aa      	bne.n	610 <CONFIG_BT_CTLR_COMPANY_ID+0x1f>
		base = c == '0' ? 8 : 10;
     6ba:	2208      	movs	r2, #8
     6bc:	e7a8      	b.n	610 <CONFIG_BT_CTLR_COMPANY_ID+0x1f>
}
     6be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000006c2 <strcpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
     6c2:	3901      	subs	r1, #1
	char *dest = d;

	while (*s != '\0') {
     6c4:	4603      	mov	r3, r0
     6c6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
     6ca:	b90a      	cbnz	r2, 6d0 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
     6cc:	701a      	strb	r2, [r3, #0]

	return dest;
}
     6ce:	4770      	bx	lr
		*d = *s;
     6d0:	f803 2b01 	strb.w	r2, [r3], #1
     6d4:	e7f7      	b.n	6c6 <strcpy+0x4>

000006d6 <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
     6d6:	b2c9      	uxtb	r1, r1
     6d8:	4603      	mov	r3, r0

	while ((*s != tmp) && (*s != '\0'))
     6da:	f810 2b01 	ldrb.w	r2, [r0], #1
     6de:	4291      	cmp	r1, r2
     6e0:	d006      	beq.n	6f0 <strchr+0x1a>
     6e2:	2a00      	cmp	r2, #0
     6e4:	d1f8      	bne.n	6d8 <strchr+0x2>
		s++;

	return (*s == tmp) ? (char *) s : NULL;
     6e6:	2900      	cmp	r1, #0
     6e8:	bf0c      	ite	eq
     6ea:	4618      	moveq	r0, r3
     6ec:	2000      	movne	r0, #0
     6ee:	4770      	bx	lr
     6f0:	4618      	mov	r0, r3
}
     6f2:	4770      	bx	lr

000006f4 <strrchr>:
 *
 * @return pointer to last instance of found byte, or NULL if not found
 */

char *strrchr(const char *s, int c)
{
     6f4:	b510      	push	{r4, lr}
	char *match = NULL;
     6f6:	2300      	movs	r3, #0

	do {
		if (*s == (char)c) {
     6f8:	b2c9      	uxtb	r1, r1
     6fa:	4604      	mov	r4, r0
     6fc:	f810 2b01 	ldrb.w	r2, [r0], #1
     700:	428a      	cmp	r2, r1
     702:	bf08      	it	eq
     704:	4623      	moveq	r3, r4
			match = (char *)s;
		}
	} while (*s++);
     706:	2a00      	cmp	r2, #0
     708:	d1f7      	bne.n	6fa <strrchr+0x6>

	return match;
}
     70a:	4618      	mov	r0, r3
     70c:	bd10      	pop	{r4, pc}

0000070e <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
     70e:	4602      	mov	r2, r0
	size_t n = 0;

	while (*s != '\0') {
     710:	4603      	mov	r3, r0
     712:	1a98      	subs	r0, r3, r2
     714:	f813 1b01 	ldrb.w	r1, [r3], #1
     718:	2900      	cmp	r1, #0
     71a:	d1fa      	bne.n	712 <strlen+0x4>
		s++;
		n++;
	}

	return n;
}
     71c:	4770      	bx	lr

0000071e <strcmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
     71e:	3801      	subs	r0, #1
     720:	3901      	subs	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
     722:	f810 3f01 	ldrb.w	r3, [r0, #1]!
     726:	f811 2f01 	ldrb.w	r2, [r1, #1]!
     72a:	4293      	cmp	r3, r2
     72c:	d102      	bne.n	734 <strcmp+0x16>
     72e:	2b00      	cmp	r3, #0
     730:	d1f7      	bne.n	722 <strcmp+0x4>
     732:	461a      	mov	r2, r3
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
     734:	1a98      	subs	r0, r3, r2
     736:	4770      	bx	lr

00000738 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
     738:	b570      	push	{r4, r5, r6, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n)
     73a:	b182      	cbz	r2, 75e <memcmp+0x26>
		return 0;

	while ((--n > 0) && (*c1 == *c2)) {
     73c:	3a01      	subs	r2, #1
     73e:	460c      	mov	r4, r1
     740:	4603      	mov	r3, r0
     742:	d103      	bne.n	74c <memcmp+0x14>
		c1++;
		c2++;
	}

	return *c1 - *c2;
     744:	781a      	ldrb	r2, [r3, #0]
     746:	7820      	ldrb	r0, [r4, #0]
     748:	1a10      	subs	r0, r2, r0
     74a:	bd70      	pop	{r4, r5, r6, pc}
	while ((--n > 0) && (*c1 == *c2)) {
     74c:	781e      	ldrb	r6, [r3, #0]
     74e:	7825      	ldrb	r5, [r4, #0]
     750:	42ae      	cmp	r6, r5
     752:	f100 0001 	add.w	r0, r0, #1
     756:	f101 0101 	add.w	r1, r1, #1
     75a:	d0ef      	beq.n	73c <memcmp+0x4>
     75c:	e7f2      	b.n	744 <memcmp+0xc>
		return 0;
     75e:	4610      	mov	r0, r2
}
     760:	bd70      	pop	{r4, r5, r6, pc}

00000762 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (d - s) < n) {
     762:	1a43      	subs	r3, r0, r1
     764:	4293      	cmp	r3, r2
{
     766:	b510      	push	{r4, lr}
     768:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (d - s) < n) {
     76c:	d304      	bcc.n	778 <memmove+0x16>
     76e:	3901      	subs	r1, #1
     770:	4602      	mov	r2, r0
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
     772:	429a      	cmp	r2, r3
     774:	d108      	bne.n	788 <memmove+0x26>
			n--;
		}
	}

	return d;
}
     776:	bd10      	pop	{r4, pc}
     778:	440a      	add	r2, r1
			dest[n] = src[n];
     77a:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
     77e:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
     782:	428a      	cmp	r2, r1
     784:	d1f9      	bne.n	77a <memmove+0x18>
     786:	bd10      	pop	{r4, pc}
			*dest = *src;
     788:	f811 4f01 	ldrb.w	r4, [r1, #1]!
     78c:	f802 4b01 	strb.w	r4, [r2], #1
     790:	e7ef      	b.n	772 <memmove+0x10>

00000792 <memcpy>:
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
     792:	ea81 0300 	eor.w	r3, r1, r0
     796:	f013 0f03 	tst.w	r3, #3
{
     79a:	b570      	push	{r4, r5, r6, lr}
     79c:	4603      	mov	r3, r0
	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
     79e:	d00b      	beq.n	7b8 <memcpy+0x26>
     7a0:	3b01      	subs	r3, #1
     7a2:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
     7a4:	4291      	cmp	r1, r2
     7a6:	d11b      	bne.n	7e0 <memcpy+0x4e>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
     7a8:	bd70      	pop	{r4, r5, r6, pc}
			if (n == 0) {
     7aa:	2a00      	cmp	r2, #0
     7ac:	d0fc      	beq.n	7a8 <memcpy+0x16>
			*(d_byte++) = *(s_byte++);
     7ae:	f811 4b01 	ldrb.w	r4, [r1], #1
     7b2:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
     7b6:	3a01      	subs	r2, #1
		while (((unsigned int)d_byte) & 0x3) {
     7b8:	079c      	lsls	r4, r3, #30
     7ba:	d1f6      	bne.n	7aa <memcpy+0x18>
     7bc:	1f1e      	subs	r6, r3, #4
     7be:	460d      	mov	r5, r1
     7c0:	1b54      	subs	r4, r2, r5
     7c2:	440c      	add	r4, r1
		while (n >= sizeof(unsigned int)) {
     7c4:	2c03      	cmp	r4, #3
     7c6:	d806      	bhi.n	7d6 <memcpy+0x44>
     7c8:	f022 0403 	bic.w	r4, r2, #3
     7cc:	4421      	add	r1, r4
     7ce:	4423      	add	r3, r4
     7d0:	f002 0203 	and.w	r2, r2, #3
     7d4:	e7e4      	b.n	7a0 <memcpy+0xe>
			*(d_word++) = *(s_word++);
     7d6:	f855 4b04 	ldr.w	r4, [r5], #4
     7da:	f846 4f04 	str.w	r4, [r6, #4]!
     7de:	e7ef      	b.n	7c0 <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
     7e0:	f811 4b01 	ldrb.w	r4, [r1], #1
     7e4:	f803 4f01 	strb.w	r4, [r3, #1]!
     7e8:	e7dc      	b.n	7a4 <memcpy+0x12>

000007ea <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
     7ea:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
     7ec:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
     7ee:	4603      	mov	r3, r0

	while (((unsigned int)d_byte) & 0x3) {
     7f0:	079c      	lsls	r4, r3, #30
     7f2:	d111      	bne.n	818 <CONFIG_ISR_STACK_SIZE+0x18>
	/* do word-sized initialization as long as possible */

	unsigned int *d_word = (unsigned int *)d_byte;
	unsigned int c_word = (unsigned int)(unsigned char)c;

	c_word |= c_word << 8;
     7f4:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
     7f8:	ea44 4404 	orr.w	r4, r4, r4, lsl #16

	while (n >= sizeof(unsigned int)) {
     7fc:	461e      	mov	r6, r3
     7fe:	1b95      	subs	r5, r2, r6
     800:	441d      	add	r5, r3
     802:	2d03      	cmp	r5, #3
     804:	d80e      	bhi.n	824 <CONFIG_ISR_STACK_SIZE+0x24>
     806:	f022 0403 	bic.w	r4, r2, #3
     80a:	4423      	add	r3, r4
     80c:	f002 0203 	and.w	r2, r2, #3
     810:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
     812:	4293      	cmp	r3, r2
     814:	d109      	bne.n	82a <CONFIG_ISR_STACK_SIZE+0x2a>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
     816:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
     818:	2a00      	cmp	r2, #0
     81a:	d0fc      	beq.n	816 <CONFIG_ISR_STACK_SIZE+0x16>
		*(d_byte++) = c_byte;
     81c:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
     820:	3a01      	subs	r2, #1
     822:	e7e5      	b.n	7f0 <memset+0x6>
		*(d_word++) = c_word;
     824:	f846 4b04 	str.w	r4, [r6], #4
     828:	e7e9      	b.n	7fe <memset+0x14>
		*(d_byte++) = c_byte;
     82a:	f803 1b01 	strb.w	r1, [r3], #1
     82e:	e7f0      	b.n	812 <CONFIG_ISR_STACK_SIZE+0x12>

00000830 <_to_x>:
/* Writes the specified number into the buffer in the given base,
 * using the digit characters 0-9a-z (i.e. base>36 will start writing
 * odd bytes), padding with leading zeros up to the minimum length.
 */
static int _to_x(char *buf, uint32_t n, int base, int minlen)
{
     830:	b570      	push	{r4, r5, r6, lr}
     832:	4604      	mov	r4, r0
	char *buf0 = buf;

	do {
		int d = n % base;
     834:	fbb1 f6f2 	udiv	r6, r1, r2
     838:	fb02 1116 	mls	r1, r2, r6, r1

		n /= base;
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
     83c:	b2cd      	uxtb	r5, r1
     83e:	2909      	cmp	r1, #9
     840:	bfcc      	ite	gt
     842:	2127      	movgt	r1, #39	; 0x27
     844:	2100      	movle	r1, #0
     846:	3530      	adds	r5, #48	; 0x30
     848:	4429      	add	r1, r5
     84a:	f804 1b01 	strb.w	r1, [r4], #1
	} while (n);
     84e:	4631      	mov	r1, r6
     850:	2e00      	cmp	r6, #0
     852:	d1ef      	bne.n	834 <_to_x+0x4>
		*end++ = '0';
     854:	2130      	movs	r1, #48	; 0x30
     856:	1a22      	subs	r2, r4, r0
	while (end - start < minlen) {
     858:	4293      	cmp	r3, r2
     85a:	dc07      	bgt.n	86c <_to_x+0x3c>
	*end = 0;
     85c:	4623      	mov	r3, r4
     85e:	2100      	movs	r1, #0
     860:	f803 1901 	strb.w	r1, [r3], #-1
	for (end--; end > start; end--, start++) {
     864:	4283      	cmp	r3, r0
     866:	d804      	bhi.n	872 <_to_x+0x42>
	return _reverse_and_pad(buf0, buf, minlen);
}
     868:	4610      	mov	r0, r2
     86a:	bd70      	pop	{r4, r5, r6, pc}
		*end++ = '0';
     86c:	f804 1b01 	strb.w	r1, [r4], #1
     870:	e7f1      	b.n	856 <_to_x+0x26>
		char tmp = *end;
     872:	7819      	ldrb	r1, [r3, #0]
		*end = *start;
     874:	7804      	ldrb	r4, [r0, #0]
     876:	f803 4901 	strb.w	r4, [r3], #-1
		*start = tmp;
     87a:	f800 1b01 	strb.w	r1, [r0], #1
     87e:	e7f1      	b.n	864 <_to_x+0x34>

00000880 <_rlrshift>:
	return (buf + _to_udec(buf, (uint32_t) value, precision)) - start;
}

static	void _rlrshift(uint64_t *v)
{
	*v = (*v & 1) + (*v >> 1);
     880:	e9d0 2300 	ldrd	r2, r3, [r0]
{
     884:	b530      	push	{r4, r5, lr}
	*v = (*v & 1) + (*v >> 1);
     886:	f002 0401 	and.w	r4, r2, #1
     88a:	085b      	lsrs	r3, r3, #1
     88c:	ea4f 0232 	mov.w	r2, r2, rrx
     890:	1912      	adds	r2, r2, r4
     892:	f04f 0500 	mov.w	r5, #0
     896:	416b      	adcs	r3, r5
     898:	e9c0 2300 	strd	r2, r3, [r0]
     89c:	bd30      	pop	{r4, r5, pc}
	...

000008a0 <_ldiv5>:
 * six.  This was tested exhaustively through the first ~10B values in
 * the input space, and for ~2e12 (4 hours runtime) random inputs
 * taken from the full 64 bit space.
 */
static void _ldiv5(uint64_t *v)
{
     8a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t i, hi;
	uint64_t rem = *v, quot = 0, q;
     8a4:	e9d0 4500 	ldrd	r4, r5, [r0]
	static const char shifts[] = { 32, 3, 0 };

	/* Usage in this file wants rounded behavior, not truncation.  So add
	 * two to get the threshold right.
	 */
	rem += 2;
     8a8:	3402      	adds	r4, #2
{
     8aa:	4680      	mov	r8, r0
	rem += 2;
     8ac:	f145 0500 	adc.w	r5, r5, #0
	uint64_t rem = *v, quot = 0, q;
     8b0:	f04f 0a00 	mov.w	sl, #0
     8b4:	f04f 0b00 	mov.w	fp, #0

	for (i = 0; i < 3; i++) {
     8b8:	2600      	movs	r6, #0
		hi = rem >> shifts[i];
		q = (uint64_t)(hi / 5) << shifts[i];
     8ba:	2705      	movs	r7, #5
		hi = rem >> shifts[i];
     8bc:	4b0f      	ldr	r3, [pc, #60]	; (8fc <_ldiv5+0x5c>)
     8be:	f816 9003 	ldrb.w	r9, [r6, r3]
     8c2:	4620      	mov	r0, r4
     8c4:	464a      	mov	r2, r9
     8c6:	4629      	mov	r1, r5
     8c8:	f7ff fcce 	bl	268 <__aeabi_llsr>
		q = (uint64_t)(hi / 5) << shifts[i];
     8cc:	464a      	mov	r2, r9
     8ce:	fbb0 f0f7 	udiv	r0, r0, r7
     8d2:	2100      	movs	r1, #0
     8d4:	f7ff fcd4 	bl	280 <__aeabi_llsl>
		rem -= q * 5;
     8d8:	fba0 2307 	umull	r2, r3, r0, r7
     8dc:	1aa4      	subs	r4, r4, r2
     8de:	fb07 3301 	mla	r3, r7, r1, r3
     8e2:	eb65 0503 	sbc.w	r5, r5, r3
	for (i = 0; i < 3; i++) {
     8e6:	3601      	adds	r6, #1
		quot += q;
     8e8:	eb1a 0a00 	adds.w	sl, sl, r0
     8ec:	eb4b 0b01 	adc.w	fp, fp, r1
	for (i = 0; i < 3; i++) {
     8f0:	2e03      	cmp	r6, #3
     8f2:	d1e3      	bne.n	8bc <_ldiv5+0x1c>
	}

	*v = quot;
     8f4:	e9c8 ab00 	strd	sl, fp, [r8]
     8f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     8fc:	000229ba 	.word	0x000229ba

00000900 <_get_digit>:

static	char _get_digit(uint64_t *fr, int *digit_count)
{
	int		rval;

	if (*digit_count > 0) {
     900:	680b      	ldr	r3, [r1, #0]
     902:	2b00      	cmp	r3, #0
{
     904:	b510      	push	{r4, lr}
	if (*digit_count > 0) {
     906:	dd10      	ble.n	92a <_get_digit+0x2a>
		*digit_count -= 1;
     908:	3b01      	subs	r3, #1
		*fr = *fr * 10;
     90a:	6802      	ldr	r2, [r0, #0]
		*digit_count -= 1;
     90c:	600b      	str	r3, [r1, #0]
		*fr = *fr * 10;
     90e:	6844      	ldr	r4, [r0, #4]
     910:	210a      	movs	r1, #10
     912:	fba2 2301 	umull	r2, r3, r2, r1
     916:	fb01 3304 	mla	r3, r1, r4, r3
		rval = ((*fr >> 60) & 0xF) + '0';
     91a:	0f19      	lsrs	r1, r3, #28
		*fr &= 0x0FFFFFFFFFFFFFFFull;
     91c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
     920:	e9c0 2300 	strd	r2, r3, [r0]
		rval = ((*fr >> 60) & 0xF) + '0';
     924:	3130      	adds	r1, #48	; 0x30
	} else
		rval = '0';
	return (char) (rval);
}
     926:	b2c8      	uxtb	r0, r1
     928:	bd10      	pop	{r4, pc}
		rval = '0';
     92a:	2130      	movs	r1, #48	; 0x30
     92c:	e7fb      	b.n	926 <_get_digit+0x26>
	...

00000930 <_prf>:
	*sptr = p;
	return i;
}

int _prf(int (*func)(), void *dest, char *format, va_list vargs)
{
     930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     934:	b0cf      	sub	sp, #316	; 0x13c
     936:	461f      	mov	r7, r3
	int32_t			*int32ptr_temp;
	int32_t			int32_temp;
	uint32_t			uint32_temp;
	uint64_t			double_temp;

	count = 0;
     938:	2300      	movs	r3, #0
{
     93a:	9009      	str	r0, [sp, #36]	; 0x24
     93c:	9112      	str	r1, [sp, #72]	; 0x48
	count = 0;
     93e:	9304      	str	r3, [sp, #16]

	while ((c = *format++)) {
     940:	7810      	ldrb	r0, [r2, #0]
     942:	1c53      	adds	r3, r2, #1
     944:	9301      	str	r3, [sp, #4]
     946:	2800      	cmp	r0, #0
     948:	d046      	beq.n	9d8 <_prf+0xa8>
		if (c != '%') {
     94a:	2825      	cmp	r0, #37	; 0x25
     94c:	d13c      	bne.n	9c8 <_prf+0x98>
     94e:	f04f 0900 	mov.w	r9, #0
     952:	2320      	movs	r3, #32
     954:	9300      	str	r3, [sp, #0]
     956:	f8cd 9014 	str.w	r9, [sp, #20]
     95a:	f8cd 9020 	str.w	r9, [sp, #32]
     95e:	464e      	mov	r6, r9
		} else {
			fminus = fplus = fspace = falt = false;
			pad = ' ';		/* Default pad character    */
			precision = -1;	/* No precision specified   */

			while (strchr("-+ #0", (c = *format++)) != NULL) {
     960:	9b01      	ldr	r3, [sp, #4]
     962:	489a      	ldr	r0, [pc, #616]	; (bcc <_prf+0x29c>)
     964:	f813 4b01 	ldrb.w	r4, [r3], #1
		if (c != '%') {
     968:	9d01      	ldr	r5, [sp, #4]
			while (strchr("-+ #0", (c = *format++)) != NULL) {
     96a:	9301      	str	r3, [sp, #4]
     96c:	4621      	mov	r1, r4
     96e:	f7ff feb2 	bl	6d6 <strchr>
     972:	2800      	cmp	r0, #0
     974:	d13b      	bne.n	9ee <_prf+0xbe>
				case '\0':
					return count;
				}
			}

			if (c == '*') {
     976:	2c2a      	cmp	r4, #42	; 0x2a
     978:	d154      	bne.n	a24 <_prf+0xf4>
				/* Is the width a parameter? */
				width = (int32_t) va_arg(vargs, int32_t);
     97a:	683a      	ldr	r2, [r7, #0]
     97c:	9202      	str	r2, [sp, #8]
				if (width < 0) {
     97e:	2a00      	cmp	r2, #0
					fminus = true;
					width = -width;
     980:	bfbf      	itttt	lt
     982:	4252      	neglt	r2, r2
     984:	9202      	strlt	r2, [sp, #8]
					fminus = true;
     986:	2201      	movlt	r2, #1
     988:	9208      	strlt	r2, [sp, #32]
				}
				c = *format++;
     98a:	9a01      	ldr	r2, [sp, #4]
				width = (int32_t) va_arg(vargs, int32_t);
     98c:	1d3b      	adds	r3, r7, #4
				c = *format++;
     98e:	7814      	ldrb	r4, [r2, #0]
				width = (int32_t) va_arg(vargs, int32_t);
     990:	461f      	mov	r7, r3
				c = *format++;
     992:	1cab      	adds	r3, r5, #2
			} else if (!isdigit(c))
				width = 0;
			else {
				width = _atoi(&format);	/* Find width */
				c = *format++;
     994:	9301      	str	r3, [sp, #4]
			 * not be expressed as a positive number using 32-bit
			 * two's complement.  To cover that case, cast it to
			 * an unsigned before comparing it against MAXFLD.
			 */
			if ((unsigned) width > MAXFLD) {
				width = MAXFLD;
     996:	9b02      	ldr	r3, [sp, #8]
     998:	2bc9      	cmp	r3, #201	; 0xc9
     99a:	bf28      	it	cs
     99c:	23c8      	movcs	r3, #200	; 0xc8
     99e:	9302      	str	r3, [sp, #8]
			}

			if (c == '.') {
     9a0:	2c2e      	cmp	r4, #46	; 0x2e
     9a2:	d17f      	bne.n	aa4 <_prf+0x174>
				c = *format++;
				if (c == '*') {
     9a4:	9b01      	ldr	r3, [sp, #4]
     9a6:	781b      	ldrb	r3, [r3, #0]
     9a8:	2b2a      	cmp	r3, #42	; 0x2a
     9aa:	d051      	beq.n	a50 <_prf+0x120>
     9ac:	9901      	ldr	r1, [sp, #4]
     9ae:	2500      	movs	r5, #0
		i = 10 * i + *p++ - '0';
     9b0:	240a      	movs	r4, #10
     9b2:	460a      	mov	r2, r1
	while (isdigit(((int) *p)))
     9b4:	f811 3b01 	ldrb.w	r3, [r1], #1
	return (((unsigned)(a)-'0') < 10);
     9b8:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
     9bc:	2809      	cmp	r0, #9
     9be:	d84b      	bhi.n	a58 <_prf+0x128>
		i = 10 * i + *p++ - '0';
     9c0:	fb04 3505 	mla	r5, r4, r5, r3
     9c4:	3d30      	subs	r5, #48	; 0x30
     9c6:	e7f4      	b.n	9b2 <_prf+0x82>
			if ((*func) (c, dest) == EOF) {
     9c8:	9912      	ldr	r1, [sp, #72]	; 0x48
     9ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
     9cc:	4798      	blx	r3
     9ce:	3001      	adds	r0, #1
     9d0:	d106      	bne.n	9e0 <_prf+0xb0>
				return EOF;
     9d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     9d6:	9304      	str	r3, [sp, #16]
				}
			}
		}
	}
	return count;
}
     9d8:	9804      	ldr	r0, [sp, #16]
     9da:	b04f      	add	sp, #316	; 0x13c
     9dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			count++;
     9e0:	9c04      	ldr	r4, [sp, #16]
     9e2:	9703      	str	r7, [sp, #12]
     9e4:	3401      	adds	r4, #1
			if (c >= MAXFLD + 1)
     9e6:	9f03      	ldr	r7, [sp, #12]
     9e8:	9a01      	ldr	r2, [sp, #4]
     9ea:	9404      	str	r4, [sp, #16]
     9ec:	e7a8      	b.n	940 <_prf+0x10>
				switch (c) {
     9ee:	2c23      	cmp	r4, #35	; 0x23
     9f0:	d014      	beq.n	a1c <_prf+0xec>
     9f2:	d806      	bhi.n	a02 <_prf+0xd2>
     9f4:	2c00      	cmp	r4, #0
     9f6:	d0ef      	beq.n	9d8 <_prf+0xa8>
					fspace = true;
     9f8:	2c20      	cmp	r4, #32
     9fa:	bf08      	it	eq
     9fc:	f04f 0901 	moveq.w	r9, #1
     a00:	e7ae      	b.n	960 <_prf+0x30>
				switch (c) {
     a02:	2c2d      	cmp	r4, #45	; 0x2d
     a04:	d007      	beq.n	a16 <_prf+0xe6>
     a06:	2c30      	cmp	r4, #48	; 0x30
     a08:	d00a      	beq.n	a20 <_prf+0xf0>
					fplus = true;
     a0a:	2c2b      	cmp	r4, #43	; 0x2b
     a0c:	9b05      	ldr	r3, [sp, #20]
     a0e:	bf08      	it	eq
     a10:	2301      	moveq	r3, #1
     a12:	9305      	str	r3, [sp, #20]
     a14:	e7a4      	b.n	960 <_prf+0x30>
					fminus = true;
     a16:	2301      	movs	r3, #1
     a18:	9308      	str	r3, [sp, #32]
     a1a:	e7a1      	b.n	960 <_prf+0x30>
					falt = true;
     a1c:	2601      	movs	r6, #1
					break;
     a1e:	e79f      	b.n	960 <_prf+0x30>
					pad = '0';
     a20:	9400      	str	r4, [sp, #0]
					break;
     a22:	e79d      	b.n	960 <_prf+0x30>
     a24:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
			} else if (!isdigit(c))
     a28:	2b09      	cmp	r3, #9
				width = 0;
     a2a:	9002      	str	r0, [sp, #8]
			} else if (!isdigit(c))
     a2c:	d8b8      	bhi.n	9a0 <_prf+0x70>
		i = 10 * i + *p++ - '0';
     a2e:	210a      	movs	r1, #10
	while (isdigit(((int) *p)))
     a30:	f815 0b01 	ldrb.w	r0, [r5], #1
     a34:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
     a38:	2a09      	cmp	r2, #9
     a3a:	4604      	mov	r4, r0
     a3c:	d901      	bls.n	a42 <_prf+0x112>
				c = *format++;
     a3e:	462b      	mov	r3, r5
     a40:	e7a8      	b.n	994 <_prf+0x64>
		i = 10 * i + *p++ - '0';
     a42:	9b02      	ldr	r3, [sp, #8]
     a44:	fb01 0003 	mla	r0, r1, r3, r0
     a48:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
     a4c:	9302      	str	r3, [sp, #8]
     a4e:	e7ef      	b.n	a30 <_prf+0x100>
				c = *format++;
     a50:	9a01      	ldr	r2, [sp, #4]
					precision = (int32_t)
     a52:	683d      	ldr	r5, [r7, #0]
				c = *format++;
     a54:	3201      	adds	r2, #1
					precision = (int32_t)
     a56:	3704      	adds	r7, #4
					precision = -1;
     a58:	2dc9      	cmp	r5, #201	; 0xc9
				c = *format++;
     a5a:	f102 0301 	add.w	r3, r2, #1
     a5e:	7814      	ldrb	r4, [r2, #0]
     a60:	9301      	str	r3, [sp, #4]
					precision = -1;
     a62:	bfa8      	it	ge
     a64:	f04f 35ff 	movge.w	r5, #4294967295	; 0xffffffff
			if (strchr("hlLz", c) != NULL) {
     a68:	4621      	mov	r1, r4
     a6a:	4859      	ldr	r0, [pc, #356]	; (bd0 <_prf+0x2a0>)
     a6c:	f7ff fe33 	bl	6d6 <strchr>
     a70:	b118      	cbz	r0, a7a <_prf+0x14a>
				c = *format++;
     a72:	9b01      	ldr	r3, [sp, #4]
     a74:	781c      	ldrb	r4, [r3, #0]
     a76:	3301      	adds	r3, #1
     a78:	9301      	str	r3, [sp, #4]
			switch (c) {
     a7a:	2c67      	cmp	r4, #103	; 0x67
     a7c:	dc40      	bgt.n	b00 <_prf+0x1d0>
     a7e:	2c65      	cmp	r4, #101	; 0x65
     a80:	f280 80a8 	bge.w	bd4 <_prf+0x2a4>
     a84:	2c47      	cmp	r4, #71	; 0x47
     a86:	f000 80a5 	beq.w	bd4 <_prf+0x2a4>
     a8a:	dc0e      	bgt.n	aaa <_prf+0x17a>
     a8c:	2c25      	cmp	r4, #37	; 0x25
     a8e:	f000 82d1 	beq.w	1034 <_prf+0x704>
     a92:	2c45      	cmp	r4, #69	; 0x45
     a94:	f000 809e 	beq.w	bd4 <_prf+0x2a4>
     a98:	2c00      	cmp	r4, #0
     a9a:	d09d      	beq.n	9d8 <_prf+0xa8>
			if (c >= MAXFLD + 1)
     a9c:	2cc8      	cmp	r4, #200	; 0xc8
     a9e:	f340 82d3 	ble.w	1048 <_prf+0x718>
     aa2:	e796      	b.n	9d2 <_prf+0xa2>
			precision = -1;	/* No precision specified   */
     aa4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
     aa8:	e7de      	b.n	a68 <_prf+0x138>
			switch (c) {
     aaa:	2c63      	cmp	r4, #99	; 0x63
     aac:	d06e      	beq.n	b8c <_prf+0x25c>
     aae:	dc32      	bgt.n	b16 <_prf+0x1e6>
     ab0:	2c58      	cmp	r4, #88	; 0x58
     ab2:	d1f3      	bne.n	a9c <_prf+0x16c>
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
     ab4:	1d3b      	adds	r3, r7, #4
     ab6:	9303      	str	r3, [sp, #12]
     ab8:	6839      	ldr	r1, [r7, #0]
	if (alt_form) {
     aba:	2e00      	cmp	r6, #0
     abc:	f000 82b0 	beq.w	1020 <_prf+0x6f0>
		*buf++ = '0';
     ac0:	2330      	movs	r3, #48	; 0x30
     ac2:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
		*buf++ = 'x';
     ac6:	2378      	movs	r3, #120	; 0x78
     ac8:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
     acc:	f10d 076e 	add.w	r7, sp, #110	; 0x6e
	len = _to_x(buf, value, 16, precision);
     ad0:	462b      	mov	r3, r5
     ad2:	2210      	movs	r2, #16
     ad4:	4638      	mov	r0, r7
     ad6:	f7ff feab 	bl	830 <_to_x>
	if (prefix == 'X') {
     ada:	2c58      	cmp	r4, #88	; 0x58
     adc:	d104      	bne.n	ae8 <_prf+0x1b8>
     ade:	aa1b      	add	r2, sp, #108	; 0x6c
	for (/**/; *buf; buf++) {
     ae0:	7813      	ldrb	r3, [r2, #0]
     ae2:	2b00      	cmp	r3, #0
     ae4:	f040 829e 	bne.w	1024 <_prf+0x6f4>
	return len + (buf - buf0);
     ae8:	f10d 0a6c 	add.w	sl, sp, #108	; 0x6c
					prefix = 2;
     aec:	2e00      	cmp	r6, #0
	return len + (buf - buf0);
     aee:	eba7 0a0a 	sub.w	sl, r7, sl
     af2:	4450      	add	r0, sl
					prefix = 2;
     af4:	bf0c      	ite	eq
     af6:	f04f 0900 	moveq.w	r9, #0
     afa:	f04f 0902 	movne.w	r9, #2
     afe:	e029      	b.n	b54 <_prf+0x224>
			switch (c) {
     b00:	2c70      	cmp	r4, #112	; 0x70
     b02:	f000 8265 	beq.w	fd0 <_prf+0x6a0>
     b06:	dc27      	bgt.n	b58 <_prf+0x228>
     b08:	2c6e      	cmp	r4, #110	; 0x6e
     b0a:	f000 8221 	beq.w	f50 <_prf+0x620>
     b0e:	f300 8226 	bgt.w	f5e <_prf+0x62e>
     b12:	2c69      	cmp	r4, #105	; 0x69
     b14:	d1c2      	bne.n	a9c <_prf+0x16c>
				int32_temp = (int32_t) va_arg(vargs, int32_t);
     b16:	683c      	ldr	r4, [r7, #0]
     b18:	1d3b      	adds	r3, r7, #4
	if (value < 0) {
     b1a:	2c00      	cmp	r4, #0
				int32_temp = (int32_t) va_arg(vargs, int32_t);
     b1c:	9303      	str	r3, [sp, #12]
	if (value < 0) {
     b1e:	da41      	bge.n	ba4 <_prf+0x274>
		*buf++ = '-';
     b20:	232d      	movs	r3, #45	; 0x2d
		if (value != 0x80000000)
     b22:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
		*buf++ = '-';
     b26:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
		if (value != 0x80000000)
     b2a:	d040      	beq.n	bae <_prf+0x27e>
			value = -value;
     b2c:	4261      	negs	r1, r4
		*buf++ = ' ';
     b2e:	f10d 0a6d 	add.w	sl, sp, #109	; 0x6d
	return _to_x(buf, value, 10, precision);
     b32:	462b      	mov	r3, r5
     b34:	4650      	mov	r0, sl
     b36:	220a      	movs	r2, #10
     b38:	f7ff fe7a 	bl	830 <_to_x>
				if (fplus || fspace || (int32_temp < 0))
     b3c:	9b05      	ldr	r3, [sp, #20]
	return (buf + _to_udec(buf, (uint32_t) value, precision)) - start;
     b3e:	4482      	add	sl, r0
     b40:	a81b      	add	r0, sp, #108	; 0x6c
     b42:	ebaa 0000 	sub.w	r0, sl, r0
				if (fplus || fspace || (int32_temp < 0))
     b46:	2b00      	cmp	r3, #0
     b48:	d13c      	bne.n	bc4 <_prf+0x294>
     b4a:	f1b9 0f00 	cmp.w	r9, #0
     b4e:	d101      	bne.n	b54 <_prf+0x224>
     b50:	ea4f 79d4 	mov.w	r9, r4, lsr #31
					pad = ' ';
     b54:	3501      	adds	r5, #1
     b56:	e233      	b.n	fc0 <_prf+0x690>
			switch (c) {
     b58:	2c75      	cmp	r4, #117	; 0x75
     b5a:	f000 8258 	beq.w	100e <_prf+0x6de>
     b5e:	2c78      	cmp	r4, #120	; 0x78
     b60:	d0a8      	beq.n	ab4 <_prf+0x184>
     b62:	2c73      	cmp	r4, #115	; 0x73
     b64:	d19a      	bne.n	a9c <_prf+0x16c>
				cptr_temp = (char *) va_arg(vargs, char *);
     b66:	1d3b      	adds	r3, r7, #4
     b68:	6839      	ldr	r1, [r7, #0]
     b6a:	9303      	str	r3, [sp, #12]
				for (c = 0; c < MAXFLD; c++) {
     b6c:	2600      	movs	r6, #0
					if (cptr_temp[c] == '\0') {
     b6e:	5d8b      	ldrb	r3, [r1, r6]
     b70:	2b00      	cmp	r3, #0
     b72:	f040 8241 	bne.w	ff8 <_prf+0x6c8>
				if ((precision >= 0) && (precision < c))
     b76:	2d00      	cmp	r5, #0
     b78:	f280 8245 	bge.w	1006 <_prf+0x6d6>
				if (c > 0) {
     b7c:	2e00      	cmp	r6, #0
     b7e:	f000 81ec 	beq.w	f5a <_prf+0x62a>
					memcpy(buf, cptr_temp, (size_t) c);
     b82:	4632      	mov	r2, r6
     b84:	a81b      	add	r0, sp, #108	; 0x6c
     b86:	f7ff fe04 	bl	792 <memcpy>
     b8a:	e008      	b.n	b9e <_prf+0x26e>
				buf[0] = (char) ((int32_t) va_arg(vargs, int32_t));
     b8c:	1d3b      	adds	r3, r7, #4
     b8e:	9303      	str	r3, [sp, #12]
     b90:	683b      	ldr	r3, [r7, #0]
     b92:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
				buf[1] = '\0';
     b96:	2300      	movs	r3, #0
     b98:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
				c = 1;
     b9c:	2601      	movs	r6, #1
					prefix = 2;
     b9e:	f04f 0900 	mov.w	r9, #0
     ba2:	e1ec      	b.n	f7e <_prf+0x64e>
	} else if (fplus)
     ba4:	9b05      	ldr	r3, [sp, #20]
     ba6:	b123      	cbz	r3, bb2 <_prf+0x282>
		*buf++ = '+';
     ba8:	232b      	movs	r3, #43	; 0x2b
		*buf++ = ' ';
     baa:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
     bae:	4621      	mov	r1, r4
     bb0:	e7bd      	b.n	b2e <_prf+0x1fe>
	else if (fspace)
     bb2:	f1b9 0f00 	cmp.w	r9, #0
     bb6:	d001      	beq.n	bbc <_prf+0x28c>
		*buf++ = ' ';
     bb8:	2320      	movs	r3, #32
     bba:	e7f6      	b.n	baa <_prf+0x27a>
	else if (fspace)
     bbc:	4621      	mov	r1, r4
     bbe:	f10d 0a6c 	add.w	sl, sp, #108	; 0x6c
     bc2:	e7b6      	b.n	b32 <_prf+0x202>
					prefix = 1;
     bc4:	f8dd 9014 	ldr.w	r9, [sp, #20]
     bc8:	e7c4      	b.n	b54 <_prf+0x224>
     bca:	bf00      	nop
     bcc:	000229af 	.word	0x000229af
     bd0:	000229b5 	.word	0x000229b5
				u.d = (double) va_arg(vargs, double);
     bd4:	3707      	adds	r7, #7
     bd6:	f027 0707 	bic.w	r7, r7, #7
				double_temp = u.i;
     bda:	e897 0003 	ldmia.w	r7, {r0, r1}
				u.d = (double) va_arg(vargs, double);
     bde:	f107 0308 	add.w	r3, r7, #8
     be2:	9303      	str	r3, [sp, #12]
	fract = (double_temp << 11) & ~HIGHBIT64;
     be4:	02cb      	lsls	r3, r1, #11
     be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     bea:	9307      	str	r3, [sp, #28]
     bec:	02c3      	lsls	r3, r0, #11
     bee:	9306      	str	r3, [sp, #24]
     bf0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
	exp = double_temp >> 52 & 0x7ff;
     bf4:	f3c1 5a0a 	ubfx	sl, r1, #20, #11
	sign = !!(double_temp & HIGHBIT64);
     bf8:	4688      	mov	r8, r1
	if (exp == 0x7ff) {
     bfa:	f240 71ff 	movw	r1, #2047	; 0x7ff
	fract = (double_temp << 11) & ~HIGHBIT64;
     bfe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
	if (exp == 0x7ff) {
     c02:	458a      	cmp	sl, r1
	fract = (double_temp << 11) & ~HIGHBIT64;
     c04:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
	sign = !!(double_temp & HIGHBIT64);
     c08:	4607      	mov	r7, r0
	if (exp == 0x7ff) {
     c0a:	d139      	bne.n	c80 <_prf+0x350>
		if (!fract) {
     c0c:	4313      	orrs	r3, r2
     c0e:	d12c      	bne.n	c6a <_prf+0x33a>
			*buf++ = sign ? '-' : '+';
     c10:	2800      	cmp	r0, #0
     c12:	f178 0300 	sbcs.w	r3, r8, #0
     c16:	bfb4      	ite	lt
     c18:	232d      	movlt	r3, #45	; 0x2d
     c1a:	232b      	movge	r3, #43	; 0x2b
     c1c:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
			*buf++ = 'I';
     c20:	2349      	movs	r3, #73	; 0x49
     c22:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
			*buf++ = 'N';
     c26:	234e      	movs	r3, #78	; 0x4e
     c28:	f88d 306e 	strb.w	r3, [sp, #110]	; 0x6e
			*buf++ = 'F';
     c2c:	2346      	movs	r3, #70	; 0x46
     c2e:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
     c32:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
	*buf = 0;
     c36:	2300      	movs	r3, #0
     c38:	f88a 3000 	strb.w	r3, [sl]
				if (fplus || fspace || (buf[0] == '-'))
     c3c:	9b05      	ldr	r3, [sp, #20]
	return buf - start;
     c3e:	a81b      	add	r0, sp, #108	; 0x6c
     c40:	ebaa 0000 	sub.w	r0, sl, r0
				if (fplus || fspace || (buf[0] == '-'))
     c44:	2b00      	cmp	r3, #0
     c46:	f040 8224 	bne.w	1092 <_prf+0x762>
     c4a:	f1b9 0f00 	cmp.w	r9, #0
     c4e:	d107      	bne.n	c60 <_prf+0x330>
     c50:	f89d 906c 	ldrb.w	r9, [sp, #108]	; 0x6c
     c54:	f1a9 032d 	sub.w	r3, r9, #45	; 0x2d
     c58:	f1d3 0900 	rsbs	r9, r3, #0
     c5c:	eb49 0903 	adc.w	r9, r9, r3
			if (c >= MAXFLD + 1)
     c60:	28c8      	cmp	r0, #200	; 0xc8
     c62:	f73f aeb6 	bgt.w	9d2 <_prf+0xa2>
     c66:	4606      	mov	r6, r0
     c68:	e189      	b.n	f7e <_prf+0x64e>
			*buf++ = 'N';
     c6a:	234e      	movs	r3, #78	; 0x4e
			*buf++ = 'a';
     c6c:	2261      	movs	r2, #97	; 0x61
			*buf++ = 'N';
     c6e:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
			*buf++ = 'a';
     c72:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
			*buf++ = 'N';
     c76:	f88d 306e 	strb.w	r3, [sp, #110]	; 0x6e
     c7a:	f10d 0a6f 	add.w	sl, sp, #111	; 0x6f
     c7e:	e7da      	b.n	c36 <_prf+0x306>
	if ((exp | fract) != 0) {
     c80:	ea42 000a 	orr.w	r0, r2, sl
     c84:	ea43 71ea 	orr.w	r1, r3, sl, asr #31
     c88:	4301      	orrs	r1, r0
     c8a:	d036      	beq.n	cfa <_prf+0x3ca>
		fract |= HIGHBIT64;
     c8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
	if (decexp && sign) {
     c90:	2f00      	cmp	r7, #0
		fract |= HIGHBIT64;
     c92:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
	if (decexp && sign) {
     c96:	f178 0300 	sbcs.w	r3, r8, #0
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
     c9a:	f2aa 3afe 	subw	sl, sl, #1022	; 0x3fe
	if (decexp && sign) {
     c9e:	da2e      	bge.n	cfe <_prf+0x3ce>
		*buf++ = '-';
     ca0:	232d      	movs	r3, #45	; 0x2d
		*buf++ = ' ';
     ca2:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
     ca6:	f10d 086d 	add.w	r8, sp, #109	; 0x6d
	decexp = 0;
     caa:	2700      	movs	r7, #0
	while (exp <= -3) {
     cac:	f11a 0f02 	cmn.w	sl, #2
     cb0:	db36      	blt.n	d20 <_prf+0x3f0>
	while (exp > 0) {
     cb2:	f1ba 0f00 	cmp.w	sl, #0
     cb6:	dc66      	bgt.n	d86 <_prf+0x456>
		_rlrshift(&fract);
     cb8:	a816      	add	r0, sp, #88	; 0x58
		exp++;
     cba:	f10a 0a01 	add.w	sl, sl, #1
		_rlrshift(&fract);
     cbe:	f7ff fddf 	bl	880 <_rlrshift>
	while (exp < (0 + 4)) {
     cc2:	f1ba 0f04 	cmp.w	sl, #4
     cc6:	d1f7      	bne.n	cb8 <_prf+0x388>
		precision = 6;		/* Default precision if none given */
     cc8:	2d00      	cmp	r5, #0
	if ((c == 'g') || (c == 'G')) {
     cca:	f024 0320 	bic.w	r3, r4, #32
		precision = 6;		/* Default precision if none given */
     cce:	bfb8      	it	lt
     cd0:	2506      	movlt	r5, #6
	if ((c == 'g') || (c == 'G')) {
     cd2:	2b47      	cmp	r3, #71	; 0x47
     cd4:	d17e      	bne.n	dd4 <_prf+0x4a4>
		if (!falt && (precision > 0))
     cd6:	2e00      	cmp	r6, #0
     cd8:	d17a      	bne.n	dd0 <_prf+0x4a0>
     cda:	1c2b      	adds	r3, r5, #0
     cdc:	bf18      	it	ne
     cde:	2301      	movne	r3, #1
		if ((decexp < (-4 + 1)) || (decexp > (precision + 1))) {
     ce0:	1cfa      	adds	r2, r7, #3
     ce2:	469b      	mov	fp, r3
     ce4:	db02      	blt.n	cec <_prf+0x3bc>
     ce6:	1c6b      	adds	r3, r5, #1
     ce8:	429f      	cmp	r7, r3
     cea:	dd77      	ble.n	ddc <_prf+0x4ac>
				c = 'E';
     cec:	2c67      	cmp	r4, #103	; 0x67
     cee:	bf0c      	ite	eq
     cf0:	2465      	moveq	r4, #101	; 0x65
     cf2:	2445      	movne	r4, #69	; 0x45
		exp = precision + 1;
     cf4:	f105 0a01 	add.w	sl, r5, #1
     cf8:	e075      	b.n	de6 <_prf+0x4b6>
	if ((exp | fract) != 0) {
     cfa:	f04f 0a00 	mov.w	sl, #0
	} else if (fplus) {
     cfe:	9b05      	ldr	r3, [sp, #20]
     d00:	b10b      	cbz	r3, d06 <_prf+0x3d6>
		*buf++ = '+';
     d02:	232b      	movs	r3, #43	; 0x2b
     d04:	e7cd      	b.n	ca2 <_prf+0x372>
	} else if (fspace) {
     d06:	f1b9 0f00 	cmp.w	r9, #0
     d0a:	d001      	beq.n	d10 <_prf+0x3e0>
		*buf++ = ' ';
     d0c:	2320      	movs	r3, #32
     d0e:	e7c8      	b.n	ca2 <_prf+0x372>
	} else if (fspace) {
     d10:	f10d 086c 	add.w	r8, sp, #108	; 0x6c
     d14:	e7c9      	b.n	caa <_prf+0x37a>
			_rlrshift(&fract);
     d16:	a816      	add	r0, sp, #88	; 0x58
     d18:	f7ff fdb2 	bl	880 <_rlrshift>
			exp++;
     d1c:	f10a 0a01 	add.w	sl, sl, #1
		while ((fract >> 32) >= (MAXFP1 / 5)) {
     d20:	2200      	movs	r2, #0
     d22:	9b17      	ldr	r3, [sp, #92]	; 0x5c
     d24:	920b      	str	r2, [sp, #44]	; 0x2c
     d26:	930a      	str	r3, [sp, #40]	; 0x28
     d28:	e9dd bc0a 	ldrd	fp, ip, [sp, #40]	; 0x28
     d2c:	49b1      	ldr	r1, [pc, #708]	; (ff4 <_prf+0x6c4>)
     d2e:	9816      	ldr	r0, [sp, #88]	; 0x58
     d30:	2200      	movs	r2, #0
     d32:	4562      	cmp	r2, ip
     d34:	bf08      	it	eq
     d36:	4559      	cmpeq	r1, fp
     d38:	d3ed      	bcc.n	d16 <_prf+0x3e6>
		fract *= 5;
     d3a:	2205      	movs	r2, #5
     d3c:	fba0 0102 	umull	r0, r1, r0, r2
     d40:	fb02 1103 	mla	r1, r2, r3, r1
     d44:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
		exp++;
     d48:	f10a 0a01 	add.w	sl, sl, #1
		decexp--;
     d4c:	3f01      	subs	r7, #1
     d4e:	f04f 0e00 	mov.w	lr, #0
		while ((fract >> 32) <= (MAXFP1 / 2)) {
     d52:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
     d56:	f04f 0c00 	mov.w	ip, #0
     d5a:	2300      	movs	r3, #0
     d5c:	910c      	str	r1, [sp, #48]	; 0x30
     d5e:	930d      	str	r3, [sp, #52]	; 0x34
     d60:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
     d64:	459c      	cmp	ip, r3
     d66:	bf08      	it	eq
     d68:	4593      	cmpeq	fp, r2
     d6a:	d205      	bcs.n	d78 <_prf+0x448>
     d6c:	f1be 0f00 	cmp.w	lr, #0
     d70:	d09c      	beq.n	cac <_prf+0x37c>
     d72:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
     d76:	e799      	b.n	cac <_prf+0x37c>
			fract <<= 1;
     d78:	1800      	adds	r0, r0, r0
     d7a:	4149      	adcs	r1, r1
			exp--;
     d7c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
     d80:	f04f 0e01 	mov.w	lr, #1
     d84:	e7e9      	b.n	d5a <_prf+0x42a>
		_ldiv5(&fract);
     d86:	a816      	add	r0, sp, #88	; 0x58
     d88:	f7ff fd8a 	bl	8a0 <_ldiv5>
     d8c:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
		exp--;
     d90:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
		decexp++;
     d94:	3701      	adds	r7, #1
     d96:	f04f 0e00 	mov.w	lr, #0
		while ((fract >> 32) <= (MAXFP1 / 2)) {
     d9a:	2200      	movs	r2, #0
     d9c:	910e      	str	r1, [sp, #56]	; 0x38
     d9e:	920f      	str	r2, [sp, #60]	; 0x3c
     da0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
     da4:	f04f 0c00 	mov.w	ip, #0
     da8:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
     dac:	459c      	cmp	ip, r3
     dae:	bf08      	it	eq
     db0:	4593      	cmpeq	fp, r2
     db2:	d206      	bcs.n	dc2 <_prf+0x492>
     db4:	f1be 0f00 	cmp.w	lr, #0
     db8:	f43f af7b 	beq.w	cb2 <_prf+0x382>
     dbc:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
     dc0:	e777      	b.n	cb2 <_prf+0x382>
			fract <<= 1;
     dc2:	1800      	adds	r0, r0, r0
     dc4:	4149      	adcs	r1, r1
			exp--;
     dc6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
     dca:	f04f 0e01 	mov.w	lr, #1
     dce:	e7e4      	b.n	d9a <_prf+0x46a>
		if (!falt && (precision > 0))
     dd0:	2300      	movs	r3, #0
     dd2:	e785      	b.n	ce0 <_prf+0x3b0>
	prune_zero = false;		/* Assume trailing 0's allowed     */
     dd4:	2300      	movs	r3, #0
	if (c == 'f') {
     dd6:	2c66      	cmp	r4, #102	; 0x66
	prune_zero = false;		/* Assume trailing 0's allowed     */
     dd8:	469b      	mov	fp, r3
	if (c == 'f') {
     dda:	d18b      	bne.n	cf4 <_prf+0x3c4>
		exp = precision + decexp;
     ddc:	eb07 0a05 	add.w	sl, r7, r5
     de0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
     de4:	2466      	movs	r4, #102	; 0x66
	digit_count = 16;
     de6:	2310      	movs	r3, #16
     de8:	9315      	str	r3, [sp, #84]	; 0x54
	ltemp = 0x0800000000000000;
     dea:	2000      	movs	r0, #0
     dec:	ab4e      	add	r3, sp, #312	; 0x138
     dee:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
     df2:	e963 0136 	strd	r0, r1, [r3, #-216]!	; 0xd8
     df6:	f1ba 0f10 	cmp.w	sl, #16
     dfa:	bfa8      	it	ge
     dfc:	f04f 0a10 	movge.w	sl, #16
	while (exp--) {
     e00:	f1ba 0f00 	cmp.w	sl, #0
     e04:	d137      	bne.n	e76 <_prf+0x546>
	fract += ltemp;
     e06:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
     e0a:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
     e0e:	1812      	adds	r2, r2, r0
     e10:	414b      	adcs	r3, r1
	if ((fract >> 32) & 0xF0000000) {
     e12:	9310      	str	r3, [sp, #64]	; 0x40
     e14:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
	fract += ltemp;
     e18:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
	if ((fract >> 32) & 0xF0000000) {
     e1c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
     e20:	2300      	movs	r3, #0
     e22:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
     e26:	4313      	orrs	r3, r2
     e28:	d006      	beq.n	e38 <_prf+0x508>
		_ldiv5(&fract);
     e2a:	a816      	add	r0, sp, #88	; 0x58
     e2c:	f7ff fd38 	bl	8a0 <_ldiv5>
		_rlrshift(&fract);
     e30:	a816      	add	r0, sp, #88	; 0x58
     e32:	f7ff fd25 	bl	880 <_rlrshift>
		decexp++;
     e36:	3701      	adds	r7, #1
	if (c == 'f') {
     e38:	2c66      	cmp	r4, #102	; 0x66
     e3a:	d13d      	bne.n	eb8 <_prf+0x588>
		if (decexp > 0) {
     e3c:	2f00      	cmp	r7, #0
     e3e:	dd26      	ble.n	e8e <_prf+0x55e>
     e40:	4447      	add	r7, r8
     e42:	46c2      	mov	sl, r8
				*buf++ = _get_digit(&fract, &digit_count);
     e44:	a915      	add	r1, sp, #84	; 0x54
     e46:	a816      	add	r0, sp, #88	; 0x58
     e48:	f7ff fd5a 	bl	900 <_get_digit>
     e4c:	f80a 0b01 	strb.w	r0, [sl], #1
			while (decexp > 0) {
     e50:	4557      	cmp	r7, sl
     e52:	d1f7      	bne.n	e44 <_prf+0x514>
     e54:	2700      	movs	r7, #0
		if (falt || (precision > 0))
     e56:	b906      	cbnz	r6, e5a <_prf+0x52a>
     e58:	b155      	cbz	r5, e70 <_prf+0x540>
			*buf++ = '.';
     e5a:	4656      	mov	r6, sl
     e5c:	232e      	movs	r3, #46	; 0x2e
     e5e:	f806 3b02 	strb.w	r3, [r6], #2
     e62:	46a8      	mov	r8, r5
				*buf++ = '0';
     e64:	2330      	movs	r3, #48	; 0x30
		while (precision-- > 0) {
     e66:	f118 38ff 	adds.w	r8, r8, #4294967295	; 0xffffffff
     e6a:	d216      	bcs.n	e9a <_prf+0x56a>
     e6c:	3501      	adds	r5, #1
     e6e:	44aa      	add	sl, r5
	if (prune_zero) {
     e70:	465b      	mov	r3, fp
     e72:	bb8b      	cbnz	r3, ed8 <_prf+0x5a8>
     e74:	e6df      	b.n	c36 <_prf+0x306>
		_ldiv5(&ltemp);
     e76:	4618      	mov	r0, r3
     e78:	9313      	str	r3, [sp, #76]	; 0x4c
     e7a:	f7ff fd11 	bl	8a0 <_ldiv5>
		_rlrshift(&ltemp);
     e7e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
     e80:	4618      	mov	r0, r3
     e82:	f7ff fcfd 	bl	880 <_rlrshift>
     e86:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
     e8a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
     e8c:	e7b8      	b.n	e00 <_prf+0x4d0>
			*buf++ = '0';
     e8e:	2330      	movs	r3, #48	; 0x30
     e90:	f108 0a01 	add.w	sl, r8, #1
     e94:	f888 3000 	strb.w	r3, [r8]
     e98:	e7dd      	b.n	e56 <_prf+0x526>
			if (decexp < 0) {
     e9a:	b127      	cbz	r7, ea6 <_prf+0x576>
				*buf++ = '0';
     e9c:	f806 3c01 	strb.w	r3, [r6, #-1]
				decexp++;
     ea0:	3701      	adds	r7, #1
     ea2:	3601      	adds	r6, #1
     ea4:	e7df      	b.n	e66 <_prf+0x536>
				*buf++ = _get_digit(&fract, &digit_count);
     ea6:	a915      	add	r1, sp, #84	; 0x54
     ea8:	a816      	add	r0, sp, #88	; 0x58
     eaa:	9313      	str	r3, [sp, #76]	; 0x4c
     eac:	f7ff fd28 	bl	900 <_get_digit>
     eb0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
     eb2:	f806 0c01 	strb.w	r0, [r6, #-1]
     eb6:	e7f4      	b.n	ea2 <_prf+0x572>
		*buf = _get_digit(&fract, &digit_count);
     eb8:	a915      	add	r1, sp, #84	; 0x54
     eba:	a816      	add	r0, sp, #88	; 0x58
     ebc:	f7ff fd20 	bl	900 <_get_digit>
		if (*buf++ != '0')
     ec0:	2830      	cmp	r0, #48	; 0x30
		*buf = _get_digit(&fract, &digit_count);
     ec2:	f888 0000 	strb.w	r0, [r8]
			decexp--;
     ec6:	bf18      	it	ne
     ec8:	f107 37ff 	addne.w	r7, r7, #4294967295	; 0xffffffff
		if (falt || (precision > 0))
     ecc:	bb8e      	cbnz	r6, f32 <_prf+0x602>
     ece:	bb85      	cbnz	r5, f32 <_prf+0x602>
		if (*buf++ != '0')
     ed0:	f108 0a01 	add.w	sl, r8, #1
	if (prune_zero) {
     ed4:	465b      	mov	r3, fp
     ed6:	b13b      	cbz	r3, ee8 <_prf+0x5b8>
		while (*--buf == '0')
     ed8:	4653      	mov	r3, sl
     eda:	f81a 2d01 	ldrb.w	r2, [sl, #-1]!
     ede:	2a30      	cmp	r2, #48	; 0x30
     ee0:	d0fa      	beq.n	ed8 <_prf+0x5a8>
		if (*buf != '.')
     ee2:	2a2e      	cmp	r2, #46	; 0x2e
     ee4:	bf18      	it	ne
     ee6:	469a      	movne	sl, r3
	if ((c == 'e') || (c == 'E')) {
     ee8:	f024 0320 	bic.w	r3, r4, #32
     eec:	2b45      	cmp	r3, #69	; 0x45
     eee:	f47f aea2 	bne.w	c36 <_prf+0x306>
		*buf++ = (char) c;
     ef2:	4653      	mov	r3, sl
		if (decexp < 0) {
     ef4:	2f00      	cmp	r7, #0
		*buf++ = (char) c;
     ef6:	f803 4b02 	strb.w	r4, [r3], #2
		*buf++ = (char) ((decexp / 100) + '0');
     efa:	f04f 0164 	mov.w	r1, #100	; 0x64
			decexp = -decexp;
     efe:	bfba      	itte	lt
     f00:	427f      	neglt	r7, r7
			*buf++ = '-';
     f02:	222d      	movlt	r2, #45	; 0x2d
			*buf++ = '+';
     f04:	222b      	movge	r2, #43	; 0x2b
     f06:	f88a 2001 	strb.w	r2, [sl, #1]
		*buf++ = (char) ((decexp / 100) + '0');
     f0a:	fb97 f2f1 	sdiv	r2, r7, r1
     f0e:	f102 0030 	add.w	r0, r2, #48	; 0x30
		decexp %= 100;
     f12:	fb01 7712 	mls	r7, r1, r2, r7
		*buf++ = (char) ((decexp / 10) + '0');
     f16:	210a      	movs	r1, #10
		*buf++ = (char) ((decexp / 100) + '0');
     f18:	7018      	strb	r0, [r3, #0]
		*buf++ = (char) ((decexp / 10) + '0');
     f1a:	fb97 f2f1 	sdiv	r2, r7, r1
     f1e:	f102 0030 	add.w	r0, r2, #48	; 0x30
		decexp %= 10;
     f22:	fb01 7212 	mls	r2, r1, r2, r7
		*buf++ = (char) (decexp + '0');
     f26:	3230      	adds	r2, #48	; 0x30
		*buf++ = (char) ((decexp / 10) + '0');
     f28:	7058      	strb	r0, [r3, #1]
		*buf++ = (char) (decexp + '0');
     f2a:	f103 0a03 	add.w	sl, r3, #3
     f2e:	709a      	strb	r2, [r3, #2]
     f30:	e681      	b.n	c36 <_prf+0x306>
			*buf++ = '.';
     f32:	f108 0a02 	add.w	sl, r8, #2
     f36:	232e      	movs	r3, #46	; 0x2e
     f38:	f888 3001 	strb.w	r3, [r8, #1]
     f3c:	4455      	add	r5, sl
		while (precision-- > 0)
     f3e:	4555      	cmp	r5, sl
     f40:	d0c8      	beq.n	ed4 <_prf+0x5a4>
			*buf++ = _get_digit(&fract, &digit_count);
     f42:	a915      	add	r1, sp, #84	; 0x54
     f44:	a816      	add	r0, sp, #88	; 0x58
     f46:	f7ff fcdb 	bl	900 <_get_digit>
     f4a:	f80a 0b01 	strb.w	r0, [sl], #1
     f4e:	e7f6      	b.n	f3e <_prf+0x60e>
				int32ptr_temp = (int32_t *)va_arg(vargs, int32_t *);
     f50:	1d3b      	adds	r3, r7, #4
     f52:	9303      	str	r3, [sp, #12]
				*int32ptr_temp = count;
     f54:	683b      	ldr	r3, [r7, #0]
     f56:	9a04      	ldr	r2, [sp, #16]
     f58:	601a      	str	r2, [r3, #0]
							prefix = 0;
     f5a:	9c04      	ldr	r4, [sp, #16]
     f5c:	e543      	b.n	9e6 <_prf+0xb6>
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
     f5e:	1d3b      	adds	r3, r7, #4
     f60:	9303      	str	r3, [sp, #12]
     f62:	6839      	ldr	r1, [r7, #0]
	if (alt_form) {
     f64:	b1fe      	cbz	r6, fa6 <_prf+0x676>
		*buf++ = '0';
     f66:	2330      	movs	r3, #48	; 0x30
     f68:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
		if (!value) {
     f6c:	bb69      	cbnz	r1, fca <_prf+0x69a>
			prefix = 0;
     f6e:	3501      	adds	r5, #1
     f70:	9b00      	ldr	r3, [sp, #0]
			*buf++ = 0;
     f72:	f88d 106d 	strb.w	r1, [sp, #109]	; 0x6d
			prefix = 0;
     f76:	bf18      	it	ne
     f78:	2320      	movne	r3, #32
     f7a:	4689      	mov	r9, r1
     f7c:	9300      	str	r3, [sp, #0]
				if (c < width) {
     f7e:	9b02      	ldr	r3, [sp, #8]
     f80:	42b3      	cmp	r3, r6
     f82:	dc63      	bgt.n	104c <_prf+0x71c>
							prefix = 0;
     f84:	9c04      	ldr	r4, [sp, #16]
					if ((*func)(*cptr, dest) == EOF)
     f86:	ad1b      	add	r5, sp, #108	; 0x6c
     f88:	4426      	add	r6, r4
     f8a:	1b2d      	subs	r5, r5, r4
     f8c:	1b33      	subs	r3, r6, r4
				for (cptr = buf; c > 0; c--, cptr++, count++) {
     f8e:	2b00      	cmp	r3, #0
     f90:	f77f ad29 	ble.w	9e6 <_prf+0xb6>
					if ((*func)(*cptr, dest) == EOF)
     f94:	9912      	ldr	r1, [sp, #72]	; 0x48
     f96:	5d28      	ldrb	r0, [r5, r4]
     f98:	9b09      	ldr	r3, [sp, #36]	; 0x24
     f9a:	4798      	blx	r3
     f9c:	3001      	adds	r0, #1
     f9e:	f43f ad18 	beq.w	9d2 <_prf+0xa2>
				for (cptr = buf; c > 0; c--, cptr++, count++) {
     fa2:	3401      	adds	r4, #1
     fa4:	e7f2      	b.n	f8c <_prf+0x65c>
	if (alt_form) {
     fa6:	a81b      	add	r0, sp, #108	; 0x6c
	return (buf - buf0) + _to_x(buf, value, 8, precision);
     fa8:	f10d 0a6c 	add.w	sl, sp, #108	; 0x6c
     fac:	462b      	mov	r3, r5
     fae:	2208      	movs	r2, #8
     fb0:	eba0 0a0a 	sub.w	sl, r0, sl
     fb4:	f7ff fc3c 	bl	830 <_to_x>
     fb8:	4450      	add	r0, sl
			prefix = 0;
     fba:	3501      	adds	r5, #1
     fbc:	f04f 0900 	mov.w	r9, #0
     fc0:	9b00      	ldr	r3, [sp, #0]
     fc2:	bf18      	it	ne
     fc4:	2320      	movne	r3, #32
     fc6:	9300      	str	r3, [sp, #0]
     fc8:	e64a      	b.n	c60 <_prf+0x330>
		*buf++ = '0';
     fca:	f10d 006d 	add.w	r0, sp, #109	; 0x6d
     fce:	e7eb      	b.n	fa8 <_prf+0x678>
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
     fd0:	1d3b      	adds	r3, r7, #4
     fd2:	9303      	str	r3, [sp, #12]
		*buf++ = '0';
     fd4:	2330      	movs	r3, #48	; 0x30
     fd6:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
		*buf++ = 'x';
     fda:	2378      	movs	r3, #120	; 0x78
     fdc:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
     fe0:	6839      	ldr	r1, [r7, #0]
	len = _to_x(buf, value, 16, precision);
     fe2:	2308      	movs	r3, #8
     fe4:	2210      	movs	r2, #16
     fe6:	f10d 006e 	add.w	r0, sp, #110	; 0x6e
     fea:	f7ff fc21 	bl	830 <_to_x>
	return len + (buf - buf0);
     fee:	3002      	adds	r0, #2
     ff0:	e7e3      	b.n	fba <_prf+0x68a>
     ff2:	bf00      	nop
     ff4:	33333332 	.word	0x33333332
				for (c = 0; c < MAXFLD; c++) {
     ff8:	3601      	adds	r6, #1
     ffa:	2ec8      	cmp	r6, #200	; 0xc8
     ffc:	f47f adb7 	bne.w	b6e <_prf+0x23e>
				if ((precision >= 0) && (precision < c))
    1000:	2d00      	cmp	r5, #0
    1002:	f6ff adbe 	blt.w	b82 <_prf+0x252>
    1006:	42ae      	cmp	r6, r5
    1008:	bfa8      	it	ge
    100a:	462e      	movge	r6, r5
    100c:	e5b6      	b.n	b7c <_prf+0x24c>
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
    100e:	1d3b      	adds	r3, r7, #4
    1010:	9303      	str	r3, [sp, #12]
	return _to_x(buf, value, 10, precision);
    1012:	220a      	movs	r2, #10
    1014:	462b      	mov	r3, r5
    1016:	6839      	ldr	r1, [r7, #0]
    1018:	a81b      	add	r0, sp, #108	; 0x6c
    101a:	f7ff fc09 	bl	830 <_to_x>
    101e:	e7cc      	b.n	fba <_prf+0x68a>
	if (alt_form) {
    1020:	af1b      	add	r7, sp, #108	; 0x6c
    1022:	e555      	b.n	ad0 <_prf+0x1a0>
		if (*buf >= 'a' && *buf <= 'z') {
    1024:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
    1028:	2919      	cmp	r1, #25
			*buf += 'A' - 'a';
    102a:	bf9c      	itt	ls
    102c:	3b20      	subls	r3, #32
    102e:	7013      	strbls	r3, [r2, #0]
	for (/**/; *buf; buf++) {
    1030:	3201      	adds	r2, #1
    1032:	e555      	b.n	ae0 <_prf+0x1b0>
				if ((*func)('%', dest) == EOF) {
    1034:	9912      	ldr	r1, [sp, #72]	; 0x48
    1036:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1038:	4620      	mov	r0, r4
    103a:	4798      	blx	r3
    103c:	3001      	adds	r0, #1
    103e:	f43f acc8 	beq.w	9d2 <_prf+0xa2>
				count++;
    1042:	9b04      	ldr	r3, [sp, #16]
    1044:	3301      	adds	r3, #1
    1046:	9304      	str	r3, [sp, #16]
			if (c >= MAXFLD + 1)
    1048:	9703      	str	r7, [sp, #12]
    104a:	e786      	b.n	f5a <_prf+0x62a>
					if (fminus)	{
    104c:	9b08      	ldr	r3, [sp, #32]
    104e:	b13b      	cbz	r3, 1060 <_prf+0x730>
							buf[i] = ' ';
    1050:	ab1b      	add	r3, sp, #108	; 0x6c
    1052:	2220      	movs	r2, #32
						for (i = c; i < width; i++)
    1054:	9902      	ldr	r1, [sp, #8]
							buf[i] = ' ';
    1056:	54f2      	strb	r2, [r6, r3]
						for (i = c; i < width; i++)
    1058:	3601      	adds	r6, #1
    105a:	42b1      	cmp	r1, r6
    105c:	d1fa      	bne.n	1054 <_prf+0x724>
    105e:	e791      	b.n	f84 <_prf+0x654>
						(void) memmove((buf + (width - c)), buf, (size_t) (c
    1060:	9b02      	ldr	r3, [sp, #8]
    1062:	ac1b      	add	r4, sp, #108	; 0x6c
    1064:	1b9d      	subs	r5, r3, r6
    1066:	1960      	adds	r0, r4, r5
    1068:	1c72      	adds	r2, r6, #1
    106a:	4621      	mov	r1, r4
    106c:	f7ff fb79 	bl	762 <memmove>
							prefix = 0;
    1070:	9b00      	ldr	r3, [sp, #0]
    1072:	2b20      	cmp	r3, #32
    1074:	bf08      	it	eq
    1076:	f04f 0900 	moveq.w	r9, #0
						c = width - c + prefix;
    107a:	444d      	add	r5, r9
						for (i = prefix; i < c; i++)
    107c:	45a9      	cmp	r9, r5
    107e:	db01      	blt.n	1084 <_prf+0x754>
    1080:	9e02      	ldr	r6, [sp, #8]
    1082:	e77f      	b.n	f84 <_prf+0x654>
							buf[i] = pad;
    1084:	f89d 3000 	ldrb.w	r3, [sp]
    1088:	f809 3004 	strb.w	r3, [r9, r4]
						for (i = prefix; i < c; i++)
    108c:	f109 0901 	add.w	r9, r9, #1
    1090:	e7f4      	b.n	107c <_prf+0x74c>
					prefix = 1;
    1092:	f8dd 9014 	ldr.w	r9, [sp, #20]
    1096:	e5e3      	b.n	c60 <_prf+0x330>

00001098 <sprintf_out>:
	int len;
};

static int sprintf_out(int c, struct emitter *p)
{
	if (p->len > 1) { /* need to reserve a byte for EOS */
    1098:	684b      	ldr	r3, [r1, #4]
    109a:	2b01      	cmp	r3, #1
    109c:	dd07      	ble.n	10ae <sprintf_out+0x16>
		*(p->ptr) = c;
    109e:	680b      	ldr	r3, [r1, #0]
    10a0:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
    10a2:	680b      	ldr	r3, [r1, #0]
    10a4:	3301      	adds	r3, #1
    10a6:	600b      	str	r3, [r1, #0]
		p->len -= 1;
    10a8:	684b      	ldr	r3, [r1, #4]
    10aa:	3b01      	subs	r3, #1
    10ac:	604b      	str	r3, [r1, #4]
	}
	return 0; /* indicate keep going so we get the total count */
}
    10ae:	2000      	movs	r0, #0
    10b0:	4770      	bx	lr
	...

000010b4 <snprintf>:

int snprintf(char *_MLIBC_RESTRICT s, size_t len,
	     const char *_MLIBC_RESTRICT format, ...)
{
    10b4:	b40c      	push	{r2, r3}
    10b6:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
    10b8:	b909      	cbnz	r1, 10be <snprintf+0xa>
		s = &dummy; /* write final NUL to dummy, can't change *s */
    10ba:	f10d 0003 	add.w	r0, sp, #3
	}

	p.ptr = s;
	p.len = (int) len;

	va_start(vargs, format);
    10be:	ab07      	add	r3, sp, #28
	p.ptr = s;
    10c0:	9002      	str	r0, [sp, #8]
	p.len = (int) len;
    10c2:	9103      	str	r1, [sp, #12]
	r = _prf(sprintf_out, (void *) (&p), format, vargs);
    10c4:	9a06      	ldr	r2, [sp, #24]
    10c6:	4806      	ldr	r0, [pc, #24]	; (10e0 <snprintf+0x2c>)
	va_start(vargs, format);
    10c8:	9301      	str	r3, [sp, #4]
	r = _prf(sprintf_out, (void *) (&p), format, vargs);
    10ca:	a902      	add	r1, sp, #8
    10cc:	f7ff fc30 	bl	930 <_prf>
	va_end(vargs);

	*(p.ptr) = 0;
    10d0:	9b02      	ldr	r3, [sp, #8]
    10d2:	2200      	movs	r2, #0
    10d4:	701a      	strb	r2, [r3, #0]
	return r;
}
    10d6:	b005      	add	sp, #20
    10d8:	f85d eb04 	ldr.w	lr, [sp], #4
    10dc:	b002      	add	sp, #8
    10de:	4770      	bx	lr
    10e0:	00001099 	.word	0x00001099

000010e4 <tx_tcp_pool>:
NET_PKT_DATA_POOL_DEFINE(echo_data_tcp, 30);

static struct k_mem_slab *tx_tcp_pool(void)
{
	return &echo_tx_tcp;
}
    10e4:	4800      	ldr	r0, [pc, #0]	; (10e8 <tx_tcp_pool+0x4>)
    10e6:	4770      	bx	lr
    10e8:	2000a960 	.word	0x2000a960

000010ec <data_tcp_pool>:

static struct net_buf_pool *data_tcp_pool(void)
{
	return &echo_data_tcp;
}
    10ec:	4800      	ldr	r0, [pc, #0]	; (10f0 <data_tcp_pool+0x4>)
    10ee:	4770      	bx	lr
    10f0:	2000aa5c 	.word	0x2000aa5c

000010f4 <pkt_sent>:

static inline void pkt_sent(struct net_context *context,
			    int status,
			    void *token,
			    void *user_data)
{
    10f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (!status) {
    10f6:	b949      	cbnz	r1, 110c <pkt_sent+0x18>
		SYS_LOG_DBG("Sent %d bytes", POINTER_TO_UINT(token));
    10f8:	4b06      	ldr	r3, [pc, #24]	; (1114 <pkt_sent+0x20>)
    10fa:	9302      	str	r3, [sp, #8]
    10fc:	9201      	str	r2, [sp, #4]
    10fe:	9300      	str	r3, [sp, #0]
    1100:	4a05      	ldr	r2, [pc, #20]	; (1118 <pkt_sent+0x24>)
    1102:	4b06      	ldr	r3, [pc, #24]	; (111c <pkt_sent+0x28>)
    1104:	4906      	ldr	r1, [pc, #24]	; (1120 <pkt_sent+0x2c>)
    1106:	4807      	ldr	r0, [pc, #28]	; (1124 <pkt_sent+0x30>)
    1108:	f001 f8ca 	bl	22a0 <printk>
	}
}
    110c:	b005      	add	sp, #20
    110e:	f85d fb04 	ldr.w	pc, [sp], #4
    1112:	bf00      	nop
    1114:	00023dbe 	.word	0x00023dbe
    1118:	00022d5c 	.word	0x00022d5c
    111c:	000229e2 	.word	0x000229e2
    1120:	00022d63 	.word	0x00022d63
    1124:	00022d68 	.word	0x00022d68

00001128 <tcp_accepted>:
static void tcp_accepted(struct net_context *context,
			 struct sockaddr *addr,
			 socklen_t addrlen,
			 int error,
			 void *user_data)
{
    1128:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int ret;

	NET_DBG("Accept called, context %p error %d", context, error);

	ret = net_context_recv(context, tcp_received, 0, NULL);
    112a:	2300      	movs	r3, #0
    112c:	461a      	mov	r2, r3
    112e:	490d      	ldr	r1, [pc, #52]	; (1164 <tcp_accepted+0x3c>)
{
    1130:	4604      	mov	r4, r0
	ret = net_context_recv(context, tcp_received, 0, NULL);
    1132:	f019 f917 	bl	1a364 <net_context_recv>
	if (ret < 0) {
    1136:	2800      	cmp	r0, #0
    1138:	da11      	bge.n	115e <tcp_accepted+0x36>
 */
static inline sa_family_t net_context_get_family(struct net_context *context)
{
	NET_ASSERT(context);

	if (context->flags & NET_CONTEXT_FAMILY) {
    113a:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
		SYS_LOG_ERR("Cannot receive TCP packet (family %d)",
    113e:	490a      	ldr	r1, [pc, #40]	; (1168 <tcp_accepted+0x40>)
    1140:	480a      	ldr	r0, [pc, #40]	; (116c <tcp_accepted+0x44>)
		return AF_INET6;
	}

	return AF_INET;
    1142:	f013 0f10 	tst.w	r3, #16
    1146:	bf18      	it	ne
    1148:	220a      	movne	r2, #10
    114a:	4b09      	ldr	r3, [pc, #36]	; (1170 <tcp_accepted+0x48>)
    114c:	9302      	str	r3, [sp, #8]
    114e:	bf08      	it	eq
    1150:	2202      	moveq	r2, #2
    1152:	9201      	str	r2, [sp, #4]
    1154:	9300      	str	r3, [sp, #0]
    1156:	4a07      	ldr	r2, [pc, #28]	; (1174 <tcp_accepted+0x4c>)
    1158:	4b07      	ldr	r3, [pc, #28]	; (1178 <tcp_accepted+0x50>)
    115a:	f001 f8a1 	bl	22a0 <printk>
			    net_context_get_family(context));
	}
}
    115e:	b004      	add	sp, #16
    1160:	bd10      	pop	{r4, pc}
    1162:	bf00      	nop
    1164:	0000145d 	.word	0x0000145d
    1168:	00022d63 	.word	0x00022d63
    116c:	00022d8d 	.word	0x00022d8d
    1170:	00023dbe 	.word	0x00023dbe
    1174:	00022d86 	.word	0x00022d86
    1178:	00022a21 	.word	0x00022a21

0000117c <listen>:
		SYS_LOG_ERR("Cannot receive IPv6 TCP packets (%d)", ret);
	}
}

static void listen(void)
{
    117c:	b570      	push	{r4, r5, r6, lr}
	struct net_context *udp_recv6 = { 0 };
    117e:	2500      	movs	r5, #0
{
    1180:	b098      	sub	sp, #96	; 0x60
	struct sockaddr_in6 mcast_addr6 = { 0 };
    1182:	2218      	movs	r2, #24
    1184:	4629      	mov	r1, r5
    1186:	a80c      	add	r0, sp, #48	; 0x30
	struct net_context *udp_recv6 = { 0 };
    1188:	9505      	str	r5, [sp, #20]
	struct net_context *tcp_recv6 = { 0 };
    118a:	9506      	str	r5, [sp, #24]
	struct net_context *mcast_recv6 = { 0 };
    118c:	9507      	str	r5, [sp, #28]
	struct sockaddr_in6 mcast_addr6 = { 0 };
    118e:	f7ff fb2c 	bl	7ea <memset>
	struct sockaddr_in6 my_addr6 = { 0 };
    1192:	2218      	movs	r2, #24
    1194:	4629      	mov	r1, r5
    1196:	a812      	add	r0, sp, #72	; 0x48
    1198:	f7ff fb27 	bl	7ea <memset>
	net_ipaddr_copy(&mcast_addr6.sin6_addr, &in6addr_mcast);
    119c:	4b6d      	ldr	r3, [pc, #436]	; (1354 <listen+0x1d8>)
    119e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    11a0:	ac08      	add	r4, sp, #32
    11a2:	ae0d      	add	r6, sp, #52	; 0x34
    11a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    11a8:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
	mcast_addr6.sin6_family = AF_INET6;
    11ac:	260a      	movs	r6, #10
	my_addr6.sin6_port = htons(MY_PORT);
    11ae:	f249 2310 	movw	r3, #37392	; 0x9210
    11b2:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
	ret = net_context_get(AF_INET6, SOCK_DGRAM, IPPROTO_UDP, udp_recv6);
    11b6:	2211      	movs	r2, #17
    11b8:	ab05      	add	r3, sp, #20
    11ba:	2102      	movs	r1, #2
    11bc:	4630      	mov	r0, r6
	mcast_addr6.sin6_family = AF_INET6;
    11be:	f8ad 6030 	strh.w	r6, [sp, #48]	; 0x30
	my_addr6.sin6_family = AF_INET6;
    11c2:	f8ad 6048 	strh.w	r6, [sp, #72]	; 0x48
	ret = net_context_get(AF_INET6, SOCK_DGRAM, IPPROTO_UDP, udp_recv6);
    11c6:	f018 fae7 	bl	19798 <net_context_get>
	if (ret < 0) {
    11ca:	2800      	cmp	r0, #0
    11cc:	4c62      	ldr	r4, [pc, #392]	; (1358 <listen+0x1dc>)
    11ce:	da09      	bge.n	11e4 <listen+0x68>
		SYS_LOG_ERR("Cannot get network context for IPv6 UDP (%d)",
    11d0:	9001      	str	r0, [sp, #4]
    11d2:	4b62      	ldr	r3, [pc, #392]	; (135c <listen+0x1e0>)
    11d4:	4a62      	ldr	r2, [pc, #392]	; (1360 <listen+0x1e4>)
    11d6:	4963      	ldr	r1, [pc, #396]	; (1364 <listen+0x1e8>)
    11d8:	4863      	ldr	r0, [pc, #396]	; (1368 <listen+0x1ec>)
    11da:	9402      	str	r4, [sp, #8]
    11dc:	9400      	str	r4, [sp, #0]
		SYS_LOG_ERR("Cannot listen IPv6 TCP (%d)", ret);
    11de:	f001 f85f 	bl	22a0 <printk>
    11e2:	e016      	b.n	1212 <listen+0x96>
	ret = net_context_bind(*udp_recv6, (struct sockaddr *)&my_addr6,
    11e4:	2218      	movs	r2, #24
    11e6:	a912      	add	r1, sp, #72	; 0x48
    11e8:	9805      	ldr	r0, [sp, #20]
    11ea:	f018 fd47 	bl	19c7c <net_context_bind>
	if (ret < 0) {
    11ee:	2800      	cmp	r0, #0
    11f0:	da18      	bge.n	1224 <listen+0xa8>
		SYS_LOG_ERR("Cannot bind IPv6 UDP port %d (%d)",
    11f2:	f8bd 204a 	ldrh.w	r2, [sp, #74]	; 0x4a
    11f6:	9002      	str	r0, [sp, #8]
    11f8:	0213      	lsls	r3, r2, #8
    11fa:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
    11fe:	b29b      	uxth	r3, r3
    1200:	9301      	str	r3, [sp, #4]
    1202:	4a57      	ldr	r2, [pc, #348]	; (1360 <listen+0x1e4>)
    1204:	4b55      	ldr	r3, [pc, #340]	; (135c <listen+0x1e0>)
    1206:	4957      	ldr	r1, [pc, #348]	; (1364 <listen+0x1e8>)
    1208:	4858      	ldr	r0, [pc, #352]	; (136c <listen+0x1f0>)
    120a:	9403      	str	r4, [sp, #12]
    120c:	9400      	str	r4, [sp, #0]
		SYS_LOG_ERR("Cannot bind IPv6 TCP port %d (%d)",
    120e:	f001 f847 	bl	22a0 <printk>

	if (!get_context(&udp_recv6, &tcp_recv6, &mcast_recv6)) {
		SYS_LOG_ERR("Cannot get network contexts");
    1212:	9401      	str	r4, [sp, #4]
    1214:	9400      	str	r4, [sp, #0]
    1216:	4b56      	ldr	r3, [pc, #344]	; (1370 <listen+0x1f4>)
    1218:	4a51      	ldr	r2, [pc, #324]	; (1360 <listen+0x1e4>)
    121a:	4952      	ldr	r1, [pc, #328]	; (1364 <listen+0x1e8>)
    121c:	4855      	ldr	r0, [pc, #340]	; (1374 <listen+0x1f8>)
    121e:	f001 f83f 	bl	22a0 <printk>
    1222:	e095      	b.n	1350 <listen+0x1d4>
	ret = net_context_get(AF_INET6, SOCK_DGRAM, IPPROTO_UDP, mcast_recv6);
    1224:	ab07      	add	r3, sp, #28
    1226:	2211      	movs	r2, #17
    1228:	2102      	movs	r1, #2
    122a:	4630      	mov	r0, r6
    122c:	f018 fab4 	bl	19798 <net_context_get>
	if (ret < 0) {
    1230:	2800      	cmp	r0, #0
    1232:	da07      	bge.n	1244 <listen+0xc8>
		SYS_LOG_ERR("Cannot get receiving IPv6 mcast network context"
    1234:	9001      	str	r0, [sp, #4]
    1236:	9402      	str	r4, [sp, #8]
    1238:	9400      	str	r4, [sp, #0]
    123a:	4b48      	ldr	r3, [pc, #288]	; (135c <listen+0x1e0>)
    123c:	4a48      	ldr	r2, [pc, #288]	; (1360 <listen+0x1e4>)
    123e:	4949      	ldr	r1, [pc, #292]	; (1364 <listen+0x1e8>)
    1240:	484d      	ldr	r0, [pc, #308]	; (1378 <listen+0x1fc>)
    1242:	e7cc      	b.n	11de <listen+0x62>
	ret = net_context_bind(*mcast_recv6, (struct sockaddr *)&mcast_addr6,
    1244:	2218      	movs	r2, #24
    1246:	a90c      	add	r1, sp, #48	; 0x30
    1248:	9807      	ldr	r0, [sp, #28]
    124a:	f018 fd17 	bl	19c7c <net_context_bind>
	if (ret < 0) {
    124e:	2800      	cmp	r0, #0
    1250:	da07      	bge.n	1262 <listen+0xe6>
		SYS_LOG_ERR("Cannot bind IPv6 mcast (%d)", ret);
    1252:	9001      	str	r0, [sp, #4]
    1254:	9402      	str	r4, [sp, #8]
    1256:	9400      	str	r4, [sp, #0]
    1258:	4b40      	ldr	r3, [pc, #256]	; (135c <listen+0x1e0>)
    125a:	4a41      	ldr	r2, [pc, #260]	; (1360 <listen+0x1e4>)
    125c:	4941      	ldr	r1, [pc, #260]	; (1364 <listen+0x1e8>)
    125e:	4847      	ldr	r0, [pc, #284]	; (137c <listen+0x200>)
    1260:	e7bd      	b.n	11de <listen+0x62>
	ret = net_context_get(AF_INET6, SOCK_STREAM, IPPROTO_TCP, tcp_recv6);
    1262:	ab06      	add	r3, sp, #24
    1264:	2206      	movs	r2, #6
    1266:	2101      	movs	r1, #1
    1268:	4630      	mov	r0, r6
    126a:	f018 fa95 	bl	19798 <net_context_get>
	if (ret < 0) {
    126e:	2800      	cmp	r0, #0
    1270:	da07      	bge.n	1282 <listen+0x106>
		SYS_LOG_ERR("Cannot get network context for IPv6 TCP (%d)",
    1272:	9001      	str	r0, [sp, #4]
    1274:	9402      	str	r4, [sp, #8]
    1276:	9400      	str	r4, [sp, #0]
    1278:	4b38      	ldr	r3, [pc, #224]	; (135c <listen+0x1e0>)
    127a:	4a39      	ldr	r2, [pc, #228]	; (1360 <listen+0x1e4>)
    127c:	4939      	ldr	r1, [pc, #228]	; (1364 <listen+0x1e8>)
    127e:	4840      	ldr	r0, [pc, #256]	; (1380 <listen+0x204>)
    1280:	e7ad      	b.n	11de <listen+0x62>
	net_context_setup_pools(*tcp_recv6, tx_tcp_pool, data_tcp_pool);
    1282:	9806      	ldr	r0, [sp, #24]
					   net_pkt_get_slab_func_t tx_slab,
					   net_pkt_get_pool_func_t data_pool)
{
	NET_ASSERT(context);

	context->tx_slab = tx_slab;
    1284:	4b3f      	ldr	r3, [pc, #252]	; (1384 <listen+0x208>)
    1286:	63c3      	str	r3, [r0, #60]	; 0x3c
	context->data_pool = data_pool;
    1288:	4b3f      	ldr	r3, [pc, #252]	; (1388 <listen+0x20c>)
    128a:	6403      	str	r3, [r0, #64]	; 0x40
	ret = net_context_bind(*tcp_recv6, (struct sockaddr *)&my_addr6,
    128c:	2218      	movs	r2, #24
    128e:	a912      	add	r1, sp, #72	; 0x48
    1290:	f018 fcf4 	bl	19c7c <net_context_bind>
	if (ret < 0) {
    1294:	2800      	cmp	r0, #0
    1296:	da0e      	bge.n	12b6 <listen+0x13a>
		SYS_LOG_ERR("Cannot bind IPv6 TCP port %d (%d)",
    1298:	f8bd 204a 	ldrh.w	r2, [sp, #74]	; 0x4a
    129c:	9002      	str	r0, [sp, #8]
    129e:	0213      	lsls	r3, r2, #8
    12a0:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
    12a4:	b29b      	uxth	r3, r3
    12a6:	9301      	str	r3, [sp, #4]
    12a8:	9403      	str	r4, [sp, #12]
    12aa:	9400      	str	r4, [sp, #0]
    12ac:	4b2b      	ldr	r3, [pc, #172]	; (135c <listen+0x1e0>)
    12ae:	4a2c      	ldr	r2, [pc, #176]	; (1360 <listen+0x1e4>)
    12b0:	492c      	ldr	r1, [pc, #176]	; (1364 <listen+0x1e8>)
    12b2:	4836      	ldr	r0, [pc, #216]	; (138c <listen+0x210>)
    12b4:	e7ab      	b.n	120e <listen+0x92>
	ret = net_context_listen(*tcp_recv6, 0);
    12b6:	4629      	mov	r1, r5
    12b8:	9806      	ldr	r0, [sp, #24]
    12ba:	f018 ff93 	bl	1a1e4 <net_context_listen>
	if (ret < 0) {
    12be:	2800      	cmp	r0, #0
    12c0:	da07      	bge.n	12d2 <listen+0x156>
		SYS_LOG_ERR("Cannot listen IPv6 TCP (%d)", ret);
    12c2:	9001      	str	r0, [sp, #4]
    12c4:	9402      	str	r4, [sp, #8]
    12c6:	9400      	str	r4, [sp, #0]
    12c8:	4b24      	ldr	r3, [pc, #144]	; (135c <listen+0x1e0>)
    12ca:	4a25      	ldr	r2, [pc, #148]	; (1360 <listen+0x1e4>)
    12cc:	4925      	ldr	r1, [pc, #148]	; (1364 <listen+0x1e8>)
    12ce:	4830      	ldr	r0, [pc, #192]	; (1390 <listen+0x214>)
    12d0:	e785      	b.n	11de <listen+0x62>
		return;
	}

	SYS_LOG_INF("Starting to wait");
    12d2:	4b27      	ldr	r3, [pc, #156]	; (1370 <listen+0x1f4>)
    12d4:	4a2f      	ldr	r2, [pc, #188]	; (1394 <listen+0x218>)
    12d6:	4923      	ldr	r1, [pc, #140]	; (1364 <listen+0x1e8>)
    12d8:	9401      	str	r4, [sp, #4]
    12da:	9400      	str	r4, [sp, #0]
    12dc:	482e      	ldr	r0, [pc, #184]	; (1398 <listen+0x21c>)
    12de:	f000 ffdf 	bl	22a0 <printk>
	ret = net_context_accept(tcp_recv6, tcp_accepted, K_NO_WAIT, NULL);
    12e2:	462b      	mov	r3, r5
    12e4:	462a      	mov	r2, r5
    12e6:	492d      	ldr	r1, [pc, #180]	; (139c <listen+0x220>)
    12e8:	9806      	ldr	r0, [sp, #24]
    12ea:	f018 ff97 	bl	1a21c <net_context_accept>
	if (ret < 0) {
    12ee:	2800      	cmp	r0, #0
    12f0:	da08      	bge.n	1304 <listen+0x188>
		SYS_LOG_ERR("Cannot receive IPv6 TCP packets (%d)", ret);
    12f2:	9001      	str	r0, [sp, #4]
    12f4:	9402      	str	r4, [sp, #8]
    12f6:	9400      	str	r4, [sp, #0]
    12f8:	4b29      	ldr	r3, [pc, #164]	; (13a0 <listen+0x224>)
    12fa:	4a19      	ldr	r2, [pc, #100]	; (1360 <listen+0x1e4>)
    12fc:	4919      	ldr	r1, [pc, #100]	; (1364 <listen+0x1e8>)
    12fe:	4829      	ldr	r0, [pc, #164]	; (13a4 <listen+0x228>)
    1300:	f000 ffce 	bl	22a0 <printk>
	ret = net_context_recv(udp_recv6, udp_received, 0, NULL);
    1304:	2300      	movs	r3, #0
    1306:	461a      	mov	r2, r3
    1308:	4927      	ldr	r1, [pc, #156]	; (13a8 <listen+0x22c>)
    130a:	9805      	ldr	r0, [sp, #20]
    130c:	f019 f82a 	bl	1a364 <net_context_recv>
	if (ret < 0) {
    1310:	2800      	cmp	r0, #0
    1312:	da07      	bge.n	1324 <listen+0x1a8>
		SYS_LOG_ERR("Cannot receive IPv6 UDP packets");
    1314:	9401      	str	r4, [sp, #4]
    1316:	9400      	str	r4, [sp, #0]
    1318:	4b24      	ldr	r3, [pc, #144]	; (13ac <listen+0x230>)
    131a:	4a11      	ldr	r2, [pc, #68]	; (1360 <listen+0x1e4>)
    131c:	4911      	ldr	r1, [pc, #68]	; (1364 <listen+0x1e8>)
    131e:	4824      	ldr	r0, [pc, #144]	; (13b0 <listen+0x234>)
    1320:	f000 ffbe 	bl	22a0 <printk>

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex);

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);

K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    1324:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    1328:	4822      	ldr	r0, [pc, #136]	; (13b4 <listen+0x238>)
    132a:	f020 fca3 	bl	21c74 <_impl_k_sem_take>
	setup_tcp_accept(tcp_recv6);
	setup_udp_recv(udp_recv6);

	k_sem_take(&quit_lock, K_FOREVER);

	SYS_LOG_INF("Stopping...");
    132e:	4b10      	ldr	r3, [pc, #64]	; (1370 <listen+0x1f4>)
    1330:	4a18      	ldr	r2, [pc, #96]	; (1394 <listen+0x218>)
    1332:	490c      	ldr	r1, [pc, #48]	; (1364 <listen+0x1e8>)
    1334:	9401      	str	r4, [sp, #4]
    1336:	9400      	str	r4, [sp, #0]
    1338:	481f      	ldr	r0, [pc, #124]	; (13b8 <listen+0x23c>)
    133a:	f000 ffb1 	bl	22a0 <printk>

	net_context_put(udp_recv6);
    133e:	9805      	ldr	r0, [sp, #20]
    1340:	f018 fc52 	bl	19be8 <net_context_put>
	net_context_put(mcast_recv6);
    1344:	9807      	ldr	r0, [sp, #28]
    1346:	f018 fc4f 	bl	19be8 <net_context_put>
	net_context_put(tcp_recv6);
    134a:	9806      	ldr	r0, [sp, #24]
    134c:	f018 fc4c 	bl	19be8 <net_context_put>
}
    1350:	b018      	add	sp, #96	; 0x60
    1352:	bd70      	pop	{r4, r5, r6, pc}
    1354:	20009c68 	.word	0x20009c68
    1358:	00023dbe 	.word	0x00023dbe
    135c:	000229c6 	.word	0x000229c6
    1360:	00022d86 	.word	0x00022d86
    1364:	00022d63 	.word	0x00022d63
    1368:	00022a9f 	.word	0x00022a9f
    136c:	00022adc 	.word	0x00022adc
    1370:	00022a3f 	.word	0x00022a3f
    1374:	00022ca1 	.word	0x00022ca1
    1378:	00022b0e 	.word	0x00022b0e
    137c:	00022b52 	.word	0x00022b52
    1380:	00022b7e 	.word	0x00022b7e
    1384:	000010e5 	.word	0x000010e5
    1388:	000010ed 	.word	0x000010ed
    138c:	00022bbb 	.word	0x00022bbb
    1390:	00022bed 	.word	0x00022bed
    1394:	00022c7e 	.word	0x00022c7e
    1398:	00022ccd 	.word	0x00022ccd
    139c:	00001129 	.word	0x00001129
    13a0:	00022a2e 	.word	0x00022a2e
    13a4:	00022c19 	.word	0x00022c19
    13a8:	00001501 	.word	0x00001501
    13ac:	00022a05 	.word	0x00022a05
    13b0:	00022c4e 	.word	0x00022c4e
    13b4:	20000084 	.word	0x20000084
    13b8:	00022c85 	.word	0x00022c85

000013bc <build_reply_pkt>:
{
    13bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    13c0:	b085      	sub	sp, #20
	SYS_LOG_DBG("%s received %d bytes", name, net_pkt_appdatalen(pkt));
    13c2:	4d20      	ldr	r5, [pc, #128]	; (1444 <build_reply_pkt+0x88>)
    13c4:	9503      	str	r5, [sp, #12]
    13c6:	8e53      	ldrh	r3, [r2, #50]	; 0x32
    13c8:	9302      	str	r3, [sp, #8]
{
    13ca:	460c      	mov	r4, r1
    13cc:	4617      	mov	r7, r2
	SYS_LOG_DBG("%s received %d bytes", name, net_pkt_appdatalen(pkt));
    13ce:	9001      	str	r0, [sp, #4]
    13d0:	4b1d      	ldr	r3, [pc, #116]	; (1448 <build_reply_pkt+0x8c>)
    13d2:	4a1e      	ldr	r2, [pc, #120]	; (144c <build_reply_pkt+0x90>)
    13d4:	491e      	ldr	r1, [pc, #120]	; (1450 <build_reply_pkt+0x94>)
    13d6:	9500      	str	r5, [sp, #0]
    13d8:	481e      	ldr	r0, [pc, #120]	; (1454 <build_reply_pkt+0x98>)
    13da:	f000 ff61 	bl	22a0 <printk>
	reply_pkt = net_pkt_get_tx(context, K_FOREVER);
    13de:	4620      	mov	r0, r4
    13e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    13e4:	f01a fa0e 	bl	1b804 <net_pkt_get_tx>
    13e8:	f8d7 9008 	ldr.w	r9, [r7, #8]
    13ec:	4680      	mov	r8, r0
    13ee:	464c      	mov	r4, r9
 *
 *  @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
	size_t bytes = 0;
    13f0:	2600      	movs	r6, #0

	while (buf) {
    13f2:	b9f4      	cbnz	r4, 1432 <build_reply_pkt+0x76>
	header_len = net_pkt_appdata(pkt) - tmp->data;
    13f4:	4648      	mov	r0, r9
	pkt->frags = NULL;
    13f6:	60bc      	str	r4, [r7, #8]
	header_len = net_pkt_appdata(pkt) - tmp->data;
    13f8:	f850 3f08 	ldr.w	r3, [r0, #8]!
    13fc:	69bf      	ldr	r7, [r7, #24]
    13fe:	1aff      	subs	r7, r7, r3
	net_buf_pull(tmp, header_len);
    1400:	4639      	mov	r1, r7
    1402:	f018 f823 	bl	1944c <net_buf_simple_pull>
	net_pkt_frag_add(reply_pkt, tmp);
    1406:	4649      	mov	r1, r9
    1408:	4640      	mov	r0, r8
    140a:	f01a fa67 	bl	1b8dc <net_pkt_frag_add>
    140e:	f8d8 3008 	ldr.w	r3, [r8, #8]
    1412:	b993      	cbnz	r3, 143a <build_reply_pkt+0x7e>
	SYS_LOG_DBG("Received %d bytes, sending %d bytes",
    1414:	1bf6      	subs	r6, r6, r7
    1416:	9503      	str	r5, [sp, #12]
    1418:	9402      	str	r4, [sp, #8]
    141a:	e88d 0060 	stmia.w	sp, {r5, r6}
    141e:	4b0a      	ldr	r3, [pc, #40]	; (1448 <build_reply_pkt+0x8c>)
    1420:	4a0a      	ldr	r2, [pc, #40]	; (144c <build_reply_pkt+0x90>)
    1422:	490b      	ldr	r1, [pc, #44]	; (1450 <build_reply_pkt+0x94>)
    1424:	480c      	ldr	r0, [pc, #48]	; (1458 <build_reply_pkt+0x9c>)
    1426:	f000 ff3b 	bl	22a0 <printk>
}
    142a:	4640      	mov	r0, r8
    142c:	b005      	add	sp, #20
    142e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes += buf->len;
    1432:	89a3      	ldrh	r3, [r4, #12]
		buf = buf->frags;
    1434:	6824      	ldr	r4, [r4, #0]
		bytes += buf->len;
    1436:	441e      	add	r6, r3
    1438:	e7db      	b.n	13f2 <build_reply_pkt+0x36>
    143a:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
    143c:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
    143e:	4414      	add	r4, r2
    1440:	e7e7      	b.n	1412 <build_reply_pkt+0x56>
    1442:	bf00      	nop
    1444:	00023dbe 	.word	0x00023dbe
    1448:	000229d2 	.word	0x000229d2
    144c:	00022d5c 	.word	0x00022d5c
    1450:	00022d63 	.word	0x00022d63
    1454:	00022a46 	.word	0x00022a46
    1458:	00022a6b 	.word	0x00022a6b

0000145c <tcp_received>:
{
    145c:	b530      	push	{r4, r5, lr}
    145e:	4605      	mov	r5, r0
    1460:	b085      	sub	sp, #20
	if (!pkt) {
    1462:	460c      	mov	r4, r1
    1464:	2900      	cmp	r1, #0
    1466:	d036      	beq.n	14d6 <tcp_received+0x7a>
#endif
}

static inline u8_t net_pkt_family(struct net_pkt *pkt)
{
	return pkt->family;
    1468:	f891 303c 	ldrb.w	r3, [r1, #60]	; 0x3c
	snprintf(dbg, MAX_DBG_PRINT, "TCP IPv%c",
    146c:	4a1b      	ldr	r2, [pc, #108]	; (14dc <tcp_received+0x80>)
    146e:	481c      	ldr	r0, [pc, #112]	; (14e0 <tcp_received+0x84>)
    1470:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    1474:	2b0a      	cmp	r3, #10
    1476:	bf0c      	ite	eq
    1478:	2336      	moveq	r3, #54	; 0x36
    147a:	2334      	movne	r3, #52	; 0x34
    147c:	2140      	movs	r1, #64	; 0x40
    147e:	f7ff fe19 	bl	10b4 <snprintf>
	reply_pkt = build_reply_pkt(dbg, context, pkt);
    1482:	4622      	mov	r2, r4
    1484:	4629      	mov	r1, r5
    1486:	4816      	ldr	r0, [pc, #88]	; (14e0 <tcp_received+0x84>)
    1488:	f7ff ff98 	bl	13bc <build_reply_pkt>
    148c:	4605      	mov	r5, r0
	net_pkt_unref(pkt);
    148e:	4620      	mov	r0, r4
    1490:	f01a f9fd 	bl	1b88e <net_pkt_unref>
    1494:	68aa      	ldr	r2, [r5, #8]
	size_t bytes = 0;
    1496:	2300      	movs	r3, #0
	while (buf) {
    1498:	b9ca      	cbnz	r2, 14ce <tcp_received+0x72>
	ret = net_context_send(reply_pkt, pkt_sent, K_NO_WAIT,
    149a:	9200      	str	r2, [sp, #0]
    149c:	4911      	ldr	r1, [pc, #68]	; (14e4 <tcp_received+0x88>)
    149e:	4628      	mov	r0, r5
    14a0:	f018 ff2a 	bl	1a2f8 <net_context_send>
	if (ret < 0) {
    14a4:	2800      	cmp	r0, #0
    14a6:	da16      	bge.n	14d6 <tcp_received+0x7a>
		SYS_LOG_ERR("Cannot send data to peer (%d)", ret);
    14a8:	4b0f      	ldr	r3, [pc, #60]	; (14e8 <tcp_received+0x8c>)
    14aa:	9302      	str	r3, [sp, #8]
    14ac:	9001      	str	r0, [sp, #4]
    14ae:	9300      	str	r3, [sp, #0]
    14b0:	4a0e      	ldr	r2, [pc, #56]	; (14ec <tcp_received+0x90>)
    14b2:	4b0f      	ldr	r3, [pc, #60]	; (14f0 <tcp_received+0x94>)
    14b4:	490f      	ldr	r1, [pc, #60]	; (14f4 <tcp_received+0x98>)
    14b6:	4810      	ldr	r0, [pc, #64]	; (14f8 <tcp_received+0x9c>)
    14b8:	f000 fef2 	bl	22a0 <printk>
		net_pkt_unref(reply_pkt);
    14bc:	4628      	mov	r0, r5
    14be:	f01a f9e6 	bl	1b88e <net_pkt_unref>

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    14c2:	480e      	ldr	r0, [pc, #56]	; (14fc <tcp_received+0xa0>)
}
    14c4:	b005      	add	sp, #20
    14c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    14ca:	f020 bb73 	b.w	21bb4 <_impl_k_sem_give>
		bytes += buf->len;
    14ce:	8991      	ldrh	r1, [r2, #12]
		buf = buf->frags;
    14d0:	6812      	ldr	r2, [r2, #0]
		bytes += buf->len;
    14d2:	440b      	add	r3, r1
    14d4:	e7e0      	b.n	1498 <tcp_received+0x3c>
    14d6:	b005      	add	sp, #20
    14d8:	bd30      	pop	{r4, r5, pc}
    14da:	bf00      	nop
    14dc:	00022dc3 	.word	0x00022dc3
    14e0:	20000041 	.word	0x20000041
    14e4:	000010f5 	.word	0x000010f5
    14e8:	00023dbe 	.word	0x00023dbe
    14ec:	00022d86 	.word	0x00022d86
    14f0:	00022a14 	.word	0x00022a14
    14f4:	00022d63 	.word	0x00022d63
    14f8:	00022dcd 	.word	0x00022dcd
    14fc:	20000084 	.word	0x20000084

00001500 <udp_received>:
{
    1500:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1504:	f891 503c 	ldrb.w	r5, [r1, #60]	; 0x3c
	snprintf(dbg, MAX_DBG_PRINT, "UDP IPv%c",
    1508:	4a37      	ldr	r2, [pc, #220]	; (15e8 <udp_received+0xe8>)
	sa_family_t family = net_pkt_family(pkt);
    150a:	f3c5 05c3 	ubfx	r5, r5, #3, #4
	snprintf(dbg, MAX_DBG_PRINT, "UDP IPv%c",
    150e:	2d0a      	cmp	r5, #10
{
    1510:	461f      	mov	r7, r3
    1512:	b091      	sub	sp, #68	; 0x44
    1514:	460c      	mov	r4, r1
	snprintf(dbg, MAX_DBG_PRINT, "UDP IPv%c",
    1516:	bf0c      	ite	eq
    1518:	2336      	moveq	r3, #54	; 0x36
    151a:	2334      	movne	r3, #52	; 0x34
    151c:	2140      	movs	r1, #64	; 0x40
{
    151e:	4680      	mov	r8, r0
	snprintf(dbg, MAX_DBG_PRINT, "UDP IPv%c",
    1520:	4832      	ldr	r0, [pc, #200]	; (15ec <udp_received+0xec>)
    1522:	f7ff fdc7 	bl	10b4 <snprintf>
	udp_hdr = net_udp_get_hdr(pkt, &hdr);
    1526:	a904      	add	r1, sp, #16
    1528:	4620      	mov	r0, r4
    152a:	f01f fb5d 	bl	20be8 <net_udp_get_hdr>
	if (!udp_hdr) {
    152e:	4686      	mov	lr, r0
    1530:	2800      	cmp	r0, #0
    1532:	d133      	bne.n	159c <udp_received+0x9c>
		SYS_LOG_ERR("Invalid UDP data");
    1534:	4b2e      	ldr	r3, [pc, #184]	; (15f0 <udp_received+0xf0>)
    1536:	9301      	str	r3, [sp, #4]
    1538:	9300      	str	r3, [sp, #0]
    153a:	4a2e      	ldr	r2, [pc, #184]	; (15f4 <udp_received+0xf4>)
    153c:	4b2e      	ldr	r3, [pc, #184]	; (15f8 <udp_received+0xf8>)
    153e:	492f      	ldr	r1, [pc, #188]	; (15fc <udp_received+0xfc>)
    1540:	482f      	ldr	r0, [pc, #188]	; (1600 <udp_received+0x100>)
    1542:	f000 fead 	bl	22a0 <printk>
	reply_pkt = build_reply_pkt(dbg, context, pkt);
    1546:	4622      	mov	r2, r4
    1548:	4641      	mov	r1, r8
    154a:	4828      	ldr	r0, [pc, #160]	; (15ec <udp_received+0xec>)
    154c:	f7ff ff36 	bl	13bc <build_reply_pkt>
    1550:	4606      	mov	r6, r0
	net_pkt_unref(pkt);
    1552:	4620      	mov	r0, r4
    1554:	f01a f99b 	bl	1b88e <net_pkt_unref>
	ret = net_context_sendto(reply_pkt, &dst_addr,
    1558:	2d0a      	cmp	r5, #10
    155a:	68b3      	ldr	r3, [r6, #8]
    155c:	bf0c      	ite	eq
    155e:	2218      	moveq	r2, #24
    1560:	2208      	movne	r2, #8
	size_t bytes = 0;
    1562:	2100      	movs	r1, #0
	while (buf) {
    1564:	2b00      	cmp	r3, #0
    1566:	d13a      	bne.n	15de <udp_received+0xde>
    1568:	9101      	str	r1, [sp, #4]
    156a:	9300      	str	r3, [sp, #0]
    156c:	9702      	str	r7, [sp, #8]
    156e:	4b25      	ldr	r3, [pc, #148]	; (1604 <udp_received+0x104>)
    1570:	a90a      	add	r1, sp, #40	; 0x28
    1572:	4630      	mov	r0, r6
    1574:	f018 fedd 	bl	1a332 <net_context_sendto>
	if (ret < 0) {
    1578:	2800      	cmp	r0, #0
    157a:	da0c      	bge.n	1596 <udp_received+0x96>
		SYS_LOG_ERR("Cannot send data to peer (%d)", ret);
    157c:	4b1c      	ldr	r3, [pc, #112]	; (15f0 <udp_received+0xf0>)
    157e:	9302      	str	r3, [sp, #8]
    1580:	9001      	str	r0, [sp, #4]
    1582:	9300      	str	r3, [sp, #0]
    1584:	4a1b      	ldr	r2, [pc, #108]	; (15f4 <udp_received+0xf4>)
    1586:	4b20      	ldr	r3, [pc, #128]	; (1608 <udp_received+0x108>)
    1588:	491c      	ldr	r1, [pc, #112]	; (15fc <udp_received+0xfc>)
    158a:	4820      	ldr	r0, [pc, #128]	; (160c <udp_received+0x10c>)
    158c:	f000 fe88 	bl	22a0 <printk>
		net_pkt_unref(reply_pkt);
    1590:	4630      	mov	r0, r6
    1592:	f01a f97c 	bl	1b88e <net_pkt_unref>
}
    1596:	b011      	add	sp, #68	; 0x44
    1598:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return net_buf_frags_len(pkt->frags);
}

static inline u8_t *net_pkt_ip_data(struct net_pkt *pkt)
{
	return pkt->frags->data;
    159c:	68a3      	ldr	r3, [r4, #8]
	net_ipaddr_copy(&net_sin6(dst_addr)->sin6_addr,
    159e:	689e      	ldr	r6, [r3, #8]
    15a0:	f10d 0c18 	add.w	ip, sp, #24
    15a4:	f106 0308 	add.w	r3, r6, #8
    15a8:	4662      	mov	r2, ip
    15aa:	3618      	adds	r6, #24
    15ac:	6818      	ldr	r0, [r3, #0]
    15ae:	6859      	ldr	r1, [r3, #4]
    15b0:	46e1      	mov	r9, ip
    15b2:	e8a9 0003 	stmia.w	r9!, {r0, r1}
    15b6:	3308      	adds	r3, #8
    15b8:	42b3      	cmp	r3, r6
    15ba:	46cc      	mov	ip, r9
    15bc:	d1f6      	bne.n	15ac <udp_received+0xac>
    15be:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
    15c0:	ae0b      	add	r6, sp, #44	; 0x2c
    15c2:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
	net_sin6(dst_addr)->sin6_family = AF_INET6;
    15c6:	230a      	movs	r3, #10
	net_sin6(dst_addr)->sin6_port = udp_hdr->src_port;
    15c8:	f89e 2001 	ldrb.w	r2, [lr, #1]
	net_sin6(dst_addr)->sin6_family = AF_INET6;
    15cc:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	net_sin6(dst_addr)->sin6_port = udp_hdr->src_port;
    15d0:	f89e 3000 	ldrb.w	r3, [lr]
    15d4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    15d8:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
    15dc:	e7b3      	b.n	1546 <udp_received+0x46>
		bytes += buf->len;
    15de:	8998      	ldrh	r0, [r3, #12]
		buf = buf->frags;
    15e0:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
    15e2:	4401      	add	r1, r0
    15e4:	e7be      	b.n	1564 <udp_received+0x64>
    15e6:	bf00      	nop
    15e8:	00022dfb 	.word	0x00022dfb
    15ec:	20000000 	.word	0x20000000
    15f0:	00023dbe 	.word	0x00023dbe
    15f4:	00022d86 	.word	0x00022d86
    15f8:	000229eb 	.word	0x000229eb
    15fc:	00022d63 	.word	0x00022d63
    1600:	00022e05 	.word	0x00022e05
    1604:	000010f5 	.word	0x000010f5
    1608:	000229f8 	.word	0x000229f8
    160c:	00022dcd 	.word	0x00022dcd

00001610 <main>:

void main(void)
{
    1610:	b530      	push	{r4, r5, lr}
    1612:	b087      	sub	sp, #28
	SYS_LOG_INF("Run IPSP sample");
    1614:	4c20      	ldr	r4, [pc, #128]	; (1698 <main+0x88>)
	printk("enterd");
    1616:	4821      	ldr	r0, [pc, #132]	; (169c <main+0x8c>)
	if (net_addr_pton(AF_INET6,
    1618:	4d21      	ldr	r5, [pc, #132]	; (16a0 <main+0x90>)
	printk("enterd");
    161a:	f000 fe41 	bl	22a0 <printk>
	SYS_LOG_INF("Run IPSP sample");
    161e:	4b21      	ldr	r3, [pc, #132]	; (16a4 <main+0x94>)
    1620:	4a21      	ldr	r2, [pc, #132]	; (16a8 <main+0x98>)
    1622:	4922      	ldr	r1, [pc, #136]	; (16ac <main+0x9c>)
    1624:	9401      	str	r4, [sp, #4]
    1626:	9400      	str	r4, [sp, #0]
    1628:	4821      	ldr	r0, [pc, #132]	; (16b0 <main+0xa0>)
    162a:	f000 fe39 	bl	22a0 <printk>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    162e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1632:	2100      	movs	r1, #0
    1634:	481f      	ldr	r0, [pc, #124]	; (16b4 <main+0xa4>)
    1636:	f020 fab3 	bl	21ba0 <_impl_k_sem_init>
	if (net_addr_pton(AF_INET6,
    163a:	4a1f      	ldr	r2, [pc, #124]	; (16b8 <main+0xa8>)
    163c:	4629      	mov	r1, r5
    163e:	200a      	movs	r0, #10
    1640:	f01a fcd5 	bl	1bfee <net_addr_pton>
    1644:	2800      	cmp	r0, #0
    1646:	da08      	bge.n	165a <main+0x4a>
		SYS_LOG_ERR("Invalid IPv6 address %s",
    1648:	9402      	str	r4, [sp, #8]
    164a:	e88d 0030 	stmia.w	sp, {r4, r5}
    164e:	4b15      	ldr	r3, [pc, #84]	; (16a4 <main+0x94>)
    1650:	4a1a      	ldr	r2, [pc, #104]	; (16bc <main+0xac>)
    1652:	4916      	ldr	r1, [pc, #88]	; (16ac <main+0x9c>)
    1654:	481a      	ldr	r0, [pc, #104]	; (16c0 <main+0xb0>)
    1656:	f000 fe23 	bl	22a0 <printk>
		ifaddr = net_if_ipv6_addr_add(net_if_get_default(),
    165a:	f019 f917 	bl	1a88c <net_if_get_default>
    165e:	2300      	movs	r3, #0
    1660:	2203      	movs	r2, #3
    1662:	4915      	ldr	r1, [pc, #84]	; (16b8 <main+0xa8>)
    1664:	f019 f98c 	bl	1a980 <net_if_ipv6_addr_add>
	net_if_ipv6_maddr_add(net_if_get_default(), &in6addr_mcast);
    1668:	f019 f910 	bl	1a88c <net_if_get_default>
    166c:	4915      	ldr	r1, [pc, #84]	; (16c4 <main+0xb4>)
    166e:	f019 faaf 	bl	1abd0 <net_if_ipv6_maddr_add>

    1672:	2300      	movs	r3, #0
    1674:	f06f 0208 	mvn.w	r2, #8
    1678:	9305      	str	r3, [sp, #20]
    167a:	9304      	str	r3, [sp, #16]
    167c:	9203      	str	r2, [sp, #12]
    167e:	9302      	str	r3, [sp, #8]
    1680:	9301      	str	r3, [sp, #4]
    1682:	9300      	str	r3, [sp, #0]
    1684:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
    1688:	4b0f      	ldr	r3, [pc, #60]	; (16c8 <main+0xb8>)
    168a:	4910      	ldr	r1, [pc, #64]	; (16cc <main+0xbc>)
    168c:	4810      	ldr	r0, [pc, #64]	; (16d0 <main+0xc0>)
    168e:	f020 fccd 	bl	2202c <_impl_k_thread_create>
	init_app();

	k_thread_create(&thread_data, thread_stack, STACKSIZE,
			(k_thread_entry_t)listen,
			NULL, NULL, NULL, K_PRIO_COOP(7), 0, 0);
}
    1692:	b007      	add	sp, #28
    1694:	bd30      	pop	{r4, r5, pc}
    1696:	bf00      	nop
    1698:	00023dbe 	.word	0x00023dbe
    169c:	00022cee 	.word	0x00022cee
    16a0:	00022d15 	.word	0x00022d15
    16a4:	000229bd 	.word	0x000229bd
    16a8:	00022c7e 	.word	0x00022c7e
    16ac:	00022d63 	.word	0x00022d63
    16b0:	00022cf5 	.word	0x00022cf5
    16b4:	20000084 	.word	0x20000084
    16b8:	20009c78 	.word	0x20009c78
    16bc:	00022d86 	.word	0x00022d86
    16c0:	00022d21 	.word	0x00022d21
    16c4:	20009c68 	.word	0x20009c68
    16c8:	0000117d 	.word	0x0000117d
    16cc:	200033b8 	.word	0x200033b8
    16d0:	2000009c 	.word	0x2000009c

000016d4 <errata_103>:
	return false;
}

static bool errata_136_nrf52840(void)
{
	if ((*(u32_t *)0x10000130ul == 0x8ul) &&
    16d4:	4b05      	ldr	r3, [pc, #20]	; (16ec <errata_103+0x18>)
    16d6:	681b      	ldr	r3, [r3, #0]
    16d8:	2b08      	cmp	r3, #8
	    (*(u32_t *)0x10000134ul == 0x0ul)) {
    16da:	bf01      	itttt	eq
    16dc:	4b04      	ldreq	r3, [pc, #16]	; (16f0 <errata_103+0x1c>)
	if ((*(u32_t *)0x10000130ul == 0x8ul) &&
    16de:	6818      	ldreq	r0, [r3, #0]
    16e0:	fab0 f080 	clzeq	r0, r0
    16e4:	0940      	lsreq	r0, r0, #5
		return true;
	}

	return false;
    16e6:	bf18      	it	ne
    16e8:	2000      	movne	r0, #0
}
    16ea:	4770      	bx	lr
    16ec:	10000130 	.word	0x10000130
    16f0:	10000134 	.word	0x10000134

000016f4 <nordicsemi_nrf52_init>:
{
	SystemCoreClock = __SYSTEM_CLOCK_64M;
}

static int nordicsemi_nrf52_init(struct device *arg)
{
    16f4:	b508      	push	{r3, lr}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
    16f6:	f04f 0320 	mov.w	r3, #32
    16fa:	f3ef 8111 	mrs	r1, BASEPRI
    16fe:	f383 8811 	msr	BASEPRI, r3
	if (errata_36()) {
    1702:	f7ff ffe7 	bl	16d4 <errata_103>
    1706:	b140      	cbz	r0, 171a <nordicsemi_nrf52_init+0x26>
		NRF_CLOCK->EVENTS_DONE = 0;
    1708:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    170c:	2200      	movs	r2, #0
    170e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		NRF_CLOCK->EVENTS_CTTO = 0;
    1712:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
		NRF_CLOCK->CTIV = 0;
    1716:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
	if (errata_98()) {
    171a:	f7ff ffdb 	bl	16d4 <errata_103>
    171e:	b110      	cbz	r0, 1726 <nordicsemi_nrf52_init+0x32>
		*(volatile u32_t *)0x4000568Cul = 0x00038148ul;
    1720:	4b38      	ldr	r3, [pc, #224]	; (1804 <nordicsemi_nrf52_init+0x110>)
    1722:	4a39      	ldr	r2, [pc, #228]	; (1808 <nordicsemi_nrf52_init+0x114>)
    1724:	601a      	str	r2, [r3, #0]
	if (errata_103()) {
    1726:	f7ff ffd5 	bl	16d4 <errata_103>
    172a:	b118      	cbz	r0, 1734 <nordicsemi_nrf52_init+0x40>
		NRF_CCM->MAXPACKETSIZE = 0xFBul;
    172c:	4b37      	ldr	r3, [pc, #220]	; (180c <nordicsemi_nrf52_init+0x118>)
    172e:	22fb      	movs	r2, #251	; 0xfb
    1730:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	if (errata_115()) {
    1734:	f7ff ffce 	bl	16d4 <errata_103>
    1738:	b148      	cbz	r0, 174e <nordicsemi_nrf52_init+0x5a>
			(*(volatile u32_t *) 0x40000EE4 & 0xFFFFFFF0) |
    173a:	4835      	ldr	r0, [pc, #212]	; (1810 <nordicsemi_nrf52_init+0x11c>)
			(*(u32_t *)0x10000258 & 0x0000000F);
    173c:	4b35      	ldr	r3, [pc, #212]	; (1814 <nordicsemi_nrf52_init+0x120>)
			(*(volatile u32_t *) 0x40000EE4 & 0xFFFFFFF0) |
    173e:	6802      	ldr	r2, [r0, #0]
			(*(u32_t *)0x10000258 & 0x0000000F);
    1740:	681b      	ldr	r3, [r3, #0]
			(*(volatile u32_t *) 0x40000EE4 & 0xFFFFFFF0) |
    1742:	f022 020f 	bic.w	r2, r2, #15
			(*(u32_t *)0x10000258 & 0x0000000F);
    1746:	f003 030f 	and.w	r3, r3, #15
			(*(volatile u32_t *) 0x40000EE4 & 0xFFFFFFF0) |
    174a:	4313      	orrs	r3, r2
		*(volatile u32_t *)0x40000EE4 =
    174c:	6003      	str	r3, [r0, #0]
	if (errata_120()) {
    174e:	f7ff ffc1 	bl	16d4 <errata_103>
    1752:	b118      	cbz	r0, 175c <nordicsemi_nrf52_init+0x68>
		*(volatile u32_t *)0x40029640ul = 0x200ul;
    1754:	4b30      	ldr	r3, [pc, #192]	; (1818 <nordicsemi_nrf52_init+0x124>)
    1756:	f44f 7200 	mov.w	r2, #512	; 0x200
    175a:	601a      	str	r2, [r3, #0]
	if (errata_136_nrf52840()) {
    175c:	f7ff ffba 	bl	16d4 <errata_103>
    1760:	b148      	cbz	r0, 1776 <nordicsemi_nrf52_init+0x82>
		if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk) {
    1762:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1766:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    176a:	07d2      	lsls	r2, r2, #31
			NRF_POWER->RESETREAS = ~POWER_RESETREAS_RESETPIN_Msk;
    176c:	bf44      	itt	mi
    176e:	f06f 0201 	mvnmi.w	r2, #1
    1772:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
	if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
    1776:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    177a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    177e:	2a00      	cmp	r2, #0
    1780:	db03      	blt.n	178a <nordicsemi_nrf52_init+0x96>
	    ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) !=
    1782:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
	     (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    1786:	2b00      	cmp	r3, #0
    1788:	da2f      	bge.n	17ea <nordicsemi_nrf52_init+0xf6>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    178a:	4b24      	ldr	r3, [pc, #144]	; (181c <nordicsemi_nrf52_init+0x128>)
    178c:	2201      	movs	r2, #1
    178e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
    1792:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    1796:	2a00      	cmp	r2, #0
    1798:	d0fb      	beq.n	1792 <nordicsemi_nrf52_init+0x9e>
		NRF_UICR->PSELRESET[0] = 18;
    179a:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
    179e:	2112      	movs	r1, #18
    17a0:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
    17a4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    17a8:	2a00      	cmp	r2, #0
    17aa:	d0fb      	beq.n	17a4 <nordicsemi_nrf52_init+0xb0>
		NRF_UICR->PSELRESET[1] = 18;
    17ac:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    17b0:	2212      	movs	r2, #18
    17b2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
    17b6:	4b19      	ldr	r3, [pc, #100]	; (181c <nordicsemi_nrf52_init+0x128>)
    17b8:	461a      	mov	r2, r3
    17ba:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
    17be:	2900      	cmp	r1, #0
    17c0:	d0fb      	beq.n	17ba <nordicsemi_nrf52_init+0xc6>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    17c2:	2100      	movs	r1, #0
    17c4:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
    17c8:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    17cc:	2b00      	cmp	r3, #0
    17ce:	d0fb      	beq.n	17c8 <nordicsemi_nrf52_init+0xd4>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    17d0:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    17d4:	4912      	ldr	r1, [pc, #72]	; (1820 <nordicsemi_nrf52_init+0x12c>)
    17d6:	4b13      	ldr	r3, [pc, #76]	; (1824 <nordicsemi_nrf52_init+0x130>)
    17d8:	68ca      	ldr	r2, [r1, #12]
    17da:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    17de:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    17e0:	60cb      	str	r3, [r1, #12]
    17e2:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    17e6:	bf00      	nop
    17e8:	e7fd      	b.n	17e6 <nordicsemi_nrf52_init+0xf2>
static ALWAYS_INLINE void _ClearFaults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    17ea:	4b0d      	ldr	r3, [pc, #52]	; (1820 <nordicsemi_nrf52_init+0x12c>)
    17ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    17f0:	629a      	str	r2, [r3, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    17f2:	62da      	str	r2, [r3, #44]	; 0x2c
	SystemCoreClock = __SYSTEM_CLOCK_64M;
    17f4:	4b0c      	ldr	r3, [pc, #48]	; (1828 <nordicsemi_nrf52_init+0x134>)
    17f6:	4a0d      	ldr	r2, [pc, #52]	; (182c <nordicsemi_nrf52_init+0x138>)
    17f8:	601a      	str	r2, [r3, #0]
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    17fa:	f381 8811 	msr	BASEPRI, r1
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    17fe:	2000      	movs	r0, #0
    1800:	bd08      	pop	{r3, pc}
    1802:	bf00      	nop
    1804:	4000568c 	.word	0x4000568c
    1808:	00038148 	.word	0x00038148
    180c:	4000f000 	.word	0x4000f000
    1810:	40000ee4 	.word	0x40000ee4
    1814:	10000258 	.word	0x10000258
    1818:	40029640 	.word	0x40029640
    181c:	4001e000 	.word	0x4001e000
    1820:	e000ed00 	.word	0xe000ed00
    1824:	05fa0004 	.word	0x05fa0004
    1828:	20009ccc 	.word	0x20009ccc
    182c:	03d09000 	.word	0x03d09000

00001830 <_ExcExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    1830:	4808      	ldr	r0, [pc, #32]	; (1854 <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
    1832:	6881      	ldr	r1, [r0, #8]

    /*
     * Non-preemptible thread ? Do not schedule (see explanation of
     * preempt field in kernel_struct.h).
     */
    ldrh r2, [r1, #_thread_offset_to_preempt]
    1834:	894a      	ldrh	r2, [r1, #10]
    cmp r2, #_PREEMPT_THRESHOLD
    1836:	2a7f      	cmp	r2, #127	; 0x7f
    bhi _EXIT_EXC
    1838:	d80b      	bhi.n	1852 <_EXIT_EXC>

    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
    183a:	69c0      	ldr	r0, [r0, #28]
    cmp r0, r1
    183c:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    183e:	d008      	beq.n	1852 <_EXIT_EXC>

#ifdef CONFIG_TIMESLICING
    push {lr}
    1840:	b500      	push	{lr}
    bl _update_time_slice_before_swap
    1842:	f020 f983 	bl	21b4c <_update_time_slice_before_swap>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    pop {r0}
    mov lr, r0
#else
    pop {lr}
    1846:	f85d eb04 	ldr.w	lr, [sp], #4
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TIMESLICING */

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    184a:	4903      	ldr	r1, [pc, #12]	; (1858 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
    184c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
    1850:	600a      	str	r2, [r1, #0]

00001852 <_EXIT_EXC>:
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

    bx lr
    1852:	4770      	bx	lr
    ldr r0, =_kernel
    1854:	20002ff8 	.word	0x20002ff8
    ldr r1, =_SCS_ICSR
    1858:	e000ed04 	.word	0xe000ed04

0000185c <_IntLibInit>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    185c:	4804      	ldr	r0, [pc, #16]	; (1870 <_IntLibInit+0x14>)
 * @return N/A
 */

void _IntLibInit(void)
{
	int irq = 0;
    185e:	2300      	movs	r3, #0
    1860:	2120      	movs	r1, #32
    1862:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    1864:	3301      	adds	r3, #1
    1866:	2b2e      	cmp	r3, #46	; 0x2e
    1868:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    186c:	d1f9      	bne.n	1862 <_IntLibInit+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    186e:	4770      	bx	lr
    1870:	e000e100 	.word	0xe000e100

00001874 <__swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    1874:	4a08      	ldr	r2, [pc, #32]	; (1898 <__swap+0x24>)
	_current->arch.swap_return_value = _k_neg_eagain;
    1876:	4909      	ldr	r1, [pc, #36]	; (189c <__swap+0x28>)
	_current->arch.basepri = key;
    1878:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    187a:	6809      	ldr	r1, [r1, #0]
    187c:	6659      	str	r1, [r3, #100]	; 0x64

	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    187e:	4908      	ldr	r1, [pc, #32]	; (18a0 <__swap+0x2c>)
	_current->arch.basepri = key;
    1880:	6618      	str	r0, [r3, #96]	; 0x60
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1882:	684b      	ldr	r3, [r1, #4]
    1884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1888:	604b      	str	r3, [r1, #4]
    188a:	2300      	movs	r3, #0
    188c:	f383 8811 	msr	BASEPRI, r3

	/* clear mask or enable all irqs to take a pendsv */
	irq_unlock(0);

	return _current->arch.swap_return_value;
    1890:	6893      	ldr	r3, [r2, #8]
}
    1892:	6e58      	ldr	r0, [r3, #100]	; 0x64
    1894:	4770      	bx	lr
    1896:	bf00      	nop
    1898:	20002ff8 	.word	0x20002ff8
    189c:	00027314 	.word	0x00027314
    18a0:	e000ed00 	.word	0xe000ed00

000018a4 <__pendsv>:
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_KERNEL_EVENT_LOGGER_CONTEXT_SWITCH  */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    18a4:	490e      	ldr	r1, [pc, #56]	; (18e0 <__pendsv+0x3c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    18a6:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    18a8:	2028      	movs	r0, #40	; 0x28
    add r0, r2
    18aa:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
    18ac:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    18b0:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
    18b4:	4f0b      	ldr	r7, [pc, #44]	; (18e4 <__pendsv+0x40>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    18b6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    18ba:	2020      	movs	r0, #32
    msr BASEPRI, r0
    18bc:	f380 8811 	msr	BASEPRI, r0
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, _kernel_offset_to_ready_q_cache]
    18c0:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    18c2:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
    18c4:	603e      	str	r6, [r7, #0]

    /* Restore previous interrupt disable state (irq_lock key) */
    ldr r0, [r2, #_thread_offset_to_basepri]
    18c6:	6e10      	ldr	r0, [r2, #96]	; 0x60
    movs.n r3, #0
    18c8:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    18ca:	6613      	str	r3, [r2, #96]	; 0x60
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    18cc:	f380 8811 	msr	BASEPRI, r0
    blx configure_mpu_user_context
    pop {r2, lr}
#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    18d0:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
    18d4:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    msr PSP, ip
    18d8:	f38c 8809 	msr	PSP, ip
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
    ldm sp!,{r0-r3} /* Load back regs ro to r4 */
#endif /* CONFIG_EXECUTION_BENCHMARKING */

    /* exc return */
    bx lr
    18dc:	4770      	bx	lr
    18de:	0000      	.short	0x0000
    ldr r1, =_kernel
    18e0:	20002ff8 	.word	0x20002ff8
    ldr v4, =_SCS_ICSR
    18e4:	e000ed04 	.word	0xe000ed04

000018e8 <__svc>:
 *
 * @return N/A
 */

SECTION_FUNC(TEXT, __svc)
    tst lr, #0x4    /* did we come from thread mode ? */
    18e8:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    18ec:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    18ee:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    18f2:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    18f6:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read  encoding */
    ldrh r1, [r1, #-2]
    18f8:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 2: kernel panic or oops (software generated fatal exception)
    * 3: System call
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
    18fc:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    tst r2, #0x1
    bne _oops

    cmp r1, #0
#endif
    beq _context_switch
    1900:	d001      	beq.n	1906 <_context_switch>

    cmp r1, #2
    1902:	2902      	cmp	r1, #2
    beq _oops
    1904:	d007      	beq.n	1916 <_oops>

00001906 <_context_switch>:
    /*
     * Unlock interrupts:
     * - in a SVC call, so protected against context switches
     * - allow PendSV, since it's running at prio 0xff
     */
    eors.n r0, r0
    1906:	4040      	eors	r0, r0
    msr BASEPRI, r0
    1908:	f380 8811 	msr	BASEPRI, r0

     /* set PENDSV bit, pending the PendSV exception */
    ldr r1, =_SCS_ICSR
    190c:	4904      	ldr	r1, [pc, #16]	; (1920 <_oops+0xa>)
    ldr r2, =_SCS_ICSR_PENDSV
    190e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1, #0]
    1912:	600a      	str	r2, [r1, #0]

    /* handler mode exit, to PendSV */
    bx lr
    1914:	4770      	bx	lr

00001916 <_oops>:

_oops:
    push {lr}
    1916:	b500      	push	{lr}
    blx _do_kernel_oops
    1918:	f000 fa30 	bl	1d7c <_do_kernel_oops>
    pop {pc}
    191c:	bd00      	pop	{pc}
    191e:	0000      	.short	0x0000
    ldr r1, =_SCS_ICSR
    1920:	e000ed04 	.word	0xe000ed04

00001924 <_FaultThreadShow.isra.2>:
 *
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _FaultThreadShow(const NANO_ESF *esf)
    1924:	b510      	push	{r4, lr}
    1926:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    1928:	f020 f8e6 	bl	21af8 <_impl_k_current_get>
{
	PR_EXC("  Executing thread ID (thread): %p\n"
    192c:	6822      	ldr	r2, [r4, #0]
    192e:	4601      	mov	r1, r0
	       "  Faulting instruction address:  0x%x\n",
	       k_current_get(), esf->pc);
}
    1930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PR_EXC("  Executing thread ID (thread): %p\n"
    1934:	4801      	ldr	r0, [pc, #4]	; (193c <_FaultThreadShow.isra.2+0x18>)
    1936:	f000 bcb3 	b.w	22a0 <printk>
    193a:	bf00      	nop
    193c:	00022f8b 	.word	0x00022f8b

00001940 <_UsageFault>:
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _UsageFault(const NANO_ESF *esf)
{
    1940:	b510      	push	{r4, lr}
    1942:	4604      	mov	r4, r0
	PR_EXC("***** USAGE FAULT *****\n");
    1944:	481a      	ldr	r0, [pc, #104]	; (19b0 <_UsageFault+0x70>)
    1946:	f000 fcab 	bl	22a0 <printk>

	_FaultThreadShow(esf);
    194a:	f104 0018 	add.w	r0, r4, #24

	/* bits are sticky: they stack and must be reset */
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
    194e:	4c19      	ldr	r4, [pc, #100]	; (19b4 <_UsageFault+0x74>)
	_FaultThreadShow(esf);
    1950:	f7ff ffe8 	bl	1924 <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
    1954:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1956:	019a      	lsls	r2, r3, #6
    1958:	d502      	bpl.n	1960 <_UsageFault+0x20>
		PR_EXC("  Division by zero\n");
    195a:	4817      	ldr	r0, [pc, #92]	; (19b8 <_UsageFault+0x78>)
    195c:	f000 fca0 	bl	22a0 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) {
    1960:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1962:	01db      	lsls	r3, r3, #7
    1964:	d502      	bpl.n	196c <_UsageFault+0x2c>
		PR_EXC("  Unaligned memory access\n");
    1966:	4815      	ldr	r0, [pc, #84]	; (19bc <_UsageFault+0x7c>)
    1968:	f000 fc9a 	bl	22a0 <printk>
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if (SCB->CFSR & SCB_CFSR_STKOF_Msk) {
		PR_EXC("  Stack overflow\n");
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if (SCB->CFSR & SCB_CFSR_NOCP_Msk) {
    196c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    196e:	0318      	lsls	r0, r3, #12
    1970:	d502      	bpl.n	1978 <_UsageFault+0x38>
		PR_EXC("  No coprocessor instructions\n");
    1972:	4813      	ldr	r0, [pc, #76]	; (19c0 <_UsageFault+0x80>)
    1974:	f000 fc94 	bl	22a0 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVPC_Msk) {
    1978:	4c0e      	ldr	r4, [pc, #56]	; (19b4 <_UsageFault+0x74>)
    197a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    197c:	0359      	lsls	r1, r3, #13
    197e:	d502      	bpl.n	1986 <_UsageFault+0x46>
		PR_EXC("  Illegal load of EXC_RETURN into PC\n");
    1980:	4810      	ldr	r0, [pc, #64]	; (19c4 <_UsageFault+0x84>)
    1982:	f000 fc8d 	bl	22a0 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVSTATE_Msk) {
    1986:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1988:	039a      	lsls	r2, r3, #14
    198a:	d502      	bpl.n	1992 <_UsageFault+0x52>
		PR_EXC("  Illegal use of the EPSR\n");
    198c:	480e      	ldr	r0, [pc, #56]	; (19c8 <_UsageFault+0x88>)
    198e:	f000 fc87 	bl	22a0 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) {
    1992:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1994:	03db      	lsls	r3, r3, #15
    1996:	d502      	bpl.n	199e <_UsageFault+0x5e>
		PR_EXC("  Attempt to execute undefined instruction\n");
    1998:	480c      	ldr	r0, [pc, #48]	; (19cc <_UsageFault+0x8c>)
    199a:	f000 fc81 	bl	22a0 <printk>
	}

	/* clear USFR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    199e:	4a05      	ldr	r2, [pc, #20]	; (19b4 <_UsageFault+0x74>)
    19a0:	6a93      	ldr	r3, [r2, #40]	; 0x28
    19a2:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    19a6:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    19aa:	6293      	str	r3, [r2, #40]	; 0x28
    19ac:	bd10      	pop	{r4, pc}
    19ae:	bf00      	nop
    19b0:	0002308c 	.word	0x0002308c
    19b4:	e000ed00 	.word	0xe000ed00
    19b8:	000230a5 	.word	0x000230a5
    19bc:	000230b9 	.word	0x000230b9
    19c0:	000230d4 	.word	0x000230d4
    19c4:	000230f3 	.word	0x000230f3
    19c8:	00023119 	.word	0x00023119
    19cc:	00023134 	.word	0x00023134

000019d0 <_MpuFault>:
{
    19d0:	b538      	push	{r3, r4, r5, lr}
    19d2:	4604      	mov	r4, r0
	PR_EXC("***** MPU FAULT *****\n");
    19d4:	4819      	ldr	r0, [pc, #100]	; (1a3c <_MpuFault+0x6c>)
{
    19d6:	460d      	mov	r5, r1
	PR_EXC("***** MPU FAULT *****\n");
    19d8:	f000 fc62 	bl	22a0 <printk>
	_FaultThreadShow(esf);
    19dc:	f104 0018 	add.w	r0, r4, #24
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    19e0:	4c17      	ldr	r4, [pc, #92]	; (1a40 <_MpuFault+0x70>)
	_FaultThreadShow(esf);
    19e2:	f7ff ff9f 	bl	1924 <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    19e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    19e8:	06d9      	lsls	r1, r3, #27
    19ea:	d504      	bpl.n	19f6 <_MpuFault+0x26>
		PR_EXC("  Stacking error\n");
    19ec:	4815      	ldr	r0, [pc, #84]	; (1a44 <_MpuFault+0x74>)
}
    19ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		PR_EXC("  Floating-point lazy state preservation error\n");
    19f2:	f000 bc55 	b.w	22a0 <printk>
	} else if (SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) {
    19f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    19f8:	071a      	lsls	r2, r3, #28
    19fa:	d501      	bpl.n	1a00 <_MpuFault+0x30>
		PR_EXC("  Unstacking error\n");
    19fc:	4812      	ldr	r0, [pc, #72]	; (1a48 <_MpuFault+0x78>)
    19fe:	e7f6      	b.n	19ee <_MpuFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) {
    1a00:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1a02:	079b      	lsls	r3, r3, #30
    1a04:	d50f      	bpl.n	1a26 <_MpuFault+0x56>
		PR_EXC("  Data Access Violation\n");
    1a06:	4811      	ldr	r0, [pc, #68]	; (1a4c <_MpuFault+0x7c>)
    1a08:	f000 fc4a 	bl	22a0 <printk>
		STORE_xFAR(mmfar, SCB->MMFAR);
    1a0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
		if (SCB->CFSR & SCB_CFSR_MMARVALID_Msk) {
    1a0e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1a10:	0618      	lsls	r0, r3, #24
    1a12:	d512      	bpl.n	1a3a <_MpuFault+0x6a>
			PR_EXC("  Address: 0x%x\n", mmfar);
    1a14:	480e      	ldr	r0, [pc, #56]	; (1a50 <_MpuFault+0x80>)
    1a16:	f000 fc43 	bl	22a0 <printk>
			if (fromHardFault) {
    1a1a:	b175      	cbz	r5, 1a3a <_MpuFault+0x6a>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1a1c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1a1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    1a22:	62a3      	str	r3, [r4, #40]	; 0x28
    1a24:	bd38      	pop	{r3, r4, r5, pc}
	} else if (SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) {
    1a26:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1a28:	07da      	lsls	r2, r3, #31
    1a2a:	d501      	bpl.n	1a30 <_MpuFault+0x60>
		PR_EXC("  Instruction Access Violation\n");
    1a2c:	4809      	ldr	r0, [pc, #36]	; (1a54 <_MpuFault+0x84>)
    1a2e:	e7de      	b.n	19ee <_MpuFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_MLSPERR_Msk) {
    1a30:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1a32:	069b      	lsls	r3, r3, #26
    1a34:	d501      	bpl.n	1a3a <_MpuFault+0x6a>
		PR_EXC("  Floating-point lazy state preservation error\n");
    1a36:	4808      	ldr	r0, [pc, #32]	; (1a58 <_MpuFault+0x88>)
    1a38:	e7d9      	b.n	19ee <_MpuFault+0x1e>
    1a3a:	bd38      	pop	{r3, r4, r5, pc}
    1a3c:	00022fd5 	.word	0x00022fd5
    1a40:	e000ed00 	.word	0xe000ed00
    1a44:	00022fec 	.word	0x00022fec
    1a48:	00022ffe 	.word	0x00022ffe
    1a4c:	00023012 	.word	0x00023012
    1a50:	0002302b 	.word	0x0002302b
    1a54:	0002303c 	.word	0x0002303c
    1a58:	0002305c 	.word	0x0002305c

00001a5c <_BusFault>:
{
    1a5c:	b538      	push	{r3, r4, r5, lr}
    1a5e:	4604      	mov	r4, r0
	PR_EXC("***** BUS FAULT *****\n");
    1a60:	481d      	ldr	r0, [pc, #116]	; (1ad8 <_BusFault+0x7c>)
{
    1a62:	460d      	mov	r5, r1
	PR_EXC("***** BUS FAULT *****\n");
    1a64:	f000 fc1c 	bl	22a0 <printk>
	_FaultThreadShow(esf);
    1a68:	f104 0018 	add.w	r0, r4, #24
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1a6c:	4c1b      	ldr	r4, [pc, #108]	; (1adc <_BusFault+0x80>)
	_FaultThreadShow(esf);
    1a6e:	f7ff ff59 	bl	1924 <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1a72:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1a74:	04d8      	lsls	r0, r3, #19
    1a76:	d504      	bpl.n	1a82 <_BusFault+0x26>
		PR_EXC("  Stacking error\n");
    1a78:	4819      	ldr	r0, [pc, #100]	; (1ae0 <_BusFault+0x84>)
}
    1a7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		PR_EXC("  Floating-point lazy state preservation error\n");
    1a7e:	f000 bc0f 	b.w	22a0 <printk>
	} else if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1a82:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1a84:	0519      	lsls	r1, r3, #20
    1a86:	d501      	bpl.n	1a8c <_BusFault+0x30>
		PR_EXC("  Unstacking error\n");
    1a88:	4816      	ldr	r0, [pc, #88]	; (1ae4 <_BusFault+0x88>)
    1a8a:	e7f6      	b.n	1a7a <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1a8c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1a8e:	059a      	lsls	r2, r3, #22
    1a90:	d514      	bpl.n	1abc <_BusFault+0x60>
		PR_EXC("  Precise data bus error\n");
    1a92:	4815      	ldr	r0, [pc, #84]	; (1ae8 <_BusFault+0x8c>)
    1a94:	f000 fc04 	bl	22a0 <printk>
		STORE_xFAR(bfar, SCB->BFAR);
    1a98:	6ba1      	ldr	r1, [r4, #56]	; 0x38
		if (SCB->CFSR & SCB_CFSR_BFARVALID_Msk) {
    1a9a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1a9c:	041b      	lsls	r3, r3, #16
    1a9e:	d507      	bpl.n	1ab0 <_BusFault+0x54>
			PR_EXC("  Address: 0x%x\n", bfar);
    1aa0:	4812      	ldr	r0, [pc, #72]	; (1aec <_BusFault+0x90>)
    1aa2:	f000 fbfd 	bl	22a0 <printk>
			if (fromHardFault) {
    1aa6:	b11d      	cbz	r5, 1ab0 <_BusFault+0x54>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1aa8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1aaa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    1aae:	62a3      	str	r3, [r4, #40]	; 0x28
		if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1ab0:	4b0a      	ldr	r3, [pc, #40]	; (1adc <_BusFault+0x80>)
    1ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1ab4:	0558      	lsls	r0, r3, #21
    1ab6:	d50e      	bpl.n	1ad6 <_BusFault+0x7a>
			PR_EXC("  Imprecise data bus error\n");
    1ab8:	480d      	ldr	r0, [pc, #52]	; (1af0 <_BusFault+0x94>)
    1aba:	e7de      	b.n	1a7a <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1abc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1abe:	0559      	lsls	r1, r3, #21
    1ac0:	d4fa      	bmi.n	1ab8 <_BusFault+0x5c>
	} else if (SCB->CFSR & SCB_CFSR_IBUSERR_Msk) {
    1ac2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1ac4:	05da      	lsls	r2, r3, #23
    1ac6:	d501      	bpl.n	1acc <_BusFault+0x70>
		PR_EXC("  Instruction bus error\n");
    1ac8:	480a      	ldr	r0, [pc, #40]	; (1af4 <_BusFault+0x98>)
    1aca:	e7d6      	b.n	1a7a <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1acc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1ace:	049b      	lsls	r3, r3, #18
    1ad0:	d501      	bpl.n	1ad6 <_BusFault+0x7a>
		PR_EXC("  Floating-point lazy state preservation error\n");
    1ad2:	4809      	ldr	r0, [pc, #36]	; (1af8 <_BusFault+0x9c>)
    1ad4:	e7d1      	b.n	1a7a <_BusFault+0x1e>
    1ad6:	bd38      	pop	{r3, r4, r5, pc}
    1ad8:	00022e52 	.word	0x00022e52
    1adc:	e000ed00 	.word	0xe000ed00
    1ae0:	00022fec 	.word	0x00022fec
    1ae4:	00022ffe 	.word	0x00022ffe
    1ae8:	00022e69 	.word	0x00022e69
    1aec:	0002302b 	.word	0x0002302b
    1af0:	00022e83 	.word	0x00022e83
    1af4:	00022e9f 	.word	0x00022e9f
    1af8:	0002305c 	.word	0x0002305c

00001afc <_Fault>:
 *
 * @param esf ESF on the stack, either MSP or PSP depending at what processor
 *            state the exception was taken.
 */
void _Fault(const NANO_ESF *esf)
{
    1afc:	b538      	push	{r3, r4, r5, lr}
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1afe:	4d27      	ldr	r5, [pc, #156]	; (1b9c <_Fault+0xa0>)
    1b00:	686b      	ldr	r3, [r5, #4]
    1b02:	f3c3 0308 	ubfx	r3, r3, #0, #9
	switch (fault) {
    1b06:	1eda      	subs	r2, r3, #3
{
    1b08:	4604      	mov	r4, r0
	switch (fault) {
    1b0a:	2a09      	cmp	r2, #9
    1b0c:	d83a      	bhi.n	1b84 <_Fault+0x88>
    1b0e:	e8df f002 	tbb	[pc, r2]
    1b12:	3305      	.short	0x3305
    1b14:	39392f35 	.word	0x39392f35
    1b18:	37393939 	.word	0x37393939
	PR_EXC("***** HARD FAULT *****\n");
    1b1c:	4820      	ldr	r0, [pc, #128]	; (1ba0 <_Fault+0xa4>)
    1b1e:	f000 fbbf 	bl	22a0 <printk>
	if (SCB->HFSR & SCB_HFSR_VECTTBL_Msk) {
    1b22:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    1b24:	079a      	lsls	r2, r3, #30
    1b26:	d503      	bpl.n	1b30 <_Fault+0x34>
		PR_EXC("  Bus fault on vector table read\n");
    1b28:	481e      	ldr	r0, [pc, #120]	; (1ba4 <_Fault+0xa8>)
	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
    1b2a:	f000 fbb9 	bl	22a0 <printk>
    1b2e:	e00c      	b.n	1b4a <_Fault+0x4e>
	} else if (SCB->HFSR & SCB_HFSR_FORCED_Msk) {
    1b30:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    1b32:	005b      	lsls	r3, r3, #1
    1b34:	d509      	bpl.n	1b4a <_Fault+0x4e>
		PR_EXC("  Fault escalation (see below)\n");
    1b36:	481c      	ldr	r0, [pc, #112]	; (1ba8 <_Fault+0xac>)
    1b38:	f000 fbb2 	bl	22a0 <printk>
		if (SCB_MMFSR) {
    1b3c:	4b1b      	ldr	r3, [pc, #108]	; (1bac <_Fault+0xb0>)
    1b3e:	781b      	ldrb	r3, [r3, #0]
    1b40:	b14b      	cbz	r3, 1b56 <_Fault+0x5a>
			_MpuFault(esf, 1);
    1b42:	2101      	movs	r1, #1
		_MpuFault(esf, 0);
    1b44:	4620      	mov	r0, r4
    1b46:	f7ff ff43 	bl	19d0 <_MpuFault>

	FAULT_DUMP(esf, fault);

	_SysFatalErrorHandler(_NANO_ERR_HW_EXCEPTION, esf);
    1b4a:	4621      	mov	r1, r4
    1b4c:	2000      	movs	r0, #0
}
    1b4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(_NANO_ERR_HW_EXCEPTION, esf);
    1b52:	f000 b917 	b.w	1d84 <_SysFatalErrorHandler>
		} else if (SCB_BFSR) {
    1b56:	4b16      	ldr	r3, [pc, #88]	; (1bb0 <_Fault+0xb4>)
    1b58:	781b      	ldrb	r3, [r3, #0]
    1b5a:	b123      	cbz	r3, 1b66 <_Fault+0x6a>
			_BusFault(esf, 1);
    1b5c:	2101      	movs	r1, #1
		_BusFault(esf, 0);
    1b5e:	4620      	mov	r0, r4
    1b60:	f7ff ff7c 	bl	1a5c <_BusFault>
    1b64:	e7f1      	b.n	1b4a <_Fault+0x4e>
		} else if (SCB_UFSR) {
    1b66:	4b13      	ldr	r3, [pc, #76]	; (1bb4 <_Fault+0xb8>)
    1b68:	881b      	ldrh	r3, [r3, #0]
    1b6a:	b29b      	uxth	r3, r3
    1b6c:	2b00      	cmp	r3, #0
    1b6e:	d0ec      	beq.n	1b4a <_Fault+0x4e>
		_UsageFault(esf);
    1b70:	4620      	mov	r0, r4
    1b72:	f7ff fee5 	bl	1940 <_UsageFault>
    1b76:	e7e8      	b.n	1b4a <_Fault+0x4e>
		_MpuFault(esf, 0);
    1b78:	2100      	movs	r1, #0
    1b7a:	e7e3      	b.n	1b44 <_Fault+0x48>
		_BusFault(esf, 0);
    1b7c:	2100      	movs	r1, #0
    1b7e:	e7ee      	b.n	1b5e <_Fault+0x62>
	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
    1b80:	480d      	ldr	r0, [pc, #52]	; (1bb8 <_Fault+0xbc>)
    1b82:	e7d2      	b.n	1b2a <_Fault+0x2e>
	PR_EXC("***** %s %d) *****\n",
    1b84:	480d      	ldr	r0, [pc, #52]	; (1bbc <_Fault+0xc0>)
    1b86:	490e      	ldr	r1, [pc, #56]	; (1bc0 <_Fault+0xc4>)
    1b88:	f1a3 0210 	sub.w	r2, r3, #16
    1b8c:	2b0f      	cmp	r3, #15
    1b8e:	bfd8      	it	le
    1b90:	4601      	movle	r1, r0
    1b92:	480c      	ldr	r0, [pc, #48]	; (1bc4 <_Fault+0xc8>)
    1b94:	f000 fb84 	bl	22a0 <printk>
    1b98:	e7d7      	b.n	1b4a <_Fault+0x4e>
    1b9a:	bf00      	nop
    1b9c:	e000ed00 	.word	0xe000ed00
    1ba0:	00022ee6 	.word	0x00022ee6
    1ba4:	00022efe 	.word	0x00022efe
    1ba8:	00022f20 	.word	0x00022f20
    1bac:	e000ed28 	.word	0xe000ed28
    1bb0:	e000ed29 	.word	0xe000ed29
    1bb4:	e000ed2a 	.word	0xe000ed2a
    1bb8:	00022f40 	.word	0x00022f40
    1bbc:	00022eb8 	.word	0x00022eb8
    1bc0:	00022ecd 	.word	0x00022ecd
    1bc4:	00022f77 	.word	0x00022f77

00001bc8 <_FaultInit>:
 */
void _FaultInit(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1bc8:	4a02      	ldr	r2, [pc, #8]	; (1bd4 <_FaultInit+0xc>)
    1bca:	6953      	ldr	r3, [r2, #20]
    1bcc:	f043 0310 	orr.w	r3, r3, #16
    1bd0:	6153      	str	r3, [r2, #20]
    1bd2:	4770      	bx	lr
    1bd4:	e000ed00 	.word	0xe000ed00

00001bd8 <_arch_irq_enable>:
 *
 * @return N/A
 */
void _arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1bd8:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    1bda:	2b00      	cmp	r3, #0
    1bdc:	db08      	blt.n	1bf0 <_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1bde:	2201      	movs	r2, #1
    1be0:	f000 001f 	and.w	r0, r0, #31
    1be4:	fa02 f000 	lsl.w	r0, r2, r0
    1be8:	095b      	lsrs	r3, r3, #5
    1bea:	4a02      	ldr	r2, [pc, #8]	; (1bf4 <_arch_irq_enable+0x1c>)
    1bec:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    1bf0:	4770      	bx	lr
    1bf2:	bf00      	nop
    1bf4:	e000e100 	.word	0xe000e100

00001bf8 <_arch_irq_disable>:
 *
 * @return N/A
 */
void _arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    1bf8:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    1bfa:	2b00      	cmp	r3, #0
    1bfc:	db0d      	blt.n	1c1a <_arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1bfe:	2201      	movs	r2, #1
    1c00:	095b      	lsrs	r3, r3, #5
    1c02:	f000 001f 	and.w	r0, r0, #31
    1c06:	fa02 f000 	lsl.w	r0, r2, r0
    1c0a:	3320      	adds	r3, #32
    1c0c:	4a03      	ldr	r2, [pc, #12]	; (1c1c <_arch_irq_disable+0x24>)
    1c0e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    1c12:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1c16:	f3bf 8f6f 	isb	sy
    1c1a:	4770      	bx	lr
    1c1c:	e000e100 	.word	0xe000e100

00001c20 <_arch_irq_is_enabled>:
 * @param irq IRQ line
 * @return interrupt enable state, true or false
 */
int _arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & (1 << BIT_FROM_IRQ(irq));
    1c20:	0942      	lsrs	r2, r0, #5
    1c22:	4b05      	ldr	r3, [pc, #20]	; (1c38 <_arch_irq_is_enabled+0x18>)
    1c24:	f000 001f 	and.w	r0, r0, #31
    1c28:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1c2c:	2301      	movs	r3, #1
    1c2e:	fa03 f000 	lsl.w	r0, r3, r0
}
    1c32:	4010      	ands	r0, r2
    1c34:	4770      	bx	lr
    1c36:	bf00      	nop
    1c38:	e000e100 	.word	0xe000e100

00001c3c <_irq_priority_set>:
	 */
	__ASSERT(prio <= ((1 << CONFIG_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << CONFIG_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    1c3c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    1c3e:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1c40:	bfa8      	it	ge
    1c42:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
    1c46:	f101 0101 	add.w	r1, r1, #1
    1c4a:	ea4f 1141 	mov.w	r1, r1, lsl #5
    1c4e:	bfad      	iteet	ge
    1c50:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1c54:	f000 000f 	andlt.w	r0, r0, #15
    1c58:	4b03      	ldrlt	r3, [pc, #12]	; (1c68 <_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1c5a:	b2c9      	uxtbge	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1c5c:	bfb6      	itet	lt
    1c5e:	b2c9      	uxtblt	r1, r1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1c60:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1c64:	5419      	strblt	r1, [r3, r0]
    1c66:	4770      	bx	lr
    1c68:	e000ed14 	.word	0xe000ed14

00001c6c <_irq_spurious>:
 * @return N/A
 */
void _irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	__reserved();
    1c6c:	f000 b846 	b.w	1cfc <__bus_fault>

00001c70 <_arch_isr_direct_pm>:
 * See https://jira.zephyrproject.org/browse/ZEP-1595
 */

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
    1c70:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    1c72:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    1c74:	4b04      	ldr	r3, [pc, #16]	; (1c88 <_arch_isr_direct_pm+0x18>)
    1c76:	6998      	ldr	r0, [r3, #24]
    1c78:	b118      	cbz	r0, 1c82 <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    1c7a:	2200      	movs	r2, #0
    1c7c:	619a      	str	r2, [r3, #24]
		_sys_power_save_idle_exit(idle_val);
    1c7e:	f01f fab7 	bl	211f0 <_sys_power_save_idle_exit>
	}

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    1c82:	b662      	cpsie	i
    1c84:	bd08      	pop	{r3, pc}
    1c86:	bf00      	nop
    1c88:	20002ff8 	.word	0x20002ff8

00001c8c <_new_thread>:

void _new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
    1c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1c8e:	460c      	mov	r4, r1
    1c90:	4605      	mov	r5, r0
	ARG_UNUSED(pStack);
	ARG_UNUSED(stackSize);
#endif

#ifdef CONFIG_INIT_STACKS
	memset(pStack, 0xaa, stackSize);
    1c92:	21aa      	movs	r1, #170	; 0xaa
    1c94:	4620      	mov	r0, r4
    1c96:	4616      	mov	r6, r2
    1c98:	461f      	mov	r7, r3
    1c9a:	f7fe fda6 	bl	7ea <memset>
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
    1c9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1ca0:	9909      	ldr	r1, [sp, #36]	; 0x24
    1ca2:	2204      	movs	r2, #4
    1ca4:	4628      	mov	r0, r5
    1ca6:	f020 fa4f 	bl	22148 <_init_thread_base>

	_new_thread_init(thread, pStackMem, stackEnd - pStackMem, priority,
			 options);

	/* carve the thread entry struct from the "base" of the stack */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    1caa:	f1a6 0120 	sub.w	r1, r6, #32
    1cae:	4421      	add	r1, r4
#else
	pInitCtx->pc = (u32_t)_thread_entry;
#endif

	/* force ARM mode by clearing LSB of address */
	pInitCtx->pc &= 0xfffffffe;
    1cb0:	4a0b      	ldr	r2, [pc, #44]	; (1ce0 <_new_thread+0x54>)
#if defined(CONFIG_USERSPACE)
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (u32_t)pStack;
    1cb2:	65ac      	str	r4, [r5, #88]	; 0x58
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    1cb4:	f021 0107 	bic.w	r1, r1, #7
	thread->init_data = NULL;
    1cb8:	2300      	movs	r3, #0
	pInitCtx->pc &= 0xfffffffe;
    1cba:	f022 0201 	bic.w	r2, r2, #1
    1cbe:	64eb      	str	r3, [r5, #76]	; 0x4c
	thread->fn_abort = NULL;
    1cc0:	652b      	str	r3, [r5, #80]	; 0x50
	thread->stack_info.size = (u32_t)stackSize;
    1cc2:	65ee      	str	r6, [r5, #92]	; 0x5c
    1cc4:	618a      	str	r2, [r1, #24]

	pInitCtx->a1 = (u32_t)pEntry;
	pInitCtx->a2 = (u32_t)parameter1;
    1cc6:	9a06      	ldr	r2, [sp, #24]
    1cc8:	604a      	str	r2, [r1, #4]
	pInitCtx->a3 = (u32_t)parameter2;
    1cca:	9a07      	ldr	r2, [sp, #28]
    1ccc:	608a      	str	r2, [r1, #8]
	pInitCtx->a4 = (u32_t)parameter3;
    1cce:	9a08      	ldr	r2, [sp, #32]
    1cd0:	60ca      	str	r2, [r1, #12]
	pInitCtx->a1 = (u32_t)pEntry;
    1cd2:	600f      	str	r7, [r1, #0]
	pInitCtx->xpsr =
    1cd4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    1cd8:	61ca      	str	r2, [r1, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
    1cda:	64a9      	str	r1, [r5, #72]	; 0x48
	thread->arch.basepri = 0;
    1cdc:	662b      	str	r3, [r5, #96]	; 0x60
    1cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1ce0:	00021fbd 	.word	0x00021fbd

00001ce4 <_CpuIdleInit>:
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
    1ce4:	4901      	ldr	r1, [pc, #4]	; (1cec <_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    1ce6:	2210      	movs	r2, #16
	str r2, [r1]
    1ce8:	600a      	str	r2, [r1, #0]
	bx lr
    1cea:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    1cec:	e000ed10 	.word	0xe000ed10

00001cf0 <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    1cf0:	4040      	eors	r0, r0
	msr BASEPRI, r0
    1cf2:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    1cf6:	bf30      	wfi

	bx lr
    1cf8:	4770      	bx	lr
    1cfa:	bf00      	nop

00001cfc <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
    1cfc:	4040      	eors	r0, r0
	msr BASEPRI, r0
    1cfe:	f380 8811 	msr	BASEPRI, r0

	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
    1d02:	f8df c01c 	ldr.w	ip, [pc, #28]	; 1d20 <__bus_fault+0x24>
	ldr ip, [ip]
    1d06:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
    1d0a:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
    1d0e:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
    1d10:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
    1d14:	f3ef 8009 	mrsne	r0, PSP
				 * frame is on the PSP */
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	push {lr}
    1d18:	b500      	push	{lr}
	bl _Fault
    1d1a:	f7ff feef 	bl	1afc <_Fault>

	pop {pc}
    1d1e:	bd00      	pop	{pc}
	ldr ip, =_SCS_ICSR
    1d20:	e000ed04 	.word	0xe000ed04

00001d24 <_NanoFatalErrorHandler>:
 * @param pEsf pointer to the exception stack frame
 */
void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
	switch (reason) {
    1d24:	2804      	cmp	r0, #4
{
    1d26:	b538      	push	{r3, r4, r5, lr}
    1d28:	4604      	mov	r4, r0
    1d2a:	460d      	mov	r5, r1
	switch (reason) {
    1d2c:	d013      	beq.n	1d56 <_NanoFatalErrorHandler+0x32>
    1d2e:	2805      	cmp	r0, #5
    1d30:	d013      	beq.n	1d5a <_NanoFatalErrorHandler+0x36>
    1d32:	2803      	cmp	r0, #3
    1d34:	d113      	bne.n	1d5e <_NanoFatalErrorHandler+0x3a>
		printk("***** Stack Check Fail! *****\n");
		break;
#endif /* CONFIG_STACK_CANARIES */

	case _NANO_ERR_ALLOCATION_FAIL:
		printk("**** Kernel Allocation Failure! ****\n");
    1d36:	480c      	ldr	r0, [pc, #48]	; (1d68 <_NanoFatalErrorHandler+0x44>)
		break;

	case _NANO_ERR_KERNEL_OOPS:
		printk("***** Kernel OOPS! *****\n");
    1d38:	f000 fab2 	bl	22a0 <printk>
    1d3c:	f01f fedc 	bl	21af8 <_impl_k_current_get>

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
		break;
	}
	printk("Current thread ID = %p\n"
    1d40:	69aa      	ldr	r2, [r5, #24]
    1d42:	4601      	mov	r1, r0
    1d44:	4809      	ldr	r0, [pc, #36]	; (1d6c <_NanoFatalErrorHandler+0x48>)
    1d46:	f000 faab 	bl	22a0 <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	_SysFatalErrorHandler(reason, pEsf);
    1d4a:	4629      	mov	r1, r5
    1d4c:	4620      	mov	r0, r4
}
    1d4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(reason, pEsf);
    1d52:	f000 b817 	b.w	1d84 <_SysFatalErrorHandler>
		printk("***** Kernel OOPS! *****\n");
    1d56:	4806      	ldr	r0, [pc, #24]	; (1d70 <_NanoFatalErrorHandler+0x4c>)
    1d58:	e7ee      	b.n	1d38 <_NanoFatalErrorHandler+0x14>
		printk("***** Kernel Panic! *****\n");
    1d5a:	4806      	ldr	r0, [pc, #24]	; (1d74 <_NanoFatalErrorHandler+0x50>)
    1d5c:	e7ec      	b.n	1d38 <_NanoFatalErrorHandler+0x14>
		printk("**** Unknown Fatal Error %d! ****\n", reason);
    1d5e:	4601      	mov	r1, r0
    1d60:	4805      	ldr	r0, [pc, #20]	; (1d78 <_NanoFatalErrorHandler+0x54>)
    1d62:	f000 fa9d 	bl	22a0 <printk>
		break;
    1d66:	e7e9      	b.n	1d3c <_NanoFatalErrorHandler+0x18>
    1d68:	00023160 	.word	0x00023160
    1d6c:	000231de 	.word	0x000231de
    1d70:	00023186 	.word	0x00023186
    1d74:	000231a0 	.word	0x000231a0
    1d78:	000231bb 	.word	0x000231bb

00001d7c <_do_kernel_oops>:

void _do_kernel_oops(const NANO_ESF *esf)
{
    1d7c:	4601      	mov	r1, r0
	_NanoFatalErrorHandler(esf->r0, esf);
    1d7e:	6800      	ldr	r0, [r0, #0]
    1d80:	f7ff bfd0 	b.w	1d24 <_NanoFatalErrorHandler>

00001d84 <_SysFatalErrorHandler>:
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    1d84:	2805      	cmp	r0, #5
{
    1d86:	b510      	push	{r4, lr}
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    1d88:	d00c      	beq.n	1da4 <_SysFatalErrorHandler+0x20>
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
    1d8a:	f020 f8ff 	bl	21f8c <k_is_in_isr>
    1d8e:	b160      	cbz	r0, 1daa <_SysFatalErrorHandler+0x26>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
    1d90:	f020 f8fc 	bl	21f8c <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
    1d94:	4b0c      	ldr	r3, [pc, #48]	; (1dc8 <_SysFatalErrorHandler+0x44>)
    1d96:	490d      	ldr	r1, [pc, #52]	; (1dcc <_SysFatalErrorHandler+0x48>)
    1d98:	2800      	cmp	r0, #0
    1d9a:	bf08      	it	eq
    1d9c:	4619      	moveq	r1, r3
    1d9e:	480c      	ldr	r0, [pc, #48]	; (1dd0 <_SysFatalErrorHandler+0x4c>)
    1da0:	f000 fa7e 	bl	22a0 <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
    1da4:	f7ff ffa4 	bl	1cf0 <k_cpu_idle>
    1da8:	e7fc      	b.n	1da4 <_SysFatalErrorHandler+0x20>
	if (k_is_in_isr() || _is_thread_essential()) {
    1daa:	f020 f8ff 	bl	21fac <_is_thread_essential>
    1dae:	2800      	cmp	r0, #0
    1db0:	d1ee      	bne.n	1d90 <_SysFatalErrorHandler+0xc>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
    1db2:	4c08      	ldr	r4, [pc, #32]	; (1dd4 <_SysFatalErrorHandler+0x50>)
    1db4:	4808      	ldr	r0, [pc, #32]	; (1dd8 <_SysFatalErrorHandler+0x54>)
    1db6:	68a1      	ldr	r1, [r4, #8]
    1db8:	f000 fa72 	bl	22a0 <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
    1dbc:	68a0      	ldr	r0, [r4, #8]
	}
	CODE_UNREACHABLE;
}
    1dbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1dc2:	f000 b80b 	b.w	1ddc <_impl_k_thread_abort>
    1dc6:	bf00      	nop
    1dc8:	0002321e 	.word	0x0002321e
    1dcc:	0002321a 	.word	0x0002321a
    1dd0:	0002322f 	.word	0x0002322f
    1dd4:	20002ff8 	.word	0x20002ff8
    1dd8:	0002324f 	.word	0x0002324f

00001ddc <_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void _k_thread_single_abort(struct k_thread *thread);

void _impl_k_thread_abort(k_tid_t thread)
{
    1ddc:	b538      	push	{r3, r4, r5, lr}
    1dde:	4605      	mov	r5, r0
	__asm__ volatile(
    1de0:	f04f 0320 	mov.w	r3, #32
    1de4:	f3ef 8411 	mrs	r4, BASEPRI
    1de8:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	_k_thread_single_abort(thread);
    1dec:	f020 f93c 	bl	22068 <_k_thread_single_abort>
	_thread_monitor_exit(thread);

	if (_current == thread) {
    1df0:	4b0b      	ldr	r3, [pc, #44]	; (1e20 <_impl_k_thread_abort+0x44>)
    1df2:	689b      	ldr	r3, [r3, #8]
    1df4:	429d      	cmp	r5, r3
    1df6:	d10d      	bne.n	1e14 <_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    1df8:	4b0a      	ldr	r3, [pc, #40]	; (1e24 <_impl_k_thread_abort+0x48>)
    1dfa:	685a      	ldr	r2, [r3, #4]
    1dfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
    1e00:	b922      	cbnz	r2, 1e0c <_impl_k_thread_abort+0x30>
extern unsigned int __swap(unsigned int key);

static inline unsigned int _Swap(unsigned int key)
{
	_check_stack_sentinel();
	_update_time_slice_before_swap();
    1e02:	f01f fea3 	bl	21b4c <_update_time_slice_before_swap>

	return __swap(key);
    1e06:	4620      	mov	r0, r4
    1e08:	f7ff fd34 	bl	1874 <__swap>
			_Swap(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1e0c:	685a      	ldr	r2, [r3, #4]
    1e0e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    1e12:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule_threads(key);
    1e14:	4620      	mov	r0, r4
}
    1e16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_reschedule_threads(key);
    1e1a:	f01f bdfb 	b.w	21a14 <_reschedule_threads>
    1e1e:	bf00      	nop
    1e20:	20002ff8 	.word	0x20002ff8
    1e24:	e000ed00 	.word	0xe000ed00

00001e28 <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {lr}		/* lr is now the first item on the stack */
    1e28:	b500      	push	{lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, _sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
    1e2a:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1e2c:	4a0b      	ldr	r2, [pc, #44]	; (1e5c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    1e2e:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    1e30:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	blx _sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    1e32:	bf1e      	ittt	ne
	movne	r1, #0
    1e34:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    1e36:	6191      	strne	r1, [r2, #24]
		blxne	_sys_power_save_idle_exit
    1e38:	f01f f9da 	blne	211f0 <_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1e3c:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
    1e3e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1e42:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1e46:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    1e4a:	4905      	ldr	r1, [pc, #20]	; (1e60 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1e4c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1e4e:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r4 regs */
#endif
	blx r3		/* call ISR */
    1e50:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {lr}
    1e52:	f85d eb04 	ldr.w	lr, [sp], #4
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* exception return is done in _IntExit() */
	b _IntExit
    1e56:	f7ff bceb 	b.w	1830 <_ExcExit>
    1e5a:	0000      	.short	0x0000
	ldr r2, =_kernel
    1e5c:	20002ff8 	.word	0x20002ff8
	ldr r1, =_sw_isr_table
    1e60:	000000f8 	.word	0x000000f8

00001e64 <__reset>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1e64:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1e66:	f380 8811 	msr	BASEPRI, r0
    /* board-specific watchdog initialization is necessary */
    bl _WdogInit
#endif

#ifdef CONFIG_INIT_STACKS
    ldr r0, =_interrupt_stack
    1e6a:	4808      	ldr	r0, [pc, #32]	; (1e8c <__reset+0x28>)
    ldr r1, =0xaa
    1e6c:	21aa      	movs	r1, #170	; 0xaa
    ldr r2, =CONFIG_ISR_STACK_SIZE
    1e6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    bl memset
    1e72:	f7fe fcba 	bl	7ea <memset>

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialisation.
     */
    ldr r0, =_interrupt_stack
    1e76:	4805      	ldr	r0, [pc, #20]	; (1e8c <__reset+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    1e78:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    1e7c:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1e7e:	f380 8809 	msr	PSP, r0
    movs.n r0, #2	/* switch to using PSP (bit1 of CONTROL reg) */
    1e82:	2002      	movs	r0, #2
    msr CONTROL, r0
    1e84:	f380 8814 	msr	CONTROL, r0

    b _PrepC
    1e88:	f000 b806 	b.w	1e98 <_PrepC>
    ldr r0, =_interrupt_stack
    1e8c:	20009068 	.word	0x20009068

00001e90 <_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(_SysNmiOnReset)

SECTION_FUNC(TEXT, _SysNmiOnReset)
    wfi
    1e90:	bf30      	wfi
    b _SysNmiOnReset
    1e92:	f7ff bffd 	b.w	1e90 <_SysNmiOnReset>
    1e96:	bf00      	nop

00001e98 <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
    1e98:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1e9a:	4b07      	ldr	r3, [pc, #28]	; (1eb8 <_PrepC+0x20>)
    1e9c:	4a07      	ldr	r2, [pc, #28]	; (1ebc <_PrepC+0x24>)
    1e9e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    1ea2:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    1ea4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1ea8:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	_bss_zero();
    1eac:	f01f fa1a 	bl	212e4 <_bss_zero>
	_data_copy();
    1eb0:	f01f fa22 	bl	212f8 <_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0;
#endif
	_Cstart();
    1eb4:	f01f fa48 	bl	21348 <_Cstart>
    1eb8:	00000000 	.word	0x00000000
    1ebc:	e000ed00 	.word	0xe000ed00

00001ec0 <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
    1ec0:	b508      	push	{r3, lr}
	handler();
    1ec2:	f7ff ffe5 	bl	1e90 <_SysNmiOnReset>
	_ExcExit();
}
    1ec6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	_ExcExit();
    1eca:	f7ff bcb1 	b.w	1830 <_ExcExit>
	...

00001ed0 <arm_mpu_init>:
	}
}

static inline u8_t _get_num_regions(void)
{
	u32_t type = ARM_MPU_DEV->type;
    1ed0:	4b15      	ldr	r3, [pc, #84]	; (1f28 <arm_mpu_init+0x58>)
static void _arm_mpu_config(void)
{
	u32_t r_index;

	/* ARM MPU supports up to 16 Regions */
	if (mpu_config.num_regions > _get_num_regions()) {
    1ed2:	4916      	ldr	r1, [pc, #88]	; (1f2c <arm_mpu_init+0x5c>)
	u32_t type = ARM_MPU_DEV->type;
    1ed4:	681a      	ldr	r2, [r3, #0]
	__DSB();
	__ISB();
}

static int arm_mpu_init(struct device *arg)
{
    1ed6:	b530      	push	{r4, r5, lr}
	if (mpu_config.num_regions > _get_num_regions()) {
    1ed8:	680d      	ldr	r5, [r1, #0]
    1eda:	f3c2 2207 	ubfx	r2, r2, #8, #8
    1ede:	4295      	cmp	r5, r2
    1ee0:	d80f      	bhi.n	1f02 <arm_mpu_init+0x32>
	ARM_MPU_DEV->ctrl = 0;
    1ee2:	2200      	movs	r2, #0
    1ee4:	6848      	ldr	r0, [r1, #4]
    1ee6:	605a      	str	r2, [r3, #4]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
    1ee8:	4295      	cmp	r5, r2
    1eea:	f100 000c 	add.w	r0, r0, #12
    1eee:	d10a      	bne.n	1f06 <arm_mpu_init+0x36>
	ARM_MPU_DEV->ctrl = ARM_MPU_ENABLE | ARM_MPU_PRIVDEFENA;
    1ef0:	2205      	movs	r2, #5
    1ef2:	605a      	str	r2, [r3, #4]
	arm_mpu_enabled = 1;
    1ef4:	4b0e      	ldr	r3, [pc, #56]	; (1f30 <arm_mpu_init+0x60>)
    1ef6:	2201      	movs	r2, #1
    1ef8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
    1efa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1efe:	f3bf 8f6f 	isb	sy
	ARG_UNUSED(arg);

	_arm_mpu_config();

	return 0;
}
    1f02:	2000      	movs	r0, #0
    1f04:	bd30      	pop	{r4, r5, pc}
		_region_init(r_index,
    1f06:	f850 1c0c 	ldr.w	r1, [r0, #-12]
    1f0a:	f850 4c04 	ldr.w	r4, [r0, #-4]
	ARM_MPU_DEV->rnr = index;
    1f0e:	609a      	str	r2, [r3, #8]
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
    1f10:	f021 011f 	bic.w	r1, r1, #31
				| REGION_VALID | index;
    1f14:	f041 0110 	orr.w	r1, r1, #16
    1f18:	4311      	orrs	r1, r2
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
    1f1a:	f044 0401 	orr.w	r4, r4, #1
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
    1f1e:	60d9      	str	r1, [r3, #12]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
    1f20:	3201      	adds	r2, #1
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
    1f22:	611c      	str	r4, [r3, #16]
    1f24:	e7e0      	b.n	1ee8 <arm_mpu_init+0x18>
    1f26:	bf00      	nop
    1f28:	e000ed90 	.word	0xe000ed90
    1f2c:	20009c88 	.word	0x20009c88
    1f30:	20000104 	.word	0x20000104

00001f34 <_nop_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
    1f34:	2000      	movs	r0, #0
    1f36:	4770      	bx	lr

00001f38 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    1f38:	680b      	ldr	r3, [r1, #0]
    1f3a:	3301      	adds	r3, #1
    1f3c:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    1f3e:	4b01      	ldr	r3, [pc, #4]	; (1f44 <char_out+0xc>)
    1f40:	681b      	ldr	r3, [r3, #0]
    1f42:	4718      	bx	r3
    1f44:	20009cd0 	.word	0x20009cd0

00001f48 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    1f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1f4c:	b085      	sub	sp, #20
    1f4e:	469b      	mov	fp, r3
    1f50:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    1f52:	f8df a090 	ldr.w	sl, [pc, #144]	; 1fe4 <_printk_dec_ulong+0x9c>
    1f56:	2c01      	cmp	r4, #1
    1f58:	bfb8      	it	lt
    1f5a:	2401      	movlt	r4, #1
    1f5c:	2b01      	cmp	r3, #1
    1f5e:	bf0c      	ite	eq
    1f60:	2330      	moveq	r3, #48	; 0x30
    1f62:	2320      	movne	r3, #32
    1f64:	4615      	mov	r5, r2
    1f66:	4680      	mov	r8, r0
    1f68:	4689      	mov	r9, r1
    1f6a:	9401      	str	r4, [sp, #4]
    1f6c:	9302      	str	r3, [sp, #8]
    1f6e:	2601      	movs	r6, #1
    1f70:	270a      	movs	r7, #10
    1f72:	2200      	movs	r2, #0
    1f74:	f10a 0401 	add.w	r4, sl, #1
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
    1f78:	b90a      	cbnz	r2, 1f7e <_printk_dec_ulong+0x36>
    1f7a:	45aa      	cmp	sl, r5
    1f7c:	d21f      	bcs.n	1fbe <_printk_dec_ulong+0x76>
			found_largest_digit = 1;
			out((int)((remainder / (pos + 1)) + 48), ctx);
    1f7e:	fbb5 f0f4 	udiv	r0, r5, r4
    1f82:	4649      	mov	r1, r9
    1f84:	3030      	adds	r0, #48	; 0x30
    1f86:	47c0      	blx	r8
			digits++;
    1f88:	3601      	adds	r6, #1
			found_largest_digit = 1;
    1f8a:	2201      	movs	r2, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
    1f8c:	3f01      	subs	r7, #1
	while (pos >= 9) {
    1f8e:	2f01      	cmp	r7, #1
		remainder %= (pos + 1);
    1f90:	fbb5 f1f4 	udiv	r1, r5, r4
		pos /= 10;
    1f94:	f04f 030a 	mov.w	r3, #10
		remainder %= (pos + 1);
    1f98:	fb04 5511 	mls	r5, r4, r1, r5
		pos /= 10;
    1f9c:	fbba faf3 	udiv	sl, sl, r3
	while (pos >= 9) {
    1fa0:	d1e8      	bne.n	1f74 <_printk_dec_ulong+0x2c>
	}
	out((int)(remainder + 48), ctx);
    1fa2:	4649      	mov	r1, r9
    1fa4:	f105 0030 	add.w	r0, r5, #48	; 0x30
    1fa8:	47c0      	blx	r8

	if (padding == PAD_SPACE_AFTER) {
    1faa:	f1bb 0f03 	cmp.w	fp, #3
    1fae:	d103      	bne.n	1fb8 <_printk_dec_ulong+0x70>
		remaining = min_width - digits;
    1fb0:	9b01      	ldr	r3, [sp, #4]
    1fb2:	1b9c      	subs	r4, r3, r6
		while (remaining-- > 0) {
    1fb4:	2c00      	cmp	r4, #0
    1fb6:	dc0f      	bgt.n	1fd8 <_printk_dec_ulong+0x90>
			out(' ', ctx);
		}
	}
}
    1fb8:	b005      	add	sp, #20
    1fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
    1fbe:	9b01      	ldr	r3, [sp, #4]
    1fc0:	42bb      	cmp	r3, r7
    1fc2:	dbe3      	blt.n	1f8c <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
    1fc4:	f1bb 0f02 	cmp.w	fp, #2
    1fc8:	d8e0      	bhi.n	1f8c <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    1fca:	4649      	mov	r1, r9
    1fcc:	9802      	ldr	r0, [sp, #8]
    1fce:	9203      	str	r2, [sp, #12]
			digits++;
    1fd0:	3601      	adds	r6, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    1fd2:	47c0      	blx	r8
			digits++;
    1fd4:	9a03      	ldr	r2, [sp, #12]
    1fd6:	e7d9      	b.n	1f8c <_printk_dec_ulong+0x44>
			out(' ', ctx);
    1fd8:	4649      	mov	r1, r9
    1fda:	2020      	movs	r0, #32
    1fdc:	47c0      	blx	r8
    1fde:	3c01      	subs	r4, #1
    1fe0:	e7e8      	b.n	1fb4 <_printk_dec_ulong+0x6c>
    1fe2:	bf00      	nop
    1fe4:	3b9ac9ff 	.word	0x3b9ac9ff

00001fe8 <str_out>:
	int count;
};

static int str_out(int c, struct str_context *ctx)
{
	if (!ctx->str || ctx->count >= ctx->max) {
    1fe8:	680a      	ldr	r2, [r1, #0]
    1fea:	688b      	ldr	r3, [r1, #8]
{
    1fec:	b530      	push	{r4, r5, lr}
	if (!ctx->str || ctx->count >= ctx->max) {
    1fee:	b112      	cbz	r2, 1ff6 <str_out+0xe>
    1ff0:	684c      	ldr	r4, [r1, #4]
    1ff2:	42a3      	cmp	r3, r4
    1ff4:	db02      	blt.n	1ffc <str_out+0x14>
		ctx->count++;
    1ff6:	3301      	adds	r3, #1
    1ff8:	608b      	str	r3, [r1, #8]
		return c;
    1ffa:	bd30      	pop	{r4, r5, pc}
	}

	if (ctx->count == ctx->max - 1) {
    1ffc:	1e65      	subs	r5, r4, #1
    1ffe:	42ab      	cmp	r3, r5
		ctx->str[ctx->count++] = '\0';
    2000:	bf0b      	itete	eq
    2002:	608c      	streq	r4, [r1, #8]
	} else {
		ctx->str[ctx->count++] = c;
    2004:	1c5c      	addne	r4, r3, #1
		ctx->str[ctx->count++] = '\0';
    2006:	2100      	moveq	r1, #0
		ctx->str[ctx->count++] = c;
    2008:	608c      	strne	r4, [r1, #8]
		ctx->str[ctx->count++] = '\0';
    200a:	bf0c      	ite	eq
    200c:	54d1      	strbeq	r1, [r2, r3]
		ctx->str[ctx->count++] = c;
    200e:	54d0      	strbne	r0, [r2, r3]
	}

	return c;
}
    2010:	bd30      	pop	{r4, r5, pc}
	...

00002014 <__printk_hook_install>:
	_char_out = fn;
    2014:	4b01      	ldr	r3, [pc, #4]	; (201c <__printk_hook_install+0x8>)
    2016:	6018      	str	r0, [r3, #0]
    2018:	4770      	bx	lr
    201a:	bf00      	nop
    201c:	20009cd0 	.word	0x20009cd0

00002020 <_vprintk>:
{
    2020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2024:	b089      	sub	sp, #36	; 0x24
	int long_ctr = 0;
    2026:	f04f 0a00 	mov.w	sl, #0
{
    202a:	4606      	mov	r6, r0
    202c:	460f      	mov	r7, r1
    202e:	9204      	str	r2, [sp, #16]
    2030:	461c      	mov	r4, r3
	int min_width = -1;
    2032:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
    2036:	46d0      	mov	r8, sl
	int might_format = 0; /* 1 if encountered a '%' */
    2038:	4655      	mov	r5, sl
	while (*fmt) {
    203a:	9b04      	ldr	r3, [sp, #16]
    203c:	7818      	ldrb	r0, [r3, #0]
    203e:	b910      	cbnz	r0, 2046 <_vprintk+0x26>
}
    2040:	b009      	add	sp, #36	; 0x24
    2042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!might_format) {
    2046:	b945      	cbnz	r5, 205a <_vprintk+0x3a>
			if (*fmt != '%') {
    2048:	2825      	cmp	r0, #37	; 0x25
    204a:	f000 810c 	beq.w	2266 <_vprintk+0x246>
				out((int)*fmt, ctx);
    204e:	4639      	mov	r1, r7
    2050:	47b0      	blx	r6
		++fmt;
    2052:	9b04      	ldr	r3, [sp, #16]
    2054:	3301      	adds	r3, #1
    2056:	9304      	str	r3, [sp, #16]
    2058:	e7ef      	b.n	203a <_vprintk+0x1a>
			switch (*fmt) {
    205a:	2864      	cmp	r0, #100	; 0x64
    205c:	d061      	beq.n	2122 <_vprintk+0x102>
    205e:	d819      	bhi.n	2094 <_vprintk+0x74>
    2060:	2839      	cmp	r0, #57	; 0x39
    2062:	d80a      	bhi.n	207a <_vprintk+0x5a>
    2064:	2831      	cmp	r0, #49	; 0x31
    2066:	d250      	bcs.n	210a <_vprintk+0xea>
    2068:	282d      	cmp	r0, #45	; 0x2d
    206a:	d03c      	beq.n	20e6 <_vprintk+0xc6>
    206c:	2830      	cmp	r0, #48	; 0x30
    206e:	d03d      	beq.n	20ec <_vprintk+0xcc>
    2070:	2825      	cmp	r0, #37	; 0x25
    2072:	d108      	bne.n	2086 <_vprintk+0x66>
				out((int)'%', ctx);
    2074:	4639      	mov	r1, r7
				out((int)*fmt, ctx);
    2076:	47b0      	blx	r6
    2078:	e06f      	b.n	215a <_vprintk+0x13a>
			switch (*fmt) {
    207a:	2858      	cmp	r0, #88	; 0x58
    207c:	f000 8089 	beq.w	2192 <_vprintk+0x172>
    2080:	2863      	cmp	r0, #99	; 0x63
    2082:	f000 80ea 	beq.w	225a <_vprintk+0x23a>
				out((int)'%', ctx);
    2086:	4639      	mov	r1, r7
    2088:	2025      	movs	r0, #37	; 0x25
    208a:	47b0      	blx	r6
				out((int)*fmt, ctx);
    208c:	9b04      	ldr	r3, [sp, #16]
    208e:	4639      	mov	r1, r7
    2090:	7818      	ldrb	r0, [r3, #0]
    2092:	e7f0      	b.n	2076 <_vprintk+0x56>
			switch (*fmt) {
    2094:	2870      	cmp	r0, #112	; 0x70
    2096:	d072      	beq.n	217e <_vprintk+0x15e>
    2098:	d806      	bhi.n	20a8 <_vprintk+0x88>
    209a:	2869      	cmp	r0, #105	; 0x69
    209c:	d041      	beq.n	2122 <_vprintk+0x102>
    209e:	286c      	cmp	r0, #108	; 0x6c
    20a0:	d03c      	beq.n	211c <_vprintk+0xfc>
    20a2:	2868      	cmp	r0, #104	; 0x68
    20a4:	d0d5      	beq.n	2052 <_vprintk+0x32>
    20a6:	e7ee      	b.n	2086 <_vprintk+0x66>
    20a8:	2875      	cmp	r0, #117	; 0x75
    20aa:	d058      	beq.n	215e <_vprintk+0x13e>
    20ac:	d817      	bhi.n	20de <_vprintk+0xbe>
    20ae:	2873      	cmp	r0, #115	; 0x73
    20b0:	d1e9      	bne.n	2086 <_vprintk+0x66>
				char *s = va_arg(ap, char *);
    20b2:	6823      	ldr	r3, [r4, #0]
    20b4:	f104 0b04 	add.w	fp, r4, #4
    20b8:	461c      	mov	r4, r3
				while (*s)
    20ba:	4625      	mov	r5, r4
    20bc:	f815 0b01 	ldrb.w	r0, [r5], #1
    20c0:	2800      	cmp	r0, #0
    20c2:	f040 80bf 	bne.w	2244 <_vprintk+0x224>
				if (padding == PAD_SPACE_AFTER) {
    20c6:	f1b8 0f03 	cmp.w	r8, #3
    20ca:	f040 80d5 	bne.w	2278 <_vprintk+0x258>
					int remaining = min_width - (s - start);
    20ce:	1ae4      	subs	r4, r4, r3
    20d0:	eba9 0404 	sub.w	r4, r9, r4
					while (remaining-- > 0) {
    20d4:	2c00      	cmp	r4, #0
    20d6:	f300 80bb 	bgt.w	2250 <_vprintk+0x230>
				char *s = va_arg(ap, char *);
    20da:	465c      	mov	r4, fp
    20dc:	e03d      	b.n	215a <_vprintk+0x13a>
			switch (*fmt) {
    20de:	2878      	cmp	r0, #120	; 0x78
    20e0:	d057      	beq.n	2192 <_vprintk+0x172>
    20e2:	287a      	cmp	r0, #122	; 0x7a
    20e4:	e7de      	b.n	20a4 <_vprintk+0x84>
				padding = PAD_SPACE_AFTER;
    20e6:	f04f 0803 	mov.w	r8, #3
    20ea:	e7b2      	b.n	2052 <_vprintk+0x32>
				if (min_width < 0 && padding == PAD_NONE) {
    20ec:	f1b9 0f00 	cmp.w	r9, #0
    20f0:	da0e      	bge.n	2110 <_vprintk+0xf0>
    20f2:	f1b8 0f00 	cmp.w	r8, #0
    20f6:	f000 80bc 	beq.w	2272 <_vprintk+0x252>
					min_width = *fmt - '0';
    20fa:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
    20fe:	f1b8 0f00 	cmp.w	r8, #0
    2102:	bf08      	it	eq
    2104:	f04f 0802 	moveq.w	r8, #2
    2108:	e7a3      	b.n	2052 <_vprintk+0x32>
				if (min_width < 0) {
    210a:	f1b9 0f00 	cmp.w	r9, #0
    210e:	dbf4      	blt.n	20fa <_vprintk+0xda>
					min_width = 10 * min_width + *fmt - '0';
    2110:	230a      	movs	r3, #10
    2112:	fb03 0909 	mla	r9, r3, r9, r0
    2116:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
    211a:	e7f0      	b.n	20fe <_vprintk+0xde>
				long_ctr++;
    211c:	f10a 0a01 	add.w	sl, sl, #1
    2120:	e797      	b.n	2052 <_vprintk+0x32>
				if (long_ctr < 2) {
    2122:	f1ba 0f01 	cmp.w	sl, #1
					d = (long)va_arg(ap, long long);
    2126:	bfc5      	ittet	gt
    2128:	3407      	addgt	r4, #7
    212a:	f024 0307 	bicgt.w	r3, r4, #7
					d = va_arg(ap, long);
    212e:	6825      	ldrle	r5, [r4, #0]
					d = (long)va_arg(ap, long long);
    2130:	681d      	ldrgt	r5, [r3, #0]
					d = va_arg(ap, long);
    2132:	bfd4      	ite	le
    2134:	3404      	addle	r4, #4
					d = (long)va_arg(ap, long long);
    2136:	f103 0408 	addgt.w	r4, r3, #8
				if (d < 0) {
    213a:	2d00      	cmp	r5, #0
    213c:	da05      	bge.n	214a <_vprintk+0x12a>
					out((int)'-', ctx);
    213e:	4639      	mov	r1, r7
    2140:	202d      	movs	r0, #45	; 0x2d
    2142:	47b0      	blx	r6
					d = -d;
    2144:	426d      	negs	r5, r5
					min_width--;
    2146:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
    214a:	f8cd 9000 	str.w	r9, [sp]
    214e:	4643      	mov	r3, r8
    2150:	462a      	mov	r2, r5
				_printk_dec_ulong(out, ctx, u, padding,
    2152:	4639      	mov	r1, r7
    2154:	4630      	mov	r0, r6
    2156:	f7ff fef7 	bl	1f48 <_printk_dec_ulong>
			might_format = 0;
    215a:	2500      	movs	r5, #0
				break;
    215c:	e779      	b.n	2052 <_vprintk+0x32>
				if (long_ctr < 2) {
    215e:	f1ba 0f01 	cmp.w	sl, #1
					u = (unsigned long)va_arg(ap,
    2162:	bfc5      	ittet	gt
    2164:	3407      	addgt	r4, #7
    2166:	f024 0307 	bicgt.w	r3, r4, #7
					u = va_arg(ap, unsigned long);
    216a:	6822      	ldrle	r2, [r4, #0]
					u = (unsigned long)va_arg(ap,
    216c:	681a      	ldrgt	r2, [r3, #0]
				_printk_dec_ulong(out, ctx, u, padding,
    216e:	f8cd 9000 	str.w	r9, [sp]
					u = (unsigned long)va_arg(ap,
    2172:	bfcc      	ite	gt
    2174:	f103 0408 	addgt.w	r4, r3, #8
					u = va_arg(ap, unsigned long);
    2178:	3404      	addle	r4, #4
				_printk_dec_ulong(out, ctx, u, padding,
    217a:	4643      	mov	r3, r8
    217c:	e7e9      	b.n	2152 <_vprintk+0x132>
				  out('0', ctx);
    217e:	4639      	mov	r1, r7
    2180:	2030      	movs	r0, #48	; 0x30
    2182:	47b0      	blx	r6
				  out('x', ctx);
    2184:	4639      	mov	r1, r7
    2186:	2078      	movs	r0, #120	; 0x78
    2188:	47b0      	blx	r6
				  min_width = 8;
    218a:	f04f 0908 	mov.w	r9, #8
				  padding = PAD_ZERO_BEFORE;
    218e:	f04f 0801 	mov.w	r8, #1
				if (long_ctr < 2) {
    2192:	f1ba 0f01 	cmp.w	sl, #1
					x = (unsigned long)va_arg(ap,
    2196:	bfc7      	ittee	gt
    2198:	3407      	addgt	r4, #7
    219a:	f024 0307 	bicgt.w	r3, r4, #7
					x = va_arg(ap, unsigned long);
    219e:	6823      	ldrle	r3, [r4, #0]
    21a0:	9305      	strle	r3, [sp, #20]
					x = (unsigned long)va_arg(ap,
    21a2:	bfc2      	ittt	gt
    21a4:	f103 0408 	addgt.w	r4, r3, #8
    21a8:	681b      	ldrgt	r3, [r3, #0]
    21aa:	9305      	strgt	r3, [sp, #20]
	int remaining = 8; /* 8 digits max */
    21ac:	f04f 0208 	mov.w	r2, #8
	int digits = 0;
    21b0:	f04f 0300 	mov.w	r3, #0
					x = va_arg(ap, unsigned long);
    21b4:	bfd8      	it	le
    21b6:	3404      	addle	r4, #4
	int digits = 0;
    21b8:	9303      	str	r3, [sp, #12]
	int found_largest_digit = 0;
    21ba:	9307      	str	r3, [sp, #28]
	int size = sizeof(num) * 2;
    21bc:	4693      	mov	fp, r2
		char nibble = (num >> ((size - 1) << 2) & 0xf);
    21be:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    21c2:	9b05      	ldr	r3, [sp, #20]
    21c4:	ea4f 008b 	mov.w	r0, fp, lsl #2
    21c8:	fa23 f000 	lsr.w	r0, r3, r0
		if (nibble || found_largest_digit || size == 1) {
    21cc:	f010 000f 	ands.w	r0, r0, #15
    21d0:	d109      	bne.n	21e6 <_vprintk+0x1c6>
    21d2:	9b07      	ldr	r3, [sp, #28]
    21d4:	b913      	cbnz	r3, 21dc <_vprintk+0x1bc>
    21d6:	f1bb 0f00 	cmp.w	fp, #0
    21da:	d122      	bne.n	2222 <_vprintk+0x202>
			nibble += nibble > 9 ? 87 : 48;
    21dc:	f04f 0e30 	mov.w	lr, #48	; 0x30
    21e0:	e007      	b.n	21f2 <_vprintk+0x1d2>
	for (; size; size--) {
    21e2:	9a06      	ldr	r2, [sp, #24]
    21e4:	e7eb      	b.n	21be <_vprintk+0x19e>
			nibble += nibble > 9 ? 87 : 48;
    21e6:	2809      	cmp	r0, #9
    21e8:	bf8c      	ite	hi
    21ea:	f04f 0e57 	movhi.w	lr, #87	; 0x57
    21ee:	f04f 0e30 	movls.w	lr, #48	; 0x30
			out((int)nibble, ctx);
    21f2:	4639      	mov	r1, r7
    21f4:	4470      	add	r0, lr
    21f6:	9206      	str	r2, [sp, #24]
    21f8:	47b0      	blx	r6
			digits++;
    21fa:	9b03      	ldr	r3, [sp, #12]
			found_largest_digit = 1;
    21fc:	9507      	str	r5, [sp, #28]
			digits++;
    21fe:	3301      	adds	r3, #1
    2200:	9303      	str	r3, [sp, #12]
	for (; size; size--) {
    2202:	f1bb 0f00 	cmp.w	fp, #0
    2206:	d1ec      	bne.n	21e2 <_vprintk+0x1c2>
	if (padding == PAD_SPACE_AFTER) {
    2208:	f1b8 0f03 	cmp.w	r8, #3
    220c:	d1a5      	bne.n	215a <_vprintk+0x13a>
		remaining = min_width * 2 - digits;
    220e:	9b03      	ldr	r3, [sp, #12]
    2210:	ebc3 0549 	rsb	r5, r3, r9, lsl #1
		while (remaining-- > 0) {
    2214:	2d00      	cmp	r5, #0
    2216:	dda0      	ble.n	215a <_vprintk+0x13a>
			out(' ', ctx);
    2218:	4639      	mov	r1, r7
    221a:	2020      	movs	r0, #32
    221c:	47b0      	blx	r6
    221e:	3d01      	subs	r5, #1
    2220:	e7f8      	b.n	2214 <_vprintk+0x1f4>
		if (remaining-- <= min_width) {
    2222:	1e53      	subs	r3, r2, #1
    2224:	4591      	cmp	r9, r2
    2226:	9306      	str	r3, [sp, #24]
    2228:	dbeb      	blt.n	2202 <_vprintk+0x1e2>
			if (padding == PAD_ZERO_BEFORE) {
    222a:	f1b8 0f01 	cmp.w	r8, #1
    222e:	d103      	bne.n	2238 <_vprintk+0x218>
				out('0', ctx);
    2230:	4639      	mov	r1, r7
    2232:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
    2234:	47b0      	blx	r6
    2236:	e7e4      	b.n	2202 <_vprintk+0x1e2>
			} else if (padding == PAD_SPACE_BEFORE) {
    2238:	f1b8 0f02 	cmp.w	r8, #2
    223c:	d1e1      	bne.n	2202 <_vprintk+0x1e2>
				out(' ', ctx);
    223e:	4639      	mov	r1, r7
    2240:	2020      	movs	r0, #32
    2242:	e7f7      	b.n	2234 <_vprintk+0x214>
					out((int)(*s++), ctx);
    2244:	4639      	mov	r1, r7
    2246:	9303      	str	r3, [sp, #12]
    2248:	462c      	mov	r4, r5
    224a:	47b0      	blx	r6
    224c:	9b03      	ldr	r3, [sp, #12]
    224e:	e734      	b.n	20ba <_vprintk+0x9a>
						out(' ', ctx);
    2250:	4639      	mov	r1, r7
    2252:	2020      	movs	r0, #32
    2254:	47b0      	blx	r6
    2256:	3c01      	subs	r4, #1
    2258:	e73c      	b.n	20d4 <_vprintk+0xb4>
				out(c, ctx);
    225a:	6820      	ldr	r0, [r4, #0]
				int c = va_arg(ap, int);
    225c:	1d25      	adds	r5, r4, #4
				out(c, ctx);
    225e:	4639      	mov	r1, r7
    2260:	47b0      	blx	r6
				int c = va_arg(ap, int);
    2262:	462c      	mov	r4, r5
    2264:	e779      	b.n	215a <_vprintk+0x13a>
				long_ctr = 0;
    2266:	46aa      	mov	sl, r5
				padding = PAD_NONE;
    2268:	46a8      	mov	r8, r5
				min_width = -1;
    226a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
				might_format = 1;
    226e:	2501      	movs	r5, #1
    2270:	e6ef      	b.n	2052 <_vprintk+0x32>
					padding = PAD_ZERO_BEFORE;
    2272:	f04f 0801 	mov.w	r8, #1
    2276:	e6ec      	b.n	2052 <_vprintk+0x32>
				char *s = va_arg(ap, char *);
    2278:	465c      	mov	r4, fp
			might_format = 0;
    227a:	4605      	mov	r5, r0
    227c:	e6e9      	b.n	2052 <_vprintk+0x32>
	...

00002280 <vprintk>:
{
    2280:	b513      	push	{r0, r1, r4, lr}
	struct out_context ctx = { 0 };
    2282:	ac02      	add	r4, sp, #8
    2284:	2300      	movs	r3, #0
    2286:	f844 3d04 	str.w	r3, [r4, #-4]!
	_vprintk(char_out, &ctx, fmt, ap);
    228a:	4602      	mov	r2, r0
    228c:	460b      	mov	r3, r1
    228e:	4803      	ldr	r0, [pc, #12]	; (229c <vprintk+0x1c>)
    2290:	4621      	mov	r1, r4
    2292:	f7ff fec5 	bl	2020 <_vprintk>
}
    2296:	9801      	ldr	r0, [sp, #4]
    2298:	b002      	add	sp, #8
    229a:	bd10      	pop	{r4, pc}
    229c:	00001f39 	.word	0x00001f39

000022a0 <printk>:
{
    22a0:	b40f      	push	{r0, r1, r2, r3}
    22a2:	b507      	push	{r0, r1, r2, lr}
    22a4:	a904      	add	r1, sp, #16
    22a6:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    22aa:	9101      	str	r1, [sp, #4]
	ret = vprintk(fmt, ap);
    22ac:	f7ff ffe8 	bl	2280 <vprintk>
}
    22b0:	b003      	add	sp, #12
    22b2:	f85d eb04 	ldr.w	lr, [sp], #4
    22b6:	b004      	add	sp, #16
    22b8:	4770      	bx	lr
	...

000022bc <snprintk>:

int snprintk(char *str, size_t size, const char *fmt, ...)
{
    22bc:	b40c      	push	{r2, r3}
    22be:	b530      	push	{r4, r5, lr}
    22c0:	b085      	sub	sp, #20
    22c2:	ab08      	add	r3, sp, #32
    22c4:	4604      	mov	r4, r0
    22c6:	f853 2b04 	ldr.w	r2, [r3], #4
	struct str_context ctx = { str, size, 0 };
    22ca:	9001      	str	r0, [sp, #4]
    22cc:	9102      	str	r1, [sp, #8]
    22ce:	2500      	movs	r5, #0
	va_list ap;

	va_start(ap, fmt);
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    22d0:	a901      	add	r1, sp, #4
    22d2:	4807      	ldr	r0, [pc, #28]	; (22f0 <snprintk+0x34>)
	va_start(ap, fmt);
    22d4:	9300      	str	r3, [sp, #0]
	struct str_context ctx = { str, size, 0 };
    22d6:	9503      	str	r5, [sp, #12]
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    22d8:	f7ff fea2 	bl	2020 <_vprintk>
	va_end(ap);

	if (ctx.count < ctx.max) {
    22dc:	9803      	ldr	r0, [sp, #12]
    22de:	9b02      	ldr	r3, [sp, #8]
    22e0:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    22e2:	bfb8      	it	lt
    22e4:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    22e6:	b005      	add	sp, #20
    22e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    22ec:	b002      	add	sp, #8
    22ee:	4770      	bx	lr
    22f0:	00001fe9 	.word	0x00001fe9

000022f4 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_HAS_NRFX, 1);
GEN_ABSOLUTE_SYM(CONFIG_TINYCRYPT, 1);
GEN_ABSOLUTE_SYM(CONFIG_TINYCRYPT_AES, 1);
GEN_ABSOLUTE_SYM(CONFIG_TINYCRYPT_AES_CMAC, 1);
GEN_ABSOLUTE_SYM(CONFIG_TEST_EXTRA_STACKSIZE, 0);
GEN_ABSOLUTE_SYM(CONFIG_NUM_IRQS, 46);
    22f4:	4770      	bx	lr

000022f6 <_copy>:
#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
	if (from_len <= to_len) {
    22f6:	428b      	cmp	r3, r1
{
    22f8:	b538      	push	{r3, r4, r5, lr}
    22fa:	4615      	mov	r5, r2
    22fc:	461c      	mov	r4, r3
	if (from_len <= to_len) {
    22fe:	d805      	bhi.n	230c <_copy+0x16>
		(void)memcpy(to, from, from_len);
    2300:	461a      	mov	r2, r3
    2302:	4629      	mov	r1, r5
    2304:	f7fe fa45 	bl	792 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
    2308:	4620      	mov	r0, r4
    230a:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
    230c:	2400      	movs	r4, #0
    230e:	e7fb      	b.n	2308 <_copy+0x12>

00002310 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
    2310:	f7fe ba6b 	b.w	7ea <memset>

00002314 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
    2314:	09c3      	lsrs	r3, r0, #7
    2316:	005a      	lsls	r2, r3, #1
    2318:	4413      	add	r3, r2
    231a:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    231e:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
    2322:	b2c0      	uxtb	r0, r0
    2324:	4770      	bx	lr

00002326 <add_round_key>:
	return TC_CRYPTO_SUCCESS;
}

static inline void add_round_key(uint8_t *s, const unsigned int *k)
{
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
    2326:	78cb      	ldrb	r3, [r1, #3]
    2328:	7802      	ldrb	r2, [r0, #0]
    232a:	4053      	eors	r3, r2
    232c:	7003      	strb	r3, [r0, #0]
    232e:	884b      	ldrh	r3, [r1, #2]
    2330:	7842      	ldrb	r2, [r0, #1]
    2332:	4053      	eors	r3, r2
    2334:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
    2336:	680a      	ldr	r2, [r1, #0]
    2338:	7883      	ldrb	r3, [r0, #2]
    233a:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
    233e:	7083      	strb	r3, [r0, #2]
    2340:	680a      	ldr	r2, [r1, #0]
    2342:	78c3      	ldrb	r3, [r0, #3]
    2344:	4053      	eors	r3, r2
    2346:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
    2348:	79cb      	ldrb	r3, [r1, #7]
    234a:	7902      	ldrb	r2, [r0, #4]
    234c:	4053      	eors	r3, r2
    234e:	7103      	strb	r3, [r0, #4]
    2350:	88cb      	ldrh	r3, [r1, #6]
    2352:	7942      	ldrb	r2, [r0, #5]
    2354:	4053      	eors	r3, r2
    2356:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
    2358:	684a      	ldr	r2, [r1, #4]
    235a:	7983      	ldrb	r3, [r0, #6]
    235c:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
    2360:	7183      	strb	r3, [r0, #6]
    2362:	684a      	ldr	r2, [r1, #4]
    2364:	79c3      	ldrb	r3, [r0, #7]
    2366:	4053      	eors	r3, r2
    2368:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
    236a:	7acb      	ldrb	r3, [r1, #11]
    236c:	7a02      	ldrb	r2, [r0, #8]
    236e:	4053      	eors	r3, r2
    2370:	7203      	strb	r3, [r0, #8]
    2372:	7a42      	ldrb	r2, [r0, #9]
    2374:	894b      	ldrh	r3, [r1, #10]
    2376:	4053      	eors	r3, r2
    2378:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
    237a:	688a      	ldr	r2, [r1, #8]
    237c:	7a83      	ldrb	r3, [r0, #10]
    237e:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
    2382:	7283      	strb	r3, [r0, #10]
    2384:	688a      	ldr	r2, [r1, #8]
    2386:	7ac3      	ldrb	r3, [r0, #11]
    2388:	4053      	eors	r3, r2
    238a:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
    238c:	7bcb      	ldrb	r3, [r1, #15]
    238e:	7b02      	ldrb	r2, [r0, #12]
    2390:	4053      	eors	r3, r2
    2392:	7303      	strb	r3, [r0, #12]
    2394:	89cb      	ldrh	r3, [r1, #14]
    2396:	7b42      	ldrb	r2, [r0, #13]
    2398:	4053      	eors	r3, r2
    239a:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
    239c:	68ca      	ldr	r2, [r1, #12]
    239e:	7b83      	ldrb	r3, [r0, #14]
    23a0:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
    23a4:	7383      	strb	r3, [r0, #14]
    23a6:	68ca      	ldr	r2, [r1, #12]
    23a8:	7bc3      	ldrb	r3, [r0, #15]
    23aa:	4053      	eors	r3, r2
    23ac:	73c3      	strb	r3, [r0, #15]
    23ae:	4770      	bx	lr

000023b0 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
    23b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
    23b2:	7802      	ldrb	r2, [r0, #0]
    23b4:	f88d 2000 	strb.w	r2, [sp]
    23b8:	7942      	ldrb	r2, [r0, #5]
    23ba:	f88d 2001 	strb.w	r2, [sp, #1]
    23be:	7a82      	ldrb	r2, [r0, #10]
    23c0:	f88d 2002 	strb.w	r2, [sp, #2]
    23c4:	7bc2      	ldrb	r2, [r0, #15]
    23c6:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
    23ca:	7902      	ldrb	r2, [r0, #4]
    23cc:	f88d 2004 	strb.w	r2, [sp, #4]
    23d0:	7a42      	ldrb	r2, [r0, #9]
    23d2:	f88d 2005 	strb.w	r2, [sp, #5]
    23d6:	7b82      	ldrb	r2, [r0, #14]
    23d8:	f88d 2006 	strb.w	r2, [sp, #6]
    23dc:	78c2      	ldrb	r2, [r0, #3]
    23de:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
    23e2:	7a02      	ldrb	r2, [r0, #8]
    23e4:	f88d 2008 	strb.w	r2, [sp, #8]
    23e8:	7b42      	ldrb	r2, [r0, #13]
    23ea:	f88d 2009 	strb.w	r2, [sp, #9]
    23ee:	7882      	ldrb	r2, [r0, #2]
    23f0:	f88d 200a 	strb.w	r2, [sp, #10]
    23f4:	79c2      	ldrb	r2, [r0, #7]
    23f6:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
    23fa:	7b02      	ldrb	r2, [r0, #12]
    23fc:	f88d 200c 	strb.w	r2, [sp, #12]
    2400:	7842      	ldrb	r2, [r0, #1]
    2402:	f88d 200d 	strb.w	r2, [sp, #13]
    2406:	7ac3      	ldrb	r3, [r0, #11]
    2408:	7982      	ldrb	r2, [r0, #6]
    240a:	f88d 200e 	strb.w	r2, [sp, #14]
    240e:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
    2412:	2310      	movs	r3, #16
    2414:	466a      	mov	r2, sp
    2416:	4619      	mov	r1, r3
    2418:	f7ff ff6d 	bl	22f6 <_copy>
}
    241c:	b005      	add	sp, #20
    241e:	f85d fb04 	ldr.w	pc, [sp], #4

00002422 <mult_row_column>:
{
    2422:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2424:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    2426:	7808      	ldrb	r0, [r1, #0]
{
    2428:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    242a:	f7ff ff73 	bl	2314 <_double_byte>
    242e:	4605      	mov	r5, r0
    2430:	7860      	ldrb	r0, [r4, #1]
    2432:	f7ff ff6f 	bl	2314 <_double_byte>
    2436:	78a2      	ldrb	r2, [r4, #2]
    2438:	7863      	ldrb	r3, [r4, #1]
    243a:	4053      	eors	r3, r2
    243c:	78e2      	ldrb	r2, [r4, #3]
    243e:	4053      	eors	r3, r2
    2440:	405d      	eors	r5, r3
    2442:	4045      	eors	r5, r0
    2444:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
    2446:	7860      	ldrb	r0, [r4, #1]
    2448:	7827      	ldrb	r7, [r4, #0]
    244a:	f7ff ff63 	bl	2314 <_double_byte>
    244e:	4605      	mov	r5, r0
    2450:	78a0      	ldrb	r0, [r4, #2]
    2452:	f7ff ff5f 	bl	2314 <_double_byte>
    2456:	78a3      	ldrb	r3, [r4, #2]
    2458:	405f      	eors	r7, r3
    245a:	78e3      	ldrb	r3, [r4, #3]
    245c:	405f      	eors	r7, r3
    245e:	407d      	eors	r5, r7
    2460:	4045      	eors	r5, r0
    2462:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
    2464:	78a0      	ldrb	r0, [r4, #2]
    2466:	7865      	ldrb	r5, [r4, #1]
    2468:	7827      	ldrb	r7, [r4, #0]
    246a:	f7ff ff53 	bl	2314 <_double_byte>
    246e:	406f      	eors	r7, r5
    2470:	4605      	mov	r5, r0
    2472:	78e0      	ldrb	r0, [r4, #3]
    2474:	f7ff ff4e 	bl	2314 <_double_byte>
    2478:	78e3      	ldrb	r3, [r4, #3]
    247a:	405f      	eors	r7, r3
    247c:	407d      	eors	r5, r7
    247e:	4045      	eors	r5, r0
    2480:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
    2482:	7820      	ldrb	r0, [r4, #0]
    2484:	f7ff ff46 	bl	2314 <_double_byte>
    2488:	7863      	ldrb	r3, [r4, #1]
    248a:	7825      	ldrb	r5, [r4, #0]
    248c:	405d      	eors	r5, r3
    248e:	78a3      	ldrb	r3, [r4, #2]
    2490:	405d      	eors	r5, r3
    2492:	4045      	eors	r5, r0
    2494:	78e0      	ldrb	r0, [r4, #3]
    2496:	f7ff ff3d 	bl	2314 <_double_byte>
    249a:	b2ed      	uxtb	r5, r5
    249c:	4068      	eors	r0, r5
    249e:	70f0      	strb	r0, [r6, #3]
    24a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000024a4 <tc_aes128_set_encrypt_key>:
{
    24a4:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
    24a6:	4e28      	ldr	r6, [pc, #160]	; (2548 <tc_aes128_set_encrypt_key+0xa4>)
{
    24a8:	4607      	mov	r7, r0
    24aa:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    24ac:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
    24ae:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    24b0:	ad01      	add	r5, sp, #4
    24b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    24b4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    24b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    24b8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    24bc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
    24c0:	2f00      	cmp	r7, #0
    24c2:	d03c      	beq.n	253e <tc_aes128_set_encrypt_key+0x9a>
	} else if (k == (const uint8_t *) 0) {
    24c4:	2c00      	cmp	r4, #0
    24c6:	d03c      	beq.n	2542 <tc_aes128_set_encrypt_key+0x9e>
    24c8:	1f38      	subs	r0, r7, #4
    24ca:	4621      	mov	r1, r4
    24cc:	4602      	mov	r2, r0
    24ce:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    24d0:	784b      	ldrb	r3, [r1, #1]
    24d2:	780d      	ldrb	r5, [r1, #0]
    24d4:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    24d6:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    24da:	78cd      	ldrb	r5, [r1, #3]
    24dc:	432b      	orrs	r3, r5
    24de:	788d      	ldrb	r5, [r1, #2]
    24e0:	3104      	adds	r1, #4
    24e2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
    24e6:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    24e8:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    24ec:	d1f0      	bne.n	24d0 <tc_aes128_set_encrypt_key+0x2c>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    24ee:	4c17      	ldr	r4, [pc, #92]	; (254c <tc_aes128_set_encrypt_key+0xa8>)
    24f0:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
    24f2:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    24f4:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    24f6:	d118      	bne.n	252a <tc_aes128_set_encrypt_key+0x86>
	return (((a) >> 24)|((a) << 8));
    24f8:	ea4f 6333 	mov.w	r3, r3, ror #24
			t = subword(rotword(t)) ^ rconst[i/Nk];
    24fc:	0e1a      	lsrs	r2, r3, #24
    24fe:	5ca5      	ldrb	r5, [r4, r2]
    2500:	b2da      	uxtb	r2, r3
    2502:	5ca2      	ldrb	r2, [r4, r2]
    2504:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    2508:	f3c3 4507 	ubfx	r5, r3, #16, #8
    250c:	f3c3 2307 	ubfx	r3, r3, #8, #8
    2510:	5d65      	ldrb	r5, [r4, r5]
    2512:	5ce3      	ldrb	r3, [r4, r3]
    2514:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    2518:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    251c:	ad0c      	add	r5, sp, #48	; 0x30
    251e:	f021 0303 	bic.w	r3, r1, #3
    2522:	442b      	add	r3, r5
    2524:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    2528:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
    252a:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    252e:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    2530:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    2532:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    2534:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    2536:	d1dc      	bne.n	24f2 <tc_aes128_set_encrypt_key+0x4e>
	return TC_CRYPTO_SUCCESS;
    2538:	2001      	movs	r0, #1
}
    253a:	b00d      	add	sp, #52	; 0x34
    253c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    253e:	4638      	mov	r0, r7
    2540:	e7fb      	b.n	253a <tc_aes128_set_encrypt_key+0x96>
    2542:	4620      	mov	r0, r4
    2544:	e7f9      	b.n	253a <tc_aes128_set_encrypt_key+0x96>
    2546:	bf00      	nop
    2548:	00022934 	.word	0x00022934
    254c:	00023274 	.word	0x00023274

00002550 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
    2550:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2554:	4615      	mov	r5, r2
    2556:	b089      	sub	sp, #36	; 0x24
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
    2558:	4680      	mov	r8, r0
    255a:	2800      	cmp	r0, #0
    255c:	d05b      	beq.n	2616 <tc_aes_encrypt+0xc6>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
    255e:	2900      	cmp	r1, #0
    2560:	d05a      	beq.n	2618 <tc_aes_encrypt+0xc8>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
    2562:	2a00      	cmp	r2, #0
    2564:	d05a      	beq.n	261c <tc_aes_encrypt+0xcc>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
    2566:	2310      	movs	r3, #16
    2568:	460a      	mov	r2, r1
    256a:	4668      	mov	r0, sp
    256c:	4619      	mov	r1, r3
    256e:	f7ff fec2 	bl	22f6 <_copy>
	add_round_key(state, s->words);
    2572:	4629      	mov	r1, r5
    2574:	4668      	mov	r0, sp
		s[i] = sbox[s[i]];
    2576:	4c2a      	ldr	r4, [pc, #168]	; (2620 <tc_aes_encrypt+0xd0>)
	add_round_key(state, s->words);
    2578:	f7ff fed5 	bl	2326 <add_round_key>
    257c:	f105 0710 	add.w	r7, r5, #16
    2580:	46a1      	mov	r9, r4
    2582:	35a0      	adds	r5, #160	; 0xa0
{
    2584:	2600      	movs	r6, #0
		s[i] = sbox[s[i]];
    2586:	f81d 3006 	ldrb.w	r3, [sp, r6]
    258a:	5ce3      	ldrb	r3, [r4, r3]
    258c:	f80d 3006 	strb.w	r3, [sp, r6]
	for (i = 0; i < (Nb * Nk); ++i) {
    2590:	3601      	adds	r6, #1
    2592:	2e10      	cmp	r6, #16
    2594:	d1f7      	bne.n	2586 <tc_aes_encrypt+0x36>

	for (i = 0; i < (Nr - 1); ++i) {
		sub_bytes(state);
		shift_rows(state);
    2596:	4668      	mov	r0, sp
    2598:	f7ff ff0a 	bl	23b0 <shift_rows>
	mult_row_column(t, s);
    259c:	4669      	mov	r1, sp
    259e:	a804      	add	r0, sp, #16
    25a0:	f7ff ff3f 	bl	2422 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
    25a4:	a901      	add	r1, sp, #4
    25a6:	a805      	add	r0, sp, #20
    25a8:	f7ff ff3b 	bl	2422 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
    25ac:	a902      	add	r1, sp, #8
    25ae:	a806      	add	r0, sp, #24
    25b0:	f7ff ff37 	bl	2422 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
    25b4:	a903      	add	r1, sp, #12
    25b6:	a807      	add	r0, sp, #28
    25b8:	f7ff ff33 	bl	2422 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
    25bc:	4633      	mov	r3, r6
    25be:	aa04      	add	r2, sp, #16
    25c0:	4631      	mov	r1, r6
    25c2:	4668      	mov	r0, sp
    25c4:	f7ff fe97 	bl	22f6 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
    25c8:	4639      	mov	r1, r7
    25ca:	4668      	mov	r0, sp
    25cc:	3710      	adds	r7, #16
    25ce:	f7ff feaa 	bl	2326 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
    25d2:	42bd      	cmp	r5, r7
    25d4:	d1d6      	bne.n	2584 <tc_aes_encrypt+0x34>
    25d6:	2600      	movs	r6, #0
		s[i] = sbox[s[i]];
    25d8:	f81d 3006 	ldrb.w	r3, [sp, r6]
    25dc:	f819 3003 	ldrb.w	r3, [r9, r3]
    25e0:	f80d 3006 	strb.w	r3, [sp, r6]
	for (i = 0; i < (Nb * Nk); ++i) {
    25e4:	3601      	adds	r6, #1
    25e6:	2e10      	cmp	r6, #16
    25e8:	d1f6      	bne.n	25d8 <tc_aes_encrypt+0x88>
	}

	sub_bytes(state);
	shift_rows(state);
    25ea:	4668      	mov	r0, sp
    25ec:	f7ff fee0 	bl	23b0 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
    25f0:	4629      	mov	r1, r5
    25f2:	4668      	mov	r0, sp
    25f4:	f7ff fe97 	bl	2326 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
    25f8:	4633      	mov	r3, r6
    25fa:	466a      	mov	r2, sp
    25fc:	4631      	mov	r1, r6
    25fe:	4640      	mov	r0, r8
    2600:	f7ff fe79 	bl	22f6 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
    2604:	4668      	mov	r0, sp
    2606:	4632      	mov	r2, r6
    2608:	2100      	movs	r1, #0
    260a:	f7ff fe81 	bl	2310 <_set>

	return TC_CRYPTO_SUCCESS;
    260e:	2001      	movs	r0, #1
}
    2610:	b009      	add	sp, #36	; 0x24
    2612:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2616:	e7fb      	b.n	2610 <tc_aes_encrypt+0xc0>
		return TC_CRYPTO_FAIL;
    2618:	4608      	mov	r0, r1
    261a:	e7f9      	b.n	2610 <tc_aes_encrypt+0xc0>
    261c:	4610      	mov	r0, r2
    261e:	e7f7      	b.n	2610 <tc_aes_encrypt+0xc0>
    2620:	00023274 	.word	0x00023274

00002624 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
    2624:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
    2626:	f991 3000 	ldrsb.w	r3, [r1]
    262a:	2b00      	cmp	r3, #0
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);
    262c:	f101 020f 	add.w	r2, r1, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
    2630:	bfb4      	ite	lt
    2632:	2387      	movlt	r3, #135	; 0x87
    2634:	2300      	movge	r3, #0

	out += (TC_AES_BLOCK_SIZE - 1);
    2636:	300f      	adds	r0, #15
	for (;;) {
		*out-- = (*x << 1) ^ carry;
    2638:	7814      	ldrb	r4, [r2, #0]
		if (x == in) {
    263a:	428a      	cmp	r2, r1
		*out-- = (*x << 1) ^ carry;
    263c:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
    2640:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
    2644:	d003      	beq.n	264e <gf_double+0x2a>
			break;
		}
		carry = *x-- >> 7;
    2646:	f812 3901 	ldrb.w	r3, [r2], #-1
    264a:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
    264c:	e7f4      	b.n	2638 <gf_double+0x14>
    264e:	bd10      	pop	{r4, pc}

00002650 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
    2650:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
    2652:	b128      	cbz	r0, 2660 <tc_cmac_erase+0x10>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
    2654:	2258      	movs	r2, #88	; 0x58
    2656:	2100      	movs	r1, #0
    2658:	f7ff fe5a 	bl	2310 <_set>

	return TC_CRYPTO_SUCCESS;
    265c:	2001      	movs	r0, #1
    265e:	bd08      	pop	{r3, pc}
}
    2660:	bd08      	pop	{r3, pc}

00002662 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
    2662:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
    2664:	4604      	mov	r4, r0
    2666:	b190      	cbz	r0, 268e <tc_cmac_init+0x2c>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
    2668:	2210      	movs	r2, #16
    266a:	2100      	movs	r1, #0
    266c:	f7ff fe50 	bl	2310 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
    2670:	f104 0030 	add.w	r0, r4, #48	; 0x30
    2674:	2210      	movs	r2, #16
    2676:	2100      	movs	r1, #0
    2678:	f7ff fe4a 	bl	2310 <_set>
	s->leftover_offset = 0;
    267c:	2300      	movs	r3, #0
    267e:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
    2680:	2200      	movs	r2, #0
    2682:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2686:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
    268a:	2001      	movs	r0, #1
    268c:	bd10      	pop	{r4, pc}
}
    268e:	bd10      	pop	{r4, pc}

00002690 <tc_cmac_setup>:
{
    2690:	b570      	push	{r4, r5, r6, lr}
    2692:	460d      	mov	r5, r1
    2694:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
    2696:	4604      	mov	r4, r0
    2698:	b318      	cbz	r0, 26e2 <tc_cmac_setup+0x52>
    269a:	b319      	cbz	r1, 26e4 <tc_cmac_setup+0x54>
	_set(s, 0, sizeof(*s));
    269c:	2258      	movs	r2, #88	; 0x58
    269e:	2100      	movs	r1, #0
    26a0:	f7ff fe36 	bl	2310 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
    26a4:	4629      	mov	r1, r5
	s->sched = sched;
    26a6:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
    26a8:	4630      	mov	r0, r6
    26aa:	f7ff fefb 	bl	24a4 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
    26ae:	4620      	mov	r0, r4
    26b0:	2210      	movs	r2, #16
    26b2:	2100      	movs	r1, #0
    26b4:	f7ff fe2c 	bl	2310 <_set>
	gf_double (s->K1, s->iv);
    26b8:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
    26bc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    26be:	4621      	mov	r1, r4
    26c0:	4620      	mov	r0, r4
    26c2:	f7ff ff45 	bl	2550 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
    26c6:	4621      	mov	r1, r4
    26c8:	4628      	mov	r0, r5
    26ca:	f7ff ffab 	bl	2624 <gf_double>
	gf_double (s->K2, s->K1);
    26ce:	4629      	mov	r1, r5
    26d0:	f104 0020 	add.w	r0, r4, #32
    26d4:	f7ff ffa6 	bl	2624 <gf_double>
	tc_cmac_init(s);
    26d8:	4620      	mov	r0, r4
    26da:	f7ff ffc2 	bl	2662 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
    26de:	2001      	movs	r0, #1
    26e0:	bd70      	pop	{r4, r5, r6, pc}
    26e2:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
    26e4:	4608      	mov	r0, r1
}
    26e6:	bd70      	pop	{r4, r5, r6, pc}

000026e8 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
    26e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    26ea:	460d      	mov	r5, r1
    26ec:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
    26ee:	4604      	mov	r4, r0
    26f0:	2800      	cmp	r0, #0
    26f2:	d05b      	beq.n	27ac <tc_cmac_update+0xc4>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
    26f4:	b90a      	cbnz	r2, 26fa <tc_cmac_update+0x12>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
    26f6:	2001      	movs	r0, #1
    26f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (data == (const uint8_t *) 0) {
    26fa:	2900      	cmp	r1, #0
    26fc:	d056      	beq.n	27ac <tc_cmac_update+0xc4>
	if (s->countdown == 0) {
    26fe:	e9d0 2314 	ldrd	r2, r3, [r0, #80]	; 0x50
    2702:	ea52 0103 	orrs.w	r1, r2, r3
    2706:	d051      	beq.n	27ac <tc_cmac_update+0xc4>
	s->countdown--;
    2708:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
    270c:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
    2710:	e9c0 2314 	strd	r2, r3, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
    2714:	6c40      	ldr	r0, [r0, #68]	; 0x44
    2716:	b348      	cbz	r0, 276c <tc_cmac_update+0x84>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
    2718:	f1c0 0710 	rsb	r7, r0, #16
		if (data_length < remaining_space) {
    271c:	42be      	cmp	r6, r7
    271e:	f100 0030 	add.w	r0, r0, #48	; 0x30
    2722:	d209      	bcs.n	2738 <tc_cmac_update+0x50>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
    2724:	4633      	mov	r3, r6
    2726:	4631      	mov	r1, r6
    2728:	462a      	mov	r2, r5
    272a:	4420      	add	r0, r4
    272c:	f7ff fde3 	bl	22f6 <_copy>
			s->leftover_offset += data_length;
    2730:	6c63      	ldr	r3, [r4, #68]	; 0x44
    2732:	441e      	add	r6, r3
		s->leftover_offset = data_length;
    2734:	6466      	str	r6, [r4, #68]	; 0x44
    2736:	e7de      	b.n	26f6 <tc_cmac_update+0xe>
		_copy(&s->leftover[s->leftover_offset],
    2738:	463b      	mov	r3, r7
    273a:	462a      	mov	r2, r5
    273c:	4639      	mov	r1, r7
    273e:	4420      	add	r0, r4
    2740:	f7ff fdd9 	bl	22f6 <_copy>
		s->leftover_offset = 0;
    2744:	2300      	movs	r3, #0
    2746:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
    2748:	1bf6      	subs	r6, r6, r7
		data += remaining_space;
    274a:	443d      	add	r5, r7
    274c:	1e63      	subs	r3, r4, #1
    274e:	f104 000f 	add.w	r0, r4, #15
			s->iv[i] ^= s->leftover[i];
    2752:	785a      	ldrb	r2, [r3, #1]
    2754:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
    2758:	404a      	eors	r2, r1
    275a:	f803 2f01 	strb.w	r2, [r3, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    275e:	4283      	cmp	r3, r0
    2760:	d1f7      	bne.n	2752 <tc_cmac_update+0x6a>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
    2762:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    2764:	4621      	mov	r1, r4
    2766:	4620      	mov	r0, r4
    2768:	f7ff fef2 	bl	2550 <tc_aes_encrypt>
    276c:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
    2770:	2e10      	cmp	r6, #16
    2772:	d911      	bls.n	2798 <tc_cmac_update+0xb0>
    2774:	1e63      	subs	r3, r4, #1
    2776:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
    2778:	785a      	ldrb	r2, [r3, #1]
    277a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    277e:	4042      	eors	r2, r0
    2780:	f803 2f01 	strb.w	r2, [r3, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    2784:	42bb      	cmp	r3, r7
    2786:	d1f7      	bne.n	2778 <tc_cmac_update+0x90>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
    2788:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    278a:	4621      	mov	r1, r4
    278c:	4620      	mov	r0, r4
    278e:	f7ff fedf 	bl	2550 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
    2792:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
    2794:	3e10      	subs	r6, #16
    2796:	e7eb      	b.n	2770 <tc_cmac_update+0x88>
	if (data_length > 0) {
    2798:	2e00      	cmp	r6, #0
    279a:	d0ac      	beq.n	26f6 <tc_cmac_update+0xe>
		_copy(s->leftover, data_length, data, data_length);
    279c:	4633      	mov	r3, r6
    279e:	462a      	mov	r2, r5
    27a0:	4631      	mov	r1, r6
    27a2:	f104 0030 	add.w	r0, r4, #48	; 0x30
    27a6:	f7ff fda6 	bl	22f6 <_copy>
    27aa:	e7c3      	b.n	2734 <tc_cmac_update+0x4c>
		return TC_CRYPTO_FAIL;
    27ac:	2000      	movs	r0, #0
}
    27ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000027b0 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
    27b0:	b570      	push	{r4, r5, r6, lr}
    27b2:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
    27b4:	4605      	mov	r5, r0
    27b6:	b370      	cbz	r0, 2816 <tc_cmac_final+0x66>
    27b8:	b371      	cbz	r1, 2818 <tc_cmac_final+0x68>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
    27ba:	6c4a      	ldr	r2, [r1, #68]	; 0x44
    27bc:	2a10      	cmp	r2, #16
    27be:	d11a      	bne.n	27f6 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
    27c0:	f101 0210 	add.w	r2, r1, #16
    27c4:	1e61      	subs	r1, r4, #1
    27c6:	3a01      	subs	r2, #1
    27c8:	f104 060f 	add.w	r6, r4, #15
		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
		s->iv[i] ^= s->leftover[i] ^ k[i];
    27cc:	f891 0031 	ldrb.w	r0, [r1, #49]	; 0x31
    27d0:	784b      	ldrb	r3, [r1, #1]
    27d2:	4043      	eors	r3, r0
    27d4:	f812 0f01 	ldrb.w	r0, [r2, #1]!
    27d8:	4043      	eors	r3, r0
    27da:	f801 3f01 	strb.w	r3, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    27de:	428e      	cmp	r6, r1
    27e0:	d1f4      	bne.n	27cc <tc_cmac_final+0x1c>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
    27e2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    27e4:	4621      	mov	r1, r4
    27e6:	4628      	mov	r0, r5
    27e8:	f7ff feb2 	bl	2550 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
    27ec:	4620      	mov	r0, r4
    27ee:	f7ff ff2f 	bl	2650 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
    27f2:	2001      	movs	r0, #1
    27f4:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
    27f6:	f102 0030 	add.w	r0, r2, #48	; 0x30
    27fa:	2100      	movs	r1, #0
    27fc:	f1c2 0210 	rsb	r2, r2, #16
    2800:	4420      	add	r0, r4
    2802:	f7ff fd85 	bl	2310 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
    2806:	6c63      	ldr	r3, [r4, #68]	; 0x44
    2808:	4423      	add	r3, r4
    280a:	2280      	movs	r2, #128	; 0x80
    280c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
    2810:	f104 0220 	add.w	r2, r4, #32
    2814:	e7d6      	b.n	27c4 <tc_cmac_final+0x14>
    2816:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
    2818:	4608      	mov	r0, r1
}
    281a:	bd70      	pop	{r4, r5, r6, pc}

0000281c <sys_rand32_get>:
#include <entropy.h>

static atomic_t entropy_driver;

u32_t sys_rand32_get(void)
{
    281c:	b513      	push	{r0, r1, r4, lr}
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    281e:	4c11      	ldr	r4, [pc, #68]	; (2864 <sys_rand32_get+0x48>)
    2820:	f3bf 8f5b 	dmb	ish
    2824:	6820      	ldr	r0, [r4, #0]
    2826:	f3bf 8f5b 	dmb	ish
	struct device *dev = (struct device *)atomic_get(&entropy_driver);
	u32_t random_num;
	int ret;

	if (unlikely(!dev)) {
    282a:	b960      	cbnz	r0, 2846 <sys_rand32_get+0x2a>
		/* Only one entropy device exists, so this is safe even
		 * if the whole operation isn't atomic.
		 */
		dev = device_get_binding(CONFIG_ENTROPY_NAME);
    282c:	480e      	ldr	r0, [pc, #56]	; (2868 <sys_rand32_get+0x4c>)
    282e:	f01e fcb3 	bl	21198 <device_get_binding>
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2832:	f3bf 8f5b 	dmb	ish
    2836:	e854 3f00 	ldrex	r3, [r4]
    283a:	e844 0200 	strex	r2, r0, [r4]
    283e:	2a00      	cmp	r2, #0
    2840:	d1f9      	bne.n	2836 <sys_rand32_get+0x1a>
    2842:	f3bf 8f5b 	dmb	ish
					    u16_t length)
{
	const struct entropy_driver_api *api = dev->driver_api;

	__ASSERT(api->get_entropy, "Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
    2846:	6843      	ldr	r3, [r0, #4]
    2848:	2204      	movs	r2, #4
    284a:	681b      	ldr	r3, [r3, #0]
    284c:	eb0d 0102 	add.w	r1, sp, r2
    2850:	4798      	blx	r3
		atomic_set(&entropy_driver, (atomic_t)(uintptr_t)dev);
	}

	ret = entropy_get_entropy(dev, (u8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
    2852:	2800      	cmp	r0, #0
    2854:	da02      	bge.n	285c <sys_rand32_get+0x40>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
    2856:	f000 fd0d 	bl	3274 <_timer_cycle_get_32>
    285a:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
    285c:	9801      	ldr	r0, [sp, #4]
    285e:	b002      	add	sp, #8
    2860:	bd10      	pop	{r4, pc}
    2862:	bf00      	nop
    2864:	20000108 	.word	0x20000108
    2868:	00023374 	.word	0x00023374

0000286c <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    286c:	280a      	cmp	r0, #10
{
    286e:	b538      	push	{r3, r4, r5, lr}
    2870:	4604      	mov	r4, r0
    2872:	4d07      	ldr	r5, [pc, #28]	; (2890 <console_out+0x24>)
	if ('\n' == c) {
    2874:	d104      	bne.n	2880 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    2876:	6828      	ldr	r0, [r5, #0]
static inline unsigned char _impl_uart_poll_out(struct device *dev,
						unsigned char out_char)
{
	const struct uart_driver_api *api = dev->driver_api;

	return api->poll_out(dev, out_char);
    2878:	6843      	ldr	r3, [r0, #4]
    287a:	210d      	movs	r1, #13
    287c:	685b      	ldr	r3, [r3, #4]
    287e:	4798      	blx	r3
	}
	uart_poll_out(uart_console_dev, c);
    2880:	6828      	ldr	r0, [r5, #0]
    2882:	6843      	ldr	r3, [r0, #4]
    2884:	b2e1      	uxtb	r1, r4
    2886:	685b      	ldr	r3, [r3, #4]
    2888:	4798      	blx	r3

	return c;
}
    288a:	4620      	mov	r0, r4
    288c:	bd38      	pop	{r3, r4, r5, pc}
    288e:	bf00      	nop
    2890:	2000010c 	.word	0x2000010c

00002894 <uart_console_hook_install>:
 */

void uart_console_hook_install(void)
{
	__stdout_hook_install(console_out);
	__printk_hook_install(console_out);
    2894:	4801      	ldr	r0, [pc, #4]	; (289c <uart_console_hook_install+0x8>)
    2896:	f7ff bbbd 	b.w	2014 <__printk_hook_install>
    289a:	bf00      	nop
    289c:	0000286d 	.word	0x0000286d

000028a0 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    28a0:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    28a2:	4804      	ldr	r0, [pc, #16]	; (28b4 <uart_console_init+0x14>)
    28a4:	f01e fc78 	bl	21198 <device_get_binding>
    28a8:	4b03      	ldr	r3, [pc, #12]	; (28b8 <uart_console_init+0x18>)
    28aa:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    28ac:	f7ff fff2 	bl	2894 <uart_console_hook_install>

	return 0;
}
    28b0:	2000      	movs	r0, #0
    28b2:	bd08      	pop	{r3, pc}
    28b4:	0002337e 	.word	0x0002337e
    28b8:	2000010c 	.word	0x2000010c

000028bc <_m16src_stop>:
		return -EINPROGRESS;
	}
}

static int _m16src_stop(struct device *dev, clock_control_subsys_t sub_system)
{
    28bc:	b510      	push	{r4, lr}
    28be:	f04f 0320 	mov.w	r3, #32
    28c2:	f3ef 8211 	mrs	r2, BASEPRI
    28c6:	f383 8811 	msr	BASEPRI, r3
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
    28ca:	4c11      	ldr	r4, [pc, #68]	; (2910 <_m16src_stop+0x54>)
    28cc:	7823      	ldrb	r3, [r4, #0]
    28ce:	b923      	cbnz	r3, 28da <_m16src_stop+0x1e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    28d0:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EALREADY;
    28d4:	f06f 0044 	mvn.w	r0, #68	; 0x44
    28d8:	bd10      	pop	{r4, pc}
	}

	if (--m16src_ref) {
    28da:	3b01      	subs	r3, #1
    28dc:	b2db      	uxtb	r3, r3
    28de:	7023      	strb	r3, [r4, #0]
    28e0:	b123      	cbz	r3, 28ec <_m16src_stop+0x30>
    28e2:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EBUSY;
    28e6:	f06f 000f 	mvn.w	r0, #15
    28ea:	bd10      	pop	{r4, pc}
	}

	if (m16src_grd) {
    28ec:	4b09      	ldr	r3, [pc, #36]	; (2914 <_m16src_stop+0x58>)
    28ee:	7818      	ldrb	r0, [r3, #0]
    28f0:	2101      	movs	r1, #1
    28f2:	b128      	cbz	r0, 2900 <_m16src_stop+0x44>
		m16src_ref++;
    28f4:	7021      	strb	r1, [r4, #0]
    28f6:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EAGAIN;
    28fa:	f06f 000a 	mvn.w	r0, #10
    28fe:	bd10      	pop	{r4, pc}
	}

	m16src_grd = 1;
    2900:	7019      	strb	r1, [r3, #0]
    2902:	f382 8811 	msr	BASEPRI, r2

	irq_unlock(imask);

	/* re-entrancy and mult-context safe, and reference count is zero, */

	NRF_CLOCK->TASKS_HFCLKSTOP = 1;
    2906:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    290a:	6051      	str	r1, [r2, #4]

	/* release resource guard */
	m16src_grd = 0;
    290c:	7018      	strb	r0, [r3, #0]

	return 0;
}
    290e:	bd10      	pop	{r4, pc}
    2910:	20000112 	.word	0x20000112
    2914:	20000111 	.word	0x20000111

00002918 <_clock_control_init>:
		}
	}
}

static int _clock_control_init(struct device *dev)
{
    2918:	b508      	push	{r3, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(NRF5_IRQ_POWER_CLOCK_IRQn,
    291a:	2200      	movs	r2, #0
    291c:	4610      	mov	r0, r2
    291e:	2101      	movs	r1, #1
    2920:	f7ff f98c 	bl	1c3c <_irq_priority_set>
		    CONFIG_CLOCK_CONTROL_NRF5_IRQ_PRIORITY,
		    _power_clock_isr, 0, 0);

	irq_enable(POWER_CLOCK_IRQn);
    2924:	2000      	movs	r0, #0
    2926:	f7ff f957 	bl	1bd8 <_arch_irq_enable>

	return 0;
}
    292a:	2000      	movs	r0, #0
    292c:	bd08      	pop	{r3, pc}
	...

00002930 <_m16src_start>:
{
    2930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    2932:	f04f 0220 	mov.w	r2, #32
    2936:	f3ef 8311 	mrs	r3, BASEPRI
    293a:	f382 8811 	msr	BASEPRI, r2
	if (m16src_ref++) {
    293e:	4a25      	ldr	r2, [pc, #148]	; (29d4 <_m16src_start+0xa4>)
    2940:	7810      	ldrb	r0, [r2, #0]
    2942:	1c44      	adds	r4, r0, #1
    2944:	7014      	strb	r4, [r2, #0]
    2946:	b160      	cbz	r0, 2962 <_m16src_start+0x32>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    2948:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) {
    294c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2950:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		return -EINPROGRESS;
    2954:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2958:	bf14      	ite	ne
    295a:	2000      	movne	r0, #0
    295c:	f06f 0043 	mvneq.w	r0, #67	; 0x43
}
    2960:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (m16src_grd) {
    2962:	4d1d      	ldr	r5, [pc, #116]	; (29d8 <_m16src_start+0xa8>)
    2964:	782f      	ldrb	r7, [r5, #0]
    2966:	b12f      	cbz	r7, 2974 <_m16src_start+0x44>
		m16src_ref--;
    2968:	7010      	strb	r0, [r2, #0]
    296a:	f383 8811 	msr	BASEPRI, r3
		return -EAGAIN;
    296e:	f06f 000a 	mvn.w	r0, #10
    2972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	m16src_grd = 1;
    2974:	2601      	movs	r6, #1
    2976:	702e      	strb	r6, [r5, #0]
    2978:	f383 8811 	msr	BASEPRI, r3
    297c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
	if (blocking) {
    2980:	b319      	cbz	r1, 29ca <_m16src_start+0x9a>
		irq_disable(POWER_CLOCK_IRQn);
    2982:	4638      	mov	r0, r7
    2984:	f7ff f938 	bl	1bf8 <_arch_irq_disable>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    2988:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
		intenset = NRF_CLOCK->INTENSET;
    298c:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    2990:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    2994:	6026      	str	r6, [r4, #0]
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    2996:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    299a:	b192      	cbz	r2, 29c2 <_m16src_start+0x92>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    299c:	2200      	movs	r2, #0
    299e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    29a2:	4a0e      	ldr	r2, [pc, #56]	; (29dc <_m16src_start+0xac>)
		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
    29a4:	f013 0f01 	tst.w	r3, #1
    29a8:	f04f 0301 	mov.w	r3, #1
			NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    29ac:	bf08      	it	eq
    29ae:	f8c4 3308 	streq.w	r3, [r4, #776]	; 0x308
		irq_enable(POWER_CLOCK_IRQn);
    29b2:	2000      	movs	r0, #0
    29b4:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    29b8:	f7ff f90e 	bl	1bd8 <_arch_irq_enable>
	m16src_grd = 0;
    29bc:	2300      	movs	r3, #0
    29be:	702b      	strb	r3, [r5, #0]
    29c0:	e7c4      	b.n	294c <_m16src_start+0x1c>
			__WFE();
    29c2:	bf20      	wfe
			__SEV();
    29c4:	bf40      	sev
			__WFE();
    29c6:	bf20      	wfe
    29c8:	e7e5      	b.n	2996 <_m16src_start+0x66>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    29ca:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    29ce:	6026      	str	r6, [r4, #0]
    29d0:	e7f4      	b.n	29bc <_m16src_start+0x8c>
    29d2:	bf00      	nop
    29d4:	20000112 	.word	0x20000112
    29d8:	20000111 	.word	0x20000111
    29dc:	e000e100 	.word	0xe000e100

000029e0 <_k32src_start>:
{
    29e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    29e2:	4606      	mov	r6, r0
    29e4:	460c      	mov	r4, r1
	__asm__ volatile(
    29e6:	f04f 0220 	mov.w	r2, #32
    29ea:	f3ef 8311 	mrs	r3, BASEPRI
    29ee:	f382 8811 	msr	BASEPRI, r2
	if (k32src_initialized) {
    29f2:	4a2c      	ldr	r2, [pc, #176]	; (2aa4 <_k32src_start+0xc4>)
    29f4:	7815      	ldrb	r5, [r2, #0]
    29f6:	b165      	cbz	r5, 2a12 <_k32src_start+0x32>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    29f8:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) {
    29fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2a00:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
		return -EINPROGRESS;
    2a04:	f413 3f80 	tst.w	r3, #65536	; 0x10000
}
    2a08:	bf0c      	ite	eq
    2a0a:	f06f 0043 	mvneq.w	r0, #67	; 0x43
    2a0e:	2000      	movne	r0, #0
    2a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	k32src_initialized = 1;
    2a12:	2701      	movs	r7, #1
    2a14:	7017      	strb	r7, [r2, #0]
    2a16:	f383 8811 	msr	BASEPRI, r3
	irq_disable(POWER_CLOCK_IRQn);
    2a1a:	4628      	mov	r0, r5
    2a1c:	f7ff f8ec 	bl	1bf8 <_arch_irq_disable>
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    2a20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    2a24:	2102      	movs	r1, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    2a26:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
	intenset = NRF_CLOCK->INTENSET;
    2a2a:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    2a2e:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
    2a32:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
	NRF_CLOCK->TASKS_LFCLKSTART = 1;
    2a36:	609f      	str	r7, [r3, #8]
	while (NRF_CLOCK->EVENTS_LFCLKSTARTED == 0) {
    2a38:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    2a3c:	b371      	cbz	r1, 2a9c <_k32src_start+0xbc>
	if (!(intenset & CLOCK_INTENSET_LFCLKSTARTED_Msk)) {
    2a3e:	0792      	lsls	r2, r2, #30
    2a40:	4f19      	ldr	r7, [pc, #100]	; (2aa8 <_k32src_start+0xc8>)
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    2a42:	bf58      	it	pl
    2a44:	2202      	movpl	r2, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    2a46:	f04f 0100 	mov.w	r1, #0
    2a4a:	f04f 0501 	mov.w	r5, #1
    2a4e:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	irq_enable(POWER_CLOCK_IRQn);
    2a52:	f04f 0000 	mov.w	r0, #0
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    2a56:	bf58      	it	pl
    2a58:	f8c3 2308 	strpl.w	r2, [r3, #776]	; 0x308
    2a5c:	f8c7 5180 	str.w	r5, [r7, #384]	; 0x180
	irq_enable(POWER_CLOCK_IRQn);
    2a60:	f7ff f8ba 	bl	1bd8 <_arch_irq_enable>
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    2a64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	NRF_CLOCK->EVENTS_DONE = 0;
    2a68:	2100      	movs	r1, #0
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    2a6a:	2218      	movs	r2, #24
    2a6c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	NRF_CLOCK->EVENTS_DONE = 0;
    2a70:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
	NRF_CLOCK->EVENTS_CTTO = 0;
    2a74:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    2a78:	f014 0103 	ands.w	r1, r4, #3
    2a7c:	d1be      	bne.n	29fc <_k32src_start+0x1c>
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
    2a7e:	2010      	movs	r0, #16
    2a80:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
		NRF_CLOCK->INTENSET =
    2a84:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    2a88:	4630      	mov	r0, r6
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    2a8a:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    2a8e:	f7ff ff4f 	bl	2930 <_m16src_start>
		if (!err) {
    2a92:	2800      	cmp	r0, #0
    2a94:	d1b2      	bne.n	29fc <_k32src_start+0x1c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2a96:	f8c7 5100 	str.w	r5, [r7, #256]	; 0x100
    2a9a:	e7af      	b.n	29fc <_k32src_start+0x1c>
		__WFE();
    2a9c:	bf20      	wfe
		__SEV();
    2a9e:	bf40      	sev
		__WFE();
    2aa0:	bf20      	wfe
    2aa2:	e7c9      	b.n	2a38 <_k32src_start+0x58>
    2aa4:	20000110 	.word	0x20000110
    2aa8:	e000e100 	.word	0xe000e100

00002aac <_power_clock_isr>:
{
    2aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    2aae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
{
    2ab2:	4605      	mov	r5, r0
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    2ab4:	f8d3 e108 	ldr.w	lr, [r3, #264]	; 0x108
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    2ab8:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
    2abc:	f8d3 440c 	ldr.w	r4, [r3, #1036]	; 0x40c
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
    2ac0:	f8d3 7100 	ldr.w	r7, [r3, #256]	; 0x100
	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
    2ac4:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
	done = (NRF_CLOCK->EVENTS_DONE != 0);
    2ac8:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    2acc:	f8d3 6110 	ldr.w	r6, [r3, #272]	; 0x110
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    2ad0:	f002 0201 	and.w	r2, r2, #1
	if (pof) {
    2ad4:	f1be 0f00 	cmp.w	lr, #0
    2ad8:	d003      	beq.n	2ae2 <_power_clock_isr+0x36>
		NRF_POWER->EVENTS_POFWARN = 0;
    2ada:	f04f 0e00 	mov.w	lr, #0
    2ade:	f8c3 e108 	str.w	lr, [r3, #264]	; 0x108
	if (hf) {
    2ae2:	b127      	cbz	r7, 2aee <_power_clock_isr+0x42>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    2ae4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2ae8:	2700      	movs	r7, #0
    2aea:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
	if (hf_intenset && hf_stat) {
    2aee:	b13a      	cbz	r2, 2b00 <_power_clock_isr+0x54>
    2af0:	03e3      	lsls	r3, r4, #15
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    2af2:	bf41      	itttt	mi
    2af4:	f04f 4380 	movmi.w	r3, #1073741824	; 0x40000000
    2af8:	2201      	movmi	r2, #1
    2afa:	f8c3 2308 	strmi.w	r2, [r3, #776]	; 0x308
		NRF_CLOCK->TASKS_CAL = 1;
    2afe:	611a      	strmi	r2, [r3, #16]
	if (lf) {
    2b00:	b120      	cbz	r0, 2b0c <_power_clock_isr+0x60>
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    2b02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2b06:	2200      	movs	r2, #0
    2b08:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (done) {
    2b0c:	b149      	cbz	r1, 2b22 <_power_clock_isr+0x76>
		NRF_CLOCK->EVENTS_DONE = 0;
    2b0e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    2b12:	2100      	movs	r1, #0
    2b14:	f8c4 110c 	str.w	r1, [r4, #268]	; 0x10c
		err = _m16src_stop(dev, NULL);
    2b18:	4628      	mov	r0, r5
    2b1a:	f7ff fecf 	bl	28bc <_m16src_stop>
		NRF_CLOCK->TASKS_CTSTART = 1;
    2b1e:	2301      	movs	r3, #1
    2b20:	6163      	str	r3, [r4, #20]
	if (ctto) {
    2b22:	b176      	cbz	r6, 2b42 <_power_clock_isr+0x96>
		NRF_CLOCK->EVENTS_CTTO = 0;
    2b24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2b28:	2100      	movs	r1, #0
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    2b2a:	2401      	movs	r4, #1
		NRF_CLOCK->EVENTS_CTTO = 0;
    2b2c:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
		err = _m16src_start(dev, false);
    2b30:	4628      	mov	r0, r5
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    2b32:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    2b36:	f7ff fefb 	bl	2930 <_m16src_start>
		if (!err) {
    2b3a:	b910      	cbnz	r0, 2b42 <_power_clock_isr+0x96>
    2b3c:	4b01      	ldr	r3, [pc, #4]	; (2b44 <_power_clock_isr+0x98>)
    2b3e:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
    2b42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2b44:	e000e100 	.word	0xe000e100

00002b48 <gpiote_find_channel>:
#define GPIOTE_CFG_PIN_GET(config) ((config & GPIOTE_CONFIG_PSEL_Msk) >> \
				GPIOTE_CONFIG_PSEL_Pos)

static int gpiote_find_channel(struct device *dev, u32_t pin)
{
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2b48:	6803      	ldr	r3, [r0, #0]
    2b4a:	689b      	ldr	r3, [r3, #8]
    2b4c:	689a      	ldr	r2, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
		if ((data->gpiote_chan_mask & BIT(i)) &&
    2b4e:	6883      	ldr	r3, [r0, #8]
{
    2b50:	b510      	push	{r4, lr}
		if ((data->gpiote_chan_mask & BIT(i)) &&
    2b52:	68dc      	ldr	r4, [r3, #12]
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    2b54:	2000      	movs	r0, #0
		if ((data->gpiote_chan_mask & BIT(i)) &&
    2b56:	fa24 f300 	lsr.w	r3, r4, r0
    2b5a:	07db      	lsls	r3, r3, #31
    2b5c:	d507      	bpl.n	2b6e <gpiote_find_channel+0x26>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin)) {
    2b5e:	f500 73a2 	add.w	r3, r0, #324	; 0x144
    2b62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2b66:	f3c3 2304 	ubfx	r3, r3, #8, #5
		if ((data->gpiote_chan_mask & BIT(i)) &&
    2b6a:	428b      	cmp	r3, r1
    2b6c:	d004      	beq.n	2b78 <gpiote_find_channel+0x30>
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    2b6e:	3001      	adds	r0, #1
    2b70:	2808      	cmp	r0, #8
    2b72:	d1f0      	bne.n	2b56 <gpiote_find_channel+0xe>
			return i;
		}
	}

	return -ENODEV;
    2b74:	f06f 0012 	mvn.w	r0, #18
}
    2b78:	bd10      	pop	{r4, pc}

00002b7a <gpio_nrf5_read>:
}

static int gpio_nrf5_read(struct device *dev,
			  int access_op, u32_t pin, u32_t *value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    2b7a:	6800      	ldr	r0, [r0, #0]
    2b7c:	6880      	ldr	r0, [r0, #8]
    2b7e:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
    2b80:	b941      	cbnz	r1, 2b94 <gpio_nrf5_read+0x1a>
		*value = (gpio->IN >> pin) & 0x1;
    2b82:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    2b86:	fa21 f202 	lsr.w	r2, r1, r2
    2b8a:	f002 0201 	and.w	r2, r2, #1
	} else {
		*value = gpio->IN;
    2b8e:	601a      	str	r2, [r3, #0]
	}
	return 0;
}
    2b90:	2000      	movs	r0, #0
    2b92:	4770      	bx	lr
		*value = gpio->IN;
    2b94:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
    2b98:	e7f9      	b.n	2b8e <gpio_nrf5_read+0x14>

00002b9a <gpio_nrf5_write>:

static int gpio_nrf5_write(struct device *dev,
			   int access_op, u32_t pin, u32_t value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    2b9a:	6800      	ldr	r0, [r0, #0]
    2b9c:	6880      	ldr	r0, [r0, #8]
    2b9e:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
    2ba0:	b949      	cbnz	r1, 2bb6 <gpio_nrf5_write+0x1c>
    2ba2:	2101      	movs	r1, #1
		if (value) { /* 1 */
			gpio->OUTSET = BIT(pin);
    2ba4:	4091      	lsls	r1, r2
		if (value) { /* 1 */
    2ba6:	b11b      	cbz	r3, 2bb0 <gpio_nrf5_write+0x16>
			gpio->OUTSET = BIT(pin);
    2ba8:	f8c0 1508 	str.w	r1, [r0, #1288]	; 0x508
		}
	} else {
		gpio->OUT = value;
	}
	return 0;
}
    2bac:	2000      	movs	r0, #0
    2bae:	4770      	bx	lr
			gpio->OUTCLR = BIT(pin);
    2bb0:	f8c0 150c 	str.w	r1, [r0, #1292]	; 0x50c
    2bb4:	e7fa      	b.n	2bac <gpio_nrf5_write+0x12>
		gpio->OUT = value;
    2bb6:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
    2bba:	e7f7      	b.n	2bac <gpio_nrf5_write+0x12>

00002bbc <gpio_nrf5_manage_callback>:

static int gpio_nrf5_manage_callback(struct device *dev,
				    struct gpio_callback *callback, bool set)
{
    2bbc:	b510      	push	{r4, lr}
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    2bbe:	6883      	ldr	r3, [r0, #8]
					 bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (set) {
    2bc0:	b13a      	cbz	r2, 2bd2 <gpio_nrf5_manage_callback+0x16>
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
    2bc2:	681a      	ldr	r2, [r3, #0]
    2bc4:	600a      	str	r2, [r1, #0]
	list->head = node;

	if (!list->tail) {
    2bc6:	685a      	ldr	r2, [r3, #4]
	list->head = node;
    2bc8:	6019      	str	r1, [r3, #0]
	if (!list->tail) {
    2bca:	b902      	cbnz	r2, 2bce <gpio_nrf5_manage_callback+0x12>
		list->tail = list->head;
    2bcc:	6059      	str	r1, [r3, #4]

	_gpio_manage_callback(&data->callbacks, callback, set);

	return 0;
}
    2bce:	2000      	movs	r0, #0
    2bd0:	bd10      	pop	{r4, pc}
    2bd2:	6818      	ldr	r0, [r3, #0]
					     sys_snode_t *node)
{
	sys_snode_t *prev = NULL;
	sys_snode_t *test;

	SYS_SLIST_FOR_EACH_NODE(list, test) {
    2bd4:	2800      	cmp	r0, #0
    2bd6:	d0fa      	beq.n	2bce <gpio_nrf5_manage_callback+0x12>
		if (test == node) {
    2bd8:	4281      	cmp	r1, r0
    2bda:	d10e      	bne.n	2bfa <gpio_nrf5_manage_callback+0x3e>
    2bdc:	685c      	ldr	r4, [r3, #4]
    2bde:	6808      	ldr	r0, [r1, #0]
	if (!prev_node) {
    2be0:	b932      	cbnz	r2, 2bf0 <gpio_nrf5_manage_callback+0x34>
		if (list->tail == node) {
    2be2:	42a1      	cmp	r1, r4
		list->head = node->next;
    2be4:	6018      	str	r0, [r3, #0]
		if (list->tail == node) {
    2be6:	d100      	bne.n	2bea <gpio_nrf5_manage_callback+0x2e>
			list->tail = list->head;
    2be8:	6058      	str	r0, [r3, #4]
	node->next = NULL;
    2bea:	2300      	movs	r3, #0
    2bec:	600b      	str	r3, [r1, #0]
    2bee:	e7ee      	b.n	2bce <gpio_nrf5_manage_callback+0x12>
		if (list->tail == node) {
    2bf0:	42a1      	cmp	r1, r4
		prev_node->next = node->next;
    2bf2:	6010      	str	r0, [r2, #0]
			list->tail = prev_node;
    2bf4:	bf08      	it	eq
    2bf6:	605a      	streq	r2, [r3, #4]
    2bf8:	e7f7      	b.n	2bea <gpio_nrf5_manage_callback+0x2e>
	SYS_SLIST_FOR_EACH_NODE(list, test) {
    2bfa:	4602      	mov	r2, r0
    2bfc:	6800      	ldr	r0, [r0, #0]
    2bfe:	e7e9      	b.n	2bd4 <gpio_nrf5_manage_callback+0x18>

00002c00 <gpio_nrf5_enable_callback>:


static int gpio_nrf5_enable_callback(struct device *dev,
				    int access_op, u32_t pin)
{
    2c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2c02:	4614      	mov	r4, r2
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2c04:	6802      	ldr	r2, [r0, #0]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    2c06:	6887      	ldr	r7, [r0, #8]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2c08:	6892      	ldr	r2, [r2, #8]
	int i;

	if (access_op == GPIO_ACCESS_BY_PIN) {
    2c0a:	460d      	mov	r5, r1
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2c0c:	6896      	ldr	r6, [r2, #8]
	if (access_op == GPIO_ACCESS_BY_PIN) {
    2c0e:	b9a1      	cbnz	r1, 2c3a <gpio_nrf5_enable_callback+0x3a>

		i = gpiote_find_channel(dev, pin);
    2c10:	4621      	mov	r1, r4
    2c12:	f7ff ff99 	bl	2b48 <gpiote_find_channel>
		if (i < 0) {
    2c16:	2800      	cmp	r0, #0
    2c18:	db11      	blt.n	2c3e <gpio_nrf5_enable_callback+0x3e>
			return i;
		}

		data->pin_callback_enables |= BIT(pin);
    2c1a:	68ba      	ldr	r2, [r7, #8]
    2c1c:	2301      	movs	r3, #1
    2c1e:	fa03 f404 	lsl.w	r4, r3, r4
    2c22:	4314      	orrs	r4, r2
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
    2c24:	f100 0240 	add.w	r2, r0, #64	; 0x40
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
    2c28:	fa03 f000 	lsl.w	r0, r3, r0
		data->pin_callback_enables |= BIT(pin);
    2c2c:	60bc      	str	r4, [r7, #8]
		gpiote->EVENTS_IN[i] = 0;
    2c2e:	f846 5022 	str.w	r5, [r6, r2, lsl #2]
		gpiote->INTENSET = BIT(i);
    2c32:	f8c6 0304 	str.w	r0, [r6, #772]	; 0x304
	} else {
		return -ENOTSUP;
	}

	return 0;
    2c36:	4628      	mov	r0, r5
    2c38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOTSUP;
    2c3a:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
    2c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00002c40 <gpio_nrf5_disable_callback>:


static int gpio_nrf5_disable_callback(struct device *dev,
				     int access_op, u32_t pin)
{
    2c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2c42:	4614      	mov	r4, r2
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2c44:	6802      	ldr	r2, [r0, #0]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    2c46:	6886      	ldr	r6, [r0, #8]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2c48:	6892      	ldr	r2, [r2, #8]
	int i;

	if (access_op == GPIO_ACCESS_BY_PIN) {
    2c4a:	460d      	mov	r5, r1
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2c4c:	6897      	ldr	r7, [r2, #8]
	if (access_op == GPIO_ACCESS_BY_PIN) {
    2c4e:	b989      	cbnz	r1, 2c74 <gpio_nrf5_disable_callback+0x34>
		i = gpiote_find_channel(dev, pin);
    2c50:	4621      	mov	r1, r4
    2c52:	f7ff ff79 	bl	2b48 <gpiote_find_channel>
		if (i < 0) {
    2c56:	2800      	cmp	r0, #0
    2c58:	db0e      	blt.n	2c78 <gpio_nrf5_disable_callback+0x38>
			return i;
		}

		data->pin_callback_enables &= ~(BIT(pin));
    2c5a:	68b2      	ldr	r2, [r6, #8]
    2c5c:	2301      	movs	r3, #1
    2c5e:	fa03 f404 	lsl.w	r4, r3, r4
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR = BIT(i);
    2c62:	fa03 f000 	lsl.w	r0, r3, r0
		data->pin_callback_enables &= ~(BIT(pin));
    2c66:	ea22 0404 	bic.w	r4, r2, r4
    2c6a:	60b4      	str	r4, [r6, #8]
		gpiote->INTENCLR = BIT(i);
    2c6c:	f8c7 0308 	str.w	r0, [r7, #776]	; 0x308
	} else {
		return -ENOTSUP;
	}

	return 0;
    2c70:	4628      	mov	r0, r5
    2c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOTSUP;
    2c74:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
    2c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00002c7a <gpio_nrf5_P0_init>:
		    &gpio_data_P0, &gpio_nrf5_P0_cfg,
		    POST_KERNEL, CONFIG_KERNEL_INIT_PRIORITY_DEFAULT,
		    &gpio_nrf5_drv_api_funcs);

static int gpio_nrf5_P0_init(struct device *dev)
{
    2c7a:	b508      	push	{r3, lr}
	IRQ_CONNECT(NRF5_IRQ_GPIOTE_IRQn, CONFIG_GPIO_NRF5_PORT_P0_PRI,
    2c7c:	2200      	movs	r2, #0
    2c7e:	2101      	movs	r1, #1
    2c80:	2006      	movs	r0, #6
    2c82:	f7fe ffdb 	bl	1c3c <_irq_priority_set>
		    gpio_nrf5_port_isr, DEVICE_GET(gpio_nrf5_P0), 0);

	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    2c86:	2006      	movs	r0, #6
    2c88:	f7fe ffa6 	bl	1bd8 <_arch_irq_enable>

	return 0;
}
    2c8c:	2000      	movs	r0, #0
    2c8e:	bd08      	pop	{r3, pc}

00002c90 <gpio_nrf5_port_isr>:
{
    2c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2c92:	6803      	ldr	r3, [r0, #0]
{
    2c94:	4606      	mov	r6, r0
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2c96:	689b      	ldr	r3, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    2c98:	68b4      	ldr	r4, [r6, #8]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2c9a:	6898      	ldr	r0, [r3, #8]
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    2c9c:	2200      	movs	r2, #0
	u32_t enabled_int, int_status = 0;
    2c9e:	4613      	mov	r3, r2
			gpiote->EVENTS_IN[i] = 0;
    2ca0:	4615      	mov	r5, r2
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
    2ca2:	2701      	movs	r7, #1
    2ca4:	eb00 0182 	add.w	r1, r0, r2, lsl #2
		if (gpiote->EVENTS_IN[i]) {
    2ca8:	f8d1 e100 	ldr.w	lr, [r1, #256]	; 0x100
    2cac:	f1be 0f00 	cmp.w	lr, #0
    2cb0:	d008      	beq.n	2cc4 <gpio_nrf5_port_isr+0x34>
			gpiote->EVENTS_IN[i] = 0;
    2cb2:	f8c1 5100 	str.w	r5, [r1, #256]	; 0x100
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
    2cb6:	f8d1 1510 	ldr.w	r1, [r1, #1296]	; 0x510
    2cba:	f3c1 2104 	ubfx	r1, r1, #8, #5
    2cbe:	fa07 f101 	lsl.w	r1, r7, r1
    2cc2:	430b      	orrs	r3, r1
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    2cc4:	3201      	adds	r2, #1
    2cc6:	2a08      	cmp	r2, #8
    2cc8:	d1ec      	bne.n	2ca4 <gpio_nrf5_port_isr+0x14>
	enabled_int = int_status & data->pin_callback_enables;
    2cca:	68a5      	ldr	r5, [r4, #8]
	irq_disable(NRF5_IRQ_GPIOTE_IRQn);
    2ccc:	2006      	movs	r0, #6
	enabled_int = int_status & data->pin_callback_enables;
    2cce:	401d      	ands	r5, r3
	irq_disable(NRF5_IRQ_GPIOTE_IRQn);
    2cd0:	f7fe ff92 	bl	1bf8 <_arch_irq_disable>
    2cd4:	6824      	ldr	r4, [r4, #0]
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
    2cd6:	b924      	cbnz	r4, 2ce2 <gpio_nrf5_port_isr+0x52>
	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    2cd8:	2006      	movs	r0, #6
}
    2cda:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    2cde:	f7fe bf7b 	b.w	1bd8 <_arch_irq_enable>
		if (cb->pin_mask & pins) {
    2ce2:	68a3      	ldr	r3, [r4, #8]
    2ce4:	421d      	tst	r5, r3
    2ce6:	d0f5      	beq.n	2cd4 <gpio_nrf5_port_isr+0x44>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
    2ce8:	6863      	ldr	r3, [r4, #4]
    2cea:	462a      	mov	r2, r5
    2cec:	4621      	mov	r1, r4
    2cee:	4630      	mov	r0, r6
    2cf0:	4798      	blx	r3
    2cf2:	e7ef      	b.n	2cd4 <gpio_nrf5_port_isr+0x44>

00002cf4 <gpio_nrf5_config>:
{
    2cf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2cf8:	4614      	mov	r4, r2
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2cfa:	6802      	ldr	r2, [r0, #0]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    2cfc:	6887      	ldr	r7, [r0, #8]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2cfe:	6892      	ldr	r2, [r2, #8]
{
    2d00:	4680      	mov	r8, r0
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2d02:	6895      	ldr	r5, [r2, #8]
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    2d04:	6810      	ldr	r0, [r2, #0]
	if (access_op == GPIO_ACCESS_BY_PIN) {
    2d06:	b119      	cbz	r1, 2d10 <gpio_nrf5_config+0x1c>
		return -ENOTSUP;
    2d08:	f06f 0022 	mvn.w	r0, #34	; 0x22
    2d0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    2d10:	f403 7240 	and.w	r2, r3, #768	; 0x300
    2d14:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
		int ds_low = (flags & GPIO_DS_LOW_MASK) >> GPIO_DS_LOW_POS;
    2d18:	f3c3 3101 	ubfx	r1, r3, #12, #2
		int ds_high = (flags & GPIO_DS_HIGH_MASK) >> GPIO_DS_HIGH_POS;
    2d1c:	f3c3 3981 	ubfx	r9, r3, #14, #2
		unsigned int sense = (flags & GPIO_PIN_CNF_SENSE_Msk);
    2d20:	f403 3e40 	and.w	lr, r3, #196608	; 0x30000
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    2d24:	d056      	beq.n	2dd4 <gpio_nrf5_config+0xe0>
		u8_t pull = GPIO_PULL_DISABLE;
    2d26:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    2d2a:	bf0c      	ite	eq
    2d2c:	2204      	moveq	r2, #4
    2d2e:	2200      	movne	r2, #0
			sense = GPIO_SENSE_DISABLE;
    2d30:	f5be 3f80 	cmp.w	lr, #65536	; 0x10000
    2d34:	bf08      	it	eq
    2d36:	f04f 0e00 	moveq.w	lr, #0
		if ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT) {
    2d3a:	f013 0f01 	tst.w	r3, #1
    2d3e:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 2e08 <gpio_nrf5_config+0x114>
    2d42:	ea4f 0181 	mov.w	r1, r1, lsl #2
    2d46:	f504 76e0 	add.w	r6, r4, #448	; 0x1c0
    2d4a:	d04e      	beq.n	2dea <gpio_nrf5_config+0xf6>
			if (pull == GPIO_PULL_UP) {
    2d4c:	2a0c      	cmp	r2, #12
    2d4e:	d143      	bne.n	2dd8 <gpio_nrf5_config+0xe4>
				gpio->OUTSET = BIT(pin);
    2d50:	f04f 0e01 	mov.w	lr, #1
    2d54:	fa0e fe04 	lsl.w	lr, lr, r4
    2d58:	f8c0 e508 	str.w	lr, [r0, #1288]	; 0x508
					      drive_strength[ds_low][ds_high] |
    2d5c:	4449      	add	r1, r9
					      GPIO_INPUT_DISCONNECT |
    2d5e:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
    2d62:	f041 0103 	orr.w	r1, r1, #3
    2d66:	430a      	orrs	r2, r1
			gpio->PIN_CNF[pin] = (sense |
    2d68:	f840 2026 	str.w	r2, [r0, r6, lsl #2]
	if (flags & GPIO_INT) {
    2d6c:	f013 0002 	ands.w	r0, r3, #2
    2d70:	d047      	beq.n	2e02 <gpio_nrf5_config+0x10e>
		if (flags & GPIO_INT_EDGE) {
    2d72:	0699      	lsls	r1, r3, #26
    2d74:	d5c8      	bpl.n	2d08 <gpio_nrf5_config+0x14>
			if (flags & GPIO_INT_DOUBLE_EDGE) {
    2d76:	065a      	lsls	r2, r3, #25
    2d78:	d43e      	bmi.n	2df8 <gpio_nrf5_config+0x104>
				config |= GPIOTE_CFG_POL_H2L;
    2d7a:	f013 0f04 	tst.w	r3, #4
    2d7e:	bf14      	ite	ne
    2d80:	f44f 3680 	movne.w	r6, #65536	; 0x10000
    2d84:	f44f 3600 	moveq.w	r6, #131072	; 0x20000
		if (__builtin_popcount(data->gpiote_chan_mask) ==
    2d88:	68f8      	ldr	r0, [r7, #12]
    2d8a:	f7fd fa9d 	bl	2c8 <__popcountsi2>
    2d8e:	2808      	cmp	r0, #8
    2d90:	d035      	beq.n	2dfe <gpio_nrf5_config+0x10a>
		int i = gpiote_find_channel(dev, pin);
    2d92:	4621      	mov	r1, r4
    2d94:	4640      	mov	r0, r8
    2d96:	f7ff fed7 	bl	2b48 <gpiote_find_channel>
		if (i < 0) {
    2d9a:	2800      	cmp	r0, #0
    2d9c:	68fb      	ldr	r3, [r7, #12]
    2d9e:	da08      	bge.n	2db2 <gpio_nrf5_config+0xbe>
			i = __builtin_ffs(~(data->gpiote_chan_mask)) - 1;
    2da0:	43da      	mvns	r2, r3
    2da2:	fa92 f0a2 	rbit	r0, r2
    2da6:	2a00      	cmp	r2, #0
    2da8:	fab0 f080 	clz	r0, r0
    2dac:	bf08      	it	eq
    2dae:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
		config |= GPIOTE_CFG_PIN(pin);
    2db2:	0224      	lsls	r4, r4, #8
		data->gpiote_chan_mask |= BIT(i);
    2db4:	2201      	movs	r2, #1
		config |= GPIOTE_CFG_PIN(pin);
    2db6:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
		data->gpiote_chan_mask |= BIT(i);
    2dba:	4082      	lsls	r2, r0
		config |= GPIOTE_CFG_PIN(pin);
    2dbc:	f044 0401 	orr.w	r4, r4, #1
		gpiote->CONFIG[i] = config;
    2dc0:	f500 70a2 	add.w	r0, r0, #324	; 0x144
		data->gpiote_chan_mask |= BIT(i);
    2dc4:	4313      	orrs	r3, r2
		config |= GPIOTE_CFG_PIN(pin);
    2dc6:	4334      	orrs	r4, r6
		data->gpiote_chan_mask |= BIT(i);
    2dc8:	60fb      	str	r3, [r7, #12]
		gpiote->CONFIG[i] = config;
    2dca:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
	return 0;
    2dce:	2000      	movs	r0, #0
    2dd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			pull = GPIO_PULL_UP;
    2dd4:	220c      	movs	r2, #12
    2dd6:	e7ab      	b.n	2d30 <gpio_nrf5_config+0x3c>
			} else if (pull == GPIO_PULL_DOWN) {
    2dd8:	2a04      	cmp	r2, #4
				gpio->OUTCLR = BIT(pin);
    2dda:	bf02      	ittt	eq
    2ddc:	f04f 0e01 	moveq.w	lr, #1
    2de0:	fa0e fe04 	lsleq.w	lr, lr, r4
    2de4:	f8c0 e50c 	streq.w	lr, [r0, #1292]	; 0x50c
    2de8:	e7b8      	b.n	2d5c <gpio_nrf5_config+0x68>
					      drive_strength[ds_low][ds_high] |
    2dea:	4449      	add	r1, r9
    2dec:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
    2df0:	430a      	orrs	r2, r1
    2df2:	ea42 020e 	orr.w	r2, r2, lr
    2df6:	e7b7      	b.n	2d68 <gpio_nrf5_config+0x74>
				config |= GPIOTE_CFG_POL_TOGG;
    2df8:	f44f 3640 	mov.w	r6, #196608	; 0x30000
    2dfc:	e7c4      	b.n	2d88 <gpio_nrf5_config+0x94>
			return -EIO;
    2dfe:	f06f 0004 	mvn.w	r0, #4
}
    2e02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2e06:	bf00      	nop
    2e08:	000233b8 	.word	0x000233b8

00002e0c <uart_nrf5_poll_in>:
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */

static int uart_nrf5_poll_in(struct device *dev, unsigned char *c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    2e0c:	6803      	ldr	r3, [r0, #0]
    2e0e:	689b      	ldr	r3, [r3, #8]
    2e10:	681b      	ldr	r3, [r3, #0]

	if (!uart->EVENTS_RXDRDY) {
    2e12:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
    2e16:	b132      	cbz	r2, 2e26 <uart_nrf5_poll_in+0x1a>
		return -1;
	}

	/* Clear the interrupt */
	uart->EVENTS_RXDRDY = 0;
    2e18:	2000      	movs	r0, #0
    2e1a:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108

	/* got a character */
	*c = (unsigned char)uart->RXD;
    2e1e:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    2e22:	700b      	strb	r3, [r1, #0]

	return 0;
    2e24:	4770      	bx	lr
		return -1;
    2e26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    2e2a:	4770      	bx	lr

00002e2c <uart_nrf5_poll_out>:
 * @return Sent character
 */
static unsigned char uart_nrf5_poll_out(struct device *dev,
					unsigned char c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    2e2c:	6803      	ldr	r3, [r0, #0]
    2e2e:	689b      	ldr	r3, [r3, #8]
    2e30:	681b      	ldr	r3, [r3, #0]

	/* send a character */
	uart->TXD = (u8_t)c;
    2e32:	f8c3 151c 	str.w	r1, [r3, #1308]	; 0x51c

	/* Wait for transmitter to be ready */
	while (!uart->EVENTS_TXDRDY) {
    2e36:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
    2e3a:	2a00      	cmp	r2, #0
    2e3c:	d0fb      	beq.n	2e36 <uart_nrf5_poll_out+0xa>
	}

	uart->EVENTS_TXDRDY = 0;
    2e3e:	2200      	movs	r2, #0
    2e40:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

	return c;
}
    2e44:	4608      	mov	r0, r1
    2e46:	4770      	bx	lr

00002e48 <uart_nrf5_err_check>:

/** Console I/O function */
static int uart_nrf5_err_check(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    2e48:	6803      	ldr	r3, [r0, #0]
    2e4a:	689b      	ldr	r3, [r3, #8]
    2e4c:	681b      	ldr	r3, [r3, #0]
	u32_t error = 0;

	if (uart->EVENTS_ERROR) {
    2e4e:	f8d3 0124 	ldr.w	r0, [r3, #292]	; 0x124
    2e52:	b118      	cbz	r0, 2e5c <uart_nrf5_err_check+0x14>
		/* register bitfields maps to the defines in uart.h */
		error = uart->ERRORSRC;
    2e54:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480

		/* Clear the register */
		uart->ERRORSRC = error;
    2e58:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
	}

	error = error & 0x0F;

	return error;
}
    2e5c:	f000 000f 	and.w	r0, r0, #15
    2e60:	4770      	bx	lr
	...

00002e64 <uart_nrf5_init>:
{
    2e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _uart *uart = UART_STRUCT(dev);
    2e66:	6803      	ldr	r3, [r0, #0]
    2e68:	689b      	ldr	r3, [r3, #8]
{
    2e6a:	4605      	mov	r5, r0
	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
    2e6c:	4818      	ldr	r0, [pc, #96]	; (2ed0 <uart_nrf5_init+0x6c>)
	volatile struct _uart *uart = UART_STRUCT(dev);
    2e6e:	681c      	ldr	r4, [r3, #0]
	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
    2e70:	f01e f992 	bl	21198 <device_get_binding>
static inline int _impl_gpio_config(struct device *port, int access_op,
				    u32_t pin, int flags)
{
	const struct gpio_driver_api *api = port->driver_api;

	return api->config(port, access_op, pin, flags);
    2e74:	6843      	ldr	r3, [r0, #4]
    2e76:	4606      	mov	r6, r0
    2e78:	681f      	ldr	r7, [r3, #0]
    2e7a:	2206      	movs	r2, #6
    2e7c:	f240 1301 	movw	r3, #257	; 0x101
    2e80:	2100      	movs	r1, #0
    2e82:	47b8      	blx	r7
    2e84:	6873      	ldr	r3, [r6, #4]
    2e86:	681f      	ldr	r7, [r3, #0]
    2e88:	2300      	movs	r3, #0
    2e8a:	4619      	mov	r1, r3
    2e8c:	2208      	movs	r2, #8
    2e8e:	4630      	mov	r0, r6
    2e90:	47b8      	blx	r7
	uart->PSELTXD = CONFIG_UART_NRF5_GPIO_TX_PIN;
    2e92:	2306      	movs	r3, #6
    2e94:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
	uart->PSELRXD = CONFIG_UART_NRF5_GPIO_RX_PIN;
    2e98:	2308      	movs	r3, #8
    2e9a:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
	DEV_DATA(dev)->baud_rate = CONFIG_UART_NRF5_BAUD_RATE;
    2e9e:	68ab      	ldr	r3, [r5, #8]
    2ea0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
    2ea4:	601a      	str	r2, [r3, #0]
	volatile struct _uart *uart = UART_STRUCT(dev);
    2ea6:	682b      	ldr	r3, [r5, #0]
    2ea8:	689b      	ldr	r3, [r3, #8]
    2eaa:	681b      	ldr	r3, [r3, #0]
	uart->BAUDRATE = divisor << UART_BAUDRATE_BAUDRATE_Pos;
    2eac:	f04f 72eb 	mov.w	r2, #30801920	; 0x1d60000
    2eb0:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	uart->ENABLE = (UART_ENABLE_ENABLE_Enabled << UART_ENABLE_ENABLE_Pos);
    2eb4:	2304      	movs	r3, #4
    2eb6:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	uart->EVENTS_TXDRDY = 0;
    2eba:	2000      	movs	r0, #0
	uart->TASKS_STARTTX = 1;
    2ebc:	2301      	movs	r3, #1
	uart->EVENTS_TXDRDY = 0;
    2ebe:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
	uart->EVENTS_RXDRDY = 0;
    2ec2:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
	uart->TASKS_STARTTX = 1;
    2ec6:	60a3      	str	r3, [r4, #8]
	uart->TASKS_STARTRX = 1;
    2ec8:	6023      	str	r3, [r4, #0]
	dev->driver_api = &uart_nrf5_driver_api;
    2eca:	4b02      	ldr	r3, [pc, #8]	; (2ed4 <uart_nrf5_init+0x70>)
    2ecc:	606b      	str	r3, [r5, #4]
}
    2ece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2ed0:	00023420 	.word	0x00023420
    2ed4:	00023430 	.word	0x00023430

00002ed8 <get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static inline u8_t get(struct rand *rng, u8_t octets, u8_t *rand)
{
    2ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u8_t first, last, avail, remaining, *d, *s;

	__ASSERT_NO_MSG(rng);

	first = rng->first;
    2edc:	7883      	ldrb	r3, [r0, #2]
	last = rng->last;
    2ede:	78c4      	ldrb	r4, [r0, #3]

	d = &rand[octets];
	s = &rng->rand[first];
    2ee0:	1d1e      	adds	r6, r3, #4

	if (first <= last) {
    2ee2:	42a3      	cmp	r3, r4
	d = &rand[octets];
    2ee4:	440a      	add	r2, r1
	s = &rng->rand[first];
    2ee6:	4406      	add	r6, r0
	if (first <= last) {
    2ee8:	d81f      	bhi.n	2f2a <get+0x52>
		/* copy octets from contiguous memory */
		avail = last - first;
    2eea:	1ae4      	subs	r4, r4, r3
    2eec:	b2e4      	uxtb	r4, r4
		if (octets < avail) {
    2eee:	42a1      	cmp	r1, r4
			remaining = avail - octets;
    2ef0:	bf3e      	ittt	cc
    2ef2:	1a64      	subcc	r4, r4, r1
    2ef4:	b2e7      	uxtbcc	r7, r4
    2ef6:	460c      	movcc	r4, r1
			avail = octets;
		} else {
			remaining = 0;
		}

		first += avail;
    2ef8:	4423      	add	r3, r4
		octets -= avail;
    2efa:	eba1 0104 	sub.w	r1, r1, r4
			remaining = 0;
    2efe:	bf28      	it	cs
    2f00:	2700      	movcs	r7, #0
		first += avail;
    2f02:	b2db      	uxtb	r3, r3
		octets -= avail;
    2f04:	b2c9      	uxtb	r1, r1
    2f06:	4434      	add	r4, r6

		while (avail--) {
    2f08:	42a6      	cmp	r6, r4
    2f0a:	d109      	bne.n	2f20 <get+0x48>
			while (last--) {
				*(--d) = *s++;
			}
		}

		rng->first = first;
    2f0c:	7083      	strb	r3, [r0, #2]
	}

	if (remaining < rng->threshold) {
    2f0e:	7843      	ldrb	r3, [r0, #1]
    2f10:	42bb      	cmp	r3, r7
		NRF_RNG->TASKS_START = 1;
    2f12:	bf82      	ittt	hi
    2f14:	4b20      	ldrhi	r3, [pc, #128]	; (2f98 <get+0xc0>)
    2f16:	2201      	movhi	r2, #1
    2f18:	601a      	strhi	r2, [r3, #0]
		NRF_RNG_regw_sideeffects();
#endif
	}

	return octets;
}
    2f1a:	4608      	mov	r0, r1
    2f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			*(--d) = *s++;
    2f20:	f816 5b01 	ldrb.w	r5, [r6], #1
    2f24:	f802 5d01 	strb.w	r5, [r2, #-1]!
    2f28:	e7ee      	b.n	2f08 <get+0x30>
		avail = rng->count - first;
    2f2a:	7805      	ldrb	r5, [r0, #0]
    2f2c:	1aed      	subs	r5, r5, r3
    2f2e:	b2ed      	uxtb	r5, r5
		if (octets < avail) {
    2f30:	42a9      	cmp	r1, r5
			remaining = avail + last - octets;
    2f32:	bf3f      	itttt	cc
    2f34:	1a67      	subcc	r7, r4, r1
    2f36:	19ed      	addcc	r5, r5, r7
    2f38:	b2ef      	uxtbcc	r7, r5
    2f3a:	460d      	movcc	r5, r1
			first += avail;
    2f3c:	bf38      	it	cc
    2f3e:	185b      	addcc	r3, r3, r1
		octets -= avail;
    2f40:	eba1 0105 	sub.w	r1, r1, r5
			first += avail;
    2f44:	bf32      	itee	cc
    2f46:	b2db      	uxtbcc	r3, r3
    2f48:	4627      	movcs	r7, r4
			first = 0;
    2f4a:	2300      	movcs	r3, #0
		octets -= avail;
    2f4c:	b2c9      	uxtb	r1, r1
    2f4e:	4696      	mov	lr, r2
    2f50:	eb06 0c05 	add.w	ip, r6, r5
		while (avail--) {
    2f54:	4566      	cmp	r6, ip
    2f56:	d119      	bne.n	2f8c <get+0xb4>
    2f58:	1b52      	subs	r2, r2, r5
		if (octets && last) {
    2f5a:	2900      	cmp	r1, #0
    2f5c:	d0d6      	beq.n	2f0c <get+0x34>
    2f5e:	2c00      	cmp	r4, #0
    2f60:	d0d4      	beq.n	2f0c <get+0x34>
			if (octets < last) {
    2f62:	428c      	cmp	r4, r1
    2f64:	bf8a      	itet	hi
    2f66:	460b      	movhi	r3, r1
    2f68:	4623      	movls	r3, r4
				remaining = last - octets;
    2f6a:	1a64      	subhi	r4, r4, r1
			s = &rng->rand[0];
    2f6c:	f100 0604 	add.w	r6, r0, #4
			octets -= last;
    2f70:	eba1 0103 	sub.w	r1, r1, r3
				remaining = last - octets;
    2f74:	bf8c      	ite	hi
    2f76:	b2e7      	uxtbhi	r7, r4
				remaining = 0;
    2f78:	2700      	movls	r7, #0
			octets -= last;
    2f7a:	b2c9      	uxtb	r1, r1
    2f7c:	18f4      	adds	r4, r6, r3
			while (last--) {
    2f7e:	42a6      	cmp	r6, r4
    2f80:	d0c4      	beq.n	2f0c <get+0x34>
				*(--d) = *s++;
    2f82:	f816 5b01 	ldrb.w	r5, [r6], #1
    2f86:	f802 5d01 	strb.w	r5, [r2, #-1]!
    2f8a:	e7f8      	b.n	2f7e <get+0xa6>
			*(--d) = *s++;
    2f8c:	f816 8b01 	ldrb.w	r8, [r6], #1
    2f90:	f80e 8d01 	strb.w	r8, [lr, #-1]!
    2f94:	e7de      	b.n	2f54 <get+0x7c>
    2f96:	bf00      	nop
    2f98:	4000d000 	.word	0x4000d000

00002f9c <isr>:
#pragma GCC pop_options

static int isr(struct rand *rng, bool store)
{
    2f9c:	b530      	push	{r4, r5, lr}
	u8_t last;

	if (!rng) {
    2f9e:	b1d0      	cbz	r0, 2fd6 <isr+0x3a>
		return -ENOBUFS;
	}

	last = rng->last + 1;
    2fa0:	78c2      	ldrb	r2, [r0, #3]
	if (last == rng->count) {
    2fa2:	7805      	ldrb	r5, [r0, #0]
		last = 0;
	}

	if (last == rng->first) {
    2fa4:	7884      	ldrb	r4, [r0, #2]
	last = rng->last + 1;
    2fa6:	1c53      	adds	r3, r2, #1
    2fa8:	b2db      	uxtb	r3, r3
		last = 0;
    2faa:	42ab      	cmp	r3, r5
    2fac:	bf08      	it	eq
    2fae:	2300      	moveq	r3, #0
	if (last == rng->first) {
    2fb0:	42a3      	cmp	r3, r4
    2fb2:	d010      	beq.n	2fd6 <isr+0x3a>
		 * new value could be generated before NRF_RNG task is stopped.
		 */
		return -ENOBUFS;
	}

	if (!store) {
    2fb4:	b161      	cbz	r1, 2fd0 <isr+0x34>
		return -EBUSY;
	}

	rng->rand[rng->last] = NRF_RNG->VALUE;
    2fb6:	490a      	ldr	r1, [pc, #40]	; (2fe0 <isr+0x44>)
    2fb8:	4402      	add	r2, r0
    2fba:	f8d1 1508 	ldr.w	r1, [r1, #1288]	; 0x508
    2fbe:	7111      	strb	r1, [r2, #4]
	rng->last = last;
    2fc0:	70c3      	strb	r3, [r0, #3]

	last = rng->last + 1;
    2fc2:	3301      	adds	r3, #1
    2fc4:	b2db      	uxtb	r3, r3
	if (last == rng->count) {
		last = 0;
    2fc6:	429d      	cmp	r5, r3
    2fc8:	bf08      	it	eq
    2fca:	2300      	moveq	r3, #0
	}

	if (last == rng->first) {
    2fcc:	42a3      	cmp	r3, r4
    2fce:	d005      	beq.n	2fdc <isr+0x40>
		return 0;
	}

	return -EBUSY;
    2fd0:	f06f 000f 	mvn.w	r0, #15
    2fd4:	bd30      	pop	{r4, r5, pc}
		return -ENOBUFS;
    2fd6:	f06f 0036 	mvn.w	r0, #54	; 0x36
    2fda:	bd30      	pop	{r4, r5, pc}
		return 0;
    2fdc:	2000      	movs	r0, #0
}
    2fde:	bd30      	pop	{r4, r5, pc}
    2fe0:	4000d000 	.word	0x4000d000

00002fe4 <entropy_nrf5_init>:
		    entropy_nrf5_init, &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(struct device *device)
{
    2fe4:	b570      	push	{r4, r5, r6, lr}
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
    2fe6:	6884      	ldr	r4, [r0, #8]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    2fe8:	2201      	movs	r2, #1
    2fea:	4611      	mov	r1, r2
    2fec:	4620      	mov	r0, r4
    2fee:	f01e fdd7 	bl	21ba0 <_impl_k_sem_init>
    2ff2:	f104 0018 	add.w	r0, r4, #24
    2ff6:	2201      	movs	r2, #1
    2ff8:	2100      	movs	r1, #0
    2ffa:	f01e fdd1 	bl	21ba0 <_impl_k_sem_init>
	rng->threshold = threshold;
    2ffe:	2304      	movs	r3, #4
    3000:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
    3004:	230c      	movs	r3, #12
	rng->first = rng->last = 0;
    3006:	2500      	movs	r5, #0
	rng->threshold = threshold;
    3008:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	rng->count = len;
    300c:	2105      	movs	r1, #5
	init((struct rand *)dev_data->isr, RAND_ISR_LEN,
	     CONFIG_ENTROPY_NRF5_ISR_THRESHOLD);

	/* Enable or disable bias correction */
	if (IS_ENABLED(CONFIG_ENTROPY_NRF5_BIAS_CORRECTION)) {
		NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
    300e:	4b11      	ldr	r3, [pc, #68]	; (3054 <entropy_nrf5_init+0x70>)
	rng->count = len;
    3010:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
    3014:	260d      	movs	r6, #13
	rng->first = rng->last = 0;
    3016:	f884 5033 	strb.w	r5, [r4, #51]	; 0x33
    301a:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
	rng->count = len;
    301e:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
	rng->first = rng->last = 0;
    3022:	f884 503f 	strb.w	r5, [r4, #63]	; 0x3f
    3026:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
		NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
    302a:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
    302e:	f042 0201 	orr.w	r2, r2, #1
    3032:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	} else {
		NRF_RNG->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
	}

	NRF_RNG->EVENTS_VALRDY = 0;
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
    3036:	2201      	movs	r2, #1
	NRF_RNG->EVENTS_VALRDY = 0;
    3038:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
	NRF_RNG->TASKS_START = 1;
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RNG_regw_sideeffects();
#endif

	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr_rand,
    303c:	4630      	mov	r0, r6
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
    303e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	NRF_RNG->TASKS_START = 1;
    3042:	601a      	str	r2, [r3, #0]
	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr_rand,
    3044:	462a      	mov	r2, r5
    3046:	f7fe fdf9 	bl	1c3c <_irq_priority_set>
		    DEVICE_GET(entropy_nrf5), 0);
	irq_enable(NRF5_IRQ_RNG_IRQn);
    304a:	4630      	mov	r0, r6
    304c:	f7fe fdc4 	bl	1bd8 <_arch_irq_enable>

	return 0;
}
    3050:	4628      	mov	r0, r5
    3052:	bd70      	pop	{r4, r5, r6, pc}
    3054:	4000d000 	.word	0x4000d000

00003058 <isr_rand>:
{
    3058:	b538      	push	{r3, r4, r5, lr}
	if (NRF_RNG->EVENTS_VALRDY) {
    305a:	4b12      	ldr	r3, [pc, #72]	; (30a4 <isr_rand+0x4c>)
    305c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3060:	b1fb      	cbz	r3, 30a2 <isr_rand+0x4a>
		struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
    3062:	6885      	ldr	r5, [r0, #8]
		ret = isr((struct rand *)dev_data->isr, true);
    3064:	2101      	movs	r1, #1
    3066:	f105 003c 	add.w	r0, r5, #60	; 0x3c
    306a:	f7ff ff97 	bl	2f9c <isr>
		if (ret != -EBUSY) {
    306e:	f110 0f10 	cmn.w	r0, #16
		ret = isr((struct rand *)dev_data->isr, true);
    3072:	4604      	mov	r4, r0
		if (ret != -EBUSY) {
    3074:	d00d      	beq.n	3092 <isr_rand+0x3a>
			ret = isr((struct rand *)dev_data->thr,
    3076:	f110 0437 	adds.w	r4, r0, #55	; 0x37
    307a:	bf14      	ite	ne
    307c:	2100      	movne	r1, #0
    307e:	2101      	moveq	r1, #1
    3080:	f105 0030 	add.w	r0, r5, #48	; 0x30
    3084:	f7ff ff8a 	bl	2f9c <isr>
    3088:	4604      	mov	r4, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    308a:	f105 0018 	add.w	r0, r5, #24
    308e:	f01e fd91 	bl	21bb4 <_impl_k_sem_give>
		NRF_RNG->EVENTS_VALRDY = 0;
    3092:	4b04      	ldr	r3, [pc, #16]	; (30a4 <isr_rand+0x4c>)
    3094:	2200      	movs	r2, #0
		if (ret != -EBUSY) {
    3096:	3410      	adds	r4, #16
		NRF_RNG->EVENTS_VALRDY = 0;
    3098:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
			NRF_RNG->TASKS_STOP = 1;
    309c:	bf1c      	itt	ne
    309e:	2201      	movne	r2, #1
    30a0:	605a      	strne	r2, [r3, #4]
    30a2:	bd38      	pop	{r3, r4, r5, pc}
    30a4:	4000d000 	.word	0x4000d000

000030a8 <entropy_nrf5_get_entropy>:
{
    30a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
    30ac:	6885      	ldr	r5, [r0, #8]
{
    30ae:	460f      	mov	r7, r1
    30b0:	4614      	mov	r4, r2
				k_sem_take(&dev_data->sem_sync, K_FOREVER);
    30b2:	f105 0818 	add.w	r8, r5, #24
	while (len) {
    30b6:	b914      	cbnz	r4, 30be <entropy_nrf5_get_entropy+0x16>
}
    30b8:	4620      	mov	r0, r4
    30ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    30be:	2cff      	cmp	r4, #255	; 0xff
    30c0:	4623      	mov	r3, r4
    30c2:	bf28      	it	cs
    30c4:	23ff      	movcs	r3, #255	; 0xff
		len -= len8;
    30c6:	1ae4      	subs	r4, r4, r3
    30c8:	b2de      	uxtb	r6, r3
    30ca:	b2a4      	uxth	r4, r4
			len8 = get((struct rand *)dev_data->thr, len8, buf);
    30cc:	f105 0930 	add.w	r9, r5, #48	; 0x30
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    30d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    30d4:	4628      	mov	r0, r5
    30d6:	f01e fdcd 	bl	21c74 <_impl_k_sem_take>
    30da:	4631      	mov	r1, r6
    30dc:	463a      	mov	r2, r7
    30de:	4648      	mov	r0, r9
    30e0:	f7ff fefa 	bl	2ed8 <get>
    30e4:	4606      	mov	r6, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    30e6:	4628      	mov	r0, r5
    30e8:	f01e fd64 	bl	21bb4 <_impl_k_sem_give>
			if (len8) {
    30ec:	2e00      	cmp	r6, #0
    30ee:	d0e2      	beq.n	30b6 <entropy_nrf5_get_entropy+0xe>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    30f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    30f4:	4640      	mov	r0, r8
    30f6:	f01e fdbd 	bl	21c74 <_impl_k_sem_take>
    30fa:	e7e9      	b.n	30d0 <entropy_nrf5_get_entropy+0x28>

000030fc <entropy_get_entropy_isr>:

u8_t entropy_get_entropy_isr(struct device *dev, u8_t *buf, u8_t len)
{
    30fc:	4613      	mov	r3, r2
	ARG_UNUSED(dev);
	return get((struct rand *)entropy_nrf5_data.isr, len, buf);
    30fe:	4802      	ldr	r0, [pc, #8]	; (3108 <entropy_get_entropy_isr+0xc>)
    3100:	460a      	mov	r2, r1
    3102:	4619      	mov	r1, r3
    3104:	f7ff bee8 	b.w	2ed8 <get>
    3108:	20000160 	.word	0x20000160

0000310c <rtc_compare_set>:
static void rtc_compare_set(u32_t rtc_ticks)
{
	u32_t rtc_now;

	/* Try to set CC value. We assume the procedure is always successful. */
	RTC_CC_VALUE = rtc_ticks;
    310c:	4b08      	ldr	r3, [pc, #32]	; (3130 <rtc_compare_set+0x24>)
    310e:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
	rtc_now = RTC_COUNTER;
    3112:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	 * by checking if the unsigned subtraction wraps around.
	 * If either of the above are true then instead of waiting for the CC
	 * event to trigger in the form of an interrupt, trigger it directly
	 * using the NVIC.
	 */
	if ((((rtc_ticks - rtc_now) & RTC_MASK) < RTC_MIN_DELTA) ||
    3116:	1ac0      	subs	r0, r0, r3
    3118:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    311c:	4b05      	ldr	r3, [pc, #20]	; (3134 <rtc_compare_set+0x28>)
    311e:	3802      	subs	r0, #2
    3120:	4298      	cmp	r0, r3
    3122:	bf82      	ittt	hi
    3124:	4b04      	ldrhi	r3, [pc, #16]	; (3138 <rtc_compare_set+0x2c>)
    3126:	f44f 3200 	movhi.w	r2, #131072	; 0x20000
    312a:	f8c3 2100 	strhi.w	r2, [r3, #256]	; 0x100
    312e:	4770      	bx	lr
    3130:	40011000 	.word	0x40011000
    3134:	007ffffd 	.word	0x007ffffd
    3138:	e000e100 	.word	0xe000e100

0000313c <rtc_announce_set_next>:
 * Since this function can be preempted, we need to take some provisions to
 * announce all expected sys ticks that have passed.
 *
 */
static void rtc_announce_set_next(void)
{
    313c:	b510      	push	{r4, lr}

	/* Read the RTC counter one single time in the beginning, so that an
	 * increase in the counter during this procedure leads to no race
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;
    313e:	4b12      	ldr	r3, [pc, #72]	; (3188 <rtc_announce_set_next+0x4c>)

	/* Calculate how many RTC ticks elapsed since the last sys tick. */
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    3140:	4c12      	ldr	r4, [pc, #72]	; (318c <rtc_announce_set_next+0x50>)
	rtc_now = RTC_COUNTER;
    3142:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    3146:	6822      	ldr	r2, [r4, #0]
    3148:	1a80      	subs	r0, r0, r2
    314a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	/* If no sys ticks have elapsed, there is no point in incrementing the
	 * counters or announcing it.
	 */
	if (rtc_elapsed >= RTC_TICKS_PER_SYS_TICK) {
    314e:	f5b0 7fa3 	cmp.w	r0, #326	; 0x146
    3152:	d911      	bls.n	3178 <rtc_announce_set_next+0x3c>
		/* Calculate how many sys ticks elapsed since the last sys tick
		 * and notify the kernel if necessary.
		 */
		sys_elapsed = rtc_elapsed / RTC_TICKS_PER_SYS_TICK;

		if (sys_elapsed > expected_sys_ticks) {
    3154:	490e      	ldr	r1, [pc, #56]	; (3190 <rtc_announce_set_next+0x54>)
    3156:	6809      	ldr	r1, [r1, #0]
		sys_elapsed = rtc_elapsed / RTC_TICKS_PER_SYS_TICK;
    3158:	f240 1347 	movw	r3, #327	; 0x147
    315c:	fbb0 f0f3 	udiv	r0, r0, r3
    3160:	4288      	cmp	r0, r1
    3162:	bf28      	it	cs
    3164:	4608      	movcs	r0, r1

		/* Store RTC_COUNTER floored to the last sys tick. This is
		 * done, so that ISR can properly calculate that 1 sys tick
		 * has passed.
		 */
		rtc_past = (rtc_past +
    3166:	fb03 2300 	mla	r3, r3, r0, r2
				(sys_elapsed * RTC_TICKS_PER_SYS_TICK)
			   ) & RTC_MASK;
    316a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		rtc_past = (rtc_past +
    316e:	6023      	str	r3, [r4, #0]

		_sys_idle_elapsed_ticks = sys_elapsed;
    3170:	4b08      	ldr	r3, [pc, #32]	; (3194 <rtc_announce_set_next+0x58>)
    3172:	6018      	str	r0, [r3, #0]
		_sys_clock_tick_announce();
    3174:	f01e fdc0 	bl	21cf8 <_nano_sys_clock_tick_announce>
	}

	/* Set the RTC to the next sys tick */
	rtc_compare_set(rtc_past + RTC_TICKS_PER_SYS_TICK);
    3178:	6820      	ldr	r0, [r4, #0]
}
    317a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rtc_compare_set(rtc_past + RTC_TICKS_PER_SYS_TICK);
    317e:	f200 1047 	addw	r0, r0, #327	; 0x147
    3182:	f7ff bfc3 	b.w	310c <rtc_compare_set>
    3186:	bf00      	nop
    3188:	40011000 	.word	0x40011000
    318c:	20000178 	.word	0x20000178
    3190:	20000174 	.word	0x20000174
    3194:	2000a860 	.word	0x2000a860

00003198 <rtc1_nrf5_isr>:
 */
static void rtc1_nrf5_isr(void *arg)
{

	ARG_UNUSED(arg);
	RTC_CC_EVENT = 0;
    3198:	4b02      	ldr	r3, [pc, #8]	; (31a4 <rtc1_nrf5_isr+0xc>)
    319a:	2200      	movs	r2, #0
    319c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	 */
	expected_sys_ticks = 0;
	/* Anounce elapsed of _sys_idle_elapsed_ticks systicks*/
	_sys_clock_tick_announce();
#else
	rtc_announce_set_next();
    31a0:	f7ff bfcc 	b.w	313c <rtc_announce_set_next>
    31a4:	40011000 	.word	0x40011000

000031a8 <_timer_idle_enter>:
	if ((sys_ticks < 0) ||
    31a8:	f246 4335 	movw	r3, #25653	; 0x6435
		sys_ticks = RTC_HALF / RTC_TICKS_PER_SYS_TICK;
    31ac:	4298      	cmp	r0, r3
    31ae:	bf28      	it	cs
    31b0:	4618      	movcs	r0, r3
	expected_sys_ticks = sys_ticks;
    31b2:	4b05      	ldr	r3, [pc, #20]	; (31c8 <_timer_idle_enter+0x20>)
    31b4:	6018      	str	r0, [r3, #0]
	rtc_compare_set(rtc_past + (sys_ticks * RTC_TICKS_PER_SYS_TICK));
    31b6:	4b05      	ldr	r3, [pc, #20]	; (31cc <_timer_idle_enter+0x24>)
    31b8:	681b      	ldr	r3, [r3, #0]
    31ba:	f240 1247 	movw	r2, #327	; 0x147
    31be:	fb02 3000 	mla	r0, r2, r0, r3
    31c2:	f7ff bfa3 	b.w	310c <rtc_compare_set>
    31c6:	bf00      	nop
    31c8:	20000174 	.word	0x20000174
    31cc:	20000178 	.word	0x20000178

000031d0 <_timer_idle_exit>:
{
    31d0:	b508      	push	{r3, lr}
	RTC_CC_EVENT = 0;
    31d2:	4b07      	ldr	r3, [pc, #28]	; (31f0 <_timer_idle_exit+0x20>)
    31d4:	2200      	movs	r2, #0
    31d6:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    31da:	4b06      	ldr	r3, [pc, #24]	; (31f4 <_timer_idle_exit+0x24>)
    31dc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    31e0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	rtc_announce_set_next();
    31e4:	f7ff ffaa 	bl	313c <rtc_announce_set_next>
	expected_sys_ticks = 1;
    31e8:	4b03      	ldr	r3, [pc, #12]	; (31f8 <_timer_idle_exit+0x28>)
    31ea:	2201      	movs	r2, #1
    31ec:	601a      	str	r2, [r3, #0]
    31ee:	bd08      	pop	{r3, pc}
    31f0:	40011000 	.word	0x40011000
    31f4:	e000e100 	.word	0xe000e100
    31f8:	20000174 	.word	0x20000174

000031fc <_sys_clock_driver_init>:
#endif

}

int _sys_clock_driver_init(struct device *device)
{
    31fc:	b570      	push	{r4, r5, r6, lr}
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    31fe:	4818      	ldr	r0, [pc, #96]	; (3260 <_sys_clock_driver_init+0x64>)
    3200:	f01d ffca 	bl	21198 <device_get_binding>
	if (!clock) {
    3204:	b348      	cbz	r0, 325a <_sys_clock_driver_init+0x5e>
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->on(dev, sys);
    3206:	6843      	ldr	r3, [r0, #4]
#ifdef CONFIG_TICKLESS_IDLE
	expected_sys_ticks = 1;
#endif /* CONFIG_TICKLESS_IDLE */

	/* TODO: replace with counter driver to access RTC */
	SYS_CLOCK_RTC->PRESCALER = 0;
    3208:	4d16      	ldr	r5, [pc, #88]	; (3264 <_sys_clock_driver_init+0x68>)
    320a:	681b      	ldr	r3, [r3, #0]
    320c:	2101      	movs	r1, #1
    320e:	4798      	blx	r3
	rtc_past = 0;
    3210:	4b15      	ldr	r3, [pc, #84]	; (3268 <_sys_clock_driver_init+0x6c>)
    3212:	2400      	movs	r4, #0
    3214:	601c      	str	r4, [r3, #0]
	expected_sys_ticks = 1;
    3216:	4b15      	ldr	r3, [pc, #84]	; (326c <_sys_clock_driver_init+0x70>)
    3218:	2601      	movs	r6, #1
    321a:	601e      	str	r6, [r3, #0]
	SYS_CLOCK_RTC->CC[0] = RTC_TICKS_PER_SYS_TICK;
    321c:	f240 1347 	movw	r3, #327	; 0x147
	SYS_CLOCK_RTC->PRESCALER = 0;
    3220:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
	SYS_CLOCK_RTC->CC[0] = RTC_TICKS_PER_SYS_TICK;
    3224:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
	SYS_CLOCK_RTC->EVTENSET = RTC_EVTENSET_COMPARE0_Msk;
    3228:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    322c:	f8c5 3344 	str.w	r3, [r5, #836]	; 0x344
	SYS_CLOCK_RTC->INTENSET = RTC_INTENSET_COMPARE0_Msk;
    3230:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    3234:	4b0e      	ldr	r3, [pc, #56]	; (3270 <_sys_clock_driver_init+0x74>)

	/* Clear the event flag and possible pending interrupt */
	RTC_CC_EVENT = 0;
    3236:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    323a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    323e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ClearPendingIRQ(NRF5_IRQ_RTC1_IRQn);

	IRQ_CONNECT(NRF5_IRQ_RTC1_IRQn, 1, rtc1_nrf5_isr, 0, 0);
    3242:	4631      	mov	r1, r6
    3244:	4622      	mov	r2, r4
    3246:	2011      	movs	r0, #17
    3248:	f7fe fcf8 	bl	1c3c <_irq_priority_set>
	irq_enable(NRF5_IRQ_RTC1_IRQn);
    324c:	2011      	movs	r0, #17
    324e:	f7fe fcc3 	bl	1bd8 <_arch_irq_enable>

	SYS_CLOCK_RTC->TASKS_CLEAR = 1;
    3252:	60ae      	str	r6, [r5, #8]
	SYS_CLOCK_RTC->TASKS_START = 1;

	return 0;
    3254:	4620      	mov	r0, r4
	SYS_CLOCK_RTC->TASKS_START = 1;
    3256:	602e      	str	r6, [r5, #0]
	return 0;
    3258:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    325a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    325e:	bd70      	pop	{r4, r5, r6, pc}
    3260:	000233a0 	.word	0x000233a0
    3264:	40011000 	.word	0x40011000
    3268:	20000178 	.word	0x20000178
    326c:	20000174 	.word	0x20000174
    3270:	e000e100 	.word	0xe000e100

00003274 <_timer_cycle_get_32>:

u32_t _timer_cycle_get_32(void)
{
    3274:	b530      	push	{r4, r5, lr}
	u32_t elapsed_cycles;
	u32_t sys_clock_tick_count;
	u32_t rtc_prev;
	u32_t rtc_now;

	rtc_now = RTC_COUNTER;
    3276:	4a0b      	ldr	r2, [pc, #44]	; (32a4 <_timer_cycle_get_32+0x30>)
	/* Discard value of  RTC_COUNTER read at LFCLK transition */
	do {
		sys_clock_tick_count = _sys_clock_tick_count;
    3278:	480b      	ldr	r0, [pc, #44]	; (32a8 <_timer_cycle_get_32+0x34>)
	rtc_now = RTC_COUNTER;
    327a:	f8d2 1504 	ldr.w	r1, [r2, #1284]	; 0x504
		sys_clock_tick_count = _sys_clock_tick_count;
    327e:	e9d0 4500 	ldrd	r4, r5, [r0]
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
					     RTC_TICKS_PER_SYS_TICK)) &
				 RTC_MASK;
		rtc_prev = rtc_now;
		rtc_now = RTC_COUNTER;
    3282:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	} while (rtc_now != rtc_prev);
    3286:	4299      	cmp	r1, r3
    3288:	d10a      	bne.n	32a0 <_timer_cycle_get_32+0x2c>

	return (sys_clock_tick_count * sys_clock_hw_cycles_per_tick) +
    328a:	4a08      	ldr	r2, [pc, #32]	; (32ac <_timer_cycle_get_32+0x38>)
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
    328c:	f240 1347 	movw	r3, #327	; 0x147
    3290:	fb03 1314 	mls	r3, r3, r4, r1
	return (sys_clock_tick_count * sys_clock_hw_cycles_per_tick) +
    3294:	6810      	ldr	r0, [r2, #0]
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
    3296:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	       elapsed_cycles;
}
    329a:	fb00 3004 	mla	r0, r0, r4, r3
    329e:	bd30      	pop	{r4, r5, pc}
    32a0:	4619      	mov	r1, r3
    32a2:	e7ec      	b.n	327e <_timer_cycle_get_32+0xa>
    32a4:	40011000 	.word	0x40011000
    32a8:	20003338 	.word	0x20003338
    32ac:	2000a864 	.word	0x2000a864

000032b0 <bt_hex>:
#include <misc/util.h>
#include <bluetooth/bluetooth.h>
#include <bluetooth/hci.h>

const char *bt_hex(const void *buf, size_t len)
{
    32b0:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
    32b2:	f04f 0320 	mov.w	r3, #32
    32b6:	f3ef 8511 	mrs	r5, BASEPRI
    32ba:	f383 8811 	msr	BASEPRI, r3
	unsigned int mask;
	char *str;
	int i;

	mask = irq_lock();
	str = hexbufs[curbuf++];
    32be:	4c14      	ldr	r4, [pc, #80]	; (3310 <bt_hex+0x60>)
    32c0:	4e14      	ldr	r6, [pc, #80]	; (3314 <bt_hex+0x64>)
    32c2:	7823      	ldrb	r3, [r4, #0]
    32c4:	eb03 12c3 	add.w	r2, r3, r3, lsl #7
    32c8:	3301      	adds	r3, #1
	curbuf %= ARRAY_SIZE(hexbufs);
    32ca:	f003 0303 	and.w	r3, r3, #3
	str = hexbufs[curbuf++];
    32ce:	4432      	add	r2, r6
	curbuf %= ARRAY_SIZE(hexbufs);
    32d0:	7023      	strb	r3, [r4, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    32d2:	f385 8811 	msr	BASEPRI, r5
	irq_unlock(mask);

	len = min(len, (sizeof(hexbufs[0]) - 1) / 2);
    32d6:	2940      	cmp	r1, #64	; 0x40
    32d8:	bf28      	it	cs
    32da:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    32dc:	4d0e      	ldr	r5, [pc, #56]	; (3318 <bt_hex+0x68>)
    32de:	3801      	subs	r0, #1
    32e0:	4613      	mov	r3, r2
    32e2:	eb02 0641 	add.w	r6, r2, r1, lsl #1
	for (i = 0; i < len; i++) {
    32e6:	42b3      	cmp	r3, r6
    32e8:	d104      	bne.n	32f4 <bt_hex+0x44>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    32ea:	2300      	movs	r3, #0
    32ec:	f802 3011 	strb.w	r3, [r2, r1, lsl #1]

	return str;
}
    32f0:	4610      	mov	r0, r2
    32f2:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    32f4:	7844      	ldrb	r4, [r0, #1]
    32f6:	0924      	lsrs	r4, r4, #4
    32f8:	3302      	adds	r3, #2
    32fa:	5d2c      	ldrb	r4, [r5, r4]
    32fc:	f803 4c02 	strb.w	r4, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    3300:	f810 4f01 	ldrb.w	r4, [r0, #1]!
    3304:	f004 040f 	and.w	r4, r4, #15
    3308:	5d2c      	ldrb	r4, [r5, r4]
    330a:	f803 4c01 	strb.w	r4, [r3, #-1]
    330e:	e7ea      	b.n	32e6 <bt_hex+0x36>
    3310:	200001b3 	.word	0x200001b3
    3314:	200001b4 	.word	0x200001b4
    3318:	00023496 	.word	0x00023496

0000331c <bt_addr_le_str>:

	return str;
}

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
    331c:	b570      	push	{r4, r5, r6, lr}
	static char bufs[2][BT_ADDR_LE_STR_LEN];
	static u8_t cur;
	char *str;

	str = bufs[cur++];
    331e:	4a1d      	ldr	r2, [pc, #116]	; (3394 <bt_addr_le_str+0x78>)
    3320:	491d      	ldr	r1, [pc, #116]	; (3398 <bt_addr_le_str+0x7c>)
    3322:	7813      	ldrb	r3, [r2, #0]
    3324:	eb03 0643 	add.w	r6, r3, r3, lsl #1
    3328:	3301      	adds	r3, #1
	cur %= ARRAY_SIZE(bufs);
    332a:	f003 0301 	and.w	r3, r3, #1
    332e:	7013      	strb	r3, [r2, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    3330:	7803      	ldrb	r3, [r0, #0]
{
    3332:	b08a      	sub	sp, #40	; 0x28
	str = bufs[cur++];
    3334:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
{
    3338:	4604      	mov	r4, r0
	str = bufs[cur++];
    333a:	440e      	add	r6, r1
    333c:	ad07      	add	r5, sp, #28
    333e:	2b03      	cmp	r3, #3
    3340:	d821      	bhi.n	3386 <bt_addr_le_str+0x6a>
    3342:	e8df f003 	tbb	[pc, r3]
    3346:	1a02      	.short	0x1a02
    3348:	1e1c      	.short	0x1e1c
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    334a:	4914      	ldr	r1, [pc, #80]	; (339c <bt_addr_le_str+0x80>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    334c:	4628      	mov	r0, r5
    334e:	f7fd f9b8 	bl	6c2 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    3352:	7862      	ldrb	r2, [r4, #1]
    3354:	9204      	str	r2, [sp, #16]
    3356:	78a2      	ldrb	r2, [r4, #2]
    3358:	9203      	str	r2, [sp, #12]
    335a:	78e2      	ldrb	r2, [r4, #3]
    335c:	9202      	str	r2, [sp, #8]
    335e:	7922      	ldrb	r2, [r4, #4]
    3360:	9201      	str	r2, [sp, #4]
    3362:	7962      	ldrb	r2, [r4, #5]
    3364:	9200      	str	r2, [sp, #0]
    3366:	79a3      	ldrb	r3, [r4, #6]
    3368:	9505      	str	r5, [sp, #20]
    336a:	4a0d      	ldr	r2, [pc, #52]	; (33a0 <bt_addr_le_str+0x84>)
    336c:	211b      	movs	r1, #27
    336e:	4630      	mov	r0, r6
    3370:	f7fe ffa4 	bl	22bc <snprintk>
	bt_addr_le_to_str(addr, str, sizeof(bufs[cur]));

	return str;
}
    3374:	4630      	mov	r0, r6
    3376:	b00a      	add	sp, #40	; 0x28
    3378:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    337a:	490a      	ldr	r1, [pc, #40]	; (33a4 <bt_addr_le_str+0x88>)
    337c:	e7e6      	b.n	334c <bt_addr_le_str+0x30>
		strcpy(type, "public id");
    337e:	490a      	ldr	r1, [pc, #40]	; (33a8 <bt_addr_le_str+0x8c>)
    3380:	e7e4      	b.n	334c <bt_addr_le_str+0x30>
		strcpy(type, "random id");
    3382:	490a      	ldr	r1, [pc, #40]	; (33ac <bt_addr_le_str+0x90>)
    3384:	e7e2      	b.n	334c <bt_addr_le_str+0x30>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    3386:	4a0a      	ldr	r2, [pc, #40]	; (33b0 <bt_addr_le_str+0x94>)
    3388:	210a      	movs	r1, #10
    338a:	4628      	mov	r0, r5
    338c:	f7fe ff96 	bl	22bc <snprintk>
    3390:	e7df      	b.n	3352 <bt_addr_le_str+0x36>
    3392:	bf00      	nop
    3394:	200001b2 	.word	0x200001b2
    3398:	2000017c 	.word	0x2000017c
    339c:	0002344a 	.word	0x0002344a
    33a0:	00023473 	.word	0x00023473
    33a4:	00023451 	.word	0x00023451
    33a8:	00023458 	.word	0x00023458
    33ac:	00023462 	.word	0x00023462
    33b0:	0002346c 	.word	0x0002346c

000033b4 <ah>:

#define BT_DBG_ENABLED IS_ENABLED(CONFIG_BT_DEBUG_RPA)
#include "common/log.h"

static int ah(const u8_t irk[16], const u8_t r[3], u8_t out[3])
{
    33b4:	b530      	push	{r4, r5, lr}
    33b6:	b085      	sub	sp, #20
    33b8:	4604      	mov	r4, r0
    33ba:	4615      	mov	r5, r2
	int err;

	BT_DBG("irk %s, r %s", bt_hex(irk, 16), bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
    33bc:	4668      	mov	r0, sp
    33be:	2203      	movs	r2, #3
    33c0:	f7fd f9e7 	bl	792 <memcpy>
	memset(res + 3, 0, 13);
    33c4:	220d      	movs	r2, #13
    33c6:	2100      	movs	r1, #0
    33c8:	f10d 0003 	add.w	r0, sp, #3
    33cc:	f7fd fa0d 	bl	7ea <memset>

	err = bt_encrypt_le(irk, res, res);
    33d0:	4620      	mov	r0, r4
    33d2:	466a      	mov	r2, sp
    33d4:	4669      	mov	r1, sp
    33d6:	f009 fa59 	bl	c88c <bt_encrypt_le>
	if (err) {
    33da:	4604      	mov	r4, r0
    33dc:	b920      	cbnz	r0, 33e8 <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
    33de:	2203      	movs	r2, #3
    33e0:	4669      	mov	r1, sp
    33e2:	4628      	mov	r0, r5
    33e4:	f7fd f9d5 	bl	792 <memcpy>

	return 0;
}
    33e8:	4620      	mov	r0, r4
    33ea:	b005      	add	sp, #20
    33ec:	bd30      	pop	{r4, r5, pc}

000033ee <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const u8_t irk[16], const bt_addr_t *addr)
{
    33ee:	b513      	push	{r0, r1, r4, lr}
    33f0:	460c      	mov	r4, r1
	u8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
    33f2:	aa01      	add	r2, sp, #4
    33f4:	3103      	adds	r1, #3
    33f6:	f7ff ffdd 	bl	33b4 <ah>
	if (err) {
    33fa:	b948      	cbnz	r0, 3410 <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
    33fc:	2203      	movs	r2, #3
    33fe:	a901      	add	r1, sp, #4
    3400:	4620      	mov	r0, r4
    3402:	f7fd f999 	bl	738 <memcmp>
    3406:	fab0 f080 	clz	r0, r0
    340a:	0940      	lsrs	r0, r0, #5
}
    340c:	b002      	add	sp, #8
    340e:	bd10      	pop	{r4, pc}
		return false;
    3410:	2000      	movs	r0, #0
    3412:	e7fb      	b.n	340c <bt_rpa_irk_matches+0x1e>

00003414 <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const u8_t irk[16], bt_addr_t *rpa)
{
    3414:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = bt_rand(rpa->val + 3, 3);
    3416:	1ccd      	adds	r5, r1, #3
{
    3418:	4606      	mov	r6, r0
    341a:	460c      	mov	r4, r1
	err = bt_rand(rpa->val + 3, 3);
    341c:	4628      	mov	r0, r5
    341e:	2103      	movs	r1, #3
    3420:	f009 fa18 	bl	c854 <bt_rand>
	if (err) {
    3424:	b960      	cbnz	r0, 3440 <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
    3426:	7963      	ldrb	r3, [r4, #5]
    3428:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    342c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3430:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
    3432:	4622      	mov	r2, r4
    3434:	4629      	mov	r1, r5
    3436:	4630      	mov	r0, r6
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
    3438:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
    343c:	f7ff bfba 	b.w	33b4 <ah>
}
    3440:	bd70      	pop	{r4, r5, r6, pc}
	...

00003444 <uuid_to_uuid128>:
	.val = { 0xfb, 0x34, 0x9b, 0x5f, 0x80, 0x00, 0x00, 0x80,
		 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    3444:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
    3446:	7802      	ldrb	r2, [r0, #0]
    3448:	2a01      	cmp	r2, #1
{
    344a:	4604      	mov	r4, r0
    344c:	460b      	mov	r3, r1
	switch (src->type) {
    344e:	d017      	beq.n	3480 <uuid_to_uuid128+0x3c>
    3450:	d303      	bcc.n	345a <uuid_to_uuid128+0x16>
    3452:	2a02      	cmp	r2, #2
    3454:	d02c      	beq.n	34b0 <uuid_to_uuid128+0x6c>
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    3456:	bcf0      	pop	{r4, r5, r6, r7}
    3458:	4770      	bx	lr
		*dst = uuid128_base;
    345a:	4a18      	ldr	r2, [pc, #96]	; (34bc <uuid_to_uuid128+0x78>)
    345c:	460d      	mov	r5, r1
    345e:	f102 0710 	add.w	r7, r2, #16
    3462:	6810      	ldr	r0, [r2, #0]
    3464:	6851      	ldr	r1, [r2, #4]
    3466:	462e      	mov	r6, r5
    3468:	c603      	stmia	r6!, {r0, r1}
    346a:	3208      	adds	r2, #8
    346c:	42ba      	cmp	r2, r7
    346e:	4635      	mov	r5, r6
    3470:	d1f7      	bne.n	3462 <uuid_to_uuid128+0x1e>
    3472:	7812      	ldrb	r2, [r2, #0]
    3474:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
    3476:	8862      	ldrh	r2, [r4, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    3478:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    347a:	0a12      	lsrs	r2, r2, #8
    347c:	739a      	strb	r2, [r3, #14]
    347e:	e7ea      	b.n	3456 <uuid_to_uuid128+0x12>
		*dst = uuid128_base;
    3480:	4a0e      	ldr	r2, [pc, #56]	; (34bc <uuid_to_uuid128+0x78>)
    3482:	460d      	mov	r5, r1
    3484:	f102 0710 	add.w	r7, r2, #16
    3488:	6810      	ldr	r0, [r2, #0]
    348a:	6851      	ldr	r1, [r2, #4]
    348c:	462e      	mov	r6, r5
    348e:	c603      	stmia	r6!, {r0, r1}
    3490:	3208      	adds	r2, #8
    3492:	42ba      	cmp	r2, r7
    3494:	4635      	mov	r5, r6
    3496:	d1f7      	bne.n	3488 <uuid_to_uuid128+0x44>
    3498:	7812      	ldrb	r2, [r2, #0]
    349a:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
    349c:	6862      	ldr	r2, [r4, #4]
	dst[0] = val;
    349e:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    34a0:	f3c2 2107 	ubfx	r1, r2, #8, #8
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(u32_t val, u8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    34a4:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
    34a6:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
    34a8:	0a12      	lsrs	r2, r2, #8
    34aa:	7399      	strb	r1, [r3, #14]
    34ac:	741a      	strb	r2, [r3, #16]
    34ae:	e7d2      	b.n	3456 <uuid_to_uuid128+0x12>
		memcpy(dst, src, sizeof(*dst));
    34b0:	4601      	mov	r1, r0
    34b2:	2211      	movs	r2, #17
    34b4:	4618      	mov	r0, r3
}
    34b6:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
    34b8:	f7fd b96b 	b.w	792 <memcpy>
    34bc:	000234a7 	.word	0x000234a7

000034c0 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
    34c0:	b510      	push	{r4, lr}
    34c2:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type)
    34c4:	7801      	ldrb	r1, [r0, #0]
    34c6:	7822      	ldrb	r2, [r4, #0]
    34c8:	428a      	cmp	r2, r1
{
    34ca:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type)
    34cc:	d00e      	beq.n	34ec <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
    34ce:	4669      	mov	r1, sp
    34d0:	f7ff ffb8 	bl	3444 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
    34d4:	a905      	add	r1, sp, #20
    34d6:	4620      	mov	r0, r4
    34d8:	f7ff ffb4 	bl	3444 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
    34dc:	2210      	movs	r2, #16
    34de:	f10d 0115 	add.w	r1, sp, #21
    34e2:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    34e6:	f7fd f927 	bl	738 <memcmp>
    34ea:	e00a      	b.n	3502 <bt_uuid_cmp+0x42>
	switch (u1->type) {
    34ec:	2a01      	cmp	r2, #1
    34ee:	d00a      	beq.n	3506 <bt_uuid_cmp+0x46>
    34f0:	d304      	bcc.n	34fc <bt_uuid_cmp+0x3c>
    34f2:	2a02      	cmp	r2, #2
    34f4:	d00a      	beq.n	350c <bt_uuid_cmp+0x4c>
	}

	return -EINVAL;
    34f6:	f06f 0015 	mvn.w	r0, #21
    34fa:	e002      	b.n	3502 <bt_uuid_cmp+0x42>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
    34fc:	8840      	ldrh	r0, [r0, #2]
    34fe:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
    3500:	1ac0      	subs	r0, r0, r3
}
    3502:	b00a      	add	sp, #40	; 0x28
    3504:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
    3506:	6840      	ldr	r0, [r0, #4]
    3508:	6863      	ldr	r3, [r4, #4]
    350a:	e7f9      	b.n	3500 <bt_uuid_cmp+0x40>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    350c:	2210      	movs	r2, #16
    350e:	1c61      	adds	r1, r4, #1
    3510:	3001      	adds	r0, #1
    3512:	e7e8      	b.n	34e6 <bt_uuid_cmp+0x26>

00003514 <ver_str>:
	return 0;
}

#if defined(CONFIG_BT_DEBUG)
static const char *ver_str(u8_t ver)
{
    3514:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
    3516:	4d0b      	ldr	r5, [pc, #44]	; (3544 <ver_str+0x30>)
{
    3518:	4606      	mov	r6, r0
	const char * const str[] = {
    351a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    351c:	b08a      	sub	sp, #40	; 0x28
	const char * const str[] = {
    351e:	466c      	mov	r4, sp
    3520:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    3522:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    3524:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    3526:	e895 0003 	ldmia.w	r5, {r0, r1}
		"1.0b", "1.1", "1.2", "2.0", "2.1", "3.0", "4.0", "4.1", "4.2",
		"5.0",
	};

	if (ver < ARRAY_SIZE(str)) {
    352a:	2e09      	cmp	r6, #9
	const char * const str[] = {
    352c:	e884 0003 	stmia.w	r4, {r0, r1}
		return str[ver];
    3530:	bf9b      	ittet	ls
    3532:	ab0a      	addls	r3, sp, #40	; 0x28
    3534:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	}

	return "unknown";
    3538:	4803      	ldrhi	r0, [pc, #12]	; (3548 <ver_str+0x34>)
		return str[ver];
    353a:	f856 0c28 	ldrls.w	r0, [r6, #-40]
}
    353e:	b00a      	add	sp, #40	; 0x28
    3540:	bd70      	pop	{r4, r5, r6, pc}
    3542:	bf00      	nop
    3544:	00022960 	.word	0x00022960
    3548:	000242dc 	.word	0x000242dc

0000354c <valid_adv_param>:



static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    354c:	7803      	ldrb	r3, [r0, #0]
    354e:	8842      	ldrh	r2, [r0, #2]
    3550:	f013 0301 	ands.w	r3, r3, #1
    3554:	d105      	bne.n	3562 <valid_adv_param+0x16>
		 * BT Core 4.2 [Vol 2, Part E, 7.8.5]
		 * The Advertising_Interval_Min and Advertising_Interval_Max
		 * shall not be set to less than 0x00A0 (100 ms) if the
		 * Advertising_Type is set to ADV_SCAN_IND or ADV_NONCONN_IND.
		 */
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    3556:	4909      	ldr	r1, [pc, #36]	; (357c <valid_adv_param+0x30>)
    3558:	7b89      	ldrb	r1, [r1, #14]
    355a:	2908      	cmp	r1, #8
    355c:	d801      	bhi.n	3562 <valid_adv_param+0x16>
    355e:	2a9f      	cmp	r2, #159	; 0x9f
    3560:	d90a      	bls.n	3578 <valid_adv_param+0x2c>
		    param->interval_min < 0x00a0) {
			return false;
		}
	}

	if (param->interval_min > param->interval_max ||
    3562:	8880      	ldrh	r0, [r0, #4]
    3564:	4282      	cmp	r2, r0
    3566:	d807      	bhi.n	3578 <valid_adv_param+0x2c>
    3568:	2a1f      	cmp	r2, #31
    356a:	d905      	bls.n	3578 <valid_adv_param+0x2c>
	    param->interval_min < 0x0020 || param->interval_max > 0x4000) {
    356c:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    3570:	bf8c      	ite	hi
    3572:	2000      	movhi	r0, #0
    3574:	2001      	movls	r0, #1
    3576:	4770      	bx	lr
			return false;
    3578:	2000      	movs	r0, #0
		return false;
	}

	return true;
}
    357a:	4770      	bx	lr
    357c:	20009cd8 	.word	0x20009cd8

00003580 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    3580:	2207      	movs	r2, #7
    3582:	f7fd b906 	b.w	792 <memcpy>

00003586 <atomic_or>:
 *
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
    3586:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
}
    3588:	f3bf 8f5b 	dmb	ish
    358c:	e850 3f00 	ldrex	r3, [r0]
    3590:	ea43 0201 	orr.w	r2, r3, r1
    3594:	e840 2e00 	strex	lr, r2, [r0]
    3598:	f1be 0f00 	cmp.w	lr, #0
    359c:	d1f6      	bne.n	358c <atomic_or+0x6>
    359e:	f3bf 8f5b 	dmb	ish
    35a2:	4618      	mov	r0, r3
    35a4:	f85d fb04 	ldr.w	pc, [sp], #4

000035a8 <atomic_test_bit>:
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    35a8:	094b      	lsrs	r3, r1, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    35aa:	f3bf 8f5b 	dmb	ish
    35ae:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    35b2:	f3bf 8f5b 	dmb	ish

	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    35b6:	f001 011f 	and.w	r1, r1, #31
    35ba:	4108      	asrs	r0, r1
}
    35bc:	f000 0001 	and.w	r0, r0, #1
    35c0:	4770      	bx	lr

000035c2 <atomic_and>:
{
    35c2:	b500      	push	{lr}
}
    35c4:	f3bf 8f5b 	dmb	ish
    35c8:	e850 3f00 	ldrex	r3, [r0]
    35cc:	ea03 0201 	and.w	r2, r3, r1
    35d0:	e840 2e00 	strex	lr, r2, [r0]
    35d4:	f1be 0f00 	cmp.w	lr, #0
    35d8:	d1f6      	bne.n	35c8 <atomic_and+0x6>
    35da:	f3bf 8f5b 	dmb	ish
    35de:	4618      	mov	r0, r3
    35e0:	f85d fb04 	ldr.w	pc, [sp], #4

000035e4 <atomic_test_and_clear_bit>:
 * @param bit Bit number (starting from 0).
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_and_clear_bit(atomic_t *target, int bit)
{
    35e4:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
    35e6:	f001 031f 	and.w	r3, r1, #31
    35ea:	2401      	movs	r4, #1
    35ec:	409c      	lsls	r4, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    35ee:	094b      	lsrs	r3, r1, #5
    35f0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    35f4:	43e1      	mvns	r1, r4
    35f6:	f7ff ffe4 	bl	35c2 <atomic_and>

	return (old & mask) != 0;
    35fa:	4204      	tst	r4, r0
}
    35fc:	bf14      	ite	ne
    35fe:	2001      	movne	r0, #1
    3600:	2000      	moveq	r0, #0
    3602:	bd10      	pop	{r4, pc}

00003604 <update_conn_param>:
	k_delayed_work_submit(&conn->le.update_work,
    3604:	78c3      	ldrb	r3, [r0, #3]
    3606:	2b00      	cmp	r3, #0
 * @retval -EADDRINUSE Work item is pending on a different workqueue.
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					s32_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    3608:	f241 3288 	movw	r2, #5000	; 0x1388
    360c:	f100 0174 	add.w	r1, r0, #116	; 0x74
    3610:	bf08      	it	eq
    3612:	2200      	moveq	r2, #0
    3614:	4801      	ldr	r0, [pc, #4]	; (361c <update_conn_param+0x18>)
    3616:	f01e be71 	b.w	222fc <k_delayed_work_submit_to_queue>
    361a:	bf00      	nop
    361c:	20003340 	.word	0x20003340

00003620 <update_sec_level>:
{
    3620:	b513      	push	{r0, r1, r4, lr}
	if (!conn->encrypt) {
    3622:	7a83      	ldrb	r3, [r0, #10]
{
    3624:	4604      	mov	r4, r0
	if (!conn->encrypt) {
    3626:	b91b      	cbnz	r3, 3630 <update_sec_level+0x10>
		conn->sec_level = BT_SECURITY_LOW;
    3628:	2301      	movs	r3, #1
    362a:	7203      	strb	r3, [r0, #8]
}
    362c:	b002      	add	sp, #8
    362e:	bd10      	pop	{r4, pc}
	if (conn->le.keys && atomic_test_bit(conn->le.keys->flags,
    3630:	6f00      	ldr	r0, [r0, #112]	; 0x70
    3632:	b1f8      	cbz	r0, 3674 <update_sec_level+0x54>
    3634:	2100      	movs	r1, #0
    3636:	3008      	adds	r0, #8
    3638:	f7ff ffb6 	bl	35a8 <atomic_test_bit>
    363c:	b1d0      	cbz	r0, 3674 <update_sec_level+0x54>
		if (conn->le.keys->keys & BT_KEYS_LTK_P256) {
    363e:	6f23      	ldr	r3, [r4, #112]	; 0x70
    3640:	899b      	ldrh	r3, [r3, #12]
    3642:	069b      	lsls	r3, r3, #26
			conn->sec_level = BT_SECURITY_FIPS;
    3644:	bf4c      	ite	mi
    3646:	2304      	movmi	r3, #4
			conn->sec_level = BT_SECURITY_HIGH;
    3648:	2303      	movpl	r3, #3
		conn->sec_level = BT_SECURITY_MEDIUM;
    364a:	7223      	strb	r3, [r4, #8]
	if (conn->required_sec_level > conn->sec_level) {
    364c:	7a62      	ldrb	r2, [r4, #9]
    364e:	7a23      	ldrb	r3, [r4, #8]
    3650:	429a      	cmp	r2, r3
    3652:	d9eb      	bls.n	362c <update_sec_level+0xc>
		BT_ERR("Failed to set required security level");
    3654:	4b08      	ldr	r3, [pc, #32]	; (3678 <update_sec_level+0x58>)
    3656:	9301      	str	r3, [sp, #4]
    3658:	9300      	str	r3, [sp, #0]
    365a:	4a08      	ldr	r2, [pc, #32]	; (367c <update_sec_level+0x5c>)
    365c:	4b08      	ldr	r3, [pc, #32]	; (3680 <update_sec_level+0x60>)
    365e:	4909      	ldr	r1, [pc, #36]	; (3684 <update_sec_level+0x64>)
    3660:	4809      	ldr	r0, [pc, #36]	; (3688 <update_sec_level+0x68>)
    3662:	f7fe fe1d 	bl	22a0 <printk>
		bt_conn_disconnect(conn, BT_HCI_ERR_AUTHENTICATION_FAIL);
    3666:	2105      	movs	r1, #5
    3668:	4620      	mov	r0, r4
}
    366a:	b002      	add	sp, #8
    366c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_conn_disconnect(conn, BT_HCI_ERR_AUTHENTICATION_FAIL);
    3670:	f002 bfc2 	b.w	65f8 <bt_conn_disconnect>
		conn->sec_level = BT_SECURITY_MEDIUM;
    3674:	2302      	movs	r3, #2
    3676:	e7e8      	b.n	364a <update_sec_level+0x2a>
    3678:	00023dbe 	.word	0x00023dbe
    367c:	00022d86 	.word	0x00022d86
    3680:	000235a8 	.word	0x000235a8
    3684:	000272e8 	.word	0x000272e8
    3688:	00024294 	.word	0x00024294

0000368c <hci_cmd_done>:
{
    368c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3690:	4606      	mov	r6, r0
    3692:	b086      	sub	sp, #24
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    3694:	7990      	ldrb	r0, [r2, #6]
    3696:	4f26      	ldr	r7, [pc, #152]	; (3730 <hci_cmd_done+0xa4>)
{
    3698:	4688      	mov	r8, r1
    369a:	4615      	mov	r5, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    369c:	f015 fd64 	bl	19168 <net_buf_pool_get>
    36a0:	4287      	cmp	r7, r0
    36a2:	d013      	beq.n	36cc <hci_cmd_done+0x40>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    36a4:	79ac      	ldrb	r4, [r5, #6]
    36a6:	4620      	mov	r0, r4
    36a8:	f015 fd5e 	bl	19168 <net_buf_pool_get>
    36ac:	4b21      	ldr	r3, [pc, #132]	; (3734 <hci_cmd_done+0xa8>)
    36ae:	9305      	str	r3, [sp, #20]
    36b0:	9003      	str	r0, [sp, #12]
    36b2:	e88d 0048 	stmia.w	sp, {r3, r6}
    36b6:	9704      	str	r7, [sp, #16]
    36b8:	9402      	str	r4, [sp, #8]
    36ba:	4b1f      	ldr	r3, [pc, #124]	; (3738 <hci_cmd_done+0xac>)
    36bc:	4a1f      	ldr	r2, [pc, #124]	; (373c <hci_cmd_done+0xb0>)
    36be:	4920      	ldr	r1, [pc, #128]	; (3740 <hci_cmd_done+0xb4>)
    36c0:	4820      	ldr	r0, [pc, #128]	; (3744 <hci_cmd_done+0xb8>)
    36c2:	f7fe fded 	bl	22a0 <printk>
}
    36c6:	b006      	add	sp, #24
    36c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cmd(buf)->opcode != opcode) {
    36cc:	4628      	mov	r0, r5
    36ce:	f015 fd51 	bl	19174 <net_buf_id>
    36d2:	4c1d      	ldr	r4, [pc, #116]	; (3748 <hci_cmd_done+0xbc>)
    36d4:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    36d8:	8843      	ldrh	r3, [r0, #2]
    36da:	42b3      	cmp	r3, r6
    36dc:	d010      	beq.n	3700 <hci_cmd_done+0x74>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    36de:	4628      	mov	r0, r5
    36e0:	f015 fd48 	bl	19174 <net_buf_id>
    36e4:	4b13      	ldr	r3, [pc, #76]	; (3734 <hci_cmd_done+0xa8>)
    36e6:	9303      	str	r3, [sp, #12]
    36e8:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    36ec:	4914      	ldr	r1, [pc, #80]	; (3740 <hci_cmd_done+0xb4>)
    36ee:	8842      	ldrh	r2, [r0, #2]
    36f0:	9202      	str	r2, [sp, #8]
    36f2:	e88d 0048 	stmia.w	sp, {r3, r6}
    36f6:	4a11      	ldr	r2, [pc, #68]	; (373c <hci_cmd_done+0xb0>)
    36f8:	4b0f      	ldr	r3, [pc, #60]	; (3738 <hci_cmd_done+0xac>)
    36fa:	4814      	ldr	r0, [pc, #80]	; (374c <hci_cmd_done+0xc0>)
    36fc:	f7fe fdd0 	bl	22a0 <printk>
	if (cmd(buf)->sync) {
    3700:	4628      	mov	r0, r5
    3702:	f015 fd37 	bl	19174 <net_buf_id>
    3706:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    370a:	6843      	ldr	r3, [r0, #4]
    370c:	2b00      	cmp	r3, #0
    370e:	d0da      	beq.n	36c6 <hci_cmd_done+0x3a>
		cmd(buf)->status = status;
    3710:	4628      	mov	r0, r5
    3712:	f015 fd2f 	bl	19174 <net_buf_id>
    3716:	f804 8030 	strb.w	r8, [r4, r0, lsl #3]
		k_sem_give(cmd(buf)->sync);
    371a:	4628      	mov	r0, r5
    371c:	f015 fd2a 	bl	19174 <net_buf_id>
    3720:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    3724:	6840      	ldr	r0, [r0, #4]
}
    3726:	b006      	add	sp, #24
    3728:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    372c:	f01e ba42 	b.w	21bb4 <_impl_k_sem_give>
    3730:	2000aa9c 	.word	0x2000aa9c
    3734:	00023dbe 	.word	0x00023dbe
    3738:	0002360d 	.word	0x0002360d
    373c:	00024016 	.word	0x00024016
    3740:	000272e8 	.word	0x000272e8
    3744:	0002401d 	.word	0x0002401d
    3748:	200003b8 	.word	0x200003b8
    374c:	00024062 	.word	0x00024062

00003750 <sys_put_le64>:
    3750:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
    3754:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
    3756:	7053      	strb	r3, [r2, #1]
	sys_put_le16(val >> 16, &dst[2]);
    3758:	0c00      	lsrs	r0, r0, #16
	dst[1] = val >> 8;
    375a:	f3c1 2307 	ubfx	r3, r1, #8, #8
	dst[0] = val;
    375e:	7111      	strb	r1, [r2, #4]
	sys_put_le16(val >> 16, &dst[2]);
    3760:	0c09      	lsrs	r1, r1, #16
	dst[0] = val;
    3762:	7090      	strb	r0, [r2, #2]
    3764:	7191      	strb	r1, [r2, #6]
	dst[1] = val >> 8;
    3766:	0a00      	lsrs	r0, r0, #8
    3768:	0a09      	lsrs	r1, r1, #8
    376a:	70d0      	strb	r0, [r2, #3]
    376c:	7153      	strb	r3, [r2, #5]
    376e:	71d1      	strb	r1, [r2, #7]
    3770:	4770      	bx	lr
	...

00003774 <bt_hci_cmd_create>:
{
    3774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3778:	4680      	mov	r8, r0
    377a:	4689      	mov	r9, r1
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    377c:	4813      	ldr	r0, [pc, #76]	; (37cc <bt_hci_cmd_create+0x58>)
	cmd(buf)->opcode = opcode;
    377e:	4d14      	ldr	r5, [pc, #80]	; (37d0 <bt_hci_cmd_create+0x5c>)
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    3780:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3784:	f015 fd84 	bl	19290 <net_buf_alloc_fixed>
    3788:	4604      	mov	r4, r0
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    378a:	f100 0608 	add.w	r6, r0, #8
    378e:	2100      	movs	r1, #0
    3790:	4630      	mov	r0, r6
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	*(u8_t *)net_buf_user_data(buf) = type;
    3792:	2700      	movs	r7, #0
    3794:	f015 fd9b 	bl	192ce <net_buf_simple_reserve>
    3798:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
    379a:	4620      	mov	r0, r4
    379c:	f015 fcea 	bl	19174 <net_buf_id>
    37a0:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    37a4:	f8a0 8002 	strh.w	r8, [r0, #2]
	cmd(buf)->sync = NULL;
    37a8:	4620      	mov	r0, r4
    37aa:	f015 fce3 	bl	19174 <net_buf_id>
    37ae:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
	hdr = net_buf_add(buf, sizeof(*hdr));
    37b2:	2103      	movs	r1, #3
	cmd(buf)->sync = NULL;
    37b4:	6047      	str	r7, [r0, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    37b6:	4630      	mov	r0, r6
    37b8:	f015 fdf8 	bl	193ac <net_buf_simple_add>
	hdr->param_len = param_len;
    37bc:	f880 9002 	strb.w	r9, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    37c0:	f8a0 8000 	strh.w	r8, [r0]
}
    37c4:	4620      	mov	r0, r4
    37c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    37ca:	bf00      	nop
    37cc:	2000aa9c 	.word	0x2000aa9c
    37d0:	200003b8 	.word	0x200003b8

000037d4 <bt_hci_cmd_send_sync>:
{
    37d4:	b570      	push	{r4, r5, r6, lr}
    37d6:	4615      	mov	r5, r2
    37d8:	b086      	sub	sp, #24
	if (!buf) {
    37da:	460c      	mov	r4, r1
    37dc:	b919      	cbnz	r1, 37e6 <bt_hci_cmd_send_sync+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
    37de:	f7ff ffc9 	bl	3774 <bt_hci_cmd_create>
		if (!buf) {
    37e2:	4604      	mov	r4, r0
    37e4:	b368      	cbz	r0, 3842 <bt_hci_cmd_send_sync+0x6e>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    37e6:	2201      	movs	r2, #1
    37e8:	2100      	movs	r1, #0
    37ea:	4668      	mov	r0, sp
    37ec:	f01e f9d8 	bl	21ba0 <_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    37f0:	4620      	mov	r0, r4
    37f2:	f015 fcbf 	bl	19174 <net_buf_id>
    37f6:	4e14      	ldr	r6, [pc, #80]	; (3848 <bt_hci_cmd_send_sync+0x74>)
    37f8:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
    37fc:	f8c0 d004 	str.w	sp, [r0, #4]
	net_buf_ref(buf);
    3800:	4620      	mov	r0, r4
    3802:	f015 fda3 	bl	1934c <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    3806:	4621      	mov	r1, r4
    3808:	4810      	ldr	r0, [pc, #64]	; (384c <bt_hci_cmd_send_sync+0x78>)
    380a:	f015 fd64 	bl	192d6 <net_buf_put>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    380e:	f242 7110 	movw	r1, #10000	; 0x2710
    3812:	4668      	mov	r0, sp
    3814:	f01e fa2e 	bl	21c74 <_impl_k_sem_take>
	if (cmd(buf)->status) {
    3818:	4620      	mov	r0, r4
    381a:	f015 fcab 	bl	19174 <net_buf_id>
    381e:	f816 0030 	ldrb.w	r0, [r6, r0, lsl #3]
    3822:	b130      	cbz	r0, 3832 <bt_hci_cmd_send_sync+0x5e>
		net_buf_unref(buf);
    3824:	4620      	mov	r0, r4
    3826:	f015 fd63 	bl	192f0 <net_buf_unref>
		err = -EIO;
    382a:	f06f 0004 	mvn.w	r0, #4
}
    382e:	b006      	add	sp, #24
    3830:	bd70      	pop	{r4, r5, r6, pc}
		if (rsp) {
    3832:	b10d      	cbz	r5, 3838 <bt_hci_cmd_send_sync+0x64>
			*rsp = buf;
    3834:	602c      	str	r4, [r5, #0]
    3836:	e7fa      	b.n	382e <bt_hci_cmd_send_sync+0x5a>
			net_buf_unref(buf);
    3838:	4620      	mov	r0, r4
    383a:	f015 fd59 	bl	192f0 <net_buf_unref>
		err = 0;
    383e:	4628      	mov	r0, r5
    3840:	e7f5      	b.n	382e <bt_hci_cmd_send_sync+0x5a>
			return -ENOBUFS;
    3842:	f06f 0036 	mvn.w	r0, #54	; 0x36
    3846:	e7f2      	b.n	382e <bt_hci_cmd_send_sync+0x5a>
    3848:	200003b8 	.word	0x200003b8
    384c:	20009dac 	.word	0x20009dac

00003850 <set_random_address>:
{
    3850:	b570      	push	{r4, r5, r6, lr}
	return memcmp(a, b, sizeof(*a));
    3852:	4d15      	ldr	r5, [pc, #84]	; (38a8 <set_random_address+0x58>)
    3854:	2206      	movs	r2, #6
    3856:	f105 0108 	add.w	r1, r5, #8
    385a:	4606      	mov	r6, r0
    385c:	f7fc ff6c 	bl	738 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    3860:	4604      	mov	r4, r0
    3862:	b1d8      	cbz	r0, 389c <set_random_address+0x4c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    3864:	2106      	movs	r1, #6
    3866:	f242 0005 	movw	r0, #8197	; 0x2005
    386a:	f7ff ff83 	bl	3774 <bt_hci_cmd_create>
	if (!buf) {
    386e:	4604      	mov	r4, r0
    3870:	b1b0      	cbz	r0, 38a0 <set_random_address+0x50>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    3872:	2206      	movs	r2, #6
    3874:	4631      	mov	r1, r6
    3876:	3008      	adds	r0, #8
    3878:	f015 fd9e 	bl	193b8 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    387c:	4621      	mov	r1, r4
    387e:	2200      	movs	r2, #0
    3880:	f242 0005 	movw	r0, #8197	; 0x2005
    3884:	f7ff ffa6 	bl	37d4 <bt_hci_cmd_send_sync>
	if (err) {
    3888:	4604      	mov	r4, r0
    388a:	b938      	cbnz	r0, 389c <set_random_address+0x4c>
	memcpy(dst, src, sizeof(*dst));
    388c:	2206      	movs	r2, #6
    388e:	4631      	mov	r1, r6
    3890:	f105 0008 	add.w	r0, r5, #8
    3894:	f7fc ff7d 	bl	792 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    3898:	2301      	movs	r3, #1
    389a:	71eb      	strb	r3, [r5, #7]
}
    389c:	4620      	mov	r0, r4
    389e:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    38a0:	f06f 0436 	mvn.w	r4, #54	; 0x36
    38a4:	e7fa      	b.n	389c <set_random_address+0x4c>
    38a6:	bf00      	nop
    38a8:	20009cd8 	.word	0x20009cd8

000038ac <le_set_private_addr>:
{
    38ac:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
    38ae:	2106      	movs	r1, #6
    38b0:	4668      	mov	r0, sp
    38b2:	f008 ffcf 	bl	c854 <bt_rand>
	if (err) {
    38b6:	b940      	cbnz	r0, 38ca <le_set_private_addr+0x1e>
	nrpa.val[5] &= 0x3f;
    38b8:	f89d 3005 	ldrb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
    38bc:	4668      	mov	r0, sp
	nrpa.val[5] &= 0x3f;
    38be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    38c2:	f88d 3005 	strb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
    38c6:	f7ff ffc3 	bl	3850 <set_random_address>
}
    38ca:	b003      	add	sp, #12
    38cc:	f85d fb04 	ldr.w	pc, [sp], #4

000038d0 <hci_id_add>:
{
    38d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    38d2:	4607      	mov	r7, r0
    38d4:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
    38d6:	f242 0027 	movw	r0, #8231	; 0x2027
    38da:	2127      	movs	r1, #39	; 0x27
    38dc:	f7ff ff4a 	bl	3774 <bt_hci_cmd_create>
	if (!buf) {
    38e0:	4604      	mov	r4, r0
    38e2:	b1d0      	cbz	r0, 391a <hci_id_add+0x4a>
	cp = net_buf_add(buf, sizeof(*cp));
    38e4:	2127      	movs	r1, #39	; 0x27
    38e6:	3008      	adds	r0, #8
    38e8:	f015 fd60 	bl	193ac <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
    38ec:	4639      	mov	r1, r7
	cp = net_buf_add(buf, sizeof(*cp));
    38ee:	4605      	mov	r5, r0
	bt_addr_le_copy(&cp->peer_id_addr, addr);
    38f0:	f7ff fe46 	bl	3580 <bt_addr_le_copy>
	memcpy(cp->peer_irk, val, 16);
    38f4:	4631      	mov	r1, r6
    38f6:	2210      	movs	r2, #16
    38f8:	1de8      	adds	r0, r5, #7
    38fa:	f7fc ff4a 	bl	792 <memcpy>
	memset(cp->local_irk, 0, 16);
    38fe:	2210      	movs	r2, #16
    3900:	2100      	movs	r1, #0
    3902:	f105 0017 	add.w	r0, r5, #23
    3906:	f7fc ff70 	bl	7ea <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
    390a:	4621      	mov	r1, r4
    390c:	2200      	movs	r2, #0
    390e:	f242 0027 	movw	r0, #8231	; 0x2027
}
    3912:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
    3916:	f7ff bf5d 	b.w	37d4 <bt_hci_cmd_send_sync>
}
    391a:	f06f 0036 	mvn.w	r0, #54	; 0x36
    391e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00003920 <keys_add_id>:
	hci_id_add(&keys->addr, keys->irk.val);
    3920:	f100 0130 	add.w	r1, r0, #48	; 0x30
    3924:	f7ff bfd4 	b.w	38d0 <hci_id_add>

00003928 <addr_res_enable>:
{
    3928:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
    392a:	2101      	movs	r1, #1
{
    392c:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
    392e:	f242 002d 	movw	r0, #8237	; 0x202d
    3932:	f7ff ff1f 	bl	3774 <bt_hci_cmd_create>
	if (!buf) {
    3936:	4604      	mov	r4, r0
    3938:	b158      	cbz	r0, 3952 <addr_res_enable+0x2a>
	net_buf_add_u8(buf, enable);
    393a:	4629      	mov	r1, r5
    393c:	3008      	adds	r0, #8
    393e:	f015 fd44 	bl	193ca <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
    3942:	4621      	mov	r1, r4
    3944:	2200      	movs	r2, #0
    3946:	f242 002d 	movw	r0, #8237	; 0x202d
}
    394a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
    394e:	f7ff bf41 	b.w	37d4 <bt_hci_cmd_send_sync>
}
    3952:	f06f 0036 	mvn.w	r0, #54	; 0x36
    3956:	bd38      	pop	{r3, r4, r5, pc}

00003958 <set_le_scan_enable>:
{
    3958:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    395a:	2102      	movs	r1, #2
{
    395c:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    395e:	f242 000c 	movw	r0, #8204	; 0x200c
    3962:	f7ff ff07 	bl	3774 <bt_hci_cmd_create>
	if (!buf) {
    3966:	4604      	mov	r4, r0
    3968:	b328      	cbz	r0, 39b6 <set_le_scan_enable+0x5e>
	cp = net_buf_add(buf, sizeof(*cp));
    396a:	2102      	movs	r1, #2
    396c:	3008      	adds	r0, #8
    396e:	f015 fd1d 	bl	193ac <net_buf_simple_add>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    3972:	2d01      	cmp	r5, #1
	cp = net_buf_add(buf, sizeof(*cp));
    3974:	4602      	mov	r2, r0
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    3976:	d115      	bne.n	39a4 <set_le_scan_enable+0x4c>
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
    3978:	210a      	movs	r1, #10
    397a:	4810      	ldr	r0, [pc, #64]	; (39bc <set_le_scan_enable+0x64>)
    397c:	f7ff fe14 	bl	35a8 <atomic_test_bit>
    3980:	7050      	strb	r0, [r2, #1]
	cp->enable = enable;
    3982:	7015      	strb	r5, [r2, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    3984:	4621      	mov	r1, r4
    3986:	2200      	movs	r2, #0
    3988:	f242 000c 	movw	r0, #8204	; 0x200c
    398c:	f7ff ff22 	bl	37d4 <bt_hci_cmd_send_sync>
	if (err) {
    3990:	4604      	mov	r4, r0
    3992:	b928      	cbnz	r0, 39a0 <set_le_scan_enable+0x48>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    3994:	2d01      	cmp	r5, #1
    3996:	d108      	bne.n	39aa <set_le_scan_enable+0x52>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    3998:	2180      	movs	r1, #128	; 0x80
    399a:	4808      	ldr	r0, [pc, #32]	; (39bc <set_le_scan_enable+0x64>)
    399c:	f7ff fdf3 	bl	3586 <atomic_or>
}
    39a0:	4620      	mov	r0, r4
    39a2:	bd38      	pop	{r3, r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    39a4:	2300      	movs	r3, #0
    39a6:	7043      	strb	r3, [r0, #1]
    39a8:	e7eb      	b.n	3982 <set_le_scan_enable+0x2a>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    39aa:	f06f 0180 	mvn.w	r1, #128	; 0x80
    39ae:	4803      	ldr	r0, [pc, #12]	; (39bc <set_le_scan_enable+0x64>)
    39b0:	f7ff fe07 	bl	35c2 <atomic_and>
    39b4:	e7f4      	b.n	39a0 <set_le_scan_enable+0x48>
		return -ENOBUFS;
    39b6:	f06f 0436 	mvn.w	r4, #54	; 0x36
    39ba:	e7f1      	b.n	39a0 <set_le_scan_enable+0x48>
    39bc:	20009d48 	.word	0x20009d48

000039c0 <set_advertise_enable>:
{
    39c0:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    39c2:	2101      	movs	r1, #1
{
    39c4:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    39c6:	f242 000a 	movw	r0, #8202	; 0x200a
    39ca:	f7ff fed3 	bl	3774 <bt_hci_cmd_create>
	if (!buf) {
    39ce:	4604      	mov	r4, r0
    39d0:	b1d8      	cbz	r0, 3a0a <set_advertise_enable+0x4a>
    39d2:	3008      	adds	r0, #8
	if (enable) {
    39d4:	b18d      	cbz	r5, 39fa <set_advertise_enable+0x3a>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    39d6:	2101      	movs	r1, #1
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    39d8:	f015 fcf7 	bl	193ca <net_buf_simple_add_u8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    39dc:	4621      	mov	r1, r4
    39de:	2200      	movs	r2, #0
    39e0:	f242 000a 	movw	r0, #8202	; 0x200a
    39e4:	f7ff fef6 	bl	37d4 <bt_hci_cmd_send_sync>
	if (err) {
    39e8:	4604      	mov	r4, r0
    39ea:	b920      	cbnz	r0, 39f6 <set_advertise_enable+0x36>
	if (enable) {
    39ec:	b13d      	cbz	r5, 39fe <set_advertise_enable+0x3e>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    39ee:	2120      	movs	r1, #32
    39f0:	4807      	ldr	r0, [pc, #28]	; (3a10 <set_advertise_enable+0x50>)
    39f2:	f7ff fdc8 	bl	3586 <atomic_or>
}
    39f6:	4620      	mov	r0, r4
    39f8:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    39fa:	4629      	mov	r1, r5
    39fc:	e7ec      	b.n	39d8 <set_advertise_enable+0x18>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    39fe:	f06f 0120 	mvn.w	r1, #32
    3a02:	4803      	ldr	r0, [pc, #12]	; (3a10 <set_advertise_enable+0x50>)
    3a04:	f7ff fddd 	bl	35c2 <atomic_and>
    3a08:	e7f5      	b.n	39f6 <set_advertise_enable+0x36>
		return -ENOBUFS;
    3a0a:	f06f 0436 	mvn.w	r4, #54	; 0x36
    3a0e:	e7f2      	b.n	39f6 <set_advertise_enable+0x36>
    3a10:	20009d48 	.word	0x20009d48

00003a14 <set_ad>:

static int set_ad(u16_t hci_op, const struct bt_data *ad, size_t ad_len)
{
    3a14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3a18:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int i;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    3a1a:	2120      	movs	r1, #32
{
    3a1c:	4607      	mov	r7, r0
    3a1e:	4690      	mov	r8, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    3a20:	f7ff fea8 	bl	3774 <bt_hci_cmd_create>
	if (!buf) {
    3a24:	4606      	mov	r6, r0
    3a26:	2800      	cmp	r0, #0
    3a28:	d03c      	beq.n	3aa4 <set_ad+0x90>
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
    3a2a:	2120      	movs	r1, #32
    3a2c:	3008      	adds	r0, #8
    3a2e:	f015 fcbd 	bl	193ac <net_buf_simple_add>

	memset(set_data, 0, sizeof(*set_data));
    3a32:	2220      	movs	r2, #32
    3a34:	2100      	movs	r1, #0
	set_data = net_buf_add(buf, sizeof(*set_data));
    3a36:	4605      	mov	r5, r0
	memset(set_data, 0, sizeof(*set_data));
    3a38:	f7fc fed7 	bl	7ea <memset>

	for (i = 0; i < ad_len; i++) {
    3a3c:	f04f 0900 	mov.w	r9, #0
    3a40:	45c1      	cmp	r9, r8
    3a42:	d106      	bne.n	3a52 <set_ad+0x3e>
		memcpy(&set_data->data[set_data->len], ad[i].data,
		       ad[i].data_len);
		set_data->len += ad[i].data_len;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    3a44:	4631      	mov	r1, r6
    3a46:	4638      	mov	r0, r7
    3a48:	2200      	movs	r2, #0
}
    3a4a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    3a4e:	f7ff bec1 	b.w	37d4 <bt_hci_cmd_send_sync>
		if (set_data->len + ad[i].data_len + 2 > 31) {
    3a52:	7862      	ldrb	r2, [r4, #1]
    3a54:	782b      	ldrb	r3, [r5, #0]
    3a56:	18d1      	adds	r1, r2, r3
    3a58:	3102      	adds	r1, #2
    3a5a:	291f      	cmp	r1, #31
    3a5c:	f104 0408 	add.w	r4, r4, #8
    3a60:	dd06      	ble.n	3a70 <set_ad+0x5c>
			net_buf_unref(buf);
    3a62:	4630      	mov	r0, r6
    3a64:	f015 fc44 	bl	192f0 <net_buf_unref>
			return -EINVAL;
    3a68:	f06f 0015 	mvn.w	r0, #21
    3a6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		set_data->data[set_data->len++] = ad[i].data_len + 1;
    3a70:	18e9      	adds	r1, r5, r3
    3a72:	1c50      	adds	r0, r2, #1
    3a74:	7048      	strb	r0, [r1, #1]
		set_data->data[set_data->len++] = ad[i].type;
    3a76:	1c98      	adds	r0, r3, #2
    3a78:	b2c0      	uxtb	r0, r0
		set_data->data[set_data->len++] = ad[i].data_len + 1;
    3a7a:	3301      	adds	r3, #1
		set_data->data[set_data->len++] = ad[i].type;
    3a7c:	7028      	strb	r0, [r5, #0]
    3a7e:	fa55 f383 	uxtab	r3, r5, r3
    3a82:	f814 1c08 	ldrb.w	r1, [r4, #-8]
    3a86:	7059      	strb	r1, [r3, #1]
		memcpy(&set_data->data[set_data->len], ad[i].data,
    3a88:	3001      	adds	r0, #1
    3a8a:	f854 1c04 	ldr.w	r1, [r4, #-4]
    3a8e:	4428      	add	r0, r5
    3a90:	f7fc fe7f 	bl	792 <memcpy>
		set_data->len += ad[i].data_len;
    3a94:	782b      	ldrb	r3, [r5, #0]
    3a96:	f814 2c07 	ldrb.w	r2, [r4, #-7]
    3a9a:	4413      	add	r3, r2
    3a9c:	702b      	strb	r3, [r5, #0]
	for (i = 0; i < ad_len; i++) {
    3a9e:	f109 0901 	add.w	r9, r9, #1
    3aa2:	e7cd      	b.n	3a40 <set_ad+0x2c>
		return -ENOBUFS;
    3aa4:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    3aa8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00003aac <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
    3aac:	8802      	ldrh	r2, [r0, #0]
    3aae:	8843      	ldrh	r3, [r0, #2]
    3ab0:	429a      	cmp	r2, r3
{
    3ab2:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
    3ab4:	d818      	bhi.n	3ae8 <bt_le_conn_params_valid+0x3c>
    3ab6:	2a05      	cmp	r2, #5
    3ab8:	d916      	bls.n	3ae8 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
    3aba:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    3abe:	d813      	bhi.n	3ae8 <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
    3ac0:	8884      	ldrh	r4, [r0, #4]
    3ac2:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
    3ac6:	d20f      	bcs.n	3ae8 <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
    3ac8:	88c1      	ldrh	r1, [r0, #6]
    3aca:	f1a1 020a 	sub.w	r2, r1, #10
    3ace:	b292      	uxth	r2, r2
    3ad0:	f640 4076 	movw	r0, #3190	; 0xc76
    3ad4:	4282      	cmp	r2, r0
    3ad6:	d807      	bhi.n	3ae8 <bt_le_conn_params_valid+0x3c>
	     ((1 + param->latency) * param->interval_max))) {
    3ad8:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
    3adc:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
    3ae0:	bfb4      	ite	lt
    3ae2:	2001      	movlt	r0, #1
    3ae4:	2000      	movge	r0, #0
    3ae6:	bd10      	pop	{r4, pc}
		return false;
    3ae8:	2000      	movs	r0, #0
}
    3aea:	bd10      	pop	{r4, pc}

00003aec <bt_id_add>:
{
    3aec:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    3af0:	4d66      	ldr	r5, [pc, #408]	; (3c8c <bt_id_add+0x1a0>)
    3af2:	f895 30a4 	ldrb.w	r3, [r5, #164]	; 0xa4
{
    3af6:	4606      	mov	r6, r0
    3af8:	462c      	mov	r4, r5
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    3afa:	b11b      	cbz	r3, 3b04 <bt_id_add+0x18>
    3afc:	f895 20a5 	ldrb.w	r2, [r5, #165]	; 0xa5
    3b00:	429a      	cmp	r2, r3
    3b02:	d909      	bls.n	3b18 <bt_id_add+0x2c>
		bt_dev.le.rl_entries++;
    3b04:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
    3b08:	3301      	adds	r3, #1
    3b0a:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
		return 0;
    3b0e:	2500      	movs	r5, #0
}
    3b10:	4628      	mov	r0, r5
    3b12:	b004      	add	sp, #16
    3b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT);
    3b18:	2102      	movs	r1, #2
    3b1a:	2000      	movs	r0, #0
    3b1c:	f002 fcbe 	bl	649c <bt_conn_lookup_state_le>
	if (conn) {
    3b20:	4680      	mov	r8, r0
    3b22:	b180      	cbz	r0, 3b46 <bt_id_add+0x5a>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    3b24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    3b28:	f105 0070 	add.w	r0, r5, #112	; 0x70
    3b2c:	f7ff fd2b 	bl	3586 <atomic_or>
    3b30:	2104      	movs	r1, #4
    3b32:	f106 0008 	add.w	r0, r6, #8
    3b36:	f7ff fd26 	bl	3586 <atomic_or>
		bt_conn_unref(conn);
    3b3a:	4640      	mov	r0, r8
    3b3c:	f002 fcd0 	bl	64e0 <bt_conn_unref>
		return -EAGAIN;
    3b40:	f06f 050a 	mvn.w	r5, #10
    3b44:	e7e4      	b.n	3b10 <bt_id_add+0x24>
	adv_enabled = atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING);
    3b46:	2105      	movs	r1, #5
    3b48:	f105 0070 	add.w	r0, r5, #112	; 0x70
    3b4c:	f7ff fd2c 	bl	35a8 <atomic_test_bit>
	if (adv_enabled) {
    3b50:	4607      	mov	r7, r0
    3b52:	b110      	cbz	r0, 3b5a <bt_id_add+0x6e>
		set_advertise_enable(false);
    3b54:	4640      	mov	r0, r8
    3b56:	f7ff ff33 	bl	39c0 <set_advertise_enable>
	scan_enabled = atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING);
    3b5a:	2107      	movs	r1, #7
    3b5c:	484c      	ldr	r0, [pc, #304]	; (3c90 <bt_id_add+0x1a4>)
    3b5e:	f7ff fd23 	bl	35a8 <atomic_test_bit>
	if (scan_enabled) {
    3b62:	4680      	mov	r8, r0
    3b64:	b110      	cbz	r0, 3b6c <bt_id_add+0x80>
		set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    3b66:	2000      	movs	r0, #0
    3b68:	f7ff fef6 	bl	3958 <set_le_scan_enable>
	if (bt_dev.le.rl_entries) {
    3b6c:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
    3b70:	b1e3      	cbz	r3, 3bac <bt_id_add+0xc0>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    3b72:	2000      	movs	r0, #0
    3b74:	f7ff fed8 	bl	3928 <addr_res_enable>
		if (err) {
    3b78:	4605      	mov	r5, r0
    3b7a:	b1b8      	cbz	r0, 3bac <bt_id_add+0xc0>
			BT_WARN("Failed to disable address resolution");
    3b7c:	4b45      	ldr	r3, [pc, #276]	; (3c94 <bt_id_add+0x1a8>)
    3b7e:	9301      	str	r3, [sp, #4]
    3b80:	9300      	str	r3, [sp, #0]
    3b82:	4a45      	ldr	r2, [pc, #276]	; (3c98 <bt_id_add+0x1ac>)
    3b84:	4b45      	ldr	r3, [pc, #276]	; (3c9c <bt_id_add+0x1b0>)
    3b86:	4946      	ldr	r1, [pc, #280]	; (3ca0 <bt_id_add+0x1b4>)
    3b88:	4846      	ldr	r0, [pc, #280]	; (3ca4 <bt_id_add+0x1b8>)
			BT_ERR("Failed to clear resolution list");
    3b8a:	f7fe fb89 	bl	22a0 <printk>
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    3b8e:	2001      	movs	r0, #1
    3b90:	f7ff feca 	bl	3928 <addr_res_enable>
	if (scan_enabled) {
    3b94:	f1b8 0f00 	cmp.w	r8, #0
    3b98:	d002      	beq.n	3ba0 <bt_id_add+0xb4>
		set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
    3b9a:	2001      	movs	r0, #1
    3b9c:	f7ff fedc 	bl	3958 <set_le_scan_enable>
	if (adv_enabled) {
    3ba0:	2f00      	cmp	r7, #0
    3ba2:	d0b5      	beq.n	3b10 <bt_id_add+0x24>
		set_advertise_enable(true);
    3ba4:	2001      	movs	r0, #1
    3ba6:	f7ff ff0b 	bl	39c0 <set_advertise_enable>
    3baa:	e7b1      	b.n	3b10 <bt_id_add+0x24>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
    3bac:	f894 20a5 	ldrb.w	r2, [r4, #165]	; 0xa5
    3bb0:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    3bb4:	429a      	cmp	r2, r3
    3bb6:	d11d      	bne.n	3bf4 <bt_id_add+0x108>
		BT_WARN("Resolving list size exceeded. Switching to host.");
    3bb8:	4e36      	ldr	r6, [pc, #216]	; (3c94 <bt_id_add+0x1a8>)
    3bba:	4b38      	ldr	r3, [pc, #224]	; (3c9c <bt_id_add+0x1b0>)
    3bbc:	4a36      	ldr	r2, [pc, #216]	; (3c98 <bt_id_add+0x1ac>)
    3bbe:	4938      	ldr	r1, [pc, #224]	; (3ca0 <bt_id_add+0x1b4>)
    3bc0:	9601      	str	r6, [sp, #4]
    3bc2:	9600      	str	r6, [sp, #0]
    3bc4:	4838      	ldr	r0, [pc, #224]	; (3ca8 <bt_id_add+0x1bc>)
    3bc6:	f7fe fb6b 	bl	22a0 <printk>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
    3bca:	2200      	movs	r2, #0
    3bcc:	4611      	mov	r1, r2
    3bce:	f242 0029 	movw	r0, #8233	; 0x2029
    3bd2:	f7ff fdff 	bl	37d4 <bt_hci_cmd_send_sync>
		if (err) {
    3bd6:	4605      	mov	r5, r0
    3bd8:	b130      	cbz	r0, 3be8 <bt_id_add+0xfc>
			BT_ERR("Failed to clear resolution list");
    3bda:	9601      	str	r6, [sp, #4]
    3bdc:	9600      	str	r6, [sp, #0]
    3bde:	4b2f      	ldr	r3, [pc, #188]	; (3c9c <bt_id_add+0x1b0>)
    3be0:	4a32      	ldr	r2, [pc, #200]	; (3cac <bt_id_add+0x1c0>)
    3be2:	492f      	ldr	r1, [pc, #188]	; (3ca0 <bt_id_add+0x1b4>)
    3be4:	4832      	ldr	r0, [pc, #200]	; (3cb0 <bt_id_add+0x1c4>)
    3be6:	e7d0      	b.n	3b8a <bt_id_add+0x9e>
		bt_dev.le.rl_entries++;
    3be8:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
    3bec:	3301      	adds	r3, #1
    3bee:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
    3bf2:	e7cc      	b.n	3b8e <bt_id_add+0xa2>
	err = hci_id_add(&keys->addr, keys->irk.val);
    3bf4:	f106 0130 	add.w	r1, r6, #48	; 0x30
    3bf8:	4630      	mov	r0, r6
    3bfa:	f7ff fe69 	bl	38d0 <hci_id_add>
	if (err) {
    3bfe:	4605      	mov	r5, r0
    3c00:	b138      	cbz	r0, 3c12 <bt_id_add+0x126>
		BT_ERR("Failed to add IRK to controller");
    3c02:	4b24      	ldr	r3, [pc, #144]	; (3c94 <bt_id_add+0x1a8>)
    3c04:	9301      	str	r3, [sp, #4]
    3c06:	9300      	str	r3, [sp, #0]
    3c08:	4a28      	ldr	r2, [pc, #160]	; (3cac <bt_id_add+0x1c0>)
    3c0a:	4b24      	ldr	r3, [pc, #144]	; (3c9c <bt_id_add+0x1b0>)
    3c0c:	4924      	ldr	r1, [pc, #144]	; (3ca0 <bt_id_add+0x1b4>)
    3c0e:	4829      	ldr	r0, [pc, #164]	; (3cb4 <bt_id_add+0x1c8>)
    3c10:	e7bb      	b.n	3b8a <bt_id_add+0x9e>
	bt_dev.le.rl_entries++;
    3c12:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
    3c16:	3301      	adds	r3, #1
    3c18:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
    3c1c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    3c20:	075b      	lsls	r3, r3, #29
    3c22:	d407      	bmi.n	3c34 <bt_id_add+0x148>
		BT_WARN("Set privacy mode command is not supported");
    3c24:	4b1b      	ldr	r3, [pc, #108]	; (3c94 <bt_id_add+0x1a8>)
    3c26:	9301      	str	r3, [sp, #4]
    3c28:	9300      	str	r3, [sp, #0]
    3c2a:	4a1b      	ldr	r2, [pc, #108]	; (3c98 <bt_id_add+0x1ac>)
    3c2c:	4b22      	ldr	r3, [pc, #136]	; (3cb8 <bt_id_add+0x1cc>)
    3c2e:	491c      	ldr	r1, [pc, #112]	; (3ca0 <bt_id_add+0x1b4>)
    3c30:	4822      	ldr	r0, [pc, #136]	; (3cbc <bt_id_add+0x1d0>)
    3c32:	e7aa      	b.n	3b8a <bt_id_add+0x9e>
	bt_addr_le_copy(&cp.id_addr, addr);
    3c34:	4631      	mov	r1, r6
    3c36:	a802      	add	r0, sp, #8
    3c38:	f7ff fca2 	bl	3580 <bt_addr_le_copy>
	cp.mode = mode;
    3c3c:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    3c3e:	2108      	movs	r1, #8
    3c40:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
    3c44:	f88d 300f 	strb.w	r3, [sp, #15]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    3c48:	f7ff fd94 	bl	3774 <bt_hci_cmd_create>
	if (!buf) {
    3c4c:	4604      	mov	r4, r0
    3c4e:	b1c8      	cbz	r0, 3c84 <bt_id_add+0x198>
	net_buf_add_mem(buf, &cp, sizeof(cp));
    3c50:	2208      	movs	r2, #8
    3c52:	eb0d 0102 	add.w	r1, sp, r2
    3c56:	4410      	add	r0, r2
    3c58:	f015 fbae 	bl	193b8 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
    3c5c:	4621      	mov	r1, r4
    3c5e:	462a      	mov	r2, r5
    3c60:	f242 004e 	movw	r0, #8270	; 0x204e
    3c64:	f7ff fdb6 	bl	37d4 <bt_hci_cmd_send_sync>
	if (err) {
    3c68:	4604      	mov	r4, r0
    3c6a:	2800      	cmp	r0, #0
    3c6c:	d08f      	beq.n	3b8e <bt_id_add+0xa2>
		BT_ERR("Failed to set privacy mode");
    3c6e:	4b09      	ldr	r3, [pc, #36]	; (3c94 <bt_id_add+0x1a8>)
    3c70:	9301      	str	r3, [sp, #4]
    3c72:	9300      	str	r3, [sp, #0]
    3c74:	4a0d      	ldr	r2, [pc, #52]	; (3cac <bt_id_add+0x1c0>)
    3c76:	4b09      	ldr	r3, [pc, #36]	; (3c9c <bt_id_add+0x1b0>)
    3c78:	4909      	ldr	r1, [pc, #36]	; (3ca0 <bt_id_add+0x1b4>)
    3c7a:	4811      	ldr	r0, [pc, #68]	; (3cc0 <bt_id_add+0x1d4>)
    3c7c:	f7fe fb10 	bl	22a0 <printk>
    3c80:	4625      	mov	r5, r4
    3c82:	e784      	b.n	3b8e <bt_id_add+0xa2>
		return -ENOBUFS;
    3c84:	f06f 0436 	mvn.w	r4, #54	; 0x36
    3c88:	e7f1      	b.n	3c6e <bt_id_add+0x182>
    3c8a:	bf00      	nop
    3c8c:	20009cd8 	.word	0x20009cd8
    3c90:	20009d48 	.word	0x20009d48
    3c94:	00023dbe 	.word	0x00023dbe
    3c98:	00024016 	.word	0x00024016
    3c9c:	00023594 	.word	0x00023594
    3ca0:	000272e8 	.word	0x000272e8
    3ca4:	0002374c 	.word	0x0002374c
    3ca8:	00023781 	.word	0x00023781
    3cac:	00022d86 	.word	0x00022d86
    3cb0:	000237c2 	.word	0x000237c2
    3cb4:	000237f2 	.word	0x000237f2
    3cb8:	00023580 	.word	0x00023580
    3cbc:	00023822 	.word	0x00023822
    3cc0:	0002385c 	.word	0x0002385c

00003cc4 <bt_id_del>:
{
    3cc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (!bt_dev.le.rl_size ||
    3cc8:	4c4d      	ldr	r4, [pc, #308]	; (3e00 <bt_id_del+0x13c>)
    3cca:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
{
    3cce:	b085      	sub	sp, #20
    3cd0:	4606      	mov	r6, r0
    3cd2:	4625      	mov	r5, r4
	if (!bt_dev.le.rl_size ||
    3cd4:	b123      	cbz	r3, 3ce0 <bt_id_del+0x1c>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
    3cd6:	f894 20a5 	ldrb.w	r2, [r4, #165]	; 0xa5
    3cda:	3301      	adds	r3, #1
	if (!bt_dev.le.rl_size ||
    3cdc:	429a      	cmp	r2, r3
    3cde:	dd09      	ble.n	3cf4 <bt_id_del+0x30>
		bt_dev.le.rl_entries--;
    3ce0:	f895 30a5 	ldrb.w	r3, [r5, #165]	; 0xa5
    3ce4:	3b01      	subs	r3, #1
    3ce6:	f885 30a5 	strb.w	r3, [r5, #165]	; 0xa5
		return 0;
    3cea:	2400      	movs	r4, #0
}
    3cec:	4620      	mov	r0, r4
    3cee:	b005      	add	sp, #20
    3cf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT);
    3cf4:	2102      	movs	r1, #2
    3cf6:	2000      	movs	r0, #0
    3cf8:	f002 fbd0 	bl	649c <bt_conn_lookup_state_le>
	if (conn) {
    3cfc:	4680      	mov	r8, r0
    3cfe:	b178      	cbz	r0, 3d20 <bt_id_del+0x5c>
    3d00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    3d04:	f104 0070 	add.w	r0, r4, #112	; 0x70
    3d08:	f7ff fc3d 	bl	3586 <atomic_or>
    3d0c:	2108      	movs	r1, #8
    3d0e:	1870      	adds	r0, r6, r1
    3d10:	f7ff fc39 	bl	3586 <atomic_or>
		bt_conn_unref(conn);
    3d14:	4640      	mov	r0, r8
    3d16:	f002 fbe3 	bl	64e0 <bt_conn_unref>
		return -EAGAIN;
    3d1a:	f06f 040a 	mvn.w	r4, #10
    3d1e:	e7e5      	b.n	3cec <bt_id_del+0x28>
	adv_enabled = atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING);
    3d20:	2105      	movs	r1, #5
    3d22:	f104 0070 	add.w	r0, r4, #112	; 0x70
    3d26:	f7ff fc3f 	bl	35a8 <atomic_test_bit>
	if (adv_enabled) {
    3d2a:	4607      	mov	r7, r0
    3d2c:	b110      	cbz	r0, 3d34 <bt_id_del+0x70>
		set_advertise_enable(false);
    3d2e:	4640      	mov	r0, r8
    3d30:	f7ff fe46 	bl	39c0 <set_advertise_enable>
	scan_enabled = atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING);
    3d34:	2107      	movs	r1, #7
    3d36:	4833      	ldr	r0, [pc, #204]	; (3e04 <bt_id_del+0x140>)
    3d38:	f7ff fc36 	bl	35a8 <atomic_test_bit>
	if (scan_enabled) {
    3d3c:	4680      	mov	r8, r0
    3d3e:	b110      	cbz	r0, 3d46 <bt_id_del+0x82>
		set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    3d40:	2000      	movs	r0, #0
    3d42:	f7ff fe09 	bl	3958 <set_le_scan_enable>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    3d46:	2000      	movs	r0, #0
    3d48:	f7ff fdee 	bl	3928 <addr_res_enable>
	if (err) {
    3d4c:	4604      	mov	r4, r0
    3d4e:	b1d8      	cbz	r0, 3d88 <bt_id_del+0xc4>
		BT_ERR("Disabling address resolution failed (err %d)", err);
    3d50:	4b2d      	ldr	r3, [pc, #180]	; (3e08 <bt_id_del+0x144>)
    3d52:	9302      	str	r3, [sp, #8]
    3d54:	e88d 0018 	stmia.w	sp, {r3, r4}
    3d58:	4a2c      	ldr	r2, [pc, #176]	; (3e0c <bt_id_del+0x148>)
    3d5a:	4b2d      	ldr	r3, [pc, #180]	; (3e10 <bt_id_del+0x14c>)
    3d5c:	492d      	ldr	r1, [pc, #180]	; (3e14 <bt_id_del+0x150>)
    3d5e:	482e      	ldr	r0, [pc, #184]	; (3e18 <bt_id_del+0x154>)
    3d60:	f7fe fa9e 	bl	22a0 <printk>
	if (bt_dev.le.rl_entries) {
    3d64:	f895 30a5 	ldrb.w	r3, [r5, #165]	; 0xa5
    3d68:	b113      	cbz	r3, 3d70 <bt_id_del+0xac>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    3d6a:	2001      	movs	r0, #1
    3d6c:	f7ff fddc 	bl	3928 <addr_res_enable>
	if (scan_enabled) {
    3d70:	f1b8 0f00 	cmp.w	r8, #0
    3d74:	d002      	beq.n	3d7c <bt_id_del+0xb8>
		set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
    3d76:	2001      	movs	r0, #1
    3d78:	f7ff fdee 	bl	3958 <set_le_scan_enable>
	if (adv_enabled) {
    3d7c:	2f00      	cmp	r7, #0
    3d7e:	d0b5      	beq.n	3cec <bt_id_del+0x28>
		set_advertise_enable(true);
    3d80:	2001      	movs	r0, #1
    3d82:	f7ff fe1d 	bl	39c0 <set_advertise_enable>
    3d86:	e7b1      	b.n	3cec <bt_id_del+0x28>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    3d88:	f895 30a5 	ldrb.w	r3, [r5, #165]	; 0xa5
    3d8c:	f895 20a4 	ldrb.w	r2, [r5, #164]	; 0xa4
    3d90:	429a      	cmp	r2, r3
    3d92:	d20b      	bcs.n	3dac <bt_id_del+0xe8>
		bt_dev.le.rl_entries--;
    3d94:	3b01      	subs	r3, #1
    3d96:	f885 30a5 	strb.w	r3, [r5, #165]	; 0xa5
		keys->keys &= ~BT_KEYS_IRK;
    3d9a:	89b3      	ldrh	r3, [r6, #12]
		bt_keys_foreach(BT_KEYS_IRK, keys_add_id);
    3d9c:	491f      	ldr	r1, [pc, #124]	; (3e1c <bt_id_del+0x158>)
		keys->keys &= ~BT_KEYS_IRK;
    3d9e:	f023 0302 	bic.w	r3, r3, #2
    3da2:	81b3      	strh	r3, [r6, #12]
		bt_keys_foreach(BT_KEYS_IRK, keys_add_id);
    3da4:	2002      	movs	r0, #2
    3da6:	f007 fc89 	bl	b6bc <bt_keys_foreach>
    3daa:	e7db      	b.n	3d64 <bt_id_del+0xa0>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
    3dac:	2107      	movs	r1, #7
    3dae:	f242 0028 	movw	r0, #8232	; 0x2028
    3db2:	f7ff fcdf 	bl	3774 <bt_hci_cmd_create>
	if (!buf) {
    3db6:	4681      	mov	r9, r0
    3db8:	b1f0      	cbz	r0, 3df8 <bt_id_del+0x134>
	cp = net_buf_add(buf, sizeof(*cp));
    3dba:	2107      	movs	r1, #7
    3dbc:	3008      	adds	r0, #8
    3dbe:	f015 faf5 	bl	193ac <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, &keys->addr);
    3dc2:	4631      	mov	r1, r6
    3dc4:	f7ff fbdc 	bl	3580 <bt_addr_le_copy>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
    3dc8:	4622      	mov	r2, r4
    3dca:	4649      	mov	r1, r9
    3dcc:	f242 0028 	movw	r0, #8232	; 0x2028
    3dd0:	f7ff fd00 	bl	37d4 <bt_hci_cmd_send_sync>
	if (err) {
    3dd4:	4604      	mov	r4, r0
    3dd6:	b148      	cbz	r0, 3dec <bt_id_del+0x128>
		BT_ERR("Failed to remove IRK from controller");
    3dd8:	4b0b      	ldr	r3, [pc, #44]	; (3e08 <bt_id_del+0x144>)
    3dda:	9301      	str	r3, [sp, #4]
    3ddc:	9300      	str	r3, [sp, #0]
    3dde:	4a0b      	ldr	r2, [pc, #44]	; (3e0c <bt_id_del+0x148>)
    3de0:	4b0b      	ldr	r3, [pc, #44]	; (3e10 <bt_id_del+0x14c>)
    3de2:	490c      	ldr	r1, [pc, #48]	; (3e14 <bt_id_del+0x150>)
    3de4:	480e      	ldr	r0, [pc, #56]	; (3e20 <bt_id_del+0x15c>)
    3de6:	f7fe fa5b 	bl	22a0 <printk>
    3dea:	e7bb      	b.n	3d64 <bt_id_del+0xa0>
	bt_dev.le.rl_entries--;
    3dec:	f895 30a5 	ldrb.w	r3, [r5, #165]	; 0xa5
    3df0:	3b01      	subs	r3, #1
    3df2:	f885 30a5 	strb.w	r3, [r5, #165]	; 0xa5
    3df6:	e7b5      	b.n	3d64 <bt_id_del+0xa0>
		err = -ENOBUFS;
    3df8:	f06f 0436 	mvn.w	r4, #54	; 0x36
    3dfc:	e7b2      	b.n	3d64 <bt_id_del+0xa0>
    3dfe:	bf00      	nop
    3e00:	20009cd8 	.word	0x20009cd8
    3e04:	20009d48 	.word	0x20009d48
    3e08:	00023dbe 	.word	0x00023dbe
    3e0c:	00022d86 	.word	0x00022d86
    3e10:	0002359e 	.word	0x0002359e
    3e14:	000272e8 	.word	0x000272e8
    3e18:	00023887 	.word	0x00023887
    3e1c:	00003921 	.word	0x00003921
    3e20:	000238c4 	.word	0x000238c4

00003e24 <update_pending_id>:
{
    3e24:	b538      	push	{r3, r4, r5, lr}
	if (atomic_test_and_clear_bit(keys->flags, BT_KEYS_ID_PENDING_ADD)) {
    3e26:	f100 0508 	add.w	r5, r0, #8
{
    3e2a:	4604      	mov	r4, r0
	if (atomic_test_and_clear_bit(keys->flags, BT_KEYS_ID_PENDING_ADD)) {
    3e2c:	2102      	movs	r1, #2
    3e2e:	4628      	mov	r0, r5
    3e30:	f7ff fbd8 	bl	35e4 <atomic_test_and_clear_bit>
    3e34:	b120      	cbz	r0, 3e40 <update_pending_id+0x1c>
		bt_id_add(keys);
    3e36:	4620      	mov	r0, r4
}
    3e38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_id_add(keys);
    3e3c:	f7ff be56 	b.w	3aec <bt_id_add>
	if (atomic_test_and_clear_bit(keys->flags, BT_KEYS_ID_PENDING_DEL)) {
    3e40:	2103      	movs	r1, #3
    3e42:	4628      	mov	r0, r5
    3e44:	f7ff fbce 	bl	35e4 <atomic_test_and_clear_bit>
    3e48:	b120      	cbz	r0, 3e54 <update_pending_id+0x30>
		bt_id_del(keys);
    3e4a:	4620      	mov	r0, r4
}
    3e4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_id_del(keys);
    3e50:	f7ff bf38 	b.w	3cc4 <bt_id_del>
    3e54:	bd38      	pop	{r3, r4, r5, pc}

00003e56 <bt_addr_le_create_static>:
	addr->type = BT_ADDR_LE_RANDOM;
    3e56:	2301      	movs	r3, #1
{
    3e58:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
    3e5a:	2106      	movs	r1, #6
{
    3e5c:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
    3e5e:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
    3e62:	f008 fcf7 	bl	c854 <bt_rand>
	if (err) {
    3e66:	b918      	cbnz	r0, 3e70 <bt_addr_le_create_static+0x1a>
	BT_ADDR_SET_STATIC(&addr->a);
    3e68:	79a3      	ldrb	r3, [r4, #6]
    3e6a:	f063 033f 	orn	r3, r3, #63	; 0x3f
    3e6e:	71a3      	strb	r3, [r4, #6]
}
    3e70:	bd10      	pop	{r4, pc}
	...

00003e74 <bt_send>:
	return bt_dev.drv->send(buf);
    3e74:	4b02      	ldr	r3, [pc, #8]	; (3e80 <bt_send+0xc>)
    3e76:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    3e7a:	68db      	ldr	r3, [r3, #12]
    3e7c:	4718      	bx	r3
    3e7e:	bf00      	nop
    3e80:	20009cd8 	.word	0x20009cd8

00003e84 <bt_hci_cmd_send>:
{
    3e84:	b530      	push	{r4, r5, lr}
    3e86:	4604      	mov	r4, r0
    3e88:	b085      	sub	sp, #20
	if (!buf) {
    3e8a:	460d      	mov	r5, r1
    3e8c:	b919      	cbnz	r1, 3e96 <bt_hci_cmd_send+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
    3e8e:	f7ff fc71 	bl	3774 <bt_hci_cmd_create>
		if (!buf) {
    3e92:	4605      	mov	r5, r0
    3e94:	b1f0      	cbz	r0, 3ed4 <bt_hci_cmd_send+0x50>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    3e96:	f640 4335 	movw	r3, #3125	; 0xc35
    3e9a:	429c      	cmp	r4, r3
    3e9c:	d114      	bne.n	3ec8 <bt_hci_cmd_send+0x44>
		err = bt_send(buf);
    3e9e:	4628      	mov	r0, r5
    3ea0:	f7ff ffe8 	bl	3e74 <bt_send>
		if (err) {
    3ea4:	4604      	mov	r4, r0
    3ea6:	b160      	cbz	r0, 3ec2 <bt_hci_cmd_send+0x3e>
			BT_ERR("Unable to send to driver (err %d)", err);
    3ea8:	4b0c      	ldr	r3, [pc, #48]	; (3edc <bt_hci_cmd_send+0x58>)
    3eaa:	9302      	str	r3, [sp, #8]
    3eac:	e88d 0018 	stmia.w	sp, {r3, r4}
    3eb0:	4a0b      	ldr	r2, [pc, #44]	; (3ee0 <bt_hci_cmd_send+0x5c>)
    3eb2:	4b0c      	ldr	r3, [pc, #48]	; (3ee4 <bt_hci_cmd_send+0x60>)
    3eb4:	490c      	ldr	r1, [pc, #48]	; (3ee8 <bt_hci_cmd_send+0x64>)
    3eb6:	480d      	ldr	r0, [pc, #52]	; (3eec <bt_hci_cmd_send+0x68>)
    3eb8:	f7fe f9f2 	bl	22a0 <printk>
			net_buf_unref(buf);
    3ebc:	4628      	mov	r0, r5
    3ebe:	f015 fa17 	bl	192f0 <net_buf_unref>
}
    3ec2:	4620      	mov	r0, r4
    3ec4:	b005      	add	sp, #20
    3ec6:	bd30      	pop	{r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    3ec8:	4629      	mov	r1, r5
    3eca:	4809      	ldr	r0, [pc, #36]	; (3ef0 <bt_hci_cmd_send+0x6c>)
    3ecc:	f015 fa03 	bl	192d6 <net_buf_put>
	return 0;
    3ed0:	2400      	movs	r4, #0
    3ed2:	e7f6      	b.n	3ec2 <bt_hci_cmd_send+0x3e>
			return -ENOBUFS;
    3ed4:	f06f 0436 	mvn.w	r4, #54	; 0x36
    3ed8:	e7f3      	b.n	3ec2 <bt_hci_cmd_send+0x3e>
    3eda:	bf00      	nop
    3edc:	00023dbe 	.word	0x00023dbe
    3ee0:	00022d86 	.word	0x00022d86
    3ee4:	000234b8 	.word	0x000234b8
    3ee8:	000272e8 	.word	0x000272e8
    3eec:	0002371a 	.word	0x0002371a
    3ef0:	20009dac 	.word	0x20009dac

00003ef4 <start_le_scan>:
{
    3ef4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    3ef6:	4605      	mov	r5, r0
    3ef8:	460e      	mov	r6, r1
    3efa:	4614      	mov	r4, r2
	memset(&set_param, 0, sizeof(set_param));
    3efc:	2100      	movs	r1, #0
    3efe:	2207      	movs	r2, #7
    3f00:	4668      	mov	r0, sp
    3f02:	f7fc fc72 	bl	7ea <memset>
		set_param.addr_type =  bt_dev.id_addr.type;
    3f06:	4821      	ldr	r0, [pc, #132]	; (3f8c <start_le_scan+0x98>)
	set_param.scan_type = scan_type;
    3f08:	f88d 5000 	strb.w	r5, [sp]
	set_param.filter_policy = 0x00;
    3f0c:	2300      	movs	r3, #0
    3f0e:	f88d 3006 	strb.w	r3, [sp, #6]
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    3f12:	2d01      	cmp	r5, #1
		set_param.addr_type =  bt_dev.id_addr.type;
    3f14:	7803      	ldrb	r3, [r0, #0]
	set_param.interval = sys_cpu_to_le16(interval);
    3f16:	f8ad 6001 	strh.w	r6, [sp, #1]
	set_param.window = sys_cpu_to_le16(window);
    3f1a:	f8ad 4003 	strh.w	r4, [sp, #3]
		set_param.addr_type =  bt_dev.id_addr.type;
    3f1e:	f88d 3005 	strb.w	r3, [sp, #5]
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    3f22:	d10a      	bne.n	3f3a <start_le_scan+0x46>
		    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    3f24:	2105      	movs	r1, #5
    3f26:	3070      	adds	r0, #112	; 0x70
    3f28:	f7ff fb3e 	bl	35a8 <atomic_test_bit>
		    scan_type == BT_HCI_LE_SCAN_ACTIVE &&
    3f2c:	b928      	cbnz	r0, 3f3a <start_le_scan+0x46>
			err = le_set_private_addr();
    3f2e:	f7ff fcbd 	bl	38ac <le_set_private_addr>
			if (err) {
    3f32:	4604      	mov	r4, r0
    3f34:	b9f0      	cbnz	r0, 3f74 <start_le_scan+0x80>
			set_param.addr_type = BT_ADDR_LE_RANDOM;
    3f36:	f88d 5005 	strb.w	r5, [sp, #5]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    3f3a:	2107      	movs	r1, #7
    3f3c:	f242 000b 	movw	r0, #8203	; 0x200b
    3f40:	f7ff fc18 	bl	3774 <bt_hci_cmd_create>
	if (!buf) {
    3f44:	4604      	mov	r4, r0
    3f46:	b1f0      	cbz	r0, 3f86 <start_le_scan+0x92>
	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    3f48:	2207      	movs	r2, #7
    3f4a:	4669      	mov	r1, sp
    3f4c:	3008      	adds	r0, #8
    3f4e:	f015 fa33 	bl	193b8 <net_buf_simple_add_mem>
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_SCAN_PARAM, buf);
    3f52:	4621      	mov	r1, r4
    3f54:	f242 000b 	movw	r0, #8203	; 0x200b
    3f58:	f7ff ff94 	bl	3e84 <bt_hci_cmd_send>
	err = set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
    3f5c:	2001      	movs	r0, #1
    3f5e:	f7ff fcfb 	bl	3958 <set_le_scan_enable>
	if (err) {
    3f62:	4604      	mov	r4, r0
    3f64:	b930      	cbnz	r0, 3f74 <start_le_scan+0x80>
	if (scan_type == BT_HCI_LE_SCAN_ACTIVE) {
    3f66:	2d01      	cmp	r5, #1
    3f68:	d107      	bne.n	3f7a <start_le_scan+0x86>
    3f6a:	f44f 7100 	mov.w	r1, #512	; 0x200
    3f6e:	4808      	ldr	r0, [pc, #32]	; (3f90 <start_le_scan+0x9c>)
    3f70:	f7ff fb09 	bl	3586 <atomic_or>
}
    3f74:	4620      	mov	r0, r4
    3f76:	b002      	add	sp, #8
    3f78:	bd70      	pop	{r4, r5, r6, pc}
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3f7a:	f46f 7100 	mvn.w	r1, #512	; 0x200
    3f7e:	4804      	ldr	r0, [pc, #16]	; (3f90 <start_le_scan+0x9c>)
    3f80:	f7ff fb1f 	bl	35c2 <atomic_and>
    3f84:	e7f6      	b.n	3f74 <start_le_scan+0x80>
		return -ENOBUFS;
    3f86:	f06f 0436 	mvn.w	r4, #54	; 0x36
    3f8a:	e7f3      	b.n	3f74 <start_le_scan+0x80>
    3f8c:	20009cd8 	.word	0x20009cd8
    3f90:	20009d48 	.word	0x20009d48

00003f94 <bt_le_scan_update>:
{
    3f94:	b538      	push	{r3, r4, r5, lr}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    3f96:	2108      	movs	r1, #8
{
    3f98:	4605      	mov	r5, r0
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    3f9a:	4816      	ldr	r0, [pc, #88]	; (3ff4 <bt_le_scan_update+0x60>)
    3f9c:	f7ff fb04 	bl	35a8 <atomic_test_bit>
    3fa0:	4602      	mov	r2, r0
    3fa2:	b108      	cbz	r0, 3fa8 <bt_le_scan_update+0x14>
		return 0;
    3fa4:	2000      	movs	r0, #0
    3fa6:	bd38      	pop	{r3, r4, r5, pc}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    3fa8:	2107      	movs	r1, #7
    3faa:	4812      	ldr	r0, [pc, #72]	; (3ff4 <bt_le_scan_update+0x60>)
    3fac:	f7ff fafc 	bl	35a8 <atomic_test_bit>
    3fb0:	b9d0      	cbnz	r0, 3fe8 <bt_le_scan_update+0x54>
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT_SCAN);
    3fb2:	2101      	movs	r1, #1
    3fb4:	2000      	movs	r0, #0
    3fb6:	f002 fa71 	bl	649c <bt_conn_lookup_state_le>
		if (!conn) {
    3fba:	4604      	mov	r4, r0
    3fbc:	2800      	cmp	r0, #0
    3fbe:	d0f1      	beq.n	3fa4 <bt_le_scan_update+0x10>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    3fc0:	f44f 6180 	mov.w	r1, #1024	; 0x400
    3fc4:	480b      	ldr	r0, [pc, #44]	; (3ff4 <bt_le_scan_update+0x60>)
    3fc6:	f7ff fade 	bl	3586 <atomic_or>
		bt_conn_unref(conn);
    3fca:	4620      	mov	r0, r4
    3fcc:	f002 fa88 	bl	64e0 <bt_conn_unref>
			window = BT_GAP_SCAN_SLOW_WINDOW_1;
    3fd0:	2d00      	cmp	r5, #0
		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    3fd2:	bf15      	itete	ne
    3fd4:	2230      	movne	r2, #48	; 0x30
    3fd6:	2212      	moveq	r2, #18
    3fd8:	2160      	movne	r1, #96	; 0x60
    3fda:	f44f 6100 	moveq.w	r1, #2048	; 0x800
    3fde:	2000      	movs	r0, #0
}
    3fe0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    3fe4:	f7ff bf86 	b.w	3ef4 <start_le_scan>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    3fe8:	4610      	mov	r0, r2
    3fea:	f7ff fcb5 	bl	3958 <set_le_scan_enable>
		if (err) {
    3fee:	2800      	cmp	r0, #0
    3ff0:	d0df      	beq.n	3fb2 <bt_le_scan_update+0x1e>
    3ff2:	bd38      	pop	{r3, r4, r5, pc}
    3ff4:	20009d48 	.word	0x20009d48

00003ff8 <bt_init>:
{
    3ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3ffc:	b08e      	sub	sp, #56	; 0x38
	err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    3ffe:	aa0c      	add	r2, sp, #48	; 0x30
    4000:	2100      	movs	r1, #0
    4002:	f640 4003 	movw	r0, #3075	; 0xc03
    4006:	f7ff fbe5 	bl	37d4 <bt_hci_cmd_send_sync>
	if (err) {
    400a:	4604      	mov	r4, r0
    400c:	2800      	cmp	r0, #0
    400e:	d17e      	bne.n	410e <bt_init+0x116>
	u8_t status = buf->data[0];
    4010:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4012:	689b      	ldr	r3, [r3, #8]
	if (status) {
    4014:	781b      	ldrb	r3, [r3, #0]
    4016:	b96b      	cbnz	r3, 4034 <bt_init+0x3c>
	scan_dev_found_cb = NULL;
    4018:	4a3f      	ldr	r2, [pc, #252]	; (4118 <bt_init+0x120>)
    401a:	6013      	str	r3, [r2, #0]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    401c:	4b3f      	ldr	r3, [pc, #252]	; (411c <bt_init+0x124>)
    401e:	f3bf 8f5b 	dmb	ish
    4022:	2201      	movs	r2, #1
    4024:	e853 1f00 	ldrex	r1, [r3]
    4028:	e843 2000 	strex	r0, r2, [r3]
    402c:	2800      	cmp	r0, #0
    402e:	d1f9      	bne.n	4024 <bt_init+0x2c>
    4030:	f3bf 8f5b 	dmb	ish
	net_buf_unref(rsp);
    4034:	980c      	ldr	r0, [sp, #48]	; 0x30
    4036:	f015 f95b 	bl	192f0 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    403a:	aa0c      	add	r2, sp, #48	; 0x30
    403c:	2100      	movs	r1, #0
    403e:	f241 0003 	movw	r0, #4099	; 0x1003
    4042:	f7ff fbc7 	bl	37d4 <bt_hci_cmd_send_sync>
	if (err) {
    4046:	4604      	mov	r4, r0
    4048:	2800      	cmp	r0, #0
    404a:	d160      	bne.n	410e <bt_init+0x116>
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    404c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    404e:	4d34      	ldr	r5, [pc, #208]	; (4120 <bt_init+0x128>)
    4050:	6899      	ldr	r1, [r3, #8]
    4052:	2208      	movs	r2, #8
    4054:	3101      	adds	r1, #1
    4056:	f105 0016 	add.w	r0, r5, #22
    405a:	f7fc fb9a 	bl	792 <memcpy>
	net_buf_unref(rsp);
    405e:	980c      	ldr	r0, [sp, #48]	; 0x30
    4060:	f015 f946 	bl	192f0 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    4064:	4621      	mov	r1, r4
    4066:	aa0c      	add	r2, sp, #48	; 0x30
    4068:	f241 0001 	movw	r0, #4097	; 0x1001
    406c:	f7ff fbb2 	bl	37d4 <bt_hci_cmd_send_sync>
    4070:	462e      	mov	r6, r5
	if (err) {
    4072:	4604      	mov	r4, r0
    4074:	2800      	cmp	r0, #0
    4076:	d14a      	bne.n	410e <bt_init+0x116>
	read_local_ver_complete(rsp);
    4078:	980c      	ldr	r0, [sp, #48]	; 0x30
    407a:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    407c:	785a      	ldrb	r2, [r3, #1]
    407e:	73aa      	strb	r2, [r5, #14]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    4080:	78d9      	ldrb	r1, [r3, #3]
    4082:	789a      	ldrb	r2, [r3, #2]
    4084:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    4088:	822a      	strh	r2, [r5, #16]
	bt_dev.lmp_version = rp->lmp_version;
    408a:	791a      	ldrb	r2, [r3, #4]
    408c:	73ea      	strb	r2, [r5, #15]
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    408e:	7a19      	ldrb	r1, [r3, #8]
    4090:	79da      	ldrb	r2, [r3, #7]
    4092:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    4096:	826a      	strh	r2, [r5, #18]
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    4098:	795a      	ldrb	r2, [r3, #5]
    409a:	799b      	ldrb	r3, [r3, #6]
    409c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    40a0:	82ab      	strh	r3, [r5, #20]
	net_buf_unref(rsp);
    40a2:	f015 f925 	bl	192f0 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    40a6:	4621      	mov	r1, r4
    40a8:	aa0c      	add	r2, sp, #48	; 0x30
    40aa:	f241 0009 	movw	r0, #4105	; 0x1009
    40ae:	f7ff fb91 	bl	37d4 <bt_hci_cmd_send_sync>
	if (err) {
    40b2:	4604      	mov	r4, r0
    40b4:	bb58      	cbnz	r0, 410e <bt_init+0x116>
	bt_addr_copy(&bt_dev.id_addr.a, &rp->bdaddr);
    40b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    40b8:	6899      	ldr	r1, [r3, #8]
    40ba:	2206      	movs	r2, #6
    40bc:	3101      	adds	r1, #1
    40be:	1c68      	adds	r0, r5, #1
    40c0:	f7fc fb67 	bl	792 <memcpy>
	net_buf_unref(rsp);
    40c4:	980c      	ldr	r0, [sp, #48]	; 0x30
	bt_dev.id_addr.type = BT_ADDR_LE_PUBLIC;
    40c6:	702c      	strb	r4, [r5, #0]
	net_buf_unref(rsp);
    40c8:	f015 f912 	bl	192f0 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    40cc:	4621      	mov	r1, r4
    40ce:	aa0c      	add	r2, sp, #48	; 0x30
    40d0:	f241 0002 	movw	r0, #4098	; 0x1002
    40d4:	f7ff fb7e 	bl	37d4 <bt_hci_cmd_send_sync>
	if (err) {
    40d8:	4604      	mov	r4, r0
    40da:	b9c0      	cbnz	r0, 410e <bt_init+0x116>
	memcpy(bt_dev.supported_commands, rp->commands,
    40dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    40de:	6899      	ldr	r1, [r3, #8]
    40e0:	2240      	movs	r2, #64	; 0x40
    40e2:	3101      	adds	r1, #1
    40e4:	f105 001e 	add.w	r0, r5, #30
    40e8:	f7fc fb53 	bl	792 <memcpy>
	net_buf_unref(rsp);
    40ec:	980c      	ldr	r0, [sp, #48]	; 0x30
    40ee:	f015 f8ff 	bl	192f0 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    40f2:	7eab      	ldrb	r3, [r5, #26]
    40f4:	065d      	lsls	r5, r3, #25
    40f6:	d41f      	bmi.n	4138 <bt_init+0x140>
		BT_ERR("Non-LE capable controller detected!");
    40f8:	4b0a      	ldr	r3, [pc, #40]	; (4124 <bt_init+0x12c>)
    40fa:	9301      	str	r3, [sp, #4]
    40fc:	9300      	str	r3, [sp, #0]
    40fe:	4a0a      	ldr	r2, [pc, #40]	; (4128 <bt_init+0x130>)
    4100:	4b0a      	ldr	r3, [pc, #40]	; (412c <bt_init+0x134>)
    4102:	490b      	ldr	r1, [pc, #44]	; (4130 <bt_init+0x138>)
    4104:	480b      	ldr	r0, [pc, #44]	; (4134 <bt_init+0x13c>)
    4106:	f7fe f8cb 	bl	22a0 <printk>
		return -ENODEV;
    410a:	f06f 0412 	mvn.w	r4, #18
}
    410e:	4620      	mov	r0, r4
    4110:	b00e      	add	sp, #56	; 0x38
    4112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4116:	bf00      	nop
    4118:	20000414 	.word	0x20000414
    411c:	20009d48 	.word	0x20009d48
    4120:	20009cd8 	.word	0x20009cd8
    4124:	00023dbe 	.word	0x00023dbe
    4128:	00022d86 	.word	0x00022d86
    412c:	0002365c 	.word	0x0002365c
    4130:	000272e8 	.word	0x000272e8
    4134:	000238f9 	.word	0x000238f9
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    4138:	4621      	mov	r1, r4
    413a:	aa0c      	add	r2, sp, #48	; 0x30
    413c:	f242 0003 	movw	r0, #8195	; 0x2003
    4140:	f7ff fb48 	bl	37d4 <bt_hci_cmd_send_sync>
	if (err) {
    4144:	4604      	mov	r4, r0
    4146:	2800      	cmp	r0, #0
    4148:	d1e1      	bne.n	410e <bt_init+0x116>
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    414a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    414c:	6899      	ldr	r1, [r3, #8]
    414e:	2208      	movs	r2, #8
    4150:	3101      	adds	r1, #1
    4152:	f106 0078 	add.w	r0, r6, #120	; 0x78
    4156:	f7fc fb1c 	bl	792 <memcpy>
	net_buf_unref(rsp);
    415a:	980c      	ldr	r0, [sp, #48]	; 0x30
    415c:	f015 f8c8 	bl	192f0 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    4160:	4621      	mov	r1, r4
    4162:	aa0c      	add	r2, sp, #48	; 0x30
    4164:	f242 0002 	movw	r0, #8194	; 0x2002
    4168:	f7ff fb34 	bl	37d4 <bt_hci_cmd_send_sync>
	if (err) {
    416c:	4604      	mov	r4, r0
    416e:	2800      	cmp	r0, #0
    4170:	d1cd      	bne.n	410e <bt_init+0x116>
    4172:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4174:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->le_max_len);
    4176:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    417a:	f8a6 2088 	strh.w	r2, [r6, #136]	; 0x88
	if (!bt_dev.le.mtu) {
    417e:	b142      	cbz	r2, 4192 <bt_init+0x19a>
	le_max_num = min(rp->le_max_num, CONFIG_BT_CONN_TX_MAX);
    4180:	78da      	ldrb	r2, [r3, #3]
	k_sem_init(&bt_dev.le.pkts, le_max_num, le_max_num);
    4182:	2a02      	cmp	r2, #2
    4184:	bf28      	it	cs
    4186:	2202      	movcs	r2, #2
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    4188:	4611      	mov	r1, r2
    418a:	f106 008c 	add.w	r0, r6, #140	; 0x8c
    418e:	f01d fd07 	bl	21ba0 <_impl_k_sem_init>
	net_buf_unref(rsp);
    4192:	980c      	ldr	r0, [sp, #48]	; 0x30
    4194:	f015 f8ac 	bl	192f0 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    4198:	7eb4      	ldrb	r4, [r6, #26]
    419a:	f014 0420 	ands.w	r4, r4, #32
    419e:	f000 80c9 	beq.w	4334 <bt_init+0x33c>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    41a2:	f896 303a 	ldrb.w	r3, [r6, #58]	; 0x3a
    41a6:	071c      	lsls	r4, r3, #28
    41a8:	d513      	bpl.n	41d2 <bt_init+0x1da>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    41aa:	aa0c      	add	r2, sp, #48	; 0x30
    41ac:	2100      	movs	r1, #0
    41ae:	f242 001c 	movw	r0, #8220	; 0x201c
    41b2:	f7ff fb0f 	bl	37d4 <bt_hci_cmd_send_sync>
		if (err) {
    41b6:	4604      	mov	r4, r0
    41b8:	2800      	cmp	r0, #0
    41ba:	d1a8      	bne.n	410e <bt_init+0x116>
		le_read_supp_states_complete(rsp);
    41bc:	980c      	ldr	r0, [sp, #48]	; 0x30
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    41be:	6883      	ldr	r3, [r0, #8]
    41c0:	f853 2f01 	ldr.w	r2, [r3, #1]!
    41c4:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    41c6:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    41ca:	f8c6 2080 	str.w	r2, [r6, #128]	; 0x80
		net_buf_unref(rsp);
    41ce:	f015 f88f 	bl	192f0 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    41d2:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
    41d6:	0698      	lsls	r0, r3, #26
    41d8:	f100 80c8 	bmi.w	436c <bt_init+0x374>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    41dc:	2108      	movs	r1, #8
    41de:	f242 0001 	movw	r0, #8193	; 0x2001
    41e2:	f7ff fac7 	bl	3774 <bt_hci_cmd_create>
	if (!buf) {
    41e6:	4604      	mov	r4, r0
    41e8:	2800      	cmp	r0, #0
    41ea:	f000 80aa 	beq.w	4342 <bt_init+0x34a>
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    41ee:	2108      	movs	r1, #8
    41f0:	4408      	add	r0, r1
    41f2:	f015 f8db 	bl	193ac <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    41f6:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
		if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
    41fa:	f896 5079 	ldrb.w	r5, [r6, #121]	; 0x79
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    41fe:	0799      	lsls	r1, r3, #30
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    4200:	4602      	mov	r2, r0
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    4202:	bf4c      	ite	mi
    4204:	202f      	movmi	r0, #47	; 0x2f
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    4206:	200f      	movpl	r0, #15
		if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    4208:	069f      	lsls	r7, r3, #26
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    420a:	bf48      	it	mi
    420c:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
    4210:	f015 0f09 	tst.w	r5, #9
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    4214:	bf18      	it	ne
    4216:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    421a:	07dd      	lsls	r5, r3, #31
	if ((bt_dev.supported_commands[34] & 0x02) &&
    421c:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
    4220:	f003 0306 	and.w	r3, r3, #6
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
    4224:	bf48      	it	mi
    4226:	f040 0010 	orrmi.w	r0, r0, #16
	if ((bt_dev.supported_commands[34] & 0x02) &&
    422a:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    422c:	bf08      	it	eq
    422e:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    4232:	2100      	movs	r1, #0
	sys_put_le64(mask, cp_mask->events);
    4234:	f7ff fa8c 	bl	3750 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    4238:	4621      	mov	r1, r4
    423a:	2200      	movs	r2, #0
    423c:	f242 0001 	movw	r0, #8193	; 0x2001
    4240:	f7ff fac8 	bl	37d4 <bt_hci_cmd_send_sync>
	if (err) {
    4244:	4604      	mov	r4, r0
    4246:	2800      	cmp	r0, #0
    4248:	f47f af61 	bne.w	410e <bt_init+0x116>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    424c:	7eb3      	ldrb	r3, [r6, #26]
    424e:	0698      	lsls	r0, r3, #26
    4250:	d421      	bmi.n	4296 <bt_init+0x29e>
	if (bt_dev.le.mtu) {
    4252:	f8b6 1088 	ldrh.w	r1, [r6, #136]	; 0x88
    4256:	b9f1      	cbnz	r1, 4296 <bt_init+0x29e>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    4258:	aa0c      	add	r2, sp, #48	; 0x30
    425a:	f241 0005 	movw	r0, #4101	; 0x1005
    425e:	f7ff fab9 	bl	37d4 <bt_hci_cmd_send_sync>
	if (err) {
    4262:	4604      	mov	r4, r0
    4264:	2800      	cmp	r0, #0
    4266:	f47f af52 	bne.w	410e <bt_init+0x116>
	if (bt_dev.le.mtu) {
    426a:	f8b6 3088 	ldrh.w	r3, [r6, #136]	; 0x88
    426e:	b97b      	cbnz	r3, 4290 <bt_init+0x298>
    4270:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4272:	4895      	ldr	r0, [pc, #596]	; (44c8 <bt_init+0x4d0>)
    4274:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->acl_max_len);
    4276:	7899      	ldrb	r1, [r3, #2]
    4278:	785a      	ldrb	r2, [r3, #1]
    427a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    427e:	f8a6 2088 	strh.w	r2, [r6, #136]	; 0x88
	pkts = sys_le16_to_cpu(rp->acl_max_num);
    4282:	889a      	ldrh	r2, [r3, #4]
	k_sem_init(&bt_dev.le.pkts, pkts, pkts);
    4284:	2a02      	cmp	r2, #2
    4286:	bf28      	it	cs
    4288:	2202      	movcs	r2, #2
    428a:	4611      	mov	r1, r2
    428c:	f01d fc88 	bl	21ba0 <_impl_k_sem_init>
	net_buf_unref(rsp);
    4290:	980c      	ldr	r0, [sp, #48]	; 0x30
    4292:	f015 f82d 	bl	192f0 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    4296:	2108      	movs	r1, #8
    4298:	f640 4001 	movw	r0, #3073	; 0xc01
    429c:	f7ff fa6a 	bl	3774 <bt_hci_cmd_create>
	if (!buf) {
    42a0:	4604      	mov	r4, r0
    42a2:	2800      	cmp	r0, #0
    42a4:	d04d      	beq.n	4342 <bt_init+0x34a>
	ev = net_buf_add(buf, sizeof(*ev));
    42a6:	2108      	movs	r1, #8
    42a8:	4408      	add	r0, r1
    42aa:	f015 f87f 	bl	193ac <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    42ae:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
    42b2:	07d9      	lsls	r1, r3, #31
	ev = net_buf_add(buf, sizeof(*ev));
    42b4:	4602      	mov	r2, r0
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    42b6:	f140 8085 	bpl.w	43c4 <bt_init+0x3cc>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
    42ba:	a181      	add	r1, pc, #516	; (adr r1, 44c0 <bt_init+0x4c8>)
    42bc:	e9d1 0100 	ldrd	r0, r1, [r1]
	sys_put_le64(mask, ev->events);
    42c0:	f7ff fa46 	bl	3750 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    42c4:	4621      	mov	r1, r4
    42c6:	2200      	movs	r2, #0
    42c8:	f640 4001 	movw	r0, #3073	; 0xc01
    42cc:	f7ff fa82 	bl	37d4 <bt_hci_cmd_send_sync>
	if (err) {
    42d0:	4604      	mov	r4, r0
    42d2:	2800      	cmp	r0, #0
    42d4:	f47f af1b 	bne.w	410e <bt_init+0x116>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    42d8:	4601      	mov	r1, r0
    42da:	aa0c      	add	r2, sp, #48	; 0x30
    42dc:	f64f 4001 	movw	r0, #64513	; 0xfc01
    42e0:	f7ff fa78 	bl	37d4 <bt_hci_cmd_send_sync>
    42e4:	4d79      	ldr	r5, [pc, #484]	; (44cc <bt_init+0x4d4>)
	if (err) {
    42e6:	2800      	cmp	r0, #0
    42e8:	d070      	beq.n	43cc <bt_init+0x3d4>
		BT_WARN("Vendor HCI extensions not available");
    42ea:	4b79      	ldr	r3, [pc, #484]	; (44d0 <bt_init+0x4d8>)
    42ec:	4a79      	ldr	r2, [pc, #484]	; (44d4 <bt_init+0x4dc>)
    42ee:	497a      	ldr	r1, [pc, #488]	; (44d8 <bt_init+0x4e0>)
    42f0:	487a      	ldr	r0, [pc, #488]	; (44dc <bt_init+0x4e4>)
    42f2:	9501      	str	r5, [sp, #4]
    42f4:	9500      	str	r5, [sp, #0]
		BT_WARN("Failed to read supported vendor commands");
    42f6:	f7fd ffd3 	bl	22a0 <printk>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    42fa:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    42fc:	2207      	movs	r2, #7
    42fe:	a90c      	add	r1, sp, #48	; 0x30
    4300:	4877      	ldr	r0, [pc, #476]	; (44e0 <bt_init+0x4e8>)
    4302:	930c      	str	r3, [sp, #48]	; 0x30
    4304:	f8cd 3033 	str.w	r3, [sp, #51]	; 0x33
    4308:	f7fc fa16 	bl	738 <memcmp>
    430c:	2800      	cmp	r0, #0
    430e:	f040 8109 	bne.w	4524 <bt_init+0x52c>
	if (bt_storage) {
    4312:	4f74      	ldr	r7, [pc, #464]	; (44e4 <bt_init+0x4ec>)
    4314:	683b      	ldr	r3, [r7, #0]
    4316:	2b00      	cmp	r3, #0
    4318:	f040 8151 	bne.w	45be <bt_init+0x5c6>
	if (bt_dev.vs_commands[1] & BIT(0)) {
    431c:	f896 3060 	ldrb.w	r3, [r6, #96]	; 0x60
    4320:	07db      	lsls	r3, r3, #31
    4322:	f100 8170 	bmi.w	4606 <bt_init+0x60e>
		BT_WARN("Read Static Addresses command not available");
    4326:	9501      	str	r5, [sp, #4]
    4328:	9500      	str	r5, [sp, #0]
    432a:	4b6f      	ldr	r3, [pc, #444]	; (44e8 <bt_init+0x4f0>)
    432c:	4a69      	ldr	r2, [pc, #420]	; (44d4 <bt_init+0x4dc>)
    432e:	496a      	ldr	r1, [pc, #424]	; (44d8 <bt_init+0x4e0>)
    4330:	486e      	ldr	r0, [pc, #440]	; (44ec <bt_init+0x4f4>)
    4332:	e175      	b.n	4620 <bt_init+0x628>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    4334:	2102      	movs	r1, #2
    4336:	f640 406d 	movw	r0, #3181	; 0xc6d
    433a:	f7ff fa1b 	bl	3774 <bt_hci_cmd_create>
		if (!buf) {
    433e:	4605      	mov	r5, r0
    4340:	b910      	cbnz	r0, 4348 <bt_init+0x350>
		return -ENOBUFS;
    4342:	f06f 0436 	mvn.w	r4, #54	; 0x36
    4346:	e6e2      	b.n	410e <bt_init+0x116>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
    4348:	2102      	movs	r1, #2
    434a:	3008      	adds	r0, #8
    434c:	f015 f82e 	bl	193ac <net_buf_simple_add>
		cp_le->le = 0x01;
    4350:	2301      	movs	r3, #1
		cp_le->simul = 0x00;
    4352:	7044      	strb	r4, [r0, #1]
		cp_le->le = 0x01;
    4354:	7003      	strb	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    4356:	4622      	mov	r2, r4
    4358:	4629      	mov	r1, r5
    435a:	f640 406d 	movw	r0, #3181	; 0xc6d
    435e:	f7ff fa39 	bl	37d4 <bt_hci_cmd_send_sync>
		if (err) {
    4362:	4604      	mov	r4, r0
    4364:	2800      	cmp	r0, #0
    4366:	f43f af1c 	beq.w	41a2 <bt_init+0x1aa>
    436a:	e6d0      	b.n	410e <bt_init+0x116>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL,
    436c:	aa0c      	add	r2, sp, #48	; 0x30
    436e:	2100      	movs	r1, #0
    4370:	f242 002f 	movw	r0, #8239	; 0x202f
    4374:	f7ff fa2e 	bl	37d4 <bt_hci_cmd_send_sync>
		if (err) {
    4378:	4604      	mov	r4, r0
    437a:	2800      	cmp	r0, #0
    437c:	f47f aec7 	bne.w	410e <bt_init+0x116>
		rp = (void *)rsp->data;
    4380:	980c      	ldr	r0, [sp, #48]	; 0x30
    4382:	6883      	ldr	r3, [r0, #8]
		tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    4384:	f8b3 8001 	ldrh.w	r8, [r3, #1]
		tx_time = sys_le16_to_cpu(rp->max_tx_time);
    4388:	f8b3 7003 	ldrh.w	r7, [r3, #3]
		net_buf_unref(rsp);
    438c:	f014 ffb0 	bl	192f0 <net_buf_unref>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    4390:	2104      	movs	r1, #4
    4392:	f242 0024 	movw	r0, #8228	; 0x2024
    4396:	f7ff f9ed 	bl	3774 <bt_hci_cmd_create>
		if (!buf) {
    439a:	4605      	mov	r5, r0
    439c:	2800      	cmp	r0, #0
    439e:	d0d0      	beq.n	4342 <bt_init+0x34a>
		cp = net_buf_add(buf, sizeof(*cp));
    43a0:	2104      	movs	r1, #4
    43a2:	3008      	adds	r0, #8
    43a4:	f015 f802 	bl	193ac <net_buf_simple_add>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    43a8:	4622      	mov	r2, r4
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    43aa:	f8a0 8000 	strh.w	r8, [r0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    43ae:	8047      	strh	r7, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    43b0:	4629      	mov	r1, r5
    43b2:	f242 0024 	movw	r0, #8228	; 0x2024
    43b6:	f7ff fa0d 	bl	37d4 <bt_hci_cmd_send_sync>
		if (err) {
    43ba:	4604      	mov	r4, r0
    43bc:	2800      	cmp	r0, #0
    43be:	f43f af0d 	beq.w	41dc <bt_init+0x1e4>
    43c2:	e6a4      	b.n	410e <bt_init+0x116>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
    43c4:	484a      	ldr	r0, [pc, #296]	; (44f0 <bt_init+0x4f8>)
    43c6:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    43ca:	e779      	b.n	42c0 <bt_init+0x2c8>
	rp.info = (void *)rsp->data;
    43cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	BT_INFO("HW Platform: %s (0x%04x)",
    43ce:	4942      	ldr	r1, [pc, #264]	; (44d8 <bt_init+0x4e0>)
	rp.info = (void *)rsp->data;
    43d0:	689c      	ldr	r4, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
    43d2:	4848      	ldr	r0, [pc, #288]	; (44f4 <bt_init+0x4fc>)
    43d4:	f8b4 3001 	ldrh.w	r3, [r4, #1]
    43d8:	9302      	str	r3, [sp, #8]
	if (platform < ARRAY_SIZE(plat_str)) {
    43da:	2b03      	cmp	r3, #3
		return plat_str[platform];
    43dc:	bf96      	itet	ls
    43de:	4a46      	ldrls	r2, [pc, #280]	; (44f8 <bt_init+0x500>)
	return "unknown";
    43e0:	4a46      	ldrhi	r2, [pc, #280]	; (44fc <bt_init+0x504>)
		return plat_str[platform];
    43e2:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
    43e6:	9201      	str	r2, [sp, #4]
    43e8:	4b39      	ldr	r3, [pc, #228]	; (44d0 <bt_init+0x4d8>)
    43ea:	4a45      	ldr	r2, [pc, #276]	; (4500 <bt_init+0x508>)
    43ec:	9503      	str	r5, [sp, #12]
    43ee:	9500      	str	r5, [sp, #0]
    43f0:	f7fd ff56 	bl	22a0 <printk>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    43f4:	f8b4 3001 	ldrh.w	r3, [r4, #1]
	BT_INFO("HW Variant: %s (0x%04x)",
    43f8:	f8b4 2003 	ldrh.w	r2, [r4, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    43fc:	2b02      	cmp	r3, #2
    43fe:	d13a      	bne.n	4476 <bt_init+0x47e>
	if (variant < ARRAY_SIZE(nordic_str)) {
    4400:	2a02      	cmp	r2, #2
    4402:	d838      	bhi.n	4476 <bt_init+0x47e>
		return nordic_str[variant];
    4404:	4b3f      	ldr	r3, [pc, #252]	; (4504 <bt_init+0x50c>)
    4406:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
    440a:	9202      	str	r2, [sp, #8]
    440c:	9301      	str	r3, [sp, #4]
    440e:	4a3c      	ldr	r2, [pc, #240]	; (4500 <bt_init+0x508>)
    4410:	4b2f      	ldr	r3, [pc, #188]	; (44d0 <bt_init+0x4d8>)
    4412:	4931      	ldr	r1, [pc, #196]	; (44d8 <bt_init+0x4e0>)
    4414:	9503      	str	r5, [sp, #12]
    4416:	9500      	str	r5, [sp, #0]
    4418:	483b      	ldr	r0, [pc, #236]	; (4508 <bt_init+0x510>)
    441a:	f7fd ff41 	bl	22a0 <printk>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    441e:	7963      	ldrb	r3, [r4, #5]
    4420:	9506      	str	r5, [sp, #24]
    4422:	f8d4 1009 	ldr.w	r1, [r4, #9]
    4426:	9105      	str	r1, [sp, #20]
	if (variant < ARRAY_SIZE(var_str)) {
    4428:	2b03      	cmp	r3, #3
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    442a:	f8b4 1007 	ldrh.w	r1, [r4, #7]
		return var_str[variant];
    442e:	bf98      	it	ls
    4430:	4a36      	ldrls	r2, [pc, #216]	; (450c <bt_init+0x514>)
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    4432:	9104      	str	r1, [sp, #16]
    4434:	79a1      	ldrb	r1, [r4, #6]
		return var_str[variant];
    4436:	bf94      	ite	ls
    4438:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
	return "unknown";
    443c:	4a2f      	ldrhi	r2, [pc, #188]	; (44fc <bt_init+0x504>)
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    443e:	9103      	str	r1, [sp, #12]
    4440:	9302      	str	r3, [sp, #8]
    4442:	4925      	ldr	r1, [pc, #148]	; (44d8 <bt_init+0x4e0>)
    4444:	4b22      	ldr	r3, [pc, #136]	; (44d0 <bt_init+0x4d8>)
    4446:	9201      	str	r2, [sp, #4]
    4448:	9500      	str	r5, [sp, #0]
    444a:	4a2d      	ldr	r2, [pc, #180]	; (4500 <bt_init+0x508>)
    444c:	4830      	ldr	r0, [pc, #192]	; (4510 <bt_init+0x518>)
    444e:	f7fd ff27 	bl	22a0 <printk>
	net_buf_unref(rsp);
    4452:	980c      	ldr	r0, [sp, #48]	; 0x30
    4454:	f014 ff4c 	bl	192f0 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    4458:	aa0c      	add	r2, sp, #48	; 0x30
    445a:	2100      	movs	r1, #0
    445c:	f64f 4002 	movw	r0, #64514	; 0xfc02
    4460:	f7ff f9b8 	bl	37d4 <bt_hci_cmd_send_sync>
	if (err) {
    4464:	4604      	mov	r4, r0
    4466:	b140      	cbz	r0, 447a <bt_init+0x482>
		BT_WARN("Failed to read supported vendor features");
    4468:	9501      	str	r5, [sp, #4]
    446a:	9500      	str	r5, [sp, #0]
    446c:	4b18      	ldr	r3, [pc, #96]	; (44d0 <bt_init+0x4d8>)
    446e:	4a19      	ldr	r2, [pc, #100]	; (44d4 <bt_init+0x4dc>)
    4470:	4919      	ldr	r1, [pc, #100]	; (44d8 <bt_init+0x4e0>)
    4472:	4828      	ldr	r0, [pc, #160]	; (4514 <bt_init+0x51c>)
    4474:	e73f      	b.n	42f6 <bt_init+0x2fe>
		return "unknown";
    4476:	4b21      	ldr	r3, [pc, #132]	; (44fc <bt_init+0x504>)
    4478:	e7c7      	b.n	440a <bt_init+0x412>
	rp.cmds = (void *)rsp->data;
    447a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    447c:	4826      	ldr	r0, [pc, #152]	; (4518 <bt_init+0x520>)
    447e:	6899      	ldr	r1, [r3, #8]
    4480:	2202      	movs	r2, #2
    4482:	3101      	adds	r1, #1
    4484:	f7fc f985 	bl	792 <memcpy>
	net_buf_unref(rsp);
    4488:	980c      	ldr	r0, [sp, #48]	; 0x30
    448a:	f014 ff31 	bl	192f0 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    448e:	aa0c      	add	r2, sp, #48	; 0x30
    4490:	4621      	mov	r1, r4
    4492:	f64f 4003 	movw	r0, #64515	; 0xfc03
    4496:	f7ff f99d 	bl	37d4 <bt_hci_cmd_send_sync>
	if (err) {
    449a:	b130      	cbz	r0, 44aa <bt_init+0x4b2>
		BT_WARN("Failed to read supported vendor commands");
    449c:	9501      	str	r5, [sp, #4]
    449e:	9500      	str	r5, [sp, #0]
    44a0:	4b0b      	ldr	r3, [pc, #44]	; (44d0 <bt_init+0x4d8>)
    44a2:	4a0c      	ldr	r2, [pc, #48]	; (44d4 <bt_init+0x4dc>)
    44a4:	490c      	ldr	r1, [pc, #48]	; (44d8 <bt_init+0x4e0>)
    44a6:	481d      	ldr	r0, [pc, #116]	; (451c <bt_init+0x524>)
    44a8:	e725      	b.n	42f6 <bt_init+0x2fe>
	rp.feat = (void *)rsp->data;
    44aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	memcpy(bt_dev.vs_features, rp.feat->features, BT_DEV_VS_FEAT_MAX);
    44ac:	481c      	ldr	r0, [pc, #112]	; (4520 <bt_init+0x528>)
    44ae:	6899      	ldr	r1, [r3, #8]
    44b0:	2201      	movs	r2, #1
    44b2:	4411      	add	r1, r2
    44b4:	f7fc f96d 	bl	792 <memcpy>
	net_buf_unref(rsp);
    44b8:	980c      	ldr	r0, [sp, #48]	; 0x30
    44ba:	f014 ff19 	bl	192f0 <net_buf_unref>
    44be:	e71c      	b.n	42fa <bt_init+0x302>
    44c0:	02008890 	.word	0x02008890
    44c4:	20008000 	.word	0x20008000
    44c8:	20009d64 	.word	0x20009d64
    44cc:	00023dbe 	.word	0x00023dbe
    44d0:	00023682 	.word	0x00023682
    44d4:	00024016 	.word	0x00024016
    44d8:	000272e8 	.word	0x000272e8
    44dc:	0002392d 	.word	0x0002392d
    44e0:	20009cd8 	.word	0x20009cd8
    44e4:	20003124 	.word	0x20003124
    44e8:	00023664 	.word	0x00023664
    44ec:	00023aca 	.word	0x00023aca
    44f0:	02008810 	.word	0x02008810
    44f4:	00023961 	.word	0x00023961
    44f8:	000241b4 	.word	0x000241b4
    44fc:	000242dc 	.word	0x000242dc
    4500:	00022c7e 	.word	0x00022c7e
    4504:	000241a8 	.word	0x000241a8
    4508:	0002398a 	.word	0x0002398a
    450c:	000242cc 	.word	0x000242cc
    4510:	000239b2 	.word	0x000239b2
    4514:	000239ef 	.word	0x000239ef
    4518:	20009d37 	.word	0x20009d37
    451c:	00023a28 	.word	0x00023a28
    4520:	20009d36 	.word	0x20009d36
	    !bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_NONE)) {
    4524:	4b62      	ldr	r3, [pc, #392]	; (46b0 <bt_init+0x6b8>)
    4526:	6818      	ldr	r0, [r3, #0]
    4528:	889a      	ldrh	r2, [r3, #4]
    452a:	900a      	str	r0, [sp, #40]	; 0x28
    452c:	799b      	ldrb	r3, [r3, #6]
    452e:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
    4532:	a90a      	add	r1, sp, #40	; 0x28
    4534:	2207      	movs	r2, #7
    4536:	485f      	ldr	r0, [pc, #380]	; (46b4 <bt_init+0x6bc>)
    4538:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    453c:	f7fc f8fc 	bl	738 <memcmp>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    4540:	2800      	cmp	r0, #0
    4542:	f43f aee6 	beq.w	4312 <bt_init+0x31a>
	BT_INFO("Identity: %s", bt_addr_le_str(&bt_dev.id_addr));
    4546:	485b      	ldr	r0, [pc, #364]	; (46b4 <bt_init+0x6bc>)
    4548:	f7fe fee8 	bl	331c <bt_addr_le_str>
    454c:	4b5a      	ldr	r3, [pc, #360]	; (46b8 <bt_init+0x6c0>)
    454e:	4a5b      	ldr	r2, [pc, #364]	; (46bc <bt_init+0x6c4>)
    4550:	495b      	ldr	r1, [pc, #364]	; (46c0 <bt_init+0x6c8>)
    4552:	9001      	str	r0, [sp, #4]
    4554:	9502      	str	r5, [sp, #8]
    4556:	9500      	str	r5, [sp, #0]
    4558:	485a      	ldr	r0, [pc, #360]	; (46c4 <bt_init+0x6cc>)
    455a:	f7fd fea1 	bl	22a0 <printk>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    455e:	7bb4      	ldrb	r4, [r6, #14]
    4560:	4620      	mov	r0, r4
    4562:	f7fe ffd7 	bl	3514 <ver_str>
    4566:	9505      	str	r5, [sp, #20]
    4568:	8ab3      	ldrh	r3, [r6, #20]
    456a:	9304      	str	r3, [sp, #16]
    456c:	8a33      	ldrh	r3, [r6, #16]
    456e:	4a53      	ldr	r2, [pc, #332]	; (46bc <bt_init+0x6c4>)
    4570:	4953      	ldr	r1, [pc, #332]	; (46c0 <bt_init+0x6c8>)
    4572:	9303      	str	r3, [sp, #12]
    4574:	9402      	str	r4, [sp, #8]
    4576:	4b50      	ldr	r3, [pc, #320]	; (46b8 <bt_init+0x6c0>)
    4578:	9001      	str	r0, [sp, #4]
    457a:	9500      	str	r5, [sp, #0]
    457c:	4852      	ldr	r0, [pc, #328]	; (46c8 <bt_init+0x6d0>)
    457e:	f7fd fe8f 	bl	22a0 <printk>
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
    4582:	7bf4      	ldrb	r4, [r6, #15]
    4584:	4620      	mov	r0, r4
    4586:	f7fe ffc5 	bl	3514 <ver_str>
    458a:	9504      	str	r5, [sp, #16]
    458c:	8a73      	ldrh	r3, [r6, #18]
    458e:	9303      	str	r3, [sp, #12]
    4590:	9402      	str	r4, [sp, #8]
    4592:	9001      	str	r0, [sp, #4]
    4594:	4b48      	ldr	r3, [pc, #288]	; (46b8 <bt_init+0x6c0>)
    4596:	4a49      	ldr	r2, [pc, #292]	; (46bc <bt_init+0x6c4>)
    4598:	4949      	ldr	r1, [pc, #292]	; (46c0 <bt_init+0x6c8>)
    459a:	9500      	str	r5, [sp, #0]
    459c:	484b      	ldr	r0, [pc, #300]	; (46cc <bt_init+0x6d4>)
    459e:	f7fd fe7f 	bl	22a0 <printk>
		err = bt_conn_init();
    45a2:	f002 f9b5 	bl	6910 <bt_conn_init>
		if (err) {
    45a6:	4604      	mov	r4, r0
    45a8:	2800      	cmp	r0, #0
    45aa:	f47f adb0 	bne.w	410e <bt_init+0x116>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    45ae:	2102      	movs	r1, #2
    45b0:	4847      	ldr	r0, [pc, #284]	; (46d0 <bt_init+0x6d8>)
    45b2:	f7fe ffe8 	bl	3586 <atomic_or>
	bt_le_scan_update(false);
    45b6:	4620      	mov	r0, r4
    45b8:	f7ff fcec 	bl	3f94 <bt_le_scan_update>
    45bc:	e5a7      	b.n	410e <bt_init+0x116>
		ret = bt_storage->read(NULL, BT_STORAGE_ID_ADDR,
    45be:	2100      	movs	r1, #0
    45c0:	681c      	ldr	r4, [r3, #0]
    45c2:	4a3c      	ldr	r2, [pc, #240]	; (46b4 <bt_init+0x6bc>)
    45c4:	2307      	movs	r3, #7
    45c6:	4608      	mov	r0, r1
    45c8:	47a0      	blx	r4
		if (ret == sizeof(bt_dev.id_addr)) {
    45ca:	2807      	cmp	r0, #7
    45cc:	f47f aea6 	bne.w	431c <bt_init+0x324>
	if (bt_dev.id_addr.type != BT_ADDR_LE_RANDOM ||
    45d0:	7833      	ldrb	r3, [r6, #0]
    45d2:	2b01      	cmp	r3, #1
    45d4:	d104      	bne.n	45e0 <bt_init+0x5e8>
    45d6:	79b3      	ldrb	r3, [r6, #6]
    45d8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    45dc:	2bc0      	cmp	r3, #192	; 0xc0
    45de:	d05b      	beq.n	4698 <bt_init+0x6a0>
		BT_ERR("Only static random address supported as identity");
    45e0:	9501      	str	r5, [sp, #4]
    45e2:	9500      	str	r5, [sp, #0]
    45e4:	4b3b      	ldr	r3, [pc, #236]	; (46d4 <bt_init+0x6dc>)
    45e6:	4a3c      	ldr	r2, [pc, #240]	; (46d8 <bt_init+0x6e0>)
    45e8:	4935      	ldr	r1, [pc, #212]	; (46c0 <bt_init+0x6c8>)
    45ea:	483c      	ldr	r0, [pc, #240]	; (46dc <bt_init+0x6e4>)
    45ec:	f7fd fe58 	bl	22a0 <printk>
		return -EINVAL;
    45f0:	f06f 0415 	mvn.w	r4, #21
			BT_ERR("Unable to set identity address");
    45f4:	9501      	str	r5, [sp, #4]
    45f6:	9500      	str	r5, [sp, #0]
    45f8:	4b39      	ldr	r3, [pc, #228]	; (46e0 <bt_init+0x6e8>)
    45fa:	4a37      	ldr	r2, [pc, #220]	; (46d8 <bt_init+0x6e0>)
    45fc:	4930      	ldr	r1, [pc, #192]	; (46c0 <bt_init+0x6c8>)
    45fe:	4839      	ldr	r0, [pc, #228]	; (46e4 <bt_init+0x6ec>)
    4600:	f7fd fe4e 	bl	22a0 <printk>
    4604:	e583      	b.n	410e <bt_init+0x116>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS,
    4606:	aa09      	add	r2, sp, #36	; 0x24
    4608:	2100      	movs	r1, #0
    460a:	f64f 4009 	movw	r0, #64521	; 0xfc09
    460e:	f7ff f8e1 	bl	37d4 <bt_hci_cmd_send_sync>
		if (err) {
    4612:	b140      	cbz	r0, 4626 <bt_init+0x62e>
			BT_WARN("Failed to read static addresses");
    4614:	4b2f      	ldr	r3, [pc, #188]	; (46d4 <bt_init+0x6dc>)
    4616:	4a34      	ldr	r2, [pc, #208]	; (46e8 <bt_init+0x6f0>)
    4618:	4929      	ldr	r1, [pc, #164]	; (46c0 <bt_init+0x6c8>)
    461a:	4834      	ldr	r0, [pc, #208]	; (46ec <bt_init+0x6f4>)
    461c:	9501      	str	r5, [sp, #4]
    461e:	9500      	str	r5, [sp, #0]
		BT_WARN("Read Static Addresses command not available");
    4620:	f7fd fe3e 	bl	22a0 <printk>
    4624:	e019      	b.n	465a <bt_init+0x662>
		rp = (void *)rsp->data;
    4626:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4628:	6899      	ldr	r1, [r3, #8]
		if (rp->num_addrs) {
    462a:	784b      	ldrb	r3, [r1, #1]
    462c:	b153      	cbz	r3, 4644 <bt_init+0x64c>
			bt_dev.id_addr.type = BT_ADDR_LE_RANDOM;
    462e:	2301      	movs	r3, #1
	memcpy(dst, src, sizeof(*dst));
    4630:	2206      	movs	r2, #6
    4632:	3102      	adds	r1, #2
    4634:	482e      	ldr	r0, [pc, #184]	; (46f0 <bt_init+0x6f8>)
    4636:	7033      	strb	r3, [r6, #0]
    4638:	f7fc f8ab 	bl	792 <memcpy>
			net_buf_unref(rsp);
    463c:	9809      	ldr	r0, [sp, #36]	; 0x24
    463e:	f014 fe57 	bl	192f0 <net_buf_unref>
    4642:	e7c5      	b.n	45d0 <bt_init+0x5d8>
		BT_WARN("No static addresses stored in controller");
    4644:	9501      	str	r5, [sp, #4]
    4646:	9500      	str	r5, [sp, #0]
    4648:	4b22      	ldr	r3, [pc, #136]	; (46d4 <bt_init+0x6dc>)
    464a:	4a27      	ldr	r2, [pc, #156]	; (46e8 <bt_init+0x6f0>)
    464c:	491c      	ldr	r1, [pc, #112]	; (46c0 <bt_init+0x6c8>)
    464e:	4829      	ldr	r0, [pc, #164]	; (46f4 <bt_init+0x6fc>)
    4650:	f7fd fe26 	bl	22a0 <printk>
		net_buf_unref(rsp);
    4654:	9809      	ldr	r0, [sp, #36]	; 0x24
    4656:	f014 fe4b 	bl	192f0 <net_buf_unref>
	err = bt_addr_le_create_static(&bt_dev.id_addr);
    465a:	4816      	ldr	r0, [pc, #88]	; (46b4 <bt_init+0x6bc>)
    465c:	f7ff fbfb 	bl	3e56 <bt_addr_le_create_static>
	if (err) {
    4660:	4604      	mov	r4, r0
    4662:	2800      	cmp	r0, #0
    4664:	d1c6      	bne.n	45f4 <bt_init+0x5fc>
	if (bt_storage) {
    4666:	683b      	ldr	r3, [r7, #0]
    4668:	b17b      	cbz	r3, 468a <bt_init+0x692>
		ret = bt_storage->write(NULL, BT_STORAGE_ID_ADDR,
    466a:	685f      	ldr	r7, [r3, #4]
    466c:	4a11      	ldr	r2, [pc, #68]	; (46b4 <bt_init+0x6bc>)
    466e:	2307      	movs	r3, #7
    4670:	4601      	mov	r1, r0
    4672:	47b8      	blx	r7
		if (ret != sizeof(bt_dev.id_addr)) {
    4674:	2807      	cmp	r0, #7
    4676:	d0ab      	beq.n	45d0 <bt_init+0x5d8>
			BT_ERR("Unable to store static address");
    4678:	4b16      	ldr	r3, [pc, #88]	; (46d4 <bt_init+0x6dc>)
    467a:	4a17      	ldr	r2, [pc, #92]	; (46d8 <bt_init+0x6e0>)
    467c:	4910      	ldr	r1, [pc, #64]	; (46c0 <bt_init+0x6c8>)
    467e:	481e      	ldr	r0, [pc, #120]	; (46f8 <bt_init+0x700>)
    4680:	9501      	str	r5, [sp, #4]
    4682:	9500      	str	r5, [sp, #0]
		BT_WARN("Using temporary static random address");
    4684:	f7fd fe0c 	bl	22a0 <printk>
    4688:	e7a2      	b.n	45d0 <bt_init+0x5d8>
    468a:	9501      	str	r5, [sp, #4]
    468c:	9500      	str	r5, [sp, #0]
    468e:	4b11      	ldr	r3, [pc, #68]	; (46d4 <bt_init+0x6dc>)
    4690:	4a15      	ldr	r2, [pc, #84]	; (46e8 <bt_init+0x6f0>)
    4692:	490b      	ldr	r1, [pc, #44]	; (46c0 <bt_init+0x6c8>)
    4694:	4819      	ldr	r0, [pc, #100]	; (46fc <bt_init+0x704>)
    4696:	e7f5      	b.n	4684 <bt_init+0x68c>
	err = set_random_address(&bt_dev.id_addr.a);
    4698:	4815      	ldr	r0, [pc, #84]	; (46f0 <bt_init+0x6f8>)
    469a:	f7ff f8d9 	bl	3850 <set_random_address>
	if (err) {
    469e:	4604      	mov	r4, r0
    46a0:	2800      	cmp	r0, #0
    46a2:	d1a7      	bne.n	45f4 <bt_init+0x5fc>
    46a4:	2104      	movs	r1, #4
    46a6:	480a      	ldr	r0, [pc, #40]	; (46d0 <bt_init+0x6d8>)
    46a8:	f7fe ff6d 	bl	3586 <atomic_or>
    46ac:	e74b      	b.n	4546 <bt_init+0x54e>
    46ae:	bf00      	nop
    46b0:	00022988 	.word	0x00022988
    46b4:	20009cd8 	.word	0x20009cd8
    46b8:	00023674 	.word	0x00023674
    46bc:	00022c7e 	.word	0x00022c7e
    46c0:	000272e8 	.word	0x000272e8
    46c4:	00023bac 	.word	0x00023bac
    46c8:	00023bc9 	.word	0x00023bc9
    46cc:	00023c17 	.word	0x00023c17
    46d0:	20009d48 	.word	0x20009d48
    46d4:	00023664 	.word	0x00023664
    46d8:	00022d86 	.word	0x00022d86
    46dc:	00023b6b 	.word	0x00023b6b
    46e0:	0002368e 	.word	0x0002368e
    46e4:	00023c4e 	.word	0x00023c4e
    46e8:	00024016 	.word	0x00024016
    46ec:	00023a61 	.word	0x00023a61
    46f0:	20009cd9 	.word	0x20009cd9
    46f4:	00023a91 	.word	0x00023a91
    46f8:	00023b06 	.word	0x00023b06
    46fc:	00023b35 	.word	0x00023b35

00004700 <init_work>:
{
    4700:	b510      	push	{r4, lr}
	err = bt_init();
    4702:	f7ff fc79 	bl	3ff8 <bt_init>
	if (ready_cb) {
    4706:	4b03      	ldr	r3, [pc, #12]	; (4714 <init_work+0x14>)
    4708:	681b      	ldr	r3, [r3, #0]
    470a:	b113      	cbz	r3, 4712 <init_work+0x12>
}
    470c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    4710:	4718      	bx	r3
    4712:	bd10      	pop	{r4, pc}
    4714:	20000410 	.word	0x20000410

00004718 <check_pending_conn.part.27>:
static void check_pending_conn(const bt_addr_le_t *id_addr,
    4718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    471c:	460d      	mov	r5, r1
	conn = bt_conn_lookup_state_le(id_addr, BT_CONN_CONNECT_SCAN);
    471e:	2101      	movs	r1, #1
    4720:	f001 febc 	bl	649c <bt_conn_lookup_state_le>
	if (!conn) {
    4724:	4604      	mov	r4, r0
    4726:	2800      	cmp	r0, #0
    4728:	d068      	beq.n	47fc <check_pending_conn.part.27+0xe4>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    472a:	2107      	movs	r1, #7
    472c:	4834      	ldr	r0, [pc, #208]	; (4800 <check_pending_conn.part.27+0xe8>)
    472e:	f7fe ff3b 	bl	35a8 <atomic_test_bit>
    4732:	2800      	cmp	r0, #0
    4734:	d14f      	bne.n	47d6 <check_pending_conn.part.27+0xbe>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_ID_STATIC_RANDOM)) {
    4736:	2102      	movs	r1, #2
    4738:	4831      	ldr	r0, [pc, #196]	; (4800 <check_pending_conn.part.27+0xe8>)
    473a:	f7fe ff35 	bl	35a8 <atomic_test_bit>
    473e:	b110      	cbz	r0, 4746 <check_pending_conn.part.27+0x2e>
			set_random_address(&bt_dev.id_addr.a);
    4740:	4830      	ldr	r0, [pc, #192]	; (4804 <check_pending_conn.part.27+0xec>)
    4742:	f7ff f885 	bl	3850 <set_random_address>
		bt_addr_le_copy(&conn->le.init_addr, &bt_dev.id_addr);
    4746:	4930      	ldr	r1, [pc, #192]	; (4808 <check_pending_conn.part.27+0xf0>)
    4748:	f104 004f 	add.w	r0, r4, #79	; 0x4f
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    474c:	f104 0856 	add.w	r8, r4, #86	; 0x56
		bt_addr_le_copy(&conn->le.init_addr, &bt_dev.id_addr);
    4750:	f7fe ff16 	bl	3580 <bt_addr_le_copy>
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    4754:	4629      	mov	r1, r5
    4756:	4640      	mov	r0, r8
    4758:	f7fe ff12 	bl	3580 <bt_addr_le_copy>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    475c:	2119      	movs	r1, #25
    475e:	f242 000d 	movw	r0, #8205	; 0x200d
    4762:	f7ff f807 	bl	3774 <bt_hci_cmd_create>
	if (!buf) {
    4766:	4606      	mov	r6, r0
    4768:	b3d0      	cbz	r0, 47e0 <check_pending_conn.part.27+0xc8>
	cp = net_buf_add(buf, sizeof(*cp));
    476a:	2119      	movs	r1, #25
    476c:	3008      	adds	r0, #8
    476e:	f014 fe1d 	bl	193ac <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
    4772:	2219      	movs	r2, #25
	cp = net_buf_add(buf, sizeof(*cp));
    4774:	4605      	mov	r5, r0
	memset(cp, 0, sizeof(*cp));
    4776:	2100      	movs	r1, #0
    4778:	f7fc f837 	bl	7ea <memset>
	cp->scan_interval = sys_cpu_to_le16(BT_GAP_SCAN_FAST_INTERVAL);
    477c:	2700      	movs	r7, #0
    477e:	2360      	movs	r3, #96	; 0x60
    4780:	702b      	strb	r3, [r5, #0]
	cp->scan_window = cp->scan_interval;
    4782:	70ab      	strb	r3, [r5, #2]
	bt_addr_le_copy(&cp->peer_addr, &conn->le.resp_addr);
    4784:	4641      	mov	r1, r8
    4786:	1d68      	adds	r0, r5, #5
	cp->scan_interval = sys_cpu_to_le16(BT_GAP_SCAN_FAST_INTERVAL);
    4788:	706f      	strb	r7, [r5, #1]
	cp->scan_window = cp->scan_interval;
    478a:	70ef      	strb	r7, [r5, #3]
	bt_addr_le_copy(&cp->peer_addr, &conn->le.resp_addr);
    478c:	f7fe fef8 	bl	3580 <bt_addr_le_copy>
	cp->own_addr_type = conn->le.init_addr.type;
    4790:	f894 304f 	ldrb.w	r3, [r4, #79]	; 0x4f
    4794:	732b      	strb	r3, [r5, #12]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    4796:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
    479a:	f8a5 300d 	strh.w	r3, [r5, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    479e:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
    47a2:	f8a5 300f 	strh.w	r3, [r5, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
    47a6:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
    47aa:	f8a5 3011 	strh.w	r3, [r5, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    47ae:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    47b2:	f8a5 3013 	strh.w	r3, [r5, #19]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    47b6:	463a      	mov	r2, r7
    47b8:	4631      	mov	r1, r6
    47ba:	f242 000d 	movw	r0, #8205	; 0x200d
    47be:	f7ff f809 	bl	37d4 <bt_hci_cmd_send_sync>
	if (hci_le_create_conn(conn)) {
    47c2:	b968      	cbnz	r0, 47e0 <check_pending_conn.part.27+0xc8>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    47c4:	4620      	mov	r0, r4
    47c6:	2102      	movs	r1, #2
    47c8:	f001 fd40 	bl	624c <bt_conn_set_state>
	bt_conn_unref(conn);
    47cc:	4620      	mov	r0, r4
}
    47ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_conn_unref(conn);
    47d2:	f001 be85 	b.w	64e0 <bt_conn_unref>
	    set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE)) {
    47d6:	2000      	movs	r0, #0
    47d8:	f7ff f8be 	bl	3958 <set_le_scan_enable>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    47dc:	2800      	cmp	r0, #0
    47de:	d0aa      	beq.n	4736 <check_pending_conn.part.27+0x1e>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    47e0:	231f      	movs	r3, #31
    47e2:	72e3      	strb	r3, [r4, #11]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    47e4:	4620      	mov	r0, r4
    47e6:	2100      	movs	r1, #0
    47e8:	f001 fd30 	bl	624c <bt_conn_set_state>
	bt_conn_unref(conn);
    47ec:	4620      	mov	r0, r4
    47ee:	f001 fe77 	bl	64e0 <bt_conn_unref>
	bt_le_scan_update(false);
    47f2:	2000      	movs	r0, #0
}
    47f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_le_scan_update(false);
    47f8:	f7ff bbcc 	b.w	3f94 <bt_le_scan_update>
    47fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4800:	20009d48 	.word	0x20009d48
    4804:	20009cd9 	.word	0x20009cd9
    4808:	20009cd8 	.word	0x20009cd8

0000480c <hci_le_set_phy.isra.29>:
static int hci_le_set_phy(struct bt_conn *conn)
    480c:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    480e:	2107      	movs	r1, #7
static int hci_le_set_phy(struct bt_conn *conn)
    4810:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    4812:	f242 0032 	movw	r0, #8242	; 0x2032
    4816:	f7fe ffad 	bl	3774 <bt_hci_cmd_create>
	if (!buf) {
    481a:	4605      	mov	r5, r0
    481c:	b198      	cbz	r0, 4846 <hci_le_set_phy.isra.29+0x3a>
	cp = net_buf_add(buf, sizeof(*cp));
    481e:	2107      	movs	r1, #7
    4820:	3008      	adds	r0, #8
    4822:	f014 fdc3 	bl	193ac <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    4826:	8823      	ldrh	r3, [r4, #0]
    4828:	8003      	strh	r3, [r0, #0]
	cp->all_phys = 0;
    482a:	2400      	movs	r4, #0
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    482c:	2302      	movs	r3, #2
	cp->all_phys = 0;
    482e:	7084      	strb	r4, [r0, #2]
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    4830:	70c3      	strb	r3, [r0, #3]
	cp->rx_phys = BT_HCI_LE_PHY_PREFER_2M;
    4832:	7103      	strb	r3, [r0, #4]
	cp->phy_opts = BT_HCI_LE_PHY_CODED_ANY;
    4834:	7144      	strb	r4, [r0, #5]
    4836:	7184      	strb	r4, [r0, #6]
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
    4838:	4629      	mov	r1, r5
    483a:	f242 0032 	movw	r0, #8242	; 0x2032
    483e:	f7ff fb21 	bl	3e84 <bt_hci_cmd_send>
	return 0;
    4842:	4620      	mov	r0, r4
    4844:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    4846:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    484a:	bd38      	pop	{r3, r4, r5, pc}

0000484c <hci_le_set_data_len.isra.30>:
static int hci_le_set_data_len(struct bt_conn *conn)
    484c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    484e:	4607      	mov	r7, r0
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    4850:	aa01      	add	r2, sp, #4
    4852:	2100      	movs	r1, #0
    4854:	f242 002f 	movw	r0, #8239	; 0x202f
    4858:	f7fe ffbc 	bl	37d4 <bt_hci_cmd_send_sync>
	if (err) {
    485c:	b9d8      	cbnz	r0, 4896 <hci_le_set_data_len.isra.30+0x4a>
	rp = (void *)rsp->data;
    485e:	9801      	ldr	r0, [sp, #4]
    4860:	6883      	ldr	r3, [r0, #8]
	tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    4862:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	tx_time = sys_le16_to_cpu(rp->max_tx_time);
    4866:	f8b3 5003 	ldrh.w	r5, [r3, #3]
	net_buf_unref(rsp);
    486a:	f014 fd41 	bl	192f0 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
    486e:	2106      	movs	r1, #6
    4870:	f242 0022 	movw	r0, #8226	; 0x2022
    4874:	f7fe ff7e 	bl	3774 <bt_hci_cmd_create>
	if (!buf) {
    4878:	4604      	mov	r4, r0
    487a:	b170      	cbz	r0, 489a <hci_le_set_data_len.isra.30+0x4e>
	cp = net_buf_add(buf, sizeof(*cp));
    487c:	2106      	movs	r1, #6
    487e:	3008      	adds	r0, #8
    4880:	f014 fd94 	bl	193ac <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    4884:	883b      	ldrh	r3, [r7, #0]
    4886:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
    4888:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
    488a:	8085      	strh	r5, [r0, #4]
	err = bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
    488c:	4621      	mov	r1, r4
    488e:	f242 0022 	movw	r0, #8226	; 0x2022
    4892:	f7ff faf7 	bl	3e84 <bt_hci_cmd_send>
}
    4896:	b003      	add	sp, #12
    4898:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
    489a:	f06f 0036 	mvn.w	r0, #54	; 0x36
    489e:	e7fa      	b.n	4896 <hci_le_set_data_len.isra.30+0x4a>

000048a0 <le_enh_conn_complete>:
{
    48a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	u16_t handle = sys_le16_to_cpu(evt->handle);
    48a2:	f8b0 6001 	ldrh.w	r6, [r0, #1]
{
    48a6:	b089      	sub	sp, #36	; 0x24
    48a8:	4605      	mov	r5, r0
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
    48aa:	210c      	movs	r1, #12
    48ac:	4867      	ldr	r0, [pc, #412]	; (4a4c <le_enh_conn_complete+0x1ac>)
	u16_t handle = sys_le16_to_cpu(evt->handle);
    48ae:	b2b7      	uxth	r7, r6
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
    48b0:	f7fe fe98 	bl	35e4 <atomic_test_and_clear_bit>
    48b4:	b118      	cbz	r0, 48be <le_enh_conn_complete+0x1e>
		bt_keys_foreach(BT_KEYS_IRK, update_pending_id);
    48b6:	4966      	ldr	r1, [pc, #408]	; (4a50 <le_enh_conn_complete+0x1b0>)
    48b8:	2002      	movs	r0, #2
    48ba:	f006 feff 	bl	b6bc <bt_keys_foreach>
	if (evt->status) {
    48be:	782b      	ldrb	r3, [r5, #0]
    48c0:	b17b      	cbz	r3, 48e2 <le_enh_conn_complete+0x42>
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT);
    48c2:	2102      	movs	r1, #2
    48c4:	2000      	movs	r0, #0
    48c6:	f001 fde9 	bl	649c <bt_conn_lookup_state_le>
		if (!conn) {
    48ca:	4604      	mov	r4, r0
    48cc:	b138      	cbz	r0, 48de <le_enh_conn_complete+0x3e>
		conn->err = evt->status;
    48ce:	782b      	ldrb	r3, [r5, #0]
    48d0:	72c3      	strb	r3, [r0, #11]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    48d2:	2100      	movs	r1, #0
    48d4:	f001 fcba 	bl	624c <bt_conn_set_state>
		bt_conn_unref(conn);
    48d8:	4620      	mov	r0, r4
    48da:	f001 fe01 	bl	64e0 <bt_conn_unref>
}
    48de:	b009      	add	sp, #36	; 0x24
    48e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_addr_le_copy(&id_addr, &evt->peer_addr);
    48e2:	1d2c      	adds	r4, r5, #4
    48e4:	4621      	mov	r1, r4
    48e6:	a806      	add	r0, sp, #24
    48e8:	f7fe fe4a 	bl	3580 <bt_addr_le_copy>
	if (id_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    48ec:	f89d 3018 	ldrb.w	r3, [sp, #24]
    48f0:	3b02      	subs	r3, #2
    48f2:	b2db      	uxtb	r3, r3
    48f4:	2b01      	cmp	r3, #1
    48f6:	d829      	bhi.n	494c <le_enh_conn_complete+0xac>
    48f8:	2206      	movs	r2, #6
    48fa:	f105 0111 	add.w	r1, r5, #17
    48fe:	f10d 0011 	add.w	r0, sp, #17
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    4902:	f88d 3018 	strb.w	r3, [sp, #24]
    4906:	f7fb ff44 	bl	792 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    490a:	2301      	movs	r3, #1
    490c:	f88d 3010 	strb.w	r3, [sp, #16]
	conn = bt_conn_lookup_state_le(&id_addr, BT_CONN_CONNECT);
    4910:	2102      	movs	r1, #2
    4912:	a806      	add	r0, sp, #24
    4914:	f001 fdc2 	bl	649c <bt_conn_lookup_state_le>
	if (evt->role == BT_CONN_ROLE_SLAVE) {
    4918:	78eb      	ldrb	r3, [r5, #3]
    491a:	2b01      	cmp	r3, #1
	conn = bt_conn_lookup_state_le(&id_addr, BT_CONN_CONNECT);
    491c:	4604      	mov	r4, r0
	if (evt->role == BT_CONN_ROLE_SLAVE) {
    491e:	d109      	bne.n	4934 <le_enh_conn_complete+0x94>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    4920:	f06f 0120 	mvn.w	r1, #32
    4924:	4849      	ldr	r0, [pc, #292]	; (4a4c <le_enh_conn_complete+0x1ac>)
    4926:	f7fe fe4c 	bl	35c2 <atomic_and>
		if (!conn) {
    492a:	b9a4      	cbnz	r4, 4956 <le_enh_conn_complete+0xb6>
			conn = bt_conn_add_le(&id_addr);
    492c:	a806      	add	r0, sp, #24
    492e:	f001 fc53 	bl	61d8 <bt_conn_add_le>
    4932:	4604      	mov	r4, r0
	if (!conn) {
    4934:	b97c      	cbnz	r4, 4956 <le_enh_conn_complete+0xb6>
		BT_ERR("Unable to add new conn for handle %u", handle);
    4936:	4b47      	ldr	r3, [pc, #284]	; (4a54 <le_enh_conn_complete+0x1b4>)
    4938:	9302      	str	r3, [sp, #8]
    493a:	e88d 0088 	stmia.w	sp, {r3, r7}
    493e:	4a46      	ldr	r2, [pc, #280]	; (4a58 <le_enh_conn_complete+0x1b8>)
    4940:	4b46      	ldr	r3, [pc, #280]	; (4a5c <le_enh_conn_complete+0x1bc>)
    4942:	4947      	ldr	r1, [pc, #284]	; (4a60 <le_enh_conn_complete+0x1c0>)
    4944:	4847      	ldr	r0, [pc, #284]	; (4a64 <le_enh_conn_complete+0x1c4>)
    4946:	f7fd fcab 	bl	22a0 <printk>
		return;
    494a:	e7c8      	b.n	48de <le_enh_conn_complete+0x3e>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    494c:	4621      	mov	r1, r4
    494e:	a804      	add	r0, sp, #16
    4950:	f7fe fe16 	bl	3580 <bt_addr_le_copy>
    4954:	e7dc      	b.n	4910 <le_enh_conn_complete+0x70>
	conn->handle   = handle;
    4956:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    4958:	a906      	add	r1, sp, #24
	conn->handle   = handle;
    495a:	f820 6b48 	strh.w	r6, [r0], #72
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    495e:	f7fe fe0f 	bl	3580 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    4962:	7e2a      	ldrb	r2, [r5, #24]
    4964:	7deb      	ldrb	r3, [r5, #23]
    4966:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    496a:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    496e:	7eaa      	ldrb	r2, [r5, #26]
    4970:	7e6b      	ldrb	r3, [r5, #25]
    4972:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    4976:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    497a:	7eeb      	ldrb	r3, [r5, #27]
    497c:	7f2a      	ldrb	r2, [r5, #28]
    497e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    4982:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
	conn->role = evt->role;
    4986:	78ee      	ldrb	r6, [r5, #3]
    4988:	70e6      	strb	r6, [r4, #3]
	if (conn->role == BT_HCI_ROLE_SLAVE) {
    498a:	2e01      	cmp	r6, #1
    498c:	d11a      	bne.n	49c4 <le_enh_conn_complete+0x124>
			bt_addr_le_copy(&conn->le.resp_addr, &bt_dev.id_addr);
    498e:	4f36      	ldr	r7, [pc, #216]	; (4a68 <le_enh_conn_complete+0x1c8>)
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
    4990:	a904      	add	r1, sp, #16
    4992:	f104 004f 	add.w	r0, r4, #79	; 0x4f
    4996:	f7fe fdf3 	bl	3580 <bt_addr_le_copy>
			bt_addr_le_copy(&conn->le.resp_addr, &bt_dev.id_addr);
    499a:	4639      	mov	r1, r7
    499c:	f104 0056 	add.w	r0, r4, #86	; 0x56
    49a0:	f7fe fdee 	bl	3580 <bt_addr_le_copy>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    49a4:	2106      	movs	r1, #6
    49a6:	f107 0070 	add.w	r0, r7, #112	; 0x70
    49aa:	f7fe fdfd 	bl	35a8 <atomic_test_bit>
    49ae:	b148      	cbz	r0, 49c4 <le_enh_conn_complete+0x124>
		    BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    49b0:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
    49b4:	2200      	movs	r2, #0
    49b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    49ba:	4313      	orrs	r3, r2
    49bc:	d002      	beq.n	49c4 <le_enh_conn_complete+0x124>
			set_advertise_enable(true);
    49be:	4630      	mov	r0, r6
    49c0:	f7fe fffe 	bl	39c0 <set_advertise_enable>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    49c4:	2103      	movs	r1, #3
    49c6:	4620      	mov	r0, r4
    49c8:	f001 fc40 	bl	624c <bt_conn_set_state>
	if (conn->state != BT_CONN_CONNECTED) {
    49cc:	7b23      	ldrb	r3, [r4, #12]
    49ce:	2b03      	cmp	r3, #3
    49d0:	d118      	bne.n	4a04 <le_enh_conn_complete+0x164>
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    49d2:	78eb      	ldrb	r3, [r5, #3]
    49d4:	b123      	cbz	r3, 49e0 <le_enh_conn_complete+0x140>
	    BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features)) {
    49d6:	4b24      	ldr	r3, [pc, #144]	; (4a68 <le_enh_conn_complete+0x1c8>)
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    49d8:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    49dc:	0719      	lsls	r1, r3, #28
    49de:	d518      	bpl.n	4a12 <le_enh_conn_complete+0x172>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    49e0:	2102      	movs	r1, #2
    49e2:	f242 0016 	movw	r0, #8214	; 0x2016
    49e6:	f7fe fec5 	bl	3774 <bt_hci_cmd_create>
	if (!buf) {
    49ea:	4605      	mov	r5, r0
    49ec:	b188      	cbz	r0, 4a12 <le_enh_conn_complete+0x172>
	cp = net_buf_add(buf, sizeof(*cp));
    49ee:	2102      	movs	r1, #2
    49f0:	3008      	adds	r0, #8
    49f2:	f014 fcdb 	bl	193ac <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    49f6:	8823      	ldrh	r3, [r4, #0]
    49f8:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    49fa:	4629      	mov	r1, r5
    49fc:	f242 0016 	movw	r0, #8214	; 0x2016
    4a00:	f7ff fa40 	bl	3e84 <bt_hci_cmd_send>
	bt_conn_unref(conn);
    4a04:	4620      	mov	r0, r4
    4a06:	f001 fd6b 	bl	64e0 <bt_conn_unref>
	bt_le_scan_update(false);
    4a0a:	2000      	movs	r0, #0
    4a0c:	f7ff fac2 	bl	3f94 <bt_le_scan_update>
    4a10:	e765      	b.n	48de <le_enh_conn_complete+0x3e>
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features)) {
    4a12:	4d15      	ldr	r5, [pc, #84]	; (4a68 <le_enh_conn_complete+0x1c8>)
    4a14:	f895 2079 	ldrb.w	r2, [r5, #121]	; 0x79
    4a18:	07d2      	lsls	r2, r2, #31
    4a1a:	d508      	bpl.n	4a2e <le_enh_conn_complete+0x18e>
		err = hci_le_set_phy(conn);
    4a1c:	4620      	mov	r0, r4
    4a1e:	f7ff fef5 	bl	480c <hci_le_set_phy.isra.29>
		if (!err) {
    4a22:	b920      	cbnz	r0, 4a2e <le_enh_conn_complete+0x18e>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    4a24:	2180      	movs	r1, #128	; 0x80
    4a26:	1d20      	adds	r0, r4, #4
    4a28:	f7fe fdad 	bl	3586 <atomic_or>
    4a2c:	e7ea      	b.n	4a04 <le_enh_conn_complete+0x164>
	if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    4a2e:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    4a32:	069b      	lsls	r3, r3, #26
    4a34:	d506      	bpl.n	4a44 <le_enh_conn_complete+0x1a4>
		err = hci_le_set_data_len(conn);
    4a36:	4620      	mov	r0, r4
    4a38:	f7ff ff08 	bl	484c <hci_le_set_data_len.isra.30>
		if (!err) {
    4a3c:	b910      	cbnz	r0, 4a44 <le_enh_conn_complete+0x1a4>
    4a3e:	f44f 7180 	mov.w	r1, #256	; 0x100
    4a42:	e7f0      	b.n	4a26 <le_enh_conn_complete+0x186>
	update_conn_param(conn);
    4a44:	4620      	mov	r0, r4
    4a46:	f7fe fddd 	bl	3604 <update_conn_param>
    4a4a:	e7db      	b.n	4a04 <le_enh_conn_complete+0x164>
    4a4c:	20009d48 	.word	0x20009d48
    4a50:	00003e25 	.word	0x00003e25
    4a54:	00023dbe 	.word	0x00023dbe
    4a58:	00022d86 	.word	0x00022d86
    4a5c:	000234ff 	.word	0x000234ff
    4a60:	000272e8 	.word	0x000272e8
    4a64:	00024150 	.word	0x00024150
    4a68:	20009cd8 	.word	0x20009cd8

00004a6c <le_conn_param_neg_reply>:
{
    4a6c:	b570      	push	{r4, r5, r6, lr}
    4a6e:	4606      	mov	r6, r0
    4a70:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    4a72:	f242 0021 	movw	r0, #8225	; 0x2021
    4a76:	2103      	movs	r1, #3
    4a78:	f7fe fe7c 	bl	3774 <bt_hci_cmd_create>
	if (!buf) {
    4a7c:	4604      	mov	r4, r0
    4a7e:	b160      	cbz	r0, 4a9a <le_conn_param_neg_reply+0x2e>
	cp = net_buf_add(buf, sizeof(*cp));
    4a80:	2103      	movs	r1, #3
    4a82:	3008      	adds	r0, #8
    4a84:	f014 fc92 	bl	193ac <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    4a88:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    4a8a:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    4a8c:	4621      	mov	r1, r4
    4a8e:	f242 0021 	movw	r0, #8225	; 0x2021
}
    4a92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    4a96:	f7ff b9f5 	b.w	3e84 <bt_hci_cmd_send>
}
    4a9a:	f06f 0036 	mvn.w	r0, #54	; 0x36
    4a9e:	bd70      	pop	{r4, r5, r6, pc}

00004aa0 <hci_tx_thread>:
{
    4aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    4aa4:	f8df a148 	ldr.w	sl, [pc, #328]	; 4bf0 <hci_tx_thread+0x150>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    4aa8:	4d4f      	ldr	r5, [pc, #316]	; (4be8 <hci_tx_thread+0x148>)
{
    4aaa:	b085      	sub	sp, #20
		events[0].state = K_POLL_STATE_NOT_READY;
    4aac:	f89a 300d 	ldrb.w	r3, [sl, #13]
			ev_count += bt_conn_prepare_events(&events[1]);
    4ab0:	484e      	ldr	r0, [pc, #312]	; (4bec <hci_tx_thread+0x14c>)
		events[0].state = K_POLL_STATE_NOT_READY;
    4ab2:	f36f 1307 	bfc	r3, #4, #4
    4ab6:	f88a 300d 	strb.w	r3, [sl, #13]
			ev_count += bt_conn_prepare_events(&events[1]);
    4aba:	f001 fb45 	bl	6148 <bt_conn_prepare_events>
    4abe:	f100 0901 	add.w	r9, r0, #1
		err = k_poll(events, ev_count, K_FOREVER);
    4ac2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4ac6:	4649      	mov	r1, r9
    4ac8:	4849      	ldr	r0, [pc, #292]	; (4bf0 <hci_tx_thread+0x150>)
    4aca:	f01d fde7 	bl	2269c <k_poll>
		BT_ASSERT(err == 0);
    4ace:	b948      	cbnz	r0, 4ae4 <hci_tx_thread+0x44>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    4ad0:	4c48      	ldr	r4, [pc, #288]	; (4bf4 <hci_tx_thread+0x154>)
    4ad2:	4e47      	ldr	r6, [pc, #284]	; (4bf0 <hci_tx_thread+0x150>)
    4ad4:	f104 0bd4 	add.w	fp, r4, #212	; 0xd4
	for (; count; ev++, count--) {
    4ad8:	f1b9 0f00 	cmp.w	r9, #0
    4adc:	d111      	bne.n	4b02 <hci_tx_thread+0x62>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    4ade:	f01c ffed 	bl	21abc <_impl_k_yield>
    4ae2:	e7e3      	b.n	4aac <hci_tx_thread+0xc>
		BT_ASSERT(err == 0);
    4ae4:	4b40      	ldr	r3, [pc, #256]	; (4be8 <hci_tx_thread+0x148>)
    4ae6:	9301      	str	r3, [sp, #4]
    4ae8:	9300      	str	r3, [sp, #0]
    4aea:	4a43      	ldr	r2, [pc, #268]	; (4bf8 <hci_tx_thread+0x158>)
    4aec:	4b43      	ldr	r3, [pc, #268]	; (4bfc <hci_tx_thread+0x15c>)
    4aee:	4944      	ldr	r1, [pc, #272]	; (4c00 <hci_tx_thread+0x160>)
    4af0:	4844      	ldr	r0, [pc, #272]	; (4c04 <hci_tx_thread+0x164>)
	BT_ASSERT(buf);
    4af2:	f7fd fbd5 	bl	22a0 <printk>
    4af6:	4040      	eors	r0, r0
    4af8:	f380 8811 	msr	BASEPRI, r0
    4afc:	f04f 0004 	mov.w	r0, #4
    4b00:	df02      	svc	2
		switch (ev->state) {
    4b02:	7b73      	ldrb	r3, [r6, #13]
    4b04:	091b      	lsrs	r3, r3, #4
    4b06:	2b01      	cmp	r3, #1
    4b08:	d952      	bls.n	4bb0 <hci_tx_thread+0x110>
    4b0a:	2b04      	cmp	r3, #4
    4b0c:	d162      	bne.n	4bd4 <hci_tx_thread+0x134>
			if (ev->tag == BT_EVENT_CMD_TX) {
    4b0e:	7b37      	ldrb	r7, [r6, #12]
    4b10:	2f00      	cmp	r7, #0
    4b12:	d151      	bne.n	4bb8 <hci_tx_thread+0x118>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    4b14:	4639      	mov	r1, r7
    4b16:	4658      	mov	r0, fp
    4b18:	f014 fbc0 	bl	1929c <net_buf_get>
	BT_ASSERT(buf);
    4b1c:	4680      	mov	r8, r0
    4b1e:	b938      	cbnz	r0, 4b30 <hci_tx_thread+0x90>
    4b20:	4b31      	ldr	r3, [pc, #196]	; (4be8 <hci_tx_thread+0x148>)
    4b22:	9301      	str	r3, [sp, #4]
    4b24:	9300      	str	r3, [sp, #0]
    4b26:	4a34      	ldr	r2, [pc, #208]	; (4bf8 <hci_tx_thread+0x158>)
    4b28:	4b37      	ldr	r3, [pc, #220]	; (4c08 <hci_tx_thread+0x168>)
    4b2a:	4935      	ldr	r1, [pc, #212]	; (4c00 <hci_tx_thread+0x160>)
    4b2c:	4837      	ldr	r0, [pc, #220]	; (4c0c <hci_tx_thread+0x16c>)
    4b2e:	e7e0      	b.n	4af2 <hci_tx_thread+0x52>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    4b30:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    4b34:	4836      	ldr	r0, [pc, #216]	; (4c10 <hci_tx_thread+0x170>)
    4b36:	f01d f89d 	bl	21c74 <_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    4b3a:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
    4b3e:	b16b      	cbz	r3, 4b5c <hci_tx_thread+0xbc>
		BT_ERR("Uncleared pending sent_cmd");
    4b40:	4b31      	ldr	r3, [pc, #196]	; (4c08 <hci_tx_thread+0x168>)
    4b42:	4a2d      	ldr	r2, [pc, #180]	; (4bf8 <hci_tx_thread+0x158>)
    4b44:	492e      	ldr	r1, [pc, #184]	; (4c00 <hci_tx_thread+0x160>)
    4b46:	9501      	str	r5, [sp, #4]
    4b48:	9500      	str	r5, [sp, #0]
    4b4a:	4832      	ldr	r0, [pc, #200]	; (4c14 <hci_tx_thread+0x174>)
    4b4c:	f7fd fba8 	bl	22a0 <printk>
		net_buf_unref(bt_dev.sent_cmd);
    4b50:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
    4b54:	f014 fbcc 	bl	192f0 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    4b58:	f8c4 70c0 	str.w	r7, [r4, #192]	; 0xc0
	bt_dev.sent_cmd = net_buf_ref(buf);
    4b5c:	4640      	mov	r0, r8
    4b5e:	f014 fbf5 	bl	1934c <net_buf_ref>
    4b62:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	err = bt_send(buf);
    4b66:	4640      	mov	r0, r8
    4b68:	f7ff f984 	bl	3e74 <bt_send>
	if (err) {
    4b6c:	b300      	cbz	r0, 4bb0 <hci_tx_thread+0x110>
		BT_ERR("Unable to send to driver (err %d)", err);
    4b6e:	4b26      	ldr	r3, [pc, #152]	; (4c08 <hci_tx_thread+0x168>)
    4b70:	4a21      	ldr	r2, [pc, #132]	; (4bf8 <hci_tx_thread+0x158>)
    4b72:	4923      	ldr	r1, [pc, #140]	; (4c00 <hci_tx_thread+0x160>)
    4b74:	9001      	str	r0, [sp, #4]
    4b76:	9502      	str	r5, [sp, #8]
    4b78:	9500      	str	r5, [sp, #0]
    4b7a:	4827      	ldr	r0, [pc, #156]	; (4c18 <hci_tx_thread+0x178>)
    4b7c:	f7fd fb90 	bl	22a0 <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    4b80:	4823      	ldr	r0, [pc, #140]	; (4c10 <hci_tx_thread+0x170>)
    4b82:	f01d f817 	bl	21bb4 <_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED,
    4b86:	4640      	mov	r0, r8
    4b88:	f014 faf4 	bl	19174 <net_buf_id>
    4b8c:	4b23      	ldr	r3, [pc, #140]	; (4c1c <hci_tx_thread+0x17c>)
    4b8e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    4b92:	2200      	movs	r2, #0
    4b94:	211f      	movs	r1, #31
    4b96:	8840      	ldrh	r0, [r0, #2]
    4b98:	f7fe fd78 	bl	368c <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    4b9c:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
    4ba0:	f014 fba6 	bl	192f0 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    4ba4:	2300      	movs	r3, #0
		net_buf_unref(buf);
    4ba6:	4640      	mov	r0, r8
		bt_dev.sent_cmd = NULL;
    4ba8:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
		net_buf_unref(buf);
    4bac:	f014 fba0 	bl	192f0 <net_buf_unref>
	for (; count; ev++, count--) {
    4bb0:	3614      	adds	r6, #20
    4bb2:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    4bb6:	e78f      	b.n	4ad8 <hci_tx_thread+0x38>
				if (ev->tag == BT_EVENT_CONN_TX_NOTIFY) {
    4bb8:	2f01      	cmp	r7, #1
    4bba:	d104      	bne.n	4bc6 <hci_tx_thread+0x126>
					conn = CONTAINER_OF(ev->fifo,
    4bbc:	6930      	ldr	r0, [r6, #16]
					bt_conn_notify_tx(conn);
    4bbe:	381c      	subs	r0, #28
    4bc0:	f001 f9ee 	bl	5fa0 <bt_conn_notify_tx>
    4bc4:	e7f4      	b.n	4bb0 <hci_tx_thread+0x110>
				} else if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    4bc6:	2f02      	cmp	r7, #2
    4bc8:	d1f2      	bne.n	4bb0 <hci_tx_thread+0x110>
					conn = CONTAINER_OF(ev->fifo,
    4bca:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
    4bcc:	382c      	subs	r0, #44	; 0x2c
    4bce:	f001 fe23 	bl	6818 <bt_conn_process_tx>
    4bd2:	e7ed      	b.n	4bb0 <hci_tx_thread+0x110>
		switch (ev->state) {
    4bd4:	9301      	str	r3, [sp, #4]
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    4bd6:	9502      	str	r5, [sp, #8]
    4bd8:	9500      	str	r5, [sp, #0]
    4bda:	4b11      	ldr	r3, [pc, #68]	; (4c20 <hci_tx_thread+0x180>)
    4bdc:	4a11      	ldr	r2, [pc, #68]	; (4c24 <hci_tx_thread+0x184>)
    4bde:	4908      	ldr	r1, [pc, #32]	; (4c00 <hci_tx_thread+0x160>)
    4be0:	4811      	ldr	r0, [pc, #68]	; (4c28 <hci_tx_thread+0x188>)
    4be2:	f7fd fb5d 	bl	22a0 <printk>
    4be6:	e7e3      	b.n	4bb0 <hci_tx_thread+0x110>
    4be8:	00023dbe 	.word	0x00023dbe
    4bec:	20009dd4 	.word	0x20009dd4
    4bf0:	20009dc0 	.word	0x20009dc0
    4bf4:	20009cd8 	.word	0x20009cd8
    4bf8:	00022d86 	.word	0x00022d86
    4bfc:	0002364e 	.word	0x0002364e
    4c00:	000272e8 	.word	0x000272e8
    4c04:	000240a5 	.word	0x000240a5
    4c08:	00023636 	.word	0x00023636
    4c0c:	000240cf 	.word	0x000240cf
    4c10:	20009d80 	.word	0x20009d80
    4c14:	000240f4 	.word	0x000240f4
    4c18:	0002371a 	.word	0x0002371a
    4c1c:	200003b8 	.word	0x200003b8
    4c20:	0002363f 	.word	0x0002363f
    4c24:	00024016 	.word	0x00024016
    4c28:	0002411f 	.word	0x0002411f

00004c2c <bt_recv>:
{
    4c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	 * pointer to an enum causes issues on qemu_x86 because the true
	 * size is 8-bit, but the enum is 32-bit on qemu_x86. So we put in
	 * a temporary cast to 8-bit to ensure only 8 bits are read from
	 * the pointer.
	 */
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    4c30:	7d03      	ldrb	r3, [r0, #20]
	switch (bt_buf_get_type(buf)) {
    4c32:	2b01      	cmp	r3, #1
{
    4c34:	b095      	sub	sp, #84	; 0x54
    4c36:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    4c38:	d040      	beq.n	4cbc <bt_recv+0x90>
    4c3a:	2b03      	cmp	r3, #3
    4c3c:	f040 8434 	bne.w	54a8 <bt_recv+0x87c>
	struct bt_hci_acl_hdr *hdr = (void *)buf->data;
    4c40:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(hdr->handle);
    4c42:	881e      	ldrh	r6, [r3, #0]
	u16_t handle, len = sys_le16_to_cpu(hdr->len);
    4c44:	885d      	ldrh	r5, [r3, #2]
	acl(buf)->handle = bt_acl_handle(handle);
    4c46:	f3c6 030b 	ubfx	r3, r6, #0, #12
    4c4a:	82c3      	strh	r3, [r0, #22]
	acl(buf)->id = BT_CONN_ID_INVALID;
    4c4c:	23ff      	movs	r3, #255	; 0xff
    4c4e:	7543      	strb	r3, [r0, #21]
	net_buf_pull(buf, sizeof(*hdr));
    4c50:	2104      	movs	r1, #4
    4c52:	3008      	adds	r0, #8
    4c54:	f014 fbfa 	bl	1944c <net_buf_simple_pull>
	if (buf->len != len) {
    4c58:	89a2      	ldrh	r2, [r4, #12]
    4c5a:	4295      	cmp	r5, r2
    4c5c:	d00e      	beq.n	4c7c <bt_recv+0x50>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    4c5e:	4ba2      	ldr	r3, [pc, #648]	; (4ee8 <bt_recv+0x2bc>)
    4c60:	9303      	str	r3, [sp, #12]
    4c62:	9201      	str	r2, [sp, #4]
    4c64:	9300      	str	r3, [sp, #0]
    4c66:	9502      	str	r5, [sp, #8]
    4c68:	4ba0      	ldr	r3, [pc, #640]	; (4eec <bt_recv+0x2c0>)
    4c6a:	4aa1      	ldr	r2, [pc, #644]	; (4ef0 <bt_recv+0x2c4>)
    4c6c:	49a1      	ldr	r1, [pc, #644]	; (4ef4 <bt_recv+0x2c8>)
    4c6e:	48a2      	ldr	r0, [pc, #648]	; (4ef8 <bt_recv+0x2cc>)
    4c70:	f7fd fb16 	bl	22a0 <printk>
	net_buf_unref(buf);
    4c74:	4620      	mov	r0, r4
    4c76:	f014 fb3b 	bl	192f0 <net_buf_unref>
    4c7a:	e01b      	b.n	4cb4 <bt_recv+0x88>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    4c7c:	8ae0      	ldrh	r0, [r4, #22]
    4c7e:	f001 fbc1 	bl	6404 <bt_conn_lookup_handle>
	if (!conn) {
    4c82:	4605      	mov	r5, r0
    4c84:	b958      	cbnz	r0, 4c9e <bt_recv+0x72>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    4c86:	4b98      	ldr	r3, [pc, #608]	; (4ee8 <bt_recv+0x2bc>)
    4c88:	8ae2      	ldrh	r2, [r4, #22]
    4c8a:	9302      	str	r3, [sp, #8]
    4c8c:	9201      	str	r2, [sp, #4]
    4c8e:	9300      	str	r3, [sp, #0]
    4c90:	4a97      	ldr	r2, [pc, #604]	; (4ef0 <bt_recv+0x2c4>)
    4c92:	4b96      	ldr	r3, [pc, #600]	; (4eec <bt_recv+0x2c0>)
    4c94:	4997      	ldr	r1, [pc, #604]	; (4ef4 <bt_recv+0x2c8>)
    4c96:	4899      	ldr	r0, [pc, #612]	; (4efc <bt_recv+0x2d0>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    4c98:	f7fd fb02 	bl	22a0 <printk>
    4c9c:	e7ea      	b.n	4c74 <bt_recv+0x48>
	acl(buf)->id = bt_conn_get_id(conn);
    4c9e:	f001 fe2b 	bl	68f8 <bt_conn_get_id>
	bt_conn_recv(conn, buf, flags);
    4ca2:	0b32      	lsrs	r2, r6, #12
	acl(buf)->id = bt_conn_get_id(conn);
    4ca4:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    4ca6:	4621      	mov	r1, r4
    4ca8:	4628      	mov	r0, r5
    4caa:	f001 f8b9 	bl	5e20 <bt_conn_recv>
	bt_conn_unref(conn);
    4cae:	4628      	mov	r0, r5
    4cb0:	f001 fc16 	bl	64e0 <bt_conn_unref>
		return 0;
    4cb4:	2000      	movs	r0, #0
}
    4cb6:	b015      	add	sp, #84	; 0x54
    4cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    4cbc:	6886      	ldr	r6, [r0, #8]
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    4cbe:	7832      	ldrb	r2, [r6, #0]
    4cc0:	2a13      	cmp	r2, #19
    4cc2:	f200 8402 	bhi.w	54ca <bt_recv+0x89e>
    4cc6:	4093      	lsls	r3, r2
    4cc8:	f413 2f0c 	tst.w	r3, #573440	; 0x8c000
    4ccc:	f000 83fd 	beq.w	54ca <bt_recv+0x89e>
    4cd0:	4b85      	ldr	r3, [pc, #532]	; (4ee8 <bt_recv+0x2bc>)
    4cd2:	9301      	str	r3, [sp, #4]
    4cd4:	9300      	str	r3, [sp, #0]
    4cd6:	4a86      	ldr	r2, [pc, #536]	; (4ef0 <bt_recv+0x2c4>)
    4cd8:	4b89      	ldr	r3, [pc, #548]	; (4f00 <bt_recv+0x2d4>)
    4cda:	4986      	ldr	r1, [pc, #536]	; (4ef4 <bt_recv+0x2c8>)
    4cdc:	4889      	ldr	r0, [pc, #548]	; (4f04 <bt_recv+0x2d8>)
    4cde:	f7fd fadf 	bl	22a0 <printk>
    4ce2:	4040      	eors	r0, r0
    4ce4:	f380 8811 	msr	BASEPRI, r0
    4ce8:	f04f 0004 	mov.w	r0, #4
    4cec:	df02      	svc	2
    4cee:	68a7      	ldr	r7, [r4, #8]
	if (evt->status) {
    4cf0:	783e      	ldrb	r6, [r7, #0]
    4cf2:	2e00      	cmp	r6, #0
    4cf4:	d1be      	bne.n	4c74 <bt_recv+0x48>
	u16_t handle = sys_le16_to_cpu(evt->handle);
    4cf6:	f8b7 8001 	ldrh.w	r8, [r7, #1]
	conn = bt_conn_lookup_handle(handle);
    4cfa:	4640      	mov	r0, r8
    4cfc:	f001 fb82 	bl	6404 <bt_conn_lookup_handle>
	if (!conn) {
    4d00:	4605      	mov	r5, r0
    4d02:	b9c8      	cbnz	r0, 4d38 <bt_recv+0x10c>
		BT_ERR("Unable to look up conn with handle %u", handle);
    4d04:	4b78      	ldr	r3, [pc, #480]	; (4ee8 <bt_recv+0x2bc>)
    4d06:	9302      	str	r3, [sp, #8]
    4d08:	e88d 0108 	stmia.w	sp, {r3, r8}
    4d0c:	4a78      	ldr	r2, [pc, #480]	; (4ef0 <bt_recv+0x2c4>)
    4d0e:	4b7e      	ldr	r3, [pc, #504]	; (4f08 <bt_recv+0x2dc>)
    4d10:	4978      	ldr	r1, [pc, #480]	; (4ef4 <bt_recv+0x2c8>)
    4d12:	487e      	ldr	r0, [pc, #504]	; (4f0c <bt_recv+0x2e0>)
    4d14:	f7fd fac4 	bl	22a0 <printk>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    4d18:	2106      	movs	r1, #6
    4d1a:	487d      	ldr	r0, [pc, #500]	; (4f10 <bt_recv+0x2e4>)
    4d1c:	f7fe fc44 	bl	35a8 <atomic_test_bit>
    4d20:	2800      	cmp	r0, #0
    4d22:	d0a7      	beq.n	4c74 <bt_recv+0x48>
	    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    4d24:	2105      	movs	r1, #5
    4d26:	487a      	ldr	r0, [pc, #488]	; (4f10 <bt_recv+0x2e4>)
    4d28:	f7fe fc3e 	bl	35a8 <atomic_test_bit>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    4d2c:	2800      	cmp	r0, #0
    4d2e:	d1a1      	bne.n	4c74 <bt_recv+0x48>
		set_advertise_enable(true);
    4d30:	2001      	movs	r0, #1
    4d32:	f7fe fe45 	bl	39c0 <set_advertise_enable>
    4d36:	e79d      	b.n	4c74 <bt_recv+0x48>
	conn->err = evt->reason;
    4d38:	78fb      	ldrb	r3, [r7, #3]
    4d3a:	72c3      	strb	r3, [r0, #11]
	k_call_stacks_analyze();
    4d3c:	f01c faa2 	bl	21284 <k_call_stacks_analyze>
			break;
		}
	}
#else
	for (i = 0; i < size; i++) {
		if ((unsigned char)stack[i] == 0xaa) {
    4d40:	4a74      	ldr	r2, [pc, #464]	; (4f14 <bt_recv+0x2e8>)
	size_t unused = 0;
    4d42:	4633      	mov	r3, r6
		if ((unsigned char)stack[i] == 0xaa) {
    4d44:	5c99      	ldrb	r1, [r3, r2]
    4d46:	29aa      	cmp	r1, #170	; 0xaa
    4d48:	d103      	bne.n	4d52 <bt_recv+0x126>
			unused++;
    4d4a:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
    4d4c:	f5b3 7f6b 	cmp.w	r3, #940	; 0x3ac
    4d50:	d1f8      	bne.n	4d44 <bt_recv+0x118>
	unsigned int pcnt, unused = 0;

	unused = stack_unused_space_get(stack, size);

	/* Calculate the real size reserved for the stack */
	pcnt = ((size - unused) * 100) / size;
    4d52:	f5c3 706b 	rsb	r0, r3, #940	; 0x3ac
    4d56:	f44f 726b 	mov.w	r2, #940	; 0x3ac
    4d5a:	2164      	movs	r1, #100	; 0x64

	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
    4d5c:	e88d 0005 	stmia.w	sp, {r0, r2}
	pcnt = ((size - unused) * 100) / size;
    4d60:	4341      	muls	r1, r0
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
    4d62:	486d      	ldr	r0, [pc, #436]	; (4f18 <bt_recv+0x2ec>)
	pcnt = ((size - unused) * 100) / size;
    4d64:	fbb1 f1f2 	udiv	r1, r1, r2
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
    4d68:	9102      	str	r1, [sp, #8]
    4d6a:	496c      	ldr	r1, [pc, #432]	; (4f1c <bt_recv+0x2f0>)
    4d6c:	f7fd fa98 	bl	22a0 <printk>
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    4d70:	2100      	movs	r1, #0
    4d72:	4628      	mov	r0, r5
    4d74:	f001 fa6a 	bl	624c <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
    4d78:	78ae      	ldrb	r6, [r5, #2]
	conn->handle = 0;
    4d7a:	2300      	movs	r3, #0
    4d7c:	802b      	strh	r3, [r5, #0]
	if (conn->type != BT_CONN_TYPE_LE) {
    4d7e:	b10e      	cbz	r6, 4d84 <bt_recv+0x158>
	bt_conn_unref(conn);
    4d80:	4628      	mov	r0, r5
    4d82:	e15c      	b.n	503e <bt_recv+0x412>
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    4d84:	4631      	mov	r1, r6
    4d86:	1d28      	adds	r0, r5, #4
    4d88:	f7fe fc0e 	bl	35a8 <atomic_test_bit>
    4d8c:	b130      	cbz	r0, 4d9c <bt_recv+0x170>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    4d8e:	4628      	mov	r0, r5
    4d90:	2101      	movs	r1, #1
    4d92:	f001 fa5b 	bl	624c <bt_conn_set_state>
		bt_le_scan_update(false);
    4d96:	4630      	mov	r0, r6
    4d98:	f7ff f8fc 	bl	3f94 <bt_le_scan_update>
	bt_conn_unref(conn);
    4d9c:	4628      	mov	r0, r5
    4d9e:	f001 fb9f 	bl	64e0 <bt_conn_unref>
    4da2:	e7b9      	b.n	4d18 <bt_recv+0xec>
    4da4:	68a6      	ldr	r6, [r4, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    4da6:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    4daa:	4638      	mov	r0, r7
    4dac:	f001 fb2a 	bl	6404 <bt_conn_lookup_handle>
	if (!conn) {
    4db0:	4605      	mov	r5, r0
    4db2:	b940      	cbnz	r0, 4dc6 <bt_recv+0x19a>
		BT_ERR("Unable to look up conn with handle %u", handle);
    4db4:	4b4c      	ldr	r3, [pc, #304]	; (4ee8 <bt_recv+0x2bc>)
    4db6:	9302      	str	r3, [sp, #8]
    4db8:	e88d 0088 	stmia.w	sp, {r3, r7}
    4dbc:	4b58      	ldr	r3, [pc, #352]	; (4f20 <bt_recv+0x2f4>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    4dbe:	4a4c      	ldr	r2, [pc, #304]	; (4ef0 <bt_recv+0x2c4>)
    4dc0:	494c      	ldr	r1, [pc, #304]	; (4ef4 <bt_recv+0x2c8>)
    4dc2:	4852      	ldr	r0, [pc, #328]	; (4f0c <bt_recv+0x2e0>)
    4dc4:	e768      	b.n	4c98 <bt_recv+0x6c>
	if (evt->status) {
    4dc6:	7833      	ldrb	r3, [r6, #0]
    4dc8:	7882      	ldrb	r2, [r0, #2]
    4dca:	b123      	cbz	r3, 4dd6 <bt_recv+0x1aa>
		if (conn->type == BT_CONN_TYPE_LE) {
    4dcc:	2a00      	cmp	r2, #0
    4dce:	d1d7      	bne.n	4d80 <bt_recv+0x154>
			conn->required_sec_level = conn->sec_level;
    4dd0:	7a03      	ldrb	r3, [r0, #8]
    4dd2:	7243      	strb	r3, [r0, #9]
    4dd4:	e7d4      	b.n	4d80 <bt_recv+0x154>
	conn->encrypt = evt->encrypt;
    4dd6:	78f3      	ldrb	r3, [r6, #3]
    4dd8:	7283      	strb	r3, [r0, #10]
	if (conn->type == BT_CONN_TYPE_LE) {
    4dda:	b9e2      	cbnz	r2, 4e16 <bt_recv+0x1ea>
		if (conn->encrypt) {
    4ddc:	b10b      	cbz	r3, 4de2 <bt_recv+0x1b6>
		bt_smp_update_keys(conn);
    4dde:	f006 fb7d 	bl	b4dc <bt_smp_update_keys>
		update_sec_level(conn);
    4de2:	4628      	mov	r0, r5
    4de4:	f7fe fc1c 	bl	3620 <update_sec_level>
    4de8:	e015      	b.n	4e16 <bt_recv+0x1ea>
    4dea:	68a6      	ldr	r6, [r4, #8]
	handle = sys_le16_to_cpu(evt->handle);
    4dec:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    4df0:	4638      	mov	r0, r7
    4df2:	f001 fb07 	bl	6404 <bt_conn_lookup_handle>
	if (!conn) {
    4df6:	4605      	mov	r5, r0
    4df8:	b928      	cbnz	r0, 4e06 <bt_recv+0x1da>
		BT_ERR("Unable to look up conn with handle %u", handle);
    4dfa:	4b3b      	ldr	r3, [pc, #236]	; (4ee8 <bt_recv+0x2bc>)
    4dfc:	9302      	str	r3, [sp, #8]
    4dfe:	e88d 0088 	stmia.w	sp, {r3, r7}
    4e02:	4b48      	ldr	r3, [pc, #288]	; (4f24 <bt_recv+0x2f8>)
    4e04:	e7db      	b.n	4dbe <bt_recv+0x192>
	if (evt->status) {
    4e06:	7831      	ldrb	r1, [r6, #0]
    4e08:	b111      	cbz	r1, 4e10 <bt_recv+0x1e4>
		bt_l2cap_encrypt_change(conn, evt->status);
    4e0a:	f001 ff77 	bl	6cfc <bt_l2cap_encrypt_change>
    4e0e:	e731      	b.n	4c74 <bt_recv+0x48>
	if (conn->type == BT_CONN_TYPE_LE) {
    4e10:	7883      	ldrb	r3, [r0, #2]
    4e12:	2b00      	cmp	r3, #0
    4e14:	d0e3      	beq.n	4dde <bt_recv+0x1b2>
	bt_l2cap_encrypt_change(conn, evt->status);
    4e16:	4628      	mov	r0, r5
    4e18:	7831      	ldrb	r1, [r6, #0]
    4e1a:	f001 ff6f 	bl	6cfc <bt_l2cap_encrypt_change>
	bt_conn_security_changed(conn);
    4e1e:	4628      	mov	r0, r5
    4e20:	f000 ff84 	bl	5d2c <bt_conn_security_changed>
    4e24:	e7ac      	b.n	4d80 <bt_recv+0x154>
    4e26:	68a1      	ldr	r1, [r4, #8]
	enh.status         = evt->status;
    4e28:	780b      	ldrb	r3, [r1, #0]
    4e2a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	enh.handle         = evt->handle;
    4e2e:	f8b1 3001 	ldrh.w	r3, [r1, #1]
    4e32:	f8ad 3031 	strh.w	r3, [sp, #49]	; 0x31
	enh.role           = evt->role;
    4e36:	78cb      	ldrb	r3, [r1, #3]
    4e38:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
	enh.interval       = evt->interval;
    4e3c:	f8b1 300b 	ldrh.w	r3, [r1, #11]
    4e40:	f8ad 3047 	strh.w	r3, [sp, #71]	; 0x47
	enh.latency        = evt->latency;
    4e44:	f8b1 300d 	ldrh.w	r3, [r1, #13]
    4e48:	f8ad 3049 	strh.w	r3, [sp, #73]	; 0x49
	enh.supv_timeout   = evt->supv_timeout;
    4e4c:	f8b1 300f 	ldrh.w	r3, [r1, #15]
    4e50:	f8ad 304b 	strh.w	r3, [sp, #75]	; 0x4b
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
    4e54:	ae0d      	add	r6, sp, #52	; 0x34
	enh.clock_accuracy = evt->clock_accuracy;
    4e56:	7c4b      	ldrb	r3, [r1, #17]
    4e58:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
    4e5c:	3104      	adds	r1, #4
    4e5e:	4630      	mov	r0, r6
    4e60:	f7fe fb8e 	bl	3580 <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
    4e64:	2500      	movs	r5, #0
    4e66:	2206      	movs	r2, #6
    4e68:	a908      	add	r1, sp, #32
    4e6a:	f10d 003b 	add.w	r0, sp, #59	; 0x3b
    4e6e:	9508      	str	r5, [sp, #32]
    4e70:	f8ad 5024 	strh.w	r5, [sp, #36]	; 0x24
    4e74:	f7fb fc8d 	bl	792 <memcpy>
		keys = bt_keys_find_irk(addr);
    4e78:	4630      	mov	r0, r6
    4e7a:	f006 fc47 	bl	b70c <bt_keys_find_irk>
		if (keys) {
    4e7e:	4607      	mov	r7, r0
    4e80:	b1a8      	cbz	r0, 4eae <bt_recv+0x282>
	if (id_addr != &enh.peer_addr) {
    4e82:	42b0      	cmp	r0, r6
    4e84:	d013      	beq.n	4eae <bt_recv+0x282>
    4e86:	2206      	movs	r2, #6
    4e88:	f10d 0135 	add.w	r1, sp, #53	; 0x35
    4e8c:	f10d 0041 	add.w	r0, sp, #65	; 0x41
    4e90:	f7fb fc7f 	bl	792 <memcpy>
		bt_addr_le_copy(&enh.peer_addr, id_addr);
    4e94:	4639      	mov	r1, r7
    4e96:	4630      	mov	r0, r6
    4e98:	f7fe fb72 	bl	3580 <bt_addr_le_copy>
		enh.peer_addr.type += BT_ADDR_LE_PUBLIC_ID;
    4e9c:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    4ea0:	3302      	adds	r3, #2
    4ea2:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
	le_enh_conn_complete(&enh);
    4ea6:	a80c      	add	r0, sp, #48	; 0x30
		le_enh_conn_complete((void *)buf->data);
    4ea8:	f7ff fcfa 	bl	48a0 <le_enh_conn_complete>
    4eac:	e6e2      	b.n	4c74 <bt_recv+0x48>
    4eae:	2206      	movs	r2, #6
    4eb0:	a90a      	add	r1, sp, #40	; 0x28
    4eb2:	f10d 0041 	add.w	r0, sp, #65	; 0x41
		bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
    4eb6:	950a      	str	r5, [sp, #40]	; 0x28
    4eb8:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
    4ebc:	f7fb fc69 	bl	792 <memcpy>
    4ec0:	e7f1      	b.n	4ea6 <bt_recv+0x27a>
		le_enh_conn_complete((void *)buf->data);
    4ec2:	68a0      	ldr	r0, [r4, #8]
    4ec4:	e7f0      	b.n	4ea8 <bt_recv+0x27c>
    4ec6:	68a5      	ldr	r5, [r4, #8]
	handle = sys_le16_to_cpu(evt->handle);
    4ec8:	f8b5 7001 	ldrh.w	r7, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    4ecc:	4638      	mov	r0, r7
    4ece:	f001 fa99 	bl	6404 <bt_conn_lookup_handle>
	if (!conn) {
    4ed2:	4606      	mov	r6, r0
    4ed4:	bb60      	cbnz	r0, 4f30 <bt_recv+0x304>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    4ed6:	4b04      	ldr	r3, [pc, #16]	; (4ee8 <bt_recv+0x2bc>)
    4ed8:	9302      	str	r3, [sp, #8]
    4eda:	e88d 0088 	stmia.w	sp, {r3, r7}
    4ede:	4b12      	ldr	r3, [pc, #72]	; (4f28 <bt_recv+0x2fc>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    4ee0:	4a03      	ldr	r2, [pc, #12]	; (4ef0 <bt_recv+0x2c4>)
    4ee2:	4904      	ldr	r1, [pc, #16]	; (4ef4 <bt_recv+0x2c8>)
    4ee4:	4811      	ldr	r0, [pc, #68]	; (4f2c <bt_recv+0x300>)
    4ee6:	e6d7      	b.n	4c98 <bt_recv+0x6c>
    4ee8:	00023dbe 	.word	0x00023dbe
    4eec:	000234c8 	.word	0x000234c8
    4ef0:	00022d86 	.word	0x00022d86
    4ef4:	000272e8 	.word	0x000272e8
    4ef8:	00023ce6 	.word	0x00023ce6
    4efc:	00023d1a 	.word	0x00023d1a
    4f00:	0002362c 	.word	0x0002362c
    4f04:	00023ea5 	.word	0x00023ea5
    4f08:	000234ea 	.word	0x000234ea
    4f0c:	00023d4c 	.word	0x00023d4c
    4f10:	20009d48 	.word	0x20009d48
    4f14:	20005190 	.word	0x20005190
    4f18:	00023d8b 	.word	0x00023d8b
    4f1c:	00023d82 	.word	0x00023d82
    4f20:	000235b9 	.word	0x000235b9
    4f24:	000235cc 	.word	0x000235cc
    4f28:	00023568 	.word	0x00023568
    4f2c:	00023dbf 	.word	0x00023dbf
	if (!evt->status) {
    4f30:	782b      	ldrb	r3, [r5, #0]
    4f32:	b99b      	cbnz	r3, 4f5c <bt_recv+0x330>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    4f34:	792a      	ldrb	r2, [r5, #4]
    4f36:	78eb      	ldrb	r3, [r5, #3]
    4f38:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    4f3c:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    4f40:	79aa      	ldrb	r2, [r5, #6]
    4f42:	796b      	ldrb	r3, [r5, #5]
    4f44:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    4f48:	f8a0 3064 	strh.w	r3, [r0, #100]	; 0x64
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    4f4c:	79eb      	ldrb	r3, [r5, #7]
    4f4e:	7a2a      	ldrb	r2, [r5, #8]
    4f50:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    4f54:	f8a0 3066 	strh.w	r3, [r0, #102]	; 0x66
		notify_le_param_updated(conn);
    4f58:	f000 fe60 	bl	5c1c <notify_le_param_updated>
	bt_conn_unref(conn);
    4f5c:	4630      	mov	r0, r6
    4f5e:	e06e      	b.n	503e <bt_recv+0x412>
    4f60:	68a6      	ldr	r6, [r4, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    4f62:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    4f66:	4638      	mov	r0, r7
    4f68:	f001 fa4c 	bl	6404 <bt_conn_lookup_handle>
	if (!conn) {
    4f6c:	4605      	mov	r5, r0
    4f6e:	b928      	cbnz	r0, 4f7c <bt_recv+0x350>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    4f70:	4ba6      	ldr	r3, [pc, #664]	; (520c <bt_recv+0x5e0>)
    4f72:	9302      	str	r3, [sp, #8]
    4f74:	e88d 0088 	stmia.w	sp, {r3, r7}
    4f78:	4ba5      	ldr	r3, [pc, #660]	; (5210 <bt_recv+0x5e4>)
    4f7a:	e7b1      	b.n	4ee0 <bt_recv+0x2b4>
	if (!evt->status) {
    4f7c:	7833      	ldrb	r3, [r6, #0]
    4f7e:	b923      	cbnz	r3, 4f8a <bt_recv+0x35e>
		memcpy(conn->le.features, evt->features,
    4f80:	2208      	movs	r2, #8
    4f82:	1cf1      	adds	r1, r6, #3
    4f84:	3068      	adds	r0, #104	; 0x68
    4f86:	f7fb fc04 	bl	792 <memcpy>
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
    4f8a:	4ea2      	ldr	r6, [pc, #648]	; (5214 <bt_recv+0x5e8>)
    4f8c:	f896 2079 	ldrb.w	r2, [r6, #121]	; 0x79
    4f90:	07d2      	lsls	r2, r2, #31
    4f92:	d50c      	bpl.n	4fae <bt_recv+0x382>
    4f94:	f895 3069 	ldrb.w	r3, [r5, #105]	; 0x69
    4f98:	07db      	lsls	r3, r3, #31
    4f9a:	d508      	bpl.n	4fae <bt_recv+0x382>
		err = hci_le_set_phy(conn);
    4f9c:	4628      	mov	r0, r5
    4f9e:	f7ff fc35 	bl	480c <hci_le_set_phy.isra.29>
		if (!err) {
    4fa2:	b920      	cbnz	r0, 4fae <bt_recv+0x382>
    4fa4:	2180      	movs	r1, #128	; 0x80
    4fa6:	1d28      	adds	r0, r5, #4
    4fa8:	f7fe faed 	bl	3586 <atomic_or>
    4fac:	e6e8      	b.n	4d80 <bt_recv+0x154>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    4fae:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
    4fb2:	069f      	lsls	r7, r3, #26
    4fb4:	d57e      	bpl.n	50b4 <bt_recv+0x488>
    4fb6:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
    4fba:	069e      	lsls	r6, r3, #26
    4fbc:	d57a      	bpl.n	50b4 <bt_recv+0x488>
		err = hci_le_set_data_len(conn);
    4fbe:	4628      	mov	r0, r5
    4fc0:	f7ff fc44 	bl	484c <hci_le_set_data_len.isra.30>
		if (!err) {
    4fc4:	2800      	cmp	r0, #0
    4fc6:	d175      	bne.n	50b4 <bt_recv+0x488>
    4fc8:	f44f 7180 	mov.w	r1, #256	; 0x100
    4fcc:	e7eb      	b.n	4fa6 <bt_recv+0x37a>
    4fce:	68a3      	ldr	r3, [r4, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    4fd0:	78d9      	ldrb	r1, [r3, #3]
    4fd2:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    4fd4:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    4fd6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    4fda:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    4fde:	7959      	ldrb	r1, [r3, #5]
    4fe0:	791a      	ldrb	r2, [r3, #4]
    4fe2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    4fe6:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
	param.latency = sys_le16_to_cpu(evt->latency);
    4fea:	799a      	ldrb	r2, [r3, #6]
    4fec:	79d9      	ldrb	r1, [r3, #7]
    4fee:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    4ff2:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
	param.timeout = sys_le16_to_cpu(evt->timeout);
    4ff6:	7a1a      	ldrb	r2, [r3, #8]
    4ff8:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
    4ffa:	b2bd      	uxth	r5, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
    4ffc:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
    5000:	4628      	mov	r0, r5
	param.timeout = sys_le16_to_cpu(evt->timeout);
    5002:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
	conn = bt_conn_lookup_handle(handle);
    5006:	f001 f9fd 	bl	6404 <bt_conn_lookup_handle>
	if (!conn) {
    500a:	4680      	mov	r8, r0
    500c:	b970      	cbnz	r0, 502c <bt_recv+0x400>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    500e:	4b7f      	ldr	r3, [pc, #508]	; (520c <bt_recv+0x5e0>)
    5010:	9302      	str	r3, [sp, #8]
    5012:	e88d 0028 	stmia.w	sp, {r3, r5}
    5016:	4a80      	ldr	r2, [pc, #512]	; (5218 <bt_recv+0x5ec>)
    5018:	4b80      	ldr	r3, [pc, #512]	; (521c <bt_recv+0x5f0>)
    501a:	4981      	ldr	r1, [pc, #516]	; (5220 <bt_recv+0x5f4>)
    501c:	4881      	ldr	r0, [pc, #516]	; (5224 <bt_recv+0x5f8>)
    501e:	f7fd f93f 	bl	22a0 <printk>
		return le_conn_param_neg_reply(handle,
    5022:	2102      	movs	r1, #2
    5024:	4628      	mov	r0, r5
    5026:	f7ff fd21 	bl	4a6c <le_conn_param_neg_reply>
    502a:	e623      	b.n	4c74 <bt_recv+0x48>
	if (!le_param_req(conn, &param)) {
    502c:	a90c      	add	r1, sp, #48	; 0x30
    502e:	f000 fe09 	bl	5c44 <le_param_req>
    5032:	b938      	cbnz	r0, 5044 <bt_recv+0x418>
		err = le_conn_param_neg_reply(handle,
    5034:	211e      	movs	r1, #30
    5036:	4628      	mov	r0, r5
    5038:	f7ff fd18 	bl	4a6c <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    503c:	4640      	mov	r0, r8
	bt_conn_unref(conn);
    503e:	f001 fa4f 	bl	64e0 <bt_conn_unref>
    5042:	e617      	b.n	4c74 <bt_recv+0x48>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    5044:	210e      	movs	r1, #14
    5046:	f242 0020 	movw	r0, #8224	; 0x2020
    504a:	f7fe fb93 	bl	3774 <bt_hci_cmd_create>
	if (!buf) {
    504e:	4606      	mov	r6, r0
    5050:	2800      	cmp	r0, #0
    5052:	d0f3      	beq.n	503c <bt_recv+0x410>
	cp = net_buf_add(buf, sizeof(*cp));
    5054:	210e      	movs	r1, #14
    5056:	3008      	adds	r0, #8
    5058:	f014 f9a8 	bl	193ac <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
    505c:	220e      	movs	r2, #14
	cp = net_buf_add(buf, sizeof(*cp));
    505e:	4605      	mov	r5, r0
	memset(cp, 0, sizeof(*cp));
    5060:	2100      	movs	r1, #0
    5062:	f7fb fbc2 	bl	7ea <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    5066:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    506a:	806b      	strh	r3, [r5, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    506c:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    5070:	80ab      	strh	r3, [r5, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    5072:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
    5076:	80eb      	strh	r3, [r5, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    5078:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
	cp->handle = sys_cpu_to_le16(handle);
    507c:	802f      	strh	r7, [r5, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    507e:	812b      	strh	r3, [r5, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    5080:	4631      	mov	r1, r6
    5082:	f242 0020 	movw	r0, #8224	; 0x2020
    5086:	f7fe fefd 	bl	3e84 <bt_hci_cmd_send>
    508a:	e7d7      	b.n	503c <bt_recv+0x410>
	u16_t handle = sys_le16_to_cpu(evt->handle);
    508c:	68a3      	ldr	r3, [r4, #8]
    508e:	881e      	ldrh	r6, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
    5090:	4630      	mov	r0, r6
    5092:	f001 f9b7 	bl	6404 <bt_conn_lookup_handle>
	if (!conn) {
    5096:	4605      	mov	r5, r0
    5098:	b928      	cbnz	r0, 50a6 <bt_recv+0x47a>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    509a:	4b5c      	ldr	r3, [pc, #368]	; (520c <bt_recv+0x5e0>)
    509c:	9302      	str	r3, [sp, #8]
    509e:	e88d 0048 	stmia.w	sp, {r3, r6}
    50a2:	4b61      	ldr	r3, [pc, #388]	; (5228 <bt_recv+0x5fc>)
    50a4:	e71c      	b.n	4ee0 <bt_recv+0x2b4>
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_DATA_LEN)) {
    50a6:	2108      	movs	r1, #8
    50a8:	3004      	adds	r0, #4
    50aa:	f7fe fa9b 	bl	35e4 <atomic_test_and_clear_bit>
    50ae:	2800      	cmp	r0, #0
    50b0:	f43f ae66 	beq.w	4d80 <bt_recv+0x154>
	update_conn_param(conn);
    50b4:	4628      	mov	r0, r5
    50b6:	f7fe faa5 	bl	3604 <update_conn_param>
    50ba:	e661      	b.n	4d80 <bt_recv+0x154>
	u16_t handle = sys_le16_to_cpu(evt->handle);
    50bc:	68a3      	ldr	r3, [r4, #8]
    50be:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    50c2:	4630      	mov	r0, r6
    50c4:	f001 f99e 	bl	6404 <bt_conn_lookup_handle>
	if (!conn) {
    50c8:	4605      	mov	r5, r0
    50ca:	b928      	cbnz	r0, 50d8 <bt_recv+0x4ac>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    50cc:	4b4f      	ldr	r3, [pc, #316]	; (520c <bt_recv+0x5e0>)
    50ce:	9302      	str	r3, [sp, #8]
    50d0:	e88d 0048 	stmia.w	sp, {r3, r6}
    50d4:	4b55      	ldr	r3, [pc, #340]	; (522c <bt_recv+0x600>)
    50d6:	e703      	b.n	4ee0 <bt_recv+0x2b4>
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    50d8:	1d06      	adds	r6, r0, #4
    50da:	2107      	movs	r1, #7
    50dc:	4630      	mov	r0, r6
    50de:	f7fe fa81 	bl	35e4 <atomic_test_and_clear_bit>
    50e2:	2800      	cmp	r0, #0
    50e4:	f43f ae4c 	beq.w	4d80 <bt_recv+0x154>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    50e8:	4b4a      	ldr	r3, [pc, #296]	; (5214 <bt_recv+0x5e8>)
    50ea:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    50ee:	0698      	lsls	r0, r3, #26
    50f0:	d5e0      	bpl.n	50b4 <bt_recv+0x488>
    50f2:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
    50f6:	0699      	lsls	r1, r3, #26
    50f8:	d5dc      	bpl.n	50b4 <bt_recv+0x488>
		err = hci_le_set_data_len(conn);
    50fa:	4628      	mov	r0, r5
    50fc:	f7ff fba6 	bl	484c <hci_le_set_data_len.isra.30>
		if (!err) {
    5100:	2800      	cmp	r0, #0
    5102:	d1d7      	bne.n	50b4 <bt_recv+0x488>
    5104:	f44f 7180 	mov.w	r1, #256	; 0x100
    5108:	4630      	mov	r0, r6
    510a:	e74d      	b.n	4fa8 <bt_recv+0x37c>
    510c:	68a5      	ldr	r5, [r4, #8]
	handle = sys_le16_to_cpu(evt->handle);
    510e:	882f      	ldrh	r7, [r5, #0]
	conn = bt_conn_lookup_handle(handle);
    5110:	4638      	mov	r0, r7
    5112:	f001 f977 	bl	6404 <bt_conn_lookup_handle>
	if (!conn) {
    5116:	4606      	mov	r6, r0
    5118:	b928      	cbnz	r0, 5126 <bt_recv+0x4fa>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    511a:	4b3c      	ldr	r3, [pc, #240]	; (520c <bt_recv+0x5e0>)
    511c:	9302      	str	r3, [sp, #8]
    511e:	e88d 0088 	stmia.w	sp, {r3, r7}
    5122:	4b43      	ldr	r3, [pc, #268]	; (5230 <bt_recv+0x604>)
    5124:	e6dc      	b.n	4ee0 <bt_recv+0x2b4>
	if (evt->rand == 0 && evt->ediv == 0 && bt_smp_get_tk(conn, tk)) {
    5126:	f8d5 2002 	ldr.w	r2, [r5, #2]
    512a:	f8d5 3006 	ldr.w	r3, [r5, #6]
    512e:	4313      	orrs	r3, r2
    5130:	d127      	bne.n	5182 <bt_recv+0x556>
    5132:	896b      	ldrh	r3, [r5, #10]
    5134:	bb2b      	cbnz	r3, 5182 <bt_recv+0x556>
    5136:	a90c      	add	r1, sp, #48	; 0x30
    5138:	f006 fa52 	bl	b5e0 <bt_smp_get_tk>
    513c:	b308      	cbz	r0, 5182 <bt_recv+0x556>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    513e:	2112      	movs	r1, #18
    5140:	f242 001a 	movw	r0, #8218	; 0x201a
    5144:	f7fe fb16 	bl	3774 <bt_hci_cmd_create>
		if (!buf) {
    5148:	4607      	mov	r7, r0
    514a:	b948      	cbnz	r0, 5160 <bt_recv+0x534>
			BT_ERR("Out of command buffers");
    514c:	4b2f      	ldr	r3, [pc, #188]	; (520c <bt_recv+0x5e0>)
    514e:	9301      	str	r3, [sp, #4]
    5150:	9300      	str	r3, [sp, #0]
    5152:	4b37      	ldr	r3, [pc, #220]	; (5230 <bt_recv+0x604>)
		BT_ERR("Out of command buffers");
    5154:	4a30      	ldr	r2, [pc, #192]	; (5218 <bt_recv+0x5ec>)
    5156:	4932      	ldr	r1, [pc, #200]	; (5220 <bt_recv+0x5f4>)
    5158:	4836      	ldr	r0, [pc, #216]	; (5234 <bt_recv+0x608>)
    515a:	f7fd f8a1 	bl	22a0 <printk>
    515e:	e6fd      	b.n	4f5c <bt_recv+0x330>
		cp = net_buf_add(buf, sizeof(*cp));
    5160:	2112      	movs	r1, #18
    5162:	3008      	adds	r0, #8
    5164:	f014 f922 	bl	193ac <net_buf_simple_add>
		cp->handle = evt->handle;
    5168:	882b      	ldrh	r3, [r5, #0]
    516a:	f820 3b02 	strh.w	r3, [r0], #2
		memcpy(cp->ltk, tk, sizeof(cp->ltk));
    516e:	2210      	movs	r2, #16
    5170:	a90c      	add	r1, sp, #48	; 0x30
    5172:	f7fb fb0e 	bl	792 <memcpy>
		bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
    5176:	4639      	mov	r1, r7
    5178:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    517c:	f7fe fe82 	bl	3e84 <bt_hci_cmd_send>
    5180:	e6ec      	b.n	4f5c <bt_recv+0x330>
	if (!conn->le.keys) {
    5182:	6f33      	ldr	r3, [r6, #112]	; 0x70
    5184:	2b00      	cmp	r3, #0
    5186:	f040 81e9 	bne.w	555c <bt_recv+0x930>
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, &conn->le.dst);
    518a:	f106 0748 	add.w	r7, r6, #72	; 0x48
    518e:	4639      	mov	r1, r7
    5190:	2020      	movs	r0, #32
    5192:	f006 fa9d 	bl	b6d0 <bt_keys_find>
    5196:	6730      	str	r0, [r6, #112]	; 0x70
		if (!conn->le.keys) {
    5198:	2800      	cmp	r0, #0
    519a:	f040 81df 	bne.w	555c <bt_recv+0x930>
			conn->le.keys = bt_keys_find(BT_KEYS_SLAVE_LTK,
    519e:	4639      	mov	r1, r7
    51a0:	2001      	movs	r0, #1
    51a2:	f006 fa95 	bl	b6d0 <bt_keys_find>
    51a6:	6730      	str	r0, [r6, #112]	; 0x70
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    51a8:	2800      	cmp	r0, #0
    51aa:	d06b      	beq.n	5284 <bt_recv+0x658>
    51ac:	8981      	ldrh	r1, [r0, #12]
    51ae:	068a      	lsls	r2, r1, #26
    51b0:	d542      	bpl.n	5238 <bt_recv+0x60c>
	    evt->rand == 0 && evt->ediv == 0) {
    51b2:	f8d5 2002 	ldr.w	r2, [r5, #2]
    51b6:	f8d5 3006 	ldr.w	r3, [r5, #6]
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    51ba:	4313      	orrs	r3, r2
    51bc:	d13c      	bne.n	5238 <bt_recv+0x60c>
	    evt->rand == 0 && evt->ediv == 0) {
    51be:	f8b5 800a 	ldrh.w	r8, [r5, #10]
    51c2:	f1b8 0f00 	cmp.w	r8, #0
    51c6:	d137      	bne.n	5238 <bt_recv+0x60c>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    51c8:	2112      	movs	r1, #18
    51ca:	f242 001a 	movw	r0, #8218	; 0x201a
    51ce:	f7fe fad1 	bl	3774 <bt_hci_cmd_create>
		if (!buf) {
    51d2:	4607      	mov	r7, r0
    51d4:	2800      	cmp	r0, #0
    51d6:	d0b9      	beq.n	514c <bt_recv+0x520>
		cp = net_buf_add(buf, sizeof(*cp));
    51d8:	2112      	movs	r1, #18
    51da:	3008      	adds	r0, #8
    51dc:	f014 f8e6 	bl	193ac <net_buf_simple_add>
		cp->handle = evt->handle;
    51e0:	882b      	ldrh	r3, [r5, #0]
    51e2:	4605      	mov	r5, r0
    51e4:	f825 3b02 	strh.w	r3, [r5], #2
		memcpy(cp->ltk, conn->le.keys->ltk.val,
    51e8:	6f31      	ldr	r1, [r6, #112]	; 0x70
    51ea:	79ca      	ldrb	r2, [r1, #7]
    51ec:	311a      	adds	r1, #26
		memcpy(cp->ltk, conn->le.keys->slave_ltk.val,
    51ee:	4628      	mov	r0, r5
    51f0:	f7fb facf 	bl	792 <memcpy>
		if (conn->le.keys->enc_size < sizeof(cp->ltk)) {
    51f4:	6f33      	ldr	r3, [r6, #112]	; 0x70
    51f6:	79d8      	ldrb	r0, [r3, #7]
    51f8:	280f      	cmp	r0, #15
    51fa:	d8bc      	bhi.n	5176 <bt_recv+0x54a>
			memset(cp->ltk + conn->le.keys->enc_size, 0,
    51fc:	f1c0 0210 	rsb	r2, r0, #16
    5200:	2100      	movs	r1, #0
    5202:	4428      	add	r0, r5
    5204:	f7fb faf1 	bl	7ea <memset>
    5208:	e7b5      	b.n	5176 <bt_recv+0x54a>
    520a:	bf00      	nop
    520c:	00023dbe 	.word	0x00023dbe
    5210:	00023514 	.word	0x00023514
    5214:	20009cd8 	.word	0x20009cd8
    5218:	00022d86 	.word	0x00022d86
    521c:	00023556 	.word	0x00023556
    5220:	000272e8 	.word	0x000272e8
    5224:	00023dbf 	.word	0x00023dbf
    5228:	0002352c 	.word	0x0002352c
    522c:	0002353f 	.word	0x0002353f
    5230:	000235fe 	.word	0x000235fe
    5234:	00023df3 	.word	0x00023df3
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
    5238:	07cb      	lsls	r3, r1, #31
    523a:	d523      	bpl.n	5284 <bt_recv+0x658>
    523c:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
	    conn->le.keys->slave_ltk.rand == evt->rand &&
    5240:	f8d5 9006 	ldr.w	r9, [r5, #6]
    5244:	f8d5 8002 	ldr.w	r8, [r5, #2]
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
    5248:	454b      	cmp	r3, r9
    524a:	bf08      	it	eq
    524c:	4542      	cmpeq	r2, r8
    524e:	d119      	bne.n	5284 <bt_recv+0x658>
	    conn->le.keys->slave_ltk.rand == evt->rand &&
    5250:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
    5254:	896b      	ldrh	r3, [r5, #10]
    5256:	429a      	cmp	r2, r3
    5258:	d114      	bne.n	5284 <bt_recv+0x658>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    525a:	2112      	movs	r1, #18
    525c:	f242 001a 	movw	r0, #8218	; 0x201a
    5260:	f7fe fa88 	bl	3774 <bt_hci_cmd_create>
		if (!buf) {
    5264:	4607      	mov	r7, r0
    5266:	2800      	cmp	r0, #0
    5268:	f43f af70 	beq.w	514c <bt_recv+0x520>
		cp = net_buf_add(buf, sizeof(*cp));
    526c:	2112      	movs	r1, #18
    526e:	3008      	adds	r0, #8
    5270:	f014 f89c 	bl	193ac <net_buf_simple_add>
		cp->handle = evt->handle;
    5274:	882b      	ldrh	r3, [r5, #0]
    5276:	4605      	mov	r5, r0
    5278:	f825 3b02 	strh.w	r3, [r5], #2
		memcpy(cp->ltk, conn->le.keys->slave_ltk.val,
    527c:	6f31      	ldr	r1, [r6, #112]	; 0x70
    527e:	79ca      	ldrb	r2, [r1, #7]
    5280:	3152      	adds	r1, #82	; 0x52
    5282:	e7b4      	b.n	51ee <bt_recv+0x5c2>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
    5284:	2102      	movs	r1, #2
    5286:	f242 001b 	movw	r0, #8219	; 0x201b
	le_ltk_neg_reply(evt->handle);
    528a:	882f      	ldrh	r7, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
    528c:	f7fe fa72 	bl	3774 <bt_hci_cmd_create>
	if (!buf) {
    5290:	4605      	mov	r5, r0
    5292:	b920      	cbnz	r0, 529e <bt_recv+0x672>
		BT_ERR("Out of command buffers");
    5294:	4bb2      	ldr	r3, [pc, #712]	; (5560 <bt_recv+0x934>)
    5296:	9301      	str	r3, [sp, #4]
    5298:	9300      	str	r3, [sp, #0]
    529a:	4bb2      	ldr	r3, [pc, #712]	; (5564 <bt_recv+0x938>)
    529c:	e75a      	b.n	5154 <bt_recv+0x528>
	cp = net_buf_add(buf, sizeof(*cp));
    529e:	2102      	movs	r1, #2
    52a0:	3008      	adds	r0, #8
    52a2:	f014 f883 	bl	193ac <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    52a6:	4629      	mov	r1, r5
	cp->handle = handle;
    52a8:	8007      	strh	r7, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    52aa:	f242 001b 	movw	r0, #8219	; 0x201b
    52ae:	e765      	b.n	517c <bt_recv+0x550>
    52b0:	68a6      	ldr	r6, [r4, #8]
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    52b2:	48ad      	ldr	r0, [pc, #692]	; (5568 <bt_recv+0x93c>)
    52b4:	f06f 0110 	mvn.w	r1, #16
    52b8:	f7fe f983 	bl	35c2 <atomic_and>
	if (!evt->status) {
    52bc:	7833      	ldrb	r3, [r6, #0]
    52be:	b943      	cbnz	r3, 52d2 <bt_recv+0x6a6>
		memcpy(pub_key, evt->key, 64);
    52c0:	1c71      	adds	r1, r6, #1
    52c2:	2240      	movs	r2, #64	; 0x40
    52c4:	48a9      	ldr	r0, [pc, #676]	; (556c <bt_recv+0x940>)
    52c6:	f7fb fa64 	bl	792 <memcpy>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    52ca:	2108      	movs	r1, #8
    52cc:	48a6      	ldr	r0, [pc, #664]	; (5568 <bt_recv+0x93c>)
    52ce:	f7fe f95a 	bl	3586 <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    52d2:	4ba7      	ldr	r3, [pc, #668]	; (5570 <bt_recv+0x944>)
    52d4:	681d      	ldr	r5, [r3, #0]
		cb->func(evt->status ? NULL : evt->key);
    52d6:	1c77      	adds	r7, r6, #1
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    52d8:	2d00      	cmp	r5, #0
    52da:	f43f accb 	beq.w	4c74 <bt_recv+0x48>
		cb->func(evt->status ? NULL : evt->key);
    52de:	7832      	ldrb	r2, [r6, #0]
    52e0:	682b      	ldr	r3, [r5, #0]
    52e2:	2a00      	cmp	r2, #0
    52e4:	bf0c      	ite	eq
    52e6:	4638      	moveq	r0, r7
    52e8:	2000      	movne	r0, #0
    52ea:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    52ec:	686d      	ldr	r5, [r5, #4]
    52ee:	e7f3      	b.n	52d8 <bt_recv+0x6ac>
	if (dh_key_cb) {
    52f0:	4da0      	ldr	r5, [pc, #640]	; (5574 <bt_recv+0x948>)
    52f2:	68a0      	ldr	r0, [r4, #8]
    52f4:	682a      	ldr	r2, [r5, #0]
    52f6:	2a00      	cmp	r2, #0
    52f8:	f43f acbc 	beq.w	4c74 <bt_recv+0x48>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    52fc:	7803      	ldrb	r3, [r0, #0]
    52fe:	b923      	cbnz	r3, 530a <bt_recv+0x6de>
    5300:	3001      	adds	r0, #1
    5302:	4790      	blx	r2
		dh_key_cb = NULL;
    5304:	2300      	movs	r3, #0
    5306:	602b      	str	r3, [r5, #0]
    5308:	e4b4      	b.n	4c74 <bt_recv+0x48>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    530a:	2000      	movs	r0, #0
    530c:	e7f9      	b.n	5302 <bt_recv+0x6d6>
	u8_t num_reports = net_buf_pull_u8(buf);
    530e:	4628      	mov	r0, r5
    5310:	f014 f8a4 	bl	1945c <net_buf_simple_pull_u8>
		if (scan_dev_found_cb) {
    5314:	f8df b284 	ldr.w	fp, [pc, #644]	; 559c <bt_recv+0x970>
	u8_t num_reports = net_buf_pull_u8(buf);
    5318:	9007      	str	r0, [sp, #28]
	while (num_reports--) {
    531a:	9b07      	ldr	r3, [sp, #28]
    531c:	2b00      	cmp	r3, #0
    531e:	f43f aca9 	beq.w	4c74 <bt_recv+0x48>
		info = (void *)buf->data;
    5322:	68a6      	ldr	r6, [r4, #8]
		net_buf_pull(buf, sizeof(*info));
    5324:	2109      	movs	r1, #9
    5326:	4628      	mov	r0, r5
    5328:	f014 f890 	bl	1944c <net_buf_simple_pull>
		rssi = info->data[info->length];
    532c:	7a33      	ldrb	r3, [r6, #8]
    532e:	4433      	add	r3, r6
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    5330:	46b0      	mov	r8, r6
		rssi = info->data[info->length];
    5332:	7a5b      	ldrb	r3, [r3, #9]
    5334:	461f      	mov	r7, r3
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    5336:	f818 3f01 	ldrb.w	r3, [r8, #1]!
    533a:	3b02      	subs	r3, #2
    533c:	2b01      	cmp	r3, #1
    533e:	d838      	bhi.n	53b2 <bt_recv+0x786>
			bt_addr_le_copy(&id_addr, &info->addr);
    5340:	4641      	mov	r1, r8
    5342:	a80c      	add	r0, sp, #48	; 0x30
    5344:	f7fe f91c 	bl	3580 <bt_addr_le_copy>
			id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    5348:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    534c:	3b02      	subs	r3, #2
    534e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		if (scan_dev_found_cb) {
    5352:	f8db 3000 	ldr.w	r3, [fp]
    5356:	b1a3      	cbz	r3, 5382 <bt_recv+0x756>
 *  @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    5358:	4628      	mov	r0, r5
    535a:	f014 f88f 	bl	1947c <net_buf_simple_headroom>
			buf->len = info->length;
    535e:	7a33      	ldrb	r3, [r6, #8]
	state->len = buf->len;
    5360:	f8b4 900c 	ldrh.w	r9, [r4, #12]
    5364:	81a3      	strh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    5366:	4682      	mov	sl, r0
			scan_dev_found_cb(&id_addr, rssi, info->evt_type,
    5368:	462b      	mov	r3, r5
    536a:	b279      	sxtb	r1, r7
    536c:	7832      	ldrb	r2, [r6, #0]
    536e:	f8db 7000 	ldr.w	r7, [fp]
    5372:	a80c      	add	r0, sp, #48	; 0x30
    5374:	47b8      	blx	r7
 *  @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
    5376:	6923      	ldr	r3, [r4, #16]
	buf->len = state->len;
    5378:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
    537c:	fa13 f38a 	uxtah	r3, r3, sl
    5380:	60a3      	str	r3, [r4, #8]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    5382:	2108      	movs	r1, #8
    5384:	4878      	ldr	r0, [pc, #480]	; (5568 <bt_recv+0x93c>)
		check_pending_conn(&id_addr, &info->addr, info->evt_type);
    5386:	7837      	ldrb	r7, [r6, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    5388:	f7fe f90e 	bl	35a8 <atomic_test_bit>
    538c:	b928      	cbnz	r0, 539a <bt_recv+0x76e>
	if (evtype != BT_LE_ADV_IND && evtype != BT_LE_ADV_DIRECT_IND) {
    538e:	2f01      	cmp	r7, #1
    5390:	d803      	bhi.n	539a <bt_recv+0x76e>
    5392:	4641      	mov	r1, r8
    5394:	a80c      	add	r0, sp, #48	; 0x30
    5396:	f7ff f9bf 	bl	4718 <check_pending_conn.part.27>
		net_buf_pull(buf, info->length + sizeof(rssi));
    539a:	7a31      	ldrb	r1, [r6, #8]
    539c:	4628      	mov	r0, r5
    539e:	3101      	adds	r1, #1
    53a0:	f014 f854 	bl	1944c <net_buf_simple_pull>
    53a4:	9b07      	ldr	r3, [sp, #28]
    53a6:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
    53aa:	fa5f f389 	uxtb.w	r3, r9
    53ae:	9307      	str	r3, [sp, #28]
    53b0:	e7b3      	b.n	531a <bt_recv+0x6ee>
		keys = bt_keys_find_irk(addr);
    53b2:	4640      	mov	r0, r8
    53b4:	f006 f9aa 	bl	b70c <bt_keys_find_irk>
			bt_addr_le_copy(&id_addr, find_id_addr(&info->addr));
    53b8:	2800      	cmp	r0, #0
    53ba:	bf14      	ite	ne
    53bc:	4601      	movne	r1, r0
    53be:	4641      	moveq	r1, r8
    53c0:	a80c      	add	r0, sp, #48	; 0x30
    53c2:	f7fe f8dd 	bl	3580 <bt_addr_le_copy>
    53c6:	e7c4      	b.n	5352 <bt_recv+0x726>
	u8_t num_reports = net_buf_pull_u8(buf);
    53c8:	4628      	mov	r0, r5
    53ca:	f014 f847 	bl	1945c <net_buf_simple_pull_u8>
		if (scan_dev_found_cb) {
    53ce:	f8df b1cc 	ldr.w	fp, [pc, #460]	; 559c <bt_recv+0x970>
	u8_t num_reports = net_buf_pull_u8(buf);
    53d2:	9007      	str	r0, [sp, #28]
	while (num_reports--) {
    53d4:	9b07      	ldr	r3, [sp, #28]
    53d6:	2b00      	cmp	r3, #0
    53d8:	f43f ac4c 	beq.w	4c74 <bt_recv+0x48>
		info = (void *)buf->data;
    53dc:	68a6      	ldr	r6, [r4, #8]
		net_buf_pull(buf, sizeof(*info));
    53de:	2117      	movs	r1, #23
    53e0:	4628      	mov	r0, r5
    53e2:	f014 f833 	bl	1944c <net_buf_simple_pull>
		rssi = info->data[info->length];
    53e6:	7db3      	ldrb	r3, [r6, #22]
    53e8:	4433      	add	r3, r6
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    53ea:	46b0      	mov	r8, r6
		rssi = info->data[info->length];
    53ec:	7ddb      	ldrb	r3, [r3, #23]
    53ee:	461f      	mov	r7, r3
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    53f0:	f818 3f01 	ldrb.w	r3, [r8, #1]!
    53f4:	3b02      	subs	r3, #2
    53f6:	2b01      	cmp	r3, #1
    53f8:	d838      	bhi.n	546c <bt_recv+0x840>
			bt_addr_le_copy(&id_addr, &info->addr);
    53fa:	4641      	mov	r1, r8
    53fc:	a80c      	add	r0, sp, #48	; 0x30
    53fe:	f7fe f8bf 	bl	3580 <bt_addr_le_copy>
			id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    5402:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    5406:	3b02      	subs	r3, #2
    5408:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		if (scan_dev_found_cb) {
    540c:	f8db 3000 	ldr.w	r3, [fp]
    5410:	b1a3      	cbz	r3, 543c <bt_recv+0x810>
	state->offset = net_buf_simple_headroom(buf);
    5412:	4628      	mov	r0, r5
    5414:	f014 f832 	bl	1947c <net_buf_simple_headroom>
			buf->len = info->length;
    5418:	7db3      	ldrb	r3, [r6, #22]
	state->len = buf->len;
    541a:	f8b4 900c 	ldrh.w	r9, [r4, #12]
    541e:	81a3      	strh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    5420:	4682      	mov	sl, r0
			scan_dev_found_cb(&id_addr, rssi, info->evt_type,
    5422:	462b      	mov	r3, r5
    5424:	b279      	sxtb	r1, r7
    5426:	7832      	ldrb	r2, [r6, #0]
    5428:	f8db 7000 	ldr.w	r7, [fp]
    542c:	a80c      	add	r0, sp, #48	; 0x30
    542e:	47b8      	blx	r7
	buf->data = buf->__buf + state->offset;
    5430:	6923      	ldr	r3, [r4, #16]
	buf->len = state->len;
    5432:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
    5436:	fa13 f38a 	uxtah	r3, r3, sl
    543a:	60a3      	str	r3, [r4, #8]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    543c:	2108      	movs	r1, #8
    543e:	484a      	ldr	r0, [pc, #296]	; (5568 <bt_recv+0x93c>)
		check_pending_conn(&id_addr, &info->addr, info->evt_type);
    5440:	7837      	ldrb	r7, [r6, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    5442:	f7fe f8b1 	bl	35a8 <atomic_test_bit>
    5446:	b928      	cbnz	r0, 5454 <bt_recv+0x828>
	if (evtype != BT_LE_ADV_IND && evtype != BT_LE_ADV_DIRECT_IND) {
    5448:	2f01      	cmp	r7, #1
    544a:	d803      	bhi.n	5454 <bt_recv+0x828>
    544c:	4641      	mov	r1, r8
    544e:	a80c      	add	r0, sp, #48	; 0x30
    5450:	f7ff f962 	bl	4718 <check_pending_conn.part.27>
		net_buf_pull(buf, info->length + sizeof(rssi));
    5454:	7db1      	ldrb	r1, [r6, #22]
    5456:	4628      	mov	r0, r5
    5458:	3101      	adds	r1, #1
    545a:	f013 fff7 	bl	1944c <net_buf_simple_pull>
    545e:	9b07      	ldr	r3, [sp, #28]
    5460:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
    5464:	fa5f f389 	uxtb.w	r3, r9
    5468:	9307      	str	r3, [sp, #28]
    546a:	e7b3      	b.n	53d4 <bt_recv+0x7a8>
		keys = bt_keys_find_irk(addr);
    546c:	4640      	mov	r0, r8
    546e:	f006 f94d 	bl	b70c <bt_keys_find_irk>
			bt_addr_le_copy(&id_addr, find_id_addr(&info->addr));
    5472:	2800      	cmp	r0, #0
    5474:	bf14      	ite	ne
    5476:	4601      	movne	r1, r0
    5478:	4641      	moveq	r1, r8
    547a:	a80c      	add	r0, sp, #48	; 0x30
    547c:	f7fe f880 	bl	3580 <bt_addr_le_copy>
    5480:	e7c4      	b.n	540c <bt_recv+0x7e0>
		BT_WARN("Unhandled LE event 0x%02x len %u: %s",
    5482:	89a5      	ldrh	r5, [r4, #12]
    5484:	68a0      	ldr	r0, [r4, #8]
    5486:	4629      	mov	r1, r5
    5488:	f7fd ff12 	bl	32b0 <bt_hex>
    548c:	4b34      	ldr	r3, [pc, #208]	; (5560 <bt_recv+0x934>)
    548e:	9304      	str	r3, [sp, #16]
    5490:	9003      	str	r0, [sp, #12]
    5492:	e88d 0048 	stmia.w	sp, {r3, r6}
    5496:	4a38      	ldr	r2, [pc, #224]	; (5578 <bt_recv+0x94c>)
    5498:	4b38      	ldr	r3, [pc, #224]	; (557c <bt_recv+0x950>)
    549a:	4939      	ldr	r1, [pc, #228]	; (5580 <bt_recv+0x954>)
    549c:	4839      	ldr	r0, [pc, #228]	; (5584 <bt_recv+0x958>)
    549e:	9502      	str	r5, [sp, #8]
		BT_WARN("Unhandled event 0x%02x len %u: %s", hdr->evt,
    54a0:	f7fc fefe 	bl	22a0 <printk>
    54a4:	f7ff bbe6 	b.w	4c74 <bt_recv+0x48>
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    54a8:	4a2d      	ldr	r2, [pc, #180]	; (5560 <bt_recv+0x934>)
    54aa:	9202      	str	r2, [sp, #8]
    54ac:	e88d 000c 	stmia.w	sp, {r2, r3}
    54b0:	4933      	ldr	r1, [pc, #204]	; (5580 <bt_recv+0x954>)
    54b2:	4b35      	ldr	r3, [pc, #212]	; (5588 <bt_recv+0x95c>)
    54b4:	4a35      	ldr	r2, [pc, #212]	; (558c <bt_recv+0x960>)
    54b6:	4836      	ldr	r0, [pc, #216]	; (5590 <bt_recv+0x964>)
    54b8:	f7fc fef2 	bl	22a0 <printk>
		net_buf_unref(buf);
    54bc:	4620      	mov	r0, r4
    54be:	f013 ff17 	bl	192f0 <net_buf_unref>
		return -EINVAL;
    54c2:	f06f 0015 	mvn.w	r0, #21
    54c6:	f7ff bbf6 	b.w	4cb6 <bt_recv+0x8a>
	net_buf_pull(buf, sizeof(*hdr));
    54ca:	f104 0508 	add.w	r5, r4, #8
    54ce:	2102      	movs	r1, #2
    54d0:	4628      	mov	r0, r5
    54d2:	f013 ffbb 	bl	1944c <net_buf_simple_pull>
	switch (hdr->evt) {
    54d6:	7836      	ldrb	r6, [r6, #0]
    54d8:	2e08      	cmp	r6, #8
    54da:	f43f ac63 	beq.w	4da4 <bt_recv+0x178>
    54de:	d812      	bhi.n	5506 <bt_recv+0x8da>
    54e0:	2e05      	cmp	r6, #5
    54e2:	f43f ac04 	beq.w	4cee <bt_recv+0xc2>
		BT_WARN("Unhandled event 0x%02x len %u: %s", hdr->evt,
    54e6:	89a5      	ldrh	r5, [r4, #12]
    54e8:	68a0      	ldr	r0, [r4, #8]
    54ea:	4629      	mov	r1, r5
    54ec:	f7fd fee0 	bl	32b0 <bt_hex>
    54f0:	4b1b      	ldr	r3, [pc, #108]	; (5560 <bt_recv+0x934>)
    54f2:	9304      	str	r3, [sp, #16]
    54f4:	9003      	str	r0, [sp, #12]
    54f6:	e88d 0048 	stmia.w	sp, {r3, r6}
    54fa:	9502      	str	r5, [sp, #8]
    54fc:	4b25      	ldr	r3, [pc, #148]	; (5594 <bt_recv+0x968>)
    54fe:	4a1e      	ldr	r2, [pc, #120]	; (5578 <bt_recv+0x94c>)
    5500:	491f      	ldr	r1, [pc, #124]	; (5580 <bt_recv+0x954>)
    5502:	4825      	ldr	r0, [pc, #148]	; (5598 <bt_recv+0x96c>)
    5504:	e7cc      	b.n	54a0 <bt_recv+0x874>
	switch (hdr->evt) {
    5506:	2e30      	cmp	r6, #48	; 0x30
    5508:	f43f ac6f 	beq.w	4dea <bt_recv+0x1be>
    550c:	2e3e      	cmp	r6, #62	; 0x3e
    550e:	d1ea      	bne.n	54e6 <bt_recv+0x8ba>
	struct bt_hci_evt_le_meta_event *evt = (void *)buf->data;
    5510:	68a6      	ldr	r6, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    5512:	2101      	movs	r1, #1
    5514:	4628      	mov	r0, r5
    5516:	f013 ff99 	bl	1944c <net_buf_simple_pull>
	switch (evt->subevent) {
    551a:	7836      	ldrb	r6, [r6, #0]
    551c:	1e73      	subs	r3, r6, #1
    551e:	2b0c      	cmp	r3, #12
    5520:	d8af      	bhi.n	5482 <bt_recv+0x856>
    5522:	a201      	add	r2, pc, #4	; (adr r2, 5528 <bt_recv+0x8fc>)
    5524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5528:	00004e27 	.word	0x00004e27
    552c:	0000530f 	.word	0x0000530f
    5530:	00004ec7 	.word	0x00004ec7
    5534:	00004f61 	.word	0x00004f61
    5538:	0000510d 	.word	0x0000510d
    553c:	00004fcf 	.word	0x00004fcf
    5540:	0000508d 	.word	0x0000508d
    5544:	000052b1 	.word	0x000052b1
    5548:	000052f1 	.word	0x000052f1
    554c:	00004ec3 	.word	0x00004ec3
    5550:	00005483 	.word	0x00005483
    5554:	000050bd 	.word	0x000050bd
    5558:	000053c9 	.word	0x000053c9
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    555c:	6f30      	ldr	r0, [r6, #112]	; 0x70
    555e:	e625      	b.n	51ac <bt_recv+0x580>
    5560:	00023dbe 	.word	0x00023dbe
    5564:	000235ed 	.word	0x000235ed
    5568:	20009d48 	.word	0x20009d48
    556c:	200003cc 	.word	0x200003cc
    5570:	2000040c 	.word	0x2000040c
    5574:	200003c8 	.word	0x200003c8
    5578:	00024016 	.word	0x00024016
    557c:	0002361a 	.word	0x0002361a
    5580:	000272e8 	.word	0x000272e8
    5584:	00023e1a 	.word	0x00023e1a
    5588:	00023697 	.word	0x00023697
    558c:	00022d86 	.word	0x00022d86
    5590:	00023e81 	.word	0x00023e81
    5594:	0002362c 	.word	0x0002362c
    5598:	00023e4f 	.word	0x00023e4f
    559c:	20000414 	.word	0x20000414

000055a0 <bt_recv_prio>:
{
    55a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    55a4:	7d03      	ldrb	r3, [r0, #20]
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    55a6:	6886      	ldr	r6, [r0, #8]
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    55a8:	2b01      	cmp	r3, #1
{
    55aa:	b087      	sub	sp, #28
    55ac:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    55ae:	d00e      	beq.n	55ce <bt_recv_prio+0x2e>
    55b0:	4b65      	ldr	r3, [pc, #404]	; (5748 <bt_recv_prio+0x1a8>)
    55b2:	9301      	str	r3, [sp, #4]
    55b4:	9300      	str	r3, [sp, #0]
    55b6:	4a65      	ldr	r2, [pc, #404]	; (574c <bt_recv_prio+0x1ac>)
    55b8:	4b65      	ldr	r3, [pc, #404]	; (5750 <bt_recv_prio+0x1b0>)
    55ba:	4966      	ldr	r1, [pc, #408]	; (5754 <bt_recv_prio+0x1b4>)
    55bc:	4866      	ldr	r0, [pc, #408]	; (5758 <bt_recv_prio+0x1b8>)
	BT_ASSERT(buf->len >= sizeof(*hdr));
    55be:	f7fc fe6f 	bl	22a0 <printk>
    55c2:	4040      	eors	r0, r0
    55c4:	f380 8811 	msr	BASEPRI, r0
    55c8:	f04f 0004 	mov.w	r0, #4
    55cc:	df02      	svc	2
    55ce:	8982      	ldrh	r2, [r0, #12]
    55d0:	2a01      	cmp	r2, #1
    55d2:	d807      	bhi.n	55e4 <bt_recv_prio+0x44>
    55d4:	4b5c      	ldr	r3, [pc, #368]	; (5748 <bt_recv_prio+0x1a8>)
    55d6:	9301      	str	r3, [sp, #4]
    55d8:	9300      	str	r3, [sp, #0]
    55da:	4a5c      	ldr	r2, [pc, #368]	; (574c <bt_recv_prio+0x1ac>)
    55dc:	4b5c      	ldr	r3, [pc, #368]	; (5750 <bt_recv_prio+0x1b0>)
    55de:	495d      	ldr	r1, [pc, #372]	; (5754 <bt_recv_prio+0x1b4>)
    55e0:	485e      	ldr	r0, [pc, #376]	; (575c <bt_recv_prio+0x1bc>)
    55e2:	e7ec      	b.n	55be <bt_recv_prio+0x1e>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    55e4:	7832      	ldrb	r2, [r6, #0]
    55e6:	2a13      	cmp	r2, #19
    55e8:	f200 80a5 	bhi.w	5736 <bt_recv_prio+0x196>
    55ec:	4093      	lsls	r3, r2
    55ee:	f413 2f0c 	tst.w	r3, #573440	; 0x8c000
    55f2:	f000 80a0 	beq.w	5736 <bt_recv_prio+0x196>
	net_buf_pull(buf, sizeof(*hdr));
    55f6:	f100 0508 	add.w	r5, r0, #8
    55fa:	2102      	movs	r1, #2
    55fc:	4628      	mov	r0, r5
    55fe:	f013 ff25 	bl	1944c <net_buf_simple_pull>
	switch (hdr->evt) {
    5602:	7833      	ldrb	r3, [r6, #0]
    5604:	2b0f      	cmp	r3, #15
    5606:	d01d      	beq.n	5644 <bt_recv_prio+0xa4>
    5608:	2b13      	cmp	r3, #19
    560a:	d02b      	beq.n	5664 <bt_recv_prio+0xc4>
    560c:	2b0e      	cmp	r3, #14
    560e:	f040 8087 	bne.w	5720 <bt_recv_prio+0x180>
	struct bt_hci_evt_cmd_complete *evt = (void *)buf->data;
    5612:	68a3      	ldr	r3, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    5614:	2103      	movs	r1, #3
    5616:	4628      	mov	r0, r5
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    5618:	f8b3 7001 	ldrh.w	r7, [r3, #1]
	u8_t status, ncmd = evt->ncmd;
    561c:	781e      	ldrb	r6, [r3, #0]
	net_buf_pull(buf, sizeof(*evt));
    561e:	f013 ff15 	bl	1944c <net_buf_simple_pull>
	status = buf->data[0];
    5622:	68a3      	ldr	r3, [r4, #8]
	hci_cmd_done(opcode, status, buf);
    5624:	4622      	mov	r2, r4
    5626:	7819      	ldrb	r1, [r3, #0]
    5628:	4638      	mov	r0, r7
    562a:	f7fe f82f 	bl	368c <hci_cmd_done>
	if (ncmd) {
    562e:	b116      	cbz	r6, 5636 <bt_recv_prio+0x96>
    5630:	484b      	ldr	r0, [pc, #300]	; (5760 <bt_recv_prio+0x1c0>)
    5632:	f01c fabf 	bl	21bb4 <_impl_k_sem_give>
	net_buf_unref(buf);
    5636:	4620      	mov	r0, r4
    5638:	f013 fe5a 	bl	192f0 <net_buf_unref>
}
    563c:	2000      	movs	r0, #0
    563e:	b007      	add	sp, #28
    5640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct bt_hci_evt_cmd_status *evt = (void *)buf->data;
    5644:	68a6      	ldr	r6, [r4, #8]
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    5646:	f8b6 8002 	ldrh.w	r8, [r6, #2]
	u8_t ncmd = evt->ncmd;
    564a:	7877      	ldrb	r7, [r6, #1]
	net_buf_pull(buf, sizeof(*evt));
    564c:	2104      	movs	r1, #4
    564e:	4628      	mov	r0, r5
    5650:	f013 fefc 	bl	1944c <net_buf_simple_pull>
	hci_cmd_done(opcode, evt->status, buf);
    5654:	4622      	mov	r2, r4
    5656:	7831      	ldrb	r1, [r6, #0]
    5658:	4640      	mov	r0, r8
    565a:	f7fe f817 	bl	368c <hci_cmd_done>
	if (ncmd) {
    565e:	2f00      	cmp	r7, #0
    5660:	d0e9      	beq.n	5636 <bt_recv_prio+0x96>
    5662:	e7e5      	b.n	5630 <bt_recv_prio+0x90>
    5664:	68a3      	ldr	r3, [r4, #8]
				BT_ERR("packets count mismatch");
    5666:	4f38      	ldr	r7, [pc, #224]	; (5748 <bt_recv_prio+0x1a8>)
    5668:	f8df 9108 	ldr.w	r9, [pc, #264]	; 5774 <bt_recv_prio+0x1d4>
    566c:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 574c <bt_recv_prio+0x1ac>
    5670:	9304      	str	r3, [sp, #16]
	for (i = 0; i < evt->num_handles; i++) {
    5672:	2600      	movs	r6, #0
    5674:	9b04      	ldr	r3, [sp, #16]
    5676:	781b      	ldrb	r3, [r3, #0]
    5678:	429e      	cmp	r6, r3
    567a:	dadc      	bge.n	5636 <bt_recv_prio+0x96>
    567c:	9b04      	ldr	r3, [sp, #16]
    567e:	eb03 0386 	add.w	r3, r3, r6, lsl #2
		handle = sys_le16_to_cpu(evt->h[i].handle);
    5682:	f8b3 2001 	ldrh.w	r2, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    5686:	f8b3 8003 	ldrh.w	r8, [r3, #3]
	__asm__ volatile(
    568a:	f04f 0120 	mov.w	r1, #32
    568e:	f3ef 8b11 	mrs	fp, BASEPRI
    5692:	f381 8811 	msr	BASEPRI, r1
		conn = bt_conn_lookup_handle(handle);
    5696:	4610      	mov	r0, r2
    5698:	9205      	str	r2, [sp, #20]
    569a:	f000 feb3 	bl	6404 <bt_conn_lookup_handle>
		if (!conn) {
    569e:	9a05      	ldr	r2, [sp, #20]
    56a0:	4605      	mov	r5, r0
    56a2:	b960      	cbnz	r0, 56be <bt_recv_prio+0x11e>
			BT_ERR("No connection for handle %u", handle);
    56a4:	9201      	str	r2, [sp, #4]
    56a6:	9702      	str	r7, [sp, #8]
    56a8:	9700      	str	r7, [sp, #0]
    56aa:	464b      	mov	r3, r9
    56ac:	4652      	mov	r2, sl
    56ae:	4929      	ldr	r1, [pc, #164]	; (5754 <bt_recv_prio+0x1b4>)
    56b0:	482c      	ldr	r0, [pc, #176]	; (5764 <bt_recv_prio+0x1c4>)
    56b2:	f7fc fdf5 	bl	22a0 <printk>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    56b6:	f38b 8811 	msr	BASEPRI, fp
	for (i = 0; i < evt->num_handles; i++) {
    56ba:	3601      	adds	r6, #1
    56bc:	e7da      	b.n	5674 <bt_recv_prio+0xd4>
    56be:	f38b 8811 	msr	BASEPRI, fp
			k_fifo_put(&conn->tx_notify, node);
    56c2:	f100 0b1c 	add.w	fp, r0, #28
		while (count--) {
    56c6:	f1b8 0f00 	cmp.w	r8, #0
    56ca:	d01c      	beq.n	5706 <bt_recv_prio+0x166>
	__asm__ volatile(
    56cc:	f04f 0220 	mov.w	r2, #32
    56d0:	f3ef 8e11 	mrs	lr, BASEPRI
    56d4:	f382 8811 	msr	BASEPRI, r2
    56d8:	6969      	ldr	r1, [r5, #20]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    56da:	b129      	cbz	r1, 56e8 <bt_recv_prio+0x148>
	if (list->tail == node) {
    56dc:	69aa      	ldr	r2, [r5, #24]
	list->head = node->next;
    56de:	6808      	ldr	r0, [r1, #0]
    56e0:	6168      	str	r0, [r5, #20]
	if (list->tail == node) {
    56e2:	4291      	cmp	r1, r2
		list->tail = list->head;
    56e4:	bf08      	it	eq
    56e6:	61a8      	streq	r0, [r5, #24]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    56e8:	f38e 8811 	msr	BASEPRI, lr
    56ec:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    56f0:	fa1f f883 	uxth.w	r8, r3
			if (!node) {
    56f4:	b959      	cbnz	r1, 570e <bt_recv_prio+0x16e>
				BT_ERR("packets count mismatch");
    56f6:	9701      	str	r7, [sp, #4]
    56f8:	9700      	str	r7, [sp, #0]
    56fa:	464b      	mov	r3, r9
    56fc:	4652      	mov	r2, sl
    56fe:	4915      	ldr	r1, [pc, #84]	; (5754 <bt_recv_prio+0x1b4>)
    5700:	4819      	ldr	r0, [pc, #100]	; (5768 <bt_recv_prio+0x1c8>)
    5702:	f7fc fdcd 	bl	22a0 <printk>
		bt_conn_unref(conn);
    5706:	4628      	mov	r0, r5
    5708:	f000 feea 	bl	64e0 <bt_conn_unref>
    570c:	e7d5      	b.n	56ba <bt_recv_prio+0x11a>
			k_fifo_put(&conn->tx_notify, node);
    570e:	4658      	mov	r0, fp
    5710:	f01c f805 	bl	2171e <k_queue_append>
			k_sem_give(bt_conn_get_pkts(conn));
    5714:	4628      	mov	r0, r5
    5716:	f000 fa7d 	bl	5c14 <bt_conn_get_pkts>
    571a:	f01c fa4b 	bl	21bb4 <_impl_k_sem_give>
    571e:	e7d2      	b.n	56c6 <bt_recv_prio+0x126>
		net_buf_unref(buf);
    5720:	4620      	mov	r0, r4
    5722:	f013 fde5 	bl	192f0 <net_buf_unref>
		BT_ASSERT(0);
    5726:	4b08      	ldr	r3, [pc, #32]	; (5748 <bt_recv_prio+0x1a8>)
    5728:	9301      	str	r3, [sp, #4]
    572a:	9300      	str	r3, [sp, #0]
    572c:	4a07      	ldr	r2, [pc, #28]	; (574c <bt_recv_prio+0x1ac>)
    572e:	4b08      	ldr	r3, [pc, #32]	; (5750 <bt_recv_prio+0x1b0>)
    5730:	4908      	ldr	r1, [pc, #32]	; (5754 <bt_recv_prio+0x1b4>)
    5732:	480e      	ldr	r0, [pc, #56]	; (576c <bt_recv_prio+0x1cc>)
    5734:	e743      	b.n	55be <bt_recv_prio+0x1e>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    5736:	4b04      	ldr	r3, [pc, #16]	; (5748 <bt_recv_prio+0x1a8>)
    5738:	9301      	str	r3, [sp, #4]
    573a:	9300      	str	r3, [sp, #0]
    573c:	4a03      	ldr	r2, [pc, #12]	; (574c <bt_recv_prio+0x1ac>)
    573e:	4b04      	ldr	r3, [pc, #16]	; (5750 <bt_recv_prio+0x1b0>)
    5740:	4904      	ldr	r1, [pc, #16]	; (5754 <bt_recv_prio+0x1b4>)
    5742:	480b      	ldr	r0, [pc, #44]	; (5770 <bt_recv_prio+0x1d0>)
    5744:	e73b      	b.n	55be <bt_recv_prio+0x1e>
    5746:	bf00      	nop
    5748:	00023dbe 	.word	0x00023dbe
    574c:	00022d86 	.word	0x00022d86
    5750:	0002369f 	.word	0x0002369f
    5754:	000272e8 	.word	0x000272e8
    5758:	00023ee4 	.word	0x00023ee4
    575c:	00023f28 	.word	0x00023f28
    5760:	20009d80 	.word	0x20009d80
    5764:	00023f62 	.word	0x00023f62
    5768:	00023f8e 	.word	0x00023f8e
    576c:	00023fb5 	.word	0x00023fb5
    5770:	00023fd8 	.word	0x00023fd8
    5774:	000234d0 	.word	0x000234d0

00005778 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    5778:	4a08      	ldr	r2, [pc, #32]	; (579c <bt_hci_driver_register+0x24>)
    577a:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    577e:	b93b      	cbnz	r3, 5790 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    5780:	6881      	ldr	r1, [r0, #8]
    5782:	b141      	cbz	r1, 5796 <bt_hci_driver_register+0x1e>
    5784:	68c1      	ldr	r1, [r0, #12]
    5786:	b131      	cbz	r1, 5796 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    5788:	f8c2 00e4 	str.w	r0, [r2, #228]	; 0xe4
	return 0;
    578c:	4618      	mov	r0, r3
    578e:	4770      	bx	lr
		return -EALREADY;
    5790:	f06f 0044 	mvn.w	r0, #68	; 0x44
    5794:	4770      	bx	lr
		return -EINVAL;
    5796:	f06f 0015 	mvn.w	r0, #21
}
    579a:	4770      	bx	lr
    579c:	20009cd8 	.word	0x20009cd8

000057a0 <bt_enable>:
{
    57a0:	b570      	push	{r4, r5, r6, lr}
	if (!bt_dev.drv) {
    57a2:	4d2a      	ldr	r5, [pc, #168]	; (584c <bt_enable+0xac>)
    57a4:	f8d5 30e4 	ldr.w	r3, [r5, #228]	; 0xe4
{
    57a8:	b086      	sub	sp, #24
    57aa:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    57ac:	b96b      	cbnz	r3, 57ca <bt_enable+0x2a>
		BT_ERR("No HCI driver registered");
    57ae:	4b28      	ldr	r3, [pc, #160]	; (5850 <bt_enable+0xb0>)
    57b0:	9301      	str	r3, [sp, #4]
    57b2:	9300      	str	r3, [sp, #0]
    57b4:	4a27      	ldr	r2, [pc, #156]	; (5854 <bt_enable+0xb4>)
    57b6:	4b28      	ldr	r3, [pc, #160]	; (5858 <bt_enable+0xb8>)
    57b8:	4928      	ldr	r1, [pc, #160]	; (585c <bt_enable+0xbc>)
    57ba:	4829      	ldr	r0, [pc, #164]	; (5860 <bt_enable+0xc0>)
    57bc:	f7fc fd70 	bl	22a0 <printk>
		return -ENODEV;
    57c0:	f06f 0412 	mvn.w	r4, #18
}
    57c4:	4620      	mov	r0, r4
    57c6:	b006      	add	sp, #24
    57c8:	bd70      	pop	{r4, r5, r6, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    57ca:	2101      	movs	r1, #1
    57cc:	f105 0070 	add.w	r0, r5, #112	; 0x70
    57d0:	f7fd fed9 	bl	3586 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    57d4:	f010 0001 	ands.w	r0, r0, #1
    57d8:	d134      	bne.n	5844 <bt_enable+0xa4>
	ready_cb = cb;
    57da:	4b22      	ldr	r3, [pc, #136]	; (5864 <bt_enable+0xc4>)

    57dc:	4922      	ldr	r1, [pc, #136]	; (5868 <bt_enable+0xc8>)
    57de:	601e      	str	r6, [r3, #0]
    57e0:	f06f 0308 	mvn.w	r3, #8
    57e4:	9005      	str	r0, [sp, #20]
    57e6:	9004      	str	r0, [sp, #16]
    57e8:	9303      	str	r3, [sp, #12]
    57ea:	9002      	str	r0, [sp, #8]
    57ec:	9001      	str	r0, [sp, #4]
    57ee:	9000      	str	r0, [sp, #0]
    57f0:	4b1e      	ldr	r3, [pc, #120]	; (586c <bt_enable+0xcc>)
    57f2:	481f      	ldr	r0, [pc, #124]	; (5870 <bt_enable+0xd0>)
    57f4:	f44f 726b 	mov.w	r2, #940	; 0x3ac
    57f8:	f01c fc18 	bl	2202c <_impl_k_thread_create>
	err = bt_dev.drv->open();
    57fc:	f8d5 30e4 	ldr.w	r3, [r5, #228]	; 0xe4
    5800:	689b      	ldr	r3, [r3, #8]
    5802:	4798      	blx	r3
	if (err) {
    5804:	4604      	mov	r4, r0
    5806:	b150      	cbz	r0, 581e <bt_enable+0x7e>
		BT_ERR("HCI driver open failed (%d)", err);
    5808:	4b11      	ldr	r3, [pc, #68]	; (5850 <bt_enable+0xb0>)
    580a:	9302      	str	r3, [sp, #8]
    580c:	e88d 0018 	stmia.w	sp, {r3, r4}
    5810:	4a10      	ldr	r2, [pc, #64]	; (5854 <bt_enable+0xb4>)
    5812:	4b11      	ldr	r3, [pc, #68]	; (5858 <bt_enable+0xb8>)
    5814:	4911      	ldr	r1, [pc, #68]	; (585c <bt_enable+0xbc>)
    5816:	4817      	ldr	r0, [pc, #92]	; (5874 <bt_enable+0xd4>)
    5818:	f7fc fd42 	bl	22a0 <printk>
		return err;
    581c:	e7d2      	b.n	57c4 <bt_enable+0x24>
	if (!cb) {
    581e:	b926      	cbnz	r6, 582a <bt_enable+0x8a>
}
    5820:	b006      	add	sp, #24
    5822:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
    5826:	f7fe bbe7 	b.w	3ff8 <bt_init>
    582a:	2101      	movs	r1, #1
    582c:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    5830:	f7fd fea9 	bl	3586 <atomic_or>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    5834:	07c3      	lsls	r3, r0, #31
    5836:	d4c5      	bmi.n	57c4 <bt_enable+0x24>
		k_queue_append(&work_q->queue, work);
    5838:	f105 0164 	add.w	r1, r5, #100	; 0x64
    583c:	480e      	ldr	r0, [pc, #56]	; (5878 <bt_enable+0xd8>)
    583e:	f01b ff6e 	bl	2171e <k_queue_append>
    5842:	e7bf      	b.n	57c4 <bt_enable+0x24>
		return -EALREADY;
    5844:	f06f 0444 	mvn.w	r4, #68	; 0x44
    5848:	e7bc      	b.n	57c4 <bt_enable+0x24>
    584a:	bf00      	nop
    584c:	20009cd8 	.word	0x20009cd8
    5850:	00023dbe 	.word	0x00023dbe
    5854:	00022d86 	.word	0x00022d86
    5858:	000236ac 	.word	0x000236ac
    585c:	000272e8 	.word	0x000272e8
    5860:	000236c5 	.word	0x000236c5
    5864:	20000410 	.word	0x20000410
    5868:	20005190 	.word	0x20005190
    586c:	00004aa1 	.word	0x00004aa1
    5870:	20000418 	.word	0x20000418
    5874:	000236ee 	.word	0x000236ee
    5878:	20003340 	.word	0x20003340

0000587c <bt_addr_le_is_bonded>:
{
    587c:	b508      	push	{r3, lr}
		struct bt_keys *keys = bt_keys_find_addr(addr);
    587e:	f005 ff79 	bl	b774 <bt_keys_find_addr>
		return keys && keys->keys;
    5882:	b118      	cbz	r0, 588c <bt_addr_le_is_bonded+0x10>
    5884:	8980      	ldrh	r0, [r0, #12]
    5886:	3000      	adds	r0, #0
    5888:	bf18      	it	ne
    588a:	2001      	movne	r0, #1
}
    588c:	bd08      	pop	{r3, pc}
	...

00005890 <bt_le_adv_start>:
//#endif /*CONFIG_EXT_ADV*/

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    5890:	b5f0      	push	{r4, r5, r6, r7, lr}
    5892:	b085      	sub	sp, #20
    5894:	4605      	mov	r5, r0
    5896:	460c      	mov	r4, r1
    5898:	4617      	mov	r7, r2
    589a:	461e      	mov	r6, r3
	struct bt_hci_cp_le_set_adv_param set_param;
	struct net_buf *buf;
	int err;

	if (!valid_adv_param(param)) {
    589c:	f7fd fe56 	bl	354c <valid_adv_param>
    58a0:	b920      	cbnz	r0, 58ac <bt_le_adv_start+0x1c>
		return -EINVAL;
    58a2:	f06f 0415 	mvn.w	r4, #21
	if (!(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING);
	}

	return 0;
}
    58a6:	4620      	mov	r0, r4
    58a8:	b005      	add	sp, #20
    58aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    58ac:	2105      	movs	r1, #5
    58ae:	483e      	ldr	r0, [pc, #248]	; (59a8 <bt_le_adv_start+0x118>)
    58b0:	f7fd fe7a 	bl	35a8 <atomic_test_bit>
    58b4:	2800      	cmp	r0, #0
    58b6:	d171      	bne.n	599c <bt_le_adv_start+0x10c>
	err = set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
    58b8:	4621      	mov	r1, r4
    58ba:	463a      	mov	r2, r7
    58bc:	f242 0008 	movw	r0, #8200	; 0x2008
    58c0:	f7fe f8a8 	bl	3a14 <set_ad>
	if (err) {
    58c4:	4604      	mov	r4, r0
    58c6:	2800      	cmp	r0, #0
    58c8:	d1ed      	bne.n	58a6 <bt_le_adv_start+0x16>
	if (sd || (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    58ca:	2e00      	cmp	r6, #0
    58cc:	d146      	bne.n	595c <bt_le_adv_start+0xcc>
    58ce:	782b      	ldrb	r3, [r5, #0]
    58d0:	07d9      	lsls	r1, r3, #31
    58d2:	d443      	bmi.n	595c <bt_le_adv_start+0xcc>
	memset(&set_param, 0, sizeof(set_param));
    58d4:	220f      	movs	r2, #15
    58d6:	2100      	movs	r1, #0
    58d8:	4668      	mov	r0, sp
    58da:	f7fa ff86 	bl	7ea <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    58de:	886b      	ldrh	r3, [r5, #2]
    58e0:	f8ad 3000 	strh.w	r3, [sp]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    58e4:	88ab      	ldrh	r3, [r5, #4]
    58e6:	f8ad 3002 	strh.w	r3, [sp, #2]
	set_param.channel_map  = 0x07;
    58ea:	2307      	movs	r3, #7
    58ec:	f88d 300d 	strb.w	r3, [sp, #13]
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    58f0:	782b      	ldrb	r3, [r5, #0]
    58f2:	07da      	lsls	r2, r3, #31
    58f4:	d53c      	bpl.n	5970 <bt_le_adv_start+0xe0>
			if (atomic_test_bit(bt_dev.flags,
    58f6:	2102      	movs	r1, #2
    58f8:	482b      	ldr	r0, [pc, #172]	; (59a8 <bt_le_adv_start+0x118>)
    58fa:	4c2c      	ldr	r4, [pc, #176]	; (59ac <bt_le_adv_start+0x11c>)
    58fc:	f7fd fe54 	bl	35a8 <atomic_test_bit>
    5900:	b110      	cbz	r0, 5908 <bt_le_adv_start+0x78>
				set_random_address(&bt_dev.id_addr.a);
    5902:	1c60      	adds	r0, r4, #1
    5904:	f7fd ffa4 	bl	3850 <set_random_address>
			set_param.own_addr_type = bt_dev.id_addr.type;
    5908:	7823      	ldrb	r3, [r4, #0]
    590a:	f88d 3005 	strb.w	r3, [sp, #5]
		set_param.type = BT_LE_ADV_IND;
    590e:	2300      	movs	r3, #0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    5910:	210f      	movs	r1, #15
    5912:	f242 0006 	movw	r0, #8198	; 0x2006
			set_param.type = BT_LE_ADV_NONCONN_IND;
    5916:	f88d 3004 	strb.w	r3, [sp, #4]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    591a:	f7fd ff2b 	bl	3774 <bt_hci_cmd_create>
	if (!buf) {
    591e:	4604      	mov	r4, r0
    5920:	2800      	cmp	r0, #0
    5922:	d03e      	beq.n	59a2 <bt_le_adv_start+0x112>
	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    5924:	220f      	movs	r2, #15
    5926:	4669      	mov	r1, sp
    5928:	3008      	adds	r0, #8
    592a:	f013 fd45 	bl	193b8 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    592e:	4621      	mov	r1, r4
    5930:	2200      	movs	r2, #0
    5932:	f242 0006 	movw	r0, #8198	; 0x2006
    5936:	f7fd ff4d 	bl	37d4 <bt_hci_cmd_send_sync>
	if (err) {
    593a:	4604      	mov	r4, r0
    593c:	2800      	cmp	r0, #0
    593e:	d1b2      	bne.n	58a6 <bt_le_adv_start+0x16>
	err = set_advertise_enable(true);
    5940:	2001      	movs	r0, #1
    5942:	f7fe f83d 	bl	39c0 <set_advertise_enable>
	if (err) {
    5946:	4604      	mov	r4, r0
    5948:	2800      	cmp	r0, #0
    594a:	d1ac      	bne.n	58a6 <bt_le_adv_start+0x16>
	if (!(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    594c:	782b      	ldrb	r3, [r5, #0]
    594e:	079b      	lsls	r3, r3, #30
    5950:	d4a9      	bmi.n	58a6 <bt_le_adv_start+0x16>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    5952:	2140      	movs	r1, #64	; 0x40
    5954:	4814      	ldr	r0, [pc, #80]	; (59a8 <bt_le_adv_start+0x118>)
    5956:	f7fd fe16 	bl	3586 <atomic_or>
    595a:	e7a4      	b.n	58a6 <bt_le_adv_start+0x16>
		err = set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    595c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    595e:	4631      	mov	r1, r6
    5960:	f242 0009 	movw	r0, #8201	; 0x2009
    5964:	f7fe f856 	bl	3a14 <set_ad>
		if (err) {
    5968:	4604      	mov	r4, r0
    596a:	2800      	cmp	r0, #0
    596c:	d0b2      	beq.n	58d4 <bt_le_adv_start+0x44>
    596e:	e79a      	b.n	58a6 <bt_le_adv_start+0x16>
		if (param->own_addr) {
    5970:	68a8      	ldr	r0, [r5, #8]
    5972:	b170      	cbz	r0, 5992 <bt_le_adv_start+0x102>
			if (!BT_ADDR_IS_NRPA(param->own_addr)) {
    5974:	7943      	ldrb	r3, [r0, #5]
    5976:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    597a:	d192      	bne.n	58a2 <bt_le_adv_start+0x12>
			err = set_random_address(param->own_addr);
    597c:	f7fd ff68 	bl	3850 <set_random_address>
			err = le_set_private_addr();
    5980:	4604      	mov	r4, r0
		if (err) {
    5982:	2800      	cmp	r0, #0
    5984:	d18f      	bne.n	58a6 <bt_le_adv_start+0x16>
		set_param.own_addr_type = BT_ADDR_LE_RANDOM;
    5986:	2301      	movs	r3, #1
    5988:	f88d 3005 	strb.w	r3, [sp, #5]
		if (sd) {
    598c:	b126      	cbz	r6, 5998 <bt_le_adv_start+0x108>
			set_param.type = BT_LE_ADV_SCAN_IND;
    598e:	2302      	movs	r3, #2
    5990:	e7be      	b.n	5910 <bt_le_adv_start+0x80>
			err = le_set_private_addr();
    5992:	f7fd ff8b 	bl	38ac <le_set_private_addr>
    5996:	e7f3      	b.n	5980 <bt_le_adv_start+0xf0>
			set_param.type = BT_LE_ADV_NONCONN_IND;
    5998:	2303      	movs	r3, #3
    599a:	e7b9      	b.n	5910 <bt_le_adv_start+0x80>
		return -EALREADY;
    599c:	f06f 0444 	mvn.w	r4, #68	; 0x44
    59a0:	e781      	b.n	58a6 <bt_le_adv_start+0x16>
		return -ENOBUFS;
    59a2:	f06f 0436 	mvn.w	r4, #54	; 0x36
    59a6:	e77e      	b.n	58a6 <bt_le_adv_start+0x16>
    59a8:	20009d48 	.word	0x20009d48
    59ac:	20009cd8 	.word	0x20009cd8

000059b0 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
    59b0:	b510      	push	{r4, lr}
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    59b2:	f06f 0140 	mvn.w	r1, #64	; 0x40
    59b6:	4810      	ldr	r0, [pc, #64]	; (59f8 <bt_le_adv_stop+0x48>)
    59b8:	f7fd fe03 	bl	35c2 <atomic_and>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING);

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    59bc:	2105      	movs	r1, #5
    59be:	480e      	ldr	r0, [pc, #56]	; (59f8 <bt_le_adv_stop+0x48>)
    59c0:	f7fd fdf2 	bl	35a8 <atomic_test_bit>
    59c4:	b910      	cbnz	r0, 59cc <bt_le_adv_stop+0x1c>
		return 0;
    59c6:	2400      	movs	r4, #0
			le_set_private_addr();
		}
	}

	return 0;
}
    59c8:	4620      	mov	r0, r4
    59ca:	bd10      	pop	{r4, pc}
	err = set_advertise_enable(false);
    59cc:	2000      	movs	r0, #0
    59ce:	f7fd fff7 	bl	39c0 <set_advertise_enable>
	if (err) {
    59d2:	4604      	mov	r4, r0
    59d4:	2800      	cmp	r0, #0
    59d6:	d1f7      	bne.n	59c8 <bt_le_adv_stop+0x18>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    59d8:	2107      	movs	r1, #7
    59da:	4807      	ldr	r0, [pc, #28]	; (59f8 <bt_le_adv_stop+0x48>)
    59dc:	f7fd fde4 	bl	35a8 <atomic_test_bit>
    59e0:	2800      	cmp	r0, #0
    59e2:	d0f0      	beq.n	59c6 <bt_le_adv_stop+0x16>
		    atomic_test_bit(bt_dev.flags, BT_DEV_ACTIVE_SCAN)) {
    59e4:	2109      	movs	r1, #9
    59e6:	4804      	ldr	r0, [pc, #16]	; (59f8 <bt_le_adv_stop+0x48>)
    59e8:	f7fd fdde 	bl	35a8 <atomic_test_bit>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    59ec:	2800      	cmp	r0, #0
    59ee:	d0ea      	beq.n	59c6 <bt_le_adv_stop+0x16>
			le_set_private_addr();
    59f0:	f7fd ff5c 	bl	38ac <le_set_private_addr>
    59f4:	e7e8      	b.n	59c8 <bt_le_adv_stop+0x18>
    59f6:	bf00      	nop
    59f8:	20009d48 	.word	0x20009d48

000059fc <bt_buf_get_rx>:

	return bt_le_scan_update(false);
}

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, s32_t timeout)
{
    59fc:	b538      	push	{r3, r4, r5, lr}
    59fe:	4605      	mov	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    5a00:	4805      	ldr	r0, [pc, #20]	; (5a18 <bt_buf_get_rx+0x1c>)
    5a02:	f013 fc45 	bl	19290 <net_buf_alloc_fixed>
#endif

	if (buf) {
    5a06:	4604      	mov	r4, r0
    5a08:	b120      	cbz	r0, 5a14 <bt_buf_get_rx+0x18>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    5a0a:	2100      	movs	r1, #0
    5a0c:	3008      	adds	r0, #8
    5a0e:	f013 fc5e 	bl	192ce <net_buf_simple_reserve>
	*(u8_t *)net_buf_user_data(buf) = type;
    5a12:	7525      	strb	r5, [r4, #20]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    5a14:	4620      	mov	r0, r4
    5a16:	bd38      	pop	{r3, r4, r5, pc}
    5a18:	2000aabc 	.word	0x2000aabc

00005a1c <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(s32_t timeout)
{
    5a1c:	b510      	push	{r4, lr}
    5a1e:	4601      	mov	r1, r0
	__asm__ volatile(
    5a20:	f04f 0320 	mov.w	r3, #32
    5a24:	f3ef 8011 	mrs	r0, BASEPRI
    5a28:	f383 8811 	msr	BASEPRI, r3
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    5a2c:	4a0b      	ldr	r2, [pc, #44]	; (5a5c <bt_buf_get_cmd_complete+0x40>)
	bt_dev.sent_cmd = NULL;
    5a2e:	2300      	movs	r3, #0
	buf = bt_dev.sent_cmd;
    5a30:	f8d2 40c0 	ldr.w	r4, [r2, #192]	; 0xc0
	bt_dev.sent_cmd = NULL;
    5a34:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    5a38:	f380 8811 	msr	BASEPRI, r0
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    5a3c:	b924      	cbnz	r4, 5a48 <bt_buf_get_cmd_complete+0x2c>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    5a3e:	2001      	movs	r0, #1
}
    5a40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    5a44:	f7ff bfda 	b.w	59fc <bt_buf_get_rx>
    5a48:	2201      	movs	r2, #1
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    5a4a:	f104 0008 	add.w	r0, r4, #8
    5a4e:	7522      	strb	r2, [r4, #20]
		buf->len = 0;
    5a50:	81a3      	strh	r3, [r4, #12]
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    5a52:	4619      	mov	r1, r3
    5a54:	f013 fc3b 	bl	192ce <net_buf_simple_reserve>
}
    5a58:	4620      	mov	r0, r4
    5a5a:	bd10      	pop	{r4, pc}
    5a5c:	20009cd8 	.word	0x20009cd8

00005a60 <bt_pub_key_gen>:
{
	return cmd(buf)->opcode;
}

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
    5a60:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!(bt_dev.supported_commands[34] & 0x02) ||
    5a64:	4e27      	ldr	r6, [pc, #156]	; (5b04 <bt_pub_key_gen+0xa4>)
    5a66:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
    5a6a:	f003 0306 	and.w	r3, r3, #6
    5a6e:	2b06      	cmp	r3, #6
{
    5a70:	4607      	mov	r7, r0
	if (!(bt_dev.supported_commands[34] & 0x02) ||
    5a72:	d00e      	beq.n	5a92 <bt_pub_key_gen+0x32>
	    !(bt_dev.supported_commands[34] & 0x04)) {
		BT_WARN("ECC HCI commands not available");
    5a74:	4b24      	ldr	r3, [pc, #144]	; (5b08 <bt_pub_key_gen+0xa8>)
    5a76:	9301      	str	r3, [sp, #4]
    5a78:	9300      	str	r3, [sp, #0]
    5a7a:	4a24      	ldr	r2, [pc, #144]	; (5b0c <bt_pub_key_gen+0xac>)
    5a7c:	4b24      	ldr	r3, [pc, #144]	; (5b10 <bt_pub_key_gen+0xb0>)
    5a7e:	4925      	ldr	r1, [pc, #148]	; (5b14 <bt_pub_key_gen+0xb4>)
    5a80:	4825      	ldr	r0, [pc, #148]	; (5b18 <bt_pub_key_gen+0xb8>)
    5a82:	f7fc fc0d 	bl	22a0 <printk>
		return -ENOTSUP;
    5a86:	f06f 0422 	mvn.w	r4, #34	; 0x22
			cb->func(NULL);
		}
	}

	return 0;
}
    5a8a:	4620      	mov	r0, r4
    5a8c:	b002      	add	sp, #8
    5a8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	new_cb->_next = pub_key_cb;
    5a92:	4d22      	ldr	r5, [pc, #136]	; (5b1c <bt_pub_key_gen+0xbc>)
    5a94:	682b      	ldr	r3, [r5, #0]
    5a96:	6043      	str	r3, [r0, #4]
	pub_key_cb = new_cb;
    5a98:	6028      	str	r0, [r5, #0]
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    5a9a:	2110      	movs	r1, #16
    5a9c:	f106 0070 	add.w	r0, r6, #112	; 0x70
    5aa0:	f7fd fd71 	bl	3586 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    5aa4:	f010 0810 	ands.w	r8, r0, #16
    5aa8:	d001      	beq.n	5aae <bt_pub_key_gen+0x4e>
		return 0;
    5aaa:	2400      	movs	r4, #0
    5aac:	e7ed      	b.n	5a8a <bt_pub_key_gen+0x2a>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    5aae:	f06f 0108 	mvn.w	r1, #8
    5ab2:	f106 0070 	add.w	r0, r6, #112	; 0x70
    5ab6:	f7fd fd84 	bl	35c2 <atomic_and>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
    5aba:	4642      	mov	r2, r8
    5abc:	4641      	mov	r1, r8
    5abe:	f242 0025 	movw	r0, #8229	; 0x2025
    5ac2:	f7fd fe87 	bl	37d4 <bt_hci_cmd_send_sync>
	if (err) {
    5ac6:	4604      	mov	r4, r0
    5ac8:	b188      	cbz	r0, 5aee <bt_pub_key_gen+0x8e>
		BT_ERR("Sending LE P256 Public Key command failed");
    5aca:	4b0f      	ldr	r3, [pc, #60]	; (5b08 <bt_pub_key_gen+0xa8>)
    5acc:	9301      	str	r3, [sp, #4]
    5ace:	9300      	str	r3, [sp, #0]
    5ad0:	4a13      	ldr	r2, [pc, #76]	; (5b20 <bt_pub_key_gen+0xc0>)
    5ad2:	4b0f      	ldr	r3, [pc, #60]	; (5b10 <bt_pub_key_gen+0xb0>)
    5ad4:	490f      	ldr	r1, [pc, #60]	; (5b14 <bt_pub_key_gen+0xb4>)
    5ad6:	4813      	ldr	r0, [pc, #76]	; (5b24 <bt_pub_key_gen+0xc4>)
    5ad8:	f7fc fbe2 	bl	22a0 <printk>
    5adc:	f06f 0110 	mvn.w	r1, #16
    5ae0:	f106 0070 	add.w	r0, r6, #112	; 0x70
    5ae4:	f7fd fd6d 	bl	35c2 <atomic_and>
		pub_key_cb = NULL;
    5ae8:	f8c5 8000 	str.w	r8, [r5]
		return err;
    5aec:	e7cd      	b.n	5a8a <bt_pub_key_gen+0x2a>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    5aee:	682c      	ldr	r4, [r5, #0]
    5af0:	2c00      	cmp	r4, #0
    5af2:	d0da      	beq.n	5aaa <bt_pub_key_gen+0x4a>
		if (cb != new_cb) {
    5af4:	42bc      	cmp	r4, r7
    5af6:	d002      	beq.n	5afe <bt_pub_key_gen+0x9e>
			cb->func(NULL);
    5af8:	6823      	ldr	r3, [r4, #0]
    5afa:	2000      	movs	r0, #0
    5afc:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    5afe:	6864      	ldr	r4, [r4, #4]
    5b00:	e7f6      	b.n	5af0 <bt_pub_key_gen+0x90>
    5b02:	bf00      	nop
    5b04:	20009cd8 	.word	0x20009cd8
    5b08:	00023dbe 	.word	0x00023dbe
    5b0c:	00024016 	.word	0x00024016
    5b10:	000236b6 	.word	0x000236b6
    5b14:	000272e8 	.word	0x000272e8
    5b18:	00023c7d 	.word	0x00023c7d
    5b1c:	2000040c 	.word	0x2000040c
    5b20:	00022d86 	.word	0x00022d86
    5b24:	00023cac 	.word	0x00023cac

00005b28 <bt_dh_key_gen>:

	return NULL;
}

int bt_dh_key_gen(const u8_t remote_pk[64], bt_dh_key_cb_t cb)
{
    5b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_cp_le_generate_dhkey *cp;
	struct net_buf *buf;
	int err;

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    5b2a:	4c1a      	ldr	r4, [pc, #104]	; (5b94 <bt_dh_key_gen+0x6c>)
    5b2c:	6823      	ldr	r3, [r4, #0]
{
    5b2e:	4607      	mov	r7, r0
    5b30:	460a      	mov	r2, r1
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    5b32:	b113      	cbz	r3, 5b3a <bt_dh_key_gen+0x12>
		return -EBUSY;
    5b34:	f06f 000f 	mvn.w	r0, #15
    5b38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    5b3a:	2104      	movs	r1, #4
    5b3c:	4816      	ldr	r0, [pc, #88]	; (5b98 <bt_dh_key_gen+0x70>)
    5b3e:	f7fd fd33 	bl	35a8 <atomic_test_bit>
    5b42:	4606      	mov	r6, r0
    5b44:	2800      	cmp	r0, #0
    5b46:	d1f5      	bne.n	5b34 <bt_dh_key_gen+0xc>
	}

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    5b48:	2103      	movs	r1, #3
    5b4a:	4813      	ldr	r0, [pc, #76]	; (5b98 <bt_dh_key_gen+0x70>)
    5b4c:	f7fd fd2c 	bl	35a8 <atomic_test_bit>
    5b50:	b1e0      	cbz	r0, 5b8c <bt_dh_key_gen+0x64>
		return -EADDRNOTAVAIL;
	}

	dh_key_cb = cb;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    5b52:	2140      	movs	r1, #64	; 0x40
    5b54:	f242 0026 	movw	r0, #8230	; 0x2026
	dh_key_cb = cb;
    5b58:	6022      	str	r2, [r4, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    5b5a:	f7fd fe0b 	bl	3774 <bt_hci_cmd_create>
	if (!buf) {
    5b5e:	4605      	mov	r5, r0
    5b60:	b918      	cbnz	r0, 5b6a <bt_dh_key_gen+0x42>
		dh_key_cb = NULL;
    5b62:	6020      	str	r0, [r4, #0]
		return -ENOBUFS;
    5b64:	f06f 0036 	mvn.w	r0, #54	; 0x36
    5b68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	cp = net_buf_add(buf, sizeof(*cp));
    5b6a:	2140      	movs	r1, #64	; 0x40
    5b6c:	3008      	adds	r0, #8
    5b6e:	f013 fc1d 	bl	193ac <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
    5b72:	2240      	movs	r2, #64	; 0x40
    5b74:	4639      	mov	r1, r7
    5b76:	f7fa fe0c 	bl	792 <memcpy>

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
    5b7a:	4632      	mov	r2, r6
    5b7c:	4629      	mov	r1, r5
    5b7e:	f242 0026 	movw	r0, #8230	; 0x2026
    5b82:	f7fd fe27 	bl	37d4 <bt_hci_cmd_send_sync>
	if (err) {
    5b86:	b118      	cbz	r0, 5b90 <bt_dh_key_gen+0x68>
		dh_key_cb = NULL;
    5b88:	6026      	str	r6, [r4, #0]
		return err;
    5b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EADDRNOTAVAIL;
    5b8c:	f06f 0030 	mvn.w	r0, #48	; 0x30
	}

	return 0;
}
    5b90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5b92:	bf00      	nop
    5b94:	200003c8 	.word	0x200003c8
    5b98:	20009d48 	.word	0x20009d48

00005b9c <notify_connected>:
		return "(unknown)";
	}
}

static void notify_connected(struct bt_conn *conn)
{
    5b9c:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    5b9e:	4b06      	ldr	r3, [pc, #24]	; (5bb8 <notify_connected+0x1c>)
    5ba0:	681c      	ldr	r4, [r3, #0]
{
    5ba2:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    5ba4:	b904      	cbnz	r4, 5ba8 <notify_connected+0xc>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}
}
    5ba6:	bd38      	pop	{r3, r4, r5, pc}
		if (cb->connected) {
    5ba8:	6823      	ldr	r3, [r4, #0]
    5baa:	b113      	cbz	r3, 5bb2 <notify_connected+0x16>
			cb->connected(conn, conn->err);
    5bac:	7ae9      	ldrb	r1, [r5, #11]
    5bae:	4628      	mov	r0, r5
    5bb0:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    5bb2:	69a4      	ldr	r4, [r4, #24]
    5bb4:	e7f6      	b.n	5ba4 <notify_connected+0x8>
    5bb6:	bf00      	nop
    5bb8:	20000480 	.word	0x20000480

00005bbc <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5bbc:	f3bf 8f5b 	dmb	ish
    5bc0:	6800      	ldr	r0, [r0, #0]
    5bc2:	f3bf 8f5b 	dmb	ish
}
    5bc6:	4770      	bx	lr

00005bc8 <bt_conn_reset_rx_state>:
	callback_list = cb;
}

static void bt_conn_reset_rx_state(struct bt_conn *conn)
{
	if (!conn->rx_len) {
    5bc8:	89c3      	ldrh	r3, [r0, #14]
{
    5bca:	b510      	push	{r4, lr}
    5bcc:	4604      	mov	r4, r0
	if (!conn->rx_len) {
    5bce:	b12b      	cbz	r3, 5bdc <bt_conn_reset_rx_state+0x14>
		return;
	}

	net_buf_unref(conn->rx);
    5bd0:	6900      	ldr	r0, [r0, #16]
    5bd2:	f013 fb8d 	bl	192f0 <net_buf_unref>
	conn->rx = NULL;
    5bd6:	2300      	movs	r3, #0
    5bd8:	6123      	str	r3, [r4, #16]
	conn->rx_len = 0;
    5bda:	81e3      	strh	r3, [r4, #14]
    5bdc:	bd10      	pop	{r4, pc}

00005bde <atomic_dec>:
}
    5bde:	f3bf 8f5b 	dmb	ish
    5be2:	e850 3f00 	ldrex	r3, [r0]
    5be6:	1e5a      	subs	r2, r3, #1
    5be8:	e840 2100 	strex	r1, r2, [r0]
    5bec:	2900      	cmp	r1, #0
    5bee:	d1f8      	bne.n	5be2 <atomic_dec+0x4>
    5bf0:	f3bf 8f5b 	dmb	ish
    5bf4:	4618      	mov	r0, r3
    5bf6:	4770      	bx	lr

00005bf8 <atomic_inc>:
}
    5bf8:	f3bf 8f5b 	dmb	ish
    5bfc:	e850 3f00 	ldrex	r3, [r0]
    5c00:	1c5a      	adds	r2, r3, #1
    5c02:	e840 2100 	strex	r1, r2, [r0]
    5c06:	2900      	cmp	r1, #0
    5c08:	d1f8      	bne.n	5bfc <atomic_inc+0x4>
    5c0a:	f3bf 8f5b 	dmb	ish
    5c0e:	4618      	mov	r0, r3
    5c10:	4770      	bx	lr
	...

00005c14 <bt_conn_get_pkts>:
}
    5c14:	4800      	ldr	r0, [pc, #0]	; (5c18 <bt_conn_get_pkts+0x4>)
    5c16:	4770      	bx	lr
    5c18:	20009d64 	.word	0x20009d64

00005c1c <notify_le_param_updated>:
	for (cb = callback_list; cb; cb = cb->_next) {
    5c1c:	4b08      	ldr	r3, [pc, #32]	; (5c40 <notify_le_param_updated+0x24>)
{
    5c1e:	b570      	push	{r4, r5, r6, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    5c20:	681c      	ldr	r4, [r3, #0]
{
    5c22:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    5c24:	b904      	cbnz	r4, 5c28 <notify_le_param_updated+0xc>
}
    5c26:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
    5c28:	68e6      	ldr	r6, [r4, #12]
    5c2a:	b13e      	cbz	r6, 5c3c <notify_le_param_updated+0x20>
			cb->le_param_updated(conn, conn->le.interval,
    5c2c:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
    5c30:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
    5c34:	f8b5 105e 	ldrh.w	r1, [r5, #94]	; 0x5e
    5c38:	4628      	mov	r0, r5
    5c3a:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    5c3c:	69a4      	ldr	r4, [r4, #24]
    5c3e:	e7f1      	b.n	5c24 <notify_le_param_updated+0x8>
    5c40:	20000480 	.word	0x20000480

00005c44 <le_param_req>:
{
    5c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5c46:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
    5c48:	4608      	mov	r0, r1
{
    5c4a:	460e      	mov	r6, r1
	if (!bt_le_conn_params_valid(param)) {
    5c4c:	f7fd ff2e 	bl	3aac <bt_le_conn_params_valid>
    5c50:	4605      	mov	r5, r0
    5c52:	b910      	cbnz	r0, 5c5a <le_param_req+0x16>
		return false;
    5c54:	2500      	movs	r5, #0
}
    5c56:	4628      	mov	r0, r5
    5c58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    5c5a:	4b09      	ldr	r3, [pc, #36]	; (5c80 <le_param_req+0x3c>)
    5c5c:	681c      	ldr	r4, [r3, #0]
    5c5e:	2c00      	cmp	r4, #0
    5c60:	d0f9      	beq.n	5c56 <le_param_req+0x12>
		if (!cb->le_param_req) {
    5c62:	68a3      	ldr	r3, [r4, #8]
    5c64:	b90b      	cbnz	r3, 5c6a <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
    5c66:	69a4      	ldr	r4, [r4, #24]
    5c68:	e7f9      	b.n	5c5e <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
    5c6a:	4631      	mov	r1, r6
    5c6c:	4638      	mov	r0, r7
    5c6e:	4798      	blx	r3
    5c70:	2800      	cmp	r0, #0
    5c72:	d0ef      	beq.n	5c54 <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
    5c74:	4630      	mov	r0, r6
    5c76:	f7fd ff19 	bl	3aac <bt_le_conn_params_valid>
    5c7a:	2800      	cmp	r0, #0
    5c7c:	d1f3      	bne.n	5c66 <le_param_req+0x22>
    5c7e:	e7e9      	b.n	5c54 <le_param_req+0x10>
    5c80:	20000480 	.word	0x20000480

00005c84 <bt_conn_identity_resolved>:
{
    5c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->role == BT_HCI_ROLE_MASTER) {
    5c86:	78c3      	ldrb	r3, [r0, #3]
{
    5c88:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_MASTER) {
    5c8a:	b93b      	cbnz	r3, 5c9c <bt_conn_identity_resolved+0x18>
		rpa = &conn->le.resp_addr;
    5c8c:	f100 0656 	add.w	r6, r0, #86	; 0x56
	for (cb = callback_list; cb; cb = cb->_next) {
    5c90:	4b08      	ldr	r3, [pc, #32]	; (5cb4 <bt_conn_identity_resolved+0x30>)
    5c92:	681d      	ldr	r5, [r3, #0]
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    5c94:	f104 0748 	add.w	r7, r4, #72	; 0x48
	for (cb = callback_list; cb; cb = cb->_next) {
    5c98:	b91d      	cbnz	r5, 5ca2 <bt_conn_identity_resolved+0x1e>
}
    5c9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rpa = &conn->le.init_addr;
    5c9c:	f100 064f 	add.w	r6, r0, #79	; 0x4f
    5ca0:	e7f6      	b.n	5c90 <bt_conn_identity_resolved+0xc>
		if (cb->identity_resolved) {
    5ca2:	692b      	ldr	r3, [r5, #16]
    5ca4:	b11b      	cbz	r3, 5cae <bt_conn_identity_resolved+0x2a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    5ca6:	463a      	mov	r2, r7
    5ca8:	4631      	mov	r1, r6
    5caa:	4620      	mov	r0, r4
    5cac:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    5cae:	69ad      	ldr	r5, [r5, #24]
    5cb0:	e7f2      	b.n	5c98 <bt_conn_identity_resolved+0x14>
    5cb2:	bf00      	nop
    5cb4:	20000480 	.word	0x20000480

00005cb8 <bt_conn_le_start_encryption>:
{
    5cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
    5cbc:	211c      	movs	r1, #28
{
    5cbe:	4682      	mov	sl, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
    5cc0:	f242 0019 	movw	r0, #8217	; 0x2019
{
    5cc4:	4691      	mov	r9, r2
    5cc6:	4698      	mov	r8, r3
    5cc8:	f8bd 4020 	ldrh.w	r4, [sp, #32]
    5ccc:	9f09      	ldr	r7, [sp, #36]	; 0x24
    5cce:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
    5cd0:	f7fd fd50 	bl	3774 <bt_hci_cmd_create>
	if (!buf) {
    5cd4:	4606      	mov	r6, r0
    5cd6:	b320      	cbz	r0, 5d22 <bt_conn_le_start_encryption+0x6a>
	cp = net_buf_add(buf, sizeof(*cp));
    5cd8:	211c      	movs	r1, #28
    5cda:	3008      	adds	r0, #8
    5cdc:	f013 fb66 	bl	193ac <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    5ce0:	4603      	mov	r3, r0
    5ce2:	f8ba 2000 	ldrh.w	r2, [sl]
    5ce6:	f823 2b02 	strh.w	r2, [r3], #2
	cp->rand = rand;
    5cea:	f8c0 9002 	str.w	r9, [r0, #2]
    5cee:	f8c3 8004 	str.w	r8, [r3, #4]
	cp->ediv = ediv;
    5cf2:	8144      	strh	r4, [r0, #10]
	memcpy(cp->ltk, ltk, len);
    5cf4:	f100 040c 	add.w	r4, r0, #12
    5cf8:	462a      	mov	r2, r5
    5cfa:	4639      	mov	r1, r7
    5cfc:	4620      	mov	r0, r4
    5cfe:	f7fa fd48 	bl	792 <memcpy>
	if (len < sizeof(cp->ltk)) {
    5d02:	2d0f      	cmp	r5, #15
    5d04:	d805      	bhi.n	5d12 <bt_conn_le_start_encryption+0x5a>
		memset(cp->ltk + len, 0, sizeof(cp->ltk) - len);
    5d06:	f1c5 0210 	rsb	r2, r5, #16
    5d0a:	2100      	movs	r1, #0
    5d0c:	1960      	adds	r0, r4, r5
    5d0e:	f7fa fd6c 	bl	7ea <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
    5d12:	4631      	mov	r1, r6
    5d14:	2200      	movs	r2, #0
    5d16:	f242 0019 	movw	r0, #8217	; 0x2019
}
    5d1a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
    5d1e:	f7fd bd59 	b.w	37d4 <bt_hci_cmd_send_sync>
}
    5d22:	f06f 0036 	mvn.w	r0, #54	; 0x36
    5d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

00005d2c <bt_conn_security_changed>:
{
    5d2c:	b538      	push	{r3, r4, r5, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    5d2e:	4b06      	ldr	r3, [pc, #24]	; (5d48 <bt_conn_security_changed+0x1c>)
    5d30:	681c      	ldr	r4, [r3, #0]
{
    5d32:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    5d34:	b904      	cbnz	r4, 5d38 <bt_conn_security_changed+0xc>
}
    5d36:	bd38      	pop	{r3, r4, r5, pc}
		if (cb->security_changed) {
    5d38:	6963      	ldr	r3, [r4, #20]
    5d3a:	b113      	cbz	r3, 5d42 <bt_conn_security_changed+0x16>
			cb->security_changed(conn, conn->sec_level);
    5d3c:	7a29      	ldrb	r1, [r5, #8]
    5d3e:	4628      	mov	r0, r5
    5d40:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    5d42:	69a4      	ldr	r4, [r4, #24]
    5d44:	e7f6      	b.n	5d34 <bt_conn_security_changed+0x8>
    5d46:	bf00      	nop
    5d48:	20000480 	.word	0x20000480

00005d4c <bt_conn_security>:
{
    5d4c:	b530      	push	{r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    5d4e:	7b03      	ldrb	r3, [r0, #12]
    5d50:	2b03      	cmp	r3, #3
{
    5d52:	b085      	sub	sp, #20
    5d54:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
    5d56:	d156      	bne.n	5e06 <bt_conn_security+0xba>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
    5d58:	7a03      	ldrb	r3, [r0, #8]
    5d5a:	428b      	cmp	r3, r1
    5d5c:	d302      	bcc.n	5d64 <bt_conn_security+0x18>
		return 0;
    5d5e:	2000      	movs	r0, #0
}
    5d60:	b005      	add	sp, #20
    5d62:	bd30      	pop	{r4, r5, pc}
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
    5d64:	7a43      	ldrb	r3, [r0, #9]
    5d66:	428b      	cmp	r3, r1
    5d68:	d2f9      	bcs.n	5d5e <bt_conn_security+0x12>
	switch (conn->role) {
    5d6a:	78c3      	ldrb	r3, [r0, #3]
	conn->required_sec_level = sec;
    5d6c:	7241      	strb	r1, [r0, #9]
	switch (conn->role) {
    5d6e:	b123      	cbz	r3, 5d7a <bt_conn_security+0x2e>
    5d70:	2b01      	cmp	r3, #1
    5d72:	d045      	beq.n	5e00 <bt_conn_security+0xb4>
		return -EINVAL;
    5d74:	f06f 0015 	mvn.w	r0, #21
    5d78:	e01a      	b.n	5db0 <bt_conn_security+0x64>
		if (!conn->le.keys) {
    5d7a:	6f03      	ldr	r3, [r0, #112]	; 0x70
    5d7c:	2b00      	cmp	r3, #0
    5d7e:	d145      	bne.n	5e0c <bt_conn_security+0xc0>
						     &conn->le.dst);
    5d80:	f100 0548 	add.w	r5, r0, #72	; 0x48
			conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
    5d84:	4629      	mov	r1, r5
    5d86:	2020      	movs	r0, #32
    5d88:	f005 fca2 	bl	b6d0 <bt_keys_find>
    5d8c:	6720      	str	r0, [r4, #112]	; 0x70
			if (!conn->le.keys) {
    5d8e:	2800      	cmp	r0, #0
    5d90:	d13c      	bne.n	5e0c <bt_conn_security+0xc0>
				conn->le.keys = bt_keys_find(BT_KEYS_LTK,
    5d92:	4629      	mov	r1, r5
    5d94:	2004      	movs	r0, #4
    5d96:	f005 fc9b 	bl	b6d0 <bt_keys_find>
    5d9a:	6720      	str	r0, [r4, #112]	; 0x70
		if (!conn->le.keys ||
    5d9c:	b118      	cbz	r0, 5da6 <bt_conn_security+0x5a>
    5d9e:	8983      	ldrh	r3, [r0, #12]
    5da0:	f003 0324 	and.w	r3, r3, #36	; 0x24
    5da4:	b93b      	cbnz	r3, 5db6 <bt_conn_security+0x6a>
			return bt_smp_send_pairing_req(conn);
    5da6:	4620      	mov	r0, r4
    5da8:	f005 fab2 	bl	b310 <bt_smp_send_pairing_req>
	if (err) {
    5dac:	2800      	cmp	r0, #0
    5dae:	d0d6      	beq.n	5d5e <bt_conn_security+0x12>
		conn->required_sec_level = conn->sec_level;
    5db0:	7a23      	ldrb	r3, [r4, #8]
    5db2:	7263      	strb	r3, [r4, #9]
    5db4:	e7d4      	b.n	5d60 <bt_conn_security+0x14>
		if (conn->required_sec_level > BT_SECURITY_MEDIUM &&
    5db6:	7a63      	ldrb	r3, [r4, #9]
    5db8:	2b02      	cmp	r3, #2
    5dba:	d904      	bls.n	5dc6 <bt_conn_security+0x7a>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    5dbc:	3008      	adds	r0, #8
    5dbe:	f7ff fefd 	bl	5bbc <atomic_get>
    5dc2:	07c1      	lsls	r1, r0, #31
    5dc4:	d5ef      	bpl.n	5da6 <bt_conn_security+0x5a>
		if (conn->required_sec_level > BT_SECURITY_HIGH &&
    5dc6:	7a63      	ldrb	r3, [r4, #9]
    5dc8:	2b03      	cmp	r3, #3
    5dca:	d909      	bls.n	5de0 <bt_conn_security+0x94>
		    !atomic_test_bit(conn->le.keys->flags,
    5dcc:	6f20      	ldr	r0, [r4, #112]	; 0x70
    5dce:	3008      	adds	r0, #8
    5dd0:	f7ff fef4 	bl	5bbc <atomic_get>
		if (conn->required_sec_level > BT_SECURITY_HIGH &&
    5dd4:	07c2      	lsls	r2, r0, #31
    5dd6:	d403      	bmi.n	5de0 <bt_conn_security+0x94>
		    !(conn->le.keys->keys & BT_KEYS_LTK_P256)) {
    5dd8:	6f23      	ldr	r3, [r4, #112]	; 0x70
				     BT_KEYS_AUTHENTICATED) &&
    5dda:	899b      	ldrh	r3, [r3, #12]
    5ddc:	069b      	lsls	r3, r3, #26
    5dde:	d5e2      	bpl.n	5da6 <bt_conn_security+0x5a>
						   conn->le.keys->ltk.rand,
    5de0:	6f23      	ldr	r3, [r4, #112]	; 0x70
		return bt_conn_le_start_encryption(conn,
    5de2:	79da      	ldrb	r2, [r3, #7]
    5de4:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
    5de8:	9202      	str	r2, [sp, #8]
						   conn->le.keys->ltk.val,
    5dea:	f103 021a 	add.w	r2, r3, #26
		return bt_conn_le_start_encryption(conn,
    5dee:	9201      	str	r2, [sp, #4]
    5df0:	8b1b      	ldrh	r3, [r3, #24]
    5df2:	9300      	str	r3, [sp, #0]
    5df4:	4602      	mov	r2, r0
    5df6:	460b      	mov	r3, r1
    5df8:	4620      	mov	r0, r4
    5dfa:	f7ff ff5d 	bl	5cb8 <bt_conn_le_start_encryption>
    5dfe:	e7d5      	b.n	5dac <bt_conn_security+0x60>
		return bt_smp_send_security_req(conn);
    5e00:	f005 fa42 	bl	b288 <bt_smp_send_security_req>
    5e04:	e7d2      	b.n	5dac <bt_conn_security+0x60>
		return -ENOTCONN;
    5e06:	f06f 0038 	mvn.w	r0, #56	; 0x38
    5e0a:	e7a9      	b.n	5d60 <bt_conn_security+0x14>
		if (!conn->le.keys ||
    5e0c:	6f20      	ldr	r0, [r4, #112]	; 0x70
    5e0e:	e7c6      	b.n	5d9e <bt_conn_security+0x52>

00005e10 <bt_conn_cb_register>:
	cb->_next = callback_list;
    5e10:	4b02      	ldr	r3, [pc, #8]	; (5e1c <bt_conn_cb_register+0xc>)
    5e12:	681a      	ldr	r2, [r3, #0]
    5e14:	6182      	str	r2, [r0, #24]
	callback_list = cb;
    5e16:	6018      	str	r0, [r3, #0]
    5e18:	4770      	bx	lr
    5e1a:	bf00      	nop
    5e1c:	20000480 	.word	0x20000480

00005e20 <bt_conn_recv>:
	u16_t len;

	BT_DBG("handle %u len %u flags %02x", conn->handle, buf->len, flags);

	/* Check packet boundary flags */
	switch (flags) {
    5e20:	2a01      	cmp	r2, #1
{
    5e22:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    5e24:	4604      	mov	r4, r0
    5e26:	460d      	mov	r5, r1
	switch (flags) {
    5e28:	d01b      	beq.n	5e62 <bt_conn_recv+0x42>
    5e2a:	2a02      	cmp	r2, #2
    5e2c:	d16b      	bne.n	5f06 <bt_conn_recv+0xe6>
	case BT_ACL_START:
		hdr = (void *)buf->data;
		len = sys_le16_to_cpu(hdr->len);
    5e2e:	688b      	ldr	r3, [r1, #8]
    5e30:	881e      	ldrh	r6, [r3, #0]

		BT_DBG("First, len %u final %u", buf->len, len);

		if (conn->rx_len) {
    5e32:	89c3      	ldrh	r3, [r0, #14]
    5e34:	b15b      	cbz	r3, 5e4e <bt_conn_recv+0x2e>
			BT_ERR("Unexpected first L2CAP frame");
    5e36:	4b3d      	ldr	r3, [pc, #244]	; (5f2c <bt_conn_recv+0x10c>)
    5e38:	9301      	str	r3, [sp, #4]
    5e3a:	9300      	str	r3, [sp, #0]
    5e3c:	4a3c      	ldr	r2, [pc, #240]	; (5f30 <bt_conn_recv+0x110>)
    5e3e:	4b3d      	ldr	r3, [pc, #244]	; (5f34 <bt_conn_recv+0x114>)
    5e40:	493d      	ldr	r1, [pc, #244]	; (5f38 <bt_conn_recv+0x118>)
    5e42:	483e      	ldr	r0, [pc, #248]	; (5f3c <bt_conn_recv+0x11c>)
    5e44:	f7fc fa2c 	bl	22a0 <printk>
			bt_conn_reset_rx_state(conn);
    5e48:	4620      	mov	r0, r4
    5e4a:	f7ff febd 	bl	5bc8 <bt_conn_reset_rx_state>
		}

		conn->rx_len = (sizeof(*hdr) + len) - buf->len;
    5e4e:	89ab      	ldrh	r3, [r5, #12]
    5e50:	1af3      	subs	r3, r6, r3
    5e52:	3304      	adds	r3, #4
    5e54:	b29b      	uxth	r3, r3
    5e56:	81e3      	strh	r3, [r4, #14]
		BT_DBG("rx_len %u", conn->rx_len);
		if (conn->rx_len) {
    5e58:	2b00      	cmp	r3, #0
    5e5a:	d042      	beq.n	5ee2 <bt_conn_recv+0xc2>
			conn->rx = buf;
    5e5c:	6125      	str	r5, [r4, #16]
	}

	BT_DBG("Successfully parsed %u byte L2CAP packet", buf->len);

	bt_l2cap_recv(conn, buf);
}
    5e5e:	b004      	add	sp, #16
    5e60:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->rx_len) {
    5e62:	89c3      	ldrh	r3, [r0, #14]
    5e64:	b98b      	cbnz	r3, 5e8a <bt_conn_recv+0x6a>
			BT_ERR("Unexpected L2CAP continuation");
    5e66:	4b31      	ldr	r3, [pc, #196]	; (5f2c <bt_conn_recv+0x10c>)
    5e68:	9301      	str	r3, [sp, #4]
    5e6a:	9300      	str	r3, [sp, #0]
    5e6c:	4a30      	ldr	r2, [pc, #192]	; (5f30 <bt_conn_recv+0x110>)
    5e6e:	4b31      	ldr	r3, [pc, #196]	; (5f34 <bt_conn_recv+0x114>)
    5e70:	4931      	ldr	r1, [pc, #196]	; (5f38 <bt_conn_recv+0x118>)
    5e72:	4833      	ldr	r0, [pc, #204]	; (5f40 <bt_conn_recv+0x120>)
			BT_ERR("L2CAP data overflow");
    5e74:	f7fc fa14 	bl	22a0 <printk>
			bt_conn_reset_rx_state(conn);
    5e78:	4620      	mov	r0, r4
    5e7a:	f7ff fea5 	bl	5bc8 <bt_conn_reset_rx_state>
			net_buf_unref(buf);
    5e7e:	4628      	mov	r0, r5
}
    5e80:	b004      	add	sp, #16
    5e82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
    5e86:	f013 ba33 	b.w	192f0 <net_buf_unref>
		if (buf->len > conn->rx_len) {
    5e8a:	898e      	ldrh	r6, [r1, #12]
    5e8c:	42b3      	cmp	r3, r6
    5e8e:	d207      	bcs.n	5ea0 <bt_conn_recv+0x80>
			BT_ERR("L2CAP data overflow");
    5e90:	4b26      	ldr	r3, [pc, #152]	; (5f2c <bt_conn_recv+0x10c>)
    5e92:	9301      	str	r3, [sp, #4]
    5e94:	9300      	str	r3, [sp, #0]
    5e96:	4a26      	ldr	r2, [pc, #152]	; (5f30 <bt_conn_recv+0x110>)
    5e98:	4b26      	ldr	r3, [pc, #152]	; (5f34 <bt_conn_recv+0x114>)
    5e9a:	4927      	ldr	r1, [pc, #156]	; (5f38 <bt_conn_recv+0x118>)
    5e9c:	4829      	ldr	r0, [pc, #164]	; (5f44 <bt_conn_recv+0x124>)
    5e9e:	e7e9      	b.n	5e74 <bt_conn_recv+0x54>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    5ea0:	6900      	ldr	r0, [r0, #16]
    5ea2:	3008      	adds	r0, #8
    5ea4:	f013 faee 	bl	19484 <net_buf_simple_tailroom>
    5ea8:	4286      	cmp	r6, r0
    5eaa:	d907      	bls.n	5ebc <bt_conn_recv+0x9c>
			BT_ERR("Not enough buffer space for L2CAP data");
    5eac:	4b1f      	ldr	r3, [pc, #124]	; (5f2c <bt_conn_recv+0x10c>)
    5eae:	9301      	str	r3, [sp, #4]
    5eb0:	9300      	str	r3, [sp, #0]
    5eb2:	4a1f      	ldr	r2, [pc, #124]	; (5f30 <bt_conn_recv+0x110>)
    5eb4:	4b1f      	ldr	r3, [pc, #124]	; (5f34 <bt_conn_recv+0x114>)
    5eb6:	4920      	ldr	r1, [pc, #128]	; (5f38 <bt_conn_recv+0x118>)
    5eb8:	4823      	ldr	r0, [pc, #140]	; (5f48 <bt_conn_recv+0x128>)
    5eba:	e7db      	b.n	5e74 <bt_conn_recv+0x54>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
    5ebc:	6920      	ldr	r0, [r4, #16]
    5ebe:	89aa      	ldrh	r2, [r5, #12]
    5ec0:	68a9      	ldr	r1, [r5, #8]
    5ec2:	3008      	adds	r0, #8
    5ec4:	f013 fa78 	bl	193b8 <net_buf_simple_add_mem>
		conn->rx_len -= buf->len;
    5ec8:	89e3      	ldrh	r3, [r4, #14]
    5eca:	89aa      	ldrh	r2, [r5, #12]
    5ecc:	1a9b      	subs	r3, r3, r2
    5ece:	81e3      	strh	r3, [r4, #14]
		net_buf_unref(buf);
    5ed0:	4628      	mov	r0, r5
    5ed2:	f013 fa0d 	bl	192f0 <net_buf_unref>
		if (conn->rx_len) {
    5ed6:	89e3      	ldrh	r3, [r4, #14]
    5ed8:	2b00      	cmp	r3, #0
    5eda:	d1c0      	bne.n	5e5e <bt_conn_recv+0x3e>
		buf = conn->rx;
    5edc:	6925      	ldr	r5, [r4, #16]
		conn->rx_len = 0;
    5ede:	81e3      	strh	r3, [r4, #14]
		conn->rx = NULL;
    5ee0:	6123      	str	r3, [r4, #16]
	len = sys_le16_to_cpu(hdr->len);
    5ee2:	68ab      	ldr	r3, [r5, #8]
	if (sizeof(*hdr) + len != buf->len) {
    5ee4:	89a9      	ldrh	r1, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
    5ee6:	881a      	ldrh	r2, [r3, #0]
	if (sizeof(*hdr) + len != buf->len) {
    5ee8:	1d13      	adds	r3, r2, #4
    5eea:	428b      	cmp	r3, r1
    5eec:	d016      	beq.n	5f1c <bt_conn_recv+0xfc>
		BT_ERR("ACL len mismatch (%u != %u)", len, buf->len);
    5eee:	4b0f      	ldr	r3, [pc, #60]	; (5f2c <bt_conn_recv+0x10c>)
    5ef0:	9303      	str	r3, [sp, #12]
    5ef2:	9102      	str	r1, [sp, #8]
    5ef4:	9201      	str	r2, [sp, #4]
    5ef6:	9300      	str	r3, [sp, #0]
    5ef8:	4a0d      	ldr	r2, [pc, #52]	; (5f30 <bt_conn_recv+0x110>)
    5efa:	4b0e      	ldr	r3, [pc, #56]	; (5f34 <bt_conn_recv+0x114>)
    5efc:	490e      	ldr	r1, [pc, #56]	; (5f38 <bt_conn_recv+0x118>)
    5efe:	4813      	ldr	r0, [pc, #76]	; (5f4c <bt_conn_recv+0x12c>)
    5f00:	f7fc f9ce 	bl	22a0 <printk>
    5f04:	e7bb      	b.n	5e7e <bt_conn_recv+0x5e>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    5f06:	4b09      	ldr	r3, [pc, #36]	; (5f2c <bt_conn_recv+0x10c>)
    5f08:	9302      	str	r3, [sp, #8]
	switch (flags) {
    5f0a:	9201      	str	r2, [sp, #4]
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    5f0c:	9300      	str	r3, [sp, #0]
    5f0e:	4a08      	ldr	r2, [pc, #32]	; (5f30 <bt_conn_recv+0x110>)
    5f10:	4b08      	ldr	r3, [pc, #32]	; (5f34 <bt_conn_recv+0x114>)
    5f12:	4909      	ldr	r1, [pc, #36]	; (5f38 <bt_conn_recv+0x118>)
    5f14:	480e      	ldr	r0, [pc, #56]	; (5f50 <bt_conn_recv+0x130>)
    5f16:	f7fc f9c3 	bl	22a0 <printk>
    5f1a:	e7ad      	b.n	5e78 <bt_conn_recv+0x58>
	bt_l2cap_recv(conn, buf);
    5f1c:	4629      	mov	r1, r5
    5f1e:	4620      	mov	r0, r4
}
    5f20:	b004      	add	sp, #16
    5f22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
    5f26:	f001 b9cd 	b.w	72c4 <bt_l2cap_recv>
    5f2a:	bf00      	nop
    5f2c:	00023dbe 	.word	0x00023dbe
    5f30:	00022d86 	.word	0x00022d86
    5f34:	000242e4 	.word	0x000242e4
    5f38:	000272e8 	.word	0x000272e8
    5f3c:	00024330 	.word	0x00024330
    5f40:	0002435d 	.word	0x0002435d
    5f44:	0002438b 	.word	0x0002438b
    5f48:	000243af 	.word	0x000243af
    5f4c:	00024414 	.word	0x00024414
    5f50:	000243e6 	.word	0x000243e6

00005f54 <bt_conn_send_cb>:
int bt_conn_send_cb(struct bt_conn *conn, struct net_buf *buf,
		    bt_conn_tx_cb_t cb)
{
	BT_DBG("conn handle %u buf len %u cb %p", conn->handle, buf->len, cb);

	if (conn->state != BT_CONN_CONNECTED) {
    5f54:	7b03      	ldrb	r3, [r0, #12]
    5f56:	2b03      	cmp	r3, #3
{
    5f58:	b513      	push	{r0, r1, r4, lr}
    5f5a:	460c      	mov	r4, r1
	if (conn->state != BT_CONN_CONNECTED) {
    5f5c:	d00f      	beq.n	5f7e <bt_conn_send_cb+0x2a>
		BT_ERR("not connected!");
    5f5e:	4b0b      	ldr	r3, [pc, #44]	; (5f8c <bt_conn_send_cb+0x38>)
    5f60:	9301      	str	r3, [sp, #4]
    5f62:	9300      	str	r3, [sp, #0]
    5f64:	4a0a      	ldr	r2, [pc, #40]	; (5f90 <bt_conn_send_cb+0x3c>)
    5f66:	4b0b      	ldr	r3, [pc, #44]	; (5f94 <bt_conn_send_cb+0x40>)
    5f68:	490b      	ldr	r1, [pc, #44]	; (5f98 <bt_conn_send_cb+0x44>)
    5f6a:	480c      	ldr	r0, [pc, #48]	; (5f9c <bt_conn_send_cb+0x48>)
    5f6c:	f7fc f998 	bl	22a0 <printk>
		net_buf_unref(buf);
    5f70:	4620      	mov	r0, r4
    5f72:	f013 f9bd 	bl	192f0 <net_buf_unref>
		return -ENOTCONN;
    5f76:	f06f 0038 	mvn.w	r0, #56	; 0x38

	conn_tx(buf)->cb = cb;

	net_buf_put(&conn->tx_queue, buf);
	return 0;
}
    5f7a:	b002      	add	sp, #8
    5f7c:	bd10      	pop	{r4, pc}
	net_buf_put(&conn->tx_queue, buf);
    5f7e:	302c      	adds	r0, #44	; 0x2c
	conn_tx(buf)->cb = cb;
    5f80:	614a      	str	r2, [r1, #20]
	net_buf_put(&conn->tx_queue, buf);
    5f82:	f013 f9a8 	bl	192d6 <net_buf_put>
	return 0;
    5f86:	2000      	movs	r0, #0
    5f88:	e7f7      	b.n	5f7a <bt_conn_send_cb+0x26>
    5f8a:	bf00      	nop
    5f8c:	00023dbe 	.word	0x00023dbe
    5f90:	00022d86 	.word	0x00022d86
    5f94:	000242f1 	.word	0x000242f1
    5f98:	000272e8 	.word	0x000272e8
    5f9c:	00024440 	.word	0x00024440

00005fa0 <bt_conn_notify_tx>:
	tx->cb = NULL;
	sys_slist_prepend(&free_tx, &tx->node);
}

void bt_conn_notify_tx(struct bt_conn *conn)
{
    5fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	node->next = list->head;
    5fa4:	4d0d      	ldr	r5, [pc, #52]	; (5fdc <bt_conn_notify_tx+0x3c>)
    5fa6:	4606      	mov	r6, r0
	struct bt_conn_tx *tx;

	BT_DBG("conn %p", conn);

	while ((tx = k_fifo_get(&conn->tx_notify, K_NO_WAIT))) {
    5fa8:	f100 071c 	add.w	r7, r0, #28
    5fac:	f04f 0800 	mov.w	r8, #0
    5fb0:	2100      	movs	r1, #0
    5fb2:	4638      	mov	r0, r7
    5fb4:	f01b fbd7 	bl	21766 <k_queue_get>
    5fb8:	4604      	mov	r4, r0
    5fba:	b908      	cbnz	r0, 5fc0 <bt_conn_notify_tx+0x20>
			tx->cb(conn);
		}

		tx_free(tx);
	}
}
    5fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (tx->cb) {
    5fc0:	6863      	ldr	r3, [r4, #4]
    5fc2:	b10b      	cbz	r3, 5fc8 <bt_conn_notify_tx+0x28>
			tx->cb(conn);
    5fc4:	4630      	mov	r0, r6
    5fc6:	4798      	blx	r3
    5fc8:	682b      	ldr	r3, [r5, #0]
    5fca:	6023      	str	r3, [r4, #0]
	if (!list->tail) {
    5fcc:	686b      	ldr	r3, [r5, #4]
	tx->cb = NULL;
    5fce:	f8c4 8004 	str.w	r8, [r4, #4]
	list->head = node;
    5fd2:	602c      	str	r4, [r5, #0]
	if (!list->tail) {
    5fd4:	2b00      	cmp	r3, #0
    5fd6:	d1eb      	bne.n	5fb0 <bt_conn_notify_tx+0x10>
		list->tail = list->head;
    5fd8:	606c      	str	r4, [r5, #4]
    5fda:	e7e7      	b.n	5fac <bt_conn_notify_tx+0xc>
    5fdc:	20000530 	.word	0x20000530

00005fe0 <send_frag>:
	tx_free(CONTAINER_OF(node, struct bt_conn_tx, node));
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, u8_t flags,
		      bool always_consume)
{
    5fe0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    5fe4:	4605      	mov	r5, r0
    5fe6:	460f      	mov	r7, r1
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    5fe8:	4843      	ldr	r0, [pc, #268]	; (60f8 <send_frag+0x118>)
    5fea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    5fee:	4698      	mov	r8, r3
    5ff0:	4614      	mov	r4, r2
    5ff2:	f01b fe3f 	bl	21c74 <_impl_k_sem_take>
		if (!atomic_get(&conns[i].ref)) {
    5ff6:	4b41      	ldr	r3, [pc, #260]	; (60fc <send_frag+0x11c>)
    5ff8:	f103 0044 	add.w	r0, r3, #68	; 0x44
    5ffc:	f7ff fdde 	bl	5bbc <atomic_get>
    6000:	b130      	cbz	r0, 6010 <send_frag+0x30>
		if (conns[i].state == BT_CONN_CONNECTED ||
    6002:	7b1a      	ldrb	r2, [r3, #12]
    6004:	3a03      	subs	r2, #3
    6006:	2a01      	cmp	r2, #1
    6008:	d802      	bhi.n	6010 <send_frag+0x30>
			bt_conn_notify_tx(&conns[i]);
    600a:	4618      	mov	r0, r3
    600c:	f7ff ffc8 	bl	5fa0 <bt_conn_notify_tx>

	/* Make sure we notify and free up any pending tx contexts */
	notify_tx();

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
    6010:	7b2b      	ldrb	r3, [r5, #12]
    6012:	2b03      	cmp	r3, #3
    6014:	d153      	bne.n	60be <send_frag+0xde>
		goto fail;
	}

	hdr = net_buf_push(buf, sizeof(*hdr));
    6016:	2104      	movs	r1, #4
    6018:	f107 0008 	add.w	r0, r7, #8
    601c:	f013 f9fd 	bl	1941a <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    6020:	882a      	ldrh	r2, [r5, #0]
	sys_snode_t *node = list->head;
    6022:	4e37      	ldr	r6, [pc, #220]	; (6100 <send_frag+0x120>)
    6024:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
    6028:	8002      	strh	r2, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    602a:	89bb      	ldrh	r3, [r7, #12]
    602c:	6834      	ldr	r4, [r6, #0]
	if (list->tail == node) {
    602e:	6871      	ldr	r1, [r6, #4]

	cb = conn_tx(buf)->cb;
    6030:	697a      	ldr	r2, [r7, #20]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    6032:	3b04      	subs	r3, #4
    6034:	8043      	strh	r3, [r0, #2]
    6036:	2302      	movs	r3, #2
    6038:	753b      	strb	r3, [r7, #20]
	list->head = node->next;
    603a:	6823      	ldr	r3, [r4, #0]
    603c:	6033      	str	r3, [r6, #0]
	if (list->tail == node) {
    603e:	428c      	cmp	r4, r1
		list->tail = list->head;
    6040:	bf08      	it	eq
    6042:	6073      	streq	r3, [r6, #4]
	CONTAINER_OF(node, struct bt_conn_tx, node)->cb = cb;
    6044:	6062      	str	r2, [r4, #4]
	__asm__ volatile(
    6046:	f04f 0320 	mov.w	r3, #32
    604a:	f3ef 8211 	mrs	r2, BASEPRI
    604e:	f383 8811 	msr	BASEPRI, r3
	node->next = NULL;
    6052:	2300      	movs	r3, #0
    6054:	6023      	str	r3, [r4, #0]
	if (!list->tail) {
    6056:	69ab      	ldr	r3, [r5, #24]
    6058:	2b00      	cmp	r3, #0
    605a:	d13f      	bne.n	60dc <send_frag+0xfc>
		list->tail = node;
    605c:	61ac      	str	r4, [r5, #24]
		list->head = node;
    605e:	616c      	str	r4, [r5, #20]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    6060:	f382 8811 	msr	BASEPRI, r2
	bt_buf_set_type(buf, BT_BUF_ACL_OUT);

	node = add_pending_tx(conn, cb);

	err = bt_send(buf);
    6064:	4638      	mov	r0, r7
    6066:	f7fd ff05 	bl	3e74 <bt_send>
	if (err) {
    606a:	2800      	cmp	r0, #0
    606c:	d041      	beq.n	60f2 <send_frag+0x112>
		BT_ERR("Unable to send to driver (err %d)", err);
    606e:	4b25      	ldr	r3, [pc, #148]	; (6104 <send_frag+0x124>)
    6070:	9302      	str	r3, [sp, #8]
    6072:	9001      	str	r0, [sp, #4]
    6074:	9300      	str	r3, [sp, #0]
    6076:	4a24      	ldr	r2, [pc, #144]	; (6108 <send_frag+0x128>)
    6078:	4b24      	ldr	r3, [pc, #144]	; (610c <send_frag+0x12c>)
    607a:	4925      	ldr	r1, [pc, #148]	; (6110 <send_frag+0x130>)
    607c:	4825      	ldr	r0, [pc, #148]	; (6114 <send_frag+0x134>)
    607e:	f7fc f90f 	bl	22a0 <printk>
	__asm__ volatile(
    6082:	f04f 0320 	mov.w	r3, #32
    6086:	f3ef 8011 	mrs	r0, BASEPRI
    608a:	f383 8811 	msr	BASEPRI, r3
    608e:	696b      	ldr	r3, [r5, #20]
	sys_snode_t *prev = NULL;
    6090:	2200      	movs	r2, #0
	SYS_SLIST_FOR_EACH_NODE(list, test) {
    6092:	b153      	cbz	r3, 60aa <send_frag+0xca>
		if (test == node) {
    6094:	429c      	cmp	r4, r3
    6096:	d129      	bne.n	60ec <send_frag+0x10c>
    6098:	6823      	ldr	r3, [r4, #0]
    609a:	69a9      	ldr	r1, [r5, #24]
	if (!prev_node) {
    609c:	bb0a      	cbnz	r2, 60e2 <send_frag+0x102>
		if (list->tail == node) {
    609e:	428c      	cmp	r4, r1
		list->head = node->next;
    60a0:	616b      	str	r3, [r5, #20]
		if (list->tail == node) {
    60a2:	d100      	bne.n	60a6 <send_frag+0xc6>
			list->tail = list->head;
    60a4:	61ab      	str	r3, [r5, #24]
	node->next = NULL;
    60a6:	2300      	movs	r3, #0
    60a8:	6023      	str	r3, [r4, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    60aa:	f380 8811 	msr	BASEPRI, r0
	tx->cb = NULL;
    60ae:	2300      	movs	r3, #0
    60b0:	6063      	str	r3, [r4, #4]
	node->next = list->head;
    60b2:	6833      	ldr	r3, [r6, #0]
    60b4:	6023      	str	r3, [r4, #0]
	if (!list->tail) {
    60b6:	6873      	ldr	r3, [r6, #4]
	list->head = node;
    60b8:	6034      	str	r4, [r6, #0]
	if (!list->tail) {
    60ba:	b903      	cbnz	r3, 60be <send_frag+0xde>
		list->tail = list->head;
    60bc:	6074      	str	r4, [r6, #4]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    60be:	480e      	ldr	r0, [pc, #56]	; (60f8 <send_frag+0x118>)
    60c0:	f01b fd78 	bl	21bb4 <_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (always_consume) {
    60c4:	f1b8 0f00 	cmp.w	r8, #0
    60c8:	d004      	beq.n	60d4 <send_frag+0xf4>
		net_buf_unref(buf);
    60ca:	4638      	mov	r0, r7
    60cc:	f013 f910 	bl	192f0 <net_buf_unref>
	}
	return false;
    60d0:	f04f 0800 	mov.w	r8, #0
}
    60d4:	4640      	mov	r0, r8
    60d6:	b004      	add	sp, #16
    60d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		list->tail->next = node;
    60dc:	601c      	str	r4, [r3, #0]
		list->tail = node;
    60de:	61ac      	str	r4, [r5, #24]
    60e0:	e7be      	b.n	6060 <send_frag+0x80>
		if (list->tail == node) {
    60e2:	428c      	cmp	r4, r1
		prev_node->next = node->next;
    60e4:	6013      	str	r3, [r2, #0]
			list->tail = prev_node;
    60e6:	bf08      	it	eq
    60e8:	61aa      	streq	r2, [r5, #24]
    60ea:	e7dc      	b.n	60a6 <send_frag+0xc6>
	SYS_SLIST_FOR_EACH_NODE(list, test) {
    60ec:	461a      	mov	r2, r3
    60ee:	681b      	ldr	r3, [r3, #0]
    60f0:	e7cf      	b.n	6092 <send_frag+0xb2>
	return true;
    60f2:	f04f 0801 	mov.w	r8, #1
    60f6:	e7ed      	b.n	60d4 <send_frag+0xf4>
    60f8:	20009d64 	.word	0x20009d64
    60fc:	20000494 	.word	0x20000494
    6100:	20000530 	.word	0x20000530
    6104:	00023dbe 	.word	0x00023dbe
    6108:	00022d86 	.word	0x00022d86
    610c:	00024301 	.word	0x00024301
    6110:	000272e8 	.word	0x000272e8
    6114:	0002371a 	.word	0x0002371a

00006118 <conn_cleanup>:

static struct k_poll_signal conn_change =
		K_POLL_SIGNAL_INITIALIZER(conn_change);

static void conn_cleanup(struct bt_conn *conn)
{
    6118:	b538      	push	{r3, r4, r5, lr}
    611a:	4604      	mov	r4, r0
	struct net_buf *buf;

	/* Give back any allocated buffers */
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    611c:	f100 052c 	add.w	r5, r0, #44	; 0x2c
    6120:	2100      	movs	r1, #0
    6122:	4628      	mov	r0, r5
    6124:	f013 f8ba 	bl	1929c <net_buf_get>
    6128:	b958      	cbnz	r0, 6142 <conn_cleanup+0x2a>
		net_buf_unref(buf);
	}

	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");

	bt_conn_notify_tx(conn);
    612a:	4620      	mov	r0, r4
    612c:	f7ff ff38 	bl	5fa0 <bt_conn_notify_tx>

	bt_conn_reset_rx_state(conn);
    6130:	4620      	mov	r0, r4
    6132:	f7ff fd49 	bl	5bc8 <bt_conn_reset_rx_state>
	return conn;
}

void bt_conn_unref(struct bt_conn *conn)
{
	atomic_dec(&conn->ref);
    6136:	f104 0044 	add.w	r0, r4, #68	; 0x44
}
    613a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	atomic_dec(&conn->ref);
    613e:	f7ff bd4e 	b.w	5bde <atomic_dec>
		net_buf_unref(buf);
    6142:	f013 f8d5 	bl	192f0 <net_buf_unref>
    6146:	e7eb      	b.n	6120 <conn_cleanup+0x8>

00006148 <bt_conn_prepare_events>:
{
    6148:	b538      	push	{r3, r4, r5, lr}
	conn_change.signaled = 0;
    614a:	4b1f      	ldr	r3, [pc, #124]	; (61c8 <bt_conn_prepare_events+0x80>)
    614c:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    614e:	2101      	movs	r1, #1
	conn_change.signaled = 0;
    6150:	609a      	str	r2, [r3, #8]
{
    6152:	4605      	mov	r5, r0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    6154:	f01c fa8e 	bl	22674 <k_poll_event_init>
		if (!atomic_get(&conn->ref)) {
    6158:	4b1c      	ldr	r3, [pc, #112]	; (61cc <bt_conn_prepare_events+0x84>)
    615a:	f103 0044 	add.w	r0, r3, #68	; 0x44
    615e:	f7ff fd2d 	bl	5bbc <atomic_get>
    6162:	4619      	mov	r1, r3
    6164:	b908      	cbnz	r0, 616a <bt_conn_prepare_events+0x22>
			continue;
    6166:	2001      	movs	r0, #1
    6168:	bd38      	pop	{r3, r4, r5, pc}
		if (conn->state == BT_CONN_DISCONNECTED &&
    616a:	7b1a      	ldrb	r2, [r3, #12]
    616c:	b99a      	cbnz	r2, 6196 <bt_conn_prepare_events+0x4e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    616e:	f3bf 8f5b 	dmb	ish
    6172:	1d1a      	adds	r2, r3, #4
    6174:	e852 0f00 	ldrex	r0, [r2]
    6178:	f020 0440 	bic.w	r4, r0, #64	; 0x40
    617c:	e842 4e00 	strex	lr, r4, [r2]
    6180:	f1be 0f00 	cmp.w	lr, #0
    6184:	d1f6      	bne.n	6174 <bt_conn_prepare_events+0x2c>
    6186:	f3bf 8f5b 	dmb	ish
    618a:	0642      	lsls	r2, r0, #25
    618c:	d503      	bpl.n	6196 <bt_conn_prepare_events+0x4e>
			conn_cleanup(conn);
    618e:	4618      	mov	r0, r3
    6190:	f7ff ffc2 	bl	6118 <conn_cleanup>
    6194:	e7e7      	b.n	6166 <bt_conn_prepare_events+0x1e>
		if (conn->state != BT_CONN_CONNECTED) {
    6196:	7b0c      	ldrb	r4, [r1, #12]
    6198:	2c03      	cmp	r4, #3
    619a:	d1e4      	bne.n	6166 <bt_conn_prepare_events+0x1e>
		k_poll_event_init(&events[ev_count],
    619c:	f105 0014 	add.w	r0, r5, #20
    61a0:	4b0b      	ldr	r3, [pc, #44]	; (61d0 <bt_conn_prepare_events+0x88>)
    61a2:	2200      	movs	r2, #0
    61a4:	2104      	movs	r1, #4
    61a6:	f01c fa65 	bl	22674 <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_NOTIFY;
    61aa:	2301      	movs	r3, #1
    61ac:	f885 3020 	strb.w	r3, [r5, #32]
		k_poll_event_init(&events[ev_count],
    61b0:	f105 0028 	add.w	r0, r5, #40	; 0x28
    61b4:	4b07      	ldr	r3, [pc, #28]	; (61d4 <bt_conn_prepare_events+0x8c>)
    61b6:	2200      	movs	r2, #0
    61b8:	2104      	movs	r1, #4
    61ba:	f01c fa5b 	bl	22674 <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
    61be:	2302      	movs	r3, #2
    61c0:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
    61c4:	4620      	mov	r0, r4
}
    61c6:	bd38      	pop	{r3, r4, r5, pc}
    61c8:	20009e10 	.word	0x20009e10
    61cc:	20000494 	.word	0x20000494
    61d0:	200004b0 	.word	0x200004b0
    61d4:	200004c0 	.word	0x200004c0

000061d8 <bt_conn_add_le>:
{
    61d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (!atomic_get(&conns[i].ref)) {
    61dc:	4c19      	ldr	r4, [pc, #100]	; (6244 <bt_conn_add_le+0x6c>)
    61de:	f104 0744 	add.w	r7, r4, #68	; 0x44
{
    61e2:	4680      	mov	r8, r0
		if (!atomic_get(&conns[i].ref)) {
    61e4:	4638      	mov	r0, r7
    61e6:	f7ff fce9 	bl	5bbc <atomic_get>
    61ea:	4605      	mov	r5, r0
    61ec:	b110      	cbz	r0, 61f4 <bt_conn_add_le+0x1c>
		return NULL;
    61ee:	2000      	movs	r0, #0
    61f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	memset(conn, 0, sizeof(*conn));
    61f4:	4601      	mov	r1, r0
    61f6:	229c      	movs	r2, #156	; 0x9c
    61f8:	4620      	mov	r0, r4
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    61fa:	2601      	movs	r6, #1
    61fc:	f7fa faf5 	bl	7ea <memset>
    6200:	f3bf 8f5b 	dmb	ish
    6204:	e857 3f00 	ldrex	r3, [r7]
    6208:	e847 6200 	strex	r2, r6, [r7]
    620c:	2a00      	cmp	r2, #0
    620e:	d1f9      	bne.n	6204 <bt_conn_add_le+0x2c>
    6210:	f3bf 8f5b 	dmb	ish
	memcpy(dst, src, sizeof(*dst));
    6214:	2207      	movs	r2, #7
    6216:	4641      	mov	r1, r8
    6218:	f104 0048 	add.w	r0, r4, #72	; 0x48
    621c:	f7fa fab9 	bl	792 <memcpy>
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    6220:	2318      	movs	r3, #24
    6222:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
    6226:	2328      	movs	r3, #40	; 0x28
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
    6228:	f104 0074 	add.w	r0, r4, #116	; 0x74
	conn->sec_level = BT_SECURITY_LOW;
    622c:	7226      	strb	r6, [r4, #8]
	conn->required_sec_level = BT_SECURITY_LOW;
    622e:	7266      	strb	r6, [r4, #9]
	conn->type = BT_CONN_TYPE_LE;
    6230:	70a5      	strb	r5, [r4, #2]
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
    6232:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
    6236:	4904      	ldr	r1, [pc, #16]	; (6248 <bt_conn_add_le+0x70>)
    6238:	f01b ffe8 	bl	2220c <k_delayed_work_init>
			conn = &conns[i];
    623c:	4620      	mov	r0, r4
}
    623e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6242:	bf00      	nop
    6244:	20000494 	.word	0x20000494
    6248:	00006741 	.word	0x00006741

0000624c <bt_conn_set_state>:
{
    624c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (conn->state == state) {
    624e:	7b05      	ldrb	r5, [r0, #12]
    6250:	428d      	cmp	r5, r1
{
    6252:	b085      	sub	sp, #20
    6254:	4604      	mov	r4, r0
    6256:	460e      	mov	r6, r1
	if (conn->state == state) {
    6258:	d10a      	bne.n	6270 <bt_conn_set_state+0x24>
		BT_WARN("no transition");
    625a:	4b5f      	ldr	r3, [pc, #380]	; (63d8 <bt_conn_set_state+0x18c>)
    625c:	9301      	str	r3, [sp, #4]
    625e:	9300      	str	r3, [sp, #0]
    6260:	4a5e      	ldr	r2, [pc, #376]	; (63dc <bt_conn_set_state+0x190>)
    6262:	4b5f      	ldr	r3, [pc, #380]	; (63e0 <bt_conn_set_state+0x194>)
    6264:	495f      	ldr	r1, [pc, #380]	; (63e4 <bt_conn_set_state+0x198>)
    6266:	4860      	ldr	r0, [pc, #384]	; (63e8 <bt_conn_set_state+0x19c>)
    6268:	f7fc f81a 	bl	22a0 <printk>
}
    626c:	b005      	add	sp, #20
    626e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn->state = state;
    6270:	7321      	strb	r1, [r4, #12]
	switch (old_state) {
    6272:	b19d      	cbz	r5, 629c <bt_conn_set_state+0x50>
    6274:	2d02      	cmp	r5, #2
    6276:	d015      	beq.n	62a4 <bt_conn_set_state+0x58>
	switch (conn->state) {
    6278:	7b23      	ldrb	r3, [r4, #12]
    627a:	2b04      	cmp	r3, #4
    627c:	f200 80a1 	bhi.w	63c2 <bt_conn_set_state+0x176>
    6280:	a201      	add	r2, pc, #4	; (adr r2, 6288 <bt_conn_set_state+0x3c>)
    6282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    6286:	bf00      	nop
    6288:	000062e9 	.word	0x000062e9
    628c:	0000626d 	.word	0x0000626d
    6290:	000063a7 	.word	0x000063a7
    6294:	000062b3 	.word	0x000062b3
    6298:	0000626d 	.word	0x0000626d
	atomic_inc(&conn->ref);
    629c:	3044      	adds	r0, #68	; 0x44
    629e:	f7ff fcab 	bl	5bf8 <atomic_inc>
    62a2:	e7e9      	b.n	6278 <bt_conn_set_state+0x2c>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    62a4:	7883      	ldrb	r3, [r0, #2]
    62a6:	2b00      	cmp	r3, #0
    62a8:	d1e6      	bne.n	6278 <bt_conn_set_state+0x2c>
			k_delayed_work_cancel(&conn->le.update_work);
    62aa:	3074      	adds	r0, #116	; 0x74
    62ac:	f01b ffcc 	bl	22248 <k_delayed_work_cancel>
    62b0:	e7e2      	b.n	6278 <bt_conn_set_state+0x2c>
		if (conn->type == BT_CONN_TYPE_SCO) {
    62b2:	78a3      	ldrb	r3, [r4, #2]
    62b4:	2b02      	cmp	r3, #2
    62b6:	d0d9      	beq.n	626c <bt_conn_set_state+0x20>
		k_fifo_init(&conn->tx_queue);
    62b8:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    62bc:	f01b f9fe 	bl	216bc <k_queue_init>
		k_fifo_init(&conn->tx_notify);
    62c0:	f104 001c 	add.w	r0, r4, #28
    62c4:	f01b f9fa 	bl	216bc <k_queue_init>
		k_poll_signal(&conn_change, 0);
    62c8:	2100      	movs	r1, #0
    62ca:	4848      	ldr	r0, [pc, #288]	; (63ec <bt_conn_set_state+0x1a0>)
    62cc:	f01c fa9c 	bl	22808 <k_poll_signal>
	list->head = NULL;
    62d0:	2300      	movs	r3, #0
		bt_l2cap_connected(conn);
    62d2:	4620      	mov	r0, r4
    62d4:	63e3      	str	r3, [r4, #60]	; 0x3c
	list->tail = NULL;
    62d6:	6423      	str	r3, [r4, #64]	; 0x40
    62d8:	f000 feac 	bl	7034 <bt_l2cap_connected>
		notify_connected(conn);
    62dc:	4620      	mov	r0, r4
}
    62de:	b005      	add	sp, #20
    62e0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		notify_connected(conn);
    62e4:	f7ff bc5a 	b.w	5b9c <notify_connected>
		if (conn->type == BT_CONN_TYPE_SCO) {
    62e8:	78a3      	ldrb	r3, [r4, #2]
    62ea:	2b02      	cmp	r3, #2
    62ec:	d106      	bne.n	62fc <bt_conn_set_state+0xb0>
	atomic_dec(&conn->ref);
    62ee:	f104 0044 	add.w	r0, r4, #68	; 0x44
}
    62f2:	b005      	add	sp, #20
    62f4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	atomic_dec(&conn->ref);
    62f8:	f7ff bc71 	b.w	5bde <atomic_dec>
		if (old_state == BT_CONN_CONNECTED ||
    62fc:	1eeb      	subs	r3, r5, #3
    62fe:	2b01      	cmp	r3, #1
    6300:	d844      	bhi.n	638c <bt_conn_set_state+0x140>
			bt_l2cap_disconnected(conn);
    6302:	4620      	mov	r0, r4
    6304:	f000 fc98 	bl	6c38 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    6308:	4b39      	ldr	r3, [pc, #228]	; (63f0 <bt_conn_set_state+0x1a4>)
    630a:	681d      	ldr	r5, [r3, #0]
    630c:	b9ed      	cbnz	r5, 634a <bt_conn_set_state+0xfe>
	node->next = list->head;
    630e:	4e39      	ldr	r6, [pc, #228]	; (63f4 <bt_conn_set_state+0x1a8>)
    6310:	4f39      	ldr	r7, [pc, #228]	; (63f8 <bt_conn_set_state+0x1ac>)
	__asm__ volatile(
    6312:	f04f 0320 	mov.w	r3, #32
    6316:	f3ef 8111 	mrs	r1, BASEPRI
    631a:	f383 8811 	msr	BASEPRI, r3
    631e:	6963      	ldr	r3, [r4, #20]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    6320:	b12b      	cbz	r3, 632e <bt_conn_set_state+0xe2>
	if (list->tail == node) {
    6322:	69a0      	ldr	r0, [r4, #24]
	list->head = node->next;
    6324:	681a      	ldr	r2, [r3, #0]
    6326:	6162      	str	r2, [r4, #20]
	if (list->tail == node) {
    6328:	4283      	cmp	r3, r0
		list->tail = list->head;
    632a:	bf08      	it	eq
    632c:	61a2      	streq	r2, [r4, #24]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    632e:	f381 8811 	msr	BASEPRI, r1
		if (!node) {
    6332:	b18b      	cbz	r3, 6358 <bt_conn_set_state+0x10c>
	node->next = list->head;
    6334:	6832      	ldr	r2, [r6, #0]
    6336:	601a      	str	r2, [r3, #0]
	if (!list->tail) {
    6338:	6872      	ldr	r2, [r6, #4]
	tx->cb = NULL;
    633a:	605d      	str	r5, [r3, #4]
	list->head = node;
    633c:	6033      	str	r3, [r6, #0]
	if (!list->tail) {
    633e:	b902      	cbnz	r2, 6342 <bt_conn_set_state+0xf6>
		list->tail = list->head;
    6340:	6073      	str	r3, [r6, #4]
    6342:	4638      	mov	r0, r7
    6344:	f01b fc36 	bl	21bb4 <_impl_k_sem_give>
    6348:	e7e3      	b.n	6312 <bt_conn_set_state+0xc6>
		if (cb->disconnected) {
    634a:	686b      	ldr	r3, [r5, #4]
    634c:	b113      	cbz	r3, 6354 <bt_conn_set_state+0x108>
			cb->disconnected(conn, conn->err);
    634e:	7ae1      	ldrb	r1, [r4, #11]
    6350:	4620      	mov	r0, r4
    6352:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    6354:	69ad      	ldr	r5, [r5, #24]
    6356:	e7d9      	b.n	630c <bt_conn_set_state+0xc0>
			if (conn->type == BT_CONN_TYPE_LE) {
    6358:	78a3      	ldrb	r3, [r4, #2]
    635a:	b91b      	cbnz	r3, 6364 <bt_conn_set_state+0x118>
				k_delayed_work_cancel(&conn->le.update_work);
    635c:	f104 0074 	add.w	r0, r4, #116	; 0x74
    6360:	f01b ff72 	bl	22248 <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6364:	f3bf 8f5b 	dmb	ish
    6368:	3404      	adds	r4, #4
    636a:	e854 3f00 	ldrex	r3, [r4]
    636e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    6372:	e844 3200 	strex	r2, r3, [r4]
    6376:	2a00      	cmp	r2, #0
    6378:	d1f7      	bne.n	636a <bt_conn_set_state+0x11e>
    637a:	f3bf 8f5b 	dmb	ish
			k_poll_signal(&conn_change, 0);
    637e:	481b      	ldr	r0, [pc, #108]	; (63ec <bt_conn_set_state+0x1a0>)
    6380:	2100      	movs	r1, #0
}
    6382:	b005      	add	sp, #20
    6384:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			k_poll_signal(&conn_change, 0);
    6388:	f01c ba3e 	b.w	22808 <k_poll_signal>
		} else if (old_state == BT_CONN_CONNECT) {
    638c:	2d02      	cmp	r5, #2
    638e:	d103      	bne.n	6398 <bt_conn_set_state+0x14c>
			notify_connected(conn);
    6390:	4620      	mov	r0, r4
    6392:	f7ff fc03 	bl	5b9c <notify_connected>
    6396:	e7aa      	b.n	62ee <bt_conn_set_state+0xa2>
		} else if (old_state == BT_CONN_CONNECT_SCAN) {
    6398:	2d01      	cmp	r5, #1
    639a:	f47f af67 	bne.w	626c <bt_conn_set_state+0x20>
			if (conn->err) {
    639e:	7ae3      	ldrb	r3, [r4, #11]
    63a0:	2b00      	cmp	r3, #0
    63a2:	d0a4      	beq.n	62ee <bt_conn_set_state+0xa2>
    63a4:	e7f4      	b.n	6390 <bt_conn_set_state+0x144>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    63a6:	78a3      	ldrb	r3, [r4, #2]
    63a8:	2b00      	cmp	r3, #0
    63aa:	f47f af5f 	bne.w	626c <bt_conn_set_state+0x20>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    63ae:	4813      	ldr	r0, [pc, #76]	; (63fc <bt_conn_set_state+0x1b0>)
    63b0:	f640 32b8 	movw	r2, #3000	; 0xbb8
    63b4:	f104 0174 	add.w	r1, r4, #116	; 0x74
}
    63b8:	b005      	add	sp, #20
    63ba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    63be:	f01b bf9d 	b.w	222fc <k_delayed_work_submit_to_queue>
		BT_WARN("no valid (%u) state was set", state);
    63c2:	4b05      	ldr	r3, [pc, #20]	; (63d8 <bt_conn_set_state+0x18c>)
    63c4:	9302      	str	r3, [sp, #8]
    63c6:	e88d 0048 	stmia.w	sp, {r3, r6}
    63ca:	4a04      	ldr	r2, [pc, #16]	; (63dc <bt_conn_set_state+0x190>)
    63cc:	4b04      	ldr	r3, [pc, #16]	; (63e0 <bt_conn_set_state+0x194>)
    63ce:	4905      	ldr	r1, [pc, #20]	; (63e4 <bt_conn_set_state+0x198>)
    63d0:	480b      	ldr	r0, [pc, #44]	; (6400 <bt_conn_set_state+0x1b4>)
    63d2:	f7fb ff65 	bl	22a0 <printk>
		break;
    63d6:	e749      	b.n	626c <bt_conn_set_state+0x20>
    63d8:	00023dbe 	.word	0x00023dbe
    63dc:	00024016 	.word	0x00024016
    63e0:	0002431e 	.word	0x0002431e
    63e4:	000272e8 	.word	0x000272e8
    63e8:	0002445f 	.word	0x0002445f
    63ec:	20009e10 	.word	0x20009e10
    63f0:	20000480 	.word	0x20000480
    63f4:	20000530 	.word	0x20000530
    63f8:	20009d64 	.word	0x20009d64
    63fc:	20003340 	.word	0x20003340
    6400:	0002447d 	.word	0x0002447d

00006404 <bt_conn_lookup_handle>:
{
    6404:	b510      	push	{r4, lr}
		if (!atomic_get(&conns[i].ref)) {
    6406:	4c0b      	ldr	r4, [pc, #44]	; (6434 <bt_conn_lookup_handle+0x30>)
{
    6408:	4602      	mov	r2, r0
		if (!atomic_get(&conns[i].ref)) {
    640a:	f104 0044 	add.w	r0, r4, #68	; 0x44
    640e:	f7ff fbd5 	bl	5bbc <atomic_get>
    6412:	b168      	cbz	r0, 6430 <bt_conn_lookup_handle+0x2c>
		if (conns[i].state != BT_CONN_CONNECTED &&
    6414:	7b23      	ldrb	r3, [r4, #12]
    6416:	3b03      	subs	r3, #3
    6418:	2b01      	cmp	r3, #1
    641a:	d808      	bhi.n	642e <bt_conn_lookup_handle+0x2a>
		if (conns[i].handle == handle) {
    641c:	8823      	ldrh	r3, [r4, #0]
    641e:	4293      	cmp	r3, r2
    6420:	d105      	bne.n	642e <bt_conn_lookup_handle+0x2a>
	atomic_inc(&conn->ref);
    6422:	f104 0044 	add.w	r0, r4, #68	; 0x44
    6426:	f7ff fbe7 	bl	5bf8 <atomic_inc>
			return bt_conn_ref(&conns[i]);
    642a:	4620      	mov	r0, r4
    642c:	bd10      	pop	{r4, pc}
	return NULL;
    642e:	2000      	movs	r0, #0
}
    6430:	bd10      	pop	{r4, pc}
    6432:	bf00      	nop
    6434:	20000494 	.word	0x20000494

00006438 <bt_conn_addr_le_cmp>:
{
    6438:	b538      	push	{r3, r4, r5, lr}
    643a:	460d      	mov	r5, r1
    643c:	4604      	mov	r4, r0
	return memcmp(a, b, sizeof(*a));
    643e:	f100 0148 	add.w	r1, r0, #72	; 0x48
    6442:	2207      	movs	r2, #7
    6444:	4628      	mov	r0, r5
    6446:	f7fa f977 	bl	738 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
    644a:	b160      	cbz	r0, 6466 <bt_conn_addr_le_cmp+0x2e>
	if (conn->role == BT_HCI_ROLE_MASTER) {
    644c:	78e3      	ldrb	r3, [r4, #3]
    644e:	2207      	movs	r2, #7
    6450:	b933      	cbnz	r3, 6460 <bt_conn_addr_le_cmp+0x28>
    6452:	f104 0156 	add.w	r1, r4, #86	; 0x56
    6456:	4628      	mov	r0, r5
}
    6458:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    645c:	f7fa b96c 	b.w	738 <memcmp>
    6460:	f104 014f 	add.w	r1, r4, #79	; 0x4f
    6464:	e7f7      	b.n	6456 <bt_conn_addr_le_cmp+0x1e>
    6466:	bd38      	pop	{r3, r4, r5, pc}

00006468 <bt_conn_lookup_addr_le>:
{
    6468:	b510      	push	{r4, lr}
		if (!atomic_get(&conns[i].ref)) {
    646a:	4c0b      	ldr	r4, [pc, #44]	; (6498 <bt_conn_lookup_addr_le+0x30>)
{
    646c:	4601      	mov	r1, r0
		if (!atomic_get(&conns[i].ref)) {
    646e:	f104 0044 	add.w	r0, r4, #68	; 0x44
    6472:	f7ff fba3 	bl	5bbc <atomic_get>
    6476:	b908      	cbnz	r0, 647c <bt_conn_lookup_addr_le+0x14>
	return NULL;
    6478:	2000      	movs	r0, #0
    647a:	bd10      	pop	{r4, pc}
		if (conns[i].type != BT_CONN_TYPE_LE) {
    647c:	78a3      	ldrb	r3, [r4, #2]
    647e:	2b00      	cmp	r3, #0
    6480:	d1fa      	bne.n	6478 <bt_conn_lookup_addr_le+0x10>
		if (!bt_conn_addr_le_cmp(&conns[i], peer)) {
    6482:	4620      	mov	r0, r4
    6484:	f7ff ffd8 	bl	6438 <bt_conn_addr_le_cmp>
    6488:	2800      	cmp	r0, #0
    648a:	d1f5      	bne.n	6478 <bt_conn_lookup_addr_le+0x10>
	atomic_inc(&conn->ref);
    648c:	f104 0044 	add.w	r0, r4, #68	; 0x44
    6490:	f7ff fbb2 	bl	5bf8 <atomic_inc>
		if (!bt_conn_addr_le_cmp(&conns[i], peer)) {
    6494:	4620      	mov	r0, r4
}
    6496:	bd10      	pop	{r4, pc}
    6498:	20000494 	.word	0x20000494

0000649c <bt_conn_lookup_state_le>:
{
    649c:	b538      	push	{r3, r4, r5, lr}
		if (!atomic_get(&conns[i].ref)) {
    649e:	4c0e      	ldr	r4, [pc, #56]	; (64d8 <bt_conn_lookup_state_le+0x3c>)
{
    64a0:	4603      	mov	r3, r0
		if (!atomic_get(&conns[i].ref)) {
    64a2:	f104 0044 	add.w	r0, r4, #68	; 0x44
{
    64a6:	460d      	mov	r5, r1
		if (!atomic_get(&conns[i].ref)) {
    64a8:	f7ff fb88 	bl	5bbc <atomic_get>
    64ac:	b908      	cbnz	r0, 64b2 <bt_conn_lookup_state_le+0x16>
	return NULL;
    64ae:	2000      	movs	r0, #0
    64b0:	bd38      	pop	{r3, r4, r5, pc}
		if (conns[i].type != BT_CONN_TYPE_LE) {
    64b2:	78a2      	ldrb	r2, [r4, #2]
    64b4:	2a00      	cmp	r2, #0
    64b6:	d1fa      	bne.n	64ae <bt_conn_lookup_state_le+0x12>
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    64b8:	b93b      	cbnz	r3, 64ca <bt_conn_lookup_state_le+0x2e>
		if (conns[i].state == state) {
    64ba:	7b23      	ldrb	r3, [r4, #12]
    64bc:	42ab      	cmp	r3, r5
    64be:	d1f6      	bne.n	64ae <bt_conn_lookup_state_le+0x12>
	atomic_inc(&conn->ref);
    64c0:	4806      	ldr	r0, [pc, #24]	; (64dc <bt_conn_lookup_state_le+0x40>)
    64c2:	f7ff fb99 	bl	5bf8 <atomic_inc>
			return bt_conn_ref(&conns[i]);
    64c6:	4804      	ldr	r0, [pc, #16]	; (64d8 <bt_conn_lookup_state_le+0x3c>)
}
    64c8:	bd38      	pop	{r3, r4, r5, pc}
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    64ca:	4619      	mov	r1, r3
    64cc:	4620      	mov	r0, r4
    64ce:	f7ff ffb3 	bl	6438 <bt_conn_addr_le_cmp>
    64d2:	2800      	cmp	r0, #0
    64d4:	d1eb      	bne.n	64ae <bt_conn_lookup_state_le+0x12>
    64d6:	e7f0      	b.n	64ba <bt_conn_lookup_state_le+0x1e>
    64d8:	20000494 	.word	0x20000494
    64dc:	200004d8 	.word	0x200004d8

000064e0 <bt_conn_unref>:
	atomic_dec(&conn->ref);
    64e0:	3044      	adds	r0, #68	; 0x44
    64e2:	f7ff bb7c 	b.w	5bde <atomic_dec>

000064e6 <bt_conn_get_info>:
{
	return &conn->le.dst;
}

int bt_conn_get_info(const struct bt_conn *conn, struct bt_conn_info *info)
{
    64e6:	b510      	push	{r4, lr}
	info->type = conn->type;
    64e8:	7883      	ldrb	r3, [r0, #2]
    64ea:	700b      	strb	r3, [r1, #0]
	info->role = conn->role;
    64ec:	78c4      	ldrb	r4, [r0, #3]
    64ee:	704c      	strb	r4, [r1, #1]

	switch (conn->type) {
    64f0:	b9a3      	cbnz	r3, 651c <bt_conn_get_info+0x36>
    64f2:	f100 034f 	add.w	r3, r0, #79	; 0x4f
    64f6:	f100 0256 	add.w	r2, r0, #86	; 0x56
	case BT_CONN_TYPE_LE:
		if (conn->role == BT_HCI_ROLE_MASTER) {
    64fa:	b964      	cbnz	r4, 6516 <bt_conn_get_info+0x30>
			info->le.src = &conn->le.init_addr;
    64fc:	604b      	str	r3, [r1, #4]
			info->le.dst = &conn->le.resp_addr;
    64fe:	608a      	str	r2, [r1, #8]
		} else {
			info->le.src = &conn->le.resp_addr;
			info->le.dst = &conn->le.init_addr;
		}
		info->le.interval = conn->le.interval;
    6500:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    6504:	818b      	strh	r3, [r1, #12]
		info->le.latency = conn->le.latency;
    6506:	f8b0 3064 	ldrh.w	r3, [r0, #100]	; 0x64
    650a:	81cb      	strh	r3, [r1, #14]
		info->le.timeout = conn->le.timeout;
    650c:	f8b0 3066 	ldrh.w	r3, [r0, #102]	; 0x66
    6510:	820b      	strh	r3, [r1, #16]
		return 0;
    6512:	2000      	movs	r0, #0
    6514:	bd10      	pop	{r4, pc}
			info->le.src = &conn->le.resp_addr;
    6516:	604a      	str	r2, [r1, #4]
			info->le.dst = &conn->le.init_addr;
    6518:	608b      	str	r3, [r1, #8]
    651a:	e7f1      	b.n	6500 <bt_conn_get_info+0x1a>
		info->br.dst = &conn->br.dst;
		return 0;
#endif
	}

	return -EINVAL;
    651c:	f06f 0015 	mvn.w	r0, #21
}
    6520:	bd10      	pop	{r4, pc}
	...

00006524 <bt_le_set_auto_conn>:
	return conn;
}

int bt_le_set_auto_conn(bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
    6524:	b570      	push	{r4, r5, r6, lr}
    6526:	4606      	mov	r6, r0
	struct bt_conn *conn;

	if (param && !bt_le_conn_params_valid(param)) {
    6528:	460d      	mov	r5, r1
    652a:	2900      	cmp	r1, #0
    652c:	d13d      	bne.n	65aa <bt_le_set_auto_conn+0x86>
		return -EINVAL;
	}

	conn = bt_conn_lookup_addr_le(addr);
    652e:	4630      	mov	r0, r6
    6530:	f7ff ff9a 	bl	6468 <bt_conn_lookup_addr_le>
	if (!conn) {
    6534:	4604      	mov	r4, r0
    6536:	b928      	cbnz	r0, 6544 <bt_le_set_auto_conn+0x20>
		conn = bt_conn_add_le(addr);
    6538:	4630      	mov	r0, r6
    653a:	f7ff fe4d 	bl	61d8 <bt_conn_add_le>
		if (!conn) {
    653e:	4604      	mov	r4, r0
    6540:	2800      	cmp	r0, #0
    6542:	d053      	beq.n	65ec <bt_le_set_auto_conn+0xc8>
    6544:	1d23      	adds	r3, r4, #4
    6546:	f104 0644 	add.w	r6, r4, #68	; 0x44
			return -ENOMEM;
		}
	}

	if (param) {
    654a:	2d00      	cmp	r5, #0
    654c:	d035      	beq.n	65ba <bt_le_set_auto_conn+0x96>
	conn->le.interval_max = param->interval_max;
    654e:	886a      	ldrh	r2, [r5, #2]
    6550:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
	conn->le.latency = param->latency;
    6554:	88aa      	ldrh	r2, [r5, #4]
    6556:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
	conn->le.timeout = param->timeout;
    655a:	88ea      	ldrh	r2, [r5, #6]
    655c:	f8a4 2066 	strh.w	r2, [r4, #102]	; 0x66
    6560:	f3bf 8f5b 	dmb	ish
    6564:	e853 2f00 	ldrex	r2, [r3]
    6568:	f042 0101 	orr.w	r1, r2, #1
    656c:	e843 1000 	strex	r0, r1, [r3]
    6570:	2800      	cmp	r0, #0
    6572:	d1f7      	bne.n	6564 <bt_le_set_auto_conn+0x40>
    6574:	f3bf 8f5b 	dmb	ish
		bt_conn_set_param_le(conn, param);

		if (!atomic_test_and_set_bit(conn->flags,
    6578:	07d1      	lsls	r1, r2, #31
    657a:	d402      	bmi.n	6582 <bt_le_set_auto_conn+0x5e>
	atomic_inc(&conn->ref);
    657c:	4630      	mov	r0, r6
    657e:	f7ff fb3b 	bl	5bf8 <atomic_inc>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
			}
		}
	}

	if (conn->state == BT_CONN_DISCONNECTED &&
    6582:	7b23      	ldrb	r3, [r4, #12]
    6584:	b963      	cbnz	r3, 65a0 <bt_le_set_auto_conn+0x7c>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    6586:	481b      	ldr	r0, [pc, #108]	; (65f4 <bt_le_set_auto_conn+0xd0>)
    6588:	f7ff fb18 	bl	5bbc <atomic_get>
    658c:	0783      	lsls	r3, r0, #30
    658e:	d507      	bpl.n	65a0 <bt_le_set_auto_conn+0x7c>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		if (param) {
    6590:	b11d      	cbz	r5, 659a <bt_le_set_auto_conn+0x76>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    6592:	2101      	movs	r1, #1
    6594:	4620      	mov	r0, r4
    6596:	f7ff fe59 	bl	624c <bt_conn_set_state>
		}
		bt_le_scan_update(false);
    659a:	2000      	movs	r0, #0
    659c:	f7fd fcfa 	bl	3f94 <bt_le_scan_update>
	atomic_dec(&conn->ref);
    65a0:	4630      	mov	r0, r6
    65a2:	f7ff fb1c 	bl	5bde <atomic_dec>
	}

	bt_conn_unref(conn);

	return 0;
    65a6:	2000      	movs	r0, #0
    65a8:	bd70      	pop	{r4, r5, r6, pc}
	if (param && !bt_le_conn_params_valid(param)) {
    65aa:	4608      	mov	r0, r1
    65ac:	f7fd fa7e 	bl	3aac <bt_le_conn_params_valid>
    65b0:	2800      	cmp	r0, #0
    65b2:	d1bc      	bne.n	652e <bt_le_set_auto_conn+0xa>
		return -EINVAL;
    65b4:	f06f 0015 	mvn.w	r0, #21
    65b8:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    65ba:	f3bf 8f5b 	dmb	ish
    65be:	e853 2f00 	ldrex	r2, [r3]
    65c2:	f022 0101 	bic.w	r1, r2, #1
    65c6:	e843 1000 	strex	r0, r1, [r3]
    65ca:	2800      	cmp	r0, #0
    65cc:	d1f7      	bne.n	65be <bt_le_set_auto_conn+0x9a>
    65ce:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(conn->flags,
    65d2:	07d2      	lsls	r2, r2, #31
    65d4:	d5d5      	bpl.n	6582 <bt_le_set_auto_conn+0x5e>
	atomic_dec(&conn->ref);
    65d6:	4630      	mov	r0, r6
    65d8:	f7ff fb01 	bl	5bde <atomic_dec>
			if (conn->state == BT_CONN_CONNECT_SCAN) {
    65dc:	7b23      	ldrb	r3, [r4, #12]
    65de:	2b01      	cmp	r3, #1
    65e0:	d1cf      	bne.n	6582 <bt_le_set_auto_conn+0x5e>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    65e2:	4629      	mov	r1, r5
    65e4:	4620      	mov	r0, r4
    65e6:	f7ff fe31 	bl	624c <bt_conn_set_state>
    65ea:	e7ca      	b.n	6582 <bt_le_set_auto_conn+0x5e>
			return -ENOMEM;
    65ec:	f06f 000b 	mvn.w	r0, #11
}
    65f0:	bd70      	pop	{r4, r5, r6, pc}
    65f2:	bf00      	nop
    65f4:	20009d48 	.word	0x20009d48

000065f8 <bt_conn_disconnect>:
{
    65f8:	b570      	push	{r4, r5, r6, lr}
    65fa:	460e      	mov	r6, r1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    65fc:	7881      	ldrb	r1, [r0, #2]
{
    65fe:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    6600:	b911      	cbnz	r1, 6608 <bt_conn_disconnect+0x10>
		bt_le_set_auto_conn(&conn->le.dst, NULL);
    6602:	3048      	adds	r0, #72	; 0x48
    6604:	f7ff ff8e 	bl	6524 <bt_le_set_auto_conn>
	switch (conn->state) {
    6608:	7b23      	ldrb	r3, [r4, #12]
    660a:	3b01      	subs	r3, #1
    660c:	2b03      	cmp	r3, #3
    660e:	d803      	bhi.n	6618 <bt_conn_disconnect+0x20>
    6610:	e8df f003 	tbb	[pc, r3]
    6614:	0e1b1006 	.word	0x0e1b1006
		return -ENOTCONN;
    6618:	f06f 0538 	mvn.w	r5, #56	; 0x38
}
    661c:	4628      	mov	r0, r5
    661e:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    6620:	4620      	mov	r0, r4
		conn->err = reason;
    6622:	72e6      	strb	r6, [r4, #11]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    6624:	2100      	movs	r1, #0
    6626:	f7ff fe11 	bl	624c <bt_conn_set_state>
		bt_le_scan_update(false);
    662a:	2000      	movs	r0, #0
    662c:	f7fd fcb2 	bl	3f94 <bt_le_scan_update>
		return 0;
    6630:	2500      	movs	r5, #0
    6632:	e7f3      	b.n	661c <bt_conn_disconnect+0x24>
			k_delayed_work_cancel(&conn->le.update_work);
    6634:	f104 0074 	add.w	r0, r4, #116	; 0x74
    6638:	f01b fe06 	bl	22248 <k_delayed_work_cancel>
			return bt_hci_cmd_send(BT_HCI_OP_LE_CREATE_CONN_CANCEL,
    663c:	2100      	movs	r1, #0
    663e:	f242 000e 	movw	r0, #8206	; 0x200e
}
    6642:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			return bt_hci_cmd_send(BT_HCI_OP_LE_CREATE_CONN_CANCEL,
    6646:	f7fd bc1d 	b.w	3e84 <bt_hci_cmd_send>
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
    664a:	2103      	movs	r1, #3
    664c:	f240 4006 	movw	r0, #1030	; 0x406
    6650:	f7fd f890 	bl	3774 <bt_hci_cmd_create>
	if (!buf) {
    6654:	4605      	mov	r5, r0
    6656:	b198      	cbz	r0, 6680 <bt_conn_disconnect+0x88>
	disconn = net_buf_add(buf, sizeof(*disconn));
    6658:	2103      	movs	r1, #3
    665a:	3008      	adds	r0, #8
    665c:	f012 fea6 	bl	193ac <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(conn->handle);
    6660:	8823      	ldrh	r3, [r4, #0]
    6662:	8003      	strh	r3, [r0, #0]
	disconn->reason = reason;
    6664:	7086      	strb	r6, [r0, #2]
	err = bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
    6666:	4629      	mov	r1, r5
    6668:	f240 4006 	movw	r0, #1030	; 0x406
    666c:	f7fd fc0a 	bl	3e84 <bt_hci_cmd_send>
	if (err) {
    6670:	4605      	mov	r5, r0
    6672:	2800      	cmp	r0, #0
    6674:	d1d2      	bne.n	661c <bt_conn_disconnect+0x24>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
    6676:	2104      	movs	r1, #4
    6678:	4620      	mov	r0, r4
    667a:	f7ff fde7 	bl	624c <bt_conn_set_state>
    667e:	e7cd      	b.n	661c <bt_conn_disconnect+0x24>
		return -ENOBUFS;
    6680:	f06f 0536 	mvn.w	r5, #54	; 0x36
    6684:	e7ca      	b.n	661c <bt_conn_disconnect+0x24>

00006686 <bt_conn_le_conn_update>:
}
#endif /* CONFIG_BT_PERIPHERAL */

int bt_conn_le_conn_update(struct bt_conn *conn,
			   const struct bt_le_conn_param *param)
{
    6686:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6688:	4607      	mov	r7, r0
    668a:	460d      	mov	r5, r1
	struct hci_cp_le_conn_update *conn_update;
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
    668c:	f242 0013 	movw	r0, #8211	; 0x2013
    6690:	210e      	movs	r1, #14
    6692:	f7fd f86f 	bl	3774 <bt_hci_cmd_create>
				sizeof(*conn_update));
	if (!buf) {
    6696:	4606      	mov	r6, r0
    6698:	b1c8      	cbz	r0, 66ce <bt_conn_le_conn_update+0x48>
		return -ENOBUFS;
	}

	conn_update = net_buf_add(buf, sizeof(*conn_update));
    669a:	210e      	movs	r1, #14
    669c:	3008      	adds	r0, #8
    669e:	f012 fe85 	bl	193ac <net_buf_simple_add>
	memset(conn_update, 0, sizeof(*conn_update));
    66a2:	2100      	movs	r1, #0
	conn_update = net_buf_add(buf, sizeof(*conn_update));
    66a4:	4604      	mov	r4, r0
	memset(conn_update, 0, sizeof(*conn_update));
    66a6:	220e      	movs	r2, #14
    66a8:	f7fa f89f 	bl	7ea <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
    66ac:	883b      	ldrh	r3, [r7, #0]
    66ae:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
    66b0:	882b      	ldrh	r3, [r5, #0]
    66b2:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
    66b4:	886b      	ldrh	r3, [r5, #2]
    66b6:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
    66b8:	88ab      	ldrh	r3, [r5, #4]
    66ba:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
    66bc:	88eb      	ldrh	r3, [r5, #6]
    66be:	8123      	strh	r3, [r4, #8]

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    66c0:	4631      	mov	r1, r6
    66c2:	f242 0013 	movw	r0, #8211	; 0x2013
}
    66c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    66ca:	f7fd bbdb 	b.w	3e84 <bt_hci_cmd_send>
}
    66ce:	f06f 0036 	mvn.w	r0, #54	; 0x36
    66d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000066d4 <bt_conn_le_param_update>:
{
    66d4:	b538      	push	{r3, r4, r5, lr}
	if (conn->le.interval >= param->interval_min &&
    66d6:	880a      	ldrh	r2, [r1, #0]
    66d8:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    66dc:	429a      	cmp	r2, r3
{
    66de:	4604      	mov	r4, r0
    66e0:	460d      	mov	r5, r1
	if (conn->le.interval >= param->interval_min &&
    66e2:	d80c      	bhi.n	66fe <bt_conn_le_param_update+0x2a>
    66e4:	884a      	ldrh	r2, [r1, #2]
    66e6:	429a      	cmp	r2, r3
    66e8:	d309      	bcc.n	66fe <bt_conn_le_param_update+0x2a>
	    conn->le.interval <= param->interval_max &&
    66ea:	f8b0 2064 	ldrh.w	r2, [r0, #100]	; 0x64
    66ee:	888b      	ldrh	r3, [r1, #4]
    66f0:	429a      	cmp	r2, r3
    66f2:	d104      	bne.n	66fe <bt_conn_le_param_update+0x2a>
	    conn->le.latency == param->latency &&
    66f4:	f8b0 2066 	ldrh.w	r2, [r0, #102]	; 0x66
    66f8:	88cb      	ldrh	r3, [r1, #6]
    66fa:	429a      	cmp	r2, r3
    66fc:	d01a      	beq.n	6734 <bt_conn_le_param_update+0x60>
	k_delayed_work_cancel(&conn->le.update_work);
    66fe:	f104 0074 	add.w	r0, r4, #116	; 0x74
    6702:	f01b fda1 	bl	22248 <k_delayed_work_cancel>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    6706:	4b0d      	ldr	r3, [pc, #52]	; (673c <bt_conn_le_param_update+0x68>)
    6708:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    670c:	079a      	lsls	r2, r3, #30
    670e:	d503      	bpl.n	6718 <bt_conn_le_param_update+0x44>
    6710:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
    6714:	079b      	lsls	r3, r3, #30
    6716:	d401      	bmi.n	671c <bt_conn_le_param_update+0x48>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features)) ||
    6718:	78e3      	ldrb	r3, [r4, #3]
    671a:	b92b      	cbnz	r3, 6728 <bt_conn_le_param_update+0x54>
		return bt_conn_le_conn_update(conn, param);
    671c:	4629      	mov	r1, r5
    671e:	4620      	mov	r0, r4
}
    6720:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return bt_conn_le_conn_update(conn, param);
    6724:	f7ff bfaf 	b.w	6686 <bt_conn_le_conn_update>
	return bt_l2cap_update_conn_param(conn, param);
    6728:	4629      	mov	r1, r5
    672a:	4620      	mov	r0, r4
}
    672c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    6730:	f000 bcc4 	b.w	70bc <bt_l2cap_update_conn_param>
}
    6734:	f06f 0044 	mvn.w	r0, #68	; 0x44
    6738:	bd38      	pop	{r3, r4, r5, pc}
    673a:	bf00      	nop
    673c:	20009cd8 	.word	0x20009cd8

00006740 <le_conn_update>:
{
    6740:	4603      	mov	r3, r0
    6742:	b507      	push	{r0, r1, r2, lr}
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    6744:	f813 2c68 	ldrb.w	r2, [r3, #-104]
    6748:	2a02      	cmp	r2, #2
	struct bt_conn *conn = CONTAINER_OF(le, struct bt_conn, le);
    674a:	f1a0 0074 	sub.w	r0, r0, #116	; 0x74
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    674e:	d105      	bne.n	675c <le_conn_update+0x1c>
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
    6750:	2113      	movs	r1, #19
    6752:	f7ff ff51 	bl	65f8 <bt_conn_disconnect>
}
    6756:	b003      	add	sp, #12
    6758:	f85d fb04 	ldr.w	pc, [sp], #4
	param = BT_LE_CONN_PARAM(conn->le.interval_min,
    675c:	f833 2c14 	ldrh.w	r2, [r3, #-20]
    6760:	f8ad 2000 	strh.w	r2, [sp]
    6764:	f833 2c12 	ldrh.w	r2, [r3, #-18]
    6768:	f8ad 2002 	strh.w	r2, [sp, #2]
	bt_conn_le_param_update(conn, param);
    676c:	4669      	mov	r1, sp
	param = BT_LE_CONN_PARAM(conn->le.interval_min,
    676e:	f833 2c10 	ldrh.w	r2, [r3, #-16]
    6772:	f833 3c0e 	ldrh.w	r3, [r3, #-14]
    6776:	f8ad 2004 	strh.w	r2, [sp, #4]
    677a:	f8ad 3006 	strh.w	r3, [sp, #6]
	bt_conn_le_param_update(conn, param);
    677e:	f7ff ffa9 	bl	66d4 <bt_conn_le_param_update>
    6782:	e7e8      	b.n	6756 <le_conn_update+0x16>

00006784 <bt_conn_create_pdu>:

struct net_buf *bt_conn_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
    6784:	b538      	push	{r3, r4, r5, lr}

	if (!pool) {
		pool = &acl_tx_pool;
	}

	buf = net_buf_alloc(pool, K_FOREVER);
    6786:	4b08      	ldr	r3, [pc, #32]	; (67a8 <bt_conn_create_pdu+0x24>)
{
    6788:	460d      	mov	r5, r1
	buf = net_buf_alloc(pool, K_FOREVER);
    678a:	2800      	cmp	r0, #0
    678c:	bf08      	it	eq
    678e:	4618      	moveq	r0, r3
    6790:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    6794:	f012 fd7c 	bl	19290 <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);

	reserve += sizeof(struct bt_hci_acl_hdr) + CONFIG_BT_HCI_RESERVE;
	net_buf_reserve(buf, reserve);
    6798:	1d29      	adds	r1, r5, #4
	buf = net_buf_alloc(pool, K_FOREVER);
    679a:	4604      	mov	r4, r0
	net_buf_reserve(buf, reserve);
    679c:	3008      	adds	r0, #8
    679e:	f012 fd96 	bl	192ce <net_buf_simple_reserve>

	return buf;
}
    67a2:	4620      	mov	r0, r4
    67a4:	bd38      	pop	{r3, r4, r5, pc}
    67a6:	bf00      	nop
    67a8:	2000aa3c 	.word	0x2000aa3c

000067ac <create_frag.isra.6>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    67ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    67b0:	4606      	mov	r6, r0
    67b2:	460c      	mov	r4, r1
	frag = bt_conn_create_pdu(&frag_pool, 0);
    67b4:	4816      	ldr	r0, [pc, #88]	; (6810 <create_frag.isra.6+0x64>)
    67b6:	2100      	movs	r1, #0
    67b8:	f7ff ffe4 	bl	6784 <bt_conn_create_pdu>
	if (conn->state != BT_CONN_CONNECTED) {
    67bc:	7833      	ldrb	r3, [r6, #0]
    67be:	2b03      	cmp	r3, #3
	frag = bt_conn_create_pdu(&frag_pool, 0);
    67c0:	4605      	mov	r5, r0
    67c2:	f04f 0600 	mov.w	r6, #0
	if (conn->state != BT_CONN_CONNECTED) {
    67c6:	d005      	beq.n	67d4 <create_frag.isra.6+0x28>
		net_buf_unref(frag);
    67c8:	f012 fd92 	bl	192f0 <net_buf_unref>
		return NULL;
    67cc:	4635      	mov	r5, r6
}
    67ce:	4628      	mov	r0, r5
    67d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn_tx(frag)->cb = NULL;
    67d4:	6146      	str	r6, [r0, #20]
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    67d6:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.mtu;
    67da:	4e0e      	ldr	r6, [pc, #56]	; (6814 <create_frag.isra.6+0x68>)
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    67dc:	4638      	mov	r0, r7
    67de:	f8b6 8088 	ldrh.w	r8, [r6, #136]	; 0x88
    67e2:	f012 fe4f 	bl	19484 <net_buf_simple_tailroom>
    67e6:	4580      	cmp	r8, r0
    67e8:	d20c      	bcs.n	6804 <create_frag.isra.6+0x58>
	return bt_dev.le.mtu;
    67ea:	f8b6 6088 	ldrh.w	r6, [r6, #136]	; 0x88
	net_buf_add_mem(frag, buf->data, frag_len);
    67ee:	f854 1f08 	ldr.w	r1, [r4, #8]!
    67f2:	4632      	mov	r2, r6
    67f4:	4638      	mov	r0, r7
    67f6:	f012 fddf 	bl	193b8 <net_buf_simple_add_mem>
	net_buf_pull(buf, frag_len);
    67fa:	4631      	mov	r1, r6
    67fc:	4620      	mov	r0, r4
    67fe:	f012 fe25 	bl	1944c <net_buf_simple_pull>
    6802:	e7e4      	b.n	67ce <create_frag.isra.6+0x22>
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    6804:	4638      	mov	r0, r7
    6806:	f012 fe3d 	bl	19484 <net_buf_simple_tailroom>
    680a:	b286      	uxth	r6, r0
    680c:	e7ef      	b.n	67ee <create_frag.isra.6+0x42>
    680e:	bf00      	nop
    6810:	2000aa7c 	.word	0x2000aa7c
    6814:	20009cd8 	.word	0x20009cd8

00006818 <bt_conn_process_tx>:
	if (conn->state == BT_CONN_DISCONNECTED &&
    6818:	7b03      	ldrb	r3, [r0, #12]
{
    681a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    681c:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    681e:	b99b      	cbnz	r3, 6848 <bt_conn_process_tx+0x30>
    6820:	f3bf 8f5b 	dmb	ish
    6824:	1d03      	adds	r3, r0, #4
    6826:	e853 2f00 	ldrex	r2, [r3]
    682a:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    682e:	e843 1400 	strex	r4, r1, [r3]
    6832:	2c00      	cmp	r4, #0
    6834:	d1f7      	bne.n	6826 <bt_conn_process_tx+0xe>
    6836:	f3bf 8f5b 	dmb	ish
    683a:	0653      	lsls	r3, r2, #25
    683c:	d504      	bpl.n	6848 <bt_conn_process_tx+0x30>
}
    683e:	b003      	add	sp, #12
    6840:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		conn_cleanup(conn);
    6844:	f7ff bc68 	b.w	6118 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    6848:	2100      	movs	r1, #0
    684a:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    684e:	f012 fd25 	bl	1929c <net_buf_get>
	BT_ASSERT(buf);
    6852:	4604      	mov	r4, r0
    6854:	b970      	cbnz	r0, 6874 <bt_conn_process_tx+0x5c>
    6856:	4b22      	ldr	r3, [pc, #136]	; (68e0 <bt_conn_process_tx+0xc8>)
    6858:	9301      	str	r3, [sp, #4]
    685a:	9300      	str	r3, [sp, #0]
    685c:	4a21      	ldr	r2, [pc, #132]	; (68e4 <bt_conn_process_tx+0xcc>)
    685e:	4b22      	ldr	r3, [pc, #136]	; (68e8 <bt_conn_process_tx+0xd0>)
    6860:	4922      	ldr	r1, [pc, #136]	; (68ec <bt_conn_process_tx+0xd4>)
    6862:	4823      	ldr	r0, [pc, #140]	; (68f0 <bt_conn_process_tx+0xd8>)
    6864:	f7fb fd1c 	bl	22a0 <printk>
    6868:	4040      	eors	r0, r0
    686a:	f380 8811 	msr	BASEPRI, r0
    686e:	f04f 0004 	mov.w	r0, #4
    6872:	df02      	svc	2
	return bt_dev.le.mtu;
    6874:	4e1f      	ldr	r6, [pc, #124]	; (68f4 <bt_conn_process_tx+0xdc>)
	if (buf->len <= conn_mtu(conn)) {
    6876:	8981      	ldrh	r1, [r0, #12]
    6878:	f8b6 2088 	ldrh.w	r2, [r6, #136]	; 0x88
    687c:	4291      	cmp	r1, r2
    687e:	d808      	bhi.n	6892 <bt_conn_process_tx+0x7a>
		return send_frag(conn, buf, BT_ACL_START_NO_FLUSH, false);
    6880:	2300      	movs	r3, #0
    6882:	461a      	mov	r2, r3
	return send_frag(conn, buf, BT_ACL_CONT, false);
    6884:	4621      	mov	r1, r4
    6886:	4628      	mov	r0, r5
    6888:	f7ff fbaa 	bl	5fe0 <send_frag>
	if (!send_buf(conn, buf)) {
    688c:	b148      	cbz	r0, 68a2 <bt_conn_process_tx+0x8a>
}
    688e:	b003      	add	sp, #12
    6890:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6892:	f105 070c 	add.w	r7, r5, #12
	frag = create_frag(conn, buf);
    6896:	4601      	mov	r1, r0
    6898:	4638      	mov	r0, r7
    689a:	f7ff ff87 	bl	67ac <create_frag.isra.6>
	if (!frag) {
    689e:	4601      	mov	r1, r0
    68a0:	b928      	cbnz	r0, 68ae <bt_conn_process_tx+0x96>
		net_buf_unref(buf);
    68a2:	4620      	mov	r0, r4
}
    68a4:	b003      	add	sp, #12
    68a6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		net_buf_unref(buf);
    68aa:	f012 bd21 	b.w	192f0 <net_buf_unref>
	if (!send_frag(conn, frag, BT_ACL_START_NO_FLUSH, true)) {
    68ae:	2301      	movs	r3, #1
    68b0:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    68b2:	4628      	mov	r0, r5
    68b4:	f7ff fb94 	bl	5fe0 <send_frag>
    68b8:	2800      	cmp	r0, #0
    68ba:	d0f2      	beq.n	68a2 <bt_conn_process_tx+0x8a>
	while (buf->len > conn_mtu(conn)) {
    68bc:	89a2      	ldrh	r2, [r4, #12]
    68be:	f8b6 3088 	ldrh.w	r3, [r6, #136]	; 0x88
    68c2:	429a      	cmp	r2, r3
    68c4:	d802      	bhi.n	68cc <bt_conn_process_tx+0xb4>
	return send_frag(conn, buf, BT_ACL_CONT, false);
    68c6:	2300      	movs	r3, #0
    68c8:	2201      	movs	r2, #1
    68ca:	e7db      	b.n	6884 <bt_conn_process_tx+0x6c>
		frag = create_frag(conn, buf);
    68cc:	4621      	mov	r1, r4
    68ce:	4638      	mov	r0, r7
    68d0:	f7ff ff6c 	bl	67ac <create_frag.isra.6>
		if (!frag) {
    68d4:	4601      	mov	r1, r0
    68d6:	2800      	cmp	r0, #0
    68d8:	d0e3      	beq.n	68a2 <bt_conn_process_tx+0x8a>
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    68da:	2301      	movs	r3, #1
    68dc:	461a      	mov	r2, r3
    68de:	e7e8      	b.n	68b2 <bt_conn_process_tx+0x9a>
    68e0:	00023dbe 	.word	0x00023dbe
    68e4:	00022d86 	.word	0x00022d86
    68e8:	0002430b 	.word	0x0002430b
    68ec:	000272e8 	.word	0x000272e8
    68f0:	000240cf 	.word	0x000240cf
    68f4:	20009cd8 	.word	0x20009cd8

000068f8 <bt_conn_get_id>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

u8_t bt_conn_get_id(struct bt_conn *conn)
{
	return conn - conns;
    68f8:	4b03      	ldr	r3, [pc, #12]	; (6908 <bt_conn_get_id+0x10>)
    68fa:	1ac0      	subs	r0, r0, r3
    68fc:	4b03      	ldr	r3, [pc, #12]	; (690c <bt_conn_get_id+0x14>)
    68fe:	1080      	asrs	r0, r0, #2
    6900:	4358      	muls	r0, r3
}
    6902:	b2c0      	uxtb	r0, r0
    6904:	4770      	bx	lr
    6906:	bf00      	nop
    6908:	20000494 	.word	0x20000494
    690c:	96f96f97 	.word	0x96f96f97

00006910 <bt_conn_init>:
	node->next = list->head;
    6910:	4b12      	ldr	r3, [pc, #72]	; (695c <bt_conn_init+0x4c>)
    6912:	4a13      	ldr	r2, [pc, #76]	; (6960 <bt_conn_init+0x50>)
    6914:	6819      	ldr	r1, [r3, #0]

	return bt_conn_ref(conn);
}

int bt_conn_init(void)
{
    6916:	b510      	push	{r4, lr}
    6918:	6011      	str	r1, [r2, #0]
	if (!list->tail) {
    691a:	6859      	ldr	r1, [r3, #4]
    691c:	b901      	cbnz	r1, 6920 <bt_conn_init+0x10>
		list->tail = list->head;
    691e:	605a      	str	r2, [r3, #4]
	if (!list->tail) {
    6920:	6859      	ldr	r1, [r3, #4]
	node->next = list->head;
    6922:	6092      	str	r2, [r2, #8]
	list->head = node;
    6924:	4a0f      	ldr	r2, [pc, #60]	; (6964 <bt_conn_init+0x54>)
    6926:	601a      	str	r2, [r3, #0]
	if (!list->tail) {
    6928:	b901      	cbnz	r1, 692c <bt_conn_init+0x1c>
		list->tail = list->head;
    692a:	605a      	str	r2, [r3, #4]

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		sys_slist_prepend(&free_tx, &conn_tx[i].node);
	}

	bt_att_init();
    692c:	f002 f9ae 	bl	8c8c <bt_att_init>

	err = bt_smp_init();
    6930:	f004 fe7c 	bl	b62c <bt_smp_init>
	if (err) {
    6934:	4604      	mov	r4, r0
    6936:	b970      	cbnz	r0, 6956 <bt_conn_init+0x46>
		return err;
	}

	bt_l2cap_init();
    6938:	f000 fbe0 	bl	70fc <bt_l2cap_init>
	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(conns); i++) {
			struct bt_conn *conn = &conns[i];

			if (!atomic_get(&conn->ref)) {
    693c:	480a      	ldr	r0, [pc, #40]	; (6968 <bt_conn_init+0x58>)
    693e:	f7ff f93d 	bl	5bbc <atomic_get>
    6942:	b140      	cbz	r0, 6956 <bt_conn_init+0x46>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    6944:	4809      	ldr	r0, [pc, #36]	; (696c <bt_conn_init+0x5c>)
    6946:	f7ff f939 	bl	5bbc <atomic_get>
				continue;
			}

			if (atomic_test_bit(conn->flags,
    694a:	07c3      	lsls	r3, r0, #31
    694c:	d503      	bpl.n	6956 <bt_conn_init+0x46>
					    BT_CONN_AUTO_CONNECT)) {
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    694e:	2101      	movs	r1, #1
    6950:	4807      	ldr	r0, [pc, #28]	; (6970 <bt_conn_init+0x60>)
    6952:	f7ff fc7b 	bl	624c <bt_conn_set_state>
			}
		}
	}

	return 0;
}
    6956:	4620      	mov	r0, r4
    6958:	bd10      	pop	{r4, pc}
    695a:	bf00      	nop
    695c:	20000530 	.word	0x20000530
    6960:	20000484 	.word	0x20000484
    6964:	2000048c 	.word	0x2000048c
    6968:	200004d8 	.word	0x200004d8
    696c:	20000498 	.word	0x20000498
    6970:	20000494 	.word	0x20000494

00006974 <sys_slist_append>:
	node->next = NULL;
    6974:	2300      	movs	r3, #0
    6976:	600b      	str	r3, [r1, #0]
	if (!list->tail) {
    6978:	6843      	ldr	r3, [r0, #4]
    697a:	b913      	cbnz	r3, 6982 <sys_slist_append+0xe>
		list->tail = node;
    697c:	6041      	str	r1, [r0, #4]
		list->head = node;
    697e:	6001      	str	r1, [r0, #0]
    6980:	4770      	bx	lr
		list->tail->next = node;
    6982:	6019      	str	r1, [r3, #0]
		list->tail = node;
    6984:	6041      	str	r1, [r0, #4]
    6986:	4770      	bx	lr

00006988 <sys_slist_remove>:
{
    6988:	b510      	push	{r4, lr}
    698a:	6813      	ldr	r3, [r2, #0]
    698c:	6844      	ldr	r4, [r0, #4]
	if (!prev_node) {
    698e:	b931      	cbnz	r1, 699e <sys_slist_remove+0x16>
		if (list->tail == node) {
    6990:	42a2      	cmp	r2, r4
		list->head = node->next;
    6992:	6003      	str	r3, [r0, #0]
		if (list->tail == node) {
    6994:	d100      	bne.n	6998 <sys_slist_remove+0x10>
			list->tail = list->head;
    6996:	6043      	str	r3, [r0, #4]
	node->next = NULL;
    6998:	2300      	movs	r3, #0
    699a:	6013      	str	r3, [r2, #0]
    699c:	bd10      	pop	{r4, pc}
		if (list->tail == node) {
    699e:	42a2      	cmp	r2, r4
		prev_node->next = node->next;
    69a0:	600b      	str	r3, [r1, #0]
			list->tail = prev_node;
    69a2:	bf08      	it	eq
    69a4:	6041      	streq	r1, [r0, #4]
    69a6:	e7f7      	b.n	6998 <sys_slist_remove+0x10>

000069a8 <net_buf_frags_len>:
 *  @param buf Buffer to start off with.
 *
 *  @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
    69a8:	4603      	mov	r3, r0
	size_t bytes = 0;
    69aa:	2000      	movs	r0, #0

	while (buf) {
    69ac:	b903      	cbnz	r3, 69b0 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
    69ae:	4770      	bx	lr
		bytes += buf->len;
    69b0:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
    69b2:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
    69b4:	4410      	add	r0, r2
    69b6:	e7f9      	b.n	69ac <net_buf_frags_len+0x4>

000069b8 <get_ident>:

static u8_t get_ident(void)
{
	static u8_t ident;

	ident++;
    69b8:	4b04      	ldr	r3, [pc, #16]	; (69cc <get_ident+0x14>)
    69ba:	781a      	ldrb	r2, [r3, #0]
    69bc:	3201      	adds	r2, #1
	/* handle integer overflow (0 is not valid) */
	if (!ident) {
    69be:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
    69c2:	bf08      	it	eq
    69c4:	2201      	moveq	r2, #1
    69c6:	701a      	strb	r2, [r3, #0]
	}

	return ident;
}
    69c8:	7818      	ldrb	r0, [r3, #0]
    69ca:	4770      	bx	lr
    69cc:	200005d4 	.word	0x200005d4

000069d0 <__l2cap_lookup_ident>:
	return NULL;
}

static struct bt_l2cap_le_chan *
__l2cap_lookup_ident(struct bt_conn *conn, u16_t ident, bool remove)
{
    69d0:	b538      	push	{r3, r4, r5, lr}
    69d2:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
	struct bt_l2cap_chan *chan;
	sys_snode_t *prev = NULL;

	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    69d4:	b17c      	cbz	r4, 69f6 <__l2cap_lookup_ident+0x26>
    69d6:	3c08      	subs	r4, #8
    69d8:	2300      	movs	r3, #0
    69da:	b90c      	cbnz	r4, 69e0 <__l2cap_lookup_ident+0x10>
		}

		prev = &chan->node;
	}

	return NULL;
    69dc:	2400      	movs	r4, #0
    69de:	e00a      	b.n	69f6 <__l2cap_lookup_ident+0x26>
		if (chan->ident == ident) {
    69e0:	f894 503c 	ldrb.w	r5, [r4, #60]	; 0x3c
    69e4:	428d      	cmp	r5, r1
    69e6:	d108      	bne.n	69fa <__l2cap_lookup_ident+0x2a>
			if (remove) {
    69e8:	b12a      	cbz	r2, 69f6 <__l2cap_lookup_ident+0x26>
				sys_slist_remove(&conn->channels, prev,
    69ea:	f104 0208 	add.w	r2, r4, #8
    69ee:	4619      	mov	r1, r3
    69f0:	303c      	adds	r0, #60	; 0x3c
    69f2:	f7ff ffc9 	bl	6988 <sys_slist_remove>
}
    69f6:	4620      	mov	r0, r4
    69f8:	bd38      	pop	{r3, r4, r5, pc}
		prev = &chan->node;
    69fa:	f104 0308 	add.w	r3, r4, #8
	return node->next;
    69fe:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    6a00:	2c00      	cmp	r4, #0
    6a02:	d0eb      	beq.n	69dc <__l2cap_lookup_ident+0xc>
    6a04:	3c08      	subs	r4, #8
    6a06:	e7e8      	b.n	69da <__l2cap_lookup_ident+0xa>

00006a08 <l2cap_server_lookup_psm>:
	return NULL;
}

#if defined(CONFIG_BT_L2CAP_DYNAMIC_CHANNEL)
static struct bt_l2cap_server *l2cap_server_lookup_psm(u16_t psm)
{
    6a08:	4b08      	ldr	r3, [pc, #32]	; (6a2c <l2cap_server_lookup_psm+0x24>)
    6a0a:	4602      	mov	r2, r0
    6a0c:	6818      	ldr	r0, [r3, #0]
	struct bt_l2cap_server *server;

	SYS_SLIST_FOR_EACH_CONTAINER(&servers, server, node) {
    6a0e:	b100      	cbz	r0, 6a12 <l2cap_server_lookup_psm+0xa>
    6a10:	3808      	subs	r0, #8
    6a12:	b900      	cbnz	r0, 6a16 <l2cap_server_lookup_psm+0xe>
			return server;
		}
	}

	return NULL;
}
    6a14:	4770      	bx	lr
		if (server->psm == psm) {
    6a16:	8803      	ldrh	r3, [r0, #0]
    6a18:	4293      	cmp	r3, r2
    6a1a:	d0fb      	beq.n	6a14 <l2cap_server_lookup_psm+0xc>
    6a1c:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&servers, server, node) {
    6a1e:	2000      	movs	r0, #0
    6a20:	2b00      	cmp	r3, #0
    6a22:	d0f7      	beq.n	6a14 <l2cap_server_lookup_psm+0xc>
    6a24:	f1a3 0008 	sub.w	r0, r3, #8
    6a28:	e7f3      	b.n	6a12 <l2cap_server_lookup_psm+0xa>
    6a2a:	bf00      	nop
    6a2c:	200005e0 	.word	0x200005e0

00006a30 <l2cap_remove_tx_cid>:
{
	struct bt_l2cap_chan *chan;
	sys_snode_t *prev = NULL;

	/* Protect fixed channels against accidental removal */
	if (!L2CAP_LE_CID_IS_DYN(cid)) {
    6a30:	f1a1 0340 	sub.w	r3, r1, #64	; 0x40
    6a34:	2b3f      	cmp	r3, #63	; 0x3f
{
    6a36:	b510      	push	{r4, lr}
	if (!L2CAP_LE_CID_IS_DYN(cid)) {
    6a38:	d804      	bhi.n	6a44 <l2cap_remove_tx_cid+0x14>
    6a3a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
		return NULL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    6a3c:	b114      	cbz	r4, 6a44 <l2cap_remove_tx_cid+0x14>
    6a3e:	3c08      	subs	r4, #8
    6a40:	2300      	movs	r3, #0
    6a42:	b90c      	cbnz	r4, 6a48 <l2cap_remove_tx_cid+0x18>
		return NULL;
    6a44:	2000      	movs	r0, #0
    6a46:	bd10      	pop	{r4, pc}
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
    6a48:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
    6a4c:	428a      	cmp	r2, r1
    6a4e:	f104 0208 	add.w	r2, r4, #8
    6a52:	d105      	bne.n	6a60 <l2cap_remove_tx_cid+0x30>
			sys_slist_remove(&conn->channels, prev, &chan->node);
    6a54:	4619      	mov	r1, r3
    6a56:	303c      	adds	r0, #60	; 0x3c
    6a58:	f7ff ff96 	bl	6988 <sys_slist_remove>
			return BT_L2CAP_LE_CHAN(chan);
    6a5c:	4620      	mov	r0, r4
    6a5e:	bd10      	pop	{r4, pc}
    6a60:	68a4      	ldr	r4, [r4, #8]
		}

		prev = &chan->node;
    6a62:	4613      	mov	r3, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    6a64:	2c00      	cmp	r4, #0
    6a66:	d0ed      	beq.n	6a44 <l2cap_remove_tx_cid+0x14>
    6a68:	3c08      	subs	r4, #8
    6a6a:	e7ea      	b.n	6a42 <l2cap_remove_tx_cid+0x12>

00006a6c <l2cap_disconnected>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static void l2cap_disconnected(struct bt_l2cap_chan *chan)
{
    6a6c:	4770      	bx	lr
	...

00006a70 <l2cap_accept>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    6a70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    6a72:	4a0b      	ldr	r2, [pc, #44]	; (6aa0 <l2cap_accept+0x30>)
    6a74:	6813      	ldr	r3, [r2, #0]
    6a76:	b933      	cbnz	r3, 6a86 <l2cap_accept+0x16>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    6a78:	480a      	ldr	r0, [pc, #40]	; (6aa4 <l2cap_accept+0x34>)
    6a7a:	6050      	str	r0, [r2, #4]
		*chan = &l2cap->chan.chan;
    6a7c:	600a      	str	r2, [r1, #0]

		return 0;
    6a7e:	4618      	mov	r0, r3
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
    6a80:	b005      	add	sp, #20
    6a82:	f85d fb04 	ldr.w	pc, [sp], #4
	BT_ERR("No available L2CAP context for conn %p", conn);
    6a86:	4b08      	ldr	r3, [pc, #32]	; (6aa8 <l2cap_accept+0x38>)
    6a88:	9302      	str	r3, [sp, #8]
    6a8a:	9001      	str	r0, [sp, #4]
    6a8c:	9300      	str	r3, [sp, #0]
    6a8e:	4a07      	ldr	r2, [pc, #28]	; (6aac <l2cap_accept+0x3c>)
    6a90:	4b07      	ldr	r3, [pc, #28]	; (6ab0 <l2cap_accept+0x40>)
    6a92:	4908      	ldr	r1, [pc, #32]	; (6ab4 <l2cap_accept+0x44>)
    6a94:	4808      	ldr	r0, [pc, #32]	; (6ab8 <l2cap_accept+0x48>)
    6a96:	f7fb fc03 	bl	22a0 <printk>
	return -ENOMEM;
    6a9a:	f06f 000b 	mvn.w	r0, #11
    6a9e:	e7ef      	b.n	6a80 <l2cap_accept+0x10>
    6aa0:	20000538 	.word	0x20000538
    6aa4:	20009e2c 	.word	0x20009e2c
    6aa8:	00023dbe 	.word	0x00023dbe
    6aac:	00022d86 	.word	0x00022d86
    6ab0:	0002459c 	.word	0x0002459c
    6ab4:	000272e8 	.word	0x000272e8
    6ab8:	000246ca 	.word	0x000246ca

00006abc <l2cap_chan_destroy>:
{
    6abc:	b570      	push	{r4, r5, r6, lr}
    6abe:	4604      	mov	r4, r0
	k_delayed_work_cancel(&chan->rtx_work);
    6ac0:	3010      	adds	r0, #16
    6ac2:	f01b fbc1 	bl	22248 <k_delayed_work_cancel>
	while ((buf = net_buf_get(&ch->tx_queue, K_NO_WAIT))) {
    6ac6:	f104 0680 	add.w	r6, r4, #128	; 0x80
    6aca:	2100      	movs	r1, #0
    6acc:	4630      	mov	r0, r6
    6ace:	f012 fbe5 	bl	1929c <net_buf_get>
    6ad2:	4605      	mov	r5, r0
    6ad4:	b948      	cbnz	r0, 6aea <l2cap_chan_destroy+0x2e>
	if (ch->_sdu) {
    6ad6:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    6ada:	b128      	cbz	r0, 6ae8 <l2cap_chan_destroy+0x2c>
		net_buf_unref(ch->_sdu);
    6adc:	f012 fc08 	bl	192f0 <net_buf_unref>
		ch->_sdu = NULL;
    6ae0:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
		ch->_sdu_len = 0;
    6ae4:	f8a4 5098 	strh.w	r5, [r4, #152]	; 0x98
    6ae8:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
    6aea:	f012 fc01 	bl	192f0 <net_buf_unref>
    6aee:	e7ec      	b.n	6aca <l2cap_chan_destroy+0xe>

00006af0 <l2cap_chan_tx_init>:
{
    6af0:	b510      	push	{r4, lr}
	memset(&chan->tx, 0, sizeof(chan->tx));
    6af2:	2220      	movs	r2, #32
{
    6af4:	4604      	mov	r4, r0
	memset(&chan->tx, 0, sizeof(chan->tx));
    6af6:	2100      	movs	r1, #0
    6af8:	3060      	adds	r0, #96	; 0x60
    6afa:	f7f9 fe76 	bl	7ea <memset>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    6afe:	f104 0068 	add.w	r0, r4, #104	; 0x68
    6b02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6b06:	2100      	movs	r1, #0
    6b08:	f01b f84a 	bl	21ba0 <_impl_k_sem_init>
	k_fifo_init(&chan->tx_queue);
    6b0c:	f104 0080 	add.w	r0, r4, #128	; 0x80
}
    6b10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_init(&chan->tx_queue);
    6b14:	f01a bdd2 	b.w	216bc <k_queue_init>

00006b18 <l2cap_chan_rx_init>:
	if (!chan->rx.mtu) {
    6b18:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    6b1c:	b913      	cbnz	r3, 6b24 <l2cap_chan_rx_init+0xc>
		chan->rx.mtu = L2CAP_MAX_LE_MTU;
    6b1e:	2342      	movs	r3, #66	; 0x42
    6b20:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
	if (!chan->rx.init_credits) {
    6b24:	f8b0 2046 	ldrh.w	r2, [r0, #70]	; 0x46
    6b28:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    6b2c:	b94a      	cbnz	r2, 6b42 <l2cap_chan_rx_init+0x2a>
		if (chan->chan.ops->alloc_buf) {
    6b2e:	6842      	ldr	r2, [r0, #4]
    6b30:	68d2      	ldr	r2, [r2, #12]
    6b32:	b192      	cbz	r2, 6b5a <l2cap_chan_rx_init+0x42>
			chan->rx.init_credits = (chan->rx.mtu +
    6b34:	f103 0243 	add.w	r2, r3, #67	; 0x43
						 (L2CAP_MAX_LE_MPS - 1)) /
    6b38:	2144      	movs	r1, #68	; 0x44
    6b3a:	fb92 f2f1 	sdiv	r2, r2, r1
			chan->rx.init_credits = L2CAP_LE_MAX_CREDITS;
    6b3e:	f8a0 2046 	strh.w	r2, [r0, #70]	; 0x46
	chan->rx.mps = min(chan->rx.mtu + 2, L2CAP_MAX_LE_MPS);
    6b42:	3302      	adds	r3, #2
    6b44:	2b44      	cmp	r3, #68	; 0x44
    6b46:	bfa8      	it	ge
    6b48:	2344      	movge	r3, #68	; 0x44
    6b4a:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    6b4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6b52:	2100      	movs	r1, #0
    6b54:	3048      	adds	r0, #72	; 0x48
    6b56:	f01b b823 	b.w	21ba0 <_impl_k_sem_init>
			chan->rx.init_credits = L2CAP_LE_MAX_CREDITS;
    6b5a:	2202      	movs	r2, #2
    6b5c:	e7ef      	b.n	6b3e <l2cap_chan_rx_init+0x26>

00006b5e <l2cap_create_le_sig_pdu.isra.6>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    6b5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6b60:	4607      	mov	r7, r0
    6b62:	460e      	mov	r6, r1
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    6b64:	2000      	movs	r0, #0
    6b66:	2104      	movs	r1, #4
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    6b68:	4615      	mov	r5, r2
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    6b6a:	f7ff fe0b 	bl	6784 <bt_conn_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    6b6e:	2104      	movs	r1, #4
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    6b70:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    6b72:	3008      	adds	r0, #8
    6b74:	f012 fc1a 	bl	193ac <net_buf_simple_add>
	hdr->code = code;
    6b78:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
    6b7a:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    6b7c:	8045      	strh	r5, [r0, #2]
}
    6b7e:	4620      	mov	r0, r4
    6b80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00006b82 <l2cap_connected>:
    6b82:	4770      	bx	lr

00006b84 <bt_l2cap_le_fixed_chan_register>:
	sys_slist_append(&le_channels, &chan->node);
    6b84:	f100 0108 	add.w	r1, r0, #8
    6b88:	4801      	ldr	r0, [pc, #4]	; (6b90 <bt_l2cap_le_fixed_chan_register+0xc>)
    6b8a:	f7ff bef3 	b.w	6974 <sys_slist_append>
    6b8e:	bf00      	nop
    6b90:	200005d8 	.word	0x200005d8

00006b94 <bt_l2cap_chan_remove>:
{
    6b94:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    6b96:	b410      	push	{r4}
    6b98:	460c      	mov	r4, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    6b9a:	b113      	cbz	r3, 6ba2 <bt_l2cap_chan_remove+0xe>
    6b9c:	3b08      	subs	r3, #8
    6b9e:	2100      	movs	r1, #0
    6ba0:	b90b      	cbnz	r3, 6ba6 <bt_l2cap_chan_remove+0x12>
}
    6ba2:	bc10      	pop	{r4}
    6ba4:	4770      	bx	lr
		if (chan == ch) {
    6ba6:	42a3      	cmp	r3, r4
    6ba8:	f103 0208 	add.w	r2, r3, #8
    6bac:	d103      	bne.n	6bb6 <bt_l2cap_chan_remove+0x22>
			sys_slist_remove(&conn->channels, prev, &chan->node);
    6bae:	303c      	adds	r0, #60	; 0x3c
}
    6bb0:	bc10      	pop	{r4}
			sys_slist_remove(&conn->channels, prev, &chan->node);
    6bb2:	f7ff bee9 	b.w	6988 <sys_slist_remove>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    6bb6:	4611      	mov	r1, r2
    6bb8:	2a00      	cmp	r2, #0
    6bba:	d0f2      	beq.n	6ba2 <bt_l2cap_chan_remove+0xe>
	return node->next;
    6bbc:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    6bbe:	2b00      	cmp	r3, #0
    6bc0:	d0ef      	beq.n	6ba2 <bt_l2cap_chan_remove+0xe>
    6bc2:	3b08      	subs	r3, #8
    6bc4:	e7ec      	b.n	6ba0 <bt_l2cap_chan_remove+0xc>

00006bc6 <bt_l2cap_chan_del>:
	if (!chan->conn) {
    6bc6:	6803      	ldr	r3, [r0, #0]
{
    6bc8:	b510      	push	{r4, lr}
    6bca:	4604      	mov	r4, r0
	if (!chan->conn) {
    6bcc:	b12b      	cbz	r3, 6bda <bt_l2cap_chan_del+0x14>
	if (chan->ops->disconnected) {
    6bce:	6843      	ldr	r3, [r0, #4]
    6bd0:	685b      	ldr	r3, [r3, #4]
    6bd2:	b103      	cbz	r3, 6bd6 <bt_l2cap_chan_del+0x10>
		chan->ops->disconnected(chan);
    6bd4:	4798      	blx	r3
	chan->conn = NULL;
    6bd6:	2300      	movs	r3, #0
    6bd8:	6023      	str	r3, [r4, #0]
	chan->state = state;
    6bda:	2300      	movs	r3, #0
    6bdc:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	chan->psm = 0;
    6be0:	8763      	strh	r3, [r4, #58]	; 0x3a
	if (chan->destroy) {
    6be2:	68e3      	ldr	r3, [r4, #12]
    6be4:	b11b      	cbz	r3, 6bee <bt_l2cap_chan_del+0x28>
		chan->destroy(chan);
    6be6:	4620      	mov	r0, r4
}
    6be8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		chan->destroy(chan);
    6bec:	4718      	bx	r3
    6bee:	bd10      	pop	{r4, pc}

00006bf0 <l2cap_rtx_timeout>:
{
    6bf0:	b530      	push	{r4, r5, lr}
	BT_ERR("chan %p timeout", chan);
    6bf2:	4b0c      	ldr	r3, [pc, #48]	; (6c24 <l2cap_rtx_timeout+0x34>)
    6bf4:	4a0c      	ldr	r2, [pc, #48]	; (6c28 <l2cap_rtx_timeout+0x38>)
    6bf6:	490d      	ldr	r1, [pc, #52]	; (6c2c <l2cap_rtx_timeout+0x3c>)
{
    6bf8:	b085      	sub	sp, #20
	struct bt_l2cap_le_chan *chan = LE_CHAN_RTX(work);
    6bfa:	f1a0 0410 	sub.w	r4, r0, #16
{
    6bfe:	4605      	mov	r5, r0
	BT_ERR("chan %p timeout", chan);
    6c00:	9302      	str	r3, [sp, #8]
    6c02:	e88d 0018 	stmia.w	sp, {r3, r4}
    6c06:	480a      	ldr	r0, [pc, #40]	; (6c30 <l2cap_rtx_timeout+0x40>)
    6c08:	4b0a      	ldr	r3, [pc, #40]	; (6c34 <l2cap_rtx_timeout+0x44>)
    6c0a:	f7fb fb49 	bl	22a0 <printk>
	bt_l2cap_chan_remove(chan->chan.conn, &chan->chan);
    6c0e:	f855 0c10 	ldr.w	r0, [r5, #-16]
    6c12:	4621      	mov	r1, r4
    6c14:	f7ff ffbe 	bl	6b94 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    6c18:	4620      	mov	r0, r4
}
    6c1a:	b005      	add	sp, #20
    6c1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
    6c20:	f7ff bfd1 	b.w	6bc6 <bt_l2cap_chan_del>
    6c24:	00023dbe 	.word	0x00023dbe
    6c28:	00022d86 	.word	0x00022d86
    6c2c:	000272e8 	.word	0x000272e8
    6c30:	00024a16 	.word	0x00024a16
    6c34:	000244cc 	.word	0x000244cc

00006c38 <bt_l2cap_disconnected>:
{
    6c38:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    6c3a:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    6c3c:	b1a3      	cbz	r3, 6c68 <bt_l2cap_disconnected+0x30>
    6c3e:	f1b3 0008 	subs.w	r0, r3, #8
    6c42:	d10a      	bne.n	6c5a <bt_l2cap_disconnected+0x22>
    6c44:	bd10      	pop	{r4, pc}
    6c46:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
    6c48:	f7ff ffbd 	bl	6bc6 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    6c4c:	b164      	cbz	r4, 6c68 <bt_l2cap_disconnected+0x30>
    6c4e:	68a3      	ldr	r3, [r4, #8]
    6c50:	b103      	cbz	r3, 6c54 <bt_l2cap_disconnected+0x1c>
    6c52:	3b08      	subs	r3, #8
{
    6c54:	4620      	mov	r0, r4
    6c56:	461c      	mov	r4, r3
    6c58:	e7f6      	b.n	6c48 <bt_l2cap_disconnected+0x10>
    6c5a:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    6c5c:	2c00      	cmp	r4, #0
    6c5e:	d1f2      	bne.n	6c46 <bt_l2cap_disconnected+0xe>
}
    6c60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_l2cap_chan_del(chan);
    6c64:	f7ff bfaf 	b.w	6bc6 <bt_l2cap_chan_del>
    6c68:	bd10      	pop	{r4, pc}

00006c6a <bt_l2cap_create_pdu>:
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    6c6a:	3104      	adds	r1, #4
    6c6c:	f7ff bd8a 	b.w	6784 <bt_conn_create_pdu>

00006c70 <bt_l2cap_send_cb>:
{
    6c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6c72:	4614      	mov	r4, r2
    6c74:	4605      	mov	r5, r0
    6c76:	460f      	mov	r7, r1
	hdr = net_buf_push(buf, sizeof(*hdr));
    6c78:	f102 0008 	add.w	r0, r2, #8
    6c7c:	2104      	movs	r1, #4
{
    6c7e:	461e      	mov	r6, r3
	hdr = net_buf_push(buf, sizeof(*hdr));
    6c80:	f012 fbcb 	bl	1941a <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    6c84:	89a1      	ldrh	r1, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
    6c86:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    6c88:	3904      	subs	r1, #4
    6c8a:	8001      	strh	r1, [r0, #0]
	bt_conn_send_cb(conn, buf, cb);
    6c8c:	4632      	mov	r2, r6
    6c8e:	4621      	mov	r1, r4
    6c90:	4628      	mov	r0, r5
}
    6c92:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_send_cb(conn, buf, cb);
    6c96:	f7ff b95d 	b.w	5f54 <bt_conn_send_cb>
	...

00006c9c <l2cap_le_conn_req>:
{
    6c9c:	b538      	push	{r3, r4, r5, lr}
    6c9e:	4604      	mov	r4, r0
	ch->chan.ident = get_ident();
    6ca0:	f7ff fe8a 	bl	69b8 <get_ident>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_LE_CONN_REQ,
    6ca4:	220a      	movs	r2, #10
	ch->chan.ident = get_ident();
    6ca6:	4601      	mov	r1, r0
    6ca8:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_LE_CONN_REQ,
    6cac:	2014      	movs	r0, #20
    6cae:	f7ff ff56 	bl	6b5e <l2cap_create_le_sig_pdu.isra.6>
	req = net_buf_add(buf, sizeof(*req));
    6cb2:	210a      	movs	r1, #10
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_LE_CONN_REQ,
    6cb4:	4605      	mov	r5, r0
	req = net_buf_add(buf, sizeof(*req));
    6cb6:	3008      	adds	r0, #8
    6cb8:	f012 fb78 	bl	193ac <net_buf_simple_add>
	req->psm = sys_cpu_to_le16(ch->chan.psm);
    6cbc:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
    6cbe:	8003      	strh	r3, [r0, #0]
	req->scid = sys_cpu_to_le16(ch->rx.cid);
    6cc0:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
    6cc4:	8043      	strh	r3, [r0, #2]
	req->mtu = sys_cpu_to_le16(ch->rx.mtu);
    6cc6:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    6cca:	8083      	strh	r3, [r0, #4]
	req->mps = sys_cpu_to_le16(ch->rx.mps);
    6ccc:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
    6cd0:	80c3      	strh	r3, [r0, #6]
	req->credits = sys_cpu_to_le16(ch->rx.init_credits);
    6cd2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
    6cd6:	8103      	strh	r3, [r0, #8]
    6cd8:	f104 0110 	add.w	r1, r4, #16
    6cdc:	f649 4240 	movw	r2, #40000	; 0x9c40
    6ce0:	4805      	ldr	r0, [pc, #20]	; (6cf8 <l2cap_le_conn_req+0x5c>)
    6ce2:	f01b fb0b 	bl	222fc <k_delayed_work_submit_to_queue>
		      bt_conn_tx_cb_t cb);

static inline void bt_l2cap_send(struct bt_conn *conn, u16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL);
    6ce6:	6820      	ldr	r0, [r4, #0]
    6ce8:	2300      	movs	r3, #0
    6cea:	462a      	mov	r2, r5
    6cec:	2105      	movs	r1, #5
    6cee:	f7ff ffbf 	bl	6c70 <bt_l2cap_send_cb>
}
    6cf2:	2000      	movs	r0, #0
    6cf4:	bd38      	pop	{r3, r4, r5, pc}
    6cf6:	bf00      	nop
    6cf8:	20003340 	.word	0x20003340

00006cfc <bt_l2cap_encrypt_change>:
{
    6cfc:	b538      	push	{r3, r4, r5, lr}
    6cfe:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
    6d00:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    6d02:	b10c      	cbz	r4, 6d08 <bt_l2cap_encrypt_change+0xc>
    6d04:	3c08      	subs	r4, #8
    6d06:	b904      	cbnz	r4, 6d0a <bt_l2cap_encrypt_change+0xe>
    6d08:	bd38      	pop	{r3, r4, r5, pc}
	if (chan->state != BT_L2CAP_CONNECT || chan->ident) {
    6d0a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    6d0e:	2b01      	cmp	r3, #1
    6d10:	d10a      	bne.n	6d28 <bt_l2cap_encrypt_change+0x2c>
    6d12:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    6d16:	b93b      	cbnz	r3, 6d28 <bt_l2cap_encrypt_change+0x2c>
	if (status) {
    6d18:	b175      	cbz	r5, 6d38 <bt_l2cap_encrypt_change+0x3c>
		bt_l2cap_chan_remove(chan->conn, chan);
    6d1a:	6820      	ldr	r0, [r4, #0]
    6d1c:	4621      	mov	r1, r4
    6d1e:	f7ff ff39 	bl	6b94 <bt_l2cap_chan_remove>
		bt_l2cap_chan_del(chan);
    6d22:	4620      	mov	r0, r4
    6d24:	f7ff ff4f 	bl	6bc6 <bt_l2cap_chan_del>
		if (chan->ops->encrypt_change) {
    6d28:	6863      	ldr	r3, [r4, #4]
    6d2a:	689b      	ldr	r3, [r3, #8]
    6d2c:	b113      	cbz	r3, 6d34 <bt_l2cap_encrypt_change+0x38>
			chan->ops->encrypt_change(chan, hci_status);
    6d2e:	4629      	mov	r1, r5
    6d30:	4620      	mov	r0, r4
    6d32:	4798      	blx	r3
    6d34:	68a4      	ldr	r4, [r4, #8]
    6d36:	e7e4      	b.n	6d02 <bt_l2cap_encrypt_change+0x6>
	l2cap_le_conn_req(BT_L2CAP_LE_CHAN(chan));
    6d38:	4620      	mov	r0, r4
    6d3a:	f7ff ffaf 	bl	6c9c <l2cap_le_conn_req>
    6d3e:	e7f3      	b.n	6d28 <bt_l2cap_encrypt_change+0x2c>

00006d40 <l2cap_send_reject>:
{
    6d40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6d44:	f89d 7020 	ldrb.w	r7, [sp, #32]
    6d48:	4691      	mov	r9, r2
    6d4a:	4680      	mov	r8, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    6d4c:	1cba      	adds	r2, r7, #2
    6d4e:	2001      	movs	r0, #1
{
    6d50:	461e      	mov	r6, r3
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    6d52:	f7ff ff04 	bl	6b5e <l2cap_create_le_sig_pdu.isra.6>
	rej = net_buf_add(buf, sizeof(*rej));
    6d56:	f100 0508 	add.w	r5, r0, #8
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    6d5a:	4604      	mov	r4, r0
	rej = net_buf_add(buf, sizeof(*rej));
    6d5c:	2102      	movs	r1, #2
    6d5e:	4628      	mov	r0, r5
    6d60:	f012 fb24 	bl	193ac <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    6d64:	f8a0 9000 	strh.w	r9, [r0]
	if (data) {
    6d68:	b126      	cbz	r6, 6d74 <l2cap_send_reject+0x34>
		net_buf_add_mem(buf, data, data_len);
    6d6a:	463a      	mov	r2, r7
    6d6c:	4631      	mov	r1, r6
    6d6e:	4628      	mov	r0, r5
    6d70:	f012 fb22 	bl	193b8 <net_buf_simple_add_mem>
    6d74:	4622      	mov	r2, r4
    6d76:	4640      	mov	r0, r8
    6d78:	2300      	movs	r3, #0
    6d7a:	2105      	movs	r1, #5
}
    6d7c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6d80:	f7ff bf76 	b.w	6c70 <bt_l2cap_send_cb>

00006d84 <l2cap_chan_le_send>:
{
    6d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6d88:	4607      	mov	r7, r0
    6d8a:	460c      	mov	r4, r1
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    6d8c:	3068      	adds	r0, #104	; 0x68
    6d8e:	2100      	movs	r1, #0
    6d90:	4616      	mov	r6, r2
    6d92:	f01a ff6f 	bl	21c74 <_impl_k_sem_take>
	if (k_sem_take(&ch->tx.credits, K_NO_WAIT)) {
    6d96:	2800      	cmp	r0, #0
    6d98:	d169      	bne.n	6e6e <l2cap_chan_le_send+0xea>
	if (buf->len + sdu_hdr_len > ch->tx.mps) {
    6d9a:	89a3      	ldrh	r3, [r4, #12]
    6d9c:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
    6da0:	4433      	add	r3, r6
    6da2:	4293      	cmp	r3, r2
    6da4:	f104 0908 	add.w	r9, r4, #8
    6da8:	d820      	bhi.n	6dec <l2cap_chan_le_send+0x68>
	if (net_buf_headroom(buf) >= headroom && !buf->frags) {
    6daa:	4648      	mov	r0, r9
    6dac:	f012 fb66 	bl	1947c <net_buf_simple_headroom>
	headroom = BT_L2CAP_CHAN_SEND_RESERVE + sdu_hdr_len;
    6db0:	f106 0308 	add.w	r3, r6, #8
	if (net_buf_headroom(buf) >= headroom && !buf->frags) {
    6db4:	b29b      	uxth	r3, r3
    6db6:	4298      	cmp	r0, r3
    6db8:	d318      	bcc.n	6dec <l2cap_chan_le_send+0x68>
    6dba:	6823      	ldr	r3, [r4, #0]
    6dbc:	b9b3      	cbnz	r3, 6dec <l2cap_chan_le_send+0x68>
		if (sdu_hdr_len) {
    6dbe:	b136      	cbz	r6, 6dce <l2cap_chan_le_send+0x4a>
			net_buf_push_le16(buf, net_buf_frags_len(buf));
    6dc0:	4620      	mov	r0, r4
    6dc2:	f7ff fdf1 	bl	69a8 <net_buf_frags_len>
    6dc6:	b281      	uxth	r1, r0
    6dc8:	4648      	mov	r0, r9
    6dca:	f012 fb2e 	bl	1942a <net_buf_simple_push_le16>
		return net_buf_ref(buf);
    6dce:	4620      	mov	r0, r4
    6dd0:	f012 fabc 	bl	1934c <net_buf_ref>
    6dd4:	4605      	mov	r5, r0
	if (!ch->chan.conn) {
    6dd6:	6838      	ldr	r0, [r7, #0]
    6dd8:	2800      	cmp	r0, #0
    6dda:	d13f      	bne.n	6e5c <l2cap_chan_le_send+0xd8>
		net_buf_unref(buf);
    6ddc:	4628      	mov	r0, r5
    6dde:	f012 fa87 	bl	192f0 <net_buf_unref>
		return -ECONNRESET;
    6de2:	f06f 0635 	mvn.w	r6, #53	; 0x35
}
    6de6:	4630      	mov	r0, r6
    6de8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    6dec:	79a0      	ldrb	r0, [r4, #6]
    6dee:	f012 f9bb 	bl	19168 <net_buf_pool_get>
	seg = net_buf_alloc(pool, K_NO_WAIT);
    6df2:	2100      	movs	r1, #0
    6df4:	f012 fa4c 	bl	19290 <net_buf_alloc_fixed>
	if (seg) {
    6df8:	4605      	mov	r5, r0
    6dfa:	b340      	cbz	r0, 6e4e <l2cap_chan_le_send+0xca>
		net_buf_reserve(seg, BT_L2CAP_CHAN_SEND_RESERVE);
    6dfc:	2108      	movs	r1, #8
    6dfe:	4408      	add	r0, r1
    6e00:	f012 fa65 	bl	192ce <net_buf_simple_reserve>
    6e04:	f105 0808 	add.w	r8, r5, #8
	if (sdu_hdr_len) {
    6e08:	b136      	cbz	r6, 6e18 <l2cap_chan_le_send+0x94>
		net_buf_add_le16(seg, net_buf_frags_len(buf));
    6e0a:	4620      	mov	r0, r4
    6e0c:	f7ff fdcc 	bl	69a8 <net_buf_frags_len>
    6e10:	b281      	uxth	r1, r0
    6e12:	4640      	mov	r0, r8
    6e14:	f012 fae1 	bl	193da <net_buf_simple_add_le16>
	len = min(net_buf_tailroom(seg), ch->tx.mps - sdu_hdr_len);
    6e18:	4640      	mov	r0, r8
    6e1a:	f012 fb33 	bl	19484 <net_buf_simple_tailroom>
    6e1e:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
    6e22:	1b89      	subs	r1, r1, r6
    6e24:	4288      	cmp	r0, r1
    6e26:	d217      	bcs.n	6e58 <l2cap_chan_le_send+0xd4>
    6e28:	4640      	mov	r0, r8
    6e2a:	f012 fb2b 	bl	19484 <net_buf_simple_tailroom>
    6e2e:	b280      	uxth	r0, r0
	len = min(buf->len, len);
    6e30:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
	net_buf_add_mem(seg, buf->data, len);
    6e34:	68a1      	ldr	r1, [r4, #8]
    6e36:	4582      	cmp	sl, r0
    6e38:	bf28      	it	cs
    6e3a:	4682      	movcs	sl, r0
    6e3c:	4652      	mov	r2, sl
    6e3e:	4640      	mov	r0, r8
    6e40:	f012 faba 	bl	193b8 <net_buf_simple_add_mem>
	net_buf_pull(buf, len);
    6e44:	4651      	mov	r1, sl
    6e46:	4648      	mov	r0, r9
    6e48:	f012 fb00 	bl	1944c <net_buf_simple_pull>
    6e4c:	e7c3      	b.n	6dd6 <l2cap_chan_le_send+0x52>
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    6e4e:	2104      	movs	r1, #4
    6e50:	f7ff fc98 	bl	6784 <bt_conn_create_pdu>
    6e54:	4605      	mov	r5, r0
    6e56:	e7d5      	b.n	6e04 <l2cap_chan_le_send+0x80>
	len = min(net_buf_tailroom(seg), ch->tx.mps - sdu_hdr_len);
    6e58:	b288      	uxth	r0, r1
    6e5a:	e7e9      	b.n	6e30 <l2cap_chan_le_send+0xac>
	len = buf->len - sdu_hdr_len;
    6e5c:	89ab      	ldrh	r3, [r5, #12]
    6e5e:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
    6e62:	1b9e      	subs	r6, r3, r6
    6e64:	462a      	mov	r2, r5
    6e66:	2300      	movs	r3, #0
    6e68:	f7ff ff02 	bl	6c70 <bt_l2cap_send_cb>
    6e6c:	e7bb      	b.n	6de6 <l2cap_chan_le_send+0x62>
		return -EAGAIN;
    6e6e:	f06f 060a 	mvn.w	r6, #10
    6e72:	e7b8      	b.n	6de6 <l2cap_chan_le_send+0x62>

00006e74 <l2cap_chan_le_send_sdu>:
{
    6e74:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	total_len = net_buf_frags_len(*buf) + sent;
    6e78:	680c      	ldr	r4, [r1, #0]
{
    6e7a:	9201      	str	r2, [sp, #4]
    6e7c:	4606      	mov	r6, r0
	total_len = net_buf_frags_len(*buf) + sent;
    6e7e:	4620      	mov	r0, r4
{
    6e80:	460f      	mov	r7, r1
	total_len = net_buf_frags_len(*buf) + sent;
    6e82:	f7ff fd91 	bl	69a8 <net_buf_frags_len>
    6e86:	9b01      	ldr	r3, [sp, #4]
	if (total_len > ch->tx.mtu) {
    6e88:	f8b6 2062 	ldrh.w	r2, [r6, #98]	; 0x62
	total_len = net_buf_frags_len(*buf) + sent;
    6e8c:	eb03 0800 	add.w	r8, r3, r0
	if (total_len > ch->tx.mtu) {
    6e90:	4590      	cmp	r8, r2
    6e92:	dc36      	bgt.n	6f02 <l2cap_chan_le_send_sdu+0x8e>
	if (!frag->len && frag->frags) {
    6e94:	89a2      	ldrh	r2, [r4, #12]
    6e96:	b91a      	cbnz	r2, 6ea0 <l2cap_chan_le_send_sdu+0x2c>
    6e98:	6822      	ldr	r2, [r4, #0]
    6e9a:	2a00      	cmp	r2, #0
    6e9c:	bf18      	it	ne
    6e9e:	4614      	movne	r4, r2
	if (!sent) {
    6ea0:	b9b3      	cbnz	r3, 6ed0 <l2cap_chan_le_send_sdu+0x5c>
		ret = l2cap_chan_le_send(ch, frag, BT_L2CAP_SDU_HDR_LEN);
    6ea2:	2202      	movs	r2, #2
    6ea4:	4621      	mov	r1, r4
    6ea6:	4630      	mov	r0, r6
    6ea8:	f7ff ff6c 	bl	6d84 <l2cap_chan_le_send>
		if (ret < 0) {
    6eac:	1e05      	subs	r5, r0, #0
    6eae:	da0e      	bge.n	6ece <l2cap_chan_le_send_sdu+0x5a>
			if (ret == -EAGAIN) {
    6eb0:	f115 0f0b 	cmn.w	r5, #11
    6eb4:	d106      	bne.n	6ec4 <l2cap_chan_le_send_sdu+0x50>
				memcpy(net_buf_user_data(frag), &sent,
    6eb6:	2204      	movs	r2, #4
    6eb8:	eb0d 0102 	add.w	r1, sp, r2
    6ebc:	f104 0014 	add.w	r0, r4, #20
    6ec0:	f7f9 fc67 	bl	792 <memcpy>
			*buf = frag;
    6ec4:	603c      	str	r4, [r7, #0]
}
    6ec6:	4628      	mov	r0, r5
    6ec8:	b002      	add	sp, #8
    6eca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		sent = ret;
    6ece:	9501      	str	r5, [sp, #4]
	if (!frag->len && frag->frags) {
    6ed0:	2500      	movs	r5, #0
	for (ret = 0; sent < total_len; sent += ret) {
    6ed2:	9b01      	ldr	r3, [sp, #4]
    6ed4:	4598      	cmp	r8, r3
    6ed6:	dc03      	bgt.n	6ee0 <l2cap_chan_le_send_sdu+0x6c>
	net_buf_unref(frag);
    6ed8:	4620      	mov	r0, r4
    6eda:	f012 fa09 	bl	192f0 <net_buf_unref>
	return ret;
    6ede:	e7f2      	b.n	6ec6 <l2cap_chan_le_send_sdu+0x52>
		if (!frag->len) {
    6ee0:	89a0      	ldrh	r0, [r4, #12]
    6ee2:	b918      	cbnz	r0, 6eec <l2cap_chan_le_send_sdu+0x78>
			frag = net_buf_frag_del(NULL, frag);
    6ee4:	4621      	mov	r1, r4
    6ee6:	f012 fa55 	bl	19394 <net_buf_frag_del>
    6eea:	4604      	mov	r4, r0
		ret = l2cap_chan_le_send(ch, frag, 0);
    6eec:	2200      	movs	r2, #0
    6eee:	4621      	mov	r1, r4
    6ef0:	4630      	mov	r0, r6
    6ef2:	f7ff ff47 	bl	6d84 <l2cap_chan_le_send>
		if (ret < 0) {
    6ef6:	1e05      	subs	r5, r0, #0
    6ef8:	dbda      	blt.n	6eb0 <l2cap_chan_le_send_sdu+0x3c>
	for (ret = 0; sent < total_len; sent += ret) {
    6efa:	9b01      	ldr	r3, [sp, #4]
    6efc:	442b      	add	r3, r5
    6efe:	9301      	str	r3, [sp, #4]
    6f00:	e7e7      	b.n	6ed2 <l2cap_chan_le_send_sdu+0x5e>
		return -EMSGSIZE;
    6f02:	f06f 0523 	mvn.w	r5, #35	; 0x23
    6f06:	e7de      	b.n	6ec6 <l2cap_chan_le_send_sdu+0x52>

00006f08 <l2cap_chan_update_credits.isra.9>:
static void l2cap_chan_update_credits(struct bt_l2cap_le_chan *chan,
    6f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6f0c:	6d03      	ldr	r3, [r0, #80]	; 0x50
	    L2CAP_LE_CREDITS_THRESHOLD(chan->rx.init_credits)) {
    6f0e:	f8b0 4046 	ldrh.w	r4, [r0, #70]	; 0x46
	if (k_sem_count_get(&chan->rx.credits) >
    6f12:	ebb3 0f54 	cmp.w	r3, r4, lsr #1
static void l2cap_chan_update_credits(struct bt_l2cap_le_chan *chan,
    6f16:	4606      	mov	r6, r0
	if (k_sem_count_get(&chan->rx.credits) >
    6f18:	d823      	bhi.n	6f62 <l2cap_chan_update_credits.isra.9+0x5a>
	credits = chan->rx.init_credits - k_sem_count_get(&chan->rx.credits);
    6f1a:	1ae4      	subs	r4, r4, r3
    6f1c:	b2a4      	uxth	r4, r4
    6f1e:	4625      	mov	r5, r4
		k_sem_give(&chan->rx.credits);
    6f20:	f100 0748 	add.w	r7, r0, #72	; 0x48
	while (credits--) {
    6f24:	b9bd      	cbnz	r5, 6f56 <l2cap_chan_update_credits.isra.9+0x4e>
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CREDITS, get_ident(),
    6f26:	f7ff fd47 	bl	69b8 <get_ident>
    6f2a:	2204      	movs	r2, #4
    6f2c:	4601      	mov	r1, r0
    6f2e:	2016      	movs	r0, #22
    6f30:	f7ff fe15 	bl	6b5e <l2cap_create_le_sig_pdu.isra.6>
	ev = net_buf_add(buf, sizeof(*ev));
    6f34:	2104      	movs	r1, #4
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CREDITS, get_ident(),
    6f36:	4607      	mov	r7, r0
	ev = net_buf_add(buf, sizeof(*ev));
    6f38:	3008      	adds	r0, #8
    6f3a:	f012 fa37 	bl	193ac <net_buf_simple_add>
	ev->cid = sys_cpu_to_le16(chan->rx.cid);
    6f3e:	f8b6 3040 	ldrh.w	r3, [r6, #64]	; 0x40
    6f42:	8003      	strh	r3, [r0, #0]
	ev->credits = sys_cpu_to_le16(credits);
    6f44:	8044      	strh	r4, [r0, #2]
    6f46:	462b      	mov	r3, r5
    6f48:	463a      	mov	r2, r7
    6f4a:	6830      	ldr	r0, [r6, #0]
    6f4c:	2105      	movs	r1, #5
}
    6f4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6f52:	f7ff be8d 	b.w	6c70 <bt_l2cap_send_cb>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    6f56:	4638      	mov	r0, r7
    6f58:	3d01      	subs	r5, #1
    6f5a:	f01a fe2b 	bl	21bb4 <_impl_k_sem_give>
    6f5e:	b2ad      	uxth	r5, r5
    6f60:	e7e0      	b.n	6f24 <l2cap_chan_update_credits.isra.9+0x1c>
    6f62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006f66 <bt_l2cap_le_lookup_tx_cid>:
{
    6f66:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    6f68:	b100      	cbz	r0, 6f6c <bt_l2cap_le_lookup_tx_cid+0x6>
    6f6a:	3808      	subs	r0, #8
    6f6c:	b900      	cbnz	r0, 6f70 <bt_l2cap_le_lookup_tx_cid+0xa>
}
    6f6e:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
    6f70:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
    6f74:	428b      	cmp	r3, r1
    6f76:	d0fa      	beq.n	6f6e <bt_l2cap_le_lookup_tx_cid+0x8>
    6f78:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    6f7a:	2000      	movs	r0, #0
    6f7c:	2b00      	cmp	r3, #0
    6f7e:	d0f6      	beq.n	6f6e <bt_l2cap_le_lookup_tx_cid+0x8>
    6f80:	f1a3 0008 	sub.w	r0, r3, #8
    6f84:	e7f2      	b.n	6f6c <bt_l2cap_le_lookup_tx_cid+0x6>

00006f86 <bt_l2cap_le_lookup_rx_cid>:
{
    6f86:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    6f88:	b100      	cbz	r0, 6f8c <bt_l2cap_le_lookup_rx_cid+0x6>
    6f8a:	3808      	subs	r0, #8
    6f8c:	b900      	cbnz	r0, 6f90 <bt_l2cap_le_lookup_rx_cid+0xa>
}
    6f8e:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
    6f90:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
    6f94:	428b      	cmp	r3, r1
    6f96:	d0fa      	beq.n	6f8e <bt_l2cap_le_lookup_rx_cid+0x8>
    6f98:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    6f9a:	2000      	movs	r0, #0
    6f9c:	2b00      	cmp	r3, #0
    6f9e:	d0f6      	beq.n	6f8e <bt_l2cap_le_lookup_rx_cid+0x8>
    6fa0:	f1a3 0008 	sub.w	r0, r3, #8
    6fa4:	e7f2      	b.n	6f8c <bt_l2cap_le_lookup_rx_cid+0x6>
	...

00006fa8 <l2cap_chan_add>:
{
    6fa8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    6faa:	4605      	mov	r5, r0
    6fac:	4616      	mov	r6, r2
	if (ch && ch->rx.cid > 0) {
    6fae:	460c      	mov	r4, r1
    6fb0:	b111      	cbz	r1, 6fb8 <l2cap_chan_add+0x10>
    6fb2:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
    6fb6:	b943      	cbnz	r3, 6fca <l2cap_chan_add+0x22>
    6fb8:	2240      	movs	r2, #64	; 0x40
		if (ch && !bt_l2cap_le_lookup_rx_cid(conn, cid)) {
    6fba:	b1fc      	cbz	r4, 6ffc <l2cap_chan_add+0x54>
    6fbc:	4611      	mov	r1, r2
    6fbe:	4628      	mov	r0, r5
    6fc0:	f7ff ffe1 	bl	6f86 <bt_l2cap_le_lookup_rx_cid>
    6fc4:	b9d0      	cbnz	r0, 6ffc <l2cap_chan_add+0x54>
			ch->rx.cid = cid;
    6fc6:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    6fca:	4914      	ldr	r1, [pc, #80]	; (701c <l2cap_chan_add+0x74>)
    6fcc:	f104 0010 	add.w	r0, r4, #16
    6fd0:	f01b f91c 	bl	2220c <k_delayed_work_init>
	sys_slist_append(&conn->channels, &chan->node);
    6fd4:	f105 003c 	add.w	r0, r5, #60	; 0x3c
    6fd8:	f104 0108 	add.w	r1, r4, #8
    6fdc:	f7ff fcca 	bl	6974 <sys_slist_append>
	    L2CAP_LE_CID_IS_DYN(ch->rx.cid)) {
    6fe0:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
	chan->conn = conn;
    6fe4:	6025      	str	r5, [r4, #0]
	    L2CAP_LE_CID_IS_DYN(ch->rx.cid)) {
    6fe6:	3b40      	subs	r3, #64	; 0x40
	if (IS_ENABLED(CONFIG_BT_L2CAP_DYNAMIC_CHANNEL) &&
    6fe8:	b29b      	uxth	r3, r3
    6fea:	2b3f      	cmp	r3, #63	; 0x3f
	chan->destroy = destroy;
    6fec:	60e6      	str	r6, [r4, #12]
    6fee:	f04f 0001 	mov.w	r0, #1
	if (IS_ENABLED(CONFIG_BT_L2CAP_DYNAMIC_CHANNEL) &&
    6ff2:	d801      	bhi.n	6ff8 <l2cap_chan_add+0x50>
	chan->state = state;
    6ff4:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
    6ff8:	b002      	add	sp, #8
    6ffa:	bd70      	pop	{r4, r5, r6, pc}
	for (cid = L2CAP_LE_CID_DYN_START; cid <= L2CAP_LE_CID_DYN_END; cid++) {
    6ffc:	3201      	adds	r2, #1
    6ffe:	b292      	uxth	r2, r2
    7000:	2a80      	cmp	r2, #128	; 0x80
    7002:	d1da      	bne.n	6fba <l2cap_chan_add+0x12>
		BT_ERR("Unable to allocate L2CAP CID");
    7004:	4b06      	ldr	r3, [pc, #24]	; (7020 <l2cap_chan_add+0x78>)
    7006:	9301      	str	r3, [sp, #4]
    7008:	9300      	str	r3, [sp, #0]
    700a:	4a06      	ldr	r2, [pc, #24]	; (7024 <l2cap_chan_add+0x7c>)
    700c:	4b06      	ldr	r3, [pc, #24]	; (7028 <l2cap_chan_add+0x80>)
    700e:	4907      	ldr	r1, [pc, #28]	; (702c <l2cap_chan_add+0x84>)
    7010:	4807      	ldr	r0, [pc, #28]	; (7030 <l2cap_chan_add+0x88>)
    7012:	f7fb f945 	bl	22a0 <printk>
    7016:	2000      	movs	r0, #0
    7018:	e7ee      	b.n	6ff8 <l2cap_chan_add+0x50>
    701a:	bf00      	nop
    701c:	00006bf1 	.word	0x00006bf1
    7020:	00023dbe 	.word	0x00023dbe
    7024:	00022d86 	.word	0x00022d86
    7028:	000244de 	.word	0x000244de
    702c:	000272e8 	.word	0x000272e8
    7030:	00024701 	.word	0x00024701

00007034 <bt_l2cap_connected>:
{
    7034:	4b10      	ldr	r3, [pc, #64]	; (7078 <bt_l2cap_connected+0x44>)
    7036:	b537      	push	{r0, r1, r2, r4, r5, lr}
    7038:	681c      	ldr	r4, [r3, #0]
    703a:	4605      	mov	r5, r0
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    703c:	b10c      	cbz	r4, 7042 <bt_l2cap_connected+0xe>
    703e:	3c08      	subs	r4, #8
    7040:	b90c      	cbnz	r4, 7046 <bt_l2cap_connected+0x12>
}
    7042:	b003      	add	sp, #12
    7044:	bd30      	pop	{r4, r5, pc}
		if (fchan->accept(conn, &chan) < 0) {
    7046:	6863      	ldr	r3, [r4, #4]
    7048:	a901      	add	r1, sp, #4
    704a:	4628      	mov	r0, r5
    704c:	4798      	blx	r3
    704e:	2800      	cmp	r0, #0
    7050:	db10      	blt.n	7074 <bt_l2cap_connected+0x40>
		ch = BT_L2CAP_LE_CHAN(chan);
    7052:	9901      	ldr	r1, [sp, #4]
		ch->rx.cid = fchan->cid;
    7054:	8823      	ldrh	r3, [r4, #0]
    7056:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
		ch->tx.cid = fchan->cid;
    705a:	f8a1 3060 	strh.w	r3, [r1, #96]	; 0x60
		if (!l2cap_chan_add(conn, chan, NULL)) {
    705e:	2200      	movs	r2, #0
    7060:	4628      	mov	r0, r5
    7062:	f7ff ffa1 	bl	6fa8 <l2cap_chan_add>
    7066:	2800      	cmp	r0, #0
    7068:	d0eb      	beq.n	7042 <bt_l2cap_connected+0xe>
		if (chan->ops->connected) {
    706a:	9801      	ldr	r0, [sp, #4]
    706c:	6843      	ldr	r3, [r0, #4]
    706e:	681b      	ldr	r3, [r3, #0]
    7070:	b103      	cbz	r3, 7074 <bt_l2cap_connected+0x40>
			chan->ops->connected(chan);
    7072:	4798      	blx	r3
    7074:	68a4      	ldr	r4, [r4, #8]
    7076:	e7e1      	b.n	703c <bt_l2cap_connected+0x8>
    7078:	200005d8 	.word	0x200005d8

0000707c <bt_l2cap_server_register>:
{
    707c:	4601      	mov	r1, r0
	if (server->psm < L2CAP_LE_PSM_START ||
    707e:	8800      	ldrh	r0, [r0, #0]
{
    7080:	b508      	push	{r3, lr}
	if (server->psm < L2CAP_LE_PSM_START ||
    7082:	1e43      	subs	r3, r0, #1
    7084:	2bfe      	cmp	r3, #254	; 0xfe
    7086:	d811      	bhi.n	70ac <bt_l2cap_server_register+0x30>
	    server->psm > L2CAP_LE_PSM_END || !server->accept) {
    7088:	684b      	ldr	r3, [r1, #4]
    708a:	b17b      	cbz	r3, 70ac <bt_l2cap_server_register+0x30>
	if (server->sec_level > BT_SECURITY_FIPS) {
    708c:	788b      	ldrb	r3, [r1, #2]
    708e:	2b04      	cmp	r3, #4
    7090:	d80c      	bhi.n	70ac <bt_l2cap_server_register+0x30>
	} else if (server->sec_level < BT_SECURITY_LOW) {
    7092:	b90b      	cbnz	r3, 7098 <bt_l2cap_server_register+0x1c>
		server->sec_level = BT_SECURITY_LOW;
    7094:	2301      	movs	r3, #1
    7096:	708b      	strb	r3, [r1, #2]
	if (l2cap_server_lookup_psm(server->psm)) {
    7098:	f7ff fcb6 	bl	6a08 <l2cap_server_lookup_psm>
    709c:	4602      	mov	r2, r0
    709e:	b940      	cbnz	r0, 70b2 <bt_l2cap_server_register+0x36>
	sys_slist_append(&servers, &server->node);
    70a0:	3108      	adds	r1, #8
    70a2:	4805      	ldr	r0, [pc, #20]	; (70b8 <bt_l2cap_server_register+0x3c>)
    70a4:	f7ff fc66 	bl	6974 <sys_slist_append>
	return 0;
    70a8:	4610      	mov	r0, r2
    70aa:	bd08      	pop	{r3, pc}
		return -EINVAL;
    70ac:	f06f 0015 	mvn.w	r0, #21
    70b0:	bd08      	pop	{r3, pc}
		return -EADDRINUSE;
    70b2:	f06f 002f 	mvn.w	r0, #47	; 0x2f
}
    70b6:	bd08      	pop	{r3, pc}
    70b8:	200005e0 	.word	0x200005e0

000070bc <bt_l2cap_update_conn_param>:
{
    70bc:	b570      	push	{r4, r5, r6, lr}
    70be:	460c      	mov	r4, r1
    70c0:	4606      	mov	r6, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    70c2:	f7ff fc79 	bl	69b8 <get_ident>
    70c6:	2208      	movs	r2, #8
    70c8:	4601      	mov	r1, r0
    70ca:	2012      	movs	r0, #18
    70cc:	f7ff fd47 	bl	6b5e <l2cap_create_le_sig_pdu.isra.6>
	req = net_buf_add(buf, sizeof(*req));
    70d0:	2108      	movs	r1, #8
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    70d2:	4605      	mov	r5, r0
	req = net_buf_add(buf, sizeof(*req));
    70d4:	4408      	add	r0, r1
    70d6:	f012 f969 	bl	193ac <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    70da:	8823      	ldrh	r3, [r4, #0]
    70dc:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    70de:	8863      	ldrh	r3, [r4, #2]
    70e0:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    70e2:	88a3      	ldrh	r3, [r4, #4]
    70e4:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    70e6:	88e3      	ldrh	r3, [r4, #6]
    70e8:	80c3      	strh	r3, [r0, #6]
    70ea:	462a      	mov	r2, r5
    70ec:	4630      	mov	r0, r6
    70ee:	2300      	movs	r3, #0
    70f0:	2105      	movs	r1, #5
    70f2:	f7ff fdbd 	bl	6c70 <bt_l2cap_send_cb>
}
    70f6:	2000      	movs	r0, #0
    70f8:	bd70      	pop	{r4, r5, r6, pc}
	...

000070fc <bt_l2cap_init>:
	static struct bt_l2cap_fixed_chan chan = {
		.cid	= BT_L2CAP_CID_LE_SIG,
		.accept	= l2cap_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    70fc:	4801      	ldr	r0, [pc, #4]	; (7104 <bt_l2cap_init+0x8>)
    70fe:	f7ff bd41 	b.w	6b84 <bt_l2cap_le_fixed_chan_register>
    7102:	bf00      	nop
    7104:	20009e20 	.word	0x20009e20

00007108 <bt_l2cap_chan_connect>:
	return l2cap_le_conn_req(ch);
}

int bt_l2cap_chan_connect(struct bt_conn *conn, struct bt_l2cap_chan *chan,
			  u16_t psm)
{
    7108:	b570      	push	{r4, r5, r6, lr}
    710a:	460c      	mov	r4, r1
    710c:	4616      	mov	r6, r2
	BT_DBG("conn %p chan %p psm 0x%04x", conn, chan, psm);

	if (!conn || conn->state != BT_CONN_CONNECTED) {
    710e:	4605      	mov	r5, r0
    7110:	b318      	cbz	r0, 715a <bt_l2cap_chan_connect+0x52>
    7112:	7b03      	ldrb	r3, [r0, #12]
    7114:	2b03      	cmp	r3, #3
    7116:	d120      	bne.n	715a <bt_l2cap_chan_connect+0x52>
		return -ENOTCONN;
	}

	if (!chan) {
    7118:	b911      	cbnz	r1, 7120 <bt_l2cap_chan_connect+0x18>
		return -EINVAL;
    711a:	f06f 0015 	mvn.w	r0, #21
    711e:	bd70      	pop	{r4, r5, r6, pc}
	if (IS_ENABLED(CONFIG_BT_BREDR) &&
	    conn->type == BT_CONN_TYPE_BR) {
		return bt_l2cap_br_chan_connect(conn, chan, psm);
	}

	if (chan->required_sec_level > BT_SECURITY_FIPS) {
    7120:	f891 303d 	ldrb.w	r3, [r1, #61]	; 0x3d
    7124:	2b04      	cmp	r3, #4
    7126:	d8f8      	bhi.n	711a <bt_l2cap_chan_connect+0x12>
		return -EINVAL;
	} else if (chan->required_sec_level == BT_SECURITY_NONE) {
    7128:	b913      	cbnz	r3, 7130 <bt_l2cap_chan_connect+0x28>
		chan->required_sec_level = BT_SECURITY_LOW;
    712a:	2301      	movs	r3, #1
    712c:	f881 303d 	strb.w	r3, [r1, #61]	; 0x3d
	if (psm < L2CAP_LE_PSM_START || psm > L2CAP_LE_PSM_END) {
    7130:	1e73      	subs	r3, r6, #1
    7132:	2bfe      	cmp	r3, #254	; 0xfe
    7134:	d8f1      	bhi.n	711a <bt_l2cap_chan_connect+0x12>
	l2cap_chan_tx_init(ch);
    7136:	4620      	mov	r0, r4
    7138:	f7ff fcda 	bl	6af0 <l2cap_chan_tx_init>
	l2cap_chan_rx_init(ch);
    713c:	4620      	mov	r0, r4
    713e:	f7ff fceb 	bl	6b18 <l2cap_chan_rx_init>
	if (!l2cap_chan_add(conn, &ch->chan, l2cap_chan_destroy)) {
    7142:	4a09      	ldr	r2, [pc, #36]	; (7168 <bt_l2cap_chan_connect+0x60>)
    7144:	4621      	mov	r1, r4
    7146:	4628      	mov	r0, r5
    7148:	f7ff ff2e 	bl	6fa8 <l2cap_chan_add>
    714c:	b140      	cbz	r0, 7160 <bt_l2cap_chan_connect+0x58>
	ch->chan.psm = psm;
    714e:	8766      	strh	r6, [r4, #58]	; 0x3a
	return l2cap_le_conn_req(ch);
    7150:	4620      	mov	r0, r4
	}

	return l2cap_le_connect(conn, BT_L2CAP_LE_CHAN(chan), psm);
}
    7152:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return l2cap_le_conn_req(ch);
    7156:	f7ff bda1 	b.w	6c9c <l2cap_le_conn_req>
		return -ENOTCONN;
    715a:	f06f 0038 	mvn.w	r0, #56	; 0x38
    715e:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
    7160:	f06f 000b 	mvn.w	r0, #11
}
    7164:	bd70      	pop	{r4, r5, r6, pc}
    7166:	bf00      	nop
    7168:	00006abd 	.word	0x00006abd

0000716c <bt_l2cap_chan_disconnect>:

int bt_l2cap_chan_disconnect(struct bt_l2cap_chan *chan)
{
    716c:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = chan->conn;
	struct net_buf *buf;
	struct bt_l2cap_disconn_req *req;
	struct bt_l2cap_le_chan *ch;

	if (!conn) {
    716e:	6803      	ldr	r3, [r0, #0]
{
    7170:	4604      	mov	r4, r0
	if (!conn) {
    7172:	b32b      	cbz	r3, 71c0 <bt_l2cap_chan_disconnect+0x54>
	ch = BT_L2CAP_LE_CHAN(chan);

	BT_DBG("chan %p scid 0x%04x dcid 0x%04x", chan, ch->rx.cid,
	       ch->tx.cid);

	ch->chan.ident = get_ident();
    7174:	f7ff fc20 	bl	69b8 <get_ident>

	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_DISCONN_REQ,
    7178:	2204      	movs	r2, #4
	ch->chan.ident = get_ident();
    717a:	4601      	mov	r1, r0
    717c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_DISCONN_REQ,
    7180:	2006      	movs	r0, #6
    7182:	f7ff fcec 	bl	6b5e <l2cap_create_le_sig_pdu.isra.6>
				      ch->chan.ident, sizeof(*req));

	req = net_buf_add(buf, sizeof(*req));
    7186:	2104      	movs	r1, #4
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_DISCONN_REQ,
    7188:	4605      	mov	r5, r0
	req = net_buf_add(buf, sizeof(*req));
    718a:	3008      	adds	r0, #8
    718c:	f012 f90e 	bl	193ac <net_buf_simple_add>
	req->dcid = sys_cpu_to_le16(ch->tx.cid);
    7190:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
    7194:	8003      	strh	r3, [r0, #0]
	req->scid = sys_cpu_to_le16(ch->rx.cid);
    7196:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
    719a:	8043      	strh	r3, [r0, #2]
    719c:	f104 0110 	add.w	r1, r4, #16
    71a0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
    71a4:	4808      	ldr	r0, [pc, #32]	; (71c8 <bt_l2cap_chan_disconnect+0x5c>)
    71a6:	f01b f8a9 	bl	222fc <k_delayed_work_submit_to_queue>
    71aa:	6820      	ldr	r0, [r4, #0]
    71ac:	2300      	movs	r3, #0
    71ae:	462a      	mov	r2, r5
    71b0:	2105      	movs	r1, #5
    71b2:	f7ff fd5d 	bl	6c70 <bt_l2cap_send_cb>
	chan->state = state;
    71b6:	2304      	movs	r3, #4
    71b8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

	l2cap_chan_send_req(ch, buf, L2CAP_DISC_TIMEOUT);
	bt_l2cap_chan_set_state(chan, BT_L2CAP_DISCONNECT);

	return 0;
    71bc:	2000      	movs	r0, #0
    71be:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTCONN;
    71c0:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
    71c4:	bd38      	pop	{r3, r4, r5, pc}
    71c6:	bf00      	nop
    71c8:	20003340 	.word	0x20003340

000071cc <l2cap_chan_le_recv_sdu>:
{
    71cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    71d0:	460d      	mov	r5, r1
	if (net_buf_frags_len(chan->_sdu) + buf->len > chan->_sdu_len) {
    71d2:	f8d0 1094 	ldr.w	r1, [r0, #148]	; 0x94
{
    71d6:	4604      	mov	r4, r0
	if (net_buf_frags_len(chan->_sdu) + buf->len > chan->_sdu_len) {
    71d8:	4608      	mov	r0, r1
    71da:	f7ff fbe5 	bl	69a8 <net_buf_frags_len>
    71de:	89ab      	ldrh	r3, [r5, #12]
    71e0:	4418      	add	r0, r3
    71e2:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
    71e6:	4298      	cmp	r0, r3
    71e8:	d90e      	bls.n	7208 <l2cap_chan_le_recv_sdu+0x3c>
		BT_ERR("SDU length mismatch");
    71ea:	4b30      	ldr	r3, [pc, #192]	; (72ac <l2cap_chan_le_recv_sdu+0xe0>)
    71ec:	9301      	str	r3, [sp, #4]
    71ee:	9300      	str	r3, [sp, #0]
    71f0:	4a2f      	ldr	r2, [pc, #188]	; (72b0 <l2cap_chan_le_recv_sdu+0xe4>)
    71f2:	4b30      	ldr	r3, [pc, #192]	; (72b4 <l2cap_chan_le_recv_sdu+0xe8>)
    71f4:	4930      	ldr	r1, [pc, #192]	; (72b8 <l2cap_chan_le_recv_sdu+0xec>)
    71f6:	4831      	ldr	r0, [pc, #196]	; (72bc <l2cap_chan_le_recv_sdu+0xf0>)
				BT_ERR("Unable to store SDU");
    71f8:	f7fb f852 	bl	22a0 <printk>
				bt_l2cap_chan_disconnect(&chan->chan);
    71fc:	4620      	mov	r0, r4
}
    71fe:	b003      	add	sp, #12
    7200:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
				bt_l2cap_chan_disconnect(&chan->chan);
    7204:	f7ff bfb2 	b.w	716c <bt_l2cap_chan_disconnect>
	frag = net_buf_frag_last(chan->_sdu);
    7208:	4608      	mov	r0, r1
    720a:	f012 f8a3 	bl	19354 <net_buf_frag_last>
		net_buf_pull(buf, len);
    720e:	f105 0908 	add.w	r9, r5, #8
	frag = net_buf_frag_last(chan->_sdu);
    7212:	4606      	mov	r6, r0
	while (buf->len) {
    7214:	89af      	ldrh	r7, [r5, #12]
    7216:	b9d7      	cbnz	r7, 724e <l2cap_chan_le_recv_sdu+0x82>
	if (net_buf_frags_len(chan->_sdu) == chan->_sdu_len) {
    7218:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
    721c:	4608      	mov	r0, r1
    721e:	f7ff fbc3 	bl	69a8 <net_buf_frags_len>
    7222:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
    7226:	4298      	cmp	r0, r3
    7228:	d10b      	bne.n	7242 <l2cap_chan_le_recv_sdu+0x76>
		chan->chan.ops->recv(&chan->chan, chan->_sdu);
    722a:	6863      	ldr	r3, [r4, #4]
    722c:	4620      	mov	r0, r4
    722e:	691b      	ldr	r3, [r3, #16]
    7230:	4798      	blx	r3
		net_buf_unref(chan->_sdu);
    7232:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    7236:	f012 f85b 	bl	192f0 <net_buf_unref>
		chan->_sdu = NULL;
    723a:	f8c4 7094 	str.w	r7, [r4, #148]	; 0x94
		chan->_sdu_len = 0;
    723e:	f8a4 7098 	strh.w	r7, [r4, #152]	; 0x98
	l2cap_chan_update_credits(chan, buf);
    7242:	4620      	mov	r0, r4
}
    7244:	b003      	add	sp, #12
    7246:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	l2cap_chan_update_credits(chan, buf);
    724a:	f7ff be5d 	b.w	6f08 <l2cap_chan_update_credits.isra.9>
		if (!net_buf_tailroom(frag)) {
    724e:	f106 0008 	add.w	r0, r6, #8
    7252:	f012 f917 	bl	19484 <net_buf_simple_tailroom>
    7256:	b950      	cbnz	r0, 726e <l2cap_chan_le_recv_sdu+0xa2>
	frag = chan->chan.ops->alloc_buf(&chan->chan);
    7258:	6863      	ldr	r3, [r4, #4]
    725a:	4620      	mov	r0, r4
    725c:	68db      	ldr	r3, [r3, #12]
    725e:	4798      	blx	r3
	if (!frag) {
    7260:	4606      	mov	r6, r0
    7262:	b1d0      	cbz	r0, 729a <l2cap_chan_le_recv_sdu+0xce>
	net_buf_frag_add(chan->_sdu, frag);
    7264:	4601      	mov	r1, r0
    7266:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    726a:	f012 f883 	bl	19374 <net_buf_frag_add>
		len = min(net_buf_tailroom(frag), buf->len);
    726e:	f106 0808 	add.w	r8, r6, #8
    7272:	4640      	mov	r0, r8
    7274:	f012 f906 	bl	19484 <net_buf_simple_tailroom>
    7278:	89af      	ldrh	r7, [r5, #12]
    727a:	42b8      	cmp	r0, r7
    727c:	d203      	bcs.n	7286 <l2cap_chan_le_recv_sdu+0xba>
    727e:	4640      	mov	r0, r8
    7280:	f012 f900 	bl	19484 <net_buf_simple_tailroom>
    7284:	b287      	uxth	r7, r0
		net_buf_add_mem(frag, buf->data, len);
    7286:	68a9      	ldr	r1, [r5, #8]
    7288:	463a      	mov	r2, r7
    728a:	4640      	mov	r0, r8
    728c:	f012 f894 	bl	193b8 <net_buf_simple_add_mem>
		net_buf_pull(buf, len);
    7290:	4639      	mov	r1, r7
    7292:	4648      	mov	r0, r9
    7294:	f012 f8da 	bl	1944c <net_buf_simple_pull>
    7298:	e7bc      	b.n	7214 <l2cap_chan_le_recv_sdu+0x48>
				BT_ERR("Unable to store SDU");
    729a:	4b04      	ldr	r3, [pc, #16]	; (72ac <l2cap_chan_le_recv_sdu+0xe0>)
    729c:	9301      	str	r3, [sp, #4]
    729e:	9300      	str	r3, [sp, #0]
    72a0:	4a03      	ldr	r2, [pc, #12]	; (72b0 <l2cap_chan_le_recv_sdu+0xe4>)
    72a2:	4b04      	ldr	r3, [pc, #16]	; (72b4 <l2cap_chan_le_recv_sdu+0xe8>)
    72a4:	4904      	ldr	r1, [pc, #16]	; (72b8 <l2cap_chan_le_recv_sdu+0xec>)
    72a6:	4806      	ldr	r0, [pc, #24]	; (72c0 <l2cap_chan_le_recv_sdu+0xf4>)
    72a8:	e7a6      	b.n	71f8 <l2cap_chan_le_recv_sdu+0x2c>
    72aa:	bf00      	nop
    72ac:	00023dbe 	.word	0x00023dbe
    72b0:	00022d86 	.word	0x00022d86
    72b4:	00024564 	.word	0x00024564
    72b8:	000272e8 	.word	0x000272e8
    72bc:	0002472e 	.word	0x0002472e
    72c0:	00024752 	.word	0x00024752

000072c4 <bt_l2cap_recv>:
{
    72c4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    72c6:	898b      	ldrh	r3, [r1, #12]
    72c8:	2b03      	cmp	r3, #3
{
    72ca:	b085      	sub	sp, #20
    72cc:	4604      	mov	r4, r0
    72ce:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    72d0:	d80e      	bhi.n	72f0 <bt_l2cap_recv+0x2c>
		BT_ERR("Too small L2CAP PDU received");
    72d2:	4b3c      	ldr	r3, [pc, #240]	; (73c4 <bt_l2cap_recv+0x100>)
    72d4:	9301      	str	r3, [sp, #4]
    72d6:	9300      	str	r3, [sp, #0]
    72d8:	4a3b      	ldr	r2, [pc, #236]	; (73c8 <bt_l2cap_recv+0x104>)
    72da:	4b3c      	ldr	r3, [pc, #240]	; (73cc <bt_l2cap_recv+0x108>)
    72dc:	493c      	ldr	r1, [pc, #240]	; (73d0 <bt_l2cap_recv+0x10c>)
    72de:	483d      	ldr	r0, [pc, #244]	; (73d4 <bt_l2cap_recv+0x110>)
    72e0:	f7fa ffde 	bl	22a0 <printk>
	net_buf_unref(buf);
    72e4:	4628      	mov	r0, r5
}
    72e6:	b005      	add	sp, #20
    72e8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	net_buf_unref(buf);
    72ec:	f012 b800 	b.w	192f0 <net_buf_unref>
	cid = sys_le16_to_cpu(hdr->cid);
    72f0:	460e      	mov	r6, r1
	net_buf_pull(buf, sizeof(*hdr));
    72f2:	2104      	movs	r1, #4
	cid = sys_le16_to_cpu(hdr->cid);
    72f4:	f856 3f08 	ldr.w	r3, [r6, #8]!
    72f8:	885f      	ldrh	r7, [r3, #2]
	net_buf_pull(buf, sizeof(*hdr));
    72fa:	4630      	mov	r0, r6
    72fc:	f012 f8a6 	bl	1944c <net_buf_simple_pull>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    7300:	4620      	mov	r0, r4
    7302:	4639      	mov	r1, r7
    7304:	f7ff fe3f 	bl	6f86 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    7308:	4604      	mov	r4, r0
    730a:	b950      	cbnz	r0, 7322 <bt_l2cap_recv+0x5e>
		BT_WARN("Ignoring data for unknown CID 0x%04x", cid);
    730c:	4b2d      	ldr	r3, [pc, #180]	; (73c4 <bt_l2cap_recv+0x100>)
    730e:	9302      	str	r3, [sp, #8]
    7310:	e88d 0088 	stmia.w	sp, {r3, r7}
    7314:	4a30      	ldr	r2, [pc, #192]	; (73d8 <bt_l2cap_recv+0x114>)
    7316:	4b2d      	ldr	r3, [pc, #180]	; (73cc <bt_l2cap_recv+0x108>)
    7318:	492d      	ldr	r1, [pc, #180]	; (73d0 <bt_l2cap_recv+0x10c>)
    731a:	4830      	ldr	r0, [pc, #192]	; (73dc <bt_l2cap_recv+0x118>)
    731c:	f7fa ffc0 	bl	22a0 <printk>
    7320:	e7e0      	b.n	72e4 <bt_l2cap_recv+0x20>
	if (L2CAP_LE_CID_IS_DYN(ch->rx.cid)) {
    7322:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
    7326:	3b40      	subs	r3, #64	; 0x40
    7328:	b29b      	uxth	r3, r3
    732a:	2b3f      	cmp	r3, #63	; 0x3f
    732c:	d844      	bhi.n	73b8 <bt_l2cap_recv+0xf4>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    732e:	2100      	movs	r1, #0
    7330:	3048      	adds	r0, #72	; 0x48
    7332:	f01a fc9f 	bl	21c74 <_impl_k_sem_take>
	if (k_sem_take(&chan->rx.credits, K_NO_WAIT)) {
    7336:	b160      	cbz	r0, 7352 <bt_l2cap_recv+0x8e>
		BT_ERR("No credits to receive packet");
    7338:	4b22      	ldr	r3, [pc, #136]	; (73c4 <bt_l2cap_recv+0x100>)
    733a:	9301      	str	r3, [sp, #4]
    733c:	9300      	str	r3, [sp, #0]
    733e:	4a22      	ldr	r2, [pc, #136]	; (73c8 <bt_l2cap_recv+0x104>)
    7340:	4b27      	ldr	r3, [pc, #156]	; (73e0 <bt_l2cap_recv+0x11c>)
    7342:	4923      	ldr	r1, [pc, #140]	; (73d0 <bt_l2cap_recv+0x10c>)
    7344:	4827      	ldr	r0, [pc, #156]	; (73e4 <bt_l2cap_recv+0x120>)
			BT_ERR("Unable to allocate buffer for SDU");
    7346:	f7fa ffab 	bl	22a0 <printk>
			bt_l2cap_chan_disconnect(&chan->chan);
    734a:	4620      	mov	r0, r4
    734c:	f7ff ff0e 	bl	716c <bt_l2cap_chan_disconnect>
    7350:	e7c8      	b.n	72e4 <bt_l2cap_recv+0x20>
	if (chan->_sdu) {
    7352:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    7356:	b123      	cbz	r3, 7362 <bt_l2cap_recv+0x9e>
		l2cap_chan_le_recv_sdu(chan, buf);
    7358:	4629      	mov	r1, r5
    735a:	4620      	mov	r0, r4
    735c:	f7ff ff36 	bl	71cc <l2cap_chan_le_recv_sdu>
    7360:	e7c0      	b.n	72e4 <bt_l2cap_recv+0x20>
	sdu_len = net_buf_pull_le16(buf);
    7362:	4630      	mov	r0, r6
    7364:	f012 f882 	bl	1946c <net_buf_simple_pull_le16>
	if (sdu_len > chan->rx.mtu) {
    7368:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    736c:	4283      	cmp	r3, r0
	sdu_len = net_buf_pull_le16(buf);
    736e:	4606      	mov	r6, r0
	if (sdu_len > chan->rx.mtu) {
    7370:	d207      	bcs.n	7382 <bt_l2cap_recv+0xbe>
		BT_ERR("Invalid SDU length");
    7372:	4b14      	ldr	r3, [pc, #80]	; (73c4 <bt_l2cap_recv+0x100>)
    7374:	9301      	str	r3, [sp, #4]
    7376:	9300      	str	r3, [sp, #0]
    7378:	4a13      	ldr	r2, [pc, #76]	; (73c8 <bt_l2cap_recv+0x104>)
    737a:	4b19      	ldr	r3, [pc, #100]	; (73e0 <bt_l2cap_recv+0x11c>)
    737c:	4914      	ldr	r1, [pc, #80]	; (73d0 <bt_l2cap_recv+0x10c>)
    737e:	481a      	ldr	r0, [pc, #104]	; (73e8 <bt_l2cap_recv+0x124>)
    7380:	e7e1      	b.n	7346 <bt_l2cap_recv+0x82>
	if (chan->chan.ops->alloc_buf) {
    7382:	6863      	ldr	r3, [r4, #4]
    7384:	68da      	ldr	r2, [r3, #12]
    7386:	b17a      	cbz	r2, 73a8 <bt_l2cap_recv+0xe4>
		chan->_sdu = chan->chan.ops->alloc_buf(&chan->chan);
    7388:	4620      	mov	r0, r4
    738a:	4790      	blx	r2
    738c:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
		if (!chan->_sdu) {
    7390:	b938      	cbnz	r0, 73a2 <bt_l2cap_recv+0xde>
			BT_ERR("Unable to allocate buffer for SDU");
    7392:	4b0c      	ldr	r3, [pc, #48]	; (73c4 <bt_l2cap_recv+0x100>)
    7394:	9301      	str	r3, [sp, #4]
    7396:	9300      	str	r3, [sp, #0]
    7398:	4a0b      	ldr	r2, [pc, #44]	; (73c8 <bt_l2cap_recv+0x104>)
    739a:	4b11      	ldr	r3, [pc, #68]	; (73e0 <bt_l2cap_recv+0x11c>)
    739c:	490c      	ldr	r1, [pc, #48]	; (73d0 <bt_l2cap_recv+0x10c>)
    739e:	4813      	ldr	r0, [pc, #76]	; (73ec <bt_l2cap_recv+0x128>)
    73a0:	e7d1      	b.n	7346 <bt_l2cap_recv+0x82>
		chan->_sdu_len = sdu_len;
    73a2:	f8a4 6098 	strh.w	r6, [r4, #152]	; 0x98
    73a6:	e7d7      	b.n	7358 <bt_l2cap_recv+0x94>
	chan->chan.ops->recv(&chan->chan, buf);
    73a8:	4620      	mov	r0, r4
    73aa:	691b      	ldr	r3, [r3, #16]
    73ac:	4629      	mov	r1, r5
    73ae:	4798      	blx	r3
	l2cap_chan_update_credits(chan, buf);
    73b0:	4620      	mov	r0, r4
    73b2:	f7ff fda9 	bl	6f08 <l2cap_chan_update_credits.isra.9>
    73b6:	e795      	b.n	72e4 <bt_l2cap_recv+0x20>
	chan->ops->recv(chan, buf);
    73b8:	6843      	ldr	r3, [r0, #4]
    73ba:	4629      	mov	r1, r5
    73bc:	691b      	ldr	r3, [r3, #16]
    73be:	4798      	blx	r3
    73c0:	e790      	b.n	72e4 <bt_l2cap_recv+0x20>
    73c2:	bf00      	nop
    73c4:	00023dbe 	.word	0x00023dbe
    73c8:	00022d86 	.word	0x00022d86
    73cc:	0002458e 	.word	0x0002458e
    73d0:	000272e8 	.word	0x000272e8
    73d4:	000245e6 	.word	0x000245e6
    73d8:	00024016 	.word	0x00024016
    73dc:	00024613 	.word	0x00024613
    73e0:	0002457b 	.word	0x0002457b
    73e4:	00024648 	.word	0x00024648
    73e8:	00024675 	.word	0x00024675
    73ec:	00024698 	.word	0x00024698

000073f0 <l2cap_recv>:
{
    73f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (buf->len < sizeof(*hdr)) {
    73f4:	898b      	ldrh	r3, [r1, #12]
    73f6:	2b03      	cmp	r3, #3
{
    73f8:	b089      	sub	sp, #36	; 0x24
    73fa:	4606      	mov	r6, r0
    73fc:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    73fe:	d809      	bhi.n	7414 <l2cap_recv+0x24>
		BT_ERR("Too small L2CAP signaling PDU");
    7400:	4ba4      	ldr	r3, [pc, #656]	; (7694 <l2cap_recv+0x2a4>)
    7402:	9301      	str	r3, [sp, #4]
    7404:	9300      	str	r3, [sp, #0]
    7406:	4aa4      	ldr	r2, [pc, #656]	; (7698 <l2cap_recv+0x2a8>)
    7408:	4ba4      	ldr	r3, [pc, #656]	; (769c <l2cap_recv+0x2ac>)
    740a:	49a5      	ldr	r1, [pc, #660]	; (76a0 <l2cap_recv+0x2b0>)
    740c:	48a5      	ldr	r0, [pc, #660]	; (76a4 <l2cap_recv+0x2b4>)
		BT_ERR("Invalid ident value in L2CAP PDU");
    740e:	f7fa ff47 	bl	22a0 <printk>
		return;
    7412:	e013      	b.n	743c <l2cap_recv+0x4c>
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
    7414:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    7416:	2104      	movs	r1, #4
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
    7418:	f850 7f08 	ldr.w	r7, [r0, #8]!
	len = sys_le16_to_cpu(hdr->len);
    741c:	887c      	ldrh	r4, [r7, #2]
	net_buf_pull(buf, sizeof(*hdr));
    741e:	f012 f815 	bl	1944c <net_buf_simple_pull>
	if (buf->len != len) {
    7422:	89ab      	ldrh	r3, [r5, #12]
    7424:	429c      	cmp	r4, r3
    7426:	d00c      	beq.n	7442 <l2cap_recv+0x52>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
    7428:	4a9a      	ldr	r2, [pc, #616]	; (7694 <l2cap_recv+0x2a4>)
    742a:	9203      	str	r2, [sp, #12]
    742c:	e88d 001c 	stmia.w	sp, {r2, r3, r4}
    7430:	499b      	ldr	r1, [pc, #620]	; (76a0 <l2cap_recv+0x2b0>)
    7432:	4b9a      	ldr	r3, [pc, #616]	; (769c <l2cap_recv+0x2ac>)
    7434:	4a98      	ldr	r2, [pc, #608]	; (7698 <l2cap_recv+0x2a8>)
    7436:	489c      	ldr	r0, [pc, #624]	; (76a8 <l2cap_recv+0x2b8>)
    7438:	f7fa ff32 	bl	22a0 <printk>
}
    743c:	b009      	add	sp, #36	; 0x24
    743e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!hdr->ident) {
    7442:	787c      	ldrb	r4, [r7, #1]
    7444:	b93c      	cbnz	r4, 7456 <l2cap_recv+0x66>
		BT_ERR("Invalid ident value in L2CAP PDU");
    7446:	4b93      	ldr	r3, [pc, #588]	; (7694 <l2cap_recv+0x2a4>)
    7448:	9301      	str	r3, [sp, #4]
    744a:	9300      	str	r3, [sp, #0]
    744c:	4a92      	ldr	r2, [pc, #584]	; (7698 <l2cap_recv+0x2a8>)
    744e:	4b93      	ldr	r3, [pc, #588]	; (769c <l2cap_recv+0x2ac>)
    7450:	4993      	ldr	r1, [pc, #588]	; (76a0 <l2cap_recv+0x2b0>)
    7452:	4896      	ldr	r0, [pc, #600]	; (76ac <l2cap_recv+0x2bc>)
    7454:	e7db      	b.n	740e <l2cap_recv+0x1e>
	switch (hdr->code) {
    7456:	783a      	ldrb	r2, [r7, #0]
    7458:	1e51      	subs	r1, r2, #1
    745a:	2915      	cmp	r1, #21
    745c:	f200 825c 	bhi.w	7918 <l2cap_recv+0x528>
    7460:	e8df f011 	tbh	[pc, r1, lsl #1]
    7464:	025a0254 	.word	0x025a0254
    7468:	025a025a 	.word	0x025a025a
    746c:	01b5025a 	.word	0x01b5025a
    7470:	025a01ef 	.word	0x025a01ef
    7474:	025a025a 	.word	0x025a025a
    7478:	025a025a 	.word	0x025a025a
    747c:	025a025a 	.word	0x025a025a
    7480:	025a025a 	.word	0x025a025a
    7484:	0020025a 	.word	0x0020025a
    7488:	00720016 	.word	0x00720016
    748c:	02010136 	.word	0x02010136
	if (buf->len < sizeof(*rsp)) {
    7490:	2b01      	cmp	r3, #1
    7492:	d8d3      	bhi.n	743c <l2cap_recv+0x4c>
		BT_ERR("Too small LE conn param rsp");
    7494:	4b7f      	ldr	r3, [pc, #508]	; (7694 <l2cap_recv+0x2a4>)
    7496:	9301      	str	r3, [sp, #4]
    7498:	9300      	str	r3, [sp, #0]
    749a:	4a7f      	ldr	r2, [pc, #508]	; (7698 <l2cap_recv+0x2a8>)
    749c:	4b84      	ldr	r3, [pc, #528]	; (76b0 <l2cap_recv+0x2c0>)
    749e:	4980      	ldr	r1, [pc, #512]	; (76a0 <l2cap_recv+0x2b0>)
    74a0:	4884      	ldr	r0, [pc, #528]	; (76b4 <l2cap_recv+0x2c4>)
    74a2:	e7b4      	b.n	740e <l2cap_recv+0x1e>
	if (buf->len < sizeof(*req)) {
    74a4:	2b07      	cmp	r3, #7
    74a6:	d807      	bhi.n	74b8 <l2cap_recv+0xc8>
		BT_ERR("Too small LE conn update param req");
    74a8:	4b7a      	ldr	r3, [pc, #488]	; (7694 <l2cap_recv+0x2a4>)
    74aa:	9301      	str	r3, [sp, #4]
    74ac:	9300      	str	r3, [sp, #0]
    74ae:	4a7a      	ldr	r2, [pc, #488]	; (7698 <l2cap_recv+0x2a8>)
    74b0:	4b81      	ldr	r3, [pc, #516]	; (76b8 <l2cap_recv+0x2c8>)
    74b2:	497b      	ldr	r1, [pc, #492]	; (76a0 <l2cap_recv+0x2b0>)
    74b4:	4881      	ldr	r0, [pc, #516]	; (76bc <l2cap_recv+0x2cc>)
    74b6:	e7aa      	b.n	740e <l2cap_recv+0x1e>
    74b8:	6836      	ldr	r6, [r6, #0]
	if (conn->role != BT_HCI_ROLE_MASTER) {
    74ba:	78f7      	ldrb	r7, [r6, #3]
    74bc:	b13f      	cbz	r7, 74ce <l2cap_recv+0xde>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
    74be:	2300      	movs	r3, #0
    74c0:	9300      	str	r3, [sp, #0]
    74c2:	461a      	mov	r2, r3
    74c4:	4621      	mov	r1, r4
    74c6:	4630      	mov	r0, r6
		l2cap_send_reject(chan->conn, hdr->ident,
    74c8:	f7ff fc3a 	bl	6d40 <l2cap_send_reject>
		break;
    74cc:	e7b6      	b.n	743c <l2cap_recv+0x4c>
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
    74ce:	68ab      	ldr	r3, [r5, #8]
	param.interval_min = sys_le16_to_cpu(req->min_interval);
    74d0:	7859      	ldrb	r1, [r3, #1]
    74d2:	781a      	ldrb	r2, [r3, #0]
    74d4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    74d8:	f8ad 2018 	strh.w	r2, [sp, #24]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
    74dc:	78d9      	ldrb	r1, [r3, #3]
    74de:	789a      	ldrb	r2, [r3, #2]
    74e0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    74e4:	f8ad 201a 	strh.w	r2, [sp, #26]
	param.latency = sys_le16_to_cpu(req->latency);
    74e8:	7959      	ldrb	r1, [r3, #5]
    74ea:	791a      	ldrb	r2, [r3, #4]
    74ec:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    74f0:	f8ad 201c 	strh.w	r2, [sp, #28]
	param.timeout = sys_le16_to_cpu(req->timeout);
    74f4:	799a      	ldrb	r2, [r3, #6]
    74f6:	79db      	ldrb	r3, [r3, #7]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    74f8:	4621      	mov	r1, r4
	param.timeout = sys_le16_to_cpu(req->timeout);
    74fa:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    74fe:	2013      	movs	r0, #19
    7500:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
    7502:	f8ad 301e 	strh.w	r3, [sp, #30]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    7506:	f7ff fb2a 	bl	6b5e <l2cap_create_le_sig_pdu.isra.6>
	accepted = le_param_req(conn, &param);
    750a:	a906      	add	r1, sp, #24
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    750c:	4605      	mov	r5, r0
	accepted = le_param_req(conn, &param);
    750e:	4630      	mov	r0, r6
    7510:	f7fe fb98 	bl	5c44 <le_param_req>
	rsp = net_buf_add(buf, sizeof(*rsp));
    7514:	2102      	movs	r1, #2
	accepted = le_param_req(conn, &param);
    7516:	4604      	mov	r4, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    7518:	f105 0008 	add.w	r0, r5, #8
    751c:	f011 ff46 	bl	193ac <net_buf_simple_add>
	if (accepted) {
    7520:	b174      	cbz	r4, 7540 <l2cap_recv+0x150>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
    7522:	7007      	strb	r7, [r0, #0]
    7524:	7047      	strb	r7, [r0, #1]
    7526:	2300      	movs	r3, #0
    7528:	462a      	mov	r2, r5
    752a:	2105      	movs	r1, #5
    752c:	4630      	mov	r0, r6
    752e:	f7ff fb9f 	bl	6c70 <bt_l2cap_send_cb>
	if (accepted) {
    7532:	2c00      	cmp	r4, #0
    7534:	d082      	beq.n	743c <l2cap_recv+0x4c>
		bt_conn_le_conn_update(conn, &param);
    7536:	a906      	add	r1, sp, #24
    7538:	4630      	mov	r0, r6
    753a:	f7ff f8a4 	bl	6686 <bt_conn_le_conn_update>
    753e:	e77d      	b.n	743c <l2cap_recv+0x4c>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_REJECTED);
    7540:	2301      	movs	r3, #1
    7542:	7003      	strb	r3, [r0, #0]
    7544:	7044      	strb	r4, [r0, #1]
    7546:	e7ee      	b.n	7526 <l2cap_recv+0x136>
	if (buf->len < sizeof(*req)) {
    7548:	2b09      	cmp	r3, #9
    754a:	d807      	bhi.n	755c <l2cap_recv+0x16c>
		BT_ERR("Too small LE conn req packet size");
    754c:	4b51      	ldr	r3, [pc, #324]	; (7694 <l2cap_recv+0x2a4>)
    754e:	9301      	str	r3, [sp, #4]
    7550:	9300      	str	r3, [sp, #0]
    7552:	4b5b      	ldr	r3, [pc, #364]	; (76c0 <l2cap_recv+0x2d0>)
		BT_ERR("Too small LE conn req packet size");
    7554:	4a50      	ldr	r2, [pc, #320]	; (7698 <l2cap_recv+0x2a8>)
    7556:	4952      	ldr	r1, [pc, #328]	; (76a0 <l2cap_recv+0x2b0>)
    7558:	485a      	ldr	r0, [pc, #360]	; (76c4 <l2cap_recv+0x2d4>)
    755a:	e758      	b.n	740e <l2cap_recv+0x1e>
	struct bt_l2cap_le_conn_req *req = (void *)buf->data;
    755c:	68aa      	ldr	r2, [r5, #8]
	mtu = sys_le16_to_cpu(req->mtu);
    755e:	f8b2 9004 	ldrh.w	r9, [r2, #4]
	if (mtu < L2CAP_LE_MIN_MTU || mps < L2CAP_LE_MIN_MTU) {
    7562:	f1b9 0f16 	cmp.w	r9, #22
    7566:	d904      	bls.n	7572 <l2cap_recv+0x182>
	mps = sys_le16_to_cpu(req->mps);
    7568:	f8b2 a006 	ldrh.w	sl, [r2, #6]
	if (mtu < L2CAP_LE_MIN_MTU || mps < L2CAP_LE_MIN_MTU) {
    756c:	f1ba 0f16 	cmp.w	sl, #22
    7570:	d807      	bhi.n	7582 <l2cap_recv+0x192>
		BT_ERR("Invalid LE-Conn Req params");
    7572:	4b48      	ldr	r3, [pc, #288]	; (7694 <l2cap_recv+0x2a4>)
    7574:	9301      	str	r3, [sp, #4]
    7576:	9300      	str	r3, [sp, #0]
    7578:	4a47      	ldr	r2, [pc, #284]	; (7698 <l2cap_recv+0x2a8>)
    757a:	4b51      	ldr	r3, [pc, #324]	; (76c0 <l2cap_recv+0x2d0>)
    757c:	4948      	ldr	r1, [pc, #288]	; (76a0 <l2cap_recv+0x2b0>)
    757e:	4852      	ldr	r0, [pc, #328]	; (76c8 <l2cap_recv+0x2d8>)
    7580:	e745      	b.n	740e <l2cap_recv+0x1e>
	credits = sys_le16_to_cpu(req->credits);
    7582:	8913      	ldrh	r3, [r2, #8]
	scid = sys_le16_to_cpu(req->scid);
    7584:	f8b2 b002 	ldrh.w	fp, [r2, #2]
    7588:	6835      	ldr	r5, [r6, #0]
	psm = sys_le16_to_cpu(req->psm);
    758a:	8816      	ldrh	r6, [r2, #0]
	credits = sys_le16_to_cpu(req->credits);
    758c:	9305      	str	r3, [sp, #20]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CONN_RSP, ident,
    758e:	220a      	movs	r2, #10
    7590:	4621      	mov	r1, r4
    7592:	2015      	movs	r0, #21
	credits = sys_le16_to_cpu(req->credits);
    7594:	461f      	mov	r7, r3
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CONN_RSP, ident,
    7596:	f7ff fae2 	bl	6b5e <l2cap_create_le_sig_pdu.isra.6>
	rsp = net_buf_add(buf, sizeof(*rsp));
    759a:	210a      	movs	r1, #10
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CONN_RSP, ident,
    759c:	9004      	str	r0, [sp, #16]
	rsp = net_buf_add(buf, sizeof(*rsp));
    759e:	3008      	adds	r0, #8
    75a0:	f011 ff04 	bl	193ac <net_buf_simple_add>
	memset(rsp, 0, sizeof(*rsp));
    75a4:	220a      	movs	r2, #10
    75a6:	2100      	movs	r1, #0
	rsp = net_buf_add(buf, sizeof(*rsp));
    75a8:	4604      	mov	r4, r0
	memset(rsp, 0, sizeof(*rsp));
    75aa:	f7f9 f91e 	bl	7ea <memset>
	server = l2cap_server_lookup_psm(psm);
    75ae:	4630      	mov	r0, r6
    75b0:	f7ff fa2a 	bl	6a08 <l2cap_server_lookup_psm>
	if (!server) {
    75b4:	4606      	mov	r6, r0
    75b6:	b940      	cbnz	r0, 75ca <l2cap_recv+0x1da>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_PSM_NOT_SUPP);
    75b8:	2302      	movs	r3, #2
    75ba:	9a04      	ldr	r2, [sp, #16]
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_NO_RESOURCES);
    75bc:	8123      	strh	r3, [r4, #8]
    75be:	2105      	movs	r1, #5
    75c0:	2300      	movs	r3, #0
    75c2:	4628      	mov	r0, r5
    75c4:	f7ff fb54 	bl	6c70 <bt_l2cap_send_cb>
    75c8:	e738      	b.n	743c <l2cap_recv+0x4c>
	if (conn->sec_level < server->sec_level) {
    75ca:	7a29      	ldrb	r1, [r5, #8]
    75cc:	7882      	ldrb	r2, [r0, #2]
    75ce:	4291      	cmp	r1, r2
    75d0:	d201      	bcs.n	75d6 <l2cap_recv+0x1e6>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_AUTHENTICATION);
    75d2:	2305      	movs	r3, #5
    75d4:	e7f1      	b.n	75ba <l2cap_recv+0x1ca>
	if (!L2CAP_LE_CID_IS_DYN(scid)) {
    75d6:	f1ab 0240 	sub.w	r2, fp, #64	; 0x40
    75da:	2a3f      	cmp	r2, #63	; 0x3f
    75dc:	d901      	bls.n	75e2 <l2cap_recv+0x1f2>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_INVALID_SCID);
    75de:	2309      	movs	r3, #9
    75e0:	e7eb      	b.n	75ba <l2cap_recv+0x1ca>
	chan = bt_l2cap_le_lookup_tx_cid(conn, scid);
    75e2:	4659      	mov	r1, fp
    75e4:	4628      	mov	r0, r5
    75e6:	f7ff fcbe 	bl	6f66 <bt_l2cap_le_lookup_tx_cid>
    75ea:	9006      	str	r0, [sp, #24]
	if (chan) {
    75ec:	b108      	cbz	r0, 75f2 <l2cap_recv+0x202>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_SCID_IN_USE);
    75ee:	230a      	movs	r3, #10
    75f0:	e7e3      	b.n	75ba <l2cap_recv+0x1ca>
	if (server->accept(conn, &chan) < 0) {
    75f2:	6873      	ldr	r3, [r6, #4]
    75f4:	a906      	add	r1, sp, #24
    75f6:	4628      	mov	r0, r5
    75f8:	4798      	blx	r3
    75fa:	2800      	cmp	r0, #0
    75fc:	da01      	bge.n	7602 <l2cap_recv+0x212>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_NO_RESOURCES);
    75fe:	2304      	movs	r3, #4
    7600:	e7db      	b.n	75ba <l2cap_recv+0x1ca>
	chan->required_sec_level = server->sec_level;
    7602:	9906      	ldr	r1, [sp, #24]
    7604:	78b3      	ldrb	r3, [r6, #2]
    7606:	f881 303d 	strb.w	r3, [r1, #61]	; 0x3d
	if (l2cap_chan_add(conn, chan, l2cap_chan_destroy)) {
    760a:	4a30      	ldr	r2, [pc, #192]	; (76cc <l2cap_recv+0x2dc>)
    760c:	4628      	mov	r0, r5
    760e:	f7ff fccb 	bl	6fa8 <l2cap_chan_add>
    7612:	2800      	cmp	r0, #0
    7614:	d0f3      	beq.n	75fe <l2cap_recv+0x20e>
		struct bt_l2cap_le_chan *ch = BT_L2CAP_LE_CHAN(chan);
    7616:	f8dd 8018 	ldr.w	r8, [sp, #24]
		l2cap_chan_tx_init(ch);
    761a:	4640      	mov	r0, r8
    761c:	f7ff fa68 	bl	6af0 <l2cap_chan_tx_init>
		ch->tx.init_credits = credits;
    7620:	f8bd 3014 	ldrh.w	r3, [sp, #20]
		ch->tx.mtu = mtu;
    7624:	f8a8 9062 	strh.w	r9, [r8, #98]	; 0x62
		ch->tx.cid = scid;
    7628:	f8a8 b060 	strh.w	fp, [r8, #96]	; 0x60
		ch->tx.mps = mps;
    762c:	f8a8 a064 	strh.w	sl, [r8, #100]	; 0x64
		ch->tx.init_credits = credits;
    7630:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
		k_sem_give(&chan->tx.credits);
    7634:	f108 0968 	add.w	r9, r8, #104	; 0x68
	while (credits--) {
    7638:	b9ff      	cbnz	r7, 767a <l2cap_recv+0x28a>
		l2cap_chan_rx_init(ch);
    763a:	4640      	mov	r0, r8
    763c:	f7ff fa6c 	bl	6b18 <l2cap_chan_rx_init>
		l2cap_chan_rx_give_credits(ch, ch->rx.init_credits);
    7640:	f8b8 7046 	ldrh.w	r7, [r8, #70]	; 0x46
		k_sem_give(&chan->rx.credits);
    7644:	f108 0948 	add.w	r9, r8, #72	; 0x48
	while (credits--) {
    7648:	b9ef      	cbnz	r7, 7686 <l2cap_recv+0x296>
		chan->psm = server->psm;
    764a:	9806      	ldr	r0, [sp, #24]
    764c:	8832      	ldrh	r2, [r6, #0]
    764e:	8742      	strh	r2, [r0, #58]	; 0x3a
	chan->state = state;
    7650:	2203      	movs	r2, #3
    7652:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
		if (chan->ops->connected) {
    7656:	6842      	ldr	r2, [r0, #4]
    7658:	6812      	ldr	r2, [r2, #0]
    765a:	b102      	cbz	r2, 765e <l2cap_recv+0x26e>
			chan->ops->connected(chan);
    765c:	4790      	blx	r2
		rsp->dcid = sys_cpu_to_le16(ch->rx.cid);
    765e:	f8b8 2040 	ldrh.w	r2, [r8, #64]	; 0x40
    7662:	8022      	strh	r2, [r4, #0]
		rsp->mps = sys_cpu_to_le16(ch->rx.mps);
    7664:	f8b8 2044 	ldrh.w	r2, [r8, #68]	; 0x44
		rsp->credits = sys_cpu_to_le16(ch->rx.init_credits);
    7668:	f8b8 3046 	ldrh.w	r3, [r8, #70]	; 0x46
		rsp->mps = sys_cpu_to_le16(ch->rx.mps);
    766c:	80a2      	strh	r2, [r4, #4]
		rsp->mtu = sys_cpu_to_le16(ch->rx.mtu);
    766e:	f8b8 2042 	ldrh.w	r2, [r8, #66]	; 0x42
    7672:	8062      	strh	r2, [r4, #2]
		rsp->credits = sys_cpu_to_le16(ch->rx.init_credits);
    7674:	80e3      	strh	r3, [r4, #6]
		rsp->result = BT_L2CAP_SUCCESS;
    7676:	2300      	movs	r3, #0
    7678:	e79f      	b.n	75ba <l2cap_recv+0x1ca>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    767a:	4648      	mov	r0, r9
    767c:	3f01      	subs	r7, #1
    767e:	f01a fa99 	bl	21bb4 <_impl_k_sem_give>
    7682:	b2bf      	uxth	r7, r7
    7684:	e7d8      	b.n	7638 <l2cap_recv+0x248>
    7686:	4648      	mov	r0, r9
    7688:	3f01      	subs	r7, #1
    768a:	f01a fa93 	bl	21bb4 <_impl_k_sem_give>
    768e:	b2bf      	uxth	r7, r7
    7690:	e7da      	b.n	7648 <l2cap_recv+0x258>
    7692:	bf00      	nop
    7694:	00023dbe 	.word	0x00023dbe
    7698:	00022d86 	.word	0x00022d86
    769c:	00024559 	.word	0x00024559
    76a0:	000272e8 	.word	0x000272e8
    76a4:	00024776 	.word	0x00024776
    76a8:	000247a4 	.word	0x000247a4
    76ac:	000247d5 	.word	0x000247d5
    76b0:	000244ed 	.word	0x000244ed
    76b4:	00024806 	.word	0x00024806
    76b8:	000244ff 	.word	0x000244ff
    76bc:	00024832 	.word	0x00024832
    76c0:	00024518 	.word	0x00024518
    76c4:	00024865 	.word	0x00024865
    76c8:	00024897 	.word	0x00024897
    76cc:	00006abd 	.word	0x00006abd
	if (buf->len < sizeof(*rsp)) {
    76d0:	2b09      	cmp	r3, #9
    76d2:	d807      	bhi.n	76e4 <l2cap_recv+0x2f4>
		BT_ERR("Too small LE conn rsp packet size");
    76d4:	4b98      	ldr	r3, [pc, #608]	; (7938 <l2cap_recv+0x548>)
    76d6:	9301      	str	r3, [sp, #4]
    76d8:	9300      	str	r3, [sp, #0]
    76da:	4a98      	ldr	r2, [pc, #608]	; (793c <l2cap_recv+0x54c>)
    76dc:	4b98      	ldr	r3, [pc, #608]	; (7940 <l2cap_recv+0x550>)
    76de:	4999      	ldr	r1, [pc, #612]	; (7944 <l2cap_recv+0x554>)
    76e0:	4899      	ldr	r0, [pc, #612]	; (7948 <l2cap_recv+0x558>)
    76e2:	e694      	b.n	740e <l2cap_recv+0x1e>
	struct bt_l2cap_le_conn_rsp *rsp = (void *)buf->data;
    76e4:	68ab      	ldr	r3, [r5, #8]
    76e6:	f8d6 8000 	ldr.w	r8, [r6]
	result = sys_le16_to_cpu(rsp->result);
    76ea:	891f      	ldrh	r7, [r3, #8]
	dcid = sys_le16_to_cpu(rsp->dcid);
    76ec:	f8b3 b000 	ldrh.w	fp, [r3]
	mtu = sys_le16_to_cpu(rsp->mtu);
    76f0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
	mps = sys_le16_to_cpu(rsp->mps);
    76f4:	f8b3 9004 	ldrh.w	r9, [r3, #4]
	credits = sys_le16_to_cpu(rsp->credits);
    76f8:	88de      	ldrh	r6, [r3, #6]
	if (result == BT_L2CAP_SUCCESS ||
    76fa:	f027 0308 	bic.w	r3, r7, #8
    76fe:	b2a1      	uxth	r1, r4
    7700:	b10b      	cbz	r3, 7706 <l2cap_recv+0x316>
    7702:	2f05      	cmp	r7, #5
    7704:	d110      	bne.n	7728 <l2cap_recv+0x338>
		chan = l2cap_lookup_ident(conn, ident);
    7706:	2200      	movs	r2, #0
		chan = l2cap_remove_ident(conn, ident);
    7708:	4640      	mov	r0, r8
    770a:	f7ff f961 	bl	69d0 <__l2cap_lookup_ident>
    770e:	4605      	mov	r5, r0
	if (!chan) {
    7710:	b960      	cbnz	r0, 772c <l2cap_recv+0x33c>
		BT_ERR("Cannot find channel for ident %u", ident);
    7712:	4b89      	ldr	r3, [pc, #548]	; (7938 <l2cap_recv+0x548>)
    7714:	9302      	str	r3, [sp, #8]
    7716:	e88d 0018 	stmia.w	sp, {r3, r4}
    771a:	4a88      	ldr	r2, [pc, #544]	; (793c <l2cap_recv+0x54c>)
    771c:	4b88      	ldr	r3, [pc, #544]	; (7940 <l2cap_recv+0x550>)
    771e:	4989      	ldr	r1, [pc, #548]	; (7944 <l2cap_recv+0x554>)
    7720:	488a      	ldr	r0, [pc, #552]	; (794c <l2cap_recv+0x55c>)
    7722:	f7fa fdbd 	bl	22a0 <printk>
    7726:	e689      	b.n	743c <l2cap_recv+0x4c>
		chan = l2cap_remove_ident(conn, ident);
    7728:	2201      	movs	r2, #1
    772a:	e7ed      	b.n	7708 <l2cap_recv+0x318>
	k_delayed_work_cancel(&chan->chan.rtx_work);
    772c:	3010      	adds	r0, #16
    772e:	f01a fd8b 	bl	22248 <k_delayed_work_cancel>
	chan->chan.ident = 0;
    7732:	2300      	movs	r3, #0
	switch (result) {
    7734:	2f05      	cmp	r7, #5
	chan->chan.ident = 0;
    7736:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
	switch (result) {
    773a:	d03c      	beq.n	77b6 <l2cap_recv+0x3c6>
    773c:	2f08      	cmp	r7, #8
    773e:	d023      	beq.n	7788 <l2cap_recv+0x398>
    7740:	bbaf      	cbnz	r7, 77ae <l2cap_recv+0x3be>
	chan->state = state;
    7742:	2303      	movs	r3, #3
    7744:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
		if (chan->chan.ops->connected) {
    7748:	686b      	ldr	r3, [r5, #4]
		chan->tx.cid = dcid;
    774a:	f8a5 b060 	strh.w	fp, [r5, #96]	; 0x60
		if (chan->chan.ops->connected) {
    774e:	681b      	ldr	r3, [r3, #0]
		chan->tx.mtu = mtu;
    7750:	f8a5 a062 	strh.w	sl, [r5, #98]	; 0x62
		chan->tx.mps = mps;
    7754:	f8a5 9064 	strh.w	r9, [r5, #100]	; 0x64
		if (chan->chan.ops->connected) {
    7758:	b10b      	cbz	r3, 775e <l2cap_recv+0x36e>
			chan->chan.ops->connected(&chan->chan);
    775a:	4628      	mov	r0, r5
    775c:	4798      	blx	r3
		k_sem_give(&chan->tx.credits);
    775e:	f105 0468 	add.w	r4, r5, #104	; 0x68
	while (credits--) {
    7762:	b95e      	cbnz	r6, 777c <l2cap_recv+0x38c>
		l2cap_chan_rx_give_credits(chan, chan->rx.init_credits);
    7764:	f8b5 4046 	ldrh.w	r4, [r5, #70]	; 0x46
		k_sem_give(&chan->rx.credits);
    7768:	3548      	adds	r5, #72	; 0x48
	while (credits--) {
    776a:	2c00      	cmp	r4, #0
    776c:	f43f ae66 	beq.w	743c <l2cap_recv+0x4c>
    7770:	4628      	mov	r0, r5
    7772:	3c01      	subs	r4, #1
    7774:	f01a fa1e 	bl	21bb4 <_impl_k_sem_give>
    7778:	b2a4      	uxth	r4, r4
    777a:	e7f6      	b.n	776a <l2cap_recv+0x37a>
    777c:	4620      	mov	r0, r4
    777e:	3e01      	subs	r6, #1
    7780:	f01a fa18 	bl	21bb4 <_impl_k_sem_give>
    7784:	b2b6      	uxth	r6, r6
    7786:	e7ec      	b.n	7762 <l2cap_recv+0x372>
		if (chan->chan.required_sec_level >= BT_SECURITY_MEDIUM) {
    7788:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
    778c:	2b01      	cmp	r3, #1
    778e:	d80a      	bhi.n	77a6 <l2cap_recv+0x3b6>
			chan->chan.required_sec_level = BT_SECURITY_MEDIUM;
    7790:	2302      	movs	r3, #2
			chan->chan.required_sec_level = BT_SECURITY_FIPS;
    7792:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
	return bt_conn_security(chan->chan.conn, chan->chan.required_sec_level);
    7796:	f895 103d 	ldrb.w	r1, [r5, #61]	; 0x3d
    779a:	6828      	ldr	r0, [r5, #0]
    779c:	f7fe fad6 	bl	5d4c <bt_conn_security>
		if (l2cap_change_security(chan, result) == 0) {
    77a0:	2800      	cmp	r0, #0
    77a2:	f43f ae4b 	beq.w	743c <l2cap_recv+0x4c>
		bt_l2cap_chan_remove(conn, &chan->chan);
    77a6:	4629      	mov	r1, r5
    77a8:	4640      	mov	r0, r8
    77aa:	f7ff f9f3 	bl	6b94 <bt_l2cap_chan_remove>
		bt_l2cap_chan_del(&chan->chan);
    77ae:	4628      	mov	r0, r5
	bt_l2cap_chan_del(&chan->chan);
    77b0:	f7ff fa09 	bl	6bc6 <bt_l2cap_chan_del>
    77b4:	e642      	b.n	743c <l2cap_recv+0x4c>
		if (chan->chan.required_sec_level < BT_SECURITY_MEDIUM) {
    77b6:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
    77ba:	2b01      	cmp	r3, #1
    77bc:	d9e8      	bls.n	7790 <l2cap_recv+0x3a0>
		} else if (chan->chan.required_sec_level < BT_SECURITY_HIGH) {
    77be:	2b02      	cmp	r3, #2
    77c0:	d101      	bne.n	77c6 <l2cap_recv+0x3d6>
			chan->chan.required_sec_level = BT_SECURITY_HIGH;
    77c2:	2303      	movs	r3, #3
    77c4:	e7e5      	b.n	7792 <l2cap_recv+0x3a2>
		} else if (chan->chan.required_sec_level < BT_SECURITY_FIPS) {
    77c6:	2b03      	cmp	r3, #3
    77c8:	d1ed      	bne.n	77a6 <l2cap_recv+0x3b6>
			chan->chan.required_sec_level = BT_SECURITY_FIPS;
    77ca:	2304      	movs	r3, #4
    77cc:	e7e1      	b.n	7792 <l2cap_recv+0x3a2>
	if (buf->len < sizeof(*req)) {
    77ce:	2b03      	cmp	r3, #3
    77d0:	d804      	bhi.n	77dc <l2cap_recv+0x3ec>
		BT_ERR("Too small LE conn req packet size");
    77d2:	4b59      	ldr	r3, [pc, #356]	; (7938 <l2cap_recv+0x548>)
    77d4:	9301      	str	r3, [sp, #4]
    77d6:	9300      	str	r3, [sp, #0]
    77d8:	4b5d      	ldr	r3, [pc, #372]	; (7950 <l2cap_recv+0x560>)
    77da:	e6bb      	b.n	7554 <l2cap_recv+0x164>
    77dc:	6837      	ldr	r7, [r6, #0]
	struct bt_l2cap_disconn_req *req = (void *)buf->data;
    77de:	68ad      	ldr	r5, [r5, #8]
	chan = l2cap_remove_tx_cid(conn, scid);
    77e0:	4638      	mov	r0, r7
    77e2:	8869      	ldrh	r1, [r5, #2]
    77e4:	f7ff f924 	bl	6a30 <l2cap_remove_tx_cid>
	if (!chan) {
    77e8:	4606      	mov	r6, r0
    77ea:	b990      	cbnz	r0, 7812 <l2cap_recv+0x422>
		data.scid = req->scid;
    77ec:	78ea      	ldrb	r2, [r5, #3]
    77ee:	78ab      	ldrb	r3, [r5, #2]
    77f0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    77f4:	f8ad 3018 	strh.w	r3, [sp, #24]
		data.dcid = req->dcid;
    77f8:	786a      	ldrb	r2, [r5, #1]
    77fa:	782b      	ldrb	r3, [r5, #0]
    77fc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    7800:	f8ad 301a 	strh.w	r3, [sp, #26]
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_INVALID_CID, &data,
    7804:	2304      	movs	r3, #4
    7806:	9300      	str	r3, [sp, #0]
    7808:	2202      	movs	r2, #2
    780a:	ab06      	add	r3, sp, #24
    780c:	4621      	mov	r1, r4
    780e:	4638      	mov	r0, r7
    7810:	e65a      	b.n	74c8 <l2cap_recv+0xd8>
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_DISCONN_RSP, ident,
    7812:	2204      	movs	r2, #4
    7814:	4621      	mov	r1, r4
    7816:	2007      	movs	r0, #7
    7818:	f7ff f9a1 	bl	6b5e <l2cap_create_le_sig_pdu.isra.6>
	rsp = net_buf_add(buf, sizeof(*rsp));
    781c:	2104      	movs	r1, #4
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_DISCONN_RSP, ident,
    781e:	4604      	mov	r4, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    7820:	3008      	adds	r0, #8
    7822:	f011 fdc3 	bl	193ac <net_buf_simple_add>
	rsp->dcid = sys_cpu_to_le16(chan->rx.cid);
    7826:	f8b6 3040 	ldrh.w	r3, [r6, #64]	; 0x40
    782a:	8003      	strh	r3, [r0, #0]
	rsp->scid = sys_cpu_to_le16(chan->tx.cid);
    782c:	f8b6 3060 	ldrh.w	r3, [r6, #96]	; 0x60
    7830:	8043      	strh	r3, [r0, #2]
	bt_l2cap_chan_del(&chan->chan);
    7832:	4630      	mov	r0, r6
    7834:	f7ff f9c7 	bl	6bc6 <bt_l2cap_chan_del>
    7838:	2300      	movs	r3, #0
    783a:	4622      	mov	r2, r4
    783c:	2105      	movs	r1, #5
    783e:	4638      	mov	r0, r7
    7840:	e6c0      	b.n	75c4 <l2cap_recv+0x1d4>
	if (buf->len < sizeof(*rsp)) {
    7842:	2b03      	cmp	r3, #3
    7844:	d807      	bhi.n	7856 <l2cap_recv+0x466>
		BT_ERR("Too small LE disconn rsp packet size");
    7846:	4b3c      	ldr	r3, [pc, #240]	; (7938 <l2cap_recv+0x548>)
    7848:	9301      	str	r3, [sp, #4]
    784a:	9300      	str	r3, [sp, #0]
    784c:	4a3b      	ldr	r2, [pc, #236]	; (793c <l2cap_recv+0x54c>)
    784e:	4b41      	ldr	r3, [pc, #260]	; (7954 <l2cap_recv+0x564>)
    7850:	493c      	ldr	r1, [pc, #240]	; (7944 <l2cap_recv+0x554>)
    7852:	4841      	ldr	r0, [pc, #260]	; (7958 <l2cap_recv+0x568>)
    7854:	e5db      	b.n	740e <l2cap_recv+0x1e>
	dcid = sys_le16_to_cpu(rsp->dcid);
    7856:	68ab      	ldr	r3, [r5, #8]
	chan = l2cap_remove_tx_cid(conn, dcid);
    7858:	6830      	ldr	r0, [r6, #0]
    785a:	8819      	ldrh	r1, [r3, #0]
    785c:	f7ff f8e8 	bl	6a30 <l2cap_remove_tx_cid>
	if (!chan) {
    7860:	2800      	cmp	r0, #0
    7862:	d1a5      	bne.n	77b0 <l2cap_recv+0x3c0>
    7864:	e5ea      	b.n	743c <l2cap_recv+0x4c>
	if (buf->len < sizeof(*ev)) {
    7866:	2b03      	cmp	r3, #3
    7868:	d807      	bhi.n	787a <l2cap_recv+0x48a>
		BT_ERR("Too small LE Credits packet size");
    786a:	4b33      	ldr	r3, [pc, #204]	; (7938 <l2cap_recv+0x548>)
    786c:	9301      	str	r3, [sp, #4]
    786e:	9300      	str	r3, [sp, #0]
    7870:	4a32      	ldr	r2, [pc, #200]	; (793c <l2cap_recv+0x54c>)
    7872:	4b3a      	ldr	r3, [pc, #232]	; (795c <l2cap_recv+0x56c>)
    7874:	4933      	ldr	r1, [pc, #204]	; (7944 <l2cap_recv+0x554>)
    7876:	483a      	ldr	r0, [pc, #232]	; (7960 <l2cap_recv+0x570>)
    7878:	e5c9      	b.n	740e <l2cap_recv+0x1e>
	struct bt_l2cap_le_credits *ev = (void *)buf->data;
    787a:	68ab      	ldr	r3, [r5, #8]
	chan = bt_l2cap_le_lookup_tx_cid(conn, cid);
    787c:	6830      	ldr	r0, [r6, #0]
    787e:	8819      	ldrh	r1, [r3, #0]
	credits = sys_le16_to_cpu(ev->credits);
    7880:	885d      	ldrh	r5, [r3, #2]
	chan = bt_l2cap_le_lookup_tx_cid(conn, cid);
    7882:	f7ff fb70 	bl	6f66 <bt_l2cap_le_lookup_tx_cid>
	if (!chan) {
    7886:	4604      	mov	r4, r0
    7888:	b938      	cbnz	r0, 789a <l2cap_recv+0x4aa>
		BT_ERR("Unable to find channel of LE Credits packet");
    788a:	4b2b      	ldr	r3, [pc, #172]	; (7938 <l2cap_recv+0x548>)
    788c:	9301      	str	r3, [sp, #4]
    788e:	9300      	str	r3, [sp, #0]
    7890:	4a2a      	ldr	r2, [pc, #168]	; (793c <l2cap_recv+0x54c>)
    7892:	4b32      	ldr	r3, [pc, #200]	; (795c <l2cap_recv+0x56c>)
    7894:	492b      	ldr	r1, [pc, #172]	; (7944 <l2cap_recv+0x554>)
    7896:	4833      	ldr	r0, [pc, #204]	; (7964 <l2cap_recv+0x574>)
    7898:	e5b9      	b.n	740e <l2cap_recv+0x1e>
	if (k_sem_count_get(&ch->tx.credits) + credits > UINT16_MAX) {
    789a:	6f03      	ldr	r3, [r0, #112]	; 0x70
    789c:	442b      	add	r3, r5
    789e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    78a2:	d21b      	bcs.n	78dc <l2cap_recv+0x4ec>
		k_sem_give(&chan->tx.credits);
    78a4:	f100 0668 	add.w	r6, r0, #104	; 0x68
	while (credits--) {
    78a8:	bb2d      	cbnz	r5, 78f6 <l2cap_recv+0x506>
	return net_buf_get(&ch->tx_queue, K_NO_WAIT);
    78aa:	f104 0680 	add.w	r6, r4, #128	; 0x80
	if (ch->tx_buf) {
    78ae:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
    78b2:	b331      	cbz	r1, 7902 <l2cap_recv+0x512>
		ch->tx_buf = NULL;
    78b4:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
	while ((buf = l2cap_chan_le_get_tx_buf(ch))) {
    78b8:	9106      	str	r1, [sp, #24]
    78ba:	2900      	cmp	r1, #0
    78bc:	f43f adbe 	beq.w	743c <l2cap_recv+0x4c>
		sent = l2cap_chan_le_send_sdu(ch, &buf, sent);
    78c0:	694a      	ldr	r2, [r1, #20]
    78c2:	4620      	mov	r0, r4
    78c4:	a906      	add	r1, sp, #24
    78c6:	f7ff fad5 	bl	6e74 <l2cap_chan_le_send_sdu>
		if (sent < 0) {
    78ca:	2800      	cmp	r0, #0
    78cc:	daef      	bge.n	78ae <l2cap_recv+0x4be>
			if (sent == -EAGAIN) {
    78ce:	300b      	adds	r0, #11
    78d0:	f47f adb4 	bne.w	743c <l2cap_recv+0x4c>
				ch->tx_buf = buf;
    78d4:	9b06      	ldr	r3, [sp, #24]
    78d6:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    78da:	e5af      	b.n	743c <l2cap_recv+0x4c>
		BT_ERR("Credits overflow");
    78dc:	4b16      	ldr	r3, [pc, #88]	; (7938 <l2cap_recv+0x548>)
    78de:	9301      	str	r3, [sp, #4]
    78e0:	9300      	str	r3, [sp, #0]
    78e2:	4a16      	ldr	r2, [pc, #88]	; (793c <l2cap_recv+0x54c>)
    78e4:	4b1d      	ldr	r3, [pc, #116]	; (795c <l2cap_recv+0x56c>)
    78e6:	4917      	ldr	r1, [pc, #92]	; (7944 <l2cap_recv+0x554>)
    78e8:	481f      	ldr	r0, [pc, #124]	; (7968 <l2cap_recv+0x578>)
    78ea:	f7fa fcd9 	bl	22a0 <printk>
		bt_l2cap_chan_disconnect(chan);
    78ee:	4620      	mov	r0, r4
    78f0:	f7ff fc3c 	bl	716c <bt_l2cap_chan_disconnect>
    78f4:	e5a2      	b.n	743c <l2cap_recv+0x4c>
    78f6:	4630      	mov	r0, r6
    78f8:	3d01      	subs	r5, #1
    78fa:	f01a f95b 	bl	21bb4 <_impl_k_sem_give>
    78fe:	b2ad      	uxth	r5, r5
    7900:	e7d2      	b.n	78a8 <l2cap_recv+0x4b8>
	return net_buf_get(&ch->tx_queue, K_NO_WAIT);
    7902:	4630      	mov	r0, r6
    7904:	f011 fcca 	bl	1929c <net_buf_get>
    7908:	4601      	mov	r1, r0
    790a:	e7d5      	b.n	78b8 <l2cap_recv+0x4c8>
	chan = l2cap_remove_ident(conn, ident);
    790c:	2201      	movs	r2, #1
    790e:	4621      	mov	r1, r4
    7910:	6830      	ldr	r0, [r6, #0]
    7912:	f7ff f85d 	bl	69d0 <__l2cap_lookup_ident>
    7916:	e7a3      	b.n	7860 <l2cap_recv+0x470>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    7918:	4b07      	ldr	r3, [pc, #28]	; (7938 <l2cap_recv+0x548>)
    791a:	9302      	str	r3, [sp, #8]
	switch (hdr->code) {
    791c:	9201      	str	r2, [sp, #4]
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    791e:	9300      	str	r3, [sp, #0]
    7920:	4a12      	ldr	r2, [pc, #72]	; (796c <l2cap_recv+0x57c>)
    7922:	4b13      	ldr	r3, [pc, #76]	; (7970 <l2cap_recv+0x580>)
    7924:	4907      	ldr	r1, [pc, #28]	; (7944 <l2cap_recv+0x554>)
    7926:	4813      	ldr	r0, [pc, #76]	; (7974 <l2cap_recv+0x584>)
    7928:	f7fa fcba 	bl	22a0 <printk>
		l2cap_send_reject(chan->conn, hdr->ident,
    792c:	2300      	movs	r3, #0
    792e:	7879      	ldrb	r1, [r7, #1]
    7930:	9300      	str	r3, [sp, #0]
    7932:	461a      	mov	r2, r3
    7934:	6830      	ldr	r0, [r6, #0]
    7936:	e5c7      	b.n	74c8 <l2cap_recv+0xd8>
    7938:	00023dbe 	.word	0x00023dbe
    793c:	00022d86 	.word	0x00022d86
    7940:	00024533 	.word	0x00024533
    7944:	000272e8 	.word	0x000272e8
    7948:	000248c2 	.word	0x000248c2
    794c:	000248f4 	.word	0x000248f4
    7950:	00024524 	.word	0x00024524
    7954:	0002453f 	.word	0x0002453f
    7958:	00024925 	.word	0x00024925
    795c:	0002454e 	.word	0x0002454e
    7960:	0002495a 	.word	0x0002495a
    7964:	0002498b 	.word	0x0002498b
    7968:	000249c7 	.word	0x000249c7
    796c:	00024016 	.word	0x00024016
    7970:	00024559 	.word	0x00024559
    7974:	000249e8 	.word	0x000249e8

00007978 <bt_l2cap_chan_send>:

int bt_l2cap_chan_send(struct bt_l2cap_chan *chan, struct net_buf *buf)
{
    7978:	b530      	push	{r4, r5, lr}
    797a:	b087      	sub	sp, #28
    797c:	4605      	mov	r5, r0
    797e:	9105      	str	r1, [sp, #20]
	int err;

	if (!buf) {
    7980:	b311      	cbz	r1, 79c8 <bt_l2cap_chan_send+0x50>
		return -EINVAL;
	}

	BT_DBG("chan %p buf %p len %zu", chan, buf, net_buf_frags_len(buf));

	if (!chan->conn || chan->conn->state != BT_CONN_CONNECTED) {
    7982:	6803      	ldr	r3, [r0, #0]
    7984:	b31b      	cbz	r3, 79ce <bt_l2cap_chan_send+0x56>
    7986:	7b1b      	ldrb	r3, [r3, #12]
    7988:	2b03      	cmp	r3, #3
    798a:	d120      	bne.n	79ce <bt_l2cap_chan_send+0x56>
	if (IS_ENABLED(CONFIG_BT_BREDR) &&
	    chan->conn->type == BT_CONN_TYPE_BR) {
		return bt_l2cap_br_chan_send(chan, buf);
	}

	err = l2cap_chan_le_send_sdu(BT_L2CAP_LE_CHAN(chan), &buf, 0);
    798c:	2200      	movs	r2, #0
    798e:	a905      	add	r1, sp, #20
    7990:	f7ff fa70 	bl	6e74 <l2cap_chan_le_send_sdu>
	if (err < 0) {
    7994:	1e04      	subs	r4, r0, #0
    7996:	da09      	bge.n	79ac <bt_l2cap_chan_send+0x34>
		if (err == -EAGAIN) {
    7998:	f114 0f0b 	cmn.w	r4, #11
    799c:	d109      	bne.n	79b2 <bt_l2cap_chan_send+0x3a>
			/* Queue buffer to be sent later */
			net_buf_put(&(BT_L2CAP_LE_CHAN(chan))->tx_queue, buf);
    799e:	9905      	ldr	r1, [sp, #20]
    79a0:	f105 0080 	add.w	r0, r5, #128	; 0x80
    79a4:	f011 fc97 	bl	192d6 <net_buf_put>
			return *((int *)net_buf_user_data(buf));
    79a8:	9b05      	ldr	r3, [sp, #20]
    79aa:	695c      	ldr	r4, [r3, #20]
		}
		BT_ERR("failed to send message %d", err);
	}

	return err;
}
    79ac:	4620      	mov	r0, r4
    79ae:	b007      	add	sp, #28
    79b0:	bd30      	pop	{r4, r5, pc}
		BT_ERR("failed to send message %d", err);
    79b2:	4b08      	ldr	r3, [pc, #32]	; (79d4 <bt_l2cap_chan_send+0x5c>)
    79b4:	9302      	str	r3, [sp, #8]
    79b6:	e88d 0018 	stmia.w	sp, {r3, r4}
    79ba:	4a07      	ldr	r2, [pc, #28]	; (79d8 <bt_l2cap_chan_send+0x60>)
    79bc:	4b07      	ldr	r3, [pc, #28]	; (79dc <bt_l2cap_chan_send+0x64>)
    79be:	4908      	ldr	r1, [pc, #32]	; (79e0 <bt_l2cap_chan_send+0x68>)
    79c0:	4808      	ldr	r0, [pc, #32]	; (79e4 <bt_l2cap_chan_send+0x6c>)
    79c2:	f7fa fc6d 	bl	22a0 <printk>
    79c6:	e7f1      	b.n	79ac <bt_l2cap_chan_send+0x34>
		return -EINVAL;
    79c8:	f06f 0415 	mvn.w	r4, #21
    79cc:	e7ee      	b.n	79ac <bt_l2cap_chan_send+0x34>
		return -ENOTCONN;
    79ce:	f06f 0438 	mvn.w	r4, #56	; 0x38
    79d2:	e7eb      	b.n	79ac <bt_l2cap_chan_send+0x34>
    79d4:	00023dbe 	.word	0x00023dbe
    79d8:	00022d86 	.word	0x00022d86
    79dc:	000245a9 	.word	0x000245a9
    79e0:	000272e8 	.word	0x000272e8
    79e4:	000245bc 	.word	0x000245bc

000079e8 <att_exec_write_req>:

	BT_DBG("flags 0x%02x", req->flags);

	return att_exec_write_rsp(att, req->flags);
#endif /* CONFIG_BT_ATT_PREPARE_COUNT */
}
    79e8:	2006      	movs	r0, #6
    79ea:	4770      	bx	lr

000079ec <att_op_get_type>:
		ATT_COMMAND,
		att_signed_write_cmd },
};

static att_type_t att_op_get_type(u8_t op)
{
    79ec:	b510      	push	{r4, lr}
	const struct att_handler *handler;
	int i;

	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
		if (op == handlers[i].op) {
    79ee:	4a0a      	ldr	r2, [pc, #40]	; (7a18 <att_op_get_type+0x2c>)
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    79f0:	2300      	movs	r3, #0
		if (op == handlers[i].op) {
    79f2:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
    79f6:	4284      	cmp	r4, r0
    79f8:	ea4f 01c3 	mov.w	r1, r3, lsl #3
    79fc:	d102      	bne.n	7a04 <att_op_get_type+0x18>
			return handlers[i].type;
    79fe:	440a      	add	r2, r1
    7a00:	7890      	ldrb	r0, [r2, #2]
    7a02:	bd10      	pop	{r4, pc}
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    7a04:	3301      	adds	r3, #1
    7a06:	2b1b      	cmp	r3, #27
    7a08:	d1f3      	bne.n	79f2 <att_op_get_type+0x6>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
    7a0a:	f010 0f40 	tst.w	r0, #64	; 0x40
    7a0e:	bf14      	ite	ne
    7a10:	2000      	movne	r0, #0
    7a12:	2006      	moveq	r0, #6
}
    7a14:	bd10      	pop	{r4, pc}
    7a16:	bf00      	nop
    7a18:	00024d24 	.word	0x00024d24

00007a1c <att_req_destroy>:
{
    7a1c:	b510      	push	{r4, lr}
    7a1e:	4604      	mov	r4, r0
	if (req->buf) {
    7a20:	6900      	ldr	r0, [r0, #16]
    7a22:	b108      	cbz	r0, 7a28 <att_req_destroy+0xc>
		net_buf_unref(req->buf);
    7a24:	f011 fc64 	bl	192f0 <net_buf_unref>
	if (req->destroy) {
    7a28:	68a3      	ldr	r3, [r4, #8]
    7a2a:	b10b      	cbz	r3, 7a30 <att_req_destroy+0x14>
		req->destroy(req);
    7a2c:	4620      	mov	r0, r4
    7a2e:	4798      	blx	r3
	memset(req, 0, sizeof(*req));
    7a30:	4620      	mov	r0, r4
    7a32:	2218      	movs	r2, #24
    7a34:	2100      	movs	r1, #0
}
    7a36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	memset(req, 0, sizeof(*req));
    7a3a:	f7f8 bed6 	b.w	7ea <memset>

00007a3e <att_notify>:
{
    7a3e:	b508      	push	{r3, lr}
	handle = net_buf_pull_le16(buf);
    7a40:	f101 0008 	add.w	r0, r1, #8
    7a44:	f011 fd12 	bl	1946c <net_buf_simple_pull_le16>
}
    7a48:	2000      	movs	r0, #0
    7a4a:	bd08      	pop	{r3, pc}

00007a4c <read_group_cb>:
{
    7a4c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = data->att;
    7a50:	680d      	ldr	r5, [r1, #0]
{
    7a52:	4606      	mov	r6, r0
    7a54:	460c      	mov	r4, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    7a56:	f04f 0800 	mov.w	r8, #0
    7a5a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    7a5e:	a902      	add	r1, sp, #8
    7a60:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    7a62:	682f      	ldr	r7, [r5, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    7a64:	f88d 8008 	strb.w	r8, [sp, #8]
    7a68:	f8ad 300a 	strh.w	r3, [sp, #10]
    7a6c:	f7fb fd28 	bl	34c0 <bt_uuid_cmp>
    7a70:	b198      	cbz	r0, 7a9a <read_group_cb+0x4e>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    7a72:	f642 0301 	movw	r3, #10241	; 0x2801
    7a76:	a903      	add	r1, sp, #12
    7a78:	6830      	ldr	r0, [r6, #0]
    7a7a:	f88d 800c 	strb.w	r8, [sp, #12]
    7a7e:	f8ad 300e 	strh.w	r3, [sp, #14]
    7a82:	f7fb fd1d 	bl	34c0 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    7a86:	b140      	cbz	r0, 7a9a <read_group_cb+0x4e>
		if (data->group && attr->handle > data->group->end_handle) {
    7a88:	6923      	ldr	r3, [r4, #16]
    7a8a:	b123      	cbz	r3, 7a96 <read_group_cb+0x4a>
    7a8c:	8a32      	ldrh	r2, [r6, #16]
    7a8e:	8859      	ldrh	r1, [r3, #2]
    7a90:	4291      	cmp	r1, r2
    7a92:	d200      	bcs.n	7a96 <read_group_cb+0x4a>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    7a94:	805a      	strh	r2, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    7a96:	2001      	movs	r0, #1
    7a98:	e012      	b.n	7ac0 <read_group_cb+0x74>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    7a9a:	6861      	ldr	r1, [r4, #4]
    7a9c:	6830      	ldr	r0, [r6, #0]
    7a9e:	f7fb fd0f 	bl	34c0 <bt_uuid_cmp>
    7aa2:	b110      	cbz	r0, 7aaa <read_group_cb+0x5e>
		data->group = NULL;
    7aa4:	2300      	movs	r3, #0
    7aa6:	6123      	str	r3, [r4, #16]
    7aa8:	e7f5      	b.n	7a96 <read_group_cb+0x4a>
	if (data->rsp->len &&
    7aaa:	68e3      	ldr	r3, [r4, #12]
    7aac:	68a0      	ldr	r0, [r4, #8]
    7aae:	781a      	ldrb	r2, [r3, #0]
    7ab0:	b14a      	cbz	r2, 7ac6 <read_group_cb+0x7a>
	    att->chan.tx.mtu - data->buf->len < data->rsp->len) {
    7ab2:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
    7ab6:	8981      	ldrh	r1, [r0, #12]
    7ab8:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    7aba:	4293      	cmp	r3, r2
    7abc:	da03      	bge.n	7ac6 <read_group_cb+0x7a>
		return BT_GATT_ITER_STOP;
    7abe:	2000      	movs	r0, #0
}
    7ac0:	b004      	add	sp, #16
    7ac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    7ac6:	2104      	movs	r1, #4
    7ac8:	3008      	adds	r0, #8
    7aca:	f011 fc6f 	bl	193ac <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    7ace:	8a33      	ldrh	r3, [r6, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    7ad0:	68a1      	ldr	r1, [r4, #8]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    7ad2:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    7ad4:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    7ad6:	8043      	strh	r3, [r0, #2]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    7ad8:	898a      	ldrh	r2, [r1, #12]
    7ada:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
    7ade:	6889      	ldr	r1, [r1, #8]
    7ae0:	f8d6 8004 	ldr.w	r8, [r6, #4]
    7ae4:	1a9b      	subs	r3, r3, r2
    7ae6:	2500      	movs	r5, #0
    7ae8:	440a      	add	r2, r1
    7aea:	9500      	str	r5, [sp, #0]
    7aec:	4631      	mov	r1, r6
    7aee:	b29b      	uxth	r3, r3
    7af0:	4638      	mov	r0, r7
    7af2:	47c0      	blx	r8
	if (read < 0) {
    7af4:	1e01      	subs	r1, r0, #0
    7af6:	dbe2      	blt.n	7abe <read_group_cb+0x72>
	if (!data->rsp->len) {
    7af8:	68e0      	ldr	r0, [r4, #12]
    7afa:	7802      	ldrb	r2, [r0, #0]
    7afc:	1d0b      	adds	r3, r1, #4
    7afe:	b92a      	cbnz	r2, 7b0c <read_group_cb+0xc0>
		data->rsp->len = read + sizeof(*data->group);
    7b00:	7003      	strb	r3, [r0, #0]
	net_buf_add(data->buf, read);
    7b02:	68a0      	ldr	r0, [r4, #8]
    7b04:	3008      	adds	r0, #8
    7b06:	f011 fc51 	bl	193ac <net_buf_simple_add>
    7b0a:	e7c4      	b.n	7a96 <read_group_cb+0x4a>
	} else if (data->rsp->len != read + sizeof(*data->group)) {
    7b0c:	429a      	cmp	r2, r3
    7b0e:	d0f8      	beq.n	7b02 <read_group_cb+0xb6>
		data->buf->len -= sizeof(*data->group);
    7b10:	68a2      	ldr	r2, [r4, #8]
    7b12:	8993      	ldrh	r3, [r2, #12]
    7b14:	3b04      	subs	r3, #4
    7b16:	8193      	strh	r3, [r2, #12]
    7b18:	e7d1      	b.n	7abe <read_group_cb+0x72>

00007b1a <find_info_cb>:
	if (!data->rsp) {
    7b1a:	688b      	ldr	r3, [r1, #8]
{
    7b1c:	b570      	push	{r4, r5, r6, lr}
    7b1e:	4605      	mov	r5, r0
    7b20:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    7b22:	680e      	ldr	r6, [r1, #0]
	if (!data->rsp) {
    7b24:	b963      	cbnz	r3, 7b40 <find_info_cb+0x26>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    7b26:	6848      	ldr	r0, [r1, #4]
    7b28:	2101      	movs	r1, #1
    7b2a:	3008      	adds	r0, #8
    7b2c:	f011 fc3e 	bl	193ac <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    7b30:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    7b32:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    7b34:	781b      	ldrb	r3, [r3, #0]
    7b36:	2b00      	cmp	r3, #0
    7b38:	bf0c      	ite	eq
    7b3a:	2301      	moveq	r3, #1
    7b3c:	2302      	movne	r3, #2
    7b3e:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
    7b40:	68a3      	ldr	r3, [r4, #8]
    7b42:	781b      	ldrb	r3, [r3, #0]
    7b44:	2b01      	cmp	r3, #1
    7b46:	d003      	beq.n	7b50 <find_info_cb+0x36>
    7b48:	2b02      	cmp	r3, #2
    7b4a:	d01a      	beq.n	7b82 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
    7b4c:	2000      	movs	r0, #0
}
    7b4e:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_16) {
    7b50:	682b      	ldr	r3, [r5, #0]
    7b52:	781b      	ldrb	r3, [r3, #0]
    7b54:	2b00      	cmp	r3, #0
    7b56:	d1f9      	bne.n	7b4c <find_info_cb+0x32>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
    7b58:	6860      	ldr	r0, [r4, #4]
    7b5a:	2104      	movs	r1, #4
    7b5c:	3008      	adds	r0, #8
    7b5e:	f011 fc25 	bl	193ac <net_buf_simple_add>
    7b62:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(attr->handle);
    7b64:	8a2b      	ldrh	r3, [r5, #16]
    7b66:	8003      	strh	r3, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
    7b68:	682b      	ldr	r3, [r5, #0]
    7b6a:	885b      	ldrh	r3, [r3, #2]
    7b6c:	8043      	strh	r3, [r0, #2]
		if (att->chan.tx.mtu - data->buf->len >
    7b6e:	6863      	ldr	r3, [r4, #4]
    7b70:	f8b6 0062 	ldrh.w	r0, [r6, #98]	; 0x62
    7b74:	899b      	ldrh	r3, [r3, #12]
    7b76:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
    7b78:	2804      	cmp	r0, #4
    7b7a:	bf94      	ite	ls
    7b7c:	2000      	movls	r0, #0
    7b7e:	2001      	movhi	r0, #1
    7b80:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
    7b82:	682b      	ldr	r3, [r5, #0]
    7b84:	781b      	ldrb	r3, [r3, #0]
    7b86:	2b02      	cmp	r3, #2
    7b88:	d1e0      	bne.n	7b4c <find_info_cb+0x32>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
    7b8a:	6860      	ldr	r0, [r4, #4]
    7b8c:	2112      	movs	r1, #18
    7b8e:	3008      	adds	r0, #8
    7b90:	f011 fc0c 	bl	193ac <net_buf_simple_add>
    7b94:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    7b96:	6829      	ldr	r1, [r5, #0]
		data->info128->handle = sys_cpu_to_le16(attr->handle);
    7b98:	8a2b      	ldrh	r3, [r5, #16]
    7b9a:	f820 3b02 	strh.w	r3, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    7b9e:	2210      	movs	r2, #16
    7ba0:	3101      	adds	r1, #1
    7ba2:	f7f8 fdf6 	bl	792 <memcpy>
		if (att->chan.tx.mtu - data->buf->len >
    7ba6:	6863      	ldr	r3, [r4, #4]
    7ba8:	f8b6 0062 	ldrh.w	r0, [r6, #98]	; 0x62
    7bac:	899b      	ldrh	r3, [r3, #12]
    7bae:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
    7bb0:	2812      	cmp	r0, #18
    7bb2:	e7e2      	b.n	7b7a <find_info_cb+0x60>

00007bb4 <find_type_cb>:
{
    7bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_att *att = data->att;
    7bb8:	680e      	ldr	r6, [r1, #0]
{
    7bba:	b088      	sub	sp, #32
    7bbc:	4605      	mov	r5, r0
    7bbe:	460c      	mov	r4, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    7bc0:	2700      	movs	r7, #0
    7bc2:	f642 0301 	movw	r3, #10241	; 0x2801
    7bc6:	a902      	add	r1, sp, #8
    7bc8:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    7bca:	f8d6 8000 	ldr.w	r8, [r6]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    7bce:	f88d 7008 	strb.w	r7, [sp, #8]
    7bd2:	f8ad 300a 	strh.w	r3, [sp, #10]
    7bd6:	f7fb fc73 	bl	34c0 <bt_uuid_cmp>
    7bda:	b928      	cbnz	r0, 7be8 <find_type_cb+0x34>
		data->group = NULL;
    7bdc:	2300      	movs	r3, #0
    7bde:	60a3      	str	r3, [r4, #8]
		return BT_GATT_ITER_CONTINUE;
    7be0:	2001      	movs	r0, #1
}
    7be2:	b008      	add	sp, #32
    7be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    7be8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    7bec:	a903      	add	r1, sp, #12
    7bee:	6828      	ldr	r0, [r5, #0]
    7bf0:	f88d 700c 	strb.w	r7, [sp, #12]
    7bf4:	f8ad 300e 	strh.w	r3, [sp, #14]
    7bf8:	f7fb fc62 	bl	34c0 <bt_uuid_cmp>
    7bfc:	b140      	cbz	r0, 7c10 <find_type_cb+0x5c>
		if (data->group && attr->handle > data->group->end_handle) {
    7bfe:	68a3      	ldr	r3, [r4, #8]
    7c00:	2b00      	cmp	r3, #0
    7c02:	d0ed      	beq.n	7be0 <find_type_cb+0x2c>
    7c04:	8a2a      	ldrh	r2, [r5, #16]
    7c06:	8859      	ldrh	r1, [r3, #2]
    7c08:	4291      	cmp	r1, r2
    7c0a:	d2e9      	bcs.n	7be0 <find_type_cb+0x2c>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    7c0c:	805a      	strh	r2, [r3, #2]
    7c0e:	e7e7      	b.n	7be0 <find_type_cb+0x2c>
	if (att->chan.tx.mtu - data->buf->len < sizeof(*data->group)) {
    7c10:	6862      	ldr	r2, [r4, #4]
    7c12:	f8b6 3062 	ldrh.w	r3, [r6, #98]	; 0x62
    7c16:	8992      	ldrh	r2, [r2, #12]
    7c18:	1a9b      	subs	r3, r3, r2
    7c1a:	2b03      	cmp	r3, #3
    7c1c:	d9e1      	bls.n	7be2 <find_type_cb+0x2e>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    7c1e:	2310      	movs	r3, #16
    7c20:	9000      	str	r0, [sp, #0]
    7c22:	eb0d 0203 	add.w	r2, sp, r3
    7c26:	686e      	ldr	r6, [r5, #4]
    7c28:	4629      	mov	r1, r5
    7c2a:	4640      	mov	r0, r8
    7c2c:	47b0      	blx	r6
	if (read < 0) {
    7c2e:	1e02      	subs	r2, r0, #0
    7c30:	dbd4      	blt.n	7bdc <find_type_cb+0x28>
	if (read != data->value_len || memcmp(data->value, uuid, read)) {
    7c32:	7c23      	ldrb	r3, [r4, #16]
    7c34:	429a      	cmp	r2, r3
    7c36:	d1d1      	bne.n	7bdc <find_type_cb+0x28>
    7c38:	a904      	add	r1, sp, #16
    7c3a:	68e0      	ldr	r0, [r4, #12]
    7c3c:	f7f8 fd7c 	bl	738 <memcmp>
    7c40:	2800      	cmp	r0, #0
    7c42:	d1cb      	bne.n	7bdc <find_type_cb+0x28>
	data->err = 0x00;
    7c44:	7460      	strb	r0, [r4, #17]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    7c46:	6860      	ldr	r0, [r4, #4]
    7c48:	2104      	movs	r1, #4
    7c4a:	3008      	adds	r0, #8
    7c4c:	f011 fbae 	bl	193ac <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    7c50:	8a2b      	ldrh	r3, [r5, #16]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    7c52:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    7c54:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    7c56:	8043      	strh	r3, [r0, #2]
    7c58:	e7c2      	b.n	7be0 <find_type_cb+0x2c>
	...

00007c5c <bt_att_connected>:
	bt_gatt_disconnected(ch->chan.conn);
	ch->chan.conn = NULL;
}

static void bt_att_connected(struct bt_l2cap_chan *chan)
{
    7c5c:	b510      	push	{r4, lr}

#if CONFIG_BT_ATT_PREPARE_COUNT > 0
	k_fifo_init(&att->prep_queue);
#endif

	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    7c5e:	2317      	movs	r3, #23
{
    7c60:	4604      	mov	r4, r0
	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    7c62:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
	ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    7c66:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42

	k_delayed_work_init(&att->timeout_work, att_timeout);
    7c6a:	4907      	ldr	r1, [pc, #28]	; (7c88 <bt_att_connected+0x2c>)
    7c6c:	30ac      	adds	r0, #172	; 0xac
    7c6e:	f01a facd 	bl	2220c <k_delayed_work_init>
	list->head = NULL;
    7c72:	2300      	movs	r3, #0
    7c74:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
	list->tail = NULL;
    7c78:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	sys_slist_init(&att->reqs);

	bt_gatt_connected(ch->chan.conn);
    7c7c:	6820      	ldr	r0, [r4, #0]
}
    7c7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(ch->chan.conn);
    7c82:	f001 bcd3 	b.w	962c <bt_gatt_connected>
    7c86:	bf00      	nop
    7c88:	000081dd 	.word	0x000081dd

00007c8c <check_perm>:
{
    7c8c:	b510      	push	{r4, lr}
	if ((mask & BT_GATT_PERM_READ) &&
    7c8e:	f012 0f01 	tst.w	r2, #1
    7c92:	7c8b      	ldrb	r3, [r1, #18]
    7c94:	d004      	beq.n	7ca0 <check_perm+0x14>
    7c96:	f013 0f15 	tst.w	r3, #21
    7c9a:	d018      	beq.n	7cce <check_perm+0x42>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
    7c9c:	684c      	ldr	r4, [r1, #4]
    7c9e:	b1b4      	cbz	r4, 7cce <check_perm+0x42>
	if ((mask & BT_GATT_PERM_WRITE) &&
    7ca0:	0794      	lsls	r4, r2, #30
    7ca2:	d504      	bpl.n	7cae <check_perm+0x22>
    7ca4:	f013 0f2a 	tst.w	r3, #42	; 0x2a
    7ca8:	d013      	beq.n	7cd2 <check_perm+0x46>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
    7caa:	6889      	ldr	r1, [r1, #8]
    7cac:	b189      	cbz	r1, 7cd2 <check_perm+0x46>
	mask &= attr->perm;
    7cae:	401a      	ands	r2, r3
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
    7cb0:	f012 0f30 	tst.w	r2, #48	; 0x30
    7cb4:	d002      	beq.n	7cbc <check_perm+0x30>
		if (conn->sec_level < BT_SECURITY_HIGH) {
    7cb6:	7a03      	ldrb	r3, [r0, #8]
    7cb8:	2b02      	cmp	r3, #2
    7cba:	d90c      	bls.n	7cd6 <check_perm+0x4a>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
    7cbc:	f012 020c 	ands.w	r2, r2, #12
    7cc0:	d00b      	beq.n	7cda <check_perm+0x4e>
		if (!conn->encrypt) {
    7cc2:	7a83      	ldrb	r3, [r0, #10]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
    7cc4:	2b00      	cmp	r3, #0
    7cc6:	bf14      	ite	ne
    7cc8:	2000      	movne	r0, #0
    7cca:	200f      	moveq	r0, #15
    7ccc:	bd10      	pop	{r4, pc}
		return BT_ATT_ERR_READ_NOT_PERMITTED;
    7cce:	2002      	movs	r0, #2
    7cd0:	bd10      	pop	{r4, pc}
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
    7cd2:	2003      	movs	r0, #3
    7cd4:	bd10      	pop	{r4, pc}
			return BT_ATT_ERR_AUTHENTICATION;
    7cd6:	2005      	movs	r0, #5
    7cd8:	bd10      	pop	{r4, pc}
	return 0;
    7cda:	4610      	mov	r0, r2
}
    7cdc:	bd10      	pop	{r4, pc}

00007cde <read_type_cb>:
{
    7cde:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att *att = data->att;
    7ce2:	680f      	ldr	r7, [r1, #0]
{
    7ce4:	4606      	mov	r6, r0
    7ce6:	460c      	mov	r4, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    7ce8:	6800      	ldr	r0, [r0, #0]
    7cea:	6849      	ldr	r1, [r1, #4]
	struct bt_conn *conn = att->chan.chan.conn;
    7cec:	f8d7 9000 	ldr.w	r9, [r7]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    7cf0:	f7fb fbe6 	bl	34c0 <bt_uuid_cmp>
    7cf4:	4680      	mov	r8, r0
    7cf6:	2800      	cmp	r0, #0
    7cf8:	d14e      	bne.n	7d98 <read_type_cb+0xba>
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    7cfa:	2215      	movs	r2, #21
    7cfc:	4631      	mov	r1, r6
    7cfe:	4648      	mov	r0, r9
    7d00:	f7ff ffc4 	bl	7c8c <check_perm>
    7d04:	4605      	mov	r5, r0
    7d06:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    7d08:	b148      	cbz	r0, 7d1e <read_type_cb+0x40>
		if (data->rsp->len) {
    7d0a:	68e3      	ldr	r3, [r4, #12]
    7d0c:	781d      	ldrb	r5, [r3, #0]
    7d0e:	b115      	cbz	r5, 7d16 <read_type_cb+0x38>
			data->err = 0x00;
    7d10:	f884 8014 	strb.w	r8, [r4, #20]
		return BT_GATT_ITER_STOP;
    7d14:	4645      	mov	r5, r8
}
    7d16:	4628      	mov	r0, r5
    7d18:	b003      	add	sp, #12
    7d1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(data->buf, sizeof(*data->item));
    7d1e:	68a0      	ldr	r0, [r4, #8]
    7d20:	2102      	movs	r1, #2
    7d22:	3008      	adds	r0, #8
    7d24:	f011 fb42 	bl	193ac <net_buf_simple_add>
	data->item->handle = sys_cpu_to_le16(attr->handle);
    7d28:	8a33      	ldrh	r3, [r6, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    7d2a:	68a1      	ldr	r1, [r4, #8]
	data->item = net_buf_add(data->buf, sizeof(*data->item));
    7d2c:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(attr->handle);
    7d2e:	8003      	strh	r3, [r0, #0]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    7d30:	898a      	ldrh	r2, [r1, #12]
    7d32:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
    7d36:	6889      	ldr	r1, [r1, #8]
    7d38:	f8d6 8004 	ldr.w	r8, [r6, #4]
    7d3c:	9500      	str	r5, [sp, #0]
    7d3e:	1a9b      	subs	r3, r3, r2
    7d40:	b29b      	uxth	r3, r3
    7d42:	440a      	add	r2, r1
    7d44:	4648      	mov	r0, r9
    7d46:	4631      	mov	r1, r6
    7d48:	47c0      	blx	r8
	if (read < 0) {
    7d4a:	1e01      	subs	r1, r0, #0
    7d4c:	da08      	bge.n	7d60 <read_type_cb+0x82>
	if (err < 0 && err >= -0xff) {
    7d4e:	f101 03ff 	add.w	r3, r1, #255	; 0xff
    7d52:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    7d54:	bf9a      	itte	ls
    7d56:	4249      	negls	r1, r1
    7d58:	b2c9      	uxtbls	r1, r1
	return BT_ATT_ERR_UNLIKELY;
    7d5a:	210e      	movhi	r1, #14
		data->err = err_to_att(read);
    7d5c:	7521      	strb	r1, [r4, #20]
		return BT_GATT_ITER_STOP;
    7d5e:	e7da      	b.n	7d16 <read_type_cb+0x38>
	if (!data->rsp->len) {
    7d60:	68e0      	ldr	r0, [r4, #12]
    7d62:	7802      	ldrb	r2, [r0, #0]
    7d64:	1c8b      	adds	r3, r1, #2
    7d66:	b982      	cbnz	r2, 7d8a <read_type_cb+0xac>
		data->rsp->len = read + sizeof(*data->item);
    7d68:	7003      	strb	r3, [r0, #0]
	net_buf_add(data->buf, read);
    7d6a:	68a0      	ldr	r0, [r4, #8]
    7d6c:	3008      	adds	r0, #8
    7d6e:	f011 fb1d 	bl	193ac <net_buf_simple_add>
	return att->chan.tx.mtu - data->buf->len > data->rsp->len ?
    7d72:	68a3      	ldr	r3, [r4, #8]
    7d74:	f8b7 5062 	ldrh.w	r5, [r7, #98]	; 0x62
    7d78:	899b      	ldrh	r3, [r3, #12]
    7d7a:	1aed      	subs	r5, r5, r3
    7d7c:	68e3      	ldr	r3, [r4, #12]
    7d7e:	781b      	ldrb	r3, [r3, #0]
	       BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    7d80:	429d      	cmp	r5, r3
    7d82:	bfd4      	ite	le
    7d84:	2500      	movle	r5, #0
    7d86:	2501      	movgt	r5, #1
    7d88:	e7c5      	b.n	7d16 <read_type_cb+0x38>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
    7d8a:	429a      	cmp	r2, r3
    7d8c:	d0ed      	beq.n	7d6a <read_type_cb+0x8c>
		data->buf->len -= sizeof(*data->item);
    7d8e:	68a2      	ldr	r2, [r4, #8]
    7d90:	8993      	ldrh	r3, [r2, #12]
    7d92:	3b02      	subs	r3, #2
    7d94:	8193      	strh	r3, [r2, #12]
		return BT_GATT_ITER_STOP;
    7d96:	e7be      	b.n	7d16 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
    7d98:	2501      	movs	r5, #1
    7d9a:	e7bc      	b.n	7d16 <read_type_cb+0x38>

00007d9c <att_cb.isra.4>:
static bt_conn_tx_cb_t att_cb(struct net_buf *buf)
    7d9c:	b508      	push	{r3, lr}
	switch (att_op_get_type(buf->data[0])) {
    7d9e:	7800      	ldrb	r0, [r0, #0]
    7da0:	f7ff fe24 	bl	79ec <att_op_get_type>
    7da4:	3801      	subs	r0, #1
    7da6:	b2c0      	uxtb	r0, r0
    7da8:	2804      	cmp	r0, #4
    7daa:	bf9a      	itte	ls
    7dac:	4b02      	ldrls	r3, [pc, #8]	; (7db8 <att_cb.isra.4+0x1c>)
    7dae:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
    7db2:	4802      	ldrhi	r0, [pc, #8]	; (7dbc <att_cb.isra.4+0x20>)
}
    7db4:	bd08      	pop	{r3, pc}
    7db6:	bf00      	nop
    7db8:	00024a38 	.word	0x00024a38
    7dbc:	00008221 	.word	0x00008221

00007dc0 <uuid_create>:
{
    7dc0:	b510      	push	{r4, lr}
	switch (buf->len) {
    7dc2:	898a      	ldrh	r2, [r1, #12]
    7dc4:	2a02      	cmp	r2, #2
{
    7dc6:	4604      	mov	r4, r0
	switch (buf->len) {
    7dc8:	d003      	beq.n	7dd2 <uuid_create+0x12>
    7dca:	2a10      	cmp	r2, #16
    7dcc:	d00a      	beq.n	7de4 <uuid_create+0x24>
	return false;
    7dce:	2000      	movs	r0, #0
}
    7dd0:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_16;
    7dd2:	2300      	movs	r3, #0
    7dd4:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = net_buf_pull_le16(buf);
    7dd6:	f101 0008 	add.w	r0, r1, #8
    7dda:	f011 fb47 	bl	1946c <net_buf_simple_pull_le16>
    7dde:	8060      	strh	r0, [r4, #2]
		return true;
    7de0:	2001      	movs	r0, #1
    7de2:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_128;
    7de4:	2302      	movs	r3, #2
    7de6:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(BT_UUID_128(uuid)->val, buf->data, buf->len);
    7dea:	6889      	ldr	r1, [r1, #8]
    7dec:	f7f8 fcd1 	bl	792 <memcpy>
    7df0:	e7f6      	b.n	7de0 <uuid_create+0x20>
	...

00007df4 <att_req_sent>:
{
    7df4:	b510      	push	{r4, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    7df6:	2104      	movs	r1, #4
    7df8:	f7ff f8b5 	bl	6f66 <bt_l2cap_le_lookup_tx_cid>
    7dfc:	4604      	mov	r4, r0
    7dfe:	30d4      	adds	r0, #212	; 0xd4
    7e00:	f019 fed8 	bl	21bb4 <_impl_k_sem_give>
	if (att->req) {
    7e04:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    7e08:	b143      	cbz	r3, 7e1c <att_req_sent+0x28>
    7e0a:	f104 01ac 	add.w	r1, r4, #172	; 0xac
    7e0e:	f247 5230 	movw	r2, #30000	; 0x7530
    7e12:	4803      	ldr	r0, [pc, #12]	; (7e20 <att_req_sent+0x2c>)
}
    7e14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7e18:	f01a ba70 	b.w	222fc <k_delayed_work_submit_to_queue>
    7e1c:	bd10      	pop	{r4, pc}
    7e1e:	bf00      	nop
    7e20:	20003340 	.word	0x20003340

00007e24 <bt_att_accept>:
	att->req->buf = NULL;
}
#endif /* CONFIG_BT_SMP */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    7e24:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_req_pool); i++) {
		struct bt_att *att = &bt_req_pool[i];

		if (att->chan.chan.conn) {
    7e26:	4d14      	ldr	r5, [pc, #80]	; (7e78 <bt_att_accept+0x54>)
    7e28:	682c      	ldr	r4, [r5, #0]
{
    7e2a:	460e      	mov	r6, r1
		if (att->chan.chan.conn) {
    7e2c:	b9bc      	cbnz	r4, 7e5e <bt_att_accept+0x3a>
			continue;
		}

		att->chan.chan.ops = &ops;
    7e2e:	4b13      	ldr	r3, [pc, #76]	; (7e7c <bt_att_accept+0x58>)
    7e30:	606b      	str	r3, [r5, #4]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    7e32:	f105 039c 	add.w	r3, r5, #156	; 0x9c
    7e36:	f3bf 8f5b 	dmb	ish
    7e3a:	e853 2f00 	ldrex	r2, [r3]
    7e3e:	e843 4100 	strex	r1, r4, [r3]
    7e42:	2900      	cmp	r1, #0
    7e44:	d1f9      	bne.n	7e3a <bt_att_accept+0x16>
    7e46:	f3bf 8f5b 	dmb	ish
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    7e4a:	2202      	movs	r2, #2
    7e4c:	f105 00d4 	add.w	r0, r5, #212	; 0xd4
    7e50:	4611      	mov	r1, r2
    7e52:	f019 fea5 	bl	21ba0 <_impl_k_sem_init>
		atomic_set(att->flags, 0);
		k_sem_init(&att->tx_sem, CONFIG_BT_ATT_TX_MAX,
			   CONFIG_BT_ATT_TX_MAX);

		*chan = &att->chan.chan;
    7e56:	6035      	str	r5, [r6, #0]

		return 0;
    7e58:	4620      	mov	r0, r4
	}

	BT_ERR("No available ATT context for conn %p", conn);

	return -ENOMEM;
}
    7e5a:	b004      	add	sp, #16
    7e5c:	bd70      	pop	{r4, r5, r6, pc}
	BT_ERR("No available ATT context for conn %p", conn);
    7e5e:	4b08      	ldr	r3, [pc, #32]	; (7e80 <bt_att_accept+0x5c>)
    7e60:	9302      	str	r3, [sp, #8]
    7e62:	9001      	str	r0, [sp, #4]
    7e64:	9300      	str	r3, [sp, #0]
    7e66:	4a07      	ldr	r2, [pc, #28]	; (7e84 <bt_att_accept+0x60>)
    7e68:	4b07      	ldr	r3, [pc, #28]	; (7e88 <bt_att_accept+0x64>)
    7e6a:	4908      	ldr	r1, [pc, #32]	; (7e8c <bt_att_accept+0x68>)
    7e6c:	4808      	ldr	r0, [pc, #32]	; (7e90 <bt_att_accept+0x6c>)
    7e6e:	f7fa fa17 	bl	22a0 <printk>
	return -ENOMEM;
    7e72:	f06f 000b 	mvn.w	r0, #11
    7e76:	e7f0      	b.n	7e5a <bt_att_accept+0x36>
    7e78:	200005e8 	.word	0x200005e8
    7e7c:	20009e4c 	.word	0x20009e4c
    7e80:	00023dbe 	.word	0x00023dbe
    7e84:	00022d86 	.word	0x00022d86
    7e88:	00024aca 	.word	0x00024aca
    7e8c:	000272e8 	.word	0x000272e8
    7e90:	00024bda 	.word	0x00024bda

00007e94 <att_is_connected>:
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    7e94:	6803      	ldr	r3, [r0, #0]
    7e96:	7b1b      	ldrb	r3, [r3, #12]
    7e98:	2b03      	cmp	r3, #3
    7e9a:	d10a      	bne.n	7eb2 <att_is_connected+0x1e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7e9c:	f3bf 8f5b 	dmb	ish
    7ea0:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
    7ea4:	f3bf 8f5b 	dmb	ish
    7ea8:	ea6f 00a0 	mvn.w	r0, r0, asr #2
    7eac:	f000 0001 	and.w	r0, r0, #1
    7eb0:	4770      	bx	lr
    7eb2:	2001      	movs	r0, #1
}
    7eb4:	4770      	bx	lr

00007eb6 <att_prepare_write_req>:
    7eb6:	2006      	movs	r0, #6
    7eb8:	4770      	bx	lr
	...

00007ebc <att_send_req>:
{
    7ebc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    7ebe:	4605      	mov	r5, r0
	k_sem_take(&att->tx_sem, K_FOREVER);
    7ec0:	f100 06d4 	add.w	r6, r0, #212	; 0xd4
	att->req = req;
    7ec4:	f8c5 10a0 	str.w	r1, [r5, #160]	; 0xa0
{
    7ec8:	460c      	mov	r4, r1
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    7eca:	4630      	mov	r0, r6
    7ecc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    7ed0:	f019 fed0 	bl	21c74 <_impl_k_sem_take>
	if (!att_is_connected(att)) {
    7ed4:	4628      	mov	r0, r5
    7ed6:	f7ff ffdd 	bl	7e94 <att_is_connected>
    7eda:	b978      	cbnz	r0, 7efc <att_send_req+0x40>
		BT_WARN("Disconnected");
    7edc:	4b14      	ldr	r3, [pc, #80]	; (7f30 <att_send_req+0x74>)
    7ede:	9301      	str	r3, [sp, #4]
    7ee0:	9300      	str	r3, [sp, #0]
    7ee2:	4a14      	ldr	r2, [pc, #80]	; (7f34 <att_send_req+0x78>)
    7ee4:	4b14      	ldr	r3, [pc, #80]	; (7f38 <att_send_req+0x7c>)
    7ee6:	4915      	ldr	r1, [pc, #84]	; (7f3c <att_send_req+0x80>)
    7ee8:	4815      	ldr	r0, [pc, #84]	; (7f40 <att_send_req+0x84>)
    7eea:	f7fa f9d9 	bl	22a0 <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    7eee:	4630      	mov	r0, r6
    7ef0:	f019 fe60 	bl	21bb4 <_impl_k_sem_give>
		return -ENOTCONN;
    7ef4:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
    7ef8:	b002      	add	sp, #8
    7efa:	bd70      	pop	{r4, r5, r6, pc}
	net_buf_simple_save(&req->buf->b, &req->state);
    7efc:	6926      	ldr	r6, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
    7efe:	f106 0008 	add.w	r0, r6, #8
    7f02:	f011 fabb 	bl	1947c <net_buf_simple_headroom>
	state->len = buf->len;
    7f06:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
    7f08:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
    7f0a:	81e3      	strh	r3, [r4, #14]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    7f0c:	6920      	ldr	r0, [r4, #16]
    7f0e:	682d      	ldr	r5, [r5, #0]
    7f10:	f011 fa1c 	bl	1934c <net_buf_ref>
    7f14:	6923      	ldr	r3, [r4, #16]
    7f16:	4606      	mov	r6, r0
    7f18:	6898      	ldr	r0, [r3, #8]
    7f1a:	f7ff ff3f 	bl	7d9c <att_cb.isra.4>
    7f1e:	4632      	mov	r2, r6
    7f20:	4603      	mov	r3, r0
    7f22:	2104      	movs	r1, #4
    7f24:	4628      	mov	r0, r5
    7f26:	f7fe fea3 	bl	6c70 <bt_l2cap_send_cb>
	return 0;
    7f2a:	2000      	movs	r0, #0
    7f2c:	e7e4      	b.n	7ef8 <att_send_req+0x3c>
    7f2e:	bf00      	nop
    7f30:	00023dbe 	.word	0x00023dbe
    7f34:	00024016 	.word	0x00024016
    7f38:	00024a4c 	.word	0x00024a4c
    7f3c:	000272e8 	.word	0x000272e8
    7f40:	00024b7c 	.word	0x00024b7c

00007f44 <att_handle_rsp>:
{
    7f44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    7f48:	4604      	mov	r4, r0
	k_delayed_work_cancel(&att->timeout_work);
    7f4a:	30ac      	adds	r0, #172	; 0xac
{
    7f4c:	461e      	mov	r6, r3
    7f4e:	460f      	mov	r7, r1
    7f50:	4690      	mov	r8, r2
	k_delayed_work_cancel(&att->timeout_work);
    7f52:	f01a f979 	bl	22248 <k_delayed_work_cancel>
	if (!att->req) {
    7f56:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    7f5a:	b9db      	cbnz	r3, 7f94 <att_handle_rsp+0x50>
		BT_WARN("No pending ATT request");
    7f5c:	4b1c      	ldr	r3, [pc, #112]	; (7fd0 <att_handle_rsp+0x8c>)
    7f5e:	9301      	str	r3, [sp, #4]
    7f60:	9300      	str	r3, [sp, #0]
    7f62:	4a1c      	ldr	r2, [pc, #112]	; (7fd4 <att_handle_rsp+0x90>)
    7f64:	4b1c      	ldr	r3, [pc, #112]	; (7fd8 <att_handle_rsp+0x94>)
    7f66:	491d      	ldr	r1, [pc, #116]	; (7fdc <att_handle_rsp+0x98>)
    7f68:	481d      	ldr	r0, [pc, #116]	; (7fe0 <att_handle_rsp+0x9c>)
    7f6a:	f7fa f999 	bl	22a0 <printk>
    7f6e:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    7f72:	b159      	cbz	r1, 7f8c <att_handle_rsp+0x48>
	if (list->tail == node) {
    7f74:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
	list->head = node->next;
    7f78:	680b      	ldr	r3, [r1, #0]
    7f7a:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
	if (list->tail == node) {
    7f7e:	4291      	cmp	r1, r2
		list->tail = list->head;
    7f80:	bf08      	it	eq
    7f82:	f8c4 30a8 	streq.w	r3, [r4, #168]	; 0xa8
	att_send_req(att, ATT_REQ(node));
    7f86:	4620      	mov	r0, r4
    7f88:	f7ff ff98 	bl	7ebc <att_send_req>
}
    7f8c:	2000      	movs	r0, #0
    7f8e:	b003      	add	sp, #12
    7f90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (att->req->buf) {
    7f94:	6918      	ldr	r0, [r3, #16]
    7f96:	b128      	cbz	r0, 7fa4 <att_handle_rsp+0x60>
		net_buf_unref(att->req->buf);
    7f98:	f011 f9aa 	bl	192f0 <net_buf_unref>
		att->req->buf = NULL;
    7f9c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    7fa0:	2200      	movs	r2, #0
    7fa2:	611a      	str	r2, [r3, #16]
	func = att->req->func;
    7fa4:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	func(att->chan.chan.conn, err, pdu, len, att->req);
    7fa8:	6820      	ldr	r0, [r4, #0]
	func = att->req->func;
    7faa:	f8d3 9004 	ldr.w	r9, [r3, #4]
	att->req->func = NULL;
    7fae:	2500      	movs	r5, #0
    7fb0:	605d      	str	r5, [r3, #4]
	func(att->chan.chan.conn, err, pdu, len, att->req);
    7fb2:	463a      	mov	r2, r7
    7fb4:	9300      	str	r3, [sp, #0]
    7fb6:	4631      	mov	r1, r6
    7fb8:	4643      	mov	r3, r8
    7fba:	47c8      	blx	r9
	if (!att->req->func) {
    7fbc:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    7fc0:	6843      	ldr	r3, [r0, #4]
    7fc2:	b90b      	cbnz	r3, 7fc8 <att_handle_rsp+0x84>
		att_req_destroy(att->req);
    7fc4:	f7ff fd2a 	bl	7a1c <att_req_destroy>
	att->req = NULL;
    7fc8:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
    7fcc:	e7cf      	b.n	7f6e <att_handle_rsp+0x2a>
    7fce:	bf00      	nop
    7fd0:	00023dbe 	.word	0x00023dbe
    7fd4:	00024016 	.word	0x00024016
    7fd8:	00024a59 	.word	0x00024a59
    7fdc:	000272e8 	.word	0x000272e8
    7fe0:	00024b55 	.word	0x00024b55

00007fe4 <att_confirm>:
	return att_handle_rsp(att, buf->data, buf->len, 0);
    7fe4:	898a      	ldrh	r2, [r1, #12]
    7fe6:	6889      	ldr	r1, [r1, #8]
    7fe8:	2300      	movs	r3, #0
    7fea:	f7ff bfab 	b.w	7f44 <att_handle_rsp>

00007fee <att_handle_exec_write_rsp>:
    7fee:	f7ff bff9 	b.w	7fe4 <att_confirm>

00007ff2 <att_handle_prepare_write_rsp>:
    7ff2:	f7ff bff7 	b.w	7fe4 <att_confirm>

00007ff6 <att_handle_write_rsp>:
    7ff6:	f7ff bff5 	b.w	7fe4 <att_confirm>

00007ffa <att_handle_read_mult_rsp>:
    7ffa:	f7ff bff3 	b.w	7fe4 <att_confirm>

00007ffe <att_handle_read_blob_rsp>:
    7ffe:	f7ff bff1 	b.w	7fe4 <att_confirm>

00008002 <att_handle_read_rsp>:
    8002:	f7ff bfef 	b.w	7fe4 <att_confirm>

00008006 <att_handle_read_type_rsp>:
    8006:	f7ff bfed 	b.w	7fe4 <att_confirm>

0000800a <att_handle_find_type_rsp>:
    800a:	f7ff bfeb 	b.w	7fe4 <att_confirm>

0000800e <att_handle_find_info_rsp>:
    800e:	f7ff bfe9 	b.w	7fe4 <att_confirm>

00008012 <att_mtu_rsp>:
{
    8012:	b410      	push	{r4}
    8014:	460a      	mov	r2, r1
	if (!att) {
    8016:	b198      	cbz	r0, 8040 <att_mtu_rsp+0x2e>
	rsp = (void *)buf->data;
    8018:	6889      	ldr	r1, [r1, #8]
	mtu = sys_le16_to_cpu(rsp->mtu);
    801a:	880b      	ldrh	r3, [r1, #0]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
    801c:	2b16      	cmp	r3, #22
    801e:	d805      	bhi.n	802c <att_mtu_rsp+0x1a>
		return att_handle_rsp(att, NULL, 0, BT_ATT_ERR_INVALID_PDU);
    8020:	2200      	movs	r2, #0
    8022:	2304      	movs	r3, #4
    8024:	4611      	mov	r1, r2
}
    8026:	bc10      	pop	{r4}
	return att_handle_rsp(att, rsp, buf->len, 0);
    8028:	f7ff bf8c 	b.w	7f44 <att_handle_rsp>
	att->chan.rx.mtu = min(mtu, BT_ATT_MTU);
    802c:	2b41      	cmp	r3, #65	; 0x41
    802e:	bf28      	it	cs
    8030:	2341      	movcs	r3, #65	; 0x41
    8032:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
	att->chan.tx.mtu = att->chan.rx.mtu;
    8036:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
	return att_handle_rsp(att, rsp, buf->len, 0);
    803a:	8992      	ldrh	r2, [r2, #12]
    803c:	2300      	movs	r3, #0
    803e:	e7f2      	b.n	8026 <att_mtu_rsp+0x14>
}
    8040:	bc10      	pop	{r4}
    8042:	4770      	bx	lr

00008044 <bt_att_encrypt_change>:
{
    8044:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8046:	4604      	mov	r4, r0
	if (hci_status) {
    8048:	460d      	mov	r5, r1
    804a:	b139      	cbz	r1, 805c <bt_att_encrypt_change+0x18>
		att_handle_rsp(att, NULL, 0, BT_ATT_ERR_AUTHENTICATION);
    804c:	2200      	movs	r2, #0
    804e:	2305      	movs	r3, #5
    8050:	4611      	mov	r1, r2
}
    8052:	b003      	add	sp, #12
    8054:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		att_handle_rsp(att, NULL, 0, BT_ATT_ERR_AUTHENTICATION);
    8058:	f7ff bf74 	b.w	7f44 <att_handle_rsp>
	struct bt_conn *conn = ch->chan.conn;
    805c:	6806      	ldr	r6, [r0, #0]
	if (conn->sec_level == BT_SECURITY_LOW) {
    805e:	7a33      	ldrb	r3, [r6, #8]
    8060:	2b01      	cmp	r3, #1
    8062:	d02d      	beq.n	80c0 <bt_att_encrypt_change+0x7c>
	if (!att->req || !att->req->retrying) {
    8064:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    8068:	b353      	cbz	r3, 80c0 <bt_att_encrypt_change+0x7c>
    806a:	7d1b      	ldrb	r3, [r3, #20]
    806c:	b343      	cbz	r3, 80c0 <bt_att_encrypt_change+0x7c>
	k_sem_take(&att->tx_sem, K_FOREVER);
    806e:	f100 07d4 	add.w	r7, r0, #212	; 0xd4
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    8072:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8076:	4638      	mov	r0, r7
    8078:	f019 fdfc 	bl	21c74 <_impl_k_sem_take>
	if (!att_is_connected(att)) {
    807c:	4620      	mov	r0, r4
    807e:	f7ff ff09 	bl	7e94 <att_is_connected>
    8082:	b970      	cbnz	r0, 80a2 <bt_att_encrypt_change+0x5e>
		BT_WARN("Disconnected");
    8084:	4b0f      	ldr	r3, [pc, #60]	; (80c4 <bt_att_encrypt_change+0x80>)
    8086:	9301      	str	r3, [sp, #4]
    8088:	9300      	str	r3, [sp, #0]
    808a:	4a0f      	ldr	r2, [pc, #60]	; (80c8 <bt_att_encrypt_change+0x84>)
    808c:	4b0f      	ldr	r3, [pc, #60]	; (80cc <bt_att_encrypt_change+0x88>)
    808e:	4910      	ldr	r1, [pc, #64]	; (80d0 <bt_att_encrypt_change+0x8c>)
    8090:	4810      	ldr	r0, [pc, #64]	; (80d4 <bt_att_encrypt_change+0x90>)
    8092:	f7fa f905 	bl	22a0 <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    8096:	4638      	mov	r0, r7
}
    8098:	b003      	add	sp, #12
    809a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    809e:	f019 bd89 	b.w	21bb4 <_impl_k_sem_give>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, att->req->buf,
    80a2:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    80a6:	691f      	ldr	r7, [r3, #16]
    80a8:	68b8      	ldr	r0, [r7, #8]
    80aa:	f7ff fe77 	bl	7d9c <att_cb.isra.4>
    80ae:	463a      	mov	r2, r7
    80b0:	4603      	mov	r3, r0
    80b2:	2104      	movs	r1, #4
    80b4:	4630      	mov	r0, r6
    80b6:	f7fe fddb 	bl	6c70 <bt_l2cap_send_cb>
	att->req->buf = NULL;
    80ba:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    80be:	611d      	str	r5, [r3, #16]
}
    80c0:	b003      	add	sp, #12
    80c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    80c4:	00023dbe 	.word	0x00023dbe
    80c8:	00024016 	.word	0x00024016
    80cc:	00024ab4 	.word	0x00024ab4
    80d0:	000272e8 	.word	0x000272e8
    80d4:	00024b7c 	.word	0x00024b7c

000080d8 <att_error_rsp>:
{
    80d8:	b570      	push	{r4, r5, r6, lr}
    80da:	4604      	mov	r4, r0
	rsp = (void *)buf->data;
    80dc:	6888      	ldr	r0, [r1, #8]
	if (!att->req) {
    80de:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
    80e2:	b332      	cbz	r2, 8132 <att_error_rsp+0x5a>
	if (att->req->buf) {
    80e4:	6913      	ldr	r3, [r2, #16]
    80e6:	b12b      	cbz	r3, 80f4 <att_error_rsp+0x1c>
	buf->data = buf->__buf + state->offset;
    80e8:	8995      	ldrh	r5, [r2, #12]
    80ea:	6919      	ldr	r1, [r3, #16]
    80ec:	4429      	add	r1, r5
    80ee:	6099      	str	r1, [r3, #8]
	buf->len = state->len;
    80f0:	89d1      	ldrh	r1, [r2, #14]
    80f2:	8199      	strh	r1, [r3, #12]
	if (att->req->retrying) {
    80f4:	7d13      	ldrb	r3, [r2, #20]
	err = rsp->error;
    80f6:	78c5      	ldrb	r5, [r0, #3]
	if (att->req->retrying) {
    80f8:	b9e3      	cbnz	r3, 8134 <att_error_rsp+0x5c>
	switch (err) {
    80fa:	2d05      	cmp	r5, #5
	if (!att_change_security(att->chan.chan.conn, err)) {
    80fc:	6820      	ldr	r0, [r4, #0]
	switch (err) {
    80fe:	d006      	beq.n	810e <att_error_rsp+0x36>
    8100:	2d0f      	cmp	r5, #15
    8102:	d117      	bne.n	8134 <att_error_rsp+0x5c>
		if (conn->sec_level >= BT_SECURITY_MEDIUM)
    8104:	7a03      	ldrb	r3, [r0, #8]
    8106:	2b01      	cmp	r3, #1
    8108:	d814      	bhi.n	8134 <att_error_rsp+0x5c>
		sec = BT_SECURITY_MEDIUM;
    810a:	2102      	movs	r1, #2
    810c:	e007      	b.n	811e <att_error_rsp+0x46>
		if (conn->sec_level < BT_SECURITY_MEDIUM) {
    810e:	7a03      	ldrb	r3, [r0, #8]
    8110:	2b01      	cmp	r3, #1
    8112:	d9fa      	bls.n	810a <att_error_rsp+0x32>
		} else if (conn->sec_level < BT_SECURITY_HIGH) {
    8114:	2b02      	cmp	r3, #2
    8116:	d00a      	beq.n	812e <att_error_rsp+0x56>
		} else if (conn->sec_level < BT_SECURITY_FIPS) {
    8118:	2b03      	cmp	r3, #3
    811a:	d10b      	bne.n	8134 <att_error_rsp+0x5c>
			sec = BT_SECURITY_FIPS;
    811c:	2104      	movs	r1, #4
	return bt_conn_security(conn, sec);
    811e:	f7fd fe15 	bl	5d4c <bt_conn_security>
	if (!att_change_security(att->chan.chan.conn, err)) {
    8122:	b938      	cbnz	r0, 8134 <att_error_rsp+0x5c>
		att->req->retrying = true;
    8124:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    8128:	2201      	movs	r2, #1
    812a:	751a      	strb	r2, [r3, #20]
		return 0;
    812c:	bd70      	pop	{r4, r5, r6, pc}
			sec = BT_SECURITY_HIGH;
    812e:	2103      	movs	r1, #3
    8130:	e7f5      	b.n	811e <att_error_rsp+0x46>
		err = BT_ATT_ERR_UNLIKELY;
    8132:	250e      	movs	r5, #14
	return att_handle_rsp(att, NULL, 0, err);
    8134:	2200      	movs	r2, #0
    8136:	462b      	mov	r3, r5
    8138:	4620      	mov	r0, r4
    813a:	4611      	mov	r1, r2
}
    813c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return att_handle_rsp(att, NULL, 0, err);
    8140:	f7ff bf00 	b.w	7f44 <att_handle_rsp>

00008144 <att_reset>:
{
    8144:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    8146:	f100 039c 	add.w	r3, r0, #156	; 0x9c
    814a:	4605      	mov	r5, r0
    814c:	f3bf 8f5b 	dmb	ish
    8150:	e853 2f00 	ldrex	r2, [r3]
    8154:	f042 0204 	orr.w	r2, r2, #4
    8158:	e843 2100 	strex	r1, r2, [r3]
    815c:	2900      	cmp	r1, #0
    815e:	d1f7      	bne.n	8150 <att_reset+0xc>
    8160:	f3bf 8f5b 	dmb	ish
		k_sem_give(&att->tx_sem);
    8164:	f105 04d4 	add.w	r4, r5, #212	; 0xd4
    8168:	4620      	mov	r0, r4
    816a:	f019 fd23 	bl	21bb4 <_impl_k_sem_give>
    816e:	4620      	mov	r0, r4
    8170:	f019 fd20 	bl	21bb4 <_impl_k_sem_give>
    8174:	f8d5 40a4 	ldr.w	r4, [r5, #164]	; 0xa4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    8178:	b98c      	cbnz	r4, 819e <att_reset+0x5a>
	if (!att->req) {
    817a:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	list->head = NULL;
    817e:	2200      	movs	r2, #0
    8180:	f8c5 20a4 	str.w	r2, [r5, #164]	; 0xa4
	list->tail = NULL;
    8184:	f8c5 20a8 	str.w	r2, [r5, #168]	; 0xa8
    8188:	b90b      	cbnz	r3, 818e <att_reset+0x4a>
}
    818a:	b003      	add	sp, #12
    818c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
    818e:	230e      	movs	r3, #14
    8190:	4611      	mov	r1, r2
    8192:	4628      	mov	r0, r5
}
    8194:	b003      	add	sp, #12
    8196:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
    819a:	f7ff bed3 	b.w	7f44 <att_handle_rsp>
	return node->next;
    819e:	6826      	ldr	r6, [r4, #0]
		if (req->func) {
    81a0:	6867      	ldr	r7, [r4, #4]
    81a2:	b12f      	cbz	r7, 81b0 <att_reset+0x6c>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0, req);
    81a4:	2300      	movs	r3, #0
    81a6:	9400      	str	r4, [sp, #0]
    81a8:	461a      	mov	r2, r3
    81aa:	210e      	movs	r1, #14
    81ac:	4618      	mov	r0, r3
    81ae:	47b8      	blx	r7
		att_req_destroy(req);
    81b0:	4620      	mov	r0, r4
    81b2:	f7ff fc33 	bl	7a1c <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    81b6:	2e00      	cmp	r6, #0
    81b8:	d0df      	beq.n	817a <att_reset+0x36>
    81ba:	4634      	mov	r4, r6
    81bc:	6836      	ldr	r6, [r6, #0]
    81be:	e7ef      	b.n	81a0 <att_reset+0x5c>

000081c0 <bt_att_disconnected>:
{
    81c0:	b510      	push	{r4, lr}
    81c2:	4604      	mov	r4, r0
	att_reset(att);
    81c4:	f7ff ffbe 	bl	8144 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    81c8:	6820      	ldr	r0, [r4, #0]
    81ca:	f001 fa39 	bl	9640 <bt_gatt_disconnected>
	memset(att, 0, sizeof(*att));
    81ce:	4620      	mov	r0, r4
    81d0:	22ec      	movs	r2, #236	; 0xec
    81d2:	2100      	movs	r1, #0
}
    81d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	memset(att, 0, sizeof(*att));
    81d8:	f7f8 bb07 	b.w	7ea <memset>

000081dc <att_timeout>:
{
    81dc:	b513      	push	{r0, r1, r4, lr}
	BT_ERR("ATT Timeout");
    81de:	4b0b      	ldr	r3, [pc, #44]	; (820c <att_timeout+0x30>)
    81e0:	4a0b      	ldr	r2, [pc, #44]	; (8210 <att_timeout+0x34>)
    81e2:	490c      	ldr	r1, [pc, #48]	; (8214 <att_timeout+0x38>)
    81e4:	9301      	str	r3, [sp, #4]
{
    81e6:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
    81e8:	9300      	str	r3, [sp, #0]
    81ea:	480b      	ldr	r0, [pc, #44]	; (8218 <att_timeout+0x3c>)
    81ec:	4b0b      	ldr	r3, [pc, #44]	; (821c <att_timeout+0x40>)
    81ee:	f7fa f857 	bl	22a0 <printk>
	att_reset(att);
    81f2:	f1a4 00ac 	sub.w	r0, r4, #172	; 0xac
    81f6:	f7ff ffa5 	bl	8144 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    81fa:	f854 0cac 	ldr.w	r0, [r4, #-172]
    81fe:	f001 fa1f 	bl	9640 <bt_gatt_disconnected>
	ch->chan.conn = NULL;
    8202:	2300      	movs	r3, #0
    8204:	f844 3cac 	str.w	r3, [r4, #-172]
}
    8208:	b002      	add	sp, #8
    820a:	bd10      	pop	{r4, pc}
    820c:	00023dbe 	.word	0x00023dbe
    8210:	00022d86 	.word	0x00022d86
    8214:	000272e8 	.word	0x000272e8
    8218:	00024bbe 	.word	0x00024bbe
    821c:	00024aa8 	.word	0x00024aa8

00008220 <att_pdu_sent>:
{
    8220:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    8222:	2104      	movs	r1, #4
    8224:	f7fe fe9f 	bl	6f66 <bt_l2cap_le_lookup_tx_cid>
}
    8228:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    822c:	30d4      	adds	r0, #212	; 0xd4
    822e:	f019 bcc1 	b.w	21bb4 <_impl_k_sem_give>

00008232 <att_cfm_sent>:
{
    8232:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    8234:	2104      	movs	r1, #4
    8236:	f7fe fe96 	bl	6f66 <bt_l2cap_le_lookup_tx_cid>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    823a:	f3bf 8f5b 	dmb	ish
    823e:	f100 039c 	add.w	r3, r0, #156	; 0x9c
    8242:	e853 2f00 	ldrex	r2, [r3]
    8246:	f022 0202 	bic.w	r2, r2, #2
    824a:	e843 2100 	strex	r1, r2, [r3]
    824e:	2900      	cmp	r1, #0
    8250:	d1f7      	bne.n	8242 <att_cfm_sent+0x10>
    8252:	f3bf 8f5b 	dmb	ish
    8256:	30d4      	adds	r0, #212	; 0xd4
}
    8258:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    825c:	f019 bcaa 	b.w	21bb4 <_impl_k_sem_give>

00008260 <att_rsp_sent>:
{
    8260:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    8262:	2104      	movs	r1, #4
    8264:	f7fe fe7f 	bl	6f66 <bt_l2cap_le_lookup_tx_cid>
    8268:	f3bf 8f5b 	dmb	ish
    826c:	f100 039c 	add.w	r3, r0, #156	; 0x9c
    8270:	e853 2f00 	ldrex	r2, [r3]
    8274:	f022 0201 	bic.w	r2, r2, #1
    8278:	e843 2100 	strex	r1, r2, [r3]
    827c:	2900      	cmp	r1, #0
    827e:	d1f7      	bne.n	8270 <att_rsp_sent+0x10>
    8280:	f3bf 8f5b 	dmb	ish
    8284:	30d4      	adds	r0, #212	; 0xd4
}
    8286:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    828a:	f019 bc93 	b.w	21bb4 <_impl_k_sem_give>
	...

00008290 <att_chan_get>:
	if (conn->state != BT_CONN_CONNECTED) {
    8290:	7b03      	ldrb	r3, [r0, #12]
    8292:	2b03      	cmp	r3, #3
{
    8294:	b513      	push	{r0, r1, r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    8296:	d00b      	beq.n	82b0 <att_chan_get+0x20>
		BT_WARN("Not connected");
    8298:	4b15      	ldr	r3, [pc, #84]	; (82f0 <att_chan_get+0x60>)
    829a:	9301      	str	r3, [sp, #4]
    829c:	9300      	str	r3, [sp, #0]
    829e:	4a15      	ldr	r2, [pc, #84]	; (82f4 <att_chan_get+0x64>)
    82a0:	4b15      	ldr	r3, [pc, #84]	; (82f8 <att_chan_get+0x68>)
    82a2:	4916      	ldr	r1, [pc, #88]	; (82fc <att_chan_get+0x6c>)
    82a4:	4816      	ldr	r0, [pc, #88]	; (8300 <att_chan_get+0x70>)
		BT_WARN("ATT context flagged as disconnected");
    82a6:	f7f9 fffb 	bl	22a0 <printk>
		return NULL;
    82aa:	2000      	movs	r0, #0
}
    82ac:	b002      	add	sp, #8
    82ae:	bd10      	pop	{r4, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    82b0:	2104      	movs	r1, #4
    82b2:	f7fe fe68 	bl	6f86 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    82b6:	4604      	mov	r4, r0
    82b8:	b950      	cbnz	r0, 82d0 <att_chan_get+0x40>
		BT_ERR("Unable to find ATT channel");
    82ba:	4b0d      	ldr	r3, [pc, #52]	; (82f0 <att_chan_get+0x60>)
    82bc:	9301      	str	r3, [sp, #4]
    82be:	9300      	str	r3, [sp, #0]
    82c0:	4a10      	ldr	r2, [pc, #64]	; (8304 <att_chan_get+0x74>)
    82c2:	4b0d      	ldr	r3, [pc, #52]	; (82f8 <att_chan_get+0x68>)
    82c4:	490d      	ldr	r1, [pc, #52]	; (82fc <att_chan_get+0x6c>)
    82c6:	4810      	ldr	r0, [pc, #64]	; (8308 <att_chan_get+0x78>)
    82c8:	f7f9 ffea 	bl	22a0 <printk>
    82cc:	4620      	mov	r0, r4
    82ce:	e7ed      	b.n	82ac <att_chan_get+0x1c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    82d0:	f3bf 8f5b 	dmb	ish
    82d4:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
    82d8:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att->flags, ATT_DISCONNECTED)) {
    82dc:	075b      	lsls	r3, r3, #29
    82de:	d5f5      	bpl.n	82cc <att_chan_get+0x3c>
		BT_WARN("ATT context flagged as disconnected");
    82e0:	4b03      	ldr	r3, [pc, #12]	; (82f0 <att_chan_get+0x60>)
    82e2:	9301      	str	r3, [sp, #4]
    82e4:	9300      	str	r3, [sp, #0]
    82e6:	4a03      	ldr	r2, [pc, #12]	; (82f4 <att_chan_get+0x64>)
    82e8:	4b03      	ldr	r3, [pc, #12]	; (82f8 <att_chan_get+0x68>)
    82ea:	4904      	ldr	r1, [pc, #16]	; (82fc <att_chan_get+0x6c>)
    82ec:	4807      	ldr	r0, [pc, #28]	; (830c <att_chan_get+0x7c>)
    82ee:	e7da      	b.n	82a6 <att_chan_get+0x16>
    82f0:	00023dbe 	.word	0x00023dbe
    82f4:	00024016 	.word	0x00024016
    82f8:	00024a89 	.word	0x00024a89
    82fc:	000272e8 	.word	0x000272e8
    8300:	00024ad8 	.word	0x00024ad8
    8304:	00022d86 	.word	0x00022d86
    8308:	00024af6 	.word	0x00024af6
    830c:	00024b21 	.word	0x00024b21

00008310 <write_cb>:
{
    8310:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    8314:	680f      	ldr	r7, [r1, #0]
{
    8316:	460c      	mov	r4, r1
    8318:	4606      	mov	r6, r0
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    831a:	4601      	mov	r1, r0
    831c:	222a      	movs	r2, #42	; 0x2a
    831e:	4638      	mov	r0, r7
    8320:	f7ff fcb4 	bl	7c8c <check_perm>
    8324:	4605      	mov	r5, r0
    8326:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    8328:	b9e8      	cbnz	r0, 8366 <write_cb+0x56>
	write = attr->write(data->conn, attr, data->value, data->len,
    832a:	8a62      	ldrh	r2, [r4, #18]
    832c:	9001      	str	r0, [sp, #4]
    832e:	9200      	str	r2, [sp, #0]
    8330:	7c23      	ldrb	r3, [r4, #16]
    8332:	f8d6 8008 	ldr.w	r8, [r6, #8]
    8336:	68e2      	ldr	r2, [r4, #12]
    8338:	4631      	mov	r1, r6
    833a:	4638      	mov	r0, r7
    833c:	47c0      	blx	r8
	if (write < 0 || write != data->len) {
    833e:	2800      	cmp	r0, #0
    8340:	db02      	blt.n	8348 <write_cb+0x38>
    8342:	7c23      	ldrb	r3, [r4, #16]
    8344:	4298      	cmp	r0, r3
    8346:	d00b      	beq.n	8360 <write_cb+0x50>
	if (err < 0 && err >= -0xff) {
    8348:	f100 03ff 	add.w	r3, r0, #255	; 0xff
    834c:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    834e:	bf9a      	itte	ls
    8350:	4240      	negls	r0, r0
    8352:	b2c0      	uxtbls	r0, r0
	return BT_ATT_ERR_UNLIKELY;
    8354:	200e      	movhi	r0, #14
		data->err = err_to_att(write);
    8356:	7520      	strb	r0, [r4, #20]
}
    8358:	4628      	mov	r0, r5
    835a:	b002      	add	sp, #8
    835c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->err = 0;
    8360:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
    8362:	2501      	movs	r5, #1
    8364:	e7f8      	b.n	8358 <write_cb+0x48>
		return BT_GATT_ITER_STOP;
    8366:	2500      	movs	r5, #0
    8368:	e7f6      	b.n	8358 <write_cb+0x48>

0000836a <read_cb>:
{
    836a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    836e:	4606      	mov	r6, r0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    8370:	6888      	ldr	r0, [r1, #8]
	struct bt_att *att = data->att;
    8372:	f8d1 9000 	ldr.w	r9, [r1]
{
    8376:	460c      	mov	r4, r1
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    8378:	3008      	adds	r0, #8
    837a:	2100      	movs	r1, #0
	struct bt_conn *conn = att->chan.chan.conn;
    837c:	f8d9 8000 	ldr.w	r8, [r9]
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    8380:	f011 f814 	bl	193ac <net_buf_simple_add>
	data->err = 0x00;
    8384:	2700      	movs	r7, #0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    8386:	60e0      	str	r0, [r4, #12]
	data->err = 0x00;
    8388:	7427      	strb	r7, [r4, #16]
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    838a:	2215      	movs	r2, #21
    838c:	4631      	mov	r1, r6
    838e:	4640      	mov	r0, r8
    8390:	f7ff fc7c 	bl	7c8c <check_perm>
    8394:	4605      	mov	r5, r0
    8396:	7420      	strb	r0, [r4, #16]
	if (data->err) {
    8398:	bb08      	cbnz	r0, 83de <read_cb+0x74>
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    839a:	68a1      	ldr	r1, [r4, #8]
    839c:	f8b9 3062 	ldrh.w	r3, [r9, #98]	; 0x62
    83a0:	898a      	ldrh	r2, [r1, #12]
    83a2:	6889      	ldr	r1, [r1, #8]
    83a4:	88a0      	ldrh	r0, [r4, #4]
    83a6:	9000      	str	r0, [sp, #0]
    83a8:	1a9b      	subs	r3, r3, r2
    83aa:	6877      	ldr	r7, [r6, #4]
    83ac:	440a      	add	r2, r1
    83ae:	b29b      	uxth	r3, r3
    83b0:	4631      	mov	r1, r6
    83b2:	4640      	mov	r0, r8
    83b4:	47b8      	blx	r7
	if (read < 0) {
    83b6:	1e01      	subs	r1, r0, #0
    83b8:	da0b      	bge.n	83d2 <read_cb+0x68>
	if (err < 0 && err >= -0xff) {
    83ba:	f101 03ff 	add.w	r3, r1, #255	; 0xff
    83be:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    83c0:	bf9a      	itte	ls
    83c2:	4249      	negls	r1, r1
    83c4:	b2c9      	uxtbls	r1, r1
	return BT_ATT_ERR_UNLIKELY;
    83c6:	210e      	movhi	r1, #14
		data->err = err_to_att(read);
    83c8:	7421      	strb	r1, [r4, #16]
}
    83ca:	4628      	mov	r0, r5
    83cc:	b003      	add	sp, #12
    83ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	net_buf_add(data->buf, read);
    83d2:	68a0      	ldr	r0, [r4, #8]
    83d4:	3008      	adds	r0, #8
    83d6:	f010 ffe9 	bl	193ac <net_buf_simple_add>
	return BT_GATT_ITER_CONTINUE;
    83da:	2501      	movs	r5, #1
    83dc:	e7f5      	b.n	83ca <read_cb+0x60>
		return BT_GATT_ITER_STOP;
    83de:	463d      	mov	r5, r7
    83e0:	e7f3      	b.n	83ca <read_cb+0x60>
	...

000083e4 <bt_att_create_pdu>:
{
    83e4:	b530      	push	{r4, r5, lr}
    83e6:	b085      	sub	sp, #20
    83e8:	460d      	mov	r5, r1
    83ea:	4614      	mov	r4, r2
	att = att_chan_get(conn);
    83ec:	f7ff ff50 	bl	8290 <att_chan_get>
	if (!att) {
    83f0:	b1f0      	cbz	r0, 8430 <bt_att_create_pdu+0x4c>
	if (len + sizeof(op) > att->chan.tx.mtu) {
    83f2:	f8b0 1062 	ldrh.w	r1, [r0, #98]	; 0x62
    83f6:	3401      	adds	r4, #1
    83f8:	428c      	cmp	r4, r1
    83fa:	d90e      	bls.n	841a <bt_att_create_pdu+0x36>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
    83fc:	4b0d      	ldr	r3, [pc, #52]	; (8434 <bt_att_create_pdu+0x50>)
    83fe:	9303      	str	r3, [sp, #12]
    8400:	9402      	str	r4, [sp, #8]
    8402:	9101      	str	r1, [sp, #4]
    8404:	9300      	str	r3, [sp, #0]
    8406:	4a0c      	ldr	r2, [pc, #48]	; (8438 <bt_att_create_pdu+0x54>)
    8408:	4b0c      	ldr	r3, [pc, #48]	; (843c <bt_att_create_pdu+0x58>)
    840a:	490d      	ldr	r1, [pc, #52]	; (8440 <bt_att_create_pdu+0x5c>)
    840c:	480d      	ldr	r0, [pc, #52]	; (8444 <bt_att_create_pdu+0x60>)
    840e:	f7f9 ff47 	bl	22a0 <printk>
		return NULL;
    8412:	2400      	movs	r4, #0
}
    8414:	4620      	mov	r0, r4
    8416:	b005      	add	sp, #20
    8418:	bd30      	pop	{r4, r5, pc}
	buf = bt_l2cap_create_pdu(NULL, 0);
    841a:	2100      	movs	r1, #0
    841c:	4608      	mov	r0, r1
    841e:	f7fe fc24 	bl	6c6a <bt_l2cap_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    8422:	2101      	movs	r1, #1
	buf = bt_l2cap_create_pdu(NULL, 0);
    8424:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    8426:	3008      	adds	r0, #8
    8428:	f010 ffc0 	bl	193ac <net_buf_simple_add>
	hdr->code = op;
    842c:	7005      	strb	r5, [r0, #0]
	return buf;
    842e:	e7f1      	b.n	8414 <bt_att_create_pdu+0x30>
		return NULL;
    8430:	4604      	mov	r4, r0
    8432:	e7ef      	b.n	8414 <bt_att_create_pdu+0x30>
    8434:	00023dbe 	.word	0x00023dbe
    8438:	00024016 	.word	0x00024016
    843c:	00024a96 	.word	0x00024a96
    8440:	000272e8 	.word	0x000272e8
    8444:	00024c0f 	.word	0x00024c0f

00008448 <att_indicate>:
{
    8448:	b510      	push	{r4, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    844a:	6804      	ldr	r4, [r0, #0]
	handle = net_buf_pull_le16(buf);
    844c:	f101 0008 	add.w	r0, r1, #8
    8450:	f011 f80c 	bl	1946c <net_buf_simple_pull_le16>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_CONFIRM, 0);
    8454:	2200      	movs	r2, #0
    8456:	211e      	movs	r1, #30
    8458:	4620      	mov	r0, r4
    845a:	f7ff ffc3 	bl	83e4 <bt_att_create_pdu>
	if (!buf) {
    845e:	4602      	mov	r2, r0
    8460:	b120      	cbz	r0, 846c <att_indicate+0x24>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cfm_sent);
    8462:	4b03      	ldr	r3, [pc, #12]	; (8470 <att_indicate+0x28>)
    8464:	2104      	movs	r1, #4
    8466:	4620      	mov	r0, r4
    8468:	f7fe fc02 	bl	6c70 <bt_l2cap_send_cb>
}
    846c:	2000      	movs	r0, #0
    846e:	bd10      	pop	{r4, pc}
    8470:	00008233 	.word	0x00008233

00008474 <att_mtu_req>:
{
    8474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	mtu_client = sys_le16_to_cpu(req->mtu);
    8478:	688b      	ldr	r3, [r1, #8]
    847a:	881d      	ldrh	r5, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    847c:	2d16      	cmp	r5, #22
{
    847e:	4606      	mov	r6, r0
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    8480:	d920      	bls.n	84c4 <att_mtu_req+0x50>
	struct bt_conn *conn = att->chan.chan.conn;
    8482:	f8d0 8000 	ldr.w	r8, [r0]
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
    8486:	2202      	movs	r2, #2
    8488:	2103      	movs	r1, #3
    848a:	4640      	mov	r0, r8
    848c:	f7ff ffaa 	bl	83e4 <bt_att_create_pdu>
	if (!pdu) {
    8490:	4607      	mov	r7, r0
    8492:	b1d0      	cbz	r0, 84ca <att_mtu_req+0x56>
	rsp = net_buf_add(pdu, sizeof(*rsp));
    8494:	2102      	movs	r1, #2
    8496:	3008      	adds	r0, #8
    8498:	f010 ff88 	bl	193ac <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    849c:	2400      	movs	r4, #0
    849e:	2341      	movs	r3, #65	; 0x41
    84a0:	7003      	strb	r3, [r0, #0]
    84a2:	7044      	strb	r4, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, pdu, att_rsp_sent);
    84a4:	4b0a      	ldr	r3, [pc, #40]	; (84d0 <att_mtu_req+0x5c>)
    84a6:	4640      	mov	r0, r8
    84a8:	463a      	mov	r2, r7
    84aa:	2104      	movs	r1, #4
    84ac:	f7fe fbe0 	bl	6c70 <bt_l2cap_send_cb>
	att->chan.rx.mtu = min(mtu_client, mtu_server);
    84b0:	2d41      	cmp	r5, #65	; 0x41
    84b2:	bf28      	it	cs
    84b4:	2541      	movcs	r5, #65	; 0x41
    84b6:	f8a6 5042 	strh.w	r5, [r6, #66]	; 0x42
	att->chan.tx.mtu = att->chan.rx.mtu;
    84ba:	f8a6 5062 	strh.w	r5, [r6, #98]	; 0x62
	return 0;
    84be:	4620      	mov	r0, r4
    84c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_INVALID_PDU;
    84c4:	2004      	movs	r0, #4
    84c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_UNLIKELY;
    84ca:	200e      	movs	r0, #14
}
    84cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    84d0:	00008261 	.word	0x00008261

000084d4 <send_err_rsp.part.8>:
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    84d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    84d8:	4688      	mov	r8, r1
    84da:	4617      	mov	r7, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    84dc:	2101      	movs	r1, #1
    84de:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    84e0:	4605      	mov	r5, r0
    84e2:	461e      	mov	r6, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    84e4:	f7ff ff7e 	bl	83e4 <bt_att_create_pdu>
	if (!buf) {
    84e8:	4604      	mov	r4, r0
    84ea:	b180      	cbz	r0, 850e <send_err_rsp.part.8+0x3a>
	rsp = net_buf_add(buf, sizeof(*rsp));
    84ec:	2104      	movs	r1, #4
    84ee:	3008      	adds	r0, #8
    84f0:	f010 ff5c 	bl	193ac <net_buf_simple_add>
	rsp->request = req;
    84f4:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
    84f8:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
    84fa:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    84fe:	4622      	mov	r2, r4
    8500:	4628      	mov	r0, r5
    8502:	4b04      	ldr	r3, [pc, #16]	; (8514 <send_err_rsp.part.8+0x40>)
    8504:	2104      	movs	r1, #4
}
    8506:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    850a:	f7fe bbb1 	b.w	6c70 <bt_l2cap_send_cb>
    850e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8512:	bf00      	nop
    8514:	00008261 	.word	0x00008261

00008518 <bt_att_recv>:
{
    8518:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    851a:	898b      	ldrh	r3, [r1, #12]
{
    851c:	b085      	sub	sp, #20
    851e:	4604      	mov	r4, r0
    8520:	460f      	mov	r7, r1
	if (buf->len < sizeof(*hdr)) {
    8522:	b953      	cbnz	r3, 853a <bt_att_recv+0x22>
		BT_ERR("Too small ATT PDU received");
    8524:	4b4b      	ldr	r3, [pc, #300]	; (8654 <bt_att_recv+0x13c>)
    8526:	9301      	str	r3, [sp, #4]
    8528:	9300      	str	r3, [sp, #0]
    852a:	4a4b      	ldr	r2, [pc, #300]	; (8658 <bt_att_recv+0x140>)
    852c:	4b4b      	ldr	r3, [pc, #300]	; (865c <bt_att_recv+0x144>)
    852e:	494c      	ldr	r1, [pc, #304]	; (8660 <bt_att_recv+0x148>)
    8530:	484c      	ldr	r0, [pc, #304]	; (8664 <bt_att_recv+0x14c>)
			BT_WARN("Ignoring unexpected request");
    8532:	f7f9 feb5 	bl	22a0 <printk>
}
    8536:	b005      	add	sp, #20
    8538:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct bt_att_hdr *hdr = (void *)buf->data;
    853a:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    853c:	2101      	movs	r1, #1
	struct bt_att_hdr *hdr = (void *)buf->data;
    853e:	f850 5f08 	ldr.w	r5, [r0, #8]!
	net_buf_pull(buf, sizeof(*hdr));
    8542:	f010 ff83 	bl	1944c <net_buf_simple_pull>
		if (hdr->code == handlers[i].op) {
    8546:	4a48      	ldr	r2, [pc, #288]	; (8668 <bt_att_recv+0x150>)
    8548:	7828      	ldrb	r0, [r5, #0]
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    854a:	2300      	movs	r3, #0
    854c:	4611      	mov	r1, r2
		if (hdr->code == handlers[i].op) {
    854e:	f812 6033 	ldrb.w	r6, [r2, r3, lsl #3]
    8552:	4286      	cmp	r6, r0
    8554:	ea4f 0ec3 	mov.w	lr, r3, lsl #3
    8558:	d11c      	bne.n	8594 <bt_att_recv+0x7c>
		if (handler->type == ATT_REQUEST &&
    855a:	4472      	add	r2, lr
    855c:	7896      	ldrb	r6, [r2, #2]
    855e:	2e01      	cmp	r6, #1
    8560:	d136      	bne.n	85d0 <bt_att_recv+0xb8>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    8562:	f3bf 8f5b 	dmb	ish
    8566:	f104 029c 	add.w	r2, r4, #156	; 0x9c
    856a:	e852 3f00 	ldrex	r3, [r2]
    856e:	f043 0001 	orr.w	r0, r3, #1
    8572:	e842 0c00 	strex	ip, r0, [r2]
    8576:	f1bc 0f00 	cmp.w	ip, #0
    857a:	d1f6      	bne.n	856a <bt_att_recv+0x52>
    857c:	f3bf 8f5b 	dmb	ish
    8580:	07da      	lsls	r2, r3, #31
    8582:	d540      	bpl.n	8606 <bt_att_recv+0xee>
			BT_WARN("Ignoring unexpected request");
    8584:	4b33      	ldr	r3, [pc, #204]	; (8654 <bt_att_recv+0x13c>)
    8586:	9301      	str	r3, [sp, #4]
    8588:	9300      	str	r3, [sp, #0]
    858a:	4a38      	ldr	r2, [pc, #224]	; (866c <bt_att_recv+0x154>)
    858c:	4b33      	ldr	r3, [pc, #204]	; (865c <bt_att_recv+0x144>)
    858e:	4934      	ldr	r1, [pc, #208]	; (8660 <bt_att_recv+0x148>)
    8590:	4837      	ldr	r0, [pc, #220]	; (8670 <bt_att_recv+0x158>)
    8592:	e7ce      	b.n	8532 <bt_att_recv+0x1a>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    8594:	3301      	adds	r3, #1
    8596:	2b1b      	cmp	r3, #27
    8598:	d1d9      	bne.n	854e <bt_att_recv+0x36>
		BT_WARN("Unknown ATT code 0x%02x", hdr->code);
    859a:	4b2e      	ldr	r3, [pc, #184]	; (8654 <bt_att_recv+0x13c>)
    859c:	9302      	str	r3, [sp, #8]
    859e:	9001      	str	r0, [sp, #4]
    85a0:	9300      	str	r3, [sp, #0]
    85a2:	4a32      	ldr	r2, [pc, #200]	; (866c <bt_att_recv+0x154>)
    85a4:	4b2d      	ldr	r3, [pc, #180]	; (865c <bt_att_recv+0x144>)
    85a6:	492e      	ldr	r1, [pc, #184]	; (8660 <bt_att_recv+0x148>)
    85a8:	4832      	ldr	r0, [pc, #200]	; (8674 <bt_att_recv+0x15c>)
    85aa:	f7f9 fe79 	bl	22a0 <printk>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    85ae:	782d      	ldrb	r5, [r5, #0]
    85b0:	4628      	mov	r0, r5
    85b2:	f7ff fa1b 	bl	79ec <att_op_get_type>
    85b6:	2800      	cmp	r0, #0
    85b8:	d0bd      	beq.n	8536 <bt_att_recv+0x1e>
	if (!req) {
    85ba:	2d00      	cmp	r5, #0
    85bc:	d0bb      	beq.n	8536 <bt_att_recv+0x1e>
    85be:	2306      	movs	r3, #6
    85c0:	2200      	movs	r2, #0
    85c2:	4629      	mov	r1, r5
    85c4:	6820      	ldr	r0, [r4, #0]
}
    85c6:	b005      	add	sp, #20
    85c8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    85cc:	f7ff bf82 	b.w	84d4 <send_err_rsp.part.8>
		} else if (handler->type == ATT_INDICATION &&
    85d0:	2e05      	cmp	r6, #5
    85d2:	d118      	bne.n	8606 <bt_att_recv+0xee>
    85d4:	f3bf 8f5b 	dmb	ish
    85d8:	f104 029c 	add.w	r2, r4, #156	; 0x9c
    85dc:	e852 3f00 	ldrex	r3, [r2]
    85e0:	f043 0002 	orr.w	r0, r3, #2
    85e4:	e842 0c00 	strex	ip, r0, [r2]
    85e8:	f1bc 0f00 	cmp.w	ip, #0
    85ec:	d1f6      	bne.n	85dc <bt_att_recv+0xc4>
    85ee:	f3bf 8f5b 	dmb	ish
    85f2:	079b      	lsls	r3, r3, #30
    85f4:	d507      	bpl.n	8606 <bt_att_recv+0xee>
			BT_WARN("Ignoring unexpected indication");
    85f6:	4b17      	ldr	r3, [pc, #92]	; (8654 <bt_att_recv+0x13c>)
    85f8:	9301      	str	r3, [sp, #4]
    85fa:	9300      	str	r3, [sp, #0]
    85fc:	4a1b      	ldr	r2, [pc, #108]	; (866c <bt_att_recv+0x154>)
    85fe:	4b17      	ldr	r3, [pc, #92]	; (865c <bt_att_recv+0x144>)
    8600:	4917      	ldr	r1, [pc, #92]	; (8660 <bt_att_recv+0x148>)
    8602:	481d      	ldr	r0, [pc, #116]	; (8678 <bt_att_recv+0x160>)
    8604:	e795      	b.n	8532 <bt_att_recv+0x1a>
	if (buf->len < handler->expect_len) {
    8606:	eb01 030e 	add.w	r3, r1, lr
    860a:	89ba      	ldrh	r2, [r7, #12]
    860c:	7859      	ldrb	r1, [r3, #1]
    860e:	4291      	cmp	r1, r2
    8610:	d90f      	bls.n	8632 <bt_att_recv+0x11a>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    8612:	4b10      	ldr	r3, [pc, #64]	; (8654 <bt_att_recv+0x13c>)
    8614:	9303      	str	r3, [sp, #12]
    8616:	7829      	ldrb	r1, [r5, #0]
    8618:	9102      	str	r1, [sp, #8]
    861a:	9201      	str	r2, [sp, #4]
    861c:	9300      	str	r3, [sp, #0]
    861e:	4a0e      	ldr	r2, [pc, #56]	; (8658 <bt_att_recv+0x140>)
    8620:	4b0e      	ldr	r3, [pc, #56]	; (865c <bt_att_recv+0x144>)
    8622:	490f      	ldr	r1, [pc, #60]	; (8660 <bt_att_recv+0x148>)
    8624:	4815      	ldr	r0, [pc, #84]	; (867c <bt_att_recv+0x164>)
    8626:	f7f9 fe3b 	bl	22a0 <printk>
	if (handler->type == ATT_REQUEST && err) {
    862a:	2e01      	cmp	r6, #1
    862c:	d183      	bne.n	8536 <bt_att_recv+0x1e>
		err = BT_ATT_ERR_INVALID_PDU;
    862e:	2304      	movs	r3, #4
    8630:	e00a      	b.n	8648 <bt_att_recv+0x130>
		err = handler->func(att, buf);
    8632:	685b      	ldr	r3, [r3, #4]
    8634:	4639      	mov	r1, r7
    8636:	4620      	mov	r0, r4
    8638:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    863a:	2e01      	cmp	r6, #1
		err = handler->func(att, buf);
    863c:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    863e:	f47f af7a 	bne.w	8536 <bt_att_recv+0x1e>
    8642:	2800      	cmp	r0, #0
    8644:	f43f af77 	beq.w	8536 <bt_att_recv+0x1e>
		send_err_rsp(chan->conn, hdr->code, 0, err);
    8648:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
    864a:	2900      	cmp	r1, #0
    864c:	f43f af73 	beq.w	8536 <bt_att_recv+0x1e>
    8650:	2200      	movs	r2, #0
    8652:	e7b7      	b.n	85c4 <bt_att_recv+0xac>
    8654:	00023dbe 	.word	0x00023dbe
    8658:	00022d86 	.word	0x00022d86
    865c:	00024a7d 	.word	0x00024a7d
    8660:	000272e8 	.word	0x000272e8
    8664:	00024c44 	.word	0x00024c44
    8668:	00024d24 	.word	0x00024d24
    866c:	00024016 	.word	0x00024016
    8670:	00024c6f 	.word	0x00024c6f
    8674:	00024cf9 	.word	0x00024cf9
    8678:	00024c9b 	.word	0x00024c9b
    867c:	00024cca 	.word	0x00024cca

00008680 <att_read_group_req>:
{
    8680:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    8684:	898b      	ldrh	r3, [r1, #12]
    8686:	2b06      	cmp	r3, #6
{
    8688:	b08d      	sub	sp, #52	; 0x34
    868a:	4680      	mov	r8, r0
    868c:	460c      	mov	r4, r1
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    868e:	d001      	beq.n	8694 <att_read_group_req+0x14>
    8690:	2b14      	cmp	r3, #20
    8692:	d168      	bne.n	8766 <att_read_group_req+0xe6>
	req = (void *)buf->data;
    8694:	4620      	mov	r0, r4
	net_buf_pull(buf, sizeof(*req));
    8696:	2104      	movs	r1, #4
	req = (void *)buf->data;
    8698:	f850 3f08 	ldr.w	r3, [r0, #8]!
	struct bt_conn *conn = att->chan.chan.conn;
    869c:	f8d8 9000 	ldr.w	r9, [r8]
	start_handle = sys_le16_to_cpu(req->start_handle);
    86a0:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    86a2:	885e      	ldrh	r6, [r3, #2]
	if (!uuid_create(&u.uuid, buf)) {
    86a4:	af02      	add	r7, sp, #8
	net_buf_pull(buf, sizeof(*req));
    86a6:	f010 fed1 	bl	1944c <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
    86aa:	4621      	mov	r1, r4
    86ac:	4638      	mov	r0, r7
    86ae:	f7ff fb87 	bl	7dc0 <uuid_create>
    86b2:	2800      	cmp	r0, #0
    86b4:	d059      	beq.n	876a <att_read_group_req+0xea>
	if (!start || !end) {
    86b6:	2d00      	cmp	r5, #0
    86b8:	d05a      	beq.n	8770 <att_read_group_req+0xf0>
    86ba:	2400      	movs	r4, #0
    86bc:	2e00      	cmp	r6, #0
    86be:	d056      	beq.n	876e <att_read_group_req+0xee>
	if (start > end) {
    86c0:	42b5      	cmp	r5, r6
    86c2:	d855      	bhi.n	8770 <att_read_group_req+0xf0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    86c4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    86c8:	4669      	mov	r1, sp
    86ca:	4638      	mov	r0, r7
    86cc:	f88d 4000 	strb.w	r4, [sp]
    86d0:	f8ad 3002 	strh.w	r3, [sp, #2]
    86d4:	f7fa fef4 	bl	34c0 <bt_uuid_cmp>
    86d8:	bb38      	cbnz	r0, 872a <att_read_group_req+0xaa>
	struct bt_conn *conn = att->chan.chan.conn;
    86da:	f8d8 9000 	ldr.w	r9, [r8]
	memset(&data, 0, sizeof(data));
    86de:	2214      	movs	r2, #20
    86e0:	2100      	movs	r1, #0
    86e2:	a807      	add	r0, sp, #28
    86e4:	f7f8 f881 	bl	7ea <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    86e8:	2201      	movs	r2, #1
    86ea:	2111      	movs	r1, #17
    86ec:	4648      	mov	r0, r9
    86ee:	f7ff fe79 	bl	83e4 <bt_att_create_pdu>
    86f2:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    86f4:	2800      	cmp	r0, #0
    86f6:	d038      	beq.n	876a <att_read_group_req+0xea>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    86f8:	2101      	movs	r1, #1
    86fa:	3008      	adds	r0, #8
	data.uuid = uuid;
    86fc:	9708      	str	r7, [sp, #32]
	data.att = att;
    86fe:	f8cd 801c 	str.w	r8, [sp, #28]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    8702:	f010 fe53 	bl	193ac <net_buf_simple_add>
	data.rsp->len = 0;
    8706:	2700      	movs	r7, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    8708:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    870a:	ab07      	add	r3, sp, #28
	data.rsp->len = 0;
    870c:	7007      	strb	r7, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    870e:	4a1c      	ldr	r2, [pc, #112]	; (8780 <att_read_group_req+0x100>)
	data.group = NULL;
    8710:	970b      	str	r7, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    8712:	4631      	mov	r1, r6
    8714:	4628      	mov	r0, r5
    8716:	f000 fea1 	bl	945c <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    871a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    871c:	781c      	ldrb	r4, [r3, #0]
    871e:	b9d4      	cbnz	r4, 8756 <att_read_group_req+0xd6>
		net_buf_unref(data.buf);
    8720:	9809      	ldr	r0, [sp, #36]	; 0x24
    8722:	f010 fde5 	bl	192f0 <net_buf_unref>
    8726:	230a      	movs	r3, #10
    8728:	e00c      	b.n	8744 <att_read_group_req+0xc4>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    872a:	f642 0301 	movw	r3, #10241	; 0x2801
    872e:	a901      	add	r1, sp, #4
    8730:	4638      	mov	r0, r7
    8732:	f88d 4004 	strb.w	r4, [sp, #4]
    8736:	f8ad 3006 	strh.w	r3, [sp, #6]
    873a:	f7fa fec1 	bl	34c0 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    873e:	2800      	cmp	r0, #0
    8740:	d0cb      	beq.n	86da <att_read_group_req+0x5a>
    8742:	2310      	movs	r3, #16
    8744:	462a      	mov	r2, r5
    8746:	2110      	movs	r1, #16
    8748:	4648      	mov	r0, r9
    874a:	f7ff fec3 	bl	84d4 <send_err_rsp.part.8>
}
    874e:	4620      	mov	r0, r4
    8750:	b00d      	add	sp, #52	; 0x34
    8752:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    8756:	4b0b      	ldr	r3, [pc, #44]	; (8784 <att_read_group_req+0x104>)
    8758:	9a09      	ldr	r2, [sp, #36]	; 0x24
    875a:	2104      	movs	r1, #4
    875c:	4648      	mov	r0, r9
    875e:	f7fe fa87 	bl	6c70 <bt_l2cap_send_cb>
		return 0;
    8762:	2400      	movs	r4, #0
    8764:	e7f3      	b.n	874e <att_read_group_req+0xce>
		return BT_ATT_ERR_INVALID_PDU;
    8766:	2404      	movs	r4, #4
    8768:	e7f1      	b.n	874e <att_read_group_req+0xce>
		return BT_ATT_ERR_UNLIKELY;
    876a:	240e      	movs	r4, #14
    876c:	e7ef      	b.n	874e <att_read_group_req+0xce>
			*err = 0;
    876e:	4635      	mov	r5, r6
    8770:	2301      	movs	r3, #1
    8772:	462a      	mov	r2, r5
    8774:	2110      	movs	r1, #16
    8776:	4648      	mov	r0, r9
    8778:	f7ff feac 	bl	84d4 <send_err_rsp.part.8>
    877c:	e7f1      	b.n	8762 <att_read_group_req+0xe2>
    877e:	bf00      	nop
    8780:	00007a4d 	.word	0x00007a4d
    8784:	00008261 	.word	0x00008261

00008788 <att_read_mult_req>:
{
    8788:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    878c:	6804      	ldr	r4, [r0, #0]
{
    878e:	b087      	sub	sp, #28
	memset(&data, 0, sizeof(data));
    8790:	2214      	movs	r2, #20
{
    8792:	4606      	mov	r6, r0
    8794:	460d      	mov	r5, r1
	memset(&data, 0, sizeof(data));
    8796:	a801      	add	r0, sp, #4
    8798:	2100      	movs	r1, #0
    879a:	f7f8 f826 	bl	7ea <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    879e:	2200      	movs	r2, #0
    87a0:	210f      	movs	r1, #15
    87a2:	4620      	mov	r0, r4
    87a4:	f7ff fe1e 	bl	83e4 <bt_att_create_pdu>
    87a8:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    87aa:	b368      	cbz	r0, 8808 <att_read_mult_req+0x80>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    87ac:	f8df 9060 	ldr.w	r9, [pc, #96]	; 8810 <att_read_mult_req+0x88>
	data.att = att;
    87b0:	9601      	str	r6, [sp, #4]
		handle = net_buf_pull_le16(buf);
    87b2:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    87b6:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(u16_t)) {
    87ba:	89ab      	ldrh	r3, [r5, #12]
    87bc:	2b01      	cmp	r3, #1
    87be:	d806      	bhi.n	87ce <att_read_mult_req+0x46>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    87c0:	4b12      	ldr	r3, [pc, #72]	; (880c <att_read_mult_req+0x84>)
    87c2:	9a03      	ldr	r2, [sp, #12]
    87c4:	2104      	movs	r1, #4
    87c6:	4620      	mov	r0, r4
    87c8:	f7fe fa52 	bl	6c70 <bt_l2cap_send_cb>
    87cc:	e018      	b.n	8800 <att_read_mult_req+0x78>
		handle = net_buf_pull_le16(buf);
    87ce:	4638      	mov	r0, r7
    87d0:	f010 fe4c 	bl	1946c <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    87d4:	ab01      	add	r3, sp, #4
    87d6:	464a      	mov	r2, r9
    87d8:	4601      	mov	r1, r0
		handle = net_buf_pull_le16(buf);
    87da:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    87dc:	f88d 8014 	strb.w	r8, [sp, #20]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    87e0:	f000 fe3c 	bl	945c <bt_gatt_foreach_attr>
		if (data.err) {
    87e4:	f89d 3014 	ldrb.w	r3, [sp, #20]
    87e8:	2b00      	cmp	r3, #0
    87ea:	d0e6      	beq.n	87ba <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
    87ec:	9803      	ldr	r0, [sp, #12]
    87ee:	f010 fd7f 	bl	192f0 <net_buf_unref>
    87f2:	f89d 3014 	ldrb.w	r3, [sp, #20]
    87f6:	4632      	mov	r2, r6
    87f8:	210e      	movs	r1, #14
    87fa:	4620      	mov	r0, r4
    87fc:	f7ff fe6a 	bl	84d4 <send_err_rsp.part.8>
	return 0;
    8800:	2000      	movs	r0, #0
}
    8802:	b007      	add	sp, #28
    8804:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
    8808:	200e      	movs	r0, #14
    880a:	e7fa      	b.n	8802 <att_read_mult_req+0x7a>
    880c:	00008261 	.word	0x00008261
    8810:	0000836b 	.word	0x0000836b

00008814 <att_read_rsp>:
{
    8814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8818:	4607      	mov	r7, r0
    881a:	b086      	sub	sp, #24
    881c:	460c      	mov	r4, r1
    881e:	4690      	mov	r8, r2
	if (!handle) {
    8820:	461d      	mov	r5, r3
    8822:	b3a3      	cbz	r3, 888e <att_read_rsp+0x7a>
	struct bt_conn *conn = att->chan.chan.conn;
    8824:	6806      	ldr	r6, [r0, #0]
	memset(&data, 0, sizeof(data));
    8826:	2214      	movs	r2, #20
    8828:	2100      	movs	r1, #0
    882a:	a801      	add	r0, sp, #4
    882c:	f7f7 ffdd 	bl	7ea <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    8830:	2200      	movs	r2, #0
    8832:	4641      	mov	r1, r8
    8834:	4630      	mov	r0, r6
    8836:	f7ff fdd5 	bl	83e4 <bt_att_create_pdu>
    883a:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    883c:	b348      	cbz	r0, 8892 <att_read_rsp+0x7e>
	data.offset = offset;
    883e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    8842:	f8ad 3008 	strh.w	r3, [sp, #8]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    8846:	2301      	movs	r3, #1
    8848:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    884c:	4a12      	ldr	r2, [pc, #72]	; (8898 <att_read_rsp+0x84>)
	data.att = att;
    884e:	9701      	str	r7, [sp, #4]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    8850:	ab01      	add	r3, sp, #4
    8852:	4629      	mov	r1, r5
    8854:	4628      	mov	r0, r5
    8856:	f000 fe01 	bl	945c <bt_gatt_foreach_attr>
	if (data.err) {
    885a:	f89d 7014 	ldrb.w	r7, [sp, #20]
    885e:	b17f      	cbz	r7, 8880 <att_read_rsp+0x6c>
		net_buf_unref(data.buf);
    8860:	9803      	ldr	r0, [sp, #12]
    8862:	f010 fd45 	bl	192f0 <net_buf_unref>
	if (!req) {
    8866:	b13c      	cbz	r4, 8878 <att_read_rsp+0x64>
    8868:	f89d 3014 	ldrb.w	r3, [sp, #20]
    886c:	462a      	mov	r2, r5
    886e:	4621      	mov	r1, r4
    8870:	4630      	mov	r0, r6
    8872:	f7ff fe2f 	bl	84d4 <send_err_rsp.part.8>
		return 0;
    8876:	2400      	movs	r4, #0
}
    8878:	4620      	mov	r0, r4
    887a:	b006      	add	sp, #24
    887c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    8880:	4b06      	ldr	r3, [pc, #24]	; (889c <att_read_rsp+0x88>)
    8882:	9a03      	ldr	r2, [sp, #12]
    8884:	2104      	movs	r1, #4
    8886:	4630      	mov	r0, r6
    8888:	f7fe f9f2 	bl	6c70 <bt_l2cap_send_cb>
    888c:	e7f3      	b.n	8876 <att_read_rsp+0x62>
		return BT_ATT_ERR_INVALID_HANDLE;
    888e:	2401      	movs	r4, #1
    8890:	e7f2      	b.n	8878 <att_read_rsp+0x64>
		return BT_ATT_ERR_UNLIKELY;
    8892:	240e      	movs	r4, #14
    8894:	e7f0      	b.n	8878 <att_read_rsp+0x64>
    8896:	bf00      	nop
    8898:	0000836b 	.word	0x0000836b
    889c:	00008261 	.word	0x00008261

000088a0 <att_read_blob_req>:
{
    88a0:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
    88a2:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_BLOB_REQ,
    88a4:	8813      	ldrh	r3, [r2, #0]
    88a6:	8852      	ldrh	r2, [r2, #2]
    88a8:	9200      	str	r2, [sp, #0]
    88aa:	210c      	movs	r1, #12
    88ac:	220d      	movs	r2, #13
    88ae:	f7ff ffb1 	bl	8814 <att_read_rsp>
}
    88b2:	b003      	add	sp, #12
    88b4:	f85d fb04 	ldr.w	pc, [sp], #4

000088b8 <att_read_req>:
{
    88b8:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
    88ba:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
    88bc:	2200      	movs	r2, #0
    88be:	881b      	ldrh	r3, [r3, #0]
    88c0:	9200      	str	r2, [sp, #0]
    88c2:	210a      	movs	r1, #10
    88c4:	220b      	movs	r2, #11
    88c6:	f7ff ffa5 	bl	8814 <att_read_rsp>
}
    88ca:	b003      	add	sp, #12
    88cc:	f85d fb04 	ldr.w	pc, [sp], #4

000088d0 <att_read_type_req>:
{
    88d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    88d4:	898b      	ldrh	r3, [r1, #12]
    88d6:	2b06      	cmp	r3, #6
{
    88d8:	b08d      	sub	sp, #52	; 0x34
    88da:	4607      	mov	r7, r0
    88dc:	460e      	mov	r6, r1
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    88de:	d001      	beq.n	88e4 <att_read_type_req+0x14>
    88e0:	2b14      	cmp	r3, #20
    88e2:	d152      	bne.n	898a <att_read_type_req+0xba>
	req = (void *)buf->data;
    88e4:	4630      	mov	r0, r6
	net_buf_pull(buf, sizeof(*req));
    88e6:	2104      	movs	r1, #4
	req = (void *)buf->data;
    88e8:	f850 3f08 	ldr.w	r3, [r0, #8]!
	struct bt_conn *conn = att->chan.chan.conn;
    88ec:	f8d7 9000 	ldr.w	r9, [r7]
	start_handle = sys_le16_to_cpu(req->start_handle);
    88f0:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    88f2:	885c      	ldrh	r4, [r3, #2]
	if (!uuid_create(&u.uuid, buf)) {
    88f4:	f10d 0804 	add.w	r8, sp, #4
	net_buf_pull(buf, sizeof(*req));
    88f8:	f010 fda8 	bl	1944c <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
    88fc:	4631      	mov	r1, r6
    88fe:	4640      	mov	r0, r8
    8900:	f7ff fa5e 	bl	7dc0 <uuid_create>
    8904:	b198      	cbz	r0, 892e <att_read_type_req+0x5e>
	if (!start || !end) {
    8906:	2d00      	cmp	r5, #0
    8908:	d042      	beq.n	8990 <att_read_type_req+0xc0>
    890a:	2c00      	cmp	r4, #0
    890c:	d03f      	beq.n	898e <att_read_type_req+0xbe>
	if (start > end) {
    890e:	42a5      	cmp	r5, r4
    8910:	d83e      	bhi.n	8990 <att_read_type_req+0xc0>
	memset(&data, 0, sizeof(data));
    8912:	2218      	movs	r2, #24
	struct bt_conn *conn = att->chan.chan.conn;
    8914:	683e      	ldr	r6, [r7, #0]
	memset(&data, 0, sizeof(data));
    8916:	2100      	movs	r1, #0
    8918:	eb0d 0002 	add.w	r0, sp, r2
    891c:	f7f7 ff65 	bl	7ea <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    8920:	2201      	movs	r2, #1
    8922:	2109      	movs	r1, #9
    8924:	4630      	mov	r0, r6
    8926:	f7ff fd5d 	bl	83e4 <bt_att_create_pdu>
    892a:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
    892c:	b908      	cbnz	r0, 8932 <att_read_type_req+0x62>
		return BT_ATT_ERR_UNLIKELY;
    892e:	240e      	movs	r4, #14
    8930:	e027      	b.n	8982 <att_read_type_req+0xb2>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    8932:	2101      	movs	r1, #1
    8934:	3008      	adds	r0, #8
	data.att = att;
    8936:	9706      	str	r7, [sp, #24]
	data.uuid = uuid;
    8938:	f8cd 801c 	str.w	r8, [sp, #28]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    893c:	f010 fd36 	bl	193ac <net_buf_simple_add>
	data.rsp->len = 0;
    8940:	2700      	movs	r7, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    8942:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    8944:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    8946:	4621      	mov	r1, r4
	data.rsp->len = 0;
    8948:	7007      	strb	r7, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    894a:	4a14      	ldr	r2, [pc, #80]	; (899c <att_read_type_req+0xcc>)
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    894c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    8950:	4628      	mov	r0, r5
    8952:	ab06      	add	r3, sp, #24
    8954:	f000 fd82 	bl	945c <bt_gatt_foreach_attr>
	if (data.err) {
    8958:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
    895c:	b15c      	cbz	r4, 8976 <att_read_type_req+0xa6>
		net_buf_unref(data.buf);
    895e:	9808      	ldr	r0, [sp, #32]
    8960:	f010 fcc6 	bl	192f0 <net_buf_unref>
    8964:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    8968:	462a      	mov	r2, r5
    896a:	2108      	movs	r1, #8
    896c:	4630      	mov	r0, r6
    896e:	f7ff fdb1 	bl	84d4 <send_err_rsp.part.8>
		return 0;
    8972:	2400      	movs	r4, #0
    8974:	e005      	b.n	8982 <att_read_type_req+0xb2>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    8976:	4b0a      	ldr	r3, [pc, #40]	; (89a0 <att_read_type_req+0xd0>)
    8978:	9a08      	ldr	r2, [sp, #32]
    897a:	2104      	movs	r1, #4
    897c:	4630      	mov	r0, r6
    897e:	f7fe f977 	bl	6c70 <bt_l2cap_send_cb>
}
    8982:	4620      	mov	r0, r4
    8984:	b00d      	add	sp, #52	; 0x34
    8986:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_INVALID_PDU;
    898a:	2404      	movs	r4, #4
    898c:	e7f9      	b.n	8982 <att_read_type_req+0xb2>
			*err = 0;
    898e:	4625      	mov	r5, r4
    8990:	2301      	movs	r3, #1
    8992:	462a      	mov	r2, r5
    8994:	2108      	movs	r1, #8
    8996:	4648      	mov	r0, r9
    8998:	e7e9      	b.n	896e <att_read_type_req+0x9e>
    899a:	bf00      	nop
    899c:	00007cdf 	.word	0x00007cdf
    89a0:	00008261 	.word	0x00008261

000089a4 <att_find_type_req>:
{
    89a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    89a8:	f8d0 9000 	ldr.w	r9, [r0]
{
    89ac:	4680      	mov	r8, r0
	req = (void *)buf->data;
    89ae:	4608      	mov	r0, r1
{
    89b0:	b089      	sub	sp, #36	; 0x24
	req = (void *)buf->data;
    89b2:	f850 3f08 	ldr.w	r3, [r0, #8]!
{
    89b6:	468b      	mov	fp, r1
	value = net_buf_pull(buf, sizeof(*req));
    89b8:	2106      	movs	r1, #6
	start_handle = sys_le16_to_cpu(req->start_handle);
    89ba:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    89bc:	885f      	ldrh	r7, [r3, #2]
	type = sys_le16_to_cpu(req->type);
    89be:	889e      	ldrh	r6, [r3, #4]
	value = net_buf_pull(buf, sizeof(*req));
    89c0:	f010 fd44 	bl	1944c <net_buf_simple_pull>
    89c4:	4682      	mov	sl, r0
	if (!start || !end) {
    89c6:	2d00      	cmp	r5, #0
    89c8:	d057      	beq.n	8a7a <att_find_type_req+0xd6>
    89ca:	2400      	movs	r4, #0
    89cc:	2f00      	cmp	r7, #0
    89ce:	d053      	beq.n	8a78 <att_find_type_req+0xd4>
	if (start > end) {
    89d0:	42bd      	cmp	r5, r7
    89d2:	d852      	bhi.n	8a7a <att_find_type_req+0xd6>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    89d4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    89d8:	a902      	add	r1, sp, #8
    89da:	a801      	add	r0, sp, #4
    89dc:	f8ad 6006 	strh.w	r6, [sp, #6]
    89e0:	f88d 4004 	strb.w	r4, [sp, #4]
    89e4:	f88d 4008 	strb.w	r4, [sp, #8]
    89e8:	f8ad 300a 	strh.w	r3, [sp, #10]
    89ec:	f7fa fd68 	bl	34c0 <bt_uuid_cmp>
    89f0:	4606      	mov	r6, r0
    89f2:	b148      	cbz	r0, 8a08 <att_find_type_req+0x64>
    89f4:	230a      	movs	r3, #10
    89f6:	462a      	mov	r2, r5
    89f8:	2106      	movs	r1, #6
    89fa:	4648      	mov	r0, r9
    89fc:	f7ff fd6a 	bl	84d4 <send_err_rsp.part.8>
}
    8a00:	4620      	mov	r0, r4
    8a02:	b009      	add	sp, #36	; 0x24
    8a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct bt_conn *conn = att->chan.chan.conn;
    8a08:	f8d8 9000 	ldr.w	r9, [r8]
				 buf->len);
    8a0c:	f8bb 400c 	ldrh.w	r4, [fp, #12]
	memset(&data, 0, sizeof(data));
    8a10:	2214      	movs	r2, #20
    8a12:	4631      	mov	r1, r6
    8a14:	a803      	add	r0, sp, #12
    8a16:	f7f7 fee8 	bl	7ea <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    8a1a:	4632      	mov	r2, r6
    8a1c:	2107      	movs	r1, #7
    8a1e:	4648      	mov	r0, r9
    8a20:	f7ff fce0 	bl	83e4 <bt_att_create_pdu>
    8a24:	9004      	str	r0, [sp, #16]
	if (!data.buf) {
    8a26:	b328      	cbz	r0, 8a74 <att_find_type_req+0xd0>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    8a28:	230a      	movs	r3, #10
    8a2a:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    8a2e:	4a14      	ldr	r2, [pc, #80]	; (8a80 <att_find_type_req+0xdc>)
	return att_find_type_rsp(att, start_handle, end_handle, value,
    8a30:	f88d 401c 	strb.w	r4, [sp, #28]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    8a34:	ab03      	add	r3, sp, #12
    8a36:	4639      	mov	r1, r7
    8a38:	4628      	mov	r0, r5
	data.att = att;
    8a3a:	f8cd 800c 	str.w	r8, [sp, #12]
	data.group = NULL;
    8a3e:	9605      	str	r6, [sp, #20]
	data.value = value;
    8a40:	f8cd a018 	str.w	sl, [sp, #24]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    8a44:	f000 fd0a 	bl	945c <bt_gatt_foreach_attr>
	if (data.err) {
    8a48:	f89d 401d 	ldrb.w	r4, [sp, #29]
    8a4c:	b15c      	cbz	r4, 8a66 <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
    8a4e:	9804      	ldr	r0, [sp, #16]
    8a50:	f010 fc4e 	bl	192f0 <net_buf_unref>
    8a54:	f89d 301d 	ldrb.w	r3, [sp, #29]
    8a58:	462a      	mov	r2, r5
    8a5a:	2106      	movs	r1, #6
    8a5c:	4648      	mov	r0, r9
    8a5e:	f7ff fd39 	bl	84d4 <send_err_rsp.part.8>
		return 0;
    8a62:	2400      	movs	r4, #0
    8a64:	e7cc      	b.n	8a00 <att_find_type_req+0x5c>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    8a66:	4b07      	ldr	r3, [pc, #28]	; (8a84 <att_find_type_req+0xe0>)
    8a68:	9a04      	ldr	r2, [sp, #16]
    8a6a:	2104      	movs	r1, #4
    8a6c:	4648      	mov	r0, r9
    8a6e:	f7fe f8ff 	bl	6c70 <bt_l2cap_send_cb>
    8a72:	e7c5      	b.n	8a00 <att_find_type_req+0x5c>
		return BT_ATT_ERR_UNLIKELY;
    8a74:	240e      	movs	r4, #14
	return att_find_type_rsp(att, start_handle, end_handle, value,
    8a76:	e7c3      	b.n	8a00 <att_find_type_req+0x5c>
			*err = 0;
    8a78:	463d      	mov	r5, r7
    8a7a:	2301      	movs	r3, #1
    8a7c:	e7ec      	b.n	8a58 <att_find_type_req+0xb4>
    8a7e:	bf00      	nop
    8a80:	00007bb5 	.word	0x00007bb5
    8a84:	00008261 	.word	0x00008261

00008a88 <att_find_info_req>:
{
    8a88:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    8a8a:	688b      	ldr	r3, [r1, #8]
	struct bt_conn *conn = att->chan.chan.conn;
    8a8c:	6806      	ldr	r6, [r0, #0]
	start_handle = sys_le16_to_cpu(req->start_handle);
    8a8e:	881d      	ldrh	r5, [r3, #0]
{
    8a90:	b085      	sub	sp, #20
    8a92:	4607      	mov	r7, r0
	if (!start || !end) {
    8a94:	b375      	cbz	r5, 8af4 <att_find_info_req+0x6c>
	end_handle = sys_le16_to_cpu(req->end_handle);
    8a96:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    8a98:	b35c      	cbz	r4, 8af2 <att_find_info_req+0x6a>
	if (start > end) {
    8a9a:	42a5      	cmp	r5, r4
    8a9c:	d82a      	bhi.n	8af4 <att_find_info_req+0x6c>
	memset(&data, 0, sizeof(data));
    8a9e:	2210      	movs	r2, #16
    8aa0:	2100      	movs	r1, #0
    8aa2:	4668      	mov	r0, sp
    8aa4:	f7f7 fea1 	bl	7ea <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    8aa8:	2200      	movs	r2, #0
    8aaa:	2105      	movs	r1, #5
    8aac:	4630      	mov	r0, r6
    8aae:	f7ff fc99 	bl	83e4 <bt_att_create_pdu>
    8ab2:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    8ab4:	b910      	cbnz	r0, 8abc <att_find_info_req+0x34>
		return BT_ATT_ERR_UNLIKELY;
    8ab6:	200e      	movs	r0, #14
}
    8ab8:	b005      	add	sp, #20
    8aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    8abc:	4621      	mov	r1, r4
    8abe:	466b      	mov	r3, sp
    8ac0:	4a0d      	ldr	r2, [pc, #52]	; (8af8 <att_find_info_req+0x70>)
	data.att = att;
    8ac2:	9700      	str	r7, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    8ac4:	4628      	mov	r0, r5
    8ac6:	f000 fcc9 	bl	945c <bt_gatt_foreach_attr>
	if (!data.rsp) {
    8aca:	9c02      	ldr	r4, [sp, #8]
    8acc:	b94c      	cbnz	r4, 8ae2 <att_find_info_req+0x5a>
		net_buf_unref(data.buf);
    8ace:	9801      	ldr	r0, [sp, #4]
    8ad0:	f010 fc0e 	bl	192f0 <net_buf_unref>
    8ad4:	230a      	movs	r3, #10
    8ad6:	462a      	mov	r2, r5
    8ad8:	2104      	movs	r1, #4
    8ada:	4630      	mov	r0, r6
    8adc:	f7ff fcfa 	bl	84d4 <send_err_rsp.part.8>
    8ae0:	e005      	b.n	8aee <att_find_info_req+0x66>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    8ae2:	4b06      	ldr	r3, [pc, #24]	; (8afc <att_find_info_req+0x74>)
    8ae4:	9a01      	ldr	r2, [sp, #4]
    8ae6:	2104      	movs	r1, #4
    8ae8:	4630      	mov	r0, r6
    8aea:	f7fe f8c1 	bl	6c70 <bt_l2cap_send_cb>
		return 0;
    8aee:	2000      	movs	r0, #0
    8af0:	e7e2      	b.n	8ab8 <att_find_info_req+0x30>
			*err = 0;
    8af2:	4625      	mov	r5, r4
    8af4:	2301      	movs	r3, #1
    8af6:	e7ee      	b.n	8ad6 <att_find_info_req+0x4e>
    8af8:	00007b1b 	.word	0x00007b1b
    8afc:	00008261 	.word	0x00008261

00008b00 <att_write_rsp.part.9.constprop.14>:
static u8_t att_write_rsp(struct bt_conn *conn, u8_t op, u8_t rsp,
    8b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8b04:	b086      	sub	sp, #24
    8b06:	4690      	mov	r8, r2
    8b08:	4605      	mov	r5, r0
    8b0a:	460e      	mov	r6, r1
	memset(&data, 0, sizeof(data));
    8b0c:	2218      	movs	r2, #24
    8b0e:	2100      	movs	r1, #0
    8b10:	4668      	mov	r0, sp
static u8_t att_write_rsp(struct bt_conn *conn, u8_t op, u8_t rsp,
    8b12:	461f      	mov	r7, r3
	memset(&data, 0, sizeof(data));
    8b14:	f7f7 fe69 	bl	7ea <memset>
	if (rsp) {
    8b18:	f1b8 0f00 	cmp.w	r8, #0
    8b1c:	d11f      	bne.n	8b5e <att_write_rsp.part.9.constprop.14+0x5e>
	data.offset = offset;
    8b1e:	2300      	movs	r3, #0
    8b20:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
    8b24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8b26:	9303      	str	r3, [sp, #12]
	data.len = len;
    8b28:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    8b2c:	f88d 3010 	strb.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    8b30:	2301      	movs	r3, #1
    8b32:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    8b36:	4a1b      	ldr	r2, [pc, #108]	; (8ba4 <att_write_rsp.part.9.constprop.14+0xa4>)
	data.conn = conn;
    8b38:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    8b3a:	466b      	mov	r3, sp
    8b3c:	4639      	mov	r1, r7
    8b3e:	4638      	mov	r0, r7
	data.op = op;
    8b40:	f88d 6008 	strb.w	r6, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    8b44:	f000 fc8a 	bl	945c <bt_gatt_foreach_attr>
	if (data.err) {
    8b48:	f89d 4014 	ldrb.w	r4, [sp, #20]
    8b4c:	b98c      	cbnz	r4, 8b72 <att_write_rsp.part.9.constprop.14+0x72>
	if (data.buf) {
    8b4e:	9a01      	ldr	r2, [sp, #4]
    8b50:	b1b2      	cbz	r2, 8b80 <att_write_rsp.part.9.constprop.14+0x80>
		bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf,
    8b52:	4b15      	ldr	r3, [pc, #84]	; (8ba8 <att_write_rsp.part.9.constprop.14+0xa8>)
    8b54:	2104      	movs	r1, #4
    8b56:	4628      	mov	r0, r5
    8b58:	f7fe f88a 	bl	6c70 <bt_l2cap_send_cb>
    8b5c:	e011      	b.n	8b82 <att_write_rsp.part.9.constprop.14+0x82>
		data.buf = bt_att_create_pdu(conn, rsp, 0);
    8b5e:	2200      	movs	r2, #0
    8b60:	4641      	mov	r1, r8
    8b62:	4628      	mov	r0, r5
    8b64:	f7ff fc3e 	bl	83e4 <bt_att_create_pdu>
    8b68:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    8b6a:	2800      	cmp	r0, #0
    8b6c:	d1d7      	bne.n	8b1e <att_write_rsp.part.9.constprop.14+0x1e>
			return BT_ATT_ERR_UNLIKELY;
    8b6e:	240e      	movs	r4, #14
    8b70:	e007      	b.n	8b82 <att_write_rsp.part.9.constprop.14+0x82>
		if (rsp) {
    8b72:	f1b8 0f00 	cmp.w	r8, #0
    8b76:	d00f      	beq.n	8b98 <att_write_rsp.part.9.constprop.14+0x98>
			net_buf_unref(data.buf);
    8b78:	9801      	ldr	r0, [sp, #4]
    8b7a:	f010 fbb9 	bl	192f0 <net_buf_unref>
	if (!req) {
    8b7e:	b926      	cbnz	r6, 8b8a <att_write_rsp.part.9.constprop.14+0x8a>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    8b80:	2400      	movs	r4, #0
}
    8b82:	4620      	mov	r0, r4
    8b84:	b006      	add	sp, #24
    8b86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8b8a:	f89d 3014 	ldrb.w	r3, [sp, #20]
    8b8e:	463a      	mov	r2, r7
    8b90:	4631      	mov	r1, r6
    8b92:	4628      	mov	r0, r5
    8b94:	f7ff fc9e 	bl	84d4 <send_err_rsp.part.8>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    8b98:	2e18      	cmp	r6, #24
    8b9a:	d1f1      	bne.n	8b80 <att_write_rsp.part.9.constprop.14+0x80>
    8b9c:	f89d 4014 	ldrb.w	r4, [sp, #20]
    8ba0:	e7ef      	b.n	8b82 <att_write_rsp.part.9.constprop.14+0x82>
    8ba2:	bf00      	nop
    8ba4:	00008311 	.word	0x00008311
    8ba8:	00008261 	.word	0x00008261

00008bac <att_signed_write_cmd>:
{
    8bac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	handle = sys_le16_to_cpu(req->handle);
    8bb0:	460c      	mov	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
    8bb2:	6806      	ldr	r6, [r0, #0]
	handle = sys_le16_to_cpu(req->handle);
    8bb4:	f854 3f08 	ldr.w	r3, [r4, #8]!
{
    8bb8:	460d      	mov	r5, r1
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    8bba:	4620      	mov	r0, r4
    8bbc:	2101      	movs	r1, #1
	handle = sys_le16_to_cpu(req->handle);
    8bbe:	f8b3 8000 	ldrh.w	r8, [r3]
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    8bc2:	f010 fc2a 	bl	1941a <net_buf_simple_push>
	err = bt_smp_sign_verify(conn, buf);
    8bc6:	4629      	mov	r1, r5
    8bc8:	4630      	mov	r0, r6
    8bca:	f002 fc83 	bl	b4d4 <bt_smp_sign_verify>
	if (err) {
    8bce:	4607      	mov	r7, r0
    8bd0:	b160      	cbz	r0, 8bec <att_signed_write_cmd+0x40>
		BT_ERR("Error verifying data");
    8bd2:	4b13      	ldr	r3, [pc, #76]	; (8c20 <att_signed_write_cmd+0x74>)
    8bd4:	9301      	str	r3, [sp, #4]
    8bd6:	9300      	str	r3, [sp, #0]
    8bd8:	4a12      	ldr	r2, [pc, #72]	; (8c24 <att_signed_write_cmd+0x78>)
    8bda:	4b13      	ldr	r3, [pc, #76]	; (8c28 <att_signed_write_cmd+0x7c>)
    8bdc:	4913      	ldr	r1, [pc, #76]	; (8c2c <att_signed_write_cmd+0x80>)
    8bde:	4814      	ldr	r0, [pc, #80]	; (8c30 <att_signed_write_cmd+0x84>)
    8be0:	f7f9 fb5e 	bl	22a0 <printk>
    8be4:	2000      	movs	r0, #0
}
    8be6:	b002      	add	sp, #8
    8be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	net_buf_pull(buf, sizeof(struct bt_att_hdr));
    8bec:	2101      	movs	r1, #1
    8bee:	4620      	mov	r0, r4
    8bf0:	f010 fc2c 	bl	1944c <net_buf_simple_pull>
	net_buf_pull(buf, sizeof(*req));
    8bf4:	2102      	movs	r1, #2
    8bf6:	4620      	mov	r0, r4
    8bf8:	f010 fc28 	bl	1944c <net_buf_simple_pull>
	if (!handle) {
    8bfc:	f1b8 0f00 	cmp.w	r8, #0
    8c00:	d00c      	beq.n	8c1c <att_signed_write_cmd+0x70>
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data,
    8c02:	7b2b      	ldrb	r3, [r5, #12]
    8c04:	3b0c      	subs	r3, #12
    8c06:	b2db      	uxtb	r3, r3
    8c08:	9301      	str	r3, [sp, #4]
    8c0a:	68ab      	ldr	r3, [r5, #8]
    8c0c:	9300      	str	r3, [sp, #0]
    8c0e:	463a      	mov	r2, r7
    8c10:	4643      	mov	r3, r8
    8c12:	4639      	mov	r1, r7
    8c14:	4630      	mov	r0, r6
    8c16:	f7ff ff73 	bl	8b00 <att_write_rsp.part.9.constprop.14>
    8c1a:	e7e4      	b.n	8be6 <att_signed_write_cmd+0x3a>
		return BT_ATT_ERR_INVALID_HANDLE;
    8c1c:	2001      	movs	r0, #1
    8c1e:	e7e2      	b.n	8be6 <att_signed_write_cmd+0x3a>
    8c20:	00023dbe 	.word	0x00023dbe
    8c24:	00022d86 	.word	0x00022d86
    8c28:	00024a68 	.word	0x00024a68
    8c2c:	000272e8 	.word	0x000272e8
    8c30:	00024b99 	.word	0x00024b99

00008c34 <att_write_cmd>:
{
    8c34:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    8c36:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    8c38:	f101 0008 	add.w	r0, r1, #8
{
    8c3c:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
    8c3e:	f010 fc15 	bl	1946c <net_buf_simple_pull_le16>
	if (!handle) {
    8c42:	4603      	mov	r3, r0
    8c44:	b150      	cbz	r0, 8c5c <att_write_cmd+0x28>
    8c46:	7b22      	ldrb	r2, [r4, #12]
    8c48:	9201      	str	r2, [sp, #4]
    8c4a:	68a2      	ldr	r2, [r4, #8]
    8c4c:	9200      	str	r2, [sp, #0]
    8c4e:	2200      	movs	r2, #0
    8c50:	4611      	mov	r1, r2
    8c52:	4628      	mov	r0, r5
    8c54:	f7ff ff54 	bl	8b00 <att_write_rsp.part.9.constprop.14>
}
    8c58:	b003      	add	sp, #12
    8c5a:	bd30      	pop	{r4, r5, pc}
		return BT_ATT_ERR_INVALID_HANDLE;
    8c5c:	2001      	movs	r0, #1
    8c5e:	e7fb      	b.n	8c58 <att_write_cmd+0x24>

00008c60 <att_write_req>:
{
    8c60:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    8c62:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    8c64:	f101 0008 	add.w	r0, r1, #8
{
    8c68:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
    8c6a:	f010 fbff 	bl	1946c <net_buf_simple_pull_le16>
	if (!handle) {
    8c6e:	4603      	mov	r3, r0
    8c70:	b150      	cbz	r0, 8c88 <att_write_req+0x28>
    8c72:	7b22      	ldrb	r2, [r4, #12]
    8c74:	9201      	str	r2, [sp, #4]
    8c76:	68a2      	ldr	r2, [r4, #8]
    8c78:	9200      	str	r2, [sp, #0]
    8c7a:	2112      	movs	r1, #18
    8c7c:	2213      	movs	r2, #19
    8c7e:	4628      	mov	r0, r5
    8c80:	f7ff ff3e 	bl	8b00 <att_write_rsp.part.9.constprop.14>
}
    8c84:	b003      	add	sp, #12
    8c86:	bd30      	pop	{r4, r5, pc}
		return BT_ATT_ERR_INVALID_HANDLE;
    8c88:	2001      	movs	r0, #1
    8c8a:	e7fb      	b.n	8c84 <att_write_req+0x24>

00008c8c <bt_att_init>:

void bt_att_init(void)
{
    8c8c:	b508      	push	{r3, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid		= BT_L2CAP_CID_ATT,
		.accept		= bt_att_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    8c8e:	4803      	ldr	r0, [pc, #12]	; (8c9c <bt_att_init+0x10>)
    8c90:	f7fd ff78 	bl	6b84 <bt_l2cap_le_fixed_chan_register>

	bt_gatt_init();
}
    8c94:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_gatt_init();
    8c98:	f000 bb98 	b.w	93cc <bt_gatt_init>
    8c9c:	20009e40 	.word	0x20009e40

00008ca0 <bt_att_req_send>:

	return 0;
}

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
    8ca0:	b510      	push	{r4, lr}
    8ca2:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	if (!conn || !req) {
    8ca4:	b1d8      	cbz	r0, 8cde <bt_att_req_send+0x3e>
    8ca6:	b1d1      	cbz	r1, 8cde <bt_att_req_send+0x3e>
		return -EINVAL;
	}

	att = att_chan_get(conn);
    8ca8:	f7ff faf2 	bl	8290 <att_chan_get>
	if (!att) {
    8cac:	4603      	mov	r3, r0
    8cae:	b1c8      	cbz	r0, 8ce4 <bt_att_req_send+0x44>
		return -ENOTCONN;
	}

	/* Check if there is a request outstanding */
	if (att->req) {
    8cb0:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
    8cb4:	b172      	cbz	r2, 8cd4 <bt_att_req_send+0x34>
	if (!list->tail) {
    8cb6:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
	node->next = NULL;
    8cba:	2000      	movs	r0, #0
    8cbc:	6020      	str	r0, [r4, #0]
	if (!list->tail) {
    8cbe:	b92a      	cbnz	r2, 8ccc <bt_att_req_send+0x2c>
		list->tail = node;
    8cc0:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
		list->head = node;
    8cc4:	f8c3 40a4 	str.w	r4, [r3, #164]	; 0xa4
		/* Queue the request to be send later */
		sys_slist_append(&att->reqs, &req->node);
		return 0;
    8cc8:	4610      	mov	r0, r2
    8cca:	bd10      	pop	{r4, pc}
		list->tail->next = node;
    8ccc:	6014      	str	r4, [r2, #0]
		list->tail = node;
    8cce:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
    8cd2:	bd10      	pop	{r4, pc}
	}

	return att_send_req(att, req);
    8cd4:	4621      	mov	r1, r4
}
    8cd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return att_send_req(att, req);
    8cda:	f7ff b8ef 	b.w	7ebc <att_send_req>
		return -EINVAL;
    8cde:	f06f 0015 	mvn.w	r0, #21
    8ce2:	bd10      	pop	{r4, pc}
		return -ENOTCONN;
    8ce4:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
    8ce8:	bd10      	pop	{r4, pc}

00008cea <sc_ccc_cfg_changed>:

static struct bt_gatt_ccc_cfg sc_ccc_cfg[BT_GATT_CCC_MAX] = {};

static void sc_ccc_cfg_changed(const struct bt_gatt_attr *attr,
			       u16_t value)
{
    8cea:	4770      	bx	lr

00008cec <find_next>:

static u8_t find_next(const struct bt_gatt_attr *attr, void *user_data)
{
	struct bt_gatt_attr **next = user_data;

	*next = (struct bt_gatt_attr *)attr;
    8cec:	6008      	str	r0, [r1, #0]

	return BT_GATT_ITER_STOP;
}
    8cee:	2000      	movs	r0, #0
    8cf0:	4770      	bx	lr

00008cf2 <gatt_ccc_changed>:
				 sizeof(value));
}

static void gatt_ccc_changed(const struct bt_gatt_attr *attr,
			     struct _bt_gatt_ccc *ccc)
{
    8cf2:	b430      	push	{r4, r5}
	int i;
	u16_t value = 0x0000;
    8cf4:	2300      	movs	r3, #0
    8cf6:	684d      	ldr	r5, [r1, #4]

	for (i = 0; i < ccc->cfg_len; i++) {
    8cf8:	461a      	mov	r2, r3
    8cfa:	42aa      	cmp	r2, r5
    8cfc:	d107      	bne.n	8d0e <gatt_ccc_changed+0x1c>
		}
	}

	BT_DBG("ccc %p value 0x%04x", ccc, value);

	if (value != ccc->value) {
    8cfe:	890a      	ldrh	r2, [r1, #8]
    8d00:	429a      	cmp	r2, r3
    8d02:	d00d      	beq.n	8d20 <gatt_ccc_changed+0x2e>
		ccc->value = value;
    8d04:	810b      	strh	r3, [r1, #8]
		ccc->cfg_changed(attr, value);
    8d06:	68ca      	ldr	r2, [r1, #12]
	}
}
    8d08:	bc30      	pop	{r4, r5}
		ccc->cfg_changed(attr, value);
    8d0a:	4619      	mov	r1, r3
    8d0c:	4710      	bx	r2
		if (ccc->cfg[i].value > value) {
    8d0e:	680c      	ldr	r4, [r1, #0]
    8d10:	eb04 1402 	add.w	r4, r4, r2, lsl #4
	for (i = 0; i < ccc->cfg_len; i++) {
    8d14:	3201      	adds	r2, #1
    8d16:	8924      	ldrh	r4, [r4, #8]
    8d18:	42a3      	cmp	r3, r4
    8d1a:	bf38      	it	cc
    8d1c:	4623      	movcc	r3, r4
    8d1e:	e7ec      	b.n	8cfa <gatt_ccc_changed+0x8>
}
    8d20:	bc30      	pop	{r4, r5}
    8d22:	4770      	bx	lr

00008d24 <gatt_indicate_rsp>:
	return 0;
}

static void gatt_indicate_rsp(struct bt_conn *conn, u8_t err,
			      const void *pdu, u16_t length, void *user_data)
{
    8d24:	b410      	push	{r4}
    8d26:	9b01      	ldr	r3, [sp, #4]
	struct bt_gatt_indicate_params *params = user_data;

	params->func(conn, params->attr, err);
    8d28:	69dc      	ldr	r4, [r3, #28]
    8d2a:	460a      	mov	r2, r1
    8d2c:	6999      	ldr	r1, [r3, #24]
    8d2e:	4623      	mov	r3, r4
}
    8d30:	bc10      	pop	{r4}
	params->func(conn, params->attr, err);
    8d32:	4718      	bx	r3

00008d34 <bt_gatt_attr_write_ccc>:
{
    8d34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8d38:	4689      	mov	r9, r1
    8d3a:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
	struct _bt_gatt_ccc *ccc = attr->user_data;
    8d3e:	f8d9 400c 	ldr.w	r4, [r9, #12]
	if (offset > sizeof(u16_t)) {
    8d42:	2902      	cmp	r1, #2
{
    8d44:	4682      	mov	sl, r0
	if (offset > sizeof(u16_t)) {
    8d46:	d856      	bhi.n	8df6 <bt_gatt_attr_write_ccc+0xc2>
	if (offset + len > sizeof(u16_t)) {
    8d48:	4419      	add	r1, r3
    8d4a:	2902      	cmp	r1, #2
    8d4c:	461e      	mov	r6, r3
    8d4e:	dc55      	bgt.n	8dfc <bt_gatt_attr_write_ccc+0xc8>
	return ((u16_t)src[1] << 8) | src[0];
    8d50:	7853      	ldrb	r3, [r2, #1]
    8d52:	7817      	ldrb	r7, [r2, #0]
	for (i = 0; i < ccc->cfg_len; i++) {
    8d54:	2500      	movs	r5, #0
    8d56:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
    8d5a:	6863      	ldr	r3, [r4, #4]
    8d5c:	429d      	cmp	r5, r3
    8d5e:	d207      	bcs.n	8d70 <bt_gatt_attr_write_ccc+0x3c>
		if (!bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    8d60:	6821      	ldr	r1, [r4, #0]
    8d62:	eb01 1105 	add.w	r1, r1, r5, lsl #4
    8d66:	3101      	adds	r1, #1
    8d68:	4650      	mov	r0, sl
    8d6a:	f7fd fb65 	bl	6438 <bt_conn_addr_le_cmp>
    8d6e:	b9a8      	cbnz	r0, 8d9c <bt_gatt_attr_write_ccc+0x68>
	if (i == ccc->cfg_len) {
    8d70:	6863      	ldr	r3, [r4, #4]
    8d72:	429d      	cmp	r5, r3
    8d74:	d12f      	bne.n	8dd6 <bt_gatt_attr_write_ccc+0xa2>
    8d76:	f04f 0800 	mov.w	r8, #0
		for (i = 0; i < ccc->cfg_len; i++) {
    8d7a:	4545      	cmp	r5, r8
    8d7c:	d110      	bne.n	8da0 <bt_gatt_attr_write_ccc+0x6c>
			BT_WARN("No space to store CCC cfg");
    8d7e:	4b21      	ldr	r3, [pc, #132]	; (8e04 <bt_gatt_attr_write_ccc+0xd0>)
    8d80:	9301      	str	r3, [sp, #4]
    8d82:	9300      	str	r3, [sp, #0]
    8d84:	4a20      	ldr	r2, [pc, #128]	; (8e08 <bt_gatt_attr_write_ccc+0xd4>)
    8d86:	4b21      	ldr	r3, [pc, #132]	; (8e0c <bt_gatt_attr_write_ccc+0xd8>)
    8d88:	4921      	ldr	r1, [pc, #132]	; (8e10 <bt_gatt_attr_write_ccc+0xdc>)
    8d8a:	4822      	ldr	r0, [pc, #136]	; (8e14 <bt_gatt_attr_write_ccc+0xe0>)
    8d8c:	f7f9 fa88 	bl	22a0 <printk>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    8d90:	f06f 0610 	mvn.w	r6, #16
}
    8d94:	4630      	mov	r0, r6
    8d96:	b003      	add	sp, #12
    8d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (i = 0; i < ccc->cfg_len; i++) {
    8d9c:	3501      	adds	r5, #1
    8d9e:	e7dc      	b.n	8d5a <bt_gatt_attr_write_ccc+0x26>
    8da0:	ea4f 1b08 	mov.w	fp, r8, lsl #4
			if (ccc->cfg[i].valid) {
    8da4:	6823      	ldr	r3, [r4, #0]
    8da6:	eb03 000b 	add.w	r0, r3, fp
    8daa:	f813 300b 	ldrb.w	r3, [r3, fp]
    8dae:	b113      	cbz	r3, 8db6 <bt_gatt_attr_write_ccc+0x82>
		for (i = 0; i < ccc->cfg_len; i++) {
    8db0:	f108 0801 	add.w	r8, r8, #1
    8db4:	e7e1      	b.n	8d7a <bt_gatt_attr_write_ccc+0x46>
	memcpy(dst, src, sizeof(*dst));
    8db6:	2207      	movs	r2, #7
    8db8:	f10a 0148 	add.w	r1, sl, #72	; 0x48
    8dbc:	3001      	adds	r0, #1
    8dbe:	f7f7 fce8 	bl	792 <memcpy>
			if (value) {
    8dc2:	b11f      	cbz	r7, 8dcc <bt_gatt_attr_write_ccc+0x98>
				ccc->cfg[i].valid = true;
    8dc4:	6823      	ldr	r3, [r4, #0]
    8dc6:	2201      	movs	r2, #1
    8dc8:	f803 200b 	strb.w	r2, [r3, fp]
		if (i == ccc->cfg_len) {
    8dcc:	6863      	ldr	r3, [r4, #4]
    8dce:	4598      	cmp	r8, r3
    8dd0:	d0d5      	beq.n	8d7e <bt_gatt_attr_write_ccc+0x4a>
    8dd2:	4645      	mov	r5, r8
    8dd4:	e003      	b.n	8dde <bt_gatt_attr_write_ccc+0xaa>
	} else if (!value) {
    8dd6:	b917      	cbnz	r7, 8dde <bt_gatt_attr_write_ccc+0xaa>
		ccc->cfg[i].valid = false;
    8dd8:	6822      	ldr	r2, [r4, #0]
    8dda:	012b      	lsls	r3, r5, #4
    8ddc:	54d7      	strb	r7, [r2, r3]
	ccc->cfg[i].value = value;
    8dde:	6823      	ldr	r3, [r4, #0]
    8de0:	eb03 1505 	add.w	r5, r3, r5, lsl #4
	if (ccc->cfg[i].value != ccc->value) {
    8de4:	8923      	ldrh	r3, [r4, #8]
	ccc->cfg[i].value = value;
    8de6:	812f      	strh	r7, [r5, #8]
	if (ccc->cfg[i].value != ccc->value) {
    8de8:	42bb      	cmp	r3, r7
    8dea:	d0d3      	beq.n	8d94 <bt_gatt_attr_write_ccc+0x60>
		gatt_ccc_changed(attr, ccc);
    8dec:	4621      	mov	r1, r4
    8dee:	4648      	mov	r0, r9
    8df0:	f7ff ff7f 	bl	8cf2 <gatt_ccc_changed>
    8df4:	e7ce      	b.n	8d94 <bt_gatt_attr_write_ccc+0x60>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    8df6:	f06f 0606 	mvn.w	r6, #6
    8dfa:	e7cb      	b.n	8d94 <bt_gatt_attr_write_ccc+0x60>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    8dfc:	f06f 060c 	mvn.w	r6, #12
    8e00:	e7c8      	b.n	8d94 <bt_gatt_attr_write_ccc+0x60>
    8e02:	bf00      	nop
    8e04:	00023dbe 	.word	0x00023dbe
    8e08:	00024016 	.word	0x00024016
    8e0c:	00024e21 	.word	0x00024e21
    8e10:	000272e8 	.word	0x000272e8
    8e14:	00024e92 	.word	0x00024e92

00008e18 <gatt_register>:
{
    8e18:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (sys_slist_is_empty(&db)) {
    8e1a:	4a1f      	ldr	r2, [pc, #124]	; (8e98 <gatt_register+0x80>)
	struct bt_gatt_attr *attrs = svc->attrs;
    8e1c:	6801      	ldr	r1, [r0, #0]
	if (sys_slist_is_empty(&db)) {
    8e1e:	6813      	ldr	r3, [r2, #0]
	u16_t count = svc->attr_count;
    8e20:	8885      	ldrh	r5, [r0, #4]
	if (sys_slist_is_empty(&db)) {
    8e22:	b15b      	cbz	r3, 8e3c <gatt_register+0x24>
    8e24:	6853      	ldr	r3, [r2, #4]
	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
    8e26:	2b00      	cmp	r3, #0
    8e28:	d033      	beq.n	8e92 <gatt_register+0x7a>
	handle = last->attrs[last->attr_count - 1].handle;
    8e2a:	f833 4c04 	ldrh.w	r4, [r3, #-4]
    8e2e:	f853 3c08 	ldr.w	r3, [r3, #-8]
    8e32:	2614      	movs	r6, #20
    8e34:	fb06 3304 	mla	r3, r6, r4, r3
    8e38:	f833 3c04 	ldrh.w	r3, [r3, #-4]
    8e3c:	2414      	movs	r4, #20
    8e3e:	fb04 1505 	mla	r5, r4, r5, r1
	for (; attrs && count; attrs++, count--) {
    8e42:	b109      	cbz	r1, 8e48 <gatt_register+0x30>
    8e44:	42a9      	cmp	r1, r5
    8e46:	d108      	bne.n	8e5a <gatt_register+0x42>
	node->next = NULL;
    8e48:	2300      	movs	r3, #0
	sys_slist_append(&db, &svc->node);
    8e4a:	f100 0108 	add.w	r1, r0, #8
    8e4e:	6083      	str	r3, [r0, #8]
	if (!list->tail) {
    8e50:	6850      	ldr	r0, [r2, #4]
    8e52:	b9d0      	cbnz	r0, 8e8a <gatt_register+0x72>
		list->tail = node;
    8e54:	6051      	str	r1, [r2, #4]
		list->head = node;
    8e56:	6011      	str	r1, [r2, #0]
    8e58:	e015      	b.n	8e86 <gatt_register+0x6e>
		if (!attrs->handle) {
    8e5a:	8a0c      	ldrh	r4, [r1, #16]
    8e5c:	b92c      	cbnz	r4, 8e6a <gatt_register+0x52>
			attrs->handle = ++handle;
    8e5e:	3301      	adds	r3, #1
    8e60:	b29c      	uxth	r4, r3
    8e62:	820c      	strh	r4, [r1, #16]
	for (; attrs && count; attrs++, count--) {
    8e64:	3114      	adds	r1, #20
    8e66:	4623      	mov	r3, r4
    8e68:	e7eb      	b.n	8e42 <gatt_register+0x2a>
		} else if (attrs->handle > handle) {
    8e6a:	42a3      	cmp	r3, r4
    8e6c:	d3fa      	bcc.n	8e64 <gatt_register+0x4c>
			BT_ERR("Unable to register handle 0x%04x",
    8e6e:	4b0b      	ldr	r3, [pc, #44]	; (8e9c <gatt_register+0x84>)
    8e70:	9302      	str	r3, [sp, #8]
    8e72:	e88d 0018 	stmia.w	sp, {r3, r4}
    8e76:	4a0a      	ldr	r2, [pc, #40]	; (8ea0 <gatt_register+0x88>)
    8e78:	4b0a      	ldr	r3, [pc, #40]	; (8ea4 <gatt_register+0x8c>)
    8e7a:	490b      	ldr	r1, [pc, #44]	; (8ea8 <gatt_register+0x90>)
    8e7c:	480b      	ldr	r0, [pc, #44]	; (8eac <gatt_register+0x94>)
    8e7e:	f7f9 fa0f 	bl	22a0 <printk>
			return -EINVAL;
    8e82:	f06f 0015 	mvn.w	r0, #21
}
    8e86:	b004      	add	sp, #16
    8e88:	bd70      	pop	{r4, r5, r6, pc}
		list->tail->next = node;
    8e8a:	6001      	str	r1, [r0, #0]
		list->tail = node;
    8e8c:	6051      	str	r1, [r2, #4]
	return 0;
    8e8e:	4618      	mov	r0, r3
    8e90:	e7f9      	b.n	8e86 <gatt_register+0x6e>
	handle = last->attrs[last->attr_count - 1].handle;
    8e92:	681b      	ldr	r3, [r3, #0]
    8e94:	deff      	udf	#255	; 0xff
    8e96:	bf00      	nop
    8e98:	200006d4 	.word	0x200006d4
    8e9c:	00023dbe 	.word	0x00023dbe
    8ea0:	00022d86 	.word	0x00022d86
    8ea4:	00024dfc 	.word	0x00024dfc
    8ea8:	000272e8 	.word	0x000272e8
    8eac:	00024f56 	.word	0x00024f56

00008eb0 <gatt_notify>:
{
    8eb0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    8eb4:	468a      	mov	sl, r1
    8eb6:	4691      	mov	r9, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    8eb8:	211b      	movs	r1, #27
    8eba:	1c9a      	adds	r2, r3, #2
{
    8ebc:	4680      	mov	r8, r0
    8ebe:	461e      	mov	r6, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    8ec0:	f7ff fa90 	bl	83e4 <bt_att_create_pdu>
	if (!buf) {
    8ec4:	4604      	mov	r4, r0
    8ec6:	b968      	cbnz	r0, 8ee4 <gatt_notify+0x34>
		BT_WARN("No buffer available to send notification");
    8ec8:	4b13      	ldr	r3, [pc, #76]	; (8f18 <gatt_notify+0x68>)
    8eca:	9301      	str	r3, [sp, #4]
    8ecc:	9300      	str	r3, [sp, #0]
    8ece:	4a13      	ldr	r2, [pc, #76]	; (8f1c <gatt_notify+0x6c>)
    8ed0:	4b13      	ldr	r3, [pc, #76]	; (8f20 <gatt_notify+0x70>)
    8ed2:	4914      	ldr	r1, [pc, #80]	; (8f24 <gatt_notify+0x74>)
    8ed4:	4814      	ldr	r0, [pc, #80]	; (8f28 <gatt_notify+0x78>)
    8ed6:	f7f9 f9e3 	bl	22a0 <printk>
    8eda:	f06f 000b 	mvn.w	r0, #11
}
    8ede:	b002      	add	sp, #8
    8ee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	nfy = net_buf_add(buf, sizeof(*nfy));
    8ee4:	f100 0708 	add.w	r7, r0, #8
    8ee8:	2102      	movs	r1, #2
    8eea:	4638      	mov	r0, r7
    8eec:	f010 fa5e 	bl	193ac <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    8ef0:	4605      	mov	r5, r0
	net_buf_add(buf, len);
    8ef2:	4631      	mov	r1, r6
	nfy->handle = sys_cpu_to_le16(handle);
    8ef4:	f825 ab02 	strh.w	sl, [r5], #2
	net_buf_add(buf, len);
    8ef8:	4638      	mov	r0, r7
    8efa:	f010 fa57 	bl	193ac <net_buf_simple_add>
	memcpy(nfy->value, data, len);
    8efe:	4632      	mov	r2, r6
    8f00:	4649      	mov	r1, r9
    8f02:	4628      	mov	r0, r5
    8f04:	f7f7 fc45 	bl	792 <memcpy>
    8f08:	4640      	mov	r0, r8
    8f0a:	2300      	movs	r3, #0
    8f0c:	4622      	mov	r2, r4
    8f0e:	2104      	movs	r1, #4
    8f10:	f7fd feae 	bl	6c70 <bt_l2cap_send_cb>
	return 0;
    8f14:	2000      	movs	r0, #0
    8f16:	e7e2      	b.n	8ede <gatt_notify+0x2e>
    8f18:	00023dbe 	.word	0x00023dbe
    8f1c:	00024016 	.word	0x00024016
    8f20:	00024e38 	.word	0x00024e38
    8f24:	000272e8 	.word	0x000272e8
    8f28:	00024f1d 	.word	0x00024f1d

00008f2c <gatt_indicate>:
	return err;
}

static int gatt_indicate(struct bt_conn *conn,
			 struct bt_gatt_indicate_params *params)
{
    8f2c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct net_buf *buf;
	struct bt_att_indicate *ind;

	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
				sizeof(*ind) + params->len);
    8f30:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
{
    8f32:	460c      	mov	r4, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    8f34:	3202      	adds	r2, #2
    8f36:	211d      	movs	r1, #29
{
    8f38:	4680      	mov	r8, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    8f3a:	f7ff fa53 	bl	83e4 <bt_att_create_pdu>
	if (!buf) {
    8f3e:	4605      	mov	r5, r0
    8f40:	b970      	cbnz	r0, 8f60 <gatt_indicate+0x34>
		BT_WARN("No buffer available to send indication");
    8f42:	4b1e      	ldr	r3, [pc, #120]	; (8fbc <gatt_indicate+0x90>)
    8f44:	9301      	str	r3, [sp, #4]
    8f46:	9300      	str	r3, [sp, #0]
    8f48:	4a1d      	ldr	r2, [pc, #116]	; (8fc0 <gatt_indicate+0x94>)
    8f4a:	4b1e      	ldr	r3, [pc, #120]	; (8fc4 <gatt_indicate+0x98>)
    8f4c:	491e      	ldr	r1, [pc, #120]	; (8fc8 <gatt_indicate+0x9c>)
    8f4e:	481f      	ldr	r0, [pc, #124]	; (8fcc <gatt_indicate+0xa0>)
    8f50:	f7f9 f9a6 	bl	22a0 <printk>
    8f54:	f06f 040b 	mvn.w	r4, #11

	net_buf_add(buf, params->len);
	memcpy(ind->value, params->data, params->len);

	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
}
    8f58:	4620      	mov	r0, r4
    8f5a:	b004      	add	sp, #16
    8f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ind = net_buf_add(buf, sizeof(*ind));
    8f60:	f100 0608 	add.w	r6, r0, #8
    8f64:	2102      	movs	r1, #2
    8f66:	4630      	mov	r0, r6
    8f68:	f010 fa20 	bl	193ac <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(params->attr->handle);
    8f6c:	69a3      	ldr	r3, [r4, #24]
	net_buf_add(buf, params->len);
    8f6e:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
	ind->handle = sys_cpu_to_le16(params->attr->handle);
    8f70:	8a1b      	ldrh	r3, [r3, #16]
    8f72:	4607      	mov	r7, r0
	net_buf_add(buf, params->len);
    8f74:	4630      	mov	r0, r6
	ind->handle = sys_cpu_to_le16(params->attr->handle);
    8f76:	f827 3b02 	strh.w	r3, [r7], #2
	net_buf_add(buf, params->len);
    8f7a:	f010 fa17 	bl	193ac <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    8f7e:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    8f80:	6a21      	ldr	r1, [r4, #32]
    8f82:	4638      	mov	r0, r7
    8f84:	f7f7 fc05 	bl	792 <memcpy>
		req->func = func;
    8f88:	4b11      	ldr	r3, [pc, #68]	; (8fd0 <gatt_indicate+0xa4>)
    8f8a:	6063      	str	r3, [r4, #4]
		req->destroy = destroy;
    8f8c:	2300      	movs	r3, #0
		req->buf = buf;
    8f8e:	6125      	str	r5, [r4, #16]
		req->destroy = destroy;
    8f90:	60a3      	str	r3, [r4, #8]
		err = bt_att_req_send(conn, req);
    8f92:	4621      	mov	r1, r4
    8f94:	4640      	mov	r0, r8
    8f96:	f7ff fe83 	bl	8ca0 <bt_att_req_send>
	if (err) {
    8f9a:	4604      	mov	r4, r0
    8f9c:	2800      	cmp	r0, #0
    8f9e:	d0db      	beq.n	8f58 <gatt_indicate+0x2c>
		BT_ERR("Error sending ATT PDU: %d", err);
    8fa0:	4b06      	ldr	r3, [pc, #24]	; (8fbc <gatt_indicate+0x90>)
    8fa2:	9302      	str	r3, [sp, #8]
    8fa4:	e88d 0018 	stmia.w	sp, {r3, r4}
    8fa8:	4a0a      	ldr	r2, [pc, #40]	; (8fd4 <gatt_indicate+0xa8>)
    8faa:	4b0b      	ldr	r3, [pc, #44]	; (8fd8 <gatt_indicate+0xac>)
    8fac:	4906      	ldr	r1, [pc, #24]	; (8fc8 <gatt_indicate+0x9c>)
    8fae:	480b      	ldr	r0, [pc, #44]	; (8fdc <gatt_indicate+0xb0>)
    8fb0:	f7f9 f976 	bl	22a0 <printk>
		net_buf_unref(buf);
    8fb4:	4628      	mov	r0, r5
    8fb6:	f010 f99b 	bl	192f0 <net_buf_unref>
    8fba:	e7cd      	b.n	8f58 <gatt_indicate+0x2c>
    8fbc:	00023dbe 	.word	0x00023dbe
    8fc0:	00024016 	.word	0x00024016
    8fc4:	00024e4e 	.word	0x00024e4e
    8fc8:	000272e8 	.word	0x000272e8
    8fcc:	00024ebc 	.word	0x00024ebc
    8fd0:	00008d25 	.word	0x00008d25
    8fd4:	00022d86 	.word	0x00022d86
    8fd8:	00024e44 	.word	0x00024e44
    8fdc:	00024ef3 	.word	0x00024ef3

00008fe0 <sc_indicate.constprop.17>:
static void sc_indicate(struct gatt_sc *sc, uint16_t start, uint16_t end)
    8fe0:	b510      	push	{r4, lr}
    8fe2:	4b17      	ldr	r3, [pc, #92]	; (9040 <sc_indicate.constprop.17+0x60>)
    8fe4:	f3bf 8f5b 	dmb	ish
    8fe8:	f103 0254 	add.w	r2, r3, #84	; 0x54
    8fec:	e852 4f00 	ldrex	r4, [r2]
    8ff0:	f044 0e01 	orr.w	lr, r4, #1
    8ff4:	e842 ec00 	strex	ip, lr, [r2]
    8ff8:	f1bc 0f00 	cmp.w	ip, #0
    8ffc:	d1f6      	bne.n	8fec <sc_indicate.constprop.17+0xc>
    8ffe:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(sc->flags, SC_RANGE_CHANGED)) {
    9002:	07e2      	lsls	r2, r4, #31
    9004:	d402      	bmi.n	900c <sc_indicate.constprop.17+0x2c>
		sc->start = start;
    9006:	8518      	strh	r0, [r3, #40]	; 0x28
		*end = new_end;
    9008:	8559      	strh	r1, [r3, #42]	; 0x2a
    900a:	e00a      	b.n	9022 <sc_indicate.constprop.17+0x42>
	if (new_start >= *start && new_end <= *end) {
    900c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    900e:	4282      	cmp	r2, r0
    9010:	d803      	bhi.n	901a <sc_indicate.constprop.17+0x3a>
    9012:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    9014:	428a      	cmp	r2, r1
    9016:	d301      	bcc.n	901c <sc_indicate.constprop.17+0x3c>
    9018:	bd10      	pop	{r4, pc}
		*start = new_start;
    901a:	8518      	strh	r0, [r3, #40]	; 0x28
	if (*end < new_end) {
    901c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    901e:	428a      	cmp	r2, r1
    9020:	d3f2      	bcc.n	9008 <sc_indicate.constprop.17+0x28>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    9022:	f3bf 8f5b 	dmb	ish
    9026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    9028:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(sc->flags, SC_INDICATE_PENDING)) {
    902c:	079b      	lsls	r3, r3, #30
    902e:	d406      	bmi.n	903e <sc_indicate.constprop.17+0x5e>
    9030:	220a      	movs	r2, #10
    9032:	4904      	ldr	r1, [pc, #16]	; (9044 <sc_indicate.constprop.17+0x64>)
    9034:	4804      	ldr	r0, [pc, #16]	; (9048 <sc_indicate.constprop.17+0x68>)
}
    9036:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    903a:	f019 b95f 	b.w	222fc <k_delayed_work_submit_to_queue>
    903e:	bd10      	pop	{r4, pc}
    9040:	200006dc 	.word	0x200006dc
    9044:	20000708 	.word	0x20000708
    9048:	20003340 	.word	0x20003340

0000904c <connected_cb>:
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    904c:	6882      	ldr	r2, [r0, #8]
    904e:	4b19      	ldr	r3, [pc, #100]	; (90b4 <connected_cb+0x68>)
    9050:	429a      	cmp	r2, r3
{
    9052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9056:	4607      	mov	r7, r0
    9058:	460c      	mov	r4, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    905a:	d126      	bne.n	90aa <connected_cb+0x5e>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    905c:	68c5      	ldr	r5, [r0, #12]

	for (i = 0; i < ccc->cfg_len; i++) {
    905e:	2600      	movs	r6, #0
    9060:	686b      	ldr	r3, [r5, #4]
    9062:	429e      	cmp	r6, r3
    9064:	d221      	bcs.n	90aa <connected_cb+0x5e>
		/* Ignore configuration for different peer */
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    9066:	6829      	ldr	r1, [r5, #0]
    9068:	ea4f 1806 	mov.w	r8, r6, lsl #4
    906c:	4441      	add	r1, r8
    906e:	3101      	adds	r1, #1
    9070:	4620      	mov	r0, r4
    9072:	f7fd f9e1 	bl	6438 <bt_conn_addr_le_cmp>
    9076:	b9d8      	cbnz	r0, 90b0 <connected_cb+0x64>
			continue;
		}

		if (ccc->cfg[i].value) {
    9078:	682b      	ldr	r3, [r5, #0]
    907a:	4443      	add	r3, r8
    907c:	891b      	ldrh	r3, [r3, #8]
    907e:	b1bb      	cbz	r3, 90b0 <connected_cb+0x64>
			gatt_ccc_changed(attr, ccc);
    9080:	4629      	mov	r1, r5
    9082:	4638      	mov	r0, r7
    9084:	f7ff fe35 	bl	8cf2 <gatt_ccc_changed>
			if (ccc->cfg == sc_ccc_cfg) {
    9088:	682c      	ldr	r4, [r5, #0]
    908a:	4b0b      	ldr	r3, [pc, #44]	; (90b8 <connected_cb+0x6c>)
    908c:	429c      	cmp	r4, r3
    908e:	d10c      	bne.n	90aa <connected_cb+0x5e>
				sc_restore(&ccc->cfg[i]);
    9090:	4444      	add	r4, r8
	if (!data->start && !data->end) {
    9092:	89a0      	ldrh	r0, [r4, #12]
    9094:	89e1      	ldrh	r1, [r4, #14]
    9096:	b900      	cbnz	r0, 909a <connected_cb+0x4e>
    9098:	b139      	cbz	r1, 90aa <connected_cb+0x5e>
	sc_indicate(&gatt_sc, data->start, data->end);
    909a:	f7ff ffa1 	bl	8fe0 <sc_indicate.constprop.17>
	memset(cfg->data, 0, sizeof(cfg->data));
    909e:	2204      	movs	r2, #4
    90a0:	2100      	movs	r1, #0
    90a2:	f104 000c 	add.w	r0, r4, #12
    90a6:	f7f7 fba0 	bl	7ea <memset>
			return BT_GATT_ITER_CONTINUE;
		}
	}

	return BT_GATT_ITER_CONTINUE;
}
    90aa:	2001      	movs	r0, #1
    90ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0; i < ccc->cfg_len; i++) {
    90b0:	3601      	adds	r6, #1
    90b2:	e7d5      	b.n	9060 <connected_cb+0x14>
    90b4:	00008d35 	.word	0x00008d35
    90b8:	20000734 	.word	0x20000734

000090bc <sc_indicate_rsp>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    90bc:	490d      	ldr	r1, [pc, #52]	; (90f4 <sc_indicate_rsp+0x38>)
    90be:	f3bf 8f5b 	dmb	ish
    90c2:	f101 0354 	add.w	r3, r1, #84	; 0x54
    90c6:	e853 2f00 	ldrex	r2, [r3]
    90ca:	f022 0202 	bic.w	r2, r2, #2
    90ce:	e843 2000 	strex	r0, r2, [r3]
    90d2:	2800      	cmp	r0, #0
    90d4:	d1f7      	bne.n	90c6 <sc_indicate_rsp+0xa>
    90d6:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    90da:	f3bf 8f5b 	dmb	ish
    90de:	6d4b      	ldr	r3, [r1, #84]	; 0x54
    90e0:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    90e4:	07db      	lsls	r3, r3, #31
    90e6:	d504      	bpl.n	90f2 <sc_indicate_rsp+0x36>
    90e8:	2200      	movs	r2, #0
    90ea:	312c      	adds	r1, #44	; 0x2c
    90ec:	4802      	ldr	r0, [pc, #8]	; (90f8 <sc_indicate_rsp+0x3c>)
    90ee:	f019 b905 	b.w	222fc <k_delayed_work_submit_to_queue>
    90f2:	4770      	bx	lr
    90f4:	200006dc 	.word	0x200006dc
    90f8:	20003340 	.word	0x20003340

000090fc <read_appearance>:
{
    90fc:	b513      	push	{r0, r1, r4, lr}
    90fe:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    9102:	4610      	mov	r0, r2
	if (offset > value_len) {
    9104:	2902      	cmp	r1, #2
	u16_t appearance = sys_cpu_to_le16(gap_appearance);
    9106:	f04f 0200 	mov.w	r2, #0
    910a:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
    910e:	d80d      	bhi.n	912c <read_appearance+0x30>
	len = min(buf_len, value_len - offset);
    9110:	f1c1 0402 	rsb	r4, r1, #2
    9114:	429c      	cmp	r4, r3
    9116:	bfa8      	it	ge
    9118:	461c      	movge	r4, r3
	memcpy(buf, value + offset, len);
    911a:	f10d 0306 	add.w	r3, sp, #6
    911e:	4622      	mov	r2, r4
    9120:	4419      	add	r1, r3
    9122:	f7f7 fb36 	bl	792 <memcpy>
}
    9126:	4620      	mov	r0, r4
    9128:	b002      	add	sp, #8
    912a:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    912c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
    9130:	e7f9      	b.n	9126 <read_appearance+0x2a>
	...

00009134 <disconnected_cb>:

static u8_t disconnected_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    9134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    9138:	6882      	ldr	r2, [r0, #8]
    913a:	4b24      	ldr	r3, [pc, #144]	; (91cc <disconnected_cb+0x98>)
    913c:	429a      	cmp	r2, r3
{
    913e:	4607      	mov	r7, r0
    9140:	4688      	mov	r8, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    9142:	d129      	bne.n	9198 <disconnected_cb+0x64>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    9144:	68c4      	ldr	r4, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
    9146:	8923      	ldrh	r3, [r4, #8]
    9148:	b333      	cbz	r3, 9198 <disconnected_cb+0x64>
    914a:	2600      	movs	r6, #0

				bt_conn_unref(tmp);
			}
		} else {
			/* Clear value if not paired */
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
    914c:	f101 0948 	add.w	r9, r1, #72	; 0x48
	for (i = 0; i < ccc->cfg_len; i++) {
    9150:	6863      	ldr	r3, [r4, #4]
    9152:	429e      	cmp	r6, r3
    9154:	d30b      	bcc.n	916e <disconnected_cb+0x3a>
			}
		}
	}

	/* Reset value while disconnected */
	memset(&ccc->value, 0, sizeof(ccc->value));
    9156:	2202      	movs	r2, #2
    9158:	2100      	movs	r1, #0
    915a:	f104 0008 	add.w	r0, r4, #8
    915e:	f7f7 fb44 	bl	7ea <memset>
	if (ccc->cfg_changed) {
    9162:	68e3      	ldr	r3, [r4, #12]
    9164:	b1c3      	cbz	r3, 9198 <disconnected_cb+0x64>
		ccc->cfg_changed(attr, ccc->value);
    9166:	8921      	ldrh	r1, [r4, #8]
    9168:	4638      	mov	r0, r7
    916a:	4798      	blx	r3
    916c:	e014      	b.n	9198 <disconnected_cb+0x64>
		if (!ccc->cfg[i].value) {
    916e:	6821      	ldr	r1, [r4, #0]
    9170:	0135      	lsls	r5, r6, #4
    9172:	4429      	add	r1, r5
    9174:	890b      	ldrh	r3, [r1, #8]
    9176:	b1a3      	cbz	r3, 91a2 <disconnected_cb+0x6e>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    9178:	3101      	adds	r1, #1
    917a:	4640      	mov	r0, r8
    917c:	f7fd f95c 	bl	6438 <bt_conn_addr_le_cmp>
    9180:	b188      	cbz	r0, 91a6 <disconnected_cb+0x72>
			tmp = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    9182:	6820      	ldr	r0, [r4, #0]
    9184:	4428      	add	r0, r5
    9186:	3001      	adds	r0, #1
    9188:	f7fd f96e 	bl	6468 <bt_conn_lookup_addr_le>
			if (tmp) {
    918c:	b148      	cbz	r0, 91a2 <disconnected_cb+0x6e>
				if (tmp->state == BT_CONN_CONNECTED) {
    918e:	7b03      	ldrb	r3, [r0, #12]
    9190:	2b03      	cmp	r3, #3
    9192:	d104      	bne.n	919e <disconnected_cb+0x6a>
					bt_conn_unref(tmp);
    9194:	f7fd f9a4 	bl	64e0 <bt_conn_unref>
	}

	BT_DBG("ccc %p reseted", ccc);

	return BT_GATT_ITER_CONTINUE;
}
    9198:	2001      	movs	r0, #1
    919a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				bt_conn_unref(tmp);
    919e:	f7fd f99f 	bl	64e0 <bt_conn_unref>
	for (i = 0; i < ccc->cfg_len; i++) {
    91a2:	3601      	adds	r6, #1
    91a4:	e7d4      	b.n	9150 <disconnected_cb+0x1c>
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
    91a6:	4648      	mov	r0, r9
    91a8:	f7fc fb68 	bl	587c <bt_addr_le_is_bonded>
    91ac:	6823      	ldr	r3, [r4, #0]
    91ae:	4601      	mov	r1, r0
				ccc->cfg[i].valid = false;
    91b0:	1958      	adds	r0, r3, r5
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
    91b2:	b929      	cbnz	r1, 91c0 <disconnected_cb+0x8c>
				ccc->cfg[i].valid = false;
    91b4:	5559      	strb	r1, [r3, r5]
				memset(&ccc->cfg[i].value, 0,
    91b6:	2202      	movs	r2, #2
    91b8:	3008      	adds	r0, #8
    91ba:	f7f7 fb16 	bl	7ea <memset>
    91be:	e7f0      	b.n	91a2 <disconnected_cb+0x6e>
    91c0:	2207      	movs	r2, #7
    91c2:	4649      	mov	r1, r9
    91c4:	3001      	adds	r0, #1
    91c6:	f7f7 fae4 	bl	792 <memcpy>
    91ca:	e7ea      	b.n	91a2 <disconnected_cb+0x6e>
    91cc:	00008d35 	.word	0x00008d35

000091d0 <read_name>:
{
    91d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
				 strlen(gap_name));
    91d4:	4e0d      	ldr	r6, [pc, #52]	; (920c <read_name+0x3c>)
{
    91d6:	f8bd 5018 	ldrh.w	r5, [sp, #24]
				 strlen(gap_name));
    91da:	4630      	mov	r0, r6
{
    91dc:	4698      	mov	r8, r3
    91de:	4617      	mov	r7, r2
				 strlen(gap_name));
    91e0:	f7f7 fa95 	bl	70e <strlen>
	if (offset > value_len) {
    91e4:	b283      	uxth	r3, r0
    91e6:	42ab      	cmp	r3, r5
    91e8:	d30d      	bcc.n	9206 <read_name+0x36>
	len = min(buf_len, value_len - offset);
    91ea:	1b5c      	subs	r4, r3, r5
    91ec:	4544      	cmp	r4, r8
    91ee:	4623      	mov	r3, r4
    91f0:	bfa8      	it	ge
    91f2:	4643      	movge	r3, r8
    91f4:	b29c      	uxth	r4, r3
	memcpy(buf, value + offset, len);
    91f6:	4622      	mov	r2, r4
    91f8:	1971      	adds	r1, r6, r5
    91fa:	4638      	mov	r0, r7
    91fc:	f7f7 fac9 	bl	792 <memcpy>
}
    9200:	4620      	mov	r0, r4
    9202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    9206:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, gap_name,
    920a:	e7f9      	b.n	9200 <read_name+0x30>
    920c:	00024f87 	.word	0x00024f87

00009210 <bt_gatt_attr_read_ccc>:
{
    9210:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	struct _bt_gatt_ccc *ccc = attr->user_data;
    9214:	68ce      	ldr	r6, [r1, #12]
{
    9216:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
    921a:	4604      	mov	r4, r0
    921c:	4690      	mov	r8, r2
    921e:	4699      	mov	r9, r3
	for (i = 0; i < ccc->cfg_len; i++) {
    9220:	2500      	movs	r5, #0
    9222:	6873      	ldr	r3, [r6, #4]
    9224:	429d      	cmp	r5, r3
    9226:	d20f      	bcs.n	9248 <bt_gatt_attr_read_ccc+0x38>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    9228:	6831      	ldr	r1, [r6, #0]
    922a:	ea4f 1a05 	mov.w	sl, r5, lsl #4
    922e:	4451      	add	r1, sl
    9230:	3101      	adds	r1, #1
    9232:	4620      	mov	r0, r4
    9234:	f7fd f900 	bl	6438 <bt_conn_addr_le_cmp>
    9238:	b108      	cbz	r0, 923e <bt_gatt_attr_read_ccc+0x2e>
	for (i = 0; i < ccc->cfg_len; i++) {
    923a:	3501      	adds	r5, #1
    923c:	e7f1      	b.n	9222 <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(ccc->cfg[i].value);
    923e:	6832      	ldr	r2, [r6, #0]
    9240:	4452      	add	r2, sl
    9242:	8913      	ldrh	r3, [r2, #8]
    9244:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (i == ccc->cfg_len) {
    9248:	6873      	ldr	r3, [r6, #4]
    924a:	429d      	cmp	r5, r3
		value = 0x0000;
    924c:	bf04      	itt	eq
    924e:	2300      	moveq	r3, #0
    9250:	f8ad 3006 	strheq.w	r3, [sp, #6]
	if (offset > value_len) {
    9254:	2f02      	cmp	r7, #2
    9256:	d80f      	bhi.n	9278 <bt_gatt_attr_read_ccc+0x68>
	len = min(buf_len, value_len - offset);
    9258:	f1c7 0402 	rsb	r4, r7, #2
    925c:	454c      	cmp	r4, r9
    925e:	bfa8      	it	ge
    9260:	464c      	movge	r4, r9
	memcpy(buf, value + offset, len);
    9262:	f10d 0306 	add.w	r3, sp, #6
    9266:	4622      	mov	r2, r4
    9268:	19d9      	adds	r1, r3, r7
    926a:	4640      	mov	r0, r8
    926c:	f7f7 fa91 	bl	792 <memcpy>
}
    9270:	4620      	mov	r0, r4
    9272:	b002      	add	sp, #8
    9274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    9278:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
    927c:	e7f8      	b.n	9270 <bt_gatt_attr_read_ccc+0x60>

0000927e <bt_gatt_attr_read_service>:
{
    927e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
    9280:	68c9      	ldr	r1, [r1, #12]
{
    9282:	f8bd 5018 	ldrh.w	r5, [sp, #24]
    9286:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
    9288:	780a      	ldrb	r2, [r1, #0]
    928a:	b992      	cbnz	r2, 92b2 <bt_gatt_attr_read_service+0x34>
		u16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
    928c:	884a      	ldrh	r2, [r1, #2]
    928e:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
    9292:	2d02      	cmp	r5, #2
    9294:	d819      	bhi.n	92ca <bt_gatt_attr_read_service+0x4c>
	len = min(buf_len, value_len - offset);
    9296:	f1c5 0402 	rsb	r4, r5, #2
    929a:	429c      	cmp	r4, r3
    929c:	bfa8      	it	ge
    929e:	461c      	movge	r4, r3
	memcpy(buf, value + offset, len);
    92a0:	f10d 0306 	add.w	r3, sp, #6
    92a4:	4622      	mov	r2, r4
    92a6:	1959      	adds	r1, r3, r5
    92a8:	f7f7 fa73 	bl	792 <memcpy>
}
    92ac:	4620      	mov	r0, r4
    92ae:	b003      	add	sp, #12
    92b0:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
    92b2:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
    92b4:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
    92b8:	d807      	bhi.n	92ca <bt_gatt_attr_read_service+0x4c>
	len = min(buf_len, value_len - offset);
    92ba:	f1c5 0410 	rsb	r4, r5, #16
    92be:	429c      	cmp	r4, r3
    92c0:	bfa8      	it	ge
    92c2:	461c      	movge	r4, r3
	memcpy(buf, value + offset, len);
    92c4:	4622      	mov	r2, r4
    92c6:	4429      	add	r1, r5
    92c8:	e7ee      	b.n	92a8 <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    92ca:	f06f 0406 	mvn.w	r4, #6
    92ce:	e7ed      	b.n	92ac <bt_gatt_attr_read_service+0x2e>

000092d0 <notify_cb>:
{
    92d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    92d4:	f642 1302 	movw	r3, #10498	; 0x2902
{
    92d8:	4605      	mov	r5, r0
    92da:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    92dc:	2400      	movs	r4, #0
    92de:	4669      	mov	r1, sp
    92e0:	6800      	ldr	r0, [r0, #0]
    92e2:	f88d 4000 	strb.w	r4, [sp]
    92e6:	f8ad 3002 	strh.w	r3, [sp, #2]
    92ea:	f7fa f8e9 	bl	34c0 <bt_uuid_cmp>
    92ee:	b178      	cbz	r0, 9310 <notify_cb+0x40>
		if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    92f0:	f642 0303 	movw	r3, #10243	; 0x2803
    92f4:	6828      	ldr	r0, [r5, #0]
    92f6:	f88d 4004 	strb.w	r4, [sp, #4]
    92fa:	a901      	add	r1, sp, #4
    92fc:	f8ad 3006 	strh.w	r3, [sp, #6]
    9300:	f7fa f8de 	bl	34c0 <bt_uuid_cmp>
			return BT_GATT_ITER_STOP;
    9304:	1b00      	subs	r0, r0, r4
    9306:	bf18      	it	ne
    9308:	2001      	movne	r0, #1
}
    930a:	b003      	add	sp, #12
    930c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (attr->write != bt_gatt_attr_write_ccc) {
    9310:	68aa      	ldr	r2, [r5, #8]
    9312:	4b2c      	ldr	r3, [pc, #176]	; (93c4 <notify_cb+0xf4>)
    9314:	429a      	cmp	r2, r3
    9316:	d001      	beq.n	931c <notify_cb+0x4c>
		return BT_GATT_ITER_CONTINUE;
    9318:	2001      	movs	r0, #1
    931a:	e7f6      	b.n	930a <notify_cb+0x3a>
	ccc = attr->user_data;
    931c:	68ef      	ldr	r7, [r5, #12]
    931e:	4d2a      	ldr	r5, [pc, #168]	; (93c8 <notify_cb+0xf8>)
	for (i = 0; i < ccc->cfg_len; i++) {
    9320:	4604      	mov	r4, r0
    9322:	46a8      	mov	r8, r5
    9324:	4681      	mov	r9, r0
    9326:	687b      	ldr	r3, [r7, #4]
    9328:	429c      	cmp	r4, r3
    932a:	d2f5      	bcs.n	9318 <notify_cb+0x48>
		if (ccc->cfg[i].value != data->type) {
    932c:	6838      	ldr	r0, [r7, #0]
    932e:	88b3      	ldrh	r3, [r6, #4]
    9330:	eb00 1004 	add.w	r0, r0, r4, lsl #4
    9334:	8902      	ldrh	r2, [r0, #8]
    9336:	429a      	cmp	r2, r3
    9338:	d115      	bne.n	9366 <notify_cb+0x96>
		conn = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    933a:	3001      	adds	r0, #1
    933c:	f7fd f894 	bl	6468 <bt_conn_lookup_addr_le>
		if (!conn) {
    9340:	4683      	mov	fp, r0
    9342:	b9f8      	cbnz	r0, 9384 <notify_cb+0xb4>
			if (ccc->cfg == sc_ccc_cfg) {
    9344:	683b      	ldr	r3, [r7, #0]
    9346:	4543      	cmp	r3, r8
    9348:	d10d      	bne.n	9366 <notify_cb+0x96>
				sc_save(&ccc->cfg[i], data->params);
    934a:	6973      	ldr	r3, [r6, #20]
	memcpy(&data, params->data, params->len);
    934c:	a801      	add	r0, sp, #4
    934e:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
    9350:	6a19      	ldr	r1, [r3, #32]
    9352:	f7f7 fa1e 	bl	792 <memcpy>
	if (!stored->start && !stored->end) {
    9356:	89a8      	ldrh	r0, [r5, #12]
	data.end = sys_le16_to_cpu(data.end);
    9358:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    935c:	89ea      	ldrh	r2, [r5, #14]
	if (!stored->start && !stored->end) {
    935e:	b928      	cbnz	r0, 936c <notify_cb+0x9c>
    9360:	b942      	cbnz	r2, 9374 <notify_cb+0xa4>
		*stored = data;
    9362:	9801      	ldr	r0, [sp, #4]
    9364:	60e8      	str	r0, [r5, #12]
	for (i = 0; i < ccc->cfg_len; i++) {
    9366:	3401      	adds	r4, #1
    9368:	3510      	adds	r5, #16
    936a:	e7dc      	b.n	9326 <notify_cb+0x56>
	data.start = sys_le16_to_cpu(data.start);
    936c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
	if (new_start >= *start && new_end <= *end) {
    9370:	4281      	cmp	r1, r0
    9372:	d305      	bcc.n	9380 <notify_cb+0xb0>
    9374:	429a      	cmp	r2, r3
    9376:	d2f6      	bcs.n	9366 <notify_cb+0x96>
	if (*end < new_end) {
    9378:	429a      	cmp	r2, r3
    937a:	d2f4      	bcs.n	9366 <notify_cb+0x96>
		*end = new_end;
    937c:	81eb      	strh	r3, [r5, #14]
    937e:	e7f2      	b.n	9366 <notify_cb+0x96>
		*start = new_start;
    9380:	81a9      	strh	r1, [r5, #12]
    9382:	e7f9      	b.n	9378 <notify_cb+0xa8>
		if (conn->state != BT_CONN_CONNECTED) {
    9384:	7b03      	ldrb	r3, [r0, #12]
    9386:	2b03      	cmp	r3, #3
    9388:	d002      	beq.n	9390 <notify_cb+0xc0>
			bt_conn_unref(conn);
    938a:	f7fd f8a9 	bl	64e0 <bt_conn_unref>
    938e:	e7ea      	b.n	9366 <notify_cb+0x96>
		if (data->type == BT_GATT_CCC_INDICATE) {
    9390:	88b3      	ldrh	r3, [r6, #4]
    9392:	2b02      	cmp	r3, #2
    9394:	d10c      	bne.n	93b0 <notify_cb+0xe0>
			err = gatt_indicate(conn, data->params);
    9396:	6971      	ldr	r1, [r6, #20]
    9398:	f7ff fdc8 	bl	8f2c <gatt_indicate>
			err = gatt_notify(conn, data->attr->handle, data->data,
    939c:	4682      	mov	sl, r0
		bt_conn_unref(conn);
    939e:	4658      	mov	r0, fp
    93a0:	f7fd f89e 	bl	64e0 <bt_conn_unref>
		if (err < 0) {
    93a4:	f1ba 0f00 	cmp.w	sl, #0
    93a8:	db09      	blt.n	93be <notify_cb+0xee>
		data->err = 0;
    93aa:	f8c6 9000 	str.w	r9, [r6]
    93ae:	e7da      	b.n	9366 <notify_cb+0x96>
			err = gatt_notify(conn, data->attr->handle, data->data,
    93b0:	68b1      	ldr	r1, [r6, #8]
    93b2:	8a33      	ldrh	r3, [r6, #16]
    93b4:	68f2      	ldr	r2, [r6, #12]
    93b6:	8a09      	ldrh	r1, [r1, #16]
    93b8:	f7ff fd7a 	bl	8eb0 <gatt_notify>
    93bc:	e7ee      	b.n	939c <notify_cb+0xcc>
			return BT_GATT_ITER_STOP;
    93be:	2000      	movs	r0, #0
    93c0:	e7a3      	b.n	930a <notify_cb+0x3a>
    93c2:	bf00      	nop
    93c4:	00008d35 	.word	0x00008d35
    93c8:	20000734 	.word	0x20000734

000093cc <bt_gatt_init>:
{
    93cc:	b508      	push	{r3, lr}
	gatt_register(&gap_svc);
    93ce:	4806      	ldr	r0, [pc, #24]	; (93e8 <bt_gatt_init+0x1c>)
    93d0:	f7ff fd22 	bl	8e18 <gatt_register>
	gatt_register(&gatt_svc);
    93d4:	4805      	ldr	r0, [pc, #20]	; (93ec <bt_gatt_init+0x20>)
    93d6:	f7ff fd1f 	bl	8e18 <gatt_register>
	k_delayed_work_init(&gatt_sc.work, sc_process);
    93da:	4905      	ldr	r1, [pc, #20]	; (93f0 <bt_gatt_init+0x24>)
    93dc:	4805      	ldr	r0, [pc, #20]	; (93f4 <bt_gatt_init+0x28>)
}
    93de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_delayed_work_init(&gatt_sc.work, sc_process);
    93e2:	f018 bf13 	b.w	2220c <k_delayed_work_init>
    93e6:	bf00      	nop
    93e8:	20009f24 	.word	0x20009f24
    93ec:	20009f80 	.word	0x20009f80
    93f0:	000094dd 	.word	0x000094dd
    93f4:	20000708 	.word	0x20000708

000093f8 <bt_gatt_service_register>:
{
    93f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
    93fa:	6803      	ldr	r3, [r0, #0]
{
    93fc:	4604      	mov	r4, r0
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
    93fe:	2500      	movs	r5, #0
    9400:	6818      	ldr	r0, [r3, #0]
    9402:	f88d 5000 	strb.w	r5, [sp]
    9406:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    940a:	4669      	mov	r1, sp
    940c:	f8ad 3002 	strh.w	r3, [sp, #2]
    9410:	f7fa f856 	bl	34c0 <bt_uuid_cmp>
    9414:	b918      	cbnz	r0, 941e <bt_gatt_service_register+0x26>
		return -EALREADY;
    9416:	f06f 0044 	mvn.w	r0, #68	; 0x44
}
    941a:	b003      	add	sp, #12
    941c:	bd30      	pop	{r4, r5, pc}
	    !bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GATT)) {
    941e:	6823      	ldr	r3, [r4, #0]
    9420:	a901      	add	r1, sp, #4
    9422:	6818      	ldr	r0, [r3, #0]
    9424:	f88d 5004 	strb.w	r5, [sp, #4]
    9428:	f641 0301 	movw	r3, #6145	; 0x1801
    942c:	f8ad 3006 	strh.w	r3, [sp, #6]
    9430:	f7fa f846 	bl	34c0 <bt_uuid_cmp>
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
    9434:	2800      	cmp	r0, #0
    9436:	d0ee      	beq.n	9416 <bt_gatt_service_register+0x1e>
	err = gatt_register(svc);
    9438:	4620      	mov	r0, r4
    943a:	f7ff fced 	bl	8e18 <gatt_register>
	if (err < 0) {
    943e:	2800      	cmp	r0, #0
    9440:	dbeb      	blt.n	941a <bt_gatt_service_register+0x22>
	sc_indicate(&gatt_sc, svc->attrs[0].handle,
    9442:	6822      	ldr	r2, [r4, #0]
		    svc->attrs[svc->attr_count - 1].handle);
    9444:	88a3      	ldrh	r3, [r4, #4]
	sc_indicate(&gatt_sc, svc->attrs[0].handle,
    9446:	8a10      	ldrh	r0, [r2, #16]
    9448:	2114      	movs	r1, #20
    944a:	fb01 2303 	mla	r3, r1, r3, r2
    944e:	f833 1c04 	ldrh.w	r1, [r3, #-4]
    9452:	f7ff fdc5 	bl	8fe0 <sc_indicate.constprop.17>
	return 0;
    9456:	4628      	mov	r0, r5
    9458:	e7df      	b.n	941a <bt_gatt_service_register+0x22>
	...

0000945c <bt_gatt_foreach_attr>:
{
    945c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9460:	4699      	mov	r9, r3
    9462:	4b12      	ldr	r3, [pc, #72]	; (94ac <bt_gatt_foreach_attr+0x50>)
    9464:	681c      	ldr	r4, [r3, #0]
    9466:	4606      	mov	r6, r0
    9468:	460f      	mov	r7, r1
    946a:	4690      	mov	r8, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    946c:	b1dc      	cbz	r4, 94a6 <bt_gatt_foreach_attr+0x4a>
    946e:	3c08      	subs	r4, #8
			struct bt_gatt_attr *attr = &svc->attrs[i];
    9470:	f04f 0a14 	mov.w	sl, #20
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    9474:	b1bc      	cbz	r4, 94a6 <bt_gatt_foreach_attr+0x4a>
    9476:	2500      	movs	r5, #0
    9478:	e006      	b.n	9488 <bt_gatt_foreach_attr+0x2c>
			struct bt_gatt_attr *attr = &svc->attrs[i];
    947a:	6820      	ldr	r0, [r4, #0]
    947c:	fb0a 0005 	mla	r0, sl, r5, r0
			if (attr->handle < start_handle ||
    9480:	8a03      	ldrh	r3, [r0, #16]
    9482:	42b3      	cmp	r3, r6
    9484:	d207      	bcs.n	9496 <bt_gatt_foreach_attr+0x3a>
		for (i = 0; i < svc->attr_count; i++) {
    9486:	3501      	adds	r5, #1
    9488:	88a3      	ldrh	r3, [r4, #4]
    948a:	429d      	cmp	r5, r3
    948c:	dbf5      	blt.n	947a <bt_gatt_foreach_attr+0x1e>
	return node->next;
    948e:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    9490:	b14c      	cbz	r4, 94a6 <bt_gatt_foreach_attr+0x4a>
    9492:	3c08      	subs	r4, #8
    9494:	e7ee      	b.n	9474 <bt_gatt_foreach_attr+0x18>
			if (attr->handle < start_handle ||
    9496:	42bb      	cmp	r3, r7
    9498:	d8f5      	bhi.n	9486 <bt_gatt_foreach_attr+0x2a>
			if (func(attr, user_data) == BT_GATT_ITER_STOP) {
    949a:	4649      	mov	r1, r9
    949c:	47c0      	blx	r8
    949e:	2800      	cmp	r0, #0
    94a0:	d1f1      	bne.n	9486 <bt_gatt_foreach_attr+0x2a>
    94a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    94a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    94aa:	bf00      	nop
    94ac:	200006d4 	.word	0x200006d4

000094b0 <bt_gatt_indicate.part.10>:
int bt_gatt_indicate(struct bt_conn *conn,
    94b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	nfy.err = -ENOTCONN;
    94b2:	f06f 0338 	mvn.w	r3, #56	; 0x38
	nfy.params = params;
    94b6:	9005      	str	r0, [sp, #20]
	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    94b8:	6980      	ldr	r0, [r0, #24]
	nfy.err = -ENOTCONN;
    94ba:	9300      	str	r3, [sp, #0]
	nfy.type = BT_GATT_CCC_INDICATE;
    94bc:	2302      	movs	r3, #2
    94be:	f8ad 3004 	strh.w	r3, [sp, #4]
	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    94c2:	4a05      	ldr	r2, [pc, #20]	; (94d8 <bt_gatt_indicate.part.10+0x28>)
    94c4:	8a00      	ldrh	r0, [r0, #16]
    94c6:	466b      	mov	r3, sp
    94c8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    94cc:	f7ff ffc6 	bl	945c <bt_gatt_foreach_attr>
}
    94d0:	9800      	ldr	r0, [sp, #0]
    94d2:	b007      	add	sp, #28
    94d4:	f85d fb04 	ldr.w	pc, [sp], #4
    94d8:	000092d1 	.word	0x000092d1

000094dc <sc_process>:
{
    94dc:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
    94de:	f830 2c04 	ldrh.w	r2, [r0, #-4]
    94e2:	f8ad 2004 	strh.w	r2, [sp, #4]
{
    94e6:	4603      	mov	r3, r0
	sc_range[1] = sys_cpu_to_le16(sc->end);
    94e8:	f830 2c02 	ldrh.w	r2, [r0, #-2]
    94ec:	f8ad 2006 	strh.w	r2, [sp, #6]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    94f0:	382c      	subs	r0, #44	; 0x2c
    94f2:	f103 0428 	add.w	r4, r3, #40	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    94f6:	f3bf 8f5b 	dmb	ish
    94fa:	e854 2f00 	ldrex	r2, [r4]
    94fe:	f022 0201 	bic.w	r2, r2, #1
    9502:	e844 2100 	strex	r1, r2, [r4]
    9506:	2900      	cmp	r1, #0
    9508:	d1f7      	bne.n	94fa <sc_process+0x1e>
    950a:	f3bf 8f5b 	dmb	ish
	sc->start = 0;
    950e:	2200      	movs	r2, #0
    9510:	f823 2c04 	strh.w	r2, [r3, #-4]
	sc->end = 0;
    9514:	f823 2c02 	strh.w	r2, [r3, #-2]
	sc->params.attr = &gatt_attrs[2];
    9518:	4a0e      	ldr	r2, [pc, #56]	; (9554 <sc_process+0x78>)
    951a:	f843 2c14 	str.w	r2, [r3, #-20]
	sc->params.func = sc_indicate_rsp;
    951e:	4a0e      	ldr	r2, [pc, #56]	; (9558 <sc_process+0x7c>)
    9520:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.data = &sc_range[0];
    9524:	aa01      	add	r2, sp, #4
    9526:	f843 2c0c 	str.w	r2, [r3, #-12]
	sc->params.len = sizeof(sc_range);
    952a:	2204      	movs	r2, #4
    952c:	f823 2c08 	strh.w	r2, [r3, #-8]
    9530:	f7ff ffbe 	bl	94b0 <bt_gatt_indicate.part.10>
	if (bt_gatt_indicate(NULL, &sc->params)) {
    9534:	b958      	cbnz	r0, 954e <sc_process+0x72>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    9536:	f3bf 8f5b 	dmb	ish
    953a:	e854 3f00 	ldrex	r3, [r4]
    953e:	f043 0302 	orr.w	r3, r3, #2
    9542:	e844 3200 	strex	r2, r3, [r4]
    9546:	2a00      	cmp	r2, #0
    9548:	d1f7      	bne.n	953a <sc_process+0x5e>
    954a:	f3bf 8f5b 	dmb	ish
}
    954e:	b002      	add	sp, #8
    9550:	bd10      	pop	{r4, pc}
    9552:	bf00      	nop
    9554:	20009f58 	.word	0x20009f58
    9558:	000090bd 	.word	0x000090bd

0000955c <bt_gatt_attr_next>:
{
    955c:	b507      	push	{r0, r1, r2, lr}
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    955e:	8a01      	ldrh	r1, [r0, #16]
	struct bt_gatt_attr *next = NULL;
    9560:	ab02      	add	r3, sp, #8
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    9562:	3101      	adds	r1, #1
    9564:	b289      	uxth	r1, r1
	struct bt_gatt_attr *next = NULL;
    9566:	2200      	movs	r2, #0
    9568:	f843 2d04 	str.w	r2, [r3, #-4]!
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    956c:	4608      	mov	r0, r1
    956e:	4a03      	ldr	r2, [pc, #12]	; (957c <bt_gatt_attr_next+0x20>)
    9570:	f7ff ff74 	bl	945c <bt_gatt_foreach_attr>
}
    9574:	9801      	ldr	r0, [sp, #4]
    9576:	b003      	add	sp, #12
    9578:	f85d fb04 	ldr.w	pc, [sp], #4
    957c:	00008ced 	.word	0x00008ced

00009580 <bt_gatt_attr_read_chrc>:
{
    9580:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
    9584:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
    9588:	b08b      	sub	sp, #44	; 0x2c
    958a:	461c      	mov	r4, r3
	next = bt_gatt_attr_next(attr);
    958c:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
    958e:	f899 3004 	ldrb.w	r3, [r9, #4]
{
    9592:	f8bd 6048 	ldrh.w	r6, [sp, #72]	; 0x48
	pdu.properties = chrc->properties;
    9596:	f88d 3014 	strb.w	r3, [sp, #20]
{
    959a:	4688      	mov	r8, r1
    959c:	4617      	mov	r7, r2
	next = bt_gatt_attr_next(attr);
    959e:	f7ff ffdd 	bl	955c <bt_gatt_attr_next>
	if (!next) {
    95a2:	4605      	mov	r5, r0
    95a4:	bb40      	cbnz	r0, 95f8 <bt_gatt_attr_read_chrc+0x78>
		BT_WARN("No value for characteristic at 0x%04x", attr->handle);
    95a6:	4b1c      	ldr	r3, [pc, #112]	; (9618 <bt_gatt_attr_read_chrc+0x98>)
    95a8:	f8b8 2010 	ldrh.w	r2, [r8, #16]
    95ac:	9302      	str	r3, [sp, #8]
    95ae:	9201      	str	r2, [sp, #4]
    95b0:	9300      	str	r3, [sp, #0]
    95b2:	4a1a      	ldr	r2, [pc, #104]	; (961c <bt_gatt_attr_read_chrc+0x9c>)
    95b4:	4b1a      	ldr	r3, [pc, #104]	; (9620 <bt_gatt_attr_read_chrc+0xa0>)
    95b6:	491b      	ldr	r1, [pc, #108]	; (9624 <bt_gatt_attr_read_chrc+0xa4>)
    95b8:	481b      	ldr	r0, [pc, #108]	; (9628 <bt_gatt_attr_read_chrc+0xa8>)
    95ba:	f7f8 fe71 	bl	22a0 <printk>
		pdu.value_handle = 0x0000;
    95be:	f88d 5015 	strb.w	r5, [sp, #21]
    95c2:	f88d 5016 	strb.w	r5, [sp, #22]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
    95c6:	f8d9 1000 	ldr.w	r1, [r9]
    95ca:	780b      	ldrb	r3, [r1, #0]
    95cc:	b9c3      	cbnz	r3, 9600 <bt_gatt_attr_read_chrc+0x80>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
    95ce:	884b      	ldrh	r3, [r1, #2]
    95d0:	f8ad 3017 	strh.w	r3, [sp, #23]
		value_len += 2;
    95d4:	2305      	movs	r3, #5
	if (offset > value_len) {
    95d6:	42b3      	cmp	r3, r6
    95d8:	d31a      	bcc.n	9610 <bt_gatt_attr_read_chrc+0x90>
	len = min(buf_len, value_len - offset);
    95da:	1b9b      	subs	r3, r3, r6
    95dc:	42a3      	cmp	r3, r4
    95de:	bfa8      	it	ge
    95e0:	4623      	movge	r3, r4
    95e2:	b29c      	uxth	r4, r3
	memcpy(buf, value + offset, len);
    95e4:	ab05      	add	r3, sp, #20
    95e6:	4622      	mov	r2, r4
    95e8:	1999      	adds	r1, r3, r6
    95ea:	4638      	mov	r0, r7
    95ec:	f7f7 f8d1 	bl	792 <memcpy>
}
    95f0:	4620      	mov	r0, r4
    95f2:	b00b      	add	sp, #44	; 0x2c
    95f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		pdu.value_handle = sys_cpu_to_le16(next->handle);
    95f8:	8a03      	ldrh	r3, [r0, #16]
    95fa:	f8ad 3015 	strh.w	r3, [sp, #21]
    95fe:	e7e2      	b.n	95c6 <bt_gatt_attr_read_chrc+0x46>
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
    9600:	2210      	movs	r2, #16
    9602:	3101      	adds	r1, #1
    9604:	f10d 0017 	add.w	r0, sp, #23
    9608:	f7f7 f8c3 	bl	792 <memcpy>
		value_len += 16;
    960c:	2313      	movs	r3, #19
    960e:	e7e2      	b.n	95d6 <bt_gatt_attr_read_chrc+0x56>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    9610:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
    9614:	e7ec      	b.n	95f0 <bt_gatt_attr_read_chrc+0x70>
    9616:	bf00      	nop
    9618:	00023dbe 	.word	0x00023dbe
    961c:	00024016 	.word	0x00024016
    9620:	00024e0a 	.word	0x00024e0a
    9624:	000272e8 	.word	0x000272e8
    9628:	00024e5c 	.word	0x00024e5c

0000962c <bt_gatt_connected>:
#endif /* CONFIG_BT_GATT_CLIENT */

void bt_gatt_connected(struct bt_conn *conn)
{
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, connected_cb, conn);
    962c:	4603      	mov	r3, r0
    962e:	4a03      	ldr	r2, [pc, #12]	; (963c <bt_gatt_connected+0x10>)
    9630:	f64f 71ff 	movw	r1, #65535	; 0xffff
    9634:	2001      	movs	r0, #1
    9636:	f7ff bf11 	b.w	945c <bt_gatt_foreach_attr>
    963a:	bf00      	nop
    963c:	0000904d 	.word	0x0000904d

00009640 <bt_gatt_disconnected>:
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    9640:	4603      	mov	r3, r0
    9642:	4a03      	ldr	r2, [pc, #12]	; (9650 <bt_gatt_disconnected+0x10>)
    9644:	f64f 71ff 	movw	r1, #65535	; 0xffff
    9648:	2001      	movs	r0, #1
    964a:	f7ff bf07 	b.w	945c <bt_gatt_foreach_attr>
    964e:	bf00      	nop
    9650:	00009135 	.word	0x00009135

00009654 <sys_memcpy_swap>:
{
	__ASSERT(((src < dst && (src + length) <= dst) ||
		  (src > dst && (dst + length) <= src)),
		 "Source and destination buffers must not overlap");

	src += length - 1;
    9654:	1e53      	subs	r3, r2, #1
    9656:	4419      	add	r1, r3
    9658:	3801      	subs	r0, #1
    965a:	1a52      	subs	r2, r2, r1

	for (; length > 0; length--) {
    965c:	42d1      	cmn	r1, r2
    965e:	d100      	bne.n	9662 <sys_memcpy_swap+0xe>
		*((u8_t *)dst++) = *((u8_t *)src--);
	}
}
    9660:	4770      	bx	lr
		*((u8_t *)dst++) = *((u8_t *)src--);
    9662:	f811 3901 	ldrb.w	r3, [r1], #-1
    9666:	f800 3f01 	strb.w	r3, [r0, #1]!
    966a:	e7f7      	b.n	965c <sys_memcpy_swap+0x8>

0000966c <get_io_capa>:
static bool sc_local_pkey_valid;
static u8_t sc_public_key[64];

static u8_t get_io_capa(void)
{
	if (!bt_auth) {
    966c:	4b10      	ldr	r3, [pc, #64]	; (96b0 <get_io_capa+0x44>)
    966e:	681b      	ldr	r3, [r3, #0]
    9670:	b1ab      	cbz	r3, 969e <get_io_capa+0x32>
		return BT_SMP_IO_NO_INPUT_OUTPUT;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
    9672:	681a      	ldr	r2, [r3, #0]
    9674:	b132      	cbz	r2, 9684 <get_io_capa+0x18>
    9676:	6859      	ldr	r1, [r3, #4]
    9678:	b121      	cbz	r1, 9684 <get_io_capa+0x18>
    967a:	6899      	ldr	r1, [r3, #8]
    967c:	b989      	cbnz	r1, 96a2 <get_io_capa+0x36>
	    (bt_auth->passkey_confirm || !sc_supported)) {
    967e:	490d      	ldr	r1, [pc, #52]	; (96b4 <get_io_capa+0x48>)
    9680:	7809      	ldrb	r1, [r1, #0]
    9682:	b171      	cbz	r1, 96a2 <get_io_capa+0x36>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
    9684:	490b      	ldr	r1, [pc, #44]	; (96b4 <get_io_capa+0x48>)
    9686:	7809      	ldrb	r1, [r1, #0]
    9688:	b111      	cbz	r1, 9690 <get_io_capa+0x24>
    968a:	b10a      	cbz	r2, 9690 <get_io_capa+0x24>
    968c:	6899      	ldr	r1, [r3, #8]
    968e:	b951      	cbnz	r1, 96a6 <get_io_capa+0x3a>
	    bt_auth->passkey_confirm) {
		return BT_SMP_IO_DISPLAY_YESNO;
	}

	if (bt_auth->passkey_entry) {
    9690:	685b      	ldr	r3, [r3, #4]
    9692:	b953      	cbnz	r3, 96aa <get_io_capa+0x3e>
		return BT_SMP_IO_KEYBOARD_ONLY;
	}

	if (bt_auth->passkey_display) {
		return BT_SMP_IO_DISPLAY_ONLY;
    9694:	2a00      	cmp	r2, #0
    9696:	bf0c      	ite	eq
    9698:	2003      	moveq	r0, #3
    969a:	2000      	movne	r0, #0
    969c:	4770      	bx	lr
	}

	return BT_SMP_IO_NO_INPUT_OUTPUT;
    969e:	2003      	movs	r0, #3
    96a0:	4770      	bx	lr
		return BT_SMP_IO_KEYBOARD_DISPLAY;
    96a2:	2004      	movs	r0, #4
    96a4:	4770      	bx	lr
		return BT_SMP_IO_DISPLAY_YESNO;
    96a6:	2001      	movs	r0, #1
    96a8:	4770      	bx	lr
		return BT_SMP_IO_KEYBOARD_ONLY;
    96aa:	2002      	movs	r0, #2
}
    96ac:	4770      	bx	lr
    96ae:	bf00      	nop
    96b0:	20003128 	.word	0x20003128
    96b4:	20000939 	.word	0x20000939

000096b8 <get_auth>:
	return 0;
}

static u8_t get_auth(u8_t auth)
{
	if (sc_supported) {
    96b8:	4b08      	ldr	r3, [pc, #32]	; (96dc <get_auth+0x24>)
    96ba:	781b      	ldrb	r3, [r3, #0]
{
    96bc:	b510      	push	{r4, lr}
	if (sc_supported) {
    96be:	b153      	cbz	r3, 96d6 <get_auth+0x1e>
		auth &= BT_SMP_AUTH_MASK_SC;
    96c0:	f000 040f 	and.w	r4, r0, #15
	} else {
		auth &= BT_SMP_AUTH_MASK;
	}

	if (get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) {
    96c4:	f7ff ffd2 	bl	966c <get_io_capa>
    96c8:	2803      	cmp	r0, #3
		auth &= ~(BT_SMP_AUTH_MITM);
    96ca:	bf0c      	ite	eq
    96cc:	f004 000b 	andeq.w	r0, r4, #11
	} else {
		auth |= BT_SMP_AUTH_MITM;
    96d0:	f044 0004 	orrne.w	r0, r4, #4
	}

	return auth;
}
    96d4:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
    96d6:	f000 0407 	and.w	r4, r0, #7
    96da:	e7f3      	b.n	96c4 <get_auth+0xc>
    96dc:	20000939 	.word	0x20000939

000096e0 <smp_signing_info>:
}
#else
static u8_t smp_signing_info(struct bt_smp *smp, struct net_buf *buf)
{
	return BT_SMP_ERR_CMD_NOTSUPP;
}
    96e0:	2007      	movs	r0, #7
    96e2:	4770      	bx	lr

000096e4 <bt_smp_accept>:

	return true;
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    96e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
    96e6:	4a0b      	ldr	r2, [pc, #44]	; (9714 <bt_smp_accept+0x30>)
    96e8:	6813      	ldr	r3, [r2, #0]
    96ea:	b933      	cbnz	r3, 96fa <bt_smp_accept+0x16>
			continue;
		}

		smp->chan.chan.ops = &ops;
    96ec:	480a      	ldr	r0, [pc, #40]	; (9718 <bt_smp_accept+0x34>)
    96ee:	6050      	str	r0, [r2, #4]

		*chan = &smp->chan.chan;
    96f0:	600a      	str	r2, [r1, #0]

		return 0;
    96f2:	4618      	mov	r0, r3
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
    96f4:	b005      	add	sp, #20
    96f6:	f85d fb04 	ldr.w	pc, [sp], #4
	BT_ERR("No available SMP context for conn %p", conn);
    96fa:	4b08      	ldr	r3, [pc, #32]	; (971c <bt_smp_accept+0x38>)
    96fc:	9302      	str	r3, [sp, #8]
    96fe:	9001      	str	r0, [sp, #4]
    9700:	9300      	str	r3, [sp, #0]
    9702:	4a07      	ldr	r2, [pc, #28]	; (9720 <bt_smp_accept+0x3c>)
    9704:	4b07      	ldr	r3, [pc, #28]	; (9724 <bt_smp_accept+0x40>)
    9706:	4908      	ldr	r1, [pc, #32]	; (9728 <bt_smp_accept+0x44>)
    9708:	4808      	ldr	r0, [pc, #32]	; (972c <bt_smp_accept+0x48>)
    970a:	f7f8 fdc9 	bl	22a0 <printk>
	return -ENOMEM;
    970e:	f06f 000b 	mvn.w	r0, #11
    9712:	e7ef      	b.n	96f4 <bt_smp_accept+0x10>
    9714:	20000754 	.word	0x20000754
    9718:	20009f98 	.word	0x20009f98
    971c:	00023dbe 	.word	0x00023dbe
    9720:	00022d86 	.word	0x00022d86
    9724:	000250b2 	.word	0x000250b2
    9728:	000272e8 	.word	0x000272e8
    972c:	000250c0 	.word	0x000250c0

00009730 <atomic_test_bit>:
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    9730:	094b      	lsrs	r3, r1, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    9732:	f3bf 8f5b 	dmb	ish
    9736:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    973a:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    973e:	f001 011f 	and.w	r1, r1, #31
    9742:	4108      	asrs	r0, r1
}
    9744:	f000 0001 	and.w	r0, r0, #1
    9748:	4770      	bx	lr

0000974a <atomic_set_bit>:
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    974a:	094b      	lsrs	r3, r1, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
    974c:	2201      	movs	r2, #1
    974e:	f001 011f 	and.w	r1, r1, #31
    9752:	fa02 f101 	lsl.w	r1, r2, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    9756:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    975a:	f3bf 8f5b 	dmb	ish
    975e:	e850 3f00 	ldrex	r3, [r0]
    9762:	430b      	orrs	r3, r1
    9764:	e840 3200 	strex	r2, r3, [r0]
    9768:	2a00      	cmp	r2, #0
    976a:	d1f8      	bne.n	975e <atomic_set_bit+0x14>
    976c:	f3bf 8f5b 	dmb	ish
    9770:	4770      	bx	lr

00009772 <smp_init>:
{
    9772:	b538      	push	{r3, r4, r5, lr}
	memset((u8_t *)smp + sizeof(smp->chan), 0,
    9774:	f100 059c 	add.w	r5, r0, #156	; 0x9c
{
    9778:	4604      	mov	r4, r0
	memset((u8_t *)smp + sizeof(smp->chan), 0,
    977a:	22e0      	movs	r2, #224	; 0xe0
    977c:	2100      	movs	r1, #0
    977e:	4628      	mov	r0, r5
    9780:	f7f7 f833 	bl	7ea <memset>
	if (bt_rand(smp->prnd, 16)) {
    9784:	f104 00c3 	add.w	r0, r4, #195	; 0xc3
    9788:	2110      	movs	r1, #16
    978a:	f003 f863 	bl	c854 <bt_rand>
    978e:	4604      	mov	r4, r0
    9790:	b928      	cbnz	r0, 979e <smp_init+0x2c>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
    9792:	2105      	movs	r1, #5
    9794:	4628      	mov	r0, r5
    9796:	f7ff ffd8 	bl	974a <atomic_set_bit>
}
    979a:	4620      	mov	r0, r4
    979c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    979e:	2408      	movs	r4, #8
    97a0:	e7fb      	b.n	979a <smp_init+0x28>

000097a2 <bt_smp_aes_cmac>:
{
    97a2:	b570      	push	{r4, r5, r6, lr}
    97a4:	b0c2      	sub	sp, #264	; 0x108
    97a6:	460d      	mov	r5, r1
    97a8:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
    97aa:	4601      	mov	r1, r0
    97ac:	aa16      	add	r2, sp, #88	; 0x58
    97ae:	4668      	mov	r0, sp
{
    97b0:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
    97b2:	f7f8 ff6d 	bl	2690 <tc_cmac_setup>
    97b6:	b918      	cbnz	r0, 97c0 <bt_smp_aes_cmac+0x1e>
		return -EIO;
    97b8:	f06f 0004 	mvn.w	r0, #4
}
    97bc:	b042      	add	sp, #264	; 0x108
    97be:	bd70      	pop	{r4, r5, r6, pc}
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
    97c0:	4632      	mov	r2, r6
    97c2:	4629      	mov	r1, r5
    97c4:	4668      	mov	r0, sp
    97c6:	f7f8 ff8f 	bl	26e8 <tc_cmac_update>
    97ca:	2800      	cmp	r0, #0
    97cc:	d0f4      	beq.n	97b8 <bt_smp_aes_cmac+0x16>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
    97ce:	4669      	mov	r1, sp
    97d0:	4620      	mov	r0, r4
    97d2:	f7f8 ffed 	bl	27b0 <tc_cmac_final>
    97d6:	2800      	cmp	r0, #0
    97d8:	d0ee      	beq.n	97b8 <bt_smp_aes_cmac+0x16>
	return 0;
    97da:	2000      	movs	r0, #0
    97dc:	e7ee      	b.n	97bc <bt_smp_aes_cmac+0x1a>
	...

000097e0 <smp_g2>:
{
    97e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    97e2:	b099      	sub	sp, #100	; 0x64
    97e4:	4615      	mov	r5, r2
    97e6:	460f      	mov	r7, r1
	sys_memcpy_swap(m, u, 32);
    97e8:	2220      	movs	r2, #32
    97ea:	4601      	mov	r1, r0
    97ec:	a804      	add	r0, sp, #16
{
    97ee:	461e      	mov	r6, r3
    97f0:	9c1e      	ldr	r4, [sp, #120]	; 0x78
	sys_memcpy_swap(m, u, 32);
    97f2:	f7ff ff2f 	bl	9654 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
    97f6:	2220      	movs	r2, #32
    97f8:	4639      	mov	r1, r7
    97fa:	a80c      	add	r0, sp, #48	; 0x30
    97fc:	f7ff ff2a 	bl	9654 <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
    9800:	2210      	movs	r2, #16
    9802:	4631      	mov	r1, r6
    9804:	a814      	add	r0, sp, #80	; 0x50
    9806:	f7ff ff25 	bl	9654 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
    980a:	4629      	mov	r1, r5
    980c:	2210      	movs	r2, #16
    980e:	4668      	mov	r0, sp
    9810:	f7ff ff20 	bl	9654 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
    9814:	466b      	mov	r3, sp
    9816:	2250      	movs	r2, #80	; 0x50
    9818:	a904      	add	r1, sp, #16
    981a:	4668      	mov	r0, sp
    981c:	f7ff ffc1 	bl	97a2 <bt_smp_aes_cmac>
	if (err) {
    9820:	4605      	mov	r5, r0
    9822:	b960      	cbnz	r0, 983e <smp_g2+0x5e>
	memcpy(passkey, xs + 12, 4);
    9824:	2204      	movs	r2, #4
    9826:	a903      	add	r1, sp, #12
    9828:	4620      	mov	r0, r4
    982a:	f7f6 ffb2 	bl	792 <memcpy>
    982e:	6823      	ldr	r3, [r4, #0]
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    9830:	4904      	ldr	r1, [pc, #16]	; (9844 <smp_g2+0x64>)
    9832:	ba1b      	rev	r3, r3
    9834:	fbb3 f2f1 	udiv	r2, r3, r1
    9838:	fb01 3312 	mls	r3, r1, r2, r3
    983c:	6023      	str	r3, [r4, #0]
}
    983e:	4628      	mov	r0, r5
    9840:	b019      	add	sp, #100	; 0x64
    9842:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9844:	000f4240 	.word	0x000f4240

00009848 <bt_smp_disconnected>:
{
    9848:	b538      	push	{r3, r4, r5, lr}
	struct bt_keys *keys = chan->conn->le.keys;
    984a:	6803      	ldr	r3, [r0, #0]
    984c:	6f1c      	ldr	r4, [r3, #112]	; 0x70
{
    984e:	4605      	mov	r5, r0
	k_delayed_work_cancel(&smp->work);
    9850:	f500 70be 	add.w	r0, r0, #380	; 0x17c
    9854:	f018 fcf8 	bl	22248 <k_delayed_work_cancel>
	if (keys) {
    9858:	b124      	cbz	r4, 9864 <bt_smp_disconnected+0x1c>
		if (!keys->keys ||
    985a:	89a3      	ldrh	r3, [r4, #12]
    985c:	b953      	cbnz	r3, 9874 <bt_smp_disconnected+0x2c>
			bt_keys_clear(keys);
    985e:	4620      	mov	r0, r4
    9860:	f001 ff00 	bl	b664 <bt_keys_clear>
	memset(smp, 0, sizeof(*smp));
    9864:	4628      	mov	r0, r5
    9866:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
    986a:	2100      	movs	r1, #0
}
    986c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memset(smp, 0, sizeof(*smp));
    9870:	f7f6 bfbb 	b.w	7ea <memset>
		    atomic_test_bit(keys->flags, BT_KEYS_DEBUG)) {
    9874:	2101      	movs	r1, #1
    9876:	f104 0008 	add.w	r0, r4, #8
    987a:	f7ff ff59 	bl	9730 <atomic_test_bit>
		if (!keys->keys ||
    987e:	2800      	cmp	r0, #0
    9880:	d1ed      	bne.n	985e <bt_smp_disconnected+0x16>
    9882:	e7ef      	b.n	9864 <bt_smp_disconnected+0x1c>

00009884 <smp_ident_info>:
{
    9884:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    9886:	4605      	mov	r5, r0
    9888:	460a      	mov	r2, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    988a:	30a0      	adds	r0, #160	; 0xa0
    988c:	210a      	movs	r1, #10
    988e:	f7ff ff4f 	bl	9730 <atomic_test_bit>
    9892:	b1e0      	cbz	r0, 98ce <smp_ident_info+0x4a>
		keys = bt_keys_get_type(BT_KEYS_IRK, &conn->le.dst);
    9894:	682c      	ldr	r4, [r5, #0]
		struct bt_smp_ident_info *req = (void *)buf->data;
    9896:	6896      	ldr	r6, [r2, #8]
		keys = bt_keys_get_type(BT_KEYS_IRK, &conn->le.dst);
    9898:	3448      	adds	r4, #72	; 0x48
    989a:	4621      	mov	r1, r4
    989c:	2002      	movs	r0, #2
    989e:	f001 ff27 	bl	b6f0 <bt_keys_get_type>
		if (!keys) {
    98a2:	b978      	cbnz	r0, 98c4 <smp_ident_info+0x40>
			BT_ERR("Unable to get keys for %s",
    98a4:	4620      	mov	r0, r4
    98a6:	f7f9 fd39 	bl	331c <bt_addr_le_str>
    98aa:	4b0c      	ldr	r3, [pc, #48]	; (98dc <smp_ident_info+0x58>)
    98ac:	9302      	str	r3, [sp, #8]
    98ae:	9001      	str	r0, [sp, #4]
    98b0:	9300      	str	r3, [sp, #0]
    98b2:	4a0b      	ldr	r2, [pc, #44]	; (98e0 <smp_ident_info+0x5c>)
    98b4:	4b0b      	ldr	r3, [pc, #44]	; (98e4 <smp_ident_info+0x60>)
    98b6:	490c      	ldr	r1, [pc, #48]	; (98e8 <smp_ident_info+0x64>)
    98b8:	480c      	ldr	r0, [pc, #48]	; (98ec <smp_ident_info+0x68>)
    98ba:	f7f8 fcf1 	bl	22a0 <printk>
			return BT_SMP_ERR_UNSPECIFIED;
    98be:	2008      	movs	r0, #8
}
    98c0:	b004      	add	sp, #16
    98c2:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->irk.val, req->irk, 16);
    98c4:	2210      	movs	r2, #16
    98c6:	4631      	mov	r1, r6
    98c8:	3030      	adds	r0, #48	; 0x30
    98ca:	f7f6 ff62 	bl	792 <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
    98ce:	f105 009c 	add.w	r0, r5, #156	; 0x9c
    98d2:	2109      	movs	r1, #9
    98d4:	f7ff ff39 	bl	974a <atomic_set_bit>
	return 0;
    98d8:	2000      	movs	r0, #0
    98da:	e7f1      	b.n	98c0 <smp_ident_info+0x3c>
    98dc:	00023dbe 	.word	0x00023dbe
    98e0:	00022d86 	.word	0x00022d86
    98e4:	0002503a 	.word	0x0002503a
    98e8:	000272e8 	.word	0x000272e8
    98ec:	00025423 	.word	0x00025423

000098f0 <smp_encrypt_info>:
{
    98f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    98f2:	4605      	mov	r5, r0
    98f4:	460a      	mov	r2, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    98f6:	30a0      	adds	r0, #160	; 0xa0
    98f8:	210a      	movs	r1, #10
    98fa:	f7ff ff19 	bl	9730 <atomic_test_bit>
    98fe:	b1e0      	cbz	r0, 993a <smp_encrypt_info+0x4a>
		keys = bt_keys_get_type(BT_KEYS_LTK, &conn->le.dst);
    9900:	682c      	ldr	r4, [r5, #0]
		struct bt_smp_encrypt_info *req = (void *)buf->data;
    9902:	6896      	ldr	r6, [r2, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, &conn->le.dst);
    9904:	3448      	adds	r4, #72	; 0x48
    9906:	4621      	mov	r1, r4
    9908:	2004      	movs	r0, #4
    990a:	f001 fef1 	bl	b6f0 <bt_keys_get_type>
		if (!keys) {
    990e:	b978      	cbnz	r0, 9930 <smp_encrypt_info+0x40>
			BT_ERR("Unable to get keys for %s",
    9910:	4620      	mov	r0, r4
    9912:	f7f9 fd03 	bl	331c <bt_addr_le_str>
    9916:	4b0c      	ldr	r3, [pc, #48]	; (9948 <smp_encrypt_info+0x58>)
    9918:	9302      	str	r3, [sp, #8]
    991a:	9001      	str	r0, [sp, #4]
    991c:	9300      	str	r3, [sp, #0]
    991e:	4a0b      	ldr	r2, [pc, #44]	; (994c <smp_encrypt_info+0x5c>)
    9920:	4b0b      	ldr	r3, [pc, #44]	; (9950 <smp_encrypt_info+0x60>)
    9922:	490c      	ldr	r1, [pc, #48]	; (9954 <smp_encrypt_info+0x64>)
    9924:	480c      	ldr	r0, [pc, #48]	; (9958 <smp_encrypt_info+0x68>)
    9926:	f7f8 fcbb 	bl	22a0 <printk>
			return BT_SMP_ERR_UNSPECIFIED;
    992a:	2008      	movs	r0, #8
}
    992c:	b004      	add	sp, #16
    992e:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->ltk.val, req->ltk, 16);
    9930:	2210      	movs	r2, #16
    9932:	4631      	mov	r1, r6
    9934:	301a      	adds	r0, #26
    9936:	f7f6 ff2c 	bl	792 <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_MASTER_IDENT);
    993a:	f105 009c 	add.w	r0, r5, #156	; 0x9c
    993e:	2107      	movs	r1, #7
    9940:	f7ff ff03 	bl	974a <atomic_set_bit>
	return 0;
    9944:	2000      	movs	r0, #0
    9946:	e7f1      	b.n	992c <smp_encrypt_info+0x3c>
    9948:	00023dbe 	.word	0x00023dbe
    994c:	00022d86 	.word	0x00022d86
    9950:	00024ff8 	.word	0x00024ff8
    9954:	000272e8 	.word	0x000272e8
    9958:	00025423 	.word	0x00025423

0000995c <legacy_request_tk>:
{
    995c:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
    995e:	6806      	ldr	r6, [r0, #0]
{
    9960:	b086      	sub	sp, #24
    9962:	4605      	mov	r5, r0
	keys = bt_keys_find_addr(&conn->le.dst);
    9964:	f106 0048 	add.w	r0, r6, #72	; 0x48
    9968:	f001 ff04 	bl	b774 <bt_keys_find_addr>
	if (keys && atomic_test_bit(keys->flags, BT_KEYS_AUTHENTICATED) &&
    996c:	b190      	cbz	r0, 9994 <legacy_request_tk+0x38>
    996e:	2100      	movs	r1, #0
    9970:	3008      	adds	r0, #8
    9972:	f7ff fedd 	bl	9730 <atomic_test_bit>
    9976:	b168      	cbz	r0, 9994 <legacy_request_tk+0x38>
    9978:	f895 30a4 	ldrb.w	r3, [r5, #164]	; 0xa4
    997c:	b953      	cbnz	r3, 9994 <legacy_request_tk+0x38>
		BT_ERR("JustWorks failed, authenticated keys present");
    997e:	4b21      	ldr	r3, [pc, #132]	; (9a04 <legacy_request_tk+0xa8>)
    9980:	9301      	str	r3, [sp, #4]
    9982:	9300      	str	r3, [sp, #0]
    9984:	4a20      	ldr	r2, [pc, #128]	; (9a08 <legacy_request_tk+0xac>)
    9986:	4b21      	ldr	r3, [pc, #132]	; (9a0c <legacy_request_tk+0xb0>)
    9988:	4921      	ldr	r1, [pc, #132]	; (9a10 <legacy_request_tk+0xb4>)
    998a:	4822      	ldr	r0, [pc, #136]	; (9a14 <legacy_request_tk+0xb8>)
    998c:	f7f8 fc88 	bl	22a0 <printk>
			return BT_SMP_ERR_UNSPECIFIED;
    9990:	2008      	movs	r0, #8
    9992:	e01f      	b.n	99d4 <legacy_request_tk+0x78>
	switch (smp->method) {
    9994:	f895 30a4 	ldrb.w	r3, [r5, #164]	; 0xa4
    9998:	2b01      	cmp	r3, #1
    999a:	d01d      	beq.n	99d8 <legacy_request_tk+0x7c>
    999c:	d319      	bcc.n	99d2 <legacy_request_tk+0x76>
    999e:	2b02      	cmp	r3, #2
    99a0:	d125      	bne.n	99ee <legacy_request_tk+0x92>
		if (bt_rand(&passkey, sizeof(passkey))) {
    99a2:	2104      	movs	r1, #4
    99a4:	a805      	add	r0, sp, #20
    99a6:	f002 ff55 	bl	c854 <bt_rand>
    99aa:	2800      	cmp	r0, #0
    99ac:	d1f0      	bne.n	9990 <legacy_request_tk+0x34>
		passkey %= 1000000;
    99ae:	9a05      	ldr	r2, [sp, #20]
    99b0:	4b19      	ldr	r3, [pc, #100]	; (9a18 <legacy_request_tk+0xbc>)
    99b2:	fbb2 f1f3 	udiv	r1, r2, r3
    99b6:	fb03 2111 	mls	r1, r3, r1, r2
		bt_auth->passkey_display(conn, passkey);
    99ba:	4b18      	ldr	r3, [pc, #96]	; (9a1c <legacy_request_tk+0xc0>)
		passkey %= 1000000;
    99bc:	9105      	str	r1, [sp, #20]
		bt_auth->passkey_display(conn, passkey);
    99be:	681b      	ldr	r3, [r3, #0]
    99c0:	4630      	mov	r0, r6
    99c2:	681b      	ldr	r3, [r3, #0]
    99c4:	4798      	blx	r3
		memcpy(smp->tk, &passkey, sizeof(passkey));
    99c6:	2204      	movs	r2, #4
    99c8:	a905      	add	r1, sp, #20
    99ca:	f105 00e3 	add.w	r0, r5, #227	; 0xe3
    99ce:	f7f6 fee0 	bl	792 <memcpy>
	return 0;
    99d2:	2000      	movs	r0, #0
}
    99d4:	b006      	add	sp, #24
    99d6:	bd70      	pop	{r4, r5, r6, pc}
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    99d8:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
    99dc:	2109      	movs	r1, #9
    99de:	f7ff feb4 	bl	974a <atomic_set_bit>
		bt_auth->passkey_entry(conn);
    99e2:	4b0e      	ldr	r3, [pc, #56]	; (9a1c <legacy_request_tk+0xc0>)
    99e4:	681b      	ldr	r3, [r3, #0]
    99e6:	4630      	mov	r0, r6
    99e8:	685b      	ldr	r3, [r3, #4]
    99ea:	4798      	blx	r3
    99ec:	e7f1      	b.n	99d2 <legacy_request_tk+0x76>
		BT_ERR("Unknown pairing method (%u)", smp->method);
    99ee:	4a05      	ldr	r2, [pc, #20]	; (9a04 <legacy_request_tk+0xa8>)
    99f0:	9202      	str	r2, [sp, #8]
    99f2:	e88d 000c 	stmia.w	sp, {r2, r3}
    99f6:	4906      	ldr	r1, [pc, #24]	; (9a10 <legacy_request_tk+0xb4>)
    99f8:	4b04      	ldr	r3, [pc, #16]	; (9a0c <legacy_request_tk+0xb0>)
    99fa:	4a03      	ldr	r2, [pc, #12]	; (9a08 <legacy_request_tk+0xac>)
    99fc:	4808      	ldr	r0, [pc, #32]	; (9a20 <legacy_request_tk+0xc4>)
    99fe:	f7f8 fc4f 	bl	22a0 <printk>
    9a02:	e7c5      	b.n	9990 <legacy_request_tk+0x34>
    9a04:	00023dbe 	.word	0x00023dbe
    9a08:	00022d86 	.word	0x00022d86
    9a0c:	00024fd0 	.word	0x00024fd0
    9a10:	000272e8 	.word	0x000272e8
    9a14:	00025314 	.word	0x00025314
    9a18:	000f4240 	.word	0x000f4240
    9a1c:	20003128 	.word	0x20003128
    9a20:	00025351 	.word	0x00025351

00009a24 <legacy_get_pair_method>:
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY)
    9a24:	2904      	cmp	r1, #4
{
    9a26:	b538      	push	{r3, r4, r5, lr}
    9a28:	4605      	mov	r5, r0
    9a2a:	460c      	mov	r4, r1
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY)
    9a2c:	d817      	bhi.n	9a5e <legacy_get_pair_method+0x3a>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    9a2e:	f890 00a8 	ldrb.w	r0, [r0, #168]	; 0xa8
    9a32:	f895 30af 	ldrb.w	r3, [r5, #175]	; 0xaf
    9a36:	4318      	orrs	r0, r3
    9a38:	f010 0004 	ands.w	r0, r0, #4
    9a3c:	d010      	beq.n	9a60 <legacy_get_pair_method+0x3c>
	method = gen_method_legacy[remote_io][get_io_capa()];
    9a3e:	f7ff fe15 	bl	966c <get_io_capa>
    9a42:	4908      	ldr	r1, [pc, #32]	; (9a64 <legacy_get_pair_method+0x40>)
    9a44:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    9a48:	440c      	add	r4, r1
    9a4a:	5c20      	ldrb	r0, [r4, r0]
	if (method == PASSKEY_ROLE) {
    9a4c:	2804      	cmp	r0, #4
    9a4e:	d107      	bne.n	9a60 <legacy_get_pair_method+0x3c>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    9a50:	682b      	ldr	r3, [r5, #0]
    9a52:	78db      	ldrb	r3, [r3, #3]
    9a54:	2b00      	cmp	r3, #0
			method = PASSKEY_INPUT;
    9a56:	bf0c      	ite	eq
    9a58:	2002      	moveq	r0, #2
    9a5a:	2001      	movne	r0, #1
    9a5c:	bd38      	pop	{r3, r4, r5, pc}
		return JUST_WORKS;
    9a5e:	2000      	movs	r0, #0
}
    9a60:	bd38      	pop	{r3, r4, r5, pc}
    9a62:	bf00      	nop
    9a64:	00025272 	.word	0x00025272

00009a68 <sec_level_reachable.isra.2>:
	switch (conn->required_sec_level) {
    9a68:	3801      	subs	r0, #1
static bool sec_level_reachable(struct bt_conn *conn)
    9a6a:	b508      	push	{r3, lr}
	switch (conn->required_sec_level) {
    9a6c:	2803      	cmp	r0, #3
    9a6e:	d803      	bhi.n	9a78 <sec_level_reachable.isra.2+0x10>
    9a70:	e8df f000 	tbb	[pc, r0]
    9a74:	0a041414 	.word	0x0a041414
		return false;
    9a78:	2000      	movs	r0, #0
    9a7a:	bd08      	pop	{r3, pc}
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT;
    9a7c:	f7ff fdf6 	bl	966c <get_io_capa>
    9a80:	3803      	subs	r0, #3
    9a82:	bf18      	it	ne
    9a84:	2001      	movne	r0, #1
    9a86:	bd08      	pop	{r3, pc}
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT &&
    9a88:	f7ff fdf0 	bl	966c <get_io_capa>
    9a8c:	2803      	cmp	r0, #3
    9a8e:	bf1a      	itte	ne
    9a90:	4b03      	ldrne	r3, [pc, #12]	; (9aa0 <sec_level_reachable.isra.2+0x38>)
    9a92:	7818      	ldrbne	r0, [r3, #0]
    9a94:	2000      	moveq	r0, #0
    9a96:	f000 0001 	and.w	r0, r0, #1
    9a9a:	bd08      	pop	{r3, pc}
		return true;
    9a9c:	2001      	movs	r0, #1
}
    9a9e:	bd08      	pop	{r3, pc}
    9aa0:	20000939 	.word	0x20000939

00009aa4 <smp_chan_get>:
{
    9aa4:	b513      	push	{r0, r1, r4, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
    9aa6:	2106      	movs	r1, #6
    9aa8:	f7fd fa6d 	bl	6f86 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    9aac:	4604      	mov	r4, r0
    9aae:	b940      	cbnz	r0, 9ac2 <smp_chan_get+0x1e>
		BT_ERR("Unable to find SMP channel");
    9ab0:	4b05      	ldr	r3, [pc, #20]	; (9ac8 <smp_chan_get+0x24>)
    9ab2:	9301      	str	r3, [sp, #4]
    9ab4:	9300      	str	r3, [sp, #0]
    9ab6:	4a05      	ldr	r2, [pc, #20]	; (9acc <smp_chan_get+0x28>)
    9ab8:	4b05      	ldr	r3, [pc, #20]	; (9ad0 <smp_chan_get+0x2c>)
    9aba:	4906      	ldr	r1, [pc, #24]	; (9ad4 <smp_chan_get+0x30>)
    9abc:	4806      	ldr	r0, [pc, #24]	; (9ad8 <smp_chan_get+0x34>)
    9abe:	f7f8 fbef 	bl	22a0 <printk>
}
    9ac2:	4620      	mov	r0, r4
    9ac4:	b002      	add	sp, #8
    9ac6:	bd10      	pop	{r4, pc}
    9ac8:	00023dbe 	.word	0x00023dbe
    9acc:	00022d86 	.word	0x00022d86
    9ad0:	0002501a 	.word	0x0002501a
    9ad4:	000272e8 	.word	0x000272e8
    9ad8:	000253cd 	.word	0x000253cd

00009adc <smp_create_pdu.isra.5>:
	buf = bt_l2cap_create_pdu(NULL, 0);
    9adc:	2100      	movs	r1, #0
static struct net_buf *smp_create_pdu(struct bt_conn *conn, u8_t op,
    9ade:	b538      	push	{r3, r4, r5, lr}
    9ae0:	4605      	mov	r5, r0
	buf = bt_l2cap_create_pdu(NULL, 0);
    9ae2:	4608      	mov	r0, r1
    9ae4:	f7fd f8c1 	bl	6c6a <bt_l2cap_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    9ae8:	2101      	movs	r1, #1
	buf = bt_l2cap_create_pdu(NULL, 0);
    9aea:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    9aec:	3008      	adds	r0, #8
    9aee:	f00f fc5d 	bl	193ac <net_buf_simple_add>
	hdr->code = op;
    9af2:	7005      	strb	r5, [r0, #0]
}
    9af4:	4620      	mov	r0, r4
    9af6:	bd38      	pop	{r3, r4, r5, pc}

00009af8 <display_passkey>:
{
    9af8:	b538      	push	{r3, r4, r5, lr}
	if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
    9afa:	2104      	movs	r1, #4
{
    9afc:	4605      	mov	r5, r0
	if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
    9afe:	f500 70ba 	add.w	r0, r0, #372	; 0x174
    9b02:	f002 fea7 	bl	c854 <bt_rand>
    9b06:	4604      	mov	r4, r0
    9b08:	b988      	cbnz	r0, 9b2e <display_passkey+0x36>
	smp->passkey %= 1000000;
    9b0a:	f8d5 2174 	ldr.w	r2, [r5, #372]	; 0x174
    9b0e:	4b09      	ldr	r3, [pc, #36]	; (9b34 <display_passkey+0x3c>)
    9b10:	fbb2 f1f3 	udiv	r1, r2, r3
    9b14:	fb03 2111 	mls	r1, r3, r1, r2
	bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
    9b18:	4b07      	ldr	r3, [pc, #28]	; (9b38 <display_passkey+0x40>)
	smp->passkey_round = 0;
    9b1a:	f885 0178 	strb.w	r0, [r5, #376]	; 0x178
	bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
    9b1e:	681b      	ldr	r3, [r3, #0]
    9b20:	6828      	ldr	r0, [r5, #0]
	smp->passkey %= 1000000;
    9b22:	f8c5 1174 	str.w	r1, [r5, #372]	; 0x174
	bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
    9b26:	681b      	ldr	r3, [r3, #0]
    9b28:	4798      	blx	r3
    9b2a:	4620      	mov	r0, r4
    9b2c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    9b2e:	2008      	movs	r0, #8
}
    9b30:	bd38      	pop	{r3, r4, r5, pc}
    9b32:	bf00      	nop
    9b34:	000f4240 	.word	0x000f4240
    9b38:	20003128 	.word	0x20003128

00009b3c <sys_mem_swap.constprop.15>:
 * Where n is an index and 'end' the last index of buf.
 *
 * @param buf A valid pointer on a memory area to swap
 * @param length Size of buf memory area
 */
static inline void sys_mem_swap(void *buf, size_t length)
    9b3c:	b510      	push	{r4, lr}
    9b3e:	1e43      	subs	r3, r0, #1
    9b40:	f100 0210 	add.w	r2, r0, #16
    9b44:	3007      	adds	r0, #7
	size_t i;

	for (i = 0; i < (length/2); i++) {
		u8_t tmp = ((u8_t *)buf)[i];

		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    9b46:	f812 4c01 	ldrb.w	r4, [r2, #-1]
		u8_t tmp = ((u8_t *)buf)[i];
    9b4a:	7859      	ldrb	r1, [r3, #1]
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    9b4c:	f803 4f01 	strb.w	r4, [r3, #1]!
	for (i = 0; i < (length/2); i++) {
    9b50:	4283      	cmp	r3, r0
		((u8_t *)buf)[length - 1 - i] = tmp;
    9b52:	f802 1d01 	strb.w	r1, [r2, #-1]!
	for (i = 0; i < (length/2); i++) {
    9b56:	d1f6      	bne.n	9b46 <sys_mem_swap.constprop.15+0xa>
	}
}
    9b58:	bd10      	pop	{r4, pc}

00009b5a <smp_f6>:
{
    9b5a:	b570      	push	{r4, r5, r6, lr}
    9b5c:	b096      	sub	sp, #88	; 0x58
    9b5e:	4605      	mov	r5, r0
    9b60:	4616      	mov	r6, r2
	sys_memcpy_swap(m, n1, 16);
    9b62:	a805      	add	r0, sp, #20
    9b64:	2210      	movs	r2, #16
{
    9b66:	461c      	mov	r4, r3
	sys_memcpy_swap(m, n1, 16);
    9b68:	f7ff fd74 	bl	9654 <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
    9b6c:	2210      	movs	r2, #16
    9b6e:	4631      	mov	r1, r6
    9b70:	a809      	add	r0, sp, #36	; 0x24
    9b72:	f7ff fd6f 	bl	9654 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
    9b76:	4621      	mov	r1, r4
    9b78:	2210      	movs	r2, #16
    9b7a:	a80d      	add	r0, sp, #52	; 0x34
    9b7c:	f7ff fd6a 	bl	9654 <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
    9b80:	2203      	movs	r2, #3
    9b82:	991a      	ldr	r1, [sp, #104]	; 0x68
    9b84:	a811      	add	r0, sp, #68	; 0x44
    9b86:	f7ff fd65 	bl	9654 <sys_memcpy_swap>
	m[51] = a1->type;
    9b8a:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
    9b8c:	f814 3b01 	ldrb.w	r3, [r4], #1
    9b90:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
    9b94:	4621      	mov	r1, r4
    9b96:	2206      	movs	r2, #6
    9b98:	a812      	add	r0, sp, #72	; 0x48
    9b9a:	f7f6 fdfa 	bl	792 <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
    9b9e:	4621      	mov	r1, r4
    9ba0:	2206      	movs	r2, #6
    9ba2:	a812      	add	r0, sp, #72	; 0x48
    9ba4:	f7ff fd56 	bl	9654 <sys_memcpy_swap>
	m[58] = a2->type;
    9ba8:	9c1c      	ldr	r4, [sp, #112]	; 0x70
    9baa:	f814 3b01 	ldrb.w	r3, [r4], #1
    9bae:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
    9bb2:	4621      	mov	r1, r4
    9bb4:	2206      	movs	r2, #6
    9bb6:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
    9bba:	f7f6 fdea 	bl	792 <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
    9bbe:	4621      	mov	r1, r4
    9bc0:	2206      	movs	r2, #6
    9bc2:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
    9bc6:	f7ff fd45 	bl	9654 <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
    9bca:	2210      	movs	r2, #16
    9bcc:	4629      	mov	r1, r5
    9bce:	a801      	add	r0, sp, #4
    9bd0:	f7ff fd40 	bl	9654 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
    9bd4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    9bd6:	2241      	movs	r2, #65	; 0x41
    9bd8:	a905      	add	r1, sp, #20
    9bda:	a801      	add	r0, sp, #4
    9bdc:	f7ff fde1 	bl	97a2 <bt_smp_aes_cmac>
	if (err) {
    9be0:	4604      	mov	r4, r0
    9be2:	b910      	cbnz	r0, 9bea <smp_f6+0x90>
	sys_mem_swap(check, 16);
    9be4:	981d      	ldr	r0, [sp, #116]	; 0x74
    9be6:	f7ff ffa9 	bl	9b3c <sys_mem_swap.constprop.15>
}
    9bea:	4620      	mov	r0, r4
    9bec:	b016      	add	sp, #88	; 0x58
    9bee:	bd70      	pop	{r4, r5, r6, pc}

00009bf0 <smp_f5>:
{
    9bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9bf4:	b09a      	sub	sp, #104	; 0x68
    9bf6:	4604      	mov	r4, r0
    9bf8:	4688      	mov	r8, r1
    9bfa:	4617      	mov	r7, r2
	u8_t m[53] = { 0x00, /* counter */
    9bfc:	2100      	movs	r1, #0
    9bfe:	2235      	movs	r2, #53	; 0x35
    9c00:	a80c      	add	r0, sp, #48	; 0x30
{
    9c02:	461d      	mov	r5, r3
	u8_t m[53] = { 0x00, /* counter */
    9c04:	f7f6 fdf1 	bl	7ea <memset>
    9c08:	2362      	movs	r3, #98	; 0x62
    9c0a:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    9c0e:	2374      	movs	r3, #116	; 0x74
    9c10:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    9c14:	236c      	movs	r3, #108	; 0x6c
	sys_memcpy_swap(ws, w, 32);
    9c16:	4621      	mov	r1, r4
	u8_t m[53] = { 0x00, /* counter */
    9c18:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
	sys_memcpy_swap(ws, w, 32);
    9c1c:	2220      	movs	r2, #32
	u8_t m[53] = { 0x00, /* counter */
    9c1e:	2365      	movs	r3, #101	; 0x65
	sys_memcpy_swap(ws, w, 32);
    9c20:	a804      	add	r0, sp, #16
	u8_t m[53] = { 0x00, /* counter */
    9c22:	2601      	movs	r6, #1
    9c24:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    9c28:	f88d 6063 	strb.w	r6, [sp, #99]	; 0x63
	sys_memcpy_swap(ws, w, 32);
    9c2c:	f7ff fd12 	bl	9654 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
    9c30:	466b      	mov	r3, sp
    9c32:	2220      	movs	r2, #32
    9c34:	a904      	add	r1, sp, #16
    9c36:	4820      	ldr	r0, [pc, #128]	; (9cb8 <smp_f5+0xc8>)
    9c38:	f7ff fdb3 	bl	97a2 <bt_smp_aes_cmac>
	if (err) {
    9c3c:	4604      	mov	r4, r0
    9c3e:	bbb8      	cbnz	r0, 9cb0 <smp_f5+0xc0>
	sys_memcpy_swap(m + 5, n1, 16);
    9c40:	2210      	movs	r2, #16
    9c42:	4641      	mov	r1, r8
    9c44:	f10d 0035 	add.w	r0, sp, #53	; 0x35
    9c48:	f7ff fd04 	bl	9654 <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
    9c4c:	2210      	movs	r2, #16
    9c4e:	4639      	mov	r1, r7
    9c50:	f10d 0045 	add.w	r0, sp, #69	; 0x45
    9c54:	f7ff fcfe 	bl	9654 <sys_memcpy_swap>
	m[37] = a1->type;
    9c58:	4629      	mov	r1, r5
	sys_memcpy_swap(m + 38, a1->a.val, 6);
    9c5a:	2206      	movs	r2, #6
	m[37] = a1->type;
    9c5c:	f811 3b01 	ldrb.w	r3, [r1], #1
    9c60:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
	sys_memcpy_swap(m + 38, a1->a.val, 6);
    9c64:	f10d 0056 	add.w	r0, sp, #86	; 0x56
    9c68:	f7ff fcf4 	bl	9654 <sys_memcpy_swap>
	m[44] = a2->type;
    9c6c:	9920      	ldr	r1, [sp, #128]	; 0x80
	sys_memcpy_swap(m + 45, a2->a.val, 6);
    9c6e:	2206      	movs	r2, #6
	m[44] = a2->type;
    9c70:	f811 3b01 	ldrb.w	r3, [r1], #1
    9c74:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
    9c78:	f10d 005d 	add.w	r0, sp, #93	; 0x5d
    9c7c:	f7ff fcea 	bl	9654 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
    9c80:	9b21      	ldr	r3, [sp, #132]	; 0x84
    9c82:	2235      	movs	r2, #53	; 0x35
    9c84:	a90c      	add	r1, sp, #48	; 0x30
    9c86:	4668      	mov	r0, sp
    9c88:	f7ff fd8b 	bl	97a2 <bt_smp_aes_cmac>
	if (err) {
    9c8c:	4604      	mov	r4, r0
    9c8e:	b978      	cbnz	r0, 9cb0 <smp_f5+0xc0>
	sys_mem_swap(mackey, 16);
    9c90:	9821      	ldr	r0, [sp, #132]	; 0x84
    9c92:	f7ff ff53 	bl	9b3c <sys_mem_swap.constprop.15>
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
    9c96:	9b22      	ldr	r3, [sp, #136]	; 0x88
	m[0] = 0x01;
    9c98:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
    9c9c:	2235      	movs	r2, #53	; 0x35
    9c9e:	a90c      	add	r1, sp, #48	; 0x30
    9ca0:	4668      	mov	r0, sp
    9ca2:	f7ff fd7e 	bl	97a2 <bt_smp_aes_cmac>
	if (err) {
    9ca6:	4604      	mov	r4, r0
    9ca8:	b910      	cbnz	r0, 9cb0 <smp_f5+0xc0>
	sys_mem_swap(ltk, 16);
    9caa:	9822      	ldr	r0, [sp, #136]	; 0x88
    9cac:	f7ff ff46 	bl	9b3c <sys_mem_swap.constprop.15>
}
    9cb0:	4620      	mov	r0, r4
    9cb2:	b01a      	add	sp, #104	; 0x68
    9cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9cb8:	0002537d 	.word	0x0002537d

00009cbc <smp_f4>:
{
    9cbc:	b570      	push	{r4, r5, r6, lr}
    9cbe:	b096      	sub	sp, #88	; 0x58
    9cc0:	4614      	mov	r4, r2
    9cc2:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
    9cc4:	2220      	movs	r2, #32
    9cc6:	4601      	mov	r1, r0
    9cc8:	a805      	add	r0, sp, #20
{
    9cca:	461d      	mov	r5, r3
	sys_memcpy_swap(m, u, 32);
    9ccc:	f7ff fcc2 	bl	9654 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
    9cd0:	2220      	movs	r2, #32
    9cd2:	4631      	mov	r1, r6
    9cd4:	a80d      	add	r0, sp, #52	; 0x34
    9cd6:	f7ff fcbd 	bl	9654 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
    9cda:	4621      	mov	r1, r4
    9cdc:	2210      	movs	r2, #16
    9cde:	a801      	add	r0, sp, #4
	m[64] = z;
    9ce0:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
    9ce4:	f7ff fcb6 	bl	9654 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
    9ce8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    9cea:	2241      	movs	r2, #65	; 0x41
    9cec:	a905      	add	r1, sp, #20
    9cee:	a801      	add	r0, sp, #4
    9cf0:	f7ff fd57 	bl	97a2 <bt_smp_aes_cmac>
	if (err) {
    9cf4:	4604      	mov	r4, r0
    9cf6:	b910      	cbnz	r0, 9cfe <smp_f4+0x42>
	sys_mem_swap(res, 16);
    9cf8:	981a      	ldr	r0, [sp, #104]	; 0x68
    9cfa:	f7ff ff1f 	bl	9b3c <sys_mem_swap.constprop.15>
}
    9cfe:	4620      	mov	r0, r4
    9d00:	b016      	add	sp, #88	; 0x58
    9d02:	bd70      	pop	{r4, r5, r6, pc}

00009d04 <sc_smp_check_confirm>:
{
    9d04:	b530      	push	{r4, r5, lr}
	switch (smp->method) {
    9d06:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
{
    9d0a:	b087      	sub	sp, #28
    9d0c:	4604      	mov	r4, r0
	switch (smp->method) {
    9d0e:	2b03      	cmp	r3, #3
    9d10:	d825      	bhi.n	9d5e <sc_smp_check_confirm+0x5a>
    9d12:	e8df f003 	tbb	[pc, r3]
    9d16:	0222      	.short	0x0222
    9d18:	2202      	.short	0x2202
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    9d1a:	f890 2178 	ldrb.w	r2, [r0, #376]	; 0x178
    9d1e:	f8d0 3174 	ldr.w	r3, [r0, #372]	; 0x174
    9d22:	40d3      	lsrs	r3, r2
    9d24:	f003 0301 	and.w	r3, r3, #1
		r |= 0x80;
    9d28:	f063 037f 	orn	r3, r3, #127	; 0x7f
    9d2c:	b2db      	uxtb	r3, r3
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    9d2e:	ad02      	add	r5, sp, #8
    9d30:	9500      	str	r5, [sp, #0]
    9d32:	f104 02d3 	add.w	r2, r4, #211	; 0xd3
    9d36:	490b      	ldr	r1, [pc, #44]	; (9d64 <sc_smp_check_confirm+0x60>)
    9d38:	f104 00f3 	add.w	r0, r4, #243	; 0xf3
    9d3c:	f7ff ffbe 	bl	9cbc <smp_f4>
    9d40:	b968      	cbnz	r0, 9d5e <sc_smp_check_confirm+0x5a>
	if (memcmp(smp->pcnf, cfm, 16)) {
    9d42:	2210      	movs	r2, #16
    9d44:	4629      	mov	r1, r5
    9d46:	f104 00b3 	add.w	r0, r4, #179	; 0xb3
    9d4a:	f7f6 fcf5 	bl	738 <memcmp>
    9d4e:	2800      	cmp	r0, #0
	return 0;
    9d50:	bf14      	ite	ne
    9d52:	2004      	movne	r0, #4
    9d54:	2000      	moveq	r0, #0
}
    9d56:	b007      	add	sp, #28
    9d58:	bd30      	pop	{r4, r5, pc}
		r = 0;
    9d5a:	2300      	movs	r3, #0
    9d5c:	e7e7      	b.n	9d2e <sc_smp_check_confirm+0x2a>
		return BT_SMP_ERR_UNSPECIFIED;
    9d5e:	2008      	movs	r0, #8
    9d60:	e7f9      	b.n	9d56 <sc_smp_check_confirm+0x52>
    9d62:	bf00      	nop
    9d64:	200008f9 	.word	0x200008f9

00009d68 <smp_send>:
{
    9d68:	b510      	push	{r4, lr}
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb);
    9d6a:	4613      	mov	r3, r2
{
    9d6c:	4604      	mov	r4, r0
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb);
    9d6e:	460a      	mov	r2, r1
    9d70:	6800      	ldr	r0, [r0, #0]
    9d72:	2106      	movs	r1, #6
    9d74:	f7fc ff7c 	bl	6c70 <bt_l2cap_send_cb>
    9d78:	f504 71be 	add.w	r1, r4, #380	; 0x17c
    9d7c:	f247 5230 	movw	r2, #30000	; 0x7530
    9d80:	4802      	ldr	r0, [pc, #8]	; (9d8c <smp_send+0x24>)
}
    9d82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9d86:	f018 bab9 	b.w	222fc <k_delayed_work_submit_to_queue>
    9d8a:	bf00      	nop
    9d8c:	20003340 	.word	0x20003340

00009d90 <sc_smp_send_dhkey_check>:
{
    9d90:	b570      	push	{r4, r5, r6, lr}
    9d92:	4605      	mov	r5, r0
	buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_DHKEY_CHECK,
    9d94:	200d      	movs	r0, #13
{
    9d96:	460e      	mov	r6, r1
	buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_DHKEY_CHECK,
    9d98:	f7ff fea0 	bl	9adc <smp_create_pdu.isra.5>
	if (!buf) {
    9d9c:	4604      	mov	r4, r0
    9d9e:	b170      	cbz	r0, 9dbe <sc_smp_send_dhkey_check+0x2e>
	req = net_buf_add(buf, sizeof(*req));
    9da0:	2110      	movs	r1, #16
    9da2:	3008      	adds	r0, #8
    9da4:	f00f fb02 	bl	193ac <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
    9da8:	4631      	mov	r1, r6
    9daa:	2210      	movs	r2, #16
    9dac:	f7f6 fcf1 	bl	792 <memcpy>
	smp_send(smp, buf, NULL);
    9db0:	4628      	mov	r0, r5
    9db2:	2200      	movs	r2, #0
    9db4:	4621      	mov	r1, r4
    9db6:	f7ff ffd7 	bl	9d68 <smp_send>
	return 0;
    9dba:	2000      	movs	r0, #0
    9dbc:	bd70      	pop	{r4, r5, r6, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    9dbe:	2008      	movs	r0, #8
}
    9dc0:	bd70      	pop	{r4, r5, r6, pc}

00009dc2 <compute_and_send_master_dhcheck>:
{
    9dc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9dc6:	4604      	mov	r4, r0
    9dc8:	b08c      	sub	sp, #48	; 0x30
	memset(r, 0, sizeof(r));
    9dca:	2210      	movs	r2, #16
    9dcc:	2100      	movs	r1, #0
    9dce:	a808      	add	r0, sp, #32
    9dd0:	f7f6 fd0b 	bl	7ea <memset>
	switch (smp->method) {
    9dd4:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    9dd8:	2b03      	cmp	r3, #3
    9dda:	d81f      	bhi.n	9e1c <compute_and_send_master_dhcheck+0x5a>
    9ddc:	e8df f003 	tbb	[pc, r3]
    9de0:	08020208 	.word	0x08020208
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
    9de4:	2204      	movs	r2, #4
    9de6:	f504 71ba 	add.w	r1, r4, #372	; 0x174
    9dea:	a808      	add	r0, sp, #32
    9dec:	f7f6 fcd1 	bl	792 <memcpy>
		   &smp->chan.chan.conn->le.init_addr,
    9df0:	6823      	ldr	r3, [r4, #0]
		   smp->tk)) {
    9df2:	f104 02e3 	add.w	r2, r4, #227	; 0xe3
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
    9df6:	f104 07c3 	add.w	r7, r4, #195	; 0xc3
    9dfa:	f104 08d3 	add.w	r8, r4, #211	; 0xd3
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    9dfe:	f204 1563 	addw	r5, r4, #355	; 0x163
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
    9e02:	9202      	str	r2, [sp, #8]
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    9e04:	f103 0256 	add.w	r2, r3, #86	; 0x56
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
    9e08:	9200      	str	r2, [sp, #0]
    9e0a:	9501      	str	r5, [sp, #4]
    9e0c:	334f      	adds	r3, #79	; 0x4f
    9e0e:	4642      	mov	r2, r8
    9e10:	4639      	mov	r1, r7
    9e12:	f204 1033 	addw	r0, r4, #307	; 0x133
    9e16:	f7ff feeb 	bl	9bf0 <smp_f5>
    9e1a:	b108      	cbz	r0, 9e20 <compute_and_send_master_dhcheck+0x5e>
		return BT_SMP_ERR_UNSPECIFIED;
    9e1c:	2008      	movs	r0, #8
    9e1e:	e01d      	b.n	9e5c <compute_and_send_master_dhcheck+0x9a>
		   &smp->chan.chan.conn->le.init_addr,
    9e20:	4622      	mov	r2, r4
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
    9e22:	ae04      	add	r6, sp, #16
		   &smp->chan.chan.conn->le.init_addr,
    9e24:	f852 3ba6 	ldr.w	r3, [r2], #166
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
    9e28:	9603      	str	r6, [sp, #12]
		   &smp->chan.chan.conn->le.resp_addr, e)) {
    9e2a:	f103 0156 	add.w	r1, r3, #86	; 0x56
		   &smp->chan.chan.conn->le.init_addr,
    9e2e:	334f      	adds	r3, #79	; 0x4f
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
    9e30:	e88d 000c 	stmia.w	sp, {r2, r3}
    9e34:	9102      	str	r1, [sp, #8]
    9e36:	4628      	mov	r0, r5
    9e38:	ab08      	add	r3, sp, #32
    9e3a:	4642      	mov	r2, r8
    9e3c:	4639      	mov	r1, r7
    9e3e:	f7ff fe8c 	bl	9b5a <smp_f6>
    9e42:	4605      	mov	r5, r0
    9e44:	2800      	cmp	r0, #0
    9e46:	d1e9      	bne.n	9e1c <compute_and_send_master_dhcheck+0x5a>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    9e48:	210d      	movs	r1, #13
    9e4a:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    9e4e:	f7ff fc7c 	bl	974a <atomic_set_bit>
	sc_smp_send_dhkey_check(smp, e);
    9e52:	4631      	mov	r1, r6
    9e54:	4620      	mov	r0, r4
    9e56:	f7ff ff9b 	bl	9d90 <sc_smp_send_dhkey_check>
	return 0;
    9e5a:	4628      	mov	r0, r5
}
    9e5c:	b00c      	add	sp, #48	; 0x30
    9e5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00009e62 <compute_and_check_and_send_slave_dhcheck>:
{
    9e62:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    9e66:	4604      	mov	r4, r0
    9e68:	b091      	sub	sp, #68	; 0x44
	memset(r, 0, sizeof(r));
    9e6a:	2210      	movs	r2, #16
    9e6c:	2100      	movs	r1, #0
    9e6e:	a80c      	add	r0, sp, #48	; 0x30
    9e70:	f7f6 fcbb 	bl	7ea <memset>
	switch (smp->method) {
    9e74:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    9e78:	2b03      	cmp	r3, #3
    9e7a:	d81f      	bhi.n	9ebc <compute_and_check_and_send_slave_dhcheck+0x5a>
    9e7c:	e8df f003 	tbb	[pc, r3]
    9e80:	08020208 	.word	0x08020208
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
    9e84:	2204      	movs	r2, #4
    9e86:	f504 71ba 	add.w	r1, r4, #372	; 0x174
    9e8a:	a80c      	add	r0, sp, #48	; 0x30
    9e8c:	f7f6 fc81 	bl	792 <memcpy>
		   &smp->chan.chan.conn->le.init_addr,
    9e90:	6823      	ldr	r3, [r4, #0]
		   smp->tk)) {
    9e92:	f104 02e3 	add.w	r2, r4, #227	; 0xe3
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    9e96:	f104 06d3 	add.w	r6, r4, #211	; 0xd3
    9e9a:	f104 08c3 	add.w	r8, r4, #195	; 0xc3
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    9e9e:	f204 1563 	addw	r5, r4, #355	; 0x163
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    9ea2:	9202      	str	r2, [sp, #8]
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    9ea4:	f103 0256 	add.w	r2, r3, #86	; 0x56
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    9ea8:	9200      	str	r2, [sp, #0]
    9eaa:	9501      	str	r5, [sp, #4]
    9eac:	334f      	adds	r3, #79	; 0x4f
    9eae:	4642      	mov	r2, r8
    9eb0:	4631      	mov	r1, r6
    9eb2:	f204 1033 	addw	r0, r4, #307	; 0x133
    9eb6:	f7ff fe9b 	bl	9bf0 <smp_f5>
    9eba:	b108      	cbz	r0, 9ec0 <compute_and_check_and_send_slave_dhcheck+0x5e>
		return BT_SMP_ERR_UNSPECIFIED;
    9ebc:	2008      	movs	r0, #8
    9ebe:	e039      	b.n	9f34 <compute_and_check_and_send_slave_dhcheck+0xd2>
		   &smp->chan.chan.conn->le.resp_addr,
    9ec0:	4622      	mov	r2, r4
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    9ec2:	af08      	add	r7, sp, #32
		   &smp->chan.chan.conn->le.resp_addr,
    9ec4:	f852 3bad 	ldr.w	r3, [r2], #173
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    9ec8:	9703      	str	r7, [sp, #12]
		   &smp->chan.chan.conn->le.init_addr, e)) {
    9eca:	f103 014f 	add.w	r1, r3, #79	; 0x4f
		   &smp->chan.chan.conn->le.resp_addr,
    9ece:	3356      	adds	r3, #86	; 0x56
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    9ed0:	e88d 000c 	stmia.w	sp, {r2, r3}
    9ed4:	9102      	str	r1, [sp, #8]
    9ed6:	ab0c      	add	r3, sp, #48	; 0x30
    9ed8:	4632      	mov	r2, r6
    9eda:	4641      	mov	r1, r8
    9edc:	4628      	mov	r0, r5
    9ede:	f7ff fe3c 	bl	9b5a <smp_f6>
    9ee2:	2800      	cmp	r0, #0
    9ee4:	d1ea      	bne.n	9ebc <compute_and_check_and_send_slave_dhcheck+0x5a>
		   &smp->chan.chan.conn->le.init_addr,
    9ee6:	4622      	mov	r2, r4
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    9ee8:	f10d 0910 	add.w	r9, sp, #16
		   &smp->chan.chan.conn->le.init_addr,
    9eec:	f852 3ba6 	ldr.w	r3, [r2], #166
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    9ef0:	f8cd 900c 	str.w	r9, [sp, #12]
		   &smp->chan.chan.conn->le.resp_addr, re)) {
    9ef4:	f103 0156 	add.w	r1, r3, #86	; 0x56
		   &smp->chan.chan.conn->le.init_addr,
    9ef8:	334f      	adds	r3, #79	; 0x4f
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    9efa:	e88d 000c 	stmia.w	sp, {r2, r3}
    9efe:	9102      	str	r1, [sp, #8]
    9f00:	ab0c      	add	r3, sp, #48	; 0x30
    9f02:	4642      	mov	r2, r8
    9f04:	4631      	mov	r1, r6
    9f06:	4628      	mov	r0, r5
    9f08:	f7ff fe27 	bl	9b5a <smp_f6>
    9f0c:	2800      	cmp	r0, #0
    9f0e:	d1d5      	bne.n	9ebc <compute_and_check_and_send_slave_dhcheck+0x5a>
	if (memcmp(smp->e, re, 16)) {
    9f10:	2210      	movs	r2, #16
    9f12:	4649      	mov	r1, r9
    9f14:	f204 1053 	addw	r0, r4, #339	; 0x153
    9f18:	f7f6 fc0e 	bl	738 <memcmp>
    9f1c:	4605      	mov	r5, r0
    9f1e:	b960      	cbnz	r0, 9f3a <compute_and_check_and_send_slave_dhcheck+0xd8>
	sc_smp_send_dhkey_check(smp, e);
    9f20:	4639      	mov	r1, r7
    9f22:	4620      	mov	r0, r4
    9f24:	f7ff ff34 	bl	9d90 <sc_smp_send_dhkey_check>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    9f28:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    9f2c:	2101      	movs	r1, #1
    9f2e:	f7ff fc0c 	bl	974a <atomic_set_bit>
	return 0;
    9f32:	4628      	mov	r0, r5
}
    9f34:	b011      	add	sp, #68	; 0x44
    9f36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
    9f3a:	200b      	movs	r0, #11
    9f3c:	e7fa      	b.n	9f34 <compute_and_check_and_send_slave_dhcheck+0xd2>

00009f3e <smp_dhkey_check>:
{
    9f3e:	b5f0      	push	{r4, r5, r6, r7, lr}
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    9f40:	6803      	ldr	r3, [r0, #0]
	struct bt_smp_dhkey_check *req = (void *)buf->data;
    9f42:	688f      	ldr	r7, [r1, #8]
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    9f44:	78dd      	ldrb	r5, [r3, #3]
{
    9f46:	b08d      	sub	sp, #52	; 0x34
    9f48:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    9f4a:	2d00      	cmp	r5, #0
    9f4c:	d14c      	bne.n	9fe8 <smp_dhkey_check+0xaa>
		memset(r, 0, sizeof(r));
    9f4e:	2210      	movs	r2, #16
    9f50:	4629      	mov	r1, r5
    9f52:	a808      	add	r0, sp, #32
    9f54:	f7f6 fc49 	bl	7ea <memset>
		switch (smp->method) {
    9f58:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    9f5c:	2b03      	cmp	r3, #3
    9f5e:	d81e      	bhi.n	9f9e <smp_dhkey_check+0x60>
    9f60:	e8df f003 	tbb	[pc, r3]
    9f64:	08020208 	.word	0x08020208
			memcpy(r, &smp->passkey, sizeof(smp->passkey));
    9f68:	2204      	movs	r2, #4
    9f6a:	f504 71ba 	add.w	r1, r4, #372	; 0x174
    9f6e:	a808      	add	r0, sp, #32
    9f70:	f7f6 fc0f 	bl	792 <memcpy>
			   &smp->chan.chan.conn->le.resp_addr,
    9f74:	4622      	mov	r2, r4
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
    9f76:	ae04      	add	r6, sp, #16
			   &smp->chan.chan.conn->le.resp_addr,
    9f78:	f852 3bc3 	ldr.w	r3, [r2], #195
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
    9f7c:	9603      	str	r6, [sp, #12]
			   &smp->chan.chan.conn->le.init_addr, e)) {
    9f7e:	f103 014f 	add.w	r1, r3, #79	; 0x4f
			   &smp->chan.chan.conn->le.resp_addr,
    9f82:	3356      	adds	r3, #86	; 0x56
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
    9f84:	9301      	str	r3, [sp, #4]
    9f86:	f104 03ad 	add.w	r3, r4, #173	; 0xad
    9f8a:	9102      	str	r1, [sp, #8]
    9f8c:	9300      	str	r3, [sp, #0]
    9f8e:	f104 01d3 	add.w	r1, r4, #211	; 0xd3
    9f92:	ab08      	add	r3, sp, #32
    9f94:	f204 1063 	addw	r0, r4, #355	; 0x163
    9f98:	f7ff fddf 	bl	9b5a <smp_f6>
    9f9c:	b118      	cbz	r0, 9fa6 <smp_dhkey_check+0x68>
			return BT_SMP_ERR_UNSPECIFIED;
    9f9e:	2508      	movs	r5, #8
}
    9fa0:	4628      	mov	r0, r5
    9fa2:	b00d      	add	sp, #52	; 0x34
    9fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (memcmp(e, req->e, 16)) {
    9fa6:	2210      	movs	r2, #16
    9fa8:	4639      	mov	r1, r7
    9faa:	4630      	mov	r0, r6
    9fac:	f7f6 fbc4 	bl	738 <memcmp>
    9fb0:	b9c0      	cbnz	r0, 9fe4 <smp_dhkey_check+0xa6>
	return min(req->max_key_size, rsp->max_key_size);
    9fb2:	f894 20b0 	ldrb.w	r2, [r4, #176]	; 0xb0
    9fb6:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
		if (bt_conn_le_start_encryption(smp->chan.chan.conn, 0, 0,
    9fba:	429a      	cmp	r2, r3
    9fbc:	bf94      	ite	ls
    9fbe:	9202      	strls	r2, [sp, #8]
    9fc0:	9302      	strhi	r3, [sp, #8]
						smp->tk, enc_size) < 0) {
    9fc2:	f104 03e3 	add.w	r3, r4, #227	; 0xe3
		if (bt_conn_le_start_encryption(smp->chan.chan.conn, 0, 0,
    9fc6:	e88d 0009 	stmia.w	sp, {r0, r3}
    9fca:	2200      	movs	r2, #0
    9fcc:	2300      	movs	r3, #0
    9fce:	6820      	ldr	r0, [r4, #0]
    9fd0:	f7fb fe72 	bl	5cb8 <bt_conn_le_start_encryption>
    9fd4:	2800      	cmp	r0, #0
    9fd6:	dbe2      	blt.n	9f9e <smp_dhkey_check+0x60>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    9fd8:	2101      	movs	r1, #1
    9fda:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    9fde:	f7ff fbb4 	bl	974a <atomic_set_bit>
			return 0;
    9fe2:	e7dd      	b.n	9fa0 <smp_dhkey_check+0x62>
			return BT_SMP_ERR_DHKEY_CHECK_FAILED;
    9fe4:	250b      	movs	r5, #11
    9fe6:	e7db      	b.n	9fa0 <smp_dhkey_check+0x62>
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
    9fe8:	2d01      	cmp	r5, #1
    9fea:	d11d      	bne.n	a028 <smp_dhkey_check+0xea>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    9fec:	f3bf 8f5b 	dmb	ish
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    9ff0:	f100 06a0 	add.w	r6, r0, #160	; 0xa0
    9ff4:	e856 3f00 	ldrex	r3, [r6]
    9ff8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    9ffc:	e846 3200 	strex	r2, r3, [r6]
    a000:	2a00      	cmp	r2, #0
    a002:	d1f7      	bne.n	9ff4 <smp_dhkey_check+0xb6>
    a004:	f3bf 8f5b 	dmb	ish
		memcpy(smp->e, req->e, sizeof(smp->e));
    a008:	2210      	movs	r2, #16
    a00a:	4639      	mov	r1, r7
    a00c:	f204 1053 	addw	r0, r4, #339	; 0x153
    a010:	f7f6 fbbf 	bl	792 <memcpy>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
    a014:	2107      	movs	r1, #7
    a016:	4630      	mov	r0, r6
    a018:	f7ff fb8a 	bl	9730 <atomic_test_bit>
    a01c:	4605      	mov	r5, r0
    a01e:	b128      	cbz	r0, a02c <smp_dhkey_check+0xee>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    a020:	2108      	movs	r1, #8
    a022:	4630      	mov	r0, r6
    a024:	f7ff fb91 	bl	974a <atomic_set_bit>
	return 0;
    a028:	2500      	movs	r5, #0
    a02a:	e7b9      	b.n	9fa0 <smp_dhkey_check+0x62>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    a02c:	2109      	movs	r1, #9
    a02e:	4630      	mov	r0, r6
    a030:	f7ff fb7e 	bl	9730 <atomic_test_bit>
    a034:	b110      	cbz	r0, a03c <smp_dhkey_check+0xfe>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    a036:	2108      	movs	r1, #8
    a038:	4630      	mov	r0, r6
    a03a:	e7d0      	b.n	9fde <smp_dhkey_check+0xa0>
		return compute_and_check_and_send_slave_dhcheck(smp);
    a03c:	4620      	mov	r0, r4
    a03e:	f7ff ff10 	bl	9e62 <compute_and_check_and_send_slave_dhcheck>
    a042:	4605      	mov	r5, r0
    a044:	e7ac      	b.n	9fa0 <smp_dhkey_check+0x62>
	...

0000a048 <sc_send_public_key>:
{
    a048:	b570      	push	{r4, r5, r6, lr}
    a04a:	4605      	mov	r5, r0
	req_buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_CMD_PUBLIC_KEY,
    a04c:	200c      	movs	r0, #12
    a04e:	f7ff fd45 	bl	9adc <smp_create_pdu.isra.5>
	if (!req_buf) {
    a052:	4604      	mov	r4, r0
    a054:	b1a0      	cbz	r0, a080 <sc_send_public_key+0x38>
	req = net_buf_add(req_buf, sizeof(*req));
    a056:	2140      	movs	r1, #64	; 0x40
    a058:	3008      	adds	r0, #8
    a05a:	f00f f9a7 	bl	193ac <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
    a05e:	2220      	movs	r2, #32
    a060:	4908      	ldr	r1, [pc, #32]	; (a084 <sc_send_public_key+0x3c>)
	req = net_buf_add(req_buf, sizeof(*req));
    a062:	4606      	mov	r6, r0
	memcpy(req->x, sc_public_key, sizeof(req->x));
    a064:	f7f6 fb95 	bl	792 <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
    a068:	2220      	movs	r2, #32
    a06a:	18b0      	adds	r0, r6, r2
    a06c:	4906      	ldr	r1, [pc, #24]	; (a088 <sc_send_public_key+0x40>)
    a06e:	f7f6 fb90 	bl	792 <memcpy>
	smp_send(smp, req_buf, NULL);
    a072:	4628      	mov	r0, r5
    a074:	2200      	movs	r2, #0
    a076:	4621      	mov	r1, r4
    a078:	f7ff fe76 	bl	9d68 <smp_send>
	return 0;
    a07c:	2000      	movs	r0, #0
    a07e:	bd70      	pop	{r4, r5, r6, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    a080:	2008      	movs	r0, #8
}
    a082:	bd70      	pop	{r4, r5, r6, pc}
    a084:	200008f9 	.word	0x200008f9
    a088:	20000919 	.word	0x20000919

0000a08c <send_pairing_rsp>:
{
    a08c:	b538      	push	{r3, r4, r5, lr}
    a08e:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
    a090:	2002      	movs	r0, #2
    a092:	f7ff fd23 	bl	9adc <smp_create_pdu.isra.5>
	if (!rsp_buf) {
    a096:	4604      	mov	r4, r0
    a098:	b178      	cbz	r0, a0ba <send_pairing_rsp+0x2e>
	rsp = net_buf_add(rsp_buf, sizeof(*rsp));
    a09a:	2106      	movs	r1, #6
    a09c:	3008      	adds	r0, #8
    a09e:	f00f f985 	bl	193ac <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
    a0a2:	f105 01ad 	add.w	r1, r5, #173	; 0xad
    a0a6:	2206      	movs	r2, #6
    a0a8:	f7f6 fb73 	bl	792 <memcpy>
	smp_send(smp, rsp_buf, NULL);
    a0ac:	4628      	mov	r0, r5
    a0ae:	2200      	movs	r2, #0
    a0b0:	4621      	mov	r1, r4
    a0b2:	f7ff fe59 	bl	9d68 <smp_send>
	return 0;
    a0b6:	2000      	movs	r0, #0
    a0b8:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    a0ba:	2008      	movs	r0, #8
}
    a0bc:	bd38      	pop	{r3, r4, r5, pc}
	...

0000a0c0 <smp_pairing_req>:
{
    a0c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_smp_pairing *req = (void *)buf->data;
    a0c2:	688f      	ldr	r7, [r1, #8]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    a0c4:	78fb      	ldrb	r3, [r7, #3]
    a0c6:	3b07      	subs	r3, #7
    a0c8:	2b09      	cmp	r3, #9
{
    a0ca:	4604      	mov	r4, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    a0cc:	f200 80bf 	bhi.w	a24e <smp_pairing_req+0x18e>
	ret = smp_init(smp);
    a0d0:	f7ff fb4f 	bl	9772 <smp_init>
	if (ret) {
    a0d4:	4605      	mov	r5, r0
    a0d6:	b110      	cbz	r0, a0de <smp_pairing_req+0x1e>
		return ret;
    a0d8:	b2c5      	uxtb	r5, r0
}
    a0da:	4628      	mov	r0, r5
    a0dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    a0de:	2301      	movs	r3, #1
	memcpy(smp->preq + 1, req, sizeof(*req));
    a0e0:	2206      	movs	r2, #6
    a0e2:	4639      	mov	r1, r7
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    a0e4:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
	memcpy(smp->preq + 1, req, sizeof(*req));
    a0e8:	f104 00a6 	add.w	r0, r4, #166	; 0xa6
    a0ec:	f7f6 fb51 	bl	792 <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
    a0f0:	2302      	movs	r3, #2
    a0f2:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
	rsp->auth_req = get_auth(req->auth_req);
    a0f6:	78b8      	ldrb	r0, [r7, #2]
    a0f8:	f7ff fade 	bl	96b8 <get_auth>
    a0fc:	f884 00af 	strb.w	r0, [r4, #175]	; 0xaf
    a100:	4606      	mov	r6, r0
	rsp->io_capability = get_io_capa();
    a102:	f7ff fab3 	bl	966c <get_io_capa>
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    a106:	2310      	movs	r3, #16
	rsp->io_capability = get_io_capa();
    a108:	f884 00ad 	strb.w	r0, [r4, #173]	; 0xad
	rsp->oob_flag = BT_SMP_OOB_NOT_PRESENT;
    a10c:	f884 50ae 	strb.w	r5, [r4, #174]	; 0xae
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    a110:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
    a114:	793b      	ldrb	r3, [r7, #4]
    a116:	f003 0303 	and.w	r3, r3, #3
    a11a:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
    a11e:	797b      	ldrb	r3, [r7, #5]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    a120:	f016 0f08 	tst.w	r6, #8
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
    a124:	f003 0301 	and.w	r3, r3, #1
    a128:	f884 30b2 	strb.w	r3, [r4, #178]	; 0xb2
    a12c:	f104 06a0 	add.w	r6, r4, #160	; 0xa0
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    a130:	d00e      	beq.n	a150 <smp_pairing_req+0x90>
    a132:	78bb      	ldrb	r3, [r7, #2]
    a134:	071b      	lsls	r3, r3, #28
    a136:	d50b      	bpl.n	a150 <smp_pairing_req+0x90>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
    a138:	2105      	movs	r1, #5
    a13a:	4630      	mov	r0, r6
    a13c:	f7ff fb05 	bl	974a <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
    a140:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
		rsp->resp_key_dist &= SEND_KEYS_SC;
    a144:	f884 50b2 	strb.w	r5, [r4, #178]	; 0xb2
		rsp->init_key_dist &= RECV_KEYS_SC;
    a148:	f003 0302 	and.w	r3, r3, #2
    a14c:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    a150:	f894 30af 	ldrb.w	r3, [r4, #175]	; 0xaf
    a154:	0698      	lsls	r0, r3, #26
    a156:	d506      	bpl.n	a166 <smp_pairing_req+0xa6>
    a158:	78bb      	ldrb	r3, [r7, #2]
    a15a:	0699      	lsls	r1, r3, #26
    a15c:	d503      	bpl.n	a166 <smp_pairing_req+0xa6>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
    a15e:	2111      	movs	r1, #17
    a160:	4630      	mov	r0, r6
    a162:	f7ff faf2 	bl	974a <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
    a166:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
    a16a:	f884 3179 	strb.w	r3, [r4, #377]	; 0x179
	smp->remote_dist = rsp->init_key_dist;
    a16e:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
    a172:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    a176:	f894 30af 	ldrb.w	r3, [r4, #175]	; 0xaf
    a17a:	07da      	lsls	r2, r3, #31
    a17c:	d506      	bpl.n	a18c <smp_pairing_req+0xcc>
    a17e:	78bb      	ldrb	r3, [r7, #2]
    a180:	07db      	lsls	r3, r3, #31
    a182:	d503      	bpl.n	a18c <smp_pairing_req+0xcc>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
    a184:	210a      	movs	r1, #10
    a186:	4630      	mov	r0, r6
    a188:	f7ff fadf 	bl	974a <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
    a18c:	2103      	movs	r1, #3
    a18e:	4630      	mov	r0, r6
    a190:	f7ff fadb 	bl	974a <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    a194:	2105      	movs	r1, #5
    a196:	4630      	mov	r0, r6
    a198:	f7ff faca 	bl	9730 <atomic_test_bit>
    a19c:	783f      	ldrb	r7, [r7, #0]
    a19e:	bb58      	cbnz	r0, a1f8 <smp_pairing_req+0x138>
	smp->method = legacy_get_pair_method(smp, remote_io);
    a1a0:	4639      	mov	r1, r7
    a1a2:	4620      	mov	r0, r4
    a1a4:	f7ff fc3e 	bl	9a24 <legacy_get_pair_method>
    a1a8:	4605      	mov	r5, r0
    a1aa:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
	if (smp->method == JUST_WORKS &&
    a1ae:	b990      	cbnz	r0, a1d6 <smp_pairing_req+0x116>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    a1b0:	210c      	movs	r1, #12
    a1b2:	4630      	mov	r0, r6
    a1b4:	f7ff fabc 	bl	9730 <atomic_test_bit>
	if (smp->method == JUST_WORKS &&
    a1b8:	b968      	cbnz	r0, a1d6 <smp_pairing_req+0x116>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    a1ba:	4f26      	ldr	r7, [pc, #152]	; (a254 <smp_pairing_req+0x194>)
    a1bc:	683b      	ldr	r3, [r7, #0]
    a1be:	b153      	cbz	r3, a1d6 <smp_pairing_req+0x116>
	    bt_auth && bt_auth->pairing_confirm) {
    a1c0:	691b      	ldr	r3, [r3, #16]
    a1c2:	b143      	cbz	r3, a1d6 <smp_pairing_req+0x116>
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    a1c4:	4630      	mov	r0, r6
    a1c6:	2109      	movs	r1, #9
    a1c8:	f7ff fabf 	bl	974a <atomic_set_bit>
			bt_auth->pairing_confirm(smp->chan.chan.conn);
    a1cc:	683b      	ldr	r3, [r7, #0]
    a1ce:	6820      	ldr	r0, [r4, #0]
    a1d0:	691b      	ldr	r3, [r3, #16]
    a1d2:	4798      	blx	r3
			return 0;
    a1d4:	e781      	b.n	a0da <smp_pairing_req+0x1a>
	ret = send_pairing_rsp(smp);
    a1d6:	4620      	mov	r0, r4
    a1d8:	f7ff ff58 	bl	a08c <send_pairing_rsp>
	if (ret) {
    a1dc:	4605      	mov	r5, r0
    a1de:	2800      	cmp	r0, #0
    a1e0:	f47f af7b 	bne.w	a0da <smp_pairing_req+0x1a>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    a1e4:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    a1e8:	2103      	movs	r1, #3
    a1ea:	f7ff faae 	bl	974a <atomic_set_bit>
	return legacy_request_tk(smp);
    a1ee:	4620      	mov	r0, r4
}
    a1f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return legacy_request_tk(smp);
    a1f4:	f7ff bbb2 	b.w	995c <legacy_request_tk>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY)
    a1f8:	2f04      	cmp	r7, #4
    a1fa:	d826      	bhi.n	a24a <smp_pairing_req+0x18a>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    a1fc:	f894 50a8 	ldrb.w	r5, [r4, #168]	; 0xa8
    a200:	f894 30af 	ldrb.w	r3, [r4, #175]	; 0xaf
    a204:	431d      	orrs	r5, r3
    a206:	f015 0504 	ands.w	r5, r5, #4
    a20a:	d006      	beq.n	a21a <smp_pairing_req+0x15a>
	return gen_method_sc[remote_io][get_io_capa()];
    a20c:	f7ff fa2e 	bl	966c <get_io_capa>
    a210:	4911      	ldr	r1, [pc, #68]	; (a258 <smp_pairing_req+0x198>)
    a212:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    a216:	440f      	add	r7, r1
    a218:	5c3d      	ldrb	r5, [r7, r0]
	smp->method = get_pair_method(smp, req->io_capability);
    a21a:	f884 50a4 	strb.w	r5, [r4, #164]	; 0xa4
	if (smp->method == JUST_WORKS) {
    a21e:	b955      	cbnz	r5, a236 <smp_pairing_req+0x176>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    a220:	210c      	movs	r1, #12
    a222:	4630      	mov	r0, r6
    a224:	f7ff fa84 	bl	9730 <atomic_test_bit>
    a228:	b928      	cbnz	r0, a236 <smp_pairing_req+0x176>
    a22a:	4f0a      	ldr	r7, [pc, #40]	; (a254 <smp_pairing_req+0x194>)
    a22c:	683b      	ldr	r3, [r7, #0]
    a22e:	b113      	cbz	r3, a236 <smp_pairing_req+0x176>
		    bt_auth && bt_auth->pairing_confirm) {
    a230:	691b      	ldr	r3, [r3, #16]
    a232:	2b00      	cmp	r3, #0
    a234:	d1c6      	bne.n	a1c4 <smp_pairing_req+0x104>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    a236:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    a23a:	210c      	movs	r1, #12
    a23c:	f7ff fa85 	bl	974a <atomic_set_bit>
	return send_pairing_rsp(smp);
    a240:	4620      	mov	r0, r4
}
    a242:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return send_pairing_rsp(smp);
    a246:	f7ff bf21 	b.w	a08c <send_pairing_rsp>
		return JUST_WORKS;
    a24a:	2500      	movs	r5, #0
    a24c:	e7e5      	b.n	a21a <smp_pairing_req+0x15a>
		return BT_SMP_ERR_ENC_KEY_SIZE;
    a24e:	2506      	movs	r5, #6
    a250:	e743      	b.n	a0da <smp_pairing_req+0x1a>
    a252:	bf00      	nop
    a254:	20003128 	.word	0x20003128
    a258:	0002528b 	.word	0x0002528b

0000a25c <smp_send_pairing_random>:
{
    a25c:	b538      	push	{r3, r4, r5, lr}
    a25e:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
    a260:	2004      	movs	r0, #4
    a262:	f7ff fc3b 	bl	9adc <smp_create_pdu.isra.5>
	if (!rsp_buf) {
    a266:	4604      	mov	r4, r0
    a268:	b178      	cbz	r0, a28a <smp_send_pairing_random+0x2e>
	req = net_buf_add(rsp_buf, sizeof(*req));
    a26a:	2110      	movs	r1, #16
    a26c:	3008      	adds	r0, #8
    a26e:	f00f f89d 	bl	193ac <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
    a272:	f105 01c3 	add.w	r1, r5, #195	; 0xc3
    a276:	2210      	movs	r2, #16
    a278:	f7f6 fa8b 	bl	792 <memcpy>
	smp_send(smp, rsp_buf, NULL);
    a27c:	4628      	mov	r0, r5
    a27e:	2200      	movs	r2, #0
    a280:	4621      	mov	r1, r4
    a282:	f7ff fd71 	bl	9d68 <smp_send>
	return 0;
    a286:	2000      	movs	r0, #0
    a288:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    a28a:	2008      	movs	r0, #8
}
    a28c:	bd38      	pop	{r3, r4, r5, pc}
	...

0000a290 <bt_smp_distribute_keys>:
{
    a290:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a294:	4605      	mov	r5, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    a296:	6800      	ldr	r0, [r0, #0]
	if (!keys) {
    a298:	6f03      	ldr	r3, [r0, #112]	; 0x70
{
    a29a:	b08d      	sub	sp, #52	; 0x34
	if (!keys) {
    a29c:	b97b      	cbnz	r3, a2be <bt_smp_distribute_keys+0x2e>
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
    a29e:	3048      	adds	r0, #72	; 0x48
    a2a0:	f7f9 f83c 	bl	331c <bt_addr_le_str>
    a2a4:	4b43      	ldr	r3, [pc, #268]	; (a3b4 <bt_smp_distribute_keys+0x124>)
    a2a6:	9302      	str	r3, [sp, #8]
    a2a8:	9001      	str	r0, [sp, #4]
    a2aa:	9300      	str	r3, [sp, #0]
    a2ac:	4a42      	ldr	r2, [pc, #264]	; (a3b8 <bt_smp_distribute_keys+0x128>)
    a2ae:	4b43      	ldr	r3, [pc, #268]	; (a3bc <bt_smp_distribute_keys+0x12c>)
    a2b0:	4943      	ldr	r1, [pc, #268]	; (a3c0 <bt_smp_distribute_keys+0x130>)
    a2b2:	4844      	ldr	r0, [pc, #272]	; (a3c4 <bt_smp_distribute_keys+0x134>)
    a2b4:	f7f7 fff4 	bl	22a0 <printk>
}
    a2b8:	b00d      	add	sp, #52	; 0x34
    a2ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    a2be:	f105 07a0 	add.w	r7, r5, #160	; 0xa0
    a2c2:	2105      	movs	r1, #5
    a2c4:	4638      	mov	r0, r7
    a2c6:	f7ff fa33 	bl	9730 <atomic_test_bit>
    a2ca:	4680      	mov	r8, r0
    a2cc:	2800      	cmp	r0, #0
    a2ce:	d1f3      	bne.n	a2b8 <bt_smp_distribute_keys+0x28>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
    a2d0:	f895 3179 	ldrb.w	r3, [r5, #377]	; 0x179
    a2d4:	07db      	lsls	r3, r3, #31
    a2d6:	d5ef      	bpl.n	a2b8 <bt_smp_distribute_keys+0x28>
	struct bt_keys *keys = conn->le.keys;
    a2d8:	682b      	ldr	r3, [r5, #0]
		bt_rand(key, sizeof(key));
    a2da:	2110      	movs	r1, #16
    a2dc:	a808      	add	r0, sp, #32
	struct bt_keys *keys = conn->le.keys;
    a2de:	6f1c      	ldr	r4, [r3, #112]	; 0x70
		bt_rand(key, sizeof(key));
    a2e0:	f002 fab8 	bl	c854 <bt_rand>
		bt_rand(&rand, sizeof(rand));
    a2e4:	2108      	movs	r1, #8
    a2e6:	a806      	add	r0, sp, #24
    a2e8:	f002 fab4 	bl	c854 <bt_rand>
		bt_rand(&ediv, sizeof(ediv));
    a2ec:	2102      	movs	r1, #2
    a2ee:	f10d 0016 	add.w	r0, sp, #22
    a2f2:	f002 faaf 	bl	c854 <bt_rand>
		buf = smp_create_pdu(conn, BT_SMP_CMD_ENCRYPT_INFO,
    a2f6:	2006      	movs	r0, #6
    a2f8:	f7ff fbf0 	bl	9adc <smp_create_pdu.isra.5>
		if (!buf) {
    a2fc:	4606      	mov	r6, r0
    a2fe:	b948      	cbnz	r0, a314 <bt_smp_distribute_keys+0x84>
			BT_ERR("Unable to allocate Encrypt Info buffer");
    a300:	4b2c      	ldr	r3, [pc, #176]	; (a3b4 <bt_smp_distribute_keys+0x124>)
    a302:	9301      	str	r3, [sp, #4]
    a304:	9300      	str	r3, [sp, #0]
    a306:	4a2c      	ldr	r2, [pc, #176]	; (a3b8 <bt_smp_distribute_keys+0x128>)
    a308:	4b2f      	ldr	r3, [pc, #188]	; (a3c8 <bt_smp_distribute_keys+0x138>)
    a30a:	492d      	ldr	r1, [pc, #180]	; (a3c0 <bt_smp_distribute_keys+0x130>)
    a30c:	482f      	ldr	r0, [pc, #188]	; (a3cc <bt_smp_distribute_keys+0x13c>)
			BT_ERR("Unable to allocate Master Ident buffer");
    a30e:	f7f7 ffc7 	bl	22a0 <printk>
    a312:	e7d1      	b.n	a2b8 <bt_smp_distribute_keys+0x28>
		info = net_buf_add(buf, sizeof(*info));
    a314:	2110      	movs	r1, #16
    a316:	3008      	adds	r0, #8
    a318:	f00f f848 	bl	193ac <net_buf_simple_add>
		memcpy(info->ltk, key, keys->enc_size);
    a31c:	79e2      	ldrb	r2, [r4, #7]
    a31e:	a908      	add	r1, sp, #32
		info = net_buf_add(buf, sizeof(*info));
    a320:	4681      	mov	r9, r0
		memcpy(info->ltk, key, keys->enc_size);
    a322:	f7f6 fa36 	bl	792 <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
    a326:	79e0      	ldrb	r0, [r4, #7]
    a328:	280f      	cmp	r0, #15
    a32a:	d805      	bhi.n	a338 <bt_smp_distribute_keys+0xa8>
			memset(info->ltk + keys->enc_size, 0,
    a32c:	f1c0 0210 	rsb	r2, r0, #16
    a330:	4641      	mov	r1, r8
    a332:	4448      	add	r0, r9
    a334:	f7f6 fa59 	bl	7ea <memset>
		smp_send(smp, buf, NULL);
    a338:	4631      	mov	r1, r6
    a33a:	2200      	movs	r2, #0
    a33c:	4628      	mov	r0, r5
    a33e:	f7ff fd13 	bl	9d68 <smp_send>
		buf = smp_create_pdu(conn, BT_SMP_CMD_MASTER_IDENT,
    a342:	2007      	movs	r0, #7
    a344:	f7ff fbca 	bl	9adc <smp_create_pdu.isra.5>
		if (!buf) {
    a348:	4606      	mov	r6, r0
    a34a:	b938      	cbnz	r0, a35c <bt_smp_distribute_keys+0xcc>
			BT_ERR("Unable to allocate Master Ident buffer");
    a34c:	4b19      	ldr	r3, [pc, #100]	; (a3b4 <bt_smp_distribute_keys+0x124>)
    a34e:	9301      	str	r3, [sp, #4]
    a350:	9300      	str	r3, [sp, #0]
    a352:	4a19      	ldr	r2, [pc, #100]	; (a3b8 <bt_smp_distribute_keys+0x128>)
    a354:	4b1c      	ldr	r3, [pc, #112]	; (a3c8 <bt_smp_distribute_keys+0x138>)
    a356:	491a      	ldr	r1, [pc, #104]	; (a3c0 <bt_smp_distribute_keys+0x130>)
    a358:	481d      	ldr	r0, [pc, #116]	; (a3d0 <bt_smp_distribute_keys+0x140>)
    a35a:	e7d8      	b.n	a30e <bt_smp_distribute_keys+0x7e>
		ident = net_buf_add(buf, sizeof(*ident));
    a35c:	210a      	movs	r1, #10
    a35e:	3008      	adds	r0, #8
    a360:	f00f f824 	bl	193ac <net_buf_simple_add>
		ident->rand = rand;
    a364:	9b06      	ldr	r3, [sp, #24]
    a366:	f8c0 3002 	str.w	r3, [r0, #2]
    a36a:	9b07      	ldr	r3, [sp, #28]
    a36c:	f8c0 3006 	str.w	r3, [r0, #6]
		ident->ediv = ediv;
    a370:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    a374:	8003      	strh	r3, [r0, #0]
		smp_send(smp, buf, ident_sent);
    a376:	4631      	mov	r1, r6
    a378:	4628      	mov	r0, r5
    a37a:	4a16      	ldr	r2, [pc, #88]	; (a3d4 <bt_smp_distribute_keys+0x144>)
    a37c:	f7ff fcf4 	bl	9d68 <smp_send>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    a380:	210a      	movs	r1, #10
    a382:	4638      	mov	r0, r7
    a384:	f7ff f9d4 	bl	9730 <atomic_test_bit>
    a388:	2800      	cmp	r0, #0
    a38a:	d095      	beq.n	a2b8 <bt_smp_distribute_keys+0x28>
			bt_keys_add_type(keys, BT_KEYS_SLAVE_LTK);
    a38c:	2101      	movs	r1, #1
    a38e:	4620      	mov	r0, r4
    a390:	f001 f9fe 	bl	b790 <bt_keys_add_type>
			memcpy(keys->slave_ltk.val, key,
    a394:	2210      	movs	r2, #16
    a396:	a908      	add	r1, sp, #32
    a398:	f104 0052 	add.w	r0, r4, #82	; 0x52
    a39c:	f7f6 f9f9 	bl	792 <memcpy>
			keys->slave_ltk.rand = rand;
    a3a0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    a3a4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
			keys->slave_ltk.ediv = ediv;
    a3a8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    a3ac:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
    a3b0:	e782      	b.n	a2b8 <bt_smp_distribute_keys+0x28>
    a3b2:	bf00      	nop
    a3b4:	00023dbe 	.word	0x00023dbe
    a3b8:	00022d86 	.word	0x00022d86
    a3bc:	00024fb9 	.word	0x00024fb9
    a3c0:	000272e8 	.word	0x000272e8
    a3c4:	000250f5 	.word	0x000250f5
    a3c8:	00024fa2 	.word	0x00024fa2
    a3cc:	0002511a 	.word	0x0002511a
    a3d0:	00025151 	.word	0x00025151
    a3d4:	0000a89d 	.word	0x0000a89d

0000a3d8 <atomic_test_and_clear_bit>:
{
    a3d8:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
    a3da:	f001 021f 	and.w	r2, r1, #31
    a3de:	2301      	movs	r3, #1
    a3e0:	4093      	lsls	r3, r2
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    a3e2:	0949      	lsrs	r1, r1, #5
    a3e4:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a3e6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    a3ea:	f3bf 8f5b 	dmb	ish
    a3ee:	e850 2f00 	ldrex	r2, [r0]
    a3f2:	ea02 0104 	and.w	r1, r2, r4
    a3f6:	e840 1e00 	strex	lr, r1, [r0]
    a3fa:	f1be 0f00 	cmp.w	lr, #0
    a3fe:	d1f6      	bne.n	a3ee <atomic_test_and_clear_bit+0x16>
    a400:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
    a404:	421a      	tst	r2, r3
}
    a406:	bf14      	ite	ne
    a408:	2001      	movne	r0, #1
    a40a:	2000      	moveq	r0, #0
    a40c:	bd10      	pop	{r4, pc}

0000a40e <smp_reset>:
{
    a40e:	b538      	push	{r3, r4, r5, lr}
    a410:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    a412:	6805      	ldr	r5, [r0, #0]
	k_delayed_work_cancel(&smp->work);
    a414:	f500 70be 	add.w	r0, r0, #380	; 0x17c
    a418:	f017 ff16 	bl	22248 <k_delayed_work_cancel>
	smp->method = JUST_WORKS;
    a41c:	2300      	movs	r3, #0
    a41e:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
	atomic_set(&smp->allowed_cmds, 0);
    a422:	f104 009c 	add.w	r0, r4, #156	; 0x9c
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    a426:	f3bf 8f5b 	dmb	ish
    a42a:	e850 2f00 	ldrex	r2, [r0]
    a42e:	e840 3100 	strex	r1, r3, [r0]
    a432:	2900      	cmp	r1, #0
    a434:	d1f9      	bne.n	a42a <smp_reset+0x1c>
    a436:	f3bf 8f5b 	dmb	ish
    a43a:	f3bf 8f5b 	dmb	ish
    a43e:	34a0      	adds	r4, #160	; 0xa0
    a440:	e854 2f00 	ldrex	r2, [r4]
    a444:	e844 3100 	strex	r1, r3, [r4]
    a448:	2900      	cmp	r1, #0
    a44a:	d1f9      	bne.n	a440 <smp_reset+0x32>
    a44c:	f3bf 8f5b 	dmb	ish
	if (conn->required_sec_level != conn->sec_level) {
    a450:	7a2b      	ldrb	r3, [r5, #8]
    a452:	7a6a      	ldrb	r2, [r5, #9]
    a454:	429a      	cmp	r2, r3
		conn->required_sec_level = conn->sec_level;
    a456:	bf18      	it	ne
    a458:	726b      	strbne	r3, [r5, #9]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    a45a:	78eb      	ldrb	r3, [r5, #3]
    a45c:	b923      	cbnz	r3, a468 <smp_reset+0x5a>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
    a45e:	210b      	movs	r1, #11
}
    a460:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
    a464:	f7ff b971 	b.w	974a <atomic_set_bit>
    a468:	2101      	movs	r1, #1
    a46a:	e7f9      	b.n	a460 <smp_reset+0x52>

0000a46c <smp_error>:
{
    a46c:	b570      	push	{r4, r5, r6, lr}
    a46e:	4605      	mov	r5, r0
    a470:	460e      	mov	r6, r1
	smp_reset(smp);
    a472:	f7ff ffcc 	bl	a40e <smp_reset>
	buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_CMD_PAIRING_FAIL,
    a476:	2005      	movs	r0, #5
    a478:	f7ff fb30 	bl	9adc <smp_create_pdu.isra.5>
	if (!buf) {
    a47c:	4604      	mov	r4, r0
    a47e:	b160      	cbz	r0, a49a <smp_error+0x2e>
	rsp = net_buf_add(buf, sizeof(*rsp));
    a480:	2101      	movs	r1, #1
    a482:	3008      	adds	r0, #8
    a484:	f00e ff92 	bl	193ac <net_buf_simple_add>
	rsp->reason = reason;
    a488:	7006      	strb	r6, [r0, #0]
    a48a:	6828      	ldr	r0, [r5, #0]
    a48c:	2300      	movs	r3, #0
    a48e:	4622      	mov	r2, r4
    a490:	2106      	movs	r1, #6
    a492:	f7fc fbed 	bl	6c70 <bt_l2cap_send_cb>
	return 0;
    a496:	2000      	movs	r0, #0
    a498:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    a49a:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    a49e:	bd70      	pop	{r4, r5, r6, pc}

0000a4a0 <bt_smp_dhkey_ready>:
{
    a4a0:	b538      	push	{r3, r4, r5, lr}
		if (atomic_test_and_clear_bit(bt_smp_pool[i].flags,
    a4a2:	4c1d      	ldr	r4, [pc, #116]	; (a518 <bt_smp_dhkey_ready+0x78>)
{
    a4a4:	4605      	mov	r5, r0
		if (atomic_test_and_clear_bit(bt_smp_pool[i].flags,
    a4a6:	2107      	movs	r1, #7
    a4a8:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    a4ac:	f7ff ff94 	bl	a3d8 <atomic_test_and_clear_bit>
    a4b0:	b370      	cbz	r0, a510 <bt_smp_dhkey_ready+0x70>
	if (!dhkey) {
    a4b2:	b92d      	cbnz	r5, a4c0 <bt_smp_dhkey_ready+0x20>
		smp_error(smp, BT_SMP_ERR_DHKEY_CHECK_FAILED);
    a4b4:	210b      	movs	r1, #11
			smp_error(smp, err);
    a4b6:	4620      	mov	r0, r4
}
    a4b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			smp_error(smp, err);
    a4bc:	f7ff bfd6 	b.w	a46c <smp_error>
	memcpy(smp->dhkey, dhkey, 32);
    a4c0:	4629      	mov	r1, r5
    a4c2:	2220      	movs	r2, #32
    a4c4:	f204 1033 	addw	r0, r4, #307	; 0x133
    a4c8:	f7f6 f963 	bl	792 <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    a4cc:	2109      	movs	r1, #9
    a4ce:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    a4d2:	f7ff f92d 	bl	9730 <atomic_test_bit>
    a4d6:	b128      	cbz	r0, a4e4 <bt_smp_dhkey_ready+0x44>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    a4d8:	2108      	movs	r1, #8
    a4da:	4810      	ldr	r0, [pc, #64]	; (a51c <bt_smp_dhkey_ready+0x7c>)
}
    a4dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    a4e0:	f7ff b933 	b.w	974a <atomic_set_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
    a4e4:	210d      	movs	r1, #13
    a4e6:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    a4ea:	f7ff f921 	bl	9730 <atomic_test_bit>
    a4ee:	2800      	cmp	r0, #0
    a4f0:	d1f2      	bne.n	a4d8 <bt_smp_dhkey_ready+0x38>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
    a4f2:	2108      	movs	r1, #8
    a4f4:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    a4f8:	f7ff f91a 	bl	9730 <atomic_test_bit>
    a4fc:	b140      	cbz	r0, a510 <bt_smp_dhkey_ready+0x70>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    a4fe:	6823      	ldr	r3, [r4, #0]
    a500:	78db      	ldrb	r3, [r3, #3]
			err = compute_and_send_master_dhcheck(smp);
    a502:	4620      	mov	r0, r4
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    a504:	b92b      	cbnz	r3, a512 <bt_smp_dhkey_ready+0x72>
			err = compute_and_send_master_dhcheck(smp);
    a506:	f7ff fc5c 	bl	9dc2 <compute_and_send_master_dhcheck>
		if (err) {
    a50a:	4601      	mov	r1, r0
    a50c:	2800      	cmp	r0, #0
    a50e:	d1d2      	bne.n	a4b6 <bt_smp_dhkey_ready+0x16>
    a510:	bd38      	pop	{r3, r4, r5, pc}
		err = compute_and_check_and_send_slave_dhcheck(smp);
    a512:	f7ff fca6 	bl	9e62 <compute_and_check_and_send_slave_dhcheck>
    a516:	e7f8      	b.n	a50a <bt_smp_dhkey_ready+0x6a>
    a518:	20000754 	.word	0x20000754
    a51c:	200007f4 	.word	0x200007f4

0000a520 <bt_smp_recv>:
{
    a520:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    a522:	898b      	ldrh	r3, [r1, #12]
{
    a524:	b085      	sub	sp, #20
    a526:	4604      	mov	r4, r0
    a528:	460e      	mov	r6, r1
	if (buf->len < sizeof(*hdr)) {
    a52a:	b953      	cbnz	r3, a542 <bt_smp_recv+0x22>
		BT_ERR("Too small SMP PDU received");
    a52c:	4b36      	ldr	r3, [pc, #216]	; (a608 <bt_smp_recv+0xe8>)
    a52e:	9301      	str	r3, [sp, #4]
    a530:	9300      	str	r3, [sp, #0]
    a532:	4a36      	ldr	r2, [pc, #216]	; (a60c <bt_smp_recv+0xec>)
    a534:	4b36      	ldr	r3, [pc, #216]	; (a610 <bt_smp_recv+0xf0>)
    a536:	4937      	ldr	r1, [pc, #220]	; (a614 <bt_smp_recv+0xf4>)
    a538:	4837      	ldr	r0, [pc, #220]	; (a618 <bt_smp_recv+0xf8>)
    a53a:	f7f7 feb1 	bl	22a0 <printk>
}
    a53e:	b005      	add	sp, #20
    a540:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct bt_smp_hdr *hdr = (void *)buf->data;
    a542:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    a544:	2101      	movs	r1, #1
	struct bt_smp_hdr *hdr = (void *)buf->data;
    a546:	f850 5f08 	ldr.w	r5, [r0, #8]!
	net_buf_pull(buf, sizeof(*hdr));
    a54a:	f00e ff7f 	bl	1944c <net_buf_simple_pull>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    a54e:	2104      	movs	r1, #4
    a550:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    a554:	f7ff f8ec 	bl	9730 <atomic_test_bit>
    a558:	b158      	cbz	r0, a572 <bt_smp_recv+0x52>
		BT_WARN("SMP command (code 0x%02x) received after timeout",
    a55a:	4b2b      	ldr	r3, [pc, #172]	; (a608 <bt_smp_recv+0xe8>)
    a55c:	9302      	str	r3, [sp, #8]
    a55e:	782a      	ldrb	r2, [r5, #0]
    a560:	9201      	str	r2, [sp, #4]
    a562:	9300      	str	r3, [sp, #0]
    a564:	4a2d      	ldr	r2, [pc, #180]	; (a61c <bt_smp_recv+0xfc>)
    a566:	4b2a      	ldr	r3, [pc, #168]	; (a610 <bt_smp_recv+0xf0>)
    a568:	492a      	ldr	r1, [pc, #168]	; (a614 <bt_smp_recv+0xf4>)
    a56a:	482d      	ldr	r0, [pc, #180]	; (a620 <bt_smp_recv+0x100>)
    a56c:	f7f7 fe98 	bl	22a0 <printk>
		return;
    a570:	e7e5      	b.n	a53e <bt_smp_recv+0x1e>
	if (hdr->code >= ARRAY_SIZE(handlers) || !handlers[hdr->code].func) {
    a572:	7829      	ldrb	r1, [r5, #0]
    a574:	290d      	cmp	r1, #13
    a576:	d803      	bhi.n	a580 <bt_smp_recv+0x60>
    a578:	4f2a      	ldr	r7, [pc, #168]	; (a624 <bt_smp_recv+0x104>)
    a57a:	f857 3031 	ldr.w	r3, [r7, r1, lsl #3]
    a57e:	b983      	cbnz	r3, a5a2 <bt_smp_recv+0x82>
		BT_WARN("Unhandled SMP code 0x%02x", hdr->code);
    a580:	4b21      	ldr	r3, [pc, #132]	; (a608 <bt_smp_recv+0xe8>)
    a582:	9302      	str	r3, [sp, #8]
    a584:	9101      	str	r1, [sp, #4]
    a586:	9300      	str	r3, [sp, #0]
    a588:	4922      	ldr	r1, [pc, #136]	; (a614 <bt_smp_recv+0xf4>)
    a58a:	4b21      	ldr	r3, [pc, #132]	; (a610 <bt_smp_recv+0xf0>)
    a58c:	4a23      	ldr	r2, [pc, #140]	; (a61c <bt_smp_recv+0xfc>)
    a58e:	4826      	ldr	r0, [pc, #152]	; (a628 <bt_smp_recv+0x108>)
    a590:	f7f7 fe86 	bl	22a0 <printk>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
    a594:	2107      	movs	r1, #7
		smp_error(smp, err);
    a596:	4620      	mov	r0, r4
}
    a598:	b005      	add	sp, #20
    a59a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		smp_error(smp, err);
    a59e:	f7ff bf65 	b.w	a46c <smp_error>
	if (!atomic_test_and_clear_bit(&smp->allowed_cmds, hdr->code)) {
    a5a2:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    a5a6:	f7ff ff17 	bl	a3d8 <atomic_test_and_clear_bit>
    a5aa:	b978      	cbnz	r0, a5cc <bt_smp_recv+0xac>
		BT_WARN("Unexpected SMP code 0x%02x", hdr->code);
    a5ac:	4b16      	ldr	r3, [pc, #88]	; (a608 <bt_smp_recv+0xe8>)
    a5ae:	9302      	str	r3, [sp, #8]
    a5b0:	782a      	ldrb	r2, [r5, #0]
    a5b2:	9201      	str	r2, [sp, #4]
    a5b4:	9300      	str	r3, [sp, #0]
    a5b6:	4a19      	ldr	r2, [pc, #100]	; (a61c <bt_smp_recv+0xfc>)
    a5b8:	4b15      	ldr	r3, [pc, #84]	; (a610 <bt_smp_recv+0xf0>)
    a5ba:	4916      	ldr	r1, [pc, #88]	; (a614 <bt_smp_recv+0xf4>)
    a5bc:	481b      	ldr	r0, [pc, #108]	; (a62c <bt_smp_recv+0x10c>)
    a5be:	f7f7 fe6f 	bl	22a0 <printk>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
    a5c2:	782b      	ldrb	r3, [r5, #0]
    a5c4:	2b05      	cmp	r3, #5
    a5c6:	d0ba      	beq.n	a53e <bt_smp_recv+0x1e>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    a5c8:	2108      	movs	r1, #8
    a5ca:	e7e4      	b.n	a596 <bt_smp_recv+0x76>
	if (buf->len != handlers[hdr->code].expect_len) {
    a5cc:	782b      	ldrb	r3, [r5, #0]
    a5ce:	89b1      	ldrh	r1, [r6, #12]
    a5d0:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    a5d4:	7912      	ldrb	r2, [r2, #4]
    a5d6:	428a      	cmp	r2, r1
    a5d8:	d00c      	beq.n	a5f4 <bt_smp_recv+0xd4>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    a5da:	4a0b      	ldr	r2, [pc, #44]	; (a608 <bt_smp_recv+0xe8>)
    a5dc:	9203      	str	r2, [sp, #12]
    a5de:	9302      	str	r3, [sp, #8]
    a5e0:	9101      	str	r1, [sp, #4]
    a5e2:	9200      	str	r2, [sp, #0]
    a5e4:	490b      	ldr	r1, [pc, #44]	; (a614 <bt_smp_recv+0xf4>)
    a5e6:	4b0a      	ldr	r3, [pc, #40]	; (a610 <bt_smp_recv+0xf0>)
    a5e8:	4a08      	ldr	r2, [pc, #32]	; (a60c <bt_smp_recv+0xec>)
    a5ea:	4811      	ldr	r0, [pc, #68]	; (a630 <bt_smp_recv+0x110>)
    a5ec:	f7f7 fe58 	bl	22a0 <printk>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
    a5f0:	210a      	movs	r1, #10
    a5f2:	e7d0      	b.n	a596 <bt_smp_recv+0x76>
	err = handlers[hdr->code].func(smp, buf);
    a5f4:	4631      	mov	r1, r6
    a5f6:	f857 3033 	ldr.w	r3, [r7, r3, lsl #3]
    a5fa:	4620      	mov	r0, r4
    a5fc:	4798      	blx	r3
	if (err) {
    a5fe:	4601      	mov	r1, r0
    a600:	2800      	cmp	r0, #0
    a602:	d09c      	beq.n	a53e <bt_smp_recv+0x1e>
    a604:	e7c7      	b.n	a596 <bt_smp_recv+0x76>
    a606:	bf00      	nop
    a608:	00023dbe 	.word	0x00023dbe
    a60c:	00022d86 	.word	0x00022d86
    a610:	00025081 	.word	0x00025081
    a614:	000272e8 	.word	0x000272e8
    a618:	000251b1 	.word	0x000251b1
    a61c:	00024016 	.word	0x00024016
    a620:	000251dc 	.word	0x000251dc
    a624:	000252a4 	.word	0x000252a4
    a628:	0002521d 	.word	0x0002521d
    a62c:	00025247 	.word	0x00025247
    a630:	00024cca 	.word	0x00024cca

0000a634 <smp_pairing_failed>:
{
    a634:	b530      	push	{r4, r5, lr}
    a636:	b085      	sub	sp, #20
	BT_ERR("reason 0x%x", req->reason);
    a638:	4b14      	ldr	r3, [pc, #80]	; (a68c <smp_pairing_failed+0x58>)
	struct bt_conn *conn = smp->chan.chan.conn;
    a63a:	6805      	ldr	r5, [r0, #0]
	BT_ERR("reason 0x%x", req->reason);
    a63c:	9302      	str	r3, [sp, #8]
    a63e:	688a      	ldr	r2, [r1, #8]
    a640:	4913      	ldr	r1, [pc, #76]	; (a690 <smp_pairing_failed+0x5c>)
    a642:	7812      	ldrb	r2, [r2, #0]
    a644:	9201      	str	r2, [sp, #4]
{
    a646:	4604      	mov	r4, r0
	BT_ERR("reason 0x%x", req->reason);
    a648:	9300      	str	r3, [sp, #0]
    a64a:	4a12      	ldr	r2, [pc, #72]	; (a694 <smp_pairing_failed+0x60>)
    a64c:	4b12      	ldr	r3, [pc, #72]	; (a698 <smp_pairing_failed+0x64>)
    a64e:	4813      	ldr	r0, [pc, #76]	; (a69c <smp_pairing_failed+0x68>)
    a650:	f7f7 fe26 	bl	22a0 <printk>
	switch (smp->method) {
    a654:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    a658:	3b01      	subs	r3, #1
    a65a:	2b02      	cmp	r3, #2
    a65c:	d804      	bhi.n	a668 <smp_pairing_failed+0x34>
		bt_auth->cancel(conn);
    a65e:	4b10      	ldr	r3, [pc, #64]	; (a6a0 <smp_pairing_failed+0x6c>)
    a660:	681b      	ldr	r3, [r3, #0]
    a662:	4628      	mov	r0, r5
    a664:	68db      	ldr	r3, [r3, #12]
    a666:	4798      	blx	r3
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    a668:	2102      	movs	r1, #2
    a66a:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    a66e:	f7ff f85f 	bl	9730 <atomic_test_bit>
    a672:	b120      	cbz	r0, a67e <smp_pairing_failed+0x4a>
	    smp->chan.chan.conn->le.keys) {
    a674:	6823      	ldr	r3, [r4, #0]
    a676:	6f18      	ldr	r0, [r3, #112]	; 0x70
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    a678:	b108      	cbz	r0, a67e <smp_pairing_failed+0x4a>
		bt_keys_clear(smp->chan.chan.conn->le.keys);
    a67a:	f000 fff3 	bl	b664 <bt_keys_clear>
	smp_reset(smp);
    a67e:	4620      	mov	r0, r4
    a680:	f7ff fec5 	bl	a40e <smp_reset>
}
    a684:	2000      	movs	r0, #0
    a686:	b005      	add	sp, #20
    a688:	bd30      	pop	{r4, r5, pc}
    a68a:	bf00      	nop
    a68c:	00023dbe 	.word	0x00023dbe
    a690:	000272e8 	.word	0x000272e8
    a694:	00022d86 	.word	0x00022d86
    a698:	00025027 	.word	0x00025027
    a69c:	0002544d 	.word	0x0002544d
    a6a0:	20003128 	.word	0x20003128

0000a6a4 <smp_timeout>:
{
    a6a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	BT_ERR("SMP Timeout");
    a6a6:	4b10      	ldr	r3, [pc, #64]	; (a6e8 <smp_timeout+0x44>)
    a6a8:	9301      	str	r3, [sp, #4]
{
    a6aa:	4604      	mov	r4, r0
	BT_ERR("SMP Timeout");
    a6ac:	9300      	str	r3, [sp, #0]
    a6ae:	490f      	ldr	r1, [pc, #60]	; (a6ec <smp_timeout+0x48>)
    a6b0:	4b0f      	ldr	r3, [pc, #60]	; (a6f0 <smp_timeout+0x4c>)
    a6b2:	4a10      	ldr	r2, [pc, #64]	; (a6f4 <smp_timeout+0x50>)
	struct bt_smp *smp = CONTAINER_OF(work, struct bt_smp, work);
    a6b4:	f5a0 75be 	sub.w	r5, r0, #380	; 0x17c
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    a6b8:	3cdc      	subs	r4, #220	; 0xdc
	BT_ERR("SMP Timeout");
    a6ba:	480f      	ldr	r0, [pc, #60]	; (a6f8 <smp_timeout+0x54>)
    a6bc:	f7f7 fdf0 	bl	22a0 <printk>
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    a6c0:	2102      	movs	r1, #2
    a6c2:	4620      	mov	r0, r4
    a6c4:	f7ff f834 	bl	9730 <atomic_test_bit>
    a6c8:	b120      	cbz	r0, a6d4 <smp_timeout+0x30>
	    smp->chan.chan.conn->le.keys) {
    a6ca:	682b      	ldr	r3, [r5, #0]
    a6cc:	6f18      	ldr	r0, [r3, #112]	; 0x70
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    a6ce:	b108      	cbz	r0, a6d4 <smp_timeout+0x30>
		bt_keys_clear(smp->chan.chan.conn->le.keys);
    a6d0:	f000 ffc8 	bl	b664 <bt_keys_clear>
	smp_reset(smp);
    a6d4:	4628      	mov	r0, r5
    a6d6:	f7ff fe9a 	bl	a40e <smp_reset>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
    a6da:	2104      	movs	r1, #4
    a6dc:	4620      	mov	r0, r4
}
    a6de:	b003      	add	sp, #12
    a6e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
    a6e4:	f7ff b831 	b.w	974a <atomic_set_bit>
    a6e8:	00023dbe 	.word	0x00023dbe
    a6ec:	000272e8 	.word	0x000272e8
    a6f0:	00024f96 	.word	0x00024f96
    a6f4:	00022d86 	.word	0x00022d86
    a6f8:	0002553b 	.word	0x0002553b

0000a6fc <bt_smp_encrypt_change>:
{
    a6fc:	b570      	push	{r4, r5, r6, lr}
    a6fe:	4604      	mov	r4, r0
	if (hci_status) {
    a700:	2900      	cmp	r1, #0
    a702:	d15d      	bne.n	a7c0 <bt_smp_encrypt_change+0xc4>
	struct bt_conn *conn = chan->conn;
    a704:	6806      	ldr	r6, [r0, #0]
	if (!smp || !conn->encrypt) {
    a706:	7ab3      	ldrb	r3, [r6, #10]
    a708:	2b00      	cmp	r3, #0
    a70a:	d059      	beq.n	a7c0 <bt_smp_encrypt_change+0xc4>
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
    a70c:	f100 05a0 	add.w	r5, r0, #160	; 0xa0
    a710:	2101      	movs	r1, #1
    a712:	4628      	mov	r0, r5
    a714:	f7ff fe60 	bl	a3d8 <atomic_test_and_clear_bit>
    a718:	2800      	cmp	r0, #0
    a71a:	d051      	beq.n	a7c0 <bt_smp_encrypt_change+0xc4>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    a71c:	2103      	movs	r1, #3
    a71e:	4628      	mov	r0, r5
    a720:	f7ff f806 	bl	9730 <atomic_test_bit>
    a724:	b930      	cbnz	r0, a734 <bt_smp_encrypt_change+0x38>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
    a726:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    a72a:	210b      	movs	r1, #11
}
    a72c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
    a730:	f7ff b80b 	b.w	974a <atomic_set_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    a734:	2105      	movs	r1, #5
    a736:	4628      	mov	r0, r5
    a738:	f7fe fffa 	bl	9730 <atomic_test_bit>
    a73c:	b1b8      	cbz	r0, a76e <bt_smp_encrypt_change+0x72>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
    a73e:	f894 3179 	ldrb.w	r3, [r4, #377]	; 0x179
    a742:	071b      	lsls	r3, r3, #28
    a744:	d507      	bpl.n	a756 <bt_smp_encrypt_change+0x5a>
    a746:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    a74a:	0718      	lsls	r0, r3, #28
    a74c:	d503      	bpl.n	a756 <bt_smp_encrypt_change+0x5a>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
    a74e:	210e      	movs	r1, #14
    a750:	4628      	mov	r0, r5
    a752:	f7fe fffa 	bl	974a <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
    a756:	f894 3179 	ldrb.w	r3, [r4, #377]	; 0x179
    a75a:	f023 0308 	bic.w	r3, r3, #8
    a75e:	f884 3179 	strb.w	r3, [r4, #377]	; 0x179
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
    a762:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    a766:	f023 0308 	bic.w	r3, r3, #8
    a76a:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
    a76e:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    a772:	07d9      	lsls	r1, r3, #31
    a774:	d51c      	bpl.n	a7b0 <bt_smp_encrypt_change+0xb4>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
    a776:	2106      	movs	r1, #6
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    a778:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    a77c:	f7fe ffe5 	bl	974a <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
    a780:	2102      	movs	r1, #2
    a782:	4628      	mov	r0, r5
    a784:	f7fe ffe1 	bl	974a <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    a788:	78f3      	ldrb	r3, [r6, #3]
    a78a:	b913      	cbnz	r3, a792 <bt_smp_encrypt_change+0x96>
	    conn->role == BT_HCI_ROLE_MASTER && smp->remote_dist) {
    a78c:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    a790:	b9b3      	cbnz	r3, a7c0 <bt_smp_encrypt_change+0xc4>
	bt_smp_distribute_keys(smp);
    a792:	4620      	mov	r0, r4
    a794:	f7ff fd7c 	bl	a290 <bt_smp_distribute_keys>
	if (!smp->local_dist && !smp->remote_dist) {
    a798:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
    a79c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    a7a0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    a7a4:	b963      	cbnz	r3, a7c0 <bt_smp_encrypt_change+0xc4>
	smp_reset(smp);
    a7a6:	4620      	mov	r0, r4
}
    a7a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	smp_reset(smp);
    a7ac:	f7ff be2f 	b.w	a40e <smp_reset>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    a7b0:	079a      	lsls	r2, r3, #30
    a7b2:	d501      	bpl.n	a7b8 <bt_smp_encrypt_change+0xbc>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    a7b4:	2108      	movs	r1, #8
    a7b6:	e7df      	b.n	a778 <bt_smp_encrypt_change+0x7c>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    a7b8:	075b      	lsls	r3, r3, #29
    a7ba:	d5e1      	bpl.n	a780 <bt_smp_encrypt_change+0x84>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    a7bc:	210a      	movs	r1, #10
    a7be:	e7db      	b.n	a778 <bt_smp_encrypt_change+0x7c>
    a7c0:	bd70      	pop	{r4, r5, r6, pc}
	...

0000a7c4 <smp_master_ident>:
{
    a7c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    a7c6:	460a      	mov	r2, r1
    a7c8:	b085      	sub	sp, #20
    a7ca:	4605      	mov	r5, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    a7cc:	210a      	movs	r1, #10
	struct bt_conn *conn = smp->chan.chan.conn;
    a7ce:	f850 6ba0 	ldr.w	r6, [r0], #160
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    a7d2:	f7fe ffad 	bl	9730 <atomic_test_bit>
    a7d6:	b340      	cbz	r0, a82a <smp_master_ident+0x66>
		keys = bt_keys_get_type(BT_KEYS_LTK, &conn->le.dst);
    a7d8:	f106 0748 	add.w	r7, r6, #72	; 0x48
    a7dc:	4639      	mov	r1, r7
    a7de:	2004      	movs	r0, #4
		struct bt_smp_master_ident *req = (void *)buf->data;
    a7e0:	6894      	ldr	r4, [r2, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, &conn->le.dst);
    a7e2:	f000 ff85 	bl	b6f0 <bt_keys_get_type>
		if (!keys) {
    a7e6:	b978      	cbnz	r0, a808 <smp_master_ident+0x44>
			BT_ERR("Unable to get keys for %s",
    a7e8:	4638      	mov	r0, r7
    a7ea:	f7f8 fd97 	bl	331c <bt_addr_le_str>
    a7ee:	4b1f      	ldr	r3, [pc, #124]	; (a86c <smp_master_ident+0xa8>)
    a7f0:	9302      	str	r3, [sp, #8]
    a7f2:	9001      	str	r0, [sp, #4]
    a7f4:	9300      	str	r3, [sp, #0]
    a7f6:	4a1e      	ldr	r2, [pc, #120]	; (a870 <smp_master_ident+0xac>)
    a7f8:	4b1e      	ldr	r3, [pc, #120]	; (a874 <smp_master_ident+0xb0>)
    a7fa:	491f      	ldr	r1, [pc, #124]	; (a878 <smp_master_ident+0xb4>)
    a7fc:	481f      	ldr	r0, [pc, #124]	; (a87c <smp_master_ident+0xb8>)
    a7fe:	f7f7 fd4f 	bl	22a0 <printk>
			return BT_SMP_ERR_UNSPECIFIED;
    a802:	2008      	movs	r0, #8
}
    a804:	b005      	add	sp, #20
    a806:	bdf0      	pop	{r4, r5, r6, r7, pc}
		keys->ltk.ediv = req->ediv;
    a808:	7862      	ldrb	r2, [r4, #1]
    a80a:	7823      	ldrb	r3, [r4, #0]
    a80c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    a810:	8303      	strh	r3, [r0, #24]
		keys->ltk.rand = req->rand;
    a812:	f8d4 2002 	ldr.w	r2, [r4, #2]
    a816:	f8d4 3006 	ldr.w	r3, [r4, #6]
    a81a:	6143      	str	r3, [r0, #20]
    a81c:	6102      	str	r2, [r0, #16]
		smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
    a81e:	f895 317a 	ldrb.w	r3, [r5, #378]	; 0x17a
    a822:	f023 0301 	bic.w	r3, r3, #1
    a826:	f885 317a 	strb.w	r3, [r5, #378]	; 0x17a
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    a82a:	f895 317a 	ldrb.w	r3, [r5, #378]	; 0x17a
    a82e:	079a      	lsls	r2, r3, #30
    a830:	d518      	bpl.n	a864 <smp_master_ident+0xa0>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    a832:	2108      	movs	r1, #8
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    a834:	f105 009c 	add.w	r0, r5, #156	; 0x9c
    a838:	f7fe ff87 	bl	974a <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    a83c:	78f3      	ldrb	r3, [r6, #3]
    a83e:	b92b      	cbnz	r3, a84c <smp_master_ident+0x88>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    a840:	f895 317a 	ldrb.w	r3, [r5, #378]	; 0x17a
    a844:	b913      	cbnz	r3, a84c <smp_master_ident+0x88>
		bt_smp_distribute_keys(smp);
    a846:	4628      	mov	r0, r5
    a848:	f7ff fd22 	bl	a290 <bt_smp_distribute_keys>
	if (!smp->local_dist && !smp->remote_dist) {
    a84c:	f8d5 4178 	ldr.w	r4, [r5, #376]	; 0x178
    a850:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    a854:	f024 04ff 	bic.w	r4, r4, #255	; 0xff
    a858:	b914      	cbnz	r4, a860 <smp_master_ident+0x9c>
	smp_reset(smp);
    a85a:	4628      	mov	r0, r5
    a85c:	f7ff fdd7 	bl	a40e <smp_reset>
	return 0;
    a860:	2000      	movs	r0, #0
    a862:	e7cf      	b.n	a804 <smp_master_ident+0x40>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    a864:	075b      	lsls	r3, r3, #29
    a866:	d5e9      	bpl.n	a83c <smp_master_ident+0x78>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    a868:	210a      	movs	r1, #10
    a86a:	e7e3      	b.n	a834 <smp_master_ident+0x70>
    a86c:	00023dbe 	.word	0x00023dbe
    a870:	00022d86 	.word	0x00022d86
    a874:	00025009 	.word	0x00025009
    a878:	000272e8 	.word	0x000272e8
    a87c:	00025423 	.word	0x00025423

0000a880 <bt_smp_connected>:
{
    a880:	b510      	push	{r4, lr}
	k_delayed_work_init(&smp->work, smp_timeout);
    a882:	4905      	ldr	r1, [pc, #20]	; (a898 <bt_smp_connected+0x18>)
{
    a884:	4604      	mov	r4, r0
	k_delayed_work_init(&smp->work, smp_timeout);
    a886:	f500 70be 	add.w	r0, r0, #380	; 0x17c
    a88a:	f017 fcbf 	bl	2220c <k_delayed_work_init>
	smp_reset(smp);
    a88e:	4620      	mov	r0, r4
}
    a890:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	smp_reset(smp);
    a894:	f7ff bdbb 	b.w	a40e <smp_reset>
    a898:	0000a6a5 	.word	0x0000a6a5

0000a89c <ident_sent>:
{
    a89c:	b508      	push	{r3, lr}
	if (conn->type == BT_CONN_TYPE_LE) {
    a89e:	7883      	ldrb	r3, [r0, #2]
    a8a0:	b99b      	cbnz	r3, a8ca <ident_sent+0x2e>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
    a8a2:	2106      	movs	r1, #6
    a8a4:	f7fc fb5f 	bl	6f66 <bt_l2cap_le_lookup_tx_cid>
		smp->local_dist &= ~dist_complete;
    a8a8:	f890 2179 	ldrb.w	r2, [r0, #377]	; 0x179
    a8ac:	f022 0201 	bic.w	r2, r2, #1
    a8b0:	f880 2179 	strb.w	r2, [r0, #377]	; 0x179
		if (!smp->local_dist && !smp->remote_dist) {
    a8b4:	f8d0 3178 	ldr.w	r3, [r0, #376]	; 0x178
    a8b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    a8bc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    a8c0:	b91b      	cbnz	r3, a8ca <ident_sent+0x2e>
}
    a8c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	smp_reset(smp);
    a8c6:	f7ff bda2 	b.w	a40e <smp_reset>
    a8ca:	bd08      	pop	{r3, pc}

0000a8cc <smp_send_pairing_confirm>:
{
    a8cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	switch (smp->method) {
    a8ce:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
{
    a8d2:	4604      	mov	r4, r0
	switch (smp->method) {
    a8d4:	2b03      	cmp	r3, #3
    a8d6:	d824      	bhi.n	a922 <smp_send_pairing_confirm+0x56>
    a8d8:	e8df f003 	tbb	[pc, r3]
    a8dc:	25020225 	.word	0x25020225
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    a8e0:	f890 3178 	ldrb.w	r3, [r0, #376]	; 0x178
    a8e4:	f8d0 5174 	ldr.w	r5, [r0, #372]	; 0x174
    a8e8:	40dd      	lsrs	r5, r3
    a8ea:	f005 0501 	and.w	r5, r5, #1
		r |= 0x80;
    a8ee:	f065 057f 	orn	r5, r5, #127	; 0x7f
    a8f2:	b2ed      	uxtb	r5, r5
	buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    a8f4:	2003      	movs	r0, #3
    a8f6:	f7ff f8f1 	bl	9adc <smp_create_pdu.isra.5>
	if (!buf) {
    a8fa:	4606      	mov	r6, r0
    a8fc:	b188      	cbz	r0, a922 <smp_send_pairing_confirm+0x56>
	req = net_buf_add(buf, sizeof(*req));
    a8fe:	2110      	movs	r1, #16
    a900:	3008      	adds	r0, #8
    a902:	f00e fd53 	bl	193ac <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
    a906:	462b      	mov	r3, r5
    a908:	9000      	str	r0, [sp, #0]
    a90a:	f104 02c3 	add.w	r2, r4, #195	; 0xc3
    a90e:	f104 01f3 	add.w	r1, r4, #243	; 0xf3
    a912:	4810      	ldr	r0, [pc, #64]	; (a954 <smp_send_pairing_confirm+0x88>)
    a914:	f7ff f9d2 	bl	9cbc <smp_f4>
    a918:	4605      	mov	r5, r0
    a91a:	b130      	cbz	r0, a92a <smp_send_pairing_confirm+0x5e>
		net_buf_unref(buf);
    a91c:	4630      	mov	r0, r6
    a91e:	f00e fce7 	bl	192f0 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
    a922:	2008      	movs	r0, #8
    a924:	e014      	b.n	a950 <smp_send_pairing_confirm+0x84>
		r = 0;
    a926:	2500      	movs	r5, #0
    a928:	e7e4      	b.n	a8f4 <smp_send_pairing_confirm+0x28>
	smp_send(smp, buf, NULL);
    a92a:	4602      	mov	r2, r0
    a92c:	4631      	mov	r1, r6
    a92e:	4620      	mov	r0, r4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a930:	34a0      	adds	r4, #160	; 0xa0
    a932:	f7ff fa19 	bl	9d68 <smp_send>
    a936:	f3bf 8f5b 	dmb	ish
    a93a:	e854 3f00 	ldrex	r3, [r4]
    a93e:	f023 0301 	bic.w	r3, r3, #1
    a942:	e844 3200 	strex	r2, r3, [r4]
    a946:	2a00      	cmp	r2, #0
    a948:	d1f7      	bne.n	a93a <smp_send_pairing_confirm+0x6e>
    a94a:	f3bf 8f5b 	dmb	ish
	return 0;
    a94e:	4628      	mov	r0, r5
}
    a950:	b002      	add	sp, #8
    a952:	bd70      	pop	{r4, r5, r6, pc}
    a954:	200008f9 	.word	0x200008f9

0000a958 <smp_c1>:
{
    a958:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a95c:	b089      	sub	sp, #36	; 0x24
    a95e:	461f      	mov	r7, r3
    a960:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    a964:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
	p1[0] = ia->type;
    a968:	f898 3000 	ldrb.w	r3, [r8]
    a96c:	f88d 3000 	strb.w	r3, [sp]
{
    a970:	4606      	mov	r6, r0
	p1[1] = ra->type;
    a972:	f899 3000 	ldrb.w	r3, [r9]
    a976:	f88d 3001 	strb.w	r3, [sp, #1]
{
    a97a:	460c      	mov	r4, r1
	memcpy(p1 + 2, preq, 7);
    a97c:	f10d 0002 	add.w	r0, sp, #2
{
    a980:	4611      	mov	r1, r2
	memcpy(p1 + 2, preq, 7);
    a982:	2207      	movs	r2, #7
{
    a984:	9d12      	ldr	r5, [sp, #72]	; 0x48
	memcpy(p1 + 2, preq, 7);
    a986:	f7f5 ff04 	bl	792 <memcpy>
	memcpy(p1 + 9, pres, 7);
    a98a:	2207      	movs	r2, #7
    a98c:	4639      	mov	r1, r7
    a98e:	f10d 0009 	add.w	r0, sp, #9
    a992:	f7f5 fefe 	bl	792 <memcpy>
    a996:	2300      	movs	r3, #0
		*r++ = *p++ ^ *q++;
    a998:	f814 2b01 	ldrb.w	r2, [r4], #1
    a99c:	f81d 1003 	ldrb.w	r1, [sp, r3]
    a9a0:	404a      	eors	r2, r1
    a9a2:	54ea      	strb	r2, [r5, r3]
    a9a4:	3301      	adds	r3, #1
	while (len--) {
    a9a6:	2b10      	cmp	r3, #16
    a9a8:	d1f6      	bne.n	a998 <smp_c1+0x40>
	err = bt_encrypt_le(k, enc_data, enc_data);
    a9aa:	462a      	mov	r2, r5
    a9ac:	4629      	mov	r1, r5
    a9ae:	4630      	mov	r0, r6
    a9b0:	f001 ff6c 	bl	c88c <bt_encrypt_le>
	if (err) {
    a9b4:	4604      	mov	r4, r0
    a9b6:	bb08      	cbnz	r0, a9fc <smp_c1+0xa4>
	memcpy(p2, ra->a.val, 6);
    a9b8:	af04      	add	r7, sp, #16
    a9ba:	2206      	movs	r2, #6
    a9bc:	f109 0101 	add.w	r1, r9, #1
    a9c0:	4638      	mov	r0, r7
    a9c2:	f7f5 fee6 	bl	792 <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
    a9c6:	2206      	movs	r2, #6
    a9c8:	f108 0101 	add.w	r1, r8, #1
    a9cc:	f10d 0016 	add.w	r0, sp, #22
    a9d0:	f7f5 fedf 	bl	792 <memcpy>
	memset(p2 + 12, 0, 4);
    a9d4:	2204      	movs	r2, #4
    a9d6:	4621      	mov	r1, r4
    a9d8:	a807      	add	r0, sp, #28
    a9da:	f7f5 ff06 	bl	7ea <memset>
    a9de:	1e6b      	subs	r3, r5, #1
		*r++ = *p++ ^ *q++;
    a9e0:	785a      	ldrb	r2, [r3, #1]
    a9e2:	5d39      	ldrb	r1, [r7, r4]
    a9e4:	3401      	adds	r4, #1
    a9e6:	404a      	eors	r2, r1
	while (len--) {
    a9e8:	2c10      	cmp	r4, #16
		*r++ = *p++ ^ *q++;
    a9ea:	f803 2f01 	strb.w	r2, [r3, #1]!
	while (len--) {
    a9ee:	d1f7      	bne.n	a9e0 <smp_c1+0x88>
	return bt_encrypt_le(k, enc_data, enc_data);
    a9f0:	462a      	mov	r2, r5
    a9f2:	4629      	mov	r1, r5
    a9f4:	4630      	mov	r0, r6
    a9f6:	f001 ff49 	bl	c88c <bt_encrypt_le>
    a9fa:	4604      	mov	r4, r0
}
    a9fc:	4620      	mov	r0, r4
    a9fe:	b009      	add	sp, #36	; 0x24
    aa00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0000aa04 <legacy_send_pairing_confirm>:
{
    aa04:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
    aa06:	6805      	ldr	r5, [r0, #0]
{
    aa08:	4604      	mov	r4, r0
	buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    aa0a:	2003      	movs	r0, #3
    aa0c:	f7ff f866 	bl	9adc <smp_create_pdu.isra.5>
	if (!buf) {
    aa10:	4606      	mov	r6, r0
    aa12:	b1c0      	cbz	r0, aa46 <legacy_send_pairing_confirm+0x42>
	req = net_buf_add(buf, sizeof(*req));
    aa14:	2110      	movs	r1, #16
    aa16:	3008      	adds	r0, #8
    aa18:	f00e fcc8 	bl	193ac <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
    aa1c:	f105 0356 	add.w	r3, r5, #86	; 0x56
    aa20:	354f      	adds	r5, #79	; 0x4f
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
    aa22:	9002      	str	r0, [sp, #8]
    aa24:	9301      	str	r3, [sp, #4]
    aa26:	9500      	str	r5, [sp, #0]
    aa28:	f104 03ac 	add.w	r3, r4, #172	; 0xac
    aa2c:	f104 02a5 	add.w	r2, r4, #165	; 0xa5
    aa30:	f104 01c3 	add.w	r1, r4, #195	; 0xc3
    aa34:	f104 00e3 	add.w	r0, r4, #227	; 0xe3
    aa38:	f7ff ff8e 	bl	a958 <smp_c1>
    aa3c:	4605      	mov	r5, r0
    aa3e:	b120      	cbz	r0, aa4a <legacy_send_pairing_confirm+0x46>
		net_buf_unref(buf);
    aa40:	4630      	mov	r0, r6
    aa42:	f00e fc55 	bl	192f0 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
    aa46:	2008      	movs	r0, #8
    aa48:	e012      	b.n	aa70 <legacy_send_pairing_confirm+0x6c>
	smp_send(smp, buf, NULL);
    aa4a:	4602      	mov	r2, r0
    aa4c:	4631      	mov	r1, r6
    aa4e:	4620      	mov	r0, r4
    aa50:	34a0      	adds	r4, #160	; 0xa0
    aa52:	f7ff f989 	bl	9d68 <smp_send>
    aa56:	f3bf 8f5b 	dmb	ish
    aa5a:	e854 3f00 	ldrex	r3, [r4]
    aa5e:	f023 0301 	bic.w	r3, r3, #1
    aa62:	e844 3200 	strex	r2, r3, [r4]
    aa66:	2a00      	cmp	r2, #0
    aa68:	d1f7      	bne.n	aa5a <legacy_send_pairing_confirm+0x56>
    aa6a:	f3bf 8f5b 	dmb	ish
	return 0;
    aa6e:	4628      	mov	r0, r5
}
    aa70:	b004      	add	sp, #16
    aa72:	bd70      	pop	{r4, r5, r6, pc}

0000aa74 <legacy_pairing_confirm>:
{
    aa74:	b510      	push	{r4, lr}
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    aa76:	6803      	ldr	r3, [r0, #0]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    aa78:	78db      	ldrb	r3, [r3, #3]
{
    aa7a:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    aa7c:	b94b      	cbnz	r3, aa92 <legacy_pairing_confirm+0x1e>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    aa7e:	2103      	movs	r1, #3
			atomic_set_bit(&smp->allowed_cmds,
    aa80:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    aa84:	f7fe fe61 	bl	974a <atomic_set_bit>
			return legacy_send_pairing_confirm(smp);
    aa88:	4620      	mov	r0, r4
}
    aa8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			return legacy_send_pairing_confirm(smp);
    aa8e:	f7ff bfb9 	b.w	aa04 <legacy_send_pairing_confirm>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    aa92:	f100 02a0 	add.w	r2, r0, #160	; 0xa0
    aa96:	2109      	movs	r1, #9
    aa98:	4610      	mov	r0, r2
    aa9a:	f7fe fe49 	bl	9730 <atomic_test_bit>
    aa9e:	b908      	cbnz	r0, aaa4 <legacy_pairing_confirm+0x30>
			atomic_set_bit(&smp->allowed_cmds,
    aaa0:	2104      	movs	r1, #4
    aaa2:	e7ed      	b.n	aa80 <legacy_pairing_confirm+0xc>
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    aaa4:	4610      	mov	r0, r2
    aaa6:	2100      	movs	r1, #0
    aaa8:	f7fe fe4f 	bl	974a <atomic_set_bit>
}
    aaac:	2000      	movs	r0, #0
    aaae:	bd10      	pop	{r4, pc}

0000aab0 <smp_pairing_confirm>:
{
    aab0:	b510      	push	{r4, lr}
    aab2:	4604      	mov	r4, r0
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
    aab4:	2210      	movs	r2, #16
    aab6:	6889      	ldr	r1, [r1, #8]
    aab8:	30b3      	adds	r0, #179	; 0xb3
    aaba:	f7f5 fe6a 	bl	792 <memcpy>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    aabe:	6823      	ldr	r3, [r4, #0]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    aac0:	78db      	ldrb	r3, [r3, #3]
    aac2:	b94b      	cbnz	r3, aad8 <smp_pairing_confirm+0x28>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    aac4:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    aac8:	2104      	movs	r1, #4
    aaca:	f7fe fe3e 	bl	974a <atomic_set_bit>
		return smp_send_pairing_random(smp);
    aace:	4620      	mov	r0, r4
}
    aad0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return smp_send_pairing_random(smp);
    aad4:	f7ff bbc2 	b.w	a25c <smp_send_pairing_random>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    aad8:	f104 02a0 	add.w	r2, r4, #160	; 0xa0
    aadc:	2105      	movs	r1, #5
    aade:	4610      	mov	r0, r2
    aae0:	f7fe fe26 	bl	9730 <atomic_test_bit>
    aae4:	b920      	cbnz	r0, aaf0 <smp_pairing_confirm+0x40>
		return legacy_pairing_confirm(smp);
    aae6:	4620      	mov	r0, r4
}
    aae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return legacy_pairing_confirm(smp);
    aaec:	f7ff bfc2 	b.w	aa74 <legacy_pairing_confirm>
	switch (smp->method) {
    aaf0:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    aaf4:	2b01      	cmp	r3, #1
    aaf6:	d00b      	beq.n	ab10 <smp_pairing_confirm+0x60>
    aaf8:	2b02      	cmp	r3, #2
    aafa:	d115      	bne.n	ab28 <smp_pairing_confirm+0x78>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    aafc:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    ab00:	2104      	movs	r1, #4
    ab02:	f7fe fe22 	bl	974a <atomic_set_bit>
		return smp_send_pairing_confirm(smp);
    ab06:	4620      	mov	r0, r4
}
    ab08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return smp_send_pairing_confirm(smp);
    ab0c:	f7ff bede 	b.w	a8cc <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    ab10:	2109      	movs	r1, #9
    ab12:	4610      	mov	r0, r2
    ab14:	f7fe fe0c 	bl	9730 <atomic_test_bit>
    ab18:	2800      	cmp	r0, #0
    ab1a:	d0ef      	beq.n	aafc <smp_pairing_confirm+0x4c>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    ab1c:	4610      	mov	r0, r2
    ab1e:	2100      	movs	r1, #0
    ab20:	f7fe fe13 	bl	974a <atomic_set_bit>
			return 0;
    ab24:	2000      	movs	r0, #0
    ab26:	bd10      	pop	{r4, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    ab28:	2008      	movs	r0, #8
}
    ab2a:	bd10      	pop	{r4, pc}

0000ab2c <smp_public_key_slave.part.11>:
static u8_t smp_public_key_slave(struct bt_smp *smp)
    ab2c:	b538      	push	{r3, r4, r5, lr}
	switch (smp->method) {
    ab2e:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
static u8_t smp_public_key_slave(struct bt_smp *smp)
    ab32:	4605      	mov	r5, r0
	switch (smp->method) {
    ab34:	2b03      	cmp	r3, #3
    ab36:	d831      	bhi.n	ab9c <smp_public_key_slave.part.11+0x70>
    ab38:	e8df f003 	tbb	[pc, r3]
    ab3c:	020b2102 	.word	0x020b2102
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    ab40:	309c      	adds	r0, #156	; 0x9c
    ab42:	2104      	movs	r1, #4
    ab44:	f7fe fe01 	bl	974a <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
    ab48:	4628      	mov	r0, r5
    ab4a:	f7ff febf 	bl	a8cc <smp_send_pairing_confirm>
		if (err) {
    ab4e:	b140      	cbz	r0, ab62 <smp_public_key_slave.part.11+0x36>
    ab50:	bd38      	pop	{r3, r4, r5, pc}
		err = display_passkey(smp);
    ab52:	f7fe ffd1 	bl	9af8 <display_passkey>
		if (err) {
    ab56:	bb10      	cbnz	r0, ab9e <smp_public_key_slave.part.11+0x72>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    ab58:	2103      	movs	r1, #3
    ab5a:	f105 009c 	add.w	r0, r5, #156	; 0x9c
    ab5e:	f7fe fdf4 	bl	974a <atomic_set_bit>
	if (bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready)) {
    ab62:	490f      	ldr	r1, [pc, #60]	; (aba0 <smp_public_key_slave.part.11+0x74>)
    ab64:	f105 00f3 	add.w	r0, r5, #243	; 0xf3
    ab68:	f7fa ffde 	bl	5b28 <bt_dh_key_gen>
    ab6c:	4604      	mov	r4, r0
    ab6e:	b9a8      	cbnz	r0, ab9c <smp_public_key_slave.part.11+0x70>
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
    ab70:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
    ab74:	2107      	movs	r1, #7
    ab76:	f7fe fde8 	bl	974a <atomic_set_bit>
	return 0;
    ab7a:	4620      	mov	r0, r4
    ab7c:	bd38      	pop	{r3, r4, r5, pc}
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    ab7e:	2103      	movs	r1, #3
    ab80:	309c      	adds	r0, #156	; 0x9c
    ab82:	f7fe fde2 	bl	974a <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    ab86:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
    ab8a:	2109      	movs	r1, #9
    ab8c:	f7fe fddd 	bl	974a <atomic_set_bit>
		bt_auth->passkey_entry(smp->chan.chan.conn);
    ab90:	4b04      	ldr	r3, [pc, #16]	; (aba4 <smp_public_key_slave.part.11+0x78>)
    ab92:	6828      	ldr	r0, [r5, #0]
    ab94:	681b      	ldr	r3, [r3, #0]
    ab96:	685b      	ldr	r3, [r3, #4]
    ab98:	4798      	blx	r3
    ab9a:	e7e2      	b.n	ab62 <smp_public_key_slave.part.11+0x36>
		return BT_SMP_ERR_UNSPECIFIED;
    ab9c:	2008      	movs	r0, #8
}
    ab9e:	bd38      	pop	{r3, r4, r5, pc}
    aba0:	0000a4a1 	.word	0x0000a4a1
    aba4:	20003128 	.word	0x20003128

0000aba8 <smp_public_key>:
{
    aba8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_smp_public_key *req = (void *)buf->data;
    abaa:	688e      	ldr	r6, [r1, #8]
	memcpy(smp->pkey, req->x, 32);
    abac:	f100 04f3 	add.w	r4, r0, #243	; 0xf3
{
    abb0:	4605      	mov	r5, r0
	memcpy(smp->pkey, req->x, 32);
    abb2:	2220      	movs	r2, #32
    abb4:	4631      	mov	r1, r6
    abb6:	4620      	mov	r0, r4
    abb8:	f7f5 fdeb 	bl	792 <memcpy>
	memcpy(&smp->pkey[32], req->y, 32);
    abbc:	2220      	movs	r2, #32
    abbe:	18b1      	adds	r1, r6, r2
    abc0:	f205 1013 	addw	r0, r5, #275	; 0x113
    abc4:	f7f5 fde5 	bl	792 <memcpy>
	if (memcmp(smp->pkey, sc_debug_public_key, 64) == 0) {
    abc8:	2240      	movs	r2, #64	; 0x40
    abca:	492f      	ldr	r1, [pc, #188]	; (ac88 <smp_public_key+0xe0>)
    abcc:	4620      	mov	r0, r4
    abce:	f7f5 fdb3 	bl	738 <memcmp>
    abd2:	b968      	cbnz	r0, abf0 <smp_public_key+0x48>
		BT_INFO("Remote is using Debug Public key");
    abd4:	4b2d      	ldr	r3, [pc, #180]	; (ac8c <smp_public_key+0xe4>)
    abd6:	9301      	str	r3, [sp, #4]
    abd8:	9300      	str	r3, [sp, #0]
    abda:	492d      	ldr	r1, [pc, #180]	; (ac90 <smp_public_key+0xe8>)
    abdc:	4b2d      	ldr	r3, [pc, #180]	; (ac94 <smp_public_key+0xec>)
    abde:	4a2e      	ldr	r2, [pc, #184]	; (ac98 <smp_public_key+0xf0>)
    abe0:	482e      	ldr	r0, [pc, #184]	; (ac9c <smp_public_key+0xf4>)
    abe2:	f7f7 fb5d 	bl	22a0 <printk>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
    abe6:	210b      	movs	r1, #11
    abe8:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
    abec:	f7fe fdad 	bl	974a <atomic_set_bit>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    abf0:	682b      	ldr	r3, [r5, #0]
    abf2:	78db      	ldrb	r3, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    abf4:	2b00      	cmp	r3, #0
    abf6:	d134      	bne.n	ac62 <smp_public_key+0xba>
		switch (smp->method) {
    abf8:	f895 30a4 	ldrb.w	r3, [r5, #164]	; 0xa4
    abfc:	2b03      	cmp	r3, #3
    abfe:	d840      	bhi.n	ac82 <smp_public_key+0xda>
    ac00:	e8df f003 	tbb	[pc, r3]
    ac04:	02142402 	.word	0x02142402
			atomic_set_bit(&smp->allowed_cmds,
    ac08:	2103      	movs	r1, #3
    ac0a:	f105 009c 	add.w	r0, r5, #156	; 0x9c
    ac0e:	f7fe fd9c 	bl	974a <atomic_set_bit>
	if (bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready)) {
    ac12:	4620      	mov	r0, r4
    ac14:	4922      	ldr	r1, [pc, #136]	; (aca0 <smp_public_key+0xf8>)
    ac16:	f7fa ff87 	bl	5b28 <bt_dh_key_gen>
    ac1a:	4604      	mov	r4, r0
    ac1c:	bb88      	cbnz	r0, ac82 <smp_public_key+0xda>
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
    ac1e:	2107      	movs	r1, #7
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    ac20:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
    ac24:	f7fe fd91 	bl	974a <atomic_set_bit>
		return 0;
    ac28:	4620      	mov	r0, r4
    ac2a:	e00d      	b.n	ac48 <smp_public_key+0xa0>
			err = display_passkey(smp);
    ac2c:	4628      	mov	r0, r5
    ac2e:	f7fe ff63 	bl	9af8 <display_passkey>
			if (err) {
    ac32:	b948      	cbnz	r0, ac48 <smp_public_key+0xa0>
			atomic_set_bit(&smp->allowed_cmds,
    ac34:	f105 009c 	add.w	r0, r5, #156	; 0x9c
    ac38:	2103      	movs	r1, #3
    ac3a:	f7fe fd86 	bl	974a <atomic_set_bit>
			err = smp_send_pairing_confirm(smp);
    ac3e:	4628      	mov	r0, r5
    ac40:	f7ff fe44 	bl	a8cc <smp_send_pairing_confirm>
			if (err) {
    ac44:	2800      	cmp	r0, #0
    ac46:	d0e4      	beq.n	ac12 <smp_public_key+0x6a>
}
    ac48:	b002      	add	sp, #8
    ac4a:	bd70      	pop	{r4, r5, r6, pc}
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    ac4c:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
    ac50:	2109      	movs	r1, #9
    ac52:	f7fe fd7a 	bl	974a <atomic_set_bit>
			bt_auth->passkey_entry(smp->chan.chan.conn);
    ac56:	4b13      	ldr	r3, [pc, #76]	; (aca4 <smp_public_key+0xfc>)
    ac58:	6828      	ldr	r0, [r5, #0]
    ac5a:	681b      	ldr	r3, [r3, #0]
    ac5c:	685b      	ldr	r3, [r3, #4]
    ac5e:	4798      	blx	r3
			break;
    ac60:	e7d7      	b.n	ac12 <smp_public_key+0x6a>
	if (!sc_local_pkey_valid) {
    ac62:	4b11      	ldr	r3, [pc, #68]	; (aca8 <smp_public_key+0x100>)
    ac64:	781c      	ldrb	r4, [r3, #0]
    ac66:	b90c      	cbnz	r4, ac6c <smp_public_key+0xc4>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    ac68:	2106      	movs	r1, #6
    ac6a:	e7d9      	b.n	ac20 <smp_public_key+0x78>
	err = sc_send_public_key(smp);
    ac6c:	4628      	mov	r0, r5
    ac6e:	f7ff f9eb 	bl	a048 <sc_send_public_key>
	if (err) {
    ac72:	2800      	cmp	r0, #0
    ac74:	d1e8      	bne.n	ac48 <smp_public_key+0xa0>
    ac76:	4628      	mov	r0, r5
}
    ac78:	b002      	add	sp, #8
    ac7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ac7e:	f7ff bf55 	b.w	ab2c <smp_public_key_slave.part.11>
		return BT_SMP_ERR_UNSPECIFIED;
    ac82:	2008      	movs	r0, #8
    ac84:	e7e0      	b.n	ac48 <smp_public_key+0xa0>
    ac86:	bf00      	nop
    ac88:	0002538d 	.word	0x0002538d
    ac8c:	00023dbe 	.word	0x00023dbe
    ac90:	000272e8 	.word	0x000272e8
    ac94:	00025072 	.word	0x00025072
    ac98:	00022c7e 	.word	0x00022c7e
    ac9c:	00025494 	.word	0x00025494
    aca0:	0000a4a1 	.word	0x0000a4a1
    aca4:	20003128 	.word	0x20003128
    aca8:	200008f8 	.word	0x200008f8

0000acac <bt_smp_pkey_ready>:
{
    acac:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!pkey) {
    acae:	4604      	mov	r4, r0
    acb0:	4d1e      	ldr	r5, [pc, #120]	; (ad2c <bt_smp_pkey_ready+0x80>)
    acb2:	b958      	cbnz	r0, accc <bt_smp_pkey_ready+0x20>
		BT_WARN("Public key not available");
    acb4:	4b1e      	ldr	r3, [pc, #120]	; (ad30 <bt_smp_pkey_ready+0x84>)
    acb6:	9301      	str	r3, [sp, #4]
    acb8:	9300      	str	r3, [sp, #0]
    acba:	4a1e      	ldr	r2, [pc, #120]	; (ad34 <bt_smp_pkey_ready+0x88>)
    acbc:	4b1e      	ldr	r3, [pc, #120]	; (ad38 <bt_smp_pkey_ready+0x8c>)
    acbe:	491f      	ldr	r1, [pc, #124]	; (ad3c <bt_smp_pkey_ready+0x90>)
    acc0:	481f      	ldr	r0, [pc, #124]	; (ad40 <bt_smp_pkey_ready+0x94>)
    acc2:	f7f7 faed 	bl	22a0 <printk>
		sc_local_pkey_valid = false;
    acc6:	702c      	strb	r4, [r5, #0]
}
    acc8:	b003      	add	sp, #12
    acca:	bd30      	pop	{r4, r5, pc}
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
    accc:	4c1d      	ldr	r4, [pc, #116]	; (ad44 <bt_smp_pkey_ready+0x98>)
	memcpy(sc_public_key, pkey, 64);
    acce:	4601      	mov	r1, r0
    acd0:	2240      	movs	r2, #64	; 0x40
    acd2:	481d      	ldr	r0, [pc, #116]	; (ad48 <bt_smp_pkey_ready+0x9c>)
    acd4:	f7f5 fd5d 	bl	792 <memcpy>
	sc_local_pkey_valid = true;
    acd8:	2301      	movs	r3, #1
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
    acda:	2106      	movs	r1, #6
    acdc:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
	sc_local_pkey_valid = true;
    ace0:	702b      	strb	r3, [r5, #0]
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
    ace2:	f7fe fd25 	bl	9730 <atomic_test_bit>
    ace6:	2800      	cmp	r0, #0
    ace8:	d0ee      	beq.n	acc8 <bt_smp_pkey_ready+0x1c>
		    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    acea:	6823      	ldr	r3, [r4, #0]
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    acec:	78db      	ldrb	r3, [r3, #3]
			err = sc_send_public_key(smp);
    acee:	4620      	mov	r0, r4
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    acf0:	b96b      	cbnz	r3, ad0e <bt_smp_pkey_ready+0x62>
			err = sc_send_public_key(smp);
    acf2:	f7ff f9a9 	bl	a048 <sc_send_public_key>
			if (err) {
    acf6:	4601      	mov	r1, r0
    acf8:	b110      	cbz	r0, ad00 <bt_smp_pkey_ready+0x54>
				smp_error(smp, err);
    acfa:	4620      	mov	r0, r4
    acfc:	f7ff fbb6 	bl	a46c <smp_error>
			atomic_set_bit(&smp->allowed_cmds,
    ad00:	4812      	ldr	r0, [pc, #72]	; (ad4c <bt_smp_pkey_ready+0xa0>)
    ad02:	210c      	movs	r1, #12
}
    ad04:	b003      	add	sp, #12
    ad06:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			atomic_set_bit(&smp->allowed_cmds,
    ad0a:	f7fe bd1e 	b.w	974a <atomic_set_bit>
	err = sc_send_public_key(smp);
    ad0e:	f7ff f99b 	bl	a048 <sc_send_public_key>
	if (err) {
    ad12:	b920      	cbnz	r0, ad1e <bt_smp_pkey_ready+0x72>
    ad14:	4620      	mov	r0, r4
    ad16:	f7ff ff09 	bl	ab2c <smp_public_key_slave.part.11>
		if (err) {
    ad1a:	2800      	cmp	r0, #0
    ad1c:	d0d4      	beq.n	acc8 <bt_smp_pkey_ready+0x1c>
			smp_error(smp, err);
    ad1e:	4601      	mov	r1, r0
    ad20:	4808      	ldr	r0, [pc, #32]	; (ad44 <bt_smp_pkey_ready+0x98>)
}
    ad22:	b003      	add	sp, #12
    ad24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			smp_error(smp, err);
    ad28:	f7ff bba0 	b.w	a46c <smp_error>
    ad2c:	200008f8 	.word	0x200008f8
    ad30:	00023dbe 	.word	0x00023dbe
    ad34:	00024016 	.word	0x00024016
    ad38:	0002508d 	.word	0x0002508d
    ad3c:	000272e8 	.word	0x000272e8
    ad40:	00025188 	.word	0x00025188
    ad44:	20000754 	.word	0x20000754
    ad48:	200008f9 	.word	0x200008f9
    ad4c:	200007f0 	.word	0x200007f0

0000ad50 <smp_ident_addr_info>:
{
    ad50:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
    ad54:	688e      	ldr	r6, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
    ad56:	6804      	ldr	r4, [r0, #0]
	return BT_ADDR_IS_RPA(&addr->a);
}

static inline bool bt_addr_le_is_identity(const bt_addr_le_t *addr)
{
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    ad58:	7833      	ldrb	r3, [r6, #0]
{
    ad5a:	4605      	mov	r5, r0
    ad5c:	b1db      	cbz	r3, ad96 <smp_ident_addr_info+0x46>
	if (!bt_addr_le_is_identity(&req->addr)) {
    ad5e:	79b3      	ldrb	r3, [r6, #6]
    ad60:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    ad64:	2bc0      	cmp	r3, #192	; 0xc0
    ad66:	d016      	beq.n	ad96 <smp_ident_addr_info+0x46>
		BT_ERR("Invalid identity %s for %s",
    ad68:	4630      	mov	r0, r6
    ad6a:	f7f8 fad7 	bl	331c <bt_addr_le_str>
    ad6e:	4605      	mov	r5, r0
    ad70:	f104 0048 	add.w	r0, r4, #72	; 0x48
    ad74:	f7f8 fad2 	bl	331c <bt_addr_le_str>
    ad78:	4b3e      	ldr	r3, [pc, #248]	; (ae74 <smp_ident_addr_info+0x124>)
    ad7a:	9303      	str	r3, [sp, #12]
    ad7c:	9002      	str	r0, [sp, #8]
    ad7e:	e88d 0028 	stmia.w	sp, {r3, r5}
    ad82:	4a3d      	ldr	r2, [pc, #244]	; (ae78 <smp_ident_addr_info+0x128>)
    ad84:	4b3d      	ldr	r3, [pc, #244]	; (ae7c <smp_ident_addr_info+0x12c>)
    ad86:	493e      	ldr	r1, [pc, #248]	; (ae80 <smp_ident_addr_info+0x130>)
    ad88:	483e      	ldr	r0, [pc, #248]	; (ae84 <smp_ident_addr_info+0x134>)
    ad8a:	f7f7 fa89 	bl	22a0 <printk>
		return BT_SMP_ERR_INVALID_PARAMS;
    ad8e:	200a      	movs	r0, #10
}
    ad90:	b004      	add	sp, #16
    ad92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    ad96:	210a      	movs	r1, #10
    ad98:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
    ad9c:	f7fe fcc8 	bl	9730 <atomic_test_bit>
    ada0:	2800      	cmp	r0, #0
    ada2:	d042      	beq.n	ae2a <smp_ident_addr_info+0xda>
		keys = bt_keys_get_type(BT_KEYS_IRK, &conn->le.dst);
    ada4:	f104 0848 	add.w	r8, r4, #72	; 0x48
    ada8:	4641      	mov	r1, r8
    adaa:	2002      	movs	r0, #2
    adac:	f000 fca0 	bl	b6f0 <bt_keys_get_type>
		if (!keys) {
    adb0:	4607      	mov	r7, r0
    adb2:	b970      	cbnz	r0, add2 <smp_ident_addr_info+0x82>
			BT_ERR("Unable to get keys for %s",
    adb4:	4640      	mov	r0, r8
    adb6:	f7f8 fab1 	bl	331c <bt_addr_le_str>
    adba:	4b2e      	ldr	r3, [pc, #184]	; (ae74 <smp_ident_addr_info+0x124>)
    adbc:	9302      	str	r3, [sp, #8]
    adbe:	9001      	str	r0, [sp, #4]
    adc0:	9300      	str	r3, [sp, #0]
    adc2:	4a2d      	ldr	r2, [pc, #180]	; (ae78 <smp_ident_addr_info+0x128>)
    adc4:	4b2d      	ldr	r3, [pc, #180]	; (ae7c <smp_ident_addr_info+0x12c>)
    adc6:	492e      	ldr	r1, [pc, #184]	; (ae80 <smp_ident_addr_info+0x130>)
    adc8:	482f      	ldr	r0, [pc, #188]	; (ae88 <smp_ident_addr_info+0x138>)
    adca:	f7f7 fa69 	bl	22a0 <printk>
			return BT_SMP_ERR_UNSPECIFIED;
    adce:	2008      	movs	r0, #8
    add0:	e7de      	b.n	ad90 <smp_ident_addr_info+0x40>
		if (conn->role == BT_HCI_ROLE_MASTER) {
    add2:	78e3      	ldrb	r3, [r4, #3]
    add4:	2b00      	cmp	r3, #0
    add6:	d149      	bne.n	ae6c <smp_ident_addr_info+0x11c>
			dst = &conn->le.resp_addr;
    add8:	f104 0156 	add.w	r1, r4, #86	; 0x56
	if (addr->type != BT_ADDR_LE_RANDOM) {
    addc:	780b      	ldrb	r3, [r1, #0]
    adde:	2b01      	cmp	r3, #1
    ade0:	d120      	bne.n	ae24 <smp_ident_addr_info+0xd4>
		if (bt_addr_le_is_rpa(dst)) {
    ade2:	798b      	ldrb	r3, [r1, #6]
    ade4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    ade8:	2b40      	cmp	r3, #64	; 0x40
    adea:	d11b      	bne.n	ae24 <smp_ident_addr_info+0xd4>
	memcpy(dst, src, sizeof(*dst));
    adec:	2206      	movs	r2, #6
    adee:	3101      	adds	r1, #1
    adf0:	f107 0040 	add.w	r0, r7, #64	; 0x40
    adf4:	f7f5 fccd 	bl	792 <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    adf8:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    adfc:	b193      	cbz	r3, ae24 <smp_ident_addr_info+0xd4>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
    adfe:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
    ae02:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    ae06:	2bc0      	cmp	r3, #192	; 0xc0
    ae08:	d00c      	beq.n	ae24 <smp_ident_addr_info+0xd4>
	memcpy(dst, src, sizeof(*dst));
    ae0a:	2207      	movs	r2, #7
    ae0c:	4631      	mov	r1, r6
    ae0e:	4638      	mov	r0, r7
    ae10:	f7f5 fcbf 	bl	792 <memcpy>
    ae14:	2207      	movs	r2, #7
    ae16:	4631      	mov	r1, r6
    ae18:	4640      	mov	r0, r8
    ae1a:	f7f5 fcba 	bl	792 <memcpy>
				bt_conn_identity_resolved(conn);
    ae1e:	4620      	mov	r0, r4
    ae20:	f7fa ff30 	bl	5c84 <bt_conn_identity_resolved>
		bt_id_add(keys);
    ae24:	4638      	mov	r0, r7
    ae26:	f7f8 fe61 	bl	3aec <bt_id_add>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
    ae2a:	f895 317a 	ldrb.w	r3, [r5, #378]	; 0x17a
    ae2e:	f023 0202 	bic.w	r2, r3, #2
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    ae32:	075b      	lsls	r3, r3, #29
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
    ae34:	f885 217a 	strb.w	r2, [r5, #378]	; 0x17a
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    ae38:	d504      	bpl.n	ae44 <smp_ident_addr_info+0xf4>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    ae3a:	210a      	movs	r1, #10
    ae3c:	f105 009c 	add.w	r0, r5, #156	; 0x9c
    ae40:	f7fe fc83 	bl	974a <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    ae44:	78e3      	ldrb	r3, [r4, #3]
    ae46:	b92b      	cbnz	r3, ae54 <smp_ident_addr_info+0x104>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    ae48:	f895 317a 	ldrb.w	r3, [r5, #378]	; 0x17a
    ae4c:	b913      	cbnz	r3, ae54 <smp_ident_addr_info+0x104>
		bt_smp_distribute_keys(smp);
    ae4e:	4628      	mov	r0, r5
    ae50:	f7ff fa1e 	bl	a290 <bt_smp_distribute_keys>
	if (!smp->local_dist && !smp->remote_dist) {
    ae54:	f8d5 4178 	ldr.w	r4, [r5, #376]	; 0x178
    ae58:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    ae5c:	f024 04ff 	bic.w	r4, r4, #255	; 0xff
    ae60:	b914      	cbnz	r4, ae68 <smp_ident_addr_info+0x118>
	smp_reset(smp);
    ae62:	4628      	mov	r0, r5
    ae64:	f7ff fad3 	bl	a40e <smp_reset>
	return 0;
    ae68:	2000      	movs	r0, #0
    ae6a:	e791      	b.n	ad90 <smp_ident_addr_info+0x40>
			dst = &conn->le.init_addr;
    ae6c:	f104 014f 	add.w	r1, r4, #79	; 0x4f
    ae70:	e7b4      	b.n	addc <smp_ident_addr_info+0x8c>
    ae72:	bf00      	nop
    ae74:	00023dbe 	.word	0x00023dbe
    ae78:	00022d86 	.word	0x00022d86
    ae7c:	00025049 	.word	0x00025049
    ae80:	000272e8 	.word	0x000272e8
    ae84:	000253f8 	.word	0x000253f8
    ae88:	00025423 	.word	0x00025423

0000ae8c <smp_pairing_rsp>:
{
    ae8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_smp_pairing *rsp = (void *)buf->data;
    ae8e:	688d      	ldr	r5, [r1, #8]
	if ((rsp->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    ae90:	78eb      	ldrb	r3, [r5, #3]
    ae92:	3b07      	subs	r3, #7
    ae94:	2b09      	cmp	r3, #9
{
    ae96:	4604      	mov	r4, r0
	if ((rsp->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    ae98:	f200 80ad 	bhi.w	aff6 <smp_pairing_rsp+0x16a>
	smp->local_dist &= rsp->init_key_dist;
    ae9c:	792a      	ldrb	r2, [r5, #4]
    ae9e:	f890 3179 	ldrb.w	r3, [r0, #377]	; 0x179
    aea2:	4013      	ands	r3, r2
    aea4:	f880 3179 	strb.w	r3, [r0, #377]	; 0x179
	smp->remote_dist &= rsp->resp_key_dist;
    aea8:	796a      	ldrb	r2, [r5, #5]
    aeaa:	f890 317a 	ldrb.w	r3, [r0, #378]	; 0x17a
    aeae:	4013      	ands	r3, r2
    aeb0:	f880 317a 	strb.w	r3, [r0, #378]	; 0x17a
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
    aeb4:	2302      	movs	r3, #2
    aeb6:	f880 30ac 	strb.w	r3, [r0, #172]	; 0xac
	memcpy(smp->prsp + 1, rsp, sizeof(*rsp));
    aeba:	2206      	movs	r2, #6
    aebc:	4629      	mov	r1, r5
    aebe:	30ad      	adds	r0, #173	; 0xad
    aec0:	f7f5 fc67 	bl	792 <memcpy>
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    aec4:	78ab      	ldrb	r3, [r5, #2]
    aec6:	f013 0f08 	tst.w	r3, #8
    aeca:	f104 06a0 	add.w	r6, r4, #160	; 0xa0
    aece:	d007      	beq.n	aee0 <smp_pairing_rsp+0x54>
    aed0:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    aed4:	071f      	lsls	r7, r3, #28
    aed6:	d503      	bpl.n	aee0 <smp_pairing_rsp+0x54>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
    aed8:	2105      	movs	r1, #5
    aeda:	4630      	mov	r0, r6
    aedc:	f7fe fc35 	bl	974a <atomic_set_bit>
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    aee0:	78ab      	ldrb	r3, [r5, #2]
    aee2:	0698      	lsls	r0, r3, #26
    aee4:	d507      	bpl.n	aef6 <smp_pairing_rsp+0x6a>
    aee6:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    aeea:	0699      	lsls	r1, r3, #26
    aeec:	d503      	bpl.n	aef6 <smp_pairing_rsp+0x6a>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
    aeee:	2111      	movs	r1, #17
    aef0:	4630      	mov	r0, r6
    aef2:	f7fe fc2a 	bl	974a <atomic_set_bit>
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    aef6:	78ab      	ldrb	r3, [r5, #2]
    aef8:	07da      	lsls	r2, r3, #31
    aefa:	d507      	bpl.n	af0c <smp_pairing_rsp+0x80>
    aefc:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    af00:	07db      	lsls	r3, r3, #31
    af02:	d503      	bpl.n	af0c <smp_pairing_rsp+0x80>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
    af04:	210a      	movs	r1, #10
    af06:	4630      	mov	r0, r6
    af08:	f7fe fc1f 	bl	974a <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    af0c:	2105      	movs	r1, #5
    af0e:	4630      	mov	r0, r6
    af10:	f7fe fc0e 	bl	9730 <atomic_test_bit>
    af14:	782f      	ldrb	r7, [r5, #0]
    af16:	bba8      	cbnz	r0, af84 <smp_pairing_rsp+0xf8>
	smp->method = legacy_get_pair_method(smp, remote_io);
    af18:	4639      	mov	r1, r7
    af1a:	4620      	mov	r0, r4
    af1c:	f7fe fd82 	bl	9a24 <legacy_get_pair_method>
    af20:	4605      	mov	r5, r0
    af22:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
	if (smp->method == JUST_WORKS &&
    af26:	b998      	cbnz	r0, af50 <smp_pairing_rsp+0xc4>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    af28:	210c      	movs	r1, #12
    af2a:	4630      	mov	r0, r6
    af2c:	f7fe fc00 	bl	9730 <atomic_test_bit>
	if (smp->method == JUST_WORKS &&
    af30:	b170      	cbz	r0, af50 <smp_pairing_rsp+0xc4>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    af32:	4f32      	ldr	r7, [pc, #200]	; (affc <smp_pairing_rsp+0x170>)
    af34:	683b      	ldr	r3, [r7, #0]
    af36:	b15b      	cbz	r3, af50 <smp_pairing_rsp+0xc4>
	    bt_auth && bt_auth->pairing_confirm) {
    af38:	691b      	ldr	r3, [r3, #16]
    af3a:	b14b      	cbz	r3, af50 <smp_pairing_rsp+0xc4>
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    af3c:	4630      	mov	r0, r6
    af3e:	2109      	movs	r1, #9
    af40:	f7fe fc03 	bl	974a <atomic_set_bit>
			bt_auth->pairing_confirm(smp->chan.chan.conn);
    af44:	683b      	ldr	r3, [r7, #0]
    af46:	6820      	ldr	r0, [r4, #0]
    af48:	691b      	ldr	r3, [r3, #16]
    af4a:	4798      	blx	r3
}
    af4c:	4628      	mov	r0, r5
    af4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ret = legacy_request_tk(smp);
    af50:	4620      	mov	r0, r4
    af52:	f7fe fd03 	bl	995c <legacy_request_tk>
	if (ret) {
    af56:	4605      	mov	r5, r0
    af58:	2800      	cmp	r0, #0
    af5a:	d1f7      	bne.n	af4c <smp_pairing_rsp+0xc0>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    af5c:	2109      	movs	r1, #9
    af5e:	4630      	mov	r0, r6
    af60:	f7fe fbe6 	bl	9730 <atomic_test_bit>
    af64:	b948      	cbnz	r0, af7a <smp_pairing_rsp+0xee>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    af66:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    af6a:	2103      	movs	r1, #3
    af6c:	f7fe fbed 	bl	974a <atomic_set_bit>
		return legacy_send_pairing_confirm(smp);
    af70:	4620      	mov	r0, r4
}
    af72:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		return legacy_send_pairing_confirm(smp);
    af76:	f7ff bd45 	b.w	aa04 <legacy_send_pairing_confirm>
	atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    af7a:	4629      	mov	r1, r5
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    af7c:	4630      	mov	r0, r6
    af7e:	f7fe fbe4 	bl	974a <atomic_set_bit>
		return 0;
    af82:	e7e3      	b.n	af4c <smp_pairing_rsp+0xc0>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY)
    af84:	2f04      	cmp	r7, #4
    af86:	d82a      	bhi.n	afde <smp_pairing_rsp+0x152>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    af88:	f894 50a8 	ldrb.w	r5, [r4, #168]	; 0xa8
    af8c:	f894 30af 	ldrb.w	r3, [r4, #175]	; 0xaf
    af90:	431d      	orrs	r5, r3
    af92:	f015 0504 	ands.w	r5, r5, #4
    af96:	d006      	beq.n	afa6 <smp_pairing_rsp+0x11a>
	return gen_method_sc[remote_io][get_io_capa()];
    af98:	f7fe fb68 	bl	966c <get_io_capa>
    af9c:	4918      	ldr	r1, [pc, #96]	; (b000 <smp_pairing_rsp+0x174>)
    af9e:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    afa2:	440f      	add	r7, r1
    afa4:	5c3d      	ldrb	r5, [r7, r0]
	smp->method = get_pair_method(smp, rsp->io_capability);
    afa6:	f884 50a4 	strb.w	r5, [r4, #164]	; 0xa4
	smp->local_dist &= SEND_KEYS_SC;
    afaa:	2300      	movs	r3, #0
    afac:	f884 3179 	strb.w	r3, [r4, #377]	; 0x179
	smp->remote_dist &= RECV_KEYS_SC;
    afb0:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    afb4:	f003 0302 	and.w	r3, r3, #2
    afb8:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
	if (smp->method == JUST_WORKS) {
    afbc:	b955      	cbnz	r5, afd4 <smp_pairing_rsp+0x148>
		if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    afbe:	210c      	movs	r1, #12
    afc0:	4630      	mov	r0, r6
    afc2:	f7fe fbb5 	bl	9730 <atomic_test_bit>
    afc6:	b128      	cbz	r0, afd4 <smp_pairing_rsp+0x148>
    afc8:	4f0c      	ldr	r7, [pc, #48]	; (affc <smp_pairing_rsp+0x170>)
    afca:	683b      	ldr	r3, [r7, #0]
    afcc:	b113      	cbz	r3, afd4 <smp_pairing_rsp+0x148>
		    bt_auth && bt_auth->pairing_confirm) {
    afce:	691b      	ldr	r3, [r3, #16]
    afd0:	2b00      	cmp	r3, #0
    afd2:	d1b3      	bne.n	af3c <smp_pairing_rsp+0xb0>
	if (!sc_local_pkey_valid) {
    afd4:	4b0b      	ldr	r3, [pc, #44]	; (b004 <smp_pairing_rsp+0x178>)
    afd6:	781d      	ldrb	r5, [r3, #0]
    afd8:	b91d      	cbnz	r5, afe2 <smp_pairing_rsp+0x156>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    afda:	2106      	movs	r1, #6
    afdc:	e7ce      	b.n	af7c <smp_pairing_rsp+0xf0>
		return JUST_WORKS;
    afde:	2500      	movs	r5, #0
    afe0:	e7e1      	b.n	afa6 <smp_pairing_rsp+0x11a>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    afe2:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    afe6:	210c      	movs	r1, #12
    afe8:	f7fe fbaf 	bl	974a <atomic_set_bit>
	return sc_send_public_key(smp);
    afec:	4620      	mov	r0, r4
}
    afee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return sc_send_public_key(smp);
    aff2:	f7ff b829 	b.w	a048 <sc_send_public_key>
		return BT_SMP_ERR_ENC_KEY_SIZE;
    aff6:	2506      	movs	r5, #6
    aff8:	e7a8      	b.n	af4c <smp_pairing_rsp+0xc0>
    affa:	bf00      	nop
    affc:	20003128 	.word	0x20003128
    b000:	0002528b 	.word	0x0002528b
    b004:	200008f8 	.word	0x200008f8

0000b008 <smp_pairing_random>:
{
    b008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b00c:	4604      	mov	r4, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    b00e:	f100 08d3 	add.w	r8, r0, #211	; 0xd3
{
    b012:	b089      	sub	sp, #36	; 0x24
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    b014:	2210      	movs	r2, #16
    b016:	6889      	ldr	r1, [r1, #8]
    b018:	4640      	mov	r0, r8
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    b01a:	f104 06a0 	add.w	r6, r4, #160	; 0xa0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    b01e:	f7f5 fbb8 	bl	792 <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    b022:	2105      	movs	r1, #5
    b024:	4630      	mov	r0, r6
    b026:	f7fe fb83 	bl	9730 <atomic_test_bit>
    b02a:	f8d4 9000 	ldr.w	r9, [r4]
    b02e:	2800      	cmp	r0, #0
    b030:	d174      	bne.n	b11c <smp_pairing_random+0x114>
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
    b032:	f109 0356 	add.w	r3, r9, #86	; 0x56
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    b036:	f104 0ae3 	add.w	sl, r4, #227	; 0xe3
    b03a:	af04      	add	r7, sp, #16
    b03c:	9301      	str	r3, [sp, #4]
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
    b03e:	f109 034f 	add.w	r3, r9, #79	; 0x4f
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    b042:	9300      	str	r3, [sp, #0]
    b044:	9702      	str	r7, [sp, #8]
    b046:	f104 03ac 	add.w	r3, r4, #172	; 0xac
    b04a:	f104 02a5 	add.w	r2, r4, #165	; 0xa5
    b04e:	4641      	mov	r1, r8
    b050:	4650      	mov	r0, sl
    b052:	f7ff fc81 	bl	a958 <smp_c1>
	if (err) {
    b056:	b108      	cbz	r0, b05c <smp_pairing_random+0x54>
		return BT_SMP_ERR_UNSPECIFIED;
    b058:	2508      	movs	r5, #8
    b05a:	e059      	b.n	b110 <smp_pairing_random+0x108>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
    b05c:	2210      	movs	r2, #16
    b05e:	4639      	mov	r1, r7
    b060:	f104 00b3 	add.w	r0, r4, #179	; 0xb3
    b064:	f7f5 fb68 	bl	738 <memcmp>
    b068:	2800      	cmp	r0, #0
    b06a:	d155      	bne.n	b118 <smp_pairing_random+0x110>
	    conn->role == BT_HCI_ROLE_MASTER) {
    b06c:	f899 5003 	ldrb.w	r5, [r9, #3]
    b070:	f104 0bc3 	add.w	fp, r4, #195	; 0xc3
	memcpy(out, r2, 8);
    b074:	2208      	movs	r2, #8
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    b076:	bb75      	cbnz	r5, b0d6 <smp_pairing_random+0xce>
	memcpy(out, r2, 8);
    b078:	4659      	mov	r1, fp
    b07a:	4638      	mov	r0, r7
    b07c:	f7f5 fb89 	bl	792 <memcpy>
	memcpy(out + 8, r1, 8);
    b080:	2208      	movs	r2, #8
    b082:	4641      	mov	r1, r8
    b084:	a806      	add	r0, sp, #24
    b086:	f7f5 fb84 	bl	792 <memcpy>
	return bt_encrypt_le(k, out, out);
    b08a:	463a      	mov	r2, r7
    b08c:	4639      	mov	r1, r7
    b08e:	4650      	mov	r0, sl
    b090:	f001 fbfc 	bl	c88c <bt_encrypt_le>
		if (err) {
    b094:	2800      	cmp	r0, #0
    b096:	d1df      	bne.n	b058 <smp_pairing_random+0x50>
	return min(req->max_key_size, rsp->max_key_size);
    b098:	f894 20b0 	ldrb.w	r2, [r4, #176]	; 0xb0
    b09c:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
		if (bt_conn_le_start_encryption(conn, 0, 0, tmp,
    b0a0:	429a      	cmp	r2, r3
    b0a2:	bf94      	ite	ls
    b0a4:	9202      	strls	r2, [sp, #8]
    b0a6:	9302      	strhi	r3, [sp, #8]
    b0a8:	e88d 00a0 	stmia.w	sp, {r5, r7}
    b0ac:	2200      	movs	r2, #0
    b0ae:	2300      	movs	r3, #0
    b0b0:	4648      	mov	r0, r9
    b0b2:	f7fa fe01 	bl	5cb8 <bt_conn_le_start_encryption>
    b0b6:	b148      	cbz	r0, b0cc <smp_pairing_random+0xc4>
			BT_ERR("Failed to start encryption");
    b0b8:	4b6c      	ldr	r3, [pc, #432]	; (b26c <smp_pairing_random+0x264>)
    b0ba:	9301      	str	r3, [sp, #4]
    b0bc:	9300      	str	r3, [sp, #0]
    b0be:	4a6c      	ldr	r2, [pc, #432]	; (b270 <smp_pairing_random+0x268>)
    b0c0:	4b6c      	ldr	r3, [pc, #432]	; (b274 <smp_pairing_random+0x26c>)
    b0c2:	496d      	ldr	r1, [pc, #436]	; (b278 <smp_pairing_random+0x270>)
    b0c4:	486d      	ldr	r0, [pc, #436]	; (b27c <smp_pairing_random+0x274>)
    b0c6:	f7f7 f8eb 	bl	22a0 <printk>
    b0ca:	e7c5      	b.n	b058 <smp_pairing_random+0x50>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    b0cc:	2101      	movs	r1, #1
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    b0ce:	4630      	mov	r0, r6
    b0d0:	f7fe fb3b 	bl	974a <atomic_set_bit>
			return 0;
    b0d4:	e01c      	b.n	b110 <smp_pairing_random+0x108>
	memcpy(out, r2, 8);
    b0d6:	4641      	mov	r1, r8
    b0d8:	4638      	mov	r0, r7
    b0da:	f7f5 fb5a 	bl	792 <memcpy>
	memcpy(out + 8, r1, 8);
    b0de:	2208      	movs	r2, #8
    b0e0:	4659      	mov	r1, fp
    b0e2:	a806      	add	r0, sp, #24
    b0e4:	f7f5 fb55 	bl	792 <memcpy>
	return bt_encrypt_le(k, out, out);
    b0e8:	463a      	mov	r2, r7
    b0ea:	4639      	mov	r1, r7
    b0ec:	4650      	mov	r0, sl
    b0ee:	f001 fbcd 	bl	c88c <bt_encrypt_le>
		if (err) {
    b0f2:	4605      	mov	r5, r0
    b0f4:	2800      	cmp	r0, #0
    b0f6:	d1af      	bne.n	b058 <smp_pairing_random+0x50>
		memcpy(smp->tk, tmp, sizeof(smp->tk));
    b0f8:	2210      	movs	r2, #16
    b0fa:	4639      	mov	r1, r7
    b0fc:	4650      	mov	r0, sl
    b0fe:	f7f5 fb48 	bl	792 <memcpy>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    b102:	4630      	mov	r0, r6
    b104:	2101      	movs	r1, #1
    b106:	f7fe fb20 	bl	974a <atomic_set_bit>
		smp_send_pairing_random(smp);
    b10a:	4620      	mov	r0, r4
    b10c:	f7ff f8a6 	bl	a25c <smp_send_pairing_random>
}
    b110:	4628      	mov	r0, r5
    b112:	b009      	add	sp, #36	; 0x24
    b114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_SMP_ERR_CONFIRM_FAILED;
    b118:	2504      	movs	r5, #4
		return legacy_pairing_random(smp);
    b11a:	e7f9      	b.n	b110 <smp_pairing_random+0x108>
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    b11c:	f899 3003 	ldrb.w	r3, [r9, #3]
    b120:	2b00      	cmp	r3, #0
    b122:	d14e      	bne.n	b1c2 <smp_pairing_random+0x1ba>
		err = sc_smp_check_confirm(smp);
    b124:	4620      	mov	r0, r4
    b126:	f7fe fded 	bl	9d04 <sc_smp_check_confirm>
		if (err) {
    b12a:	4605      	mov	r5, r0
    b12c:	2800      	cmp	r0, #0
    b12e:	d1ef      	bne.n	b110 <smp_pairing_random+0x108>
		switch (smp->method) {
    b130:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    b134:	2b03      	cmp	r3, #3
    b136:	d88f      	bhi.n	b058 <smp_pairing_random+0x50>
    b138:	e8df f003 	tbb	[pc, r3]
    b13c:	021e1e37 	.word	0x021e1e37
			if (smp_g2(sc_public_key, smp->pkey, smp->prnd,
    b140:	ab04      	add	r3, sp, #16
    b142:	9300      	str	r3, [sp, #0]
    b144:	f104 02c3 	add.w	r2, r4, #195	; 0xc3
    b148:	4643      	mov	r3, r8
    b14a:	f104 01f3 	add.w	r1, r4, #243	; 0xf3
    b14e:	484c      	ldr	r0, [pc, #304]	; (b280 <smp_pairing_random+0x278>)
    b150:	f7fe fb46 	bl	97e0 <smp_g2>
    b154:	2800      	cmp	r0, #0
    b156:	f47f af7f 	bne.w	b058 <smp_pairing_random+0x50>
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    b15a:	4630      	mov	r0, r6
    b15c:	2109      	movs	r1, #9
    b15e:	f7fe faf4 	bl	974a <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    b162:	4630      	mov	r0, r6
    b164:	2108      	movs	r1, #8
    b166:	f7fe faf0 	bl	974a <atomic_set_bit>
			bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
    b16a:	4b46      	ldr	r3, [pc, #280]	; (b284 <smp_pairing_random+0x27c>)
    b16c:	9904      	ldr	r1, [sp, #16]
    b16e:	681b      	ldr	r3, [r3, #0]
    b170:	6820      	ldr	r0, [r4, #0]
    b172:	689b      	ldr	r3, [r3, #8]
    b174:	4798      	blx	r3
			return 0;
    b176:	e7cb      	b.n	b110 <smp_pairing_random+0x108>
			smp->passkey_round++;
    b178:	f894 3178 	ldrb.w	r3, [r4, #376]	; 0x178
    b17c:	3301      	adds	r3, #1
    b17e:	b2db      	uxtb	r3, r3
			if (smp->passkey_round == 20) {
    b180:	2b14      	cmp	r3, #20
			smp->passkey_round++;
    b182:	f884 3178 	strb.w	r3, [r4, #376]	; 0x178
			if (smp->passkey_round == 20) {
    b186:	d010      	beq.n	b1aa <smp_pairing_random+0x1a2>
			if (bt_rand(smp->prnd, 16)) {
    b188:	2110      	movs	r1, #16
    b18a:	f104 00c3 	add.w	r0, r4, #195	; 0xc3
    b18e:	f001 fb61 	bl	c854 <bt_rand>
    b192:	2800      	cmp	r0, #0
    b194:	f47f af60 	bne.w	b058 <smp_pairing_random+0x50>
			atomic_set_bit(&smp->allowed_cmds,
    b198:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    b19c:	2103      	movs	r1, #3
    b19e:	f7fe fad4 	bl	974a <atomic_set_bit>
			smp_send_pairing_confirm(smp);
    b1a2:	4620      	mov	r0, r4
    b1a4:	f7ff fb92 	bl	a8cc <smp_send_pairing_confirm>
			return 0;
    b1a8:	e7b2      	b.n	b110 <smp_pairing_random+0x108>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
    b1aa:	2107      	movs	r1, #7
    b1ac:	4630      	mov	r0, r6
    b1ae:	f7fe fabf 	bl	9730 <atomic_test_bit>
    b1b2:	b108      	cbz	r0, b1b8 <smp_pairing_random+0x1b0>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    b1b4:	2108      	movs	r1, #8
    b1b6:	e78a      	b.n	b0ce <smp_pairing_random+0xc6>
		return compute_and_send_master_dhcheck(smp);
    b1b8:	4620      	mov	r0, r4
    b1ba:	f7fe fe02 	bl	9dc2 <compute_and_send_master_dhcheck>
    b1be:	4605      	mov	r5, r0
    b1c0:	e7a6      	b.n	b110 <smp_pairing_random+0x108>
	switch (smp->method) {
    b1c2:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    b1c6:	2b03      	cmp	r3, #3
    b1c8:	f63f af46 	bhi.w	b058 <smp_pairing_random+0x50>
    b1cc:	e8df f003 	tbb	[pc, r3]
    b1d0:	02272719 	.word	0x02272719
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
    b1d4:	ab04      	add	r3, sp, #16
    b1d6:	9300      	str	r3, [sp, #0]
    b1d8:	4642      	mov	r2, r8
    b1da:	f104 03c3 	add.w	r3, r4, #195	; 0xc3
    b1de:	4928      	ldr	r1, [pc, #160]	; (b280 <smp_pairing_random+0x278>)
    b1e0:	f104 00f3 	add.w	r0, r4, #243	; 0xf3
    b1e4:	f7fe fafc 	bl	97e0 <smp_g2>
    b1e8:	2800      	cmp	r0, #0
    b1ea:	f47f af35 	bne.w	b058 <smp_pairing_random+0x50>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    b1ee:	2109      	movs	r1, #9
    b1f0:	4630      	mov	r0, r6
    b1f2:	f7fe faaa 	bl	974a <atomic_set_bit>
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
    b1f6:	4b23      	ldr	r3, [pc, #140]	; (b284 <smp_pairing_random+0x27c>)
    b1f8:	9904      	ldr	r1, [sp, #16]
    b1fa:	681b      	ldr	r3, [r3, #0]
    b1fc:	6820      	ldr	r0, [r4, #0]
    b1fe:	689b      	ldr	r3, [r3, #8]
    b200:	4798      	blx	r3
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    b202:	210d      	movs	r1, #13
    b204:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    b208:	f7fe fa9f 	bl	974a <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    b20c:	210d      	movs	r1, #13
    b20e:	4630      	mov	r0, r6
    b210:	f7fe fa9b 	bl	974a <atomic_set_bit>
	smp_send_pairing_random(smp);
    b214:	4620      	mov	r0, r4
    b216:	f7ff f821 	bl	a25c <smp_send_pairing_random>
	return 0;
    b21a:	2500      	movs	r5, #0
    b21c:	e778      	b.n	b110 <smp_pairing_random+0x108>
		err = sc_smp_check_confirm(smp);
    b21e:	4620      	mov	r0, r4
    b220:	f7fe fd70 	bl	9d04 <sc_smp_check_confirm>
		if (err) {
    b224:	4605      	mov	r5, r0
    b226:	2800      	cmp	r0, #0
    b228:	f47f af72 	bne.w	b110 <smp_pairing_random+0x108>
		atomic_set_bit(&smp->allowed_cmds,
    b22c:	f104 079c 	add.w	r7, r4, #156	; 0x9c
    b230:	2103      	movs	r1, #3
    b232:	4638      	mov	r0, r7
    b234:	f7fe fa89 	bl	974a <atomic_set_bit>
		smp_send_pairing_random(smp);
    b238:	4620      	mov	r0, r4
    b23a:	f7ff f80f 	bl	a25c <smp_send_pairing_random>
		smp->passkey_round++;
    b23e:	f894 3178 	ldrb.w	r3, [r4, #376]	; 0x178
    b242:	3301      	adds	r3, #1
    b244:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20) {
    b246:	2b14      	cmp	r3, #20
		smp->passkey_round++;
    b248:	f884 3178 	strb.w	r3, [r4, #376]	; 0x178
		if (smp->passkey_round == 20) {
    b24c:	d105      	bne.n	b25a <smp_pairing_random+0x252>
			atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    b24e:	210d      	movs	r1, #13
    b250:	4638      	mov	r0, r7
    b252:	f7fe fa7a 	bl	974a <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    b256:	210d      	movs	r1, #13
    b258:	e739      	b.n	b0ce <smp_pairing_random+0xc6>
		if (bt_rand(smp->prnd, 16)) {
    b25a:	2110      	movs	r1, #16
    b25c:	f104 00c3 	add.w	r0, r4, #195	; 0xc3
    b260:	f001 faf8 	bl	c854 <bt_rand>
    b264:	2800      	cmp	r0, #0
    b266:	f47f aef7 	bne.w	b058 <smp_pairing_random+0x50>
    b26a:	e751      	b.n	b110 <smp_pairing_random+0x108>
    b26c:	00023dbe 	.word	0x00023dbe
    b270:	00022d86 	.word	0x00022d86
    b274:	00024fe2 	.word	0x00024fe2
    b278:	000272e8 	.word	0x000272e8
    b27c:	00025469 	.word	0x00025469
    b280:	200008f9 	.word	0x200008f9
    b284:	20003128 	.word	0x20003128

0000b288 <bt_smp_send_security_req>:
{
    b288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b28c:	4607      	mov	r7, r0
	smp = smp_chan_get(conn);
    b28e:	f7fe fc09 	bl	9aa4 <smp_chan_get>
	if (!smp) {
    b292:	4605      	mov	r5, r0
    b294:	b368      	cbz	r0, b2f2 <bt_smp_send_security_req+0x6a>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    b296:	f100 02a0 	add.w	r2, r0, #160	; 0xa0
    b29a:	2104      	movs	r1, #4
    b29c:	4610      	mov	r0, r2
    b29e:	f7fe fa47 	bl	9730 <atomic_test_bit>
    b2a2:	bb48      	cbnz	r0, b2f8 <bt_smp_send_security_req+0x70>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    b2a4:	2103      	movs	r1, #3
    b2a6:	4610      	mov	r0, r2
    b2a8:	f7fe fa42 	bl	9730 <atomic_test_bit>
    b2ac:	4604      	mov	r4, r0
    b2ae:	bb30      	cbnz	r0, b2fe <bt_smp_send_security_req+0x76>
	if (!sec_level_reachable(conn)) {
    b2b0:	7a78      	ldrb	r0, [r7, #9]
    b2b2:	f7fe fbd9 	bl	9a68 <sec_level_reachable.isra.2>
    b2b6:	b328      	cbz	r0, b304 <bt_smp_send_security_req+0x7c>
	req_buf = smp_create_pdu(conn, BT_SMP_CMD_SECURITY_REQUEST,
    b2b8:	200b      	movs	r0, #11
    b2ba:	f7fe fc0f 	bl	9adc <smp_create_pdu.isra.5>
	if (!req_buf) {
    b2be:	4606      	mov	r6, r0
    b2c0:	b318      	cbz	r0, b30a <bt_smp_send_security_req+0x82>
	req = net_buf_add(req_buf, sizeof(*req));
    b2c2:	2101      	movs	r1, #1
    b2c4:	3008      	adds	r0, #8
    b2c6:	f00e f871 	bl	193ac <net_buf_simple_add>
    b2ca:	4680      	mov	r8, r0
	req->auth_req = get_auth(BT_SMP_AUTH_DEFAULT);
    b2cc:	2009      	movs	r0, #9
    b2ce:	f7fe f9f3 	bl	96b8 <get_auth>
    b2d2:	2106      	movs	r1, #6
    b2d4:	f888 0000 	strb.w	r0, [r8]
    b2d8:	4623      	mov	r3, r4
    b2da:	4638      	mov	r0, r7
    b2dc:	4632      	mov	r2, r6
    b2de:	f7fb fcc7 	bl	6c70 <bt_l2cap_send_cb>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
    b2e2:	2105      	movs	r1, #5
    b2e4:	f105 009c 	add.w	r0, r5, #156	; 0x9c
    b2e8:	f7fe fa2f 	bl	974a <atomic_set_bit>
}
    b2ec:	4620      	mov	r0, r4
    b2ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOTCONN;
    b2f2:	f06f 0438 	mvn.w	r4, #56	; 0x38
    b2f6:	e7f9      	b.n	b2ec <bt_smp_send_security_req+0x64>
		return -EIO;
    b2f8:	f06f 0404 	mvn.w	r4, #4
    b2fc:	e7f6      	b.n	b2ec <bt_smp_send_security_req+0x64>
		return -EBUSY;
    b2fe:	f06f 040f 	mvn.w	r4, #15
    b302:	e7f3      	b.n	b2ec <bt_smp_send_security_req+0x64>
		return -EINVAL;
    b304:	f06f 0415 	mvn.w	r4, #21
    b308:	e7f0      	b.n	b2ec <bt_smp_send_security_req+0x64>
		return -ENOBUFS;
    b30a:	f06f 0436 	mvn.w	r4, #54	; 0x36
    b30e:	e7ed      	b.n	b2ec <bt_smp_send_security_req+0x64>

0000b310 <bt_smp_send_pairing_req>:
{
    b310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b314:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
    b316:	f7fe fbc5 	bl	9aa4 <smp_chan_get>
	if (!smp) {
    b31a:	4605      	mov	r5, r0
    b31c:	2800      	cmp	r0, #0
    b31e:	d052      	beq.n	b3c6 <bt_smp_send_pairing_req+0xb6>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    b320:	f100 07a0 	add.w	r7, r0, #160	; 0xa0
    b324:	2104      	movs	r1, #4
    b326:	4638      	mov	r0, r7
    b328:	f7fe fa02 	bl	9730 <atomic_test_bit>
    b32c:	2800      	cmp	r0, #0
    b32e:	d14d      	bne.n	b3cc <bt_smp_send_pairing_req+0xbc>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    b330:	2103      	movs	r1, #3
    b332:	4638      	mov	r0, r7
    b334:	f7fe f9fc 	bl	9730 <atomic_test_bit>
    b338:	2800      	cmp	r0, #0
    b33a:	d14a      	bne.n	b3d2 <bt_smp_send_pairing_req+0xc2>
	if (!sec_level_reachable(conn)) {
    b33c:	7a60      	ldrb	r0, [r4, #9]
    b33e:	f7fe fb93 	bl	9a68 <sec_level_reachable.isra.2>
    b342:	2800      	cmp	r0, #0
    b344:	d048      	beq.n	b3d8 <bt_smp_send_pairing_req+0xc8>
	if (smp_init(smp)) {
    b346:	4628      	mov	r0, r5
    b348:	f7fe fa13 	bl	9772 <smp_init>
    b34c:	4604      	mov	r4, r0
    b34e:	b120      	cbz	r0, b35a <bt_smp_send_pairing_req+0x4a>
		return -ENOBUFS;
    b350:	f06f 0436 	mvn.w	r4, #54	; 0x36
}
    b354:	4620      	mov	r0, r4
    b356:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	req_buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_REQ, sizeof(*req));
    b35a:	2001      	movs	r0, #1
    b35c:	f7fe fbbe 	bl	9adc <smp_create_pdu.isra.5>
	if (!req_buf) {
    b360:	4681      	mov	r9, r0
    b362:	2800      	cmp	r0, #0
    b364:	d0f4      	beq.n	b350 <bt_smp_send_pairing_req+0x40>
	req = net_buf_add(req_buf, sizeof(*req));
    b366:	2106      	movs	r1, #6
    b368:	3008      	adds	r0, #8
    b36a:	f00e f81f 	bl	193ac <net_buf_simple_add>
    b36e:	4606      	mov	r6, r0
	req->auth_req = get_auth(BT_SMP_AUTH_DEFAULT);
    b370:	2009      	movs	r0, #9
    b372:	f7fe f9a1 	bl	96b8 <get_auth>
    b376:	70b0      	strb	r0, [r6, #2]
	req->io_capability = get_io_capa();
    b378:	f7fe f978 	bl	966c <get_io_capa>
	req->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    b37c:	2310      	movs	r3, #16
    b37e:	70f3      	strb	r3, [r6, #3]
	req->resp_key_dist = RECV_KEYS;
    b380:	f04f 0803 	mov.w	r8, #3
	req->init_key_dist = SEND_KEYS;
    b384:	2301      	movs	r3, #1
    b386:	7133      	strb	r3, [r6, #4]
	req->io_capability = get_io_capa();
    b388:	7030      	strb	r0, [r6, #0]
	req->oob_flag = BT_SMP_OOB_NOT_PRESENT;
    b38a:	7074      	strb	r4, [r6, #1]
	req->resp_key_dist = RECV_KEYS;
    b38c:	f886 8005 	strb.w	r8, [r6, #5]
	memcpy(smp->preq + 1, req, sizeof(*req));
    b390:	4631      	mov	r1, r6
	smp->local_dist = SEND_KEYS;
    b392:	f885 3179 	strb.w	r3, [r5, #377]	; 0x179
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    b396:	f885 30a5 	strb.w	r3, [r5, #165]	; 0xa5
	smp->remote_dist = RECV_KEYS;
    b39a:	f885 817a 	strb.w	r8, [r5, #378]	; 0x17a
	memcpy(smp->preq + 1, req, sizeof(*req));
    b39e:	2206      	movs	r2, #6
    b3a0:	f105 00a6 	add.w	r0, r5, #166	; 0xa6
    b3a4:	f7f5 f9f5 	bl	792 <memcpy>
	smp_send(smp, req_buf, NULL);
    b3a8:	4622      	mov	r2, r4
    b3aa:	4649      	mov	r1, r9
    b3ac:	4628      	mov	r0, r5
    b3ae:	f7fe fcdb 	bl	9d68 <smp_send>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RSP);
    b3b2:	f105 009c 	add.w	r0, r5, #156	; 0x9c
    b3b6:	2102      	movs	r1, #2
    b3b8:	f7fe f9c7 	bl	974a <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
    b3bc:	4641      	mov	r1, r8
    b3be:	4638      	mov	r0, r7
    b3c0:	f7fe f9c3 	bl	974a <atomic_set_bit>
	return 0;
    b3c4:	e7c6      	b.n	b354 <bt_smp_send_pairing_req+0x44>
		return -ENOTCONN;
    b3c6:	f06f 0438 	mvn.w	r4, #56	; 0x38
    b3ca:	e7c3      	b.n	b354 <bt_smp_send_pairing_req+0x44>
		return -EIO;
    b3cc:	f06f 0404 	mvn.w	r4, #4
    b3d0:	e7c0      	b.n	b354 <bt_smp_send_pairing_req+0x44>
		return -EBUSY;
    b3d2:	f06f 040f 	mvn.w	r4, #15
    b3d6:	e7bd      	b.n	b354 <bt_smp_send_pairing_req+0x44>
		return -EINVAL;
    b3d8:	f06f 0415 	mvn.w	r4, #21
    b3dc:	e7ba      	b.n	b354 <bt_smp_send_pairing_req+0x44>
	...

0000b3e0 <smp_security_request>:
{
    b3e0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (sc_supported) {
    b3e2:	4b34      	ldr	r3, [pc, #208]	; (b4b4 <smp_security_request+0xd4>)
	struct bt_smp_security_request *req = (void *)buf->data;
    b3e4:	688a      	ldr	r2, [r1, #8]
	if (sc_supported) {
    b3e6:	781b      	ldrb	r3, [r3, #0]
	struct bt_conn *conn = smp->chan.chan.conn;
    b3e8:	6805      	ldr	r5, [r0, #0]
    b3ea:	7814      	ldrb	r4, [r2, #0]
{
    b3ec:	b085      	sub	sp, #20
    b3ee:	4606      	mov	r6, r0
	if (sc_supported) {
    b3f0:	b33b      	cbz	r3, b442 <smp_security_request+0x62>
		auth = req->auth_req & BT_SMP_AUTH_MASK_SC;
    b3f2:	f004 040f 	and.w	r4, r4, #15
	if (!conn->le.keys) {
    b3f6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    b3f8:	2b00      	cmp	r3, #0
    b3fa:	d158      	bne.n	b4ae <smp_security_request+0xce>
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, &conn->le.dst);
    b3fc:	f105 0748 	add.w	r7, r5, #72	; 0x48
    b400:	4639      	mov	r1, r7
    b402:	2020      	movs	r0, #32
    b404:	f000 f964 	bl	b6d0 <bt_keys_find>
    b408:	6728      	str	r0, [r5, #112]	; 0x70
		if (!conn->le.keys) {
    b40a:	2800      	cmp	r0, #0
    b40c:	d14f      	bne.n	b4ae <smp_security_request+0xce>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
    b40e:	4639      	mov	r1, r7
    b410:	2004      	movs	r0, #4
    b412:	f000 f95d 	bl	b6d0 <bt_keys_find>
    b416:	6728      	str	r0, [r5, #112]	; 0x70
	if (!conn->le.keys) {
    b418:	b1d8      	cbz	r0, b452 <smp_security_request+0x72>
	if ((auth & BT_SMP_AUTH_MITM) &&
    b41a:	0761      	lsls	r1, r4, #29
    b41c:	d520      	bpl.n	b460 <smp_security_request+0x80>
	    !atomic_test_bit(conn->le.keys->flags, BT_KEYS_AUTHENTICATED)) {
    b41e:	2100      	movs	r1, #0
    b420:	3008      	adds	r0, #8
    b422:	f7fe f985 	bl	9730 <atomic_test_bit>
	if ((auth & BT_SMP_AUTH_MITM) &&
    b426:	b9d8      	cbnz	r0, b460 <smp_security_request+0x80>
		if (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT) {
    b428:	f7fe f920 	bl	966c <get_io_capa>
    b42c:	4b22      	ldr	r3, [pc, #136]	; (b4b8 <smp_security_request+0xd8>)
			BT_INFO("New auth requirements: 0x%x, repairing",
    b42e:	9302      	str	r3, [sp, #8]
		if (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT) {
    b430:	2803      	cmp	r0, #3
			BT_INFO("New auth requirements: 0x%x, repairing",
    b432:	e88d 0018 	stmia.w	sp, {r3, r4}
    b436:	4b21      	ldr	r3, [pc, #132]	; (b4bc <smp_security_request+0xdc>)
		if (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT) {
    b438:	d006      	beq.n	b448 <smp_security_request+0x68>
		BT_INFO("New auth requirements: 0x%x, repairing", auth);
    b43a:	4a21      	ldr	r2, [pc, #132]	; (b4c0 <smp_security_request+0xe0>)
    b43c:	4921      	ldr	r1, [pc, #132]	; (b4c4 <smp_security_request+0xe4>)
    b43e:	4822      	ldr	r0, [pc, #136]	; (b4c8 <smp_security_request+0xe8>)
    b440:	e005      	b.n	b44e <smp_security_request+0x6e>
		auth = req->auth_req & BT_SMP_AUTH_MASK;
    b442:	f004 0407 	and.w	r4, r4, #7
    b446:	e7d6      	b.n	b3f6 <smp_security_request+0x16>
		BT_WARN("Unsupported auth requirements: 0x%x, repairing",
    b448:	4a20      	ldr	r2, [pc, #128]	; (b4cc <smp_security_request+0xec>)
    b44a:	491e      	ldr	r1, [pc, #120]	; (b4c4 <smp_security_request+0xe4>)
    b44c:	4820      	ldr	r0, [pc, #128]	; (b4d0 <smp_security_request+0xf0>)
		BT_INFO("New auth requirements: 0x%x, repairing", auth);
    b44e:	f7f6 ff27 	bl	22a0 <printk>
	if (bt_smp_send_pairing_req(conn) < 0) {
    b452:	4628      	mov	r0, r5
    b454:	f7ff ff5c 	bl	b310 <bt_smp_send_pairing_req>
    b458:	2800      	cmp	r0, #0
    b45a:	db1e      	blt.n	b49a <smp_security_request+0xba>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
    b45c:	210c      	movs	r1, #12
    b45e:	e020      	b.n	b4a2 <smp_security_request+0xc2>
	if ((auth & BT_SMP_AUTH_SC) &&
    b460:	f014 0f08 	tst.w	r4, #8
    b464:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    b466:	d008      	beq.n	b47a <smp_security_request+0x9a>
    b468:	899a      	ldrh	r2, [r3, #12]
    b46a:	0692      	lsls	r2, r2, #26
    b46c:	d405      	bmi.n	b47a <smp_security_request+0x9a>
		BT_INFO("New auth requirements: 0x%x, repairing", auth);
    b46e:	4b12      	ldr	r3, [pc, #72]	; (b4b8 <smp_security_request+0xd8>)
    b470:	9302      	str	r3, [sp, #8]
    b472:	e88d 0018 	stmia.w	sp, {r3, r4}
    b476:	4b11      	ldr	r3, [pc, #68]	; (b4bc <smp_security_request+0xdc>)
    b478:	e7df      	b.n	b43a <smp_security_request+0x5a>
	if (bt_conn_le_start_encryption(conn, conn->le.keys->ltk.rand,
    b47a:	79da      	ldrb	r2, [r3, #7]
    b47c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
    b480:	9202      	str	r2, [sp, #8]
					conn->le.keys->ltk.val,
    b482:	f103 021a 	add.w	r2, r3, #26
	if (bt_conn_le_start_encryption(conn, conn->le.keys->ltk.rand,
    b486:	9201      	str	r2, [sp, #4]
    b488:	8b1b      	ldrh	r3, [r3, #24]
    b48a:	9300      	str	r3, [sp, #0]
    b48c:	4602      	mov	r2, r0
    b48e:	460b      	mov	r3, r1
    b490:	4628      	mov	r0, r5
    b492:	f7fa fc11 	bl	5cb8 <bt_conn_le_start_encryption>
    b496:	2800      	cmp	r0, #0
    b498:	da02      	bge.n	b4a0 <smp_security_request+0xc0>
		return BT_SMP_ERR_UNSPECIFIED;
    b49a:	2008      	movs	r0, #8
}
    b49c:	b005      	add	sp, #20
    b49e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    b4a0:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
    b4a2:	f106 00a0 	add.w	r0, r6, #160	; 0xa0
    b4a6:	f7fe f950 	bl	974a <atomic_set_bit>
	return 0;
    b4aa:	2000      	movs	r0, #0
    b4ac:	e7f6      	b.n	b49c <smp_security_request+0xbc>
	if (!conn->le.keys) {
    b4ae:	6f28      	ldr	r0, [r5, #112]	; 0x70
    b4b0:	e7b3      	b.n	b41a <smp_security_request+0x3a>
    b4b2:	bf00      	nop
    b4b4:	20000939 	.word	0x20000939
    b4b8:	00023dbe 	.word	0x00023dbe
    b4bc:	0002505d 	.word	0x0002505d
    b4c0:	00022c7e 	.word	0x00022c7e
    b4c4:	000272e8 	.word	0x000272e8
    b4c8:	000254c5 	.word	0x000254c5
    b4cc:	00024016 	.word	0x00024016
    b4d0:	000254fc 	.word	0x000254fc

0000b4d4 <bt_smp_sign_verify>:
    b4d4:	f06f 0022 	mvn.w	r0, #34	; 0x22
    b4d8:	4770      	bx	lr
	...

0000b4dc <bt_smp_update_keys>:
{
    b4dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    b4de:	b085      	sub	sp, #20
    b4e0:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
    b4e2:	f7fe fadf 	bl	9aa4 <smp_chan_get>
	if (!smp) {
    b4e6:	4605      	mov	r5, r0
    b4e8:	2800      	cmp	r0, #0
    b4ea:	d05f      	beq.n	b5ac <bt_smp_update_keys+0xd0>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    b4ec:	f100 06a0 	add.w	r6, r0, #160	; 0xa0
    b4f0:	2103      	movs	r1, #3
    b4f2:	4630      	mov	r0, r6
    b4f4:	f7fe f91c 	bl	9730 <atomic_test_bit>
    b4f8:	2800      	cmp	r0, #0
    b4fa:	d057      	beq.n	b5ac <bt_smp_update_keys+0xd0>
	if (conn->le.keys) {
    b4fc:	6f20      	ldr	r0, [r4, #112]	; 0x70
    b4fe:	b108      	cbz	r0, b504 <bt_smp_update_keys+0x28>
		bt_keys_clear(conn->le.keys);
    b500:	f000 f8b0 	bl	b664 <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(&conn->le.dst);
    b504:	f104 0748 	add.w	r7, r4, #72	; 0x48
    b508:	4638      	mov	r0, r7
    b50a:	f000 f8b9 	bl	b680 <bt_keys_get_addr>
    b50e:	6720      	str	r0, [r4, #112]	; 0x70
	if (!conn->le.keys) {
    b510:	b998      	cbnz	r0, b53a <bt_smp_update_keys+0x5e>
		BT_ERR("Unable to get keys for %s",
    b512:	4638      	mov	r0, r7
    b514:	f7f7 ff02 	bl	331c <bt_addr_le_str>
    b518:	4b2c      	ldr	r3, [pc, #176]	; (b5cc <bt_smp_update_keys+0xf0>)
    b51a:	9302      	str	r3, [sp, #8]
    b51c:	9001      	str	r0, [sp, #4]
    b51e:	9300      	str	r3, [sp, #0]
    b520:	4a2b      	ldr	r2, [pc, #172]	; (b5d0 <bt_smp_update_keys+0xf4>)
    b522:	4b2c      	ldr	r3, [pc, #176]	; (b5d4 <bt_smp_update_keys+0xf8>)
    b524:	492c      	ldr	r1, [pc, #176]	; (b5d8 <bt_smp_update_keys+0xfc>)
    b526:	482d      	ldr	r0, [pc, #180]	; (b5dc <bt_smp_update_keys+0x100>)
    b528:	f7f6 feba 	bl	22a0 <printk>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    b52c:	2108      	movs	r1, #8
    b52e:	4628      	mov	r0, r5
}
    b530:	b005      	add	sp, #20
    b532:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    b536:	f7fe bf99 	b.w	a46c <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
    b53a:	210b      	movs	r1, #11
    b53c:	4630      	mov	r0, r6
    b53e:	f7fe f8f7 	bl	9730 <atomic_test_bit>
    b542:	b120      	cbz	r0, b54e <bt_smp_update_keys+0x72>
		atomic_set_bit(conn->le.keys->flags, BT_KEYS_DEBUG);
    b544:	6f20      	ldr	r0, [r4, #112]	; 0x70
    b546:	2101      	movs	r1, #1
    b548:	3008      	adds	r0, #8
    b54a:	f7fe f8fe 	bl	974a <atomic_set_bit>
	switch (smp->method) {
    b54e:	f895 30a4 	ldrb.w	r3, [r5, #164]	; 0xa4
    b552:	6f20      	ldr	r0, [r4, #112]	; 0x70
    b554:	3b01      	subs	r3, #1
    b556:	2b02      	cmp	r3, #2
    b558:	d82a      	bhi.n	b5b0 <bt_smp_update_keys+0xd4>
		atomic_set_bit(conn->le.keys->flags, BT_KEYS_AUTHENTICATED);
    b55a:	2100      	movs	r1, #0
    b55c:	3008      	adds	r0, #8
    b55e:	f7fe f8f4 	bl	974a <atomic_set_bit>
	return min(req->max_key_size, rsp->max_key_size);
    b562:	f895 10a9 	ldrb.w	r1, [r5, #169]	; 0xa9
    b566:	f895 30b0 	ldrb.w	r3, [r5, #176]	; 0xb0
	conn->le.keys->enc_size = get_encryption_key_size(smp);
    b56a:	6f22      	ldr	r2, [r4, #112]	; 0x70
	return min(req->max_key_size, rsp->max_key_size);
    b56c:	428b      	cmp	r3, r1
    b56e:	bf28      	it	cs
    b570:	460b      	movcs	r3, r1
	conn->le.keys->enc_size = get_encryption_key_size(smp);
    b572:	71d3      	strb	r3, [r2, #7]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC) &&
    b574:	2105      	movs	r1, #5
    b576:	4630      	mov	r0, r6
    b578:	f7fe f8da 	bl	9730 <atomic_test_bit>
    b57c:	b1b0      	cbz	r0, b5ac <bt_smp_update_keys+0xd0>
	    atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    b57e:	210a      	movs	r1, #10
    b580:	4630      	mov	r0, r6
    b582:	f7fe f8d5 	bl	9730 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC) &&
    b586:	b188      	cbz	r0, b5ac <bt_smp_update_keys+0xd0>
		bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
    b588:	2120      	movs	r1, #32
    b58a:	6f20      	ldr	r0, [r4, #112]	; 0x70
    b58c:	f000 f900 	bl	b790 <bt_keys_add_type>
		memcpy(conn->le.keys->ltk.val, smp->tk,
    b590:	6f20      	ldr	r0, [r4, #112]	; 0x70
    b592:	2210      	movs	r2, #16
    b594:	f105 01e3 	add.w	r1, r5, #227	; 0xe3
    b598:	301a      	adds	r0, #26
    b59a:	f7f5 f8fa 	bl	792 <memcpy>
		conn->le.keys->ltk.rand = 0;
    b59e:	6f23      	ldr	r3, [r4, #112]	; 0x70
    b5a0:	2000      	movs	r0, #0
    b5a2:	2100      	movs	r1, #0
    b5a4:	e9c3 0104 	strd	r0, r1, [r3, #16]
		conn->le.keys->ltk.ediv = 0;
    b5a8:	2200      	movs	r2, #0
    b5aa:	831a      	strh	r2, [r3, #24]
}
    b5ac:	b005      	add	sp, #20
    b5ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b5b0:	3008      	adds	r0, #8
    b5b2:	f3bf 8f5b 	dmb	ish
    b5b6:	e850 3f00 	ldrex	r3, [r0]
    b5ba:	f023 0301 	bic.w	r3, r3, #1
    b5be:	e840 3200 	strex	r2, r3, [r0]
    b5c2:	2a00      	cmp	r2, #0
    b5c4:	d1f7      	bne.n	b5b6 <bt_smp_update_keys+0xda>
    b5c6:	f3bf 8f5b 	dmb	ish
    b5ca:	e7ca      	b.n	b562 <bt_smp_update_keys+0x86>
    b5cc:	00023dbe 	.word	0x00023dbe
    b5d0:	00022d86 	.word	0x00022d86
    b5d4:	0002509f 	.word	0x0002509f
    b5d8:	000272e8 	.word	0x000272e8
    b5dc:	00025423 	.word	0x00025423

0000b5e0 <bt_smp_get_tk>:
{
    b5e0:	b570      	push	{r4, r5, r6, lr}
    b5e2:	460e      	mov	r6, r1
	smp = smp_chan_get(conn);
    b5e4:	f7fe fa5e 	bl	9aa4 <smp_chan_get>
	if (!smp) {
    b5e8:	4605      	mov	r5, r0
    b5ea:	b908      	cbnz	r0, b5f0 <bt_smp_get_tk+0x10>
		return false;
    b5ec:	2000      	movs	r0, #0
    b5ee:	bd70      	pop	{r4, r5, r6, pc}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    b5f0:	2103      	movs	r1, #3
    b5f2:	30a0      	adds	r0, #160	; 0xa0
    b5f4:	f7fe f89c 	bl	9730 <atomic_test_bit>
    b5f8:	2800      	cmp	r0, #0
    b5fa:	d0f7      	beq.n	b5ec <bt_smp_get_tk+0xc>
	return min(req->max_key_size, rsp->max_key_size);
    b5fc:	f895 40b0 	ldrb.w	r4, [r5, #176]	; 0xb0
    b600:	f895 30a9 	ldrb.w	r3, [r5, #169]	; 0xa9
    b604:	429c      	cmp	r4, r3
    b606:	bf28      	it	cs
    b608:	461c      	movcs	r4, r3
	memcpy(tk, smp->tk, enc_size);
    b60a:	4622      	mov	r2, r4
    b60c:	f105 01e3 	add.w	r1, r5, #227	; 0xe3
    b610:	4630      	mov	r0, r6
    b612:	f7f5 f8be 	bl	792 <memcpy>
	if (enc_size < sizeof(smp->tk)) {
    b616:	2c0f      	cmp	r4, #15
    b618:	d805      	bhi.n	b626 <bt_smp_get_tk+0x46>
		memset(tk + enc_size, 0, sizeof(smp->tk) - enc_size);
    b61a:	f1c4 0210 	rsb	r2, r4, #16
    b61e:	2100      	movs	r1, #0
    b620:	1930      	adds	r0, r6, r4
    b622:	f7f5 f8e2 	bl	7ea <memset>
	return true;
    b626:	2001      	movs	r0, #1
}
    b628:	bd70      	pop	{r4, r5, r6, pc}
	...

0000b62c <bt_smp_init>:
	return (bt_dev.supported_commands[34] & 0x02) &&
	       (bt_dev.supported_commands[34] & 0x04);
}

int bt_smp_init(void)
{
    b62c:	b508      	push	{r3, lr}
	return (bt_dev.supported_commands[34] & 0x02) &&
    b62e:	4b09      	ldr	r3, [pc, #36]	; (b654 <bt_smp_init+0x28>)
	if (IS_ENABLED(CONFIG_BT_SMP_SC_ONLY) && !sc_supported) {
		BT_ERR("SC Only Mode selected but LE SC not supported");
		return -ENOENT;
	}

	bt_l2cap_le_fixed_chan_register(&chan);
    b630:	4809      	ldr	r0, [pc, #36]	; (b658 <bt_smp_init+0x2c>)
	return (bt_dev.supported_commands[34] & 0x02) &&
    b632:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    b636:	f003 0306 	and.w	r3, r3, #6
    b63a:	1f9a      	subs	r2, r3, #6
    b63c:	4253      	negs	r3, r2
    b63e:	4153      	adcs	r3, r2
    b640:	4a06      	ldr	r2, [pc, #24]	; (b65c <bt_smp_init+0x30>)
    b642:	7013      	strb	r3, [r2, #0]
	bt_l2cap_le_fixed_chan_register(&chan);
    b644:	f7fb fa9e 	bl	6b84 <bt_l2cap_le_fixed_chan_register>
	}
#endif

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	bt_pub_key_gen(&pub_key_cb);
    b648:	4805      	ldr	r0, [pc, #20]	; (b660 <bt_smp_init+0x34>)
    b64a:	f7fa fa09 	bl	5a60 <bt_pub_key_gen>

	return smp_self_test();
}
    b64e:	2000      	movs	r0, #0
    b650:	bd08      	pop	{r3, pc}
    b652:	bf00      	nop
    b654:	20009cd8 	.word	0x20009cd8
    b658:	20009f8c 	.word	0x20009f8c
    b65c:	20000939 	.word	0x20000939
    b660:	20009fac 	.word	0x20009fac

0000b664 <bt_keys_clear>:

void bt_keys_clear(struct bt_keys *keys)
{
	BT_DBG("keys for %s", bt_addr_le_str(&keys->addr));

	if (keys->keys & BT_KEYS_IRK) {
    b664:	8983      	ldrh	r3, [r0, #12]
    b666:	079b      	lsls	r3, r3, #30
{
    b668:	b510      	push	{r4, lr}
    b66a:	4604      	mov	r4, r0
	if (keys->keys & BT_KEYS_IRK) {
    b66c:	d501      	bpl.n	b672 <bt_keys_clear+0xe>
		bt_id_del(keys);
    b66e:	f7f8 fb29 	bl	3cc4 <bt_id_del>
	}

	memset(keys, 0, sizeof(*keys));
    b672:	4620      	mov	r0, r4
    b674:	2268      	movs	r2, #104	; 0x68
    b676:	2100      	movs	r1, #0
}
    b678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	memset(keys, 0, sizeof(*keys));
    b67c:	f7f5 b8b5 	b.w	7ea <memset>

0000b680 <bt_keys_get_addr>:
{
    b680:	b537      	push	{r0, r1, r2, r4, r5, lr}
    b682:	4605      	mov	r5, r0
	return memcmp(a, b, sizeof(*a));
    b684:	4601      	mov	r1, r0
    b686:	2207      	movs	r2, #7
    b688:	480b      	ldr	r0, [pc, #44]	; (b6b8 <bt_keys_get_addr+0x38>)
    b68a:	f7f5 f855 	bl	738 <memcmp>
		if (!bt_addr_le_cmp(&keys->addr, addr)) {
    b68e:	b170      	cbz	r0, b6ae <bt_keys_get_addr+0x2e>
		if (!bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
    b690:	2400      	movs	r4, #0
    b692:	2207      	movs	r2, #7
    b694:	4669      	mov	r1, sp
    b696:	4808      	ldr	r0, [pc, #32]	; (b6b8 <bt_keys_get_addr+0x38>)
    b698:	9400      	str	r4, [sp, #0]
    b69a:	f8cd 4003 	str.w	r4, [sp, #3]
    b69e:	f7f5 f84b 	bl	738 <memcmp>
    b6a2:	b938      	cbnz	r0, b6b4 <bt_keys_get_addr+0x34>
	memcpy(dst, src, sizeof(*dst));
    b6a4:	2207      	movs	r2, #7
    b6a6:	4629      	mov	r1, r5
    b6a8:	4803      	ldr	r0, [pc, #12]	; (b6b8 <bt_keys_get_addr+0x38>)
    b6aa:	f7f5 f872 	bl	792 <memcpy>
		keys = &key_pool[i];
    b6ae:	4802      	ldr	r0, [pc, #8]	; (b6b8 <bt_keys_get_addr+0x38>)
}
    b6b0:	b003      	add	sp, #12
    b6b2:	bd30      	pop	{r4, r5, pc}
	return NULL;
    b6b4:	4620      	mov	r0, r4
    b6b6:	e7fb      	b.n	b6b0 <bt_keys_get_addr+0x30>
    b6b8:	20000940 	.word	0x20000940

0000b6bc <bt_keys_foreach>:
		if ((key_pool[i].keys & type)) {
    b6bc:	4b03      	ldr	r3, [pc, #12]	; (b6cc <bt_keys_foreach+0x10>)
    b6be:	899a      	ldrh	r2, [r3, #12]
    b6c0:	4202      	tst	r2, r0
    b6c2:	d001      	beq.n	b6c8 <bt_keys_foreach+0xc>
			func(&key_pool[i]);
    b6c4:	4618      	mov	r0, r3
    b6c6:	4708      	bx	r1
    b6c8:	4770      	bx	lr
    b6ca:	bf00      	nop
    b6cc:	20000940 	.word	0x20000940

0000b6d0 <bt_keys_find>:
{
    b6d0:	b510      	push	{r4, lr}
		if ((key_pool[i].keys & type) &&
    b6d2:	4c06      	ldr	r4, [pc, #24]	; (b6ec <bt_keys_find+0x1c>)
    b6d4:	89a3      	ldrh	r3, [r4, #12]
    b6d6:	4203      	tst	r3, r0
    b6d8:	d004      	beq.n	b6e4 <bt_keys_find+0x14>
	return memcmp(a, b, sizeof(*a));
    b6da:	2207      	movs	r2, #7
    b6dc:	4620      	mov	r0, r4
    b6de:	f7f5 f82b 	bl	738 <memcmp>
    b6e2:	b108      	cbz	r0, b6e8 <bt_keys_find+0x18>
	return NULL;
    b6e4:	2000      	movs	r0, #0
    b6e6:	bd10      	pop	{r4, pc}
			return &key_pool[i];
    b6e8:	4620      	mov	r0, r4
}
    b6ea:	bd10      	pop	{r4, pc}
    b6ec:	20000940 	.word	0x20000940

0000b6f0 <bt_keys_get_type>:
{
    b6f0:	b538      	push	{r3, r4, r5, lr}
    b6f2:	4604      	mov	r4, r0
    b6f4:	460d      	mov	r5, r1
	keys = bt_keys_find(type, addr);
    b6f6:	f7ff ffeb 	bl	b6d0 <bt_keys_find>
	if (keys) {
    b6fa:	b930      	cbnz	r0, b70a <bt_keys_get_type+0x1a>
	keys = bt_keys_get_addr(addr);
    b6fc:	4628      	mov	r0, r5
    b6fe:	f7ff ffbf 	bl	b680 <bt_keys_get_addr>
	if (!keys) {
    b702:	b110      	cbz	r0, b70a <bt_keys_get_type+0x1a>
	keys->keys |= type;
    b704:	8983      	ldrh	r3, [r0, #12]
    b706:	431c      	orrs	r4, r3
    b708:	8184      	strh	r4, [r0, #12]
}
    b70a:	bd38      	pop	{r3, r4, r5, pc}

0000b70c <bt_keys_find_irk>:
{
    b70c:	b570      	push	{r4, r5, r6, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
    b70e:	7803      	ldrb	r3, [r0, #0]
    b710:	2b01      	cmp	r3, #1
    b712:	4605      	mov	r5, r0
    b714:	d001      	beq.n	b71a <bt_keys_find_irk+0xe>
		return NULL;
    b716:	2000      	movs	r0, #0
    b718:	bd70      	pop	{r4, r5, r6, pc}
	if (!bt_addr_le_is_rpa(addr)) {
    b71a:	7983      	ldrb	r3, [r0, #6]
    b71c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    b720:	2b40      	cmp	r3, #64	; 0x40
    b722:	d1f8      	bne.n	b716 <bt_keys_find_irk+0xa>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    b724:	4c10      	ldr	r4, [pc, #64]	; (b768 <bt_keys_find_irk+0x5c>)
    b726:	89a3      	ldrh	r3, [r4, #12]
    b728:	f013 0f02 	tst.w	r3, #2
    b72c:	4626      	mov	r6, r4
    b72e:	d110      	bne.n	b752 <bt_keys_find_irk+0x46>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    b730:	89b3      	ldrh	r3, [r6, #12]
    b732:	079b      	lsls	r3, r3, #30
    b734:	d5ef      	bpl.n	b716 <bt_keys_find_irk+0xa>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
    b736:	3501      	adds	r5, #1
    b738:	4629      	mov	r1, r5
    b73a:	480c      	ldr	r0, [pc, #48]	; (b76c <bt_keys_find_irk+0x60>)
    b73c:	f7f7 fe57 	bl	33ee <bt_rpa_irk_matches>
    b740:	2800      	cmp	r0, #0
    b742:	d0e8      	beq.n	b716 <bt_keys_find_irk+0xa>
	memcpy(dst, src, sizeof(*dst));
    b744:	2206      	movs	r2, #6
    b746:	4629      	mov	r1, r5
    b748:	4809      	ldr	r0, [pc, #36]	; (b770 <bt_keys_find_irk+0x64>)
    b74a:	f7f5 f822 	bl	792 <memcpy>
			return &key_pool[i];
    b74e:	4806      	ldr	r0, [pc, #24]	; (b768 <bt_keys_find_irk+0x5c>)
    b750:	bd70      	pop	{r4, r5, r6, pc}
	return memcmp(a, b, sizeof(*a));
    b752:	2206      	movs	r2, #6
    b754:	f104 0140 	add.w	r1, r4, #64	; 0x40
    b758:	3001      	adds	r0, #1
    b75a:	f7f4 ffed 	bl	738 <memcmp>
		if (!bt_addr_cmp(&addr->a, &key_pool[i].irk.rpa)) {
    b75e:	2800      	cmp	r0, #0
    b760:	d1e6      	bne.n	b730 <bt_keys_find_irk+0x24>
			return &key_pool[i];
    b762:	4620      	mov	r0, r4
}
    b764:	bd70      	pop	{r4, r5, r6, pc}
    b766:	bf00      	nop
    b768:	20000940 	.word	0x20000940
    b76c:	20000970 	.word	0x20000970
    b770:	20000980 	.word	0x20000980

0000b774 <bt_keys_find_addr>:
	return memcmp(a, b, sizeof(*a));
    b774:	4601      	mov	r1, r0
{
    b776:	b508      	push	{r3, lr}
    b778:	2207      	movs	r2, #7
    b77a:	4804      	ldr	r0, [pc, #16]	; (b78c <bt_keys_find_addr+0x18>)
    b77c:	f7f4 ffdc 	bl	738 <memcmp>
		if (!bt_addr_le_cmp(&key_pool[i].addr, addr)) {
    b780:	2800      	cmp	r0, #0
}
    b782:	4802      	ldr	r0, [pc, #8]	; (b78c <bt_keys_find_addr+0x18>)
    b784:	bf18      	it	ne
    b786:	2000      	movne	r0, #0
    b788:	bd08      	pop	{r3, pc}
    b78a:	bf00      	nop
    b78c:	20000940 	.word	0x20000940

0000b790 <bt_keys_add_type>:
	keys->keys |= type;
    b790:	8983      	ldrh	r3, [r0, #12]
    b792:	4319      	orrs	r1, r3
    b794:	8181      	strh	r1, [r0, #12]
    b796:	4770      	bx	lr

0000b798 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
    b798:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	*mem_head = mem_pool;
    b79a:	6018      	str	r0, [r3, #0]

	/* Store free mem_count after the list's next pointer at an aligned
	 * memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    b79c:	1dc3      	adds	r3, r0, #7
{
    b79e:	4605      	mov	r5, r0
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    b7a0:	f023 0303 	bic.w	r3, r3, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    b7a4:	1e50      	subs	r0, r2, #1
{
    b7a6:	460e      	mov	r6, r1
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    b7a8:	b280      	uxth	r0, r0
{
    b7aa:	4614      	mov	r4, r2
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    b7ac:	801a      	strh	r2, [r3, #0]
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    b7ae:	2100      	movs	r1, #0
    b7b0:	2204      	movs	r2, #4
    b7b2:	fb06 5000 	mla	r0, r6, r0, r5
    b7b6:	f7f5 f818 	bl	7ea <memset>
    b7ba:	3c02      	subs	r4, #2
    b7bc:	b2a4      	uxth	r4, r4
	       sizeof(mem_pool));
	while (mem_count--) {
    b7be:	f64f 77ff 	movw	r7, #65535	; 0xffff
    b7c2:	42bc      	cmp	r4, r7
    b7c4:	d101      	bne.n	b7ca <mem_init+0x32>
		next = (u32_t)((u8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
		       (void *)&next, sizeof(next));
	}
}
    b7c6:	b003      	add	sp, #12
    b7c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			       (mem_size * (mem_count + 1)));
    b7ca:	fb04 6006 	mla	r0, r4, r6, r6
		next = (u32_t)((u8_t *) mem_pool +
    b7ce:	182b      	adds	r3, r5, r0
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    b7d0:	2204      	movs	r2, #4
    b7d2:	1b80      	subs	r0, r0, r6
    b7d4:	eb0d 0102 	add.w	r1, sp, r2
    b7d8:	4428      	add	r0, r5
    b7da:	3c01      	subs	r4, #1
		next = (u32_t)((u8_t *) mem_pool +
    b7dc:	9301      	str	r3, [sp, #4]
    b7de:	b2a4      	uxth	r4, r4
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    b7e0:	f7f4 ffd7 	bl	792 <memcpy>
    b7e4:	e7ed      	b.n	b7c2 <mem_init+0x2a>

0000b7e6 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    b7e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (*mem_head) {
    b7e8:	6805      	ldr	r5, [r0, #0]
{
    b7ea:	4606      	mov	r6, r0
	if (*mem_head) {
    b7ec:	b195      	cbz	r5, b814 <mem_acquire+0x2e>
		u16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    b7ee:	1deb      	adds	r3, r5, #7
    b7f0:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    b7f4:	2204      	movs	r2, #4
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    b7f6:	881c      	ldrh	r4, [r3, #0]
		memcpy(&head, mem, sizeof(head));
    b7f8:	4629      	mov	r1, r5
    b7fa:	eb0d 0002 	add.w	r0, sp, r2
    b7fe:	f7f4 ffc8 	bl	792 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    b802:	9b01      	ldr	r3, [sp, #4]
		free_count--;
    b804:	3c01      	subs	r4, #1
    b806:	b2a4      	uxth	r4, r4
		if (head) {
    b808:	b11b      	cbz	r3, b812 <mem_acquire+0x2c>
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
    b80a:	1dda      	adds	r2, r3, #7
    b80c:	f022 0203 	bic.w	r2, r2, #3
    b810:	8014      	strh	r4, [r2, #0]
				free_count;
		}

		*mem_head = head;
    b812:	6033      	str	r3, [r6, #0]
		return mem;
	}

	return NULL;
}
    b814:	4628      	mov	r0, r5
    b816:	b002      	add	sp, #8
    b818:	bd70      	pop	{r4, r5, r6, pc}

0000b81a <mem_release>:

void mem_release(void *mem, void **mem_head)
{
    b81a:	b570      	push	{r4, r5, r6, lr}
	u16_t free_count = 0;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    b81c:	680c      	ldr	r4, [r1, #0]
{
    b81e:	4606      	mov	r6, r0
    b820:	460d      	mov	r5, r1
	if (*mem_head) {
    b822:	b11c      	cbz	r4, b82c <mem_release+0x12>
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    b824:	1de3      	adds	r3, r4, #7
    b826:	f023 0303 	bic.w	r3, r3, #3
    b82a:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
    b82c:	2204      	movs	r2, #4
    b82e:	4629      	mov	r1, r5
    b830:	4630      	mov	r0, r6
    b832:	f7f4 ffae 	bl	792 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    b836:	1df2      	adds	r2, r6, #7
    b838:	f022 0203 	bic.w	r2, r2, #3
	free_count++;
    b83c:	1c63      	adds	r3, r4, #1
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    b83e:	8013      	strh	r3, [r2, #0]

	*mem_head = mem;
    b840:	602e      	str	r6, [r5, #0]
    b842:	bd70      	pop	{r4, r5, r6, pc}

0000b844 <mem_free_count_get>:
u16_t mem_free_count_get(void *mem_head)
{
	u16_t free_count = 0;

	/* Get the free count from the list */
	if (mem_head) {
    b844:	b118      	cbz	r0, b84e <mem_free_count_get+0xa>
		free_count = *((u16_t *)MROUND((u8_t *)mem_head +
    b846:	3007      	adds	r0, #7
    b848:	f020 0003 	bic.w	r0, r0, #3
    b84c:	8800      	ldrh	r0, [r0, #0]
					       sizeof(mem_head)));
	}

	return free_count;
}
    b84e:	4770      	bx	lr

0000b850 <mem_get>:

void *mem_get(void *mem_pool, u16_t mem_size, u16_t index)
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
}
    b850:	fb02 0001 	mla	r0, r2, r1, r0
    b854:	4770      	bx	lr

0000b856 <mem_index_get>:

u16_t mem_index_get(void *mem, void *mem_pool, u16_t mem_size)
{
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
    b856:	1a40      	subs	r0, r0, r1
    b858:	b280      	uxth	r0, r0
}
    b85a:	fbb0 f0f2 	udiv	r0, r0, r2
    b85e:	4770      	bx	lr

0000b860 <mem_rcopy>:

void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
    b860:	b510      	push	{r4, lr}
	src += len;
    b862:	4411      	add	r1, r2
    b864:	3801      	subs	r0, #1
	while (len--) {
    b866:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b86a:	3a01      	subs	r2, #1
    b86c:	b292      	uxth	r2, r2
    b86e:	429a      	cmp	r2, r3
    b870:	d100      	bne.n	b874 <mem_rcopy+0x14>
		*dst++ = *--src;
	}
}
    b872:	bd10      	pop	{r4, pc}
		*dst++ = *--src;
    b874:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
    b878:	f800 4f01 	strb.w	r4, [r0, #1]!
    b87c:	e7f5      	b.n	b86a <mem_rcopy+0xa>

0000b87e <mem_nz>:

u8_t mem_nz(u8_t *src, u16_t len)
{
    b87e:	4401      	add	r1, r0
	while (len--) {
    b880:	4288      	cmp	r0, r1
    b882:	d101      	bne.n	b888 <mem_nz+0xa>
		if (*src++) {
			return 1;
		}
	}

	return 0;
    b884:	2000      	movs	r0, #0
    b886:	4770      	bx	lr
		if (*src++) {
    b888:	f810 3b01 	ldrb.w	r3, [r0], #1
    b88c:	2b00      	cmp	r3, #0
    b88e:	d0f7      	beq.n	b880 <mem_nz+0x2>
			return 1;
    b890:	2001      	movs	r0, #1
}
    b892:	4770      	bx	lr

0000b894 <memq_init>:
inline memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem);

memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* head and tail pointer to the initial link */
	*head = *tail = link;
    b894:	6010      	str	r0, [r2, #0]
    b896:	6008      	str	r0, [r1, #0]

	return link;
}
    b898:	4770      	bx	lr

0000b89a <memq_enqueue>:

memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
    b89a:	b510      	push	{r4, lr}
	/* make the current tail link's next point to new link */
	(*tail)->next = link;
    b89c:	6814      	ldr	r4, [r2, #0]
    b89e:	6020      	str	r0, [r4, #0]

	/* assign mem to current tail link's mem */
	(*tail)->mem = mem;
    b8a0:	6814      	ldr	r4, [r2, #0]
    b8a2:	6061      	str	r1, [r4, #4]

	/* increment the tail! */
	*tail = link;
    b8a4:	6010      	str	r0, [r2, #0]

	return link;
}
    b8a6:	bd10      	pop	{r4, pc}

0000b8a8 <memq_peek>:

memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* if head and tail are equal, then queue empty */
	if (head == tail) {
    b8a8:	4288      	cmp	r0, r1
    b8aa:	d003      	beq.n	b8b4 <memq_peek+0xc>
		return NULL;
	}

	/* extract the link's mem */
	if (mem) {
    b8ac:	b11a      	cbz	r2, b8b6 <memq_peek+0xe>
		*mem = head->mem;
    b8ae:	6843      	ldr	r3, [r0, #4]
    b8b0:	6013      	str	r3, [r2, #0]
    b8b2:	4770      	bx	lr
		return NULL;
    b8b4:	2000      	movs	r0, #0
	}

	return head;
}
    b8b6:	4770      	bx	lr

0000b8b8 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *link;

	/* use memq peek to get the link and mem */
	link = memq_peek(*head, tail, mem);
    b8b8:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    b8ba:	4283      	cmp	r3, r0
    b8bc:	d009      	beq.n	b8d2 <memq_dequeue+0x1a>
	if (mem) {
    b8be:	b122      	cbz	r2, b8ca <memq_dequeue+0x12>
		*mem = head->mem;
    b8c0:	6858      	ldr	r0, [r3, #4]
    b8c2:	6010      	str	r0, [r2, #0]
	if (!link) {
		return link;
	}

	/* increment the head to next link node */
	*head = link->next;
    b8c4:	681a      	ldr	r2, [r3, #0]
    b8c6:	600a      	str	r2, [r1, #0]

	return link;
    b8c8:	e001      	b.n	b8ce <memq_dequeue+0x16>
	if (!link) {
    b8ca:	2b00      	cmp	r3, #0
    b8cc:	d1fa      	bne.n	b8c4 <memq_dequeue+0xc>
}
    b8ce:	4618      	mov	r0, r3
    b8d0:	4770      	bx	lr
		return NULL;
    b8d2:	2300      	movs	r3, #0
    b8d4:	e7fb      	b.n	b8ce <memq_dequeue+0x16>
	...

0000b8d8 <mayfly_init>:
} mft[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

static memq_link_t mfl[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

void mayfly_init(void)
{
    b8d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (callee_id--) {
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(&mfl[callee_id][caller_id],
    b8dc:	4f11      	ldr	r7, [pc, #68]	; (b924 <mayfly_init+0x4c>)
    b8de:	f8df 9048 	ldr.w	r9, [pc, #72]	; b928 <mayfly_init+0x50>
	callee_id = MAYFLY_CALLEE_COUNT;
    b8e2:	2604      	movs	r6, #4
	while (callee_id--) {
    b8e4:	3e01      	subs	r6, #1
    b8e6:	b2f6      	uxtb	r6, r6
    b8e8:	2eff      	cmp	r6, #255	; 0xff
    b8ea:	d019      	beq.n	b920 <mayfly_init+0x48>
    b8ec:	b233      	sxth	r3, r6
    b8ee:	ea4f 0883 	mov.w	r8, r3, lsl #2
    b8f2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    b8f6:	011d      	lsls	r5, r3, #4
    b8f8:	2404      	movs	r4, #4
    b8fa:	f04f 0a0c 	mov.w	sl, #12
    b8fe:	e00a      	b.n	b916 <mayfly_init+0x3e>
    b900:	fb1a 5104 	smlabb	r1, sl, r4, r5
			memq_init(&mfl[callee_id][caller_id],
    b904:	1d0a      	adds	r2, r1, #4
    b906:	eb04 0008 	add.w	r0, r4, r8
    b90a:	443a      	add	r2, r7
    b90c:	4439      	add	r1, r7
    b90e:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
    b912:	f7ff ffbf 	bl	b894 <memq_init>
		while (caller_id--) {
    b916:	3c01      	subs	r4, #1
    b918:	b2e4      	uxtb	r4, r4
    b91a:	2cff      	cmp	r4, #255	; 0xff
    b91c:	d1f0      	bne.n	b900 <mayfly_init+0x28>
    b91e:	e7e1      	b.n	b8e4 <mayfly_init+0xc>
    b920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b924:	20000a28 	.word	0x20000a28
    b928:	200009a8 	.word	0x200009a8

0000b92c <mayfly_enable>:
		}
	}
}

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
    b92c:	b4f0      	push	{r4, r5, r6, r7}
    b92e:	4b12      	ldr	r3, [pc, #72]	; (b978 <mayfly_enable+0x4c>)
    b930:	4605      	mov	r5, r0
    b932:	460f      	mov	r7, r1
    b934:	260c      	movs	r6, #12
    b936:	2430      	movs	r4, #48	; 0x30
	if (enable) {
    b938:	b172      	cbz	r2, b958 <mayfly_enable+0x2c>
		if (mft[callee_id][caller_id].enable_req ==
    b93a:	4361      	muls	r1, r4
    b93c:	fb06 1400 	mla	r4, r6, r0, r1
    b940:	4423      	add	r3, r4
    b942:	7a59      	ldrb	r1, [r3, #9]
    b944:	7a18      	ldrb	r0, [r3, #8]
    b946:	4281      	cmp	r1, r0
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    b948:	bf04      	itt	eq
    b94a:	3101      	addeq	r1, #1
    b94c:	7219      	strbeq	r1, [r3, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    b94e:	4628      	mov	r0, r5
    b950:	4639      	mov	r1, r7
			mft[callee_id][caller_id].disable_req++;

			mayfly_pend(caller_id, callee_id);
		}
	}
}
    b952:	bcf0      	pop	{r4, r5, r6, r7}
		mayfly_enable_cb(caller_id, callee_id, enable);
    b954:	f00d baf8 	b.w	18f48 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
    b958:	434c      	muls	r4, r1
    b95a:	fb06 4400 	mla	r4, r6, r0, r4
    b95e:	4423      	add	r3, r4
    b960:	7a9c      	ldrb	r4, [r3, #10]
    b962:	7ada      	ldrb	r2, [r3, #11]
    b964:	42a2      	cmp	r2, r4
    b966:	d104      	bne.n	b972 <mayfly_enable+0x46>
			mft[callee_id][caller_id].disable_req++;
    b968:	3201      	adds	r2, #1
    b96a:	729a      	strb	r2, [r3, #10]
}
    b96c:	bcf0      	pop	{r4, r5, r6, r7}
			mayfly_pend(caller_id, callee_id);
    b96e:	f00d bb4b 	b.w	19008 <mayfly_pend>
}
    b972:	bcf0      	pop	{r4, r5, r6, r7}
    b974:	4770      	bx	lr
    b976:	bf00      	nop
    b978:	20000a28 	.word	0x20000a28

0000b97c <mayfly_enqueue>:

u32_t mayfly_enqueue(u8_t caller_id, u8_t callee_id, u8_t chain,
			struct mayfly *m)
{
    b97c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b97e:	4605      	mov	r5, r0
    b980:	460e      	mov	r6, r1
    b982:	461c      	mov	r4, r3
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    b984:	b18a      	cbz	r2, b9aa <mayfly_enqueue+0x2e>
    b986:	2301      	movs	r3, #1
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
    b988:	7862      	ldrb	r2, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    b98a:	7820      	ldrb	r0, [r4, #0]
    b98c:	1a80      	subs	r0, r0, r2
	if (state != 0) {
    b98e:	f010 0703 	ands.w	r7, r0, #3
    b992:	d029      	beq.n	b9e8 <mayfly_enqueue+0x6c>
		if (chain) {
    b994:	b303      	cbz	r3, b9d8 <mayfly_enqueue+0x5c>
			if (state != 1) {
    b996:	2f01      	cmp	r7, #1
    b998:	d039      	beq.n	ba0e <mayfly_enqueue+0x92>
				/* mark as ready in queue */
				m->_req = ack + 1;
    b99a:	3201      	adds	r2, #1
    b99c:	b2d2      	uxtb	r2, r2
    b99e:	7022      	strb	r2, [r4, #0]
	/* new, add as ready in the queue */
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    b9a0:	4631      	mov	r1, r6
    b9a2:	4628      	mov	r0, r5
    b9a4:	f00d fb30 	bl	19008 <mayfly_pend>
    b9a8:	e01c      	b.n	b9e4 <mayfly_enqueue+0x68>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    b9aa:	f00d fb1b 	bl	18fe4 <mayfly_prio_is_equal>
    b9ae:	2800      	cmp	r0, #0
    b9b0:	d0e9      	beq.n	b986 <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
    b9b2:	4631      	mov	r1, r6
    b9b4:	4628      	mov	r0, r5
    b9b6:	f00d faef 	bl	18f98 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    b9ba:	2800      	cmp	r0, #0
    b9bc:	d0e3      	beq.n	b986 <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
    b9be:	2330      	movs	r3, #48	; 0x30
    b9c0:	220c      	movs	r2, #12
    b9c2:	4373      	muls	r3, r6
    b9c4:	fb02 3305 	mla	r3, r2, r5, r3
    b9c8:	4a12      	ldr	r2, [pc, #72]	; (ba14 <mayfly_enqueue+0x98>)
    b9ca:	441a      	add	r2, r3
		!mayfly_is_enabled(caller_id, callee_id) ||
    b9cc:	7a93      	ldrb	r3, [r2, #10]
    b9ce:	7ad2      	ldrb	r2, [r2, #11]
    b9d0:	1a9b      	subs	r3, r3, r2
    b9d2:	bf18      	it	ne
    b9d4:	2301      	movne	r3, #1
    b9d6:	e7d7      	b.n	b988 <mayfly_enqueue+0xc>
		m->_req = ack + 2;
    b9d8:	3202      	adds	r2, #2
    b9da:	b2d2      	uxtb	r2, r2
    b9dc:	7022      	strb	r2, [r4, #0]
		m->fp(m->param);
    b9de:	68e3      	ldr	r3, [r4, #12]
    b9e0:	68a0      	ldr	r0, [r4, #8]
    b9e2:	4798      	blx	r3
		return 0;
    b9e4:	2000      	movs	r0, #0
    b9e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!chain) {
    b9e8:	2b00      	cmp	r3, #0
    b9ea:	d0f8      	beq.n	b9de <mayfly_enqueue+0x62>
	m->_req = ack + 1;
    b9ec:	3201      	adds	r2, #1
    b9ee:	b2d2      	uxtb	r2, r2
    b9f0:	7022      	strb	r2, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    b9f2:	2304      	movs	r3, #4
    b9f4:	2230      	movs	r2, #48	; 0x30
    b9f6:	fb12 3206 	smlabb	r2, r2, r6, r3
    b9fa:	230c      	movs	r3, #12
    b9fc:	fb13 2305 	smlabb	r3, r3, r5, r2
    ba00:	4a04      	ldr	r2, [pc, #16]	; (ba14 <mayfly_enqueue+0x98>)
    ba02:	6860      	ldr	r0, [r4, #4]
    ba04:	441a      	add	r2, r3
    ba06:	4621      	mov	r1, r4
    ba08:	f7ff ff47 	bl	b89a <memq_enqueue>
    ba0c:	e7c8      	b.n	b9a0 <mayfly_enqueue+0x24>
			return 1;
    ba0e:	4638      	mov	r0, r7

	return 0;
}
    ba10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ba12:	bf00      	nop
    ba14:	20000a28 	.word	0x20000a28

0000ba18 <mayfly_run>:

void mayfly_run(u8_t callee_id)
{
    ba18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ba1c:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    ba20:	b089      	sub	sp, #36	; 0x24
    ba22:	011b      	lsls	r3, r3, #4
	u8_t disable = 0;
	u8_t enable = 0;
    ba24:	f04f 0800 	mov.w	r8, #0
	while (caller_id--) {
		memq_link_t *link;
		struct mayfly *m = 0;

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
    ba28:	4e43      	ldr	r6, [pc, #268]	; (bb38 <mayfly_run+0x120>)
    ba2a:	9304      	str	r3, [sp, #16]
{
    ba2c:	4605      	mov	r5, r0
	caller_id = MAYFLY_CALLER_COUNT;
    ba2e:	2404      	movs	r4, #4
	u8_t disable = 0;
    ba30:	f8cd 8004 	str.w	r8, [sp, #4]
	while (caller_id--) {
    ba34:	3c01      	subs	r4, #1
    ba36:	b2e4      	uxtb	r4, r4
    ba38:	2cff      	cmp	r4, #255	; 0xff
    ba3a:	d10b      	bne.n	ba54 <mayfly_run+0x3c>
			mft[callee_id][caller_id].enable_ack =
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    ba3c:	9b01      	ldr	r3, [sp, #4]
    ba3e:	2b00      	cmp	r3, #0
    ba40:	d076      	beq.n	bb30 <mayfly_run+0x118>
    ba42:	f1b8 0f00 	cmp.w	r8, #0
    ba46:	d173      	bne.n	bb30 <mayfly_run+0x118>
		mayfly_enable_cb(callee_id, callee_id, 0);
    ba48:	4642      	mov	r2, r8
    ba4a:	4629      	mov	r1, r5
    ba4c:	4628      	mov	r0, r5
    ba4e:	f00d fa7b 	bl	18f48 <mayfly_enable_cb>
    ba52:	e06d      	b.n	bb30 <mayfly_run+0x118>
		struct mayfly *m = 0;
    ba54:	f10d 0b20 	add.w	fp, sp, #32
    ba58:	2300      	movs	r3, #0
		link = memq_peek(mft[callee_id][caller_id].head,
    ba5a:	270c      	movs	r7, #12
		struct mayfly *m = 0;
    ba5c:	f84b 3d04 	str.w	r3, [fp, #-4]!
		link = memq_peek(mft[callee_id][caller_id].head,
    ba60:	f04f 0930 	mov.w	r9, #48	; 0x30
    ba64:	fb07 f304 	mul.w	r3, r7, r4
    ba68:	fb09 3005 	mla	r0, r9, r5, r3
    ba6c:	1831      	adds	r1, r6, r0
    ba6e:	465a      	mov	r2, fp
    ba70:	6849      	ldr	r1, [r1, #4]
    ba72:	5830      	ldr	r0, [r6, r0]
    ba74:	9302      	str	r3, [sp, #8]
    ba76:	f7ff ff17 	bl	b8a8 <memq_peek>
				memq_dequeue(mft[callee_id][caller_id].tail,
    ba7a:	9b04      	ldr	r3, [sp, #16]
    ba7c:	fb17 3704 	smlabb	r7, r7, r4, r3
    ba80:	19f3      	adds	r3, r6, r7
		link = memq_peek(mft[callee_id][caller_id].head,
    ba82:	4682      	mov	sl, r0
				memq_dequeue(mft[callee_id][caller_id].tail,
    ba84:	9303      	str	r3, [sp, #12]
		while (link) {
    ba86:	f1ba 0f00 	cmp.w	sl, #0
    ba8a:	d119      	bne.n	bac0 <mayfly_run+0xa8>
		if (mft[callee_id][caller_id].disable_req !=
    ba8c:	2230      	movs	r2, #48	; 0x30
    ba8e:	230c      	movs	r3, #12
    ba90:	436a      	muls	r2, r5
    ba92:	fb03 2204 	mla	r2, r3, r4, r2
    ba96:	4432      	add	r2, r6
    ba98:	7a91      	ldrb	r1, [r2, #10]
    ba9a:	7ad0      	ldrb	r0, [r2, #11]
    ba9c:	4288      	cmp	r0, r1
			mft[callee_id][caller_id].disable_ack =
    ba9e:	bf1e      	ittt	ne
    baa0:	72d1      	strbne	r1, [r2, #11]
			disable = 1;
    baa2:	2201      	movne	r2, #1
    baa4:	9201      	strne	r2, [sp, #4]
		if (mft[callee_id][caller_id].enable_req !=
    baa6:	2230      	movs	r2, #48	; 0x30
    baa8:	436a      	muls	r2, r5
    baaa:	fb03 2304 	mla	r3, r3, r4, r2
    baae:	4433      	add	r3, r6
    bab0:	7a1a      	ldrb	r2, [r3, #8]
    bab2:	7a59      	ldrb	r1, [r3, #9]
    bab4:	4291      	cmp	r1, r2
			mft[callee_id][caller_id].enable_ack =
    bab6:	bf1c      	itt	ne
    bab8:	725a      	strbne	r2, [r3, #9]
			enable = 1;
    baba:	f04f 0801 	movne.w	r8, #1
    babe:	e7b9      	b.n	ba34 <mayfly_run+0x1c>
			req = m->_req;
    bac0:	9b07      	ldr	r3, [sp, #28]
    bac2:	781f      	ldrb	r7, [r3, #0]
			state = (req - m->_ack) & 0x03;
    bac4:	785a      	ldrb	r2, [r3, #1]
    bac6:	1abf      	subs	r7, r7, r2
    bac8:	f007 0703 	and.w	r7, r7, #3
			if (state == 1) {
    bacc:	2f01      	cmp	r7, #1
    bace:	d104      	bne.n	bada <mayfly_run+0xc2>
				m->_ack--;
    bad0:	3a01      	subs	r2, #1
    bad2:	705a      	strb	r2, [r3, #1]
				m->fp(m->param);
    bad4:	6898      	ldr	r0, [r3, #8]
    bad6:	68da      	ldr	r2, [r3, #12]
    bad8:	4790      	blx	r2
			req = m->_req;
    bada:	9a07      	ldr	r2, [sp, #28]
    badc:	7813      	ldrb	r3, [r2, #0]
			if (((req - m->_ack) & 0x03) != 1) {
    bade:	7852      	ldrb	r2, [r2, #1]
			req = m->_req;
    bae0:	b2db      	uxtb	r3, r3
			if (((req - m->_ack) & 0x03) != 1) {
    bae2:	1a9a      	subs	r2, r3, r2
    bae4:	f002 0203 	and.w	r2, r2, #3
    bae8:	2a01      	cmp	r2, #1
    baea:	9305      	str	r3, [sp, #20]
    baec:	d00d      	beq.n	bb0a <mayfly_run+0xf2>
				memq_dequeue(mft[callee_id][caller_id].tail,
    baee:	9b02      	ldr	r3, [sp, #8]
    baf0:	9903      	ldr	r1, [sp, #12]
    baf2:	fb09 3005 	mla	r0, r9, r5, r3
    baf6:	4430      	add	r0, r6
    baf8:	2200      	movs	r2, #0
    bafa:	6840      	ldr	r0, [r0, #4]
    bafc:	f7ff fedc 	bl	b8b8 <memq_dequeue>
				m->_link = link;
    bb00:	9a07      	ldr	r2, [sp, #28]
				m->_ack = req;
    bb02:	9b05      	ldr	r3, [sp, #20]
				m->_link = link;
    bb04:	f8c2 a004 	str.w	sl, [r2, #4]
				m->_ack = req;
    bb08:	7053      	strb	r3, [r2, #1]
			link = memq_peek(mft[callee_id][caller_id].head,
    bb0a:	9b02      	ldr	r3, [sp, #8]
    bb0c:	fb09 3305 	mla	r3, r9, r5, r3
    bb10:	18f1      	adds	r1, r6, r3
    bb12:	465a      	mov	r2, fp
    bb14:	6849      	ldr	r1, [r1, #4]
    bb16:	58f0      	ldr	r0, [r6, r3]
    bb18:	f7ff fec6 	bl	b8a8 <memq_peek>
			if (state == 1) {
    bb1c:	2f01      	cmp	r7, #1
			link = memq_peek(mft[callee_id][caller_id].head,
    bb1e:	4682      	mov	sl, r0
			if (state == 1) {
    bb20:	d1b1      	bne.n	ba86 <mayfly_run+0x6e>
				if (caller_id || link) {
    bb22:	b90c      	cbnz	r4, bb28 <mayfly_run+0x110>
    bb24:	2800      	cmp	r0, #0
    bb26:	d0b1      	beq.n	ba8c <mayfly_run+0x74>
					mayfly_pend(callee_id, callee_id);
    bb28:	4629      	mov	r1, r5
    bb2a:	4628      	mov	r0, r5
    bb2c:	f00d fa6c 	bl	19008 <mayfly_pend>
	}
}
    bb30:	b009      	add	sp, #36	; 0x24
    bb32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bb36:	bf00      	nop
    bb38:	20000a28 	.word	0x20000a28

0000bb3c <util_ones_count_get>:

#include <zephyr/types.h>
#include "util.h"

u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
    bb3c:	b510      	push	{r4, lr}
    bb3e:	1e42      	subs	r2, r0, #1
	u8_t one_count = 0;
    bb40:	2000      	movs	r0, #0

	while (octets_len--) {
    bb42:	3901      	subs	r1, #1
    bb44:	b2c9      	uxtb	r1, r1
    bb46:	29ff      	cmp	r1, #255	; 0xff
    bb48:	d100      	bne.n	bb4c <util_ones_count_get+0x10>
		}
		octets++;
	}

	return one_count;
}
    bb4a:	bd10      	pop	{r4, pc}
		bite = *octets;
    bb4c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
		while (bite) {
    bb50:	2b00      	cmp	r3, #0
    bb52:	d0f6      	beq.n	bb42 <util_ones_count_get+0x6>
			bite &= (bite - 1);
    bb54:	1e5c      	subs	r4, r3, #1
			one_count++;
    bb56:	3001      	adds	r0, #1
			bite &= (bite - 1);
    bb58:	4023      	ands	r3, r4
			one_count++;
    bb5a:	b2c0      	uxtb	r0, r0
    bb5c:	e7f8      	b.n	bb50 <util_ones_count_get+0x14>

0000bb5e <ticker_dequeue>:

	return id;
}

static u32_t ticker_dequeue(struct ticker_instance *instance, u8_t id)
{
    bb5e:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t current;
	u32_t total;

	/* find the ticker's position in ticker list */
	node = &instance->node[0];
	previous = instance->ticker_id_head;
    bb60:	7f43      	ldrb	r3, [r0, #29]
	node = &instance->node[0];
    bb62:	6805      	ldr	r5, [r0, #0]
	current = previous;
    bb64:	461a      	mov	r2, r3
	total = 0;
    bb66:	2400      	movs	r4, #0
	ticker_current = 0;
	while (current != TICKER_NULL) {
    bb68:	2aff      	cmp	r2, #255	; 0xff
    bb6a:	d101      	bne.n	bb70 <ticker_dequeue+0x12>
		current = ticker_current->next;
	}

	/* ticker not in active list */
	if (current == TICKER_NULL) {
		return 0;
    bb6c:	2000      	movs	r0, #0
    bb6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ticker_current = &node[current];
    bb70:	eb02 0782 	add.w	r7, r2, r2, lsl #2
		if (current == id) {
    bb74:	428a      	cmp	r2, r1
		ticker_current = &node[current];
    bb76:	eb05 06c7 	add.w	r6, r5, r7, lsl #3
    bb7a:	f815 7037 	ldrb.w	r7, [r5, r7, lsl #3]
		if (current == id) {
    bb7e:	d004      	beq.n	bb8a <ticker_dequeue+0x2c>
		total += ticker_current->ticks_to_expire;
    bb80:	68b3      	ldr	r3, [r6, #8]
    bb82:	441c      	add	r4, r3
		current = ticker_current->next;
    bb84:	4613      	mov	r3, r2
    bb86:	463a      	mov	r2, r7
    bb88:	e7ee      	b.n	bb68 <ticker_dequeue+0xa>
	}

	/* ticker is the first in the list */
	if (previous == current) {
    bb8a:	4293      	cmp	r3, r2
    bb8c:	d100      	bne.n	bb90 <ticker_dequeue+0x32>
		instance->ticker_id_head = ticker_current->next;
    bb8e:	7747      	strb	r7, [r0, #29]
	timeout = ticker_current->ticks_to_expire;

	/* link previous ticker with next of this ticker
	 * i.e. removing the ticker from list
	 */
	node[previous].next = ticker_current->next;
    bb90:	b21b      	sxth	r3, r3
    bb92:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    bb96:	7832      	ldrb	r2, [r6, #0]
	timeout = ticker_current->ticks_to_expire;
    bb98:	68b0      	ldr	r0, [r6, #8]
	node[previous].next = ticker_current->next;
    bb9a:	f805 2033 	strb.w	r2, [r5, r3, lsl #3]

	/* if this is not the last ticker, increment the
	 * next ticker by this ticker timeout
	 */
	if (ticker_current->next != TICKER_NULL) {
    bb9e:	7833      	ldrb	r3, [r6, #0]
    bba0:	2bff      	cmp	r3, #255	; 0xff
    bba2:	d006      	beq.n	bbb2 <ticker_dequeue+0x54>
		node[ticker_current->next].ticks_to_expire += timeout;
    bba4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    bba8:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    bbac:	689a      	ldr	r2, [r3, #8]
    bbae:	4402      	add	r2, r0
    bbb0:	609a      	str	r2, [r3, #8]
	}

	return (total + timeout);
    bbb2:	4420      	add	r0, r4
    bbb4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000bbb6 <ticks_to_expire_prep>:
			   instance);
}

static void ticks_to_expire_prep(struct ticker_node *ticker,
				 u32_t ticks_current, u32_t ticks_at_start)
{
    bbb6:	b530      	push	{r4, r5, lr}
	u32_t ticks_to_expire = ticker->ticks_to_expire;
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    bbb8:	1a55      	subs	r5, r2, r1
    bbba:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
	u32_t ticks_to_expire = ticker->ticks_to_expire;
    bbbe:	6883      	ldr	r3, [r0, #8]
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
    bbc0:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    bbc2:	d109      	bne.n	bbd8 <ticks_to_expire_prep+0x22>
	return cntr_cnt_get();
}

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    bbc4:	f025 427f 	bic.w	r2, r5, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    bbc8:	441a      	add	r2, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
    bbca:	42a2      	cmp	r2, r4
    bbcc:	d90e      	bls.n	bbec <ticks_to_expire_prep+0x36>
		ticks_to_expire -= ticks_to_expire_minus;
    bbce:	1b12      	subs	r2, r2, r4
		ticks_to_expire_minus = 0;
    bbd0:	2400      	movs	r4, #0
	ticker->ticks_to_expire = ticks_to_expire;
    bbd2:	6082      	str	r2, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    bbd4:	6144      	str	r4, [r0, #20]
    bbd6:	bd30      	pop	{r4, r5, pc}
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    bbd8:	1a8a      	subs	r2, r1, r2
    bbda:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    bbde:	4293      	cmp	r3, r2
    bbe0:	d901      	bls.n	bbe6 <ticks_to_expire_prep+0x30>
			ticks_to_expire -= delta_current_start;
    bbe2:	1a9a      	subs	r2, r3, r2
    bbe4:	e7f1      	b.n	bbca <ticks_to_expire_prep+0x14>
    bbe6:	4422      	add	r2, r4
			ticks_to_expire_minus +=
    bbe8:	1ad4      	subs	r4, r2, r3
			ticks_to_expire = 0;
    bbea:	2200      	movs	r2, #0
		ticks_to_expire_minus -= ticks_to_expire;
    bbec:	1aa4      	subs	r4, r4, r2
		ticks_to_expire = 0;
    bbee:	2200      	movs	r2, #0
    bbf0:	e7ef      	b.n	bbd2 <ticks_to_expire_prep+0x1c>

0000bbf2 <ticker_job_op_cb>:
{
    bbf2:	4603      	mov	r3, r0
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    bbf4:	2200      	movs	r2, #0
    bbf6:	701a      	strb	r2, [r3, #0]
	if (user_op->fp_op_func) {
    bbf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	user_op->status = status;
    bbfa:	6259      	str	r1, [r3, #36]	; 0x24
{
    bbfc:	4608      	mov	r0, r1
	if (user_op->fp_op_func) {
    bbfe:	b10a      	cbz	r2, bc04 <ticker_job_op_cb+0x12>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    bc00:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    bc02:	4710      	bx	r2
    bc04:	4770      	bx	lr

0000bc06 <ticker_worker>:
{
    bc06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (instance->job_guard) {
    bc0a:	7f85      	ldrb	r5, [r0, #30]
	instance->worker_trigger = 1;
    bc0c:	2301      	movs	r3, #1
{
    bc0e:	4604      	mov	r4, r0
	instance->worker_trigger = 1;
    bc10:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
    bc12:	2d00      	cmp	r5, #0
    bc14:	d14c      	bne.n	bcb0 <ticker_worker+0xaa>
	if (instance->ticker_id_head == TICKER_NULL) {
    bc16:	7f43      	ldrb	r3, [r0, #29]
    bc18:	2bff      	cmp	r3, #255	; 0xff
    bc1a:	d102      	bne.n	bc22 <ticker_worker+0x1c>
		instance->worker_trigger = 0;
    bc1c:	77c5      	strb	r5, [r0, #31]
		return;
    bc1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
    bc22:	f00c fc25 	bl	18470 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    bc26:	6967      	ldr	r7, [r4, #20]
	ticker_id_head = instance->ticker_id_head;
    bc28:	7f66      	ldrb	r6, [r4, #29]
	node = &instance->node[0];
    bc2a:	f8d4 8000 	ldr.w	r8, [r4]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    bc2e:	1bc7      	subs	r7, r0, r7
    bc30:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
	while (ticker_id_head != TICKER_NULL) {
    bc34:	2eff      	cmp	r6, #255	; 0xff
    bc36:	d006      	beq.n	bc46 <ticker_worker+0x40>
		ticker = &node[ticker_id_head];
    bc38:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    bc3c:	eb08 01c6 	add.w	r1, r8, r6, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    bc40:	688b      	ldr	r3, [r1, #8]
		if (ticks_elapsed < ticks_to_expire) {
    bc42:	429f      	cmp	r7, r3
    bc44:	d218      	bcs.n	bc78 <ticker_worker+0x72>
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
    bc46:	7aa2      	ldrb	r2, [r4, #10]
    bc48:	7ae3      	ldrb	r3, [r4, #11]
    bc4a:	4293      	cmp	r3, r2
    bc4c:	d105      	bne.n	bc5a <ticker_worker+0x54>
		last = instance->ticks_elapsed_last + 1;
    bc4e:	3301      	adds	r3, #1
    bc50:	b2db      	uxtb	r3, r3
			last = 0;
    bc52:	2b02      	cmp	r3, #2
    bc54:	bf08      	it	eq
    bc56:	2300      	moveq	r3, #0
		instance->ticks_elapsed_last = last;
    bc58:	72e3      	strb	r3, [r4, #11]
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    bc5a:	7ae3      	ldrb	r3, [r4, #11]
    bc5c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    bc60:	2201      	movs	r2, #1
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    bc62:	60dd      	str	r5, [r3, #12]
	instance->worker_trigger = 0;
    bc64:	2300      	movs	r3, #0
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    bc66:	6a65      	ldr	r5, [r4, #36]	; 0x24
	instance->worker_trigger = 0;
    bc68:	77e3      	strb	r3, [r4, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    bc6a:	46ac      	mov	ip, r5
    bc6c:	4623      	mov	r3, r4
    bc6e:	2104      	movs	r1, #4
    bc70:	2003      	movs	r0, #3
}
    bc72:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    bc76:	4760      	bx	ip
		ticks_elapsed -= ticks_to_expire;
    bc78:	1aff      	subs	r7, r7, r3
		ticks_expired += ticks_to_expire;
    bc7a:	441d      	add	r5, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    bc7c:	788a      	ldrb	r2, [r1, #2]
    bc7e:	784b      	ldrb	r3, [r1, #1]
		ticker_id_head = ticker->next;
    bc80:	f818 6036 	ldrb.w	r6, [r8, r6, lsl #3]
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    bc84:	1a9b      	subs	r3, r3, r2
    bc86:	b2db      	uxtb	r3, r3
    bc88:	2b01      	cmp	r3, #1
    bc8a:	d1d3      	bne.n	bc34 <ticker_worker+0x2e>
		if (ticker->timeout_func) {
    bc8c:	f8d1 900c 	ldr.w	r9, [r1, #12]
		ticker->ack--;
    bc90:	3a01      	subs	r2, #1
    bc92:	708a      	strb	r2, [r1, #2]
		if (ticker->timeout_func) {
    bc94:	f1b9 0f00 	cmp.w	r9, #0
    bc98:	d0cc      	beq.n	bc34 <ticker_worker+0x2e>
					   ticks_expired -
    bc9a:	6948      	ldr	r0, [r1, #20]
    bc9c:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
    bc9e:	8bca      	ldrh	r2, [r1, #30]
					   ticks_expired -
    bca0:	1a28      	subs	r0, r5, r0
    bca2:	4418      	add	r0, r3
			ticker->timeout_func(ticks_at_expire,
    bca4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    bca8:	690b      	ldr	r3, [r1, #16]
    bcaa:	6a49      	ldr	r1, [r1, #36]	; 0x24
    bcac:	47c8      	blx	r9
    bcae:	e7c1      	b.n	bc34 <ticker_worker+0x2e>
    bcb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000bcb4 <ticker_job>:
{
    bcb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->worker_trigger) {
    bcb8:	7fc2      	ldrb	r2, [r0, #31]
{
    bcba:	b095      	sub	sp, #84	; 0x54
    bcbc:	4683      	mov	fp, r0
	if (instance->worker_trigger) {
    bcbe:	2a00      	cmp	r2, #0
    bcc0:	f040 83be 	bne.w	c440 <ticker_job+0x78c>
	ticks_previous = instance->ticks_current;
    bcc4:	6943      	ldr	r3, [r0, #20]
    bcc6:	9307      	str	r3, [sp, #28]
	instance->job_guard = 1;
    bcc8:	2101      	movs	r1, #1
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    bcca:	7a83      	ldrb	r3, [r0, #10]
	instance->job_guard = 1;
    bccc:	7781      	strb	r1, [r0, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    bcce:	7ac0      	ldrb	r0, [r0, #11]
    bcd0:	4298      	cmp	r0, r3
    bcd2:	f000 808f 	beq.w	bdf4 <ticker_job+0x140>
		first = instance->ticks_elapsed_first + 1;
    bcd6:	440b      	add	r3, r1
    bcd8:	b2db      	uxtb	r3, r3
			first = 0;
    bcda:	2b02      	cmp	r3, #2
    bcdc:	bf08      	it	eq
    bcde:	2300      	moveq	r3, #0
		instance->ticks_elapsed_first = first;
    bce0:	f88b 300a 	strb.w	r3, [fp, #10]
		ticks_elapsed =
    bce4:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
		flag_elapsed = 1;
    bce8:	9103      	str	r1, [sp, #12]
		ticks_elapsed =
    bcea:	f8d3 800c 	ldr.w	r8, [r3, #12]
		instance->ticks_current += ticks_elapsed;
    bcee:	9b07      	ldr	r3, [sp, #28]
    bcf0:	4443      	add	r3, r8
		instance->ticks_current &= 0x00FFFFFF;
    bcf2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    bcf6:	f8cb 3014 	str.w	r3, [fp, #20]
	ticker_id_old_head = instance->ticker_id_head;
    bcfa:	f89b 301d 	ldrb.w	r3, [fp, #29]
    bcfe:	9305      	str	r3, [sp, #20]
	node = &instance->node[0];
    bd00:	f8db 3000 	ldr.w	r3, [fp]
    bd04:	9306      	str	r3, [sp, #24]
	users = &instance->user[0];
    bd06:	f8db 3004 	ldr.w	r3, [fp, #4]
    bd0a:	930d      	str	r3, [sp, #52]	; 0x34
    bd0c:	f89b 3009 	ldrb.w	r3, [fp, #9]
    bd10:	3b01      	subs	r3, #1
    bd12:	b2db      	uxtb	r3, r3
    bd14:	9304      	str	r3, [sp, #16]
	pending = 0;
    bd16:	2300      	movs	r3, #0
    bd18:	9309      	str	r3, [sp, #36]	; 0x24
	insert_head = TICKER_NULL;
    bd1a:	f04f 0aff 	mov.w	sl, #255	; 0xff
	while (count_user--) {
    bd1e:	9b04      	ldr	r3, [sp, #16]
    bd20:	2bff      	cmp	r3, #255	; 0xff
    bd22:	d16a      	bne.n	bdfa <ticker_job+0x146>
	if (instance->ticker_id_head != ticker_id_old_head) {
    bd24:	f89b 301d 	ldrb.w	r3, [fp, #29]
	flag_compare_update = 0;
    bd28:	9a05      	ldr	r2, [sp, #20]
    bd2a:	1a9b      	subs	r3, r3, r2
    bd2c:	bf18      	it	ne
    bd2e:	2301      	movne	r3, #1
    bd30:	9304      	str	r3, [sp, #16]
	if (flag_elapsed) {
    bd32:	9b03      	ldr	r3, [sp, #12]
    bd34:	b1e3      	cbz	r3, bd70 <ticker_job+0xbc>
	node = &instance->node[0];
    bd36:	f8db 3000 	ldr.w	r3, [fp]
    bd3a:	9306      	str	r3, [sp, #24]
	ticks_expired = 0;
    bd3c:	f04f 0900 	mov.w	r9, #0
	while (instance->ticker_id_head != TICKER_NULL) {
    bd40:	f89b 601d 	ldrb.w	r6, [fp, #29]
    bd44:	2eff      	cmp	r6, #255	; 0xff
    bd46:	d00c      	beq.n	bd62 <ticker_job+0xae>
		ticker = &node[id_expired];
    bd48:	b237      	sxth	r7, r6
    bd4a:	9b06      	ldr	r3, [sp, #24]
    bd4c:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    bd50:	eb03 04c7 	add.w	r4, r3, r7, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    bd54:	68a5      	ldr	r5, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    bd56:	4545      	cmp	r5, r8
    bd58:	f240 8136 	bls.w	bfc8 <ticker_job+0x314>
			ticker->ticks_to_expire -= ticks_elapsed;
    bd5c:	eba5 0508 	sub.w	r5, r5, r8
    bd60:	60a5      	str	r5, [r4, #8]
			flag_compare_update = 1;
    bd62:	9b04      	ldr	r3, [sp, #16]
    bd64:	9a03      	ldr	r2, [sp, #12]
    bd66:	9905      	ldr	r1, [sp, #20]
    bd68:	42b1      	cmp	r1, r6
    bd6a:	bf18      	it	ne
    bd6c:	4613      	movne	r3, r2
    bd6e:	9304      	str	r3, [sp, #16]
	node = &instance->node[0];
    bd70:	f8db 3000 	ldr.w	r3, [fp]
    bd74:	930a      	str	r3, [sp, #40]	; 0x28
	users = &instance->user[0];
    bd76:	f8db 3004 	ldr.w	r3, [fp, #4]
    bd7a:	9312      	str	r3, [sp, #72]	; 0x48
    bd7c:	f89b 3009 	ldrb.w	r3, [fp, #9]
    bd80:	3b01      	subs	r3, #1
    bd82:	b2db      	uxtb	r3, r3
    bd84:	9303      	str	r3, [sp, #12]
	while (count_user--) {
    bd86:	9b03      	ldr	r3, [sp, #12]
    bd88:	2bff      	cmp	r3, #255	; 0xff
    bd8a:	f040 8170 	bne.w	c06e <ticker_job+0x3ba>
	if (instance->ticker_id_head != ticker_id_old_head) {
    bd8e:	f89b 301d 	ldrb.w	r3, [fp, #29]
    bd92:	9a05      	ldr	r2, [sp, #20]
    bd94:	4293      	cmp	r3, r2
	if (!pending) {
    bd96:	9b09      	ldr	r3, [sp, #36]	; 0x24
	if (instance->ticker_id_head != ticker_id_old_head) {
    bd98:	f040 8349 	bne.w	c42e <ticker_job+0x77a>
	if (!pending) {
    bd9c:	b95b      	cbnz	r3, bdb6 <ticker_job+0x102>
    bd9e:	f89b 4009 	ldrb.w	r4, [fp, #9]
	users = &instance->user[0];
    bda2:	f8db 3004 	ldr.w	r3, [fp, #4]
    bda6:	9303      	str	r3, [sp, #12]
    bda8:	3c01      	subs	r4, #1
    bdaa:	b2e4      	uxtb	r4, r4
		uop->status = TICKER_STATUS_SUCCESS;
    bdac:	f04f 0800 	mov.w	r8, #0
	while (count_user--) {
    bdb0:	2cff      	cmp	r4, #255	; 0xff
    bdb2:	f040 82a0 	bne.w	c2f6 <ticker_job+0x642>
	instance->job_guard = 0;
    bdb6:	2300      	movs	r3, #0
    bdb8:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
    bdbc:	9b04      	ldr	r3, [sp, #16]
    bdbe:	b14b      	cbz	r3, bdd4 <ticker_job+0x120>
	if (instance->ticker_id_head == TICKER_NULL) {
    bdc0:	f89b 301d 	ldrb.w	r3, [fp, #29]
    bdc4:	2bff      	cmp	r3, #255	; 0xff
    bdc6:	f040 82e9 	bne.w	c39c <ticker_job+0x6e8>
		if (cntr_stop() == 0) {
    bdca:	f00c fb23 	bl	18414 <cntr_stop>
    bdce:	b908      	cbnz	r0, bdd4 <ticker_job+0x120>
			instance->ticks_slot_previous = 0;
    bdd0:	f8cb 0018 	str.w	r0, [fp, #24]
	if (instance->worker_trigger) {
    bdd4:	f89b 301f 	ldrb.w	r3, [fp, #31]
    bdd8:	2b00      	cmp	r3, #0
    bdda:	f000 8331 	beq.w	c440 <ticker_job+0x78c>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    bdde:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    bde2:	465b      	mov	r3, fp
    bde4:	2201      	movs	r2, #1
    bde6:	2103      	movs	r1, #3
    bde8:	2004      	movs	r0, #4
    bdea:	46a4      	mov	ip, r4
}
    bdec:	b015      	add	sp, #84	; 0x54
    bdee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    bdf2:	4760      	bx	ip
		flag_elapsed = 0;
    bdf4:	9203      	str	r2, [sp, #12]
		ticks_elapsed = 0;
    bdf6:	4690      	mov	r8, r2
    bdf8:	e77f      	b.n	bcfa <ticker_job+0x46>
		user = &users[count_user];
    bdfa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    bdfc:	9a04      	ldr	r2, [sp, #16]
    bdfe:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
		user_ops = &user->user_op[0];
    be02:	687b      	ldr	r3, [r7, #4]
    be04:	9308      	str	r3, [sp, #32]
		while (user->middle != user->last) {
    be06:	78f9      	ldrb	r1, [r7, #3]
    be08:	78be      	ldrb	r6, [r7, #2]
    be0a:	428e      	cmp	r6, r1
    be0c:	f000 80d7 	beq.w	bfbe <ticker_job+0x30a>
			user_op = &user_ops[user->middle];
    be10:	9b08      	ldr	r3, [sp, #32]
			if (middle == user->count_user_op) {
    be12:	7838      	ldrb	r0, [r7, #0]
			user_op = &user_ops[user->middle];
    be14:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    be18:	0112      	lsls	r2, r2, #4
    be1a:	189d      	adds	r5, r3, r2
			middle = user->middle + 1;
    be1c:	1c73      	adds	r3, r6, #1
    be1e:	b2db      	uxtb	r3, r3
				middle = 0;
    be20:	4298      	cmp	r0, r3
    be22:	bf08      	it	eq
    be24:	2300      	moveq	r3, #0
			user->middle = middle;
    be26:	70bb      	strb	r3, [r7, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    be28:	9b08      	ldr	r3, [sp, #32]
    be2a:	5c9a      	ldrb	r2, [r3, r2]
    be2c:	2a03      	cmp	r2, #3
    be2e:	d9eb      	bls.n	be08 <ticker_job+0x154>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    be30:	2a05      	cmp	r2, #5
    be32:	d817      	bhi.n	be64 <ticker_job+0x1b0>
			ticker = &node[user_op->id];
    be34:	7869      	ldrb	r1, [r5, #1]
    be36:	eb01 0381 	add.w	r3, r1, r1, lsl #2
    be3a:	930c      	str	r3, [sp, #48]	; 0x30
    be3c:	980c      	ldr	r0, [sp, #48]	; 0x30
    be3e:	9b06      	ldr	r3, [sp, #24]
    be40:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
			state = (ticker->req - ticker->ack) & 0xff;
    be44:	7863      	ldrb	r3, [r4, #1]
    be46:	78a0      	ldrb	r0, [r4, #2]
    be48:	1a1b      	subs	r3, r3, r0
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    be4a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    be4e:	d009      	beq.n	be64 <ticker_job+0x1b0>
			    (state == 0) ||
    be50:	2a04      	cmp	r2, #4
    be52:	d10c      	bne.n	be6e <ticker_job+0x1ba>
			     (user_op->params.update.ticks_drift_plus == 0) &&
    be54:	686a      	ldr	r2, [r5, #4]
    be56:	b952      	cbnz	r2, be6e <ticker_job+0x1ba>
			     (user_op->params.update.ticks_slot_plus == 0) &&
    be58:	68aa      	ldr	r2, [r5, #8]
    be5a:	b942      	cbnz	r2, be6e <ticker_job+0x1ba>
			     (user_op->params.update.lazy == 0) &&
    be5c:	68ea      	ldr	r2, [r5, #12]
    be5e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    be62:	d104      	bne.n	be6e <ticker_job+0x1ba>
				ticker_job_op_cb(user_op,
    be64:	2101      	movs	r1, #1
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    be66:	4628      	mov	r0, r5
    be68:	f7ff fec3 	bl	bbf2 <ticker_job_op_cb>
    be6c:	e7cb      	b.n	be06 <ticker_job+0x152>
			if (state == 1) {
    be6e:	2b01      	cmp	r3, #1
    be70:	f040 809b 	bne.w	bfaa <ticker_job+0x2f6>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    be74:	4658      	mov	r0, fp
    be76:	f7ff fe72 	bl	bb5e <ticker_dequeue>
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    be7a:	782b      	ldrb	r3, [r5, #0]
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    be7c:	60a0      	str	r0, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    be7e:	2b04      	cmp	r3, #4
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    be80:	4606      	mov	r6, r0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    be82:	f040 8084 	bne.w	bf8e <ticker_job+0x2da>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    be86:	f8db 3014 	ldr.w	r3, [fp, #20]
    be8a:	930a      	str	r3, [sp, #40]	; 0x28
	ticks_now = cntr_cnt_get();
    be8c:	f00c faf0 	bl	18470 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    be90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	ticks_now = cntr_cnt_get();
    be92:	900b      	str	r0, [sp, #44]	; 0x2c
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    be94:	1ac3      	subs	r3, r0, r3
    be96:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    be9a:	4443      	add	r3, r8
	if (ticks_to_expire > ticks_elapsed) {
    be9c:	429e      	cmp	r6, r3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    be9e:	4602      	mov	r2, r0
		ticker->ticks_to_expire_minus += ticks_elapsed -
    bea0:	bf9e      	ittt	ls
    bea2:	6962      	ldrls	r2, [r4, #20]
    bea4:	1b92      	subls	r2, r2, r6
    bea6:	189b      	addls	r3, r3, r2
	if ((ticker->ticks_periodic != 0) &&
    bea8:	6862      	ldr	r2, [r4, #4]
		ticker->ticks_to_expire_minus += ticks_elapsed -
    beaa:	bf96      	itet	ls
    beac:	6163      	strls	r3, [r4, #20]
		ticks_to_expire -= ticks_elapsed;
    beae:	1af3      	subhi	r3, r6, r3
		ticks_to_expire = 0;
    beb0:	2300      	movls	r3, #0
	if ((ticker->ticks_periodic != 0) &&
    beb2:	b18a      	cbz	r2, bed8 <ticker_job+0x224>
	    (user_op->params.update.lazy != 0)) {
    beb4:	89a9      	ldrh	r1, [r5, #12]
	if ((ticker->ticks_periodic != 0) &&
    beb6:	b179      	cbz	r1, bed8 <ticker_job+0x224>
		user_op->params.update.lazy--;
    beb8:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
    bebc:	fa1f fe8e 	uxth.w	lr, lr
    bec0:	f8a5 e00c 	strh.w	lr, [r5, #12]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    bec4:	429a      	cmp	r2, r3
    bec6:	d32b      	bcc.n	bf20 <ticker_job+0x26c>
		ticker->remainder_current -= 30517578UL;
    bec8:	f8df 9324 	ldr.w	r9, [pc, #804]	; c1f0 <ticker_job+0x53c>
		while (ticker->lazy_current < user_op->params.update.lazy) {
    becc:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    bed0:	45e6      	cmp	lr, ip
    bed2:	d847      	bhi.n	bf64 <ticker_job+0x2b0>
		ticker->lazy_periodic = user_op->params.update.lazy;
    bed4:	f8a4 e01c 	strh.w	lr, [r4, #28]
				  user_op->params.update.ticks_drift_plus;
    bed8:	88aa      	ldrh	r2, [r5, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    beda:	990a      	ldr	r1, [sp, #40]	; 0x28
	ticker->ticks_to_expire = ticks_to_expire +
    bedc:	4413      	add	r3, r2
    bede:	60a3      	str	r3, [r4, #8]
				user_op->params.update.ticks_drift_minus;
    bee0:	88ea      	ldrh	r2, [r5, #6]
	ticker->ticks_to_expire_minus +=
    bee2:	6963      	ldr	r3, [r4, #20]
    bee4:	4413      	add	r3, r2
    bee6:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    bee8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    beea:	4620      	mov	r0, r4
    beec:	f7ff fe63 	bl	bbb6 <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    bef0:	69a2      	ldr	r2, [r4, #24]
    bef2:	892b      	ldrh	r3, [r5, #8]
    bef4:	4413      	add	r3, r2
    bef6:	61a3      	str	r3, [r4, #24]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    bef8:	896a      	ldrh	r2, [r5, #10]
    befa:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
    befc:	bf8c      	ite	hi
    befe:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0;
    bf00:	2300      	movls	r3, #0
    bf02:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0) {
    bf04:	7bab      	ldrb	r3, [r5, #14]
    bf06:	b103      	cbz	r3, bf0a <ticker_job+0x256>
		ticker->force = user_op->params.update.force;
    bf08:	70e3      	strb	r3, [r4, #3]
	ticker->next = *insert_head;
    bf0a:	9b06      	ldr	r3, [sp, #24]
    bf0c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    bf0e:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
		ticker->req++;
    bf12:	7863      	ldrb	r3, [r4, #1]
	*insert_head = user_op->id;
    bf14:	f895 a001 	ldrb.w	sl, [r5, #1]
		ticker->req++;
    bf18:	3301      	adds	r3, #1
    bf1a:	7063      	strb	r3, [r4, #1]
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    bf1c:	2100      	movs	r1, #0
    bf1e:	e7a2      	b.n	be66 <ticker_job+0x1b2>
		       (ticker->lazy_current > user_op->params.update.lazy)) {
    bf20:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    bf24:	45e6      	cmp	lr, ip
    bf26:	d2cf      	bcs.n	bec8 <ticker_job+0x214>
	if ((ticker->remainder_current >= BIT(31)) ||
    bf28:	6a61      	ldr	r1, [r4, #36]	; 0x24
    bf2a:	4eaf      	ldr	r6, [pc, #700]	; (c1e8 <ticker_job+0x534>)
    bf2c:	48af      	ldr	r0, [pc, #700]	; (c1ec <ticker_job+0x538>)
    bf2e:	198e      	adds	r6, r1, r6
    bf30:	4286      	cmp	r6, r0
		ticker->remainder_current += 30517578UL;
    bf32:	bf81      	itttt	hi
    bf34:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
    bf38:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
    bf3c:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
    bf40:	6261      	strhi	r1, [r4, #36]	; 0x24
	ticker->remainder_current -= ticker->remainder_periodic;
    bf42:	6a66      	ldr	r6, [r4, #36]	; 0x24
    bf44:	6a21      	ldr	r1, [r4, #32]
		decrement++;
    bf46:	bf8c      	ite	hi
    bf48:	f04f 0901 	movhi.w	r9, #1
	u8_t decrement = 0;
    bf4c:	f04f 0900 	movls.w	r9, #0
	ticker->remainder_current -= ticker->remainder_periodic;
    bf50:	1a76      	subs	r6, r6, r1
			ticks_to_expire -= ticker->ticks_periodic +
    bf52:	4491      	add	r9, r2
			ticker->lazy_current--;
    bf54:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
	ticker->remainder_current -= ticker->remainder_periodic;
    bf58:	6266      	str	r6, [r4, #36]	; 0x24
			ticks_to_expire -= ticker->ticks_periodic +
    bf5a:	eba3 0309 	sub.w	r3, r3, r9
			ticker->lazy_current--;
    bf5e:	f8a4 c01e 	strh.w	ip, [r4, #30]
    bf62:	e7af      	b.n	bec4 <ticker_job+0x210>
	ticker->remainder_current += ticker->remainder_periodic;
    bf64:	6a66      	ldr	r6, [r4, #36]	; 0x24
    bf66:	6a21      	ldr	r1, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    bf68:	48a0      	ldr	r0, [pc, #640]	; (c1ec <ticker_job+0x538>)
	ticker->remainder_current += ticker->remainder_periodic;
    bf6a:	440e      	add	r6, r1
	if ((ticker->remainder_current < BIT(31)) &&
    bf6c:	499e      	ldr	r1, [pc, #632]	; (c1e8 <ticker_job+0x534>)
    bf6e:	1871      	adds	r1, r6, r1
    bf70:	4281      	cmp	r1, r0
	return 0;
    bf72:	bf8e      	itee	hi
    bf74:	2100      	movhi	r1, #0
		return 1;
    bf76:	2101      	movls	r1, #1
		ticker->remainder_current -= 30517578UL;
    bf78:	444e      	addls	r6, r9
			ticks_to_expire += ticker->ticks_periodic +
    bf7a:	4411      	add	r1, r2
			ticker->lazy_current++;
    bf7c:	f10c 0c01 	add.w	ip, ip, #1
	ticker->remainder_current += ticker->remainder_periodic;
    bf80:	bf8c      	ite	hi
    bf82:	6266      	strhi	r6, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
    bf84:	6266      	strls	r6, [r4, #36]	; 0x24
			ticks_to_expire += ticker->ticks_periodic +
    bf86:	440b      	add	r3, r1
			ticker->lazy_current++;
    bf88:	f8a4 c01e 	strh.w	ip, [r4, #30]
    bf8c:	e79e      	b.n	becc <ticker_job+0x218>
		ticker->req = ticker->ack;
    bf8e:	78a3      	ldrb	r3, [r4, #2]
    bf90:	7063      	strb	r3, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
    bf92:	786b      	ldrb	r3, [r5, #1]
    bf94:	f89b 201c 	ldrb.w	r2, [fp, #28]
    bf98:	429a      	cmp	r2, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    bf9a:	bf01      	itttt	eq
    bf9c:	23ff      	moveq	r3, #255	; 0xff
    bf9e:	f88b 301c 	strbeq.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
    bfa2:	2300      	moveq	r3, #0
    bfa4:	f8cb 3018 	streq.w	r3, [fp, #24]
    bfa8:	e7b8      	b.n	bf1c <ticker_job+0x268>
				instance->sched_cb(TICKER_CALL_ID_JOB,
    bfaa:	2104      	movs	r1, #4
    bfac:	465b      	mov	r3, fp
    bfae:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    bfb2:	2201      	movs	r2, #1
    bfb4:	4608      	mov	r0, r1
    bfb6:	47a0      	blx	r4
				pending = 1;
    bfb8:	2301      	movs	r3, #1
				user->middle = prev;
    bfba:	70be      	strb	r6, [r7, #2]
				pending = 1;
    bfbc:	9309      	str	r3, [sp, #36]	; 0x24
    bfbe:	9b04      	ldr	r3, [sp, #16]
    bfc0:	3b01      	subs	r3, #1
    bfc2:	b2db      	uxtb	r3, r3
    bfc4:	9304      	str	r3, [sp, #16]
    bfc6:	e6aa      	b.n	bd1e <ticker_job+0x6a>
		if (instance->ticks_slot_previous > ticks_to_expire) {
    bfc8:	f8db 3018 	ldr.w	r3, [fp, #24]
    bfcc:	429d      	cmp	r5, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    bfce:	bf29      	itett	cs
    bfd0:	23ff      	movcs	r3, #255	; 0xff
			instance->ticks_slot_previous -= ticks_to_expire;
    bfd2:	1b5b      	subcc	r3, r3, r5
			instance->ticker_id_slot_previous = TICKER_NULL;
    bfd4:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
    bfd8:	2300      	movcs	r3, #0
    bfda:	f8cb 3018 	str.w	r3, [fp, #24]
		if (ticker->ticks_slot != 0) {
    bfde:	69a3      	ldr	r3, [r4, #24]
		ticks_expired += ticks_to_expire;
    bfe0:	44a9      	add	r9, r5
		if (ticker->ticks_slot != 0) {
    bfe2:	b11b      	cbz	r3, bfec <ticker_job+0x338>
			instance->ticker_id_slot_previous = id_expired;
    bfe4:	f88b 601c 	strb.w	r6, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
    bfe8:	f8cb 3018 	str.w	r3, [fp, #24]
		ticker->ticks_to_expire = 0;
    bfec:	2200      	movs	r2, #0
		instance->ticker_id_head = ticker->next;
    bfee:	9b06      	ldr	r3, [sp, #24]
		ticker->ticks_to_expire = 0;
    bff0:	60a2      	str	r2, [r4, #8]
		instance->ticker_id_head = ticker->next;
    bff2:	f813 3037 	ldrb.w	r3, [r3, r7, lsl #3]
    bff6:	f88b 301d 	strb.w	r3, [fp, #29]
		if (ticker->ticks_periodic != 0) {
    bffa:	f8d4 e004 	ldr.w	lr, [r4, #4]
    bffe:	f1be 0f00 	cmp.w	lr, #0
    c002:	d030      	beq.n	c066 <ticker_job+0x3b2>
    c004:	8ba0      	ldrh	r0, [r4, #28]
	if ((ticker->remainder_current < BIT(31)) &&
    c006:	f8df c1e4 	ldr.w	ip, [pc, #484]	; c1ec <ticker_job+0x538>
	ticker->remainder_current += ticker->remainder_periodic;
    c00a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    c00c:	6a21      	ldr	r1, [r4, #32]
    c00e:	440b      	add	r3, r1
	if ((ticker->remainder_current < BIT(31)) &&
    c010:	4975      	ldr	r1, [pc, #468]	; (c1e8 <ticker_job+0x534>)
    c012:	1859      	adds	r1, r3, r1
    c014:	4561      	cmp	r1, ip
		ticker->remainder_current -= 30517578UL;
    c016:	bf9f      	itttt	ls
    c018:	f1a3 73e8 	subls.w	r3, r3, #30408704	; 0x1d00000
    c01c:	f5a3 33d4 	subls.w	r3, r3, #108544	; 0x1a800
    c020:	f5a3 73a5 	subls.w	r3, r3, #330	; 0x14a
    c024:	6263      	strls	r3, [r4, #36]	; 0x24
		return 1;
    c026:	bf92      	itee	ls
    c028:	9b03      	ldrls	r3, [sp, #12]
	ticker->remainder_current += ticker->remainder_periodic;
    c02a:	6263      	strhi	r3, [r4, #36]	; 0x24
	return 0;
    c02c:	2300      	movhi	r3, #0
				ticks_to_expire += ticker_remainder_inc(ticker);
    c02e:	4473      	add	r3, lr
			while (count--) {
    c030:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
				ticks_to_expire += ticker_remainder_inc(ticker);
    c034:	441a      	add	r2, r3
			while (count--) {
    c036:	d2e8      	bcs.n	c00a <ticker_job+0x356>
			ticks_to_expire_prep(ticker, instance->ticks_current,
    c038:	9b07      	ldr	r3, [sp, #28]
			ticker->ticks_to_expire = ticks_to_expire;
    c03a:	60a2      	str	r2, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
    c03c:	f8db 1014 	ldr.w	r1, [fp, #20]
    c040:	eb03 0209 	add.w	r2, r3, r9
    c044:	4620      	mov	r0, r4
    c046:	f7ff fdb6 	bl	bbb6 <ticks_to_expire_prep>
			ticker->lazy_current = ticker->lazy_periodic;
    c04a:	8ba3      	ldrh	r3, [r4, #28]
    c04c:	83e3      	strh	r3, [r4, #30]
			ticker->force = 0;
    c04e:	2300      	movs	r3, #0
    c050:	70e3      	strb	r3, [r4, #3]
			ticker->next = *insert_head;
    c052:	9b06      	ldr	r3, [sp, #24]
    c054:	f803 a037 	strb.w	sl, [r3, r7, lsl #3]
			ticker->req++;
    c058:	7863      	ldrb	r3, [r4, #1]
    c05a:	3301      	adds	r3, #1
    c05c:	7063      	strb	r3, [r4, #1]
		ticks_elapsed -= ticks_to_expire;
    c05e:	eba8 0805 	sub.w	r8, r8, r5
    c062:	46b2      	mov	sl, r6
    c064:	e66c      	b.n	bd40 <ticker_job+0x8c>
			ticker->req = ticker->ack;
    c066:	78a3      	ldrb	r3, [r4, #2]
    c068:	7063      	strb	r3, [r4, #1]
    c06a:	4656      	mov	r6, sl
    c06c:	e7f7      	b.n	c05e <ticker_job+0x3aa>
		user = &users[count_user];
    c06e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    c070:	9a03      	ldr	r2, [sp, #12]
    c072:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    c076:	9306      	str	r3, [sp, #24]
		user_ops = (void *)&user->user_op[0];
    c078:	685b      	ldr	r3, [r3, #4]
    c07a:	930c      	str	r3, [sp, #48]	; 0x30
		user_ops_first = user->first;
    c07c:	9b06      	ldr	r3, [sp, #24]
    c07e:	f893 9001 	ldrb.w	r9, [r3, #1]
		while ((insert_head != TICKER_NULL) ||
    c082:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    c086:	f000 808e 	beq.w	c1a6 <ticker_job+0x4f2>
				ticker = &node[id_insert];
    c08a:	fa0f f38a 	sxth.w	r3, sl
    c08e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    c092:	9a0a      	ldr	r2, [sp, #40]	; 0x28
				insert_head = ticker->next;
    c094:	46d0      	mov	r8, sl
    c096:	f812 a033 	ldrb.w	sl, [r2, r3, lsl #3]
				ticker = &node[id_insert];
    c09a:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
				user_op = NULL;
    c09e:	2500      	movs	r5, #0
	struct ticker_node *node = &instance->node[0];
    c0a0:	f8db 3000 	ldr.w	r3, [fp]
    c0a4:	930d      	str	r3, [sp, #52]	; 0x34
	ticker->next = TICKER_NULL;
    c0a6:	23ff      	movs	r3, #255	; 0xff
	if (ticker->lazy_current > ticker->lazy_periodic) {
    c0a8:	8ba2      	ldrh	r2, [r4, #28]
	ticker->next = TICKER_NULL;
    c0aa:	7023      	strb	r3, [r4, #0]
	if (ticker->lazy_current > ticker->lazy_periodic) {
    c0ac:	8be3      	ldrh	r3, [r4, #30]
    c0ae:	4293      	cmp	r3, r2
		skip = ticker->lazy_current -
    c0b0:	bf86      	itte	hi
    c0b2:	1a9b      	subhi	r3, r3, r2
    c0b4:	b29b      	uxthhi	r3, r3
		skip = 0;
    c0b6:	2300      	movls	r3, #0
    c0b8:	930e      	str	r3, [sp, #56]	; 0x38
	ticker_new = &node[id];
    c0ba:	fa0f f388 	sxth.w	r3, r8
    c0be:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    c0c2:	00db      	lsls	r3, r3, #3
    c0c4:	9313      	str	r3, [sp, #76]	; 0x4c
    c0c6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
	node = &instance->node[0];
    c0c8:	f8db 2000 	ldr.w	r2, [fp]
	ticks_slot_previous = instance->ticks_slot_previous;
    c0cc:	f8db 0018 	ldr.w	r0, [fp, #24]
    c0d0:	9007      	str	r0, [sp, #28]
	ticker_new = &node[id];
    c0d2:	eb02 0e03 	add.w	lr, r2, r3
	collide = ticker_id_slot_previous = TICKER_NULL;
    c0d6:	20ff      	movs	r0, #255	; 0xff
	current = instance->ticker_id_head;
    c0d8:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker_new->ticks_to_expire;
    c0dc:	f8de 1008 	ldr.w	r1, [lr, #8]
	previous = current;
    c0e0:	930b      	str	r3, [sp, #44]	; 0x2c
	collide = ticker_id_slot_previous = TICKER_NULL;
    c0e2:	9008      	str	r0, [sp, #32]
	while ((current != TICKER_NULL) &&
    c0e4:	2bff      	cmp	r3, #255	; 0xff
    c0e6:	d007      	beq.n	c0f8 <ticker_job+0x444>
		 (ticker_current = &node[current])->ticks_to_expire))) {
    c0e8:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
    c0ec:	eb02 06cc 	add.w	r6, r2, ip, lsl #3
		(ticks_to_expire_current =
    c0f0:	68b0      	ldr	r0, [r6, #8]
	while ((current != TICKER_NULL) &&
    c0f2:	4281      	cmp	r1, r0
    c0f4:	f200 80a9 	bhi.w	c24a <ticker_job+0x596>
				     ticks_to_expire + ticker_new->ticks_slot);
    c0f8:	f8de 0018 	ldr.w	r0, [lr, #24]
    c0fc:	900f      	str	r0, [sp, #60]	; 0x3c
	collide = ticker_by_slot_get(&node[0], current,
    c0fe:	eb01 0c00 	add.w	ip, r1, r0
    c102:	461e      	mov	r6, r3
	while (ticker_id_head != TICKER_NULL) {
    c104:	2eff      	cmp	r6, #255	; 0xff
    c106:	f040 80ae 	bne.w	c266 <ticker_job+0x5b2>
	if ((ticker_new->ticks_slot == 0) ||
    c10a:	980f      	ldr	r0, [sp, #60]	; 0x3c
    c10c:	b130      	cbz	r0, c11c <ticker_job+0x468>
    c10e:	9807      	ldr	r0, [sp, #28]
    c110:	4281      	cmp	r1, r0
    c112:	f0c0 80bf 	bcc.w	c294 <ticker_job+0x5e0>
	    ((ticks_slot_previous <= ticks_to_expire) &&
    c116:	2eff      	cmp	r6, #255	; 0xff
    c118:	f040 818e 	bne.w	c438 <ticker_job+0x784>
		if (previous == current) {
    c11c:	980b      	ldr	r0, [sp, #44]	; 0x2c
		ticker_new->ticks_to_expire = ticks_to_expire;
    c11e:	f8ce 1008 	str.w	r1, [lr, #8]
		if (previous == current) {
    c122:	4283      	cmp	r3, r0
			node[previous].next = id;
    c124:	bf18      	it	ne
    c126:	f9bd 002c 	ldrshne.w	r0, [sp, #44]	; 0x2c
		ticker_new->next = current;
    c12a:	f88e 3000 	strb.w	r3, [lr]
			node[previous].next = id;
    c12e:	bf16      	itet	ne
    c130:	eb00 0080 	addne.w	r0, r0, r0, lsl #2
			instance->ticker_id_head = id;
    c134:	f88b 801d 	strbeq.w	r8, [fp, #29]
			node[previous].next = id;
    c138:	f802 8030 	strbne.w	r8, [r2, r0, lsl #3]
		if (current != TICKER_NULL) {
    c13c:	2bff      	cmp	r3, #255	; 0xff
    c13e:	d006      	beq.n	c14e <ticker_job+0x49a>
			node[current].ticks_to_expire -= ticks_to_expire;
    c140:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    c144:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    c148:	689a      	ldr	r2, [r3, #8]
    c14a:	1a51      	subs	r1, r2, r1
    c14c:	6099      	str	r1, [r3, #8]
	ticker->req = ticker->ack + 1;
    c14e:	78a3      	ldrb	r3, [r4, #2]
    c150:	3301      	adds	r3, #1
    c152:	7063      	strb	r3, [r4, #1]
	return TICKER_STATUS_SUCCESS;
    c154:	2100      	movs	r1, #0
			if (user_op) {
    c156:	2d00      	cmp	r5, #0
    c158:	d093      	beq.n	c082 <ticker_job+0x3ce>
				ticker_job_op_cb(user_op, status);
    c15a:	4628      	mov	r0, r5
    c15c:	f7ff fd49 	bl	bbf2 <ticker_job_op_cb>
    c160:	e78f      	b.n	c082 <ticker_job+0x3ce>
				user_op = &user_ops[user_ops_first];
    c162:	eb09 0349 	add.w	r3, r9, r9, lsl #1
    c166:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c168:	011b      	lsls	r3, r3, #4
    c16a:	18d5      	adds	r5, r2, r3
				first = user_ops_first + 1;
    c16c:	f109 0201 	add.w	r2, r9, #1
    c170:	fa5f f982 	uxtb.w	r9, r2
				if (first == user->count_user_op) {
    c174:	9a06      	ldr	r2, [sp, #24]
    c176:	7812      	ldrb	r2, [r2, #0]
					first = 0;
    c178:	454a      	cmp	r2, r9
    c17a:	bf08      	it	eq
    c17c:	f04f 0900 	moveq.w	r9, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    c180:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c182:	5cd3      	ldrb	r3, [r2, r3]
    c184:	2b03      	cmp	r3, #3
    c186:	d10e      	bne.n	c1a6 <ticker_job+0x4f2>
				id_insert = user_op->id;
    c188:	f895 8001 	ldrb.w	r8, [r5, #1]
				ticker = &node[id_insert];
    c18c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c18e:	eb08 0488 	add.w	r4, r8, r8, lsl #2
    c192:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
				if (((ticker->req - ticker->ack) & 0xff) != 0) {
    c196:	7862      	ldrb	r2, [r4, #1]
    c198:	78a3      	ldrb	r3, [r4, #2]
    c19a:	429a      	cmp	r2, r3
    c19c:	d009      	beq.n	c1b2 <ticker_job+0x4fe>
					ticker_job_op_cb(user_op,
    c19e:	2101      	movs	r1, #1
    c1a0:	4628      	mov	r0, r5
    c1a2:	f7ff fd26 	bl	bbf2 <ticker_job_op_cb>
		while ((insert_head != TICKER_NULL) ||
    c1a6:	9b06      	ldr	r3, [sp, #24]
    c1a8:	789b      	ldrb	r3, [r3, #2]
    c1aa:	454b      	cmp	r3, r9
    c1ac:	d1d9      	bne.n	c162 <ticker_job+0x4ae>
    c1ae:	9b03      	ldr	r3, [sp, #12]
    c1b0:	e5e6      	b.n	bd80 <ticker_job+0xcc>
	ticker->ticks_periodic = start->ticks_periodic;
    c1b2:	68eb      	ldr	r3, [r5, #12]
				ticker_job_op_start(ticker, user_op,
    c1b4:	f8db 1014 	ldr.w	r1, [fp, #20]
	ticker->ticks_periodic = start->ticks_periodic;
    c1b8:	6063      	str	r3, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    c1ba:	692b      	ldr	r3, [r5, #16]
    c1bc:	6223      	str	r3, [r4, #32]
	ticker->lazy_periodic = start->lazy;
    c1be:	8aab      	ldrh	r3, [r5, #20]
    c1c0:	83a3      	strh	r3, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
    c1c2:	69ab      	ldr	r3, [r5, #24]
    c1c4:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
    c1c6:	69eb      	ldr	r3, [r5, #28]
    c1c8:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
    c1ca:	6a2b      	ldr	r3, [r5, #32]
    c1cc:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire_minus = 0;
    c1ce:	2600      	movs	r6, #0
	ticker->ticks_to_expire = start->ticks_first;
    c1d0:	68ab      	ldr	r3, [r5, #8]
    c1d2:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0;
    c1d4:	6166      	str	r6, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    c1d6:	686a      	ldr	r2, [r5, #4]
    c1d8:	4620      	mov	r0, r4
    c1da:	f7ff fcec 	bl	bbb6 <ticks_to_expire_prep>
	ticker->force = 1;
    c1de:	2301      	movs	r3, #1
	ticker->remainder_current = 0;
    c1e0:	6266      	str	r6, [r4, #36]	; 0x24
	ticker->lazy_current = 0;
    c1e2:	83e6      	strh	r6, [r4, #30]
	ticker->force = 1;
    c1e4:	70e3      	strb	r3, [r4, #3]
    c1e6:	e75b      	b.n	c0a0 <ticker_job+0x3ec>
    c1e8:	ff172b5a 	.word	0xff172b5a
    c1ec:	7f172b59 	.word	0x7f172b59
    c1f0:	fe2e56b6 	.word	0xfe2e56b6
		if (ticker->ticks_periodic != 0) {
    c1f4:	6860      	ldr	r0, [r4, #4]
    c1f6:	2800      	cmp	r0, #0
    c1f8:	d07b      	beq.n	c2f2 <ticker_job+0x63e>
	ticker->remainder_current += ticker->remainder_periodic;
    c1fa:	6a62      	ldr	r2, [r4, #36]	; 0x24
    c1fc:	6a21      	ldr	r1, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    c1fe:	4b92      	ldr	r3, [pc, #584]	; (c448 <ticker_job+0x794>)
	ticker->remainder_current += ticker->remainder_periodic;
    c200:	440a      	add	r2, r1
	if ((ticker->remainder_current < BIT(31)) &&
    c202:	4992      	ldr	r1, [pc, #584]	; (c44c <ticker_job+0x798>)
    c204:	18d3      	adds	r3, r2, r3
    c206:	428b      	cmp	r3, r1
		ticker->remainder_current -= 30517578UL;
    c208:	bf9c      	itt	ls
    c20a:	f1a2 72e8 	subls.w	r2, r2, #30408704	; 0x1d00000
    c20e:	f5a2 32d4 	subls.w	r2, r2, #108544	; 0x1a800
			ticker->ticks_to_expire += ticker->ticks_periodic +
    c212:	68a3      	ldr	r3, [r4, #8]
	ticker->remainder_current += ticker->remainder_periodic;
    c214:	bf8b      	itete	hi
    c216:	6262      	strhi	r2, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
    c218:	f5a2 72a5 	subls.w	r2, r2, #330	; 0x14a
	return 0;
    c21c:	2200      	movhi	r2, #0
		ticker->remainder_current -= 30517578UL;
    c21e:	6262      	strls	r2, [r4, #36]	; 0x24
			ticker->ticks_to_expire += ticker->ticks_periodic +
    c220:	4403      	add	r3, r0
		return 1;
    c222:	bf98      	it	ls
    c224:	2201      	movls	r2, #1
			ticker->ticks_to_expire += ticker->ticks_periodic +
    c226:	4413      	add	r3, r2
			ticker->lazy_current++;
    c228:	8be2      	ldrh	r2, [r4, #30]
			ticker->ticks_to_expire += ticker->ticks_periodic +
    c22a:	60a3      	str	r3, [r4, #8]
			ticker->lazy_current++;
    c22c:	3201      	adds	r2, #1
    c22e:	83e2      	strh	r2, [r4, #30]
			    ticker->ticks_to_expire_minus) {
    c230:	6962      	ldr	r2, [r4, #20]
			if (ticker->ticks_to_expire >
    c232:	4293      	cmp	r3, r2
    c234:	f04f 0100 	mov.w	r1, #0
				ticker->ticks_to_expire -=
    c238:	bf89      	itett	hi
    c23a:	1a9b      	subhi	r3, r3, r2
				ticker->ticks_to_expire_minus -=
    c23c:	1ad3      	subls	r3, r2, r3
				ticker->ticks_to_expire -=
    c23e:	60a3      	strhi	r3, [r4, #8]
				ticker->ticks_to_expire_minus = 0;
    c240:	6161      	strhi	r1, [r4, #20]
				ticker->ticks_to_expire_minus -=
    c242:	bf9c      	itt	ls
    c244:	6163      	strls	r3, [r4, #20]
				ticker->ticks_to_expire = 0;
    c246:	60a1      	strls	r1, [r4, #8]
    c248:	e73d      	b.n	c0c6 <ticker_job+0x412>
		if (ticker_current->ticks_slot != 0) {
    c24a:	69b6      	ldr	r6, [r6, #24]
		ticks_to_expire -= ticks_to_expire_current;
    c24c:	1a09      	subs	r1, r1, r0
		if (ticker_current->ticks_slot != 0) {
    c24e:	b946      	cbnz	r6, c262 <ticker_job+0x5ae>
			if (ticks_slot_previous > ticks_to_expire_current) {
    c250:	9f07      	ldr	r7, [sp, #28]
    c252:	42b8      	cmp	r0, r7
    c254:	d200      	bcs.n	c258 <ticker_job+0x5a4>
				ticks_slot_previous -= ticks_to_expire_current;
    c256:	1a3e      	subs	r6, r7, r0
		current = ticker_current->next;
    c258:	930b      	str	r3, [sp, #44]	; 0x2c
    c25a:	9607      	str	r6, [sp, #28]
    c25c:	f812 303c 	ldrb.w	r3, [r2, ip, lsl #3]
    c260:	e740      	b.n	c0e4 <ticker_job+0x430>
		if (ticker_current->ticks_slot != 0) {
    c262:	9308      	str	r3, [sp, #32]
    c264:	e7f8      	b.n	c258 <ticker_job+0x5a4>
		ticker = &node[ticker_id_head];
    c266:	b230      	sxth	r0, r6
    c268:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    c26c:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
    c270:	9710      	str	r7, [sp, #64]	; 0x40
		ticks_to_expire = ticker->ticks_to_expire;
    c272:	68bf      	ldr	r7, [r7, #8]
    c274:	9711      	str	r7, [sp, #68]	; 0x44
		if (ticks_slot <= ticks_to_expire) {
    c276:	4567      	cmp	r7, ip
    c278:	d20a      	bcs.n	c290 <ticker_job+0x5dc>
		if (ticker->ticks_slot) {
    c27a:	9f10      	ldr	r7, [sp, #64]	; 0x40
    c27c:	69bf      	ldr	r7, [r7, #24]
    c27e:	2f00      	cmp	r7, #0
    c280:	f47f af43 	bne.w	c10a <ticker_job+0x456>
		ticks_slot -= ticks_to_expire;
    c284:	9e11      	ldr	r6, [sp, #68]	; 0x44
    c286:	ebac 0c06 	sub.w	ip, ip, r6
		ticker_id_head = ticker->next;
    c28a:	f812 6030 	ldrb.w	r6, [r2, r0, lsl #3]
    c28e:	e739      	b.n	c104 <ticker_job+0x450>
			return TICKER_NULL;
    c290:	26ff      	movs	r6, #255	; 0xff
    c292:	e73a      	b.n	c10a <ticker_job+0x456>
	while (id_insert !=
    c294:	9b08      	ldr	r3, [sp, #32]
    c296:	4598      	cmp	r8, r3
    c298:	f43f af59 	beq.w	c14e <ticker_job+0x49a>
		if (id_collide != TICKER_NULL) {
    c29c:	9b08      	ldr	r3, [sp, #32]
    c29e:	2bff      	cmp	r3, #255	; 0xff
    c2a0:	d0a8      	beq.n	c1f4 <ticker_job+0x540>
    c2a2:	461e      	mov	r6, r3
			struct ticker_node *ticker_collide = &node[id_collide];
    c2a4:	b233      	sxth	r3, r6
    c2a6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    c2aa:	9307      	str	r3, [sp, #28]
    c2ac:	9a07      	ldr	r2, [sp, #28]
    c2ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c2b0:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
			if (ticker_collide->lazy_current >
    c2b4:	8bfb      	ldrh	r3, [r7, #30]
			    ticker_collide->lazy_periodic) {
    c2b6:	8bba      	ldrh	r2, [r7, #28]
			if (ticker_collide->lazy_current >
    c2b8:	4293      	cmp	r3, r2
				skip_collide = ticker_collide->lazy_current -
    c2ba:	bf88      	it	hi
    c2bc:	1a9b      	subhi	r3, r3, r2
			if (ticker_collide->ticks_periodic &&
    c2be:	687a      	ldr	r2, [r7, #4]
				skip_collide = ticker_collide->lazy_current -
    c2c0:	bf8c      	ite	hi
    c2c2:	b29b      	uxthhi	r3, r3
				skip_collide = 0;
    c2c4:	2300      	movls	r3, #0
			if (ticker_collide->ticks_periodic &&
    c2c6:	2a00      	cmp	r2, #0
    c2c8:	d094      	beq.n	c1f4 <ticker_job+0x540>
    c2ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    c2cc:	4293      	cmp	r3, r2
    c2ce:	d891      	bhi.n	c1f4 <ticker_job+0x540>
			    skip_collide <= skip &&
    c2d0:	78fa      	ldrb	r2, [r7, #3]
    c2d2:	78e3      	ldrb	r3, [r4, #3]
    c2d4:	429a      	cmp	r2, r3
    c2d6:	d28d      	bcs.n	c1f4 <ticker_job+0x540>
					ticker_dequeue(instance, id_collide);
    c2d8:	4631      	mov	r1, r6
    c2da:	4658      	mov	r0, fp
    c2dc:	f7ff fc3f 	bl	bb5e <ticker_dequeue>
				ticker_collide->req = ticker_collide->ack;
    c2e0:	78bb      	ldrb	r3, [r7, #2]
    c2e2:	707b      	strb	r3, [r7, #1]
				ticker_collide->next = *insert_head;
    c2e4:	9a07      	ldr	r2, [sp, #28]
    c2e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
				ticker_collide->ticks_to_expire =
    c2e8:	60b8      	str	r0, [r7, #8]
				ticker_collide->next = *insert_head;
    c2ea:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
    c2ee:	46b2      	mov	sl, r6
    c2f0:	e6e9      	b.n	c0c6 <ticker_job+0x412>
			return TICKER_STATUS_FAILURE;
    c2f2:	2101      	movs	r1, #1
    c2f4:	e72f      	b.n	c156 <ticker_job+0x4a2>
		user = &users[count_user];
    c2f6:	9b03      	ldr	r3, [sp, #12]
    c2f8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
		user_op = &user->user_op[0];
    c2fc:	686e      	ldr	r6, [r5, #4]
		while (user->first != user->last) {
    c2fe:	786b      	ldrb	r3, [r5, #1]
    c300:	78ea      	ldrb	r2, [r5, #3]
    c302:	429a      	cmp	r2, r3
    c304:	d102      	bne.n	c30c <ticker_job+0x658>
    c306:	3c01      	subs	r4, #1
    c308:	b2e4      	uxtb	r4, r4
    c30a:	e551      	b.n	bdb0 <ticker_job+0xfc>
			ticker_job_op_inquire(instance, &user_op[user->first]);
    c30c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    c310:	011b      	lsls	r3, r3, #4
    c312:	18f2      	adds	r2, r6, r3
	switch (uop->op) {
    c314:	5cf3      	ldrb	r3, [r6, r3]
    c316:	2b01      	cmp	r3, #1
    c318:	d025      	beq.n	c366 <ticker_job+0x6b2>
    c31a:	2b02      	cmp	r3, #2
    c31c:	d12a      	bne.n	c374 <ticker_job+0x6c0>
		ticker_by_next_slot_get(instance,
    c31e:	f8d2 c004 	ldr.w	ip, [r2, #4]
    c322:	6893      	ldr	r3, [r2, #8]
	_ticker_id_head = *ticker_id_head;
    c324:	f89c 0000 	ldrb.w	r0, [ip]
		ticker_by_next_slot_get(instance,
    c328:	f8d2 900c 	ldr.w	r9, [r2, #12]
	node = instance->node;
    c32c:	f8db e000 	ldr.w	lr, [fp]
	if ((_ticker_id_head == TICKER_NULL) ||
    c330:	28ff      	cmp	r0, #255	; 0xff
    c332:	d004      	beq.n	c33e <ticker_job+0x68a>
    c334:	6819      	ldr	r1, [r3, #0]
    c336:	f8db 7014 	ldr.w	r7, [fp, #20]
    c33a:	42b9      	cmp	r1, r7
    c33c:	d023      	beq.n	c386 <ticker_job+0x6d2>
		*ticks_current = instance->ticks_current;
    c33e:	f8db 0014 	ldr.w	r0, [fp, #20]
		_ticker_id_head = instance->ticker_id_head;
    c342:	f89b 101d 	ldrb.w	r1, [fp, #29]
		*ticks_current = instance->ticks_current;
    c346:	6018      	str	r0, [r3, #0]
		_ticks_to_expire = 0;
    c348:	2300      	movs	r3, #0
	while ((_ticker_id_head != TICKER_NULL) &&
    c34a:	29ff      	cmp	r1, #255	; 0xff
    c34c:	d007      	beq.n	c35e <ticker_job+0x6aa>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0)) {
    c34e:	eb01 0a81 	add.w	sl, r1, r1, lsl #2
    c352:	eb0e 00ca 	add.w	r0, lr, sl, lsl #3
	while ((_ticker_id_head != TICKER_NULL) &&
    c356:	6987      	ldr	r7, [r0, #24]
    c358:	6880      	ldr	r0, [r0, #8]
    c35a:	b1df      	cbz	r7, c394 <ticker_job+0x6e0>
		_ticks_to_expire += ticker->ticks_to_expire;
    c35c:	4403      	add	r3, r0
	*ticker_id_head = _ticker_id_head;
    c35e:	f88c 1000 	strb.w	r1, [ip]
	*ticks_to_expire = _ticks_to_expire;
    c362:	f8c9 3000 	str.w	r3, [r9]
		fp_op_func = uop->fp_op_func;
    c366:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uop->status = TICKER_STATUS_SUCCESS;
    c368:	f8c2 8024 	str.w	r8, [r2, #36]	; 0x24
	if (fp_op_func) {
    c36c:	b113      	cbz	r3, c374 <ticker_job+0x6c0>
		fp_op_func(uop->status, uop->op_context);
    c36e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    c370:	2000      	movs	r0, #0
    c372:	4798      	blx	r3
			first = user->first + 1;
    c374:	786b      	ldrb	r3, [r5, #1]
			if (first == user->count_user_op) {
    c376:	782a      	ldrb	r2, [r5, #0]
			first = user->first + 1;
    c378:	3301      	adds	r3, #1
    c37a:	b2db      	uxtb	r3, r3
				first = 0;
    c37c:	429a      	cmp	r2, r3
    c37e:	bf08      	it	eq
    c380:	2300      	moveq	r3, #0
			user->first = first;
    c382:	706b      	strb	r3, [r5, #1]
    c384:	e7bb      	b.n	c2fe <ticker_job+0x64a>
		ticker = &node[_ticker_id_head];
    c386:	eb00 0080 	add.w	r0, r0, r0, lsl #2
	_ticks_to_expire = *ticks_to_expire;
    c38a:	f8d9 3000 	ldr.w	r3, [r9]
		_ticker_id_head = ticker->next;
    c38e:	f81e 1030 	ldrb.w	r1, [lr, r0, lsl #3]
    c392:	e7da      	b.n	c34a <ticker_job+0x696>
		_ticks_to_expire += ticker->ticks_to_expire;
    c394:	4403      	add	r3, r0
		_ticker_id_head = ticker->next;
    c396:	f81e 103a 	ldrb.w	r1, [lr, sl, lsl #3]
    c39a:	e7d6      	b.n	c34a <ticker_job+0x696>
	if (ticker_id_old_head == TICKER_NULL) {
    c39c:	9b05      	ldr	r3, [sp, #20]
    c39e:	2bff      	cmp	r3, #255	; 0xff
    c3a0:	d107      	bne.n	c3b2 <ticker_job+0x6fe>
		ticks_current = cntr_cnt_get();
    c3a2:	f00c f865 	bl	18470 <cntr_cnt_get>
    c3a6:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
    c3a8:	f00c f826 	bl	183f8 <cntr_start>
    c3ac:	b908      	cbnz	r0, c3b2 <ticker_job+0x6fe>
			instance->ticks_current = ticks_current;
    c3ae:	f8cb 4014 	str.w	r4, [fp, #20]
	ticker = &instance->node[instance->ticker_id_head];
    c3b2:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker->ticks_to_expire;
    c3b6:	f8db 2000 	ldr.w	r2, [fp]
	ticker = &instance->node[instance->ticker_id_head];
    c3ba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	ticks_to_expire = ticker->ticks_to_expire;
    c3be:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    c3c2:	260a      	movs	r6, #10
    c3c4:	689d      	ldr	r5, [r3, #8]
		ctr = cntr_cnt_get();
    c3c6:	f00c f853 	bl	18470 <cntr_cnt_get>
		cc = instance->ticks_current;
    c3ca:	f8db 4014 	ldr.w	r4, [fp, #20]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    c3ce:	1b03      	subs	r3, r0, r4
    c3d0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
    c3d4:	3303      	adds	r3, #3
		cc += ((ticks_elapsed < ticks_to_expire) ?
    c3d6:	42ab      	cmp	r3, r5
    c3d8:	bf2c      	ite	cs
    c3da:	18e4      	addcs	r4, r4, r3
    c3dc:	1964      	addcc	r4, r4, r5
		cc &= 0x00FFFFFF;
    c3de:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		ctr = cntr_cnt_get();
    c3e2:	4607      	mov	r7, r0
		instance->trigger_set_cb(cc);
    c3e4:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
    c3e8:	4620      	mov	r0, r4
    c3ea:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
    c3ec:	f00c f840 	bl	18470 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    c3f0:	1bc0      	subs	r0, r0, r7
    c3f2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    c3f6:	1be4      	subs	r4, r4, r7
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
    c3f8:	3003      	adds	r0, #3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    c3fa:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
    c3fe:	42a0      	cmp	r0, r4
    c400:	f67f ace8 	bls.w	bdd4 <ticker_job+0x120>
		LL_ASSERT(i);
    c404:	3e01      	subs	r6, #1
    c406:	d1de      	bne.n	c3c6 <ticker_job+0x712>
    c408:	4b11      	ldr	r3, [pc, #68]	; (c450 <ticker_job+0x79c>)
    c40a:	9301      	str	r3, [sp, #4]
    c40c:	9300      	str	r3, [sp, #0]
    c40e:	4a11      	ldr	r2, [pc, #68]	; (c454 <ticker_job+0x7a0>)
    c410:	4b11      	ldr	r3, [pc, #68]	; (c458 <ticker_job+0x7a4>)
    c412:	4912      	ldr	r1, [pc, #72]	; (c45c <ticker_job+0x7a8>)
    c414:	4812      	ldr	r0, [pc, #72]	; (c460 <ticker_job+0x7ac>)
    c416:	f7f5 ff43 	bl	22a0 <printk>
    c41a:	4040      	eors	r0, r0
    c41c:	f380 8811 	msr	BASEPRI, r0
    c420:	f04f 0004 	mov.w	r0, #4
    c424:	df02      	svc	2
	instance->job_guard = 0;
    c426:	2300      	movs	r3, #0
    c428:	f88b 301e 	strb.w	r3, [fp, #30]
    c42c:	e4c8      	b.n	bdc0 <ticker_job+0x10c>
	if (!pending) {
    c42e:	2b00      	cmp	r3, #0
    c430:	d1f9      	bne.n	c426 <ticker_job+0x772>
		flag_compare_update = 1;
    c432:	2301      	movs	r3, #1
    c434:	9304      	str	r3, [sp, #16]
    c436:	e4b2      	b.n	bd9e <ticker_job+0xea>
	while (id_insert !=
    c438:	45b0      	cmp	r8, r6
    c43a:	f47f af33 	bne.w	c2a4 <ticker_job+0x5f0>
    c43e:	e686      	b.n	c14e <ticker_job+0x49a>
}
    c440:	b015      	add	sp, #84	; 0x54
    c442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c446:	bf00      	nop
    c448:	ff172b5a 	.word	0xff172b5a
    c44c:	7f172b59 	.word	0x7f172b59
    c450:	00023dbe 	.word	0x00023dbe
    c454:	00022d86 	.word	0x00022d86
    c458:	00025557 	.word	0x00025557
    c45c:	000272e8 	.word	0x000272e8
    c460:	00025571 	.word	0x00025571

0000c464 <ticker_init>:
{
    c464:	b5f0      	push	{r4, r5, r6, r7, lr}
	instance->count_node = count_node;
    c466:	4d1a      	ldr	r5, [pc, #104]	; (c4d0 <ticker_init+0x6c>)
{
    c468:	9f05      	ldr	r7, [sp, #20]
    c46a:	f89d 4018 	ldrb.w	r4, [sp, #24]
	instance->count_node = count_node;
    c46e:	262c      	movs	r6, #44	; 0x2c
    c470:	4346      	muls	r6, r0
    c472:	eb05 0e06 	add.w	lr, r5, r6
	instance->node = node;
    c476:	51aa      	str	r2, [r5, r6]
	instance->count_node = count_node;
    c478:	f88e 1008 	strb.w	r1, [lr, #8]
	struct ticker_user_op *user_op_ = (void *)user_op;
    c47c:	9907      	ldr	r1, [sp, #28]
	instance->count_user = count_user;
    c47e:	f88e 3009 	strb.w	r3, [lr, #9]
	instance->user = user;
    c482:	f8ce 7004 	str.w	r7, [lr, #4]
	while (count_user--) {
    c486:	3b01      	subs	r3, #1
    c488:	b2db      	uxtb	r3, r3
    c48a:	2bff      	cmp	r3, #255	; 0xff
    c48c:	d111      	bne.n	c4b2 <ticker_init+0x4e>
	if (count_op) {
    c48e:	b9ec      	cbnz	r4, c4cc <ticker_init+0x68>
	instance->caller_id_get_cb = caller_id_get_cb;
    c490:	222c      	movs	r2, #44	; 0x2c
    c492:	fb02 5200 	mla	r2, r2, r0, r5
    c496:	9908      	ldr	r1, [sp, #32]
    c498:	6211      	str	r1, [r2, #32]
	instance->sched_cb = sched_cb;
    c49a:	9909      	ldr	r1, [sp, #36]	; 0x24
    c49c:	6251      	str	r1, [r2, #36]	; 0x24
	instance->trigger_set_cb = trigger_set_cb;
    c49e:	990a      	ldr	r1, [sp, #40]	; 0x28
    c4a0:	6291      	str	r1, [r2, #40]	; 0x28
	instance->ticker_id_head = TICKER_NULL;
    c4a2:	7753      	strb	r3, [r2, #29]
	instance->ticker_id_slot_previous = TICKER_NULL;
    c4a4:	7713      	strb	r3, [r2, #28]
	instance->ticks_slot_previous = 0;
    c4a6:	6194      	str	r4, [r2, #24]
	instance->ticks_current = 0;
    c4a8:	6154      	str	r4, [r2, #20]
	instance->ticks_elapsed_first = 0;
    c4aa:	7294      	strb	r4, [r2, #10]
	instance->ticks_elapsed_last = 0;
    c4ac:	72d4      	strb	r4, [r2, #11]
	return TICKER_STATUS_SUCCESS;
    c4ae:	4620      	mov	r0, r4
    c4b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		users[count_user].user_op = user_op_;
    c4b2:	b21a      	sxth	r2, r3
    c4b4:	eb07 06c2 	add.w	r6, r7, r2, lsl #3
    c4b8:	6071      	str	r1, [r6, #4]
		user_op_ += users[count_user].count_user_op;
    c4ba:	f817 2032 	ldrb.w	r2, [r7, r2, lsl #3]
    c4be:	eb02 0642 	add.w	r6, r2, r2, lsl #1
		count_op -= users[count_user].count_user_op;
    c4c2:	1aa4      	subs	r4, r4, r2
		user_op_ += users[count_user].count_user_op;
    c4c4:	eb01 1106 	add.w	r1, r1, r6, lsl #4
		count_op -= users[count_user].count_user_op;
    c4c8:	b2e4      	uxtb	r4, r4
    c4ca:	e7dc      	b.n	c486 <ticker_init+0x22>
		return TICKER_STATUS_FAILURE;
    c4cc:	2001      	movs	r0, #1
}
    c4ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c4d0:	20000ae8 	.word	0x20000ae8

0000c4d4 <ticker_trigger>:
	instance = &_instance[instance_index];
    c4d4:	4a07      	ldr	r2, [pc, #28]	; (c4f4 <ticker_trigger+0x20>)
    c4d6:	212c      	movs	r1, #44	; 0x2c
    c4d8:	fb00 2301 	mla	r3, r0, r1, r2
{
    c4dc:	b410      	push	{r4}
	if (instance->sched_cb) {
    c4de:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    c4e0:	b12c      	cbz	r4, c4ee <ticker_trigger+0x1a>
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    c4e2:	46a4      	mov	ip, r4
    c4e4:	2201      	movs	r2, #1
    c4e6:	2103      	movs	r1, #3
    c4e8:	2002      	movs	r0, #2
}
    c4ea:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    c4ec:	4760      	bx	ip
}
    c4ee:	bc10      	pop	{r4}
    c4f0:	4770      	bx	lr
    c4f2:	bf00      	nop
    c4f4:	20000ae8 	.word	0x20000ae8

0000c4f8 <ticker_start>:
{
    c4f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    c4fc:	4f25      	ldr	r7, [pc, #148]	; (c594 <ticker_start+0x9c>)
    c4fe:	f04f 082c 	mov.w	r8, #44	; 0x2c
{
    c502:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    c504:	fb08 7000 	mla	r0, r8, r0, r7
    c508:	fa0f fc81 	sxth.w	ip, r1
    c50c:	f8d0 e004 	ldr.w	lr, [r0, #4]
    c510:	eb0e 06cc 	add.w	r6, lr, ip, lsl #3
	if (last >= user->count_user_op) {
    c514:	f81e e03c 	ldrb.w	lr, [lr, ip, lsl #3]
	last = user->last + 1;
    c518:	78f4      	ldrb	r4, [r6, #3]
    c51a:	1c65      	adds	r5, r4, #1
    c51c:	b2ed      	uxtb	r5, r5
		last = 0;
    c51e:	45ae      	cmp	lr, r5
    c520:	bf98      	it	ls
    c522:	2500      	movls	r5, #0
	if (last == user->first) {
    c524:	f896 e001 	ldrb.w	lr, [r6, #1]
    c528:	45ae      	cmp	lr, r5
    c52a:	d02f      	beq.n	c58c <ticker_start+0x94>
	user_op = &user->user_op[user->last];
    c52c:	f8d6 c004 	ldr.w	ip, [r6, #4]
    c530:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    c534:	ea4f 1e04 	mov.w	lr, r4, lsl #4
    c538:	eb0c 040e 	add.w	r4, ip, lr
	user_op->op = TICKER_USER_OP_TYPE_START;
    c53c:	f04f 0a03 	mov.w	sl, #3
    c540:	f80c a00e 	strb.w	sl, [ip, lr]
	user_op->params.start.ticks_at_start = ticks_anchor;
    c544:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
    c546:	9b08      	ldr	r3, [sp, #32]
    c548:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    c54a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c54c:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    c54e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c550:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    c552:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c554:	61a3      	str	r3, [r4, #24]
	user_op->params.start.lazy = lazy;
    c556:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    c55a:	82a3      	strh	r3, [r4, #20]
	user_op->params.start.fp_timeout_func = fp_timeout_func;
    c55c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c55e:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
    c560:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c562:	6223      	str	r3, [r4, #32]
	user_op->status = TICKER_STATUS_BUSY;
    c564:	2302      	movs	r3, #2
    c566:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    c568:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c56a:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    c56c:	9b10      	ldr	r3, [sp, #64]	; 0x40
	user_op->id = ticker_id;
    c56e:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    c570:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    c572:	70f5      	strb	r5, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    c574:	6a45      	ldr	r5, [r0, #36]	; 0x24
    c576:	6a03      	ldr	r3, [r0, #32]
    c578:	4608      	mov	r0, r1
    c57a:	4798      	blx	r3
    c57c:	fb09 7308 	mla	r3, r9, r8, r7
    c580:	2200      	movs	r2, #0
    c582:	2104      	movs	r1, #4
    c584:	47a8      	blx	r5
	return user_op->status;
    c586:	6a60      	ldr	r0, [r4, #36]	; 0x24
    c588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    c58c:	2001      	movs	r0, #1
}
    c58e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c592:	bf00      	nop
    c594:	20000ae8 	.word	0x20000ae8

0000c598 <ticker_update>:
{
    c598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    c59c:	f8df 8090 	ldr.w	r8, [pc, #144]	; c630 <ticker_update+0x98>
    c5a0:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    c5a4:	fb0a 8e00 	mla	lr, sl, r0, r8
    c5a8:	b20f      	sxth	r7, r1
    c5aa:	f8de 5004 	ldr.w	r5, [lr, #4]
{
    c5ae:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    c5b0:	eb05 00c7 	add.w	r0, r5, r7, lsl #3
	if (last >= user->count_user_op) {
    c5b4:	f815 5037 	ldrb.w	r5, [r5, r7, lsl #3]
	last = user->last + 1;
    c5b8:	78c4      	ldrb	r4, [r0, #3]
    c5ba:	1c66      	adds	r6, r4, #1
    c5bc:	b2f6      	uxtb	r6, r6
		last = 0;
    c5be:	42b5      	cmp	r5, r6
    c5c0:	bf98      	it	ls
    c5c2:	2600      	movls	r6, #0
	if (last == user->first) {
    c5c4:	7845      	ldrb	r5, [r0, #1]
    c5c6:	42b5      	cmp	r5, r6
    c5c8:	d02f      	beq.n	c62a <ticker_update+0x92>
	user_op = &user->user_op[user->last];
    c5ca:	f8d0 c004 	ldr.w	ip, [r0, #4]
    c5ce:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    c5d2:	0125      	lsls	r5, r4, #4
    c5d4:	eb0c 0405 	add.w	r4, ip, r5
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    c5d8:	2704      	movs	r7, #4
    c5da:	f80c 7005 	strb.w	r7, [ip, r5]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    c5de:	80a3      	strh	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    c5e0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    c5e4:	80e3      	strh	r3, [r4, #6]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    c5e6:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    c5ea:	8123      	strh	r3, [r4, #8]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    c5ec:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    c5f0:	8163      	strh	r3, [r4, #10]
	user_op->params.update.lazy = lazy;
    c5f2:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    c5f6:	81a3      	strh	r3, [r4, #12]
	user_op->params.update.force = force;
    c5f8:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    c5fc:	73a3      	strb	r3, [r4, #14]
	user_op->status = TICKER_STATUS_BUSY;
    c5fe:	2302      	movs	r3, #2
    c600:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    c602:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c604:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    c606:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	user_op->id = ticker_id;
    c608:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    c60a:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    c60c:	70c6      	strb	r6, [r0, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    c60e:	f8de 3020 	ldr.w	r3, [lr, #32]
    c612:	f8de 5024 	ldr.w	r5, [lr, #36]	; 0x24
    c616:	4608      	mov	r0, r1
    c618:	4798      	blx	r3
    c61a:	fb09 830a 	mla	r3, r9, sl, r8
    c61e:	2200      	movs	r2, #0
    c620:	4639      	mov	r1, r7
    c622:	47a8      	blx	r5
	return user_op->status;
    c624:	6a60      	ldr	r0, [r4, #36]	; 0x24
    c626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    c62a:	2001      	movs	r0, #1
}
    c62c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c630:	20000ae8 	.word	0x20000ae8

0000c634 <ticker_stop>:
{
    c634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    c638:	f8df 906c 	ldr.w	r9, [pc, #108]	; c6a8 <ticker_stop+0x74>
    c63c:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    c640:	fb0a 9e00 	mla	lr, sl, r0, r9
{
    c644:	4680      	mov	r8, r0
	user = &instance->user[user_id];
    c646:	f8de 0004 	ldr.w	r0, [lr, #4]
    c64a:	b20e      	sxth	r6, r1
    c64c:	eb00 07c6 	add.w	r7, r0, r6, lsl #3
	if (last >= user->count_user_op) {
    c650:	f810 0036 	ldrb.w	r0, [r0, r6, lsl #3]
	last = user->last + 1;
    c654:	78fc      	ldrb	r4, [r7, #3]
    c656:	1c65      	adds	r5, r4, #1
    c658:	b2ed      	uxtb	r5, r5
		last = 0;
    c65a:	42a8      	cmp	r0, r5
    c65c:	bf98      	it	ls
    c65e:	2500      	movls	r5, #0
	if (last == user->first) {
    c660:	7878      	ldrb	r0, [r7, #1]
    c662:	42a8      	cmp	r0, r5
    c664:	d01d      	beq.n	c6a2 <ticker_stop+0x6e>
	user_op = &user->user_op[user->last];
    c666:	6878      	ldr	r0, [r7, #4]
    c668:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    c66c:	0124      	lsls	r4, r4, #4
    c66e:	1906      	adds	r6, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    c670:	f04f 0c05 	mov.w	ip, #5
    c674:	f800 c004 	strb.w	ip, [r0, r4]
	user_op->id = ticker_id;
    c678:	7072      	strb	r2, [r6, #1]
	user_op->fp_op_func = fp_op_func;
    c67a:	62b3      	str	r3, [r6, #40]	; 0x28
	user_op->status = TICKER_STATUS_BUSY;
    c67c:	2202      	movs	r2, #2
	user_op->op_context = op_context;
    c67e:	9b08      	ldr	r3, [sp, #32]
	user_op->status = TICKER_STATUS_BUSY;
    c680:	6272      	str	r2, [r6, #36]	; 0x24
	user_op->op_context = op_context;
    c682:	62f3      	str	r3, [r6, #44]	; 0x2c
	user->last = last;
    c684:	70fd      	strb	r5, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    c686:	f8de 3020 	ldr.w	r3, [lr, #32]
    c68a:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
    c68e:	4608      	mov	r0, r1
    c690:	4798      	blx	r3
    c692:	fb08 930a 	mla	r3, r8, sl, r9
    c696:	2200      	movs	r2, #0
    c698:	2104      	movs	r1, #4
    c69a:	47a0      	blx	r4
	return user_op->status;
    c69c:	6a70      	ldr	r0, [r6, #36]	; 0x24
    c69e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    c6a2:	2001      	movs	r0, #1
}
    c6a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c6a8:	20000ae8 	.word	0x20000ae8

0000c6ac <ticker_next_slot_get>:
{
    c6ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    c6b0:	f8df 8078 	ldr.w	r8, [pc, #120]	; c72c <ticker_next_slot_get+0x80>
    c6b4:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
{
    c6b8:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    c6ba:	fb0a 8000 	mla	r0, sl, r0, r8
    c6be:	fa0f fe81 	sxth.w	lr, r1
    c6c2:	6845      	ldr	r5, [r0, #4]
    c6c4:	eb05 07ce 	add.w	r7, r5, lr, lsl #3
	if (last >= user->count_user_op) {
    c6c8:	f815 503e 	ldrb.w	r5, [r5, lr, lsl #3]
	last = user->last + 1;
    c6cc:	78fc      	ldrb	r4, [r7, #3]
    c6ce:	1c66      	adds	r6, r4, #1
    c6d0:	b2f6      	uxtb	r6, r6
		last = 0;
    c6d2:	42b5      	cmp	r5, r6
    c6d4:	bf98      	it	ls
    c6d6:	2600      	movls	r6, #0
	if (last == user->first) {
    c6d8:	787d      	ldrb	r5, [r7, #1]
    c6da:	42b5      	cmp	r5, r6
    c6dc:	d023      	beq.n	c726 <ticker_next_slot_get+0x7a>
	user_op = &user->user_op[user->last];
    c6de:	f8d7 c004 	ldr.w	ip, [r7, #4]
    c6e2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    c6e6:	0125      	lsls	r5, r4, #4
    c6e8:	eb0c 0405 	add.w	r4, ip, r5
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
    c6ec:	f04f 0e02 	mov.w	lr, #2
    c6f0:	f80c e005 	strb.w	lr, [ip, r5]
	user_op->params.slot_get.ticks_current = ticks_current;
    c6f4:	60a3      	str	r3, [r4, #8]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
    c6f6:	9b08      	ldr	r3, [sp, #32]
    c6f8:	60e3      	str	r3, [r4, #12]
	user_op->fp_op_func = fp_op_func;
    c6fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c6fc:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->id = TICKER_NULL;
    c6fe:	25ff      	movs	r5, #255	; 0xff
	user_op->op_context = op_context;
    c700:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	user_op->params.slot_get.ticker_id = ticker_id;
    c702:	6062      	str	r2, [r4, #4]
	user_op->id = TICKER_NULL;
    c704:	7065      	strb	r5, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
    c706:	f8c4 e024 	str.w	lr, [r4, #36]	; 0x24
	user_op->op_context = op_context;
    c70a:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    c70c:	70fe      	strb	r6, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    c70e:	6a45      	ldr	r5, [r0, #36]	; 0x24
    c710:	6a03      	ldr	r3, [r0, #32]
    c712:	4608      	mov	r0, r1
    c714:	4798      	blx	r3
    c716:	fb09 830a 	mla	r3, r9, sl, r8
    c71a:	2200      	movs	r2, #0
    c71c:	2104      	movs	r1, #4
    c71e:	47a8      	blx	r5
	return user_op->status;
    c720:	6a60      	ldr	r0, [r4, #36]	; 0x24
    c722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    c726:	2001      	movs	r0, #1
}
    c728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c72c:	20000ae8 	.word	0x20000ae8

0000c730 <ticker_job_idle_get>:
{
    c730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    c734:	f8df 906c 	ldr.w	r9, [pc, #108]	; c7a4 <ticker_job_idle_get+0x74>
    c738:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    c73c:	fb0a 9e00 	mla	lr, sl, r0, r9
{
    c740:	4680      	mov	r8, r0
	user = &instance->user[user_id];
    c742:	f8de 0004 	ldr.w	r0, [lr, #4]
    c746:	b20e      	sxth	r6, r1
    c748:	eb00 07c6 	add.w	r7, r0, r6, lsl #3
	if (last >= user->count_user_op) {
    c74c:	f810 0036 	ldrb.w	r0, [r0, r6, lsl #3]
	last = user->last + 1;
    c750:	78fc      	ldrb	r4, [r7, #3]
    c752:	1c65      	adds	r5, r4, #1
    c754:	b2ed      	uxtb	r5, r5
		last = 0;
    c756:	42a8      	cmp	r0, r5
    c758:	bf98      	it	ls
    c75a:	2500      	movls	r5, #0
	if (last == user->first) {
    c75c:	7878      	ldrb	r0, [r7, #1]
    c75e:	42a8      	cmp	r0, r5
    c760:	d01d      	beq.n	c79e <ticker_job_idle_get+0x6e>
	user_op = &user->user_op[user->last];
    c762:	6878      	ldr	r0, [r7, #4]
    c764:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    c768:	0124      	lsls	r4, r4, #4
    c76a:	1906      	adds	r6, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
    c76c:	f04f 0c01 	mov.w	ip, #1
    c770:	f800 c004 	strb.w	ip, [r0, r4]
	user_op->id = TICKER_NULL;
    c774:	20ff      	movs	r0, #255	; 0xff
    c776:	7070      	strb	r0, [r6, #1]
	user_op->status = TICKER_STATUS_BUSY;
    c778:	2002      	movs	r0, #2
    c77a:	6270      	str	r0, [r6, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    c77c:	62b2      	str	r2, [r6, #40]	; 0x28
	user_op->op_context = op_context;
    c77e:	62f3      	str	r3, [r6, #44]	; 0x2c
	user->last = last;
    c780:	70fd      	strb	r5, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    c782:	f8de 3020 	ldr.w	r3, [lr, #32]
    c786:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
    c78a:	4608      	mov	r0, r1
    c78c:	4798      	blx	r3
    c78e:	fb08 930a 	mla	r3, r8, sl, r9
    c792:	2200      	movs	r2, #0
    c794:	2104      	movs	r1, #4
    c796:	47a0      	blx	r4
	return user_op->status;
    c798:	6a70      	ldr	r0, [r6, #36]	; 0x24
    c79a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    c79e:	2001      	movs	r0, #1
}
    c7a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c7a4:	20000ae8 	.word	0x20000ae8

0000c7a8 <ticker_job_sched>:
{
    c7a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    c7ac:	4c08      	ldr	r4, [pc, #32]	; (c7d0 <ticker_job_sched+0x28>)
    c7ae:	252c      	movs	r5, #44	; 0x2c
    c7b0:	fb05 4300 	mla	r3, r5, r0, r4
{
    c7b4:	4606      	mov	r6, r0
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    c7b6:	6a5f      	ldr	r7, [r3, #36]	; 0x24
    c7b8:	6a1b      	ldr	r3, [r3, #32]
    c7ba:	4608      	mov	r0, r1
    c7bc:	4798      	blx	r3
    c7be:	fb06 4305 	mla	r3, r6, r5, r4
    c7c2:	46bc      	mov	ip, r7
    c7c4:	2200      	movs	r2, #0
    c7c6:	2104      	movs	r1, #4
}
    c7c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    c7cc:	4760      	bx	ip
    c7ce:	bf00      	nop
    c7d0:	20000ae8 	.word	0x20000ae8

0000c7d4 <ticker_ticks_now_get>:
	return cntr_cnt_get();
    c7d4:	f00b be4c 	b.w	18470 <cntr_cnt_get>

0000c7d8 <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    c7d8:	1a40      	subs	r0, r0, r1
}
    c7da:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    c7de:	4770      	bx	lr

0000c7e0 <ll_addr_get>:

static u8_t pub_addr[BDADDR_SIZE];
static u8_t rnd_addr[BDADDR_SIZE];

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
    c7e0:	b508      	push	{r3, lr}
    c7e2:	4603      	mov	r3, r0
	if (addr_type > 1) {
    c7e4:	2b01      	cmp	r3, #1
{
    c7e6:	4608      	mov	r0, r1
	if (addr_type > 1) {
    c7e8:	d80e      	bhi.n	c808 <ll_addr_get+0x28>
		return NULL;
	}

	if (addr_type) {
    c7ea:	b133      	cbz	r3, c7fa <ll_addr_get+0x1a>
		if (bdaddr) {
    c7ec:	b119      	cbz	r1, c7f6 <ll_addr_get+0x16>
			memcpy(bdaddr, rnd_addr, BDADDR_SIZE);
    c7ee:	2206      	movs	r2, #6
    c7f0:	4906      	ldr	r1, [pc, #24]	; (c80c <ll_addr_get+0x2c>)
    c7f2:	f7f3 ffce 	bl	792 <memcpy>
		}

		return rnd_addr;
    c7f6:	4805      	ldr	r0, [pc, #20]	; (c80c <ll_addr_get+0x2c>)
    c7f8:	bd08      	pop	{r3, pc}
	}

	if (bdaddr) {
    c7fa:	b119      	cbz	r1, c804 <ll_addr_get+0x24>
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
    c7fc:	2206      	movs	r2, #6
    c7fe:	4904      	ldr	r1, [pc, #16]	; (c810 <ll_addr_get+0x30>)
    c800:	f7f3 ffc7 	bl	792 <memcpy>
	}

	return pub_addr;
    c804:	4802      	ldr	r0, [pc, #8]	; (c810 <ll_addr_get+0x30>)
}
    c806:	bd08      	pop	{r3, pc}
		return NULL;
    c808:	2000      	movs	r0, #0
    c80a:	bd08      	pop	{r3, pc}
    c80c:	20000b46 	.word	0x20000b46
    c810:	20000b40 	.word	0x20000b40

0000c814 <ll_addr_set>:

u32_t ll_addr_set(u8_t addr_type, u8_t const *const bdaddr)
{
    c814:	b570      	push	{r4, r5, r6, lr}
    c816:	4606      	mov	r6, r0
    c818:	460d      	mov	r5, r1
	if (ll_adv_is_enabled() ||
    c81a:	f008 ffbf 	bl	1579c <ll_adv_is_enabled>
    c81e:	4604      	mov	r4, r0
    c820:	b110      	cbz	r0, c828 <ll_addr_set+0x14>
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
    c822:	240c      	movs	r4, #12
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
}
    c824:	4620      	mov	r0, r4
    c826:	bd70      	pop	{r4, r5, r6, pc}
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
    c828:	f008 ffce 	bl	157c8 <ll_scan_is_enabled>
	if (ll_adv_is_enabled() ||
    c82c:	f010 0f06 	tst.w	r0, #6
    c830:	d1f7      	bne.n	c822 <ll_addr_set+0xe>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    c832:	2206      	movs	r2, #6
    c834:	4629      	mov	r1, r5
	if (addr_type) {
    c836:	b11e      	cbz	r6, c840 <ll_addr_set+0x2c>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    c838:	4802      	ldr	r0, [pc, #8]	; (c844 <ll_addr_set+0x30>)
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    c83a:	f7f3 ffaa 	bl	792 <memcpy>
    c83e:	e7f1      	b.n	c824 <ll_addr_set+0x10>
    c840:	4801      	ldr	r0, [pc, #4]	; (c848 <ll_addr_set+0x34>)
    c842:	e7fa      	b.n	c83a <ll_addr_set+0x26>
    c844:	20000b46 	.word	0x20000b46
    c848:	20000b40 	.word	0x20000b40

0000c84c <ll_tx_pwr_get>:
}

void ll_tx_pwr_get(s8_t *min, s8_t *max)
{
	/* TODO: Support TX Power Level other than 0dBm */
	*min = 0;
    c84c:	2300      	movs	r3, #0
    c84e:	7003      	strb	r3, [r0, #0]
	*max = 0;
    c850:	700b      	strb	r3, [r1, #0]
    c852:	4770      	bx	lr

0000c854 <bt_rand>:
#include "common/log.h"

#include "hal/ecb.h"

int bt_rand(void *buf, size_t len)
{
    c854:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    c856:	4607      	mov	r7, r0
    c858:	460e      	mov	r6, r1
	while (len) {
    c85a:	460c      	mov	r4, r1
    c85c:	1b35      	subs	r5, r6, r4
    c85e:	443d      	add	r5, r7
    c860:	b18c      	cbz	r4, c886 <bt_rand+0x32>
		u32_t v = sys_rand32_get();
    c862:	f7f5 ffdb 	bl	281c <sys_rand32_get>

		if (len >= sizeof(v)) {
    c866:	2c03      	cmp	r4, #3
		u32_t v = sys_rand32_get();
    c868:	9001      	str	r0, [sp, #4]
		if (len >= sizeof(v)) {
    c86a:	d907      	bls.n	c87c <bt_rand+0x28>
			memcpy(buf, &v, sizeof(v));
    c86c:	2204      	movs	r2, #4
    c86e:	eb0d 0102 	add.w	r1, sp, r2
    c872:	4628      	mov	r0, r5
    c874:	f7f3 ff8d 	bl	792 <memcpy>

			buf += sizeof(v);
			len -= sizeof(v);
    c878:	3c04      	subs	r4, #4
    c87a:	e7ef      	b.n	c85c <bt_rand+0x8>
		} else {
			memcpy(buf, &v, len);
    c87c:	4622      	mov	r2, r4
    c87e:	a901      	add	r1, sp, #4
    c880:	4628      	mov	r0, r5
    c882:	f7f3 ff86 	bl	792 <memcpy>
			break;
		}
	}

	return 0;
}
    c886:	2000      	movs	r0, #0
    c888:	b003      	add	sp, #12
    c88a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000c88c <bt_encrypt_le>:

int bt_encrypt_le(const u8_t key[16], const u8_t plaintext[16],
		  u8_t enc_data[16])
{
    c88c:	b508      	push	{r3, lr}
	BT_DBG("key %s plaintext %s", bt_hex(key, 16), bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
    c88e:	2300      	movs	r3, #0
    c890:	f00b fe22 	bl	184d8 <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
    c894:	2000      	movs	r0, #0
    c896:	bd08      	pop	{r3, pc}

0000c898 <_hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int _hci_driver_init(struct device *unused)
{
    c898:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    c89a:	4802      	ldr	r0, [pc, #8]	; (c8a4 <_hci_driver_init+0xc>)
    c89c:	f7f8 ff6c 	bl	5778 <bt_hci_driver_register>

	return 0;
}
    c8a0:	2000      	movs	r0, #0
    c8a2:	bd08      	pop	{r3, pc}
    c8a4:	000255c0 	.word	0x000255c0

0000c8a8 <stack_analyze>:
{
    c8a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	size_t unused = 0;
    c8aa:	2300      	movs	r3, #0
	for (i = 0; i < size; i++) {
    c8ac:	429a      	cmp	r2, r3
    c8ae:	d002      	beq.n	c8b6 <stack_analyze+0xe>
		if ((unsigned char)stack[i] == 0xaa) {
    c8b0:	5ccc      	ldrb	r4, [r1, r3]
    c8b2:	2caa      	cmp	r4, #170	; 0xaa
    c8b4:	d00d      	beq.n	c8d2 <stack_analyze+0x2a>
	pcnt = ((size - unused) * 100) / size;
    c8b6:	1ad4      	subs	r4, r2, r3
    c8b8:	2164      	movs	r1, #100	; 0x64
    c8ba:	4361      	muls	r1, r4
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
    c8bc:	9201      	str	r2, [sp, #4]
	pcnt = ((size - unused) * 100) / size;
    c8be:	fbb1 f1f2 	udiv	r1, r1, r2
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
    c8c2:	9400      	str	r4, [sp, #0]
    c8c4:	9102      	str	r1, [sp, #8]
    c8c6:	4601      	mov	r1, r0
    c8c8:	4803      	ldr	r0, [pc, #12]	; (c8d8 <stack_analyze+0x30>)
    c8ca:	f7f5 fce9 	bl	22a0 <printk>
	       size, unused, size - unused, size, pcnt);
}
    c8ce:	b004      	add	sp, #16
    c8d0:	bd10      	pop	{r4, pc}
			unused++;
    c8d2:	3301      	adds	r3, #1
    c8d4:	e7ea      	b.n	c8ac <stack_analyze+0x4>
    c8d6:	bf00      	nop
    c8d8:	00023d8b 	.word	0x00023d8b

0000c8dc <recv_thread>:
{
    c8dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		node_rx = k_fifo_get(&recv_fifo, K_FOREVER);
    c8de:	4e31      	ldr	r6, [pc, #196]	; (c9a4 <recv_thread+0xc8>)
		if (k_uptime_get_32() - rx_ts > K_SECONDS(5)) {
    c8e0:	4d31      	ldr	r5, [pc, #196]	; (c9a8 <recv_thread+0xcc>)
		node_rx = k_fifo_get(&recv_fifo, K_FOREVER);
    c8e2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    c8e6:	4630      	mov	r0, r6
    c8e8:	f014 ff3d 	bl	21766 <k_queue_get>
		if (node_rx && !buf) {
    c8ec:	4604      	mov	r4, r0
    c8ee:	2800      	cmp	r0, #0
    c8f0:	d037      	beq.n	c962 <recv_thread+0x86>
	s8_t class = hci_get_class(node_rx);
    c8f2:	f001 fde7 	bl	e4c4 <hci_get_class>
	switch (class) {
    c8f6:	1e03      	subs	r3, r0, #0
    c8f8:	9403      	str	r4, [sp, #12]
    c8fa:	db03      	blt.n	c904 <recv_thread+0x28>
    c8fc:	2b02      	cmp	r3, #2
    c8fe:	dd10      	ble.n	c922 <recv_thread+0x46>
    c900:	2b03      	cmp	r3, #3
    c902:	d042      	beq.n	c98a <recv_thread+0xae>
		LL_ASSERT(0);
    c904:	4b29      	ldr	r3, [pc, #164]	; (c9ac <recv_thread+0xd0>)
    c906:	9301      	str	r3, [sp, #4]
    c908:	9300      	str	r3, [sp, #0]
    c90a:	4a29      	ldr	r2, [pc, #164]	; (c9b0 <recv_thread+0xd4>)
    c90c:	4b29      	ldr	r3, [pc, #164]	; (c9b4 <recv_thread+0xd8>)
    c90e:	492a      	ldr	r1, [pc, #168]	; (c9b8 <recv_thread+0xdc>)
    c910:	482a      	ldr	r0, [pc, #168]	; (c9bc <recv_thread+0xe0>)
    c912:	f7f5 fcc5 	bl	22a0 <printk>
    c916:	4040      	eors	r0, r0
    c918:	f380 8811 	msr	BASEPRI, r0
    c91c:	f04f 0004 	mov.w	r0, #4
    c920:	df02      	svc	2
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    c922:	2b01      	cmp	r3, #1
			buf = bt_buf_get_rx(BT_BUF_EVT, K_NO_WAIT);
    c924:	bf0e      	itee	eq
    c926:	2100      	moveq	r1, #0
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    c928:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    c92c:	2001      	movne	r0, #1
    c92e:	f7f9 f865 	bl	59fc <bt_buf_get_rx>
    c932:	4604      	mov	r4, r0
		if (buf) {
    c934:	b118      	cbz	r0, c93e <recv_thread+0x62>
			hci_evt_encode(node_rx, buf);
    c936:	4601      	mov	r1, r0
    c938:	9803      	ldr	r0, [sp, #12]
    c93a:	f001 fb3b 	bl	dfb4 <hci_evt_encode>
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    c93e:	9b03      	ldr	r3, [sp, #12]
    c940:	2100      	movs	r1, #0
    c942:	88d8      	ldrh	r0, [r3, #6]
    c944:	f009 fbee 	bl	16124 <radio_rx_fc_set>
	node_rx->hdr.onion.next = 0;
    c948:	a804      	add	r0, sp, #16
    c94a:	2200      	movs	r2, #0
    c94c:	f850 3d04 	ldr.w	r3, [r0, #-4]!
    c950:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    c952:	f009 fb71 	bl	16038 <ll_rx_mem_release>
		if (buf) {
    c956:	b124      	cbz	r4, c962 <recv_thread+0x86>
			if (buf->len) {
    c958:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
    c95a:	4620      	mov	r0, r4
			if (buf->len) {
    c95c:	b1fb      	cbz	r3, c99e <recv_thread+0xc2>
				bt_recv(buf);
    c95e:	f7f8 f965 	bl	4c2c <bt_recv>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    c962:	f015 f8ab 	bl	21abc <_impl_k_yield>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
    c966:	f015 f9a3 	bl	21cb0 <_impl_k_uptime_get_32>
		if (k_uptime_get_32() - rx_ts > K_SECONDS(5)) {
    c96a:	682b      	ldr	r3, [r5, #0]
    c96c:	1ac0      	subs	r0, r0, r3
    c96e:	f241 3388 	movw	r3, #5000	; 0x1388
    c972:	4298      	cmp	r0, r3
    c974:	d9b5      	bls.n	c8e2 <recv_thread+0x6>
			STACK_ANALYZE("recv thread stack", recv_thread_stack);
    c976:	f240 522c 	movw	r2, #1324	; 0x52c
    c97a:	4911      	ldr	r1, [pc, #68]	; (c9c0 <recv_thread+0xe4>)
    c97c:	4811      	ldr	r0, [pc, #68]	; (c9c4 <recv_thread+0xe8>)
    c97e:	f7ff ff93 	bl	c8a8 <stack_analyze>
    c982:	f015 f995 	bl	21cb0 <_impl_k_uptime_get_32>
			rx_ts = k_uptime_get_32();
    c986:	6028      	str	r0, [r5, #0]
    c988:	e7ab      	b.n	c8e2 <recv_thread+0x6>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
    c98a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    c98e:	f7f9 f835 	bl	59fc <bt_buf_get_rx>
    c992:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
    c994:	4601      	mov	r1, r0
    c996:	9803      	ldr	r0, [sp, #12]
    c998:	f001 facc 	bl	df34 <hci_acl_encode>
    c99c:	e7cf      	b.n	c93e <recv_thread+0x62>
				net_buf_unref(buf);
    c99e:	f00c fca7 	bl	192f0 <net_buf_unref>
    c9a2:	e7de      	b.n	c962 <recv_thread+0x86>
    c9a4:	2000aa2c 	.word	0x2000aa2c
    c9a8:	20000b50 	.word	0x20000b50
    c9ac:	00023dbe 	.word	0x00023dbe
    c9b0:	00022d86 	.word	0x00022d86
    c9b4:	00025594 	.word	0x00025594
    c9b8:	000272e8 	.word	0x000272e8
    c9bc:	00023fb5 	.word	0x00023fb5
    c9c0:	20005c08 	.word	0x20005c08
    c9c4:	00025647 	.word	0x00025647

0000c9c8 <hci_driver_send>:
{
    c9c8:	b530      	push	{r4, r5, lr}
	if (!buf->len) {
    c9ca:	8983      	ldrh	r3, [r0, #12]
{
    c9cc:	b087      	sub	sp, #28
    c9ce:	4605      	mov	r5, r0
	if (!buf->len) {
    c9d0:	b96b      	cbnz	r3, c9ee <hci_driver_send+0x26>
		BT_ERR("Empty HCI packet");
    c9d2:	4b19      	ldr	r3, [pc, #100]	; (ca38 <hci_driver_send+0x70>)
    c9d4:	9301      	str	r3, [sp, #4]
    c9d6:	9300      	str	r3, [sp, #0]
    c9d8:	4a18      	ldr	r2, [pc, #96]	; (ca3c <hci_driver_send+0x74>)
    c9da:	4b19      	ldr	r3, [pc, #100]	; (ca40 <hci_driver_send+0x78>)
    c9dc:	4919      	ldr	r1, [pc, #100]	; (ca44 <hci_driver_send+0x7c>)
    c9de:	481a      	ldr	r0, [pc, #104]	; (ca48 <hci_driver_send+0x80>)
    c9e0:	f7f5 fc5e 	bl	22a0 <printk>
		return -EINVAL;
    c9e4:	f06f 0415 	mvn.w	r4, #21
}
    c9e8:	4620      	mov	r0, r4
    c9ea:	b007      	add	sp, #28
    c9ec:	bd30      	pop	{r4, r5, pc}
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    c9ee:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
    c9f0:	b183      	cbz	r3, ca14 <hci_driver_send+0x4c>
    c9f2:	2b02      	cmp	r3, #2
    c9f4:	d115      	bne.n	ca22 <hci_driver_send+0x5a>
	err = hci_acl_handle(buf, &evt);
    c9f6:	a905      	add	r1, sp, #20
    c9f8:	f001 fa0c 	bl	de14 <hci_acl_handle>
    c9fc:	4604      	mov	r4, r0
	if (evt) {
    c9fe:	9805      	ldr	r0, [sp, #20]
    ca00:	b108      	cbz	r0, ca06 <hci_driver_send+0x3e>
		bt_recv_prio(evt);
    ca02:	f7f8 fdcd 	bl	55a0 <bt_recv_prio>
	if (!err) {
    ca06:	2c00      	cmp	r4, #0
    ca08:	d1ee      	bne.n	c9e8 <hci_driver_send+0x20>
		net_buf_unref(buf);
    ca0a:	4628      	mov	r0, r5
    ca0c:	f00c fc70 	bl	192f0 <net_buf_unref>
    ca10:	2400      	movs	r4, #0
    ca12:	e7e9      	b.n	c9e8 <hci_driver_send+0x20>
	evt = hci_cmd_handle(buf);
    ca14:	f000 fc62 	bl	d2dc <hci_cmd_handle>
	if (evt) {
    ca18:	2800      	cmp	r0, #0
    ca1a:	d0f6      	beq.n	ca0a <hci_driver_send+0x42>
		bt_recv_prio(evt);
    ca1c:	f7f8 fdc0 	bl	55a0 <bt_recv_prio>
    ca20:	e7f3      	b.n	ca0a <hci_driver_send+0x42>
		BT_ERR("Unknown HCI type %u", type);
    ca22:	4a05      	ldr	r2, [pc, #20]	; (ca38 <hci_driver_send+0x70>)
    ca24:	9202      	str	r2, [sp, #8]
    ca26:	e88d 000c 	stmia.w	sp, {r2, r3}
    ca2a:	4906      	ldr	r1, [pc, #24]	; (ca44 <hci_driver_send+0x7c>)
    ca2c:	4b04      	ldr	r3, [pc, #16]	; (ca40 <hci_driver_send+0x78>)
    ca2e:	4a03      	ldr	r2, [pc, #12]	; (ca3c <hci_driver_send+0x74>)
    ca30:	4806      	ldr	r0, [pc, #24]	; (ca4c <hci_driver_send+0x84>)
    ca32:	f7f5 fc35 	bl	22a0 <printk>
    ca36:	e7d5      	b.n	c9e4 <hci_driver_send+0x1c>
    ca38:	00023dbe 	.word	0x00023dbe
    ca3c:	00022d86 	.word	0x00022d86
    ca40:	000255a0 	.word	0x000255a0
    ca44:	000272e8 	.word	0x000272e8
    ca48:	000255fd 	.word	0x000255fd
    ca4c:	0002561e 	.word	0x0002561e

0000ca50 <prio_recv_thread>:
{
    ca50:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    ca54:	4f1d      	ldr	r7, [pc, #116]	; (cacc <prio_recv_thread+0x7c>)
		if (k_uptime_get_32() - prio_ts > K_SECONDS(5)) {
    ca56:	4c1e      	ldr	r4, [pc, #120]	; (cad0 <prio_recv_thread+0x80>)
			STACK_ANALYZE("prio recv thread stack",
    ca58:	4e1e      	ldr	r6, [pc, #120]	; (cad4 <prio_recv_thread+0x84>)
		while ((num_cmplt = ll_rx_get(&node_rx, &handle))) {
    ca5a:	f10d 0102 	add.w	r1, sp, #2
    ca5e:	a801      	add	r0, sp, #4
    ca60:	f009 fab2 	bl	15fc8 <ll_rx_get>
    ca64:	4605      	mov	r5, r0
    ca66:	b940      	cbnz	r0, ca7a <prio_recv_thread+0x2a>
		if (node_rx) {
    ca68:	9b01      	ldr	r3, [sp, #4]
    ca6a:	b1bb      	cbz	r3, ca9c <prio_recv_thread+0x4c>
			ll_rx_dequeue();
    ca6c:	f00a f86e 	bl	16b4c <ll_rx_dequeue>
			k_fifo_put(&recv_fifo, node_rx);
    ca70:	9901      	ldr	r1, [sp, #4]
    ca72:	4819      	ldr	r0, [pc, #100]	; (cad8 <prio_recv_thread+0x88>)
    ca74:	f014 fe53 	bl	2171e <k_queue_append>
    ca78:	e7ef      	b.n	ca5a <prio_recv_thread+0xa>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    ca7a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ca7e:	2001      	movs	r0, #1
    ca80:	f7f8 ffbc 	bl	59fc <bt_buf_get_rx>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    ca84:	462a      	mov	r2, r5
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    ca86:	4680      	mov	r8, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    ca88:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    ca8c:	f001 fd06 	bl	e49c <hci_num_cmplt_encode>
			bt_recv_prio(buf);
    ca90:	4640      	mov	r0, r8
    ca92:	f7f8 fd85 	bl	55a0 <bt_recv_prio>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    ca96:	f015 f811 	bl	21abc <_impl_k_yield>
    ca9a:	e7de      	b.n	ca5a <prio_recv_thread+0xa>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    ca9c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    caa0:	4638      	mov	r0, r7
    caa2:	f015 f8e7 	bl	21c74 <_impl_k_sem_take>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
    caa6:	f015 f903 	bl	21cb0 <_impl_k_uptime_get_32>
		if (k_uptime_get_32() - prio_ts > K_SECONDS(5)) {
    caaa:	6823      	ldr	r3, [r4, #0]
    caac:	1ac0      	subs	r0, r0, r3
    caae:	f241 3388 	movw	r3, #5000	; 0x1388
    cab2:	4298      	cmp	r0, r3
    cab4:	d9d1      	bls.n	ca5a <prio_recv_thread+0xa>
			STACK_ANALYZE("prio recv thread stack",
    cab6:	f44f 723b 	mov.w	r2, #748	; 0x2ec
    caba:	4631      	mov	r1, r6
    cabc:	4807      	ldr	r0, [pc, #28]	; (cadc <prio_recv_thread+0x8c>)
    cabe:	f7ff fef3 	bl	c8a8 <stack_analyze>
    cac2:	f015 f8f5 	bl	21cb0 <_impl_k_uptime_get_32>
			prio_ts = k_uptime_get_32();
    cac6:	6020      	str	r0, [r4, #0]
    cac8:	e7c7      	b.n	ca5a <prio_recv_thread+0xa>
    caca:	bf00      	nop
    cacc:	2000a9e4 	.word	0x2000a9e4
    cad0:	20000b4c 	.word	0x20000b4c
    cad4:	20005918 	.word	0x20005918
    cad8:	2000aa2c 	.word	0x2000aa2c
    cadc:	00025642 	.word	0x00025642

0000cae0 <hci_driver_open>:
{
    cae0:	b510      	push	{r4, lr}
	err = ll_init(&sem_prio_recv);
    cae2:	481a      	ldr	r0, [pc, #104]	; (cb4c <hci_driver_open+0x6c>)
{
    cae4:	b086      	sub	sp, #24
	err = ll_init(&sem_prio_recv);
    cae6:	f00a f90f 	bl	16d08 <ll_init>
	if (err) {
    caea:	4604      	mov	r4, r0
    caec:	b160      	cbz	r0, cb08 <hci_driver_open+0x28>
		BT_ERR("LL initialization failed: %u", err);
    caee:	4b18      	ldr	r3, [pc, #96]	; (cb50 <hci_driver_open+0x70>)
    caf0:	9302      	str	r3, [sp, #8]
    caf2:	e88d 0018 	stmia.w	sp, {r3, r4}
    caf6:	4a17      	ldr	r2, [pc, #92]	; (cb54 <hci_driver_open+0x74>)
    caf8:	4b17      	ldr	r3, [pc, #92]	; (cb58 <hci_driver_open+0x78>)
    cafa:	4918      	ldr	r1, [pc, #96]	; (cb5c <hci_driver_open+0x7c>)
    cafc:	4818      	ldr	r0, [pc, #96]	; (cb60 <hci_driver_open+0x80>)
    cafe:	f7f5 fbcf 	bl	22a0 <printk>
}
    cb02:	4620      	mov	r0, r4
    cb04:	b006      	add	sp, #24
    cb06:	bd10      	pop	{r4, pc}
	hci_init(NULL);
    cb08:	f001 fcf4 	bl	e4f4 <hci_init>

    cb0c:	f06f 0309 	mvn.w	r3, #9
    cb10:	9303      	str	r3, [sp, #12]
    cb12:	9405      	str	r4, [sp, #20]
    cb14:	9404      	str	r4, [sp, #16]
    cb16:	9402      	str	r4, [sp, #8]
    cb18:	9401      	str	r4, [sp, #4]
    cb1a:	9400      	str	r4, [sp, #0]
    cb1c:	4b11      	ldr	r3, [pc, #68]	; (cb64 <hci_driver_open+0x84>)
    cb1e:	4912      	ldr	r1, [pc, #72]	; (cb68 <hci_driver_open+0x88>)
    cb20:	4812      	ldr	r0, [pc, #72]	; (cb6c <hci_driver_open+0x8c>)
    cb22:	f44f 723b 	mov.w	r2, #748	; 0x2ec
    cb26:	f015 fa81 	bl	2202c <_impl_k_thread_create>
    cb2a:	f06f 0307 	mvn.w	r3, #7
    cb2e:	9303      	str	r3, [sp, #12]
    cb30:	9405      	str	r4, [sp, #20]
    cb32:	9404      	str	r4, [sp, #16]
    cb34:	9402      	str	r4, [sp, #8]
    cb36:	9401      	str	r4, [sp, #4]
    cb38:	9400      	str	r4, [sp, #0]
    cb3a:	4b0d      	ldr	r3, [pc, #52]	; (cb70 <hci_driver_open+0x90>)
    cb3c:	490d      	ldr	r1, [pc, #52]	; (cb74 <hci_driver_open+0x94>)
    cb3e:	480e      	ldr	r0, [pc, #56]	; (cb78 <hci_driver_open+0x98>)
    cb40:	f240 522c 	movw	r2, #1324	; 0x52c
    cb44:	f015 fa72 	bl	2202c <_impl_k_thread_create>
    cb48:	e7db      	b.n	cb02 <hci_driver_open+0x22>
    cb4a:	bf00      	nop
    cb4c:	2000a9e4 	.word	0x2000a9e4
    cb50:	00023dbe 	.word	0x00023dbe
    cb54:	00022d86 	.word	0x00022d86
    cb58:	000255b0 	.word	0x000255b0
    cb5c:	000272e8 	.word	0x000272e8
    cb60:	000255d0 	.word	0x000255d0
    cb64:	0000ca51 	.word	0x0000ca51
    cb68:	20005918 	.word	0x20005918
    cb6c:	20003194 	.word	0x20003194
    cb70:	0000c8dd 	.word	0x0000c8dd
    cb74:	20005c08 	.word	0x20005c08
    cb78:	2000312c 	.word	0x2000312c

0000cb7c <sys_put_le32>:
	dst[1] = val >> 8;
    cb7c:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
    cb80:	7008      	strb	r0, [r1, #0]
	sys_put_le16(val >> 16, &dst[2]);
    cb82:	0c00      	lsrs	r0, r0, #16
	dst[0] = val;
    cb84:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
    cb86:	0a00      	lsrs	r0, r0, #8
    cb88:	704b      	strb	r3, [r1, #1]
    cb8a:	70c8      	strb	r0, [r1, #3]
    cb8c:	4770      	bx	lr

0000cb8e <evt_create>:
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
			     u16_t handle, struct net_buf *buf);
#endif /* CONFIG_BT_CONN */

static void evt_create(struct net_buf *buf, u8_t evt, u8_t len)
{
    cb8e:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_hdr *hdr;

	hdr = net_buf_add(buf, sizeof(*hdr));
    cb90:	3008      	adds	r0, #8
{
    cb92:	460d      	mov	r5, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
    cb94:	2102      	movs	r1, #2
{
    cb96:	4614      	mov	r4, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
    cb98:	f00c fc08 	bl	193ac <net_buf_simple_add>
	hdr->evt = evt;
    cb9c:	7005      	strb	r5, [r0, #0]
	hdr->len = len;
    cb9e:	7044      	strb	r4, [r0, #1]
    cba0:	bd38      	pop	{r3, r4, r5, pc}
	...

0000cba4 <cmd_status>:
	return net_buf_add(*buf, plen);
}

#if defined(CONFIG_BT_CONN)
static struct net_buf *cmd_status(u8_t status)
{
    cba4:	b538      	push	{r3, r4, r5, lr}
    cba6:	4605      	mov	r5, r0
	struct bt_hci_evt_cmd_status *cs;
	struct net_buf *buf;

	buf = bt_buf_get_cmd_complete(K_FOREVER);
    cba8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    cbac:	f7f8 ff36 	bl	5a1c <bt_buf_get_cmd_complete>
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    cbb0:	2204      	movs	r2, #4
	buf = bt_buf_get_cmd_complete(K_FOREVER);
    cbb2:	4604      	mov	r4, r0
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    cbb4:	210f      	movs	r1, #15
    cbb6:	f7ff ffea 	bl	cb8e <evt_create>

	cs = net_buf_add(buf, sizeof(*cs));
    cbba:	2104      	movs	r1, #4
    cbbc:	f104 0008 	add.w	r0, r4, #8
    cbc0:	f00c fbf4 	bl	193ac <net_buf_simple_add>
	cs->status = status;
	cs->ncmd = 1;
    cbc4:	2301      	movs	r3, #1
    cbc6:	7043      	strb	r3, [r0, #1]
	cs->opcode = sys_cpu_to_le16(_opcode);
    cbc8:	4b02      	ldr	r3, [pc, #8]	; (cbd4 <cmd_status+0x30>)
	cs->status = status;
    cbca:	7005      	strb	r5, [r0, #0]
	cs->opcode = sys_cpu_to_le16(_opcode);
    cbcc:	881b      	ldrh	r3, [r3, #0]
    cbce:	8043      	strh	r3, [r0, #2]

	return buf;
}
    cbd0:	4620      	mov	r0, r4
    cbd2:	bd38      	pop	{r3, r4, r5, pc}
    cbd4:	20000b54 	.word	0x20000b54

0000cbd8 <meta_evt>:
#endif

static void *meta_evt(struct net_buf *buf, u8_t subevt, u8_t melen)
{
    cbd8:	b570      	push	{r4, r5, r6, lr}
    cbda:	4604      	mov	r4, r0
    cbdc:	4615      	mov	r5, r2
	struct bt_hci_evt_le_meta_event *me;

	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    cbde:	3201      	adds	r2, #1
{
    cbe0:	460e      	mov	r6, r1
	me = net_buf_add(buf, sizeof(*me));
    cbe2:	3408      	adds	r4, #8
	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    cbe4:	b2d2      	uxtb	r2, r2
    cbe6:	213e      	movs	r1, #62	; 0x3e
    cbe8:	f7ff ffd1 	bl	cb8e <evt_create>
	me = net_buf_add(buf, sizeof(*me));
    cbec:	2101      	movs	r1, #1
    cbee:	4620      	mov	r0, r4
    cbf0:	f00c fbdc 	bl	193ac <net_buf_simple_add>
	me->subevent = subevt;
    cbf4:	7006      	strb	r6, [r0, #0]

	return net_buf_add(buf, melen);
    cbf6:	4629      	mov	r1, r5
    cbf8:	4620      	mov	r0, r4
}
    cbfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return net_buf_add(buf, melen);
    cbfe:	f00c bbd5 	b.w	193ac <net_buf_simple_add>
	...

0000cc04 <cmd_complete>:
{
    cc04:	b538      	push	{r3, r4, r5, lr}
    cc06:	4604      	mov	r4, r0
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    cc08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
{
    cc0c:	460d      	mov	r5, r1
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    cc0e:	f7f8 ff05 	bl	5a1c <bt_buf_get_cmd_complete>
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    cc12:	1cea      	adds	r2, r5, #3
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    cc14:	6020      	str	r0, [r4, #0]
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    cc16:	b2d2      	uxtb	r2, r2
    cc18:	210e      	movs	r1, #14
    cc1a:	f7ff ffb8 	bl	cb8e <evt_create>
	cc = net_buf_add(*buf, sizeof(*cc));
    cc1e:	6820      	ldr	r0, [r4, #0]
    cc20:	2103      	movs	r1, #3
    cc22:	3008      	adds	r0, #8
    cc24:	f00c fbc2 	bl	193ac <net_buf_simple_add>
	cc->ncmd = 1;
    cc28:	2301      	movs	r3, #1
    cc2a:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(_opcode);
    cc2c:	4b05      	ldr	r3, [pc, #20]	; (cc44 <cmd_complete+0x40>)
    cc2e:	881b      	ldrh	r3, [r3, #0]
    cc30:	f8a0 3001 	strh.w	r3, [r0, #1]
	return net_buf_add(*buf, plen);
    cc34:	6820      	ldr	r0, [r4, #0]
    cc36:	4629      	mov	r1, r5
    cc38:	3008      	adds	r0, #8
}
    cc3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_buf_add(*buf, plen);
    cc3e:	f00c bbb5 	b.w	193ac <net_buf_simple_add>
    cc42:	bf00      	nop
    cc44:	20000b54 	.word	0x20000b54

0000cc48 <le_advertising_report>:
}
#endif /* CONFIG_BT_CTLR_DUP_FILTER_LEN > 0 */

static void le_advertising_report(struct pdu_data *pdu_data, u8_t *b,
				  struct net_buf *buf)
{
    cc48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cc4c:	b087      	sub	sp, #28
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    cc4e:	2301      	movs	r3, #1
    cc50:	f88d 3011 	strb.w	r3, [sp, #17]
    cc54:	2303      	movs	r3, #3
    cc56:	f88d 3012 	strb.w	r3, [sp, #18]
    cc5a:	23ff      	movs	r3, #255	; 0xff
    cc5c:	f88d 3013 	strb.w	r3, [sp, #19]
    cc60:	f88d 3015 	strb.w	r3, [sp, #21]
    cc64:	2302      	movs	r3, #2
    cc66:	f88d 3016 	strb.w	r3, [sp, #22]
	u8_t direct;
#endif /* CONFIG_BT_CTLR_EXT_SCAN_FP */
	s8_t *prssi;

#if defined(CONFIG_BT_CTLR_PRIVACY)
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    cc6a:	7843      	ldrb	r3, [r0, #1]
{
    cc6c:	4688      	mov	r8, r1
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    cc6e:	4443      	add	r3, r8
{
    cc70:	4604      	mov	r4, r0
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    cc72:	7add      	ldrb	r5, [r3, #11]
		   offsetof(struct pdu_adv, payload) + adv->len + 1];
	/* Update current RPA */
	if (adv->tx_addr) {
    cc74:	7803      	ldrb	r3, [r0, #0]
{
    cc76:	4693      	mov	fp, r2
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    cc78:	2100      	movs	r1, #0
    cc7a:	2204      	movs	r2, #4
	if (adv->tx_addr) {
    cc7c:	0658      	lsls	r0, r3, #25
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    cc7e:	f88d 1010 	strb.w	r1, [sp, #16]
    cc82:	f88d 2014 	strb.w	r2, [sp, #20]
	if (adv->tx_addr) {
    cc86:	d504      	bpl.n	cc92 <le_advertising_report+0x4a>
		ll_rl_crpa_set(0x00, NULL, rl_idx, &adv->adv_ind.addr[0]);
    cc88:	1ca3      	adds	r3, r4, #2
    cc8a:	462a      	mov	r2, r5
    cc8c:	4608      	mov	r0, r1
    cc8e:	f00b fac1 	bl	18214 <ll_rl_crpa_set>
	}
#endif

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    cc92:	4b7d      	ldr	r3, [pc, #500]	; (ce88 <le_advertising_report+0x240>)
    cc94:	e9d3 2300 	ldrd	r2, r3, [r3]
    cc98:	2200      	movs	r2, #0
    cc9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    cc9e:	4313      	orrs	r3, r2
    cca0:	f000 80ae 	beq.w	ce00 <le_advertising_report+0x1b8>
		return;
	}

#if defined(CONFIG_BT_CTLR_EXT_SCAN_FP)
	direct = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    cca4:	7863      	ldrb	r3, [r4, #1]
    cca6:	4443      	add	r3, r8
    cca8:	f893 a00c 	ldrb.w	sl, [r3, #12]
    ccac:	4b77      	ldr	r3, [pc, #476]	; (ce8c <le_advertising_report+0x244>)
		   offsetof(struct pdu_adv, payload) + adv->len + 2];

	if ((!direct && !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) ||
    ccae:	e9d3 2300 	ldrd	r2, r3, [r3]
    ccb2:	f1ba 0f00 	cmp.w	sl, #0
    ccb6:	d138      	bne.n	cd2a <le_advertising_report+0xe2>
    ccb8:	f002 0202 	and.w	r2, r2, #2
	    (direct && !(le_event_mask & BT_HCI_EVT_LE_DIRECT_ADV_REPORT))) {
    ccbc:	2300      	movs	r3, #0
    ccbe:	4313      	orrs	r3, r2
    ccc0:	f000 809e 	beq.w	ce00 <le_advertising_report+0x1b8>
	if (dup_count >= 0) {
    ccc4:	4f72      	ldr	r7, [pc, #456]	; (ce90 <le_advertising_report+0x248>)
    ccc6:	683b      	ldr	r3, [r7, #0]
    ccc8:	2b00      	cmp	r3, #0
    ccca:	db50      	blt.n	cd6e <le_advertising_report+0x126>
    cccc:	f8df 91e0 	ldr.w	r9, [pc, #480]	; ceb0 <le_advertising_report+0x268>
    ccd0:	2600      	movs	r6, #0
    ccd2:	1ca3      	adds	r3, r4, #2
		for (i = 0; i < dup_count; i++) {
    ccd4:	683a      	ldr	r2, [r7, #0]
    ccd6:	4296      	cmp	r6, r2
    ccd8:	db2a      	blt.n	cd30 <le_advertising_report+0xe8>
		memcpy(&dup_filter[dup_curr].addr.a.val[0],
    ccda:	4e6e      	ldr	r6, [pc, #440]	; (ce94 <le_advertising_report+0x24c>)
    ccdc:	f8df 91b8 	ldr.w	r9, [pc, #440]	; ce98 <le_advertising_report+0x250>
    cce0:	6830      	ldr	r0, [r6, #0]
    cce2:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
    cce6:	4619      	mov	r1, r3
    cce8:	2206      	movs	r2, #6
    ccea:	3002      	adds	r0, #2
    ccec:	f7f3 fd51 	bl	792 <memcpy>
		dup_filter[dup_curr].addr.type = adv->tx_addr;
    ccf0:	6832      	ldr	r2, [r6, #0]
    ccf2:	7823      	ldrb	r3, [r4, #0]
    ccf4:	eb09 01c2 	add.w	r1, r9, r2, lsl #3
    ccf8:	f3c3 1380 	ubfx	r3, r3, #6, #1
    ccfc:	704b      	strb	r3, [r1, #1]
		dup_filter[dup_curr].mask = BIT(adv->type);
    ccfe:	7823      	ldrb	r3, [r4, #0]
    cd00:	f003 010f 	and.w	r1, r3, #15
    cd04:	2301      	movs	r3, #1
    cd06:	408b      	lsls	r3, r1
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    cd08:	6839      	ldr	r1, [r7, #0]
		dup_filter[dup_curr].mask = BIT(adv->type);
    cd0a:	f809 3032 	strb.w	r3, [r9, r2, lsl #3]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    cd0e:	290f      	cmp	r1, #15
			dup_count++;
    cd10:	bfd5      	itete	le
    cd12:	3101      	addle	r1, #1
			dup_curr++;
    cd14:	3201      	addgt	r2, #1
			dup_curr = dup_count;
    cd16:	6031      	strle	r1, [r6, #0]
			dup_curr++;
    cd18:	6032      	strgt	r2, [r6, #0]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    cd1a:	6832      	ldr	r2, [r6, #0]
			dup_count++;
    cd1c:	bfd8      	it	le
    cd1e:	6039      	strle	r1, [r7, #0]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    cd20:	2a10      	cmp	r2, #16
    cd22:	d124      	bne.n	cd6e <le_advertising_report+0x126>
			dup_curr = 0;
    cd24:	2200      	movs	r2, #0
    cd26:	6032      	str	r2, [r6, #0]
    cd28:	e021      	b.n	cd6e <le_advertising_report+0x126>
	    (direct && !(le_event_mask & BT_HCI_EVT_LE_DIRECT_ADV_REPORT))) {
    cd2a:	f002 020b 	and.w	r2, r2, #11
    cd2e:	e7c5      	b.n	ccbc <le_advertising_report+0x74>
			if (!memcmp(&adv->adv_ind.addr[0],
    cd30:	4618      	mov	r0, r3
    cd32:	2206      	movs	r2, #6
    cd34:	4649      	mov	r1, r9
    cd36:	9303      	str	r3, [sp, #12]
    cd38:	f7f3 fcfe 	bl	738 <memcmp>
    cd3c:	9b03      	ldr	r3, [sp, #12]
    cd3e:	b9f0      	cbnz	r0, cd7e <le_advertising_report+0x136>
			    adv->tx_addr == dup_filter[i].addr.type) {
    cd40:	7821      	ldrb	r1, [r4, #0]
    cd42:	f819 0c01 	ldrb.w	r0, [r9, #-1]
    cd46:	460a      	mov	r2, r1
    cd48:	f3c1 1180 	ubfx	r1, r1, #6, #1
				    sizeof(bt_addr_t)) &&
    cd4c:	4281      	cmp	r1, r0
    cd4e:	d116      	bne.n	cd7e <le_advertising_report+0x136>
				if (dup_filter[i].mask & BIT(adv->type)) {
    cd50:	4851      	ldr	r0, [pc, #324]	; (ce98 <le_advertising_report+0x250>)
    cd52:	f810 3036 	ldrb.w	r3, [r0, r6, lsl #3]
    cd56:	f002 020f 	and.w	r2, r2, #15
    cd5a:	fa23 f102 	lsr.w	r1, r3, r2
    cd5e:	07c9      	lsls	r1, r1, #31
    cd60:	d44e      	bmi.n	ce00 <le_advertising_report+0x1b8>
				dup_filter[i].mask |= BIT(adv->type);
    cd62:	2101      	movs	r1, #1
    cd64:	fa01 f202 	lsl.w	r2, r1, r2
    cd68:	4313      	orrs	r3, r2
    cd6a:	f800 3036 	strb.w	r3, [r0, r6, lsl #3]
	if (dup_found(adv)) {
		return;
	}
#endif /* CONFIG_BT_CTLR_DUP_FILTER_LEN > 0 */

	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    cd6e:	7823      	ldrb	r3, [r4, #0]
    cd70:	7862      	ldrb	r2, [r4, #1]
    cd72:	f003 030f 	and.w	r3, r3, #15
    cd76:	2b01      	cmp	r3, #1
    cd78:	d105      	bne.n	cd86 <le_advertising_report+0x13e>
		data_len = (adv->len - BDADDR_SIZE);
	} else {
		data_len = 0;
    cd7a:	2600      	movs	r6, #0
    cd7c:	e005      	b.n	cd8a <le_advertising_report+0x142>
		for (i = 0; i < dup_count; i++) {
    cd7e:	3601      	adds	r6, #1
    cd80:	f109 0908 	add.w	r9, r9, #8
    cd84:	e7a6      	b.n	ccd4 <le_advertising_report+0x8c>
		data_len = (adv->len - BDADDR_SIZE);
    cd86:	1f96      	subs	r6, r2, #6
    cd88:	b2f6      	uxtb	r6, r6
	}

	/* The Link Layer currently returns RSSI as an absolute value */
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    cd8a:	4442      	add	r2, r8
    cd8c:	f104 0908 	add.w	r9, r4, #8
    cd90:	7a97      	ldrb	r7, [r2, #10]
    cd92:	427f      	negs	r7, r7
    cd94:	b27f      	sxtb	r7, r7
		  offsetof(struct pdu_adv, payload) + adv->len];

#if defined(CONFIG_BT_CTLR_EXT_SCAN_FP)
	if (direct) {
    cd96:	f1ba 0f00 	cmp.w	sl, #0
    cd9a:	d03e      	beq.n	ce1a <le_advertising_report+0x1d2>
		struct bt_hci_evt_le_direct_adv_report *drp;
		struct bt_hci_evt_le_direct_adv_info *dir_info;

		LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
    cd9c:	2b01      	cmp	r3, #1
    cd9e:	d00e      	beq.n	cdbe <le_advertising_report+0x176>
    cda0:	4b3e      	ldr	r3, [pc, #248]	; (ce9c <le_advertising_report+0x254>)
    cda2:	9301      	str	r3, [sp, #4]
    cda4:	9300      	str	r3, [sp, #0]
    cda6:	4a3e      	ldr	r2, [pc, #248]	; (cea0 <le_advertising_report+0x258>)
    cda8:	4b3e      	ldr	r3, [pc, #248]	; (cea4 <le_advertising_report+0x25c>)
    cdaa:	493f      	ldr	r1, [pc, #252]	; (cea8 <le_advertising_report+0x260>)
    cdac:	483f      	ldr	r0, [pc, #252]	; (ceac <le_advertising_report+0x264>)
    cdae:	f7f5 fa77 	bl	22a0 <printk>
    cdb2:	4040      	eors	r0, r0
    cdb4:	f380 8811 	msr	BASEPRI, r0
    cdb8:	f04f 0004 	mov.w	r0, #4
    cdbc:	df02      	svc	2
		drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
    cdbe:	2211      	movs	r2, #17
    cdc0:	210b      	movs	r1, #11
    cdc2:	4658      	mov	r0, fp
    cdc4:	9303      	str	r3, [sp, #12]
    cdc6:	f7ff ff07 	bl	cbd8 <meta_evt>
			       sizeof(*drp) + sizeof(*dir_info));

		drp->num_reports = 1;
    cdca:	9b03      	ldr	r3, [sp, #12]
    cdcc:	7003      	strb	r3, [r0, #0]
		dir_info = (void *)(((u8_t *)drp) + sizeof(*drp));

		dir_info->evt_type = c_adv_type[PDU_ADV_TYPE_DIRECT_IND];
    cdce:	7043      	strb	r3, [r0, #1]
		drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
    cdd0:	4606      	mov	r6, r0

#if defined(CONFIG_BT_CTLR_PRIVACY)
		if (rl_idx < ll_rl_size_get()) {
    cdd2:	f00b f8f5 	bl	17fc0 <ll_rl_size_get>
    cdd6:	4285      	cmp	r5, r0
    cdd8:	f106 0003 	add.w	r0, r6, #3
    cddc:	d213      	bcs.n	ce06 <le_advertising_report+0x1be>
			/* Store identity address */
			ll_rl_id_addr_get(rl_idx, &dir_info->addr.type,
    cdde:	4602      	mov	r2, r0
    cde0:	1cb1      	adds	r1, r6, #2
    cde2:	4628      	mov	r0, r5
    cde4:	f00a fec0 	bl	17b68 <ll_rl_id_addr_get>
					  &dir_info->addr.a.val[0]);
			/* Mark it as identity address from RPA (0x02, 0x03) */
			dir_info->addr.type += 2;
    cde8:	78b3      	ldrb	r3, [r6, #2]
    cdea:	3302      	adds	r3, #2
    cdec:	70b3      	strb	r3, [r6, #2]
			memcpy(&dir_info->addr.a.val[0],
			       &adv->direct_ind.adv_addr[0],
			       sizeof(bt_addr_t));
		}

		dir_info->dir_addr.type = 0x1;
    cdee:	2301      	movs	r3, #1
    cdf0:	7273      	strb	r3, [r6, #9]
		memcpy(&dir_info->dir_addr.a.val[0],
    cdf2:	2206      	movs	r2, #6
    cdf4:	4649      	mov	r1, r9
    cdf6:	f106 000a 	add.w	r0, r6, #10
    cdfa:	f7f3 fcca 	bl	792 <memcpy>
		       &adv->direct_ind.tgt_addr[0], sizeof(bt_addr_t));

		dir_info->rssi = rssi;
    cdfe:	7437      	strb	r7, [r6, #16]
	adv_info->length = data_len;
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
	/* RSSI */
	prssi = &adv_info->data[0] + data_len;
	*prssi = rssi;
}
    ce00:	b007      	add	sp, #28
    ce02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			dir_info->addr.type = adv->tx_addr;
    ce06:	4621      	mov	r1, r4
			memcpy(&dir_info->addr.a.val[0],
    ce08:	2206      	movs	r2, #6
			dir_info->addr.type = adv->tx_addr;
    ce0a:	f811 3b02 	ldrb.w	r3, [r1], #2
    ce0e:	f3c3 1380 	ubfx	r3, r3, #6, #1
    ce12:	70b3      	strb	r3, [r6, #2]
			memcpy(&dir_info->addr.a.val[0],
    ce14:	f7f3 fcbd 	bl	792 <memcpy>
    ce18:	e7e9      	b.n	cdee <le_advertising_report+0x1a6>
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    ce1a:	f106 020b 	add.w	r2, r6, #11
    ce1e:	b2d2      	uxtb	r2, r2
    ce20:	2102      	movs	r1, #2
    ce22:	4658      	mov	r0, fp
    ce24:	f7ff fed8 	bl	cbd8 <meta_evt>
	sep->num_reports = 1;
    ce28:	2301      	movs	r3, #1
    ce2a:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
    ce2c:	7823      	ldrb	r3, [r4, #0]
    ce2e:	aa06      	add	r2, sp, #24
    ce30:	f003 030f 	and.w	r3, r3, #15
    ce34:	4413      	add	r3, r2
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    ce36:	4605      	mov	r5, r0
	adv_info->evt_type = c_adv_type[adv->type];
    ce38:	f813 3c08 	ldrb.w	r3, [r3, #-8]
    ce3c:	7043      	strb	r3, [r0, #1]
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    ce3e:	7863      	ldrb	r3, [r4, #1]
    ce40:	4498      	add	r8, r3
    ce42:	f898 800b 	ldrb.w	r8, [r8, #11]
	if (rl_idx < ll_rl_size_get()) {
    ce46:	f00b f8bb 	bl	17fc0 <ll_rl_size_get>
    ce4a:	4580      	cmp	r8, r0
    ce4c:	f105 0003 	add.w	r0, r5, #3
    ce50:	d210      	bcs.n	ce74 <le_advertising_report+0x22c>
		ll_rl_id_addr_get(rl_idx, &adv_info->addr.type,
    ce52:	4602      	mov	r2, r0
    ce54:	1ca9      	adds	r1, r5, #2
    ce56:	4640      	mov	r0, r8
    ce58:	f00a fe86 	bl	17b68 <ll_rl_id_addr_get>
		adv_info->addr.type += 2;
    ce5c:	78ab      	ldrb	r3, [r5, #2]
    ce5e:	3302      	adds	r3, #2
    ce60:	70ab      	strb	r3, [r5, #2]
	adv_info->length = data_len;
    ce62:	726e      	strb	r6, [r5, #9]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    ce64:	350a      	adds	r5, #10
    ce66:	4632      	mov	r2, r6
    ce68:	4649      	mov	r1, r9
    ce6a:	4628      	mov	r0, r5
    ce6c:	f7f3 fc91 	bl	792 <memcpy>
	*prssi = rssi;
    ce70:	55af      	strb	r7, [r5, r6]
    ce72:	e7c5      	b.n	ce00 <le_advertising_report+0x1b8>
		adv_info->addr.type = adv->tx_addr;
    ce74:	4621      	mov	r1, r4
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
    ce76:	2206      	movs	r2, #6
		adv_info->addr.type = adv->tx_addr;
    ce78:	f811 3b02 	ldrb.w	r3, [r1], #2
    ce7c:	f3c3 1380 	ubfx	r3, r3, #6, #1
    ce80:	70ab      	strb	r3, [r5, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
    ce82:	f7f3 fc86 	bl	792 <memcpy>
    ce86:	e7ec      	b.n	ce62 <le_advertising_report+0x21a>
    ce88:	20009fb8 	.word	0x20009fb8
    ce8c:	20009fc0 	.word	0x20009fc0
    ce90:	20000b5c 	.word	0x20000b5c
    ce94:	20000b60 	.word	0x20000b60
    ce98:	20000b64 	.word	0x20000b64
    ce9c:	00023dbe 	.word	0x00023dbe
    cea0:	00022d86 	.word	0x00022d86
    cea4:	0002568d 	.word	0x0002568d
    cea8:	000272e8 	.word	0x000272e8
    ceac:	0002599e 	.word	0x0002599e
    ceb0:	20000b66 	.word	0x20000b66

0000ceb4 <encrypt_change>:
static void encrypt_change(u8_t err, u16_t handle,
			   struct net_buf *buf)
{
	struct bt_hci_evt_encrypt_change *ep;

	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    ceb4:	4b0e      	ldr	r3, [pc, #56]	; (cef0 <encrypt_change+0x3c>)
{
    ceb6:	b570      	push	{r4, r5, r6, lr}
    ceb8:	4615      	mov	r5, r2
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    ceba:	e9d3 2300 	ldrd	r2, r3, [r3]
    cebe:	2300      	movs	r3, #0
    cec0:	f002 0280 	and.w	r2, r2, #128	; 0x80
    cec4:	4313      	orrs	r3, r2
{
    cec6:	4604      	mov	r4, r0
    cec8:	460e      	mov	r6, r1
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    ceca:	d010      	beq.n	ceee <encrypt_change+0x3a>
		return;
	}

	evt_create(buf, BT_HCI_EVT_ENCRYPT_CHANGE, sizeof(*ep));
    cecc:	2204      	movs	r2, #4
    cece:	2108      	movs	r1, #8
    ced0:	4628      	mov	r0, r5
    ced2:	f7ff fe5c 	bl	cb8e <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    ced6:	2104      	movs	r1, #4
    ced8:	f105 0008 	add.w	r0, r5, #8
    cedc:	f00c fa66 	bl	193ac <net_buf_simple_add>

	ep->status = err;
	ep->handle = sys_cpu_to_le16(handle);
	ep->encrypt = !err ? 1 : 0;
    cee0:	fab4 f384 	clz	r3, r4
    cee4:	095b      	lsrs	r3, r3, #5
	ep->status = err;
    cee6:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    cee8:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
    ceec:	70c3      	strb	r3, [r0, #3]
    ceee:	bd70      	pop	{r4, r5, r6, pc}
    cef0:	20009fb8 	.word	0x20009fb8

0000cef4 <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
    cef4:	b570      	push	{r4, r5, r6, lr}
    cef6:	4604      	mov	r4, r0
    cef8:	4618      	mov	r0, r3
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    cefa:	4b13      	ldr	r3, [pc, #76]	; (cf48 <le_remote_feat_complete+0x54>)
{
    cefc:	4616      	mov	r6, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    cefe:	e9d3 2300 	ldrd	r2, r3, [r3]
    cf02:	2200      	movs	r2, #0
    cf04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    cf08:	4313      	orrs	r3, r2
{
    cf0a:	460d      	mov	r5, r1
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    cf0c:	d01b      	beq.n	cf46 <le_remote_feat_complete+0x52>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    cf0e:	4b0f      	ldr	r3, [pc, #60]	; (cf4c <le_remote_feat_complete+0x58>)
    cf10:	e9d3 2300 	ldrd	r2, r3, [r3]
    cf14:	2300      	movs	r3, #0
    cf16:	f002 0208 	and.w	r2, r2, #8
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    cf1a:	4313      	orrs	r3, r2
    cf1c:	d013      	beq.n	cf46 <le_remote_feat_complete+0x52>
		return;
	}

	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
    cf1e:	220b      	movs	r2, #11
    cf20:	2104      	movs	r1, #4
    cf22:	f7ff fe59 	bl	cbd8 <meta_evt>

	sep->status = status;
	sep->handle = sys_cpu_to_le16(handle);
	if (!status) {
		memcpy(&sep->features[0],
    cf26:	2208      	movs	r2, #8
	sep->status = status;
    cf28:	7004      	strb	r4, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    cf2a:	f8a0 6001 	strh.w	r6, [r0, #1]
    cf2e:	3003      	adds	r0, #3
	if (!status) {
    cf30:	b924      	cbnz	r4, cf3c <le_remote_feat_complete+0x48>
		memcpy(&sep->features[0],
    cf32:	1d29      	adds	r1, r5, #4
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
    cf34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(&sep->features[0],
    cf38:	f7f3 bc2b 	b.w	792 <memcpy>
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    cf3c:	2100      	movs	r1, #0
}
    cf3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    cf42:	f7f3 bc52 	b.w	7ea <memset>
    cf46:	bd70      	pop	{r4, r5, r6, pc}
    cf48:	20009fb8 	.word	0x20009fb8
    cf4c:	20009fc0 	.word	0x20009fc0

0000cf50 <le_set_adv_param.isra.37>:
static void le_set_adv_param(struct net_buf *buf, struct net_buf **evt)
    cf50:	b5f0      	push	{r4, r5, r6, r7, lr}
    cf52:	b08b      	sub	sp, #44	; 0x2c
	status = ll_adv_params_set(cmd->handle, cmd->props, min_interval,
    cf54:	2400      	movs	r4, #0
    cf56:	7a03      	ldrb	r3, [r0, #8]
    cf58:	f8b0 2003 	ldrh.w	r2, [r0, #3]
    cf5c:	7806      	ldrb	r6, [r0, #0]
static void le_set_adv_param(struct net_buf *buf, struct net_buf **evt)
    cf5e:	460d      	mov	r5, r1
	status = ll_adv_params_set(cmd->handle, cmd->props, min_interval,
    cf60:	f8b0 1001 	ldrh.w	r1, [r0, #1]
    cf64:	9409      	str	r4, [sp, #36]	; 0x24
    cf66:	7d47      	ldrb	r7, [r0, #21]
    cf68:	9708      	str	r7, [sp, #32]
    cf6a:	7d07      	ldrb	r7, [r0, #20]
    cf6c:	9707      	str	r7, [sp, #28]
    cf6e:	7cc7      	ldrb	r7, [r0, #19]
    cf70:	9706      	str	r7, [sp, #24]
    cf72:	7c87      	ldrb	r7, [r0, #18]
    cf74:	9705      	str	r7, [sp, #20]
    cf76:	9404      	str	r4, [sp, #16]
    cf78:	7c04      	ldrb	r4, [r0, #16]
    cf7a:	9403      	str	r4, [sp, #12]
    cf7c:	79c4      	ldrb	r4, [r0, #7]
    cf7e:	9402      	str	r4, [sp, #8]
				   &cmd->direct_addr.a.val[0], cmd->prim_channel_map,
    cf80:	f100 040a 	add.w	r4, r0, #10
	status = ll_adv_params_set(cmd->handle, cmd->props, min_interval,
    cf84:	9401      	str	r4, [sp, #4]
    cf86:	7a40      	ldrb	r0, [r0, #9]
    cf88:	9000      	str	r0, [sp, #0]
    cf8a:	4630      	mov	r0, r6
    cf8c:	f009 ff66 	bl	16e5c <ll_adv_params_set>
	ccst = cmd_complete(evt, sizeof(*ccst));
    cf90:	2102      	movs	r1, #2
	status = ll_adv_params_set(cmd->handle, cmd->props, min_interval,
    cf92:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    cf94:	4628      	mov	r0, r5
    cf96:	f7ff fe35 	bl	cc04 <cmd_complete>
	status = ll_adv_params_set(cmd->handle, cmd->props, min_interval,
    cf9a:	7004      	strb	r4, [r0, #0]
}
    cf9c:	b00b      	add	sp, #44	; 0x2c
    cf9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000cfa0 <le_set_adv_enable.isra.40>:
static void le_set_adv_enable(struct net_buf *buf, struct net_buf **evt)
    cfa0:	b538      	push	{r3, r4, r5, lr}
	status = ll_adv_enable(cmd->enable);
    cfa2:	7800      	ldrb	r0, [r0, #0]
static void le_set_adv_enable(struct net_buf *buf, struct net_buf **evt)
    cfa4:	460d      	mov	r5, r1
	status = ll_adv_enable(cmd->enable);
    cfa6:	f00a f9d7 	bl	17358 <ll_adv_enable>
	ccst = cmd_complete(evt, sizeof(*ccst));
    cfaa:	2101      	movs	r1, #1
	status = ll_adv_enable(cmd->enable);
    cfac:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    cfae:	4628      	mov	r0, r5
    cfb0:	f7ff fe28 	bl	cc04 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    cfb4:	2c00      	cmp	r4, #0
    cfb6:	bf0c      	ite	eq
    cfb8:	2300      	moveq	r3, #0
    cfba:	230c      	movne	r3, #12
    cfbc:	7003      	strb	r3, [r0, #0]
    cfbe:	bd38      	pop	{r3, r4, r5, pc}

0000cfc0 <le_conn_complete.part.44>:
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
    cfc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cfc4:	4605      	mov	r5, r0
    cfc6:	4618      	mov	r0, r3
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    cfc8:	4b46      	ldr	r3, [pc, #280]	; (d0e4 <le_conn_complete.part.44+0x124>)
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
    cfca:	4616      	mov	r6, r2
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    cfcc:	e9d3 2300 	ldrd	r2, r3, [r3]
    cfd0:	f240 2801 	movw	r8, #513	; 0x201
    cfd4:	f04f 0900 	mov.w	r9, #0
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    cfd8:	f402 7a00 	and.w	sl, r2, #512	; 0x200
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    cfdc:	ea03 0309 	and.w	r3, r3, r9
    cfe0:	ea02 0208 	and.w	r2, r2, r8
    cfe4:	4313      	orrs	r3, r2
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
    cfe6:	460c      	mov	r4, r1
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    cfe8:	f04f 0b00 	mov.w	fp, #0
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    cfec:	d077      	beq.n	d0de <le_conn_complete.part.44+0x11e>
	if (!status) {
    cfee:	2d00      	cmp	r5, #0
    cff0:	d150      	bne.n	d094 <le_conn_complete.part.44+0xd4>
		conn_count++;
    cff2:	4a3d      	ldr	r2, [pc, #244]	; (d0e8 <le_conn_complete.part.44+0x128>)
    cff4:	6813      	ldr	r3, [r2, #0]
    cff6:	3301      	adds	r3, #1
    cff8:	6013      	str	r3, [r2, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    cffa:	ea5a 030b 	orrs.w	r3, sl, fp
    cffe:	f101 0803 	add.w	r8, r1, #3
    d002:	d151      	bne.n	d0a8 <le_conn_complete.part.44+0xe8>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    d004:	2212      	movs	r2, #18
    d006:	2101      	movs	r1, #1
    d008:	f7ff fde6 	bl	cbd8 <meta_evt>
	lecc->status = 0x00;
    d00c:	7005      	strb	r5, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
    d00e:	f8a0 6001 	strh.w	r6, [r0, #1]
	lecc->role = radio_cc->role;
    d012:	7863      	ldrb	r3, [r4, #1]
    d014:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = radio_cc->peer_addr_type;
    d016:	78a3      	ldrb	r3, [r4, #2]
    d018:	7103      	strb	r3, [r0, #4]
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    d01a:	4607      	mov	r7, r0
	memcpy(&lecc->peer_addr.a.val[0], &radio_cc->peer_addr[0], BDADDR_SIZE);
    d01c:	2206      	movs	r2, #6
    d01e:	4641      	mov	r1, r8
    d020:	3005      	adds	r0, #5
    d022:	f7f3 fbb6 	bl	792 <memcpy>
	lecc->interval = sys_cpu_to_le16(radio_cc->interval);
    d026:	8ae3      	ldrh	r3, [r4, #22]
    d028:	f8a7 300b 	strh.w	r3, [r7, #11]
	lecc->latency = sys_cpu_to_le16(radio_cc->latency);
    d02c:	8b23      	ldrh	r3, [r4, #24]
    d02e:	f8a7 300d 	strh.w	r3, [r7, #13]
	lecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    d032:	8b63      	ldrh	r3, [r4, #26]
    d034:	f8a7 300f 	strh.w	r3, [r7, #15]
	lecc->clock_accuracy = radio_cc->mca;
    d038:	7f23      	ldrb	r3, [r4, #28]
    d03a:	747b      	strb	r3, [r7, #17]
    d03c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    d040:	221e      	movs	r2, #30
    d042:	210a      	movs	r1, #10
    d044:	f7ff fdc8 	bl	cbd8 <meta_evt>
			memset(leecc, 0x00, sizeof(*leecc));
    d048:	221e      	movs	r2, #30
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    d04a:	4604      	mov	r4, r0
		memset(lecc, 0x00, sizeof(*lecc));
    d04c:	2100      	movs	r1, #0
    d04e:	f7f3 fbcc 	bl	7ea <memset>
		lecc->status = status;
    d052:	7025      	strb	r5, [r4, #0]
    d054:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((radio_cc->own_addr_type) &&
    d058:	7d63      	ldrb	r3, [r4, #21]
    d05a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    d05e:	2b40      	cmp	r3, #64	; 0x40
    d060:	d138      	bne.n	d0d4 <le_conn_complete.part.44+0x114>
			memcpy(&leecc->local_rpa.val[0], &radio_cc->own_addr[0],
    d062:	2206      	movs	r2, #6
    d064:	f104 0110 	add.w	r1, r4, #16
    d068:	f7f3 fb93 	bl	792 <memcpy>
		memcpy(&leecc->peer_rpa.val[0], &radio_cc->peer_rpa[0],
    d06c:	2206      	movs	r2, #6
    d06e:	f104 0109 	add.w	r1, r4, #9
    d072:	f107 0011 	add.w	r0, r7, #17
    d076:	f7f3 fb8c 	bl	792 <memcpy>
		leecc->interval = sys_cpu_to_le16(radio_cc->interval);
    d07a:	8ae3      	ldrh	r3, [r4, #22]
    d07c:	f8a7 3017 	strh.w	r3, [r7, #23]
		leecc->latency = sys_cpu_to_le16(radio_cc->latency);
    d080:	8b23      	ldrh	r3, [r4, #24]
    d082:	f8a7 3019 	strh.w	r3, [r7, #25]
		leecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    d086:	8b63      	ldrh	r3, [r4, #26]
    d088:	f8a7 301b 	strh.w	r3, [r7, #27]
		leecc->clock_accuracy = radio_cc->mca;
    d08c:	7f23      	ldrb	r3, [r4, #28]
    d08e:	777b      	strb	r3, [r7, #29]
    d090:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    d094:	ea5a 030b 	orrs.w	r3, sl, fp
    d098:	d1d2      	bne.n	d040 <le_conn_complete.part.44+0x80>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    d09a:	2212      	movs	r2, #18
    d09c:	2101      	movs	r1, #1
    d09e:	f7ff fd9b 	bl	cbd8 <meta_evt>
		memset(lecc, 0x00, sizeof(*lecc));
    d0a2:	2212      	movs	r2, #18
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    d0a4:	4604      	mov	r4, r0
    d0a6:	e7d1      	b.n	d04c <le_conn_complete.part.44+0x8c>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    d0a8:	221e      	movs	r2, #30
    d0aa:	210a      	movs	r1, #10
    d0ac:	f7ff fd94 	bl	cbd8 <meta_evt>
		leecc->status = 0x00;
    d0b0:	7005      	strb	r5, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
    d0b2:	f8a0 6001 	strh.w	r6, [r0, #1]
		leecc->role = radio_cc->role;
    d0b6:	7863      	ldrb	r3, [r4, #1]
    d0b8:	70c3      	strb	r3, [r0, #3]
		leecc->peer_addr.type = radio_cc->peer_addr_type;
    d0ba:	78a3      	ldrb	r3, [r4, #2]
    d0bc:	7103      	strb	r3, [r0, #4]
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    d0be:	4607      	mov	r7, r0
		memcpy(&leecc->peer_addr.a.val[0], &radio_cc->peer_addr[0],
    d0c0:	2206      	movs	r2, #6
    d0c2:	4641      	mov	r1, r8
    d0c4:	3005      	adds	r0, #5
    d0c6:	f7f3 fb64 	bl	792 <memcpy>
		if ((radio_cc->own_addr_type) &&
    d0ca:	7be3      	ldrb	r3, [r4, #15]
    d0cc:	f107 000b 	add.w	r0, r7, #11
    d0d0:	2b00      	cmp	r3, #0
    d0d2:	d1c1      	bne.n	d058 <le_conn_complete.part.44+0x98>
			memset(&leecc->local_rpa.val[0], 0x0, BDADDR_SIZE);
    d0d4:	2206      	movs	r2, #6
    d0d6:	2100      	movs	r1, #0
    d0d8:	f7f3 fb87 	bl	7ea <memset>
    d0dc:	e7c6      	b.n	d06c <le_conn_complete.part.44+0xac>
    d0de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d0e2:	bf00      	nop
    d0e4:	20009fc0 	.word	0x20009fc0
    d0e8:	20000b58 	.word	0x20000b58

0000d0ec <bt_addr_le_to_str.constprop.73>:
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    d0ec:	b570      	push	{r4, r5, r6, lr}
	switch (addr->type) {
    d0ee:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    d0f0:	b08a      	sub	sp, #40	; 0x28
    d0f2:	4604      	mov	r4, r0
    d0f4:	460e      	mov	r6, r1
    d0f6:	ad07      	add	r5, sp, #28
	switch (addr->type) {
    d0f8:	2b03      	cmp	r3, #3
    d0fa:	d820      	bhi.n	d13e <bt_addr_le_to_str.constprop.73+0x52>
    d0fc:	e8df f003 	tbb	[pc, r3]
    d100:	1d1b1902 	.word	0x1d1b1902
		strcpy(type, "public");
    d104:	4911      	ldr	r1, [pc, #68]	; (d14c <bt_addr_le_to_str.constprop.73+0x60>)
		strcpy(type, "random");
    d106:	4628      	mov	r0, r5
    d108:	f7f3 fadb 	bl	6c2 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    d10c:	7862      	ldrb	r2, [r4, #1]
    d10e:	9204      	str	r2, [sp, #16]
    d110:	78a2      	ldrb	r2, [r4, #2]
    d112:	9203      	str	r2, [sp, #12]
    d114:	78e2      	ldrb	r2, [r4, #3]
    d116:	9202      	str	r2, [sp, #8]
    d118:	7922      	ldrb	r2, [r4, #4]
    d11a:	9201      	str	r2, [sp, #4]
    d11c:	7962      	ldrb	r2, [r4, #5]
    d11e:	9200      	str	r2, [sp, #0]
    d120:	79a3      	ldrb	r3, [r4, #6]
    d122:	9505      	str	r5, [sp, #20]
    d124:	4a0a      	ldr	r2, [pc, #40]	; (d150 <bt_addr_le_to_str.constprop.73+0x64>)
    d126:	211b      	movs	r1, #27
    d128:	4630      	mov	r0, r6
    d12a:	f7f5 f8c7 	bl	22bc <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    d12e:	b00a      	add	sp, #40	; 0x28
    d130:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    d132:	4908      	ldr	r1, [pc, #32]	; (d154 <bt_addr_le_to_str.constprop.73+0x68>)
    d134:	e7e7      	b.n	d106 <bt_addr_le_to_str.constprop.73+0x1a>
		strcpy(type, "public id");
    d136:	4908      	ldr	r1, [pc, #32]	; (d158 <bt_addr_le_to_str.constprop.73+0x6c>)
    d138:	e7e5      	b.n	d106 <bt_addr_le_to_str.constprop.73+0x1a>
		strcpy(type, "random id");
    d13a:	4908      	ldr	r1, [pc, #32]	; (d15c <bt_addr_le_to_str.constprop.73+0x70>)
    d13c:	e7e3      	b.n	d106 <bt_addr_le_to_str.constprop.73+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    d13e:	4a08      	ldr	r2, [pc, #32]	; (d160 <bt_addr_le_to_str.constprop.73+0x74>)
    d140:	210a      	movs	r1, #10
    d142:	4628      	mov	r0, r5
    d144:	f7f5 f8ba 	bl	22bc <snprintk>
    d148:	e7e0      	b.n	d10c <bt_addr_le_to_str.constprop.73+0x20>
    d14a:	bf00      	nop
    d14c:	0002344a 	.word	0x0002344a
    d150:	00023473 	.word	0x00023473
    d154:	00023451 	.word	0x00023451
    d158:	00023458 	.word	0x00023458
    d15c:	00023462 	.word	0x00023462
    d160:	0002346c 	.word	0x0002346c

0000d164 <le_adv_ext_report>:
{
    d164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d168:	460d      	mov	r5, r1
		  offsetof(struct pdu_adv, payload) + adv->len];
    d16a:	7841      	ldrb	r1, [r0, #1]
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    d16c:	4e51      	ldr	r6, [pc, #324]	; (d2b4 <le_adv_ext_report+0x150>)
{
    d16e:	4691      	mov	r9, r2
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    d170:	186a      	adds	r2, r5, r1
{
    d172:	b092      	sub	sp, #72	; 0x48
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    d174:	7a97      	ldrb	r7, [r2, #10]
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    d176:	9607      	str	r6, [sp, #28]
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    d178:	427f      	negs	r7, r7
    d17a:	b27f      	sxtb	r7, r7
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    d17c:	9706      	str	r7, [sp, #24]
    d17e:	7802      	ldrb	r2, [r0, #0]
    d180:	9103      	str	r1, [sp, #12]
{
    d182:	4604      	mov	r4, r0
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    d184:	09d0      	lsrs	r0, r2, #7
    d186:	9005      	str	r0, [sp, #20]
    d188:	f3c2 1080 	ubfx	r0, r2, #6, #1
    d18c:	f002 020f 	and.w	r2, r2, #15
    d190:	9004      	str	r0, [sp, #16]
    d192:	9202      	str	r2, [sp, #8]
    d194:	9301      	str	r3, [sp, #4]
    d196:	9600      	str	r6, [sp, #0]
    d198:	4b47      	ldr	r3, [pc, #284]	; (d2b8 <le_adv_ext_report+0x154>)
    d19a:	4a48      	ldr	r2, [pc, #288]	; (d2bc <le_adv_ext_report+0x158>)
    d19c:	4948      	ldr	r1, [pc, #288]	; (d2c0 <le_adv_ext_report+0x15c>)
    d19e:	4849      	ldr	r0, [pc, #292]	; (d2c4 <le_adv_ext_report+0x160>)
    d1a0:	f7f5 f87e 	bl	22a0 <printk>
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    d1a4:	7823      	ldrb	r3, [r4, #0]
    d1a6:	f003 030f 	and.w	r3, r3, #15
    d1aa:	2b07      	cmp	r3, #7
    d1ac:	d17b      	bne.n	d2a6 <le_adv_ext_report+0x142>
    d1ae:	7863      	ldrb	r3, [r4, #1]
    d1b0:	2b00      	cmp	r3, #0
    d1b2:	d078      	beq.n	d2a6 <le_adv_ext_report+0x142>
		BT_WARN("Ext. adv mode= 0x%x, hdr len= %u", p->adv_mode,
    d1b4:	78a3      	ldrb	r3, [r4, #2]
    d1b6:	9603      	str	r6, [sp, #12]
    d1b8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    d1bc:	099b      	lsrs	r3, r3, #6
    d1be:	9202      	str	r2, [sp, #8]
    d1c0:	9301      	str	r3, [sp, #4]
    d1c2:	9600      	str	r6, [sp, #0]
    d1c4:	4b3c      	ldr	r3, [pc, #240]	; (d2b8 <le_adv_ext_report+0x154>)
    d1c6:	4a3d      	ldr	r2, [pc, #244]	; (d2bc <le_adv_ext_report+0x158>)
    d1c8:	493d      	ldr	r1, [pc, #244]	; (d2c0 <le_adv_ext_report+0x15c>)
    d1ca:	483f      	ldr	r0, [pc, #252]	; (d2c8 <le_adv_ext_report+0x164>)
    d1cc:	f7f5 f868 	bl	22a0 <printk>
		if (!p->ext_hdr_len) {
    d1d0:	78a3      	ldrb	r3, [r4, #2]
    d1d2:	0698      	lsls	r0, r3, #26
    d1d4:	d064      	beq.n	d2a0 <le_adv_ext_report+0x13c>
		if (h->adv_addr) {
    d1d6:	78e3      	ldrb	r3, [r4, #3]
    d1d8:	07d9      	lsls	r1, r3, #31
		ptr = (u8_t *)h + sizeof(*h);
    d1da:	f104 0504 	add.w	r5, r4, #4
		if (h->adv_addr) {
    d1de:	d51d      	bpl.n	d21c <le_adv_ext_report+0xb8>
			addr.type = adv->tx_addr;
    d1e0:	7823      	ldrb	r3, [r4, #0]
    d1e2:	f10d 0848 	add.w	r8, sp, #72	; 0x48
    d1e6:	f3c3 1380 	ubfx	r3, r3, #6, #1
    d1ea:	f808 3d24 	strb.w	r3, [r8, #-36]!
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    d1ee:	2206      	movs	r2, #6
    d1f0:	4629      	mov	r1, r5
			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    d1f2:	f10d 0a2c 	add.w	sl, sp, #44	; 0x2c
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    d1f6:	f10d 0025 	add.w	r0, sp, #37	; 0x25
    d1fa:	f7f3 faca 	bl	792 <memcpy>
			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    d1fe:	4651      	mov	r1, sl
    d200:	4640      	mov	r0, r8
    d202:	f7ff ff73 	bl	d0ec <bt_addr_le_to_str.constprop.73>
			BT_WARN("AdvA: %s", addr_str);
    d206:	9602      	str	r6, [sp, #8]
    d208:	e88d 0440 	stmia.w	sp, {r6, sl}
    d20c:	4b2a      	ldr	r3, [pc, #168]	; (d2b8 <le_adv_ext_report+0x154>)
    d20e:	4a2b      	ldr	r2, [pc, #172]	; (d2bc <le_adv_ext_report+0x158>)
    d210:	492b      	ldr	r1, [pc, #172]	; (d2c0 <le_adv_ext_report+0x15c>)
    d212:	482e      	ldr	r0, [pc, #184]	; (d2cc <le_adv_ext_report+0x168>)
			ptr += BDADDR_SIZE;
    d214:	f104 050a 	add.w	r5, r4, #10
			BT_WARN("AdvA: %s", addr_str);
    d218:	f7f5 f842 	bl	22a0 <printk>
		if(h->tgt_addr){
    d21c:	78e3      	ldrb	r3, [r4, #3]
    d21e:	079a      	lsls	r2, r3, #30
			ptr += BDADDR_SIZE;
    d220:	bf48      	it	mi
    d222:	3506      	addmi	r5, #6
		if(h->adi){
    d224:	0718      	lsls	r0, r3, #28
			ptr += sizeof(*adi_ptr);
    d226:	bf48      	it	mi
    d228:	3502      	addmi	r5, #2
		if(h->aux_ptr){
    d22a:	06d9      	lsls	r1, r3, #27
			ptr += sizeof(*ap);
    d22c:	bf48      	it	mi
    d22e:	3503      	addmi	r5, #3
		if (h->tx_pwr) {
    d230:	065a      	lsls	r2, r3, #25
    d232:	d50a      	bpl.n	d24a <le_adv_ext_report+0xe6>
			tx_pwr = *(s8_t *)ptr;
    d234:	f915 3b01 	ldrsb.w	r3, [r5], #1
			BT_WARN("Tx pwr= %d dB", tx_pwr);
    d238:	9301      	str	r3, [sp, #4]
    d23a:	9602      	str	r6, [sp, #8]
    d23c:	9600      	str	r6, [sp, #0]
    d23e:	4b1e      	ldr	r3, [pc, #120]	; (d2b8 <le_adv_ext_report+0x154>)
    d240:	4a1e      	ldr	r2, [pc, #120]	; (d2bc <le_adv_ext_report+0x158>)
    d242:	491f      	ldr	r1, [pc, #124]	; (d2c0 <le_adv_ext_report+0x15c>)
    d244:	4822      	ldr	r0, [pc, #136]	; (d2d0 <le_adv_ext_report+0x16c>)
    d246:	f7f5 f82b 	bl	22a0 <printk>
		data_len = adv->len -(p->ext_hdr_len + offsetof(struct pdu_adv_com_ext_adv,
    d24a:	78a2      	ldrb	r2, [r4, #2]
    d24c:	f3c2 0305 	ubfx	r3, r2, #0, #6
    d250:	7862      	ldrb	r2, [r4, #1]
    d252:	1ad2      	subs	r2, r2, r3
    d254:	b2d2      	uxtb	r2, r2
    d256:	f102 38ff 	add.w	r8, r2, #4294967295	; 0xffffffff
		sep = meta_evt(buf, BT_HCI_EVT_LE_EXT_ADVERTISING_REPORT,
    d25a:	3218      	adds	r2, #24
    d25c:	b2d2      	uxtb	r2, r2
    d25e:	210d      	movs	r1, #13
    d260:	4648      	mov	r0, r9
    d262:	f7ff fcb9 	bl	cbd8 <meta_evt>
		sep->num_reports = 1;
    d266:	2301      	movs	r3, #1
    d268:	7003      	strb	r3, [r0, #0]
		if(h->adv_addr){
    d26a:	78e3      	ldrb	r3, [r4, #3]
    d26c:	07db      	lsls	r3, r3, #31
		data_len = adv->len -(p->ext_hdr_len + offsetof(struct pdu_adv_com_ext_adv,
    d26e:	fa5f f888 	uxtb.w	r8, r8
		sep = meta_evt(buf, BT_HCI_EVT_LE_EXT_ADVERTISING_REPORT,
    d272:	4606      	mov	r6, r0
		if(h->adv_addr){
    d274:	d508      	bpl.n	d288 <le_adv_ext_report+0x124>
			adv_info->addr.type = addr.type;
    d276:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    d27a:	7083      	strb	r3, [r0, #2]
			memcpy(&adv_info->addr.a.val[0], &addr.a.val[0],
    d27c:	2206      	movs	r2, #6
    d27e:	f10d 0125 	add.w	r1, sp, #37	; 0x25
    d282:	3003      	adds	r0, #3
    d284:	f7f3 fa85 	bl	792 <memcpy>
		adv_info->evt_type = 0x07;
    d288:	2307      	movs	r3, #7
    d28a:	7073      	strb	r3, [r6, #1]
		adv_info->length = data_len;
    d28c:	f886 8017 	strb.w	r8, [r6, #23]
		memcpy(&adv_info->data[0], ptr, data_len);
    d290:	3618      	adds	r6, #24
    d292:	4642      	mov	r2, r8
    d294:	4629      	mov	r1, r5
    d296:	4630      	mov	r0, r6
    d298:	f7f3 fa7b 	bl	792 <memcpy>
		*prssi = rssi;
    d29c:	f806 7008 	strb.w	r7, [r6, r8]
}
    d2a0:	b012      	add	sp, #72	; 0x48
    d2a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		le_advertising_report(pdu_data, b, buf);
    d2a6:	464a      	mov	r2, r9
    d2a8:	4629      	mov	r1, r5
    d2aa:	4620      	mov	r0, r4
    d2ac:	f7ff fccc 	bl	cc48 <le_advertising_report>
	return;
    d2b0:	e7f6      	b.n	d2a0 <le_adv_ext_report+0x13c>
    d2b2:	bf00      	nop
    d2b4:	00023dbe 	.word	0x00023dbe
    d2b8:	000256a3 	.word	0x000256a3
    d2bc:	00024016 	.word	0x00024016
    d2c0:	000272e8 	.word	0x000272e8
    d2c4:	000258e9 	.word	0x000258e9
    d2c8:	00025936 	.word	0x00025936
    d2cc:	00025967 	.word	0x00025967
    d2d0:	00025980 	.word	0x00025980

0000d2d4 <sys_get_le64>:
{
    d2d4:	4603      	mov	r3, r0
}
    d2d6:	6800      	ldr	r0, [r0, #0]
    d2d8:	6859      	ldr	r1, [r3, #4]
    d2da:	4770      	bx	lr

0000d2dc <hci_cmd_handle>:
{
    d2dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
    d2de:	8981      	ldrh	r1, [r0, #12]
{
    d2e0:	b093      	sub	sp, #76	; 0x4c
	struct net_buf *evt = NULL;
    d2e2:	2500      	movs	r5, #0
	if (cmd->len < sizeof(*chdr)) {
    d2e4:	2902      	cmp	r1, #2
{
    d2e6:	4604      	mov	r4, r0
	struct net_buf *evt = NULL;
    d2e8:	9507      	str	r5, [sp, #28]
	if (cmd->len < sizeof(*chdr)) {
    d2ea:	d80b      	bhi.n	d304 <hci_cmd_handle+0x28>
		BT_ERR("No HCI Command header");
    d2ec:	4b8f      	ldr	r3, [pc, #572]	; (d52c <hci_cmd_handle+0x250>)
    d2ee:	9301      	str	r3, [sp, #4]
    d2f0:	9300      	str	r3, [sp, #0]
    d2f2:	4a8f      	ldr	r2, [pc, #572]	; (d530 <hci_cmd_handle+0x254>)
    d2f4:	4b8f      	ldr	r3, [pc, #572]	; (d534 <hci_cmd_handle+0x258>)
    d2f6:	4990      	ldr	r1, [pc, #576]	; (d538 <hci_cmd_handle+0x25c>)
    d2f8:	4890      	ldr	r0, [pc, #576]	; (d53c <hci_cmd_handle+0x260>)
		BT_ERR("Invalid HCI CMD packet length");
    d2fa:	f7f4 ffd1 	bl	22a0 <printk>
		return NULL;
    d2fe:	4628      	mov	r0, r5
}
    d300:	b013      	add	sp, #76	; 0x4c
    d302:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chdr = (void *)cmd->data;
    d304:	6883      	ldr	r3, [r0, #8]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    d306:	4e8e      	ldr	r6, [pc, #568]	; (d540 <hci_cmd_handle+0x264>)
    d308:	781a      	ldrb	r2, [r3, #0]
    d30a:	7858      	ldrb	r0, [r3, #1]
	if (cmd->len < chdr->param_len) {
    d30c:	789b      	ldrb	r3, [r3, #2]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    d30e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	if (cmd->len < chdr->param_len) {
    d312:	428b      	cmp	r3, r1
	_opcode = sys_le16_to_cpu(chdr->opcode);
    d314:	8032      	strh	r2, [r6, #0]
	if (cmd->len < chdr->param_len) {
    d316:	d907      	bls.n	d328 <hci_cmd_handle+0x4c>
		BT_ERR("Invalid HCI CMD packet length");
    d318:	4b84      	ldr	r3, [pc, #528]	; (d52c <hci_cmd_handle+0x250>)
    d31a:	9301      	str	r3, [sp, #4]
    d31c:	9300      	str	r3, [sp, #0]
    d31e:	4a84      	ldr	r2, [pc, #528]	; (d530 <hci_cmd_handle+0x254>)
    d320:	4b84      	ldr	r3, [pc, #528]	; (d534 <hci_cmd_handle+0x258>)
    d322:	4985      	ldr	r1, [pc, #532]	; (d538 <hci_cmd_handle+0x25c>)
    d324:	4887      	ldr	r0, [pc, #540]	; (d544 <hci_cmd_handle+0x268>)
    d326:	e7e8      	b.n	d2fa <hci_cmd_handle+0x1e>
	net_buf_pull(cmd, sizeof(*chdr));
    d328:	2103      	movs	r1, #3
    d32a:	f104 0008 	add.w	r0, r4, #8
    d32e:	f00c f88d 	bl	1944c <net_buf_simple_pull>
	ocf = BT_OCF(_opcode);
    d332:	8833      	ldrh	r3, [r6, #0]
    d334:	f3c3 0209 	ubfx	r2, r3, #0, #10
	switch (BT_OGF(_opcode)) {
    d338:	0a9b      	lsrs	r3, r3, #10
    d33a:	2b04      	cmp	r3, #4
    d33c:	f000 80c6 	beq.w	d4cc <hci_cmd_handle+0x1f0>
    d340:	d813      	bhi.n	d36a <hci_cmd_handle+0x8e>
    d342:	2b01      	cmp	r3, #1
    d344:	d030      	beq.n	d3a8 <hci_cmd_handle+0xcc>
    d346:	2b03      	cmp	r3, #3
    d348:	d045      	beq.n	d3d6 <hci_cmd_handle+0xfa>
		ccst = cmd_complete(&evt, sizeof(*ccst));
    d34a:	2101      	movs	r1, #1
    d34c:	a807      	add	r0, sp, #28
    d34e:	f7ff fc59 	bl	cc04 <cmd_complete>
		BT_ERR("Invalid BT_HCI_ERR_UNKNOWN_CMD");
    d352:	4b76      	ldr	r3, [pc, #472]	; (d52c <hci_cmd_handle+0x250>)
    d354:	9301      	str	r3, [sp, #4]
    d356:	9300      	str	r3, [sp, #0]
		ccst = cmd_complete(&evt, sizeof(*ccst));
    d358:	4604      	mov	r4, r0
		BT_ERR("Invalid BT_HCI_ERR_UNKNOWN_CMD");
    d35a:	4b76      	ldr	r3, [pc, #472]	; (d534 <hci_cmd_handle+0x258>)
    d35c:	4a74      	ldr	r2, [pc, #464]	; (d530 <hci_cmd_handle+0x254>)
    d35e:	4976      	ldr	r1, [pc, #472]	; (d538 <hci_cmd_handle+0x25c>)
    d360:	4879      	ldr	r0, [pc, #484]	; (d548 <hci_cmd_handle+0x26c>)
    d362:	f7f4 ff9d 	bl	22a0 <printk>
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    d366:	2301      	movs	r3, #1
    d368:	e378      	b.n	da5c <hci_cmd_handle+0x780>
	switch (BT_OGF(_opcode)) {
    d36a:	2b08      	cmp	r3, #8
    d36c:	f000 8173 	beq.w	d656 <hci_cmd_handle+0x37a>
    d370:	2b3f      	cmp	r3, #63	; 0x3f
    d372:	d1ea      	bne.n	d34a <hci_cmd_handle+0x6e>
	switch (ocf) {
    d374:	3a01      	subs	r2, #1
    d376:	2a09      	cmp	r2, #9
    d378:	d8e7      	bhi.n	d34a <hci_cmd_handle+0x6e>
    d37a:	a301      	add	r3, pc, #4	; (adr r3, d380 <hci_cmd_handle+0xa4>)
    d37c:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    d380:	0000dc2d 	.word	0x0000dc2d
    d384:	0000dc5d 	.word	0x0000dc5d
    d388:	0000dc87 	.word	0x0000dc87
    d38c:	0000d34b 	.word	0x0000d34b
    d390:	0000d34b 	.word	0x0000d34b
    d394:	0000dccd 	.word	0x0000dccd
    d398:	0000d34b 	.word	0x0000d34b
    d39c:	0000dc9f 	.word	0x0000dc9f
    d3a0:	0000dcd9 	.word	0x0000dcd9
    d3a4:	0000dd47 	.word	0x0000dd47
	switch (ocf) {
    d3a8:	2a06      	cmp	r2, #6
    d3aa:	d006      	beq.n	d3ba <hci_cmd_handle+0xde>
    d3ac:	2a1d      	cmp	r2, #29
    d3ae:	d1cc      	bne.n	d34a <hci_cmd_handle+0x6e>
	handle = sys_le16_to_cpu(cmd->handle);
    d3b0:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
    d3b2:	8818      	ldrh	r0, [r3, #0]
    d3b4:	f008 fd1c 	bl	15df0 <ll_version_ind_send>
    d3b8:	e004      	b.n	d3c4 <hci_cmd_handle+0xe8>
    d3ba:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
    d3bc:	7899      	ldrb	r1, [r3, #2]
    d3be:	8818      	ldrh	r0, [r3, #0]
    d3c0:	f008 fd2a 	bl	15e18 <ll_terminate_ind_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    d3c4:	2800      	cmp	r0, #0
    d3c6:	bf14      	ite	ne
    d3c8:	200c      	movne	r0, #12
    d3ca:	2000      	moveq	r0, #0
    d3cc:	f7ff fbea 	bl	cba4 <cmd_status>
    d3d0:	9007      	str	r0, [sp, #28]
	return evt;
    d3d2:	9807      	ldr	r0, [sp, #28]
    d3d4:	e794      	b.n	d300 <hci_cmd_handle+0x24>
	switch (ocf) {
    d3d6:	2a2d      	cmp	r2, #45	; 0x2d
    d3d8:	d03a      	beq.n	d450 <hci_cmd_handle+0x174>
    d3da:	d820      	bhi.n	d41e <hci_cmd_handle+0x142>
    d3dc:	2a01      	cmp	r2, #1
    d3de:	d02b      	beq.n	d438 <hci_cmd_handle+0x15c>
    d3e0:	2a03      	cmp	r2, #3
    d3e2:	d1b2      	bne.n	d34a <hci_cmd_handle+0x6e>
	dup_count = -1;
    d3e4:	4b59      	ldr	r3, [pc, #356]	; (d54c <hci_cmd_handle+0x270>)
    d3e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    d3ea:	601a      	str	r2, [r3, #0]
	event_mask = DEFAULT_EVENT_MASK;
    d3ec:	4b58      	ldr	r3, [pc, #352]	; (d550 <hci_cmd_handle+0x274>)
    d3ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d3f2:	f641 71ff 	movw	r1, #8191	; 0x1fff
    d3f6:	e9c3 0100 	strd	r0, r1, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    d3fa:	4b56      	ldr	r3, [pc, #344]	; (d554 <hci_cmd_handle+0x278>)
    d3fc:	2000      	movs	r0, #0
    d3fe:	2100      	movs	r1, #0
    d400:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    d404:	4b54      	ldr	r3, [pc, #336]	; (d558 <hci_cmd_handle+0x27c>)
    d406:	201f      	movs	r0, #31
    d408:	2100      	movs	r1, #0
    d40a:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
    d40e:	f008 f969 	bl	156e4 <ll_reset>
	ccst = cmd_complete(evt, sizeof(*ccst));
    d412:	2101      	movs	r1, #1
    d414:	a807      	add	r0, sp, #28
    d416:	f7ff fbf5 	bl	cc04 <cmd_complete>
	ccst->status = 0x00;
    d41a:	2300      	movs	r3, #0
    d41c:	e25f      	b.n	d8de <hci_cmd_handle+0x602>
	switch (ocf) {
    d41e:	2a7b      	cmp	r2, #123	; 0x7b
    d420:	d02c      	beq.n	d47c <hci_cmd_handle+0x1a0>
    d422:	2a7c      	cmp	r2, #124	; 0x7c
    d424:	d041      	beq.n	d4aa <hci_cmd_handle+0x1ce>
    d426:	2a63      	cmp	r2, #99	; 0x63
    d428:	d18f      	bne.n	d34a <hci_cmd_handle+0x6e>
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    d42a:	68a0      	ldr	r0, [r4, #8]
    d42c:	f7ff ff52 	bl	d2d4 <sys_get_le64>
    d430:	4b48      	ldr	r3, [pc, #288]	; (d554 <hci_cmd_handle+0x278>)
	le_event_mask = sys_get_le64(cmd->events);
    d432:	e9c3 0100 	strd	r0, r1, [r3]
    d436:	e7ec      	b.n	d412 <hci_cmd_handle+0x136>
	event_mask = sys_get_le64(cmd->events);
    d438:	68a0      	ldr	r0, [r4, #8]
    d43a:	f7ff ff4b 	bl	d2d4 <sys_get_le64>
    d43e:	4b44      	ldr	r3, [pc, #272]	; (d550 <hci_cmd_handle+0x274>)
    d440:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
    d444:	4611      	mov	r1, r2
    d446:	a807      	add	r0, sp, #28
    d448:	f7ff fbdc 	bl	cc04 <cmd_complete>
	ccst->status = 0x00;
    d44c:	7005      	strb	r5, [r0, #0]
    d44e:	e7c0      	b.n	d3d2 <hci_cmd_handle+0xf6>
    d450:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    d452:	2104      	movs	r1, #4
    d454:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    d456:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
    d458:	789f      	ldrb	r7, [r3, #2]
	rp = cmd_complete(evt, sizeof(*rp));
    d45a:	f7ff fbd3 	bl	cc04 <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    d45e:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    d460:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(handle, type, &rp->tx_power_level);
    d462:	1cc2      	adds	r2, r0, #3
    d464:	4639      	mov	r1, r7
    d466:	4630      	mov	r0, r6
    d468:	f008 fcea 	bl	15e40 <ll_tx_pwr_lvl_get>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    d46c:	2800      	cmp	r0, #0
    d46e:	bf14      	ite	ne
    d470:	2302      	movne	r3, #2
    d472:	2300      	moveq	r3, #0
    d474:	7023      	strb	r3, [r4, #0]
	rp->handle = sys_le16_to_cpu(handle);
    d476:	f8a4 5001 	strh.w	r5, [r4, #1]
    d47a:	e7aa      	b.n	d3d2 <hci_cmd_handle+0xf6>
	handle = sys_le16_to_cpu(cmd->handle);
    d47c:	68a3      	ldr	r3, [r4, #8]
    d47e:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
    d480:	a908      	add	r1, sp, #32
    d482:	b2a0      	uxth	r0, r4
    d484:	f008 fce6 	bl	15e54 <ll_apto_get>
	rp = cmd_complete(evt, sizeof(*rp));
    d488:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
    d48a:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    d48c:	a807      	add	r0, sp, #28
    d48e:	f7ff fbb9 	bl	cc04 <cmd_complete>
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d492:	2d00      	cmp	r5, #0
    d494:	bf14      	ite	ne
    d496:	230c      	movne	r3, #12
    d498:	2300      	moveq	r3, #0
    d49a:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    d49c:	f8a0 4001 	strh.w	r4, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
    d4a0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    d4a4:	f8a0 3003 	strh.w	r3, [r0, #3]
    d4a8:	e793      	b.n	d3d2 <hci_cmd_handle+0xf6>
    d4aa:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    d4ac:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
    d4ae:	8859      	ldrh	r1, [r3, #2]
    d4b0:	b2a0      	uxth	r0, r4
    d4b2:	f008 fce3 	bl	15e7c <ll_apto_set>
	status = ll_length_req_send(handle, tx_octets, tx_time);
    d4b6:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    d4b8:	2103      	movs	r1, #3
    d4ba:	a807      	add	r0, sp, #28
    d4bc:	f7ff fba2 	bl	cc04 <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d4c0:	2d00      	cmp	r5, #0
    d4c2:	bf14      	ite	ne
    d4c4:	230c      	movne	r3, #12
    d4c6:	2300      	moveq	r3, #0
    d4c8:	7003      	strb	r3, [r0, #0]
    d4ca:	e2ab      	b.n	da24 <hci_cmd_handle+0x748>
	switch (ocf) {
    d4cc:	3a01      	subs	r2, #1
    d4ce:	2a08      	cmp	r2, #8
    d4d0:	f63f af3b 	bhi.w	d34a <hci_cmd_handle+0x6e>
    d4d4:	a301      	add	r3, pc, #4	; (adr r3, d4dc <hci_cmd_handle+0x200>)
    d4d6:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    d4da:	bf00      	nop
    d4dc:	0000d501 	.word	0x0000d501
    d4e0:	0000d55d 	.word	0x0000d55d
    d4e4:	0000d623 	.word	0x0000d623
    d4e8:	0000d34b 	.word	0x0000d34b
    d4ec:	0000d34b 	.word	0x0000d34b
    d4f0:	0000d34b 	.word	0x0000d34b
    d4f4:	0000d34b 	.word	0x0000d34b
    d4f8:	0000d34b 	.word	0x0000d34b
    d4fc:	0000d63f 	.word	0x0000d63f
	rp = cmd_complete(evt, sizeof(*rp));
    d500:	2109      	movs	r1, #9
    d502:	a807      	add	r0, sp, #28
    d504:	f7ff fb7e 	bl	cc04 <cmd_complete>
	rp->status = 0x00;
    d508:	2300      	movs	r3, #0
    d50a:	7003      	strb	r3, [r0, #0]
	rp->hci_revision = sys_cpu_to_le16(0);
    d50c:	7083      	strb	r3, [r0, #2]
    d50e:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    d510:	f06f 030e 	mvn.w	r3, #14
    d514:	7143      	strb	r3, [r0, #5]
    d516:	2305      	movs	r3, #5
	rp->hci_version = BT_HCI_VERSION_5_0;
    d518:	2209      	movs	r2, #9
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    d51a:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    d51c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	rp->hci_version = BT_HCI_VERSION_5_0;
    d520:	7042      	strb	r2, [r0, #1]
	rp->lmp_version = RADIO_BLE_VERSION_NUMBER;
    d522:	7102      	strb	r2, [r0, #4]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    d524:	71c3      	strb	r3, [r0, #7]
    d526:	7203      	strb	r3, [r0, #8]
    d528:	e753      	b.n	d3d2 <hci_cmd_handle+0xf6>
    d52a:	bf00      	nop
    d52c:	00023dbe 	.word	0x00023dbe
    d530:	00022d86 	.word	0x00022d86
    d534:	0002566f 	.word	0x0002566f
    d538:	000272e8 	.word	0x000272e8
    d53c:	000257b2 	.word	0x000257b2
    d540:	20000b54 	.word	0x20000b54
    d544:	000257d8 	.word	0x000257d8
    d548:	00025806 	.word	0x00025806
    d54c:	20000b5c 	.word	0x20000b5c
    d550:	20009fb8 	.word	0x20009fb8
    d554:	20000be8 	.word	0x20000be8
    d558:	20009fc0 	.word	0x20009fc0
	rp = cmd_complete(evt, sizeof(*rp));
    d55c:	2141      	movs	r1, #65	; 0x41
    d55e:	a807      	add	r0, sp, #28
    d560:	f7ff fb50 	bl	cc04 <cmd_complete>
	rp->status = 0x00;
    d564:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    d566:	4604      	mov	r4, r0
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    d568:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    d56a:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    d56e:	f7f3 f93c 	bl	7ea <memset>
	rp->commands[2] |= BIT(7);
    d572:	78e3      	ldrb	r3, [r4, #3]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    d574:	7ea2      	ldrb	r2, [r4, #26]
	rp->commands[36] |= BIT(1);
    d576:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
	rp->commands[38] |= BIT(7);
    d57a:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
	rp->commands[2] |= BIT(7);
    d57e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    d582:	70e3      	strb	r3, [r4, #3]
	rp->commands[5] |= BIT(6) | BIT(7);
    d584:	79a3      	ldrb	r3, [r4, #6]
    d586:	f063 033f 	orn	r3, r3, #63	; 0x3f
    d58a:	71a3      	strb	r3, [r4, #6]
	rp->commands[10] |= BIT(2);
    d58c:	7ae3      	ldrb	r3, [r4, #11]
    d58e:	f043 0304 	orr.w	r3, r3, #4
    d592:	72e3      	strb	r3, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
    d594:	7be3      	ldrb	r3, [r4, #15]
    d596:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    d59a:	73e3      	strb	r3, [r4, #15]
	rp->commands[15] |= BIT(1);
    d59c:	7c23      	ldrb	r3, [r4, #16]
    d59e:	f043 0302 	orr.w	r3, r3, #2
    d5a2:	7423      	strb	r3, [r4, #16]
	rp->commands[22] |= BIT(2);
    d5a4:	7de3      	ldrb	r3, [r4, #23]
    d5a6:	f043 0304 	orr.w	r3, r3, #4
    d5aa:	75e3      	strb	r3, [r4, #23]
	rp->commands[28] |= BIT(3);
    d5ac:	7f63      	ldrb	r3, [r4, #29]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    d5ae:	f062 0208 	orn	r2, r2, #8
    d5b2:	76a2      	strb	r2, [r4, #26]
	rp->commands[28] |= BIT(1) | BIT(2);
    d5b4:	f043 030f 	orr.w	r3, r3, #15
	rp->commands[37] |= BIT(5);
    d5b8:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
	rp->commands[28] |= BIT(1) | BIT(2);
    d5bc:	7763      	strb	r3, [r4, #29]
	rp->commands[0] |= BIT(5);
    d5be:	7863      	ldrb	r3, [r4, #1]
	rp->commands[37] |= BIT(6);
    d5c0:	f042 0260 	orr.w	r2, r2, #96	; 0x60
    d5c4:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
	rp->commands[0] |= BIT(5);
    d5c8:	f043 0320 	orr.w	r3, r3, #32
	rp->commands[26] |= BIT(4) | BIT(5);
    d5cc:	22ff      	movs	r2, #255	; 0xff
    d5ce:	76e2      	strb	r2, [r4, #27]
	rp->commands[0] |= BIT(5);
    d5d0:	7063      	strb	r3, [r4, #1]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
    d5d2:	7722      	strb	r2, [r4, #28]
	rp->commands[33] |= BIT(4) | BIT(5);
    d5d4:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
	rp->commands[32] |= BIT(4) | BIT(5);
    d5d8:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
	rp->commands[33] |= BIT(6) | BIT(7);
    d5dc:	f063 030f 	orn	r3, r3, #15
	rp->commands[32] |= BIT(4) | BIT(5);
    d5e0:	f042 0230 	orr.w	r2, r2, #48	; 0x30
    d5e4:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
	rp->commands[33] |= BIT(6) | BIT(7);
    d5e8:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    d5ec:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
	rp->commands[35] |= BIT(3);
    d5f0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	rp->commands[38] |= BIT(7);
    d5f4:	f060 007f 	orn	r0, r0, #127	; 0x7f
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    d5f8:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
	rp->commands[36] |= BIT(4);
    d5fc:	f061 0101 	orn	r1, r1, #1
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    d600:	f062 0206 	orn	r2, r2, #6
	rp->commands[38] |= BIT(7);
    d604:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
	rp->commands[36] |= BIT(4);
    d608:	f884 1025 	strb.w	r1, [r4, #37]	; 0x25
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    d60c:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    d610:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	rp->commands[39] |= BIT(2);
    d614:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    d618:	f043 0304 	orr.w	r3, r3, #4
    d61c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    d620:	e6d7      	b.n	d3d2 <hci_cmd_handle+0xf6>
	rp = cmd_complete(evt, sizeof(*rp));
    d622:	2109      	movs	r1, #9
    d624:	a807      	add	r0, sp, #28
    d626:	f7ff faed 	bl	cc04 <cmd_complete>
	rp->status = 0x00;
    d62a:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    d62c:	4604      	mov	r4, r0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    d62e:	2208      	movs	r2, #8
	rp->status = 0x00;
    d630:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    d634:	f7f3 f8d9 	bl	7ea <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
    d638:	2360      	movs	r3, #96	; 0x60
    d63a:	7163      	strb	r3, [r4, #5]
    d63c:	e6c9      	b.n	d3d2 <hci_cmd_handle+0xf6>
	rp = cmd_complete(evt, sizeof(*rp));
    d63e:	2107      	movs	r1, #7
    d640:	a807      	add	r0, sp, #28
    d642:	f7ff fadf 	bl	cc04 <cmd_complete>
	rp->status = 0x00;
    d646:	4601      	mov	r1, r0
    d648:	2300      	movs	r3, #0
    d64a:	f801 3b01 	strb.w	r3, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
    d64e:	4618      	mov	r0, r3
    d650:	f7ff f8c6 	bl	c7e0 <ll_addr_get>
    d654:	e6bd      	b.n	d3d2 <hci_cmd_handle+0xf6>
	switch (ocf) {
    d656:	3a01      	subs	r2, #1
    d658:	2a4d      	cmp	r2, #77	; 0x4d
    d65a:	f63f ae76 	bhi.w	d34a <hci_cmd_handle+0x6e>
    d65e:	a301      	add	r3, pc, #4	; (adr r3, d664 <hci_cmd_handle+0x388>)
    d660:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    d664:	0000d79d 	.word	0x0000d79d
    d668:	0000d7a7 	.word	0x0000d7a7
    d66c:	0000d7bf 	.word	0x0000d7bf
    d670:	0000d34b 	.word	0x0000d34b
    d674:	0000d7e3 	.word	0x0000d7e3
    d678:	0000d889 	.word	0x0000d889
    d67c:	0000dd35 	.word	0x0000dd35
    d680:	0000d893 	.word	0x0000d893
    d684:	0000d89f 	.word	0x0000d89f
    d688:	0000d8ab 	.word	0x0000d8ab
    d68c:	0000d8b5 	.word	0x0000d8b5
    d690:	0000d8e3 	.word	0x0000d8e3
    d694:	0000d903 	.word	0x0000d903
    d698:	0000d92d 	.word	0x0000d92d
    d69c:	0000d7ef 	.word	0x0000d7ef
    d6a0:	0000d805 	.word	0x0000d805
    d6a4:	0000d817 	.word	0x0000d817
    d6a8:	0000d81f 	.word	0x0000d81f
    d6ac:	0000d9e7 	.word	0x0000d9e7
    d6b0:	0000d98d 	.word	0x0000d98d
    d6b4:	0000d9c3 	.word	0x0000d9c3
    d6b8:	0000d9dd 	.word	0x0000d9dd
    d6bc:	0000d827 	.word	0x0000d827
    d6c0:	0000d84d 	.word	0x0000d84d
    d6c4:	0000d995 	.word	0x0000d995
    d6c8:	0000d9a9 	.word	0x0000d9a9
    d6cc:	0000d9b9 	.word	0x0000d9b9
    d6d0:	0000d863 	.word	0x0000d863
    d6d4:	0000d34b 	.word	0x0000d34b
    d6d8:	0000d34b 	.word	0x0000d34b
    d6dc:	0000d34b 	.word	0x0000d34b
    d6e0:	0000da01 	.word	0x0000da01
    d6e4:	0000da2b 	.word	0x0000da2b
    d6e8:	0000da39 	.word	0x0000da39
    d6ec:	0000da49 	.word	0x0000da49
    d6f0:	0000da61 	.word	0x0000da61
    d6f4:	0000d34b 	.word	0x0000d34b
    d6f8:	0000d34b 	.word	0x0000d34b
    d6fc:	0000db75 	.word	0x0000db75
    d700:	0000db83 	.word	0x0000db83
    d704:	0000db8b 	.word	0x0000db8b
    d708:	0000db9b 	.word	0x0000db9b
    d70c:	0000dbad 	.word	0x0000dbad
    d710:	0000dbcb 	.word	0x0000dbcb
    d714:	0000dbe9 	.word	0x0000dbe9
    d718:	0000dbff 	.word	0x0000dbff
    d71c:	0000da8d 	.word	0x0000da8d
    d720:	0000daa5 	.word	0x0000daa5
    d724:	0000dafb 	.word	0x0000dafb
    d728:	0000db19 	.word	0x0000db19
    d72c:	0000d34b 	.word	0x0000d34b
    d730:	0000d34b 	.word	0x0000d34b
    d734:	0000d34b 	.word	0x0000d34b
    d738:	0000d889 	.word	0x0000d889
    d73c:	0000d893 	.word	0x0000d893
    d740:	0000d89f 	.word	0x0000d89f
    d744:	0000d8ab 	.word	0x0000d8ab
    d748:	0000d34b 	.word	0x0000d34b
    d74c:	0000d34b 	.word	0x0000d34b
    d750:	0000d34b 	.word	0x0000d34b
    d754:	0000d34b 	.word	0x0000d34b
    d758:	0000d34b 	.word	0x0000d34b
    d75c:	0000d34b 	.word	0x0000d34b
    d760:	0000d34b 	.word	0x0000d34b
    d764:	0000d34b 	.word	0x0000d34b
    d768:	0000d34b 	.word	0x0000d34b
    d76c:	0000d34b 	.word	0x0000d34b
    d770:	0000d34b 	.word	0x0000d34b
    d774:	0000d34b 	.word	0x0000d34b
    d778:	0000d34b 	.word	0x0000d34b
    d77c:	0000d34b 	.word	0x0000d34b
    d780:	0000d34b 	.word	0x0000d34b
    d784:	0000d34b 	.word	0x0000d34b
    d788:	0000d34b 	.word	0x0000d34b
    d78c:	0000dc13 	.word	0x0000dc13
    d790:	0000d34b 	.word	0x0000d34b
    d794:	0000d34b 	.word	0x0000d34b
    d798:	0000dc09 	.word	0x0000dc09
	le_event_mask = sys_get_le64(cmd->events);
    d79c:	68a0      	ldr	r0, [r4, #8]
    d79e:	f7ff fd99 	bl	d2d4 <sys_get_le64>
    d7a2:	4bb6      	ldr	r3, [pc, #728]	; (da7c <hci_cmd_handle+0x7a0>)
    d7a4:	e645      	b.n	d432 <hci_cmd_handle+0x156>
	rp = cmd_complete(evt, sizeof(*rp));
    d7a6:	2104      	movs	r1, #4
    d7a8:	a807      	add	r0, sp, #28
    d7aa:	f7ff fa2b 	bl	cc04 <cmd_complete>
	rp->status = 0x00;
    d7ae:	2300      	movs	r3, #0
    d7b0:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    d7b2:	221b      	movs	r2, #27
    d7b4:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    d7b6:	2302      	movs	r3, #2
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    d7b8:	7042      	strb	r2, [r0, #1]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    d7ba:	70c3      	strb	r3, [r0, #3]
    d7bc:	e609      	b.n	d3d2 <hci_cmd_handle+0xf6>
	rp = cmd_complete(evt, sizeof(*rp));
    d7be:	2109      	movs	r1, #9
    d7c0:	a807      	add	r0, sp, #28
    d7c2:	f7ff fa1f 	bl	cc04 <cmd_complete>
	rp->status = 0x00;
    d7c6:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    d7c8:	4604      	mov	r4, r0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    d7ca:	2208      	movs	r2, #8
	rp->status = 0x00;
    d7cc:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    d7d0:	f7f3 f80b 	bl	7ea <memset>
	rp->features[0] = RADIO_BLE_FEAT & 0xFF;
    d7d4:	23ff      	movs	r3, #255	; 0xff
    d7d6:	7063      	strb	r3, [r4, #1]
	rp->features[1] = (RADIO_BLE_FEAT >> 8)  & 0xFF;
    d7d8:	2349      	movs	r3, #73	; 0x49
    d7da:	70a3      	strb	r3, [r4, #2]
	rp->features[2] = (RADIO_BLE_FEAT >> 16)  & 0xFF;
    d7dc:	2301      	movs	r3, #1
    d7de:	70e3      	strb	r3, [r4, #3]
    d7e0:	e5f7      	b.n	d3d2 <hci_cmd_handle+0xf6>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
    d7e2:	68a1      	ldr	r1, [r4, #8]
    d7e4:	2001      	movs	r0, #1
    d7e6:	f7ff f815 	bl	c814 <ll_addr_set>
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    d7ea:	4604      	mov	r4, r0
    d7ec:	e0c6      	b.n	d97c <hci_cmd_handle+0x6a0>
	rp = cmd_complete(evt, sizeof(*rp));
    d7ee:	2102      	movs	r1, #2
    d7f0:	a807      	add	r0, sp, #28
    d7f2:	f7ff fa07 	bl	cc04 <cmd_complete>
	rp->status = 0x00;
    d7f6:	2300      	movs	r3, #0
    d7f8:	7003      	strb	r3, [r0, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    d7fa:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
    d7fc:	f00a f870 	bl	178e0 <ll_wl_size_get>
    d800:	7060      	strb	r0, [r4, #1]
    d802:	e5e6      	b.n	d3d2 <hci_cmd_handle+0xf6>
	ccst = cmd_complete(evt, sizeof(*ccst));
    d804:	2101      	movs	r1, #1
    d806:	a807      	add	r0, sp, #28
    d808:	f7ff f9fc 	bl	cc04 <cmd_complete>
    d80c:	4604      	mov	r4, r0
	ccst->status = ll_wl_clear();
    d80e:	f00a f869 	bl	178e4 <ll_wl_clear>
	ccst->status = ll_rl_enable(enable);
    d812:	7020      	strb	r0, [r4, #0]
    d814:	e5dd      	b.n	d3d2 <hci_cmd_handle+0xf6>
	status = ll_wl_add(&cmd->addr);
    d816:	68a0      	ldr	r0, [r4, #8]
    d818:	f00a f91a 	bl	17a50 <ll_wl_add>
    d81c:	e7e5      	b.n	d7ea <hci_cmd_handle+0x50e>
	status = ll_wl_remove(&cmd->addr);
    d81e:	68a0      	ldr	r0, [r4, #8]
    d820:	f00a f880 	bl	17924 <ll_wl_remove>
    d824:	e7e1      	b.n	d7ea <hci_cmd_handle+0x50e>
    d826:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    d828:	2300      	movs	r3, #0
    d82a:	aa08      	add	r2, sp, #32
    d82c:	f100 0110 	add.w	r1, r0, #16
    d830:	f00a fe52 	bl	184d8 <ecb_encrypt>
	rp = cmd_complete(evt, sizeof(*rp));
    d834:	2111      	movs	r1, #17
    d836:	a807      	add	r0, sp, #28
    d838:	f7ff f9e4 	bl	cc04 <cmd_complete>
	rp->status = 0x00;
    d83c:	2300      	movs	r3, #0
    d83e:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
    d842:	2210      	movs	r2, #16
    d844:	a908      	add	r1, sp, #32
	memcpy(rp->info, build_info, sizeof(build_info));
    d846:	f7f2 ffa4 	bl	792 <memcpy>
    d84a:	e5c2      	b.n	d3d2 <hci_cmd_handle+0xf6>
	rp = cmd_complete(evt, sizeof(*rp));
    d84c:	2109      	movs	r1, #9
    d84e:	a807      	add	r0, sp, #28
    d850:	f7ff f9d8 	bl	cc04 <cmd_complete>
	rp->status = 0x00;
    d854:	2300      	movs	r3, #0
    d856:	f800 3b01 	strb.w	r3, [r0], #1
	bt_rand(rp->rand, count);
    d85a:	2108      	movs	r1, #8
    d85c:	f7fe fffa 	bl	c854 <bt_rand>
    d860:	e5b7      	b.n	d3d2 <hci_cmd_handle+0xf6>
	rp = cmd_complete(evt, sizeof(*rp));
    d862:	2109      	movs	r1, #9
    d864:	a807      	add	r0, sp, #28
    d866:	f7ff f9cd 	bl	cc04 <cmd_complete>
	rp->status = 0x00;
    d86a:	4601      	mov	r1, r0
    d86c:	2300      	movs	r3, #0
	rp = cmd_complete(evt, sizeof(*rp));
    d86e:	4602      	mov	r2, r0
	rp->status = 0x00;
    d870:	f801 3b01 	strb.w	r3, [r1], #1
	sys_put_le32(val, dst);
    d874:	f46f 0040 	mvn.w	r0, #12582912	; 0xc00000
    d878:	f7ff f980 	bl	cb7c <sys_put_le32>
	sys_put_le32(val >> 32, &dst[4]);
    d87c:	f240 30ff 	movw	r0, #1023	; 0x3ff
    d880:	1d51      	adds	r1, r2, #5
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    d882:	f7ff f97b 	bl	cb7c <sys_put_le32>
    d886:	e5a4      	b.n	d3d2 <hci_cmd_handle+0xf6>
		le_set_adv_param(cmd, evt);
    d888:	a907      	add	r1, sp, #28
    d88a:	68a0      	ldr	r0, [r4, #8]
    d88c:	f7ff fb60 	bl	cf50 <le_set_adv_param.isra.37>
    d890:	e59f      	b.n	d3d2 <hci_cmd_handle+0xf6>
    d892:	68a3      	ldr	r3, [r4, #8]
	ll_adv_data_set(cmd->len, &cmd->data[0]);
    d894:	1c59      	adds	r1, r3, #1
    d896:	7818      	ldrb	r0, [r3, #0]
    d898:	f009 fcb0 	bl	171fc <ll_adv_data_set>
    d89c:	e5b9      	b.n	d412 <hci_cmd_handle+0x136>
    d89e:	68a3      	ldr	r3, [r4, #8]
	ll_scan_data_set(cmd->len, &cmd->data[0]);
    d8a0:	1c59      	adds	r1, r3, #1
    d8a2:	7818      	ldrb	r0, [r3, #0]
    d8a4:	f009 fd16 	bl	172d4 <ll_scan_data_set>
    d8a8:	e5b3      	b.n	d412 <hci_cmd_handle+0x136>
		le_set_adv_enable(cmd, evt);
    d8aa:	a907      	add	r1, sp, #28
    d8ac:	68a0      	ldr	r0, [r4, #8]
    d8ae:	f7ff fb77 	bl	cfa0 <le_set_adv_enable.isra.40>
    d8b2:	e58e      	b.n	d3d2 <hci_cmd_handle+0xf6>
    d8b4:	68a4      	ldr	r4, [r4, #8]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
    d8b6:	7963      	ldrb	r3, [r4, #5]
    d8b8:	f8b4 2003 	ldrh.w	r2, [r4, #3]
    d8bc:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    d8c0:	7820      	ldrb	r0, [r4, #0]
    d8c2:	79a4      	ldrb	r4, [r4, #6]
    d8c4:	9400      	str	r4, [sp, #0]
    d8c6:	f009 fdc3 	bl	17450 <ll_scan_params_set>
	status = ll_scan_enable(cmd->enable);
    d8ca:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    d8cc:	2101      	movs	r1, #1
    d8ce:	a807      	add	r0, sp, #28
    d8d0:	f7ff f998 	bl	cc04 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d8d4:	2c00      	cmp	r4, #0
    d8d6:	bf18      	it	ne
    d8d8:	230c      	movne	r3, #12
    d8da:	bf08      	it	eq
    d8dc:	2300      	moveq	r3, #0
	ccst->status = 0x00;
    d8de:	7003      	strb	r3, [r0, #0]
    d8e0:	e577      	b.n	d3d2 <hci_cmd_handle+0xf6>
    d8e2:	68a2      	ldr	r2, [r4, #8]
    d8e4:	4b66      	ldr	r3, [pc, #408]	; (da80 <hci_cmd_handle+0x7a4>)
	if (cmd->enable && cmd->filter_dup) {
    d8e6:	7810      	ldrb	r0, [r2, #0]
    d8e8:	b140      	cbz	r0, d8fc <hci_cmd_handle+0x620>
    d8ea:	7852      	ldrb	r2, [r2, #1]
    d8ec:	b132      	cbz	r2, d8fc <hci_cmd_handle+0x620>
		dup_count = 0;
    d8ee:	2200      	movs	r2, #0
    d8f0:	601a      	str	r2, [r3, #0]
		dup_curr = 0;
    d8f2:	4b64      	ldr	r3, [pc, #400]	; (da84 <hci_cmd_handle+0x7a8>)
		dup_count = -1;
    d8f4:	601a      	str	r2, [r3, #0]
	status = ll_scan_enable(cmd->enable);
    d8f6:	f009 fdcf 	bl	17498 <ll_scan_enable>
    d8fa:	e7e6      	b.n	d8ca <hci_cmd_handle+0x5ee>
		dup_count = -1;
    d8fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    d900:	e7f8      	b.n	d8f4 <hci_cmd_handle+0x618>
    d902:	68a4      	ldr	r4, [r4, #8]
	status = ll_create_connection(scan_interval, scan_window,
    d904:	f8b4 5013 	ldrh.w	r5, [r4, #19]
    d908:	7963      	ldrb	r3, [r4, #5]
    d90a:	7922      	ldrb	r2, [r4, #4]
    d90c:	8861      	ldrh	r1, [r4, #2]
    d90e:	8820      	ldrh	r0, [r4, #0]
    d910:	9504      	str	r5, [sp, #16]
    d912:	f8b4 5011 	ldrh.w	r5, [r4, #17]
    d916:	9503      	str	r5, [sp, #12]
    d918:	f8b4 500f 	ldrh.w	r5, [r4, #15]
    d91c:	9502      	str	r5, [sp, #8]
    d91e:	7b25      	ldrb	r5, [r4, #12]
    d920:	9501      	str	r5, [sp, #4]
    d922:	3406      	adds	r4, #6
    d924:	9400      	str	r4, [sp, #0]
    d926:	f009 fdf1 	bl	1750c <ll_create_connection>
    d92a:	e54b      	b.n	d3c4 <hci_cmd_handle+0xe8>
	status = ll_connect_disable();
    d92c:	f009 f904 	bl	16b38 <ll_connect_disable>
	cmd_status = status ? BT_HCI_ERR_CMD_DISALLOWED : 0x00;
    d930:	4606      	mov	r6, r0
    d932:	bb48      	cbnz	r0, d988 <hci_cmd_handle+0x6ac>
		*evt = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    d934:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    d938:	2001      	movs	r0, #1
    d93a:	f7f8 f85f 	bl	59fc <bt_buf_get_rx>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d93e:	4a52      	ldr	r2, [pc, #328]	; (da88 <hci_cmd_handle+0x7ac>)
		*evt = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    d940:	9007      	str	r0, [sp, #28]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d942:	e9d2 4500 	ldrd	r4, r5, [r2]
    d946:	2400      	movs	r4, #0
    d948:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    d94c:	ea54 0205 	orrs.w	r2, r4, r5
		*evt = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    d950:	4603      	mov	r3, r0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d952:	d004      	beq.n	d95e <hci_cmd_handle+0x682>
    d954:	4632      	mov	r2, r6
    d956:	4631      	mov	r1, r6
    d958:	2002      	movs	r0, #2
    d95a:	f7ff fb31 	bl	cfc0 <le_conn_complete.part.44>
		if ((*evt)->len) {
    d95e:	9807      	ldr	r0, [sp, #28]
    d960:	8984      	ldrh	r4, [r0, #12]
    d962:	b14c      	cbz	r4, d978 <hci_cmd_handle+0x69c>
			ccst = cmd_complete(&cc, sizeof(*ccst));
    d964:	2101      	movs	r1, #1
    d966:	a808      	add	r0, sp, #32
    d968:	f7ff f94c 	bl	cc04 <cmd_complete>
			ccst->status = cmd_status;
    d96c:	2300      	movs	r3, #0
    d96e:	7003      	strb	r3, [r0, #0]
			bt_recv_prio(cc);
    d970:	9808      	ldr	r0, [sp, #32]
    d972:	f7f7 fe15 	bl	55a0 <bt_recv_prio>
    d976:	e52c      	b.n	d3d2 <hci_cmd_handle+0xf6>
			net_buf_unref(*evt);
    d978:	f00b fcba 	bl	192f0 <net_buf_unref>
	ccst = cmd_complete(evt, sizeof(*ccst));
    d97c:	2101      	movs	r1, #1
    d97e:	a807      	add	r0, sp, #28
    d980:	f7ff f940 	bl	cc04 <cmd_complete>
	ccst->status = status;
    d984:	7004      	strb	r4, [r0, #0]
    d986:	e524      	b.n	d3d2 <hci_cmd_handle+0xf6>
	cmd_status = status ? BT_HCI_ERR_CMD_DISALLOWED : 0x00;
    d988:	240c      	movs	r4, #12
    d98a:	e7f7      	b.n	d97c <hci_cmd_handle+0x6a0>
	status = ll_chm_update(&cmd->ch_map[0]);
    d98c:	68a0      	ldr	r0, [r4, #8]
    d98e:	f008 f981 	bl	15c94 <ll_chm_update>
    d992:	e79a      	b.n	d8ca <hci_cmd_handle+0x5ee>
    d994:	68a0      	ldr	r0, [r4, #8]
	status = ll_enc_req_send(handle,
    d996:	f100 030c 	add.w	r3, r0, #12
    d99a:	f100 020a 	add.w	r2, r0, #10
    d99e:	1c81      	adds	r1, r0, #2
    d9a0:	8800      	ldrh	r0, [r0, #0]
    d9a2:	f008 fc6f 	bl	16284 <ll_enc_req_send>
    d9a6:	e50d      	b.n	d3c4 <hci_cmd_handle+0xe8>
	handle = sys_le16_to_cpu(cmd->handle);
    d9a8:	68a2      	ldr	r2, [r4, #8]
    d9aa:	f832 4b02 	ldrh.w	r4, [r2], #2
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
    d9ae:	2100      	movs	r1, #0
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
    d9b0:	b2a0      	uxth	r0, r4
    d9b2:	f008 f9c6 	bl	15d42 <ll_start_enc_req_send>
    d9b6:	e57e      	b.n	d4b6 <hci_cmd_handle+0x1da>
	handle = sys_le16_to_cpu(cmd->handle);
    d9b8:	68a3      	ldr	r3, [r4, #8]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
    d9ba:	2200      	movs	r2, #0
	handle = sys_le16_to_cpu(cmd->handle);
    d9bc:	881c      	ldrh	r4, [r3, #0]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
    d9be:	2106      	movs	r1, #6
    d9c0:	e7f6      	b.n	d9b0 <hci_cmd_handle+0x6d4>
	handle = sys_le16_to_cpu(cmd->handle);
    d9c2:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    d9c4:	2108      	movs	r1, #8
    d9c6:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    d9c8:	881d      	ldrh	r5, [r3, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    d9ca:	f7ff f91b 	bl	cc04 <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    d9ce:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    d9d0:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
    d9d2:	1cc1      	adds	r1, r0, #3
    d9d4:	4630      	mov	r0, r6
    d9d6:	f008 f99f 	bl	15d18 <ll_chm_get>
    d9da:	e547      	b.n	d46c <hci_cmd_handle+0x190>
	handle = sys_le16_to_cpu(cmd->handle);
    d9dc:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
    d9de:	8818      	ldrh	r0, [r3, #0]
    d9e0:	f008 f9f2 	bl	15dc8 <ll_feature_req_send>
    d9e4:	e4ee      	b.n	d3c4 <hci_cmd_handle+0xe8>
    d9e6:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_max,
    d9e8:	8911      	ldrh	r1, [r2, #8]
    d9ea:	8893      	ldrh	r3, [r2, #4]
    d9ec:	8810      	ldrh	r0, [r2, #0]
    d9ee:	9101      	str	r1, [sp, #4]
    d9f0:	88d2      	ldrh	r2, [r2, #6]
    d9f2:	9200      	str	r2, [sp, #0]
    d9f4:	2200      	movs	r2, #0
    d9f6:	4611      	mov	r1, r2
    d9f8:	f008 f8d4 	bl	15ba4 <ll_conn_update>
	*evt = cmd_status(status);
    d9fc:	b2c0      	uxtb	r0, r0
    d9fe:	e4e5      	b.n	d3cc <hci_cmd_handle+0xf0>
    da00:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    da02:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    da04:	8814      	ldrh	r4, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    da06:	8893      	ldrh	r3, [r2, #4]
    da08:	9101      	str	r1, [sp, #4]
    da0a:	88d2      	ldrh	r2, [r2, #6]
    da0c:	9200      	str	r2, [sp, #0]
    da0e:	2200      	movs	r2, #0
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    da10:	2102      	movs	r1, #2
    da12:	b2a0      	uxth	r0, r4
    da14:	f008 f8c6 	bl	15ba4 <ll_conn_update>
	rp = cmd_complete(evt, sizeof(*rp));
    da18:	2103      	movs	r1, #3
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    da1a:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    da1c:	a807      	add	r0, sp, #28
    da1e:	f7ff f8f1 	bl	cc04 <cmd_complete>
	rp->status = status;
    da22:	7005      	strb	r5, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    da24:	f8a0 4001 	strh.w	r4, [r0, #1]
    da28:	e4d3      	b.n	d3d2 <hci_cmd_handle+0xf6>
    da2a:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    da2c:	881c      	ldrh	r4, [r3, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    da2e:	789a      	ldrb	r2, [r3, #2]
    da30:	2300      	movs	r3, #0
    da32:	9301      	str	r3, [sp, #4]
    da34:	9300      	str	r3, [sp, #0]
    da36:	e7eb      	b.n	da10 <hci_cmd_handle+0x734>
    da38:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    da3a:	881c      	ldrh	r4, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
    da3c:	889a      	ldrh	r2, [r3, #4]
    da3e:	8859      	ldrh	r1, [r3, #2]
    da40:	b2a0      	uxth	r0, r4
    da42:	f008 fa31 	bl	15ea8 <ll_length_req_send>
    da46:	e536      	b.n	d4b6 <hci_cmd_handle+0x1da>
	rp = cmd_complete(evt, sizeof(*rp));
    da48:	2105      	movs	r1, #5
    da4a:	a807      	add	r0, sp, #28
    da4c:	f7ff f8da 	bl	cc04 <cmd_complete>
    da50:	4604      	mov	r4, r0
	ll_length_default_get(&rp->max_tx_octets, &rp->max_tx_time);
    da52:	1cc1      	adds	r1, r0, #3
    da54:	3001      	adds	r0, #1
    da56:	f008 fa4b 	bl	15ef0 <ll_length_default_get>
	rp->status = 0x00;
    da5a:	2300      	movs	r3, #0
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    da5c:	7023      	strb	r3, [r4, #0]
    da5e:	e4b8      	b.n	d3d2 <hci_cmd_handle+0xf6>
    da60:	68a3      	ldr	r3, [r4, #8]
	status = ll_length_default_set(cmd->max_tx_octets, cmd->max_tx_time);
    da62:	8859      	ldrh	r1, [r3, #2]
    da64:	8818      	ldrh	r0, [r3, #0]
    da66:	f008 fa4d 	bl	15f04 <ll_length_default_set>
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    da6a:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    da6c:	2101      	movs	r1, #1
    da6e:	a807      	add	r0, sp, #28
    da70:	f7ff f8c8 	bl	cc04 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_INVALID_LL_PARAM;
    da74:	2c00      	cmp	r4, #0
    da76:	bf18      	it	ne
    da78:	231e      	movne	r3, #30
    da7a:	e72e      	b.n	d8da <hci_cmd_handle+0x5fe>
    da7c:	20009fc0 	.word	0x20009fc0
    da80:	20000b5c 	.word	0x20000b5c
    da84:	20000b60 	.word	0x20000b60
    da88:	20009fb8 	.word	0x20009fb8
	rp = cmd_complete(evt, sizeof(*rp));
    da8c:	2109      	movs	r1, #9
    da8e:	a807      	add	r0, sp, #28
    da90:	f7ff f8b8 	bl	cc04 <cmd_complete>
    da94:	4604      	mov	r4, r0
	ll_length_max_get(&rp->max_tx_octets, &rp->max_tx_time,
    da96:	1dc3      	adds	r3, r0, #7
    da98:	1d42      	adds	r2, r0, #5
    da9a:	1cc1      	adds	r1, r0, #3
    da9c:	3001      	adds	r0, #1
    da9e:	f008 fa3b 	bl	15f18 <ll_length_max_get>
    daa2:	e7da      	b.n	da5a <hci_cmd_handle+0x77e>
	handle = sys_le16_to_cpu(cmd->handle);
    daa4:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    daa6:	2105      	movs	r1, #5
    daa8:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    daaa:	881d      	ldrh	r5, [r3, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    daac:	f7ff f8aa 	bl	cc04 <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    dab0:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    dab2:	4604      	mov	r4, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    dab4:	1d02      	adds	r2, r0, #4
    dab6:	1cc1      	adds	r1, r0, #3
    dab8:	4630      	mov	r0, r6
    daba:	f008 fa36 	bl	15f2a <ll_phy_get>
	return __builtin_ffs(op);
    dabe:	78e2      	ldrb	r2, [r4, #3]
	rp->handle = sys_cpu_to_le16(handle);
    dac0:	f8a4 5001 	strh.w	r5, [r4, #1]
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    dac4:	2800      	cmp	r0, #0
    dac6:	bf14      	ite	ne
    dac8:	230c      	movne	r3, #12
    daca:	2300      	moveq	r3, #0
    dacc:	7023      	strb	r3, [r4, #0]
    dace:	2a00      	cmp	r2, #0
    dad0:	fa92 f3a2 	rbit	r3, r2
    dad4:	fab3 f383 	clz	r3, r3
    dad8:	7922      	ldrb	r2, [r4, #4]
    dada:	bf08      	it	eq
    dadc:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    dae0:	3301      	adds	r3, #1
	rp->tx_phy = find_lsb_set(rp->tx_phy);
    dae2:	70e3      	strb	r3, [r4, #3]
    dae4:	2a00      	cmp	r2, #0
    dae6:	fa92 f3a2 	rbit	r3, r2
    daea:	fab3 f383 	clz	r3, r3
    daee:	bf08      	it	eq
    daf0:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    daf4:	3301      	adds	r3, #1
	rp->rx_phy = find_lsb_set(rp->rx_phy);
    daf6:	7123      	strb	r3, [r4, #4]
    daf8:	e46b      	b.n	d3d2 <hci_cmd_handle+0xf6>
    dafa:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    dafc:	781a      	ldrb	r2, [r3, #0]
    dafe:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
    db00:	bf44      	itt	mi
    db02:	2107      	movmi	r1, #7
    db04:	7059      	strbmi	r1, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    db06:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
    db08:	bf44      	itt	mi
    db0a:	2207      	movmi	r2, #7
    db0c:	709a      	strbmi	r2, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    db0e:	7899      	ldrb	r1, [r3, #2]
    db10:	7858      	ldrb	r0, [r3, #1]
    db12:	f008 fa1f 	bl	15f54 <ll_phy_default_set>
    db16:	e7a8      	b.n	da6a <hci_cmd_handle+0x78e>
    db18:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    db1a:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(cmd->handle);
    db1c:	8818      	ldrh	r0, [r3, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
    db1e:	f8b3 4005 	ldrh.w	r4, [r3, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    db22:	07d7      	lsls	r7, r2, #31
		cmd->tx_phys = mask_phys;
    db24:	bf44      	itt	mi
    db26:	2107      	movmi	r1, #7
    db28:	70d9      	strbmi	r1, [r3, #3]
	if (!(cmd->tx_phys & 0x07) ||
    db2a:	78d9      	ldrb	r1, [r3, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    db2c:	0796      	lsls	r6, r2, #30
		cmd->rx_phys = mask_phys;
    db2e:	bf44      	itt	mi
    db30:	2207      	movmi	r2, #7
    db32:	711a      	strbmi	r2, [r3, #4]
	if (!(cmd->tx_phys & 0x07) ||
    db34:	074d      	lsls	r5, r1, #29
    db36:	d002      	beq.n	db3e <hci_cmd_handle+0x862>
	    !(cmd->rx_phys & 0x07)) {
    db38:	791b      	ldrb	r3, [r3, #4]
	if (!(cmd->tx_phys & 0x07) ||
    db3a:	075a      	lsls	r2, r3, #29
    db3c:	d105      	bne.n	db4a <hci_cmd_handle+0x86e>
		ccst = cmd_complete(evt, sizeof(*ccst));
    db3e:	2101      	movs	r1, #1
    db40:	a807      	add	r0, sp, #28
    db42:	f7ff f85f 	bl	cc04 <cmd_complete>
		ccst->status = BT_HCI_ERR_INVALID_PARAM;
    db46:	2312      	movs	r3, #18
    db48:	e6c9      	b.n	d8de <hci_cmd_handle+0x602>
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
    db4a:	ea41 0203 	orr.w	r2, r1, r3
    db4e:	f012 0ff8 	tst.w	r2, #248	; 0xf8
    db52:	d005      	beq.n	db60 <hci_cmd_handle+0x884>
		ccst = cmd_complete(evt, sizeof(*ccst));
    db54:	2101      	movs	r1, #1
    db56:	a807      	add	r0, sp, #28
    db58:	f7ff f854 	bl	cc04 <cmd_complete>
		ccst->status = BT_HCI_ERR_UNSUPP_FEATURE_PARAM_VAL;
    db5c:	2311      	movs	r3, #17
    db5e:	e6be      	b.n	d8de <hci_cmd_handle+0x602>
	if (phy_opts & 0x03) {
    db60:	f014 0203 	ands.w	r2, r4, #3
		phy_opts -= 1;
    db64:	bf1c      	itt	ne
    db66:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
		phy_opts &= 1;
    db6a:	f004 0201 	andne.w	r2, r4, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
    db6e:	f008 f9fb 	bl	15f68 <ll_phy_req_send>
    db72:	e427      	b.n	d3c4 <hci_cmd_handle+0xe8>
    db74:	68a0      	ldr	r0, [r4, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
    db76:	f100 0217 	add.w	r2, r0, #23
    db7a:	1dc1      	adds	r1, r0, #7
    db7c:	f00a fa3c 	bl	17ff8 <ll_rl_add>
    db80:	e633      	b.n	d7ea <hci_cmd_handle+0x50e>
	status = ll_rl_remove(&cmd->peer_id_addr);
    db82:	68a0      	ldr	r0, [r4, #8]
    db84:	f00a fada 	bl	1813c <ll_rl_remove>
    db88:	e62f      	b.n	d7ea <hci_cmd_handle+0x50e>
	ccst = cmd_complete(evt, sizeof(*ccst));
    db8a:	2101      	movs	r1, #1
    db8c:	a807      	add	r0, sp, #28
    db8e:	f7ff f839 	bl	cc04 <cmd_complete>
    db92:	4604      	mov	r4, r0
	ccst->status = ll_rl_clear();
    db94:	f00a fa16 	bl	17fc4 <ll_rl_clear>
    db98:	e63b      	b.n	d812 <hci_cmd_handle+0x536>
	rp = cmd_complete(evt, sizeof(*rp));
    db9a:	2102      	movs	r1, #2
    db9c:	a807      	add	r0, sp, #28
    db9e:	f7ff f831 	bl	cc04 <cmd_complete>
    dba2:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
    dba4:	f00a fa0c 	bl	17fc0 <ll_rl_size_get>
    dba8:	7060      	strb	r0, [r4, #1]
    dbaa:	e756      	b.n	da5a <hci_cmd_handle+0x77e>
	memcpy(dst, src, sizeof(*dst));
    dbac:	2207      	movs	r2, #7
    dbae:	68a1      	ldr	r1, [r4, #8]
    dbb0:	a808      	add	r0, sp, #32
    dbb2:	f7f2 fdee 	bl	792 <memcpy>
	rp = cmd_complete(evt, sizeof(*rp));
    dbb6:	2107      	movs	r1, #7
    dbb8:	a807      	add	r0, sp, #28
    dbba:	f7ff f823 	bl	cc04 <cmd_complete>
    dbbe:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
    dbc0:	1c41      	adds	r1, r0, #1
    dbc2:	a808      	add	r0, sp, #32
    dbc4:	f00a fb48 	bl	18258 <ll_rl_crpa_get>
    dbc8:	e623      	b.n	d812 <hci_cmd_handle+0x536>
    dbca:	2207      	movs	r2, #7
    dbcc:	68a1      	ldr	r1, [r4, #8]
    dbce:	a808      	add	r0, sp, #32
    dbd0:	f7f2 fddf 	bl	792 <memcpy>
	rp = cmd_complete(evt, sizeof(*rp));
    dbd4:	2107      	movs	r1, #7
    dbd6:	a807      	add	r0, sp, #28
    dbd8:	f7ff f814 	bl	cc04 <cmd_complete>
    dbdc:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
    dbde:	1c41      	adds	r1, r0, #1
    dbe0:	a808      	add	r0, sp, #32
    dbe2:	f00a fb59 	bl	18298 <ll_rl_lrpa_get>
    dbe6:	e614      	b.n	d812 <hci_cmd_handle+0x536>
	u8_t enable = cmd->enable;
    dbe8:	68a3      	ldr	r3, [r4, #8]
	ccst = cmd_complete(evt, sizeof(*ccst));
    dbea:	2101      	movs	r1, #1
    dbec:	a807      	add	r0, sp, #28
	u8_t enable = cmd->enable;
    dbee:	781d      	ldrb	r5, [r3, #0]
	ccst = cmd_complete(evt, sizeof(*ccst));
    dbf0:	f7ff f808 	bl	cc04 <cmd_complete>
    dbf4:	4604      	mov	r4, r0
	ccst->status = ll_rl_enable(enable);
    dbf6:	4628      	mov	r0, r5
    dbf8:	f00a fb66 	bl	182c8 <ll_rl_enable>
    dbfc:	e609      	b.n	d812 <hci_cmd_handle+0x536>
	u16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
    dbfe:	68a3      	ldr	r3, [r4, #8]
	ll_rl_timeout_set(timeout);
    dc00:	8818      	ldrh	r0, [r3, #0]
    dc02:	f00a fb73 	bl	182ec <ll_rl_timeout_set>
    dc06:	e404      	b.n	d412 <hci_cmd_handle+0x136>
    dc08:	68a0      	ldr	r0, [r4, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    dc0a:	79c1      	ldrb	r1, [r0, #7]
    dc0c:	f00a fb76 	bl	182fc <ll_priv_mode_set>
    dc10:	e5eb      	b.n	d7ea <hci_cmd_handle+0x50e>
	rp = cmd_complete(evt, sizeof(*rp));
    dc12:	2103      	movs	r1, #3
    dc14:	a807      	add	r0, sp, #28
    dc16:	f7fe fff5 	bl	cc04 <cmd_complete>
	rp->status = 0x00;
    dc1a:	4601      	mov	r1, r0
    dc1c:	2300      	movs	r3, #0
    dc1e:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    dc22:	3001      	adds	r0, #1
    dc24:	f7fe fe12 	bl	c84c <ll_tx_pwr_get>
    dc28:	f7ff bbd3 	b.w	d3d2 <hci_cmd_handle+0xf6>
	rp = cmd_complete(evt, sizeof(*rp));
    dc2c:	210d      	movs	r1, #13
    dc2e:	a807      	add	r0, sp, #28
    dc30:	f7fe ffe8 	bl	cc04 <cmd_complete>
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    dc34:	2202      	movs	r2, #2
    dc36:	7042      	strb	r2, [r0, #1]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    dc38:	70c2      	strb	r2, [r0, #3]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    dc3a:	2201      	movs	r2, #1
    dc3c:	7182      	strb	r2, [r0, #6]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    dc3e:	220b      	movs	r2, #11
	rp->status = 0x00;
    dc40:	2300      	movs	r3, #0
	rp->fw_revision = KERNEL_VERSION_MINOR;
    dc42:	71c2      	strb	r2, [r0, #7]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    dc44:	2263      	movs	r2, #99	; 0x63
	rp->status = 0x00;
    dc46:	7003      	strb	r3, [r0, #0]
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    dc48:	7083      	strb	r3, [r0, #2]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    dc4a:	7103      	strb	r3, [r0, #4]
	rp->fw_variant = 0;
    dc4c:	7143      	strb	r3, [r0, #5]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    dc4e:	7203      	strb	r3, [r0, #8]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    dc50:	7242      	strb	r2, [r0, #9]
    dc52:	7283      	strb	r3, [r0, #10]
    dc54:	72c3      	strb	r3, [r0, #11]
    dc56:	7303      	strb	r3, [r0, #12]
    dc58:	f7ff bbbb 	b.w	d3d2 <hci_cmd_handle+0xf6>
	rp = cmd_complete(evt, sizeof(*rp));
    dc5c:	2141      	movs	r1, #65	; 0x41
    dc5e:	a807      	add	r0, sp, #28
    dc60:	f7fe ffd0 	bl	cc04 <cmd_complete>
	rp->status = 0x00;
    dc64:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    dc66:	4604      	mov	r4, r0
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    dc68:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    dc6a:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    dc6e:	f7f2 fdbc 	bl	7ea <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
    dc72:	7863      	ldrb	r3, [r4, #1]
    dc74:	f063 0358 	orn	r3, r3, #88	; 0x58
    dc78:	7063      	strb	r3, [r4, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    dc7a:	78a3      	ldrb	r3, [r4, #2]
    dc7c:	f043 0303 	orr.w	r3, r3, #3
    dc80:	70a3      	strb	r3, [r4, #2]
    dc82:	f7ff bba6 	b.w	d3d2 <hci_cmd_handle+0xf6>
	rp = cmd_complete(evt, sizeof(*rp));
    dc86:	2109      	movs	r1, #9
    dc88:	a807      	add	r0, sp, #28
    dc8a:	f7fe ffbb 	bl	cc04 <cmd_complete>
	rp->status = 0x00;
    dc8e:	2100      	movs	r1, #0
    dc90:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    dc94:	2208      	movs	r2, #8
		memset(rp->er, 0x00, sizeof(rp->er));
    dc96:	f7f2 fda8 	bl	7ea <memset>
    dc9a:	f7ff bb9a 	b.w	d3d2 <hci_cmd_handle+0xf6>
	const char build_info[] = HCI_VS_BUILD_INFO;
    dc9e:	4b5c      	ldr	r3, [pc, #368]	; (de10 <hci_cmd_handle+0xb34>)
    dca0:	aa08      	add	r2, sp, #32
    dca2:	f103 0628 	add.w	r6, r3, #40	; 0x28
    dca6:	4615      	mov	r5, r2
    dca8:	6818      	ldr	r0, [r3, #0]
    dcaa:	6859      	ldr	r1, [r3, #4]
    dcac:	4614      	mov	r4, r2
    dcae:	c403      	stmia	r4!, {r0, r1}
    dcb0:	3308      	adds	r3, #8
    dcb2:	42b3      	cmp	r3, r6
    dcb4:	4622      	mov	r2, r4
    dcb6:	d1f7      	bne.n	dca8 <hci_cmd_handle+0x9cc>
	rp = cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
    dcb8:	2129      	movs	r1, #41	; 0x29
    dcba:	a807      	add	r0, sp, #28
    dcbc:	f7fe ffa2 	bl	cc04 <cmd_complete>
	rp->status = 0x00;
    dcc0:	2300      	movs	r3, #0
    dcc2:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
    dcc6:	2228      	movs	r2, #40	; 0x28
    dcc8:	4629      	mov	r1, r5
    dcca:	e5bc      	b.n	d846 <hci_cmd_handle+0x56a>
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    dccc:	68a1      	ldr	r1, [r4, #8]
    dcce:	2000      	movs	r0, #0
    dcd0:	f7fe fda0 	bl	c814 <ll_addr_set>
    dcd4:	f7ff bb9d 	b.w	d412 <hci_cmd_handle+0x136>
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    dcd8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    dcdc:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
    dce0:	3201      	adds	r2, #1
    dce2:	d106      	bne.n	dcf2 <hci_cmd_handle+0xa16>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    dce4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    dce8:	f64f 72ff 	movw	r2, #65535	; 0xffff
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    dcec:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    dcee:	4293      	cmp	r3, r2
    dcf0:	d020      	beq.n	dd34 <hci_cmd_handle+0xa58>
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
    dcf2:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    dcf6:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    dcfa:	07db      	lsls	r3, r3, #31
    dcfc:	d51a      	bpl.n	dd34 <hci_cmd_handle+0xa58>
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    dcfe:	2118      	movs	r1, #24
    dd00:	a807      	add	r0, sp, #28
    dd02:	f7fe ff7f 	bl	cc04 <cmd_complete>
		rp->status = 0x00;
    dd06:	2600      	movs	r6, #0
		rp->num_addrs = 1;
    dd08:	2301      	movs	r3, #1
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    dd0a:	4604      	mov	r4, r0
		rp->num_addrs = 1;
    dd0c:	7043      	strb	r3, [r0, #1]
		rp->status = 0x00;
    dd0e:	7006      	strb	r6, [r0, #0]
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addr->bdaddr.val[0]);
    dd10:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    dd14:	1ca1      	adds	r1, r4, #2
    dd16:	f7fe ff31 	bl	cb7c <sys_put_le32>
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addr->bdaddr.val[4]);
    dd1a:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
	dst[0] = val;
    dd1e:	71a3      	strb	r3, [r4, #6]
	dst[1] = val >> 8;
    dd20:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addr->bdaddr);
    dd24:	f063 033f 	orn	r3, r3, #63	; 0x3f
    dd28:	71e3      	strb	r3, [r4, #7]
		memset(addr->ir, 0x00, sizeof(addr->ir));
    dd2a:	2210      	movs	r2, #16
    dd2c:	4631      	mov	r1, r6
    dd2e:	f104 0008 	add.w	r0, r4, #8
    dd32:	e7b0      	b.n	dc96 <hci_cmd_handle+0x9ba>
	rp = cmd_complete(evt, sizeof(*rp));
    dd34:	2102      	movs	r1, #2
    dd36:	a807      	add	r0, sp, #28
    dd38:	f7fe ff64 	bl	cc04 <cmd_complete>
	rp->status = 0x00;
    dd3c:	2300      	movs	r3, #0
    dd3e:	7003      	strb	r3, [r0, #0]
	rp->num_addrs = 0;
    dd40:	7043      	strb	r3, [r0, #1]
    dd42:	f7ff bb46 	b.w	d3d2 <hci_cmd_handle+0xf6>
	rp = cmd_complete(evt, sizeof(*rp));
    dd46:	2121      	movs	r1, #33	; 0x21
    dd48:	a807      	add	r0, sp, #28
    dd4a:	f7fe ff5b 	bl	cc04 <cmd_complete>
	rp->status = 0x00;
    dd4e:	4603      	mov	r3, r0
    dd50:	2200      	movs	r2, #0
    dd52:	f803 2b01 	strb.w	r2, [r3], #1
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    dd56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	rp = cmd_complete(evt, sizeof(*rp));
    dd5a:	4604      	mov	r4, r0
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    dd5c:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
    dd60:	3101      	adds	r1, #1
    dd62:	d04b      	beq.n	ddfc <hci_cmd_handle+0xb20>
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    dd64:	f8d2 1094 	ldr.w	r1, [r2, #148]	; 0x94
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    dd68:	3101      	adds	r1, #1
    dd6a:	d047      	beq.n	ddfc <hci_cmd_handle+0xb20>
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    dd6c:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    dd70:	3101      	adds	r1, #1
    dd72:	d043      	beq.n	ddfc <hci_cmd_handle+0xb20>
	    (NRF_FICR->IR[3] != UINT32_MAX)) {
    dd74:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    dd78:	3101      	adds	r1, #1
    dd7a:	d03f      	beq.n	ddfc <hci_cmd_handle+0xb20>
		sys_put_le32(NRF_FICR->IR[0], &rp->ir[0]);
    dd7c:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
    dd80:	4619      	mov	r1, r3
    dd82:	f7fe fefb 	bl	cb7c <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[1], &rp->ir[4]);
    dd86:	1d61      	adds	r1, r4, #5
    dd88:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
    dd8c:	f7fe fef6 	bl	cb7c <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[2], &rp->ir[8]);
    dd90:	f104 0109 	add.w	r1, r4, #9
    dd94:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    dd98:	f7fe fef0 	bl	cb7c <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[3], &rp->ir[12]);
    dd9c:	f104 010d 	add.w	r1, r4, #13
    dda0:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
    dda4:	f7fe feea 	bl	cb7c <sys_put_le32>
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    dda8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    ddac:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    ddb0:	3301      	adds	r3, #1
    ddb2:	f104 0311 	add.w	r3, r4, #17
    ddb6:	d027      	beq.n	de08 <hci_cmd_handle+0xb2c>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    ddb8:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    ddbc:	3101      	adds	r1, #1
    ddbe:	d023      	beq.n	de08 <hci_cmd_handle+0xb2c>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    ddc0:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    ddc4:	3101      	adds	r1, #1
    ddc6:	d01f      	beq.n	de08 <hci_cmd_handle+0xb2c>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
    ddc8:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    ddcc:	3101      	adds	r1, #1
    ddce:	d01b      	beq.n	de08 <hci_cmd_handle+0xb2c>
		sys_put_le32(NRF_FICR->ER[0], &rp->er[0]);
    ddd0:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
    ddd4:	4619      	mov	r1, r3
    ddd6:	f7fe fed1 	bl	cb7c <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[1], &rp->er[4]);
    ddda:	f104 0115 	add.w	r1, r4, #21
    ddde:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    dde2:	f7fe fecb 	bl	cb7c <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[2], &rp->er[8]);
    dde6:	f104 0119 	add.w	r1, r4, #25
    ddea:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
    ddee:	f7fe fec5 	bl	cb7c <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    ddf2:	f104 011d 	add.w	r1, r4, #29
    ddf6:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
    ddfa:	e542      	b.n	d882 <hci_cmd_handle+0x5a6>
		memset(rp->ir, 0x00, sizeof(rp->ir));
    ddfc:	2210      	movs	r2, #16
    ddfe:	2100      	movs	r1, #0
    de00:	4618      	mov	r0, r3
    de02:	f7f2 fcf2 	bl	7ea <memset>
    de06:	e7cf      	b.n	dda8 <hci_cmd_handle+0xacc>
		memset(rp->er, 0x00, sizeof(rp->er));
    de08:	2210      	movs	r2, #16
    de0a:	2100      	movs	r1, #0
    de0c:	4618      	mov	r0, r3
    de0e:	e742      	b.n	dc96 <hci_cmd_handle+0x9ba>
    de10:	00025835 	.word	0x00025835

0000de14 <hci_acl_handle>:
{
    de14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	*evt = NULL;
    de18:	2300      	movs	r3, #0
    de1a:	600b      	str	r3, [r1, #0]
	if (buf->len < sizeof(*acl)) {
    de1c:	8983      	ldrh	r3, [r0, #12]
    de1e:	2b03      	cmp	r3, #3
{
    de20:	4606      	mov	r6, r0
    de22:	4688      	mov	r8, r1
	if (buf->len < sizeof(*acl)) {
    de24:	d80d      	bhi.n	de42 <hci_acl_handle+0x2e>
		BT_ERR("No HCI ACL header");
    de26:	4b3a      	ldr	r3, [pc, #232]	; (df10 <hci_acl_handle+0xfc>)
    de28:	9301      	str	r3, [sp, #4]
    de2a:	9300      	str	r3, [sp, #0]
    de2c:	4a39      	ldr	r2, [pc, #228]	; (df14 <hci_acl_handle+0x100>)
    de2e:	4b3a      	ldr	r3, [pc, #232]	; (df18 <hci_acl_handle+0x104>)
    de30:	493a      	ldr	r1, [pc, #232]	; (df1c <hci_acl_handle+0x108>)
    de32:	483b      	ldr	r0, [pc, #236]	; (df20 <hci_acl_handle+0x10c>)
		BT_ERR("Invalid HCI ACL packet length");
    de34:	f7f4 fa34 	bl	22a0 <printk>
		return -EINVAL;
    de38:	f06f 0015 	mvn.w	r0, #21
}
    de3c:	b003      	add	sp, #12
    de3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	acl = (void *)buf->data;
    de42:	f850 3f08 	ldr.w	r3, [r0, #8]!
	net_buf_pull(buf, sizeof(*acl));
    de46:	2104      	movs	r1, #4
	len = sys_le16_to_cpu(acl->len);
    de48:	885f      	ldrh	r7, [r3, #2]
	handle = sys_le16_to_cpu(acl->handle);
    de4a:	881d      	ldrh	r5, [r3, #0]
	net_buf_pull(buf, sizeof(*acl));
    de4c:	f00b fafe 	bl	1944c <net_buf_simple_pull>
	if (buf->len < len) {
    de50:	89b3      	ldrh	r3, [r6, #12]
    de52:	42bb      	cmp	r3, r7
    de54:	d207      	bcs.n	de66 <hci_acl_handle+0x52>
		BT_ERR("Invalid HCI ACL packet length");
    de56:	4b2e      	ldr	r3, [pc, #184]	; (df10 <hci_acl_handle+0xfc>)
    de58:	9301      	str	r3, [sp, #4]
    de5a:	9300      	str	r3, [sp, #0]
    de5c:	4a2d      	ldr	r2, [pc, #180]	; (df14 <hci_acl_handle+0x100>)
    de5e:	4b2e      	ldr	r3, [pc, #184]	; (df18 <hci_acl_handle+0x104>)
    de60:	492e      	ldr	r1, [pc, #184]	; (df1c <hci_acl_handle+0x108>)
    de62:	4830      	ldr	r0, [pc, #192]	; (df24 <hci_acl_handle+0x110>)
    de64:	e7e6      	b.n	de34 <hci_acl_handle+0x20>
	node_tx = ll_tx_mem_acquire();
    de66:	f008 f989 	bl	1617c <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
    de6a:	ea4f 3915 	mov.w	r9, r5, lsr #12
	if (!node_tx) {
    de6e:	4604      	mov	r4, r0
	handle = bt_acl_handle(handle);
    de70:	f3c5 050b 	ubfx	r5, r5, #0, #12
	if (!node_tx) {
    de74:	bb30      	cbnz	r0, dec4 <hci_acl_handle+0xb0>
		BT_ERR("Tx Buffer Overflow");
    de76:	4b26      	ldr	r3, [pc, #152]	; (df10 <hci_acl_handle+0xfc>)
    de78:	9301      	str	r3, [sp, #4]
    de7a:	9300      	str	r3, [sp, #0]
    de7c:	4a25      	ldr	r2, [pc, #148]	; (df14 <hci_acl_handle+0x100>)
    de7e:	4b26      	ldr	r3, [pc, #152]	; (df18 <hci_acl_handle+0x104>)
    de80:	4926      	ldr	r1, [pc, #152]	; (df1c <hci_acl_handle+0x108>)
    de82:	4829      	ldr	r0, [pc, #164]	; (df28 <hci_acl_handle+0x114>)
    de84:	f7f4 fa0c 	bl	22a0 <printk>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
    de88:	4b28      	ldr	r3, [pc, #160]	; (df2c <hci_acl_handle+0x118>)
    de8a:	e9d3 2300 	ldrd	r2, r3, [r3]
    de8e:	2300      	movs	r3, #0
    de90:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    de94:	4313      	orrs	r3, r2
    de96:	d012      	beq.n	debe <hci_acl_handle+0xaa>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    de98:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    de9c:	2001      	movs	r0, #1
    de9e:	f7f7 fdad 	bl	59fc <bt_buf_get_rx>
	evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
    dea2:	2201      	movs	r2, #1
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    dea4:	f8c8 0000 	str.w	r0, [r8]
	evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
    dea8:	211a      	movs	r1, #26
    deaa:	f7fe fe70 	bl	cb8e <evt_create>
	ep = net_buf_add(*buf, sizeof(*ep));
    deae:	f8d8 0000 	ldr.w	r0, [r8]
    deb2:	2101      	movs	r1, #1
    deb4:	3008      	adds	r0, #8
    deb6:	f00b fa79 	bl	193ac <net_buf_simple_add>
	ep->link_type = BT_OVERFLOW_LINK_ACL;
    deba:	2301      	movs	r3, #1
    debc:	7003      	strb	r3, [r0, #0]
		return -ENOBUFS;
    debe:	f06f 0036 	mvn.w	r0, #54	; 0x36
    dec2:	e7bb      	b.n	de3c <hci_acl_handle+0x28>
    dec4:	7903      	ldrb	r3, [r0, #4]
	if (flags == BT_ACL_START_NO_FLUSH || flags == BT_ACL_START) {
    dec6:	f1b9 0f00 	cmp.w	r9, #0
    deca:	d002      	beq.n	ded2 <hci_acl_handle+0xbe>
    decc:	f1b9 0f02 	cmp.w	r9, #2
    ded0:	d11c      	bne.n	df0c <hci_acl_handle+0xf8>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
    ded2:	2202      	movs	r2, #2
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    ded4:	f362 0301 	bfi	r3, r2, #0, #2
    ded8:	7123      	strb	r3, [r4, #4]
	pdu_data->len = len;
    deda:	7167      	strb	r7, [r4, #5]
	memcpy(&pdu_data->lldata[0], buf->data, len);
    dedc:	68b1      	ldr	r1, [r6, #8]
    dede:	463a      	mov	r2, r7
    dee0:	1de0      	adds	r0, r4, #7
    dee2:	f7f2 fc56 	bl	792 <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
    dee6:	4621      	mov	r1, r4
    dee8:	4628      	mov	r0, r5
    deea:	f008 f953 	bl	16194 <ll_tx_mem_enqueue>
    deee:	2800      	cmp	r0, #0
    def0:	d0a4      	beq.n	de3c <hci_acl_handle+0x28>
		BT_ERR("Invalid Tx Enqueue");
    def2:	4b07      	ldr	r3, [pc, #28]	; (df10 <hci_acl_handle+0xfc>)
    def4:	9301      	str	r3, [sp, #4]
    def6:	9300      	str	r3, [sp, #0]
    def8:	4a06      	ldr	r2, [pc, #24]	; (df14 <hci_acl_handle+0x100>)
    defa:	4b07      	ldr	r3, [pc, #28]	; (df18 <hci_acl_handle+0x104>)
    defc:	4907      	ldr	r1, [pc, #28]	; (df1c <hci_acl_handle+0x108>)
    defe:	480c      	ldr	r0, [pc, #48]	; (df30 <hci_acl_handle+0x11c>)
    df00:	f7f4 f9ce 	bl	22a0 <printk>
		ll_tx_mem_release(node_tx);
    df04:	4620      	mov	r0, r4
    df06:	f008 f93f 	bl	16188 <ll_tx_mem_release>
    df0a:	e795      	b.n	de38 <hci_acl_handle+0x24>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    df0c:	2201      	movs	r2, #1
    df0e:	e7e1      	b.n	ded4 <hci_acl_handle+0xc0>
    df10:	00023dbe 	.word	0x00023dbe
    df14:	00022d86 	.word	0x00022d86
    df18:	0002567e 	.word	0x0002567e
    df1c:	000272e8 	.word	0x000272e8
    df20:	0002571c 	.word	0x0002571c
    df24:	0002573e 	.word	0x0002573e
    df28:	0002576c 	.word	0x0002576c
    df2c:	20009fb8 	.word	0x20009fb8
    df30:	0002578f 	.word	0x0002578f

0000df34 <hci_acl_encode>:
	u8_t *data;

	pdu_data = (void *)node_rx->pdu_data;
	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
    df34:	7a03      	ldrb	r3, [r0, #8]
    df36:	f003 0303 	and.w	r3, r3, #3
    df3a:	3b01      	subs	r3, #1
    df3c:	2b01      	cmp	r3, #1
{
    df3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    df40:	4604      	mov	r4, r0
	handle = node_rx->hdr.handle;
    df42:	88c5      	ldrh	r5, [r0, #6]
	switch (pdu_data->ll_id) {
    df44:	d81c      	bhi.n	df80 <hci_acl_encode+0x4c>
	case PDU_DATA_LLID_DATA_CONTINUE:
	case PDU_DATA_LLID_DATA_START:
		acl = (void *)net_buf_add(buf, sizeof(*acl));
    df46:	f101 0608 	add.w	r6, r1, #8
    df4a:	4630      	mov	r0, r6
    df4c:	2104      	movs	r1, #4
    df4e:	f00b fa2d 	bl	193ac <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    df52:	7a23      	ldrb	r3, [r4, #8]
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
		} else {
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
		}
		acl->handle = sys_cpu_to_le16(handle_flags);
		acl->len = sys_cpu_to_le16(pdu_data->len);
    df54:	7a61      	ldrb	r1, [r4, #9]
    df56:	8041      	strh	r1, [r0, #2]
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    df58:	f003 0303 	and.w	r3, r3, #3
    df5c:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
    df5e:	bf0c      	ite	eq
    df60:	f445 5500 	orreq.w	r5, r5, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
    df64:	f445 5580 	orrne.w	r5, r5, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
    df68:	8005      	strh	r5, [r0, #0]
		data = (void *)net_buf_add(buf, pdu_data->len);
    df6a:	4630      	mov	r0, r6
    df6c:	f00b fa1e 	bl	193ac <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
    df70:	7a62      	ldrb	r2, [r4, #9]
    df72:	f104 010b 	add.w	r1, r4, #11
	default:
		LL_ASSERT(0);
		break;
	}

}
    df76:	b002      	add	sp, #8
    df78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
    df7c:	f7f2 bc09 	b.w	792 <memcpy>
		LL_ASSERT(0);
    df80:	4b07      	ldr	r3, [pc, #28]	; (dfa0 <hci_acl_encode+0x6c>)
    df82:	9301      	str	r3, [sp, #4]
    df84:	9300      	str	r3, [sp, #0]
    df86:	4a07      	ldr	r2, [pc, #28]	; (dfa4 <hci_acl_encode+0x70>)
    df88:	4b07      	ldr	r3, [pc, #28]	; (dfa8 <hci_acl_encode+0x74>)
    df8a:	4908      	ldr	r1, [pc, #32]	; (dfac <hci_acl_encode+0x78>)
    df8c:	4808      	ldr	r0, [pc, #32]	; (dfb0 <hci_acl_encode+0x7c>)
    df8e:	f7f4 f987 	bl	22a0 <printk>
    df92:	4040      	eors	r0, r0
    df94:	f380 8811 	msr	BASEPRI, r0
    df98:	f04f 0004 	mov.w	r0, #4
    df9c:	df02      	svc	2
    df9e:	bf00      	nop
    dfa0:	00023dbe 	.word	0x00023dbe
    dfa4:	00022d86 	.word	0x00022d86
    dfa8:	0002570d 	.word	0x0002570d
    dfac:	000272e8 	.word	0x000272e8
    dfb0:	00023fb5 	.word	0x00023fb5

0000dfb4 <hci_evt_encode>:
#endif

void hci_evt_encode(struct radio_pdu_node_rx *node_rx, struct net_buf *buf)
{
    dfb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    dfb6:	4604      	mov	r4, r0
    dfb8:	b091      	sub	sp, #68	; 0x44
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    dfba:	7923      	ldrb	r3, [r4, #4]
	handle = node_rx->hdr.handle;
    dfbc:	88e6      	ldrh	r6, [r4, #6]
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    dfbe:	2b01      	cmp	r3, #1
{
    dfc0:	460d      	mov	r5, r1
	pdu_data = (void *)node_rx->pdu_data;
    dfc2:	f100 0008 	add.w	r0, r0, #8
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    dfc6:	f000 816c 	beq.w	e2a2 <hci_evt_encode+0x2ee>
	switch (node_rx->hdr.type) {
    dfca:	3b02      	subs	r3, #2
    dfcc:	2b0a      	cmp	r3, #10
    dfce:	f200 8159 	bhi.w	e284 <hci_evt_encode+0x2d0>
    dfd2:	e8df f013 	tbh	[pc, r3, lsl #1]
    dfd6:	000b      	.short	0x000b
    dfd8:	00170011 	.word	0x00170011
    dfdc:	00600019 	.word	0x00600019
    dfe0:	0097007a 	.word	0x0097007a
    dfe4:	00d400bc 	.word	0x00d400bc
    dfe8:	010400e9 	.word	0x010400e9
		le_advertising_report(pdu_data, b, buf);
    dfec:	460a      	mov	r2, r1
    dfee:	4621      	mov	r1, r4
    dff0:	f7fe fe2a 	bl	cc48 <le_advertising_report>
		encode_control(node_rx, pdu_data, buf);
	} else {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
    dff4:	b011      	add	sp, #68	; 0x44
    dff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	le_adv_ext_report(pdu_data, b, buf, BIT(0));
    dff8:	2301      	movs	r3, #1
	le_adv_ext_report(pdu_data, b, buf, BIT(2));
    dffa:	462a      	mov	r2, r5
    dffc:	4621      	mov	r1, r4
    dffe:	f7ff f8b1 	bl	d164 <le_adv_ext_report>
    e002:	e7f7      	b.n	dff4 <hci_evt_encode+0x40>
    e004:	2304      	movs	r3, #4
    e006:	e7f8      	b.n	dffa <hci_evt_encode+0x46>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e008:	4bb3      	ldr	r3, [pc, #716]	; (e2d8 <hci_evt_encode+0x324>)
    e00a:	e9d3 2300 	ldrd	r2, r3, [r3]
    e00e:	2200      	movs	r2, #0
    e010:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    e014:	4313      	orrs	r3, r2
    e016:	f104 060a 	add.w	r6, r4, #10
    e01a:	d007      	beq.n	e02c <hci_evt_encode+0x78>
	    !(le_event_mask & BT_EVT_MASK_LE_SCAN_REQ_RECEIVED)) {
    e01c:	4baf      	ldr	r3, [pc, #700]	; (e2dc <hci_evt_encode+0x328>)
    e01e:	e9d3 2300 	ldrd	r2, r3, [r3]
    e022:	2300      	movs	r3, #0
    e024:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e028:	4313      	orrs	r3, r2
    e02a:	d123      	bne.n	e074 <hci_evt_encode+0xc0>
		addr.type = adv->tx_addr;
    e02c:	7a23      	ldrb	r3, [r4, #8]
    e02e:	ad10      	add	r5, sp, #64	; 0x40
    e030:	f3c3 1380 	ubfx	r3, r3, #6, #1
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    e034:	2206      	movs	r2, #6
    e036:	4631      	mov	r1, r6
    e038:	f10d 001d 	add.w	r0, sp, #29
		addr.type = adv->tx_addr;
    e03c:	f805 3d24 	strb.w	r3, [r5, #-36]!
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    e040:	f7f2 fba7 	bl	792 <memcpy>
			  offsetof(struct pdu_adv, payload) + adv->len];
    e044:	7a63      	ldrb	r3, [r4, #9]
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    e046:	441c      	add	r4, r3
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    e048:	ae09      	add	r6, sp, #36	; 0x24
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    e04a:	7aa4      	ldrb	r4, [r4, #10]
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    e04c:	4631      	mov	r1, r6
    e04e:	4628      	mov	r0, r5
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    e050:	4264      	negs	r4, r4
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    e052:	f7ff f84b 	bl	d0ec <bt_addr_le_to_str.constprop.73>
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    e056:	b264      	sxtb	r4, r4
		BT_WARN("handle: %d, addr: %s, rssi: %d dB.",
    e058:	4ba1      	ldr	r3, [pc, #644]	; (e2e0 <hci_evt_encode+0x32c>)
    e05a:	9304      	str	r3, [sp, #16]
    e05c:	2200      	movs	r2, #0
    e05e:	9201      	str	r2, [sp, #4]
    e060:	9300      	str	r3, [sp, #0]
    e062:	9403      	str	r4, [sp, #12]
    e064:	9602      	str	r6, [sp, #8]
    e066:	4b9f      	ldr	r3, [pc, #636]	; (e2e4 <hci_evt_encode+0x330>)
    e068:	4a9f      	ldr	r2, [pc, #636]	; (e2e8 <hci_evt_encode+0x334>)
    e06a:	49a0      	ldr	r1, [pc, #640]	; (e2ec <hci_evt_encode+0x338>)
    e06c:	48a0      	ldr	r0, [pc, #640]	; (e2f0 <hci_evt_encode+0x33c>)
    e06e:	f7f4 f917 	bl	22a0 <printk>
    e072:	e7bf      	b.n	dff4 <hci_evt_encode+0x40>
	sep = meta_evt(buf, BT_HCI_EVT_LE_SCAN_REQ_RECEIVED, sizeof(*sep));
    e074:	2208      	movs	r2, #8
    e076:	2113      	movs	r1, #19
    e078:	4628      	mov	r0, r5
    e07a:	f7fe fdad 	bl	cbd8 <meta_evt>
	sep->handle = 0;
    e07e:	2300      	movs	r3, #0
    e080:	7003      	strb	r3, [r0, #0]
	sep->addr.type = adv->tx_addr;
    e082:	7a23      	ldrb	r3, [r4, #8]
    e084:	f3c3 1380 	ubfx	r3, r3, #6, #1
    e088:	7043      	strb	r3, [r0, #1]
	memcpy(&sep->addr.a.val[0], &adv->scan_req.scan_addr[0],
    e08a:	2206      	movs	r2, #6
    e08c:	4631      	mov	r1, r6
    e08e:	3002      	adds	r0, #2
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(u16_t));
    e090:	f7f2 fb7f 	bl	792 <memcpy>
    e094:	e7ae      	b.n	dff4 <hci_evt_encode+0x40>
			le_conn_complete(cc->status, cc, handle, buf);
    e096:	7ae7      	ldrb	r7, [r4, #11]
	if (!status) {
    e098:	b93f      	cbnz	r7, e0aa <hci_evt_encode+0xf6>
		ll_rl_crpa_set(radio_cc->peer_addr_type,
    e09a:	f104 0314 	add.w	r3, r4, #20
    e09e:	22ff      	movs	r2, #255	; 0xff
    e0a0:	f104 010e 	add.w	r1, r4, #14
    e0a4:	7b60      	ldrb	r0, [r4, #13]
    e0a6:	f00a f8b5 	bl	18214 <ll_rl_crpa_set>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e0aa:	4b8b      	ldr	r3, [pc, #556]	; (e2d8 <hci_evt_encode+0x324>)
    e0ac:	e9d3 2300 	ldrd	r2, r3, [r3]
    e0b0:	2200      	movs	r2, #0
    e0b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    e0b6:	4313      	orrs	r3, r2
    e0b8:	d09c      	beq.n	dff4 <hci_evt_encode+0x40>
    e0ba:	462b      	mov	r3, r5
    e0bc:	4632      	mov	r2, r6
    e0be:	f104 010b 	add.w	r1, r4, #11
    e0c2:	4638      	mov	r0, r7
    e0c4:	f7fe ff7c 	bl	cfc0 <le_conn_complete.part.44>
    e0c8:	e794      	b.n	dff4 <hci_evt_encode+0x40>
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    e0ca:	4b83      	ldr	r3, [pc, #524]	; (e2d8 <hci_evt_encode+0x324>)
    e0cc:	e9d3 2300 	ldrd	r2, r3, [r3]
    e0d0:	2300      	movs	r3, #0
    e0d2:	f002 0210 	and.w	r2, r2, #16
    e0d6:	4313      	orrs	r3, r2
    e0d8:	d08c      	beq.n	dff4 <hci_evt_encode+0x40>
	evt_create(buf, BT_HCI_EVT_DISCONN_COMPLETE, sizeof(*ep));
    e0da:	2204      	movs	r2, #4
    e0dc:	2105      	movs	r1, #5
    e0de:	4628      	mov	r0, r5
    e0e0:	f7fe fd55 	bl	cb8e <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    e0e4:	2104      	movs	r1, #4
    e0e6:	f105 0008 	add.w	r0, r5, #8
    e0ea:	f00b f95f 	bl	193ac <net_buf_simple_add>
	ep->status = 0x00;
    e0ee:	2300      	movs	r3, #0
	conn_count--;
    e0f0:	4a80      	ldr	r2, [pc, #512]	; (e2f4 <hci_evt_encode+0x340>)
	ep->status = 0x00;
    e0f2:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    e0f4:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((u8_t *)pdu_data);
    e0f8:	7a23      	ldrb	r3, [r4, #8]
    e0fa:	70c3      	strb	r3, [r0, #3]
	conn_count--;
    e0fc:	6813      	ldr	r3, [r2, #0]
    e0fe:	3b01      	subs	r3, #1
    e100:	6013      	str	r3, [r2, #0]
    e102:	e777      	b.n	dff4 <hci_evt_encode+0x40>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e104:	4b74      	ldr	r3, [pc, #464]	; (e2d8 <hci_evt_encode+0x324>)
    e106:	e9d3 2300 	ldrd	r2, r3, [r3]
    e10a:	2200      	movs	r2, #0
    e10c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    e110:	4313      	orrs	r3, r2
    e112:	f43f af6f 	beq.w	dff4 <hci_evt_encode+0x40>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
    e116:	4b71      	ldr	r3, [pc, #452]	; (e2dc <hci_evt_encode+0x328>)
    e118:	e9d3 2300 	ldrd	r2, r3, [r3]
    e11c:	2300      	movs	r3, #0
    e11e:	f002 0204 	and.w	r2, r2, #4
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e122:	4313      	orrs	r3, r2
    e124:	f43f af66 	beq.w	dff4 <hci_evt_encode+0x40>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
    e128:	2209      	movs	r2, #9
    e12a:	2103      	movs	r1, #3
    e12c:	4628      	mov	r0, r5
    e12e:	f7fe fd53 	bl	cbd8 <meta_evt>
	sep->status = radio_cu->status;
    e132:	7ae3      	ldrb	r3, [r4, #11]
    e134:	7003      	strb	r3, [r0, #0]
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
    e136:	89a3      	ldrh	r3, [r4, #12]
	sep->handle = sys_cpu_to_le16(handle);
    e138:	f8a0 6001 	strh.w	r6, [r0, #1]
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
    e13c:	f8a0 3003 	strh.w	r3, [r0, #3]
	sep->latency = sys_cpu_to_le16(radio_cu->latency);
    e140:	89e3      	ldrh	r3, [r4, #14]
    e142:	f8a0 3005 	strh.w	r3, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(radio_cu->timeout);
    e146:	8a23      	ldrh	r3, [r4, #16]
    e148:	f8a0 3007 	strh.w	r3, [r0, #7]
    e14c:	e752      	b.n	dff4 <hci_evt_encode+0x40>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
    e14e:	4b62      	ldr	r3, [pc, #392]	; (e2d8 <hci_evt_encode+0x324>)
    e150:	e9d3 2300 	ldrd	r2, r3, [r3]
    e154:	2200      	movs	r2, #0
    e156:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    e15a:	4313      	orrs	r3, r2
    e15c:	f43f af4a 	beq.w	dff4 <hci_evt_encode+0x40>
	evt_create(buf, BT_HCI_EVT_ENCRYPT_KEY_REFRESH_COMPLETE, sizeof(*ep));
    e160:	2203      	movs	r2, #3
    e162:	2130      	movs	r1, #48	; 0x30
    e164:	4628      	mov	r0, r5
    e166:	f7fe fd12 	bl	cb8e <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    e16a:	2103      	movs	r1, #3
    e16c:	f105 0008 	add.w	r0, r5, #8
    e170:	f00b f91c 	bl	193ac <net_buf_simple_add>
	ep->status = 0x00;
    e174:	2300      	movs	r3, #0
    e176:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    e178:	f8a0 6001 	strh.w	r6, [r0, #1]
    e17c:	e73a      	b.n	dff4 <hci_evt_encode+0x40>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
    e17e:	4b5e      	ldr	r3, [pc, #376]	; (e2f8 <hci_evt_encode+0x344>)
    e180:	e9d3 2300 	ldrd	r2, r3, [r3]
    e184:	2300      	movs	r3, #0
    e186:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
    e18a:	4313      	orrs	r3, r2
    e18c:	f43f af32 	beq.w	dff4 <hci_evt_encode+0x40>
	evt_create(buf, BT_HCI_EVT_AUTH_PAYLOAD_TIMEOUT_EXP, sizeof(*ep));
    e190:	2202      	movs	r2, #2
    e192:	2157      	movs	r1, #87	; 0x57
    e194:	4628      	mov	r0, r5
    e196:	f7fe fcfa 	bl	cb8e <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    e19a:	2102      	movs	r1, #2
    e19c:	f105 0008 	add.w	r0, r5, #8
    e1a0:	f00b f904 	bl	193ac <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
    e1a4:	8006      	strh	r6, [r0, #0]
    e1a6:	e725      	b.n	dff4 <hci_evt_encode+0x40>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e1a8:	4b4b      	ldr	r3, [pc, #300]	; (e2d8 <hci_evt_encode+0x324>)
    e1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
    e1ae:	2200      	movs	r2, #0
    e1b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    e1b4:	4313      	orrs	r3, r2
    e1b6:	f43f af1d 	beq.w	dff4 <hci_evt_encode+0x40>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
    e1ba:	4b48      	ldr	r3, [pc, #288]	; (e2dc <hci_evt_encode+0x328>)
    e1bc:	e9d3 2300 	ldrd	r2, r3, [r3]
    e1c0:	2300      	movs	r3, #0
    e1c2:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e1c6:	4313      	orrs	r3, r2
    e1c8:	f43f af14 	beq.w	dff4 <hci_evt_encode+0x40>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CHAN_SEL_ALGO, sizeof(*sep));
    e1cc:	2203      	movs	r2, #3
    e1ce:	2114      	movs	r1, #20
    e1d0:	4628      	mov	r0, r5
    e1d2:	f7fe fd01 	bl	cbd8 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    e1d6:	8006      	strh	r6, [r0, #0]
	sep->chan_sel_algo = radio_le_chan_sel_algo->chan_sel_algo;
    e1d8:	7ae3      	ldrb	r3, [r4, #11]
    e1da:	7083      	strb	r3, [r0, #2]
    e1dc:	e70a      	b.n	dff4 <hci_evt_encode+0x40>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e1de:	4b3e      	ldr	r3, [pc, #248]	; (e2d8 <hci_evt_encode+0x324>)
    e1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
    e1e4:	2200      	movs	r2, #0
    e1e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    e1ea:	4313      	orrs	r3, r2
    e1ec:	d007      	beq.n	e1fe <hci_evt_encode+0x24a>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
    e1ee:	4b3b      	ldr	r3, [pc, #236]	; (e2dc <hci_evt_encode+0x328>)
    e1f0:	e9d3 2300 	ldrd	r2, r3, [r3]
    e1f4:	2300      	movs	r3, #0
    e1f6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e1fa:	4313      	orrs	r3, r2
    e1fc:	d122      	bne.n	e244 <hci_evt_encode+0x290>
    e1fe:	7b22      	ldrb	r2, [r4, #12]
    e200:	7b61      	ldrb	r1, [r4, #13]
		BT_WARN("handle: 0x%04x, status: %x, tx: %x, rx: %x.", handle,
    e202:	483e      	ldr	r0, [pc, #248]	; (e2fc <hci_evt_encode+0x348>)
    e204:	2a00      	cmp	r2, #0
    e206:	fa92 f3a2 	rbit	r3, r2
    e20a:	fab3 f383 	clz	r3, r3
    e20e:	fa91 f2a1 	rbit	r2, r1
    e212:	bf08      	it	eq
    e214:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    e218:	2900      	cmp	r1, #0
    e21a:	fab2 f282 	clz	r2, r2
    e21e:	bf08      	it	eq
    e220:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
    e224:	492e      	ldr	r1, [pc, #184]	; (e2e0 <hci_evt_encode+0x32c>)
    e226:	9105      	str	r1, [sp, #20]
    e228:	3301      	adds	r3, #1
    e22a:	3201      	adds	r2, #1
    e22c:	9204      	str	r2, [sp, #16]
    e22e:	9303      	str	r3, [sp, #12]
    e230:	7ae3      	ldrb	r3, [r4, #11]
    e232:	9302      	str	r3, [sp, #8]
    e234:	e88d 0042 	stmia.w	sp, {r1, r6}
    e238:	4b31      	ldr	r3, [pc, #196]	; (e300 <hci_evt_encode+0x34c>)
    e23a:	4a2b      	ldr	r2, [pc, #172]	; (e2e8 <hci_evt_encode+0x334>)
    e23c:	492b      	ldr	r1, [pc, #172]	; (e2ec <hci_evt_encode+0x338>)
    e23e:	f7f4 f82f 	bl	22a0 <printk>
    e242:	e6d7      	b.n	dff4 <hci_evt_encode+0x40>
	sep = meta_evt(buf, BT_HCI_EVT_LE_PHY_UPDATE_COMPLETE, sizeof(*sep));
    e244:	2205      	movs	r2, #5
    e246:	210c      	movs	r1, #12
    e248:	4628      	mov	r0, r5
    e24a:	f7fe fcc5 	bl	cbd8 <meta_evt>
	sep->status = radio_le_phy_upd_cmplt->status;
    e24e:	7ae3      	ldrb	r3, [r4, #11]
    e250:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    e252:	f8a0 6001 	strh.w	r6, [r0, #1]
    e256:	7b22      	ldrb	r2, [r4, #12]
    e258:	2a00      	cmp	r2, #0
    e25a:	fa92 f3a2 	rbit	r3, r2
    e25e:	fab3 f383 	clz	r3, r3
    e262:	bf08      	it	eq
    e264:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    e268:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(radio_le_phy_upd_cmplt->tx);
    e26a:	70c3      	strb	r3, [r0, #3]
    e26c:	7b62      	ldrb	r2, [r4, #13]
    e26e:	fa92 f3a2 	rbit	r3, r2
    e272:	2a00      	cmp	r2, #0
    e274:	fab3 f383 	clz	r3, r3
    e278:	bf08      	it	eq
    e27a:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    e27e:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(radio_le_phy_upd_cmplt->rx);
    e280:	7103      	strb	r3, [r0, #4]
    e282:	e6b7      	b.n	dff4 <hci_evt_encode+0x40>
		LL_ASSERT(0);
    e284:	4b16      	ldr	r3, [pc, #88]	; (e2e0 <hci_evt_encode+0x32c>)
    e286:	9301      	str	r3, [sp, #4]
    e288:	9300      	str	r3, [sp, #0]
    e28a:	4b1e      	ldr	r3, [pc, #120]	; (e304 <hci_evt_encode+0x350>)
		LL_ASSERT(0);
    e28c:	4a1e      	ldr	r2, [pc, #120]	; (e308 <hci_evt_encode+0x354>)
    e28e:	4917      	ldr	r1, [pc, #92]	; (e2ec <hci_evt_encode+0x338>)
    e290:	481e      	ldr	r0, [pc, #120]	; (e30c <hci_evt_encode+0x358>)
    e292:	f7f4 f805 	bl	22a0 <printk>
    e296:	4040      	eors	r0, r0
    e298:	f380 8811 	msr	BASEPRI, r0
    e29c:	f04f 0004 	mov.w	r0, #4
    e2a0:	df02      	svc	2
	switch (pdu_data->llctrl.opcode) {
    e2a2:	7ae3      	ldrb	r3, [r4, #11]
    e2a4:	3b03      	subs	r3, #3
    e2a6:	2b12      	cmp	r3, #18
    e2a8:	f200 80e2 	bhi.w	e470 <hci_evt_encode+0x4bc>
    e2ac:	e8df f013 	tbh	[pc, r3, lsl #1]
    e2b0:	00e00030 	.word	0x00e00030
    e2b4:	005500e0 	.word	0x005500e0
    e2b8:	00e000cd 	.word	0x00e000cd
    e2bc:	00e0005b 	.word	0x00e0005b
    e2c0:	006200e0 	.word	0x006200e0
    e2c4:	00e00081 	.word	0x00e00081
    e2c8:	00e00085 	.word	0x00e00085
    e2cc:	00e000e0 	.word	0x00e000e0
    e2d0:	00ad00e0 	.word	0x00ad00e0
    e2d4:	00ad      	.short	0x00ad
    e2d6:	bf00      	nop
    e2d8:	20009fb8 	.word	0x20009fb8
    e2dc:	20009fc0 	.word	0x20009fc0
    e2e0:	00023dbe 	.word	0x00023dbe
    e2e4:	000256b5 	.word	0x000256b5
    e2e8:	00024016 	.word	0x00024016
    e2ec:	000272e8 	.word	0x000272e8
    e2f0:	0002585d 	.word	0x0002585d
    e2f4:	20000b58 	.word	0x20000b58
    e2f8:	20000be8 	.word	0x20000be8
    e2fc:	00025890 	.word	0x00025890
    e300:	000256ca 	.word	0x000256ca
    e304:	000256de 	.word	0x000256de
    e308:	00022d86 	.word	0x00022d86
    e30c:	00023fb5 	.word	0x00023fb5
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e310:	4b5a      	ldr	r3, [pc, #360]	; (e47c <hci_evt_encode+0x4c8>)
    e312:	e9d3 2300 	ldrd	r2, r3, [r3]
    e316:	2200      	movs	r2, #0
    e318:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    e31c:	4313      	orrs	r3, r2
    e31e:	f43f ae69 	beq.w	dff4 <hci_evt_encode+0x40>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
    e322:	4b57      	ldr	r3, [pc, #348]	; (e480 <hci_evt_encode+0x4cc>)
    e324:	e9d3 2300 	ldrd	r2, r3, [r3]
    e328:	2300      	movs	r3, #0
    e32a:	f002 0210 	and.w	r2, r2, #16
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e32e:	4313      	orrs	r3, r2
    e330:	f43f ae60 	beq.w	dff4 <hci_evt_encode+0x40>
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    e334:	220c      	movs	r2, #12
    e336:	2105      	movs	r1, #5
    e338:	4628      	mov	r0, r5
    e33a:	f7fe fc4d 	bl	cbd8 <meta_evt>
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    e33e:	2208      	movs	r2, #8
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    e340:	4605      	mov	r5, r0
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    e342:	f104 010c 	add.w	r1, r4, #12
	sep->handle = sys_cpu_to_le16(handle);
    e346:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    e34a:	f7f2 fa22 	bl	792 <memcpy>
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(u16_t));
    e34e:	2202      	movs	r2, #2
    e350:	f104 0114 	add.w	r1, r4, #20
    e354:	f105 000a 	add.w	r0, r5, #10
    e358:	e69a      	b.n	e090 <hci_evt_encode+0xdc>
		encrypt_change(0x00, handle, buf);
    e35a:	460a      	mov	r2, r1
    e35c:	2000      	movs	r0, #0
    e35e:	4631      	mov	r1, r6
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
    e360:	f7fe fda8 	bl	ceb4 <encrypt_change>
    e364:	e646      	b.n	dff4 <hci_evt_encode+0x40>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    e366:	460b      	mov	r3, r1
    e368:	4632      	mov	r2, r6
    e36a:	4601      	mov	r1, r0
    e36c:	2000      	movs	r0, #0
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    e36e:	f7fe fdc1 	bl	cef4 <le_remote_feat_complete>
    e372:	e63f      	b.n	dff4 <hci_evt_encode+0x40>
	if (!(event_mask & BT_EVT_MASK_REMOTE_VERSION_INFO)) {
    e374:	4b41      	ldr	r3, [pc, #260]	; (e47c <hci_evt_encode+0x4c8>)
    e376:	e9d3 2300 	ldrd	r2, r3, [r3]
    e37a:	2300      	movs	r3, #0
    e37c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
    e380:	4313      	orrs	r3, r2
    e382:	f43f ae37 	beq.w	dff4 <hci_evt_encode+0x40>
	evt_create(buf, BT_HCI_EVT_REMOTE_VERSION_INFO, sizeof(*ep));
    e386:	2208      	movs	r2, #8
    e388:	210c      	movs	r1, #12
    e38a:	4628      	mov	r0, r5
    e38c:	f7fe fbff 	bl	cb8e <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    e390:	2108      	movs	r1, #8
    e392:	1868      	adds	r0, r5, r1
    e394:	f00b f80a 	bl	193ac <net_buf_simple_add>
	ep->status = 0x00;
    e398:	2300      	movs	r3, #0
    e39a:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    e39c:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->version = ver_ind->version_number;
    e3a0:	7b23      	ldrb	r3, [r4, #12]
    e3a2:	70c3      	strb	r3, [r0, #3]
	ep->manufacturer = sys_cpu_to_le16(ver_ind->company_id);
    e3a4:	f8b4 300d 	ldrh.w	r3, [r4, #13]
    e3a8:	8083      	strh	r3, [r0, #4]
	ep->subversion = sys_cpu_to_le16(ver_ind->sub_version_number);
    e3aa:	f8b4 300f 	ldrh.w	r3, [r4, #15]
    e3ae:	80c3      	strh	r3, [r0, #6]
    e3b0:	e620      	b.n	dff4 <hci_evt_encode+0x40>
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
    e3b2:	460a      	mov	r2, r1
    e3b4:	7b20      	ldrb	r0, [r4, #12]
    e3b6:	4631      	mov	r1, r6
    e3b8:	e7d2      	b.n	e360 <hci_evt_encode+0x3ac>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e3ba:	4b30      	ldr	r3, [pc, #192]	; (e47c <hci_evt_encode+0x4c8>)
    e3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
    e3c0:	2200      	movs	r2, #0
    e3c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    e3c6:	4313      	orrs	r3, r2
    e3c8:	d007      	beq.n	e3da <hci_evt_encode+0x426>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
    e3ca:	4b2d      	ldr	r3, [pc, #180]	; (e480 <hci_evt_encode+0x4cc>)
    e3cc:	e9d3 2300 	ldrd	r2, r3, [r3]
    e3d0:	2300      	movs	r3, #0
    e3d2:	f002 0220 	and.w	r2, r2, #32
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e3d6:	4313      	orrs	r3, r2
    e3d8:	d108      	bne.n	e3ec <hci_evt_encode+0x438>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    e3da:	2300      	movs	r3, #0
    e3dc:	9301      	str	r3, [sp, #4]
    e3de:	9300      	str	r3, [sp, #0]
    e3e0:	221a      	movs	r2, #26
    e3e2:	2102      	movs	r1, #2
    e3e4:	4630      	mov	r0, r6
    e3e6:	f007 fbdd 	bl	15ba4 <ll_conn_update>
    e3ea:	e603      	b.n	dff4 <hci_evt_encode+0x40>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
    e3ec:	220a      	movs	r2, #10
    e3ee:	2106      	movs	r1, #6
    e3f0:	4628      	mov	r0, r5
    e3f2:	f7fe fbf1 	bl	cbd8 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    e3f6:	8006      	strh	r6, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
    e3f8:	89a3      	ldrh	r3, [r4, #12]
    e3fa:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
    e3fc:	89e3      	ldrh	r3, [r4, #14]
    e3fe:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
    e400:	8a23      	ldrh	r3, [r4, #16]
    e402:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
    e404:	8a63      	ldrh	r3, [r4, #18]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
    e406:	8103      	strh	r3, [r0, #8]
    e408:	e5f4      	b.n	dff4 <hci_evt_encode+0x40>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e40a:	4b1c      	ldr	r3, [pc, #112]	; (e47c <hci_evt_encode+0x4c8>)
    e40c:	e9d3 2300 	ldrd	r2, r3, [r3]
    e410:	2200      	movs	r2, #0
    e412:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    e416:	4313      	orrs	r3, r2
    e418:	f43f adec 	beq.w	dff4 <hci_evt_encode+0x40>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
    e41c:	4b18      	ldr	r3, [pc, #96]	; (e480 <hci_evt_encode+0x4cc>)
    e41e:	e9d3 2300 	ldrd	r2, r3, [r3]
    e422:	2300      	movs	r3, #0
    e424:	f002 0240 	and.w	r2, r2, #64	; 0x40
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e428:	4313      	orrs	r3, r2
    e42a:	f43f ade3 	beq.w	dff4 <hci_evt_encode+0x40>
	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));
    e42e:	220a      	movs	r2, #10
    e430:	2107      	movs	r1, #7
    e432:	4628      	mov	r0, r5
    e434:	f7fe fbd0 	bl	cbd8 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    e438:	8006      	strh	r6, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
    e43a:	8a23      	ldrh	r3, [r4, #16]
    e43c:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
    e43e:	8a63      	ldrh	r3, [r4, #18]
    e440:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
    e442:	89a3      	ldrh	r3, [r4, #12]
    e444:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
    e446:	89e3      	ldrh	r3, [r4, #14]
    e448:	e7dd      	b.n	e406 <hci_evt_encode+0x452>
    e44a:	7b22      	ldrb	r2, [r4, #12]
	switch (pdu_data->llctrl.unknown_rsp.type) {
    e44c:	2a0e      	cmp	r2, #14
    e44e:	d104      	bne.n	e45a <hci_evt_encode+0x4a6>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    e450:	460b      	mov	r3, r1
    e452:	4632      	mov	r2, r6
    e454:	2100      	movs	r1, #0
    e456:	201a      	movs	r0, #26
    e458:	e789      	b.n	e36e <hci_evt_encode+0x3ba>
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
    e45a:	4b0a      	ldr	r3, [pc, #40]	; (e484 <hci_evt_encode+0x4d0>)
    e45c:	9302      	str	r3, [sp, #8]
	switch (pdu_data->llctrl.unknown_rsp.type) {
    e45e:	9201      	str	r2, [sp, #4]
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
    e460:	9300      	str	r3, [sp, #0]
    e462:	4a09      	ldr	r2, [pc, #36]	; (e488 <hci_evt_encode+0x4d4>)
    e464:	4b09      	ldr	r3, [pc, #36]	; (e48c <hci_evt_encode+0x4d8>)
    e466:	490a      	ldr	r1, [pc, #40]	; (e490 <hci_evt_encode+0x4dc>)
    e468:	480a      	ldr	r0, [pc, #40]	; (e494 <hci_evt_encode+0x4e0>)
    e46a:	f7f3 ff19 	bl	22a0 <printk>
    e46e:	e5c1      	b.n	dff4 <hci_evt_encode+0x40>
		LL_ASSERT(0);
    e470:	4b04      	ldr	r3, [pc, #16]	; (e484 <hci_evt_encode+0x4d0>)
    e472:	9301      	str	r3, [sp, #4]
    e474:	9300      	str	r3, [sp, #0]
    e476:	4b08      	ldr	r3, [pc, #32]	; (e498 <hci_evt_encode+0x4e4>)
    e478:	e708      	b.n	e28c <hci_evt_encode+0x2d8>
    e47a:	bf00      	nop
    e47c:	20009fb8 	.word	0x20009fb8
    e480:	20009fc0 	.word	0x20009fc0
    e484:	00023dbe 	.word	0x00023dbe
    e488:	00024016 	.word	0x00024016
    e48c:	000256ed 	.word	0x000256ed
    e490:	000272e8 	.word	0x000272e8
    e494:	000258cc 	.word	0x000258cc
    e498:	000256fc 	.word	0x000256fc

0000e49c <hci_num_cmplt_encode>:

void hci_num_cmplt_encode(struct net_buf *buf, u16_t handle, u8_t num)
{
    e49c:	b570      	push	{r4, r5, r6, lr}
    e49e:	4606      	mov	r6, r0
    e4a0:	460d      	mov	r5, r1
    e4a2:	4614      	mov	r4, r2
	u8_t len;

	num_handles = 1;

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);
    e4a4:	2113      	movs	r1, #19
    e4a6:	2205      	movs	r2, #5
    e4a8:	f7fe fb71 	bl	cb8e <evt_create>

	ep = net_buf_add(buf, len);
    e4ac:	2105      	movs	r1, #5
    e4ae:	f106 0008 	add.w	r0, r6, #8
    e4b2:	f00a ff7b 	bl	193ac <net_buf_simple_add>
	ep->num_handles = num_handles;
    e4b6:	2301      	movs	r3, #1
    e4b8:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
    e4ba:	f8a0 5001 	strh.w	r5, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
    e4be:	f8a0 4003 	strh.w	r4, [r0, #3]
    e4c2:	bd70      	pop	{r4, r5, r6, pc}

0000e4c4 <hci_get_class>:
{
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    e4c4:	7903      	ldrb	r3, [r0, #4]
    e4c6:	2b01      	cmp	r3, #1
    e4c8:	d006      	beq.n	e4d8 <hci_get_class+0x14>
    e4ca:	3b02      	subs	r3, #2
    e4cc:	b2db      	uxtb	r3, r3
    e4ce:	2b0a      	cmp	r3, #10
    e4d0:	d80a      	bhi.n	e4e8 <hci_get_class+0x24>
    e4d2:	4a07      	ldr	r2, [pc, #28]	; (e4f0 <hci_get_class+0x2c>)
    e4d4:	56d0      	ldrsb	r0, [r2, r3]
    e4d6:	4770      	bx	lr
			return HCI_CLASS_EVT_CONNECTION;
		default:
			return -1;
		}

	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    e4d8:	7a03      	ldrb	r3, [r0, #8]
    e4da:	f003 0303 	and.w	r3, r3, #3
    e4de:	2b03      	cmp	r3, #3
		return HCI_CLASS_EVT_CONNECTION;
	} else {
		return HCI_CLASS_ACL_DATA;
    e4e0:	bf0c      	ite	eq
    e4e2:	2002      	moveq	r0, #2
    e4e4:	2003      	movne	r0, #3
    e4e6:	4770      	bx	lr
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    e4e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
}
    e4ec:	4770      	bx	lr
    e4ee:	bf00      	nop
    e4f0:	00025664 	.word	0x00025664

0000e4f4 <hci_init>:
	dup_count = -1;
    e4f4:	4b0a      	ldr	r3, [pc, #40]	; (e520 <hci_init+0x2c>)
    e4f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    e4fa:	601a      	str	r2, [r3, #0]
	event_mask = DEFAULT_EVENT_MASK;
    e4fc:	4b09      	ldr	r3, [pc, #36]	; (e524 <hci_init+0x30>)
    e4fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e502:	f641 71ff 	movw	r1, #8191	; 0x1fff
    e506:	e9c3 0100 	strd	r0, r1, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    e50a:	4b07      	ldr	r3, [pc, #28]	; (e528 <hci_init+0x34>)
    e50c:	2000      	movs	r0, #0
    e50e:	2100      	movs	r1, #0
    e510:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    e514:	4b05      	ldr	r3, [pc, #20]	; (e52c <hci_init+0x38>)
    e516:	201f      	movs	r0, #31
    e518:	2100      	movs	r1, #0
    e51a:	e9c3 0100 	strd	r0, r1, [r3]
    e51e:	4770      	bx	lr
    e520:	20000b5c 	.word	0x20000b5c
    e524:	20009fb8 	.word	0x20009fb8
    e528:	20000be8 	.word	0x20000be8
    e52c:	20009fc0 	.word	0x20009fc0

0000e530 <cpu_sleep>:
#ifndef _CPU_H_
#define _CPU_H_

static inline void cpu_sleep(void)
{
	__WFE();
    e530:	bf20      	wfe
	__SEV();
    e532:	bf40      	sev
	__WFE();
    e534:	bf20      	wfe
    e536:	4770      	bx	lr

0000e538 <pdu_len_cmp>:
	return nack;
}
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

static inline bool pdu_len_cmp(u8_t opcode, u8_t len)
{
    e538:	b5f0      	push	{r4, r5, r6, r7, lr}
	const u8_t ctrl_len_lut[] = {
    e53a:	4b0d      	ldr	r3, [pc, #52]	; (e570 <pdu_len_cmp+0x38>)
{
    e53c:	b089      	sub	sp, #36	; 0x24
    e53e:	4605      	mov	r5, r0
    e540:	460e      	mov	r6, r1
	const u8_t ctrl_len_lut[] = {
    e542:	aa01      	add	r2, sp, #4
    e544:	f103 0718 	add.w	r7, r3, #24
    e548:	6818      	ldr	r0, [r3, #0]
    e54a:	6859      	ldr	r1, [r3, #4]
    e54c:	4614      	mov	r4, r2
    e54e:	c403      	stmia	r4!, {r0, r1}
    e550:	3308      	adds	r3, #8
    e552:	42bb      	cmp	r3, r7
    e554:	4622      	mov	r2, r4
    e556:	d1f7      	bne.n	e548 <pdu_len_cmp+0x10>
    e558:	881b      	ldrh	r3, [r3, #0]
    e55a:	8023      	strh	r3, [r4, #0]
		 sizeof(struct pdu_data_llctrl_phy_upd_ind)),
		(offsetof(struct pdu_data_llctrl, min_used_chans_ind) +
		 sizeof(struct pdu_data_llctrl_min_used_chans_ind)),
	};

	return ctrl_len_lut[opcode] == len;
    e55c:	ab08      	add	r3, sp, #32
    e55e:	441d      	add	r5, r3
    e560:	f815 0c1c 	ldrb.w	r0, [r5, #-28]
}
    e564:	1b83      	subs	r3, r0, r6
    e566:	4258      	negs	r0, r3
    e568:	4158      	adcs	r0, r3
    e56a:	b009      	add	sp, #36	; 0x24
    e56c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e56e:	bf00      	nop
    e570:	00022995 	.word	0x00022995

0000e574 <ticker_if_done>:
}
#endif

static void ticker_if_done(u32_t status, void *ops_context)
{
	*((u32_t volatile *)ops_context) = status;
    e574:	6008      	str	r0, [r1, #0]
    e576:	4770      	bx	lr

0000e578 <prepare_reduced>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    e578:	b918      	cbnz	r0, e582 <prepare_reduced+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start |= XON_BITMASK;
    e57a:	680b      	ldr	r3, [r1, #0]
    e57c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    e580:	600b      	str	r3, [r1, #0]
    e582:	4770      	bx	lr

0000e584 <prepare_normal>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    e584:	b918      	cbnz	r0, e58e <prepare_normal+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start &= ~XON_BITMASK;
    e586:	680b      	ldr	r3, [r1, #0]
    e588:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    e58c:	600b      	str	r3, [r1, #0]
    e58e:	4770      	bx	lr

0000e590 <chan_sel_remap>:
	}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */
}

static u8_t chan_sel_remap(u8_t *chan_map, u8_t chan_index)
{
    e590:	b570      	push	{r4, r5, r6, lr}
    e592:	1d03      	adds	r3, r0, #4
    e594:	1e45      	subs	r5, r0, #1
	u8_t chan_next;
	u8_t byte_count;

	chan_next = 0;
    e596:	2400      	movs	r4, #0
	byte_count = 5;
	while (byte_count--) {
    e598:	429d      	cmp	r5, r3
    e59a:	d101      	bne.n	e5a0 <chan_sel_remap+0x10>
    e59c:	4620      	mov	r0, r4

		chan_map++;
	}

	return chan_next;
}
    e59e:	bd70      	pop	{r4, r5, r6, pc}
		bite = *chan_map;
    e5a0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
		while (bit_count--) {
    e5a4:	2200      	movs	r2, #0
    e5a6:	18a0      	adds	r0, r4, r2
    e5a8:	2a08      	cmp	r2, #8
    e5aa:	b2c0      	uxtb	r0, r0
    e5ac:	d101      	bne.n	e5b2 <chan_sel_remap+0x22>
    e5ae:	4604      	mov	r4, r0
    e5b0:	e7f2      	b.n	e598 <chan_sel_remap+0x8>
			if (bite & 0x01) {
    e5b2:	f016 0f01 	tst.w	r6, #1
    e5b6:	d003      	beq.n	e5c0 <chan_sel_remap+0x30>
				if (chan_index == 0) {
    e5b8:	2900      	cmp	r1, #0
    e5ba:	d0f0      	beq.n	e59e <chan_sel_remap+0xe>
				chan_index--;
    e5bc:	3901      	subs	r1, #1
    e5be:	b2c9      	uxtb	r1, r1
			bite >>= 1;
    e5c0:	0876      	lsrs	r6, r6, #1
    e5c2:	3201      	adds	r2, #1
    e5c4:	e7ef      	b.n	e5a6 <chan_sel_remap+0x16>
	...

0000e5c8 <packet_rx_acquired_count_get>:
	}
}

static inline u8_t packet_rx_acquired_count_get(void)
{
	if (_radio.packet_rx_acquire >=
    e5c8:	4b09      	ldr	r3, [pc, #36]	; (e5f0 <packet_rx_acquired_count_get+0x28>)
    e5ca:	f893 074a 	ldrb.w	r0, [r3, #1866]	; 0x74a
	    _radio.packet_rx_last) {
    e5ce:	f893 2749 	ldrb.w	r2, [r3, #1865]	; 0x749
	if (_radio.packet_rx_acquire >=
    e5d2:	4290      	cmp	r0, r2
		return (_radio.packet_rx_acquire -
			_radio.packet_rx_last);
	} else {
		return (_radio.packet_rx_count -
			_radio.packet_rx_last +
    e5d4:	bf3b      	ittet	cc
    e5d6:	f893 2749 	ldrbcc.w	r2, [r3, #1865]	; 0x749
    e5da:	f893 3748 	ldrbcc.w	r3, [r3, #1864]	; 0x748
			_radio.packet_rx_last);
    e5de:	f893 3749 	ldrbcs.w	r3, [r3, #1865]	; 0x749
			_radio.packet_rx_last +
    e5e2:	18c0      	addcc	r0, r0, r3
		return (_radio.packet_rx_acquire -
    e5e4:	bf2c      	ite	cs
    e5e6:	1ac0      	subcs	r0, r0, r3
			_radio.packet_rx_last +
    e5e8:	1a80      	subcc	r0, r0, r2
    e5ea:	b2c0      	uxtb	r0, r0
			_radio.packet_rx_acquire);
	}
}
    e5ec:	4770      	bx	lr
    e5ee:	bf00      	nop
    e5f0:	20000bf0 	.word	0x20000bf0

0000e5f4 <packet_rx_reserve_get>:

static inline struct radio_pdu_node_rx *packet_rx_reserve_get(u8_t count)
{
    e5f4:	b508      	push	{r3, lr}
    e5f6:	4601      	mov	r1, r0
	if (count > packet_rx_acquired_count_get()) {
    e5f8:	f7ff ffe6 	bl	e5c8 <packet_rx_acquired_count_get>
    e5fc:	4288      	cmp	r0, r1
		return 0;
	}

	return _radio.packet_rx[_radio.packet_rx_last];
    e5fe:	bf21      	itttt	cs
    e600:	4b04      	ldrcs	r3, [pc, #16]	; (e614 <packet_rx_reserve_get+0x20>)
    e602:	f893 2749 	ldrbcs.w	r2, [r3, #1865]	; 0x749
    e606:	f8d3 3744 	ldrcs.w	r3, [r3, #1860]	; 0x744
    e60a:	f853 0022 	ldrcs.w	r0, [r3, r2, lsl #2]
		return 0;
    e60e:	bf38      	it	cc
    e610:	2000      	movcc	r0, #0
}
    e612:	bd08      	pop	{r3, pc}
    e614:	20000bf0 	.word	0x20000bf0

0000e618 <conn_update_req>:
}

#if defined (CONFIG_BT_CTLR_XTAL_ADVANCED) && \
    defined(CONFIG_BT_CTLR_SCHED_ADVANCED)
static u32_t conn_update_req(struct connection *conn)
{
    e618:	b530      	push	{r4, r5, lr}
	if (conn->llcp_req != conn->llcp_ack) {
    e61a:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
    e61e:	f890 4075 	ldrb.w	r4, [r0, #117]	; 0x75
    e622:	429c      	cmp	r4, r3
    e624:	d15a      	bne.n	e6dc <conn_update_req+0xc4>
		return 1;
	}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
	if (conn->llcp_conn_param.req != conn->llcp_conn_param.ack) {
    e626:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
    e62a:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
    e62e:	428b      	cmp	r3, r1
    e630:	d154      	bne.n	e6dc <conn_update_req+0xc4>
		return 1;
	}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	if (!conn->role) {
    e632:	f990 301d 	ldrsb.w	r3, [r0, #29]
    e636:	2b00      	cmp	r3, #0
    e638:	db25      	blt.n	e686 <conn_update_req+0x6e>
		conn->llcp.conn_upd.win_size = 1;
		conn->llcp.conn_upd.win_offset_us = 0;
		conn->llcp.conn_upd.interval = conn->conn_interval;
		conn->llcp.conn_upd.latency = conn->latency;
    e63a:	8cc1      	ldrh	r1, [r0, #38]	; 0x26
		conn->llcp.conn_upd.interval = conn->conn_interval;
    e63c:	8c82      	ldrh	r2, [r0, #36]	; 0x24
		conn->llcp.conn_upd.latency = conn->latency;
    e63e:	f8a0 107c 	strh.w	r1, [r0, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->conn_interval *
					      conn->supervision_reload *
    e642:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
		conn->llcp.conn_upd.interval = conn->conn_interval;
    e644:	f8a0 207a 	strh.w	r2, [r0, #122]	; 0x7a
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    e648:	4351      	muls	r1, r2
					      conn->supervision_reload *
    e64a:	227d      	movs	r2, #125	; 0x7d
    e64c:	434a      	muls	r2, r1
					      125 / 1000;
    e64e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    e652:	fb92 f2f1 	sdiv	r2, r2, r1
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    e656:	f8a0 207e 	strh.w	r2, [r0, #126]	; 0x7e
		/* conn->llcp.conn_upd.instant     = 0; */
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    e65a:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
		conn->llcp.conn_upd.win_size = 1;
    e65e:	2501      	movs	r5, #1
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    e660:	f365 0201 	bfi	r2, r5, #0, #2
		conn->llcp.conn_upd.is_internal = 1;
    e664:	b2d2      	uxtb	r2, r2
		conn->llcp.conn_upd.win_offset_us = 0;
    e666:	2300      	movs	r3, #0
		conn->llcp.conn_upd.is_internal = 1;
    e668:	f042 0204 	orr.w	r2, r2, #4

		conn->llcp_type = LLCP_CONN_UPD;
		conn->llcp_ack--;
    e66c:	3c01      	subs	r4, #1
		conn->llcp.conn_upd.win_size = 1;
    e66e:	f880 5088 	strb.w	r5, [r0, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
    e672:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
		conn->llcp.conn_upd.is_internal = 1;
    e676:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
    e67a:	f880 5076 	strb.w	r5, [r0, #118]	; 0x76
		conn->llcp_ack--;
    e67e:	f880 4075 	strb.w	r4, [r0, #117]	; 0x75
						125 / 1000;
		conn->llcp_conn_param.state = LLCP_CPR_STATE_REQ;
		conn->llcp_conn_param.cmd = 0;
		conn->llcp_conn_param.ack--;

		return 0;
    e682:	4618      	mov	r0, r3
    e684:	bd30      	pop	{r4, r5, pc}
	} else if (!conn->llcp_conn_param.disabled &&
    e686:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    e68a:	06dc      	lsls	r4, r3, #27
    e68c:	d428      	bmi.n	e6e0 <conn_update_req+0xc8>
		   (!conn->common.fex_valid ||
    e68e:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
	} else if (!conn->llcp_conn_param.disabled &&
    e692:	069a      	lsls	r2, r3, #26
    e694:	d503      	bpl.n	e69e <conn_update_req+0x86>
		    (conn->llcp_features &
    e696:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
		   (!conn->common.fex_valid ||
    e69a:	079b      	lsls	r3, r3, #30
    e69c:	d520      	bpl.n	e6e0 <conn_update_req+0xc8>
		conn->llcp_conn_param.latency = conn->latency;
    e69e:	8cc4      	ldrh	r4, [r0, #38]	; 0x26
		conn->llcp_conn_param.interval = conn->conn_interval;
    e6a0:	8c82      	ldrh	r2, [r0, #36]	; 0x24
		conn->llcp_conn_param.latency = conn->latency;
    e6a2:	f8a0 40c6 	strh.w	r4, [r0, #198]	; 0xc6
						conn->supervision_reload *
    e6a6:	8fc4      	ldrh	r4, [r0, #62]	; 0x3e
		conn->llcp_conn_param.interval = conn->conn_interval;
    e6a8:	f8a0 20c4 	strh.w	r2, [r0, #196]	; 0xc4
		conn->llcp_conn_param.timeout = conn->conn_interval *
    e6ac:	4354      	muls	r4, r2
						conn->supervision_reload *
    e6ae:	227d      	movs	r2, #125	; 0x7d
    e6b0:	4362      	muls	r2, r4
						125 / 1000;
    e6b2:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    e6b6:	fb92 f2f4 	sdiv	r2, r2, r4
		conn->llcp_conn_param.timeout = conn->conn_interval *
    e6ba:	f8a0 20c8 	strh.w	r2, [r0, #200]	; 0xc8
		conn->llcp_conn_param.state = LLCP_CPR_STATE_REQ;
    e6be:	f890 20c2 	ldrb.w	r2, [r0, #194]	; 0xc2
		conn->llcp_conn_param.status = 0;
    e6c2:	2300      	movs	r3, #0
		conn->llcp_conn_param.cmd = 0;
    e6c4:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
    e6c8:	f363 02c3 	bfi	r2, r3, #3, #1
		conn->llcp_conn_param.ack--;
    e6cc:	3901      	subs	r1, #1
		conn->llcp_conn_param.status = 0;
    e6ce:	f880 30c3 	strb.w	r3, [r0, #195]	; 0xc3
		conn->llcp_conn_param.cmd = 0;
    e6d2:	f880 20c2 	strb.w	r2, [r0, #194]	; 0xc2
		conn->llcp_conn_param.ack--;
    e6d6:	f880 10c1 	strb.w	r1, [r0, #193]	; 0xc1
    e6da:	e7d2      	b.n	e682 <conn_update_req+0x6a>
		return 1;
    e6dc:	2001      	movs	r0, #1
    e6de:	bd30      	pop	{r4, r5, pc}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	}

	return 2;
    e6e0:	2002      	movs	r0, #2
}
    e6e2:	bd30      	pop	{r4, r5, pc}

0000e6e4 <packet_rx_allocate>:
{
    e6e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (max > _radio.link_rx_data_quota) {
    e6e8:	4d22      	ldr	r5, [pc, #136]	; (e774 <packet_rx_allocate+0x90>)
	acquire = _radio.packet_rx_acquire + 1;
    e6ea:	f895 474a 	ldrb.w	r4, [r5, #1866]	; 0x74a
    e6ee:	f895 975c 	ldrb.w	r9, [r5, #1884]	; 0x75c
	if (acquire == _radio.packet_rx_count) {
    e6f2:	f895 3748 	ldrb.w	r3, [r5, #1864]	; 0x748
	acquire = _radio.packet_rx_acquire + 1;
    e6f6:	3401      	adds	r4, #1
    e6f8:	4581      	cmp	r9, r0
    e6fa:	b2e4      	uxtb	r4, r4
    e6fc:	bf28      	it	cs
    e6fe:	4681      	movcs	r9, r0
		link = mem_acquire(&_radio.link_rx_free);
    e700:	f505 67ea 	add.w	r7, r5, #1872	; 0x750
		acquire = 0;
    e704:	42a3      	cmp	r3, r4
    e706:	bf08      	it	eq
    e708:	2400      	moveq	r4, #0
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    e70a:	f505 68e7 	add.w	r8, r5, #1848	; 0x738
	while ((max--) && (acquire != _radio.packet_rx_last)) {
    e70e:	f1b9 0f00 	cmp.w	r9, #0
    e712:	d003      	beq.n	e71c <packet_rx_allocate+0x38>
    e714:	f895 3749 	ldrb.w	r3, [r5, #1865]	; 0x749
    e718:	429c      	cmp	r4, r3
    e71a:	d101      	bne.n	e720 <packet_rx_allocate+0x3c>
    e71c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		link = mem_acquire(&_radio.link_rx_free);
    e720:	4638      	mov	r0, r7
    e722:	f7fd f860 	bl	b7e6 <mem_acquire>
		if (!link) {
    e726:	4606      	mov	r6, r0
    e728:	2800      	cmp	r0, #0
    e72a:	d0f7      	beq.n	e71c <packet_rx_allocate+0x38>
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    e72c:	4640      	mov	r0, r8
    e72e:	f7fd f85a 	bl	b7e6 <mem_acquire>
		if (!node_rx) {
    e732:	b928      	cbnz	r0, e740 <packet_rx_allocate+0x5c>
			mem_release(link, &_radio.link_rx_free);
    e734:	4630      	mov	r0, r6
    e736:	4910      	ldr	r1, [pc, #64]	; (e778 <packet_rx_allocate+0x94>)
}
    e738:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			mem_release(link, &_radio.link_rx_free);
    e73c:	f7fd b86d 	b.w	b81a <mem_release>
		node_rx->hdr.onion.link = link;
    e740:	6006      	str	r6, [r0, #0]
		_radio.packet_rx[_radio.packet_rx_acquire] = node_rx;
    e742:	f895 274a 	ldrb.w	r2, [r5, #1866]	; 0x74a
    e746:	f8d5 3744 	ldr.w	r3, [r5, #1860]	; 0x744
    e74a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
		_radio.packet_rx_acquire = acquire;
    e74e:	f885 474a 	strb.w	r4, [r5, #1866]	; 0x74a
		if (acquire == _radio.packet_rx_count) {
    e752:	f895 3748 	ldrb.w	r3, [r5, #1864]	; 0x748
		acquire = _radio.packet_rx_acquire + 1;
    e756:	3401      	adds	r4, #1
    e758:	b2e4      	uxtb	r4, r4
			acquire = 0;
    e75a:	42a3      	cmp	r3, r4
    e75c:	bf08      	it	eq
    e75e:	2400      	moveq	r4, #0
		_radio.link_rx_data_quota--;
    e760:	f895 375c 	ldrb.w	r3, [r5, #1884]	; 0x75c
    e764:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    e768:	3b01      	subs	r3, #1
    e76a:	f885 375c 	strb.w	r3, [r5, #1884]	; 0x75c
    e76e:	fa5f f989 	uxtb.w	r9, r9
    e772:	e7cc      	b.n	e70e <packet_rx_allocate+0x2a>
    e774:	20000bf0 	.word	0x20000bf0
    e778:	20001340 	.word	0x20001340

0000e77c <common_init>:
{
    e77c:	b513      	push	{r0, r1, r4, lr}
	if (_radio.connection_count) {
    e77e:	4c39      	ldr	r4, [pc, #228]	; (e864 <common_init+0xe8>)
    e780:	f894 2718 	ldrb.w	r2, [r4, #1816]	; 0x718
    e784:	2a00      	cmp	r2, #0
    e786:	d040      	beq.n	e80a <common_init+0x8e>
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
    e788:	f204 7314 	addw	r3, r4, #1812	; 0x714
    e78c:	f44f 71aa 	mov.w	r1, #340	; 0x154
    e790:	f8d4 0710 	ldr.w	r0, [r4, #1808]	; 0x710
    e794:	f7fd f800 	bl	b798 <mem_init>
	mem_init(_radio.pkt_rx_data_pool,
    e798:	4b33      	ldr	r3, [pc, #204]	; (e868 <common_init+0xec>)
    e79a:	f894 2742 	ldrb.w	r2, [r4, #1858]	; 0x742
    e79e:	f8b4 1740 	ldrh.w	r1, [r4, #1856]	; 0x740
    e7a2:	f8d4 0734 	ldr.w	r0, [r4, #1844]	; 0x734
    e7a6:	f7fc fff7 	bl	b798 <mem_init>
		 (_radio.packet_rx_count + _radio.connection_count),
    e7aa:	f894 1748 	ldrb.w	r1, [r4, #1864]	; 0x748
    e7ae:	f894 2718 	ldrb.w	r2, [r4, #1816]	; 0x718
	mem_init(_radio.link_rx_pool, (sizeof(memq_link_t)),
    e7b2:	4b2e      	ldr	r3, [pc, #184]	; (e86c <common_init+0xf0>)
    e7b4:	f8d4 074c 	ldr.w	r0, [r4, #1868]	; 0x74c
    e7b8:	440a      	add	r2, r1
    e7ba:	2108      	movs	r1, #8
    e7bc:	f7fc ffec 	bl	b798 <mem_init>
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
    e7c0:	4b2b      	ldr	r3, [pc, #172]	; (e870 <common_init+0xf4>)
    e7c2:	f8d4 0760 	ldr.w	r0, [r4, #1888]	; 0x760
    e7c6:	2202      	movs	r2, #2
    e7c8:	2124      	movs	r1, #36	; 0x24
    e7ca:	f7fc ffe5 	bl	b798 <mem_init>
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
    e7ce:	f894 277c 	ldrb.w	r2, [r4, #1916]	; 0x77c
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
    e7d2:	f8d4 0768 	ldr.w	r0, [r4, #1896]	; 0x768
    e7d6:	4b27      	ldr	r3, [pc, #156]	; (e874 <common_init+0xf8>)
    e7d8:	f8b4 1770 	ldrh.w	r1, [r4, #1904]	; 0x770
    e7dc:	3a01      	subs	r2, #1
    e7de:	b292      	uxth	r2, r2
    e7e0:	f7fc ffda 	bl	b798 <mem_init>
	link = mem_acquire(&_radio.link_rx_free);
    e7e4:	4821      	ldr	r0, [pc, #132]	; (e86c <common_init+0xf0>)
    e7e6:	f7fc fffe 	bl	b7e6 <mem_acquire>
	LL_ASSERT(link);
    e7ea:	b988      	cbnz	r0, e810 <common_init+0x94>
    e7ec:	4b22      	ldr	r3, [pc, #136]	; (e878 <common_init+0xfc>)
    e7ee:	9301      	str	r3, [sp, #4]
    e7f0:	9300      	str	r3, [sp, #0]
    e7f2:	4a22      	ldr	r2, [pc, #136]	; (e87c <common_init+0x100>)
    e7f4:	4b22      	ldr	r3, [pc, #136]	; (e880 <common_init+0x104>)
    e7f6:	4923      	ldr	r1, [pc, #140]	; (e884 <common_init+0x108>)
    e7f8:	4823      	ldr	r0, [pc, #140]	; (e888 <common_init+0x10c>)
    e7fa:	f7f3 fd51 	bl	22a0 <printk>
    e7fe:	4040      	eors	r0, r0
    e800:	f380 8811 	msr	BASEPRI, r0
    e804:	f04f 0004 	mov.w	r0, #4
    e808:	df02      	svc	2
		_radio.conn_free = NULL;
    e80a:	f8c4 2714 	str.w	r2, [r4, #1812]	; 0x714
    e80e:	e7c3      	b.n	e798 <common_init+0x1c>
	memq_init(link, &_radio.link_rx_head, (void *)&_radio.link_rx_tail);
    e810:	4a1e      	ldr	r2, [pc, #120]	; (e88c <common_init+0x110>)
    e812:	1f11      	subs	r1, r2, #4
    e814:	f7fd f83e 	bl	b894 <memq_init>
	_radio.advertiser.chan_map = 0x07;
    e818:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    e81c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
    e820:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	_radio.data_chan_map[4] = 0x1F;
    e824:	231f      	movs	r3, #31
    e826:	f884 3726 	strb.w	r3, [r4, #1830]	; 0x726
	_radio.data_chan_count = 37;
    e82a:	2325      	movs	r3, #37	; 0x25
    e82c:	f884 3727 	strb.w	r3, [r4, #1831]	; 0x727
	_radio.default_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
    e830:	231b      	movs	r3, #27
    e832:	f8a4 372a 	strh.w	r3, [r4, #1834]	; 0x72a
	_radio.default_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN,
    e836:	f44f 73a4 	mov.w	r3, #328	; 0x148
	_radio.data_chan_map[0] = 0xFF;
    e83a:	20ff      	movs	r0, #255	; 0xff
	_radio.default_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN,
    e83c:	f8a4 372c 	strh.w	r3, [r4, #1836]	; 0x72c
	_radio.default_phy_tx |= BIT(2);
    e840:	2307      	movs	r3, #7
	_radio.data_chan_map[0] = 0xFF;
    e842:	f884 0722 	strb.w	r0, [r4, #1826]	; 0x722
	_radio.data_chan_map[1] = 0xFF;
    e846:	f884 0723 	strb.w	r0, [r4, #1827]	; 0x723
	_radio.data_chan_map[2] = 0xFF;
    e84a:	f884 0724 	strb.w	r0, [r4, #1828]	; 0x724
	_radio.data_chan_map[3] = 0xFF;
    e84e:	f884 0725 	strb.w	r0, [r4, #1829]	; 0x725
	_radio.default_phy_tx |= BIT(2);
    e852:	f8a4 372e 	strh.w	r3, [r4, #1838]	; 0x72e
	_radio.default_phy_rx |= BIT(2);
    e856:	f8a4 3730 	strh.w	r3, [r4, #1840]	; 0x730
}
    e85a:	b002      	add	sp, #8
    e85c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	packet_rx_allocate(0xFF);
    e860:	f7ff bf40 	b.w	e6e4 <packet_rx_allocate>
    e864:	20000bf0 	.word	0x20000bf0
    e868:	20001328 	.word	0x20001328
    e86c:	20001340 	.word	0x20001340
    e870:	20001354 	.word	0x20001354
    e874:	2000135c 	.word	0x2000135c
    e878:	00023dbe 	.word	0x00023dbe
    e87c:	00022d86 	.word	0x00022d86
    e880:	000259e4 	.word	0x000259e4
    e884:	000272e8 	.word	0x000272e8
    e888:	00025f02 	.word	0x00025f02
    e88c:	20001348 	.word	0x20001348

0000e890 <tx_cmplt_get>:
	return 0;
}
#endif /* CONFIG_BT_CTLR_PHY */

static u8_t tx_cmplt_get(u16_t *handle, u8_t *first, u8_t last)
{
    e890:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t _first;
	u8_t cmplt;

	_first = *first;
    e894:	780c      	ldrb	r4, [r1, #0]
	if (_first == last) {
    e896:	4294      	cmp	r4, r2
{
    e898:	4681      	mov	r9, r0
    e89a:	460f      	mov	r7, r1
    e89c:	4690      	mov	r8, r2
	if (_first == last) {
    e89e:	d03d      	beq.n	e91c <tx_cmplt_get+0x8c>
		return 0;
	}

	cmplt = 0;
	*handle = _radio.pkt_release[_first].handle;
    e8a0:	4e1f      	ldr	r6, [pc, #124]	; (e920 <tx_cmplt_get+0x90>)
    e8a2:	f8d6 3778 	ldr.w	r3, [r6, #1912]	; 0x778
    e8a6:	f833 3034 	ldrh.w	r3, [r3, r4, lsl #3]
    e8aa:	8003      	strh	r3, [r0, #0]
	cmplt = 0;
    e8ac:	2500      	movs	r5, #0
			_radio.pkt_release[_first].node_tx = (void *)1;

			cmplt++;
		} else {
			/* ctrl packet, hence not num cmplt */
			_radio.pkt_release[_first].node_tx = (void *)2;
    e8ae:	f04f 0b02 	mov.w	fp, #2
		}

		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    e8b2:	f206 7a6c 	addw	sl, r6, #1900	; 0x76c
		if (*handle != _radio.pkt_release[_first].handle) {
    e8b6:	b222      	sxth	r2, r4
    e8b8:	f8d6 0778 	ldr.w	r0, [r6, #1912]	; 0x778
    e8bc:	f8b9 e000 	ldrh.w	lr, [r9]
    e8c0:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    e8c4:	f830 2032 	ldrh.w	r2, [r0, r2, lsl #3]
    e8c8:	4596      	cmp	lr, r2
    e8ca:	d120      	bne.n	e90e <tx_cmplt_get+0x7e>
		node_tx = _radio.pkt_release[_first].node_tx;
    e8cc:	6848      	ldr	r0, [r1, #4]
		if ((!node_tx) || (node_tx == (void *)1) ||
    e8ce:	2801      	cmp	r0, #1
    e8d0:	f020 0303 	bic.w	r3, r0, #3
    e8d4:	d90a      	bls.n	e8ec <tx_cmplt_get+0x5c>
    e8d6:	b1f3      	cbz	r3, e916 <tx_cmplt_get+0x86>
		    ((((u32_t)node_tx & ~(0x00000003)) != 0) &&
    e8d8:	1d02      	adds	r2, r0, #4
    e8da:	d01c      	beq.n	e916 <tx_cmplt_get+0x86>
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    e8dc:	7942      	ldrb	r2, [r0, #5]
    e8de:	b1d2      	cbz	r2, e916 <tx_cmplt_get+0x86>
		     ((pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_START) ||
    e8e0:	7902      	ldrb	r2, [r0, #4]
    e8e2:	f002 0203 	and.w	r2, r2, #3
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    e8e6:	3a01      	subs	r2, #1
    e8e8:	2a01      	cmp	r2, #1
    e8ea:	d814      	bhi.n	e916 <tx_cmplt_get+0x86>
			_radio.pkt_release[_first].node_tx = (void *)1;
    e8ec:	2201      	movs	r2, #1
			cmplt++;
    e8ee:	4415      	add	r5, r2
			_radio.pkt_release[_first].node_tx = (void *)1;
    e8f0:	604a      	str	r2, [r1, #4]
			cmplt++;
    e8f2:	b2ed      	uxtb	r5, r5
		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
    e8f4:	b113      	cbz	r3, e8fc <tx_cmplt_get+0x6c>
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    e8f6:	4651      	mov	r1, sl
    e8f8:	f7fc ff8f 	bl	b81a <mem_release>
		}

		_first = _first + 1;
    e8fc:	3401      	adds	r4, #1
		if (_first == _radio.packet_tx_count) {
    e8fe:	f896 277c 	ldrb.w	r2, [r6, #1916]	; 0x77c
		_first = _first + 1;
    e902:	b2e4      	uxtb	r4, r4
			_first = 0;
    e904:	42a2      	cmp	r2, r4
    e906:	bf08      	it	eq
    e908:	2400      	moveq	r4, #0
		}

	} while (_first != last);
    e90a:	4544      	cmp	r4, r8
    e90c:	d1d3      	bne.n	e8b6 <tx_cmplt_get+0x26>

	*first = _first;
    e90e:	703c      	strb	r4, [r7, #0]

	return cmplt;
}
    e910:	4628      	mov	r0, r5
    e912:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			_radio.pkt_release[_first].node_tx = (void *)2;
    e916:	f8c1 b004 	str.w	fp, [r1, #4]
    e91a:	e7eb      	b.n	e8f4 <tx_cmplt_get+0x64>
		return 0;
    e91c:	2500      	movs	r5, #0
    e91e:	e7f7      	b.n	e910 <tx_cmplt_get+0x80>
    e920:	20000bf0 	.word	0x20000bf0

0000e924 <connection_get>:
{
    e924:	b510      	push	{r4, lr}
	if (handle < _radio.connection_count) {
    e926:	4b09      	ldr	r3, [pc, #36]	; (e94c <connection_get+0x28>)
    e928:	f893 2718 	ldrb.w	r2, [r3, #1816]	; 0x718
    e92c:	4282      	cmp	r2, r0
{
    e92e:	4604      	mov	r4, r0
	if (handle < _radio.connection_count) {
    e930:	d90a      	bls.n	e948 <connection_get+0x24>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE, handle);
    e932:	4602      	mov	r2, r0
    e934:	f44f 71aa 	mov.w	r1, #340	; 0x154
    e938:	f8d3 0710 	ldr.w	r0, [r3, #1808]	; 0x710
    e93c:	f7fc ff88 	bl	b850 <mem_get>
		if ((conn) && (conn->handle == handle)) {
    e940:	b110      	cbz	r0, e948 <connection_get+0x24>
    e942:	8c03      	ldrh	r3, [r0, #32]
    e944:	42a3      	cmp	r3, r4
    e946:	d000      	beq.n	e94a <connection_get+0x26>
	return 0;
    e948:	2000      	movs	r0, #0
}
    e94a:	bd10      	pop	{r4, pc}
    e94c:	20000bf0 	.word	0x20000bf0

0000e950 <role_disable>:
{
    e950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e954:	b086      	sub	sp, #24
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    e956:	2302      	movs	r3, #2
	switch (ticker_id_primary) {
    e958:	2805      	cmp	r0, #5
{
    e95a:	4605      	mov	r5, r0
    e95c:	460f      	mov	r7, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    e95e:	9302      	str	r3, [sp, #8]
	switch (ticker_id_primary) {
    e960:	d00c      	beq.n	e97c <role_disable+0x2c>
    e962:	2806      	cmp	r0, #6
    e964:	d040      	beq.n	e9e8 <role_disable+0x98>
		if (ticker_id_primary >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    e966:	d945      	bls.n	e9f4 <role_disable+0xa4>
			conn_handle = ticker_id_primary -
    e968:	3807      	subs	r0, #7
			conn = connection_get(conn_handle);
    e96a:	b280      	uxth	r0, r0
    e96c:	f7ff ffda 	bl	e924 <connection_get>
			if (!conn) {
    e970:	2800      	cmp	r0, #0
    e972:	f000 8123 	beq.w	ebbc <role_disable+0x26c>
			ticks_active_to_start =
    e976:	e890 0140 	ldmia.w	r0, {r6, r8}
		break;
    e97a:	e00f      	b.n	e99c <role_disable+0x4c>
		ticks_xtal_to_start =
    e97c:	4b90      	ldr	r3, [pc, #576]	; (ebc0 <role_disable+0x270>)
    e97e:	699e      	ldr	r6, [r3, #24]
		ticks_active_to_start =
    e980:	f8d3 801c 	ldr.w	r8, [r3, #28]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    e984:	ab02      	add	r3, sp, #8
    e986:	9300      	str	r3, [sp, #0]
    e988:	460a      	mov	r2, r1
    e98a:	4b8e      	ldr	r3, [pc, #568]	; (ebc4 <role_disable+0x274>)
    e98c:	2103      	movs	r1, #3
    e98e:	2000      	movs	r0, #0
    e990:	f7fd fe50 	bl	c634 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    e994:	2802      	cmp	r0, #2
    e996:	d011      	beq.n	e9bc <role_disable+0x6c>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    e998:	9b02      	ldr	r3, [sp, #8]
    e99a:	b99b      	cbnz	r3, e9c4 <role_disable+0x74>
	LL_ASSERT(!_radio.ticker_id_stop);
    e99c:	4c88      	ldr	r4, [pc, #544]	; (ebc0 <role_disable+0x270>)
    e99e:	7ca3      	ldrb	r3, [r4, #18]
    e9a0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    e9a4:	2b00      	cmp	r3, #0
    e9a6:	d02d      	beq.n	ea04 <role_disable+0xb4>
    e9a8:	4b87      	ldr	r3, [pc, #540]	; (ebc8 <role_disable+0x278>)
    e9aa:	9301      	str	r3, [sp, #4]
    e9ac:	9300      	str	r3, [sp, #0]
    e9ae:	4a87      	ldr	r2, [pc, #540]	; (ebcc <role_disable+0x27c>)
    e9b0:	4b87      	ldr	r3, [pc, #540]	; (ebd0 <role_disable+0x280>)
    e9b2:	4988      	ldr	r1, [pc, #544]	; (ebd4 <role_disable+0x284>)
    e9b4:	4888      	ldr	r0, [pc, #544]	; (ebd8 <role_disable+0x288>)
    e9b6:	e00f      	b.n	e9d8 <role_disable+0x88>
				cpu_sleep();
    e9b8:	f7ff fdba 	bl	e530 <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
    e9bc:	9b02      	ldr	r3, [sp, #8]
    e9be:	2b02      	cmp	r3, #2
    e9c0:	d0fa      	beq.n	e9b8 <role_disable+0x68>
    e9c2:	e7e9      	b.n	e998 <role_disable+0x48>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    e9c4:	9b02      	ldr	r3, [sp, #8]
    e9c6:	2b01      	cmp	r3, #1
    e9c8:	d0e8      	beq.n	e99c <role_disable+0x4c>
    e9ca:	4b7f      	ldr	r3, [pc, #508]	; (ebc8 <role_disable+0x278>)
    e9cc:	9301      	str	r3, [sp, #4]
    e9ce:	9300      	str	r3, [sp, #0]
    e9d0:	4a7e      	ldr	r2, [pc, #504]	; (ebcc <role_disable+0x27c>)
    e9d2:	4b7f      	ldr	r3, [pc, #508]	; (ebd0 <role_disable+0x280>)
    e9d4:	497f      	ldr	r1, [pc, #508]	; (ebd4 <role_disable+0x284>)
    e9d6:	4881      	ldr	r0, [pc, #516]	; (ebdc <role_disable+0x28c>)
			LL_ASSERT(0);
    e9d8:	f7f3 fc62 	bl	22a0 <printk>
    e9dc:	4040      	eors	r0, r0
    e9de:	f380 8811 	msr	BASEPRI, r0
    e9e2:	f04f 0004 	mov.w	r0, #4
    e9e6:	df02      	svc	2
		ticks_xtal_to_start =
    e9e8:	4b75      	ldr	r3, [pc, #468]	; (ebc0 <role_disable+0x270>)
    e9ea:	f8d3 663c 	ldr.w	r6, [r3, #1596]	; 0x63c
		ticks_active_to_start =
    e9ee:	f8d3 8640 	ldr.w	r8, [r3, #1600]	; 0x640
		break;
    e9f2:	e7d3      	b.n	e99c <role_disable+0x4c>
			LL_ASSERT(0);
    e9f4:	4b74      	ldr	r3, [pc, #464]	; (ebc8 <role_disable+0x278>)
    e9f6:	9301      	str	r3, [sp, #4]
    e9f8:	9300      	str	r3, [sp, #0]
    e9fa:	4b75      	ldr	r3, [pc, #468]	; (ebd0 <role_disable+0x280>)
    e9fc:	4a73      	ldr	r2, [pc, #460]	; (ebcc <role_disable+0x27c>)
    e9fe:	4975      	ldr	r1, [pc, #468]	; (ebd4 <role_disable+0x284>)
    ea00:	4877      	ldr	r0, [pc, #476]	; (ebe0 <role_disable+0x290>)
    ea02:	e7e9      	b.n	e9d8 <role_disable+0x88>
	ret_cb = TICKER_STATUS_BUSY;
    ea04:	ab06      	add	r3, sp, #24
    ea06:	2202      	movs	r2, #2
	_radio.ticker_id_stop = ticker_id_primary;
    ea08:	74a5      	strb	r5, [r4, #18]
	ret_cb = TICKER_STATUS_BUSY;
    ea0a:	f843 2d10 	str.w	r2, [r3, #-16]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    ea0e:	2103      	movs	r1, #3
    ea10:	9300      	str	r3, [sp, #0]
    ea12:	462a      	mov	r2, r5
    ea14:	4b6b      	ldr	r3, [pc, #428]	; (ebc4 <role_disable+0x274>)
    ea16:	f7fd fe0d 	bl	c634 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    ea1a:	2802      	cmp	r0, #2
    ea1c:	d025      	beq.n	ea6a <role_disable+0x11a>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
    ea1e:	9b02      	ldr	r3, [sp, #8]
    ea20:	2b00      	cmp	r3, #0
    ea22:	d169      	bne.n	eaf8 <role_disable+0x1a8>
	if ((_radio.ticker_id_prepare == ticker_id_primary)
    ea24:	7c23      	ldrb	r3, [r4, #16]
    ea26:	429d      	cmp	r5, r3
    ea28:	d002      	beq.n	ea30 <role_disable+0xe0>
	    || (_radio.ticker_id_event == ticker_id_primary)) {
    ea2a:	7c63      	ldrb	r3, [r4, #17]
    ea2c:	429d      	cmp	r5, r3
    ea2e:	d15f      	bne.n	eaf0 <role_disable+0x1a0>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
    ea30:	ab06      	add	r3, sp, #24
    ea32:	2202      	movs	r2, #2
    ea34:	f843 2d0c 	str.w	r2, [r3, #-12]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    ea38:	2200      	movs	r2, #0
    ea3a:	9300      	str	r3, [sp, #0]
    ea3c:	2103      	movs	r1, #3
    ea3e:	4b61      	ldr	r3, [pc, #388]	; (ebc4 <role_disable+0x274>)
    ea40:	4610      	mov	r0, r2
    ea42:	f7fd fdf7 	bl	c634 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    ea46:	2802      	cmp	r0, #2
    ea48:	d11d      	bne.n	ea86 <role_disable+0x136>
		mayfly_enable(RADIO_TICKER_USER_ID_APP,
    ea4a:	2201      	movs	r2, #1
    ea4c:	4611      	mov	r1, r2
    ea4e:	2003      	movs	r0, #3
    ea50:	f7fc ff6c 	bl	b92c <mayfly_enable>
		LL_ASSERT(ret_cb_evt != TICKER_STATUS_BUSY);
    ea54:	9b03      	ldr	r3, [sp, #12]
    ea56:	2b02      	cmp	r3, #2
    ea58:	d115      	bne.n	ea86 <role_disable+0x136>
    ea5a:	4b5b      	ldr	r3, [pc, #364]	; (ebc8 <role_disable+0x278>)
    ea5c:	9301      	str	r3, [sp, #4]
    ea5e:	9300      	str	r3, [sp, #0]
    ea60:	4a5a      	ldr	r2, [pc, #360]	; (ebcc <role_disable+0x27c>)
    ea62:	4b60      	ldr	r3, [pc, #384]	; (ebe4 <role_disable+0x294>)
    ea64:	495b      	ldr	r1, [pc, #364]	; (ebd4 <role_disable+0x284>)
    ea66:	4860      	ldr	r0, [pc, #384]	; (ebe8 <role_disable+0x298>)
    ea68:	e7b6      	b.n	e9d8 <role_disable+0x88>
		if (_radio.ticker_id_event == ticker_id_primary) {
    ea6a:	7c63      	ldrb	r3, [r4, #17]
    ea6c:	429d      	cmp	r5, r3
    ea6e:	d104      	bne.n	ea7a <role_disable+0x12a>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    ea70:	2201      	movs	r2, #1
    ea72:	4611      	mov	r1, r2
    ea74:	2003      	movs	r0, #3
    ea76:	f7fc ff59 	bl	b92c <mayfly_enable>
		while (ret_cb == TICKER_STATUS_BUSY) {
    ea7a:	9b02      	ldr	r3, [sp, #8]
    ea7c:	2b02      	cmp	r3, #2
    ea7e:	d1ce      	bne.n	ea1e <role_disable+0xce>
			cpu_sleep();
    ea80:	f7ff fd56 	bl	e530 <cpu_sleep>
    ea84:	e7f9      	b.n	ea7a <role_disable+0x12a>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
    ea86:	9803      	ldr	r0, [sp, #12]
    ea88:	2800      	cmp	r0, #0
    ea8a:	d150      	bne.n	eb2e <role_disable+0x1de>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
    ea8c:	2302      	movs	r3, #2
    ea8e:	9304      	str	r3, [sp, #16]
		LL_ASSERT(_radio.ticker_id_prepare);
    ea90:	7c23      	ldrb	r3, [r4, #16]
    ea92:	b93b      	cbnz	r3, eaa4 <role_disable+0x154>
    ea94:	4b4c      	ldr	r3, [pc, #304]	; (ebc8 <role_disable+0x278>)
    ea96:	9301      	str	r3, [sp, #4]
    ea98:	9300      	str	r3, [sp, #0]
    ea9a:	4a4c      	ldr	r2, [pc, #304]	; (ebcc <role_disable+0x27c>)
    ea9c:	4b51      	ldr	r3, [pc, #324]	; (ebe4 <role_disable+0x294>)
    ea9e:	494d      	ldr	r1, [pc, #308]	; (ebd4 <role_disable+0x284>)
    eaa0:	4852      	ldr	r0, [pc, #328]	; (ebec <role_disable+0x29c>)
    eaa2:	e799      	b.n	e9d8 <role_disable+0x88>
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    eaa4:	ab04      	add	r3, sp, #16
    eaa6:	9300      	str	r3, [sp, #0]
    eaa8:	2201      	movs	r2, #1
    eaaa:	4b46      	ldr	r3, [pc, #280]	; (ebc4 <role_disable+0x274>)
		_radio.ticker_id_prepare = 0;
    eaac:	7420      	strb	r0, [r4, #16]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    eaae:	2103      	movs	r1, #3
    eab0:	f7fd fdc0 	bl	c634 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    eab4:	2802      	cmp	r0, #2
    eab6:	d10f      	bne.n	ead8 <role_disable+0x188>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    eab8:	2201      	movs	r2, #1
    eaba:	4611      	mov	r1, r2
    eabc:	2003      	movs	r0, #3
    eabe:	f7fc ff35 	bl	b92c <mayfly_enable>
			LL_ASSERT(ret_cb_m0 != TICKER_STATUS_BUSY);
    eac2:	9b04      	ldr	r3, [sp, #16]
    eac4:	2b02      	cmp	r3, #2
    eac6:	d107      	bne.n	ead8 <role_disable+0x188>
    eac8:	4b3f      	ldr	r3, [pc, #252]	; (ebc8 <role_disable+0x278>)
    eaca:	9301      	str	r3, [sp, #4]
    eacc:	9300      	str	r3, [sp, #0]
    eace:	4a3f      	ldr	r2, [pc, #252]	; (ebcc <role_disable+0x27c>)
    ead0:	4b44      	ldr	r3, [pc, #272]	; (ebe4 <role_disable+0x294>)
    ead2:	4940      	ldr	r1, [pc, #256]	; (ebd4 <role_disable+0x284>)
    ead4:	4846      	ldr	r0, [pc, #280]	; (ebf0 <role_disable+0x2a0>)
    ead6:	e77f      	b.n	e9d8 <role_disable+0x88>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
    ead8:	9a04      	ldr	r2, [sp, #16]
    eada:	b99a      	cbnz	r2, eb04 <role_disable+0x1b4>
			ticks_xtal_to_start &= ~XON_BITMASK;
    eadc:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
			if (ticks_active_to_start > ticks_xtal_to_start) {
    eae0:	45b0      	cmp	r8, r6
    eae2:	d922      	bls.n	eb2a <role_disable+0x1da>
				ret = mayfly_enqueue(
    eae4:	4b43      	ldr	r3, [pc, #268]	; (ebf4 <role_disable+0x2a4>)
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    eae6:	4611      	mov	r1, r2
    eae8:	2003      	movs	r0, #3
    eaea:	f7fc ff47 	bl	b97c <mayfly_enqueue>
			LL_ASSERT(!ret);
    eaee:	b9a0      	cbnz	r0, eb1a <role_disable+0x1ca>
	if (!_radio.ticker_id_stop) {
    eaf0:	7ca3      	ldrb	r3, [r4, #18]
    eaf2:	b90b      	cbnz	r3, eaf8 <role_disable+0x1a8>
		ret_cb = TICKER_STATUS_FAILURE;
    eaf4:	2301      	movs	r3, #1
    eaf6:	9302      	str	r3, [sp, #8]
	_radio.ticker_id_stop = 0;
    eaf8:	2300      	movs	r3, #0
    eafa:	74a3      	strb	r3, [r4, #18]
	return ret_cb;
    eafc:	9802      	ldr	r0, [sp, #8]
}
    eafe:	b006      	add	sp, #24
    eb00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
    eb04:	9b04      	ldr	r3, [sp, #16]
    eb06:	2b01      	cmp	r3, #1
    eb08:	d153      	bne.n	ebb2 <role_disable+0x262>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    eb0a:	2200      	movs	r2, #0
    eb0c:	4611      	mov	r1, r2
    eb0e:	4b39      	ldr	r3, [pc, #228]	; (ebf4 <role_disable+0x2a4>)
    eb10:	2003      	movs	r0, #3
    eb12:	f7fc ff33 	bl	b97c <mayfly_enqueue>
			LL_ASSERT(!ret);
    eb16:	4602      	mov	r2, r0
    eb18:	b138      	cbz	r0, eb2a <role_disable+0x1da>
			LL_ASSERT(!ret);
    eb1a:	4b2b      	ldr	r3, [pc, #172]	; (ebc8 <role_disable+0x278>)
    eb1c:	9301      	str	r3, [sp, #4]
    eb1e:	9300      	str	r3, [sp, #0]
    eb20:	4a2a      	ldr	r2, [pc, #168]	; (ebcc <role_disable+0x27c>)
    eb22:	4b30      	ldr	r3, [pc, #192]	; (ebe4 <role_disable+0x294>)
    eb24:	492b      	ldr	r1, [pc, #172]	; (ebd4 <role_disable+0x284>)
    eb26:	4834      	ldr	r0, [pc, #208]	; (ebf8 <role_disable+0x2a8>)
    eb28:	e756      	b.n	e9d8 <role_disable+0x88>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    eb2a:	4b34      	ldr	r3, [pc, #208]	; (ebfc <role_disable+0x2ac>)
    eb2c:	e7db      	b.n	eae6 <role_disable+0x196>
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
    eb2e:	9d03      	ldr	r5, [sp, #12]
    eb30:	2d01      	cmp	r5, #1
    eb32:	d13e      	bne.n	ebb2 <role_disable+0x262>
		if (ticker_id_stop != TICKER_NULL) {
    eb34:	2fff      	cmp	r7, #255	; 0xff
    eb36:	d029      	beq.n	eb8c <role_disable+0x23c>
			u32_t volatile ret_cb_stop = TICKER_STATUS_BUSY;
    eb38:	ab06      	add	r3, sp, #24
    eb3a:	2202      	movs	r2, #2
    eb3c:	f843 2d04 	str.w	r2, [r3, #-4]!
			ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    eb40:	2103      	movs	r1, #3
    eb42:	9300      	str	r3, [sp, #0]
    eb44:	463a      	mov	r2, r7
    eb46:	4b1f      	ldr	r3, [pc, #124]	; (ebc4 <role_disable+0x274>)
    eb48:	2000      	movs	r0, #0
    eb4a:	f7fd fd73 	bl	c634 <ticker_stop>
			if (ret == TICKER_STATUS_BUSY) {
    eb4e:	2802      	cmp	r0, #2
    eb50:	d10f      	bne.n	eb72 <role_disable+0x222>
				mayfly_enable(RADIO_TICKER_USER_ID_APP,
    eb52:	462a      	mov	r2, r5
    eb54:	4629      	mov	r1, r5
    eb56:	2003      	movs	r0, #3
    eb58:	f7fc fee8 	bl	b92c <mayfly_enable>
				LL_ASSERT(ret_cb_stop != TICKER_STATUS_BUSY);
    eb5c:	9b05      	ldr	r3, [sp, #20]
    eb5e:	2b02      	cmp	r3, #2
    eb60:	d107      	bne.n	eb72 <role_disable+0x222>
    eb62:	4b19      	ldr	r3, [pc, #100]	; (ebc8 <role_disable+0x278>)
    eb64:	9301      	str	r3, [sp, #4]
    eb66:	9300      	str	r3, [sp, #0]
    eb68:	4a18      	ldr	r2, [pc, #96]	; (ebcc <role_disable+0x27c>)
    eb6a:	4b1e      	ldr	r3, [pc, #120]	; (ebe4 <role_disable+0x294>)
    eb6c:	4919      	ldr	r1, [pc, #100]	; (ebd4 <role_disable+0x284>)
    eb6e:	4824      	ldr	r0, [pc, #144]	; (ec00 <role_disable+0x2b0>)
    eb70:	e732      	b.n	e9d8 <role_disable+0x88>
			LL_ASSERT((ret_cb_stop == TICKER_STATUS_SUCCESS) ||
    eb72:	9b05      	ldr	r3, [sp, #20]
    eb74:	b153      	cbz	r3, eb8c <role_disable+0x23c>
    eb76:	9b05      	ldr	r3, [sp, #20]
    eb78:	2b01      	cmp	r3, #1
    eb7a:	d007      	beq.n	eb8c <role_disable+0x23c>
    eb7c:	4b12      	ldr	r3, [pc, #72]	; (ebc8 <role_disable+0x278>)
    eb7e:	9301      	str	r3, [sp, #4]
    eb80:	9300      	str	r3, [sp, #0]
    eb82:	4a12      	ldr	r2, [pc, #72]	; (ebcc <role_disable+0x27c>)
    eb84:	4b17      	ldr	r3, [pc, #92]	; (ebe4 <role_disable+0x294>)
    eb86:	4913      	ldr	r1, [pc, #76]	; (ebd4 <role_disable+0x284>)
    eb88:	481e      	ldr	r0, [pc, #120]	; (ec04 <role_disable+0x2b4>)
    eb8a:	e725      	b.n	e9d8 <role_disable+0x88>
		if (_radio.role != ROLE_NONE) {
    eb8c:	7ce3      	ldrb	r3, [r4, #19]
    eb8e:	2b00      	cmp	r3, #0
    eb90:	d0ae      	beq.n	eaf0 <role_disable+0x1a0>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    eb92:	4b1d      	ldr	r3, [pc, #116]	; (ec08 <role_disable+0x2b8>)
    eb94:	2204      	movs	r2, #4
    eb96:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    eb98:	2200      	movs	r2, #0
    eb9a:	4611      	mov	r1, r2
    eb9c:	2003      	movs	r0, #3
    eb9e:	f7fc feed 	bl	b97c <mayfly_enqueue>
			LL_ASSERT(!ret);
    eba2:	2800      	cmp	r0, #0
    eba4:	d1b9      	bne.n	eb1a <role_disable+0x1ca>
			while (_radio.role != ROLE_NONE) {
    eba6:	7ce3      	ldrb	r3, [r4, #19]
    eba8:	2b00      	cmp	r3, #0
    ebaa:	d0a1      	beq.n	eaf0 <role_disable+0x1a0>
				cpu_sleep();
    ebac:	f7ff fcc0 	bl	e530 <cpu_sleep>
    ebb0:	e7f9      	b.n	eba6 <role_disable+0x256>
		LL_ASSERT(0);
    ebb2:	4b05      	ldr	r3, [pc, #20]	; (ebc8 <role_disable+0x278>)
    ebb4:	9301      	str	r3, [sp, #4]
    ebb6:	9300      	str	r3, [sp, #0]
    ebb8:	4b0a      	ldr	r3, [pc, #40]	; (ebe4 <role_disable+0x294>)
    ebba:	e71f      	b.n	e9fc <role_disable+0xac>
				return 1;
    ebbc:	2001      	movs	r0, #1
    ebbe:	e79e      	b.n	eafe <role_disable+0x1ae>
    ebc0:	20000bf0 	.word	0x20000bf0
    ebc4:	0000e575 	.word	0x0000e575
    ebc8:	00023dbe 	.word	0x00023dbe
    ebcc:	00022d86 	.word	0x00022d86
    ebd0:	00025e94 	.word	0x00025e94
    ebd4:	000272e8 	.word	0x000272e8
    ebd8:	00026869 	.word	0x00026869
    ebdc:	00026829 	.word	0x00026829
    ebe0:	00023fb5 	.word	0x00023fb5
    ebe4:	00025e80 	.word	0x00025e80
    ebe8:	000268a1 	.word	0x000268a1
    ebec:	000268d2 	.word	0x000268d2
    ebf0:	0002690c 	.word	0x0002690c
    ebf4:	2000a008 	.word	0x2000a008
    ebf8:	0002693c 	.word	0x0002693c
    ebfc:	2000a0c8 	.word	0x2000a0c8
    ec00:	00026962 	.word	0x00026962
    ec04:	00026994 	.word	0x00026994
    ec08:	2000a038 	.word	0x2000a038

0000ec0c <mayfly_xtal_retain>:
{
    ec0c:	b513      	push	{r0, r1, r4, lr}
    ec0e:	4b1d      	ldr	r3, [pc, #116]	; (ec84 <mayfly_xtal_retain+0x78>)
    ec10:	4604      	mov	r4, r0
		if (!s_xtal_retained) {
    ec12:	781a      	ldrb	r2, [r3, #0]
	if (retain) {
    ec14:	b301      	cbz	r1, ec58 <mayfly_xtal_retain+0x4c>
		if (!s_xtal_retained) {
    ec16:	2a00      	cmp	r2, #0
    ec18:	d132      	bne.n	ec80 <mayfly_xtal_retain+0x74>
			LL_ASSERT(caller_id == RADIO_TICKER_USER_ID_JOB);
    ec1a:	2801      	cmp	r0, #1
    ec1c:	d00e      	beq.n	ec3c <mayfly_xtal_retain+0x30>
    ec1e:	4b1a      	ldr	r3, [pc, #104]	; (ec88 <mayfly_xtal_retain+0x7c>)
    ec20:	9301      	str	r3, [sp, #4]
    ec22:	9300      	str	r3, [sp, #0]
    ec24:	4a19      	ldr	r2, [pc, #100]	; (ec8c <mayfly_xtal_retain+0x80>)
    ec26:	4b1a      	ldr	r3, [pc, #104]	; (ec90 <mayfly_xtal_retain+0x84>)
    ec28:	491a      	ldr	r1, [pc, #104]	; (ec94 <mayfly_xtal_retain+0x88>)
    ec2a:	481b      	ldr	r0, [pc, #108]	; (ec98 <mayfly_xtal_retain+0x8c>)
			LL_ASSERT(!retval);
    ec2c:	f7f3 fb38 	bl	22a0 <printk>
    ec30:	4040      	eors	r0, r0
    ec32:	f380 8811 	msr	BASEPRI, r0
    ec36:	f04f 0004 	mov.w	r0, #4
    ec3a:	df02      	svc	2
			s_xtal_retained = 1;
    ec3c:	7018      	strb	r0, [r3, #0]
			retval = mayfly_enqueue(caller_id,
    ec3e:	4b17      	ldr	r3, [pc, #92]	; (ec9c <mayfly_xtal_retain+0x90>)
    ec40:	4611      	mov	r1, r2
    ec42:	f7fc fe9b 	bl	b97c <mayfly_enqueue>
			LL_ASSERT(!retval);
    ec46:	b1d8      	cbz	r0, ec80 <mayfly_xtal_retain+0x74>
    ec48:	4b0f      	ldr	r3, [pc, #60]	; (ec88 <mayfly_xtal_retain+0x7c>)
    ec4a:	9301      	str	r3, [sp, #4]
    ec4c:	9300      	str	r3, [sp, #0]
    ec4e:	4a0f      	ldr	r2, [pc, #60]	; (ec8c <mayfly_xtal_retain+0x80>)
    ec50:	4b0f      	ldr	r3, [pc, #60]	; (ec90 <mayfly_xtal_retain+0x84>)
    ec52:	4910      	ldr	r1, [pc, #64]	; (ec94 <mayfly_xtal_retain+0x88>)
    ec54:	4812      	ldr	r0, [pc, #72]	; (eca0 <mayfly_xtal_retain+0x94>)
    ec56:	e7e9      	b.n	ec2c <mayfly_xtal_retain+0x20>
		if (s_xtal_retained) {
    ec58:	b192      	cbz	r2, ec80 <mayfly_xtal_retain+0x74>
			s_xtal_retained = 0;
    ec5a:	7019      	strb	r1, [r3, #0]
			switch (caller_id) {
    ec5c:	b170      	cbz	r0, ec7c <mayfly_xtal_retain+0x70>
    ec5e:	2801      	cmp	r0, #1
    ec60:	d104      	bne.n	ec6c <mayfly_xtal_retain+0x60>
				p_mfy_xtal_stop = &s_mfy_xtal_stop[1];
    ec62:	4b10      	ldr	r3, [pc, #64]	; (eca4 <mayfly_xtal_retain+0x98>)
			retval = mayfly_enqueue(caller_id,
    ec64:	2200      	movs	r2, #0
    ec66:	4611      	mov	r1, r2
    ec68:	4620      	mov	r0, r4
    ec6a:	e7ea      	b.n	ec42 <mayfly_xtal_retain+0x36>
				LL_ASSERT(0);
    ec6c:	4b06      	ldr	r3, [pc, #24]	; (ec88 <mayfly_xtal_retain+0x7c>)
    ec6e:	9301      	str	r3, [sp, #4]
    ec70:	9300      	str	r3, [sp, #0]
    ec72:	4a06      	ldr	r2, [pc, #24]	; (ec8c <mayfly_xtal_retain+0x80>)
    ec74:	4b06      	ldr	r3, [pc, #24]	; (ec90 <mayfly_xtal_retain+0x84>)
    ec76:	4907      	ldr	r1, [pc, #28]	; (ec94 <mayfly_xtal_retain+0x88>)
    ec78:	480b      	ldr	r0, [pc, #44]	; (eca8 <mayfly_xtal_retain+0x9c>)
    ec7a:	e7d7      	b.n	ec2c <mayfly_xtal_retain+0x20>
				p_mfy_xtal_stop = &s_mfy_xtal_stop[0];
    ec7c:	4b0b      	ldr	r3, [pc, #44]	; (ecac <mayfly_xtal_retain+0xa0>)
    ec7e:	e7f1      	b.n	ec64 <mayfly_xtal_retain+0x58>
}
    ec80:	b002      	add	sp, #8
    ec82:	bd10      	pop	{r4, pc}
    ec84:	20001434 	.word	0x20001434
    ec88:	00023dbe 	.word	0x00023dbe
    ec8c:	00022d86 	.word	0x00022d86
    ec90:	00025b9d 	.word	0x00025b9d
    ec94:	000272e8 	.word	0x000272e8
    ec98:	00026682 	.word	0x00026682
    ec9c:	2000a088 	.word	0x2000a088
    eca0:	000266b2 	.word	0x000266b2
    eca4:	2000a0a8 	.word	0x2000a0a8
    eca8:	00023fb5 	.word	0x00023fb5
    ecac:	2000a098 	.word	0x2000a098

0000ecb0 <rx_packet_set>:
{
    ecb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	phy = conn->phy_rx;
    ecb2:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
	max_rx_octets = conn->max_rx_octets;
    ecb6:	8e05      	ldrh	r5, [r0, #48]	; 0x30
{
    ecb8:	4606      	mov	r6, r0
	phy = conn->phy_rx;
    ecba:	f004 0407 	and.w	r4, r4, #7
{
    ecbe:	460f      	mov	r7, r1
	radio_phy_set(phy, 0);
    ecc0:	4620      	mov	r0, r4
    ecc2:	2100      	movs	r1, #0
    ecc4:	f009 fd9a 	bl	187fc <radio_phy_set>
	if (conn->enc_rx) {
    ecc8:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
    eccc:	f013 0f10 	tst.w	r3, #16
    ecd0:	ea4f 0244 	mov.w	r2, r4, lsl #1
    ecd4:	d010      	beq.n	ecf8 <rx_packet_set+0x48>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
    ecd6:	1d29      	adds	r1, r5, #4
    ecd8:	f042 0201 	orr.w	r2, r2, #1
    ecdc:	b2c9      	uxtb	r1, r1
    ecde:	2008      	movs	r0, #8
    ece0:	f009 fdf0 	bl	188c4 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&conn->ccm_rx, phy,
    ece4:	463a      	mov	r2, r7
    ece6:	4621      	mov	r1, r4
    ece8:	f106 00f9 	add.w	r0, r6, #249	; 0xf9
    ecec:	f00a f830 	bl	18d50 <radio_ccm_rx_pkt_set>
}
    ecf0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(pdu_data_rx);
    ecf4:	f009 be18 	b.w	18928 <radio_pkt_rx_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
    ecf8:	2008      	movs	r0, #8
    ecfa:	f042 0201 	orr.w	r2, r2, #1
    ecfe:	b2e9      	uxtb	r1, r5
    ed00:	f009 fde0 	bl	188c4 <radio_pkt_configure>
		radio_pkt_rx_set(pdu_data_rx);
    ed04:	4638      	mov	r0, r7
    ed06:	e7f3      	b.n	ecf0 <rx_packet_set+0x40>

0000ed08 <tx_packet_set>:
{
    ed08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ed0a:	460f      	mov	r7, r1
	phy = conn->phy_tx;
    ed0c:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
	max_tx_octets = conn->max_tx_octets;
    ed10:	8dc5      	ldrh	r5, [r0, #46]	; 0x2e
	phy = conn->phy_tx;
    ed12:	f3c1 04c2 	ubfx	r4, r1, #3, #3
{
    ed16:	4606      	mov	r6, r0
	radio_phy_set(phy, flags);
    ed18:	09c9      	lsrs	r1, r1, #7
    ed1a:	4620      	mov	r0, r4
    ed1c:	f009 fd6e 	bl	187fc <radio_phy_set>
	if (conn->enc_tx) {
    ed20:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
    ed24:	f013 0f20 	tst.w	r3, #32
    ed28:	ea4f 0244 	mov.w	r2, r4, lsl #1
    ed2c:	d00f      	beq.n	ed4e <tx_packet_set+0x46>
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
    ed2e:	1d29      	adds	r1, r5, #4
    ed30:	b2c9      	uxtb	r1, r1
    ed32:	2008      	movs	r0, #8
    ed34:	f042 0201 	orr.w	r2, r2, #1
    ed38:	f009 fdc4 	bl	188c4 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&conn->ccm_tx,
    ed3c:	4639      	mov	r1, r7
    ed3e:	f506 708d 	add.w	r0, r6, #282	; 0x11a
    ed42:	f00a f85b 	bl	18dfc <radio_ccm_tx_pkt_set>
}
    ed46:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
    ed4a:	f009 bdf3 	b.w	18934 <radio_pkt_tx_set>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
    ed4e:	2008      	movs	r0, #8
    ed50:	f042 0201 	orr.w	r2, r2, #1
    ed54:	b2e9      	uxtb	r1, r5
    ed56:	f009 fdb5 	bl	188c4 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
    ed5a:	4638      	mov	r0, r7
    ed5c:	e7f3      	b.n	ed46 <tx_packet_set+0x3e>
	...

0000ed60 <chan_set>:
{
    ed60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	pdu = (void *)_radio.advertiser.adv_data.data
    ed64:	4e89      	ldr	r6, [pc, #548]	; (ef8c <chan_set+0x22c>)
    ed66:	f896 322e 	ldrb.w	r3, [r6, #558]	; 0x22e
	if(pdu->type == PDU_ADV_TYPE_EXT_IND){
    ed6a:	eb03 2303 	add.w	r3, r3, r3, lsl #8
    ed6e:	4433      	add	r3, r6
{
    ed70:	b085      	sub	sp, #20
	if(pdu->type == PDU_ADV_TYPE_EXT_IND){
    ed72:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    ed76:	f003 030f 	and.w	r3, r3, #15
    ed7a:	2b07      	cmp	r3, #7
{
    ed7c:	4604      	mov	r4, r0
	if(pdu->type == PDU_ADV_TYPE_EXT_IND){
    ed7e:	f040 80ed 	bne.w	ef5c <chan_set+0x1fc>
		switch (chan) {
    ed82:	2826      	cmp	r0, #38	; 0x26
    ed84:	f8df 825c 	ldr.w	r8, [pc, #604]	; efe4 <chan_set+0x284>
    ed88:	d02e      	beq.n	ede8 <chan_set+0x88>
    ed8a:	2827      	cmp	r0, #39	; 0x27
    ed8c:	f8df 9258 	ldr.w	r9, [pc, #600]	; efe8 <chan_set+0x288>
    ed90:	d034      	beq.n	edfc <chan_set+0x9c>
    ed92:	2825      	cmp	r0, #37	; 0x25
    ed94:	d162      	bne.n	ee5c <chan_set+0xfc>
			stop_time_37 = k_cycle_get_32();
    ed96:	f7f4 fa6d 	bl	3274 <_timer_cycle_get_32>
			cycles_spent_37 = stop_time_37 - start_time37;
    ed9a:	4e7d      	ldr	r6, [pc, #500]	; (ef90 <chan_set+0x230>)
			stop_time_37 = k_cycle_get_32();
    ed9c:	4b7d      	ldr	r3, [pc, #500]	; (ef94 <chan_set+0x234>)
			cycles_spent_37 = stop_time_37 - start_time37;
    ed9e:	6837      	ldr	r7, [r6, #0]
			stop_time_37 = k_cycle_get_32();
    eda0:	6018      	str	r0, [r3, #0]
			cycles_spent_37 = stop_time_37 - start_time37;
    eda2:	4b7d      	ldr	r3, [pc, #500]	; (ef98 <chan_set+0x238>)
    eda4:	1bc7      	subs	r7, r0, r7
    eda6:	601f      	str	r7, [r3, #0]
			us_spent_37 = SYS_CLOCK_HW_CYCLES_TO_NS(cycles_spent_37)/1000;
    eda8:	4b7c      	ldr	r3, [pc, #496]	; (ef9c <chan_set+0x23c>)
    edaa:	681a      	ldr	r2, [r3, #0]
    edac:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    edb0:	fb82 2305 	smull	r2, r3, r2, r5
    edb4:	fba2 0107 	umull	r0, r1, r2, r7
    edb8:	f8d9 2000 	ldr.w	r2, [r9]
    edbc:	fb07 1103 	mla	r1, r7, r3, r1
    edc0:	17d3      	asrs	r3, r2, #31
    edc2:	f7f1 fa69 	bl	298 <__aeabi_uldivmod>
    edc6:	4b76      	ldr	r3, [pc, #472]	; (efa0 <chan_set+0x240>)
    edc8:	fbb0 f0f5 	udiv	r0, r0, r5
    edcc:	6018      	str	r0, [r3, #0]
			start_time = k_cycle_get_32();
    edce:	f7f4 fa51 	bl	3274 <_timer_cycle_get_32>
    edd2:	f8c8 0000 	str.w	r0, [r8]
			start_time37= k_cycle_get_32();
    edd6:	f7f4 fa4d 	bl	3274 <_timer_cycle_get_32>
			pckt_send++;
    edda:	4a72      	ldr	r2, [pc, #456]	; (efa4 <chan_set+0x244>)
			start_time37= k_cycle_get_32();
    eddc:	6030      	str	r0, [r6, #0]
			pckt_send++;
    edde:	7813      	ldrb	r3, [r2, #0]
    ede0:	3301      	adds	r3, #1
    ede2:	7013      	strb	r3, [r2, #0]
			radio_freq_chan_set(2);
    ede4:	2002      	movs	r0, #2
    ede6:	e0ad      	b.n	ef44 <chan_set+0x1e4>
			start_time = k_cycle_get_32();
    ede8:	f7f4 fa44 	bl	3274 <_timer_cycle_get_32>
			pckt_send++;
    edec:	4a6d      	ldr	r2, [pc, #436]	; (efa4 <chan_set+0x244>)
			start_time = k_cycle_get_32();
    edee:	f8c8 0000 	str.w	r0, [r8]
			pckt_send++;
    edf2:	7813      	ldrb	r3, [r2, #0]
    edf4:	3301      	adds	r3, #1
    edf6:	7013      	strb	r3, [r2, #0]
			radio_freq_chan_set(26);
    edf8:	201a      	movs	r0, #26
    edfa:	e0a3      	b.n	ef44 <chan_set+0x1e4>
			stop_time_39 = k_cycle_get_32();
    edfc:	f7f4 fa3a 	bl	3274 <_timer_cycle_get_32>
    ee00:	4b69      	ldr	r3, [pc, #420]	; (efa8 <chan_set+0x248>)
    ee02:	6018      	str	r0, [r3, #0]
			Time_difference = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_39 - start_time)/1000;
    ee04:	f8d8 3000 	ldr.w	r3, [r8]
    ee08:	eba0 0e03 	sub.w	lr, r0, r3
    ee0c:	4b63      	ldr	r3, [pc, #396]	; (ef9c <chan_set+0x23c>)
    ee0e:	681a      	ldr	r2, [r3, #0]
    ee10:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
    ee14:	fb82 2307 	smull	r2, r3, r2, r7
    ee18:	fbae 0102 	umull	r0, r1, lr, r2
    ee1c:	f8d9 2000 	ldr.w	r2, [r9]
    ee20:	fb0e 1103 	mla	r1, lr, r3, r1
    ee24:	17d3      	asrs	r3, r2, #31
    ee26:	f7f1 fa37 	bl	298 <__aeabi_uldivmod>
    ee2a:	4b60      	ldr	r3, [pc, #384]	; (efac <chan_set+0x24c>)
    ee2c:	fbb0 f0f7 	udiv	r0, r0, r7
    ee30:	6018      	str	r0, [r3, #0]
			pckt_send = 0;
    ee32:	4b5c      	ldr	r3, [pc, #368]	; (efa4 <chan_set+0x244>)
			Time_difference = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_39 - start_time)/1000;
    ee34:	2500      	movs	r5, #0
			pckt_send = 0;
    ee36:	701d      	strb	r5, [r3, #0]
			start_time = k_cycle_get_32();
    ee38:	f7f4 fa1c 	bl	3274 <_timer_cycle_get_32>
			_radio.ext_advertiser.current_slot++;
    ee3c:	f896 3689 	ldrb.w	r3, [r6, #1673]	; 0x689
			if(_radio.ext_advertiser.current_slot > _radio.ext_advertiser.max_skip){
    ee40:	f896 2688 	ldrb.w	r2, [r6, #1672]	; 0x688
			start_time = k_cycle_get_32();
    ee44:	f8c8 0000 	str.w	r0, [r8]
			_radio.ext_advertiser.current_slot++;
    ee48:	3301      	adds	r3, #1
    ee4a:	b2db      	uxtb	r3, r3
			if(_radio.ext_advertiser.current_slot > _radio.ext_advertiser.max_skip){
    ee4c:	429a      	cmp	r2, r3
			_radio.ext_advertiser.current_slot++;
    ee4e:	f886 3689 	strb.w	r3, [r6, #1673]	; 0x689
			if(_radio.ext_advertiser.current_slot > _radio.ext_advertiser.max_skip){
    ee52:	d201      	bcs.n	ee58 <chan_set+0xf8>
			_radio.ext_advertiser.current_slot= 0;
    ee54:	f886 5689 	strb.w	r5, [r6, #1673]	; 0x689
			radio_freq_chan_set(80);
    ee58:	2050      	movs	r0, #80	; 0x50
    ee5a:	e073      	b.n	ef44 <chan_set+0x1e4>
			stop_time_aux1 = k_cycle_get_32();
    ee5c:	f7f4 fa0a 	bl	3274 <_timer_cycle_get_32>
    ee60:	4b53      	ldr	r3, [pc, #332]	; (efb0 <chan_set+0x250>)
    ee62:	6018      	str	r0, [r3, #0]
    ee64:	4b4d      	ldr	r3, [pc, #308]	; (ef9c <chan_set+0x23c>)
    ee66:	681b      	ldr	r3, [r3, #0]
    ee68:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    ee6c:	fb83 ab05 	smull	sl, fp, r3, r5
			us_spent_aux1 = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_aux1 - start_time)/1000;
    ee70:	f8d9 3000 	ldr.w	r3, [r9]
    ee74:	4619      	mov	r1, r3
    ee76:	17da      	asrs	r2, r3, #31
    ee78:	f8d8 3000 	ldr.w	r3, [r8]
			us_spent_5 = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_aux1 - start_time_5)/1000;
    ee7c:	f8df 816c 	ldr.w	r8, [pc, #364]	; efec <chan_set+0x28c>
			us_spent_aux1 = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_aux1 - start_time)/1000;
    ee80:	1ac3      	subs	r3, r0, r3
			stop_time_aux1 = k_cycle_get_32();
    ee82:	4607      	mov	r7, r0
			us_spent_aux1 = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_aux1 - start_time)/1000;
    ee84:	e9cd 1202 	strd	r1, r2, [sp, #8]
    ee88:	fba3 010a 	umull	r0, r1, r3, sl
    ee8c:	fb03 110b 	mla	r1, r3, fp, r1
    ee90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    ee94:	f7f1 fa00 	bl	298 <__aeabi_uldivmod>
    ee98:	4b46      	ldr	r3, [pc, #280]	; (efb4 <chan_set+0x254>)
    ee9a:	fbb0 f0f5 	udiv	r0, r0, r5
    ee9e:	6018      	str	r0, [r3, #0]
			us_spent_aux = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_aux1 - start_time37)/1000;
    eea0:	4b3b      	ldr	r3, [pc, #236]	; (ef90 <chan_set+0x230>)
    eea2:	681b      	ldr	r3, [r3, #0]
    eea4:	1afb      	subs	r3, r7, r3
    eea6:	fba3 010a 	umull	r0, r1, r3, sl
    eeaa:	fb03 110b 	mla	r1, r3, fp, r1
    eeae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    eeb2:	f7f1 f9f1 	bl	298 <__aeabi_uldivmod>
    eeb6:	4b40      	ldr	r3, [pc, #256]	; (efb8 <chan_set+0x258>)
    eeb8:	fbb0 f0f5 	udiv	r0, r0, r5
    eebc:	6018      	str	r0, [r3, #0]
			us_spent_5 = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_aux1 - start_time_5)/1000;
    eebe:	f8d8 3000 	ldr.w	r3, [r8]
    eec2:	1aff      	subs	r7, r7, r3
    eec4:	fba7 010a 	umull	r0, r1, r7, sl
    eec8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    eecc:	fb07 110b 	mla	r1, r7, fp, r1
    eed0:	f7f1 f9e2 	bl	298 <__aeabi_uldivmod>
    eed4:	4b39      	ldr	r3, [pc, #228]	; (efbc <chan_set+0x25c>)
    eed6:	fbb0 f0f5 	udiv	r0, r0, r5
    eeda:	6018      	str	r0, [r3, #0]
 			stop_dynamic_cal = k_cycle_get_32(); 
    eedc:	f7f4 f9ca 	bl	3274 <_timer_cycle_get_32>
    eee0:	4b37      	ldr	r3, [pc, #220]	; (efc0 <chan_set+0x260>)
			last_dynamic_cal = final_dynamic_cal;
    eee2:	4f38      	ldr	r7, [pc, #224]	; (efc4 <chan_set+0x264>)
 			stop_dynamic_cal = k_cycle_get_32(); 
    eee4:	2100      	movs	r1, #0
    eee6:	e9c3 0100 	strd	r0, r1, [r3]
			last_dynamic_cal = final_dynamic_cal;
    eeea:	4b37      	ldr	r3, [pc, #220]	; (efc8 <chan_set+0x268>)
    eeec:	f8d7 b000 	ldr.w	fp, [r7]
    eef0:	687a      	ldr	r2, [r7, #4]
    eef2:	f8c3 b000 	str.w	fp, [r3]
    eef6:	605a      	str	r2, [r3, #4]
			final_dynamic_cal = SYS_CLOCK_HW_CYCLES_TO_NS(stop_dynamic_cal - start_dynamic_cal)/1000;
    eef8:	4b34      	ldr	r3, [pc, #208]	; (efcc <chan_set+0x26c>)
    eefa:	e9d3 2300 	ldrd	r2, r3, [r3]
    eefe:	1a82      	subs	r2, r0, r2
    ef00:	eb61 0303 	sbc.w	r3, r1, r3
    ef04:	4925      	ldr	r1, [pc, #148]	; (ef9c <chan_set+0x23c>)
    ef06:	6808      	ldr	r0, [r1, #0]
    ef08:	fb80 0105 	smull	r0, r1, r0, r5
    ef0c:	4351      	muls	r1, r2
    ef0e:	fb00 1303 	mla	r3, r0, r3, r1
    ef12:	fba2 0100 	umull	r0, r1, r2, r0
    ef16:	f8d9 2000 	ldr.w	r2, [r9]
    ef1a:	4419      	add	r1, r3
    ef1c:	17d3      	asrs	r3, r2, #31
    ef1e:	f7f1 f9bb 	bl	298 <__aeabi_uldivmod>
    ef22:	2300      	movs	r3, #0
    ef24:	fbb0 f0f5 	udiv	r0, r0, r5
    ef28:	6038      	str	r0, [r7, #0]
			_radio.ext_advertiser.last_dynamic_cal = final_dynamic_cal-last_dynamic_cal;
    ef2a:	eba0 000b 	sub.w	r0, r0, fp
			final_dynamic_cal = SYS_CLOCK_HW_CYCLES_TO_NS(stop_dynamic_cal - start_dynamic_cal)/1000;
    ef2e:	607b      	str	r3, [r7, #4]
			_radio.ext_advertiser.last_dynamic_cal = final_dynamic_cal-last_dynamic_cal;
    ef30:	f8c6 06a8 	str.w	r0, [r6, #1704]	; 0x6a8
			start_time_5 = k_cycle_get_32();
    ef34:	f7f4 f99e 	bl	3274 <_timer_cycle_get_32>
    ef38:	f8c8 0000 	str.w	r0, [r8]
			if (chan < 11) {
    ef3c:	2c0a      	cmp	r4, #10
    ef3e:	d809      	bhi.n	ef54 <chan_set+0x1f4>
				radio_freq_chan_set(4 + (2 * chan));
    ef40:	1ca0      	adds	r0, r4, #2
				radio_freq_chan_set(28 + (2 * (chan - 11)));
    ef42:	0040      	lsls	r0, r0, #1
    ef44:	f009 fc8e 	bl	18864 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
    ef48:	4620      	mov	r0, r4
}
    ef4a:	b005      	add	sp, #20
    ef4c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	radio_whiten_iv_set(chan);
    ef50:	f009 bc8e 	b.w	18870 <radio_whiten_iv_set>
			} else if (chan < 40) {
    ef54:	2c27      	cmp	r4, #39	; 0x27
    ef56:	d80a      	bhi.n	ef6e <chan_set+0x20e>
				radio_freq_chan_set(28 + (2 * (chan - 11)));
    ef58:	1ce0      	adds	r0, r4, #3
    ef5a:	e7f2      	b.n	ef42 <chan_set+0x1e2>
		switch (chan) {
    ef5c:	2826      	cmp	r0, #38	; 0x26
    ef5e:	f43f af4b 	beq.w	edf8 <chan_set+0x98>
    ef62:	2827      	cmp	r0, #39	; 0x27
    ef64:	f43f af78 	beq.w	ee58 <chan_set+0xf8>
    ef68:	2825      	cmp	r0, #37	; 0x25
    ef6a:	d1e7      	bne.n	ef3c <chan_set+0x1dc>
    ef6c:	e73a      	b.n	ede4 <chan_set+0x84>
				LL_ASSERT(0);
    ef6e:	4b18      	ldr	r3, [pc, #96]	; (efd0 <chan_set+0x270>)
    ef70:	9301      	str	r3, [sp, #4]
    ef72:	9300      	str	r3, [sp, #0]
    ef74:	4a17      	ldr	r2, [pc, #92]	; (efd4 <chan_set+0x274>)
    ef76:	4b18      	ldr	r3, [pc, #96]	; (efd8 <chan_set+0x278>)
    ef78:	4918      	ldr	r1, [pc, #96]	; (efdc <chan_set+0x27c>)
    ef7a:	4819      	ldr	r0, [pc, #100]	; (efe0 <chan_set+0x280>)
    ef7c:	f7f3 f990 	bl	22a0 <printk>
    ef80:	4040      	eors	r0, r0
    ef82:	f380 8811 	msr	BASEPRI, r0
    ef86:	f04f 0004 	mov.w	r0, #4
    ef8a:	df02      	svc	2
    ef8c:	20000bf0 	.word	0x20000bf0
    ef90:	20003218 	.word	0x20003218
    ef94:	20003284 	.word	0x20003284
    ef98:	200032d4 	.word	0x200032d4
    ef9c:	2000a868 	.word	0x2000a868
    efa0:	200032f0 	.word	0x200032f0
    efa4:	200013d0 	.word	0x200013d0
    efa8:	20003288 	.word	0x20003288
    efac:	200032d8 	.word	0x200032d8
    efb0:	200032e4 	.word	0x200032e4
    efb4:	200032b0 	.word	0x200032b0
    efb8:	20003204 	.word	0x20003204
    efbc:	200032e8 	.word	0x200032e8
    efc0:	200032a8 	.word	0x200032a8
    efc4:	20001390 	.word	0x20001390
    efc8:	20001398 	.word	0x20001398
    efcc:	20003210 	.word	0x20003210
    efd0:	00023dbe 	.word	0x00023dbe
    efd4:	00022d86 	.word	0x00022d86
    efd8:	00025c66 	.word	0x00025c66
    efdc:	000272e8 	.word	0x000272e8
    efe0:	00023fb5 	.word	0x00023fb5
    efe4:	200032a0 	.word	0x200032a0
    efe8:	2000a864 	.word	0x2000a864
    efec:	200032c4 	.word	0x200032c4

0000eff0 <adv_setup>:
{
    eff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (_radio.advertiser.adv_data.first !=
    eff4:	4c8d      	ldr	r4, [pc, #564]	; (f22c <adv_setup+0x23c>)
    eff6:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
    effa:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    effe:	429a      	cmp	r2, r3
    f000:	f000 80dc 	beq.w	f1bc <adv_setup+0x1cc>
		first = _radio.advertiser.adv_data.first + 1;
    f004:	3301      	adds	r3, #1
    f006:	b2db      	uxtb	r3, r3
			first = 0;
    f008:	2b02      	cmp	r3, #2
    f00a:	bf08      	it	eq
    f00c:	2300      	moveq	r3, #0
		_radio.advertiser.adv_data.first = first;
    f00e:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
		upd = 1;
    f012:	f04f 0a01 	mov.w	sl, #1
	if (_radio.advertiser.scan_data.first != _radio.
    f016:	f894 3636 	ldrb.w	r3, [r4, #1590]	; 0x636
    f01a:	f894 2637 	ldrb.w	r2, [r4, #1591]	; 0x637
    f01e:	429a      	cmp	r2, r3
    f020:	d008      	beq.n	f034 <adv_setup+0x44>
		first = _radio.advertiser.scan_data.first + 1;
    f022:	3301      	adds	r3, #1
    f024:	b2db      	uxtb	r3, r3
			first = 0;
    f026:	2b02      	cmp	r3, #2
    f028:	bf08      	it	eq
    f02a:	2300      	moveq	r3, #0
		_radio.advertiser.scan_data.first = first;
    f02c:	f884 3636 	strb.w	r3, [r4, #1590]	; 0x636
		upd = 1;
    f030:	f04f 0a01 	mov.w	sl, #1
	pdu = (void *)_radio.advertiser.adv_data.data
    f034:	f894 722e 	ldrb.w	r7, [r4, #558]	; 0x22e
    f038:	eb07 2707 	add.w	r7, r7, r7, lsl #8
    f03c:	372c      	adds	r7, #44	; 0x2c
    f03e:	eb04 0907 	add.w	r9, r4, r7
	if(pdu->type == PDU_ADV_TYPE_EXT_IND){
    f042:	5de3      	ldrb	r3, [r4, r7]
    f044:	f003 030f 	and.w	r3, r3, #15
    f048:	2b07      	cmp	r3, #7
    f04a:	d161      	bne.n	f110 <adv_setup+0x120>
			if(h->adv_addr){
    f04c:	f899 3003 	ldrb.w	r3, [r9, #3]
    f050:	07dd      	lsls	r5, r3, #31
				ptr += BDADDR_SIZE;
    f052:	bf4c      	ite	mi
    f054:	f109 050a 	addmi.w	r5, r9, #10
		ptr = (u8_t *)h + sizeof(*h);
    f058:	f109 0504 	addpl.w	r5, r9, #4
			if(h->tgt_addr){
    f05c:	079a      	lsls	r2, r3, #30
				ptr += BDADDR_SIZE;
    f05e:	bf48      	it	mi
    f060:	3506      	addmi	r5, #6
			if(h->adi){
    f062:	071e      	lsls	r6, r3, #28
				ptr += sizeof(*adi_ptr);
    f064:	bf48      	it	mi
    f066:	3502      	addmi	r5, #2
			if(h->aux_ptr){
    f068:	06da      	lsls	r2, r3, #27
    f06a:	d54b      	bpl.n	f104 <adv_setup+0x114>
					_radio.ext_advertiser.slot = ( _radio.ext_advertiser.prim_interval + _radio.ext_advertiser.ticker_offset) * _radio.ext_advertiser.current_slot;
    f06c:	f8d4 26a4 	ldr.w	r2, [r4, #1700]	; 0x6a4
    f070:	f8d4 3680 	ldr.w	r3, [r4, #1664]	; 0x680
				if((_radio.advertiser.chan_map & 0x07)== 0x07) {
    f074:	f894 6029 	ldrb.w	r6, [r4, #41]	; 0x29
					_radio.ext_advertiser.slot = ( _radio.ext_advertiser.prim_interval + _radio.ext_advertiser.ticker_offset) * _radio.ext_advertiser.current_slot;
    f078:	4413      	add	r3, r2
    f07a:	f894 2689 	ldrb.w	r2, [r4, #1673]	; 0x689
				if((_radio.advertiser.chan_map & 0x07)== 0x07) {
    f07e:	f3c6 1602 	ubfx	r6, r6, #4, #3
					_radio.ext_advertiser.slot = ( _radio.ext_advertiser.prim_interval + _radio.ext_advertiser.ticker_offset) * _radio.ext_advertiser.current_slot;
    f082:	435a      	muls	r2, r3
				if((_radio.advertiser.chan_map & 0x07)== 0x07) {
    f084:	2e07      	cmp	r6, #7
					_radio.ext_advertiser.slot = ( _radio.ext_advertiser.prim_interval + _radio.ext_advertiser.ticker_offset) * _radio.ext_advertiser.current_slot;
    f086:	f8c4 268c 	str.w	r2, [r4, #1676]	; 0x68c
				if((_radio.advertiser.chan_map & 0x07)== 0x07) {
    f08a:	f040 80a7 	bne.w	f1dc <adv_setup+0x1ec>
					if((_radio.advertiser.chan_map_current & 0x07) == 0x07){
    f08e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    f092:	f003 0307 	and.w	r3, r3, #7
    f096:	2b07      	cmp	r3, #7
    f098:	f040 8093 	bne.w	f1c2 <adv_setup+0x1d2>
						offset = (_radio.ext_advertiser.chan_37 -  _radio.ext_advertiser.slot );
    f09c:	f8d4 0690 	ldr.w	r0, [r4, #1680]	; 0x690
    f0a0:	1a82      	subs	r2, r0, r2
    f0a2:	4610      	mov	r0, r2
    f0a4:	2100      	movs	r1, #0
						_radio.ext_advertiser.chan_offset = offset;
    f0a6:	f8c4 269c 	str.w	r2, [r4, #1692]	; 0x69c
				if(offset > 245700){
    f0aa:	4a61      	ldr	r2, [pc, #388]	; (f230 <adv_setup+0x240>)
    f0ac:	78ae      	ldrb	r6, [r5, #2]
    f0ae:	f895 8000 	ldrb.w	r8, [r5]
    f0b2:	2300      	movs	r3, #0
    f0b4:	428b      	cmp	r3, r1
    f0b6:	bf08      	it	eq
    f0b8:	4282      	cmpeq	r2, r0
    f0ba:	f080 80a0 	bcs.w	f1fe <adv_setup+0x20e>
					ap->offs = offset/1200;
    f0be:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
    f0c2:	2300      	movs	r3, #0
    f0c4:	f7f1 f8e8 	bl	298 <__aeabi_uldivmod>
    f0c8:	f026 061f 	bic.w	r6, r6, #31
    f0cc:	7068      	strb	r0, [r5, #1]
    f0ce:	f3c0 2004 	ubfx	r0, r0, #8, #5
    f0d2:	4330      	orrs	r0, r6
    f0d4:	70a8      	strb	r0, [r5, #2]
					ap->offs_units = EXT_ADV_AUX_PTR_OFFS_UNITS_300;
    f0d6:	f048 0880 	orr.w	r8, r8, #128	; 0x80
				if(_radio.advertiser.ext_adv == 1){
    f0da:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
					ap->offs_units = EXT_ADV_AUX_PTR_OFFS_UNITS_30;
    f0de:	f885 8000 	strb.w	r8, [r5]
				if(_radio.advertiser.ext_adv == 1){
    f0e2:	07db      	lsls	r3, r3, #31
    f0e4:	d508      	bpl.n	f0f8 <adv_setup+0x108>
					_radio.ext_advertiser.aux_pckt_chan++;
    f0e6:	f894 36a0 	ldrb.w	r3, [r4, #1696]	; 0x6a0
    f0ea:	3301      	adds	r3, #1
    f0ec:	b2db      	uxtb	r3, r3
					if(_radio.ext_advertiser.aux_pckt_chan == 0x25){ //37 channel
    f0ee:	2b25      	cmp	r3, #37	; 0x25
						_radio.ext_advertiser.aux_pckt_chan = 0;
    f0f0:	bf08      	it	eq
    f0f2:	2300      	moveq	r3, #0
    f0f4:	f884 36a0 	strb.w	r3, [r4, #1696]	; 0x6a0
				ap->chan_idx = _radio.ext_advertiser.aux_pckt_chan;	
    f0f8:	782b      	ldrb	r3, [r5, #0]
    f0fa:	f894 26a0 	ldrb.w	r2, [r4, #1696]	; 0x6a0
    f0fe:	f362 0305 	bfi	r3, r2, #0, #6
    f102:	702b      	strb	r3, [r5, #0]
		_radio.advertiser.ext_adv = 0;
    f104:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    f108:	f36f 0300 	bfc	r3, #0, #1
    f10c:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	if (upd) {
    f110:	f1ba 0f00 	cmp.w	sl, #0
    f114:	d00b      	beq.n	f12e <adv_setup+0x13e>
		struct pdu_adv *scan_pdu = (void *)
    f116:	f894 0636 	ldrb.w	r0, [r4, #1590]	; 0x636
    f11a:	eb00 2000 	add.w	r0, r0, r0, lsl #8
    f11e:	4420      	add	r0, r4
		memcpy(&scan_pdu->scan_rsp.addr[0],
    f120:	2206      	movs	r2, #6
    f122:	f109 0102 	add.w	r1, r9, #2
    f126:	f200 4036 	addw	r0, r0, #1078	; 0x436
    f12a:	f7f1 fb32 	bl	792 <memcpy>
		radio_pkt_tx_set(pdu);
    f12e:	4648      	mov	r0, r9
    f130:	f009 fc00 	bl	18934 <radio_pkt_tx_set>
		if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
    f134:	5de3      	ldrb	r3, [r4, r7]
    f136:	f003 030f 	and.w	r3, r3, #15
    f13a:	2b02      	cmp	r3, #2
    f13c:	d06d      	beq.n	f21a <adv_setup+0x22a>
    f13e:	2b07      	cmp	r3, #7
    f140:	d06b      	beq.n	f21a <adv_setup+0x22a>
			_radio.state = STATE_TX;
    f142:	2302      	movs	r3, #2
			radio_tmr_tifs_set(RADIO_TIFS);
    f144:	2096      	movs	r0, #150	; 0x96
			_radio.state = STATE_TX;
    f146:	7523      	strb	r3, [r4, #20]
			radio_tmr_tifs_set(RADIO_TIFS);
    f148:	f009 fd1a 	bl	18b80 <radio_tmr_tifs_set>
			radio_switch_complete_and_rx(0);
    f14c:	2000      	movs	r0, #0
    f14e:	f009 fc79 	bl	18a44 <radio_switch_complete_and_rx>
		bitmap = _radio.advertiser.chan_map_current;
    f152:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    f156:	f3c3 0202 	ubfx	r2, r3, #0, #3
    f15a:	b2d3      	uxtb	r3, r2
    f15c:	4619      	mov	r1, r3
		while ((bitmap & 0x01) == 0) {
    f15e:	2000      	movs	r0, #0
    f160:	07ce      	lsls	r6, r1, #31
    f162:	f100 0501 	add.w	r5, r0, #1
    f166:	d55d      	bpl.n	f224 <adv_setup+0x234>
			(_radio.advertiser.chan_map_current - 1);
    f168:	3b01      	subs	r3, #1
			_radio.advertiser.chan_map_current &=
    f16a:	4013      	ands	r3, r2
    f16c:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
		count++;
    f170:	4d30      	ldr	r5, [pc, #192]	; (f234 <adv_setup+0x244>)
			_radio.advertiser.chan_map_current &=
    f172:	f363 0202 	bfi	r2, r3, #0, #3
    f176:	4b30      	ldr	r3, [pc, #192]	; (f238 <adv_setup+0x248>)
    f178:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
		if(! _radio.advertiser.chan_map_current){	
    f17c:	f012 0f07 	tst.w	r2, #7
			chan_case ++;
    f180:	bf08      	it	eq
    f182:	781a      	ldrbeq	r2, [r3, #0]
		count++;
    f184:	7829      	ldrb	r1, [r5, #0]
			chan_case ++;
    f186:	bf0c      	ite	eq
    f188:	3201      	addeq	r2, #1
*/			chan_case = 0 ;
    f18a:	2200      	movne	r2, #0
    f18c:	701a      	strb	r2, [r3, #0]
		_radio.ext_advertiser.event++;
    f18e:	f894 368a 	ldrb.w	r3, [r4, #1674]	; 0x68a
		if(_radio.ext_advertiser.event > _radio.ext_advertiser.max_skip){
    f192:	f894 2688 	ldrb.w	r2, [r4, #1672]	; 0x688
		_radio.ext_advertiser.event++;
    f196:	3301      	adds	r3, #1
    f198:	b2db      	uxtb	r3, r3
		if(_radio.ext_advertiser.event > _radio.ext_advertiser.max_skip){
    f19a:	429a      	cmp	r2, r3
		count++;
    f19c:	f101 0101 	add.w	r1, r1, #1
		_radio.ext_advertiser.event++;
    f1a0:	f884 368a 	strb.w	r3, [r4, #1674]	; 0x68a
		count++;
    f1a4:	7029      	strb	r1, [r5, #0]
			_radio.ext_advertiser.event = 0;
    f1a6:	bf38      	it	cc
    f1a8:	2300      	movcc	r3, #0
		chan_set(37 + chan);
    f1aa:	b2c0      	uxtb	r0, r0
			_radio.ext_advertiser.event = 0;
    f1ac:	bf38      	it	cc
    f1ae:	f884 368a 	strbcc.w	r3, [r4, #1674]	; 0x68a
		chan_set(37 + chan);
    f1b2:	3025      	adds	r0, #37	; 0x25
}
    f1b4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		chan_set(37 + chan);
    f1b8:	f7ff bdd2 	b.w	ed60 <chan_set>
	u8_t upd = 0;
    f1bc:	f04f 0a00 	mov.w	sl, #0
    f1c0:	e729      	b.n	f016 <adv_setup+0x26>
					}else if((_radio.advertiser.chan_map_current & 0x07) == 0x06){
    f1c2:	2b06      	cmp	r3, #6
    f1c4:	d104      	bne.n	f1d0 <adv_setup+0x1e0>
						offset = (_radio.ext_advertiser.chan_38 - _radio.ext_advertiser.slot );
    f1c6:	f8d4 0694 	ldr.w	r0, [r4, #1684]	; 0x694
						offset = (_radio.ext_advertiser.chan_39 - _radio.ext_advertiser.slot );
    f1ca:	1a80      	subs	r0, r0, r2
					offset = (_radio.ext_advertiser.chan_37 -  _radio.ext_advertiser.slot );
    f1cc:	2100      	movs	r1, #0
    f1ce:	e76c      	b.n	f0aa <adv_setup+0xba>
					}else if((_radio.advertiser.chan_map_current & 0x07) == 0x04){
    f1d0:	2b04      	cmp	r3, #4
    f1d2:	f47f af6a 	bne.w	f0aa <adv_setup+0xba>
						offset = (_radio.ext_advertiser.chan_39 - _radio.ext_advertiser.slot );
    f1d6:	f8d4 0698 	ldr.w	r0, [r4, #1688]	; 0x698
    f1da:	e7f6      	b.n	f1ca <adv_setup+0x1da>
					_radio.ext_advertiser.slot = ( _radio.ext_advertiser.prim_interval + _radio.ext_advertiser.ticker_offset ) * _radio.ext_advertiser.event;
    f1dc:	f894 668a 	ldrb.w	r6, [r4, #1674]	; 0x68a
    f1e0:	4373      	muls	r3, r6
    f1e2:	f8c4 368c 	str.w	r3, [r4, #1676]	; 0x68c
					if(_radio.ext_advertiser.event == 0){
    f1e6:	b926      	cbnz	r6, f1f2 <adv_setup+0x202>
						start_dynamic_cal = k_cycle_get_32(); 
    f1e8:	f7f4 f844 	bl	3274 <_timer_cycle_get_32>
    f1ec:	4b13      	ldr	r3, [pc, #76]	; (f23c <adv_setup+0x24c>)
    f1ee:	e883 0041 	stmia.w	r3, {r0, r6}
					offset = (_radio.ext_advertiser.chan_37 -  _radio.ext_advertiser.slot );
    f1f2:	f8d4 0690 	ldr.w	r0, [r4, #1680]	; 0x690
    f1f6:	f8d4 368c 	ldr.w	r3, [r4, #1676]	; 0x68c
    f1fa:	1ac0      	subs	r0, r0, r3
    f1fc:	e7e6      	b.n	f1cc <adv_setup+0x1dc>
					ap->offs = offset /30;
    f1fe:	221e      	movs	r2, #30
    f200:	2300      	movs	r3, #0
    f202:	f7f1 f849 	bl	298 <__aeabi_uldivmod>
    f206:	f026 061f 	bic.w	r6, r6, #31
    f20a:	7068      	strb	r0, [r5, #1]
    f20c:	f3c0 2004 	ubfx	r0, r0, #8, #5
    f210:	4306      	orrs	r6, r0
    f212:	70ae      	strb	r6, [r5, #2]
					ap->offs_units = EXT_ADV_AUX_PTR_OFFS_UNITS_30;
    f214:	f36f 18c7 	bfc	r8, #7, #1
    f218:	e75f      	b.n	f0da <adv_setup+0xea>
			_radio.state = STATE_CLOSE;
    f21a:	2303      	movs	r3, #3
    f21c:	7523      	strb	r3, [r4, #20]
			radio_switch_complete_and_disable();
    f21e:	f009 fc27 	bl	18a70 <radio_switch_complete_and_disable>
    f222:	e796      	b.n	f152 <adv_setup+0x162>
			bitmap >>= 1;
    f224:	0849      	lsrs	r1, r1, #1
    f226:	4628      	mov	r0, r5
    f228:	e79a      	b.n	f160 <adv_setup+0x170>
    f22a:	bf00      	nop
    f22c:	20000bf0 	.word	0x20000bf0
    f230:	0003bfc4 	.word	0x0003bfc4
    f234:	2000138a 	.word	0x2000138a
    f238:	20001389 	.word	0x20001389
    f23c:	20003210 	.word	0x20003210

0000f240 <sched_free_win_offset_calc>:
{
    f240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f244:	b08f      	sub	sp, #60	; 0x3c
    f246:	4692      	mov	sl, r2
    f248:	9304      	str	r3, [sp, #16]
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
    f24a:	6803      	ldr	r3, [r0, #0]
{
    f24c:	9109      	str	r1, [sp, #36]	; 0x24
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
    f24e:	2b00      	cmp	r3, #0
{
    f250:	4680      	mov	r8, r0
    f252:	6842      	ldr	r2, [r0, #4]
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
    f254:	da3a      	bge.n	f2cc <sched_free_win_offset_calc+0x8c>
		u32_t ticks_prepare_to_start =
    f256:	6881      	ldr	r1, [r0, #8]
		ticks_slot_abs = conn_curr->hdr.ticks_xtal_to_start &
    f258:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
		ticks_prepare_reduced = ticks_slot_abs - ticks_prepare_to_start;
    f25c:	4291      	cmp	r1, r2
    f25e:	bf2c      	ite	cs
    f260:	1a5a      	subcs	r2, r3, r1
    f262:	1a9a      	subcc	r2, r3, r2
	u32_t ticks_prepare_reduced = 0;
    f264:	9205      	str	r2, [sp, #20]
	ticks_slot_abs += conn_curr->hdr.ticks_slot +
    f266:	f8d8 200c 	ldr.w	r2, [r8, #12]
    f26a:	323d      	adds	r2, #61	; 0x3d
		ticks_anchor_prev = offset_index = _win_offset = 0;
    f26c:	2400      	movs	r4, #0
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    f26e:	27ff      	movs	r7, #255	; 0xff
	ticks_slot_abs += conn_curr->hdr.ticks_slot +
    f270:	18d3      	adds	r3, r2, r3
    f272:	9307      	str	r3, [sp, #28]
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    f274:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
		ticks_anchor_prev = offset_index = _win_offset = 0;
    f278:	f8ad 402a 	strh.w	r4, [sp, #42]	; 0x2a
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
    f27c:	940c      	str	r4, [sp, #48]	; 0x30
    f27e:	940b      	str	r4, [sp, #44]	; 0x2c
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    f280:	9706      	str	r7, [sp, #24]
		ticks_anchor_prev = offset_index = _win_offset = 0;
    f282:	46a1      	mov	r9, r4
	ticks_slot_abs_prev = 0;
    f284:	46a3      	mov	fp, r4
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
    f286:	4625      	mov	r5, r4
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    f288:	2302      	movs	r3, #2
    f28a:	930d      	str	r3, [sp, #52]	; 0x34
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    f28c:	ab0d      	add	r3, sp, #52	; 0x34
    f28e:	9302      	str	r3, [sp, #8]
    f290:	4b81      	ldr	r3, [pc, #516]	; (f498 <sched_free_win_offset_calc+0x258>)
    f292:	9301      	str	r3, [sp, #4]
    f294:	ab0b      	add	r3, sp, #44	; 0x2c
    f296:	9300      	str	r3, [sp, #0]
    f298:	f10d 0229 	add.w	r2, sp, #41	; 0x29
    f29c:	ab0c      	add	r3, sp, #48	; 0x30
    f29e:	2101      	movs	r1, #1
    f2a0:	2000      	movs	r0, #0
    f2a2:	f7fd fa03 	bl	c6ac <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    f2a6:	2802      	cmp	r0, #2
    f2a8:	d019      	beq.n	f2de <sched_free_win_offset_calc+0x9e>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    f2aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f2ac:	b1db      	cbz	r3, f2e6 <sched_free_win_offset_calc+0xa6>
    f2ae:	4b7b      	ldr	r3, [pc, #492]	; (f49c <sched_free_win_offset_calc+0x25c>)
    f2b0:	9301      	str	r3, [sp, #4]
    f2b2:	9300      	str	r3, [sp, #0]
    f2b4:	4a7a      	ldr	r2, [pc, #488]	; (f4a0 <sched_free_win_offset_calc+0x260>)
    f2b6:	4b7b      	ldr	r3, [pc, #492]	; (f4a4 <sched_free_win_offset_calc+0x264>)
    f2b8:	497b      	ldr	r1, [pc, #492]	; (f4a8 <sched_free_win_offset_calc+0x268>)
    f2ba:	487c      	ldr	r0, [pc, #496]	; (f4ac <sched_free_win_offset_calc+0x26c>)
			LL_ASSERT(0);
    f2bc:	f7f2 fff0 	bl	22a0 <printk>
    f2c0:	4040      	eors	r0, r0
    f2c2:	f380 8811 	msr	BASEPRI, r0
    f2c6:	f04f 0004 	mov.w	r0, #4
    f2ca:	df02      	svc	2
		u32_t ticks_prepare_to_start =
    f2cc:	4293      	cmp	r3, r2
    f2ce:	bf38      	it	cc
    f2d0:	4613      	movcc	r3, r2
	u32_t ticks_prepare_reduced = 0;
    f2d2:	2200      	movs	r2, #0
    f2d4:	e7c6      	b.n	f264 <sched_free_win_offset_calc+0x24>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    f2d6:	2101      	movs	r1, #1
    f2d8:	2000      	movs	r0, #0
    f2da:	f7fd fa65 	bl	c7a8 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    f2de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f2e0:	2b02      	cmp	r3, #2
    f2e2:	d0f8      	beq.n	f2d6 <sched_free_win_offset_calc+0x96>
    f2e4:	e7e1      	b.n	f2aa <sched_free_win_offset_calc+0x6a>
		if (ticker_id == 0xff) {
    f2e6:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
    f2ea:	2aff      	cmp	r2, #255	; 0xff
    f2ec:	d065      	beq.n	f3ba <sched_free_win_offset_calc+0x17a>
		if ((ticker_id_prev != 0xff) &&
    f2ee:	2fff      	cmp	r7, #255	; 0xff
    f2f0:	d00a      	beq.n	f308 <sched_free_win_offset_calc+0xc8>
    f2f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f2f4:	4599      	cmp	r9, r3
    f2f6:	d007      	beq.n	f308 <sched_free_win_offset_calc+0xc8>
			LL_ASSERT(0);
    f2f8:	4b68      	ldr	r3, [pc, #416]	; (f49c <sched_free_win_offset_calc+0x25c>)
    f2fa:	9301      	str	r3, [sp, #4]
    f2fc:	9300      	str	r3, [sp, #0]
    f2fe:	4a68      	ldr	r2, [pc, #416]	; (f4a0 <sched_free_win_offset_calc+0x260>)
    f300:	4b68      	ldr	r3, [pc, #416]	; (f4a4 <sched_free_win_offset_calc+0x264>)
    f302:	4969      	ldr	r1, [pc, #420]	; (f4a8 <sched_free_win_offset_calc+0x268>)
    f304:	486a      	ldr	r0, [pc, #424]	; (f4b0 <sched_free_win_offset_calc+0x270>)
    f306:	e7d9      	b.n	f2bc <sched_free_win_offset_calc+0x7c>
		if (ticker_id <= RADIO_TICKER_ID_ADV ||
    f308:	2a05      	cmp	r2, #5
    f30a:	d951      	bls.n	f3b0 <sched_free_win_offset_calc+0x170>
				  _radio.connection_count)) {
    f30c:	4869      	ldr	r0, [pc, #420]	; (f4b4 <sched_free_win_offset_calc+0x274>)
    f30e:	f890 3718 	ldrb.w	r3, [r0, #1816]	; 0x718
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    f312:	3307      	adds	r3, #7
		if (ticker_id <= RADIO_TICKER_ID_ADV ||
    f314:	429a      	cmp	r2, r3
    f316:	da4b      	bge.n	f3b0 <sched_free_win_offset_calc+0x170>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION) {
    f318:	2a06      	cmp	r2, #6
    f31a:	f000 8092 	beq.w	f442 <sched_free_win_offset_calc+0x202>
		if (ticker_id_other != 0xFF) {
    f31e:	9b06      	ldr	r3, [sp, #24]
    f320:	2bff      	cmp	r3, #255	; 0xff
    f322:	d14a      	bne.n	f3ba <sched_free_win_offset_calc+0x17a>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    f324:	3a07      	subs	r2, #7
    f326:	b292      	uxth	r2, r2
    f328:	f44f 71aa 	mov.w	r1, #340	; 0x154
    f32c:	f8d0 0710 	ldr.w	r0, [r0, #1808]	; 0x710
    f330:	f7fc fa8e 	bl	b850 <mem_get>
		if ((conn != conn_curr) && (is_select || !conn->role)) {
    f334:	4580      	cmp	r8, r0
    f336:	d03b      	beq.n	f3b0 <sched_free_win_offset_calc+0x170>
    f338:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f33a:	b91b      	cbnz	r3, f344 <sched_free_win_offset_calc+0x104>
    f33c:	f990 301d 	ldrsb.w	r3, [r0, #29]
    f340:	2b00      	cmp	r3, #0
    f342:	db35      	blt.n	f3b0 <sched_free_win_offset_calc+0x170>
			u32_t ticks_to_expire_normal =
    f344:	9b05      	ldr	r3, [sp, #20]
    f346:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    f348:	6841      	ldr	r1, [r0, #4]
    f34a:	441e      	add	r6, r3
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    f34c:	6803      	ldr	r3, [r0, #0]
    f34e:	2b00      	cmp	r3, #0
    f350:	da4e      	bge.n	f3f0 <sched_free_win_offset_calc+0x1b0>
				u32_t ticks_prepare_to_start =
    f352:	6882      	ldr	r2, [r0, #8]
				ticks_slot_abs_curr =
    f354:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    f358:	428a      	cmp	r2, r1
    f35a:	bf2c      	ite	cs
    f35c:	18b6      	addcs	r6, r6, r2
    f35e:	1876      	addcc	r6, r6, r1
				ticks_to_expire_normal -=
    f360:	1af6      	subs	r6, r6, r3
			ticks_slot_abs_curr +=
    f362:	68c2      	ldr	r2, [r0, #12]
    f364:	f102 093d 	add.w	r9, r2, #61	; 0x3d
    f368:	444b      	add	r3, r9
    f36a:	9308      	str	r3, [sp, #32]
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
    f36c:	f8da 3000 	ldr.w	r3, [sl]
    f370:	429e      	cmp	r6, r3
    f372:	d916      	bls.n	f3a2 <sched_free_win_offset_calc+0x162>
    f374:	429d      	cmp	r5, r3
    f376:	bf38      	it	cc
    f378:	461d      	movcc	r5, r3
					(ticks_slot_abs_prev +
    f37a:	9b07      	ldr	r3, [sp, #28]
    f37c:	eb0b 0703 	add.w	r7, fp, r3
				while ((offset_index < *offset_max) &&
    f380:	9b18      	ldr	r3, [sp, #96]	; 0x60
    f382:	781b      	ldrb	r3, [r3, #0]
    f384:	42a3      	cmp	r3, r4
    f386:	d905      	bls.n	f394 <sched_free_win_offset_calc+0x154>
				       (ticker_ticks_diff_get(
    f388:	4629      	mov	r1, r5
    f38a:	4630      	mov	r0, r6
    f38c:	f7fd fa24 	bl	c7d8 <ticker_ticks_diff_get>
				while ((offset_index < *offset_max) &&
    f390:	42b8      	cmp	r0, r7
    f392:	d231      	bcs.n	f3f8 <sched_free_win_offset_calc+0x1b8>
				if (_win_offset >= conn_interval) {
    f394:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
    f398:	9a04      	ldr	r2, [sp, #16]
				*ticks_to_offset_next = ticks_to_expire_prev;
    f39a:	f8ca 5000 	str.w	r5, [sl]
				if (_win_offset >= conn_interval) {
    f39e:	4293      	cmp	r3, r2
    f3a0:	d20b      	bcs.n	f3ba <sched_free_win_offset_calc+0x17a>
			ticks_anchor_prev = ticks_anchor;
    f3a2:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
			ticker_id_prev = ticker_id;
    f3a6:	f89d 7029 	ldrb.w	r7, [sp, #41]	; 0x29
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    f3aa:	f8dd b020 	ldr.w	fp, [sp, #32]
			ticker_id_prev = ticker_id;
    f3ae:	4635      	mov	r5, r6
	} while (offset_index < *offset_max);
    f3b0:	9b18      	ldr	r3, [sp, #96]	; 0x60
    f3b2:	781b      	ldrb	r3, [r3, #0]
    f3b4:	42a3      	cmp	r3, r4
    f3b6:	f63f af67 	bhi.w	f288 <sched_free_win_offset_calc+0x48>
	if (ticker_id == 0xFF) {
    f3ba:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
    f3be:	2bff      	cmp	r3, #255	; 0xff
    f3c0:	d111      	bne.n	f3e6 <sched_free_win_offset_calc+0x1a6>
    f3c2:	f8da 3000 	ldr.w	r3, [sl]
			_win_offset = HAL_TICKER_TICKS_TO_US(
    f3c6:	f8df 80f0 	ldr.w	r8, [pc, #240]	; f4b8 <sched_free_win_offset_calc+0x278>
    f3ca:	a731      	add	r7, pc, #196	; (adr r7, f490 <sched_free_win_offset_calc+0x250>)
    f3cc:	e9d7 6700 	ldrd	r6, r7, [r7]
    f3d0:	429d      	cmp	r5, r3
    f3d2:	bf38      	it	cc
    f3d4:	461d      	movcc	r5, r3
    f3d6:	f04f 0907 	mov.w	r9, #7
		while (offset_index < *offset_max) {
    f3da:	9b18      	ldr	r3, [sp, #96]	; 0x60
    f3dc:	781b      	ldrb	r3, [r3, #0]
    f3de:	42a3      	cmp	r3, r4
    f3e0:	d831      	bhi.n	f446 <sched_free_win_offset_calc+0x206>
		*ticks_to_offset_next = ticks_to_expire_prev;
    f3e2:	f8ca 5000 	str.w	r5, [sl]
	*offset_max = offset_index;
    f3e6:	9b18      	ldr	r3, [sp, #96]	; 0x60
    f3e8:	701c      	strb	r4, [r3, #0]
}
    f3ea:	b00f      	add	sp, #60	; 0x3c
    f3ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				u32_t ticks_prepare_to_start =
    f3f0:	428b      	cmp	r3, r1
    f3f2:	bf38      	it	cc
    f3f4:	460b      	movcc	r3, r1
    f3f6:	e7b4      	b.n	f362 <sched_free_win_offset_calc+0x122>
					_win_offset = HAL_TICKER_TICKS_TO_US(
    f3f8:	4a2f      	ldr	r2, [pc, #188]	; (f4b8 <sched_free_win_offset_calc+0x278>)
    f3fa:	eb05 030b 	add.w	r3, r5, fp
    f3fe:	fba3 0102 	umull	r0, r1, r3, r2
    f402:	2207      	movs	r2, #7
    f404:	fb02 1103 	mla	r1, r2, r3, r1
    f408:	a321      	add	r3, pc, #132	; (adr r3, f490 <sched_free_win_offset_calc+0x250>)
    f40a:	e9d3 2300 	ldrd	r2, r3, [r3]
    f40e:	f7f0 ff43 	bl	298 <__aeabi_uldivmod>
						ticks_slot_abs_prev) / 1250;
    f412:	f240 43e2 	movw	r3, #1250	; 0x4e2
    f416:	fbb0 f0f3 	udiv	r0, r0, r3
					if (_win_offset >= conn_interval) {
    f41a:	9b04      	ldr	r3, [sp, #16]
					_win_offset = HAL_TICKER_TICKS_TO_US(
    f41c:	b280      	uxth	r0, r0
					if (_win_offset >= conn_interval) {
    f41e:	4298      	cmp	r0, r3
					_win_offset = HAL_TICKER_TICKS_TO_US(
    f420:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
					if (_win_offset >= conn_interval) {
    f424:	d20b      	bcs.n	f43e <sched_free_win_offset_calc+0x1fe>
					memcpy(win_offset +
    f426:	9b19      	ldr	r3, [sp, #100]	; 0x64
    f428:	2202      	movs	r2, #2
    f42a:	eb03 0044 	add.w	r0, r3, r4, lsl #1
    f42e:	f10d 012a 	add.w	r1, sp, #42	; 0x2a
					offset_index++;
    f432:	3401      	adds	r4, #1
					memcpy(win_offset +
    f434:	f7f1 f9ad 	bl	792 <memcpy>
					offset_index++;
    f438:	b2e4      	uxtb	r4, r4
					ticks_to_expire_prev +=
    f43a:	3528      	adds	r5, #40	; 0x28
    f43c:	e7a0      	b.n	f380 <sched_free_win_offset_calc+0x140>
						ticks_to_expire_prev = 0;
    f43e:	2500      	movs	r5, #0
    f440:	e7a8      	b.n	f394 <sched_free_win_offset_calc+0x154>
    f442:	9206      	str	r2, [sp, #24]
    f444:	e7b4      	b.n	f3b0 <sched_free_win_offset_calc+0x170>
			_win_offset = HAL_TICKER_TICKS_TO_US(
    f446:	eb05 030b 	add.w	r3, r5, fp
    f44a:	fba3 0108 	umull	r0, r1, r3, r8
    f44e:	fb09 1103 	mla	r1, r9, r3, r1
    f452:	4632      	mov	r2, r6
    f454:	463b      	mov	r3, r7
    f456:	f7f0 ff1f 	bl	298 <__aeabi_uldivmod>
					ticks_slot_abs_prev) / 1250;
    f45a:	f240 43e2 	movw	r3, #1250	; 0x4e2
    f45e:	fbb0 f0f3 	udiv	r0, r0, r3
			if (_win_offset >= conn_interval) {
    f462:	9b04      	ldr	r3, [sp, #16]
			_win_offset = HAL_TICKER_TICKS_TO_US(
    f464:	b280      	uxth	r0, r0
			if (_win_offset >= conn_interval) {
    f466:	4283      	cmp	r3, r0
			_win_offset = HAL_TICKER_TICKS_TO_US(
    f468:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
			if (_win_offset >= conn_interval) {
    f46c:	d90b      	bls.n	f486 <sched_free_win_offset_calc+0x246>
			memcpy(win_offset + (sizeof(u16_t) * offset_index),
    f46e:	9b19      	ldr	r3, [sp, #100]	; 0x64
    f470:	2202      	movs	r2, #2
    f472:	eb03 0044 	add.w	r0, r3, r4, lsl #1
    f476:	f10d 012a 	add.w	r1, sp, #42	; 0x2a
			offset_index++;
    f47a:	3401      	adds	r4, #1
			memcpy(win_offset + (sizeof(u16_t) * offset_index),
    f47c:	f7f1 f989 	bl	792 <memcpy>
			offset_index++;
    f480:	b2e4      	uxtb	r4, r4
			ticks_to_expire_prev += HAL_TICKER_US_TO_TICKS(1250);
    f482:	3528      	adds	r5, #40	; 0x28
    f484:	e7a9      	b.n	f3da <sched_free_win_offset_calc+0x19a>
				ticks_to_expire_prev = 0;
    f486:	2500      	movs	r5, #0
    f488:	e7ab      	b.n	f3e2 <sched_free_win_offset_calc+0x1a2>
    f48a:	bf00      	nop
    f48c:	f3af 8000 	nop.w
    f490:	3b9aca00 	.word	0x3b9aca00
    f494:	00000000 	.word	0x00000000
    f498:	0000e575 	.word	0x0000e575
    f49c:	00023dbe 	.word	0x00023dbe
    f4a0:	00022d86 	.word	0x00022d86
    f4a4:	00025c19 	.word	0x00025c19
    f4a8:	000272e8 	.word	0x000272e8
    f4ac:	00026a71 	.word	0x00026a71
    f4b0:	00023fb5 	.word	0x00023fb5
    f4b4:	20000bf0 	.word	0x20000bf0
    f4b8:	1afd498d 	.word	0x1afd498d

0000f4bc <mayfly_sched_free_win_offset_calc>:
{
    f4bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	u32_t ticks_to_offset_default = 0;
    f4be:	2300      	movs	r3, #0
    f4c0:	9303      	str	r3, [sp, #12]
	u8_t offset_max = 6;
    f4c2:	2306      	movs	r3, #6
    f4c4:	f88d 300b 	strb.w	r3, [sp, #11]
	if (conn->role) {
    f4c8:	f990 301d 	ldrsb.w	r3, [r0, #29]
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    f4cc:	f8d0 10dc 	ldr.w	r1, [r0, #220]	; 0xdc
	if (conn->role) {
    f4d0:	2b00      	cmp	r3, #0
		conn->llcp_conn_param.ticks_to_offset_next =
    f4d2:	bfbe      	ittt	lt
    f4d4:	4602      	movlt	r2, r0
    f4d6:	6f03      	ldrlt	r3, [r0, #112]	; 0x70
    f4d8:	f842 3fe4 	strlt.w	r3, [r2, #228]!
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    f4dc:	9101      	str	r1, [sp, #4]
    f4de:	f10d 010b 	add.w	r1, sp, #11
    f4e2:	9100      	str	r1, [sp, #0]
	ticks_to_offset_next = &ticks_to_offset_default;
    f4e4:	bfa8      	it	ge
    f4e6:	aa03      	addge	r2, sp, #12
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    f4e8:	f8b0 30c4 	ldrh.w	r3, [r0, #196]	; 0xc4
    f4ec:	2100      	movs	r1, #0
    f4ee:	f7ff fea7 	bl	f240 <sched_free_win_offset_calc>
}
    f4f2:	b005      	add	sp, #20
    f4f4:	f85d fb04 	ldr.w	pc, [sp], #4

0000f4f8 <mayfly_sched_win_offset_select>:
{
    f4f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    f4fc:	f8b0 20ce 	ldrh.w	r2, [r0, #206]	; 0xce
{
    f500:	b089      	sub	sp, #36	; 0x24
    f502:	4604      	mov	r4, r0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    f504:	4840      	ldr	r0, [pc, #256]	; (f608 <mayfly_sched_win_offset_select+0x110>)
	u8_t offset_m_max = OFFSET_M_MAX;
    f506:	2306      	movs	r3, #6
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
    f508:	ae05      	add	r6, sp, #20
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    f50a:	fba2 0100 	umull	r0, r1, r2, r0
	u8_t offset_m_max = OFFSET_M_MAX;
    f50e:	f88d 300d 	strb.w	r3, [sp, #13]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    f512:	f240 1323 	movw	r3, #291	; 0x123
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
    f516:	2500      	movs	r5, #0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    f518:	fb03 1102 	mla	r1, r3, r2, r1
    f51c:	a338      	add	r3, pc, #224	; (adr r3, f600 <mayfly_sched_win_offset_select+0x108>)
    f51e:	e9d3 2300 	ldrd	r2, r3, [r3]
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
    f522:	9505      	str	r5, [sp, #20]
    f524:	6075      	str	r5, [r6, #4]
    f526:	60b5      	str	r5, [r6, #8]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    f528:	f7f0 feb6 	bl	298 <__aeabi_uldivmod>
    f52c:	aa08      	add	r2, sp, #32
	sched_free_win_offset_calc(conn, 1, &ticks_to_offset,
    f52e:	f10d 010d 	add.w	r1, sp, #13
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    f532:	f842 0d10 	str.w	r0, [r2, #-16]!
	sched_free_win_offset_calc(conn, 1, &ticks_to_offset,
    f536:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    f53a:	9100      	str	r1, [sp, #0]
    f53c:	9601      	str	r6, [sp, #4]
    f53e:	2101      	movs	r1, #1
    f540:	4620      	mov	r0, r4
    f542:	f7ff fe7d 	bl	f240 <sched_free_win_offset_calc>
    f546:	f104 07ce 	add.w	r7, r4, #206	; 0xce
    f54a:	f104 08da 	add.w	r8, r4, #218	; 0xda
			if (win_offset_s != 0xffff) {
    f54e:	f64f 79ff 	movw	r9, #65535	; 0xffff
		memcpy((u8_t *)&win_offset_s,
    f552:	2202      	movs	r2, #2
    f554:	4639      	mov	r1, r7
    f556:	f10d 000e 	add.w	r0, sp, #14
    f55a:	f7f1 f91a 	bl	792 <memcpy>
		while (offset_index_m < offset_m_max) {
    f55e:	f89d 000d 	ldrb.w	r0, [sp, #13]
			if (win_offset_s != 0xffff) {
    f562:	f8bd 200e 	ldrh.w	r2, [sp, #14]
		while (offset_index_m < offset_m_max) {
    f566:	2300      	movs	r3, #0
    f568:	b2d9      	uxtb	r1, r3
    f56a:	4288      	cmp	r0, r1
    f56c:	d811      	bhi.n	f592 <mayfly_sched_win_offset_select+0x9a>
    f56e:	3702      	adds	r7, #2
	while (offset_index_s < OFFSET_S_MAX) {
    f570:	4547      	cmp	r7, r8
    f572:	d1ee      	bne.n	f552 <mayfly_sched_win_offset_select+0x5a>
	} else if (!has_offset_s) {
    f574:	b9b5      	cbnz	r5, f5a4 <mayfly_sched_win_offset_select+0xac>
			win_offset_m[0] * 1250;
    f576:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    f57a:	f240 43e2 	movw	r3, #1250	; 0x4e2
    f57e:	4353      	muls	r3, r2
		conn->llcp.conn_upd.win_offset_us =
    f580:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
    f584:	2202      	movs	r2, #2
    f586:	4631      	mov	r1, r6
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
    f588:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    f58c:	f7f1 f901 	bl	792 <memcpy>
    f590:	e027      	b.n	f5e2 <mayfly_sched_win_offset_select+0xea>
			if (win_offset_s != 0xffff) {
    f592:	454a      	cmp	r2, r9
    f594:	d004      	beq.n	f5a0 <mayfly_sched_win_offset_select+0xa8>
				if (win_offset_s ==
    f596:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
    f59a:	4291      	cmp	r1, r2
    f59c:	d024      	beq.n	f5e8 <mayfly_sched_win_offset_select+0xf0>
				has_offset_s = 1;
    f59e:	2501      	movs	r5, #1
    f5a0:	3301      	adds	r3, #1
    f5a2:	e7e1      	b.n	f568 <mayfly_sched_win_offset_select+0x70>
		conn->llcp_ack = conn->llcp_req;
    f5a4:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    f5a8:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    f5ac:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    f5b0:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
		_radio.conn_upd = NULL;
    f5b4:	4b15      	ldr	r3, [pc, #84]	; (f60c <mayfly_sched_win_offset_select+0x114>)
    f5b6:	2200      	movs	r2, #0
    f5b8:	f8c3 2790 	str.w	r2, [r3, #1936]	; 0x790
			((u8_t *)conn->llcp.conn_upd.pdu_win_offset -
    f5bc:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    f5c0:	f813 2c05 	ldrb.w	r2, [r3, #-5]
    f5c4:	f042 0203 	orr.w	r2, r2, #3
    f5c8:	f803 2c05 	strb.w	r2, [r3, #-5]
		pdu_ctrl_tx->len =
    f5cc:	2203      	movs	r2, #3
    f5ce:	f803 2c04 	strb.w	r2, [r3, #-4]
		pdu_ctrl_tx->llctrl.opcode =
    f5d2:	2211      	movs	r2, #17
    f5d4:	f803 2c02 	strb.w	r2, [r3, #-2]
		pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode =
    f5d8:	220f      	movs	r2, #15
    f5da:	f803 2c01 	strb.w	r2, [r3, #-1]
		pdu_ctrl_tx->llctrl.reject_ext_ind.error_code =
    f5de:	2220      	movs	r2, #32
    f5e0:	701a      	strb	r2, [r3, #0]
}
    f5e2:	b009      	add	sp, #36	; 0x24
    f5e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			win_offset_s * 1250;
    f5e8:	f240 43e2 	movw	r3, #1250	; 0x4e2
    f5ec:	4353      	muls	r3, r2
		conn->llcp.conn_upd.win_offset_us =
    f5ee:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
    f5f2:	2202      	movs	r2, #2
    f5f4:	f10d 010e 	add.w	r1, sp, #14
    f5f8:	e7c6      	b.n	f588 <mayfly_sched_win_offset_select+0x90>
    f5fa:	bf00      	nop
    f5fc:	f3af 8000 	nop.w
    f600:	1afd498d 	.word	0x1afd498d
    f604:	00000007 	.word	0x00000007
    f608:	09ce5400 	.word	0x09ce5400
    f60c:	20000bf0 	.word	0x20000bf0

0000f610 <sched_after_mstr_free_slot_get>:
{
    f610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f614:	b08b      	sub	sp, #44	; 0x2c
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    f616:	2400      	movs	r4, #0
	ticker_id = ticker_id_prev = 0xff;
    f618:	25ff      	movs	r5, #255	; 0xff
				  _radio.connection_count)) {
    f61a:	f8df 9140 	ldr.w	r9, [pc, #320]	; f75c <sched_after_mstr_free_slot_get+0x14c>
	ticker_id = ticker_id_prev = 0xff;
    f61e:	f88d 501f 	strb.w	r5, [sp, #31]
{
    f622:	4680      	mov	r8, r0
    f624:	4693      	mov	fp, r2
    f626:	461f      	mov	r7, r3
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(RADIO_TICKER_JITTER_US << 3);
    f628:	f101 0a04 	add.w	sl, r1, #4
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    f62c:	601c      	str	r4, [r3, #0]
    f62e:	9408      	str	r4, [sp, #32]
    f630:	4626      	mov	r6, r4
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    f632:	2302      	movs	r3, #2
    f634:	9309      	str	r3, [sp, #36]	; 0x24
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    f636:	ab09      	add	r3, sp, #36	; 0x24
    f638:	9302      	str	r3, [sp, #8]
    f63a:	4b41      	ldr	r3, [pc, #260]	; (f740 <sched_after_mstr_free_slot_get+0x130>)
    f63c:	9301      	str	r3, [sp, #4]
    f63e:	ab08      	add	r3, sp, #32
    f640:	9300      	str	r3, [sp, #0]
    f642:	f10d 021f 	add.w	r2, sp, #31
    f646:	465b      	mov	r3, fp
    f648:	4641      	mov	r1, r8
    f64a:	2000      	movs	r0, #0
    f64c:	f7fd f82e 	bl	c6ac <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    f650:	2802      	cmp	r0, #2
    f652:	d014      	beq.n	f67e <sched_after_mstr_free_slot_get+0x6e>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    f654:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f656:	b1b3      	cbz	r3, f686 <sched_after_mstr_free_slot_get+0x76>
    f658:	4b3a      	ldr	r3, [pc, #232]	; (f744 <sched_after_mstr_free_slot_get+0x134>)
    f65a:	9301      	str	r3, [sp, #4]
    f65c:	9300      	str	r3, [sp, #0]
    f65e:	4a3a      	ldr	r2, [pc, #232]	; (f748 <sched_after_mstr_free_slot_get+0x138>)
    f660:	4b3a      	ldr	r3, [pc, #232]	; (f74c <sched_after_mstr_free_slot_get+0x13c>)
    f662:	493b      	ldr	r1, [pc, #236]	; (f750 <sched_after_mstr_free_slot_get+0x140>)
    f664:	483b      	ldr	r0, [pc, #236]	; (f754 <sched_after_mstr_free_slot_get+0x144>)
    f666:	f7f2 fe1b 	bl	22a0 <printk>
    f66a:	4040      	eors	r0, r0
    f66c:	f380 8811 	msr	BASEPRI, r0
    f670:	f04f 0004 	mov.w	r0, #4
    f674:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    f676:	4641      	mov	r1, r8
    f678:	2000      	movs	r0, #0
    f67a:	f7fd f895 	bl	c7a8 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    f67e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f680:	2b02      	cmp	r3, #2
    f682:	d0f8      	beq.n	f676 <sched_after_mstr_free_slot_get+0x66>
    f684:	e7e6      	b.n	f654 <sched_after_mstr_free_slot_get+0x44>
		if (ticker_id == 0xff) {
    f686:	f89d 201f 	ldrb.w	r2, [sp, #31]
    f68a:	2aff      	cmp	r2, #255	; 0xff
    f68c:	d04e      	beq.n	f72c <sched_after_mstr_free_slot_get+0x11c>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    f68e:	2a06      	cmp	r2, #6
    f690:	d9cf      	bls.n	f632 <sched_after_mstr_free_slot_get+0x22>
				  _radio.connection_count)) {
    f692:	f899 3718 	ldrb.w	r3, [r9, #1816]	; 0x718
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    f696:	3307      	adds	r3, #7
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    f698:	429a      	cmp	r2, r3
    f69a:	daca      	bge.n	f632 <sched_after_mstr_free_slot_get+0x22>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    f69c:	3a07      	subs	r2, #7
    f69e:	b292      	uxth	r2, r2
    f6a0:	f44f 71aa 	mov.w	r1, #340	; 0x154
    f6a4:	f8d9 0710 	ldr.w	r0, [r9, #1808]	; 0x710
    f6a8:	f7fc f8d2 	bl	b850 <mem_get>
		if (conn && !conn->role) {
    f6ac:	2800      	cmp	r0, #0
    f6ae:	d0c0      	beq.n	f632 <sched_after_mstr_free_slot_get+0x22>
    f6b0:	f990 301d 	ldrsb.w	r3, [r0, #29]
    f6b4:	2b00      	cmp	r3, #0
    f6b6:	dbbc      	blt.n	f632 <sched_after_mstr_free_slot_get+0x22>
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    f6b8:	6803      	ldr	r3, [r0, #0]
			u32_t ticks_to_expire_normal = ticks_to_expire;
    f6ba:	9a08      	ldr	r2, [sp, #32]
    f6bc:	f8d0 e004 	ldr.w	lr, [r0, #4]
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    f6c0:	2b00      	cmp	r3, #0
    f6c2:	da12      	bge.n	f6ea <sched_after_mstr_free_slot_get+0xda>
    f6c4:	6881      	ldr	r1, [r0, #8]
				ticks_slot_abs_curr =
    f6c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    f6ca:	4571      	cmp	r1, lr
    f6cc:	bf2c      	ite	cs
    f6ce:	1852      	addcs	r2, r2, r1
    f6d0:	4472      	addcc	r2, lr
				ticks_to_expire_normal -=
    f6d2:	1ad2      	subs	r2, r2, r3
			ticks_slot_abs_curr +=
    f6d4:	68c1      	ldr	r1, [r0, #12]
			if ((ticker_id_prev != 0xFF) &&
    f6d6:	2dff      	cmp	r5, #255	; 0xff
			ticks_slot_abs_curr +=
    f6d8:	f101 0104 	add.w	r1, r1, #4
    f6dc:	440b      	add	r3, r1
			if ((ticker_id_prev != 0xFF) &&
    f6de:	d108      	bne.n	f6f2 <sched_after_mstr_free_slot_get+0xe2>
			ticker_id_prev = ticker_id;
    f6e0:	f89d 501f 	ldrb.w	r5, [sp, #31]
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    f6e4:	461c      	mov	r4, r3
			ticks_to_expire_prev = ticks_to_expire_normal;
    f6e6:	4616      	mov	r6, r2
    f6e8:	e7a3      	b.n	f632 <sched_after_mstr_free_slot_get+0x22>
				u32_t ticks_prepare_to_start =
    f6ea:	4573      	cmp	r3, lr
    f6ec:	bf38      	it	cc
    f6ee:	4673      	movcc	r3, lr
    f6f0:	e7f0      	b.n	f6d4 <sched_after_mstr_free_slot_get+0xc4>
			    (ticker_ticks_diff_get(ticks_to_expire_normal,
    f6f2:	4631      	mov	r1, r6
    f6f4:	4610      	mov	r0, r2
    f6f6:	9305      	str	r3, [sp, #20]
    f6f8:	9204      	str	r2, [sp, #16]
    f6fa:	f7fd f86d 	bl	c7d8 <ticker_ticks_diff_get>
			     (ticks_slot_abs_prev + ticks_slot_abs))) {
    f6fe:	eb04 010a 	add.w	r1, r4, sl
			if ((ticker_id_prev != 0xFF) &&
    f702:	4288      	cmp	r0, r1
    f704:	9a04      	ldr	r2, [sp, #16]
    f706:	9b05      	ldr	r3, [sp, #20]
    f708:	d9ea      	bls.n	f6e0 <sched_after_mstr_free_slot_get+0xd0>
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    f70a:	4813      	ldr	r0, [pc, #76]	; (f758 <sched_after_mstr_free_slot_get+0x148>)
    f70c:	4434      	add	r4, r6
    f70e:	fba4 0100 	umull	r0, r1, r4, r0
    f712:	2307      	movs	r3, #7
    f714:	fb03 1104 	mla	r1, r3, r4, r1
    f718:	a307      	add	r3, pc, #28	; (adr r3, f738 <sched_after_mstr_free_slot_get+0x128>)
    f71a:	e9d3 2300 	ldrd	r2, r3, [r3]
    f71e:	f7f0 fdbb 	bl	298 <__aeabi_uldivmod>
						    ticks_slot_abs_prev) +
    f722:	3080      	adds	r0, #128	; 0x80
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    f724:	6038      	str	r0, [r7, #0]
}
    f726:	b00b      	add	sp, #44	; 0x2c
    f728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (ticker_id_prev != 0xff) {
    f72c:	2dff      	cmp	r5, #255	; 0xff
    f72e:	d1ec      	bne.n	f70a <sched_after_mstr_free_slot_get+0xfa>
    f730:	e7f9      	b.n	f726 <sched_after_mstr_free_slot_get+0x116>
    f732:	bf00      	nop
    f734:	f3af 8000 	nop.w
    f738:	3b9aca00 	.word	0x3b9aca00
    f73c:	00000000 	.word	0x00000000
    f740:	0000e575 	.word	0x0000e575
    f744:	00023dbe 	.word	0x00023dbe
    f748:	00022d86 	.word	0x00022d86
    f74c:	00025bd9 	.word	0x00025bd9
    f750:	000272e8 	.word	0x000272e8
    f754:	00026a71 	.word	0x00026a71
    f758:	1afd498d 	.word	0x1afd498d
    f75c:	20000bf0 	.word	0x20000bf0

0000f760 <isr_adv_ci_adva_check>:
{
    f760:	b570      	push	{r4, r5, r6, lr}
	return (adv->tx_addr == ci->rx_addr) &&
    f762:	7804      	ldrb	r4, [r0, #0]
    f764:	780a      	ldrb	r2, [r1, #0]
    f766:	f3c4 1380 	ubfx	r3, r4, #6, #1
    f76a:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    f76e:	d119      	bne.n	f7a4 <isr_adv_ci_adva_check+0x44>
    f770:	f004 040f 	and.w	r4, r4, #15
    f774:	2c01      	cmp	r4, #1
    f776:	f101 0608 	add.w	r6, r1, #8
    f77a:	f100 0502 	add.w	r5, r0, #2
    f77e:	d008      	beq.n	f792 <isr_adv_ci_adva_check+0x32>
		 (!memcmp(adv->adv_ind.addr, ci->connect_ind.adv_addr,
    f780:	2206      	movs	r2, #6
    f782:	4631      	mov	r1, r6
    f784:	4628      	mov	r0, r5
    f786:	f7f0 ffd7 	bl	738 <memcmp>
			 BDADDR_SIZE)) ||
    f78a:	fab0 f080 	clz	r0, r0
    f78e:	0940      	lsrs	r0, r0, #5
    f790:	bd70      	pop	{r4, r5, r6, pc}
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
    f792:	2206      	movs	r2, #6
    f794:	4631      	mov	r1, r6
    f796:	4628      	mov	r0, r5
    f798:	f7f0 ffce 	bl	738 <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
    f79c:	2800      	cmp	r0, #0
    f79e:	d1ef      	bne.n	f780 <isr_adv_ci_adva_check+0x20>
	return (adv->tx_addr == ci->rx_addr) &&
    f7a0:	4620      	mov	r0, r4
    f7a2:	bd70      	pop	{r4, r5, r6, pc}
    f7a4:	2000      	movs	r0, #0
}
    f7a6:	bd70      	pop	{r4, r5, r6, pc}

0000f7a8 <packet_rx_enqueue>:
{
    f7a8:	b513      	push	{r0, r1, r4, lr}
	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
    f7aa:	4a1e      	ldr	r2, [pc, #120]	; (f824 <packet_rx_enqueue+0x7c>)
    f7ac:	f892 3749 	ldrb.w	r3, [r2, #1865]	; 0x749
    f7b0:	f892 174a 	ldrb.w	r1, [r2, #1866]	; 0x74a
    f7b4:	4299      	cmp	r1, r3
    f7b6:	d10e      	bne.n	f7d6 <packet_rx_enqueue+0x2e>
    f7b8:	4b1b      	ldr	r3, [pc, #108]	; (f828 <packet_rx_enqueue+0x80>)
    f7ba:	9301      	str	r3, [sp, #4]
    f7bc:	9300      	str	r3, [sp, #0]
    f7be:	4a1b      	ldr	r2, [pc, #108]	; (f82c <packet_rx_enqueue+0x84>)
    f7c0:	4b1b      	ldr	r3, [pc, #108]	; (f830 <packet_rx_enqueue+0x88>)
    f7c2:	491c      	ldr	r1, [pc, #112]	; (f834 <packet_rx_enqueue+0x8c>)
    f7c4:	481c      	ldr	r0, [pc, #112]	; (f838 <packet_rx_enqueue+0x90>)
	LL_ASSERT(link);
    f7c6:	f7f2 fd6b 	bl	22a0 <printk>
    f7ca:	4040      	eors	r0, r0
    f7cc:	f380 8811 	msr	BASEPRI, r0
    f7d0:	f04f 0004 	mov.w	r0, #4
    f7d4:	df02      	svc	2
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    f7d6:	f892 1749 	ldrb.w	r1, [r2, #1865]	; 0x749
    f7da:	f8d2 3744 	ldr.w	r3, [r2, #1860]	; 0x744
    f7de:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    f7e2:	f892 3780 	ldrb.w	r3, [r2, #1920]	; 0x780
	link = node_rx->hdr.onion.link;
    f7e6:	6808      	ldr	r0, [r1, #0]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    f7e8:	700b      	strb	r3, [r1, #0]
	last = _radio.packet_rx_last + 1;
    f7ea:	f892 3749 	ldrb.w	r3, [r2, #1865]	; 0x749
	if (last == _radio.packet_rx_count) {
    f7ee:	f892 4748 	ldrb.w	r4, [r2, #1864]	; 0x748
	last = _radio.packet_rx_last + 1;
    f7f2:	3301      	adds	r3, #1
    f7f4:	b2db      	uxtb	r3, r3
		last = 0;
    f7f6:	429c      	cmp	r4, r3
    f7f8:	bf08      	it	eq
    f7fa:	2300      	moveq	r3, #0
	_radio.packet_rx_last = last;
    f7fc:	f882 3749 	strb.w	r3, [r2, #1865]	; 0x749
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    f800:	f502 62eb 	add.w	r2, r2, #1880	; 0x758
    f804:	f7fc f849 	bl	b89a <memq_enqueue>
	LL_ASSERT(link);
    f808:	b938      	cbnz	r0, f81a <packet_rx_enqueue+0x72>
    f80a:	4b07      	ldr	r3, [pc, #28]	; (f828 <packet_rx_enqueue+0x80>)
    f80c:	9301      	str	r3, [sp, #4]
    f80e:	9300      	str	r3, [sp, #0]
    f810:	4a06      	ldr	r2, [pc, #24]	; (f82c <packet_rx_enqueue+0x84>)
    f812:	4b07      	ldr	r3, [pc, #28]	; (f830 <packet_rx_enqueue+0x88>)
    f814:	4907      	ldr	r1, [pc, #28]	; (f834 <packet_rx_enqueue+0x8c>)
    f816:	4809      	ldr	r0, [pc, #36]	; (f83c <packet_rx_enqueue+0x94>)
    f818:	e7d5      	b.n	f7c6 <packet_rx_enqueue+0x1e>
}
    f81a:	b002      	add	sp, #8
    f81c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
    f820:	f007 ba6c 	b.w	16cfc <radio_event_callback>
    f824:	20000bf0 	.word	0x20000bf0
    f828:	00023dbe 	.word	0x00023dbe
    f82c:	00022d86 	.word	0x00022d86
    f830:	00025e06 	.word	0x00025e06
    f834:	000272e8 	.word	0x000272e8
    f838:	0002672f 	.word	0x0002672f
    f83c:	00025f02 	.word	0x00025f02

0000f840 <isr_scan_tgta_check>:
{
    f840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f844:	4682      	mov	sl, r0
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    f846:	7808      	ldrb	r0, [r1, #0]
				 pdu->direct_ind.tgt_addr, rl_idx)) {
    f848:	f101 0808 	add.w	r8, r1, #8
{
    f84c:	460d      	mov	r5, r1
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    f84e:	09c0      	lsrs	r0, r0, #7
    f850:	4641      	mov	r1, r8
{
    f852:	4691      	mov	r9, r2
    f854:	461e      	mov	r6, r3
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    f856:	f008 fa01 	bl	17c5c <ctrl_rl_addr_resolve>
    f85a:	4604      	mov	r4, r0
    f85c:	b9d8      	cbnz	r0, f896 <isr_scan_tgta_check+0x56>
    f85e:	4f1c      	ldr	r7, [pc, #112]	; (f8d0 <isr_scan_tgta_check+0x90>)
	} else if (init && _radio.scanner.rpa_gen && ctrl_lrpa_get(rl_idx)) {
    f860:	f1ba 0f00 	cmp.w	sl, #0
    f864:	d10e      	bne.n	f884 <isr_scan_tgta_check+0x44>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    f866:	782b      	ldrb	r3, [r5, #0]
    f868:	f897 264d 	ldrb.w	r2, [r7, #1613]	; 0x64d
			BDADDR_SIZE) == 0))) ||
    f86c:	09db      	lsrs	r3, r3, #7
    f86e:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    f872:	d113      	bne.n	f89c <isr_scan_tgta_check+0x5c>
		(memcmp(&_radio.scanner.init_addr[0],
    f874:	2206      	movs	r2, #6
    f876:	4641      	mov	r1, r8
    f878:	4816      	ldr	r0, [pc, #88]	; (f8d4 <isr_scan_tgta_check+0x94>)
    f87a:	f7f0 ff5d 	bl	738 <memcmp>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    f87e:	b968      	cbnz	r0, f89c <isr_scan_tgta_check+0x5c>
			BDADDR_SIZE) == 0))) ||
    f880:	2001      	movs	r0, #1
    f882:	e012      	b.n	f8aa <isr_scan_tgta_check+0x6a>
	} else if (init && _radio.scanner.rpa_gen && ctrl_lrpa_get(rl_idx)) {
    f884:	f897 364e 	ldrb.w	r3, [r7, #1614]	; 0x64e
    f888:	07db      	lsls	r3, r3, #31
    f88a:	d5ec      	bpl.n	f866 <isr_scan_tgta_check+0x26>
    f88c:	4648      	mov	r0, r9
    f88e:	f007 ff37 	bl	17700 <ctrl_lrpa_get>
    f892:	2800      	cmp	r0, #0
    f894:	d0e7      	beq.n	f866 <isr_scan_tgta_check+0x26>
}
    f896:	4620      	mov	r0, r4
    f898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    f89c:	f897 064d 	ldrb.w	r0, [r7, #1613]	; 0x64d
    f8a0:	f3c0 1001 	ubfx	r0, r0, #4, #2
    f8a4:	f010 0002 	ands.w	r0, r0, #2
    f8a8:	d101      	bne.n	f8ae <isr_scan_tgta_check+0x6e>
			BDADDR_SIZE) == 0))) ||
    f8aa:	4604      	mov	r4, r0
    f8ac:	e7f3      	b.n	f896 <isr_scan_tgta_check+0x56>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    f8ae:	f995 3000 	ldrsb.w	r3, [r5]
    f8b2:	2b00      	cmp	r3, #0
    f8b4:	da09      	bge.n	f8ca <isr_scan_tgta_check+0x8a>
	    (pdu->rx_addr != 0) &&
    f8b6:	7b6b      	ldrb	r3, [r5, #13]
    f8b8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    f8bc:	2b40      	cmp	r3, #64	; 0x40
    f8be:	d104      	bne.n	f8ca <isr_scan_tgta_check+0x8a>
		if (dir_report) {
    f8c0:	2e00      	cmp	r6, #0
    f8c2:	d0dd      	beq.n	f880 <isr_scan_tgta_check+0x40>
			*dir_report = true;
    f8c4:	2001      	movs	r0, #1
    f8c6:	7030      	strb	r0, [r6, #0]
    f8c8:	e7ef      	b.n	f8aa <isr_scan_tgta_check+0x6a>
			BDADDR_SIZE) == 0))) ||
    f8ca:	2000      	movs	r0, #0
    f8cc:	e7ed      	b.n	f8aa <isr_scan_tgta_check+0x6a>
    f8ce:	bf00      	nop
    f8d0:	20000bf0 	.word	0x20000bf0
    f8d4:	20001240 	.word	0x20001240

0000f8d8 <isr_rx_scan_report>:
{
    f8d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    f8dc:	4681      	mov	r9, r0
	node_rx = packet_rx_reserve_get(3);
    f8de:	2003      	movs	r0, #3
{
    f8e0:	460f      	mov	r7, r1
    f8e2:	4616      	mov	r6, r2
	node_rx = packet_rx_reserve_get(3);
    f8e4:	f7fe fe86 	bl	e5f4 <packet_rx_reserve_get>
	if (node_rx == 0) {
    f8e8:	4604      	mov	r4, r0
    f8ea:	2800      	cmp	r0, #0
    f8ec:	d03e      	beq.n	f96c <isr_rx_scan_report+0x94>
	node_rx->hdr.handle = 0xffff;
    f8ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f8f2:	80c3      	strh	r3, [r0, #6]
	} else if (_radio.scanner.phy) {
    f8f4:	4b1e      	ldr	r3, [pc, #120]	; (f970 <isr_rx_scan_report+0x98>)
    f8f6:	f893 364d 	ldrb.w	r3, [r3, #1613]	; 0x64d
    f8fa:	075a      	lsls	r2, r3, #29
    f8fc:	d032      	beq.n	f964 <isr_rx_scan_report+0x8c>
		switch (_radio.scanner.phy) {
    f8fe:	f3c3 0302 	ubfx	r3, r3, #0, #3
    f902:	b2da      	uxtb	r2, r3
    f904:	2a01      	cmp	r2, #1
    f906:	d010      	beq.n	f92a <isr_rx_scan_report+0x52>
    f908:	2a04      	cmp	r2, #4
    f90a:	d00f      	beq.n	f92c <isr_rx_scan_report+0x54>
			LL_ASSERT(0);
    f90c:	4b19      	ldr	r3, [pc, #100]	; (f974 <isr_rx_scan_report+0x9c>)
    f90e:	9301      	str	r3, [sp, #4]
    f910:	9300      	str	r3, [sp, #0]
    f912:	4a19      	ldr	r2, [pc, #100]	; (f978 <isr_rx_scan_report+0xa0>)
    f914:	4b19      	ldr	r3, [pc, #100]	; (f97c <isr_rx_scan_report+0xa4>)
    f916:	491a      	ldr	r1, [pc, #104]	; (f980 <isr_rx_scan_report+0xa8>)
    f918:	481a      	ldr	r0, [pc, #104]	; (f984 <isr_rx_scan_report+0xac>)
    f91a:	f7f2 fcc1 	bl	22a0 <printk>
    f91e:	4040      	eors	r0, r0
    f920:	f380 8811 	msr	BASEPRI, r0
    f924:	f04f 0004 	mov.w	r0, #4
    f928:	df02      	svc	2
			node_rx->hdr.type = NODE_RX_TYPE_EXT_1M_REPORT;
    f92a:	2303      	movs	r3, #3
			     pdu_adv_rx->len] =
    f92c:	f894 8009 	ldrb.w	r8, [r4, #9]
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    f930:	7123      	strb	r3, [r4, #4]
	pdu_adv_rx = (void *)node_rx->pdu_data;
    f932:	f104 0508 	add.w	r5, r4, #8
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    f936:	f108 0802 	add.w	r8, r8, #2
			     pdu_adv_rx->len] =
    f93a:	f1b9 0f00 	cmp.w	r9, #0
    f93e:	d013      	beq.n	f968 <isr_rx_scan_report+0x90>
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;
    f940:	f009 f8ae 	bl	18aa0 <radio_rssi_get>
			     pdu_adv_rx->len] =
    f944:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    f948:	f805 0008 	strb.w	r0, [r5, r8]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    f94c:	7a63      	ldrb	r3, [r4, #9]
			     pdu_adv_rx->len + 1] = rl_idx;
    f94e:	442b      	add	r3, r5
    f950:	70df      	strb	r7, [r3, #3]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    f952:	7a63      	ldrb	r3, [r4, #9]
			     pdu_adv_rx->len + 2] = dir_report ? 1 : 0;
    f954:	441d      	add	r5, r3
    f956:	712e      	strb	r6, [r5, #4]
	packet_rx_enqueue();
    f958:	f7ff ff26 	bl	f7a8 <packet_rx_enqueue>
	return 0;
    f95c:	2000      	movs	r0, #0
}
    f95e:	b003      	add	sp, #12
    f960:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    f964:	2302      	movs	r3, #2
    f966:	e7e1      	b.n	f92c <isr_rx_scan_report+0x54>
			     pdu_adv_rx->len] =
    f968:	207f      	movs	r0, #127	; 0x7f
    f96a:	e7ed      	b.n	f948 <isr_rx_scan_report+0x70>
		return 1;
    f96c:	2001      	movs	r0, #1
    f96e:	e7f6      	b.n	f95e <isr_rx_scan_report+0x86>
    f970:	20000bf0 	.word	0x20000bf0
    f974:	00023dbe 	.word	0x00023dbe
    f978:	00022d86 	.word	0x00022d86
    f97c:	00025a0e 	.word	0x00025a0e
    f980:	000272e8 	.word	0x000272e8
    f984:	00023fb5 	.word	0x00023fb5

0000f988 <rx_fc_lock>:
	packet_rx_allocate(0xff);
}

static void rx_fc_lock(u16_t handle)
{
	if (_radio.fc_req == _radio.fc_ack) {
    f988:	4a0b      	ldr	r2, [pc, #44]	; (f9b8 <rx_fc_lock+0x30>)
    f98a:	f892 3788 	ldrb.w	r3, [r2, #1928]	; 0x788
    f98e:	f892 1789 	ldrb.w	r1, [r2, #1929]	; 0x789
    f992:	4299      	cmp	r1, r3
    f994:	d10e      	bne.n	f9b4 <rx_fc_lock+0x2c>
		u8_t req;

		_radio.fc_handle[_radio.fc_req] = handle;
    f996:	f892 3788 	ldrb.w	r3, [r2, #1928]	; 0x788
    f99a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    f99e:	f8a3 0782 	strh.w	r0, [r3, #1922]	; 0x782
		req = _radio.fc_req + 1;
    f9a2:	f892 3788 	ldrb.w	r3, [r2, #1928]	; 0x788
    f9a6:	3301      	adds	r3, #1
    f9a8:	b2db      	uxtb	r3, r3
		if (req == TRIPLE_BUFFER_SIZE) {
			req = 0;
    f9aa:	2b03      	cmp	r3, #3
    f9ac:	bf08      	it	eq
    f9ae:	2300      	moveq	r3, #0
		}
		_radio.fc_req = req;
    f9b0:	f882 3788 	strb.w	r3, [r2, #1928]	; 0x788
    f9b4:	4770      	bx	lr
    f9b6:	bf00      	nop
    f9b8:	20000bf0 	.word	0x20000bf0

0000f9bc <ticker_success_assert>:
{
    f9bc:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    f9be:	b170      	cbz	r0, f9de <ticker_success_assert+0x22>
    f9c0:	4b08      	ldr	r3, [pc, #32]	; (f9e4 <ticker_success_assert+0x28>)
    f9c2:	9301      	str	r3, [sp, #4]
    f9c4:	9300      	str	r3, [sp, #0]
    f9c6:	4a08      	ldr	r2, [pc, #32]	; (f9e8 <ticker_success_assert+0x2c>)
    f9c8:	4b08      	ldr	r3, [pc, #32]	; (f9ec <ticker_success_assert+0x30>)
    f9ca:	4909      	ldr	r1, [pc, #36]	; (f9f0 <ticker_success_assert+0x34>)
    f9cc:	4809      	ldr	r0, [pc, #36]	; (f9f4 <ticker_success_assert+0x38>)
    f9ce:	f7f2 fc67 	bl	22a0 <printk>
    f9d2:	4040      	eors	r0, r0
    f9d4:	f380 8811 	msr	BASEPRI, r0
    f9d8:	f04f 0004 	mov.w	r0, #4
    f9dc:	df02      	svc	2
}
    f9de:	b003      	add	sp, #12
    f9e0:	f85d fb04 	ldr.w	pc, [sp], #4
    f9e4:	00023dbe 	.word	0x00023dbe
    f9e8:	00022d86 	.word	0x00022d86
    f9ec:	00025ae9 	.word	0x00025ae9
    f9f0:	000272e8 	.word	0x000272e8
    f9f4:	00026bc5 	.word	0x00026bc5

0000f9f8 <ticker_stop_adv_assert>:
	if (status == TICKER_STATUS_FAILURE) {
    f9f8:	2801      	cmp	r0, #1
{
    f9fa:	b507      	push	{r0, r1, r2, lr}
    f9fc:	4b11      	ldr	r3, [pc, #68]	; (fa44 <ticker_stop_adv_assert+0x4c>)
	if (status == TICKER_STATUS_FAILURE) {
    f9fe:	d116      	bne.n	fa2e <ticker_stop_adv_assert+0x36>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_ADV) {
    fa00:	7c9a      	ldrb	r2, [r3, #18]
    fa02:	2a05      	cmp	r2, #5
    fa04:	d104      	bne.n	fa10 <ticker_stop_adv_assert+0x18>
			_radio.ticker_id_stop = 0;
    fa06:	2200      	movs	r2, #0
    fa08:	749a      	strb	r2, [r3, #18]
}
    fa0a:	b003      	add	sp, #12
    fa0c:	f85d fb04 	ldr.w	pc, [sp], #4
			LL_ASSERT(0);
    fa10:	4b0d      	ldr	r3, [pc, #52]	; (fa48 <ticker_stop_adv_assert+0x50>)
    fa12:	9301      	str	r3, [sp, #4]
    fa14:	9300      	str	r3, [sp, #0]
    fa16:	4a0d      	ldr	r2, [pc, #52]	; (fa4c <ticker_stop_adv_assert+0x54>)
    fa18:	4b0d      	ldr	r3, [pc, #52]	; (fa50 <ticker_stop_adv_assert+0x58>)
    fa1a:	490e      	ldr	r1, [pc, #56]	; (fa54 <ticker_stop_adv_assert+0x5c>)
    fa1c:	480e      	ldr	r0, [pc, #56]	; (fa58 <ticker_stop_adv_assert+0x60>)
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_ADV);
    fa1e:	f7f2 fc3f 	bl	22a0 <printk>
    fa22:	4040      	eors	r0, r0
    fa24:	f380 8811 	msr	BASEPRI, r0
    fa28:	f04f 0004 	mov.w	r0, #4
    fa2c:	df02      	svc	2
    fa2e:	7c1b      	ldrb	r3, [r3, #16]
    fa30:	2b05      	cmp	r3, #5
    fa32:	d1ea      	bne.n	fa0a <ticker_stop_adv_assert+0x12>
    fa34:	4b04      	ldr	r3, [pc, #16]	; (fa48 <ticker_stop_adv_assert+0x50>)
    fa36:	9301      	str	r3, [sp, #4]
    fa38:	9300      	str	r3, [sp, #0]
    fa3a:	4a04      	ldr	r2, [pc, #16]	; (fa4c <ticker_stop_adv_assert+0x54>)
    fa3c:	4b04      	ldr	r3, [pc, #16]	; (fa50 <ticker_stop_adv_assert+0x58>)
    fa3e:	4905      	ldr	r1, [pc, #20]	; (fa54 <ticker_stop_adv_assert+0x5c>)
    fa40:	4806      	ldr	r0, [pc, #24]	; (fa5c <ticker_stop_adv_assert+0x64>)
    fa42:	e7ec      	b.n	fa1e <ticker_stop_adv_assert+0x26>
    fa44:	20000bf0 	.word	0x20000bf0
    fa48:	00023dbe 	.word	0x00023dbe
    fa4c:	00022d86 	.word	0x00022d86
    fa50:	00025aff 	.word	0x00025aff
    fa54:	000272e8 	.word	0x000272e8
    fa58:	00023fb5 	.word	0x00023fb5
    fa5c:	00026b0b 	.word	0x00026b0b

0000fa60 <ticker_stop_scan_assert>:
	if (status == TICKER_STATUS_FAILURE) {
    fa60:	2801      	cmp	r0, #1
{
    fa62:	b507      	push	{r0, r1, r2, lr}
    fa64:	4b11      	ldr	r3, [pc, #68]	; (faac <ticker_stop_scan_assert+0x4c>)
	if (status == TICKER_STATUS_FAILURE) {
    fa66:	d116      	bne.n	fa96 <ticker_stop_scan_assert+0x36>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_SCAN) {
    fa68:	7c9a      	ldrb	r2, [r3, #18]
    fa6a:	2a06      	cmp	r2, #6
    fa6c:	d104      	bne.n	fa78 <ticker_stop_scan_assert+0x18>
			_radio.ticker_id_stop = 0;
    fa6e:	2200      	movs	r2, #0
    fa70:	749a      	strb	r2, [r3, #18]
}
    fa72:	b003      	add	sp, #12
    fa74:	f85d fb04 	ldr.w	pc, [sp], #4
			LL_ASSERT(0);
    fa78:	4b0d      	ldr	r3, [pc, #52]	; (fab0 <ticker_stop_scan_assert+0x50>)
    fa7a:	9301      	str	r3, [sp, #4]
    fa7c:	9300      	str	r3, [sp, #0]
    fa7e:	4a0d      	ldr	r2, [pc, #52]	; (fab4 <ticker_stop_scan_assert+0x54>)
    fa80:	4b0d      	ldr	r3, [pc, #52]	; (fab8 <ticker_stop_scan_assert+0x58>)
    fa82:	490e      	ldr	r1, [pc, #56]	; (fabc <ticker_stop_scan_assert+0x5c>)
    fa84:	480e      	ldr	r0, [pc, #56]	; (fac0 <ticker_stop_scan_assert+0x60>)
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_SCAN);
    fa86:	f7f2 fc0b 	bl	22a0 <printk>
    fa8a:	4040      	eors	r0, r0
    fa8c:	f380 8811 	msr	BASEPRI, r0
    fa90:	f04f 0004 	mov.w	r0, #4
    fa94:	df02      	svc	2
    fa96:	7c1b      	ldrb	r3, [r3, #16]
    fa98:	2b06      	cmp	r3, #6
    fa9a:	d1ea      	bne.n	fa72 <ticker_stop_scan_assert+0x12>
    fa9c:	4b04      	ldr	r3, [pc, #16]	; (fab0 <ticker_stop_scan_assert+0x50>)
    fa9e:	9301      	str	r3, [sp, #4]
    faa0:	9300      	str	r3, [sp, #0]
    faa2:	4a04      	ldr	r2, [pc, #16]	; (fab4 <ticker_stop_scan_assert+0x54>)
    faa4:	4b04      	ldr	r3, [pc, #16]	; (fab8 <ticker_stop_scan_assert+0x58>)
    faa6:	4905      	ldr	r1, [pc, #20]	; (fabc <ticker_stop_scan_assert+0x5c>)
    faa8:	4806      	ldr	r0, [pc, #24]	; (fac4 <ticker_stop_scan_assert+0x64>)
    faaa:	e7ec      	b.n	fa86 <ticker_stop_scan_assert+0x26>
    faac:	20000bf0 	.word	0x20000bf0
    fab0:	00023dbe 	.word	0x00023dbe
    fab4:	00022d86 	.word	0x00022d86
    fab8:	00025b16 	.word	0x00025b16
    fabc:	000272e8 	.word	0x000272e8
    fac0:	00023fb5 	.word	0x00023fb5
    fac4:	00026b86 	.word	0x00026b86

0000fac8 <ticker_update_adv_assert>:
{
    fac8:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    faca:	b190      	cbz	r0, faf2 <ticker_update_adv_assert+0x2a>
    facc:	4b0a      	ldr	r3, [pc, #40]	; (faf8 <ticker_update_adv_assert+0x30>)
    face:	7c9b      	ldrb	r3, [r3, #18]
    fad0:	2b05      	cmp	r3, #5
    fad2:	d00e      	beq.n	faf2 <ticker_update_adv_assert+0x2a>
    fad4:	4b09      	ldr	r3, [pc, #36]	; (fafc <ticker_update_adv_assert+0x34>)
    fad6:	9301      	str	r3, [sp, #4]
    fad8:	9300      	str	r3, [sp, #0]
    fada:	4a09      	ldr	r2, [pc, #36]	; (fb00 <ticker_update_adv_assert+0x38>)
    fadc:	4b09      	ldr	r3, [pc, #36]	; (fb04 <ticker_update_adv_assert+0x3c>)
    fade:	490a      	ldr	r1, [pc, #40]	; (fb08 <ticker_update_adv_assert+0x40>)
    fae0:	480a      	ldr	r0, [pc, #40]	; (fb0c <ticker_update_adv_assert+0x44>)
    fae2:	f7f2 fbdd 	bl	22a0 <printk>
    fae6:	4040      	eors	r0, r0
    fae8:	f380 8811 	msr	BASEPRI, r0
    faec:	f04f 0004 	mov.w	r0, #4
    faf0:	df02      	svc	2
}
    faf2:	b003      	add	sp, #12
    faf4:	f85d fb04 	ldr.w	pc, [sp], #4
    faf8:	20000bf0 	.word	0x20000bf0
    fafc:	00023dbe 	.word	0x00023dbe
    fb00:	00022d86 	.word	0x00022d86
    fb04:	00025b2e 	.word	0x00025b2e
    fb08:	000272e8 	.word	0x000272e8
    fb0c:	00026bf2 	.word	0x00026bf2

0000fb10 <ticker_update_slave_assert>:
{
    fb10:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    fb12:	b198      	cbz	r0, fb3c <ticker_update_slave_assert+0x2c>
    fb14:	4b0b      	ldr	r3, [pc, #44]	; (fb44 <ticker_update_slave_assert+0x34>)
    fb16:	7c9b      	ldrb	r3, [r3, #18]
    fb18:	b2c9      	uxtb	r1, r1
    fb1a:	4299      	cmp	r1, r3
    fb1c:	d00e      	beq.n	fb3c <ticker_update_slave_assert+0x2c>
    fb1e:	4b0a      	ldr	r3, [pc, #40]	; (fb48 <ticker_update_slave_assert+0x38>)
    fb20:	9301      	str	r3, [sp, #4]
    fb22:	9300      	str	r3, [sp, #0]
    fb24:	4a09      	ldr	r2, [pc, #36]	; (fb4c <ticker_update_slave_assert+0x3c>)
    fb26:	4b0a      	ldr	r3, [pc, #40]	; (fb50 <ticker_update_slave_assert+0x40>)
    fb28:	490a      	ldr	r1, [pc, #40]	; (fb54 <ticker_update_slave_assert+0x44>)
    fb2a:	480b      	ldr	r0, [pc, #44]	; (fb58 <ticker_update_slave_assert+0x48>)
    fb2c:	f7f2 fbb8 	bl	22a0 <printk>
    fb30:	4040      	eors	r0, r0
    fb32:	f380 8811 	msr	BASEPRI, r0
    fb36:	f04f 0004 	mov.w	r0, #4
    fb3a:	df02      	svc	2
}
    fb3c:	b003      	add	sp, #12
    fb3e:	f85d fb04 	ldr.w	pc, [sp], #4
    fb42:	bf00      	nop
    fb44:	20000bf0 	.word	0x20000bf0
    fb48:	00023dbe 	.word	0x00023dbe
    fb4c:	00022d86 	.word	0x00022d86
    fb50:	00025b47 	.word	0x00025b47
    fb54:	000272e8 	.word	0x000272e8
    fb58:	00026c41 	.word	0x00026c41

0000fb5c <ticker_op_latency_cancelled>:
{
	mem_release(node_tx, &_radio.pkt_tx_data_free);
}

static void ticker_op_latency_cancelled(u32_t ticker_status, void *params)
{
    fb5c:	b507      	push	{r0, r1, r2, lr}
	struct connection *conn = params;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
    fb5e:	b170      	cbz	r0, fb7e <ticker_op_latency_cancelled+0x22>
    fb60:	4b0b      	ldr	r3, [pc, #44]	; (fb90 <ticker_op_latency_cancelled+0x34>)
    fb62:	9301      	str	r3, [sp, #4]
    fb64:	9300      	str	r3, [sp, #0]
    fb66:	4a0b      	ldr	r2, [pc, #44]	; (fb94 <ticker_op_latency_cancelled+0x38>)
    fb68:	4b0b      	ldr	r3, [pc, #44]	; (fb98 <ticker_op_latency_cancelled+0x3c>)
    fb6a:	490c      	ldr	r1, [pc, #48]	; (fb9c <ticker_op_latency_cancelled+0x40>)
    fb6c:	480c      	ldr	r0, [pc, #48]	; (fba0 <ticker_op_latency_cancelled+0x44>)
    fb6e:	f7f2 fb97 	bl	22a0 <printk>
    fb72:	4040      	eors	r0, r0
    fb74:	f380 8811 	msr	BASEPRI, r0
    fb78:	f04f 0004 	mov.w	r0, #4
    fb7c:	df02      	svc	2

	conn->slave.latency_cancel = 0;
    fb7e:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
    fb82:	f360 0341 	bfi	r3, r0, #1, #1
    fb86:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
}
    fb8a:	b003      	add	sp, #12
    fb8c:	f85d fb04 	ldr.w	pc, [sp], #4
    fb90:	00023dbe 	.word	0x00023dbe
    fb94:	00022d86 	.word	0x00022d86
    fb98:	00025ed4 	.word	0x00025ed4
    fb9c:	000272e8 	.word	0x000272e8
    fba0:	00026ad7 	.word	0x00026ad7

0000fba4 <ticker_job_disable>:
	if (_radio.state != STATE_NONE) {
    fba4:	4b04      	ldr	r3, [pc, #16]	; (fbb8 <ticker_job_disable+0x14>)
    fba6:	7d1b      	ldrb	r3, [r3, #20]
    fba8:	b123      	cbz	r3, fbb4 <ticker_job_disable+0x10>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    fbaa:	2101      	movs	r1, #1
    fbac:	2200      	movs	r2, #0
    fbae:	4608      	mov	r0, r1
    fbb0:	f7fb bebc 	b.w	b92c <mayfly_enable>
    fbb4:	4770      	bx	lr
    fbb6:	bf00      	nop
    fbb8:	20000bf0 	.word	0x20000bf0

0000fbbc <hdr_conn_get>:
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    fbbc:	2806      	cmp	r0, #6
{
    fbbe:	b510      	push	{r4, lr}
    fbc0:	460c      	mov	r4, r1
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    fbc2:	d90a      	bls.n	fbda <hdr_conn_get+0x1e>
		*conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    fbc4:	4b09      	ldr	r3, [pc, #36]	; (fbec <hdr_conn_get+0x30>)
    fbc6:	1fc2      	subs	r2, r0, #7
    fbc8:	b292      	uxth	r2, r2
    fbca:	f44f 71aa 	mov.w	r1, #340	; 0x154
    fbce:	f8d3 0710 	ldr.w	r0, [r3, #1808]	; 0x710
    fbd2:	f7fb fe3d 	bl	b850 <mem_get>
    fbd6:	6020      	str	r0, [r4, #0]
    fbd8:	bd10      	pop	{r4, pc}
	} else if (ticker_id == RADIO_TICKER_ID_ADV) {
    fbda:	2805      	cmp	r0, #5
    fbdc:	d004      	beq.n	fbe8 <hdr_conn_get+0x2c>
	} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
    fbde:	2806      	cmp	r0, #6
	return NULL;
    fbe0:	4803      	ldr	r0, [pc, #12]	; (fbf0 <hdr_conn_get+0x34>)
    fbe2:	bf18      	it	ne
    fbe4:	2000      	movne	r0, #0
    fbe6:	bd10      	pop	{r4, pc}
		return &_radio.advertiser.hdr;
    fbe8:	4802      	ldr	r0, [pc, #8]	; (fbf4 <hdr_conn_get+0x38>)
}
    fbea:	bd10      	pop	{r4, pc}
    fbec:	20000bf0 	.word	0x20000bf0
    fbf0:	2000122c 	.word	0x2000122c
    fbf4:	20000c08 	.word	0x20000c08

0000fbf8 <event_stop.part.11>:
static void event_stop(u32_t ticks_at_expire, u32_t remainder,
    fbf8:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(!retval);
    fbfa:	4b07      	ldr	r3, [pc, #28]	; (fc18 <event_stop.part.11+0x20>)
    fbfc:	9301      	str	r3, [sp, #4]
    fbfe:	9300      	str	r3, [sp, #0]
    fc00:	4a06      	ldr	r2, [pc, #24]	; (fc1c <event_stop.part.11+0x24>)
    fc02:	4b07      	ldr	r3, [pc, #28]	; (fc20 <event_stop.part.11+0x28>)
    fc04:	4907      	ldr	r1, [pc, #28]	; (fc24 <event_stop.part.11+0x2c>)
    fc06:	4808      	ldr	r0, [pc, #32]	; (fc28 <event_stop.part.11+0x30>)
    fc08:	f7f2 fb4a 	bl	22a0 <printk>
    fc0c:	4040      	eors	r0, r0
    fc0e:	f380 8811 	msr	BASEPRI, r0
    fc12:	f04f 0004 	mov.w	r0, #4
    fc16:	df02      	svc	2
    fc18:	00023dbe 	.word	0x00023dbe
    fc1c:	00022d86 	.word	0x00022d86
    fc20:	00025c46 	.word	0x00025c46
    fc24:	000272e8 	.word	0x000272e8
    fc28:	000266b2 	.word	0x000266b2

0000fc2c <event_stop>:
	s_mfy_radio_stop.param = context;
    fc2c:	4a06      	ldr	r2, [pc, #24]	; (fc48 <event_stop+0x1c>)
{
    fc2e:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
    fc30:	6093      	str	r3, [r2, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    fc32:	4613      	mov	r3, r2
    fc34:	2200      	movs	r2, #0
    fc36:	4611      	mov	r1, r2
    fc38:	4610      	mov	r0, r2
    fc3a:	f7fb fe9f 	bl	b97c <mayfly_enqueue>
	LL_ASSERT(!retval);
    fc3e:	b108      	cbz	r0, fc44 <event_stop+0x18>
    fc40:	f7ff ffda 	bl	fbf8 <event_stop.part.11>
    fc44:	bd08      	pop	{r3, pc}
    fc46:	bf00      	nop
    fc48:	2000a018 	.word	0x2000a018

0000fc4c <event_active>:
{
    fc4c:	b507      	push	{r0, r1, r2, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    fc4e:	2200      	movs	r2, #0
    fc50:	4b0b      	ldr	r3, [pc, #44]	; (fc80 <event_active+0x34>)
    fc52:	4611      	mov	r1, r2
    fc54:	4610      	mov	r0, r2
    fc56:	f7fb fe91 	bl	b97c <mayfly_enqueue>
	LL_ASSERT(!retval);
    fc5a:	b170      	cbz	r0, fc7a <event_active+0x2e>
    fc5c:	4b09      	ldr	r3, [pc, #36]	; (fc84 <event_active+0x38>)
    fc5e:	9301      	str	r3, [sp, #4]
    fc60:	9300      	str	r3, [sp, #0]
    fc62:	4a09      	ldr	r2, [pc, #36]	; (fc88 <event_active+0x3c>)
    fc64:	4b09      	ldr	r3, [pc, #36]	; (fc8c <event_active+0x40>)
    fc66:	490a      	ldr	r1, [pc, #40]	; (fc90 <event_active+0x44>)
    fc68:	480a      	ldr	r0, [pc, #40]	; (fc94 <event_active+0x48>)
    fc6a:	f7f2 fb19 	bl	22a0 <printk>
    fc6e:	4040      	eors	r0, r0
    fc70:	f380 8811 	msr	BASEPRI, r0
    fc74:	f04f 0004 	mov.w	r0, #4
    fc78:	df02      	svc	2
}
    fc7a:	b003      	add	sp, #12
    fc7c:	f85d fb04 	ldr.w	pc, [sp], #4
    fc80:	20009fd8 	.word	0x20009fd8
    fc84:	00023dbe 	.word	0x00023dbe
    fc88:	00022d86 	.word	0x00022d86
    fc8c:	00025b76 	.word	0x00025b76
    fc90:	000272e8 	.word	0x000272e8
    fc94:	000266b2 	.word	0x000266b2

0000fc98 <event_xtal>:
{
    fc98:	b507      	push	{r0, r1, r2, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    fc9a:	2200      	movs	r2, #0
    fc9c:	4b0b      	ldr	r3, [pc, #44]	; (fccc <event_xtal+0x34>)
    fc9e:	4611      	mov	r1, r2
    fca0:	4610      	mov	r0, r2
    fca2:	f7fb fe6b 	bl	b97c <mayfly_enqueue>
	LL_ASSERT(!retval);
    fca6:	b170      	cbz	r0, fcc6 <event_xtal+0x2e>
    fca8:	4b09      	ldr	r3, [pc, #36]	; (fcd0 <event_xtal+0x38>)
    fcaa:	9301      	str	r3, [sp, #4]
    fcac:	9300      	str	r3, [sp, #0]
    fcae:	4a09      	ldr	r2, [pc, #36]	; (fcd4 <event_xtal+0x3c>)
    fcb0:	4b09      	ldr	r3, [pc, #36]	; (fcd8 <event_xtal+0x40>)
    fcb2:	490a      	ldr	r1, [pc, #40]	; (fcdc <event_xtal+0x44>)
    fcb4:	480a      	ldr	r0, [pc, #40]	; (fce0 <event_xtal+0x48>)
    fcb6:	f7f2 faf3 	bl	22a0 <printk>
    fcba:	4040      	eors	r0, r0
    fcbc:	f380 8811 	msr	BASEPRI, r0
    fcc0:	f04f 0004 	mov.w	r0, #4
    fcc4:	df02      	svc	2
}
    fcc6:	b003      	add	sp, #12
    fcc8:	f85d fb04 	ldr.w	pc, [sp], #4
    fccc:	2000a078 	.word	0x2000a078
    fcd0:	00023dbe 	.word	0x00023dbe
    fcd4:	00022d86 	.word	0x00022d86
    fcd8:	00025b92 	.word	0x00025b92
    fcdc:	000272e8 	.word	0x000272e8
    fce0:	000266b2 	.word	0x000266b2

0000fce4 <mayfly_radio_active>:
{
    fce4:	b507      	push	{r0, r1, r2, lr}
    fce6:	4a12      	ldr	r2, [pc, #72]	; (fd30 <mayfly_radio_active+0x4c>)
		if (s_active++) {
    fce8:	7813      	ldrb	r3, [r2, #0]
	if ((u32_t)params) {
    fcea:	b140      	cbz	r0, fcfe <mayfly_radio_active+0x1a>
		if (s_active++) {
    fcec:	1c59      	adds	r1, r3, #1
    fcee:	7011      	strb	r1, [r2, #0]
    fcf0:	b9d3      	cbnz	r3, fd28 <mayfly_radio_active+0x44>
		radio_active_callback(1);
    fcf2:	2001      	movs	r0, #1
}
    fcf4:	b003      	add	sp, #12
    fcf6:	f85d eb04 	ldr.w	lr, [sp], #4
		radio_active_callback(0);
    fcfa:	f006 bffd 	b.w	16cf8 <radio_active_callback>
		LL_ASSERT(s_active);
    fcfe:	b973      	cbnz	r3, fd1e <mayfly_radio_active+0x3a>
    fd00:	4b0c      	ldr	r3, [pc, #48]	; (fd34 <mayfly_radio_active+0x50>)
    fd02:	9301      	str	r3, [sp, #4]
    fd04:	9300      	str	r3, [sp, #0]
    fd06:	4a0c      	ldr	r2, [pc, #48]	; (fd38 <mayfly_radio_active+0x54>)
    fd08:	4b0c      	ldr	r3, [pc, #48]	; (fd3c <mayfly_radio_active+0x58>)
    fd0a:	490d      	ldr	r1, [pc, #52]	; (fd40 <mayfly_radio_active+0x5c>)
    fd0c:	480d      	ldr	r0, [pc, #52]	; (fd44 <mayfly_radio_active+0x60>)
    fd0e:	f7f2 fac7 	bl	22a0 <printk>
    fd12:	4040      	eors	r0, r0
    fd14:	f380 8811 	msr	BASEPRI, r0
    fd18:	f04f 0004 	mov.w	r0, #4
    fd1c:	df02      	svc	2
		if (--s_active) {
    fd1e:	3b01      	subs	r3, #1
    fd20:	b2db      	uxtb	r3, r3
    fd22:	7013      	strb	r3, [r2, #0]
    fd24:	2b00      	cmp	r3, #0
    fd26:	d0e5      	beq.n	fcf4 <mayfly_radio_active+0x10>
}
    fd28:	b003      	add	sp, #12
    fd2a:	f85d fb04 	ldr.w	pc, [sp], #4
    fd2e:	bf00      	nop
    fd30:	200013d1 	.word	0x200013d1
    fd34:	00023dbe 	.word	0x00023dbe
    fd38:	00022d86 	.word	0x00022d86
    fd3c:	00025b62 	.word	0x00025b62
    fd40:	000272e8 	.word	0x000272e8
    fd44:	00026607 	.word	0x00026607

0000fd48 <mayfly_radio_inactive>:
	mayfly_radio_active(0);
    fd48:	2000      	movs	r0, #0
    fd4a:	f7ff bfcb 	b.w	fce4 <mayfly_radio_active>
	...

0000fd50 <mayfly_radio_stop>:
{
    fd50:	b507      	push	{r0, r1, r2, lr}
	enum state state = (enum state)((u32_t)params & 0xff);
    fd52:	b2c0      	uxtb	r0, r0
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
    fd54:	1f03      	subs	r3, r0, #4
    fd56:	2b01      	cmp	r3, #1
    fd58:	d90e      	bls.n	fd78 <mayfly_radio_stop+0x28>
    fd5a:	4b11      	ldr	r3, [pc, #68]	; (fda0 <mayfly_radio_stop+0x50>)
    fd5c:	9301      	str	r3, [sp, #4]
    fd5e:	9300      	str	r3, [sp, #0]
    fd60:	4a10      	ldr	r2, [pc, #64]	; (fda4 <mayfly_radio_stop+0x54>)
    fd62:	4b11      	ldr	r3, [pc, #68]	; (fda8 <mayfly_radio_stop+0x58>)
    fd64:	4911      	ldr	r1, [pc, #68]	; (fdac <mayfly_radio_stop+0x5c>)
    fd66:	4812      	ldr	r0, [pc, #72]	; (fdb0 <mayfly_radio_stop+0x60>)
    fd68:	f7f2 fa9a 	bl	22a0 <printk>
    fd6c:	4040      	eors	r0, r0
    fd6e:	f380 8811 	msr	BASEPRI, r0
    fd72:	f04f 0004 	mov.w	r0, #4
    fd76:	df02      	svc	2
	radio_used = ((_radio.state != STATE_NONE) &&
    fd78:	4a0e      	ldr	r2, [pc, #56]	; (fdb4 <mayfly_radio_stop+0x64>)
    fd7a:	7d13      	ldrb	r3, [r2, #20]
		      (_radio.state != STATE_STOP) &&
    fd7c:	b143      	cbz	r3, fd90 <mayfly_radio_stop+0x40>
	radio_used = ((_radio.state != STATE_NONE) &&
    fd7e:	3b04      	subs	r3, #4
    fd80:	2b01      	cmp	r3, #1
    fd82:	d905      	bls.n	fd90 <mayfly_radio_stop+0x40>
			_radio.state = state;
    fd84:	7510      	strb	r0, [r2, #20]
}
    fd86:	b003      	add	sp, #12
    fd88:	f85d eb04 	ldr.w	lr, [sp], #4
		radio_disable();
    fd8c:	f008 be00 	b.w	18990 <radio_disable>
	if (radio_used || !radio_is_idle()) {
    fd90:	f008 fe30 	bl	189f4 <radio_is_idle>
    fd94:	2800      	cmp	r0, #0
    fd96:	d0f6      	beq.n	fd86 <mayfly_radio_stop+0x36>
}
    fd98:	b003      	add	sp, #12
    fd9a:	f85d fb04 	ldr.w	pc, [sp], #4
    fd9e:	bf00      	nop
    fda0:	00023dbe 	.word	0x00023dbe
    fda4:	00022d86 	.word	0x00022d86
    fda8:	00025c34 	.word	0x00025c34
    fdac:	000272e8 	.word	0x000272e8
    fdb0:	00026631 	.word	0x00026631
    fdb4:	20000bf0 	.word	0x20000bf0

0000fdb8 <pdu_node_tx_release>:
{
    fdb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	last = _radio.packet_release_last + 1;
    fdba:	4a17      	ldr	r2, [pc, #92]	; (fe18 <pdu_node_tx_release+0x60>)
    fdbc:	f892 3780 	ldrb.w	r3, [r2, #1920]	; 0x780
	if (last == _radio.packet_tx_count) {
    fdc0:	f892 477c 	ldrb.w	r4, [r2, #1916]	; 0x77c
	last = _radio.packet_release_last + 1;
    fdc4:	3301      	adds	r3, #1
    fdc6:	b2db      	uxtb	r3, r3
		last = 0;
    fdc8:	429c      	cmp	r4, r3
    fdca:	bf08      	it	eq
    fdcc:	2300      	moveq	r3, #0
	LL_ASSERT(last != _radio.packet_release_first);
    fdce:	f892 477f 	ldrb.w	r4, [r2, #1919]	; 0x77f
    fdd2:	429c      	cmp	r4, r3
    fdd4:	d10e      	bne.n	fdf4 <pdu_node_tx_release+0x3c>
    fdd6:	4b11      	ldr	r3, [pc, #68]	; (fe1c <pdu_node_tx_release+0x64>)
    fdd8:	9301      	str	r3, [sp, #4]
    fdda:	9300      	str	r3, [sp, #0]
    fddc:	4a10      	ldr	r2, [pc, #64]	; (fe20 <pdu_node_tx_release+0x68>)
    fdde:	4b11      	ldr	r3, [pc, #68]	; (fe24 <pdu_node_tx_release+0x6c>)
    fde0:	4911      	ldr	r1, [pc, #68]	; (fe28 <pdu_node_tx_release+0x70>)
    fde2:	4812      	ldr	r0, [pc, #72]	; (fe2c <pdu_node_tx_release+0x74>)
    fde4:	f7f2 fa5c 	bl	22a0 <printk>
    fde8:	4040      	eors	r0, r0
    fdea:	f380 8811 	msr	BASEPRI, r0
    fdee:	f04f 0004 	mov.w	r0, #4
    fdf2:	df02      	svc	2
	_radio.pkt_release[_radio.packet_release_last].handle = handle;
    fdf4:	f892 5780 	ldrb.w	r5, [r2, #1920]	; 0x780
    fdf8:	f8d2 4778 	ldr.w	r4, [r2, #1912]	; 0x778
    fdfc:	f824 0035 	strh.w	r0, [r4, r5, lsl #3]
	_radio.pkt_release[_radio.packet_release_last].node_tx = node_tx;
    fe00:	f892 0780 	ldrb.w	r0, [r2, #1920]	; 0x780
    fe04:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
    fe08:	6061      	str	r1, [r4, #4]
	_radio.packet_release_last = last;
    fe0a:	f882 3780 	strb.w	r3, [r2, #1920]	; 0x780
}
    fe0e:	b003      	add	sp, #12
    fe10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	radio_event_callback();
    fe14:	f006 bf72 	b.w	16cfc <radio_event_callback>
    fe18:	20000bf0 	.word	0x20000bf0
    fe1c:	00023dbe 	.word	0x00023dbe
    fe20:	00022d86 	.word	0x00022d86
    fe24:	00025e18 	.word	0x00025e18
    fe28:	000272e8 	.word	0x000272e8
    fe2c:	00026782 	.word	0x00026782

0000fe30 <packet_tx_enqueue>:
{
    fe30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    fe34:	4c24      	ldr	r4, [pc, #144]	; (fec8 <packet_tx_enqueue+0x98>)
{
    fe36:	4606      	mov	r6, r0
		node_tx_new->next = NULL;
    fe38:	2700      	movs	r7, #0
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    fe3a:	b12e      	cbz	r6, fe48 <packet_tx_enqueue+0x18>
    fe3c:	f894 377d 	ldrb.w	r3, [r4, #1917]	; 0x77d
    fe40:	f894 277e 	ldrb.w	r2, [r4, #1918]	; 0x77e
    fe44:	429a      	cmp	r2, r3
    fe46:	d101      	bne.n	fe4c <packet_tx_enqueue+0x1c>
    fe48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    fe4c:	f894 877d 	ldrb.w	r8, [r4, #1917]	; 0x77d
    fe50:	f8d4 9774 	ldr.w	r9, [r4, #1908]	; 0x774
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    fe54:	f8d4 0710 	ldr.w	r0, [r4, #1808]	; 0x710
    fe58:	f839 2038 	ldrh.w	r2, [r9, r8, lsl #3]
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    fe5c:	eb09 03c8 	add.w	r3, r9, r8, lsl #3
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    fe60:	f44f 71aa 	mov.w	r1, #340	; 0x154
		node_tx_new = pdu_data_q_tx->node_tx;
    fe64:	685d      	ldr	r5, [r3, #4]
		node_tx_new->next = NULL;
    fe66:	602f      	str	r7, [r5, #0]
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    fe68:	f7fb fcf2 	bl	b850 <mem_get>
    fe6c:	4603      	mov	r3, r0
		if (conn->handle == pdu_data_q_tx->handle) {
    fe6e:	f839 0038 	ldrh.w	r0, [r9, r8, lsl #3]
    fe72:	8c1a      	ldrh	r2, [r3, #32]
    fe74:	4282      	cmp	r2, r0
    fe76:	d11f      	bne.n	feb8 <packet_tx_enqueue+0x88>
			if (conn->pkt_tx_data == 0) {
    fe78:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    fe7c:	b942      	cbnz	r2, fe90 <packet_tx_enqueue+0x60>
				if (conn->pkt_tx_head == 0) {
    fe7e:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
				conn->pkt_tx_data = node_tx_new;
    fe82:	f8c3 5148 	str.w	r5, [r3, #328]	; 0x148
				if (conn->pkt_tx_head == 0) {
    fe86:	b91a      	cbnz	r2, fe90 <packet_tx_enqueue+0x60>
					conn->pkt_tx_head = node_tx_new;
    fe88:	f8c3 513c 	str.w	r5, [r3, #316]	; 0x13c
					conn->pkt_tx_last = NULL;
    fe8c:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
			if (conn->pkt_tx_last) {
    fe90:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
    fe94:	b102      	cbz	r2, fe98 <packet_tx_enqueue+0x68>
				conn->pkt_tx_last->next = node_tx_new;
    fe96:	6015      	str	r5, [r2, #0]
			conn->pkt_tx_last = node_tx_new;
    fe98:	f8c3 514c 	str.w	r5, [r3, #332]	; 0x14c
		first = _radio.packet_tx_first + 1;
    fe9c:	f894 377d 	ldrb.w	r3, [r4, #1917]	; 0x77d
		if (first == _radio.packet_tx_count) {
    fea0:	f894 277c 	ldrb.w	r2, [r4, #1916]	; 0x77c
		first = _radio.packet_tx_first + 1;
    fea4:	3301      	adds	r3, #1
    fea6:	b2db      	uxtb	r3, r3
			first = 0;
    fea8:	429a      	cmp	r2, r3
    feaa:	bf08      	it	eq
    feac:	2300      	moveq	r3, #0
    feae:	3e01      	subs	r6, #1
		_radio.packet_tx_first = first;
    feb0:	f884 377d 	strb.w	r3, [r4, #1917]	; 0x77d
    feb4:	b2f6      	uxtb	r6, r6
    feb6:	e7c0      	b.n	fe3a <packet_tx_enqueue+0xa>
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    feb8:	792b      	ldrb	r3, [r5, #4]
    feba:	f367 0301 	bfi	r3, r7, #0, #2
    febe:	712b      	strb	r3, [r5, #4]
			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
    fec0:	4629      	mov	r1, r5
    fec2:	f7ff ff79 	bl	fdb8 <pdu_node_tx_release>
    fec6:	e7e9      	b.n	fe9c <packet_tx_enqueue+0x6c>
    fec8:	20000bf0 	.word	0x20000bf0

0000fecc <connection_release>:
{
    fecc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    fece:	2201      	movs	r2, #1
{
    fed0:	4604      	mov	r4, r0
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    fed2:	4611      	mov	r1, r2
    fed4:	2000      	movs	r0, #0
    fed6:	f7fb fd29 	bl	b92c <mayfly_enable>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    feda:	f894 2020 	ldrb.w	r2, [r4, #32]
	ticker_status =
    fede:	2100      	movs	r1, #0
    fee0:	f242 733a 	movw	r3, #10042	; 0x273a
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    fee4:	3207      	adds	r2, #7
	ticker_status =
    fee6:	9300      	str	r3, [sp, #0]
    fee8:	4608      	mov	r0, r1
    feea:	4b3e      	ldr	r3, [pc, #248]	; (ffe4 <connection_release+0x118>)
    feec:	b2d2      	uxtb	r2, r2
    feee:	f7fc fba1 	bl	c634 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    fef2:	f030 0102 	bics.w	r1, r0, #2
    fef6:	d00e      	beq.n	ff16 <connection_release+0x4a>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    fef8:	4b3b      	ldr	r3, [pc, #236]	; (ffe8 <connection_release+0x11c>)
    fefa:	9301      	str	r3, [sp, #4]
    fefc:	9300      	str	r3, [sp, #0]
    fefe:	4a3b      	ldr	r2, [pc, #236]	; (ffec <connection_release+0x120>)
    ff00:	4b3b      	ldr	r3, [pc, #236]	; (fff0 <connection_release+0x124>)
    ff02:	493c      	ldr	r1, [pc, #240]	; (fff4 <connection_release+0x128>)
    ff04:	483c      	ldr	r0, [pc, #240]	; (fff8 <connection_release+0x12c>)
    ff06:	f7f2 f9cb 	bl	22a0 <printk>
    ff0a:	4040      	eors	r0, r0
    ff0c:	f380 8811 	msr	BASEPRI, r0
    ff10:	f04f 0004 	mov.w	r0, #4
    ff14:	df02      	svc	2
	if ((_radio.state == STATE_ABORT) &&
    ff16:	4b39      	ldr	r3, [pc, #228]	; (fffc <connection_release+0x130>)
    ff18:	7d1a      	ldrb	r2, [r3, #20]
    ff1a:	2a05      	cmp	r2, #5
    ff1c:	461d      	mov	r5, r3
    ff1e:	d11b      	bne.n	ff58 <connection_release+0x8c>
					  conn->handle))) {
    ff20:	8c22      	ldrh	r2, [r4, #32]
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
    ff22:	7c18      	ldrb	r0, [r3, #16]
    ff24:	3207      	adds	r2, #7
	if ((_radio.state == STATE_ABORT) &&
    ff26:	4290      	cmp	r0, r2
    ff28:	d116      	bne.n	ff58 <connection_release+0x8c>
		_radio.ticker_id_prepare = 0;
    ff2a:	7419      	strb	r1, [r3, #16]
		ticker_status =
    ff2c:	f242 734b 	movw	r3, #10059	; 0x274b
    ff30:	9300      	str	r3, [sp, #0]
    ff32:	2201      	movs	r2, #1
    ff34:	4b2b      	ldr	r3, [pc, #172]	; (ffe4 <connection_release+0x118>)
    ff36:	4608      	mov	r0, r1
    ff38:	f7fc fb7c 	bl	c634 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ff3c:	f030 0202 	bics.w	r2, r0, #2
    ff40:	d1da      	bne.n	fef8 <connection_release+0x2c>
		ticker_status =
    ff42:	f242 7352 	movw	r3, #10066	; 0x2752
    ff46:	9300      	str	r3, [sp, #0]
    ff48:	4611      	mov	r1, r2
    ff4a:	4b26      	ldr	r3, [pc, #152]	; (ffe4 <connection_release+0x118>)
    ff4c:	4610      	mov	r0, r2
    ff4e:	f7fc fb71 	bl	c634 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ff52:	f030 0302 	bics.w	r3, r0, #2
    ff56:	d1cf      	bne.n	fef8 <connection_release+0x2c>
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
    ff58:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    ff5c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    ff60:	4299      	cmp	r1, r3
    ff62:	d003      	beq.n	ff6c <connection_release+0xa0>
    ff64:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    ff68:	4299      	cmp	r1, r3
    ff6a:	d101      	bne.n	ff70 <connection_release+0xa4>
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    ff6c:	4e24      	ldr	r6, [pc, #144]	; (10000 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1>)
    ff6e:	e012      	b.n	ff96 <connection_release+0xca>
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    ff70:	790b      	ldrb	r3, [r1, #4]
    ff72:	f36f 0301 	bfc	r3, #0, #2
    ff76:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    ff78:	680b      	ldr	r3, [r1, #0]
    ff7a:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		pdu_node_tx_release(conn->handle, node_tx);
    ff7e:	8c20      	ldrh	r0, [r4, #32]
    ff80:	f7ff ff1a 	bl	fdb8 <pdu_node_tx_release>
    ff84:	e7e8      	b.n	ff58 <connection_release+0x8c>
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    ff86:	6803      	ldr	r3, [r0, #0]
    ff88:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		conn->pkt_tx_ctrl = conn->pkt_tx_head;
    ff8c:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    ff90:	4631      	mov	r1, r6
    ff92:	f7fb fc42 	bl	b81a <mem_release>
	while ((conn->pkt_tx_head) &&
    ff96:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
    ff9a:	b118      	cbz	r0, ffa4 <connection_release+0xd8>
    ff9c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    ffa0:	4298      	cmp	r0, r3
    ffa2:	d1f0      	bne.n	ff86 <connection_release+0xba>
	conn->pkt_tx_ctrl = NULL;
    ffa4:	2300      	movs	r3, #0
    ffa6:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	conn->pkt_tx_ctrl_last = NULL;
    ffaa:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
	while (conn->pkt_tx_head) {
    ffae:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    ffb2:	b951      	cbnz	r1, ffca <connection_release+0xfe>
	conn->handle = 0xffff;
    ffb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    ffb8:	8423      	strh	r3, [r4, #32]
	if (_radio.conn_upd == conn) {
    ffba:	f8d5 3790 	ldr.w	r3, [r5, #1936]	; 0x790
    ffbe:	429c      	cmp	r4, r3
		_radio.conn_upd = NULL;
    ffc0:	bf08      	it	eq
    ffc2:	f8c5 1790 	streq.w	r1, [r5, #1936]	; 0x790
}
    ffc6:	b002      	add	sp, #8
    ffc8:	bd70      	pop	{r4, r5, r6, pc}
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    ffca:	790b      	ldrb	r3, [r1, #4]
    ffcc:	f36f 0301 	bfc	r3, #0, #2
    ffd0:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    ffd2:	680b      	ldr	r3, [r1, #0]
    ffd4:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		conn->pkt_tx_data = conn->pkt_tx_head;
    ffd8:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
		pdu_node_tx_release(conn->handle, node_tx);
    ffdc:	8c20      	ldrh	r0, [r4, #32]
    ffde:	f7ff feeb 	bl	fdb8 <pdu_node_tx_release>
    ffe2:	e7e4      	b.n	ffae <connection_release+0xe2>
    ffe4:	0000f9bd 	.word	0x0000f9bd
    ffe8:	00023dbe 	.word	0x00023dbe
    ffec:	00022d86 	.word	0x00022d86
    fff0:	00025e2c 	.word	0x00025e2c
    fff4:	000272e8 	.word	0x000272e8
    fff8:	00025f28 	.word	0x00025f28
    fffc:	20000bf0 	.word	0x20000bf0
   10000:	20001354 	.word	0x20001354

00010004 <ticker_stop_adv_stop>:
{
   10004:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   10006:	4c52      	ldr	r4, [pc, #328]	; (10150 <ticker_stop_adv_stop+0x14c>)
	if (status != TICKER_STATUS_SUCCESS) {
   10008:	b190      	cbz	r0, 10030 <ticker_stop_adv_stop+0x2c>
		LL_ASSERT(_radio.ticker_id_stop == RADIO_TICKER_ID_ADV);
   1000a:	7ca3      	ldrb	r3, [r4, #18]
   1000c:	2b05      	cmp	r3, #5
   1000e:	f000 809c 	beq.w	1014a <ticker_stop_adv_stop+0x146>
   10012:	4b50      	ldr	r3, [pc, #320]	; (10154 <ticker_stop_adv_stop+0x150>)
   10014:	9301      	str	r3, [sp, #4]
   10016:	9300      	str	r3, [sp, #0]
   10018:	4a4f      	ldr	r2, [pc, #316]	; (10158 <ticker_stop_adv_stop+0x154>)
   1001a:	4b50      	ldr	r3, [pc, #320]	; (1015c <ticker_stop_adv_stop+0x158>)
   1001c:	4950      	ldr	r1, [pc, #320]	; (10160 <ticker_stop_adv_stop+0x15c>)
   1001e:	4851      	ldr	r0, [pc, #324]	; (10164 <ticker_stop_adv_stop+0x160>)
		LL_ASSERT(_radio.ticker_id_prepare);
   10020:	f7f2 f93e 	bl	22a0 <printk>
   10024:	4040      	eors	r0, r0
   10026:	f380 8811 	msr	BASEPRI, r0
   1002a:	f04f 0004 	mov.w	r0, #4
   1002e:	df02      	svc	2
	if ((_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV) ||
   10030:	7c23      	ldrb	r3, [r4, #16]
   10032:	2b05      	cmp	r3, #5
   10034:	d002      	beq.n	1003c <ticker_stop_adv_stop+0x38>
	    (_radio.ticker_id_event == RADIO_TICKER_ID_ADV)) {
   10036:	7c63      	ldrb	r3, [r4, #17]
	if ((_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV) ||
   10038:	2b05      	cmp	r3, #5
   1003a:	d16d      	bne.n	10118 <ticker_stop_adv_stop+0x114>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
   1003c:	ab04      	add	r3, sp, #16
   1003e:	2202      	movs	r2, #2
   10040:	f843 2d08 	str.w	r2, [r3, #-8]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   10044:	2200      	movs	r2, #0
   10046:	9300      	str	r3, [sp, #0]
   10048:	2101      	movs	r1, #1
   1004a:	4b47      	ldr	r3, [pc, #284]	; (10168 <ticker_stop_adv_stop+0x164>)
   1004c:	4610      	mov	r0, r2
   1004e:	f7fc faf1 	bl	c634 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
   10052:	2802      	cmp	r0, #2
   10054:	d00d      	beq.n	10072 <ticker_stop_adv_stop+0x6e>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
   10056:	9802      	ldr	r0, [sp, #8]
   10058:	b1c0      	cbz	r0, 1008c <ticker_stop_adv_stop+0x88>
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
   1005a:	9802      	ldr	r0, [sp, #8]
   1005c:	2801      	cmp	r0, #1
   1005e:	d16c      	bne.n	1013a <ticker_stop_adv_stop+0x136>
		if (_radio.role != ROLE_NONE) {
   10060:	7ce3      	ldrb	r3, [r4, #19]
   10062:	2b00      	cmp	r3, #0
   10064:	d058      	beq.n	10118 <ticker_stop_adv_stop+0x114>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
   10066:	4b41      	ldr	r3, [pc, #260]	; (1016c <ticker_stop_adv_stop+0x168>)
   10068:	2204      	movs	r2, #4
   1006a:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
   1006c:	2200      	movs	r2, #0
   1006e:	4611      	mov	r1, r2
   10070:	e04e      	b.n	10110 <ticker_stop_adv_stop+0x10c>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
   10072:	2201      	movs	r2, #1
   10074:	4611      	mov	r1, r2
   10076:	4610      	mov	r0, r2
   10078:	f7fb fc58 	bl	b92c <mayfly_enable>
		while (ret_cb_evt == TICKER_STATUS_BUSY) {
   1007c:	9b02      	ldr	r3, [sp, #8]
   1007e:	2b02      	cmp	r3, #2
   10080:	d1e9      	bne.n	10056 <ticker_stop_adv_stop+0x52>
			ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   10082:	2101      	movs	r1, #1
   10084:	2000      	movs	r0, #0
   10086:	f7fc fb8f 	bl	c7a8 <ticker_job_sched>
   1008a:	e7f7      	b.n	1007c <ticker_stop_adv_stop+0x78>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
   1008c:	2302      	movs	r3, #2
   1008e:	9303      	str	r3, [sp, #12]
		LL_ASSERT(_radio.ticker_id_prepare);
   10090:	7c23      	ldrb	r3, [r4, #16]
   10092:	b93b      	cbnz	r3, 100a4 <ticker_stop_adv_stop+0xa0>
   10094:	4b2f      	ldr	r3, [pc, #188]	; (10154 <ticker_stop_adv_stop+0x150>)
   10096:	9301      	str	r3, [sp, #4]
   10098:	9300      	str	r3, [sp, #0]
   1009a:	4a2f      	ldr	r2, [pc, #188]	; (10158 <ticker_stop_adv_stop+0x154>)
   1009c:	4b34      	ldr	r3, [pc, #208]	; (10170 <ticker_stop_adv_stop+0x16c>)
   1009e:	4930      	ldr	r1, [pc, #192]	; (10160 <ticker_stop_adv_stop+0x15c>)
   100a0:	4834      	ldr	r0, [pc, #208]	; (10174 <ticker_stop_adv_stop+0x170>)
   100a2:	e7bd      	b.n	10020 <ticker_stop_adv_stop+0x1c>
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   100a4:	ab03      	add	r3, sp, #12
   100a6:	2201      	movs	r2, #1
		_radio.ticker_id_prepare = 0;
   100a8:	7420      	strb	r0, [r4, #16]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   100aa:	4611      	mov	r1, r2
   100ac:	9300      	str	r3, [sp, #0]
   100ae:	4b2e      	ldr	r3, [pc, #184]	; (10168 <ticker_stop_adv_stop+0x164>)
   100b0:	f7fc fac0 	bl	c634 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
   100b4:	2802      	cmp	r0, #2
   100b6:	d015      	beq.n	100e4 <ticker_stop_adv_stop+0xe0>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
   100b8:	9a03      	ldr	r2, [sp, #12]
   100ba:	b302      	cbz	r2, 100fe <ticker_stop_adv_stop+0xfa>
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
   100bc:	9c03      	ldr	r4, [sp, #12]
   100be:	2c01      	cmp	r4, #1
   100c0:	d13b      	bne.n	1013a <ticker_stop_adv_stop+0x136>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
   100c2:	2200      	movs	r2, #0
   100c4:	4611      	mov	r1, r2
   100c6:	4b2c      	ldr	r3, [pc, #176]	; (10178 <ticker_stop_adv_stop+0x174>)
   100c8:	4620      	mov	r0, r4
   100ca:	f7fb fc57 	bl	b97c <mayfly_enqueue>
			LL_ASSERT(!ret);
   100ce:	4602      	mov	r2, r0
   100d0:	2800      	cmp	r0, #0
   100d2:	d030      	beq.n	10136 <ticker_stop_adv_stop+0x132>
			LL_ASSERT(!ret);
   100d4:	4b1f      	ldr	r3, [pc, #124]	; (10154 <ticker_stop_adv_stop+0x150>)
   100d6:	9301      	str	r3, [sp, #4]
   100d8:	9300      	str	r3, [sp, #0]
   100da:	4a1f      	ldr	r2, [pc, #124]	; (10158 <ticker_stop_adv_stop+0x154>)
   100dc:	4b24      	ldr	r3, [pc, #144]	; (10170 <ticker_stop_adv_stop+0x16c>)
   100de:	4920      	ldr	r1, [pc, #128]	; (10160 <ticker_stop_adv_stop+0x15c>)
   100e0:	4826      	ldr	r0, [pc, #152]	; (1017c <ticker_stop_adv_stop+0x178>)
   100e2:	e79d      	b.n	10020 <ticker_stop_adv_stop+0x1c>
			mayfly_enable(RADIO_TICKER_USER_ID_JOB,
   100e4:	2201      	movs	r2, #1
   100e6:	4611      	mov	r1, r2
   100e8:	4610      	mov	r0, r2
   100ea:	f7fb fc1f 	bl	b92c <mayfly_enable>
			while (ret_cb_m0 == TICKER_STATUS_BUSY) {
   100ee:	9b03      	ldr	r3, [sp, #12]
   100f0:	2b02      	cmp	r3, #2
   100f2:	d1e1      	bne.n	100b8 <ticker_stop_adv_stop+0xb4>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   100f4:	2101      	movs	r1, #1
   100f6:	2000      	movs	r0, #0
   100f8:	f7fc fb56 	bl	c7a8 <ticker_job_sched>
   100fc:	e7f7      	b.n	100ee <ticker_stop_adv_stop+0xea>
			u32_t ticks_xtal_to_start =
   100fe:	69a3      	ldr	r3, [r4, #24]
			if (_radio.advertiser.hdr.ticks_active_to_start >
   10100:	69e1      	ldr	r1, [r4, #28]
			ticks_xtal_to_start &= ~XON_BITMASK;
   10102:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			if (_radio.advertiser.hdr.ticks_active_to_start >
   10106:	428b      	cmp	r3, r1
   10108:	d215      	bcs.n	10136 <ticker_stop_adv_stop+0x132>
				ret = mayfly_enqueue(
   1010a:	4b1b      	ldr	r3, [pc, #108]	; (10178 <ticker_stop_adv_stop+0x174>)
				ret = mayfly_enqueue(
   1010c:	4611      	mov	r1, r2
   1010e:	2001      	movs	r0, #1
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
   10110:	f7fb fc34 	bl	b97c <mayfly_enqueue>
			LL_ASSERT(!ret);
   10114:	2800      	cmp	r0, #0
   10116:	d1dd      	bne.n	100d4 <ticker_stop_adv_stop+0xd0>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
   10118:	2200      	movs	r2, #0
   1011a:	4b19      	ldr	r3, [pc, #100]	; (10180 <ticker_stop_adv_stop+0x17c>)
   1011c:	4611      	mov	r1, r2
   1011e:	2001      	movs	r0, #1
   10120:	f7fb fc2c 	bl	b97c <mayfly_enqueue>
	LL_ASSERT(!retval);
   10124:	b188      	cbz	r0, 1014a <ticker_stop_adv_stop+0x146>
   10126:	4b0b      	ldr	r3, [pc, #44]	; (10154 <ticker_stop_adv_stop+0x150>)
   10128:	9301      	str	r3, [sp, #4]
   1012a:	9300      	str	r3, [sp, #0]
   1012c:	4a0a      	ldr	r2, [pc, #40]	; (10158 <ticker_stop_adv_stop+0x154>)
   1012e:	4b0b      	ldr	r3, [pc, #44]	; (1015c <ticker_stop_adv_stop+0x158>)
   10130:	490b      	ldr	r1, [pc, #44]	; (10160 <ticker_stop_adv_stop+0x15c>)
   10132:	4814      	ldr	r0, [pc, #80]	; (10184 <ticker_stop_adv_stop+0x180>)
   10134:	e774      	b.n	10020 <ticker_stop_adv_stop+0x1c>
				ret = mayfly_enqueue(
   10136:	4b14      	ldr	r3, [pc, #80]	; (10188 <ticker_stop_adv_stop+0x184>)
   10138:	e7e8      	b.n	1010c <ticker_stop_adv_stop+0x108>
		LL_ASSERT(0);
   1013a:	4b06      	ldr	r3, [pc, #24]	; (10154 <ticker_stop_adv_stop+0x150>)
   1013c:	9301      	str	r3, [sp, #4]
   1013e:	9300      	str	r3, [sp, #0]
   10140:	4a05      	ldr	r2, [pc, #20]	; (10158 <ticker_stop_adv_stop+0x154>)
   10142:	4b0b      	ldr	r3, [pc, #44]	; (10170 <ticker_stop_adv_stop+0x16c>)
   10144:	4906      	ldr	r1, [pc, #24]	; (10160 <ticker_stop_adv_stop+0x15c>)
   10146:	4811      	ldr	r0, [pc, #68]	; (1018c <ticker_stop_adv_stop+0x188>)
   10148:	e76a      	b.n	10020 <ticker_stop_adv_stop+0x1c>
}
   1014a:	b004      	add	sp, #16
   1014c:	bd10      	pop	{r4, pc}
   1014e:	bf00      	nop
   10150:	20000bf0 	.word	0x20000bf0
   10154:	00023dbe 	.word	0x00023dbe
   10158:	00022d86 	.word	0x00022d86
   1015c:	00025cf7 	.word	0x00025cf7
   10160:	000272e8 	.word	0x000272e8
   10164:	00026b4a 	.word	0x00026b4a
   10168:	0000e575 	.word	0x0000e575
   1016c:	2000a028 	.word	0x2000a028
   10170:	00025cdb 	.word	0x00025cdb
   10174:	000268d2 	.word	0x000268d2
   10178:	20009ff8 	.word	0x20009ff8
   1017c:	0002693c 	.word	0x0002693c
   10180:	20009fc8 	.word	0x20009fc8
   10184:	000266b2 	.word	0x000266b2
   10188:	2000a0b8 	.word	0x2000a0b8
   1018c:	00023fb5 	.word	0x00023fb5

00010190 <sched_after_mstr_free_offset_get>:
{
   10190:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   10192:	4616      	mov	r6, r2
	u32_t ticks_anchor_offset = ticks_anchor;
   10194:	aa04      	add	r2, sp, #16
{
   10196:	461c      	mov	r4, r3
   10198:	4605      	mov	r5, r0
	u32_t ticks_anchor_offset = ticks_anchor;
   1019a:	f842 6d04 	str.w	r6, [r2, #-4]!
	sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_JOB,
   1019e:	3127      	adds	r1, #39	; 0x27
   101a0:	2001      	movs	r0, #1
   101a2:	f7ff fa35 	bl	f610 <sched_after_mstr_free_slot_get>
	if (!*win_offset_us) {
   101a6:	6823      	ldr	r3, [r4, #0]
   101a8:	b363      	cbz	r3, 10204 <sched_after_mstr_free_offset_get+0x74>
	LL_ASSERT(!((ticks_anchor_offset - ticks_anchor) &
   101aa:	9803      	ldr	r0, [sp, #12]
   101ac:	1b83      	subs	r3, r0, r6
   101ae:	021b      	lsls	r3, r3, #8
   101b0:	d50e      	bpl.n	101d0 <sched_after_mstr_free_offset_get+0x40>
   101b2:	4b19      	ldr	r3, [pc, #100]	; (10218 <sched_after_mstr_free_offset_get+0x88>)
   101b4:	9301      	str	r3, [sp, #4]
   101b6:	9300      	str	r3, [sp, #0]
   101b8:	4a18      	ldr	r2, [pc, #96]	; (1021c <sched_after_mstr_free_offset_get+0x8c>)
   101ba:	4b19      	ldr	r3, [pc, #100]	; (10220 <sched_after_mstr_free_offset_get+0x90>)
   101bc:	4919      	ldr	r1, [pc, #100]	; (10224 <sched_after_mstr_free_offset_get+0x94>)
   101be:	481a      	ldr	r0, [pc, #104]	; (10228 <sched_after_mstr_free_offset_get+0x98>)
   101c0:	f7f2 f86e 	bl	22a0 <printk>
   101c4:	4040      	eors	r0, r0
   101c6:	f380 8811 	msr	BASEPRI, r0
   101ca:	f04f 0004 	mov.w	r0, #4
   101ce:	df02      	svc	2
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
   101d0:	4631      	mov	r1, r6
   101d2:	f7fc fb01 	bl	c7d8 <ticker_ticks_diff_get>
   101d6:	4602      	mov	r2, r0
   101d8:	4814      	ldr	r0, [pc, #80]	; (1022c <sched_after_mstr_free_offset_get+0x9c>)
   101da:	2307      	movs	r3, #7
   101dc:	fba2 0100 	umull	r0, r1, r2, r0
   101e0:	fb03 1102 	mla	r1, r3, r2, r1
   101e4:	a30a      	add	r3, pc, #40	; (adr r3, 10210 <sched_after_mstr_free_offset_get+0x80>)
   101e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   101ea:	f7f0 f855 	bl	298 <__aeabi_uldivmod>
   101ee:	6823      	ldr	r3, [r4, #0]
   101f0:	4418      	add	r0, r3
	if ((*win_offset_us & BIT(31)) == 0) {
   101f2:	2800      	cmp	r0, #0
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
   101f4:	6020      	str	r0, [r4, #0]
	if ((*win_offset_us & BIT(31)) == 0) {
   101f6:	db05      	blt.n	10204 <sched_after_mstr_free_offset_get+0x74>
		u32_t conn_interval_us = conn_interval * 1250;
   101f8:	f240 40e2 	movw	r0, #1250	; 0x4e2
   101fc:	4368      	muls	r0, r5
		while (*win_offset_us > conn_interval_us) {
   101fe:	6823      	ldr	r3, [r4, #0]
   10200:	4298      	cmp	r0, r3
   10202:	d301      	bcc.n	10208 <sched_after_mstr_free_offset_get+0x78>
}
   10204:	b004      	add	sp, #16
   10206:	bd70      	pop	{r4, r5, r6, pc}
			*win_offset_us -= conn_interval_us;
   10208:	1a1b      	subs	r3, r3, r0
   1020a:	6023      	str	r3, [r4, #0]
   1020c:	e7f7      	b.n	101fe <sched_after_mstr_free_offset_get+0x6e>
   1020e:	bf00      	nop
   10210:	3b9aca00 	.word	0x3b9aca00
   10214:	00000000 	.word	0x00000000
   10218:	00023dbe 	.word	0x00023dbe
   1021c:	00022d86 	.word	0x00022d86
   10220:	00025bf8 	.word	0x00025bf8
   10224:	000272e8 	.word	0x000272e8
   10228:	00026a18 	.word	0x00026a18
   1022c:	1afd498d 	.word	0x1afd498d

00010230 <mayfly_sched_win_offset_use>:
{
   10230:	b513      	push	{r0, r1, r4, lr}
	sched_after_mstr_free_offset_get(conn->conn_interval,
   10232:	f100 0384 	add.w	r3, r0, #132	; 0x84
{
   10236:	4604      	mov	r4, r0
	sched_after_mstr_free_offset_get(conn->conn_interval,
   10238:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
   1023c:	68c1      	ldr	r1, [r0, #12]
   1023e:	8c80      	ldrh	r0, [r0, #36]	; 0x24
   10240:	f7ff ffa6 	bl	10190 <sched_after_mstr_free_offset_get>
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
   10244:	a902      	add	r1, sp, #8
   10246:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
   1024a:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
   1024e:	f240 42e2 	movw	r2, #1250	; 0x4e2
   10252:	fbb3 f3f2 	udiv	r3, r3, r2
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
   10256:	2202      	movs	r2, #2
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
   10258:	f821 3d02 	strh.w	r3, [r1, #-2]!
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
   1025c:	f7f0 fa99 	bl	792 <memcpy>
}
   10260:	b002      	add	sp, #8
   10262:	bd10      	pop	{r4, pc}

00010264 <mayfly_sched_after_mstr_free_offset_get>:
{
   10264:	b410      	push	{r4}
	sched_after_mstr_free_offset_get(_radio.scanner.conn_interval,
   10266:	4c05      	ldr	r4, [pc, #20]	; (1027c <mayfly_sched_after_mstr_free_offset_get+0x18>)
   10268:	4602      	mov	r2, r0
   1026a:	f504 63cf 	add.w	r3, r4, #1656	; 0x678
   1026e:	f8d4 1670 	ldr.w	r1, [r4, #1648]	; 0x670
   10272:	f8b4 0668 	ldrh.w	r0, [r4, #1640]	; 0x668
}
   10276:	bc10      	pop	{r4}
	sched_after_mstr_free_offset_get(_radio.scanner.conn_interval,
   10278:	f7ff bf8a 	b.w	10190 <sched_after_mstr_free_offset_get>
   1027c:	20000bf0 	.word	0x20000bf0

00010280 <mayfly_adv_stop>:
{
   10280:	b513      	push	{r0, r1, r4, lr}
	node_rx = packet_rx_reserve_get(1);
   10282:	2001      	movs	r0, #1
   10284:	f7fe f9b6 	bl	e5f4 <packet_rx_reserve_get>
	LL_ASSERT(node_rx);
   10288:	4604      	mov	r4, r0
   1028a:	b970      	cbnz	r0, 102aa <mayfly_adv_stop+0x2a>
   1028c:	4b0f      	ldr	r3, [pc, #60]	; (102cc <mayfly_adv_stop+0x4c>)
   1028e:	9301      	str	r3, [sp, #4]
   10290:	9300      	str	r3, [sp, #0]
   10292:	4a0f      	ldr	r2, [pc, #60]	; (102d0 <mayfly_adv_stop+0x50>)
   10294:	4b0f      	ldr	r3, [pc, #60]	; (102d4 <mayfly_adv_stop+0x54>)
   10296:	4910      	ldr	r1, [pc, #64]	; (102d8 <mayfly_adv_stop+0x58>)
   10298:	4810      	ldr	r0, [pc, #64]	; (102dc <mayfly_adv_stop+0x5c>)
   1029a:	f7f2 f801 	bl	22a0 <printk>
   1029e:	4040      	eors	r0, r0
   102a0:	f380 8811 	msr	BASEPRI, r0
   102a4:	f04f 0004 	mov.w	r0, #4
   102a8:	df02      	svc	2
	node_rx->hdr.handle = 0xffff;
   102aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
   102ae:	80c3      	strh	r3, [r0, #6]
	node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   102b0:	2306      	movs	r3, #6
   102b2:	7103      	strb	r3, [r0, #4]
	memset(radio_le_conn_cmplt, 0x00, sizeof(struct radio_le_conn_cmplt));
   102b4:	221d      	movs	r2, #29
   102b6:	2100      	movs	r1, #0
   102b8:	300b      	adds	r0, #11
   102ba:	f7f0 fa96 	bl	7ea <memset>
	radio_le_conn_cmplt->status = 0x3c;
   102be:	233c      	movs	r3, #60	; 0x3c
   102c0:	72e3      	strb	r3, [r4, #11]
}
   102c2:	b002      	add	sp, #8
   102c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	packet_rx_enqueue();
   102c8:	f7ff ba6e 	b.w	f7a8 <packet_rx_enqueue>
   102cc:	00023dbe 	.word	0x00023dbe
   102d0:	00022d86 	.word	0x00022d86
   102d4:	00025ccb 	.word	0x00025ccb
   102d8:	000272e8 	.word	0x000272e8
   102dc:	000265de 	.word	0x000265de

000102e0 <terminate_ind_rx_enqueue>:
{
   102e0:	b513      	push	{r0, r1, r4, lr}
   102e2:	4603      	mov	r3, r0
   102e4:	460a      	mov	r2, r1
	node_rx = (void *)&conn->llcp_terminate.radio_pdu_node_rx;
   102e6:	f100 01b4 	add.w	r1, r0, #180	; 0xb4
	LL_ASSERT(node_rx->hdr.onion.link);
   102ea:	f8d0 00b4 	ldr.w	r0, [r0, #180]	; 0xb4
   102ee:	b970      	cbnz	r0, 1030e <terminate_ind_rx_enqueue+0x2e>
   102f0:	4b16      	ldr	r3, [pc, #88]	; (1034c <terminate_ind_rx_enqueue+0x6c>)
   102f2:	9301      	str	r3, [sp, #4]
   102f4:	9300      	str	r3, [sp, #0]
   102f6:	4a16      	ldr	r2, [pc, #88]	; (10350 <terminate_ind_rx_enqueue+0x70>)
   102f8:	4b16      	ldr	r3, [pc, #88]	; (10354 <terminate_ind_rx_enqueue+0x74>)
   102fa:	4917      	ldr	r1, [pc, #92]	; (10358 <terminate_ind_rx_enqueue+0x78>)
   102fc:	4817      	ldr	r0, [pc, #92]	; (1035c <terminate_ind_rx_enqueue+0x7c>)
	LL_ASSERT(link);
   102fe:	f7f1 ffcf 	bl	22a0 <printk>
   10302:	4040      	eors	r0, r0
   10304:	f380 8811 	msr	BASEPRI, r0
   10308:	f04f 0004 	mov.w	r0, #4
   1030c:	df02      	svc	2
	node_rx->hdr.handle = conn->handle;
   1030e:	8c1c      	ldrh	r4, [r3, #32]
   10310:	f8a3 40ba 	strh.w	r4, [r3, #186]	; 0xba
	*((u8_t *)node_rx->pdu_data) = reason;
   10314:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   10318:	2407      	movs	r4, #7
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
   1031a:	4a11      	ldr	r2, [pc, #68]	; (10360 <terminate_ind_rx_enqueue+0x80>)
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   1031c:	f883 40b8 	strb.w	r4, [r3, #184]	; 0xb8
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
   10320:	f892 4780 	ldrb.w	r4, [r2, #1920]	; 0x780
   10324:	f883 40b4 	strb.w	r4, [r3, #180]	; 0xb4
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
   10328:	f502 62eb 	add.w	r2, r2, #1880	; 0x758
   1032c:	f7fb fab5 	bl	b89a <memq_enqueue>
	LL_ASSERT(link);
   10330:	b938      	cbnz	r0, 10342 <terminate_ind_rx_enqueue+0x62>
   10332:	4b06      	ldr	r3, [pc, #24]	; (1034c <terminate_ind_rx_enqueue+0x6c>)
   10334:	9301      	str	r3, [sp, #4]
   10336:	9300      	str	r3, [sp, #0]
   10338:	4a05      	ldr	r2, [pc, #20]	; (10350 <terminate_ind_rx_enqueue+0x70>)
   1033a:	4b06      	ldr	r3, [pc, #24]	; (10354 <terminate_ind_rx_enqueue+0x74>)
   1033c:	4906      	ldr	r1, [pc, #24]	; (10358 <terminate_ind_rx_enqueue+0x78>)
   1033e:	4809      	ldr	r0, [pc, #36]	; (10364 <terminate_ind_rx_enqueue+0x84>)
   10340:	e7dd      	b.n	102fe <terminate_ind_rx_enqueue+0x1e>
}
   10342:	b002      	add	sp, #8
   10344:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
   10348:	f006 bcd8 	b.w	16cfc <radio_event_callback>
   1034c:	00023dbe 	.word	0x00023dbe
   10350:	00022d86 	.word	0x00022d86
   10354:	00025e3f 	.word	0x00025e3f
   10358:	000272e8 	.word	0x000272e8
   1035c:	00026a9e 	.word	0x00026a9e
   10360:	20000bf0 	.word	0x20000bf0
   10364:	00025f02 	.word	0x00025f02

00010368 <scan_ticker_enable>:
static void scan_ticker_enable (void){
   10368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			HAL_TICKER_US_TO_TICKS((u64_t) _radio.scanner.interval * 625),
   1036c:	4f34      	ldr	r7, [pc, #208]	; (10440 <scan_ticker_enable+0xd8>)
static void scan_ticker_enable (void){
   1036e:	b08a      	sub	sp, #40	; 0x28
	ticks_anchor = ticker_ticks_now_get();
   10370:	f7fc fa30 	bl	c7d4 <ticker_ticks_now_get>
			HAL_TICKER_US_TO_TICKS((u64_t) _radio.scanner.interval * 625),
   10374:	f8d7 8660 	ldr.w	r8, [r7, #1632]	; 0x660
			HAL_TICKER_REMAINDER((u64_t) (_radio.scanner.interval * 625)),
   10378:	4b32      	ldr	r3, [pc, #200]	; (10444 <scan_ticker_enable+0xdc>)
   1037a:	f240 2471 	movw	r4, #625	; 0x271
   1037e:	fb04 f408 	mul.w	r4, r4, r8
   10382:	fba4 4503 	umull	r4, r5, r4, r3
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   10386:	f642 5355 	movw	r3, #11605	; 0x2d55
   1038a:	9308      	str	r3, [sp, #32]
   1038c:	4b2e      	ldr	r3, [pc, #184]	; (10448 <scan_ticker_enable+0xe0>)
   1038e:	9307      	str	r3, [sp, #28]
   10390:	2600      	movs	r6, #0
   10392:	4b2e      	ldr	r3, [pc, #184]	; (1044c <scan_ticker_enable+0xe4>)
   10394:	9606      	str	r6, [sp, #24]
   10396:	9305      	str	r3, [sp, #20]
   10398:	f8d7 2648 	ldr.w	r2, [r7, #1608]	; 0x648
   1039c:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
   103a0:	9603      	str	r6, [sp, #12]
   103a2:	4413      	add	r3, r2
   103a4:	9304      	str	r3, [sp, #16]
			HAL_TICKER_REMAINDER((u64_t) (_radio.scanner.interval * 625)),
   103a6:	4620      	mov	r0, r4
   103a8:	a323      	add	r3, pc, #140	; (adr r3, 10438 <scan_ticker_enable+0xd0>)
   103aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   103ae:	4629      	mov	r1, r5
   103b0:	f7ef ff72 	bl	298 <__aeabi_uldivmod>
   103b4:	4a26      	ldr	r2, [pc, #152]	; (10450 <scan_ticker_enable+0xe8>)
   103b6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   103ba:	2307      	movs	r3, #7
   103bc:	2100      	movs	r1, #0
   103be:	4343      	muls	r3, r0
   103c0:	fb02 3301 	mla	r3, r2, r1, r3
   103c4:	fba0 0102 	umull	r0, r1, r0, r2
   103c8:	1a20      	subs	r0, r4, r0
   103ca:	4419      	add	r1, r3
   103cc:	eb65 0101 	sbc.w	r1, r5, r1
   103d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   103d4:	2300      	movs	r3, #0
   103d6:	f7ef ff5f 	bl	298 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   103da:	9002      	str	r0, [sp, #8]
			HAL_TICKER_US_TO_TICKS((u64_t) _radio.scanner.interval * 625),
   103dc:	481d      	ldr	r0, [pc, #116]	; (10454 <scan_ticker_enable+0xec>)
   103de:	2391      	movs	r3, #145	; 0x91
   103e0:	fba8 0100 	umull	r0, r1, r8, r0
   103e4:	fb03 1108 	mla	r1, r3, r8, r1
   103e8:	a313      	add	r3, pc, #76	; (adr r3, 10438 <scan_ticker_enable+0xd0>)
   103ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   103ee:	f7ef ff53 	bl	298 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   103f2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   103f6:	9001      	str	r0, [sp, #4]
   103f8:	9600      	str	r6, [sp, #0]
   103fa:	f8d7 370c 	ldr.w	r3, [r7, #1804]	; 0x70c
   103fe:	2206      	movs	r2, #6
   10400:	4631      	mov	r1, r6
   10402:	4630      	mov	r0, r6
   10404:	f7fc f878 	bl	c4f8 <ticker_start>
			LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   10408:	f030 0302 	bics.w	r3, r0, #2
   1040c:	d00e      	beq.n	1042c <scan_ticker_enable+0xc4>
   1040e:	4b12      	ldr	r3, [pc, #72]	; (10458 <scan_ticker_enable+0xf0>)
   10410:	9301      	str	r3, [sp, #4]
   10412:	9300      	str	r3, [sp, #0]
   10414:	4a11      	ldr	r2, [pc, #68]	; (1045c <scan_ticker_enable+0xf4>)
   10416:	4b12      	ldr	r3, [pc, #72]	; (10460 <scan_ticker_enable+0xf8>)
   10418:	4912      	ldr	r1, [pc, #72]	; (10464 <scan_ticker_enable+0xfc>)
   1041a:	4813      	ldr	r0, [pc, #76]	; (10468 <scan_ticker_enable+0x100>)
   1041c:	f7f1 ff40 	bl	22a0 <printk>
   10420:	4040      	eors	r0, r0
   10422:	f380 8811 	msr	BASEPRI, r0
   10426:	f04f 0004 	mov.w	r0, #4
   1042a:	df02      	svc	2
}
   1042c:	b00a      	add	sp, #40	; 0x28
   1042e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10432:	bf00      	nop
   10434:	f3af 8000 	nop.w
   10438:	1afd498d 	.word	0x1afd498d
   1043c:	00000007 	.word	0x00000007
   10440:	20000bf0 	.word	0x20000bf0
   10444:	3b9aca00 	.word	0x3b9aca00
   10448:	0000f9bd 	.word	0x0000f9bd
   1044c:	00010f65 	.word	0x00010f65
   10450:	1afd498d 	.word	0x1afd498d
   10454:	84e72a00 	.word	0x84e72a00
   10458:	00023dbe 	.word	0x00023dbe
   1045c:	00022d86 	.word	0x00022d86
   10460:	00025ea1 	.word	0x00025ea1
   10464:	000272e8 	.word	0x000272e8
   10468:	000269de 	.word	0x000269de

0001046c <aux_packet_function>:
scan_ticker_enable();	
   1046c:	f7ff bf7c 	b.w	10368 <scan_ticker_enable>

00010470 <prepare_normal_set>:
{
   10470:	b530      	push	{r4, r5, lr}
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
   10472:	6804      	ldr	r4, [r0, #0]
   10474:	2c00      	cmp	r4, #0
{
   10476:	b089      	sub	sp, #36	; 0x24
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
   10478:	da26      	bge.n	104c8 <prepare_normal_set+0x58>
		u32_t ticks_prepare_to_start =
   1047a:	6843      	ldr	r3, [r0, #4]
   1047c:	6885      	ldr	r5, [r0, #8]
		ticker_status =
   1047e:	9006      	str	r0, [sp, #24]
		u32_t ticks_drift_minus = (hdr->ticks_xtal_to_start &
   10480:	429d      	cmp	r5, r3
   10482:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
   10486:	bf34      	ite	cc
   10488:	1ae4      	subcc	r4, r4, r3
   1048a:	1b64      	subcs	r4, r4, r5
		ticker_status =
   1048c:	4b0f      	ldr	r3, [pc, #60]	; (104cc <prepare_normal_set+0x5c>)
   1048e:	9305      	str	r3, [sp, #20]
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   10490:	b2a4      	uxth	r4, r4
		ticker_status =
   10492:	2300      	movs	r3, #0
   10494:	9304      	str	r3, [sp, #16]
   10496:	9303      	str	r3, [sp, #12]
   10498:	9302      	str	r3, [sp, #8]
   1049a:	4618      	mov	r0, r3
   1049c:	9401      	str	r4, [sp, #4]
   1049e:	9400      	str	r4, [sp, #0]
   104a0:	f7fc f87a 	bl	c598 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   104a4:	f030 0302 	bics.w	r3, r0, #2
   104a8:	d00e      	beq.n	104c8 <prepare_normal_set+0x58>
   104aa:	4b09      	ldr	r3, [pc, #36]	; (104d0 <prepare_normal_set+0x60>)
   104ac:	9301      	str	r3, [sp, #4]
   104ae:	9300      	str	r3, [sp, #0]
   104b0:	4a08      	ldr	r2, [pc, #32]	; (104d4 <prepare_normal_set+0x64>)
   104b2:	4b09      	ldr	r3, [pc, #36]	; (104d8 <prepare_normal_set+0x68>)
   104b4:	4909      	ldr	r1, [pc, #36]	; (104dc <prepare_normal_set+0x6c>)
   104b6:	480a      	ldr	r0, [pc, #40]	; (104e0 <prepare_normal_set+0x70>)
   104b8:	f7f1 fef2 	bl	22a0 <printk>
   104bc:	4040      	eors	r0, r0
   104be:	f380 8811 	msr	BASEPRI, r0
   104c2:	f04f 0004 	mov.w	r0, #4
   104c6:	df02      	svc	2
}
   104c8:	b009      	add	sp, #36	; 0x24
   104ca:	bd30      	pop	{r4, r5, pc}
   104cc:	0000e585 	.word	0x0000e585
   104d0:	00023dbe 	.word	0x00023dbe
   104d4:	00022d86 	.word	0x00022d86
   104d8:	00025bb0 	.word	0x00025bb0
   104dc:	000272e8 	.word	0x000272e8
   104e0:	00025f28 	.word	0x00025f28

000104e4 <preempt_calc>:
{
   104e4:	b570      	push	{r4, r5, r6, lr}
   104e6:	4614      	mov	r4, r2
   104e8:	460e      	mov	r6, r1
   104ea:	4605      	mov	r5, r0
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);
   104ec:	f7fc f972 	bl	c7d4 <ticker_ticks_now_get>
	u32_t diff =
   104f0:	4621      	mov	r1, r4
   104f2:	f7fc f971 	bl	c7d8 <ticker_ticks_diff_get>
	diff += 3;
   104f6:	1cc4      	adds	r4, r0, #3
	if (diff > HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
   104f8:	2c09      	cmp	r4, #9
   104fa:	d90f      	bls.n	1051c <preempt_calc+0x38>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_WORKER, 0);
   104fc:	2100      	movs	r1, #0
   104fe:	4608      	mov	r0, r1
   10500:	f7fe fb84 	bl	ec0c <mayfly_xtal_retain>
		prepare_normal_set(hdr, RADIO_TICKER_USER_ID_WORKER, ticker_id);
   10504:	4632      	mov	r2, r6
   10506:	2100      	movs	r1, #0
   10508:	4628      	mov	r0, r5
   1050a:	f7ff ffb1 	bl	10470 <prepare_normal_set>
		diff += hdr->ticks_preempt_to_start;
   1050e:	68ab      	ldr	r3, [r5, #8]
   10510:	441c      	add	r4, r3
		if (diff <
   10512:	2c26      	cmp	r4, #38	; 0x26
   10514:	d800      	bhi.n	10518 <preempt_calc+0x34>
			hdr->ticks_preempt_to_start = diff;
   10516:	60ac      	str	r4, [r5, #8]
		return 1;
   10518:	2001      	movs	r0, #1
}
   1051a:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   1051c:	2000      	movs	r0, #0
   1051e:	bd70      	pop	{r4, r5, r6, pc}

00010520 <event_ext_adv>:
	LL_ASSERT(_radio.role == ROLE_NONE);
   10520:	4b60      	ldr	r3, [pc, #384]	; (106a4 <event_ext_adv+0x184>)
{
   10522:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
   10524:	7cd9      	ldrb	r1, [r3, #19]
{
   10526:	4606      	mov	r6, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
   10528:	f001 02ff 	and.w	r2, r1, #255	; 0xff
   1052c:	461c      	mov	r4, r3
   1052e:	b171      	cbz	r1, 1054e <event_ext_adv+0x2e>
   10530:	4b5d      	ldr	r3, [pc, #372]	; (106a8 <event_ext_adv+0x188>)
   10532:	9301      	str	r3, [sp, #4]
   10534:	9300      	str	r3, [sp, #0]
   10536:	4a5d      	ldr	r2, [pc, #372]	; (106ac <event_ext_adv+0x18c>)
   10538:	4b5d      	ldr	r3, [pc, #372]	; (106b0 <event_ext_adv+0x190>)
   1053a:	495e      	ldr	r1, [pc, #376]	; (106b4 <event_ext_adv+0x194>)
   1053c:	485e      	ldr	r0, [pc, #376]	; (106b8 <event_ext_adv+0x198>)
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_EXT_ADV);
   1053e:	f7f1 feaf 	bl	22a0 <printk>
   10542:	4040      	eors	r0, r0
   10544:	f380 8811 	msr	BASEPRI, r0
   10548:	f04f 0004 	mov.w	r0, #4
   1054c:	df02      	svc	2
   1054e:	7c1b      	ldrb	r3, [r3, #16]
   10550:	b2db      	uxtb	r3, r3
   10552:	2b08      	cmp	r3, #8
   10554:	d007      	beq.n	10566 <event_ext_adv+0x46>
   10556:	4b54      	ldr	r3, [pc, #336]	; (106a8 <event_ext_adv+0x188>)
   10558:	9301      	str	r3, [sp, #4]
   1055a:	9300      	str	r3, [sp, #0]
   1055c:	4a53      	ldr	r2, [pc, #332]	; (106ac <event_ext_adv+0x18c>)
   1055e:	4b54      	ldr	r3, [pc, #336]	; (106b0 <event_ext_adv+0x190>)
   10560:	4954      	ldr	r1, [pc, #336]	; (106b4 <event_ext_adv+0x194>)
   10562:	4856      	ldr	r0, [pc, #344]	; (106bc <event_ext_adv+0x19c>)
   10564:	e7eb      	b.n	1053e <event_ext_adv+0x1e>
	_radio.role = ROLE_ADV;
   10566:	2101      	movs	r1, #1
   10568:	74e1      	strb	r1, [r4, #19]
	_radio.ticks_anchor = ticks_at_expire;
   1056a:	60a0      	str	r0, [r4, #8]
	_radio.ticker_id_prepare = 0;
   1056c:	7422      	strb	r2, [r4, #16]
	if (_radio.advertiser.adv_data.first !=
   1056e:	f894 022f 	ldrb.w	r0, [r4, #559]	; 0x22f
	_radio.ticker_id_event = RADIO_TICKER_ID_EXT_ADV;
   10572:	7463      	strb	r3, [r4, #17]
	if (_radio.advertiser.adv_data.first !=
   10574:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
   10578:	4298      	cmp	r0, r3
   1057a:	d007      	beq.n	1058c <event_ext_adv+0x6c>
		first = _radio.advertiser.adv_data.first + 1;
   1057c:	440b      	add	r3, r1
   1057e:	b2db      	uxtb	r3, r3
			first = 0;
   10580:	2b02      	cmp	r3, #2
   10582:	bf08      	it	eq
   10584:	2300      	moveq	r3, #0
		_radio.advertiser.adv_data.first = first;
   10586:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
		upd = 1;
   1058a:	460a      	mov	r2, r1
	if (_radio.advertiser.scan_data.first != _radio.
   1058c:	f894 3636 	ldrb.w	r3, [r4, #1590]	; 0x636
   10590:	f894 1637 	ldrb.w	r1, [r4, #1591]	; 0x637
   10594:	4299      	cmp	r1, r3
   10596:	d007      	beq.n	105a8 <event_ext_adv+0x88>
		first = _radio.advertiser.scan_data.first + 1;
   10598:	3301      	adds	r3, #1
   1059a:	b2db      	uxtb	r3, r3
			first = 0;
   1059c:	2b02      	cmp	r3, #2
   1059e:	bf08      	it	eq
   105a0:	2300      	moveq	r3, #0
		_radio.advertiser.scan_data.first = first;
   105a2:	f884 3636 	strb.w	r3, [r4, #1590]	; 0x636
		upd = 1;
   105a6:	2201      	movs	r2, #1
	aux_pdu = (void *)_radio.advertiser.aux_adv_data.data
   105a8:	f894 5433 	ldrb.w	r5, [r4, #1075]	; 0x433
	pdu = (void *)_radio.advertiser.adv_data.data
   105ac:	f894 722e 	ldrb.w	r7, [r4, #558]	; 0x22e
	aux_pdu = (void *)_radio.advertiser.aux_adv_data.data
   105b0:	eb05 2505 	add.w	r5, r5, r5, lsl #8
   105b4:	f505 750c 	add.w	r5, r5, #560	; 0x230
   105b8:	4425      	add	r5, r4
	pdu = (void *)_radio.advertiser.adv_data.data
   105ba:	eb07 2707 	add.w	r7, r7, r7, lsl #8
		*(h+6)+=1;
   105be:	7a6b      	ldrb	r3, [r5, #9]
	pdu = (void *)_radio.advertiser.adv_data.data
   105c0:	372c      	adds	r7, #44	; 0x2c
		*(h+6)+=1;
   105c2:	3301      	adds	r3, #1
	pdu = (void *)_radio.advertiser.adv_data.data
   105c4:	19e1      	adds	r1, r4, r7
		*(h+6)+=1;
   105c6:	726b      	strb	r3, [r5, #9]
	if (upd) {
   105c8:	b152      	cbz	r2, 105e0 <event_ext_adv+0xc0>
		struct pdu_adv *scan_pdu = (void *)
   105ca:	f894 0636 	ldrb.w	r0, [r4, #1590]	; 0x636
   105ce:	eb00 2000 	add.w	r0, r0, r0, lsl #8
   105d2:	4420      	add	r0, r4
		memcpy(&scan_pdu->scan_rsp.addr[0],
   105d4:	2206      	movs	r2, #6
   105d6:	3102      	adds	r1, #2
   105d8:	f200 4036 	addw	r0, r0, #1078	; 0x436
   105dc:	f7f0 f8d9 	bl	792 <memcpy>
			radio_pkt_tx_set(aux_pdu);
   105e0:	4628      	mov	r0, r5
   105e2:	f008 f9a7 	bl	18934 <radio_pkt_tx_set>
			if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   105e6:	5de3      	ldrb	r3, [r4, r7]
   105e8:	f003 030f 	and.w	r3, r3, #15
   105ec:	2b02      	cmp	r3, #2
   105ee:	d038      	beq.n	10662 <event_ext_adv+0x142>
   105f0:	2b07      	cmp	r3, #7
   105f2:	d036      	beq.n	10662 <event_ext_adv+0x142>
				_radio.state = STATE_TX;
   105f4:	2302      	movs	r3, #2
				radio_tmr_tifs_set(RADIO_TIFS);
   105f6:	2096      	movs	r0, #150	; 0x96
				_radio.state = STATE_TX;
   105f8:	7523      	strb	r3, [r4, #20]
				radio_tmr_tifs_set(RADIO_TIFS);
   105fa:	f008 fac1 	bl	18b80 <radio_tmr_tifs_set>
				radio_switch_complete_and_rx(0);
   105fe:	2000      	movs	r0, #0
   10600:	f008 fa20 	bl	18a44 <radio_switch_complete_and_rx>
			_radio.ext_advertiser.current_slot = 0;
   10604:	2300      	movs	r3, #0
				chan_set(_radio.ext_advertiser.aux_pckt_chan);
   10606:	f894 06a0 	ldrb.w	r0, [r4, #1696]	; 0x6a0
			_radio.ext_advertiser.current_slot = 0;
   1060a:	f884 3689 	strb.w	r3, [r4, #1673]	; 0x689
			_radio.ext_advertiser.event = 0;
   1060e:	f884 368a 	strb.w	r3, [r4, #1674]	; 0x68a
				chan_set(_radio.ext_advertiser.aux_pckt_chan);
   10612:	f7fe fba5 	bl	ed60 <chan_set>
	if (ctrl_rl_enabled()) {
   10616:	f007 fb41 	bl	17c9c <ctrl_rl_enabled>
   1061a:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   1061e:	b358      	cbz	r0, 10678 <event_ext_adv+0x158>
		struct ll_filter *filter =
   10620:	f013 0003 	ands.w	r0, r3, #3
   10624:	bf18      	it	ne
   10626:	2001      	movne	r0, #1
		struct ll_filter *wl = ctrl_filter_get(true);
   10628:	f007 f94e 	bl	178c8 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
   1062c:	1c82      	adds	r2, r0, #2
   1062e:	7841      	ldrb	r1, [r0, #1]
   10630:	7800      	ldrb	r0, [r0, #0]
   10632:	f008 fa4d 	bl	18ad0 <radio_filter_configure>
	remainder_us = radio_tmr_start(1, ticks_at_expire +
   10636:	68e2      	ldr	r2, [r4, #12]
   10638:	f106 0109 	add.w	r1, r6, #9
   1063c:	2001      	movs	r0, #1
   1063e:	f008 faab 	bl	18b98 <radio_tmr_start>
	radio_tmr_end_capture();
   10642:	f008 fb67 	bl	18d14 <radio_tmr_end_capture>
	if (preempt_calc(&_radio.advertiser.hdr, RADIO_TICKER_ID_ADV,
   10646:	4632      	mov	r2, r6
   10648:	2105      	movs	r1, #5
   1064a:	481d      	ldr	r0, [pc, #116]	; (106c0 <event_ext_adv+0x1a0>)
   1064c:	f7ff ff4a 	bl	104e4 <preempt_calc>
   10650:	4603      	mov	r3, r0
   10652:	b1a8      	cbz	r0, 10680 <event_ext_adv+0x160>
		_radio.state = STATE_STOP;
   10654:	2304      	movs	r3, #4
   10656:	7523      	strb	r3, [r4, #20]
}
   10658:	b003      	add	sp, #12
   1065a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		radio_disable();
   1065e:	f008 b997 	b.w	18990 <radio_disable>
				_radio.state = STATE_CLOSE;
   10662:	2303      	movs	r3, #3
   10664:	7523      	strb	r3, [r4, #20]
				_radio.advertiser.ext_adv = 1;
   10666:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   1066a:	f043 0301 	orr.w	r3, r3, #1
   1066e:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
				radio_switch_complete_and_disable();
   10672:	f008 f9fd 	bl	18a70 <radio_switch_complete_and_disable>
   10676:	e7c5      	b.n	10604 <event_ext_adv+0xe4>
	if (_radio.advertiser.filter_policy) {
   10678:	079b      	lsls	r3, r3, #30
   1067a:	d0dc      	beq.n	10636 <event_ext_adv+0x116>
		struct ll_filter *wl = ctrl_filter_get(true);
   1067c:	2001      	movs	r0, #1
   1067e:	e7d3      	b.n	10628 <event_ext_adv+0x108>
		ticker_status =
   10680:	4a10      	ldr	r2, [pc, #64]	; (106c4 <event_ext_adv+0x1a4>)
   10682:	4601      	mov	r1, r0
   10684:	f7fc f854 	bl	c730 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   10688:	f030 0302 	bics.w	r3, r0, #2
   1068c:	d007      	beq.n	1069e <event_ext_adv+0x17e>
   1068e:	4b06      	ldr	r3, [pc, #24]	; (106a8 <event_ext_adv+0x188>)
   10690:	9301      	str	r3, [sp, #4]
   10692:	9300      	str	r3, [sp, #0]
   10694:	4a05      	ldr	r2, [pc, #20]	; (106ac <event_ext_adv+0x18c>)
   10696:	4b06      	ldr	r3, [pc, #24]	; (106b0 <event_ext_adv+0x190>)
   10698:	4906      	ldr	r1, [pc, #24]	; (106b4 <event_ext_adv+0x194>)
   1069a:	480b      	ldr	r0, [pc, #44]	; (106c8 <event_ext_adv+0x1a8>)
   1069c:	e74f      	b.n	1053e <event_ext_adv+0x1e>
}
   1069e:	b003      	add	sp, #12
   106a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   106a2:	bf00      	nop
   106a4:	20000bf0 	.word	0x20000bf0
   106a8:	00023dbe 	.word	0x00023dbe
   106ac:	00022d86 	.word	0x00022d86
   106b0:	00025cbd 	.word	0x00025cbd
   106b4:	000272e8 	.word	0x000272e8
   106b8:	00026083 	.word	0x00026083
   106bc:	000260bd 	.word	0x000260bd
   106c0:	20000c08 	.word	0x20000c08
   106c4:	0000fba5 	.word	0x0000fba5
   106c8:	00025f28 	.word	0x00025f28
   106cc:	00000000 	.word	0x00000000

000106d0 <mayfly_xtal_stop_calc>:
{
   106d0:	b570      	push	{r4, r5, r6, lr}
   106d2:	b08e      	sub	sp, #56	; 0x38
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   106d4:	2302      	movs	r3, #2
   106d6:	9309      	str	r3, [sp, #36]	; 0x24
	ticker_id_next = 0xff;
   106d8:	22ff      	movs	r2, #255	; 0xff
	struct connection *conn_curr = NULL;
   106da:	2300      	movs	r3, #0
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
   106dc:	4e7e      	ldr	r6, [pc, #504]	; (108d8 <mayfly_xtal_stop_calc+0x208>)
				    _radio.connection_count));
   106de:	4d7f      	ldr	r5, [pc, #508]	; (108dc <mayfly_xtal_stop_calc+0x20c>)
	struct connection *conn_curr = NULL;
   106e0:	930a      	str	r3, [sp, #40]	; 0x28
{
   106e2:	4604      	mov	r4, r0
	struct connection *conn_next = NULL;
   106e4:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker_id_next = 0xff;
   106e6:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
	ticks_to_expire = 0;
   106ea:	930c      	str	r3, [sp, #48]	; 0x30
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
   106ec:	ab09      	add	r3, sp, #36	; 0x24
   106ee:	9302      	str	r3, [sp, #8]
   106f0:	ab0c      	add	r3, sp, #48	; 0x30
   106f2:	9300      	str	r3, [sp, #0]
   106f4:	9601      	str	r6, [sp, #4]
   106f6:	ab0d      	add	r3, sp, #52	; 0x34
   106f8:	f10d 0223 	add.w	r2, sp, #35	; 0x23
   106fc:	2101      	movs	r1, #1
   106fe:	2000      	movs	r0, #0
   10700:	f7fb ffd4 	bl	c6ac <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
   10704:	2802      	cmp	r0, #2
   10706:	d014      	beq.n	10732 <mayfly_xtal_stop_calc+0x62>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   10708:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1070a:	b1b3      	cbz	r3, 1073a <mayfly_xtal_stop_calc+0x6a>
   1070c:	4b74      	ldr	r3, [pc, #464]	; (108e0 <mayfly_xtal_stop_calc+0x210>)
   1070e:	9301      	str	r3, [sp, #4]
   10710:	9300      	str	r3, [sp, #0]
   10712:	4a74      	ldr	r2, [pc, #464]	; (108e4 <mayfly_xtal_stop_calc+0x214>)
   10714:	4b74      	ldr	r3, [pc, #464]	; (108e8 <mayfly_xtal_stop_calc+0x218>)
   10716:	4975      	ldr	r1, [pc, #468]	; (108ec <mayfly_xtal_stop_calc+0x21c>)
   10718:	4875      	ldr	r0, [pc, #468]	; (108f0 <mayfly_xtal_stop_calc+0x220>)
	LL_ASSERT(hdr_curr);
   1071a:	f7f1 fdc1 	bl	22a0 <printk>
   1071e:	4040      	eors	r0, r0
   10720:	f380 8811 	msr	BASEPRI, r0
   10724:	f04f 0004 	mov.w	r0, #4
   10728:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   1072a:	2101      	movs	r1, #1
   1072c:	2000      	movs	r0, #0
   1072e:	f7fc f83b 	bl	c7a8 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
   10732:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10734:	2b02      	cmp	r3, #2
   10736:	d0f8      	beq.n	1072a <mayfly_xtal_stop_calc+0x5a>
   10738:	e7e6      	b.n	10708 <mayfly_xtal_stop_calc+0x38>
	} while (ticker_id_next != TICKER_NULL &&
   1073a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				    _radio.connection_count));
   1073e:	2bff      	cmp	r3, #255	; 0xff
   10740:	d004      	beq.n	1074c <mayfly_xtal_stop_calc+0x7c>
   10742:	f895 2718 	ldrb.w	r2, [r5, #1816]	; 0x718
		 ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
   10746:	3207      	adds	r2, #7
	} while (ticker_id_next != TICKER_NULL &&
   10748:	4293      	cmp	r3, r2
   1074a:	dacf      	bge.n	106ec <mayfly_xtal_stop_calc+0x1c>
	if ((ticker_id_next == TICKER_NULL) ||
   1074c:	1f5a      	subs	r2, r3, #5
   1074e:	b2d2      	uxtb	r2, r2
   10750:	2af9      	cmp	r2, #249	; 0xf9
   10752:	d805      	bhi.n	10760 <mayfly_xtal_stop_calc+0x90>
				_radio.connection_count))) {
   10754:	4a61      	ldr	r2, [pc, #388]	; (108dc <mayfly_xtal_stop_calc+0x20c>)
   10756:	f892 2718 	ldrb.w	r2, [r2, #1816]	; 0x718
	    (ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
   1075a:	3207      	adds	r2, #7
	    (ticker_id_next < RADIO_TICKER_ID_ADV) ||
   1075c:	4293      	cmp	r3, r2
   1075e:	db05      	blt.n	1076c <mayfly_xtal_stop_calc+0x9c>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 0);
   10760:	2100      	movs	r1, #0
   10762:	2001      	movs	r0, #1
   10764:	f7fe fa52 	bl	ec0c <mayfly_xtal_retain>
}
   10768:	b00e      	add	sp, #56	; 0x38
   1076a:	bd70      	pop	{r4, r5, r6, pc}
	hdr_curr = hdr_conn_get(ticker_id_curr, &conn_curr);
   1076c:	a90a      	add	r1, sp, #40	; 0x28
   1076e:	b2e0      	uxtb	r0, r4
   10770:	f7ff fa24 	bl	fbbc <hdr_conn_get>
	LL_ASSERT(hdr_curr);
   10774:	b938      	cbnz	r0, 10786 <mayfly_xtal_stop_calc+0xb6>
   10776:	4b5a      	ldr	r3, [pc, #360]	; (108e0 <mayfly_xtal_stop_calc+0x210>)
   10778:	9301      	str	r3, [sp, #4]
   1077a:	9300      	str	r3, [sp, #0]
   1077c:	4a59      	ldr	r2, [pc, #356]	; (108e4 <mayfly_xtal_stop_calc+0x214>)
   1077e:	4b5a      	ldr	r3, [pc, #360]	; (108e8 <mayfly_xtal_stop_calc+0x218>)
   10780:	495a      	ldr	r1, [pc, #360]	; (108ec <mayfly_xtal_stop_calc+0x21c>)
   10782:	485c      	ldr	r0, [pc, #368]	; (108f4 <mayfly_xtal_stop_calc+0x224>)
   10784:	e7c9      	b.n	1071a <mayfly_xtal_stop_calc+0x4a>
	if (hdr_curr->ticks_xtal_to_start & XON_BITMASK) {
   10786:	6803      	ldr	r3, [r0, #0]
   10788:	6844      	ldr	r4, [r0, #4]
   1078a:	2b00      	cmp	r3, #0
		ticks_slot_abs = (hdr_curr->ticks_active_to_start >
   1078c:	bfb8      	it	lt
   1078e:	6883      	ldrlt	r3, [r0, #8]
		ticks_slot_abs = (hdr_curr->ticks_active_to_start >
   10790:	429c      	cmp	r4, r3
   10792:	bf38      	it	cc
   10794:	461c      	movcc	r4, r3
	ticks_slot_abs += hdr_curr->ticks_slot;
   10796:	68c3      	ldr	r3, [r0, #12]
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
   10798:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   1079c:	a90b      	add	r1, sp, #44	; 0x2c
	ticks_slot_abs += hdr_curr->ticks_slot;
   1079e:	441c      	add	r4, r3
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
   107a0:	f7ff fa0c 	bl	fbbc <hdr_conn_get>
	LL_ASSERT(hdr_next);
   107a4:	4605      	mov	r5, r0
   107a6:	b938      	cbnz	r0, 107b8 <mayfly_xtal_stop_calc+0xe8>
   107a8:	4b4d      	ldr	r3, [pc, #308]	; (108e0 <mayfly_xtal_stop_calc+0x210>)
   107aa:	9301      	str	r3, [sp, #4]
   107ac:	9300      	str	r3, [sp, #0]
   107ae:	4a4d      	ldr	r2, [pc, #308]	; (108e4 <mayfly_xtal_stop_calc+0x214>)
   107b0:	4b4d      	ldr	r3, [pc, #308]	; (108e8 <mayfly_xtal_stop_calc+0x218>)
   107b2:	494e      	ldr	r1, [pc, #312]	; (108ec <mayfly_xtal_stop_calc+0x21c>)
   107b4:	4850      	ldr	r0, [pc, #320]	; (108f8 <mayfly_xtal_stop_calc+0x228>)
   107b6:	e7b0      	b.n	1071a <mayfly_xtal_stop_calc+0x4a>
	ticks_prepare_to_start_next = (hdr_next->ticks_active_to_start >
   107b8:	6886      	ldr	r6, [r0, #8]
   107ba:	6843      	ldr	r3, [r0, #4]
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
   107bc:	6802      	ldr	r2, [r0, #0]
	ticks_prepare_to_start_next = (hdr_next->ticks_active_to_start >
   107be:	429e      	cmp	r6, r3
   107c0:	bf38      	it	cc
   107c2:	461e      	movcc	r6, r3
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
   107c4:	2a00      	cmp	r2, #0
   107c6:	da05      	bge.n	107d4 <mayfly_xtal_stop_calc+0x104>
		ticks_to_expire -=
   107c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			(hdr_next->ticks_xtal_to_start &
   107ca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
		ticks_to_expire -=
   107ce:	4433      	add	r3, r6
   107d0:	1a9b      	subs	r3, r3, r2
   107d2:	930c      	str	r3, [sp, #48]	; 0x30
	if (ticks_to_expire >
   107d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	    (ticks_slot_abs +
   107d6:	f104 0331 	add.w	r3, r4, #49	; 0x31
	if (ticks_to_expire >
   107da:	4293      	cmp	r3, r2
   107dc:	d20a      	bcs.n	107f4 <mayfly_xtal_stop_calc+0x124>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 0);
   107de:	2100      	movs	r1, #0
   107e0:	2001      	movs	r0, #1
   107e2:	f7fe fa13 	bl	ec0c <mayfly_xtal_retain>
		prepare_normal_set(hdr_next, RADIO_TICKER_USER_ID_JOB,
   107e6:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   107ea:	2101      	movs	r1, #1
   107ec:	4628      	mov	r0, r5
   107ee:	f7ff fe3f 	bl	10470 <prepare_normal_set>
   107f2:	e7b9      	b.n	10768 <mayfly_xtal_stop_calc+0x98>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 1);
   107f4:	2101      	movs	r1, #1
   107f6:	4608      	mov	r0, r1
   107f8:	f7fe fa08 	bl	ec0c <mayfly_xtal_retain>
		if (!(hdr_next->ticks_xtal_to_start & XON_BITMASK) &&
   107fc:	682b      	ldr	r3, [r5, #0]
   107fe:	2b00      	cmp	r3, #0
   10800:	db1c      	blt.n	1083c <mayfly_xtal_stop_calc+0x16c>
   10802:	429e      	cmp	r6, r3
   10804:	d21a      	bcs.n	1083c <mayfly_xtal_stop_calc+0x16c>
			u32_t ticks_drift_plus = hdr_next->ticks_xtal_to_start -
   10806:	1b9b      	subs	r3, r3, r6
			ticker_status =
   10808:	2000      	movs	r0, #0
				ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   1080a:	b29b      	uxth	r3, r3
			ticker_status =
   1080c:	493b      	ldr	r1, [pc, #236]	; (108fc <mayfly_xtal_stop_calc+0x22c>)
   1080e:	9105      	str	r1, [sp, #20]
   10810:	9302      	str	r3, [sp, #8]
   10812:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   10816:	9506      	str	r5, [sp, #24]
   10818:	9004      	str	r0, [sp, #16]
   1081a:	9003      	str	r0, [sp, #12]
   1081c:	9001      	str	r0, [sp, #4]
   1081e:	9000      	str	r0, [sp, #0]
   10820:	2101      	movs	r1, #1
   10822:	f7fb feb9 	bl	c598 <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   10826:	f030 0302 	bics.w	r3, r0, #2
   1082a:	d007      	beq.n	1083c <mayfly_xtal_stop_calc+0x16c>
   1082c:	4b2c      	ldr	r3, [pc, #176]	; (108e0 <mayfly_xtal_stop_calc+0x210>)
   1082e:	9301      	str	r3, [sp, #4]
   10830:	9300      	str	r3, [sp, #0]
   10832:	4a2c      	ldr	r2, [pc, #176]	; (108e4 <mayfly_xtal_stop_calc+0x214>)
   10834:	4b2c      	ldr	r3, [pc, #176]	; (108e8 <mayfly_xtal_stop_calc+0x218>)
   10836:	492d      	ldr	r1, [pc, #180]	; (108ec <mayfly_xtal_stop_calc+0x21c>)
   10838:	4831      	ldr	r0, [pc, #196]	; (10900 <mayfly_xtal_stop_calc+0x230>)
   1083a:	e76e      	b.n	1071a <mayfly_xtal_stop_calc+0x4a>
		if (!conn_curr || !conn_next) {
   1083c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   1083e:	2e00      	cmp	r6, #0
   10840:	d092      	beq.n	10768 <mayfly_xtal_stop_calc+0x98>
   10842:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   10844:	2d00      	cmp	r5, #0
   10846:	d08f      	beq.n	10768 <mayfly_xtal_stop_calc+0x98>
		if (conn_curr->conn_interval == conn_next->conn_interval) {
   10848:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
   1084a:	8caa      	ldrh	r2, [r5, #36]	; 0x24
   1084c:	429a      	cmp	r2, r3
   1084e:	d18b      	bne.n	10768 <mayfly_xtal_stop_calc+0x98>
			u32_t ticks_conn_interval = HAL_TICKER_US_TO_TICKS(
   10850:	482c      	ldr	r0, [pc, #176]	; (10904 <mayfly_xtal_stop_calc+0x234>)
   10852:	b292      	uxth	r2, r2
   10854:	fba2 0100 	umull	r0, r1, r2, r0
   10858:	f240 1323 	movw	r3, #291	; 0x123
   1085c:	fb03 1102 	mla	r1, r3, r2, r1
   10860:	a31b      	add	r3, pc, #108	; (adr r3, 108d0 <mayfly_xtal_stop_calc+0x200>)
   10862:	e9d3 2300 	ldrd	r2, r3, [r3]
   10866:	f7ef fd17 	bl	298 <__aeabi_uldivmod>
   1086a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1086c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			while (ticks_to_expire > ticks_conn_interval) {
   10870:	2200      	movs	r2, #0
   10872:	4298      	cmp	r0, r3
   10874:	d318      	bcc.n	108a8 <mayfly_xtal_stop_calc+0x1d8>
   10876:	b102      	cbz	r2, 1087a <mayfly_xtal_stop_calc+0x1aa>
   10878:	930c      	str	r3, [sp, #48]	; 0x30
			if (conn_curr->role && !conn_next->role &&
   1087a:	f996 201d 	ldrsb.w	r2, [r6, #29]
   1087e:	2a00      	cmp	r2, #0
   10880:	f995 201d 	ldrsb.w	r2, [r5, #29]
   10884:	da13      	bge.n	108ae <mayfly_xtal_stop_calc+0x1de>
   10886:	2a00      	cmp	r2, #0
   10888:	f6ff af6e 	blt.w	10768 <mayfly_xtal_stop_calc+0x98>
			     (ticks_slot_abs +
   1088c:	3414      	adds	r4, #20
			if (conn_curr->role && !conn_next->role &&
   1088e:	429c      	cmp	r4, r3
   10890:	f67f af6a 	bls.w	10768 <mayfly_xtal_stop_calc+0x98>
				status = conn_update_req(conn_curr);
   10894:	4630      	mov	r0, r6
   10896:	f7fd febf 	bl	e618 <conn_update_req>
				if (status == 2) {
   1089a:	2802      	cmp	r0, #2
   1089c:	f47f af64 	bne.w	10768 <mayfly_xtal_stop_calc+0x98>
					conn_update_req(conn_next);
   108a0:	980b      	ldr	r0, [sp, #44]	; 0x2c
					conn_update_req(conn_curr);
   108a2:	f7fd feb9 	bl	e618 <conn_update_req>
   108a6:	e75f      	b.n	10768 <mayfly_xtal_stop_calc+0x98>
				ticks_to_expire -= ticks_conn_interval;
   108a8:	1a1b      	subs	r3, r3, r0
   108aa:	2201      	movs	r2, #1
   108ac:	e7e1      	b.n	10872 <mayfly_xtal_stop_calc+0x1a2>
			} else if (!conn_curr->role && conn_next->role &&
   108ae:	2a00      	cmp	r2, #0
   108b0:	f6bf af5a 	bge.w	10768 <mayfly_xtal_stop_calc+0x98>
				    (ticks_slot_abs +
   108b4:	3414      	adds	r4, #20
			} else if (!conn_curr->role && conn_next->role &&
   108b6:	429c      	cmp	r4, r3
   108b8:	f67f af56 	bls.w	10768 <mayfly_xtal_stop_calc+0x98>
				status = conn_update_req(conn_next);
   108bc:	4628      	mov	r0, r5
   108be:	f7fd feab 	bl	e618 <conn_update_req>
				if (status == 2) {
   108c2:	2802      	cmp	r0, #2
   108c4:	f47f af50 	bne.w	10768 <mayfly_xtal_stop_calc+0x98>
					conn_update_req(conn_curr);
   108c8:	980a      	ldr	r0, [sp, #40]	; 0x28
   108ca:	e7ea      	b.n	108a2 <mayfly_xtal_stop_calc+0x1d2>
   108cc:	f3af 8000 	nop.w
   108d0:	1afd498d 	.word	0x1afd498d
   108d4:	00000007 	.word	0x00000007
   108d8:	0000e575 	.word	0x0000e575
   108dc:	20000bf0 	.word	0x20000bf0
   108e0:	00023dbe 	.word	0x00023dbe
   108e4:	00022d86 	.word	0x00022d86
   108e8:	00025bc3 	.word	0x00025bc3
   108ec:	000272e8 	.word	0x000272e8
   108f0:	00026a71 	.word	0x00026a71
   108f4:	000266db 	.word	0x000266db
   108f8:	00026705 	.word	0x00026705
   108fc:	0000e579 	.word	0x0000e579
   10900:	00025f28 	.word	0x00025f28
   10904:	09ce5400 	.word	0x09ce5400

00010908 <adv_scan_configure.constprop.32>:
static void adv_scan_configure(u8_t phy, u8_t flags)
   10908:	b537      	push	{r0, r1, r2, r4, r5, lr}
	u32_t aa = 0x8e89bed6;
   1090a:	ad02      	add	r5, sp, #8
   1090c:	4b10      	ldr	r3, [pc, #64]	; (10950 <adv_scan_configure.constprop.32+0x48>)
   1090e:	f845 3d04 	str.w	r3, [r5, #-4]!
static void adv_scan_configure(u8_t phy, u8_t flags)
   10912:	4604      	mov	r4, r0
	radio_reset();
   10914:	f007 ff58 	bl	187c8 <radio_reset>
	radio_tx_power_set(0);
   10918:	2000      	movs	r0, #0
   1091a:	f007 ff9d 	bl	18858 <radio_tx_power_set>
	radio_isr_set(isr);
   1091e:	480d      	ldr	r0, [pc, #52]	; (10954 <adv_scan_configure.constprop.32+0x4c>)
   10920:	f007 ff1c 	bl	1875c <radio_isr_set>
	radio_phy_set(phy, flags);
   10924:	2101      	movs	r1, #1
   10926:	4620      	mov	r0, r4
   10928:	f007 ff68 	bl	187fc <radio_phy_set>
	radio_aa_set((u8_t *)&aa);
   1092c:	4628      	mov	r0, r5
   1092e:	f007 ffb1 	bl	18894 <radio_aa_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, (phy << 1));
   10932:	0062      	lsls	r2, r4, #1
   10934:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
   10938:	21ff      	movs	r1, #255	; 0xff
   1093a:	2008      	movs	r0, #8
   1093c:	f007 ffc2 	bl	188c4 <radio_pkt_configure>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   10940:	4905      	ldr	r1, [pc, #20]	; (10958 <adv_scan_configure.constprop.32+0x50>)
   10942:	f240 605b 	movw	r0, #1627	; 0x65b
   10946:	f008 f85f 	bl	18a08 <radio_crc_configure>
}
   1094a:	b003      	add	sp, #12
   1094c:	bd30      	pop	{r4, r5, pc}
   1094e:	bf00      	nop
   10950:	8e89bed6 	.word	0x8e89bed6
   10954:	00013c31 	.word	0x00013c31
   10958:	00555555 	.word	0x00555555

0001095c <event_scan>:
{
   1095c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
   10960:	4b9a      	ldr	r3, [pc, #616]	; (10bcc <event_scan+0x270>)
   10962:	7cd9      	ldrb	r1, [r3, #19]
{
   10964:	b08c      	sub	sp, #48	; 0x30
   10966:	4605      	mov	r5, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
   10968:	f001 02ff 	and.w	r2, r1, #255	; 0xff
   1096c:	461c      	mov	r4, r3
   1096e:	b171      	cbz	r1, 1098e <event_scan+0x32>
   10970:	4b97      	ldr	r3, [pc, #604]	; (10bd0 <event_scan+0x274>)
   10972:	9301      	str	r3, [sp, #4]
   10974:	9300      	str	r3, [sp, #0]
   10976:	4a97      	ldr	r2, [pc, #604]	; (10bd4 <event_scan+0x278>)
   10978:	4b97      	ldr	r3, [pc, #604]	; (10bd8 <event_scan+0x27c>)
   1097a:	4998      	ldr	r1, [pc, #608]	; (10bdc <event_scan+0x280>)
   1097c:	4898      	ldr	r0, [pc, #608]	; (10be0 <event_scan+0x284>)
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_SCAN);
   1097e:	f7f1 fc8f 	bl	22a0 <printk>
   10982:	4040      	eors	r0, r0
   10984:	f380 8811 	msr	BASEPRI, r0
   10988:	f04f 0004 	mov.w	r0, #4
   1098c:	df02      	svc	2
   1098e:	7c1b      	ldrb	r3, [r3, #16]
   10990:	b2db      	uxtb	r3, r3
   10992:	2b06      	cmp	r3, #6
   10994:	d007      	beq.n	109a6 <event_scan+0x4a>
   10996:	4b8e      	ldr	r3, [pc, #568]	; (10bd0 <event_scan+0x274>)
   10998:	9301      	str	r3, [sp, #4]
   1099a:	9300      	str	r3, [sp, #0]
   1099c:	4a8d      	ldr	r2, [pc, #564]	; (10bd4 <event_scan+0x278>)
   1099e:	4b8e      	ldr	r3, [pc, #568]	; (10bd8 <event_scan+0x27c>)
   109a0:	498e      	ldr	r1, [pc, #568]	; (10bdc <event_scan+0x280>)
   109a2:	4890      	ldr	r0, [pc, #576]	; (10be4 <event_scan+0x288>)
   109a4:	e7eb      	b.n	1097e <event_scan+0x22>
	_radio.role = ROLE_SCAN;
   109a6:	2102      	movs	r1, #2
   109a8:	74e1      	strb	r1, [r4, #19]
	_radio.ticks_anchor = ticks_at_expire;
   109aa:	60a0      	str	r0, [r4, #8]
	_radio.ticker_id_prepare = 0;
   109ac:	7422      	strb	r2, [r4, #16]
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
   109ae:	f894 064d 	ldrb.w	r0, [r4, #1613]	; 0x64d
	_radio.ticker_id_event = RADIO_TICKER_ID_SCAN;
   109b2:	7463      	strb	r3, [r4, #17]
	_radio.scanner.state = 0;
   109b4:	f894 364c 	ldrb.w	r3, [r4, #1612]	; 0x64c
	_radio.state = STATE_RX;
   109b8:	2101      	movs	r1, #1
	_radio.scanner.state = 0;
   109ba:	f362 0341 	bfi	r3, r2, #1, #1
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
   109be:	f000 0007 	and.w	r0, r0, #7
	_radio.scanner.state = 0;
   109c2:	f884 364c 	strb.w	r3, [r4, #1612]	; 0x64c
	_radio.state = STATE_RX;
   109c6:	7521      	strb	r1, [r4, #20]
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
   109c8:	f7ff ff9e 	bl	10908 <adv_scan_configure.constprop.32>
	if(aux_scan){
   109cc:	4b86      	ldr	r3, [pc, #536]	; (10be8 <event_scan+0x28c>)
   109ce:	781e      	ldrb	r6, [r3, #0]
   109d0:	4698      	mov	r8, r3
   109d2:	2e00      	cmp	r6, #0
   109d4:	f000 80af 	beq.w	10b36 <event_scan+0x1da>
		stop_time_ticker = k_cycle_get_32();
   109d8:	f7f2 fc4c 	bl	3274 <_timer_cycle_get_32>
   109dc:	4b83      	ldr	r3, [pc, #524]	; (10bec <event_scan+0x290>)
   109de:	6018      	str	r0, [r3, #0]
		event_time_diff = (stop_time_ticker - start_time_ticker);
   109e0:	4b83      	ldr	r3, [pc, #524]	; (10bf0 <event_scan+0x294>)
   109e2:	681f      	ldr	r7, [r3, #0]
   109e4:	4b83      	ldr	r3, [pc, #524]	; (10bf4 <event_scan+0x298>)
   109e6:	1bc7      	subs	r7, r0, r7
   109e8:	601f      	str	r7, [r3, #0]
		Time_difference_ticker = (SYS_CLOCK_HW_CYCLES_TO_NS(event_time_diff))/1000;
   109ea:	4b83      	ldr	r3, [pc, #524]	; (10bf8 <event_scan+0x29c>)
   109ec:	681a      	ldr	r2, [r3, #0]
   109ee:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
   109f2:	fb82 2306 	smull	r2, r3, r2, r6
   109f6:	fba2 0107 	umull	r0, r1, r2, r7
   109fa:	fb07 1103 	mla	r1, r7, r3, r1
   109fe:	4b7f      	ldr	r3, [pc, #508]	; (10bfc <event_scan+0x2a0>)
   10a00:	681a      	ldr	r2, [r3, #0]
   10a02:	17d3      	asrs	r3, r2, #31
   10a04:	f7ef fc48 	bl	298 <__aeabi_uldivmod>
   10a08:	4b7d      	ldr	r3, [pc, #500]	; (10c00 <event_scan+0x2a4>)
		counter++;
   10a0a:	4a7e      	ldr	r2, [pc, #504]	; (10c04 <event_scan+0x2a8>)
		Time_difference_ticker = (SYS_CLOCK_HW_CYCLES_TO_NS(event_time_diff))/1000;
   10a0c:	fbb0 f0f6 	udiv	r0, r0, r6
   10a10:	2100      	movs	r1, #0
   10a12:	e9c3 0100 	strd	r0, r1, [r3]
		counter++;
   10a16:	7813      	ldrb	r3, [r2, #0]
   10a18:	3301      	adds	r3, #1
   10a1a:	7013      	strb	r3, [r2, #0]
		if(Time_difference_ticker < _radio.ext_scanner.chan_off){
   10a1c:	f504 63d7 	add.w	r3, r4, #1720	; 0x6b8
   10a20:	e9d3 6700 	ldrd	r6, r7, [r3]
   10a24:	42b9      	cmp	r1, r7
   10a26:	bf08      	it	eq
   10a28:	42b0      	cmpeq	r0, r6
   10a2a:	f504 6ed9 	add.w	lr, r4, #1736	; 0x6c8
   10a2e:	d206      	bcs.n	10a3e <event_scan+0xe2>
			_radio.ext_scanner.chan_off_calculation -= Time_difference_ticker;
   10a30:	e9de 2300 	ldrd	r2, r3, [lr]
   10a34:	1a10      	subs	r0, r2, r0
   10a36:	eb63 0101 	sbc.w	r1, r3, r1
   10a3a:	e9ce 0100 	strd	r0, r1, [lr]
		if( _radio.ext_scanner.chan_off_calculation < 0x2710){
   10a3e:	e9de 2300 	ldrd	r2, r3, [lr]
   10a42:	2100      	movs	r1, #0
   10a44:	f242 700f 	movw	r0, #9999	; 0x270f
   10a48:	4299      	cmp	r1, r3
   10a4a:	bf08      	it	eq
   10a4c:	4290      	cmpeq	r0, r2
   10a4e:	d36f      	bcc.n	10b30 <event_scan+0x1d4>
			if( _radio.ext_scanner.chan_off_calculation <(int)1000){
   10a50:	2b00      	cmp	r3, #0
   10a52:	bf08      	it	eq
   10a54:	f5b2 7f7a 	cmpeq.w	r2, #1000	; 0x3e8
   10a58:	d21d      	bcs.n	10a96 <event_scan+0x13a>
					ticker_status =
   10a5a:	f641 434e 	movw	r3, #7246	; 0x1c4e
   10a5e:	2100      	movs	r1, #0
   10a60:	9306      	str	r3, [sp, #24]
   10a62:	4b69      	ldr	r3, [pc, #420]	; (10c08 <event_scan+0x2ac>)
   10a64:	9305      	str	r3, [sp, #20]
   10a66:	9104      	str	r1, [sp, #16]
   10a68:	2320      	movs	r3, #32
   10a6a:	9103      	str	r1, [sp, #12]
   10a6c:	9102      	str	r1, [sp, #8]
   10a6e:	9101      	str	r1, [sp, #4]
   10a70:	9100      	str	r1, [sp, #0]
   10a72:	2206      	movs	r2, #6
   10a74:	4608      	mov	r0, r1
   10a76:	f7fb fd8f 	bl	c598 <ticker_update>
				LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   10a7a:	f030 0302 	bics.w	r3, r0, #2
   10a7e:	d00a      	beq.n	10a96 <event_scan+0x13a>
   10a80:	7ca3      	ldrb	r3, [r4, #18]
   10a82:	2b06      	cmp	r3, #6
   10a84:	d007      	beq.n	10a96 <event_scan+0x13a>
   10a86:	4b52      	ldr	r3, [pc, #328]	; (10bd0 <event_scan+0x274>)
   10a88:	9301      	str	r3, [sp, #4]
   10a8a:	9300      	str	r3, [sp, #0]
   10a8c:	4a51      	ldr	r2, [pc, #324]	; (10bd4 <event_scan+0x278>)
   10a8e:	4b52      	ldr	r3, [pc, #328]	; (10bd8 <event_scan+0x27c>)
   10a90:	4952      	ldr	r1, [pc, #328]	; (10bdc <event_scan+0x280>)
   10a92:	485e      	ldr	r0, [pc, #376]	; (10c0c <event_scan+0x2b0>)
   10a94:	e773      	b.n	1097e <event_scan+0x22>
			chan_set(_radio.ext_scanner.chan_index);
   10a96:	f894 06b0 	ldrb.w	r0, [r4, #1712]	; 0x6b0
   10a9a:	f7fe f961 	bl	ed60 <chan_set>
			aux_scan = 0x00;
   10a9e:	2300      	movs	r3, #0
   10aa0:	f888 3000 	strb.w	r3, [r8]
	radio_tmr_tifs_set(RADIO_TIFS);
   10aa4:	2096      	movs	r0, #150	; 0x96
   10aa6:	f008 f86b 	bl	18b80 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   10aaa:	2300      	movs	r3, #0
   10aac:	4619      	mov	r1, r3
   10aae:	461a      	mov	r2, r3
   10ab0:	4618      	mov	r0, r3
   10ab2:	f007 ffd3 	bl	18a5c <radio_switch_complete_and_tx>
	radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
   10ab6:	f8d4 3744 	ldr.w	r3, [r4, #1860]	; 0x744
   10aba:	f894 2749 	ldrb.w	r2, [r4, #1865]	; 0x749
   10abe:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   10ac2:	3008      	adds	r0, #8
   10ac4:	f007 ff30 	bl	18928 <radio_pkt_rx_set>
	radio_rssi_measure();
   10ac8:	f007 ffe0 	bl	18a8c <radio_rssi_measure>
	pdu = (void *)radio_pkt_scratch_get();
   10acc:	f007 ffb6 	bl	18a3c <radio_pkt_scratch_get>
	if (ctrl_rl_enabled()) {
   10ad0:	f007 f8e4 	bl	17c9c <ctrl_rl_enabled>
   10ad4:	f894 364d 	ldrb.w	r3, [r4, #1613]	; 0x64d
   10ad8:	2800      	cmp	r0, #0
   10ada:	d043      	beq.n	10b64 <event_scan+0x208>
		struct ll_filter *filter =
   10adc:	f3c3 1000 	ubfx	r0, r3, #4, #1
   10ae0:	f006 fef2 	bl	178c8 <ctrl_filter_get>
   10ae4:	4606      	mov	r6, r0
		u8_t count, *irks = ctrl_irks_get(&count);
   10ae6:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
   10aea:	f006 fe1d 	bl	17728 <ctrl_irks_get>
		radio_filter_configure(filter->enable_bitmask,
   10aee:	7871      	ldrb	r1, [r6, #1]
		u8_t count, *irks = ctrl_irks_get(&count);
   10af0:	4607      	mov	r7, r0
		radio_filter_configure(filter->enable_bitmask,
   10af2:	1cb2      	adds	r2, r6, #2
   10af4:	7830      	ldrb	r0, [r6, #0]
   10af6:	f007 ffeb 	bl	18ad0 <radio_filter_configure>
		radio_ar_configure(count, irks);
   10afa:	4639      	mov	r1, r7
   10afc:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
   10b00:	f008 f9ca 	bl	18e98 <radio_ar_configure>
	remainder_us = radio_tmr_start(0, ticks_at_expire +
   10b04:	68e2      	ldr	r2, [r4, #12]
   10b06:	f105 0109 	add.w	r1, r5, #9
   10b0a:	2000      	movs	r0, #0
   10b0c:	f008 f844 	bl	18b98 <radio_tmr_start>
	radio_tmr_end_capture();
   10b10:	f008 f900 	bl	18d14 <radio_tmr_end_capture>
	if (preempt_calc(&_radio.scanner.hdr, RADIO_TICKER_ID_SCAN,
   10b14:	2106      	movs	r1, #6
   10b16:	462a      	mov	r2, r5
   10b18:	483d      	ldr	r0, [pc, #244]	; (10c10 <event_scan+0x2b4>)
   10b1a:	f7ff fce3 	bl	104e4 <preempt_calc>
   10b1e:	4601      	mov	r1, r0
   10b20:	b360      	cbz	r0, 10b7c <event_scan+0x220>
		_radio.state = STATE_STOP;
   10b22:	2304      	movs	r3, #4
   10b24:	7523      	strb	r3, [r4, #20]
		radio_disable();
   10b26:	f007 ff33 	bl	18990 <radio_disable>
}
   10b2a:	b00c      	add	sp, #48	; 0x30
   10b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			_radio.ext_scanner.chan_off_calculation = _radio.ext_scanner.chan_off;
   10b30:	e9ce 6700 	strd	r6, r7, [lr]
   10b34:	e7b6      	b.n	10aa4 <event_scan+0x148>
		chan_set(37 + _radio.scanner.chan++);
   10b36:	f894 364c 	ldrb.w	r3, [r4, #1612]	; 0x64c
   10b3a:	f3c3 0081 	ubfx	r0, r3, #2, #2
   10b3e:	1c42      	adds	r2, r0, #1
   10b40:	f362 0383 	bfi	r3, r2, #2, #2
   10b44:	3025      	adds	r0, #37	; 0x25
   10b46:	f884 364c 	strb.w	r3, [r4, #1612]	; 0x64c
   10b4a:	f7fe f909 	bl	ed60 <chan_set>
		if (_radio.scanner.chan == 3) {
   10b4e:	f894 364c 	ldrb.w	r3, [r4, #1612]	; 0x64c
   10b52:	f003 020c 	and.w	r2, r3, #12
   10b56:	2a0c      	cmp	r2, #12
			_radio.scanner.chan = 0;
   10b58:	bf04      	itt	eq
   10b5a:	f366 0383 	bfieq	r3, r6, #2, #2
   10b5e:	f884 364c 	strbeq.w	r3, [r4, #1612]	; 0x64c
   10b62:	e79f      	b.n	10aa4 <event_scan+0x148>
	if (_radio.scanner.filter_policy) {
   10b64:	f013 0f30 	tst.w	r3, #48	; 0x30
   10b68:	d0cc      	beq.n	10b04 <event_scan+0x1a8>
		struct ll_filter *wl = ctrl_filter_get(true);
   10b6a:	2001      	movs	r0, #1
   10b6c:	f006 feac 	bl	178c8 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
   10b70:	1c82      	adds	r2, r0, #2
   10b72:	7841      	ldrb	r1, [r0, #1]
   10b74:	7800      	ldrb	r0, [r0, #0]
   10b76:	f007 ffab 	bl	18ad0 <radio_filter_configure>
   10b7a:	e7c3      	b.n	10b04 <event_scan+0x1a8>
		ret = ticker_start(															//this ticker was for closing the window.we ll use it for Aux packet
   10b7c:	f641 43c5 	movw	r3, #7365	; 0x1cc5
   10b80:	9308      	str	r3, [sp, #32]
   10b82:	4b24      	ldr	r3, [pc, #144]	; (10c14 <event_scan+0x2b8>)
   10b84:	9307      	str	r3, [sp, #28]
   10b86:	2204      	movs	r2, #4
   10b88:	4b23      	ldr	r3, [pc, #140]	; (10c18 <event_scan+0x2bc>)
   10b8a:	9206      	str	r2, [sp, #24]
   10b8c:	9305      	str	r3, [sp, #20]
   10b8e:	9004      	str	r0, [sp, #16]
   10b90:	9003      	str	r0, [sp, #12]
   10b92:	9002      	str	r0, [sp, #8]
   10b94:	9001      	str	r0, [sp, #4]
   10b96:	f8d4 365c 	ldr.w	r3, [r4, #1628]	; 0x65c
   10b9a:	3309      	adds	r3, #9
   10b9c:	9300      	str	r3, [sp, #0]
   10b9e:	462b      	mov	r3, r5
   10ba0:	f7fb fcaa 	bl	c4f8 <ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   10ba4:	f030 0302 	bics.w	r3, r0, #2
   10ba8:	d007      	beq.n	10bba <event_scan+0x25e>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   10baa:	4b09      	ldr	r3, [pc, #36]	; (10bd0 <event_scan+0x274>)
   10bac:	9301      	str	r3, [sp, #4]
   10bae:	9300      	str	r3, [sp, #0]
   10bb0:	4a08      	ldr	r2, [pc, #32]	; (10bd4 <event_scan+0x278>)
   10bb2:	4b09      	ldr	r3, [pc, #36]	; (10bd8 <event_scan+0x27c>)
   10bb4:	4909      	ldr	r1, [pc, #36]	; (10bdc <event_scan+0x280>)
   10bb6:	4819      	ldr	r0, [pc, #100]	; (10c1c <event_scan+0x2c0>)
   10bb8:	e6e1      	b.n	1097e <event_scan+0x22>
		ret = ticker_job_idle_get(RADIO_TICKER_INSTANCE_ID_RADIO,
   10bba:	4619      	mov	r1, r3
   10bbc:	4618      	mov	r0, r3
   10bbe:	4a18      	ldr	r2, [pc, #96]	; (10c20 <event_scan+0x2c4>)
   10bc0:	f7fb fdb6 	bl	c730 <ticker_job_idle_get>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   10bc4:	f030 0302 	bics.w	r3, r0, #2
   10bc8:	d1ef      	bne.n	10baa <event_scan+0x24e>
   10bca:	e7ae      	b.n	10b2a <event_scan+0x1ce>
   10bcc:	20000bf0 	.word	0x20000bf0
   10bd0:	00023dbe 	.word	0x00023dbe
   10bd4:	00022d86 	.word	0x00022d86
   10bd8:	00025d2e 	.word	0x00025d2e
   10bdc:	000272e8 	.word	0x000272e8
   10be0:	00026083 	.word	0x00026083
   10be4:	000260fc 	.word	0x000260fc
   10be8:	20001388 	.word	0x20001388
   10bec:	200032bc 	.word	0x200032bc
   10bf0:	200032c0 	.word	0x200032c0
   10bf4:	200032e0 	.word	0x200032e0
   10bf8:	2000a868 	.word	0x2000a868
   10bfc:	2000a864 	.word	0x2000a864
   10c00:	20003290 	.word	0x20003290
   10c04:	2000138b 	.word	0x2000138b
   10c08:	0000fac9 	.word	0x0000fac9
   10c0c:	0002613b 	.word	0x0002613b
   10c10:	2000122c 	.word	0x2000122c
   10c14:	0000f9bd 	.word	0x0000f9bd
   10c18:	0000fc2d 	.word	0x0000fc2d
   10c1c:	000269de 	.word	0x000269de
   10c20:	0000fba5 	.word	0x0000fba5

00010c24 <event_adv>:
	LL_ASSERT(_radio.role == ROLE_NONE);
   10c24:	4b3a      	ldr	r3, [pc, #232]	; (10d10 <event_adv+0xec>)
   10c26:	7cda      	ldrb	r2, [r3, #19]
{
   10c28:	b573      	push	{r0, r1, r4, r5, r6, lr}
   10c2a:	4605      	mov	r5, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
   10c2c:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   10c30:	461c      	mov	r4, r3
   10c32:	b172      	cbz	r2, 10c52 <event_adv+0x2e>
   10c34:	4b37      	ldr	r3, [pc, #220]	; (10d14 <event_adv+0xf0>)
   10c36:	9301      	str	r3, [sp, #4]
   10c38:	9300      	str	r3, [sp, #0]
   10c3a:	4a37      	ldr	r2, [pc, #220]	; (10d18 <event_adv+0xf4>)
   10c3c:	4b37      	ldr	r3, [pc, #220]	; (10d1c <event_adv+0xf8>)
   10c3e:	4938      	ldr	r1, [pc, #224]	; (10d20 <event_adv+0xfc>)
   10c40:	4838      	ldr	r0, [pc, #224]	; (10d24 <event_adv+0x100>)
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV);
   10c42:	f7f1 fb2d 	bl	22a0 <printk>
   10c46:	4040      	eors	r0, r0
   10c48:	f380 8811 	msr	BASEPRI, r0
   10c4c:	f04f 0004 	mov.w	r0, #4
   10c50:	df02      	svc	2
   10c52:	7c1b      	ldrb	r3, [r3, #16]
   10c54:	b2db      	uxtb	r3, r3
   10c56:	2b05      	cmp	r3, #5
   10c58:	d007      	beq.n	10c6a <event_adv+0x46>
   10c5a:	4b2e      	ldr	r3, [pc, #184]	; (10d14 <event_adv+0xf0>)
   10c5c:	9301      	str	r3, [sp, #4]
   10c5e:	9300      	str	r3, [sp, #0]
   10c60:	4a2d      	ldr	r2, [pc, #180]	; (10d18 <event_adv+0xf4>)
   10c62:	4b2e      	ldr	r3, [pc, #184]	; (10d1c <event_adv+0xf8>)
   10c64:	492e      	ldr	r1, [pc, #184]	; (10d20 <event_adv+0xfc>)
   10c66:	4830      	ldr	r0, [pc, #192]	; (10d28 <event_adv+0x104>)
   10c68:	e7eb      	b.n	10c42 <event_adv+0x1e>
	_radio.ticks_anchor = ticks_at_expire;
   10c6a:	60a0      	str	r0, [r4, #8]
	adv_scan_configure(_radio.advertiser.phy_p, 1);
   10c6c:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
	_radio.role = ROLE_ADV;
   10c70:	2601      	movs	r6, #1
	adv_scan_configure(_radio.advertiser.phy_p, 1);
   10c72:	f3c0 0042 	ubfx	r0, r0, #1, #3
	_radio.role = ROLE_ADV;
   10c76:	74e6      	strb	r6, [r4, #19]
	_radio.ticker_id_prepare = 0;
   10c78:	7421      	strb	r1, [r4, #16]
	_radio.ticker_id_event = RADIO_TICKER_ID_ADV;
   10c7a:	7463      	strb	r3, [r4, #17]
	adv_scan_configure(_radio.advertiser.phy_p, 1);
   10c7c:	f7ff fe44 	bl	10908 <adv_scan_configure.constprop.32>
	_radio.advertiser.chan_map_current = _radio.advertiser.chan_map;
   10c80:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   10c84:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
   10c88:	f3c3 1302 	ubfx	r3, r3, #4, #3
   10c8c:	f363 0202 	bfi	r2, r3, #0, #3
   10c90:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	adv_setup();
   10c94:	f7fe f9ac 	bl	eff0 <adv_setup>
	if (ctrl_rl_enabled()) {
   10c98:	f007 f800 	bl	17c9c <ctrl_rl_enabled>
   10c9c:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   10ca0:	b300      	cbz	r0, 10ce4 <event_adv+0xc0>
		struct ll_filter *filter =
   10ca2:	f013 0003 	ands.w	r0, r3, #3
   10ca6:	bf18      	it	ne
   10ca8:	4630      	movne	r0, r6
		struct ll_filter *wl = ctrl_filter_get(true);
   10caa:	f006 fe0d 	bl	178c8 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
   10cae:	1c82      	adds	r2, r0, #2
   10cb0:	7841      	ldrb	r1, [r0, #1]
   10cb2:	7800      	ldrb	r0, [r0, #0]
   10cb4:	f007 ff0c 	bl	18ad0 <radio_filter_configure>
	remainder_us = radio_tmr_start(1, ticks_at_expire +
   10cb8:	68e2      	ldr	r2, [r4, #12]
   10cba:	f105 0109 	add.w	r1, r5, #9
   10cbe:	2001      	movs	r0, #1
   10cc0:	f007 ff6a 	bl	18b98 <radio_tmr_start>
	radio_tmr_end_capture();
   10cc4:	f008 f826 	bl	18d14 <radio_tmr_end_capture>
	if (preempt_calc(&_radio.advertiser.hdr, RADIO_TICKER_ID_ADV,
   10cc8:	462a      	mov	r2, r5
   10cca:	2105      	movs	r1, #5
   10ccc:	4817      	ldr	r0, [pc, #92]	; (10d2c <event_adv+0x108>)
   10cce:	f7ff fc09 	bl	104e4 <preempt_calc>
   10cd2:	4603      	mov	r3, r0
   10cd4:	b150      	cbz	r0, 10cec <event_adv+0xc8>
		_radio.state = STATE_STOP;
   10cd6:	2304      	movs	r3, #4
   10cd8:	7523      	strb	r3, [r4, #20]
}
   10cda:	b002      	add	sp, #8
   10cdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		radio_disable();
   10ce0:	f007 be56 	b.w	18990 <radio_disable>
	if (_radio.advertiser.filter_policy) {
   10ce4:	079b      	lsls	r3, r3, #30
   10ce6:	d0e7      	beq.n	10cb8 <event_adv+0x94>
		struct ll_filter *wl = ctrl_filter_get(true);
   10ce8:	4630      	mov	r0, r6
   10cea:	e7de      	b.n	10caa <event_adv+0x86>
		ticker_status =
   10cec:	4a10      	ldr	r2, [pc, #64]	; (10d30 <event_adv+0x10c>)
   10cee:	4601      	mov	r1, r0
   10cf0:	f7fb fd1e 	bl	c730 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   10cf4:	f030 0302 	bics.w	r3, r0, #2
   10cf8:	d007      	beq.n	10d0a <event_adv+0xe6>
   10cfa:	4b06      	ldr	r3, [pc, #24]	; (10d14 <event_adv+0xf0>)
   10cfc:	9301      	str	r3, [sp, #4]
   10cfe:	9300      	str	r3, [sp, #0]
   10d00:	4a05      	ldr	r2, [pc, #20]	; (10d18 <event_adv+0xf4>)
   10d02:	4b06      	ldr	r3, [pc, #24]	; (10d1c <event_adv+0xf8>)
   10d04:	4906      	ldr	r1, [pc, #24]	; (10d20 <event_adv+0xfc>)
   10d06:	480b      	ldr	r0, [pc, #44]	; (10d34 <event_adv+0x110>)
   10d08:	e79b      	b.n	10c42 <event_adv+0x1e>
}
   10d0a:	b002      	add	sp, #8
   10d0c:	bd70      	pop	{r4, r5, r6, pc}
   10d0e:	bf00      	nop
   10d10:	20000bf0 	.word	0x20000bf0
   10d14:	00023dbe 	.word	0x00023dbe
   10d18:	00022d86 	.word	0x00022d86
   10d1c:	00025cb3 	.word	0x00025cb3
   10d20:	000272e8 	.word	0x000272e8
   10d24:	00026083 	.word	0x00026083
   10d28:	00025f76 	.word	0x00025f76
   10d2c:	20000c08 	.word	0x20000c08
   10d30:	0000fba5 	.word	0x0000fba5
   10d34:	00025f28 	.word	0x00025f28

00010d38 <event_stop.constprop.33>:
static void event_stop(u32_t ticks_at_expire, u32_t remainder,
   10d38:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
   10d3a:	4b05      	ldr	r3, [pc, #20]	; (10d50 <event_stop.constprop.33+0x18>)
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   10d3c:	2200      	movs	r2, #0
	s_mfy_radio_stop.param = context;
   10d3e:	6098      	str	r0, [r3, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   10d40:	4611      	mov	r1, r2
   10d42:	4610      	mov	r0, r2
   10d44:	f7fa fe1a 	bl	b97c <mayfly_enqueue>
	LL_ASSERT(!retval);
   10d48:	b108      	cbz	r0, 10d4e <event_stop.constprop.33+0x16>
   10d4a:	f7fe ff55 	bl	fbf8 <event_stop.part.11>
   10d4e:	bd08      	pop	{r3, pc}
   10d50:	2000a018 	.word	0x2000a018

00010d54 <event_common_prepare>:
{
   10d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u32_t _ticks_xtal_to_start = *ticks_xtal_to_start;
   10d58:	6814      	ldr	r4, [r2, #0]
	u32_t _ticks_active_to_start = *ticks_active_to_start;
   10d5a:	681d      	ldr	r5, [r3, #0]
{
   10d5c:	b08d      	sub	sp, #52	; 0x34
	if (_ticks_xtal_to_start & XON_BITMASK) {
   10d5e:	2c00      	cmp	r4, #0
{
   10d60:	4681      	mov	r9, r0
   10d62:	910b      	str	r1, [sp, #44]	; 0x2c
   10d64:	4690      	mov	r8, r2
   10d66:	469b      	mov	fp, r3
   10d68:	f89d a05c 	ldrb.w	sl, [sp, #92]	; 0x5c
	if (_ticks_xtal_to_start & XON_BITMASK) {
   10d6c:	da03      	bge.n	10d76 <event_common_prepare+0x22>
		_ticks_xtal_to_start =
   10d6e:	9c16      	ldr	r4, [sp, #88]	; 0x58
   10d70:	42ac      	cmp	r4, r5
   10d72:	bf38      	it	cc
   10d74:	462c      	movcc	r4, r5
	if (_ticks_active_to_start < _ticks_xtal_to_start) {
   10d76:	42ac      	cmp	r4, r5
   10d78:	4f56      	ldr	r7, [pc, #344]	; (10ed4 <event_common_prepare+0x180>)
   10d7a:	d924      	bls.n	10dc6 <event_common_prepare+0x72>
		ticker_status =
   10d7c:	f241 63e4 	movw	r3, #5860	; 0x16e4
   10d80:	9308      	str	r3, [sp, #32]
   10d82:	4b55      	ldr	r3, [pc, #340]	; (10ed8 <event_common_prepare+0x184>)
   10d84:	9305      	str	r3, [sp, #20]
   10d86:	2100      	movs	r1, #0
		ticks_to_active = _ticks_xtal_to_start - _ticks_active_to_start;
   10d88:	1b63      	subs	r3, r4, r5
		ticker_status =
   10d8a:	9300      	str	r3, [sp, #0]
   10d8c:	9707      	str	r7, [sp, #28]
   10d8e:	464b      	mov	r3, r9
   10d90:	9106      	str	r1, [sp, #24]
   10d92:	9104      	str	r1, [sp, #16]
   10d94:	9103      	str	r1, [sp, #12]
   10d96:	9102      	str	r1, [sp, #8]
   10d98:	9101      	str	r1, [sp, #4]
   10d9a:	2201      	movs	r2, #1
   10d9c:	4608      	mov	r0, r1
   10d9e:	f7fb fbab 	bl	c4f8 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   10da2:	f030 0302 	bics.w	r3, r0, #2
   10da6:	d034      	beq.n	10e12 <event_common_prepare+0xbe>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   10da8:	4b4c      	ldr	r3, [pc, #304]	; (10edc <event_common_prepare+0x188>)
   10daa:	9301      	str	r3, [sp, #4]
   10dac:	9300      	str	r3, [sp, #0]
   10dae:	4a4c      	ldr	r2, [pc, #304]	; (10ee0 <event_common_prepare+0x18c>)
   10db0:	4b4c      	ldr	r3, [pc, #304]	; (10ee4 <event_common_prepare+0x190>)
   10db2:	494d      	ldr	r1, [pc, #308]	; (10ee8 <event_common_prepare+0x194>)
   10db4:	484d      	ldr	r0, [pc, #308]	; (10eec <event_common_prepare+0x198>)
		LL_ASSERT(!retval);
   10db6:	f7f1 fa73 	bl	22a0 <printk>
   10dba:	4040      	eors	r0, r0
   10dbc:	f380 8811 	msr	BASEPRI, r0
   10dc0:	f04f 0004 	mov.w	r0, #4
   10dc4:	df02      	svc	2
	} else if (_ticks_active_to_start > _ticks_xtal_to_start) {
   10dc6:	d21d      	bcs.n	10e04 <event_common_prepare+0xb0>
		event_active(0, 0, 0, NULL);
   10dc8:	2300      	movs	r3, #0
   10dca:	461a      	mov	r2, r3
   10dcc:	4619      	mov	r1, r3
   10dce:	4618      	mov	r0, r3
   10dd0:	f7fe ff3c 	bl	fc4c <event_active>
		ticker_status =
   10dd4:	f241 63f9 	movw	r3, #5881	; 0x16f9
   10dd8:	2100      	movs	r1, #0
   10dda:	9308      	str	r3, [sp, #32]
		ticks_to_xtal = _ticks_active_to_start - _ticks_xtal_to_start;
   10ddc:	1b2c      	subs	r4, r5, r4
		ticker_status =
   10dde:	4b44      	ldr	r3, [pc, #272]	; (10ef0 <event_common_prepare+0x19c>)
   10de0:	9305      	str	r3, [sp, #20]
   10de2:	9707      	str	r7, [sp, #28]
   10de4:	464b      	mov	r3, r9
   10de6:	9106      	str	r1, [sp, #24]
   10de8:	9104      	str	r1, [sp, #16]
   10dea:	9103      	str	r1, [sp, #12]
   10dec:	9102      	str	r1, [sp, #8]
   10dee:	9101      	str	r1, [sp, #4]
   10df0:	9400      	str	r4, [sp, #0]
   10df2:	2201      	movs	r2, #1
   10df4:	4608      	mov	r0, r1
   10df6:	f7fb fb7f 	bl	c4f8 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   10dfa:	f030 0302 	bics.w	r3, r0, #2
   10dfe:	d1d3      	bne.n	10da8 <event_common_prepare+0x54>
   10e00:	462c      	mov	r4, r5
   10e02:	e00b      	b.n	10e1c <event_common_prepare+0xc8>
		event_active(0, 0, 0, NULL);
   10e04:	2300      	movs	r3, #0
   10e06:	461a      	mov	r2, r3
   10e08:	4619      	mov	r1, r3
   10e0a:	4618      	mov	r0, r3
   10e0c:	f7fe ff1e 	bl	fc4c <event_active>
		event_xtal(0, 0, 0, NULL);
   10e10:	2300      	movs	r3, #0
   10e12:	461a      	mov	r2, r3
   10e14:	4619      	mov	r1, r3
   10e16:	4618      	mov	r0, r3
   10e18:	f7fe ff3e 	bl	fc98 <event_xtal>
	_radio.remainder_anchor = remainder;
   10e1c:	4e35      	ldr	r6, [pc, #212]	; (10ef4 <event_common_prepare+0x1a0>)
   10e1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10e20:	60f3      	str	r3, [r6, #12]
	ticker_status =
   10e22:	f241 7311 	movw	r3, #5905	; 0x1711
   10e26:	9308      	str	r3, [sp, #32]
   10e28:	9b19      	ldr	r3, [sp, #100]	; 0x64
   10e2a:	9306      	str	r3, [sp, #24]
   10e2c:	2200      	movs	r2, #0
   10e2e:	9b18      	ldr	r3, [sp, #96]	; 0x60
   10e30:	9305      	str	r3, [sp, #20]
   10e32:	9707      	str	r7, [sp, #28]
   10e34:	464b      	mov	r3, r9
   10e36:	9204      	str	r2, [sp, #16]
   10e38:	9203      	str	r2, [sp, #12]
   10e3a:	9202      	str	r2, [sp, #8]
   10e3c:	9201      	str	r2, [sp, #4]
   10e3e:	9400      	str	r4, [sp, #0]
   10e40:	4611      	mov	r1, r2
   10e42:	4610      	mov	r0, r2
   10e44:	f7fb fb58 	bl	c4f8 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   10e48:	f030 0302 	bics.w	r3, r0, #2
   10e4c:	d1ac      	bne.n	10da8 <event_common_prepare+0x54>
	event_stop(0, 0, 0, (void *)STATE_ABORT);
   10e4e:	2005      	movs	r0, #5
   10e50:	f7ff ff72 	bl	10d38 <event_stop.constprop.33>
	if (_radio.ticks_active_to_start != _ticks_active_to_start) {
   10e54:	f8d6 378c 	ldr.w	r3, [r6, #1932]	; 0x78c
   10e58:	429d      	cmp	r5, r3
   10e5a:	d023      	beq.n	10ea4 <event_common_prepare+0x150>
		*ticks_active_to_start = _radio.ticks_active_to_start;
   10e5c:	f8cb 3000 	str.w	r3, [fp]
		if (*ticks_xtal_to_start & XON_BITMASK) {
   10e60:	f8d8 3000 	ldr.w	r3, [r8]
		ticker_status =
   10e64:	9705      	str	r7, [sp, #20]
		if (*ticks_xtal_to_start & XON_BITMASK) {
   10e66:	2b00      	cmp	r3, #0
			*ticks_xtal_to_start &= ~XON_BITMASK;
   10e68:	bfbc      	itt	lt
   10e6a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
   10e6e:	f8c8 3000 	strlt.w	r3, [r8]
		ticks_to_start_new = (_radio.ticks_active_to_start <
   10e72:	f8d6 278c 	ldr.w	r2, [r6, #1932]	; 0x78c
   10e76:	f8d8 1000 	ldr.w	r1, [r8]
   10e7a:	428a      	cmp	r2, r1
   10e7c:	bf38      	it	cc
   10e7e:	460a      	movcc	r2, r1
		ticker_status =
   10e80:	f241 7141 	movw	r1, #5953	; 0x1741
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   10e84:	b2a3      	uxth	r3, r4
   10e86:	b292      	uxth	r2, r2
		ticker_status =
   10e88:	9106      	str	r1, [sp, #24]
   10e8a:	2100      	movs	r1, #0
   10e8c:	9302      	str	r3, [sp, #8]
   10e8e:	9201      	str	r2, [sp, #4]
   10e90:	9200      	str	r2, [sp, #0]
   10e92:	9104      	str	r1, [sp, #16]
   10e94:	9103      	str	r1, [sp, #12]
   10e96:	4652      	mov	r2, sl
   10e98:	4608      	mov	r0, r1
   10e9a:	f7fb fb7d 	bl	c598 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   10e9e:	f030 0302 	bics.w	r3, r0, #2
   10ea2:	d181      	bne.n	10da8 <event_common_prepare+0x54>
	packet_tx_enqueue(0xFF);
   10ea4:	20ff      	movs	r0, #255	; 0xff
   10ea6:	f7fe ffc3 	bl	fe30 <packet_tx_enqueue>
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
   10eaa:	4b13      	ldr	r3, [pc, #76]	; (10ef8 <event_common_prepare+0x1a4>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   10eac:	2201      	movs	r2, #1
   10eae:	4611      	mov	r1, r2
   10eb0:	2000      	movs	r0, #0
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
   10eb2:	f8c3 a008 	str.w	sl, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   10eb6:	f7fa fd61 	bl	b97c <mayfly_enqueue>
		LL_ASSERT(!retval);
   10eba:	b138      	cbz	r0, 10ecc <event_common_prepare+0x178>
   10ebc:	4b07      	ldr	r3, [pc, #28]	; (10edc <event_common_prepare+0x188>)
   10ebe:	9301      	str	r3, [sp, #4]
   10ec0:	9300      	str	r3, [sp, #0]
   10ec2:	4a07      	ldr	r2, [pc, #28]	; (10ee0 <event_common_prepare+0x18c>)
   10ec4:	4b07      	ldr	r3, [pc, #28]	; (10ee4 <event_common_prepare+0x190>)
   10ec6:	4908      	ldr	r1, [pc, #32]	; (10ee8 <event_common_prepare+0x194>)
   10ec8:	480c      	ldr	r0, [pc, #48]	; (10efc <event_common_prepare+0x1a8>)
   10eca:	e774      	b.n	10db6 <event_common_prepare+0x62>
}
   10ecc:	b00d      	add	sp, #52	; 0x34
   10ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10ed2:	bf00      	nop
   10ed4:	0000f9bd 	.word	0x0000f9bd
   10ed8:	0000fc4d 	.word	0x0000fc4d
   10edc:	00023dbe 	.word	0x00023dbe
   10ee0:	00022d86 	.word	0x00022d86
   10ee4:	00025c51 	.word	0x00025c51
   10ee8:	000272e8 	.word	0x000272e8
   10eec:	00025f28 	.word	0x00025f28
   10ef0:	0000fc99 	.word	0x0000fc99
   10ef4:	20000bf0 	.word	0x20000bf0
   10ef8:	2000a0d8 	.word	0x2000a0d8
   10efc:	000266b2 	.word	0x000266b2

00010f00 <radio_event_adv_prepare>:
{
   10f00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
   10f02:	4a11      	ldr	r2, [pc, #68]	; (10f48 <radio_event_adv_prepare+0x48>)
   10f04:	7c13      	ldrb	r3, [r2, #16]
   10f06:	f003 04ff 	and.w	r4, r3, #255	; 0xff
   10f0a:	b173      	cbz	r3, 10f2a <radio_event_adv_prepare+0x2a>
   10f0c:	4b0f      	ldr	r3, [pc, #60]	; (10f4c <radio_event_adv_prepare+0x4c>)
   10f0e:	9301      	str	r3, [sp, #4]
   10f10:	9300      	str	r3, [sp, #0]
   10f12:	4a0f      	ldr	r2, [pc, #60]	; (10f50 <radio_event_adv_prepare+0x50>)
   10f14:	4b0f      	ldr	r3, [pc, #60]	; (10f54 <radio_event_adv_prepare+0x54>)
   10f16:	4910      	ldr	r1, [pc, #64]	; (10f58 <radio_event_adv_prepare+0x58>)
   10f18:	4810      	ldr	r0, [pc, #64]	; (10f5c <radio_event_adv_prepare+0x5c>)
   10f1a:	f7f1 f9c1 	bl	22a0 <printk>
   10f1e:	4040      	eors	r0, r0
   10f20:	f380 8811 	msr	BASEPRI, r0
   10f24:	f04f 0004 	mov.w	r0, #4
   10f28:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_ADV;
   10f2a:	2305      	movs	r3, #5
   10f2c:	7413      	strb	r3, [r2, #16]
	event_common_prepare(ticks_at_expire, remainder,
   10f2e:	9403      	str	r4, [sp, #12]
   10f30:	4c0b      	ldr	r4, [pc, #44]	; (10f60 <radio_event_adv_prepare+0x60>)
   10f32:	9402      	str	r4, [sp, #8]
   10f34:	9301      	str	r3, [sp, #4]
   10f36:	6a13      	ldr	r3, [r2, #32]
   10f38:	9300      	str	r3, [sp, #0]
   10f3a:	f102 031c 	add.w	r3, r2, #28
   10f3e:	3218      	adds	r2, #24
   10f40:	f7ff ff08 	bl	10d54 <event_common_prepare>
}
   10f44:	b004      	add	sp, #16
   10f46:	bd10      	pop	{r4, pc}
   10f48:	20000bf0 	.word	0x20000bf0
   10f4c:	00023dbe 	.word	0x00023dbe
   10f50:	00022d86 	.word	0x00022d86
   10f54:	00025c7f 	.word	0x00025c7f
   10f58:	000272e8 	.word	0x000272e8
   10f5c:	000267ee 	.word	0x000267ee
   10f60:	00010c25 	.word	0x00010c25

00010f64 <event_scan_prepare>:
{
   10f64:	b530      	push	{r4, r5, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
   10f66:	4c25      	ldr	r4, [pc, #148]	; (10ffc <event_scan_prepare+0x98>)
   10f68:	7c23      	ldrb	r3, [r4, #16]
{
   10f6a:	b085      	sub	sp, #20
   10f6c:	4605      	mov	r5, r0
	LL_ASSERT(!_radio.ticker_id_prepare);
   10f6e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   10f72:	b173      	cbz	r3, 10f92 <event_scan_prepare+0x2e>
   10f74:	4b22      	ldr	r3, [pc, #136]	; (11000 <event_scan_prepare+0x9c>)
   10f76:	9301      	str	r3, [sp, #4]
   10f78:	9300      	str	r3, [sp, #0]
   10f7a:	4a22      	ldr	r2, [pc, #136]	; (11004 <event_scan_prepare+0xa0>)
   10f7c:	4b22      	ldr	r3, [pc, #136]	; (11008 <event_scan_prepare+0xa4>)
   10f7e:	4923      	ldr	r1, [pc, #140]	; (1100c <event_scan_prepare+0xa8>)
   10f80:	4823      	ldr	r0, [pc, #140]	; (11010 <event_scan_prepare+0xac>)
		LL_ASSERT(!retval);
   10f82:	f7f1 f98d 	bl	22a0 <printk>
   10f86:	4040      	eors	r0, r0
   10f88:	f380 8811 	msr	BASEPRI, r0
   10f8c:	f04f 0004 	mov.w	r0, #4
   10f90:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_SCAN;
   10f92:	2306      	movs	r3, #6
   10f94:	7423      	strb	r3, [r4, #16]
	event_common_prepare(ticks_at_expire, remainder,
   10f96:	9203      	str	r2, [sp, #12]
   10f98:	9301      	str	r3, [sp, #4]
   10f9a:	4a1e      	ldr	r2, [pc, #120]	; (11014 <event_scan_prepare+0xb0>)
   10f9c:	f8d4 3644 	ldr.w	r3, [r4, #1604]	; 0x644
   10fa0:	9202      	str	r2, [sp, #8]
   10fa2:	9300      	str	r3, [sp, #0]
   10fa4:	f204 623c 	addw	r2, r4, #1596	; 0x63c
   10fa8:	f504 63c8 	add.w	r3, r4, #1600	; 0x640
   10fac:	f7ff fed2 	bl	10d54 <event_common_prepare>
	if (_radio.scanner.conn) {
   10fb0:	f8d4 3674 	ldr.w	r3, [r4, #1652]	; 0x674
   10fb4:	b303      	cbz	r3, 10ff8 <event_scan_prepare+0x94>
		if (_radio.scanner.hdr.ticks_xtal_to_start & XON_BITMASK) {
   10fb6:	f8d4 363c 	ldr.w	r3, [r4, #1596]	; 0x63c
   10fba:	2b00      	cmp	r3, #0
   10fbc:	da0c      	bge.n	10fd8 <event_scan_prepare+0x74>
			u32_t ticks_prepare_to_start =
   10fbe:	f8d4 1644 	ldr.w	r1, [r4, #1604]	; 0x644
   10fc2:	f8d4 2640 	ldr.w	r2, [r4, #1600]	; 0x640
				(_radio.scanner.hdr.ticks_xtal_to_start &
   10fc6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
				 ~XON_BITMASK) - ticks_prepare_to_start;
   10fca:	4291      	cmp	r1, r2
   10fcc:	bf2c      	ite	cs
   10fce:	ebc3 0301 	rsbcs	r3, r3, r1
   10fd2:	ebc3 0302 	rsbcc	r3, r3, r2
			ticks_at_expire_normal -=
   10fd6:	441d      	add	r5, r3
		s_mfy_sched_after_mstr_free_offset_get.param =
   10fd8:	4b0f      	ldr	r3, [pc, #60]	; (11018 <event_scan_prepare+0xb4>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   10fda:	2201      	movs	r2, #1
   10fdc:	4611      	mov	r1, r2
   10fde:	2000      	movs	r0, #0
		s_mfy_sched_after_mstr_free_offset_get.param =
   10fe0:	609d      	str	r5, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   10fe2:	f7fa fccb 	bl	b97c <mayfly_enqueue>
		LL_ASSERT(!retval);
   10fe6:	b138      	cbz	r0, 10ff8 <event_scan_prepare+0x94>
   10fe8:	4b05      	ldr	r3, [pc, #20]	; (11000 <event_scan_prepare+0x9c>)
   10fea:	9301      	str	r3, [sp, #4]
   10fec:	9300      	str	r3, [sp, #0]
   10fee:	4a05      	ldr	r2, [pc, #20]	; (11004 <event_scan_prepare+0xa0>)
   10ff0:	4b05      	ldr	r3, [pc, #20]	; (11008 <event_scan_prepare+0xa4>)
   10ff2:	4906      	ldr	r1, [pc, #24]	; (1100c <event_scan_prepare+0xa8>)
   10ff4:	4809      	ldr	r0, [pc, #36]	; (1101c <event_scan_prepare+0xb8>)
   10ff6:	e7c4      	b.n	10f82 <event_scan_prepare+0x1e>
}
   10ff8:	b005      	add	sp, #20
   10ffa:	bd30      	pop	{r4, r5, pc}
   10ffc:	20000bf0 	.word	0x20000bf0
   11000:	00023dbe 	.word	0x00023dbe
   11004:	00022d86 	.word	0x00022d86
   11008:	00025d1b 	.word	0x00025d1b
   1100c:	000272e8 	.word	0x000272e8
   11010:	000267ee 	.word	0x000267ee
   11014:	0001095d 	.word	0x0001095d
   11018:	2000a048 	.word	0x2000a048
   1101c:	000266b2 	.word	0x000266b2

00011020 <radio_event_ext_adv_prepare>:
{
   11020:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
   11022:	4a11      	ldr	r2, [pc, #68]	; (11068 <radio_event_ext_adv_prepare+0x48>)
   11024:	7c13      	ldrb	r3, [r2, #16]
   11026:	f003 04ff 	and.w	r4, r3, #255	; 0xff
   1102a:	b173      	cbz	r3, 1104a <radio_event_ext_adv_prepare+0x2a>
   1102c:	4b0f      	ldr	r3, [pc, #60]	; (1106c <radio_event_ext_adv_prepare+0x4c>)
   1102e:	9301      	str	r3, [sp, #4]
   11030:	9300      	str	r3, [sp, #0]
   11032:	4a0f      	ldr	r2, [pc, #60]	; (11070 <radio_event_ext_adv_prepare+0x50>)
   11034:	4b0f      	ldr	r3, [pc, #60]	; (11074 <radio_event_ext_adv_prepare+0x54>)
   11036:	4910      	ldr	r1, [pc, #64]	; (11078 <radio_event_ext_adv_prepare+0x58>)
   11038:	4810      	ldr	r0, [pc, #64]	; (1107c <radio_event_ext_adv_prepare+0x5c>)
   1103a:	f7f1 f931 	bl	22a0 <printk>
   1103e:	4040      	eors	r0, r0
   11040:	f380 8811 	msr	BASEPRI, r0
   11044:	f04f 0004 	mov.w	r0, #4
   11048:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_EXT_ADV;
   1104a:	2308      	movs	r3, #8
   1104c:	7413      	strb	r3, [r2, #16]
	event_common_prepare(ticks_at_expire, remainder,
   1104e:	9403      	str	r4, [sp, #12]
   11050:	4c0b      	ldr	r4, [pc, #44]	; (11080 <radio_event_ext_adv_prepare+0x60>)
   11052:	9402      	str	r4, [sp, #8]
   11054:	9301      	str	r3, [sp, #4]
   11056:	6a13      	ldr	r3, [r2, #32]
   11058:	9300      	str	r3, [sp, #0]
   1105a:	f102 031c 	add.w	r3, r2, #28
   1105e:	3218      	adds	r2, #24
   11060:	f7ff fe78 	bl	10d54 <event_common_prepare>
}
   11064:	b004      	add	sp, #16
   11066:	bd10      	pop	{r4, pc}
   11068:	20000bf0 	.word	0x20000bf0
   1106c:	00023dbe 	.word	0x00023dbe
   11070:	00022d86 	.word	0x00022d86
   11074:	00025c97 	.word	0x00025c97
   11078:	000272e8 	.word	0x000272e8
   1107c:	000267ee 	.word	0x000267ee
   11080:	00010521 	.word	0x00010521

00011084 <event_adv_stop>:
{
   11084:	b507      	push	{r0, r1, r2, lr}
	event_stop(0, 0, 0, (void *)STATE_ABORT);
   11086:	2005      	movs	r0, #5
   11088:	f7ff fe56 	bl	10d38 <event_stop.constprop.33>
	ticker_status =
   1108c:	f641 33c7 	movw	r3, #7111	; 0x1bc7
   11090:	2100      	movs	r1, #0
   11092:	9300      	str	r3, [sp, #0]
   11094:	2205      	movs	r2, #5
   11096:	4b0c      	ldr	r3, [pc, #48]	; (110c8 <event_adv_stop+0x44>)
   11098:	4608      	mov	r0, r1
   1109a:	f7fb facb 	bl	c634 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1109e:	f030 0302 	bics.w	r3, r0, #2
   110a2:	d00e      	beq.n	110c2 <event_adv_stop+0x3e>
   110a4:	4b09      	ldr	r3, [pc, #36]	; (110cc <event_adv_stop+0x48>)
   110a6:	9301      	str	r3, [sp, #4]
   110a8:	9300      	str	r3, [sp, #0]
   110aa:	4a09      	ldr	r2, [pc, #36]	; (110d0 <event_adv_stop+0x4c>)
   110ac:	4b09      	ldr	r3, [pc, #36]	; (110d4 <event_adv_stop+0x50>)
   110ae:	490a      	ldr	r1, [pc, #40]	; (110d8 <event_adv_stop+0x54>)
   110b0:	480a      	ldr	r0, [pc, #40]	; (110dc <event_adv_stop+0x58>)
   110b2:	f7f1 f8f5 	bl	22a0 <printk>
   110b6:	4040      	eors	r0, r0
   110b8:	f380 8811 	msr	BASEPRI, r0
   110bc:	f04f 0004 	mov.w	r0, #4
   110c0:	df02      	svc	2
}
   110c2:	b003      	add	sp, #12
   110c4:	f85d fb04 	ldr.w	pc, [sp], #4
   110c8:	00010005 	.word	0x00010005
   110cc:	00023dbe 	.word	0x00023dbe
   110d0:	00022d86 	.word	0x00022d86
   110d4:	00025d0c 	.word	0x00025d0c
   110d8:	000272e8 	.word	0x000272e8
   110dc:	00025f28 	.word	0x00025f28

000110e0 <mayfly_xtal_start>:
	clock_control_on(_radio.hf_clock, NULL);
   110e0:	4b02      	ldr	r3, [pc, #8]	; (110ec <mayfly_xtal_start+0xc>)
   110e2:	6818      	ldr	r0, [r3, #0]
   110e4:	6843      	ldr	r3, [r0, #4]
   110e6:	2100      	movs	r1, #0
   110e8:	681b      	ldr	r3, [r3, #0]
   110ea:	4718      	bx	r3
   110ec:	20000bf0 	.word	0x20000bf0

000110f0 <mayfly_xtal_stop>:
	clock_control_off(_radio.hf_clock, NULL);
   110f0:	4b02      	ldr	r3, [pc, #8]	; (110fc <mayfly_xtal_stop+0xc>)
   110f2:	6818      	ldr	r0, [r3, #0]
static inline int clock_control_off(struct device *dev,
				    clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->off(dev, sys);
   110f4:	6843      	ldr	r3, [r0, #4]
   110f6:	2100      	movs	r1, #0
   110f8:	685b      	ldr	r3, [r3, #4]
   110fa:	4718      	bx	r3
   110fc:	20000bf0 	.word	0x20000bf0

00011100 <chan_sel_2>:
{
   11100:	b5f0      	push	{r4, r5, r6, r7, lr}
	prn_e = counter ^ chan_id;
   11102:	4048      	eors	r0, r1
   11104:	2703      	movs	r7, #3
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
   11106:	ea4f 2e10 	mov.w	lr, r0, lsr #8
   1110a:	2608      	movs	r6, #8
	o = 0;
   1110c:	2400      	movs	r4, #0
		o |= (i & 1);
   1110e:	f00e 0501 	and.w	r5, lr, #1
   11112:	3e01      	subs	r6, #1
   11114:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
	for (iterate = 0; iterate < 8; iterate++) {
   11118:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
		o |= (i & 1);
   1111c:	b2ec      	uxtb	r4, r5
		i >>= 1;
   1111e:	ea4f 0e5e 	mov.w	lr, lr, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
   11122:	d1f4      	bne.n	1110e <chan_sel_2+0xe>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
   11124:	0225      	lsls	r5, r4, #8
   11126:	b22d      	sxth	r5, r5
   11128:	b2c0      	uxtb	r0, r0
   1112a:	f04f 0e08 	mov.w	lr, #8
	o = 0;
   1112e:	4634      	mov	r4, r6
		o |= (i & 1);
   11130:	f000 0601 	and.w	r6, r0, #1
   11134:	ea46 0444 	orr.w	r4, r6, r4, lsl #1
   11138:	f10e 36ff 	add.w	r6, lr, #4294967295	; 0xffffffff
	for (iterate = 0; iterate < 8; iterate++) {
   1113c:	f016 0eff 	ands.w	lr, r6, #255	; 0xff
		o |= (i & 1);
   11140:	b2e4      	uxtb	r4, r4
		i >>= 1;
   11142:	ea4f 0050 	mov.w	r0, r0, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
   11146:	d1f3      	bne.n	11130 <chan_sel_2+0x30>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
   11148:	432c      	orrs	r4, r5
	return ((u32_t)a * 17 + b) & 0xFFFF;
   1114a:	eb04 1404 	add.w	r4, r4, r4, lsl #4
   1114e:	3f01      	subs	r7, #1
   11150:	440c      	add	r4, r1
	for (iterate = 0; iterate < 3; iterate++) {
   11152:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
	return ((u32_t)a * 17 + b) & 0xFFFF;
   11156:	b2a0      	uxth	r0, r4
	for (iterate = 0; iterate < 3; iterate++) {
   11158:	d1d5      	bne.n	11106 <chan_sel_2+0x6>
	chan_next = prn_e % 37;
   1115a:	2425      	movs	r4, #37	; 0x25
	prn_e ^= chan_id;
   1115c:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
   1115e:	fbb1 f0f4 	udiv	r0, r1, r4
   11162:	fb04 1010 	mls	r0, r4, r0, r1
   11166:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
   11168:	08c4      	lsrs	r4, r0, #3
   1116a:	f000 0507 	and.w	r5, r0, #7
   1116e:	5d14      	ldrb	r4, [r2, r4]
   11170:	412c      	asrs	r4, r5
   11172:	07e4      	lsls	r4, r4, #31
   11174:	d407      	bmi.n	11186 <chan_sel_2+0x86>
		chan_index = ((u32_t)chan_count * prn_e) >> 16;
   11176:	4359      	muls	r1, r3
		chan_next = chan_sel_remap(chan_map, chan_index);
   11178:	f3c1 4107 	ubfx	r1, r1, #16, #8
   1117c:	4610      	mov	r0, r2
}
   1117e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		chan_next = chan_sel_remap(chan_map, chan_index);
   11182:	f7fd ba05 	b.w	e590 <chan_sel_remap>
}
   11186:	bdf0      	pop	{r4, r5, r6, r7, pc}

00011188 <ctrl_tx_enqueue>:
{
   11188:	b510      	push	{r4, lr}
	    !conn->empty &&
   1118a:	f890 40f8 	ldrb.w	r4, [r0, #248]	; 0xf8
   1118e:	f8d0 2140 	ldr.w	r2, [r0, #320]	; 0x140
	if (
   11192:	f014 0f80 	tst.w	r4, #128	; 0x80
   11196:	d118      	bne.n	111ca <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
   11198:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
	    !conn->empty &&
   1119c:	b1ab      	cbz	r3, 111ca <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
   1119e:	0724      	lsls	r4, r4, #28
   111a0:	d413      	bmi.n	111ca <ctrl_tx_enqueue+0x42>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
   111a2:	f8d0 4148 	ldr.w	r4, [r0, #328]	; 0x148
   111a6:	42a3      	cmp	r3, r4
			conn->pkt_tx_data = conn->pkt_tx_data->next;
   111a8:	bf04      	itt	eq
   111aa:	681c      	ldreq	r4, [r3, #0]
   111ac:	f8c0 4148 	streq.w	r4, [r0, #328]	; 0x148
		if (!conn->pkt_tx_ctrl) {
   111b0:	b992      	cbnz	r2, 111d8 <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head->next;
   111b2:	681a      	ldr	r2, [r3, #0]
   111b4:	600a      	str	r2, [r1, #0]
			conn->pkt_tx_head->next = node_tx;
   111b6:	6019      	str	r1, [r3, #0]
			conn->pkt_tx_ctrl = node_tx;
   111b8:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
	conn->pkt_tx_ctrl_last = node_tx;
   111bc:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
	if (node_tx->next == 0) {
   111c0:	680b      	ldr	r3, [r1, #0]
   111c2:	b90b      	cbnz	r3, 111c8 <ctrl_tx_enqueue+0x40>
		conn->pkt_tx_last = node_tx;
   111c4:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
   111c8:	bd10      	pop	{r4, pc}
		if (!conn->pkt_tx_ctrl) {
   111ca:	b92a      	cbnz	r2, 111d8 <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head;
   111cc:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
   111d0:	600b      	str	r3, [r1, #0]
			conn->pkt_tx_head = node_tx;
   111d2:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
   111d6:	e7ef      	b.n	111b8 <ctrl_tx_enqueue+0x30>
	node_tx->next = conn->pkt_tx_ctrl_last->next;
   111d8:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
   111dc:	681a      	ldr	r2, [r3, #0]
   111de:	600a      	str	r2, [r1, #0]
	conn->pkt_tx_ctrl_last->next = node_tx;
   111e0:	6019      	str	r1, [r3, #0]
   111e2:	e7eb      	b.n	111bc <ctrl_tx_enqueue+0x34>

000111e4 <ctrl_tx_sec_enqueue>:
{
   111e4:	b410      	push	{r4}
	if (conn->pause_tx) {
   111e6:	f890 40f8 	ldrb.w	r4, [r0, #248]	; 0xf8
   111ea:	0724      	lsls	r4, r4, #28
{
   111ec:	460a      	mov	r2, r1
	if (conn->pause_tx) {
   111ee:	d50f      	bpl.n	11210 <ctrl_tx_sec_enqueue+0x2c>
		if (!conn->pkt_tx_ctrl) {
   111f0:	f8d0 1140 	ldr.w	r1, [r0, #320]	; 0x140
   111f4:	b931      	cbnz	r1, 11204 <ctrl_tx_sec_enqueue+0x20>
			node_tx->next = conn->pkt_tx_head;
   111f6:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
   111fa:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_head = node_tx;
   111fc:	f8c0 213c 	str.w	r2, [r0, #316]	; 0x13c
}
   11200:	bc10      	pop	{r4}
   11202:	4770      	bx	lr
			node_tx->next = conn->pkt_tx_ctrl_last->next;
   11204:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
   11208:	6819      	ldr	r1, [r3, #0]
   1120a:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_ctrl_last->next = node_tx;
   1120c:	601a      	str	r2, [r3, #0]
   1120e:	e7f7      	b.n	11200 <ctrl_tx_sec_enqueue+0x1c>
}
   11210:	bc10      	pop	{r4}
		ctrl_tx_enqueue(conn, node_tx);
   11212:	f7ff bfb9 	b.w	11188 <ctrl_tx_enqueue>
	...

00011218 <feature_rsp_send>:
{
   11218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   1121a:	4f21      	ldr	r7, [pc, #132]	; (112a0 <feature_rsp_send+0x88>)
{
   1121c:	4605      	mov	r5, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   1121e:	f207 7064 	addw	r0, r7, #1892	; 0x764
{
   11222:	460e      	mov	r6, r1
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11224:	f7fa fadf 	bl	b7e6 <mem_acquire>
	if (!node_tx) {
   11228:	4604      	mov	r4, r0
   1122a:	b3b0      	cbz	r0, 1129a <feature_rsp_send+0x82>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
   1122c:	7933      	ldrb	r3, [r6, #4]
	       (features[1] << 8) | (features[2] << 16);
   1122e:	7971      	ldrb	r1, [r6, #5]
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
   11230:	f8d7 271c 	ldr.w	r2, [r7, #1820]	; 0x71c
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
   11234:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
   11238:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
   1123c:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
   11240:	f043 0310 	orr.w	r3, r3, #16
   11244:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	       (features[1] << 8) | (features[2] << 16);
   11248:	79b1      	ldrb	r1, [r6, #6]
   1124a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
   1124e:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
   11252:	f3c1 0110 	ubfx	r1, r1, #0, #17
   11256:	400b      	ands	r3, r1
   11258:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	_radio.conn_curr->common.fex_valid = 1;
   1125c:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
   11260:	f043 0320 	orr.w	r3, r3, #32
   11264:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11268:	7903      	ldrb	r3, [r0, #4]
   1126a:	f043 0303 	orr.w	r3, r3, #3
   1126e:	7103      	strb	r3, [r0, #4]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
   11270:	2208      	movs	r2, #8
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   11272:	2309      	movs	r3, #9
   11274:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   11276:	71c3      	strb	r3, [r0, #7]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
   11278:	2100      	movs	r1, #0
   1127a:	4410      	add	r0, r2
   1127c:	f7ef fab5 	bl	7ea <memset>
		conn->llcp_features & 0xFF;
   11280:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
	pdu_ctrl_tx->llctrl.feature_req.features[0] =
   11284:	7223      	strb	r3, [r4, #8]
		(conn->llcp_features >> 8) & 0xFF;
   11286:	0a1a      	lsrs	r2, r3, #8
		(conn->llcp_features >> 16) & 0xFF;
   11288:	0c1b      	lsrs	r3, r3, #16
	ctrl_tx_sec_enqueue(conn, node_tx);
   1128a:	4628      	mov	r0, r5
	pdu_ctrl_tx->llctrl.feature_req.features[1] =
   1128c:	7262      	strb	r2, [r4, #9]
	pdu_ctrl_tx->llctrl.feature_req.features[2] =
   1128e:	72a3      	strb	r3, [r4, #10]
	ctrl_tx_sec_enqueue(conn, node_tx);
   11290:	4621      	mov	r1, r4
   11292:	f7ff ffa7 	bl	111e4 <ctrl_tx_sec_enqueue>
	return 0;
   11296:	2000      	movs	r0, #0
   11298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
   1129a:	2001      	movs	r0, #1
}
   1129c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1129e:	bf00      	nop
   112a0:	20000bf0 	.word	0x20000bf0

000112a4 <start_enc_rsp_send>:
{
   112a4:	b510      	push	{r4, lr}
   112a6:	4604      	mov	r4, r0
	if (!pdu_ctrl_tx) {
   112a8:	b9c9      	cbnz	r1, 112de <start_enc_rsp_send+0x3a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   112aa:	480f      	ldr	r0, [pc, #60]	; (112e8 <start_enc_rsp_send+0x44>)
   112ac:	f7fa fa9b 	bl	b7e6 <mem_acquire>
		if (!node_tx) {
   112b0:	b1b8      	cbz	r0, 112e2 <start_enc_rsp_send+0x3e>
		pdu_ctrl_tx = (void *)node_tx->pdu_data;
   112b2:	1d01      	adds	r1, r0, #4
	conn->enc_tx = 1;
   112b4:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   112b8:	f043 0320 	orr.w	r3, r3, #32
   112bc:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   112c0:	780b      	ldrb	r3, [r1, #0]
   112c2:	f043 0303 	orr.w	r3, r3, #3
   112c6:	700b      	strb	r3, [r1, #0]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   112c8:	2301      	movs	r3, #1
   112ca:	704b      	strb	r3, [r1, #1]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   112cc:	2306      	movs	r3, #6
   112ce:	70cb      	strb	r3, [r1, #3]
	if (node_tx) {
   112d0:	b140      	cbz	r0, 112e4 <start_enc_rsp_send+0x40>
		ctrl_tx_enqueue(conn, node_tx);
   112d2:	4601      	mov	r1, r0
   112d4:	4620      	mov	r0, r4
   112d6:	f7ff ff57 	bl	11188 <ctrl_tx_enqueue>
	return 0;
   112da:	2000      	movs	r0, #0
   112dc:	bd10      	pop	{r4, pc}
	struct radio_pdu_node_tx *node_tx = NULL;
   112de:	2000      	movs	r0, #0
   112e0:	e7e8      	b.n	112b4 <start_enc_rsp_send+0x10>
			return 1;
   112e2:	2001      	movs	r0, #1
}
   112e4:	bd10      	pop	{r4, pc}
   112e6:	bf00      	nop
   112e8:	20001354 	.word	0x20001354

000112ec <reject_ext_ind_send>:
{
   112ec:	b570      	push	{r4, r5, r6, lr}
   112ee:	4604      	mov	r4, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   112f0:	480b      	ldr	r0, [pc, #44]	; (11320 <reject_ext_ind_send+0x34>)
{
   112f2:	460e      	mov	r6, r1
   112f4:	4615      	mov	r5, r2
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   112f6:	f7fa fa76 	bl	b7e6 <mem_acquire>
	if (!node_tx) {
   112fa:	b178      	cbz	r0, 1131c <reject_ext_ind_send+0x30>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   112fc:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
   112fe:	7206      	strb	r6, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11300:	f043 0303 	orr.w	r3, r3, #3
   11304:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   11306:	2303      	movs	r3, #3
   11308:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   1130a:	2311      	movs	r3, #17
   1130c:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
   1130e:	7245      	strb	r5, [r0, #9]
	ctrl_tx_enqueue(conn, node_tx);
   11310:	4601      	mov	r1, r0
   11312:	4620      	mov	r0, r4
   11314:	f7ff ff38 	bl	11188 <ctrl_tx_enqueue>
	return 0;
   11318:	2000      	movs	r0, #0
   1131a:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   1131c:	2001      	movs	r0, #1
}
   1131e:	bd70      	pop	{r4, r5, r6, pc}
   11320:	20001354 	.word	0x20001354
   11324:	00000000 	.word	0x00000000

00011328 <event_connection_prepare>:
{
   11328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
   1132c:	4db8      	ldr	r5, [pc, #736]	; (11610 <event_connection_prepare+0x2e8>)
{
   1132e:	b08f      	sub	sp, #60	; 0x3c
   11330:	461c      	mov	r4, r3
	LL_ASSERT(!_radio.ticker_id_prepare);
   11332:	7c2b      	ldrb	r3, [r5, #16]
{
   11334:	910c      	str	r1, [sp, #48]	; 0x30
   11336:	4680      	mov	r8, r0
	LL_ASSERT(!_radio.ticker_id_prepare);
   11338:	b173      	cbz	r3, 11358 <event_connection_prepare+0x30>
   1133a:	4bb6      	ldr	r3, [pc, #728]	; (11614 <event_connection_prepare+0x2ec>)
   1133c:	9301      	str	r3, [sp, #4]
   1133e:	9300      	str	r3, [sp, #0]
   11340:	4ab5      	ldr	r2, [pc, #724]	; (11618 <event_connection_prepare+0x2f0>)
   11342:	4bb6      	ldr	r3, [pc, #728]	; (1161c <event_connection_prepare+0x2f4>)
   11344:	49b6      	ldr	r1, [pc, #728]	; (11620 <event_connection_prepare+0x2f8>)
   11346:	48b7      	ldr	r0, [pc, #732]	; (11624 <event_connection_prepare+0x2fc>)
		LL_ASSERT(!retval);
   11348:	f7f0 ffaa 	bl	22a0 <printk>
   1134c:	4040      	eors	r0, r0
   1134e:	f380 8811 	msr	BASEPRI, r0
   11352:	f04f 0004 	mov.w	r0, #4
   11356:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_FIRST_CONNECTION +
   11358:	f894 3020 	ldrb.w	r3, [r4, #32]
   1135c:	3307      	adds	r3, #7
   1135e:	b2db      	uxtb	r3, r3
   11360:	742b      	strb	r3, [r5, #16]
	if (conn->role) {
   11362:	f994 301d 	ldrsb.w	r3, [r4, #29]
   11366:	2b00      	cmp	r3, #0
   11368:	da09      	bge.n	1137e <event_connection_prepare+0x56>
		    conn->slave.window_widening_periodic_us * (lazy + 1);
   1136a:	6d63      	ldr	r3, [r4, #84]	; 0x54
		conn->slave.window_widening_prepare_us +=
   1136c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
		    conn->slave.window_widening_periodic_us * (lazy + 1);
   1136e:	fb02 3303 	mla	r3, r2, r3, r3
		conn->slave.window_widening_prepare_us +=
   11372:	440b      	add	r3, r1
		    conn->slave.window_widening_max_us) {
   11374:	6da1      	ldr	r1, [r4, #88]	; 0x58
		conn->slave.window_widening_prepare_us +=
   11376:	65e3      	str	r3, [r4, #92]	; 0x5c
		if (conn->slave.window_widening_prepare_us >
   11378:	428b      	cmp	r3, r1
			conn->slave.window_widening_prepare_us =
   1137a:	bf88      	it	hi
   1137c:	65e1      	strhi	r1, [r4, #92]	; 0x5c
	conn->latency_prepare += lazy;
   1137e:	8d26      	ldrh	r6, [r4, #40]	; 0x28
	if ((conn->llcp_ack == conn->llcp_req) && !conn->pause_rx) {
   11380:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
	conn->latency_prepare += lazy;
   11384:	4432      	add	r2, r6
	event_counter = conn->event_counter + conn->latency_prepare;
   11386:	8c66      	ldrh	r6, [r4, #34]	; 0x22
	conn->latency_prepare += lazy;
   11388:	b292      	uxth	r2, r2
   1138a:	8522      	strh	r2, [r4, #40]	; 0x28
	event_counter = conn->event_counter + conn->latency_prepare;
   1138c:	4432      	add	r2, r6
   1138e:	b296      	uxth	r6, r2
	if ((conn->llcp_ack == conn->llcp_req) && !conn->pause_rx) {
   11390:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
   11394:	429a      	cmp	r2, r3
   11396:	f040 81ba 	bne.w	1170e <event_connection_prepare+0x3e6>
   1139a:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   1139e:	075f      	lsls	r7, r3, #29
   113a0:	f100 84ab 	bmi.w	11cfa <event_connection_prepare+0x9d2>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   113a4:	f894 20c1 	ldrb.w	r2, [r4, #193]	; 0xc1
   113a8:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
   113ac:	429a      	cmp	r2, r3
   113ae:	f000 8096 	beq.w	114de <event_connection_prepare+0x1b6>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
   113b2:	2005      	movs	r0, #5
   113b4:	f7ff fcc0 	bl	10d38 <event_stop.constprop.33>
	conn_upd = _radio.conn_upd;
   113b8:	f8d5 3790 	ldr.w	r3, [r5, #1936]	; 0x790
	if (conn_upd && (conn_upd != conn)) {
   113bc:	b113      	cbz	r3, 113c4 <event_connection_prepare+0x9c>
   113be:	429c      	cmp	r4, r3
   113c0:	f040 808d 	bne.w	114de <event_connection_prepare+0x1b6>
	switch (conn->llcp_conn_param.state) {
   113c4:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
   113c8:	f003 0307 	and.w	r3, r3, #7
   113cc:	2b05      	cmp	r3, #5
   113ce:	f200 815d 	bhi.w	1168c <event_connection_prepare+0x364>
   113d2:	e8df f013 	tbh	[pc, r3, lsl #1]
   113d6:	0006      	.short	0x0006
   113d8:	01310065 	.word	0x01310065
   113dc:	00840084 	.word	0x00840084
   113e0:	0084      	.short	0x0084
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   113e2:	4891      	ldr	r0, [pc, #580]	; (11628 <event_connection_prepare+0x300>)
   113e4:	f7fa f9ff 	bl	b7e6 <mem_acquire>
	if (!node_tx) {
   113e8:	4607      	mov	r7, r0
   113ea:	2800      	cmp	r0, #0
   113ec:	d077      	beq.n	114de <event_connection_prepare+0x1b6>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
   113ee:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
   113f2:	2204      	movs	r2, #4
   113f4:	f362 0302 	bfi	r3, r2, #0, #3
   113f8:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   113fc:	7903      	ldrb	r3, [r0, #4]
   113fe:	f043 0303 	orr.w	r3, r3, #3
   11402:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   11404:	2318      	movs	r3, #24
   11406:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   11408:	230f      	movs	r3, #15
   1140a:	71c3      	strb	r3, [r0, #7]
	p->interval_min = conn->llcp_conn_param.interval;
   1140c:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   11410:	8103      	strh	r3, [r0, #8]
	p->interval_max = conn->llcp_conn_param.interval;
   11412:	8143      	strh	r3, [r0, #10]
	p->latency = conn->llcp_conn_param.latency;
   11414:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   11418:	8183      	strh	r3, [r0, #12]
	p->timeout = conn->llcp_conn_param.timeout;
   1141a:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   1141e:	81c3      	strh	r3, [r0, #14]
	p->preferred_periodicity = 0;
   11420:	2300      	movs	r3, #0
   11422:	7403      	strb	r3, [r0, #16]
	p->offset0 = 0x0000;
   11424:	74c3      	strb	r3, [r0, #19]
   11426:	7503      	strb	r3, [r0, #20]
	p->offset1 = 0xffff;
   11428:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1142c:	7543      	strb	r3, [r0, #21]
   1142e:	7583      	strb	r3, [r0, #22]
	p->offset2 = 0xffff;
   11430:	75c3      	strb	r3, [r0, #23]
   11432:	7603      	strb	r3, [r0, #24]
	p->offset3 = 0xffff;
   11434:	7643      	strb	r3, [r0, #25]
   11436:	7683      	strb	r3, [r0, #26]
	p->offset4 = 0xffff;
   11438:	76c3      	strb	r3, [r0, #27]
   1143a:	7703      	strb	r3, [r0, #28]
	p->offset5 = 0xffff;
   1143c:	7743      	strb	r3, [r0, #29]
   1143e:	7783      	strb	r3, [r0, #30]
	p->reference_conn_event_count = event_counter;
   11440:	f8a0 6011 	strh.w	r6, [r0, #17]
	ctrl_tx_enqueue(conn, node_tx);
   11444:	4601      	mov	r1, r0
   11446:	4620      	mov	r0, r4
   11448:	f7ff fe9e 	bl	11188 <ctrl_tx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
   1144c:	6822      	ldr	r2, [r4, #0]
	conn->procedure_expire = conn->procedure_reload;
   1144e:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
	_radio.conn_upd = conn;
   11452:	f8c5 4790 	str.w	r4, [r5, #1936]	; 0x790
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
   11456:	2a00      	cmp	r2, #0
	conn->procedure_expire = conn->procedure_reload;
   11458:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
		conn->llcp_conn_param.ticks_ref = ticks_at_expire;
   1145c:	f8c4 80e0 	str.w	r8, [r4, #224]	; 0xe0
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
   11460:	da0b      	bge.n	1147a <event_connection_prepare+0x152>
			u32_t ticks_prepare_to_start =
   11462:	68a3      	ldr	r3, [r4, #8]
   11464:	6861      	ldr	r1, [r4, #4]
				(conn->hdr.ticks_xtal_to_start &
   11466:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
			conn->llcp_conn_param.ticks_ref -=
   1146a:	428b      	cmp	r3, r1
   1146c:	bf2c      	ite	cs
   1146e:	4443      	addcs	r3, r8
   11470:	eb08 0301 	addcc.w	r3, r8, r1
   11474:	1a9b      	subs	r3, r3, r2
   11476:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
		conn->llcp_conn_param.pdu_win_offset0 = (u16_t *)&p->offset0;
   1147a:	3713      	adds	r7, #19
		s_mfy_sched_offset.param = (void *)conn;
   1147c:	4b6b      	ldr	r3, [pc, #428]	; (1162c <event_connection_prepare+0x304>)
		conn->llcp_conn_param.pdu_win_offset0 = (u16_t *)&p->offset0;
   1147e:	f8c4 70dc 	str.w	r7, [r4, #220]	; 0xdc
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   11482:	2201      	movs	r2, #1
   11484:	4611      	mov	r1, r2
   11486:	2000      	movs	r0, #0
		s_mfy_sched_offset.param = (void *)conn;
   11488:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   1148a:	f7fa fa77 	bl	b97c <mayfly_enqueue>
		LL_ASSERT(!retval);
   1148e:	b330      	cbz	r0, 114de <event_connection_prepare+0x1b6>
   11490:	4b60      	ldr	r3, [pc, #384]	; (11614 <event_connection_prepare+0x2ec>)
   11492:	9301      	str	r3, [sp, #4]
   11494:	9300      	str	r3, [sp, #0]
   11496:	4b66      	ldr	r3, [pc, #408]	; (11630 <event_connection_prepare+0x308>)
   11498:	4a5f      	ldr	r2, [pc, #380]	; (11618 <event_connection_prepare+0x2f0>)
   1149a:	4961      	ldr	r1, [pc, #388]	; (11620 <event_connection_prepare+0x2f8>)
   1149c:	4865      	ldr	r0, [pc, #404]	; (11634 <event_connection_prepare+0x30c>)
   1149e:	e753      	b.n	11348 <event_connection_prepare+0x20>
	if (conn->llcp_conn_param.status) {
   114a0:	f894 70c3 	ldrb.w	r7, [r4, #195]	; 0xc3
   114a4:	b397      	cbz	r7, 1150c <event_connection_prepare+0x1e4>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   114a6:	4860      	ldr	r0, [pc, #384]	; (11628 <event_connection_prepare+0x300>)
   114a8:	f7fa f99d 	bl	b7e6 <mem_acquire>
		if (!node_tx) {
   114ac:	4601      	mov	r1, r0
   114ae:	b1b0      	cbz	r0, 114de <event_connection_prepare+0x1b6>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   114b0:	7903      	ldrb	r3, [r0, #4]
   114b2:	f043 0303 	orr.w	r3, r3, #3
   114b6:	7103      	strb	r3, [r0, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   114b8:	2311      	movs	r3, #17
   114ba:	71c3      	strb	r3, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   114bc:	2303      	movs	r3, #3
   114be:	7143      	strb	r3, [r0, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   114c0:	230f      	movs	r3, #15
   114c2:	7203      	strb	r3, [r0, #8]
		rej->error_code = conn->llcp_conn_param.status;
   114c4:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
   114c8:	7243      	strb	r3, [r0, #9]
		ctrl_tx_enqueue(conn, node_tx);
   114ca:	4620      	mov	r0, r4
   114cc:	f7ff fe5c 	bl	11188 <ctrl_tx_enqueue>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   114d0:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
   114d4:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
		_radio.conn_upd = NULL;
   114d8:	2300      	movs	r3, #0
   114da:	f8c5 3790 	str.w	r3, [r5, #1936]	; 0x790
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   114de:	f894 20f5 	ldrb.w	r2, [r4, #245]	; 0xf5
   114e2:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   114e6:	429a      	cmp	r2, r3
   114e8:	f000 810a 	beq.w	11700 <event_connection_prepare+0x3d8>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
   114ec:	2005      	movs	r0, #5
   114ee:	f7ff fc23 	bl	10d38 <event_stop.constprop.33>
	switch (conn->llcp_phy.state) {
   114f2:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   114f6:	f003 0203 	and.w	r2, r3, #3
   114fa:	2a03      	cmp	r2, #3
   114fc:	f200 8179 	bhi.w	117f2 <event_connection_prepare+0x4ca>
   11500:	e8df f012 	tbh	[pc, r2, lsl #1]
   11504:	00fe00cc 	.word	0x00fe00cc
   11508:	011800fe 	.word	0x011800fe
	if (!conn->role) {
   1150c:	f994 301d 	ldrsb.w	r3, [r4, #29]
   11510:	2b00      	cmp	r3, #0
   11512:	db3b      	blt.n	1158c <event_connection_prepare+0x264>
		if (conn->llcp_req != conn->llcp_ack) {
   11514:	f894 1074 	ldrb.w	r1, [r4, #116]	; 0x74
   11518:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
   1151c:	428b      	cmp	r3, r1
   1151e:	d1de      	bne.n	114de <event_connection_prepare+0x1b6>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   11520:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
		conn->llcp.conn_upd.win_offset_us = 0;
   11524:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   11528:	2205      	movs	r2, #5
   1152a:	f362 0302 	bfi	r3, r2, #0, #3
		if (conn->llcp_conn_param.preferred_periodicity) {
   1152e:	f894 20ca 	ldrb.w	r2, [r4, #202]	; 0xca
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   11532:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
		conn->llcp.conn_upd.win_size = 1;
   11536:	2301      	movs	r3, #1
   11538:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
				((conn->llcp_conn_param.interval /
   1153c:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
		if (conn->llcp_conn_param.preferred_periodicity) {
   11540:	b122      	cbz	r2, 1154c <event_connection_prepare+0x224>
				((conn->llcp_conn_param.interval /
   11542:	fb93 f3f2 	sdiv	r3, r3, r2
				  conn->llcp_conn_param.preferred_periodicity) +
   11546:	3301      	adds	r3, #1
			conn->llcp.conn_upd.interval =
   11548:	fb13 f302 	smulbb	r3, r3, r2
			conn->llcp.conn_upd.interval =
   1154c:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
		conn->llcp.conn_upd.latency = conn->llcp_conn_param.latency;
   11550:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   11554:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->llcp_conn_param.timeout;
   11558:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   1155c:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_SELECT;
   11560:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   11564:	2202      	movs	r2, #2
   11566:	f362 0301 	bfi	r3, r2, #0, #2
		conn->llcp.conn_upd.is_internal = !conn->llcp_conn_param.cmd;
   1156a:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
   1156e:	f082 0208 	eor.w	r2, r2, #8
   11572:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   11576:	f362 0382 	bfi	r3, r2, #2, #1
   1157a:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_ack--;
   1157e:	3901      	subs	r1, #1
		conn->llcp_type = LLCP_CONN_UPD;
   11580:	2301      	movs	r3, #1
   11582:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_ack--;
   11586:	f884 1075 	strb.w	r1, [r4, #117]	; 0x75
   1158a:	e7a8      	b.n	114de <event_connection_prepare+0x1b6>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   1158c:	4826      	ldr	r0, [pc, #152]	; (11628 <event_connection_prepare+0x300>)
   1158e:	f7fa f92a 	bl	b7e6 <mem_acquire>
	if (!node_tx) {
   11592:	4601      	mov	r1, r0
   11594:	2800      	cmp	r0, #0
   11596:	d0a2      	beq.n	114de <event_connection_prepare+0x1b6>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   11598:	7903      	ldrb	r3, [r0, #4]
   1159a:	f043 0303 	orr.w	r3, r3, #3
   1159e:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
   115a0:	2318      	movs	r3, #24
   115a2:	7143      	strb	r3, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
   115a4:	2310      	movs	r3, #16
   115a6:	71c3      	strb	r3, [r0, #7]
	rsp->interval_min = conn->llcp_conn_param.interval;
   115a8:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   115ac:	8103      	strh	r3, [r0, #8]
	rsp->interval_max = conn->llcp_conn_param.interval;
   115ae:	8143      	strh	r3, [r0, #10]
	rsp->latency = conn->llcp_conn_param.latency;
   115b0:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   115b4:	8183      	strh	r3, [r0, #12]
	rsp->timeout = conn->llcp_conn_param.timeout;
   115b6:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   115ba:	81c3      	strh	r3, [r0, #14]
	rsp->preferred_periodicity =
   115bc:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
   115c0:	7403      	strb	r3, [r0, #16]
	rsp->reference_conn_event_count =
   115c2:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
   115c6:	f8a0 3011 	strh.w	r3, [r0, #17]
	rsp->offset0 = conn->llcp_conn_param.offset0;
   115ca:	f8b4 30ce 	ldrh.w	r3, [r4, #206]	; 0xce
   115ce:	f8a0 3013 	strh.w	r3, [r0, #19]
	rsp->offset1 = conn->llcp_conn_param.offset1;
   115d2:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
   115d6:	f8a0 3015 	strh.w	r3, [r0, #21]
	rsp->offset2 = conn->llcp_conn_param.offset2;
   115da:	f8b4 30d2 	ldrh.w	r3, [r4, #210]	; 0xd2
   115de:	f8a0 3017 	strh.w	r3, [r0, #23]
	rsp->offset3 = conn->llcp_conn_param.offset3;
   115e2:	f8b4 30d4 	ldrh.w	r3, [r4, #212]	; 0xd4
   115e6:	f8a0 3019 	strh.w	r3, [r0, #25]
	rsp->offset4 = conn->llcp_conn_param.offset4;
   115ea:	f8b4 30d6 	ldrh.w	r3, [r4, #214]	; 0xd6
   115ee:	f8a0 301b 	strh.w	r3, [r0, #27]
	rsp->offset5 = conn->llcp_conn_param.offset5;
   115f2:	f8b4 30d8 	ldrh.w	r3, [r4, #216]	; 0xd8
   115f6:	f8a0 301d 	strh.w	r3, [r0, #29]
	ctrl_tx_enqueue(conn, node_tx);
   115fa:	4620      	mov	r0, r4
   115fc:	f7ff fdc4 	bl	11188 <ctrl_tx_enqueue>
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   11600:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
   11604:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
	_radio.conn_upd = NULL;
   11608:	f8c5 7790 	str.w	r7, [r5, #1936]	; 0x790
   1160c:	e767      	b.n	114de <event_connection_prepare+0x1b6>
   1160e:	bf00      	nop
   11610:	20000bf0 	.word	0x20000bf0
   11614:	00023dbe 	.word	0x00023dbe
   11618:	00022d86 	.word	0x00022d86
   1161c:	00025dd4 	.word	0x00025dd4
   11620:	000272e8 	.word	0x000272e8
   11624:	000267ee 	.word	0x000267ee
   11628:	20001354 	.word	0x20001354
   1162c:	2000a068 	.word	0x2000a068
   11630:	00025d70 	.word	0x00025d70
   11634:	000266b2 	.word	0x000266b2
	if (conn->pause_tx) {
   11638:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   1163c:	0718      	lsls	r0, r3, #28
   1163e:	f53f af4e 	bmi.w	114de <event_connection_prepare+0x1b6>
	node_rx = packet_rx_reserve_get(2);
   11642:	2002      	movs	r0, #2
   11644:	f7fc ffd6 	bl	e5f4 <packet_rx_reserve_get>
	if (!node_rx) {
   11648:	2800      	cmp	r0, #0
   1164a:	f43f af48 	beq.w	114de <event_connection_prepare+0x1b6>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   1164e:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
   11652:	2203      	movs	r2, #3
   11654:	f362 0302 	bfi	r3, r2, #0, #3
   11658:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	node_rx->hdr.handle = conn->handle;
   1165c:	8c23      	ldrh	r3, [r4, #32]
   1165e:	80c3      	strh	r3, [r0, #6]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   11660:	2301      	movs	r3, #1
   11662:	7103      	strb	r3, [r0, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   11664:	7a03      	ldrb	r3, [r0, #8]
   11666:	4313      	orrs	r3, r2
   11668:	7203      	strb	r3, [r0, #8]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   1166a:	2318      	movs	r3, #24
   1166c:	7243      	strb	r3, [r0, #9]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   1166e:	230f      	movs	r3, #15
   11670:	72c3      	strb	r3, [r0, #11]
	p->interval_min = conn->llcp_conn_param.interval;
   11672:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   11676:	8183      	strh	r3, [r0, #12]
	p->interval_max = conn->llcp_conn_param.interval;
   11678:	81c3      	strh	r3, [r0, #14]
	p->latency = conn->llcp_conn_param.latency;
   1167a:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   1167e:	8203      	strh	r3, [r0, #16]
	p->timeout = conn->llcp_conn_param.timeout;
   11680:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   11684:	8243      	strh	r3, [r0, #18]
	packet_rx_enqueue();
   11686:	f7fe f88f 	bl	f7a8 <packet_rx_enqueue>
   1168a:	e728      	b.n	114de <event_connection_prepare+0x1b6>
		LL_ASSERT(0);
   1168c:	4bb9      	ldr	r3, [pc, #740]	; (11974 <event_connection_prepare+0x64c>)
   1168e:	9301      	str	r3, [sp, #4]
   11690:	9300      	str	r3, [sp, #0]
   11692:	4bb9      	ldr	r3, [pc, #740]	; (11978 <event_connection_prepare+0x650>)
		LL_ASSERT(0);
   11694:	4ab9      	ldr	r2, [pc, #740]	; (1197c <event_connection_prepare+0x654>)
   11696:	49ba      	ldr	r1, [pc, #744]	; (11980 <event_connection_prepare+0x658>)
   11698:	48ba      	ldr	r0, [pc, #744]	; (11984 <event_connection_prepare+0x65c>)
   1169a:	e655      	b.n	11348 <event_connection_prepare+0x20>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   1169c:	48ba      	ldr	r0, [pc, #744]	; (11988 <event_connection_prepare+0x660>)
   1169e:	f7fa f8a2 	bl	b7e6 <mem_acquire>
		if (!node_tx) {
   116a2:	4601      	mov	r1, r0
   116a4:	b360      	cbz	r0, 11700 <event_connection_prepare+0x3d8>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   116a6:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
		conn->phy_pref_rx = conn->llcp_phy.rx;
   116aa:	f894 7039 	ldrb.w	r7, [r4, #57]	; 0x39
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   116ae:	2201      	movs	r2, #1
   116b0:	f362 0301 	bfi	r3, r2, #0, #2
   116b4:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		conn->phy_pref_tx = conn->llcp_phy.tx;
   116b8:	b2db      	uxtb	r3, r3
   116ba:	f3c3 0082 	ubfx	r0, r3, #2, #3
		conn->phy_pref_rx = conn->llcp_phy.rx;
   116be:	f3c3 1342 	ubfx	r3, r3, #5, #3
		conn->phy_pref_tx = conn->llcp_phy.tx;
   116c2:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
		conn->phy_pref_rx = conn->llcp_phy.rx;
   116c6:	f363 07c5 	bfi	r7, r3, #3, #3
   116ca:	f884 7039 	strb.w	r7, [r4, #57]	; 0x39
		conn->phy_pref_flags = conn->llcp_phy.flags;
   116ce:	f894 70f7 	ldrb.w	r7, [r4, #247]	; 0xf7
		conn->phy_pref_tx = conn->llcp_phy.tx;
   116d2:	f360 0202 	bfi	r2, r0, #0, #3
		conn->phy_pref_flags = conn->llcp_phy.flags;
   116d6:	f367 1286 	bfi	r2, r7, #6, #1
   116da:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   116de:	790a      	ldrb	r2, [r1, #4]
		pr->tx_phys = conn->llcp_phy.tx;
   116e0:	7208      	strb	r0, [r1, #8]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   116e2:	f042 0203 	orr.w	r2, r2, #3
   116e6:	710a      	strb	r2, [r1, #4]
		pdu_ctrl_tx->len =
   116e8:	2203      	movs	r2, #3
   116ea:	714a      	strb	r2, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
   116ec:	2216      	movs	r2, #22
		pr->rx_phys = conn->llcp_phy.rx;
   116ee:	724b      	strb	r3, [r1, #9]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
   116f0:	71ca      	strb	r2, [r1, #7]
		ctrl_tx_enqueue(conn, node_tx);
   116f2:	4620      	mov	r0, r4
   116f4:	f7ff fd48 	bl	11188 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
   116f8:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   116fc:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	if (conn->llcp_ack != conn->llcp_req) {
   11700:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
   11704:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   11708:	429a      	cmp	r2, r3
   1170a:	f000 82f6 	beq.w	11cfa <event_connection_prepare+0x9d2>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
   1170e:	2005      	movs	r0, #5
   11710:	f7ff fb12 	bl	10d38 <event_stop.constprop.33>
		switch (conn->llcp_type) {
   11714:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
   11718:	3b01      	subs	r3, #1
   1171a:	2b07      	cmp	r3, #7
   1171c:	f200 85a7 	bhi.w	1226e <event_connection_prepare+0xf46>
   11720:	e8df f013 	tbh	[pc, r3, lsl #1]
   11724:	02c4006c 	.word	0x02c4006c
   11728:	045e0343 	.word	0x045e0343
   1172c:	05a5048e 	.word	0x05a5048e
   11730:	04fa04e6 	.word	0x04fa04e6
		conn->llcp_phy.ack = conn->llcp_phy.req;
   11734:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
   11738:	f884 20f5 	strb.w	r2, [r4, #245]	; 0xf5
		if (conn->llcp_phy.tx & BIT(1)) {
   1173c:	f3c3 0282 	ubfx	r2, r3, #2, #3
   11740:	0791      	lsls	r1, r2, #30
   11742:	d544      	bpl.n	117ce <event_connection_prepare+0x4a6>
			conn->llcp_phy.tx = BIT(1);
   11744:	2202      	movs	r2, #2
			conn->llcp_phy.tx = 0;
   11746:	f362 0384 	bfi	r3, r2, #2, #3
   1174a:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		if (conn->llcp_phy.rx & BIT(1)) {
   1174e:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   11752:	095a      	lsrs	r2, r3, #5
   11754:	0790      	lsls	r0, r2, #30
   11756:	d543      	bpl.n	117e0 <event_connection_prepare+0x4b8>
			conn->llcp_phy.rx = BIT(1);
   11758:	2202      	movs	r2, #2
			conn->llcp_phy.rx = 0;
   1175a:	f362 1347 	bfi	r3, r2, #5, #3
   1175e:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		if (conn->llcp_phy.tx != conn->phy_tx) {
   11762:	f894 20f6 	ldrb.w	r2, [r4, #246]	; 0xf6
   11766:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1176a:	f3c2 0182 	ubfx	r1, r2, #2, #3
   1176e:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   11772:	428b      	cmp	r3, r1
   11774:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
			conn->llcp.phy_upd_ind.tx = conn->llcp_phy.tx;
   11778:	bf14      	ite	ne
   1177a:	f361 0384 	bfine	r3, r1, #2, #3
			conn->llcp.phy_upd_ind.tx = 0;
   1177e:	f36f 0384 	bfceq	r3, #2, #3
   11782:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		if (conn->llcp_phy.rx != conn->phy_rx) {
   11786:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
   1178a:	0952      	lsrs	r2, r2, #5
   1178c:	f003 0307 	and.w	r3, r3, #7
   11790:	4293      	cmp	r3, r2
   11792:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
			conn->llcp.phy_upd_ind.rx = conn->llcp_phy.rx;
   11796:	bf14      	ite	ne
   11798:	f362 1347 	bfine	r3, r2, #5, #3
			conn->llcp.phy_upd_ind.rx = 0;
   1179c:	f36f 1347 	bfceq	r3, #5, #3
   117a0:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.initiate = 1;
   117a4:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   117a8:	f894 20f7 	ldrb.w	r2, [r4, #247]	; 0xf7
   117ac:	f043 0301 	orr.w	r3, r3, #1
   117b0:	f3c2 0240 	ubfx	r2, r2, #1, #1
   117b4:	f362 0341 	bfi	r3, r2, #1, #1
   117b8:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_PHY_UPD;
   117bc:	2308      	movs	r3, #8
   117be:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_ack--;
   117c2:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
   117c6:	3b01      	subs	r3, #1
   117c8:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
   117cc:	e798      	b.n	11700 <event_connection_prepare+0x3d8>
		} else if (conn->llcp_phy.tx & BIT(0)) {
   117ce:	07d7      	lsls	r7, r2, #31
   117d0:	d501      	bpl.n	117d6 <event_connection_prepare+0x4ae>
			conn->llcp_phy.tx = BIT(0);
   117d2:	2201      	movs	r2, #1
   117d4:	e7b7      	b.n	11746 <event_connection_prepare+0x41e>
		} else if (conn->llcp_phy.tx & BIT(2)) {
   117d6:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.tx = BIT(2);
   117da:	bf18      	it	ne
   117dc:	2204      	movne	r2, #4
   117de:	e7b2      	b.n	11746 <event_connection_prepare+0x41e>
		} else if (conn->llcp_phy.rx & BIT(0)) {
   117e0:	07d1      	lsls	r1, r2, #31
   117e2:	d501      	bpl.n	117e8 <event_connection_prepare+0x4c0>
			conn->llcp_phy.rx = BIT(0);
   117e4:	2201      	movs	r2, #1
   117e6:	e7b8      	b.n	1175a <event_connection_prepare+0x432>
		} else if (conn->llcp_phy.rx & BIT(2)) {
   117e8:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.rx = BIT(2);
   117ec:	bf18      	it	ne
   117ee:	2204      	movne	r2, #4
   117f0:	e7b3      	b.n	1175a <event_connection_prepare+0x432>
		LL_ASSERT(0);
   117f2:	4b60      	ldr	r3, [pc, #384]	; (11974 <event_connection_prepare+0x64c>)
   117f4:	9301      	str	r3, [sp, #4]
   117f6:	9300      	str	r3, [sp, #0]
   117f8:	4b64      	ldr	r3, [pc, #400]	; (1198c <event_connection_prepare+0x664>)
   117fa:	e74b      	b.n	11694 <event_connection_prepare+0x36c>
	if (!conn_upd) {
   117fc:	f8d5 3790 	ldr.w	r3, [r5, #1936]	; 0x790
   11800:	b90b      	cbnz	r3, 11806 <event_connection_prepare+0x4de>
		_radio.conn_upd = conn;
   11802:	f8c5 4790 	str.w	r4, [r5, #1936]	; 0x790
	if (conn->llcp.conn_upd.state != LLCP_CUI_STATE_INPROG) {
   11806:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   1180a:	f013 0303 	ands.w	r3, r3, #3
   1180e:	d068      	beq.n	118e2 <event_connection_prepare+0x5ba>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11810:	485d      	ldr	r0, [pc, #372]	; (11988 <event_connection_prepare+0x660>)
   11812:	f7f9 ffe8 	bl	b7e6 <mem_acquire>
		if (!node_tx) {
   11816:	4607      	mov	r7, r0
   11818:	2800      	cmp	r0, #0
   1181a:	f000 826e 	beq.w	11cfa <event_connection_prepare+0x9d2>
		switch (conn->llcp.conn_upd.state) {
   1181e:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   11822:	f003 0303 	and.w	r3, r3, #3
   11826:	2b01      	cmp	r3, #1
   11828:	d059      	beq.n	118de <event_connection_prepare+0x5b6>
   1182a:	2b02      	cmp	r3, #2
   1182c:	d152      	bne.n	118d4 <event_connection_prepare+0x5ac>
			fp_mayfly_select_or_use =
   1182e:	4a58      	ldr	r2, [pc, #352]	; (11990 <event_connection_prepare+0x668>)
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
   11830:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   11834:	f36f 0301 	bfc	r3, #0, #2
   11838:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		event_counter + conn->latency + 6;
   1183c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   1183e:	3306      	adds	r3, #6
   11840:	4433      	add	r3, r6
   11842:	b29b      	uxth	r3, r3
	conn->llcp.conn_upd.instant =
   11844:	f8a4 3080 	strh.w	r3, [r4, #128]	; 0x80
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11848:	7939      	ldrb	r1, [r7, #4]
   1184a:	f041 0103 	orr.w	r1, r1, #3
   1184e:	7139      	strb	r1, [r7, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
   11850:	210c      	movs	r1, #12
   11852:	7179      	strb	r1, [r7, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
   11854:	2100      	movs	r1, #0
   11856:	71f9      	strb	r1, [r7, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size =
   11858:	f894 1088 	ldrb.w	r1, [r4, #136]	; 0x88
   1185c:	7239      	strb	r1, [r7, #8]
		win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
   1185e:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
   11862:	f240 40e2 	movw	r0, #1250	; 0x4e2
   11866:	fbb1 f1f0 	udiv	r1, r1, r0
   1186a:	f8a7 1009 	strh.w	r1, [r7, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
   1186e:	f8b4 107a 	ldrh.w	r1, [r4, #122]	; 0x7a
   11872:	f8a7 100b 	strh.w	r1, [r7, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
   11876:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
   1187a:	f8a7 100d 	strh.w	r1, [r7, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
   1187e:	f8b4 107e 	ldrh.w	r1, [r4, #126]	; 0x7e
   11882:	f8a7 100f 	strh.w	r1, [r7, #15]
	pdu_ctrl_tx->llctrl.conn_update_ind.instant =
   11886:	f8a7 3011 	strh.w	r3, [r7, #17]
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
   1188a:	6821      	ldr	r1, [r4, #0]
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
   1188c:	f8c4 8090 	str.w	r8, [r4, #144]	; 0x90
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
   11890:	2900      	cmp	r1, #0
   11892:	da0b      	bge.n	118ac <event_connection_prepare+0x584>
			u32_t ticks_prepare_to_start =
   11894:	68a3      	ldr	r3, [r4, #8]
   11896:	6860      	ldr	r0, [r4, #4]
				(conn->hdr.ticks_xtal_to_start &
   11898:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
			conn->llcp.conn_upd.ticks_anchor -=
   1189c:	4283      	cmp	r3, r0
   1189e:	bf2c      	ite	cs
   118a0:	4443      	addcs	r3, r8
   118a2:	eb08 0300 	addcc.w	r3, r8, r0
   118a6:	1a5b      	subs	r3, r3, r1
   118a8:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		conn->llcp.conn_upd.pdu_win_offset = (u16_t *)
   118ac:	f107 0309 	add.w	r3, r7, #9
   118b0:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		mayfly_sched_offset->fp = fp_mayfly_select_or_use;
   118b4:	4b37      	ldr	r3, [pc, #220]	; (11994 <event_connection_prepare+0x66c>)
   118b6:	60da      	str	r2, [r3, #12]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   118b8:	2201      	movs	r2, #1
   118ba:	4611      	mov	r1, r2
   118bc:	2000      	movs	r0, #0
		mayfly_sched_offset->param = (void *)conn;
   118be:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   118c0:	f7fa f85c 	bl	b97c <mayfly_enqueue>
		LL_ASSERT(!retval);
   118c4:	2800      	cmp	r0, #0
   118c6:	f000 8214 	beq.w	11cf2 <event_connection_prepare+0x9ca>
   118ca:	4b2a      	ldr	r3, [pc, #168]	; (11974 <event_connection_prepare+0x64c>)
   118cc:	9301      	str	r3, [sp, #4]
   118ce:	9300      	str	r3, [sp, #0]
   118d0:	4b31      	ldr	r3, [pc, #196]	; (11998 <event_connection_prepare+0x670>)
   118d2:	e5e1      	b.n	11498 <event_connection_prepare+0x170>
			LL_ASSERT(0);
   118d4:	4b27      	ldr	r3, [pc, #156]	; (11974 <event_connection_prepare+0x64c>)
   118d6:	9301      	str	r3, [sp, #4]
   118d8:	9300      	str	r3, [sp, #0]
   118da:	4b30      	ldr	r3, [pc, #192]	; (1199c <event_connection_prepare+0x674>)
   118dc:	e6da      	b.n	11694 <event_connection_prepare+0x36c>
			fp_mayfly_select_or_use = mayfly_sched_win_offset_use;
   118de:	4a30      	ldr	r2, [pc, #192]	; (119a0 <event_connection_prepare+0x678>)
   118e0:	e7a6      	b.n	11830 <event_connection_prepare+0x508>
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
   118e2:	f8b4 7080 	ldrh.w	r7, [r4, #128]	; 0x80
   118e6:	1bf7      	subs	r7, r6, r7
   118e8:	b2bf      	uxth	r7, r7
	} else if (instant_latency <= 0x7FFF) {
   118ea:	043a      	lsls	r2, r7, #16
   118ec:	f100 8205 	bmi.w	11cfa <event_connection_prepare+0x9d2>
		conn->llcp_ack = conn->llcp_req;
   118f0:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
   118f4:	f884 2075 	strb.w	r2, [r4, #117]	; 0x75
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   118f8:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
   118fc:	f894 20c1 	ldrb.w	r2, [r4, #193]	; 0xc1
   11900:	428a      	cmp	r2, r1
   11902:	d009      	beq.n	11918 <event_connection_prepare+0x5f0>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
   11904:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   11908:	f002 0207 	and.w	r2, r2, #7
   1190c:	2a05      	cmp	r2, #5
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   1190e:	bf04      	itt	eq
   11910:	f884 10c1 	strbeq.w	r1, [r4, #193]	; 0xc1
			conn->procedure_expire = 0;
   11914:	f8a4 3044 	strheq.w	r3, [r4, #68]	; 0x44
		if (_radio.conn_upd == conn) {
   11918:	f8d5 2790 	ldr.w	r2, [r5, #1936]	; 0x790
		_radio.ticker_id_prepare = 0;
   1191c:	2300      	movs	r3, #0
		if (_radio.conn_upd == conn) {
   1191e:	4294      	cmp	r4, r2
			_radio.conn_upd = NULL;
   11920:	bf08      	it	eq
   11922:	f8c5 3790 	streq.w	r3, [r5, #1936]	; 0x790
		_radio.ticker_id_prepare = 0;
   11926:	742b      	strb	r3, [r5, #16]
		if ((conn->llcp.conn_upd.interval !=
   11928:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
   1192a:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
   1192e:	429a      	cmp	r2, r3
   11930:	d114      	bne.n	1195c <event_connection_prepare+0x634>
		     conn->conn_interval) ||
   11932:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
   11936:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   11938:	4299      	cmp	r1, r3
   1193a:	d10f      	bne.n	1195c <event_connection_prepare+0x634>
		    (RADIO_CONN_EVENTS(conn->llcp.conn_upd.timeout *
   1193c:	f240 43e2 	movw	r3, #1250	; 0x4e2
   11940:	435a      	muls	r2, r3
   11942:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
   11946:	f242 7110 	movw	r1, #10000	; 0x2710
   1194a:	fb01 2303 	mla	r3, r1, r3, r2
   1194e:	3b01      	subs	r3, #1
   11950:	fb93 f3f2 	sdiv	r3, r3, r2
		    (conn->llcp.conn_upd.latency != conn->latency) ||
   11954:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
   11956:	b29b      	uxth	r3, r3
   11958:	429a      	cmp	r2, r3
   1195a:	d036      	beq.n	119ca <event_connection_prepare+0x6a2>
			node_rx = packet_rx_reserve_get(2);
   1195c:	2002      	movs	r0, #2
   1195e:	f7fc fe49 	bl	e5f4 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
   11962:	bb08      	cbnz	r0, 119a8 <event_connection_prepare+0x680>
   11964:	4b03      	ldr	r3, [pc, #12]	; (11974 <event_connection_prepare+0x64c>)
   11966:	9301      	str	r3, [sp, #4]
   11968:	9300      	str	r3, [sp, #0]
   1196a:	4b0c      	ldr	r3, [pc, #48]	; (1199c <event_connection_prepare+0x674>)
		LL_ASSERT(node_rx);
   1196c:	4a03      	ldr	r2, [pc, #12]	; (1197c <event_connection_prepare+0x654>)
   1196e:	4904      	ldr	r1, [pc, #16]	; (11980 <event_connection_prepare+0x658>)
   11970:	480c      	ldr	r0, [pc, #48]	; (119a4 <event_connection_prepare+0x67c>)
   11972:	e4e9      	b.n	11348 <event_connection_prepare+0x20>
   11974:	00023dbe 	.word	0x00023dbe
   11978:	00025d85 	.word	0x00025d85
   1197c:	00022d86 	.word	0x00022d86
   11980:	000272e8 	.word	0x000272e8
   11984:	00023fb5 	.word	0x00023fb5
   11988:	20001354 	.word	0x20001354
   1198c:	00025daa 	.word	0x00025daa
   11990:	0000f4f9 	.word	0x0000f4f9
   11994:	2000a058 	.word	0x2000a058
   11998:	00025d39 	.word	0x00025d39
   1199c:	00025d4d 	.word	0x00025d4d
   119a0:	00010231 	.word	0x00010231
   119a4:	000265de 	.word	0x000265de
			node_rx->hdr.handle = conn->handle;
   119a8:	8c23      	ldrh	r3, [r4, #32]
   119aa:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   119ac:	2308      	movs	r3, #8
   119ae:	7103      	strb	r3, [r0, #4]
			radio_le_conn_update_cmplt->status =
   119b0:	2300      	movs	r3, #0
   119b2:	72c3      	strb	r3, [r0, #11]
			radio_le_conn_update_cmplt->interval =
   119b4:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
   119b8:	8183      	strh	r3, [r0, #12]
			radio_le_conn_update_cmplt->latency =
   119ba:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
   119be:	81c3      	strh	r3, [r0, #14]
			radio_le_conn_update_cmplt->timeout =
   119c0:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
   119c4:	8203      	strh	r3, [r0, #16]
			packet_rx_enqueue();
   119c6:	f7fd feef 	bl	f7a8 <packet_rx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
   119ca:	6823      	ldr	r3, [r4, #0]
   119cc:	6866      	ldr	r6, [r4, #4]
   119ce:	2b00      	cmp	r3, #0
   119d0:	da09      	bge.n	119e6 <event_connection_prepare+0x6be>
			u32_t ticks_prepare_to_start =
   119d2:	68a0      	ldr	r0, [r4, #8]
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
   119d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
   119d8:	42b0      	cmp	r0, r6
   119da:	bf2c      	ite	cs
   119dc:	4480      	addcs	r8, r0
   119de:	44b0      	addcc	r8, r6
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
   119e0:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
   119e2:	eba8 0803 	sub.w	r8, r8, r3
		conn_interval_old = instant_latency * conn->conn_interval;
   119e6:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
			conn->llcp.conn_upd.interval;
   119e8:	f8b4 a07a 	ldrh.w	sl, [r4, #122]	; 0x7a
   119ec:	49a0      	ldr	r1, [pc, #640]	; (11c70 <event_connection_prepare+0x948>)
		conn_interval_old = instant_latency * conn->conn_interval;
   119ee:	fb13 f307 	smulbb	r3, r3, r7
   119f2:	b29b      	uxth	r3, r3
		latency = conn_interval_old /
   119f4:	fbb3 f2fa 	udiv	r2, r3, sl
   119f8:	fa1f f982 	uxth.w	r9, r2
		conn_interval_new = latency *
   119fc:	fb1a f009 	smulbb	r0, sl, r9
   11a00:	b280      	uxth	r0, r0
		if (conn_interval_new > conn_interval_old) {
   11a02:	4283      	cmp	r3, r0
   11a04:	f080 80bf 	bcs.w	11b86 <event_connection_prepare+0x85e>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
   11a08:	1ac0      	subs	r0, r0, r3
   11a0a:	f240 1223 	movw	r2, #291	; 0x123
   11a0e:	4342      	muls	r2, r0
   11a10:	17c3      	asrs	r3, r0, #31
   11a12:	fb01 2303 	mla	r3, r1, r3, r2
   11a16:	fba0 0101 	umull	r0, r1, r0, r1
   11a1a:	4419      	add	r1, r3
   11a1c:	a392      	add	r3, pc, #584	; (adr r3, 11c68 <event_connection_prepare+0x940>)
   11a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
   11a22:	f7ee fc39 	bl	298 <__aeabi_uldivmod>
   11a26:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   11a2a:	eb00 0308 	add.w	r3, r0, r8
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
   11a2e:	930b      	str	r3, [sp, #44]	; 0x2c
		conn->latency_prepare -= (instant_latency - latency);
   11a30:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   11a32:	f8df b274 	ldr.w	fp, [pc, #628]	; 11ca8 <event_connection_prepare+0x980>
   11a36:	1bdb      	subs	r3, r3, r7
   11a38:	444b      	add	r3, r9
   11a3a:	8523      	strh	r3, [r4, #40]	; 0x28
		ticks_slot_offset =
   11a3c:	6823      	ldr	r3, [r4, #0]
   11a3e:	429e      	cmp	r6, r3
   11a40:	bf38      	it	cc
   11a42:	461e      	movcc	r6, r3
		if (conn->role) {
   11a44:	f994 301d 	ldrsb.w	r3, [r4, #29]
		ticks_slot_offset =
   11a48:	960d      	str	r6, [sp, #52]	; 0x34
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
   11a4a:	f240 48e2 	movw	r8, #1250	; 0x4e2
		if (conn->role) {
   11a4e:	2b00      	cmp	r3, #0
   11a50:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
   11a54:	930c      	str	r3, [sp, #48]	; 0x30
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
   11a56:	fb08 f60a 	mul.w	r6, r8, sl
		if (conn->role) {
   11a5a:	f280 80a5 	bge.w	11ba8 <event_connection_prepare+0x880>
				conn->slave.window_widening_periodic_us *
   11a5e:	6d63      	ldr	r3, [r4, #84]	; 0x54
			conn->slave.window_widening_prepare_us -=
   11a60:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   11a62:	fb03 2717 	mls	r7, r3, r7, r2
				(((gc_lookup_ppm[_radio.sca] +
   11a66:	f895 3728 	ldrb.w	r3, [r5, #1832]	; 0x728
   11a6a:	4a82      	ldr	r2, [pc, #520]	; (11c74 <event_connection_prepare+0x94c>)
   11a6c:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
				   gc_lookup_ppm[conn->slave.sca]) *
   11a70:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   11a74:	f3c3 0382 	ubfx	r3, r3, #2, #3
   11a78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				conn->llcp.conn_upd.win_size * 1250;
   11a7c:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
				(((gc_lookup_ppm[_radio.sca] +
   11a80:	441d      	add	r5, r3
				   gc_lookup_ppm[conn->slave.sca]) *
   11a82:	4375      	muls	r5, r6
				  conn_interval_us) + (1000000 - 1)) / 1000000;
   11a84:	f505 2574 	add.w	r5, r5, #999424	; 0xf4000
   11a88:	4b7b      	ldr	r3, [pc, #492]	; (11c78 <event_connection_prepare+0x950>)
				conn->llcp.conn_upd.win_size * 1250;
   11a8a:	fb08 f202 	mul.w	r2, r8, r2
				  conn_interval_us) + (1000000 - 1)) / 1000000;
   11a8e:	f205 253f 	addw	r5, r5, #575	; 0x23f
   11a92:	fbb5 f5f3 	udiv	r5, r5, r3
				(conn_interval_us >> 1) - RADIO_TIFS;
   11a96:	0873      	lsrs	r3, r6, #1
				conn->slave.window_widening_periodic_us *
   11a98:	fb05 f009 	mul.w	r0, r5, r9
				(conn_interval_us >> 1) - RADIO_TIFS;
   11a9c:	3b96      	subs	r3, #150	; 0x96
			conn->slave.window_widening_prepare_us +=
   11a9e:	4407      	add	r7, r0
			conn->slave.window_size_prepare_us =
   11aa0:	6662      	str	r2, [r4, #100]	; 0x64
			conn->slave.ticks_to_offset = 0;
   11aa2:	2200      	movs	r2, #0
			conn->slave.window_widening_prepare_us +=
   11aa4:	429f      	cmp	r7, r3
   11aa6:	bf94      	ite	ls
   11aa8:	65e7      	strls	r7, [r4, #92]	; 0x5c
   11aaa:	65e3      	strhi	r3, [r4, #92]	; 0x5c
			conn->slave.window_widening_periodic_us =
   11aac:	6565      	str	r5, [r4, #84]	; 0x54
			conn->slave.window_widening_max_us =
   11aae:	65a3      	str	r3, [r4, #88]	; 0x58
			conn->slave.ticks_to_offset = 0;
   11ab0:	6722      	str	r2, [r4, #112]	; 0x70
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
   11ab2:	fba0 010b 	umull	r0, r1, r0, fp
   11ab6:	a36c      	add	r3, pc, #432	; (adr r3, 11c68 <event_connection_prepare+0x940>)
   11ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
   11abc:	f7ee fbec 	bl	298 <__aeabi_uldivmod>
   11ac0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11ac2:	1a1b      	subs	r3, r3, r0
   11ac4:	930b      	str	r3, [sp, #44]	; 0x2c
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
   11ac6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11ac8:	fbb3 f0f8 	udiv	r0, r3, r8
   11acc:	fb08 f000 	mul.w	r0, r8, r0
   11ad0:	a365      	add	r3, pc, #404	; (adr r3, 11c68 <event_connection_prepare+0x940>)
   11ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
   11ad6:	fba0 010b 	umull	r0, r1, r0, fp
   11ada:	f7ee fbdd 	bl	298 <__aeabi_uldivmod>
			periodic_us -= conn->slave.window_widening_periodic_us;
   11ade:	1b75      	subs	r5, r6, r5
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
   11ae0:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
   11ae4:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
		conn->latency = conn->llcp.conn_upd.latency;
   11ae8:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
   11aec:	84e2      	strh	r2, [r4, #38]	; 0x26
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
   11aee:	f242 7110 	movw	r1, #10000	; 0x2710
   11af2:	fb01 6303 	mla	r3, r1, r3, r6
   11af6:	3b01      	subs	r3, #1
   11af8:	fbb3 f3f6 	udiv	r3, r3, r6
   11afc:	87e3      	strh	r3, [r4, #62]	; 0x3e
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   11afe:	4b5f      	ldr	r3, [pc, #380]	; (11c7c <event_connection_prepare+0x954>)
		conn->conn_interval = conn->llcp.conn_upd.interval;
   11b00:	f8a4 a024 	strh.w	sl, [r4, #36]	; 0x24
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   11b04:	4433      	add	r3, r6
   11b06:	fbb3 f3f6 	udiv	r3, r3, r6
   11b0a:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   11b0e:	4b5c      	ldr	r3, [pc, #368]	; (11c80 <event_connection_prepare+0x958>)
   11b10:	4433      	add	r3, r6
   11b12:	fbb3 f6f6 	udiv	r6, r3, r6
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   11b16:	1d93      	adds	r3, r2, #6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   11b18:	b2b1      	uxth	r1, r6
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   11b1a:	4299      	cmp	r1, r3
   11b1c:	bfc4      	itt	gt
   11b1e:	f5c2 437f 	rsbgt	r3, r2, #65280	; 0xff00
   11b22:	33fa      	addgt	r3, #250	; 0xfa
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   11b24:	f8a4 104a 	strh.w	r1, [r4, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   11b28:	bfc8      	it	gt
   11b2a:	18c9      	addgt	r1, r1, r3
		if (!conn->llcp.conn_upd.is_internal) {
   11b2c:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   11b30:	bfc8      	it	gt
   11b32:	b289      	uxthgt	r1, r1
		if (!conn->llcp.conn_upd.is_internal) {
   11b34:	f013 0304 	ands.w	r3, r3, #4
			conn->supervision_expire = 0;
   11b38:	bf08      	it	eq
   11b3a:	f8a4 3040 	strheq.w	r3, [r4, #64]	; 0x40
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   11b3e:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
		mayfly_was_enabled =
   11b42:	2000      	movs	r0, #0
   11b44:	2101      	movs	r1, #1
   11b46:	f007 fa27 	bl	18f98 <mayfly_is_enabled>
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
   11b4a:	2200      	movs	r2, #0
   11b4c:	2101      	movs	r1, #1
		mayfly_was_enabled =
   11b4e:	4681      	mov	r9, r0
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
   11b50:	4610      	mov	r0, r2
   11b52:	f7f9 feeb 	bl	b92c <mayfly_enable>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   11b56:	f894 2020 	ldrb.w	r2, [r4, #32]
		ticker_status =
   11b5a:	f641 63d3 	movw	r3, #7891	; 0x1ed3
   11b5e:	2100      	movs	r1, #0
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   11b60:	3207      	adds	r2, #7
		ticker_status =
   11b62:	9300      	str	r3, [sp, #0]
   11b64:	b2d2      	uxtb	r2, r2
   11b66:	4b47      	ldr	r3, [pc, #284]	; (11c84 <event_connection_prepare+0x95c>)
   11b68:	4608      	mov	r0, r1
   11b6a:	f7fa fd63 	bl	c634 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   11b6e:	f030 0802 	bics.w	r8, r0, #2
   11b72:	d026      	beq.n	11bc2 <event_connection_prepare+0x89a>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   11b74:	4b44      	ldr	r3, [pc, #272]	; (11c88 <event_connection_prepare+0x960>)
   11b76:	9301      	str	r3, [sp, #4]
   11b78:	9300      	str	r3, [sp, #0]
   11b7a:	4a44      	ldr	r2, [pc, #272]	; (11c8c <event_connection_prepare+0x964>)
   11b7c:	4b44      	ldr	r3, [pc, #272]	; (11c90 <event_connection_prepare+0x968>)
   11b7e:	4945      	ldr	r1, [pc, #276]	; (11c94 <event_connection_prepare+0x96c>)
   11b80:	4845      	ldr	r0, [pc, #276]	; (11c98 <event_connection_prepare+0x970>)
   11b82:	f7ff bbe1 	b.w	11348 <event_connection_prepare+0x20>
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
   11b86:	fb0a 3212 	mls	r2, sl, r2, r3
   11b8a:	b292      	uxth	r2, r2
   11b8c:	fba2 0101 	umull	r0, r1, r2, r1
   11b90:	f240 1323 	movw	r3, #291	; 0x123
   11b94:	fb03 1102 	mla	r1, r3, r2, r1
   11b98:	a333      	add	r3, pc, #204	; (adr r3, 11c68 <event_connection_prepare+0x940>)
   11b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
   11b9e:	f7ee fb7b 	bl	298 <__aeabi_uldivmod>
   11ba2:	eba8 0300 	sub.w	r3, r8, r0
   11ba6:	e742      	b.n	11a2e <event_connection_prepare+0x706>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
   11ba8:	990c      	ldr	r1, [sp, #48]	; 0x30
   11baa:	a32f      	add	r3, pc, #188	; (adr r3, 11c68 <event_connection_prepare+0x940>)
   11bac:	e9d3 2300 	ldrd	r2, r3, [r3]
   11bb0:	fba1 010b 	umull	r0, r1, r1, fp
   11bb4:	f7ee fb70 	bl	298 <__aeabi_uldivmod>
   11bb8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_win_offset += 1;
   11bbc:	1c47      	adds	r7, r0, #1
		periodic_us = conn_interval_us;
   11bbe:	4635      	mov	r5, r6
   11bc0:	e790      	b.n	11ae4 <event_connection_prepare+0x7bc>
				     HAL_TICKER_US_TO_TICKS(periodic_us),
   11bc2:	fba5 ab0b 	umull	sl, fp, r5, fp
   11bc6:	a328      	add	r3, pc, #160	; (adr r3, 11c68 <event_connection_prepare+0x940>)
   11bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
   11bcc:	4650      	mov	r0, sl
   11bce:	4659      	mov	r1, fp
   11bd0:	f7ee fb62 	bl	298 <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(periodic_us),
   11bd4:	4a31      	ldr	r2, [pc, #196]	; (11c9c <event_connection_prepare+0x974>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   11bd6:	f894 6020 	ldrb.w	r6, [r4, #32]
   11bda:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
				     HAL_TICKER_REMAINDER(periodic_us),
   11bde:	2307      	movs	r3, #7
   11be0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   11be4:	2100      	movs	r1, #0
   11be6:	4343      	muls	r3, r0
   11be8:	fb02 3301 	mla	r3, r2, r1, r3
   11bec:	fba0 0102 	umull	r0, r1, r0, r2
   11bf0:	ebba 0000 	subs.w	r0, sl, r0
   11bf4:	4419      	add	r1, r3
   11bf6:	eb6b 0101 	sbc.w	r1, fp, r1
   11bfa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11bfe:	2300      	movs	r3, #0
   11c00:	f7ee fb4a 	bl	298 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   11c04:	68e3      	ldr	r3, [r4, #12]
   11c06:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   11c08:	f994 e01d 	ldrsb.w	lr, [r4, #29]
   11c0c:	4924      	ldr	r1, [pc, #144]	; (11ca0 <event_connection_prepare+0x978>)
		ticker_status =
   11c0e:	9002      	str	r0, [sp, #8]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   11c10:	441a      	add	r2, r3
   11c12:	4613      	mov	r3, r2
   11c14:	4a23      	ldr	r2, [pc, #140]	; (11ca4 <event_connection_prepare+0x97c>)
		ticker_status =
   11c16:	9304      	str	r3, [sp, #16]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   11c18:	ea12 022e 	ands.w	r2, r2, lr, asr #32
   11c1c:	bf38      	it	cc
   11c1e:	460a      	movcc	r2, r1
   11c20:	3607      	adds	r6, #7
		ticker_status =
   11c22:	f641 61e3 	movw	r1, #7907	; 0x1ee3
   11c26:	9108      	str	r1, [sp, #32]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   11c28:	b2f6      	uxtb	r6, r6
		ticker_status =
   11c2a:	4916      	ldr	r1, [pc, #88]	; (11c84 <event_connection_prepare+0x95c>)
   11c2c:	9107      	str	r1, [sp, #28]
   11c2e:	9205      	str	r2, [sp, #20]
   11c30:	9406      	str	r4, [sp, #24]
   11c32:	f8cd 800c 	str.w	r8, [sp, #12]
   11c36:	9501      	str	r5, [sp, #4]
   11c38:	9700      	str	r7, [sp, #0]
   11c3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11c3c:	4632      	mov	r2, r6
   11c3e:	4641      	mov	r1, r8
   11c40:	4640      	mov	r0, r8
   11c42:	f7fa fc59 	bl	c4f8 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   11c46:	f030 0002 	bics.w	r0, r0, #2
   11c4a:	d193      	bne.n	11b74 <event_connection_prepare+0x84c>
		if (mayfly_was_enabled) {
   11c4c:	f1b9 0f00 	cmp.w	r9, #0
   11c50:	f000 8385 	beq.w	1235e <event_connection_prepare+0x1036>
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
   11c54:	2201      	movs	r2, #1
   11c56:	4611      	mov	r1, r2
}
   11c58:	b00f      	add	sp, #60	; 0x3c
   11c5a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
   11c5e:	f7f9 be65 	b.w	b92c <mayfly_enable>
   11c62:	bf00      	nop
   11c64:	f3af 8000 	nop.w
   11c68:	1afd498d 	.word	0x1afd498d
   11c6c:	00000007 	.word	0x00000007
   11c70:	09ce5400 	.word	0x09ce5400
   11c74:	000261fa 	.word	0x000261fa
   11c78:	000f4240 	.word	0x000f4240
   11c7c:	026259ff 	.word	0x026259ff
   11c80:	01c9c37f 	.word	0x01c9c37f
   11c84:	0000f9bd 	.word	0x0000f9bd
   11c88:	00023dbe 	.word	0x00023dbe
   11c8c:	00022d86 	.word	0x00022d86
   11c90:	00025d4d 	.word	0x00025d4d
   11c94:	000272e8 	.word	0x000272e8
   11c98:	00025f28 	.word	0x00025f28
   11c9c:	1afd498d 	.word	0x1afd498d
   11ca0:	00012511 	.word	0x00012511
   11ca4:	00012515 	.word	0x00012515
   11ca8:	3b9aca00 	.word	0x3b9aca00
	if (conn->llcp.chan_map.initiate) {
   11cac:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   11cb0:	2b00      	cmp	r3, #0
   11cb2:	d05e      	beq.n	11d72 <event_connection_prepare+0xa4a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11cb4:	48c9      	ldr	r0, [pc, #804]	; (11fdc <event_connection_prepare+0xcb4>)
   11cb6:	f7f9 fd96 	bl	b7e6 <mem_acquire>
		if (node_tx) {
   11cba:	4607      	mov	r7, r0
   11cbc:	b1e8      	cbz	r0, 11cfa <event_connection_prepare+0x9d2>
			conn->llcp.chan_map.initiate = 0;
   11cbe:	2300      	movs	r3, #0
   11cc0:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
				event_counter + conn->latency + 6;
   11cc4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   11cc6:	3306      	adds	r3, #6
   11cc8:	4433      	add	r3, r6
			conn->llcp.chan_map.instant =
   11cca:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11cce:	7903      	ldrb	r3, [r0, #4]
   11cd0:	f043 0303 	orr.w	r3, r3, #3
   11cd4:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   11cd6:	2308      	movs	r3, #8
   11cd8:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
   11cda:	2301      	movs	r3, #1
   11cdc:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
   11cde:	2205      	movs	r2, #5
   11ce0:	f104 0179 	add.w	r1, r4, #121	; 0x79
   11ce4:	3008      	adds	r0, #8
   11ce6:	f7ee fd54 	bl	792 <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
   11cea:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
   11cee:	f8a7 300d 	strh.w	r3, [r7, #13]
			ctrl_tx_enqueue(conn, node_tx);
   11cf2:	4639      	mov	r1, r7
   11cf4:	4620      	mov	r0, r4
   11cf6:	f7ff fa47 	bl	11188 <ctrl_tx_enqueue>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
   11cfa:	f894 20b1 	ldrb.w	r2, [r4, #177]	; 0xb1
   11cfe:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
   11d02:	429a      	cmp	r2, r3
   11d04:	d01e      	beq.n	11d44 <event_connection_prepare+0xa1c>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
   11d06:	2005      	movs	r0, #5
   11d08:	f7ff f816 	bl	10d38 <event_stop.constprop.33>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11d0c:	48b3      	ldr	r0, [pc, #716]	; (11fdc <event_connection_prepare+0xcb4>)
   11d0e:	f7f9 fd6a 	bl	b7e6 <mem_acquire>
		if (node_tx) {
   11d12:	4601      	mov	r1, r0
   11d14:	b1b0      	cbz	r0, 11d44 <event_connection_prepare+0xa1c>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
   11d16:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
   11d1a:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11d1e:	7903      	ldrb	r3, [r0, #4]
   11d20:	f043 0303 	orr.w	r3, r3, #3
   11d24:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   11d26:	2302      	movs	r3, #2
   11d28:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
   11d2a:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.terminate_ind.error_code =
   11d2c:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
   11d30:	7203      	strb	r3, [r0, #8]
			ctrl_tx_enqueue(conn, node_tx);
   11d32:	4620      	mov	r0, r4
   11d34:	f7ff fa28 	bl	11188 <ctrl_tx_enqueue>
			conn->procedure_expire = conn->supervision_reload;
   11d38:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
			if (conn->procedure_expire <= 1) {
   11d3a:	2b01      	cmp	r3, #1
				conn->procedure_expire++;
   11d3c:	bf98      	it	ls
   11d3e:	3301      	addls	r3, #1
   11d40:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	if (conn->llcp_length.ack != conn->llcp_length.req) {
   11d44:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
   11d48:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   11d4c:	429a      	cmp	r2, r3
   11d4e:	f000 82ed 	beq.w	1232c <event_connection_prepare+0x1004>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
   11d52:	2005      	movs	r0, #5
   11d54:	f7fe fff0 	bl	10d38 <event_stop.constprop.33>
	switch (conn->llcp_length.state) {
   11d58:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   11d5c:	f003 0303 	and.w	r3, r3, #3
   11d60:	2b03      	cmp	r3, #3
   11d62:	f200 830e 	bhi.w	12382 <event_connection_prepare+0x105a>
   11d66:	e8df f013 	tbh	[pc, r3, lsl #1]
   11d6a:	0288      	.short	0x0288
   11d6c:	02e102e1 	.word	0x02e102e1
   11d70:	02fd      	.short	0x02fd
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
   11d72:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
   11d76:	1af3      	subs	r3, r6, r3
   11d78:	041f      	lsls	r7, r3, #16
   11d7a:	d4be      	bmi.n	11cfa <event_connection_prepare+0x9d2>
		conn->llcp_ack = conn->llcp_req;
   11d7c:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   11d80:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		memcpy(&conn->data_chan_map[0],
   11d84:	f104 0717 	add.w	r7, r4, #23
   11d88:	2205      	movs	r2, #5
   11d8a:	f104 0179 	add.w	r1, r4, #121	; 0x79
   11d8e:	4638      	mov	r0, r7
   11d90:	f7ee fcff 	bl	792 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
   11d94:	2105      	movs	r1, #5
   11d96:	4638      	mov	r0, r7
   11d98:	f7f9 fed0 	bl	bb3c <util_ones_count_get>
		conn->data_chan_count =
   11d9c:	7f63      	ldrb	r3, [r4, #29]
   11d9e:	f360 0305 	bfi	r3, r0, #0, #6
   11da2:	7763      	strb	r3, [r4, #29]
		conn->chm_update = 1;
   11da4:	2301      	movs	r3, #1
   11da6:	7723      	strb	r3, [r4, #28]
   11da8:	e7a7      	b.n	11cfa <event_connection_prepare+0x9d2>
	if (conn->llcp.encryption.initiate) {
   11daa:	f894 9078 	ldrb.w	r9, [r4, #120]	; 0x78
   11dae:	f1b9 0f00 	cmp.w	r9, #0
   11db2:	d1a2      	bne.n	11cfa <event_connection_prepare+0x9d2>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11db4:	4889      	ldr	r0, [pc, #548]	; (11fdc <event_connection_prepare+0xcb4>)
   11db6:	f7f9 fd16 	bl	b7e6 <mem_acquire>
	if (!node_tx) {
   11dba:	4607      	mov	r7, r0
   11dbc:	2800      	cmp	r0, #0
   11dbe:	d09c      	beq.n	11cfa <event_connection_prepare+0x9d2>
	if (!conn->role) {
   11dc0:	f994 301d 	ldrsb.w	r3, [r4, #29]
   11dc4:	2b00      	cmp	r3, #0
	pdu_ctrl_tx = (void *)node_tx->pdu_data;
   11dc6:	f100 0a04 	add.w	sl, r0, #4
	if (!conn->role) {
   11dca:	db4d      	blt.n	11e68 <event_connection_prepare+0xb40>
		ecb_encrypt(&conn->llcp.encryption.ltk[0],
   11dcc:	f104 0bf9 	add.w	fp, r4, #249	; 0xf9
   11dd0:	465b      	mov	r3, fp
   11dd2:	464a      	mov	r2, r9
   11dd4:	f104 0194 	add.w	r1, r4, #148	; 0x94
   11dd8:	f104 0084 	add.w	r0, r4, #132	; 0x84
   11ddc:	f006 fb7c 	bl	184d8 <ecb_encrypt>
		memcpy(&conn->ccm_tx.key[0], &conn->ccm_rx.key[0],
   11de0:	2210      	movs	r2, #16
   11de2:	4659      	mov	r1, fp
   11de4:	f504 708d 	add.w	r0, r4, #282	; 0x11a
   11de8:	f7ee fcd3 	bl	792 <memcpy>
		memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
   11dec:	f504 7189 	add.w	r1, r4, #274	; 0x112
   11df0:	2208      	movs	r2, #8
   11df2:	f204 1033 	addw	r0, r4, #307	; 0x133
   11df6:	f7ee fccc 	bl	792 <memcpy>
		conn->ccm_rx.direction = 0;
   11dfa:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
		conn->ccm_rx.counter = 0;
   11dfe:	f884 9109 	strb.w	r9, [r4, #265]	; 0x109
		conn->ccm_rx.direction = 0;
   11e02:	f369 0300 	bfi	r3, r9, #0, #1
   11e06:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
		conn->ccm_tx.direction = 1;
   11e0a:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
		conn->ccm_rx.counter = 0;
   11e0e:	f884 910a 	strb.w	r9, [r4, #266]	; 0x10a
		conn->ccm_tx.direction = 1;
   11e12:	f043 0301 	orr.w	r3, r3, #1
   11e16:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
		conn->enc_rx = 1;
   11e1a:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
		conn->ccm_rx.counter = 0;
   11e1e:	f884 910b 	strb.w	r9, [r4, #267]	; 0x10b
		conn->enc_rx = 1;
   11e22:	f043 0310 	orr.w	r3, r3, #16
		conn->ccm_rx.counter = 0;
   11e26:	f884 910c 	strb.w	r9, [r4, #268]	; 0x10c
   11e2a:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
   11e2e:	f884 910e 	strb.w	r9, [r4, #270]	; 0x10e
   11e32:	f884 910f 	strb.w	r9, [r4, #271]	; 0x10f
   11e36:	f884 9110 	strb.w	r9, [r4, #272]	; 0x110
		conn->ccm_tx.counter = 0;
   11e3a:	f8a4 912a 	strh.w	r9, [r4, #298]	; 0x12a
   11e3e:	f8a4 912c 	strh.w	r9, [r4, #300]	; 0x12c
   11e42:	f8a4 912e 	strh.w	r9, [r4, #302]	; 0x12e
   11e46:	f8a4 9130 	strh.w	r9, [r4, #304]	; 0x130
		conn->enc_rx = 1;
   11e4a:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
		start_enc_rsp_send(conn, pdu_ctrl_tx);
   11e4e:	4651      	mov	r1, sl
   11e50:	4620      	mov	r0, r4
   11e52:	f7ff fa27 	bl	112a4 <start_enc_rsp_send>
	ctrl_tx_enqueue(conn, node_tx);
   11e56:	4639      	mov	r1, r7
   11e58:	4620      	mov	r0, r4
   11e5a:	f7ff f995 	bl	11188 <ctrl_tx_enqueue>
	conn->llcp_ack = conn->llcp_req;
   11e5e:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   11e62:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
   11e66:	e748      	b.n	11cfa <event_connection_prepare+0x9d2>
	else if (!conn->pause_tx || conn->refresh) {
   11e68:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   11e6c:	f003 0348 	and.w	r3, r3, #72	; 0x48
   11e70:	2b08      	cmp	r3, #8
   11e72:	f000 80a2 	beq.w	11fba <event_connection_prepare+0xc92>
		if (conn->llcp.encryption.error_code) {
   11e76:	f894 9079 	ldrb.w	r9, [r4, #121]	; 0x79
   11e7a:	f1b9 0f00 	cmp.w	r9, #0
   11e7e:	d020      	beq.n	11ec2 <event_connection_prepare+0xb9a>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   11e80:	7903      	ldrb	r3, [r0, #4]
   11e82:	f043 0303 	orr.w	r3, r3, #3
   11e86:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
   11e88:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   11e8c:	0698      	lsls	r0, r3, #26
   11e8e:	d512      	bpl.n	11eb6 <event_connection_prepare+0xb8e>
	    (conn->llcp_features & BIT(BT_LE_FEAT_BIT_EXT_REJ_IND))) {
   11e90:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
	if (conn->common.fex_valid &&
   11e94:	0759      	lsls	r1, r3, #29
   11e96:	d50e      	bpl.n	11eb6 <event_connection_prepare+0xb8e>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   11e98:	2311      	movs	r3, #17
   11e9a:	71fb      	strb	r3, [r7, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   11e9c:	2303      	movs	r3, #3
   11e9e:	723b      	strb	r3, [r7, #8]
		p->error_code = conn->llcp.encryption.error_code;
   11ea0:	f887 9009 	strb.w	r9, [r7, #9]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ext_ind);
   11ea4:	2302      	movs	r3, #2
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
   11ea6:	717b      	strb	r3, [r7, #5]
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
   11ea8:	797b      	ldrb	r3, [r7, #5]
   11eaa:	3301      	adds	r3, #1
   11eac:	717b      	strb	r3, [r7, #5]
	conn->llcp.encryption.error_code = 0;
   11eae:	2300      	movs	r3, #0
   11eb0:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
   11eb4:	e7cf      	b.n	11e56 <event_connection_prepare+0xb2e>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   11eb6:	230d      	movs	r3, #13
   11eb8:	71fb      	strb	r3, [r7, #7]
		p->error_code =	conn->llcp.encryption.error_code;
   11eba:	f887 9008 	strb.w	r9, [r7, #8]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
   11ebe:	2301      	movs	r3, #1
   11ec0:	e7f1      	b.n	11ea6 <event_connection_prepare+0xb7e>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11ec2:	4846      	ldr	r0, [pc, #280]	; (11fdc <event_connection_prepare+0xcb4>)
   11ec4:	f7f9 fc8f 	bl	b7e6 <mem_acquire>
	if (!node_tx) {
   11ec8:	4682      	mov	sl, r0
   11eca:	2800      	cmp	r0, #0
   11ecc:	f000 8304 	beq.w	124d8 <event_connection_prepare+0x11b0>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11ed0:	7903      	ldrb	r3, [r0, #4]
   11ed2:	f043 0303 	orr.w	r3, r3, #3
   11ed6:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   11ed8:	f04f 0b04 	mov.w	fp, #4
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
   11edc:	230d      	movs	r3, #13
   11ede:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   11ee0:	f880 b007 	strb.w	fp, [r0, #7]
	entropy_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_rsp.skds,
   11ee4:	f100 0308 	add.w	r3, r0, #8
   11ee8:	4619      	mov	r1, r3
   11eea:	2208      	movs	r2, #8
   11eec:	6868      	ldr	r0, [r5, #4]
   11eee:	930d      	str	r3, [sp, #52]	; 0x34
   11ef0:	f7f1 f904 	bl	30fc <entropy_get_entropy_isr>
	entropy_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_rsp.ivs,
   11ef4:	f10a 0310 	add.w	r3, sl, #16
   11ef8:	4619      	mov	r1, r3
   11efa:	465a      	mov	r2, fp
   11efc:	6868      	ldr	r0, [r5, #4]
   11efe:	930b      	str	r3, [sp, #44]	; 0x2c
   11f00:	f7f1 f8fc 	bl	30fc <entropy_get_entropy_isr>
	memcpy(&conn->llcp.encryption.skd[8],
   11f04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   11f06:	2208      	movs	r2, #8
   11f08:	4619      	mov	r1, r3
   11f0a:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   11f0e:	f7ee fc40 	bl	792 <memcpy>
	memcpy(&conn->ccm_rx.iv[4],
   11f12:	465a      	mov	r2, fp
   11f14:	990b      	ldr	r1, [sp, #44]	; 0x2c
   11f16:	f504 708b 	add.w	r0, r4, #278	; 0x116
   11f1a:	f7ee fc3a 	bl	792 <memcpy>
	ctrl_tx_enqueue(conn, node_tx);
   11f1e:	4651      	mov	r1, sl
   11f20:	4620      	mov	r0, r4
			ecb_encrypt(&conn->llcp.encryption.ltk[0],
   11f22:	f104 0af9 	add.w	sl, r4, #249	; 0xf9
	ctrl_tx_enqueue(conn, node_tx);
   11f26:	f7ff f92f 	bl	11188 <ctrl_tx_enqueue>
			ecb_encrypt(&conn->llcp.encryption.ltk[0],
   11f2a:	4653      	mov	r3, sl
   11f2c:	464a      	mov	r2, r9
   11f2e:	f104 0194 	add.w	r1, r4, #148	; 0x94
   11f32:	f104 0084 	add.w	r0, r4, #132	; 0x84
   11f36:	f006 facf 	bl	184d8 <ecb_encrypt>
			memcpy(&conn->ccm_tx.key[0],
   11f3a:	2210      	movs	r2, #16
   11f3c:	4651      	mov	r1, sl
   11f3e:	f504 708d 	add.w	r0, r4, #282	; 0x11a
   11f42:	f7ee fc26 	bl	792 <memcpy>
			memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
   11f46:	2208      	movs	r2, #8
   11f48:	f504 7189 	add.w	r1, r4, #274	; 0x112
   11f4c:	f204 1033 	addw	r0, r4, #307	; 0x133
   11f50:	f7ee fc1f 	bl	792 <memcpy>
			conn->ccm_rx.direction = 1;
   11f54:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
			conn->ccm_rx.counter = 0;
   11f58:	f884 9109 	strb.w	r9, [r4, #265]	; 0x109
			conn->ccm_rx.direction = 1;
   11f5c:	f043 0301 	orr.w	r3, r3, #1
   11f60:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
			conn->ccm_tx.direction = 0;
   11f64:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
			conn->ccm_rx.counter = 0;
   11f68:	f884 910a 	strb.w	r9, [r4, #266]	; 0x10a
			conn->ccm_tx.direction = 0;
   11f6c:	f369 0300 	bfi	r3, r9, #0, #1
   11f70:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
			conn->enc_rx = 1;
   11f74:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
			conn->ccm_rx.counter = 0;
   11f78:	f884 910b 	strb.w	r9, [r4, #267]	; 0x10b
			conn->enc_rx = 1;
   11f7c:	f043 0310 	orr.w	r3, r3, #16
   11f80:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11f84:	793b      	ldrb	r3, [r7, #4]
			conn->ccm_rx.counter = 0;
   11f86:	f884 910c 	strb.w	r9, [r4, #268]	; 0x10c
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11f8a:	f043 0303 	orr.w	r3, r3, #3
			conn->ccm_rx.counter = 0;
   11f8e:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
   11f92:	f884 910e 	strb.w	r9, [r4, #270]	; 0x10e
   11f96:	f884 910f 	strb.w	r9, [r4, #271]	; 0x10f
   11f9a:	f884 9110 	strb.w	r9, [r4, #272]	; 0x110
			conn->ccm_tx.counter = 0;
   11f9e:	f8a4 912a 	strh.w	r9, [r4, #298]	; 0x12a
   11fa2:	f8a4 912c 	strh.w	r9, [r4, #300]	; 0x12c
   11fa6:	f8a4 912e 	strh.w	r9, [r4, #302]	; 0x12e
   11faa:	f8a4 9130 	strh.w	r9, [r4, #304]	; 0x130
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11fae:	713b      	strb	r3, [r7, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   11fb0:	2301      	movs	r3, #1
   11fb2:	717b      	strb	r3, [r7, #5]
			pdu_ctrl_tx->llctrl.opcode =
   11fb4:	2305      	movs	r3, #5
   11fb6:	71fb      	strb	r3, [r7, #7]
   11fb8:	e74d      	b.n	11e56 <event_connection_prepare+0xb2e>
		start_enc_rsp_send(_radio.conn_curr, pdu_ctrl_tx);
   11fba:	4651      	mov	r1, sl
   11fbc:	f8d5 071c 	ldr.w	r0, [r5, #1820]	; 0x71c
   11fc0:	f7ff f970 	bl	112a4 <start_enc_rsp_send>
		_radio.conn_curr->pause_rx = 0;
   11fc4:	f8d5 271c 	ldr.w	r2, [r5, #1820]	; 0x71c
   11fc8:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   11fcc:	f369 0382 	bfi	r3, r9, #2, #1
		_radio.conn_curr->pause_tx = 0;
   11fd0:	f369 03c3 	bfi	r3, r9, #3, #1
   11fd4:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
   11fd8:	e73d      	b.n	11e56 <event_connection_prepare+0xb2e>
   11fda:	bf00      	nop
   11fdc:	20001354 	.word	0x20001354
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11fe0:	48b0      	ldr	r0, [pc, #704]	; (122a4 <event_connection_prepare+0xf7c>)
   11fe2:	f7f9 fc00 	bl	b7e6 <mem_acquire>
	if (node_tx) {
   11fe6:	4607      	mov	r7, r0
   11fe8:	2800      	cmp	r0, #0
   11fea:	f43f ae86 	beq.w	11cfa <event_connection_prepare+0x9d2>
		conn->llcp_ack = conn->llcp_req;
   11fee:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   11ff2:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		conn->llcp_features = RADIO_BLE_FEAT;
   11ff6:	4bac      	ldr	r3, [pc, #688]	; (122a8 <event_connection_prepare+0xf80>)
   11ff8:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11ffc:	7903      	ldrb	r3, [r0, #4]
   11ffe:	f043 0303 	orr.w	r3, r3, #3
   12002:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
   12004:	2309      	movs	r3, #9
   12006:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode =
   12008:	f994 301d 	ldrsb.w	r3, [r4, #29]
   1200c:	2b00      	cmp	r3, #0
   1200e:	bfac      	ite	ge
   12010:	2308      	movge	r3, #8
   12012:	230e      	movlt	r3, #14
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
   12014:	2208      	movs	r2, #8
		pdu_ctrl_tx->llctrl.opcode =
   12016:	71c3      	strb	r3, [r0, #7]
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
   12018:	2100      	movs	r1, #0
   1201a:	4410      	add	r0, r2
   1201c:	f7ee fbe5 	bl	7ea <memset>
			conn->llcp_features & 0xFF;
   12020:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
		pdu_ctrl_tx->llctrl.feature_req.features[0] =
   12024:	723b      	strb	r3, [r7, #8]
			(conn->llcp_features >> 8) & 0xFF;
   12026:	0a1a      	lsrs	r2, r3, #8
			(conn->llcp_features >> 16) & 0xFF;
   12028:	0c1b      	lsrs	r3, r3, #16
		pdu_ctrl_tx->llctrl.feature_req.features[1] =
   1202a:	727a      	strb	r2, [r7, #9]
		pdu_ctrl_tx->llctrl.feature_req.features[2] =
   1202c:	72bb      	strb	r3, [r7, #10]
		ctrl_tx_enqueue(conn, node_tx);
   1202e:	4639      	mov	r1, r7
		ctrl_tx_enqueue(conn, node_tx);
   12030:	4620      	mov	r0, r4
   12032:	f7ff f8a9 	bl	11188 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
   12036:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   1203a:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   1203e:	e65c      	b.n	11cfa <event_connection_prepare+0x9d2>
	if (conn->llcp_version.tx == 0) {
   12040:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
   12044:	07da      	lsls	r2, r3, #31
   12046:	d424      	bmi.n	12092 <event_connection_prepare+0xd6a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   12048:	4896      	ldr	r0, [pc, #600]	; (122a4 <event_connection_prepare+0xf7c>)
   1204a:	f7f9 fbcc 	bl	b7e6 <mem_acquire>
		if (node_tx) {
   1204e:	4601      	mov	r1, r0
   12050:	2800      	cmp	r0, #0
   12052:	f43f ae52 	beq.w	11cfa <event_connection_prepare+0x9d2>
			conn->llcp_ack = conn->llcp_req;
   12056:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   1205a:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
			conn->llcp_version.tx = 1;
   1205e:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
   12062:	f043 0301 	orr.w	r3, r3, #1
   12066:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1206a:	7903      	ldrb	r3, [r0, #4]
   1206c:	f043 0303 	orr.w	r3, r3, #3
   12070:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len =
   12072:	2306      	movs	r3, #6
   12074:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
   12076:	230c      	movs	r3, #12
   12078:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.version_ind.version_number =
   1207a:	2309      	movs	r3, #9
   1207c:	7203      	strb	r3, [r0, #8]
			pdu_ctrl_tx->llctrl.version_ind.company_id =
   1207e:	f06f 030e 	mvn.w	r3, #14
   12082:	7243      	strb	r3, [r0, #9]
   12084:	2305      	movs	r3, #5
   12086:	7283      	strb	r3, [r0, #10]
			pdu_ctrl_tx->llctrl.version_ind.sub_version_number =
   12088:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1208c:	72c3      	strb	r3, [r0, #11]
   1208e:	7303      	strb	r3, [r0, #12]
   12090:	e7ce      	b.n	12030 <event_connection_prepare+0xd08>
	} else if (conn->llcp_version.rx != 0) {
   12092:	079b      	lsls	r3, r3, #30
   12094:	d526      	bpl.n	120e4 <event_connection_prepare+0xdbc>
		conn->llcp_ack = conn->llcp_req;
   12096:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   1209a:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		node_rx = packet_rx_reserve_get(2);
   1209e:	2002      	movs	r0, #2
   120a0:	f7fc faa8 	bl	e5f4 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
   120a4:	b920      	cbnz	r0, 120b0 <event_connection_prepare+0xd88>
   120a6:	4b81      	ldr	r3, [pc, #516]	; (122ac <event_connection_prepare+0xf84>)
   120a8:	9301      	str	r3, [sp, #4]
   120aa:	9300      	str	r3, [sp, #0]
   120ac:	4b80      	ldr	r3, [pc, #512]	; (122b0 <event_connection_prepare+0xf88>)
   120ae:	e45d      	b.n	1196c <event_connection_prepare+0x644>
		node_rx->hdr.handle = conn->handle;
   120b0:	8c23      	ldrh	r3, [r4, #32]
   120b2:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   120b4:	2301      	movs	r3, #1
   120b6:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   120b8:	7a03      	ldrb	r3, [r0, #8]
   120ba:	f043 0303 	orr.w	r3, r3, #3
   120be:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len =
   120c0:	2306      	movs	r3, #6
   120c2:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode =
   120c4:	230c      	movs	r3, #12
   120c6:	72c3      	strb	r3, [r0, #11]
		pdu_ctrl_rx->llctrl.version_ind.version_number =
   120c8:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
   120cc:	7303      	strb	r3, [r0, #12]
		pdu_ctrl_rx->llctrl.version_ind.company_id =
   120ce:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
   120d2:	f8a0 300d 	strh.w	r3, [r0, #13]
		pdu_ctrl_rx->llctrl.version_ind.sub_version_number =
   120d6:	f8b4 30ac 	ldrh.w	r3, [r4, #172]	; 0xac
   120da:	f8a0 300f 	strh.w	r3, [r0, #15]
		packet_rx_enqueue();
   120de:	f7fd fb63 	bl	f7a8 <packet_rx_enqueue>
   120e2:	e60a      	b.n	11cfa <event_connection_prepare+0x9d2>
		LL_ASSERT(0);
   120e4:	4b71      	ldr	r3, [pc, #452]	; (122ac <event_connection_prepare+0xf84>)
   120e6:	9301      	str	r3, [sp, #4]
   120e8:	9300      	str	r3, [sp, #0]
   120ea:	4b71      	ldr	r3, [pc, #452]	; (122b0 <event_connection_prepare+0xf88>)
   120ec:	f7ff bad2 	b.w	11694 <event_connection_prepare+0x36c>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   120f0:	486c      	ldr	r0, [pc, #432]	; (122a4 <event_connection_prepare+0xf7c>)
   120f2:	f7f9 fb78 	bl	b7e6 <mem_acquire>
	if (node_tx) {
   120f6:	4601      	mov	r1, r0
   120f8:	2800      	cmp	r0, #0
   120fa:	f43f adfe 	beq.w	11cfa <event_connection_prepare+0x9d2>
		conn->llcp_ack = conn->llcp_req;
   120fe:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   12102:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12106:	7903      	ldrb	r3, [r0, #4]
   12108:	f043 0303 	orr.w	r3, r3, #3
   1210c:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
   1210e:	2301      	movs	r3, #1
   12110:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
   12112:	2312      	movs	r3, #18
   12114:	71c3      	strb	r3, [r0, #7]
   12116:	e78b      	b.n	12030 <event_connection_prepare+0xd08>
	if (conn->llcp.phy_upd_ind.initiate) {
   12118:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
   1211c:	07d7      	lsls	r7, r2, #31
   1211e:	d551      	bpl.n	121c4 <event_connection_prepare+0xe9c>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   12120:	4860      	ldr	r0, [pc, #384]	; (122a4 <event_connection_prepare+0xf7c>)
   12122:	f7f9 fb60 	bl	b7e6 <mem_acquire>
		if (node_tx) {
   12126:	4607      	mov	r7, r0
   12128:	2800      	cmp	r0, #0
   1212a:	f43f ade6 	beq.w	11cfa <event_connection_prepare+0x9d2>
			conn->llcp.phy_upd_ind.initiate = 0;
   1212e:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   12132:	f36f 0300 	bfc	r3, #0, #1
   12136:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
			if (!((conn->llcp.phy_upd_ind.tx |
   1213a:	b2db      	uxtb	r3, r3
   1213c:	f3c3 0982 	ubfx	r9, r3, #2, #3
   12140:	ea59 1953 	orrs.w	r9, r9, r3, lsr #5
   12144:	d138      	bne.n	121b8 <event_connection_prepare+0xe90>
				conn->llcp_ack = conn->llcp_req;
   12146:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
   1214a:	f884 2075 	strb.w	r2, [r4, #117]	; 0x75
				if (conn->llcp.phy_upd_ind.cmd) {
   1214e:	0798      	lsls	r0, r3, #30
				conn->llcp.phy_upd_ind.instant = 0;
   12150:	f8a4 907a 	strh.w	r9, [r4, #122]	; 0x7a
				if (conn->llcp.phy_upd_ind.cmd) {
   12154:	d51a      	bpl.n	1218c <event_connection_prepare+0xe64>
					node_rx = packet_rx_reserve_get(2);
   12156:	2002      	movs	r0, #2
   12158:	f7fc fa4c 	bl	e5f4 <packet_rx_reserve_get>
					LL_ASSERT(node_rx);
   1215c:	b920      	cbnz	r0, 12168 <event_connection_prepare+0xe40>
		LL_ASSERT(node_rx);
   1215e:	4b53      	ldr	r3, [pc, #332]	; (122ac <event_connection_prepare+0xf84>)
   12160:	9301      	str	r3, [sp, #4]
   12162:	9300      	str	r3, [sp, #0]
   12164:	4b53      	ldr	r3, [pc, #332]	; (122b4 <event_connection_prepare+0xf8c>)
   12166:	e401      	b.n	1196c <event_connection_prepare+0x644>
					node_rx->hdr.handle = conn->handle;
   12168:	8c23      	ldrh	r3, [r4, #32]
   1216a:	80c3      	strh	r3, [r0, #6]
					upd->status = 0;
   1216c:	f880 900b 	strb.w	r9, [r0, #11]
					node_rx->hdr.type =
   12170:	230c      	movs	r3, #12
   12172:	7103      	strb	r3, [r0, #4]
					upd->tx = conn->phy_tx;
   12174:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   12178:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   1217c:	7303      	strb	r3, [r0, #12]
					upd->rx = conn->phy_rx;
   1217e:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
   12182:	f3c3 0302 	ubfx	r3, r3, #0, #3
   12186:	7343      	strb	r3, [r0, #13]
					packet_rx_enqueue();
   12188:	f7fd fb0e 	bl	f7a8 <packet_rx_enqueue>
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1218c:	793b      	ldrb	r3, [r7, #4]
   1218e:	f043 0303 	orr.w	r3, r3, #3
   12192:	713b      	strb	r3, [r7, #4]
			pdu_ctrl_tx->len =
   12194:	2305      	movs	r3, #5
   12196:	717b      	strb	r3, [r7, #5]
			pdu_ctrl_tx->llctrl.opcode =
   12198:	2318      	movs	r3, #24
   1219a:	71fb      	strb	r3, [r7, #7]
			ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
   1219c:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   121a0:	f3c3 0382 	ubfx	r3, r3, #2, #3
   121a4:	723b      	strb	r3, [r7, #8]
			ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
   121a6:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   121aa:	f3c3 1342 	ubfx	r3, r3, #5, #3
   121ae:	727b      	strb	r3, [r7, #9]
			ind->instant = conn->llcp.phy_upd_ind.instant;
   121b0:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
   121b4:	817b      	strh	r3, [r7, #10]
   121b6:	e59c      	b.n	11cf2 <event_connection_prepare+0x9ca>
								 conn->latency +
   121b8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   121ba:	3306      	adds	r3, #6
   121bc:	4433      	add	r3, r6
				conn->llcp.phy_upd_ind.instant = event_counter +
   121be:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
   121c2:	e7e3      	b.n	1218c <event_connection_prepare+0xe64>
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) & 0xFFFF)
   121c4:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
   121c8:	1af3      	subs	r3, r6, r3
   121ca:	0419      	lsls	r1, r3, #16
   121cc:	f53f ad95 	bmi.w	11cfa <event_connection_prepare+0x9d2>
		conn->llcp_ack = conn->llcp_req;
   121d0:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   121d4:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		if (conn->llcp.phy_upd_ind.tx) {
   121d8:	f012 0f1c 	tst.w	r2, #28
		old_tx = conn->phy_tx;
   121dc:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
		old_rx = conn->phy_rx;
   121e0:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
			conn->phy_tx = conn->llcp.phy_upd_ind.tx;
   121e4:	bf18      	it	ne
   121e6:	f3c2 0782 	ubfxne	r7, r2, #2, #3
		old_tx = conn->phy_tx;
   121ea:	f3c3 00c2 	ubfx	r0, r3, #3, #3
			conn->phy_tx = conn->llcp.phy_upd_ind.tx;
   121ee:	bf1c      	itt	ne
   121f0:	f367 03c5 	bfine	r3, r7, #3, #3
   121f4:	f884 3038 	strbne.w	r3, [r4, #56]	; 0x38
		if (conn->llcp.phy_upd_ind.rx) {
   121f8:	f012 0fe0 	tst.w	r2, #224	; 0xe0
		old_rx = conn->phy_rx;
   121fc:	f001 0107 	and.w	r1, r1, #7
		if (conn->llcp.phy_upd_ind.rx) {
   12200:	d008      	beq.n	12214 <event_connection_prepare+0xeec>
			conn->phy_rx = conn->llcp.phy_upd_ind.rx;
   12202:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   12206:	f894 703a 	ldrb.w	r7, [r4, #58]	; 0x3a
   1220a:	095b      	lsrs	r3, r3, #5
   1220c:	f363 0702 	bfi	r7, r3, #0, #3
   12210:	f884 703a 	strb.w	r7, [r4, #58]	; 0x3a
		conn->phy_flags = conn->phy_pref_flags;
   12214:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   12218:	461f      	mov	r7, r3
   1221a:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1221e:	f363 17c7 	bfi	r7, r3, #7, #1
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
   12222:	0793      	lsls	r3, r2, #30
		conn->phy_flags = conn->phy_pref_flags;
   12224:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
   12228:	d40b      	bmi.n	12242 <event_connection_prepare+0xf1a>
   1222a:	b2fb      	uxtb	r3, r7
   1222c:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   12230:	4283      	cmp	r3, r0
   12232:	d106      	bne.n	12242 <event_connection_prepare+0xf1a>
		    (conn->phy_rx == old_rx)) {
   12234:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
   12238:	f003 0307 	and.w	r3, r3, #7
   1223c:	428b      	cmp	r3, r1
   1223e:	f43f ad5c 	beq.w	11cfa <event_connection_prepare+0x9d2>
		node_rx = packet_rx_reserve_get(2);
   12242:	2002      	movs	r0, #2
   12244:	f7fc f9d6 	bl	e5f4 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
   12248:	2800      	cmp	r0, #0
   1224a:	d088      	beq.n	1215e <event_connection_prepare+0xe36>
		node_rx->hdr.handle = conn->handle;
   1224c:	8c23      	ldrh	r3, [r4, #32]
   1224e:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   12250:	230c      	movs	r3, #12
   12252:	7103      	strb	r3, [r0, #4]
		upd->status = 0;
   12254:	2300      	movs	r3, #0
   12256:	72c3      	strb	r3, [r0, #11]
		upd->tx = conn->phy_tx;
   12258:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1225c:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   12260:	7303      	strb	r3, [r0, #12]
		upd->rx = conn->phy_rx;
   12262:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
   12266:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1226a:	7343      	strb	r3, [r0, #13]
   1226c:	e737      	b.n	120de <event_connection_prepare+0xdb6>
			LL_ASSERT(0);
   1226e:	4b0f      	ldr	r3, [pc, #60]	; (122ac <event_connection_prepare+0xf84>)
   12270:	9301      	str	r3, [sp, #4]
   12272:	9300      	str	r3, [sp, #0]
   12274:	4b10      	ldr	r3, [pc, #64]	; (122b8 <event_connection_prepare+0xf90>)
   12276:	f7ff ba0d 	b.w	11694 <event_connection_prepare+0x36c>
		free_count_rx = packet_rx_acquired_count_get() +
   1227a:	f7fc f9a5 	bl	e5c8 <packet_rx_acquired_count_get>
   1227e:	4607      	mov	r7, r0
			mem_free_count_get(_radio.pkt_rx_data_free);
   12280:	f8d5 0738 	ldr.w	r0, [r5, #1848]	; 0x738
   12284:	f7f9 fade 	bl	b844 <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
   12288:	4438      	add	r0, r7
   1228a:	b280      	uxth	r0, r0
		LL_ASSERT(free_count_rx <= 0xFF);
   1228c:	28ff      	cmp	r0, #255	; 0xff
   1228e:	d91d      	bls.n	122cc <event_connection_prepare+0xfa4>
		LL_ASSERT(free_count_rx <= 0xFF);
   12290:	4b06      	ldr	r3, [pc, #24]	; (122ac <event_connection_prepare+0xf84>)
   12292:	9301      	str	r3, [sp, #4]
   12294:	9300      	str	r3, [sp, #0]
   12296:	4a09      	ldr	r2, [pc, #36]	; (122bc <event_connection_prepare+0xf94>)
   12298:	4b09      	ldr	r3, [pc, #36]	; (122c0 <event_connection_prepare+0xf98>)
   1229a:	490a      	ldr	r1, [pc, #40]	; (122c4 <event_connection_prepare+0xf9c>)
   1229c:	480a      	ldr	r0, [pc, #40]	; (122c8 <event_connection_prepare+0xfa0>)
   1229e:	f7ff b853 	b.w	11348 <event_connection_prepare+0x20>
   122a2:	bf00      	nop
   122a4:	20001354 	.word	0x20001354
   122a8:	000149ff 	.word	0x000149ff
   122ac:	00023dbe 	.word	0x00023dbe
   122b0:	00025d61 	.word	0x00025d61
   122b4:	00025dbd 	.word	0x00025dbd
   122b8:	00025dd4 	.word	0x00025dd4
   122bc:	00022d86 	.word	0x00022d86
   122c0:	00025d9b 	.word	0x00025d9b
   122c4:	000272e8 	.word	0x000272e8
   122c8:	00025fb5 	.word	0x00025fb5
		if (_radio.packet_rx_data_count != free_count_rx) {
   122cc:	f895 3742 	ldrb.w	r3, [r5, #1858]	; 0x742
   122d0:	4283      	cmp	r3, r0
   122d2:	d12b      	bne.n	1232c <event_connection_prepare+0x1004>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   122d4:	4883      	ldr	r0, [pc, #524]	; (124e4 <event_connection_prepare+0x11bc>)
   122d6:	f7f9 fa86 	bl	b7e6 <mem_acquire>
		if (!node_tx) {
   122da:	4601      	mov	r1, r0
   122dc:	b330      	cbz	r0, 1232c <event_connection_prepare+0x1004>
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
   122de:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
		conn->default_tx_time = conn->llcp_length.tx_time;
   122e2:	f8b4 00f2 	ldrh.w	r0, [r4, #242]	; 0xf2
   122e6:	8660      	strh	r0, [r4, #50]	; 0x32
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
   122e8:	2201      	movs	r2, #1
   122ea:	f362 0301 	bfi	r3, r2, #0, #2
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   122ee:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
   122f2:	85a2      	strh	r2, [r4, #44]	; 0x2c
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
   122f4:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   122f8:	790b      	ldrb	r3, [r1, #4]
		lr->max_tx_time = conn->default_tx_time;
   122fa:	81c8      	strh	r0, [r1, #14]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   122fc:	f043 0303 	orr.w	r3, r3, #3
   12300:	710b      	strb	r3, [r1, #4]
		pdu_ctrl_tx->len =
   12302:	2309      	movs	r3, #9
   12304:	714b      	strb	r3, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   12306:	2314      	movs	r3, #20
   12308:	71cb      	strb	r3, [r1, #7]
		lr->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   1230a:	231b      	movs	r3, #27
   1230c:	720b      	strb	r3, [r1, #8]
   1230e:	2300      	movs	r3, #0
   12310:	724b      	strb	r3, [r1, #9]
		lr->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX,
   12312:	f06f 036f 	mvn.w	r3, #111	; 0x6f
   12316:	728b      	strb	r3, [r1, #10]
   12318:	230a      	movs	r3, #10
   1231a:	72cb      	strb	r3, [r1, #11]
		lr->max_tx_octets = conn->default_tx_octets;
   1231c:	818a      	strh	r2, [r1, #12]
		ctrl_tx_enqueue(conn, node_tx);
   1231e:	4620      	mov	r0, r4
   12320:	f7fe ff32 	bl	11188 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
   12324:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   12328:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	event_common_prepare(ticks_at_expire, remainder,
   1232c:	f894 3020 	ldrb.w	r3, [r4, #32]
   12330:	f994 501d 	ldrsb.w	r5, [r4, #29]
   12334:	486c      	ldr	r0, [pc, #432]	; (124e8 <event_connection_prepare+0x11c0>)
   12336:	496d      	ldr	r1, [pc, #436]	; (124ec <event_connection_prepare+0x11c4>)
   12338:	68a2      	ldr	r2, [r4, #8]
   1233a:	9403      	str	r4, [sp, #12]
   1233c:	3307      	adds	r3, #7
   1233e:	ea11 0125 	ands.w	r1, r1, r5, asr #32
   12342:	bf38      	it	cc
   12344:	4601      	movcc	r1, r0
   12346:	b2db      	uxtb	r3, r3
   12348:	e88d 000c 	stmia.w	sp, {r2, r3}
   1234c:	9102      	str	r1, [sp, #8]
   1234e:	1d23      	adds	r3, r4, #4
   12350:	4622      	mov	r2, r4
   12352:	990c      	ldr	r1, [sp, #48]	; 0x30
   12354:	4640      	mov	r0, r8
	conn->event_counter = event_counter + 1;
   12356:	3601      	adds	r6, #1
	event_common_prepare(ticks_at_expire, remainder,
   12358:	f7fe fcfc 	bl	10d54 <event_common_prepare>
	conn->event_counter = event_counter + 1;
   1235c:	8466      	strh	r6, [r4, #34]	; 0x22
}
   1235e:	b00f      	add	sp, #60	; 0x3c
   12360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		free_count_rx = packet_rx_acquired_count_get() +
   12364:	f7fc f930 	bl	e5c8 <packet_rx_acquired_count_get>
   12368:	4607      	mov	r7, r0
			mem_free_count_get(_radio.pkt_rx_data_free);
   1236a:	f8d5 0738 	ldr.w	r0, [r5, #1848]	; 0x738
   1236e:	f7f9 fa69 	bl	b844 <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
   12372:	4438      	add	r0, r7
   12374:	b280      	uxth	r0, r0
		LL_ASSERT(free_count_rx <= 0xFF);
   12376:	28ff      	cmp	r0, #255	; 0xff
   12378:	d88a      	bhi.n	12290 <event_connection_prepare+0xf68>
		if (_radio.packet_rx_data_count != free_count_rx) {
   1237a:	f895 3742 	ldrb.w	r3, [r5, #1858]	; 0x742
   1237e:	4283      	cmp	r3, r0
   12380:	d005      	beq.n	1238e <event_connection_prepare+0x1066>
		LL_ASSERT(0);
   12382:	4b5b      	ldr	r3, [pc, #364]	; (124f0 <event_connection_prepare+0x11c8>)
   12384:	9301      	str	r3, [sp, #4]
   12386:	9300      	str	r3, [sp, #0]
   12388:	4b5a      	ldr	r3, [pc, #360]	; (124f4 <event_connection_prepare+0x11cc>)
   1238a:	f7ff b983 	b.w	11694 <event_connection_prepare+0x36c>
		conn->llcp_length.ack = conn->llcp_length.req;
   1238e:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   12392:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		_radio.conn_curr->pause_tx = 0;
   12396:	f8d5 371c 	ldr.w	r3, [r5, #1820]	; 0x71c
		conn->procedure_expire = 0;
   1239a:	2100      	movs	r1, #0
   1239c:	f8a4 1044 	strh.w	r1, [r4, #68]	; 0x44
		_radio.conn_curr->pause_tx = 0;
   123a0:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   123a4:	f361 02c3 	bfi	r2, r1, #3, #1
   123a8:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		conn->max_rx_octets = conn->llcp_length.rx_octets;
   123ac:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
   123b0:	8623      	strh	r3, [r4, #48]	; 0x30
		conn->max_rx_time = conn->llcp_length.rx_time;
   123b2:	f8b4 30f0 	ldrh.w	r3, [r4, #240]	; 0xf0
   123b6:	86e3      	strh	r3, [r4, #54]	; 0x36
		free_count_conn = mem_free_count_get(_radio.conn_free);
   123b8:	f8d5 0714 	ldr.w	r0, [r5, #1812]	; 0x714
   123bc:	f7f9 fa42 	bl	b844 <mem_free_count_get>
		if (_radio.advertiser.conn) {
   123c0:	f8d5 3638 	ldr.w	r3, [r5, #1592]	; 0x638
   123c4:	b10b      	cbz	r3, 123ca <event_connection_prepare+0x10a2>
			free_count_conn++;
   123c6:	3001      	adds	r0, #1
   123c8:	b280      	uxth	r0, r0
		if (_radio.scanner.conn) {
   123ca:	f8d5 3674 	ldr.w	r3, [r5, #1652]	; 0x674
   123ce:	b10b      	cbz	r3, 123d4 <event_connection_prepare+0x10ac>
			free_count_conn++;
   123d0:	3001      	adds	r0, #1
   123d2:	b280      	uxth	r0, r0
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
   123d4:	8e27      	ldrh	r7, [r4, #48]	; 0x30
		if (((free_count_conn + 1) == _radio.connection_count) ||
   123d6:	f895 3718 	ldrb.w	r3, [r5, #1816]	; 0x718
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
   123da:	370e      	adds	r7, #14
		if (((free_count_conn + 1) == _radio.connection_count) ||
   123dc:	3001      	adds	r0, #1
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
   123de:	f027 0703 	bic.w	r7, r7, #3
		if (((free_count_conn + 1) == _radio.connection_count) ||
   123e2:	4298      	cmp	r0, r3
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
   123e4:	b2bf      	uxth	r7, r7
		if (((free_count_conn + 1) == _radio.connection_count) ||
   123e6:	d054      	beq.n	12492 <event_connection_prepare+0x116a>
   123e8:	f8b5 3740 	ldrh.w	r3, [r5, #1856]	; 0x740
   123ec:	42bb      	cmp	r3, r7
   123ee:	d350      	bcc.n	12492 <event_connection_prepare+0x116a>
		node_rx = packet_rx_reserve_get(2);
   123f0:	2002      	movs	r0, #2
   123f2:	f7fc f8ff 	bl	e5f4 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
   123f6:	2800      	cmp	r0, #0
   123f8:	d157      	bne.n	124aa <event_connection_prepare+0x1182>
   123fa:	4b3d      	ldr	r3, [pc, #244]	; (124f0 <event_connection_prepare+0x11c8>)
   123fc:	9301      	str	r3, [sp, #4]
   123fe:	9300      	str	r3, [sp, #0]
   12400:	4b3c      	ldr	r3, [pc, #240]	; (124f4 <event_connection_prepare+0x11cc>)
   12402:	f7ff bab3 	b.w	1196c <event_connection_prepare+0x644>
				if (_radio.packet_rx_acquire == 0) {
   12406:	b90b      	cbnz	r3, 1240c <event_connection_prepare+0x10e4>
						_radio.packet_rx_count - 1;
   12408:	f895 3748 	ldrb.w	r3, [r5, #1864]	; 0x748
					_radio.packet_rx_acquire -= 1;
   1240c:	3b01      	subs	r3, #1
   1240e:	f885 374a 	strb.w	r3, [r5, #1866]	; 0x74a
				node_rx = _radio.packet_rx[
   12412:	f895 274a 	ldrb.w	r2, [r5, #1866]	; 0x74a
   12416:	f8d5 3744 	ldr.w	r3, [r5, #1860]	; 0x744
				mem_release(node_rx->hdr.onion.link,
   1241a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1241e:	4649      	mov	r1, r9
   12420:	6818      	ldr	r0, [r3, #0]
   12422:	f7f9 f9fa 	bl	b81a <mem_release>
				LL_ASSERT(_radio.link_rx_data_quota <
   12426:	f895 2748 	ldrb.w	r2, [r5, #1864]	; 0x748
   1242a:	f895 375c 	ldrb.w	r3, [r5, #1884]	; 0x75c
   1242e:	3a01      	subs	r2, #1
   12430:	4293      	cmp	r3, r2
   12432:	db08      	blt.n	12446 <event_connection_prepare+0x111e>
   12434:	4b2e      	ldr	r3, [pc, #184]	; (124f0 <event_connection_prepare+0x11c8>)
   12436:	9301      	str	r3, [sp, #4]
   12438:	9300      	str	r3, [sp, #0]
   1243a:	4a2f      	ldr	r2, [pc, #188]	; (124f8 <event_connection_prepare+0x11d0>)
   1243c:	4b2d      	ldr	r3, [pc, #180]	; (124f4 <event_connection_prepare+0x11cc>)
   1243e:	492f      	ldr	r1, [pc, #188]	; (124fc <event_connection_prepare+0x11d4>)
   12440:	482f      	ldr	r0, [pc, #188]	; (12500 <event_connection_prepare+0x11d8>)
   12442:	f7fe bf81 	b.w	11348 <event_connection_prepare+0x20>
				_radio.link_rx_data_quota++;
   12446:	3301      	adds	r3, #1
   12448:	f885 375c 	strb.w	r3, [r5, #1884]	; 0x75c
			while (_radio.packet_rx_acquire !=
   1244c:	f895 374a 	ldrb.w	r3, [r5, #1866]	; 0x74a
				_radio.packet_rx_last) {
   12450:	f895 2749 	ldrb.w	r2, [r5, #1865]	; 0x749
			while (_radio.packet_rx_acquire !=
   12454:	4293      	cmp	r3, r2
   12456:	d1d6      	bne.n	12406 <event_connection_prepare+0x10de>
			if (conn->max_rx_octets < (PDU_AC_SIZE_MAX +
   12458:	8e23      	ldrh	r3, [r4, #48]	; 0x30
			_radio.packet_rx_data_count =
   1245a:	f8b5 273e 	ldrh.w	r2, [r5, #1854]	; 0x73e
			if (conn->max_rx_octets < (PDU_AC_SIZE_MAX +
   1245e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
				_radio.packet_rx_data_size =
   12462:	bf3a      	itte	cc
   12464:	f44f 7386 	movcc.w	r3, #268	; 0x10c
   12468:	f8a5 3740 	strhcc.w	r3, [r5, #1856]	; 0x740
				_radio.packet_rx_data_size =
   1246c:	f8a5 7740 	strhcs.w	r7, [r5, #1856]	; 0x740
				_radio.packet_rx_data_size;
   12470:	f8b5 1740 	ldrh.w	r1, [r5, #1856]	; 0x740
			_radio.packet_rx_data_count =
   12474:	fbb2 f2f1 	udiv	r2, r2, r1
   12478:	b2d2      	uxtb	r2, r2
   1247a:	f885 2742 	strb.w	r2, [r5, #1858]	; 0x742
			LL_ASSERT(_radio.packet_rx_data_count);
   1247e:	b95a      	cbnz	r2, 12498 <event_connection_prepare+0x1170>
   12480:	4b1b      	ldr	r3, [pc, #108]	; (124f0 <event_connection_prepare+0x11c8>)
   12482:	9301      	str	r3, [sp, #4]
   12484:	9300      	str	r3, [sp, #0]
   12486:	4a1c      	ldr	r2, [pc, #112]	; (124f8 <event_connection_prepare+0x11d0>)
   12488:	4b1a      	ldr	r3, [pc, #104]	; (124f4 <event_connection_prepare+0x11cc>)
   1248a:	491c      	ldr	r1, [pc, #112]	; (124fc <event_connection_prepare+0x11d4>)
   1248c:	481d      	ldr	r0, [pc, #116]	; (12504 <event_connection_prepare+0x11dc>)
   1248e:	f7fe bf5b 	b.w	11348 <event_connection_prepare+0x20>
				mem_release(node_rx->hdr.onion.link,
   12492:	f8df 9078 	ldr.w	r9, [pc, #120]	; 1250c <event_connection_prepare+0x11e4>
   12496:	e7d9      	b.n	1244c <event_connection_prepare+0x1124>
			mem_init(_radio.pkt_rx_data_pool,
   12498:	f8d5 0734 	ldr.w	r0, [r5, #1844]	; 0x734
   1249c:	4b1a      	ldr	r3, [pc, #104]	; (12508 <event_connection_prepare+0x11e0>)
   1249e:	f7f9 f97b 	bl	b798 <mem_init>
			packet_rx_allocate(4);
   124a2:	2004      	movs	r0, #4
   124a4:	f7fc f91e 	bl	e6e4 <packet_rx_allocate>
   124a8:	e7a2      	b.n	123f0 <event_connection_prepare+0x10c8>
		node_rx->hdr.handle = conn->handle;
   124aa:	8c23      	ldrh	r3, [r4, #32]
   124ac:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   124ae:	2301      	movs	r3, #1
   124b0:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   124b2:	7a03      	ldrb	r3, [r0, #8]
   124b4:	f043 0303 	orr.w	r3, r3, #3
   124b8:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len =
   124ba:	2309      	movs	r3, #9
   124bc:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   124be:	2315      	movs	r3, #21
   124c0:	72c3      	strb	r3, [r0, #11]
		lr->max_rx_octets = conn->max_rx_octets;
   124c2:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   124c4:	8183      	strh	r3, [r0, #12]
		lr->max_tx_octets = conn->max_tx_octets;
   124c6:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
   124c8:	8203      	strh	r3, [r0, #16]
		lr->max_rx_time = conn->max_rx_time;
   124ca:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   124cc:	81c3      	strh	r3, [r0, #14]
		lr->max_tx_time = conn->max_tx_time;
   124ce:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   124d0:	8243      	strh	r3, [r0, #18]
		packet_rx_enqueue();
   124d2:	f7fd f969 	bl	f7a8 <packet_rx_enqueue>
   124d6:	e729      	b.n	1232c <event_connection_prepare+0x1004>
				mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
   124d8:	4902      	ldr	r1, [pc, #8]	; (124e4 <event_connection_prepare+0x11bc>)
   124da:	4638      	mov	r0, r7
   124dc:	f7f9 f99d 	bl	b81a <mem_release>
   124e0:	e40b      	b.n	11cfa <event_connection_prepare+0x9d2>
   124e2:	bf00      	nop
   124e4:	20001354 	.word	0x20001354
   124e8:	00012865 	.word	0x00012865
   124ec:	00012555 	.word	0x00012555
   124f0:	00023dbe 	.word	0x00023dbe
   124f4:	00025d9b 	.word	0x00025d9b
   124f8:	00022d86 	.word	0x00022d86
   124fc:	000272e8 	.word	0x000272e8
   12500:	00025fec 	.word	0x00025fec
   12504:	00026046 	.word	0x00026046
   12508:	20001328 	.word	0x20001328
   1250c:	20001340 	.word	0x20001340

00012510 <event_master_prepare>:
	event_connection_prepare(ticks_at_expire, remainder, lazy, context);
   12510:	f7fe bf0a 	b.w	11328 <event_connection_prepare>

00012514 <event_slave_prepare>:
   12514:	f7fe bf08 	b.w	11328 <event_connection_prepare>

00012518 <connection_configure>:
{
   12518:	b510      	push	{r4, lr}
   1251a:	4604      	mov	r4, r0
	radio_reset();
   1251c:	f006 f954 	bl	187c8 <radio_reset>
	radio_tx_power_set(0);
   12520:	2000      	movs	r0, #0
   12522:	f006 f999 	bl	18858 <radio_tx_power_set>
	radio_isr_set(isr);
   12526:	480a      	ldr	r0, [pc, #40]	; (12550 <connection_configure+0x38>)
   12528:	f006 f918 	bl	1875c <radio_isr_set>
	radio_aa_set(conn->access_addr);
   1252c:	f104 0010 	add.w	r0, r4, #16
   12530:	f006 f9b0 	bl	18894 <radio_aa_set>
			     ((u32_t)conn->crc_init[1] << 8) |
   12534:	7d63      	ldrb	r3, [r4, #21]
			    (((u32_t)conn->crc_init[2] << 16) |
   12536:	7da1      	ldrb	r1, [r4, #22]
			     ((u32_t)conn->crc_init[1] << 8) |
   12538:	021b      	lsls	r3, r3, #8
			    (((u32_t)conn->crc_init[2] << 16) |
   1253a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			     ((u32_t)conn->crc_init[0])));
   1253e:	7d21      	ldrb	r1, [r4, #20]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   12540:	f240 605b 	movw	r0, #1627	; 0x65b
   12544:	4319      	orrs	r1, r3
}
   12546:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   1254a:	f006 ba5d 	b.w	18a08 <radio_crc_configure>
   1254e:	bf00      	nop
   12550:	00013c31 	.word	0x00013c31

00012554 <event_slave>:
{
   12554:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   12558:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
   1255a:	4b71      	ldr	r3, [pc, #452]	; (12720 <event_slave+0x1cc>)
   1255c:	7cda      	ldrb	r2, [r3, #19]
{
   1255e:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
   12560:	f002 06ff 	and.w	r6, r2, #255	; 0xff
   12564:	461d      	mov	r5, r3
   12566:	b172      	cbz	r2, 12586 <event_slave+0x32>
   12568:	4b6e      	ldr	r3, [pc, #440]	; (12724 <event_slave+0x1d0>)
   1256a:	9301      	str	r3, [sp, #4]
   1256c:	9300      	str	r3, [sp, #0]
   1256e:	4a6e      	ldr	r2, [pc, #440]	; (12728 <event_slave+0x1d4>)
   12570:	4b6e      	ldr	r3, [pc, #440]	; (1272c <event_slave+0x1d8>)
   12572:	496f      	ldr	r1, [pc, #444]	; (12730 <event_slave+0x1dc>)
   12574:	486f      	ldr	r0, [pc, #444]	; (12734 <event_slave+0x1e0>)
	LL_ASSERT(_radio.ticker_id_prepare ==
   12576:	f7ef fe93 	bl	22a0 <printk>
   1257a:	4040      	eors	r0, r0
   1257c:	f380 8811 	msr	BASEPRI, r0
   12580:	f04f 0004 	mov.w	r0, #4
   12584:	df02      	svc	2
   12586:	7c1b      	ldrb	r3, [r3, #16]
   12588:	8c22      	ldrh	r2, [r4, #32]
   1258a:	b2db      	uxtb	r3, r3
   1258c:	3207      	adds	r2, #7
   1258e:	4293      	cmp	r3, r2
   12590:	d007      	beq.n	125a2 <event_slave+0x4e>
   12592:	4b64      	ldr	r3, [pc, #400]	; (12724 <event_slave+0x1d0>)
   12594:	9301      	str	r3, [sp, #4]
   12596:	9300      	str	r3, [sp, #0]
   12598:	4a63      	ldr	r2, [pc, #396]	; (12728 <event_slave+0x1d4>)
   1259a:	4b64      	ldr	r3, [pc, #400]	; (1272c <event_slave+0x1d8>)
   1259c:	4964      	ldr	r1, [pc, #400]	; (12730 <event_slave+0x1dc>)
   1259e:	4866      	ldr	r0, [pc, #408]	; (12738 <event_slave+0x1e4>)
   125a0:	e7e9      	b.n	12576 <event_slave+0x22>
	_radio.packet_counter = 0;
   125a2:	f885 6720 	strb.w	r6, [r5, #1824]	; 0x720
	_radio.crc_expire = 0;
   125a6:	f885 6721 	strb.w	r6, [r5, #1825]	; 0x721
	_radio.role = ROLE_SLAVE;
   125aa:	2203      	movs	r2, #3
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
   125ac:	b2db      	uxtb	r3, r3
	_radio.role = ROLE_SLAVE;
   125ae:	74ea      	strb	r2, [r5, #19]
	_radio.ticker_id_prepare = 0;
   125b0:	742e      	strb	r6, [r5, #16]
	_radio.ticker_id_event =
   125b2:	746b      	strb	r3, [r5, #17]
	conn->latency_event = conn->latency_prepare;
   125b4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
   125b6:	f8c5 471c 	str.w	r4, [r5, #1820]	; 0x71c
	_radio.state = STATE_RX;
   125ba:	2201      	movs	r2, #1
	conn->latency_event = conn->latency_prepare;
   125bc:	8563      	strh	r3, [r4, #42]	; 0x2a
	_radio.ticks_anchor = ticks_at_expire;
   125be:	60a8      	str	r0, [r5, #8]
	conn->latency_prepare = 0;
   125c0:	8526      	strh	r6, [r4, #40]	; 0x28
	connection_configure(conn);
   125c2:	4620      	mov	r0, r4
	_radio.state = STATE_RX;
   125c4:	752a      	strb	r2, [r5, #20]
	connection_configure(conn);
   125c6:	f7ff ffa7 	bl	12518 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
   125ca:	2096      	movs	r0, #150	; 0x96
   125cc:	f006 fad8 	bl	18b80 <radio_tmr_tifs_set>
				     conn->phy_flags);
   125d0:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
	radio_switch_complete_and_tx(conn->phy_rx, 0, conn->phy_tx,
   125d4:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   125d8:	09d3      	lsrs	r3, r2, #7
   125da:	4631      	mov	r1, r6
   125dc:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   125e0:	f000 0007 	and.w	r0, r0, #7
   125e4:	f006 fa3a 	bl	18a5c <radio_switch_complete_and_tx>
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);
   125e8:	f895 2749 	ldrb.w	r2, [r5, #1865]	; 0x749
   125ec:	f8d5 3744 	ldr.w	r3, [r5, #1860]	; 0x744
   125f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
	rx_packet_set(conn, (void *)
   125f4:	4620      	mov	r0, r4
   125f6:	3108      	adds	r1, #8
   125f8:	f7fc fb5a 	bl	ecb0 <rx_packet_set>
	if (conn->data_chan_sel) {
   125fc:	7f63      	ldrb	r3, [r4, #29]
   125fe:	f013 0f40 	tst.w	r3, #64	; 0x40
   12602:	f104 0217 	add.w	r2, r4, #23
   12606:	d05a      	beq.n	126be <event_slave+0x16a>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
   12608:	8c60      	ldrh	r0, [r4, #34]	; 0x22
   1260a:	8be1      	ldrh	r1, [r4, #30]
   1260c:	3801      	subs	r0, #1
   1260e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   12612:	b280      	uxth	r0, r0
   12614:	f7fe fd74 	bl	11100 <chan_sel_2>
	chan_set(data_chan_use);
   12618:	f7fc fba2 	bl	ed60 <chan_set>
	conn->slave.window_widening_event_us +=
   1261c:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1261e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   12620:	4413      	add	r3, r2
	conn->slave.window_widening_prepare_us = 0;
   12622:	2200      	movs	r2, #0
   12624:	65e2      	str	r2, [r4, #92]	; 0x5c
	    conn->slave.window_widening_max_us) {
   12626:	6da2      	ldr	r2, [r4, #88]	; 0x58
	conn->slave.window_widening_event_us +=
   12628:	6623      	str	r3, [r4, #96]	; 0x60
	if (conn->slave.window_widening_event_us >
   1262a:	4293      	cmp	r3, r2
		conn->slave.window_widening_event_us =
   1262c:	bf88      	it	hi
   1262e:	6622      	strhi	r2, [r4, #96]	; 0x60
	conn->slave.window_size_event_us +=
   12630:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   12632:	6e62      	ldr	r2, [r4, #100]	; 0x64
	conn->slave.window_size_prepare_us = 0;
   12634:	2600      	movs	r6, #0
	conn->slave.window_size_event_us +=
   12636:	4413      	add	r3, r2
   12638:	66a3      	str	r3, [r4, #104]	; 0x68
	remainder_us = radio_tmr_start(0, ticks_at_expire +
   1263a:	68ea      	ldr	r2, [r5, #12]
	conn->slave.window_size_prepare_us = 0;
   1263c:	6666      	str	r6, [r4, #100]	; 0x64
	remainder_us = radio_tmr_start(0, ticks_at_expire +
   1263e:	f107 0109 	add.w	r1, r7, #9
   12642:	4630      	mov	r0, r6
   12644:	f006 faa8 	bl	18b98 <radio_tmr_start>
   12648:	4680      	mov	r8, r0
	radio_tmr_aa_capture();
   1264a:	f006 fb2f 	bl	18cac <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
   1264e:	4630      	mov	r0, r6
   12650:	f006 fb4e 	bl	18cf0 <radio_tmr_aa_save>
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
   12654:	6ea3      	ldr	r3, [r4, #104]	; 0x68
	       (conn->slave.window_widening_event_us << 1) +
   12656:	6e20      	ldr	r0, [r4, #96]	; 0x60
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
   12658:	f103 0650 	add.w	r6, r3, #80	; 0x50
   1265c:	eb06 0640 	add.w	r6, r6, r0, lsl #1
	hcto += radio_rx_ready_delay_get(conn->phy_rx, 1);
   12660:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   12664:	2101      	movs	r1, #1
   12666:	f000 0007 	and.w	r0, r0, #7
   1266a:	f006 f974 	bl	18956 <radio_rx_ready_delay_get>
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
   1266e:	4446      	add	r6, r8
	hcto += radio_rx_ready_delay_get(conn->phy_rx, 1);
   12670:	4406      	add	r6, r0
	hcto += addr_us_get(conn->phy_rx);
   12672:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   12676:	f000 0007 	and.w	r0, r0, #7
	switch (phy) {
   1267a:	2802      	cmp	r0, #2
   1267c:	d03f      	beq.n	126fe <event_slave+0x1aa>
		return 40;
   1267e:	2804      	cmp	r0, #4
   12680:	bf0c      	ite	eq
   12682:	f44f 73bc 	moveq.w	r3, #376	; 0x178
   12686:	2328      	movne	r3, #40	; 0x28
	hcto += radio_rx_chain_delay_get(conn->phy_rx, 1);
   12688:	2101      	movs	r1, #1
	hcto += addr_us_get(conn->phy_rx);
   1268a:	441e      	add	r6, r3
	hcto += radio_rx_chain_delay_get(conn->phy_rx, 1);
   1268c:	f006 f965 	bl	1895a <radio_rx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   12690:	4430      	add	r0, r6
   12692:	f006 faed 	bl	18c70 <radio_tmr_hcto_configure>
	if (preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
   12696:	f894 1020 	ldrb.w	r1, [r4, #32]
   1269a:	3107      	adds	r1, #7
   1269c:	463a      	mov	r2, r7
   1269e:	b2c9      	uxtb	r1, r1
   126a0:	4620      	mov	r0, r4
   126a2:	f7fd ff1f 	bl	104e4 <preempt_calc>
   126a6:	4603      	mov	r3, r0
   126a8:	b358      	cbz	r0, 12702 <event_slave+0x1ae>
		_radio.state = STATE_STOP;
   126aa:	2304      	movs	r3, #4
   126ac:	752b      	strb	r3, [r5, #20]
		radio_disable();
   126ae:	f006 f96f 	bl	18990 <radio_disable>
	packet_tx_enqueue(2);
   126b2:	2002      	movs	r0, #2
}
   126b4:	b002      	add	sp, #8
   126b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	packet_tx_enqueue(2);
   126ba:	f7fd bbb9 	b.w	fe30 <packet_tx_enqueue>
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   126be:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
   126c0:	7fa6      	ldrb	r6, [r4, #30]
   126c2:	fb01 6606 	mla	r6, r1, r6, r6
   126c6:	7fe1      	ldrb	r1, [r4, #31]
   126c8:	2025      	movs	r0, #37	; 0x25
   126ca:	440e      	add	r6, r1
   126cc:	fb96 f1f0 	sdiv	r1, r6, r0
   126d0:	fb00 6611 	mls	r6, r0, r1, r6
   126d4:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
   126d6:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
   126d8:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
   126da:	5c51      	ldrb	r1, [r2, r1]
   126dc:	f006 0607 	and.w	r6, r6, #7
   126e0:	fa41 f606 	asr.w	r6, r1, r6
   126e4:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
   126e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
   126ea:	d495      	bmi.n	12618 <event_slave+0xc4>
		chan_index = chan_next % chan_count;
   126ec:	fbb0 f1f3 	udiv	r1, r0, r3
   126f0:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
   126f4:	b2c9      	uxtb	r1, r1
   126f6:	4610      	mov	r0, r2
   126f8:	f7fb ff4a 	bl	e590 <chan_sel_remap>
   126fc:	e78c      	b.n	12618 <event_slave+0xc4>
		return 24;
   126fe:	2318      	movs	r3, #24
   12700:	e7c2      	b.n	12688 <event_slave+0x134>
		ticker_status =
   12702:	4a0e      	ldr	r2, [pc, #56]	; (1273c <event_slave+0x1e8>)
   12704:	4601      	mov	r1, r0
   12706:	f7fa f813 	bl	c730 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1270a:	f030 0302 	bics.w	r3, r0, #2
   1270e:	d0d0      	beq.n	126b2 <event_slave+0x15e>
   12710:	4b04      	ldr	r3, [pc, #16]	; (12724 <event_slave+0x1d0>)
   12712:	9301      	str	r3, [sp, #4]
   12714:	9300      	str	r3, [sp, #0]
   12716:	4a04      	ldr	r2, [pc, #16]	; (12728 <event_slave+0x1d4>)
   12718:	4b04      	ldr	r3, [pc, #16]	; (1272c <event_slave+0x1d8>)
   1271a:	4905      	ldr	r1, [pc, #20]	; (12730 <event_slave+0x1dc>)
   1271c:	4808      	ldr	r0, [pc, #32]	; (12740 <event_slave+0x1ec>)
   1271e:	e72a      	b.n	12576 <event_slave+0x22>
   12720:	20000bf0 	.word	0x20000bf0
   12724:	00023dbe 	.word	0x00023dbe
   12728:	00022d86 	.word	0x00022d86
   1272c:	00025ded 	.word	0x00025ded
   12730:	000272e8 	.word	0x000272e8
   12734:	00026083 	.word	0x00026083
   12738:	000261a9 	.word	0x000261a9
   1273c:	0000fba5 	.word	0x0000fba5
   12740:	00025f28 	.word	0x00025f28

00012744 <prepare_pdu_data_tx>:
	    conn->empty ||
   12744:	f890 c0f8 	ldrb.w	ip, [r0, #248]	; 0xf8
	if (/* empty packet */
   12748:	f01c 0f80 	tst.w	ip, #128	; 0x80
{
   1274c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12750:	4604      	mov	r4, r0
   12752:	460e      	mov	r6, r1
	if (/* empty packet */
   12754:	d109      	bne.n	1276a <prepare_pdu_data_tx+0x26>
	    !conn->pkt_tx_head ||
   12756:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
	    conn->empty ||
   1275a:	b131      	cbz	r1, 1276a <prepare_pdu_data_tx+0x26>
	    !conn->pkt_tx_head ||
   1275c:	f01c 0f08 	tst.w	ip, #8
   12760:	f8d0 e140 	ldr.w	lr, [r0, #320]	; 0x140
   12764:	d023      	beq.n	127ae <prepare_pdu_data_tx+0x6a>
	    (conn->pause_tx && (conn->pkt_tx_head != conn->pkt_tx_ctrl))) {
   12766:	4571      	cmp	r1, lr
   12768:	d021      	beq.n	127ae <prepare_pdu_data_tx+0x6a>
	conn->empty = 1;
   1276a:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   1276e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   12772:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_data_tx = (void *)radio_pkt_empty_get();
   12776:	f006 f95d 	bl	18a34 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1277a:	7803      	ldrb	r3, [r0, #0]
   1277c:	2201      	movs	r2, #1
   1277e:	f362 0301 	bfi	r3, r2, #0, #2
	pdu_data_tx->len = 0;
   12782:	2200      	movs	r2, #0
   12784:	7042      	strb	r2, [r0, #1]
	if (conn->pkt_tx_head) {
   12786:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1278a:	7003      	strb	r3, [r0, #0]
   1278c:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
   1278e:	b15a      	cbz	r2, 127a8 <prepare_pdu_data_tx+0x64>
		pdu_data_tx->md = 1;
   12790:	f043 0310 	orr.w	r3, r3, #16
		pdu_data_tx->md = 0;
   12794:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->rfu = 0;
   12796:	7803      	ldrb	r3, [r0, #0]
   12798:	f36f 1347 	bfc	r3, #5, #3
   1279c:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->resv = 0;
   1279e:	2300      	movs	r3, #0
   127a0:	7083      	strb	r3, [r0, #2]
	*pdu_data_tx = _pdu_data_tx;
   127a2:	6030      	str	r0, [r6, #0]
   127a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pdu_data_tx->md = 0;
   127a8:	f362 1304 	bfi	r3, r2, #4, #1
   127ac:	e7f2      	b.n	12794 <prepare_pdu_data_tx+0x50>
					conn->packet_tx_head_offset);
   127ae:	f894 2151 	ldrb.w	r2, [r4, #337]	; 0x151
		if (!conn->packet_tx_head_len) {
   127b2:	f894 3150 	ldrb.w	r3, [r4, #336]	; 0x150
		_pdu_data_tx = (void *)(conn->pkt_tx_head->pdu_data +
   127b6:	1d0d      	adds	r5, r1, #4
   127b8:	18a8      	adds	r0, r5, r2
		if (!conn->packet_tx_head_len) {
   127ba:	b913      	cbnz	r3, 127c2 <prepare_pdu_data_tx+0x7e>
			conn->packet_tx_head_len = _pdu_data_tx->len;
   127bc:	7843      	ldrb	r3, [r0, #1]
   127be:	f884 3150 	strb.w	r3, [r4, #336]	; 0x150
		if (conn->packet_tx_head_offset) {
   127c2:	b122      	cbz	r2, 127ce <prepare_pdu_data_tx+0x8a>
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   127c4:	5cab      	ldrb	r3, [r5, r2]
   127c6:	2701      	movs	r7, #1
   127c8:	f367 0301 	bfi	r3, r7, #0, #2
   127cc:	54ab      	strb	r3, [r5, r2]
		_pdu_data_tx->len = conn->packet_tx_head_len -
   127ce:	f894 7150 	ldrb.w	r7, [r4, #336]	; 0x150
		switch (conn->phy_tx_time) {
   127d2:	f894 8039 	ldrb.w	r8, [r4, #57]	; 0x39
		_pdu_data_tx->len = conn->packet_tx_head_len -
   127d6:	1abf      	subs	r7, r7, r2
   127d8:	b2ff      	uxtb	r7, r7
   127da:	7047      	strb	r7, [r0, #1]
		_pdu_data_tx->md = 0;
   127dc:	5cab      	ldrb	r3, [r5, r2]
   127de:	f36f 1304 	bfc	r3, #4, #1
   127e2:	54ab      	strb	r3, [r5, r2]
		switch (conn->phy_tx_time) {
   127e4:	f008 0807 	and.w	r8, r8, #7
   127e8:	f1b8 0f02 	cmp.w	r8, #2
   127ec:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   127ee:	d029      	beq.n	12844 <prepare_pdu_data_tx+0x100>
   127f0:	f1b8 0f04 	cmp.w	r8, #4
   127f4:	d029      	beq.n	1284a <prepare_pdu_data_tx+0x106>
			max_tx_octets = (conn->max_tx_time >> 3) - 10;
   127f6:	08db      	lsrs	r3, r3, #3
   127f8:	3b0a      	subs	r3, #10
				max_tx_octets = ((conn->max_tx_time - 430) >>
   127fa:	b29b      	uxth	r3, r3
		if (conn->enc_tx) {
   127fc:	f01c 0f20 	tst.w	ip, #32
			max_tx_octets -= 4;
   12800:	bf18      	it	ne
   12802:	3b04      	subne	r3, #4
   12804:	f8b4 c02e 	ldrh.w	ip, [r4, #46]	; 0x2e
   12808:	bf18      	it	ne
   1280a:	b29b      	uxthne	r3, r3
   1280c:	4563      	cmp	r3, ip
   1280e:	bf28      	it	cs
   12810:	4663      	movcs	r3, ip
		if (_pdu_data_tx->len > max_tx_octets) {
   12812:	429f      	cmp	r7, r3
			_pdu_data_tx->len = max_tx_octets;
   12814:	bf81      	itttt	hi
   12816:	7043      	strbhi	r3, [r0, #1]
			_pdu_data_tx->md = 1;
   12818:	5cab      	ldrbhi	r3, [r5, r2]
   1281a:	f043 0310 	orrhi.w	r3, r3, #16
   1281e:	54ab      	strbhi	r3, [r5, r2]
		if (conn->pkt_tx_head->next) {
   12820:	680b      	ldr	r3, [r1, #0]
   12822:	b11b      	cbz	r3, 1282c <prepare_pdu_data_tx+0xe8>
			_pdu_data_tx->md = 1;
   12824:	5cab      	ldrb	r3, [r5, r2]
   12826:	f043 0310 	orr.w	r3, r3, #16
   1282a:	54ab      	strb	r3, [r5, r2]
		if (!conn->pkt_tx_ctrl &&
   1282c:	f1be 0f00 	cmp.w	lr, #0
   12830:	d1b1      	bne.n	12796 <prepare_pdu_data_tx+0x52>
   12832:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   12836:	4299      	cmp	r1, r3
			conn->pkt_tx_ctrl = conn->pkt_tx_ctrl_last =
   12838:	bf1c      	itt	ne
   1283a:	f8c4 1144 	strne.w	r1, [r4, #324]	; 0x144
   1283e:	f8c4 1140 	strne.w	r1, [r4, #320]	; 0x140
   12842:	e7a8      	b.n	12796 <prepare_pdu_data_tx+0x52>
			max_tx_octets = (conn->max_tx_time >> 2) - 11;
   12844:	089b      	lsrs	r3, r3, #2
   12846:	3b0b      	subs	r3, #11
   12848:	e7d7      	b.n	127fa <prepare_pdu_data_tx+0xb6>
			if (conn->phy_flags & 0x01) {
   1284a:	f894 8038 	ldrb.w	r8, [r4, #56]	; 0x38
   1284e:	ea5f 18d8 	movs.w	r8, r8, lsr #7
				max_tx_octets = ((conn->max_tx_time - 592) >>
   12852:	bf15      	itete	ne
   12854:	f5a3 7314 	subne.w	r3, r3, #592	; 0x250
				max_tx_octets = ((conn->max_tx_time - 430) >>
   12858:	f5a3 73d7 	subeq.w	r3, r3, #430	; 0x1ae
				max_tx_octets = ((conn->max_tx_time - 592) >>
   1285c:	119b      	asrne	r3, r3, #6
				max_tx_octets = ((conn->max_tx_time - 430) >>
   1285e:	111b      	asreq	r3, r3, #4
   12860:	3b02      	subs	r3, #2
   12862:	e7ca      	b.n	127fa <prepare_pdu_data_tx+0xb6>

00012864 <event_master>:
{
   12864:	b5f0      	push	{r4, r5, r6, r7, lr}
   12866:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
   12868:	4b56      	ldr	r3, [pc, #344]	; (129c4 <event_master+0x160>)
   1286a:	7cd9      	ldrb	r1, [r3, #19]
{
   1286c:	b085      	sub	sp, #20
   1286e:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
   12870:	f001 02ff 	and.w	r2, r1, #255	; 0xff
   12874:	461d      	mov	r5, r3
   12876:	b171      	cbz	r1, 12896 <event_master+0x32>
   12878:	4b53      	ldr	r3, [pc, #332]	; (129c8 <event_master+0x164>)
   1287a:	9301      	str	r3, [sp, #4]
   1287c:	9300      	str	r3, [sp, #0]
   1287e:	4a53      	ldr	r2, [pc, #332]	; (129cc <event_master+0x168>)
   12880:	4b53      	ldr	r3, [pc, #332]	; (129d0 <event_master+0x16c>)
   12882:	4954      	ldr	r1, [pc, #336]	; (129d4 <event_master+0x170>)
   12884:	4854      	ldr	r0, [pc, #336]	; (129d8 <event_master+0x174>)
	LL_ASSERT(_radio.ticker_id_prepare ==
   12886:	f7ef fd0b 	bl	22a0 <printk>
   1288a:	4040      	eors	r0, r0
   1288c:	f380 8811 	msr	BASEPRI, r0
   12890:	f04f 0004 	mov.w	r0, #4
   12894:	df02      	svc	2
   12896:	7c1b      	ldrb	r3, [r3, #16]
   12898:	8c21      	ldrh	r1, [r4, #32]
   1289a:	b2db      	uxtb	r3, r3
   1289c:	3107      	adds	r1, #7
   1289e:	428b      	cmp	r3, r1
   128a0:	d007      	beq.n	128b2 <event_master+0x4e>
   128a2:	4b49      	ldr	r3, [pc, #292]	; (129c8 <event_master+0x164>)
   128a4:	9301      	str	r3, [sp, #4]
   128a6:	9300      	str	r3, [sp, #0]
   128a8:	4a48      	ldr	r2, [pc, #288]	; (129cc <event_master+0x168>)
   128aa:	4b49      	ldr	r3, [pc, #292]	; (129d0 <event_master+0x16c>)
   128ac:	4949      	ldr	r1, [pc, #292]	; (129d4 <event_master+0x170>)
   128ae:	484b      	ldr	r0, [pc, #300]	; (129dc <event_master+0x178>)
   128b0:	e7e9      	b.n	12886 <event_master+0x22>
	_radio.packet_counter = 0;
   128b2:	f885 2720 	strb.w	r2, [r5, #1824]	; 0x720
	_radio.crc_expire = 0;
   128b6:	f885 2721 	strb.w	r2, [r5, #1825]	; 0x721
	_radio.role = ROLE_MASTER;
   128ba:	2104      	movs	r1, #4
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
   128bc:	b2db      	uxtb	r3, r3
	_radio.role = ROLE_MASTER;
   128be:	74e9      	strb	r1, [r5, #19]
	_radio.ticker_id_prepare = 0;
   128c0:	742a      	strb	r2, [r5, #16]
	_radio.ticker_id_event =
   128c2:	746b      	strb	r3, [r5, #17]
	conn->latency_event = conn->latency_prepare;
   128c4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
   128c6:	f8c5 471c 	str.w	r4, [r5, #1820]	; 0x71c
	_radio.state = STATE_TX;
   128ca:	2002      	movs	r0, #2
	conn->latency_event = conn->latency_prepare;
   128cc:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;
   128ce:	8522      	strh	r2, [r4, #40]	; 0x28
	_radio.state = STATE_TX;
   128d0:	7528      	strb	r0, [r5, #20]
	_radio.ticks_anchor = ticks_at_expire;
   128d2:	60af      	str	r7, [r5, #8]
	packet_tx_enqueue(2);
   128d4:	f7fd faac 	bl	fe30 <packet_tx_enqueue>
	prepare_pdu_data_tx(conn, &pdu_data_tx);
   128d8:	a903      	add	r1, sp, #12
   128da:	4620      	mov	r0, r4
   128dc:	f7ff ff32 	bl	12744 <prepare_pdu_data_tx>
	pdu_data_tx->sn = conn->sn;
   128e0:	9903      	ldr	r1, [sp, #12]
   128e2:	f894 20f8 	ldrb.w	r2, [r4, #248]	; 0xf8
   128e6:	780b      	ldrb	r3, [r1, #0]
   128e8:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = conn->nesn;
   128ec:	f3c2 0240 	ubfx	r2, r2, #1, #1
   128f0:	f362 0382 	bfi	r3, r2, #2, #1
   128f4:	700b      	strb	r3, [r1, #0]
	connection_configure(conn);
   128f6:	4620      	mov	r0, r4
   128f8:	f7ff fe0e 	bl	12518 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
   128fc:	2096      	movs	r0, #150	; 0x96
   128fe:	f006 f93f 	bl	18b80 <radio_tmr_tifs_set>
	radio_switch_complete_and_rx(conn->phy_rx);
   12902:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   12906:	f000 0007 	and.w	r0, r0, #7
   1290a:	f006 f89b 	bl	18a44 <radio_switch_complete_and_rx>
	tx_packet_set(conn, pdu_data_tx);
   1290e:	9903      	ldr	r1, [sp, #12]
   12910:	4620      	mov	r0, r4
   12912:	f7fc f9f9 	bl	ed08 <tx_packet_set>
	if (conn->data_chan_sel) {
   12916:	7f63      	ldrb	r3, [r4, #29]
   12918:	f013 0f40 	tst.w	r3, #64	; 0x40
   1291c:	f104 0217 	add.w	r2, r4, #23
   12920:	d021      	beq.n	12966 <event_master+0x102>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
   12922:	8c60      	ldrh	r0, [r4, #34]	; 0x22
   12924:	8be1      	ldrh	r1, [r4, #30]
   12926:	3801      	subs	r0, #1
   12928:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1292c:	b280      	uxth	r0, r0
   1292e:	f7fe fbe7 	bl	11100 <chan_sel_2>
	chan_set(data_chan_use);
   12932:	f7fc fa15 	bl	ed60 <chan_set>
		remainder_us = radio_tmr_start(1,
   12936:	68ea      	ldr	r2, [r5, #12]
   12938:	f107 0109 	add.w	r1, r7, #9
   1293c:	2001      	movs	r0, #1
   1293e:	f006 f92b 	bl	18b98 <radio_tmr_start>
		radio_tmr_end_capture();
   12942:	f006 f9e7 	bl	18d14 <radio_tmr_end_capture>
	    preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
   12946:	f894 1020 	ldrb.w	r1, [r4, #32]
   1294a:	3107      	adds	r1, #7
   1294c:	463a      	mov	r2, r7
   1294e:	b2c9      	uxtb	r1, r1
   12950:	4620      	mov	r0, r4
   12952:	f7fd fdc7 	bl	104e4 <preempt_calc>
	if (0 !=
   12956:	4603      	mov	r3, r0
   12958:	b328      	cbz	r0, 129a6 <event_master+0x142>
		_radio.state = STATE_STOP;
   1295a:	2304      	movs	r3, #4
   1295c:	752b      	strb	r3, [r5, #20]
		radio_disable();
   1295e:	f006 f817 	bl	18990 <radio_disable>
}
   12962:	b005      	add	sp, #20
   12964:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   12966:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
   12968:	7fa6      	ldrb	r6, [r4, #30]
   1296a:	fb01 6606 	mla	r6, r1, r6, r6
   1296e:	7fe1      	ldrb	r1, [r4, #31]
   12970:	2025      	movs	r0, #37	; 0x25
   12972:	440e      	add	r6, r1
   12974:	fb96 f1f0 	sdiv	r1, r6, r0
   12978:	fb00 6611 	mls	r6, r0, r1, r6
   1297c:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
   1297e:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
   12980:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
   12982:	5c51      	ldrb	r1, [r2, r1]
   12984:	f006 0607 	and.w	r6, r6, #7
   12988:	fa41 f606 	asr.w	r6, r1, r6
   1298c:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
   1298e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
   12992:	d4ce      	bmi.n	12932 <event_master+0xce>
		chan_index = chan_next % chan_count;
   12994:	fbb0 f1f3 	udiv	r1, r0, r3
   12998:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
   1299c:	b2c9      	uxtb	r1, r1
   1299e:	4610      	mov	r0, r2
   129a0:	f7fb fdf6 	bl	e590 <chan_sel_remap>
   129a4:	e7c5      	b.n	12932 <event_master+0xce>
		ticker_status =
   129a6:	4a0e      	ldr	r2, [pc, #56]	; (129e0 <event_master+0x17c>)
   129a8:	4601      	mov	r1, r0
   129aa:	f7f9 fec1 	bl	c730 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   129ae:	f030 0302 	bics.w	r3, r0, #2
   129b2:	d0d6      	beq.n	12962 <event_master+0xfe>
   129b4:	4b04      	ldr	r3, [pc, #16]	; (129c8 <event_master+0x164>)
   129b6:	9301      	str	r3, [sp, #4]
   129b8:	9300      	str	r3, [sp, #0]
   129ba:	4a04      	ldr	r2, [pc, #16]	; (129cc <event_master+0x168>)
   129bc:	4b04      	ldr	r3, [pc, #16]	; (129d0 <event_master+0x16c>)
   129be:	4905      	ldr	r1, [pc, #20]	; (129d4 <event_master+0x170>)
   129c0:	4808      	ldr	r0, [pc, #32]	; (129e4 <event_master+0x180>)
   129c2:	e760      	b.n	12886 <event_master+0x22>
   129c4:	20000bf0 	.word	0x20000bf0
   129c8:	00023dbe 	.word	0x00023dbe
   129cc:	00022d86 	.word	0x00022d86
   129d0:	00025df9 	.word	0x00025df9
   129d4:	000272e8 	.word	0x000272e8
   129d8:	00026083 	.word	0x00026083
   129dc:	000261a9 	.word	0x000261a9
   129e0:	0000fba5 	.word	0x0000fba5
   129e4:	00025f28 	.word	0x00025f28

000129e8 <isr_rx_conn_pkt_ctrl>:
{
   129e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (pdu_data_rx->llctrl.opcode) {
   129ec:	7ac7      	ldrb	r7, [r0, #11]
{
   129ee:	4604      	mov	r4, r0
   129f0:	460d      	mov	r5, r1
	pdu_data_rx = (void *)node_rx->pdu_data;
   129f2:	f100 0608 	add.w	r6, r0, #8
	switch (pdu_data_rx->llctrl.opcode) {
   129f6:	2f19      	cmp	r7, #25
   129f8:	f201 80e4 	bhi.w	13bc4 <isr_rx_conn_pkt_ctrl+0x11dc>
   129fc:	e8df f017 	tbh	[pc, r7, lsl #1]
   12a00:	0081001a 	.word	0x0081001a
   12a04:	00cc00bd 	.word	0x00cc00bd
   12a08:	012200fa 	.word	0x012200fa
   12a0c:	05850154 	.word	0x05850154
   12a10:	01c40190 	.word	0x01c40190
   12a14:	021c01f2 	.word	0x021c01f2
   12a18:	02b6024d 	.word	0x02b6024d
   12a1c:	02ce01a6 	.word	0x02ce01a6
   12a20:	04a40421 	.word	0x04a40421
   12a24:	057a0560 	.word	0x057a0560
   12a28:	06480648 	.word	0x06480648
   12a2c:	07ee0721 	.word	0x07ee0721
   12a30:	08af0825 	.word	0x08af0825
		if (!_radio.conn_curr->role ||
   12a34:	4ecb      	ldr	r6, [pc, #812]	; (12d64 <isr_rx_conn_pkt_ctrl+0x37c>)
   12a36:	f8d6 571c 	ldr.w	r5, [r6, #1820]	; 0x71c
   12a3a:	f995 301d 	ldrsb.w	r3, [r5, #29]
   12a3e:	2b00      	cmp	r3, #0
   12a40:	f281 80c0 	bge.w	13bc4 <isr_rx_conn_pkt_ctrl+0x11dc>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND,
   12a44:	7a41      	ldrb	r1, [r0, #9]
   12a46:	2000      	movs	r0, #0
   12a48:	f7fb fd76 	bl	e538 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
   12a4c:	2800      	cmp	r0, #0
   12a4e:	f001 80b9 	beq.w	13bc4 <isr_rx_conn_pkt_ctrl+0x11dc>
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
   12a52:	f8b4 1015 	ldrh.w	r1, [r4, #21]
	      conn->event_counter) & 0xFFFF) > 0x7FFF) {
   12a56:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
   12a58:	1acb      	subs	r3, r1, r3
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
   12a5a:	041b      	lsls	r3, r3, #16
   12a5c:	f101 80c8 	bmi.w	13bf0 <isr_rx_conn_pkt_ctrl+0x1208>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   12a60:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   12a64:	f895 2075 	ldrb.w	r2, [r5, #117]	; 0x75
   12a68:	429a      	cmp	r2, r3
   12a6a:	d007      	beq.n	12a7c <isr_rx_conn_pkt_ctrl+0x94>
   12a6c:	4bbe      	ldr	r3, [pc, #760]	; (12d68 <isr_rx_conn_pkt_ctrl+0x380>)
   12a6e:	9301      	str	r3, [sp, #4]
   12a70:	9300      	str	r3, [sp, #0]
   12a72:	4bbe      	ldr	r3, [pc, #760]	; (12d6c <isr_rx_conn_pkt_ctrl+0x384>)
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   12a74:	4abe      	ldr	r2, [pc, #760]	; (12d70 <isr_rx_conn_pkt_ctrl+0x388>)
   12a76:	49bf      	ldr	r1, [pc, #764]	; (12d74 <isr_rx_conn_pkt_ctrl+0x38c>)
   12a78:	48bf      	ldr	r0, [pc, #764]	; (12d78 <isr_rx_conn_pkt_ctrl+0x390>)
   12a7a:	e0f7      	b.n	12c6c <isr_rx_conn_pkt_ctrl+0x284>
	if (_radio.conn_upd == 0) {
   12a7c:	f8d6 2790 	ldr.w	r2, [r6, #1936]	; 0x790
   12a80:	b90a      	cbnz	r2, 12a86 <isr_rx_conn_pkt_ctrl+0x9e>
		_radio.conn_upd = conn;
   12a82:	f8c6 5790 	str.w	r5, [r6, #1936]	; 0x790
	conn->llcp.conn_upd.win_size =
   12a86:	7b22      	ldrb	r2, [r4, #12]
   12a88:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
		pdu_data_rx->llctrl.conn_update_ind.win_offset * 1250;
   12a8c:	f8b4 000d 	ldrh.w	r0, [r4, #13]
   12a90:	f240 42e2 	movw	r2, #1250	; 0x4e2
   12a94:	4342      	muls	r2, r0
	conn->llcp.conn_upd.win_offset_us =
   12a96:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
		pdu_data_rx->llctrl.conn_update_ind.interval;
   12a9a:	7c20      	ldrb	r0, [r4, #16]
   12a9c:	7be2      	ldrb	r2, [r4, #15]
   12a9e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.interval =
   12aa2:	f8a5 207a 	strh.w	r2, [r5, #122]	; 0x7a
		pdu_data_rx->llctrl.conn_update_ind.latency;
   12aa6:	7ca0      	ldrb	r0, [r4, #18]
   12aa8:	7c62      	ldrb	r2, [r4, #17]
   12aaa:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.latency =
   12aae:	f8a5 207c 	strh.w	r2, [r5, #124]	; 0x7c
		pdu_data_rx->llctrl.conn_update_ind.timeout;
   12ab2:	7ce2      	ldrb	r2, [r4, #19]
   12ab4:	7d20      	ldrb	r0, [r4, #20]
	conn->llcp.conn_upd.instant =
   12ab6:	f8a5 1080 	strh.w	r1, [r5, #128]	; 0x80
		pdu_data_rx->llctrl.conn_update_ind.timeout;
   12aba:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.timeout =
   12abe:	f8a5 207e 	strh.w	r2, [r5, #126]	; 0x7e
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
   12ac2:	f895 2078 	ldrb.w	r2, [r5, #120]	; 0x78
	conn->llcp.conn_upd.is_internal = 0;
   12ac6:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
   12aca:	f36f 0282 	bfc	r2, #2, #1
	conn->llcp_ack--;
   12ace:	3b01      	subs	r3, #1
	conn->llcp.conn_upd.is_internal = 0;
   12ad0:	f885 2078 	strb.w	r2, [r5, #120]	; 0x78
	conn->llcp_type = LLCP_CONN_UPD;
   12ad4:	2201      	movs	r2, #1
   12ad6:	f885 2076 	strb.w	r2, [r5, #118]	; 0x76
	conn->llcp_ack--;
   12ada:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   12ade:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
   12ae2:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
   12ae6:	4293      	cmp	r3, r2
   12ae8:	d007      	beq.n	12afa <isr_rx_conn_pkt_ctrl+0x112>
	    (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT)) {
   12aea:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   12aee:	f003 0307 	and.w	r3, r3, #7
   12af2:	2b04      	cmp	r3, #4
   12af4:	d101      	bne.n	12afa <isr_rx_conn_pkt_ctrl+0x112>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   12af6:	f885 20c1 	strb.w	r2, [r5, #193]	; 0xc1
			_radio.conn_curr->procedure_expire = 0;
   12afa:	2000      	movs	r0, #0
   12afc:	f8a5 0044 	strh.w	r0, [r5, #68]	; 0x44
   12b00:	e038      	b.n	12b74 <isr_rx_conn_pkt_ctrl+0x18c>
		if (!_radio.conn_curr->role ||
   12b02:	4b98      	ldr	r3, [pc, #608]	; (12d64 <isr_rx_conn_pkt_ctrl+0x37c>)
   12b04:	f8d3 571c 	ldr.w	r5, [r3, #1820]	; 0x71c
   12b08:	f995 301d 	ldrsb.w	r3, [r5, #29]
   12b0c:	2b00      	cmp	r3, #0
   12b0e:	f281 8059 	bge.w	13bc4 <isr_rx_conn_pkt_ctrl+0x11dc>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CHAN_MAP_IND,
   12b12:	7a41      	ldrb	r1, [r0, #9]
   12b14:	2001      	movs	r0, #1
   12b16:	f7fb fd0f 	bl	e538 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
   12b1a:	2800      	cmp	r0, #0
   12b1c:	f001 8052 	beq.w	13bc4 <isr_rx_conn_pkt_ctrl+0x11dc>
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
   12b20:	f8b4 3011 	ldrh.w	r3, [r4, #17]
	      conn->event_counter) & 0xffff) > 0x7fff) {
   12b24:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
   12b26:	1a9b      	subs	r3, r3, r2
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
   12b28:	041f      	lsls	r7, r3, #16
   12b2a:	f101 8061 	bmi.w	13bf0 <isr_rx_conn_pkt_ctrl+0x1208>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   12b2e:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
   12b32:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
   12b36:	429a      	cmp	r2, r3
   12b38:	d004      	beq.n	12b44 <isr_rx_conn_pkt_ctrl+0x15c>
   12b3a:	4b8b      	ldr	r3, [pc, #556]	; (12d68 <isr_rx_conn_pkt_ctrl+0x380>)
   12b3c:	9301      	str	r3, [sp, #4]
   12b3e:	9300      	str	r3, [sp, #0]
   12b40:	4b8e      	ldr	r3, [pc, #568]	; (12d7c <isr_rx_conn_pkt_ctrl+0x394>)
   12b42:	e797      	b.n	12a74 <isr_rx_conn_pkt_ctrl+0x8c>
	memcpy(&conn->llcp.chan_map.chm[0],
   12b44:	2205      	movs	r2, #5
   12b46:	f104 010c 	add.w	r1, r4, #12
   12b4a:	f105 0079 	add.w	r0, r5, #121	; 0x79
   12b4e:	f7ed fe20 	bl	792 <memcpy>
		pdu_data_rx->llctrl.chan_map_ind.instant;
   12b52:	7c63      	ldrb	r3, [r4, #17]
   12b54:	7ca2      	ldrb	r2, [r4, #18]
   12b56:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp.chan_map.instant =
   12b5a:	f8a5 307e 	strh.w	r3, [r5, #126]	; 0x7e
	conn->llcp_type = LLCP_CHAN_MAP;
   12b5e:	2302      	movs	r3, #2
   12b60:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
	conn->llcp_ack--;
   12b64:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
	conn->llcp.chan_map.initiate = 0;
   12b68:	2000      	movs	r0, #0
	conn->llcp_ack--;
   12b6a:	3b01      	subs	r3, #1
	conn->llcp.chan_map.initiate = 0;
   12b6c:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
	conn->llcp_ack--;
   12b70:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
}
   12b74:	b003      	add	sp, #12
   12b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_TERMINATE_IND,
   12b7a:	7a41      	ldrb	r1, [r0, #9]
   12b7c:	2002      	movs	r0, #2
   12b7e:	f7fb fcdb 	bl	e538 <pdu_len_cmp>
   12b82:	2800      	cmp	r0, #0
   12b84:	f001 801e 	beq.w	13bc4 <isr_rx_conn_pkt_ctrl+0x11dc>
		_radio.conn_curr->llcp_terminate.reason_peer =
   12b88:	4b76      	ldr	r3, [pc, #472]	; (12d64 <isr_rx_conn_pkt_ctrl+0x37c>)
   12b8a:	7b22      	ldrb	r2, [r4, #12]
   12b8c:	f8d3 371c 	ldr.w	r3, [r3, #1820]	; 0x71c
   12b90:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	u8_t nack = 0;
   12b94:	2000      	movs	r0, #0
	return nack;
   12b96:	e7ed      	b.n	12b74 <isr_rx_conn_pkt_ctrl+0x18c>
		if (!_radio.conn_curr->role ||
   12b98:	4e72      	ldr	r6, [pc, #456]	; (12d64 <isr_rx_conn_pkt_ctrl+0x37c>)
   12b9a:	f8d6 871c 	ldr.w	r8, [r6, #1820]	; 0x71c
   12b9e:	f998 301d 	ldrsb.w	r3, [r8, #29]
   12ba2:	2b00      	cmp	r3, #0
   12ba4:	f281 800e 	bge.w	13bc4 <isr_rx_conn_pkt_ctrl+0x11dc>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_ENC_REQ,
   12ba8:	7a41      	ldrb	r1, [r0, #9]
   12baa:	2003      	movs	r0, #3
   12bac:	f7fb fcc4 	bl	e538 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
   12bb0:	2800      	cmp	r0, #0
   12bb2:	f001 8007 	beq.w	13bc4 <isr_rx_conn_pkt_ctrl+0x11dc>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
   12bb6:	2208      	movs	r2, #8
   12bb8:	f104 0116 	add.w	r1, r4, #22
   12bbc:	f108 0094 	add.w	r0, r8, #148	; 0x94
   12bc0:	f7ed fde7 	bl	792 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
   12bc4:	f8d6 071c 	ldr.w	r0, [r6, #1820]	; 0x71c
   12bc8:	2204      	movs	r2, #4
   12bca:	f104 011e 	add.w	r1, r4, #30
   12bce:	f500 7089 	add.w	r0, r0, #274	; 0x112
   12bd2:	f7ed fdde 	bl	792 <memcpy>
		_radio.conn_curr->pause_rx = 1;
   12bd6:	f8d6 371c 	ldr.w	r3, [r6, #1820]	; 0x71c
   12bda:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   12bde:	f042 0204 	orr.w	r2, r2, #4
   12be2:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
   12be6:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
   12bea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	*rx_enqueue = 1;
   12bee:	2301      	movs	r3, #1
   12bf0:	702b      	strb	r3, [r5, #0]
   12bf2:	e7cf      	b.n	12b94 <isr_rx_conn_pkt_ctrl+0x1ac>
		if (_radio.conn_curr->role ||
   12bf4:	4d5b      	ldr	r5, [pc, #364]	; (12d64 <isr_rx_conn_pkt_ctrl+0x37c>)
   12bf6:	f8d5 671c 	ldr.w	r6, [r5, #1820]	; 0x71c
   12bfa:	f996 301d 	ldrsb.w	r3, [r6, #29]
   12bfe:	2b00      	cmp	r3, #0
   12c00:	f2c0 87e0 	blt.w	13bc4 <isr_rx_conn_pkt_ctrl+0x11dc>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_ENC_RSP,
   12c04:	7a41      	ldrb	r1, [r0, #9]
   12c06:	2004      	movs	r0, #4
   12c08:	f7fb fc96 	bl	e538 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
   12c0c:	2800      	cmp	r0, #0
   12c0e:	f000 87d9 	beq.w	13bc4 <isr_rx_conn_pkt_ctrl+0x11dc>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[8],
   12c12:	2208      	movs	r2, #8
   12c14:	f104 010c 	add.w	r1, r4, #12
   12c18:	f106 009c 	add.w	r0, r6, #156	; 0x9c
   12c1c:	f7ed fdb9 	bl	792 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[4],
   12c20:	f8d5 071c 	ldr.w	r0, [r5, #1820]	; 0x71c
   12c24:	2204      	movs	r2, #4
   12c26:	f104 0114 	add.w	r1, r4, #20
   12c2a:	f500 708b 	add.w	r0, r0, #278	; 0x116
   12c2e:	f7ed fdb0 	bl	792 <memcpy>
		_radio.conn_curr->pause_rx = 1;
   12c32:	f8d5 271c 	ldr.w	r2, [r5, #1820]	; 0x71c
   12c36:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   12c3a:	f043 0304 	orr.w	r3, r3, #4
   12c3e:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
   12c42:	e7a7      	b.n	12b94 <isr_rx_conn_pkt_ctrl+0x1ac>
		LL_ASSERT((_radio.conn_curr->llcp_req ==
   12c44:	4b47      	ldr	r3, [pc, #284]	; (12d64 <isr_rx_conn_pkt_ctrl+0x37c>)
   12c46:	f8d3 571c 	ldr.w	r5, [r3, #1820]	; 0x71c
   12c4a:	f895 6075 	ldrb.w	r6, [r5, #117]	; 0x75
   12c4e:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   12c52:	42b3      	cmp	r3, r6
   12c54:	d012      	beq.n	12c7c <isr_rx_conn_pkt_ctrl+0x294>
   12c56:	f895 3076 	ldrb.w	r3, [r5, #118]	; 0x76
   12c5a:	2b03      	cmp	r3, #3
   12c5c:	d00e      	beq.n	12c7c <isr_rx_conn_pkt_ctrl+0x294>
			LL_ASSERT((_radio.conn_curr->llcp_req ==
   12c5e:	4b42      	ldr	r3, [pc, #264]	; (12d68 <isr_rx_conn_pkt_ctrl+0x380>)
   12c60:	9301      	str	r3, [sp, #4]
   12c62:	9300      	str	r3, [sp, #0]
   12c64:	4a42      	ldr	r2, [pc, #264]	; (12d70 <isr_rx_conn_pkt_ctrl+0x388>)
   12c66:	4b46      	ldr	r3, [pc, #280]	; (12d80 <isr_rx_conn_pkt_ctrl+0x398>)
   12c68:	4942      	ldr	r1, [pc, #264]	; (12d74 <isr_rx_conn_pkt_ctrl+0x38c>)
   12c6a:	4846      	ldr	r0, [pc, #280]	; (12d84 <isr_rx_conn_pkt_ctrl+0x39c>)
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   12c6c:	f7ef fb18 	bl	22a0 <printk>
   12c70:	4040      	eors	r0, r0
   12c72:	f380 8811 	msr	BASEPRI, r0
   12c76:	f04f 0004 	mov.w	r0, #4
   12c7a:	df02      	svc	2
		if (_radio.conn_curr->role ||
   12c7c:	f995 301d 	ldrsb.w	r3, [r5, #29]
   12c80:	2b00      	cmp	r3, #0
   12c82:	f2c0 879f 	blt.w	13bc4 <isr_rx_conn_pkt_ctrl+0x11dc>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_REQ,
   12c86:	7a61      	ldrb	r1, [r4, #9]
   12c88:	2005      	movs	r0, #5
   12c8a:	f7fb fc55 	bl	e538 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
   12c8e:	2800      	cmp	r0, #0
   12c90:	f000 8798 	beq.w	13bc4 <isr_rx_conn_pkt_ctrl+0x11dc>
		_radio.conn_curr->llcp.encryption.initiate = 0;
   12c94:	2000      	movs	r0, #0
		_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
   12c96:	2303      	movs	r3, #3
		_radio.conn_curr->llcp_ack--;
   12c98:	3e01      	subs	r6, #1
		_radio.conn_curr->llcp.encryption.initiate = 0;
   12c9a:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
		_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
   12c9e:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
		_radio.conn_curr->llcp_ack--;
   12ca2:	f885 6075 	strb.w	r6, [r5, #117]	; 0x75
		break;
   12ca6:	e765      	b.n	12b74 <isr_rx_conn_pkt_ctrl+0x18c>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
   12ca8:	7a41      	ldrb	r1, [r0, #9]
   12caa:	2006      	movs	r0, #6
   12cac:	f7fb fc44 	bl	e538 <pdu_len_cmp>
   12cb0:	2800      	cmp	r0, #0
   12cb2:	f000 8787 	beq.w	13bc4 <isr_rx_conn_pkt_ctrl+0x11dc>
		if (_radio.role == ROLE_SLAVE) {
   12cb6:	4b2b      	ldr	r3, [pc, #172]	; (12d64 <isr_rx_conn_pkt_ctrl+0x37c>)
   12cb8:	7cda      	ldrb	r2, [r3, #19]
   12cba:	2a03      	cmp	r2, #3
   12cbc:	4619      	mov	r1, r3
   12cbe:	d124      	bne.n	12d0a <isr_rx_conn_pkt_ctrl+0x322>
			LL_ASSERT((_radio.conn_curr->llcp_req ==
   12cc0:	f8d3 371c 	ldr.w	r3, [r3, #1820]	; 0x71c
   12cc4:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
   12cc8:	f893 0074 	ldrb.w	r0, [r3, #116]	; 0x74
   12ccc:	4290      	cmp	r0, r2
   12cce:	d003      	beq.n	12cd8 <isr_rx_conn_pkt_ctrl+0x2f0>
   12cd0:	f893 0076 	ldrb.w	r0, [r3, #118]	; 0x76
   12cd4:	2803      	cmp	r0, #3
   12cd6:	d1c2      	bne.n	12c5e <isr_rx_conn_pkt_ctrl+0x276>
			_radio.conn_curr->llcp.encryption.initiate = 0;
   12cd8:	2000      	movs	r0, #0
   12cda:	f883 0078 	strb.w	r0, [r3, #120]	; 0x78
			_radio.conn_curr->llcp_ack--;
   12cde:	3a01      	subs	r2, #1
			_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
   12ce0:	2003      	movs	r0, #3
   12ce2:	f883 0076 	strb.w	r0, [r3, #118]	; 0x76
			_radio.conn_curr->llcp_ack--;
   12ce6:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
		if (_radio.conn_curr->refresh) {
   12cea:	f8d1 271c 	ldr.w	r2, [r1, #1820]	; 0x71c
   12cee:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   12cf2:	065e      	lsls	r6, r3, #25
   12cf4:	d505      	bpl.n	12d02 <isr_rx_conn_pkt_ctrl+0x31a>
			_radio.conn_curr->refresh = 0;
   12cf6:	f36f 1386 	bfc	r3, #6, #1
   12cfa:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
			node_rx->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   12cfe:	2309      	movs	r3, #9
   12d00:	7123      	strb	r3, [r4, #4]
				*rx_enqueue = 1;
   12d02:	2301      	movs	r3, #1
   12d04:	702b      	strb	r3, [r5, #0]
				break;
   12d06:	f000 bcbf 	b.w	13688 <isr_rx_conn_pkt_ctrl+0xca0>
			_radio.conn_curr->pause_rx = 0;
   12d0a:	f8d3 271c 	ldr.w	r2, [r3, #1820]	; 0x71c
   12d0e:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
   12d12:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   12d16:	f36f 03c3 	bfc	r3, #3, #1
   12d1a:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
   12d1e:	e7e4      	b.n	12cea <isr_rx_conn_pkt_ctrl+0x302>
		if (!_radio.conn_curr->role ||
   12d20:	4b10      	ldr	r3, [pc, #64]	; (12d64 <isr_rx_conn_pkt_ctrl+0x37c>)
   12d22:	f8d3 571c 	ldr.w	r5, [r3, #1820]	; 0x71c
   12d26:	f995 301d 	ldrsb.w	r3, [r5, #29]
   12d2a:	2b00      	cmp	r3, #0
   12d2c:	f280 874a 	bge.w	13bc4 <isr_rx_conn_pkt_ctrl+0x11dc>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_REQ,
   12d30:	7a41      	ldrb	r1, [r0, #9]
   12d32:	2008      	movs	r0, #8
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
   12d34:	f7fb fc00 	bl	e538 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
   12d38:	2800      	cmp	r0, #0
   12d3a:	f000 8743 	beq.w	13bc4 <isr_rx_conn_pkt_ctrl+0x11dc>
		nack = feature_rsp_send(_radio.conn_curr, pdu_data_rx);
   12d3e:	4631      	mov	r1, r6
   12d40:	4628      	mov	r0, r5
}
   12d42:	b003      	add	sp, #12
   12d44:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		nack = feature_rsp_send(_radio.conn_curr, pdu_data_rx);
   12d48:	f7fe ba66 	b.w	11218 <feature_rsp_send>
		if (_radio.conn_curr->role ||
   12d4c:	4b05      	ldr	r3, [pc, #20]	; (12d64 <isr_rx_conn_pkt_ctrl+0x37c>)
   12d4e:	f8d3 571c 	ldr.w	r5, [r3, #1820]	; 0x71c
   12d52:	f995 301d 	ldrsb.w	r3, [r5, #29]
   12d56:	2b00      	cmp	r3, #0
   12d58:	f2c0 8734 	blt.w	13bc4 <isr_rx_conn_pkt_ctrl+0x11dc>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
   12d5c:	7a41      	ldrb	r1, [r0, #9]
   12d5e:	200e      	movs	r0, #14
   12d60:	e7e8      	b.n	12d34 <isr_rx_conn_pkt_ctrl+0x34c>
   12d62:	bf00      	nop
   12d64:	20000bf0 	.word	0x20000bf0
   12d68:	00023dbe 	.word	0x00023dbe
   12d6c:	00025e58 	.word	0x00025e58
   12d70:	00022d86 	.word	0x00022d86
   12d74:	000272e8 	.word	0x000272e8
   12d78:	00026343 	.word	0x00026343
   12d7c:	00025e64 	.word	0x00025e64
   12d80:	00025a7c 	.word	0x00025a7c
   12d84:	00026385 	.word	0x00026385
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_RSP,
   12d88:	7a41      	ldrb	r1, [r0, #9]
   12d8a:	2009      	movs	r0, #9
   12d8c:	f7fb fbd4 	bl	e538 <pdu_len_cmp>
   12d90:	2800      	cmp	r0, #0
   12d92:	f000 8717 	beq.w	13bc4 <isr_rx_conn_pkt_ctrl+0x11dc>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
   12d96:	7b23      	ldrb	r3, [r4, #12]
	       (features[1] << 8) | (features[2] << 16);
   12d98:	7b61      	ldrb	r1, [r4, #13]
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
   12d9a:	48b2      	ldr	r0, [pc, #712]	; (13064 <isr_rx_conn_pkt_ctrl+0x67c>)
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
   12d9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
   12da0:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
   12da4:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
   12da8:	f043 0310 	orr.w	r3, r3, #16
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
   12dac:	f8d0 271c 	ldr.w	r2, [r0, #1820]	; 0x71c
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
   12db0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	       (features[1] << 8) | (features[2] << 16);
   12db4:	7ba1      	ldrb	r1, [r4, #14]
   12db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
   12dba:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
   12dbe:	f3c1 0110 	ubfx	r1, r1, #0, #17
   12dc2:	400b      	ands	r3, r1
   12dc4:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
		_radio.conn_curr->common.fex_valid = 1;
   12dc8:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
   12dcc:	f043 0320 	orr.w	r3, r3, #32
   12dd0:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
		*rx_enqueue = 1;
   12dd4:	2301      	movs	r3, #1
   12dd6:	702b      	strb	r3, [r5, #0]
		_radio.conn_curr->procedure_expire = 0;
   12dd8:	f8d0 371c 	ldr.w	r3, [r0, #1820]	; 0x71c
		_radio.conn_curr->procedure_expire = 0;
   12ddc:	2000      	movs	r0, #0
   12dde:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
		break;
   12de2:	e6c7      	b.n	12b74 <isr_rx_conn_pkt_ctrl+0x18c>
		if (!_radio.conn_curr->role ||
   12de4:	4e9f      	ldr	r6, [pc, #636]	; (13064 <isr_rx_conn_pkt_ctrl+0x67c>)
   12de6:	f8d6 571c 	ldr.w	r5, [r6, #1820]	; 0x71c
   12dea:	f995 301d 	ldrsb.w	r3, [r5, #29]
   12dee:	2b00      	cmp	r3, #0
   12df0:	f280 86e8 	bge.w	13bc4 <isr_rx_conn_pkt_ctrl+0x11dc>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_REQ,
   12df4:	7a41      	ldrb	r1, [r0, #9]
   12df6:	200a      	movs	r0, #10
   12df8:	f7fb fb9e 	bl	e538 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
   12dfc:	2800      	cmp	r0, #0
   12dfe:	f000 86e1 	beq.w	13bc4 <isr_rx_conn_pkt_ctrl+0x11dc>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   12e02:	f206 7064 	addw	r0, r6, #1892	; 0x764
   12e06:	f7f8 fcee 	bl	b7e6 <mem_acquire>
		if (!node_tx) {
   12e0a:	4601      	mov	r1, r0
   12e0c:	b908      	cbnz	r0, 12e12 <isr_rx_conn_pkt_ctrl+0x42a>
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
   12e0e:	2001      	movs	r0, #1
   12e10:	e6b0      	b.n	12b74 <isr_rx_conn_pkt_ctrl+0x18c>
		conn->refresh = 1;
   12e12:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
	conn->enc_rx = 0;
   12e16:	f043 0344 	orr.w	r3, r3, #68	; 0x44
   12e1a:	f36f 1304 	bfc	r3, #4, #1
   12e1e:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12e22:	7903      	ldrb	r3, [r0, #4]
   12e24:	f043 0303 	orr.w	r3, r3, #3
   12e28:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   12e2a:	2301      	movs	r3, #1
   12e2c:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   12e2e:	230b      	movs	r3, #11
   12e30:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, node_tx);
   12e32:	4628      	mov	r0, r5
   12e34:	f000 bce0 	b.w	137f8 <isr_rx_conn_pkt_ctrl+0xe10>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
   12e38:	7a41      	ldrb	r1, [r0, #9]
   12e3a:	200b      	movs	r0, #11
   12e3c:	f7fb fb7c 	bl	e538 <pdu_len_cmp>
   12e40:	2800      	cmp	r0, #0
   12e42:	f000 86bf 	beq.w	13bc4 <isr_rx_conn_pkt_ctrl+0x11dc>
		nack = pause_enc_rsp_send(_radio.conn_curr, 0);
   12e46:	4887      	ldr	r0, [pc, #540]	; (13064 <isr_rx_conn_pkt_ctrl+0x67c>)
   12e48:	f8d0 471c 	ldr.w	r4, [r0, #1820]	; 0x71c
	} else if (!conn->role) {
   12e4c:	f994 301d 	ldrsb.w	r3, [r4, #29]
   12e50:	2b00      	cmp	r3, #0
   12e52:	db1b      	blt.n	12e8c <isr_rx_conn_pkt_ctrl+0x4a4>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   12e54:	f200 7064 	addw	r0, r0, #1892	; 0x764
   12e58:	f7f8 fcc5 	bl	b7e6 <mem_acquire>
		if (!node_tx) {
   12e5c:	4601      	mov	r1, r0
   12e5e:	2800      	cmp	r0, #0
   12e60:	d0d5      	beq.n	12e0e <isr_rx_conn_pkt_ctrl+0x426>
		conn->enc_tx = 0;
   12e62:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
	conn->pause_rx = 1;
   12e66:	f003 03df 	and.w	r3, r3, #223	; 0xdf
	conn->enc_rx = 0;
   12e6a:	f043 0304 	orr.w	r3, r3, #4
   12e6e:	f36f 1304 	bfc	r3, #4, #1
   12e72:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12e76:	7903      	ldrb	r3, [r0, #4]
   12e78:	f043 0303 	orr.w	r3, r3, #3
   12e7c:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   12e7e:	2301      	movs	r3, #1
   12e80:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   12e82:	230b      	movs	r3, #11
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   12e84:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_enqueue(conn, node_tx);
   12e86:	4620      	mov	r0, r4
   12e88:	f000 bcb6 	b.w	137f8 <isr_rx_conn_pkt_ctrl+0xe10>
		conn->enc_tx = 0;
   12e8c:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   12e90:	f36f 1345 	bfc	r3, #5, #1
   12e94:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
   12e98:	e67c      	b.n	12b94 <isr_rx_conn_pkt_ctrl+0x1ac>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_VERSION_IND,
   12e9a:	7a41      	ldrb	r1, [r0, #9]
   12e9c:	200c      	movs	r0, #12
   12e9e:	f7fb fb4b 	bl	e538 <pdu_len_cmp>
   12ea2:	2800      	cmp	r0, #0
   12ea4:	f000 868e 	beq.w	13bc4 <isr_rx_conn_pkt_ctrl+0x11dc>
		nack = version_ind_send(_radio.conn_curr, pdu_data_rx,
   12ea8:	486e      	ldr	r0, [pc, #440]	; (13064 <isr_rx_conn_pkt_ctrl+0x67c>)
   12eaa:	f8d0 671c 	ldr.w	r6, [r0, #1820]	; 0x71c
	if (!conn->llcp_version.tx) {
   12eae:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
   12eb2:	f013 0701 	ands.w	r7, r3, #1
   12eb6:	d150      	bne.n	12f5a <isr_rx_conn_pkt_ctrl+0x572>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   12eb8:	f200 7064 	addw	r0, r0, #1892	; 0x764
   12ebc:	f7f8 fc93 	bl	b7e6 <mem_acquire>
		if (!node_tx) {
   12ec0:	4601      	mov	r1, r0
   12ec2:	2800      	cmp	r0, #0
   12ec4:	d0a3      	beq.n	12e0e <isr_rx_conn_pkt_ctrl+0x426>
		conn->llcp_version.tx = 1;
   12ec6:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
   12eca:	f043 0301 	orr.w	r3, r3, #1
   12ece:	f886 30a8 	strb.w	r3, [r6, #168]	; 0xa8
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12ed2:	7903      	ldrb	r3, [r0, #4]
   12ed4:	f043 0303 	orr.w	r3, r3, #3
   12ed8:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
   12eda:	2306      	movs	r3, #6
   12edc:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   12ede:	230c      	movs	r3, #12
   12ee0:	71c3      	strb	r3, [r0, #7]
		v->version_number = RADIO_BLE_VERSION_NUMBER;
   12ee2:	2309      	movs	r3, #9
   12ee4:	7203      	strb	r3, [r0, #8]
		v->company_id =	RADIO_BLE_COMPANY_ID;
   12ee6:	f06f 030e 	mvn.w	r3, #14
   12eea:	7243      	strb	r3, [r0, #9]
   12eec:	2305      	movs	r3, #5
   12eee:	7283      	strb	r3, [r0, #10]
		v->sub_version_number =	RADIO_BLE_SUB_VERSION_NUMBER;
   12ef0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12ef4:	72c3      	strb	r3, [r0, #11]
   12ef6:	7303      	strb	r3, [r0, #12]
		ctrl_tx_sec_enqueue(conn, node_tx);
   12ef8:	4630      	mov	r0, r6
   12efa:	f7fe f973 	bl	111e4 <ctrl_tx_sec_enqueue>
	conn->empty = 1;
   12efe:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
   12f02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   12f06:	f886 30f8 	strb.w	r3, [r6, #248]	; 0xf8
	pdu_data_tx = (void *)radio_pkt_empty_get();
   12f0a:	f005 fd93 	bl	18a34 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   12f0e:	7803      	ldrb	r3, [r0, #0]
	pdu_data_tx->len = 0;
   12f10:	7047      	strb	r7, [r0, #1]
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   12f12:	2201      	movs	r2, #1
   12f14:	f362 0301 	bfi	r3, r2, #0, #2
	if (conn->pkt_tx_head) {
   12f18:	f8d6 213c 	ldr.w	r2, [r6, #316]	; 0x13c
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   12f1c:	7003      	strb	r3, [r0, #0]
   12f1e:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
   12f20:	b1c2      	cbz	r2, 12f54 <isr_rx_conn_pkt_ctrl+0x56c>
		pdu_data_tx->md = 1;
   12f22:	f043 0310 	orr.w	r3, r3, #16
		pdu_data_tx->md = 0;
   12f26:	7003      	strb	r3, [r0, #0]
	conn->llcp_version.version_number = v->version_number;
   12f28:	7b23      	ldrb	r3, [r4, #12]
   12f2a:	f886 30a9 	strb.w	r3, [r6, #169]	; 0xa9
	conn->llcp_version.company_id = v->company_id;
   12f2e:	7ba2      	ldrb	r2, [r4, #14]
   12f30:	7b63      	ldrb	r3, [r4, #13]
   12f32:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   12f36:	f8a6 30aa 	strh.w	r3, [r6, #170]	; 0xaa
	conn->llcp_version.sub_version_number = v->sub_version_number;
   12f3a:	7be3      	ldrb	r3, [r4, #15]
   12f3c:	7c22      	ldrb	r2, [r4, #16]
   12f3e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   12f42:	f8a6 30ac 	strh.w	r3, [r6, #172]	; 0xac
	conn->llcp_version.rx = 1;
   12f46:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
   12f4a:	f043 0302 	orr.w	r3, r3, #2
   12f4e:	f886 30a8 	strb.w	r3, [r6, #168]	; 0xa8
   12f52:	e61f      	b.n	12b94 <isr_rx_conn_pkt_ctrl+0x1ac>
		pdu_data_tx->md = 0;
   12f54:	f362 1304 	bfi	r3, r2, #4, #1
   12f58:	e7e5      	b.n	12f26 <isr_rx_conn_pkt_ctrl+0x53e>
	} else if (!conn->llcp_version.rx) {
   12f5a:	f013 0302 	ands.w	r3, r3, #2
   12f5e:	f47f ae19 	bne.w	12b94 <isr_rx_conn_pkt_ctrl+0x1ac>
		conn->procedure_expire = 0;
   12f62:	f8a6 3044 	strh.w	r3, [r6, #68]	; 0x44
		*rx_enqueue = 1;
   12f66:	2301      	movs	r3, #1
   12f68:	702b      	strb	r3, [r5, #0]
   12f6a:	e7dd      	b.n	12f28 <isr_rx_conn_pkt_ctrl+0x540>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_IND,
   12f6c:	7a41      	ldrb	r1, [r0, #9]
   12f6e:	200d      	movs	r0, #13
   12f70:	f7fb fae2 	bl	e538 <pdu_len_cmp>
   12f74:	2800      	cmp	r0, #0
   12f76:	f000 8625 	beq.w	13bc4 <isr_rx_conn_pkt_ctrl+0x11dc>
		_radio.conn_curr->pause_rx = 0;
   12f7a:	4b3a      	ldr	r3, [pc, #232]	; (13064 <isr_rx_conn_pkt_ctrl+0x67c>)
   12f7c:	f8d3 271c 	ldr.w	r2, [r3, #1820]	; 0x71c
   12f80:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
		_radio.conn_curr->pause_tx = 0;
   12f84:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   12f88:	f36f 03c3 	bfc	r3, #3, #1
		_radio.conn_curr->procedure_expire = 0;
   12f8c:	2000      	movs	r0, #0
		_radio.conn_curr->pause_tx = 0;
   12f8e:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
		_radio.conn_curr->procedure_expire = 0;
   12f92:	f8a2 0044 	strh.w	r0, [r2, #68]	; 0x44
		*rx_enqueue = 1;
   12f96:	2301      	movs	r3, #1
   12f98:	702b      	strb	r3, [r5, #0]
   12f9a:	e5eb      	b.n	12b74 <isr_rx_conn_pkt_ctrl+0x18c>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ,
   12f9c:	7a41      	ldrb	r1, [r0, #9]
   12f9e:	200f      	movs	r0, #15
   12fa0:	f7fb faca 	bl	e538 <pdu_len_cmp>
   12fa4:	2800      	cmp	r0, #0
   12fa6:	f000 860d 	beq.w	13bc4 <isr_rx_conn_pkt_ctrl+0x11dc>
		if (_radio.conn_upd && (_radio.conn_upd != _radio.conn_curr)) {
   12faa:	4b2e      	ldr	r3, [pc, #184]	; (13064 <isr_rx_conn_pkt_ctrl+0x67c>)
   12fac:	f8d3 1790 	ldr.w	r1, [r3, #1936]	; 0x790
   12fb0:	461a      	mov	r2, r3
   12fb2:	b151      	cbz	r1, 12fca <isr_rx_conn_pkt_ctrl+0x5e2>
   12fb4:	f8d3 071c 	ldr.w	r0, [r3, #1820]	; 0x71c
   12fb8:	4281      	cmp	r1, r0
   12fba:	d006      	beq.n	12fca <isr_rx_conn_pkt_ctrl+0x5e2>
			nack = reject_ext_ind_send(_radio.conn_curr,
   12fbc:	2220      	movs	r2, #32
				nack = reject_ext_ind_send(_radio.conn_curr,
   12fbe:	210f      	movs	r1, #15
}
   12fc0:	b003      	add	sp, #12
   12fc2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				nack = reject_ext_ind_send(_radio.conn_curr,
   12fc6:	f7fe b991 	b.w	112ec <reject_ext_ind_send>
		if (!_radio.conn_curr->role) {
   12fca:	f8d2 071c 	ldr.w	r0, [r2, #1820]	; 0x71c
   12fce:	f990 301d 	ldrsb.w	r3, [r0, #29]
   12fd2:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
   12fd6:	2b00      	cmp	r3, #0
   12fd8:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
   12fdc:	f2c0 80a7 	blt.w	1312e <isr_rx_conn_pkt_ctrl+0x746>
			if ((conn->llcp_conn_param.req !=
   12fe0:	4299      	cmp	r1, r3
   12fe2:	d009      	beq.n	12ff8 <isr_rx_conn_pkt_ctrl+0x610>
			    ((conn->llcp_conn_param.state ==
   12fe4:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
					conn->llcp_conn_param.ack) &&
   12fe8:	f013 0307 	ands.w	r3, r3, #7
   12fec:	d002      	beq.n	12ff4 <isr_rx_conn_pkt_ctrl+0x60c>
			      LLCP_CPR_STATE_REQ) ||
   12fee:	3b04      	subs	r3, #4
   12ff0:	2b01      	cmp	r3, #1
   12ff2:	d801      	bhi.n	12ff8 <isr_rx_conn_pkt_ctrl+0x610>
				nack = reject_ext_ind_send(_radio.conn_curr,
   12ff4:	2223      	movs	r2, #35	; 0x23
   12ff6:	e7e2      	b.n	12fbe <isr_rx_conn_pkt_ctrl+0x5d6>
			} else if (((conn->llcp_req != conn->llcp_ack) &&
   12ff8:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
   12ffc:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   13000:	4299      	cmp	r1, r3
   13002:	d003      	beq.n	1300c <isr_rx_conn_pkt_ctrl+0x624>
   13004:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
   13008:	2b03      	cmp	r3, #3
   1300a:	d105      	bne.n	13018 <isr_rx_conn_pkt_ctrl+0x630>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
   1300c:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
   13010:	f890 30f5 	ldrb.w	r3, [r0, #245]	; 0xf5
   13014:	4299      	cmp	r1, r3
   13016:	d001      	beq.n	1301c <isr_rx_conn_pkt_ctrl+0x634>
				nack = reject_ext_ind_send(_radio.conn_curr,
   13018:	222a      	movs	r2, #42	; 0x2a
   1301a:	e7d0      	b.n	12fbe <isr_rx_conn_pkt_ctrl+0x5d6>
				if ((cpr->interval_min < 6) ||
   1301c:	f8b4 800c 	ldrh.w	r8, [r4, #12]
   13020:	4643      	mov	r3, r8
   13022:	2b05      	cmp	r3, #5
   13024:	d91b      	bls.n	1305e <isr_rx_conn_pkt_ctrl+0x676>
				    (cpr->interval_max > 3200) ||
   13026:	89e7      	ldrh	r7, [r4, #14]
				if ((cpr->interval_min < 6) ||
   13028:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
   1302c:	d817      	bhi.n	1305e <isr_rx_conn_pkt_ctrl+0x676>
				    (cpr->interval_max > 3200) ||
   1302e:	45b8      	cmp	r8, r7
   13030:	d815      	bhi.n	1305e <isr_rx_conn_pkt_ctrl+0x676>
				    (cpr->latency > 499) ||
   13032:	f8b4 c010 	ldrh.w	ip, [r4, #16]
				    (cpr->interval_min > cpr->interval_max) ||
   13036:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
   1303a:	d210      	bcs.n	1305e <isr_rx_conn_pkt_ctrl+0x676>
				    (cpr->timeout < 10) ||
   1303c:	f8b4 e012 	ldrh.w	lr, [r4, #18]
				    (cpr->latency > 499) ||
   13040:	f1ae 060a 	sub.w	r6, lr, #10
   13044:	b2b6      	uxth	r6, r6
   13046:	f640 4976 	movw	r9, #3190	; 0xc76
   1304a:	454e      	cmp	r6, r9
   1304c:	d807      	bhi.n	1305e <isr_rx_conn_pkt_ctrl+0x676>
				     ((cpr->latency + 1) *
   1304e:	fb0c 7107 	mla	r1, ip, r7, r7
				    (cpr->timeout > 3200) ||
   13052:	ebb1 0f8e 	cmp.w	r1, lr, lsl #2
   13056:	da02      	bge.n	1305e <isr_rx_conn_pkt_ctrl+0x676>
				    (cpr->preferred_periodicity >
   13058:	7d21      	ldrb	r1, [r4, #20]
				      cpr->interval_max)) ||
   1305a:	428f      	cmp	r7, r1
   1305c:	d204      	bcs.n	13068 <isr_rx_conn_pkt_ctrl+0x680>
				nack = reject_ext_ind_send(conn,
   1305e:	221e      	movs	r2, #30
   13060:	e7ad      	b.n	12fbe <isr_rx_conn_pkt_ctrl+0x5d6>
   13062:	bf00      	nop
   13064:	20000bf0 	.word	0x20000bf0
				conn->llcp_conn_param.interval = cpr->interval_min;
   13068:	f8a0 80c4 	strh.w	r8, [r0, #196]	; 0xc4
				conn->llcp_conn_param.latency =	cpr->latency;
   1306c:	f8a0 c0c6 	strh.w	ip, [r0, #198]	; 0xc6
				conn->llcp_conn_param.timeout =	cpr->timeout;
   13070:	f8a0 e0c8 	strh.w	lr, [r0, #200]	; 0xc8
				conn->llcp_conn_param.preferred_periodicity =
   13074:	f880 10ca 	strb.w	r1, [r0, #202]	; 0xca
					cpr->reference_conn_event_count;
   13078:	7da6      	ldrb	r6, [r4, #22]
   1307a:	7d61      	ldrb	r1, [r4, #21]
   1307c:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
   13080:	f8a0 10cc 	strh.w	r1, [r0, #204]	; 0xcc
				conn->llcp_conn_param.offset0 =	cpr->offset0;
   13084:	7e26      	ldrb	r6, [r4, #24]
   13086:	7de1      	ldrb	r1, [r4, #23]
   13088:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
   1308c:	f8a0 10ce 	strh.w	r1, [r0, #206]	; 0xce
				conn->llcp_conn_param.offset1 =	cpr->offset1;
   13090:	7ea6      	ldrb	r6, [r4, #26]
   13092:	7e61      	ldrb	r1, [r4, #25]
   13094:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
   13098:	f8a0 10d0 	strh.w	r1, [r0, #208]	; 0xd0
				conn->llcp_conn_param.offset2 =	cpr->offset2;
   1309c:	7f26      	ldrb	r6, [r4, #28]
   1309e:	7ee1      	ldrb	r1, [r4, #27]
   130a0:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
   130a4:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
				conn->llcp_conn_param.offset3 =	cpr->offset3;
   130a8:	7fa6      	ldrb	r6, [r4, #30]
   130aa:	7f61      	ldrb	r1, [r4, #29]
   130ac:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
   130b0:	f8a0 10d4 	strh.w	r1, [r0, #212]	; 0xd4
				conn->llcp_conn_param.offset4 =	cpr->offset4;
   130b4:	7fe1      	ldrb	r1, [r4, #31]
   130b6:	f894 6020 	ldrb.w	r6, [r4, #32]
   130ba:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
   130be:	f8a0 10d6 	strh.w	r1, [r0, #214]	; 0xd6
				conn->llcp_conn_param.offset5 =	cpr->offset5;
   130c2:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
   130c6:	f894 4022 	ldrb.w	r4, [r4, #34]	; 0x22
   130ca:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
   130ce:	f8a0 10d8 	strh.w	r1, [r0, #216]	; 0xd8
				if ((conn->llcp_conn_param.interval !=
   130d2:	f8d0 40c4 	ldr.w	r4, [r0, #196]	; 0xc4
   130d6:	6a41      	ldr	r1, [r0, #36]	; 0x24
   130d8:	428c      	cmp	r4, r1
   130da:	d10f      	bne.n	130fc <isr_rx_conn_pkt_ctrl+0x714>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   130dc:	8c84      	ldrh	r4, [r0, #36]	; 0x24
   130de:	f240 41e2 	movw	r1, #1250	; 0x4e2
   130e2:	4361      	muls	r1, r4
   130e4:	f242 7410 	movw	r4, #10000	; 0x2710
   130e8:	fb04 130e 	mla	r3, r4, lr, r1
   130ec:	3b01      	subs	r3, #1
   130ee:	fb93 f3f1 	sdiv	r3, r3, r1
				     conn->latency) ||
   130f2:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
   130f4:	b29b      	uxth	r3, r3
   130f6:	4299      	cmp	r1, r3
   130f8:	f000 8092 	beq.w	13220 <isr_rx_conn_pkt_ctrl+0x838>
					if (conn->pause_tx) {
   130fc:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
   13100:	071c      	lsls	r4, r3, #28
   13102:	f140 8087 	bpl.w	13214 <isr_rx_conn_pkt_ctrl+0x82c>
						conn->llcp_conn_param.state =
   13106:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
   1310a:	2102      	movs	r1, #2
				conn->llcp_conn_param.state =
   1310c:	f361 0302 	bfi	r3, r1, #0, #3
   13110:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.ack--;
   13114:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
   13118:	3b01      	subs	r3, #1
   1311a:	f880 30c1 	strb.w	r3, [r0, #193]	; 0xc1
			if (_radio.conn_upd == 0) {
   1311e:	f8d2 3790 	ldr.w	r3, [r2, #1936]	; 0x790
   13122:	2b00      	cmp	r3, #0
   13124:	f47f ad36 	bne.w	12b94 <isr_rx_conn_pkt_ctrl+0x1ac>
				_radio.conn_upd = conn;
   13128:	f8c2 0790 	str.w	r0, [r2, #1936]	; 0x790
   1312c:	e532      	b.n	12b94 <isr_rx_conn_pkt_ctrl+0x1ac>
		} else if ((_radio.conn_curr->llcp_conn_param.req ==
   1312e:	4299      	cmp	r1, r3
   13130:	d003      	beq.n	1313a <isr_rx_conn_pkt_ctrl+0x752>
			    _radio.conn_curr->llcp_conn_param.ack) ||
   13132:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
   13136:	0799      	lsls	r1, r3, #30
   13138:	d17b      	bne.n	13232 <isr_rx_conn_pkt_ctrl+0x84a>
			if ((cpr->interval_min < 6) ||
   1313a:	f8b4 800c 	ldrh.w	r8, [r4, #12]
   1313e:	4643      	mov	r3, r8
   13140:	2b05      	cmp	r3, #5
   13142:	d98c      	bls.n	1305e <isr_rx_conn_pkt_ctrl+0x676>
			    (cpr->interval_max > 3200) ||
   13144:	89e7      	ldrh	r7, [r4, #14]
			if ((cpr->interval_min < 6) ||
   13146:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
   1314a:	d888      	bhi.n	1305e <isr_rx_conn_pkt_ctrl+0x676>
			    (cpr->interval_max > 3200) ||
   1314c:	45b8      	cmp	r8, r7
   1314e:	d886      	bhi.n	1305e <isr_rx_conn_pkt_ctrl+0x676>
			    (cpr->latency > 499) ||
   13150:	f8b4 c010 	ldrh.w	ip, [r4, #16]
			    (cpr->interval_min > cpr->interval_max) ||
   13154:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
   13158:	d281      	bcs.n	1305e <isr_rx_conn_pkt_ctrl+0x676>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   1315a:	f8b4 e012 	ldrh.w	lr, [r4, #18]
			    (cpr->latency > 499) ||
   1315e:	f1ae 060a 	sub.w	r6, lr, #10
   13162:	b2b6      	uxth	r6, r6
   13164:	f640 4976 	movw	r9, #3190	; 0xc76
   13168:	454e      	cmp	r6, r9
   1316a:	f63f af78 	bhi.w	1305e <isr_rx_conn_pkt_ctrl+0x676>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
   1316e:	fb0c 7107 	mla	r1, ip, r7, r7
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   13172:	ebb1 0f8e 	cmp.w	r1, lr, lsl #2
   13176:	f6bf af72 	bge.w	1305e <isr_rx_conn_pkt_ctrl+0x676>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
   1317a:	7d21      	ldrb	r1, [r4, #20]
						    cpr->interval_max)) ||
   1317c:	428f      	cmp	r7, r1
   1317e:	f4ff af6e 	bcc.w	1305e <isr_rx_conn_pkt_ctrl+0x676>
			conn->llcp_conn_param.interval = cpr->interval_min;
   13182:	f8a0 80c4 	strh.w	r8, [r0, #196]	; 0xc4
			conn->llcp_conn_param.latency =	cpr->latency;
   13186:	f8a0 c0c6 	strh.w	ip, [r0, #198]	; 0xc6
			conn->llcp_conn_param.timeout =	cpr->timeout;
   1318a:	f8a0 e0c8 	strh.w	lr, [r0, #200]	; 0xc8
			conn->llcp_conn_param.preferred_periodicity =
   1318e:	f880 10ca 	strb.w	r1, [r0, #202]	; 0xca
				cpr->reference_conn_event_count;
   13192:	7da6      	ldrb	r6, [r4, #22]
   13194:	7d61      	ldrb	r1, [r4, #21]
   13196:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   1319a:	f8a0 10cc 	strh.w	r1, [r0, #204]	; 0xcc
			conn->llcp_conn_param.offset0 =	cpr->offset0;
   1319e:	7e26      	ldrb	r6, [r4, #24]
   131a0:	7de1      	ldrb	r1, [r4, #23]
   131a2:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
   131a6:	f8a0 10ce 	strh.w	r1, [r0, #206]	; 0xce
			conn->llcp_conn_param.offset1 =	cpr->offset1;
   131aa:	7ea6      	ldrb	r6, [r4, #26]
   131ac:	7e61      	ldrb	r1, [r4, #25]
   131ae:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
   131b2:	f8a0 10d0 	strh.w	r1, [r0, #208]	; 0xd0
			conn->llcp_conn_param.offset2 =	cpr->offset2;
   131b6:	7f26      	ldrb	r6, [r4, #28]
   131b8:	7ee1      	ldrb	r1, [r4, #27]
   131ba:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
   131be:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
			conn->llcp_conn_param.offset3 =	cpr->offset3;
   131c2:	7fa6      	ldrb	r6, [r4, #30]
   131c4:	7f61      	ldrb	r1, [r4, #29]
   131c6:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
   131ca:	f8a0 10d4 	strh.w	r1, [r0, #212]	; 0xd4
			conn->llcp_conn_param.offset4 =	cpr->offset4;
   131ce:	7fe1      	ldrb	r1, [r4, #31]
   131d0:	f894 6020 	ldrb.w	r6, [r4, #32]
   131d4:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
   131d8:	f8a0 10d6 	strh.w	r1, [r0, #214]	; 0xd6
			conn->llcp_conn_param.offset5 =	cpr->offset5;
   131dc:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
   131e0:	f894 4022 	ldrb.w	r4, [r4, #34]	; 0x22
   131e4:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
   131e8:	f8a0 10d8 	strh.w	r1, [r0, #216]	; 0xd8
			if ((conn->llcp_conn_param.interval !=
   131ec:	f8d0 40c4 	ldr.w	r4, [r0, #196]	; 0xc4
   131f0:	6a41      	ldr	r1, [r0, #36]	; 0x24
   131f2:	428c      	cmp	r4, r1
   131f4:	d10e      	bne.n	13214 <isr_rx_conn_pkt_ctrl+0x82c>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   131f6:	8c84      	ldrh	r4, [r0, #36]	; 0x24
   131f8:	f240 41e2 	movw	r1, #1250	; 0x4e2
   131fc:	4361      	muls	r1, r4
   131fe:	f242 7410 	movw	r4, #10000	; 0x2710
   13202:	fb04 130e 	mla	r3, r4, lr, r1
   13206:	3b01      	subs	r3, #1
   13208:	fb93 f3f1 	sdiv	r3, r3, r1
			    (conn->llcp_conn_param.latency != conn->latency) ||
   1320c:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
   1320e:	b29b      	uxth	r3, r3
   13210:	4299      	cmp	r1, r3
   13212:	d005      	beq.n	13220 <isr_rx_conn_pkt_ctrl+0x838>
				*rx_enqueue = 1;
   13214:	2301      	movs	r3, #1
   13216:	702b      	strb	r3, [r5, #0]
				conn->llcp_conn_param.state =
   13218:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
   1321c:	2103      	movs	r1, #3
   1321e:	e775      	b.n	1310c <isr_rx_conn_pkt_ctrl+0x724>
				conn->llcp_conn_param.status = 0;
   13220:	2300      	movs	r3, #0
   13222:	f880 30c3 	strb.w	r3, [r0, #195]	; 0xc3
				conn->llcp_conn_param.cmd = 0;
   13226:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
				conn->llcp_conn_param.state =
   1322a:	2101      	movs	r1, #1
   1322c:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
   13230:	e76c      	b.n	1310c <isr_rx_conn_pkt_ctrl+0x724>
			LL_ASSERT(0);
   13232:	4bc9      	ldr	r3, [pc, #804]	; (13558 <isr_rx_conn_pkt_ctrl+0xb70>)
   13234:	9301      	str	r3, [sp, #4]
   13236:	9300      	str	r3, [sp, #0]
   13238:	4ac8      	ldr	r2, [pc, #800]	; (1355c <isr_rx_conn_pkt_ctrl+0xb74>)
   1323a:	4bc9      	ldr	r3, [pc, #804]	; (13560 <isr_rx_conn_pkt_ctrl+0xb78>)
   1323c:	49c9      	ldr	r1, [pc, #804]	; (13564 <isr_rx_conn_pkt_ctrl+0xb7c>)
   1323e:	48ca      	ldr	r0, [pc, #808]	; (13568 <isr_rx_conn_pkt_ctrl+0xb80>)
   13240:	e514      	b.n	12c6c <isr_rx_conn_pkt_ctrl+0x284>
		if (_radio.conn_curr->role ||
   13242:	4bca      	ldr	r3, [pc, #808]	; (1356c <isr_rx_conn_pkt_ctrl+0xb84>)
   13244:	f8d3 571c 	ldr.w	r5, [r3, #1820]	; 0x71c
   13248:	f995 301d 	ldrsb.w	r3, [r5, #29]
   1324c:	2b00      	cmp	r3, #0
   1324e:	f2c0 84b9 	blt.w	13bc4 <isr_rx_conn_pkt_ctrl+0x11dc>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP,
   13252:	7a41      	ldrb	r1, [r0, #9]
   13254:	2010      	movs	r0, #16
   13256:	f7fb f96f 	bl	e538 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
   1325a:	2800      	cmp	r0, #0
   1325c:	f000 84b2 	beq.w	13bc4 <isr_rx_conn_pkt_ctrl+0x11dc>
		if (!_radio.conn_curr->role &&
   13260:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
   13264:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
   13268:	429a      	cmp	r2, r3
   1326a:	f43f ac93 	beq.w	12b94 <isr_rx_conn_pkt_ctrl+0x1ac>
		    (_radio.conn_curr->llcp_conn_param.state ==
   1326e:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
		     _radio.conn_curr->llcp_conn_param.ack) &&
   13272:	f003 0307 	and.w	r3, r3, #7
   13276:	2b04      	cmp	r3, #4
   13278:	f47f ac8c 	bne.w	12b94 <isr_rx_conn_pkt_ctrl+0x1ac>
			if ((cpr->interval_min < 6) ||
   1327c:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
   13280:	fa1f f28e 	uxth.w	r2, lr
   13284:	2a05      	cmp	r2, #5
   13286:	d91b      	bls.n	132c0 <isr_rx_conn_pkt_ctrl+0x8d8>
			    (cpr->interval_max > 3200) ||
   13288:	89e3      	ldrh	r3, [r4, #14]
			if ((cpr->interval_min < 6) ||
   1328a:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   1328e:	d817      	bhi.n	132c0 <isr_rx_conn_pkt_ctrl+0x8d8>
			    (cpr->interval_max > 3200) ||
   13290:	429a      	cmp	r2, r3
   13292:	d815      	bhi.n	132c0 <isr_rx_conn_pkt_ctrl+0x8d8>
			    (cpr->latency > 499) ||
   13294:	8a27      	ldrh	r7, [r4, #16]
   13296:	b2ba      	uxth	r2, r7
			    (cpr->interval_min > cpr->interval_max) ||
   13298:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
   1329c:	d210      	bcs.n	132c0 <isr_rx_conn_pkt_ctrl+0x8d8>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   1329e:	8a66      	ldrh	r6, [r4, #18]
   132a0:	b2b0      	uxth	r0, r6
			    (cpr->latency > 499) ||
   132a2:	f1a0 010a 	sub.w	r1, r0, #10
   132a6:	b289      	uxth	r1, r1
   132a8:	f640 4c76 	movw	ip, #3190	; 0xc76
   132ac:	4561      	cmp	r1, ip
   132ae:	d807      	bhi.n	132c0 <isr_rx_conn_pkt_ctrl+0x8d8>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
   132b0:	fb02 3203 	mla	r2, r2, r3, r3
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   132b4:	ebb2 0f80 	cmp.w	r2, r0, lsl #2
   132b8:	da02      	bge.n	132c0 <isr_rx_conn_pkt_ctrl+0x8d8>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
   132ba:	7d22      	ldrb	r2, [r4, #20]
						    cpr->interval_max)) ||
   132bc:	4293      	cmp	r3, r2
   132be:	d203      	bcs.n	132c8 <isr_rx_conn_pkt_ctrl+0x8e0>
				nack = reject_ext_ind_send(conn,
   132c0:	221e      	movs	r2, #30
   132c2:	2110      	movs	r1, #16
   132c4:	4628      	mov	r0, r5
   132c6:	e67b      	b.n	12fc0 <isr_rx_conn_pkt_ctrl+0x5d8>
			_radio.conn_curr->procedure_expire = 0;
   132c8:	2000      	movs	r0, #0
   132ca:	f8a5 0044 	strh.w	r0, [r5, #68]	; 0x44
			conn->llcp_conn_param.interval = cpr->interval_min;
   132ce:	f8a5 e0c4 	strh.w	lr, [r5, #196]	; 0xc4
			conn->llcp_conn_param.latency =	cpr->latency;
   132d2:	f8a5 70c6 	strh.w	r7, [r5, #198]	; 0xc6
			conn->llcp_conn_param.timeout =	cpr->timeout;
   132d6:	f8a5 60c8 	strh.w	r6, [r5, #200]	; 0xc8
			conn->llcp_conn_param.preferred_periodicity =
   132da:	f885 20ca 	strb.w	r2, [r5, #202]	; 0xca
				cpr->reference_conn_event_count;
   132de:	7da2      	ldrb	r2, [r4, #22]
   132e0:	7d63      	ldrb	r3, [r4, #21]
   132e2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   132e6:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
			conn->llcp_conn_param.offset0 =	cpr->offset0;
   132ea:	7e22      	ldrb	r2, [r4, #24]
   132ec:	7de3      	ldrb	r3, [r4, #23]
   132ee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   132f2:	f8a5 30ce 	strh.w	r3, [r5, #206]	; 0xce
			conn->llcp_conn_param.offset1 =	cpr->offset1;
   132f6:	7ea2      	ldrb	r2, [r4, #26]
   132f8:	7e63      	ldrb	r3, [r4, #25]
   132fa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   132fe:	f8a5 30d0 	strh.w	r3, [r5, #208]	; 0xd0
			conn->llcp_conn_param.offset2 =	cpr->offset2;
   13302:	7f22      	ldrb	r2, [r4, #28]
   13304:	7ee3      	ldrb	r3, [r4, #27]
   13306:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1330a:	f8a5 30d2 	strh.w	r3, [r5, #210]	; 0xd2
			conn->llcp_conn_param.offset3 =	cpr->offset3;
   1330e:	7fa2      	ldrb	r2, [r4, #30]
   13310:	7f63      	ldrb	r3, [r4, #29]
   13312:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   13316:	f8a5 30d4 	strh.w	r3, [r5, #212]	; 0xd4
			conn->llcp_conn_param.offset4 =	cpr->offset4;
   1331a:	f894 2020 	ldrb.w	r2, [r4, #32]
   1331e:	7fe3      	ldrb	r3, [r4, #31]
   13320:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   13324:	f8a5 30d6 	strh.w	r3, [r5, #214]	; 0xd6
			conn->llcp_conn_param.offset5 =	cpr->offset5;
   13328:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
   1332c:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   13330:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   13334:	f8a5 30d8 	strh.w	r3, [r5, #216]	; 0xd8
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   13338:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
   1333c:	2201      	movs	r2, #1
   1333e:	f362 0302 	bfi	r3, r2, #0, #3
   13342:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
   13346:	e415      	b.n	12b74 <isr_rx_conn_pkt_ctrl+0x18c>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND,
   13348:	7a41      	ldrb	r1, [r0, #9]
   1334a:	2011      	movs	r0, #17
   1334c:	f7fb f8f4 	bl	e538 <pdu_len_cmp>
   13350:	2800      	cmp	r0, #0
   13352:	f000 8437 	beq.w	13bc4 <isr_rx_conn_pkt_ctrl+0x11dc>
	} else if (_radio.conn_curr->llcp_phy.ack !=
   13356:	4a85      	ldr	r2, [pc, #532]	; (1356c <isr_rx_conn_pkt_ctrl+0xb84>)
   13358:	f8d2 371c 	ldr.w	r3, [r2, #1820]	; 0x71c
   1335c:	f893 10f5 	ldrb.w	r1, [r3, #245]	; 0xf5
		   _radio.conn_curr->llcp_phy.req) {
   13360:	f893 00f4 	ldrb.w	r0, [r3, #244]	; 0xf4
	} else if (_radio.conn_curr->llcp_phy.ack !=
   13364:	4281      	cmp	r1, r0
   13366:	7b21      	ldrb	r1, [r4, #12]
   13368:	d027      	beq.n	133ba <isr_rx_conn_pkt_ctrl+0x9d2>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_PHY_REQ) {
   1336a:	2916      	cmp	r1, #22
   1336c:	f47f ac12 	bne.w	12b94 <isr_rx_conn_pkt_ctrl+0x1ac>
		if (rej_ext_ind->error_code != 0x23) {
   13370:	7b61      	ldrb	r1, [r4, #13]
   13372:	2923      	cmp	r1, #35	; 0x23
   13374:	d00e      	beq.n	13394 <isr_rx_conn_pkt_ctrl+0x9ac>
				_radio.conn_curr->phy_tx;
   13376:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
			_radio.conn_curr->llcp_phy.ack =
   1337a:	f883 00f5 	strb.w	r0, [r3, #245]	; 0xf5
			_radio.conn_curr->phy_tx_time =
   1337e:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
   13382:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   13386:	f362 0002 	bfi	r0, r2, #0, #3
			_radio.conn_curr->procedure_expire = 0;
   1338a:	2200      	movs	r2, #0
			_radio.conn_curr->phy_tx_time =
   1338c:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
			_radio.conn_curr->procedure_expire = 0;
   13390:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		if (!_radio.conn_curr->llcp_phy.cmd) {
   13394:	f893 20f7 	ldrb.w	r2, [r3, #247]	; 0xf7
   13398:	0792      	lsls	r2, r2, #30
   1339a:	f57f abfb 	bpl.w	12b94 <isr_rx_conn_pkt_ctrl+0x1ac>
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   1339e:	220c      	movs	r2, #12
		p->status = rej_ext_ind->error_code;
   133a0:	72e1      	strb	r1, [r4, #11]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   133a2:	7122      	strb	r2, [r4, #4]
		p->tx = _radio.conn_curr->phy_tx;
   133a4:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   133a8:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   133ac:	7322      	strb	r2, [r4, #12]
		p->rx = _radio.conn_curr->phy_rx;
   133ae:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   133b2:	f3c3 0302 	ubfx	r3, r3, #0, #3
   133b6:	7363      	strb	r3, [r4, #13]
   133b8:	e419      	b.n	12bee <isr_rx_conn_pkt_ctrl+0x206>
		   _radio.conn_curr->llcp_conn_param.req) {
   133ba:	f893 70c0 	ldrb.w	r7, [r3, #192]	; 0xc0
	} else if (_radio.conn_curr->llcp_conn_param.ack !=
   133be:	f893 00c1 	ldrb.w	r0, [r3, #193]	; 0xc1
   133c2:	42b8      	cmp	r0, r7
   133c4:	d048      	beq.n	13458 <isr_rx_conn_pkt_ctrl+0xa70>
	if (rej_ext_ind->reject_opcode != PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ) {
   133c6:	290f      	cmp	r1, #15
   133c8:	f47f abe4 	bne.w	12b94 <isr_rx_conn_pkt_ctrl+0x1ac>
   133cc:	f993 001d 	ldrsb.w	r0, [r3, #29]
   133d0:	7b61      	ldrb	r1, [r4, #13]
	if (!conn->role && (rej_ext_ind->error_code == 0x1a)) {
   133d2:	2800      	cmp	r0, #0
   133d4:	db0e      	blt.n	133f4 <isr_rx_conn_pkt_ctrl+0xa0c>
   133d6:	291a      	cmp	r1, #26
   133d8:	d10c      	bne.n	133f4 <isr_rx_conn_pkt_ctrl+0xa0c>
		LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   133da:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
   133de:	f893 4075 	ldrb.w	r4, [r3, #117]	; 0x75
   133e2:	4294      	cmp	r4, r2
   133e4:	f000 80c8 	beq.w	13578 <isr_rx_conn_pkt_ctrl+0xb90>
   133e8:	4b5b      	ldr	r3, [pc, #364]	; (13558 <isr_rx_conn_pkt_ctrl+0xb70>)
   133ea:	9301      	str	r3, [sp, #4]
   133ec:	9300      	str	r3, [sp, #0]
   133ee:	4b60      	ldr	r3, [pc, #384]	; (13570 <isr_rx_conn_pkt_ctrl+0xb88>)
   133f0:	f7ff bb40 	b.w	12a74 <isr_rx_conn_pkt_ctrl+0x8c>
	else if (rej_ext_ind->error_code != 0x23) {
   133f4:	2923      	cmp	r1, #35	; 0x23
   133f6:	d018      	beq.n	1342a <isr_rx_conn_pkt_ctrl+0xa42>
		LL_ASSERT(_radio.conn_upd == conn);
   133f8:	f8d2 6790 	ldr.w	r6, [r2, #1936]	; 0x790
   133fc:	42b3      	cmp	r3, r6
   133fe:	d007      	beq.n	13410 <isr_rx_conn_pkt_ctrl+0xa28>
   13400:	4b55      	ldr	r3, [pc, #340]	; (13558 <isr_rx_conn_pkt_ctrl+0xb70>)
   13402:	9301      	str	r3, [sp, #4]
   13404:	9300      	str	r3, [sp, #0]
   13406:	4b5a      	ldr	r3, [pc, #360]	; (13570 <isr_rx_conn_pkt_ctrl+0xb88>)
			LL_ASSERT(_radio.conn_upd == conn);
   13408:	4a54      	ldr	r2, [pc, #336]	; (1355c <isr_rx_conn_pkt_ctrl+0xb74>)
   1340a:	4956      	ldr	r1, [pc, #344]	; (13564 <isr_rx_conn_pkt_ctrl+0xb7c>)
   1340c:	4859      	ldr	r0, [pc, #356]	; (13574 <isr_rx_conn_pkt_ctrl+0xb8c>)
   1340e:	e42d      	b.n	12c6c <isr_rx_conn_pkt_ctrl+0x284>
		_radio.conn_upd = NULL;
   13410:	2600      	movs	r6, #0
		if (conn->role) {
   13412:	42b0      	cmp	r0, r6
		_radio.conn_upd = NULL;
   13414:	f8c2 6790 	str.w	r6, [r2, #1936]	; 0x790
			conn->slave.ticks_to_offset =
   13418:	bfb8      	it	lt
   1341a:	f8d3 20e4 	ldrlt.w	r2, [r3, #228]	; 0xe4
		conn->llcp_conn_param.ack =
   1341e:	f883 70c1 	strb.w	r7, [r3, #193]	; 0xc1
		conn->procedure_expire = 0;
   13422:	f8a3 6044 	strh.w	r6, [r3, #68]	; 0x44
			conn->slave.ticks_to_offset =
   13426:	bfb8      	it	lt
   13428:	671a      	strlt	r2, [r3, #112]	; 0x70
	if (!conn->llcp_conn_param.cmd) {
   1342a:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
   1342e:	0717      	lsls	r7, r2, #28
   13430:	f57f abb0 	bpl.w	12b94 <isr_rx_conn_pkt_ctrl+0x1ac>
	cp->status = rej_ext_ind->error_code;
   13434:	72e1      	strb	r1, [r4, #11]
	node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   13436:	2208      	movs	r2, #8
	cp->latency = conn->latency;
   13438:	8cd9      	ldrh	r1, [r3, #38]	; 0x26
	node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   1343a:	7122      	strb	r2, [r4, #4]
	cp->interval = conn->conn_interval;
   1343c:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
	cp->timeout = conn->supervision_reload *
   1343e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
	cp->interval = conn->conn_interval;
   13440:	81a2      	strh	r2, [r4, #12]
	cp->timeout = conn->supervision_reload *
   13442:	435a      	muls	r2, r3
		      conn->conn_interval * 125 / 1000;
   13444:	237d      	movs	r3, #125	; 0x7d
   13446:	4353      	muls	r3, r2
	cp->latency = conn->latency;
   13448:	81e1      	strh	r1, [r4, #14]
	cp->timeout = conn->supervision_reload *
   1344a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1344e:	fb93 f3f2 	sdiv	r3, r3, r2
   13452:	8223      	strh	r3, [r4, #16]
   13454:	f7ff bbcb 	b.w	12bee <isr_rx_conn_pkt_ctrl+0x206>
		   _radio.conn_curr->llcp_length.req) {
   13458:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
	} else if (_radio.conn_curr->llcp_length.ack !=
   1345c:	f893 00e9 	ldrb.w	r0, [r3, #233]	; 0xe9
   13460:	4290      	cmp	r0, r2
   13462:	d01a      	beq.n	1349a <isr_rx_conn_pkt_ctrl+0xab2>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
   13464:	2914      	cmp	r1, #20
   13466:	f47f ab95 	bne.w	12b94 <isr_rx_conn_pkt_ctrl+0x1ac>
		conn->llcp_length.ack = conn->llcp_length.req;
   1346a:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
		conn->pause_tx = 0;
   1346e:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
		conn->procedure_expire = 0;
   13472:	2000      	movs	r0, #0
		conn->pause_tx = 0;
   13474:	f360 02c3 	bfi	r2, r0, #3, #1
   13478:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		pdu_data_rx->len = offsetof(struct pdu_data_llctrl,
   1347c:	2209      	movs	r2, #9
		conn->procedure_expire = 0;
   1347e:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
		pdu_data_rx->len = offsetof(struct pdu_data_llctrl,
   13482:	7262      	strb	r2, [r4, #9]
		pdu_data_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   13484:	2215      	movs	r2, #21
   13486:	72e2      	strb	r2, [r4, #11]
		lr->max_rx_octets = conn->max_rx_octets;
   13488:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
   1348a:	81a2      	strh	r2, [r4, #12]
		lr->max_tx_octets = conn->max_tx_octets;
   1348c:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
   1348e:	8222      	strh	r2, [r4, #16]
		lr->max_rx_time = conn->max_rx_time;
   13490:	8eda      	ldrh	r2, [r3, #54]	; 0x36
		lr->max_tx_time = conn->max_tx_time;
   13492:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
		lr->max_rx_time = conn->max_rx_time;
   13494:	81e2      	strh	r2, [r4, #14]
		lr->max_tx_time = conn->max_tx_time;
   13496:	8263      	strh	r3, [r4, #18]
   13498:	e57d      	b.n	12f96 <isr_rx_conn_pkt_ctrl+0x5ae>
		switch (rej_ext_ind->reject_opcode) {
   1349a:	2903      	cmp	r1, #3
   1349c:	f47f ab7a 	bne.w	12b94 <isr_rx_conn_pkt_ctrl+0x1ac>
			_radio.conn_curr->pause_rx = 0;
   134a0:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
   134a4:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
   134a8:	f36f 02c3 	bfc	r2, #3, #1
			_radio.conn_curr->procedure_expire = 0;
   134ac:	2000      	movs	r0, #0
			_radio.conn_curr->pause_tx = 0;
   134ae:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->procedure_expire = 0;
   134b2:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
			pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   134b6:	230d      	movs	r3, #13
   134b8:	72e3      	strb	r3, [r4, #11]
			pdu_rx->llctrl.reject_ind.error_code =
   134ba:	7b63      	ldrb	r3, [r4, #13]
   134bc:	7323      	strb	r3, [r4, #12]
   134be:	e56a      	b.n	12f96 <isr_rx_conn_pkt_ctrl+0x5ae>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_REQ,
   134c0:	7a41      	ldrb	r1, [r0, #9]
   134c2:	2012      	movs	r0, #18
   134c4:	f7fb f838 	bl	e538 <pdu_len_cmp>
   134c8:	2800      	cmp	r0, #0
   134ca:	f000 837b 	beq.w	13bc4 <isr_rx_conn_pkt_ctrl+0x11dc>
		nack = ping_resp_send(_radio.conn_curr);
   134ce:	4827      	ldr	r0, [pc, #156]	; (1356c <isr_rx_conn_pkt_ctrl+0xb84>)
   134d0:	f8d0 471c 	ldr.w	r4, [r0, #1820]	; 0x71c
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   134d4:	f200 7064 	addw	r0, r0, #1892	; 0x764
   134d8:	f7f8 f985 	bl	b7e6 <mem_acquire>
	if (!node_tx) {
   134dc:	4601      	mov	r1, r0
   134de:	2800      	cmp	r0, #0
   134e0:	f43f ac95 	beq.w	12e0e <isr_rx_conn_pkt_ctrl+0x426>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   134e4:	7903      	ldrb	r3, [r0, #4]
   134e6:	f043 0303 	orr.w	r3, r3, #3
   134ea:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
   134ec:	2301      	movs	r3, #1
   134ee:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   134f0:	2313      	movs	r3, #19
   134f2:	e4c7      	b.n	12e84 <isr_rx_conn_pkt_ctrl+0x49c>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_RSP,
   134f4:	7a41      	ldrb	r1, [r0, #9]
   134f6:	2013      	movs	r0, #19
   134f8:	f7fb f81e 	bl	e538 <pdu_len_cmp>
   134fc:	2800      	cmp	r0, #0
   134fe:	f000 8361 	beq.w	13bc4 <isr_rx_conn_pkt_ctrl+0x11dc>
		_radio.conn_curr->procedure_expire = 0;
   13502:	4b1a      	ldr	r3, [pc, #104]	; (1356c <isr_rx_conn_pkt_ctrl+0xb84>)
   13504:	f8d3 371c 	ldr.w	r3, [r3, #1820]	; 0x71c
   13508:	e468      	b.n	12ddc <isr_rx_conn_pkt_ctrl+0x3f4>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP,
   1350a:	7a41      	ldrb	r1, [r0, #9]
   1350c:	2007      	movs	r0, #7
   1350e:	f7fb f813 	bl	e538 <pdu_len_cmp>
   13512:	2800      	cmp	r0, #0
   13514:	f000 8356 	beq.w	13bc4 <isr_rx_conn_pkt_ctrl+0x11dc>
		} else if (_radio.conn_curr->llcp_conn_param.ack !=
   13518:	4a14      	ldr	r2, [pc, #80]	; (1356c <isr_rx_conn_pkt_ctrl+0xb84>)
   1351a:	f8d2 371c 	ldr.w	r3, [r2, #1820]	; 0x71c
   1351e:	f893 10c1 	ldrb.w	r1, [r3, #193]	; 0xc1
			   _radio.conn_curr->llcp_conn_param.req) {
   13522:	f893 60c0 	ldrb.w	r6, [r3, #192]	; 0xc0
		} else if (_radio.conn_curr->llcp_conn_param.ack !=
   13526:	42b1      	cmp	r1, r6
   13528:	4611      	mov	r1, r2
   1352a:	d077      	beq.n	1361c <isr_rx_conn_pkt_ctrl+0xc34>
			conn->llcp_conn_param.disabled = 1;
   1352c:	f893 00c2 	ldrb.w	r0, [r3, #194]	; 0xc2
   13530:	f040 0010 	orr.w	r0, r0, #16
   13534:	f883 00c2 	strb.w	r0, [r3, #194]	; 0xc2
			if (!conn->role) {
   13538:	f993 001d 	ldrsb.w	r0, [r3, #29]
   1353c:	2800      	cmp	r0, #0
   1353e:	db47      	blt.n	135d0 <isr_rx_conn_pkt_ctrl+0xbe8>
				LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   13540:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
   13544:	f893 4075 	ldrb.w	r4, [r3, #117]	; 0x75
   13548:	4294      	cmp	r4, r2
   1354a:	d015      	beq.n	13578 <isr_rx_conn_pkt_ctrl+0xb90>
   1354c:	4b02      	ldr	r3, [pc, #8]	; (13558 <isr_rx_conn_pkt_ctrl+0xb70>)
   1354e:	9301      	str	r3, [sp, #4]
   13550:	9300      	str	r3, [sp, #0]
   13552:	4b03      	ldr	r3, [pc, #12]	; (13560 <isr_rx_conn_pkt_ctrl+0xb78>)
   13554:	f7ff ba8e 	b.w	12a74 <isr_rx_conn_pkt_ctrl+0x8c>
   13558:	00023dbe 	.word	0x00023dbe
   1355c:	00022d86 	.word	0x00022d86
   13560:	00025a7c 	.word	0x00025a7c
   13564:	000272e8 	.word	0x000272e8
   13568:	00023fb5 	.word	0x00023fb5
   1356c:	20000bf0 	.word	0x20000bf0
   13570:	00025a41 	.word	0x00025a41
   13574:	00026415 	.word	0x00026415
				conn->llcp_conn_param.state =
   13578:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
   1357c:	2105      	movs	r1, #5
   1357e:	f361 0202 	bfi	r2, r1, #0, #3
				conn->llcp.conn_upd.interval =
   13582:	f8b3 10c4 	ldrh.w	r1, [r3, #196]	; 0xc4
   13586:	f8a3 107a 	strh.w	r1, [r3, #122]	; 0x7a
				conn->llcp.conn_upd.latency =
   1358a:	f8b3 10c6 	ldrh.w	r1, [r3, #198]	; 0xc6
   1358e:	f8a3 107c 	strh.w	r1, [r3, #124]	; 0x7c
				conn->llcp.conn_upd.timeout =
   13592:	f8b3 10c8 	ldrh.w	r1, [r3, #200]	; 0xc8
   13596:	f8a3 107e 	strh.w	r1, [r3, #126]	; 0x7e
				conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   1359a:	f893 1078 	ldrb.w	r1, [r3, #120]	; 0x78
				conn->llcp_conn_param.state =
   1359e:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
				conn->llcp.conn_upd.win_size = 1;
   135a2:	2501      	movs	r5, #1
					!conn->llcp_conn_param.cmd;
   135a4:	f082 0208 	eor.w	r2, r2, #8
				conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   135a8:	f365 0101 	bfi	r1, r5, #0, #2
					!conn->llcp_conn_param.cmd;
   135ac:	f3c2 02c0 	ubfx	r2, r2, #3, #1
				conn->llcp.conn_upd.win_offset_us = 0;
   135b0:	2000      	movs	r0, #0
				conn->llcp.conn_upd.is_internal =
   135b2:	f362 0182 	bfi	r1, r2, #2, #1
				conn->llcp_ack--;
   135b6:	3c01      	subs	r4, #1
				conn->llcp.conn_upd.win_size = 1;
   135b8:	f883 5088 	strb.w	r5, [r3, #136]	; 0x88
				conn->llcp.conn_upd.win_offset_us = 0;
   135bc:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
				conn->llcp.conn_upd.is_internal =
   135c0:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
				conn->llcp_type = LLCP_CONN_UPD;
   135c4:	f883 5076 	strb.w	r5, [r3, #118]	; 0x76
				conn->llcp_ack--;
   135c8:	f883 4075 	strb.w	r4, [r3, #117]	; 0x75
				break;
   135cc:	f7ff bad2 	b.w	12b74 <isr_rx_conn_pkt_ctrl+0x18c>
			LL_ASSERT(_radio.conn_upd == conn);
   135d0:	f8d2 2790 	ldr.w	r2, [r2, #1936]	; 0x790
   135d4:	4293      	cmp	r3, r2
   135d6:	d004      	beq.n	135e2 <isr_rx_conn_pkt_ctrl+0xbfa>
   135d8:	4bcb      	ldr	r3, [pc, #812]	; (13908 <isr_rx_conn_pkt_ctrl+0xf20>)
   135da:	9301      	str	r3, [sp, #4]
   135dc:	9300      	str	r3, [sp, #0]
   135de:	4bcb      	ldr	r3, [pc, #812]	; (1390c <isr_rx_conn_pkt_ctrl+0xf24>)
   135e0:	e712      	b.n	13408 <isr_rx_conn_pkt_ctrl+0xa20>
			_radio.conn_upd = NULL;
   135e2:	2200      	movs	r2, #0
   135e4:	f8c1 2790 	str.w	r2, [r1, #1936]	; 0x790
			if (!conn->llcp_conn_param.cmd) {
   135e8:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   135ec:	f883 60c1 	strb.w	r6, [r3, #193]	; 0xc1
			if (!conn->llcp_conn_param.cmd) {
   135f0:	0716      	lsls	r6, r2, #28
   135f2:	f57f aacf 	bpl.w	12b94 <isr_rx_conn_pkt_ctrl+0x1ac>
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   135f6:	2208      	movs	r2, #8
   135f8:	7122      	strb	r2, [r4, #4]
			cp->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   135fa:	221a      	movs	r2, #26
   135fc:	72e2      	strb	r2, [r4, #11]
			cp->interval = conn->conn_interval;
   135fe:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
			cp->latency = conn->latency;
   13600:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
			cp->timeout = conn->supervision_reload *
   13602:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
			cp->interval = conn->conn_interval;
   13604:	81a2      	strh	r2, [r4, #12]
			cp->timeout = conn->supervision_reload *
   13606:	435a      	muls	r2, r3
				      conn->conn_interval * 125 / 1000;
   13608:	237d      	movs	r3, #125	; 0x7d
   1360a:	4353      	muls	r3, r2
			cp->latency = conn->latency;
   1360c:	81e0      	strh	r0, [r4, #14]
			cp->timeout = conn->supervision_reload *
   1360e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   13612:	fb93 f3f2 	sdiv	r3, r3, r2
   13616:	8223      	strh	r3, [r4, #16]
   13618:	f7ff bb73 	b.w	12d02 <isr_rx_conn_pkt_ctrl+0x31a>
		} else if (_radio.conn_curr->llcp_length.req !=
   1361c:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
   13620:	f893 00e9 	ldrb.w	r0, [r3, #233]	; 0xe9
   13624:	4290      	cmp	r0, r2
   13626:	d009      	beq.n	1363c <isr_rx_conn_pkt_ctrl+0xc54>
			_radio.conn_curr->llcp_length.ack =
   13628:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
			_radio.conn_curr->pause_tx = 0;
   1362c:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   13630:	f36f 02c3 	bfc	r2, #3, #1
   13634:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
   13638:	f7ff bb63 	b.w	12d02 <isr_rx_conn_pkt_ctrl+0x31a>
		} else if (_radio.conn_curr->llcp_phy.req !=
   1363c:	f893 20f4 	ldrb.w	r2, [r3, #244]	; 0xf4
   13640:	f893 00f5 	ldrb.w	r0, [r3, #245]	; 0xf5
   13644:	4290      	cmp	r0, r2
   13646:	d01b      	beq.n	13680 <isr_rx_conn_pkt_ctrl+0xc98>
			_radio.conn_curr->llcp_phy.ack =
   13648:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
				_radio.conn_curr->phy_tx;
   1364c:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
			_radio.conn_curr->phy_tx_time =
   13650:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
				_radio.conn_curr->phy_tx;
   13654:	f3c2 02c2 	ubfx	r2, r2, #3, #3
			_radio.conn_curr->phy_tx_time =
   13658:	f362 0002 	bfi	r0, r2, #0, #3
   1365c:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
			if (_radio.conn_curr->llcp_phy.cmd) {
   13660:	f893 00f7 	ldrb.w	r0, [r3, #247]	; 0xf7
   13664:	0780      	lsls	r0, r0, #30
   13666:	d50f      	bpl.n	13688 <isr_rx_conn_pkt_ctrl+0xca0>
				node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   13668:	200c      	movs	r0, #12
   1366a:	7120      	strb	r0, [r4, #4]
				p->status = 0;
   1366c:	2000      	movs	r0, #0
   1366e:	72e0      	strb	r0, [r4, #11]
				p->tx = _radio.conn_curr->phy_tx;
   13670:	7322      	strb	r2, [r4, #12]
				p->rx = _radio.conn_curr->phy_rx;
   13672:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   13676:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1367a:	7363      	strb	r3, [r4, #13]
   1367c:	f7ff bb41 	b.w	12d02 <isr_rx_conn_pkt_ctrl+0x31a>
			switch (llctrl->unknown_rsp.type) {
   13680:	7b23      	ldrb	r3, [r4, #12]
   13682:	2b12      	cmp	r3, #18
   13684:	f47f ab3d 	bne.w	12d02 <isr_rx_conn_pkt_ctrl+0x31a>
		_radio.conn_curr->procedure_expire = 0;
   13688:	f8d1 371c 	ldr.w	r3, [r1, #1820]	; 0x71c
   1368c:	f7ff bba6 	b.w	12ddc <isr_rx_conn_pkt_ctrl+0x3f4>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_LENGTH_REQ,
   13690:	7a41      	ldrb	r1, [r0, #9]
   13692:	2014      	movs	r0, #20
   13694:	f7fa ff50 	bl	e538 <pdu_len_cmp>
   13698:	2800      	cmp	r0, #0
   1369a:	f000 8293 	beq.w	13bc4 <isr_rx_conn_pkt_ctrl+0x11dc>
	if (pdu_data_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
   1369e:	2f14      	cmp	r7, #20
   136a0:	d127      	bne.n	136f2 <isr_rx_conn_pkt_ctrl+0xd0a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   136a2:	489b      	ldr	r0, [pc, #620]	; (13910 <isr_rx_conn_pkt_ctrl+0xf28>)
   136a4:	f7f8 f89f 	bl	b7e6 <mem_acquire>
		if (!node_tx) {
   136a8:	4606      	mov	r6, r0
   136aa:	2800      	cmp	r0, #0
   136ac:	f43f abaf 	beq.w	12e0e <isr_rx_conn_pkt_ctrl+0x426>
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
   136b0:	4f98      	ldr	r7, [pc, #608]	; (13914 <isr_rx_conn_pkt_ctrl+0xf2c>)
   136b2:	f8d7 371c 	ldr.w	r3, [r7, #1820]	; 0x71c
	if (/* Local idle, and Peer request then complete the Peer procedure
   136b6:	f893 80e9 	ldrb.w	r8, [r3, #233]	; 0xe9
	    ((_radio.conn_curr->llcp_length.req ==
   136ba:	f893 c0e8 	ldrb.w	ip, [r3, #232]	; 0xe8
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
   136be:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
   136c0:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
	eff_rx_time = _radio.conn_curr->max_rx_time;
   136c2:	8ed8      	ldrh	r0, [r3, #54]	; 0x36
	eff_tx_time = _radio.conn_curr->max_tx_time;
   136c4:	f8b3 e034 	ldrh.w	lr, [r3, #52]	; 0x34
	if (/* Local idle, and Peer request then complete the Peer procedure
   136c8:	45e0      	cmp	r8, ip
   136ca:	46ba      	mov	sl, r7
   136cc:	f894 800b 	ldrb.w	r8, [r4, #11]
   136d0:	d111      	bne.n	136f6 <isr_rx_conn_pkt_ctrl+0xd0e>
	      _radio.conn_curr->llcp_length.ack) &&
   136d2:	f1b8 0f14 	cmp.w	r8, #20
   136d6:	d01a      	beq.n	1370e <isr_rx_conn_pkt_ctrl+0xd26>
		LL_ASSERT(pdu_data_rx->llctrl.opcode ==
   136d8:	f1b8 0f15 	cmp.w	r8, #21
   136dc:	f000 8296 	beq.w	13c0c <isr_rx_conn_pkt_ctrl+0x1224>
   136e0:	4b89      	ldr	r3, [pc, #548]	; (13908 <isr_rx_conn_pkt_ctrl+0xf20>)
   136e2:	9301      	str	r3, [sp, #4]
   136e4:	9300      	str	r3, [sp, #0]
   136e6:	4a8c      	ldr	r2, [pc, #560]	; (13918 <isr_rx_conn_pkt_ctrl+0xf30>)
   136e8:	4b8c      	ldr	r3, [pc, #560]	; (1391c <isr_rx_conn_pkt_ctrl+0xf34>)
   136ea:	498d      	ldr	r1, [pc, #564]	; (13920 <isr_rx_conn_pkt_ctrl+0xf38>)
   136ec:	488d      	ldr	r0, [pc, #564]	; (13924 <isr_rx_conn_pkt_ctrl+0xf3c>)
   136ee:	f7ff babd 	b.w	12c6c <isr_rx_conn_pkt_ctrl+0x284>
	struct radio_pdu_node_tx *node_tx = NULL;
   136f2:	2600      	movs	r6, #0
   136f4:	e7dc      	b.n	136b0 <isr_rx_conn_pkt_ctrl+0xcc8>
		 LLCP_LENGTH_STATE_REQ) ||
   136f6:	f893 70ea 	ldrb.w	r7, [r3, #234]	; 0xea
   136fa:	f007 0703 	and.w	r7, r7, #3
	      _radio.conn_curr->llcp_length.ack) &&
   136fe:	2f01      	cmp	r7, #1
   13700:	d9e7      	bls.n	136d2 <isr_rx_conn_pkt_ctrl+0xcea>
		PDU_DATA_LLCTRL_TYPE_LENGTH_REQ)) ||
   13702:	2f02      	cmp	r7, #2
   13704:	d1e8      	bne.n	136d8 <isr_rx_conn_pkt_ctrl+0xcf0>
		LLCP_LENGTH_STATE_RSP_WAIT) &&
   13706:	f1a8 0714 	sub.w	r7, r8, #20
   1370a:	2f01      	cmp	r7, #1
   1370c:	d8e4      	bhi.n	136d8 <isr_rx_conn_pkt_ctrl+0xcf0>
		if (lr->max_rx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
   1370e:	89a7      	ldrh	r7, [r4, #12]
   13710:	2f1a      	cmp	r7, #26
   13712:	d936      	bls.n	13782 <isr_rx_conn_pkt_ctrl+0xd9a>
			eff_tx_octets = min(lr->max_rx_octets,
   13714:	f8b3 802c 	ldrh.w	r8, [r3, #44]	; 0x2c
   13718:	4547      	cmp	r7, r8
   1371a:	bf28      	it	cs
   1371c:	4647      	movcs	r7, r8
		if (lr->max_tx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
   1371e:	f8b4 8010 	ldrh.w	r8, [r4, #16]
			eff_rx_octets = min(lr->max_tx_octets,
   13722:	f1b8 0f1b 	cmp.w	r8, #27
		if (lr->max_rx_time >=
   13726:	f8b4 800e 	ldrh.w	r8, [r4, #14]
			eff_rx_octets = min(lr->max_tx_octets,
   1372a:	bf34      	ite	cc
   1372c:	4693      	movcc	fp, r2
   1372e:	f04f 0b1b 	movcs.w	fp, #27
		if (lr->max_rx_time >=
   13732:	f5b8 7fa4 	cmp.w	r8, #328	; 0x148
   13736:	d326      	bcc.n	13786 <isr_rx_conn_pkt_ctrl+0xd9e>
			eff_tx_time = min(lr->max_rx_time,
   13738:	f8b3 9032 	ldrh.w	r9, [r3, #50]	; 0x32
   1373c:	45c8      	cmp	r8, r9
   1373e:	bf28      	it	cs
   13740:	46c8      	movcs	r8, r9
		if (lr->max_tx_time >=
   13742:	f8b4 9012 	ldrh.w	r9, [r4, #18]
   13746:	f5b9 7fa4 	cmp.w	r9, #328	; 0x148
   1374a:	d31e      	bcc.n	1378a <isr_rx_conn_pkt_ctrl+0xda2>
			eff_rx_time = min(lr->max_tx_time,
   1374c:	f5b9 6f29 	cmp.w	r9, #2704	; 0xa90
   13750:	bf28      	it	cs
   13752:	f44f 6929 	movcs.w	r9, #2704	; 0xa90
		if (eff_rx_octets != _radio.conn_curr->max_rx_octets) {
   13756:	455a      	cmp	r2, fp
   13758:	d052      	beq.n	13800 <isr_rx_conn_pkt_ctrl+0xe18>
			free_count_rx = packet_rx_acquired_count_get() +
   1375a:	f7fa ff35 	bl	e5c8 <packet_rx_acquired_count_get>
   1375e:	4604      	mov	r4, r0
				mem_free_count_get(_radio.pkt_rx_data_free);
   13760:	f8da 0738 	ldr.w	r0, [sl, #1848]	; 0x738
   13764:	f7f8 f86e 	bl	b844 <mem_free_count_get>
			free_count_rx = packet_rx_acquired_count_get() +
   13768:	4420      	add	r0, r4
   1376a:	b280      	uxth	r0, r0
			LL_ASSERT(free_count_rx <= 0xFF);
   1376c:	28ff      	cmp	r0, #255	; 0xff
   1376e:	d90e      	bls.n	1378e <isr_rx_conn_pkt_ctrl+0xda6>
   13770:	4b65      	ldr	r3, [pc, #404]	; (13908 <isr_rx_conn_pkt_ctrl+0xf20>)
   13772:	9301      	str	r3, [sp, #4]
   13774:	9300      	str	r3, [sp, #0]
   13776:	4a68      	ldr	r2, [pc, #416]	; (13918 <isr_rx_conn_pkt_ctrl+0xf30>)
   13778:	4b68      	ldr	r3, [pc, #416]	; (1391c <isr_rx_conn_pkt_ctrl+0xf34>)
   1377a:	4969      	ldr	r1, [pc, #420]	; (13920 <isr_rx_conn_pkt_ctrl+0xf38>)
   1377c:	486a      	ldr	r0, [pc, #424]	; (13928 <isr_rx_conn_pkt_ctrl+0xf40>)
   1377e:	f7ff ba75 	b.w	12c6c <isr_rx_conn_pkt_ctrl+0x284>
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
   13782:	460f      	mov	r7, r1
   13784:	e7cb      	b.n	1371e <isr_rx_conn_pkt_ctrl+0xd36>
	eff_tx_time = _radio.conn_curr->max_tx_time;
   13786:	46f0      	mov	r8, lr
   13788:	e7db      	b.n	13742 <isr_rx_conn_pkt_ctrl+0xd5a>
	eff_rx_time = _radio.conn_curr->max_rx_time;
   1378a:	4681      	mov	r9, r0
   1378c:	e7e3      	b.n	13756 <isr_rx_conn_pkt_ctrl+0xd6e>
			if (_radio.packet_rx_data_count == free_count_rx) {
   1378e:	f89a 3742 	ldrb.w	r3, [sl, #1858]	; 0x742
   13792:	4283      	cmp	r3, r0
   13794:	f040 8231 	bne.w	13bfa <isr_rx_conn_pkt_ctrl+0x1212>
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
   13798:	f8da 371c 	ldr.w	r3, [sl, #1820]	; 0x71c
					(_radio.conn_curr->llcp_length.req - 1);
   1379c:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
   137a0:	85df      	strh	r7, [r3, #46]	; 0x2e
					(_radio.conn_curr->llcp_length.req - 1);
   137a2:	3a01      	subs	r2, #1
				_radio.conn_curr->llcp_length.ack =
   137a4:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
				_radio.conn_curr->llcp_length.state =
   137a8:	f893 20ea 	ldrb.w	r2, [r3, #234]	; 0xea
				_radio.conn_curr->llcp_length.rx_octets =
   137ac:	f8a3 b0ec 	strh.w	fp, [r3, #236]	; 0xec
				_radio.conn_curr->llcp_length.state =
   137b0:	f042 0203 	orr.w	r2, r2, #3
				_radio.conn_curr->llcp_length.tx_octets =
   137b4:	f8a3 70ee 	strh.w	r7, [r3, #238]	; 0xee
				_radio.conn_curr->max_tx_time = eff_tx_time;
   137b8:	f8a3 8034 	strh.w	r8, [r3, #52]	; 0x34
				_radio.conn_curr->llcp_length.rx_time =
   137bc:	f8a3 90f0 	strh.w	r9, [r3, #240]	; 0xf0
				_radio.conn_curr->llcp_length.tx_time =
   137c0:	f8a3 80f2 	strh.w	r8, [r3, #242]	; 0xf2
				_radio.conn_curr->llcp_length.state =
   137c4:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
				_radio.state = STATE_CLOSE;
   137c8:	2303      	movs	r3, #3
   137ca:	f88a 3014 	strb.w	r3, [sl, #20]
	if (node_tx) {
   137ce:	2e00      	cmp	r6, #0
   137d0:	f43f a9e0 	beq.w	12b94 <isr_rx_conn_pkt_ctrl+0x1ac>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   137d4:	7933      	ldrb	r3, [r6, #4]
			length_resp_send(_radio.conn_curr, node_tx,
   137d6:	f8da 071c 	ldr.w	r0, [sl, #1820]	; 0x71c
	pdu_ctrl_tx->llctrl.length_rsp.max_rx_octets = eff_rx_octets;
   137da:	f8a6 b008 	strh.w	fp, [r6, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   137de:	f043 0303 	orr.w	r3, r3, #3
   137e2:	7133      	strb	r3, [r6, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   137e4:	2309      	movs	r3, #9
   137e6:	7173      	strb	r3, [r6, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   137e8:	2315      	movs	r3, #21
   137ea:	71f3      	strb	r3, [r6, #7]
	pdu_ctrl_tx->llctrl.length_rsp.max_tx_octets = eff_tx_octets;
   137ec:	81b7      	strh	r7, [r6, #12]
	pdu_ctrl_tx->llctrl.length_rsp.max_rx_time = eff_rx_time;
   137ee:	f8a6 900a 	strh.w	r9, [r6, #10]
	pdu_ctrl_tx->llctrl.length_rsp.max_tx_time = eff_tx_time;
   137f2:	f8a6 800e 	strh.w	r8, [r6, #14]
	ctrl_tx_enqueue(conn, node_tx);
   137f6:	4631      	mov	r1, r6
	ctrl_tx_enqueue(conn, node_tx);
   137f8:	f7fd fcc6 	bl	11188 <ctrl_tx_enqueue>
   137fc:	f7ff b9ca 	b.w	12b94 <isr_rx_conn_pkt_ctrl+0x1ac>
			_radio.conn_curr->pause_tx = 0;
   13800:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->llcp_length.ack =
   13804:	f883 c0e9 	strb.w	ip, [r3, #233]	; 0xe9
			_radio.conn_curr->procedure_expire = 0;
   13808:	f04f 0c00 	mov.w	ip, #0
			_radio.conn_curr->pause_tx = 0;
   1380c:	f36c 02c3 	bfi	r2, ip, #3, #1
			if (eff_tx_octets == _radio.conn_curr->max_tx_octets &&
   13810:	42b9      	cmp	r1, r7
			_radio.conn_curr->procedure_expire = 0;
   13812:	f8a3 c044 	strh.w	ip, [r3, #68]	; 0x44
			_radio.conn_curr->pause_tx = 0;
   13816:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			if (eff_tx_octets == _radio.conn_curr->max_tx_octets &&
   1381a:	d103      	bne.n	13824 <isr_rx_conn_pkt_ctrl+0xe3c>
   1381c:	45c6      	cmp	lr, r8
   1381e:	d101      	bne.n	13824 <isr_rx_conn_pkt_ctrl+0xe3c>
			    eff_tx_time == _radio.conn_curr->max_tx_time &&
   13820:	4548      	cmp	r0, r9
   13822:	d0d4      	beq.n	137ce <isr_rx_conn_pkt_ctrl+0xde6>
			_radio.conn_curr->max_tx_octets = eff_tx_octets;
   13824:	85df      	strh	r7, [r3, #46]	; 0x2e
			_radio.conn_curr->max_rx_time = eff_rx_time;
   13826:	f8a3 9036 	strh.w	r9, [r3, #54]	; 0x36
			_radio.conn_curr->max_tx_time = eff_tx_time;
   1382a:	f8a3 8034 	strh.w	r8, [r3, #52]	; 0x34
			*rx_enqueue = 1;
   1382e:	2301      	movs	r3, #1
			lr->max_rx_octets = eff_rx_octets;
   13830:	f8a4 b00c 	strh.w	fp, [r4, #12]
			lr->max_tx_octets = eff_tx_octets;
   13834:	8227      	strh	r7, [r4, #16]
			lr->max_rx_time = eff_rx_time;
   13836:	f8a4 900e 	strh.w	r9, [r4, #14]
			lr->max_tx_time = eff_tx_time;
   1383a:	f8a4 8012 	strh.w	r8, [r4, #18]
			*rx_enqueue = 1;
   1383e:	702b      	strb	r3, [r5, #0]
   13840:	e7c5      	b.n	137ce <isr_rx_conn_pkt_ctrl+0xde6>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_REQ,
   13842:	7a41      	ldrb	r1, [r0, #9]
   13844:	2016      	movs	r0, #22
   13846:	f7fa fe77 	bl	e538 <pdu_len_cmp>
   1384a:	2800      	cmp	r0, #0
   1384c:	f000 81ba 	beq.w	13bc4 <isr_rx_conn_pkt_ctrl+0x11dc>
		if (_radio.role == ROLE_MASTER) {
   13850:	4830      	ldr	r0, [pc, #192]	; (13914 <isr_rx_conn_pkt_ctrl+0xf2c>)
   13852:	7cc3      	ldrb	r3, [r0, #19]
   13854:	2b04      	cmp	r3, #4
   13856:	d169      	bne.n	1392c <isr_rx_conn_pkt_ctrl+0xf44>
			if ((_radio.conn_curr->llcp_phy.ack !=
   13858:	f8d0 071c 	ldr.w	r0, [r0, #1820]	; 0x71c
   1385c:	f890 30f5 	ldrb.w	r3, [r0, #245]	; 0xf5
			     _radio.conn_curr->llcp_phy.req) &&
   13860:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
			if ((_radio.conn_curr->llcp_phy.ack !=
   13864:	428b      	cmp	r3, r1
   13866:	d00a      	beq.n	1387e <isr_rx_conn_pkt_ctrl+0xe96>
			      LLCP_PHY_STATE_RSP_WAIT) ||
   13868:	f890 20f6 	ldrb.w	r2, [r0, #246]	; 0xf6
   1386c:	f002 0203 	and.w	r2, r2, #3
			     _radio.conn_curr->llcp_phy.req) &&
   13870:	3a01      	subs	r2, #1
   13872:	2a02      	cmp	r2, #2
   13874:	d803      	bhi.n	1387e <isr_rx_conn_pkt_ctrl+0xe96>
				nack = reject_ext_ind_send(_radio.conn_curr,
   13876:	2223      	movs	r2, #35	; 0x23
				nack = reject_ext_ind_send(_radio.conn_curr,
   13878:	2116      	movs	r1, #22
   1387a:	f7ff bba1 	b.w	12fc0 <isr_rx_conn_pkt_ctrl+0x5d8>
			} else if (((_radio.conn_curr->llcp_req !=
   1387e:	f890 5074 	ldrb.w	r5, [r0, #116]	; 0x74
   13882:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
   13886:	4295      	cmp	r5, r2
   13888:	d003      	beq.n	13892 <isr_rx_conn_pkt_ctrl+0xeaa>
				     _radio.conn_curr->llcp_ack) &&
   1388a:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
   1388e:	2a03      	cmp	r2, #3
   13890:	d105      	bne.n	1389e <isr_rx_conn_pkt_ctrl+0xeb6>
				     LLCP_ENCRYPTION)) ||
   13892:	f890 50c0 	ldrb.w	r5, [r0, #192]	; 0xc0
   13896:	f890 20c1 	ldrb.w	r2, [r0, #193]	; 0xc1
   1389a:	4295      	cmp	r5, r2
   1389c:	d001      	beq.n	138a2 <isr_rx_conn_pkt_ctrl+0xeba>
				nack = reject_ext_ind_send(_radio.conn_curr,
   1389e:	222a      	movs	r2, #42	; 0x2a
   138a0:	e7ea      	b.n	13878 <isr_rx_conn_pkt_ctrl+0xe90>
				_radio.conn_curr->llcp_phy.state =
   138a2:	f890 20f6 	ldrb.w	r2, [r0, #246]	; 0xf6
				if (_radio.conn_curr->llcp_phy.ack ==
   138a6:	428b      	cmp	r3, r1
				_radio.conn_curr->llcp_phy.state =
   138a8:	f042 0203 	orr.w	r2, r2, #3
   138ac:	f880 20f6 	strb.w	r2, [r0, #246]	; 0xf6
				if (_radio.conn_curr->llcp_phy.ack ==
   138b0:	d116      	bne.n	138e0 <isr_rx_conn_pkt_ctrl+0xef8>
					_radio.conn_curr->llcp_phy.ack--;
   138b2:	3b01      	subs	r3, #1
   138b4:	f880 30f5 	strb.w	r3, [r0, #245]	; 0xf5
					_radio.conn_curr->llcp_phy.cmd = 0;
   138b8:	f890 30f7 	ldrb.w	r3, [r0, #247]	; 0xf7
						_radio.conn_curr->phy_pref_tx;
   138bc:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
					_radio.conn_curr->llcp_phy.cmd = 0;
   138c0:	f36f 0341 	bfc	r3, #1, #1
   138c4:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
					_radio.conn_curr->llcp_phy.tx =
   138c8:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
   138cc:	f362 0384 	bfi	r3, r2, #2, #3
						_radio.conn_curr->phy_pref_rx;
   138d0:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
					_radio.conn_curr->llcp_phy.rx =
   138d4:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   138d8:	f362 1347 	bfi	r3, r2, #5, #3
   138dc:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
				_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
   138e0:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
   138e4:	7b62      	ldrb	r2, [r4, #13]
   138e6:	f3c3 0182 	ubfx	r1, r3, #2, #3
   138ea:	400a      	ands	r2, r1
   138ec:	f362 0384 	bfi	r3, r2, #2, #3
   138f0:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
				_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
   138f4:	7b22      	ldrb	r2, [r4, #12]
   138f6:	b2db      	uxtb	r3, r3
   138f8:	ea02 1253 	and.w	r2, r2, r3, lsr #5
   138fc:	f362 1347 	bfi	r3, r2, #5, #3
   13900:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
   13904:	f7ff b946 	b.w	12b94 <isr_rx_conn_pkt_ctrl+0x1ac>
   13908:	00023dbe 	.word	0x00023dbe
   1390c:	00025a7c 	.word	0x00025a7c
   13910:	20001354 	.word	0x20001354
   13914:	20000bf0 	.word	0x20000bf0
   13918:	00022d86 	.word	0x00022d86
   1391c:	00025a63 	.word	0x00025a63
   13920:	000272e8 	.word	0x000272e8
   13924:	0002644e 	.word	0x0002644e
   13928:	00025fb5 	.word	0x00025fb5
			nack = phy_rsp_send(_radio.conn_curr, pdu_data_rx);
   1392c:	f8d0 571c 	ldr.w	r5, [r0, #1820]	; 0x71c
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   13930:	f200 7064 	addw	r0, r0, #1892	; 0x764
   13934:	f7f7 ff57 	bl	b7e6 <mem_acquire>
	if (!node_tx) {
   13938:	4601      	mov	r1, r0
   1393a:	2800      	cmp	r0, #0
   1393c:	f43f aa67 	beq.w	12e0e <isr_rx_conn_pkt_ctrl+0x426>
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   13940:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   13944:	2202      	movs	r2, #2
   13946:	f362 0301 	bfi	r3, r2, #0, #2
   1394a:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	if (conn->llcp_phy.ack ==
   1394e:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
   13952:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
   13956:	4293      	cmp	r3, r2
   13958:	d11a      	bne.n	13990 <isr_rx_conn_pkt_ctrl+0xfa8>
		conn->llcp_phy.ack--;
   1395a:	3b01      	subs	r3, #1
   1395c:	f885 30f5 	strb.w	r3, [r5, #245]	; 0xf5
		conn->llcp_phy.cmd = 0;
   13960:	f895 30f7 	ldrb.w	r3, [r5, #247]	; 0xf7
			conn->phy_pref_tx;
   13964:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
		conn->llcp_phy.cmd = 0;
   13968:	f36f 0341 	bfc	r3, #1, #1
   1396c:	f885 30f7 	strb.w	r3, [r5, #247]	; 0xf7
		conn->llcp_phy.tx =
   13970:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   13974:	f362 0384 	bfi	r3, r2, #2, #3
			conn->phy_pref_rx;
   13978:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
		conn->llcp_phy.rx =
   1397c:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   13980:	f362 1347 	bfi	r3, r2, #5, #3
   13984:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
		conn->procedure_expire =
   13988:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
   1398c:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
	conn->llcp_phy.tx &= p->rx_phys;
   13990:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   13994:	7b62      	ldrb	r2, [r4, #13]
   13996:	f3c3 0082 	ubfx	r0, r3, #2, #3
   1399a:	4002      	ands	r2, r0
   1399c:	f362 0384 	bfi	r3, r2, #2, #3
   139a0:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	conn->llcp_phy.rx &= p->tx_phys;
   139a4:	7b22      	ldrb	r2, [r4, #12]
   139a6:	b2db      	uxtb	r3, r3
   139a8:	ea02 1253 	and.w	r2, r2, r3, lsr #5
   139ac:	f362 1347 	bfi	r3, r2, #5, #3
   139b0:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   139b4:	790b      	ldrb	r3, [r1, #4]
   139b6:	f043 0303 	orr.w	r3, r3, #3
   139ba:	710b      	strb	r3, [r1, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   139bc:	2303      	movs	r3, #3
   139be:	714b      	strb	r3, [r1, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   139c0:	2317      	movs	r3, #23
   139c2:	71cb      	strb	r3, [r1, #7]
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   139c4:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   139c8:	f3c3 0302 	ubfx	r3, r3, #0, #3
   139cc:	720b      	strb	r3, [r1, #8]
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
   139ce:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
   139d2:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   139d6:	724b      	strb	r3, [r1, #9]
   139d8:	f7ff ba2b 	b.w	12e32 <isr_rx_conn_pkt_ctrl+0x44a>
		if (_radio.conn_curr->role ||
   139dc:	4e90      	ldr	r6, [pc, #576]	; (13c20 <isr_rx_conn_pkt_ctrl+0x1238>)
   139de:	f8d6 571c 	ldr.w	r5, [r6, #1820]	; 0x71c
   139e2:	f995 301d 	ldrsb.w	r3, [r5, #29]
   139e6:	2b00      	cmp	r3, #0
   139e8:	f2c0 80ec 	blt.w	13bc4 <isr_rx_conn_pkt_ctrl+0x11dc>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_RSP,
   139ec:	7a41      	ldrb	r1, [r0, #9]
   139ee:	2017      	movs	r0, #23
   139f0:	f7fa fda2 	bl	e538 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
   139f4:	2800      	cmp	r0, #0
   139f6:	f000 80e5 	beq.w	13bc4 <isr_rx_conn_pkt_ctrl+0x11dc>
		if ((_radio.role == ROLE_MASTER) &&
   139fa:	7cf3      	ldrb	r3, [r6, #19]
   139fc:	2b04      	cmp	r3, #4
   139fe:	f47f a8c9 	bne.w	12b94 <isr_rx_conn_pkt_ctrl+0x1ac>
   13a02:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
   13a06:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
   13a0a:	429a      	cmp	r2, r3
   13a0c:	f43f a8c2 	beq.w	12b94 <isr_rx_conn_pkt_ctrl+0x1ac>
		    (_radio.conn_curr->llcp_phy.state ==
   13a10:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
		     _radio.conn_curr->llcp_phy.req) &&
   13a14:	f003 0203 	and.w	r2, r3, #3
   13a18:	2a02      	cmp	r2, #2
   13a1a:	f47f a8bb 	bne.w	12b94 <isr_rx_conn_pkt_ctrl+0x1ac>
			_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_UPD;
   13a1e:	f043 0303 	orr.w	r3, r3, #3
   13a22:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
   13a26:	7b62      	ldrb	r2, [r4, #13]
   13a28:	f3c3 0182 	ubfx	r1, r3, #2, #3
   13a2c:	400a      	ands	r2, r1
   13a2e:	f362 0384 	bfi	r3, r2, #2, #3
   13a32:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
   13a36:	7b22      	ldrb	r2, [r4, #12]
   13a38:	b2db      	uxtb	r3, r3
   13a3a:	ea02 1253 	and.w	r2, r2, r3, lsr #5
   13a3e:	f362 1347 	bfi	r3, r2, #5, #3
   13a42:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
   13a46:	f7ff b858 	b.w	12afa <isr_rx_conn_pkt_ctrl+0x112>
		if (!_radio.conn_curr->role ||
   13a4a:	4b75      	ldr	r3, [pc, #468]	; (13c20 <isr_rx_conn_pkt_ctrl+0x1238>)
   13a4c:	f8d3 671c 	ldr.w	r6, [r3, #1820]	; 0x71c
   13a50:	f996 301d 	ldrsb.w	r3, [r6, #29]
   13a54:	2b00      	cmp	r3, #0
   13a56:	f280 80b5 	bge.w	13bc4 <isr_rx_conn_pkt_ctrl+0x11dc>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_UPD_IND,
   13a5a:	7a41      	ldrb	r1, [r0, #9]
   13a5c:	2018      	movs	r0, #24
   13a5e:	f7fa fd6b 	bl	e538 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
   13a62:	2800      	cmp	r0, #0
   13a64:	f000 80ae 	beq.w	13bc4 <isr_rx_conn_pkt_ctrl+0x11dc>
	if (!((ind->m_to_s_phy | ind->s_to_m_phy) & 0x07)) {
   13a68:	7b27      	ldrb	r7, [r4, #12]
   13a6a:	7b62      	ldrb	r2, [r4, #13]
   13a6c:	ea47 0002 	orr.w	r0, r7, r2
   13a70:	f010 0007 	ands.w	r0, r0, #7
   13a74:	d125      	bne.n	13ac2 <isr_rx_conn_pkt_ctrl+0x10da>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   13a76:	f896 20f4 	ldrb.w	r2, [r6, #244]	; 0xf4
   13a7a:	f896 30f5 	ldrb.w	r3, [r6, #245]	; 0xf5
   13a7e:	4293      	cmp	r3, r2
   13a80:	f43f a888 	beq.w	12b94 <isr_rx_conn_pkt_ctrl+0x1ac>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
   13a84:	f896 30f6 	ldrb.w	r3, [r6, #246]	; 0xf6
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   13a88:	f003 0303 	and.w	r3, r3, #3
   13a8c:	2b02      	cmp	r3, #2
   13a8e:	f47f a881 	bne.w	12b94 <isr_rx_conn_pkt_ctrl+0x1ac>
		if (!conn->llcp_phy.cmd) {
   13a92:	f896 30f7 	ldrb.w	r3, [r6, #247]	; 0xf7
		conn->llcp_phy.ack = conn->llcp_phy.req;
   13a96:	f886 20f5 	strb.w	r2, [r6, #245]	; 0xf5
		if (!conn->llcp_phy.cmd) {
   13a9a:	079a      	lsls	r2, r3, #30
		conn->procedure_expire = 0;
   13a9c:	f8a6 0044 	strh.w	r0, [r6, #68]	; 0x44
		if (!conn->llcp_phy.cmd) {
   13aa0:	f57f a878 	bpl.w	12b94 <isr_rx_conn_pkt_ctrl+0x1ac>
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   13aa4:	230c      	movs	r3, #12
		upd->status = 0;
   13aa6:	72e0      	strb	r0, [r4, #11]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   13aa8:	7123      	strb	r3, [r4, #4]
		upd->tx = conn->phy_tx;
   13aaa:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
   13aae:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   13ab2:	7323      	strb	r3, [r4, #12]
		upd->rx = conn->phy_rx;
   13ab4:	f896 303a 	ldrb.w	r3, [r6, #58]	; 0x3a
   13ab8:	f3c3 0302 	ubfx	r3, r3, #0, #3
   13abc:	7363      	strb	r3, [r4, #13]
   13abe:	f7ff ba6a 	b.w	12f96 <isr_rx_conn_pkt_ctrl+0x5ae>
	if (((ind->instant - conn->event_counter) & 0xffff) > 0x7fff) {
   13ac2:	89e0      	ldrh	r0, [r4, #14]
   13ac4:	8c73      	ldrh	r3, [r6, #34]	; 0x22
   13ac6:	1ac3      	subs	r3, r0, r3
   13ac8:	041b      	lsls	r3, r3, #16
   13aca:	f100 80a4 	bmi.w	13c16 <isr_rx_conn_pkt_ctrl+0x122e>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   13ace:	f896 1074 	ldrb.w	r1, [r6, #116]	; 0x74
   13ad2:	f896 3075 	ldrb.w	r3, [r6, #117]	; 0x75
   13ad6:	428b      	cmp	r3, r1
   13ad8:	d005      	beq.n	13ae6 <isr_rx_conn_pkt_ctrl+0x10fe>
   13ada:	4b52      	ldr	r3, [pc, #328]	; (13c24 <isr_rx_conn_pkt_ctrl+0x123c>)
   13adc:	9301      	str	r3, [sp, #4]
   13ade:	9300      	str	r3, [sp, #0]
   13ae0:	4b51      	ldr	r3, [pc, #324]	; (13c28 <isr_rx_conn_pkt_ctrl+0x1240>)
   13ae2:	f7fe bfc7 	b.w	12a74 <isr_rx_conn_pkt_ctrl+0x8c>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   13ae6:	f896 40f4 	ldrb.w	r4, [r6, #244]	; 0xf4
   13aea:	f896 30f5 	ldrb.w	r3, [r6, #245]	; 0xf5
   13aee:	42a3      	cmp	r3, r4
   13af0:	d014      	beq.n	13b1c <isr_rx_conn_pkt_ctrl+0x1134>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   13af2:	f896 30f6 	ldrb.w	r3, [r6, #246]	; 0xf6
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   13af6:	f003 0303 	and.w	r3, r3, #3
   13afa:	2b02      	cmp	r3, #2
   13afc:	d10e      	bne.n	13b1c <isr_rx_conn_pkt_ctrl+0x1134>
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   13afe:	f896 30f7 	ldrb.w	r3, [r6, #247]	; 0xf7
		conn->llcp_phy.ack = conn->llcp_phy.req;
   13b02:	f886 40f5 	strb.w	r4, [r6, #245]	; 0xf5
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   13b06:	f896 4078 	ldrb.w	r4, [r6, #120]	; 0x78
   13b0a:	f3c3 0340 	ubfx	r3, r3, #1, #1
   13b0e:	f363 0441 	bfi	r4, r3, #1, #1
		conn->procedure_expire = 0;
   13b12:	2300      	movs	r3, #0
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   13b14:	f886 4078 	strb.w	r4, [r6, #120]	; 0x78
		conn->procedure_expire = 0;
   13b18:	f8a6 3044 	strh.w	r3, [r6, #68]	; 0x44
	conn->llcp.phy_upd_ind.tx = ind->s_to_m_phy;
   13b1c:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
	conn->llcp.phy_upd_ind.instant = ind->instant;
   13b20:	f8a6 007a 	strh.w	r0, [r6, #122]	; 0x7a
	conn->llcp.phy_upd_ind.tx = ind->s_to_m_phy;
   13b24:	f002 0207 	and.w	r2, r2, #7
   13b28:	f362 0384 	bfi	r3, r2, #2, #3
	conn->llcp.phy_upd_ind.rx = ind->m_to_s_phy;
   13b2c:	f367 1347 	bfi	r3, r7, #5, #3
	conn->llcp.phy_upd_ind.initiate = 0;
   13b30:	f36f 0300 	bfc	r3, #0, #1
   13b34:	f886 3078 	strb.w	r3, [r6, #120]	; 0x78
	conn->llcp_type = LLCP_PHY_UPD;
   13b38:	2008      	movs	r0, #8
	conn->llcp_ack--;
   13b3a:	3901      	subs	r1, #1
	if (conn->llcp.phy_upd_ind.tx) {
   13b3c:	f003 031c 	and.w	r3, r3, #28
	conn->llcp_type = LLCP_PHY_UPD;
   13b40:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
	conn->llcp_ack--;
   13b44:	f886 1075 	strb.w	r1, [r6, #117]	; 0x75
	if (conn->llcp.phy_upd_ind.tx) {
   13b48:	2b00      	cmp	r3, #0
   13b4a:	f43f a823 	beq.w	12b94 <isr_rx_conn_pkt_ctrl+0x1ac>
		conn->phy_tx_time = conn->llcp.phy_upd_ind.tx;
   13b4e:	f896 3039 	ldrb.w	r3, [r6, #57]	; 0x39
   13b52:	f362 0302 	bfi	r3, r2, #0, #3
   13b56:	f886 3039 	strb.w	r3, [r6, #57]	; 0x39
   13b5a:	f7ff b81b 	b.w	12b94 <isr_rx_conn_pkt_ctrl+0x1ac>
		if (_radio.conn_curr->role ||
   13b5e:	4e30      	ldr	r6, [pc, #192]	; (13c20 <isr_rx_conn_pkt_ctrl+0x1238>)
   13b60:	f8d6 571c 	ldr.w	r5, [r6, #1820]	; 0x71c
   13b64:	f995 301d 	ldrsb.w	r3, [r5, #29]
   13b68:	2b00      	cmp	r3, #0
   13b6a:	db2b      	blt.n	13bc4 <isr_rx_conn_pkt_ctrl+0x11dc>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND,
   13b6c:	7a41      	ldrb	r1, [r0, #9]
   13b6e:	2019      	movs	r0, #25
   13b70:	f7fa fce2 	bl	e538 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
   13b74:	b330      	cbz	r0, 13bc4 <isr_rx_conn_pkt_ctrl+0x11dc>
			if (!(p->phys & (conn->phy_tx | conn->phy_rx))) {
   13b76:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
   13b7a:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
   13b7e:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
   13b82:	7b22      	ldrb	r2, [r4, #12]
   13b84:	f003 0307 	and.w	r3, r3, #7
   13b88:	4213      	tst	r3, r2
   13b8a:	f43f a803 	beq.w	12b94 <isr_rx_conn_pkt_ctrl+0x1ac>
			if (conn->llcp_req != conn->llcp_ack) {
   13b8e:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
   13b92:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
   13b96:	429a      	cmp	r2, r3
   13b98:	f47e affc 	bne.w	12b94 <isr_rx_conn_pkt_ctrl+0x1ac>
			memcpy(&conn->llcp.chan_map.chm[0],
   13b9c:	2205      	movs	r2, #5
   13b9e:	f206 7122 	addw	r1, r6, #1826	; 0x722
   13ba2:	f105 0079 	add.w	r0, r5, #121	; 0x79
   13ba6:	f7ec fdf4 	bl	792 <memcpy>
			conn->llcp.chan_map.initiate = 1;
   13baa:	2301      	movs	r3, #1
   13bac:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
			conn->llcp_type = LLCP_CHAN_MAP;
   13bb0:	2302      	movs	r3, #2
   13bb2:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
			conn->llcp_ack--;
   13bb6:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
   13bba:	3b01      	subs	r3, #1
   13bbc:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
   13bc0:	f7fe bfe8 	b.w	12b94 <isr_rx_conn_pkt_ctrl+0x1ac>
		nack = unknown_rsp_send(_radio.conn_curr,
   13bc4:	4816      	ldr	r0, [pc, #88]	; (13c20 <isr_rx_conn_pkt_ctrl+0x1238>)
   13bc6:	f8d0 471c 	ldr.w	r4, [r0, #1820]	; 0x71c
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   13bca:	f200 7064 	addw	r0, r0, #1892	; 0x764
   13bce:	f7f7 fe0a 	bl	b7e6 <mem_acquire>
	if (!node_tx) {
   13bd2:	4601      	mov	r1, r0
   13bd4:	2800      	cmp	r0, #0
   13bd6:	f43f a91a 	beq.w	12e0e <isr_rx_conn_pkt_ctrl+0x426>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   13bda:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.unknown_rsp.type = type;
   13bdc:	7207      	strb	r7, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   13bde:	f043 0303 	orr.w	r3, r3, #3
   13be2:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
   13be4:	2302      	movs	r3, #2
   13be6:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   13be8:	2307      	movs	r3, #7
   13bea:	71c3      	strb	r3, [r0, #7]
   13bec:	f7ff b94b 	b.w	12e86 <isr_rx_conn_pkt_ctrl+0x49e>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
   13bf0:	2328      	movs	r3, #40	; 0x28
   13bf2:	f885 30b3 	strb.w	r3, [r5, #179]	; 0xb3
   13bf6:	f7fe bfcd 	b.w	12b94 <isr_rx_conn_pkt_ctrl+0x1ac>
	if (node_tx) {
   13bfa:	2e00      	cmp	r6, #0
   13bfc:	f43f a907 	beq.w	12e0e <isr_rx_conn_pkt_ctrl+0x426>
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
   13c00:	490a      	ldr	r1, [pc, #40]	; (13c2c <isr_rx_conn_pkt_ctrl+0x1244>)
   13c02:	4630      	mov	r0, r6
   13c04:	f7f7 fe09 	bl	b81a <mem_release>
   13c08:	f7ff b901 	b.w	12e0e <isr_rx_conn_pkt_ctrl+0x426>
	eff_tx_time = _radio.conn_curr->max_tx_time;
   13c0c:	46f0      	mov	r8, lr
	eff_rx_time = _radio.conn_curr->max_rx_time;
   13c0e:	4681      	mov	r9, r0
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
   13c10:	460f      	mov	r7, r1
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
   13c12:	4693      	mov	fp, r2
   13c14:	e5db      	b.n	137ce <isr_rx_conn_pkt_ctrl+0xde6>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
   13c16:	2328      	movs	r3, #40	; 0x28
   13c18:	f886 30b3 	strb.w	r3, [r6, #179]	; 0xb3
   13c1c:	f7fe bfba 	b.w	12b94 <isr_rx_conn_pkt_ctrl+0x1ac>
   13c20:	20000bf0 	.word	0x20000bf0
   13c24:	00023dbe 	.word	0x00023dbe
   13c28:	00025e74 	.word	0x00025e74
   13c2c:	20001354 	.word	0x20001354

00013c30 <isr>:
{
   13c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c34:	b093      	sub	sp, #76	; 0x4c
	trx_done = radio_is_done();
   13c36:	f004 fed3 	bl	189e0 <radio_is_done>
   13c3a:	b2c6      	uxtb	r6, r0
	if (trx_done) {
   13c3c:	b366      	cbz	r6, 13c98 <isr+0x68>
		crc_ok = radio_crc_is_valid();
   13c3e:	f004 feef 	bl	18a20 <radio_crc_is_valid>
   13c42:	b2c7      	uxtb	r7, r0
		devmatch_ok = radio_filter_has_match();
   13c44:	f004 ff70 	bl	18b28 <radio_filter_has_match>
   13c48:	fa5f f880 	uxtb.w	r8, r0
		devmatch_id = radio_filter_match_get();
   13c4c:	f004 ff76 	bl	18b3c <radio_filter_match_get>
   13c50:	fa5f f980 	uxtb.w	r9, r0
		irkmatch_ok = radio_ar_has_match();
   13c54:	f005 f964 	bl	18f20 <radio_ar_has_match>
   13c58:	fa5f fa80 	uxtb.w	sl, r0
		irkmatch_id = radio_ar_match_get();
   13c5c:	f005 f94e 	bl	18efc <radio_ar_match_get>
   13c60:	fa5f fb80 	uxtb.w	fp, r0
		rssi_ready = radio_rssi_is_ready();
   13c64:	f004 ff2a 	bl	18abc <radio_rssi_is_ready>
   13c68:	b2c5      	uxtb	r5, r0
	switch (_radio.state) {
   13c6a:	4cb4      	ldr	r4, [pc, #720]	; (13f3c <isr+0x30c>)
	radio_status_reset();
   13c6c:	f004 fea2 	bl	189b4 <radio_status_reset>
	radio_tmr_status_reset();
   13c70:	f004 ff76 	bl	18b60 <radio_tmr_status_reset>
	radio_filter_status_reset();
   13c74:	f004 ff50 	bl	18b18 <radio_filter_status_reset>
	radio_ar_status_reset();
   13c78:	f005 f946 	bl	18f08 <radio_ar_status_reset>
	radio_rssi_status_reset();
   13c7c:	f004 ff16 	bl	18aac <radio_rssi_status_reset>
	switch (_radio.state) {
   13c80:	7d23      	ldrb	r3, [r4, #20]
   13c82:	2b05      	cmp	r3, #5
   13c84:	f201 848e 	bhi.w	155a4 <isr+0x1974>
   13c88:	e8df f013 	tbh	[pc, r3, lsl #1]
   13c8c:	00cd007c 	.word	0x00cd007c
   13c90:	0a9d000e 	.word	0x0a9d000e
   13c94:	0a9d0a9d 	.word	0x0a9d0a9d
		devmatch_id = irkmatch_id = 0xFF;
   13c98:	f04f 0bff 	mov.w	fp, #255	; 0xff
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0;
   13c9c:	4635      	mov	r5, r6
   13c9e:	46b2      	mov	sl, r6
   13ca0:	46b0      	mov	r8, r6
   13ca2:	4637      	mov	r7, r6
		devmatch_id = irkmatch_id = 0xFF;
   13ca4:	46d9      	mov	r9, fp
   13ca6:	e7e0      	b.n	13c6a <isr+0x3a>
	_radio.state = STATE_RX;
   13ca8:	2301      	movs	r3, #1
   13caa:	7523      	strb	r3, [r4, #20]
	hcto = radio_tmr_tifs_base_get()
   13cac:	f005 f84a 	bl	18d44 <radio_tmr_tifs_base_get>
   13cb0:	4605      	mov	r5, r0
	radio_tmr_tifs_set(RADIO_TIFS);
   13cb2:	2096      	movs	r0, #150	; 0x96
   13cb4:	f004 ff64 	bl	18b80 <radio_tmr_tifs_set>
	switch (_radio.role) {
   13cb8:	7ce3      	ldrb	r3, [r4, #19]
   13cba:	3b01      	subs	r3, #1
   13cbc:	2b03      	cmp	r3, #3
   13cbe:	f200 80aa 	bhi.w	13e16 <isr+0x1e6>
   13cc2:	e8df f003 	tbb	[pc, r3]
   13cc6:	3202      	.short	0x3202
   13cc8:	6262      	.short	0x6262
		radio_switch_complete_and_tx(0, 0, 0, 0);
   13cca:	2300      	movs	r3, #0
   13ccc:	461a      	mov	r2, r3
   13cce:	4619      	mov	r1, r3
   13cd0:	4618      	mov	r0, r3
   13cd2:	f004 fec3 	bl	18a5c <radio_switch_complete_and_tx>
		radio_pkt_rx_set(radio_pkt_scratch_get());
   13cd6:	f004 feb1 	bl	18a3c <radio_pkt_scratch_get>
   13cda:	f004 fe25 	bl	18928 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
   13cde:	f004 fe75 	bl	189cc <radio_is_ready>
   13ce2:	b138      	cbz	r0, 13cf4 <isr+0xc4>
		LL_ASSERT(!radio_is_ready());
   13ce4:	4b96      	ldr	r3, [pc, #600]	; (13f40 <isr+0x310>)
   13ce6:	9301      	str	r3, [sp, #4]
   13ce8:	9300      	str	r3, [sp, #0]
   13cea:	4b96      	ldr	r3, [pc, #600]	; (13f44 <isr+0x314>)
	LL_ASSERT(!radio_is_ready());
   13cec:	4a96      	ldr	r2, [pc, #600]	; (13f48 <isr+0x318>)
   13cee:	4997      	ldr	r1, [pc, #604]	; (13f4c <isr+0x31c>)
   13cf0:	4897      	ldr	r0, [pc, #604]	; (13f50 <isr+0x320>)
   13cf2:	e34b      	b.n	1438c <isr+0x75c>
		if (ctrl_rl_enabled()) {
   13cf4:	f003 ffd2 	bl	17c9c <ctrl_rl_enabled>
   13cf8:	b138      	cbz	r0, 13d0a <isr+0xda>
			u8_t count, *irks = ctrl_irks_get(&count);
   13cfa:	a810      	add	r0, sp, #64	; 0x40
   13cfc:	f003 fd14 	bl	17728 <ctrl_irks_get>
			radio_ar_configure(count, irks);
   13d00:	4601      	mov	r1, r0
   13d02:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
   13d06:	f005 f8c7 	bl	18e98 <radio_ar_configure>
		hcto += radio_rx_chain_delay_get(0, 0);
   13d0a:	2100      	movs	r1, #0
   13d0c:	4608      	mov	r0, r1
   13d0e:	f004 fe24 	bl	1895a <radio_rx_chain_delay_get>
		hcto += addr_us_get(0);
   13d12:	35c3      	adds	r5, #195	; 0xc3
		hcto -= radio_tx_chain_delay_get(0, 0);
   13d14:	2100      	movs	r1, #0
		hcto += addr_us_get(0);
   13d16:	4405      	add	r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
   13d18:	4608      	mov	r0, r1
   13d1a:	f004 fe1a 	bl	18952 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
   13d1e:	1a28      	subs	r0, r5, r0
   13d20:	f004 ffa6 	bl	18c70 <radio_tmr_hcto_configure>
		radio_tmr_end_capture();
   13d24:	f004 fff6 	bl	18d14 <radio_tmr_end_capture>
   13d28:	e02c      	b.n	13d84 <isr+0x154>
		radio_switch_complete_and_tx(0, 0, 0, 0);
   13d2a:	2300      	movs	r3, #0
   13d2c:	461a      	mov	r2, r3
   13d2e:	4619      	mov	r1, r3
   13d30:	4618      	mov	r0, r3
   13d32:	f004 fe93 	bl	18a5c <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
   13d36:	f894 2749 	ldrb.w	r2, [r4, #1865]	; 0x749
   13d3a:	f8d4 3744 	ldr.w	r3, [r4, #1860]	; 0x744
		radio_pkt_rx_set(_radio.packet_rx
   13d3e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   13d42:	3008      	adds	r0, #8
   13d44:	f004 fdf0 	bl	18928 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
   13d48:	f004 fe40 	bl	189cc <radio_is_ready>
   13d4c:	2800      	cmp	r0, #0
   13d4e:	d1c9      	bne.n	13ce4 <isr+0xb4>
		if (ctrl_rl_enabled()) {
   13d50:	f003 ffa4 	bl	17c9c <ctrl_rl_enabled>
   13d54:	b138      	cbz	r0, 13d66 <isr+0x136>
			u8_t count, *irks = ctrl_irks_get(&count);
   13d56:	a810      	add	r0, sp, #64	; 0x40
   13d58:	f003 fce6 	bl	17728 <ctrl_irks_get>
			radio_ar_configure(count, irks);
   13d5c:	4601      	mov	r1, r0
   13d5e:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
   13d62:	f005 f899 	bl	18e98 <radio_ar_configure>
		hcto += radio_rx_chain_delay_get(0, 0);
   13d66:	2100      	movs	r1, #0
   13d68:	4608      	mov	r0, r1
   13d6a:	f004 fdf6 	bl	1895a <radio_rx_chain_delay_get>
		hcto += addr_us_get(0);
   13d6e:	35c3      	adds	r5, #195	; 0xc3
		hcto -= radio_tx_chain_delay_get(0, 0);
   13d70:	2100      	movs	r1, #0
		hcto += addr_us_get(0);
   13d72:	4405      	add	r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
   13d74:	4608      	mov	r0, r1
   13d76:	f004 fdec 	bl	18952 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
   13d7a:	1a28      	subs	r0, r5, r0
   13d7c:	f004 ff78 	bl	18c70 <radio_tmr_hcto_configure>
		radio_rssi_measure();
   13d80:	f004 fe84 	bl	18a8c <radio_rssi_measure>
}
   13d84:	b013      	add	sp, #76	; 0x4c
   13d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
   13d8a:	f8d4 371c 	ldr.w	r3, [r4, #1820]	; 0x71c
					     _radio.conn_curr->phy_flags);
   13d8e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
   13d92:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
   13d96:	2100      	movs	r1, #0
   13d98:	09d3      	lsrs	r3, r2, #7
   13d9a:	f000 0007 	and.w	r0, r0, #7
   13d9e:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   13da2:	f004 fe5b 	bl	18a5c <radio_switch_complete_and_tx>
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
   13da6:	f894 2749 	ldrb.w	r2, [r4, #1865]	; 0x749
   13daa:	f8d4 3744 	ldr.w	r3, [r4, #1860]	; 0x744
		rx_packet_set(_radio.conn_curr,	(void *)
   13dae:	f8d4 071c 	ldr.w	r0, [r4, #1820]	; 0x71c
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
   13db2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		rx_packet_set(_radio.conn_curr,	(void *)
   13db6:	3108      	adds	r1, #8
   13db8:	f7fa ff7a 	bl	ecb0 <rx_packet_set>
		LL_ASSERT(!radio_is_ready());
   13dbc:	f004 fe06 	bl	189cc <radio_is_ready>
   13dc0:	2800      	cmp	r0, #0
   13dc2:	d18f      	bne.n	13ce4 <isr+0xb4>
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_rx, 1);
   13dc4:	f8d4 371c 	ldr.w	r3, [r4, #1820]	; 0x71c
   13dc8:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
   13dcc:	2101      	movs	r1, #1
   13dce:	f000 0007 	and.w	r0, r0, #7
   13dd2:	f004 fdc2 	bl	1895a <radio_rx_chain_delay_get>
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
   13dd6:	f8d4 271c 	ldr.w	r2, [r4, #1820]	; 0x71c
   13dda:	f892 303a 	ldrb.w	r3, [r2, #58]	; 0x3a
	switch (phy) {
   13dde:	f003 0307 	and.w	r3, r3, #7
	hcto = radio_tmr_tifs_base_get()
   13de2:	359b      	adds	r5, #155	; 0x9b
	switch (phy) {
   13de4:	2b02      	cmp	r3, #2
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_rx, 1);
   13de6:	4405      	add	r5, r0
	switch (phy) {
   13de8:	d013      	beq.n	13e12 <isr+0x1e2>
		return 40;
   13dea:	2b04      	cmp	r3, #4
   13dec:	bf0c      	ite	eq
   13dee:	f44f 70bc 	moveq.w	r0, #376	; 0x178
   13df2:	2028      	movne	r0, #40	; 0x28
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
   13df4:	4405      	add	r5, r0
						 _radio.conn_curr->phy_flags);
   13df6:	f892 0038 	ldrb.w	r0, [r2, #56]	; 0x38
		hcto -= radio_tx_chain_delay_get(_radio.conn_curr->phy_tx,
   13dfa:	09c1      	lsrs	r1, r0, #7
   13dfc:	f3c0 00c2 	ubfx	r0, r0, #3, #3
   13e00:	f004 fda7 	bl	18952 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
   13e04:	1a28      	subs	r0, r5, r0
   13e06:	f004 ff33 	bl	18c70 <radio_tmr_hcto_configure>
		packet_tx_enqueue(1);
   13e0a:	2001      	movs	r0, #1
   13e0c:	f7fc f810 	bl	fe30 <packet_tx_enqueue>
   13e10:	e7b8      	b.n	13d84 <isr+0x154>
		return 24;
   13e12:	2018      	movs	r0, #24
   13e14:	e7ee      	b.n	13df4 <isr+0x1c4>
		LL_ASSERT(0);
   13e16:	4b4a      	ldr	r3, [pc, #296]	; (13f40 <isr+0x310>)
   13e18:	9301      	str	r3, [sp, #4]
   13e1a:	9300      	str	r3, [sp, #0]
   13e1c:	4b49      	ldr	r3, [pc, #292]	; (13f44 <isr+0x314>)
		LL_ASSERT(0);
   13e1e:	4a4a      	ldr	r2, [pc, #296]	; (13f48 <isr+0x318>)
   13e20:	494a      	ldr	r1, [pc, #296]	; (13f4c <isr+0x31c>)
   13e22:	484c      	ldr	r0, [pc, #304]	; (13f54 <isr+0x324>)
   13e24:	e2b2      	b.n	1438c <isr+0x75c>
	if (!((trx_done) || ((SILENT_CONNECTION) &&
   13e26:	b926      	cbnz	r6, 13e32 <isr+0x202>
		_radio.state = STATE_CLOSE;
   13e28:	2303      	movs	r3, #3
   13e2a:	7523      	strb	r3, [r4, #20]
		radio_disable();
   13e2c:	f004 fdb0 	bl	18990 <radio_disable>
   13e30:	e7a8      	b.n	13d84 <isr+0x154>
	switch (_radio.role) {
   13e32:	7ce3      	ldrb	r3, [r4, #19]
   13e34:	3b01      	subs	r3, #1
   13e36:	2b03      	cmp	r3, #3
   13e38:	f201 81bf 	bhi.w	151ba <isr+0x158a>
   13e3c:	e8df f013 	tbh	[pc, r3, lsl #1]
   13e40:	02ae0004 	.word	0x02ae0004
   13e44:	067c067c 	.word	0x067c067c
		if (crc_ok) {
   13e48:	2f00      	cmp	r7, #0
   13e4a:	d0ed      	beq.n	13e28 <isr+0x1f8>
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
   13e4c:	f1ba 0f00 	cmp.w	sl, #0
   13e50:	d038      	beq.n	13ec4 <isr+0x294>
   13e52:	4658      	mov	r0, fp
   13e54:	f003 fcc6 	bl	177e4 <ctrl_rl_irk_idx>
   13e58:	f88d 0040 	strb.w	r0, [sp, #64]	; 0x40
	pdu_adv = (void *)radio_pkt_scratch_get();
   13e5c:	f004 fdee 	bl	18a3c <radio_pkt_scratch_get>
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
   13e60:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
	pdu_adv = (void *)radio_pkt_scratch_get();
   13e64:	4606      	mov	r6, r0
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
   13e66:	eb03 2303 	add.w	r3, r3, r3, lsl #8
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
   13e6a:	7800      	ldrb	r0, [r0, #0]
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
   13e6c:	332c      	adds	r3, #44	; 0x2c
   13e6e:	930a      	str	r3, [sp, #40]	; 0x28
   13e70:	18e5      	adds	r5, r4, r3
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
   13e72:	f000 030f 	and.w	r3, r0, #15
   13e76:	2b03      	cmp	r3, #3
   13e78:	d10a      	bne.n	13e90 <isr+0x260>
   13e7a:	7873      	ldrb	r3, [r6, #1]
   13e7c:	2b0c      	cmp	r3, #12
   13e7e:	d107      	bne.n	13e90 <isr+0x260>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
   13e80:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   13e84:	07df      	lsls	r7, r3, #31
   13e86:	d51f      	bpl.n	13ec8 <isr+0x298>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
   13e88:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
				      rl_idx)) ||
   13e8c:	07d8      	lsls	r0, r3, #31
   13e8e:	d44a      	bmi.n	13f26 <isr+0x2f6>
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
   13e90:	7830      	ldrb	r0, [r6, #0]
   13e92:	f000 030f 	and.w	r3, r0, #15
   13e96:	2b05      	cmp	r3, #5
   13e98:	d1c6      	bne.n	13e28 <isr+0x1f8>
   13e9a:	7873      	ldrb	r3, [r6, #1]
   13e9c:	2b22      	cmp	r3, #34	; 0x22
   13e9e:	d1c3      	bne.n	13e28 <isr+0x1f8>
	if (adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   13ea0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13ea2:	5ce3      	ldrb	r3, [r4, r3]
   13ea4:	f003 030f 	and.w	r3, r3, #15
   13ea8:	2b01      	cmp	r3, #1
   13eaa:	f040 8150 	bne.w	1414e <isr+0x51e>
					    ci->connect_ind.init_addr,
   13eae:	1cb7      	adds	r7, r6, #2
		return ctrl_rl_addr_allowed(ci->tx_addr,
   13eb0:	aa10      	add	r2, sp, #64	; 0x40
   13eb2:	4639      	mov	r1, r7
   13eb4:	f3c0 1080 	ubfx	r0, r0, #6, #1
   13eb8:	f003 fe94 	bl	17be4 <ctrl_rl_addr_allowed>
		       isr_adv_ci_adva_check(adv, ci) &&
   13ebc:	2800      	cmp	r0, #0
   13ebe:	d14d      	bne.n	13f5c <isr+0x32c>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   13ec0:	2000      	movs	r0, #0
   13ec2:	e05b      	b.n	13f7c <isr+0x34c>
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
   13ec4:	20ff      	movs	r0, #255	; 0xff
   13ec6:	e7c7      	b.n	13e58 <isr+0x228>
		 ctrl_rl_addr_allowed(sr->tx_addr, sr->scan_req.scan_addr,
   13ec8:	aa10      	add	r2, sp, #64	; 0x40
   13eca:	1cb1      	adds	r1, r6, #2
   13ecc:	f3c0 1080 	ubfx	r0, r0, #6, #1
   13ed0:	f003 fe88 	bl	17be4 <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
   13ed4:	2800      	cmp	r0, #0
   13ed6:	d0d7      	beq.n	13e88 <isr+0x258>
	return (adv->tx_addr == sr->rx_addr) &&
   13ed8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13eda:	7832      	ldrb	r2, [r6, #0]
   13edc:	5ce3      	ldrb	r3, [r4, r3]
   13ede:	f3c3 1380 	ubfx	r3, r3, #6, #1
   13ee2:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   13ee6:	d1d3      	bne.n	13e90 <isr+0x260>
		!memcmp(adv->adv_ind.addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   13ee8:	2206      	movs	r2, #6
   13eea:	f106 0108 	add.w	r1, r6, #8
   13eee:	1ca8      	adds	r0, r5, #2
   13ef0:	f7ec fc22 	bl	738 <memcmp>
	    (pdu_adv->len == sizeof(struct pdu_adv_scan_req)) &&
   13ef4:	2800      	cmp	r0, #0
   13ef6:	d1cb      	bne.n	13e90 <isr+0x260>
		_radio.state = STATE_CLOSE;
   13ef8:	2303      	movs	r3, #3
   13efa:	7523      	strb	r3, [r4, #20]
		radio_switch_complete_and_disable();
   13efc:	f004 fdb8 	bl	18a70 <radio_switch_complete_and_disable>
		radio_pkt_tx_set(&_radio.advertiser.scan_data.data
   13f00:	f894 0636 	ldrb.w	r0, [r4, #1590]	; 0x636
   13f04:	eb00 2000 	add.w	r0, r0, r0, lsl #8
   13f08:	f200 4034 	addw	r0, r0, #1076	; 0x434
   13f0c:	4420      	add	r0, r4
   13f0e:	f004 fd11 	bl	18934 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   13f12:	f004 fd5b 	bl	189cc <radio_is_ready>
   13f16:	2800      	cmp	r0, #0
   13f18:	f43f af34 	beq.w	13d84 <isr+0x154>
   13f1c:	4b08      	ldr	r3, [pc, #32]	; (13f40 <isr+0x310>)
   13f1e:	9301      	str	r3, [sp, #4]
   13f20:	9300      	str	r3, [sp, #0]
   13f22:	4b0d      	ldr	r3, [pc, #52]	; (13f58 <isr+0x328>)
   13f24:	e6e2      	b.n	13cec <isr+0xbc>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
   13f26:	f1b8 0f00 	cmp.w	r8, #0
   13f2a:	d1d5      	bne.n	13ed8 <isr+0x2a8>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   13f2c:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
   13f30:	f003 fc9e 	bl	17870 <ctrl_irk_whitelisted>
   13f34:	2800      	cmp	r0, #0
   13f36:	d1cf      	bne.n	13ed8 <isr+0x2a8>
   13f38:	e7aa      	b.n	13e90 <isr+0x260>
   13f3a:	bf00      	nop
   13f3c:	20000bf0 	.word	0x20000bf0
   13f40:	00023dbe 	.word	0x00023dbe
   13f44:	000259f0 	.word	0x000259f0
   13f48:	00022d86 	.word	0x00022d86
   13f4c:	000272e8 	.word	0x000272e8
   13f50:	0002620a 	.word	0x0002620a
   13f54:	00023fb5 	.word	0x00023fb5
   13f58:	00025a03 	.word	0x00025a03
		       isr_adv_ci_adva_check(adv, ci) &&
   13f5c:	4631      	mov	r1, r6
   13f5e:	4628      	mov	r0, r5
   13f60:	f7fb fbfe 	bl	f760 <isr_adv_ci_adva_check>
					    rl_idx) &&
   13f64:	2800      	cmp	r0, #0
   13f66:	d0ab      	beq.n	13ec0 <isr+0x290>
		       isr_adv_ci_tgta_check(adv, ci, *rl_idx);
   13f68:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (rl_idx != FILTER_IDX_NONE) {
   13f6c:	2bff      	cmp	r3, #255	; 0xff
   13f6e:	f000 80db 	beq.w	14128 <isr+0x4f8>
		return rl_idx == _radio.advertiser.rl_idx;
   13f72:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
   13f76:	1ac1      	subs	r1, r0, r3
   13f78:	4248      	negs	r0, r1
   13f7a:	4148      	adcs	r0, r1
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   13f7c:	f000 0001 	and.w	r0, r0, #1
		   (pdu_adv->len == sizeof(struct pdu_adv_connect_ind)) &&
   13f80:	2800      	cmp	r0, #0
   13f82:	f43f af51 	beq.w	13e28 <isr+0x1f8>
		   isr_adv_ci_check(_pdu_adv, pdu_adv, devmatch_ok, &rl_idx) &&
   13f86:	f894 378a 	ldrb.w	r3, [r4, #1930]	; 0x78a
   13f8a:	b133      	cbz	r3, 13f9a <isr+0x36a>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
   13f8c:	f894 3788 	ldrb.w	r3, [r4, #1928]	; 0x788
   13f90:	f894 2789 	ldrb.w	r2, [r4, #1929]	; 0x789
   13f94:	429a      	cmp	r2, r3
   13f96:	f47f af47 	bne.w	13e28 <isr+0x1f8>
   13f9a:	f8d4 3638 	ldr.w	r3, [r4, #1592]	; 0x638
   13f9e:	2b00      	cmp	r3, #0
   13fa0:	f43f af42 	beq.w	13e28 <isr+0x1f8>
			node_rx = packet_rx_reserve_get(4);
   13fa4:	2004      	movs	r0, #4
   13fa6:	f7fa fb25 	bl	e5f4 <packet_rx_reserve_get>
		if (!node_rx) {
   13faa:	4607      	mov	r7, r0
   13fac:	2800      	cmp	r0, #0
   13fae:	f43f af3b 	beq.w	13e28 <isr+0x1f8>
		_radio.state = STATE_STOP;
   13fb2:	f04f 0904 	mov.w	r9, #4
   13fb6:	f884 9014 	strb.w	r9, [r4, #20]
		radio_disable();
   13fba:	f004 fce9 	bl	18990 <radio_disable>
		conn = _radio.advertiser.conn;
   13fbe:	f8d4 5638 	ldr.w	r5, [r4, #1592]	; 0x638
		conn->handle = mem_index_get(conn, _radio.conn_pool,
   13fc2:	f8d4 1710 	ldr.w	r1, [r4, #1808]	; 0x710
		_radio.advertiser.conn = NULL;
   13fc6:	2300      	movs	r3, #0
		conn->handle = mem_index_get(conn, _radio.conn_pool,
   13fc8:	f44f 72aa 	mov.w	r2, #340	; 0x154
   13fcc:	4628      	mov	r0, r5
		_radio.advertiser.conn = NULL;
   13fce:	f8c4 3638 	str.w	r3, [r4, #1592]	; 0x638
		conn->handle = mem_index_get(conn, _radio.conn_pool,
   13fd2:	f7f7 fc40 	bl	b856 <mem_index_get>
		memcpy(&conn->access_addr[0],
   13fd6:	f105 0a10 	add.w	sl, r5, #16
		conn->handle = mem_index_get(conn, _radio.conn_pool,
   13fda:	8428      	strh	r0, [r5, #32]
		memcpy(&conn->crc_init[0],
   13fdc:	2203      	movs	r2, #3
   13fde:	f106 0112 	add.w	r1, r6, #18
   13fe2:	f105 0014 	add.w	r0, r5, #20
   13fe6:	f7ec fbd4 	bl	792 <memcpy>
		memcpy(&conn->data_chan_map[0],
   13fea:	f105 0817 	add.w	r8, r5, #23
		memcpy(&conn->access_addr[0],
   13fee:	464a      	mov	r2, r9
   13ff0:	f106 010e 	add.w	r1, r6, #14
   13ff4:	4650      	mov	r0, sl
   13ff6:	f7ec fbcc 	bl	792 <memcpy>
		memcpy(&conn->data_chan_map[0],
   13ffa:	2205      	movs	r2, #5
   13ffc:	f106 011e 	add.w	r1, r6, #30
   14000:	4640      	mov	r0, r8
   14002:	f7ec fbc6 	bl	792 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
   14006:	2105      	movs	r1, #5
   14008:	4640      	mov	r0, r8
   1400a:	f7f7 fd97 	bl	bb3c <util_ones_count_get>
		conn->data_chan_count =
   1400e:	7f6b      	ldrb	r3, [r5, #29]
   14010:	f360 0305 	bfi	r3, r0, #0, #6
   14014:	776b      	strb	r3, [r5, #29]
		conn->data_chan_hop = pdu_adv->connect_ind.hop;
   14016:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
   1401a:	f3c3 0304 	ubfx	r3, r3, #0, #5
   1401e:	77ab      	strb	r3, [r5, #30]
			pdu_adv->connect_ind.interval;
   14020:	8b33      	ldrh	r3, [r6, #24]
		conn->conn_interval =
   14022:	84ab      	strh	r3, [r5, #36]	; 0x24
			pdu_adv->connect_ind.interval * 1250;
   14024:	f240 48e2 	movw	r8, #1250	; 0x4e2
   14028:	fb08 f803 	mul.w	r8, r8, r3
		conn->latency = pdu_adv->connect_ind.latency;
   1402c:	7ef2      	ldrb	r2, [r6, #27]
   1402e:	7eb3      	ldrb	r3, [r6, #26]
   14030:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
   14034:	4651      	mov	r1, sl
   14036:	464a      	mov	r2, r9
		conn->latency = pdu_adv->connect_ind.latency;
   14038:	84eb      	strh	r3, [r5, #38]	; 0x26
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
   1403a:	f105 006c 	add.w	r0, r5, #108	; 0x6c
   1403e:	f7ec fba8 	bl	792 <memcpy>
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
   14042:	8bb3      	ldrh	r3, [r6, #28]
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   14044:	8ce9      	ldrh	r1, [r5, #38]	; 0x26
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
   14046:	f242 7210 	movw	r2, #10000	; 0x2710
   1404a:	fb02 8303 	mla	r3, r2, r3, r8
   1404e:	3b01      	subs	r3, #1
   14050:	fbb3 f3f8 	udiv	r3, r3, r8
   14054:	87eb      	strh	r3, [r5, #62]	; 0x3e
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
   14056:	4b54      	ldr	r3, [pc, #336]	; (141a8 <isr+0x578>)
   14058:	4443      	add	r3, r8
   1405a:	fbb3 f3f8 	udiv	r3, r3, r8
   1405e:	f8a5 3042 	strh.w	r3, [r5, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   14062:	4b52      	ldr	r3, [pc, #328]	; (141ac <isr+0x57c>)
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   14064:	1d88      	adds	r0, r1, #6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   14066:	4443      	add	r3, r8
   14068:	fbb3 f3f8 	udiv	r3, r3, r8
   1406c:	b29a      	uxth	r2, r3
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   1406e:	4282      	cmp	r2, r0
   14070:	4613      	mov	r3, r2
   14072:	bfc4      	itt	gt
   14074:	f5c1 437f 	rsbgt	r3, r1, #65280	; 0xff00
   14078:	33fa      	addgt	r3, #250	; 0xfa
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   1407a:	f8a5 204a 	strh.w	r2, [r5, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   1407e:	bfc4      	itt	gt
   14080:	18d2      	addgt	r2, r2, r3
   14082:	b292      	uxthgt	r2, r2
		node_rx->hdr.handle = conn->handle;
   14084:	8c2b      	ldrh	r3, [r5, #32]
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   14086:	f8a5 2046 	strh.w	r2, [r5, #70]	; 0x46
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
   1408a:	4631      	mov	r1, r6
		node_rx->hdr.handle = conn->handle;
   1408c:	80fb      	strh	r3, [r7, #6]
		radio_le_conn_cmplt->role = 0x01;
   1408e:	2201      	movs	r2, #1
		radio_le_conn_cmplt->status = 0x00;
   14090:	2300      	movs	r3, #0
   14092:	72fb      	strb	r3, [r7, #11]
		radio_le_conn_cmplt->role = 0x01;
   14094:	733a      	strb	r2, [r7, #12]
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
   14096:	f811 2b08 	ldrb.w	r2, [r1], #8
		radio_le_conn_cmplt->status = 0x00;
   1409a:	930c      	str	r3, [sp, #48]	; 0x30
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   1409c:	f04f 0906 	mov.w	r9, #6
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
   140a0:	f3c2 12c0 	ubfx	r2, r2, #7, #1
   140a4:	76ba      	strb	r2, [r7, #26]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   140a6:	f887 9004 	strb.w	r9, [r7, #4]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
   140aa:	464a      	mov	r2, r9
   140ac:	f107 001b 	add.w	r0, r7, #27
   140b0:	f7ec fb6f 	bl	792 <memcpy>
		if (rl_idx != FILTER_IDX_NONE) {
   140b4:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
   140b8:	f107 030e 	add.w	r3, r7, #14
   140bc:	28ff      	cmp	r0, #255	; 0xff
   140be:	930b      	str	r3, [sp, #44]	; 0x2c
   140c0:	f106 0a02 	add.w	sl, r6, #2
   140c4:	f107 0b14 	add.w	fp, r7, #20
   140c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   140ca:	d05f      	beq.n	1418c <isr+0x55c>
			ll_rl_id_addr_get(rl_idx,
   140cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   140ce:	f107 010d 	add.w	r1, r7, #13
   140d2:	f003 fd49 	bl	17b68 <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
   140d6:	7b7b      	ldrb	r3, [r7, #13]
   140d8:	3302      	adds	r3, #2
   140da:	737b      	strb	r3, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
   140dc:	464a      	mov	r2, r9
   140de:	4651      	mov	r1, sl
   140e0:	4658      	mov	r0, fp
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   140e2:	f7ec fb56 	bl	792 <memcpy>
			pdu_adv->connect_ind.interval;
   140e6:	8b33      	ldrh	r3, [r6, #24]
		radio_le_conn_cmplt->interval =
   140e8:	f8a7 3021 	strh.w	r3, [r7, #33]	; 0x21
			pdu_adv->connect_ind.latency;
   140ec:	8b73      	ldrh	r3, [r6, #26]
		radio_le_conn_cmplt->latency =
   140ee:	f8a7 3023 	strh.w	r3, [r7, #35]	; 0x23
			pdu_adv->connect_ind.timeout;
   140f2:	8bb3      	ldrh	r3, [r6, #28]
		radio_le_conn_cmplt->timeout =
   140f4:	f8a7 3025 	strh.w	r3, [r7, #37]	; 0x25
			pdu_adv->connect_ind.sca;
   140f8:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
   140fc:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
   14100:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		rx_fc_lock(conn->handle);
   14104:	8c28      	ldrh	r0, [r5, #32]
   14106:	f7fb fc3f 	bl	f988 <rx_fc_lock>
		packet_rx_enqueue();
   1410a:	f7fb fb4d 	bl	f7a8 <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
   1410e:	2003      	movs	r0, #3
   14110:	f7fa fa70 	bl	e5f4 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
   14114:	2800      	cmp	r0, #0
   14116:	d155      	bne.n	141c4 <isr+0x594>
   14118:	4b25      	ldr	r3, [pc, #148]	; (141b0 <isr+0x580>)
   1411a:	9301      	str	r3, [sp, #4]
   1411c:	9300      	str	r3, [sp, #0]
   1411e:	4b25      	ldr	r3, [pc, #148]	; (141b4 <isr+0x584>)
			LL_ASSERT(node_rx);
   14120:	4a25      	ldr	r2, [pc, #148]	; (141b8 <isr+0x588>)
   14122:	4926      	ldr	r1, [pc, #152]	; (141bc <isr+0x58c>)
   14124:	4826      	ldr	r0, [pc, #152]	; (141c0 <isr+0x590>)
   14126:	e131      	b.n	1438c <isr+0x75c>
	return (adv->rx_addr == ci->tx_addr) &&
   14128:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1412a:	5ce2      	ldrb	r2, [r4, r3]
   1412c:	7833      	ldrb	r3, [r6, #0]
   1412e:	f3c3 1380 	ubfx	r3, r3, #6, #1
   14132:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   14136:	f47f aec3 	bne.w	13ec0 <isr+0x290>
	       !memcmp(adv->direct_ind.tgt_addr, ci->connect_ind.init_addr,
   1413a:	2206      	movs	r2, #6
   1413c:	4639      	mov	r1, r7
   1413e:	f105 0008 	add.w	r0, r5, #8
   14142:	f7ec faf9 	bl	738 <memcmp>
	return (adv->rx_addr == ci->tx_addr) &&
   14146:	fab0 f080 	clz	r0, r0
   1414a:	0940      	lsrs	r0, r0, #5
   1414c:	e716      	b.n	13f7c <isr+0x34c>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
   1414e:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   14152:	079a      	lsls	r2, r3, #30
   14154:	d50d      	bpl.n	14172 <isr+0x542>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
   14156:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
				      rl_idx)) ||
   1415a:	079b      	lsls	r3, r3, #30
   1415c:	f57f aeb0 	bpl.w	13ec0 <isr+0x290>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
   14160:	f1b8 0f00 	cmp.w	r8, #0
   14164:	d10d      	bne.n	14182 <isr+0x552>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   14166:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
   1416a:	f003 fb81 	bl	17870 <ctrl_irk_whitelisted>
   1416e:	b940      	cbnz	r0, 14182 <isr+0x552>
   14170:	e6a6      	b.n	13ec0 <isr+0x290>
		 ctrl_rl_addr_allowed(ci->tx_addr, ci->connect_ind.init_addr,
   14172:	aa10      	add	r2, sp, #64	; 0x40
   14174:	1cb1      	adds	r1, r6, #2
   14176:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1417a:	f003 fd33 	bl	17be4 <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
   1417e:	2800      	cmp	r0, #0
   14180:	d0e9      	beq.n	14156 <isr+0x526>
	       isr_adv_ci_adva_check(adv, ci);
   14182:	4631      	mov	r1, r6
   14184:	4628      	mov	r0, r5
   14186:	f7fb faeb 	bl	f760 <isr_adv_ci_adva_check>
   1418a:	e6f7      	b.n	13f7c <isr+0x34c>
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
   1418c:	4619      	mov	r1, r3
   1418e:	464a      	mov	r2, r9
   14190:	4658      	mov	r0, fp
   14192:	f7ec fb2a 	bl	7ea <memset>
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
   14196:	7833      	ldrb	r3, [r6, #0]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   14198:	980b      	ldr	r0, [sp, #44]	; 0x2c
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
   1419a:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1419e:	737b      	strb	r3, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   141a0:	464a      	mov	r2, r9
   141a2:	4651      	mov	r1, sl
   141a4:	e79d      	b.n	140e2 <isr+0x4b2>
   141a6:	bf00      	nop
   141a8:	026259ff 	.word	0x026259ff
   141ac:	01c9c37f 	.word	0x01c9c37f
   141b0:	00023dbe 	.word	0x00023dbe
   141b4:	00025a03 	.word	0x00025a03
   141b8:	00022d86 	.word	0x00022d86
   141bc:	000272e8 	.word	0x000272e8
   141c0:	000265de 	.word	0x000265de
			node_rx->hdr.handle = conn->handle;
   141c4:	8c2b      	ldrh	r3, [r5, #32]
   141c6:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
   141c8:	230b      	movs	r3, #11
   141ca:	7103      	strb	r3, [r0, #4]
			if (pdu_adv->chan_sel) {
   141cc:	7833      	ldrb	r3, [r6, #0]
   141ce:	f013 0320 	ands.w	r3, r3, #32
   141d2:	d00e      	beq.n	141f2 <isr+0x5c2>
					((u16_t)conn->access_addr[1] << 8) |
   141d4:	7c6a      	ldrb	r2, [r5, #17]
					conn->access_addr[0];
   141d6:	7c2b      	ldrb	r3, [r5, #16]
					((u16_t)conn->access_addr[3] << 8) |
   141d8:	7ce9      	ldrb	r1, [r5, #19]
				u16_t aa_ls =
   141da:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
   141de:	7caa      	ldrb	r2, [r5, #18]
				u16_t aa_ms =
   141e0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
   141e4:	7f69      	ldrb	r1, [r5, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
   141e6:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
   141e8:	f041 0140 	orr.w	r1, r1, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
   141ec:	83eb      	strh	r3, [r5, #30]
				conn->data_chan_sel = 1;
   141ee:	7769      	strb	r1, [r5, #29]
				le_chan_sel_algo->chan_sel_algo = 0x01;
   141f0:	2301      	movs	r3, #1
				le_chan_sel_algo->chan_sel_algo = 0x00;
   141f2:	72c3      	strb	r3, [r0, #11]
			packet_rx_enqueue();
   141f4:	f7fb fad8 	bl	f7a8 <packet_rx_enqueue>
		conn->slave.sca = pdu_adv->connect_ind.sca;
   141f8:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
   141fc:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
			(((gc_lookup_ppm[_radio.sca] +
   14200:	497d      	ldr	r1, [pc, #500]	; (143f8 <isr+0x7c8>)
		conn->slave.sca = pdu_adv->connect_ind.sca;
   14202:	0952      	lsrs	r2, r2, #5
   14204:	f362 0384 	bfi	r3, r2, #2, #3
   14208:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
			(((gc_lookup_ppm[_radio.sca] +
   1420c:	f894 3728 	ldrb.w	r3, [r4, #1832]	; 0x728
			   gc_lookup_ppm[conn->slave.sca]) *
   14210:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
			(((gc_lookup_ppm[_radio.sca] +
   14214:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   14218:	4413      	add	r3, r2
			   gc_lookup_ppm[conn->slave.sca]) *
   1421a:	fb08 f303 	mul.w	r3, r8, r3
			  conn_interval_us) + (1000000 - 1)) / 1000000;
   1421e:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
   14222:	4a76      	ldr	r2, [pc, #472]	; (143fc <isr+0x7cc>)
   14224:	f203 233f 	addw	r3, r3, #575	; 0x23f
   14228:	fbb3 f3f2 	udiv	r3, r3, r2
		conn->slave.window_widening_periodic_us =
   1422c:	656b      	str	r3, [r5, #84]	; 0x54
			(conn_interval_us >> 1) - RADIO_TIFS;
   1422e:	ea4f 0358 	mov.w	r3, r8, lsr #1
   14232:	3b96      	subs	r3, #150	; 0x96
		conn->slave.window_widening_max_us =
   14234:	65ab      	str	r3, [r5, #88]	; 0x58
			pdu_adv->connect_ind.win_size * 1250;
   14236:	7d73      	ldrb	r3, [r6, #21]
   14238:	f240 49e2 	movw	r9, #1250	; 0x4e2
		conn->slave.window_size_prepare_us = 0;
   1423c:	2700      	movs	r7, #0
			pdu_adv->connect_ind.win_size * 1250;
   1423e:	fb09 f303 	mul.w	r3, r9, r3
		conn->slave.window_size_event_us =
   14242:	66ab      	str	r3, [r5, #104]	; 0x68
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
   14244:	4639      	mov	r1, r7
		conn->slave.window_size_prepare_us = 0;
   14246:	666f      	str	r7, [r5, #100]	; 0x64
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
   14248:	4638      	mov	r0, r7
   1424a:	f004 fb84 	bl	18956 <radio_rx_ready_delay_get>
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
   1424e:	496c      	ldr	r1, [pc, #432]	; (14400 <isr+0x7d0>)
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
   14250:	4683      	mov	fp, r0
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
   14252:	f200 4052 	addw	r0, r0, #1106	; 0x452
   14256:	a366      	add	r3, pc, #408	; (adr r3, 143f0 <isr+0x7c0>)
   14258:	e9d3 2300 	ldrd	r2, r3, [r3]
   1425c:	fba0 0101 	umull	r0, r1, r0, r1
   14260:	f7ec f81a 	bl	298 <__aeabi_uldivmod>
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
   14264:	f8d4 378c 	ldr.w	r3, [r4, #1932]	; 0x78c
   14268:	606b      	str	r3, [r5, #4]
		conn->hdr.ticks_xtal_to_start =
   1426a:	2227      	movs	r2, #39	; 0x27
		ticks_slot_offset =
   1426c:	4293      	cmp	r3, r2
   1426e:	bf38      	it	cc
   14270:	4613      	movcc	r3, r2
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
   14272:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticks_slot_offset =
   14276:	469a      	mov	sl, r3
		conn_interval_us -=
   14278:	6d6b      	ldr	r3, [r5, #84]	; 0x54
		conn->hdr.ticks_xtal_to_start =
   1427a:	602a      	str	r2, [r5, #0]
		conn->hdr.ticks_slot =
   1427c:	60e8      	str	r0, [r5, #12]
		conn->hdr.ticks_preempt_to_start =
   1427e:	60af      	str	r7, [r5, #8]
		conn_interval_us -=
   14280:	eba8 0803 	sub.w	r8, r8, r3
		conn_offset_us = radio_tmr_end_get();
   14284:	f004 fd58 	bl	18d38 <radio_tmr_end_get>
   14288:	900b      	str	r0, [sp, #44]	; 0x2c
			((u64_t)pdu_adv->connect_ind.win_offset +
   1428a:	8af0      	ldrh	r0, [r6, #22]
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
   1428c:	4639      	mov	r1, r7
		conn_offset_us +=
   1428e:	fb00 9909 	mla	r9, r0, r9, r9
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
   14292:	4638      	mov	r0, r7
   14294:	f004 fb5d 	bl	18952 <radio_tx_chain_delay_get>
   14298:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1429a:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
   1429e:	4499      	add	r9, r3
   142a0:	eba9 0900 	sub.w	r9, r9, r0
		conn_offset_us -= RADIO_TICKER_JITTER_US;
   142a4:	eba9 030b 	sub.w	r3, r9, fp
   142a8:	930b      	str	r3, [sp, #44]	; 0x2c
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   142aa:	f240 5323 	movw	r3, #1315	; 0x523
   142ae:	9300      	str	r3, [sp, #0]
   142b0:	2205      	movs	r2, #5
   142b2:	4b54      	ldr	r3, [pc, #336]	; (14404 <isr+0x7d4>)
   142b4:	f8df b148 	ldr.w	fp, [pc, #328]	; 14400 <isr+0x7d0>
   142b8:	4639      	mov	r1, r7
   142ba:	4638      	mov	r0, r7
   142bc:	f7f8 f9ba 	bl	c634 <ticker_stop>
		ticker_stop_adv_assert(ticker_status, (void *)__LINE__);
   142c0:	f240 5124 	movw	r1, #1316	; 0x524
   142c4:	f7fb fb98 	bl	f9f8 <ticker_stop_adv_assert>
		if (_pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   142c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   142ca:	5ce3      	ldrb	r3, [r4, r3]
   142cc:	f003 030f 	and.w	r3, r3, #15
   142d0:	2b01      	cmp	r3, #1
   142d2:	d106      	bne.n	142e2 <isr+0x6b2>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   142d4:	9700      	str	r7, [sp, #0]
   142d6:	463b      	mov	r3, r7
   142d8:	2203      	movs	r2, #3
   142da:	4639      	mov	r1, r7
   142dc:	4638      	mov	r0, r7
   142de:	f7f8 f9a9 	bl	c634 <ticker_stop>
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   142e2:	fba8 890b 	umull	r8, r9, r8, fp
   142e6:	a342      	add	r3, pc, #264	; (adr r3, 143f0 <isr+0x7c0>)
   142e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   142ec:	4640      	mov	r0, r8
   142ee:	4649      	mov	r1, r9
   142f0:	f7eb ffd2 	bl	298 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   142f4:	f895 3020 	ldrb.w	r3, [r5, #32]
   142f8:	68a4      	ldr	r4, [r4, #8]
   142fa:	9506      	str	r5, [sp, #24]
   142fc:	3307      	adds	r3, #7
   142fe:	b2db      	uxtb	r3, r3
   14300:	930a      	str	r3, [sp, #40]	; 0x28
   14302:	f240 533b 	movw	r3, #1339	; 0x53b
   14306:	9308      	str	r3, [sp, #32]
   14308:	4b3f      	ldr	r3, [pc, #252]	; (14408 <isr+0x7d8>)
   1430a:	9307      	str	r3, [sp, #28]
   1430c:	4b3f      	ldr	r3, [pc, #252]	; (1440c <isr+0x7dc>)
   1430e:	9305      	str	r3, [sp, #20]
   14310:	68eb      	ldr	r3, [r5, #12]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
   14312:	4a3f      	ldr	r2, [pc, #252]	; (14410 <isr+0x7e0>)
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   14314:	4453      	add	r3, sl
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   14316:	4606      	mov	r6, r0
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   14318:	9304      	str	r3, [sp, #16]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
   1431a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1431e:	2307      	movs	r3, #7
   14320:	2100      	movs	r1, #0
   14322:	4343      	muls	r3, r0
   14324:	fb02 3301 	mla	r3, r2, r1, r3
   14328:	fba0 1202 	umull	r1, r2, r0, r2
   1432c:	441a      	add	r2, r3
   1432e:	4608      	mov	r0, r1
   14330:	ebb8 0000 	subs.w	r0, r8, r0
   14334:	4611      	mov	r1, r2
   14336:	eb69 0101 	sbc.w	r1, r9, r1
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1433a:	2500      	movs	r5, #0
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
   1433c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   14340:	2300      	movs	r3, #0
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   14342:	9503      	str	r5, [sp, #12]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
   14344:	f7eb ffa8 	bl	298 <__aeabi_uldivmod>
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
   14348:	990b      	ldr	r1, [sp, #44]	; 0x2c
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1434a:	9002      	str	r0, [sp, #8]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
   1434c:	a328      	add	r3, pc, #160	; (adr r3, 143f0 <isr+0x7c0>)
   1434e:	e9d3 2300 	ldrd	r2, r3, [r3]
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   14352:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
   14356:	fba1 010b 	umull	r0, r1, r1, fp
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1435a:	9601      	str	r6, [sp, #4]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
   1435c:	f7eb ff9c 	bl	298 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   14360:	eba4 040a 	sub.w	r4, r4, sl
   14364:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   14368:	9000      	str	r0, [sp, #0]
   1436a:	4623      	mov	r3, r4
   1436c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1436e:	4629      	mov	r1, r5
   14370:	4628      	mov	r0, r5
   14372:	f7f8 f8c1 	bl	c4f8 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14376:	f030 0302 	bics.w	r3, r0, #2
   1437a:	f43f ad03 	beq.w	13d84 <isr+0x154>
   1437e:	4b25      	ldr	r3, [pc, #148]	; (14414 <isr+0x7e4>)
   14380:	9301      	str	r3, [sp, #4]
   14382:	9300      	str	r3, [sp, #0]
   14384:	4b24      	ldr	r3, [pc, #144]	; (14418 <isr+0x7e8>)
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14386:	4a25      	ldr	r2, [pc, #148]	; (1441c <isr+0x7ec>)
   14388:	4925      	ldr	r1, [pc, #148]	; (14420 <isr+0x7f0>)
   1438a:	4826      	ldr	r0, [pc, #152]	; (14424 <isr+0x7f4>)
		LL_ASSERT(0);
   1438c:	f7ed ff88 	bl	22a0 <printk>
   14390:	4040      	eors	r0, r0
   14392:	f380 8811 	msr	BASEPRI, r0
   14396:	f04f 0004 	mov.w	r0, #4
   1439a:	df02      	svc	2
		rl_idx = devmatch_ok ?
   1439c:	f1b8 0f00 	cmp.w	r8, #0
   143a0:	d01c      	beq.n	143dc <isr+0x7ac>
			 ctrl_rl_idx(!!(_radio.scanner.filter_policy & 0x01),
   143a2:	f894 064d 	ldrb.w	r0, [r4, #1613]	; 0x64d
		rl_idx = devmatch_ok ?
   143a6:	4649      	mov	r1, r9
   143a8:	f3c0 1000 	ubfx	r0, r0, #4, #1
   143ac:	f003 f9c6 	bl	1773c <ctrl_rl_idx>
   143b0:	4681      	mov	r9, r0
		if (crc_ok &&
   143b2:	b147      	cbz	r7, 143c6 <isr+0x796>
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
   143b4:	f894 364d 	ldrb.w	r3, [r4, #1613]	; 0x64d
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
   143b8:	06df      	lsls	r7, r3, #27
   143ba:	d535      	bpl.n	14428 <isr+0x7f8>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
   143bc:	f894 364d 	ldrb.w	r3, [r4, #1613]	; 0x64d
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
   143c0:	06de      	lsls	r6, r3, #27
   143c2:	f100 818e 	bmi.w	146e2 <isr+0xab2>
			_radio.state = STATE_CLOSE;
   143c6:	2303      	movs	r3, #3
   143c8:	7523      	strb	r3, [r4, #20]
			radio_disable();
   143ca:	f004 fae1 	bl	18990 <radio_disable>
			_radio.scanner.state = 0;
   143ce:	f894 364c 	ldrb.w	r3, [r4, #1612]	; 0x64c
   143d2:	f36f 0341 	bfc	r3, #1, #1
   143d6:	f884 364c 	strb.w	r3, [r4, #1612]	; 0x64c
   143da:	e4d3      	b.n	13d84 <isr+0x154>
		rl_idx = devmatch_ok ?
   143dc:	f1ba 0f00 	cmp.w	sl, #0
   143e0:	d003      	beq.n	143ea <isr+0x7ba>
   143e2:	4658      	mov	r0, fp
   143e4:	f003 f9fe 	bl	177e4 <ctrl_rl_irk_idx>
   143e8:	e7e2      	b.n	143b0 <isr+0x780>
   143ea:	f04f 09ff 	mov.w	r9, #255	; 0xff
   143ee:	e7e0      	b.n	143b2 <isr+0x782>
   143f0:	1afd498d 	.word	0x1afd498d
   143f4:	00000007 	.word	0x00000007
   143f8:	000261fa 	.word	0x000261fa
   143fc:	000f4240 	.word	0x000f4240
   14400:	3b9aca00 	.word	0x3b9aca00
   14404:	0000f9f9 	.word	0x0000f9f9
   14408:	0000f9bd 	.word	0x0000f9bd
   1440c:	00012515 	.word	0x00012515
   14410:	1afd498d 	.word	0x1afd498d
   14414:	00023dbe 	.word	0x00023dbe
   14418:	00025a03 	.word	0x00025a03
   1441c:	00022d86 	.word	0x00022d86
   14420:	000272e8 	.word	0x000272e8
   14424:	00025f28 	.word	0x00025f28
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
   14428:	f1b8 0f00 	cmp.w	r8, #0
   1442c:	d005      	beq.n	1443a <isr+0x80a>
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
   1442e:	4649      	mov	r1, r9
   14430:	4650      	mov	r0, sl
   14432:	f003 fb65 	bl	17b00 <ctrl_rl_idx_allowed>
   14436:	2800      	cmp	r0, #0
   14438:	d0c0      	beq.n	143bc <isr+0x78c>
	bool dir_report = false;
   1443a:	2300      	movs	r3, #0
   1443c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
   14440:	f894 2749 	ldrb.w	r2, [r4, #1865]	; 0x749
   14444:	f8d4 3744 	ldr.w	r3, [r4, #1860]	; 0x744
   14448:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
		if(pdu_adv_rx->type == 0x07){			//PDU_ADV_TYPE_EXT_IND
   1444c:	7a3b      	ldrb	r3, [r7, #8]
   1444e:	f003 030f 	and.w	r3, r3, #15
   14452:	2b07      	cmp	r3, #7
   14454:	d16c      	bne.n	14530 <isr+0x900>
		if(h->adv_addr){
   14456:	7afb      	ldrb	r3, [r7, #11]
   14458:	07d8      	lsls	r0, r3, #31
			ptr += BDADDR_SIZE;
   1445a:	bf4c      	ite	mi
   1445c:	f107 0612 	addmi.w	r6, r7, #18
		ptr = (u8_t *)h + sizeof(*h);
   14460:	f107 060c 	addpl.w	r6, r7, #12
		if(h->tgt_addr){
   14464:	079a      	lsls	r2, r3, #30
			ptr += BDADDR_SIZE;
   14466:	bf48      	it	mi
   14468:	3606      	addmi	r6, #6
		if(h->adi){
   1446a:	071b      	lsls	r3, r3, #28
		if(pdu_adv_rx->len == 0x12){
   1446c:	7a7b      	ldrb	r3, [r7, #9]
			ptr += sizeof(*adi_ptr);
   1446e:	bf48      	it	mi
   14470:	3602      	addmi	r6, #2
		if(pdu_adv_rx->len == 0x12){
   14472:	2b12      	cmp	r3, #18
   14474:	d11d      	bne.n	144b2 <isr+0x882>
			stop_time_int = k_cycle_get_32();
   14476:	f7ee fefd 	bl	3274 <_timer_cycle_get_32>
   1447a:	4ba1      	ldr	r3, [pc, #644]	; (14700 <isr+0xad0>)
   1447c:	6018      	str	r0, [r3, #0]
			event_time_int = (stop_time_int - start_time_int);
   1447e:	4ba1      	ldr	r3, [pc, #644]	; (14704 <isr+0xad4>)
   14480:	681b      	ldr	r3, [r3, #0]
   14482:	eba0 0e03 	sub.w	lr, r0, r3
   14486:	4ba0      	ldr	r3, [pc, #640]	; (14708 <isr+0xad8>)
   14488:	f8c3 e000 	str.w	lr, [r3]
			Time_difference_int = (SYS_CLOCK_HW_CYCLES_TO_NS(event_time_int))/1000;
   1448c:	4b9f      	ldr	r3, [pc, #636]	; (1470c <isr+0xadc>)
   1448e:	681a      	ldr	r2, [r3, #0]
   14490:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   14494:	fb82 2308 	smull	r2, r3, r2, r8
   14498:	fba2 010e 	umull	r0, r1, r2, lr
   1449c:	fb0e 1103 	mla	r1, lr, r3, r1
   144a0:	4b9b      	ldr	r3, [pc, #620]	; (14710 <isr+0xae0>)
   144a2:	681a      	ldr	r2, [r3, #0]
   144a4:	17d3      	asrs	r3, r2, #31
   144a6:	f7eb fef7 	bl	298 <__aeabi_uldivmod>
   144aa:	4b9a      	ldr	r3, [pc, #616]	; (14714 <isr+0xae4>)
   144ac:	fbb0 f0f8 	udiv	r0, r0, r8
   144b0:	6018      	str	r0, [r3, #0]
		if(h->aux_ptr && !aux_scan ){
   144b2:	7afb      	ldrb	r3, [r7, #11]
   144b4:	06d8      	lsls	r0, r3, #27
   144b6:	d53b      	bpl.n	14530 <isr+0x900>
   144b8:	4b97      	ldr	r3, [pc, #604]	; (14718 <isr+0xae8>)
   144ba:	781a      	ldrb	r2, [r3, #0]
   144bc:	2a00      	cmp	r2, #0
   144be:	d137      	bne.n	14530 <isr+0x900>
			aux_scan = 0x01;
   144c0:	2201      	movs	r2, #1
   144c2:	701a      	strb	r2, [r3, #0]
			_radio.ext_scanner.chan_index = ap->chan_idx;
   144c4:	7833      	ldrb	r3, [r6, #0]
   144c6:	f3c3 0305 	ubfx	r3, r3, #0, #6
   144ca:	f884 36b0 	strb.w	r3, [r4, #1712]	; 0x6b0
			_radio.ext_scanner.chan_off	= ap->offs;
   144ce:	78b3      	ldrb	r3, [r6, #2]
   144d0:	7870      	ldrb	r0, [r6, #1]
			_radio.ext_scanner.off_unit	= ap->offs_units;
   144d2:	7832      	ldrb	r2, [r6, #0]
			_radio.ext_scanner.chan_off	= ap->offs;
   144d4:	f003 031f 	and.w	r3, r3, #31
   144d8:	ea40 2e03 	orr.w	lr, r0, r3, lsl #8
			_radio.ext_scanner.off_unit	= ap->offs_units;
   144dc:	f3c2 12c0 	ubfx	r2, r2, #7, #1
			_radio.ext_scanner.chan_off	= ap->offs;
   144e0:	4b8e      	ldr	r3, [pc, #568]	; (1471c <isr+0xaec>)
			_radio.ext_scanner.off_unit	= ap->offs_units;
   144e2:	f884 26d4 	strb.w	r2, [r4, #1748]	; 0x6d4
			_radio.ext_scanner.chan_off	= ap->offs;
   144e6:	fa1f f08e 	uxth.w	r0, lr
			if(_radio.ext_scanner.off_unit == 0 ){
   144ea:	f012 0fff 	tst.w	r2, #255	; 0xff
			_radio.ext_scanner.chan_off	= ap->offs;
   144ee:	f04f 0100 	mov.w	r1, #0
   144f2:	e9c3 0100 	strd	r0, r1, [r3]
			_radio.ext_scanner.chan_off_debug = ap->offs;
   144f6:	e9c3 0102 	strd	r0, r1, [r3, #8]
				_radio.ext_scanner.chan_off *= 30;
   144fa:	bf0b      	itete	eq
   144fc:	221e      	moveq	r2, #30
				_radio.ext_scanner.chan_off *= 1200;//300;
   144fe:	f44f 6096 	movne.w	r0, #1200	; 0x4b0
				_radio.ext_scanner.chan_off *= 30;
   14502:	fbae 0102 	umulleq	r0, r1, lr, r2
				_radio.ext_scanner.chan_off *= 1200;//300;
   14506:	fbae 0100 	umullne	r0, r1, lr, r0
   1450a:	e9c3 0100 	strd	r0, r1, [r3]
			_radio.ext_scanner.chan_off_calculation = _radio.ext_scanner.chan_off;
   1450e:	e9d3 0100 	ldrd	r0, r1, [r3]
   14512:	4b83      	ldr	r3, [pc, #524]	; (14720 <isr+0xaf0>)
   14514:	e9c3 0100 	strd	r0, r1, [r3]
			start_time_ticker = k_cycle_get_32();
   14518:	f7ee feac 	bl	3274 <_timer_cycle_get_32>
   1451c:	4b81      	ldr	r3, [pc, #516]	; (14724 <isr+0xaf4>)
   1451e:	6018      	str	r0, [r3, #0]
			start_time_int = k_cycle_get_32();
   14520:	f7ee fea8 	bl	3274 <_timer_cycle_get_32>
   14524:	4b77      	ldr	r3, [pc, #476]	; (14704 <isr+0xad4>)
   14526:	6018      	str	r0, [r3, #0]
		_radio.ext_scanner.ticks_now = ticker_ticks_now_get();
   14528:	f7f8 f954 	bl	c7d4 <ticker_ticks_now_get>
   1452c:	f8c4 070c 	str.w	r0, [r4, #1804]	; 0x70c
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
   14530:	f8d4 3674 	ldr.w	r3, [r4, #1652]	; 0x674
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
   14534:	f107 0608 	add.w	r6, r7, #8
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
   14538:	2b00      	cmp	r3, #0
   1453a:	f000 8107 	beq.w	1474c <isr+0xb1c>
   1453e:	f894 378a 	ldrb.w	r3, [r4, #1930]	; 0x78a
   14542:	b133      	cbz	r3, 14552 <isr+0x922>
				      (_radio.fc_req == _radio.fc_ack)) &&
   14544:	f894 3788 	ldrb.w	r3, [r4, #1928]	; 0x788
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
   14548:	f894 2789 	ldrb.w	r2, [r4, #1929]	; 0x789
   1454c:	429a      	cmp	r2, r3
   1454e:	f040 80fd 	bne.w	1474c <isr+0xb1c>
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
   14552:	f894 364d 	ldrb.w	r3, [r4, #1613]	; 0x64d
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   14556:	f3c3 1000 	ubfx	r0, r3, #4, #1
   1455a:	2800      	cmp	r0, #0
   1455c:	f000 80ea 	beq.w	14734 <isr+0xb04>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
   14560:	7a38      	ldrb	r0, [r7, #8]
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   14562:	f010 000f 	ands.w	r0, r0, #15
   14566:	f040 816c 	bne.w	14842 <isr+0xc12>
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
   1456a:	f004 fbe5 	bl	18d38 <radio_tmr_end_get>
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
   1456e:	f8d4 3648 	ldr.w	r3, [r4, #1608]	; 0x648
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
   14572:	f200 2816 	addw	r8, r0, #534	; 0x216
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
   14576:	486c      	ldr	r0, [pc, #432]	; (14728 <isr+0xaf8>)
   14578:	2207      	movs	r2, #7
   1457a:	fba3 0100 	umull	r0, r1, r3, r0
   1457e:	fb02 1103 	mla	r1, r2, r3, r1
   14582:	a35d      	add	r3, pc, #372	; (adr r3, 146f8 <isr+0xac8>)
   14584:	e9d3 2300 	ldrd	r2, r3, [r3]
   14588:	f7eb fe86 	bl	298 <__aeabi_uldivmod>
   1458c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
	    isr_scan_init_check(pdu_adv_rx, rl_idx) &&
   14590:	4580      	cmp	r8, r0
   14592:	f080 80db 	bcs.w	1474c <isr+0xb1c>
			node_rx = packet_rx_reserve_get(4);
   14596:	2004      	movs	r0, #4
   14598:	f7fa f82c 	bl	e5f4 <packet_rx_reserve_get>
		if (node_rx == 0) {
   1459c:	4680      	mov	r8, r0
   1459e:	2800      	cmp	r0, #0
   145a0:	f43f af11 	beq.w	143c6 <isr+0x796>
		_radio.state = STATE_STOP;
   145a4:	2304      	movs	r3, #4
   145a6:	7523      	strb	r3, [r4, #20]
		_radio.scanner.conn = NULL;
   145a8:	2300      	movs	r3, #0
		conn = _radio.scanner.conn;
   145aa:	f8d4 6674 	ldr.w	r6, [r4, #1652]	; 0x674
		_radio.scanner.conn = NULL;
   145ae:	f8c4 3674 	str.w	r3, [r4, #1652]	; 0x674
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
   145b2:	f004 fa43 	bl	18a3c <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_IND;
   145b6:	7803      	ldrb	r3, [r0, #0]
			pdu_adv_tx->chan_sel = 1;
   145b8:	f003 03d0 	and.w	r3, r3, #208	; 0xd0
   145bc:	f043 0325 	orr.w	r3, r3, #37	; 0x25
   145c0:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
   145c2:	7a3b      	ldrb	r3, [r7, #8]
   145c4:	7802      	ldrb	r2, [r0, #0]
   145c6:	f3c3 1380 	ubfx	r3, r3, #6, #1
   145ca:	f363 12c7 	bfi	r2, r3, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_connect_ind);
   145ce:	2322      	movs	r3, #34	; 0x22
   145d0:	7043      	strb	r3, [r0, #1]
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
   145d2:	4605      	mov	r5, r0
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
   145d4:	7002      	strb	r2, [r0, #0]
		lrpa = ctrl_lrpa_get(rl_idx);
   145d6:	4648      	mov	r0, r9
   145d8:	f003 f892 	bl	17700 <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
   145dc:	f894 364e 	ldrb.w	r3, [r4, #1614]	; 0x64e
		lrpa = ctrl_lrpa_get(rl_idx);
   145e0:	4601      	mov	r1, r0
   145e2:	4628      	mov	r0, r5
		if (_radio.scanner.rpa_gen && lrpa) {
   145e4:	f013 0f01 	tst.w	r3, #1
   145e8:	f810 3b02 	ldrb.w	r3, [r0], #2
   145ec:	f000 8134 	beq.w	14858 <isr+0xc28>
   145f0:	2900      	cmp	r1, #0
   145f2:	f000 8131 	beq.w	14858 <isr+0xc28>
			pdu_adv_tx->tx_addr = 1;
   145f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   145fa:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
   145fc:	2206      	movs	r2, #6
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
   145fe:	f7ec f8c8 	bl	792 <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.adv_addr[0],
   14602:	f105 0308 	add.w	r3, r5, #8
   14606:	4618      	mov	r0, r3
   14608:	2206      	movs	r2, #6
   1460a:	f107 010a 	add.w	r1, r7, #10
   1460e:	930a      	str	r3, [sp, #40]	; 0x28
   14610:	f7ec f8bf 	bl	792 <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.
   14614:	2204      	movs	r2, #4
   14616:	f106 0110 	add.w	r1, r6, #16
   1461a:	f105 000e 	add.w	r0, r5, #14
   1461e:	f7ec f8b8 	bl	792 <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.crc_init[0],
   14622:	2203      	movs	r2, #3
   14624:	f106 0114 	add.w	r1, r6, #20
   14628:	f105 0012 	add.w	r0, r5, #18
   1462c:	f7ec f8b1 	bl	792 <memcpy>
		pdu_adv_tx->connect_ind.win_size = 1;
   14630:	2301      	movs	r3, #1
   14632:	756b      	strb	r3, [r5, #21]
			(u32_t)_radio.scanner.conn_interval * 1250;
   14634:	f8b4 3668 	ldrh.w	r3, [r4, #1640]	; 0x668
		conn_interval_us =
   14638:	f240 42e2 	movw	r2, #1250	; 0x4e2
   1463c:	4353      	muls	r3, r2
   1463e:	930b      	str	r3, [sp, #44]	; 0x2c
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
   14640:	f004 fb7a 	bl	18d38 <radio_tmr_end_get>
		if (!_radio.remainder_anchor ||
   14644:	68e2      	ldr	r2, [r4, #12]
		if (_radio.scanner.win_offset_us == 0) {
   14646:	f8d4 b678 	ldr.w	fp, [r4, #1656]	; 0x678
		if (!_radio.remainder_anchor ||
   1464a:	2a00      	cmp	r2, #0
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
   1464c:	f500 63db 	add.w	r3, r0, #1752	; 0x6d8
			conn_offset_us -= HAL_TICKER_TICKS_TO_US(1);
   14650:	bfd8      	it	le
   14652:	f200 63ba 	addwle	r3, r0, #1722	; 0x6ba
		if (_radio.scanner.win_offset_us == 0) {
   14656:	f1bb 0f00 	cmp.w	fp, #0
   1465a:	f040 8108 	bne.w	1486e <isr+0xc3e>
			pdu_adv_tx->connect_ind.win_offset = 0;
   1465e:	f885 b016 	strb.w	fp, [r5, #22]
   14662:	f885 b017 	strb.w	fp, [r5, #23]
   14666:	469b      	mov	fp, r3
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
   14668:	2100      	movs	r1, #0
   1466a:	4608      	mov	r0, r1
   1466c:	f004 f968 	bl	18940 <radio_tx_ready_delay_get>
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
   14670:	2100      	movs	r1, #0
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
   14672:	ebab 0b00 	sub.w	fp, fp, r0
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
   14676:	4608      	mov	r0, r1
   14678:	f004 f96b 	bl	18952 <radio_tx_chain_delay_get>
   1467c:	ebab 0000 	sub.w	r0, fp, r0
		conn_space_us += HAL_TICKER_TICKS_TO_US(1);
   14680:	f100 031e 	add.w	r3, r0, #30
   14684:	930c      	str	r3, [sp, #48]	; 0x30
		pdu_adv_tx->connect_ind.interval =
   14686:	f8b4 3668 	ldrh.w	r3, [r4, #1640]	; 0x668
   1468a:	832b      	strh	r3, [r5, #24]
		pdu_adv_tx->connect_ind.latency =
   1468c:	f8b4 366a 	ldrh.w	r3, [r4, #1642]	; 0x66a
   14690:	836b      	strh	r3, [r5, #26]
		pdu_adv_tx->connect_ind.timeout =
   14692:	f8b4 366c 	ldrh.w	r3, [r4, #1644]	; 0x66c
   14696:	83ab      	strh	r3, [r5, #28]
		memcpy(&pdu_adv_tx->connect_ind.chan_map[0],
   14698:	f106 0117 	add.w	r1, r6, #23
   1469c:	2205      	movs	r2, #5
   1469e:	f105 001e 	add.w	r0, r5, #30
   146a2:	f7ec f876 	bl	792 <memcpy>
		pdu_adv_tx->connect_ind.hop =
   146a6:	7fb2      	ldrb	r2, [r6, #30]
   146a8:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
   146ac:	f362 0304 	bfi	r3, r2, #0, #5
   146b0:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		pdu_adv_tx->connect_ind.sca = _radio.sca;
   146b4:	f894 2728 	ldrb.w	r2, [r4, #1832]	; 0x728
   146b8:	f362 1347 	bfi	r3, r2, #5, #3
   146bc:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		radio_switch_complete_and_disable();
   146c0:	f004 f9d6 	bl	18a70 <radio_switch_complete_and_disable>
		radio_pkt_tx_set(pdu_adv_tx);
   146c4:	4628      	mov	r0, r5
   146c6:	f004 f935 	bl	18934 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   146ca:	f004 f97f 	bl	189cc <radio_is_ready>
   146ce:	4683      	mov	fp, r0
   146d0:	2800      	cmp	r0, #0
   146d2:	f000 80dc 	beq.w	1488e <isr+0xc5e>
		LL_ASSERT(!radio_is_ready());
   146d6:	4b15      	ldr	r3, [pc, #84]	; (1472c <isr+0xafc>)
   146d8:	9301      	str	r3, [sp, #4]
   146da:	9300      	str	r3, [sp, #0]
   146dc:	4b14      	ldr	r3, [pc, #80]	; (14730 <isr+0xb00>)
   146de:	f7ff bb05 	b.w	13cec <isr+0xbc>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
   146e2:	f1b8 0f00 	cmp.w	r8, #0
   146e6:	f47f aea8 	bne.w	1443a <isr+0x80a>
		 (devmatch_ok || ctrl_irk_whitelisted(rl_idx)));
   146ea:	4648      	mov	r0, r9
   146ec:	f003 f8c0 	bl	17870 <ctrl_irk_whitelisted>
		if (crc_ok &&
   146f0:	2800      	cmp	r0, #0
   146f2:	f43f ae68 	beq.w	143c6 <isr+0x796>
   146f6:	e6a0      	b.n	1443a <isr+0x80a>
   146f8:	3b9aca00 	.word	0x3b9aca00
   146fc:	00000000 	.word	0x00000000
   14700:	20003298 	.word	0x20003298
   14704:	20003208 	.word	0x20003208
   14708:	200032c8 	.word	0x200032c8
   1470c:	2000a868 	.word	0x2000a868
   14710:	2000a864 	.word	0x2000a864
   14714:	200032ec 	.word	0x200032ec
   14718:	20001388 	.word	0x20001388
   1471c:	200012a8 	.word	0x200012a8
   14720:	200012b8 	.word	0x200012b8
   14724:	200032c0 	.word	0x200032c0
   14728:	1afd498d 	.word	0x1afd498d
   1472c:	00023dbe 	.word	0x00023dbe
   14730:	00025a21 	.word	0x00025a21
	if (rl_idx != FILTER_IDX_NONE) {
   14734:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   14738:	d072      	beq.n	14820 <isr+0xbf0>
		return (rl_idx == _radio.scanner.rl_idx);
   1473a:	f894 064f 	ldrb.w	r0, [r4, #1615]	; 0x64f
   1473e:	eba0 0209 	sub.w	r2, r0, r9
   14742:	4250      	negs	r0, r2
   14744:	4150      	adcs	r0, r2
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
   14746:	2800      	cmp	r0, #0
   14748:	f47f af0a 	bne.w	14560 <isr+0x930>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   1474c:	7a38      	ldrb	r0, [r7, #8]
   1474e:	f010 000f 	ands.w	r0, r0, #15
   14752:	d002      	beq.n	1475a <isr+0xb2a>
   14754:	2806      	cmp	r0, #6
   14756:	f040 81a6 	bne.w	14aa6 <isr+0xe76>
		 (_radio.scanner.type != 0) &&
   1475a:	f894 364d 	ldrb.w	r3, [r4, #1613]	; 0x64d
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
   1475e:	071b      	lsls	r3, r3, #28
   14760:	f140 818c 	bpl.w	14a7c <isr+0xe4c>
		 (_radio.scanner.type != 0) &&
   14764:	f8d4 2674 	ldr.w	r2, [r4, #1652]	; 0x674
   14768:	2a00      	cmp	r2, #0
   1476a:	f040 8187 	bne.w	14a7c <isr+0xe4c>
		err = isr_rx_scan_report(rssi_ready,
   1476e:	f1ba 0f00 	cmp.w	sl, #0
   14772:	bf14      	ite	ne
   14774:	4649      	movne	r1, r9
   14776:	21ff      	moveq	r1, #255	; 0xff
   14778:	4628      	mov	r0, r5
   1477a:	f7fb f8ad 	bl	f8d8 <isr_rx_scan_report>
		if (err) {
   1477e:	2800      	cmp	r0, #0
   14780:	f47f ae21 	bne.w	143c6 <isr+0x796>
		if(pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND){
   14784:	7a3b      	ldrb	r3, [r7, #8]
   14786:	f003 030f 	and.w	r3, r3, #15
   1478a:	2b07      	cmp	r3, #7
   1478c:	d101      	bne.n	14792 <isr+0xb62>
			pdu_adv_tx = (void *)radio_pkt_scratch_get();
   1478e:	f004 f955 	bl	18a3c <radio_pkt_scratch_get>
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
   14792:	f004 f953 	bl	18a3c <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
   14796:	7803      	ldrb	r3, [r0, #0]
   14798:	2203      	movs	r2, #3
   1479a:	f362 0303 	bfi	r3, r2, #0, #4
   1479e:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
   147a0:	7a3b      	ldrb	r3, [r7, #8]
   147a2:	7802      	ldrb	r2, [r0, #0]
   147a4:	f3c3 1380 	ubfx	r3, r3, #6, #1
   147a8:	f363 12c7 	bfi	r2, r3, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_scan_req);
   147ac:	230c      	movs	r3, #12
   147ae:	7043      	strb	r3, [r0, #1]
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
   147b0:	4605      	mov	r5, r0
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
   147b2:	7002      	strb	r2, [r0, #0]
		lrpa = ctrl_lrpa_get(rl_idx);
   147b4:	4648      	mov	r0, r9
   147b6:	f002 ffa3 	bl	17700 <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
   147ba:	f894 364e 	ldrb.w	r3, [r4, #1614]	; 0x64e
		lrpa = ctrl_lrpa_get(rl_idx);
   147be:	4601      	mov	r1, r0
   147c0:	4628      	mov	r0, r5
		if (_radio.scanner.rpa_gen && lrpa) {
   147c2:	f013 0f01 	tst.w	r3, #1
   147c6:	f810 3b02 	ldrb.w	r3, [r0], #2
   147ca:	f000 814e 	beq.w	14a6a <isr+0xe3a>
   147ce:	2900      	cmp	r1, #0
   147d0:	f000 814b 	beq.w	14a6a <isr+0xe3a>
			pdu_adv_tx->tx_addr = 1;
   147d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   147d8:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
   147da:	2206      	movs	r2, #6
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
   147dc:	f7eb ffd9 	bl	792 <memcpy>
		memcpy(&pdu_adv_tx->scan_req.adv_addr[0],
   147e0:	2206      	movs	r2, #6
   147e2:	f107 010a 	add.w	r1, r7, #10
   147e6:	f105 0008 	add.w	r0, r5, #8
   147ea:	f7eb ffd2 	bl	792 <memcpy>
		_radio.scanner.state = 1;
   147ee:	f894 364c 	ldrb.w	r3, [r4, #1612]	; 0x64c
   147f2:	f043 0302 	orr.w	r3, r3, #2
   147f6:	f884 364c 	strb.w	r3, [r4, #1612]	; 0x64c
		radio_tmr_tifs_set(RADIO_TIFS);
   147fa:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
   147fc:	2302      	movs	r3, #2
   147fe:	7523      	strb	r3, [r4, #20]
		radio_tmr_tifs_set(RADIO_TIFS);
   14800:	f004 f9be 	bl	18b80 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   14804:	2000      	movs	r0, #0
   14806:	f004 f91d 	bl	18a44 <radio_switch_complete_and_rx>
		radio_pkt_tx_set(pdu_adv_tx);
   1480a:	4628      	mov	r0, r5
   1480c:	f004 f892 	bl	18934 <radio_pkt_tx_set>
		radio_tmr_end_capture();
   14810:	f004 fa80 	bl	18d14 <radio_tmr_end_capture>
		LL_ASSERT(!radio_is_ready());
   14814:	f004 f8da 	bl	189cc <radio_is_ready>
   14818:	2800      	cmp	r0, #0
   1481a:	f43f aab3 	beq.w	13d84 <isr+0x154>
   1481e:	e75a      	b.n	146d6 <isr+0xaa6>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
   14820:	7a3a      	ldrb	r2, [r7, #8]
   14822:	f3c3 1380 	ubfx	r3, r3, #6, #1
   14826:	f3c2 1280 	ubfx	r2, r2, #6, #1
   1482a:	4293      	cmp	r3, r2
   1482c:	d18b      	bne.n	14746 <isr+0xb16>
		(memcmp(&_radio.scanner.adv_addr[0],
   1482e:	2206      	movs	r2, #6
   14830:	f107 010a 	add.w	r1, r7, #10
   14834:	48b8      	ldr	r0, [pc, #736]	; (14b18 <isr+0xee8>)
   14836:	f7eb ff7f 	bl	738 <memcmp>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
   1483a:	fab0 f080 	clz	r0, r0
   1483e:	0940      	lsrs	r0, r0, #5
   14840:	e781      	b.n	14746 <isr+0xb16>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
   14842:	2801      	cmp	r0, #1
   14844:	d186      	bne.n	14754 <isr+0xb24>
		  isr_scan_tgta_check(true, pdu, rl_idx, NULL)))));
   14846:	2300      	movs	r3, #0
   14848:	464a      	mov	r2, r9
   1484a:	4631      	mov	r1, r6
   1484c:	f7fa fff8 	bl	f840 <isr_scan_tgta_check>
				      (_radio.fc_req == _radio.fc_ack)) &&
   14850:	2800      	cmp	r0, #0
   14852:	f43f af7b 	beq.w	1474c <isr+0xb1c>
   14856:	e688      	b.n	1456a <isr+0x93a>
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
   14858:	f894 264d 	ldrb.w	r2, [r4, #1613]	; 0x64d
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
   1485c:	49af      	ldr	r1, [pc, #700]	; (14b1c <isr+0xeec>)
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
   1485e:	09d2      	lsrs	r2, r2, #7
   14860:	f362 1386 	bfi	r3, r2, #6, #1
   14864:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
   14866:	2206      	movs	r2, #6
   14868:	e6c9      	b.n	145fe <isr+0x9ce>
				conn_space_us += conn_interval_us;
   1486a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1486c:	4493      	add	fp, r2
			while ((conn_space_us & ((u32_t)1 << 31)) ||
   1486e:	f1bb 0f00 	cmp.w	fp, #0
   14872:	dbfa      	blt.n	1486a <isr+0xc3a>
   14874:	459b      	cmp	fp, r3
   14876:	d3f8      	bcc.n	1486a <isr+0xc3a>
				(conn_space_us - conn_offset_us) / 1250;
   14878:	ebab 0303 	sub.w	r3, fp, r3
			pdu_adv_tx->connect_ind.win_offset =
   1487c:	f240 42e2 	movw	r2, #1250	; 0x4e2
   14880:	fbb3 f3f2 	udiv	r3, r3, r2
   14884:	82eb      	strh	r3, [r5, #22]
			pdu_adv_tx->connect_ind.win_size++;
   14886:	7d6b      	ldrb	r3, [r5, #21]
   14888:	3301      	adds	r3, #1
   1488a:	756b      	strb	r3, [r5, #21]
   1488c:	e6ec      	b.n	14668 <isr+0xa38>
		conn->handle = mem_index_get(conn, _radio.conn_pool,
   1488e:	f44f 72aa 	mov.w	r2, #340	; 0x154
   14892:	f8d4 1710 	ldr.w	r1, [r4, #1808]	; 0x710
   14896:	4630      	mov	r0, r6
   14898:	f7f6 ffdd 	bl	b856 <mem_index_get>
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
   1489c:	4629      	mov	r1, r5
		conn->handle = mem_index_get(conn, _radio.conn_pool,
   1489e:	8430      	strh	r0, [r6, #32]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   148a0:	f04f 0306 	mov.w	r3, #6
		radio_le_conn_cmplt->status = 0x00;
   148a4:	f888 b00b 	strb.w	fp, [r8, #11]
		radio_le_conn_cmplt->role = 0x00;
   148a8:	f888 b00c 	strb.w	fp, [r8, #12]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   148ac:	f888 3004 	strb.w	r3, [r8, #4]
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
   148b0:	f811 3b02 	ldrb.w	r3, [r1], #2
		node_rx->hdr.handle = conn->handle;
   148b4:	f8a8 0006 	strh.w	r0, [r8, #6]
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
   148b8:	f3c3 1380 	ubfx	r3, r3, #6, #1
   148bc:	f888 301a 	strb.w	r3, [r8, #26]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
   148c0:	2206      	movs	r2, #6
   148c2:	f108 001b 	add.w	r0, r8, #27
   148c6:	f7eb ff64 	bl	792 <memcpy>
   148ca:	f108 0b0e 	add.w	fp, r8, #14
   148ce:	f108 0314 	add.w	r3, r8, #20
		if (irkmatch_ok && rl_idx != FILTER_IDX_NONE) {
   148d2:	f1ba 0f00 	cmp.w	sl, #0
   148d6:	d035      	beq.n	14944 <isr+0xd14>
   148d8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   148dc:	d032      	beq.n	14944 <isr+0xd14>
			ll_rl_id_addr_get(rl_idx,
   148de:	465a      	mov	r2, fp
   148e0:	f108 010d 	add.w	r1, r8, #13
   148e4:	4648      	mov	r0, r9
   148e6:	930d      	str	r3, [sp, #52]	; 0x34
   148e8:	f003 f93e 	bl	17b68 <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
   148ec:	f898 200d 	ldrb.w	r2, [r8, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
   148f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   148f2:	990a      	ldr	r1, [sp, #40]	; 0x28
			radio_le_conn_cmplt->peer_addr_type += 2;
   148f4:	3202      	adds	r2, #2
   148f6:	f888 200d 	strb.w	r2, [r8, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
   148fa:	4618      	mov	r0, r3
   148fc:	2206      	movs	r2, #6
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   148fe:	f7eb ff48 	bl	792 <memcpy>
		radio_le_conn_cmplt->interval = _radio.scanner.conn_interval;
   14902:	f8b4 3668 	ldrh.w	r3, [r4, #1640]	; 0x668
   14906:	f8a8 3021 	strh.w	r3, [r8, #33]	; 0x21
		radio_le_conn_cmplt->latency = _radio.scanner.conn_latency;
   1490a:	f8b4 366a 	ldrh.w	r3, [r4, #1642]	; 0x66a
   1490e:	f8a8 3023 	strh.w	r3, [r8, #35]	; 0x23
		radio_le_conn_cmplt->timeout = _radio.scanner.conn_timeout;
   14912:	f8b4 366c 	ldrh.w	r3, [r4, #1644]	; 0x66c
   14916:	f8a8 3025 	strh.w	r3, [r8, #37]	; 0x25
			pdu_adv_tx->connect_ind.sca;
   1491a:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
   1491e:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
   14922:	f888 3027 	strb.w	r3, [r8, #39]	; 0x27
		rx_fc_lock(conn->handle);
   14926:	8c30      	ldrh	r0, [r6, #32]
   14928:	f7fb f82e 	bl	f988 <rx_fc_lock>
		packet_rx_enqueue();
   1492c:	f7fa ff3c 	bl	f7a8 <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
   14930:	2003      	movs	r0, #3
   14932:	f7f9 fe5f 	bl	e5f4 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
   14936:	b998      	cbnz	r0, 14960 <isr+0xd30>
   14938:	4b79      	ldr	r3, [pc, #484]	; (14b20 <isr+0xef0>)
   1493a:	9301      	str	r3, [sp, #4]
   1493c:	9300      	str	r3, [sp, #0]
   1493e:	4b79      	ldr	r3, [pc, #484]	; (14b24 <isr+0xef4>)
   14940:	f7ff bbee 	b.w	14120 <isr+0x4f0>
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
   14944:	2206      	movs	r2, #6
   14946:	2100      	movs	r1, #0
   14948:	4618      	mov	r0, r3
   1494a:	f7eb ff4e 	bl	7ea <memset>
				pdu_adv_tx->rx_addr;
   1494e:	782b      	ldrb	r3, [r5, #0]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   14950:	990a      	ldr	r1, [sp, #40]	; 0x28
				pdu_adv_tx->rx_addr;
   14952:	f3c3 13c0 	ubfx	r3, r3, #7, #1
			radio_le_conn_cmplt->peer_addr_type =
   14956:	f888 300d 	strb.w	r3, [r8, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   1495a:	2206      	movs	r2, #6
   1495c:	4658      	mov	r0, fp
   1495e:	e7ce      	b.n	148fe <isr+0xcce>
			node_rx->hdr.handle = conn->handle;
   14960:	8c33      	ldrh	r3, [r6, #32]
   14962:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
   14964:	230b      	movs	r3, #11
   14966:	7103      	strb	r3, [r0, #4]
			if (pdu_adv_rx->chan_sel) {
   14968:	7a3b      	ldrb	r3, [r7, #8]
   1496a:	f013 0320 	ands.w	r3, r3, #32
   1496e:	d00e      	beq.n	1498e <isr+0xd5e>
					((u16_t)conn->access_addr[1] << 8) |
   14970:	7c72      	ldrb	r2, [r6, #17]
					conn->access_addr[0];
   14972:	7c33      	ldrb	r3, [r6, #16]
					((u16_t)conn->access_addr[3] << 8) |
   14974:	7cf1      	ldrb	r1, [r6, #19]
				u16_t aa_ls =
   14976:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
   1497a:	7cb2      	ldrb	r2, [r6, #18]
				u16_t aa_ms =
   1497c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
   14980:	7f71      	ldrb	r1, [r6, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
   14982:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
   14984:	f041 0140 	orr.w	r1, r1, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
   14988:	83f3      	strh	r3, [r6, #30]
				conn->data_chan_sel = 1;
   1498a:	7771      	strb	r1, [r6, #29]
				le_chan_sel_algo->chan_sel_algo = 0x01;
   1498c:	2301      	movs	r3, #1
				le_chan_sel_algo->chan_sel_algo = 0x00;
   1498e:	72c3      	strb	r3, [r0, #11]
			packet_rx_enqueue();
   14990:	f7fa ff0a 	bl	f7a8 <packet_rx_enqueue>
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
   14994:	2327      	movs	r3, #39	; 0x27
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
   14996:	f8d4 778c 	ldr.w	r7, [r4, #1932]	; 0x78c
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
   1499a:	6033      	str	r3, [r6, #0]
		conn->hdr.ticks_slot = _radio.scanner.ticks_conn_slot;
   1499c:	f8d4 3670 	ldr.w	r3, [r4, #1648]	; 0x670
   149a0:	60f3      	str	r3, [r6, #12]
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
   149a2:	2500      	movs	r5, #0
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   149a4:	f44f 63ee 	mov.w	r3, #1904	; 0x770
		ticks_slot_offset = (conn->hdr.ticks_active_to_start <
   149a8:	2f27      	cmp	r7, #39	; 0x27
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
   149aa:	6077      	str	r7, [r6, #4]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   149ac:	f04f 0206 	mov.w	r2, #6
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
   149b0:	60b5      	str	r5, [r6, #8]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   149b2:	4629      	mov	r1, r5
   149b4:	9300      	str	r3, [sp, #0]
   149b6:	4628      	mov	r0, r5
   149b8:	4b5b      	ldr	r3, [pc, #364]	; (14b28 <isr+0xef8>)
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   149ba:	f8df a178 	ldr.w	sl, [pc, #376]	; 14b34 <isr+0xf04>
		ticks_slot_offset = (conn->hdr.ticks_active_to_start <
   149be:	bf38      	it	cc
   149c0:	2727      	movcc	r7, #39	; 0x27
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   149c2:	f7f7 fe37 	bl	c634 <ticker_stop>
		ticker_stop_scan_assert(ticker_status, (void *)__LINE__);
   149c6:	f240 7171 	movw	r1, #1905	; 0x771
   149ca:	f7fb f849 	bl	fa60 <ticker_stop_scan_assert>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   149ce:	462b      	mov	r3, r5
   149d0:	2204      	movs	r2, #4
   149d2:	4629      	mov	r1, r5
   149d4:	9500      	str	r5, [sp, #0]
   149d6:	4628      	mov	r0, r5
   149d8:	f7f7 fe2c 	bl	c634 <ticker_stop>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   149dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   149de:	fba3 890a 	umull	r8, r9, r3, sl
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   149e2:	68a3      	ldr	r3, [r4, #8]
   149e4:	f896 4020 	ldrb.w	r4, [r6, #32]
		ticker_status =
   149e8:	9606      	str	r6, [sp, #24]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   149ea:	eba3 0b07 	sub.w	fp, r3, r7
		ticker_status =
   149ee:	f44f 63f1 	mov.w	r3, #1928	; 0x788
   149f2:	9308      	str	r3, [sp, #32]
   149f4:	4b4d      	ldr	r3, [pc, #308]	; (14b2c <isr+0xefc>)
   149f6:	9307      	str	r3, [sp, #28]
   149f8:	4b4d      	ldr	r3, [pc, #308]	; (14b30 <isr+0xf00>)
   149fa:	9305      	str	r3, [sp, #20]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   149fc:	68f3      	ldr	r3, [r6, #12]
		ticker_status =
   149fe:	9503      	str	r5, [sp, #12]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   14a00:	441f      	add	r7, r3
				     HAL_TICKER_REMAINDER(conn_interval_us),
   14a02:	4640      	mov	r0, r8
   14a04:	a342      	add	r3, pc, #264	; (adr r3, 14b10 <isr+0xee0>)
   14a06:	e9d3 2300 	ldrd	r2, r3, [r3]
   14a0a:	4649      	mov	r1, r9
		ticker_status =
   14a0c:	9704      	str	r7, [sp, #16]
				     HAL_TICKER_REMAINDER(conn_interval_us),
   14a0e:	f7eb fc43 	bl	298 <__aeabi_uldivmod>
   14a12:	4610      	mov	r0, r2
   14a14:	4619      	mov	r1, r3
   14a16:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   14a1a:	2300      	movs	r3, #0
   14a1c:	f7eb fc3c 	bl	298 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   14a20:	a33b      	add	r3, pc, #236	; (adr r3, 14b10 <isr+0xee0>)
   14a22:	e9d3 2300 	ldrd	r2, r3, [r3]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   14a26:	9002      	str	r0, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   14a28:	4649      	mov	r1, r9
   14a2a:	4640      	mov	r0, r8
   14a2c:	f7eb fc34 	bl	298 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
   14a30:	990c      	ldr	r1, [sp, #48]	; 0x30
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   14a32:	9001      	str	r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
   14a34:	a336      	add	r3, pc, #216	; (adr r3, 14b10 <isr+0xee0>)
   14a36:	e9d3 2300 	ldrd	r2, r3, [r3]
   14a3a:	fba1 010a 	umull	r0, r1, r1, sl
   14a3e:	f7eb fc2b 	bl	298 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   14a42:	3407      	adds	r4, #7
   14a44:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticker_status =
   14a48:	b2e4      	uxtb	r4, r4
   14a4a:	9000      	str	r0, [sp, #0]
   14a4c:	465b      	mov	r3, fp
   14a4e:	4622      	mov	r2, r4
   14a50:	4629      	mov	r1, r5
   14a52:	4628      	mov	r0, r5
   14a54:	f7f7 fd50 	bl	c4f8 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14a58:	f030 0302 	bics.w	r3, r0, #2
   14a5c:	f43f a992 	beq.w	13d84 <isr+0x154>
   14a60:	4b2f      	ldr	r3, [pc, #188]	; (14b20 <isr+0xef0>)
   14a62:	9301      	str	r3, [sp, #4]
   14a64:	9300      	str	r3, [sp, #0]
   14a66:	4b2f      	ldr	r3, [pc, #188]	; (14b24 <isr+0xef4>)
   14a68:	e48d      	b.n	14386 <isr+0x756>
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
   14a6a:	f894 264d 	ldrb.w	r2, [r4, #1613]	; 0x64d
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
   14a6e:	492b      	ldr	r1, [pc, #172]	; (14b1c <isr+0xeec>)
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
   14a70:	09d2      	lsrs	r2, r2, #7
   14a72:	f362 1386 	bfi	r3, r2, #6, #1
   14a76:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
   14a78:	2206      	movs	r2, #6
   14a7a:	e6af      	b.n	147dc <isr+0xbac>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   14a7c:	b998      	cbnz	r0, 14aa6 <isr+0xe76>
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
   14a7e:	7a7b      	ldrb	r3, [r7, #9]
   14a80:	2b00      	cmp	r3, #0
   14a82:	f43f aca0 	beq.w	143c6 <isr+0x796>
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
   14a86:	f8d4 3674 	ldr.w	r3, [r4, #1652]	; 0x674
   14a8a:	2b00      	cmp	r3, #0
   14a8c:	f47f ac9b 	bne.w	143c6 <isr+0x796>
		err = isr_rx_scan_report(rssi_ready,
   14a90:	f1ba 0f00 	cmp.w	sl, #0
   14a94:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   14a98:	bf14      	ite	ne
   14a9a:	4649      	movne	r1, r9
   14a9c:	21ff      	moveq	r1, #255	; 0xff
   14a9e:	4628      	mov	r0, r5
   14aa0:	f7fa ff1a 	bl	f8d8 <isr_rx_scan_report>
   14aa4:	e48f      	b.n	143c6 <isr+0x796>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   14aa6:	2801      	cmp	r0, #1
   14aa8:	d00d      	beq.n	14ac6 <isr+0xe96>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
   14aaa:	7a3b      	ldrb	r3, [r7, #8]
					&dir_report))) ||
   14aac:	f003 020b 	and.w	r2, r3, #11
   14ab0:	2a02      	cmp	r2, #2
   14ab2:	d0e4      	beq.n	14a7e <isr+0xe4e>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
   14ab4:	f003 030f 	and.w	r3, r3, #15
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND) ||
   14ab8:	2b07      	cmp	r3, #7
   14aba:	d10d      	bne.n	14ad8 <isr+0xea8>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
   14abc:	f894 364d 	ldrb.w	r3, [r4, #1613]	; 0x64d
   14ac0:	0758      	lsls	r0, r3, #29
   14ac2:	d1dc      	bne.n	14a7e <isr+0xe4e>
   14ac4:	e47f      	b.n	143c6 <isr+0x796>
		    isr_scan_tgta_check(false, pdu_adv_rx, rl_idx,
   14ac6:	ab10      	add	r3, sp, #64	; 0x40
   14ac8:	464a      	mov	r2, r9
   14aca:	4631      	mov	r1, r6
   14acc:	2000      	movs	r0, #0
   14ace:	f7fa feb7 	bl	f840 <isr_scan_tgta_check>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
   14ad2:	2800      	cmp	r0, #0
   14ad4:	d1d3      	bne.n	14a7e <isr+0xe4e>
   14ad6:	e7e8      	b.n	14aaa <isr+0xe7a>
		   (_radio.scanner.phy)) ||
   14ad8:	2b04      	cmp	r3, #4
   14ada:	f47f ac74 	bne.w	143c6 <isr+0x796>
		   (_radio.scanner.state != 0) &&
   14ade:	f894 364c 	ldrb.w	r3, [r4, #1612]	; 0x64c
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
   14ae2:	0799      	lsls	r1, r3, #30
   14ae4:	f57f ac6f 	bpl.w	143c6 <isr+0x796>
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
   14ae8:	f003 ffa8 	bl	18a3c <radio_pkt_scratch_get>
	return ((sreq->rx_addr == srsp->tx_addr) &&
   14aec:	7a3b      	ldrb	r3, [r7, #8]
   14aee:	7802      	ldrb	r2, [r0, #0]
   14af0:	f3c3 1380 	ubfx	r3, r3, #6, #1
   14af4:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   14af8:	f47f ac65 	bne.w	143c6 <isr+0x796>
		(memcmp(&sreq->scan_req.adv_addr[0],
   14afc:	2206      	movs	r2, #6
   14afe:	f107 010a 	add.w	r1, r7, #10
   14b02:	3008      	adds	r0, #8
   14b04:	f7eb fe18 	bl	738 <memcmp>
		   (_radio.scanner.state != 0) &&
   14b08:	2800      	cmp	r0, #0
   14b0a:	d0b8      	beq.n	14a7e <isr+0xe4e>
   14b0c:	e45b      	b.n	143c6 <isr+0x796>
   14b0e:	bf00      	nop
   14b10:	1afd498d 	.word	0x1afd498d
   14b14:	00000007 	.word	0x00000007
   14b18:	20001246 	.word	0x20001246
   14b1c:	20001240 	.word	0x20001240
   14b20:	00023dbe 	.word	0x00023dbe
   14b24:	00025a21 	.word	0x00025a21
   14b28:	0000fa61 	.word	0x0000fa61
   14b2c:	0000f9bd 	.word	0x0000f9bd
   14b30:	00012511 	.word	0x00012511
   14b34:	3b9aca00 	.word	0x3b9aca00
	_radio.packet_counter++;
   14b38:	f894 3720 	ldrb.w	r3, [r4, #1824]	; 0x720
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
   14b3c:	f894 2749 	ldrb.w	r2, [r4, #1865]	; 0x749
	_radio.packet_counter++;
   14b40:	3301      	adds	r3, #1
   14b42:	f884 3720 	strb.w	r3, [r4, #1824]	; 0x720
	u8_t rx_enqueue = 0;
   14b46:	2600      	movs	r6, #0
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
   14b48:	f8d4 3744 	ldr.w	r3, [r4, #1860]	; 0x744
	u8_t rx_enqueue = 0;
   14b4c:	f88d 603f 	strb.w	r6, [sp, #63]	; 0x3f
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
   14b50:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   14b54:	2301      	movs	r3, #1
   14b56:	f888 3004 	strb.w	r3, [r8, #4]
	if (crc_ok) {
   14b5a:	2f00      	cmp	r7, #0
   14b5c:	f000 82ba 	beq.w	150d4 <isr+0x14a4>
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
   14b60:	f8d4 571c 	ldr.w	r5, [r4, #1820]	; 0x71c
   14b64:	f898 1008 	ldrb.w	r1, [r8, #8]
   14b68:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   14b6c:	f3c1 0180 	ubfx	r1, r1, #2, #1
   14b70:	f003 0201 	and.w	r2, r3, #1
   14b74:	4291      	cmp	r1, r2
   14b76:	f000 8185 	beq.w	14e84 <isr+0x1254>
		_radio.conn_curr->sn++;
   14b7a:	f082 0201 	eor.w	r2, r2, #1
   14b7e:	f362 0300 	bfi	r3, r2, #0, #1
   14b82:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		if (_radio.role == ROLE_SLAVE) {
   14b86:	7ce3      	ldrb	r3, [r4, #19]
   14b88:	2b03      	cmp	r3, #3
			_radio.conn_curr->slave.latency_enabled = 1;
   14b8a:	bf02      	ittt	eq
   14b8c:	f895 3050 	ldrbeq.w	r3, [r5, #80]	; 0x50
   14b90:	f043 0301 	orreq.w	r3, r3, #1
   14b94:	f885 3050 	strbeq.w	r3, [r5, #80]	; 0x50
		if (_radio.conn_curr->empty == 0) {
   14b98:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   14b9c:	061a      	lsls	r2, r3, #24
   14b9e:	f100 816c 	bmi.w	14e7a <isr+0x124a>
			node_tx = _radio.conn_curr->pkt_tx_head;
   14ba2:	f8d5 613c 	ldr.w	r6, [r5, #316]	; 0x13c
				_radio.conn_curr->packet_tx_head_offset);
   14ba6:	f895 1151 	ldrb.w	r1, [r5, #337]	; 0x151
			pdu_data_tx = (void *)(node_tx->pdu_data +
   14baa:	1d30      	adds	r0, r6, #4
   14bac:	eb00 0a01 	add.w	sl, r0, r1
			pdu_data_tx_len = pdu_data_tx->len;
   14bb0:	f89a 9001 	ldrb.w	r9, [sl, #1]
			if (pdu_data_tx_len != 0) {
   14bb4:	f1b9 0f00 	cmp.w	r9, #0
   14bb8:	f000 8092 	beq.w	14ce0 <isr+0x10b0>
				if (_radio.conn_curr->enc_tx) {
   14bbc:	069b      	lsls	r3, r3, #26
   14bbe:	d50b      	bpl.n	14bd8 <isr+0xfa8>
					_radio.conn_curr->ccm_tx.counter++;
   14bc0:	f8d5 b12a 	ldr.w	fp, [r5, #298]	; 0x12a
   14bc4:	f8d5 c12e 	ldr.w	ip, [r5, #302]	; 0x12e
   14bc8:	f11b 0201 	adds.w	r2, fp, #1
   14bcc:	f14c 0300 	adc.w	r3, ip, #0
   14bd0:	f8c5 212a 	str.w	r2, [r5, #298]	; 0x12a
   14bd4:	f8c5 312e 	str.w	r3, [r5, #302]	; 0x12e
				if (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) {
   14bd8:	5c43      	ldrb	r3, [r0, r1]
   14bda:	f003 0303 	and.w	r3, r3, #3
   14bde:	2b03      	cmp	r3, #3
   14be0:	d17e      	bne.n	14ce0 <isr+0x10b0>
	switch (pdu_data_tx->llctrl.opcode) {
   14be2:	f89a 3003 	ldrb.w	r3, [sl, #3]
   14be6:	3b02      	subs	r3, #2
   14be8:	2b16      	cmp	r3, #22
   14bea:	d879      	bhi.n	14ce0 <isr+0x10b0>
   14bec:	e8df f013 	tbh	[pc, r3, lsl #1]
   14bf0:	005c0017 	.word	0x005c0017
   14bf4:	007800ae 	.word	0x007800ae
   14bf8:	00780078 	.word	0x00780078
   14bfc:	00780078 	.word	0x00780078
   14c00:	0085007a 	.word	0x0085007a
   14c04:	00b50078 	.word	0x00b50078
   14c08:	00780078 	.word	0x00780078
   14c0c:	00780078 	.word	0x00780078
   14c10:	00780078 	.word	0x00780078
   14c14:	007800bf 	.word	0x007800bf
   14c18:	00de00d7 	.word	0x00de00d7
   14c1c:	0109      	.short	0x0109
		_radio.state = STATE_CLOSE;
   14c1e:	2303      	movs	r3, #3
   14c20:	7523      	strb	r3, [r4, #20]
		radio_disable();
   14c22:	f003 feb5 	bl	18990 <radio_disable>
		LL_ASSERT(!radio_is_ready());
   14c26:	f003 fed1 	bl	189cc <radio_is_ready>
   14c2a:	b128      	cbz	r0, 14c38 <isr+0x1008>
   14c2c:	4bc6      	ldr	r3, [pc, #792]	; (14f48 <isr+0x1318>)
   14c2e:	9301      	str	r3, [sp, #4]
   14c30:	9300      	str	r3, [sp, #0]
   14c32:	4bc6      	ldr	r3, [pc, #792]	; (14f4c <isr+0x131c>)
   14c34:	f7ff b85a 	b.w	13cec <isr+0xbc>
		     (pdu_data_tx->llctrl.terminate_ind.error_code == 0x13) ?
   14c38:	f89a 1004 	ldrb.w	r1, [sl, #4]
		terminate_ind_rx_enqueue(_radio.conn_curr,
   14c3c:	f8d4 071c 	ldr.w	r0, [r4, #1820]	; 0x71c
   14c40:	2913      	cmp	r1, #19
   14c42:	bf08      	it	eq
   14c44:	2116      	moveq	r1, #22
   14c46:	f7fb fb4b 	bl	102e0 <terminate_ind_rx_enqueue>
		terminate = 1;
   14c4a:	2501      	movs	r5, #1
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
   14c4c:	f8d4 071c 	ldr.w	r0, [r4, #1820]	; 0x71c
   14c50:	f890 3151 	ldrb.w	r3, [r0, #337]	; 0x151
   14c54:	4499      	add	r9, r3
			if (_radio.conn_curr->packet_tx_head_offset ==
   14c56:	f890 3150 	ldrb.w	r3, [r0, #336]	; 0x150
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
   14c5a:	fa5f f989 	uxtb.w	r9, r9
			if (_radio.conn_curr->packet_tx_head_offset ==
   14c5e:	454b      	cmp	r3, r9
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
   14c60:	f880 9151 	strb.w	r9, [r0, #337]	; 0x151
			if (_radio.conn_curr->packet_tx_head_offset ==
   14c64:	d11e      	bne.n	14ca4 <isr+0x1074>
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
   14c66:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
   14c6a:	f8d0 1140 	ldr.w	r1, [r0, #320]	; 0x140
	conn->packet_tx_head_len = 0;
   14c6e:	2200      	movs	r2, #0
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
   14c70:	428b      	cmp	r3, r1
	conn->packet_tx_head_len = 0;
   14c72:	f880 2150 	strb.w	r2, [r0, #336]	; 0x150
	conn->packet_tx_head_offset = 0;
   14c76:	f880 2151 	strb.w	r2, [r0, #337]	; 0x151
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
   14c7a:	f040 80c9 	bne.w	14e10 <isr+0x11e0>
		if (node_tx) {
   14c7e:	b18e      	cbz	r6, 14ca4 <isr+0x1074>
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
   14c80:	f8d0 1144 	ldr.w	r1, [r0, #324]	; 0x144
			conn->pkt_tx_head = conn->pkt_tx_head->next;
   14c84:	f8d3 e000 	ldr.w	lr, [r3]
   14c88:	f8c0 e13c 	str.w	lr, [r0, #316]	; 0x13c
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
   14c8c:	428b      	cmp	r3, r1
				conn->pkt_tx_ctrl = NULL;
   14c8e:	bf06      	itte	eq
   14c90:	f8c0 2140 	streq.w	r2, [r0, #320]	; 0x140
				conn->pkt_tx_ctrl_last = NULL;
   14c94:	f8c0 2144 	streq.w	r2, [r0, #324]	; 0x144
				conn->pkt_tx_ctrl = conn->pkt_tx_head;
   14c98:	f8c0 e140 	strne.w	lr, [r0, #320]	; 0x140
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
   14c9c:	49ac      	ldr	r1, [pc, #688]	; (14f50 <isr+0x1320>)
   14c9e:	4630      	mov	r0, r6
   14ca0:	f7f6 fdbb 	bl	b81a <mem_release>
	struct radio_pdu_node_tx *tx_release = NULL;
   14ca4:	2600      	movs	r6, #0
   14ca6:	e0bc      	b.n	14e22 <isr+0x11f2>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
   14ca8:	2208      	movs	r2, #8
   14caa:	f10a 010e 	add.w	r1, sl, #14
   14cae:	f105 0094 	add.w	r0, r5, #148	; 0x94
   14cb2:	f7eb fd6e 	bl	792 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
   14cb6:	f8d4 071c 	ldr.w	r0, [r4, #1820]	; 0x71c
   14cba:	2204      	movs	r2, #4
   14cbc:	f10a 0116 	add.w	r1, sl, #22
   14cc0:	f500 7089 	add.w	r0, r0, #274	; 0x112
   14cc4:	f7eb fd65 	bl	792 <memcpy>
		_radio.conn_curr->pause_tx = 1;
   14cc8:	f8d4 371c 	ldr.w	r3, [r4, #1820]	; 0x71c
   14ccc:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   14cd0:	f042 0208 	orr.w	r2, r2, #8
   14cd4:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
   14cd8:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
   14cdc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	u8_t terminate = 0;
   14ce0:	2500      	movs	r5, #0
   14ce2:	e7b3      	b.n	14c4c <isr+0x101c>
		_radio.conn_curr->pause_tx = 1;
   14ce4:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->refresh = 1;
   14ce8:	f043 0348 	orr.w	r3, r3, #72	; 0x48
   14cec:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
   14cf0:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
		_radio.conn_curr->procedure_expire = 0;
   14cf4:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
   14cf8:	e7f2      	b.n	14ce0 <isr+0x10b0>
		if (_radio.role == ROLE_MASTER) {
   14cfa:	f894 a013 	ldrb.w	sl, [r4, #19]
   14cfe:	fa5f fa8a 	uxtb.w	sl, sl
   14d02:	f1ba 0f04 	cmp.w	sl, #4
   14d06:	d121      	bne.n	14d4c <isr+0x111c>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14d08:	7933      	ldrb	r3, [r6, #4]
   14d0a:	f043 0303 	orr.w	r3, r3, #3
   14d0e:	7133      	strb	r3, [r6, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
   14d10:	2317      	movs	r3, #23
   14d12:	7173      	strb	r3, [r6, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   14d14:	2303      	movs	r3, #3
   14d16:	71f3      	strb	r3, [r6, #7]
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0],
   14d18:	2208      	movs	r2, #8
   14d1a:	f105 017a 	add.w	r1, r5, #122	; 0x7a
   14d1e:	3004      	adds	r0, #4
   14d20:	f7eb fd37 	bl	792 <memcpy>
	pdu_ctrl_tx->llctrl.enc_req.ediv[0] =
   14d24:	f895 3082 	ldrb.w	r3, [r5, #130]	; 0x82
   14d28:	7433      	strb	r3, [r6, #16]
	pdu_ctrl_tx->llctrl.enc_req.ediv[1] =
   14d2a:	f895 3083 	ldrb.w	r3, [r5, #131]	; 0x83
   14d2e:	7473      	strb	r3, [r6, #17]
	entropy_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_req.skdm,
   14d30:	f106 0112 	add.w	r1, r6, #18
   14d34:	2208      	movs	r2, #8
   14d36:	6860      	ldr	r0, [r4, #4]
   14d38:	f7ee f9e0 	bl	30fc <entropy_get_entropy_isr>
	entropy_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_req.ivm,
   14d3c:	f106 011a 	add.w	r1, r6, #26
   14d40:	4652      	mov	r2, sl
   14d42:	6860      	ldr	r0, [r4, #4]
   14d44:	f7ee f9da 	bl	30fc <entropy_get_entropy_isr>
			*node_tx = NULL;
   14d48:	2600      	movs	r6, #0
   14d4a:	e7c9      	b.n	14ce0 <isr+0x10b0>
			_radio.conn_curr->pause_tx = 1;
   14d4c:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   14d50:	f043 0308 	orr.w	r3, r3, #8
   14d54:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
   14d58:	e7c2      	b.n	14ce0 <isr+0x10b0>
		_radio.conn_curr->pause_rx = 0;
   14d5a:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->pause_tx = 0;
   14d5e:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   14d62:	f36f 03c3 	bfc	r3, #3, #1
   14d66:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->procedure_expire = 0;
   14d6a:	2300      	movs	r3, #0
   14d6c:	e7c2      	b.n	14cf4 <isr+0x10c4>
		if ((_radio.conn_curr->llcp_length.req !=
   14d6e:	f895 20e8 	ldrb.w	r2, [r5, #232]	; 0xe8
   14d72:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   14d76:	429a      	cmp	r2, r3
   14d78:	d0b2      	beq.n	14ce0 <isr+0x10b0>
		    (_radio.conn_curr->llcp_length.state ==
   14d7a:	f895 30ea 	ldrb.w	r3, [r5, #234]	; 0xea
		     _radio.conn_curr->llcp_length.ack) &&
   14d7e:	f003 0203 	and.w	r2, r3, #3
   14d82:	2a01      	cmp	r2, #1
   14d84:	d1ac      	bne.n	14ce0 <isr+0x10b0>
			_radio.conn_curr->pause_tx = 1;
   14d86:	f895 20f8 	ldrb.w	r2, [r5, #248]	; 0xf8
   14d8a:	f042 0208 	orr.w	r2, r2, #8
   14d8e:	f885 20f8 	strb.w	r2, [r5, #248]	; 0xf8
			_radio.conn_curr->llcp_length.state =
   14d92:	2202      	movs	r2, #2
   14d94:	f362 0301 	bfi	r3, r2, #0, #2
   14d98:	f885 30ea 	strb.w	r3, [r5, #234]	; 0xea
   14d9c:	e7a0      	b.n	14ce0 <isr+0x10b0>
		_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   14d9e:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   14da2:	2202      	movs	r2, #2
   14da4:	f362 0301 	bfi	r3, r2, #0, #2
   14da8:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
		if (_radio.role == ROLE_SLAVE) {
   14dac:	7ce3      	ldrb	r3, [r4, #19]
   14dae:	2b03      	cmp	r3, #3
   14db0:	d196      	bne.n	14ce0 <isr+0x10b0>
	u8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
   14db2:	2301      	movs	r3, #1
   14db4:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   14db8:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
   14dbc:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   14dc0:	2202      	movs	r2, #2
   14dc2:	2304      	movs	r3, #4
   14dc4:	f88d 2042 	strb.w	r2, [sp, #66]	; 0x42
   14dc8:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
   14dcc:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
   14dd0:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
   14dd4:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	u8_t phys = conn->llcp_phy.tx | conn->phy_tx;
   14dd8:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   14ddc:	f895 20f6 	ldrb.w	r2, [r5, #246]	; 0xf6
   14de0:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   14de4:	ea43 0392 	orr.w	r3, r3, r2, lsr #2
	conn->phy_tx_time = phy_tx_time[phys];
   14de8:	f003 0307 	and.w	r3, r3, #7
   14dec:	aa12      	add	r2, sp, #72	; 0x48
   14dee:	4413      	add	r3, r2
   14df0:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
   14df4:	f813 3c08 	ldrb.w	r3, [r3, #-8]
		_radio.conn_curr->phy_tx_time =
   14df8:	f363 0202 	bfi	r2, r3, #0, #3
   14dfc:	f885 2039 	strb.w	r2, [r5, #57]	; 0x39
   14e00:	e76e      	b.n	14ce0 <isr+0x10b0>
			_radio.conn_curr->llcp.phy_upd_ind.tx;
   14e02:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
		_radio.conn_curr->phy_tx_time =
   14e06:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
   14e0a:	f3c3 0382 	ubfx	r3, r3, #2, #3
   14e0e:	e7f3      	b.n	14df8 <isr+0x11c8>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
   14e10:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
   14e14:	4293      	cmp	r3, r2
   14e16:	681b      	ldr	r3, [r3, #0]
			conn->pkt_tx_data = conn->pkt_tx_data->next;
   14e18:	bf08      	it	eq
   14e1a:	f8c0 3148 	streq.w	r3, [r0, #328]	; 0x148
		conn->pkt_tx_head = conn->pkt_tx_head->next;
   14e1e:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
	if (terminate) {
   14e22:	b37d      	cbz	r5, 14e84 <isr+0x1254>
		connection_release(_radio.conn_curr);
   14e24:	f8d4 071c 	ldr.w	r0, [r4, #1820]	; 0x71c
   14e28:	f7fb f850 	bl	fecc <connection_release>
		_radio.conn_curr = NULL;
   14e2c:	2300      	movs	r3, #0
   14e2e:	f8c4 371c 	str.w	r3, [r4, #1820]	; 0x71c
	if (!radio_tmr_aa_restore()) {
   14e32:	f003 ff63 	bl	18cfc <radio_tmr_aa_restore>
   14e36:	b918      	cbnz	r0, 14e40 <isr+0x1210>
		radio_tmr_aa_save(radio_tmr_aa_get());
   14e38:	f003 ff54 	bl	18ce4 <radio_tmr_aa_get>
   14e3c:	f003 ff58 	bl	18cf0 <radio_tmr_aa_save>
	if (!_radio.conn_curr) {
   14e40:	f8d4 371c 	ldr.w	r3, [r4, #1820]	; 0x71c
   14e44:	2b00      	cmp	r3, #0
   14e46:	f43e af9d 	beq.w	13d84 <isr+0x154>
	if (tx_release) {
   14e4a:	b11e      	cbz	r6, 14e54 <isr+0x1224>
		pdu_node_tx_release(_radio.conn_curr->handle, tx_release);
   14e4c:	4631      	mov	r1, r6
   14e4e:	8c18      	ldrh	r0, [r3, #32]
   14e50:	f7fa ffb2 	bl	fdb8 <pdu_node_tx_release>
	if (rx_enqueue) {
   14e54:	f89d 303f 	ldrb.w	r3, [sp, #63]	; 0x3f
   14e58:	2b00      	cmp	r3, #0
   14e5a:	f43e af93 	beq.w	13d84 <isr+0x154>
		rx_fc_lock(_radio.conn_curr->handle);
   14e5e:	f8d4 371c 	ldr.w	r3, [r4, #1820]	; 0x71c
   14e62:	8c18      	ldrh	r0, [r3, #32]
   14e64:	f7fa fd90 	bl	f988 <rx_fc_lock>
		node_rx->hdr.handle = _radio.conn_curr->handle;
   14e68:	f8d4 371c 	ldr.w	r3, [r4, #1820]	; 0x71c
   14e6c:	8c1b      	ldrh	r3, [r3, #32]
   14e6e:	f8a8 3006 	strh.w	r3, [r8, #6]
		packet_rx_enqueue();
   14e72:	f7fa fc99 	bl	f7a8 <packet_rx_enqueue>
   14e76:	f7fe bf85 	b.w	13d84 <isr+0x154>
			_radio.conn_curr->empty = 0;
   14e7a:	f36f 13c7 	bfc	r3, #7, #1
   14e7e:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
   14e82:	2600      	movs	r6, #0
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
   14e84:	f8d4 371c 	ldr.w	r3, [r4, #1820]	; 0x71c
   14e88:	f898 2008 	ldrb.w	r2, [r8, #8]
   14e8c:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
   14e90:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   14e94:	f3c3 0340 	ubfx	r3, r3, #1, #1
   14e98:	429a      	cmp	r2, r3
   14e9a:	f040 80eb 	bne.w	15074 <isr+0x1444>
	    (packet_rx_reserve_get(3) != 0) &&
   14e9e:	2003      	movs	r0, #3
   14ea0:	f7f9 fba8 	bl	e5f4 <packet_rx_reserve_get>
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
   14ea4:	2800      	cmp	r0, #0
   14ea6:	f000 80e5 	beq.w	15074 <isr+0x1444>
	    (packet_rx_reserve_get(3) != 0) &&
   14eaa:	f894 378a 	ldrb.w	r3, [r4, #1930]	; 0x78a
   14eae:	b393      	cbz	r3, 14f16 <isr+0x12e6>
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
   14eb0:	f8d4 3754 	ldr.w	r3, [r4, #1876]	; 0x754
   14eb4:	f8d4 2758 	ldr.w	r2, [r4, #1880]	; 0x758
	    ((_radio.fc_ena == 0) ||
   14eb8:	4293      	cmp	r3, r2
   14eba:	d105      	bne.n	14ec8 <isr+0x1298>
	      (_radio.fc_req == _radio.fc_ack)) ||
   14ebc:	f894 2788 	ldrb.w	r2, [r4, #1928]	; 0x788
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
   14ec0:	f894 1789 	ldrb.w	r1, [r4, #1929]	; 0x789
   14ec4:	4291      	cmp	r1, r2
   14ec6:	d026      	beq.n	14f16 <isr+0x12e6>
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
   14ec8:	f8d4 2758 	ldr.w	r2, [r4, #1880]	; 0x758
	      (_radio.fc_req == _radio.fc_ack)) ||
   14ecc:	4293      	cmp	r3, r2
   14ece:	f000 80d1 	beq.w	15074 <isr+0x1444>
	      (_radio.fc_req != _radio.fc_ack) &&
   14ed2:	f894 3788 	ldrb.w	r3, [r4, #1928]	; 0x788
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
   14ed6:	f894 2789 	ldrb.w	r2, [r4, #1929]	; 0x789
   14eda:	429a      	cmp	r2, r3
   14edc:	f000 80ca 	beq.w	15074 <isr+0x1444>
		(((_radio.fc_req == 0) &&
   14ee0:	f894 3788 	ldrb.w	r3, [r4, #1928]	; 0x788
	      (_radio.fc_req != _radio.fc_ack) &&
   14ee4:	b933      	cbnz	r3, 14ef4 <isr+0x12c4>
		   _radio.conn_curr->handle)) ||
   14ee6:	f8d4 371c 	ldr.w	r3, [r4, #1820]	; 0x71c
		(((_radio.fc_req == 0) &&
   14eea:	f8b4 2786 	ldrh.w	r2, [r4, #1926]	; 0x786
   14eee:	8c1b      	ldrh	r3, [r3, #32]
   14ef0:	429a      	cmp	r2, r3
   14ef2:	d010      	beq.n	14f16 <isr+0x12e6>
		 ((_radio.fc_req != 0) &&
   14ef4:	f894 3788 	ldrb.w	r3, [r4, #1928]	; 0x788
		   _radio.conn_curr->handle)) ||
   14ef8:	2b00      	cmp	r3, #0
   14efa:	f000 80bb 	beq.w	15074 <isr+0x1444>
		  (_radio.fc_handle[_radio.fc_req - 1] ==
   14efe:	f894 3788 	ldrb.w	r3, [r4, #1928]	; 0x788
		   _radio.conn_curr->handle)))))) {
   14f02:	f8d4 171c 	ldr.w	r1, [r4, #1820]	; 0x71c
		  (_radio.fc_handle[_radio.fc_req - 1] ==
   14f06:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		 ((_radio.fc_req != 0) &&
   14f0a:	f8b3 2780 	ldrh.w	r2, [r3, #1920]	; 0x780
   14f0e:	8c0b      	ldrh	r3, [r1, #32]
   14f10:	429a      	cmp	r2, r3
   14f12:	f040 80af 	bne.w	15074 <isr+0x1444>
		if (pdu_data_rx->len != 0) {
   14f16:	f898 5009 	ldrb.w	r5, [r8, #9]
   14f1a:	2d00      	cmp	r5, #0
   14f1c:	f000 80b3 	beq.w	15086 <isr+0x1456>
			if (_radio.conn_curr->enc_rx) {
   14f20:	f8d4 371c 	ldr.w	r3, [r4, #1820]	; 0x71c
   14f24:	f893 50f8 	ldrb.w	r5, [r3, #248]	; 0xf8
   14f28:	f015 0510 	ands.w	r5, r5, #16
   14f2c:	d01b      	beq.n	14f66 <isr+0x1336>
				done = radio_ccm_is_done();
   14f2e:	f003 ff8b 	bl	18e48 <radio_ccm_is_done>
				LL_ASSERT(done);
   14f32:	b9b8      	cbnz	r0, 14f64 <isr+0x1334>
   14f34:	4b04      	ldr	r3, [pc, #16]	; (14f48 <isr+0x1318>)
   14f36:	9301      	str	r3, [sp, #4]
   14f38:	9300      	str	r3, [sp, #0]
   14f3a:	4a06      	ldr	r2, [pc, #24]	; (14f54 <isr+0x1324>)
   14f3c:	4b06      	ldr	r3, [pc, #24]	; (14f58 <isr+0x1328>)
   14f3e:	4907      	ldr	r1, [pc, #28]	; (14f5c <isr+0x132c>)
   14f40:	4807      	ldr	r0, [pc, #28]	; (14f60 <isr+0x1330>)
   14f42:	f7ff ba23 	b.w	1438c <isr+0x75c>
   14f46:	bf00      	nop
   14f48:	00023dbe 	.word	0x00023dbe
   14f4c:	00025a2d 	.word	0x00025a2d
   14f50:	20001354 	.word	0x20001354
   14f54:	00022d86 	.word	0x00022d86
   14f58:	00025a91 	.word	0x00025a91
   14f5c:	000272e8 	.word	0x000272e8
   14f60:	00026248 	.word	0x00026248
				ccm_rx_increment = 1;
   14f64:	2501      	movs	r5, #1
			if ((_radio.conn_curr->enc_rx &&
   14f66:	f8d4 371c 	ldr.w	r3, [r4, #1820]	; 0x71c
   14f6a:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
   14f6e:	06d9      	lsls	r1, r3, #27
   14f70:	d42c      	bmi.n	14fcc <isr+0x139c>
			    (_radio.conn_curr->pause_rx &&
   14f72:	f8d4 071c 	ldr.w	r0, [r4, #1820]	; 0x71c
   14f76:	f898 3008 	ldrb.w	r3, [r8, #8]
   14f7a:	f890 20f8 	ldrb.w	r2, [r0, #248]	; 0xf8
			     !radio_ccm_mic_is_valid()) ||
   14f7e:	f012 0f04 	tst.w	r2, #4
   14f82:	d135      	bne.n	14ff0 <isr+0x13c0>
			_radio.conn_curr->appto_expire = 0;
   14f84:	2200      	movs	r2, #0
			switch (pdu_data_rx->ll_id) {
   14f86:	f013 0303 	ands.w	r3, r3, #3
			_radio.conn_curr->appto_expire = 0;
   14f8a:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
			_radio.conn_curr->apto_expire = 0;
   14f8e:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
			switch (pdu_data_rx->ll_id) {
   14f92:	d004      	beq.n	14f9e <isr+0x136e>
   14f94:	2b02      	cmp	r3, #2
   14f96:	d866      	bhi.n	15066 <isr+0x1436>
				*rx_enqueue = 1;
   14f98:	2301      	movs	r3, #1
   14f9a:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
			_radio.conn_curr->nesn++;
   14f9e:	f8d4 371c 	ldr.w	r3, [r4, #1820]	; 0x71c
   14fa2:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   14fa6:	f082 0202 	eor.w	r2, r2, #2
   14faa:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			if (ccm_rx_increment) {
   14fae:	2d00      	cmp	r5, #0
   14fb0:	d060      	beq.n	15074 <isr+0x1444>
				_radio.conn_curr->ccm_rx.counter++;
   14fb2:	f8d3 9109 	ldr.w	r9, [r3, #265]	; 0x109
   14fb6:	f8d3 a10d 	ldr.w	sl, [r3, #269]	; 0x10d
   14fba:	f119 0001 	adds.w	r0, r9, #1
   14fbe:	f14a 0100 	adc.w	r1, sl, #0
   14fc2:	f8c3 0109 	str.w	r0, [r3, #265]	; 0x109
   14fc6:	f8c3 110d 	str.w	r1, [r3, #269]	; 0x10d
   14fca:	e053      	b.n	15074 <isr+0x1444>
			     !radio_ccm_mic_is_valid()) ||
   14fcc:	f003 ff5a 	bl	18e84 <radio_ccm_mic_is_valid>
			if ((_radio.conn_curr->enc_rx &&
   14fd0:	2800      	cmp	r0, #0
   14fd2:	d1ce      	bne.n	14f72 <isr+0x1342>
				_radio.state = STATE_CLOSE;
   14fd4:	2303      	movs	r3, #3
   14fd6:	7523      	strb	r3, [r4, #20]
				radio_disable();
   14fd8:	f003 fcda 	bl	18990 <radio_disable>
				LL_ASSERT(!radio_is_ready());
   14fdc:	f003 fcf6 	bl	189cc <radio_is_ready>
   14fe0:	4605      	mov	r5, r0
   14fe2:	b3a0      	cbz	r0, 1504e <isr+0x141e>
   14fe4:	4bb7      	ldr	r3, [pc, #732]	; (152c4 <isr+0x1694>)
   14fe6:	9301      	str	r3, [sp, #4]
   14fe8:	9300      	str	r3, [sp, #0]
   14fea:	4bb7      	ldr	r3, [pc, #732]	; (152c8 <isr+0x1698>)
   14fec:	f7fe be7e 	b.w	13cec <isr+0xbc>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   14ff0:	f003 0103 	and.w	r1, r3, #3
   14ff4:	2903      	cmp	r1, #3
   14ff6:	d1ed      	bne.n	14fd4 <isr+0x13a4>
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
   14ff8:	f990 e01d 	ldrsb.w	lr, [r0, #29]
	u8_t opcode = pdu_data->llctrl.opcode;
   14ffc:	f898 100b 	ldrb.w	r1, [r8, #11]
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
   15000:	f1be 0f00 	cmp.w	lr, #0
   15004:	f002 0240 	and.w	r2, r2, #64	; 0x40
   15008:	db15      	blt.n	15036 <isr+0x1406>
	       (!conn->role &&
   1500a:	b922      	cbnz	r2, 15016 <isr+0x13e6>
		((!conn->refresh &&
   1500c:	2902      	cmp	r1, #2
   1500e:	d0b9      	beq.n	14f84 <isr+0x1354>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   15010:	2911      	cmp	r1, #17
   15012:	d8df      	bhi.n	14fd4 <isr+0x13a4>
   15014:	e009      	b.n	1502a <isr+0x13fa>
		 (conn->refresh &&
   15016:	1e8a      	subs	r2, r1, #2
   15018:	b2d2      	uxtb	r2, r2
   1501a:	2a09      	cmp	r2, #9
   1501c:	d8f8      	bhi.n	15010 <isr+0x13e0>
   1501e:	f240 2e05 	movw	lr, #517	; 0x205
   15022:	fa2e f202 	lsr.w	r2, lr, r2
   15026:	07d2      	lsls	r2, r2, #31
   15028:	d4ac      	bmi.n	14f84 <isr+0x1354>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   1502a:	4aa8      	ldr	r2, [pc, #672]	; (152cc <isr+0x169c>)
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   1502c:	fa22 f101 	lsr.w	r1, r2, r1
   15030:	07ca      	lsls	r2, r1, #31
   15032:	d5cf      	bpl.n	14fd4 <isr+0x13a4>
   15034:	e7a6      	b.n	14f84 <isr+0x1354>
	       (conn->role &&
   15036:	b92a      	cbnz	r2, 15044 <isr+0x1414>
		((!conn->refresh &&
   15038:	2902      	cmp	r1, #2
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   1503a:	d0a3      	beq.n	14f84 <isr+0x1354>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   1503c:	2911      	cmp	r1, #17
   1503e:	d8c9      	bhi.n	14fd4 <isr+0x13a4>
   15040:	4aa3      	ldr	r2, [pc, #652]	; (152d0 <isr+0x16a0>)
   15042:	e7f3      	b.n	1502c <isr+0x13fc>
		 (conn->refresh &&
   15044:	1e8a      	subs	r2, r1, #2
   15046:	2a01      	cmp	r2, #1
   15048:	d99c      	bls.n	14f84 <isr+0x1354>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   1504a:	290b      	cmp	r1, #11
   1504c:	e7f5      	b.n	1503a <isr+0x140a>
				terminate_ind_rx_enqueue(_radio.conn_curr,
   1504e:	213d      	movs	r1, #61	; 0x3d
   15050:	f8d4 071c 	ldr.w	r0, [r4, #1820]	; 0x71c
   15054:	f7fb f944 	bl	102e0 <terminate_ind_rx_enqueue>
				connection_release(_radio.conn_curr);
   15058:	f8d4 071c 	ldr.w	r0, [r4, #1820]	; 0x71c
   1505c:	f7fa ff36 	bl	fecc <connection_release>
				_radio.conn_curr = NULL;
   15060:	f8c4 571c 	str.w	r5, [r4, #1820]	; 0x71c
   15064:	e6e5      	b.n	14e32 <isr+0x1202>
				nack = isr_rx_conn_pkt_ctrl(node_rx,
   15066:	f10d 013f 	add.w	r1, sp, #63	; 0x3f
   1506a:	4640      	mov	r0, r8
   1506c:	f7fd fcbc 	bl	129e8 <isr_rx_conn_pkt_ctrl>
		if (!nack) {
   15070:	2800      	cmp	r0, #0
   15072:	d094      	beq.n	14f9e <isr+0x136e>
		_radio.conn_curr->supervision_expire = 0;
   15074:	f8d4 271c 	ldr.w	r2, [r4, #1820]	; 0x71c
		_radio.crc_expire = 0;
   15078:	2300      	movs	r3, #0
   1507a:	f884 3721 	strb.w	r3, [r4, #1825]	; 0x721
	u8_t crc_close = 0;
   1507e:	461d      	mov	r5, r3
		_radio.conn_curr->supervision_expire = 0;
   15080:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
   15084:	e03d      	b.n	15102 <isr+0x14d2>
		} else if ((_radio.conn_curr->enc_rx) ||
   15086:	f8d4 271c 	ldr.w	r2, [r4, #1820]	; 0x71c
   1508a:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   1508e:	f013 0f14 	tst.w	r3, #20
   15092:	d084      	beq.n	14f9e <isr+0x136e>
					    (conn->latency + 6)) ?
   15094:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
			appto_reload_new = (conn->apto_reload >
   15096:	f8b2 004a 	ldrh.w	r0, [r2, #74]	; 0x4a
					    (conn->latency + 6)) ?
   1509a:	1d8b      	adds	r3, r1, #6
			appto_reload_new = (conn->apto_reload >
   1509c:	4298      	cmp	r0, r3
   1509e:	bfc4      	itt	gt
   150a0:	1f83      	subgt	r3, r0, #6
   150a2:	1a5b      	subgt	r3, r3, r1
			if (conn->appto_reload != appto_reload_new) {
   150a4:	f8b2 1046 	ldrh.w	r1, [r2, #70]	; 0x46
			appto_reload_new = (conn->apto_reload >
   150a8:	bfcc      	ite	gt
   150aa:	b29b      	uxthgt	r3, r3
   150ac:	4603      	movle	r3, r0
			if (conn->appto_reload != appto_reload_new) {
   150ae:	4299      	cmp	r1, r3
				conn->appto_reload = appto_reload_new;
   150b0:	bf1e      	ittt	ne
   150b2:	f8a2 3046 	strhne.w	r3, [r2, #70]	; 0x46
				conn->apto_expire = 0;
   150b6:	2300      	movne	r3, #0
   150b8:	f8a2 304c 	strhne.w	r3, [r2, #76]	; 0x4c
			if (conn->apto_expire == 0) {
   150bc:	f8b2 304c 	ldrh.w	r3, [r2, #76]	; 0x4c
   150c0:	2b00      	cmp	r3, #0
   150c2:	f47f af6c 	bne.w	14f9e <isr+0x136e>
				conn->appto_expire = conn->appto_reload;
   150c6:	f8b2 3046 	ldrh.w	r3, [r2, #70]	; 0x46
   150ca:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
				conn->apto_expire = conn->apto_reload;
   150ce:	f8a2 004c 	strh.w	r0, [r2, #76]	; 0x4c
   150d2:	e764      	b.n	14f9e <isr+0x136e>
		if (_radio.crc_expire == 0) {
   150d4:	f894 3721 	ldrb.w	r3, [r4, #1825]	; 0x721
   150d8:	b913      	cbnz	r3, 150e0 <isr+0x14b0>
			_radio.crc_expire = 2;
   150da:	2302      	movs	r3, #2
   150dc:	f884 3721 	strb.w	r3, [r4, #1825]	; 0x721
		_radio.crc_expire--;
   150e0:	f894 3721 	ldrb.w	r3, [r4, #1825]	; 0x721
		if (!_radio.conn_curr->supervision_expire) {
   150e4:	f8d4 271c 	ldr.w	r2, [r4, #1820]	; 0x71c
		_radio.crc_expire--;
   150e8:	3b01      	subs	r3, #1
   150ea:	b2db      	uxtb	r3, r3
   150ec:	f884 3721 	strb.w	r3, [r4, #1825]	; 0x721
		if (!_radio.conn_curr->supervision_expire) {
   150f0:	f8b2 6040 	ldrh.w	r6, [r2, #64]	; 0x40
		crc_close = (_radio.crc_expire == 0);
   150f4:	fab3 f583 	clz	r5, r3
   150f8:	096d      	lsrs	r5, r5, #5
		if (!_radio.conn_curr->supervision_expire) {
   150fa:	bb86      	cbnz	r6, 1515e <isr+0x152e>
			_radio.conn_curr->supervision_expire =
   150fc:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
   150fe:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
   15102:	f8d4 071c 	ldr.w	r0, [r4, #1820]	; 0x71c
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
   15106:	a910      	add	r1, sp, #64	; 0x40
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
   15108:	f890 90f8 	ldrb.w	r9, [r0, #248]	; 0xf8
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
   1510c:	f7fd fb1a 	bl	12744 <prepare_pdu_data_tx>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   15110:	7d23      	ldrb	r3, [r4, #20]
   15112:	2b03      	cmp	r3, #3
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
   15114:	ea4f 19d9 	mov.w	r9, r9, lsr #7
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   15118:	d010      	beq.n	1513c <isr+0x150c>
   1511a:	bb15      	cbnz	r5, 15162 <isr+0x1532>
   1511c:	b137      	cbz	r7, 1512c <isr+0x14fc>
			((crc_ok) && (pdu_data_rx->md == 0) &&
   1511e:	f898 3008 	ldrb.w	r3, [r8, #8]
   15122:	06d8      	lsls	r0, r3, #27
   15124:	d402      	bmi.n	1512c <isr+0x14fc>
			 (pdu_data_tx->len == 0)) ||
   15126:	9b10      	ldr	r3, [sp, #64]	; 0x40
			((crc_ok) && (pdu_data_rx->md == 0) &&
   15128:	785b      	ldrb	r3, [r3, #1]
   1512a:	b1d3      	cbz	r3, 15162 <isr+0x1532>
			_radio.conn_curr->llcp_terminate.reason_peer) ?
   1512c:	f8d4 371c 	ldr.w	r3, [r4, #1820]	; 0x71c
			 (pdu_data_tx->len == 0)) ||
   15130:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   15134:	2b00      	cmp	r3, #0
   15136:	bf0c      	ite	eq
   15138:	2302      	moveq	r3, #2
   1513a:	2303      	movne	r3, #3
	if (_radio.state == STATE_CLOSE) {
   1513c:	2b03      	cmp	r3, #3
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   1513e:	7523      	strb	r3, [r4, #20]
	if (_radio.state == STATE_CLOSE) {
   15140:	d12d      	bne.n	1519e <isr+0x156e>
		if (_radio.role == ROLE_MASTER) {
   15142:	7ce3      	ldrb	r3, [r4, #19]
   15144:	2b04      	cmp	r3, #4
   15146:	d10e      	bne.n	15166 <isr+0x1536>
			_radio.conn_curr->empty = is_empty_pdu_tx_retry;
   15148:	f8d4 371c 	ldr.w	r3, [r4, #1820]	; 0x71c
   1514c:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   15150:	f369 12c7 	bfi	r2, r9, #7, #1
   15154:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			radio_disable();
   15158:	f003 fc1a 	bl	18990 <radio_disable>
   1515c:	e669      	b.n	14e32 <isr+0x1202>
	struct radio_pdu_node_tx *tx_release = NULL;
   1515e:	2600      	movs	r6, #0
   15160:	e7cf      	b.n	15102 <isr+0x14d2>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   15162:	2303      	movs	r3, #3
   15164:	e7ea      	b.n	1513c <isr+0x150c>
			radio_switch_complete_and_disable();
   15166:	f003 fc83 	bl	18a70 <radio_switch_complete_and_disable>
	pdu_data_tx->sn = _radio.conn_curr->sn;
   1516a:	9910      	ldr	r1, [sp, #64]	; 0x40
   1516c:	f8d4 071c 	ldr.w	r0, [r4, #1820]	; 0x71c
   15170:	780b      	ldrb	r3, [r1, #0]
   15172:	f890 20f8 	ldrb.w	r2, [r0, #248]	; 0xf8
   15176:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
   1517a:	f3c2 0240 	ubfx	r2, r2, #1, #1
   1517e:	f362 0382 	bfi	r3, r2, #2, #1
   15182:	700b      	strb	r3, [r1, #0]
	tx_packet_set(_radio.conn_curr, pdu_data_tx);
   15184:	f7f9 fdc0 	bl	ed08 <tx_packet_set>
	LL_ASSERT(!radio_is_ready());
   15188:	f003 fc20 	bl	189cc <radio_is_ready>
   1518c:	2800      	cmp	r0, #0
   1518e:	f43f ae50 	beq.w	14e32 <isr+0x1202>
   15192:	4b4c      	ldr	r3, [pc, #304]	; (152c4 <isr+0x1694>)
   15194:	9301      	str	r3, [sp, #4]
   15196:	9300      	str	r3, [sp, #0]
   15198:	4b4e      	ldr	r3, [pc, #312]	; (152d4 <isr+0x16a4>)
   1519a:	f7fe bda7 	b.w	13cec <isr+0xbc>
		radio_tmr_tifs_set(RADIO_TIFS);
   1519e:	2096      	movs	r0, #150	; 0x96
   151a0:	f003 fcee 	bl	18b80 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(_radio.conn_curr->phy_rx);
   151a4:	f8d4 371c 	ldr.w	r3, [r4, #1820]	; 0x71c
   151a8:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
   151ac:	f000 0007 	and.w	r0, r0, #7
   151b0:	f003 fc48 	bl	18a44 <radio_switch_complete_and_rx>
		radio_tmr_end_capture();
   151b4:	f003 fdae 	bl	18d14 <radio_tmr_end_capture>
   151b8:	e7d7      	b.n	1516a <isr+0x153a>
		LL_ASSERT(0);
   151ba:	4b42      	ldr	r3, [pc, #264]	; (152c4 <isr+0x1694>)
   151bc:	9301      	str	r3, [sp, #4]
   151be:	9300      	str	r3, [sp, #0]
   151c0:	4b45      	ldr	r3, [pc, #276]	; (152d8 <isr+0x16a8>)
   151c2:	f7fe be2c 	b.w	13e1e <isr+0x1ee>
	switch (_radio.role) {
   151c6:	7ce2      	ldrb	r2, [r4, #19]
   151c8:	2a04      	cmp	r2, #4
   151ca:	f200 81d9 	bhi.w	15580 <isr+0x1950>
   151ce:	e8df f012 	tbh	[pc, r2, lsl #1]
   151d2:	01c7      	.short	0x01c7
   151d4:	002c0005 	.word	0x002c0005
   151d8:	00600060 	.word	0x00600060
	if ((_radio.state == STATE_CLOSE) &&
   151dc:	2b03      	cmp	r3, #3
   151de:	d109      	bne.n	151f4 <isr+0x15c4>
	    (_radio.advertiser.chan_map_current != 0)) {
   151e0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	if ((_radio.state == STATE_CLOSE) &&
   151e4:	0759      	lsls	r1, r3, #29
   151e6:	d005      	beq.n	151f4 <isr+0x15c4>
		adv_setup();
   151e8:	f7f9 ff02 	bl	eff0 <adv_setup>
		radio_tx_enable();
   151ec:	f003 fbca 	bl	18984 <radio_tx_enable>
   151f0:	f7fe bd98 	b.w	13d24 <isr+0xf4>
		radio_filter_disable();
   151f4:	f003 fc86 	bl	18b04 <radio_filter_disable>
	_radio.role = ROLE_NONE;
   151f8:	2500      	movs	r5, #0
   151fa:	74e5      	strb	r5, [r4, #19]
	_radio.state = STATE_NONE;
   151fc:	7525      	strb	r5, [r4, #20]
	_radio.ticker_id_event = 0;
   151fe:	7465      	strb	r5, [r4, #17]
	radio_tmr_stop();
   15200:	f003 fd2a 	bl	18c58 <radio_tmr_stop>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   15204:	462a      	mov	r2, r5
   15206:	4629      	mov	r1, r5
   15208:	4628      	mov	r0, r5
   1520a:	4b34      	ldr	r3, [pc, #208]	; (152dc <isr+0x16ac>)
   1520c:	f7f6 fbb6 	bl	b97c <mayfly_enqueue>
	LL_ASSERT(!retval);
   15210:	4605      	mov	r5, r0
   15212:	2800      	cmp	r0, #0
   15214:	f000 81ba 	beq.w	1558c <isr+0x195c>
   15218:	4b2a      	ldr	r3, [pc, #168]	; (152c4 <isr+0x1694>)
   1521a:	9301      	str	r3, [sp, #4]
   1521c:	9300      	str	r3, [sp, #0]
   1521e:	4a30      	ldr	r2, [pc, #192]	; (152e0 <isr+0x16b0>)
   15220:	4b30      	ldr	r3, [pc, #192]	; (152e4 <isr+0x16b4>)
   15222:	4931      	ldr	r1, [pc, #196]	; (152e8 <isr+0x16b8>)
   15224:	4831      	ldr	r0, [pc, #196]	; (152ec <isr+0x16bc>)
   15226:	f7ff b8b1 	b.w	1438c <isr+0x75c>
	if (_radio.state == STATE_CLOSE) {
   1522a:	2b03      	cmp	r3, #3
   1522c:	d124      	bne.n	15278 <isr+0x1648>
		radio_tmr_tifs_set(RADIO_TIFS);
   1522e:	2096      	movs	r0, #150	; 0x96
   15230:	f003 fca6 	bl	18b80 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
   15234:	2300      	movs	r3, #0
   15236:	4619      	mov	r1, r3
   15238:	461a      	mov	r2, r3
   1523a:	4618      	mov	r0, r3
   1523c:	f003 fc0e 	bl	18a5c <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
   15240:	f894 2749 	ldrb.w	r2, [r4, #1865]	; 0x749
   15244:	f8d4 3744 	ldr.w	r3, [r4, #1860]	; 0x744
		radio_pkt_rx_set(_radio.packet_rx
   15248:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   1524c:	3008      	adds	r0, #8
   1524e:	f003 fb6b 	bl	18928 <radio_pkt_rx_set>
		radio_rssi_measure();
   15252:	f003 fc1b 	bl	18a8c <radio_rssi_measure>
		if (ctrl_rl_enabled()) {
   15256:	f002 fd21 	bl	17c9c <ctrl_rl_enabled>
   1525a:	b138      	cbz	r0, 1526c <isr+0x163c>
			u8_t count, *irks = ctrl_irks_get(&count);
   1525c:	a810      	add	r0, sp, #64	; 0x40
   1525e:	f002 fa63 	bl	17728 <ctrl_irks_get>
			radio_ar_configure(count, irks);
   15262:	4601      	mov	r1, r0
   15264:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
   15268:	f003 fe16 	bl	18e98 <radio_ar_configure>
		_radio.state = STATE_RX;
   1526c:	2301      	movs	r3, #1
   1526e:	7523      	strb	r3, [r4, #20]
		radio_rx_enable();
   15270:	f003 fb82 	bl	18978 <radio_rx_enable>
   15274:	f7fe bd56 	b.w	13d24 <isr+0xf4>
		radio_filter_disable();
   15278:	f003 fc44 	bl	18b04 <radio_filter_disable>
		if (_radio.state == STATE_ABORT) {
   1527c:	7d23      	ldrb	r3, [r4, #20]
   1527e:	2b05      	cmp	r3, #5
   15280:	d1ba      	bne.n	151f8 <isr+0x15c8>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   15282:	2300      	movs	r3, #0
   15284:	9300      	str	r3, [sp, #0]
   15286:	2204      	movs	r2, #4
   15288:	4619      	mov	r1, r3
   1528a:	4618      	mov	r0, r3
   1528c:	f7f7 f9d2 	bl	c634 <ticker_stop>
   15290:	e7b2      	b.n	151f8 <isr+0x15c8>
	if (_radio.conn_curr == 0) {
   15292:	f8d4 071c 	ldr.w	r0, [r4, #1820]	; 0x71c
   15296:	2800      	cmp	r0, #0
   15298:	d0ae      	beq.n	151f8 <isr+0x15c8>
	reason_peer = _radio.conn_curr->llcp_terminate.reason_peer;
   1529a:	f890 10b3 	ldrb.w	r1, [r0, #179]	; 0xb3
	if (reason_peer && ((_radio.role == ROLE_SLAVE) ||
   1529e:	b339      	cbz	r1, 152f0 <isr+0x16c0>
   152a0:	7ce3      	ldrb	r3, [r4, #19]
   152a2:	2b03      	cmp	r3, #3
   152a4:	d003      	beq.n	152ae <isr+0x167e>
   152a6:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
   152aa:	07da      	lsls	r2, r3, #31
   152ac:	d520      	bpl.n	152f0 <isr+0x16c0>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
   152ae:	f7fb f817 	bl	102e0 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
   152b2:	f8d4 071c 	ldr.w	r0, [r4, #1820]	; 0x71c
   152b6:	f7fa fe09 	bl	fecc <connection_release>
			_radio.conn_curr = NULL;
   152ba:	2300      	movs	r3, #0
   152bc:	f8c4 371c 	str.w	r3, [r4, #1820]	; 0x71c
   152c0:	e79a      	b.n	151f8 <isr+0x15c8>
   152c2:	bf00      	nop
   152c4:	00023dbe 	.word	0x00023dbe
   152c8:	00025a91 	.word	0x00025a91
   152cc:	00022060 	.word	0x00022060
   152d0:	00022040 	.word	0x00022040
   152d4:	00025aa1 	.word	0x00025aa1
   152d8:	00025aad 	.word	0x00025aad
   152dc:	20009fe8 	.word	0x20009fe8
   152e0:	00022d86 	.word	0x00022d86
   152e4:	00025b83 	.word	0x00025b83
   152e8:	000272e8 	.word	0x000272e8
   152ec:	000266b2 	.word	0x000266b2
	latency_event = _radio.conn_curr->latency_event;
   152f0:	f8b0 b02a 	ldrh.w	fp, [r0, #42]	; 0x2a
	if (_radio.packet_counter &&
   152f4:	f894 7720 	ldrb.w	r7, [r4, #1824]	; 0x720
	elapsed_event = latency_event + 1;
   152f8:	f10b 0601 	add.w	r6, fp, #1
   152fc:	b2b6      	uxth	r6, r6
	if (_radio.packet_counter &&
   152fe:	2f00      	cmp	r7, #0
   15300:	f000 8084 	beq.w	1540c <isr+0x17dc>
		if (_radio.role == ROLE_SLAVE) {
   15304:	7ce3      	ldrb	r3, [r4, #19]
   15306:	2b03      	cmp	r3, #3
   15308:	d173      	bne.n	153f2 <isr+0x17c2>
			start_to_address_actual_us = radio_tmr_aa_restore() -
   1530a:	f003 fcf7 	bl	18cfc <radio_tmr_aa_restore>
   1530e:	4681      	mov	r9, r0
						     radio_tmr_ready_get();
   15310:	f003 fcfa 	bl	18d08 <radio_tmr_ready_get>
				_radio.conn_curr->slave.window_widening_event_us;
   15314:	f8d4 771c 	ldr.w	r7, [r4, #1820]	; 0x71c
				addr_us_get(_radio.conn_curr->phy_rx);
   15318:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
	switch (phy) {
   1531c:	f003 0307 	and.w	r3, r3, #7
   15320:	2b02      	cmp	r3, #2
			start_to_address_actual_us = radio_tmr_aa_restore() -
   15322:	eba9 0900 	sub.w	r9, r9, r0
			window_widening_event_us =
   15326:	6e38      	ldr	r0, [r7, #96]	; 0x60
	switch (phy) {
   15328:	d052      	beq.n	153d0 <isr+0x17a0>
		return 40;
   1532a:	2b04      	cmp	r3, #4
   1532c:	bf0c      	ite	eq
   1532e:	f44f 78bc 	moveq.w	r8, #376	; 0x178
   15332:	f04f 0828 	movne.w	r8, #40	; 0x28
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
   15336:	f100 0330 	add.w	r3, r0, #48	; 0x30
   1533a:	4443      	add	r3, r8
			if (start_to_address_actual_us <=
   1533c:	4599      	cmp	r9, r3
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
   1533e:	930a      	str	r3, [sp, #40]	; 0x28
   15340:	f8df a298 	ldr.w	sl, [pc, #664]	; 155dc <isr+0x19ac>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
   15344:	a3a3      	add	r3, pc, #652	; (adr r3, 155d4 <isr+0x19a4>)
   15346:	e9d3 2300 	ldrd	r2, r3, [r3]
			if (start_to_address_actual_us <=
   1534a:	d844      	bhi.n	153d6 <isr+0x17a6>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
   1534c:	fba0 010a 	umull	r0, r1, r0, sl
   15350:	f7ea ffa2 	bl	298 <__aeabi_uldivmod>
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
   15354:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
   15356:	b285      	uxth	r5, r0
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
   15358:	eba3 0009 	sub.w	r0, r3, r9
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
   1535c:	a39d      	add	r3, pc, #628	; (adr r3, 155d4 <isr+0x19a4>)
   1535e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15362:	fba0 010a 	umull	r0, r1, r0, sl
   15366:	f7ea ff97 	bl	298 <__aeabi_uldivmod>
			_radio.conn_curr->slave.window_widening_event_us = 0;
   1536a:	2300      	movs	r3, #0
   1536c:	663b      	str	r3, [r7, #96]	; 0x60
			_radio.conn_curr->slave.window_size_event_us = 0;
   1536e:	66bb      	str	r3, [r7, #104]	; 0x68
			if (_radio.conn_curr->pkt_tx_head) {
   15370:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
   15374:	fa1f f880 	uxth.w	r8, r0
			if (_radio.conn_curr->pkt_tx_head) {
   15378:	b3ab      	cbz	r3, 153e6 <isr+0x17b6>
				if (pdu_data_tx->len ||
   1537a:	795b      	ldrb	r3, [r3, #5]
   1537c:	b913      	cbnz	r3, 15384 <isr+0x1754>
   1537e:	f897 3151 	ldrb.w	r3, [r7, #337]	; 0x151
   15382:	b10b      	cbz	r3, 15388 <isr+0x1758>
					_radio.conn_curr->latency_event = 0;
   15384:	2300      	movs	r3, #0
				_radio.conn_curr->latency_event =
   15386:	857b      	strh	r3, [r7, #42]	; 0x2a
		_radio.conn_curr->connect_expire = 0;
   15388:	f8d4 371c 	ldr.w	r3, [r4, #1820]	; 0x71c
   1538c:	2200      	movs	r2, #0
   1538e:	879a      	strh	r2, [r3, #60]	; 0x3c
	if (_radio.conn_curr->supervision_expire) {
   15390:	f8d4 071c 	ldr.w	r0, [r4, #1820]	; 0x71c
   15394:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
   15398:	b1c3      	cbz	r3, 153cc <isr+0x179c>
		if (_radio.conn_curr->supervision_expire > elapsed_event) {
   1539a:	429e      	cmp	r6, r3
   1539c:	f080 80b0 	bcs.w	15500 <isr+0x18d0>
			_radio.conn_curr->supervision_expire -= elapsed_event;
   153a0:	1b9b      	subs	r3, r3, r6
   153a2:	b29b      	uxth	r3, r3
			_radio.conn_curr->latency_event = 0;
   153a4:	2200      	movs	r2, #0
			if (_radio.conn_curr->supervision_expire <= 6) {
   153a6:	2b06      	cmp	r3, #6
			_radio.conn_curr->supervision_expire -= elapsed_event;
   153a8:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
			_radio.conn_curr->latency_event = 0;
   153ac:	8542      	strh	r2, [r0, #42]	; 0x2a
			if (_radio.conn_curr->supervision_expire <= 6) {
   153ae:	f240 80a9 	bls.w	15504 <isr+0x18d4>
			else if (_radio.role == ROLE_SLAVE) {
   153b2:	7ce3      	ldrb	r3, [r4, #19]
   153b4:	2b03      	cmp	r3, #3
   153b6:	d109      	bne.n	153cc <isr+0x179c>
				if (latency_event != 0) {
   153b8:	f1bb 0f00 	cmp.w	fp, #0
   153bc:	f040 80a2 	bne.w	15504 <isr+0x18d4>
					force = _radio.conn_curr->slave.force & 0x01;
   153c0:	6ec7      	ldr	r7, [r0, #108]	; 0x6c
					_radio.conn_curr->slave.force >>= 1;
   153c2:	087b      	lsrs	r3, r7, #1
					if (force) {
   153c4:	f017 0701 	ands.w	r7, r7, #1
   153c8:	d13d      	bne.n	15446 <isr+0x1816>
					_radio.conn_curr->slave.force >>= 1;
   153ca:	66c3      	str	r3, [r0, #108]	; 0x6c
	force = 0;
   153cc:	2700      	movs	r7, #0
   153ce:	e03d      	b.n	1544c <isr+0x181c>
		return 24;
   153d0:	f04f 0818 	mov.w	r8, #24
   153d4:	e7af      	b.n	15336 <isr+0x1706>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
   153d6:	fba9 010a 	umull	r0, r1, r9, sl
   153da:	f7ea ff5d 	bl	298 <__aeabi_uldivmod>
   153de:	b285      	uxth	r5, r0
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
   153e0:	f108 0030 	add.w	r0, r8, #48	; 0x30
   153e4:	e7ba      	b.n	1535c <isr+0x172c>
			} else if (_radio.conn_curr->slave.latency_enabled) {
   153e6:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
   153ea:	07db      	lsls	r3, r3, #31
   153ec:	d5cc      	bpl.n	15388 <isr+0x1758>
				_radio.conn_curr->latency_event =
   153ee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
   153f0:	e7c9      	b.n	15386 <isr+0x1756>
		} else if (reason_peer) {
   153f2:	b149      	cbz	r1, 15408 <isr+0x17d8>
			_radio.conn_curr->master.terminate_ack = 1;
   153f4:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
   153f8:	f043 0301 	orr.w	r3, r3, #1
   153fc:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
	ticks_drift_minus = 0;
   15400:	f04f 0800 	mov.w	r8, #0
	ticks_drift_plus = 0;
   15404:	4645      	mov	r5, r8
   15406:	e7bf      	b.n	15388 <isr+0x1758>
	ticks_drift_minus = 0;
   15408:	4688      	mov	r8, r1
   1540a:	e7fb      	b.n	15404 <isr+0x17d4>
	else if (_radio.conn_curr->connect_expire) {
   1540c:	8f85      	ldrh	r5, [r0, #60]	; 0x3c
   1540e:	b185      	cbz	r5, 15432 <isr+0x1802>
		if (_radio.conn_curr->connect_expire > elapsed_event) {
   15410:	42ae      	cmp	r6, r5
   15412:	d204      	bcs.n	1541e <isr+0x17ee>
			_radio.conn_curr->connect_expire -= elapsed_event;
   15414:	1bad      	subs	r5, r5, r6
   15416:	8785      	strh	r5, [r0, #60]	; 0x3c
	ticks_drift_minus = 0;
   15418:	463d      	mov	r5, r7
   1541a:	46a8      	mov	r8, r5
   1541c:	e7b8      	b.n	15390 <isr+0x1760>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x3e);
   1541e:	213e      	movs	r1, #62	; 0x3e
   15420:	f7fa ff5e 	bl	102e0 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
   15424:	f8d4 071c 	ldr.w	r0, [r4, #1820]	; 0x71c
   15428:	f7fa fd50 	bl	fecc <connection_release>
			_radio.conn_curr = NULL;
   1542c:	f8c4 771c 	str.w	r7, [r4, #1820]	; 0x71c
   15430:	e6e2      	b.n	151f8 <isr+0x15c8>
		if (!_radio.conn_curr->supervision_expire) {
   15432:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
   15436:	f1b8 0f00 	cmp.w	r8, #0
   1543a:	d1ee      	bne.n	1541a <isr+0x17ea>
			_radio.conn_curr->supervision_expire =
   1543c:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
   1543e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
	ticks_drift_plus = 0;
   15442:	4645      	mov	r5, r8
   15444:	e7a4      	b.n	15390 <isr+0x1760>
						_radio.conn_curr->slave.force |=
   15446:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1544a:	66c3      	str	r3, [r0, #108]	; 0x6c
	if (_radio.conn_curr->procedure_expire != 0) {
   1544c:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
   15450:	b123      	cbz	r3, 1545c <isr+0x182c>
		if (_radio.conn_curr->procedure_expire > elapsed_event) {
   15452:	429e      	cmp	r6, r3
   15454:	d258      	bcs.n	15508 <isr+0x18d8>
			_radio.conn_curr->procedure_expire -= elapsed_event;
   15456:	1b9b      	subs	r3, r3, r6
   15458:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
	if (_radio.conn_curr->apto_expire != 0) {
   1545c:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
   15460:	b123      	cbz	r3, 1546c <isr+0x183c>
		if (_radio.conn_curr->apto_expire > elapsed_event) {
   15462:	429e      	cmp	r6, r3
   15464:	d252      	bcs.n	1550c <isr+0x18dc>
			_radio.conn_curr->apto_expire -= elapsed_event;
   15466:	1b9b      	subs	r3, r3, r6
   15468:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
	if (_radio.conn_curr->appto_expire != 0) {
   1546c:	f8d4 271c 	ldr.w	r2, [r4, #1820]	; 0x71c
   15470:	f8b2 3048 	ldrh.w	r3, [r2, #72]	; 0x48
   15474:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
   15478:	b123      	cbz	r3, 15484 <isr+0x1854>
		if (_radio.conn_curr->appto_expire > elapsed_event) {
   1547a:	429e      	cmp	r6, r3
   1547c:	d25c      	bcs.n	15538 <isr+0x1908>
			_radio.conn_curr->appto_expire -= elapsed_event;
   1547e:	1b9e      	subs	r6, r3, r6
   15480:	f8a2 6048 	strh.w	r6, [r2, #72]	; 0x48
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
   15484:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
   15488:	428b      	cmp	r3, r1
   1548a:	d006      	beq.n	1549a <isr+0x186a>
	    ((_radio.conn_curr->llcp_type == LLCP_CONN_UPD) ||
   1548c:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
   15490:	3b01      	subs	r3, #1
   15492:	2b01      	cmp	r3, #1
		_radio.conn_curr->latency_event = 0;
   15494:	bf9c      	itt	ls
   15496:	2300      	movls	r3, #0
   15498:	8553      	strhls	r3, [r2, #42]	; 0x2a
	if ((force) || (latency_event != _radio.conn_curr->latency_event)) {
   1549a:	b917      	cbnz	r7, 154a2 <isr+0x1872>
   1549c:	8d53      	ldrh	r3, [r2, #42]	; 0x2a
   1549e:	455b      	cmp	r3, fp
   154a0:	d05c      	beq.n	1555c <isr+0x192c>
		lazy = _radio.conn_curr->latency_event + 1;
   154a2:	8d53      	ldrh	r3, [r2, #42]	; 0x2a
   154a4:	3301      	adds	r3, #1
   154a6:	b29b      	uxth	r3, r3
	if ((ticks_drift_plus != 0) || (ticks_drift_minus != 0) ||
   154a8:	b935      	cbnz	r5, 154b8 <isr+0x1888>
   154aa:	f1b8 0f00 	cmp.w	r8, #0
   154ae:	d103      	bne.n	154b8 <isr+0x1888>
   154b0:	b913      	cbnz	r3, 154b8 <isr+0x1888>
	    (lazy != 0) || (force != 0)) {
   154b2:	2f00      	cmp	r7, #0
   154b4:	f43f aea0 	beq.w	151f8 <isr+0x15c8>
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
   154b8:	f892 2020 	ldrb.w	r2, [r2, #32]
		ticker_status =
   154bc:	9303      	str	r3, [sp, #12]
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
   154be:	3207      	adds	r2, #7
		ticker_status =
   154c0:	2100      	movs	r1, #0
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
   154c2:	b2d6      	uxtb	r6, r2
		ticker_status =
   154c4:	4a3a      	ldr	r2, [pc, #232]	; (155b0 <isr+0x1980>)
   154c6:	9205      	str	r2, [sp, #20]
   154c8:	462b      	mov	r3, r5
				      (void *)(u32_t)ticker_id);
   154ca:	9606      	str	r6, [sp, #24]
		ticker_status =
   154cc:	9704      	str	r7, [sp, #16]
   154ce:	9102      	str	r1, [sp, #8]
   154d0:	9101      	str	r1, [sp, #4]
   154d2:	f8cd 8000 	str.w	r8, [sp]
   154d6:	4632      	mov	r2, r6
   154d8:	4608      	mov	r0, r1
   154da:	f7f7 f85d 	bl	c598 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   154de:	f030 0302 	bics.w	r3, r0, #2
   154e2:	f43f ae89 	beq.w	151f8 <isr+0x15c8>
   154e6:	7ca3      	ldrb	r3, [r4, #18]
   154e8:	429e      	cmp	r6, r3
   154ea:	f43f ae85 	beq.w	151f8 <isr+0x15c8>
   154ee:	4b31      	ldr	r3, [pc, #196]	; (155b4 <isr+0x1984>)
   154f0:	9301      	str	r3, [sp, #4]
   154f2:	9300      	str	r3, [sp, #0]
   154f4:	4a30      	ldr	r2, [pc, #192]	; (155b8 <isr+0x1988>)
   154f6:	4b31      	ldr	r3, [pc, #196]	; (155bc <isr+0x198c>)
   154f8:	4931      	ldr	r1, [pc, #196]	; (155c0 <isr+0x1990>)
   154fa:	4832      	ldr	r0, [pc, #200]	; (155c4 <isr+0x1994>)
   154fc:	f7fe bf46 	b.w	1438c <isr+0x75c>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
   15500:	2108      	movs	r1, #8
   15502:	e6d4      	b.n	152ae <isr+0x167e>
				force = 1;
   15504:	2701      	movs	r7, #1
   15506:	e7a1      	b.n	1544c <isr+0x181c>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x22);
   15508:	2122      	movs	r1, #34	; 0x22
   1550a:	e6d0      	b.n	152ae <isr+0x167e>
			_radio.conn_curr->apto_expire = 0;
   1550c:	2300      	movs	r3, #0
   1550e:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
			node_rx = packet_rx_reserve_get(2);
   15512:	2002      	movs	r0, #2
   15514:	f7f9 f86e 	bl	e5f4 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
   15518:	b928      	cbnz	r0, 15526 <isr+0x18f6>
   1551a:	4b26      	ldr	r3, [pc, #152]	; (155b4 <isr+0x1984>)
   1551c:	9301      	str	r3, [sp, #4]
   1551e:	9300      	str	r3, [sp, #0]
   15520:	4b26      	ldr	r3, [pc, #152]	; (155bc <isr+0x198c>)
   15522:	f7fe bdfd 	b.w	14120 <isr+0x4f0>
			node_rx->hdr.handle = _radio.conn_curr->handle;
   15526:	f8d4 371c 	ldr.w	r3, [r4, #1820]	; 0x71c
   1552a:	8c1b      	ldrh	r3, [r3, #32]
   1552c:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_APTO;
   1552e:	230a      	movs	r3, #10
   15530:	7103      	strb	r3, [r0, #4]
			packet_rx_enqueue();
   15532:	f7fa f939 	bl	f7a8 <packet_rx_enqueue>
   15536:	e799      	b.n	1546c <isr+0x183c>
			_radio.conn_curr->appto_expire = 0;
   15538:	2300      	movs	r3, #0
   1553a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
			if ((_radio.conn_curr->procedure_expire == 0) &&
   1553e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
   15542:	2b00      	cmp	r3, #0
   15544:	d19e      	bne.n	15484 <isr+0x1854>
   15546:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
   1554a:	428b      	cmp	r3, r1
   1554c:	d19e      	bne.n	1548c <isr+0x185c>
				_radio.conn_curr->llcp_type = LLCP_PING;
   1554e:	2307      	movs	r3, #7
   15550:	f882 3076 	strb.w	r3, [r2, #118]	; 0x76
				_radio.conn_curr->llcp_ack--;
   15554:	1e4b      	subs	r3, r1, #1
   15556:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
   1555a:	e793      	b.n	15484 <isr+0x1854>
	lazy = 0;
   1555c:	463b      	mov	r3, r7
   1555e:	e7a3      	b.n	154a8 <isr+0x1878>
		LL_ASSERT((_radio.state == STATE_STOP) ||
   15560:	3b04      	subs	r3, #4
   15562:	2b01      	cmp	r3, #1
   15564:	d908      	bls.n	15578 <isr+0x1948>
   15566:	4b13      	ldr	r3, [pc, #76]	; (155b4 <isr+0x1984>)
   15568:	9301      	str	r3, [sp, #4]
   1556a:	9300      	str	r3, [sp, #0]
   1556c:	4a12      	ldr	r2, [pc, #72]	; (155b8 <isr+0x1988>)
   1556e:	4b16      	ldr	r3, [pc, #88]	; (155c8 <isr+0x1998>)
   15570:	4913      	ldr	r1, [pc, #76]	; (155c0 <isr+0x1990>)
   15572:	4816      	ldr	r0, [pc, #88]	; (155cc <isr+0x199c>)
   15574:	f7fe bf0a 	b.w	1438c <isr+0x75c>
		_radio.state = STATE_NONE;
   15578:	2300      	movs	r3, #0
   1557a:	7523      	strb	r3, [r4, #20]
   1557c:	f7fe bc02 	b.w	13d84 <isr+0x154>
		LL_ASSERT(0);
   15580:	4b0c      	ldr	r3, [pc, #48]	; (155b4 <isr+0x1984>)
   15582:	9301      	str	r3, [sp, #4]
   15584:	9300      	str	r3, [sp, #0]
   15586:	4b10      	ldr	r3, [pc, #64]	; (155c8 <isr+0x1998>)
   15588:	f7fe bc49 	b.w	13e1e <isr+0x1ee>
	clock_control_off(_radio.hf_clock, NULL);
   1558c:	6820      	ldr	r0, [r4, #0]
   1558e:	6843      	ldr	r3, [r0, #4]
   15590:	4629      	mov	r1, r5
   15592:	685b      	ldr	r3, [r3, #4]
   15594:	4798      	blx	r3
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
   15596:	2201      	movs	r2, #1
   15598:	4611      	mov	r1, r2
   1559a:	4628      	mov	r0, r5
   1559c:	f7f6 f9c6 	bl	b92c <mayfly_enable>
   155a0:	f7fe bbf0 	b.w	13d84 <isr+0x154>
		LL_ASSERT(0);
   155a4:	4b03      	ldr	r3, [pc, #12]	; (155b4 <isr+0x1984>)
   155a6:	9301      	str	r3, [sp, #4]
   155a8:	9300      	str	r3, [sp, #0]
   155aa:	4b09      	ldr	r3, [pc, #36]	; (155d0 <isr+0x19a0>)
   155ac:	f7fe bc37 	b.w	13e1e <isr+0x1ee>
   155b0:	0000fb11 	.word	0x0000fb11
   155b4:	00023dbe 	.word	0x00023dbe
   155b8:	00022d86 	.word	0x00022d86
   155bc:	00025ac0 	.word	0x00025ac0
   155c0:	000272e8 	.word	0x000272e8
   155c4:	0002626e 	.word	0x0002626e
   155c8:	00025acf 	.word	0x00025acf
   155cc:	000262e4 	.word	0x000262e4
   155d0:	00025ae5 	.word	0x00025ae5
   155d4:	1afd498d 	.word	0x1afd498d
   155d8:	00000007 	.word	0x00000007
   155dc:	3b9aca00 	.word	0x3b9aca00

000155e0 <radio_init>:
{
   155e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	_radio.hf_clock = hf_clock;
   155e4:	4e3e      	ldr	r6, [pc, #248]	; (156e0 <radio_init+0x100>)
{
   155e6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   155e8:	f89d c01c 	ldrb.w	ip, [sp, #28]
   155ec:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
   155f0:	f8bd 8020 	ldrh.w	r8, [sp, #32]
   155f4:	f89d e018 	ldrb.w	lr, [sp, #24]
	_radio.hf_clock = hf_clock;
   155f8:	6030      	str	r0, [r6, #0]
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
   155fa:	f44f 70aa 	mov.w	r0, #340	; 0x154
   155fe:	fb00 4003 	mla	r0, r0, r3, r4
	_radio.sca = sca;
   15602:	f886 1728 	strb.w	r1, [r6, #1832]	; 0x728
	_radio.conn_pool = mem_radio;
   15606:	f8c6 4710 	str.w	r4, [r6, #1808]	; 0x710
	mem_radio_end = mem_radio + mem_size;
   1560a:	1961      	adds	r1, r4, r5
	tx_count_max += 1;
   1560c:	f10c 0401 	add.w	r4, ip, #1
   15610:	b2e7      	uxtb	r7, r4
	_radio.entropy = entropy;
   15612:	6072      	str	r2, [r6, #4]
	    (offsetof(struct pdu_data, lldata) +
   15614:	f108 0403 	add.w	r4, r8, #3
	rx_count_max += 3;
   15618:	f10e 0203 	add.w	r2, lr, #3
	if ((PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA) <
   1561c:	f5b4 7f82 	cmp.w	r4, #260	; 0x104
	rx_count_max += 3;
   15620:	b2d2      	uxtb	r2, r2
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
   15622:	bf98      	it	ls
   15624:	eb02 1442 	addls.w	r4, r2, r2, lsl #5
	_radio.packet_data_octets_max = packet_data_octets_max;
   15628:	f8a6 873c 	strh.w	r8, [r6, #1852]	; 0x73c
		    (MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
   1562c:	bf88      	it	hi
   1562e:	f108 080e 	addhi.w	r8, r8, #14
	_radio.link_rx_data_quota = rx_count_max;
   15632:	f886 275c 	strb.w	r2, [r6, #1884]	; 0x75c
		_radio.packet_rx_data_pool_size =
   15636:	bf8c      	ite	hi
   15638:	f028 0803 	bichi.w	r8, r8, #3
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
   1563c:	eb02 0244 	addls.w	r2, r2, r4, lsl #1
	_radio.packet_rx_count = (rx_count_max + 1);
   15640:	f10e 0e04 	add.w	lr, lr, #4
	_radio.packet_tx_count = (tx_count_max + 1);
   15644:	f10c 0c02 	add.w	ip, ip, #2
	_radio.packet_rx_count = (rx_count_max + 1);
   15648:	fa5f fe8e 	uxtb.w	lr, lr
		_radio.packet_rx_data_pool_size =
   1564c:	bf8c      	ite	hi
   1564e:	fb18 f202 	smulbbhi	r2, r8, r2
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
   15652:	0092      	lslls	r2, r2, #2
	_radio.packet_tx_count = (tx_count_max + 1);
   15654:	fa5f fc8c 	uxtb.w	ip, ip
		_radio.packet_rx_data_pool_size =
   15658:	f8a6 273e 	strh.w	r2, [r6, #1854]	; 0x73e
	_radio.packet_tx_count = (tx_count_max + 1);
   1565c:	f886 c77c 	strb.w	ip, [r6, #1916]	; 0x77c
	_radio.packet_rx = (void *)mem_radio;
   15660:	f8c6 0744 	str.w	r0, [r6, #1860]	; 0x744
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   15664:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
	mem_radio +=
   15668:	eb00 008e 	add.w	r0, r0, lr, lsl #2
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   1566c:	f8b6 473e 	ldrh.w	r4, [r6, #1854]	; 0x73e
	_radio.pkt_tx = (void *)mem_radio;
   15670:	f8c6 0774 	str.w	r0, [r6, #1908]	; 0x774
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   15674:	4460      	add	r0, ip
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   15676:	f44f 7286 	mov.w	r2, #268	; 0x10c
	_radio.pkt_release = (void *)mem_radio;
   1567a:	f8c6 0778 	str.w	r0, [r6, #1912]	; 0x778
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   1567e:	4460      	add	r0, ip
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   15680:	f8a6 2740 	strh.w	r2, [r6, #1856]	; 0x740
	_radio.pkt_rx_data_pool = mem_radio;
   15684:	f8c6 0734 	str.w	r0, [r6, #1844]	; 0x734
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   15688:	fbb4 f2f2 	udiv	r2, r4, r2
	mem_radio += _radio.packet_rx_data_pool_size;
   1568c:	4420      	add	r0, r4
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
   1568e:	eb0e 0403 	add.w	r4, lr, r3
	_radio.link_rx_pool = mem_radio;
   15692:	f8c6 074c 	str.w	r0, [r6, #1868]	; 0x74c
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
   15696:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   1569a:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
	_radio.pkt_tx_ctrl_pool = mem_radio;
   1569e:	f8c6 0760 	str.w	r0, [r6, #1888]	; 0x760
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   156a2:	340a      	adds	r4, #10
   156a4:	f024 0403 	bic.w	r4, r4, #3
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;
   156a8:	3048      	adds	r0, #72	; 0x48
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   156aa:	b2a4      	uxth	r4, r4
	_radio.packet_tx_data_size =
   156ac:	f8a6 4770 	strh.w	r4, [r6, #1904]	; 0x770
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);
   156b0:	fb07 0404 	mla	r4, r7, r4, r0
	if (retcode) {
   156b4:	1a64      	subs	r4, r4, r1
	_radio.connection_count = connection_count_max;
   156b6:	f886 3718 	strb.w	r3, [r6, #1816]	; 0x718
	_radio.packet_rx_count = (rx_count_max + 1);
   156ba:	f886 e748 	strb.w	lr, [r6, #1864]	; 0x748
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   156be:	f886 2742 	strb.w	r2, [r6, #1858]	; 0x742
	_radio.pkt_tx_data_pool = mem_radio;
   156c2:	f8c6 0768 	str.w	r0, [r6, #1896]	; 0x768
	if (retcode) {
   156c6:	d003      	beq.n	156d0 <radio_init+0xf0>
		return (retcode + mem_size);
   156c8:	442c      	add	r4, r5
}
   156ca:	4620      	mov	r0, r4
   156cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_radio.fc_ena = 1;
   156d0:	2301      	movs	r3, #1
   156d2:	f886 378a 	strb.w	r3, [r6, #1930]	; 0x78a
	common_init();
   156d6:	f7f9 f851 	bl	e77c <common_init>
	radio_setup();
   156da:	f003 f853 	bl	18784 <radio_setup>
	return retcode;
   156de:	e7f4      	b.n	156ca <radio_init+0xea>
   156e0:	20000bf0 	.word	0x20000bf0

000156e4 <ll_reset>:
{
   156e4:	b538      	push	{r3, r4, r5, lr}
	role_disable(RADIO_TICKER_ID_ADV, RADIO_TICKER_ID_ADV_STOP);
   156e6:	2103      	movs	r1, #3
   156e8:	2005      	movs	r0, #5
   156ea:	f7f9 f931 	bl	e950 <role_disable>
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);
   156ee:	2104      	movs	r1, #4
   156f0:	2006      	movs	r0, #6
   156f2:	f7f9 f92d 	bl	e950 <role_disable>
	for (conn_handle = 0; conn_handle < _radio.connection_count;
   156f6:	4c22      	ldr	r4, [pc, #136]	; (15780 <ll_reset+0x9c>)
   156f8:	2500      	movs	r5, #0
   156fa:	f894 2718 	ldrb.w	r2, [r4, #1816]	; 0x718
   156fe:	b2ab      	uxth	r3, r5
   15700:	429a      	cmp	r2, r3
   15702:	f105 0501 	add.w	r5, r5, #1
   15706:	d835      	bhi.n	15774 <ll_reset+0x90>
	_radio.advertiser.is_enabled = 0;
   15708:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   1570c:	f36f 13c7 	bfc	r3, #7, #1
   15710:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	_radio.scanner.is_enabled = 0;
   15714:	f894 364c 	ldrb.w	r3, [r4, #1612]	; 0x64c
	_radio.advertiser.conn = NULL;
   15718:	2000      	movs	r0, #0
	_radio.scanner.is_enabled = 0;
   1571a:	f360 0300 	bfi	r3, r0, #0, #1
   1571e:	f884 364c 	strb.w	r3, [r4, #1612]	; 0x64c
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   15722:	f44f 7286 	mov.w	r2, #268	; 0x10c
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   15726:	f8b4 373e 	ldrh.w	r3, [r4, #1854]	; 0x73e
   1572a:	fbb3 f3f2 	udiv	r3, r3, r2
   1572e:	f884 3742 	strb.w	r3, [r4, #1858]	; 0x742
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   15732:	f894 3748 	ldrb.w	r3, [r4, #1864]	; 0x748
	_radio.packet_rx_last = 0;
   15736:	f884 0749 	strb.w	r0, [r4, #1865]	; 0x749
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   1573a:	3b01      	subs	r3, #1
	_radio.packet_tx_first = 0;
   1573c:	f884 077d 	strb.w	r0, [r4, #1917]	; 0x77d
	_radio.packet_release_last = 0;
   15740:	f884 0780 	strb.w	r0, [r4, #1920]	; 0x780
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   15744:	f884 375c 	strb.w	r3, [r4, #1884]	; 0x75c
	_radio.fc_ack = _radio.fc_req;
   15748:	f894 3788 	ldrb.w	r3, [r4, #1928]	; 0x788
	_radio.advertiser.conn = NULL;
   1574c:	f8c4 0638 	str.w	r0, [r4, #1592]	; 0x638
	_radio.scanner.conn = NULL;
   15750:	f8c4 0674 	str.w	r0, [r4, #1652]	; 0x674
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   15754:	f8a4 2740 	strh.w	r2, [r4, #1856]	; 0x740
	_radio.packet_rx_acquire = 0;
   15758:	f884 074a 	strb.w	r0, [r4, #1866]	; 0x74a
	_radio.packet_tx_last = 0;
   1575c:	f884 077e 	strb.w	r0, [r4, #1918]	; 0x77e
	_radio.packet_release_first = 0;
   15760:	f884 077f 	strb.w	r0, [r4, #1919]	; 0x77f
	_radio.fc_ack = _radio.fc_req;
   15764:	f884 3789 	strb.w	r3, [r4, #1929]	; 0x789
	ll_filter_reset(false);
   15768:	f002 fdf0 	bl	1834c <ll_filter_reset>
}
   1576c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	common_init();
   15770:	f7f9 b804 	b.w	e77c <common_init>
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
   15774:	1da8      	adds	r0, r5, #6
   15776:	21ff      	movs	r1, #255	; 0xff
   15778:	b2c0      	uxtb	r0, r0
   1577a:	f7f9 f8e9 	bl	e950 <role_disable>
   1577e:	e7bc      	b.n	156fa <ll_reset+0x16>
   15780:	20000bf0 	.word	0x20000bf0

00015784 <radio_adv_data_get>:
}
   15784:	4800      	ldr	r0, [pc, #0]	; (15788 <radio_adv_data_get+0x4>)
   15786:	4770      	bx	lr
   15788:	20000c1c 	.word	0x20000c1c

0001578c <radio_aux_adv_data_get>:
}
   1578c:	4800      	ldr	r0, [pc, #0]	; (15790 <radio_aux_adv_data_get+0x4>)
   1578e:	4770      	bx	lr
   15790:	20000e20 	.word	0x20000e20

00015794 <radio_scan_data_get>:
}
   15794:	4800      	ldr	r0, [pc, #0]	; (15798 <radio_scan_data_get+0x4>)
   15796:	4770      	bx	lr
   15798:	20001024 	.word	0x20001024

0001579c <ll_adv_is_enabled>:
	return _radio.advertiser.is_enabled;
   1579c:	4b02      	ldr	r3, [pc, #8]	; (157a8 <ll_adv_is_enabled+0xc>)
   1579e:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
}
   157a2:	09c0      	lsrs	r0, r0, #7
   157a4:	4770      	bx	lr
   157a6:	bf00      	nop
   157a8:	20000bf0 	.word	0x20000bf0

000157ac <radio_adv_filter_pol_get>:
	if (_radio.advertiser.is_enabled) {
   157ac:	4b05      	ldr	r3, [pc, #20]	; (157c4 <radio_adv_filter_pol_get+0x18>)
   157ae:	f993 2028 	ldrsb.w	r2, [r3, #40]	; 0x28
   157b2:	2a00      	cmp	r2, #0
		return _radio.advertiser.filter_policy;
   157b4:	bfba      	itte	lt
   157b6:	f893 002a 	ldrblt.w	r0, [r3, #42]	; 0x2a
   157ba:	f000 0003 	andlt.w	r0, r0, #3
   157be:	2000      	movge	r0, #0
}
   157c0:	4770      	bx	lr
   157c2:	bf00      	nop
   157c4:	20000bf0 	.word	0x20000bf0

000157c8 <ll_scan_is_enabled>:
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
   157c8:	4a09      	ldr	r2, [pc, #36]	; (157f0 <ll_scan_is_enabled+0x28>)
   157ca:	f892 364c 	ldrb.w	r3, [r2, #1612]	; 0x64c
   157ce:	f892 064d 	ldrb.w	r0, [r2, #1613]	; 0x64d
	       (_radio.scanner.conn ? BIT(2) : 0);
   157d2:	f8d2 2674 	ldr.w	r2, [r2, #1652]	; 0x674
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
   157d6:	f3c0 00c0 	ubfx	r0, r0, #3, #1
	       (_radio.scanner.conn ? BIT(2) : 0);
   157da:	2a00      	cmp	r2, #0
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
   157dc:	f003 0301 	and.w	r3, r3, #1
   157e0:	fa03 f300 	lsl.w	r3, r3, r0
	       (_radio.scanner.conn ? BIT(2) : 0);
   157e4:	bf14      	ite	ne
   157e6:	2004      	movne	r0, #4
   157e8:	2000      	moveq	r0, #0
}
   157ea:	4318      	orrs	r0, r3
   157ec:	4770      	bx	lr
   157ee:	bf00      	nop
   157f0:	20000bf0 	.word	0x20000bf0

000157f4 <radio_scan_filter_pol_get>:
	if (_radio.scanner.is_enabled) {
   157f4:	4b05      	ldr	r3, [pc, #20]	; (1580c <radio_scan_filter_pol_get+0x18>)
   157f6:	f893 064c 	ldrb.w	r0, [r3, #1612]	; 0x64c
   157fa:	f010 0001 	ands.w	r0, r0, #1
		return _radio.scanner.filter_policy;
   157fe:	bf1c      	itt	ne
   15800:	f893 064d 	ldrbne.w	r0, [r3, #1613]	; 0x64d
   15804:	f3c0 1001 	ubfxne	r0, r0, #4, #2
}
   15808:	4770      	bx	lr
   1580a:	bf00      	nop
   1580c:	20000bf0 	.word	0x20000bf0

00015810 <radio_connect_enable>:
{
   15810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (_radio.scanner.conn) {
   15814:	f8df 8384 	ldr.w	r8, [pc, #900]	; 15b9c <radio_connect_enable+0x38c>
{
   15818:	b087      	sub	sp, #28
	if (_radio.scanner.conn) {
   1581a:	f8d8 6674 	ldr.w	r6, [r8, #1652]	; 0x674
{
   1581e:	9303      	str	r3, [sp, #12]
   15820:	4683      	mov	fp, r0
   15822:	468a      	mov	sl, r1
   15824:	4691      	mov	r9, r2
   15826:	4645      	mov	r5, r8
	if (_radio.scanner.conn) {
   15828:	2e00      	cmp	r6, #0
   1582a:	f040 819c 	bne.w	15b66 <radio_connect_enable+0x356>
	link = mem_acquire(&_radio.link_rx_free);
   1582e:	f508 60ea 	add.w	r0, r8, #1872	; 0x750
   15832:	f7f5 ffd8 	bl	b7e6 <mem_acquire>
	if (!link) {
   15836:	4607      	mov	r7, r0
   15838:	b150      	cbz	r0, 15850 <radio_connect_enable+0x40>
	conn = mem_acquire(&_radio.conn_free);
   1583a:	f208 7014 	addw	r0, r8, #1812	; 0x714
   1583e:	f7f5 ffd2 	bl	b7e6 <mem_acquire>
	if (!conn) {
   15842:	4604      	mov	r4, r0
   15844:	b930      	cbnz	r0, 15854 <radio_connect_enable+0x44>
		mem_release(link, &_radio.link_rx_free);
   15846:	f508 61ea 	add.w	r1, r8, #1872	; 0x750
   1584a:	4638      	mov	r0, r7
   1584c:	f7f5 ffe5 	bl	b81a <mem_release>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   15850:	2007      	movs	r0, #7
   15852:	e15c      	b.n	15b0e <radio_connect_enable+0x2fe>
	_radio.scanner.adv_addr_type = adv_addr_type;
   15854:	f898 364d 	ldrb.w	r3, [r8, #1613]	; 0x64d
   15858:	f36b 1386 	bfi	r3, fp, #6, #1
   1585c:	f888 364d 	strb.w	r3, [r8, #1613]	; 0x64d
	memcpy(&_radio.scanner.adv_addr[0], adv_addr, BDADDR_SIZE);
   15860:	2206      	movs	r2, #6
   15862:	4651      	mov	r1, sl
   15864:	f208 6056 	addw	r0, r8, #1622	; 0x656
   15868:	f7ea ff93 	bl	792 <memcpy>
	_radio.scanner.conn_latency = latency;
   1586c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   15870:	f8a8 366a 	strh.w	r3, [r8, #1642]	; 0x66a
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
   15874:	4631      	mov	r1, r6
	_radio.scanner.conn_timeout = timeout;
   15876:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
	_radio.scanner.conn_interval = interval;
   1587a:	f8a8 9668 	strh.w	r9, [r8, #1640]	; 0x668
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
   1587e:	4630      	mov	r0, r6
	_radio.scanner.conn_timeout = timeout;
   15880:	f8a8 366c 	strh.w	r3, [r8, #1644]	; 0x66c
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
   15884:	f003 f85c 	bl	18940 <radio_tx_ready_delay_get>
   15888:	49bb      	ldr	r1, [pc, #748]	; (15b78 <radio_connect_enable+0x368>)
   1588a:	f200 4052 	addw	r0, r0, #1106	; 0x452
   1588e:	a3b8      	add	r3, pc, #736	; (adr r3, 15b70 <radio_connect_enable+0x360>)
   15890:	e9d3 2300 	ldrd	r2, r3, [r3]
   15894:	fba0 0101 	umull	r0, r1, r0, r1
   15898:	f7ea fcfe 	bl	298 <__aeabi_uldivmod>
	conn->handle = 0xFFFF;
   1589c:	f64f 73ff 	movw	r3, #65535	; 0xffff
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
   158a0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   158a4:	f8c8 0670 	str.w	r0, [r8, #1648]	; 0x670
	conn->handle = 0xFFFF;
   158a8:	8423      	strh	r3, [r4, #32]
	adv_aa_check = access_addr ^ 0x8e89bed6;
   158aa:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 15ba0 <radio_connect_enable+0x390>
	conn->llcp_features = RADIO_BLE_FEAT;
   158ae:	f503 4394 	add.w	r3, r3, #18944	; 0x4a00
   158b2:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
   158b6:	2603      	movs	r6, #3
	consecutive_cnt = 1;
   158b8:	f04f 0901 	mov.w	r9, #1
	bt_rand(&access_addr, sizeof(u32_t));
   158bc:	2104      	movs	r1, #4
   158be:	a805      	add	r0, sp, #20
   158c0:	f7f6 ffc8 	bl	c854 <bt_rand>
	consecutive_bit = (access_addr >> bit_idx) & 0x01;
   158c4:	f8dd c014 	ldr.w	ip, [sp, #20]
   158c8:	2000      	movs	r0, #0
   158ca:	ea4f 7adc 	mov.w	sl, ip, lsr #31
	bit_idx = 31;
   158ce:	231f      	movs	r3, #31
	transitions = 0;
   158d0:	4602      	mov	r2, r0
	consecutive_cnt = 1;
   158d2:	2101      	movs	r1, #1
	while (bit_idx--) {
   158d4:	3b01      	subs	r3, #1
   158d6:	b2db      	uxtb	r3, r3
   158d8:	2bff      	cmp	r3, #255	; 0xff
   158da:	d103      	bne.n	158e4 <radio_connect_enable+0xd4>
   158dc:	b3d0      	cbz	r0, 15954 <radio_connect_enable+0x144>
   158de:	f8cd c014 	str.w	ip, [sp, #20]
   158e2:	e037      	b.n	15954 <radio_connect_enable+0x144>
		bit = (access_addr >> bit_idx) & 0x01;
   158e4:	fa2c fe03 	lsr.w	lr, ip, r3
   158e8:	f00e 0e01 	and.w	lr, lr, #1
		if (bit == consecutive_bit) {
   158ec:	45d6      	cmp	lr, sl
   158ee:	d11a      	bne.n	15926 <radio_connect_enable+0x116>
			consecutive_cnt++;
   158f0:	3101      	adds	r1, #1
   158f2:	b2c9      	uxtb	r1, r1
		if ((consecutive_cnt > 6) ||
   158f4:	2906      	cmp	r1, #6
   158f6:	d807      	bhi.n	15908 <radio_connect_enable+0xf8>
   158f8:	2b1b      	cmp	r3, #27
   158fa:	d81a      	bhi.n	15932 <radio_connect_enable+0x122>
		    ((bit_idx < 28) && (transitions < 1)) ||
   158fc:	b122      	cbz	r2, 15908 <radio_connect_enable+0xf8>
   158fe:	2b1b      	cmp	r3, #27
   15900:	d017      	beq.n	15932 <radio_connect_enable+0x122>
		    ((bit_idx < 27) && (transitions < 2))) {
   15902:	2a01      	cmp	r2, #1
   15904:	d815      	bhi.n	15932 <radio_connect_enable+0x122>
   15906:	2201      	movs	r2, #1
				access_addr &= ~BIT(bit_idx);
   15908:	fa09 f103 	lsl.w	r1, r9, r3
			if (consecutive_bit) {
   1590c:	f1be 0f00 	cmp.w	lr, #0
   15910:	f000 8100 	beq.w	15b14 <radio_connect_enable+0x304>
				access_addr &= ~BIT(bit_idx);
   15914:	ea2c 0c01 	bic.w	ip, ip, r1
				consecutive_bit = 0;
   15918:	f04f 0e00 	mov.w	lr, #0
			transitions++;
   1591c:	3201      	adds	r2, #1
   1591e:	2001      	movs	r0, #1
   15920:	b2d2      	uxtb	r2, r2
			consecutive_cnt = 1;
   15922:	4601      	mov	r1, r0
   15924:	e005      	b.n	15932 <radio_connect_enable+0x122>
			transitions++;
   15926:	3201      	adds	r2, #1
		if ((consecutive_cnt > 6) ||
   15928:	2b1b      	cmp	r3, #27
			transitions++;
   1592a:	b2d2      	uxtb	r2, r2
			consecutive_cnt = 1;
   1592c:	f04f 0101 	mov.w	r1, #1
		if ((consecutive_cnt > 6) ||
   15930:	d9e5      	bls.n	158fe <radio_connect_enable+0xee>
		if (transitions > 24) {
   15932:	2a18      	cmp	r2, #24
   15934:	f240 80f6 	bls.w	15b24 <radio_connect_enable+0x314>
   15938:	b108      	cbz	r0, 1593e <radio_connect_enable+0x12e>
   1593a:	f8cd c014 	str.w	ip, [sp, #20]
   1593e:	3301      	adds	r3, #1
   15940:	9a05      	ldr	r2, [sp, #20]
				access_addr &= ~(BIT(bit_idx + 1) - 1);
   15942:	fa09 f303 	lsl.w	r3, r9, r3
			if (consecutive_bit) {
   15946:	f1be 0f00 	cmp.w	lr, #0
   1594a:	f000 80e8 	beq.w	15b1e <radio_connect_enable+0x30e>
				access_addr &= ~(BIT(bit_idx + 1) - 1);
   1594e:	425b      	negs	r3, r3
   15950:	4013      	ands	r3, r2
				access_addr |= (BIT(bit_idx + 1) - 1);
   15952:	9305      	str	r3, [sp, #20]
	adv_aa_check = access_addr ^ 0x8e89bed6;
   15954:	9b05      	ldr	r3, [sp, #20]
   15956:	a806      	add	r0, sp, #24
   15958:	ea83 0308 	eor.w	r3, r3, r8
   1595c:	f840 3d08 	str.w	r3, [r0, #-8]!
	if (util_ones_count_get((u8_t *)&adv_aa_check,
   15960:	2104      	movs	r1, #4
   15962:	f7f6 f8eb 	bl	bb3c <util_ones_count_get>
   15966:	2801      	cmp	r0, #1
   15968:	f240 80e3 	bls.w	15b32 <radio_connect_enable+0x322>
	if (!((access_addr & 0xFFFF) ^ (access_addr >> 16)) &&
   1596c:	9b05      	ldr	r3, [sp, #20]
   1596e:	b29a      	uxth	r2, r3
   15970:	ebb2 4f13 	cmp.w	r2, r3, lsr #16
   15974:	f000 80d8 	beq.w	15b28 <radio_connect_enable+0x318>
	memcpy(&conn->access_addr[0], &access_addr, sizeof(conn->access_addr));
   15978:	2204      	movs	r2, #4
   1597a:	a905      	add	r1, sp, #20
   1597c:	f104 0010 	add.w	r0, r4, #16
	access_addr = access_addr_get();
   15980:	9305      	str	r3, [sp, #20]
	memcpy(&conn->access_addr[0], &access_addr, sizeof(conn->access_addr));
   15982:	f7ea ff06 	bl	792 <memcpy>
	bt_rand(&conn->crc_init[0], 3);
   15986:	2103      	movs	r1, #3
   15988:	f104 0014 	add.w	r0, r4, #20
   1598c:	f7f6 ff62 	bl	c854 <bt_rand>
	memcpy(&conn->data_chan_map[0], &_radio.data_chan_map[0],
   15990:	2205      	movs	r2, #5
   15992:	497a      	ldr	r1, [pc, #488]	; (15b7c <radio_connect_enable+0x36c>)
   15994:	f104 0017 	add.w	r0, r4, #23
   15998:	f7ea fefb 	bl	792 <memcpy>
	conn->data_chan_count = _radio.data_chan_count;
   1599c:	f895 2727 	ldrb.w	r2, [r5, #1831]	; 0x727
   159a0:	7f63      	ldrb	r3, [r4, #29]
   159a2:	f362 0305 	bfi	r3, r2, #0, #6
	conn->data_chan_sel = 0;
   159a6:	f36f 1386 	bfc	r3, #6, #1
   159aa:	7763      	strb	r3, [r4, #29]
	conn->data_chan_hop = 6;
   159ac:	2206      	movs	r2, #6
	conn->data_chan_use = 0;
   159ae:	2300      	movs	r3, #0
	conn->data_chan_hop = 6;
   159b0:	77a2      	strb	r2, [r4, #30]
	conn->data_chan_use = 0;
   159b2:	77e3      	strb	r3, [r4, #31]
	conn->default_tx_octets = _radio.default_tx_octets;
   159b4:	f8b5 172a 	ldrh.w	r1, [r5, #1834]	; 0x72a
	conn->conn_interval = _radio.scanner.conn_interval;
   159b8:	f8b5 e668 	ldrh.w	lr, [r5, #1640]	; 0x668
	conn->latency = _radio.scanner.conn_latency;
   159bc:	f8b5 066a 	ldrh.w	r0, [r5, #1642]	; 0x66a
	conn->default_tx_octets = _radio.default_tx_octets;
   159c0:	85a1      	strh	r1, [r4, #44]	; 0x2c
	conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   159c2:	211b      	movs	r1, #27
   159c4:	85e1      	strh	r1, [r4, #46]	; 0x2e
	conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   159c6:	8621      	strh	r1, [r4, #48]	; 0x30
	conn->default_tx_time = _radio.default_tx_time;
   159c8:	f8b5 172c 	ldrh.w	r1, [r5, #1836]	; 0x72c
   159cc:	8661      	strh	r1, [r4, #50]	; 0x32
	conn->max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   159ce:	f44f 71a4 	mov.w	r1, #328	; 0x148
	conn->phy_pref_tx = _radio.default_phy_tx;
   159d2:	f8b5 672e 	ldrh.w	r6, [r5, #1838]	; 0x72e
	conn->max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   159d6:	86a1      	strh	r1, [r4, #52]	; 0x34
	conn->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   159d8:	86e1      	strh	r1, [r4, #54]	; 0x36
	conn->phy_pref_tx = _radio.default_phy_tx;
   159da:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
	conn->event_counter = 0;
   159de:	8463      	strh	r3, [r4, #34]	; 0x22
	conn->phy_pref_tx = _radio.default_phy_tx;
   159e0:	f366 0102 	bfi	r1, r6, #0, #3
	conn->phy_tx = BIT(0);
   159e4:	2601      	movs	r6, #1
   159e6:	f366 01c5 	bfi	r1, r6, #3, #3
	conn->phy_flags = 0;
   159ea:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
   159ee:	f363 11c7 	bfi	r1, r3, #7, #1
   159f2:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
	conn->phy_tx_time = BIT(0);
   159f6:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
	conn->conn_interval = _radio.scanner.conn_interval;
   159fa:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
	conn->phy_tx_time = BIT(0);
   159fe:	f366 0102 	bfi	r1, r6, #0, #3
   15a02:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
	conn->phy_pref_rx = _radio.default_phy_rx;
   15a06:	f8b5 c730 	ldrh.w	ip, [r5, #1840]	; 0x730
	conn->latency_prepare = 0;
   15a0a:	8523      	strh	r3, [r4, #40]	; 0x28
	conn->phy_pref_rx = _radio.default_phy_rx;
   15a0c:	b2c9      	uxtb	r1, r1
   15a0e:	f36c 01c5 	bfi	r1, ip, #3, #3
   15a12:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
	conn->phy_rx = BIT(0);
   15a16:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
	conn->latency_event = 0;
   15a1a:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->phy_rx = BIT(0);
   15a1c:	f366 0102 	bfi	r1, r6, #0, #3
   15a20:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
	conn->role = 0;
   15a24:	7f61      	ldrb	r1, [r4, #29]
	conn->connect_expire = 6;
   15a26:	87a2      	strh	r2, [r4, #60]	; 0x3c
	conn->role = 0;
   15a28:	f363 11c7 	bfi	r1, r3, #7, #1
	conn->latency = _radio.scanner.conn_latency;
   15a2c:	84e0      	strh	r0, [r4, #38]	; 0x26
	conn->role = 0;
   15a2e:	7761      	strb	r1, [r4, #29]
	conn->common.fex_valid = 0;
   15a30:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
	conn->master.terminate_ack = 0;
   15a34:	f001 01df 	and.w	r1, r1, #223	; 0xdf
   15a38:	f363 0100 	bfi	r1, r3, #0, #1
   15a3c:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
	conn_interval_us =
   15a40:	f240 42e2 	movw	r2, #1250	; 0x4e2
   15a44:	fb02 f20e 	mul.w	r2, r2, lr
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   15a48:	f8b5 166c 	ldrh.w	r1, [r5, #1644]	; 0x66c
	conn->supervision_expire = 0;
   15a4c:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   15a50:	1e56      	subs	r6, r2, #1
   15a52:	f242 7e10 	movw	lr, #10000	; 0x2710
   15a56:	fb0e 6101 	mla	r1, lr, r1, r6
	conn->procedure_expire = 0;
   15a5a:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   15a5e:	fbb1 f1f2 	udiv	r1, r1, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   15a62:	4b47      	ldr	r3, [pc, #284]	; (15b80 <radio_connect_enable+0x370>)
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   15a64:	87e1      	strh	r1, [r4, #62]	; 0x3e
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   15a66:	4947      	ldr	r1, [pc, #284]	; (15b84 <radio_connect_enable+0x374>)
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   15a68:	4413      	add	r3, r2
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   15a6a:	4411      	add	r1, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   15a6c:	fbb3 f3f2 	udiv	r3, r3, r2
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   15a70:	fbb1 f1f2 	udiv	r1, r1, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   15a74:	b29a      	uxth	r2, r3
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   15a76:	f8a4 1042 	strh.w	r1, [r4, #66]	; 0x42
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   15a7a:	1d81      	adds	r1, r0, #6
   15a7c:	428a      	cmp	r2, r1
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   15a7e:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   15a82:	dc6a      	bgt.n	15b5a <radio_connect_enable+0x34a>
	conn->llcp_version.tx = 0;
   15a84:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   15a88:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
	conn->apto_expire = 0;
   15a8c:	2000      	movs	r0, #0
	conn->llcp_version.rx = 0;
   15a8e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
   15a92:	f360 0341 	bfi	r3, r0, #1, #1
   15a96:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
	conn->llcp_conn_param.disabled = 0;
   15a9a:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
	conn->apto_expire = 0;
   15a9e:	f8a4 004c 	strh.w	r0, [r4, #76]	; 0x4c
	conn->llcp_conn_param.disabled = 0;
   15aa2:	f360 1304 	bfi	r3, r0, #4, #1
   15aa6:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	conn->sn = 0;
   15aaa:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
	conn->appto_expire = 0;
   15aae:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
	conn->empty = 0;
   15ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
   15ab6:	f360 13c7 	bfi	r3, r0, #7, #1
	conn->llcp_req = 0;
   15aba:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
	conn->llcp_ack = 0;
   15abe:	f884 0075 	strb.w	r0, [r4, #117]	; 0x75
	conn->llcp_terminate.req = 0;
   15ac2:	f884 00b0 	strb.w	r0, [r4, #176]	; 0xb0
	conn->llcp_terminate.ack = 0;
   15ac6:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1
	conn->llcp_terminate.reason_peer = 0;
   15aca:	f884 00b3 	strb.w	r0, [r4, #179]	; 0xb3
	conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
   15ace:	f8c4 70b4 	str.w	r7, [r4, #180]	; 0xb4
	conn->llcp_conn_param.req = 0;
   15ad2:	f884 00c0 	strb.w	r0, [r4, #192]	; 0xc0
	conn->llcp_conn_param.ack = 0;
   15ad6:	f884 00c1 	strb.w	r0, [r4, #193]	; 0xc1
	conn->llcp_length.req = 0;
   15ada:	f884 00e8 	strb.w	r0, [r4, #232]	; 0xe8
	conn->llcp_length.ack = 0;
   15ade:	f884 00e9 	strb.w	r0, [r4, #233]	; 0xe9
	conn->llcp_phy.req = 0;
   15ae2:	f884 00f4 	strb.w	r0, [r4, #244]	; 0xf4
	conn->llcp_phy.ack = 0;
   15ae6:	f884 00f5 	strb.w	r0, [r4, #245]	; 0xf5
	conn->empty = 0;
   15aea:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	conn->pkt_tx_head = NULL;
   15aee:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
	conn->pkt_tx_ctrl = NULL;
   15af2:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
	conn->pkt_tx_ctrl_last = NULL;
   15af6:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
	conn->pkt_tx_data = NULL;
   15afa:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
	conn->pkt_tx_last = NULL;
   15afe:	f8c4 014c 	str.w	r0, [r4, #332]	; 0x14c
	conn->packet_tx_head_len = 0;
   15b02:	f884 0150 	strb.w	r0, [r4, #336]	; 0x150
	conn->packet_tx_head_offset = 0;
   15b06:	f884 0151 	strb.w	r0, [r4, #337]	; 0x151
	_radio.scanner.conn = conn;
   15b0a:	f8c5 4674 	str.w	r4, [r5, #1652]	; 0x674
}
   15b0e:	b007      	add	sp, #28
   15b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				access_addr |= BIT(bit_idx);
   15b14:	ea41 0c0c 	orr.w	ip, r1, ip
				consecutive_bit = 1;
   15b18:	f04f 0e01 	mov.w	lr, #1
   15b1c:	e6fe      	b.n	1591c <radio_connect_enable+0x10c>
				access_addr |= (BIT(bit_idx + 1) - 1);
   15b1e:	3b01      	subs	r3, #1
   15b20:	4313      	orrs	r3, r2
   15b22:	e716      	b.n	15952 <radio_connect_enable+0x142>
		if (transitions > 24) {
   15b24:	46f2      	mov	sl, lr
   15b26:	e6d5      	b.n	158d4 <radio_connect_enable+0xc4>
	    !((access_addr & 0xFF) ^ (access_addr >> 24))) {
   15b28:	b2da      	uxtb	r2, r3
	if (!((access_addr & 0xFFFF) ^ (access_addr >> 16)) &&
   15b2a:	ebb2 6f13 	cmp.w	r2, r3, lsr #24
   15b2e:	f47f af23 	bne.w	15978 <radio_connect_enable+0x168>
   15b32:	3e01      	subs	r6, #1
	LL_ASSERT(retry);
   15b34:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   15b38:	f47f aec0 	bne.w	158bc <radio_connect_enable+0xac>
   15b3c:	4b12      	ldr	r3, [pc, #72]	; (15b88 <radio_connect_enable+0x378>)
   15b3e:	9301      	str	r3, [sp, #4]
   15b40:	9300      	str	r3, [sp, #0]
   15b42:	4a12      	ldr	r2, [pc, #72]	; (15b8c <radio_connect_enable+0x37c>)
   15b44:	4b12      	ldr	r3, [pc, #72]	; (15b90 <radio_connect_enable+0x380>)
   15b46:	4913      	ldr	r1, [pc, #76]	; (15b94 <radio_connect_enable+0x384>)
   15b48:	4813      	ldr	r0, [pc, #76]	; (15b98 <radio_connect_enable+0x388>)
   15b4a:	f7ec fba9 	bl	22a0 <printk>
   15b4e:	4040      	eors	r0, r0
   15b50:	f380 8811 	msr	BASEPRI, r0
   15b54:	f04f 0004 	mov.w	r0, #4
   15b58:	df02      	svc	2
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   15b5a:	f5c0 437f 	rsb	r3, r0, #65280	; 0xff00
   15b5e:	33fa      	adds	r3, #250	; 0xfa
   15b60:	441a      	add	r2, r3
   15b62:	b292      	uxth	r2, r2
   15b64:	e78e      	b.n	15a84 <radio_connect_enable+0x274>
		return BT_HCI_ERR_CMD_DISALLOWED;
   15b66:	200c      	movs	r0, #12
   15b68:	e7d1      	b.n	15b0e <radio_connect_enable+0x2fe>
   15b6a:	bf00      	nop
   15b6c:	f3af 8000 	nop.w
   15b70:	1afd498d 	.word	0x1afd498d
   15b74:	00000007 	.word	0x00000007
   15b78:	3b9aca00 	.word	0x3b9aca00
   15b7c:	20001312 	.word	0x20001312
   15b80:	01c9c37f 	.word	0x01c9c37f
   15b84:	026259ff 	.word	0x026259ff
   15b88:	00023dbe 	.word	0x00023dbe
   15b8c:	00022d86 	.word	0x00022d86
   15b90:	00025c6f 	.word	0x00025c6f
   15b94:	000272e8 	.word	0x000272e8
   15b98:	000267c7 	.word	0x000267c7
   15b9c:	20000bf0 	.word	0x20000bf0
   15ba0:	8e89bed6 	.word	0x8e89bed6

00015ba4 <ll_conn_update>:
{
   15ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15ba8:	460c      	mov	r4, r1
   15baa:	4690      	mov	r8, r2
   15bac:	461d      	mov	r5, r3
   15bae:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   15bb2:	f8bd 701c 	ldrh.w	r7, [sp, #28]
	conn = connection_get(handle);
   15bb6:	f7f8 feb5 	bl	e924 <connection_get>
	if (!conn) {
   15bba:	b330      	cbz	r0, 15c0a <ll_conn_update+0x66>
	if (!cmd) {
   15bbc:	2c00      	cmp	r4, #0
   15bbe:	d14a      	bne.n	15c56 <ll_conn_update+0xb2>
		if (!conn->llcp_conn_param.disabled &&
   15bc0:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
   15bc4:	06d9      	lsls	r1, r3, #27
   15bc6:	d407      	bmi.n	15bd8 <ll_conn_update+0x34>
		    (!conn->common.fex_valid ||
   15bc8:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
		if (!conn->llcp_conn_param.disabled &&
   15bcc:	069a      	lsls	r2, r3, #26
   15bce:	d541      	bpl.n	15c54 <ll_conn_update+0xb0>
		     (conn->llcp_features &
   15bd0:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
		    (!conn->common.fex_valid ||
   15bd4:	079b      	lsls	r3, r3, #30
   15bd6:	d43d      	bmi.n	15c54 <ll_conn_update+0xb0>
		} else if (conn->role) {
   15bd8:	f990 301d 	ldrsb.w	r3, [r0, #29]
   15bdc:	2b00      	cmp	r3, #0
   15bde:	da17      	bge.n	15c10 <ll_conn_update+0x6c>
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   15be0:	201a      	movs	r0, #26
   15be2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if ((conn->llcp_conn_param.req ==
   15be6:	428b      	cmp	r3, r1
   15be8:	d00f      	beq.n	15c0a <ll_conn_update+0x66>
			    (conn->llcp_conn_param.state !=
   15bea:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
			     conn->llcp_conn_param.ack) ||
   15bee:	f003 0207 	and.w	r2, r3, #7
   15bf2:	2a03      	cmp	r2, #3
   15bf4:	d109      	bne.n	15c0a <ll_conn_update+0x66>
			conn->llcp_conn_param.state = cmd;
   15bf6:	f364 0302 	bfi	r3, r4, #0, #3
			conn->llcp_conn_param.cmd = 1;
   15bfa:	b2db      	uxtb	r3, r3
   15bfc:	f043 0308 	orr.w	r3, r3, #8
			conn->llcp_conn_param.status = status;
   15c00:	f880 80c3 	strb.w	r8, [r0, #195]	; 0xc3
			conn->llcp_conn_param.cmd = 1;
   15c04:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
   15c08:	e021      	b.n	15c4e <ll_conn_update+0xaa>
		return BT_HCI_ERR_CMD_DISALLOWED;
   15c0a:	200c      	movs	r0, #12
   15c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->llcp_req != conn->llcp_ack) {
   15c10:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
   15c14:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
   15c18:	429a      	cmp	r2, r3
   15c1a:	d1f6      	bne.n	15c0a <ll_conn_update+0x66>
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   15c1c:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
		conn->llcp.conn_upd.interval = interval;
   15c20:	f8a0 507a 	strh.w	r5, [r0, #122]	; 0x7a
		conn->llcp.conn_upd.win_size = 1;
   15c24:	2401      	movs	r4, #1
		conn->llcp.conn_upd.win_offset_us = 0;
   15c26:	2100      	movs	r1, #0
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   15c28:	f364 0301 	bfi	r3, r4, #0, #2
		conn->llcp.conn_upd.is_internal = 0;
   15c2c:	f361 0382 	bfi	r3, r1, #2, #1
		conn->llcp_req++;
   15c30:	4422      	add	r2, r4
		conn->llcp.conn_upd.win_size = 1;
   15c32:	f880 4088 	strb.w	r4, [r0, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
   15c36:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
		conn->llcp.conn_upd.latency = latency;
   15c3a:	f8a0 607c 	strh.w	r6, [r0, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = timeout;
   15c3e:	f8a0 707e 	strh.w	r7, [r0, #126]	; 0x7e
		conn->llcp.conn_upd.is_internal = 0;
   15c42:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
   15c46:	f880 4076 	strb.w	r4, [r0, #118]	; 0x76
		conn->llcp_req++;
   15c4a:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
	return 0;
   15c4e:	2000      	movs	r0, #0
   15c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			cmd++;
   15c54:	2401      	movs	r4, #1
		cmd--;
   15c56:	3c01      	subs	r4, #1
		if (cmd) {
   15c58:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   15c5c:	f890 30c0 	ldrb.w	r3, [r0, #192]	; 0xc0
   15c60:	f890 10c1 	ldrb.w	r1, [r0, #193]	; 0xc1
   15c64:	d1bf      	bne.n	15be6 <ll_conn_update+0x42>
			if (conn->llcp_conn_param.req !=
   15c66:	4299      	cmp	r1, r3
   15c68:	d1cf      	bne.n	15c0a <ll_conn_update+0x66>
			conn->llcp_conn_param.state = cmd;
   15c6a:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.status = 0;
   15c6e:	f880 40c3 	strb.w	r4, [r0, #195]	; 0xc3
			conn->llcp_conn_param.state = cmd;
   15c72:	f364 0302 	bfi	r3, r4, #0, #3
			conn->llcp_conn_param.cmd = 1;
   15c76:	b2db      	uxtb	r3, r3
   15c78:	f043 0308 	orr.w	r3, r3, #8
			conn->llcp_conn_param.req++;
   15c7c:	3101      	adds	r1, #1
			conn->llcp_conn_param.interval = interval;
   15c7e:	f8a0 50c4 	strh.w	r5, [r0, #196]	; 0xc4
			conn->llcp_conn_param.latency = latency;
   15c82:	f8a0 60c6 	strh.w	r6, [r0, #198]	; 0xc6
			conn->llcp_conn_param.timeout = timeout;
   15c86:	f8a0 70c8 	strh.w	r7, [r0, #200]	; 0xc8
			conn->llcp_conn_param.cmd = 1;
   15c8a:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.req++;
   15c8e:	f880 10c0 	strb.w	r1, [r0, #192]	; 0xc0
   15c92:	e7dc      	b.n	15c4e <ll_conn_update+0xaa>

00015c94 <ll_chm_update>:
{
   15c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	memcpy(&_radio.data_chan_map[0], chm,
   15c98:	4c1e      	ldr	r4, [pc, #120]	; (15d14 <ll_chm_update+0x80>)
   15c9a:	4601      	mov	r1, r0
   15c9c:	2205      	movs	r2, #5
{
   15c9e:	4605      	mov	r5, r0
	memcpy(&_radio.data_chan_map[0], chm,
   15ca0:	f204 7022 	addw	r0, r4, #1826	; 0x722
   15ca4:	f7ea fd75 	bl	792 <memcpy>
		util_ones_count_get(&_radio.data_chan_map[0],
   15ca8:	f204 7022 	addw	r0, r4, #1826	; 0x722
   15cac:	2105      	movs	r1, #5
   15cae:	f7f5 ff45 	bl	bb3c <util_ones_count_get>
	_radio.data_chan_count =
   15cb2:	f884 0727 	strb.w	r0, [r4, #1831]	; 0x727
   15cb6:	f894 4718 	ldrb.w	r4, [r4, #1816]	; 0x718
   15cba:	3c01      	subs	r4, #1
   15cbc:	b2e4      	uxtb	r4, r4
		conn->llcp.chan_map.initiate = 1;
   15cbe:	2701      	movs	r7, #1
		conn->llcp_type = LLCP_CHAN_MAP;
   15cc0:	f04f 0802 	mov.w	r8, #2
	while (instance--) {
   15cc4:	2cff      	cmp	r4, #255	; 0xff
   15cc6:	d102      	bne.n	15cce <ll_chm_update+0x3a>
	return 0;
   15cc8:	2000      	movs	r0, #0
   15cca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conn = connection_get(instance);
   15cce:	4620      	mov	r0, r4
   15cd0:	f7f8 fe28 	bl	e924 <connection_get>
		if (!conn || conn->role) {
   15cd4:	4606      	mov	r6, r0
   15cd6:	b1b8      	cbz	r0, 15d08 <ll_chm_update+0x74>
   15cd8:	f990 301d 	ldrsb.w	r3, [r0, #29]
   15cdc:	2b00      	cmp	r3, #0
   15cde:	db13      	blt.n	15d08 <ll_chm_update+0x74>
		if (conn->llcp_req != conn->llcp_ack) {
   15ce0:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   15ce4:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   15ce8:	429a      	cmp	r2, r3
   15cea:	d110      	bne.n	15d0e <ll_chm_update+0x7a>
		memcpy(&conn->llcp.chan_map.chm[0], chm,
   15cec:	2205      	movs	r2, #5
   15cee:	4629      	mov	r1, r5
   15cf0:	3079      	adds	r0, #121	; 0x79
   15cf2:	f7ea fd4e 	bl	792 <memcpy>
		conn->llcp_req++;
   15cf6:	f896 3074 	ldrb.w	r3, [r6, #116]	; 0x74
		conn->llcp.chan_map.initiate = 1;
   15cfa:	f886 7078 	strb.w	r7, [r6, #120]	; 0x78
		conn->llcp_req++;
   15cfe:	3301      	adds	r3, #1
		conn->llcp_type = LLCP_CHAN_MAP;
   15d00:	f886 8076 	strb.w	r8, [r6, #118]	; 0x76
		conn->llcp_req++;
   15d04:	f886 3074 	strb.w	r3, [r6, #116]	; 0x74
   15d08:	3c01      	subs	r4, #1
   15d0a:	b2e4      	uxtb	r4, r4
   15d0c:	e7da      	b.n	15cc4 <ll_chm_update+0x30>
			return 1;
   15d0e:	2001      	movs	r0, #1
}
   15d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15d14:	20000bf0 	.word	0x20000bf0

00015d18 <ll_chm_get>:
{
   15d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15d1a:	460d      	mov	r5, r1
	conn = connection_get(handle);
   15d1c:	f7f8 fe02 	bl	e924 <connection_get>
	if (!conn) {
   15d20:	4604      	mov	r4, r0
   15d22:	b160      	cbz	r0, 15d3e <ll_chm_get+0x26>
		conn->chm_update = 0;
   15d24:	2700      	movs	r7, #0
		memcpy(chm, conn->data_chan_map, sizeof(conn->data_chan_map));
   15d26:	f100 0617 	add.w	r6, r0, #23
		conn->chm_update = 0;
   15d2a:	7727      	strb	r7, [r4, #28]
		memcpy(chm, conn->data_chan_map, sizeof(conn->data_chan_map));
   15d2c:	2205      	movs	r2, #5
   15d2e:	4631      	mov	r1, r6
   15d30:	4628      	mov	r0, r5
   15d32:	f7ea fd2e 	bl	792 <memcpy>
	} while (conn->chm_update);
   15d36:	7f20      	ldrb	r0, [r4, #28]
   15d38:	2800      	cmp	r0, #0
   15d3a:	d1f6      	bne.n	15d2a <ll_chm_get+0x12>
   15d3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
   15d3e:	2001      	movs	r0, #1
}
   15d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00015d42 <ll_start_enc_req_send>:
{
   15d42:	b570      	push	{r4, r5, r6, lr}
   15d44:	460d      	mov	r5, r1
   15d46:	4616      	mov	r6, r2
	conn = connection_get(handle);
   15d48:	f7f8 fdec 	bl	e924 <connection_get>
	if (!conn) {
   15d4c:	4604      	mov	r4, r0
   15d4e:	b908      	cbnz	r0, 15d54 <ll_start_enc_req_send+0x12>
		return 1;
   15d50:	2001      	movs	r0, #1
   15d52:	bd70      	pop	{r4, r5, r6, pc}
	if (error_code) {
   15d54:	b315      	cbz	r5, 15d9c <ll_start_enc_req_send+0x5a>
		if (conn->refresh == 0) {
   15d56:	f890 00f8 	ldrb.w	r0, [r0, #248]	; 0xf8
   15d5a:	f010 0040 	ands.w	r0, r0, #64	; 0x40
   15d5e:	d110      	bne.n	15d82 <ll_start_enc_req_send+0x40>
			if (conn->llcp_req != conn->llcp_ack) {
   15d60:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
   15d64:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
   15d68:	4293      	cmp	r3, r2
   15d6a:	d1f1      	bne.n	15d50 <ll_start_enc_req_send+0xe>
			conn->llcp_req++;
   15d6c:	3301      	adds	r3, #1
			conn->llcp_type = LLCP_ENCRYPTION;
   15d6e:	2203      	movs	r2, #3
			conn->llcp.encryption.error_code = error_code;
   15d70:	f884 5079 	strb.w	r5, [r4, #121]	; 0x79
			conn->llcp.encryption.initiate = 0;
   15d74:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
			conn->llcp_req++;
   15d78:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
			conn->llcp_type = LLCP_ENCRYPTION;
   15d7c:	f884 2076 	strb.w	r2, [r4, #118]	; 0x76
   15d80:	bd70      	pop	{r4, r5, r6, pc}
			if (conn->llcp_terminate.ack !=
   15d82:	f894 20b1 	ldrb.w	r2, [r4, #177]	; 0xb1
   15d86:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
   15d8a:	4293      	cmp	r3, r2
   15d8c:	d1e0      	bne.n	15d50 <ll_start_enc_req_send+0xe>
			conn->llcp_terminate.req++;
   15d8e:	3301      	adds	r3, #1
			conn->llcp_terminate.reason_own = error_code;
   15d90:	f884 50b2 	strb.w	r5, [r4, #178]	; 0xb2
			conn->llcp_terminate.req++;
   15d94:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
	return 0;
   15d98:	2000      	movs	r0, #0
   15d9a:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(&conn->llcp.encryption.ltk[0], ltk,
   15d9c:	2210      	movs	r2, #16
   15d9e:	4631      	mov	r1, r6
   15da0:	3084      	adds	r0, #132	; 0x84
   15da2:	f7ea fcf6 	bl	792 <memcpy>
		if (conn->llcp_req != conn->llcp_ack) {
   15da6:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
   15daa:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
   15dae:	4293      	cmp	r3, r2
   15db0:	d1ce      	bne.n	15d50 <ll_start_enc_req_send+0xe>
		conn->llcp_type = LLCP_ENCRYPTION;
   15db2:	2203      	movs	r2, #3
		conn->llcp_req++;
   15db4:	3301      	adds	r3, #1
		conn->llcp.encryption.error_code = 0;
   15db6:	f884 5079 	strb.w	r5, [r4, #121]	; 0x79
		conn->llcp.encryption.initiate = 0;
   15dba:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_ENCRYPTION;
   15dbe:	f884 2076 	strb.w	r2, [r4, #118]	; 0x76
		conn->llcp_req++;
   15dc2:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
   15dc6:	e7e7      	b.n	15d98 <ll_start_enc_req_send+0x56>

00015dc8 <ll_feature_req_send>:
{
   15dc8:	b508      	push	{r3, lr}
	conn = connection_get(handle);
   15dca:	f7f8 fdab 	bl	e924 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   15dce:	b168      	cbz	r0, 15dec <ll_feature_req_send+0x24>
   15dd0:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   15dd4:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   15dd8:	4293      	cmp	r3, r2
   15dda:	d107      	bne.n	15dec <ll_feature_req_send+0x24>
	conn->llcp_req++;
   15ddc:	3301      	adds	r3, #1
	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
   15dde:	2204      	movs	r2, #4
	conn->llcp_req++;
   15de0:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
   15de4:	f880 2076 	strb.w	r2, [r0, #118]	; 0x76
	return 0;
   15de8:	2000      	movs	r0, #0
   15dea:	bd08      	pop	{r3, pc}
		return 1;
   15dec:	2001      	movs	r0, #1
}
   15dee:	bd08      	pop	{r3, pc}

00015df0 <ll_version_ind_send>:
{
   15df0:	b508      	push	{r3, lr}
	conn = connection_get(handle);
   15df2:	f7f8 fd97 	bl	e924 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   15df6:	b168      	cbz	r0, 15e14 <ll_version_ind_send+0x24>
   15df8:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   15dfc:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   15e00:	4293      	cmp	r3, r2
   15e02:	d107      	bne.n	15e14 <ll_version_ind_send+0x24>
	conn->llcp_req++;
   15e04:	3301      	adds	r3, #1
	conn->llcp_type = LLCP_VERSION_EXCHANGE;
   15e06:	2205      	movs	r2, #5
	conn->llcp_req++;
   15e08:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
	conn->llcp_type = LLCP_VERSION_EXCHANGE;
   15e0c:	f880 2076 	strb.w	r2, [r0, #118]	; 0x76
	return 0;
   15e10:	2000      	movs	r0, #0
   15e12:	bd08      	pop	{r3, pc}
		return 1;
   15e14:	2001      	movs	r0, #1
}
   15e16:	bd08      	pop	{r3, pc}

00015e18 <ll_terminate_ind_send>:
{
   15e18:	b510      	push	{r4, lr}
   15e1a:	460c      	mov	r4, r1
	conn = connection_get(handle);
   15e1c:	f7f8 fd82 	bl	e924 <connection_get>
	if (!conn || (conn->llcp_terminate.ack != conn->llcp_terminate.req)) {
   15e20:	b160      	cbz	r0, 15e3c <ll_terminate_ind_send+0x24>
   15e22:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
   15e26:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
   15e2a:	4293      	cmp	r3, r2
   15e2c:	d106      	bne.n	15e3c <ll_terminate_ind_send+0x24>
	conn->llcp_terminate.req++;
   15e2e:	3301      	adds	r3, #1
	conn->llcp_terminate.reason_own = reason;
   15e30:	f880 40b2 	strb.w	r4, [r0, #178]	; 0xb2
	conn->llcp_terminate.req++;
   15e34:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
	return 0;
   15e38:	2000      	movs	r0, #0
   15e3a:	bd10      	pop	{r4, pc}
		return 1;
   15e3c:	2001      	movs	r0, #1
}
   15e3e:	bd10      	pop	{r4, pc}

00015e40 <ll_tx_pwr_lvl_get>:
{
   15e40:	b510      	push	{r4, lr}
   15e42:	4614      	mov	r4, r2
	conn = connection_get(handle);
   15e44:	f7f8 fd6e 	bl	e924 <connection_get>
	if (!conn) {
   15e48:	b110      	cbz	r0, 15e50 <ll_tx_pwr_lvl_get+0x10>
	*tx_pwr_lvl = 0;
   15e4a:	2000      	movs	r0, #0
   15e4c:	7020      	strb	r0, [r4, #0]
	return 0;
   15e4e:	bd10      	pop	{r4, pc}
		return 1;
   15e50:	2001      	movs	r0, #1
}
   15e52:	bd10      	pop	{r4, pc}

00015e54 <ll_apto_get>:
{
   15e54:	b510      	push	{r4, lr}
   15e56:	460c      	mov	r4, r1
	conn = connection_get(handle);
   15e58:	f7f8 fd64 	bl	e924 <connection_get>
	if (!conn) {
   15e5c:	b160      	cbz	r0, 15e78 <ll_apto_get+0x24>
	*apto = conn->apto_reload * conn->conn_interval * 125 / 1000;
   15e5e:	8c83      	ldrh	r3, [r0, #36]	; 0x24
   15e60:	f8b0 204a 	ldrh.w	r2, [r0, #74]	; 0x4a
   15e64:	435a      	muls	r2, r3
   15e66:	237d      	movs	r3, #125	; 0x7d
   15e68:	4353      	muls	r3, r2
	return 0;
   15e6a:	2000      	movs	r0, #0
	*apto = conn->apto_reload * conn->conn_interval * 125 / 1000;
   15e6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   15e70:	fb93 f3f2 	sdiv	r3, r3, r2
   15e74:	8023      	strh	r3, [r4, #0]
	return 0;
   15e76:	bd10      	pop	{r4, pc}
		return 1;
   15e78:	2001      	movs	r0, #1
}
   15e7a:	bd10      	pop	{r4, pc}

00015e7c <ll_apto_set>:
{
   15e7c:	b510      	push	{r4, lr}
   15e7e:	460c      	mov	r4, r1
	conn = connection_get(handle);
   15e80:	f7f8 fd50 	bl	e924 <connection_get>
	if (!conn) {
   15e84:	b170      	cbz	r0, 15ea4 <ll_apto_set+0x28>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10 * 1000,
   15e86:	8c82      	ldrh	r2, [r0, #36]	; 0x24
   15e88:	f240 43e2 	movw	r3, #1250	; 0x4e2
   15e8c:	4353      	muls	r3, r2
   15e8e:	f242 7110 	movw	r1, #10000	; 0x2710
   15e92:	fb01 3404 	mla	r4, r1, r4, r3
   15e96:	3c01      	subs	r4, #1
   15e98:	fb94 f4f3 	sdiv	r4, r4, r3
   15e9c:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
	return 0;
   15ea0:	2000      	movs	r0, #0
   15ea2:	bd10      	pop	{r4, pc}
		return 1;
   15ea4:	2001      	movs	r0, #1
}
   15ea6:	bd10      	pop	{r4, pc}

00015ea8 <ll_length_req_send>:
{
   15ea8:	b570      	push	{r4, r5, r6, lr}
   15eaa:	460e      	mov	r6, r1
   15eac:	4615      	mov	r5, r2
	conn = connection_get(handle);
   15eae:	f7f8 fd39 	bl	e924 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   15eb2:	b1d0      	cbz	r0, 15eea <ll_length_req_send+0x42>
   15eb4:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   15eb8:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   15ebc:	429a      	cmp	r2, r3
   15ebe:	d114      	bne.n	15eea <ll_length_req_send+0x42>
	    (conn->llcp_length.req != conn->llcp_length.ack)) {
   15ec0:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   15ec4:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   15ec8:	4293      	cmp	r3, r2
   15eca:	d10e      	bne.n	15eea <ll_length_req_send+0x42>
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   15ecc:	f890 40ea 	ldrb.w	r4, [r0, #234]	; 0xea
	conn->llcp_length.tx_octets = tx_octets;
   15ed0:	f8a0 60ee 	strh.w	r6, [r0, #238]	; 0xee
	conn->llcp_length.req++;
   15ed4:	3301      	adds	r3, #1
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   15ed6:	f36f 0401 	bfc	r4, #0, #2
	conn->llcp_length.req++;
   15eda:	f880 30e8 	strb.w	r3, [r0, #232]	; 0xe8
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   15ede:	f880 40ea 	strb.w	r4, [r0, #234]	; 0xea
	conn->llcp_length.tx_time = tx_time;
   15ee2:	f8a0 50f2 	strh.w	r5, [r0, #242]	; 0xf2
	return 0;
   15ee6:	2000      	movs	r0, #0
   15ee8:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   15eea:	2001      	movs	r0, #1
}
   15eec:	bd70      	pop	{r4, r5, r6, pc}
	...

00015ef0 <ll_length_default_get>:
	*max_tx_octets = _radio.default_tx_octets;
   15ef0:	4b03      	ldr	r3, [pc, #12]	; (15f00 <ll_length_default_get+0x10>)
   15ef2:	f8b3 272a 	ldrh.w	r2, [r3, #1834]	; 0x72a
   15ef6:	8002      	strh	r2, [r0, #0]
	*max_tx_time = _radio.default_tx_time;
   15ef8:	f8b3 372c 	ldrh.w	r3, [r3, #1836]	; 0x72c
   15efc:	800b      	strh	r3, [r1, #0]
   15efe:	4770      	bx	lr
   15f00:	20000bf0 	.word	0x20000bf0

00015f04 <ll_length_default_set>:
	_radio.default_tx_octets = max_tx_octets;
   15f04:	4b03      	ldr	r3, [pc, #12]	; (15f14 <ll_length_default_set+0x10>)
   15f06:	f8a3 072a 	strh.w	r0, [r3, #1834]	; 0x72a
	_radio.default_tx_time = max_tx_time;
   15f0a:	f8a3 172c 	strh.w	r1, [r3, #1836]	; 0x72c
}
   15f0e:	2000      	movs	r0, #0
   15f10:	4770      	bx	lr
   15f12:	bf00      	nop
   15f14:	20000bf0 	.word	0x20000bf0

00015f18 <ll_length_max_get>:
{
   15f18:	b510      	push	{r4, lr}
	*max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   15f1a:	241b      	movs	r4, #27
   15f1c:	8004      	strh	r4, [r0, #0]
	*max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   15f1e:	f44f 6029 	mov.w	r0, #2704	; 0xa90
   15f22:	8008      	strh	r0, [r1, #0]
	*max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   15f24:	8014      	strh	r4, [r2, #0]
	*max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   15f26:	8018      	strh	r0, [r3, #0]
   15f28:	bd10      	pop	{r4, pc}

00015f2a <ll_phy_get>:
{
   15f2a:	b538      	push	{r3, r4, r5, lr}
   15f2c:	460d      	mov	r5, r1
   15f2e:	4614      	mov	r4, r2
	conn = connection_get(handle);
   15f30:	f7f8 fcf8 	bl	e924 <connection_get>
	if (!conn) {
   15f34:	b158      	cbz	r0, 15f4e <ll_phy_get+0x24>
	*tx = conn->phy_tx;
   15f36:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   15f3a:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   15f3e:	702b      	strb	r3, [r5, #0]
	*rx = conn->phy_rx;
   15f40:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
   15f44:	f3c3 0302 	ubfx	r3, r3, #0, #3
   15f48:	7023      	strb	r3, [r4, #0]
	return 0;
   15f4a:	2000      	movs	r0, #0
   15f4c:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
   15f4e:	2001      	movs	r0, #1
}
   15f50:	bd38      	pop	{r3, r4, r5, pc}
	...

00015f54 <ll_phy_default_set>:
	_radio.default_phy_tx = tx;
   15f54:	4b03      	ldr	r3, [pc, #12]	; (15f64 <ll_phy_default_set+0x10>)
   15f56:	f8a3 072e 	strh.w	r0, [r3, #1838]	; 0x72e
	_radio.default_phy_rx = rx;
   15f5a:	f8a3 1730 	strh.w	r1, [r3, #1840]	; 0x730
}
   15f5e:	2000      	movs	r0, #0
   15f60:	4770      	bx	lr
   15f62:	bf00      	nop
   15f64:	20000bf0 	.word	0x20000bf0

00015f68 <ll_phy_req_send>:
{
   15f68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15f6c:	4689      	mov	r9, r1
   15f6e:	4690      	mov	r8, r2
   15f70:	461f      	mov	r7, r3
	conn = connection_get(handle);
   15f72:	f7f8 fcd7 	bl	e924 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   15f76:	b320      	cbz	r0, 15fc2 <ll_phy_req_send+0x5a>
   15f78:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   15f7c:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   15f80:	429a      	cmp	r2, r3
   15f82:	d11e      	bne.n	15fc2 <ll_phy_req_send+0x5a>
	    (conn->llcp_phy.req != conn->llcp_phy.ack)) {
   15f84:	f890 30f4 	ldrb.w	r3, [r0, #244]	; 0xf4
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   15f88:	f890 50f5 	ldrb.w	r5, [r0, #245]	; 0xf5
   15f8c:	429d      	cmp	r5, r3
   15f8e:	d118      	bne.n	15fc2 <ll_phy_req_send+0x5a>
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   15f90:	f890 40f6 	ldrb.w	r4, [r0, #246]	; 0xf6
	conn->llcp_phy.cmd = 1;
   15f94:	f890 60f7 	ldrb.w	r6, [r0, #247]	; 0xf7
	conn->llcp_phy.tx = tx;
   15f98:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
   15f9c:	f369 0484 	bfi	r4, r9, #2, #3
	conn->llcp_phy.flags = flags;
   15fa0:	f046 0102 	orr.w	r1, r6, #2
   15fa4:	f368 0100 	bfi	r1, r8, #0, #1
	conn->llcp_phy.rx = rx;
   15fa8:	4622      	mov	r2, r4
	conn->llcp_phy.req++;
   15faa:	3501      	adds	r5, #1
	conn->llcp_phy.flags = flags;
   15fac:	f880 10f7 	strb.w	r1, [r0, #247]	; 0xf7
	conn->llcp_phy.rx = rx;
   15fb0:	f367 1247 	bfi	r2, r7, #5, #3
	conn->llcp_phy.req++;
   15fb4:	f880 50f4 	strb.w	r5, [r0, #244]	; 0xf4
	conn->llcp_phy.rx = rx;
   15fb8:	f880 20f6 	strb.w	r2, [r0, #246]	; 0xf6
	return 0;
   15fbc:	2000      	movs	r0, #0
   15fbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return 1;
   15fc2:	2001      	movs	r0, #1
}
   15fc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00015fc8 <ll_rx_get>:
{
   15fc8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   15fcc:	4605      	mov	r5, r0
   15fce:	4608      	mov	r0, r1
	if (_radio.link_rx_head != _radio.link_rx_tail) {
   15fd0:	4918      	ldr	r1, [pc, #96]	; (16034 <ll_rx_get+0x6c>)
   15fd2:	f8d1 3754 	ldr.w	r3, [r1, #1876]	; 0x754
   15fd6:	f8d1 2758 	ldr.w	r2, [r1, #1880]	; 0x758
   15fda:	4293      	cmp	r3, r2
   15fdc:	460f      	mov	r7, r1
   15fde:	d01f      	beq.n	16020 <ll_rx_get+0x58>
		_node_rx = _radio.link_rx_head->mem;
   15fe0:	f8d3 8004 	ldr.w	r8, [r3, #4]
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
   15fe4:	f201 717f 	addw	r1, r1, #1919	; 0x77f
   15fe8:	f898 2000 	ldrb.w	r2, [r8]
   15fec:	f7f8 fc50 	bl	e890 <tx_cmplt_get>
		if (!cmplt) {
   15ff0:	4604      	mov	r4, r0
   15ff2:	b9e0      	cbnz	r0, 1602e <ll_rx_get+0x66>
			first = _radio.packet_release_first;
   15ff4:	ae02      	add	r6, sp, #8
   15ff6:	f897 377f 	ldrb.w	r3, [r7, #1919]	; 0x77f
   15ffa:	f806 3d03 	strb.w	r3, [r6, #-3]!
				cmplt_curr = tx_cmplt_get(&h, &first,
   15ffe:	f897 2780 	ldrb.w	r2, [r7, #1920]	; 0x780
   16002:	4631      	mov	r1, r6
   16004:	f10d 0006 	add.w	r0, sp, #6
   16008:	f7f8 fc42 	bl	e890 <tx_cmplt_get>
				 (cmplt_prev != cmplt_curr));
   1600c:	b934      	cbnz	r4, 1601c <ll_rx_get+0x54>
			} while ((cmplt_prev != 0) ||
   1600e:	b928      	cbnz	r0, 1601c <ll_rx_get+0x54>
			*node_rx = _node_rx;
   16010:	f8c5 8000 	str.w	r8, [r5]
}
   16014:	4620      	mov	r0, r4
   16016:	b002      	add	sp, #8
   16018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
   1601c:	4604      	mov	r4, r0
   1601e:	e7ee      	b.n	15ffe <ll_rx_get+0x36>
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
   16020:	f891 2780 	ldrb.w	r2, [r1, #1920]	; 0x780
   16024:	f201 717f 	addw	r1, r1, #1919	; 0x77f
   16028:	f7f8 fc32 	bl	e890 <tx_cmplt_get>
   1602c:	4604      	mov	r4, r0
		*node_rx = NULL;
   1602e:	2300      	movs	r3, #0
   16030:	602b      	str	r3, [r5, #0]
   16032:	e7ef      	b.n	16014 <ll_rx_get+0x4c>
   16034:	20000bf0 	.word	0x20000bf0

00016038 <ll_rx_mem_release>:
{
   16038:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
			mem_release(_node_rx_free,
   1603c:	4c1c      	ldr	r4, [pc, #112]	; (160b0 <ll_rx_mem_release+0x78>)
{
   1603e:	4605      	mov	r5, r0
	_node_rx = *node_rx;
   16040:	6800      	ldr	r0, [r0, #0]
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   16042:	f5a4 66e7 	sub.w	r6, r4, #1848	; 0x738
			mem_release(conn, &_radio.conn_free);
   16046:	f1a4 0724 	sub.w	r7, r4, #36	; 0x24
	while (_node_rx) {
   1604a:	b930      	cbnz	r0, 1605a <ll_rx_mem_release+0x22>
	*node_rx = _node_rx;
   1604c:	6028      	str	r0, [r5, #0]
	packet_rx_allocate(0xff);
   1604e:	20ff      	movs	r0, #255	; 0xff
}
   16050:	b002      	add	sp, #8
   16052:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	packet_rx_allocate(0xff);
   16056:	f7f8 bb45 	b.w	e6e4 <packet_rx_allocate>
		switch (_node_rx_free->hdr.type) {
   1605a:	7902      	ldrb	r2, [r0, #4]
		_node_rx = _node_rx->hdr.onion.next;
   1605c:	f8d0 8000 	ldr.w	r8, [r0]
   16060:	2a0c      	cmp	r2, #12
   16062:	d807      	bhi.n	16074 <ll_rx_mem_release+0x3c>
   16064:	2301      	movs	r3, #1
   16066:	4093      	lsls	r3, r2
   16068:	f641 727e 	movw	r2, #8062	; 0x1f7e
   1606c:	4213      	tst	r3, r2
   1606e:	d110      	bne.n	16092 <ll_rx_mem_release+0x5a>
   16070:	061b      	lsls	r3, r3, #24
   16072:	d413      	bmi.n	1609c <ll_rx_mem_release+0x64>
			LL_ASSERT(0);
   16074:	4b0f      	ldr	r3, [pc, #60]	; (160b4 <ll_rx_mem_release+0x7c>)
   16076:	9301      	str	r3, [sp, #4]
   16078:	9300      	str	r3, [sp, #0]
   1607a:	4a0f      	ldr	r2, [pc, #60]	; (160b8 <ll_rx_mem_release+0x80>)
   1607c:	4b0f      	ldr	r3, [pc, #60]	; (160bc <ll_rx_mem_release+0x84>)
   1607e:	4910      	ldr	r1, [pc, #64]	; (160c0 <ll_rx_mem_release+0x88>)
   16080:	4810      	ldr	r0, [pc, #64]	; (160c4 <ll_rx_mem_release+0x8c>)
   16082:	f7ec f90d 	bl	22a0 <printk>
   16086:	4040      	eors	r0, r0
   16088:	f380 8811 	msr	BASEPRI, r0
   1608c:	f04f 0004 	mov.w	r0, #4
   16090:	df02      	svc	2
			mem_release(_node_rx_free,
   16092:	4621      	mov	r1, r4
			mem_release(conn, &_radio.conn_free);
   16094:	f7f5 fbc1 	bl	b81a <mem_release>
{
   16098:	4640      	mov	r0, r8
   1609a:	e7d6      	b.n	1604a <ll_rx_mem_release+0x12>
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   1609c:	88c2      	ldrh	r2, [r0, #6]
   1609e:	f8d6 0710 	ldr.w	r0, [r6, #1808]	; 0x710
   160a2:	f44f 71aa 	mov.w	r1, #340	; 0x154
   160a6:	f7f5 fbd3 	bl	b850 <mem_get>
			mem_release(conn, &_radio.conn_free);
   160aa:	4639      	mov	r1, r7
   160ac:	e7f2      	b.n	16094 <ll_rx_mem_release+0x5c>
   160ae:	bf00      	nop
   160b0:	20001328 	.word	0x20001328
   160b4:	00023dbe 	.word	0x00023dbe
   160b8:	00022d86 	.word	0x00022d86
   160bc:	00025ec2 	.word	0x00025ec2
   160c0:	000272e8 	.word	0x000272e8
   160c4:	00023fb5 	.word	0x00023fb5

000160c8 <do_radio_rx_fc_set>:
	if (req == ack) {
   160c8:	4291      	cmp	r1, r2
{
   160ca:	b510      	push	{r4, lr}
   160cc:	4b14      	ldr	r3, [pc, #80]	; (16120 <do_radio_rx_fc_set+0x58>)
	if (req == ack) {
   160ce:	d119      	bne.n	16104 <do_radio_rx_fc_set+0x3c>
		if (_radio.link_rx_head == _radio.link_rx_tail) {
   160d0:	f8d3 2758 	ldr.w	r2, [r3, #1880]	; 0x758
   160d4:	f8d3 4754 	ldr.w	r4, [r3, #1876]	; 0x754
   160d8:	4294      	cmp	r4, r2
   160da:	d111      	bne.n	16100 <do_radio_rx_fc_set+0x38>
			if (ack1 == 0) {
   160dc:	2900      	cmp	r1, #0
				ack1 = TRIPLE_BUFFER_SIZE;
   160de:	bf14      	ite	ne
   160e0:	460a      	movne	r2, r1
   160e2:	2203      	moveq	r2, #3
			_radio.fc_handle[--ack1] = handle;
   160e4:	3a01      	subs	r2, #1
   160e6:	b2d2      	uxtb	r2, r2
   160e8:	eb03 0442 	add.w	r4, r3, r2, lsl #1
			_radio.fc_ack = ack1;
   160ec:	f883 2789 	strb.w	r2, [r3, #1929]	; 0x789
			if (req != _radio.fc_req) {
   160f0:	f893 2788 	ldrb.w	r2, [r3, #1928]	; 0x788
			_radio.fc_handle[--ack1] = handle;
   160f4:	f8a4 0782 	strh.w	r0, [r4, #1922]	; 0x782
			if (req != _radio.fc_req) {
   160f8:	4291      	cmp	r1, r2
   160fa:	d00f      	beq.n	1611c <do_radio_rx_fc_set+0x54>
				_radio.fc_ack = ack;
   160fc:	f883 1789 	strb.w	r1, [r3, #1929]	; 0x789
			return 1;
   16100:	2001      	movs	r0, #1
   16102:	bd10      	pop	{r4, pc}
	} else if (((req == 0) &&
   16104:	b929      	cbnz	r1, 16112 <do_radio_rx_fc_set+0x4a>
   16106:	f8b3 3786 	ldrh.w	r3, [r3, #1926]	; 0x786
				return 1;
   1610a:	1a18      	subs	r0, r3, r0
   1610c:	bf18      	it	ne
   1610e:	2001      	movne	r0, #1
   16110:	bd10      	pop	{r4, pc}
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
   16112:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   16116:	f8b3 3780 	ldrh.w	r3, [r3, #1920]	; 0x780
   1611a:	e7f6      	b.n	1610a <do_radio_rx_fc_set+0x42>
	return 0;
   1611c:	2000      	movs	r0, #0
}
   1611e:	bd10      	pop	{r4, pc}
   16120:	20000bf0 	.word	0x20000bf0

00016124 <radio_rx_fc_set>:
{
   16124:	b430      	push	{r4, r5}
	if (_radio.fc_ena) {
   16126:	4b14      	ldr	r3, [pc, #80]	; (16178 <radio_rx_fc_set+0x54>)
   16128:	f893 278a 	ldrb.w	r2, [r3, #1930]	; 0x78a
{
   1612c:	460d      	mov	r5, r1
	if (_radio.fc_ena) {
   1612e:	b302      	cbz	r2, 16172 <radio_rx_fc_set+0x4e>
		u8_t req = _radio.fc_req;
   16130:	f893 2788 	ldrb.w	r2, [r3, #1928]	; 0x788
   16134:	b2d1      	uxtb	r1, r2
		u8_t ack = _radio.fc_ack;
   16136:	f893 2789 	ldrb.w	r2, [r3, #1929]	; 0x789
		if (fc) {
   1613a:	b135      	cbz	r5, 1614a <radio_rx_fc_set+0x26>
			if (handle != 0xffff) {
   1613c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   16140:	4298      	cmp	r0, r3
   16142:	d016      	beq.n	16172 <radio_rx_fc_set+0x4e>
}
   16144:	bc30      	pop	{r4, r5}
				return do_radio_rx_fc_set(handle, req, ack);
   16146:	f7ff bfbf 	b.w	160c8 <do_radio_rx_fc_set>
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
   1614a:	f8d3 0754 	ldr.w	r0, [r3, #1876]	; 0x754
   1614e:	f8d3 4758 	ldr.w	r4, [r3, #1880]	; 0x758
   16152:	42a0      	cmp	r0, r4
   16154:	d10d      	bne.n	16172 <radio_rx_fc_set+0x4e>
   16156:	4291      	cmp	r1, r2
   16158:	d00b      	beq.n	16172 <radio_rx_fc_set+0x4e>
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   1615a:	f8d3 4758 	ldr.w	r4, [r3, #1880]	; 0x758
			_radio.fc_ack = req;
   1615e:	f883 1789 	strb.w	r1, [r3, #1929]	; 0x789
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   16162:	42a0      	cmp	r0, r4
   16164:	d005      	beq.n	16172 <radio_rx_fc_set+0x4e>
			    (req == _radio.fc_req)) {
   16166:	f893 0788 	ldrb.w	r0, [r3, #1928]	; 0x788
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   1616a:	4281      	cmp	r1, r0
				_radio.fc_ack = ack;
   1616c:	bf08      	it	eq
   1616e:	f883 2789 	strbeq.w	r2, [r3, #1929]	; 0x789
}
   16172:	2000      	movs	r0, #0
   16174:	bc30      	pop	{r4, r5}
   16176:	4770      	bx	lr
   16178:	20000bf0 	.word	0x20000bf0

0001617c <ll_tx_mem_acquire>:
	return mem_acquire(&_radio.pkt_tx_data_free);
   1617c:	4801      	ldr	r0, [pc, #4]	; (16184 <ll_tx_mem_acquire+0x8>)
   1617e:	f7f5 bb32 	b.w	b7e6 <mem_acquire>
   16182:	bf00      	nop
   16184:	2000135c 	.word	0x2000135c

00016188 <ll_tx_mem_release>:
	mem_release(node_tx, &_radio.pkt_tx_data_free);
   16188:	4901      	ldr	r1, [pc, #4]	; (16190 <ll_tx_mem_release+0x8>)
   1618a:	f7f5 bb46 	b.w	b81a <mem_release>
   1618e:	bf00      	nop
   16190:	2000135c 	.word	0x2000135c

00016194 <ll_tx_mem_enqueue>:

u32_t ll_tx_mem_enqueue(u16_t handle, void *node_tx)
{
   16194:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t last;
	struct connection *conn;
	struct pdu_data *pdu_data;

	last = _radio.packet_tx_last + 1;
   16196:	4d33      	ldr	r5, [pc, #204]	; (16264 <ll_tx_mem_enqueue+0xd0>)
   16198:	f895 477e 	ldrb.w	r4, [r5, #1918]	; 0x77e
	if (last == _radio.packet_tx_count) {
   1619c:	f895 377c 	ldrb.w	r3, [r5, #1916]	; 0x77c
	last = _radio.packet_tx_last + 1;
   161a0:	3401      	adds	r4, #1
{
   161a2:	b089      	sub	sp, #36	; 0x24
	last = _radio.packet_tx_last + 1;
   161a4:	b2e4      	uxtb	r4, r4
{
   161a6:	4607      	mov	r7, r0
   161a8:	460e      	mov	r6, r1
		last = 0;
   161aa:	42a3      	cmp	r3, r4
   161ac:	bf08      	it	eq
   161ae:	2400      	moveq	r4, #0
	}

	pdu_data = (void *)((struct radio_pdu_node_tx *)node_tx)->pdu_data;
	conn = connection_get(handle);
   161b0:	f7f8 fbb8 	bl	e924 <connection_get>
	if (!conn || (last == _radio.packet_tx_first)) {
   161b4:	2800      	cmp	r0, #0
   161b6:	d052      	beq.n	1625e <ll_tx_mem_enqueue+0xca>
   161b8:	f895 377d 	ldrb.w	r3, [r5, #1917]	; 0x77d
   161bc:	429c      	cmp	r4, r3
   161be:	d04e      	beq.n	1625e <ll_tx_mem_enqueue+0xca>
		return 1;
	}

	LL_ASSERT(pdu_data->len <= (_radio.packet_tx_data_size -
   161c0:	f8b5 3770 	ldrh.w	r3, [r5, #1904]	; 0x770
   161c4:	7972      	ldrb	r2, [r6, #5]
   161c6:	3b07      	subs	r3, #7
   161c8:	429a      	cmp	r2, r3
   161ca:	d90e      	bls.n	161ea <ll_tx_mem_enqueue+0x56>
   161cc:	4b26      	ldr	r3, [pc, #152]	; (16268 <ll_tx_mem_enqueue+0xd4>)
   161ce:	9301      	str	r3, [sp, #4]
   161d0:	9300      	str	r3, [sp, #0]
   161d2:	4a26      	ldr	r2, [pc, #152]	; (1626c <ll_tx_mem_enqueue+0xd8>)
   161d4:	4b26      	ldr	r3, [pc, #152]	; (16270 <ll_tx_mem_enqueue+0xdc>)
   161d6:	4927      	ldr	r1, [pc, #156]	; (16274 <ll_tx_mem_enqueue+0xe0>)
   161d8:	4827      	ldr	r0, [pc, #156]	; (16278 <ll_tx_mem_enqueue+0xe4>)
				 RADIO_TICKER_USER_ID_APP,
				 RADIO_TICKER_ID_FIRST_CONNECTION +
				 conn->handle, 0, 0, 0, 0, 1, 0,
				 ticker_op_latency_cancelled,
				 (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   161da:	f7ec f861 	bl	22a0 <printk>
   161de:	4040      	eors	r0, r0
   161e0:	f380 8811 	msr	BASEPRI, r0
   161e4:	f04f 0004 	mov.w	r0, #4
   161e8:	df02      	svc	2
	_radio.pkt_tx[_radio.packet_tx_last].handle = handle;
   161ea:	f895 277e 	ldrb.w	r2, [r5, #1918]	; 0x77e
   161ee:	f8d5 3774 	ldr.w	r3, [r5, #1908]	; 0x774
   161f2:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
   161f6:	f823 7032 	strh.w	r7, [r3, r2, lsl #3]
	_radio.pkt_tx[_radio.packet_tx_last].node_tx = node_tx;
   161fa:	604e      	str	r6, [r1, #4]
	_radio.packet_tx_last = last;
   161fc:	f885 477e 	strb.w	r4, [r5, #1918]	; 0x77e
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
   16200:	f990 301d 	ldrsb.w	r3, [r0, #29]
   16204:	2b00      	cmp	r3, #0
   16206:	db02      	blt.n	1620e <ll_tx_mem_enqueue+0x7a>
			  (ticker_status == TICKER_STATUS_BUSY));
	}

	return 0;
   16208:	2000      	movs	r0, #0
}
   1620a:	b009      	add	sp, #36	; 0x24
   1620c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
   1620e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
   16210:	2b00      	cmp	r3, #0
   16212:	d0f9      	beq.n	16208 <ll_tx_mem_enqueue+0x74>
   16214:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
   16218:	f012 0302 	ands.w	r3, r2, #2
   1621c:	d1f4      	bne.n	16208 <ll_tx_mem_enqueue+0x74>
		conn->slave.latency_cancel = 1;
   1621e:	f042 0202 	orr.w	r2, r2, #2
   16222:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
		ticker_status = ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   16226:	f890 2020 	ldrb.w	r2, [r0, #32]
   1622a:	4914      	ldr	r1, [pc, #80]	; (1627c <ll_tx_mem_enqueue+0xe8>)
   1622c:	9105      	str	r1, [sp, #20]
   1622e:	3207      	adds	r2, #7
   16230:	2101      	movs	r1, #1
   16232:	9006      	str	r0, [sp, #24]
   16234:	9304      	str	r3, [sp, #16]
   16236:	9103      	str	r1, [sp, #12]
   16238:	9302      	str	r3, [sp, #8]
   1623a:	9301      	str	r3, [sp, #4]
   1623c:	9300      	str	r3, [sp, #0]
   1623e:	4618      	mov	r0, r3
   16240:	b2d2      	uxtb	r2, r2
   16242:	2103      	movs	r1, #3
   16244:	f7f6 f9a8 	bl	c598 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   16248:	f030 0302 	bics.w	r3, r0, #2
   1624c:	d0dc      	beq.n	16208 <ll_tx_mem_enqueue+0x74>
   1624e:	4b06      	ldr	r3, [pc, #24]	; (16268 <ll_tx_mem_enqueue+0xd4>)
   16250:	9301      	str	r3, [sp, #4]
   16252:	9300      	str	r3, [sp, #0]
   16254:	4a05      	ldr	r2, [pc, #20]	; (1626c <ll_tx_mem_enqueue+0xd8>)
   16256:	4b06      	ldr	r3, [pc, #24]	; (16270 <ll_tx_mem_enqueue+0xdc>)
   16258:	4906      	ldr	r1, [pc, #24]	; (16274 <ll_tx_mem_enqueue+0xe0>)
   1625a:	4809      	ldr	r0, [pc, #36]	; (16280 <ll_tx_mem_enqueue+0xec>)
   1625c:	e7bd      	b.n	161da <ll_tx_mem_enqueue+0x46>
		return 1;
   1625e:	2001      	movs	r0, #1
   16260:	e7d3      	b.n	1620a <ll_tx_mem_enqueue+0x76>
   16262:	bf00      	nop
   16264:	20000bf0 	.word	0x20000bf0
   16268:	00023dbe 	.word	0x00023dbe
   1626c:	00022d86 	.word	0x00022d86
   16270:	00025ef0 	.word	0x00025ef0
   16274:	000272e8 	.word	0x000272e8
   16278:	00026526 	.word	0x00026526
   1627c:	0000fb5d 	.word	0x0000fb5d
   16280:	00025f28 	.word	0x00025f28

00016284 <ll_enc_req_send>:
{
   16284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   16288:	4607      	mov	r7, r0
   1628a:	4688      	mov	r8, r1
   1628c:	4616      	mov	r6, r2
   1628e:	4699      	mov	r9, r3
	conn = connection_get(handle);
   16290:	f7f8 fb48 	bl	e924 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   16294:	4605      	mov	r5, r0
   16296:	b910      	cbnz	r0, 1629e <ll_enc_req_send+0x1a>
			return 1;
   16298:	2001      	movs	r0, #1
   1629a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   1629e:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   162a2:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   162a6:	429a      	cmp	r2, r3
   162a8:	d1f6      	bne.n	16298 <ll_enc_req_send+0x14>
	node_tx = ll_tx_mem_acquire();
   162aa:	f7ff ff67 	bl	1617c <ll_tx_mem_acquire>
	if (node_tx) {
   162ae:	4604      	mov	r4, r0
   162b0:	2800      	cmp	r0, #0
   162b2:	d0f1      	beq.n	16298 <ll_enc_req_send+0x14>
		memcpy(&conn->llcp.encryption.ltk[0], ltk,
   162b4:	2210      	movs	r2, #16
   162b6:	4649      	mov	r1, r9
   162b8:	f105 0084 	add.w	r0, r5, #132	; 0x84
   162bc:	f7ea fa69 	bl	792 <memcpy>
		if ((conn->enc_rx == 0) && (conn->enc_tx == 0)) {
   162c0:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   162c4:	f013 0330 	ands.w	r3, r3, #48	; 0x30
   162c8:	d124      	bne.n	16314 <ll_enc_req_send+0x90>
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   162ca:	7923      	ldrb	r3, [r4, #4]
   162cc:	f043 0303 	orr.w	r3, r3, #3
   162d0:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len =
   162d2:	2317      	movs	r3, #23
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
   162d4:	2208      	movs	r2, #8
			pdu_data_tx->len =
   162d6:	7163      	strb	r3, [r4, #5]
			pdu_data_tx->llctrl.opcode =
   162d8:	2303      	movs	r3, #3
   162da:	71e3      	strb	r3, [r4, #7]
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
   162dc:	4641      	mov	r1, r8
   162de:	18a0      	adds	r0, r4, r2
   162e0:	f7ea fa57 	bl	792 <memcpy>
			enc_req->ediv[0] = ediv[0];
   162e4:	7833      	ldrb	r3, [r6, #0]
   162e6:	7423      	strb	r3, [r4, #16]
			enc_req->ediv[1] = ediv[1];
   162e8:	7873      	ldrb	r3, [r6, #1]
   162ea:	7463      	strb	r3, [r4, #17]
			bt_rand(enc_req->skdm, sizeof(enc_req->skdm));
   162ec:	2108      	movs	r1, #8
   162ee:	f104 0012 	add.w	r0, r4, #18
   162f2:	f7f6 faaf 	bl	c854 <bt_rand>
			bt_rand(enc_req->ivm, sizeof(enc_req->ivm));
   162f6:	2104      	movs	r1, #4
   162f8:	f104 001a 	add.w	r0, r4, #26
   162fc:	f7f6 faaa 	bl	c854 <bt_rand>
		if (ll_tx_mem_enqueue(handle, node_tx)) {
   16300:	4621      	mov	r1, r4
   16302:	4638      	mov	r0, r7
   16304:	f7ff ff46 	bl	16194 <ll_tx_mem_enqueue>
   16308:	2601      	movs	r6, #1
   1630a:	b1d0      	cbz	r0, 16342 <ll_enc_req_send+0xbe>
			ll_tx_mem_release(node_tx);
   1630c:	4620      	mov	r0, r4
   1630e:	f7ff ff3b 	bl	16188 <ll_tx_mem_release>
   16312:	e7c1      	b.n	16298 <ll_enc_req_send+0x14>
		} else if ((conn->enc_rx != 0) && (conn->enc_tx != 0)) {
   16314:	2b30      	cmp	r3, #48	; 0x30
   16316:	d1f9      	bne.n	1630c <ll_enc_req_send+0x88>
			memcpy(&conn->llcp.encryption.rand[0], rand,
   16318:	2208      	movs	r2, #8
   1631a:	4641      	mov	r1, r8
   1631c:	f105 007a 	add.w	r0, r5, #122	; 0x7a
   16320:	f7ea fa37 	bl	792 <memcpy>
			conn->llcp.encryption.ediv[0] = ediv[0];
   16324:	7833      	ldrb	r3, [r6, #0]
   16326:	f885 3082 	strb.w	r3, [r5, #130]	; 0x82
			conn->llcp.encryption.ediv[1] = ediv[1];
   1632a:	7873      	ldrb	r3, [r6, #1]
   1632c:	f885 3083 	strb.w	r3, [r5, #131]	; 0x83
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   16330:	7923      	ldrb	r3, [r4, #4]
   16332:	f043 0303 	orr.w	r3, r3, #3
   16336:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
   16338:	2301      	movs	r3, #1
   1633a:	7163      	strb	r3, [r4, #5]
			pdu_data_tx->llctrl.opcode =
   1633c:	230a      	movs	r3, #10
   1633e:	71e3      	strb	r3, [r4, #7]
   16340:	e7de      	b.n	16300 <ll_enc_req_send+0x7c>
		conn->llcp_type = LLCP_ENCRYPTION;
   16342:	2303      	movs	r3, #3
   16344:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
		conn->llcp_req++;
   16348:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
		conn->llcp.encryption.initiate = 1;
   1634c:	f885 6078 	strb.w	r6, [r5, #120]	; 0x78
		conn->llcp_req++;
   16350:	3301      	adds	r3, #1
   16352:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
}
   16356:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1635a:	0000      	movs	r0, r0
   1635c:	0000      	movs	r0, r0
	...

00016360 <radio_adv_enable>:
{
   16360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16364:	b093      	sub	sp, #76	; 0x4c
	if (_radio.advertiser.is_enabled) {
   16366:	f8df 9514 	ldr.w	r9, [pc, #1300]	; 1687c <radio_adv_enable+0x51c>
{
   1636a:	930b      	str	r3, [sp, #44]	; 0x2c
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   1636c:	2302      	movs	r3, #2
   1636e:	9311      	str	r3, [sp, #68]	; 0x44
	if (_radio.advertiser.is_enabled) {
   16370:	f999 3028 	ldrsb.w	r3, [r9, #40]	; 0x28
{
   16374:	f89d 8074 	ldrb.w	r8, [sp, #116]	; 0x74
   16378:	f88d 203f 	strb.w	r2, [sp, #63]	; 0x3f
	if (_radio.advertiser.is_enabled) {
   1637c:	2b00      	cmp	r3, #0
{
   1637e:	4683      	mov	fp, r0
   16380:	468a      	mov	sl, r1
   16382:	464e      	mov	r6, r9
	if (_radio.advertiser.is_enabled) {
   16384:	da01      	bge.n	1638a <radio_adv_enable+0x2a>
	return BT_HCI_ERR_CMD_DISALLOWED;
   16386:	200c      	movs	r0, #12
   16388:	e25c      	b.n	16844 <radio_adv_enable+0x4e4>
	pdu_adv = (void *)&_radio.advertiser.adv_data.data
   1638a:	f899 722f 	ldrb.w	r7, [r9, #559]	; 0x22f
   1638e:	eb07 2707 	add.w	r7, r7, r7, lsl #8
   16392:	372c      	adds	r7, #44	; 0x2c
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
   16394:	f819 3007 	ldrb.w	r3, [r9, r7]
   16398:	f003 030f 	and.w	r3, r3, #15
   1639c:	2b01      	cmp	r3, #1
   1639e:	f200 8149 	bhi.w	16634 <radio_adv_enable+0x2d4>
		if (_radio.advertiser.conn) {
   163a2:	f8d9 5638 	ldr.w	r5, [r9, #1592]	; 0x638
   163a6:	2d00      	cmp	r5, #0
   163a8:	d1ed      	bne.n	16386 <radio_adv_enable+0x26>
		link = mem_acquire(&_radio.link_rx_free);
   163aa:	f509 60ea 	add.w	r0, r9, #1872	; 0x750
   163ae:	f7f5 fa1a 	bl	b7e6 <mem_acquire>
		if (!link) {
   163b2:	900e      	str	r0, [sp, #56]	; 0x38
   163b4:	b158      	cbz	r0, 163ce <radio_adv_enable+0x6e>
		conn = mem_acquire(&_radio.conn_free);
   163b6:	f209 7014 	addw	r0, r9, #1812	; 0x714
   163ba:	f7f5 fa14 	bl	b7e6 <mem_acquire>
		if (!conn) {
   163be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   163c0:	4604      	mov	r4, r0
   163c2:	b930      	cbnz	r0, 163d2 <radio_adv_enable+0x72>
			mem_release(link, &_radio.link_rx_free);
   163c4:	f509 61ea 	add.w	r1, r9, #1872	; 0x750
   163c8:	4618      	mov	r0, r3
   163ca:	f7f5 fa26 	bl	b81a <mem_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   163ce:	2007      	movs	r0, #7
   163d0:	e238      	b.n	16844 <radio_adv_enable+0x4e4>
		conn->handle = 0xFFFF;
   163d2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   163d6:	8401      	strh	r1, [r0, #32]
		conn->llcp_features = RADIO_BLE_FEAT;
   163d8:	f501 4194 	add.w	r1, r1, #18944	; 0x4a00
   163dc:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
		conn->data_chan_sel = 0;
   163e0:	7f41      	ldrb	r1, [r0, #29]
		conn->data_chan_use = 0;
   163e2:	77c5      	strb	r5, [r0, #31]
		conn->data_chan_sel = 0;
   163e4:	f365 1186 	bfi	r1, r5, #6, #1
   163e8:	7741      	strb	r1, [r0, #29]
		conn->default_tx_octets = _radio.default_tx_octets;
   163ea:	f8b9 172a 	ldrh.w	r1, [r9, #1834]	; 0x72a
   163ee:	8581      	strh	r1, [r0, #44]	; 0x2c
		conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   163f0:	211b      	movs	r1, #27
   163f2:	85c1      	strh	r1, [r0, #46]	; 0x2e
		conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   163f4:	8601      	strh	r1, [r0, #48]	; 0x30
		conn->default_tx_time = _radio.default_tx_time;
   163f6:	f8b9 172c 	ldrh.w	r1, [r9, #1836]	; 0x72c
   163fa:	8641      	strh	r1, [r0, #50]	; 0x32
		conn->max_tx_time =
   163fc:	f44f 71a4 	mov.w	r1, #328	; 0x148
   16400:	8681      	strh	r1, [r0, #52]	; 0x34
		conn->max_rx_time =
   16402:	86c1      	strh	r1, [r0, #54]	; 0x36
		conn->event_counter = 0;
   16404:	8445      	strh	r5, [r0, #34]	; 0x22
		conn->latency_prepare = 0;
   16406:	8505      	strh	r5, [r0, #40]	; 0x28
		conn->latency_event = 0;
   16408:	8545      	strh	r5, [r0, #42]	; 0x2a
		conn->phy_pref_tx = _radio.default_phy_tx;
   1640a:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
   1640e:	f8b9 072e 	ldrh.w	r0, [r9, #1838]	; 0x72e
   16412:	f360 0102 	bfi	r1, r0, #0, #3
		conn->phy_tx = BIT(0);
   16416:	2001      	movs	r0, #1
   16418:	f360 01c5 	bfi	r1, r0, #3, #3
		conn->phy_pref_flags = 0;
   1641c:	f365 1186 	bfi	r1, r5, #6, #1
		conn->phy_flags = 0;
   16420:	f365 11c7 	bfi	r1, r5, #7, #1
   16424:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
		conn->phy_tx_time = BIT(0);
   16428:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
   1642c:	f360 0102 	bfi	r1, r0, #0, #3
   16430:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
		conn->phy_pref_rx = _radio.default_phy_rx;
   16434:	f8b9 e730 	ldrh.w	lr, [r9, #1840]	; 0x730
		conn->slave.window_widening_prepare_us = 0;
   16438:	65e5      	str	r5, [r4, #92]	; 0x5c
		conn->phy_pref_rx = _radio.default_phy_rx;
   1643a:	b2c9      	uxtb	r1, r1
   1643c:	f36e 01c5 	bfi	r1, lr, #3, #3
   16440:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
		conn->phy_rx = BIT(0);
   16444:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
		conn->slave.window_widening_event_us = 0;
   16448:	6625      	str	r5, [r4, #96]	; 0x60
		conn->phy_rx = BIT(0);
   1644a:	f360 0102 	bfi	r1, r0, #0, #3
   1644e:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
		conn->role = 1;
   16452:	7f61      	ldrb	r1, [r4, #29]
   16454:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   16458:	7761      	strb	r1, [r4, #29]
		conn->connect_expire = 6;
   1645a:	2106      	movs	r1, #6
   1645c:	87a1      	strh	r1, [r4, #60]	; 0x3c
		conn->common.fex_valid = 0;
   1645e:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
   16462:	f365 1145 	bfi	r1, r5, #5, #1
		conn->slave.latency_enabled = 0;
   16466:	f365 0100 	bfi	r1, r5, #0, #1
		conn->slave.latency_cancel = 0;
   1646a:	f365 0141 	bfi	r1, r5, #1, #1
   1646e:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
		conn->slave.ticks_to_offset = 0;
   16472:	6725      	str	r5, [r4, #112]	; 0x70
		conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
   16474:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
		conn->llcp_conn_param.disabled = 0;
   16478:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
		conn->llcp_version.tx = 0;
   1647c:	f894 10a8 	ldrb.w	r1, [r4, #168]	; 0xa8
		conn->supervision_expire = 0;
   16480:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
		conn->llcp_conn_param.disabled = 0;
   16484:	f365 1304 	bfi	r3, r5, #4, #1
   16488:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
		conn->sn = 0;
   1648c:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
		conn->procedure_expire = 0;
   16490:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
		conn->sn = 0;
   16494:	f365 0300 	bfi	r3, r5, #0, #1
		conn->nesn = 0;
   16498:	f365 0341 	bfi	r3, r5, #1, #1
		conn->pause_rx = 0;
   1649c:	f365 0382 	bfi	r3, r5, #2, #1
		conn->pause_tx = 0;
   164a0:	f365 03c3 	bfi	r3, r5, #3, #1
		conn->enc_rx = 0;
   164a4:	f365 1304 	bfi	r3, r5, #4, #1
		conn->enc_tx = 0;
   164a8:	f365 1345 	bfi	r3, r5, #5, #1
		conn->llcp_version.tx = 0;
   164ac:	f365 0100 	bfi	r1, r5, #0, #1
		conn->refresh = 0;
   164b0:	f365 1386 	bfi	r3, r5, #6, #1
		conn->llcp_version.rx = 0;
   164b4:	f365 0141 	bfi	r1, r5, #1, #1
		conn->empty = 0;
   164b8:	f365 13c7 	bfi	r3, r5, #7, #1
		conn->apto_expire = 0;
   164bc:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
		conn->appto_expire = 0;
   164c0:	f8a4 5048 	strh.w	r5, [r4, #72]	; 0x48
		conn->llcp_req = 0;
   164c4:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
		conn->llcp_ack = 0;
   164c8:	f884 5075 	strb.w	r5, [r4, #117]	; 0x75
		conn->llcp_version.rx = 0;
   164cc:	f884 10a8 	strb.w	r1, [r4, #168]	; 0xa8
		conn->llcp_terminate.req = 0;
   164d0:	f884 50b0 	strb.w	r5, [r4, #176]	; 0xb0
		conn->llcp_terminate.ack = 0;
   164d4:	f884 50b1 	strb.w	r5, [r4, #177]	; 0xb1
		conn->llcp_terminate.reason_peer = 0;
   164d8:	f884 50b3 	strb.w	r5, [r4, #179]	; 0xb3
		conn->llcp_conn_param.req = 0;
   164dc:	f884 50c0 	strb.w	r5, [r4, #192]	; 0xc0
		conn->llcp_conn_param.ack = 0;
   164e0:	f884 50c1 	strb.w	r5, [r4, #193]	; 0xc1
		conn->llcp_length.req = 0;
   164e4:	f884 50e8 	strb.w	r5, [r4, #232]	; 0xe8
		conn->llcp_length.ack = 0;
   164e8:	f884 50e9 	strb.w	r5, [r4, #233]	; 0xe9
		conn->llcp_phy.req = 0;
   164ec:	f884 50f4 	strb.w	r5, [r4, #244]	; 0xf4
		conn->llcp_phy.ack = 0;
   164f0:	f884 50f5 	strb.w	r5, [r4, #245]	; 0xf5
		conn->empty = 0;
   164f4:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
		conn->pkt_tx_head = NULL;
   164f8:	f8c4 513c 	str.w	r5, [r4, #316]	; 0x13c
		conn->pkt_tx_ctrl = NULL;
   164fc:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
		conn->pkt_tx_ctrl_last = NULL;
   16500:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
		conn->pkt_tx_data = NULL;
   16504:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
		conn->pkt_tx_last = NULL;
   16508:	f8c4 514c 	str.w	r5, [r4, #332]	; 0x14c
		conn->packet_tx_head_len = 0;
   1650c:	f884 5150 	strb.w	r5, [r4, #336]	; 0x150
		conn->packet_tx_head_offset = 0;
   16510:	f884 5151 	strb.w	r5, [r4, #337]	; 0x151
		_radio.advertiser.conn = conn;
   16514:	f8c9 4638 	str.w	r4, [r9, #1592]	; 0x638
	_radio.advertiser.chan_map = chan_map;							//chan_map
   16518:	a812      	add	r0, sp, #72	; 0x48
	_radio.advertiser.phy_p = phy_p; 								//set phy_p
   1651a:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
	_radio.advertiser.chan_map = chan_map;							//chan_map
   1651e:	f810 1d09 	ldrb.w	r1, [r0, #-9]!
	_radio.advertiser.phy_p = phy_p; 								//set phy_p
   16522:	f36b 0343 	bfi	r3, fp, #1, #3
	_radio.advertiser.chan_map = chan_map;							//chan_map
   16526:	f361 1306 	bfi	r3, r1, #4, #3
   1652a:	f886 3029 	strb.w	r3, [r6, #41]	; 0x29
	_radio.advertiser.filter_policy = filter_policy;				//filter plicy
   1652e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   16530:	f896 302a 	ldrb.w	r3, [r6, #42]	; 0x2a
   16534:	f362 0301 	bfi	r3, r2, #0, #2
   16538:	f886 302a 	strb.w	r3, [r6, #42]	; 0x2a
	_radio.advertiser.rl_idx = rl_idx;								//rl_idx
   1653c:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
   16540:	f886 302b 	strb.w	r3, [r6, #43]	; 0x2b
	_radio.advertiser.hdr.ticks_active_to_start =
   16544:	f8d6 378c 	ldr.w	r3, [r6, #1932]	; 0x78c
   16548:	61f3      	str	r3, [r6, #28]
	_radio.advertiser.hdr.ticks_xtal_to_start =
   1654a:	2327      	movs	r3, #39	; 0x27
   1654c:	61b3      	str	r3, [r6, #24]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
   1654e:	2101      	movs	r1, #1
	_radio.advertiser.hdr.ticks_preempt_to_start =
   16550:	2300      	movs	r3, #0
   16552:	6233      	str	r3, [r6, #32]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
   16554:	f7f5 faf2 	bl	bb3c <util_ones_count_get>
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   16558:	f819 5007 	ldrb.w	r5, [r9, r7]
   1655c:	f005 050f 	and.w	r5, r5, #15
   16560:	2d01      	cmp	r5, #1
   16562:	d169      	bne.n	16638 <radio_adv_enable+0x2d8>
		slot_us = ((RADIO_TICKER_START_PART_US + 176 + 152 + 40) *
   16564:	f44f 7327 	mov.w	r3, #668	; 0x29c
   16568:	4358      	muls	r0, r3
			   chan_cnt) - 40 + 352;
   1656a:	f500 709c 	add.w	r0, r0, #312	; 0x138
	_radio.advertiser.hdr.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
   1656e:	4fba      	ldr	r7, [pc, #744]	; (16858 <radio_adv_enable+0x4f8>)
   16570:	a3b7      	add	r3, pc, #732	; (adr r3, 16850 <radio_adv_enable+0x4f0>)
   16572:	e9d3 2300 	ldrd	r2, r3, [r3]
   16576:	fba0 0107 	umull	r0, r1, r0, r7
   1657a:	f7e9 fe8d 	bl	298 <__aeabi_uldivmod>
	ticks_slot_offset =
   1657e:	69f3      	ldr	r3, [r6, #28]
	_radio.advertiser.hdr.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
   16580:	6270      	str	r0, [r6, #36]	; 0x24
	ticks_slot_offset =
   16582:	69b0      	ldr	r0, [r6, #24]
   16584:	4283      	cmp	r3, r0
   16586:	bf38      	it	cc
   16588:	4603      	movcc	r3, r0
   1658a:	930b      	str	r3, [sp, #44]	; 0x2c
   1658c:	46b9      	mov	r9, r7
	_radio.advertiser.is_hdcd = !interval &&
   1658e:	f1ba 0f00 	cmp.w	sl, #0
   16592:	d15e      	bne.n	16652 <radio_adv_enable+0x2f2>
   16594:	1e6a      	subs	r2, r5, #1
   16596:	4253      	negs	r3, r2
   16598:	4153      	adcs	r3, r2
   1659a:	f896 5028 	ldrb.w	r5, [r6, #40]	; 0x28
   1659e:	f363 1586 	bfi	r5, r3, #6, #1
   165a2:	f886 5028 	strb.w	r5, [r6, #40]	; 0x28
	if (_radio.advertiser.is_hdcd) {
   165a6:	f015 0540 	ands.w	r5, r5, #64	; 0x40
   165aa:	d05a      	beq.n	16662 <radio_adv_enable+0x302>
		u32_t ticks_now = ticker_ticks_now_get();
   165ac:	f7f6 f912 	bl	c7d4 <ticker_ticks_now_get>
		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   165b0:	6a73      	ldr	r3, [r6, #36]	; 0x24
   165b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   165b4:	4ea9      	ldr	r6, [pc, #676]	; (1685c <radio_adv_enable+0x4fc>)
   165b6:	9607      	str	r6, [sp, #28]
   165b8:	441a      	add	r2, r3
   165ba:	4613      	mov	r3, r2
		u32_t ticks_now = ticker_ticks_now_get();
   165bc:	4607      	mov	r7, r0
		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   165be:	4aa8      	ldr	r2, [pc, #672]	; (16860 <radio_adv_enable+0x500>)
   165c0:	9205      	str	r2, [sp, #20]
   165c2:	2000      	movs	r0, #0
   165c4:	ad11      	add	r5, sp, #68	; 0x44
   165c6:	9304      	str	r3, [sp, #16]
   165c8:	e88d 0009 	stmia.w	sp, {r0, r3}
   165cc:	9508      	str	r5, [sp, #32]
   165ce:	9006      	str	r0, [sp, #24]
   165d0:	9003      	str	r0, [sp, #12]
   165d2:	9002      	str	r0, [sp, #8]
   165d4:	463b      	mov	r3, r7
   165d6:	2205      	movs	r2, #5
   165d8:	2103      	movs	r1, #3
   165da:	f7f5 ff8d 	bl	c4f8 <ticker_start>
		if (ret == TICKER_STATUS_BUSY) {
   165de:	2802      	cmp	r0, #2
   165e0:	d03b      	beq.n	1665a <radio_adv_enable+0x2fa>
		if (ret_cb != TICKER_STATUS_SUCCESS) {
   165e2:	9811      	ldr	r0, [sp, #68]	; 0x44
   165e4:	b9c8      	cbnz	r0, 1661a <radio_adv_enable+0x2ba>
		ret_cb = TICKER_STATUS_BUSY;
   165e6:	2302      	movs	r3, #2
   165e8:	9311      	str	r3, [sp, #68]	; 0x44
		ret =
   165ea:	4b9e      	ldr	r3, [pc, #632]	; (16864 <radio_adv_enable+0x504>)
   165ec:	9305      	str	r3, [sp, #20]
   165ee:	2203      	movs	r2, #3
   165f0:	f24a 33fe 	movw	r3, #41982	; 0xa3fe
   165f4:	9300      	str	r3, [sp, #0]
   165f6:	9508      	str	r5, [sp, #32]
   165f8:	9607      	str	r6, [sp, #28]
   165fa:	9006      	str	r0, [sp, #24]
   165fc:	9004      	str	r0, [sp, #16]
   165fe:	9003      	str	r0, [sp, #12]
   16600:	9002      	str	r0, [sp, #8]
   16602:	9001      	str	r0, [sp, #4]
   16604:	463b      	mov	r3, r7
   16606:	4611      	mov	r1, r2
		ret=	
   16608:	f7f5 ff76 	bl	c4f8 <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
   1660c:	2802      	cmp	r0, #2
   1660e:	f000 8105 	beq.w	1681c <radio_adv_enable+0x4bc>
	if (ret_cb == TICKER_STATUS_SUCCESS) {
   16612:	9811      	ldr	r0, [sp, #68]	; 0x44
   16614:	2800      	cmp	r0, #0
   16616:	f000 8105 	beq.w	16824 <radio_adv_enable+0x4c4>
	if (conn) {
   1661a:	2c00      	cmp	r4, #0
   1661c:	f43f aeb3 	beq.w	16386 <radio_adv_enable+0x26>
		mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.
   16620:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   16624:	4990      	ldr	r1, [pc, #576]	; (16868 <radio_adv_enable+0x508>)
   16626:	f7f5 f8f8 	bl	b81a <mem_release>
		mem_release(conn, &_radio.conn_free);
   1662a:	4990      	ldr	r1, [pc, #576]	; (1686c <radio_adv_enable+0x50c>)
   1662c:	4620      	mov	r0, r4
   1662e:	f7f5 f8f4 	bl	b81a <mem_release>
   16632:	e6a8      	b.n	16386 <radio_adv_enable+0x26>
		conn = NULL;
   16634:	2400      	movs	r4, #0
   16636:	e76f      	b.n	16518 <radio_adv_enable+0x1b8>
	} else if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
   16638:	2d02      	cmp	r5, #2
   1663a:	d103      	bne.n	16644 <radio_adv_enable+0x2e4>
		slot_us = (RADIO_TICKER_START_PART_US + 376) * chan_cnt;
   1663c:	f44f 7329 	mov.w	r3, #676	; 0x2a4
			   152 + 376) * chan_cnt;
   16640:	4358      	muls	r0, r3
   16642:	e794      	b.n	1656e <radio_adv_enable+0x20e>
	else if (pdu_adv->type == PDU_ADV_TYPE_EXT_IND) {
   16644:	2d07      	cmp	r5, #7
		slot_us = ((RADIO_TICKER_START_PART_US + 2120) * chan_cnt) ;  // 265byte =2120us
   16646:	bf0c      	ite	eq
   16648:	f640 1374 	movweq	r3, #2420	; 0x974
			   152 + 376) * chan_cnt;
   1664c:	f240 53fc 	movwne	r3, #1532	; 0x5fc
   16650:	e7f6      	b.n	16640 <radio_adv_enable+0x2e0>
   16652:	2300      	movs	r3, #0
   16654:	e7a1      	b.n	1659a <radio_adv_enable+0x23a>
				cpu_sleep();
   16656:	f7f7 ff6b 	bl	e530 <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
   1665a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1665c:	2b02      	cmp	r3, #2
   1665e:	d0fa      	beq.n	16656 <radio_adv_enable+0x2f6>
   16660:	e7bf      	b.n	165e2 <radio_adv_enable+0x282>
		u32_t ticks_now = ticker_ticks_now_get();
   16662:	f7f6 f8b7 	bl	c7d4 <ticker_ticks_now_get>
		if(((u64_t)interval * 625) <= 100000){
   16666:	fa1f f28a 	uxth.w	r2, sl
   1666a:	2300      	movs	r3, #0
		u32_t ticks_now = ticker_ticks_now_get();
   1666c:	900e      	str	r0, [sp, #56]	; 0x38
		if(((u64_t)interval * 625) <= 100000){
   1666e:	f240 2071 	movw	r0, #625	; 0x271
   16672:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   16676:	fbaa 0100 	umull	r0, r1, sl, r0
   1667a:	4a7d      	ldr	r2, [pc, #500]	; (16870 <radio_adv_enable+0x510>)
		_radio.ext_advertiser.max_skip = skip;
   1667c:	f886 8688 	strb.w	r8, [r6, #1672]	; 0x688
		if(((u64_t)interval * 625) <= 100000){
   16680:	2300      	movs	r3, #0
   16682:	428b      	cmp	r3, r1
   16684:	bf08      	it	eq
   16686:	4282      	cmpeq	r2, r0
   16688:	d30b      	bcc.n	166a2 <radio_adv_enable+0x342>
		int calculation = max_skip / 5;
   1668a:	2305      	movs	r3, #5
   1668c:	fbb8 f3f3 	udiv	r3, r8, r3
			if(calculation >= 5){
   16690:	2b04      	cmp	r3, #4
   16692:	f240 80a5 	bls.w	167e0 <radio_adv_enable+0x480>
				ticker_offset = 30 * (max_skip-5);
   16696:	f1a8 0505 	sub.w	r5, r8, #5
				ticker_offset = 30 * (max_skip-1);
   1669a:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
				ticker_offset = 30 * max_skip;
   1669e:	006d      	lsls	r5, r5, #1
   166a0:	b2ad      	uxth	r5, r5
		_radio.ext_advertiser.aux_pckt_time = ((((u64_t)interval * 625 ) ) * skip) + 10000; //(10005 * offset) ;
   166a2:	f240 2371 	movw	r3, #625	; 0x271
   166a6:	fb03 f708 	mul.w	r7, r3, r8
   166aa:	f242 7210 	movw	r2, #10000	; 0x2710
   166ae:	fb0a 2707 	mla	r7, sl, r7, r2
		_radio.ext_advertiser.prim_interval = (u64_t)interval * 625;
   166b2:	fb03 f30a 	mul.w	r3, r3, sl
		_radio.ext_advertiser.aux_pckt_time = ((((u64_t)interval * 625 ) ) * skip) + 10000; //(10005 * offset) ;
   166b6:	f8c6 767c 	str.w	r7, [r6, #1660]	; 0x67c
		_radio.ext_advertiser.prim_interval = (u64_t)interval * 625;
   166ba:	f8c6 3680 	str.w	r3, [r6, #1664]	; 0x680
		_radio.ext_advertiser.ticker_offset = 183 * (((u64_t)interval * 625 )/100000);
   166be:	4a6c      	ldr	r2, [pc, #432]	; (16870 <radio_adv_enable+0x510>)
   166c0:	2300      	movs	r3, #0
   166c2:	f7e9 fde9 	bl	298 <__aeabi_uldivmod>
   166c6:	23b7      	movs	r3, #183	; 0xb7
   166c8:	4358      	muls	r0, r3
		pdu = (void *)_radio.advertiser.adv_data.data
   166ca:	f896 322e 	ldrb.w	r3, [r6, #558]	; 0x22e
		_radio.ext_advertiser.ticker_offset = 183 * (((u64_t)interval * 625 )/100000);
   166ce:	f8c6 06a4 	str.w	r0, [r6, #1700]	; 0x6a4
		size = pdu->len + 2;
   166d2:	eb03 2303 	add.w	r3, r3, r3, lsl #8
   166d6:	4433      	add	r3, r6
		_radio.ext_advertiser.chan_37 = (_radio.ext_advertiser.aux_pckt_time +(_radio.ext_advertiser.ticker_offset *max_skip ) );
   166d8:	fb00 7708 	mla	r7, r0, r8, r7
		size = pdu->len + 2;
   166dc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
		_radio.ext_advertiser.chan_37 = (_radio.ext_advertiser.aux_pckt_time +(_radio.ext_advertiser.ticker_offset *max_skip ) );
   166e0:	f8c6 7690 	str.w	r7, [r6, #1680]	; 0x690
		final_pckt_size = (size + 1 + 4 + 3)*8 ; 
   166e4:	00db      	lsls	r3, r3, #3
   166e6:	3350      	adds	r3, #80	; 0x50
		_radio.ext_advertiser.chan_38 = ((_radio.ext_advertiser.aux_pckt_time +(_radio.ext_advertiser.ticker_offset *max_skip ) ) -((final_pckt_size + 50)));
   166e8:	f1a7 0232 	sub.w	r2, r7, #50	; 0x32
   166ec:	1ad2      	subs	r2, r2, r3
		_radio.ext_advertiser.chan_39 = ((_radio.ext_advertiser.aux_pckt_time +(_radio.ext_advertiser.ticker_offset *max_skip )) -(((final_pckt_size + 50)* 2))) ;
   166ee:	3332      	adds	r3, #50	; 0x32
   166f0:	eba7 0743 	sub.w	r7, r7, r3, lsl #1
		ret =
   166f4:	4b59      	ldr	r3, [pc, #356]	; (1685c <radio_adv_enable+0x4fc>)
		_radio.ext_advertiser.chan_38 = ((_radio.ext_advertiser.aux_pckt_time +(_radio.ext_advertiser.ticker_offset *max_skip ) ) -((final_pckt_size + 50)));
   166f6:	f8c6 2694 	str.w	r2, [r6, #1684]	; 0x694
		_radio.ext_advertiser.chan_39 = ((_radio.ext_advertiser.aux_pckt_time +(_radio.ext_advertiser.ticker_offset *max_skip )) -(((final_pckt_size + 50)* 2))) ;
   166fa:	f8c6 7698 	str.w	r7, [r6, #1688]	; 0x698
		ret =
   166fe:	f04f 0b00 	mov.w	fp, #0
   16702:	9307      	str	r3, [sp, #28]
   16704:	af11      	add	r7, sp, #68	; 0x44
   16706:	4b56      	ldr	r3, [pc, #344]	; (16860 <radio_adv_enable+0x500>)
   16708:	9708      	str	r7, [sp, #32]
   1670a:	f8cd b018 	str.w	fp, [sp, #24]
   1670e:	9305      	str	r3, [sp, #20]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   16710:	6a73      	ldr	r3, [r6, #36]	; 0x24
   16712:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
				     HAL_TICKER_US_TO_TICKS(((u64_t)interval *				//ticks periodic
   16714:	4857      	ldr	r0, [pc, #348]	; (16874 <radio_adv_enable+0x514>)
		ret =
   16716:	f8cd b00c 	str.w	fp, [sp, #12]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1671a:	4413      	add	r3, r2
		ret =
   1671c:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_US_TO_TICKS(((u64_t)interval *				//ticks periodic
   1671e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   16720:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		ret =
   16722:	f8cd b008 	str.w	fp, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(((u64_t)interval *				//ticks periodic
   16726:	fba3 0100 	umull	r0, r1, r3, r0
   1672a:	2391      	movs	r3, #145	; 0x91
   1672c:	fb03 1102 	mla	r1, r3, r2, r1
   16730:	a347      	add	r3, pc, #284	; (adr r3, 16850 <radio_adv_enable+0x4f0>)
   16732:	e9d3 2300 	ldrd	r2, r3, [r3]
   16736:	f7e9 fdaf 	bl	298 <__aeabi_uldivmod>
		ret =
   1673a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
				     HAL_TICKER_US_TO_TICKS(((u64_t)interval *				//ticks periodic
   1673c:	9001      	str	r0, [sp, #4]
		ret =
   1673e:	f8cd b000 	str.w	fp, [sp]
   16742:	2205      	movs	r2, #5
   16744:	2103      	movs	r1, #3
   16746:	4658      	mov	r0, fp
   16748:	f7f5 fed6 	bl	c4f8 <ticker_start>
		if (ret == TICKER_STATUS_BUSY) {
   1674c:	2802      	cmp	r0, #2
   1674e:	4b43      	ldr	r3, [pc, #268]	; (1685c <radio_adv_enable+0x4fc>)
   16750:	d05e      	beq.n	16810 <radio_adv_enable+0x4b0>
		if (ret_cb != TICKER_STATUS_SUCCESS) {
   16752:	9e11      	ldr	r6, [sp, #68]	; 0x44
   16754:	2e00      	cmp	r6, #0
   16756:	f47f af60 	bne.w	1661a <radio_adv_enable+0x2ba>
		ret=	
   1675a:	9307      	str	r3, [sp, #28]
   1675c:	4b46      	ldr	r3, [pc, #280]	; (16878 <radio_adv_enable+0x518>)
   1675e:	9305      	str	r3, [sp, #20]
				    HAL_TICKER_US_TO_TICKS(	ticks_slot_offset +			
   16760:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		ret=	
   16762:	9708      	str	r7, [sp, #32]
		ret_cb = TICKER_STATUS_BUSY;
   16764:	2202      	movs	r2, #2
				    HAL_TICKER_US_TO_TICKS(	ticks_slot_offset +			
   16766:	f503 70bc 	add.w	r0, r3, #376	; 0x178
		ret_cb = TICKER_STATUS_BUSY;
   1676a:	9211      	str	r2, [sp, #68]	; 0x44
				    HAL_TICKER_US_TO_TICKS(	ticks_slot_offset +			
   1676c:	fba0 0109 	umull	r0, r1, r0, r9
   16770:	a337      	add	r3, pc, #220	; (adr r3, 16850 <radio_adv_enable+0x4f0>)
   16772:	e9d3 2300 	ldrd	r2, r3, [r3]
		u8_t offset = skip + 1;
   16776:	f108 0801 	add.w	r8, r8, #1
		ret=	
   1677a:	9606      	str	r6, [sp, #24]
		u64_t aux_pckt_interval = (((u64_t)interval * 625) * offset);
   1677c:	fa5f f888 	uxtb.w	r8, r8
				    HAL_TICKER_US_TO_TICKS(	ticks_slot_offset +			
   16780:	f7e9 fd8a 	bl	298 <__aeabi_uldivmod>
		u64_t aux_pckt_interval = (((u64_t)interval * 625) * offset);
   16784:	fba8 ab0a 	umull	sl, fp, r8, sl
   16788:	f240 2171 	movw	r1, #625	; 0x271
   1678c:	fbaa 2301 	umull	r2, r3, sl, r1
				    HAL_TICKER_US_TO_TICKS( aux_pckt_interval - ticker_offset ),			
   16790:	1b52      	subs	r2, r2, r5
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   16792:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		u64_t aux_pckt_interval = (((u64_t)interval * 625) * offset);
   16796:	fb01 330b 	mla	r3, r1, fp, r3
				    HAL_TICKER_US_TO_TICKS( aux_pckt_interval - ticker_offset ),			
   1679a:	f163 0300 	sbc.w	r3, r3, #0
		ret=	
   1679e:	9004      	str	r0, [sp, #16]
				    HAL_TICKER_US_TO_TICKS( aux_pckt_interval - ticker_offset ),			
   167a0:	fba2 0109 	umull	r0, r1, r2, r9
   167a4:	fb09 1103 	mla	r1, r9, r3, r1
   167a8:	a329      	add	r3, pc, #164	; (adr r3, 16850 <radio_adv_enable+0x4f0>)
   167aa:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret=	
   167ae:	9603      	str	r6, [sp, #12]
   167b0:	9602      	str	r6, [sp, #8]
				    HAL_TICKER_US_TO_TICKS( aux_pckt_interval - ticker_offset ),			
   167b2:	f7e9 fd71 	bl	298 <__aeabi_uldivmod>
					HAL_TICKER_US_TO_TICKS(	_radio.ext_advertiser.aux_pckt_time  ),			//ticks periodic
   167b6:	4b31      	ldr	r3, [pc, #196]	; (1687c <radio_adv_enable+0x51c>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   167b8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ret=	
   167bc:	9001      	str	r0, [sp, #4]
					HAL_TICKER_US_TO_TICKS(	_radio.ext_advertiser.aux_pckt_time  ),			//ticks periodic
   167be:	f8d3 067c 	ldr.w	r0, [r3, #1660]	; 0x67c
   167c2:	a323      	add	r3, pc, #140	; (adr r3, 16850 <radio_adv_enable+0x4f0>)
   167c4:	e9d3 2300 	ldrd	r2, r3, [r3]
   167c8:	fba0 0109 	umull	r0, r1, r0, r9
   167cc:	f7e9 fd64 	bl	298 <__aeabi_uldivmod>
		ret=	
   167d0:	2203      	movs	r2, #3
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   167d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ret=	
   167d6:	9000      	str	r0, [sp, #0]
   167d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   167da:	4611      	mov	r1, r2
   167dc:	4630      	mov	r0, r6
   167de:	e713      	b.n	16608 <radio_adv_enable+0x2a8>
			}else if(calculation >= 4){
   167e0:	d102      	bne.n	167e8 <radio_adv_enable+0x488>
				ticker_offset = 30 * (max_skip-4);
   167e2:	f1a8 0504 	sub.w	r5, r8, #4
   167e6:	e758      	b.n	1669a <radio_adv_enable+0x33a>
			}else if(calculation >=3){
   167e8:	2b03      	cmp	r3, #3
   167ea:	d102      	bne.n	167f2 <radio_adv_enable+0x492>
				ticker_offset = 30 * (max_skip-3);
   167ec:	f1a8 0503 	sub.w	r5, r8, #3
   167f0:	e753      	b.n	1669a <radio_adv_enable+0x33a>
			}else if(calculation >= 2){
   167f2:	2b02      	cmp	r3, #2
   167f4:	d102      	bne.n	167fc <radio_adv_enable+0x49c>
				ticker_offset = 30 * (max_skip-2);
   167f6:	f1a8 0502 	sub.w	r5, r8, #2
   167fa:	e74e      	b.n	1669a <radio_adv_enable+0x33a>
			}else if(calculation >= 1){
   167fc:	2b01      	cmp	r3, #1
   167fe:	d102      	bne.n	16806 <radio_adv_enable+0x4a6>
				ticker_offset = 30 * (max_skip-1);
   16800:	f108 35ff 	add.w	r5, r8, #4294967295	; 0xffffffff
   16804:	e749      	b.n	1669a <radio_adv_enable+0x33a>
				ticker_offset = 30 * max_skip;
   16806:	ebc8 1508 	rsb	r5, r8, r8, lsl #4
   1680a:	e748      	b.n	1669e <radio_adv_enable+0x33e>
				cpu_sleep();
   1680c:	f7f7 fe90 	bl	e530 <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
   16810:	9a11      	ldr	r2, [sp, #68]	; 0x44
   16812:	2a02      	cmp	r2, #2
   16814:	d0fa      	beq.n	1680c <radio_adv_enable+0x4ac>
   16816:	e79c      	b.n	16752 <radio_adv_enable+0x3f2>
			cpu_sleep();
   16818:	f7f7 fe8a 	bl	e530 <cpu_sleep>
		while (ret_cb == TICKER_STATUS_BUSY) {
   1681c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1681e:	2b02      	cmp	r3, #2
   16820:	d0fa      	beq.n	16818 <radio_adv_enable+0x4b8>
   16822:	e6f6      	b.n	16612 <radio_adv_enable+0x2b2>
		_radio.advertiser.is_enabled = 1;
   16824:	4b15      	ldr	r3, [pc, #84]	; (1687c <radio_adv_enable+0x51c>)
   16826:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   1682a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   1682e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		if (!_radio.scanner.is_enabled) {
   16832:	f893 364c 	ldrb.w	r3, [r3, #1612]	; 0x64c
   16836:	f013 0401 	ands.w	r4, r3, #1
   1683a:	d103      	bne.n	16844 <radio_adv_enable+0x4e4>
			ll_adv_scan_state_cb(BIT(0));
   1683c:	2001      	movs	r0, #1
   1683e:	f001 fba7 	bl	17f90 <ll_adv_scan_state_cb>
		return 0;
   16842:	4620      	mov	r0, r4
}
   16844:	b013      	add	sp, #76	; 0x4c
   16846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1684a:	bf00      	nop
   1684c:	f3af 8000 	nop.w
   16850:	1afd498d 	.word	0x1afd498d
   16854:	00000007 	.word	0x00000007
   16858:	3b9aca00 	.word	0x3b9aca00
   1685c:	0000e575 	.word	0x0000e575
   16860:	00010f01 	.word	0x00010f01
   16864:	00011085 	.word	0x00011085
   16868:	20001340 	.word	0x20001340
   1686c:	20001304 	.word	0x20001304
   16870:	000186a0 	.word	0x000186a0
   16874:	84e72a00 	.word	0x84e72a00
   16878:	00011021 	.word	0x00011021
   1687c:	20000bf0 	.word	0x20000bf0

00016880 <radio_adv_disable>:
{
   16880:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_ADV,
   16882:	2103      	movs	r1, #3
   16884:	2005      	movs	r0, #5
   16886:	f7f8 f863 	bl	e950 <role_disable>
	if (!status) {
   1688a:	4605      	mov	r5, r0
   1688c:	b9e8      	cbnz	r0, 168ca <radio_adv_disable+0x4a>
		_radio.advertiser.is_enabled = 0;
   1688e:	4c10      	ldr	r4, [pc, #64]	; (168d0 <radio_adv_disable+0x50>)
   16890:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
   16894:	f360 12c7 	bfi	r2, r0, #7, #1
   16898:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
		if (!_radio.scanner.is_enabled) {
   1689c:	f894 264c 	ldrb.w	r2, [r4, #1612]	; 0x64c
   168a0:	07d3      	lsls	r3, r2, #31
   168a2:	d401      	bmi.n	168a8 <radio_adv_disable+0x28>
			ll_adv_scan_state_cb(0);
   168a4:	f001 fb74 	bl	17f90 <ll_adv_scan_state_cb>
		conn = _radio.advertiser.conn;
   168a8:	f8d4 6638 	ldr.w	r6, [r4, #1592]	; 0x638
		if (conn) {
   168ac:	b15e      	cbz	r6, 168c6 <radio_adv_disable+0x46>
			_radio.advertiser.conn = NULL;
   168ae:	2300      	movs	r3, #0
   168b0:	f8c4 3638 	str.w	r3, [r4, #1592]	; 0x638
			mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link,
   168b4:	4907      	ldr	r1, [pc, #28]	; (168d4 <radio_adv_disable+0x54>)
   168b6:	f8d6 00b4 	ldr.w	r0, [r6, #180]	; 0xb4
   168ba:	f7f4 ffae 	bl	b81a <mem_release>
			mem_release(conn, &_radio.conn_free);
   168be:	4906      	ldr	r1, [pc, #24]	; (168d8 <radio_adv_disable+0x58>)
   168c0:	4630      	mov	r0, r6
   168c2:	f7f4 ffaa 	bl	b81a <mem_release>
}
   168c6:	4628      	mov	r0, r5
   168c8:	bd70      	pop	{r4, r5, r6, pc}
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
   168ca:	250c      	movs	r5, #12
   168cc:	e7fb      	b.n	168c6 <radio_adv_disable+0x46>
   168ce:	bf00      	nop
   168d0:	20000bf0 	.word	0x20000bf0
   168d4:	20001340 	.word	0x20001340
   168d8:	20001304 	.word	0x20001304
   168dc:	00000000 	.word	0x00000000

000168e0 <radio_scan_enable>:
{
   168e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (_radio.scanner.is_enabled) {
   168e4:	4c76      	ldr	r4, [pc, #472]	; (16ac0 <radio_scan_enable+0x1e0>)
   168e6:	f894 764c 	ldrb.w	r7, [r4, #1612]	; 0x64c
{
   168ea:	b08e      	sub	sp, #56	; 0x38
   168ec:	461d      	mov	r5, r3
	if (_radio.scanner.is_enabled) {
   168ee:	f017 0701 	ands.w	r7, r7, #1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   168f2:	f04f 0302 	mov.w	r3, #2
{
   168f6:	460e      	mov	r6, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   168f8:	930b      	str	r3, [sp, #44]	; 0x2c
{
   168fa:	4611      	mov	r1, r2
	if (_radio.scanner.is_enabled) {
   168fc:	d003      	beq.n	16906 <radio_scan_enable+0x26>
		return BT_HCI_ERR_CMD_DISALLOWED;
   168fe:	200c      	movs	r0, #12
}
   16900:	b00e      	add	sp, #56	; 0x38
   16902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	_radio.scanner.type = type;
   16906:	f894 364d 	ldrb.w	r3, [r4, #1613]	; 0x64d
	_radio.scanner.rpa_gen = rpa_gen;
   1690a:	f894 264e 	ldrb.w	r2, [r4, #1614]	; 0x64e
	_radio.scanner.type = type;
   1690e:	f360 03c3 	bfi	r3, r0, #3, #1
	_radio.scanner.phy = type >> 1;				//1
   16912:	0840      	lsrs	r0, r0, #1
   16914:	f360 0302 	bfi	r3, r0, #0, #3
	_radio.scanner.rpa_gen = rpa_gen;
   16918:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
   1691c:	f360 0200 	bfi	r2, r0, #0, #1
   16920:	f884 264e 	strb.w	r2, [r4, #1614]	; 0x64e
	_radio.scanner.rl_idx = rl_idx;
   16924:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
   16928:	f884 264f 	strb.w	r2, [r4, #1615]	; 0x64f
	_radio.scanner.init_addr_type = init_addr_type;
   1692c:	f366 13c7 	bfi	r3, r6, #7, #1
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
   16930:	2206      	movs	r2, #6
   16932:	f504 60ca 	add.w	r0, r4, #1616	; 0x650
	_radio.scanner.init_addr_type = init_addr_type;
   16936:	f884 364d 	strb.w	r3, [r4, #1613]	; 0x64d
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
   1693a:	4e62      	ldr	r6, [pc, #392]	; (16ac4 <radio_scan_enable+0x1e4>)
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
   1693c:	f7e9 ff29 	bl	792 <memcpy>
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
   16940:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
   16944:	f04f 0891 	mov.w	r8, #145	; 0x91
   16948:	fba2 0106 	umull	r0, r1, r2, r6
   1694c:	fb08 1102 	mla	r1, r8, r2, r1
   16950:	a359      	add	r3, pc, #356	; (adr r3, 16ab8 <radio_scan_enable+0x1d8>)
   16952:	e9d3 2300 	ldrd	r2, r3, [r3]
   16956:	f7e9 fc9f 	bl	298 <__aeabi_uldivmod>
	_radio.scanner.filter_policy = filter_policy;
   1695a:	f894 364d 	ldrb.w	r3, [r4, #1613]	; 0x64d
   1695e:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
	_radio.scanner.hdr.ticks_preempt_to_start =
   16962:	f8c4 7644 	str.w	r7, [r4, #1604]	; 0x644
	_radio.scanner.filter_policy = filter_policy;
   16966:	f362 1305 	bfi	r3, r2, #4, #2
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
   1696a:	b2aa      	uxth	r2, r5
   1696c:	fba2 6706 	umull	r6, r7, r2, r6
		_radio.ticks_active_to_start;
   16970:	f8d4 a78c 	ldr.w	sl, [r4, #1932]	; 0x78c
	_radio.scanner.filter_policy = filter_policy;
   16974:	f884 364d 	strb.w	r3, [r4, #1613]	; 0x64d
		_radio.scanner.ticks_window +
   16978:	f100 0909 	add.w	r9, r0, #9
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
   1697c:	fb08 7702 	mla	r7, r8, r2, r7
	_radio.scanner.hdr.ticks_xtal_to_start =
   16980:	2327      	movs	r3, #39	; 0x27
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
   16982:	f8c4 065c 	str.w	r0, [r4, #1628]	; 0x65c
	_radio.scanner.hdr.ticks_active_to_start =
   16986:	f8c4 a640 	str.w	sl, [r4, #1600]	; 0x640
	_radio.scanner.hdr.ticks_xtal_to_start =
   1698a:	f8c4 363c 	str.w	r3, [r4, #1596]	; 0x63c
	_radio.scanner.hdr.ticks_slot =
   1698e:	f8c4 9648 	str.w	r9, [r4, #1608]	; 0x648
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
   16992:	a349      	add	r3, pc, #292	; (adr r3, 16ab8 <radio_scan_enable+0x1d8>)
   16994:	e9d3 2300 	ldrd	r2, r3, [r3]
   16998:	4630      	mov	r0, r6
   1699a:	4639      	mov	r1, r7
   1699c:	f7e9 fc7c 	bl	298 <__aeabi_uldivmod>
	    (ticks_interval -
   169a0:	f1a0 0327 	sub.w	r3, r0, #39	; 0x27
	if (_radio.scanner.hdr.ticks_slot >
   169a4:	4599      	cmp	r9, r3
	_radio.scanner.interval = interval;
   169a6:	f8c4 5660 	str.w	r5, [r4, #1632]	; 0x660
	ticks_slot_offset =
   169aa:	4655      	mov	r5, sl
		_radio.scanner.hdr.ticks_slot =
   169ac:	bf88      	it	hi
   169ae:	f8c4 3648 	strhi.w	r3, [r4, #1608]	; 0x648
	ticks_slot_offset =
   169b2:	2d27      	cmp	r5, #39	; 0x27
   169b4:	bf38      	it	cc
   169b6:	2527      	movcc	r5, #39	; 0x27
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
   169b8:	4680      	mov	r8, r0
	_radio.scanner.slot_offset = ticks_slot_offset ;
   169ba:	f8c4 5664 	str.w	r5, [r4, #1636]	; 0x664
	ticks_anchor = ticker_ticks_now_get();
   169be:	f7f5 ff09 	bl	c7d4 <ticker_ticks_now_get>
	if ((_radio.scanner.conn) ||
   169c2:	f8d4 3674 	ldr.w	r3, [r4, #1652]	; 0x674
	ticks_anchor = ticker_ticks_now_get();
   169c6:	4682      	mov	sl, r0
	if ((_radio.scanner.conn) ||
   169c8:	2b00      	cmp	r3, #0
   169ca:	d05e      	beq.n	16a8a <radio_scan_enable+0x1aa>
		us_offset = 0;
   169cc:	2300      	movs	r3, #0
   169ce:	930c      	str	r3, [sp, #48]	; 0x30
   169d0:	483d      	ldr	r0, [pc, #244]	; (16ac8 <radio_scan_enable+0x1e8>)
   169d2:	f3bf 8f5b 	dmb	ish
   169d6:	e850 3f00 	ldrex	r3, [r0]
   169da:	f023 0301 	bic.w	r3, r3, #1
   169de:	e840 3200 	strex	r2, r3, [r0]
   169e2:	2a00      	cmp	r2, #0
   169e4:	d1f7      	bne.n	169d6 <radio_scan_enable+0xf6>
   169e6:	f3bf 8f5b 	dmb	ish
	work->handler = handler;
   169ea:	4938      	ldr	r1, [pc, #224]	; (16acc <radio_scan_enable+0x1ec>)
   169ec:	f840 1c04 	str.w	r1, [r0, #-4]
	k_delayed_work_init(&aux_scanning.work_d, aux_packet_function);
   169f0:	3004      	adds	r0, #4
   169f2:	f00b fc0b 	bl	2220c <k_delayed_work_init>
			   (ticks_anchor + HAL_TICKER_US_TO_TICKS(us_offset)),
   169f6:	980c      	ldr	r0, [sp, #48]	; 0x30
   169f8:	4935      	ldr	r1, [pc, #212]	; (16ad0 <radio_scan_enable+0x1f0>)
   169fa:	a32f      	add	r3, pc, #188	; (adr r3, 16ab8 <radio_scan_enable+0x1d8>)
   169fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   16a00:	fba0 0101 	umull	r0, r1, r0, r1
   16a04:	f7e9 fc48 	bl	298 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   16a08:	ab0b      	add	r3, sp, #44	; 0x2c
   16a0a:	9308      	str	r3, [sp, #32]
   16a0c:	4b31      	ldr	r3, [pc, #196]	; (16ad4 <radio_scan_enable+0x1f4>)
   16a0e:	9307      	str	r3, [sp, #28]
   16a10:	4b31      	ldr	r3, [pc, #196]	; (16ad8 <radio_scan_enable+0x1f8>)
   16a12:	9305      	str	r3, [sp, #20]
   16a14:	f8d4 3648 	ldr.w	r3, [r4, #1608]	; 0x648
			   (ticks_anchor + HAL_TICKER_US_TO_TICKS(us_offset)),
   16a18:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   16a1c:	f04f 0900 	mov.w	r9, #0
   16a20:	4482      	add	sl, r0
   16a22:	441d      	add	r5, r3
			   HAL_TICKER_REMAINDER((u64_t) interval * 625),
   16a24:	4630      	mov	r0, r6
   16a26:	a324      	add	r3, pc, #144	; (adr r3, 16ab8 <radio_scan_enable+0x1d8>)
   16a28:	e9d3 2300 	ldrd	r2, r3, [r3]
   16a2c:	4639      	mov	r1, r7
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   16a2e:	f8cd 9018 	str.w	r9, [sp, #24]
   16a32:	9504      	str	r5, [sp, #16]
   16a34:	f8cd 900c 	str.w	r9, [sp, #12]
			   HAL_TICKER_REMAINDER((u64_t) interval * 625),
   16a38:	f7e9 fc2e 	bl	298 <__aeabi_uldivmod>
   16a3c:	4610      	mov	r0, r2
   16a3e:	4619      	mov	r1, r3
   16a40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   16a44:	2300      	movs	r3, #0
   16a46:	f7e9 fc27 	bl	298 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   16a4a:	f8cd 8004 	str.w	r8, [sp, #4]
   16a4e:	9002      	str	r0, [sp, #8]
   16a50:	f8cd 9000 	str.w	r9, [sp]
   16a54:	4653      	mov	r3, sl
   16a56:	2206      	movs	r2, #6
   16a58:	2103      	movs	r1, #3
   16a5a:	4648      	mov	r0, r9
   16a5c:	f7f5 fd4c 	bl	c4f8 <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
   16a60:	2802      	cmp	r0, #2
   16a62:	d023      	beq.n	16aac <radio_scan_enable+0x1cc>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
   16a64:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   16a66:	2d00      	cmp	r5, #0
   16a68:	f47f af49 	bne.w	168fe <radio_scan_enable+0x1e>
	_radio.scanner.is_enabled = 1;
   16a6c:	f894 364c 	ldrb.w	r3, [r4, #1612]	; 0x64c
   16a70:	f043 0301 	orr.w	r3, r3, #1
   16a74:	f884 364c 	strb.w	r3, [r4, #1612]	; 0x64c
	if (!_radio.advertiser.is_enabled) {
   16a78:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
   16a7c:	2b00      	cmp	r3, #0
   16a7e:	db02      	blt.n	16a86 <radio_scan_enable+0x1a6>
		ll_adv_scan_state_cb(BIT(1));
   16a80:	2002      	movs	r0, #2
   16a82:	f001 fa85 	bl	17f90 <ll_adv_scan_state_cb>
	return 0;
   16a86:	4628      	mov	r0, r5
   16a88:	e73a      	b.n	16900 <radio_scan_enable+0x20>
		sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_APP,
   16a8a:	f8d4 1648 	ldr.w	r1, [r4, #1608]	; 0x648
		u32_t ticks_ref = 0;
   16a8e:	930d      	str	r3, [sp, #52]	; 0x34
		sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_APP,
   16a90:	aa0d      	add	r2, sp, #52	; 0x34
   16a92:	ab0c      	add	r3, sp, #48	; 0x30
   16a94:	4429      	add	r1, r5
   16a96:	2003      	movs	r0, #3
   16a98:	f7f8 fdba 	bl	f610 <sched_after_mstr_free_slot_get>
		if (us_offset) {
   16a9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   16a9e:	2b00      	cmp	r3, #0
   16aa0:	d096      	beq.n	169d0 <radio_scan_enable+0xf0>
			ticks_anchor = ticks_ref;
   16aa2:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
   16aa6:	e793      	b.n	169d0 <radio_scan_enable+0xf0>
			cpu_sleep();
   16aa8:	f7f7 fd42 	bl	e530 <cpu_sleep>
		while (ret_cb == TICKER_STATUS_BUSY) {
   16aac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   16aae:	2b02      	cmp	r3, #2
   16ab0:	d0fa      	beq.n	16aa8 <radio_scan_enable+0x1c8>
   16ab2:	e7d7      	b.n	16a64 <radio_scan_enable+0x184>
   16ab4:	f3af 8000 	nop.w
   16ab8:	1afd498d 	.word	0x1afd498d
   16abc:	00000007 	.word	0x00000007
   16ac0:	20000bf0 	.word	0x20000bf0
   16ac4:	84e72a00 	.word	0x84e72a00
   16ac8:	20003250 	.word	0x20003250
   16acc:	0001046d 	.word	0x0001046d
   16ad0:	3b9aca00 	.word	0x3b9aca00
   16ad4:	0000e575 	.word	0x0000e575
   16ad8:	00010f65 	.word	0x00010f65

00016adc <radio_scan_disable>:
{
   16adc:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_SCAN,
   16ade:	2104      	movs	r1, #4
   16ae0:	2006      	movs	r0, #6
   16ae2:	f7f7 ff35 	bl	e950 <role_disable>
	if (!status) {
   16ae6:	4605      	mov	r5, r0
   16ae8:	b9e8      	cbnz	r0, 16b26 <radio_scan_disable+0x4a>
		_radio.scanner.is_enabled = 0;
   16aea:	4c10      	ldr	r4, [pc, #64]	; (16b2c <radio_scan_disable+0x50>)
   16aec:	f894 264c 	ldrb.w	r2, [r4, #1612]	; 0x64c
   16af0:	f360 0200 	bfi	r2, r0, #0, #1
   16af4:	f884 264c 	strb.w	r2, [r4, #1612]	; 0x64c
		if (!_radio.advertiser.is_enabled) {
   16af8:	f994 2028 	ldrsb.w	r2, [r4, #40]	; 0x28
   16afc:	2a00      	cmp	r2, #0
   16afe:	db01      	blt.n	16b04 <radio_scan_disable+0x28>
			ll_adv_scan_state_cb(0);
   16b00:	f001 fa46 	bl	17f90 <ll_adv_scan_state_cb>
		conn = _radio.scanner.conn;
   16b04:	f8d4 6674 	ldr.w	r6, [r4, #1652]	; 0x674
		if (conn) {
   16b08:	b15e      	cbz	r6, 16b22 <radio_scan_disable+0x46>
			_radio.scanner.conn = NULL;
   16b0a:	2300      	movs	r3, #0
   16b0c:	f8c4 3674 	str.w	r3, [r4, #1652]	; 0x674
			mem_release(conn->llcp_terminate.
   16b10:	4907      	ldr	r1, [pc, #28]	; (16b30 <radio_scan_disable+0x54>)
   16b12:	f8d6 00b4 	ldr.w	r0, [r6, #180]	; 0xb4
   16b16:	f7f4 fe80 	bl	b81a <mem_release>
			mem_release(conn, &_radio.conn_free);
   16b1a:	4906      	ldr	r1, [pc, #24]	; (16b34 <radio_scan_disable+0x58>)
   16b1c:	4630      	mov	r0, r6
   16b1e:	f7f4 fe7c 	bl	b81a <mem_release>
}
   16b22:	4628      	mov	r0, r5
   16b24:	bd70      	pop	{r4, r5, r6, pc}
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
   16b26:	250c      	movs	r5, #12
   16b28:	e7fb      	b.n	16b22 <radio_scan_disable+0x46>
   16b2a:	bf00      	nop
   16b2c:	20000bf0 	.word	0x20000bf0
   16b30:	20001340 	.word	0x20001340
   16b34:	20001304 	.word	0x20001304

00016b38 <ll_connect_disable>:
	if (_radio.scanner.conn == 0) {
   16b38:	4b03      	ldr	r3, [pc, #12]	; (16b48 <ll_connect_disable+0x10>)
   16b3a:	f8d3 3674 	ldr.w	r3, [r3, #1652]	; 0x674
   16b3e:	b10b      	cbz	r3, 16b44 <ll_connect_disable+0xc>
	status = radio_scan_disable();
   16b40:	f7ff bfcc 	b.w	16adc <radio_scan_disable>
}
   16b44:	200c      	movs	r0, #12
   16b46:	4770      	bx	lr
   16b48:	20000bf0 	.word	0x20000bf0

00016b4c <ll_rx_dequeue>:
{
   16b4c:	b530      	push	{r4, r5, lr}
   16b4e:	b085      	sub	sp, #20
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
   16b50:	4d47      	ldr	r5, [pc, #284]	; (16c70 <ll_rx_dequeue+0x124>)
	struct radio_pdu_node_rx *node_rx = NULL;
   16b52:	aa04      	add	r2, sp, #16
   16b54:	2300      	movs	r3, #0
   16b56:	f842 3d04 	str.w	r3, [r2, #-4]!
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
   16b5a:	f8d5 0758 	ldr.w	r0, [r5, #1880]	; 0x758
   16b5e:	f205 7154 	addw	r1, r5, #1876	; 0x754
   16b62:	f7f4 fea9 	bl	b8b8 <memq_dequeue>
   16b66:	462c      	mov	r4, r5
	LL_ASSERT(link);
   16b68:	b970      	cbnz	r0, 16b88 <ll_rx_dequeue+0x3c>
   16b6a:	4b42      	ldr	r3, [pc, #264]	; (16c74 <ll_rx_dequeue+0x128>)
   16b6c:	9301      	str	r3, [sp, #4]
   16b6e:	9300      	str	r3, [sp, #0]
   16b70:	4a41      	ldr	r2, [pc, #260]	; (16c78 <ll_rx_dequeue+0x12c>)
   16b72:	4b42      	ldr	r3, [pc, #264]	; (16c7c <ll_rx_dequeue+0x130>)
   16b74:	4942      	ldr	r1, [pc, #264]	; (16c80 <ll_rx_dequeue+0x134>)
   16b76:	4843      	ldr	r0, [pc, #268]	; (16c84 <ll_rx_dequeue+0x138>)
		LL_ASSERT(_radio.link_rx_data_quota <
   16b78:	f7eb fb92 	bl	22a0 <printk>
   16b7c:	4040      	eors	r0, r0
   16b7e:	f380 8811 	msr	BASEPRI, r0
   16b82:	f04f 0004 	mov.w	r0, #4
   16b86:	df02      	svc	2
	mem_release(link, &_radio.link_rx_free);
   16b88:	f505 61ea 	add.w	r1, r5, #1872	; 0x750
   16b8c:	f7f4 fe45 	bl	b81a <mem_release>
	switch (node_rx->hdr.type) {
   16b90:	9a03      	ldr	r2, [sp, #12]
   16b92:	7911      	ldrb	r1, [r2, #4]
   16b94:	290c      	cmp	r1, #12
   16b96:	d807      	bhi.n	16ba8 <ll_rx_dequeue+0x5c>
   16b98:	2301      	movs	r3, #1
   16b9a:	408b      	lsls	r3, r1
   16b9c:	f641 707e 	movw	r0, #8062	; 0x1f7e
   16ba0:	4203      	tst	r3, r0
   16ba2:	d109      	bne.n	16bb8 <ll_rx_dequeue+0x6c>
   16ba4:	0618      	lsls	r0, r3, #24
   16ba6:	d419      	bmi.n	16bdc <ll_rx_dequeue+0x90>
		LL_ASSERT(0);
   16ba8:	4b32      	ldr	r3, [pc, #200]	; (16c74 <ll_rx_dequeue+0x128>)
   16baa:	9301      	str	r3, [sp, #4]
   16bac:	9300      	str	r3, [sp, #0]
   16bae:	4a32      	ldr	r2, [pc, #200]	; (16c78 <ll_rx_dequeue+0x12c>)
   16bb0:	4b32      	ldr	r3, [pc, #200]	; (16c7c <ll_rx_dequeue+0x130>)
   16bb2:	4933      	ldr	r1, [pc, #204]	; (16c80 <ll_rx_dequeue+0x134>)
   16bb4:	4834      	ldr	r0, [pc, #208]	; (16c88 <ll_rx_dequeue+0x13c>)
   16bb6:	e7df      	b.n	16b78 <ll_rx_dequeue+0x2c>
		LL_ASSERT(_radio.link_rx_data_quota <
   16bb8:	f895 0748 	ldrb.w	r0, [r5, #1864]	; 0x748
   16bbc:	f895 375c 	ldrb.w	r3, [r5, #1884]	; 0x75c
   16bc0:	3801      	subs	r0, #1
   16bc2:	4283      	cmp	r3, r0
   16bc4:	db07      	blt.n	16bd6 <ll_rx_dequeue+0x8a>
   16bc6:	4b2b      	ldr	r3, [pc, #172]	; (16c74 <ll_rx_dequeue+0x128>)
   16bc8:	9301      	str	r3, [sp, #4]
   16bca:	9300      	str	r3, [sp, #0]
   16bcc:	4a2a      	ldr	r2, [pc, #168]	; (16c78 <ll_rx_dequeue+0x12c>)
   16bce:	4b2b      	ldr	r3, [pc, #172]	; (16c7c <ll_rx_dequeue+0x130>)
   16bd0:	492b      	ldr	r1, [pc, #172]	; (16c80 <ll_rx_dequeue+0x134>)
   16bd2:	482e      	ldr	r0, [pc, #184]	; (16c8c <ll_rx_dequeue+0x140>)
   16bd4:	e7d0      	b.n	16b78 <ll_rx_dequeue+0x2c>
		_radio.link_rx_data_quota++;
   16bd6:	3301      	adds	r3, #1
   16bd8:	f885 375c 	strb.w	r3, [r5, #1884]	; 0x75c
	if (node_rx->hdr.type == NODE_RX_TYPE_CONNECTION) {
   16bdc:	2906      	cmp	r1, #6
   16bde:	d136      	bne.n	16c4e <ll_rx_dequeue+0x102>
		if ((radio_le_conn_cmplt->status == 0x3c) ||
   16be0:	7ad3      	ldrb	r3, [r2, #11]
   16be2:	2b3c      	cmp	r3, #60	; 0x3c
   16be4:	d00d      	beq.n	16c02 <ll_rx_dequeue+0xb6>
   16be6:	7b12      	ldrb	r2, [r2, #12]
   16be8:	b9e2      	cbnz	r2, 16c24 <ll_rx_dequeue+0xd8>
			LL_ASSERT(_radio.scanner.is_enabled);
   16bea:	f894 364c 	ldrb.w	r3, [r4, #1612]	; 0x64c
   16bee:	07d9      	lsls	r1, r3, #31
   16bf0:	d42f      	bmi.n	16c52 <ll_rx_dequeue+0x106>
   16bf2:	4b20      	ldr	r3, [pc, #128]	; (16c74 <ll_rx_dequeue+0x128>)
   16bf4:	9301      	str	r3, [sp, #4]
   16bf6:	9300      	str	r3, [sp, #0]
   16bf8:	4a1f      	ldr	r2, [pc, #124]	; (16c78 <ll_rx_dequeue+0x12c>)
   16bfa:	4b20      	ldr	r3, [pc, #128]	; (16c7c <ll_rx_dequeue+0x130>)
   16bfc:	4920      	ldr	r1, [pc, #128]	; (16c80 <ll_rx_dequeue+0x134>)
   16bfe:	4824      	ldr	r0, [pc, #144]	; (16c90 <ll_rx_dequeue+0x144>)
   16c00:	e7ba      	b.n	16b78 <ll_rx_dequeue+0x2c>
				_radio.advertiser.conn = NULL;
   16c02:	2300      	movs	r3, #0
				conn = _radio.advertiser.conn;
   16c04:	f8d4 5638 	ldr.w	r5, [r4, #1592]	; 0x638
				_radio.advertiser.conn = NULL;
   16c08:	f8c4 3638 	str.w	r3, [r4, #1592]	; 0x638
			LL_ASSERT(_radio.advertiser.is_enabled);
   16c0c:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
   16c10:	2b00      	cmp	r3, #0
   16c12:	db09      	blt.n	16c28 <ll_rx_dequeue+0xdc>
   16c14:	4b17      	ldr	r3, [pc, #92]	; (16c74 <ll_rx_dequeue+0x128>)
   16c16:	9301      	str	r3, [sp, #4]
   16c18:	9300      	str	r3, [sp, #0]
   16c1a:	4a17      	ldr	r2, [pc, #92]	; (16c78 <ll_rx_dequeue+0x12c>)
   16c1c:	4b17      	ldr	r3, [pc, #92]	; (16c7c <ll_rx_dequeue+0x130>)
   16c1e:	4918      	ldr	r1, [pc, #96]	; (16c80 <ll_rx_dequeue+0x134>)
   16c20:	481c      	ldr	r0, [pc, #112]	; (16c94 <ll_rx_dequeue+0x148>)
   16c22:	e7a9      	b.n	16b78 <ll_rx_dequeue+0x2c>
		struct connection *conn = NULL;
   16c24:	2500      	movs	r5, #0
   16c26:	e7f1      	b.n	16c0c <ll_rx_dequeue+0xc0>
			_radio.advertiser.is_enabled = 0;
   16c28:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   16c2c:	f36f 13c7 	bfc	r3, #7, #1
   16c30:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (conn) {
   16c34:	b995      	cbnz	r5, 16c5c <ll_rx_dequeue+0x110>
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
   16c36:	f894 064c 	ldrb.w	r0, [r4, #1612]	; 0x64c
		     _radio.advertiser.is_enabled;
   16c3a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
   16c3e:	f000 0001 	and.w	r0, r0, #1
   16c42:	0040      	lsls	r0, r0, #1
		if (!bm) {
   16c44:	ea50 10d3 	orrs.w	r0, r0, r3, lsr #7
   16c48:	d101      	bne.n	16c4e <ll_rx_dequeue+0x102>
			ll_adv_scan_state_cb(0);
   16c4a:	f001 f9a1 	bl	17f90 <ll_adv_scan_state_cb>
}
   16c4e:	b005      	add	sp, #20
   16c50:	bd30      	pop	{r4, r5, pc}
			_radio.scanner.is_enabled = 0;
   16c52:	f362 0300 	bfi	r3, r2, #0, #1
   16c56:	f884 364c 	strb.w	r3, [r4, #1612]	; 0x64c
   16c5a:	e7ec      	b.n	16c36 <ll_rx_dequeue+0xea>
			mem_release(node_rx->hdr.onion.link,
   16c5c:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
   16c60:	490d      	ldr	r1, [pc, #52]	; (16c98 <ll_rx_dequeue+0x14c>)
   16c62:	f7f4 fdda 	bl	b81a <mem_release>
			mem_release(conn, &_radio.conn_free);
   16c66:	490d      	ldr	r1, [pc, #52]	; (16c9c <ll_rx_dequeue+0x150>)
   16c68:	4628      	mov	r0, r5
   16c6a:	f7f4 fdd6 	bl	b81a <mem_release>
   16c6e:	e7e2      	b.n	16c36 <ll_rx_dequeue+0xea>
   16c70:	20000bf0 	.word	0x20000bf0
   16c74:	00023dbe 	.word	0x00023dbe
   16c78:	00022d86 	.word	0x00022d86
   16c7c:	00025eb4 	.word	0x00025eb4
   16c80:	000272e8 	.word	0x000272e8
   16c84:	00025f02 	.word	0x00025f02
   16c88:	00023fb5 	.word	0x00023fb5
   16c8c:	00025fec 	.word	0x00025fec
   16c90:	000264eb 	.word	0x000264eb
   16c94:	000264ad 	.word	0x000264ad
   16c98:	20001340 	.word	0x20001340
   16c9c:	20001304 	.word	0x20001304

00016ca0 <rtc0_nrf5_isr>:
	ISR_DIRECT_PM();
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
   16ca0:	b538      	push	{r3, r4, r5, lr}
	u32_t compare0, compare1;

	/* store interested events */
	compare0 = NRF_RTC0->EVENTS_COMPARE[0];
   16ca2:	4c0b      	ldr	r4, [pc, #44]	; (16cd0 <rtc0_nrf5_isr+0x30>)
   16ca4:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
	compare1 = NRF_RTC0->EVENTS_COMPARE[1];
   16ca8:	f8d4 5144 	ldr.w	r5, [r4, #324]	; 0x144

	/* On compare0 run ticker worker instance0 */
	if (compare0) {
   16cac:	b122      	cbz	r2, 16cb8 <rtc0_nrf5_isr+0x18>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   16cae:	2000      	movs	r0, #0
   16cb0:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140

		ticker_trigger(0);
   16cb4:	f7f5 fc0e 	bl	c4d4 <ticker_trigger>
	}

	/* On compare1 run ticker worker instance1 */
	if (compare1) {
   16cb8:	b12d      	cbz	r5, 16cc6 <rtc0_nrf5_isr+0x26>
		NRF_RTC0->EVENTS_COMPARE[1] = 0;
   16cba:	2300      	movs	r3, #0
   16cbc:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144

		ticker_trigger(1);
   16cc0:	2001      	movs	r0, #1
   16cc2:	f7f5 fc07 	bl	c4d4 <ticker_trigger>
	}

	mayfly_run(MAYFLY_CALL_ID_0);
   16cc6:	2000      	movs	r0, #0
}
   16cc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	mayfly_run(MAYFLY_CALL_ID_0);
   16ccc:	f7f4 bea4 	b.w	ba18 <mayfly_run>
   16cd0:	4000b000 	.word	0x4000b000

00016cd4 <swi4_nrf5_isr>:

static void swi4_nrf5_isr(void *arg)
{
	mayfly_run(MAYFLY_CALL_ID_1);
   16cd4:	2001      	movs	r0, #1
   16cd6:	f7f4 be9f 	b.w	ba18 <mayfly_run>

00016cda <radio_nrf5_isr>:
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   16cda:	4668      	mov	r0, sp
   16cdc:	f020 0107 	bic.w	r1, r0, #7
   16ce0:	468d      	mov	sp, r1
   16ce2:	b501      	push	{r0, lr}
	isr_radio();
   16ce4:	f001 fd32 	bl	1874c <isr_radio>
	ISR_DIRECT_PM();
   16ce8:	f7ea ffc2 	bl	1c70 <_arch_isr_direct_pm>
extern void _IntExit(void);

static inline void _arch_isr_direct_footer(int maybe_swap)
{
	if (maybe_swap) {
		_IntExit();
   16cec:	f7ea fda0 	bl	1830 <_ExcExit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   16cf0:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   16cf4:	4685      	mov	sp, r0
   16cf6:	4770      	bx	lr

00016cf8 <radio_active_callback>:
{
   16cf8:	4770      	bx	lr
	...

00016cfc <radio_event_callback>:
	k_sem_give(sem_recv);
   16cfc:	4b01      	ldr	r3, [pc, #4]	; (16d04 <radio_event_callback+0x8>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   16cfe:	6818      	ldr	r0, [r3, #0]
   16d00:	f00a bf58 	b.w	21bb4 <_impl_k_sem_give>
   16d04:	20001ec4 	.word	0x20001ec4

00016d08 <ll_init>:
}

int ll_init(struct k_sem *sem_rx)
{
   16d08:	b570      	push	{r4, r5, r6, lr}
	struct device *clk_k32;
	struct device *clk_m16;
	struct device *entropy;
	u32_t err;

	sem_recv = sem_rx;
   16d0a:	4b41      	ldr	r3, [pc, #260]	; (16e10 <ll_init+0x108>)
{
   16d0c:	b086      	sub	sp, #24
	sem_recv = sem_rx;
   16d0e:	6018      	str	r0, [r3, #0]

	clk_k32 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
   16d10:	4840      	ldr	r0, [pc, #256]	; (16e14 <ll_init+0x10c>)
   16d12:	f00a fa41 	bl	21198 <device_get_binding>
	if (!clk_k32) {
   16d16:	b918      	cbnz	r0, 16d20 <ll_init+0x18>
		return -ENODEV;
   16d18:	f06f 0012 	mvn.w	r0, #18
	irq_enable(NRF5_IRQ_RADIO_IRQn);
	irq_enable(NRF5_IRQ_RTC0_IRQn);
	irq_enable(NRF5_IRQ_SWI4_IRQn);

	return 0;
}
   16d1c:	b006      	add	sp, #24
   16d1e:	bd70      	pop	{r4, r5, r6, pc}
	return api->on(dev, sys);
   16d20:	6843      	ldr	r3, [r0, #4]
   16d22:	2101      	movs	r1, #1
   16d24:	681b      	ldr	r3, [r3, #0]
   16d26:	4798      	blx	r3
	entropy = device_get_binding(CONFIG_ENTROPY_NAME);
   16d28:	483b      	ldr	r0, [pc, #236]	; (16e18 <ll_init+0x110>)
   16d2a:	f00a fa35 	bl	21198 <device_get_binding>
	if (!entropy) {
   16d2e:	4604      	mov	r4, r0
   16d30:	2800      	cmp	r0, #0
   16d32:	d0f1      	beq.n	16d18 <ll_init+0x10>
	cntr_init();
   16d34:	f001 fb52 	bl	183dc <cntr_init>
	mayfly_init();
   16d38:	f7f4 fdce 	bl	b8d8 <mayfly_init>
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   16d3c:	4b37      	ldr	r3, [pc, #220]	; (16e1c <ll_init+0x114>)
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
   16d3e:	2203      	movs	r2, #3
   16d40:	721a      	strb	r2, [r3, #8]
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   16d42:	2108      	movs	r1, #8
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
   16d44:	4a36      	ldr	r2, [pc, #216]	; (16e20 <ll_init+0x118>)
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   16d46:	7019      	strb	r1, [r3, #0]
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
   16d48:	2000      	movs	r0, #0
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   16d4a:	2502      	movs	r5, #2
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
   16d4c:	7418      	strb	r0, [r3, #16]
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   16d4e:	761d      	strb	r5, [r3, #24]
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
   16d50:	9205      	str	r2, [sp, #20]
   16d52:	4a34      	ldr	r2, [pc, #208]	; (16e24 <ll_init+0x11c>)
   16d54:	9204      	str	r2, [sp, #16]
   16d56:	4a34      	ldr	r2, [pc, #208]	; (16e28 <ll_init+0x120>)
   16d58:	9203      	str	r2, [sp, #12]
   16d5a:	4a34      	ldr	r2, [pc, #208]	; (16e2c <ll_init+0x124>)
   16d5c:	9202      	str	r2, [sp, #8]
   16d5e:	220d      	movs	r2, #13
   16d60:	9201      	str	r2, [sp, #4]
   16d62:	9300      	str	r3, [sp, #0]
   16d64:	4a32      	ldr	r2, [pc, #200]	; (16e30 <ll_init+0x128>)
   16d66:	2304      	movs	r3, #4
   16d68:	f7f5 fb7c 	bl	c464 <ticker_init>
	LL_ASSERT(!err);
   16d6c:	b170      	cbz	r0, 16d8c <ll_init+0x84>
   16d6e:	4b31      	ldr	r3, [pc, #196]	; (16e34 <ll_init+0x12c>)
   16d70:	9301      	str	r3, [sp, #4]
   16d72:	9300      	str	r3, [sp, #0]
   16d74:	4a30      	ldr	r2, [pc, #192]	; (16e38 <ll_init+0x130>)
   16d76:	4b31      	ldr	r3, [pc, #196]	; (16e3c <ll_init+0x134>)
   16d78:	4931      	ldr	r1, [pc, #196]	; (16e40 <ll_init+0x138>)
   16d7a:	4832      	ldr	r0, [pc, #200]	; (16e44 <ll_init+0x13c>)
   16d7c:	f7eb fa90 	bl	22a0 <printk>
   16d80:	4040      	eors	r0, r0
   16d82:	f380 8811 	msr	BASEPRI, r0
   16d86:	f04f 0004 	mov.w	r0, #4
   16d8a:	df02      	svc	2
	clk_m16 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_M16SRC_DRV_NAME);
   16d8c:	482e      	ldr	r0, [pc, #184]	; (16e48 <ll_init+0x140>)
   16d8e:	f00a fa03 	bl	21198 <device_get_binding>
	if (!clk_m16) {
   16d92:	2800      	cmp	r0, #0
   16d94:	d0c0      	beq.n	16d18 <ll_init+0x10>
	err = radio_init(clk_m16, CLOCK_CONTROL_NRF5_K32SRC_ACCURACY, entropy,
   16d96:	4b2d      	ldr	r3, [pc, #180]	; (16e4c <ll_init+0x144>)
   16d98:	9304      	str	r3, [sp, #16]
   16d9a:	9501      	str	r5, [sp, #4]
   16d9c:	231b      	movs	r3, #27
   16d9e:	2501      	movs	r5, #1
   16da0:	f240 66bc 	movw	r6, #1724	; 0x6bc
   16da4:	9303      	str	r3, [sp, #12]
   16da6:	9302      	str	r3, [sp, #8]
   16da8:	4622      	mov	r2, r4
   16daa:	9605      	str	r6, [sp, #20]
   16dac:	9500      	str	r5, [sp, #0]
   16dae:	462b      	mov	r3, r5
   16db0:	2107      	movs	r1, #7
   16db2:	f7fe fc15 	bl	155e0 <radio_init>
	if (err) {
   16db6:	4604      	mov	r4, r0
   16db8:	b160      	cbz	r0, 16dd4 <ll_init+0xcc>
		BT_ERR("Required RAM size: %d, supplied: %u.", err,
   16dba:	4b1e      	ldr	r3, [pc, #120]	; (16e34 <ll_init+0x12c>)
   16dbc:	9303      	str	r3, [sp, #12]
   16dbe:	e88d 0058 	stmia.w	sp, {r3, r4, r6}
   16dc2:	4a1d      	ldr	r2, [pc, #116]	; (16e38 <ll_init+0x130>)
   16dc4:	4b1d      	ldr	r3, [pc, #116]	; (16e3c <ll_init+0x134>)
   16dc6:	491e      	ldr	r1, [pc, #120]	; (16e40 <ll_init+0x138>)
   16dc8:	4821      	ldr	r0, [pc, #132]	; (16e50 <ll_init+0x148>)
   16dca:	f7eb fa69 	bl	22a0 <printk>
		return -ENOMEM;
   16dce:	f06f 000b 	mvn.w	r0, #11
   16dd2:	e7a3      	b.n	16d1c <ll_init+0x14>
	ll_filter_reset(true);
   16dd4:	4628      	mov	r0, r5
   16dd6:	f001 fab9 	bl	1834c <ll_filter_reset>
	IRQ_DIRECT_CONNECT(NRF5_IRQ_RADIO_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
   16dda:	4622      	mov	r2, r4
   16ddc:	4621      	mov	r1, r4
   16dde:	4628      	mov	r0, r5
   16de0:	f7ea ff2c 	bl	1c3c <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_RTC0_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
   16de4:	4622      	mov	r2, r4
   16de6:	4621      	mov	r1, r4
   16de8:	200b      	movs	r0, #11
   16dea:	f7ea ff27 	bl	1c3c <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_SWI4_IRQn, CONFIG_BT_CTLR_JOB_PRIO, swi4_nrf5_isr,
   16dee:	4622      	mov	r2, r4
   16df0:	4621      	mov	r1, r4
   16df2:	2018      	movs	r0, #24
   16df4:	f7ea ff22 	bl	1c3c <_irq_priority_set>
	irq_enable(NRF5_IRQ_RADIO_IRQn);
   16df8:	4628      	mov	r0, r5
   16dfa:	f7ea feed 	bl	1bd8 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RTC0_IRQn);
   16dfe:	200b      	movs	r0, #11
   16e00:	f7ea feea 	bl	1bd8 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_SWI4_IRQn);
   16e04:	2018      	movs	r0, #24
   16e06:	f7ea fee7 	bl	1bd8 <_arch_irq_enable>
	return 0;
   16e0a:	4620      	mov	r0, r4
   16e0c:	e786      	b.n	16d1c <ll_init+0x14>
   16e0e:	bf00      	nop
   16e10:	20001ec4 	.word	0x20001ec4
   16e14:	000233a0 	.word	0x000233a0
   16e18:	00023374 	.word	0x00023374
   16e1c:	20001ea4 	.word	0x20001ea4
   16e20:	0001915d 	.word	0x0001915d
   16e24:	000190b9 	.word	0x000190b9
   16e28:	0001905d 	.word	0x0001905d
   16e2c:	20001c34 	.word	0x20001c34
   16e30:	20001af4 	.word	0x20001af4
   16e34:	00023dbe 	.word	0x00023dbe
   16e38:	00022d86 	.word	0x00022d86
   16e3c:	00026c98 	.word	0x00026c98
   16e40:	000272e8 	.word	0x000272e8
   16e44:	00026ca0 	.word	0x00026ca0
   16e48:	000233ab 	.word	0x000233ab
   16e4c:	20001438 	.word	0x20001438
   16e50:	00026cc6 	.word	0x00026cc6

00016e54 <ll_adv_set_get>:


struct ll_adv_set *ll_adv_set_get(void)
{
	return &ll_adv;
}
   16e54:	4800      	ldr	r0, [pc, #0]	; (16e58 <ll_adv_set_get+0x4>)
   16e56:	4770      	bx	lr
   16e58:	20001eca 	.word	0x20001eca

00016e5c <ll_adv_params_set>:
u32_t ll_adv_params_set(u8_t Adv_handle, u16_t evt_prop, u16_t interval,
			u8_t own_addr_type,
			u8_t direct_addr_type, u8_t const *const direct_addr,
			u8_t chan_map, u8_t filter_policy, u8_t *tx_pwr,
			u8_t phy_p, u8_t skip, u8_t phy_s, u8_t sid, u8_t sreq)
{
   16e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16e60:	b08b      	sub	sp, #44	; 0x2c
   16e62:	469b      	mov	fp, r3
   16e64:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
   16e68:	9303      	str	r3, [sp, #12]
   16e6a:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
   16e6e:	9304      	str	r3, [sp, #16]
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   16e70:	2300      	movs	r3, #0
   16e72:	f88d 3020 	strb.w	r3, [sp, #32]
   16e76:	2306      	movs	r3, #6
   16e78:	2601      	movs	r6, #1
   16e7a:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   16e7e:	2502      	movs	r5, #2
   16e80:	2307      	movs	r3, #7
{
   16e82:	4689      	mov	r9, r1
   16e84:	4614      	mov	r4, r2
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   16e86:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
   16e8a:	f88d 5023 	strb.w	r5, [sp, #35]	; 0x23
   16e8e:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
   16e92:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	struct radio_adv_data *radio_adv_data;
	struct radio_adv_data *radio_aux_adv_data;
	struct pdu_adv *pdu;
	struct pdu_adv *aux_pdu;
	
	if (ll_adv_is_enabled()) {
   16e96:	f7fe fc81 	bl	1579c <ll_adv_is_enabled>
   16e9a:	4682      	mov	sl, r0
   16e9c:	2800      	cmp	r0, #0
   16e9e:	f040 81a3 	bne.w	171e8 <ll_adv_params_set+0x38c>

#if defined(CONFIG_BT_CTLR_ADV_EXT)
	/* TODO: check and fail (0x12, invalid HCI cmd param) if invalid
	 * evt_prop bits.
	 */
	ll_adv.max_skip = skip;
   16ea2:	4b5e      	ldr	r3, [pc, #376]	; (1701c <ll_adv_params_set+0x1c0>)
   16ea4:	f89d 2068 	ldrb.w	r2, [sp, #104]	; 0x68
   16ea8:	731a      	strb	r2, [r3, #12]
	
	u8_t adv_type;
	ll_adv.phy_p = BIT(0);
   16eaa:	7a1a      	ldrb	r2, [r3, #8]
		adv_type = 0x05;
	}			
	/* extended */
	//if (adv_type > 0x04) {
		/* legacy */
		if (evt_prop & BIT(4)) {
   16eac:	f019 0f10 	tst.w	r9, #16
	ll_adv.phy_p = BIT(0);
   16eb0:	f366 0202 	bfi	r2, r6, #0, #3
   16eb4:	721a      	strb	r2, [r3, #8]
		if (evt_prop & BIT(4)) {
   16eb6:	f000 809f 	beq.w	16ff8 <ll_adv_params_set+0x19c>
			u8_t const leg_adv_type[] = { 0x03, 0x04, 0x02, 0x00};
   16eba:	2203      	movs	r2, #3
   16ebc:	f88d 201c 	strb.w	r2, [sp, #28]

			adv_type = leg_adv_type[evt_prop & 0x03];

			/* high duty cycle directed */
			if (evt_prop & BIT(3)) {
   16ec0:	f019 0f08 	tst.w	r9, #8
			u8_t const leg_adv_type[] = { 0x03, 0x04, 0x02, 0x00};
   16ec4:	f04f 0204 	mov.w	r2, #4
   16ec8:	f88d 201d 	strb.w	r2, [sp, #29]
   16ecc:	f88d 501e 	strb.w	r5, [sp, #30]
   16ed0:	f88d 001f 	strb.w	r0, [sp, #31]
			if (evt_prop & BIT(3)) {
   16ed4:	d108      	bne.n	16ee8 <ll_adv_params_set+0x8c>
			adv_type = leg_adv_type[evt_prop & 0x03];
   16ed6:	a90a      	add	r1, sp, #40	; 0x28
   16ed8:	f009 0203 	and.w	r2, r9, #3
   16edc:	440a      	add	r2, r1
   16ede:	f812 1c0c 	ldrb.w	r1, [r2, #-12]
	/* remember params so that set adv/scan data and adv enable
	 * interface can correctly update adv/scan data in the
	 * double buffer between caller and controller context.
	 */
	/* Set interval for Undirected or Low Duty Cycle Directed Advertising */
	if (adv_type == 0x01) {
   16ee2:	42b1      	cmp	r1, r6
   16ee4:	f040 8098 	bne.w	17018 <ll_adv_params_set+0x1bc>
		ll_adv.interval = 0;  				//interval = 0 for ADV_DIRECT_IND
   16ee8:	2200      	movs	r2, #0
   16eea:	815a      	strh	r2, [r3, #10]
   16eec:	2101      	movs	r1, #1
	} else {
		ll_adv.interval = interval;
	}
	ll_adv.chan_map = chan_map;  			
   16eee:	781a      	ldrb	r2, [r3, #0]
   16ef0:	f89d 0058 	ldrb.w	r0, [sp, #88]	; 0x58
   16ef4:	9105      	str	r1, [sp, #20]
   16ef6:	f360 0202 	bfi	r2, r0, #0, #3
	ll_adv.filter_policy = filter_policy;
   16efa:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
   16efe:	f360 02c4 	bfi	r2, r0, #3, #2
   16f02:	701a      	strb	r2, [r3, #0]
	
	/* update the "current" primary adv data and Aux packet */
	radio_adv_data = radio_adv_data_get();
   16f04:	f7fe fc3e 	bl	15784 <radio_adv_data_get>
   16f08:	4606      	mov	r6, r0
	radio_aux_adv_data = radio_aux_adv_data_get();
   16f0a:	f7fe fc3f 	bl	1578c <radio_aux_adv_data_get>

	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
	aux_pdu = (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0];

	pdu->type = pdu_adv_type[adv_type];
   16f0e:	9905      	ldr	r1, [sp, #20]
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   16f10:	f896 5203 	ldrb.w	r5, [r6, #515]	; 0x203
	aux_pdu = (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0];
   16f14:	f890 7203 	ldrb.w	r7, [r0, #515]	; 0x203
	pdu->type = pdu_adv_type[adv_type];
   16f18:	aa0a      	add	r2, sp, #40	; 0x28
   16f1a:	4411      	add	r1, r2
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   16f1c:	eb05 2505 	add.w	r5, r5, r5, lsl #8
	pdu->type = pdu_adv_type[adv_type];
   16f20:	f811 2c08 	ldrb.w	r2, [r1, #-8]
   16f24:	5d71      	ldrb	r1, [r6, r5]
   16f26:	f002 020f 	and.w	r2, r2, #15
   16f2a:	f362 0103 	bfi	r1, r2, #0, #4
   16f2e:	5571      	strb	r1, [r6, r5]
	aux_pdu = (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0];
   16f30:	eb07 2707 	add.w	r7, r7, r7, lsl #8
	radio_aux_adv_data = radio_aux_adv_data_get();
   16f34:	4603      	mov	r3, r0
	aux_pdu->type = pdu->type;
   16f36:	5dc1      	ldrb	r1, [r0, r7]
   16f38:	f362 0103 	bfi	r1, r2, #0, #4
   16f3c:	55c1      	strb	r1, [r0, r7]
	
	pdu->rfu = 0;
   16f3e:	5d72      	ldrb	r2, [r6, r5]
   16f40:	f36f 1204 	bfc	r2, #4, #1
   16f44:	5572      	strb	r2, [r6, r5]
	aux_pdu->rfu = pdu->rfu;
   16f46:	5dc2      	ldrb	r2, [r0, r7]
   16f48:	f36f 1204 	bfc	r2, #4, #1
   16f4c:	55c2      	strb	r2, [r0, r7]

	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) && 
   16f4e:	5d72      	ldrb	r2, [r6, r5]
   16f50:	f002 010f 	and.w	r1, r2, #15
   16f54:	2901      	cmp	r1, #1
	    ((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
	     (pdu->type == PDU_ADV_TYPE_DIRECT_IND))) {
		pdu->chan_sel = 1;           // could be same for ext adv  LE Channel Selection Algorithm #2 feature 
   16f56:	bf95      	itete	ls
   16f58:	f042 0220 	orrls.w	r2, r2, #32
		aux_pdu->chan_sel = pdu->chan_sel;
	} else {
		pdu->chan_sel = 0;
   16f5c:	f36f 1245 	bfchi	r2, #5, #1
		pdu->chan_sel = 1;           // could be same for ext adv  LE Channel Selection Algorithm #2 feature 
   16f60:	5572      	strbls	r2, [r6, r5]
		pdu->chan_sel = 0;
   16f62:	5572      	strbhi	r2, [r6, r5]
		aux_pdu->chan_sel = pdu->chan_sel;
   16f64:	bf95      	itete	ls
   16f66:	5dc2      	ldrbls	r2, [r0, r7]
		aux_pdu->chan_sel = pdu->chan_sel;
   16f68:	5dc2      	ldrbhi	r2, [r0, r7]
		aux_pdu->chan_sel = pdu->chan_sel;
   16f6a:	f042 0220 	orrls.w	r2, r2, #32
		aux_pdu->chan_sel = pdu->chan_sel;
   16f6e:	f36f 1245 	bfchi	r2, #5, #1
   16f72:	55c2      	strb	r2, [r0, r7]
	aux_pdu = (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0];
   16f74:	eb00 0807 	add.w	r8, r0, r7
	}

#if defined(CONFIG_BT_CTLR_PRIVACY)
	ll_adv.own_addr_type = own_addr_type;
   16f78:	4828      	ldr	r0, [pc, #160]	; (1701c <ll_adv_params_set+0x1c0>)
   16f7a:	7802      	ldrb	r2, [r0, #0]
   16f7c:	f36b 1246 	bfi	r2, fp, #5, #2
   16f80:	7002      	strb	r2, [r0, #0]
	if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   16f82:	b2d2      	uxtb	r2, r2
   16f84:	0651      	lsls	r1, r2, #25
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   16f86:	eb06 0405 	add.w	r4, r6, r5
	if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   16f8a:	d50a      	bpl.n	16fa2 <ll_adv_params_set+0x146>
   16f8c:	9305      	str	r3, [sp, #20]
	    ll_adv.own_addr_type == BT_ADDR_LE_RANDOM_ID) {
		ll_adv.id_addr_type = direct_addr_type;
   16f8e:	9b03      	ldr	r3, [sp, #12]
		memcpy(&ll_adv.id_addr, direct_addr, BDADDR_SIZE);
   16f90:	9915      	ldr	r1, [sp, #84]	; 0x54
		ll_adv.id_addr_type = direct_addr_type;
   16f92:	f363 12c7 	bfi	r2, r3, #7, #1
   16f96:	f800 2b02 	strb.w	r2, [r0], #2
		memcpy(&ll_adv.id_addr, direct_addr, BDADDR_SIZE);
   16f9a:	2206      	movs	r2, #6
   16f9c:	f7e9 fbf9 	bl	792 <memcpy>
   16fa0:	9b05      	ldr	r3, [sp, #20]
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */
	pdu->tx_addr =  own_addr_type & 0x1;
   16fa2:	5d72      	ldrb	r2, [r6, r5]
   16fa4:	f00b 0b01 	and.w	fp, fp, #1
   16fa8:	f36b 1286 	bfi	r2, fp, #6, #1
   16fac:	5572      	strb	r2, [r6, r5]
	aux_pdu->tx_addr = 0;						//not sending transmitting address in aux packet
   16fae:	5dda      	ldrb	r2, [r3, r7]
   16fb0:	f36f 1286 	bfc	r2, #6, #1
   16fb4:	55da      	strb	r2, [r3, r7]
	pdu->rx_addr = 0;  							
   16fb6:	5d72      	ldrb	r2, [r6, r5]
   16fb8:	f36f 12c7 	bfc	r2, #7, #1
   16fbc:	5572      	strb	r2, [r6, r5]
	aux_pdu->rx_addr = pdu->rx_addr;
   16fbe:	5dda      	ldrb	r2, [r3, r7]
   16fc0:	f36f 12c7 	bfc	r2, #7, #1
   16fc4:	55da      	strb	r2, [r3, r7]
	if(evt_prop & BIT(2)){							// for directed ADV wuth public address
   16fc6:	f019 0204 	ands.w	r2, r9, #4
		pdu->rx_addr = 0;//direct_addr_type;
   16fca:	bf1e      	ittt	ne
   16fcc:	5d73      	ldrbne	r3, [r6, r5]
   16fce:	f36f 13c7 	bfcne	r3, #7, #1
   16fd2:	5573      	strbne	r3, [r6, r5]
	}

	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   16fd4:	5d73      	ldrb	r3, [r6, r5]
   16fd6:	f003 010f 	and.w	r1, r3, #15
   16fda:	2901      	cmp	r1, #1
   16fdc:	d120      	bne.n	17020 <ll_adv_params_set+0x1c4>
		pdu->rx_addr = direct_addr_type;
   16fde:	9a03      	ldr	r2, [sp, #12]
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
   16fe0:	9915      	ldr	r1, [sp, #84]	; 0x54
		pdu->rx_addr = direct_addr_type;
   16fe2:	f362 13c7 	bfi	r3, r2, #7, #1
   16fe6:	5573      	strb	r3, [r6, r5]
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
   16fe8:	2206      	movs	r2, #6
   16fea:	f104 0008 	add.w	r0, r4, #8
   16fee:	f7e9 fbd0 	bl	792 <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
   16ff2:	230c      	movs	r3, #12
		/* NOTE: AdvA, filled at enable and RPA timeout */
		
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	} else if (pdu->len == 0) {
		pdu->len = BDADDR_SIZE;
   16ff4:	7063      	strb	r3, [r4, #1]
   16ff6:	e0d2      	b.n	1719e <ll_adv_params_set+0x342>
			if (((evt_prop & 0x03) == 0x03) ||
   16ff8:	f009 0203 	and.w	r2, r9, #3
   16ffc:	2a03      	cmp	r2, #3
   16ffe:	f000 80f6 	beq.w	171ee <ll_adv_params_set+0x392>
   17002:	f009 020c 	and.w	r2, r9, #12
   17006:	2a0c      	cmp	r2, #12
   17008:	f000 80f1 	beq.w	171ee <ll_adv_params_set+0x392>
			ll_adv.phy_p = phy_p;
   1700c:	7a1a      	ldrb	r2, [r3, #8]
   1700e:	9904      	ldr	r1, [sp, #16]
   17010:	f361 0202 	bfi	r2, r1, #0, #3
   17014:	721a      	strb	r2, [r3, #8]
			adv_type = 0x05; /* PDU_ADV_TYPE_EXT_IND */
   17016:	2105      	movs	r1, #5
		ll_adv.interval = interval;
   17018:	815c      	strh	r4, [r3, #10]
   1701a:	e768      	b.n	16eee <ll_adv_params_set+0x92>
   1701c:	20001eca 	.word	0x20001eca
	} else if (pdu->type == PDU_ADV_TYPE_EXT_IND) {
   17020:	2907      	cmp	r1, #7
   17022:	f040 80dc 	bne.w	171de <ll_adv_params_set+0x382>
		p->ext_hdr_len = 0;
   17026:	78a3      	ldrb	r3, [r4, #2]
		p->adv_mode = 0x00;//evt_prop & 0x03;
   17028:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1702c:	f36f 1387 	bfc	r3, #6, #2
   17030:	70a3      	strb	r3, [r4, #2]
		aux_p->ext_hdr_len = p->ext_hdr_len;
   17032:	f898 3002 	ldrb.w	r3, [r8, #2]
		aux_p->adv_mode = p->adv_mode;
   17036:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1703a:	f36f 1387 	bfc	r3, #6, #2
   1703e:	f888 3002 	strb.w	r3, [r8, #2]
		if (!((evt_prop & BIT(5)) && !p->adv_mode && (phy_p != BIT(2)))) {
   17042:	f019 0f20 	tst.w	r9, #32
		*(u8_t *)h = 0;
   17046:	f04f 0300 	mov.w	r3, #0
   1704a:	70e3      	strb	r3, [r4, #3]
		p = (void *)&pdu->adv_ext_ind;
   1704c:	f104 0002 	add.w	r0, r4, #2
		ptr = (u8_t *)h + sizeof(*h);
   17050:	f104 0504 	add.w	r5, r4, #4
		aux_p = (void *)&aux_pdu->adv_ext_ind;
   17054:	f108 0102 	add.w	r1, r8, #2
		aux_ptr = (u8_t *)aux_h + sizeof(*aux_h);
   17058:	f108 0604 	add.w	r6, r8, #4
		*(u8_t *)aux_h = 0;
   1705c:	f888 3003 	strb.w	r3, [r8, #3]
		if (!((evt_prop & BIT(5)) && !p->adv_mode && (phy_p != BIT(2)))) {
   17060:	d007      	beq.n	17072 <ll_adv_params_set+0x216>
   17062:	78a3      	ldrb	r3, [r4, #2]
   17064:	f013 0fc0 	tst.w	r3, #192	; 0xc0
   17068:	d103      	bne.n	17072 <ll_adv_params_set+0x216>
   1706a:	9b04      	ldr	r3, [sp, #16]
   1706c:	2b04      	cmp	r3, #4
   1706e:	f040 80b0 	bne.w	171d2 <ll_adv_params_set+0x376>
			h->adv_addr = 1;
   17072:	78e3      	ldrb	r3, [r4, #3]
   17074:	f043 0301 	orr.w	r3, r3, #1
   17078:	70e3      	strb	r3, [r4, #3]
			ptr += BDADDR_SIZE;
   1707a:	f104 030a 	add.w	r3, r4, #10
		if(evt_prop & BIT(2)){
   1707e:	b122      	cbz	r2, 1708a <ll_adv_params_set+0x22e>
			h->tgt_addr = 1;
   17080:	78e2      	ldrb	r2, [r4, #3]
   17082:	f042 0202 	orr.w	r2, r2, #2
   17086:	70e2      	strb	r2, [r4, #3]
			ptr += BDADDR_SIZE;
   17088:	3306      	adds	r3, #6
		if(evt_prop & BIT(6)){
   1708a:	f019 0f40 	tst.w	r9, #64	; 0x40
   1708e:	f000 80a2 	beq.w	171d6 <ll_adv_params_set+0x37a>
			h->adi = 1;
   17092:	78e2      	ldrb	r2, [r4, #3]
			adi_ptr = ptr;
   17094:	9301      	str	r3, [sp, #4]
			h->adi = 1;
   17096:	f042 0208 	orr.w	r2, r2, #8
   1709a:	70e2      	strb	r2, [r4, #3]
			aux_h->adi = h->adi;
   1709c:	f898 2003 	ldrb.w	r2, [r8, #3]
			aux_adi_ptr = aux_ptr;
   170a0:	9602      	str	r6, [sp, #8]
			aux_h->adi = h->adi;
   170a2:	f042 0208 	orr.w	r2, r2, #8
   170a6:	f888 2003 	strb.w	r2, [r8, #3]
			h->aux_ptr = 1;
   170aa:	78e2      	ldrb	r2, [r4, #3]
			h->tx_pwr = 1;
   170ac:	f042 0250 	orr.w	r2, r2, #80	; 0x50
   170b0:	70e2      	strb	r2, [r4, #3]
			aux_h->tx_pwr = h->tx_pwr;
   170b2:	f898 2003 	ldrb.w	r2, [r8, #3]
			ptr += sizeof(*adi_ptr);
   170b6:	1c9f      	adds	r7, r3, #2
			aux_h->tx_pwr = h->tx_pwr;
   170b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   170bc:	f888 2003 	strb.w	r2, [r8, #3]
			ptr += sizeof(*adi_ptr);
   170c0:	9700      	str	r7, [sp, #0]
			aux_ptr ++;
   170c2:	f108 0207 	add.w	r2, r8, #7
			ptr ++;
   170c6:	3306      	adds	r3, #6
		len = ptr - (u8_t *)p;
   170c8:	1a1b      	subs	r3, r3, r0
   170ca:	b2db      	uxtb	r3, r3
		if (len > (offsetof(struct pdu_adv_com_ext_adv,
   170cc:	2b02      	cmp	r3, #2
			p->ext_hdr_len = (len -
   170ce:	bf8c      	ite	hi
   170d0:	78a0      	ldrbhi	r0, [r4, #2]
			pdu->len = offsetof(struct pdu_adv_com_ext_adv,
   170d2:	2301      	movls	r3, #1
   170d4:	7063      	strb	r3, [r4, #1]
			p->ext_hdr_len = (len -
   170d6:	bf88      	it	hi
   170d8:	f103 37ff 	addhi.w	r7, r3, #4294967295	; 0xffffffff
		aux_len = aux_ptr - (u8_t *)aux_p;
   170dc:	eba2 0301 	sub.w	r3, r2, r1
			p->ext_hdr_len = (len -
   170e0:	bf88      	it	hi
   170e2:	f367 0005 	bfihi	r0, r7, #0, #6
		aux_len = aux_ptr - (u8_t *)aux_p;
   170e6:	b2db      	uxtb	r3, r3
			p->ext_hdr_len = (len -
   170e8:	bf88      	it	hi
   170ea:	70a0      	strbhi	r0, [r4, #2]
   170ec:	4a41      	ldr	r2, [pc, #260]	; (171f4 <ll_adv_params_set+0x398>)
		if (aux_len > (offsetof(struct pdu_adv_com_ext_adv,
   170ee:	2b02      	cmp	r3, #2
			aux_p->ext_hdr_len = (aux_len -
   170f0:	bf82      	ittt	hi
   170f2:	f898 1002 	ldrbhi.w	r1, [r8, #2]
			aux_pdu->len = aux_len;
   170f6:	f888 3001 	strbhi.w	r3, [r8, #1]
			aux_p->ext_hdr_len = (aux_len -
   170fa:	f103 30ff 	addhi.w	r0, r3, #4294967295	; 0xffffffff
			aux_ptr_len = aux_len;
   170fe:	7013      	strb	r3, [r2, #0]
		if(h->adv_addr){
   17100:	78e3      	ldrb	r3, [r4, #3]
			aux_p->ext_hdr_len = (aux_len -
   17102:	bf8b      	itete	hi
   17104:	f360 0105 	bfihi	r1, r0, #0, #6
			aux_pdu->len = offsetof(struct pdu_adv_com_ext_adv,
   17108:	2101      	movls	r1, #1
			aux_p->ext_hdr_len = (aux_len -
   1710a:	f888 1002 	strbhi.w	r1, [r8, #2]
			aux_pdu->len = offsetof(struct pdu_adv_com_ext_adv,
   1710e:	f888 1001 	strbls.w	r1, [r8, #1]
		if(h->adv_addr){
   17112:	07da      	lsls	r2, r3, #31
			ptr += BDADDR_SIZE;
   17114:	bf48      	it	mi
   17116:	f104 050a 	addmi.w	r5, r4, #10
		if(h->tgt_addr){
   1711a:	079f      	lsls	r7, r3, #30
   1711c:	d505      	bpl.n	1712a <ll_adv_params_set+0x2ce>
			memcpy(ptr, direct_addr, BDADDR_SIZE);
   1711e:	4628      	mov	r0, r5
   17120:	2206      	movs	r2, #6
   17122:	9915      	ldr	r1, [sp, #84]	; 0x54
   17124:	f7e9 fb35 	bl	792 <memcpy>
			ptr += BDADDR_SIZE;
   17128:	3506      	adds	r5, #6
		if(h->adi){
   1712a:	78e2      	ldrb	r2, [r4, #3]
   1712c:	0710      	lsls	r0, r2, #28
   1712e:	d517      	bpl.n	17160 <ll_adv_params_set+0x304>
			adi_ptr->did = 0x00;
   17130:	9b01      	ldr	r3, [sp, #4]
   17132:	2100      	movs	r1, #0
   17134:	7019      	strb	r1, [r3, #0]
   17136:	785b      	ldrb	r3, [r3, #1]
			adi_ptr->sid = 0x03;//sid & 0x0f;
   17138:	2003      	movs	r0, #3
   1713a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   1713e:	f360 1307 	bfi	r3, r0, #4, #4
   17142:	9801      	ldr	r0, [sp, #4]
   17144:	7043      	strb	r3, [r0, #1]
			aux_adi_ptr->did = adi_ptr->did;
   17146:	9b02      	ldr	r3, [sp, #8]
   17148:	7019      	strb	r1, [r3, #0]
   1714a:	785b      	ldrb	r3, [r3, #1]
			aux_adi_ptr->sid = 0x02;//adi_ptr->sid;
   1714c:	2102      	movs	r1, #2
   1714e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   17152:	f361 1307 	bfi	r3, r1, #4, #4
   17156:	9902      	ldr	r1, [sp, #8]
			ptr += sizeof(*adi_ptr);
   17158:	3502      	adds	r5, #2
			aux_adi_ptr->sid = 0x02;//adi_ptr->sid;
   1715a:	704b      	strb	r3, [r1, #1]
			aux_ptr += sizeof(*aux_adi_ptr);
   1715c:	f108 0606 	add.w	r6, r8, #6
		if(h->aux_ptr){
   17160:	06d1      	lsls	r1, r2, #27
   17162:	d50d      	bpl.n	17180 <ll_adv_params_set+0x324>
			ap->offs_units = 0;
   17164:	9900      	ldr	r1, [sp, #0]
   17166:	2303      	movs	r3, #3
   17168:	700b      	strb	r3, [r1, #0]
			ap->offs = 00;
   1716a:	9b00      	ldr	r3, [sp, #0]
   1716c:	2100      	movs	r1, #0
   1716e:	7059      	strb	r1, [r3, #1]
   17170:	789b      	ldrb	r3, [r3, #2]
			ap->phy = 0;
   17172:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
   17176:	f361 1347 	bfi	r3, r1, #5, #3
   1717a:	9900      	ldr	r1, [sp, #0]
			ptr += sizeof(*ap);
   1717c:	3503      	adds	r5, #3
			ap->phy = 0;
   1717e:	708b      	strb	r3, [r1, #2]
		if (h->tx_pwr) {
   17180:	0653      	lsls	r3, r2, #25
   17182:	d50a      	bpl.n	1719a <ll_adv_params_set+0x33e>
			if (tx_pwr) {
   17184:	9b18      	ldr	r3, [sp, #96]	; 0x60
   17186:	b343      	cbz	r3, 171da <ll_adv_params_set+0x37e>
				if (*tx_pwr != 0x7F) {
   17188:	781b      	ldrb	r3, [r3, #0]
   1718a:	2b7f      	cmp	r3, #127	; 0x7f
   1718c:	d102      	bne.n	17194 <ll_adv_params_set+0x338>
					*tx_pwr = _tx_pwr;
   1718e:	9a18      	ldr	r2, [sp, #96]	; 0x60
   17190:	2300      	movs	r3, #0
   17192:	7013      	strb	r3, [r2, #0]
			*ptr = _tx_pwr;
   17194:	702b      	strb	r3, [r5, #0]
			*aux_ptr = _tx_pwr;
   17196:	f806 3b01 	strb.w	r3, [r6], #1
		set_data_ptr = aux_ptr; 
   1719a:	4b17      	ldr	r3, [pc, #92]	; (171f8 <ll_adv_params_set+0x39c>)
   1719c:	601e      	str	r6, [r3, #0]
	}

	/* update the current scan data */
	radio_adv_data = radio_scan_data_get();
   1719e:	f7fe faf9 	bl	15794 <radio_scan_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   171a2:	f890 2203 	ldrb.w	r2, [r0, #515]	; 0x203
   171a6:	eb02 2202 	add.w	r2, r2, r2, lsl #8
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   171aa:	2404      	movs	r4, #4
   171ac:	5c83      	ldrb	r3, [r0, r2]
   171ae:	f364 0303 	bfi	r3, r4, #0, #4
	pdu->rfu = 0;
	pdu->chan_sel = 0;
	pdu->tx_addr = own_addr_type & 0x1;
   171b2:	f003 03cf 	and.w	r3, r3, #207	; 0xcf
   171b6:	f36b 1386 	bfi	r3, fp, #6, #1
	pdu->rx_addr = 0;
   171ba:	f36f 13c7 	bfc	r3, #7, #1
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   171be:	1881      	adds	r1, r0, r2
	pdu->rx_addr = 0;
   171c0:	5483      	strb	r3, [r0, r2]
	if (pdu->len == 0) {
   171c2:	784b      	ldrb	r3, [r1, #1]
   171c4:	b90b      	cbnz	r3, 171ca <ll_adv_params_set+0x36e>
		pdu->len = BDADDR_SIZE;
   171c6:	2306      	movs	r3, #6
   171c8:	704b      	strb	r3, [r1, #1]
	}

	return 0;
}
   171ca:	4650      	mov	r0, sl
   171cc:	b00b      	add	sp, #44	; 0x2c
   171ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ptr = (u8_t *)h + sizeof(*h);
   171d2:	462b      	mov	r3, r5
   171d4:	e753      	b.n	1707e <ll_adv_params_set+0x222>
		aux_ptr = (u8_t *)aux_h + sizeof(*aux_h);
   171d6:	4632      	mov	r2, r6
   171d8:	e776      	b.n	170c8 <ll_adv_params_set+0x26c>
			_tx_pwr = 0;
   171da:	9b18      	ldr	r3, [sp, #96]	; 0x60
   171dc:	e7da      	b.n	17194 <ll_adv_params_set+0x338>
	} else if (pdu->len == 0) {
   171de:	7863      	ldrb	r3, [r4, #1]
   171e0:	2b00      	cmp	r3, #0
   171e2:	d1dc      	bne.n	1719e <ll_adv_params_set+0x342>
		pdu->len = BDADDR_SIZE;
   171e4:	2306      	movs	r3, #6
   171e6:	e705      	b.n	16ff4 <ll_adv_params_set+0x198>
		return BT_HCI_ERR_CMD_DISALLOWED;
   171e8:	f04f 0a0c 	mov.w	sl, #12
   171ec:	e7ed      	b.n	171ca <ll_adv_params_set+0x36e>
				return 0x12; /* invalid HCI cmd param */
   171ee:	f04f 0a12 	mov.w	sl, #18
   171f2:	e7ea      	b.n	171ca <ll_adv_params_set+0x36e>
   171f4:	20001ec8 	.word	0x20001ec8
   171f8:	20001ed8 	.word	0x20001ed8

000171fc <ll_adv_data_set>:

void ll_adv_data_set(u8_t len, u8_t const *const data)
{
   171fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17200:	4688      	mov	r8, r1
   17202:	4606      	mov	r6, r0
	struct pdu_adv *pdu;
	u8_t last;


	/* Dont update data if directed or extended advertising. */
	radio_adv_data = radio_adv_data_get();
   17204:	f7fe fabe 	bl	15784 <radio_adv_data_get>
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   17208:	f890 5203 	ldrb.w	r5, [r0, #515]	; 0x203
   1720c:	eb05 2205 	add.w	r2, r5, r5, lsl #8
	radio_adv_data = radio_adv_data_get();
   17210:	4604      	mov	r4, r0
	if(prev->type == PDU_ADV_TYPE_EXT_IND){
   17212:	f810 e002 	ldrb.w	lr, [r0, r2]
   17216:	f00e 030f 	and.w	r3, lr, #15
   1721a:	2b07      	cmp	r3, #7
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   1721c:	eb00 0102 	add.w	r1, r0, r2
	if(prev->type == PDU_ADV_TYPE_EXT_IND){
   17220:	d115      	bne.n	1724e <ll_adv_data_set+0x52>
	
		struct radio_adv_data *radio_aux_adv_data;
		struct pdu_adv *aux_pdu;
		u8_t last;

		radio_aux_adv_data = radio_aux_adv_data_get();
   17222:	f7fe fab3 	bl	1578c <radio_aux_adv_data_get>
		aux_pdu =  (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0]; 			//cofused about data[radio_aux_adv_data->last][0] name
   17226:	f890 5203 	ldrb.w	r5, [r0, #515]	; 0x203

		memcpy(set_data_ptr, data, len);
   1722a:	4b28      	ldr	r3, [pc, #160]	; (172cc <ll_adv_data_set+0xd0>)
		aux_pdu =  (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0]; 			//cofused about data[radio_aux_adv_data->last][0] name
   1722c:	eb05 2505 	add.w	r5, r5, r5, lsl #8
   17230:	4405      	add	r5, r0
		memcpy(set_data_ptr, data, len);
   17232:	4632      	mov	r2, r6
   17234:	6818      	ldr	r0, [r3, #0]
   17236:	4641      	mov	r1, r8
   17238:	f7e9 faab 	bl	792 <memcpy>
		aux_pdu->len = aux_ptr_len + len;
   1723c:	4b24      	ldr	r3, [pc, #144]	; (172d0 <ll_adv_data_set+0xd4>)
   1723e:	781b      	ldrb	r3, [r3, #0]
   17240:	441e      	add	r6, r3
		radio_adv_data->last = last;
   17242:	2300      	movs	r3, #0
		aux_pdu->len = aux_ptr_len + len;
   17244:	706e      	strb	r6, [r5, #1]
		radio_adv_data->last = last;
   17246:	f884 3203 	strb.w	r3, [r4, #515]	; 0x203
   1724a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}else{
		if ((prev->type == PDU_ADV_TYPE_DIRECT_IND)) {
   1724e:	2b01      	cmp	r3, #1
   17250:	d039      	beq.n	172c6 <ll_adv_data_set+0xca>
		
		return;
		}

		/* use the last index in double buffer, */
		if (radio_adv_data->first == radio_adv_data->last) {
   17252:	f890 3202 	ldrb.w	r3, [r0, #514]	; 0x202
   17256:	42ab      	cmp	r3, r5
   17258:	d104      	bne.n	17264 <ll_adv_data_set+0x68>
			last = radio_adv_data->last + 1;
   1725a:	3501      	adds	r5, #1
   1725c:	b2ed      	uxtb	r5, r5
			if (last == DOUBLE_BUFFER_SIZE) {
				last = 0;
   1725e:	2d02      	cmp	r5, #2
   17260:	bf08      	it	eq
   17262:	2500      	moveq	r5, #0
		} else {
			last = radio_adv_data->last;
		}

		/* update adv pdu fields. */
		pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
   17264:	eb05 2305 	add.w	r3, r5, r5, lsl #8
   17268:	18e7      	adds	r7, r4, r3
		pdu->type = prev->type;
   1726a:	5ce0      	ldrb	r0, [r4, r3]
   1726c:	f36e 0003 	bfi	r0, lr, #0, #4
		pdu->rfu = 0;
   17270:	f36f 1004 	bfc	r0, #4, #1
   17274:	54e0      	strb	r0, [r4, r3]

		if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2)) {
			pdu->chan_sel = prev->chan_sel;
   17276:	5ca0      	ldrb	r0, [r4, r2]
   17278:	f814 e003 	ldrb.w	lr, [r4, r3]
   1727c:	f3c0 1040 	ubfx	r0, r0, #5, #1
   17280:	f360 1e45 	bfi	lr, r0, #5, #1
   17284:	f804 e003 	strb.w	lr, [r4, r3]
		} else {
			pdu->chan_sel = 0;
		}

		pdu->tx_addr = prev->tx_addr;
   17288:	5ca0      	ldrb	r0, [r4, r2]
   1728a:	fa5f fe8e 	uxtb.w	lr, lr
   1728e:	f3c0 1080 	ubfx	r0, r0, #6, #1
   17292:	f360 1e86 	bfi	lr, r0, #6, #1
   17296:	f804 e003 	strb.w	lr, [r4, r3]
		pdu->rx_addr = prev->rx_addr;
   1729a:	5ca2      	ldrb	r2, [r4, r2]
   1729c:	fa5f f08e 	uxtb.w	r0, lr
   172a0:	09d2      	lsrs	r2, r2, #7
   172a2:	f362 10c7 	bfi	r0, r2, #7, #1
   172a6:	54e0      	strb	r0, [r4, r3]
		
		
		memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
   172a8:	2206      	movs	r2, #6
   172aa:	3102      	adds	r1, #2
   172ac:	1cb8      	adds	r0, r7, #2
   172ae:	f7e9 fa70 	bl	792 <memcpy>
		memcpy(&pdu->adv_ind.data[0], data, len);
   172b2:	4632      	mov	r2, r6
   172b4:	4641      	mov	r1, r8
   172b6:	f107 0008 	add.w	r0, r7, #8
		pdu->len = BDADDR_SIZE + len;
   172ba:	3606      	adds	r6, #6
		memcpy(&pdu->adv_ind.data[0], data, len);
   172bc:	f7e9 fa69 	bl	792 <memcpy>
		pdu->len = BDADDR_SIZE + len;
   172c0:	707e      	strb	r6, [r7, #1]
		
		/* commit the update so controller picks it. */
		radio_adv_data->last = last;
   172c2:	f884 5203 	strb.w	r5, [r4, #515]	; 0x203
   172c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   172ca:	bf00      	nop
   172cc:	20001ed8 	.word	0x20001ed8
   172d0:	20001ec8 	.word	0x20001ec8

000172d4 <ll_scan_data_set>:
	
//#endif	/* CONFIG_BT_CTLR_ADV_EXT */
}

void ll_scan_data_set(u8_t len, u8_t const *const data)
{
   172d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   172d8:	4606      	mov	r6, r0
   172da:	460f      	mov	r7, r1
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* use the last index in double buffer, */
	radio_scan_data = radio_scan_data_get();
   172dc:	f7fe fa5a 	bl	15794 <radio_scan_data_get>
	if (radio_scan_data->first == radio_scan_data->last) {
   172e0:	f890 3203 	ldrb.w	r3, [r0, #515]	; 0x203
   172e4:	f890 2202 	ldrb.w	r2, [r0, #514]	; 0x202
   172e8:	429a      	cmp	r2, r3
	radio_scan_data = radio_scan_data_get();
   172ea:	4604      	mov	r4, r0
	if (radio_scan_data->first == radio_scan_data->last) {
   172ec:	d131      	bne.n	17352 <ll_scan_data_set+0x7e>
		last = radio_scan_data->last + 1;
   172ee:	1c5d      	adds	r5, r3, #1
   172f0:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
   172f2:	2d02      	cmp	r5, #2
			last = 0;
   172f4:	bf08      	it	eq
   172f6:	2500      	moveq	r5, #0
	}

	/* update scan pdu fields. */
	prev = (struct pdu_adv *)
	       &radio_scan_data->data[radio_scan_data->last][0];
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
   172f8:	eb05 2205 	add.w	r2, r5, r5, lsl #8
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   172fc:	f04f 0e04 	mov.w	lr, #4
   17300:	5ca0      	ldrb	r0, [r4, r2]
   17302:	f36e 0003 	bfi	r0, lr, #0, #4
	pdu->rfu = 0;
	pdu->chan_sel = 0;
   17306:	f000 00ef 	and.w	r0, r0, #239	; 0xef
   1730a:	f36f 1045 	bfc	r0, #5, #1
   1730e:	54a0      	strb	r0, [r4, r2]
	prev = (struct pdu_adv *)
   17310:	eb03 2303 	add.w	r3, r3, r3, lsl #8
   17314:	18e1      	adds	r1, r4, r3
	pdu->tx_addr = prev->tx_addr;
   17316:	5ce0      	ldrb	r0, [r4, r3]
   17318:	5ca3      	ldrb	r3, [r4, r2]
   1731a:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1731e:	f360 1386 	bfi	r3, r0, #6, #1
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
   17322:	eb04 0802 	add.w	r8, r4, r2
	pdu->rx_addr = 0;
   17326:	f36f 13c7 	bfc	r3, #7, #1
   1732a:	54a3      	strb	r3, [r4, r2]
	pdu->len = BDADDR_SIZE + len;
   1732c:	1db3      	adds	r3, r6, #6
   1732e:	f888 3001 	strb.w	r3, [r8, #1]
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
   17332:	2206      	movs	r2, #6
   17334:	3102      	adds	r1, #2
   17336:	f108 0002 	add.w	r0, r8, #2
   1733a:	f7e9 fa2a 	bl	792 <memcpy>
	memcpy(&pdu->scan_rsp.data[0], data, len);
   1733e:	4632      	mov	r2, r6
   17340:	4639      	mov	r1, r7
   17342:	f108 0008 	add.w	r0, r8, #8
   17346:	f7e9 fa24 	bl	792 <memcpy>

	/* commit the update so controller picks it. */
	radio_scan_data->last = last;
   1734a:	f884 5203 	strb.w	r5, [r4, #515]	; 0x203
   1734e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17352:	461d      	mov	r5, r3
   17354:	e7d0      	b.n	172f8 <ll_scan_data_set+0x24>
	...

00017358 <ll_adv_enable>:
}

u32_t ll_adv_enable(u8_t enable)
{
   17358:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	struct pdu_adv *pdu_scan;
	struct pdu_adv *pdu_adv;
	//struct pdu_adv *aux_pdu_adv;
	u32_t status;

	if (!enable) {
   1735c:	b920      	cbnz	r0, 17368 <ll_adv_enable+0x10>
	status = radio_adv_enable(ll_adv.interval, ll_adv.chan_map,
				  ll_adv.filter_policy, rl_idx);
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	return status;
}
   1735e:	b002      	add	sp, #8
   17360:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return radio_adv_disable();
   17364:	f7ff ba8c 	b.w	16880 <radio_adv_disable>
	} else if (ll_adv_is_enabled()) {
   17368:	f7fe fa18 	bl	1579c <ll_adv_is_enabled>
   1736c:	4681      	mov	r9, r0
   1736e:	2800      	cmp	r0, #0
   17370:	d153      	bne.n	1741a <ll_adv_enable+0xc2>
	radio_adv_data = radio_adv_data_get();
   17372:	f7fe fa07 	bl	15784 <radio_adv_data_get>
   17376:	4607      	mov	r7, r0
	radio_scan_data = radio_scan_data_get();
   17378:	f7fe fa0c 	bl	15794 <radio_scan_data_get>
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
   1737c:	f897 4203 	ldrb.w	r4, [r7, #515]	; 0x203
   17380:	4d32      	ldr	r5, [pc, #200]	; (1744c <ll_adv_enable+0xf4>)
   17382:	eb04 2404 	add.w	r4, r4, r4, lsl #8
   17386:	eb07 0804 	add.w	r8, r7, r4
	} else if (pdu_adv->type == PDU_ADV_TYPE_EXT_IND) {
   1738a:	5d3b      	ldrb	r3, [r7, r4]
   1738c:	f003 020f 	and.w	r2, r3, #15
   17390:	2a07      	cmp	r2, #7
   17392:	d110      	bne.n	173b6 <ll_adv_enable+0x5e>
		if (h->adv_addr) {
   17394:	f898 2003 	ldrb.w	r2, [r8, #3]
   17398:	07d2      	lsls	r2, r2, #31
   1739a:	d50a      	bpl.n	173b2 <ll_adv_enable+0x5a>
			memcpy(ptr, ll_addr_get(pdu_adv->tx_addr, NULL),
   1739c:	4649      	mov	r1, r9
   1739e:	f3c3 1080 	ubfx	r0, r3, #6, #1
   173a2:	f7f5 fa1d 	bl	c7e0 <ll_addr_get>
   173a6:	2206      	movs	r2, #6
   173a8:	4601      	mov	r1, r0
   173aa:	f108 0004 	add.w	r0, r8, #4
			memcpy(&pdu_scan->scan_rsp.addr[0],
   173ae:	f7e9 f9f0 	bl	792 <memcpy>
	u8_t   rl_idx = FILTER_IDX_NONE;
   173b2:	24ff      	movs	r4, #255	; 0xff
   173b4:	e020      	b.n	173f8 <ll_adv_enable+0xa0>
	pdu_scan = (struct pdu_adv *)&radio_scan_data->data
   173b6:	f890 3203 	ldrb.w	r3, [r0, #515]	; 0x203
   173ba:	eb03 2303 	add.w	r3, r3, r3, lsl #8
   173be:	18c6      	adds	r6, r0, r3
		ll_filters_adv_update(ll_adv.filter_policy);
   173c0:	7828      	ldrb	r0, [r5, #0]
   173c2:	f3c0 00c1 	ubfx	r0, r0, #3, #2
   173c6:	f000 fae3 	bl	17990 <ll_filters_adv_update>
		if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   173ca:	7828      	ldrb	r0, [r5, #0]
   173cc:	f010 0a40 	ands.w	sl, r0, #64	; 0x40
   173d0:	d025      	beq.n	1741e <ll_adv_enable+0xc6>
			rl_idx = ll_rl_find(ll_adv.id_addr_type,
   173d2:	464a      	mov	r2, r9
   173d4:	1ca9      	adds	r1, r5, #2
   173d6:	09c0      	lsrs	r0, r0, #7
   173d8:	f000 fb06 	bl	179e8 <ll_rl_find>
			if (rl_idx != FILTER_IDX_NONE) {
   173dc:	28ff      	cmp	r0, #255	; 0xff
			rl_idx = ll_rl_find(ll_adv.id_addr_type,
   173de:	4604      	mov	r4, r0
			if (rl_idx != FILTER_IDX_NONE) {
   173e0:	d002      	beq.n	173e8 <ll_adv_enable+0x90>
				ll_rl_rpa_update(false);
   173e2:	4648      	mov	r0, r9
   173e4:	f000 fcce 	bl	17d84 <ll_rl_rpa_update>
			ll_rl_pdu_adv_update(rl_idx, pdu_adv);
   173e8:	4641      	mov	r1, r8
   173ea:	4620      	mov	r0, r4
   173ec:	f000 fc5e 	bl	17cac <ll_rl_pdu_adv_update>
			ll_rl_pdu_adv_update(rl_idx, pdu_scan);
   173f0:	4631      	mov	r1, r6
   173f2:	4620      	mov	r0, r4
   173f4:	f000 fc5a 	bl	17cac <ll_rl_pdu_adv_update>
				  ll_adv.chan_map, ll_adv.filter_policy,
   173f8:	782a      	ldrb	r2, [r5, #0]
	status = radio_adv_enable(ll_adv.phy_p, ll_adv.interval,
   173fa:	7a28      	ldrb	r0, [r5, #8]
   173fc:	7b2b      	ldrb	r3, [r5, #12]
   173fe:	9301      	str	r3, [sp, #4]
   17400:	8969      	ldrh	r1, [r5, #10]
   17402:	9400      	str	r4, [sp, #0]
   17404:	f3c2 03c1 	ubfx	r3, r2, #3, #2
   17408:	f000 0007 	and.w	r0, r0, #7
   1740c:	f002 0207 	and.w	r2, r2, #7
   17410:	f7fe ffa6 	bl	16360 <radio_adv_enable>
}
   17414:	b002      	add	sp, #8
   17416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return 0;
   1741a:	2000      	movs	r0, #0
   1741c:	e7fa      	b.n	17414 <ll_adv_enable+0xbc>
			       ll_addr_get(pdu_adv->tx_addr, NULL),
   1741e:	5d38      	ldrb	r0, [r7, r4]
   17420:	4651      	mov	r1, sl
   17422:	f3c0 1080 	ubfx	r0, r0, #6, #1
   17426:	f7f5 f9db 	bl	c7e0 <ll_addr_get>
			memcpy(&pdu_adv->adv_ind.addr[0],
   1742a:	2206      	movs	r2, #6
   1742c:	4601      	mov	r1, r0
   1742e:	f108 0002 	add.w	r0, r8, #2
   17432:	f7e9 f9ae 	bl	792 <memcpy>
			       ll_addr_get(pdu_adv->tx_addr, NULL),
   17436:	5d38      	ldrb	r0, [r7, r4]
   17438:	4651      	mov	r1, sl
   1743a:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1743e:	f7f5 f9cf 	bl	c7e0 <ll_addr_get>
			memcpy(&pdu_scan->scan_rsp.addr[0],
   17442:	2206      	movs	r2, #6
   17444:	4601      	mov	r1, r0
   17446:	1cb0      	adds	r0, r6, #2
   17448:	e7b1      	b.n	173ae <ll_adv_enable+0x56>
   1744a:	bf00      	nop
   1744c:	20001eca 	.word	0x20001eca

00017450 <ll_scan_params_set>:
	u8_t  filter_policy:2;
} ll_scan;

u32_t ll_scan_params_set(u8_t type, u16_t interval, u16_t window,
			 u8_t own_addr_type, u8_t filter_policy)
{
   17450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   17454:	4606      	mov	r6, r0
   17456:	4689      	mov	r9, r1
   17458:	4690      	mov	r8, r2
   1745a:	461f      	mov	r7, r3
	if (ll_scan_is_enabled()) {
   1745c:	f7fe f9b4 	bl	157c8 <ll_scan_is_enabled>
   17460:	b9a0      	cbnz	r0, 1748c <ll_scan_params_set+0x3c>
	 * 1001b - Ext. Coded active
	 */


	/* for ext adv 0010 type */
	ll_scan.type = type | 0x02;  			//for time being just to test
   17462:	4d0c      	ldr	r5, [pc, #48]	; (17494 <ll_scan_params_set+0x44>)
   17464:	792c      	ldrb	r4, [r5, #4]
	ll_scan.interval = interval;
   17466:	f8a5 9000 	strh.w	r9, [r5]
	ll_scan.type = type | 0x02;  			//for time being just to test
   1746a:	f046 0602 	orr.w	r6, r6, #2
   1746e:	f366 0403 	bfi	r4, r6, #0, #4
	ll_scan.window = window;
	ll_scan.own_addr_type = own_addr_type;
   17472:	4622      	mov	r2, r4
   17474:	f367 1205 	bfi	r2, r7, #4, #2
	ll_scan.filter_policy = filter_policy;
   17478:	4613      	mov	r3, r2
   1747a:	f89d 2020 	ldrb.w	r2, [sp, #32]
	ll_scan.window = window;
   1747e:	f8a5 8002 	strh.w	r8, [r5, #2]
	ll_scan.filter_policy = filter_policy;
   17482:	f362 1387 	bfi	r3, r2, #6, #2
   17486:	712b      	strb	r3, [r5, #4]

	return 0;
   17488:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1748c:	200c      	movs	r0, #12
}
   1748e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   17492:	bf00      	nop
   17494:	20001edc 	.word	0x20001edc

00017498 <ll_scan_enable>:

u32_t ll_scan_enable(u8_t enable)
{
   17498:	b5f0      	push	{r4, r5, r6, r7, lr}
   1749a:	b085      	sub	sp, #20
	u32_t status;
	u8_t  rpa_gen = 0;

	if (!enable) {
   1749c:	b920      	cbnz	r0, 174a8 <ll_scan_enable+0x10>
				   ll_scan.interval, ll_scan.window,
				   ll_scan.filter_policy, rpa_gen,
				   FILTER_IDX_NONE);

	return status;
}
   1749e:	b005      	add	sp, #20
   174a0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return radio_scan_disable();
   174a4:	f7ff bb1a 	b.w	16adc <radio_scan_disable>
	} else if (ll_scan_is_enabled()) {
   174a8:	f7fe f98e 	bl	157c8 <ll_scan_is_enabled>
   174ac:	4606      	mov	r6, r0
   174ae:	bb40      	cbnz	r0, 17502 <ll_scan_enable+0x6a>
	ll_filters_scan_update(ll_scan.filter_policy);
   174b0:	4c15      	ldr	r4, [pc, #84]	; (17508 <ll_scan_enable+0x70>)
   174b2:	7920      	ldrb	r0, [r4, #4]
   174b4:	0980      	lsrs	r0, r0, #6
   174b6:	f000 fa81 	bl	179bc <ll_filters_scan_update>
	if ((ll_scan.type & 0x1) &&
   174ba:	7923      	ldrb	r3, [r4, #4]
   174bc:	f013 0501 	ands.w	r5, r3, #1
   174c0:	d006      	beq.n	174d0 <ll_scan_enable+0x38>
   174c2:	f013 0520 	ands.w	r5, r3, #32
   174c6:	d003      	beq.n	174d0 <ll_scan_enable+0x38>
		ll_rl_rpa_update(false);
   174c8:	4630      	mov	r0, r6
   174ca:	f000 fc5b 	bl	17d84 <ll_rl_rpa_update>
		rpa_gen = 1;
   174ce:	2501      	movs	r5, #1
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
   174d0:	7926      	ldrb	r6, [r4, #4]
   174d2:	f006 070f 	and.w	r7, r6, #15
   174d6:	f3c6 1600 	ubfx	r6, r6, #4, #1
   174da:	2100      	movs	r1, #0
   174dc:	4630      	mov	r0, r6
   174de:	f7f5 f97f 	bl	c7e0 <ll_addr_get>
   174e2:	22ff      	movs	r2, #255	; 0xff
   174e4:	9203      	str	r2, [sp, #12]
				   ll_scan.filter_policy, rpa_gen,
   174e6:	7922      	ldrb	r2, [r4, #4]
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
   174e8:	8823      	ldrh	r3, [r4, #0]
   174ea:	9502      	str	r5, [sp, #8]
   174ec:	0992      	lsrs	r2, r2, #6
   174ee:	9201      	str	r2, [sp, #4]
   174f0:	8862      	ldrh	r2, [r4, #2]
   174f2:	9200      	str	r2, [sp, #0]
   174f4:	4631      	mov	r1, r6
   174f6:	4602      	mov	r2, r0
   174f8:	4638      	mov	r0, r7
   174fa:	f7ff f9f1 	bl	168e0 <radio_scan_enable>
}
   174fe:	b005      	add	sp, #20
   17500:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return 0;
   17502:	2000      	movs	r0, #0
   17504:	e7fb      	b.n	174fe <ll_scan_enable+0x66>
   17506:	bf00      	nop
   17508:	20001edc 	.word	0x20001edc

0001750c <ll_create_connection>:
u32_t ll_create_connection(u16_t scan_interval, u16_t scan_window,
			   u8_t filter_policy, u8_t peer_addr_type,
			   u8_t *peer_addr, u8_t own_addr_type,
			   u16_t interval, u16_t latency,
			   u16_t timeout)
{
   1750c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17510:	b085      	sub	sp, #20
   17512:	461e      	mov	r6, r3
   17514:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   17518:	9303      	str	r3, [sp, #12]
   1751a:	4680      	mov	r8, r0
   1751c:	4689      	mov	r9, r1
   1751e:	4615      	mov	r5, r2
   17520:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   17522:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
   17526:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
   1752a:	f8bd b044 	ldrh.w	fp, [sp, #68]	; 0x44
	u32_t status;
	u8_t  rpa_gen = 0;
	u8_t  rl_idx = FILTER_IDX_NONE;

	if (ll_scan_is_enabled()) {
   1752e:	f7fe f94b 	bl	157c8 <ll_scan_is_enabled>
   17532:	9b03      	ldr	r3, [sp, #12]
   17534:	bba0      	cbnz	r0, 175a0 <ll_create_connection+0x94>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	status = radio_connect_enable(peer_addr_type, peer_addr, interval,
   17536:	9300      	str	r3, [sp, #0]
   17538:	4652      	mov	r2, sl
   1753a:	465b      	mov	r3, fp
   1753c:	4639      	mov	r1, r7
   1753e:	4630      	mov	r0, r6
   17540:	f7fe f966 	bl	15810 <radio_connect_enable>
				      latency, timeout);

	if (status) {
   17544:	bb68      	cbnz	r0, 175a2 <ll_create_connection+0x96>
		return status;
	}

#if defined(CONFIG_BT_CTLR_PRIVACY)
	ll_filters_scan_update(filter_policy);
   17546:	4628      	mov	r0, r5
   17548:	f000 fa38 	bl	179bc <ll_filters_scan_update>

	if (!filter_policy && ctrl_rl_enabled()) {
   1754c:	b1dd      	cbz	r5, 17586 <ll_create_connection+0x7a>
	u8_t  rl_idx = FILTER_IDX_NONE;
   1754e:	27ff      	movs	r7, #255	; 0xff
		/* Look up the resolving list */
		rl_idx = ll_rl_find(peer_addr_type, peer_addr, NULL);
	}

	if (own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   17550:	1ea3      	subs	r3, r4, #2
   17552:	2b01      	cmp	r3, #1
   17554:	d822      	bhi.n	1759c <ll_create_connection+0x90>
	    own_addr_type == BT_ADDR_LE_RANDOM_ID) {

		/* Generate RPAs if required */
		ll_rl_rpa_update(false);
   17556:	2000      	movs	r0, #0
   17558:	f000 fc14 	bl	17d84 <ll_rl_rpa_update>
		own_addr_type &= 0x1;
   1755c:	f004 0401 	and.w	r4, r4, #1
		rpa_gen = 1;
   17560:	2601      	movs	r6, #1
	}
#endif
	return radio_scan_enable(0, own_addr_type,
   17562:	2100      	movs	r1, #0
   17564:	4620      	mov	r0, r4
   17566:	f7f5 f93b 	bl	c7e0 <ll_addr_get>
   1756a:	4643      	mov	r3, r8
   1756c:	4602      	mov	r2, r0
   1756e:	4621      	mov	r1, r4
   17570:	2000      	movs	r0, #0
   17572:	9711      	str	r7, [sp, #68]	; 0x44
   17574:	9610      	str	r6, [sp, #64]	; 0x40
   17576:	950f      	str	r5, [sp, #60]	; 0x3c
   17578:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
				 ll_addr_get(own_addr_type, NULL),
				 scan_interval, scan_window,
				 filter_policy, rpa_gen, rl_idx);
}
   1757c:	b005      	add	sp, #20
   1757e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return radio_scan_enable(0, own_addr_type,
   17582:	f7ff b9ad 	b.w	168e0 <radio_scan_enable>
	if (!filter_policy && ctrl_rl_enabled()) {
   17586:	f000 fb89 	bl	17c9c <ctrl_rl_enabled>
   1758a:	2800      	cmp	r0, #0
   1758c:	d0df      	beq.n	1754e <ll_create_connection+0x42>
		rl_idx = ll_rl_find(peer_addr_type, peer_addr, NULL);
   1758e:	4639      	mov	r1, r7
   17590:	462a      	mov	r2, r5
   17592:	4630      	mov	r0, r6
   17594:	f000 fa28 	bl	179e8 <ll_rl_find>
   17598:	4607      	mov	r7, r0
   1759a:	e7d9      	b.n	17550 <ll_create_connection+0x44>
	u8_t  rpa_gen = 0;
   1759c:	2600      	movs	r6, #0
   1759e:	e7e0      	b.n	17562 <ll_create_connection+0x56>
		return BT_HCI_ERR_CMD_DISALLOWED;
   175a0:	200c      	movs	r0, #12
}
   175a2:	b005      	add	sp, #20
   175a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000175a8 <wl_find>:
		wl[i].taken = 0;
	}
}

static u8_t wl_find(u8_t addr_type, u8_t *addr, u8_t *free)
{
   175a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   175ac:	4688      	mov	r8, r1
	int i;

	if (free) {
   175ae:	4615      	mov	r5, r2
   175b0:	b10a      	cbz	r2, 175b6 <wl_find+0xe>
		*free = FILTER_IDX_NONE;
   175b2:	23ff      	movs	r3, #255	; 0xff
   175b4:	7013      	strb	r3, [r2, #0]
	}

	for (i = 0; i < WL_SIZE; i++) {
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   175b6:	4e14      	ldr	r6, [pc, #80]	; (17608 <wl_find+0x60>)
{
   175b8:	2400      	movs	r4, #0
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   175ba:	f000 0701 	and.w	r7, r0, #1
   175be:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   175c2:	07da      	lsls	r2, r3, #31
   175c4:	d51d      	bpl.n	17602 <wl_find+0x5a>
   175c6:	f3c3 0340 	ubfx	r3, r3, #1, #1
   175ca:	42bb      	cmp	r3, r7
   175cc:	d113      	bne.n	175f6 <wl_find+0x4e>
   175ce:	eb06 00c4 	add.w	r0, r6, r4, lsl #3
   175d2:	2206      	movs	r2, #6
   175d4:	4641      	mov	r1, r8
   175d6:	3002      	adds	r0, #2
   175d8:	f7e9 f8ae 	bl	738 <memcmp>
   175dc:	b910      	cbnz	r0, 175e4 <wl_find+0x3c>
			return i;
   175de:	b2e0      	uxtb	r0, r4
   175e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   175e4:	b13d      	cbz	r5, 175f6 <wl_find+0x4e>
   175e6:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   175ea:	07db      	lsls	r3, r3, #31
   175ec:	d403      	bmi.n	175f6 <wl_find+0x4e>
   175ee:	782b      	ldrb	r3, [r5, #0]
   175f0:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   175f2:	bf08      	it	eq
   175f4:	702c      	strbeq	r4, [r5, #0]
	for (i = 0; i < WL_SIZE; i++) {
   175f6:	3401      	adds	r4, #1
   175f8:	2c08      	cmp	r4, #8
   175fa:	d1e0      	bne.n	175be <wl_find+0x16>
		}
	}

	return FILTER_IDX_NONE;
   175fc:	20ff      	movs	r0, #255	; 0xff
   175fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   17602:	2d00      	cmp	r5, #0
   17604:	d1f3      	bne.n	175ee <wl_find+0x46>
   17606:	e7f6      	b.n	175f6 <wl_find+0x4e>
   17608:	2000210f 	.word	0x2000210f

0001760c <filter_rl_update>:
		}
	}
}

static void filter_rl_update(void)
{
   1760c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	filter->enable_bitmask = 0;
   17610:	4d12      	ldr	r5, [pc, #72]	; (1765c <filter_rl_update+0x50>)

	/* No whitelist: populate filter from rl peers */
	filter_clear(&rl_filter);

	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
		if (rl[i].taken) {
   17612:	4e13      	ldr	r6, [pc, #76]	; (17660 <filter_rl_update+0x54>)
	filter->enable_bitmask = 0;
   17614:	2400      	movs	r4, #0
   17616:	702c      	strb	r4, [r5, #0]
	filter->addr_type_bitmask = 0;
   17618:	706c      	strb	r4, [r5, #1]
		if (rl[i].taken) {
   1761a:	2728      	movs	r7, #40	; 0x28
	filter->enable_bitmask |= BIT(index);
   1761c:	f04f 0801 	mov.w	r8, #1
		if (rl[i].taken) {
   17620:	fb07 f104 	mul.w	r1, r7, r4
   17624:	5c73      	ldrb	r3, [r6, r1]
   17626:	07da      	lsls	r2, r3, #31
   17628:	d512      	bpl.n	17650 <filter_rl_update+0x44>
	filter->enable_bitmask |= BIT(index);
   1762a:	7828      	ldrb	r0, [r5, #0]
   1762c:	fa08 f204 	lsl.w	r2, r8, r4
   17630:	4302      	orrs	r2, r0
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   17632:	f3c3 1380 	ubfx	r3, r3, #6, #1
	filter->enable_bitmask |= BIT(index);
   17636:	702a      	strb	r2, [r5, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   17638:	786a      	ldrb	r2, [r5, #1]
   1763a:	40a3      	lsls	r3, r4
   1763c:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1763e:	2206      	movs	r2, #6
   17640:	3101      	adds	r1, #1
   17642:	fb02 5004 	mla	r0, r2, r4, r5
   17646:	4431      	add	r1, r6
   17648:	3002      	adds	r0, #2
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1764a:	706b      	strb	r3, [r5, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1764c:	f7e9 f8a1 	bl	792 <memcpy>
   17650:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   17652:	2c08      	cmp	r4, #8
   17654:	d1e4      	bne.n	17620 <filter_rl_update+0x14>
				      rl[i].id_addr.val);
		}
	}
}
   17656:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1765a:	bf00      	nop
   1765c:	200020dd 	.word	0x200020dd
   17660:	20001f9c 	.word	0x20001f9c

00017664 <rl_access_check.constprop.1>:
	}

	peer_irk_count = 0;
}

static int rl_access_check(bool check_ar)
   17664:	b508      	push	{r3, lr}
		if (!rl_enable) {
			return -1;
		}
	}

	return (ll_adv_is_enabled() || ll_scan_is_enabled()) ? 0 : 1;
   17666:	f7fe f899 	bl	1579c <ll_adv_is_enabled>
   1766a:	b928      	cbnz	r0, 17678 <rl_access_check.constprop.1+0x14>
   1766c:	f7fe f8ac 	bl	157c8 <ll_scan_is_enabled>
   17670:	fab0 f080 	clz	r0, r0
   17674:	0940      	lsrs	r0, r0, #5
   17676:	bd08      	pop	{r3, pc}
   17678:	2000      	movs	r0, #0
}
   1767a:	bd08      	pop	{r3, pc}

0001767c <filter_wl_update>:
{
   1767c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   17680:	4e1b      	ldr	r6, [pc, #108]	; (176f0 <filter_wl_update+0x74>)
	filter->enable_bitmask = 0;
   17682:	4d1c      	ldr	r5, [pc, #112]	; (176f4 <filter_wl_update+0x78>)
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   17684:	f8df 9074 	ldr.w	r9, [pc, #116]	; 176fc <filter_wl_update+0x80>
	filter->enable_bitmask = 0;
   17688:	2400      	movs	r4, #0
		if (!wl[i].taken) {
   1768a:	1eb7      	subs	r7, r6, #2
	filter->enable_bitmask = 0;
   1768c:	702c      	strb	r4, [r5, #0]
	filter->addr_type_bitmask = 0;
   1768e:	706c      	strb	r4, [r5, #1]
   17690:	46b8      	mov	r8, r7
		if (!wl[i].taken) {
   17692:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   17696:	07d9      	lsls	r1, r3, #31
   17698:	d523      	bpl.n	176e2 <filter_wl_update+0x66>
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   1769a:	f899 3000 	ldrb.w	r3, [r9]
   1769e:	b15b      	cbz	r3, 176b8 <filter_wl_update+0x3c>
		j = wl[i].rl_idx;
   176a0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   176a4:	2a07      	cmp	r2, #7
   176a6:	d807      	bhi.n	176b8 <filter_wl_update+0x3c>
   176a8:	2328      	movs	r3, #40	; 0x28
   176aa:	4353      	muls	r3, r2
   176ac:	4a12      	ldr	r2, [pc, #72]	; (176f8 <filter_wl_update+0x7c>)
   176ae:	5cd3      	ldrb	r3, [r2, r3]
   176b0:	075a      	lsls	r2, r3, #29
   176b2:	d501      	bpl.n	176b8 <filter_wl_update+0x3c>
   176b4:	06db      	lsls	r3, r3, #27
   176b6:	d514      	bpl.n	176e2 <filter_wl_update+0x66>
	filter->enable_bitmask |= BIT(index);
   176b8:	2201      	movs	r2, #1
   176ba:	fa02 f104 	lsl.w	r1, r2, r4
   176be:	782a      	ldrb	r2, [r5, #0]
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   176c0:	f818 3034 	ldrb.w	r3, [r8, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   176c4:	430a      	orrs	r2, r1
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   176c6:	f3c3 0340 	ubfx	r3, r3, #1, #1
	filter->enable_bitmask |= BIT(index);
   176ca:	702a      	strb	r2, [r5, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   176cc:	786a      	ldrb	r2, [r5, #1]
   176ce:	40a3      	lsls	r3, r4
   176d0:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   176d2:	2206      	movs	r2, #6
   176d4:	fb02 5004 	mla	r0, r2, r4, r5
   176d8:	4631      	mov	r1, r6
   176da:	3002      	adds	r0, #2
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   176dc:	706b      	strb	r3, [r5, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   176de:	f7e9 f858 	bl	792 <memcpy>
   176e2:	3401      	adds	r4, #1
	for (i = 0; i < WL_SIZE; i++) {
   176e4:	2c08      	cmp	r4, #8
   176e6:	f106 0608 	add.w	r6, r6, #8
   176ea:	d1d2      	bne.n	17692 <filter_wl_update+0x16>
}
   176ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   176f0:	20002111 	.word	0x20002111
   176f4:	2000214f 	.word	0x2000214f
   176f8:	20001f9c 	.word	0x20001f9c
   176fc:	200020dc 	.word	0x200020dc

00017700 <ctrl_lrpa_get>:
	if ((rl_idx >= ARRAY_SIZE(rl)) || !rl[rl_idx].lirk ||
   17700:	2807      	cmp	r0, #7
   17702:	d80c      	bhi.n	1771e <ctrl_lrpa_get+0x1e>
   17704:	2328      	movs	r3, #40	; 0x28
   17706:	4358      	muls	r0, r3
   17708:	4a06      	ldr	r2, [pc, #24]	; (17724 <ctrl_lrpa_get+0x24>)
   1770a:	5c13      	ldrb	r3, [r2, r0]
   1770c:	1811      	adds	r1, r2, r0
   1770e:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   17712:	b128      	cbz	r0, 17720 <ctrl_lrpa_get+0x20>
   17714:	f3c3 0040 	ubfx	r0, r3, #1, #1
   17718:	b110      	cbz	r0, 17720 <ctrl_lrpa_get+0x20>
	return rl[rl_idx].local_rpa;
   1771a:	6a48      	ldr	r0, [r1, #36]	; 0x24
   1771c:	4770      	bx	lr
		return NULL;
   1771e:	2000      	movs	r0, #0
}
   17720:	4770      	bx	lr
   17722:	bf00      	nop
   17724:	20001f9c 	.word	0x20001f9c

00017728 <ctrl_irks_get>:
	*count = peer_irk_count;
   17728:	4b02      	ldr	r3, [pc, #8]	; (17734 <ctrl_irks_get+0xc>)
   1772a:	781b      	ldrb	r3, [r3, #0]
   1772c:	7003      	strb	r3, [r0, #0]
}
   1772e:	4802      	ldr	r0, [pc, #8]	; (17738 <ctrl_irks_get+0x10>)
   17730:	4770      	bx	lr
   17732:	bf00      	nop
   17734:	20001f12 	.word	0x20001f12
   17738:	20001f1b 	.word	0x20001f1b

0001773c <ctrl_rl_idx>:
{
   1773c:	b507      	push	{r0, r1, r2, lr}
	if (whitelist) {
   1773e:	b320      	cbz	r0, 1778a <ctrl_rl_idx+0x4e>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(wl));
   17740:	2907      	cmp	r1, #7
   17742:	d90e      	bls.n	17762 <ctrl_rl_idx+0x26>
		LL_ASSERT(wl[devmatch_id].taken);
   17744:	4b1d      	ldr	r3, [pc, #116]	; (177bc <ctrl_rl_idx+0x80>)
   17746:	9301      	str	r3, [sp, #4]
   17748:	9300      	str	r3, [sp, #0]
   1774a:	4a1d      	ldr	r2, [pc, #116]	; (177c0 <ctrl_rl_idx+0x84>)
   1774c:	4b1d      	ldr	r3, [pc, #116]	; (177c4 <ctrl_rl_idx+0x88>)
   1774e:	491e      	ldr	r1, [pc, #120]	; (177c8 <ctrl_rl_idx+0x8c>)
   17750:	481e      	ldr	r0, [pc, #120]	; (177cc <ctrl_rl_idx+0x90>)
   17752:	f7ea fda5 	bl	22a0 <printk>
   17756:	4040      	eors	r0, r0
   17758:	f380 8811 	msr	BASEPRI, r0
   1775c:	f04f 0004 	mov.w	r0, #4
   17760:	df02      	svc	2
   17762:	4b1b      	ldr	r3, [pc, #108]	; (177d0 <ctrl_rl_idx+0x94>)
   17764:	f813 2031 	ldrb.w	r2, [r3, r1, lsl #3]
   17768:	07d2      	lsls	r2, r2, #31
   1776a:	d407      	bmi.n	1777c <ctrl_rl_idx+0x40>
   1776c:	4b13      	ldr	r3, [pc, #76]	; (177bc <ctrl_rl_idx+0x80>)
   1776e:	9301      	str	r3, [sp, #4]
   17770:	9300      	str	r3, [sp, #0]
   17772:	4a13      	ldr	r2, [pc, #76]	; (177c0 <ctrl_rl_idx+0x84>)
   17774:	4b13      	ldr	r3, [pc, #76]	; (177c4 <ctrl_rl_idx+0x88>)
   17776:	4914      	ldr	r1, [pc, #80]	; (177c8 <ctrl_rl_idx+0x8c>)
   17778:	4816      	ldr	r0, [pc, #88]	; (177d4 <ctrl_rl_idx+0x98>)
   1777a:	e7ea      	b.n	17752 <ctrl_rl_idx+0x16>
		i = wl[devmatch_id].rl_idx;
   1777c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   17780:	7849      	ldrb	r1, [r1, #1]
}
   17782:	4608      	mov	r0, r1
   17784:	b003      	add	sp, #12
   17786:	f85d fb04 	ldr.w	pc, [sp], #4
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   1778a:	2907      	cmp	r1, #7
   1778c:	d907      	bls.n	1779e <ctrl_rl_idx+0x62>
   1778e:	4b0b      	ldr	r3, [pc, #44]	; (177bc <ctrl_rl_idx+0x80>)
   17790:	9301      	str	r3, [sp, #4]
   17792:	9300      	str	r3, [sp, #0]
   17794:	4a0a      	ldr	r2, [pc, #40]	; (177c0 <ctrl_rl_idx+0x84>)
   17796:	4b0b      	ldr	r3, [pc, #44]	; (177c4 <ctrl_rl_idx+0x88>)
   17798:	490b      	ldr	r1, [pc, #44]	; (177c8 <ctrl_rl_idx+0x8c>)
   1779a:	480f      	ldr	r0, [pc, #60]	; (177d8 <ctrl_rl_idx+0x9c>)
   1779c:	e7d9      	b.n	17752 <ctrl_rl_idx+0x16>
		LL_ASSERT(rl[i].taken);
   1779e:	2328      	movs	r3, #40	; 0x28
   177a0:	434b      	muls	r3, r1
   177a2:	4a0e      	ldr	r2, [pc, #56]	; (177dc <ctrl_rl_idx+0xa0>)
   177a4:	5cd3      	ldrb	r3, [r2, r3]
   177a6:	07db      	lsls	r3, r3, #31
   177a8:	d4eb      	bmi.n	17782 <ctrl_rl_idx+0x46>
   177aa:	4b04      	ldr	r3, [pc, #16]	; (177bc <ctrl_rl_idx+0x80>)
   177ac:	9301      	str	r3, [sp, #4]
   177ae:	9300      	str	r3, [sp, #0]
   177b0:	4a03      	ldr	r2, [pc, #12]	; (177c0 <ctrl_rl_idx+0x84>)
   177b2:	4b04      	ldr	r3, [pc, #16]	; (177c4 <ctrl_rl_idx+0x88>)
   177b4:	4904      	ldr	r1, [pc, #16]	; (177c8 <ctrl_rl_idx+0x8c>)
   177b6:	480a      	ldr	r0, [pc, #40]	; (177e0 <ctrl_rl_idx+0xa4>)
   177b8:	e7cb      	b.n	17752 <ctrl_rl_idx+0x16>
   177ba:	bf00      	nop
   177bc:	00023dbe 	.word	0x00023dbe
   177c0:	00022d86 	.word	0x00022d86
   177c4:	00026cfb 	.word	0x00026cfb
   177c8:	000272e8 	.word	0x000272e8
   177cc:	00026dba 	.word	0x00026dba
   177d0:	2000210f 	.word	0x2000210f
   177d4:	00026e87 	.word	0x00026e87
   177d8:	00026ebe 	.word	0x00026ebe
   177dc:	20001f9c 	.word	0x20001f9c
   177e0:	00026f8b 	.word	0x00026f8b

000177e4 <ctrl_rl_irk_idx>:
{
   177e4:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   177e6:	4b18      	ldr	r3, [pc, #96]	; (17848 <ctrl_rl_irk_idx+0x64>)
   177e8:	781b      	ldrb	r3, [r3, #0]
   177ea:	4283      	cmp	r3, r0
   177ec:	d80e      	bhi.n	1780c <ctrl_rl_irk_idx+0x28>
   177ee:	4b17      	ldr	r3, [pc, #92]	; (1784c <ctrl_rl_irk_idx+0x68>)
   177f0:	9301      	str	r3, [sp, #4]
   177f2:	9300      	str	r3, [sp, #0]
   177f4:	4a16      	ldr	r2, [pc, #88]	; (17850 <ctrl_rl_irk_idx+0x6c>)
   177f6:	4b17      	ldr	r3, [pc, #92]	; (17854 <ctrl_rl_irk_idx+0x70>)
   177f8:	4917      	ldr	r1, [pc, #92]	; (17858 <ctrl_rl_irk_idx+0x74>)
   177fa:	4818      	ldr	r0, [pc, #96]	; (1785c <ctrl_rl_irk_idx+0x78>)
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   177fc:	f7ea fd50 	bl	22a0 <printk>
   17800:	4040      	eors	r0, r0
   17802:	f380 8811 	msr	BASEPRI, r0
   17806:	f04f 0004 	mov.w	r0, #4
   1780a:	df02      	svc	2
	i = peer_irk_rl_ids[irkmatch_id];
   1780c:	4b14      	ldr	r3, [pc, #80]	; (17860 <ctrl_rl_irk_idx+0x7c>)
   1780e:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   17810:	2807      	cmp	r0, #7
   17812:	d907      	bls.n	17824 <ctrl_rl_irk_idx+0x40>
   17814:	4b0d      	ldr	r3, [pc, #52]	; (1784c <ctrl_rl_irk_idx+0x68>)
   17816:	9301      	str	r3, [sp, #4]
   17818:	9300      	str	r3, [sp, #0]
   1781a:	4a0d      	ldr	r2, [pc, #52]	; (17850 <ctrl_rl_irk_idx+0x6c>)
   1781c:	4b0d      	ldr	r3, [pc, #52]	; (17854 <ctrl_rl_irk_idx+0x70>)
   1781e:	490e      	ldr	r1, [pc, #56]	; (17858 <ctrl_rl_irk_idx+0x74>)
   17820:	4810      	ldr	r0, [pc, #64]	; (17864 <ctrl_rl_irk_idx+0x80>)
   17822:	e7eb      	b.n	177fc <ctrl_rl_irk_idx+0x18>
	LL_ASSERT(rl[i].taken);
   17824:	2328      	movs	r3, #40	; 0x28
   17826:	4343      	muls	r3, r0
   17828:	4a0f      	ldr	r2, [pc, #60]	; (17868 <ctrl_rl_irk_idx+0x84>)
   1782a:	5cd3      	ldrb	r3, [r2, r3]
   1782c:	07db      	lsls	r3, r3, #31
   1782e:	d407      	bmi.n	17840 <ctrl_rl_irk_idx+0x5c>
   17830:	4b06      	ldr	r3, [pc, #24]	; (1784c <ctrl_rl_irk_idx+0x68>)
   17832:	9301      	str	r3, [sp, #4]
   17834:	9300      	str	r3, [sp, #0]
   17836:	4a06      	ldr	r2, [pc, #24]	; (17850 <ctrl_rl_irk_idx+0x6c>)
   17838:	4b06      	ldr	r3, [pc, #24]	; (17854 <ctrl_rl_irk_idx+0x70>)
   1783a:	4907      	ldr	r1, [pc, #28]	; (17858 <ctrl_rl_irk_idx+0x74>)
   1783c:	480b      	ldr	r0, [pc, #44]	; (1786c <ctrl_rl_irk_idx+0x88>)
   1783e:	e7dd      	b.n	177fc <ctrl_rl_irk_idx+0x18>
}
   17840:	b003      	add	sp, #12
   17842:	f85d fb04 	ldr.w	pc, [sp], #4
   17846:	bf00      	nop
   17848:	20001f12 	.word	0x20001f12
   1784c:	00023dbe 	.word	0x00023dbe
   17850:	00022d86 	.word	0x00022d86
   17854:	00026d07 	.word	0x00026d07
   17858:	000272e8 	.word	0x000272e8
   1785c:	00026fb8 	.word	0x00026fb8
   17860:	20001f13 	.word	0x20001f13
   17864:	00026ff6 	.word	0x00026ff6
   17868:	20001f9c 	.word	0x20001f9c
   1786c:	00026f8b 	.word	0x00026f8b

00017870 <ctrl_irk_whitelisted>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   17870:	2807      	cmp	r0, #7
{
   17872:	b507      	push	{r0, r1, r2, lr}
	if (rl_idx >= ARRAY_SIZE(rl)) {
   17874:	d819      	bhi.n	178aa <ctrl_irk_whitelisted+0x3a>
	LL_ASSERT(rl[rl_idx].taken);
   17876:	2328      	movs	r3, #40	; 0x28
   17878:	4358      	muls	r0, r3
   1787a:	4b0d      	ldr	r3, [pc, #52]	; (178b0 <ctrl_irk_whitelisted+0x40>)
   1787c:	5c18      	ldrb	r0, [r3, r0]
   1787e:	07c3      	lsls	r3, r0, #31
   17880:	d40e      	bmi.n	178a0 <ctrl_irk_whitelisted+0x30>
   17882:	4b0c      	ldr	r3, [pc, #48]	; (178b4 <ctrl_irk_whitelisted+0x44>)
   17884:	9301      	str	r3, [sp, #4]
   17886:	9300      	str	r3, [sp, #0]
   17888:	4a0b      	ldr	r2, [pc, #44]	; (178b8 <ctrl_irk_whitelisted+0x48>)
   1788a:	4b0c      	ldr	r3, [pc, #48]	; (178bc <ctrl_irk_whitelisted+0x4c>)
   1788c:	490c      	ldr	r1, [pc, #48]	; (178c0 <ctrl_irk_whitelisted+0x50>)
   1788e:	480d      	ldr	r0, [pc, #52]	; (178c4 <ctrl_irk_whitelisted+0x54>)
   17890:	f7ea fd06 	bl	22a0 <printk>
   17894:	4040      	eors	r0, r0
   17896:	f380 8811 	msr	BASEPRI, r0
   1789a:	f04f 0004 	mov.w	r0, #4
   1789e:	df02      	svc	2
	return rl[rl_idx].wl;
   178a0:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   178a4:	b003      	add	sp, #12
   178a6:	f85d fb04 	ldr.w	pc, [sp], #4
		return false;
   178aa:	2000      	movs	r0, #0
   178ac:	e7fa      	b.n	178a4 <ctrl_irk_whitelisted+0x34>
   178ae:	bf00      	nop
   178b0:	20001f9c 	.word	0x20001f9c
   178b4:	00023dbe 	.word	0x00023dbe
   178b8:	00022d86 	.word	0x00022d86
   178bc:	00026d17 	.word	0x00026d17
   178c0:	000272e8 	.word	0x000272e8
   178c4:	00026d88 	.word	0x00026d88

000178c8 <ctrl_filter_get>:
}
   178c8:	4b03      	ldr	r3, [pc, #12]	; (178d8 <ctrl_filter_get+0x10>)
   178ca:	4a04      	ldr	r2, [pc, #16]	; (178dc <ctrl_filter_get+0x14>)
   178cc:	2800      	cmp	r0, #0
   178ce:	bf14      	ite	ne
   178d0:	4610      	movne	r0, r2
   178d2:	4618      	moveq	r0, r3
   178d4:	4770      	bx	lr
   178d6:	bf00      	nop
   178d8:	200020dd 	.word	0x200020dd
   178dc:	2000214f 	.word	0x2000214f

000178e0 <ll_wl_size_get>:
   178e0:	2008      	movs	r0, #8
   178e2:	4770      	bx	lr

000178e4 <ll_wl_clear>:
{
   178e4:	b510      	push	{r4, lr}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   178e6:	f7fd ff61 	bl	157ac <radio_adv_filter_pol_get>
   178ea:	4604      	mov	r4, r0
   178ec:	b110      	cbz	r0, 178f4 <ll_wl_clear+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
   178ee:	240c      	movs	r4, #12
}
   178f0:	4620      	mov	r0, r4
   178f2:	bd10      	pop	{r4, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   178f4:	f7fd ff7e 	bl	157f4 <radio_scan_filter_pol_get>
   178f8:	07c3      	lsls	r3, r0, #31
   178fa:	d4f8      	bmi.n	178ee <ll_wl_clear+0xa>
		wl[i].taken = 0;
   178fc:	4a07      	ldr	r2, [pc, #28]	; (1791c <ll_wl_clear+0x38>)
   178fe:	4623      	mov	r3, r4
   17900:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   17904:	f36f 0100 	bfc	r1, #0, #1
   17908:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   1790c:	3301      	adds	r3, #1
   1790e:	2b08      	cmp	r3, #8
   17910:	d1f6      	bne.n	17900 <ll_wl_clear+0x1c>
	wl_anon = 0;
   17912:	4b03      	ldr	r3, [pc, #12]	; (17920 <ll_wl_clear+0x3c>)
   17914:	2200      	movs	r2, #0
   17916:	701a      	strb	r2, [r3, #0]
	return 0;
   17918:	e7ea      	b.n	178f0 <ll_wl_clear+0xc>
   1791a:	bf00      	nop
   1791c:	2000210f 	.word	0x2000210f
   17920:	20003300 	.word	0x20003300

00017924 <ll_wl_remove>:
{
   17924:	b538      	push	{r3, r4, r5, lr}
   17926:	4605      	mov	r5, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   17928:	f7fd ff40 	bl	157ac <radio_adv_filter_pol_get>
   1792c:	4604      	mov	r4, r0
   1792e:	b110      	cbz	r0, 17936 <ll_wl_remove+0x12>
		return BT_HCI_ERR_CMD_DISALLOWED;
   17930:	240c      	movs	r4, #12
}
   17932:	4620      	mov	r0, r4
   17934:	bd38      	pop	{r3, r4, r5, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   17936:	f7fd ff5d 	bl	157f4 <radio_scan_filter_pol_get>
   1793a:	07c3      	lsls	r3, r0, #31
   1793c:	d4f8      	bmi.n	17930 <ll_wl_remove+0xc>
	if (addr->type == ADDR_TYPE_ANON) {
   1793e:	7828      	ldrb	r0, [r5, #0]
   17940:	28ff      	cmp	r0, #255	; 0xff
   17942:	d102      	bne.n	1794a <ll_wl_remove+0x26>
		wl_anon = 0;
   17944:	4b0f      	ldr	r3, [pc, #60]	; (17984 <ll_wl_remove+0x60>)
   17946:	701c      	strb	r4, [r3, #0]
		return 0;
   17948:	e7f3      	b.n	17932 <ll_wl_remove+0xe>
	u8_t i = wl_find(id_addr->type, id_addr->a.val, NULL);
   1794a:	4622      	mov	r2, r4
   1794c:	1c69      	adds	r1, r5, #1
   1794e:	f7ff fe2b 	bl	175a8 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   17952:	2807      	cmp	r0, #7
   17954:	d813      	bhi.n	1797e <ll_wl_remove+0x5a>
		u8_t j = wl[i].rl_idx;
   17956:	4b0c      	ldr	r3, [pc, #48]	; (17988 <ll_wl_remove+0x64>)
   17958:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
   1795c:	7855      	ldrb	r5, [r2, #1]
		if (j < ARRAY_SIZE(rl)) {
   1795e:	2d07      	cmp	r5, #7
   17960:	d806      	bhi.n	17970 <ll_wl_remove+0x4c>
			rl[j].wl = 0;
   17962:	2228      	movs	r2, #40	; 0x28
   17964:	4909      	ldr	r1, [pc, #36]	; (1798c <ll_wl_remove+0x68>)
   17966:	436a      	muls	r2, r5
   17968:	5c8d      	ldrb	r5, [r1, r2]
   1796a:	f364 1545 	bfi	r5, r4, #5, #1
   1796e:	548d      	strb	r5, [r1, r2]
		wl[i].taken = 0;
   17970:	f813 2030 	ldrb.w	r2, [r3, r0, lsl #3]
   17974:	f36f 0200 	bfc	r2, #0, #1
   17978:	f803 2030 	strb.w	r2, [r3, r0, lsl #3]
   1797c:	e7d9      	b.n	17932 <ll_wl_remove+0xe>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1797e:	2402      	movs	r4, #2
   17980:	e7d7      	b.n	17932 <ll_wl_remove+0xe>
   17982:	bf00      	nop
   17984:	20003300 	.word	0x20003300
   17988:	2000210f 	.word	0x2000210f
   1798c:	20001f9c 	.word	0x20001f9c

00017990 <ll_filters_adv_update>:
{
   17990:	b508      	push	{r3, lr}
	if (adv_fp && !(radio_scan_filter_pol_get() & 0x1)) {
   17992:	b128      	cbz	r0, 179a0 <ll_filters_adv_update+0x10>
   17994:	f7fd ff2e 	bl	157f4 <radio_scan_filter_pol_get>
   17998:	07c3      	lsls	r3, r0, #31
   1799a:	d401      	bmi.n	179a0 <ll_filters_adv_update+0x10>
		filter_wl_update();
   1799c:	f7ff fe6e 	bl	1767c <filter_wl_update>
	if (rl_enable && !ll_scan_is_enabled()) {
   179a0:	4b05      	ldr	r3, [pc, #20]	; (179b8 <ll_filters_adv_update+0x28>)
   179a2:	781b      	ldrb	r3, [r3, #0]
   179a4:	b133      	cbz	r3, 179b4 <ll_filters_adv_update+0x24>
   179a6:	f7fd ff0f 	bl	157c8 <ll_scan_is_enabled>
   179aa:	b918      	cbnz	r0, 179b4 <ll_filters_adv_update+0x24>
}
   179ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		filter_rl_update();
   179b0:	f7ff be2c 	b.w	1760c <filter_rl_update>
   179b4:	bd08      	pop	{r3, pc}
   179b6:	bf00      	nop
   179b8:	200020dc 	.word	0x200020dc

000179bc <ll_filters_scan_update>:
{
   179bc:	b508      	push	{r3, lr}
	if ((scan_fp & 0x1) && !radio_adv_filter_pol_get()) {
   179be:	07c3      	lsls	r3, r0, #31
   179c0:	d504      	bpl.n	179cc <ll_filters_scan_update+0x10>
   179c2:	f7fd fef3 	bl	157ac <radio_adv_filter_pol_get>
   179c6:	b908      	cbnz	r0, 179cc <ll_filters_scan_update+0x10>
		filter_wl_update();
   179c8:	f7ff fe58 	bl	1767c <filter_wl_update>
	if (rl_enable && !ll_adv_is_enabled()) {
   179cc:	4b05      	ldr	r3, [pc, #20]	; (179e4 <ll_filters_scan_update+0x28>)
   179ce:	781b      	ldrb	r3, [r3, #0]
   179d0:	b133      	cbz	r3, 179e0 <ll_filters_scan_update+0x24>
   179d2:	f7fd fee3 	bl	1579c <ll_adv_is_enabled>
   179d6:	b918      	cbnz	r0, 179e0 <ll_filters_scan_update+0x24>
}
   179d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		filter_rl_update();
   179dc:	f7ff be16 	b.w	1760c <filter_rl_update>
   179e0:	bd08      	pop	{r3, pc}
   179e2:	bf00      	nop
   179e4:	200020dc 	.word	0x200020dc

000179e8 <ll_rl_find>:
{
   179e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   179ec:	468a      	mov	sl, r1
	if (free) {
   179ee:	4614      	mov	r4, r2
   179f0:	b10a      	cbz	r2, 179f6 <ll_rl_find+0xe>
		*free = FILTER_IDX_NONE;
   179f2:	23ff      	movs	r3, #255	; 0xff
   179f4:	7013      	strb	r3, [r2, #0]
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   179f6:	f8df 8054 	ldr.w	r8, [pc, #84]	; 17a4c <ll_rl_find+0x64>
{
   179fa:	2500      	movs	r5, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   179fc:	f000 0901 	and.w	r9, r0, #1
   17a00:	2628      	movs	r6, #40	; 0x28
   17a02:	436e      	muls	r6, r5
   17a04:	b2ef      	uxtb	r7, r5
   17a06:	f818 3006 	ldrb.w	r3, [r8, r6]
   17a0a:	07da      	lsls	r2, r3, #31
   17a0c:	d51a      	bpl.n	17a44 <ll_rl_find+0x5c>
   17a0e:	f3c3 1380 	ubfx	r3, r3, #6, #1
   17a12:	454b      	cmp	r3, r9
   17a14:	d10f      	bne.n	17a36 <ll_rl_find+0x4e>
   17a16:	1c70      	adds	r0, r6, #1
   17a18:	2206      	movs	r2, #6
   17a1a:	4651      	mov	r1, sl
   17a1c:	4440      	add	r0, r8
   17a1e:	f7e8 fe8b 	bl	738 <memcmp>
   17a22:	b160      	cbz	r0, 17a3e <ll_rl_find+0x56>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   17a24:	b13c      	cbz	r4, 17a36 <ll_rl_find+0x4e>
   17a26:	f818 3006 	ldrb.w	r3, [r8, r6]
   17a2a:	07db      	lsls	r3, r3, #31
   17a2c:	d403      	bmi.n	17a36 <ll_rl_find+0x4e>
   17a2e:	7823      	ldrb	r3, [r4, #0]
   17a30:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   17a32:	bf08      	it	eq
   17a34:	7027      	strbeq	r7, [r4, #0]
   17a36:	3501      	adds	r5, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   17a38:	2d08      	cmp	r5, #8
   17a3a:	d1e1      	bne.n	17a00 <ll_rl_find+0x18>
	return FILTER_IDX_NONE;
   17a3c:	27ff      	movs	r7, #255	; 0xff
}
   17a3e:	4638      	mov	r0, r7
   17a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   17a44:	2c00      	cmp	r4, #0
   17a46:	d1f2      	bne.n	17a2e <ll_rl_find+0x46>
   17a48:	e7f5      	b.n	17a36 <ll_rl_find+0x4e>
   17a4a:	bf00      	nop
   17a4c:	20001f9c 	.word	0x20001f9c

00017a50 <ll_wl_add>:
{
   17a50:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   17a54:	4607      	mov	r7, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   17a56:	f7fd fea9 	bl	157ac <radio_adv_filter_pol_get>
   17a5a:	4605      	mov	r5, r0
   17a5c:	b120      	cbz	r0, 17a68 <ll_wl_add+0x18>
		return BT_HCI_ERR_CMD_DISALLOWED;
   17a5e:	250c      	movs	r5, #12
}
   17a60:	4628      	mov	r0, r5
   17a62:	b002      	add	sp, #8
   17a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   17a68:	f7fd fec4 	bl	157f4 <radio_scan_filter_pol_get>
   17a6c:	07c3      	lsls	r3, r0, #31
   17a6e:	d4f6      	bmi.n	17a5e <ll_wl_add+0xe>
	if (addr->type == ADDR_TYPE_ANON) {
   17a70:	7838      	ldrb	r0, [r7, #0]
   17a72:	28ff      	cmp	r0, #255	; 0xff
   17a74:	d103      	bne.n	17a7e <ll_wl_add+0x2e>
		wl_anon = 1;
   17a76:	4b1f      	ldr	r3, [pc, #124]	; (17af4 <ll_wl_add+0xa4>)
   17a78:	2201      	movs	r2, #1
   17a7a:	701a      	strb	r2, [r3, #0]
		return 0;
   17a7c:	e7f0      	b.n	17a60 <ll_wl_add+0x10>
	i = wl_find(id_addr->type, id_addr->a.val, &j);
   17a7e:	f107 0801 	add.w	r8, r7, #1
   17a82:	f10d 0207 	add.w	r2, sp, #7
   17a86:	4641      	mov	r1, r8
   17a88:	f7ff fd8e 	bl	175a8 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   17a8c:	2807      	cmp	r0, #7
   17a8e:	d92d      	bls.n	17aec <ll_wl_add+0x9c>
	} else if (j >= ARRAY_SIZE(wl)) {
   17a90:	f89d 6007 	ldrb.w	r6, [sp, #7]
   17a94:	2e07      	cmp	r6, #7
   17a96:	d82b      	bhi.n	17af0 <ll_wl_add+0xa0>
	wl[i].id_addr_type = id_addr->type & 0x1;
   17a98:	4c17      	ldr	r4, [pc, #92]	; (17af8 <ll_wl_add+0xa8>)
   17a9a:	783a      	ldrb	r2, [r7, #0]
   17a9c:	f814 3036 	ldrb.w	r3, [r4, r6, lsl #3]
	bt_addr_copy(&wl[i].id_addr, &id_addr->a);
   17aa0:	eb04 00c6 	add.w	r0, r4, r6, lsl #3
	wl[i].id_addr_type = id_addr->type & 0x1;
   17aa4:	f362 0341 	bfi	r3, r2, #1, #1
	memcpy(dst, src, sizeof(*dst));
   17aa8:	4641      	mov	r1, r8
   17aaa:	2206      	movs	r2, #6
   17aac:	3002      	adds	r0, #2
   17aae:	f804 3036 	strb.w	r3, [r4, r6, lsl #3]
   17ab2:	f7e8 fe6e 	bl	792 <memcpy>
	j = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   17ab6:	462a      	mov	r2, r5
   17ab8:	4641      	mov	r1, r8
   17aba:	7838      	ldrb	r0, [r7, #0]
   17abc:	f7ff ff94 	bl	179e8 <ll_rl_find>
   17ac0:	00f3      	lsls	r3, r6, #3
	if (j < ARRAY_SIZE(rl)) {
   17ac2:	2807      	cmp	r0, #7
		wl[i].rl_idx = j;
   17ac4:	4423      	add	r3, r4
	if (j < ARRAY_SIZE(rl)) {
   17ac6:	d80e      	bhi.n	17ae6 <ll_wl_add+0x96>
		wl[i].rl_idx = j;
   17ac8:	7058      	strb	r0, [r3, #1]
		rl[j].wl = 1;
   17aca:	2328      	movs	r3, #40	; 0x28
   17acc:	4a0b      	ldr	r2, [pc, #44]	; (17afc <ll_wl_add+0xac>)
   17ace:	4358      	muls	r0, r3
   17ad0:	5c13      	ldrb	r3, [r2, r0]
   17ad2:	f043 0320 	orr.w	r3, r3, #32
   17ad6:	5413      	strb	r3, [r2, r0]
	wl[i].taken = 1;
   17ad8:	f814 3036 	ldrb.w	r3, [r4, r6, lsl #3]
   17adc:	f043 0301 	orr.w	r3, r3, #1
   17ae0:	f804 3036 	strb.w	r3, [r4, r6, lsl #3]
   17ae4:	e7bc      	b.n	17a60 <ll_wl_add+0x10>
		wl[i].rl_idx = FILTER_IDX_NONE;
   17ae6:	22ff      	movs	r2, #255	; 0xff
   17ae8:	705a      	strb	r2, [r3, #1]
   17aea:	e7f5      	b.n	17ad8 <ll_wl_add+0x88>
		return BT_HCI_ERR_INVALID_PARAM;
   17aec:	2512      	movs	r5, #18
   17aee:	e7b7      	b.n	17a60 <ll_wl_add+0x10>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   17af0:	2507      	movs	r5, #7
	return wl_add(addr);
   17af2:	e7b5      	b.n	17a60 <ll_wl_add+0x10>
   17af4:	20003300 	.word	0x20003300
   17af8:	2000210f 	.word	0x2000210f
   17afc:	20001f9c 	.word	0x20001f9c

00017b00 <ctrl_rl_idx_allowed>:
{
   17b00:	b507      	push	{r0, r1, r2, lr}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
   17b02:	4b12      	ldr	r3, [pc, #72]	; (17b4c <ctrl_rl_idx_allowed+0x4c>)
   17b04:	781b      	ldrb	r3, [r3, #0]
   17b06:	b1f3      	cbz	r3, 17b46 <ctrl_rl_idx_allowed+0x46>
   17b08:	2907      	cmp	r1, #7
   17b0a:	d81c      	bhi.n	17b46 <ctrl_rl_idx_allowed+0x46>
   17b0c:	b9d8      	cbnz	r0, 17b46 <ctrl_rl_idx_allowed+0x46>
	LL_ASSERT(rl[rl_idx].taken);
   17b0e:	2328      	movs	r3, #40	; 0x28
   17b10:	4359      	muls	r1, r3
   17b12:	4b0f      	ldr	r3, [pc, #60]	; (17b50 <ctrl_rl_idx_allowed+0x50>)
   17b14:	5c58      	ldrb	r0, [r3, r1]
   17b16:	07c2      	lsls	r2, r0, #31
   17b18:	d40e      	bmi.n	17b38 <ctrl_rl_idx_allowed+0x38>
   17b1a:	4b0e      	ldr	r3, [pc, #56]	; (17b54 <ctrl_rl_idx_allowed+0x54>)
   17b1c:	9301      	str	r3, [sp, #4]
   17b1e:	9300      	str	r3, [sp, #0]
   17b20:	4a0d      	ldr	r2, [pc, #52]	; (17b58 <ctrl_rl_idx_allowed+0x58>)
   17b22:	4b0e      	ldr	r3, [pc, #56]	; (17b5c <ctrl_rl_idx_allowed+0x5c>)
   17b24:	490e      	ldr	r1, [pc, #56]	; (17b60 <ctrl_rl_idx_allowed+0x60>)
   17b26:	480f      	ldr	r0, [pc, #60]	; (17b64 <ctrl_rl_idx_allowed+0x64>)
   17b28:	f7ea fbba 	bl	22a0 <printk>
   17b2c:	4040      	eors	r0, r0
   17b2e:	f380 8811 	msr	BASEPRI, r0
   17b32:	f04f 0004 	mov.w	r0, #4
   17b36:	df02      	svc	2
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   17b38:	0743      	lsls	r3, r0, #29
   17b3a:	d504      	bpl.n	17b46 <ctrl_rl_idx_allowed+0x46>
   17b3c:	f3c0 1000 	ubfx	r0, r0, #4, #1
}
   17b40:	b003      	add	sp, #12
   17b42:	f85d fb04 	ldr.w	pc, [sp], #4
		return true;
   17b46:	2001      	movs	r0, #1
   17b48:	e7fa      	b.n	17b40 <ctrl_rl_idx_allowed+0x40>
   17b4a:	bf00      	nop
   17b4c:	200020dc 	.word	0x200020dc
   17b50:	20001f9c 	.word	0x20001f9c
   17b54:	00023dbe 	.word	0x00023dbe
   17b58:	00022d86 	.word	0x00022d86
   17b5c:	00026d2c 	.word	0x00026d2c
   17b60:	000272e8 	.word	0x000272e8
   17b64:	00026d88 	.word	0x00026d88

00017b68 <ll_rl_id_addr_get>:
{
   17b68:	4603      	mov	r3, r0
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   17b6a:	2b07      	cmp	r3, #7
{
   17b6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   17b6e:	4610      	mov	r0, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   17b70:	d90e      	bls.n	17b90 <ll_rl_id_addr_get+0x28>
   17b72:	4b15      	ldr	r3, [pc, #84]	; (17bc8 <ll_rl_id_addr_get+0x60>)
   17b74:	9301      	str	r3, [sp, #4]
   17b76:	9300      	str	r3, [sp, #0]
   17b78:	4a14      	ldr	r2, [pc, #80]	; (17bcc <ll_rl_id_addr_get+0x64>)
   17b7a:	4b15      	ldr	r3, [pc, #84]	; (17bd0 <ll_rl_id_addr_get+0x68>)
   17b7c:	4915      	ldr	r1, [pc, #84]	; (17bd4 <ll_rl_id_addr_get+0x6c>)
   17b7e:	4816      	ldr	r0, [pc, #88]	; (17bd8 <ll_rl_id_addr_get+0x70>)
	LL_ASSERT(rl[rl_idx].taken);
   17b80:	f7ea fb8e 	bl	22a0 <printk>
   17b84:	4040      	eors	r0, r0
   17b86:	f380 8811 	msr	BASEPRI, r0
   17b8a:	f04f 0004 	mov.w	r0, #4
   17b8e:	df02      	svc	2
   17b90:	2528      	movs	r5, #40	; 0x28
   17b92:	4c12      	ldr	r4, [pc, #72]	; (17bdc <ll_rl_id_addr_get+0x74>)
   17b94:	fb05 f203 	mul.w	r2, r5, r3
   17b98:	5ca2      	ldrb	r2, [r4, r2]
   17b9a:	f012 0f01 	tst.w	r2, #1
   17b9e:	d107      	bne.n	17bb0 <ll_rl_id_addr_get+0x48>
   17ba0:	4b09      	ldr	r3, [pc, #36]	; (17bc8 <ll_rl_id_addr_get+0x60>)
   17ba2:	9301      	str	r3, [sp, #4]
   17ba4:	9300      	str	r3, [sp, #0]
   17ba6:	4a09      	ldr	r2, [pc, #36]	; (17bcc <ll_rl_id_addr_get+0x64>)
   17ba8:	4b09      	ldr	r3, [pc, #36]	; (17bd0 <ll_rl_id_addr_get+0x68>)
   17baa:	490a      	ldr	r1, [pc, #40]	; (17bd4 <ll_rl_id_addr_get+0x6c>)
   17bac:	480c      	ldr	r0, [pc, #48]	; (17be0 <ll_rl_id_addr_get+0x78>)
   17bae:	e7e7      	b.n	17b80 <ll_rl_id_addr_get+0x18>
	*id_addr_type = rl[rl_idx].id_addr_type;
   17bb0:	f3c2 1280 	ubfx	r2, r2, #6, #1
   17bb4:	700a      	strb	r2, [r1, #0]
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   17bb6:	fb05 4103 	mla	r1, r5, r3, r4
   17bba:	2206      	movs	r2, #6
   17bbc:	3101      	adds	r1, #1
}
   17bbe:	b003      	add	sp, #12
   17bc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   17bc4:	f7e8 bde5 	b.w	792 <memcpy>
   17bc8:	00023dbe 	.word	0x00023dbe
   17bcc:	00022d86 	.word	0x00022d86
   17bd0:	00026d40 	.word	0x00026d40
   17bd4:	000272e8 	.word	0x000272e8
   17bd8:	0002701d 	.word	0x0002701d
   17bdc:	20001f9c 	.word	0x20001f9c
   17be0:	00026d88 	.word	0x00026d88

00017be4 <ctrl_rl_addr_allowed>:
{
   17be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!rl_enable || *rl_idx != FILTER_IDX_NONE) {
   17be8:	4b1a      	ldr	r3, [pc, #104]	; (17c54 <ctrl_rl_addr_allowed+0x70>)
   17bea:	781b      	ldrb	r3, [r3, #0]
   17bec:	b37b      	cbz	r3, 17c4e <ctrl_rl_addr_allowed+0x6a>
   17bee:	7813      	ldrb	r3, [r2, #0]
   17bf0:	2bff      	cmp	r3, #255	; 0xff
   17bf2:	d12c      	bne.n	17c4e <ctrl_rl_addr_allowed+0x6a>
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   17bf4:	4e18      	ldr	r6, [pc, #96]	; (17c58 <ctrl_rl_addr_allowed+0x74>)
   17bf6:	2400      	movs	r4, #0
   17bf8:	f04f 0828 	mov.w	r8, #40	; 0x28
   17bfc:	46b6      	mov	lr, r6
   17bfe:	fb08 f304 	mul.w	r3, r8, r4
   17c02:	fa5f fc84 	uxtb.w	ip, r4
   17c06:	5cf7      	ldrb	r7, [r6, r3]
   17c08:	f017 0f01 	tst.w	r7, #1
   17c0c:	eb06 0503 	add.w	r5, r6, r3
   17c10:	d01a      	beq.n	17c48 <ctrl_rl_addr_allowed+0x64>
   17c12:	f3c7 1780 	ubfx	r7, r7, #6, #1
   17c16:	4287      	cmp	r7, r0
   17c18:	d116      	bne.n	17c48 <ctrl_rl_addr_allowed+0x64>
   17c1a:	3306      	adds	r3, #6
   17c1c:	1e4f      	subs	r7, r1, #1
   17c1e:	4433      	add	r3, r6
				if (addr[j] != id_addr[j]) {
   17c20:	f815 af01 	ldrb.w	sl, [r5, #1]!
   17c24:	f817 9f01 	ldrb.w	r9, [r7, #1]!
   17c28:	45ca      	cmp	sl, r9
   17c2a:	d10d      	bne.n	17c48 <ctrl_rl_addr_allowed+0x64>
			for (j = 0; j < BDADDR_SIZE; j++) {
   17c2c:	429d      	cmp	r5, r3
   17c2e:	d1f7      	bne.n	17c20 <ctrl_rl_addr_allowed+0x3c>
				return !rl[i].pirk || rl[i].dev;
   17c30:	2328      	movs	r3, #40	; 0x28
   17c32:	435c      	muls	r4, r3
				*rl_idx = i;
   17c34:	f882 c000 	strb.w	ip, [r2]
				return !rl[i].pirk || rl[i].dev;
   17c38:	f81e 0004 	ldrb.w	r0, [lr, r4]
   17c3c:	0743      	lsls	r3, r0, #29
   17c3e:	d506      	bpl.n	17c4e <ctrl_rl_addr_allowed+0x6a>
   17c40:	f3c0 1000 	ubfx	r0, r0, #4, #1
   17c44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17c48:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   17c4a:	2c08      	cmp	r4, #8
   17c4c:	d1d7      	bne.n	17bfe <ctrl_rl_addr_allowed+0x1a>
   17c4e:	2001      	movs	r0, #1
}
   17c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17c54:	200020dc 	.word	0x200020dc
   17c58:	20001f9c 	.word	0x20001f9c

00017c5c <ctrl_rl_addr_resolve>:
{
   17c5c:	b470      	push	{r4, r5, r6}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || !rl[rl_idx].lirk) {
   17c5e:	4c0d      	ldr	r4, [pc, #52]	; (17c94 <ctrl_rl_addr_resolve+0x38>)
   17c60:	7824      	ldrb	r4, [r4, #0]
   17c62:	b1a4      	cbz	r4, 17c8e <ctrl_rl_addr_resolve+0x32>
   17c64:	2a07      	cmp	r2, #7
   17c66:	d812      	bhi.n	17c8e <ctrl_rl_addr_resolve+0x32>
   17c68:	2528      	movs	r5, #40	; 0x28
   17c6a:	4c0b      	ldr	r4, [pc, #44]	; (17c98 <ctrl_rl_addr_resolve+0x3c>)
   17c6c:	fb05 f602 	mul.w	r6, r5, r2
   17c70:	5da6      	ldrb	r6, [r4, r6]
   17c72:	0736      	lsls	r6, r6, #28
   17c74:	d50b      	bpl.n	17c8e <ctrl_rl_addr_resolve+0x32>
	if ((id_addr_type != 0) && ((id_addr[5] & 0xc0) == 0x40)) {
   17c76:	b150      	cbz	r0, 17c8e <ctrl_rl_addr_resolve+0x32>
   17c78:	794b      	ldrb	r3, [r1, #5]
   17c7a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   17c7e:	2b40      	cmp	r3, #64	; 0x40
   17c80:	d105      	bne.n	17c8e <ctrl_rl_addr_resolve+0x32>
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   17c82:	fb05 4202 	mla	r2, r5, r2, r4
   17c86:	1dd0      	adds	r0, r2, #7
}
   17c88:	bc70      	pop	{r4, r5, r6}
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   17c8a:	f7eb bbb0 	b.w	33ee <bt_rpa_irk_matches>
}
   17c8e:	2000      	movs	r0, #0
   17c90:	bc70      	pop	{r4, r5, r6}
   17c92:	4770      	bx	lr
   17c94:	200020dc 	.word	0x200020dc
   17c98:	20001f9c 	.word	0x20001f9c

00017c9c <ctrl_rl_enabled>:
	return rl_enable;
   17c9c:	4b02      	ldr	r3, [pc, #8]	; (17ca8 <ctrl_rl_enabled+0xc>)
   17c9e:	7818      	ldrb	r0, [r3, #0]
}
   17ca0:	3000      	adds	r0, #0
   17ca2:	bf18      	it	ne
   17ca4:	2001      	movne	r0, #1
   17ca6:	4770      	bx	lr
   17ca8:	200020dc 	.word	0x200020dc

00017cac <ll_rl_pdu_adv_update>:
{
   17cac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   17cae:	4605      	mov	r5, r0
   17cb0:	460c      	mov	r4, r1
				  &pdu->scan_rsp.addr[0] :
   17cb2:	1c8f      	adds	r7, r1, #2
	struct ll_adv_set *ll_adv = ll_adv_set_get();
   17cb4:	f7ff f8ce 	bl	16e54 <ll_adv_set_get>
	if (idx < ARRAY_SIZE(rl) && rl[idx].lirk) {
   17cb8:	2d07      	cmp	r5, #7
	struct ll_adv_set *ll_adv = ll_adv_set_get();
   17cba:	4606      	mov	r6, r0
	if (idx < ARRAY_SIZE(rl) && rl[idx].lirk) {
   17cbc:	d83c      	bhi.n	17d38 <ll_rl_pdu_adv_update+0x8c>
   17cbe:	2328      	movs	r3, #40	; 0x28
   17cc0:	4a2a      	ldr	r2, [pc, #168]	; (17d6c <ll_rl_pdu_adv_update+0xc0>)
   17cc2:	436b      	muls	r3, r5
   17cc4:	18d1      	adds	r1, r2, r3
   17cc6:	5cd3      	ldrb	r3, [r2, r3]
   17cc8:	071a      	lsls	r2, r3, #28
   17cca:	d535      	bpl.n	17d38 <ll_rl_pdu_adv_update+0x8c>
		LL_ASSERT(rl[idx].rpas_ready);
   17ccc:	079b      	lsls	r3, r3, #30
   17cce:	d40e      	bmi.n	17cee <ll_rl_pdu_adv_update+0x42>
   17cd0:	4b27      	ldr	r3, [pc, #156]	; (17d70 <ll_rl_pdu_adv_update+0xc4>)
   17cd2:	9301      	str	r3, [sp, #4]
   17cd4:	9300      	str	r3, [sp, #0]
   17cd6:	4a27      	ldr	r2, [pc, #156]	; (17d74 <ll_rl_pdu_adv_update+0xc8>)
   17cd8:	4b27      	ldr	r3, [pc, #156]	; (17d78 <ll_rl_pdu_adv_update+0xcc>)
   17cda:	4928      	ldr	r1, [pc, #160]	; (17d7c <ll_rl_pdu_adv_update+0xd0>)
   17cdc:	4828      	ldr	r0, [pc, #160]	; (17d80 <ll_rl_pdu_adv_update+0xd4>)
   17cde:	f7ea fadf 	bl	22a0 <printk>
   17ce2:	4040      	eors	r0, r0
   17ce4:	f380 8811 	msr	BASEPRI, r0
   17ce8:	f04f 0004 	mov.w	r0, #4
   17cec:	df02      	svc	2
		pdu->tx_addr = 1;
   17cee:	7823      	ldrb	r3, [r4, #0]
		memcpy(adva, rl[idx].local_rpa->val, BDADDR_SIZE);
   17cf0:	6a49      	ldr	r1, [r1, #36]	; 0x24
		pdu->tx_addr = 1;
   17cf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   17cf6:	7023      	strb	r3, [r4, #0]
		memcpy(adva, rl[idx].local_rpa->val, BDADDR_SIZE);
   17cf8:	2206      	movs	r2, #6
   17cfa:	4638      	mov	r0, r7
   17cfc:	f7e8 fd49 	bl	792 <memcpy>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   17d00:	7823      	ldrb	r3, [r4, #0]
   17d02:	f003 020f 	and.w	r2, r3, #15
   17d06:	2a01      	cmp	r2, #1
   17d08:	d12d      	bne.n	17d66 <ll_rl_pdu_adv_update+0xba>
		if (idx < ARRAY_SIZE(rl) && rl[idx].pirk) {
   17d0a:	2d07      	cmp	r5, #7
   17d0c:	f104 0008 	add.w	r0, r4, #8
   17d10:	d81f      	bhi.n	17d52 <ll_rl_pdu_adv_update+0xa6>
   17d12:	2228      	movs	r2, #40	; 0x28
   17d14:	4915      	ldr	r1, [pc, #84]	; (17d6c <ll_rl_pdu_adv_update+0xc0>)
   17d16:	fb02 f705 	mul.w	r7, r2, r5
   17d1a:	5dcf      	ldrb	r7, [r1, r7]
   17d1c:	077f      	lsls	r7, r7, #29
   17d1e:	d518      	bpl.n	17d52 <ll_rl_pdu_adv_update+0xa6>
			       rl[idx].peer_rpa.val, BDADDR_SIZE);
   17d20:	fb02 1105 	mla	r1, r2, r5, r1
			pdu->rx_addr = 1;
   17d24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   17d28:	7023      	strb	r3, [r4, #0]
			memcpy(&pdu->direct_ind.tgt_addr[0],
   17d2a:	2206      	movs	r2, #6
   17d2c:	311e      	adds	r1, #30
}
   17d2e:	b003      	add	sp, #12
   17d30:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			memcpy(&pdu->direct_ind.tgt_addr[0],
   17d34:	f7e8 bd2d 	b.w	792 <memcpy>
		pdu->tx_addr = ll_adv->own_addr_type & 0x1;
   17d38:	7830      	ldrb	r0, [r6, #0]
   17d3a:	7823      	ldrb	r3, [r4, #0]
   17d3c:	f3c0 1041 	ubfx	r0, r0, #5, #2
   17d40:	f360 1386 	bfi	r3, r0, #6, #1
   17d44:	7023      	strb	r3, [r4, #0]
		ll_addr_get(ll_adv->own_addr_type & 0x1, adva);
   17d46:	4639      	mov	r1, r7
   17d48:	f000 0001 	and.w	r0, r0, #1
   17d4c:	f7f4 fd48 	bl	c7e0 <ll_addr_get>
   17d50:	e7d6      	b.n	17d00 <ll_rl_pdu_adv_update+0x54>
			pdu->rx_addr = ll_adv->id_addr_type;
   17d52:	4631      	mov	r1, r6
   17d54:	7822      	ldrb	r2, [r4, #0]
   17d56:	f811 3b02 	ldrb.w	r3, [r1], #2
   17d5a:	09db      	lsrs	r3, r3, #7
   17d5c:	f363 12c7 	bfi	r2, r3, #7, #1
   17d60:	7022      	strb	r2, [r4, #0]
			memcpy(&pdu->direct_ind.tgt_addr[0],
   17d62:	2206      	movs	r2, #6
   17d64:	e7e3      	b.n	17d2e <ll_rl_pdu_adv_update+0x82>
}
   17d66:	b003      	add	sp, #12
   17d68:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17d6a:	bf00      	nop
   17d6c:	20001f9c 	.word	0x20001f9c
   17d70:	00023dbe 	.word	0x00023dbe
   17d74:	00022d86 	.word	0x00022d86
   17d78:	00026d52 	.word	0x00026d52
   17d7c:	000272e8 	.word	0x000272e8
   17d80:	00027049 	.word	0x00027049

00017d84 <ll_rl_rpa_update>:

void ll_rl_rpa_update(bool timeout)
{
   17d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17d88:	b08b      	sub	sp, #44	; 0x2c
   17d8a:	4681      	mov	r9, r0
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t);
   17d8c:	f009 ffa8 	bl	21ce0 <_impl_k_uptime_get>
   17d90:	e9cd 0102 	strd	r0, r1, [sp, #8]
	u8_t i;
	int err;
	s64_t now = k_uptime_get();
	bool all = timeout || (rpa_last_ms == -1) ||
   17d94:	f1b9 0f00 	cmp.w	r9, #0
   17d98:	d14e      	bne.n	17e38 <ll_rl_rpa_update+0xb4>
   17d9a:	4b68      	ldr	r3, [pc, #416]	; (17f3c <ll_rl_rpa_update+0x1b8>)
   17d9c:	e9d3 0100 	ldrd	r0, r1, [r3]
   17da0:	1c4c      	adds	r4, r1, #1
   17da2:	bf08      	it	eq
   17da4:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
   17da8:	d046      	beq.n	17e38 <ll_rl_rpa_update+0xb4>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   17daa:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   17dae:	1a1b      	subs	r3, r3, r0
   17db0:	4618      	mov	r0, r3
   17db2:	4b63      	ldr	r3, [pc, #396]	; (17f40 <ll_rl_rpa_update+0x1bc>)
   17db4:	681a      	ldr	r2, [r3, #0]
   17db6:	eb64 0401 	sbc.w	r4, r4, r1
   17dba:	2300      	movs	r3, #0
	bool all = timeout || (rpa_last_ms == -1) ||
   17dbc:	4290      	cmp	r0, r2
   17dbe:	eb74 0303 	sbcs.w	r3, r4, r3
   17dc2:	bfac      	ite	ge
   17dc4:	2601      	movge	r6, #1
   17dc6:	2600      	movlt	r6, #0
   17dc8:	4d5e      	ldr	r5, [pc, #376]	; (17f44 <ll_rl_rpa_update+0x1c0>)
   17dca:	f8df b19c 	ldr.w	fp, [pc, #412]	; 17f68 <ll_rl_rpa_update+0x1e4>
	BT_DBG("");

	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   17dce:	f1a5 0a07 	sub.w	sl, r5, #7
	bool all = timeout || (rpa_last_ms == -1) ||
   17dd2:	2400      	movs	r4, #0
   17dd4:	4657      	mov	r7, sl
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   17dd6:	2328      	movs	r3, #40	; 0x28
   17dd8:	4363      	muls	r3, r4
   17dda:	f81a 3003 	ldrb.w	r3, [sl, r3]
   17dde:	07da      	lsls	r2, r3, #31
   17de0:	d54c      	bpl.n	17e7c <ll_rl_rpa_update+0xf8>
   17de2:	b90e      	cbnz	r6, 17de8 <ll_rl_rpa_update+0x64>
   17de4:	0798      	lsls	r0, r3, #30
   17de6:	d449      	bmi.n	17e7c <ll_rl_rpa_update+0xf8>

			if (rl[i].pirk) {
   17de8:	2328      	movs	r3, #40	; 0x28
   17dea:	4363      	muls	r3, r4
   17dec:	5cfb      	ldrb	r3, [r7, r3]
   17dee:	0759      	lsls	r1, r3, #29
   17df0:	d524      	bpl.n	17e3c <ll_rl_rpa_update+0xb8>
				u8_t irk[16];

				/* TODO: move this swap to the driver level */
				sys_memcpy_swap(irk, peer_irks[rl[i].pirk_idx],
   17df2:	7c2a      	ldrb	r2, [r5, #16]
   17df4:	4b54      	ldr	r3, [pc, #336]	; (17f48 <ll_rl_rpa_update+0x1c4>)
   17df6:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   17dfa:	f103 0210 	add.w	r2, r3, #16
   17dfe:	f10d 0117 	add.w	r1, sp, #23
		*((u8_t *)dst++) = *((u8_t *)src--);
   17e02:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   17e06:	f801 0f01 	strb.w	r0, [r1, #1]!
	for (; length > 0; length--) {
   17e0a:	429a      	cmp	r2, r3
   17e0c:	d1f9      	bne.n	17e02 <ll_rl_rpa_update+0x7e>
						16);
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   17e0e:	f105 0117 	add.w	r1, r5, #23
   17e12:	a806      	add	r0, sp, #24
   17e14:	f7eb fafe 	bl	3414 <bt_rpa_create>
				LL_ASSERT(!err);
   17e18:	b180      	cbz	r0, 17e3c <ll_rl_rpa_update+0xb8>

			if (rl[i].lirk) {
				bt_addr_t rpa;

				err = bt_rpa_create(rl[i].local_irk, &rpa);
				LL_ASSERT(!err);
   17e1a:	4b4c      	ldr	r3, [pc, #304]	; (17f4c <ll_rl_rpa_update+0x1c8>)
   17e1c:	9301      	str	r3, [sp, #4]
   17e1e:	9300      	str	r3, [sp, #0]
   17e20:	4a4b      	ldr	r2, [pc, #300]	; (17f50 <ll_rl_rpa_update+0x1cc>)
   17e22:	4b4c      	ldr	r3, [pc, #304]	; (17f54 <ll_rl_rpa_update+0x1d0>)
   17e24:	494c      	ldr	r1, [pc, #304]	; (17f58 <ll_rl_rpa_update+0x1d4>)
   17e26:	484d      	ldr	r0, [pc, #308]	; (17f5c <ll_rl_rpa_update+0x1d8>)
	ll_rl_pdu_adv_update(idx, pdu);
   17e28:	f7ea fa3a 	bl	22a0 <printk>
	memcpy(&pdu->adv_ind.data[0], &prev->adv_ind.data[0],
   17e2c:	4040      	eors	r0, r0
   17e2e:	f380 8811 	msr	BASEPRI, r0
   17e32:	f04f 0004 	mov.w	r0, #4
   17e36:	df02      	svc	2
	bool all = timeout || (rpa_last_ms == -1) ||
   17e38:	2601      	movs	r6, #1
   17e3a:	e7c5      	b.n	17dc8 <ll_rl_rpa_update+0x44>
			if (rl[i].lirk) {
   17e3c:	2328      	movs	r3, #40	; 0x28
   17e3e:	4363      	muls	r3, r4
   17e40:	5cfb      	ldrb	r3, [r7, r3]
   17e42:	071a      	lsls	r2, r3, #28
   17e44:	d514      	bpl.n	17e70 <ll_rl_rpa_update+0xec>
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   17e46:	f10d 0818 	add.w	r8, sp, #24
   17e4a:	4641      	mov	r1, r8
   17e4c:	4628      	mov	r0, r5
   17e4e:	f7eb fae1 	bl	3414 <bt_rpa_create>
				LL_ASSERT(!err);
   17e52:	2800      	cmp	r0, #0
   17e54:	d1e1      	bne.n	17e1a <ll_rl_rpa_update+0x96>
   17e56:	2206      	movs	r2, #6
   17e58:	fb02 b304 	mla	r3, r2, r4, fp
   17e5c:	4618      	mov	r0, r3
				/* pointer read/write assumed to be atomic
				 * so that if ISR fires the local_rpa pointer
				 * will always point to a valid full RPA
				 */
				rl[i].local_rpa = &rpa;
   17e5e:	f8c5 801d 	str.w	r8, [r5, #29]
   17e62:	4641      	mov	r1, r8
   17e64:	9305      	str	r3, [sp, #20]
   17e66:	f7e8 fc94 	bl	792 <memcpy>
				bt_addr_copy(&local_rpas[i], &rpa);
				rl[i].local_rpa = &local_rpas[i];
   17e6a:	9b05      	ldr	r3, [sp, #20]
   17e6c:	f8c5 301d 	str.w	r3, [r5, #29]
			}

			rl[i].rpas_ready = 1;
   17e70:	2328      	movs	r3, #40	; 0x28
   17e72:	4363      	muls	r3, r4
   17e74:	5cfa      	ldrb	r2, [r7, r3]
   17e76:	f042 0202 	orr.w	r2, r2, #2
   17e7a:	54fa      	strb	r2, [r7, r3]
   17e7c:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   17e7e:	2c08      	cmp	r4, #8
   17e80:	f105 0528 	add.w	r5, r5, #40	; 0x28
   17e84:	d1a7      	bne.n	17dd6 <ll_rl_rpa_update+0x52>
		}
	}

	if (all) {
   17e86:	b126      	cbz	r6, 17e92 <ll_rl_rpa_update+0x10e>
		rpa_last_ms = now;
   17e88:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   17e8c:	4b2b      	ldr	r3, [pc, #172]	; (17f3c <ll_rl_rpa_update+0x1b8>)
   17e8e:	e9c3 1200 	strd	r1, r2, [r3]
	}

	if (timeout) {
   17e92:	f1b9 0f00 	cmp.w	r9, #0
   17e96:	d04d      	beq.n	17f34 <ll_rl_rpa_update+0x1b0>
#if defined(CONFIG_BT_BROADCASTER)
		if (ll_adv_is_enabled()) {
   17e98:	f7fd fc80 	bl	1579c <ll_adv_is_enabled>
   17e9c:	2800      	cmp	r0, #0
   17e9e:	d049      	beq.n	17f34 <ll_rl_rpa_update+0x1b0>
	ll_adv = ll_adv_set_get();
   17ea0:	f7fe ffd8 	bl	16e54 <ll_adv_set_get>
	if (ll_adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
   17ea4:	7803      	ldrb	r3, [r0, #0]
   17ea6:	065b      	lsls	r3, r3, #25
	ll_adv = ll_adv_set_get();
   17ea8:	4680      	mov	r8, r0
	if (ll_adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
   17eaa:	d543      	bpl.n	17f34 <ll_rl_rpa_update+0x1b0>
	radio_adv_data = radio_adv_data_get();
   17eac:	f7fd fc6a 	bl	15784 <radio_adv_data_get>
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   17eb0:	f890 4203 	ldrb.w	r4, [r0, #515]	; 0x203
	if (radio_adv_data->first == radio_adv_data->last) {
   17eb4:	f890 3202 	ldrb.w	r3, [r0, #514]	; 0x202
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   17eb8:	eb04 2104 	add.w	r1, r4, r4, lsl #8
	if (radio_adv_data->first == radio_adv_data->last) {
   17ebc:	42a3      	cmp	r3, r4
	radio_adv_data = radio_adv_data_get();
   17ebe:	4605      	mov	r5, r0
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   17ec0:	eb00 0701 	add.w	r7, r0, r1
	if (radio_adv_data->first == radio_adv_data->last) {
   17ec4:	d104      	bne.n	17ed0 <ll_rl_rpa_update+0x14c>
		last = radio_adv_data->last + 1;
   17ec6:	3401      	adds	r4, #1
   17ec8:	b2e4      	uxtb	r4, r4
			last = 0;
   17eca:	2c02      	cmp	r4, #2
   17ecc:	bf08      	it	eq
   17ece:	2400      	moveq	r4, #0
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
   17ed0:	eb04 2304 	add.w	r3, r4, r4, lsl #8
	pdu->type = prev->type;
   17ed4:	5c68      	ldrb	r0, [r5, r1]
   17ed6:	5cea      	ldrb	r2, [r5, r3]
   17ed8:	f360 0203 	bfi	r2, r0, #0, #4
	pdu->rfu = 0;
   17edc:	f36f 1204 	bfc	r2, #4, #1
   17ee0:	54ea      	strb	r2, [r5, r3]
		pdu->chan_sel = prev->chan_sel;
   17ee2:	5c6a      	ldrb	r2, [r5, r1]
   17ee4:	5ce9      	ldrb	r1, [r5, r3]
	idx = ll_rl_find(ll_adv->id_addr_type, ll_adv->id_addr, NULL);
   17ee6:	f898 0000 	ldrb.w	r0, [r8]
		pdu->chan_sel = prev->chan_sel;
   17eea:	f3c2 1240 	ubfx	r2, r2, #5, #1
   17eee:	f362 1145 	bfi	r1, r2, #5, #1
   17ef2:	54e9      	strb	r1, [r5, r3]
	idx = ll_rl_find(ll_adv->id_addr_type, ll_adv->id_addr, NULL);
   17ef4:	2200      	movs	r2, #0
   17ef6:	f108 0102 	add.w	r1, r8, #2
   17efa:	09c0      	lsrs	r0, r0, #7
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
   17efc:	18ee      	adds	r6, r5, r3
	idx = ll_rl_find(ll_adv->id_addr_type, ll_adv->id_addr, NULL);
   17efe:	f7ff fd73 	bl	179e8 <ll_rl_find>
	LL_ASSERT(idx < ARRAY_SIZE(rl));
   17f02:	2807      	cmp	r0, #7
   17f04:	d907      	bls.n	17f16 <ll_rl_rpa_update+0x192>
	ll_rl_pdu_adv_update(idx, pdu);
   17f06:	4b11      	ldr	r3, [pc, #68]	; (17f4c <ll_rl_rpa_update+0x1c8>)
   17f08:	9301      	str	r3, [sp, #4]
   17f0a:	9300      	str	r3, [sp, #0]
   17f0c:	4a10      	ldr	r2, [pc, #64]	; (17f50 <ll_rl_rpa_update+0x1cc>)
   17f0e:	4b14      	ldr	r3, [pc, #80]	; (17f60 <ll_rl_rpa_update+0x1dc>)
   17f10:	4911      	ldr	r1, [pc, #68]	; (17f58 <ll_rl_rpa_update+0x1d4>)
   17f12:	4814      	ldr	r0, [pc, #80]	; (17f64 <ll_rl_rpa_update+0x1e0>)
   17f14:	e788      	b.n	17e28 <ll_rl_rpa_update+0xa4>
   17f16:	4631      	mov	r1, r6
   17f18:	f7ff fec8 	bl	17cac <ll_rl_pdu_adv_update>
	       prev->len - BDADDR_SIZE);
   17f1c:	787a      	ldrb	r2, [r7, #1]
	memcpy(&pdu->adv_ind.data[0], &prev->adv_ind.data[0],
   17f1e:	f107 0108 	add.w	r1, r7, #8
   17f22:	3a06      	subs	r2, #6
   17f24:	f106 0008 	add.w	r0, r6, #8
   17f28:	f7e8 fc33 	bl	792 <memcpy>
	pdu->len = prev->len;
   17f2c:	787b      	ldrb	r3, [r7, #1]
   17f2e:	7073      	strb	r3, [r6, #1]
	radio_adv_data->last = last;
   17f30:	f885 4203 	strb.w	r4, [r5, #515]	; 0x203
			rpa_adv_refresh();
		}
#endif
	}
}
   17f34:	b00b      	add	sp, #44	; 0x2c
   17f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17f3a:	bf00      	nop
   17f3c:	200032f8 	.word	0x200032f8
   17f40:	2000332c 	.word	0x2000332c
   17f44:	20001fa3 	.word	0x20001fa3
   17f48:	20001f1b 	.word	0x20001f1b
   17f4c:	00023dbe 	.word	0x00023dbe
   17f50:	00022d86 	.word	0x00022d86
   17f54:	00026d77 	.word	0x00026d77
   17f58:	000272e8 	.word	0x000272e8
   17f5c:	00026ca0 	.word	0x00026ca0
   17f60:	00026d67 	.word	0x00026d67
   17f64:	0002707d 	.word	0x0002707d
   17f68:	20001ee2 	.word	0x20001ee2

00017f6c <rpa_timeout>:

static void rpa_timeout(struct k_work *work)
{
   17f6c:	b508      	push	{r3, lr}
	ll_rl_rpa_update(true);
   17f6e:	2001      	movs	r0, #1
   17f70:	f7ff ff08 	bl	17d84 <ll_rl_rpa_update>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   17f74:	4b03      	ldr	r3, [pc, #12]	; (17f84 <rpa_timeout+0x18>)
   17f76:	4904      	ldr	r1, [pc, #16]	; (17f88 <rpa_timeout+0x1c>)
   17f78:	681a      	ldr	r2, [r3, #0]
   17f7a:	4804      	ldr	r0, [pc, #16]	; (17f8c <rpa_timeout+0x20>)
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
}
   17f7c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   17f80:	f00a b9bc 	b.w	222fc <k_delayed_work_submit_to_queue>
   17f84:	2000332c 	.word	0x2000332c
   17f88:	20003304 	.word	0x20003304
   17f8c:	20003340 	.word	0x20003340

00017f90 <ll_adv_scan_state_cb>:

	k_delayed_work_cancel(&rpa_work);
}

void ll_adv_scan_state_cb(u8_t bm)
{
   17f90:	4b07      	ldr	r3, [pc, #28]	; (17fb0 <ll_adv_scan_state_cb+0x20>)
	if (!rl_enable) {
   17f92:	781b      	ldrb	r3, [r3, #0]
	if (bm) {
   17f94:	b130      	cbz	r0, 17fa4 <ll_adv_scan_state_cb+0x14>
	if (!rl_enable) {
   17f96:	b14b      	cbz	r3, 17fac <ll_adv_scan_state_cb+0x1c>
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
   17f98:	4b06      	ldr	r3, [pc, #24]	; (17fb4 <ll_adv_scan_state_cb+0x24>)
   17f9a:	4907      	ldr	r1, [pc, #28]	; (17fb8 <ll_adv_scan_state_cb+0x28>)
   17f9c:	681a      	ldr	r2, [r3, #0]
   17f9e:	4807      	ldr	r0, [pc, #28]	; (17fbc <ll_adv_scan_state_cb+0x2c>)
   17fa0:	f00a b9ac 	b.w	222fc <k_delayed_work_submit_to_queue>
	if (!rl_enable) {
   17fa4:	b113      	cbz	r3, 17fac <ll_adv_scan_state_cb+0x1c>
	k_delayed_work_cancel(&rpa_work);
   17fa6:	4804      	ldr	r0, [pc, #16]	; (17fb8 <ll_adv_scan_state_cb+0x28>)
   17fa8:	f00a b94e 	b.w	22248 <k_delayed_work_cancel>
   17fac:	4770      	bx	lr
   17fae:	bf00      	nop
   17fb0:	200020dc 	.word	0x200020dc
   17fb4:	2000332c 	.word	0x2000332c
   17fb8:	20003304 	.word	0x20003304
   17fbc:	20003340 	.word	0x20003340

00017fc0 <ll_rl_size_get>:
}

u32_t ll_rl_size_get(void)
{
	return CONFIG_BT_CTLR_RL_SIZE;
}
   17fc0:	2008      	movs	r0, #8
   17fc2:	4770      	bx	lr

00017fc4 <ll_rl_clear>:

u32_t ll_rl_clear(void)
{
   17fc4:	b510      	push	{r4, lr}
	if (!rl_access_check(false)) {
   17fc6:	f7ff fb4d 	bl	17664 <rl_access_check.constprop.1>
   17fca:	b178      	cbz	r0, 17fec <ll_rl_clear+0x28>
		rl[i].taken = 0;
   17fcc:	4908      	ldr	r1, [pc, #32]	; (17ff0 <ll_rl_clear+0x2c>)
   17fce:	2300      	movs	r3, #0
   17fd0:	2428      	movs	r4, #40	; 0x28
   17fd2:	fb04 f203 	mul.w	r2, r4, r3
   17fd6:	3301      	adds	r3, #1
   17fd8:	5c88      	ldrb	r0, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   17fda:	2b08      	cmp	r3, #8
		rl[i].taken = 0;
   17fdc:	f36f 0000 	bfc	r0, #0, #1
   17fe0:	5488      	strb	r0, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   17fe2:	d1f6      	bne.n	17fd2 <ll_rl_clear+0xe>
	peer_irk_count = 0;
   17fe4:	4b03      	ldr	r3, [pc, #12]	; (17ff4 <ll_rl_clear+0x30>)
   17fe6:	2000      	movs	r0, #0
   17fe8:	7018      	strb	r0, [r3, #0]
   17fea:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   17fec:	200c      	movs	r0, #12
	}

	rl_clear();

	return 0;
}
   17fee:	bd10      	pop	{r4, pc}
   17ff0:	20001f9c 	.word	0x20001f9c
   17ff4:	20001f12 	.word	0x20001f12

00017ff8 <ll_rl_add>:

u32_t ll_rl_add(bt_addr_le_t *id_addr, const u8_t pirk[16],
		const u8_t lirk[16])
{
   17ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17ffc:	b085      	sub	sp, #20
   17ffe:	4607      	mov	r7, r0
   18000:	4689      	mov	r9, r1
   18002:	4692      	mov	sl, r2
	u8_t i, j;

	if (!rl_access_check(false)) {
   18004:	f7ff fb2e 	bl	17664 <rl_access_check.constprop.1>
   18008:	2800      	cmp	r0, #0
   1800a:	f000 8086 	beq.w	1811a <ll_rl_add+0x122>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	i = ll_rl_find(id_addr->type, id_addr->a.val, &j);
   1800e:	f107 0801 	add.w	r8, r7, #1
   18012:	f10d 020f 	add.w	r2, sp, #15
   18016:	4641      	mov	r1, r8
   18018:	7838      	ldrb	r0, [r7, #0]
   1801a:	f7ff fce5 	bl	179e8 <ll_rl_find>

	/* Duplicate check */
	if (i < ARRAY_SIZE(rl)) {
   1801e:	2807      	cmp	r0, #7
   18020:	d97d      	bls.n	1811e <ll_rl_add+0x126>
		return BT_HCI_ERR_INVALID_PARAM;
	} else if (j >= ARRAY_SIZE(rl)) {
   18022:	f89d 500f 	ldrb.w	r5, [sp, #15]
   18026:	2d07      	cmp	r5, #7
   18028:	d87b      	bhi.n	18122 <ll_rl_add+0x12a>
   1802a:	eb05 0b85 	add.w	fp, r5, r5, lsl #2
	}

	/* Device not found but empty slot found */
	i = j;

	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   1802e:	4c3e      	ldr	r4, [pc, #248]	; (18128 <ll_rl_add+0x130>)
   18030:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
	rl[i].id_addr_type = id_addr->type & 0x1;
   18034:	2628      	movs	r6, #40	; 0x28
   18036:	436e      	muls	r6, r5
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   18038:	f10b 0001 	add.w	r0, fp, #1
   1803c:	2206      	movs	r2, #6
   1803e:	4641      	mov	r1, r8
   18040:	4420      	add	r0, r4
   18042:	f7e8 fba6 	bl	792 <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
   18046:	7839      	ldrb	r1, [r7, #0]
   18048:	5da3      	ldrb	r3, [r4, r6]
   1804a:	19a2      	adds	r2, r4, r6
   1804c:	f361 1386 	bfi	r3, r1, #6, #1
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   18050:	4648      	mov	r0, r9
   18052:	2110      	movs	r1, #16
	rl[i].id_addr_type = id_addr->type & 0x1;
   18054:	9201      	str	r2, [sp, #4]
   18056:	55a3      	strb	r3, [r4, r6]
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   18058:	f7f3 fc11 	bl	b87e <mem_nz>
   1805c:	5da3      	ldrb	r3, [r4, r6]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   1805e:	2110      	movs	r1, #16
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   18060:	f360 0382 	bfi	r3, r0, #2, #1
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   18064:	4650      	mov	r0, sl
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   18066:	55a3      	strb	r3, [r4, r6]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   18068:	f7f3 fc09 	bl	b87e <mem_nz>
   1806c:	5da3      	ldrb	r3, [r4, r6]
	if (rl[i].pirk) {
   1806e:	9a01      	ldr	r2, [sp, #4]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   18070:	f000 0001 	and.w	r0, r0, #1
   18074:	f360 03c3 	bfi	r3, r0, #3, #1
	if (rl[i].pirk) {
   18078:	f013 0f04 	tst.w	r3, #4
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   1807c:	55a3      	strb	r3, [r4, r6]
	if (rl[i].pirk) {
   1807e:	d138      	bne.n	180f2 <ll_rl_add+0xfa>
		rl[i].pirk_idx = peer_irk_count;
		peer_irk_rl_ids[peer_irk_count] = i;
		/* AAR requires big-endian IRKs */
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, 16);
	}
	if (rl[i].lirk) {
   18080:	b158      	cbz	r0, 1809a <ll_rl_add+0xa2>
		memcpy(rl[i].local_irk, lirk, 16);
   18082:	f10b 0007 	add.w	r0, fp, #7
   18086:	2210      	movs	r2, #16
   18088:	4651      	mov	r1, sl
   1808a:	4420      	add	r0, r4
   1808c:	f7e8 fb81 	bl	792 <memcpy>
		rl[i].local_rpa = NULL;
   18090:	2328      	movs	r3, #40	; 0x28
   18092:	fb03 4305 	mla	r3, r3, r5, r4
   18096:	2200      	movs	r2, #0
   18098:	625a      	str	r2, [r3, #36]	; 0x24
	}
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
	rl[i].rpas_ready = 0;
   1809a:	2628      	movs	r6, #40	; 0x28
   1809c:	436e      	muls	r6, r5
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   1809e:	f10b 0018 	add.w	r0, fp, #24
   180a2:	2206      	movs	r2, #6
   180a4:	2100      	movs	r1, #0
   180a6:	4420      	add	r0, r4
   180a8:	f7e8 fb9f 	bl	7ea <memset>
	rl[i].rpas_ready = 0;
   180ac:	5da3      	ldrb	r3, [r4, r6]
	/* Default to Network Privacy */
	rl[i].dev = 0;
   180ae:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   180b2:	f36f 1304 	bfc	r3, #4, #1
   180b6:	55a3      	strb	r3, [r4, r6]
	/* Add reference to  a whitelist entry */
	j = wl_find(id_addr->type, id_addr->a.val, NULL);
   180b8:	2200      	movs	r2, #0
   180ba:	4641      	mov	r1, r8
   180bc:	7838      	ldrb	r0, [r7, #0]
   180be:	f7ff fa73 	bl	175a8 <wl_find>
	if (j < ARRAY_SIZE(wl)) {
   180c2:	2807      	cmp	r0, #7
   180c4:	5da3      	ldrb	r3, [r4, r6]
		wl[j].rl_idx = i;
   180c6:	bf9d      	ittte	ls
   180c8:	4a18      	ldrls	r2, [pc, #96]	; (1812c <ll_rl_add+0x134>)
		rl[i].wl = 1;
   180ca:	f043 0320 	orrls.w	r3, r3, #32
		wl[j].rl_idx = i;
   180ce:	eb02 00c0 	addls.w	r0, r2, r0, lsl #3
	} else {
		rl[i].wl = 0;
   180d2:	f36f 1345 	bfchi	r3, #5, #1
   180d6:	55a3      	strb	r3, [r4, r6]
	}
	rl[i].taken = 1;
   180d8:	f04f 0328 	mov.w	r3, #40	; 0x28
		wl[j].rl_idx = i;
   180dc:	bf98      	it	ls
   180de:	7045      	strbls	r5, [r0, #1]
	rl[i].taken = 1;
   180e0:	435d      	muls	r5, r3

	return 0;
   180e2:	2000      	movs	r0, #0
	rl[i].taken = 1;
   180e4:	5d63      	ldrb	r3, [r4, r5]
   180e6:	f043 0301 	orr.w	r3, r3, #1
   180ea:	5563      	strb	r3, [r4, r5]
}
   180ec:	b005      	add	sp, #20
   180ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rl[i].pirk_idx = peer_irk_count;
   180f2:	4b0f      	ldr	r3, [pc, #60]	; (18130 <ll_rl_add+0x138>)
   180f4:	7819      	ldrb	r1, [r3, #0]
   180f6:	75d1      	strb	r1, [r2, #23]
		peer_irk_rl_ids[peer_irk_count] = i;
   180f8:	4a0e      	ldr	r2, [pc, #56]	; (18134 <ll_rl_add+0x13c>)
   180fa:	5455      	strb	r5, [r2, r1]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, 16);
   180fc:	1c4a      	adds	r2, r1, #1
   180fe:	701a      	strb	r2, [r3, #0]
   18100:	4b0d      	ldr	r3, [pc, #52]	; (18138 <ll_rl_add+0x140>)
   18102:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   18106:	f109 0210 	add.w	r2, r9, #16
   1810a:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
   1810c:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
   18110:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   18114:	454a      	cmp	r2, r9
   18116:	d1f9      	bne.n	1810c <ll_rl_add+0x114>
   18118:	e7b2      	b.n	18080 <ll_rl_add+0x88>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1811a:	200c      	movs	r0, #12
   1811c:	e7e6      	b.n	180ec <ll_rl_add+0xf4>
		return BT_HCI_ERR_INVALID_PARAM;
   1811e:	2012      	movs	r0, #18
   18120:	e7e4      	b.n	180ec <ll_rl_add+0xf4>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   18122:	2007      	movs	r0, #7
   18124:	e7e2      	b.n	180ec <ll_rl_add+0xf4>
   18126:	bf00      	nop
   18128:	20001f9c 	.word	0x20001f9c
   1812c:	2000210f 	.word	0x2000210f
   18130:	20001f12 	.word	0x20001f12
   18134:	20001f13 	.word	0x20001f13
   18138:	20001f1b 	.word	0x20001f1b

0001813c <ll_rl_remove>:

u32_t ll_rl_remove(bt_addr_le_t *id_addr)
{
   1813c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18140:	4681      	mov	r9, r0
	u8_t i;

	if (!rl_access_check(false)) {
   18142:	f7ff fa8f 	bl	17664 <rl_access_check.constprop.1>
   18146:	2800      	cmp	r0, #0
   18148:	d053      	beq.n	181f2 <ll_rl_remove+0xb6>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   1814a:	f109 0a01 	add.w	sl, r9, #1
   1814e:	2200      	movs	r2, #0
   18150:	4651      	mov	r1, sl
   18152:	f899 0000 	ldrb.w	r0, [r9]
   18156:	f7ff fc47 	bl	179e8 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   1815a:	2807      	cmp	r0, #7
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   1815c:	4680      	mov	r8, r0
	if (i < ARRAY_SIZE(rl)) {
   1815e:	d84b      	bhi.n	181f8 <ll_rl_remove+0xbc>
		u8_t j, k;

		if (rl[i].pirk) {
   18160:	f04f 0b28 	mov.w	fp, #40	; 0x28
   18164:	4c26      	ldr	r4, [pc, #152]	; (18200 <ll_rl_remove+0xc4>)
   18166:	fb0b f300 	mul.w	r3, fp, r0
   1816a:	18e2      	adds	r2, r4, r3
   1816c:	5ce3      	ldrb	r3, [r4, r3]
   1816e:	075b      	lsls	r3, r3, #29
   18170:	d524      	bpl.n	181bc <ll_rl_remove+0x80>
			/* Swap with last item */
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   18172:	4e24      	ldr	r6, [pc, #144]	; (18204 <ll_rl_remove+0xc8>)
   18174:	7835      	ldrb	r5, [r6, #0]
   18176:	3d01      	subs	r5, #1

			if (pj && pi != pj) {
   18178:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   1817c:	d01b      	beq.n	181b6 <ll_rl_remove+0x7a>
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   1817e:	7dd7      	ldrb	r7, [r2, #23]
			if (pj && pi != pj) {
   18180:	42af      	cmp	r7, r5
   18182:	d018      	beq.n	181b6 <ll_rl_remove+0x7a>
				memcpy(peer_irks[pi], peer_irks[pj], 16);
   18184:	4820      	ldr	r0, [pc, #128]	; (18208 <ll_rl_remove+0xcc>)
   18186:	2210      	movs	r2, #16
   18188:	eb00 1105 	add.w	r1, r0, r5, lsl #4
   1818c:	eb00 1007 	add.w	r0, r0, r7, lsl #4
   18190:	f7e8 faff 	bl	792 <memcpy>
   18194:	2300      	movs	r3, #0
				for (k = 0;
				     k < CONFIG_BT_CTLR_RL_SIZE;
				     k++) {

					if (rl[k].taken && rl[k].pirk &&
   18196:	fb0b f103 	mul.w	r1, fp, r3
   1819a:	1862      	adds	r2, r4, r1
   1819c:	5c61      	ldrb	r1, [r4, r1]
   1819e:	f011 0f01 	tst.w	r1, #1
   181a2:	b2d8      	uxtb	r0, r3
   181a4:	d021      	beq.n	181ea <ll_rl_remove+0xae>
   181a6:	0749      	lsls	r1, r1, #29
   181a8:	d51f      	bpl.n	181ea <ll_rl_remove+0xae>
   181aa:	7dd1      	ldrb	r1, [r2, #23]
   181ac:	42a9      	cmp	r1, r5
   181ae:	d11c      	bne.n	181ea <ll_rl_remove+0xae>
					    rl[k].pirk_idx == pj) {
						rl[k].pirk_idx = pi;
						peer_irk_rl_ids[pi] = k;
   181b0:	4b16      	ldr	r3, [pc, #88]	; (1820c <ll_rl_remove+0xd0>)
						rl[k].pirk_idx = pi;
   181b2:	75d7      	strb	r7, [r2, #23]
						peer_irk_rl_ids[pi] = k;
   181b4:	55d8      	strb	r0, [r3, r7]
						break;
					}
				}
			}
			peer_irk_count--;
   181b6:	7833      	ldrb	r3, [r6, #0]
   181b8:	3b01      	subs	r3, #1
   181ba:	7033      	strb	r3, [r6, #0]
		}

		/* Check if referenced by a whitelist entry */
		j = wl_find(id_addr->type, id_addr->a.val, NULL);
   181bc:	2200      	movs	r2, #0
   181be:	4651      	mov	r1, sl
   181c0:	f899 0000 	ldrb.w	r0, [r9]
   181c4:	f7ff f9f0 	bl	175a8 <wl_find>
		if (j < ARRAY_SIZE(wl)) {
   181c8:	2807      	cmp	r0, #7
			wl[j].rl_idx = FILTER_IDX_NONE;
   181ca:	bf9f      	itttt	ls
   181cc:	4b10      	ldrls	r3, [pc, #64]	; (18210 <ll_rl_remove+0xd4>)
   181ce:	eb03 00c0 	addls.w	r0, r3, r0, lsl #3
   181d2:	23ff      	movls	r3, #255	; 0xff
   181d4:	7043      	strbls	r3, [r0, #1]
		}
		rl[i].taken = 0;
   181d6:	2028      	movs	r0, #40	; 0x28
   181d8:	fb00 f008 	mul.w	r0, r0, r8
   181dc:	5c23      	ldrb	r3, [r4, r0]
   181de:	f36f 0300 	bfc	r3, #0, #1
   181e2:	5423      	strb	r3, [r4, r0]
		return 0;
   181e4:	2000      	movs	r0, #0
   181e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   181ea:	3301      	adds	r3, #1
				for (k = 0;
   181ec:	2b08      	cmp	r3, #8
   181ee:	d1d2      	bne.n	18196 <ll_rl_remove+0x5a>
   181f0:	e7e1      	b.n	181b6 <ll_rl_remove+0x7a>
		return BT_HCI_ERR_CMD_DISALLOWED;
   181f2:	200c      	movs	r0, #12
   181f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   181f8:	2002      	movs	r0, #2
}
   181fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   181fe:	bf00      	nop
   18200:	20001f9c 	.word	0x20001f9c
   18204:	20001f12 	.word	0x20001f12
   18208:	20001f1b 	.word	0x20001f1b
   1820c:	20001f13 	.word	0x20001f13
   18210:	2000210f 	.word	0x2000210f

00018214 <ll_rl_crpa_set>:

void ll_rl_crpa_set(u8_t id_addr_type, u8_t *id_addr, u8_t rl_idx, u8_t *crpa)
{
   18214:	b570      	push	{r4, r5, r6, lr}
	if ((crpa[5] & 0xc0) == 0x40) {
   18216:	795c      	ldrb	r4, [r3, #5]
   18218:	f004 04c0 	and.w	r4, r4, #192	; 0xc0
   1821c:	2c40      	cmp	r4, #64	; 0x40
{
   1821e:	461d      	mov	r5, r3
	if ((crpa[5] & 0xc0) == 0x40) {
   18220:	d117      	bne.n	18252 <ll_rl_crpa_set+0x3e>

		if (id_addr) {
   18222:	b119      	cbz	r1, 1822c <ll_rl_crpa_set+0x18>
			/* find the device and return its RPA */
			rl_idx = ll_rl_find(id_addr_type, id_addr, NULL);
   18224:	2200      	movs	r2, #0
   18226:	f7ff fbdf 	bl	179e8 <ll_rl_find>
   1822a:	4602      	mov	r2, r0
		}

		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   1822c:	2a07      	cmp	r2, #7
   1822e:	d810      	bhi.n	18252 <ll_rl_crpa_set+0x3e>
   18230:	2128      	movs	r1, #40	; 0x28
   18232:	4c08      	ldr	r4, [pc, #32]	; (18254 <ll_rl_crpa_set+0x40>)
   18234:	fb01 f302 	mul.w	r3, r1, r2
   18238:	5ce3      	ldrb	r3, [r4, r3]
   1823a:	07db      	lsls	r3, r3, #31
   1823c:	d509      	bpl.n	18252 <ll_rl_crpa_set+0x3e>
				memcpy(rl[rl_idx].curr_rpa.val, crpa,
   1823e:	2018      	movs	r0, #24
   18240:	fb11 0002 	smlabb	r0, r1, r2, r0
   18244:	4420      	add	r0, r4
   18246:	4629      	mov	r1, r5
   18248:	2206      	movs	r2, #6
				       sizeof(bt_addr_t));
		}
	}
}
   1824a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				memcpy(rl[rl_idx].curr_rpa.val, crpa,
   1824e:	f7e8 baa0 	b.w	792 <memcpy>
   18252:	bd70      	pop	{r4, r5, r6, pc}
   18254:	20001f9c 	.word	0x20001f9c

00018258 <ll_rl_crpa_get>:

u32_t ll_rl_crpa_get(bt_addr_le_t *id_addr, bt_addr_t *crpa)
{
   18258:	b538      	push	{r3, r4, r5, lr}
	u8_t i;

	/* find the device and return its RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   1825a:	2200      	movs	r2, #0
{
   1825c:	460d      	mov	r5, r1
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   1825e:	1c41      	adds	r1, r0, #1
   18260:	7800      	ldrb	r0, [r0, #0]
   18262:	f7ff fbc1 	bl	179e8 <ll_rl_find>
	if (i < ARRAY_SIZE(rl) &&
   18266:	2807      	cmp	r0, #7
   18268:	d901      	bls.n	1826e <ll_rl_crpa_get+0x16>
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
			bt_addr_copy(crpa, &rl[i].curr_rpa);
			return 0;
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1826a:	2002      	movs	r0, #2
   1826c:	bd38      	pop	{r3, r4, r5, pc}
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   1826e:	2428      	movs	r4, #40	; 0x28
   18270:	2318      	movs	r3, #24
   18272:	fb14 3000 	smlabb	r0, r4, r0, r3
   18276:	4c07      	ldr	r4, [pc, #28]	; (18294 <ll_rl_crpa_get+0x3c>)
   18278:	4404      	add	r4, r0
   1827a:	2106      	movs	r1, #6
   1827c:	4620      	mov	r0, r4
   1827e:	f7f3 fafe 	bl	b87e <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   18282:	2800      	cmp	r0, #0
   18284:	d0f1      	beq.n	1826a <ll_rl_crpa_get+0x12>
   18286:	2206      	movs	r2, #6
   18288:	4621      	mov	r1, r4
   1828a:	4628      	mov	r0, r5
   1828c:	f7e8 fa81 	bl	792 <memcpy>
			return 0;
   18290:	2000      	movs	r0, #0
}
   18292:	bd38      	pop	{r3, r4, r5, pc}
   18294:	20001f9c 	.word	0x20001f9c

00018298 <ll_rl_lrpa_get>:

u32_t ll_rl_lrpa_get(bt_addr_le_t *id_addr, bt_addr_t *lrpa)
{
   18298:	b510      	push	{r4, lr}
	u8_t i;

	/* find the device and return the local RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   1829a:	2200      	movs	r2, #0
{
   1829c:	460c      	mov	r4, r1
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   1829e:	1c41      	adds	r1, r0, #1
   182a0:	7800      	ldrb	r0, [r0, #0]
   182a2:	f7ff fba1 	bl	179e8 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   182a6:	2807      	cmp	r0, #7
   182a8:	d80a      	bhi.n	182c0 <ll_rl_lrpa_get+0x28>
		bt_addr_copy(lrpa, rl[i].local_rpa);
   182aa:	4b06      	ldr	r3, [pc, #24]	; (182c4 <ll_rl_lrpa_get+0x2c>)
   182ac:	2228      	movs	r2, #40	; 0x28
   182ae:	fb02 3000 	mla	r0, r2, r0, r3
   182b2:	2206      	movs	r2, #6
   182b4:	6a41      	ldr	r1, [r0, #36]	; 0x24
   182b6:	4620      	mov	r0, r4
   182b8:	f7e8 fa6b 	bl	792 <memcpy>
		return 0;
   182bc:	2000      	movs	r0, #0
   182be:	bd10      	pop	{r4, pc}
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   182c0:	2002      	movs	r0, #2
}
   182c2:	bd10      	pop	{r4, pc}
   182c4:	20001f9c 	.word	0x20001f9c

000182c8 <ll_rl_enable>:

u32_t ll_rl_enable(u8_t enable)
{
   182c8:	b510      	push	{r4, lr}
   182ca:	4604      	mov	r4, r0
	if (!rl_access_check(false)) {
   182cc:	f7ff f9ca 	bl	17664 <rl_access_check.constprop.1>
   182d0:	b140      	cbz	r0, 182e4 <ll_rl_enable+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	switch (enable) {
   182d2:	b11c      	cbz	r4, 182dc <ll_rl_enable+0x14>
   182d4:	2c01      	cmp	r4, #1
   182d6:	d001      	beq.n	182dc <ll_rl_enable+0x14>
		break;
	case BT_HCI_ADDR_RES_ENABLE:
		rl_enable = 1;
		break;
	default:
		return BT_HCI_ERR_INVALID_PARAM;
   182d8:	2012      	movs	r0, #18
	}

	return 0;
}
   182da:	bd10      	pop	{r4, pc}
		rl_enable = 1;
   182dc:	4b02      	ldr	r3, [pc, #8]	; (182e8 <ll_rl_enable+0x20>)
   182de:	701c      	strb	r4, [r3, #0]
	return 0;
   182e0:	2000      	movs	r0, #0
		break;
   182e2:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   182e4:	200c      	movs	r0, #12
   182e6:	bd10      	pop	{r4, pc}
   182e8:	200020dc 	.word	0x200020dc

000182ec <ll_rl_timeout_set>:

void ll_rl_timeout_set(u16_t timeout)
{
	rpa_timeout_ms = timeout * 1000;
   182ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   182f0:	4358      	muls	r0, r3
   182f2:	4b01      	ldr	r3, [pc, #4]	; (182f8 <ll_rl_timeout_set+0xc>)
   182f4:	6018      	str	r0, [r3, #0]
   182f6:	4770      	bx	lr
   182f8:	2000332c 	.word	0x2000332c

000182fc <ll_priv_mode_set>:
}

u32_t ll_priv_mode_set(bt_addr_le_t *id_addr, u8_t mode)
{
   182fc:	b538      	push	{r3, r4, r5, lr}
   182fe:	4605      	mov	r5, r0
   18300:	460c      	mov	r4, r1
	u8_t i;

	if (!rl_access_check(false)) {
   18302:	f7ff f9af 	bl	17664 <rl_access_check.constprop.1>
   18306:	b1d8      	cbz	r0, 18340 <ll_priv_mode_set+0x44>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   18308:	2200      	movs	r2, #0
   1830a:	1c69      	adds	r1, r5, #1
   1830c:	7828      	ldrb	r0, [r5, #0]
   1830e:	f7ff fb6b 	bl	179e8 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   18312:	2807      	cmp	r0, #7
   18314:	d816      	bhi.n	18344 <ll_priv_mode_set+0x48>
		switch (mode) {
   18316:	b11c      	cbz	r4, 18320 <ll_priv_mode_set+0x24>
   18318:	2c01      	cmp	r4, #1
   1831a:	d00a      	beq.n	18332 <ll_priv_mode_set+0x36>
			break;
		case BT_HCI_LE_PRIVACY_MODE_DEVICE:
			rl[i].dev = 1;
			break;
		default:
			return BT_HCI_ERR_INVALID_PARAM;
   1831c:	2012      	movs	r0, #18
	} else {
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
	}

	return 0;
}
   1831e:	bd38      	pop	{r3, r4, r5, pc}
			rl[i].dev = 0;
   18320:	2328      	movs	r3, #40	; 0x28
   18322:	4a09      	ldr	r2, [pc, #36]	; (18348 <ll_priv_mode_set+0x4c>)
   18324:	4358      	muls	r0, r3
   18326:	5c13      	ldrb	r3, [r2, r0]
   18328:	f364 1304 	bfi	r3, r4, #4, #1
			rl[i].dev = 1;
   1832c:	5413      	strb	r3, [r2, r0]
	return 0;
   1832e:	2000      	movs	r0, #0
			break;
   18330:	bd38      	pop	{r3, r4, r5, pc}
			rl[i].dev = 1;
   18332:	2328      	movs	r3, #40	; 0x28
   18334:	4a04      	ldr	r2, [pc, #16]	; (18348 <ll_priv_mode_set+0x4c>)
   18336:	4358      	muls	r0, r3
   18338:	5c13      	ldrb	r3, [r2, r0]
   1833a:	f043 0310 	orr.w	r3, r3, #16
   1833e:	e7f5      	b.n	1832c <ll_priv_mode_set+0x30>
		return BT_HCI_ERR_CMD_DISALLOWED;
   18340:	200c      	movs	r0, #12
   18342:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   18344:	2002      	movs	r0, #2
   18346:	bd38      	pop	{r3, r4, r5, pc}
   18348:	20001f9c 	.word	0x20001f9c

0001834c <ll_filter_reset>:

#endif /* CONFIG_BT_CTLR_PRIVACY */

void ll_filter_reset(bool init)
{
	wl_anon = 0;
   1834c:	4a19      	ldr	r2, [pc, #100]	; (183b4 <ll_filter_reset+0x68>)
   1834e:	2300      	movs	r3, #0
{
   18350:	b430      	push	{r4, r5}
	wl_anon = 0;
   18352:	7013      	strb	r3, [r2, #0]
		wl[i].taken = 0;
   18354:	4a18      	ldr	r2, [pc, #96]	; (183b8 <ll_filter_reset+0x6c>)
   18356:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   1835a:	f36f 0100 	bfc	r1, #0, #1
   1835e:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   18362:	3301      	adds	r3, #1
   18364:	2b08      	cmp	r3, #8
   18366:	d1f6      	bne.n	18356 <ll_filter_reset+0xa>

#if defined(CONFIG_BT_CTLR_PRIVACY)
	wl_clear();

	rl_enable = 0;
   18368:	4a14      	ldr	r2, [pc, #80]	; (183bc <ll_filter_reset+0x70>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   1836a:	4915      	ldr	r1, [pc, #84]	; (183c0 <ll_filter_reset+0x74>)
	rl_enable = 0;
   1836c:	2300      	movs	r3, #0
   1836e:	7013      	strb	r3, [r2, #0]
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   18370:	4a14      	ldr	r2, [pc, #80]	; (183c4 <ll_filter_reset+0x78>)
   18372:	6011      	str	r1, [r2, #0]
	rpa_last_ms = -1;
   18374:	4a14      	ldr	r2, [pc, #80]	; (183c8 <ll_filter_reset+0x7c>)
		rl[i].taken = 0;
   18376:	4915      	ldr	r1, [pc, #84]	; (183cc <ll_filter_reset+0x80>)
	rpa_last_ms = -1;
   18378:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1837c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   18380:	e9c2 4500 	strd	r4, r5, [r2]
		rl[i].taken = 0;
   18384:	2528      	movs	r5, #40	; 0x28
   18386:	fb05 f203 	mul.w	r2, r5, r3
   1838a:	3301      	adds	r3, #1
   1838c:	5c8c      	ldrb	r4, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1838e:	2b08      	cmp	r3, #8
		rl[i].taken = 0;
   18390:	f36f 0400 	bfc	r4, #0, #1
   18394:	548c      	strb	r4, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   18396:	d1f6      	bne.n	18386 <ll_filter_reset+0x3a>
	peer_irk_count = 0;
   18398:	4b0d      	ldr	r3, [pc, #52]	; (183d0 <ll_filter_reset+0x84>)
   1839a:	2200      	movs	r2, #0
   1839c:	701a      	strb	r2, [r3, #0]
	rl_clear();
	if (init) {
   1839e:	b120      	cbz	r0, 183aa <ll_filter_reset+0x5e>
		k_delayed_work_init(&rpa_work, rpa_timeout);
   183a0:	490c      	ldr	r1, [pc, #48]	; (183d4 <ll_filter_reset+0x88>)
   183a2:	480d      	ldr	r0, [pc, #52]	; (183d8 <ll_filter_reset+0x8c>)
	}
#else
	filter_clear(&wl_filter);
#endif /* CONFIG_BT_CTLR_PRIVACY */

}
   183a4:	bc30      	pop	{r4, r5}
		k_delayed_work_init(&rpa_work, rpa_timeout);
   183a6:	f009 bf31 	b.w	2220c <k_delayed_work_init>
		k_delayed_work_cancel(&rpa_work);
   183aa:	480b      	ldr	r0, [pc, #44]	; (183d8 <ll_filter_reset+0x8c>)
}
   183ac:	bc30      	pop	{r4, r5}
		k_delayed_work_cancel(&rpa_work);
   183ae:	f009 bf4b 	b.w	22248 <k_delayed_work_cancel>
   183b2:	bf00      	nop
   183b4:	20003300 	.word	0x20003300
   183b8:	2000210f 	.word	0x2000210f
   183bc:	200020dc 	.word	0x200020dc
   183c0:	000dbba0 	.word	0x000dbba0
   183c4:	2000332c 	.word	0x2000332c
   183c8:	200032f8 	.word	0x200032f8
   183cc:	20001f9c 	.word	0x20001f9c
   183d0:	20001f12 	.word	0x20001f12
   183d4:	00017f6d 	.word	0x00017f6d
   183d8:	20003304 	.word	0x20003304

000183dc <cntr_init>:

static u8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   183dc:	4b05      	ldr	r3, [pc, #20]	; (183f4 <cntr_init+0x18>)
   183de:	2200      	movs	r2, #0
   183e0:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	NRF_RTC->EVTENSET = (RTC_EVTENSET_COMPARE0_Msk |
   183e4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
   183e8:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
			     RTC_EVTENSET_COMPARE1_Msk);
	NRF_RTC->INTENSET = (RTC_INTENSET_COMPARE0_Msk |
   183ec:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
   183f0:	4770      	bx	lr
   183f2:	bf00      	nop
   183f4:	4000b000 	.word	0x4000b000

000183f8 <cntr_start>:
#endif
}

u32_t cntr_start(void)
{
	if (_refcount++) {
   183f8:	4a04      	ldr	r2, [pc, #16]	; (1840c <cntr_start+0x14>)
   183fa:	7813      	ldrb	r3, [r2, #0]
   183fc:	1c59      	adds	r1, r3, #1
   183fe:	7011      	strb	r1, [r2, #0]
   18400:	2001      	movs	r0, #1
   18402:	b913      	cbnz	r3, 1840a <cntr_start+0x12>
		return 1;
	}

	NRF_RTC->TASKS_START = 1;
   18404:	4a02      	ldr	r2, [pc, #8]	; (18410 <cntr_start+0x18>)
   18406:	6010      	str	r0, [r2, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
   18408:	4618      	mov	r0, r3
}
   1840a:	4770      	bx	lr
   1840c:	20002181 	.word	0x20002181
   18410:	4000b000 	.word	0x4000b000

00018414 <cntr_stop>:

u32_t cntr_stop(void)
{
   18414:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(_refcount);
   18416:	4b0f      	ldr	r3, [pc, #60]	; (18454 <cntr_stop+0x40>)
   18418:	7818      	ldrb	r0, [r3, #0]
   1841a:	b970      	cbnz	r0, 1843a <cntr_stop+0x26>
   1841c:	4b0e      	ldr	r3, [pc, #56]	; (18458 <cntr_stop+0x44>)
   1841e:	9301      	str	r3, [sp, #4]
   18420:	9300      	str	r3, [sp, #0]
   18422:	4a0e      	ldr	r2, [pc, #56]	; (1845c <cntr_stop+0x48>)
   18424:	4b0e      	ldr	r3, [pc, #56]	; (18460 <cntr_stop+0x4c>)
   18426:	490f      	ldr	r1, [pc, #60]	; (18464 <cntr_stop+0x50>)
   18428:	480f      	ldr	r0, [pc, #60]	; (18468 <cntr_stop+0x54>)
   1842a:	f7e9 ff39 	bl	22a0 <printk>
   1842e:	4040      	eors	r0, r0
   18430:	f380 8811 	msr	BASEPRI, r0
   18434:	f04f 0004 	mov.w	r0, #4
   18438:	df02      	svc	2

	if (--_refcount) {
   1843a:	3801      	subs	r0, #1
   1843c:	b2c0      	uxtb	r0, r0
   1843e:	7018      	strb	r0, [r3, #0]
   18440:	2301      	movs	r3, #1
   18442:	b920      	cbnz	r0, 1844e <cntr_stop+0x3a>
		return 1;
	}

	NRF_RTC->TASKS_STOP = 1;
   18444:	4a09      	ldr	r2, [pc, #36]	; (1846c <cntr_stop+0x58>)
   18446:	6053      	str	r3, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
}
   18448:	b003      	add	sp, #12
   1844a:	f85d fb04 	ldr.w	pc, [sp], #4
		return 1;
   1844e:	4618      	mov	r0, r3
   18450:	e7fa      	b.n	18448 <cntr_stop+0x34>
   18452:	bf00      	nop
   18454:	20002181 	.word	0x20002181
   18458:	00023dbe 	.word	0x00023dbe
   1845c:	00022d86 	.word	0x00022d86
   18460:	00027142 	.word	0x00027142
   18464:	000272e8 	.word	0x000272e8
   18468:	0002714c 	.word	0x0002714c
   1846c:	4000b000 	.word	0x4000b000

00018470 <cntr_cnt_get>:

u32_t cntr_cnt_get(void)
{
	return NRF_RTC->COUNTER;
   18470:	4b01      	ldr	r3, [pc, #4]	; (18478 <cntr_cnt_get+0x8>)
   18472:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
}
   18476:	4770      	bx	lr
   18478:	4000b000 	.word	0x4000b000

0001847c <cntr_cmp_set>:

void cntr_cmp_set(u8_t cmp, u32_t value)
{
	NRF_RTC->CC[cmp] = value;
   1847c:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   18480:	4b01      	ldr	r3, [pc, #4]	; (18488 <cntr_cmp_set+0xc>)
   18482:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
   18486:	4770      	bx	lr
   18488:	4000b000 	.word	0x4000b000

0001848c <do_ecb>:
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
	do {
		NRF_ECB->TASKS_STOPECB = 1;
   1848c:	4b11      	ldr	r3, [pc, #68]	; (184d4 <do_ecb+0x48>)
{
   1848e:	b570      	push	{r4, r5, r6, lr}
		NRF_ECB->TASKS_STOPECB = 1;
   18490:	2101      	movs	r1, #1
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
   18492:	2500      	movs	r5, #0
   18494:	461a      	mov	r2, r3
		NRF_ECB->TASKS_STOPECB = 1;
   18496:	6059      	str	r1, [r3, #4]
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
   18498:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   1849c:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   184a0:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
		NRF_ECB->TASKS_STARTECB = 1;
   184a4:	6019      	str	r1, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
		NRF_ECB_regw_sideeffects_TASKS_STARTECB();
#endif
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   184a6:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
   184aa:	b934      	cbnz	r4, 184ba <do_ecb+0x2e>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   184ac:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   184b0:	b91c      	cbnz	r4, 184ba <do_ecb+0x2e>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   184b2:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   184b6:	2c00      	cmp	r4, #0
   184b8:	d1f5      	bne.n	184a6 <do_ecb+0x1a>
			__WFE();
#else
			/*__WFE();*/
#endif
		}
		NRF_ECB->TASKS_STOPECB = 1;
   184ba:	6051      	str	r1, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
#endif
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   184bc:	f8d2 4104 	ldr.w	r4, [r2, #260]	; 0x104
   184c0:	2c00      	cmp	r4, #0
   184c2:	d1e8      	bne.n	18496 <do_ecb+0xa>
   184c4:	f8d2 6504 	ldr.w	r6, [r2, #1284]	; 0x504
   184c8:	2e00      	cmp	r6, #0
   184ca:	d0e4      	beq.n	18496 <do_ecb+0xa>

	NRF_ECB->ECBDATAPTR = 0;
   184cc:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
   184d0:	bd70      	pop	{r4, r5, r6, pc}
   184d2:	bf00      	nop
   184d4:	4000e000 	.word	0x4000e000

000184d8 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
   184d8:	b570      	push	{r4, r5, r6, lr}
   184da:	b08c      	sub	sp, #48	; 0x30
   184dc:	460e      	mov	r6, r1
   184de:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   184e0:	4601      	mov	r1, r0
   184e2:	2210      	movs	r2, #16
   184e4:	4668      	mov	r0, sp
{
   184e6:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   184e8:	f7f3 f9ba 	bl	b860 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   184ec:	2210      	movs	r2, #16
   184ee:	eb0d 0002 	add.w	r0, sp, r2
   184f2:	4631      	mov	r1, r6
   184f4:	f7f3 f9b4 	bl	b860 <mem_rcopy>

	do_ecb(&ecb);
   184f8:	4668      	mov	r0, sp
   184fa:	f7ff ffc7 	bl	1848c <do_ecb>

	if (cipher_text_le) {
   184fe:	b125      	cbz	r5, 1850a <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   18500:	2210      	movs	r2, #16
   18502:	a908      	add	r1, sp, #32
   18504:	4628      	mov	r0, r5
   18506:	f7f3 f9ab 	bl	b860 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   1850a:	b124      	cbz	r4, 18516 <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   1850c:	2210      	movs	r2, #16
   1850e:	a908      	add	r1, sp, #32
   18510:	4620      	mov	r0, r4
   18512:	f7e8 f93e 	bl	792 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   18516:	b00c      	add	sp, #48	; 0x30
   18518:	bd70      	pop	{r4, r5, r6, pc}
	...

0001851c <hal_radio_enable_on_tick_ppi_config_and_enable>:
#define HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX \
	((u32_t)&(NRF_RADIO->TASKS_RXEN))

static inline void hal_radio_enable_on_tick_ppi_config_and_enable(u8_t trx)
{
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_EVT =
   1851c:	4b07      	ldr	r3, [pc, #28]	; (1853c <hal_radio_enable_on_tick_ppi_config_and_enable+0x20>)
   1851e:	4a08      	ldr	r2, [pc, #32]	; (18540 <hal_radio_enable_on_tick_ppi_config_and_enable+0x24>)
   18520:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
		HAL_RADIO_ENABLE_ON_TICK_PPI_EVT;
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
		(trx) ? HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_TX :
   18524:	4907      	ldr	r1, [pc, #28]	; (18544 <hal_radio_enable_on_tick_ppi_config_and_enable+0x28>)
   18526:	4a08      	ldr	r2, [pc, #32]	; (18548 <hal_radio_enable_on_tick_ppi_config_and_enable+0x2c>)
   18528:	2800      	cmp	r0, #0
   1852a:	bf14      	ite	ne
   1852c:	4610      	movne	r0, r2
   1852e:	4608      	moveq	r0, r1
			HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX;
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
   18530:	2201      	movs	r2, #1
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
   18532:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
   18536:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   1853a:	4770      	bx	lr
   1853c:	4001f000 	.word	0x4001f000
   18540:	40008140 	.word	0x40008140
   18544:	40001004 	.word	0x40001004
   18548:	40001000 	.word	0x40001000

0001854c <sw_switch.isra.6>:
}

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
static u8_t sw_tifs_toggle;

static void sw_switch(u8_t dir, u8_t phy_curr, u8_t flags_curr, u8_t phy_next,
   1854c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		      u8_t flags_next)
{
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   18550:	4d75      	ldr	r5, [pc, #468]	; (18728 <sw_switch.isra.6+0x1dc>)
	u8_t cc = SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle);
	u32_t delay;

	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_EVT =
   18552:	4c76      	ldr	r4, [pc, #472]	; (1872c <sw_switch.isra.6+0x1e0>)
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   18554:	782e      	ldrb	r6, [r5, #0]
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_EVT =
   18556:	4b76      	ldr	r3, [pc, #472]	; (18730 <sw_switch.isra.6+0x1e4>)
   18558:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_EVT;
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_TASK =
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(sw_tifs_toggle);
   1855c:	b233      	sxth	r3, r6
   1855e:	ea4f 0ec3 	mov.w	lr, r3, lsl #3
static void sw_switch(u8_t dir, u8_t phy_curr, u8_t flags_curr, u8_t phy_next,
   18562:	4688      	mov	r8, r1
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(sw_tifs_toggle);
   18564:	f10e 4180 	add.w	r1, lr, #1073741824	; 0x40000000
   18568:	f501 31f8 	add.w	r1, r1, #126976	; 0x1f000
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_TASK =
   1856c:	f8c4 1564 	str.w	r1, [r4, #1380]	; 0x564
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   18570:	f106 040b 	add.w	r4, r6, #11
   18574:	b2e4      	uxtb	r4, r4
   18576:	00e4      	lsls	r4, r4, #3

	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi) =
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(cc);
   18578:	496e      	ldr	r1, [pc, #440]	; (18734 <sw_switch.isra.6+0x1e8>)
   1857a:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   1857e:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   18582:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
   18586:	4461      	add	r1, ip
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi) =
   18588:	f8c4 1510 	str.w	r1, [r4, #1296]	; 0x510
   1858c:	f106 0708 	add.w	r7, r6, #8
   18590:	f10e 0e04 	add.w	lr, lr, #4

	if (dir) {
   18594:	2800      	cmp	r0, #0
   18596:	f000 80aa 	beq.w	186ee <sw_switch.isra.6+0x1a2>
	}
}

static inline u32_t hal_radio_tx_ready_delay_ns_get(u8_t phy, u8_t flags)
{
	switch (phy) {
   1859a:	2a02      	cmp	r2, #2
   1859c:	f000 8087 	beq.w	186ae <sw_switch.isra.6+0x162>
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_1M_NS;
   185a0:	f649 70c4 	movw	r0, #40900	; 0x9fc4
   185a4:	f64a 095c 	movw	r9, #43100	; 0xa85c
   185a8:	2a04      	cmp	r2, #4
   185aa:	bf18      	it	ne
   185ac:	4681      	movne	r9, r0
	}
}

static inline u32_t hal_radio_rx_chain_delay_ns_get(u8_t phy, u8_t flags)
{
	switch (phy) {
   185ae:	f1b8 0f02 	cmp.w	r8, #2
   185b2:	d07f      	beq.n	186b4 <sw_switch.isra.6+0x168>
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_NS;
   185b4:	f242 42b8 	movw	r2, #9400	; 0x24b8
   185b8:	f247 2074 	movw	r0, #29300	; 0x7274
   185bc:	f1b8 0f04 	cmp.w	r8, #4
   185c0:	bf18      	it	ne
   185c2:	4610      	movne	r0, r2
   185c4:	f509 79fa 	add.w	r9, r9, #500	; 0x1f4
	((u32_t)&(NRF_RADIO->TASKS_RXEN))


static inline void hal_radio_txen_on_sw_switch(u8_t ppi)
{
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi) =
   185c8:	4a5b      	ldr	r2, [pc, #364]	; (18738 <sw_switch.isra.6+0x1ec>)
   185ca:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514

		hal_radio_txen_on_sw_switch(ppi);

#if defined(CONFIG_BT_CTLR_PHY_CODED)
#if defined(CONFIG_SOC_NRF52840)
		if (phy_curr & BIT(2)) {
   185ce:	f018 0f04 	tst.w	r8, #4
		delay = HAL_RADIO_NS2US_ROUND(
   185d2:	4448      	add	r0, r9
   185d4:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
   185d8:	fbb0 f0fa 	udiv	r0, r0, sl
		if (phy_curr & BIT(2)) {
   185dc:	d06d      	beq.n	186ba <sw_switch.isra.6+0x16e>
   185de:	f242 44b8 	movw	r4, #9400	; 0x24b8
   185e2:	f644 4190 	movw	r1, #19600	; 0x4c90
   185e6:	f1b8 0f04 	cmp.w	r8, #4
   185ea:	bf18      	it	ne
   185ec:	4621      	movne	r1, r4
   185ee:	009c      	lsls	r4, r3, #2
   185f0:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000

			u8_t ppi_en =
			    HAL_SW_SWITCH_RADIO_ENABLE_S2_PPI;
			u8_t cc_s2 =
			    SW_SWITCH_TIMER_EVTS_COMP_S2_BASE;
			u8_t ppi_dis =
   185f4:	b2fa      	uxtb	r2, r7
   185f6:	f504 4710 	add.w	r7, r4, #36864	; 0x9000
				HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(
				    sw_tifs_toggle);
			u32_t delay_s2;

			/* Calculate assuming reception on S2 coding scheme. */
			delay_s2 = HAL_RADIO_NS2US_ROUND(
   185fa:	4449      	add	r1, r9
				hal_radio_tx_ready_delay_ns_get(
					phy_next, flags_next) +
				hal_radio_rx_chain_delay_ns_get(phy_curr, 0));

			SW_SWITCH_TIMER->CC[cc_s2] =
				SW_SWITCH_TIMER->CC[cc];
   185fc:	f8d7 8540 	ldr.w	r8, [r7, #1344]	; 0x540
			SW_SWITCH_TIMER->CC[cc_s2] =
   18600:	4f4e      	ldr	r7, [pc, #312]	; (1873c <sw_switch.isra.6+0x1f0>)
			delay_s2 = HAL_RADIO_NS2US_ROUND(
   18602:	fbb1 f1fa 	udiv	r1, r1, sl
			SW_SWITCH_TIMER->CC[cc_s2] =
   18606:	f8c7 8548 	str.w	r8, [r7, #1352]	; 0x548

			if (delay_s2 < SW_SWITCH_TIMER->CC[cc_s2]) {
   1860a:	f8d7 8548 	ldr.w	r8, [r7, #1352]	; 0x548
   1860e:	4541      	cmp	r1, r8
				SW_SWITCH_TIMER->CC[cc_s2] -= delay_s2;
   18610:	bf36      	itet	cc
   18612:	f8d7 8548 	ldrcc.w	r8, [r7, #1352]	; 0x548
			} else {
				SW_SWITCH_TIMER->CC[cc_s2] = 1;
   18616:	2101      	movcs	r1, #1
				SW_SWITCH_TIMER->CC[cc_s2] -= delay_s2;
   18618:	eba8 0101 	subcc.w	r1, r8, r1
				SW_SWITCH_TIMER->CC[cc_s2] = 1;
   1861c:	f8c7 1548 	str.w	r1, [r7, #1352]	; 0x548
			}

			HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi_en) =
   18620:	4f42      	ldr	r7, [pc, #264]	; (1872c <sw_switch.isra.6+0x1e0>)
   18622:	f8df 8124 	ldr.w	r8, [pc, #292]	; 18748 <sw_switch.isra.6+0x1fc>
				HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(cc_s2);
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi_en) =
   18626:	4944      	ldr	r1, [pc, #272]	; (18738 <sw_switch.isra.6+0x1ec>)
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi_en) =
   18628:	f8c7 8590 	str.w	r8, [r7, #1424]	; 0x590
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi_en) =
   1862c:	f8c7 1594 	str.w	r1, [r7, #1428]	; 0x594
   18630:	f504 31f8 	add.w	r1, r4, #126976	; 0x1f000
				HAL_SW_SWITCH_RADIO_ENABLE_PPI_TASK_TX;

			/* Include PPI for S2 timing in the active group */
			NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(
				sw_tifs_toggle)] |=
   18634:	f8d1 4800 	ldr.w	r4, [r1, #2048]	; 0x800
   18638:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
   1863c:	f8c1 4800 	str.w	r4, [r1, #2048]	; 0x800
   18640:	00d1      	lsls	r1, r2, #3
   18642:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   18646:	f501 31f8 	add.w	r1, r1, #126976	; 0x1f000
			    ppi_dis)	=
			    HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(cc_s2);

			HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
			    ppi_dis) =
			    HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(
   1864a:	f10e 4280 	add.w	r2, lr, #1073741824	; 0x40000000
   1864e:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
			    ppi_dis)	=
   18652:	f8c1 8510 	str.w	r8, [r1, #1296]	; 0x510
			    ppi_dis) =
   18656:	f8c1 2514 	str.w	r2, [r1, #1300]	; 0x514
			    sw_tifs_toggle);

			/* Capture CC to cancel the timer that has assumed
			 * S8 reception, if packet will be received in S2.
			 */
			HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_REGISTER_EVT =
   1865a:	4a39      	ldr	r2, [pc, #228]	; (18740 <sw_switch.isra.6+0x1f4>)
   1865c:	f8c7 2598 	str.w	r2, [r7, #1432]	; 0x598
				HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_EVT;
			HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_REGISTER_TASK =
				HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_TASK(
   18660:	f502 42fd 	add.w	r2, r2, #32384	; 0x7e80
   18664:	3270      	adds	r2, #112	; 0x70
   18666:	4462      	add	r2, ip
			HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_REGISTER_TASK =
   18668:	f8c7 259c 	str.w	r2, [r7, #1436]	; 0x59c
				    sw_tifs_toggle);

			NRF_PPI->CHENSET =
   1866c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   18670:	f8c7 2504 	str.w	r2, [r7, #1284]	; 0x504
   18674:	009b      	lsls	r3, r3, #2
   18676:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1867a:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay <
		SW_SWITCH_TIMER->CC[cc]) {
   1867e:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
	if (delay <
   18682:	4282      	cmp	r2, r0
		SW_SWITCH_TIMER->CC[cc] -= delay;
   18684:	bf8b      	itete	hi
   18686:	f8d3 2540 	ldrhi.w	r2, [r3, #1344]	; 0x540
	} else {
		SW_SWITCH_TIMER->CC[cc] = 1;
   1868a:	2201      	movls	r2, #1
		SW_SWITCH_TIMER->CC[cc] -= delay;
   1868c:	1a10      	subhi	r0, r2, r0
		SW_SWITCH_TIMER->CC[cc] = 1;
   1868e:	f8c3 2540 	strls.w	r2, [r3, #1344]	; 0x540
		SW_SWITCH_TIMER->CC[cc] -= delay;
   18692:	bf88      	it	hi
   18694:	f8c3 0540 	strhi.w	r0, [r3, #1344]	; 0x540
	}

	NRF_PPI->CHENSET =
   18698:	4b24      	ldr	r3, [pc, #144]	; (1872c <sw_switch.isra.6+0x1e0>)
   1869a:	f44f 6290 	mov.w	r2, #1152	; 0x480
   1869e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	 * always need to capture the PDU END time-stamp.
	 */
	radio_tmr_end_capture();
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	sw_tifs_toggle += 1;
   186a2:	1c73      	adds	r3, r6, #1
	sw_tifs_toggle &= 1;
   186a4:	f003 0301 	and.w	r3, r3, #1
   186a8:	702b      	strb	r3, [r5, #0]
   186aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_2M_NS;
   186ae:	f649 4940 	movw	r9, #40000	; 0x9c40
   186b2:	e77c      	b.n	185ae <sw_switch.isra.6+0x62>
	case BIT(1):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_2M_NS;
   186b4:	f241 3088 	movw	r0, #5000	; 0x1388
   186b8:	e784      	b.n	185c4 <sw_switch.isra.6+0x78>
   186ba:	009a      	lsls	r2, r3, #2
   186bc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   186c0:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
				sw_tifs_toggle)] &=
   186c4:	f8d2 4800 	ldr.w	r4, [r2, #2048]	; 0x800
   186c8:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
   186cc:	f8c2 4800 	str.w	r4, [r2, #2048]	; 0x800
   186d0:	b2fa      	uxtb	r2, r7
   186d2:	00d2      	lsls	r2, r2, #3
   186d4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   186d8:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
			    ppi_dis) =
   186dc:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
			    HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(
   186e0:	f10e 4180 	add.w	r1, lr, #1073741824	; 0x40000000
   186e4:	f501 31f8 	add.w	r1, r1, #126976	; 0x1f000
			    ppi_dis) =
   186e8:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
   186ec:	e7c2      	b.n	18674 <sw_switch.isra.6+0x128>
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_TASK_TX;
}

static inline void hal_radio_rxen_on_sw_switch(u8_t ppi)
{
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi) =
   186ee:	4a15      	ldr	r2, [pc, #84]	; (18744 <sw_switch.isra.6+0x1f8>)
   186f0:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
   186f4:	b2fa      	uxtb	r2, r7
   186f6:	00d2      	lsls	r2, r2, #3
   186f8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   186fc:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
		delay = HAL_RADIO_NS2US_CEIL(
   18700:	202c      	movs	r0, #44	; 0x2c
				ppi_dis) =
   18702:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
				HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(
   18706:	f10e 4180 	add.w	r1, lr, #1073741824	; 0x40000000
   1870a:	f501 31f8 	add.w	r1, r1, #126976	; 0x1f000
				ppi_dis) =
   1870e:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
   18712:	f10c 4280 	add.w	r2, ip, #1073741824	; 0x40000000
   18716:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
				sw_tifs_toggle)] &=
   1871a:	f8d2 1800 	ldr.w	r1, [r2, #2048]	; 0x800
   1871e:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
   18722:	f8c2 1800 	str.w	r1, [r2, #2048]	; 0x800
   18726:	e7a5      	b.n	18674 <sw_switch.isra.6+0x128>
   18728:	200023a4 	.word	0x200023a4
   1872c:	4001f000 	.word	0x4001f000
   18730:	4000110c 	.word	0x4000110c
   18734:	40009140 	.word	0x40009140
   18738:	40001000 	.word	0x40001000
   1873c:	40009000 	.word	0x40009000
   18740:	40001150 	.word	0x40001150
   18744:	40001004 	.word	0x40001004
   18748:	40009148 	.word	0x40009148

0001874c <isr_radio>:
	if (sfp_radio_isr) {
   1874c:	4b02      	ldr	r3, [pc, #8]	; (18758 <isr_radio+0xc>)
   1874e:	681b      	ldr	r3, [r3, #0]
   18750:	b103      	cbz	r3, 18754 <isr_radio+0x8>
		sfp_radio_isr();
   18752:	4718      	bx	r3
   18754:	4770      	bx	lr
   18756:	bf00      	nop
   18758:	200023a0 	.word	0x200023a0

0001875c <radio_isr_set>:
	sfp_radio_isr = fp_radio_isr;	/* atomic assignment of 32-bit word */
   1875c:	4b06      	ldr	r3, [pc, #24]	; (18778 <radio_isr_set+0x1c>)
   1875e:	6018      	str	r0, [r3, #0]
	NRF_RADIO->INTENSET = (0 |
   18760:	4b06      	ldr	r3, [pc, #24]	; (1877c <radio_isr_set+0x20>)
   18762:	2210      	movs	r2, #16
   18764:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
   18768:	4b05      	ldr	r3, [pc, #20]	; (18780 <radio_isr_set+0x24>)
   1876a:	2202      	movs	r2, #2
   1876c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
   18770:	2001      	movs	r0, #1
   18772:	f7e9 ba31 	b.w	1bd8 <_arch_irq_enable>
   18776:	bf00      	nop
   18778:	200023a0 	.word	0x200023a0
   1877c:	40001000 	.word	0x40001000
   18780:	e000e100 	.word	0xe000e100

00018784 <radio_setup>:
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   18784:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   18788:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   1878c:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   1878e:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   18792:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   18796:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   1879a:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   1879e:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   187a2:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   187a6:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   187aa:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   187ae:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   187b2:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   187b6:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   187ba:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   187be:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   187c2:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
   187c6:	4770      	bx	lr

000187c8 <radio_reset>:
{
   187c8:	b508      	push	{r3, lr}
	irq_disable(RADIO_IRQn);
   187ca:	2001      	movs	r0, #1
   187cc:	f7e9 fa14 	bl	1bf8 <_arch_irq_disable>
	NRF_RADIO->POWER =
   187d0:	4b08      	ldr	r3, [pc, #32]	; (187f4 <radio_reset+0x2c>)
   187d2:	2200      	movs	r2, #0
   187d4:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	NRF_RADIO->POWER =
   187d8:	2201      	movs	r2, #1
   187da:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
   187de:	4a06      	ldr	r2, [pc, #24]	; (187f8 <radio_reset+0x30>)
   187e0:	6813      	ldr	r3, [r2, #0]
					 0xfffffffe) | 0x01000000;
   187e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   187e6:	f023 0301 	bic.w	r3, r3, #1
   187ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
   187ee:	6013      	str	r3, [r2, #0]
   187f0:	bd08      	pop	{r3, pc}
   187f2:	bf00      	nop
   187f4:	40001000 	.word	0x40001000
   187f8:	40001774 	.word	0x40001774

000187fc <radio_phy_set>:
	switch (phy) {
   187fc:	2802      	cmp	r0, #2
   187fe:	4b14      	ldr	r3, [pc, #80]	; (18850 <radio_phy_set+0x54>)
   18800:	d010      	beq.n	18824 <radio_phy_set+0x28>
   18802:	2804      	cmp	r0, #4
   18804:	d014      	beq.n	18830 <radio_phy_set+0x34>
		*(volatile u32_t *)0x4000173c &= ~0x80000000;
   18806:	681a      	ldr	r2, [r3, #0]
   18808:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
   1880c:	601a      	str	r2, [r3, #0]
		mode = RADIO_MODE_MODE_Ble_1Mbit;
   1880e:	2103      	movs	r1, #3
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   18810:	4b10      	ldr	r3, [pc, #64]	; (18854 <radio_phy_set+0x58>)
   18812:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   18816:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   1881a:	f042 0201 	orr.w	r2, r2, #1
   1881e:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
   18822:	4770      	bx	lr
		*(volatile u32_t *)0x4000173c &= ~0x80000000;
   18824:	681a      	ldr	r2, [r3, #0]
   18826:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
   1882a:	601a      	str	r2, [r3, #0]
		mode = RADIO_MODE_MODE_Ble_2Mbit;
   1882c:	2104      	movs	r1, #4
   1882e:	e7ef      	b.n	18810 <radio_phy_set+0x14>
		*(volatile u32_t *)0x4000173c |= 0x80000000;
   18830:	681a      	ldr	r2, [r3, #0]
   18832:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
   18836:	601a      	str	r2, [r3, #0]
				((*(volatile u32_t *)0x4000173c) & 0xFFFFFF00) |
   18838:	681a      	ldr	r2, [r3, #0]
   1883a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
		if (flags & 0x01) {
   1883e:	f011 0f01 	tst.w	r1, #1
				((*(volatile u32_t *)0x4000173c) & 0xFFFFFF00) |
   18842:	f042 025c 	orr.w	r2, r2, #92	; 0x5c
			mode = RADIO_MODE_MODE_Ble_LR500Kbit;
   18846:	bf14      	ite	ne
   18848:	2105      	movne	r1, #5
   1884a:	2106      	moveq	r1, #6
		*(volatile u32_t *)0x4000173c =
   1884c:	601a      	str	r2, [r3, #0]
   1884e:	e7df      	b.n	18810 <radio_phy_set+0x14>
   18850:	4000173c 	.word	0x4000173c
   18854:	40001000 	.word	0x40001000

00018858 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = power;
   18858:	4b01      	ldr	r3, [pc, #4]	; (18860 <radio_tx_power_set+0x8>)
   1885a:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
   1885e:	4770      	bx	lr
   18860:	40001000 	.word	0x40001000

00018864 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   18864:	4b01      	ldr	r3, [pc, #4]	; (1886c <radio_freq_chan_set+0x8>)
   18866:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
   1886a:	4770      	bx	lr
   1886c:	40001000 	.word	0x40001000

00018870 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   18870:	4b07      	ldr	r3, [pc, #28]	; (18890 <radio_whiten_iv_set+0x20>)
   18872:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   18876:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1887a:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   1887e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   18882:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   18886:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   1888a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
   1888e:	4770      	bx	lr
   18890:	40001000 	.word	0x40001000

00018894 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   18894:	4a0a      	ldr	r2, [pc, #40]	; (188c0 <radio_aa_set+0x2c>)
   18896:	2300      	movs	r3, #0
   18898:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   1889c:	2301      	movs	r3, #1
   1889e:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   188a2:	78c3      	ldrb	r3, [r0, #3]
   188a4:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   188a8:	7843      	ldrb	r3, [r0, #1]
   188aa:	7881      	ldrb	r1, [r0, #2]
   188ac:	041b      	lsls	r3, r3, #16
   188ae:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   188b2:	7801      	ldrb	r1, [r0, #0]
   188b4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   188b8:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
   188bc:	4770      	bx	lr
   188be:	bf00      	nop
   188c0:	40001000 	.word	0x40001000

000188c4 <radio_pkt_configure>:
	u8_t dc = flags & 0x01; /* Adv or Data channel */
   188c4:	f002 0301 	and.w	r3, r2, #1
	switch (phy) {
   188c8:	f3c2 0242 	ubfx	r2, r2, #1, #3
   188cc:	2a02      	cmp	r2, #2
   188ce:	d023      	beq.n	18918 <radio_pkt_configure+0x54>
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
   188d0:	2a04      	cmp	r2, #4
   188d2:	bf0c      	ite	eq
   188d4:	f04f 42c7 	moveq.w	r2, #1669332992	; 0x63800000
   188d8:	2200      	movne	r2, #0
	if (dc) {
   188da:	b10b      	cbz	r3, 188e0 <radio_pkt_configure+0x1c>
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   188dc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   188e0:	f1c0 0308 	rsb	r3, r0, #8
   188e4:	041b      	lsls	r3, r3, #16
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
   188e6:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
   188ea:	f440 7080 	orr.w	r0, r0, #256	; 0x100
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   188ee:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
			    RADIO_PCNF0_S1LEN_Msk) |
   188f2:	4303      	orrs	r3, r0
   188f4:	4313      	orrs	r3, r2
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   188f6:	4a0a      	ldr	r2, [pc, #40]	; (18920 <radio_pkt_configure+0x5c>)
   188f8:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   188fc:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
   18900:	4b08      	ldr	r3, [pc, #32]	; (18924 <radio_pkt_configure+0x60>)
   18902:	4003      	ands	r3, r0
   18904:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((u32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
   18908:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   1890c:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
   18910:	4319      	orrs	r1, r3
   18912:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
   18916:	4770      	bx	lr
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   18918:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   1891c:	e7dd      	b.n	188da <radio_pkt_configure+0x16>
   1891e:	bf00      	nop
   18920:	40001000 	.word	0x40001000
   18924:	fef80000 	.word	0xfef80000

00018928 <radio_pkt_rx_set>:
   18928:	4b01      	ldr	r3, [pc, #4]	; (18930 <radio_pkt_rx_set+0x8>)
   1892a:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   1892e:	4770      	bx	lr
   18930:	40001000 	.word	0x40001000

00018934 <radio_pkt_tx_set>:
	NRF_RADIO->PACKETPTR = (u32_t)tx_packet;
   18934:	4b01      	ldr	r3, [pc, #4]	; (1893c <radio_pkt_tx_set+0x8>)
   18936:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   1893a:	4770      	bx	lr
   1893c:	40001000 	.word	0x40001000

00018940 <radio_tx_ready_delay_get>:
	switch (phy) {
   18940:	2802      	cmp	r0, #2
   18942:	d004      	beq.n	1894e <radio_tx_ready_delay_get+0xe>
   18944:	2804      	cmp	r0, #4
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_1M_US;
   18946:	bf0c      	ite	eq
   18948:	202b      	moveq	r0, #43	; 0x2b
   1894a:	2029      	movne	r0, #41	; 0x29
   1894c:	4770      	bx	lr
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_2M_US;
   1894e:	2028      	movs	r0, #40	; 0x28
}
   18950:	4770      	bx	lr

00018952 <radio_tx_chain_delay_get>:
}
   18952:	2001      	movs	r0, #1
   18954:	4770      	bx	lr

00018956 <radio_rx_ready_delay_get>:
}
   18956:	2029      	movs	r0, #41	; 0x29
   18958:	4770      	bx	lr

0001895a <radio_rx_chain_delay_get>:
	switch (phy) {
   1895a:	2802      	cmp	r0, #2
   1895c:	d003      	beq.n	18966 <radio_rx_chain_delay_get+0xc>
   1895e:	2804      	cmp	r0, #4
   18960:	d003      	beq.n	1896a <radio_rx_chain_delay_get+0x10>
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_US;
   18962:	200a      	movs	r0, #10
}
   18964:	4770      	bx	lr
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_2M_US;
   18966:	2005      	movs	r0, #5
   18968:	4770      	bx	lr
		if (flags & 0x01) {
   1896a:	f011 0f01 	tst.w	r1, #1
			return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_S2_US;
   1896e:	bf14      	ite	ne
   18970:	201e      	movne	r0, #30
   18972:	2014      	moveq	r0, #20
   18974:	4770      	bx	lr
	...

00018978 <radio_rx_enable>:
	NRF_RADIO->TASKS_RXEN = 1;
   18978:	4b01      	ldr	r3, [pc, #4]	; (18980 <radio_rx_enable+0x8>)
   1897a:	2201      	movs	r2, #1
   1897c:	605a      	str	r2, [r3, #4]
   1897e:	4770      	bx	lr
   18980:	40001000 	.word	0x40001000

00018984 <radio_tx_enable>:
	NRF_RADIO->TASKS_TXEN = 1;
   18984:	4b01      	ldr	r3, [pc, #4]	; (1898c <radio_tx_enable+0x8>)
   18986:	2201      	movs	r2, #1
   18988:	601a      	str	r2, [r3, #0]
   1898a:	4770      	bx	lr
   1898c:	40001000 	.word	0x40001000

00018990 <radio_disable>:
	NRF_PPI->CHENCLR = HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
   18990:	4a07      	ldr	r2, [pc, #28]	; (189b0 <radio_disable+0x20>)
   18992:	f44f 6390 	mov.w	r3, #1152	; 0x480
   18996:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	NRF_PPI->TASKS_CHG[SW_SWITCH_TIMER_TASK_GROUP(0)].DIS = 1;
   1899a:	2301      	movs	r3, #1
   1899c:	6053      	str	r3, [r2, #4]
	NRF_PPI->TASKS_CHG[SW_SWITCH_TIMER_TASK_GROUP(1)].DIS = 1;
   1899e:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
   189a0:	f5a2 32f0 	sub.w	r2, r2, #122880	; 0x1e000
   189a4:	2100      	movs	r1, #0
   189a6:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
	NRF_RADIO->TASKS_DISABLE = 1;
   189aa:	6113      	str	r3, [r2, #16]
   189ac:	4770      	bx	lr
   189ae:	bf00      	nop
   189b0:	4001f000 	.word	0x4001f000

000189b4 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   189b4:	4b04      	ldr	r3, [pc, #16]	; (189c8 <radio_status_reset+0x14>)
   189b6:	2200      	movs	r2, #0
   189b8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   189bc:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   189c0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   189c4:	4770      	bx	lr
   189c6:	bf00      	nop
   189c8:	40001000 	.word	0x40001000

000189cc <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   189cc:	4b03      	ldr	r3, [pc, #12]	; (189dc <radio_is_ready+0x10>)
   189ce:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   189d2:	3000      	adds	r0, #0
   189d4:	bf18      	it	ne
   189d6:	2001      	movne	r0, #1
   189d8:	4770      	bx	lr
   189da:	bf00      	nop
   189dc:	40001000 	.word	0x40001000

000189e0 <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
   189e0:	4b03      	ldr	r3, [pc, #12]	; (189f0 <radio_is_done+0x10>)
   189e2:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   189e6:	3000      	adds	r0, #0
   189e8:	bf18      	it	ne
   189ea:	2001      	movne	r0, #1
   189ec:	4770      	bx	lr
   189ee:	bf00      	nop
   189f0:	40001000 	.word	0x40001000

000189f4 <radio_is_idle>:
	return (NRF_RADIO->STATE == 0);
   189f4:	4b03      	ldr	r3, [pc, #12]	; (18a04 <radio_is_idle+0x10>)
   189f6:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   189fa:	fab0 f080 	clz	r0, r0
   189fe:	0940      	lsrs	r0, r0, #5
   18a00:	4770      	bx	lr
   18a02:	bf00      	nop
   18a04:	40001000 	.word	0x40001000

00018a08 <radio_crc_configure>:
	NRF_RADIO->CRCCNF =
   18a08:	4b04      	ldr	r3, [pc, #16]	; (18a1c <radio_crc_configure+0x14>)
   18a0a:	f240 1203 	movw	r2, #259	; 0x103
   18a0e:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_RADIO->CRCPOLY = polynomial;
   18a12:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   18a16:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
   18a1a:	4770      	bx	lr
   18a1c:	40001000 	.word	0x40001000

00018a20 <radio_crc_is_valid>:
	return (NRF_RADIO->CRCSTATUS != 0);
   18a20:	4b03      	ldr	r3, [pc, #12]	; (18a30 <radio_crc_is_valid+0x10>)
   18a22:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   18a26:	3000      	adds	r0, #0
   18a28:	bf18      	it	ne
   18a2a:	2001      	movne	r0, #1
   18a2c:	4770      	bx	lr
   18a2e:	bf00      	nop
   18a30:	40001000 	.word	0x40001000

00018a34 <radio_pkt_empty_get>:
}
   18a34:	4800      	ldr	r0, [pc, #0]	; (18a38 <radio_pkt_empty_get+0x4>)
   18a36:	4770      	bx	lr
   18a38:	20002294 	.word	0x20002294

00018a3c <radio_pkt_scratch_get>:
}
   18a3c:	4800      	ldr	r0, [pc, #0]	; (18a40 <radio_pkt_scratch_get+0x4>)
   18a3e:	4770      	bx	lr
   18a40:	20002298 	.word	0x20002298

00018a44 <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   18a44:	4b04      	ldr	r3, [pc, #16]	; (18a58 <radio_switch_complete_and_rx+0x14>)
   18a46:	2203      	movs	r2, #3
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
   18a48:	2100      	movs	r1, #0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   18a4a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	sw_switch(0, 0, 0, phy_rx, 0);
   18a4e:	4602      	mov	r2, r0
   18a50:	4608      	mov	r0, r1
   18a52:	f7ff bd7b 	b.w	1854c <sw_switch.isra.6>
   18a56:	bf00      	nop
   18a58:	40001000 	.word	0x40001000

00018a5c <radio_switch_complete_and_tx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   18a5c:	4b03      	ldr	r3, [pc, #12]	; (18a6c <radio_switch_complete_and_tx+0x10>)
   18a5e:	2103      	movs	r1, #3
   18a60:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
   18a64:	4601      	mov	r1, r0
   18a66:	2001      	movs	r0, #1
   18a68:	f7ff bd70 	b.w	1854c <sw_switch.isra.6>
   18a6c:	40001000 	.word	0x40001000

00018a70 <radio_switch_complete_and_disable>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
   18a70:	4b05      	ldr	r3, [pc, #20]	; (18a88 <radio_switch_complete_and_disable+0x18>)
   18a72:	2203      	movs	r2, #3
   18a74:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_PPI->CHENCLR = HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
   18a78:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
   18a7c:	f44f 6290 	mov.w	r2, #1152	; 0x480
   18a80:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   18a84:	4770      	bx	lr
   18a86:	bf00      	nop
   18a88:	40001000 	.word	0x40001000

00018a8c <radio_rssi_measure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
   18a8c:	4a03      	ldr	r2, [pc, #12]	; (18a9c <radio_rssi_measure+0x10>)
   18a8e:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   18a92:	f443 7388 	orr.w	r3, r3, #272	; 0x110
   18a96:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
   18a9a:	4770      	bx	lr
   18a9c:	40001000 	.word	0x40001000

00018aa0 <radio_rssi_get>:
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}

u32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
   18aa0:	4b01      	ldr	r3, [pc, #4]	; (18aa8 <radio_rssi_get+0x8>)
   18aa2:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
   18aa6:	4770      	bx	lr
   18aa8:	40001000 	.word	0x40001000

00018aac <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   18aac:	4b02      	ldr	r3, [pc, #8]	; (18ab8 <radio_rssi_status_reset+0xc>)
   18aae:	2200      	movs	r2, #0
   18ab0:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
   18ab4:	4770      	bx	lr
   18ab6:	bf00      	nop
   18ab8:	40001000 	.word	0x40001000

00018abc <radio_rssi_is_ready>:
}

u32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   18abc:	4b03      	ldr	r3, [pc, #12]	; (18acc <radio_rssi_is_ready+0x10>)
   18abe:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   18ac2:	3000      	adds	r0, #0
   18ac4:	bf18      	it	ne
   18ac6:	2001      	movne	r0, #1
   18ac8:	4770      	bx	lr
   18aca:	bf00      	nop
   18acc:	40001000 	.word	0x40001000

00018ad0 <radio_filter_configure>:

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
   18ad0:	b530      	push	{r4, r5, lr}
   18ad2:	2400      	movs	r4, #0
   18ad4:	00a3      	lsls	r3, r4, #2
   18ad6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   18ada:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
	u8_t index;

	for (index = 0; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
   18ade:	6815      	ldr	r5, [r2, #0]
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
   18ae0:	f8c3 5600 	str.w	r5, [r3, #1536]	; 0x600
   18ae4:	3401      	adds	r4, #1
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
   18ae6:	8895      	ldrh	r5, [r2, #4]
   18ae8:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	for (index = 0; index < 8; index++) {
   18aec:	2c08      	cmp	r4, #8
		bdaddr += 6;
   18aee:	f102 0206 	add.w	r2, r2, #6
	for (index = 0; index < 8; index++) {
   18af2:	d1ef      	bne.n	18ad4 <radio_filter_configure+0x4>
	}

	NRF_RADIO->DACNF = ((u32_t)bitmask_addr_type << 8) | bitmask_enable;
   18af4:	4b02      	ldr	r3, [pc, #8]	; (18b00 <radio_filter_configure+0x30>)
   18af6:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
   18afa:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
   18afe:	bd30      	pop	{r4, r5, pc}
   18b00:	40001000 	.word	0x40001000

00018b04 <radio_filter_disable>:
}

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   18b04:	4a03      	ldr	r2, [pc, #12]	; (18b14 <radio_filter_disable+0x10>)
   18b06:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   18b0a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   18b0e:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
   18b12:	4770      	bx	lr
   18b14:	40001000 	.word	0x40001000

00018b18 <radio_filter_status_reset>:
}

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   18b18:	4b02      	ldr	r3, [pc, #8]	; (18b24 <radio_filter_status_reset+0xc>)
   18b1a:	2200      	movs	r2, #0
   18b1c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   18b20:	4770      	bx	lr
   18b22:	bf00      	nop
   18b24:	40001000 	.word	0x40001000

00018b28 <radio_filter_has_match>:
}

u32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   18b28:	4b03      	ldr	r3, [pc, #12]	; (18b38 <radio_filter_has_match+0x10>)
   18b2a:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   18b2e:	3000      	adds	r0, #0
   18b30:	bf18      	it	ne
   18b32:	2001      	movne	r0, #1
   18b34:	4770      	bx	lr
   18b36:	bf00      	nop
   18b38:	40001000 	.word	0x40001000

00018b3c <radio_filter_match_get>:

u32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   18b3c:	4b01      	ldr	r3, [pc, #4]	; (18b44 <radio_filter_match_get+0x8>)
   18b3e:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   18b42:	4770      	bx	lr
   18b44:	40001000 	.word	0x40001000

00018b48 <radio_bc_configure>:

void radio_bc_configure(u32_t n)
{
	NRF_RADIO->BCC = n;
   18b48:	4b04      	ldr	r3, [pc, #16]	; (18b5c <radio_bc_configure+0x14>)
   18b4a:	f8c3 0560 	str.w	r0, [r3, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   18b4e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   18b52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   18b56:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
   18b5a:	4770      	bx	lr
   18b5c:	40001000 	.word	0x40001000

00018b60 <radio_tmr_status_reset>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
}

void radio_tmr_status_reset(void)
{
	NRF_RTC0->EVTENCLR = RTC_EVTENCLR_COMPARE2_Msk;
   18b60:	4b05      	ldr	r3, [pc, #20]	; (18b78 <radio_tmr_status_reset+0x18>)
   18b62:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   18b66:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	NRF_PPI->CHENCLR =
   18b6a:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
   18b6e:	4a03      	ldr	r2, [pc, #12]	; (18b7c <radio_tmr_status_reset+0x1c>)
   18b70:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   18b74:	4770      	bx	lr
   18b76:	bf00      	nop
   18b78:	4000b000 	.word	0x4000b000
   18b7c:	0004207f 	.word	0x0004207f

00018b80 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(u32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	SW_SWITCH_TIMER->CC[SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle)] = tifs;
   18b80:	4b03      	ldr	r3, [pc, #12]	; (18b90 <radio_tmr_tifs_set+0x10>)
   18b82:	4a04      	ldr	r2, [pc, #16]	; (18b94 <radio_tmr_tifs_set+0x14>)
   18b84:	781b      	ldrb	r3, [r3, #0]
   18b86:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   18b8a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
   18b8e:	4770      	bx	lr
   18b90:	200023a4 	.word	0x200023a4
   18b94:	40009000 	.word	0x40009000

00018b98 <radio_tmr_start>:
#endif
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
   18b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   18b9c:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   18ba0:	4c27      	ldr	r4, [pc, #156]	; (18c40 <radio_tmr_start+0xa8>)

#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(EVENT_TIMER_NBR);
#endif

	NRF_RTC0->CC[2] = ticks_start;
   18ba2:	4d28      	ldr	r5, [pc, #160]	; (18c44 <radio_tmr_start+0xac>)
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   18ba4:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   18ba8:	42a3      	cmp	r3, r4
		remainder += 30517578UL;
   18baa:	bf88      	it	hi
   18bac:	f102 72e8 	addhi.w	r2, r2, #30408704	; 0x1d00000
	EVENT_TIMER->TASKS_CLEAR = 1;
   18bb0:	4b25      	ldr	r3, [pc, #148]	; (18c48 <radio_tmr_start+0xb0>)
	remainder /= 1000000UL;
   18bb2:	4c26      	ldr	r4, [pc, #152]	; (18c4c <radio_tmr_start+0xb4>)
		remainder += 30517578UL;
   18bb4:	bf82      	ittt	hi
   18bb6:	f502 32d4 	addhi.w	r2, r2, #108544	; 0x1a800
		ticks_start--;
   18bba:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
		remainder += 30517578UL;
   18bbe:	f502 72a5 	addhi.w	r2, r2, #330	; 0x14a
	EVENT_TIMER->TASKS_CLEAR = 1;
   18bc2:	2601      	movs	r6, #1
	remainder /= 1000000UL;
   18bc4:	fbb2 f4f4 	udiv	r4, r2, r4
	EVENT_TIMER->MODE = 0;
   18bc8:	2700      	movs	r7, #0
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   18bca:	2202      	movs	r2, #2
	EVENT_TIMER->PRESCALER = 4;
   18bcc:	f04f 0804 	mov.w	r8, #4
	EVENT_TIMER->TASKS_CLEAR = 1;
   18bd0:	60de      	str	r6, [r3, #12]
	EVENT_TIMER->MODE = 0;
   18bd2:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	EVENT_TIMER->PRESCALER = 4;
   18bd6:	f8c3 8510 	str.w	r8, [r3, #1296]	; 0x510
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   18bda:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	EVENT_TIMER->CC[0] = remainder;
   18bde:	f8c3 4540 	str.w	r4, [r3, #1344]	; 0x540
	NRF_RTC0->CC[2] = ticks_start;
   18be2:	f8c5 1548 	str.w	r1, [r5, #1352]	; 0x548
	NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE2_Msk;
   18be6:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   18bea:	f8c5 1344 	str.w	r1, [r5, #836]	; 0x344

	HAL_EVENT_TIMER_START_PPI_REGISTER_EVT = HAL_EVENT_TIMER_START_EVT;
   18bee:	f505 35a0 	add.w	r5, r5, #81920	; 0x14000
   18bf2:	4917      	ldr	r1, [pc, #92]	; (18c50 <radio_tmr_start+0xb8>)
   18bf4:	f8c5 1518 	str.w	r1, [r5, #1304]	; 0x518
	HAL_EVENT_TIMER_START_PPI_REGISTER_TASK = HAL_EVENT_TIMER_START_TASK;
   18bf8:	f8c5 351c 	str.w	r3, [r5, #1308]	; 0x51c
	NRF_PPI->CHENSET = HAL_EVENT_TIMER_START_PPI_ENABLE;
   18bfc:	f8c5 2504 	str.w	r2, [r5, #1284]	; 0x504
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects_CHEN();
#endif

	hal_radio_enable_on_tick_ppi_config_and_enable(trx);
   18c00:	f7ff fc8c 	bl	1851c <hal_radio_enable_on_tick_ppi_config_and_enable>
#if !defined(CONFIG_BT_CTLR_TIFS_HW)
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	SW_SWITCH_TIMER->TASKS_CLEAR = 1;
   18c04:	4b13      	ldr	r3, [pc, #76]	; (18c54 <radio_tmr_start+0xbc>)
   18c06:	60de      	str	r6, [r3, #12]
	SW_SWITCH_TIMER->MODE = 0;
   18c08:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   18c0c:	f8c3 8510 	str.w	r8, [r3, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   18c10:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
	SW_SWITCH_TIMER->TASKS_START = 1;
   18c14:	601e      	str	r6, [r3, #0]
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(SW_SWITCH_TIMER_NBR);
	NRF_TIMER_regw_sideeffects_TASKS_START(SW_SWITCH_TIMER_NBR);
#endif
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	HAL_SW_SWITCH_TIMER_CLEAR_PPI_REGISTER_EVT =
   18c16:	f5a3 43fd 	sub.w	r3, r3, #32384	; 0x7e80
   18c1a:	3b74      	subs	r3, #116	; 0x74
   18c1c:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
		HAL_SW_SWITCH_TIMER_CLEAR_PPI_EVT;
	HAL_SW_SWITCH_TIMER_CLEAR_PPI_REGISTER_TASK =
   18c20:	f503 43fe 	add.w	r3, r3, #32512	; 0x7f00
   18c24:	f8c5 354c 	str.w	r3, [r5, #1356]	; 0x54c
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(1)) =
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(1);
#endif /* !CONFIG_BT_CTLR_PHY_CODED || !CONFIG_SOC_NRF52840 */

	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   18c28:	f44f 6310 	mov.w	r3, #2304	; 0x900
   18c2c:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_0_INCLUDE |
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_0_INCLUDE;
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   18c30:	f44f 5390 	mov.w	r3, #4608	; 0x1200
   18c34:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
	NRF_PPI_regw_sideeffects();
#endif
	return remainder;
}
   18c38:	4620      	mov	r0, r4
   18c3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18c3e:	bf00      	nop
   18c40:	7ff0bdbf 	.word	0x7ff0bdbf
   18c44:	4000b000 	.word	0x4000b000
   18c48:	40008000 	.word	0x40008000
   18c4c:	000f4240 	.word	0x000f4240
   18c50:	4000b148 	.word	0x4000b148
   18c54:	40009000 	.word	0x40009000

00018c58 <radio_tmr_stop>:
	return start;
}

void radio_tmr_stop(void)
{
	EVENT_TIMER->TASKS_STOP = 1;
   18c58:	4a04      	ldr	r2, [pc, #16]	; (18c6c <radio_tmr_stop+0x14>)
   18c5a:	2301      	movs	r3, #1
   18c5c:	6053      	str	r3, [r2, #4]
	EVENT_TIMER->TASKS_SHUTDOWN = 1;
   18c5e:	6113      	str	r3, [r2, #16]
	NRF_TIMER_regw_sideeffects_TASKS_STOP(EVENT_TIMER_NBR);
	/* Shutdown not modelled (deprecated) */
#endif

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	SW_SWITCH_TIMER->TASKS_STOP = 1;
   18c60:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   18c64:	6053      	str	r3, [r2, #4]
	SW_SWITCH_TIMER->TASKS_SHUTDOWN = 1;
   18c66:	6113      	str	r3, [r2, #16]
   18c68:	4770      	bx	lr
   18c6a:	bf00      	nop
   18c6c:	40008000 	.word	0x40008000

00018c70 <radio_tmr_hcto_configure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_tmr_hcto_configure(u32_t hcto)
{
	EVENT_TIMER->CC[1] = hcto;
   18c70:	4b0c      	ldr	r3, [pc, #48]	; (18ca4 <radio_tmr_hcto_configure+0x34>)
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_CC(EVENT_TIMER_NBR, 1);
#endif

	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
   18c72:	4a0d      	ldr	r2, [pc, #52]	; (18ca8 <radio_tmr_hcto_configure+0x38>)
	EVENT_TIMER->CC[1] = hcto;
   18c74:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
   18c78:	f503 33b8 	add.w	r3, r3, #94208	; 0x17000
   18c7c:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
   18c80:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   18c84:	3240      	adds	r2, #64	; 0x40
   18c86:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_EVT =
   18c8a:	f502 7280 	add.w	r2, r2, #256	; 0x100
   18c8e:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
		HAL_RADIO_DISABLE_ON_HCTO_PPI_EVT;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_TASK =
   18c92:	f5a2 42e2 	sub.w	r2, r2, #28928	; 0x7100
   18c96:	3a34      	subs	r2, #52	; 0x34
   18c98:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
		HAL_RADIO_DISABLE_ON_HCTO_PPI_TASK;
	NRF_PPI->CHENSET =
   18c9c:	2218      	movs	r2, #24
   18c9e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   18ca2:	4770      	bx	lr
   18ca4:	40008000 	.word	0x40008000
   18ca8:	40001104 	.word	0x40001104

00018cac <radio_tmr_aa_capture>:
#endif
}

void radio_tmr_aa_capture(void)
{
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_EVT =
   18cac:	4b0b      	ldr	r3, [pc, #44]	; (18cdc <radio_tmr_aa_capture+0x30>)
   18cae:	4a0c      	ldr	r2, [pc, #48]	; (18ce0 <radio_tmr_aa_capture+0x34>)
   18cb0:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
		HAL_RADIO_READY_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_TASK =
   18cb4:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   18cb8:	3240      	adds	r2, #64	; 0x40
   18cba:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
		HAL_RADIO_READY_TIME_CAPTURE_PPI_TASK;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
   18cbe:	f5a2 42de 	sub.w	r2, r2, #28416	; 0x6f00
   18cc2:	3a3c      	subs	r2, #60	; 0x3c
   18cc4:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
   18cc8:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   18ccc:	3240      	adds	r2, #64	; 0x40
   18cce:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	NRF_PPI->CHENSET =
   18cd2:	220c      	movs	r2, #12
   18cd4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   18cd8:	4770      	bx	lr
   18cda:	bf00      	nop
   18cdc:	4001f000 	.word	0x4001f000
   18ce0:	40001100 	.word	0x40001100

00018ce4 <radio_tmr_aa_get>:
#endif
}

u32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   18ce4:	4b01      	ldr	r3, [pc, #4]	; (18cec <radio_tmr_aa_get+0x8>)
   18ce6:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   18cea:	4770      	bx	lr
   18cec:	40008000 	.word	0x40008000

00018cf0 <radio_tmr_aa_save>:

static u32_t radio_tmr_aa;

void radio_tmr_aa_save(u32_t aa)
{
	radio_tmr_aa = aa;
   18cf0:	4b01      	ldr	r3, [pc, #4]	; (18cf8 <radio_tmr_aa_save+0x8>)
   18cf2:	6018      	str	r0, [r3, #0]
   18cf4:	4770      	bx	lr
   18cf6:	bf00      	nop
   18cf8:	2000239c 	.word	0x2000239c

00018cfc <radio_tmr_aa_restore>:

u32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
}
   18cfc:	4b01      	ldr	r3, [pc, #4]	; (18d04 <radio_tmr_aa_restore+0x8>)
   18cfe:	6818      	ldr	r0, [r3, #0]
   18d00:	4770      	bx	lr
   18d02:	bf00      	nop
   18d04:	2000239c 	.word	0x2000239c

00018d08 <radio_tmr_ready_get>:

u32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   18d08:	4b01      	ldr	r3, [pc, #4]	; (18d10 <radio_tmr_ready_get+0x8>)
   18d0a:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   18d0e:	4770      	bx	lr
   18d10:	40008000 	.word	0x40008000

00018d14 <radio_tmr_end_capture>:

void radio_tmr_end_capture(void)
{
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_EVT =
   18d14:	4b06      	ldr	r3, [pc, #24]	; (18d30 <radio_tmr_end_capture+0x1c>)
   18d16:	4a07      	ldr	r2, [pc, #28]	; (18d34 <radio_tmr_end_capture+0x20>)
   18d18:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
		HAL_RADIO_END_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_TASK =
   18d1c:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   18d20:	323c      	adds	r2, #60	; 0x3c
   18d22:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
		HAL_RADIO_END_TIME_CAPTURE_PPI_TASK;
	NRF_PPI->CHENSET = HAL_RADIO_END_TIME_CAPTURE_PPI_ENABLE;
   18d26:	2220      	movs	r2, #32
   18d28:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   18d2c:	4770      	bx	lr
   18d2e:	bf00      	nop
   18d30:	4001f000 	.word	0x4001f000
   18d34:	4000110c 	.word	0x4000110c

00018d38 <radio_tmr_end_get>:
   18d38:	4b01      	ldr	r3, [pc, #4]	; (18d40 <radio_tmr_end_get+0x8>)
   18d3a:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   18d3e:	4770      	bx	lr
   18d40:	40008000 	.word	0x40008000

00018d44 <radio_tmr_tifs_base_get>:
u32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   18d44:	4b01      	ldr	r3, [pc, #4]	; (18d4c <radio_tmr_tifs_base_get+0x8>)
   18d46:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

u32_t radio_tmr_tifs_base_get(void)
{
	return radio_tmr_end_get();
}
   18d4a:	4770      	bx	lr
   18d4c:	40008000 	.word	0x40008000

00018d50 <radio_ccm_rx_pkt_set>:
void *radio_ccm_rx_pkt_set(struct ccm *ccm, u8_t phy, void *pkt)
{

	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   18d50:	4b21      	ldr	r3, [pc, #132]	; (18dd8 <radio_ccm_rx_pkt_set+0x88>)
{
   18d52:	b510      	push	{r4, lr}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   18d54:	2400      	movs	r4, #0
   18d56:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   18d5a:	2402      	movs	r4, #2
	/* Enable CCM support for 8-bit length field PDUs. */
	mode |= (CCM_MODE_LENGTH_Extended << CCM_MODE_LENGTH_Pos) &
		CCM_MODE_LENGTH_Msk;

	/* Select CCM data rate based on current PHY in use. */
	switch (phy) {
   18d5c:	42a1      	cmp	r1, r4
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   18d5e:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	switch (phy) {
   18d62:	d003      	beq.n	18d6c <radio_ccm_rx_pkt_set+0x1c>
   18d64:	2904      	cmp	r1, #4
   18d66:	d024      	beq.n	18db2 <radio_ccm_rx_pkt_set+0x62>
	default:
	case BIT(0):
		mode |= (CCM_MODE_DATARATE_1Mbit <<
   18d68:	491c      	ldr	r1, [pc, #112]	; (18ddc <radio_ccm_rx_pkt_set+0x8c>)
   18d6a:	e000      	b.n	18d6e <radio_ccm_rx_pkt_set+0x1e>
			 CCM_MODE_DATARATE_Pos) &
			CCM_MODE_DATARATE_Msk;
		break;

	case BIT(1):
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   18d6c:	491c      	ldr	r1, [pc, #112]	; (18de0 <radio_ccm_rx_pkt_set+0x90>)
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}
#endif /* CONFIG_SOC_SERIES_NRF52X */

	NRF_CCM->MODE = mode;
   18d6e:	4b1a      	ldr	r3, [pc, #104]	; (18dd8 <radio_ccm_rx_pkt_set+0x88>)
   18d70:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
   18d74:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)_pkt_scratch;
   18d78:	481a      	ldr	r0, [pc, #104]	; (18de4 <radio_ccm_rx_pkt_set+0x94>)
   18d7a:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)pkt;
   18d7e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   18d82:	4a19      	ldr	r2, [pc, #100]	; (18de8 <radio_ccm_rx_pkt_set+0x98>)
   18d84:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = 0;
   18d88:	2200      	movs	r2, #0
   18d8a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
	NRF_CCM->EVENTS_ERROR = 0;

	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
   18d8e:	4917      	ldr	r1, [pc, #92]	; (18dec <radio_ccm_rx_pkt_set+0x9c>)
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   18d90:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   18d94:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
   18d98:	4a15      	ldr	r2, [pc, #84]	; (18df0 <radio_ccm_rx_pkt_set+0xa0>)
   18d9a:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	HAL_TRIGGER_CRYPT_PPI_REGISTER_TASK = HAL_TRIGGER_CRYPT_PPI_TASK;
   18d9e:	f501 415f 	add.w	r1, r1, #57088	; 0xdf00
   18da2:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
	NRF_PPI->CHENSET = HAL_TRIGGER_CRYPT_PPI_ENABLE;
   18da6:	2140      	movs	r1, #64	; 0x40
   18da8:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects();
#endif

	NRF_CCM->TASKS_KSGEN = 1;
   18dac:	2201      	movs	r2, #1
   18dae:	601a      	str	r2, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
   18db0:	bd10      	pop	{r4, pc}
		NRF_CCM->RATEOVERRIDE =
   18db2:	2103      	movs	r1, #3
   18db4:	f8c3 151c 	str.w	r1, [r3, #1308]	; 0x51c
		HAL_TRIGGER_RATEOVERRIDE_PPI_REGISTER_EVT =
   18db8:	4b0d      	ldr	r3, [pc, #52]	; (18df0 <radio_ccm_rx_pkt_set+0xa0>)
   18dba:	490e      	ldr	r1, [pc, #56]	; (18df4 <radio_ccm_rx_pkt_set+0xa4>)
   18dbc:	f8c3 1578 	str.w	r1, [r3, #1400]	; 0x578
		HAL_TRIGGER_RATEOVERRIDE_PPI_REGISTER_TASK =
   18dc0:	f501 415e 	add.w	r1, r1, #56832	; 0xde00
   18dc4:	31bc      	adds	r1, #188	; 0xbc
   18dc6:	f8c3 157c 	str.w	r1, [r3, #1404]	; 0x57c
		NRF_PPI->CHENSET = HAL_TRIGGER_RATEOVERRIDE_PPI_ENABLE;
   18dca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   18dce:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
		mode |= (CCM_MODE_DATARATE_125Kbps <<
   18dd2:	4909      	ldr	r1, [pc, #36]	; (18df8 <radio_ccm_rx_pkt_set+0xa8>)
		break;
   18dd4:	e7cb      	b.n	18d6e <radio_ccm_rx_pkt_set+0x1e>
   18dd6:	bf00      	nop
   18dd8:	4000f000 	.word	0x4000f000
   18ddc:	01000001 	.word	0x01000001
   18de0:	01010001 	.word	0x01010001
   18de4:	20002298 	.word	0x20002298
   18de8:	20002188 	.word	0x20002188
   18dec:	40001104 	.word	0x40001104
   18df0:	4001f000 	.word	0x4001f000
   18df4:	40001150 	.word	0x40001150
   18df8:	01020001 	.word	0x01020001

00018dfc <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
   18dfc:	b510      	push	{r4, lr}
	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   18dfe:	4b0e      	ldr	r3, [pc, #56]	; (18e38 <radio_ccm_tx_pkt_set+0x3c>)
   18e00:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   18e02:	2402      	movs	r4, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   18e04:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   18e08:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
   18e0c:	4c0b      	ldr	r4, [pc, #44]	; (18e3c <radio_ccm_tx_pkt_set+0x40>)
   18e0e:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
   18e12:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)pkt;
   18e16:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
   18e1a:	4809      	ldr	r0, [pc, #36]	; (18e40 <radio_ccm_tx_pkt_set+0x44>)
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   18e1c:	4909      	ldr	r1, [pc, #36]	; (18e44 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
   18e1e:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   18e22:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   18e26:	2101      	movs	r1, #1
   18e28:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   18e2c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   18e30:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	NRF_CCM->TASKS_KSGEN = 1;
   18e34:	6019      	str	r1, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
   18e36:	bd10      	pop	{r4, pc}
   18e38:	4000f000 	.word	0x4000f000
   18e3c:	01010000 	.word	0x01010000
   18e40:	20002298 	.word	0x20002298
   18e44:	20002188 	.word	0x20002188

00018e48 <radio_ccm_is_done>:

u32_t radio_ccm_is_done(void)
{
	NRF_CCM->INTENSET = CCM_INTENSET_ENDCRYPT_Msk;
   18e48:	4b0c      	ldr	r3, [pc, #48]	; (18e7c <radio_ccm_is_done+0x34>)
   18e4a:	2202      	movs	r2, #2
   18e4c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENSET();
#endif
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   18e50:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   18e54:	b16a      	cbz	r2, 18e72 <radio_ccm_is_done+0x2a>
		__WFE();
		__SEV();
		__WFE();
	}
	NRF_CCM->INTENCLR = CCM_INTENCLR_ENDCRYPT_Msk;
   18e56:	2202      	movs	r2, #2
   18e58:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   18e5c:	4a08      	ldr	r2, [pc, #32]	; (18e80 <radio_ccm_is_done+0x38>)
   18e5e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   18e62:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENCLR();
#endif
	NVIC_ClearPendingIRQ(CCM_AAR_IRQn);

	return (NRF_CCM->EVENTS_ERROR == 0);
   18e66:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   18e6a:	fab0 f080 	clz	r0, r0
   18e6e:	0940      	lsrs	r0, r0, #5
   18e70:	4770      	bx	lr
		__WFE();
   18e72:	bf20      	wfe
		__SEV();
   18e74:	bf40      	sev
		__WFE();
   18e76:	bf20      	wfe
   18e78:	e7ea      	b.n	18e50 <radio_ccm_is_done+0x8>
   18e7a:	bf00      	nop
   18e7c:	4000f000 	.word	0x4000f000
   18e80:	e000e100 	.word	0xe000e100

00018e84 <radio_ccm_mic_is_valid>:

u32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   18e84:	4b03      	ldr	r3, [pc, #12]	; (18e94 <radio_ccm_mic_is_valid+0x10>)
   18e86:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   18e8a:	3000      	adds	r0, #0
   18e8c:	bf18      	it	ne
   18e8e:	2001      	movne	r0, #1
   18e90:	4770      	bx	lr
   18e92:	bf00      	nop
   18e94:	4000f000 	.word	0x4000f000

00018e98 <radio_ar_configure>:

static u8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(u32_t nirk, void *irk)
{
   18e98:	b538      	push	{r3, r4, r5, lr}
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   18e9a:	4c13      	ldr	r4, [pc, #76]	; (18ee8 <radio_ar_configure+0x50>)
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (u32_t)irk;
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
   18e9c:	4d13      	ldr	r5, [pc, #76]	; (18eec <radio_ar_configure+0x54>)
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   18e9e:	2303      	movs	r3, #3
   18ea0:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	NRF_AAR->NIRK = nirk;
   18ea4:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
	NRF_AAR->IRKPTR = (u32_t)irk;
   18ea8:	f8c4 1508 	str.w	r1, [r4, #1288]	; 0x508
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
   18eac:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504
   18eb0:	3b01      	subs	r3, #1
   18eb2:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];

	NRF_AAR->EVENTS_END = 0;
   18eb6:	2100      	movs	r1, #0
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];
   18eb8:	4b0d      	ldr	r3, [pc, #52]	; (18ef0 <radio_ar_configure+0x58>)
   18eba:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
	NRF_AAR->EVENTS_RESOLVED = 0;
	NRF_AAR->EVENTS_NOTRESOLVED = 0;

	radio_bc_configure(64);
   18ebe:	2040      	movs	r0, #64	; 0x40
	NRF_AAR->EVENTS_END = 0;
   18ec0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   18ec4:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   18ec8:	f8c4 1108 	str.w	r1, [r4, #264]	; 0x108
	radio_bc_configure(64);
   18ecc:	f7ff fe3c 	bl	18b48 <radio_bc_configure>
	radio_bc_status_reset();

	HAL_TRIGGER_AAR_PPI_REGISTER_EVT = HAL_TRIGGER_AAR_PPI_EVT;
   18ed0:	4b08      	ldr	r3, [pc, #32]	; (18ef4 <radio_ar_configure+0x5c>)
   18ed2:	4a09      	ldr	r2, [pc, #36]	; (18ef8 <radio_ar_configure+0x60>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
   18ed4:	f8c5 1128 	str.w	r1, [r5, #296]	; 0x128
	HAL_TRIGGER_AAR_PPI_REGISTER_EVT = HAL_TRIGGER_AAR_PPI_EVT;
   18ed8:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	HAL_TRIGGER_AAR_PPI_REGISTER_TASK = HAL_TRIGGER_AAR_PPI_TASK;
	NRF_PPI->CHENSET = HAL_TRIGGER_AAR_PPI_ENABLE;
   18edc:	2240      	movs	r2, #64	; 0x40
	HAL_TRIGGER_AAR_PPI_REGISTER_TASK = HAL_TRIGGER_AAR_PPI_TASK;
   18ede:	f8c3 4544 	str.w	r4, [r3, #1348]	; 0x544
	NRF_PPI->CHENSET = HAL_TRIGGER_AAR_PPI_ENABLE;
   18ee2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   18ee6:	bd38      	pop	{r3, r4, r5, pc}
   18ee8:	4000f000 	.word	0x4000f000
   18eec:	40001000 	.word	0x40001000
   18ef0:	20002184 	.word	0x20002184
   18ef4:	4001f000 	.word	0x4001f000
   18ef8:	40001128 	.word	0x40001128

00018efc <radio_ar_match_get>:
#endif
}

u32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   18efc:	4b01      	ldr	r3, [pc, #4]	; (18f04 <radio_ar_match_get+0x8>)
   18efe:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   18f02:	4770      	bx	lr
   18f04:	4000f000 	.word	0x4000f000

00018f08 <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
   18f08:	4a04      	ldr	r2, [pc, #16]	; (18f1c <radio_ar_status_reset+0x14>)
   18f0a:	2300      	movs	r3, #0
   18f0c:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

void radio_ar_status_reset(void)
{
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   18f10:	f502 4260 	add.w	r2, r2, #57344	; 0xe000
   18f14:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   18f18:	4770      	bx	lr
   18f1a:	bf00      	nop
   18f1c:	40001000 	.word	0x40001000

00018f20 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   18f20:	4b08      	ldr	r3, [pc, #32]	; (18f44 <radio_ar_has_match+0x24>)
   18f22:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   18f26:	b160      	cbz	r0, 18f42 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   18f28:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   18f2c:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   18f30:	b138      	cbz	r0, 18f42 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   18f32:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   18f36:	b120      	cbz	r0, 18f42 <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   18f38:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   18f3c:	fab0 f080 	clz	r0, r0
   18f40:	0940      	lsrs	r0, r0, #5
}
   18f42:	4770      	bx	lr
   18f44:	40001000 	.word	0x40001000

00018f48 <mayfly_enable_cb>:

void mayfly_enable_cb(u8_t caller_id, u8_t callee_id, u8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   18f48:	2901      	cmp	r1, #1
{
   18f4a:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   18f4c:	d00e      	beq.n	18f6c <mayfly_enable_cb+0x24>
   18f4e:	4b0d      	ldr	r3, [pc, #52]	; (18f84 <mayfly_enable_cb+0x3c>)
   18f50:	9301      	str	r3, [sp, #4]
   18f52:	9300      	str	r3, [sp, #0]
   18f54:	4a0c      	ldr	r2, [pc, #48]	; (18f88 <mayfly_enable_cb+0x40>)
   18f56:	4b0d      	ldr	r3, [pc, #52]	; (18f8c <mayfly_enable_cb+0x44>)
   18f58:	490d      	ldr	r1, [pc, #52]	; (18f90 <mayfly_enable_cb+0x48>)
   18f5a:	480e      	ldr	r0, [pc, #56]	; (18f94 <mayfly_enable_cb+0x4c>)
   18f5c:	f7e9 f9a0 	bl	22a0 <printk>
   18f60:	4040      	eors	r0, r0
   18f62:	f380 8811 	msr	BASEPRI, r0
   18f66:	f04f 0004 	mov.w	r0, #4
   18f6a:	df02      	svc	2

	if (enable) {
		irq_enable(SWI4_IRQn);
   18f6c:	2018      	movs	r0, #24
	if (enable) {
   18f6e:	b122      	cbz	r2, 18f7a <mayfly_enable_cb+0x32>
	} else {
		irq_disable(SWI4_IRQn);
	}
}
   18f70:	b003      	add	sp, #12
   18f72:	f85d eb04 	ldr.w	lr, [sp], #4
		irq_enable(SWI4_IRQn);
   18f76:	f7e8 be2f 	b.w	1bd8 <_arch_irq_enable>
}
   18f7a:	b003      	add	sp, #12
   18f7c:	f85d eb04 	ldr.w	lr, [sp], #4
		irq_disable(SWI4_IRQn);
   18f80:	f7e8 be3a 	b.w	1bf8 <_arch_irq_disable>
   18f84:	00023dbe 	.word	0x00023dbe
   18f88:	00022d86 	.word	0x00022d86
   18f8c:	00027177 	.word	0x00027177
   18f90:	000272e8 	.word	0x000272e8
   18f94:	000271a6 	.word	0x000271a6

00018f98 <mayfly_is_enabled>:

u32_t mayfly_is_enabled(u8_t caller_id, u8_t callee_id)
{
   18f98:	b507      	push	{r0, r1, r2, lr}
	(void)caller_id;

	switch (callee_id) {
   18f9a:	b181      	cbz	r1, 18fbe <mayfly_is_enabled+0x26>
   18f9c:	2901      	cmp	r1, #1
   18f9e:	d014      	beq.n	18fca <mayfly_is_enabled+0x32>

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(SWI4_IRQn);

	default:
		LL_ASSERT(0);
   18fa0:	4b0b      	ldr	r3, [pc, #44]	; (18fd0 <mayfly_is_enabled+0x38>)
   18fa2:	9301      	str	r3, [sp, #4]
   18fa4:	9300      	str	r3, [sp, #0]
   18fa6:	4a0b      	ldr	r2, [pc, #44]	; (18fd4 <mayfly_is_enabled+0x3c>)
   18fa8:	4b0b      	ldr	r3, [pc, #44]	; (18fd8 <mayfly_is_enabled+0x40>)
   18faa:	490c      	ldr	r1, [pc, #48]	; (18fdc <mayfly_is_enabled+0x44>)
   18fac:	480c      	ldr	r0, [pc, #48]	; (18fe0 <mayfly_is_enabled+0x48>)
   18fae:	f7e9 f977 	bl	22a0 <printk>
   18fb2:	4040      	eors	r0, r0
   18fb4:	f380 8811 	msr	BASEPRI, r0
   18fb8:	f04f 0004 	mov.w	r0, #4
   18fbc:	df02      	svc	2
		return irq_is_enabled(RTC0_IRQn);
   18fbe:	200b      	movs	r0, #11
		break;
	}

	return 0;
}
   18fc0:	b003      	add	sp, #12
   18fc2:	f85d eb04 	ldr.w	lr, [sp], #4
		return irq_is_enabled(SWI4_IRQn);
   18fc6:	f7e8 be2b 	b.w	1c20 <_arch_irq_is_enabled>
   18fca:	2018      	movs	r0, #24
   18fcc:	e7f8      	b.n	18fc0 <mayfly_is_enabled+0x28>
   18fce:	bf00      	nop
   18fd0:	00023dbe 	.word	0x00023dbe
   18fd4:	00022d86 	.word	0x00022d86
   18fd8:	00027188 	.word	0x00027188
   18fdc:	000272e8 	.word	0x000272e8
   18fe0:	00023fb5 	.word	0x00023fb5

00018fe4 <mayfly_prio_is_equal>:
u32_t mayfly_prio_is_equal(u8_t caller_id, u8_t callee_id)
{
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
	return (caller_id == callee_id) ||
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   18fe4:	4288      	cmp	r0, r1
   18fe6:	d00a      	beq.n	18ffe <mayfly_prio_is_equal+0x1a>
	return (caller_id == callee_id) ||
   18fe8:	b918      	cbnz	r0, 18ff2 <mayfly_prio_is_equal+0xe>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   18fea:	1e4b      	subs	r3, r1, #1
   18fec:	4258      	negs	r0, r3
   18fee:	4158      	adcs	r0, r3
   18ff0:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   18ff2:	2801      	cmp	r0, #1
   18ff4:	d105      	bne.n	19002 <mayfly_prio_is_equal+0x1e>
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   18ff6:	fab1 f081 	clz	r0, r1
   18ffa:	0940      	lsrs	r0, r0, #5
   18ffc:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   18ffe:	2001      	movs	r0, #1
   19000:	4770      	bx	lr
   19002:	2000      	movs	r0, #0
		(callee_id == MAYFLY_CALL_ID_WORKER));
#else
	/* TODO: check Kconfig set priorities */
	return caller_id == callee_id;
#endif
}
   19004:	4770      	bx	lr
	...

00019008 <mayfly_pend>:

void mayfly_pend(u8_t caller_id, u8_t callee_id)
{
   19008:	b507      	push	{r0, r1, r2, lr}
   1900a:	4b0e      	ldr	r3, [pc, #56]	; (19044 <mayfly_pend+0x3c>)
	(void)caller_id;

	switch (callee_id) {
   1900c:	b181      	cbz	r1, 19030 <mayfly_pend+0x28>
   1900e:	2901      	cmp	r1, #1
   19010:	d015      	beq.n	1903e <mayfly_pend+0x36>
	case MAYFLY_CALL_ID_JOB:
		NVIC_SetPendingIRQ(SWI4_IRQn);
		break;

	default:
		LL_ASSERT(0);
   19012:	4b0d      	ldr	r3, [pc, #52]	; (19048 <mayfly_pend+0x40>)
   19014:	9301      	str	r3, [sp, #4]
   19016:	9300      	str	r3, [sp, #0]
   19018:	4a0c      	ldr	r2, [pc, #48]	; (1904c <mayfly_pend+0x44>)
   1901a:	4b0d      	ldr	r3, [pc, #52]	; (19050 <mayfly_pend+0x48>)
   1901c:	490d      	ldr	r1, [pc, #52]	; (19054 <mayfly_pend+0x4c>)
   1901e:	480e      	ldr	r0, [pc, #56]	; (19058 <mayfly_pend+0x50>)
   19020:	f7e9 f93e 	bl	22a0 <printk>
   19024:	4040      	eors	r0, r0
   19026:	f380 8811 	msr	BASEPRI, r0
   1902a:	f04f 0004 	mov.w	r0, #4
   1902e:	df02      	svc	2
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   19030:	f44f 6200 	mov.w	r2, #2048	; 0x800
   19034:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		break;
	}
}
   19038:	b003      	add	sp, #12
   1903a:	f85d fb04 	ldr.w	pc, [sp], #4
   1903e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   19042:	e7f7      	b.n	19034 <mayfly_pend+0x2c>
   19044:	e000e100 	.word	0xe000e100
   19048:	00023dbe 	.word	0x00023dbe
   1904c:	00022d86 	.word	0x00022d86
   19050:	0002719a 	.word	0x0002719a
   19054:	000272e8 	.word	0x000272e8
   19058:	00023fb5 	.word	0x00023fb5

0001905c <hal_ticker_instance0_caller_id_get>:

u8_t hal_ticker_instance0_caller_id_get(u8_t user_id)
{
	u8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1905c:	2803      	cmp	r0, #3
{
   1905e:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   19060:	d90e      	bls.n	19080 <hal_ticker_instance0_caller_id_get+0x24>
   19062:	4b0e      	ldr	r3, [pc, #56]	; (1909c <hal_ticker_instance0_caller_id_get+0x40>)
   19064:	9301      	str	r3, [sp, #4]
   19066:	9300      	str	r3, [sp, #0]
   19068:	4a0d      	ldr	r2, [pc, #52]	; (190a0 <hal_ticker_instance0_caller_id_get+0x44>)
   1906a:	4b0e      	ldr	r3, [pc, #56]	; (190a4 <hal_ticker_instance0_caller_id_get+0x48>)
   1906c:	490e      	ldr	r1, [pc, #56]	; (190a8 <hal_ticker_instance0_caller_id_get+0x4c>)
   1906e:	480f      	ldr	r0, [pc, #60]	; (190ac <hal_ticker_instance0_caller_id_get+0x50>)

	caller_id = caller_id_lut[user_id];
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   19070:	f7e9 f916 	bl	22a0 <printk>
   19074:	4040      	eors	r0, r0
   19076:	f380 8811 	msr	BASEPRI, r0
   1907a:	f04f 0004 	mov.w	r0, #4
   1907e:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   19080:	4b0b      	ldr	r3, [pc, #44]	; (190b0 <hal_ticker_instance0_caller_id_get+0x54>)
   19082:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   19084:	b938      	cbnz	r0, 19096 <hal_ticker_instance0_caller_id_get+0x3a>
   19086:	4b05      	ldr	r3, [pc, #20]	; (1909c <hal_ticker_instance0_caller_id_get+0x40>)
   19088:	9301      	str	r3, [sp, #4]
   1908a:	9300      	str	r3, [sp, #0]
   1908c:	4a04      	ldr	r2, [pc, #16]	; (190a0 <hal_ticker_instance0_caller_id_get+0x44>)
   1908e:	4b05      	ldr	r3, [pc, #20]	; (190a4 <hal_ticker_instance0_caller_id_get+0x48>)
   19090:	4905      	ldr	r1, [pc, #20]	; (190a8 <hal_ticker_instance0_caller_id_get+0x4c>)
   19092:	4808      	ldr	r0, [pc, #32]	; (190b4 <hal_ticker_instance0_caller_id_get+0x58>)
   19094:	e7ec      	b.n	19070 <hal_ticker_instance0_caller_id_get+0x14>

	return caller_id;
}
   19096:	b003      	add	sp, #12
   19098:	f85d fb04 	ldr.w	pc, [sp], #4
   1909c:	00023dbe 	.word	0x00023dbe
   190a0:	00022d86 	.word	0x00022d86
   190a4:	000271d6 	.word	0x000271d6
   190a8:	000272e8 	.word	0x000272e8
   190ac:	00027218 	.word	0x00027218
   190b0:	00027214 	.word	0x00027214
   190b4:	00027259 	.word	0x00027259

000190b8 <hal_ticker_instance0_sched>:

void hal_ticker_instance0_sched(u8_t caller_id, u8_t callee_id, u8_t chain,
				void *instance)
{
   190b8:	b513      	push	{r0, r1, r4, lr}
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   190ba:	3802      	subs	r0, #2
{
   190bc:	461c      	mov	r4, r3
	switch (caller_id) {
   190be:	2803      	cmp	r0, #3
   190c0:	d818      	bhi.n	190f4 <hal_ticker_instance0_sched+0x3c>
   190c2:	e8df f000 	tbb	[pc, r0]
   190c6:	0d02      	.short	0x0d02
   190c8:	2f13      	.short	0x2f13
	case TICKER_CALL_ID_TRIGGER:
		switch (callee_id) {
   190ca:	2903      	cmp	r1, #3
   190cc:	d112      	bne.n	190f4 <hal_ticker_instance0_sched+0x3c>
		{
			static memq_link_t link;
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_worker};

			m.param = instance;
   190ce:	4b19      	ldr	r3, [pc, #100]	; (19134 <hal_ticker_instance0_sched+0x7c>)

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   190d0:	2100      	movs	r1, #0
			m.param = instance;
   190d2:	609c      	str	r4, [r3, #8]
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_job};

			m.param = instance;

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   190d4:	2000      	movs	r0, #0

	default:
		LL_ASSERT(0);
		break;
	}
}
   190d6:	b002      	add	sp, #8
   190d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   190dc:	f7f2 bc4e 	b.w	b97c <mayfly_enqueue>
		switch (callee_id) {
   190e0:	2904      	cmp	r1, #4
   190e2:	d107      	bne.n	190f4 <hal_ticker_instance0_sched+0x3c>
			m.param = instance;
   190e4:	4b14      	ldr	r3, [pc, #80]	; (19138 <hal_ticker_instance0_sched+0x80>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   190e6:	2101      	movs	r1, #1
			m.param = instance;
   190e8:	609c      	str	r4, [r3, #8]
   190ea:	e7f3      	b.n	190d4 <hal_ticker_instance0_sched+0x1c>
		switch (callee_id) {
   190ec:	2903      	cmp	r1, #3
   190ee:	d010      	beq.n	19112 <hal_ticker_instance0_sched+0x5a>
   190f0:	2904      	cmp	r1, #4
   190f2:	d013      	beq.n	1911c <hal_ticker_instance0_sched+0x64>
		LL_ASSERT(0);
   190f4:	4b11      	ldr	r3, [pc, #68]	; (1913c <hal_ticker_instance0_sched+0x84>)
   190f6:	9301      	str	r3, [sp, #4]
   190f8:	9300      	str	r3, [sp, #0]
   190fa:	4a11      	ldr	r2, [pc, #68]	; (19140 <hal_ticker_instance0_sched+0x88>)
   190fc:	4b11      	ldr	r3, [pc, #68]	; (19144 <hal_ticker_instance0_sched+0x8c>)
   190fe:	4912      	ldr	r1, [pc, #72]	; (19148 <hal_ticker_instance0_sched+0x90>)
   19100:	4812      	ldr	r0, [pc, #72]	; (1914c <hal_ticker_instance0_sched+0x94>)
   19102:	f7e9 f8cd 	bl	22a0 <printk>
   19106:	4040      	eors	r0, r0
   19108:	f380 8811 	msr	BASEPRI, r0
   1910c:	f04f 0004 	mov.w	r0, #4
   19110:	df02      	svc	2
			m.param = instance;
   19112:	4b0f      	ldr	r3, [pc, #60]	; (19150 <hal_ticker_instance0_sched+0x98>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   19114:	2100      	movs	r1, #0
			m.param = instance;
   19116:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   19118:	2001      	movs	r0, #1
   1911a:	e7dc      	b.n	190d6 <hal_ticker_instance0_sched+0x1e>
			m.param = instance;
   1911c:	4b0d      	ldr	r3, [pc, #52]	; (19154 <hal_ticker_instance0_sched+0x9c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1911e:	2101      	movs	r1, #1
			m.param = instance;
   19120:	609c      	str	r4, [r3, #8]
   19122:	e7f9      	b.n	19118 <hal_ticker_instance0_sched+0x60>
		switch (callee_id) {
   19124:	2904      	cmp	r1, #4
   19126:	d1e5      	bne.n	190f4 <hal_ticker_instance0_sched+0x3c>
			m.param = instance;
   19128:	4b0b      	ldr	r3, [pc, #44]	; (19158 <hal_ticker_instance0_sched+0xa0>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1912a:	2101      	movs	r1, #1
			m.param = instance;
   1912c:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1912e:	2003      	movs	r0, #3
   19130:	e7d1      	b.n	190d6 <hal_ticker_instance0_sched+0x1e>
   19132:	bf00      	nop
   19134:	2000a0e8 	.word	0x2000a0e8
   19138:	2000a0f8 	.word	0x2000a0f8
   1913c:	00023dbe 	.word	0x00023dbe
   19140:	00022d86 	.word	0x00022d86
   19144:	000271f9 	.word	0x000271f9
   19148:	000272e8 	.word	0x000272e8
   1914c:	00023fb5 	.word	0x00023fb5
   19150:	2000a108 	.word	0x2000a108
   19154:	2000a118 	.word	0x2000a118
   19158:	2000a128 	.word	0x2000a128

0001915c <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(u32_t value)
{
	cntr_cmp_set(0, value);
   1915c:	4601      	mov	r1, r0
   1915e:	2000      	movs	r0, #0
   19160:	f7ff b98c 	b.w	1847c <cntr_cmp_set>

00019164 <fixed_data_unref>:

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
}

static void fixed_data_unref(struct net_buf *buf, u8_t *data)
{
   19164:	4770      	bx	lr
	...

00019168 <net_buf_pool_get>:
}
   19168:	4b01      	ldr	r3, [pc, #4]	; (19170 <net_buf_pool_get+0x8>)
   1916a:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   1916e:	4770      	bx	lr
   19170:	2000aa3c 	.word	0x2000aa3c

00019174 <net_buf_id>:
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   19174:	7982      	ldrb	r2, [r0, #6]
	return buf - pool->__bufs;
   19176:	4b04      	ldr	r3, [pc, #16]	; (19188 <net_buf_id+0x14>)
   19178:	eb03 1342 	add.w	r3, r3, r2, lsl #5
   1917c:	69db      	ldr	r3, [r3, #28]
   1917e:	1ac0      	subs	r0, r0, r3
}
   19180:	4b02      	ldr	r3, [pc, #8]	; (1918c <net_buf_id+0x18>)
	return buf - pool->__bufs;
   19182:	10c0      	asrs	r0, r0, #3
}
   19184:	4358      	muls	r0, r3
   19186:	4770      	bx	lr
   19188:	2000aa3c 	.word	0x2000aa3c
   1918c:	aaaaaaab 	.word	0xaaaaaaab

00019190 <fixed_data_alloc>:
{
   19190:	b510      	push	{r4, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   19192:	4b09      	ldr	r3, [pc, #36]	; (191b8 <fixed_data_alloc+0x28>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   19194:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   19196:	eb03 1342 	add.w	r3, r3, r2, lsl #5
	*size = min(fixed->data_size, *size);
   1919a:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1919c:	699b      	ldr	r3, [r3, #24]
   1919e:	685c      	ldr	r4, [r3, #4]
	*size = min(fixed->data_size, *size);
   191a0:	6823      	ldr	r3, [r4, #0]
   191a2:	429a      	cmp	r2, r3
   191a4:	bf94      	ite	ls
   191a6:	600a      	strls	r2, [r1, #0]
   191a8:	600b      	strhi	r3, [r1, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   191aa:	f7ff ffe3 	bl	19174 <net_buf_id>
   191ae:	e894 000c 	ldmia.w	r4, {r2, r3}
}
   191b2:	fb02 3000 	mla	r0, r2, r0, r3
   191b6:	bd10      	pop	{r4, pc}
   191b8:	2000aa3c 	.word	0x2000aa3c

000191bc <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  s32_t timeout)
#endif
{
   191bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   191c0:	4605      	mov	r5, r0
   191c2:	9101      	str	r1, [sp, #4]
   191c4:	4616      	mov	r6, r2
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   191c6:	f008 fd73 	bl	21cb0 <_impl_k_uptime_get_32>
   191ca:	4607      	mov	r7, r0
	__asm__ volatile(
   191cc:	f04f 0320 	mov.w	r3, #32
   191d0:	f3ef 8811 	mrs	r8, BASEPRI
   191d4:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   191d8:	8a6b      	ldrh	r3, [r5, #18]
   191da:	2b00      	cmp	r3, #0
   191dc:	d03d      	beq.n	1925a <net_buf_alloc_len+0x9e>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   191de:	8a2a      	ldrh	r2, [r5, #16]
   191e0:	429a      	cmp	r2, r3
   191e2:	d92a      	bls.n	1923a <net_buf_alloc_len+0x7e>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
   191e4:	2100      	movs	r1, #0
   191e6:	4628      	mov	r0, r5
   191e8:	f008 fabd 	bl	21766 <k_queue_get>
			if (buf) {
   191ec:	4604      	mov	r4, r0
   191ee:	b320      	cbz	r0, 1923a <net_buf_alloc_len+0x7e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   191f0:	f388 8811 	msr	BASEPRI, r8
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   191f4:	9b01      	ldr	r3, [sp, #4]
   191f6:	2b00      	cmp	r3, #0
   191f8:	d03c      	beq.n	19274 <net_buf_alloc_len+0xb8>
		if (timeout != K_NO_WAIT && timeout != K_FOREVER) {
   191fa:	1c73      	adds	r3, r6, #1
   191fc:	2b01      	cmp	r3, #1
   191fe:	d906      	bls.n	1920e <net_buf_alloc_len+0x52>
   19200:	f008 fd56 	bl	21cb0 <_impl_k_uptime_get_32>
			u32_t diff = k_uptime_get_32() - alloc_start;
   19204:	1bc0      	subs	r0, r0, r7

			timeout -= min(timeout, diff);
   19206:	42b0      	cmp	r0, r6
   19208:	bf94      	ite	ls
   1920a:	1a36      	subls	r6, r6, r0
   1920c:	1bb6      	subhi	r6, r6, r6
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1920e:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   19210:	4f1e      	ldr	r7, [pc, #120]	; (1928c <net_buf_alloc_len+0xd0>)
   19212:	eb07 1343 	add.w	r3, r7, r3, lsl #5
   19216:	4632      	mov	r2, r6
   19218:	699b      	ldr	r3, [r3, #24]
   1921a:	681b      	ldr	r3, [r3, #0]
   1921c:	a901      	add	r1, sp, #4
   1921e:	681b      	ldr	r3, [r3, #0]
   19220:	4620      	mov	r0, r4
   19222:	4798      	blx	r3
   19224:	4605      	mov	r5, r0
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   19226:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   19228:	bb28      	cbnz	r0, 19276 <net_buf_alloc_len+0xba>
	k_lifo_put(&pool->free, buf);
   1922a:	79a0      	ldrb	r0, [r4, #6]
   1922c:	4621      	mov	r1, r4
   1922e:	eb07 1040 	add.w	r0, r7, r0, lsl #5
   19232:	f008 fa78 	bl	21726 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   19236:	462c      	mov	r4, r5
   19238:	e018      	b.n	1926c <net_buf_alloc_len+0xb0>
		uninit_count = pool->uninit_count--;
   1923a:	8a6b      	ldrh	r3, [r5, #18]
   1923c:	1e5a      	subs	r2, r3, #1
   1923e:	826a      	strh	r2, [r5, #18]
   19240:	f388 8811 	msr	BASEPRI, r8
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   19244:	8a2c      	ldrh	r4, [r5, #16]
   19246:	1ae4      	subs	r4, r4, r3
   19248:	69eb      	ldr	r3, [r5, #28]
   1924a:	2218      	movs	r2, #24
   1924c:	fb02 3404 	mla	r4, r2, r4, r3
	return pool - _net_buf_pool_list;
   19250:	4b0e      	ldr	r3, [pc, #56]	; (1928c <net_buf_alloc_len+0xd0>)
   19252:	1aed      	subs	r5, r5, r3
   19254:	116d      	asrs	r5, r5, #5
	buf->pool_id = pool_id(pool);
   19256:	71a5      	strb	r5, [r4, #6]
		goto success;
   19258:	e7cc      	b.n	191f4 <net_buf_alloc_len+0x38>
   1925a:	f388 8811 	msr	BASEPRI, r8
	buf = k_lifo_get(&pool->free, timeout);
   1925e:	4631      	mov	r1, r6
   19260:	4628      	mov	r0, r5
   19262:	f008 fa80 	bl	21766 <k_queue_get>
	if (!buf) {
   19266:	4604      	mov	r4, r0
   19268:	2800      	cmp	r0, #0
   1926a:	d1c3      	bne.n	191f4 <net_buf_alloc_len+0x38>
	pool->avail_count--;
	NET_BUF_ASSERT(pool->avail_count >= 0);
#endif

	return buf;
}
   1926c:	4620      	mov	r0, r4
   1926e:	b002      	add	sp, #8
   19270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		buf->__buf = NULL;
   19274:	6123      	str	r3, [r4, #16]
	buf->ref   = 1;
   19276:	2301      	movs	r3, #1
   19278:	7123      	strb	r3, [r4, #4]
	buf->flags = 0;
   1927a:	2300      	movs	r3, #0
	buf->frags = NULL;
   1927c:	6023      	str	r3, [r4, #0]
	buf->flags = 0;
   1927e:	7163      	strb	r3, [r4, #5]
	buf->size  = size;
   19280:	9a01      	ldr	r2, [sp, #4]
	buf->len  = 0;
   19282:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
   19284:	6923      	ldr	r3, [r4, #16]
   19286:	81e2      	strh	r2, [r4, #14]
   19288:	60a3      	str	r3, [r4, #8]
	return buf;
   1928a:	e7ef      	b.n	1926c <net_buf_alloc_len+0xb0>
   1928c:	2000aa3c 	.word	0x2000aa3c

00019290 <net_buf_alloc_fixed>:
				       line);
}
#else
struct net_buf *net_buf_alloc_fixed(struct net_buf_pool *pool, s32_t timeout)
{
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   19290:	6983      	ldr	r3, [r0, #24]

	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   19292:	685b      	ldr	r3, [r3, #4]
   19294:	460a      	mov	r2, r1
   19296:	6819      	ldr	r1, [r3, #0]
   19298:	f7ff bf90 	b.w	191bc <net_buf_alloc_len>

0001929c <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, s32_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, s32_t timeout)
#endif
{
   1929c:	b570      	push	{r4, r5, r6, lr}
   1929e:	4606      	mov	r6, r0
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p timeout %d", func, line, fifo, timeout);

	buf = k_fifo_get(fifo, timeout);
   192a0:	f008 fa61 	bl	21766 <k_queue_get>
	if (!buf) {
   192a4:	4605      	mov	r5, r0
   192a6:	b128      	cbz	r0, 192b4 <net_buf_get+0x18>
   192a8:	4604      	mov	r4, r0
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   192aa:	7963      	ldrb	r3, [r4, #5]
   192ac:	f013 0301 	ands.w	r3, r3, #1
   192b0:	d102      	bne.n	192b8 <net_buf_get+0x1c>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   192b2:	6023      	str	r3, [r4, #0]

	return buf;
}
   192b4:	4628      	mov	r0, r5
   192b6:	bd70      	pop	{r4, r5, r6, pc}
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   192b8:	2100      	movs	r1, #0
   192ba:	4630      	mov	r0, r6
   192bc:	f008 fa53 	bl	21766 <k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   192c0:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   192c2:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   192c4:	f023 0301 	bic.w	r3, r3, #1
   192c8:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   192ca:	4604      	mov	r4, r0
   192cc:	e7ed      	b.n	192aa <net_buf_get+0xe>

000192ce <net_buf_simple_reserve>:
{
	NET_BUF_ASSERT(buf);
	NET_BUF_ASSERT(buf->len == 0);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   192ce:	6883      	ldr	r3, [r0, #8]
   192d0:	4419      	add	r1, r3
   192d2:	6001      	str	r1, [r0, #0]
   192d4:	4770      	bx	lr

000192d6 <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   192d6:	b410      	push	{r4}
	struct net_buf *tail;

	NET_BUF_ASSERT(fifo);
	NET_BUF_ASSERT(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
   192d8:	460a      	mov	r2, r1
   192da:	6814      	ldr	r4, [r2, #0]
   192dc:	b914      	cbnz	r4, 192e4 <net_buf_put+0xe>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
}
   192de:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   192e0:	f008 ba25 	b.w	2172e <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   192e4:	7953      	ldrb	r3, [r2, #5]
   192e6:	f043 0301 	orr.w	r3, r3, #1
   192ea:	7153      	strb	r3, [r2, #5]
   192ec:	4622      	mov	r2, r4
   192ee:	e7f4      	b.n	192da <net_buf_put+0x4>

000192f0 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   192f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   192f2:	4d15      	ldr	r5, [pc, #84]	; (19348 <net_buf_unref+0x58>)
   192f4:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   192f6:	2600      	movs	r6, #0
	while (buf) {
   192f8:	b904      	cbnz	r4, 192fc <net_buf_unref+0xc>
   192fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (--buf->ref > 0) {
   192fc:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   192fe:	6827      	ldr	r7, [r4, #0]
		if (--buf->ref > 0) {
   19300:	3b01      	subs	r3, #1
   19302:	b2db      	uxtb	r3, r3
   19304:	7123      	strb	r3, [r4, #4]
   19306:	2b00      	cmp	r3, #0
   19308:	d1f7      	bne.n	192fa <net_buf_unref+0xa>
		if (buf->__buf) {
   1930a:	6921      	ldr	r1, [r4, #16]
   1930c:	b159      	cbz	r1, 19326 <net_buf_unref+0x36>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1930e:	7963      	ldrb	r3, [r4, #5]
   19310:	079b      	lsls	r3, r3, #30
   19312:	d407      	bmi.n	19324 <net_buf_unref+0x34>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   19314:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   19316:	eb05 1343 	add.w	r3, r5, r3, lsl #5
   1931a:	4620      	mov	r0, r4
   1931c:	699b      	ldr	r3, [r3, #24]
   1931e:	681b      	ldr	r3, [r3, #0]
   19320:	689b      	ldr	r3, [r3, #8]
   19322:	4798      	blx	r3
			buf->__buf = NULL;
   19324:	6126      	str	r6, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   19326:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   19328:	60a6      	str	r6, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		pool->avail_count++;
		NET_BUF_ASSERT(pool->avail_count <= pool->buf_count);
#endif

		if (pool->destroy) {
   1932a:	eb05 1340 	add.w	r3, r5, r0, lsl #5
		buf->frags = NULL;
   1932e:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   19330:	695b      	ldr	r3, [r3, #20]
   19332:	b11b      	cbz	r3, 1933c <net_buf_unref+0x4c>
			pool->destroy(buf);
   19334:	4620      	mov	r0, r4
   19336:	4798      	blx	r3
{
   19338:	463c      	mov	r4, r7
   1933a:	e7dd      	b.n	192f8 <net_buf_unref+0x8>
	k_lifo_put(&pool->free, buf);
   1933c:	4621      	mov	r1, r4
   1933e:	eb05 1040 	add.w	r0, r5, r0, lsl #5
   19342:	f008 f9f0 	bl	21726 <k_queue_prepend>
   19346:	e7f7      	b.n	19338 <net_buf_unref+0x48>
   19348:	2000aa3c 	.word	0x2000aa3c

0001934c <net_buf_ref>:
{
	NET_BUF_ASSERT(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1934c:	7903      	ldrb	r3, [r0, #4]
   1934e:	3301      	adds	r3, #1
   19350:	7103      	strb	r3, [r0, #4]
	return buf;
}
   19352:	4770      	bx	lr

00019354 <net_buf_frag_last>:

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
	NET_BUF_ASSERT(buf);

	while (buf->frags) {
   19354:	6803      	ldr	r3, [r0, #0]
   19356:	b903      	cbnz	r3, 1935a <net_buf_frag_last+0x6>
		buf = buf->frags;
	}

	return buf;
}
   19358:	4770      	bx	lr
   1935a:	4618      	mov	r0, r3
   1935c:	e7fa      	b.n	19354 <net_buf_frag_last>

0001935e <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	NET_BUF_ASSERT(parent);
	NET_BUF_ASSERT(frag);

	if (parent->frags) {
   1935e:	6802      	ldr	r2, [r0, #0]
{
   19360:	b510      	push	{r4, lr}
	if (parent->frags) {
   19362:	b11a      	cbz	r2, 1936c <net_buf_frag_insert+0xe>
   19364:	460b      	mov	r3, r1
	while (buf->frags) {
   19366:	681c      	ldr	r4, [r3, #0]
   19368:	b914      	cbnz	r4, 19370 <net_buf_frag_insert+0x12>
		net_buf_frag_last(frag)->frags = parent->frags;
   1936a:	601a      	str	r2, [r3, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1936c:	6001      	str	r1, [r0, #0]
   1936e:	bd10      	pop	{r4, pc}
	while (buf->frags) {
   19370:	4623      	mov	r3, r4
   19372:	e7f8      	b.n	19366 <net_buf_frag_insert+0x8>

00019374 <net_buf_frag_add>:
}

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   19374:	b510      	push	{r4, lr}
	NET_BUF_ASSERT(frag);

	if (!head) {
   19376:	4604      	mov	r4, r0
   19378:	b928      	cbnz	r0, 19386 <net_buf_frag_add+0x12>
	buf->ref++;
   1937a:	790b      	ldrb	r3, [r1, #4]
   1937c:	3301      	adds	r3, #1
   1937e:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   19380:	4608      	mov	r0, r1
   19382:	bd10      	pop	{r4, pc}
	while (buf->frags) {
   19384:	4618      	mov	r0, r3
   19386:	6803      	ldr	r3, [r0, #0]
   19388:	2b00      	cmp	r3, #0
   1938a:	d1fb      	bne.n	19384 <net_buf_frag_add+0x10>
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);
   1938c:	f7ff ffe7 	bl	1935e <net_buf_frag_insert>

	return head;
   19390:	4620      	mov	r0, r4
}
   19392:	bd10      	pop	{r4, pc}

00019394 <net_buf_frag_del>:
				       struct net_buf *frag,
				       const char *func, int line)
#else
struct net_buf *net_buf_frag_del(struct net_buf *parent, struct net_buf *frag)
#endif
{
   19394:	b510      	push	{r4, lr}
	struct net_buf *next_frag;

	NET_BUF_ASSERT(frag);

	if (parent) {
   19396:	b108      	cbz	r0, 1939c <net_buf_frag_del+0x8>
		NET_BUF_ASSERT(parent->frags);
		NET_BUF_ASSERT(parent->frags == frag);
		parent->frags = frag->frags;
   19398:	680b      	ldr	r3, [r1, #0]
   1939a:	6003      	str	r3, [r0, #0]
	}

	next_frag = frag->frags;
   1939c:	680c      	ldr	r4, [r1, #0]

	frag->frags = NULL;
   1939e:	2300      	movs	r3, #0

#if defined(CONFIG_NET_BUF_LOG)
	net_buf_unref_debug(frag, func, line);
#else
	net_buf_unref(frag);
   193a0:	4608      	mov	r0, r1
	frag->frags = NULL;
   193a2:	600b      	str	r3, [r1, #0]
	net_buf_unref(frag);
   193a4:	f7ff ffa4 	bl	192f0 <net_buf_unref>
#endif

	return next_frag;
}
   193a8:	4620      	mov	r0, r4
   193aa:	bd10      	pop	{r4, pc}

000193ac <net_buf_simple_add>:
	return buf->data + buf->len;
   193ac:	8883      	ldrh	r3, [r0, #4]
   193ae:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   193b0:	4419      	add	r1, r3
   193b2:	8081      	strh	r1, [r0, #4]
	return tail;
}
   193b4:	18d0      	adds	r0, r2, r3
   193b6:	4770      	bx	lr

000193b8 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   193b8:	b430      	push	{r4, r5}
   193ba:	8883      	ldrh	r3, [r0, #4]
   193bc:	6804      	ldr	r4, [r0, #0]
	buf->len += len;
   193be:	189d      	adds	r5, r3, r2
   193c0:	8085      	strh	r5, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   193c2:	18e0      	adds	r0, r4, r3
}
   193c4:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   193c6:	f7e7 b9e4 	b.w	792 <memcpy>

000193ca <net_buf_simple_add_u8>:
   193ca:	8883      	ldrh	r3, [r0, #4]
   193cc:	6802      	ldr	r2, [r0, #0]

u8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, u8_t val)
{
   193ce:	b510      	push	{r4, lr}
	buf->len += len;
   193d0:	1c5c      	adds	r4, r3, #1
   193d2:	8084      	strh	r4, [r0, #4]
	u8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   193d4:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   193d6:	18d0      	adds	r0, r2, r3
   193d8:	bd10      	pop	{r4, pc}

000193da <net_buf_simple_add_le16>:

void net_buf_simple_add_le16(struct net_buf_simple *buf, u16_t val)
{
   193da:	b537      	push	{r0, r1, r2, r4, r5, lr}
   193dc:	ab02      	add	r3, sp, #8
   193de:	8884      	ldrh	r4, [r0, #4]
   193e0:	f823 1d02 	strh.w	r1, [r3, #-2]!
   193e4:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   193e6:	1ca2      	adds	r2, r4, #2
   193e8:	8082      	strh	r2, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_le16(val);
	memcpy(net_buf_simple_add(buf, sizeof(val)), &val, sizeof(val));
   193ea:	4619      	mov	r1, r3
   193ec:	2202      	movs	r2, #2
   193ee:	1928      	adds	r0, r5, r4
   193f0:	f7e7 f9cf 	bl	792 <memcpy>
}
   193f4:	b003      	add	sp, #12
   193f6:	bd30      	pop	{r4, r5, pc}

000193f8 <net_buf_simple_add_be16>:

void net_buf_simple_add_be16(struct net_buf_simple *buf, u16_t val)
{
   193f8:	b513      	push	{r0, r1, r4, lr}
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_be16(val);
   193fa:	020b      	lsls	r3, r1, #8
   193fc:	ea43 2311 	orr.w	r3, r3, r1, lsr #8
   19400:	a902      	add	r1, sp, #8
   19402:	6804      	ldr	r4, [r0, #0]
   19404:	f821 3d02 	strh.w	r3, [r1, #-2]!
   19408:	8883      	ldrh	r3, [r0, #4]
	buf->len += len;
   1940a:	1c9a      	adds	r2, r3, #2
   1940c:	8082      	strh	r2, [r0, #4]
	memcpy(net_buf_simple_add(buf, sizeof(val)), &val, sizeof(val));
   1940e:	2202      	movs	r2, #2
   19410:	18e0      	adds	r0, r4, r3
   19412:	f7e7 f9be 	bl	792 <memcpy>
}
   19416:	b002      	add	sp, #8
   19418:	bd10      	pop	{r4, pc}

0001941a <net_buf_simple_push>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   1941a:	6803      	ldr	r3, [r0, #0]
	buf->len += len;
   1941c:	8882      	ldrh	r2, [r0, #4]
	buf->data -= len;
   1941e:	1a5b      	subs	r3, r3, r1
	buf->len += len;
   19420:	4411      	add	r1, r2
	buf->data -= len;
   19422:	6003      	str	r3, [r0, #0]
	buf->len += len;
   19424:	8081      	strh	r1, [r0, #4]
	return buf->data;
}
   19426:	4618      	mov	r0, r3
   19428:	4770      	bx	lr

0001942a <net_buf_simple_push_le16>:

void net_buf_simple_push_le16(struct net_buf_simple *buf, u16_t val)
{
   1942a:	b513      	push	{r0, r1, r4, lr}
   1942c:	ac02      	add	r4, sp, #8
	buf->data -= len;
   1942e:	6803      	ldr	r3, [r0, #0]
	buf->len += len;
   19430:	8882      	ldrh	r2, [r0, #4]
{
   19432:	f824 1d02 	strh.w	r1, [r4, #-2]!
	buf->data -= len;
   19436:	3b02      	subs	r3, #2
	buf->len += len;
   19438:	3202      	adds	r2, #2
	buf->data -= len;
   1943a:	6003      	str	r3, [r0, #0]
	buf->len += len;
   1943c:	8082      	strh	r2, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_le16(val);
	memcpy(net_buf_simple_push(buf, sizeof(val)), &val, sizeof(val));
   1943e:	4621      	mov	r1, r4
   19440:	2202      	movs	r2, #2
   19442:	4618      	mov	r0, r3
   19444:	f7e7 f9a5 	bl	792 <memcpy>
}
   19448:	b002      	add	sp, #8
   1944a:	bd10      	pop	{r4, pc}

0001944c <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
   1944c:	8883      	ldrh	r3, [r0, #4]
   1944e:	1a5b      	subs	r3, r3, r1
   19450:	8083      	strh	r3, [r0, #4]
	return buf->data += len;
   19452:	6803      	ldr	r3, [r0, #0]
   19454:	4419      	add	r1, r3
   19456:	6001      	str	r1, [r0, #0]
}
   19458:	4608      	mov	r0, r1
   1945a:	4770      	bx	lr

0001945c <net_buf_simple_pull_u8>:

u8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   1945c:	b508      	push	{r3, lr}
	u8_t val;

	val = buf->data[0];
   1945e:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
   19460:	2101      	movs	r1, #1
	val = buf->data[0];
   19462:	781a      	ldrb	r2, [r3, #0]
	net_buf_simple_pull(buf, 1);
   19464:	f7ff fff2 	bl	1944c <net_buf_simple_pull>

	return val;
}
   19468:	4610      	mov	r0, r2
   1946a:	bd08      	pop	{r3, pc}

0001946c <net_buf_simple_pull_le16>:

u16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   1946c:	b508      	push	{r3, lr}
	u16_t val;

	val = UNALIGNED_GET((u16_t *)buf->data);
   1946e:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   19470:	2102      	movs	r1, #2
	val = UNALIGNED_GET((u16_t *)buf->data);
   19472:	881a      	ldrh	r2, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   19474:	f7ff ffea 	bl	1944c <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   19478:	4610      	mov	r0, r2
   1947a:	bd08      	pop	{r3, pc}

0001947c <net_buf_simple_headroom>:
	return sys_be32_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1947c:	6802      	ldr	r2, [r0, #0]
   1947e:	6880      	ldr	r0, [r0, #8]
}
   19480:	1a10      	subs	r0, r2, r0
   19482:	4770      	bx	lr

00019484 <net_buf_simple_tailroom>:
	return buf->data - buf->__buf;
   19484:	6802      	ldr	r2, [r0, #0]
   19486:	6881      	ldr	r1, [r0, #8]

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   19488:	88c3      	ldrh	r3, [r0, #6]
   1948a:	8880      	ldrh	r0, [r0, #4]
	return buf->data - buf->__buf;
   1948c:	1a52      	subs	r2, r2, r1
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1948e:	1a9b      	subs	r3, r3, r2
}
   19490:	1a18      	subs	r0, r3, r0
   19492:	4770      	bx	lr

00019494 <sys_get_be32>:
	return ((u16_t)src[0] << 8) | src[1];
   19494:	7803      	ldrb	r3, [r0, #0]
   19496:	7842      	ldrb	r2, [r0, #1]
   19498:	7881      	ldrb	r1, [r0, #2]
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   1949a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	return ((u16_t)src[0] << 8) | src[1];
   1949e:	78c3      	ldrb	r3, [r0, #3]
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   194a0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
}
   194a4:	ea43 4002 	orr.w	r0, r3, r2, lsl #16
   194a8:	4770      	bx	lr

000194aa <net_is_ipv6_addr_unspecified>:
 *
 *  @return True if the address is unspecified, false otherwise.
 */
static inline bool net_is_ipv6_addr_unspecified(const struct in6_addr *addr)
{
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   194aa:	6802      	ldr	r2, [r0, #0]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   194ac:	b942      	cbnz	r2, 194c0 <net_is_ipv6_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   194ae:	6843      	ldr	r3, [r0, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   194b0:	b933      	cbnz	r3, 194c0 <net_is_ipv6_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   194b2:	6882      	ldr	r2, [r0, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   194b4:	b922      	cbnz	r2, 194c0 <net_is_ipv6_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   194b6:	68c0      	ldr	r0, [r0, #12]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   194b8:	fab0 f080 	clz	r0, r0
   194bc:	0940      	lsrs	r0, r0, #5
   194be:	4770      	bx	lr
   194c0:	2000      	movs	r0, #0
   194c2:	4770      	bx	lr

000194c4 <check_used_port>:

static int check_used_port(enum net_ip_protocol ip_proto,
			   u16_t local_port,
			   const struct sockaddr *local_addr)

{
   194c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   194c8:	4c17      	ldr	r4, [pc, #92]	; (19528 <check_used_port+0x64>)
   194ca:	4607      	mov	r7, r0
   194cc:	4688      	mov	r8, r1
   194ce:	4615      	mov	r5, r2
   194d0:	f504 761c 	add.w	r6, r4, #624	; 0x270

		if (local_addr->sa_family == AF_INET6) {
			if (net_ipv6_addr_cmp(
				    net_sin6_ptr(&contexts[i].local)->
							     sin6_addr,
				    &((struct sockaddr_in6 *)
   194d4:	f102 0904 	add.w	r9, r2, #4
   194d8:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
		if (!net_context_is_used(&contexts[i])) {
   194dc:	07da      	lsls	r2, r3, #31
   194de:	d405      	bmi.n	194ec <check_used_port+0x28>
   194e0:	3468      	adds	r4, #104	; 0x68
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   194e2:	42a6      	cmp	r6, r4
   194e4:	d1f8      	bne.n	194d8 <check_used_port+0x14>
				return -EEXIST;
			}
		}
	}

	return 0;
   194e6:	2000      	movs	r0, #0
   194e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
enum net_ip_protocol net_context_get_ip_proto(struct net_context *context)
{
	NET_ASSERT(context);

	if (context->flags & NET_CONTEXT_PROTO) {
		return IPPROTO_TCP;
   194ec:	f013 0f40 	tst.w	r3, #64	; 0x40
   194f0:	bf0c      	ite	eq
   194f2:	2311      	moveq	r3, #17
   194f4:	2306      	movne	r3, #6
		if (!(net_context_get_ip_proto(&contexts[i]) == ip_proto &&
   194f6:	42bb      	cmp	r3, r7
   194f8:	d1f2      	bne.n	194e0 <check_used_port+0x1c>
   194fa:	8963      	ldrh	r3, [r4, #10]
   194fc:	4543      	cmp	r3, r8
   194fe:	d1ef      	bne.n	194e0 <check_used_port+0x1c>
		if (local_addr->sa_family == AF_INET6) {
   19500:	882b      	ldrh	r3, [r5, #0]
   19502:	2b0a      	cmp	r3, #10
   19504:	d10a      	bne.n	1951c <check_used_port+0x58>
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   19506:	2210      	movs	r2, #16
   19508:	4649      	mov	r1, r9
   1950a:	68e0      	ldr	r0, [r4, #12]
   1950c:	f7e7 f914 	bl	738 <memcmp>
			if (net_ipv6_addr_cmp(
   19510:	2800      	cmp	r0, #0
   19512:	d1e5      	bne.n	194e0 <check_used_port+0x1c>
				return -EEXIST;
   19514:	f06f 0010 	mvn.w	r0, #16
   19518:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
   1951c:	68e3      	ldr	r3, [r4, #12]
   1951e:	681a      	ldr	r2, [r3, #0]
   19520:	686b      	ldr	r3, [r5, #4]
			if (net_ipv4_addr_cmp(
   19522:	429a      	cmp	r2, r3
   19524:	d1dc      	bne.n	194e0 <check_used_port+0x1c>
   19526:	e7f5      	b.n	19514 <check_used_port+0x50>
   19528:	200023d0 	.word	0x200023d0

0001952c <find_available_port>:
}

static u16_t find_available_port(struct net_context *context,
				    const struct sockaddr *addr)
{
   1952c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u16_t local_port;

	do {
		local_port = sys_rand32_get() | 0x8000;
   1952e:	4f0c      	ldr	r7, [pc, #48]	; (19560 <find_available_port+0x34>)
{
   19530:	4606      	mov	r6, r0
   19532:	460d      	mov	r5, r1
		local_port = sys_rand32_get() | 0x8000;
   19534:	f7e9 f972 	bl	281c <sys_rand32_get>
	if (context->flags & NET_CONTEXT_PROTO) {
   19538:	f896 305d 	ldrb.w	r3, [r6, #93]	; 0x5d
   1953c:	ea40 0407 	orr.w	r4, r0, r7
   19540:	ba64      	rev16	r4, r4
		return IPPROTO_TCP;
   19542:	f013 0f40 	tst.w	r3, #64	; 0x40
   19546:	b2a4      	uxth	r4, r4
		if (local_port <= 1023) {
			/* 0 - 1023 ports are reserved */
			continue;
		}
	} while (check_used_port(
   19548:	bf0c      	ite	eq
   1954a:	2011      	moveq	r0, #17
   1954c:	2006      	movne	r0, #6
   1954e:	462a      	mov	r2, r5
   19550:	4621      	mov	r1, r4
   19552:	f7ff ffb7 	bl	194c4 <check_used_port>
				net_context_get_ip_proto(context),
				htons(local_port), addr) == -EEXIST);
   19556:	3011      	adds	r0, #17
   19558:	d0ec      	beq.n	19534 <find_available_port+0x8>

	return htons(local_port);
}
   1955a:	4620      	mov	r0, r4
   1955c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1955e:	bf00      	nop
   19560:	ffff8000 	.word	0xffff8000

00019564 <tcp_backlog_find>:
{
   19564:	b570      	push	{r4, r5, r6, lr}
		if (tcp_backlog[i].tcp == NULL && empty < 0) {
   19566:	4c19      	ldr	r4, [pc, #100]	; (195cc <tcp_backlog_find+0x68>)
   19568:	6823      	ldr	r3, [r4, #0]
{
   1956a:	b086      	sub	sp, #24
   1956c:	4605      	mov	r5, r0
   1956e:	460e      	mov	r6, r1
		if (tcp_backlog[i].tcp == NULL && empty < 0) {
   19570:	b143      	cbz	r3, 19584 <tcp_backlog_find+0x20>
#endif
}

static inline u8_t net_pkt_family(struct net_pkt *pkt)
{
	return pkt->family;
   19572:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
		if (net_pkt_family(pkt) != tcp_backlog[i].remote.sa_family) {
   19576:	88a2      	ldrh	r2, [r4, #4]
   19578:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   1957c:	4293      	cmp	r3, r2
   1957e:	d006      	beq.n	1958e <tcp_backlog_find+0x2a>
	int i, empty = -1;
   19580:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	if (empty_slot) {
   19584:	b106      	cbz	r6, 19588 <tcp_backlog_find+0x24>
		*empty_slot = empty;
   19586:	6033      	str	r3, [r6, #0]
	return -EADDRNOTAVAIL;
   19588:	f06f 0030 	mvn.w	r0, #48	; 0x30
   1958c:	e017      	b.n	195be <tcp_backlog_find+0x5a>
		tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   1958e:	a901      	add	r1, sp, #4
   19590:	f006 fee4 	bl	2035c <net_tcp_get_hdr>
		if (!tcp_hdr) {
   19594:	b1a8      	cbz	r0, 195c2 <tcp_backlog_find+0x5e>
   19596:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
		switch (net_pkt_family(pkt)) {
   1959a:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   1959e:	2b0a      	cmp	r3, #10
   195a0:	d112      	bne.n	195c8 <tcp_backlog_find+0x64>
			if (net_sin6(&tcp_backlog[i].remote)->sin6_port !=
   195a2:	88e2      	ldrh	r2, [r4, #6]
   195a4:	8803      	ldrh	r3, [r0, #0]
   195a6:	429a      	cmp	r2, r3
   195a8:	d1ea      	bne.n	19580 <tcp_backlog_find+0x1c>
	return net_buf_frags_len(pkt->frags);
}

static inline u8_t *net_pkt_ip_data(struct net_pkt *pkt)
{
	return pkt->frags->data;
   195aa:	68ab      	ldr	r3, [r5, #8]
				   &NET_IPV6_HDR(pkt)->src,
   195ac:	6899      	ldr	r1, [r3, #8]
			if (memcmp(&net_sin6(&tcp_backlog[i].remote)->sin6_addr,
   195ae:	2210      	movs	r2, #16
   195b0:	3108      	adds	r1, #8
   195b2:	f104 0008 	add.w	r0, r4, #8
   195b6:	f7e7 f8bf 	bl	738 <memcmp>
   195ba:	2800      	cmp	r0, #0
   195bc:	d1e0      	bne.n	19580 <tcp_backlog_find+0x1c>
}
   195be:	b006      	add	sp, #24
   195c0:	bd70      	pop	{r4, r5, r6, pc}
			return -EINVAL;
   195c2:	f06f 0015 	mvn.w	r0, #21
   195c6:	e7fa      	b.n	195be <tcp_backlog_find+0x5a>
	for (i = 0; i < CONFIG_NET_TCP_BACKLOG_SIZE; i++) {
   195c8:	2000      	movs	r0, #0
   195ca:	e7f8      	b.n	195be <tcp_backlog_find+0x5a>
   195cc:	20002658 	.word	0x20002658

000195d0 <send_reset.isra.25>:
	}

	return ret;
}

static int send_reset(struct net_context *context,
   195d0:	b513      	push	{r0, r1, r4, lr}
		      struct sockaddr *local,
		      struct sockaddr *remote)
{
	struct net_pkt *pkt = NULL;
   195d2:	ab02      	add	r3, sp, #8
   195d4:	2400      	movs	r4, #0
   195d6:	f843 4d04 	str.w	r4, [r3, #-4]!
	int ret;

	ret = net_tcp_prepare_reset(context->tcp, local, remote, &pkt);
   195da:	f006 fcf0 	bl	1ffbe <net_tcp_prepare_reset>
	if (ret || !pkt) {
   195de:	4604      	mov	r4, r0
   195e0:	b940      	cbnz	r0, 195f4 <send_reset.isra.25+0x24>
   195e2:	9801      	ldr	r0, [sp, #4]
   195e4:	b130      	cbz	r0, 195f4 <send_reset.isra.25+0x24>
		return ret;
	}

	print_send_info(pkt, "RST");

	ret = net_send_data(pkt);
   195e6:	f000 ffe9 	bl	1a5bc <net_send_data>
	if (ret < 0) {
   195ea:	1e04      	subs	r4, r0, #0
   195ec:	da02      	bge.n	195f4 <send_reset.isra.25+0x24>
		net_pkt_unref(pkt);
   195ee:	9801      	ldr	r0, [sp, #4]
   195f0:	f002 f94d 	bl	1b88e <net_pkt_unref>
	}

	return ret;
}
   195f4:	4620      	mov	r0, r4
   195f6:	b002      	add	sp, #8
   195f8:	bd10      	pop	{r4, pc}

000195fa <backlog_ack_timeout>:
{
   195fa:	b510      	push	{r4, lr}
	send_reset(backlog->tcp->context, NULL, &backlog->remote);
   195fc:	f850 3c28 	ldr.w	r3, [r0, #-40]
   19600:	681b      	ldr	r3, [r3, #0]
   19602:	f1a0 0428 	sub.w	r4, r0, #40	; 0x28
   19606:	f1a0 0224 	sub.w	r2, r0, #36	; 0x24
   1960a:	2100      	movs	r1, #0
   1960c:	6e18      	ldr	r0, [r3, #96]	; 0x60
   1960e:	f7ff ffdf 	bl	195d0 <send_reset.isra.25>
	memset(backlog, 0, sizeof(struct tcp_backlog_entry));
   19612:	4620      	mov	r0, r4
   19614:	2250      	movs	r2, #80	; 0x50
   19616:	2100      	movs	r1, #0
}
   19618:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	memset(backlog, 0, sizeof(struct tcp_backlog_entry));
   1961c:	f7e7 b8e5 	b.w	7ea <memset>

00019620 <send_syn_segment.isra.26>:
static inline int send_syn_segment(struct net_context *context,
   19620:	b570      	push	{r4, r5, r6, lr}
   19622:	b086      	sub	sp, #24
   19624:	4605      	mov	r5, r0
	struct net_pkt *pkt = NULL;
   19626:	a806      	add	r0, sp, #24
   19628:	2400      	movs	r4, #0
   1962a:	f840 4d04 	str.w	r4, [r0, #-4]!
	ret = net_tcp_prepare_segment(context->tcp, flags, NULL, 0,
   1962e:	b2de      	uxtb	r6, r3
   19630:	e88d 0006 	stmia.w	sp, {r1, r2}
   19634:	9002      	str	r0, [sp, #8]
   19636:	4623      	mov	r3, r4
   19638:	4622      	mov	r2, r4
   1963a:	4631      	mov	r1, r6
   1963c:	6828      	ldr	r0, [r5, #0]
   1963e:	f006 fd8d 	bl	2015c <net_tcp_prepare_segment>
	if (ret) {
   19642:	4604      	mov	r4, r0
   19644:	b938      	cbnz	r0, 19656 <send_syn_segment.isra.26+0x36>
	ret = net_send_data(pkt);
   19646:	9805      	ldr	r0, [sp, #20]
   19648:	f000 ffb8 	bl	1a5bc <net_send_data>
	if (ret < 0) {
   1964c:	1e04      	subs	r4, r0, #0
   1964e:	da05      	bge.n	1965c <send_syn_segment.isra.26+0x3c>
		net_pkt_unref(pkt);
   19650:	9805      	ldr	r0, [sp, #20]
   19652:	f002 f91c 	bl	1b88e <net_pkt_unref>
}
   19656:	4620      	mov	r0, r4
   19658:	b006      	add	sp, #24
   1965a:	bd70      	pop	{r4, r5, r6, pc}
	context->tcp->send_seq++;
   1965c:	682a      	ldr	r2, [r5, #0]
   1965e:	f8d2 30b0 	ldr.w	r3, [r2, #176]	; 0xb0
   19662:	3301      	adds	r3, #1
   19664:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
   19668:	e7f5      	b.n	19656 <send_syn_segment.isra.26+0x36>

0001966a <send_ack.isra.27>:
static int send_ack(struct net_context *context,
   1966a:	b513      	push	{r0, r1, r4, lr}
	struct net_pkt *pkt = NULL;
   1966c:	2300      	movs	r3, #0
   1966e:	9301      	str	r3, [sp, #4]
	if (!force && context->tcp->send_ack == context->tcp->sent_ack) {
   19670:	b92a      	cbnz	r2, 1967e <send_ack.isra.27+0x14>
   19672:	f8d0 40b4 	ldr.w	r4, [r0, #180]	; 0xb4
   19676:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   1967a:	429c      	cmp	r4, r3
   1967c:	d00f      	beq.n	1969e <send_ack.isra.27+0x34>
	ret = net_tcp_prepare_ack(context->tcp, remote, &pkt);
   1967e:	aa01      	add	r2, sp, #4
   19680:	f006 fdd8 	bl	20234 <net_tcp_prepare_ack>
	if (ret) {
   19684:	4604      	mov	r4, r0
   19686:	b938      	cbnz	r0, 19698 <send_ack.isra.27+0x2e>
	ret = net_tcp_send_pkt(pkt);
   19688:	9801      	ldr	r0, [sp, #4]
   1968a:	f007 f872 	bl	20772 <net_tcp_send_pkt>
	if (ret < 0) {
   1968e:	1e04      	subs	r4, r0, #0
   19690:	da02      	bge.n	19698 <send_ack.isra.27+0x2e>
		net_pkt_unref(pkt);
   19692:	9801      	ldr	r0, [sp, #4]
   19694:	f002 f8fb 	bl	1b88e <net_pkt_unref>
}
   19698:	4620      	mov	r0, r4
   1969a:	b002      	add	sp, #8
   1969c:	bd10      	pop	{r4, pc}
		return 0;
   1969e:	4614      	mov	r4, r2
   196a0:	e7fa      	b.n	19698 <send_ack.isra.27+0x2e>

000196a2 <set_appdata_values>:

	return sendto(pkt, dst_addr, addrlen, cb, timeout, token, user_data);
}

static void set_appdata_values(struct net_pkt *pkt, enum net_ip_protocol proto)
{
   196a2:	b570      	push	{r4, r5, r6, lr}
   196a4:	6884      	ldr	r4, [r0, #8]
   196a6:	b086      	sub	sp, #24
   196a8:	4605      	mov	r5, r0
	size_t bytes = 0;
   196aa:	2600      	movs	r6, #0
	while (buf) {
   196ac:	bb3c      	cbnz	r4, 196fe <set_appdata_values+0x5c>
	u16_t proto_len = 0;
	struct net_buf *frag;
	u16_t offset;

#if defined(CONFIG_NET_UDP)
	if (proto == IPPROTO_UDP) {
   196ae:	2911      	cmp	r1, #17
   196b0:	d029      	beq.n	19706 <set_appdata_values+0x64>
		proto_len = sizeof(struct net_udp_hdr);
	}
#endif /* CONFIG_NET_UDP */

#if defined(CONFIG_NET_TCP)
	if (proto == IPPROTO_TCP) {
   196b2:	2906      	cmp	r1, #6
   196b4:	d108      	bne.n	196c8 <set_appdata_values+0x26>
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   196b6:	a901      	add	r1, sp, #4
   196b8:	4628      	mov	r0, r5
   196ba:	f006 fe4f 	bl	2035c <net_tcp_get_hdr>
	if (tcp_hdr) {
   196be:	b110      	cbz	r0, 196c6 <set_appdata_values+0x24>
		return NET_TCP_HDR_LEN(tcp_hdr);
   196c0:	7b04      	ldrb	r4, [r0, #12]
   196c2:	0924      	lsrs	r4, r4, #4
   196c4:	00a4      	lsls	r4, r4, #2
		proto_len = tcp_hdr_len(pkt);
   196c6:	b2a4      	uxth	r4, r4
	}
#endif /* CONFIG_NET_TCP */

	frag = net_frag_get_pos(pkt, net_pkt_ip_hdr_len(pkt) +
   196c8:	f895 1035 	ldrb.w	r1, [r5, #53]	; 0x35
				net_pkt_ipv6_ext_len(pkt) +
   196cc:	f895 303f 	ldrb.w	r3, [r5, #63]	; 0x3f
	frag = net_frag_get_pos(pkt, net_pkt_ip_hdr_len(pkt) +
   196d0:	4419      	add	r1, r3
   196d2:	4421      	add	r1, r4
   196d4:	aa01      	add	r2, sp, #4
   196d6:	b289      	uxth	r1, r1
   196d8:	4628      	mov	r0, r5
   196da:	f002 fb1a 	bl	1bd12 <net_frag_get_pos>
				proto_len,
				&offset);
	if (frag) {
   196de:	b120      	cbz	r0, 196ea <set_appdata_values+0x48>
		net_pkt_set_appdata(pkt, frag->data + offset);
   196e0:	6883      	ldr	r3, [r0, #8]
   196e2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   196e6:	4413      	add	r3, r2
	return pkt->appdata;
}

static inline void net_pkt_set_appdata(struct net_pkt *pkt, u8_t *data)
{
	pkt->appdata = data;
   196e8:	61ab      	str	r3, [r5, #24]
	}

	net_pkt_set_appdatalen(pkt, total_len - net_pkt_ip_hdr_len(pkt) -
   196ea:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
   196ee:	1af6      	subs	r6, r6, r3
			       net_pkt_ipv6_ext_len(pkt) - proto_len);
   196f0:	f895 303f 	ldrb.w	r3, [r5, #63]	; 0x3f
	net_pkt_set_appdatalen(pkt, total_len - net_pkt_ip_hdr_len(pkt) -
   196f4:	1af6      	subs	r6, r6, r3
   196f6:	1b34      	subs	r4, r6, r4
	return pkt->appdatalen;
}

static inline void net_pkt_set_appdatalen(struct net_pkt *pkt, u16_t len)
{
	pkt->appdatalen = len;
   196f8:	866c      	strh	r4, [r5, #50]	; 0x32

	NET_ASSERT_INFO(net_pkt_appdatalen(pkt) < total_len,
			"Wrong appdatalen %u, total %zu",
			net_pkt_appdatalen(pkt), total_len);
}
   196fa:	b006      	add	sp, #24
   196fc:	bd70      	pop	{r4, r5, r6, pc}
		bytes += buf->len;
   196fe:	89a3      	ldrh	r3, [r4, #12]
		buf = buf->frags;
   19700:	6824      	ldr	r4, [r4, #0]
		bytes += buf->len;
   19702:	441e      	add	r6, r3
   19704:	e7d2      	b.n	196ac <set_appdata_values+0xa>
		proto_len = sizeof(struct net_udp_hdr);
   19706:	2408      	movs	r4, #8
   19708:	e7de      	b.n	196c8 <set_appdata_values+0x26>
	...

0001970c <packet_received>:

static enum net_verdict packet_received(struct net_conn *conn,
					struct net_pkt *pkt,
					void *user_data)
{
   1970c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19710:	4c20      	ldr	r4, [pc, #128]	; (19794 <packet_received+0x88>)
   19712:	460d      	mov	r5, r1
   19714:	4691      	mov	r9, r2
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   19716:	2600      	movs	r6, #0
   19718:	46a0      	mov	r8, r4
   1971a:	2368      	movs	r3, #104	; 0x68
		if (!net_context_is_used(&contexts[i])) {
   1971c:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
   19720:	07d2      	lsls	r2, r2, #31
   19722:	fb03 f706 	mul.w	r7, r3, r6
   19726:	d502      	bpl.n	1972e <packet_received+0x22>
		if (contexts[i].conn_handler == conn_handler) {
   19728:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1972a:	4290      	cmp	r0, r2
   1972c:	d00b      	beq.n	19746 <packet_received+0x3a>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1972e:	3601      	adds	r6, #1
   19730:	2e06      	cmp	r6, #6
   19732:	f104 0468 	add.w	r4, r4, #104	; 0x68
   19736:	d1f1      	bne.n	1971c <packet_received+0x10>
static inline void net_context_set_iface(struct net_context *context,
					 struct net_if *iface)
{
	NET_ASSERT(iface);

	context->iface = net_if_get_by_iface(iface);
   19738:	6968      	ldr	r0, [r5, #20]
   1973a:	f001 fe83 	bl	1b444 <net_if_get_by_iface>
   1973e:	2300      	movs	r3, #0
   19740:	f883 305c 	strb.w	r3, [r3, #92]	; 0x5c
   19744:	deff      	udf	#255	; 0xff
   19746:	6968      	ldr	r0, [r5, #20]
   19748:	f001 fe7c 	bl	1b444 <net_if_get_by_iface>

	/* If there is no callback registered, then we can only drop
	 * the packet.
	 */

	if (!context->recv_cb) {
   1974c:	eb08 0307 	add.w	r3, r8, r7
   19750:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
	pkt->context = ctx;
   19754:	60ec      	str	r4, [r5, #12]
   19756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   19758:	b1a3      	cbz	r3, 19784 <packet_received+0x78>
	if (context->flags & NET_CONTEXT_PROTO) {
   1975a:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1975e:	065b      	lsls	r3, r3, #25
   19760:	d513      	bpl.n	1978a <packet_received+0x7e>
		net_pkt_appdata(pkt), net_pkt_appdatalen(pkt),
		net_pkt_get_len(pkt));

	net_stats_update_tcp_recv(net_pkt_appdatalen(pkt));

	context->recv_cb(context, pkt, 0, user_data);
   19762:	2368      	movs	r3, #104	; 0x68
   19764:	fb03 8606 	mla	r6, r3, r6, r8
   19768:	2200      	movs	r2, #0
   1976a:	464b      	mov	r3, r9
   1976c:	4629      	mov	r1, r5
   1976e:	4620      	mov	r0, r4
   19770:	6b36      	ldr	r6, [r6, #48]	; 0x30
   19772:	47b0      	blx	r6

#if defined(CONFIG_NET_CONTEXT_SYNC_RECV)
	k_sem_give(&context->recv_data_wait);
   19774:	f107 0044 	add.w	r0, r7, #68	; 0x44
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   19778:	4440      	add	r0, r8
   1977a:	f008 fa1b 	bl	21bb4 <_impl_k_sem_give>
#endif /* CONFIG_NET_CONTEXT_SYNC_RECV */

	return NET_OK;
   1977e:	2000      	movs	r0, #0
   19780:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return NET_DROP;
   19784:	2002      	movs	r0, #2
   19786:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		set_appdata_values(pkt, IPPROTO_UDP);
   1978a:	2111      	movs	r1, #17
   1978c:	4628      	mov	r0, r5
   1978e:	f7ff ff88 	bl	196a2 <set_appdata_values>
   19792:	e7e6      	b.n	19762 <packet_received+0x56>
   19794:	200023d0 	.word	0x200023d0

00019798 <net_context_get>:
	if (family == AF_INET) {
   19798:	2802      	cmp	r0, #2
{
   1979a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1979e:	468a      	mov	sl, r1
   197a0:	4691      	mov	r9, r2
   197a2:	4698      	mov	r8, r3
	if (family == AF_INET) {
   197a4:	f000 808e 	beq.w	198c4 <net_context_get+0x12c>
	if (family != AF_INET && family != AF_INET6) {
   197a8:	280a      	cmp	r0, #10
   197aa:	f040 808e 	bne.w	198ca <net_context_get+0x132>
	if (type != SOCK_DGRAM && type != SOCK_STREAM) {
   197ae:	1e4b      	subs	r3, r1, #1
   197b0:	2b01      	cmp	r3, #1
   197b2:	f200 808d 	bhi.w	198d0 <net_context_get+0x138>
	if (ip_proto != IPPROTO_UDP && ip_proto != IPPROTO_TCP) {
   197b6:	2a11      	cmp	r2, #17
   197b8:	f000 8090 	beq.w	198dc <net_context_get+0x144>
   197bc:	2a06      	cmp	r2, #6
   197be:	f000 8092 	beq.w	198e6 <net_context_get+0x14e>
		return -EPROTONOSUPPORT;
   197c2:	f06f 042a 	mvn.w	r4, #42	; 0x2a
   197c6:	e0ad      	b.n	19924 <net_context_get+0x18c>
		if (ip_proto == IPPROTO_TCP) {
   197c8:	f1b9 0f06 	cmp.w	r9, #6
   197cc:	d118      	bne.n	19800 <net_context_get+0x68>
			contexts[i].tcp = net_tcp_alloc(&contexts[i]);
   197ce:	4620      	mov	r0, r4
   197d0:	f006 fb7a 	bl	1fec8 <net_tcp_alloc>
   197d4:	eb06 0b07 	add.w	fp, r6, r7
   197d8:	f8cb 0060 	str.w	r0, [fp, #96]	; 0x60
			if (!contexts[i].tcp) {
   197dc:	2800      	cmp	r0, #0
   197de:	d06b      	beq.n	198b8 <net_context_get+0x120>
			k_delayed_work_init(&contexts[i].tcp->ack_timer,
   197e0:	4952      	ldr	r1, [pc, #328]	; (1992c <net_context_get+0x194>)
   197e2:	3008      	adds	r0, #8
   197e4:	f008 fd12 	bl	2220c <k_delayed_work_init>
			k_delayed_work_init(&contexts[i].tcp->fin_timer,
   197e8:	f8db 0060 	ldr.w	r0, [fp, #96]	; 0x60
   197ec:	4950      	ldr	r1, [pc, #320]	; (19930 <net_context_get+0x198>)
   197ee:	3030      	adds	r0, #48	; 0x30
   197f0:	f008 fd0c 	bl	2220c <k_delayed_work_init>
			k_delayed_work_init(&contexts[i].tcp->timewait_timer,
   197f4:	f8db 0060 	ldr.w	r0, [fp, #96]	; 0x60
   197f8:	494e      	ldr	r1, [pc, #312]	; (19934 <net_context_get+0x19c>)
   197fa:	3080      	adds	r0, #128	; 0x80
   197fc:	f008 fd06 	bl	2220c <k_delayed_work_init>
		contexts[i].iface = 0;
   19800:	2368      	movs	r3, #104	; 0x68
   19802:	fb03 6305 	mla	r3, r3, r5, r6
   19806:	2200      	movs	r2, #0
   19808:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
		contexts[i].flags = 0;
   1980c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   19810:	19f3      	adds	r3, r6, r7
   19812:	3304      	adds	r3, #4
   19814:	2201      	movs	r2, #1
   19816:	f3bf 8f5b 	dmb	ish
   1981a:	e853 1f00 	ldrex	r1, [r3]
   1981e:	e843 2000 	strex	r0, r2, [r3]
   19822:	2800      	cmp	r0, #0
   19824:	d1f9      	bne.n	1981a <net_context_get+0x82>
   19826:	f3bf 8f5b 	dmb	ish
		context->flags |= NET_CONTEXT_FAMILY;
   1982a:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
	if (type == SOCK_STREAM) {
   1982e:	f1ba 0f01 	cmp.w	sl, #1
		context->flags |= NET_CONTEXT_FAMILY;
   19832:	f043 0210 	orr.w	r2, r3, #16
	context->flags &= ~NET_CONTEXT_TYPE;
   19836:	bf16      	itet	ne
   19838:	f023 0320 	bicne.w	r3, r3, #32
		context->flags |= NET_CONTEXT_TYPE;
   1983c:	f043 0330 	orreq.w	r3, r3, #48	; 0x30
	context->flags &= ~NET_CONTEXT_TYPE;
   19840:	f043 0310 	orrne.w	r3, r3, #16
		context->flags |= NET_CONTEXT_FAMILY;
   19844:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
	context->flags &= ~NET_CONTEXT_TYPE;
   19848:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
   1984c:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
	if (ip_proto == IPPROTO_TCP) {
   19850:	f1b9 0f06 	cmp.w	r9, #6
		context->flags |= NET_CONTEXT_PROTO;
   19854:	bf0c      	ite	eq
   19856:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
	context->flags &= ~NET_CONTEXT_PROTO;
   1985a:	f023 0340 	bicne.w	r3, r3, #64	; 0x40
		memset(&contexts[i].remote, 0, sizeof(struct sockaddr));
   1985e:	f107 0014 	add.w	r0, r7, #20
		memset(&contexts[i].local, 0, sizeof(struct sockaddr_ptr));
   19862:	f107 0908 	add.w	r9, r7, #8
   19866:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
   1986a:	44b1      	add	r9, r6
		memset(&contexts[i].remote, 0, sizeof(struct sockaddr));
   1986c:	2218      	movs	r2, #24
   1986e:	2100      	movs	r1, #0
   19870:	4430      	add	r0, r6
   19872:	f7e6 ffba 	bl	7ea <memset>
		memset(&contexts[i].local, 0, sizeof(struct sockaddr_ptr));
   19876:	220c      	movs	r2, #12
   19878:	2100      	movs	r1, #0
   1987a:	4648      	mov	r0, r9
   1987c:	f7e6 ffb5 	bl	7ea <memset>
			addr6->sin6_port = find_available_port(&contexts[i],
   19880:	4649      	mov	r1, r9
   19882:	4620      	mov	r0, r4
   19884:	f7ff fe52 	bl	1952c <find_available_port>
   19888:	f8a9 0002 	strh.w	r0, [r9, #2]
			if (!addr6->sin6_port) {
   1988c:	b1b8      	cbz	r0, 198be <net_context_get+0x126>
		k_sem_init(&contexts[i].recv_data_wait, 1, UINT_MAX);
   1988e:	f107 0044 	add.w	r0, r7, #68	; 0x44
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   19892:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   19896:	2101      	movs	r1, #1
   19898:	4430      	add	r0, r6
   1989a:	f008 f981 	bl	21ba0 <_impl_k_sem_init>
		contexts[i].flags |= NET_CONTEXT_IN_USE;
   1989e:	2368      	movs	r3, #104	; 0x68
   198a0:	fb03 6505 	mla	r5, r3, r5, r6
   198a4:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
   198a8:	f043 0301 	orr.w	r3, r3, #1
   198ac:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
		*context = &contexts[i];
   198b0:	f8c8 4000 	str.w	r4, [r8]
		ret = 0;
   198b4:	2400      	movs	r4, #0
   198b6:	e032      	b.n	1991e <net_context_get+0x186>
				ret = -ENOBUFS;
   198b8:	f06f 0436 	mvn.w	r4, #54	; 0x36
   198bc:	e02f      	b.n	1991e <net_context_get+0x186>
				ret = -EADDRINUSE;
   198be:	f06f 042f 	mvn.w	r4, #47	; 0x2f
   198c2:	e02c      	b.n	1991e <net_context_get+0x186>
		return -EPFNOSUPPORT;
   198c4:	f06f 042d 	mvn.w	r4, #45	; 0x2d
   198c8:	e02c      	b.n	19924 <net_context_get+0x18c>
		return -EAFNOSUPPORT;
   198ca:	f06f 042e 	mvn.w	r4, #46	; 0x2e
   198ce:	e029      	b.n	19924 <net_context_get+0x18c>
		return -EPROTOTYPE;
   198d0:	f06f 0428 	mvn.w	r4, #40	; 0x28
   198d4:	e026      	b.n	19924 <net_context_get+0x18c>
		return -EINVAL;
   198d6:	f06f 0415 	mvn.w	r4, #21
   198da:	e023      	b.n	19924 <net_context_get+0x18c>
	if ((type == SOCK_STREAM && ip_proto == IPPROTO_UDP) ||
   198dc:	2901      	cmp	r1, #1
   198de:	d104      	bne.n	198ea <net_context_get+0x152>
		return -EOPNOTSUPP;
   198e0:	f06f 042c 	mvn.w	r4, #44	; 0x2c
   198e4:	e01e      	b.n	19924 <net_context_get+0x18c>
	if ((type == SOCK_STREAM && ip_proto == IPPROTO_UDP) ||
   198e6:	2901      	cmp	r1, #1
   198e8:	d1fa      	bne.n	198e0 <net_context_get+0x148>
	if (!context) {
   198ea:	f1b8 0f00 	cmp.w	r8, #0
   198ee:	d0f2      	beq.n	198d6 <net_context_get+0x13e>
   198f0:	4c11      	ldr	r4, [pc, #68]	; (19938 <net_context_get+0x1a0>)
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   198f2:	4812      	ldr	r0, [pc, #72]	; (1993c <net_context_get+0x1a4>)
   198f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   198f8:	f008 f9bc 	bl	21c74 <_impl_k_sem_take>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   198fc:	2500      	movs	r5, #0
   198fe:	4626      	mov	r6, r4
   19900:	2368      	movs	r3, #104	; 0x68
		if (net_context_is_used(&contexts[i])) {
   19902:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
   19906:	07d2      	lsls	r2, r2, #31
   19908:	fb03 f705 	mul.w	r7, r3, r5
   1990c:	f57f af5c 	bpl.w	197c8 <net_context_get+0x30>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   19910:	3501      	adds	r5, #1
   19912:	2d06      	cmp	r5, #6
   19914:	f104 0468 	add.w	r4, r4, #104	; 0x68
   19918:	d1f3      	bne.n	19902 <net_context_get+0x16a>
	int i, ret = -ENOENT;
   1991a:	f06f 0401 	mvn.w	r4, #1
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1991e:	4807      	ldr	r0, [pc, #28]	; (1993c <net_context_get+0x1a4>)
   19920:	f008 f948 	bl	21bb4 <_impl_k_sem_give>
}
   19924:	4620      	mov	r0, r4
   19926:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1992a:	bf00      	nop
   1992c:	00019a1b 	.word	0x00019a1b
   19930:	00019a13 	.word	0x00019a13
   19934:	000199dd 	.word	0x000199dd
   19938:	200023d0 	.word	0x200023d0
   1993c:	20002640 	.word	0x20002640

00019940 <net_context_ref>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   19940:	1d03      	adds	r3, r0, #4
   19942:	f3bf 8f5b 	dmb	ish
   19946:	e853 0f00 	ldrex	r0, [r3]
   1994a:	1c42      	adds	r2, r0, #1
   1994c:	e843 2100 	strex	r1, r2, [r3]
   19950:	2900      	cmp	r1, #0
   19952:	d1f8      	bne.n	19946 <net_context_ref+0x6>
   19954:	f3bf 8f5b 	dmb	ish
}
   19958:	3001      	adds	r0, #1
   1995a:	4770      	bx	lr

0001995c <net_context_unref>:
{
   1995c:	b538      	push	{r3, r4, r5, lr}
   1995e:	4604      	mov	r4, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   19960:	1d03      	adds	r3, r0, #4
   19962:	f3bf 8f5b 	dmb	ish
   19966:	e853 0f00 	ldrex	r0, [r3]
   1996a:	1e42      	subs	r2, r0, #1
   1996c:	e843 2100 	strex	r1, r2, [r3]
   19970:	2900      	cmp	r1, #0
   19972:	d1f8      	bne.n	19966 <net_context_unref+0xa>
   19974:	f3bf 8f5b 	dmb	ish
	if (old_rc != 1) {
   19978:	2801      	cmp	r0, #1
   1997a:	d001      	beq.n	19980 <net_context_unref+0x24>
		return old_rc - 1;
   1997c:	3801      	subs	r0, #1
   1997e:	bd38      	pop	{r3, r4, r5, pc}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   19980:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   19984:	4813      	ldr	r0, [pc, #76]	; (199d4 <net_context_unref+0x78>)
   19986:	f008 f975 	bl	21c74 <_impl_k_sem_take>
	if (context->tcp) {
   1998a:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1998c:	b18b      	cbz	r3, 199b2 <net_context_unref+0x56>
			if (tcp_backlog[i].tcp != context->tcp) {
   1998e:	4d12      	ldr	r5, [pc, #72]	; (199d8 <net_context_unref+0x7c>)
   19990:	682a      	ldr	r2, [r5, #0]
   19992:	429a      	cmp	r2, r3
   19994:	d108      	bne.n	199a8 <net_context_unref+0x4c>
			k_delayed_work_cancel(&tcp_backlog[i].ack_timer);
   19996:	f105 0028 	add.w	r0, r5, #40	; 0x28
   1999a:	f008 fc55 	bl	22248 <k_delayed_work_cancel>
			memset(&tcp_backlog[i], 0, sizeof(tcp_backlog[i]));
   1999e:	2250      	movs	r2, #80	; 0x50
   199a0:	2100      	movs	r1, #0
   199a2:	4628      	mov	r0, r5
   199a4:	f7e6 ff21 	bl	7ea <memset>
		net_tcp_release(context->tcp);
   199a8:	6e20      	ldr	r0, [r4, #96]	; 0x60
   199aa:	f006 fb7b 	bl	200a4 <net_tcp_release>
		context->tcp = NULL;
   199ae:	2300      	movs	r3, #0
   199b0:	6623      	str	r3, [r4, #96]	; 0x60
	if (context->conn_handler) {
   199b2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   199b4:	b118      	cbz	r0, 199be <net_context_unref+0x62>
		net_conn_unregister(context->conn_handler);
   199b6:	f006 f813 	bl	1f9e0 <net_conn_unregister>
		context->conn_handler = NULL;
   199ba:	2300      	movs	r3, #0
   199bc:	62e3      	str	r3, [r4, #44]	; 0x2c
	context->flags &= ~NET_CONTEXT_IN_USE;
   199be:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   199c2:	4804      	ldr	r0, [pc, #16]	; (199d4 <net_context_unref+0x78>)
   199c4:	f023 0307 	bic.w	r3, r3, #7
   199c8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
   199cc:	f008 f8f2 	bl	21bb4 <_impl_k_sem_give>
   199d0:	2000      	movs	r0, #0
}
   199d2:	bd38      	pop	{r3, r4, r5, pc}
   199d4:	20002640 	.word	0x20002640
   199d8:	20002658 	.word	0x20002658

000199dc <handle_timewait_timeout>:
{
   199dc:	b538      	push	{r3, r4, r5, lr}
 *
 * @param tcp TCP context
 */
static inline enum net_tcp_state net_tcp_get_state(const struct net_tcp *tcp)
{
	return (enum net_tcp_state)tcp->state;
   199de:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
	if (net_tcp_get_state(tcp) == NET_TCP_TIME_WAIT) {
   199e0:	f3c3 3343 	ubfx	r3, r3, #13, #4
   199e4:	2b09      	cmp	r3, #9
{
   199e6:	4604      	mov	r4, r0
	if (net_tcp_get_state(tcp) == NET_TCP_TIME_WAIT) {
   199e8:	d112      	bne.n	19a10 <handle_timewait_timeout+0x34>
		net_tcp_change_state(tcp, NET_TCP_CLOSED);
   199ea:	3880      	subs	r0, #128	; 0x80
   199ec:	2100      	movs	r1, #0
   199ee:	f006 fb33 	bl	20058 <net_tcp_change_state>
		if (tcp->context->recv_cb) {
   199f2:	f854 0c80 	ldr.w	r0, [r4, #-128]
   199f6:	6b05      	ldr	r5, [r0, #48]	; 0x30
   199f8:	b125      	cbz	r5, 19a04 <handle_timewait_timeout+0x28>
			tcp->context->recv_cb(tcp->context, NULL, 0,
   199fa:	2200      	movs	r2, #0
   199fc:	f854 3c7c 	ldr.w	r3, [r4, #-124]
   19a00:	4611      	mov	r1, r2
   19a02:	47a8      	blx	r5
		net_context_unref(tcp->context);
   19a04:	f854 0c80 	ldr.w	r0, [r4, #-128]
}
   19a08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_context_unref(tcp->context);
   19a0c:	f7ff bfa6 	b.w	1995c <net_context_unref>
   19a10:	bd38      	pop	{r3, r4, r5, pc}

00019a12 <handle_fin_timeout>:
	net_context_unref(tcp->context);
   19a12:	f850 0c30 	ldr.w	r0, [r0, #-48]
   19a16:	f7ff bfa1 	b.w	1995c <net_context_unref>

00019a1a <handle_ack_timeout>:
   19a1a:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
	if (net_tcp_get_state(tcp) == NET_TCP_LAST_ACK) {
   19a1e:	f3c3 3343 	ubfx	r3, r3, #13, #4
   19a22:	2b06      	cmp	r3, #6
{
   19a24:	b510      	push	{r4, lr}
   19a26:	4604      	mov	r4, r0
	if (net_tcp_get_state(tcp) == NET_TCP_LAST_ACK) {
   19a28:	d109      	bne.n	19a3e <handle_ack_timeout+0x24>
		net_tcp_change_state(tcp, NET_TCP_CLOSED);
   19a2a:	3808      	subs	r0, #8
   19a2c:	2100      	movs	r1, #0
   19a2e:	f006 fb13 	bl	20058 <net_tcp_change_state>
		net_context_unref(tcp->context);
   19a32:	f854 0c08 	ldr.w	r0, [r4, #-8]
}
   19a36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		net_context_unref(tcp->context);
   19a3a:	f7ff bf8f 	b.w	1995c <net_context_unref>
   19a3e:	bd10      	pop	{r4, pc}

00019a40 <tcp_established>:
NET_CONN_CB(tcp_established)
   19a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19a44:	460f      	mov	r7, r1
   19a46:	b087      	sub	sp, #28
   19a48:	4680      	mov	r8, r0
   19a4a:	4610      	mov	r0, r2
   19a4c:	4614      	mov	r4, r2
   19a4e:	f7ff ff77 	bl	19940 <net_context_ref>
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   19a52:	a901      	add	r1, sp, #4
   19a54:	4638      	mov	r0, r7
   19a56:	f006 fc81 	bl	2035c <net_tcp_get_hdr>
	if (!tcp_hdr) {
   19a5a:	4605      	mov	r5, r0
   19a5c:	b938      	cbnz	r0, 19a6e <tcp_established+0x2e>
		return NET_DROP;
   19a5e:	2502      	movs	r5, #2
NET_CONN_CB(tcp_established)
   19a60:	4620      	mov	r0, r4
   19a62:	f7ff ff7b 	bl	1995c <net_context_unref>
   19a66:	4628      	mov	r0, r5
   19a68:	b007      	add	sp, #28
   19a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (net_tcp_get_state(context->tcp) < NET_TCP_ESTABLISHED) {
   19a6e:	f8d4 b060 	ldr.w	fp, [r4, #96]	; 0x60
   19a72:	f8db 30bc 	ldr.w	r3, [fp, #188]	; 0xbc
   19a76:	f3c3 3343 	ubfx	r3, r3, #13, #4
   19a7a:	2b03      	cmp	r3, #3
   19a7c:	d9ef      	bls.n	19a5e <tcp_established+0x1e>
	if (net_tcp_seq_cmp(sys_get_be32(tcp_hdr->seq),
   19a7e:	3004      	adds	r0, #4
   19a80:	f7ff fd08 	bl	19494 <sys_get_be32>
 *
 * @return < 0 if seq1 < seq2, 0 if seq1 == seq2, > 0 if seq > seq2
 */
static inline s32_t net_tcp_seq_cmp(u32_t seq1, u32_t seq2)
{
	return (s32_t)(seq1 - seq2);
   19a84:	f8db 30b4 	ldr.w	r3, [fp, #180]	; 0xb4
   19a88:	eba0 0a03 	sub.w	sl, r0, r3
   19a8c:	f1ba 0f00 	cmp.w	sl, #0
   19a90:	da05      	bge.n	19a9e <tcp_established+0x5e>
		send_ack(context, &conn->remote_addr, true);
   19a92:	2201      	movs	r2, #1
   19a94:	4641      	mov	r1, r8
   19a96:	4658      	mov	r0, fp
   19a98:	f7ff fde7 	bl	1966a <send_ack.isra.27>
   19a9c:	e7df      	b.n	19a5e <tcp_established+0x1e>
	if (net_tcp_seq_cmp(sys_get_be32(tcp_hdr->seq),
   19a9e:	d1de      	bne.n	19a5e <tcp_established+0x1e>
	tcp_flags = NET_TCP_FLAGS(tcp_hdr);
   19aa0:	7b6e      	ldrb	r6, [r5, #13]
	if (tcp_flags & NET_TCP_RST) {
   19aa2:	f016 0904 	ands.w	r9, r6, #4
   19aa6:	d012      	beq.n	19ace <tcp_established+0x8e>
		if (!net_tcp_validate_seq(context->tcp, pkt)) {
   19aa8:	4639      	mov	r1, r7
   19aaa:	4658      	mov	r0, fp
   19aac:	f006 fd50 	bl	20550 <net_tcp_validate_seq>
   19ab0:	2800      	cmp	r0, #0
   19ab2:	d0d4      	beq.n	19a5e <tcp_established+0x1e>
		if (context->recv_cb) {
   19ab4:	6b25      	ldr	r5, [r4, #48]	; 0x30
   19ab6:	b135      	cbz	r5, 19ac6 <tcp_established+0x86>
			context->recv_cb(context, NULL, -ECONNRESET,
   19ab8:	6e23      	ldr	r3, [r4, #96]	; 0x60
   19aba:	f06f 0235 	mvn.w	r2, #53	; 0x35
   19abe:	685b      	ldr	r3, [r3, #4]
   19ac0:	4651      	mov	r1, sl
   19ac2:	4620      	mov	r0, r4
   19ac4:	47a8      	blx	r5
		net_context_unref(context);
   19ac6:	4620      	mov	r0, r4
   19ac8:	f7ff ff48 	bl	1995c <net_context_unref>
   19acc:	e7c7      	b.n	19a5e <tcp_established+0x1e>
	if (tcp_flags & NET_TCP_ACK) {
   19ace:	06f3      	lsls	r3, r6, #27
   19ad0:	d517      	bpl.n	19b02 <tcp_established+0xc2>
		if (!net_tcp_ack_received(context,
   19ad2:	f105 0008 	add.w	r0, r5, #8
   19ad6:	f7ff fcdd 	bl	19494 <sys_get_be32>
   19ada:	4601      	mov	r1, r0
   19adc:	4620      	mov	r0, r4
   19ade:	f006 fcaf 	bl	20440 <net_tcp_ack_received>
   19ae2:	2800      	cmp	r0, #0
   19ae4:	d0bb      	beq.n	19a5e <tcp_established+0x1e>
		if (net_tcp_get_state(context->tcp)
   19ae6:	6e20      	ldr	r0, [r4, #96]	; 0x60
   19ae8:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   19aec:	f3c3 3343 	ubfx	r3, r3, #13, #4
   19af0:	2b07      	cmp	r3, #7
   19af2:	d142      	bne.n	19b7a <tcp_established+0x13a>
			k_delayed_work_cancel(&context->tcp->fin_timer);
   19af4:	3030      	adds	r0, #48	; 0x30
   19af6:	f008 fba7 	bl	22248 <k_delayed_work_cancel>
			net_tcp_change_state(context->tcp, NET_TCP_FIN_WAIT_2);
   19afa:	2108      	movs	r1, #8
   19afc:	6e20      	ldr	r0, [r4, #96]	; 0x60
   19afe:	f006 faab 	bl	20058 <net_tcp_change_state>
	if (tcp_flags & NET_TCP_FIN) {
   19b02:	f016 0901 	ands.w	r9, r6, #1
   19b06:	d017      	beq.n	19b38 <tcp_established+0xf8>
		if (net_tcp_get_state(context->tcp) == NET_TCP_ESTABLISHED) {
   19b08:	6e20      	ldr	r0, [r4, #96]	; 0x60
   19b0a:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   19b0e:	f3c3 3343 	ubfx	r3, r3, #13, #4
   19b12:	2b04      	cmp	r3, #4
   19b14:	d158      	bne.n	19bc8 <tcp_established+0x188>
			net_tcp_change_state(context->tcp, NET_TCP_CLOSE_WAIT);
   19b16:	2105      	movs	r1, #5
   19b18:	f006 fa9e 	bl	20058 <net_tcp_change_state>
			k_delayed_work_submit(&context->tcp->ack_timer, ACK_TIMEOUT);
   19b1c:	6e21      	ldr	r1, [r4, #96]	; 0x60
   19b1e:	4831      	ldr	r0, [pc, #196]	; (19be4 <tcp_established+0x1a4>)
   19b20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   19b24:	3108      	adds	r1, #8
   19b26:	f008 fbe9 	bl	222fc <k_delayed_work_submit_to_queue>
		context->tcp->fin_rcvd = 1;
   19b2a:	6e22      	ldr	r2, [r4, #96]	; 0x60
   19b2c:	f892 30be 	ldrb.w	r3, [r2, #190]	; 0xbe
   19b30:	f043 0304 	orr.w	r3, r3, #4
   19b34:	f882 30be 	strb.w	r3, [r2, #190]	; 0xbe
	set_appdata_values(pkt, IPPROTO_TCP);
   19b38:	2106      	movs	r1, #6
   19b3a:	4638      	mov	r0, r7
   19b3c:	f7ff fdb1 	bl	196a2 <set_appdata_values>
	if (data_len > net_tcp_get_recv_wnd(context->tcp)) {
   19b40:	6e20      	ldr	r0, [r4, #96]	; 0x60
   19b42:	8e7e      	ldrh	r6, [r7, #50]	; 0x32
   19b44:	f006 fa1e 	bl	1ff84 <net_tcp_get_recv_wnd>
   19b48:	4286      	cmp	r6, r0
   19b4a:	d888      	bhi.n	19a5e <tcp_established+0x1e>
	if (data_len > 0) {
   19b4c:	2e00      	cmp	r6, #0
   19b4e:	d041      	beq.n	19bd4 <tcp_established+0x194>
		ret = packet_received(conn, pkt, context->tcp->recv_user_data);
   19b50:	6e23      	ldr	r3, [r4, #96]	; 0x60
   19b52:	4639      	mov	r1, r7
   19b54:	685a      	ldr	r2, [r3, #4]
   19b56:	4640      	mov	r0, r8
   19b58:	f7ff fdd8 	bl	1970c <packet_received>
   19b5c:	4605      	mov	r5, r0
	context->tcp->send_ack += data_len;
   19b5e:	6e20      	ldr	r0, [r4, #96]	; 0x60
   19b60:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
   19b64:	441e      	add	r6, r3
	if (tcp_flags & NET_TCP_FIN) {
   19b66:	f1b9 0f00 	cmp.w	r9, #0
   19b6a:	d138      	bne.n	19bde <tcp_established+0x19e>
		context->tcp->send_ack += 1;
   19b6c:	f8c0 60b4 	str.w	r6, [r0, #180]	; 0xb4
	send_ack(context, &conn->remote_addr, false);
   19b70:	2200      	movs	r2, #0
   19b72:	4641      	mov	r1, r8
   19b74:	f7ff fd79 	bl	1966a <send_ack.isra.27>
   19b78:	e008      	b.n	19b8c <tcp_established+0x14c>
		} else if (net_tcp_get_state(context->tcp)
   19b7a:	2b06      	cmp	r3, #6
   19b7c:	d1c1      	bne.n	19b02 <tcp_established+0xc2>
			net_tcp_change_state(context->tcp, NET_TCP_CLOSED);
   19b7e:	4649      	mov	r1, r9
   19b80:	f006 fa6a 	bl	20058 <net_tcp_change_state>
			net_pkt_unref(pkt);
   19b84:	4638      	mov	r0, r7
   19b86:	f001 fe82 	bl	1b88e <net_pkt_unref>
	enum net_verdict ret = NET_OK;
   19b8a:	464d      	mov	r5, r9
	if (net_tcp_get_state(context->tcp) == NET_TCP_TIME_WAIT) {
   19b8c:	6e21      	ldr	r1, [r4, #96]	; 0x60
   19b8e:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
   19b92:	f3c3 3343 	ubfx	r3, r3, #13, #4
   19b96:	2b09      	cmp	r3, #9
   19b98:	d104      	bne.n	19ba4 <tcp_established+0x164>
   19b9a:	2219      	movs	r2, #25
   19b9c:	3180      	adds	r1, #128	; 0x80
   19b9e:	4811      	ldr	r0, [pc, #68]	; (19be4 <tcp_established+0x1a4>)
   19ba0:	f008 fbac 	bl	222fc <k_delayed_work_submit_to_queue>
	if (net_tcp_get_state(context->tcp) == NET_TCP_CLOSED) {
   19ba4:	6e23      	ldr	r3, [r4, #96]	; 0x60
   19ba6:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
   19baa:	f3c2 3243 	ubfx	r2, r2, #13, #4
   19bae:	2a00      	cmp	r2, #0
   19bb0:	f47f af56 	bne.w	19a60 <tcp_established+0x20>
		if (context->recv_cb) {
   19bb4:	6b26      	ldr	r6, [r4, #48]	; 0x30
   19bb6:	b11e      	cbz	r6, 19bc0 <tcp_established+0x180>
			context->recv_cb(context, NULL, 0,
   19bb8:	685b      	ldr	r3, [r3, #4]
   19bba:	4611      	mov	r1, r2
   19bbc:	4620      	mov	r0, r4
   19bbe:	47b0      	blx	r6
		net_context_unref(context);
   19bc0:	4620      	mov	r0, r4
   19bc2:	f7ff fecb 	bl	1995c <net_context_unref>
   19bc6:	e74b      	b.n	19a60 <tcp_established+0x20>
		} else if (net_tcp_get_state(context->tcp)
   19bc8:	2b08      	cmp	r3, #8
   19bca:	d1ae      	bne.n	19b2a <tcp_established+0xea>
			net_tcp_change_state(context->tcp, NET_TCP_TIME_WAIT);
   19bcc:	2109      	movs	r1, #9
   19bce:	f006 fa43 	bl	20058 <net_tcp_change_state>
   19bd2:	e7aa      	b.n	19b2a <tcp_established+0xea>
		net_pkt_unref(pkt);
   19bd4:	4638      	mov	r0, r7
   19bd6:	f001 fe5a 	bl	1b88e <net_pkt_unref>
	enum net_verdict ret = NET_OK;
   19bda:	4635      	mov	r5, r6
   19bdc:	e7bf      	b.n	19b5e <tcp_established+0x11e>
		context->tcp->send_ack += 1;
   19bde:	3601      	adds	r6, #1
   19be0:	e7c4      	b.n	19b6c <tcp_established+0x12c>
   19be2:	bf00      	nop
   19be4:	20003340 	.word	0x20003340

00019be8 <net_context_put>:
{
   19be8:	b530      	push	{r4, r5, lr}
	if (!PART_OF_ARRAY(contexts, context)) {
   19bea:	4604      	mov	r4, r0
{
   19bec:	b087      	sub	sp, #28
	if (!PART_OF_ARRAY(contexts, context)) {
   19bee:	b190      	cbz	r0, 19c16 <net_context_put+0x2e>
   19bf0:	4b20      	ldr	r3, [pc, #128]	; (19c74 <net_context_put+0x8c>)
   19bf2:	4298      	cmp	r0, r3
   19bf4:	d30f      	bcc.n	19c16 <net_context_put+0x2e>
   19bf6:	f503 731c 	add.w	r3, r3, #624	; 0x270
   19bfa:	4298      	cmp	r0, r3
   19bfc:	d20b      	bcs.n	19c16 <net_context_put+0x2e>
	context->connect_cb = NULL;
   19bfe:	2300      	movs	r3, #0
   19c00:	6383      	str	r3, [r0, #56]	; 0x38
	context->recv_cb = NULL;
   19c02:	6303      	str	r3, [r0, #48]	; 0x30
	context->send_cb = NULL;
   19c04:	6343      	str	r3, [r0, #52]	; 0x34
   19c06:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
	if (context->flags & NET_CONTEXT_PROTO) {
   19c0a:	065a      	lsls	r2, r3, #25
   19c0c:	d406      	bmi.n	19c1c <net_context_put+0x34>
	net_context_unref(context);
   19c0e:	4620      	mov	r0, r4
   19c10:	f7ff fea4 	bl	1995c <net_context_unref>
   19c14:	e02b      	b.n	19c6e <net_context_put+0x86>
		return -EINVAL;
   19c16:	f06f 0015 	mvn.w	r0, #21
   19c1a:	e029      	b.n	19c70 <net_context_put+0x88>
	return (context->flags >> NET_CONTEXT_STATE_SHIFT) &
   19c1c:	f3c3 0341 	ubfx	r3, r3, #1, #2
		if ((net_context_get_state(context) == NET_CONTEXT_CONNECTED ||
   19c20:	3b02      	subs	r3, #2
   19c22:	2b01      	cmp	r3, #1
   19c24:	d8f3      	bhi.n	19c0e <net_context_put+0x26>
		    && !context->tcp->fin_rcvd) {
   19c26:	6e21      	ldr	r1, [r4, #96]	; 0x60
   19c28:	f891 50be 	ldrb.w	r5, [r1, #190]	; 0xbe
   19c2c:	f015 0504 	ands.w	r5, r5, #4
   19c30:	d1ed      	bne.n	19c0e <net_context_put+0x26>
   19c32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   19c36:	3130      	adds	r1, #48	; 0x30
   19c38:	480f      	ldr	r0, [pc, #60]	; (19c78 <net_context_put+0x90>)
   19c3a:	f008 fb5f 	bl	222fc <k_delayed_work_submit_to_queue>
	struct net_pkt *pkt = NULL;
   19c3e:	ab06      	add	r3, sp, #24
	ret = net_tcp_prepare_segment(ctx->tcp, NET_TCP_FIN, NULL, 0,
   19c40:	462a      	mov	r2, r5
	struct net_pkt *pkt = NULL;
   19c42:	f843 5d04 	str.w	r5, [r3, #-4]!
	ret = net_tcp_prepare_segment(ctx->tcp, NET_TCP_FIN, NULL, 0,
   19c46:	9302      	str	r3, [sp, #8]
				      NULL, &ctx->remote, &pkt);
   19c48:	f104 0314 	add.w	r3, r4, #20
	ret = net_tcp_prepare_segment(ctx->tcp, NET_TCP_FIN, NULL, 0,
   19c4c:	9301      	str	r3, [sp, #4]
   19c4e:	9500      	str	r5, [sp, #0]
   19c50:	462b      	mov	r3, r5
   19c52:	2101      	movs	r1, #1
   19c54:	6e20      	ldr	r0, [r4, #96]	; 0x60
   19c56:	f006 fa81 	bl	2015c <net_tcp_prepare_segment>
	if (ret || !pkt) {
   19c5a:	b940      	cbnz	r0, 19c6e <net_context_put+0x86>
   19c5c:	9805      	ldr	r0, [sp, #20]
   19c5e:	b130      	cbz	r0, 19c6e <net_context_put+0x86>
	ret = net_tcp_send_pkt(pkt);
   19c60:	f006 fd87 	bl	20772 <net_tcp_send_pkt>
	if (ret < 0) {
   19c64:	2800      	cmp	r0, #0
   19c66:	da02      	bge.n	19c6e <net_context_put+0x86>
		net_pkt_unref(pkt);
   19c68:	9805      	ldr	r0, [sp, #20]
   19c6a:	f001 fe10 	bl	1b88e <net_pkt_unref>
	return 0;
   19c6e:	2000      	movs	r0, #0
}
   19c70:	b007      	add	sp, #28
   19c72:	bd30      	pop	{r4, r5, pc}
   19c74:	200023d0 	.word	0x200023d0
   19c78:	20003340 	.word	0x20003340

00019c7c <net_context_bind>:
	if (context->conn_handler) {
   19c7c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
   19c7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   19c80:	4606      	mov	r6, r0
   19c82:	460d      	mov	r5, r1
	if (context->conn_handler) {
   19c84:	2b00      	cmp	r3, #0
   19c86:	d142      	bne.n	19d0e <net_context_bind+0x92>
	if (addr->sa_family == AF_INET6) {
   19c88:	8809      	ldrh	r1, [r1, #0]
   19c8a:	290a      	cmp	r1, #10
   19c8c:	d142      	bne.n	19d14 <net_context_bind+0x98>
		if (addrlen < sizeof(struct sockaddr_in6)) {
   19c8e:	2a17      	cmp	r2, #23
		struct net_if *iface = NULL;
   19c90:	9301      	str	r3, [sp, #4]
		if (addrlen < sizeof(struct sockaddr_in6)) {
   19c92:	d93f      	bls.n	19d14 <net_context_bind+0x98>
		if (net_is_ipv6_addr_mcast(&addr6->sin6_addr)) {
   19c94:	462c      	mov	r4, r5
   19c96:	f814 3f04 	ldrb.w	r3, [r4, #4]!
   19c9a:	2bff      	cmp	r3, #255	; 0xff
   19c9c:	d11d      	bne.n	19cda <net_context_bind+0x5e>
			maddr = net_if_ipv6_maddr_lookup(&addr6->sin6_addr,
   19c9e:	a901      	add	r1, sp, #4
   19ca0:	4620      	mov	r0, r4
   19ca2:	f001 f865 	bl	1ad70 <net_if_ipv6_maddr_lookup>
			if (!maddr) {
   19ca6:	b918      	cbnz	r0, 19cb0 <net_context_bind+0x34>
				return -ENOENT;
   19ca8:	f06f 0001 	mvn.w	r0, #1
}
   19cac:	b002      	add	sp, #8
   19cae:	bd70      	pop	{r4, r5, r6, pc}
			ptr = &maddr->address.in6_addr;
   19cb0:	f100 0408 	add.w	r4, r0, #8
		if (!iface) {
   19cb4:	9801      	ldr	r0, [sp, #4]
   19cb6:	b338      	cbz	r0, 19d08 <net_context_bind+0x8c>
	context->iface = net_if_get_by_iface(iface);
   19cb8:	f001 fbc4 	bl	1b444 <net_if_get_by_iface>
   19cbc:	f886 005c 	strb.w	r0, [r6, #92]	; 0x5c
		if (addr6->sin6_port) {
   19cc0:	8869      	ldrh	r1, [r5, #2]
		net_sin6_ptr(&context->local)->sin6_addr = ptr;
   19cc2:	60f4      	str	r4, [r6, #12]
		net_sin6_ptr(&context->local)->sin6_family = AF_INET6;
   19cc4:	200a      	movs	r0, #10
   19cc6:	8130      	strh	r0, [r6, #8]
		if (addr6->sin6_port) {
   19cc8:	b1d1      	cbz	r1, 19d00 <net_context_bind+0x84>
			ret = check_used_port(AF_INET6, addr6->sin6_port,
   19cca:	462a      	mov	r2, r5
   19ccc:	f7ff fbfa 	bl	194c4 <check_used_port>
			if (!ret) {
   19cd0:	2800      	cmp	r0, #0
   19cd2:	d1eb      	bne.n	19cac <net_context_bind+0x30>
				net_sin6_ptr(&context->local)->sin6_port =
   19cd4:	886b      	ldrh	r3, [r5, #2]
   19cd6:	8173      	strh	r3, [r6, #10]
   19cd8:	e7e8      	b.n	19cac <net_context_bind+0x30>
		} else if (net_is_ipv6_addr_unspecified(&addr6->sin6_addr)) {
   19cda:	4620      	mov	r0, r4
   19cdc:	f7ff fbe5 	bl	194aa <net_is_ipv6_addr_unspecified>
   19ce0:	b130      	cbz	r0, 19cf0 <net_context_bind+0x74>
			iface = net_if_get_default();
   19ce2:	f000 fdd3 	bl	1a88c <net_if_get_default>
   19ce6:	9001      	str	r0, [sp, #4]
			ptr = (struct in6_addr *)net_ipv6_unspecified_address();
   19ce8:	f003 fe5c 	bl	1d9a4 <net_ipv6_unspecified_address>
   19cec:	4604      	mov	r4, r0
   19cee:	e7e1      	b.n	19cb4 <net_context_bind+0x38>
			ifaddr = net_if_ipv6_addr_lookup(&addr6->sin6_addr,
   19cf0:	a901      	add	r1, sp, #4
   19cf2:	4620      	mov	r0, r4
   19cf4:	f000 fdf0 	bl	1a8d8 <net_if_ipv6_addr_lookup>
			if (!ifaddr) {
   19cf8:	2800      	cmp	r0, #0
   19cfa:	d0d5      	beq.n	19ca8 <net_context_bind+0x2c>
			ptr = &ifaddr->address.in6_addr;
   19cfc:	1d04      	adds	r4, r0, #4
   19cfe:	e7d9      	b.n	19cb4 <net_context_bind+0x38>
			addr6->sin6_port =
   19d00:	8973      	ldrh	r3, [r6, #10]
   19d02:	806b      	strh	r3, [r5, #2]
		return 0;
   19d04:	4608      	mov	r0, r1
   19d06:	e7d1      	b.n	19cac <net_context_bind+0x30>
			return -EADDRNOTAVAIL;
   19d08:	f06f 0030 	mvn.w	r0, #48	; 0x30
   19d0c:	e7ce      	b.n	19cac <net_context_bind+0x30>
		return -EISCONN;
   19d0e:	f06f 0037 	mvn.w	r0, #55	; 0x37
   19d12:	e7cb      	b.n	19cac <net_context_bind+0x30>
	return -EINVAL;
   19d14:	f06f 0015 	mvn.w	r0, #21
   19d18:	e7c8      	b.n	19cac <net_context_bind+0x30>

00019d1a <bind_default>:
{
   19d1a:	b530      	push	{r4, r5, lr}
	if (context->flags & NET_CONTEXT_FAMILY) {
   19d1c:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
   19d20:	06db      	lsls	r3, r3, #27
   19d22:	b087      	sub	sp, #28
   19d24:	4604      	mov	r4, r0
   19d26:	d405      	bmi.n	19d34 <bind_default+0x1a>
	return -EINVAL;
   19d28:	f06f 0015 	mvn.w	r0, #21
}
   19d2c:	b007      	add	sp, #28
   19d2e:	bd30      	pop	{r4, r5, pc}
			return 0;
   19d30:	2000      	movs	r0, #0
   19d32:	e7fb      	b.n	19d2c <bind_default+0x12>
		if (net_sin6_ptr(&context->local)->sin6_addr) {
   19d34:	68c3      	ldr	r3, [r0, #12]
   19d36:	2b00      	cmp	r3, #0
   19d38:	d1fa      	bne.n	19d30 <bind_default+0x16>
		addr6.sin6_family = AF_INET6;
   19d3a:	ad06      	add	r5, sp, #24
   19d3c:	230a      	movs	r3, #10
   19d3e:	f825 3d18 	strh.w	r3, [r5, #-24]!
		memcpy(&addr6.sin6_addr, net_ipv6_unspecified_address(),
   19d42:	f003 fe2f 	bl	1d9a4 <net_ipv6_unspecified_address>
   19d46:	2210      	movs	r2, #16
   19d48:	4601      	mov	r1, r0
   19d4a:	a801      	add	r0, sp, #4
   19d4c:	f7e6 fd21 	bl	792 <memcpy>
			find_available_port(context,
   19d50:	4629      	mov	r1, r5
   19d52:	4620      	mov	r0, r4
   19d54:	f7ff fbea 	bl	1952c <find_available_port>
		return net_context_bind(context, (struct sockaddr *)&addr6,
   19d58:	2218      	movs	r2, #24
		addr6.sin6_port =
   19d5a:	f8ad 0002 	strh.w	r0, [sp, #2]
		return net_context_bind(context, (struct sockaddr *)&addr6,
   19d5e:	4629      	mov	r1, r5
   19d60:	4620      	mov	r0, r4
   19d62:	f7ff ff8b 	bl	19c7c <net_context_bind>
   19d66:	e7e1      	b.n	19d2c <bind_default+0x12>

00019d68 <sendto.isra.33>:
static int sendto(struct net_pkt *pkt,
   19d68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19d6c:	68c5      	ldr	r5, [r0, #12]
   19d6e:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   19d72:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   19d76:	461f      	mov	r7, r3
   19d78:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
   19d7c:	4606      	mov	r6, r0
	if (!net_context_is_used(context)) {
   19d7e:	07d8      	lsls	r0, r3, #31
static int sendto(struct net_pkt *pkt,
   19d80:	468a      	mov	sl, r1
   19d82:	4693      	mov	fp, r2
	if (!net_context_is_used(context)) {
   19d84:	d566      	bpl.n	19e54 <sendto.isra.33+0xec>
	if (context->flags & NET_CONTEXT_PROTO) {
   19d86:	0659      	lsls	r1, r3, #25
   19d88:	d46d      	bmi.n	19e66 <sendto.isra.33+0xfe>
		ret = bind_default(context);
   19d8a:	4628      	mov	r0, r5
   19d8c:	f7ff ffc5 	bl	19d1a <bind_default>
		if (ret) {
   19d90:	4604      	mov	r4, r0
   19d92:	b138      	cbz	r0, 19da4 <sendto.isra.33+0x3c>
}
   19d94:	4620      	mov	r0, r4
   19d96:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (context->tcp->flags & NET_TCP_IS_SHUTDOWN) {
   19d9a:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   19d9c:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
   19da0:	05da      	lsls	r2, r3, #23
   19da2:	d45a      	bmi.n	19e5a <sendto.isra.33+0xf2>
	if (!dst_addr) {
   19da4:	f1ba 0f00 	cmp.w	sl, #0
   19da8:	d102      	bne.n	19db0 <sendto.isra.33+0x48>
		return -EDESTADDRREQ;
   19daa:	f06f 0427 	mvn.w	r4, #39	; 0x27
   19dae:	e7f1      	b.n	19d94 <sendto.isra.33+0x2c>
	return pkt->family;
   19db0:	f896 303c 	ldrb.w	r3, [r6, #60]	; 0x3c
	if (net_pkt_family(pkt) == AF_INET6) {
   19db4:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   19db8:	2b0a      	cmp	r3, #10
   19dba:	d151      	bne.n	19e60 <sendto.isra.33+0xf8>
		if (addrlen < sizeof(struct sockaddr_in6)) {
   19dbc:	f1bb 0f17 	cmp.w	fp, #23
   19dc0:	d94e      	bls.n	19e60 <sendto.isra.33+0xf8>
		if (net_is_ipv6_addr_unspecified(&addr6->sin6_addr)) {
   19dc2:	f10a 0104 	add.w	r1, sl, #4
   19dc6:	4608      	mov	r0, r1
   19dc8:	f7ff fb6f 	bl	194aa <net_is_ipv6_addr_unspecified>
   19dcc:	2800      	cmp	r0, #0
   19dce:	d1ec      	bne.n	19daa <sendto.isra.33+0x42>
   19dd0:	f895 205d 	ldrb.w	r2, [r5, #93]	; 0x5d
   19dd4:	f012 0240 	ands.w	r2, r2, #64	; 0x40
   19dd8:	d130      	bne.n	19e3c <sendto.isra.33+0xd4>
		pkt = net_ipv6_create(context, pkt, NULL, &addr6->sin6_addr);
   19dda:	460b      	mov	r3, r1
   19ddc:	4628      	mov	r0, r5
   19dde:	4631      	mov	r1, r6
   19de0:	f003 fe54 	bl	1da8c <net_ipv6_create>
   19de4:	4601      	mov	r1, r0
				     net_pkt_ip_hdr_len(pkt) +
   19de6:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
				     net_pkt_ipv6_ext_len(pkt),
   19dea:	f891 203f 	ldrb.w	r2, [r1, #63]	; 0x3f
		tmp = net_udp_insert(context, pkt,
   19dee:	f8ba 3002 	ldrh.w	r3, [sl, #2]
   19df2:	4402      	add	r2, r0
   19df4:	4628      	mov	r0, r5
   19df6:	f006 ff75 	bl	20ce4 <net_udp_insert>
		if (!tmp) {
   19dfa:	4606      	mov	r6, r0
   19dfc:	b910      	cbnz	r0, 19e04 <sendto.isra.33+0x9c>
			return -ENOMEM;
   19dfe:	f06f 040b 	mvn.w	r4, #11
   19e02:	e7c7      	b.n	19d94 <sendto.isra.33+0x2c>
		r = net_ipv6_finalize(context, pkt);
   19e04:	4631      	mov	r1, r6
   19e06:	4628      	mov	r0, r5
   19e08:	f004 f81e 	bl	1de48 <net_ipv6_finalize>
	if (ret < 0) {
   19e0c:	2800      	cmp	r0, #0
		ret = net_tcp_queue_data(context, pkt);
   19e0e:	4604      	mov	r4, r0
	if (ret < 0) {
   19e10:	dbc0      	blt.n	19d94 <sendto.isra.33+0x2c>
	context->send_cb = cb;
   19e12:	636f      	str	r7, [r5, #52]	; 0x34
	context->user_data = user_data;
   19e14:	f8c5 9000 	str.w	r9, [r5]
	pkt->token = token;
   19e18:	f8c6 8010 	str.w	r8, [r6, #16]
   19e1c:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
   19e20:	065b      	lsls	r3, r3, #25
   19e22:	d527      	bpl.n	19e74 <sendto.isra.33+0x10c>
		int ret = net_tcp_send_data(context);
   19e24:	4628      	mov	r0, r5
   19e26:	f006 fd79 	bl	2091c <net_tcp_send_data>
   19e2a:	4604      	mov	r4, r0
		if (cb) {
   19e2c:	2f00      	cmp	r7, #0
   19e2e:	d0b1      	beq.n	19d94 <sendto.isra.33+0x2c>
			cb(context, ret, token, user_data);
   19e30:	4601      	mov	r1, r0
   19e32:	464b      	mov	r3, r9
   19e34:	4642      	mov	r2, r8
   19e36:	4628      	mov	r0, r5
   19e38:	47b8      	blx	r7
   19e3a:	e7ab      	b.n	19d94 <sendto.isra.33+0x2c>
   19e3c:	68b3      	ldr	r3, [r6, #8]
	while (buf) {
   19e3e:	b92b      	cbnz	r3, 19e4c <sendto.isra.33+0xe4>
		net_pkt_set_appdatalen(pkt, net_pkt_get_len(pkt));
   19e40:	8670      	strh	r0, [r6, #50]	; 0x32
		ret = net_tcp_queue_data(context, pkt);
   19e42:	4631      	mov	r1, r6
   19e44:	4628      	mov	r0, r5
   19e46:	f006 fa39 	bl	202bc <net_tcp_queue_data>
   19e4a:	e7df      	b.n	19e0c <sendto.isra.33+0xa4>
		bytes += buf->len;
   19e4c:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   19e4e:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   19e50:	4410      	add	r0, r2
   19e52:	e7f4      	b.n	19e3e <sendto.isra.33+0xd6>
		return -EBADF;
   19e54:	f06f 0408 	mvn.w	r4, #8
   19e58:	e79c      	b.n	19d94 <sendto.isra.33+0x2c>
			return -ESHUTDOWN;
   19e5a:	f06f 0439 	mvn.w	r4, #57	; 0x39
   19e5e:	e799      	b.n	19d94 <sendto.isra.33+0x2c>
		return -EINVAL;
   19e60:	f06f 0415 	mvn.w	r4, #21
   19e64:	e796      	b.n	19d94 <sendto.isra.33+0x2c>
		if (net_context_get_state(context) != NET_CONTEXT_CONNECTED) {
   19e66:	f3c3 0341 	ubfx	r3, r3, #1, #2
   19e6a:	2b02      	cmp	r3, #2
   19e6c:	d095      	beq.n	19d9a <sendto.isra.33+0x32>
			return -ENOTCONN;
   19e6e:	f06f 0438 	mvn.w	r4, #56	; 0x38
   19e72:	e78f      	b.n	19d94 <sendto.isra.33+0x2c>
		return net_send_data(pkt);
   19e74:	4630      	mov	r0, r6
}
   19e76:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		return net_send_data(pkt);
   19e7a:	f000 bb9f 	b.w	1a5bc <net_send_data>
	...

00019e80 <tcp_syn_rcvd>:
NET_CONN_CB(tcp_syn_rcvd)
   19e80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19e84:	4614      	mov	r4, r2
   19e86:	b09e      	sub	sp, #120	; 0x78
   19e88:	4610      	mov	r0, r2
   19e8a:	460d      	mov	r5, r1
   19e8c:	f7ff fd58 	bl	19940 <net_context_ref>
	tcp = context->tcp;
   19e90:	6e26      	ldr	r6, [r4, #96]	; 0x60
   19e92:	f8d6 30bc 	ldr.w	r3, [r6, #188]	; 0xbc
	switch (net_tcp_get_state(tcp)) {
   19e96:	f3c3 3343 	ubfx	r3, r3, #13, #4
   19e9a:	2b01      	cmp	r3, #1
   19e9c:	d008      	beq.n	19eb0 <tcp_syn_rcvd+0x30>
   19e9e:	2b03      	cmp	r3, #3
   19ea0:	d06c      	beq.n	19f7c <tcp_syn_rcvd+0xfc>
NET_CONN_CB(tcp_syn_rcvd)
   19ea2:	4620      	mov	r0, r4
   19ea4:	f7ff fd5a 	bl	1995c <net_context_unref>
   19ea8:	2002      	movs	r0, #2
   19eaa:	b01e      	add	sp, #120	; 0x78
   19eac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	context->iface = net_if_get_by_iface(iface);
   19eb0:	6968      	ldr	r0, [r5, #20]
   19eb2:	f001 fac7 	bl	1b444 <net_if_get_by_iface>
   19eb6:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
	pkt->context = ctx;
   19eba:	60ec      	str	r4, [r5, #12]
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   19ebc:	a908      	add	r1, sp, #32
   19ebe:	4628      	mov	r0, r5
   19ec0:	f006 fa4c 	bl	2035c <net_tcp_get_hdr>
	if (!tcp_hdr) {
   19ec4:	4607      	mov	r7, r0
   19ec6:	2800      	cmp	r0, #0
   19ec8:	d0eb      	beq.n	19ea2 <tcp_syn_rcvd+0x22>
	if (net_pkt_get_src_addr(pkt, &remote_addr, sizeof(remote_addr)) < 0) {
   19eca:	2218      	movs	r2, #24
   19ecc:	a918      	add	r1, sp, #96	; 0x60
   19ece:	4628      	mov	r0, r5
   19ed0:	f001 ff15 	bl	1bcfe <net_pkt_get_src_addr>
   19ed4:	2800      	cmp	r0, #0
   19ed6:	dbe4      	blt.n	19ea2 <tcp_syn_rcvd+0x22>
	if (net_pkt_get_dst_addr(pkt, &local_addr, sizeof(local_addr)) < 0) {
   19ed8:	2218      	movs	r2, #24
   19eda:	a912      	add	r1, sp, #72	; 0x48
   19edc:	4628      	mov	r0, r5
   19ede:	f001 ff13 	bl	1bd08 <net_pkt_get_dst_addr>
   19ee2:	2800      	cmp	r0, #0
   19ee4:	dbdd      	blt.n	19ea2 <tcp_syn_rcvd+0x22>
   19ee6:	7b7b      	ldrb	r3, [r7, #13]
   19ee8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if (NET_TCP_FLAGS(tcp_hdr) == NET_TCP_SYN) {
   19eec:	2b02      	cmp	r3, #2
   19eee:	f040 8092 	bne.w	1a016 <tcp_syn_rcvd+0x196>
		struct net_tcp_options tcp_opts = {
   19ef2:	aa1e      	add	r2, sp, #120	; 0x78
   19ef4:	f44f 7306 	mov.w	r3, #536	; 0x218
   19ef8:	f822 3d68 	strh.w	r3, [r2, #-104]!
		opt_totlen = NET_TCP_HDR_LEN(tcp_hdr)
   19efc:	7b3b      	ldrb	r3, [r7, #12]
		if (net_tcp_parse_opts(pkt, opt_totlen, &tcp_opts) < 0) {
   19efe:	f06f 0113 	mvn.w	r1, #19
			     - sizeof(struct net_tcp_hdr);
   19f02:	091b      	lsrs	r3, r3, #4
		if (net_tcp_parse_opts(pkt, opt_totlen, &tcp_opts) < 0) {
   19f04:	eb01 0183 	add.w	r1, r1, r3, lsl #2
   19f08:	4628      	mov	r0, r5
   19f0a:	f006 fd30 	bl	2096e <net_tcp_parse_opts>
   19f0e:	2800      	cmp	r0, #0
   19f10:	dbc7      	blt.n	19ea2 <tcp_syn_rcvd+0x22>
		net_tcp_change_state(tcp, NET_TCP_SYN_RCVD);
   19f12:	2103      	movs	r1, #3
   19f14:	4630      	mov	r0, r6
   19f16:	f006 f89f 	bl	20058 <net_tcp_change_state>
		context->tcp->send_seq = tcp_init_isn();
   19f1a:	6e26      	ldr	r6, [r4, #96]	; 0x60
	return sys_rand32_get();
   19f1c:	f7e8 fc7e 	bl	281c <sys_rand32_get>
   19f20:	f8c6 00b0 	str.w	r0, [r6, #176]	; 0xb0
			sys_get_be32(tcp_hdr->seq) + 1;
   19f24:	1d38      	adds	r0, r7, #4
   19f26:	f7ff fab5 	bl	19494 <sys_get_be32>
		context->tcp->send_ack =
   19f2a:	6e23      	ldr	r3, [r4, #96]	; 0x60
		r = tcp_backlog_syn(pkt, context, tcp_opts.mss);
   19f2c:	f8bd 9010 	ldrh.w	r9, [sp, #16]
			sys_get_be32(tcp_hdr->seq) + 1;
   19f30:	3001      	adds	r0, #1
	int empty_slot = -1;
   19f32:	af1e      	add	r7, sp, #120	; 0x78
		context->tcp->send_ack =
   19f34:	f8c3 00b4 	str.w	r0, [r3, #180]	; 0xb4
	int empty_slot = -1;
   19f38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19f3c:	f847 3d44 	str.w	r3, [r7, #-68]!
	if (tcp_backlog_find(pkt, &empty_slot) >= 0) {
   19f40:	4628      	mov	r0, r5
   19f42:	4639      	mov	r1, r7
   19f44:	f7ff fb0e 	bl	19564 <tcp_backlog_find>
   19f48:	2800      	cmp	r0, #0
   19f4a:	daaa      	bge.n	19ea2 <tcp_syn_rcvd+0x22>
	if (empty_slot < 0) {
   19f4c:	990d      	ldr	r1, [sp, #52]	; 0x34
   19f4e:	2900      	cmp	r1, #0
   19f50:	dba7      	blt.n	19ea2 <tcp_syn_rcvd+0x22>
	tcp_backlog[empty_slot].tcp = context->tcp;
   19f52:	f04f 0850 	mov.w	r8, #80	; 0x50
   19f56:	4e9f      	ldr	r6, [pc, #636]	; (1a1d4 <tcp_syn_rcvd+0x354>)
   19f58:	6e23      	ldr	r3, [r4, #96]	; 0x60
   19f5a:	fb08 f101 	mul.w	r1, r8, r1
	ret = net_pkt_get_src_addr(pkt, &tcp_backlog[empty_slot].remote,
   19f5e:	2218      	movs	r2, #24
	tcp_backlog[empty_slot].tcp = context->tcp;
   19f60:	5073      	str	r3, [r6, r1]
	ret = net_pkt_get_src_addr(pkt, &tcp_backlog[empty_slot].remote,
   19f62:	3104      	adds	r1, #4
   19f64:	4431      	add	r1, r6
   19f66:	4628      	mov	r0, r5
   19f68:	f001 fec9 	bl	1bcfe <net_pkt_get_src_addr>
	if (ret < 0) {
   19f6c:	2800      	cmp	r0, #0
   19f6e:	980d      	ldr	r0, [sp, #52]	; 0x34
   19f70:	da0c      	bge.n	19f8c <tcp_syn_rcvd+0x10c>
		tcp_backlog[empty_slot].tcp = NULL;
   19f72:	fb08 f000 	mul.w	r0, r8, r0
   19f76:	2300      	movs	r3, #0
   19f78:	5033      	str	r3, [r6, r0]
   19f7a:	e792      	b.n	19ea2 <tcp_syn_rcvd+0x22>
	return net_if_get_by_index(context->iface);
   19f7c:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
   19f80:	696f      	ldr	r7, [r5, #20]
   19f82:	f001 fa51 	bl	1b428 <net_if_get_by_index>
		if (net_pkt_iface(pkt) != net_context_get_iface(context)) {
   19f86:	4287      	cmp	r7, r0
   19f88:	d18b      	bne.n	19ea2 <tcp_syn_rcvd+0x22>
   19f8a:	e796      	b.n	19eba <tcp_syn_rcvd+0x3a>
	tcp_backlog[empty_slot].send_seq = context->tcp->send_seq;
   19f8c:	6e21      	ldr	r1, [r4, #96]	; 0x60
   19f8e:	fb08 f000 	mul.w	r0, r8, r0
   19f92:	1833      	adds	r3, r6, r0
   19f94:	f8d1 20b0 	ldr.w	r2, [r1, #176]	; 0xb0
   19f98:	61da      	str	r2, [r3, #28]
	k_delayed_work_init(&tcp_backlog[empty_slot].ack_timer,
   19f9a:	3028      	adds	r0, #40	; 0x28
	tcp_backlog[empty_slot].send_ack = context->tcp->send_ack;
   19f9c:	f8d1 20b4 	ldr.w	r2, [r1, #180]	; 0xb4
   19fa0:	621a      	str	r2, [r3, #32]
	tcp_backlog[empty_slot].send_mss = send_mss;
   19fa2:	f8a3 9024 	strh.w	r9, [r3, #36]	; 0x24
	k_delayed_work_init(&tcp_backlog[empty_slot].ack_timer,
   19fa6:	4430      	add	r0, r6
   19fa8:	498b      	ldr	r1, [pc, #556]	; (1a1d8 <tcp_syn_rcvd+0x358>)
   19faa:	f008 f92f 	bl	2220c <k_delayed_work_init>
	k_delayed_work_submit(&tcp_backlog[empty_slot].ack_timer, ACK_TIMEOUT);
   19fae:	990d      	ldr	r1, [sp, #52]	; 0x34
   19fb0:	488a      	ldr	r0, [pc, #552]	; (1a1dc <tcp_syn_rcvd+0x35c>)
   19fb2:	fb08 6101 	mla	r1, r8, r1, r6
   19fb6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   19fba:	3128      	adds	r1, #40	; 0x28
   19fbc:	f008 f99e 	bl	222fc <k_delayed_work_submit_to_queue>
	if (context->flags & NET_CONTEXT_FAMILY) {
   19fc0:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   19fc4:	4639      	mov	r1, r7
		return AF_INET6;
   19fc6:	f013 0f10 	tst.w	r3, #16
   19fca:	4628      	mov	r0, r5
   19fcc:	bf0c      	ite	eq
   19fce:	f04f 0802 	moveq.w	r8, #2
   19fd2:	f04f 080a 	movne.w	r8, #10
   19fd6:	f006 f9c1 	bl	2035c <net_tcp_get_hdr>
	if (!tcp_hdr) {
   19fda:	4606      	mov	r6, r0
   19fdc:	b198      	cbz	r0, 1a006 <tcp_syn_rcvd+0x186>
	memset(addr, 0, sizeof(*addr));
   19fde:	220c      	movs	r2, #12
   19fe0:	2100      	movs	r1, #0
   19fe2:	a805      	add	r0, sp, #20
   19fe4:	f7e6 fc01 	bl	7ea <memset>
	if (family == AF_INET6) {
   19fe8:	f1b8 0f0a 	cmp.w	r8, #10
   19fec:	d10b      	bne.n	1a006 <tcp_syn_rcvd+0x186>
		addr6->sin6_family = AF_INET6;
   19fee:	f8ad 8014 	strh.w	r8, [sp, #20]
		addr6->sin6_port = tcp_hdr->dst_port;
   19ff2:	78b3      	ldrb	r3, [r6, #2]
   19ff4:	78f2      	ldrb	r2, [r6, #3]
   19ff6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   19ffa:	f8ad 3016 	strh.w	r3, [sp, #22]
	return pkt->frags->data;
   19ffe:	68ab      	ldr	r3, [r5, #8]
		addr6->sin6_addr = &NET_IPV6_HDR(pkt)->dst;
   1a000:	689b      	ldr	r3, [r3, #8]
   1a002:	3318      	adds	r3, #24
   1a004:	9306      	str	r3, [sp, #24]
	return send_syn_segment(context, local, remote,
   1a006:	2312      	movs	r3, #18
   1a008:	aa18      	add	r2, sp, #96	; 0x60
   1a00a:	a905      	add	r1, sp, #20
   1a00c:	f104 0060 	add.w	r0, r4, #96	; 0x60
   1a010:	f7ff fb06 	bl	19620 <send_syn_segment.isra.26>
   1a014:	e745      	b.n	19ea2 <tcp_syn_rcvd+0x22>
	if (NET_TCP_FLAGS(tcp_hdr) == NET_TCP_RST) {
   1a016:	2b04      	cmp	r3, #4
   1a018:	d124      	bne.n	1a064 <tcp_syn_rcvd+0x1e4>
	r = tcp_backlog_find(pkt, NULL);
   1a01a:	2100      	movs	r1, #0
   1a01c:	4628      	mov	r0, r5
   1a01e:	f7ff faa1 	bl	19564 <tcp_backlog_find>
	if (r < 0) {
   1a022:	1e06      	subs	r6, r0, #0
   1a024:	f6ff af3d 	blt.w	19ea2 <tcp_syn_rcvd+0x22>
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   1a028:	a90d      	add	r1, sp, #52	; 0x34
   1a02a:	4628      	mov	r0, r5
   1a02c:	f006 f996 	bl	2035c <net_tcp_get_hdr>
	if (!tcp_hdr) {
   1a030:	2800      	cmp	r0, #0
   1a032:	f43f af36 	beq.w	19ea2 <tcp_syn_rcvd+0x22>
	if (tcp_backlog[r].send_ack != sys_get_be32(tcp_hdr->seq)) {
   1a036:	3004      	adds	r0, #4
   1a038:	f7ff fa2c 	bl	19494 <sys_get_be32>
   1a03c:	2750      	movs	r7, #80	; 0x50
   1a03e:	4a65      	ldr	r2, [pc, #404]	; (1a1d4 <tcp_syn_rcvd+0x354>)
   1a040:	fb07 f306 	mul.w	r3, r7, r6
   1a044:	18d5      	adds	r5, r2, r3
   1a046:	6a29      	ldr	r1, [r5, #32]
   1a048:	4281      	cmp	r1, r0
   1a04a:	f47f af2a 	bne.w	19ea2 <tcp_syn_rcvd+0x22>
	k_delayed_work_cancel(&tcp_backlog[r].ack_timer);
   1a04e:	f103 0028 	add.w	r0, r3, #40	; 0x28
   1a052:	4410      	add	r0, r2
   1a054:	f008 f8f8 	bl	22248 <k_delayed_work_cancel>
	memset(&tcp_backlog[r], 0, sizeof(struct tcp_backlog_entry));
   1a058:	463a      	mov	r2, r7
   1a05a:	2100      	movs	r1, #0
   1a05c:	4628      	mov	r0, r5
   1a05e:	f7e6 fbc4 	bl	7ea <memset>
   1a062:	e71e      	b.n	19ea2 <tcp_syn_rcvd+0x22>
	if (NET_TCP_FLAGS(tcp_hdr) == NET_TCP_ACK) {
   1a064:	2b10      	cmp	r3, #16
   1a066:	f47f af1c 	bne.w	19ea2 <tcp_syn_rcvd+0x22>
		if (!context->tcp->accept_cb) {
   1a06a:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1a06c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
   1a070:	2b00      	cmp	r3, #0
   1a072:	d04e      	beq.n	1a112 <tcp_syn_rcvd+0x292>
	return pkt->family;
   1a074:	f895 003c 	ldrb.w	r0, [r5, #60]	; 0x3c
		ret = net_context_get(net_pkt_family(pkt),
   1a078:	ab05      	add	r3, sp, #20
   1a07a:	2206      	movs	r2, #6
   1a07c:	2101      	movs	r1, #1
   1a07e:	f3c0 00c3 	ubfx	r0, r0, #3, #4
   1a082:	f7ff fb89 	bl	19798 <net_context_get>
		if (ret < 0) {
   1a086:	2800      	cmp	r0, #0
   1a088:	db43      	blt.n	1a112 <tcp_syn_rcvd+0x292>
	r = tcp_backlog_find(pkt, NULL);
   1a08a:	2100      	movs	r1, #0
   1a08c:	4628      	mov	r0, r5
		ret = tcp_backlog_ack(pkt, new_context);
   1a08e:	f8dd a014 	ldr.w	sl, [sp, #20]
	r = tcp_backlog_find(pkt, NULL);
   1a092:	f7ff fa67 	bl	19564 <tcp_backlog_find>
	if (r < 0) {
   1a096:	1e07      	subs	r7, r0, #0
   1a098:	db67      	blt.n	1a16a <tcp_syn_rcvd+0x2ea>
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   1a09a:	a90d      	add	r1, sp, #52	; 0x34
   1a09c:	4628      	mov	r0, r5
   1a09e:	f006 f95d 	bl	2035c <net_tcp_get_hdr>
	if (!tcp_hdr) {
   1a0a2:	2800      	cmp	r0, #0
   1a0a4:	d061      	beq.n	1a16a <tcp_syn_rcvd+0x2ea>
	if (tcp_backlog[r].send_seq + 1 != sys_get_be32(tcp_hdr->ack)) {
   1a0a6:	f8df 812c 	ldr.w	r8, [pc, #300]	; 1a1d4 <tcp_syn_rcvd+0x354>
   1a0aa:	f04f 0950 	mov.w	r9, #80	; 0x50
   1a0ae:	fb09 f507 	mul.w	r5, r9, r7
   1a0b2:	eb08 0705 	add.w	r7, r8, r5
   1a0b6:	3008      	adds	r0, #8
   1a0b8:	f7ff f9ec 	bl	19494 <sys_get_be32>
   1a0bc:	69fb      	ldr	r3, [r7, #28]
   1a0be:	3301      	adds	r3, #1
   1a0c0:	4283      	cmp	r3, r0
   1a0c2:	d152      	bne.n	1a16a <tcp_syn_rcvd+0x2ea>
	memcpy(&context->remote, &tcp_backlog[r].remote,
   1a0c4:	1d29      	adds	r1, r5, #4
   1a0c6:	4441      	add	r1, r8
   1a0c8:	2218      	movs	r2, #24
   1a0ca:	f10a 0014 	add.w	r0, sl, #20
   1a0ce:	f7e6 fb60 	bl	792 <memcpy>
	context->tcp->send_seq = tcp_backlog[r].send_seq + 1;
   1a0d2:	69fa      	ldr	r2, [r7, #28]
   1a0d4:	f8da 3060 	ldr.w	r3, [sl, #96]	; 0x60
   1a0d8:	3201      	adds	r2, #1
   1a0da:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	context->tcp->send_ack = tcp_backlog[r].send_ack;
   1a0de:	6a3a      	ldr	r2, [r7, #32]
   1a0e0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	k_delayed_work_cancel(&tcp_backlog[r].ack_timer);
   1a0e4:	f105 0028 	add.w	r0, r5, #40	; 0x28
	context->tcp->send_mss = tcp_backlog[r].send_mss;
   1a0e8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
   1a0ea:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
	k_delayed_work_cancel(&tcp_backlog[r].ack_timer);
   1a0ee:	4440      	add	r0, r8
   1a0f0:	f008 f8aa 	bl	22248 <k_delayed_work_cancel>
	memset(&tcp_backlog[r], 0, sizeof(struct tcp_backlog_entry));
   1a0f4:	464a      	mov	r2, r9
   1a0f6:	2100      	movs	r1, #0
   1a0f8:	4638      	mov	r0, r7
   1a0fa:	f7e6 fb76 	bl	7ea <memset>
		ret = net_context_bind(new_context, &local_addr,
   1a0fe:	2218      	movs	r2, #24
   1a100:	a912      	add	r1, sp, #72	; 0x48
   1a102:	9805      	ldr	r0, [sp, #20]
   1a104:	f7ff fdba 	bl	19c7c <net_context_bind>
		if (ret < 0) {
   1a108:	2800      	cmp	r0, #0
			net_context_unref(new_context);
   1a10a:	9805      	ldr	r0, [sp, #20]
		if (ret < 0) {
   1a10c:	da08      	bge.n	1a120 <tcp_syn_rcvd+0x2a0>
			net_context_unref(new_context);
   1a10e:	f7ff fc25 	bl	1995c <net_context_unref>
	send_reset(tcp->context, &local_addr, &remote_addr);
   1a112:	6833      	ldr	r3, [r6, #0]
   1a114:	aa18      	add	r2, sp, #96	; 0x60
   1a116:	a912      	add	r1, sp, #72	; 0x48
   1a118:	6e18      	ldr	r0, [r3, #96]	; 0x60
   1a11a:	f7ff fa59 	bl	195d0 <send_reset.isra.25>
   1a11e:	e6c0      	b.n	19ea2 <tcp_syn_rcvd+0x22>
		new_context->flags |= NET_CONTEXT_REMOTE_ADDR_SET;
   1a120:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
   1a124:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1a128:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
		memcpy(&new_context->remote, &remote_addr,
   1a12c:	2218      	movs	r2, #24
   1a12e:	a918      	add	r1, sp, #96	; 0x60
   1a130:	3014      	adds	r0, #20
   1a132:	f7e6 fb2e 	bl	792 <memcpy>
		ret = net_tcp_register(&new_context->remote,
   1a136:	9905      	ldr	r1, [sp, #20]
			       ntohs(net_sin(&local_addr)->sin_port),
   1a138:	f8bd 004a 	ldrh.w	r0, [sp, #74]	; 0x4a
			       ntohs(net_sin(&new_context->remote)->sin_port),
   1a13c:	8aca      	ldrh	r2, [r1, #22]
	return net_conn_register(IPPROTO_TCP, remote_addr, local_addr,
   1a13e:	9102      	str	r1, [sp, #8]
   1a140:	0a13      	lsrs	r3, r2, #8
   1a142:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		ret = net_tcp_register(&new_context->remote,
   1a146:	f101 022c 	add.w	r2, r1, #44	; 0x2c
   1a14a:	9203      	str	r2, [sp, #12]
   1a14c:	4a24      	ldr	r2, [pc, #144]	; (1a1e0 <tcp_syn_rcvd+0x360>)
   1a14e:	9201      	str	r2, [sp, #4]
			       ntohs(net_sin(&local_addr)->sin_port),
   1a150:	0a02      	lsrs	r2, r0, #8
   1a152:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
   1a156:	b292      	uxth	r2, r2
   1a158:	9200      	str	r2, [sp, #0]
   1a15a:	b29b      	uxth	r3, r3
   1a15c:	aa12      	add	r2, sp, #72	; 0x48
   1a15e:	3114      	adds	r1, #20
   1a160:	2006      	movs	r0, #6
   1a162:	f005 fc57 	bl	1fa14 <net_conn_register>
		if (ret < 0) {
   1a166:	2800      	cmp	r0, #0
   1a168:	da01      	bge.n	1a16e <tcp_syn_rcvd+0x2ee>
			net_context_unref(new_context);
   1a16a:	9805      	ldr	r0, [sp, #20]
   1a16c:	e7cf      	b.n	1a10e <tcp_syn_rcvd+0x28e>
		new_tcp = new_context->tcp;
   1a16e:	9b05      	ldr	r3, [sp, #20]
		new_tcp->accept_cb = NULL;
   1a170:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   1a172:	2100      	movs	r1, #0
   1a174:	f8c2 10c0 	str.w	r1, [r2, #192]	; 0xc0
	new_context->tx_slab = listen_context->tx_slab;
   1a178:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   1a17a:	63da      	str	r2, [r3, #60]	; 0x3c
	new_context->data_pool = listen_context->data_pool;
   1a17c:	6c22      	ldr	r2, [r4, #64]	; 0x40
   1a17e:	641a      	str	r2, [r3, #64]	; 0x40
		net_tcp_change_state(tcp, NET_TCP_LISTEN);
   1a180:	2101      	movs	r1, #1
   1a182:	4630      	mov	r0, r6
   1a184:	f005 ff68 	bl	20058 <net_tcp_change_state>
		new_context->tcp->state = NET_TCP_ESTABLISHED;
   1a188:	9805      	ldr	r0, [sp, #20]
   1a18a:	6e03      	ldr	r3, [r0, #96]	; 0x60
   1a18c:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
   1a190:	2104      	movs	r1, #4
   1a192:	f361 3250 	bfi	r2, r1, #13, #4
   1a196:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	context->flags &= ~(NET_CONTEXT_STATE_MASK << NET_CONTEXT_STATE_SHIFT);
   1a19a:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
   1a19e:	f023 0306 	bic.w	r3, r3, #6
	context->flags |= ((state & NET_CONTEXT_STATE_MASK) <<
   1a1a2:	430b      	orrs	r3, r1
   1a1a4:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
		if (new_context->remote.sa_family == AF_INET) {
   1a1a8:	8a83      	ldrh	r3, [r0, #20]
   1a1aa:	2b02      	cmp	r3, #2
   1a1ac:	d004      	beq.n	1a1b8 <tcp_syn_rcvd+0x338>
		} else if (new_context->remote.sa_family == AF_INET6) {
   1a1ae:	2b0a      	cmp	r3, #10
   1a1b0:	d00d      	beq.n	1a1ce <tcp_syn_rcvd+0x34e>
			net_context_unref(new_context);
   1a1b2:	f7ff fbd3 	bl	1995c <net_context_unref>
   1a1b6:	e674      	b.n	19ea2 <tcp_syn_rcvd+0x22>
			addrlen = sizeof(struct sockaddr_in);
   1a1b8:	2208      	movs	r2, #8
		context->tcp->accept_cb(new_context,
   1a1ba:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1a1bc:	6821      	ldr	r1, [r4, #0]
   1a1be:	9100      	str	r1, [sp, #0]
   1a1c0:	f8d3 50c0 	ldr.w	r5, [r3, #192]	; 0xc0
   1a1c4:	f100 0114 	add.w	r1, r0, #20
   1a1c8:	2300      	movs	r3, #0
   1a1ca:	47a8      	blx	r5
   1a1cc:	e669      	b.n	19ea2 <tcp_syn_rcvd+0x22>
			addrlen = sizeof(struct sockaddr_in6);
   1a1ce:	2218      	movs	r2, #24
   1a1d0:	e7f3      	b.n	1a1ba <tcp_syn_rcvd+0x33a>
   1a1d2:	bf00      	nop
   1a1d4:	20002658 	.word	0x20002658
   1a1d8:	000195fb 	.word	0x000195fb
   1a1dc:	20003340 	.word	0x20003340
   1a1e0:	00019a41 	.word	0x00019a41

0001a1e4 <net_context_listen>:
{
   1a1e4:	b510      	push	{r4, lr}
   1a1e6:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
	if (!net_context_is_used(context)) {
   1a1ea:	07da      	lsls	r2, r3, #31
{
   1a1ec:	4604      	mov	r4, r0
	if (!net_context_is_used(context)) {
   1a1ee:	d504      	bpl.n	1a1fa <net_context_listen+0x16>
	if (context->flags & NET_CONTEXT_PROTO) {
   1a1f0:	065b      	lsls	r3, r3, #25
   1a1f2:	d405      	bmi.n	1a200 <net_context_listen+0x1c>
	return -EOPNOTSUPP;
   1a1f4:	f06f 002c 	mvn.w	r0, #44	; 0x2c
   1a1f8:	bd10      	pop	{r4, pc}
		return -EBADF;
   1a1fa:	f06f 0008 	mvn.w	r0, #8
   1a1fe:	bd10      	pop	{r4, pc}
		net_tcp_change_state(context->tcp, NET_TCP_LISTEN);
   1a200:	2101      	movs	r1, #1
   1a202:	6e00      	ldr	r0, [r0, #96]	; 0x60
   1a204:	f005 ff28 	bl	20058 <net_tcp_change_state>
	context->flags &= ~(NET_CONTEXT_STATE_MASK << NET_CONTEXT_STATE_SHIFT);
   1a208:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1a20c:	f023 0306 	bic.w	r3, r3, #6
	context->flags |= ((state & NET_CONTEXT_STATE_MASK) <<
   1a210:	f043 0306 	orr.w	r3, r3, #6
   1a214:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		return 0;
   1a218:	2000      	movs	r0, #0
}
   1a21a:	bd10      	pop	{r4, pc}

0001a21c <net_context_accept>:
{
   1a21c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a220:	f890 705d 	ldrb.w	r7, [r0, #93]	; 0x5d
   1a224:	4604      	mov	r4, r0
	if (!net_context_is_used(context)) {
   1a226:	07f8      	lsls	r0, r7, #31
{
   1a228:	b08e      	sub	sp, #56	; 0x38
   1a22a:	460d      	mov	r5, r1
   1a22c:	461e      	mov	r6, r3
	if (!net_context_is_used(context)) {
   1a22e:	d54e      	bpl.n	1a2ce <net_context_accept+0xb2>
	if ((net_context_get_state(context) != NET_CONTEXT_LISTENING) &&
   1a230:	f3c7 0341 	ubfx	r3, r7, #1, #2
   1a234:	2b03      	cmp	r3, #3
   1a236:	d001      	beq.n	1a23c <net_context_accept+0x20>
	if (context->flags & NET_CONTEXT_TYPE) {
   1a238:	06b9      	lsls	r1, r7, #26
   1a23a:	d552      	bpl.n	1a2e2 <net_context_accept+0xc6>
	if (context->flags & NET_CONTEXT_PROTO) {
   1a23c:	067a      	lsls	r2, r7, #25
   1a23e:	d449      	bmi.n	1a2d4 <net_context_accept+0xb8>
		return AF_INET6;
   1a240:	f017 0f10 	tst.w	r7, #16
   1a244:	bf0c      	ite	eq
   1a246:	2302      	moveq	r3, #2
   1a248:	230a      	movne	r3, #10
	if (net_context_get_family(context) == AF_INET6) {
   1a24a:	2b0a      	cmp	r3, #10
	local_addr.sa_family = net_context_get_family(context);
   1a24c:	f8ad 3020 	strh.w	r3, [sp, #32]
	if (net_context_get_family(context) == AF_INET6) {
   1a250:	d13a      	bne.n	1a2c8 <net_context_accept+0xac>
		if (net_sin6_ptr(&context->local)->sin6_addr) {
   1a252:	68e2      	ldr	r2, [r4, #12]
   1a254:	b19a      	cbz	r2, 1a27e <net_context_accept+0x62>
			net_ipaddr_copy(&net_sin6(&local_addr)->sin6_addr,
   1a256:	f10d 0e10 	add.w	lr, sp, #16
   1a25a:	f102 0810 	add.w	r8, r2, #16
   1a25e:	4673      	mov	r3, lr
   1a260:	6810      	ldr	r0, [r2, #0]
   1a262:	6851      	ldr	r1, [r2, #4]
   1a264:	46f4      	mov	ip, lr
   1a266:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   1a26a:	3208      	adds	r2, #8
   1a26c:	4542      	cmp	r2, r8
   1a26e:	46e6      	mov	lr, ip
   1a270:	d1f6      	bne.n	1a260 <net_context_accept+0x44>
   1a272:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1a274:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
   1a278:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
			laddr = &local_addr;
   1a27c:	aa08      	add	r2, sp, #32
		net_sin6(&local_addr)->sin6_port = lport =
   1a27e:	8960      	ldrh	r0, [r4, #10]
   1a280:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
	ret = net_tcp_register(context->flags & NET_CONTEXT_REMOTE_ADDR_SET ?
   1a284:	063b      	lsls	r3, r7, #24
			       ntohs(net_sin(&context->remote)->sin_port),
   1a286:	8ae7      	ldrh	r7, [r4, #22]
   1a288:	9402      	str	r4, [sp, #8]
   1a28a:	ea4f 2317 	mov.w	r3, r7, lsr #8
   1a28e:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
   1a292:	ba40      	rev16	r0, r0
	ret = net_tcp_register(context->flags & NET_CONTEXT_REMOTE_ADDR_SET ?
   1a294:	f104 072c 	add.w	r7, r4, #44	; 0x2c
   1a298:	9703      	str	r7, [sp, #12]
   1a29a:	b280      	uxth	r0, r0
   1a29c:	4f15      	ldr	r7, [pc, #84]	; (1a2f4 <net_context_accept+0xd8>)
   1a29e:	9000      	str	r0, [sp, #0]
   1a2a0:	bf4c      	ite	mi
   1a2a2:	f104 0114 	addmi.w	r1, r4, #20
   1a2a6:	2100      	movpl	r1, #0
   1a2a8:	9701      	str	r7, [sp, #4]
   1a2aa:	b29b      	uxth	r3, r3
   1a2ac:	2006      	movs	r0, #6
   1a2ae:	f005 fbb1 	bl	1fa14 <net_conn_register>
	if (ret < 0) {
   1a2b2:	2800      	cmp	r0, #0
   1a2b4:	db05      	blt.n	1a2c2 <net_context_accept+0xa6>
	if (context->flags & NET_CONTEXT_PROTO) {
   1a2b6:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
	context->user_data = user_data;
   1a2ba:	6026      	str	r6, [r4, #0]
   1a2bc:	f010 0040 	ands.w	r0, r0, #64	; 0x40
   1a2c0:	d112      	bne.n	1a2e8 <net_context_accept+0xcc>
}
   1a2c2:	b00e      	add	sp, #56	; 0x38
   1a2c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	u16_t lport = 0;
   1a2c8:	2000      	movs	r0, #0
	struct sockaddr *laddr = NULL;
   1a2ca:	4602      	mov	r2, r0
   1a2cc:	e7da      	b.n	1a284 <net_context_accept+0x68>
		return -EBADF;
   1a2ce:	f06f 0008 	mvn.w	r0, #8
   1a2d2:	e7f6      	b.n	1a2c2 <net_context_accept+0xa6>
	return (enum net_tcp_state)tcp->state;
   1a2d4:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1a2d6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
		if (net_tcp_get_state(context->tcp) != NET_TCP_LISTEN) {
   1a2da:	f3c3 3343 	ubfx	r3, r3, #13, #4
   1a2de:	2b01      	cmp	r3, #1
   1a2e0:	d0ae      	beq.n	1a240 <net_context_accept+0x24>
		return -EINVAL;
   1a2e2:	f06f 0015 	mvn.w	r0, #21
   1a2e6:	e7ec      	b.n	1a2c2 <net_context_accept+0xa6>
		context->tcp->accept_cb = cb;
   1a2e8:	6e23      	ldr	r3, [r4, #96]	; 0x60
	return 0;
   1a2ea:	2000      	movs	r0, #0
		context->tcp->accept_cb = cb;
   1a2ec:	f8c3 50c0 	str.w	r5, [r3, #192]	; 0xc0
   1a2f0:	e7e7      	b.n	1a2c2 <net_context_accept+0xa6>
   1a2f2:	bf00      	nop
   1a2f4:	00019e81 	.word	0x00019e81

0001a2f8 <net_context_send>:
{
   1a2f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1a2fa:	68c4      	ldr	r4, [r0, #12]
	if (!(context->flags & NET_CONTEXT_REMOTE_ADDR_SET) ||
   1a2fc:	f994 505d 	ldrsb.w	r5, [r4, #93]	; 0x5d
   1a300:	2d00      	cmp	r5, #0
   1a302:	da13      	bge.n	1a32c <net_context_send+0x34>
   1a304:	8ae5      	ldrh	r5, [r4, #22]
   1a306:	b18d      	cbz	r5, 1a32c <net_context_send+0x34>
   1a308:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
	return sendto(pkt, &context->remote, addrlen, cb, timeout, token,
   1a30c:	9300      	str	r3, [sp, #0]
	if (net_pkt_family(pkt) == AF_INET6) {
   1a30e:	f3c2 02c3 	ubfx	r2, r2, #3, #4
   1a312:	2a0a      	cmp	r2, #10
	return sendto(pkt, &context->remote, addrlen, cb, timeout, token,
   1a314:	9a06      	ldr	r2, [sp, #24]
   1a316:	9201      	str	r2, [sp, #4]
   1a318:	460b      	mov	r3, r1
   1a31a:	bf0c      	ite	eq
   1a31c:	2218      	moveq	r2, #24
   1a31e:	2200      	movne	r2, #0
   1a320:	f104 0114 	add.w	r1, r4, #20
   1a324:	f7ff fd20 	bl	19d68 <sendto.isra.33>
}
   1a328:	b003      	add	sp, #12
   1a32a:	bd30      	pop	{r4, r5, pc}
		return -EDESTADDRREQ;
   1a32c:	f06f 0027 	mvn.w	r0, #39	; 0x27
   1a330:	e7fa      	b.n	1a328 <net_context_send+0x30>

0001a332 <net_context_sendto>:
{
   1a332:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a334:	68c7      	ldr	r7, [r0, #12]
   1a336:	f8dd e014 	ldr.w	lr, [sp, #20]
   1a33a:	f897 705d 	ldrb.w	r7, [r7, #93]	; 0x5d
   1a33e:	9c06      	ldr	r4, [sp, #24]
   1a340:	9d07      	ldr	r5, [sp, #28]
   1a342:	067f      	lsls	r7, r7, #25
   1a344:	461e      	mov	r6, r3
   1a346:	d507      	bpl.n	1a358 <net_context_sendto+0x26>
		return net_context_send(pkt, cb, timeout, token, user_data);
   1a348:	9505      	str	r5, [sp, #20]
   1a34a:	4623      	mov	r3, r4
   1a34c:	4672      	mov	r2, lr
   1a34e:	4631      	mov	r1, r6
}
   1a350:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return net_context_send(pkt, cb, timeout, token, user_data);
   1a354:	f7ff bfd0 	b.w	1a2f8 <net_context_send>
	return sendto(pkt, dst_addr, addrlen, cb, timeout, token, user_data);
   1a358:	9506      	str	r5, [sp, #24]
   1a35a:	9405      	str	r4, [sp, #20]
}
   1a35c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return sendto(pkt, dst_addr, addrlen, cb, timeout, token, user_data);
   1a360:	f7ff bd02 	b.w	19d68 <sendto.isra.33>

0001a364 <net_context_recv>:

int net_context_recv(struct net_context *context,
		     net_context_recv_cb_t cb,
		     s32_t timeout,
		     void *user_data)
{
   1a364:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a368:	f890 505d 	ldrb.w	r5, [r0, #93]	; 0x5d
   1a36c:	460f      	mov	r7, r1
	NET_ASSERT(context);

	if (!net_context_is_used(context)) {
   1a36e:	07e9      	lsls	r1, r5, #31
{
   1a370:	b08f      	sub	sp, #60	; 0x3c
   1a372:	4604      	mov	r4, r0
   1a374:	4616      	mov	r6, r2
   1a376:	4698      	mov	r8, r3
	if (!net_context_is_used(context)) {
   1a378:	d558      	bpl.n	1a42c <net_context_recv+0xc8>
   1a37a:	f015 0940 	ands.w	r9, r5, #64	; 0x40
   1a37e:	d13d      	bne.n	1a3fc <net_context_recv+0x98>
	struct sockaddr local_addr = {
   1a380:	2218      	movs	r2, #24
   1a382:	4649      	mov	r1, r9
   1a384:	a808      	add	r0, sp, #32
   1a386:	f7e6 fa30 	bl	7ea <memset>
		return AF_INET6;
   1a38a:	f015 0f10 	tst.w	r5, #16
	if (context->conn_handler) {
   1a38e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1a390:	bf0c      	ite	eq
   1a392:	2302      	moveq	r3, #2
   1a394:	230a      	movne	r3, #10
	struct sockaddr local_addr = {
   1a396:	f8ad 3020 	strh.w	r3, [sp, #32]
	if (context->conn_handler) {
   1a39a:	b118      	cbz	r0, 1a3a4 <net_context_recv+0x40>
		net_conn_unregister(context->conn_handler);
   1a39c:	f005 fb20 	bl	1f9e0 <net_conn_unregister>
		context->conn_handler = NULL;
   1a3a0:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
	ret = bind_default(context);
   1a3a4:	4620      	mov	r0, r4
   1a3a6:	f7ff fcb8 	bl	19d1a <bind_default>
	if (ret) {
   1a3aa:	bb10      	cbnz	r0, 1a3f2 <net_context_recv+0x8e>
   1a3ac:	f894 e05d 	ldrb.w	lr, [r4, #93]	; 0x5d
	if (context->flags & NET_CONTEXT_FAMILY) {
   1a3b0:	f01e 0510 	ands.w	r5, lr, #16
   1a3b4:	d146      	bne.n	1a444 <net_context_recv+0xe0>
	struct sockaddr *laddr = NULL;
   1a3b6:	462a      	mov	r2, r5
	context->recv_cb = cb;
   1a3b8:	6327      	str	r7, [r4, #48]	; 0x30
				ntohs(net_sin(&context->remote)->sin_port),
   1a3ba:	8ae7      	ldrh	r7, [r4, #22]
	ret = net_conn_register(net_context_get_ip_proto(context),
   1a3bc:	f8cd 8008 	str.w	r8, [sp, #8]
				ntohs(net_sin(&context->remote)->sin_port),
   1a3c0:	0a3b      	lsrs	r3, r7, #8
		return IPPROTO_TCP;
   1a3c2:	f01e 0f40 	tst.w	lr, #64	; 0x40
   1a3c6:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
	ret = net_conn_register(net_context_get_ip_proto(context),
   1a3ca:	ba6d      	rev16	r5, r5
   1a3cc:	f104 072c 	add.w	r7, r4, #44	; 0x2c
   1a3d0:	bf0c      	ite	eq
   1a3d2:	2011      	moveq	r0, #17
   1a3d4:	2006      	movne	r0, #6
   1a3d6:	9703      	str	r7, [sp, #12]
   1a3d8:	f01e 0f80 	tst.w	lr, #128	; 0x80
   1a3dc:	4f25      	ldr	r7, [pc, #148]	; (1a474 <net_context_recv+0x110>)
   1a3de:	9701      	str	r7, [sp, #4]
   1a3e0:	b2ad      	uxth	r5, r5
   1a3e2:	bf14      	ite	ne
   1a3e4:	f104 0114 	addne.w	r1, r4, #20
   1a3e8:	2100      	moveq	r1, #0
   1a3ea:	9500      	str	r5, [sp, #0]
   1a3ec:	b29b      	uxth	r3, r3
   1a3ee:	f005 fb11 	bl	1fa14 <net_conn_register>
#endif /* CONFIG_NET_OFFLOAD */

#if defined(CONFIG_NET_UDP)
	if (net_context_get_ip_proto(context) == IPPROTO_UDP) {
		int ret = recv_udp(context, cb, timeout, user_data);
		if (ret < 0) {
   1a3f2:	2800      	cmp	r0, #0
   1a3f4:	da0e      	bge.n	1a414 <net_context_recv+0xb0>
		}
	}
#endif /* CONFIG_NET_CONTEXT_SYNC_RECV */

	return 0;
}
   1a3f6:	b00f      	add	sp, #60	; 0x3c
   1a3f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (context->tcp->flags & NET_TCP_IS_SHUTDOWN) {
   1a3fc:	6e03      	ldr	r3, [r0, #96]	; 0x60
   1a3fe:	f8b3 20bc 	ldrh.w	r2, [r3, #188]	; 0xbc
   1a402:	05d2      	lsls	r2, r2, #23
   1a404:	d415      	bmi.n	1a432 <net_context_recv+0xce>
		} else if (net_context_get_state(context)
   1a406:	f3c5 0541 	ubfx	r5, r5, #1, #2
   1a40a:	2d02      	cmp	r5, #2
   1a40c:	d114      	bne.n	1a438 <net_context_recv+0xd4>
		context->recv_cb = cb;
   1a40e:	6307      	str	r7, [r0, #48]	; 0x30
		context->tcp->recv_user_data = user_data;
   1a410:	f8c3 8004 	str.w	r8, [r3, #4]
	if (timeout) {
   1a414:	b146      	cbz	r6, 1a428 <net_context_recv+0xc4>
 */
__syscall void k_sem_reset(struct k_sem *sem);

static inline void _impl_k_sem_reset(struct k_sem *sem)
{
	sem->count = 0;
   1a416:	2300      	movs	r3, #0
   1a418:	64e3      	str	r3, [r4, #76]	; 0x4c
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   1a41a:	4631      	mov	r1, r6
   1a41c:	f104 0044 	add.w	r0, r4, #68	; 0x44
   1a420:	f007 fc28 	bl	21c74 <_impl_k_sem_take>
		if (ret == -EAGAIN) {
   1a424:	300b      	adds	r0, #11
   1a426:	d00a      	beq.n	1a43e <net_context_recv+0xda>
	return 0;
   1a428:	2000      	movs	r0, #0
   1a42a:	e7e4      	b.n	1a3f6 <net_context_recv+0x92>
		return -EBADF;
   1a42c:	f06f 0008 	mvn.w	r0, #8
   1a430:	e7e1      	b.n	1a3f6 <net_context_recv+0x92>
			return -ESHUTDOWN;
   1a432:	f06f 0039 	mvn.w	r0, #57	; 0x39
   1a436:	e7de      	b.n	1a3f6 <net_context_recv+0x92>
			return -ENOTCONN;
   1a438:	f06f 0038 	mvn.w	r0, #56	; 0x38
   1a43c:	e7db      	b.n	1a3f6 <net_context_recv+0x92>
			return -ETIMEDOUT;
   1a43e:	f06f 003b 	mvn.w	r0, #59	; 0x3b
   1a442:	e7d8      	b.n	1a3f6 <net_context_recv+0x92>
		if (net_sin6_ptr(&context->local)->sin6_addr) {
   1a444:	68e2      	ldr	r2, [r4, #12]
   1a446:	b18a      	cbz	r2, 1a46c <net_context_recv+0x108>
			net_ipaddr_copy(&net_sin6(&local_addr)->sin6_addr,
   1a448:	ad04      	add	r5, sp, #16
   1a44a:	f102 0910 	add.w	r9, r2, #16
   1a44e:	462b      	mov	r3, r5
   1a450:	6810      	ldr	r0, [r2, #0]
   1a452:	6851      	ldr	r1, [r2, #4]
   1a454:	46ac      	mov	ip, r5
   1a456:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   1a45a:	3208      	adds	r2, #8
   1a45c:	454a      	cmp	r2, r9
   1a45e:	4665      	mov	r5, ip
   1a460:	d1f6      	bne.n	1a450 <net_context_recv+0xec>
   1a462:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1a464:	ad09      	add	r5, sp, #36	; 0x24
   1a466:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
			laddr = &local_addr;
   1a46a:	aa08      	add	r2, sp, #32
			net_sin6((struct sockaddr *)&context->local)->sin6_port;
   1a46c:	8965      	ldrh	r5, [r4, #10]
		net_sin6(&local_addr)->sin6_port =
   1a46e:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
   1a472:	e7a1      	b.n	1a3b8 <net_context_recv+0x54>
   1a474:	0001970d 	.word	0x0001970d

0001a478 <net_context_init>:
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   1a478:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1a47c:	2101      	movs	r1, #1
   1a47e:	4801      	ldr	r0, [pc, #4]	; (1a484 <net_context_init+0xc>)
   1a480:	f007 bb8e 	b.w	21ba0 <_impl_k_sem_init>
   1a484:	20002640 	.word	0x20002640

0001a488 <net_is_ipv6_addr_loopback>:
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1a488:	6802      	ldr	r2, [r0, #0]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1a48a:	b99a      	cbnz	r2, 1a4b4 <net_is_ipv6_addr_loopback+0x2c>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1a48c:	6843      	ldr	r3, [r0, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1a48e:	b98b      	cbnz	r3, 1a4b4 <net_is_ipv6_addr_loopback+0x2c>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1a490:	6882      	ldr	r2, [r0, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1a492:	b97a      	cbnz	r2, 1a4b4 <net_is_ipv6_addr_loopback+0x2c>
		ntohl(UNALIGNED_GET(&addr->s6_addr32[3])) == 1;
   1a494:	68c3      	ldr	r3, [r0, #12]
 *
   1a496:	0618      	lsls	r0, r3, #24

   1a498:	0a1a      	lsrs	r2, r3, #8
 * @brief Check if the IPv6 address is a multicast address.
   1a49a:	ea40 6013 	orr.w	r0, r0, r3, lsr #24

   1a49e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 * @brief Check if the IPv6 address is a multicast address.
   1a4a2:	021b      	lsls	r3, r3, #8
   1a4a4:	4310      	orrs	r0, r2
   1a4a6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   1a4aa:	4318      	orrs	r0, r3
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1a4ac:	1e43      	subs	r3, r0, #1
   1a4ae:	4258      	negs	r0, r3
   1a4b0:	4158      	adcs	r0, r3
   1a4b2:	4770      	bx	lr
   1a4b4:	2000      	movs	r0, #0
   1a4b6:	4770      	bx	lr

0001a4b8 <processing_data>:
		locally_routed = true;
	}
#endif

	/* If there is no data, then drop the packet. */
	if (!pkt->frags) {
   1a4b8:	6883      	ldr	r3, [r0, #8]

	return NET_DROP;
}

static void processing_data(struct net_pkt *pkt, bool is_loopback)
{
   1a4ba:	b510      	push	{r4, lr}
   1a4bc:	4604      	mov	r4, r0
	if (!pkt->frags) {
   1a4be:	b1d3      	cbz	r3, 1a4f6 <processing_data+0x3e>
	if (!is_loopback && !locally_routed) {
   1a4c0:	b189      	cbz	r1, 1a4e6 <processing_data+0x2e>
	return pkt->frags->data;
   1a4c2:	68a3      	ldr	r3, [r4, #8]
	switch (NET_IPV6_HDR(pkt)->vtc & 0xf0) {
   1a4c4:	689b      	ldr	r3, [r3, #8]
   1a4c6:	781b      	ldrb	r3, [r3, #0]
   1a4c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   1a4cc:	2b60      	cmp	r3, #96	; 0x60
   1a4ce:	d112      	bne.n	1a4f6 <processing_data+0x3e>
	pkt->family = family;
   1a4d0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   1a4d4:	220a      	movs	r2, #10
   1a4d6:	f362 03c6 	bfi	r3, r2, #3, #4
   1a4da:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		return net_ipv6_process_pkt(pkt);
   1a4de:	4620      	mov	r0, r4
   1a4e0:	f004 fe74 	bl	1f1cc <net_ipv6_process_pkt>
   1a4e4:	e006      	b.n	1a4f4 <processing_data+0x3c>
   1a4e6:	6940      	ldr	r0, [r0, #20]
 * @return verdict about the packet
 */
static inline enum net_verdict net_if_recv_data(struct net_if *iface,
						struct net_pkt *pkt)
{
	return iface->l2->recv(iface, pkt);
   1a4e8:	6843      	ldr	r3, [r0, #4]
   1a4ea:	4621      	mov	r1, r4
   1a4ec:	681b      	ldr	r3, [r3, #0]
   1a4ee:	4798      	blx	r3
		if (ret != NET_CONTINUE) {
   1a4f0:	2801      	cmp	r0, #1
   1a4f2:	d0e6      	beq.n	1a4c2 <processing_data+0xa>
	switch (process_data(pkt, is_loopback)) {
   1a4f4:	b120      	cbz	r0, 1a500 <processing_data+0x48>
		NET_DBG("Consumed pkt %p", pkt);
		break;
	case NET_DROP:
	default:
		NET_DBG("Dropping pkt %p", pkt);
		net_pkt_unref(pkt);
   1a4f6:	4620      	mov	r0, r4
		break;
	}
}
   1a4f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		net_pkt_unref(pkt);
   1a4fc:	f001 b9c7 	b.w	1b88e <net_pkt_unref>
   1a500:	bd10      	pop	{r4, pc}
	...

0001a504 <net_init>:

	NET_DBG("Network L2 init done");
}

static int net_init(struct device *unused)
{
   1a504:	b510      	push	{r4, lr}
   1a506:	b086      	sub	sp, #24

	net_hostname_init();

	NET_DBG("Priority %d", CONFIG_NET_INIT_PRIO);

	net_pkt_init();
   1a508:	f001 fcbf 	bl	1be8a <net_pkt_init>

	net_context_init();
   1a50c:	f7ff ffb4 	bl	1a478 <net_context_init>
	net_icmpv6_init();
   1a510:	f002 ffb0 	bl	1d474 <net_icmpv6_init>
	net_ipv6_init();
   1a514:	f004 ffaa 	bl	1f46c <net_ipv6_init>
	net_conn_init();
   1a518:	f005 fc04 	bl	1fd24 <net_conn_init>
	net_udp_init();
   1a51c:	f006 fbea 	bl	20cf4 <net_udp_init>
	net_tcp_init();
   1a520:	f005 fd99 	bl	20056 <net_tcp_init>
	net_route_init();
   1a524:	f005 fa29 	bl	1f97a <net_route_init>

	l2_init();
	l3_init();

	net_mgmt_event_init();
   1a528:	f005 f8a2 	bl	1f670 <net_mgmt_event_init>
	k_fifo_init(&rx_queue);
   1a52c:	480b      	ldr	r0, [pc, #44]	; (1a55c <net_init+0x58>)
   1a52e:	f007 f8c5 	bl	216bc <k_queue_init>

   1a532:	2301      	movs	r3, #1
   1a534:	2400      	movs	r4, #0
   1a536:	9304      	str	r3, [sp, #16]
   1a538:	f06f 0307 	mvn.w	r3, #7
   1a53c:	9303      	str	r3, [sp, #12]
   1a53e:	9405      	str	r4, [sp, #20]
   1a540:	9402      	str	r4, [sp, #8]
   1a542:	9401      	str	r4, [sp, #4]
   1a544:	9400      	str	r4, [sp, #0]
   1a546:	4b06      	ldr	r3, [pc, #24]	; (1a560 <net_init+0x5c>)
   1a548:	4906      	ldr	r1, [pc, #24]	; (1a564 <net_init+0x60>)
   1a54a:	4807      	ldr	r0, [pc, #28]	; (1a568 <net_init+0x64>)
   1a54c:	f240 52dc 	movw	r2, #1500	; 0x5dc
   1a550:	f007 fd6c 	bl	2202c <_impl_k_thread_create>
		return status;
	}
#endif

	return status;
}
   1a554:	4620      	mov	r0, r4
   1a556:	b006      	add	sp, #24
   1a558:	bd10      	pop	{r4, pc}
   1a55a:	bf00      	nop
   1a55c:	200026a8 	.word	0x200026a8
   1a560:	0001a56d 	.word	0x0001a56d
   1a564:	20006138 	.word	0x20006138
   1a568:	200026b8 	.word	0x200026b8

0001a56c <net_rx_thread>:
{
   1a56c:	b538      	push	{r3, r4, r5, lr}
	net_if_init(&startup_sync);
   1a56e:	4810      	ldr	r0, [pc, #64]	; (1a5b0 <net_rx_thread+0x44>)
		pkt = k_fifo_get(&rx_queue, K_FOREVER);
   1a570:	4d10      	ldr	r5, [pc, #64]	; (1a5b4 <net_rx_thread+0x48>)
		if ((unsigned char)stack[i] == 0xaa) {
   1a572:	4c11      	ldr	r4, [pc, #68]	; (1a5b8 <net_rx_thread+0x4c>)
	net_if_init(&startup_sync);
   1a574:	f000 ffb8 	bl	1b4e8 <net_if_init>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   1a578:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a57c:	480c      	ldr	r0, [pc, #48]	; (1a5b0 <net_rx_thread+0x44>)
   1a57e:	f007 fb79 	bl	21c74 <_impl_k_sem_take>
	net_if_post_init();
   1a582:	f000 ffff 	bl	1b584 <net_if_post_init>
		pkt = k_fifo_get(&rx_queue, K_FOREVER);
   1a586:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a58a:	4628      	mov	r0, r5
   1a58c:	f007 f8eb 	bl	21766 <k_queue_get>
	for (i = 0; i < size; i++) {
   1a590:	2300      	movs	r3, #0
   1a592:	f240 52dc 	movw	r2, #1500	; 0x5dc
		if ((unsigned char)stack[i] == 0xaa) {
   1a596:	5d19      	ldrb	r1, [r3, r4]
   1a598:	29aa      	cmp	r1, #170	; 0xaa
   1a59a:	d102      	bne.n	1a5a2 <net_rx_thread+0x36>
	for (i = 0; i < size; i++) {
   1a59c:	3301      	adds	r3, #1
   1a59e:	4293      	cmp	r3, r2
   1a5a0:	d1f9      	bne.n	1a596 <net_rx_thread+0x2a>
		processing_data(pkt, false);
   1a5a2:	2100      	movs	r1, #0
   1a5a4:	f7ff ff88 	bl	1a4b8 <processing_data>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   1a5a8:	f007 fa88 	bl	21abc <_impl_k_yield>
   1a5ac:	e7eb      	b.n	1a586 <net_rx_thread+0x1a>
   1a5ae:	bf00      	nop
   1a5b0:	2000a9fc 	.word	0x2000a9fc
   1a5b4:	200026a8 	.word	0x200026a8
   1a5b8:	20006138 	.word	0x20006138

0001a5bc <net_send_data>:
{
   1a5bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (!pkt || !pkt->frags) {
   1a5c0:	4604      	mov	r4, r0
{
   1a5c2:	b091      	sub	sp, #68	; 0x44
	if (!pkt || !pkt->frags) {
   1a5c4:	2800      	cmp	r0, #0
   1a5c6:	d07f      	beq.n	1a6c8 <net_send_data+0x10c>
   1a5c8:	6882      	ldr	r2, [r0, #8]
   1a5ca:	2a00      	cmp	r2, #0
   1a5cc:	d07c      	beq.n	1a6c8 <net_send_data+0x10c>
	if (!net_pkt_iface(pkt)) {
   1a5ce:	6943      	ldr	r3, [r0, #20]
   1a5d0:	2b00      	cmp	r3, #0
   1a5d2:	d07c      	beq.n	1a6ce <net_send_data+0x112>
	return pkt->family;
   1a5d4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
	if (net_pkt_family(pkt) == AF_INET6) {
   1a5d8:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   1a5dc:	2b0a      	cmp	r3, #10
   1a5de:	d169      	bne.n	1a6b4 <net_send_data+0xf8>
		if (net_ipv6_addr_cmp(&NET_IPV6_HDR(pkt)->dst,
   1a5e0:	6895      	ldr	r5, [r2, #8]
   1a5e2:	f003 f9df 	bl	1d9a4 <net_ipv6_unspecified_address>
   1a5e6:	3518      	adds	r5, #24
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1a5e8:	4601      	mov	r1, r0
   1a5ea:	2210      	movs	r2, #16
   1a5ec:	4628      	mov	r0, r5
   1a5ee:	f7e6 f8a3 	bl	738 <memcmp>
   1a5f2:	b920      	cbnz	r0, 1a5fe <net_send_data+0x42>
		return -EINVAL;
   1a5f4:	f06f 0030 	mvn.w	r0, #48	; 0x30
}
   1a5f8:	b011      	add	sp, #68	; 0x44
   1a5fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return pkt->frags->data;
   1a5fe:	68a3      	ldr	r3, [r4, #8]
		if (net_is_ipv6_addr_loopback(&NET_IPV6_HDR(pkt)->dst) ||
   1a600:	689d      	ldr	r5, [r3, #8]
   1a602:	3518      	adds	r5, #24
   1a604:	4628      	mov	r0, r5
   1a606:	f7ff ff3f 	bl	1a488 <net_is_ipv6_addr_loopback>
   1a60a:	4601      	mov	r1, r0
   1a60c:	2800      	cmp	r0, #0
   1a60e:	d045      	beq.n	1a69c <net_send_data+0xe0>
   1a610:	68a3      	ldr	r3, [r4, #8]
   1a612:	f8d3 e008 	ldr.w	lr, [r3, #8]
			net_ipaddr_copy(&addr, &NET_IPV6_HDR(pkt)->src);
   1a616:	aa0c      	add	r2, sp, #48	; 0x30
   1a618:	f10e 0308 	add.w	r3, lr, #8
   1a61c:	f10e 0618 	add.w	r6, lr, #24
   1a620:	461d      	mov	r5, r3
   1a622:	4694      	mov	ip, r2
   1a624:	6818      	ldr	r0, [r3, #0]
   1a626:	6859      	ldr	r1, [r3, #4]
   1a628:	4617      	mov	r7, r2
   1a62a:	c703      	stmia	r7!, {r0, r1}
   1a62c:	3308      	adds	r3, #8
   1a62e:	42b3      	cmp	r3, r6
   1a630:	463a      	mov	r2, r7
   1a632:	d1f7      	bne.n	1a624 <net_send_data+0x68>
   1a634:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1a638:	f10d 0820 	add.w	r8, sp, #32
			net_ipaddr_copy(&addr, &NET_IPV6_HDR(pkt)->src);
   1a63c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   1a640:	466f      	mov	r7, sp
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1a642:	f10e 0328 	add.w	r3, lr, #40	; 0x28
   1a646:	4632      	mov	r2, r6
   1a648:	46c6      	mov	lr, r8
   1a64a:	6810      	ldr	r0, [r2, #0]
   1a64c:	6851      	ldr	r1, [r2, #4]
   1a64e:	46c1      	mov	r9, r8
   1a650:	e8a9 0003 	stmia.w	r9!, {r0, r1}
   1a654:	3208      	adds	r2, #8
   1a656:	429a      	cmp	r2, r3
   1a658:	46c8      	mov	r8, r9
   1a65a:	d1f6      	bne.n	1a64a <net_send_data+0x8e>
   1a65c:	46f0      	mov	r8, lr
   1a65e:	462b      	mov	r3, r5
   1a660:	4642      	mov	r2, r8
   1a662:	ca03      	ldmia	r2!, {r0, r1}
   1a664:	4562      	cmp	r2, ip
   1a666:	6018      	str	r0, [r3, #0]
   1a668:	6059      	str	r1, [r3, #4]
   1a66a:	4690      	mov	r8, r2
   1a66c:	f103 0308 	add.w	r3, r3, #8
   1a670:	d1f6      	bne.n	1a660 <net_send_data+0xa4>
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, &addr);
   1a672:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
   1a676:	ad04      	add	r5, sp, #16
   1a678:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   1a67c:	4633      	mov	r3, r6
   1a67e:	462a      	mov	r2, r5
   1a680:	ca03      	ldmia	r2!, {r0, r1}
   1a682:	4572      	cmp	r2, lr
   1a684:	6018      	str	r0, [r3, #0]
   1a686:	6059      	str	r1, [r3, #4]
   1a688:	4615      	mov	r5, r2
   1a68a:	f103 0308 	add.w	r3, r3, #8
   1a68e:	d1f6      	bne.n	1a67e <net_send_data+0xc2>
		processing_data(pkt, true);
   1a690:	4620      	mov	r0, r4
   1a692:	2101      	movs	r1, #1
   1a694:	f7ff ff10 	bl	1a4b8 <processing_data>
		return 0;
   1a698:	2000      	movs	r0, #0
   1a69a:	e7ad      	b.n	1a5f8 <net_send_data+0x3c>
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
   1a69c:	4628      	mov	r0, r5
   1a69e:	f000 f91b 	bl	1a8d8 <net_if_ipv6_addr_lookup>
		if (net_is_ipv6_addr_loopback(&NET_IPV6_HDR(pkt)->dst) ||
   1a6a2:	2800      	cmp	r0, #0
   1a6a4:	d1b4      	bne.n	1a610 <net_send_data+0x54>
   1a6a6:	68a3      	ldr	r3, [r4, #8]
		if (net_is_ipv6_addr_loopback(&NET_IPV6_HDR(pkt)->src)) {
   1a6a8:	6898      	ldr	r0, [r3, #8]
   1a6aa:	3008      	adds	r0, #8
   1a6ac:	f7ff feec 	bl	1a488 <net_is_ipv6_addr_loopback>
   1a6b0:	2800      	cmp	r0, #0
   1a6b2:	d19f      	bne.n	1a5f4 <net_send_data+0x38>
	if (net_if_send_data(net_pkt_iface(pkt), pkt) == NET_DROP) {
   1a6b4:	4621      	mov	r1, r4
   1a6b6:	6960      	ldr	r0, [r4, #20]
   1a6b8:	f000 fdd8 	bl	1b26c <net_if_send_data>
	return 0;
   1a6bc:	2802      	cmp	r0, #2
   1a6be:	bf0c      	ite	eq
   1a6c0:	f06f 0004 	mvneq.w	r0, #4
   1a6c4:	2000      	movne	r0, #0
   1a6c6:	e797      	b.n	1a5f8 <net_send_data+0x3c>
		return -ENODATA;
   1a6c8:	f06f 004d 	mvn.w	r0, #77	; 0x4d
   1a6cc:	e794      	b.n	1a5f8 <net_send_data+0x3c>
		return -EINVAL;
   1a6ce:	f06f 0015 	mvn.w	r0, #21
   1a6d2:	e791      	b.n	1a5f8 <net_send_data+0x3c>

0001a6d4 <net_recv_data>:
	if (!pkt->frags) {
   1a6d4:	688a      	ldr	r2, [r1, #8]
{
   1a6d6:	b508      	push	{r3, lr}
	if (!pkt->frags) {
   1a6d8:	b18a      	cbz	r2, 1a6fe <net_recv_data+0x2a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1a6da:	f3bf 8f5b 	dmb	ish
   1a6de:	68c2      	ldr	r2, [r0, #12]
   1a6e0:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(iface->flags, NET_IF_UP)) {
   1a6e4:	07d2      	lsls	r2, r2, #31
   1a6e6:	d50d      	bpl.n	1a704 <net_recv_data+0x30>
	pkt->iface = iface;
   1a6e8:	6148      	str	r0, [r1, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1a6ea:	7d42      	ldrb	r2, [r0, #21]
   1a6ec:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1a6f0:	f881 202d 	strb.w	r2, [r1, #45]	; 0x2d
	k_fifo_put(&rx_queue, pkt);
   1a6f4:	4805      	ldr	r0, [pc, #20]	; (1a70c <net_recv_data+0x38>)
   1a6f6:	f007 f812 	bl	2171e <k_queue_append>
	return 0;
   1a6fa:	2000      	movs	r0, #0
   1a6fc:	bd08      	pop	{r3, pc}
		return -ENODATA;
   1a6fe:	f06f 004d 	mvn.w	r0, #77	; 0x4d
   1a702:	bd08      	pop	{r3, pc}
		return -ENETDOWN;
   1a704:	f06f 003d 	mvn.w	r0, #61	; 0x3d
}
   1a708:	bd08      	pop	{r3, pc}
   1a70a:	bf00      	nop
   1a70c:	200026a8 	.word	0x200026a8

0001a710 <ipv6_addr_expired>:
						  lifetime);

	NET_DBG("IPv6 address %s is deprecated",
		net_sprint_ipv6_addr(&ifaddr->address.in6_addr));

	ifaddr->addr_state = NET_ADDR_DEPRECATED;
   1a710:	2302      	movs	r3, #2
   1a712:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
   1a716:	4770      	bx	lr

0001a718 <prefix_lf_timeout>:
		CONTAINER_OF(work, struct net_if_ipv6_prefix, lifetime);

	NET_DBG("Prefix %s/%d expired",
		net_sprint_ipv6_addr(&prefix->prefix), prefix->len);

	prefix->is_used = false;
   1a718:	2300      	movs	r3, #0
   1a71a:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
   1a71e:	4770      	bx	lr

0001a720 <ipv6_router_expired>:
						    lifetime);

	NET_DBG("IPv6 router %s is expired",
		net_sprint_ipv6_addr(&router->address.in6_addr));

	router->is_used = false;
   1a720:	2300      	movs	r3, #0
   1a722:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
   1a726:	4770      	bx	lr

0001a728 <net_if_ipv6_get_best_match>:
}

static inline struct in6_addr *net_if_ipv6_get_best_match(struct net_if *iface,
							  struct in6_addr *dst,
							  u8_t *best_so_far)
{
   1a728:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a72c:	f100 0430 	add.w	r4, r0, #48	; 0x30
   1a730:	f500 76ba 	add.w	r6, r0, #372	; 0x174
	    addr->address.family == AF_INET6 &&
   1a734:	f248 08fe 	movw	r8, #33022	; 0x80fe
	struct in6_addr *src = NULL;
   1a738:	2000      	movs	r0, #0
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
   1a73a:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
   1a73e:	b153      	cbz	r3, 1a756 <net_if_ipv6_get_best_match+0x2e>
   1a740:	f994 3061 	ldrsb.w	r3, [r4, #97]	; 0x61
   1a744:	2b01      	cmp	r3, #1
   1a746:	d106      	bne.n	1a756 <net_if_ipv6_get_best_match+0x2e>
   1a748:	f834 3c04 	ldrh.w	r3, [r4, #-4]
   1a74c:	2b0a      	cmp	r3, #10
   1a74e:	d102      	bne.n	1a756 <net_if_ipv6_get_best_match+0x2e>
	    addr->address.family == AF_INET6 &&
   1a750:	8823      	ldrh	r3, [r4, #0]
   1a752:	4543      	cmp	r3, r8
   1a754:	d111      	bne.n	1a77a <net_if_ipv6_get_best_match+0x52>
   1a756:	346c      	adds	r4, #108	; 0x6c
	u8_t i, len;

	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1a758:	42b4      	cmp	r4, r6
   1a75a:	d1ee      	bne.n	1a73a <net_if_ipv6_get_best_match+0x12>
   1a75c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xor = src->s6_addr[j] ^ dst->s6_addr[j];
   1a760:	ea85 0509 	eor.w	r5, r5, r9
   1a764:	b2ff      	uxtb	r7, r7
				if (!(xor & 0x80)) {
   1a766:	f015 0f80 	tst.w	r5, #128	; 0x80
   1a76a:	d116      	bne.n	1a79a <net_if_ipv6_get_best_match+0x72>
					len++;
   1a76c:	3301      	adds	r3, #1
   1a76e:	b2db      	uxtb	r3, r3
					xor <<= 1;
   1a770:	006d      	lsls	r5, r5, #1
			for (k = 0; k < 8; k++) {
   1a772:	42bb      	cmp	r3, r7
					xor <<= 1;
   1a774:	b2ed      	uxtb	r5, r5
			for (k = 0; k < 8; k++) {
   1a776:	d1f6      	bne.n	1a766 <net_if_ipv6_get_best_match+0x3e>
   1a778:	e00f      	b.n	1a79a <net_if_ipv6_get_best_match+0x72>
   1a77a:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
   1a77e:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
	u8_t len = 0;
   1a782:	2300      	movs	r3, #0
		if (src->s6_addr[j] == dst->s6_addr[j]) {
   1a784:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
   1a788:	f81e 9f01 	ldrb.w	r9, [lr, #1]!
   1a78c:	454d      	cmp	r5, r9
   1a78e:	f103 0708 	add.w	r7, r3, #8
   1a792:	d1e5      	bne.n	1a760 <net_if_ipv6_get_best_match+0x38>
			len += 8;
   1a794:	b2fb      	uxtb	r3, r7
	for (j = 0; j < 16; j++) {
   1a796:	2b80      	cmp	r3, #128	; 0x80
   1a798:	d1f4      	bne.n	1a784 <net_if_ipv6_get_best_match+0x5c>
			continue;
		}

		len = get_length(dst,
				 &iface->ipv6.unicast[i].address.in6_addr);
		if (len >= *best_so_far) {
   1a79a:	7815      	ldrb	r5, [r2, #0]
   1a79c:	429d      	cmp	r5, r3
			*best_so_far = len;
   1a79e:	bf9c      	itt	ls
   1a7a0:	7013      	strbls	r3, [r2, #0]
   1a7a2:	4620      	movls	r0, r4
   1a7a4:	e7d7      	b.n	1a756 <net_if_ipv6_get_best_match+0x2e>

0001a7a6 <atomic_test_bit>:
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1a7a6:	094b      	lsrs	r3, r1, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1a7a8:	f3bf 8f5b 	dmb	ish
   1a7ac:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
   1a7b0:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
   1a7b4:	f001 011f 	and.w	r1, r1, #31
   1a7b8:	4108      	asrs	r0, r1
}
   1a7ba:	f000 0001 	and.w	r0, r0, #1
   1a7be:	4770      	bx	lr

0001a7c0 <net_is_ipv6_prefix>:
	if (length > 128) {
   1a7c0:	2a80      	cmp	r2, #128	; 0x80
{
   1a7c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a7c4:	4607      	mov	r7, r0
   1a7c6:	460e      	mov	r6, r1
   1a7c8:	4614      	mov	r4, r2
	if (length > 128) {
   1a7ca:	d901      	bls.n	1a7d0 <net_is_ipv6_prefix+0x10>
		return false;
   1a7cc:	2000      	movs	r0, #0
   1a7ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (memcmp(addr1, addr2, bytes)) {
   1a7d0:	08d5      	lsrs	r5, r2, #3
   1a7d2:	462a      	mov	r2, r5
   1a7d4:	f7e5 ffb0 	bl	738 <memcmp>
   1a7d8:	2800      	cmp	r0, #0
   1a7da:	d1f7      	bne.n	1a7cc <net_is_ipv6_prefix+0xc>
	u8_t bits = 128 - length;
   1a7dc:	f1c4 0480 	rsb	r4, r4, #128	; 0x80
	if (!remain) {
   1a7e0:	f014 0407 	ands.w	r4, r4, #7
   1a7e4:	d00f      	beq.n	1a806 <net_is_ipv6_prefix+0x46>
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
   1a7e6:	5d73      	ldrb	r3, [r6, r5]
   1a7e8:	5d7a      	ldrb	r2, [r7, r5]
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
   1a7ea:	f1c4 0108 	rsb	r1, r4, #8
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
   1a7ee:	405a      	eors	r2, r3
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
   1a7f0:	23ff      	movs	r3, #255	; 0xff
   1a7f2:	408b      	lsls	r3, r1
   1a7f4:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
   1a7f8:	fa03 f404 	lsl.w	r4, r3, r4
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
   1a7fc:	4222      	tst	r2, r4
   1a7fe:	bf0c      	ite	eq
   1a800:	2001      	moveq	r0, #1
   1a802:	2000      	movne	r0, #0
   1a804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return true;
   1a806:	2001      	movs	r0, #1
}
   1a808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001a80a <net_ipv6_addr_cmp>:
{
   1a80a:	b508      	push	{r3, lr}
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1a80c:	2210      	movs	r2, #16
   1a80e:	f7e5 ff93 	bl	738 <memcmp>
}
   1a812:	fab0 f080 	clz	r0, r0
   1a816:	0940      	lsrs	r0, r0, #5
   1a818:	bd08      	pop	{r3, pc}
	...

0001a81c <k_delayed_work_submit>:
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   1a81c:	460a      	mov	r2, r1
   1a81e:	4601      	mov	r1, r0
   1a820:	4801      	ldr	r0, [pc, #4]	; (1a828 <k_delayed_work_submit+0xc>)
   1a822:	f007 bd6b 	b.w	222fc <k_delayed_work_submit_to_queue>
   1a826:	bf00      	nop
   1a828:	20003340 	.word	0x20003340

0001a82c <net_mgmt_event_notify>:
void net_mgmt_event_notify_with_info(u32_t mgmt_event, struct net_if *iface,
				     void *info, size_t length);

static inline void net_mgmt_event_notify(u32_t mgmt_event, struct net_if *iface)
{
	net_mgmt_event_notify_with_info(mgmt_event, iface, NULL, 0);
   1a82c:	2300      	movs	r3, #0
   1a82e:	461a      	mov	r2, r3
   1a830:	f004 bee0 	b.w	1f5f4 <net_mgmt_event_notify_with_info>

0001a834 <net_if_ipv6_start_dad>:
{
   1a834:	b510      	push	{r4, lr}
   1a836:	460c      	mov	r4, r1
	ifaddr->addr_state = NET_ADDR_TENTATIVE;
   1a838:	2100      	movs	r1, #0
{
   1a83a:	4602      	mov	r2, r0
	ifaddr->addr_state = NET_ADDR_TENTATIVE;
   1a83c:	f884 1065 	strb.w	r1, [r4, #101]	; 0x65
 */
static inline bool net_if_is_up(struct net_if *iface)
{
	NET_ASSERT(iface);

	return atomic_test_bit(iface->flags, NET_IF_UP);
   1a840:	300c      	adds	r0, #12
   1a842:	f7ff ffb0 	bl	1a7a6 <atomic_test_bit>
	if (net_if_is_up(iface)) {
   1a846:	b170      	cbz	r0, 1a866 <net_if_ipv6_start_dad+0x32>
		ifaddr->dad_count = 1;
   1a848:	2301      	movs	r3, #1
   1a84a:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
		if (!net_ipv6_start_dad(iface, ifaddr)) {
   1a84e:	4621      	mov	r1, r4
   1a850:	4610      	mov	r0, r2
   1a852:	f004 fb37 	bl	1eec4 <net_ipv6_start_dad>
   1a856:	b930      	cbnz	r0, 1a866 <net_if_ipv6_start_dad+0x32>
			k_delayed_work_submit(&ifaddr->dad_timer, DAD_TIMEOUT);
   1a858:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   1a85c:	2164      	movs	r1, #100	; 0x64
}
   1a85e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			k_delayed_work_submit(&ifaddr->dad_timer, DAD_TIMEOUT);
   1a862:	f7ff bfdb 	b.w	1a81c <k_delayed_work_submit>
   1a866:	bd10      	pop	{r4, pc}

0001a868 <net_if_lookup_by_dev>:
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1a868:	4b06      	ldr	r3, [pc, #24]	; (1a884 <net_if_lookup_by_dev+0x1c>)
   1a86a:	4a07      	ldr	r2, [pc, #28]	; (1a888 <net_if_lookup_by_dev+0x20>)
   1a86c:	4293      	cmp	r3, r2
   1a86e:	d102      	bne.n	1a876 <net_if_lookup_by_dev+0xe>
	return NULL;
   1a870:	2300      	movs	r3, #0
}
   1a872:	4618      	mov	r0, r3
   1a874:	4770      	bx	lr
		if (iface->dev == dev) {
   1a876:	6819      	ldr	r1, [r3, #0]
   1a878:	4281      	cmp	r1, r0
   1a87a:	d0fa      	beq.n	1a872 <net_if_lookup_by_dev+0xa>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1a87c:	f503 7318 	add.w	r3, r3, #608	; 0x260
   1a880:	e7f4      	b.n	1a86c <net_if_lookup_by_dev+0x4>
   1a882:	bf00      	nop
   1a884:	2000ab20 	.word	0x2000ab20
   1a888:	2000ad80 	.word	0x2000ad80

0001a88c <net_if_get_default>:
}
   1a88c:	4b02      	ldr	r3, [pc, #8]	; (1a898 <net_if_get_default+0xc>)
	if (__net_if_start == __net_if_end) {
   1a88e:	4803      	ldr	r0, [pc, #12]	; (1a89c <net_if_get_default+0x10>)
}
   1a890:	4298      	cmp	r0, r3
   1a892:	bf08      	it	eq
   1a894:	2000      	moveq	r0, #0
   1a896:	4770      	bx	lr
   1a898:	2000ad80 	.word	0x2000ad80
   1a89c:	2000ab20 	.word	0x2000ab20

0001a8a0 <net_if_start_rs>:
{
   1a8a0:	b510      	push	{r4, lr}
   1a8a2:	4604      	mov	r4, r0
	if (!net_ipv6_start_rs(iface)) {
   1a8a4:	f004 fc5a 	bl	1f15c <net_ipv6_start_rs>
   1a8a8:	b938      	cbnz	r0, 1a8ba <net_if_start_rs+0x1a>
		k_delayed_work_submit(&iface->ipv6.rs_timer, RS_TIMEOUT);
   1a8aa:	f504 7006 	add.w	r0, r4, #536	; 0x218
   1a8ae:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
}
   1a8b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_delayed_work_submit(&iface->ipv6.rs_timer, RS_TIMEOUT);
   1a8b6:	f7ff bfb1 	b.w	1a81c <k_delayed_work_submit>
   1a8ba:	bd10      	pop	{r4, pc}

0001a8bc <rs_timeout>:
	iface->ipv6.rs_count++;
   1a8bc:	f5a0 7006 	sub.w	r0, r0, #536	; 0x218
   1a8c0:	f890 324e 	ldrb.w	r3, [r0, #590]	; 0x24e
   1a8c4:	3301      	adds	r3, #1
   1a8c6:	b2db      	uxtb	r3, r3
	if (iface->ipv6.rs_count < RS_COUNT) {
   1a8c8:	2b02      	cmp	r3, #2
	iface->ipv6.rs_count++;
   1a8ca:	f880 324e 	strb.w	r3, [r0, #590]	; 0x24e
	if (iface->ipv6.rs_count < RS_COUNT) {
   1a8ce:	d801      	bhi.n	1a8d4 <rs_timeout+0x18>
		net_if_start_rs(iface);
   1a8d0:	f7ff bfe6 	b.w	1a8a0 <net_if_start_rs>
   1a8d4:	4770      	bx	lr
	...

0001a8d8 <net_if_ipv6_addr_lookup>:
{
   1a8d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1a8dc:	4c14      	ldr	r4, [pc, #80]	; (1a930 <net_if_ipv6_addr_lookup+0x58>)
   1a8de:	f8df 8054 	ldr.w	r8, [pc, #84]	; 1a934 <net_if_ipv6_addr_lookup+0x5c>
{
   1a8e2:	4681      	mov	r9, r0
   1a8e4:	460f      	mov	r7, r1
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1a8e6:	4544      	cmp	r4, r8
   1a8e8:	d102      	bne.n	1a8f0 <net_if_ipv6_addr_lookup+0x18>
	return NULL;
   1a8ea:	2000      	movs	r0, #0
}
   1a8ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1a8f0:	f104 0630 	add.w	r6, r4, #48	; 0x30
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1a8f4:	2500      	movs	r5, #0
			if (!iface->ipv6.unicast[i].is_used ||
   1a8f6:	f896 3064 	ldrb.w	r3, [r6, #100]	; 0x64
   1a8fa:	b183      	cbz	r3, 1a91e <net_if_ipv6_addr_lookup+0x46>
   1a8fc:	f836 3c04 	ldrh.w	r3, [r6, #-4]
   1a900:	2b0a      	cmp	r3, #10
   1a902:	d10c      	bne.n	1a91e <net_if_ipv6_addr_lookup+0x46>
			if (net_is_ipv6_prefix(addr->s6_addr,
   1a904:	2280      	movs	r2, #128	; 0x80
   1a906:	4631      	mov	r1, r6
   1a908:	4648      	mov	r0, r9
   1a90a:	f7ff ff59 	bl	1a7c0 <net_is_ipv6_prefix>
   1a90e:	b130      	cbz	r0, 1a91e <net_if_ipv6_addr_lookup+0x46>
				if (ret) {
   1a910:	b107      	cbz	r7, 1a914 <net_if_ipv6_addr_lookup+0x3c>
					*ret = iface;
   1a912:	603c      	str	r4, [r7, #0]
				return &iface->ipv6.unicast[i];
   1a914:	f105 002c 	add.w	r0, r5, #44	; 0x2c
   1a918:	4420      	add	r0, r4
   1a91a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1a91e:	356c      	adds	r5, #108	; 0x6c
		for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1a920:	f5b5 7fa2 	cmp.w	r5, #324	; 0x144
   1a924:	f106 066c 	add.w	r6, r6, #108	; 0x6c
   1a928:	d1e5      	bne.n	1a8f6 <net_if_ipv6_addr_lookup+0x1e>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1a92a:	f504 7418 	add.w	r4, r4, #608	; 0x260
   1a92e:	e7da      	b.n	1a8e6 <net_if_ipv6_addr_lookup+0xe>
   1a930:	2000ab20 	.word	0x2000ab20
   1a934:	2000ad80 	.word	0x2000ad80

0001a938 <dad_timeout>:
{
   1a938:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct net_if *iface = NULL;
   1a93a:	a902      	add	r1, sp, #8
   1a93c:	2300      	movs	r3, #0
   1a93e:	f841 3d04 	str.w	r3, [r1, #-4]!
	tmp = net_if_ipv6_addr_lookup(&ifaddr->address.in6_addr, &iface);
   1a942:	f1a0 0438 	sub.w	r4, r0, #56	; 0x38
	ifaddr->addr_state = NET_ADDR_PREFERRED;
   1a946:	2301      	movs	r3, #1
   1a948:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
	tmp = net_if_ipv6_addr_lookup(&ifaddr->address.in6_addr, &iface);
   1a94c:	f1a0 053c 	sub.w	r5, r0, #60	; 0x3c
   1a950:	4620      	mov	r0, r4
   1a952:	f7ff ffc1 	bl	1a8d8 <net_if_ipv6_addr_lookup>
	if (tmp == ifaddr) {
   1a956:	4285      	cmp	r5, r0
   1a958:	d107      	bne.n	1a96a <dad_timeout+0x32>
		net_mgmt_event_notify(NET_EVENT_IPV6_DAD_SUCCEED, iface);
   1a95a:	9901      	ldr	r1, [sp, #4]
   1a95c:	4804      	ldr	r0, [pc, #16]	; (1a970 <dad_timeout+0x38>)
   1a95e:	f7ff ff65 	bl	1a82c <net_mgmt_event_notify>
		net_ipv6_nbr_rm(iface, &ifaddr->address.in6_addr);
   1a962:	4621      	mov	r1, r4
   1a964:	9801      	ldr	r0, [sp, #4]
   1a966:	f003 f803 	bl	1d970 <net_ipv6_nbr_rm>
}
   1a96a:	b003      	add	sp, #12
   1a96c:	bd30      	pop	{r4, r5, pc}
   1a96e:	bf00      	nop
   1a970:	f060000d 	.word	0xf060000d

0001a974 <net_if_ipv6_addr_update_lifetime>:
	k_delayed_work_submit(&ifaddr->lifetime,
   1a974:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1a978:	4359      	muls	r1, r3
   1a97a:	3014      	adds	r0, #20
   1a97c:	f7ff bf4e 	b.w	1a81c <k_delayed_work_submit>

0001a980 <net_if_ipv6_addr_add>:
{
   1a980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a984:	4604      	mov	r4, r0
   1a986:	b089      	sub	sp, #36	; 0x24
   1a988:	460f      	mov	r7, r1
   1a98a:	4693      	mov	fp, r2
   1a98c:	469a      	mov	sl, r3
   1a98e:	f100 0630 	add.w	r6, r0, #48	; 0x30
   1a992:	2500      	movs	r5, #0
		if (!iface->ipv6.unicast[i].is_used) {
   1a994:	f896 3064 	ldrb.w	r3, [r6, #100]	; 0x64
   1a998:	b153      	cbz	r3, 1a9b0 <net_if_ipv6_addr_add+0x30>
		if (net_ipv6_addr_cmp(addr,
   1a99a:	4631      	mov	r1, r6
   1a99c:	4638      	mov	r0, r7
   1a99e:	f7ff ff34 	bl	1a80a <net_ipv6_addr_cmp>
   1a9a2:	b128      	cbz	r0, 1a9b0 <net_if_ipv6_addr_add+0x30>
			return &iface->ipv6.unicast[i];
   1a9a4:	352c      	adds	r5, #44	; 0x2c
   1a9a6:	4425      	add	r5, r4
}
   1a9a8:	4628      	mov	r0, r5
   1a9aa:	b009      	add	sp, #36	; 0x24
   1a9ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a9b0:	356c      	adds	r5, #108	; 0x6c
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1a9b2:	f5b5 7fa2 	cmp.w	r5, #324	; 0x144
   1a9b6:	f106 066c 	add.w	r6, r6, #108	; 0x6c
   1a9ba:	d1eb      	bne.n	1a994 <net_if_ipv6_addr_add+0x14>
		if (iface->ipv6.unicast[i].is_used) {
   1a9bc:	f894 6094 	ldrb.w	r6, [r4, #148]	; 0x94
   1a9c0:	b156      	cbz	r6, 1a9d8 <net_if_ipv6_addr_add+0x58>
   1a9c2:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
   1a9c6:	2b00      	cmp	r3, #0
   1a9c8:	f000 8094 	beq.w	1aaf4 <net_if_ipv6_addr_add+0x174>
   1a9cc:	f894 316c 	ldrb.w	r3, [r4, #364]	; 0x16c
   1a9d0:	2b00      	cmp	r3, #0
   1a9d2:	f040 8095 	bne.w	1ab00 <net_if_ipv6_addr_add+0x180>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1a9d6:	2602      	movs	r6, #2
   1a9d8:	f04f 086c 	mov.w	r8, #108	; 0x6c
   1a9dc:	fb08 f806 	mul.w	r8, r8, r6
	ifaddr->is_used = true;
   1a9e0:	eb04 0908 	add.w	r9, r4, r8
   1a9e4:	2301      	movs	r3, #1
   1a9e6:	f889 3094 	strb.w	r3, [r9, #148]	; 0x94
	ifaddr->address.family = AF_INET6;
   1a9ea:	230a      	movs	r3, #10
		net_if_addr_init(&iface->ipv6.unicast[i], addr, addr_type,
   1a9ec:	f108 052c 	add.w	r5, r8, #44	; 0x2c
	ifaddr->address.family = AF_INET6;
   1a9f0:	f8a9 302c 	strh.w	r3, [r9, #44]	; 0x2c
	net_ipaddr_copy(&ifaddr->address.in6_addr, addr);
   1a9f4:	463b      	mov	r3, r7
   1a9f6:	af04      	add	r7, sp, #16
		net_if_addr_init(&iface->ipv6.unicast[i], addr, addr_type,
   1a9f8:	4425      	add	r5, r4
	ifaddr->addr_type = addr_type;
   1a9fa:	f889 b090 	strb.w	fp, [r9, #144]	; 0x90
	net_ipaddr_copy(&ifaddr->address.in6_addr, addr);
   1a9fe:	f103 0c10 	add.w	ip, r3, #16
   1aa02:	463a      	mov	r2, r7
   1aa04:	6818      	ldr	r0, [r3, #0]
   1aa06:	6859      	ldr	r1, [r3, #4]
   1aa08:	46be      	mov	lr, r7
   1aa0a:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   1aa0e:	3308      	adds	r3, #8
   1aa10:	4563      	cmp	r3, ip
   1aa12:	4677      	mov	r7, lr
   1aa14:	d1f6      	bne.n	1aa04 <net_if_ipv6_addr_add+0x84>
   1aa16:	1d2f      	adds	r7, r5, #4
   1aa18:	f10d 0e20 	add.w	lr, sp, #32
   1aa1c:	4613      	mov	r3, r2
   1aa1e:	cb03      	ldmia	r3!, {r0, r1}
   1aa20:	4573      	cmp	r3, lr
   1aa22:	6038      	str	r0, [r7, #0]
   1aa24:	6079      	str	r1, [r7, #4]
   1aa26:	461a      	mov	r2, r3
   1aa28:	f107 0708 	add.w	r7, r7, #8
   1aa2c:	d1f6      	bne.n	1aa1c <net_if_ipv6_addr_add+0x9c>
	k_delayed_work_init(&ifaddr->dad_timer, dad_timeout);
   1aa2e:	f108 0068 	add.w	r0, r8, #104	; 0x68
   1aa32:	4934      	ldr	r1, [pc, #208]	; (1ab04 <net_if_ipv6_addr_add+0x184>)
   1aa34:	4420      	add	r0, r4
   1aa36:	f007 fbe9 	bl	2220c <k_delayed_work_init>
   1aa3a:	236c      	movs	r3, #108	; 0x6c
		ifaddr->is_infinite = false;
   1aa3c:	fb03 4306 	mla	r3, r3, r6, r4
	if (vlifetime) {
   1aa40:	f1ba 0f00 	cmp.w	sl, #0
   1aa44:	d058      	beq.n	1aaf8 <net_if_ipv6_addr_add+0x178>
		ifaddr->is_infinite = false;
   1aa46:	2200      	movs	r2, #0
		k_delayed_work_init(&ifaddr->lifetime, ipv6_addr_expired);
   1aa48:	f108 0040 	add.w	r0, r8, #64	; 0x40
   1aa4c:	492e      	ldr	r1, [pc, #184]	; (1ab08 <net_if_ipv6_addr_add+0x188>)
		ifaddr->is_infinite = false;
   1aa4e:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
		k_delayed_work_init(&ifaddr->lifetime, ipv6_addr_expired);
   1aa52:	4420      	add	r0, r4
   1aa54:	f007 fbda 	bl	2220c <k_delayed_work_init>
		net_if_ipv6_addr_update_lifetime(ifaddr, vlifetime);
   1aa58:	4651      	mov	r1, sl
   1aa5a:	4628      	mov	r0, r5
   1aa5c:	f7ff ff8a 	bl	1a974 <net_if_ipv6_addr_update_lifetime>
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   1aa60:	f240 23ff 	movw	r3, #767	; 0x2ff
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   1aa64:	2700      	movs	r7, #0
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   1aa66:	f8ad 3000 	strh.w	r3, [sp]
	ret = net_ipv6_mld_join(iface, &addr);
   1aa6a:	4669      	mov	r1, sp
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   1aa6c:	f44f 7380 	mov.w	r3, #256	; 0x100
   1aa70:	4620      	mov	r0, r4
   1aa72:	f8ad 300e 	strh.w	r3, [sp, #14]
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   1aa76:	f8ad 7002 	strh.w	r7, [sp, #2]
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   1aa7a:	f8ad 7004 	strh.w	r7, [sp, #4]
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   1aa7e:	f8ad 7006 	strh.w	r7, [sp, #6]
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   1aa82:	f8ad 7008 	strh.w	r7, [sp, #8]
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   1aa86:	f8ad 700a 	strh.w	r7, [sp, #10]
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   1aa8a:	f8ad 700c 	strh.w	r7, [sp, #12]
   1aa8e:	f004 fb67 	bl	1f160 <net_ipv6_mld_join>
	dst->s6_addr[0]   = 0xFF;
   1aa92:	23ff      	movs	r3, #255	; 0xff
   1aa94:	f88d 3000 	strb.w	r3, [sp]
	dst->s6_addr[12]  = 0xFF;
   1aa98:	f88d 300c 	strb.w	r3, [sp, #12]
	dst->s6_addr[13]  = src->s6_addr[13];
   1aa9c:	236c      	movs	r3, #108	; 0x6c
   1aa9e:	fb03 4606 	mla	r6, r3, r6, r4
	dst->s6_addr[1]   = 0x02;
   1aaa2:	2202      	movs	r2, #2
	dst->s6_addr[13]  = src->s6_addr[13];
   1aaa4:	f896 303d 	ldrb.w	r3, [r6, #61]	; 0x3d
	dst->s6_addr[1]   = 0x02;
   1aaa8:	f88d 2001 	strb.w	r2, [sp, #1]
	dst->s6_addr[11]  = 0x01;
   1aaac:	2201      	movs	r2, #1
   1aaae:	f88d 200b 	strb.w	r2, [sp, #11]
	dst->s6_addr[13]  = src->s6_addr[13];
   1aab2:	f88d 300d 	strb.w	r3, [sp, #13]
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   1aab6:	f899 203f 	ldrb.w	r2, [r9, #63]	; 0x3f
   1aaba:	f899 303e 	ldrb.w	r3, [r9, #62]	; 0x3e
	UNALIGNED_PUT(0, &dst->s6_addr16[1]);
   1aabe:	f8ad 7002 	strh.w	r7, [sp, #2]
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   1aac2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	ret = net_ipv6_mld_join(iface, &addr);
   1aac6:	4669      	mov	r1, sp
   1aac8:	4620      	mov	r0, r4
   1aaca:	f8ad 300e 	strh.w	r3, [sp, #14]
	UNALIGNED_PUT(0, &dst->s6_addr16[2]);
   1aace:	f8ad 7004 	strh.w	r7, [sp, #4]
	UNALIGNED_PUT(0, &dst->s6_addr16[3]);
   1aad2:	f8ad 7006 	strh.w	r7, [sp, #6]
	UNALIGNED_PUT(0, &dst->s6_addr16[4]);
   1aad6:	f8ad 7008 	strh.w	r7, [sp, #8]
	dst->s6_addr[10]  = 0;
   1aada:	f88d 700a 	strb.w	r7, [sp, #10]
   1aade:	f004 fb3f 	bl	1f160 <net_ipv6_mld_join>
		net_if_ipv6_start_dad(iface, &iface->ipv6.unicast[i]);
   1aae2:	4629      	mov	r1, r5
   1aae4:	4620      	mov	r0, r4
   1aae6:	f7ff fea5 	bl	1a834 <net_if_ipv6_start_dad>
		net_mgmt_event_notify(NET_EVENT_IPV6_ADDR_ADD, iface);
   1aaea:	4621      	mov	r1, r4
   1aaec:	4807      	ldr	r0, [pc, #28]	; (1ab0c <net_if_ipv6_addr_add+0x18c>)
   1aaee:	f7ff fe9d 	bl	1a82c <net_mgmt_event_notify>
   1aaf2:	e759      	b.n	1a9a8 <net_if_ipv6_addr_add+0x28>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1aaf4:	2601      	movs	r6, #1
   1aaf6:	e76f      	b.n	1a9d8 <net_if_ipv6_addr_add+0x58>
		ifaddr->is_infinite = true;
   1aaf8:	2201      	movs	r2, #1
   1aafa:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
   1aafe:	e7af      	b.n	1aa60 <net_if_ipv6_addr_add+0xe0>
	return NULL;
   1ab00:	2500      	movs	r5, #0
   1ab02:	e751      	b.n	1a9a8 <net_if_ipv6_addr_add+0x28>
   1ab04:	0001a939 	.word	0x0001a939
   1ab08:	0001a711 	.word	0x0001a711
   1ab0c:	f0600001 	.word	0xf0600001

0001ab10 <net_if_start_dad>:
{
   1ab10:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ab12:	4604      	mov	r4, r0
   1ab14:	b085      	sub	sp, #20
	struct in6_addr addr = { };
   1ab16:	2210      	movs	r2, #16
   1ab18:	2100      	movs	r1, #0
   1ab1a:	4668      	mov	r0, sp
   1ab1c:	f7e5 fe65 	bl	7ea <memset>
	switch (lladdr->len) {
   1ab20:	7d22      	ldrb	r2, [r4, #20]
	addr->s6_addr[0] = 0xfe;
   1ab22:	25fe      	movs	r5, #254	; 0xfe
	addr->s6_addr[1] = 0x80;
   1ab24:	2380      	movs	r3, #128	; 0x80
	switch (lladdr->len) {
   1ab26:	2a06      	cmp	r2, #6
	addr->s6_addr[0] = 0xfe;
   1ab28:	f88d 5000 	strb.w	r5, [sp]
	addr->s6_addr[1] = 0x80;
   1ab2c:	f88d 3001 	strb.w	r3, [sp, #1]
	switch (lladdr->len) {
   1ab30:	d02e      	beq.n	1ab90 <net_if_start_dad+0x80>
   1ab32:	2a08      	cmp	r2, #8
   1ab34:	d047      	beq.n	1abc6 <net_if_start_dad+0xb6>
   1ab36:	2a02      	cmp	r2, #2
   1ab38:	d10e      	bne.n	1ab58 <net_if_start_dad+0x48>
		if (lladdr->type == NET_LINK_IEEE802154) {
   1ab3a:	7d63      	ldrb	r3, [r4, #21]
   1ab3c:	2b01      	cmp	r3, #1
   1ab3e:	d10b      	bne.n	1ab58 <net_if_start_dad+0x48>
			addr->s6_addr[11] = 0xff;
   1ab40:	23ff      	movs	r3, #255	; 0xff
   1ab42:	f88d 300b 	strb.w	r3, [sp, #11]
			addr->s6_addr[14] = lladdr->addr[0];
   1ab46:	6923      	ldr	r3, [r4, #16]
			addr->s6_addr[12] = 0xfe;
   1ab48:	f88d 500c 	strb.w	r5, [sp, #12]
			addr->s6_addr[14] = lladdr->addr[0];
   1ab4c:	781a      	ldrb	r2, [r3, #0]
   1ab4e:	f88d 200e 	strb.w	r2, [sp, #14]
			addr->s6_addr[15] = lladdr->addr[1];
   1ab52:	785b      	ldrb	r3, [r3, #1]
   1ab54:	f88d 300f 	strb.w	r3, [sp, #15]
	ifaddr = net_if_ipv6_addr_add(iface, &addr, NET_ADDR_AUTOCONF, 0);
   1ab58:	2300      	movs	r3, #0
   1ab5a:	2201      	movs	r2, #1
   1ab5c:	4669      	mov	r1, sp
   1ab5e:	4620      	mov	r0, r4
   1ab60:	f7ff ff0e 	bl	1a980 <net_if_ipv6_addr_add>
   1ab64:	f104 052c 	add.w	r5, r4, #44	; 0x2c
   1ab68:	4607      	mov	r7, r0
   1ab6a:	f504 76b8 	add.w	r6, r4, #368	; 0x170
		if (!iface->ipv6.unicast[i].is_used ||
   1ab6e:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
   1ab72:	b143      	cbz	r3, 1ab86 <net_if_start_dad+0x76>
   1ab74:	882b      	ldrh	r3, [r5, #0]
   1ab76:	2b0a      	cmp	r3, #10
   1ab78:	d105      	bne.n	1ab86 <net_if_start_dad+0x76>
		    iface->ipv6.unicast[i].address.family != AF_INET6 ||
   1ab7a:	42af      	cmp	r7, r5
   1ab7c:	d003      	beq.n	1ab86 <net_if_start_dad+0x76>
		net_if_ipv6_start_dad(iface, &iface->ipv6.unicast[i]);
   1ab7e:	4629      	mov	r1, r5
   1ab80:	4620      	mov	r0, r4
   1ab82:	f7ff fe57 	bl	1a834 <net_if_ipv6_start_dad>
   1ab86:	356c      	adds	r5, #108	; 0x6c
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1ab88:	42b5      	cmp	r5, r6
   1ab8a:	d1f0      	bne.n	1ab6e <net_if_start_dad+0x5e>
}
   1ab8c:	b005      	add	sp, #20
   1ab8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   1ab90:	2203      	movs	r2, #3
   1ab92:	6921      	ldr	r1, [r4, #16]
   1ab94:	a802      	add	r0, sp, #8
   1ab96:	f7e5 fdfc 	bl	792 <memcpy>
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   1ab9a:	6921      	ldr	r1, [r4, #16]
		addr->s6_addr[12] = 0xfe;
   1ab9c:	f88d 500c 	strb.w	r5, [sp, #12]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   1aba0:	2203      	movs	r2, #3
		addr->s6_addr[11] = 0xff;
   1aba2:	23ff      	movs	r3, #255	; 0xff
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   1aba4:	4411      	add	r1, r2
   1aba6:	f10d 000d 	add.w	r0, sp, #13
		addr->s6_addr[11] = 0xff;
   1abaa:	f88d 300b 	strb.w	r3, [sp, #11]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   1abae:	f7e5 fdf0 	bl	792 <memcpy>
		if (lladdr->type == NET_LINK_ETHERNET) {
   1abb2:	7d63      	ldrb	r3, [r4, #21]
   1abb4:	2b03      	cmp	r3, #3
   1abb6:	d1cf      	bne.n	1ab58 <net_if_start_dad+0x48>
		addr->s6_addr[8] ^= 0x02;
   1abb8:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1abbc:	f083 0302 	eor.w	r3, r3, #2
   1abc0:	f88d 3008 	strb.w	r3, [sp, #8]
   1abc4:	e7c8      	b.n	1ab58 <net_if_start_dad+0x48>
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
   1abc6:	6921      	ldr	r1, [r4, #16]
   1abc8:	a802      	add	r0, sp, #8
   1abca:	f7e5 fde2 	bl	792 <memcpy>
   1abce:	e7f3      	b.n	1abb8 <net_if_start_dad+0xa8>

0001abd0 <net_if_ipv6_maddr_add>:
{
   1abd0:	b538      	push	{r3, r4, r5, lr}
	if (!net_is_ipv6_addr_mcast(addr)) {
   1abd2:	780b      	ldrb	r3, [r1, #0]
   1abd4:	2bff      	cmp	r3, #255	; 0xff
{
   1abd6:	4604      	mov	r4, r0
	if (!net_is_ipv6_addr_mcast(addr)) {
   1abd8:	d125      	bne.n	1ac26 <net_if_ipv6_maddr_add+0x56>
		if (iface->ipv6.mcast[i].is_used) {
   1abda:	f890 5170 	ldrb.w	r5, [r0, #368]	; 0x170
   1abde:	f015 0501 	ands.w	r5, r5, #1
   1abe2:	d01e      	beq.n	1ac22 <net_if_ipv6_maddr_add+0x52>
   1abe4:	f890 3188 	ldrb.w	r3, [r0, #392]	; 0x188
   1abe8:	07db      	lsls	r3, r3, #31
   1abea:	d41c      	bmi.n	1ac26 <net_if_ipv6_maddr_add+0x56>
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1abec:	2001      	movs	r0, #1
		iface->ipv6.mcast[i].is_used = true;
   1abee:	2518      	movs	r5, #24
   1abf0:	4345      	muls	r5, r0
   1abf2:	1962      	adds	r2, r4, r5
		memcpy(&iface->ipv6.mcast[i].address.in6_addr, addr, 16);
   1abf4:	f505 70bc 	add.w	r0, r5, #376	; 0x178
		iface->ipv6.mcast[i].is_used = true;
   1abf8:	f892 3170 	ldrb.w	r3, [r2, #368]	; 0x170
   1abfc:	f043 0301 	orr.w	r3, r3, #1
   1ac00:	f882 3170 	strb.w	r3, [r2, #368]	; 0x170
		iface->ipv6.mcast[i].address.family = AF_INET6;
   1ac04:	230a      	movs	r3, #10
   1ac06:	f8a2 3174 	strh.w	r3, [r2, #372]	; 0x174
		memcpy(&iface->ipv6.mcast[i].address.in6_addr, addr, 16);
   1ac0a:	4420      	add	r0, r4
   1ac0c:	2210      	movs	r2, #16
   1ac0e:	f7e5 fdc0 	bl	792 <memcpy>
		net_mgmt_event_notify(NET_EVENT_IPV6_MADDR_ADD, iface);
   1ac12:	4621      	mov	r1, r4
   1ac14:	4805      	ldr	r0, [pc, #20]	; (1ac2c <net_if_ipv6_maddr_add+0x5c>)
   1ac16:	f7ff fe09 	bl	1a82c <net_mgmt_event_notify>
		return &iface->ipv6.mcast[i];
   1ac1a:	f505 70b8 	add.w	r0, r5, #368	; 0x170
   1ac1e:	4420      	add	r0, r4
   1ac20:	bd38      	pop	{r3, r4, r5, pc}
		if (iface->ipv6.mcast[i].is_used) {
   1ac22:	4628      	mov	r0, r5
   1ac24:	e7e3      	b.n	1abee <net_if_ipv6_maddr_add+0x1e>
		return NULL;
   1ac26:	2000      	movs	r0, #0
}
   1ac28:	bd38      	pop	{r3, r4, r5, pc}
   1ac2a:	bf00      	nop
   1ac2c:	f0600003 	.word	0xf0600003

0001ac30 <net_if_ipv6_maddr_rm>:
{
   1ac30:	b538      	push	{r3, r4, r5, lr}
		if (!iface->ipv6.mcast[i].is_used) {
   1ac32:	f890 3170 	ldrb.w	r3, [r0, #368]	; 0x170
   1ac36:	07da      	lsls	r2, r3, #31
{
   1ac38:	4604      	mov	r4, r0
   1ac3a:	460d      	mov	r5, r1
		if (!iface->ipv6.mcast[i].is_used) {
   1ac3c:	d504      	bpl.n	1ac48 <net_if_ipv6_maddr_rm+0x18>
		if (!net_ipv6_addr_cmp(
   1ac3e:	f500 70bc 	add.w	r0, r0, #376	; 0x178
   1ac42:	f7ff fde2 	bl	1a80a <net_ipv6_addr_cmp>
   1ac46:	b9c8      	cbnz	r0, 1ac7c <net_if_ipv6_maddr_rm+0x4c>
		if (!iface->ipv6.mcast[i].is_used) {
   1ac48:	f894 3188 	ldrb.w	r3, [r4, #392]	; 0x188
   1ac4c:	07db      	lsls	r3, r3, #31
   1ac4e:	d517      	bpl.n	1ac80 <net_if_ipv6_maddr_rm+0x50>
		if (!net_ipv6_addr_cmp(
   1ac50:	4629      	mov	r1, r5
   1ac52:	f504 70c8 	add.w	r0, r4, #400	; 0x190
   1ac56:	f7ff fdd8 	bl	1a80a <net_ipv6_addr_cmp>
   1ac5a:	b188      	cbz	r0, 1ac80 <net_if_ipv6_maddr_rm+0x50>
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1ac5c:	2301      	movs	r3, #1
		iface->ipv6.mcast[i].is_used = false;
   1ac5e:	2218      	movs	r2, #24
   1ac60:	fb02 4303 	mla	r3, r2, r3, r4
		net_mgmt_event_notify(NET_EVENT_IPV6_MADDR_DEL, iface);
   1ac64:	4621      	mov	r1, r4
		iface->ipv6.mcast[i].is_used = false;
   1ac66:	f893 2170 	ldrb.w	r2, [r3, #368]	; 0x170
		net_mgmt_event_notify(NET_EVENT_IPV6_MADDR_DEL, iface);
   1ac6a:	4806      	ldr	r0, [pc, #24]	; (1ac84 <net_if_ipv6_maddr_rm+0x54>)
		iface->ipv6.mcast[i].is_used = false;
   1ac6c:	f36f 0200 	bfc	r2, #0, #1
   1ac70:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
		net_mgmt_event_notify(NET_EVENT_IPV6_MADDR_DEL, iface);
   1ac74:	f7ff fdda 	bl	1a82c <net_mgmt_event_notify>
		return true;
   1ac78:	2001      	movs	r0, #1
   1ac7a:	bd38      	pop	{r3, r4, r5, pc}
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1ac7c:	2300      	movs	r3, #0
   1ac7e:	e7ee      	b.n	1ac5e <net_if_ipv6_maddr_rm+0x2e>
	return false;
   1ac80:	2000      	movs	r0, #0
}
   1ac82:	bd38      	pop	{r3, r4, r5, pc}
   1ac84:	f0600004 	.word	0xf0600004

0001ac88 <net_if_ipv6_addr_rm>:
{
   1ac88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   1ac8c:	4604      	mov	r4, r0
   1ac8e:	460f      	mov	r7, r1
   1ac90:	f100 0630 	add.w	r6, r0, #48	; 0x30
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1ac94:	2500      	movs	r5, #0
   1ac96:	f04f 0a6c 	mov.w	sl, #108	; 0x6c
		if (!iface->ipv6.unicast[i].is_used) {
   1ac9a:	f896 3064 	ldrb.w	r3, [r6, #100]	; 0x64
   1ac9e:	2b00      	cmp	r3, #0
   1aca0:	d041      	beq.n	1ad26 <net_if_ipv6_addr_rm+0x9e>
		if (!net_ipv6_addr_cmp(
   1aca2:	4639      	mov	r1, r7
   1aca4:	4630      	mov	r0, r6
   1aca6:	f7ff fdb0 	bl	1a80a <net_ipv6_addr_cmp>
   1acaa:	fb0a f805 	mul.w	r8, sl, r5
   1acae:	4681      	mov	r9, r0
   1acb0:	b3c8      	cbz	r0, 1ad26 <net_if_ipv6_addr_rm+0x9e>
		if (!iface->ipv6.unicast[i].is_infinite) {
   1acb2:	eb04 0308 	add.w	r3, r4, r8
   1acb6:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
   1acba:	b923      	cbnz	r3, 1acc6 <net_if_ipv6_addr_rm+0x3e>
			k_delayed_work_cancel(&iface->ipv6.unicast[i].lifetime);
   1acbc:	f108 0040 	add.w	r0, r8, #64	; 0x40
   1acc0:	4420      	add	r0, r4
   1acc2:	f007 fac1 	bl	22248 <k_delayed_work_cancel>
		iface->ipv6.unicast[i].is_used = false;
   1acc6:	236c      	movs	r3, #108	; 0x6c
   1acc8:	fb03 4505 	mla	r5, r3, r5, r4
   1accc:	2300      	movs	r3, #0
   1acce:	f885 3094 	strb.w	r3, [r5, #148]	; 0x94
	UNALIGNED_PUT(0, &dst->s6_addr16[1]);
   1acd2:	f8ad 3002 	strh.w	r3, [sp, #2]
	UNALIGNED_PUT(0, &dst->s6_addr16[2]);
   1acd6:	f8ad 3004 	strh.w	r3, [sp, #4]
	UNALIGNED_PUT(0, &dst->s6_addr16[3]);
   1acda:	f8ad 3006 	strh.w	r3, [sp, #6]
	UNALIGNED_PUT(0, &dst->s6_addr16[4]);
   1acde:	f8ad 3008 	strh.w	r3, [sp, #8]
	dst->s6_addr[10]  = 0;
   1ace2:	f88d 300a 	strb.w	r3, [sp, #10]
	dst->s6_addr[11]  = 0x01;
   1ace6:	2301      	movs	r3, #1
	dst->s6_addr[0]   = 0xFF;
   1ace8:	22ff      	movs	r2, #255	; 0xff
	dst->s6_addr[11]  = 0x01;
   1acea:	f88d 300b 	strb.w	r3, [sp, #11]
	dst->s6_addr[13]  = src->s6_addr[13];
   1acee:	7b7b      	ldrb	r3, [r7, #13]
	dst->s6_addr[0]   = 0xFF;
   1acf0:	f88d 2000 	strb.w	r2, [sp]
	dst->s6_addr[12]  = 0xFF;
   1acf4:	f88d 200c 	strb.w	r2, [sp, #12]
	dst->s6_addr[13]  = src->s6_addr[13];
   1acf8:	f88d 300d 	strb.w	r3, [sp, #13]
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   1acfc:	7bfa      	ldrb	r2, [r7, #15]
   1acfe:	7bbb      	ldrb	r3, [r7, #14]
	dst->s6_addr[1]   = 0x02;
   1ad00:	2102      	movs	r1, #2
   1ad02:	f88d 1001 	strb.w	r1, [sp, #1]
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   1ad06:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		net_if_ipv6_maddr_rm(iface, &maddr);
   1ad0a:	4669      	mov	r1, sp
   1ad0c:	4620      	mov	r0, r4
   1ad0e:	f8ad 300e 	strh.w	r3, [sp, #14]
   1ad12:	f7ff ff8d 	bl	1ac30 <net_if_ipv6_maddr_rm>
		net_mgmt_event_notify(NET_EVENT_IPV6_ADDR_DEL, iface);
   1ad16:	4621      	mov	r1, r4
   1ad18:	4807      	ldr	r0, [pc, #28]	; (1ad38 <net_if_ipv6_addr_rm+0xb0>)
   1ad1a:	f7ff fd87 	bl	1a82c <net_mgmt_event_notify>
}
   1ad1e:	4648      	mov	r0, r9
   1ad20:	b004      	add	sp, #16
   1ad22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1ad26:	3501      	adds	r5, #1
   1ad28:	2d03      	cmp	r5, #3
   1ad2a:	f106 066c 	add.w	r6, r6, #108	; 0x6c
   1ad2e:	d1b4      	bne.n	1ac9a <net_if_ipv6_addr_rm+0x12>
	return false;
   1ad30:	f04f 0900 	mov.w	r9, #0
   1ad34:	e7f3      	b.n	1ad1e <net_if_ipv6_addr_rm+0x96>
   1ad36:	bf00      	nop
   1ad38:	f0600002 	.word	0xf0600002

0001ad3c <net_if_ipv6_dad_failed>:
{
   1ad3c:	b513      	push	{r0, r1, r4, lr}
   1ad3e:	ab02      	add	r3, sp, #8
   1ad40:	460c      	mov	r4, r1
   1ad42:	f843 0d04 	str.w	r0, [r3, #-4]!
	ifaddr = net_if_ipv6_addr_lookup(addr, &iface);
   1ad46:	4620      	mov	r0, r4
   1ad48:	4619      	mov	r1, r3
   1ad4a:	f7ff fdc5 	bl	1a8d8 <net_if_ipv6_addr_lookup>
	if (!ifaddr) {
   1ad4e:	b150      	cbz	r0, 1ad66 <net_if_ipv6_dad_failed+0x2a>
	k_delayed_work_cancel(&ifaddr->dad_timer);
   1ad50:	303c      	adds	r0, #60	; 0x3c
   1ad52:	f007 fa79 	bl	22248 <k_delayed_work_cancel>
	net_mgmt_event_notify(NET_EVENT_IPV6_DAD_FAILED, iface);
   1ad56:	9901      	ldr	r1, [sp, #4]
   1ad58:	4804      	ldr	r0, [pc, #16]	; (1ad6c <net_if_ipv6_dad_failed+0x30>)
   1ad5a:	f7ff fd67 	bl	1a82c <net_mgmt_event_notify>
	net_if_ipv6_addr_rm(iface, addr);
   1ad5e:	4621      	mov	r1, r4
   1ad60:	9801      	ldr	r0, [sp, #4]
   1ad62:	f7ff ff91 	bl	1ac88 <net_if_ipv6_addr_rm>
}
   1ad66:	b002      	add	sp, #8
   1ad68:	bd10      	pop	{r4, pc}
   1ad6a:	bf00      	nop
   1ad6c:	f060000e 	.word	0xf060000e

0001ad70 <net_if_ipv6_maddr_lookup>:
{
   1ad70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1ad72:	4c1c      	ldr	r4, [pc, #112]	; (1ade4 <net_if_ipv6_maddr_lookup+0x74>)
   1ad74:	4f1c      	ldr	r7, [pc, #112]	; (1ade8 <net_if_ipv6_maddr_lookup+0x78>)
{
   1ad76:	4606      	mov	r6, r0
   1ad78:	460d      	mov	r5, r1
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1ad7a:	42bc      	cmp	r4, r7
   1ad7c:	d101      	bne.n	1ad82 <net_if_ipv6_maddr_lookup+0x12>
	return NULL;
   1ad7e:	2000      	movs	r0, #0
}
   1ad80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (ret && *ret && iface != *ret) {
   1ad82:	b10d      	cbz	r5, 1ad88 <net_if_ipv6_maddr_lookup+0x18>
   1ad84:	682b      	ldr	r3, [r5, #0]
   1ad86:	b9ab      	cbnz	r3, 1adb4 <net_if_ipv6_maddr_lookup+0x44>
			if (!iface->ipv6.mcast[i].is_used ||
   1ad88:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
   1ad8c:	07da      	lsls	r2, r3, #31
   1ad8e:	d50a      	bpl.n	1ada6 <net_if_ipv6_maddr_lookup+0x36>
   1ad90:	f8b4 3174 	ldrh.w	r3, [r4, #372]	; 0x174
   1ad94:	2b0a      	cmp	r3, #10
   1ad96:	d106      	bne.n	1ada6 <net_if_ipv6_maddr_lookup+0x36>
			if (net_is_ipv6_prefix(maddr->s6_addr,
   1ad98:	2280      	movs	r2, #128	; 0x80
   1ad9a:	f504 71bc 	add.w	r1, r4, #376	; 0x178
   1ad9e:	4630      	mov	r0, r6
   1ada0:	f7ff fd0e 	bl	1a7c0 <net_is_ipv6_prefix>
   1ada4:	b9e0      	cbnz	r0, 1ade0 <net_if_ipv6_maddr_lookup+0x70>
			if (!iface->ipv6.mcast[i].is_used ||
   1ada6:	f894 3188 	ldrb.w	r3, [r4, #392]	; 0x188
   1adaa:	07db      	lsls	r3, r3, #31
   1adac:	d405      	bmi.n	1adba <net_if_ipv6_maddr_lookup+0x4a>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1adae:	f504 7418 	add.w	r4, r4, #608	; 0x260
   1adb2:	e7e2      	b.n	1ad7a <net_if_ipv6_maddr_lookup+0xa>
		if (ret && *ret && iface != *ret) {
   1adb4:	429c      	cmp	r4, r3
   1adb6:	d1fa      	bne.n	1adae <net_if_ipv6_maddr_lookup+0x3e>
   1adb8:	e7e6      	b.n	1ad88 <net_if_ipv6_maddr_lookup+0x18>
			if (!iface->ipv6.mcast[i].is_used ||
   1adba:	f8b4 318c 	ldrh.w	r3, [r4, #396]	; 0x18c
   1adbe:	2b0a      	cmp	r3, #10
   1adc0:	d1f5      	bne.n	1adae <net_if_ipv6_maddr_lookup+0x3e>
			if (net_is_ipv6_prefix(maddr->s6_addr,
   1adc2:	2280      	movs	r2, #128	; 0x80
   1adc4:	f504 71c8 	add.w	r1, r4, #400	; 0x190
   1adc8:	4630      	mov	r0, r6
   1adca:	f7ff fcf9 	bl	1a7c0 <net_is_ipv6_prefix>
   1adce:	2800      	cmp	r0, #0
   1add0:	d0ed      	beq.n	1adae <net_if_ipv6_maddr_lookup+0x3e>
   1add2:	2018      	movs	r0, #24
				if (ret) {
   1add4:	b105      	cbz	r5, 1add8 <net_if_ipv6_maddr_lookup+0x68>
					*ret = iface;
   1add6:	602c      	str	r4, [r5, #0]
				return &iface->ipv6.mcast[i];
   1add8:	f500 70b8 	add.w	r0, r0, #368	; 0x170
   1addc:	4420      	add	r0, r4
   1adde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (net_is_ipv6_prefix(maddr->s6_addr,
   1ade0:	2000      	movs	r0, #0
   1ade2:	e7f7      	b.n	1add4 <net_if_ipv6_maddr_lookup+0x64>
   1ade4:	2000ab20 	.word	0x2000ab20
   1ade8:	2000ad80 	.word	0x2000ad80

0001adec <net_if_mcast_monitor>:
{
   1adec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1adee:	4b0a      	ldr	r3, [pc, #40]	; (1ae18 <net_if_mcast_monitor+0x2c>)
   1adf0:	681b      	ldr	r3, [r3, #0]
   1adf2:	4605      	mov	r5, r0
   1adf4:	460e      	mov	r6, r1
   1adf6:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&mcast_monitor_callbacks,
   1adf8:	b903      	cbnz	r3, 1adfc <net_if_mcast_monitor+0x10>
   1adfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1adfc:	681c      	ldr	r4, [r3, #0]
		if (iface == mon->iface) {
   1adfe:	685a      	ldr	r2, [r3, #4]
   1ae00:	42aa      	cmp	r2, r5
   1ae02:	d104      	bne.n	1ae0e <net_if_mcast_monitor+0x22>
			mon->cb(iface, addr, is_joined);
   1ae04:	689b      	ldr	r3, [r3, #8]
   1ae06:	463a      	mov	r2, r7
   1ae08:	4631      	mov	r1, r6
   1ae0a:	4628      	mov	r0, r5
   1ae0c:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&mcast_monitor_callbacks,
   1ae0e:	b904      	cbnz	r4, 1ae12 <net_if_mcast_monitor+0x26>
   1ae10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ae12:	4623      	mov	r3, r4
   1ae14:	6824      	ldr	r4, [r4, #0]
   1ae16:	e7f2      	b.n	1adfe <net_if_mcast_monitor+0x12>
   1ae18:	20002728 	.word	0x20002728

0001ae1c <net_if_ipv6_prefix_add>:
{
   1ae1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ae20:	4698      	mov	r8, r3
		if (!iface->ipv6.unicast[i].is_used) {
   1ae22:	f890 3094 	ldrb.w	r3, [r0, #148]	; 0x94
{
   1ae26:	b085      	sub	sp, #20
   1ae28:	4604      	mov	r4, r0
   1ae2a:	460e      	mov	r6, r1
   1ae2c:	4691      	mov	r9, r2
		if (!iface->ipv6.unicast[i].is_used) {
   1ae2e:	b14b      	cbz	r3, 1ae44 <net_if_ipv6_prefix_add+0x28>
		if (net_ipv6_addr_cmp(prefix, &iface->ipv6.prefix[i].prefix) &&
   1ae30:	f500 71e4 	add.w	r1, r0, #456	; 0x1c8
   1ae34:	4630      	mov	r0, r6
   1ae36:	f7ff fce8 	bl	1a80a <net_ipv6_addr_cmp>
   1ae3a:	b118      	cbz	r0, 1ae44 <net_if_ipv6_prefix_add+0x28>
   1ae3c:	f894 31d8 	ldrb.w	r3, [r4, #472]	; 0x1d8
   1ae40:	454b      	cmp	r3, r9
   1ae42:	d014      	beq.n	1ae6e <net_if_ipv6_prefix_add+0x52>
		if (!iface->ipv6.unicast[i].is_used) {
   1ae44:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
   1ae48:	b19b      	cbz	r3, 1ae72 <net_if_ipv6_prefix_add+0x56>
		if (net_ipv6_addr_cmp(prefix, &iface->ipv6.prefix[i].prefix) &&
   1ae4a:	f504 7101 	add.w	r1, r4, #516	; 0x204
   1ae4e:	4630      	mov	r0, r6
   1ae50:	f7ff fcdb 	bl	1a80a <net_ipv6_addr_cmp>
   1ae54:	b168      	cbz	r0, 1ae72 <net_if_ipv6_prefix_add+0x56>
   1ae56:	f894 3214 	ldrb.w	r3, [r4, #532]	; 0x214
   1ae5a:	454b      	cmp	r3, r9
   1ae5c:	d109      	bne.n	1ae72 <net_if_ipv6_prefix_add+0x56>
   1ae5e:	253c      	movs	r5, #60	; 0x3c
			return &iface->ipv6.prefix[i];
   1ae60:	f505 75d0 	add.w	r5, r5, #416	; 0x1a0
   1ae64:	4425      	add	r5, r4
}
   1ae66:	4628      	mov	r0, r5
   1ae68:	b005      	add	sp, #20
   1ae6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (net_ipv6_addr_cmp(prefix, &iface->ipv6.prefix[i].prefix) &&
   1ae6e:	2500      	movs	r5, #0
   1ae70:	e7f6      	b.n	1ae60 <net_if_ipv6_prefix_add+0x44>
		if (iface->ipv6.prefix[i].is_used) {
   1ae72:	f894 71da 	ldrb.w	r7, [r4, #474]	; 0x1da
   1ae76:	b11f      	cbz	r7, 1ae80 <net_if_ipv6_prefix_add+0x64>
   1ae78:	f894 3216 	ldrb.w	r3, [r4, #534]	; 0x216
   1ae7c:	bbcb      	cbnz	r3, 1aef2 <net_if_ipv6_prefix_add+0xd6>
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1ae7e:	2701      	movs	r7, #1
		net_if_ipv6_prefix_init(&iface->ipv6.prefix[i], prefix, len,
   1ae80:	233c      	movs	r3, #60	; 0x3c
   1ae82:	437b      	muls	r3, r7
   1ae84:	f503 75d0 	add.w	r5, r3, #416	; 0x1a0
	prefix->is_used = true;
   1ae88:	4423      	add	r3, r4
   1ae8a:	2201      	movs	r2, #1
   1ae8c:	f883 21da 	strb.w	r2, [r3, #474]	; 0x1da
	prefix->len = len;
   1ae90:	f883 91d8 	strb.w	r9, [r3, #472]	; 0x1d8
	net_ipaddr_copy(&prefix->prefix, addr);
   1ae94:	4633      	mov	r3, r6
		net_if_ipv6_prefix_init(&iface->ipv6.prefix[i], prefix, len,
   1ae96:	4425      	add	r5, r4
	net_ipaddr_copy(&prefix->prefix, addr);
   1ae98:	466e      	mov	r6, sp
   1ae9a:	f103 0c10 	add.w	ip, r3, #16
   1ae9e:	466a      	mov	r2, sp
   1aea0:	6818      	ldr	r0, [r3, #0]
   1aea2:	6859      	ldr	r1, [r3, #4]
   1aea4:	46b6      	mov	lr, r6
   1aea6:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   1aeaa:	3308      	adds	r3, #8
   1aeac:	4563      	cmp	r3, ip
   1aeae:	4676      	mov	r6, lr
   1aeb0:	d1f6      	bne.n	1aea0 <net_if_ipv6_prefix_add+0x84>
   1aeb2:	f105 0628 	add.w	r6, r5, #40	; 0x28
   1aeb6:	f10d 0e10 	add.w	lr, sp, #16
   1aeba:	4613      	mov	r3, r2
   1aebc:	cb03      	ldmia	r3!, {r0, r1}
   1aebe:	4573      	cmp	r3, lr
   1aec0:	6030      	str	r0, [r6, #0]
   1aec2:	6071      	str	r1, [r6, #4]
   1aec4:	461a      	mov	r2, r3
   1aec6:	f106 0608 	add.w	r6, r6, #8
   1aeca:	d1f6      	bne.n	1aeba <net_if_ipv6_prefix_add+0x9e>
	k_delayed_work_init(&prefix->lifetime, prefix_lf_timeout);
   1aecc:	4628      	mov	r0, r5
   1aece:	490a      	ldr	r1, [pc, #40]	; (1aef8 <net_if_ipv6_prefix_add+0xdc>)
   1aed0:	f007 f99c 	bl	2220c <k_delayed_work_init>
   1aed4:	233c      	movs	r3, #60	; 0x3c
		prefix->is_infinite = true;
   1aed6:	fb03 4707 	mla	r7, r3, r7, r4
	if (lifetime == NET_IPV6_ND_INFINITE_LIFETIME) {
   1aeda:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
		prefix->is_infinite = true;
   1aede:	bf0c      	ite	eq
   1aee0:	2301      	moveq	r3, #1
		prefix->is_infinite = false;
   1aee2:	2300      	movne	r3, #0
   1aee4:	f887 31d9 	strb.w	r3, [r7, #473]	; 0x1d9
		net_mgmt_event_notify(NET_EVENT_IPV6_PREFIX_ADD, iface);
   1aee8:	4621      	mov	r1, r4
   1aeea:	4804      	ldr	r0, [pc, #16]	; (1aefc <net_if_ipv6_prefix_add+0xe0>)
   1aeec:	f7ff fc9e 	bl	1a82c <net_mgmt_event_notify>
		return &iface->ipv6.prefix[i];
   1aef0:	e7b9      	b.n	1ae66 <net_if_ipv6_prefix_add+0x4a>
	return NULL;
   1aef2:	2500      	movs	r5, #0
   1aef4:	e7b7      	b.n	1ae66 <net_if_ipv6_prefix_add+0x4a>
   1aef6:	bf00      	nop
   1aef8:	0001a719 	.word	0x0001a719
   1aefc:	f0600005 	.word	0xf0600005

0001af00 <net_if_ipv6_prefix_lookup>:
		if (!iface->ipv6.prefix[i].is_used) {
   1af00:	f890 31da 	ldrb.w	r3, [r0, #474]	; 0x1da
{
   1af04:	b570      	push	{r4, r5, r6, lr}
   1af06:	4604      	mov	r4, r0
   1af08:	460d      	mov	r5, r1
   1af0a:	4616      	mov	r6, r2
		if (!iface->ipv6.prefix[i].is_used) {
   1af0c:	b123      	cbz	r3, 1af18 <net_if_ipv6_prefix_lookup+0x18>
		if (net_is_ipv6_prefix(iface->ipv6.prefix[i].prefix.s6_addr,
   1af0e:	f500 70e4 	add.w	r0, r0, #456	; 0x1c8
   1af12:	f7ff fc55 	bl	1a7c0 <net_is_ipv6_prefix>
   1af16:	b970      	cbnz	r0, 1af36 <net_if_ipv6_prefix_lookup+0x36>
		if (!iface->ipv6.prefix[i].is_used) {
   1af18:	f894 3216 	ldrb.w	r3, [r4, #534]	; 0x216
   1af1c:	b16b      	cbz	r3, 1af3a <net_if_ipv6_prefix_lookup+0x3a>
		if (net_is_ipv6_prefix(iface->ipv6.prefix[i].prefix.s6_addr,
   1af1e:	4632      	mov	r2, r6
   1af20:	4629      	mov	r1, r5
   1af22:	f504 7001 	add.w	r0, r4, #516	; 0x204
   1af26:	f7ff fc4b 	bl	1a7c0 <net_is_ipv6_prefix>
   1af2a:	b130      	cbz	r0, 1af3a <net_if_ipv6_prefix_lookup+0x3a>
   1af2c:	203c      	movs	r0, #60	; 0x3c
			return &iface->ipv6.prefix[i];
   1af2e:	f500 70d0 	add.w	r0, r0, #416	; 0x1a0
   1af32:	4420      	add	r0, r4
   1af34:	bd70      	pop	{r4, r5, r6, pc}
		if (net_is_ipv6_prefix(iface->ipv6.prefix[i].prefix.s6_addr,
   1af36:	2000      	movs	r0, #0
   1af38:	e7f9      	b.n	1af2e <net_if_ipv6_prefix_lookup+0x2e>
	return NULL;
   1af3a:	2000      	movs	r0, #0
}
   1af3c:	bd70      	pop	{r4, r5, r6, pc}
	...

0001af40 <net_if_ipv6_addr_onlink>:
{
   1af40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (tmp = __net_if_start; tmp != __net_if_end; tmp++) {
   1af42:	4c15      	ldr	r4, [pc, #84]	; (1af98 <net_if_ipv6_addr_onlink+0x58>)
   1af44:	4f15      	ldr	r7, [pc, #84]	; (1af9c <net_if_ipv6_addr_onlink+0x5c>)
{
   1af46:	4605      	mov	r5, r0
   1af48:	460e      	mov	r6, r1
	for (tmp = __net_if_start; tmp != __net_if_end; tmp++) {
   1af4a:	42bc      	cmp	r4, r7
   1af4c:	d101      	bne.n	1af52 <net_if_ipv6_addr_onlink+0x12>
	return false;
   1af4e:	2000      	movs	r0, #0
   1af50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (iface && *iface && *iface != tmp) {
   1af52:	b10d      	cbz	r5, 1af58 <net_if_ipv6_addr_onlink+0x18>
   1af54:	682b      	ldr	r3, [r5, #0]
   1af56:	b9cb      	cbnz	r3, 1af8c <net_if_ipv6_addr_onlink+0x4c>
			if (tmp->ipv6.prefix[i].is_used &&
   1af58:	f894 31da 	ldrb.w	r3, [r4, #474]	; 0x1da
   1af5c:	b13b      	cbz	r3, 1af6e <net_if_ipv6_addr_onlink+0x2e>
			    net_is_ipv6_prefix(tmp->ipv6.prefix[i].prefix.
   1af5e:	f894 21d8 	ldrb.w	r2, [r4, #472]	; 0x1d8
   1af62:	4631      	mov	r1, r6
   1af64:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   1af68:	f7ff fc2a 	bl	1a7c0 <net_is_ipv6_prefix>
			if (tmp->ipv6.prefix[i].is_used &&
   1af6c:	b950      	cbnz	r0, 1af84 <net_if_ipv6_addr_onlink+0x44>
   1af6e:	f894 3216 	ldrb.w	r3, [r4, #534]	; 0x216
   1af72:	b16b      	cbz	r3, 1af90 <net_if_ipv6_addr_onlink+0x50>
			    net_is_ipv6_prefix(tmp->ipv6.prefix[i].prefix.
   1af74:	f894 2214 	ldrb.w	r2, [r4, #532]	; 0x214
   1af78:	4631      	mov	r1, r6
   1af7a:	f504 7001 	add.w	r0, r4, #516	; 0x204
   1af7e:	f7ff fc1f 	bl	1a7c0 <net_is_ipv6_prefix>
			if (tmp->ipv6.prefix[i].is_used &&
   1af82:	b128      	cbz	r0, 1af90 <net_if_ipv6_addr_onlink+0x50>
				if (iface) {
   1af84:	b105      	cbz	r5, 1af88 <net_if_ipv6_addr_onlink+0x48>
					*iface = tmp;
   1af86:	602c      	str	r4, [r5, #0]
				return true;
   1af88:	2001      	movs	r0, #1
}
   1af8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (iface && *iface && *iface != tmp) {
   1af8c:	429c      	cmp	r4, r3
   1af8e:	d0e3      	beq.n	1af58 <net_if_ipv6_addr_onlink+0x18>
	for (tmp = __net_if_start; tmp != __net_if_end; tmp++) {
   1af90:	f504 7418 	add.w	r4, r4, #608	; 0x260
   1af94:	e7d9      	b.n	1af4a <net_if_ipv6_addr_onlink+0xa>
   1af96:	bf00      	nop
   1af98:	2000ab20 	.word	0x2000ab20
   1af9c:	2000ad80 	.word	0x2000ad80

0001afa0 <net_if_ipv6_prefix_set_timer>:
	if (lifetime > (0xfffffffe / MSEC_PER_SEC)) {
   1afa0:	4b04      	ldr	r3, [pc, #16]	; (1afb4 <net_if_ipv6_prefix_set_timer+0x14>)
   1afa2:	4299      	cmp	r1, r3
	u32_t timeout = lifetime * MSEC_PER_SEC;
   1afa4:	bf9a      	itte	ls
   1afa6:	f44f 737a 	movls.w	r3, #1000	; 0x3e8
   1afaa:	4359      	mulls	r1, r3
		timeout = 0xfffffffe;
   1afac:	f06f 0101 	mvnhi.w	r1, #1
	k_delayed_work_submit(&prefix->lifetime, timeout);
   1afb0:	f7ff bc34 	b.w	1a81c <k_delayed_work_submit>
   1afb4:	00418937 	.word	0x00418937

0001afb8 <net_if_ipv6_prefix_unset_timer>:
	if (!prefix->is_used) {
   1afb8:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
   1afbc:	b10b      	cbz	r3, 1afc2 <net_if_ipv6_prefix_unset_timer+0xa>
	k_delayed_work_cancel(&prefix->lifetime);
   1afbe:	f007 b943 	b.w	22248 <k_delayed_work_cancel>
   1afc2:	4770      	bx	lr

0001afc4 <net_if_ipv6_prefix_rm>:
		if (!iface->ipv6.prefix[i].is_used) {
   1afc4:	f890 31da 	ldrb.w	r3, [r0, #474]	; 0x1da
{
   1afc8:	b570      	push	{r4, r5, r6, lr}
   1afca:	4604      	mov	r4, r0
   1afcc:	460e      	mov	r6, r1
   1afce:	4615      	mov	r5, r2
		if (!iface->ipv6.prefix[i].is_used) {
   1afd0:	b143      	cbz	r3, 1afe4 <net_if_ipv6_prefix_rm+0x20>
		if (!net_ipv6_addr_cmp(&iface->ipv6.prefix[i].prefix, addr) ||
   1afd2:	f500 70e4 	add.w	r0, r0, #456	; 0x1c8
   1afd6:	f7ff fc18 	bl	1a80a <net_ipv6_addr_cmp>
   1afda:	b118      	cbz	r0, 1afe4 <net_if_ipv6_prefix_rm+0x20>
   1afdc:	f894 31d8 	ldrb.w	r3, [r4, #472]	; 0x1d8
   1afe0:	42ab      	cmp	r3, r5
   1afe2:	d01f      	beq.n	1b024 <net_if_ipv6_prefix_rm+0x60>
		if (!iface->ipv6.prefix[i].is_used) {
   1afe4:	f894 3216 	ldrb.w	r3, [r4, #534]	; 0x216
   1afe8:	b1fb      	cbz	r3, 1b02a <net_if_ipv6_prefix_rm+0x66>
		if (!net_ipv6_addr_cmp(&iface->ipv6.prefix[i].prefix, addr) ||
   1afea:	4631      	mov	r1, r6
   1afec:	f504 7001 	add.w	r0, r4, #516	; 0x204
   1aff0:	f7ff fc0b 	bl	1a80a <net_ipv6_addr_cmp>
   1aff4:	b1c8      	cbz	r0, 1b02a <net_if_ipv6_prefix_rm+0x66>
   1aff6:	f894 3214 	ldrb.w	r3, [r4, #532]	; 0x214
   1affa:	42ab      	cmp	r3, r5
   1affc:	d115      	bne.n	1b02a <net_if_ipv6_prefix_rm+0x66>
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1affe:	2501      	movs	r5, #1
   1b000:	203c      	movs	r0, #60	; 0x3c
		net_if_ipv6_prefix_unset_timer(&iface->ipv6.prefix[i]);
   1b002:	f500 70d0 	add.w	r0, r0, #416	; 0x1a0
   1b006:	4420      	add	r0, r4
   1b008:	f7ff ffd6 	bl	1afb8 <net_if_ipv6_prefix_unset_timer>
		iface->ipv6.prefix[i].is_used = false;
   1b00c:	233c      	movs	r3, #60	; 0x3c
   1b00e:	fb03 4505 	mla	r5, r3, r5, r4
   1b012:	2300      	movs	r3, #0
   1b014:	f885 31da 	strb.w	r3, [r5, #474]	; 0x1da
		net_mgmt_event_notify(NET_EVENT_IPV6_PREFIX_DEL, iface);
   1b018:	4621      	mov	r1, r4
   1b01a:	4805      	ldr	r0, [pc, #20]	; (1b030 <net_if_ipv6_prefix_rm+0x6c>)
   1b01c:	f7ff fc06 	bl	1a82c <net_mgmt_event_notify>
		return true;
   1b020:	2001      	movs	r0, #1
   1b022:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1b024:	2500      	movs	r5, #0
		if (!net_ipv6_addr_cmp(&iface->ipv6.prefix[i].prefix, addr) ||
   1b026:	4628      	mov	r0, r5
   1b028:	e7eb      	b.n	1b002 <net_if_ipv6_prefix_rm+0x3e>
	return false;
   1b02a:	2000      	movs	r0, #0
}
   1b02c:	bd70      	pop	{r4, r5, r6, pc}
   1b02e:	bf00      	nop
   1b030:	f0600006 	.word	0xf0600006

0001b034 <net_if_ipv6_router_lookup>:
{
   1b034:	b510      	push	{r4, lr}
		if (!routers[i].is_used ||
   1b036:	4c09      	ldr	r4, [pc, #36]	; (1b05c <net_if_ipv6_router_lookup+0x28>)
   1b038:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   1b03c:	b153      	cbz	r3, 1b054 <net_if_ipv6_router_lookup+0x20>
   1b03e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   1b040:	2b0a      	cmp	r3, #10
   1b042:	d107      	bne.n	1b054 <net_if_ipv6_router_lookup+0x20>
		    routers[i].address.family != AF_INET6 ||
   1b044:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1b046:	4298      	cmp	r0, r3
   1b048:	d104      	bne.n	1b054 <net_if_ipv6_router_lookup+0x20>
		if (net_ipv6_addr_cmp(&routers[i].address.in6_addr, addr)) {
   1b04a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   1b04e:	f7ff fbdc 	bl	1a80a <net_ipv6_addr_cmp>
   1b052:	b908      	cbnz	r0, 1b058 <net_if_ipv6_router_lookup+0x24>
	return NULL;
   1b054:	2000      	movs	r0, #0
   1b056:	bd10      	pop	{r4, pc}
			return &routers[i];
   1b058:	4620      	mov	r0, r4
}
   1b05a:	bd10      	pop	{r4, pc}
   1b05c:	20002730 	.word	0x20002730

0001b060 <net_if_ipv6_router_find_default>:
		if (!routers[i].is_used ||
   1b060:	4b0a      	ldr	r3, [pc, #40]	; (1b08c <net_if_ipv6_router_find_default+0x2c>)
   1b062:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   1b066:	b162      	cbz	r2, 1b082 <net_if_ipv6_router_find_default+0x22>
   1b068:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
   1b06c:	b14a      	cbz	r2, 1b082 <net_if_ipv6_router_find_default+0x22>
		    !routers[i].is_default ||
   1b06e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
   1b070:	2a0a      	cmp	r2, #10
   1b072:	d106      	bne.n	1b082 <net_if_ipv6_router_find_default+0x22>
		if (iface && iface != routers[i].iface) {
   1b074:	b138      	cbz	r0, 1b086 <net_if_ipv6_router_find_default+0x26>
   1b076:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	return NULL;
   1b078:	4290      	cmp	r0, r2
   1b07a:	bf0c      	ite	eq
   1b07c:	4618      	moveq	r0, r3
   1b07e:	2000      	movne	r0, #0
   1b080:	4770      	bx	lr
   1b082:	2000      	movs	r0, #0
   1b084:	4770      	bx	lr
		return &routers[i];
   1b086:	4618      	mov	r0, r3
}
   1b088:	4770      	bx	lr
   1b08a:	bf00      	nop
   1b08c:	20002730 	.word	0x20002730

0001b090 <net_if_ipv6_router_update_lifetime>:
	k_delayed_work_submit(&router->lifetime,
   1b090:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1b094:	4359      	muls	r1, r3
   1b096:	f7ff bbc1 	b.w	1a81c <k_delayed_work_submit>
	...

0001b09c <net_if_ipv6_router_add>:
{
   1b09c:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (routers[i].is_used) {
   1b09e:	4c20      	ldr	r4, [pc, #128]	; (1b120 <net_if_ipv6_router_add+0x84>)
   1b0a0:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
{
   1b0a4:	b085      	sub	sp, #20
   1b0a6:	4607      	mov	r7, r0
   1b0a8:	4616      	mov	r6, r2
		if (routers[i].is_used) {
   1b0aa:	bbb3      	cbnz	r3, 1b11a <net_if_ipv6_router_add+0x7e>
	router->is_used = true;
   1b0ac:	2301      	movs	r3, #1
   1b0ae:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
	router->address.family = AF_INET6;
   1b0b2:	230a      	movs	r3, #10
   1b0b4:	8523      	strh	r3, [r4, #40]	; 0x28
	router->iface = iface;
   1b0b6:	63e0      	str	r0, [r4, #60]	; 0x3c
	net_ipaddr_copy(&router->address.in6_addr, addr);
   1b0b8:	460b      	mov	r3, r1
   1b0ba:	466d      	mov	r5, sp
   1b0bc:	f101 0c10 	add.w	ip, r1, #16
   1b0c0:	466a      	mov	r2, sp
   1b0c2:	6818      	ldr	r0, [r3, #0]
   1b0c4:	6859      	ldr	r1, [r3, #4]
   1b0c6:	46ae      	mov	lr, r5
   1b0c8:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   1b0cc:	3308      	adds	r3, #8
   1b0ce:	4563      	cmp	r3, ip
   1b0d0:	4675      	mov	r5, lr
   1b0d2:	d1f6      	bne.n	1b0c2 <net_if_ipv6_router_add+0x26>
   1b0d4:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
   1b0d6:	4d13      	ldr	r5, [pc, #76]	; (1b124 <net_if_ipv6_router_add+0x88>)
   1b0d8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   1b0dc:	2301      	movs	r3, #1
	if (lifetime) {
   1b0de:	b1be      	cbz	r6, 1b110 <net_if_ipv6_router_add+0x74>
		router->is_default = true;
   1b0e0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
		k_delayed_work_init(&router->lifetime, ipv6_router_expired);
   1b0e4:	4910      	ldr	r1, [pc, #64]	; (1b128 <net_if_ipv6_router_add+0x8c>)
		router->is_infinite = false;
   1b0e6:	2300      	movs	r3, #0
		k_delayed_work_init(&router->lifetime, ipv6_router_expired);
   1b0e8:	f1a5 002c 	sub.w	r0, r5, #44	; 0x2c
		router->is_infinite = false;
   1b0ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
		k_delayed_work_init(&router->lifetime, ipv6_router_expired);
   1b0f0:	f007 f88c 	bl	2220c <k_delayed_work_init>
		k_delayed_work_submit(&router->lifetime,
   1b0f4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1b0f8:	4371      	muls	r1, r6
   1b0fa:	f1a5 002c 	sub.w	r0, r5, #44	; 0x2c
   1b0fe:	f7ff fb8d 	bl	1a81c <k_delayed_work_submit>
		net_mgmt_event_notify(NET_EVENT_IPV6_ROUTER_ADD, iface);
   1b102:	480a      	ldr	r0, [pc, #40]	; (1b12c <net_if_ipv6_router_add+0x90>)
   1b104:	4639      	mov	r1, r7
   1b106:	f7ff fb91 	bl	1a82c <net_mgmt_event_notify>
		return &routers[i];
   1b10a:	4805      	ldr	r0, [pc, #20]	; (1b120 <net_if_ipv6_router_add+0x84>)
}
   1b10c:	b005      	add	sp, #20
   1b10e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		router->is_default = false;
   1b110:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
		router->is_infinite = true;
   1b114:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   1b118:	e7f3      	b.n	1b102 <net_if_ipv6_router_add+0x66>
	return NULL;
   1b11a:	2000      	movs	r0, #0
   1b11c:	e7f6      	b.n	1b10c <net_if_ipv6_router_add+0x70>
   1b11e:	bf00      	nop
   1b120:	20002730 	.word	0x20002730
   1b124:	2000275c 	.word	0x2000275c
   1b128:	0001a721 	.word	0x0001a721
   1b12c:	f0600009 	.word	0xf0600009

0001b130 <net_if_ipv6_router_rm>:
		if (!routers[i].is_used) {
   1b130:	4b0a      	ldr	r3, [pc, #40]	; (1b15c <net_if_ipv6_router_rm+0x2c>)
{
   1b132:	b570      	push	{r4, r5, r6, lr}
		if (!routers[i].is_used) {
   1b134:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
{
   1b138:	4605      	mov	r5, r0
		if (!routers[i].is_used) {
   1b13a:	b15c      	cbz	r4, 1b154 <net_if_ipv6_router_rm+0x24>
		if (&routers[i] != router) {
   1b13c:	4298      	cmp	r0, r3
   1b13e:	f04f 0600 	mov.w	r6, #0
   1b142:	d109      	bne.n	1b158 <net_if_ipv6_router_rm+0x28>
		k_delayed_work_cancel(&routers[i].lifetime);
   1b144:	f007 f880 	bl	22248 <k_delayed_work_cancel>
		routers[i].is_used = false;
   1b148:	f885 6040 	strb.w	r6, [r5, #64]	; 0x40
		net_mgmt_event_notify(NET_EVENT_IPV6_ROUTER_DEL,
   1b14c:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   1b14e:	4804      	ldr	r0, [pc, #16]	; (1b160 <net_if_ipv6_router_rm+0x30>)
   1b150:	f7ff fb6c 	bl	1a82c <net_mgmt_event_notify>
}
   1b154:	4620      	mov	r0, r4
   1b156:	bd70      	pop	{r4, r5, r6, pc}
	return false;
   1b158:	4634      	mov	r4, r6
   1b15a:	e7fb      	b.n	1b154 <net_if_ipv6_router_rm+0x24>
   1b15c:	20002730 	.word	0x20002730
   1b160:	f060000a 	.word	0xf060000a

0001b164 <net_if_ipv6_get_ll>:
{
   1b164:	b510      	push	{r4, lr}
   1b166:	f100 0330 	add.w	r3, r0, #48	; 0x30
		if (net_is_ipv6_ll_addr(&iface->ipv6.unicast[i].address.in6_addr)) {
   1b16a:	f248 02fe 	movw	r2, #33022	; 0x80fe
   1b16e:	f500 70ba 	add.w	r0, r0, #372	; 0x174
		if (!iface->ipv6.unicast[i].is_used ||
   1b172:	f893 4064 	ldrb.w	r4, [r3, #100]	; 0x64
   1b176:	b164      	cbz	r4, 1b192 <net_if_ipv6_get_ll+0x2e>
   1b178:	1c4c      	adds	r4, r1, #1
   1b17a:	d003      	beq.n	1b184 <net_if_ipv6_get_ll+0x20>
		    (addr_state != NET_ADDR_ANY_STATE &&
   1b17c:	f993 4061 	ldrsb.w	r4, [r3, #97]	; 0x61
   1b180:	428c      	cmp	r4, r1
   1b182:	d106      	bne.n	1b192 <net_if_ipv6_get_ll+0x2e>
		     iface->ipv6.unicast[i].addr_state != addr_state) ||
   1b184:	f833 4c04 	ldrh.w	r4, [r3, #-4]
   1b188:	2c0a      	cmp	r4, #10
   1b18a:	d102      	bne.n	1b192 <net_if_ipv6_get_ll+0x2e>
		if (net_is_ipv6_ll_addr(&iface->ipv6.unicast[i].address.in6_addr)) {
   1b18c:	881c      	ldrh	r4, [r3, #0]
   1b18e:	4294      	cmp	r4, r2
   1b190:	d004      	beq.n	1b19c <net_if_ipv6_get_ll+0x38>
   1b192:	336c      	adds	r3, #108	; 0x6c
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1b194:	4283      	cmp	r3, r0
   1b196:	d1ec      	bne.n	1b172 <net_if_ipv6_get_ll+0xe>
	return NULL;
   1b198:	2000      	movs	r0, #0
   1b19a:	bd10      	pop	{r4, pc}
   1b19c:	4618      	mov	r0, r3
}
   1b19e:	bd10      	pop	{r4, pc}

0001b1a0 <net_if_ipv6_select_src_addr>:
	return src;
}

const struct in6_addr *net_if_ipv6_select_src_addr(struct net_if *dst_iface,
						   struct in6_addr *dst)
{
   1b1a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct in6_addr *src = NULL;
	u8_t best_match = 0;
	struct net_if *iface;

	if (!net_is_ipv6_ll_addr(dst) && !net_is_ipv6_addr_mcast(dst)) {
   1b1a2:	880d      	ldrh	r5, [r1, #0]
   1b1a4:	f248 02fe 	movw	r2, #33022	; 0x80fe
	u8_t best_match = 0;
   1b1a8:	2400      	movs	r4, #0
	if (!net_is_ipv6_ll_addr(dst) && !net_is_ipv6_addr_mcast(dst)) {
   1b1aa:	4295      	cmp	r5, r2
{
   1b1ac:	4603      	mov	r3, r0
   1b1ae:	460e      	mov	r6, r1
	u8_t best_match = 0;
   1b1b0:	f88d 4007 	strb.w	r4, [sp, #7]
	if (!net_is_ipv6_ll_addr(dst) && !net_is_ipv6_addr_mcast(dst)) {
   1b1b4:	d002      	beq.n	1b1bc <net_if_ipv6_select_src_addr+0x1c>
   1b1b6:	780a      	ldrb	r2, [r1, #0]
   1b1b8:	2aff      	cmp	r2, #255	; 0xff
   1b1ba:	d107      	bne.n	1b1cc <net_if_ipv6_select_src_addr+0x2c>
   1b1bc:	4c16      	ldr	r4, [pc, #88]	; (1b218 <net_if_ipv6_select_src_addr+0x78>)
							 &best_match);
		}

	} else {
		for (iface = __net_if_start;
		     !dst_iface && iface != __net_if_end;
   1b1be:	4d17      	ldr	r5, [pc, #92]	; (1b21c <net_if_ipv6_select_src_addr+0x7c>)
		for (iface = __net_if_start;
   1b1c0:	b323      	cbz	r3, 1b20c <net_if_ipv6_select_src_addr+0x6c>
				break;
			}
		}

		if (dst_iface) {
			src = net_if_ipv6_get_ll(dst_iface, NET_ADDR_PREFERRED);
   1b1c2:	2101      	movs	r1, #1
   1b1c4:	4618      	mov	r0, r3
   1b1c6:	f7ff ffcd 	bl	1b164 <net_if_ipv6_get_ll>
   1b1ca:	e006      	b.n	1b1da <net_if_ipv6_select_src_addr+0x3a>
   1b1cc:	4d12      	ldr	r5, [pc, #72]	; (1b218 <net_if_ipv6_select_src_addr+0x78>)
		     !dst_iface && iface != __net_if_end;
   1b1ce:	4f13      	ldr	r7, [pc, #76]	; (1b21c <net_if_ipv6_select_src_addr+0x7c>)
		for (iface = __net_if_start;
   1b1d0:	b180      	cbz	r0, 1b1f4 <net_if_ipv6_select_src_addr+0x54>
			src = net_if_ipv6_get_best_match(dst_iface, dst,
   1b1d2:	f10d 0207 	add.w	r2, sp, #7
   1b1d6:	f7ff faa7 	bl	1a728 <net_if_ipv6_get_best_match>
			src = net_if_ipv6_get_ll(dst_iface, NET_ADDR_PREFERRED);
   1b1da:	4604      	mov	r4, r0
   1b1dc:	e00c      	b.n	1b1f8 <net_if_ipv6_select_src_addr+0x58>
			addr = net_if_ipv6_get_best_match(iface, dst,
   1b1de:	4628      	mov	r0, r5
   1b1e0:	f10d 0207 	add.w	r2, sp, #7
   1b1e4:	4631      	mov	r1, r6
   1b1e6:	f7ff fa9f 	bl	1a728 <net_if_ipv6_get_best_match>
		     iface++) {
   1b1ea:	f505 7518 	add.w	r5, r5, #608	; 0x260
   1b1ee:	2800      	cmp	r0, #0
   1b1f0:	bf18      	it	ne
   1b1f2:	4604      	movne	r4, r0
		     !dst_iface && iface != __net_if_end;
   1b1f4:	42bd      	cmp	r5, r7
   1b1f6:	d1f2      	bne.n	1b1de <net_if_ipv6_select_src_addr+0x3e>
		}
	}

	if (!src) {
   1b1f8:	b154      	cbz	r4, 1b210 <net_if_ipv6_select_src_addr+0x70>
   1b1fa:	4620      	mov	r0, r4
   1b1fc:	e00a      	b.n	1b214 <net_if_ipv6_select_src_addr+0x74>
			addr = net_if_ipv6_get_ll(iface, NET_ADDR_PREFERRED);
   1b1fe:	2101      	movs	r1, #1
   1b200:	4620      	mov	r0, r4
   1b202:	f7ff ffaf 	bl	1b164 <net_if_ipv6_get_ll>
			if (addr) {
   1b206:	b928      	cbnz	r0, 1b214 <net_if_ipv6_select_src_addr+0x74>
		     iface++) {
   1b208:	f504 7418 	add.w	r4, r4, #608	; 0x260
		     !dst_iface && iface != __net_if_end;
   1b20c:	42ac      	cmp	r4, r5
   1b20e:	d1f6      	bne.n	1b1fe <net_if_ipv6_select_src_addr+0x5e>
		return net_ipv6_unspecified_address();
   1b210:	f002 fbc8 	bl	1d9a4 <net_ipv6_unspecified_address>
	}

	return src;
}
   1b214:	b003      	add	sp, #12
   1b216:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b218:	2000ab20 	.word	0x2000ab20
   1b21c:	2000ad80 	.word	0x2000ad80

0001b220 <net_if_ipv6_calc_reachable_time>:

u32_t net_if_ipv6_calc_reachable_time(struct net_if *iface)
{
   1b220:	b538      	push	{r3, r4, r5, lr}
	u32_t min_reachable, max_reachable;

	min_reachable = (MIN_RANDOM_NUMER * iface->ipv6.base_reachable_time)
   1b222:	f8d0 4240 	ldr.w	r4, [r0, #576]	; 0x240

	NET_DBG("min_reachable:%u max_reachable:%u", min_reachable,
		max_reachable);

	return min_reachable +
	       sys_rand32_get() % (max_reachable - min_reachable);
   1b226:	f7e7 faf9 	bl	281c <sys_rand32_get>
	min_reachable = (MIN_RANDOM_NUMER * iface->ipv6.base_reachable_time)
   1b22a:	0865      	lsrs	r5, r4, #1
	max_reachable = (MAX_RANDOM_NUMER * iface->ipv6.base_reachable_time)
   1b22c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
	       sys_rand32_get() % (max_reachable - min_reachable);
   1b230:	ebc5 0454 	rsb	r4, r5, r4, lsr #1
   1b234:	fbb0 f3f4 	udiv	r3, r0, r4
   1b238:	fb03 0014 	mls	r0, r3, r4, r0
}
   1b23c:	4428      	add	r0, r5
   1b23e:	bd38      	pop	{r3, r4, r5, pc}

0001b240 <net_if_call_link_cb>:
	sys_slist_find_and_remove(&link_callbacks, &link->node);
}

void net_if_call_link_cb(struct net_if *iface, struct net_linkaddr *lladdr,
			 int status)
{
   1b240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b242:	4b09      	ldr	r3, [pc, #36]	; (1b268 <net_if_call_link_cb+0x28>)
   1b244:	681b      	ldr	r3, [r3, #0]
   1b246:	4605      	mov	r5, r0
   1b248:	460e      	mov	r6, r1
   1b24a:	4617      	mov	r7, r2
	struct net_if_link_cb *link, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
   1b24c:	b903      	cbnz	r3, 1b250 <net_if_call_link_cb+0x10>
   1b24e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b250:	681c      	ldr	r4, [r3, #0]
		link->cb(iface, lladdr, status);
   1b252:	685b      	ldr	r3, [r3, #4]
   1b254:	463a      	mov	r2, r7
   1b256:	4631      	mov	r1, r6
   1b258:	4628      	mov	r0, r5
   1b25a:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
   1b25c:	b114      	cbz	r4, 1b264 <net_if_call_link_cb+0x24>
   1b25e:	4623      	mov	r3, r4
   1b260:	6824      	ldr	r4, [r4, #0]
   1b262:	e7f6      	b.n	1b252 <net_if_call_link_cb+0x12>
   1b264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b266:	bf00      	nop
   1b268:	20002720 	.word	0x20002720

0001b26c <net_if_send_data>:
	if (!atomic_test_bit(iface->flags, NET_IF_UP)) {
   1b26c:	f100 020c 	add.w	r2, r0, #12
{
   1b270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b274:	4607      	mov	r7, r0
   1b276:	460c      	mov	r4, r1
   1b278:	68ce      	ldr	r6, [r1, #12]
   1b27a:	f8d1 8010 	ldr.w	r8, [r1, #16]
	if (!atomic_test_bit(iface->flags, NET_IF_UP)) {
   1b27e:	4610      	mov	r0, r2
   1b280:	2100      	movs	r1, #0
   1b282:	f7ff fa90 	bl	1a7a6 <atomic_test_bit>
   1b286:	2800      	cmp	r0, #0
   1b288:	d03f      	beq.n	1b30a <net_if_send_data+0x9e>
	if (!atomic_test_bit(iface->flags, NET_IF_POINTOPOINT) &&
   1b28a:	2101      	movs	r1, #1
   1b28c:	4610      	mov	r0, r2
   1b28e:	f7ff fa8a 	bl	1a7a6 <atomic_test_bit>
   1b292:	b938      	cbnz	r0, 1b2a4 <net_if_send_data+0x38>
   1b294:	6a23      	ldr	r3, [r4, #32]
   1b296:	b92b      	cbnz	r3, 1b2a4 <net_if_send_data+0x38>
   1b298:	6963      	ldr	r3, [r4, #20]
		net_pkt_ll_src(pkt)->addr = net_pkt_ll_if(pkt)->addr;
   1b29a:	691a      	ldr	r2, [r3, #16]
   1b29c:	6222      	str	r2, [r4, #32]
		net_pkt_ll_src(pkt)->len = net_pkt_ll_if(pkt)->len;
   1b29e:	7d1b      	ldrb	r3, [r3, #20]
   1b2a0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	return pkt->family;
   1b2a4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
	if (net_pkt_family(pkt) == AF_INET6) {
   1b2a8:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   1b2ac:	2b0a      	cmp	r3, #10
   1b2ae:	d108      	bne.n	1b2c2 <net_if_send_data+0x56>
		pkt = net_ipv6_prepare_for_send(pkt);
   1b2b0:	4620      	mov	r0, r4
   1b2b2:	f003 fe15 	bl	1eee0 <net_ipv6_prepare_for_send>
		if (!pkt) {
   1b2b6:	4601      	mov	r1, r0
   1b2b8:	b920      	cbnz	r0, 1b2c4 <net_if_send_data+0x58>
			verdict = NET_CONTINUE;
   1b2ba:	2301      	movs	r3, #1
}
   1b2bc:	4618      	mov	r0, r3
   1b2be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1b2c2:	4621      	mov	r1, r4
	verdict = iface->l2->send(iface, pkt);
   1b2c4:	687b      	ldr	r3, [r7, #4]
   1b2c6:	4638      	mov	r0, r7
   1b2c8:	685b      	ldr	r3, [r3, #4]
   1b2ca:	4798      	blx	r3
   1b2cc:	4603      	mov	r3, r0
	if (context && verdict == NET_DROP) {
   1b2ce:	b1be      	cbz	r6, 1b300 <net_if_send_data+0x94>
   1b2d0:	2802      	cmp	r0, #2
   1b2d2:	d1f3      	bne.n	1b2bc <net_if_send_data+0x50>
	int status = -EIO;
   1b2d4:	f06f 0504 	mvn.w	r5, #4
	if (context->send_cb) {
   1b2d8:	f8d6 9034 	ldr.w	r9, [r6, #52]	; 0x34
   1b2dc:	f1b9 0f00 	cmp.w	r9, #0
   1b2e0:	d004      	beq.n	1b2ec <net_if_send_data+0x80>
		context->send_cb(context, status, token, context->user_data);
   1b2e2:	6833      	ldr	r3, [r6, #0]
   1b2e4:	4642      	mov	r2, r8
   1b2e6:	4629      	mov	r1, r5
   1b2e8:	4630      	mov	r0, r6
   1b2ea:	47c8      	blx	r9
	if (verdict == NET_DROP && dst->addr) {
   1b2ec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1b2ee:	b12b      	cbz	r3, 1b2fc <net_if_send_data+0x90>
		net_if_call_link_cb(iface, dst, status);
   1b2f0:	462a      	mov	r2, r5
   1b2f2:	f104 0128 	add.w	r1, r4, #40	; 0x28
   1b2f6:	4638      	mov	r0, r7
   1b2f8:	f7ff ffa2 	bl	1b240 <net_if_call_link_cb>
   1b2fc:	2302      	movs	r3, #2
	return verdict;
   1b2fe:	e7dd      	b.n	1b2bc <net_if_send_data+0x50>
	if (verdict == NET_DROP && dst->addr) {
   1b300:	2802      	cmp	r0, #2
   1b302:	d1db      	bne.n	1b2bc <net_if_send_data+0x50>
	int status = -EIO;
   1b304:	f06f 0504 	mvn.w	r5, #4
   1b308:	e7f0      	b.n	1b2ec <net_if_send_data+0x80>
		status = -ENETDOWN;
   1b30a:	f06f 053d 	mvn.w	r5, #61	; 0x3d
	if (context && verdict == NET_DROP) {
   1b30e:	2e00      	cmp	r6, #0
   1b310:	d0ec      	beq.n	1b2ec <net_if_send_data+0x80>
   1b312:	e7e1      	b.n	1b2d8 <net_if_send_data+0x6c>

0001b314 <net_if_tx>:
{
   1b314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b318:	4605      	mov	r5, r0
	const struct net_if_api *api = iface->dev->driver_api;
   1b31a:	f850 3b18 	ldr.w	r3, [r0], #24
	pkt = k_fifo_get(&iface->tx_queue, K_NO_WAIT);
   1b31e:	2100      	movs	r1, #0
	const struct net_if_api *api = iface->dev->driver_api;
   1b320:	685f      	ldr	r7, [r3, #4]
	pkt = k_fifo_get(&iface->tx_queue, K_NO_WAIT);
   1b322:	f006 fa20 	bl	21766 <k_queue_get>
	if (!pkt) {
   1b326:	4604      	mov	r4, r0
   1b328:	2800      	cmp	r0, #0
   1b32a:	d039      	beq.n	1b3a0 <net_if_tx+0x8c>
	return &pkt->lladdr_src;
}

static inline struct net_linkaddr *net_pkt_ll_dst(struct net_pkt *pkt)
{
	return &pkt->lladdr_dst;
   1b32c:	f100 0828 	add.w	r8, r0, #40	; 0x28
   1b330:	68c6      	ldr	r6, [r0, #12]
   1b332:	f8d0 9010 	ldr.w	r9, [r0, #16]
	if (atomic_test_bit(iface->flags, NET_IF_UP)) {
   1b336:	2100      	movs	r1, #0
   1b338:	f105 000c 	add.w	r0, r5, #12
   1b33c:	f7ff fa33 	bl	1a7a6 <atomic_test_bit>
   1b340:	b358      	cbz	r0, 1b39a <net_if_tx+0x86>
	pkt->sent_or_eof = sent;
   1b342:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
	pkt->pkt_queued = send;
   1b346:	f043 0301 	orr.w	r3, r3, #1
   1b34a:	f36f 0341 	bfc	r3, #1, #1
   1b34e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		status = api->send(iface, pkt);
   1b352:	687b      	ldr	r3, [r7, #4]
   1b354:	4621      	mov	r1, r4
   1b356:	4628      	mov	r0, r5
   1b358:	4798      	blx	r3
	if (status < 0) {
   1b35a:	1e07      	subs	r7, r0, #0
   1b35c:	da08      	bge.n	1b370 <net_if_tx+0x5c>
	pkt->sent_or_eof = sent;
   1b35e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   1b362:	f36f 0300 	bfc	r3, #0, #1
   1b366:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		net_pkt_unref(pkt);
   1b36a:	4620      	mov	r0, r4
   1b36c:	f000 fa8f 	bl	1b88e <net_pkt_unref>
	if (context) {
   1b370:	b14e      	cbz	r6, 1b386 <net_if_tx+0x72>
	if (context->send_cb) {
   1b372:	f8d6 a034 	ldr.w	sl, [r6, #52]	; 0x34
   1b376:	f1ba 0f00 	cmp.w	sl, #0
   1b37a:	d004      	beq.n	1b386 <net_if_tx+0x72>
		context->send_cb(context, status, token, context->user_data);
   1b37c:	6833      	ldr	r3, [r6, #0]
   1b37e:	464a      	mov	r2, r9
   1b380:	4639      	mov	r1, r7
   1b382:	4630      	mov	r0, r6
   1b384:	47d0      	blx	sl
	if (dst->addr) {
   1b386:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1b388:	b123      	cbz	r3, 1b394 <net_if_tx+0x80>
		net_if_call_link_cb(iface, dst, status);
   1b38a:	463a      	mov	r2, r7
   1b38c:	4641      	mov	r1, r8
   1b38e:	4628      	mov	r0, r5
   1b390:	f7ff ff56 	bl	1b240 <net_if_call_link_cb>
	return true;
   1b394:	2001      	movs	r0, #1
}
   1b396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		status = -ENETDOWN;
   1b39a:	f06f 073d 	mvn.w	r7, #61	; 0x3d
   1b39e:	e7de      	b.n	1b35e <net_if_tx+0x4a>
   1b3a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001b3a4 <net_if_flush_tx>:
	if (k_fifo_is_empty(&iface->tx_queue)) {
   1b3a4:	6983      	ldr	r3, [r0, #24]
{
   1b3a6:	b510      	push	{r4, lr}
   1b3a8:	4604      	mov	r4, r0
	if (k_fifo_is_empty(&iface->tx_queue)) {
   1b3aa:	b133      	cbz	r3, 1b3ba <net_if_flush_tx+0x16>
   1b3ac:	f006 fb86 	bl	21abc <_impl_k_yield>
		if (!net_if_tx(iface)) {
   1b3b0:	4620      	mov	r0, r4
   1b3b2:	f7ff ffaf 	bl	1b314 <net_if_tx>
   1b3b6:	2800      	cmp	r0, #0
   1b3b8:	d1fa      	bne.n	1b3b0 <net_if_flush_tx+0xc>
   1b3ba:	bd10      	pop	{r4, pc}

0001b3bc <net_if_tx_thread>:
{
   1b3bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1b3c0:	f006 fbf8 	bl	21bb4 <_impl_k_sem_give>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1b3c4:	4e15      	ldr	r6, [pc, #84]	; (1b41c <net_if_tx_thread+0x60>)
   1b3c6:	f8df 805c 	ldr.w	r8, [pc, #92]	; 1b424 <net_if_tx_thread+0x68>
   1b3ca:	4f15      	ldr	r7, [pc, #84]	; (1b420 <net_if_tx_thread+0x64>)
	int ev_count = 0;
   1b3cc:	2400      	movs	r4, #0
   1b3ce:	f44f 7318 	mov.w	r3, #608	; 0x260
   1b3d2:	4363      	muls	r3, r4
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1b3d4:	199a      	adds	r2, r3, r6
   1b3d6:	4542      	cmp	r2, r8
   1b3d8:	d10a      	bne.n	1b3f0 <net_if_tx_thread+0x34>
		ret = k_poll(__net_if_event_start, ev_count, K_FOREVER);
   1b3da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1b3de:	4621      	mov	r1, r4
   1b3e0:	4638      	mov	r0, r7
   1b3e2:	f007 f95b 	bl	2269c <k_poll>
   1b3e6:	4d0e      	ldr	r5, [pc, #56]	; (1b420 <net_if_tx_thread+0x64>)
	for (; ev_count; event++, ev_count--) {
   1b3e8:	b96c      	cbnz	r4, 1b406 <net_if_tx_thread+0x4a>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   1b3ea:	f006 fb67 	bl	21abc <_impl_k_yield>
   1b3ee:	e7ed      	b.n	1b3cc <net_if_tx_thread+0x10>
		k_poll_event_init(&__net_if_event_start[ev_count],
   1b3f0:	3318      	adds	r3, #24
   1b3f2:	2014      	movs	r0, #20
   1b3f4:	fb00 7004 	mla	r0, r0, r4, r7
   1b3f8:	4433      	add	r3, r6
   1b3fa:	2200      	movs	r2, #0
   1b3fc:	2104      	movs	r1, #4
   1b3fe:	f007 f939 	bl	22674 <k_poll_event_init>
		ev_count++;
   1b402:	3401      	adds	r4, #1
   1b404:	e7e3      	b.n	1b3ce <net_if_tx_thread+0x12>
		switch (event->state) {
   1b406:	7b6b      	ldrb	r3, [r5, #13]
   1b408:	091b      	lsrs	r3, r3, #4
   1b40a:	2b04      	cmp	r3, #4
   1b40c:	d103      	bne.n	1b416 <net_if_tx_thread+0x5a>
			iface = CONTAINER_OF(event->fifo, struct net_if,
   1b40e:	6928      	ldr	r0, [r5, #16]
			net_if_tx(iface);
   1b410:	3818      	subs	r0, #24
   1b412:	f7ff ff7f 	bl	1b314 <net_if_tx>
	for (; ev_count; event++, ev_count--) {
   1b416:	3514      	adds	r5, #20
   1b418:	3c01      	subs	r4, #1
   1b41a:	e7e5      	b.n	1b3e8 <net_if_tx_thread+0x2c>
   1b41c:	2000ab20 	.word	0x2000ab20
   1b420:	2000ad80 	.word	0x2000ad80
   1b424:	2000ad80 	.word	0x2000ad80

0001b428 <net_if_get_by_index>:
	}
}

struct net_if *net_if_get_by_index(u8_t index)
{
	if (&__net_if_start[index] >= __net_if_end) {
   1b428:	4a04      	ldr	r2, [pc, #16]	; (1b43c <net_if_get_by_index+0x14>)
   1b42a:	f44f 7318 	mov.w	r3, #608	; 0x260
   1b42e:	fb03 2000 	mla	r0, r3, r0, r2
		NET_DBG("Index %d is too large", index);
		return NULL;
	}

	return &__net_if_start[index];
}
   1b432:	4b03      	ldr	r3, [pc, #12]	; (1b440 <net_if_get_by_index+0x18>)
   1b434:	4298      	cmp	r0, r3
   1b436:	bf28      	it	cs
   1b438:	2000      	movcs	r0, #0
   1b43a:	4770      	bx	lr
   1b43c:	2000ab20 	.word	0x2000ab20
   1b440:	2000ad80 	.word	0x2000ad80

0001b444 <net_if_get_by_iface>:

u8_t net_if_get_by_iface(struct net_if *iface)
{
	NET_ASSERT(iface >= __net_if_start && iface < __net_if_end);

	return iface - __net_if_start;
   1b444:	4b03      	ldr	r3, [pc, #12]	; (1b454 <net_if_get_by_iface+0x10>)
   1b446:	1ac0      	subs	r0, r0, r3
   1b448:	4b03      	ldr	r3, [pc, #12]	; (1b458 <net_if_get_by_iface+0x14>)
   1b44a:	1140      	asrs	r0, r0, #5
   1b44c:	4358      	muls	r0, r3
}
   1b44e:	b2c0      	uxtb	r0, r0
   1b450:	4770      	bx	lr
   1b452:	bf00      	nop
   1b454:	2000ab20 	.word	0x2000ab20
   1b458:	286bca1b 	.word	0x286bca1b

0001b45c <net_if_up>:
		cb(iface, user_data);
	}
}

int net_if_up(struct net_if *iface)
{
   1b45c:	b538      	push	{r3, r4, r5, lr}
	int status;

	NET_DBG("iface %p", iface);

	if (atomic_test_bit(iface->flags, NET_IF_UP)) {
   1b45e:	f100 050c 	add.w	r5, r0, #12
{
   1b462:	4604      	mov	r4, r0
	if (atomic_test_bit(iface->flags, NET_IF_UP)) {
   1b464:	2100      	movs	r1, #0
   1b466:	4628      	mov	r0, r5
   1b468:	f7ff f99d 	bl	1a7a6 <atomic_test_bit>
   1b46c:	b9c0      	cbnz	r0, 1b4a0 <net_if_up+0x44>
		return 0;
	}

	/* If the L2 does not support enable just set the flag */
	if (!iface->l2->enable) {
   1b46e:	6863      	ldr	r3, [r4, #4]
   1b470:	68db      	ldr	r3, [r3, #12]
   1b472:	b9bb      	cbnz	r3, 1b4a4 <net_if_up+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1b474:	f3bf 8f5b 	dmb	ish
   1b478:	e855 3f00 	ldrex	r3, [r5]
   1b47c:	f043 0301 	orr.w	r3, r3, #1
   1b480:	e845 3200 	strex	r2, r3, [r5]
   1b484:	2a00      	cmp	r2, #0
   1b486:	d1f7      	bne.n	1b478 <net_if_up+0x1c>
   1b488:	f3bf 8f5b 	dmb	ish
done:
	atomic_set_bit(iface->flags, NET_IF_UP);

#if defined(CONFIG_NET_IPV6_DAD)
	NET_DBG("Starting DAD for iface %p", iface);
	net_if_start_dad(iface);
   1b48c:	4620      	mov	r0, r4
   1b48e:	f7ff fb3f 	bl	1ab10 <net_if_start_dad>
	join_mcast_solicit_node(iface, &iface->ipv6.mcast[0].address.in6_addr);
#endif

#if defined(CONFIG_NET_IPV6_ND)
	NET_DBG("Starting ND/RS for iface %p", iface);
	net_if_start_rs(iface);
   1b492:	4620      	mov	r0, r4
   1b494:	f7ff fa04 	bl	1a8a0 <net_if_start_rs>
#endif

	net_mgmt_event_notify(NET_EVENT_IF_UP, iface);
   1b498:	4621      	mov	r1, r4
   1b49a:	4805      	ldr	r0, [pc, #20]	; (1b4b0 <net_if_up+0x54>)
   1b49c:	f7ff f9c6 	bl	1a82c <net_mgmt_event_notify>
		return 0;
   1b4a0:	2000      	movs	r0, #0

	return 0;
}
   1b4a2:	bd38      	pop	{r3, r4, r5, pc}
	status = iface->l2->enable(iface, true);
   1b4a4:	2101      	movs	r1, #1
   1b4a6:	4620      	mov	r0, r4
   1b4a8:	4798      	blx	r3
	if (status < 0) {
   1b4aa:	2800      	cmp	r0, #0
   1b4ac:	dae2      	bge.n	1b474 <net_if_up+0x18>
   1b4ae:	bd38      	pop	{r3, r4, r5, pc}
   1b4b0:	d0010002 	.word	0xd0010002

0001b4b4 <net_if_carrier_down>:

void net_if_carrier_down(struct net_if *iface)
{
   1b4b4:	b510      	push	{r4, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1b4b6:	f100 030c 	add.w	r3, r0, #12
   1b4ba:	4604      	mov	r4, r0
   1b4bc:	f3bf 8f5b 	dmb	ish
   1b4c0:	e853 2f00 	ldrex	r2, [r3]
   1b4c4:	f022 0201 	bic.w	r2, r2, #1
   1b4c8:	e843 2100 	strex	r1, r2, [r3]
   1b4cc:	2900      	cmp	r1, #0
   1b4ce:	d1f7      	bne.n	1b4c0 <net_if_carrier_down+0xc>
   1b4d0:	f3bf 8f5b 	dmb	ish
	NET_DBG("iface %p", iface);

	atomic_clear_bit(iface->flags, NET_IF_UP);

	net_if_flush_tx(iface);
   1b4d4:	f7ff ff66 	bl	1b3a4 <net_if_flush_tx>

	net_mgmt_event_notify(NET_EVENT_IF_DOWN, iface);
   1b4d8:	4621      	mov	r1, r4
   1b4da:	4802      	ldr	r0, [pc, #8]	; (1b4e4 <net_if_carrier_down+0x30>)
}
   1b4dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	net_mgmt_event_notify(NET_EVENT_IF_DOWN, iface);
   1b4e0:	f7ff b9a4 	b.w	1a82c <net_mgmt_event_notify>
   1b4e4:	d0010001 	.word	0xd0010001

0001b4e8 <net_if_init>:

	return 0;
}

void net_if_init(struct k_sem *startup_sync)
{
   1b4e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct net_if *iface;

	NET_DBG("");

	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1b4ec:	4c1f      	ldr	r4, [pc, #124]	; (1b56c <net_if_init+0x84>)
   1b4ee:	4f20      	ldr	r7, [pc, #128]	; (1b570 <net_if_init+0x88>)
		iface->ipv6.base_reachable_time = REACHABLE_TIME;

		net_if_ipv6_set_reachable_time(iface);

#if defined(CONFIG_NET_IPV6_ND)
		k_delayed_work_init(&iface->ipv6.rs_timer, rs_timeout);
   1b4f0:	f8df 908c 	ldr.w	r9, [pc, #140]	; 1b580 <net_if_init+0x98>
{
   1b4f4:	b086      	sub	sp, #24
   1b4f6:	4605      	mov	r5, r0
   1b4f8:	4626      	mov	r6, r4
		iface->ipv6.hop_limit = CONFIG_NET_INITIAL_HOP_LIMIT;
   1b4fa:	f04f 0840 	mov.w	r8, #64	; 0x40
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1b4fe:	42bc      	cmp	r4, r7
   1b500:	d115      	bne.n	1b52e <net_if_init+0x46>
#endif
#endif
	}

	if (iface == __net_if_start) {
   1b502:	42b4      	cmp	r4, r6
   1b504:	d010      	beq.n	1b528 <net_if_init+0x40>

   1b506:	2201      	movs	r2, #1
   1b508:	2300      	movs	r3, #0
   1b50a:	9204      	str	r2, [sp, #16]
   1b50c:	f06f 0208 	mvn.w	r2, #8
   1b510:	9305      	str	r3, [sp, #20]
   1b512:	9203      	str	r2, [sp, #12]
   1b514:	9302      	str	r3, [sp, #8]
   1b516:	9301      	str	r3, [sp, #4]
   1b518:	9500      	str	r5, [sp, #0]
   1b51a:	4b16      	ldr	r3, [pc, #88]	; (1b574 <net_if_init+0x8c>)
   1b51c:	4916      	ldr	r1, [pc, #88]	; (1b578 <net_if_init+0x90>)
   1b51e:	4817      	ldr	r0, [pc, #92]	; (1b57c <net_if_init+0x94>)
   1b520:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
   1b524:	f006 fd82 	bl	2202c <_impl_k_thread_create>
	k_thread_create(&tx_thread_data, tx_stack,
			K_THREAD_STACK_SIZEOF(tx_stack),
			(k_thread_entry_t)net_if_tx_thread,
			startup_sync, NULL, NULL, K_PRIO_COOP(7),
			K_ESSENTIAL, K_NO_WAIT);
}
   1b528:	b006      	add	sp, #24
   1b52a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	const struct net_if_api *api = iface->dev->driver_api;
   1b52e:	4620      	mov	r0, r4
   1b530:	f850 3b18 	ldr.w	r3, [r0], #24
   1b534:	f8d3 a004 	ldr.w	sl, [r3, #4]
	k_fifo_init(&iface->tx_queue);
   1b538:	f006 f8c0 	bl	216bc <k_queue_init>
	api->init(iface);
   1b53c:	4620      	mov	r0, r4
   1b53e:	f8da 3000 	ldr.w	r3, [sl]
   1b542:	4798      	blx	r3
		iface->ipv6.base_reachable_time = REACHABLE_TIME;
   1b544:	f247 5330 	movw	r3, #30000	; 0x7530
	iface->ipv6.reachable_time = net_if_ipv6_calc_reachable_time(iface);
   1b548:	4620      	mov	r0, r4
   1b54a:	f8c4 3240 	str.w	r3, [r4, #576]	; 0x240
		iface->ipv6.hop_limit = CONFIG_NET_INITIAL_HOP_LIMIT;
   1b54e:	f884 824c 	strb.w	r8, [r4, #588]	; 0x24c
   1b552:	f7ff fe65 	bl	1b220 <net_if_ipv6_calc_reachable_time>
		k_delayed_work_init(&iface->ipv6.rs_timer, rs_timeout);
   1b556:	4649      	mov	r1, r9
   1b558:	f8c4 0244 	str.w	r0, [r4, #580]	; 0x244
   1b55c:	f504 7006 	add.w	r0, r4, #536	; 0x218
   1b560:	f006 fe54 	bl	2220c <k_delayed_work_init>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1b564:	f504 7418 	add.w	r4, r4, #608	; 0x260
   1b568:	e7c9      	b.n	1b4fe <net_if_init+0x16>
   1b56a:	bf00      	nop
   1b56c:	2000ab20 	.word	0x2000ab20
   1b570:	2000ad80 	.word	0x2000ad80
   1b574:	0001b3bd 	.word	0x0001b3bd
   1b578:	20006718 	.word	0x20006718
   1b57c:	20002774 	.word	0x20002774
   1b580:	0001a8bd 	.word	0x0001a8bd

0001b584 <net_if_post_init>:

void net_if_post_init(void)
{
   1b584:	b538      	push	{r3, r4, r5, lr}
	struct net_if *iface;

	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1b586:	4c05      	ldr	r4, [pc, #20]	; (1b59c <net_if_post_init+0x18>)
   1b588:	4d05      	ldr	r5, [pc, #20]	; (1b5a0 <net_if_post_init+0x1c>)
   1b58a:	42ac      	cmp	r4, r5
   1b58c:	d100      	bne.n	1b590 <net_if_post_init+0xc>

	/* RPL init must be done after the network interface is up
	 * as the RPL code wants to add multicast address to interface.
	 */
	net_rpl_init();
}
   1b58e:	bd38      	pop	{r3, r4, r5, pc}
		net_if_up(iface);
   1b590:	4620      	mov	r0, r4
   1b592:	f7ff ff63 	bl	1b45c <net_if_up>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1b596:	f504 7418 	add.w	r4, r4, #608	; 0x260
   1b59a:	e7f6      	b.n	1b58a <net_if_post_init+0x6>
   1b59c:	2000ab20 	.word	0x2000ab20
   1b5a0:	2000ad80 	.word	0x2000ad80

0001b5a4 <net_pkt_get_addr>:
	}
}

static int net_pkt_get_addr(struct net_pkt *pkt, bool is_src,
			    struct sockaddr *addr, socklen_t addrlen)
{
   1b5a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b5a8:	4606      	mov	r6, r0
   1b5aa:	b08a      	sub	sp, #40	; 0x28
   1b5ac:	460f      	mov	r7, r1
   1b5ae:	4698      	mov	r8, r3
	enum net_ip_protocol proto;
	sa_family_t family;
	u16_t port;

	if (!addr || !pkt) {
   1b5b0:	4614      	mov	r4, r2
   1b5b2:	b922      	cbnz	r2, 1b5be <net_pkt_get_addr+0x1a>
	} else if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
		struct net_udp_hdr hdr, *udp_hdr;

		udp_hdr = net_udp_get_hdr(pkt, &hdr);
		if (!udp_hdr) {
			return -EINVAL;
   1b5b4:	f06f 0015 	mvn.w	r0, #21
	} else {
		return -ENOTSUP;
	}

	return 0;
}
   1b5b8:	b00a      	add	sp, #40	; 0x28
   1b5ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!addr || !pkt) {
   1b5be:	2800      	cmp	r0, #0
   1b5c0:	d0f8      	beq.n	1b5b4 <net_pkt_get_addr+0x10>
	return pkt->family;
   1b5c2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
	family = net_pkt_family(pkt);
   1b5c6:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (IS_ENABLED(CONFIG_NET_IPV6) && family == AF_INET6) {
   1b5ca:	2b0a      	cmp	r3, #10
	addr->sa_family = family;
   1b5cc:	8013      	strh	r3, [r2, #0]
	if (IS_ENABLED(CONFIG_NET_IPV6) && family == AF_INET6) {
   1b5ce:	d14f      	bne.n	1b670 <net_pkt_get_addr+0xcc>
	return pkt->frags->data;
   1b5d0:	6883      	ldr	r3, [r0, #8]
		proto = NET_IPV6_HDR(pkt)->nexthdr;
   1b5d2:	689b      	ldr	r3, [r3, #8]
   1b5d4:	799b      	ldrb	r3, [r3, #6]
	if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
   1b5d6:	2b06      	cmp	r3, #6
   1b5d8:	d128      	bne.n	1b62c <net_pkt_get_addr+0x88>
		tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   1b5da:	a905      	add	r1, sp, #20
   1b5dc:	f004 febe 	bl	2035c <net_tcp_get_hdr>
		if (!udp_hdr) {
   1b5e0:	2800      	cmp	r0, #0
   1b5e2:	d0e7      	beq.n	1b5b4 <net_pkt_get_addr+0x10>
		if (is_src) {
   1b5e4:	b347      	cbz	r7, 1b638 <net_pkt_get_addr+0x94>
			port = udp_hdr->src_port;
   1b5e6:	8805      	ldrh	r5, [r0, #0]
		if (addrlen < sizeof(struct sockaddr_in6)) {
   1b5e8:	f1b8 0f17 	cmp.w	r8, #23
   1b5ec:	d9e2      	bls.n	1b5b4 <net_pkt_get_addr+0x10>
   1b5ee:	68b3      	ldr	r3, [r6, #8]
			net_ipaddr_copy(&addr6->sin6_addr,
   1b5f0:	689e      	ldr	r6, [r3, #8]
		if (is_src) {
   1b5f2:	b31f      	cbz	r7, 1b63c <net_pkt_get_addr+0x98>
			net_ipaddr_copy(&addr6->sin6_addr,
   1b5f4:	af01      	add	r7, sp, #4
   1b5f6:	f106 0308 	add.w	r3, r6, #8
   1b5fa:	463a      	mov	r2, r7
   1b5fc:	3618      	adds	r6, #24
   1b5fe:	6818      	ldr	r0, [r3, #0]
   1b600:	6859      	ldr	r1, [r3, #4]
   1b602:	46be      	mov	lr, r7
   1b604:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   1b608:	3308      	adds	r3, #8
   1b60a:	42b3      	cmp	r3, r6
   1b60c:	4677      	mov	r7, lr
   1b60e:	d1f6      	bne.n	1b5fe <net_pkt_get_addr+0x5a>
   1b610:	1d26      	adds	r6, r4, #4
   1b612:	af05      	add	r7, sp, #20
   1b614:	4613      	mov	r3, r2
   1b616:	cb03      	ldmia	r3!, {r0, r1}
   1b618:	42bb      	cmp	r3, r7
   1b61a:	6030      	str	r0, [r6, #0]
   1b61c:	6071      	str	r1, [r6, #4]
   1b61e:	461a      	mov	r2, r3
   1b620:	f106 0608 	add.w	r6, r6, #8
   1b624:	d1f6      	bne.n	1b614 <net_pkt_get_addr+0x70>
		addr6->sin6_port = port;
   1b626:	8065      	strh	r5, [r4, #2]
	return 0;
   1b628:	2000      	movs	r0, #0
   1b62a:	e7c5      	b.n	1b5b8 <net_pkt_get_addr+0x14>
	} else if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   1b62c:	2b11      	cmp	r3, #17
   1b62e:	d11f      	bne.n	1b670 <net_pkt_get_addr+0xcc>
		udp_hdr = net_udp_get_hdr(pkt, &hdr);
   1b630:	a905      	add	r1, sp, #20
   1b632:	f005 fad9 	bl	20be8 <net_udp_get_hdr>
   1b636:	e7d3      	b.n	1b5e0 <net_pkt_get_addr+0x3c>
			port = udp_hdr->dst_port;
   1b638:	8845      	ldrh	r5, [r0, #2]
   1b63a:	e7d5      	b.n	1b5e8 <net_pkt_get_addr+0x44>
			net_ipaddr_copy(&addr6->sin6_addr,
   1b63c:	af05      	add	r7, sp, #20
   1b63e:	f106 0318 	add.w	r3, r6, #24
   1b642:	463a      	mov	r2, r7
   1b644:	3628      	adds	r6, #40	; 0x28
   1b646:	6818      	ldr	r0, [r3, #0]
   1b648:	6859      	ldr	r1, [r3, #4]
   1b64a:	46be      	mov	lr, r7
   1b64c:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   1b650:	3308      	adds	r3, #8
   1b652:	42b3      	cmp	r3, r6
   1b654:	4677      	mov	r7, lr
   1b656:	d1f6      	bne.n	1b646 <net_pkt_get_addr+0xa2>
   1b658:	1d26      	adds	r6, r4, #4
   1b65a:	af09      	add	r7, sp, #36	; 0x24
   1b65c:	4613      	mov	r3, r2
   1b65e:	cb03      	ldmia	r3!, {r0, r1}
   1b660:	42bb      	cmp	r3, r7
   1b662:	6030      	str	r0, [r6, #0]
   1b664:	6071      	str	r1, [r6, #4]
   1b666:	461a      	mov	r2, r3
   1b668:	f106 0608 	add.w	r6, r6, #8
   1b66c:	d1f6      	bne.n	1b65c <net_pkt_get_addr+0xb8>
   1b66e:	e7da      	b.n	1b626 <net_pkt_get_addr+0x82>
		return -ENOTSUP;
   1b670:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1b674:	e7a0      	b.n	1b5b8 <net_pkt_get_addr+0x14>

0001b676 <net_pkt_get_reserve>:
{
   1b676:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1b678:	4604      	mov	r4, r0
   1b67a:	460d      	mov	r5, r1
   1b67c:	4616      	mov	r6, r2
	if (k_is_in_isr()) {
   1b67e:	f006 fc85 	bl	21f8c <k_is_in_isr>
   1b682:	b198      	cbz	r0, 1b6ac <net_pkt_get_reserve+0x36>
		ret = k_mem_slab_alloc(slab, (void **)&pkt, K_NO_WAIT);
   1b684:	2200      	movs	r2, #0
		ret = k_mem_slab_alloc(slab, (void **)&pkt, timeout);
   1b686:	a901      	add	r1, sp, #4
   1b688:	4620      	mov	r0, r4
   1b68a:	f005 fef9 	bl	21480 <k_mem_slab_alloc>
	if (ret) {
   1b68e:	b978      	cbnz	r0, 1b6b0 <net_pkt_get_reserve+0x3a>
	memset(pkt, 0, sizeof(struct net_pkt));
   1b690:	4601      	mov	r1, r0
   1b692:	2248      	movs	r2, #72	; 0x48
   1b694:	9801      	ldr	r0, [sp, #4]
   1b696:	f7e5 f8a8 	bl	7ea <memset>
	net_pkt_set_ll_reserve(pkt, reserve_head);
   1b69a:	9801      	ldr	r0, [sp, #4]
	pkt->ref = 1;
   1b69c:	2301      	movs	r3, #1
	net_pkt_set_ll_reserve(pkt, reserve_head);
   1b69e:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
	pkt->ref = 1;
   1b6a2:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
	pkt->slab = slab;
   1b6a6:	6044      	str	r4, [r0, #4]
}
   1b6a8:	b002      	add	sp, #8
   1b6aa:	bd70      	pop	{r4, r5, r6, pc}
		ret = k_mem_slab_alloc(slab, (void **)&pkt, timeout);
   1b6ac:	4632      	mov	r2, r6
   1b6ae:	e7ea      	b.n	1b686 <net_pkt_get_reserve+0x10>
		return NULL;
   1b6b0:	2000      	movs	r0, #0
   1b6b2:	e7f9      	b.n	1b6a8 <net_pkt_get_reserve+0x32>

0001b6b4 <net_pkt_get>:
{
   1b6b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b6b6:	4606      	mov	r6, r0
   1b6b8:	4617      	mov	r7, r2
	if (!context) {
   1b6ba:	460c      	mov	r4, r1
   1b6bc:	b909      	cbnz	r1, 1b6c2 <net_pkt_get+0xe>
		return NULL;
   1b6be:	2000      	movs	r0, #0
   1b6c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_if_get_by_index(context->iface);
   1b6c2:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
   1b6c6:	f7ff feaf 	bl	1b428 <net_if_get_by_index>
	if (!iface) {
   1b6ca:	4605      	mov	r5, r0
   1b6cc:	2800      	cmp	r0, #0
   1b6ce:	d0f6      	beq.n	1b6be <net_pkt_get+0xa>
	if (context->flags & NET_CONTEXT_FAMILY) {
   1b6d0:	f894 105d 	ldrb.w	r1, [r4, #93]	; 0x5d
   1b6d4:	f011 0110 	ands.w	r1, r1, #16
   1b6d8:	d135      	bne.n	1b746 <net_pkt_get+0x92>
	return iface->l2->reserve(iface, (void *)dst_ip6);
   1b6da:	686b      	ldr	r3, [r5, #4]
   1b6dc:	4628      	mov	r0, r5
   1b6de:	689b      	ldr	r3, [r3, #8]
   1b6e0:	4798      	blx	r3
	pkt = net_pkt_get_reserve(slab, net_if_get_ll_reserve(iface, addr6),
   1b6e2:	463a      	mov	r2, r7
   1b6e4:	4601      	mov	r1, r0
   1b6e6:	4630      	mov	r0, r6
   1b6e8:	f7ff ffc5 	bl	1b676 <net_pkt_get_reserve>
	if (!pkt) {
   1b6ec:	2800      	cmp	r0, #0
   1b6ee:	d0e6      	beq.n	1b6be <net_pkt_get+0xa>
	pkt->context = ctx;
   1b6f0:	60c4      	str	r4, [r0, #12]
	pkt->iface = iface;
   1b6f2:	6145      	str	r5, [r0, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1b6f4:	7d6b      	ldrb	r3, [r5, #21]
   1b6f6:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1b6fa:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
   1b6fe:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
	return AF_INET;
   1b702:	f013 0f10 	tst.w	r3, #16
	pkt->family = family;
   1b706:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   1b70a:	bf14      	ite	ne
   1b70c:	220a      	movne	r2, #10
   1b70e:	2202      	moveq	r2, #2
   1b710:	f362 03c6 	bfi	r3, r2, #3, #4
   1b714:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
	if (slab != &rx_pkts) {
   1b718:	4b0e      	ldr	r3, [pc, #56]	; (1b754 <net_pkt_get+0xa0>)
   1b71a:	429e      	cmp	r6, r3
   1b71c:	d018      	beq.n	1b750 <net_pkt_get+0x9c>
		if (IS_ENABLED(CONFIG_NET_IPV6) && family == AF_INET6) {
   1b71e:	2a0a      	cmp	r2, #10
   1b720:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
   1b722:	d10e      	bne.n	1b742 <net_pkt_get+0x8e>
			data_len = max(iface_len, NET_IPV6_MTU);
   1b724:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
   1b728:	bf38      	it	cc
   1b72a:	f44f 63a0 	movcc.w	r3, #1280	; 0x500
			data_len -= NET_IPV6H_LEN;
   1b72e:	3b28      	subs	r3, #40	; 0x28
   1b730:	b29b      	uxth	r3, r3
	if (context->flags & NET_CONTEXT_PROTO) {
   1b732:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
   1b736:	0652      	lsls	r2, r2, #25
   1b738:	d408      	bmi.n	1b74c <net_pkt_get+0x98>
			data_len -= NET_UDPH_LEN;
   1b73a:	3b08      	subs	r3, #8
   1b73c:	b29b      	uxth	r3, r3
		pkt->data_len = data_len;
   1b73e:	8603      	strh	r3, [r0, #48]	; 0x30
   1b740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint16_t iface_len, data_len = 0;
   1b742:	2300      	movs	r3, #0
   1b744:	e7f5      	b.n	1b732 <net_pkt_get+0x7e>
		addr6 = &((struct sockaddr_in6 *) &context->remote)->sin6_addr;
   1b746:	f104 0118 	add.w	r1, r4, #24
   1b74a:	e7c6      	b.n	1b6da <net_pkt_get+0x26>
			data_len -= NET_TCP_MAX_OPT_SIZE;
   1b74c:	3b1c      	subs	r3, #28
   1b74e:	e7f5      	b.n	1b73c <net_pkt_get+0x88>
}
   1b750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b752:	bf00      	nop
   1b754:	2000a97c 	.word	0x2000a97c

0001b758 <net_pkt_get_reserve_data>:
{
   1b758:	b570      	push	{r4, r5, r6, lr}
   1b75a:	4604      	mov	r4, r0
   1b75c:	460d      	mov	r5, r1
   1b75e:	4616      	mov	r6, r2
	if (k_is_in_isr()) {
   1b760:	f006 fc14 	bl	21f8c <k_is_in_isr>
   1b764:	b158      	cbz	r0, 1b77e <net_pkt_get_reserve_data+0x26>
		frag = net_buf_alloc(pool, K_NO_WAIT);
   1b766:	2100      	movs	r1, #0
		frag = net_buf_alloc(pool, timeout);
   1b768:	4620      	mov	r0, r4
   1b76a:	f7fd fd91 	bl	19290 <net_buf_alloc_fixed>
   1b76e:	4604      	mov	r4, r0
	if (!frag) {
   1b770:	b118      	cbz	r0, 1b77a <net_pkt_get_reserve_data+0x22>
	net_buf_reserve(frag, reserve_head);
   1b772:	4629      	mov	r1, r5
   1b774:	3008      	adds	r0, #8
   1b776:	f7fd fdaa 	bl	192ce <net_buf_simple_reserve>
}
   1b77a:	4620      	mov	r0, r4
   1b77c:	bd70      	pop	{r4, r5, r6, pc}
		frag = net_buf_alloc(pool, timeout);
   1b77e:	4631      	mov	r1, r6
   1b780:	e7f2      	b.n	1b768 <net_pkt_get_reserve_data+0x10>
	...

0001b784 <net_pkt_get_reserve_rx>:
	return net_pkt_get_reserve(&rx_pkts, reserve_head, timeout);
   1b784:	460a      	mov	r2, r1
   1b786:	4601      	mov	r1, r0
   1b788:	4801      	ldr	r0, [pc, #4]	; (1b790 <net_pkt_get_reserve_rx+0xc>)
   1b78a:	f7ff bf74 	b.w	1b676 <net_pkt_get_reserve>
   1b78e:	bf00      	nop
   1b790:	2000a97c 	.word	0x2000a97c

0001b794 <net_pkt_get_reserve_tx>:
	return net_pkt_get_reserve(&tx_pkts, reserve_head, timeout);
   1b794:	460a      	mov	r2, r1
   1b796:	4601      	mov	r1, r0
   1b798:	4801      	ldr	r0, [pc, #4]	; (1b7a0 <net_pkt_get_reserve_tx+0xc>)
   1b79a:	f7ff bf6c 	b.w	1b676 <net_pkt_get_reserve>
   1b79e:	bf00      	nop
   1b7a0:	2000a998 	.word	0x2000a998

0001b7a4 <net_pkt_get_reserve_rx_data>:
	return net_pkt_get_reserve_data(&rx_bufs, reserve_head, timeout);
   1b7a4:	460a      	mov	r2, r1
   1b7a6:	4601      	mov	r1, r0
   1b7a8:	4801      	ldr	r0, [pc, #4]	; (1b7b0 <net_pkt_get_reserve_rx_data+0xc>)
   1b7aa:	f7ff bfd5 	b.w	1b758 <net_pkt_get_reserve_data>
   1b7ae:	bf00      	nop
   1b7b0:	2000aadc 	.word	0x2000aadc

0001b7b4 <net_pkt_get_reserve_tx_data>:
	return net_pkt_get_reserve_data(&tx_bufs, reserve_head, timeout);
   1b7b4:	460a      	mov	r2, r1
   1b7b6:	4601      	mov	r1, r0
   1b7b8:	4801      	ldr	r0, [pc, #4]	; (1b7c0 <net_pkt_get_reserve_tx_data+0xc>)
   1b7ba:	f7ff bfcd 	b.w	1b758 <net_pkt_get_reserve_data>
   1b7be:	bf00      	nop
   1b7c0:	2000aafc 	.word	0x2000aafc

0001b7c4 <net_pkt_get_frag>:
{
   1b7c4:	b538      	push	{r3, r4, r5, lr}
   1b7c6:	68c3      	ldr	r3, [r0, #12]
   1b7c8:	4604      	mov	r4, r0
   1b7ca:	460d      	mov	r5, r1
	if (context && context->data_pool) {
   1b7cc:	b14b      	cbz	r3, 1b7e2 <net_pkt_get_frag+0x1e>
   1b7ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b7d0:	b13b      	cbz	r3, 1b7e2 <net_pkt_get_frag+0x1e>
		return net_pkt_get_reserve_data(context->data_pool(),
   1b7d2:	4798      	blx	r3
   1b7d4:	462a      	mov	r2, r5
   1b7d6:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
}
   1b7da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return net_pkt_get_reserve_data(context->data_pool(),
   1b7de:	f7ff bfbb 	b.w	1b758 <net_pkt_get_reserve_data>
	if (pkt->slab == &rx_pkts) {
   1b7e2:	6862      	ldr	r2, [r4, #4]
   1b7e4:	4b06      	ldr	r3, [pc, #24]	; (1b800 <net_pkt_get_frag+0x3c>)
   1b7e6:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
   1b7ea:	429a      	cmp	r2, r3
		return net_pkt_get_reserve_rx_data(net_pkt_ll_reserve(pkt),
   1b7ec:	4629      	mov	r1, r5
	if (pkt->slab == &rx_pkts) {
   1b7ee:	d103      	bne.n	1b7f8 <net_pkt_get_frag+0x34>
}
   1b7f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return net_pkt_get_reserve_rx_data(net_pkt_ll_reserve(pkt),
   1b7f4:	f7ff bfd6 	b.w	1b7a4 <net_pkt_get_reserve_rx_data>
}
   1b7f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_pkt_get_reserve_tx_data(net_pkt_ll_reserve(pkt),
   1b7fc:	f7ff bfda 	b.w	1b7b4 <net_pkt_get_reserve_tx_data>
   1b800:	2000a97c 	.word	0x2000a97c

0001b804 <net_pkt_get_tx>:
{
   1b804:	b538      	push	{r3, r4, r5, lr}
   1b806:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   1b808:	4604      	mov	r4, r0
   1b80a:	460d      	mov	r5, r1
	if (context->tx_slab) {
   1b80c:	b933      	cbnz	r3, 1b81c <net_pkt_get_tx+0x18>
	return net_pkt_get(slab ? slab : &tx_pkts, context, timeout);
   1b80e:	4805      	ldr	r0, [pc, #20]	; (1b824 <net_pkt_get_tx+0x20>)
   1b810:	462a      	mov	r2, r5
   1b812:	4621      	mov	r1, r4
}
   1b814:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_pkt_get(slab ? slab : &tx_pkts, context, timeout);
   1b818:	f7ff bf4c 	b.w	1b6b4 <net_pkt_get>
		return context->tx_slab();
   1b81c:	4798      	blx	r3
	return net_pkt_get(slab ? slab : &tx_pkts, context, timeout);
   1b81e:	2800      	cmp	r0, #0
   1b820:	d1f6      	bne.n	1b810 <net_pkt_get_tx+0xc>
   1b822:	e7f4      	b.n	1b80e <net_pkt_get_tx+0xa>
   1b824:	2000a998 	.word	0x2000a998

0001b828 <net_pkt_get_data>:
{
   1b828:	6c03      	ldr	r3, [r0, #64]	; 0x40
   1b82a:	b570      	push	{r4, r5, r6, lr}
   1b82c:	4604      	mov	r4, r0
   1b82e:	460e      	mov	r6, r1
	if (context->data_pool) {
   1b830:	b9b3      	cbnz	r3, 1b860 <net_pkt_get_data+0x38>
	return _pkt_get_data(pool ? pool : &tx_bufs, context, timeout);
   1b832:	4d10      	ldr	r5, [pc, #64]	; (1b874 <net_pkt_get_data+0x4c>)
	return net_if_get_by_index(context->iface);
   1b834:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
   1b838:	f7ff fdf6 	bl	1b428 <net_if_get_by_index>
	if (!iface) {
   1b83c:	4603      	mov	r3, r0
   1b83e:	b1b8      	cbz	r0, 1b870 <net_pkt_get_data+0x48>
	if (context->flags & NET_CONTEXT_FAMILY) {
   1b840:	f894 105d 	ldrb.w	r1, [r4, #93]	; 0x5d
   1b844:	f011 0110 	ands.w	r1, r1, #16
   1b848:	d10f      	bne.n	1b86a <net_pkt_get_data+0x42>
   1b84a:	685a      	ldr	r2, [r3, #4]
   1b84c:	4618      	mov	r0, r3
   1b84e:	6892      	ldr	r2, [r2, #8]
   1b850:	4790      	blx	r2
	frag = net_pkt_get_reserve_data(pool,
   1b852:	4632      	mov	r2, r6
   1b854:	4601      	mov	r1, r0
   1b856:	4628      	mov	r0, r5
}
   1b858:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	frag = net_pkt_get_reserve_data(pool,
   1b85c:	f7ff bf7c 	b.w	1b758 <net_pkt_get_reserve_data>
		return context->data_pool();
   1b860:	4798      	blx	r3
	return _pkt_get_data(pool ? pool : &tx_bufs, context, timeout);
   1b862:	4605      	mov	r5, r0
   1b864:	2800      	cmp	r0, #0
   1b866:	d1e5      	bne.n	1b834 <net_pkt_get_data+0xc>
   1b868:	e7e3      	b.n	1b832 <net_pkt_get_data+0xa>
		addr6 = &((struct sockaddr_in6 *) &context->remote)->sin6_addr;
   1b86a:	f104 0118 	add.w	r1, r4, #24
   1b86e:	e7ec      	b.n	1b84a <net_pkt_get_data+0x22>
}
   1b870:	bd70      	pop	{r4, r5, r6, pc}
   1b872:	bf00      	nop
   1b874:	2000aafc 	.word	0x2000aafc

0001b878 <net_pkt_ref>:
	if (!pkt) {
   1b878:	b120      	cbz	r0, 1b884 <net_pkt_ref+0xc>
	pkt->ref++;
   1b87a:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
   1b87e:	3301      	adds	r3, #1
   1b880:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
}
   1b884:	4770      	bx	lr

0001b886 <net_pkt_frag_unref>:
	if (!frag) {
   1b886:	b108      	cbz	r0, 1b88c <net_pkt_frag_unref+0x6>
	net_buf_unref(frag);
   1b888:	f7fd bd32 	b.w	192f0 <net_buf_unref>
   1b88c:	4770      	bx	lr

0001b88e <net_pkt_unref>:
{
   1b88e:	b507      	push	{r0, r1, r2, lr}
   1b890:	9001      	str	r0, [sp, #4]
	if (!pkt) {
   1b892:	b180      	cbz	r0, 1b8b6 <net_pkt_unref+0x28>
	if (!pkt->ref) {
   1b894:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
   1b898:	b16b      	cbz	r3, 1b8b6 <net_pkt_unref+0x28>
	if (--pkt->ref > 0) {
   1b89a:	3b01      	subs	r3, #1
   1b89c:	b2db      	uxtb	r3, r3
   1b89e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
   1b8a2:	b943      	cbnz	r3, 1b8b6 <net_pkt_unref+0x28>
	if (pkt->frags) {
   1b8a4:	6880      	ldr	r0, [r0, #8]
   1b8a6:	b108      	cbz	r0, 1b8ac <net_pkt_unref+0x1e>
		net_pkt_frag_unref(pkt->frags);
   1b8a8:	f7ff ffed 	bl	1b886 <net_pkt_frag_unref>
	k_mem_slab_free(pkt->slab, (void **)&pkt);
   1b8ac:	9b01      	ldr	r3, [sp, #4]
   1b8ae:	a901      	add	r1, sp, #4
   1b8b0:	6858      	ldr	r0, [r3, #4]
   1b8b2:	f005 fe11 	bl	214d8 <k_mem_slab_free>
}
   1b8b6:	b003      	add	sp, #12
   1b8b8:	f85d fb04 	ldr.w	pc, [sp], #4

0001b8bc <net_pkt_frag_del>:
{
   1b8bc:	b510      	push	{r4, lr}
   1b8be:	4604      	mov	r4, r0
   1b8c0:	4608      	mov	r0, r1
	if (pkt->frags == frag && !parent) {
   1b8c2:	68a1      	ldr	r1, [r4, #8]
   1b8c4:	4291      	cmp	r1, r2
   1b8c6:	d104      	bne.n	1b8d2 <net_pkt_frag_del+0x16>
   1b8c8:	b918      	cbnz	r0, 1b8d2 <net_pkt_frag_del+0x16>
		tmp = net_buf_frag_del(NULL, frag);
   1b8ca:	f7fd fd63 	bl	19394 <net_buf_frag_del>
		pkt->frags = tmp;
   1b8ce:	60a0      	str	r0, [r4, #8]
   1b8d0:	bd10      	pop	{r4, pc}
	return net_buf_frag_del(parent, frag);
   1b8d2:	4611      	mov	r1, r2
}
   1b8d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return net_buf_frag_del(parent, frag);
   1b8d8:	f7fd bd5c 	b.w	19394 <net_buf_frag_del>

0001b8dc <net_pkt_frag_add>:
	if (!pkt->frags) {
   1b8dc:	6883      	ldr	r3, [r0, #8]
{
   1b8de:	b510      	push	{r4, lr}
   1b8e0:	460c      	mov	r4, r1
	if (!pkt->frags) {
   1b8e2:	b90b      	cbnz	r3, 1b8e8 <net_pkt_frag_add+0xc>
		pkt->frags = frag;
   1b8e4:	6081      	str	r1, [r0, #8]
		return;
   1b8e6:	bd10      	pop	{r4, pc}
	net_buf_frag_insert(net_buf_frag_last(pkt->frags), frag);
   1b8e8:	4618      	mov	r0, r3
   1b8ea:	f7fd fd33 	bl	19354 <net_buf_frag_last>
   1b8ee:	4621      	mov	r1, r4
}
   1b8f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	net_buf_frag_insert(net_buf_frag_last(pkt->frags), frag);
   1b8f4:	f7fd bd33 	b.w	1935e <net_buf_frag_insert>

0001b8f8 <check_and_create_data.part.20>:
static inline struct net_buf *check_and_create_data(struct net_pkt *pkt,
   1b8f8:	b538      	push	{r3, r4, r5, lr}
   1b8fa:	4605      	mov	r5, r0
	frag = net_pkt_get_frag(pkt, timeout);
   1b8fc:	f7ff ff62 	bl	1b7c4 <net_pkt_get_frag>
	if (!frag) {
   1b900:	4604      	mov	r4, r0
   1b902:	b118      	cbz	r0, 1b90c <check_and_create_data.part.20+0x14>
	net_pkt_frag_add(pkt, frag);
   1b904:	4601      	mov	r1, r0
   1b906:	4628      	mov	r0, r5
   1b908:	f7ff ffe8 	bl	1b8dc <net_pkt_frag_add>
}
   1b90c:	4620      	mov	r0, r4
   1b90e:	bd38      	pop	{r3, r4, r5, pc}

0001b910 <net_pkt_frag_insert>:
{
   1b910:	b538      	push	{r3, r4, r5, lr}
   1b912:	4604      	mov	r4, r0
	net_buf_frag_last(frag)->frags = pkt->frags;
   1b914:	4608      	mov	r0, r1
{
   1b916:	460d      	mov	r5, r1
	net_buf_frag_last(frag)->frags = pkt->frags;
   1b918:	f7fd fd1c 	bl	19354 <net_buf_frag_last>
   1b91c:	68a3      	ldr	r3, [r4, #8]
   1b91e:	6003      	str	r3, [r0, #0]
	pkt->frags = frag;
   1b920:	60a5      	str	r5, [r4, #8]
   1b922:	bd38      	pop	{r3, r4, r5, pc}

0001b924 <net_pkt_copy>:
{
   1b924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b928:	b085      	sub	sp, #20
   1b92a:	460f      	mov	r7, r1
   1b92c:	9302      	str	r3, [sp, #8]
	frag = net_pkt_get_frag(pkt, timeout);
   1b92e:	9902      	ldr	r1, [sp, #8]
{
   1b930:	9001      	str	r0, [sp, #4]
   1b932:	4690      	mov	r8, r2
	orig = pkt->frags;
   1b934:	6885      	ldr	r5, [r0, #8]
	frag = net_pkt_get_frag(pkt, timeout);
   1b936:	f7ff ff45 	bl	1b7c4 <net_pkt_get_frag>
	if (!frag) {
   1b93a:	4604      	mov	r4, r0
   1b93c:	b150      	cbz	r0, 1b954 <net_pkt_copy+0x30>
	if (reserve > net_buf_tailroom(frag)) {
   1b93e:	f100 0608 	add.w	r6, r0, #8
   1b942:	4630      	mov	r0, r6
   1b944:	f7fd fd9e 	bl	19484 <net_buf_simple_tailroom>
   1b948:	4540      	cmp	r0, r8
   1b94a:	d207      	bcs.n	1b95c <net_pkt_copy+0x38>
		net_pkt_frag_unref(frag);
   1b94c:	4620      	mov	r0, r4
   1b94e:	f7ff ff9a 	bl	1b886 <net_pkt_frag_unref>
		return NULL;
   1b952:	2400      	movs	r4, #0
}
   1b954:	4620      	mov	r0, r4
   1b956:	b005      	add	sp, #20
   1b958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	net_buf_add(frag, reserve);
   1b95c:	4630      	mov	r0, r6
   1b95e:	4641      	mov	r1, r8
   1b960:	f7fd fd24 	bl	193ac <net_buf_simple_add>
	if (!orig->len) {
   1b964:	89ae      	ldrh	r6, [r5, #12]
   1b966:	2e00      	cmp	r6, #0
   1b968:	d0f4      	beq.n	1b954 <net_pkt_copy+0x30>
	orig_data = orig->data;
   1b96a:	f8d5 9008 	ldr.w	r9, [r5, #8]
   1b96e:	46a2      	mov	sl, r4
	while (orig && amount) {
   1b970:	2f00      	cmp	r7, #0
   1b972:	d0ef      	beq.n	1b954 <net_pkt_copy+0x30>
		int left_len = net_buf_tailroom(frag);
   1b974:	f10a 0b08 	add.w	fp, sl, #8
   1b978:	4658      	mov	r0, fp
   1b97a:	f7fd fd83 	bl	19484 <net_buf_simple_tailroom>
			copy_len = orig_len;
   1b97e:	42be      	cmp	r6, r7
   1b980:	4632      	mov	r2, r6
   1b982:	bf28      	it	cs
   1b984:	463a      	movcs	r2, r7
		if ((copy_len - left_len) >= 0) {
   1b986:	1a11      	subs	r1, r2, r0
   1b988:	2900      	cmp	r1, #0
		int left_len = net_buf_tailroom(frag);
   1b98a:	4680      	mov	r8, r0
		if ((copy_len - left_len) >= 0) {
   1b98c:	db1c      	blt.n	1b9c8 <net_pkt_copy+0xa4>
			memcpy(net_buf_add(frag, left_len), orig_data,
   1b98e:	4601      	mov	r1, r0
			amount -= left_len;
   1b990:	1a3f      	subs	r7, r7, r0
			memcpy(net_buf_add(frag, left_len), orig_data,
   1b992:	4658      	mov	r0, fp
   1b994:	f7fd fd0a 	bl	193ac <net_buf_simple_add>
   1b998:	4642      	mov	r2, r8
   1b99a:	4649      	mov	r1, r9
   1b99c:	f7e4 fef9 	bl	792 <memcpy>
			if (!net_buf_tailroom(frag)) {
   1b9a0:	4658      	mov	r0, fp
   1b9a2:	f7fd fd6f 	bl	19484 <net_buf_simple_tailroom>
   1b9a6:	b958      	cbnz	r0, 1b9c0 <net_pkt_copy+0x9c>
				struct net_buf *new_frag =
   1b9a8:	9902      	ldr	r1, [sp, #8]
   1b9aa:	9801      	ldr	r0, [sp, #4]
   1b9ac:	f7ff ff0a 	bl	1b7c4 <net_pkt_get_frag>
				if (!new_frag) {
   1b9b0:	4683      	mov	fp, r0
   1b9b2:	2800      	cmp	r0, #0
   1b9b4:	d0ca      	beq.n	1b94c <net_pkt_copy+0x28>
				net_buf_frag_add(frag, new_frag);
   1b9b6:	4601      	mov	r1, r0
   1b9b8:	4650      	mov	r0, sl
   1b9ba:	f7fd fcdb 	bl	19374 <net_buf_frag_add>
   1b9be:	46da      	mov	sl, fp
			orig_len -= left_len;
   1b9c0:	eba6 0608 	sub.w	r6, r6, r8
			orig_data += left_len;
   1b9c4:	44c1      	add	r9, r8
   1b9c6:	e7d3      	b.n	1b970 <net_pkt_copy+0x4c>
			memcpy(net_buf_add(frag, copy_len), orig_data,
   1b9c8:	4611      	mov	r1, r2
   1b9ca:	4658      	mov	r0, fp
			amount -= copy_len;
   1b9cc:	1abf      	subs	r7, r7, r2
			memcpy(net_buf_add(frag, copy_len), orig_data,
   1b9ce:	9203      	str	r2, [sp, #12]
   1b9d0:	f7fd fcec 	bl	193ac <net_buf_simple_add>
   1b9d4:	9a03      	ldr	r2, [sp, #12]
   1b9d6:	4649      	mov	r1, r9
   1b9d8:	f7e4 fedb 	bl	792 <memcpy>
		orig = orig->frags;
   1b9dc:	682d      	ldr	r5, [r5, #0]
		if (orig) {
   1b9de:	2d00      	cmp	r5, #0
   1b9e0:	d0b8      	beq.n	1b954 <net_pkt_copy+0x30>
			orig_len = orig->len;
   1b9e2:	89ae      	ldrh	r6, [r5, #12]
			orig_data = orig->data;
   1b9e4:	f8d5 9008 	ldr.w	r9, [r5, #8]
   1b9e8:	e7c2      	b.n	1b970 <net_pkt_copy+0x4c>

0001b9ea <net_pkt_compact>:
{
   1b9ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	frag = pkt->frags;
   1b9ee:	6884      	ldr	r4, [r0, #8]
{
   1b9f0:	4607      	mov	r7, r0
	prev = NULL;
   1b9f2:	f04f 0800 	mov.w	r8, #0
	while (frag) {
   1b9f6:	2c00      	cmp	r4, #0
   1b9f8:	d035      	beq.n	1ba66 <net_pkt_compact+0x7c>
		if (frag->frags) {
   1b9fa:	6823      	ldr	r3, [r4, #0]
   1b9fc:	b363      	cbz	r3, 1ba58 <net_pkt_compact+0x6e>
			if (copy_len > net_buf_tailroom(frag)) {
   1b9fe:	f104 0608 	add.w	r6, r4, #8
   1ba02:	4630      	mov	r0, r6
			copy_len = frag->frags->len;
   1ba04:	899d      	ldrh	r5, [r3, #12]
			if (copy_len > net_buf_tailroom(frag)) {
   1ba06:	f7fd fd3d 	bl	19484 <net_buf_simple_tailroom>
   1ba0a:	4285      	cmp	r5, r0
   1ba0c:	d903      	bls.n	1ba16 <net_pkt_compact+0x2c>
				copy_len = net_buf_tailroom(frag);
   1ba0e:	4630      	mov	r0, r6
   1ba10:	f7fd fd38 	bl	19484 <net_buf_simple_tailroom>
   1ba14:	4605      	mov	r5, r0
	return buf->data + buf->len;
   1ba16:	68a3      	ldr	r3, [r4, #8]
			memcpy(net_buf_tail(frag), frag->frags->data, copy_len);
   1ba18:	6821      	ldr	r1, [r4, #0]
   1ba1a:	89a0      	ldrh	r0, [r4, #12]
   1ba1c:	6889      	ldr	r1, [r1, #8]
   1ba1e:	462a      	mov	r2, r5
   1ba20:	4418      	add	r0, r3
   1ba22:	f7e4 feb6 	bl	792 <memcpy>
			net_buf_add(frag, copy_len);
   1ba26:	4629      	mov	r1, r5
   1ba28:	4630      	mov	r0, r6
   1ba2a:	f7fd fcbf 	bl	193ac <net_buf_simple_add>
			memmove(frag->frags->data,
   1ba2e:	6823      	ldr	r3, [r4, #0]
   1ba30:	6898      	ldr	r0, [r3, #8]
				frag->frags->len - copy_len);
   1ba32:	899a      	ldrh	r2, [r3, #12]
			memmove(frag->frags->data,
   1ba34:	1941      	adds	r1, r0, r5
   1ba36:	1b52      	subs	r2, r2, r5
   1ba38:	f7e4 fe93 	bl	762 <memmove>
			frag->frags->len -= copy_len;
   1ba3c:	6822      	ldr	r2, [r4, #0]
   1ba3e:	8993      	ldrh	r3, [r2, #12]
   1ba40:	1b5d      	subs	r5, r3, r5
   1ba42:	8195      	strh	r5, [r2, #12]
			if (net_buf_tailroom(frag)) {
   1ba44:	4630      	mov	r0, r6
   1ba46:	f7fd fd1d 	bl	19484 <net_buf_simple_tailroom>
   1ba4a:	b178      	cbz	r0, 1ba6c <net_pkt_compact+0x82>
				net_pkt_frag_del(pkt, frag, frag->frags);
   1ba4c:	6822      	ldr	r2, [r4, #0]
   1ba4e:	4621      	mov	r1, r4
   1ba50:	4638      	mov	r0, r7
   1ba52:	f7ff ff33 	bl	1b8bc <net_pkt_frag_del>
				continue;
   1ba56:	e7ce      	b.n	1b9f6 <net_pkt_compact+0xc>
			if (!frag->len) {
   1ba58:	89a3      	ldrh	r3, [r4, #12]
   1ba5a:	b93b      	cbnz	r3, 1ba6c <net_pkt_compact+0x82>
				net_pkt_frag_del(pkt, prev, frag);
   1ba5c:	4622      	mov	r2, r4
   1ba5e:	4641      	mov	r1, r8
   1ba60:	4638      	mov	r0, r7
   1ba62:	f7ff ff2b 	bl	1b8bc <net_pkt_frag_del>
}
   1ba66:	2001      	movs	r0, #1
   1ba68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		frag = frag->frags;
   1ba6c:	46a0      	mov	r8, r4
   1ba6e:	6824      	ldr	r4, [r4, #0]
   1ba70:	e7c1      	b.n	1b9f6 <net_pkt_compact+0xc>
	...

0001ba74 <net_pkt_append>:
{
   1ba74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ba78:	460d      	mov	r5, r1
   1ba7a:	4691      	mov	r9, r2
   1ba7c:	469a      	mov	sl, r3
	if (!pkt || !data || !len) {
   1ba7e:	4604      	mov	r4, r0
   1ba80:	b918      	cbnz	r0, 1ba8a <net_pkt_append+0x16>
		return 0;
   1ba82:	2700      	movs	r7, #0
}
   1ba84:	4638      	mov	r0, r7
   1ba86:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!pkt || !data || !len) {
   1ba8a:	2a00      	cmp	r2, #0
   1ba8c:	d0f9      	beq.n	1ba82 <net_pkt_append+0xe>
   1ba8e:	2900      	cmp	r1, #0
   1ba90:	d0f7      	beq.n	1ba82 <net_pkt_append+0xe>
	if (!pkt->frags) {
   1ba92:	6883      	ldr	r3, [r0, #8]
   1ba94:	b943      	cbnz	r3, 1baa8 <net_pkt_append+0x34>
		frag = net_pkt_get_frag(pkt, timeout);
   1ba96:	4651      	mov	r1, sl
   1ba98:	f7ff fe94 	bl	1b7c4 <net_pkt_get_frag>
		if (!frag) {
   1ba9c:	4601      	mov	r1, r0
   1ba9e:	2800      	cmp	r0, #0
   1baa0:	d0ef      	beq.n	1ba82 <net_pkt_append+0xe>
		net_pkt_frag_add(pkt, frag);
   1baa2:	4620      	mov	r0, r4
   1baa4:	f7ff ff1a 	bl	1b8dc <net_pkt_frag_add>
	if (pkt->slab != &rx_pkts) {
   1baa8:	6862      	ldr	r2, [r4, #4]
   1baaa:	4b25      	ldr	r3, [pc, #148]	; (1bb40 <net_pkt_append+0xcc>)
   1baac:	429a      	cmp	r2, r3
   1baae:	d03a      	beq.n	1bb26 <net_pkt_append+0xb2>
   1bab0:	f8d4 800c 	ldr.w	r8, [r4, #12]
	if (ctx) {
   1bab4:	f1b8 0f00 	cmp.w	r8, #0
   1bab8:	d00b      	beq.n	1bad2 <net_pkt_append+0x5e>
		if (ctx->tcp && (ctx->tcp->send_mss < max_len)) {
   1baba:	f8d8 2060 	ldr.w	r2, [r8, #96]	; 0x60
		max_len = pkt->data_len;
   1babe:	8e23      	ldrh	r3, [r4, #48]	; 0x30
		if (ctx->tcp && (ctx->tcp->send_mss < max_len)) {
   1bac0:	b122      	cbz	r2, 1bacc <net_pkt_append+0x58>
   1bac2:	f8b2 20de 	ldrh.w	r2, [r2, #222]	; 0xde
   1bac6:	4293      	cmp	r3, r2
   1bac8:	bf28      	it	cs
   1baca:	4613      	movcs	r3, r2
   1bacc:	429d      	cmp	r5, r3
   1bace:	bf28      	it	cs
   1bad0:	461d      	movcs	r5, r3
	struct net_buf *frag = net_buf_frag_last(pkt->frags);
   1bad2:	68a0      	ldr	r0, [r4, #8]
   1bad4:	f7fd fc3e 	bl	19354 <net_buf_frag_last>
	u16_t added_len = 0;
   1bad8:	2700      	movs	r7, #0
	struct net_buf *frag = net_buf_frag_last(pkt->frags);
   1bada:	4606      	mov	r6, r0
		u16_t count = min(len, net_buf_tailroom(frag));
   1badc:	3608      	adds	r6, #8
   1bade:	4630      	mov	r0, r6
   1bae0:	f7fd fcd0 	bl	19484 <net_buf_simple_tailroom>
   1bae4:	4285      	cmp	r5, r0
   1bae6:	d321      	bcc.n	1bb2c <net_pkt_append+0xb8>
   1bae8:	4630      	mov	r0, r6
   1baea:	f7fd fccb 	bl	19484 <net_buf_simple_tailroom>
   1baee:	fa1f fb80 	uxth.w	fp, r0
		void *data = net_buf_add(frag, count);
   1baf2:	4659      	mov	r1, fp
   1baf4:	4630      	mov	r0, r6
		len -= count;
   1baf6:	eba5 050b 	sub.w	r5, r5, fp
		void *data = net_buf_add(frag, count);
   1bafa:	f7fd fc57 	bl	193ac <net_buf_simple_add>
		added_len += count;
   1bafe:	445f      	add	r7, fp
		memcpy(data, value, count);
   1bb00:	4649      	mov	r1, r9
   1bb02:	465a      	mov	r2, fp
		len -= count;
   1bb04:	b2ad      	uxth	r5, r5
		memcpy(data, value, count);
   1bb06:	f7e4 fe44 	bl	792 <memcpy>
		added_len += count;
   1bb0a:	b2bf      	uxth	r7, r7
		value += count;
   1bb0c:	44d9      	add	r9, fp
		if (len == 0) {
   1bb0e:	b17d      	cbz	r5, 1bb30 <net_pkt_append+0xbc>
		frag = net_pkt_get_frag(pkt, timeout);
   1bb10:	4651      	mov	r1, sl
   1bb12:	4620      	mov	r0, r4
   1bb14:	f7ff fe56 	bl	1b7c4 <net_pkt_get_frag>
		if (!frag) {
   1bb18:	4606      	mov	r6, r0
   1bb1a:	b148      	cbz	r0, 1bb30 <net_pkt_append+0xbc>
		net_pkt_frag_add(pkt, frag);
   1bb1c:	4601      	mov	r1, r0
   1bb1e:	4620      	mov	r0, r4
   1bb20:	f7ff fedc 	bl	1b8dc <net_pkt_frag_add>
   1bb24:	e7da      	b.n	1badc <net_pkt_append+0x68>
	struct net_context *ctx = NULL;
   1bb26:	f04f 0800 	mov.w	r8, #0
   1bb2a:	e7d2      	b.n	1bad2 <net_pkt_append+0x5e>
		u16_t count = min(len, net_buf_tailroom(frag));
   1bb2c:	46ab      	mov	fp, r5
   1bb2e:	e7e0      	b.n	1baf2 <net_pkt_append+0x7e>
	if (ctx) {
   1bb30:	f1b8 0f00 	cmp.w	r8, #0
   1bb34:	d0a6      	beq.n	1ba84 <net_pkt_append+0x10>
		pkt->data_len -= appended;
   1bb36:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   1bb38:	1bdb      	subs	r3, r3, r7
   1bb3a:	8623      	strh	r3, [r4, #48]	; 0x30
   1bb3c:	e7a2      	b.n	1ba84 <net_pkt_append+0x10>
   1bb3e:	bf00      	nop
   1bb40:	2000a97c 	.word	0x2000a97c

0001bb44 <net_frag_read>:
{
   1bb44:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bb46:	9d05      	ldr	r5, [sp, #20]
	if (!frag) {
   1bb48:	b318      	cbz	r0, 1bb92 <net_frag_read+0x4e>
		if (offset < frag->len) {
   1bb4a:	8984      	ldrh	r4, [r0, #12]
   1bb4c:	428c      	cmp	r4, r1
   1bb4e:	d907      	bls.n	1bb60 <net_frag_read+0x1c>
			*pos = offset;
   1bb50:	8011      	strh	r1, [r2, #0]
   1bb52:	2100      	movs	r1, #0
		*pos = 0;
   1bb54:	468e      	mov	lr, r1
	while (len-- > 0 && frag) {
   1bb56:	1e5c      	subs	r4, r3, #1
   1bb58:	b2a4      	uxth	r4, r4
   1bb5a:	b1f3      	cbz	r3, 1bb9a <net_frag_read+0x56>
   1bb5c:	b920      	cbnz	r0, 1bb68 <net_frag_read+0x24>
   1bb5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		offset -= frag->len;
   1bb60:	1b09      	subs	r1, r1, r4
   1bb62:	b289      	uxth	r1, r1
		frag = frag->frags;
   1bb64:	6800      	ldr	r0, [r0, #0]
   1bb66:	e7ef      	b.n	1bb48 <net_frag_read+0x4>
			frag = net_frag_read_byte(frag, *pos,
   1bb68:	8813      	ldrh	r3, [r2, #0]
		if (data) {
   1bb6a:	b1bd      	cbz	r5, 1bb9c <net_frag_read+0x58>
	if (data) {
   1bb6c:	42cd      	cmn	r5, r1
		*data = frag->data[offset];
   1bb6e:	bf1e      	ittt	ne
   1bb70:	6887      	ldrne	r7, [r0, #8]
   1bb72:	5cff      	ldrbne	r7, [r7, r3]
   1bb74:	546f      	strbne	r7, [r5, r1]
	*pos = offset + 1;
   1bb76:	3301      	adds	r3, #1
   1bb78:	b29b      	uxth	r3, r3
   1bb7a:	8013      	strh	r3, [r2, #0]
						  pos, data + copy++);
   1bb7c:	1c4e      	adds	r6, r1, #1
	if (*pos >= frag->len) {
   1bb7e:	8981      	ldrh	r1, [r0, #12]
   1bb80:	4299      	cmp	r1, r3
						  pos, data + copy++);
   1bb82:	b2b6      	uxth	r6, r6
	if (*pos >= frag->len) {
   1bb84:	d813      	bhi.n	1bbae <net_frag_read+0x6a>
		*pos = 0;
   1bb86:	f8a2 e000 	strh.w	lr, [r2]
		return frag->frags;
   1bb8a:	6800      	ldr	r0, [r0, #0]
						  pos, data + copy++);
   1bb8c:	4631      	mov	r1, r6
		if (!frag && len) {
   1bb8e:	b978      	cbnz	r0, 1bbb0 <net_frag_read+0x6c>
   1bb90:	b174      	cbz	r4, 1bbb0 <net_frag_read+0x6c>
	*pos = 0xffff;
   1bb92:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1bb96:	8013      	strh	r3, [r2, #0]
	return NULL;
   1bb98:	2000      	movs	r0, #0
}
   1bb9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*pos = offset + 1;
   1bb9c:	3301      	adds	r3, #1
   1bb9e:	b29b      	uxth	r3, r3
   1bba0:	8013      	strh	r3, [r2, #0]
	if (*pos >= frag->len) {
   1bba2:	8986      	ldrh	r6, [r0, #12]
   1bba4:	429e      	cmp	r6, r3
   1bba6:	d803      	bhi.n	1bbb0 <net_frag_read+0x6c>
		*pos = 0;
   1bba8:	8015      	strh	r5, [r2, #0]
		return frag->frags;
   1bbaa:	6800      	ldr	r0, [r0, #0]
   1bbac:	e7ef      	b.n	1bb8e <net_frag_read+0x4a>
						  pos, data + copy++);
   1bbae:	4631      	mov	r1, r6
   1bbb0:	4623      	mov	r3, r4
   1bbb2:	e7d0      	b.n	1bb56 <net_frag_read+0x12>

0001bbb4 <net_frag_read_be16>:
{
   1bbb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1bbb6:	461c      	mov	r4, r3
	ret_frag = net_frag_read(frag, offset, pos, sizeof(u16_t), v16);
   1bbb8:	ab03      	add	r3, sp, #12
   1bbba:	9300      	str	r3, [sp, #0]
   1bbbc:	2302      	movs	r3, #2
   1bbbe:	f7ff ffc1 	bl	1bb44 <net_frag_read>
	*value = v16[0] << 8 | v16[1];
   1bbc2:	f89d 200c 	ldrb.w	r2, [sp, #12]
   1bbc6:	f89d 300d 	ldrb.w	r3, [sp, #13]
   1bbca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1bbce:	8023      	strh	r3, [r4, #0]
}
   1bbd0:	b004      	add	sp, #16
   1bbd2:	bd10      	pop	{r4, pc}

0001bbd4 <net_frag_read_be32>:
{
   1bbd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1bbd6:	461c      	mov	r4, r3
	ret_frag = net_frag_read(frag, offset, pos, sizeof(u32_t), v32);
   1bbd8:	ab03      	add	r3, sp, #12
   1bbda:	9300      	str	r3, [sp, #0]
   1bbdc:	2304      	movs	r3, #4
   1bbde:	f7ff ffb1 	bl	1bb44 <net_frag_read>
   1bbe2:	9b03      	ldr	r3, [sp, #12]
   1bbe4:	ba1b      	rev	r3, r3
	*value = v32[0] << 24 | v32[1] << 16 | v32[2] << 8 | v32[3];
   1bbe6:	6023      	str	r3, [r4, #0]
}
   1bbe8:	b004      	add	sp, #16
   1bbea:	bd10      	pop	{r4, pc}

0001bbec <net_pkt_write>:
{
   1bbec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bbf0:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   1bbf4:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
   1bbf8:	4615      	mov	r5, r2
   1bbfa:	469a      	mov	sl, r3
	if (!pkt) {
   1bbfc:	4607      	mov	r7, r0
   1bbfe:	2800      	cmp	r0, #0
   1bc00:	d077      	beq.n	1bcf2 <net_pkt_write+0x106>
   1bc02:	460c      	mov	r4, r1
	if (data) {
   1bc04:	b934      	cbnz	r4, 1bc14 <net_pkt_write+0x28>
   1bc06:	990c      	ldr	r1, [sp, #48]	; 0x30
   1bc08:	4638      	mov	r0, r7
   1bc0a:	f7ff fe75 	bl	1b8f8 <check_and_create_data.part.20>
		if (!frag) {
   1bc0e:	4604      	mov	r4, r0
   1bc10:	2800      	cmp	r0, #0
   1bc12:	d06e      	beq.n	1bcf2 <net_pkt_write+0x106>
		if (offset < frag->len) {
   1bc14:	89a3      	ldrh	r3, [r4, #12]
   1bc16:	42ab      	cmp	r3, r5
   1bc18:	d820      	bhi.n	1bc5c <net_pkt_write+0x70>
		if (offset == frag->len) {
   1bc1a:	d10f      	bne.n	1bc3c <net_pkt_write+0x50>
			if (net_buf_tailroom(frag)) {
   1bc1c:	f104 0008 	add.w	r0, r4, #8
   1bc20:	f7fd fc30 	bl	19484 <net_buf_simple_tailroom>
   1bc24:	b9d0      	cbnz	r0, 1bc5c <net_pkt_write+0x70>
				return check_and_create_data(pkt,
   1bc26:	6824      	ldr	r4, [r4, #0]
	if (data) {
   1bc28:	b934      	cbnz	r4, 1bc38 <net_pkt_write+0x4c>
   1bc2a:	990c      	ldr	r1, [sp, #48]	; 0x30
   1bc2c:	4638      	mov	r0, r7
   1bc2e:	f7ff fe63 	bl	1b8f8 <check_and_create_data.part.20>
   1bc32:	4604      	mov	r4, r0
	if (!frag) {
   1bc34:	2800      	cmp	r0, #0
   1bc36:	d05c      	beq.n	1bcf2 <net_pkt_write+0x106>
   1bc38:	2500      	movs	r5, #0
   1bc3a:	e00f      	b.n	1bc5c <net_pkt_write+0x70>
		if (offset > frag->len) {
   1bc3c:	d2e2      	bcs.n	1bc04 <net_pkt_write+0x18>
			tailroom = net_buf_tailroom(frag);
   1bc3e:	f104 0b08 	add.w	fp, r4, #8
   1bc42:	4658      	mov	r0, fp
			offset -= frag->len;
   1bc44:	1aed      	subs	r5, r5, r3
			tailroom = net_buf_tailroom(frag);
   1bc46:	f7fd fc1d 	bl	19484 <net_buf_simple_tailroom>
			offset -= frag->len;
   1bc4a:	b2ad      	uxth	r5, r5
			tailroom = net_buf_tailroom(frag);
   1bc4c:	b286      	uxth	r6, r0
			if (offset < tailroom) {
   1bc4e:	42b5      	cmp	r5, r6
   1bc50:	d22a      	bcs.n	1bca8 <net_pkt_write+0xbc>
				net_buf_add(frag, offset);
   1bc52:	4629      	mov	r1, r5
   1bc54:	4658      	mov	r0, fp
   1bc56:	f7fd fba9 	bl	193ac <net_buf_simple_add>
				*pos = frag->len;
   1bc5a:	89a5      	ldrh	r5, [r4, #12]
		u16_t space = frag->size - net_buf_headroom(frag) - offset;
   1bc5c:	89e6      	ldrh	r6, [r4, #14]
   1bc5e:	f104 0b08 	add.w	fp, r4, #8
   1bc62:	4658      	mov	r0, fp
   1bc64:	f7fd fc0a 	bl	1947c <net_buf_simple_headroom>
   1bc68:	1a36      	subs	r6, r6, r0
   1bc6a:	1b76      	subs	r6, r6, r5
		u16_t count = min(len, space);
   1bc6c:	b2b6      	uxth	r6, r6
   1bc6e:	4546      	cmp	r6, r8
		memcpy(frag->data + offset, data, count);
   1bc70:	68a0      	ldr	r0, [r4, #8]
		u16_t count = min(len, space);
   1bc72:	bf28      	it	cs
   1bc74:	4646      	movcs	r6, r8
		memcpy(frag->data + offset, data, count);
   1bc76:	4649      	mov	r1, r9
   1bc78:	4428      	add	r0, r5
   1bc7a:	4632      	mov	r2, r6
   1bc7c:	f7e4 fd89 	bl	792 <memcpy>
		size_to_add = offset + count - frag->len;
   1bc80:	89a1      	ldrh	r1, [r4, #12]
   1bc82:	4435      	add	r5, r6
   1bc84:	1a69      	subs	r1, r5, r1
		if (size_to_add > 0) {
   1bc86:	2900      	cmp	r1, #0
   1bc88:	dd02      	ble.n	1bc90 <net_pkt_write+0xa4>
			net_buf_add(frag, size_to_add);
   1bc8a:	4658      	mov	r0, fp
   1bc8c:	f7fd fb8e 	bl	193ac <net_buf_simple_add>
		len -= count;
   1bc90:	eba8 0806 	sub.w	r8, r8, r6
   1bc94:	fa1f f888 	uxth.w	r8, r8
		if (len == 0) {
   1bc98:	f1b8 0f00 	cmp.w	r8, #0
   1bc9c:	d11a      	bne.n	1bcd4 <net_pkt_write+0xe8>
			*pos = offset + count;
   1bc9e:	f8aa 5000 	strh.w	r5, [sl]
}
   1bca2:	4620      	mov	r0, r4
   1bca4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (offset == tailroom) {
   1bca8:	d104      	bne.n	1bcb4 <net_pkt_write+0xc8>
				net_buf_add(frag, tailroom);
   1bcaa:	b281      	uxth	r1, r0
   1bcac:	4658      	mov	r0, fp
   1bcae:	f7fd fb7d 	bl	193ac <net_buf_simple_add>
   1bcb2:	e7b8      	b.n	1bc26 <net_pkt_write+0x3a>
			if (offset > tailroom) {
   1bcb4:	d9a6      	bls.n	1bc04 <net_pkt_write+0x18>
				net_buf_add(frag, tailroom);
   1bcb6:	b281      	uxth	r1, r0
   1bcb8:	4658      	mov	r0, fp
   1bcba:	f7fd fb77 	bl	193ac <net_buf_simple_add>
				frag = check_and_create_data(pkt,
   1bcbe:	6824      	ldr	r4, [r4, #0]
				offset -= tailroom;
   1bcc0:	1bad      	subs	r5, r5, r6
   1bcc2:	b2ad      	uxth	r5, r5
	if (data) {
   1bcc4:	2c00      	cmp	r4, #0
   1bcc6:	d19d      	bne.n	1bc04 <net_pkt_write+0x18>
   1bcc8:	990c      	ldr	r1, [sp, #48]	; 0x30
   1bcca:	4638      	mov	r0, r7
   1bccc:	f7ff fe14 	bl	1b8f8 <check_and_create_data.part.20>
   1bcd0:	4604      	mov	r4, r0
   1bcd2:	e797      	b.n	1bc04 <net_pkt_write+0x18>
		frag = frag->frags;
   1bcd4:	6824      	ldr	r4, [r4, #0]
		data += count;
   1bcd6:	44b1      	add	r9, r6
		if (!frag) {
   1bcd8:	2c00      	cmp	r4, #0
   1bcda:	d1ad      	bne.n	1bc38 <net_pkt_write+0x4c>
			frag = net_pkt_get_frag(pkt, timeout);
   1bcdc:	990c      	ldr	r1, [sp, #48]	; 0x30
   1bcde:	4638      	mov	r0, r7
   1bce0:	f7ff fd70 	bl	1b7c4 <net_pkt_get_frag>
			if (!frag) {
   1bce4:	4604      	mov	r4, r0
   1bce6:	b120      	cbz	r0, 1bcf2 <net_pkt_write+0x106>
			net_pkt_frag_add(pkt, frag);
   1bce8:	4601      	mov	r1, r0
   1bcea:	4638      	mov	r0, r7
   1bcec:	f7ff fdf6 	bl	1b8dc <net_pkt_frag_add>
   1bcf0:	e7a2      	b.n	1bc38 <net_pkt_write+0x4c>
	*pos = 0xffff;
   1bcf2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1bcf6:	f8aa 3000 	strh.w	r3, [sl]
	return NULL;
   1bcfa:	2400      	movs	r4, #0
   1bcfc:	e7d1      	b.n	1bca2 <net_pkt_write+0xb6>

0001bcfe <net_pkt_get_src_addr>:

int net_pkt_get_src_addr(struct net_pkt *pkt, struct sockaddr *addr,
			 socklen_t addrlen)
{
	return net_pkt_get_addr(pkt, true, addr, addrlen);
   1bcfe:	4613      	mov	r3, r2
   1bd00:	460a      	mov	r2, r1
   1bd02:	2101      	movs	r1, #1
   1bd04:	f7ff bc4e 	b.w	1b5a4 <net_pkt_get_addr>

0001bd08 <net_pkt_get_dst_addr>:
}

int net_pkt_get_dst_addr(struct net_pkt *pkt, struct sockaddr *addr,
			 socklen_t addrlen)
{
	return net_pkt_get_addr(pkt, false, addr, addrlen);
   1bd08:	4613      	mov	r3, r2
   1bd0a:	460a      	mov	r2, r1
   1bd0c:	2100      	movs	r1, #0
   1bd0e:	f7ff bc49 	b.w	1b5a4 <net_pkt_get_addr>

0001bd12 <net_frag_get_pos>:
#endif /* CONFIG_NET_DEBUG_NET_PKT */

struct net_buf *net_frag_get_pos(struct net_pkt *pkt,
				 u16_t offset,
				 u16_t *pos)
{
   1bd12:	b507      	push	{r0, r1, r2, lr}
 */
static inline struct net_buf *net_frag_skip(struct net_buf *frag,
					    u16_t offset,
					    u16_t *pos, u16_t len)
{
	return net_frag_read(frag, offset, pos, len, NULL);
   1bd14:	2300      	movs	r3, #0
   1bd16:	9300      	str	r3, [sp, #0]
   1bd18:	6880      	ldr	r0, [r0, #8]
   1bd1a:	f7ff ff13 	bl	1bb44 <net_frag_read>
	if (!frag) {
		return NULL;
	}

	return frag;
}
   1bd1e:	b003      	add	sp, #12
   1bd20:	f85d fb04 	ldr.w	pc, [sp], #4

0001bd24 <net_pkt_icmp_data>:
#else
#define too_short_msg(...)
#endif

struct net_icmp_hdr *net_pkt_icmp_data(struct net_pkt *pkt)
{
   1bd24:	b507      	push	{r0, r1, r2, lr}
	struct net_buf *frag;
	u16_t offset;

	frag = net_frag_get_pos(pkt,
				net_pkt_ip_hdr_len(pkt) +
   1bd26:	f890 1035 	ldrb.w	r1, [r0, #53]	; 0x35
				net_pkt_ipv6_ext_len(pkt),
   1bd2a:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
	frag = net_frag_get_pos(pkt,
   1bd2e:	f10d 0206 	add.w	r2, sp, #6
   1bd32:	4419      	add	r1, r3
   1bd34:	f7ff ffed 	bl	1bd12 <net_frag_get_pos>
				&offset);
	if (!frag) {
   1bd38:	b118      	cbz	r0, 1bd42 <net_pkt_icmp_data+0x1e>
		/* We tried to read past the end of the data */
		too_short_msg("icmp data", pkt, offset, 0);
		return NULL;
	}

	return (struct net_icmp_hdr *)(frag->data + offset);
   1bd3a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1bd3e:	6880      	ldr	r0, [r0, #8]
   1bd40:	4418      	add	r0, r3
}
   1bd42:	b003      	add	sp, #12
   1bd44:	f85d fb04 	ldr.w	pc, [sp], #4

0001bd48 <net_pkt_icmp_opt_data>:

u8_t *net_pkt_icmp_opt_data(struct net_pkt *pkt, size_t opt_len)
{
   1bd48:	b507      	push	{r0, r1, r2, lr}
	struct net_buf *frag;
	u16_t offset;

	frag = net_frag_get_pos(pkt,
				net_pkt_ip_hdr_len(pkt) +
				net_pkt_ipv6_ext_len(pkt) + opt_len,
   1bd4a:	f890 203f 	ldrb.w	r2, [r0, #63]	; 0x3f
				net_pkt_ip_hdr_len(pkt) +
   1bd4e:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
   1bd52:	4413      	add	r3, r2
	frag = net_frag_get_pos(pkt,
   1bd54:	4419      	add	r1, r3
   1bd56:	f10d 0206 	add.w	r2, sp, #6
   1bd5a:	b289      	uxth	r1, r1
   1bd5c:	f7ff ffd9 	bl	1bd12 <net_frag_get_pos>
				&offset);
	if (!frag) {
   1bd60:	b118      	cbz	r0, 1bd6a <net_pkt_icmp_opt_data+0x22>
		/* We tried to read past the end of the data */
		too_short_msg("icmp opt data", pkt, offset, opt_len);
		return NULL;
	}

	return frag->data + offset;
   1bd62:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1bd66:	6880      	ldr	r0, [r0, #8]
   1bd68:	4418      	add	r0, r3
}
   1bd6a:	b003      	add	sp, #12
   1bd6c:	f85d fb04 	ldr.w	pc, [sp], #4

0001bd70 <net_pkt_udp_data>:

struct net_udp_hdr *net_pkt_udp_data(struct net_pkt *pkt)
{
   1bd70:	b507      	push	{r0, r1, r2, lr}
	struct net_buf *frag;
	u16_t offset;

	frag = net_frag_get_pos(pkt,
				net_pkt_ip_hdr_len(pkt) +
   1bd72:	f890 1035 	ldrb.w	r1, [r0, #53]	; 0x35
				net_pkt_ipv6_ext_len(pkt),
   1bd76:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
	frag = net_frag_get_pos(pkt,
   1bd7a:	f10d 0206 	add.w	r2, sp, #6
   1bd7e:	4419      	add	r1, r3
   1bd80:	f7ff ffc7 	bl	1bd12 <net_frag_get_pos>
				&offset);
	if (!frag) {
   1bd84:	b118      	cbz	r0, 1bd8e <net_pkt_udp_data+0x1e>
		/* We tried to read past the end of the data */
		too_short_msg("udp data", pkt, offset, 0);
		return NULL;
	}

	return (struct net_udp_hdr *)(frag->data + offset);
   1bd86:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1bd8a:	6880      	ldr	r0, [r0, #8]
   1bd8c:	4418      	add	r0, r3
}
   1bd8e:	b003      	add	sp, #12
   1bd90:	f85d fb04 	ldr.w	pc, [sp], #4

0001bd94 <net_pkt_tcp_data>:

struct net_tcp_hdr *net_pkt_tcp_data(struct net_pkt *pkt)
{
   1bd94:	b507      	push	{r0, r1, r2, lr}
	struct net_buf *frag;
	u16_t offset;

	frag = net_frag_get_pos(pkt,
				net_pkt_ip_hdr_len(pkt) +
   1bd96:	f890 1035 	ldrb.w	r1, [r0, #53]	; 0x35
				net_pkt_ipv6_ext_len(pkt),
   1bd9a:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
	frag = net_frag_get_pos(pkt,
   1bd9e:	f10d 0206 	add.w	r2, sp, #6
   1bda2:	4419      	add	r1, r3
   1bda4:	f7ff ffb5 	bl	1bd12 <net_frag_get_pos>
				&offset);
	if (!frag) {
   1bda8:	b118      	cbz	r0, 1bdb2 <net_pkt_tcp_data+0x1e>
		/* We tried to read past the end of the data */
		too_short_msg("tcp data", pkt, offset, 0);
		return NULL;
	}

	return (struct net_tcp_hdr *)(frag->data + offset);
   1bdaa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1bdae:	6880      	ldr	r0, [r0, #8]
   1bdb0:	4418      	add	r0, r3
}
   1bdb2:	b003      	add	sp, #12
   1bdb4:	f85d fb04 	ldr.w	pc, [sp], #4

0001bdb8 <net_pkt_clone>:

struct net_pkt *net_pkt_clone(struct net_pkt *pkt, s32_t timeout)
{
   1bdb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1bdba:	460f      	mov	r7, r1
	struct net_pkt *clone;
	struct net_buf *frag;
	u16_t pos;

	if (!pkt) {
   1bdbc:	4605      	mov	r5, r0
   1bdbe:	b918      	cbnz	r0, 1bdc8 <net_pkt_clone+0x10>
		return NULL;
   1bdc0:	2400      	movs	r4, #0
#endif

	NET_DBG("Cloned %p to %p", pkt, clone);

	return clone;
}
   1bdc2:	4620      	mov	r0, r4
   1bdc4:	b003      	add	sp, #12
   1bdc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	clone = net_pkt_get_reserve(pkt->slab, 0, timeout);
   1bdc8:	460a      	mov	r2, r1
   1bdca:	6840      	ldr	r0, [r0, #4]
   1bdcc:	2100      	movs	r1, #0
   1bdce:	f7ff fc52 	bl	1b676 <net_pkt_get_reserve>
	if (!clone) {
   1bdd2:	4604      	mov	r4, r0
   1bdd4:	2800      	cmp	r0, #0
   1bdd6:	d0f3      	beq.n	1bdc0 <net_pkt_clone+0x8>
	clone->frags = NULL;
   1bdd8:	2100      	movs	r1, #0
   1bdda:	6081      	str	r1, [r0, #8]
	if (pkt->frags) {
   1bddc:	68ae      	ldr	r6, [r5, #8]
   1bdde:	b17e      	cbz	r6, 1be00 <net_pkt_clone+0x48>
		bytes += buf->len;
   1bde0:	89b3      	ldrh	r3, [r6, #12]
		buf = buf->frags;
   1bde2:	6836      	ldr	r6, [r6, #0]
		bytes += buf->len;
   1bde4:	4419      	add	r1, r3
	while (buf) {
   1bde6:	2e00      	cmp	r6, #0
   1bde8:	d1fa      	bne.n	1bde0 <net_pkt_clone+0x28>
	return net_pkt_copy(pkt, net_buf_frags_len(pkt->frags),
   1bdea:	463b      	mov	r3, r7
   1bdec:	4632      	mov	r2, r6
   1bdee:	4628      	mov	r0, r5
   1bdf0:	f7ff fd98 	bl	1b924 <net_pkt_copy>
		clone->frags = net_pkt_copy_all(pkt, 0, timeout);
   1bdf4:	60a0      	str	r0, [r4, #8]
		if (!clone->frags) {
   1bdf6:	b918      	cbnz	r0, 1be00 <net_pkt_clone+0x48>
			net_pkt_unref(clone);
   1bdf8:	4620      	mov	r0, r4
   1bdfa:	f7ff fd48 	bl	1b88e <net_pkt_unref>
   1bdfe:	e7df      	b.n	1bdc0 <net_pkt_clone+0x8>
	clone->context = pkt->context;
   1be00:	68eb      	ldr	r3, [r5, #12]
   1be02:	60e3      	str	r3, [r4, #12]
	clone->token = pkt->token;
   1be04:	692b      	ldr	r3, [r5, #16]
   1be06:	6123      	str	r3, [r4, #16]
	clone->iface = pkt->iface;
   1be08:	696b      	ldr	r3, [r5, #20]
   1be0a:	6163      	str	r3, [r4, #20]
	if (clone->frags) {
   1be0c:	68a3      	ldr	r3, [r4, #8]
   1be0e:	b1db      	cbz	r3, 1be48 <net_pkt_clone+0x90>
		frag = net_frag_get_pos(clone, net_pkt_ip_hdr_len(pkt), &pos);
   1be10:	f10d 0206 	add.w	r2, sp, #6
   1be14:	f895 1035 	ldrb.w	r1, [r5, #53]	; 0x35
   1be18:	4620      	mov	r0, r4
   1be1a:	f7ff ff7a 	bl	1bd12 <net_frag_get_pos>
		net_pkt_set_appdata(clone, frag->data + pos);
   1be1e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1be22:	6883      	ldr	r3, [r0, #8]
   1be24:	4413      	add	r3, r2
	pkt->appdata = data;
   1be26:	61a3      	str	r3, [r4, #24]
   1be28:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
	pkt->appdatalen = len;
   1be2a:	8663      	strh	r3, [r4, #50]	; 0x32
		memcpy(&clone->lladdr_src, &pkt->lladdr_src,
   1be2c:	2208      	movs	r2, #8
   1be2e:	f105 0120 	add.w	r1, r5, #32
   1be32:	f104 0020 	add.w	r0, r4, #32
   1be36:	f7e4 fcac 	bl	792 <memcpy>
		memcpy(&clone->lladdr_dst, &pkt->lladdr_dst,
   1be3a:	2208      	movs	r2, #8
   1be3c:	f105 0128 	add.w	r1, r5, #40	; 0x28
   1be40:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1be44:	f7e4 fca5 	bl	792 <memcpy>
	pkt->next_hdr = hdr;
   1be48:	2300      	movs	r3, #0
   1be4a:	61e3      	str	r3, [r4, #28]
   1be4c:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
	pkt->ip_hdr_len = len;
   1be50:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	return pkt->family;
   1be54:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
	pkt->family = family;
   1be58:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
	return pkt->family;
   1be5c:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	pkt->family = family;
   1be60:	f363 02c6 	bfi	r2, r3, #3, #4
   1be64:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
	clone->ipv6_hop_limit = pkt->ipv6_hop_limit;
   1be68:	f895 303e 	ldrb.w	r3, [r5, #62]	; 0x3e
   1be6c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
	clone->ipv6_ext_len = pkt->ipv6_ext_len;
   1be70:	f895 303f 	ldrb.w	r3, [r5, #63]	; 0x3f
   1be74:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
	clone->ipv6_ext_opt_len = pkt->ipv6_ext_opt_len;
   1be78:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
   1be7c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
	clone->ipv6_prev_hdr_start = pkt->ipv6_prev_hdr_start;
   1be80:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
   1be84:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
	return clone;
   1be88:	e79b      	b.n	1bdc2 <net_pkt_clone+0xa>

0001be8a <net_pkt_init>:

void net_pkt_init(void)
{
   1be8a:	4770      	bx	lr

0001be8c <calc_chksum>:

	return 0;
}

static u16_t calc_chksum(u16_t sum, const u8_t *ptr, u16_t len)
{
   1be8c:	b510      	push	{r4, lr}
	u16_t tmp;
	const u8_t *end;

	end = ptr + len - 1;
   1be8e:	3a01      	subs	r2, #1
   1be90:	440a      	add	r2, r1

	while (ptr < end) {
   1be92:	4291      	cmp	r1, r2
   1be94:	d309      	bcc.n	1beaa <calc_chksum+0x1e>
			sum++;
		}
		ptr += 2;
	}

	if (ptr == end) {
   1be96:	d107      	bne.n	1bea8 <calc_chksum+0x1c>
		tmp = ptr[0] << 8;
   1be98:	780b      	ldrb	r3, [r1, #0]
   1be9a:	021b      	lsls	r3, r3, #8
		sum += tmp;
   1be9c:	4418      	add	r0, r3
   1be9e:	b280      	uxth	r0, r0
		if (sum < tmp) {
   1bea0:	4283      	cmp	r3, r0
			sum++;
   1bea2:	bf84      	itt	hi
   1bea4:	3001      	addhi	r0, #1
   1bea6:	b280      	uxthhi	r0, r0
		}
	}

	return sum;
}
   1bea8:	bd10      	pop	{r4, pc}
		tmp = (ptr[0] << 8) + ptr[1];
   1beaa:	780c      	ldrb	r4, [r1, #0]
   1beac:	784b      	ldrb	r3, [r1, #1]
   1beae:	eb03 2304 	add.w	r3, r3, r4, lsl #8
   1beb2:	b29b      	uxth	r3, r3
		sum += tmp;
   1beb4:	4418      	add	r0, r3
   1beb6:	b280      	uxth	r0, r0
		if (sum < tmp) {
   1beb8:	4283      	cmp	r3, r0
			sum++;
   1beba:	bf84      	itt	hi
   1bebc:	3001      	addhi	r0, #1
   1bebe:	b280      	uxthhi	r0, r0
		ptr += 2;
   1bec0:	3102      	adds	r1, #2
   1bec2:	e7e6      	b.n	1be92 <calc_chksum+0x6>

0001bec4 <net_addr_pton.part.4>:
int net_addr_pton(sa_family_t family, const char *src,
   1bec4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1bec8:	460f      	mov	r7, r1
		int expected_groups = strchr(src, '.') ? 6 : 8;
   1beca:	212e      	movs	r1, #46	; 0x2e
int net_addr_pton(sa_family_t family, const char *src,
   1becc:	4604      	mov	r4, r0
		int expected_groups = strchr(src, '.') ? 6 : 8;
   1bece:	f7e4 fc02 	bl	6d6 <strchr>
		if (*src == ':') {
   1bed2:	7823      	ldrb	r3, [r4, #0]
		int expected_groups = strchr(src, '.') ? 6 : 8;
   1bed4:	2800      	cmp	r0, #0
   1bed6:	bf14      	ite	ne
   1bed8:	2606      	movne	r6, #6
   1beda:	2608      	moveq	r6, #8
		if (*src == ':') {
   1bedc:	2b3a      	cmp	r3, #58	; 0x3a
			src++;
   1bede:	bf08      	it	eq
   1bee0:	3401      	addeq	r4, #1
		len = strlen(src);
   1bee2:	4620      	mov	r0, r4
   1bee4:	f7e4 fc13 	bl	70e <strlen>
   1bee8:	4623      	mov	r3, r4
		for (i = 0; i < len; i++) {
   1beea:	1b1a      	subs	r2, r3, r4
   1beec:	4290      	cmp	r0, r2
   1beee:	dc19      	bgt.n	1bf24 <net_addr_pton.part.4+0x60>
   1bef0:	2500      	movs	r5, #0
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
   1bef2:	46a8      	mov	r8, r5
			if (!src || *src == '\0') {
   1bef4:	b31c      	cbz	r4, 1bf3e <net_addr_pton.part.4+0x7a>
   1bef6:	7823      	ldrb	r3, [r4, #0]
   1bef8:	b30b      	cbz	r3, 1bf3e <net_addr_pton.part.4+0x7a>
			if (*src != ':') {
   1befa:	2b3a      	cmp	r3, #58	; 0x3a
   1befc:	ea4f 0345 	mov.w	r3, r5, lsl #1
   1bf00:	d121      	bne.n	1bf46 <net_addr_pton.part.4+0x82>
   1bf02:	443b      	add	r3, r7
			for (; i < expected_groups; i++) {
   1bf04:	42ae      	cmp	r6, r5
   1bf06:	dc3c      	bgt.n	1bf82 <net_addr_pton.part.4+0xbe>
			tmp = strrchr(src, ':');
   1bf08:	213a      	movs	r1, #58	; 0x3a
   1bf0a:	4620      	mov	r0, r4
   1bf0c:	f7e4 fbf2 	bl	6f4 <strrchr>
			if (src == tmp && (expected_groups == 6 || !src[1])) {
   1bf10:	42a0      	cmp	r0, r4
   1bf12:	d14c      	bne.n	1bfae <net_addr_pton.part.4+0xea>
   1bf14:	2e06      	cmp	r6, #6
   1bf16:	d13b      	bne.n	1bf90 <net_addr_pton.part.4+0xcc>
				src++;
   1bf18:	1c44      	adds	r4, r0, #1
		if (expected_groups == 6) {
   1bf1a:	2e06      	cmp	r6, #6
   1bf1c:	d04c      	beq.n	1bfb8 <net_addr_pton.part.4+0xf4>
	return 0;
   1bf1e:	2000      	movs	r0, #0
   1bf20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (!(src[i] >= '0' && src[i] <= '9') &&
   1bf24:	f813 2b01 	ldrb.w	r2, [r3], #1
   1bf28:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   1bf2c:	290a      	cmp	r1, #10
   1bf2e:	d9dc      	bls.n	1beea <net_addr_pton.part.4+0x26>
   1bf30:	f022 0120 	bic.w	r1, r2, #32
   1bf34:	3941      	subs	r1, #65	; 0x41
   1bf36:	2905      	cmp	r1, #5
   1bf38:	d9d7      	bls.n	1beea <net_addr_pton.part.4+0x26>
			    !(src[i] >= 'a' && src[i] <= 'f') &&
   1bf3a:	2a2e      	cmp	r2, #46	; 0x2e
   1bf3c:	d0d5      	beq.n	1beea <net_addr_pton.part.4+0x26>
				return -EINVAL;
   1bf3e:	f06f 0015 	mvn.w	r0, #21
   1bf42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
   1bf46:	2210      	movs	r2, #16
   1bf48:	2100      	movs	r1, #0
   1bf4a:	4620      	mov	r0, r4
   1bf4c:	f7e4 fb40 	bl	5d0 <strtol>
   1bf50:	2100      	movs	r1, #0
   1bf52:	4681      	mov	r9, r0
   1bf54:	2210      	movs	r2, #16
   1bf56:	4620      	mov	r0, r4
   1bf58:	f7e4 fb3a 	bl	5d0 <strtol>
   1bf5c:	f3c9 2907 	ubfx	r9, r9, #8, #8
   1bf60:	ea49 2900 	orr.w	r9, r9, r0, lsl #8
   1bf64:	f827 9015 	strh.w	r9, [r7, r5, lsl #1]
				src = strchr(src, ':');
   1bf68:	213a      	movs	r1, #58	; 0x3a
   1bf6a:	4620      	mov	r0, r4
   1bf6c:	f7e4 fbb3 	bl	6d6 <strchr>
				if (!src && i < expected_groups - 1) {
   1bf70:	b910      	cbnz	r0, 1bf78 <net_addr_pton.part.4+0xb4>
   1bf72:	1e73      	subs	r3, r6, #1
   1bf74:	42ab      	cmp	r3, r5
   1bf76:	dce2      	bgt.n	1bf3e <net_addr_pton.part.4+0x7a>
				src++;
   1bf78:	1c44      	adds	r4, r0, #1
		for (i = 0; i < expected_groups; i++) {
   1bf7a:	3501      	adds	r5, #1
   1bf7c:	42ae      	cmp	r6, r5
   1bf7e:	dcb9      	bgt.n	1bef4 <net_addr_pton.part.4+0x30>
   1bf80:	e7cb      	b.n	1bf1a <net_addr_pton.part.4+0x56>
				UNALIGNED_PUT(0, &addr->s6_addr16[i]);
   1bf82:	f883 8000 	strb.w	r8, [r3]
   1bf86:	f883 8001 	strb.w	r8, [r3, #1]
			for (; i < expected_groups; i++) {
   1bf8a:	3501      	adds	r5, #1
   1bf8c:	3302      	adds	r3, #2
   1bf8e:	e7b9      	b.n	1bf04 <net_addr_pton.part.4+0x40>
			if (src == tmp && (expected_groups == 6 || !src[1])) {
   1bf90:	7863      	ldrb	r3, [r4, #1]
   1bf92:	2b00      	cmp	r3, #0
   1bf94:	d0c0      	beq.n	1bf18 <net_addr_pton.part.4+0x54>
			i = expected_groups - 1;
   1bf96:	1e75      	subs	r5, r6, #1
   1bf98:	3001      	adds	r0, #1
				if (*tmp == ':') {
   1bf9a:	f810 3d01 	ldrb.w	r3, [r0, #-1]!
   1bf9e:	2b3a      	cmp	r3, #58	; 0x3a
					i--;
   1bfa0:	bf08      	it	eq
   1bfa2:	f105 35ff 	addeq.w	r5, r5, #4294967295	; 0xffffffff
			} while (tmp-- != src);
   1bfa6:	42a0      	cmp	r0, r4
   1bfa8:	d1f7      	bne.n	1bf9a <net_addr_pton.part.4+0xd6>
			src++;
   1bfaa:	3401      	adds	r4, #1
   1bfac:	e7e5      	b.n	1bf7a <net_addr_pton.part.4+0xb6>
			if (expected_groups == 6) {
   1bfae:	2e06      	cmp	r6, #6
				tmp--;
   1bfb0:	bf08      	it	eq
   1bfb2:	f100 30ff 	addeq.w	r0, r0, #4294967295	; 0xffffffff
   1bfb6:	e7ee      	b.n	1bf96 <net_addr_pton.part.4+0xd2>
   1bfb8:	370c      	adds	r7, #12
		if (expected_groups == 6) {
   1bfba:	2500      	movs	r5, #0
				if (!src || !*src) {
   1bfbc:	2c00      	cmp	r4, #0
   1bfbe:	d0be      	beq.n	1bf3e <net_addr_pton.part.4+0x7a>
   1bfc0:	7823      	ldrb	r3, [r4, #0]
   1bfc2:	2b00      	cmp	r3, #0
   1bfc4:	d0bb      	beq.n	1bf3e <net_addr_pton.part.4+0x7a>
				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
   1bfc6:	2100      	movs	r1, #0
   1bfc8:	220a      	movs	r2, #10
   1bfca:	4620      	mov	r0, r4
   1bfcc:	f7e4 fb00 	bl	5d0 <strtol>
				src = strchr(src, '.');
   1bfd0:	212e      	movs	r1, #46	; 0x2e
				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
   1bfd2:	f807 0b01 	strb.w	r0, [r7], #1
				src = strchr(src, '.');
   1bfd6:	4620      	mov	r0, r4
   1bfd8:	f7e4 fb7d 	bl	6d6 <strchr>
				if (!src && i < 3) {
   1bfdc:	b908      	cbnz	r0, 1bfe2 <net_addr_pton.part.4+0x11e>
   1bfde:	2d03      	cmp	r5, #3
   1bfe0:	d1ad      	bne.n	1bf3e <net_addr_pton.part.4+0x7a>
			for (i = 0; i < 4; i++) {
   1bfe2:	3501      	adds	r5, #1
   1bfe4:	2d04      	cmp	r5, #4
				src++;
   1bfe6:	f100 0401 	add.w	r4, r0, #1
			for (i = 0; i < 4; i++) {
   1bfea:	d1e7      	bne.n	1bfbc <net_addr_pton.part.4+0xf8>
   1bfec:	e797      	b.n	1bf1e <net_addr_pton.part.4+0x5a>

0001bfee <net_addr_pton>:
	if (family == AF_INET) {
   1bfee:	2802      	cmp	r0, #2
{
   1bff0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1bff2:	460c      	mov	r4, r1
   1bff4:	4615      	mov	r5, r2
	if (family == AF_INET) {
   1bff6:	d127      	bne.n	1c048 <net_addr_pton+0x5a>
		len = strlen(src);
   1bff8:	4608      	mov	r0, r1
   1bffa:	f7e4 fb88 	bl	70e <strlen>
   1bffe:	4623      	mov	r3, r4
   1c000:	4420      	add	r0, r4
		for (i = 0; i < len; i++) {
   1c002:	4283      	cmp	r3, r0
   1c004:	d114      	bne.n	1c030 <net_addr_pton+0x42>
		memset(addr, 0, sizeof(struct in_addr));
   1c006:	4628      	mov	r0, r5
   1c008:	2204      	movs	r2, #4
   1c00a:	2100      	movs	r1, #0
   1c00c:	f7e4 fbed 	bl	7ea <memset>
   1c010:	1e6e      	subs	r6, r5, #1
   1c012:	3503      	adds	r5, #3
			addr->s4_addr[i] = strtol(src, &endptr, 10);
   1c014:	4620      	mov	r0, r4
   1c016:	220a      	movs	r2, #10
   1c018:	a901      	add	r1, sp, #4
   1c01a:	f7e4 fad9 	bl	5d0 <strtol>
   1c01e:	f806 0f01 	strb.w	r0, [r6, #1]!
			src = ++endptr;
   1c022:	9c01      	ldr	r4, [sp, #4]
		for (i = 0; i < sizeof(struct in_addr); i++) {
   1c024:	42b5      	cmp	r5, r6
			src = ++endptr;
   1c026:	f104 0401 	add.w	r4, r4, #1
		for (i = 0; i < sizeof(struct in_addr); i++) {
   1c02a:	d1f3      	bne.n	1c014 <net_addr_pton+0x26>
	return 0;
   1c02c:	2000      	movs	r0, #0
   1c02e:	e009      	b.n	1c044 <net_addr_pton+0x56>
			if (!(src[i] >= '0' && src[i] <= '9') &&
   1c030:	f813 2b01 	ldrb.w	r2, [r3], #1
   1c034:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   1c038:	2909      	cmp	r1, #9
   1c03a:	d9e2      	bls.n	1c002 <net_addr_pton+0x14>
   1c03c:	2a2e      	cmp	r2, #46	; 0x2e
   1c03e:	d0e0      	beq.n	1c002 <net_addr_pton+0x14>
				return -EINVAL;
   1c040:	f06f 0015 	mvn.w	r0, #21
}
   1c044:	b002      	add	sp, #8
   1c046:	bd70      	pop	{r4, r5, r6, pc}
	} else if (family == AF_INET6) {
   1c048:	280a      	cmp	r0, #10
   1c04a:	d1f9      	bne.n	1c040 <net_addr_pton+0x52>
   1c04c:	4611      	mov	r1, r2
   1c04e:	4620      	mov	r0, r4
   1c050:	f7ff ff38 	bl	1bec4 <net_addr_pton.part.4>
   1c054:	e7f6      	b.n	1c044 <net_addr_pton+0x56>

0001c056 <net_calc_chksum>:

	return sum;
}

u16_t net_calc_chksum(struct net_pkt *pkt, u8_t proto)
{
   1c056:	b5f0      	push	{r4, r5, r6, r7, lr}
	return pkt->family;
   1c058:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
	u16_t upper_layer_len;
	u16_t sum = 0;

	switch (net_pkt_family(pkt)) {
   1c05c:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   1c060:	2b0a      	cmp	r3, #10
{
   1c062:	b085      	sub	sp, #20
   1c064:	4605      	mov	r5, r0
	switch (net_pkt_family(pkt)) {
   1c066:	d144      	bne.n	1c0f2 <net_calc_chksum+0x9c>
   1c068:	6886      	ldr	r6, [r0, #8]
		break;
#endif
#if defined(CONFIG_NET_IPV6)
	case AF_INET6:
		upper_layer_len = (NET_IPV6_HDR(pkt)->len[0] << 8) +
			NET_IPV6_HDR(pkt)->len[1] - net_pkt_ipv6_ext_len(pkt);
   1c06a:	f890 703f 	ldrb.w	r7, [r0, #63]	; 0x3f
	return pkt->frags->data;
   1c06e:	68b3      	ldr	r3, [r6, #8]
   1c070:	7958      	ldrb	r0, [r3, #5]
		sum = calc_chksum(upper_layer_len + proto,
   1c072:	1bc9      	subs	r1, r1, r7
   1c074:	4408      	add	r0, r1
		upper_layer_len = (NET_IPV6_HDR(pkt)->len[0] << 8) +
   1c076:	7919      	ldrb	r1, [r3, #4]
		sum = calc_chksum(upper_layer_len + proto,
   1c078:	eb00 2001 	add.w	r0, r0, r1, lsl #8
   1c07c:	2220      	movs	r2, #32
   1c07e:	f103 0108 	add.w	r1, r3, #8
   1c082:	b280      	uxth	r0, r0
   1c084:	f7ff ff02 	bl	1be8c <calc_chksum>
	u16_t proto_len = net_pkt_ip_hdr_len(pkt) +
   1c088:	f895 1035 	ldrb.w	r1, [r5, #53]	; 0x35
	return net_frag_read(frag, offset, pos, len, NULL);
   1c08c:	2300      	movs	r3, #0
		sum = calc_chksum(upper_layer_len + proto,
   1c08e:	4604      	mov	r4, r0
   1c090:	9300      	str	r3, [sp, #0]
   1c092:	4630      	mov	r0, r6
   1c094:	f10d 020e 	add.w	r2, sp, #14
   1c098:	4439      	add	r1, r7
   1c09a:	f7ff fd53 	bl	1bb44 <net_frag_read>
	if (!frag) {
   1c09e:	4606      	mov	r6, r0
   1c0a0:	b348      	cbz	r0, 1c0f6 <net_calc_chksum+0xa0>
	ptr = frag->data + offset;
   1c0a2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
	len = frag->len - offset;
   1c0a6:	8982      	ldrh	r2, [r0, #12]
	ptr = frag->data + offset;
   1c0a8:	6881      	ldr	r1, [r0, #8]
	len = frag->len - offset;
   1c0aa:	1ad2      	subs	r2, r2, r3
	ptr = frag->data + offset;
   1c0ac:	4419      	add	r1, r3
	len = frag->len - offset;
   1c0ae:	b212      	sxth	r2, r2
		sum = calc_chksum(sum, ptr, len);
   1c0b0:	b295      	uxth	r5, r2
   1c0b2:	4620      	mov	r0, r4
   1c0b4:	462a      	mov	r2, r5
   1c0b6:	f7ff fee9 	bl	1be8c <calc_chksum>
		frag = frag->frags;
   1c0ba:	6836      	ldr	r6, [r6, #0]
		sum = calc_chksum(sum, ptr, len);
   1c0bc:	4604      	mov	r4, r0
		if (!frag) {
   1c0be:	b926      	cbnz	r6, 1c0ca <net_calc_chksum+0x74>
		return 0;
	}

	sum = calc_chksum_pkt(sum, pkt, upper_layer_len);

	sum = (sum == 0) ? 0xffff : htons(sum);
   1c0c0:	b1c8      	cbz	r0, 1c0f6 <net_calc_chksum+0xa0>
   1c0c2:	ba40      	rev16	r0, r0
   1c0c4:	b280      	uxth	r0, r0

	return sum;
}
   1c0c6:	b005      	add	sp, #20
   1c0c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (len % 2) {
   1c0ca:	07eb      	lsls	r3, r5, #31
		ptr = frag->data;
   1c0cc:	68b1      	ldr	r1, [r6, #8]
		if (len % 2) {
   1c0ce:	d50d      	bpl.n	1c0ec <net_calc_chksum+0x96>
			u16_t tmp = *ptr;
   1c0d0:	780b      	ldrb	r3, [r1, #0]
			len = frag->len - 1;
   1c0d2:	89b2      	ldrh	r2, [r6, #12]
			sum += tmp;
   1c0d4:	441c      	add	r4, r3
   1c0d6:	b2a4      	uxth	r4, r4
			if (sum < tmp) {
   1c0d8:	42a3      	cmp	r3, r4
				sum++;
   1c0da:	bf88      	it	hi
   1c0dc:	3401      	addhi	r4, #1
			len = frag->len - 1;
   1c0de:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
				sum++;
   1c0e2:	bf88      	it	hi
   1c0e4:	b2a4      	uxthhi	r4, r4
			len = frag->len - 1;
   1c0e6:	b212      	sxth	r2, r2
			ptr++;
   1c0e8:	3101      	adds	r1, #1
   1c0ea:	e7e1      	b.n	1c0b0 <net_calc_chksum+0x5a>
			len = frag->len;
   1c0ec:	f9b6 200c 	ldrsh.w	r2, [r6, #12]
   1c0f0:	e7de      	b.n	1c0b0 <net_calc_chksum+0x5a>
		return 0;
   1c0f2:	2000      	movs	r0, #0
   1c0f4:	e7e7      	b.n	1c0c6 <net_calc_chksum+0x70>
	sum = (sum == 0) ? 0xffff : htons(sum);
   1c0f6:	f64f 70ff 	movw	r0, #65535	; 0xffff
   1c0fa:	e7e4      	b.n	1c0c6 <net_calc_chksum+0x70>

0001c0fc <net_header_fits>:
 * memory area. The start of the said area must be inside the first
 * fragment. This helper is used when checking whether various protocol
 * headers are split between two fragments.
 */
bool net_header_fits(struct net_pkt *pkt, u8_t *hdr, size_t hdr_size)
{
   1c0fc:	b510      	push	{r4, lr}
	if (hdr && hdr > pkt->frags->data &&
   1c0fe:	b159      	cbz	r1, 1c118 <net_header_fits+0x1c>
   1c100:	6884      	ldr	r4, [r0, #8]
   1c102:	68a3      	ldr	r3, [r4, #8]
   1c104:	4299      	cmp	r1, r3
   1c106:	d907      	bls.n	1c118 <net_header_fits+0x1c>
	    (hdr + hdr_size) <= (pkt->frags->data + pkt->frags->len)) {
   1c108:	89a0      	ldrh	r0, [r4, #12]
   1c10a:	4411      	add	r1, r2
   1c10c:	4418      	add	r0, r3
	if (hdr && hdr > pkt->frags->data &&
   1c10e:	4281      	cmp	r1, r0
   1c110:	bf8c      	ite	hi
   1c112:	2000      	movhi	r0, #0
   1c114:	2001      	movls	r0, #1
   1c116:	bd10      	pop	{r4, pc}
		return true;
	}

	return false;
   1c118:	2000      	movs	r0, #0
}
   1c11a:	bd10      	pop	{r4, pc}

0001c11c <net_ipv6_addr_create_iid>:
{
   1c11c:	b570      	push	{r4, r5, r6, lr}
	addr->s6_addr[1] = 0x80;
   1c11e:	2380      	movs	r3, #128	; 0x80
   1c120:	7043      	strb	r3, [r0, #1]
	addr->s6_addr[0] = 0xfe;
   1c122:	26fe      	movs	r6, #254	; 0xfe
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
   1c124:	2300      	movs	r3, #0
	addr->s6_addr[0] = 0xfe;
   1c126:	7006      	strb	r6, [r0, #0]
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
   1c128:	7083      	strb	r3, [r0, #2]
   1c12a:	70c3      	strb	r3, [r0, #3]
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
   1c12c:	7103      	strb	r3, [r0, #4]
   1c12e:	7143      	strb	r3, [r0, #5]
   1c130:	7183      	strb	r3, [r0, #6]
   1c132:	71c3      	strb	r3, [r0, #7]
	switch (lladdr->len) {
   1c134:	790a      	ldrb	r2, [r1, #4]
   1c136:	2a06      	cmp	r2, #6
{
   1c138:	4604      	mov	r4, r0
   1c13a:	460d      	mov	r5, r1
	switch (lladdr->len) {
   1c13c:	d013      	beq.n	1c166 <net_ipv6_addr_create_iid+0x4a>
   1c13e:	2a08      	cmp	r2, #8
   1c140:	d028      	beq.n	1c194 <net_ipv6_addr_create_iid+0x78>
   1c142:	2a02      	cmp	r2, #2
   1c144:	d125      	bne.n	1c192 <net_ipv6_addr_create_iid+0x76>
		if (lladdr->type == NET_LINK_IEEE802154) {
   1c146:	794a      	ldrb	r2, [r1, #5]
   1c148:	2a01      	cmp	r2, #1
   1c14a:	d122      	bne.n	1c192 <net_ipv6_addr_create_iid+0x76>
			addr->s6_addr[11] = 0xff;
   1c14c:	22ff      	movs	r2, #255	; 0xff
   1c14e:	72c2      	strb	r2, [r0, #11]
			addr->s6_addr[12] = 0xfe;
   1c150:	7306      	strb	r6, [r0, #12]
			addr->s6_addr[13] = 0;
   1c152:	7343      	strb	r3, [r0, #13]
			UNALIGNED_PUT(0, &addr->s6_addr32[2]);
   1c154:	7203      	strb	r3, [r0, #8]
   1c156:	7243      	strb	r3, [r0, #9]
   1c158:	7283      	strb	r3, [r0, #10]
			addr->s6_addr[14] = lladdr->addr[0];
   1c15a:	680b      	ldr	r3, [r1, #0]
   1c15c:	781a      	ldrb	r2, [r3, #0]
   1c15e:	7382      	strb	r2, [r0, #14]
			addr->s6_addr[15] = lladdr->addr[1];
   1c160:	785b      	ldrb	r3, [r3, #1]
   1c162:	73c3      	strb	r3, [r0, #15]
   1c164:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   1c166:	2203      	movs	r2, #3
   1c168:	6809      	ldr	r1, [r1, #0]
   1c16a:	3008      	adds	r0, #8
   1c16c:	f7e4 fb11 	bl	792 <memcpy>
		addr->s6_addr[11] = 0xff;
   1c170:	23ff      	movs	r3, #255	; 0xff
   1c172:	72e3      	strb	r3, [r4, #11]
		addr->s6_addr[12] = 0xfe;
   1c174:	7326      	strb	r6, [r4, #12]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   1c176:	6829      	ldr	r1, [r5, #0]
   1c178:	2203      	movs	r2, #3
   1c17a:	4411      	add	r1, r2
   1c17c:	f104 000d 	add.w	r0, r4, #13
   1c180:	f7e4 fb07 	bl	792 <memcpy>
		if (lladdr->type == NET_LINK_ETHERNET) {
   1c184:	796b      	ldrb	r3, [r5, #5]
   1c186:	2b03      	cmp	r3, #3
   1c188:	d103      	bne.n	1c192 <net_ipv6_addr_create_iid+0x76>
		addr->s6_addr[8] ^= 0x02;
   1c18a:	7a23      	ldrb	r3, [r4, #8]
   1c18c:	f083 0302 	eor.w	r3, r3, #2
   1c190:	7223      	strb	r3, [r4, #8]
   1c192:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
   1c194:	6809      	ldr	r1, [r1, #0]
   1c196:	3008      	adds	r0, #8
   1c198:	f7e4 fafb 	bl	792 <memcpy>
   1c19c:	e7f5      	b.n	1c18a <net_ipv6_addr_create_iid+0x6e>

0001c19e <net_ipv6_addr_based_on_ll>:
{
   1c19e:	b570      	push	{r4, r5, r6, lr}
   1c1a0:	460d      	mov	r5, r1
	if (!addr || !lladdr) {
   1c1a2:	4604      	mov	r4, r0
   1c1a4:	b908      	cbnz	r0, 1c1aa <net_ipv6_addr_based_on_ll+0xc>
	return false;
   1c1a6:	2000      	movs	r0, #0
}
   1c1a8:	bd70      	pop	{r4, r5, r6, pc}
	if (!addr || !lladdr) {
   1c1aa:	2900      	cmp	r1, #0
   1c1ac:	d0fb      	beq.n	1c1a6 <net_ipv6_addr_based_on_ll+0x8>
	switch (lladdr->len) {
   1c1ae:	790a      	ldrb	r2, [r1, #4]
   1c1b0:	2a06      	cmp	r2, #6
   1c1b2:	d013      	beq.n	1c1dc <net_ipv6_addr_based_on_ll+0x3e>
   1c1b4:	2a08      	cmp	r2, #8
   1c1b6:	d048      	beq.n	1c24a <net_ipv6_addr_based_on_ll+0xac>
   1c1b8:	2a02      	cmp	r2, #2
   1c1ba:	d1f4      	bne.n	1c1a6 <net_ipv6_addr_based_on_ll+0x8>
		if (!memcmp(&addr->s6_addr[14], lladdr->addr, lladdr->len) &&
   1c1bc:	6809      	ldr	r1, [r1, #0]
   1c1be:	300e      	adds	r0, #14
   1c1c0:	f7e4 faba 	bl	738 <memcmp>
   1c1c4:	2800      	cmp	r0, #0
   1c1c6:	d1ee      	bne.n	1c1a6 <net_ipv6_addr_based_on_ll+0x8>
		    addr->s6_addr[10] == 0 &&
   1c1c8:	68a3      	ldr	r3, [r4, #8]
   1c1ca:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   1c1ce:	d1ea      	bne.n	1c1a6 <net_ipv6_addr_based_on_ll+0x8>
			    addr->s6_addr[11] == 0xff &&
   1c1d0:	7b20      	ldrb	r0, [r4, #12]
   1c1d2:	28fe      	cmp	r0, #254	; 0xfe
			    lladdr->len - 1) &&
   1c1d4:	bf14      	ite	ne
   1c1d6:	2000      	movne	r0, #0
   1c1d8:	2001      	moveq	r0, #1
   1c1da:	bd70      	pop	{r4, r5, r6, pc}
		if (lladdr->type == NET_LINK_ETHERNET) {
   1c1dc:	794e      	ldrb	r6, [r1, #5]
   1c1de:	2e03      	cmp	r6, #3
   1c1e0:	d11d      	bne.n	1c21e <net_ipv6_addr_based_on_ll+0x80>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   1c1e2:	6809      	ldr	r1, [r1, #0]
   1c1e4:	2202      	movs	r2, #2
   1c1e6:	3101      	adds	r1, #1
   1c1e8:	3009      	adds	r0, #9
   1c1ea:	f7e4 faa5 	bl	738 <memcmp>
   1c1ee:	2800      	cmp	r0, #0
   1c1f0:	d1d9      	bne.n	1c1a6 <net_ipv6_addr_based_on_ll+0x8>
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   1c1f2:	6829      	ldr	r1, [r5, #0]
   1c1f4:	4632      	mov	r2, r6
   1c1f6:	3103      	adds	r1, #3
   1c1f8:	f104 000d 	add.w	r0, r4, #13
   1c1fc:	f7e4 fa9c 	bl	738 <memcmp>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   1c200:	2800      	cmp	r0, #0
   1c202:	d1d0      	bne.n	1c1a6 <net_ipv6_addr_based_on_ll+0x8>
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   1c204:	7ae3      	ldrb	r3, [r4, #11]
   1c206:	2bff      	cmp	r3, #255	; 0xff
   1c208:	d1cd      	bne.n	1c1a6 <net_ipv6_addr_based_on_ll+0x8>
			    addr->s6_addr[11] == 0xff &&
   1c20a:	7b23      	ldrb	r3, [r4, #12]
   1c20c:	2bfe      	cmp	r3, #254	; 0xfe
   1c20e:	d1ca      	bne.n	1c1a6 <net_ipv6_addr_based_on_ll+0x8>
		    (addr->s6_addr[8] ^ 0x02) == lladdr->addr[0]) {
   1c210:	682a      	ldr	r2, [r5, #0]
   1c212:	7a23      	ldrb	r3, [r4, #8]
			    lladdr->len - 1) &&
   1c214:	7810      	ldrb	r0, [r2, #0]
   1c216:	f083 0302 	eor.w	r3, r3, #2
   1c21a:	4298      	cmp	r0, r3
   1c21c:	e7da      	b.n	1c1d4 <net_ipv6_addr_based_on_ll+0x36>
		} else if (lladdr->type == NET_LINK_BLUETOOTH) {
   1c21e:	2e02      	cmp	r6, #2
   1c220:	d1c1      	bne.n	1c1a6 <net_ipv6_addr_based_on_ll+0x8>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   1c222:	6809      	ldr	r1, [r1, #0]
   1c224:	4632      	mov	r2, r6
   1c226:	3101      	adds	r1, #1
   1c228:	3009      	adds	r0, #9
   1c22a:	f7e4 fa85 	bl	738 <memcmp>
   1c22e:	2800      	cmp	r0, #0
   1c230:	d1b9      	bne.n	1c1a6 <net_ipv6_addr_based_on_ll+0x8>
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   1c232:	6829      	ldr	r1, [r5, #0]
   1c234:	2203      	movs	r2, #3
   1c236:	4411      	add	r1, r2
   1c238:	f104 000d 	add.w	r0, r4, #13
   1c23c:	f7e4 fa7c 	bl	738 <memcmp>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   1c240:	2800      	cmp	r0, #0
   1c242:	d1b0      	bne.n	1c1a6 <net_ipv6_addr_based_on_ll+0x8>
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   1c244:	7ae3      	ldrb	r3, [r4, #11]
   1c246:	2bff      	cmp	r3, #255	; 0xff
   1c248:	e7c1      	b.n	1c1ce <net_ipv6_addr_based_on_ll+0x30>
		if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1],
   1c24a:	6809      	ldr	r1, [r1, #0]
   1c24c:	2207      	movs	r2, #7
   1c24e:	3101      	adds	r1, #1
   1c250:	3009      	adds	r0, #9
   1c252:	f7e4 fa71 	bl	738 <memcmp>
   1c256:	2800      	cmp	r0, #0
   1c258:	d0da      	beq.n	1c210 <net_ipv6_addr_based_on_ll+0x72>
   1c25a:	e7a4      	b.n	1c1a6 <net_ipv6_addr_based_on_ll+0x8>

0001c25c <net_6lo_compress>:
	return true;
}

bool net_6lo_compress(struct net_pkt *pkt, bool iphc,
		      fragment_handler_t fragment)
{
   1c25c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1c260:	4607      	mov	r7, r0
   1c262:	4691      	mov	r9, r2
	if (iphc) {
   1c264:	2900      	cmp	r1, #0
   1c266:	f000 81d2 	beq.w	1c60e <net_6lo_compress+0x3b2>
   1c26a:	6882      	ldr	r2, [r0, #8]
	if (pkt->frags->len < NET_IPV6H_LEN) {
   1c26c:	8993      	ldrh	r3, [r2, #12]
   1c26e:	2b27      	cmp	r3, #39	; 0x27
   1c270:	d803      	bhi.n	1c27a <net_6lo_compress+0x1e>
		return false;
   1c272:	2000      	movs	r0, #0
		return compress_IPHC_header(pkt, fragment);
	} else {
		return compress_ipv6_header(pkt, fragment);
	}
}
   1c274:	b003      	add	sp, #12
   1c276:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return pkt->frags->data;
   1c27a:	6895      	ldr	r5, [r2, #8]
	if (ipv6->nexthdr == IPPROTO_UDP &&
   1c27c:	79aa      	ldrb	r2, [r5, #6]
   1c27e:	2a11      	cmp	r2, #17
   1c280:	d101      	bne.n	1c286 <net_6lo_compress+0x2a>
   1c282:	2b2f      	cmp	r3, #47	; 0x2f
   1c284:	d9f5      	bls.n	1c272 <net_6lo_compress+0x16>
	frag = net_pkt_get_frag(pkt, K_FOREVER);
   1c286:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1c28a:	4638      	mov	r0, r7
   1c28c:	f7ff fa9a 	bl	1b7c4 <net_pkt_get_frag>
	if (!frag) {
   1c290:	4606      	mov	r6, r0
   1c292:	2800      	cmp	r0, #0
   1c294:	d0ed      	beq.n	1c272 <net_6lo_compress+0x16>
	IPHC[offset++] = NET_6LO_DISPATCH_IPHC;
   1c296:	6883      	ldr	r3, [r0, #8]
   1c298:	2260      	movs	r2, #96	; 0x60
   1c29a:	701a      	strb	r2, [r3, #0]
	IPHC[offset++] = 0;
   1c29c:	6883      	ldr	r3, [r0, #8]
   1c29e:	2200      	movs	r2, #0
   1c2a0:	705a      	strb	r2, [r3, #1]
	tcl = ((ipv6->vtc & 0x0F) << 4) | ((ipv6->tcflow & 0xF0) >> 4);
   1c2a2:	786c      	ldrb	r4, [r5, #1]
   1c2a4:	782a      	ldrb	r2, [r5, #0]
   1c2a6:	0923      	lsrs	r3, r4, #4
   1c2a8:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
   1c2ac:	b2db      	uxtb	r3, r3
	tcl = (tcl << 6) | (tcl >> 2);   /* ECN(2), DSCP(6) */
   1c2ae:	0898      	lsrs	r0, r3, #2
   1c2b0:	ea40 1083 	orr.w	r0, r0, r3, lsl #6
   1c2b4:	b240      	sxtb	r0, r0
	if (((ipv6->tcflow & 0x0F) == 0) && (ipv6->flow == 0)) {
   1c2b6:	f014 0f0f 	tst.w	r4, #15
	tcl = (tcl << 6) | (tcl >> 2);   /* ECN(2), DSCP(6) */
   1c2ba:	fa5f fe80 	uxtb.w	lr, r0
   1c2be:	f002 020f 	and.w	r2, r2, #15
   1c2c2:	68b3      	ldr	r3, [r6, #8]
	if (((ipv6->tcflow & 0x0F) == 0) && (ipv6->flow == 0)) {
   1c2c4:	d145      	bne.n	1c352 <net_6lo_compress+0xf6>
   1c2c6:	8869      	ldrh	r1, [r5, #2]
   1c2c8:	2900      	cmp	r1, #0
   1c2ca:	d142      	bne.n	1c352 <net_6lo_compress+0xf6>
		if (((ipv6->vtc & 0x0F) == 0) && ((ipv6->tcflow & 0xF0) == 0)) {
   1c2cc:	2a00      	cmp	r2, #0
   1c2ce:	d137      	bne.n	1c340 <net_6lo_compress+0xe4>
   1c2d0:	f014 0ff0 	tst.w	r4, #240	; 0xf0
   1c2d4:	d134      	bne.n	1c340 <net_6lo_compress+0xe4>
			IPHC[0] |= NET_6LO_IPHC_TF_11;
   1c2d6:	781a      	ldrb	r2, [r3, #0]
   1c2d8:	f042 0218 	orr.w	r2, r2, #24
   1c2dc:	701a      	strb	r2, [r3, #0]
   1c2de:	2402      	movs	r4, #2
   1c2e0:	79aa      	ldrb	r2, [r5, #6]
   1c2e2:	68b3      	ldr	r3, [r6, #8]
	if (ipv6->nexthdr == IPPROTO_UDP) {
   1c2e4:	2a11      	cmp	r2, #17
		IPHC[0] |= NET_6LO_IPHC_NH_1;
   1c2e6:	bf09      	itett	eq
   1c2e8:	781a      	ldrbeq	r2, [r3, #0]
		IPHC[offset++] = ipv6->nexthdr;
   1c2ea:	551a      	strbne	r2, [r3, r4]
		IPHC[0] |= NET_6LO_IPHC_NH_1;
   1c2ec:	f042 0204 	orreq.w	r2, r2, #4
   1c2f0:	701a      	strbeq	r2, [r3, #0]
   1c2f2:	79ea      	ldrb	r2, [r5, #7]
   1c2f4:	68b3      	ldr	r3, [r6, #8]
		IPHC[offset++] = ipv6->nexthdr;
   1c2f6:	bf1c      	itt	ne
   1c2f8:	1c61      	addne	r1, r4, #1
   1c2fa:	b2cc      	uxtbne	r4, r1
	switch (ipv6->hop_limit) {
   1c2fc:	2a40      	cmp	r2, #64	; 0x40
   1c2fe:	d04e      	beq.n	1c39e <net_6lo_compress+0x142>
   1c300:	2aff      	cmp	r2, #255	; 0xff
   1c302:	d050      	beq.n	1c3a6 <net_6lo_compress+0x14a>
   1c304:	2a01      	cmp	r2, #1
   1c306:	d152      	bne.n	1c3ae <net_6lo_compress+0x152>
		IPHC[0] |= NET_6LO_IPHC_HLIM1;
   1c308:	781a      	ldrb	r2, [r3, #0]
   1c30a:	f042 0201 	orr.w	r2, r2, #1
		IPHC[0] |= NET_6LO_IPHC_HLIM64;
   1c30e:	701a      	strb	r2, [r3, #0]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1c310:	68ab      	ldr	r3, [r5, #8]
	if (net_is_ipv6_addr_unspecified(&ipv6->src)) {
   1c312:	f105 0008 	add.w	r0, r5, #8
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1c316:	2b00      	cmp	r3, #0
   1c318:	f040 8195 	bne.w	1c646 <net_6lo_compress+0x3ea>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1c31c:	68eb      	ldr	r3, [r5, #12]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1c31e:	2b00      	cmp	r3, #0
   1c320:	f040 8191 	bne.w	1c646 <net_6lo_compress+0x3ea>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1c324:	692b      	ldr	r3, [r5, #16]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1c326:	2b00      	cmp	r3, #0
   1c328:	f040 818d 	bne.w	1c646 <net_6lo_compress+0x3ea>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   1c32c:	696b      	ldr	r3, [r5, #20]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1c32e:	2b00      	cmp	r3, #0
   1c330:	f040 8189 	bne.w	1c646 <net_6lo_compress+0x3ea>
		IPHC[1] |= NET_6LO_IPHC_SAC_1;
   1c334:	68b2      	ldr	r2, [r6, #8]
   1c336:	7853      	ldrb	r3, [r2, #1]
   1c338:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1c33c:	7053      	strb	r3, [r2, #1]
   1c33e:	e050      	b.n	1c3e2 <net_6lo_compress+0x186>
			IPHC[0] |= NET_6LO_IPHC_TF_10;
   1c340:	781a      	ldrb	r2, [r3, #0]
   1c342:	f042 0210 	orr.w	r2, r2, #16
   1c346:	701a      	strb	r2, [r3, #0]
			IPHC[offset++] = tcl;
   1c348:	68b3      	ldr	r3, [r6, #8]
   1c34a:	2403      	movs	r4, #3
   1c34c:	f883 e002 	strb.w	lr, [r3, #2]
   1c350:	e7c6      	b.n	1c2e0 <net_6lo_compress+0x84>
   1c352:	1ca9      	adds	r1, r5, #2
		if (((ipv6->vtc & 0x0F) == 0) && (ipv6->tcflow & 0x30)) {
   1c354:	b9aa      	cbnz	r2, 1c382 <net_6lo_compress+0x126>
   1c356:	f014 0f30 	tst.w	r4, #48	; 0x30
   1c35a:	d012      	beq.n	1c382 <net_6lo_compress+0x126>
			IPHC[0] |= NET_6LO_IPHC_TF_01;
   1c35c:	781a      	ldrb	r2, [r3, #0]
   1c35e:	f042 0208 	orr.w	r2, r2, #8
   1c362:	701a      	strb	r2, [r3, #0]
			IPHC[offset++] = (tcl & 0xC0) | (ipv6->tcflow & 0x0F);
   1c364:	786b      	ldrb	r3, [r5, #1]
   1c366:	68b2      	ldr	r2, [r6, #8]
   1c368:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
   1c36c:	f003 030f 	and.w	r3, r3, #15
   1c370:	4303      	orrs	r3, r0
   1c372:	7093      	strb	r3, [r2, #2]
			memcpy(&IPHC[offset], &ipv6->flow, 2);
   1c374:	68b0      	ldr	r0, [r6, #8]
   1c376:	2202      	movs	r2, #2
   1c378:	3003      	adds	r0, #3
   1c37a:	f7e4 fa0a 	bl	792 <memcpy>
			offset += 2;
   1c37e:	2405      	movs	r4, #5
   1c380:	e7ae      	b.n	1c2e0 <net_6lo_compress+0x84>
			IPHC[offset++] = tcl;
   1c382:	f883 e002 	strb.w	lr, [r3, #2]
			IPHC[offset++] = ipv6->tcflow & 0x0F;
   1c386:	786b      	ldrb	r3, [r5, #1]
   1c388:	68b2      	ldr	r2, [r6, #8]
   1c38a:	f003 030f 	and.w	r3, r3, #15
   1c38e:	70d3      	strb	r3, [r2, #3]
			memcpy(&IPHC[offset], &ipv6->flow, 2);
   1c390:	68b0      	ldr	r0, [r6, #8]
   1c392:	2202      	movs	r2, #2
   1c394:	3004      	adds	r0, #4
   1c396:	f7e4 f9fc 	bl	792 <memcpy>
			offset += 2;
   1c39a:	2406      	movs	r4, #6
   1c39c:	e7a0      	b.n	1c2e0 <net_6lo_compress+0x84>
		IPHC[0] |= NET_6LO_IPHC_HLIM64;
   1c39e:	781a      	ldrb	r2, [r3, #0]
   1c3a0:	f042 0202 	orr.w	r2, r2, #2
   1c3a4:	e7b3      	b.n	1c30e <net_6lo_compress+0xb2>
		IPHC[0] |= NET_6LO_IPHC_HLIM255;
   1c3a6:	781a      	ldrb	r2, [r3, #0]
   1c3a8:	f042 0203 	orr.w	r2, r2, #3
   1c3ac:	e7af      	b.n	1c30e <net_6lo_compress+0xb2>
		IPHC[offset++] = ipv6->hop_limit;
   1c3ae:	1c61      	adds	r1, r4, #1
   1c3b0:	551a      	strb	r2, [r3, r4]
   1c3b2:	b2cc      	uxtb	r4, r1
   1c3b4:	e7ac      	b.n	1c310 <net_6lo_compress+0xb4>
	return ((UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0xFF)) &&
   1c3b6:	8aab      	ldrh	r3, [r5, #20]
   1c3b8:	2bfe      	cmp	r3, #254	; 0xfe
   1c3ba:	f040 8157 	bne.w	1c66c <net_6lo_compress+0x410>
			IPHC[1] |= NET_6LO_IPHC_SAM_10;
   1c3be:	68b2      	ldr	r2, [r6, #8]
   1c3c0:	7853      	ldrb	r3, [r2, #1]
   1c3c2:	f043 0320 	orr.w	r3, r3, #32
   1c3c6:	7053      	strb	r3, [r2, #1]
			memcpy(&IPHC[offset], &ipv6->src.s6_addr[14], 2);
   1c3c8:	68b0      	ldr	r0, [r6, #8]
   1c3ca:	2202      	movs	r2, #2
   1c3cc:	4420      	add	r0, r4
   1c3ce:	f105 0116 	add.w	r1, r5, #22
   1c3d2:	f7e4 f9de 	bl	792 <memcpy>
			offset += 2;
   1c3d6:	3402      	adds	r4, #2
   1c3d8:	e15c      	b.n	1c694 <net_6lo_compress+0x438>
				IPHC[1] |= NET_6LO_IPHC_SAM_11;
   1c3da:	785a      	ldrb	r2, [r3, #1]
   1c3dc:	f042 0230 	orr.w	r2, r2, #48	; 0x30
   1c3e0:	705a      	strb	r2, [r3, #1]
	if (net_is_ipv6_addr_mcast(&ipv6->dst)) {
   1c3e2:	7e2b      	ldrb	r3, [r5, #24]
   1c3e4:	2bff      	cmp	r3, #255	; 0xff
   1c3e6:	d12f      	bne.n	1c448 <net_6lo_compress+0x1ec>
	IPHC[1] |= NET_6LO_IPHC_M_1;
   1c3e8:	68b2      	ldr	r2, [r6, #8]
   1c3ea:	7853      	ldrb	r3, [r2, #1]
   1c3ec:	f043 0308 	orr.w	r3, r3, #8
   1c3f0:	7053      	strb	r3, [r2, #1]
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   1c3f2:	7e6b      	ldrb	r3, [r5, #25]
   1c3f4:	68b0      	ldr	r0, [r6, #8]
   1c3f6:	2b02      	cmp	r3, #2
   1c3f8:	f040 8154 	bne.w	1c6a4 <net_6lo_compress+0x448>
	return ((addr->s6_addr[1] == 0x02) &&
   1c3fc:	8b6b      	ldrh	r3, [r5, #26]
   1c3fe:	2b00      	cmp	r3, #0
   1c400:	f040 8150 	bne.w	1c6a4 <net_6lo_compress+0x448>
		 (UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   1c404:	69eb      	ldr	r3, [r5, #28]
		 (UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   1c406:	2b00      	cmp	r3, #0
   1c408:	f040 814c 	bne.w	1c6a4 <net_6lo_compress+0x448>
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   1c40c:	6a2b      	ldr	r3, [r5, #32]
		 (UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   1c40e:	2b00      	cmp	r3, #0
   1c410:	f040 8148 	bne.w	1c6a4 <net_6lo_compress+0x448>
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   1c414:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
   1c418:	2b00      	cmp	r3, #0
   1c41a:	f040 8143 	bne.w	1c6a4 <net_6lo_compress+0x448>
		IPHC[1] |= NET_6LO_IPHC_DAM_11;
   1c41e:	7843      	ldrb	r3, [r0, #1]
   1c420:	f043 0303 	orr.w	r3, r3, #3
   1c424:	7043      	strb	r3, [r0, #1]
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[15], 1);
   1c426:	68b0      	ldr	r0, [r6, #8]
   1c428:	2201      	movs	r2, #1
   1c42a:	4420      	add	r0, r4
   1c42c:	f105 0127 	add.w	r1, r5, #39	; 0x27
   1c430:	f7e4 f9af 	bl	792 <memcpy>
		offset++;
   1c434:	3401      	adds	r4, #1
   1c436:	e189      	b.n	1c74c <net_6lo_compress+0x4f0>
		memcpy(&IPHC[offset], ipv6->src.s6_addr,
   1c438:	68b3      	ldr	r3, [r6, #8]
   1c43a:	4601      	mov	r1, r0
   1c43c:	2210      	movs	r2, #16
   1c43e:	1918      	adds	r0, r3, r4
   1c440:	f7e4 f9a7 	bl	792 <memcpy>
		offset += sizeof(struct in6_addr);
   1c444:	3410      	adds	r4, #16
   1c446:	e125      	b.n	1c694 <net_6lo_compress+0x438>
	if (net_is_ipv6_ll_addr(&ipv6->dst) &&
   1c448:	8b2a      	ldrh	r2, [r5, #24]
   1c44a:	f248 03fe 	movw	r3, #33022	; 0x80fe
   1c44e:	429a      	cmp	r2, r3
   1c450:	f040 8090 	bne.w	1c574 <net_6lo_compress+0x318>
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   1c454:	8b6b      	ldrh	r3, [r5, #26]
   1c456:	2b00      	cmp	r3, #0
   1c458:	f040 808c 	bne.w	1c574 <net_6lo_compress+0x318>
		 (UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00));
   1c45c:	69eb      	ldr	r3, [r5, #28]
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   1c45e:	2b00      	cmp	r3, #0
   1c460:	f040 8088 	bne.w	1c574 <net_6lo_compress+0x318>
	return ((UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0xFF)) &&
   1c464:	6a2b      	ldr	r3, [r5, #32]
   1c466:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   1c46a:	f040 8159 	bne.w	1c720 <net_6lo_compress+0x4c4>
   1c46e:	8cab      	ldrh	r3, [r5, #36]	; 0x24
   1c470:	2bfe      	cmp	r3, #254	; 0xfe
   1c472:	f040 8155 	bne.w	1c720 <net_6lo_compress+0x4c4>
			IPHC[1] |= NET_6LO_IPHC_DAM_10;
   1c476:	68b2      	ldr	r2, [r6, #8]
   1c478:	7853      	ldrb	r3, [r2, #1]
   1c47a:	f043 0302 	orr.w	r3, r3, #2
   1c47e:	7053      	strb	r3, [r2, #1]
			memcpy(&IPHC[offset], &ipv6->dst.s6_addr[14], 2);
   1c480:	68b0      	ldr	r0, [r6, #8]
   1c482:	2202      	movs	r2, #2
   1c484:	4420      	add	r0, r4
   1c486:	f105 0126 	add.w	r1, r5, #38	; 0x26
   1c48a:	f7e4 f982 	bl	792 <memcpy>
			offset += 2;
   1c48e:	3402      	adds	r4, #2
   1c490:	e15c      	b.n	1c74c <net_6lo_compress+0x4f0>
				IPHC[1] |= NET_6LO_IPHC_DAM_11;
   1c492:	785a      	ldrb	r2, [r3, #1]
   1c494:	f042 0203 	orr.w	r2, r2, #3
   1c498:	705a      	strb	r2, [r3, #1]
	if (ipv6->nexthdr != IPPROTO_UDP) {
   1c49a:	79ab      	ldrb	r3, [r5, #6]
   1c49c:	2b11      	cmp	r3, #17
   1c49e:	f040 80b0 	bne.w	1c602 <net_6lo_compress+0x3a6>
		udp = net_udp_get_hdr(pkt, &hdr);
   1c4a2:	4669      	mov	r1, sp
   1c4a4:	4638      	mov	r0, r7
   1c4a6:	f004 fb9f 	bl	20be8 <net_udp_get_hdr>
		if (!udp) {
   1c4aa:	4605      	mov	r5, r0
   1c4ac:	2800      	cmp	r0, #0
   1c4ae:	f43f aee0 	beq.w	1c272 <net_6lo_compress+0x16>
		IPHC[offset] = NET_6LO_NHC_UDP_BARE;
   1c4b2:	68b3      	ldr	r3, [r6, #8]
   1c4b4:	22f0      	movs	r2, #240	; 0xf0
   1c4b6:	551a      	strb	r2, [r3, r4]
	if ((((htons(udp->src_port) >> 4) & 0xFFF) ==
   1c4b8:	8802      	ldrh	r2, [r0, #0]
   1c4ba:	f8d6 e008 	ldr.w	lr, [r6, #8]
   1c4be:	0213      	lsls	r3, r2, #8
   1c4c0:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   1c4c4:	b29b      	uxth	r3, r3
   1c4c6:	f640 720b 	movw	r2, #3851	; 0xf0b
   1c4ca:	ea4f 1c13 	mov.w	ip, r3, lsr #4
   1c4ce:	4594      	cmp	ip, r2
   1c4d0:	f104 0001 	add.w	r0, r4, #1
   1c4d4:	886a      	ldrh	r2, [r5, #2]
   1c4d6:	d156      	bne.n	1c586 <net_6lo_compress+0x32a>
	    (((htons(udp->dst_port) >> 4) & 0xFFF) ==
   1c4d8:	0211      	lsls	r1, r2, #8
   1c4da:	ea41 2112 	orr.w	r1, r1, r2, lsr #8
	    NET_6LO_NHC_UDP_4_BIT_PORT) &&
   1c4de:	f3c1 110b 	ubfx	r1, r1, #4, #12
   1c4e2:	4561      	cmp	r1, ip
   1c4e4:	d14f      	bne.n	1c586 <net_6lo_compress+0x32a>
		IPHC[offset] |= NET_6LO_NHC_UDP_PORT_11;
   1c4e6:	f81e 3004 	ldrb.w	r3, [lr, r4]
   1c4ea:	f043 0303 	orr.w	r3, r3, #3
   1c4ee:	f80e 3004 	strb.w	r3, [lr, r4]
		tmp = (u8_t)(htons(udp->src_port));
   1c4f2:	882b      	ldrh	r3, [r5, #0]
   1c4f4:	0a1a      	lsrs	r2, r3, #8
		tmp |= (((u8_t)(htons(udp->dst_port))) & 0x0F);
   1c4f6:	886b      	ldrh	r3, [r5, #2]
   1c4f8:	f3c3 2303 	ubfx	r3, r3, #8, #4
   1c4fc:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
		IPHC[offset++] = tmp;
   1c500:	b2c0      	uxtb	r0, r0
   1c502:	68b2      	ldr	r2, [r6, #8]
   1c504:	3402      	adds	r4, #2
   1c506:	5413      	strb	r3, [r2, r0]
   1c508:	fa5f f884 	uxtb.w	r8, r4
	memcpy(&IPHC[offset], &udp->chksum, 2);
   1c50c:	68b0      	ldr	r0, [r6, #8]
   1c50e:	1da9      	adds	r1, r5, #6
   1c510:	2202      	movs	r2, #2
   1c512:	4440      	add	r0, r8
   1c514:	f7e4 f93d 	bl	792 <memcpy>
		net_udp_set_hdr(pkt, udp);
   1c518:	4629      	mov	r1, r5
   1c51a:	4638      	mov	r0, r7
   1c51c:	f004 fb9d 	bl	20c5a <net_udp_set_hdr>
	offset += 2;
   1c520:	f108 0402 	add.w	r4, r8, #2
   1c524:	b2e4      	uxtb	r4, r4
		compressed += NET_UDPH_LEN;
   1c526:	2530      	movs	r5, #48	; 0x30
	net_buf_add(frag, offset);
   1c528:	f106 0808 	add.w	r8, r6, #8
   1c52c:	4621      	mov	r1, r4
   1c52e:	4640      	mov	r0, r8
   1c530:	f7fc ff3c 	bl	193ac <net_buf_simple_add>
	memcpy(&IPHC[offset], pkt->frags->data + compressed,
   1c534:	68bb      	ldr	r3, [r7, #8]
   1c536:	68b0      	ldr	r0, [r6, #8]
	       pkt->frags->len - compressed);
   1c538:	899a      	ldrh	r2, [r3, #12]
	memcpy(&IPHC[offset], pkt->frags->data + compressed,
   1c53a:	6899      	ldr	r1, [r3, #8]
   1c53c:	1b52      	subs	r2, r2, r5
   1c53e:	4429      	add	r1, r5
   1c540:	4420      	add	r0, r4
   1c542:	f7e4 f926 	bl	792 <memcpy>
	net_buf_add(frag, pkt->frags->len - compressed);
   1c546:	68bb      	ldr	r3, [r7, #8]
   1c548:	8999      	ldrh	r1, [r3, #12]
   1c54a:	4640      	mov	r0, r8
   1c54c:	1b49      	subs	r1, r1, r5
   1c54e:	f7fc ff2d 	bl	193ac <net_buf_simple_add>
	net_pkt_frag_del(pkt, NULL, pkt->frags);
   1c552:	68ba      	ldr	r2, [r7, #8]
   1c554:	2100      	movs	r1, #0
   1c556:	4638      	mov	r0, r7
   1c558:	f7ff f9b0 	bl	1b8bc <net_pkt_frag_del>
	net_pkt_frag_insert(pkt, frag);
   1c55c:	4638      	mov	r0, r7
   1c55e:	4631      	mov	r1, r6
   1c560:	f7ff f9d6 	bl	1b910 <net_pkt_frag_insert>
	net_pkt_compact(pkt);
   1c564:	4638      	mov	r0, r7
   1c566:	f7ff fa40 	bl	1b9ea <net_pkt_compact>
	if (fragment) {
   1c56a:	f1b9 0f00 	cmp.w	r9, #0
   1c56e:	d14a      	bne.n	1c606 <net_6lo_compress+0x3aa>
	return true;
   1c570:	2001      	movs	r0, #1
   1c572:	e67f      	b.n	1c274 <net_6lo_compress+0x18>
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[0], 16);
   1c574:	68b0      	ldr	r0, [r6, #8]
   1c576:	4420      	add	r0, r4
   1c578:	2210      	movs	r2, #16
   1c57a:	f105 0118 	add.w	r1, r5, #24
   1c57e:	f7e4 f908 	bl	792 <memcpy>
		offset += 16;
   1c582:	3410      	adds	r4, #16
   1c584:	e0e2      	b.n	1c74c <net_6lo_compress+0x4f0>
	} else if (((htons(udp->dst_port) >> 8) & 0xFF) ==
   1c586:	b2d2      	uxtb	r2, r2
   1c588:	2af0      	cmp	r2, #240	; 0xf0
   1c58a:	d117      	bne.n	1c5bc <net_6lo_compress+0x360>
		IPHC[offset] |= NET_6LO_NHC_UDP_PORT_01;
   1c58c:	f81e 3004 	ldrb.w	r3, [lr, r4]
   1c590:	f043 0301 	orr.w	r3, r3, #1
   1c594:	f80e 3004 	strb.w	r3, [lr, r4]
		memcpy(&IPHC[offset], &udp->src_port, 2);
   1c598:	68b3      	ldr	r3, [r6, #8]
   1c59a:	2202      	movs	r2, #2
   1c59c:	fa53 f080 	uxtab	r0, r3, r0
   1c5a0:	4629      	mov	r1, r5
   1c5a2:	f7e4 f8f6 	bl	792 <memcpy>
		IPHC[offset++] = (u8_t)(htons(udp->dst_port));
   1c5a6:	f104 0804 	add.w	r8, r4, #4
   1c5aa:	886b      	ldrh	r3, [r5, #2]
   1c5ac:	68b2      	ldr	r2, [r6, #8]
		offset += 2;
   1c5ae:	3403      	adds	r4, #3
		IPHC[offset++] = (u8_t)(htons(udp->dst_port));
   1c5b0:	b2e4      	uxtb	r4, r4
   1c5b2:	0a1b      	lsrs	r3, r3, #8
   1c5b4:	fa5f f888 	uxtb.w	r8, r8
   1c5b8:	5513      	strb	r3, [r2, r4]
   1c5ba:	e7a7      	b.n	1c50c <net_6lo_compress+0x2b0>
	} else if (((htons(udp->src_port) >> 8) & 0xFF) ==
   1c5bc:	0a1b      	lsrs	r3, r3, #8
   1c5be:	2bf0      	cmp	r3, #240	; 0xf0
   1c5c0:	d117      	bne.n	1c5f2 <net_6lo_compress+0x396>
		IPHC[offset] |= NET_6LO_NHC_UDP_PORT_10;
   1c5c2:	f81e 3004 	ldrb.w	r3, [lr, r4]
   1c5c6:	f043 0302 	orr.w	r3, r3, #2
   1c5ca:	f80e 3004 	strb.w	r3, [lr, r4]
		IPHC[offset++] = (u8_t)(htons(udp->src_port));
   1c5ce:	4629      	mov	r1, r5
   1c5d0:	68b2      	ldr	r2, [r6, #8]
   1c5d2:	f831 3b02 	ldrh.w	r3, [r1], #2
   1c5d6:	b2c0      	uxtb	r0, r0
   1c5d8:	0a1b      	lsrs	r3, r3, #8
   1c5da:	5413      	strb	r3, [r2, r0]
		memcpy(&IPHC[offset], &udp->dst_port, 2);
   1c5dc:	68b3      	ldr	r3, [r6, #8]
		IPHC[offset++] = (u8_t)(htons(udp->src_port));
   1c5de:	1ca0      	adds	r0, r4, #2
		memcpy(&IPHC[offset], &udp->dst_port, 2);
   1c5e0:	2202      	movs	r2, #2
   1c5e2:	fa53 f080 	uxtab	r0, r3, r0
   1c5e6:	f7e4 f8d4 	bl	792 <memcpy>
		offset += 2;
   1c5ea:	3404      	adds	r4, #4
		offset += 4;
   1c5ec:	fa5f f884 	uxtb.w	r8, r4
   1c5f0:	e78c      	b.n	1c50c <net_6lo_compress+0x2b0>
		memcpy(&IPHC[offset], &udp->src_port, 4);
   1c5f2:	2204      	movs	r2, #4
   1c5f4:	4629      	mov	r1, r5
   1c5f6:	fa5e f080 	uxtab	r0, lr, r0
   1c5fa:	f7e4 f8ca 	bl	792 <memcpy>
		offset += 4;
   1c5fe:	3405      	adds	r4, #5
   1c600:	e7f4      	b.n	1c5ec <net_6lo_compress+0x390>
	compressed = NET_IPV6H_LEN;
   1c602:	2528      	movs	r5, #40	; 0x28
   1c604:	e790      	b.n	1c528 <net_6lo_compress+0x2cc>
		return fragment(pkt, compressed - offset);
   1c606:	1b29      	subs	r1, r5, r4
		return fragment(pkt, -1);
   1c608:	4638      	mov	r0, r7
   1c60a:	47c8      	blx	r9
   1c60c:	e632      	b.n	1c274 <net_6lo_compress+0x18>
	frag = net_pkt_get_frag(pkt, K_FOREVER);
   1c60e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1c612:	f7ff f8d7 	bl	1b7c4 <net_pkt_get_frag>
	if (!frag) {
   1c616:	4604      	mov	r4, r0
   1c618:	2800      	cmp	r0, #0
   1c61a:	f43f ae2a 	beq.w	1c272 <net_6lo_compress+0x16>
	frag->data[0] = NET_6LO_DISPATCH_IPV6;
   1c61e:	f850 3f08 	ldr.w	r3, [r0, #8]!
   1c622:	2241      	movs	r2, #65	; 0x41
   1c624:	701a      	strb	r2, [r3, #0]
	net_buf_add(frag, 1);
   1c626:	2101      	movs	r1, #1
   1c628:	f7fc fec0 	bl	193ac <net_buf_simple_add>
	net_pkt_frag_insert(pkt, frag);
   1c62c:	4638      	mov	r0, r7
   1c62e:	4621      	mov	r1, r4
   1c630:	f7ff f96e 	bl	1b910 <net_pkt_frag_insert>
	net_pkt_compact(pkt);
   1c634:	4638      	mov	r0, r7
   1c636:	f7ff f9d8 	bl	1b9ea <net_pkt_compact>
	if (fragment) {
   1c63a:	f1b9 0f00 	cmp.w	r9, #0
   1c63e:	d097      	beq.n	1c570 <net_6lo_compress+0x314>
		return fragment(pkt, -1);
   1c640:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1c644:	e7e0      	b.n	1c608 <net_6lo_compress+0x3ac>
	if (net_is_ipv6_ll_addr(&ipv6->src) &&
   1c646:	892a      	ldrh	r2, [r5, #8]
   1c648:	f248 03fe 	movw	r3, #33022	; 0x80fe
   1c64c:	429a      	cmp	r2, r3
   1c64e:	f47f aef3 	bne.w	1c438 <net_6lo_compress+0x1dc>
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   1c652:	896b      	ldrh	r3, [r5, #10]
   1c654:	2b00      	cmp	r3, #0
   1c656:	f47f aeef 	bne.w	1c438 <net_6lo_compress+0x1dc>
		 (UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00));
   1c65a:	68eb      	ldr	r3, [r5, #12]
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   1c65c:	2b00      	cmp	r3, #0
   1c65e:	f47f aeeb 	bne.w	1c438 <net_6lo_compress+0x1dc>
	return ((UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0xFF)) &&
   1c662:	692b      	ldr	r3, [r5, #16]
   1c664:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   1c668:	f43f aea5 	beq.w	1c3b6 <net_6lo_compress+0x15a>
			if (net_ipv6_addr_based_on_ll(&ipv6->src,
   1c66c:	f107 0120 	add.w	r1, r7, #32
   1c670:	f7ff fd95 	bl	1c19e <net_ipv6_addr_based_on_ll>
   1c674:	68b3      	ldr	r3, [r6, #8]
   1c676:	2800      	cmp	r0, #0
   1c678:	f47f aeaf 	bne.w	1c3da <net_6lo_compress+0x17e>
				IPHC[1] |= NET_6LO_IPHC_SAM_01;
   1c67c:	785a      	ldrb	r2, [r3, #1]
   1c67e:	f042 0210 	orr.w	r2, r2, #16
   1c682:	705a      	strb	r2, [r3, #1]
				memcpy(&IPHC[offset], &ipv6->src.s6_addr[8], 8);
   1c684:	68b0      	ldr	r0, [r6, #8]
   1c686:	2208      	movs	r2, #8
   1c688:	4420      	add	r0, r4
   1c68a:	f105 0110 	add.w	r1, r5, #16
   1c68e:	f7e4 f880 	bl	792 <memcpy>
				offset += 8;
   1c692:	3408      	adds	r4, #8
		offset += sizeof(struct in6_addr);
   1c694:	b2e4      	uxtb	r4, r4
	if (!offset) {
   1c696:	2c00      	cmp	r4, #0
   1c698:	f47f aea3 	bne.w	1c3e2 <net_6lo_compress+0x186>
		net_pkt_frag_unref(frag);
   1c69c:	4630      	mov	r0, r6
   1c69e:	f7ff f8f2 	bl	1b886 <net_pkt_frag_unref>
   1c6a2:	e5e6      	b.n	1c272 <net_6lo_compress+0x16>
	return ((UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   1c6a4:	69eb      	ldr	r3, [r5, #28]
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   1c6a6:	2b00      	cmp	r3, #0
   1c6a8:	f47f af65 	bne.w	1c576 <net_6lo_compress+0x31a>
   1c6ac:	6a2b      	ldr	r3, [r5, #32]
	return ((UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   1c6ae:	b913      	cbnz	r3, 1c6b6 <net_6lo_compress+0x45a>
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   1c6b0:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   1c6b4:	b1f3      	cbz	r3, 1c6f4 <net_6lo_compress+0x498>
	return ((UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   1c6b6:	8c2b      	ldrh	r3, [r5, #32]
   1c6b8:	2b00      	cmp	r3, #0
   1c6ba:	f47f af5c 	bne.w	1c576 <net_6lo_compress+0x31a>
		 (UNALIGNED_GET(&addr->s6_addr16[4]) == 0x00) &&
   1c6be:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
   1c6c2:	2b00      	cmp	r3, #0
   1c6c4:	f47f af57 	bne.w	1c576 <net_6lo_compress+0x31a>
		IPHC[1] |= NET_6LO_IPHC_DAM_01;
   1c6c8:	7843      	ldrb	r3, [r0, #1]
   1c6ca:	f043 0301 	orr.w	r3, r3, #1
   1c6ce:	7043      	strb	r3, [r0, #1]
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[1], 1);
   1c6d0:	68b0      	ldr	r0, [r6, #8]
   1c6d2:	2201      	movs	r2, #1
   1c6d4:	f105 0119 	add.w	r1, r5, #25
   1c6d8:	4420      	add	r0, r4
   1c6da:	f7e4 f85a 	bl	792 <memcpy>
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[11], 5);
   1c6de:	68b3      	ldr	r3, [r6, #8]
		offset++;
   1c6e0:	1c60      	adds	r0, r4, #1
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[11], 5);
   1c6e2:	2205      	movs	r2, #5
   1c6e4:	f105 0123 	add.w	r1, r5, #35	; 0x23
   1c6e8:	fa53 f080 	uxtab	r0, r3, r0
   1c6ec:	f7e4 f851 	bl	792 <memcpy>
		offset += 5;
   1c6f0:	3406      	adds	r4, #6
   1c6f2:	e02b      	b.n	1c74c <net_6lo_compress+0x4f0>
		IPHC[1] |= NET_6LO_IPHC_DAM_10;
   1c6f4:	7843      	ldrb	r3, [r0, #1]
   1c6f6:	f043 0302 	orr.w	r3, r3, #2
   1c6fa:	7043      	strb	r3, [r0, #1]
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[1], 1);
   1c6fc:	68b0      	ldr	r0, [r6, #8]
   1c6fe:	2201      	movs	r2, #1
   1c700:	f105 0119 	add.w	r1, r5, #25
   1c704:	4420      	add	r0, r4
   1c706:	f7e4 f844 	bl	792 <memcpy>
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[13], 3);
   1c70a:	68b3      	ldr	r3, [r6, #8]
		offset++;
   1c70c:	1c60      	adds	r0, r4, #1
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[13], 3);
   1c70e:	2203      	movs	r2, #3
   1c710:	f105 0125 	add.w	r1, r5, #37	; 0x25
   1c714:	fa53 f080 	uxtab	r0, r3, r0
   1c718:	f7e4 f83b 	bl	792 <memcpy>
		offset += 3;
   1c71c:	3404      	adds	r4, #4
   1c71e:	e015      	b.n	1c74c <net_6lo_compress+0x4f0>
			if (net_ipv6_addr_based_on_ll(&ipv6->dst,
   1c720:	f107 0128 	add.w	r1, r7, #40	; 0x28
   1c724:	f105 0018 	add.w	r0, r5, #24
   1c728:	f7ff fd39 	bl	1c19e <net_ipv6_addr_based_on_ll>
   1c72c:	68b3      	ldr	r3, [r6, #8]
   1c72e:	2800      	cmp	r0, #0
   1c730:	f47f aeaf 	bne.w	1c492 <net_6lo_compress+0x236>
				IPHC[1] |= NET_6LO_IPHC_DAM_01;
   1c734:	785a      	ldrb	r2, [r3, #1]
   1c736:	f042 0201 	orr.w	r2, r2, #1
   1c73a:	705a      	strb	r2, [r3, #1]
				memcpy(&IPHC[offset], &ipv6->dst.s6_addr[8], 8);
   1c73c:	68b0      	ldr	r0, [r6, #8]
   1c73e:	2208      	movs	r2, #8
   1c740:	4420      	add	r0, r4
   1c742:	f105 0120 	add.w	r1, r5, #32
   1c746:	f7e4 f824 	bl	792 <memcpy>
				offset += 8;
   1c74a:	3408      	adds	r4, #8
		offset += 16;
   1c74c:	b2e4      	uxtb	r4, r4
	if (!offset) {
   1c74e:	2c00      	cmp	r4, #0
   1c750:	f47f aea3 	bne.w	1c49a <net_6lo_compress+0x23e>
   1c754:	e7a2      	b.n	1c69c <net_6lo_compress+0x440>

0001c756 <net_6lo_uncompress>:

bool net_6lo_uncompress(struct net_pkt *pkt)
{
   1c756:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NET_ASSERT(pkt && pkt->frags);

	if ((pkt->frags->data[0] & NET_6LO_DISPATCH_IPHC) ==
   1c75a:	6884      	ldr	r4, [r0, #8]
   1c75c:	68a3      	ldr	r3, [r4, #8]
   1c75e:	781a      	ldrb	r2, [r3, #0]
   1c760:	f002 0860 	and.w	r8, r2, #96	; 0x60
   1c764:	f1b8 0f60 	cmp.w	r8, #96	; 0x60
{
   1c768:	4606      	mov	r6, r0
	if ((pkt->frags->data[0] & NET_6LO_DISPATCH_IPHC) ==
   1c76a:	f040 81f8 	bne.w	1cb5e <net_6lo_uncompress+0x408>
	if (CIPHC[1] & NET_6LO_IPHC_CID_1) {
   1c76e:	f993 3001 	ldrsb.w	r3, [r3, #1]
   1c772:	2b00      	cmp	r3, #0
   1c774:	da03      	bge.n	1c77e <net_6lo_uncompress+0x28>
	return false;
   1c776:	2000      	movs	r0, #0
	}

	NET_DBG("pkt %p is not compressed", pkt);

	return true;
}
   1c778:	b003      	add	sp, #12
   1c77a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_pkt_get_frag(pkt, NET_6LO_RX_PKT_TIMEOUT);
   1c77e:	2164      	movs	r1, #100	; 0x64
   1c780:	f7ff f820 	bl	1b7c4 <net_pkt_get_frag>
	if (!frag) {
   1c784:	4607      	mov	r7, r0
   1c786:	2800      	cmp	r0, #0
   1c788:	d0f5      	beq.n	1c776 <net_6lo_uncompress+0x20>
	ipv6 = (struct net_ipv6_hdr *)(frag->data);
   1c78a:	6885      	ldr	r5, [r0, #8]
	pkt->ip_hdr_len = len;
   1c78c:	2328      	movs	r3, #40	; 0x28
	ipv6->vtc = 0x60;
   1c78e:	f885 8000 	strb.w	r8, [r5]
   1c792:	f886 3035 	strb.w	r3, [r6, #53]	; 0x35
	switch (CIPHC[0] & NET_6LO_IPHC_TF_11) {
   1c796:	68b3      	ldr	r3, [r6, #8]
   1c798:	6899      	ldr	r1, [r3, #8]
   1c79a:	780b      	ldrb	r3, [r1, #0]
   1c79c:	f003 0318 	and.w	r3, r3, #24
   1c7a0:	2b08      	cmp	r3, #8
   1c7a2:	d054      	beq.n	1c84e <net_6lo_uncompress+0xf8>
   1c7a4:	d802      	bhi.n	1c7ac <net_6lo_uncompress+0x56>
   1c7a6:	b153      	cbz	r3, 1c7be <net_6lo_uncompress+0x68>
   1c7a8:	2402      	movs	r4, #2
   1c7aa:	e01d      	b.n	1c7e8 <net_6lo_uncompress+0x92>
   1c7ac:	2b10      	cmp	r3, #16
   1c7ae:	d05c      	beq.n	1c86a <net_6lo_uncompress+0x114>
   1c7b0:	2b18      	cmp	r3, #24
   1c7b2:	d1f9      	bne.n	1c7a8 <net_6lo_uncompress+0x52>
		ipv6->tcflow = 0;
   1c7b4:	2300      	movs	r3, #0
   1c7b6:	706b      	strb	r3, [r5, #1]
		ipv6->flow = 0;
   1c7b8:	70ab      	strb	r3, [r5, #2]
   1c7ba:	70eb      	strb	r3, [r5, #3]
   1c7bc:	e7f4      	b.n	1c7a8 <net_6lo_uncompress+0x52>
		tcl = CIPHC[offset++];
   1c7be:	788a      	ldrb	r2, [r1, #2]
		tcl = (tcl >> 6) | (tcl << 2);
   1c7c0:	0093      	lsls	r3, r2, #2
   1c7c2:	ea43 1392 	orr.w	r3, r3, r2, lsr #6
		ipv6->vtc |= ((tcl & 0xF0) >> 4);
   1c7c6:	782a      	ldrb	r2, [r5, #0]
		tcl = (tcl >> 6) | (tcl << 2);
   1c7c8:	b2db      	uxtb	r3, r3
		ipv6->vtc |= ((tcl & 0xF0) >> 4);
   1c7ca:	ea42 1213 	orr.w	r2, r2, r3, lsr #4
   1c7ce:	702a      	strb	r2, [r5, #0]
		ipv6->tcflow = ((tcl & 0x0F) << 4) | (CIPHC[offset++] & 0x0F);
   1c7d0:	78ca      	ldrb	r2, [r1, #3]
   1c7d2:	f002 020f 	and.w	r2, r2, #15
   1c7d6:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
		memcpy(&ipv6->flow, &CIPHC[offset], 2);
   1c7da:	2202      	movs	r2, #2
		ipv6->tcflow = ((tcl & 0x0F) << 4) | (CIPHC[offset++] & 0x0F);
   1c7dc:	706b      	strb	r3, [r5, #1]
		memcpy(&ipv6->flow, &CIPHC[offset], 2);
   1c7de:	3104      	adds	r1, #4
   1c7e0:	18a8      	adds	r0, r5, r2
   1c7e2:	f7e3 ffd6 	bl	792 <memcpy>
		offset += 2;
   1c7e6:	2406      	movs	r4, #6
	if (!(CIPHC[0] & NET_6LO_IPHC_NH_1)) {
   1c7e8:	68b3      	ldr	r3, [r6, #8]
   1c7ea:	689a      	ldr	r2, [r3, #8]
   1c7ec:	7813      	ldrb	r3, [r2, #0]
   1c7ee:	075b      	lsls	r3, r3, #29
		ipv6->nexthdr = CIPHC[offset];
   1c7f0:	bf5c      	itt	pl
   1c7f2:	5d13      	ldrbpl	r3, [r2, r4]
   1c7f4:	71ab      	strbpl	r3, [r5, #6]
	switch (CIPHC[0] & NET_6LO_IPHC_HLIM255) {
   1c7f6:	7813      	ldrb	r3, [r2, #0]
		offset++;
   1c7f8:	bf58      	it	pl
   1c7fa:	3401      	addpl	r4, #1
	switch (CIPHC[0] & NET_6LO_IPHC_HLIM255) {
   1c7fc:	f003 0303 	and.w	r3, r3, #3
		offset++;
   1c800:	bf58      	it	pl
   1c802:	b2e4      	uxtbpl	r4, r4
	switch (CIPHC[0] & NET_6LO_IPHC_HLIM255) {
   1c804:	2b02      	cmp	r3, #2
   1c806:	d040      	beq.n	1c88a <net_6lo_uncompress+0x134>
   1c808:	2b03      	cmp	r3, #3
   1c80a:	d041      	beq.n	1c890 <net_6lo_uncompress+0x13a>
   1c80c:	2b01      	cmp	r3, #1
   1c80e:	d03d      	beq.n	1c88c <net_6lo_uncompress+0x136>
		ipv6->hop_limit = CIPHC[offset++];
   1c810:	5d12      	ldrb	r2, [r2, r4]
   1c812:	71ea      	strb	r2, [r5, #7]
   1c814:	1c63      	adds	r3, r4, #1
   1c816:	b2dc      	uxtb	r4, r3
	memset(&ipv6->src.s6_addr[0], 0, 16);
   1c818:	f105 0908 	add.w	r9, r5, #8
   1c81c:	2210      	movs	r2, #16
   1c81e:	2100      	movs	r1, #0
   1c820:	4648      	mov	r0, r9
	memset(&ipv6->dst.s6_addr[0], 0, 16);
   1c822:	f105 0818 	add.w	r8, r5, #24
	memset(&ipv6->src.s6_addr[0], 0, 16);
   1c826:	f7e3 ffe0 	bl	7ea <memset>
	memset(&ipv6->dst.s6_addr[0], 0, 16);
   1c82a:	2100      	movs	r1, #0
   1c82c:	2210      	movs	r2, #16
   1c82e:	4640      	mov	r0, r8
   1c830:	f7e3 ffdb 	bl	7ea <memset>
	if (CIPHC[1] & NET_6LO_IPHC_SAC_1) {
   1c834:	68b3      	ldr	r3, [r6, #8]
   1c836:	6899      	ldr	r1, [r3, #8]
   1c838:	784b      	ldrb	r3, [r1, #1]
   1c83a:	f013 0f40 	tst.w	r3, #64	; 0x40
   1c83e:	f003 0330 	and.w	r3, r3, #48	; 0x30
   1c842:	d027      	beq.n	1c894 <net_6lo_uncompress+0x13e>
		if ((CIPHC[1] & NET_6LO_IPHC_SAM_11) == NET_6LO_IPHC_SAM_00) {
   1c844:	b35b      	cbz	r3, 1c89e <net_6lo_uncompress+0x148>
	net_pkt_frag_unref(frag);
   1c846:	4638      	mov	r0, r7
   1c848:	f7ff f81d 	bl	1b886 <net_pkt_frag_unref>
   1c84c:	e793      	b.n	1c776 <net_6lo_uncompress+0x20>
		tcl = ((CIPHC[offset] & 0xF0) >> 6);
   1c84e:	788b      	ldrb	r3, [r1, #2]
		ipv6->tcflow = ((tcl & 0x0F) << 4) | (CIPHC[offset++] & 0x0F);
   1c850:	099a      	lsrs	r2, r3, #6
   1c852:	f003 030f 	and.w	r3, r3, #15
   1c856:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
		memcpy(&ipv6->flow, &CIPHC[offset], 2);
   1c85a:	2202      	movs	r2, #2
		ipv6->tcflow = ((tcl & 0x0F) << 4) | (CIPHC[offset++] & 0x0F);
   1c85c:	706b      	strb	r3, [r5, #1]
		memcpy(&ipv6->flow, &CIPHC[offset], 2);
   1c85e:	3103      	adds	r1, #3
   1c860:	18a8      	adds	r0, r5, r2
   1c862:	f7e3 ff96 	bl	792 <memcpy>
		offset += 2;
   1c866:	2405      	movs	r4, #5
   1c868:	e7be      	b.n	1c7e8 <net_6lo_uncompress+0x92>
		tcl = CIPHC[offset];
   1c86a:	788a      	ldrb	r2, [r1, #2]
		tcl = (tcl >> 6) | (tcl << 2);
   1c86c:	0093      	lsls	r3, r2, #2
   1c86e:	ea43 1392 	orr.w	r3, r3, r2, lsr #6
		ipv6->vtc |= ((tcl & 0xF0) >> 4);
   1c872:	782a      	ldrb	r2, [r5, #0]
		tcl = (tcl >> 6) | (tcl << 2);
   1c874:	b2db      	uxtb	r3, r3
		ipv6->vtc |= ((tcl & 0xF0) >> 4);
   1c876:	ea42 1213 	orr.w	r2, r2, r3, lsr #4
		ipv6->tcflow = (tcl & 0x0F) << 4;
   1c87a:	011b      	lsls	r3, r3, #4
   1c87c:	706b      	strb	r3, [r5, #1]
		ipv6->flow = 0;
   1c87e:	2300      	movs	r3, #0
		ipv6->vtc |= ((tcl & 0xF0) >> 4);
   1c880:	702a      	strb	r2, [r5, #0]
		ipv6->flow = 0;
   1c882:	70ab      	strb	r3, [r5, #2]
   1c884:	70eb      	strb	r3, [r5, #3]
		offset++;
   1c886:	2403      	movs	r4, #3
   1c888:	e7ae      	b.n	1c7e8 <net_6lo_uncompress+0x92>
		ipv6->hop_limit = 64;
   1c88a:	2340      	movs	r3, #64	; 0x40
		ipv6->hop_limit = 255;
   1c88c:	71eb      	strb	r3, [r5, #7]
   1c88e:	e7c3      	b.n	1c818 <net_6lo_uncompress+0xc2>
   1c890:	23ff      	movs	r3, #255	; 0xff
   1c892:	e7fb      	b.n	1c88c <net_6lo_uncompress+0x136>
	switch (CIPHC[1] & NET_6LO_IPHC_SAM_11) {
   1c894:	b2db      	uxtb	r3, r3
   1c896:	2b10      	cmp	r3, #16
   1c898:	d02b      	beq.n	1c8f2 <net_6lo_uncompress+0x19c>
   1c89a:	d818      	bhi.n	1c8ce <net_6lo_uncompress+0x178>
   1c89c:	b30b      	cbz	r3, 1c8e2 <net_6lo_uncompress+0x18c>
	if (CIPHC[1] & NET_6LO_IPHC_M_1) {
   1c89e:	68b3      	ldr	r3, [r6, #8]
   1c8a0:	6899      	ldr	r1, [r3, #8]
   1c8a2:	784a      	ldrb	r2, [r1, #1]
   1c8a4:	0710      	lsls	r0, r2, #28
   1c8a6:	f140 80e4 	bpl.w	1ca72 <net_6lo_uncompress+0x31c>
	if (CIPHC[1] & NET_6LO_IPHC_DAC_1) {
   1c8aa:	0753      	lsls	r3, r2, #29
   1c8ac:	f100 810d 	bmi.w	1caca <net_6lo_uncompress+0x374>
	switch (CIPHC[1] & NET_6LO_IPHC_DAM_11) {
   1c8b0:	f002 0203 	and.w	r2, r2, #3
   1c8b4:	2a02      	cmp	r2, #2
   1c8b6:	d046      	beq.n	1c946 <net_6lo_uncompress+0x1f0>
   1c8b8:	2a03      	cmp	r2, #3
   1c8ba:	d052      	beq.n	1c962 <net_6lo_uncompress+0x20c>
   1c8bc:	2a01      	cmp	r2, #1
   1c8be:	d033      	beq.n	1c928 <net_6lo_uncompress+0x1d2>
		memcpy(&ipv6->dst.s6_addr[0], &CIPHC[offset], 16);
   1c8c0:	2210      	movs	r2, #16
   1c8c2:	4421      	add	r1, r4
		memcpy(&ipv6->dst.s6_addr[0], &CIPHC[offset], 16);
   1c8c4:	4640      	mov	r0, r8
   1c8c6:	f7e3 ff64 	bl	792 <memcpy>
		offset += 16;
   1c8ca:	3410      	adds	r4, #16
   1c8cc:	e039      	b.n	1c942 <net_6lo_uncompress+0x1ec>
	switch (CIPHC[1] & NET_6LO_IPHC_SAM_11) {
   1c8ce:	2b20      	cmp	r3, #32
   1c8d0:	d01b      	beq.n	1c90a <net_6lo_uncompress+0x1b4>
   1c8d2:	2b30      	cmp	r3, #48	; 0x30
   1c8d4:	d1e3      	bne.n	1c89e <net_6lo_uncompress+0x148>
		net_ipv6_addr_create_iid(&ipv6->src, net_pkt_ll_src(pkt));
   1c8d6:	f106 0120 	add.w	r1, r6, #32
   1c8da:	4648      	mov	r0, r9
   1c8dc:	f7ff fc1e 	bl	1c11c <net_ipv6_addr_create_iid>
   1c8e0:	e7dd      	b.n	1c89e <net_6lo_uncompress+0x148>
		memcpy(ipv6->src.s6_addr, &CIPHC[offset], 16);
   1c8e2:	4421      	add	r1, r4
   1c8e4:	2210      	movs	r2, #16
   1c8e6:	4648      	mov	r0, r9
   1c8e8:	f7e3 ff53 	bl	792 <memcpy>
		offset += 16;
   1c8ec:	3410      	adds	r4, #16
		offset += 2;
   1c8ee:	b2e4      	uxtb	r4, r4
   1c8f0:	e7d5      	b.n	1c89e <net_6lo_uncompress+0x148>
		ipv6->src.s6_addr[0] = 0xFE;
   1c8f2:	23fe      	movs	r3, #254	; 0xfe
   1c8f4:	722b      	strb	r3, [r5, #8]
		ipv6->src.s6_addr[1] = 0x80;
   1c8f6:	2380      	movs	r3, #128	; 0x80
		memcpy(&ipv6->src.s6_addr[8], &CIPHC[offset], 8);
   1c8f8:	4421      	add	r1, r4
		ipv6->src.s6_addr[1] = 0x80;
   1c8fa:	726b      	strb	r3, [r5, #9]
		memcpy(&ipv6->src.s6_addr[8], &CIPHC[offset], 8);
   1c8fc:	2208      	movs	r2, #8
   1c8fe:	f105 0010 	add.w	r0, r5, #16
   1c902:	f7e3 ff46 	bl	792 <memcpy>
		offset += 8;
   1c906:	3408      	adds	r4, #8
   1c908:	e7f1      	b.n	1c8ee <net_6lo_uncompress+0x198>
		ipv6->src.s6_addr[1] = 0x80;
   1c90a:	2280      	movs	r2, #128	; 0x80
		ipv6->src.s6_addr[0] = 0xFE;
   1c90c:	23fe      	movs	r3, #254	; 0xfe
		ipv6->src.s6_addr[1] = 0x80;
   1c90e:	726a      	strb	r2, [r5, #9]
		ipv6->src.s6_addr[11] = 0xFF;
   1c910:	22ff      	movs	r2, #255	; 0xff
   1c912:	74ea      	strb	r2, [r5, #19]
		memcpy(&ipv6->src.s6_addr[14], &CIPHC[offset], 2);
   1c914:	4421      	add	r1, r4
		ipv6->src.s6_addr[0] = 0xFE;
   1c916:	722b      	strb	r3, [r5, #8]
		ipv6->src.s6_addr[12] = 0xFE;
   1c918:	752b      	strb	r3, [r5, #20]
		memcpy(&ipv6->src.s6_addr[14], &CIPHC[offset], 2);
   1c91a:	2202      	movs	r2, #2
   1c91c:	f105 0016 	add.w	r0, r5, #22
   1c920:	f7e3 ff37 	bl	792 <memcpy>
		offset += 2;
   1c924:	3402      	adds	r4, #2
   1c926:	e7e2      	b.n	1c8ee <net_6lo_uncompress+0x198>
		ipv6->dst.s6_addr[0] = 0xFF;
   1c928:	23ff      	movs	r3, #255	; 0xff
   1c92a:	762b      	strb	r3, [r5, #24]
		ipv6->dst.s6_addr[1] = CIPHC[offset++];
   1c92c:	5d0b      	ldrb	r3, [r1, r4]
   1c92e:	766b      	strb	r3, [r5, #25]
   1c930:	1c63      	adds	r3, r4, #1
		memcpy(&ipv6->dst.s6_addr[11], &CIPHC[offset], 5);
   1c932:	2205      	movs	r2, #5
   1c934:	fa51 f183 	uxtab	r1, r1, r3
   1c938:	f105 0023 	add.w	r0, r5, #35	; 0x23
   1c93c:	f7e3 ff29 	bl	792 <memcpy>
		offset += 5;
   1c940:	3406      	adds	r4, #6
		offset += 2;
   1c942:	b2e4      	uxtb	r4, r4
   1c944:	e016      	b.n	1c974 <net_6lo_uncompress+0x21e>
		ipv6->dst.s6_addr[0] = 0xFF;
   1c946:	23ff      	movs	r3, #255	; 0xff
   1c948:	762b      	strb	r3, [r5, #24]
		ipv6->dst.s6_addr[1] = CIPHC[offset++];
   1c94a:	5d0b      	ldrb	r3, [r1, r4]
   1c94c:	766b      	strb	r3, [r5, #25]
   1c94e:	1c63      	adds	r3, r4, #1
		memcpy(&ipv6->dst.s6_addr[13], &CIPHC[offset], 3);
   1c950:	2203      	movs	r2, #3
   1c952:	fa51 f183 	uxtab	r1, r1, r3
   1c956:	f105 0025 	add.w	r0, r5, #37	; 0x25
   1c95a:	f7e3 ff1a 	bl	792 <memcpy>
		offset += 3;
   1c95e:	3404      	adds	r4, #4
   1c960:	e7ef      	b.n	1c942 <net_6lo_uncompress+0x1ec>
		ipv6->dst.s6_addr[0] = 0xFF;
   1c962:	23ff      	movs	r3, #255	; 0xff
   1c964:	762b      	strb	r3, [r5, #24]
		ipv6->dst.s6_addr[1] = 0x02;
   1c966:	2302      	movs	r3, #2
   1c968:	766b      	strb	r3, [r5, #25]
		ipv6->dst.s6_addr[15] = CIPHC[offset++];
   1c96a:	5d0a      	ldrb	r2, [r1, r4]
   1c96c:	f885 2027 	strb.w	r2, [r5, #39]	; 0x27
   1c970:	1c63      	adds	r3, r4, #1
   1c972:	b2dc      	uxtb	r4, r3
	net_buf_add(frag, NET_IPV6H_LEN);
   1c974:	f107 0308 	add.w	r3, r7, #8
   1c978:	2128      	movs	r1, #40	; 0x28
   1c97a:	4618      	mov	r0, r3
   1c97c:	9301      	str	r3, [sp, #4]
   1c97e:	f7fc fd15 	bl	193ac <net_buf_simple_add>
	if (!(CIPHC[0] & NET_6LO_IPHC_NH_1)) {
   1c982:	68b3      	ldr	r3, [r6, #8]
   1c984:	6899      	ldr	r1, [r3, #8]
   1c986:	f891 8000 	ldrb.w	r8, [r1]
   1c98a:	f018 0804 	ands.w	r8, r8, #4
   1c98e:	f000 80d0 	beq.w	1cb32 <net_6lo_uncompress+0x3dc>
	if ((CIPHC[offset] & 0xF0) != NET_6LO_NHC_UDP_BARE) {
   1c992:	5d0b      	ldrb	r3, [r1, r4]
   1c994:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   1c998:	2bf0      	cmp	r3, #240	; 0xf0
   1c99a:	f47f af54 	bne.w	1c846 <net_6lo_uncompress+0xf0>
	ipv6->nexthdr = IPPROTO_UDP;
   1c99e:	2311      	movs	r3, #17
   1c9a0:	71ab      	strb	r3, [r5, #6]
	chksum = CIPHC[offset] & NET_6LO_NHC_UDP_CHKSUM_1;
   1c9a2:	5d0a      	ldrb	r2, [r1, r4]
	udp = (struct net_udp_hdr *)(frag->data + NET_IPV6H_LEN);
   1c9a4:	f8d7 b008 	ldr.w	fp, [r7, #8]
	chksum = CIPHC[offset] & NET_6LO_NHC_UDP_CHKSUM_1;
   1c9a8:	f002 0808 	and.w	r8, r2, #8
	switch (CIPHC[offset++] & NET_6LO_NHC_UDP_PORT_11) {
   1c9ac:	f002 0203 	and.w	r2, r2, #3
   1c9b0:	1c60      	adds	r0, r4, #1
   1c9b2:	2a02      	cmp	r2, #2
	udp = (struct net_udp_hdr *)(frag->data + NET_IPV6H_LEN);
   1c9b4:	f10b 0928 	add.w	r9, fp, #40	; 0x28
	switch (CIPHC[offset++] & NET_6LO_NHC_UDP_PORT_11) {
   1c9b8:	b2c0      	uxtb	r0, r0
   1c9ba:	f000 8097 	beq.w	1caec <net_6lo_uncompress+0x396>
   1c9be:	2a03      	cmp	r2, #3
   1c9c0:	f000 80a2 	beq.w	1cb08 <net_6lo_uncompress+0x3b2>
   1c9c4:	2a01      	cmp	r2, #1
   1c9c6:	4401      	add	r1, r0
   1c9c8:	f104 0a03 	add.w	sl, r4, #3
		memcpy(&udp->src_port, &CIPHC[offset], 2);
   1c9cc:	f04f 0202 	mov.w	r2, #2
   1c9d0:	4648      	mov	r0, r9
	switch (CIPHC[offset++] & NET_6LO_NHC_UDP_PORT_11) {
   1c9d2:	d07c      	beq.n	1cace <net_6lo_uncompress+0x378>
		memcpy(&udp->src_port, &CIPHC[offset], 2);
   1c9d4:	f7e3 fedd 	bl	792 <memcpy>
		memcpy(&udp->dst_port, &CIPHC[offset], 2);
   1c9d8:	68b2      	ldr	r2, [r6, #8]
   1c9da:	6891      	ldr	r1, [r2, #8]
   1c9dc:	f10b 002a 	add.w	r0, fp, #42	; 0x2a
   1c9e0:	2202      	movs	r2, #2
   1c9e2:	fa51 f18a 	uxtab	r1, r1, sl
   1c9e6:	f7e3 fed4 	bl	792 <memcpy>
		offset += 2;
   1c9ea:	3405      	adds	r4, #5
		offset++;
   1c9ec:	b2e4      	uxtb	r4, r4
	if (!chksum) {
   1c9ee:	f1b8 0f00 	cmp.w	r8, #0
   1c9f2:	d109      	bne.n	1ca08 <net_6lo_uncompress+0x2b2>
		memcpy(&udp->chksum, &CIPHC[offset], 2);
   1c9f4:	68b2      	ldr	r2, [r6, #8]
   1c9f6:	6891      	ldr	r1, [r2, #8]
   1c9f8:	f10b 002e 	add.w	r0, fp, #46	; 0x2e
   1c9fc:	4421      	add	r1, r4
   1c9fe:	2202      	movs	r2, #2
   1ca00:	f7e3 fec7 	bl	792 <memcpy>
		offset += 2;
   1ca04:	3402      	adds	r4, #2
   1ca06:	b2e4      	uxtb	r4, r4
	net_buf_add(frag, NET_UDPH_LEN);
   1ca08:	2108      	movs	r1, #8
   1ca0a:	9801      	ldr	r0, [sp, #4]
   1ca0c:	f7fc fcce 	bl	193ac <net_buf_simple_add>
	if (pkt->frags->len < offset) {
   1ca10:	68b3      	ldr	r3, [r6, #8]
   1ca12:	899a      	ldrh	r2, [r3, #12]
   1ca14:	fa1f fa84 	uxth.w	sl, r4
   1ca18:	4552      	cmp	r2, sl
   1ca1a:	f4ff af14 	bcc.w	1c846 <net_6lo_uncompress+0xf0>
	memmove(pkt->frags->data, pkt->frags->data + offset,
   1ca1e:	6898      	ldr	r0, [r3, #8]
   1ca20:	1b12      	subs	r2, r2, r4
   1ca22:	1901      	adds	r1, r0, r4
   1ca24:	f7e3 fe9d 	bl	762 <memmove>
	pkt->frags->len -= offset;
   1ca28:	68b2      	ldr	r2, [r6, #8]
   1ca2a:	8993      	ldrh	r3, [r2, #12]
   1ca2c:	eba3 030a 	sub.w	r3, r3, sl
   1ca30:	8193      	strh	r3, [r2, #12]
   1ca32:	f896 2034 	ldrb.w	r2, [r6, #52]	; 0x34
	if (net_pkt_ll_reserve(pkt)) {
   1ca36:	b13a      	cbz	r2, 1ca48 <net_6lo_uncompress+0x2f2>
	return pkt->frags->data;
   1ca38:	68b3      	ldr	r3, [r6, #8]
	return net_pkt_ip_data(pkt) - net_pkt_ll_reserve(pkt);
   1ca3a:	6899      	ldr	r1, [r3, #8]
		memcpy(frag->data - net_pkt_ll_reserve(pkt),
   1ca3c:	68bb      	ldr	r3, [r7, #8]
   1ca3e:	4250      	negs	r0, r2
   1ca40:	4401      	add	r1, r0
   1ca42:	4418      	add	r0, r3
   1ca44:	f7e3 fea5 	bl	792 <memcpy>
	net_pkt_frag_insert(pkt, frag);
   1ca48:	4639      	mov	r1, r7
   1ca4a:	4630      	mov	r0, r6
   1ca4c:	f7fe ff60 	bl	1b910 <net_pkt_frag_insert>
	net_pkt_compact(pkt);
   1ca50:	4630      	mov	r0, r6
   1ca52:	f7fe ffca 	bl	1b9ea <net_pkt_compact>
   1ca56:	68b2      	ldr	r2, [r6, #8]
	size_t bytes = 0;
   1ca58:	2300      	movs	r3, #0
	while (buf) {
   1ca5a:	2a00      	cmp	r2, #0
   1ca5c:	d16b      	bne.n	1cb36 <net_6lo_uncompress+0x3e0>
	len = net_pkt_get_len(pkt) - NET_IPV6H_LEN;
   1ca5e:	3b28      	subs	r3, #40	; 0x28
	if (ipv6->nexthdr == IPPROTO_UDP && udp) {
   1ca60:	79a9      	ldrb	r1, [r5, #6]
	len = net_pkt_get_len(pkt) - NET_IPV6H_LEN;
   1ca62:	b29b      	uxth	r3, r3
	ipv6->len[0] = len >> 8;
   1ca64:	0a1a      	lsrs	r2, r3, #8
	if (ipv6->nexthdr == IPPROTO_UDP && udp) {
   1ca66:	2911      	cmp	r1, #17
	ipv6->len[0] = len >> 8;
   1ca68:	712a      	strb	r2, [r5, #4]
	ipv6->len[1] = (u8_t)len;
   1ca6a:	716b      	strb	r3, [r5, #5]
	if (ipv6->nexthdr == IPPROTO_UDP && udp) {
   1ca6c:	d067      	beq.n	1cb3e <net_6lo_uncompress+0x3e8>
		return uncompress_ipv6_header(pkt);
   1ca6e:	2001      	movs	r0, #1
   1ca70:	e682      	b.n	1c778 <net_6lo_uncompress+0x22>
	switch (CIPHC[1] & NET_6LO_IPHC_DAM_11) {
   1ca72:	f002 0203 	and.w	r2, r2, #3
   1ca76:	2a02      	cmp	r2, #2
   1ca78:	d011      	beq.n	1ca9e <net_6lo_uncompress+0x348>
   1ca7a:	2a03      	cmp	r2, #3
   1ca7c:	d01f      	beq.n	1cabe <net_6lo_uncompress+0x368>
   1ca7e:	2a01      	cmp	r2, #1
   1ca80:	4421      	add	r1, r4
   1ca82:	d001      	beq.n	1ca88 <net_6lo_uncompress+0x332>
		memcpy(&ipv6->dst.s6_addr[0], &CIPHC[offset], 16);
   1ca84:	2210      	movs	r2, #16
   1ca86:	e71d      	b.n	1c8c4 <net_6lo_uncompress+0x16e>
		ipv6->dst.s6_addr[0] = 0xFE;
   1ca88:	23fe      	movs	r3, #254	; 0xfe
   1ca8a:	762b      	strb	r3, [r5, #24]
		ipv6->dst.s6_addr[1] = 0x80;
   1ca8c:	2380      	movs	r3, #128	; 0x80
   1ca8e:	766b      	strb	r3, [r5, #25]
		memcpy(&ipv6->dst.s6_addr[8], &CIPHC[offset], 8);
   1ca90:	2208      	movs	r2, #8
   1ca92:	f105 0020 	add.w	r0, r5, #32
   1ca96:	f7e3 fe7c 	bl	792 <memcpy>
		offset += 8;
   1ca9a:	3408      	adds	r4, #8
   1ca9c:	e751      	b.n	1c942 <net_6lo_uncompress+0x1ec>
		ipv6->dst.s6_addr[1] = 0x80;
   1ca9e:	2080      	movs	r0, #128	; 0x80
		ipv6->dst.s6_addr[0] = 0xFE;
   1caa0:	23fe      	movs	r3, #254	; 0xfe
		ipv6->dst.s6_addr[1] = 0x80;
   1caa2:	7668      	strb	r0, [r5, #25]
		ipv6->dst.s6_addr[11] = 0xFF;
   1caa4:	20ff      	movs	r0, #255	; 0xff
   1caa6:	f885 0023 	strb.w	r0, [r5, #35]	; 0x23
		memcpy(&ipv6->dst.s6_addr[14], &CIPHC[offset], 2);
   1caaa:	4421      	add	r1, r4
		ipv6->dst.s6_addr[0] = 0xFE;
   1caac:	762b      	strb	r3, [r5, #24]
		ipv6->dst.s6_addr[12] = 0xFE;
   1caae:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
		memcpy(&ipv6->dst.s6_addr[14], &CIPHC[offset], 2);
   1cab2:	f105 0026 	add.w	r0, r5, #38	; 0x26
   1cab6:	f7e3 fe6c 	bl	792 <memcpy>
		offset += 2;
   1caba:	3402      	adds	r4, #2
   1cabc:	e741      	b.n	1c942 <net_6lo_uncompress+0x1ec>
		net_ipv6_addr_create_iid(&ipv6->dst, net_pkt_ll_dst(pkt));
   1cabe:	f106 0128 	add.w	r1, r6, #40	; 0x28
   1cac2:	4640      	mov	r0, r8
   1cac4:	f7ff fb2a 	bl	1c11c <net_ipv6_addr_create_iid>
   1cac8:	e754      	b.n	1c974 <net_6lo_uncompress+0x21e>
		return 0;
   1caca:	2400      	movs	r4, #0
   1cacc:	e752      	b.n	1c974 <net_6lo_uncompress+0x21e>
		memcpy(&udp->src_port, &CIPHC[offset], 2);
   1cace:	f7e3 fe60 	bl	792 <memcpy>
		udp->dst_port = htons(((u16_t)NET_6LO_NHC_UDP_8_BIT_PORT
   1cad2:	68b2      	ldr	r2, [r6, #8]
   1cad4:	fa5f fa8a 	uxtb.w	sl, sl
   1cad8:	6892      	ldr	r2, [r2, #8]
   1cada:	f812 200a 	ldrb.w	r2, [r2, sl]
   1cade:	0212      	lsls	r2, r2, #8
   1cae0:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
   1cae4:	f8ab 202a 	strh.w	r2, [fp, #42]	; 0x2a
		offset += 2;
   1cae8:	3404      	adds	r4, #4
   1caea:	e77f      	b.n	1c9ec <net_6lo_uncompress+0x296>
		udp->src_port = htons(((u16_t)NET_6LO_NHC_UDP_8_BIT_PORT
   1caec:	5c08      	ldrb	r0, [r1, r0]
   1caee:	0200      	lsls	r0, r0, #8
   1caf0:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
   1caf4:	f8ab 0028 	strh.w	r0, [fp, #40]	; 0x28
		offset++;
   1caf8:	1ca0      	adds	r0, r4, #2
		memcpy(&udp->dst_port, &CIPHC[offset], 2);
   1cafa:	fa51 f180 	uxtab	r1, r1, r0
   1cafe:	f10b 002a 	add.w	r0, fp, #42	; 0x2a
   1cb02:	f7e3 fe46 	bl	792 <memcpy>
   1cb06:	e7ef      	b.n	1cae8 <net_6lo_uncompress+0x392>
		udp->src_port = htons((NET_6LO_NHC_UDP_4_BIT_PORT << 4) |
   1cb08:	5c0a      	ldrb	r2, [r1, r0]
   1cb0a:	0912      	lsrs	r2, r2, #4
   1cb0c:	0212      	lsls	r2, r2, #8
   1cb0e:	f442 4230 	orr.w	r2, r2, #45056	; 0xb000
   1cb12:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
   1cb16:	f8ab 2028 	strh.w	r2, [fp, #40]	; 0x28
		udp->dst_port = htons((NET_6LO_NHC_UDP_4_BIT_PORT << 4) |
   1cb1a:	5c0a      	ldrb	r2, [r1, r0]
   1cb1c:	0212      	lsls	r2, r2, #8
   1cb1e:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
   1cb22:	f442 4230 	orr.w	r2, r2, #45056	; 0xb000
   1cb26:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
   1cb2a:	f8ab 202a 	strh.w	r2, [fp, #42]	; 0x2a
		offset++;
   1cb2e:	3402      	adds	r4, #2
   1cb30:	e75c      	b.n	1c9ec <net_6lo_uncompress+0x296>
	struct net_udp_hdr *udp = NULL;
   1cb32:	46c1      	mov	r9, r8
   1cb34:	e76c      	b.n	1ca10 <net_6lo_uncompress+0x2ba>
		bytes += buf->len;
   1cb36:	8991      	ldrh	r1, [r2, #12]
		buf = buf->frags;
   1cb38:	6812      	ldr	r2, [r2, #0]
		bytes += buf->len;
   1cb3a:	440b      	add	r3, r1
   1cb3c:	e78d      	b.n	1ca5a <net_6lo_uncompress+0x304>
	if (ipv6->nexthdr == IPPROTO_UDP && udp) {
   1cb3e:	f1b9 0f00 	cmp.w	r9, #0
   1cb42:	d094      	beq.n	1ca6e <net_6lo_uncompress+0x318>
		udp->len = htons(len);
   1cb44:	ba5b      	rev16	r3, r3
   1cb46:	f8a9 3004 	strh.w	r3, [r9, #4]
		if (chksum) {
   1cb4a:	f1b8 0f00 	cmp.w	r8, #0
   1cb4e:	d08e      	beq.n	1ca6e <net_6lo_uncompress+0x318>
	return net_calc_chksum(pkt, IPPROTO_ICMP);
}

static inline u16_t net_calc_chksum_udp(struct net_pkt *pkt)
{
	return net_calc_chksum(pkt, IPPROTO_UDP);
   1cb50:	4630      	mov	r0, r6
   1cb52:	f7ff fa80 	bl	1c056 <net_calc_chksum>
			udp->chksum = ~net_calc_chksum_udp(pkt);
   1cb56:	43c0      	mvns	r0, r0
   1cb58:	f8a9 0006 	strh.w	r0, [r9, #6]
   1cb5c:	e787      	b.n	1ca6e <net_6lo_uncompress+0x318>
	} else if ((pkt->frags->data[0] & NET_6LO_DISPATCH_IPV6) ==
   1cb5e:	f002 0241 	and.w	r2, r2, #65	; 0x41
   1cb62:	2a41      	cmp	r2, #65	; 0x41
   1cb64:	d183      	bne.n	1ca6e <net_6lo_uncompress+0x318>
	memmove(frag->data, frag->data + 1, frag->len - 1);
   1cb66:	89a2      	ldrh	r2, [r4, #12]
   1cb68:	1c59      	adds	r1, r3, #1
   1cb6a:	4618      	mov	r0, r3
   1cb6c:	3a01      	subs	r2, #1
   1cb6e:	f7e3 fdf8 	bl	762 <memmove>
	frag->len -= 1;
   1cb72:	89a3      	ldrh	r3, [r4, #12]
   1cb74:	3b01      	subs	r3, #1
   1cb76:	81a3      	strh	r3, [r4, #12]
   1cb78:	e779      	b.n	1ca6e <net_6lo_uncompress+0x318>
	...

0001cb7c <net_icmpv6_register_handler>:
	node->next = list->head;
   1cb7c:	4b03      	ldr	r3, [pc, #12]	; (1cb8c <net_icmpv6_register_handler+0x10>)
   1cb7e:	681a      	ldr	r2, [r3, #0]
   1cb80:	6002      	str	r2, [r0, #0]
	if (!list->tail) {
   1cb82:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   1cb84:	6018      	str	r0, [r3, #0]
	if (!list->tail) {
   1cb86:	b902      	cbnz	r2, 1cb8a <net_icmpv6_register_handler+0xe>
		list->tail = list->head;
   1cb88:	6058      	str	r0, [r3, #4]
   1cb8a:	4770      	bx	lr
   1cb8c:	200027dc 	.word	0x200027dc

0001cb90 <net_icmpv6_set_chksum>:
#define echo_reply_debug(pkt)
#endif /* CONFIG_NET_DEBUG_ICMPV6 */

struct net_buf *net_icmpv6_set_chksum(struct net_pkt *pkt,
				      struct net_buf *frag)
{
   1cb90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cb94:	b086      	sub	sp, #24
	struct net_icmp_hdr *icmp_hdr;
	u16_t chksum = 0;
   1cb96:	2700      	movs	r7, #0
{
   1cb98:	4604      	mov	r4, r0
   1cb9a:	460e      	mov	r6, r1
	u16_t chksum = 0;
   1cb9c:	f8ad 7014 	strh.w	r7, [sp, #20]
	u16_t pos;

	icmp_hdr = net_pkt_icmp_data(pkt);
   1cba0:	f7ff f8c0 	bl	1bd24 <net_pkt_icmp_data>
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   1cba4:	2204      	movs	r2, #4
   1cba6:	4605      	mov	r5, r0
   1cba8:	4601      	mov	r1, r0
   1cbaa:	4620      	mov	r0, r4
   1cbac:	f7ff faa6 	bl	1c0fc <net_header_fits>
   1cbb0:	b160      	cbz	r0, 1cbcc <net_icmpv6_set_chksum+0x3c>
	if (net_icmp_header_fits(pkt, icmp_hdr)) {
   1cbb2:	b15d      	cbz	r5, 1cbcc <net_icmpv6_set_chksum+0x3c>
		icmp_hdr->chksum = 0;
   1cbb4:	70af      	strb	r7, [r5, #2]
   1cbb6:	70ef      	strb	r7, [r5, #3]
	return net_calc_chksum(pkt, IPPROTO_ICMPV6);
   1cbb8:	213a      	movs	r1, #58	; 0x3a
   1cbba:	4620      	mov	r0, r4
   1cbbc:	f7ff fa4b 	bl	1c056 <net_calc_chksum>
		icmp_hdr->chksum = ~net_calc_chksum_icmpv6(pkt);
   1cbc0:	43c0      	mvns	r0, r0
   1cbc2:	8068      	strh	r0, [r5, #2]
			     (u8_t *)&chksum, PKT_WAIT_TIME);

	NET_ASSERT(frag);

	return frag;
}
   1cbc4:	4630      	mov	r0, r6
   1cbc6:	b006      	add	sp, #24
   1cbc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			     net_pkt_ipv6_ext_len(pkt) +
   1cbcc:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
	frag = net_pkt_write(pkt, frag, net_pkt_ip_hdr_len(pkt) +
   1cbd0:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
   1cbd4:	2702      	movs	r7, #2
   1cbd6:	441a      	add	r2, r3
   1cbd8:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   1cbdc:	ad05      	add	r5, sp, #20
   1cbde:	f10d 0316 	add.w	r3, sp, #22
   1cbe2:	443a      	add	r2, r7
   1cbe4:	4631      	mov	r1, r6
   1cbe6:	f8cd 8008 	str.w	r8, [sp, #8]
   1cbea:	9501      	str	r5, [sp, #4]
   1cbec:	9700      	str	r7, [sp, #0]
   1cbee:	4620      	mov	r0, r4
   1cbf0:	f7fe fffc 	bl	1bbec <net_pkt_write>
   1cbf4:	213a      	movs	r1, #58	; 0x3a
   1cbf6:	4606      	mov	r6, r0
   1cbf8:	4620      	mov	r0, r4
   1cbfa:	f7ff fa2c 	bl	1c056 <net_calc_chksum>
	frag = net_pkt_write(pkt, frag, pos - 2, &pos, sizeof(chksum),
   1cbfe:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1cc02:	f8cd 8008 	str.w	r8, [sp, #8]
	chksum = ~net_calc_chksum_icmpv6(pkt);
   1cc06:	43c0      	mvns	r0, r0
	frag = net_pkt_write(pkt, frag, pos - 2, &pos, sizeof(chksum),
   1cc08:	3a02      	subs	r2, #2
	chksum = ~net_calc_chksum_icmpv6(pkt);
   1cc0a:	f8ad 0014 	strh.w	r0, [sp, #20]
	frag = net_pkt_write(pkt, frag, pos - 2, &pos, sizeof(chksum),
   1cc0e:	4631      	mov	r1, r6
   1cc10:	9501      	str	r5, [sp, #4]
   1cc12:	9700      	str	r7, [sp, #0]
   1cc14:	f10d 0316 	add.w	r3, sp, #22
   1cc18:	b292      	uxth	r2, r2
   1cc1a:	4620      	mov	r0, r4
   1cc1c:	f7fe ffe6 	bl	1bbec <net_pkt_write>
   1cc20:	4606      	mov	r6, r0
	return frag;
   1cc22:	e7cf      	b.n	1cbc4 <net_icmpv6_set_chksum+0x34>

0001cc24 <net_icmpv6_get_hdr>:

struct net_icmp_hdr *net_icmpv6_get_hdr(struct net_pkt *pkt,
					struct net_icmp_hdr *hdr)
{
   1cc24:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1cc26:	4606      	mov	r6, r0
   1cc28:	460d      	mov	r5, r1
	/* If the ICMP header can fit the first fragment, then access it
	 * directly (fast path), otherwise read the values one by one
	 * using net_frag_read*() functions (slow path).
	 */

	icmp_hdr = net_pkt_icmp_data(pkt);
   1cc2a:	f7ff f87b 	bl	1bd24 <net_pkt_icmp_data>
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   1cc2e:	2204      	movs	r2, #4
   1cc30:	4604      	mov	r4, r0
   1cc32:	4601      	mov	r1, r0
   1cc34:	4630      	mov	r0, r6
   1cc36:	f7ff fa61 	bl	1c0fc <net_header_fits>
   1cc3a:	b100      	cbz	r0, 1cc3e <net_icmpv6_get_hdr+0x1a>
	if (net_icmp_header_fits(pkt, icmp_hdr)) {
   1cc3c:	bb0c      	cbnz	r4, 1cc82 <net_icmpv6_get_hdr+0x5e>
		return icmp_hdr;
	}

	frag = net_frag_read_u8(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1cc3e:	f896 0035 	ldrb.w	r0, [r6, #53]	; 0x35
				net_pkt_ipv6_ext_len(pkt), &pos, &hdr->type);
   1cc42:	f896 103f 	ldrb.w	r1, [r6, #63]	; 0x3f
static inline struct net_buf *net_frag_read_u8(struct net_buf *frag,
					      u16_t offset,
					      u16_t *pos,
					      u8_t *value)
{
	return net_frag_read(frag, offset, pos, 1, value);
   1cc46:	9500      	str	r5, [sp, #0]
   1cc48:	4401      	add	r1, r0
   1cc4a:	2301      	movs	r3, #1
   1cc4c:	f10d 020e 	add.w	r2, sp, #14
   1cc50:	68b0      	ldr	r0, [r6, #8]
   1cc52:	f7fe ff77 	bl	1bb44 <net_frag_read>
	frag = net_frag_read_u8(frag, pos, &pos, &hdr->code);
   1cc56:	1c6b      	adds	r3, r5, #1
   1cc58:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1cc5c:	9300      	str	r3, [sp, #0]
   1cc5e:	f10d 020e 	add.w	r2, sp, #14
   1cc62:	2301      	movs	r3, #1
   1cc64:	f7fe ff6e 	bl	1bb44 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
			     (u8_t *)&hdr->chksum);
   1cc68:	1cab      	adds	r3, r5, #2
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   1cc6a:	9300      	str	r3, [sp, #0]
   1cc6c:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1cc70:	2302      	movs	r3, #2
   1cc72:	f10d 020e 	add.w	r2, sp, #14
   1cc76:	f7fe ff65 	bl	1bb44 <net_frag_read>
	if (!frag) {
		NET_ASSERT(frag);
		return NULL;
   1cc7a:	2800      	cmp	r0, #0
   1cc7c:	bf14      	ite	ne
   1cc7e:	462c      	movne	r4, r5
   1cc80:	2400      	moveq	r4, #0
	}

	return hdr;
}
   1cc82:	4620      	mov	r0, r4
   1cc84:	b004      	add	sp, #16
   1cc86:	bd70      	pop	{r4, r5, r6, pc}

0001cc88 <net_icmpv6_set_hdr>:

struct net_icmp_hdr *net_icmpv6_set_hdr(struct net_pkt *pkt,
					struct net_icmp_hdr *hdr)
{
   1cc88:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cc8a:	2204      	movs	r2, #4
   1cc8c:	b087      	sub	sp, #28
   1cc8e:	4605      	mov	r5, r0
   1cc90:	460c      	mov	r4, r1
   1cc92:	f7ff fa33 	bl	1c0fc <net_header_fits>
   1cc96:	b100      	cbz	r0, 1cc9a <net_icmpv6_set_hdr+0x12>
	struct net_buf *frag;
	u16_t pos;

	if (net_icmp_header_fits(pkt, hdr)) {
   1cc98:	bb64      	cbnz	r4, 1ccf4 <net_icmpv6_set_hdr+0x6c>
		return hdr;
	}

	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1cc9a:	f895 1035 	ldrb.w	r1, [r5, #53]	; 0x35
			     net_pkt_ipv6_ext_len(pkt), &pos,
   1cc9e:	f895 203f 	ldrb.w	r2, [r5, #63]	; 0x3f
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1cca2:	9401      	str	r4, [sp, #4]
   1cca4:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
   1cca8:	2701      	movs	r7, #1
   1ccaa:	440a      	add	r2, r1
   1ccac:	f10d 0316 	add.w	r3, sp, #22
   1ccb0:	68a9      	ldr	r1, [r5, #8]
   1ccb2:	9602      	str	r6, [sp, #8]
   1ccb4:	9700      	str	r7, [sp, #0]
   1ccb6:	4628      	mov	r0, r5
   1ccb8:	f7fe ff98 	bl	1bbec <net_pkt_write>
			     sizeof(hdr->type), &hdr->type, PKT_WAIT_TIME);
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->code),
   1ccbc:	19e3      	adds	r3, r4, r7
   1ccbe:	4601      	mov	r1, r0
   1ccc0:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1ccc4:	9301      	str	r3, [sp, #4]
   1ccc6:	9602      	str	r6, [sp, #8]
   1ccc8:	f10d 0316 	add.w	r3, sp, #22
   1cccc:	9700      	str	r7, [sp, #0]
   1ccce:	4628      	mov	r0, r5
   1ccd0:	f7fe ff8c 	bl	1bbec <net_pkt_write>
			     &hdr->code, PKT_WAIT_TIME);
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
			     (u8_t *)&hdr->chksum, PKT_WAIT_TIME);
   1ccd4:	1ca3      	adds	r3, r4, #2
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   1ccd6:	9301      	str	r3, [sp, #4]
   1ccd8:	2302      	movs	r3, #2
   1ccda:	9300      	str	r3, [sp, #0]
   1ccdc:	4601      	mov	r1, r0
   1ccde:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1cce2:	9602      	str	r6, [sp, #8]
   1cce4:	f10d 0316 	add.w	r3, sp, #22
   1cce8:	4628      	mov	r0, r5
   1ccea:	f7fe ff7f 	bl	1bbec <net_pkt_write>
	if (!frag) {
		NET_ASSERT(frag);
		return NULL;
   1ccee:	2800      	cmp	r0, #0
   1ccf0:	bf08      	it	eq
   1ccf2:	2400      	moveq	r4, #0
	}

	return hdr;
}
   1ccf4:	4620      	mov	r0, r4
   1ccf6:	b007      	add	sp, #28
   1ccf8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001ccfa <handle_echo_request>:

	return hdr;
}

static enum net_verdict handle_echo_request(struct net_pkt *orig)
{
   1ccfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	echo_request_debug(orig);

	iface = net_pkt_iface(orig);

	pkt = net_pkt_get_reserve_tx(0, PKT_WAIT_TIME);
   1ccfe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1cd02:	f8d0 8014 	ldr.w	r8, [r0, #20]
{
   1cd06:	b096      	sub	sp, #88	; 0x58
   1cd08:	4607      	mov	r7, r0
	pkt = net_pkt_get_reserve_tx(0, PKT_WAIT_TIME);
   1cd0a:	2000      	movs	r0, #0
   1cd0c:	f7fe fd42 	bl	1b794 <net_pkt_get_reserve_tx>
	if (!pkt) {
   1cd10:	4604      	mov	r4, r0
   1cd12:	2800      	cmp	r0, #0
   1cd14:	f000 80e8 	beq.w	1cee8 <handle_echo_request+0x1ee>
	return net_pkt_copy(pkt, net_buf_frags_len(pkt->frags),
   1cd18:	68bd      	ldr	r5, [r7, #8]
	size_t bytes = 0;
   1cd1a:	2100      	movs	r1, #0
	while (buf) {
   1cd1c:	2d00      	cmp	r5, #0
   1cd1e:	f040 8098 	bne.w	1ce52 <handle_echo_request+0x158>
   1cd22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1cd26:	462a      	mov	r2, r5
   1cd28:	4638      	mov	r0, r7
   1cd2a:	f7fe fdfb 	bl	1b924 <net_pkt_copy>

	payload_len = sys_get_be16(NET_IPV6_HDR(orig)->len) -
		sizeof(NET_ICMPH_LEN) - NET_ICMPV6_UNUSED_LEN;

	frag = net_pkt_copy_all(orig, 0, PKT_WAIT_TIME);
	if (!frag) {
   1cd2e:	4606      	mov	r6, r0
   1cd30:	2800      	cmp	r0, #0
   1cd32:	f000 80d6 	beq.w	1cee2 <handle_echo_request+0x1e8>
		goto drop;
	}

	net_pkt_frag_add(pkt, frag);
   1cd36:	4601      	mov	r1, r0
   1cd38:	4620      	mov	r0, r4
   1cd3a:	f7fe fdcf 	bl	1b8dc <net_pkt_frag_add>
	pkt->family = family;
   1cd3e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
	pkt->iface = iface;
   1cd42:	f8c4 8014 	str.w	r8, [r4, #20]
	pkt->family = family;
   1cd46:	220a      	movs	r2, #10
   1cd48:	f362 03c6 	bfi	r3, r2, #3, #4
   1cd4c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	pkt->lladdr_src.type = iface->link_addr.type;
   1cd50:	f898 3015 	ldrb.w	r3, [r8, #21]
   1cd54:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1cd58:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	net_pkt_set_family(pkt, AF_INET6);
	net_pkt_set_iface(pkt, iface);
	net_pkt_set_ll_reserve(pkt, net_buf_headroom(frag));
   1cd5c:	f106 0008 	add.w	r0, r6, #8
   1cd60:	f7fc fb8c 	bl	1947c <net_buf_simple_headroom>
	pkt->ip_hdr_len = len;
   1cd64:	2328      	movs	r3, #40	; 0x28
   1cd66:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
   1cd6a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
   1cd6e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
	net_pkt_set_ip_hdr_len(pkt, sizeof(struct net_ipv6_hdr));

	if (net_pkt_ipv6_ext_len(orig)) {
   1cd72:	2b00      	cmp	r3, #0
   1cd74:	d071      	beq.n	1ce5a <handle_echo_request+0x160>
	pkt->ipv6_ext_len = len;
   1cd76:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
	return pkt->frags->data;
   1cd7a:	68a3      	ldr	r3, [r4, #8]
   1cd7c:	689d      	ldr	r5, [r3, #8]
	} else {
		net_pkt_set_ipv6_ext_len(pkt, 0);
	}

	/* Set up IPv6 Header fields */
	NET_IPV6_HDR(pkt)->vtc = 0x60;
   1cd7e:	2360      	movs	r3, #96	; 0x60
   1cd80:	702b      	strb	r3, [r5, #0]
	NET_IPV6_HDR(pkt)->tcflow = 0;
   1cd82:	2300      	movs	r3, #0
   1cd84:	706b      	strb	r3, [r5, #1]
	NET_IPV6_HDR(pkt)->flow = 0;
   1cd86:	70ab      	strb	r3, [r5, #2]
   1cd88:	70eb      	strb	r3, [r5, #3]
   1cd8a:	f898 324c 	ldrb.w	r3, [r8, #588]	; 0x24c
	NET_IPV6_HDR(pkt)->hop_limit = net_if_ipv6_get_hop_limit(iface);
   1cd8e:	71eb      	strb	r3, [r5, #7]

	if (net_is_ipv6_addr_mcast(&NET_IPV6_HDR(pkt)->dst)) {
   1cd90:	7e2b      	ldrb	r3, [r5, #24]
   1cd92:	2bff      	cmp	r3, #255	; 0xff
   1cd94:	68bb      	ldr	r3, [r7, #8]
   1cd96:	d163      	bne.n	1ce60 <handle_echo_request+0x166>
   1cd98:	689b      	ldr	r3, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst,
   1cd9a:	ae02      	add	r6, sp, #8
   1cd9c:	f103 0208 	add.w	r2, r3, #8
   1cda0:	46b6      	mov	lr, r6
   1cda2:	3318      	adds	r3, #24
   1cda4:	6810      	ldr	r0, [r2, #0]
   1cda6:	6851      	ldr	r1, [r2, #4]
   1cda8:	46b4      	mov	ip, r6
   1cdaa:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   1cdae:	3208      	adds	r2, #8
   1cdb0:	429a      	cmp	r2, r3
   1cdb2:	4666      	mov	r6, ip
   1cdb4:	d1f6      	bne.n	1cda4 <handle_echo_request+0xaa>
   1cdb6:	f105 0c18 	add.w	ip, r5, #24
   1cdba:	ae06      	add	r6, sp, #24
   1cdbc:	4672      	mov	r2, lr
   1cdbe:	ca03      	ldmia	r2!, {r0, r1}
   1cdc0:	42b2      	cmp	r2, r6
   1cdc2:	f8cc 0000 	str.w	r0, [ip]
   1cdc6:	f8cc 1004 	str.w	r1, [ip, #4]
   1cdca:	4696      	mov	lr, r2
   1cdcc:	f10c 0c08 	add.w	ip, ip, #8
   1cdd0:	d1f4      	bne.n	1cdbc <handle_echo_request+0xc2>
				&NET_IPV6_HDR(orig)->src);

		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1cdd2:	4619      	mov	r1, r3
   1cdd4:	4640      	mov	r0, r8
   1cdd6:	f7fe f9e3 	bl	1b1a0 <net_if_ipv6_select_src_addr>
   1cdda:	46b6      	mov	lr, r6
   1cddc:	4603      	mov	r3, r0
   1cdde:	f100 0c10 	add.w	ip, r0, #16
   1cde2:	6818      	ldr	r0, [r3, #0]
   1cde4:	6859      	ldr	r1, [r3, #4]
   1cde6:	4672      	mov	r2, lr
   1cde8:	c203      	stmia	r2!, {r0, r1}
   1cdea:	3308      	adds	r3, #8
   1cdec:	4563      	cmp	r3, ip
   1cdee:	4696      	mov	lr, r2
   1cdf0:	d1f7      	bne.n	1cde2 <handle_echo_request+0xe8>
   1cdf2:	3508      	adds	r5, #8
   1cdf4:	aa0a      	add	r2, sp, #40	; 0x28
   1cdf6:	4633      	mov	r3, r6
   1cdf8:	cb03      	ldmia	r3!, {r0, r1}
   1cdfa:	4293      	cmp	r3, r2
   1cdfc:	6028      	str	r0, [r5, #0]
   1cdfe:	6069      	str	r1, [r5, #4]
   1ce00:	461e      	mov	r6, r3
   1ce02:	f105 0508 	add.w	r5, r5, #8
   1ce06:	d1f6      	bne.n	1cdf6 <handle_echo_request+0xfc>
			goto drop;
		}
#endif
	}

	net_pkt_ll_src(pkt)->addr = net_pkt_ll_dst(orig)->addr;
   1ce08:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ce0a:	6223      	str	r3, [r4, #32]
	net_pkt_ll_src(pkt)->len = net_pkt_ll_dst(orig)->len;

	/* We must not set the destination ll address here but trust
	 * that it is set properly using a value from neighbor cache.
	 */
	net_pkt_ll_dst(pkt)->addr = NULL;
   1ce0c:	2500      	movs	r5, #0
	net_pkt_ll_src(pkt)->len = net_pkt_ll_dst(orig)->len;
   1ce0e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   1ce12:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24

	/* ICMPv6 fields */
	icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   1ce16:	a901      	add	r1, sp, #4
	net_pkt_ll_dst(pkt)->addr = NULL;
   1ce18:	62a5      	str	r5, [r4, #40]	; 0x28
	icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   1ce1a:	4620      	mov	r0, r4
   1ce1c:	f7ff ff02 	bl	1cc24 <net_icmpv6_get_hdr>
	icmp_hdr->type = NET_ICMPV6_ECHO_REPLY;
   1ce20:	2381      	movs	r3, #129	; 0x81
   1ce22:	7003      	strb	r3, [r0, #0]
	icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   1ce24:	4601      	mov	r1, r0
	icmp_hdr->code = 0;
   1ce26:	7045      	strb	r5, [r0, #1]
	icmp_hdr->chksum = 0;
   1ce28:	7085      	strb	r5, [r0, #2]
   1ce2a:	70c5      	strb	r5, [r0, #3]
	net_icmpv6_set_hdr(pkt, icmp_hdr);
   1ce2c:	4620      	mov	r0, r4
   1ce2e:	f7ff ff2b 	bl	1cc88 <net_icmpv6_set_hdr>
	net_icmpv6_set_chksum(pkt, pkt->frags);
   1ce32:	68a1      	ldr	r1, [r4, #8]
   1ce34:	4620      	mov	r0, r4
   1ce36:	f7ff feab 	bl	1cb90 <net_icmpv6_set_chksum>

	echo_reply_debug(pkt);

	if (net_send_data(pkt) < 0) {
   1ce3a:	4620      	mov	r0, r4
   1ce3c:	f7fd fbbe 	bl	1a5bc <net_send_data>
   1ce40:	42a8      	cmp	r0, r5
   1ce42:	db4e      	blt.n	1cee2 <handle_echo_request+0x1e8>
		goto drop;
	}

	net_pkt_unref(orig);
   1ce44:	4638      	mov	r0, r7
   1ce46:	f7fe fd22 	bl	1b88e <net_pkt_unref>
	net_stats_update_icmp_sent();

	return NET_OK;
   1ce4a:	4628      	mov	r0, r5

drop_no_pkt:
	net_stats_update_icmp_drop();

	return NET_DROP;
}
   1ce4c:	b016      	add	sp, #88	; 0x58
   1ce4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes += buf->len;
   1ce52:	89ab      	ldrh	r3, [r5, #12]
		buf = buf->frags;
   1ce54:	682d      	ldr	r5, [r5, #0]
		bytes += buf->len;
   1ce56:	4419      	add	r1, r3
   1ce58:	e760      	b.n	1cd1c <handle_echo_request+0x22>
	pkt->ipv6_ext_len = len;
   1ce5a:	f884 503f 	strb.w	r5, [r4, #63]	; 0x3f
   1ce5e:	e78c      	b.n	1cd7a <handle_echo_request+0x80>
	return pkt->frags->data;
   1ce60:	f8d3 c008 	ldr.w	ip, [r3, #8]
		net_ipaddr_copy(&addr, &NET_IPV6_HDR(orig)->src);
   1ce64:	aa0a      	add	r2, sp, #40	; 0x28
   1ce66:	f10c 0608 	add.w	r6, ip, #8
   1ce6a:	f10c 0818 	add.w	r8, ip, #24
   1ce6e:	4613      	mov	r3, r2
   1ce70:	6830      	ldr	r0, [r6, #0]
   1ce72:	6871      	ldr	r1, [r6, #4]
   1ce74:	4696      	mov	lr, r2
   1ce76:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   1ce7a:	3608      	adds	r6, #8
   1ce7c:	4546      	cmp	r6, r8
   1ce7e:	4672      	mov	r2, lr
   1ce80:	d1f6      	bne.n	1ce70 <handle_echo_request+0x176>
   1ce82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1ce84:	f10d 0e18 	add.w	lr, sp, #24
   1ce88:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1ce8c:	ab0e      	add	r3, sp, #56	; 0x38
   1ce8e:	f10c 0c28 	add.w	ip, ip, #40	; 0x28
   1ce92:	461a      	mov	r2, r3
   1ce94:	6830      	ldr	r0, [r6, #0]
   1ce96:	6871      	ldr	r1, [r6, #4]
   1ce98:	4698      	mov	r8, r3
   1ce9a:	e8a8 0003 	stmia.w	r8!, {r0, r1}
   1ce9e:	3608      	adds	r6, #8
   1cea0:	4566      	cmp	r6, ip
   1cea2:	4643      	mov	r3, r8
   1cea4:	d1f6      	bne.n	1ce94 <handle_echo_request+0x19a>
   1cea6:	f105 0c08 	add.w	ip, r5, #8
   1ceaa:	ae12      	add	r6, sp, #72	; 0x48
   1ceac:	4613      	mov	r3, r2
   1ceae:	cb03      	ldmia	r3!, {r0, r1}
   1ceb0:	42b3      	cmp	r3, r6
   1ceb2:	f8cc 0000 	str.w	r0, [ip]
   1ceb6:	f8cc 1004 	str.w	r1, [ip, #4]
   1ceba:	461a      	mov	r2, r3
   1cebc:	f10c 0c08 	add.w	ip, ip, #8
   1cec0:	d1f4      	bne.n	1ceac <handle_echo_request+0x1b2>
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, &addr);
   1cec2:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
   1cec6:	3518      	adds	r5, #24
   1cec8:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   1cecc:	aa16      	add	r2, sp, #88	; 0x58
   1cece:	4633      	mov	r3, r6
   1ced0:	cb03      	ldmia	r3!, {r0, r1}
   1ced2:	4293      	cmp	r3, r2
   1ced4:	6028      	str	r0, [r5, #0]
   1ced6:	6069      	str	r1, [r5, #4]
   1ced8:	461e      	mov	r6, r3
   1ceda:	f105 0508 	add.w	r5, r5, #8
   1cede:	d1f6      	bne.n	1cece <handle_echo_request+0x1d4>
   1cee0:	e792      	b.n	1ce08 <handle_echo_request+0x10e>
	net_pkt_unref(pkt);
   1cee2:	4620      	mov	r0, r4
   1cee4:	f7fe fcd3 	bl	1b88e <net_pkt_unref>
	return NET_DROP;
   1cee8:	2002      	movs	r0, #2
   1ceea:	e7af      	b.n	1ce4c <handle_echo_request+0x152>

0001ceec <net_icmpv6_get_ns_hdr>:
{
   1ceec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1ceee:	460c      	mov	r4, r1
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1cef0:	2104      	movs	r1, #4
{
   1cef2:	4605      	mov	r5, r0
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1cef4:	f7fe ff28 	bl	1bd48 <net_pkt_icmp_opt_data>
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1cef8:	2214      	movs	r2, #20
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1cefa:	4606      	mov	r6, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1cefc:	4601      	mov	r1, r0
   1cefe:	4628      	mov	r0, r5
   1cf00:	f7ff f8fc 	bl	1c0fc <net_header_fits>
   1cf04:	b998      	cbnz	r0, 1cf2e <net_icmpv6_get_ns_hdr+0x42>
			     net_pkt_ipv6_ext_len(pkt) +
   1cf06:	f895 303f 	ldrb.w	r3, [r5, #63]	; 0x3f
			     net_pkt_ip_hdr_len(pkt) +
   1cf0a:	f895 1035 	ldrb.w	r1, [r5, #53]	; 0x35
	frag = net_frag_read(pkt->frags,
   1cf0e:	68a8      	ldr	r0, [r5, #8]
   1cf10:	4419      	add	r1, r3
			     &pos, sizeof(struct in6_addr), (u8_t *)&hdr->tgt);
   1cf12:	1d23      	adds	r3, r4, #4
	frag = net_frag_read(pkt->frags,
   1cf14:	9300      	str	r3, [sp, #0]
   1cf16:	f10d 020e 	add.w	r2, sp, #14
   1cf1a:	2310      	movs	r3, #16
   1cf1c:	3108      	adds	r1, #8
   1cf1e:	f7fe fe11 	bl	1bb44 <net_frag_read>
	if (!frag) {
   1cf22:	2800      	cmp	r0, #0
		return NULL;
   1cf24:	bf08      	it	eq
   1cf26:	2400      	moveq	r4, #0
}
   1cf28:	4620      	mov	r0, r4
   1cf2a:	b004      	add	sp, #16
   1cf2c:	bd70      	pop	{r4, r5, r6, pc}
		return (struct net_icmpv6_ns_hdr *)opt_data;
   1cf2e:	4634      	mov	r4, r6
   1cf30:	e7fa      	b.n	1cf28 <net_icmpv6_get_ns_hdr+0x3c>

0001cf32 <net_icmpv6_set_ns_hdr>:
{
   1cf32:	b570      	push	{r4, r5, r6, lr}
   1cf34:	b086      	sub	sp, #24
	const u32_t reserved = 0;
   1cf36:	2300      	movs	r3, #0
{
   1cf38:	460d      	mov	r5, r1
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1cf3a:	2104      	movs	r1, #4
{
   1cf3c:	4604      	mov	r4, r0
	const u32_t reserved = 0;
   1cf3e:	9305      	str	r3, [sp, #20]
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1cf40:	f7fe ff02 	bl	1bd48 <net_pkt_icmp_opt_data>
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1cf44:	2214      	movs	r2, #20
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1cf46:	4606      	mov	r6, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1cf48:	4601      	mov	r1, r0
   1cf4a:	4620      	mov	r0, r4
   1cf4c:	f7ff f8d6 	bl	1c0fc <net_header_fits>
   1cf50:	bb28      	cbnz	r0, 1cf9e <net_icmpv6_set_ns_hdr+0x6c>
			     net_pkt_ipv6_ext_len(pkt) +
   1cf52:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1cf56:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
   1cf5a:	68a1      	ldr	r1, [r4, #8]
   1cf5c:	441a      	add	r2, r3
   1cf5e:	ab05      	add	r3, sp, #20
   1cf60:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
   1cf64:	9301      	str	r3, [sp, #4]
   1cf66:	2304      	movs	r3, #4
   1cf68:	9300      	str	r3, [sp, #0]
   1cf6a:	3204      	adds	r2, #4
   1cf6c:	f10d 0312 	add.w	r3, sp, #18
   1cf70:	9602      	str	r6, [sp, #8]
   1cf72:	4620      	mov	r0, r4
   1cf74:	f7fe fe3a 	bl	1bbec <net_pkt_write>
			     (u8_t *)&hdr->tgt, PKT_WAIT_TIME);
   1cf78:	1d2b      	adds	r3, r5, #4
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(struct in6_addr),
   1cf7a:	9301      	str	r3, [sp, #4]
   1cf7c:	2310      	movs	r3, #16
   1cf7e:	9300      	str	r3, [sp, #0]
   1cf80:	4601      	mov	r1, r0
   1cf82:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   1cf86:	9602      	str	r6, [sp, #8]
   1cf88:	f10d 0312 	add.w	r3, sp, #18
   1cf8c:	4620      	mov	r0, r4
   1cf8e:	f7fe fe2d 	bl	1bbec <net_pkt_write>
	if (!frag) {
   1cf92:	2800      	cmp	r0, #0
		return NULL;
   1cf94:	bf08      	it	eq
   1cf96:	2500      	moveq	r5, #0
}
   1cf98:	4628      	mov	r0, r5
   1cf9a:	b006      	add	sp, #24
   1cf9c:	bd70      	pop	{r4, r5, r6, pc}
		return (struct net_icmpv6_ns_hdr *)opt_data;
   1cf9e:	4635      	mov	r5, r6
   1cfa0:	e7fa      	b.n	1cf98 <net_icmpv6_set_ns_hdr+0x66>

0001cfa2 <net_icmpv6_get_nd_opt_hdr>:
{
   1cfa2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1cfa4:	460c      	mov	r4, r1
					 net_pkt_ipv6_ext_opt_len(pkt));
   1cfa6:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr) +
   1cfaa:	3104      	adds	r1, #4
{
   1cfac:	4605      	mov	r5, r0
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr) +
   1cfae:	f7fe fecb 	bl	1bd48 <net_pkt_icmp_opt_data>
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1cfb2:	2202      	movs	r2, #2
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr) +
   1cfb4:	4606      	mov	r6, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1cfb6:	4601      	mov	r1, r0
   1cfb8:	4628      	mov	r0, r5
   1cfba:	f7ff f89f 	bl	1c0fc <net_header_fits>
   1cfbe:	b9f8      	cbnz	r0, 1d000 <net_icmpv6_get_nd_opt_hdr+0x5e>
				net_pkt_ipv6_ext_len(pkt) +
   1cfc0:	f895 303f 	ldrb.w	r3, [r5, #63]	; 0x3f
				net_pkt_ip_hdr_len(pkt) +
   1cfc4:	f895 1035 	ldrb.w	r1, [r5, #53]	; 0x35
	return net_frag_read(frag, offset, pos, 1, value);
   1cfc8:	9400      	str	r4, [sp, #0]
   1cfca:	4419      	add	r1, r3
				net_pkt_ipv6_ext_opt_len(pkt),
   1cfcc:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
   1cfd0:	68a8      	ldr	r0, [r5, #8]
	frag = net_frag_read_u8(pkt->frags,
   1cfd2:	3104      	adds	r1, #4
   1cfd4:	4419      	add	r1, r3
   1cfd6:	f10d 020e 	add.w	r2, sp, #14
   1cfda:	2301      	movs	r3, #1
   1cfdc:	b289      	uxth	r1, r1
   1cfde:	f7fe fdb1 	bl	1bb44 <net_frag_read>
	frag = net_frag_read_u8(frag, pos, &pos, &hdr->len);
   1cfe2:	1c63      	adds	r3, r4, #1
   1cfe4:	9300      	str	r3, [sp, #0]
   1cfe6:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1cfea:	2301      	movs	r3, #1
   1cfec:	f10d 020e 	add.w	r2, sp, #14
   1cff0:	f7fe fda8 	bl	1bb44 <net_frag_read>
	if (!frag) {
   1cff4:	2800      	cmp	r0, #0
		return NULL;
   1cff6:	bf08      	it	eq
   1cff8:	2400      	moveq	r4, #0
}
   1cffa:	4620      	mov	r0, r4
   1cffc:	b004      	add	sp, #16
   1cffe:	bd70      	pop	{r4, r5, r6, pc}
		return (struct net_icmpv6_nd_opt_hdr *)opt_data;
   1d000:	4634      	mov	r4, r6
   1d002:	e7fa      	b.n	1cffa <net_icmpv6_get_nd_opt_hdr+0x58>

0001d004 <net_icmpv6_get_na_hdr>:
{
   1d004:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d006:	460c      	mov	r4, r1
   1d008:	b085      	sub	sp, #20
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1d00a:	2104      	movs	r1, #4
{
   1d00c:	4605      	mov	r5, r0
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1d00e:	f7fe fe9b 	bl	1bd48 <net_pkt_icmp_opt_data>
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1d012:	2214      	movs	r2, #20
   1d014:	4601      	mov	r1, r0
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1d016:	4606      	mov	r6, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1d018:	4628      	mov	r0, r5
   1d01a:	f7ff f86f 	bl	1c0fc <net_header_fits>
   1d01e:	4607      	mov	r7, r0
   1d020:	bb18      	cbnz	r0, 1d06a <net_icmpv6_get_na_hdr+0x66>
				net_pkt_ipv6_ext_len(pkt) +
   1d022:	f895 303f 	ldrb.w	r3, [r5, #63]	; 0x3f
	frag = net_frag_read_u8(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1d026:	f895 1035 	ldrb.w	r1, [r5, #53]	; 0x35
   1d02a:	9400      	str	r4, [sp, #0]
   1d02c:	4419      	add	r1, r3
   1d02e:	f10d 020e 	add.w	r2, sp, #14
   1d032:	2301      	movs	r3, #1
   1d034:	3104      	adds	r1, #4
   1d036:	68a8      	ldr	r0, [r5, #8]
   1d038:	f7fe fd84 	bl	1bb44 <net_frag_read>
	return net_frag_read(frag, offset, pos, len, NULL);
   1d03c:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1d040:	9700      	str	r7, [sp, #0]
   1d042:	2303      	movs	r3, #3
   1d044:	f10d 020e 	add.w	r2, sp, #14
   1d048:	f7fe fd7c 	bl	1bb44 <net_frag_read>
			     (u8_t *)&hdr->tgt);
   1d04c:	1d23      	adds	r3, r4, #4
	frag = net_frag_read(frag, pos, &pos, sizeof(struct in6_addr),
   1d04e:	9300      	str	r3, [sp, #0]
   1d050:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1d054:	2310      	movs	r3, #16
   1d056:	f10d 020e 	add.w	r2, sp, #14
   1d05a:	f7fe fd73 	bl	1bb44 <net_frag_read>
	if (!frag) {
   1d05e:	2800      	cmp	r0, #0
		return NULL;
   1d060:	bf08      	it	eq
   1d062:	2400      	moveq	r4, #0
}
   1d064:	4620      	mov	r0, r4
   1d066:	b005      	add	sp, #20
   1d068:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return (struct net_icmpv6_na_hdr *)opt_data;
   1d06a:	4634      	mov	r4, r6
   1d06c:	e7fa      	b.n	1d064 <net_icmpv6_get_na_hdr+0x60>

0001d06e <net_icmpv6_set_na_hdr>:
{
   1d06e:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d070:	b087      	sub	sp, #28
	const u8_t reserved[3] = { 0 };
   1d072:	2300      	movs	r3, #0
{
   1d074:	460d      	mov	r5, r1
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1d076:	2104      	movs	r1, #4
{
   1d078:	4604      	mov	r4, r0
	const u8_t reserved[3] = { 0 };
   1d07a:	f8ad 3014 	strh.w	r3, [sp, #20]
   1d07e:	f88d 3016 	strb.w	r3, [sp, #22]
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1d082:	f7fe fe61 	bl	1bd48 <net_pkt_icmp_opt_data>
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1d086:	2214      	movs	r2, #20
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1d088:	4606      	mov	r6, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1d08a:	4601      	mov	r1, r0
   1d08c:	4620      	mov	r0, r4
	const u8_t reserved[3] = { 0 };
   1d08e:	af05      	add	r7, sp, #20
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1d090:	f7ff f834 	bl	1c0fc <net_header_fits>
   1d094:	bb80      	cbnz	r0, 1d0f8 <net_icmpv6_set_na_hdr+0x8a>
			     net_pkt_ipv6_ext_len(pkt) +
   1d096:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
			     net_pkt_ip_hdr_len(pkt) +
   1d09a:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
	frag = net_pkt_write(pkt, pkt->frags,
   1d09e:	9501      	str	r5, [sp, #4]
   1d0a0:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
   1d0a4:	441a      	add	r2, r3
   1d0a6:	2301      	movs	r3, #1
   1d0a8:	9300      	str	r3, [sp, #0]
   1d0aa:	3204      	adds	r2, #4
   1d0ac:	f10d 0312 	add.w	r3, sp, #18
   1d0b0:	68a1      	ldr	r1, [r4, #8]
   1d0b2:	9602      	str	r6, [sp, #8]
   1d0b4:	4620      	mov	r0, r4
   1d0b6:	f7fe fd99 	bl	1bbec <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(reserved),
   1d0ba:	2303      	movs	r3, #3
   1d0bc:	4601      	mov	r1, r0
   1d0be:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   1d0c2:	9300      	str	r3, [sp, #0]
   1d0c4:	9602      	str	r6, [sp, #8]
   1d0c6:	f10d 0312 	add.w	r3, sp, #18
   1d0ca:	9701      	str	r7, [sp, #4]
   1d0cc:	4620      	mov	r0, r4
   1d0ce:	f7fe fd8d 	bl	1bbec <net_pkt_write>
			     (u8_t *)&hdr->tgt, PKT_WAIT_TIME);
   1d0d2:	1d2b      	adds	r3, r5, #4
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(struct in6_addr),
   1d0d4:	9301      	str	r3, [sp, #4]
   1d0d6:	2310      	movs	r3, #16
   1d0d8:	9300      	str	r3, [sp, #0]
   1d0da:	4601      	mov	r1, r0
   1d0dc:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   1d0e0:	9602      	str	r6, [sp, #8]
   1d0e2:	f10d 0312 	add.w	r3, sp, #18
   1d0e6:	4620      	mov	r0, r4
   1d0e8:	f7fe fd80 	bl	1bbec <net_pkt_write>
	if (!frag) {
   1d0ec:	2800      	cmp	r0, #0
		return NULL;
   1d0ee:	bf08      	it	eq
   1d0f0:	2500      	moveq	r5, #0
}
   1d0f2:	4628      	mov	r0, r5
   1d0f4:	b007      	add	sp, #28
   1d0f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return (struct net_icmpv6_na_hdr *)opt_data;
   1d0f8:	4635      	mov	r5, r6
   1d0fa:	e7fa      	b.n	1d0f2 <net_icmpv6_set_na_hdr+0x84>

0001d0fc <net_icmpv6_get_ra_hdr>:
{
   1d0fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1d0fe:	460c      	mov	r4, r1
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1d100:	2104      	movs	r1, #4
{
   1d102:	4605      	mov	r5, r0
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1d104:	f7fe fe20 	bl	1bd48 <net_pkt_icmp_opt_data>
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1d108:	220c      	movs	r2, #12
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1d10a:	4606      	mov	r6, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1d10c:	4601      	mov	r1, r0
   1d10e:	4628      	mov	r0, r5
   1d110:	f7fe fff4 	bl	1c0fc <net_header_fits>
   1d114:	2800      	cmp	r0, #0
   1d116:	d137      	bne.n	1d188 <net_icmpv6_get_ra_hdr+0x8c>
				net_pkt_ipv6_ext_len(pkt) +
   1d118:	f895 303f 	ldrb.w	r3, [r5, #63]	; 0x3f
	frag = net_frag_read_u8(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1d11c:	f895 1035 	ldrb.w	r1, [r5, #53]	; 0x35
	return net_frag_read(frag, offset, pos, 1, value);
   1d120:	9400      	str	r4, [sp, #0]
   1d122:	4419      	add	r1, r3
   1d124:	f10d 020e 	add.w	r2, sp, #14
   1d128:	2301      	movs	r3, #1
   1d12a:	3104      	adds	r1, #4
   1d12c:	68a8      	ldr	r0, [r5, #8]
   1d12e:	f7fe fd09 	bl	1bb44 <net_frag_read>
	frag = net_frag_read_u8(frag, pos, &pos, &hdr->flags);
   1d132:	1c63      	adds	r3, r4, #1
   1d134:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1d138:	9300      	str	r3, [sp, #0]
   1d13a:	f10d 020e 	add.w	r2, sp, #14
   1d13e:	2301      	movs	r3, #1
   1d140:	f7fe fd00 	bl	1bb44 <net_frag_read>
			     (u8_t *)&hdr->router_lifetime);
   1d144:	1ca3      	adds	r3, r4, #2
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->router_lifetime),
   1d146:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1d14a:	9300      	str	r3, [sp, #0]
   1d14c:	f10d 020e 	add.w	r2, sp, #14
   1d150:	2302      	movs	r3, #2
   1d152:	f7fe fcf7 	bl	1bb44 <net_frag_read>
			     (u8_t *)&hdr->reachable_time);
   1d156:	1d23      	adds	r3, r4, #4
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->reachable_time),
   1d158:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1d15c:	9300      	str	r3, [sp, #0]
   1d15e:	f10d 020e 	add.w	r2, sp, #14
   1d162:	2304      	movs	r3, #4
   1d164:	f7fe fcee 	bl	1bb44 <net_frag_read>
			     (u8_t *)&hdr->retrans_timer);
   1d168:	f104 0308 	add.w	r3, r4, #8
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->retrans_timer),
   1d16c:	9300      	str	r3, [sp, #0]
   1d16e:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1d172:	2304      	movs	r3, #4
   1d174:	f10d 020e 	add.w	r2, sp, #14
   1d178:	f7fe fce4 	bl	1bb44 <net_frag_read>
	if (!frag) {
   1d17c:	2800      	cmp	r0, #0
		return NULL;
   1d17e:	bf08      	it	eq
   1d180:	2400      	moveq	r4, #0
}
   1d182:	4620      	mov	r0, r4
   1d184:	b004      	add	sp, #16
   1d186:	bd70      	pop	{r4, r5, r6, pc}
		return (struct net_icmpv6_ra_hdr *)opt_data;
   1d188:	4634      	mov	r4, r6
   1d18a:	e7fa      	b.n	1d182 <net_icmpv6_get_ra_hdr+0x86>

0001d18c <net_icmpv6_send_error>:

int net_icmpv6_send_error(struct net_pkt *orig, u8_t type, u8_t code,
			  u32_t param)
{
   1d18c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d190:	4698      	mov	r8, r3
	return pkt->frags->data;
   1d192:	6883      	ldr	r3, [r0, #8]
	struct net_buf *frag;
	struct net_if *iface;
	size_t extra_len, reserve;
	int err = -EIO;

	if (NET_IPV6_HDR(orig)->nexthdr == IPPROTO_ICMPV6) {
   1d194:	689b      	ldr	r3, [r3, #8]
   1d196:	799b      	ldrb	r3, [r3, #6]
   1d198:	2b3a      	cmp	r3, #58	; 0x3a
{
   1d19a:	b09b      	sub	sp, #108	; 0x6c
   1d19c:	4606      	mov	r6, r0
   1d19e:	4689      	mov	r9, r1
   1d1a0:	4692      	mov	sl, r2
	if (NET_IPV6_HDR(orig)->nexthdr == IPPROTO_ICMPV6) {
   1d1a2:	d10d      	bne.n	1d1c0 <net_icmpv6_send_error+0x34>
		struct net_icmp_hdr icmp_hdr[1];

		if (!net_icmpv6_get_hdr(orig, icmp_hdr) ||
   1d1a4:	a916      	add	r1, sp, #88	; 0x58
   1d1a6:	f7ff fd3d 	bl	1cc24 <net_icmpv6_get_hdr>
   1d1aa:	b118      	cbz	r0, 1d1b4 <net_icmpv6_send_error+0x28>
   1d1ac:	f99d 3059 	ldrsb.w	r3, [sp, #89]	; 0x59
   1d1b0:	2b00      	cmp	r3, #0
   1d1b2:	db05      	blt.n	1d1c0 <net_icmpv6_send_error+0x34>
		    icmp_hdr->code < 128) {
			/* We must not send ICMP errors back */
			err = -EINVAL;
   1d1b4:	f06f 0515 	mvn.w	r5, #21

drop_no_pkt:
	net_stats_update_icmp_drop();

	return err;
}
   1d1b8:	4628      	mov	r0, r5
   1d1ba:	b01b      	add	sp, #108	; 0x6c
   1d1bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	pkt = net_pkt_get_reserve_tx(0, PKT_WAIT_TIME);
   1d1c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1d1c4:	2000      	movs	r0, #0
   1d1c6:	6977      	ldr	r7, [r6, #20]
   1d1c8:	f7fe fae4 	bl	1b794 <net_pkt_get_reserve_tx>
	if (!pkt) {
   1d1cc:	4604      	mov	r4, r0
   1d1ce:	2800      	cmp	r0, #0
   1d1d0:	f000 8132 	beq.w	1d438 <net_icmpv6_send_error+0x2ac>
   1d1d4:	68b3      	ldr	r3, [r6, #8]
   1d1d6:	6899      	ldr	r1, [r3, #8]
	if (NET_IPV6_HDR(orig)->nexthdr == IPPROTO_UDP) {
   1d1d8:	798b      	ldrb	r3, [r1, #6]
   1d1da:	2b11      	cmp	r3, #17
   1d1dc:	f000 80e8 	beq.w	1d3b0 <net_icmpv6_send_error+0x224>
	} else if (NET_IPV6_HDR(orig)->nexthdr == IPPROTO_TCP) {
   1d1e0:	2b06      	cmp	r3, #6
   1d1e2:	f000 80e7 	beq.w	1d3b4 <net_icmpv6_send_error+0x228>
   1d1e6:	687b      	ldr	r3, [r7, #4]
   1d1e8:	3118      	adds	r1, #24
   1d1ea:	689b      	ldr	r3, [r3, #8]
   1d1ec:	4638      	mov	r0, r7
   1d1ee:	4798      	blx	r3
		size_t space = CONFIG_NET_BUF_DATA_SIZE -
   1d1f0:	f1c0 0080 	rsb	r0, r0, #128	; 0x80
		if (reserve > space) {
   1d1f4:	282f      	cmp	r0, #47	; 0x2f
   1d1f6:	f240 80df 	bls.w	1d3b8 <net_icmpv6_send_error+0x22c>
			extra_len = space - reserve;
   1d1fa:	f1a0 0530 	sub.w	r5, r0, #48	; 0x30
	frag = net_pkt_copy(orig, extra_len, reserve, PKT_WAIT_TIME);
   1d1fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1d202:	2230      	movs	r2, #48	; 0x30
   1d204:	4629      	mov	r1, r5
   1d206:	4630      	mov	r0, r6
   1d208:	f7fe fb8c 	bl	1b924 <net_pkt_copy>
	if (!frag) {
   1d20c:	4683      	mov	fp, r0
   1d20e:	2800      	cmp	r0, #0
   1d210:	f000 810f 	beq.w	1d432 <net_icmpv6_send_error+0x2a6>
	net_pkt_frag_add(pkt, frag);
   1d214:	4601      	mov	r1, r0
   1d216:	4620      	mov	r0, r4
   1d218:	f7fe fb60 	bl	1b8dc <net_pkt_frag_add>
	pkt->family = family;
   1d21c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
	pkt->iface = iface;
   1d220:	6167      	str	r7, [r4, #20]
	pkt->family = family;
   1d222:	220a      	movs	r2, #10
   1d224:	f362 03c6 	bfi	r3, r2, #3, #4
   1d228:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	pkt->lladdr_src.type = iface->link_addr.type;
   1d22c:	7d7b      	ldrb	r3, [r7, #21]
   1d22e:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1d232:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	net_pkt_set_ll_reserve(pkt, net_buf_headroom(frag));
   1d236:	f10b 0008 	add.w	r0, fp, #8
   1d23a:	f7fc f91f 	bl	1947c <net_buf_simple_headroom>
	pkt->ipv6_ext_len = len;
   1d23e:	2200      	movs	r2, #0
   1d240:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
   1d244:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
	struct net_buf *frag = pkt->frags;
   1d248:	68a1      	ldr	r1, [r4, #8]
   1d24a:	f897 024c 	ldrb.w	r0, [r7, #588]	; 0x24c
	const u32_t unused = 0;
   1d24e:	9216      	str	r2, [sp, #88]	; 0x58
	return pkt->frags->data;
   1d250:	688b      	ldr	r3, [r1, #8]
   1d252:	f88d a017 	strb.w	sl, [sp, #23]
	sys_put_be16(NET_ICMPH_LEN + extra_len + NET_ICMPV6_UNUSED_LEN,
   1d256:	3508      	adds	r5, #8
   1d258:	b2ad      	uxth	r5, r5
	NET_IPV6_HDR(pkt)->tcflow = 0;
   1d25a:	705a      	strb	r2, [r3, #1]
	NET_IPV6_HDR(pkt)->flow = 0;
   1d25c:	709a      	strb	r2, [r3, #2]
   1d25e:	70da      	strb	r2, [r3, #3]
	NET_IPV6_HDR(pkt)->vtc = 0x60;
   1d260:	f04f 0e60 	mov.w	lr, #96	; 0x60
	dst[0] = val >> 8;
   1d264:	0a2a      	lsrs	r2, r5, #8
   1d266:	711a      	strb	r2, [r3, #4]
	dst[1] = val;
   1d268:	715d      	strb	r5, [r3, #5]
   1d26a:	f88d 9016 	strb.w	r9, [sp, #22]
   1d26e:	f883 e000 	strb.w	lr, [r3]
   1d272:	68a3      	ldr	r3, [r4, #8]
   1d274:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->nexthdr = IPPROTO_ICMPV6;
   1d276:	223a      	movs	r2, #58	; 0x3a
   1d278:	719a      	strb	r2, [r3, #6]
	NET_IPV6_HDR(pkt)->hop_limit = hop_limit;
   1d27a:	71d8      	strb	r0, [r3, #7]
	pkt->ip_hdr_len = len;
   1d27c:	2228      	movs	r2, #40	; 0x28
	frag = net_pkt_write(pkt, frag, net_pkt_ip_hdr_len(pkt), &pos,
   1d27e:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   1d282:	f04f 0a01 	mov.w	sl, #1
   1d286:	f10d 0316 	add.w	r3, sp, #22
   1d28a:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
   1d28e:	4620      	mov	r0, r4
   1d290:	9301      	str	r3, [sp, #4]
   1d292:	f8cd a000 	str.w	sl, [sp]
   1d296:	ab12      	add	r3, sp, #72	; 0x48
   1d298:	9502      	str	r5, [sp, #8]
   1d29a:	f7fe fca7 	bl	1bbec <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(icmp_code),
   1d29e:	f10d 0317 	add.w	r3, sp, #23
   1d2a2:	4601      	mov	r1, r0
   1d2a4:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
   1d2a8:	9301      	str	r3, [sp, #4]
   1d2aa:	f8cd a000 	str.w	sl, [sp]
   1d2ae:	ab12      	add	r3, sp, #72	; 0x48
   1d2b0:	9502      	str	r5, [sp, #8]
   1d2b2:	4620      	mov	r0, r4
   1d2b4:	f7fe fc9a 	bl	1bbec <net_pkt_write>
	net_pkt_write(pkt, frag, pos, &pos, 4, (u8_t *)&unused, PKT_WAIT_TIME);
   1d2b8:	f10d 0a58 	add.w	sl, sp, #88	; 0x58
   1d2bc:	2304      	movs	r3, #4
   1d2be:	9300      	str	r3, [sp, #0]
   1d2c0:	4601      	mov	r1, r0
   1d2c2:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
   1d2c6:	9502      	str	r5, [sp, #8]
   1d2c8:	f8cd a004 	str.w	sl, [sp, #4]
   1d2cc:	ab12      	add	r3, sp, #72	; 0x48
   1d2ce:	4620      	mov	r0, r4
   1d2d0:	f7fe fc8c 	bl	1bbec <net_pkt_write>
	if (type == NET_ICMPV6_PARAM_PROBLEM) {
   1d2d4:	f1b9 0f04 	cmp.w	r9, #4
   1d2d8:	d10c      	bne.n	1d2f4 <net_icmpv6_send_error+0x168>
		sys_put_be32(param, (u8_t *)net_pkt_icmp_data(pkt) +
   1d2da:	4620      	mov	r0, r4
   1d2dc:	f7fe fd22 	bl	1bd24 <net_pkt_icmp_data>
	sys_put_be16(val >> 16, dst);
   1d2e0:	ea4f 4318 	mov.w	r3, r8, lsr #16
	dst[0] = val >> 8;
   1d2e4:	0a1a      	lsrs	r2, r3, #8
	dst[1] = val;
   1d2e6:	7143      	strb	r3, [r0, #5]
	dst[0] = val >> 8;
   1d2e8:	f3c8 2307 	ubfx	r3, r8, #8, #8
   1d2ec:	7102      	strb	r2, [r0, #4]
   1d2ee:	7183      	strb	r3, [r0, #6]
	dst[1] = val;
   1d2f0:	f880 8007 	strb.w	r8, [r0, #7]
	return pkt->frags->data;
   1d2f4:	68b3      	ldr	r3, [r6, #8]
   1d2f6:	f8d3 c008 	ldr.w	ip, [r3, #8]
	if (net_is_ipv6_addr_mcast(&NET_IPV6_HDR(orig)->dst)) {
   1d2fa:	f89c 3018 	ldrb.w	r3, [ip, #24]
   1d2fe:	2bff      	cmp	r3, #255	; 0xff
   1d300:	f10c 0508 	add.w	r5, ip, #8
   1d304:	f10c 0218 	add.w	r2, ip, #24
   1d308:	d158      	bne.n	1d3bc <net_icmpv6_send_error+0x230>
   1d30a:	68a3      	ldr	r3, [r4, #8]
   1d30c:	f8d3 8008 	ldr.w	r8, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst,
   1d310:	ab06      	add	r3, sp, #24
   1d312:	469e      	mov	lr, r3
   1d314:	6828      	ldr	r0, [r5, #0]
   1d316:	6869      	ldr	r1, [r5, #4]
   1d318:	469c      	mov	ip, r3
   1d31a:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   1d31e:	3508      	adds	r5, #8
   1d320:	4295      	cmp	r5, r2
   1d322:	4663      	mov	r3, ip
   1d324:	d1f6      	bne.n	1d314 <net_icmpv6_send_error+0x188>
   1d326:	f108 0c18 	add.w	ip, r8, #24
   1d32a:	ad0a      	add	r5, sp, #40	; 0x28
   1d32c:	4673      	mov	r3, lr
   1d32e:	cb03      	ldmia	r3!, {r0, r1}
   1d330:	42ab      	cmp	r3, r5
   1d332:	f8cc 0000 	str.w	r0, [ip]
   1d336:	f8cc 1004 	str.w	r1, [ip, #4]
   1d33a:	469e      	mov	lr, r3
   1d33c:	f10c 0c08 	add.w	ip, ip, #8
   1d340:	d1f4      	bne.n	1d32c <net_icmpv6_send_error+0x1a0>
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1d342:	4638      	mov	r0, r7
   1d344:	4611      	mov	r1, r2
   1d346:	f7fd ff2b 	bl	1b1a0 <net_if_ipv6_select_src_addr>
   1d34a:	462f      	mov	r7, r5
   1d34c:	4603      	mov	r3, r0
   1d34e:	f100 0e10 	add.w	lr, r0, #16
   1d352:	6818      	ldr	r0, [r3, #0]
   1d354:	6859      	ldr	r1, [r3, #4]
   1d356:	463a      	mov	r2, r7
   1d358:	c203      	stmia	r2!, {r0, r1}
   1d35a:	3308      	adds	r3, #8
   1d35c:	4573      	cmp	r3, lr
   1d35e:	4617      	mov	r7, r2
   1d360:	d1f7      	bne.n	1d352 <net_icmpv6_send_error+0x1c6>
   1d362:	f108 0308 	add.w	r3, r8, #8
   1d366:	af0e      	add	r7, sp, #56	; 0x38
   1d368:	462a      	mov	r2, r5
   1d36a:	ca03      	ldmia	r2!, {r0, r1}
   1d36c:	42ba      	cmp	r2, r7
   1d36e:	6018      	str	r0, [r3, #0]
   1d370:	6059      	str	r1, [r3, #4]
   1d372:	4615      	mov	r5, r2
   1d374:	f103 0308 	add.w	r3, r3, #8
   1d378:	d1f6      	bne.n	1d368 <net_icmpv6_send_error+0x1dc>
	net_pkt_ll_src(pkt)->addr = net_pkt_ll_dst(orig)->addr;
   1d37a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   1d37c:	6223      	str	r3, [r4, #32]
	net_pkt_ll_src(pkt)->len = net_pkt_ll_dst(orig)->len;
   1d37e:	f896 302c 	ldrb.w	r3, [r6, #44]	; 0x2c
   1d382:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	net_pkt_ll_dst(pkt)->addr = net_pkt_ll_src(orig)->addr;
   1d386:	6a33      	ldr	r3, [r6, #32]
   1d388:	62a3      	str	r3, [r4, #40]	; 0x28
	net_pkt_ll_dst(pkt)->len = net_pkt_ll_src(orig)->len;
   1d38a:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
   1d38e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	frag = net_icmpv6_set_chksum(pkt, pkt->frags);
   1d392:	68a1      	ldr	r1, [r4, #8]
   1d394:	4620      	mov	r0, r4
   1d396:	f7ff fbfb 	bl	1cb90 <net_icmpv6_set_chksum>
	if (net_send_data(pkt) >= 0) {
   1d39a:	4620      	mov	r0, r4
   1d39c:	f7fd f90e 	bl	1a5bc <net_send_data>
   1d3a0:	2800      	cmp	r0, #0
   1d3a2:	da4c      	bge.n	1d43e <net_icmpv6_send_error+0x2b2>
	int err = -EIO;
   1d3a4:	f06f 0504 	mvn.w	r5, #4
	net_pkt_unref(pkt);
   1d3a8:	4620      	mov	r0, r4
   1d3aa:	f7fe fa70 	bl	1b88e <net_pkt_unref>
   1d3ae:	e703      	b.n	1d1b8 <net_icmpv6_send_error+0x2c>
		extra_len = sizeof(struct net_ipv6_hdr) +
   1d3b0:	2530      	movs	r5, #48	; 0x30
   1d3b2:	e724      	b.n	1d1fe <net_icmpv6_send_error+0x72>
		extra_len = sizeof(struct net_ipv6_hdr) +
   1d3b4:	253c      	movs	r5, #60	; 0x3c
   1d3b6:	e722      	b.n	1d1fe <net_icmpv6_send_error+0x72>
			extra_len = 0;
   1d3b8:	2500      	movs	r5, #0
   1d3ba:	e720      	b.n	1d1fe <net_icmpv6_send_error+0x72>
		net_ipaddr_copy(&addr, &NET_IPV6_HDR(orig)->src);
   1d3bc:	af0e      	add	r7, sp, #56	; 0x38
   1d3be:	463b      	mov	r3, r7
   1d3c0:	6828      	ldr	r0, [r5, #0]
   1d3c2:	6869      	ldr	r1, [r5, #4]
   1d3c4:	46be      	mov	lr, r7
   1d3c6:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   1d3ca:	3508      	adds	r5, #8
   1d3cc:	4295      	cmp	r5, r2
   1d3ce:	4677      	mov	r7, lr
   1d3d0:	d1f6      	bne.n	1d3c0 <net_icmpv6_send_error+0x234>
   1d3d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1d3d4:	af0a      	add	r7, sp, #40	; 0x28
   1d3d6:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   1d3da:	68a3      	ldr	r3, [r4, #8]
   1d3dc:	f8d3 e008 	ldr.w	lr, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1d3e0:	aa12      	add	r2, sp, #72	; 0x48
   1d3e2:	f10c 0c28 	add.w	ip, ip, #40	; 0x28
   1d3e6:	6828      	ldr	r0, [r5, #0]
   1d3e8:	6869      	ldr	r1, [r5, #4]
   1d3ea:	4613      	mov	r3, r2
   1d3ec:	c303      	stmia	r3!, {r0, r1}
   1d3ee:	3508      	adds	r5, #8
   1d3f0:	4565      	cmp	r5, ip
   1d3f2:	461a      	mov	r2, r3
   1d3f4:	d1f7      	bne.n	1d3e6 <net_icmpv6_send_error+0x25a>
   1d3f6:	ab12      	add	r3, sp, #72	; 0x48
   1d3f8:	f10e 0508 	add.w	r5, lr, #8
   1d3fc:	461a      	mov	r2, r3
   1d3fe:	ca03      	ldmia	r2!, {r0, r1}
   1d400:	4552      	cmp	r2, sl
   1d402:	6028      	str	r0, [r5, #0]
   1d404:	6069      	str	r1, [r5, #4]
   1d406:	4613      	mov	r3, r2
   1d408:	f105 0508 	add.w	r5, r5, #8
   1d40c:	d1f6      	bne.n	1d3fc <net_icmpv6_send_error+0x270>
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, &addr);
   1d40e:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
   1d412:	af1a      	add	r7, sp, #104	; 0x68
   1d414:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}
   1d418:	4653      	mov	r3, sl
   1d41a:	f10e 0218 	add.w	r2, lr, #24
   1d41e:	461d      	mov	r5, r3
   1d420:	cd03      	ldmia	r5!, {r0, r1}
   1d422:	42bd      	cmp	r5, r7
   1d424:	6010      	str	r0, [r2, #0]
   1d426:	6051      	str	r1, [r2, #4]
   1d428:	462b      	mov	r3, r5
   1d42a:	f102 0208 	add.w	r2, r2, #8
   1d42e:	d1f6      	bne.n	1d41e <net_icmpv6_send_error+0x292>
   1d430:	e7a3      	b.n	1d37a <net_icmpv6_send_error+0x1ee>
		err = -ENOMEM;
   1d432:	f06f 050b 	mvn.w	r5, #11
   1d436:	e7b7      	b.n	1d3a8 <net_icmpv6_send_error+0x21c>
		err = -ENOMEM;
   1d438:	f06f 050b 	mvn.w	r5, #11
   1d43c:	e6bc      	b.n	1d1b8 <net_icmpv6_send_error+0x2c>
		return 0;
   1d43e:	2500      	movs	r5, #0
   1d440:	e6ba      	b.n	1d1b8 <net_icmpv6_send_error+0x2c>
	...

0001d444 <net_icmpv6_input>:
	return -EIO;
}

enum net_verdict net_icmpv6_input(struct net_pkt *pkt,
				  u8_t type, u8_t code)
{
   1d444:	b410      	push	{r4}
   1d446:	4b0a      	ldr	r3, [pc, #40]	; (1d470 <net_icmpv6_input+0x2c>)
   1d448:	681b      	ldr	r3, [r3, #0]
	struct net_icmpv6_handler *cb;

	net_stats_update_icmp_recv();

	SYS_SLIST_FOR_EACH_CONTAINER(&handlers, cb, node) {
   1d44a:	461c      	mov	r4, r3
   1d44c:	b16b      	cbz	r3, 1d46a <net_icmpv6_input+0x26>
		if (cb->type == type && (cb->code == code || cb->code == 0)) {
   1d44e:	791b      	ldrb	r3, [r3, #4]
   1d450:	428b      	cmp	r3, r1
   1d452:	d107      	bne.n	1d464 <net_icmpv6_input+0x20>
   1d454:	7963      	ldrb	r3, [r4, #5]
   1d456:	4293      	cmp	r3, r2
   1d458:	d102      	bne.n	1d460 <net_icmpv6_input+0x1c>
			return cb->handler(pkt);
   1d45a:	68a3      	ldr	r3, [r4, #8]
	}

	net_stats_update_icmp_drop();

	return NET_DROP;
}
   1d45c:	bc10      	pop	{r4}
			return cb->handler(pkt);
   1d45e:	4718      	bx	r3
		if (cb->type == type && (cb->code == code || cb->code == 0)) {
   1d460:	2b00      	cmp	r3, #0
   1d462:	d0fa      	beq.n	1d45a <net_icmpv6_input+0x16>
	return node->next;
   1d464:	6823      	ldr	r3, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&handlers, cb, node) {
   1d466:	2b00      	cmp	r3, #0
   1d468:	d1ef      	bne.n	1d44a <net_icmpv6_input+0x6>
}
   1d46a:	2002      	movs	r0, #2
   1d46c:	bc10      	pop	{r4}
   1d46e:	4770      	bx	lr
   1d470:	200027dc 	.word	0x200027dc

0001d474 <net_icmpv6_init>:
	.handler = handle_echo_request,
};

void net_icmpv6_init(void)
{
	net_icmpv6_register_handler(&echo_request_handler);
   1d474:	4801      	ldr	r0, [pc, #4]	; (1d47c <net_icmpv6_init+0x8>)
   1d476:	f7ff bb81 	b.w	1cb7c <net_icmpv6_register_handler>
   1d47a:	bf00      	nop
   1d47c:	2000a138 	.word	0x2000a138

0001d480 <net_nbr_unref>:
#if defined(CONFIG_NET_DEBUG_IPV6_NBR_CACHE)
	NET_DBG("nbr %p ref %u (%s():%d)", nbr, nbr->ref - 1, caller, line);
#else
	NET_DBG("nbr %p ref %u", nbr, nbr->ref - 1);
#endif
	if (--nbr->ref) {
   1d480:	7803      	ldrb	r3, [r0, #0]
   1d482:	3b01      	subs	r3, #1
   1d484:	b2db      	uxtb	r3, r3
   1d486:	7003      	strb	r3, [r0, #0]
   1d488:	b913      	cbnz	r3, 1d490 <net_nbr_unref+0x10>
		return;
	}

	if (nbr->remove) {
   1d48a:	6903      	ldr	r3, [r0, #16]
   1d48c:	b103      	cbz	r3, 1d490 <net_nbr_unref+0x10>
		nbr->remove(nbr);
   1d48e:	4718      	bx	r3
   1d490:	4770      	bx	lr

0001d492 <net_nbr_get>:
			((sizeof(struct net_nbr) +
			  start->size + start->extra_data_size) * idx));
}

struct net_nbr *net_nbr_get(struct net_nbr_table *table)
{
   1d492:	b530      	push	{r4, r5, lr}
	int i;

	for (i = 0; i < table->nbr_count; i++) {
   1d494:	8905      	ldrh	r5, [r0, #8]
   1d496:	2100      	movs	r1, #0
   1d498:	42a9      	cmp	r1, r5
   1d49a:	db01      	blt.n	1d4a0 <net_nbr_get+0xe>

			return net_nbr_ref(nbr);
		}
	}

	return NULL;
   1d49c:	2200      	movs	r2, #0
   1d49e:	e00d      	b.n	1d4bc <net_nbr_get+0x2a>
		struct net_nbr *nbr = get_nbr(table->nbr, i);
   1d4a0:	6804      	ldr	r4, [r0, #0]
			  start->size + start->extra_data_size) * idx));
   1d4a2:	88a2      	ldrh	r2, [r4, #4]
   1d4a4:	8863      	ldrh	r3, [r4, #2]
   1d4a6:	4413      	add	r3, r2
   1d4a8:	3314      	adds	r3, #20
   1d4aa:	434b      	muls	r3, r1
	return (struct net_nbr *)((void *)start +
   1d4ac:	18e2      	adds	r2, r4, r3
		if (!nbr->ref) {
   1d4ae:	5ce3      	ldrb	r3, [r4, r3]
   1d4b0:	b933      	cbnz	r3, 1d4c0 <net_nbr_get+0x2e>
			nbr->data = nbr->__nbr;
   1d4b2:	f102 0314 	add.w	r3, r2, #20
   1d4b6:	60d3      	str	r3, [r2, #12]
	nbr->ref++;
   1d4b8:	2301      	movs	r3, #1
   1d4ba:	7013      	strb	r3, [r2, #0]
}
   1d4bc:	4610      	mov	r0, r2
   1d4be:	bd30      	pop	{r4, r5, pc}
	for (i = 0; i < table->nbr_count; i++) {
   1d4c0:	3101      	adds	r1, #1
   1d4c2:	e7e9      	b.n	1d498 <net_nbr_get+0x6>

0001d4c4 <net_nbr_link>:

int net_nbr_link(struct net_nbr *nbr, struct net_if *iface,
		 struct net_linkaddr *lladdr)
{
   1d4c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int i, avail = -1;

	if (nbr->idx != NET_NBR_LLADDR_UNKNOWN) {
   1d4c8:	7843      	ldrb	r3, [r0, #1]
   1d4ca:	2bff      	cmp	r3, #255	; 0xff
{
   1d4cc:	4607      	mov	r7, r0
   1d4ce:	4688      	mov	r8, r1
   1d4d0:	4691      	mov	r9, r2
	if (nbr->idx != NET_NBR_LLADDR_UNKNOWN) {
   1d4d2:	d144      	bne.n	1d55e <net_nbr_link+0x9a>
   1d4d4:	4e26      	ldr	r6, [pc, #152]	; (1d570 <net_nbr_link+0xac>)
   1d4d6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1d4da:	2500      	movs	r5, #0
		return -EALREADY;
	}

	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
		if (avail < 0 && !net_neighbor_lladdr[i].ref) {
   1d4dc:	1c62      	adds	r2, r4, #1
   1d4de:	d103      	bne.n	1d4e8 <net_nbr_link+0x24>
   1d4e0:	79b3      	ldrb	r3, [r6, #6]
   1d4e2:	2b00      	cmp	r3, #0
   1d4e4:	bf08      	it	eq
   1d4e6:	462c      	moveq	r4, r5
			avail = i;
		}

		if (net_neighbor_lladdr[i].ref &&
   1d4e8:	79b3      	ldrb	r3, [r6, #6]
   1d4ea:	b19b      	cbz	r3, 1d514 <net_nbr_link+0x50>
		    !memcmp(lladdr->addr,
   1d4ec:	f899 2004 	ldrb.w	r2, [r9, #4]
   1d4f0:	f8d9 0000 	ldr.w	r0, [r9]
   1d4f4:	4631      	mov	r1, r6
   1d4f6:	f7e3 f91f 	bl	738 <memcmp>
		if (net_neighbor_lladdr[i].ref &&
   1d4fa:	b958      	cbnz	r0, 1d514 <net_nbr_link+0x50>
			    net_neighbor_lladdr[i].lladdr.addr,
			    lladdr->len)) {
			/* We found same lladdr in nbr cache so just
			 * increase the ref count.
			 */
			net_neighbor_lladdr[i].ref++;
   1d4fc:	4b1d      	ldr	r3, [pc, #116]	; (1d574 <net_nbr_link+0xb0>)
   1d4fe:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
   1d502:	4413      	add	r3, r2
   1d504:	7a1a      	ldrb	r2, [r3, #8]
   1d506:	3201      	adds	r2, #1
   1d508:	721a      	strb	r2, [r3, #8]

			nbr->idx = i;
   1d50a:	707d      	strb	r5, [r7, #1]
			nbr->iface = iface;
   1d50c:	f8c7 8008 	str.w	r8, [r7, #8]

			return 0;
   1d510:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1d514:	3501      	adds	r5, #1
   1d516:	2d08      	cmp	r5, #8
   1d518:	f106 0609 	add.w	r6, r6, #9
   1d51c:	d1de      	bne.n	1d4dc <net_nbr_link+0x18>
		}
	}

	if (avail < 0) {
   1d51e:	1c63      	adds	r3, r4, #1
   1d520:	d021      	beq.n	1d566 <net_nbr_link+0xa2>
	}

	/* There was no existing entry in the lladdr cache,
	 * so allocate one for this lladdr.
	 */
	net_neighbor_lladdr[avail].ref++;
   1d522:	4d14      	ldr	r5, [pc, #80]	; (1d574 <net_nbr_link+0xb0>)
   1d524:	00e6      	lsls	r6, r4, #3
   1d526:	1930      	adds	r0, r6, r4
   1d528:	182b      	adds	r3, r5, r0
   1d52a:	7a1a      	ldrb	r2, [r3, #8]
   1d52c:	3201      	adds	r2, #1
   1d52e:	721a      	strb	r2, [r3, #8]
	nbr->idx = avail;
   1d530:	707c      	strb	r4, [r7, #1]

	net_linkaddr_set(&net_neighbor_lladdr[avail].lladdr, lladdr->addr,
   1d532:	f8d9 1000 	ldr.w	r1, [r9]
   1d536:	f899 2004 	ldrb.w	r2, [r9, #4]
 * This value should always be <= NET_LINK_ADDR_MAX_LENGTH.
 */
static inline int net_linkaddr_set(struct net_linkaddr_storage *lladdr_store,
				   u8_t *new_addr, u8_t new_len)
{
	if (!lladdr_store || !new_addr) {
   1d53a:	b131      	cbz	r1, 1d54a <net_nbr_link+0x86>
		return -EINVAL;
	}

	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
   1d53c:	2a06      	cmp	r2, #6
   1d53e:	d804      	bhi.n	1d54a <net_nbr_link+0x86>
		return -EMSGSIZE;
	}

	lladdr_store->len = new_len;
	memcpy(lladdr_store->addr, new_addr, new_len);
   1d540:	3002      	adds	r0, #2
	lladdr_store->len = new_len;
   1d542:	705a      	strb	r2, [r3, #1]
	memcpy(lladdr_store->addr, new_addr, new_len);
   1d544:	4428      	add	r0, r5
   1d546:	f7e3 f924 	bl	792 <memcpy>
			 lladdr->len);
	net_neighbor_lladdr[avail].lladdr.len = lladdr->len;
   1d54a:	4434      	add	r4, r6
   1d54c:	4425      	add	r5, r4
   1d54e:	f899 3004 	ldrb.w	r3, [r9, #4]
   1d552:	706b      	strb	r3, [r5, #1]

	nbr->iface = iface;

	return 0;
   1d554:	2000      	movs	r0, #0
	nbr->iface = iface;
   1d556:	f8c7 8008 	str.w	r8, [r7, #8]
	return 0;
   1d55a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EALREADY;
   1d55e:	f06f 0044 	mvn.w	r0, #68	; 0x44
   1d562:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -ENOENT;
   1d566:	f06f 0001 	mvn.w	r0, #1
}
   1d56a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1d56e:	bf00      	nop
   1d570:	200027e6 	.word	0x200027e6
   1d574:	200027e4 	.word	0x200027e4

0001d578 <net_nbr_unlink>:

int net_nbr_unlink(struct net_nbr *nbr, struct net_linkaddr *lladdr)
{
   1d578:	b510      	push	{r4, lr}
   1d57a:	4604      	mov	r4, r0
	ARG_UNUSED(lladdr);

	if (nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
   1d57c:	7840      	ldrb	r0, [r0, #1]
   1d57e:	28ff      	cmp	r0, #255	; 0xff
   1d580:	d014      	beq.n	1d5ac <net_nbr_unlink+0x34>
	}

	NET_ASSERT(nbr->idx < CONFIG_NET_IPV6_MAX_NEIGHBORS);
	NET_ASSERT(net_neighbor_lladdr[nbr->idx].ref > 0);

	net_neighbor_lladdr[nbr->idx].ref--;
   1d582:	4a0c      	ldr	r2, [pc, #48]	; (1d5b4 <net_nbr_unlink+0x3c>)
   1d584:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
   1d588:	4413      	add	r3, r2
   1d58a:	7a19      	ldrb	r1, [r3, #8]
   1d58c:	3901      	subs	r1, #1
   1d58e:	b2c9      	uxtb	r1, r1
   1d590:	7219      	strb	r1, [r3, #8]

	if (!net_neighbor_lladdr[nbr->idx].ref) {
   1d592:	b931      	cbnz	r1, 1d5a2 <net_nbr_unlink+0x2a>
		memset(net_neighbor_lladdr[nbr->idx].lladdr.addr, 0,
   1d594:	2309      	movs	r3, #9
   1d596:	fb03 2000 	mla	r0, r3, r0, r2
   1d59a:	3002      	adds	r0, #2
   1d59c:	2206      	movs	r2, #6
   1d59e:	f7e3 f924 	bl	7ea <memset>
		       sizeof(net_neighbor_lladdr[nbr->idx].lladdr.addr));
	}

	nbr->idx = NET_NBR_LLADDR_UNKNOWN;
   1d5a2:	23ff      	movs	r3, #255	; 0xff
	nbr->iface = NULL;
   1d5a4:	2000      	movs	r0, #0
	nbr->idx = NET_NBR_LLADDR_UNKNOWN;
   1d5a6:	7063      	strb	r3, [r4, #1]
	nbr->iface = NULL;
   1d5a8:	60a0      	str	r0, [r4, #8]

	return 0;
   1d5aa:	bd10      	pop	{r4, pc}
		return -EALREADY;
   1d5ac:	f06f 0044 	mvn.w	r0, #68	; 0x44
}
   1d5b0:	bd10      	pop	{r4, pc}
   1d5b2:	bf00      	nop
   1d5b4:	200027e4 	.word	0x200027e4

0001d5b8 <net_nbr_get_lladdr>:
	NET_ASSERT_INFO(idx < CONFIG_NET_IPV6_MAX_NEIGHBORS,
			"idx %d >= max %d", idx,
			CONFIG_NET_IPV6_MAX_NEIGHBORS);

	return &net_neighbor_lladdr[idx].lladdr;
}
   1d5b8:	4b02      	ldr	r3, [pc, #8]	; (1d5c4 <net_nbr_get_lladdr+0xc>)
	return &net_neighbor_lladdr[idx].lladdr;
   1d5ba:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
}
   1d5be:	4418      	add	r0, r3
   1d5c0:	4770      	bx	lr
   1d5c2:	bf00      	nop
   1d5c4:	200027e4 	.word	0x200027e4

0001d5c8 <net_buf_frags_len>:
{
   1d5c8:	4603      	mov	r3, r0
	size_t bytes = 0;
   1d5ca:	2000      	movs	r0, #0
	while (buf) {
   1d5cc:	b903      	cbnz	r3, 1d5d0 <net_buf_frags_len+0x8>
}
   1d5ce:	4770      	bx	lr
		bytes += buf->len;
   1d5d0:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   1d5d2:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   1d5d4:	4410      	add	r0, r2
   1d5d6:	e7f9      	b.n	1d5cc <net_buf_frags_len+0x4>

0001d5d8 <net_is_ipv6_addr_unspecified>:
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1d5d8:	6802      	ldr	r2, [r0, #0]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1d5da:	b942      	cbnz	r2, 1d5ee <net_is_ipv6_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1d5dc:	6843      	ldr	r3, [r0, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1d5de:	b933      	cbnz	r3, 1d5ee <net_is_ipv6_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1d5e0:	6882      	ldr	r2, [r0, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1d5e2:	b922      	cbnz	r2, 1d5ee <net_is_ipv6_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   1d5e4:	68c0      	ldr	r0, [r0, #12]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1d5e6:	fab0 f080 	clz	r0, r0
   1d5ea:	0940      	lsrs	r0, r0, #5
   1d5ec:	4770      	bx	lr
   1d5ee:	2000      	movs	r0, #0
   1d5f0:	4770      	bx	lr

0001d5f2 <net_if_get_ll_reserve>:
   1d5f2:	6843      	ldr	r3, [r0, #4]
   1d5f4:	689b      	ldr	r3, [r3, #8]
   1d5f6:	4718      	bx	r3

0001d5f8 <ipv6_nbr_set_state>:
	return "<invalid state>";
}

static void ipv6_nbr_set_state(struct net_nbr *nbr,
			       enum net_ipv6_nbr_state new_state)
{
   1d5f8:	68c3      	ldr	r3, [r0, #12]
	if (new_state == net_ipv6_nbr_data(nbr)->state ||
   1d5fa:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
   1d5fe:	428a      	cmp	r2, r1
   1d600:	d003      	beq.n	1d60a <ipv6_nbr_set_state+0x12>
   1d602:	2a05      	cmp	r2, #5

	NET_DBG("nbr %p %s -> %s", nbr,
		net_ipv6_nbr_state2str(net_ipv6_nbr_data(nbr)->state),
		net_ipv6_nbr_state2str(new_state));

	net_ipv6_nbr_data(nbr)->state = new_state;
   1d604:	bf18      	it	ne
   1d606:	f883 1064 	strbne.w	r1, [r3, #100]	; 0x64
   1d60a:	4770      	bx	lr

0001d60c <net_neighbor_table_clear>:

	return;
}

void net_neighbor_table_clear(struct net_nbr_table *table)
{
   1d60c:	4770      	bx	lr

0001d60e <nbr_clear_ns_pending>:
{
   1d60e:	b510      	push	{r4, lr}
   1d610:	4604      	mov	r4, r0
	k_delayed_work_cancel(&data->send_ns);
   1d612:	303c      	adds	r0, #60	; 0x3c
   1d614:	f004 fe18 	bl	22248 <k_delayed_work_cancel>
	if (data->pending) {
   1d618:	6820      	ldr	r0, [r4, #0]
   1d61a:	b118      	cbz	r0, 1d624 <nbr_clear_ns_pending+0x16>
		net_pkt_unref(data->pending);
   1d61c:	f7fe f937 	bl	1b88e <net_pkt_unref>
		data->pending = NULL;
   1d620:	2300      	movs	r3, #0
   1d622:	6023      	str	r3, [r4, #0]
   1d624:	bd10      	pop	{r4, pc}

0001d626 <nbr_free>:
{
   1d626:	b510      	push	{r4, lr}
   1d628:	4604      	mov	r4, r0
	nbr_clear_ns_pending(net_ipv6_nbr_data(nbr));
   1d62a:	68c0      	ldr	r0, [r0, #12]
   1d62c:	f7ff ffef 	bl	1d60e <nbr_clear_ns_pending>
	k_delayed_work_cancel(&net_ipv6_nbr_data(nbr)->reachable);
   1d630:	68e0      	ldr	r0, [r4, #12]
   1d632:	3014      	adds	r0, #20
   1d634:	f004 fe08 	bl	22248 <k_delayed_work_cancel>
	net_nbr_unref(nbr);
   1d638:	4620      	mov	r0, r4
   1d63a:	f7ff ff21 	bl	1d480 <net_nbr_unref>
	net_nbr_unlink(nbr, NULL);
   1d63e:	4620      	mov	r0, r4
   1d640:	2100      	movs	r1, #0
}
   1d642:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	net_nbr_unlink(nbr, NULL);
   1d646:	f7ff bf97 	b.w	1d578 <net_nbr_unlink>

0001d64a <net_linkaddr_set>:
{
   1d64a:	b510      	push	{r4, lr}
	if (!lladdr_store || !new_addr) {
   1d64c:	b140      	cbz	r0, 1d660 <net_linkaddr_set+0x16>
   1d64e:	b139      	cbz	r1, 1d660 <net_linkaddr_set+0x16>
	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
   1d650:	2a06      	cmp	r2, #6
   1d652:	d808      	bhi.n	1d666 <net_linkaddr_set+0x1c>
	lladdr_store->len = new_len;
   1d654:	7042      	strb	r2, [r0, #1]
	memcpy(lladdr_store->addr, new_addr, new_len);
   1d656:	3002      	adds	r0, #2
   1d658:	f7e3 f89b 	bl	792 <memcpy>

	return 0;
   1d65c:	2000      	movs	r0, #0
   1d65e:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1d660:	f06f 0015 	mvn.w	r0, #21
   1d664:	bd10      	pop	{r4, pc}
		return -EMSGSIZE;
   1d666:	f06f 0023 	mvn.w	r0, #35	; 0x23
}
   1d66a:	bd10      	pop	{r4, pc}

0001d66c <net_is_solicited>:
{
   1d66c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   1d66e:	a901      	add	r1, sp, #4
   1d670:	f7ff fcc8 	bl	1d004 <net_icmpv6_get_na_hdr>
	if (!na_hdr) {
   1d674:	b110      	cbz	r0, 1d67c <net_is_solicited+0x10>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_SOLICITED;
   1d676:	7800      	ldrb	r0, [r0, #0]
   1d678:	f3c0 1080 	ubfx	r0, r0, #6, #1
}
   1d67c:	b007      	add	sp, #28
   1d67e:	f85d fb04 	ldr.w	pc, [sp], #4

0001d682 <net_is_override>:
{
   1d682:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   1d684:	a901      	add	r1, sp, #4
   1d686:	f7ff fcbd 	bl	1d004 <net_icmpv6_get_na_hdr>
	if (!na_hdr) {
   1d68a:	b110      	cbz	r0, 1d692 <net_is_override+0x10>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_OVERRIDE;
   1d68c:	7800      	ldrb	r0, [r0, #0]
   1d68e:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   1d692:	b007      	add	sp, #28
   1d694:	f85d fb04 	ldr.w	pc, [sp], #4

0001d698 <net_is_router>:
{
   1d698:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   1d69a:	a901      	add	r1, sp, #4
   1d69c:	f7ff fcb2 	bl	1d004 <net_icmpv6_get_na_hdr>
	if (!na_hdr) {
   1d6a0:	b108      	cbz	r0, 1d6a6 <net_is_router+0xe>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_ROUTER;
   1d6a2:	7800      	ldrb	r0, [r0, #0]
   1d6a4:	09c0      	lsrs	r0, r0, #7
}
   1d6a6:	b007      	add	sp, #28
   1d6a8:	f85d fb04 	ldr.w	pc, [sp], #4

0001d6ac <setup_headers>:
	       llao_len - lladdr->len - 2);
}

static void setup_headers(struct net_pkt *pkt, u8_t nd6_len,
			  u8_t icmp_type)
{
   1d6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d6ae:	4605      	mov	r5, r0
	net_buf_add(pkt->frags,
   1d6b0:	6880      	ldr	r0, [r0, #8]
{
   1d6b2:	460e      	mov	r6, r1
	net_buf_add(pkt->frags,
   1d6b4:	3008      	adds	r0, #8
   1d6b6:	212c      	movs	r1, #44	; 0x2c
{
   1d6b8:	4617      	mov	r7, r2
	net_buf_add(pkt->frags,
   1d6ba:	f7fb fe77 	bl	193ac <net_buf_simple_add>
   1d6be:	68ab      	ldr	r3, [r5, #8]
   1d6c0:	689b      	ldr	r3, [r3, #8]
		    sizeof(struct net_ipv6_hdr) +
		    sizeof(struct net_icmp_hdr));

	NET_IPV6_HDR(pkt)->vtc = 0x60;
   1d6c2:	2260      	movs	r2, #96	; 0x60
   1d6c4:	701a      	strb	r2, [r3, #0]
	NET_IPV6_HDR(pkt)->tcflow = 0;
	NET_IPV6_HDR(pkt)->flow = 0;
	NET_IPV6_HDR(pkt)->len[0] = 0;
	NET_IPV6_HDR(pkt)->len[1] = NET_ICMPH_LEN + nd6_len;

	NET_IPV6_HDR(pkt)->nexthdr = IPPROTO_ICMPV6;
   1d6c6:	223a      	movs	r2, #58	; 0x3a
	NET_IPV6_HDR(pkt)->tcflow = 0;
   1d6c8:	2400      	movs	r4, #0
	NET_IPV6_HDR(pkt)->nexthdr = IPPROTO_ICMPV6;
   1d6ca:	719a      	strb	r2, [r3, #6]
	NET_IPV6_HDR(pkt)->len[1] = NET_ICMPH_LEN + nd6_len;
   1d6cc:	3604      	adds	r6, #4
	NET_IPV6_HDR(pkt)->hop_limit = NET_IPV6_ND_HOP_LIMIT;
   1d6ce:	22ff      	movs	r2, #255	; 0xff
	NET_IPV6_HDR(pkt)->tcflow = 0;
   1d6d0:	705c      	strb	r4, [r3, #1]
	NET_IPV6_HDR(pkt)->flow = 0;
   1d6d2:	709c      	strb	r4, [r3, #2]
   1d6d4:	70dc      	strb	r4, [r3, #3]
	NET_IPV6_HDR(pkt)->len[0] = 0;
   1d6d6:	711c      	strb	r4, [r3, #4]
	NET_IPV6_HDR(pkt)->len[1] = NET_ICMPH_LEN + nd6_len;
   1d6d8:	715e      	strb	r6, [r3, #5]
	NET_IPV6_HDR(pkt)->hop_limit = NET_IPV6_ND_HOP_LIMIT;
   1d6da:	71da      	strb	r2, [r3, #7]

	/* In this special case where we know there are no long extension
	 * headers, so we can use this header cast.
	 */
	net_pkt_icmp_data(pkt)->type = icmp_type;
   1d6dc:	4628      	mov	r0, r5
   1d6de:	f7fe fb21 	bl	1bd24 <net_pkt_icmp_data>
   1d6e2:	7007      	strb	r7, [r0, #0]
	net_pkt_icmp_data(pkt)->code = 0;
   1d6e4:	4628      	mov	r0, r5
   1d6e6:	f7fe fb1d 	bl	1bd24 <net_pkt_icmp_data>
   1d6ea:	7044      	strb	r4, [r0, #1]
   1d6ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001d6ee <net_pkt_ll_clear>:
{
   1d6ee:	b510      	push	{r4, lr}
	return pkt->frags->data;
   1d6f0:	6883      	ldr	r3, [r0, #8]
	return net_pkt_ip_data(pkt) - net_pkt_ll_reserve(pkt);
   1d6f2:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
{
   1d6f6:	4604      	mov	r4, r0
	return net_pkt_ip_data(pkt) - net_pkt_ll_reserve(pkt);
   1d6f8:	6898      	ldr	r0, [r3, #8]
	memset(net_pkt_ll(pkt), 0, net_pkt_ll_reserve(pkt));
   1d6fa:	2100      	movs	r1, #0
   1d6fc:	1a80      	subs	r0, r0, r2
   1d6fe:	f7e3 f874 	bl	7ea <memset>
	net_pkt_ll_src(pkt)->addr = NULL;
   1d702:	2300      	movs	r3, #0
	net_pkt_ll_src(pkt)->len = 0;
   1d704:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	net_pkt_ll_src(pkt)->addr = NULL;
   1d708:	6223      	str	r3, [r4, #32]
	net_pkt_ll_src(pkt)->len = 0;
   1d70a:	bd10      	pop	{r4, pc}

0001d70c <set_llao>:
{
   1d70c:	b570      	push	{r4, r5, r6, lr}
	llao[NET_ICMPV6_OPT_TYPE_OFFSET] = type;
   1d70e:	700b      	strb	r3, [r1, #0]
	llao[NET_ICMPV6_OPT_LEN_OFFSET] = llao_len >> 3;
   1d710:	08d3      	lsrs	r3, r2, #3
{
   1d712:	460c      	mov	r4, r1
   1d714:	4606      	mov	r6, r0
	llao[NET_ICMPV6_OPT_LEN_OFFSET] = llao_len >> 3;
   1d716:	704b      	strb	r3, [r1, #1]
{
   1d718:	4615      	mov	r5, r2
	memcpy(&llao[NET_ICMPV6_OPT_DATA_OFFSET], lladdr->addr, lladdr->len);
   1d71a:	6801      	ldr	r1, [r0, #0]
   1d71c:	7902      	ldrb	r2, [r0, #4]
   1d71e:	1ca0      	adds	r0, r4, #2
   1d720:	f7e3 f837 	bl	792 <memcpy>
	memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   1d724:	7930      	ldrb	r0, [r6, #4]
	       llao_len - lladdr->len - 2);
   1d726:	1a2a      	subs	r2, r5, r0
	memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   1d728:	3002      	adds	r0, #2
   1d72a:	4420      	add	r0, r4
   1d72c:	3a02      	subs	r2, #2
   1d72e:	2100      	movs	r1, #0
}
   1d730:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   1d734:	f7e3 b859 	b.w	7ea <memset>

0001d738 <update_ll_reserve.part.32>:
static struct net_pkt *update_ll_reserve(struct net_pkt *pkt,
   1d738:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d73c:	4680      	mov	r8, r0
	reserve = net_if_get_ll_reserve(net_pkt_iface(pkt), addr);
   1d73e:	6940      	ldr	r0, [r0, #20]
   1d740:	f7ff ff57 	bl	1d5f2 <net_if_get_ll_reserve>
	if (reserve == net_pkt_ll_reserve(pkt)) {
   1d744:	f898 3034 	ldrb.w	r3, [r8, #52]	; 0x34
   1d748:	4283      	cmp	r3, r0
   1d74a:	d04a      	beq.n	1d7e2 <update_ll_reserve.part.32+0xaa>
	orig_frag = pkt->frags;
   1d74c:	f8d8 7008 	ldr.w	r7, [r8, #8]
	net_pkt_set_ll_reserve(pkt, reserve);
   1d750:	f888 0034 	strb.w	r0, [r8, #52]	; 0x34
	pkt->frags = NULL;
   1d754:	2500      	movs	r5, #0
	copy_len = orig_frag->len;
   1d756:	89be      	ldrh	r6, [r7, #12]
	pkt->frags = NULL;
   1d758:	f8c8 5008 	str.w	r5, [r8, #8]
	pos = 0;
   1d75c:	46a9      	mov	r9, r5
	room_len = 0;
   1d75e:	462c      	mov	r4, r5
			room_len = 0;
   1d760:	46ab      	mov	fp, r5
		if (!room_len) {
   1d762:	b974      	cbnz	r4, 1d782 <update_ll_reserve.part.32+0x4a>
			frag = net_pkt_get_frag(pkt, K_FOREVER);
   1d764:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1d768:	4640      	mov	r0, r8
   1d76a:	f7fe f82b 	bl	1b7c4 <net_pkt_get_frag>
			net_pkt_frag_add(pkt, frag);
   1d76e:	4601      	mov	r1, r0
			frag = net_pkt_get_frag(pkt, K_FOREVER);
   1d770:	4605      	mov	r5, r0
			net_pkt_frag_add(pkt, frag);
   1d772:	4640      	mov	r0, r8
   1d774:	f7fe f8b2 	bl	1b8dc <net_pkt_frag_add>
			room_len = net_buf_tailroom(frag);
   1d778:	f105 0008 	add.w	r0, r5, #8
   1d77c:	f7fb fe82 	bl	19484 <net_buf_simple_tailroom>
   1d780:	b284      	uxth	r4, r0
		if (room_len >= copy_len) {
   1d782:	42b4      	cmp	r4, r6
   1d784:	f105 0008 	add.w	r0, r5, #8
   1d788:	d313      	bcc.n	1d7b2 <update_ll_reserve.part.32+0x7a>
			memcpy(net_buf_add(frag, copy_len),
   1d78a:	4631      	mov	r1, r6
   1d78c:	f7fb fe0e 	bl	193ac <net_buf_simple_add>
			       orig_frag->data + pos, copy_len);
   1d790:	68b9      	ldr	r1, [r7, #8]
			memcpy(net_buf_add(frag, copy_len),
   1d792:	4632      	mov	r2, r6
   1d794:	4449      	add	r1, r9
   1d796:	f7e2 fffc 	bl	792 <memcpy>
			orig_frag = orig_frag->frags;
   1d79a:	f8d7 a000 	ldr.w	sl, [r7]
			tmp->frags = NULL;
   1d79e:	f8c7 b000 	str.w	fp, [r7]
			net_pkt_frag_unref(tmp);
   1d7a2:	4638      	mov	r0, r7
   1d7a4:	f7fe f86f 	bl	1b886 <net_pkt_frag_unref>
			if (!orig_frag) {
   1d7a8:	f1ba 0f00 	cmp.w	sl, #0
   1d7ac:	d112      	bne.n	1d7d4 <update_ll_reserve.part.32+0x9c>
   1d7ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memcpy(net_buf_add(frag, room_len),
   1d7b2:	4621      	mov	r1, r4
   1d7b4:	f7fb fdfa 	bl	193ac <net_buf_simple_add>
			       orig_frag->data + pos, room_len);
   1d7b8:	68b9      	ldr	r1, [r7, #8]
			memcpy(net_buf_add(frag, room_len),
   1d7ba:	4622      	mov	r2, r4
   1d7bc:	4449      	add	r1, r9
   1d7be:	f7e2 ffe8 	bl	792 <memcpy>
			copy_len -= room_len;
   1d7c2:	1b36      	subs	r6, r6, r4
			pos += room_len;
   1d7c4:	44a1      	add	r9, r4
			copy_len -= room_len;
   1d7c6:	b2b6      	uxth	r6, r6
			pos += room_len;
   1d7c8:	fa1f f989 	uxth.w	r9, r9
   1d7cc:	46ba      	mov	sl, r7
			room_len = 0;
   1d7ce:	2400      	movs	r4, #0
   1d7d0:	4657      	mov	r7, sl
   1d7d2:	e7c6      	b.n	1d762 <update_ll_reserve.part.32+0x2a>
			room_len -= copy_len;
   1d7d4:	1ba4      	subs	r4, r4, r6
   1d7d6:	b2a4      	uxth	r4, r4
			copy_len = orig_frag->len;
   1d7d8:	f8ba 600c 	ldrh.w	r6, [sl, #12]
			pos = 0;
   1d7dc:	f04f 0900 	mov.w	r9, #0
   1d7e0:	e7f6      	b.n	1d7d0 <update_ll_reserve.part.32+0x98>
   1d7e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001d7e6 <net_if_ipv6_addr_lookup_by_iface>:
{
   1d7e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d7e8:	4605      	mov	r5, r0
   1d7ea:	460f      	mov	r7, r1
   1d7ec:	f100 0630 	add.w	r6, r0, #48	; 0x30
   1d7f0:	2400      	movs	r4, #0
		if (!iface->ipv6.unicast[i].is_used ||
   1d7f2:	f896 3064 	ldrb.w	r3, [r6, #100]	; 0x64
   1d7f6:	b93b      	cbnz	r3, 1d808 <net_if_ipv6_addr_lookup_by_iface+0x22>
   1d7f8:	346c      	adds	r4, #108	; 0x6c
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1d7fa:	f5b4 7fa2 	cmp.w	r4, #324	; 0x144
   1d7fe:	f106 066c 	add.w	r6, r6, #108	; 0x6c
   1d802:	d1f6      	bne.n	1d7f2 <net_if_ipv6_addr_lookup_by_iface+0xc>
	return NULL;
   1d804:	2000      	movs	r0, #0
   1d806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!iface->ipv6.unicast[i].is_used ||
   1d808:	f836 3c04 	ldrh.w	r3, [r6, #-4]
   1d80c:	2b0a      	cmp	r3, #10
   1d80e:	d1f3      	bne.n	1d7f8 <net_if_ipv6_addr_lookup_by_iface+0x12>
	if (memcmp(addr1, addr2, bytes)) {
   1d810:	2210      	movs	r2, #16
   1d812:	4631      	mov	r1, r6
   1d814:	4638      	mov	r0, r7
   1d816:	f7e2 ff8f 	bl	738 <memcmp>
   1d81a:	2800      	cmp	r0, #0
   1d81c:	d1ec      	bne.n	1d7f8 <net_if_ipv6_addr_lookup_by_iface+0x12>
			return &iface->ipv6.unicast[i];
   1d81e:	342c      	adds	r4, #44	; 0x2c
   1d820:	1928      	adds	r0, r5, r4
}
   1d822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001d824 <nbr_new.isra.30>:
static struct net_nbr *nbr_new(struct net_if *iface,
   1d824:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1d828:	4606      	mov	r6, r0
	struct net_nbr *nbr = net_nbr_get(&net_neighbor.table);
   1d82a:	481d      	ldr	r0, [pc, #116]	; (1d8a0 <nbr_new.isra.30+0x7c>)
static struct net_nbr *nbr_new(struct net_if *iface,
   1d82c:	460d      	mov	r5, r1
   1d82e:	4690      	mov	r8, r2
	struct net_nbr *nbr = net_nbr_get(&net_neighbor.table);
   1d830:	f7ff fe2f 	bl	1d492 <net_nbr_get>
	if (!nbr) {
   1d834:	4604      	mov	r4, r0
   1d836:	b370      	cbz	r0, 1d896 <nbr_new.isra.30+0x72>
	nbr->idx = NET_NBR_LLADDR_UNKNOWN;
   1d838:	23ff      	movs	r3, #255	; 0xff
   1d83a:	7043      	strb	r3, [r0, #1]
	nbr->iface = iface;
   1d83c:	6086      	str	r6, [r0, #8]
	net_ipaddr_copy(&net_ipv6_nbr_data(nbr)->addr, addr);
   1d83e:	462b      	mov	r3, r5
   1d840:	68c6      	ldr	r6, [r0, #12]
   1d842:	466d      	mov	r5, sp
   1d844:	f103 0e10 	add.w	lr, r3, #16
   1d848:	466f      	mov	r7, sp
   1d84a:	6818      	ldr	r0, [r3, #0]
   1d84c:	6859      	ldr	r1, [r3, #4]
   1d84e:	462a      	mov	r2, r5
   1d850:	c203      	stmia	r2!, {r0, r1}
   1d852:	3308      	adds	r3, #8
   1d854:	4573      	cmp	r3, lr
   1d856:	4615      	mov	r5, r2
   1d858:	d1f7      	bne.n	1d84a <nbr_new.isra.30+0x26>
   1d85a:	1d33      	adds	r3, r6, #4
   1d85c:	aa04      	add	r2, sp, #16
   1d85e:	463d      	mov	r5, r7
   1d860:	cd03      	ldmia	r5!, {r0, r1}
   1d862:	4295      	cmp	r5, r2
   1d864:	6018      	str	r0, [r3, #0]
   1d866:	6059      	str	r1, [r3, #4]
   1d868:	462f      	mov	r7, r5
   1d86a:	f103 0308 	add.w	r3, r3, #8
   1d86e:	d1f6      	bne.n	1d85e <nbr_new.isra.30+0x3a>
	ipv6_nbr_set_state(nbr, state);
   1d870:	4641      	mov	r1, r8
   1d872:	4620      	mov	r0, r4
   1d874:	f7ff fec0 	bl	1d5f8 <ipv6_nbr_set_state>
   1d878:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_init(&net_ipv6_nbr_data(nbr)->reachable,
   1d87a:	490a      	ldr	r1, [pc, #40]	; (1d8a4 <nbr_new.isra.30+0x80>)
	net_ipv6_nbr_data(nbr)->is_router = is_router;
   1d87c:	2301      	movs	r3, #1
   1d87e:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
	net_ipv6_nbr_data(nbr)->pending = NULL;
   1d882:	2300      	movs	r3, #0
   1d884:	f840 3b14 	str.w	r3, [r0], #20
	k_delayed_work_init(&net_ipv6_nbr_data(nbr)->reachable,
   1d888:	f004 fcc0 	bl	2220c <k_delayed_work_init>
	k_delayed_work_init(&net_ipv6_nbr_data(nbr)->send_ns,
   1d88c:	68e0      	ldr	r0, [r4, #12]
   1d88e:	4906      	ldr	r1, [pc, #24]	; (1d8a8 <nbr_new.isra.30+0x84>)
   1d890:	303c      	adds	r0, #60	; 0x3c
   1d892:	f004 fcbb 	bl	2220c <k_delayed_work_init>
}
   1d896:	4620      	mov	r0, r4
   1d898:	b004      	add	sp, #16
   1d89a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d89e:	bf00      	nop
   1d8a0:	2000a15c 	.word	0x2000a15c
   1d8a4:	0001ede1 	.word	0x0001ede1
   1d8a8:	0001d929 	.word	0x0001d929

0001d8ac <net_neighbor_data_remove>:
   1d8ac:	4770      	bx	lr

0001d8ae <net_pkt_append_u8>:
{
   1d8ae:	b507      	push	{r0, r1, r2, lr}
   1d8b0:	aa02      	add	r2, sp, #8
	return net_pkt_append(pkt, len, data, timeout) == len;
   1d8b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
{
   1d8b6:	f802 1d01 	strb.w	r1, [r2, #-1]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   1d8ba:	2101      	movs	r1, #1
   1d8bc:	f7fe f8da 	bl	1ba74 <net_pkt_append>
}
   1d8c0:	1e43      	subs	r3, r0, #1
   1d8c2:	4258      	negs	r0, r3
   1d8c4:	4158      	adcs	r0, r3
   1d8c6:	b003      	add	sp, #12
   1d8c8:	f85d fb04 	ldr.w	pc, [sp], #4

0001d8cc <net_pkt_append_be16>:
{
   1d8cc:	b507      	push	{r0, r1, r2, lr}
	u16_t value = sys_cpu_to_be16(data);
   1d8ce:	aa02      	add	r2, sp, #8
   1d8d0:	ba49      	rev16	r1, r1
   1d8d2:	f822 1d02 	strh.w	r1, [r2, #-2]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   1d8d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d8da:	2102      	movs	r1, #2
   1d8dc:	f7fe f8ca 	bl	1ba74 <net_pkt_append>
}
   1d8e0:	1e83      	subs	r3, r0, #2
   1d8e2:	4258      	negs	r0, r3
   1d8e4:	4158      	adcs	r0, r3
   1d8e6:	b003      	add	sp, #12
   1d8e8:	f85d fb04 	ldr.w	pc, [sp], #4

0001d8ec <nbr_lookup.isra.29>:
static struct net_nbr *nbr_lookup(struct net_nbr_table *table,
   1d8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d8ee:	4c0d      	ldr	r4, [pc, #52]	; (1d924 <nbr_lookup.isra.29+0x38>)
   1d8f0:	4605      	mov	r5, r0
   1d8f2:	460e      	mov	r6, r1
   1d8f4:	f504 6780 	add.w	r7, r4, #1024	; 0x400
		if (!nbr->ref) {
   1d8f8:	7823      	ldrb	r3, [r4, #0]
   1d8fa:	b923      	cbnz	r3, 1d906 <nbr_lookup.isra.29+0x1a>
   1d8fc:	3480      	adds	r4, #128	; 0x80
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1d8fe:	42bc      	cmp	r4, r7
   1d900:	d1fa      	bne.n	1d8f8 <nbr_lookup.isra.29+0xc>
	return NULL;
   1d902:	2000      	movs	r0, #0
   1d904:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (iface && nbr->iface != iface) {
   1d906:	b115      	cbz	r5, 1d90e <nbr_lookup.isra.29+0x22>
   1d908:	68a3      	ldr	r3, [r4, #8]
   1d90a:	429d      	cmp	r5, r3
   1d90c:	d1f6      	bne.n	1d8fc <nbr_lookup.isra.29+0x10>
		if (net_ipv6_addr_cmp(&net_ipv6_nbr_data(nbr)->addr, addr)) {
   1d90e:	68e0      	ldr	r0, [r4, #12]
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1d910:	2210      	movs	r2, #16
   1d912:	4631      	mov	r1, r6
   1d914:	3004      	adds	r0, #4
   1d916:	f7e2 ff0f 	bl	738 <memcmp>
   1d91a:	2800      	cmp	r0, #0
   1d91c:	d1ee      	bne.n	1d8fc <nbr_lookup.isra.29+0x10>
   1d91e:	4620      	mov	r0, r4
}
   1d920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d922:	bf00      	nop
   1d924:	2000a168 	.word	0x2000a168

0001d928 <ns_reply_timeout>:
{
   1d928:	4910      	ldr	r1, [pc, #64]	; (1d96c <ns_reply_timeout+0x44>)
   1d92a:	b538      	push	{r3, r4, r5, lr}
	struct net_ipv6_nbr_data *data = CONTAINER_OF(work,
   1d92c:	f1a0 023c 	sub.w	r2, r0, #60	; 0x3c
{
   1d930:	4604      	mov	r4, r0
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1d932:	2300      	movs	r3, #0
   1d934:	eb01 15c3 	add.w	r5, r1, r3, lsl #7
		if (nbr->data == (u8_t *)data) {
   1d938:	68e8      	ldr	r0, [r5, #12]
   1d93a:	4282      	cmp	r2, r0
   1d93c:	d011      	beq.n	1d962 <ns_reply_timeout+0x3a>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1d93e:	3301      	adds	r3, #1
   1d940:	2b08      	cmp	r3, #8
   1d942:	d1f7      	bne.n	1d934 <ns_reply_timeout+0xc>
   1d944:	bd38      	pop	{r3, r4, r5, pc}
	net_pkt_unref(data->pending);
   1d946:	f7fd ffa2 	bl	1b88e <net_pkt_unref>
	net_pkt_unref(data->pending);
   1d94a:	f854 0c3c 	ldr.w	r0, [r4, #-60]
   1d94e:	f7fd ff9e 	bl	1b88e <net_pkt_unref>
	data->pending = NULL;
   1d952:	2300      	movs	r3, #0
   1d954:	f844 3c3c 	str.w	r3, [r4, #-60]
	net_nbr_unref(nbr);
   1d958:	4628      	mov	r0, r5
}
   1d95a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_nbr_unref(nbr);
   1d95e:	f7ff bd8f 	b.w	1d480 <net_nbr_unref>
	if (!data->pending) {
   1d962:	f854 0c3c 	ldr.w	r0, [r4, #-60]
   1d966:	2800      	cmp	r0, #0
   1d968:	d1ed      	bne.n	1d946 <ns_reply_timeout+0x1e>
   1d96a:	bd38      	pop	{r3, r4, r5, pc}
   1d96c:	2000a168 	.word	0x2000a168

0001d970 <net_ipv6_nbr_rm>:
{
   1d970:	b570      	push	{r4, r5, r6, lr}
   1d972:	4605      	mov	r5, r0
   1d974:	460e      	mov	r6, r1
	nbr = nbr_lookup(&net_neighbor.table, iface, addr);
   1d976:	f7ff ffb9 	bl	1d8ec <nbr_lookup.isra.29>
	if (!nbr) {
   1d97a:	4604      	mov	r4, r0
   1d97c:	b170      	cbz	r0, 1d99c <net_ipv6_nbr_rm+0x2c>
	net_route_del_by_nexthop(iface, addr);
   1d97e:	4631      	mov	r1, r6
   1d980:	4628      	mov	r0, r5
   1d982:	f001 ff5f 	bl	1f844 <net_route_del_by_nexthop>
	nbr_free(nbr);
   1d986:	4620      	mov	r0, r4
   1d988:	f7ff fe4d 	bl	1d626 <nbr_free>
   1d98c:	2300      	movs	r3, #0
   1d98e:	461a      	mov	r2, r3
   1d990:	4629      	mov	r1, r5
   1d992:	4803      	ldr	r0, [pc, #12]	; (1d9a0 <net_ipv6_nbr_rm+0x30>)
   1d994:	f001 fe2e 	bl	1f5f4 <net_mgmt_event_notify_with_info>
	return true;
   1d998:	2001      	movs	r0, #1
   1d99a:	bd70      	pop	{r4, r5, r6, pc}
}
   1d99c:	bd70      	pop	{r4, r5, r6, pc}
   1d99e:	bf00      	nop
   1d9a0:	f0600010 	.word	0xf0600010

0001d9a4 <net_ipv6_unspecified_address>:
}
   1d9a4:	4800      	ldr	r0, [pc, #0]	; (1d9a8 <net_ipv6_unspecified_address+0x4>)
   1d9a6:	4770      	bx	lr
   1d9a8:	000272b8 	.word	0x000272b8

0001d9ac <net_ipv6_create_raw>:
{
   1d9ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d9b0:	460e      	mov	r6, r1
   1d9b2:	b089      	sub	sp, #36	; 0x24
	header = net_pkt_get_frag(pkt, K_FOREVER);
   1d9b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
{
   1d9b8:	4605      	mov	r5, r0
   1d9ba:	4617      	mov	r7, r2
   1d9bc:	4699      	mov	r9, r3
	header = net_pkt_get_frag(pkt, K_FOREVER);
   1d9be:	f7fd ff01 	bl	1b7c4 <net_pkt_get_frag>
	net_pkt_frag_insert(pkt, header);
   1d9c2:	4601      	mov	r1, r0
	header = net_pkt_get_frag(pkt, K_FOREVER);
   1d9c4:	4680      	mov	r8, r0
	net_pkt_frag_insert(pkt, header);
   1d9c6:	4628      	mov	r0, r5
   1d9c8:	f7fd ffa2 	bl	1b910 <net_pkt_frag_insert>
   1d9cc:	f8d5 e008 	ldr.w	lr, [r5, #8]
	return pkt->frags->data;
   1d9d0:	f8de 4008 	ldr.w	r4, [lr, #8]
	NET_IPV6_HDR(pkt)->tcflow = 0;
   1d9d4:	2200      	movs	r2, #0
	NET_IPV6_HDR(pkt)->vtc = 0x60;
   1d9d6:	2360      	movs	r3, #96	; 0x60
   1d9d8:	7023      	strb	r3, [r4, #0]
	NET_IPV6_HDR(pkt)->tcflow = 0;
   1d9da:	7062      	strb	r2, [r4, #1]
	NET_IPV6_HDR(pkt)->flow = 0;
   1d9dc:	70a2      	strb	r2, [r4, #2]
   1d9de:	70e2      	strb	r2, [r4, #3]
	NET_IPV6_HDR(pkt)->nexthdr = 0;
   1d9e0:	71a2      	strb	r2, [r4, #6]
   1d9e2:	f895 203e 	ldrb.w	r2, [r5, #62]	; 0x3e
	NET_IPV6_HDR(pkt)->hop_limit = net_pkt_ipv6_hop_limit(pkt);
   1d9e6:	71e2      	strb	r2, [r4, #7]
	if (NET_IPV6_HDR(pkt)->hop_limit == 0) {
   1d9e8:	b912      	cbnz	r2, 1d9f0 <net_ipv6_create_raw+0x44>
   1d9ea:	f899 324c 	ldrb.w	r3, [r9, #588]	; 0x24c
		NET_IPV6_HDR(pkt)->hop_limit =
   1d9ee:	71e3      	strb	r3, [r4, #7]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, dst);
   1d9f0:	463a      	mov	r2, r7
   1d9f2:	f107 0910 	add.w	r9, r7, #16
   1d9f6:	466b      	mov	r3, sp
   1d9f8:	466f      	mov	r7, sp
   1d9fa:	6810      	ldr	r0, [r2, #0]
   1d9fc:	6851      	ldr	r1, [r2, #4]
   1d9fe:	469c      	mov	ip, r3
   1da00:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   1da04:	3208      	adds	r2, #8
   1da06:	454a      	cmp	r2, r9
   1da08:	4663      	mov	r3, ip
   1da0a:	d1f6      	bne.n	1d9fa <net_ipv6_create_raw+0x4e>
   1da0c:	f104 0c18 	add.w	ip, r4, #24
   1da10:	aa04      	add	r2, sp, #16
   1da12:	463b      	mov	r3, r7
   1da14:	cb03      	ldmia	r3!, {r0, r1}
   1da16:	4293      	cmp	r3, r2
   1da18:	f8cc 0000 	str.w	r0, [ip]
   1da1c:	f8cc 1004 	str.w	r1, [ip, #4]
   1da20:	461f      	mov	r7, r3
   1da22:	f10c 0c08 	add.w	ip, ip, #8
   1da26:	d1f4      	bne.n	1da12 <net_ipv6_create_raw+0x66>
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, src);
   1da28:	4633      	mov	r3, r6
   1da2a:	4617      	mov	r7, r2
   1da2c:	f106 0c10 	add.w	ip, r6, #16
   1da30:	6818      	ldr	r0, [r3, #0]
   1da32:	6859      	ldr	r1, [r3, #4]
   1da34:	463e      	mov	r6, r7
   1da36:	c603      	stmia	r6!, {r0, r1}
   1da38:	3308      	adds	r3, #8
   1da3a:	4563      	cmp	r3, ip
   1da3c:	4637      	mov	r7, r6
   1da3e:	d1f7      	bne.n	1da30 <net_ipv6_create_raw+0x84>
   1da40:	4613      	mov	r3, r2
   1da42:	3408      	adds	r4, #8
   1da44:	ae08      	add	r6, sp, #32
   1da46:	461a      	mov	r2, r3
   1da48:	ca03      	ldmia	r2!, {r0, r1}
   1da4a:	42b2      	cmp	r2, r6
   1da4c:	6020      	str	r0, [r4, #0]
   1da4e:	6061      	str	r1, [r4, #4]
   1da50:	4613      	mov	r3, r2
   1da52:	f104 0408 	add.w	r4, r4, #8
   1da56:	d1f6      	bne.n	1da46 <net_ipv6_create_raw+0x9a>
	pkt->ipv6_ext_len = len;
   1da58:	2300      	movs	r3, #0
   1da5a:	f885 303f 	strb.w	r3, [r5, #63]	; 0x3f
	NET_IPV6_HDR(pkt)->nexthdr = next_header;
   1da5e:	f8de 3008 	ldr.w	r3, [lr, #8]
   1da62:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   1da66:	719a      	strb	r2, [r3, #6]
	pkt->family = family;
   1da68:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
   1da6c:	220a      	movs	r2, #10
	pkt->ip_hdr_len = len;
   1da6e:	2128      	movs	r1, #40	; 0x28
	pkt->family = family;
   1da70:	f362 03c6 	bfi	r3, r2, #3, #4
	pkt->ip_hdr_len = len;
   1da74:	f885 1035 	strb.w	r1, [r5, #53]	; 0x35
	pkt->family = family;
   1da78:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
	net_buf_add(header, sizeof(struct net_ipv6_hdr));
   1da7c:	f108 0008 	add.w	r0, r8, #8
   1da80:	f7fb fc94 	bl	193ac <net_buf_simple_add>
}
   1da84:	4628      	mov	r0, r5
   1da86:	b009      	add	sp, #36	; 0x24
   1da88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001da8c <net_ipv6_create>:
{
   1da8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1da8e:	4605      	mov	r5, r0
   1da90:	460e      	mov	r6, r1
   1da92:	461f      	mov	r7, r3
	if (!src) {
   1da94:	4614      	mov	r4, r2
   1da96:	b902      	cbnz	r2, 1da9a <net_ipv6_create+0xe>
		src = ((struct sockaddr_in6_ptr *)&context->local)->sin6_addr;
   1da98:	68c4      	ldr	r4, [r0, #12]
	if (net_is_ipv6_addr_unspecified(src)
   1da9a:	4620      	mov	r0, r4
   1da9c:	f7ff fd9c 	bl	1d5d8 <net_is_ipv6_addr_unspecified>
   1daa0:	b910      	cbnz	r0, 1daa8 <net_ipv6_create+0x1c>
	    || net_is_ipv6_addr_mcast(src)) {
   1daa2:	7823      	ldrb	r3, [r4, #0]
   1daa4:	2bff      	cmp	r3, #255	; 0xff
   1daa6:	d104      	bne.n	1dab2 <net_ipv6_create+0x26>
		src = net_if_ipv6_select_src_addr(net_pkt_iface(pkt),
   1daa8:	4639      	mov	r1, r7
   1daaa:	6970      	ldr	r0, [r6, #20]
   1daac:	f7fd fb78 	bl	1b1a0 <net_if_ipv6_select_src_addr>
   1dab0:	4604      	mov	r4, r0
	return net_if_get_by_index(context->iface);
   1dab2:	f895 005c 	ldrb.w	r0, [r5, #92]	; 0x5c
   1dab6:	f7fd fcb7 	bl	1b428 <net_if_get_by_index>
	if (context->flags & NET_CONTEXT_PROTO) {
   1daba:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
	return IPPROTO_UDP;
   1dabe:	f013 0f40 	tst.w	r3, #64	; 0x40
   1dac2:	bf14      	ite	ne
   1dac4:	2306      	movne	r3, #6
   1dac6:	2311      	moveq	r3, #17
	return net_ipv6_create_raw(pkt,
   1dac8:	9300      	str	r3, [sp, #0]
   1daca:	463a      	mov	r2, r7
   1dacc:	4603      	mov	r3, r0
   1dace:	4621      	mov	r1, r4
   1dad0:	4630      	mov	r0, r6
   1dad2:	f7ff ff6b 	bl	1d9ac <net_ipv6_create_raw>
}
   1dad6:	b003      	add	sp, #12
   1dad8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001dada <net_ipv6_finalize_raw>:
{
   1dada:	b538      	push	{r3, r4, r5, lr}
   1dadc:	4604      	mov	r4, r0
   1dade:	460d      	mov	r5, r1
	net_pkt_compact(pkt);
   1dae0:	f7fd ff83 	bl	1b9ea <net_pkt_compact>
   1dae4:	68a1      	ldr	r1, [r4, #8]
	return net_buf_frags_len(pkt->frags);
   1dae6:	4608      	mov	r0, r1
   1dae8:	f7ff fd6e 	bl	1d5c8 <net_buf_frags_len>
	total_len -= sizeof(struct net_ipv6_hdr);
   1daec:	3828      	subs	r0, #40	; 0x28
	return pkt->frags->data;
   1daee:	688b      	ldr	r3, [r1, #8]
	NET_IPV6_HDR(pkt)->len[0] = total_len >> 8;
   1daf0:	0a02      	lsrs	r2, r0, #8
	if (next_header == IPPROTO_UDP) {
   1daf2:	2d11      	cmp	r5, #17
	NET_IPV6_HDR(pkt)->len[0] = total_len >> 8;
   1daf4:	711a      	strb	r2, [r3, #4]
	NET_IPV6_HDR(pkt)->len[1] = total_len & 0xff;
   1daf6:	7158      	strb	r0, [r3, #5]
	if (next_header == IPPROTO_UDP) {
   1daf8:	d104      	bne.n	1db04 <net_ipv6_finalize_raw+0x2a>
		net_udp_set_chksum(pkt, pkt->frags);
   1dafa:	4620      	mov	r0, r4
   1dafc:	f003 f80d 	bl	20b1a <net_udp_set_chksum>
}
   1db00:	2000      	movs	r0, #0
   1db02:	bd38      	pop	{r3, r4, r5, pc}
	if (next_header == IPPROTO_TCP) {
   1db04:	2d06      	cmp	r5, #6
   1db06:	d103      	bne.n	1db10 <net_ipv6_finalize_raw+0x36>
		net_tcp_set_chksum(pkt, pkt->frags);
   1db08:	4620      	mov	r0, r4
   1db0a:	f002 fdea 	bl	206e2 <net_tcp_set_chksum>
   1db0e:	e7f7      	b.n	1db00 <net_ipv6_finalize_raw+0x26>
	if (next_header == IPPROTO_ICMPV6) {
   1db10:	2d3a      	cmp	r5, #58	; 0x3a
   1db12:	d1f5      	bne.n	1db00 <net_ipv6_finalize_raw+0x26>
		net_icmpv6_set_chksum(pkt, pkt->frags);
   1db14:	4620      	mov	r0, r4
   1db16:	f7ff f83b 	bl	1cb90 <net_icmpv6_set_chksum>
   1db1a:	e7f1      	b.n	1db00 <net_ipv6_finalize_raw+0x26>

0001db1c <send_mldv2_raw>:

	return pkt;
}

static int send_mldv2_raw(struct net_if *iface, struct net_buf *frags)
{
   1db1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1db1e:	b08b      	sub	sp, #44	; 0x2c
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   1db20:	f240 23ff 	movw	r3, #767	; 0x2ff
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   1db24:	2500      	movs	r5, #0
   1db26:	460f      	mov	r7, r1
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   1db28:	f8ad 3018 	strh.w	r3, [sp, #24]
	int ret;

	/* Sent to all MLDv2-capable routers */
	net_ipv6_addr_create(&dst, 0xff02, 0, 0, 0, 0, 0, 0, 0x0016);

	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, &dst),
   1db2c:	a906      	add	r1, sp, #24
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   1db2e:	f44f 53b0 	mov.w	r3, #5632	; 0x1600
{
   1db32:	4606      	mov	r6, r0
   1db34:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   1db38:	f8ad 501a 	strh.w	r5, [sp, #26]
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   1db3c:	f8ad 501c 	strh.w	r5, [sp, #28]
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   1db40:	f8ad 501e 	strh.w	r5, [sp, #30]
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   1db44:	f8ad 5020 	strh.w	r5, [sp, #32]
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   1db48:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   1db4c:	f8ad 5024 	strh.w	r5, [sp, #36]	; 0x24
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, &dst),
   1db50:	f7ff fd4f 	bl	1d5f2 <net_if_get_ll_reserve>
   1db54:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1db58:	f7fd fe1c 	bl	1b794 <net_pkt_get_reserve_tx>
				     K_FOREVER);

	pkt = net_ipv6_create_raw(pkt,
   1db5c:	a906      	add	r1, sp, #24
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, &dst),
   1db5e:	4604      	mov	r4, r0
	pkt = net_ipv6_create_raw(pkt,
   1db60:	4630      	mov	r0, r6
   1db62:	f7fd fb1d 	bl	1b1a0 <net_if_ipv6_select_src_addr>
   1db66:	4633      	mov	r3, r6
   1db68:	4601      	mov	r1, r0
   1db6a:	aa06      	add	r2, sp, #24
   1db6c:	4620      	mov	r0, r4
   1db6e:	9500      	str	r5, [sp, #0]
   1db70:	f7ff ff1c 	bl	1d9ac <net_ipv6_create_raw>
   1db74:	6883      	ldr	r3, [r0, #8]
				  net_if_ipv6_select_src_addr(iface, &dst),
				  &dst,
				  iface,
				  NET_IPV6_NEXTHDR_HBHO);

	NET_IPV6_HDR(pkt)->hop_limit = 1; /* RFC 3810 ch 7.4 */
   1db76:	689a      	ldr	r2, [r3, #8]
   1db78:	2101      	movs	r1, #1
   1db7a:	71d1      	strb	r1, [r2, #7]

	net_pkt_set_ipv6_hdr_prev(pkt, pkt->frags->len);
   1db7c:	899b      	ldrh	r3, [r3, #12]
	pkt->ipv6_prev_hdr_start = offset;
   1db7e:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
	pkt = net_ipv6_create_raw(pkt,
   1db82:	4604      	mov	r4, r0

	/* Add hop-by-hop option and router alert option, RFC 3810 ch 5. */
	net_pkt_append_u8(pkt, IPPROTO_ICMPV6);
   1db84:	213a      	movs	r1, #58	; 0x3a
   1db86:	f7ff fe92 	bl	1d8ae <net_pkt_append_u8>
	net_pkt_append_u8(pkt, 0); /* length (0 means 8 bytes) */
   1db8a:	4629      	mov	r1, r5
   1db8c:	4620      	mov	r0, r4
   1db8e:	f7ff fe8e 	bl	1d8ae <net_pkt_append_u8>

#define ROUTER_ALERT_LEN 8

	/* IPv6 router alert option is described in RFC 2711. */
	net_pkt_append_be16(pkt, 0x0502); /* RFC 2711 ch 2.1 */
   1db92:	f240 5102 	movw	r1, #1282	; 0x502
   1db96:	4620      	mov	r0, r4
   1db98:	f7ff fe98 	bl	1d8cc <net_pkt_append_be16>
	net_pkt_append_be16(pkt, 0); /* pkt contains MLD msg */
   1db9c:	4629      	mov	r1, r5
   1db9e:	4620      	mov	r0, r4
   1dba0:	f7ff fe94 	bl	1d8cc <net_pkt_append_be16>

	net_pkt_append_u8(pkt, 0); /* padding */
   1dba4:	4629      	mov	r1, r5
   1dba6:	4620      	mov	r0, r4
   1dba8:	f7ff fe81 	bl	1d8ae <net_pkt_append_u8>
	net_pkt_append_u8(pkt, 0); /* padding */
   1dbac:	4629      	mov	r1, r5
   1dbae:	4620      	mov	r0, r4
   1dbb0:	f7ff fe7d 	bl	1d8ae <net_pkt_append_u8>

	/* ICMPv6 header */
	net_pkt_append_u8(pkt, NET_ICMPV6_MLDv2); /* type */
   1dbb4:	218f      	movs	r1, #143	; 0x8f
   1dbb6:	4620      	mov	r0, r4
   1dbb8:	f7ff fe79 	bl	1d8ae <net_pkt_append_u8>
	net_pkt_append_u8(pkt, 0); /* code */
   1dbbc:	4629      	mov	r1, r5
   1dbbe:	4620      	mov	r0, r4
   1dbc0:	f7ff fe75 	bl	1d8ae <net_pkt_append_u8>
	net_pkt_append_be16(pkt, 0); /* chksum */
   1dbc4:	4629      	mov	r1, r5
   1dbc6:	4620      	mov	r0, r4
   1dbc8:	f7ff fe80 	bl	1d8cc <net_pkt_append_be16>

	pkt->frags->len = NET_IPV6ICMPH_LEN + ROUTER_ALERT_LEN;
   1dbcc:	68a3      	ldr	r3, [r4, #8]
   1dbce:	2234      	movs	r2, #52	; 0x34
   1dbd0:	819a      	strh	r2, [r3, #12]
	pkt->iface = iface;
   1dbd2:	6166      	str	r6, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1dbd4:	7d73      	ldrb	r3, [r6, #21]
   1dbd6:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1dbda:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	net_pkt_set_iface(pkt, iface);

	net_pkt_append_be16(pkt, 0); /* reserved field */
   1dbde:	4629      	mov	r1, r5
   1dbe0:	4620      	mov	r0, r4
   1dbe2:	f7ff fe73 	bl	1d8cc <net_pkt_append_be16>

	/* Insert the actual multicast record(s) here */
	net_pkt_frag_add(pkt, frags);
   1dbe6:	4639      	mov	r1, r7
   1dbe8:	4620      	mov	r0, r4
   1dbea:	f7fd fe77 	bl	1b8dc <net_pkt_frag_add>

	ret = net_ipv6_finalize_raw(pkt, NET_IPV6_NEXTHDR_HBHO);
   1dbee:	4629      	mov	r1, r5
   1dbf0:	4620      	mov	r0, r4
   1dbf2:	f7ff ff72 	bl	1dada <net_ipv6_finalize_raw>
	if (ret < 0) {
   1dbf6:	1e06      	subs	r6, r0, #0
   1dbf8:	db2b      	blt.n	1dc52 <send_mldv2_raw+0x136>
	pkt->ipv6_ext_len = len;
   1dbfa:	2308      	movs	r3, #8
   1dbfc:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
	return net_calc_chksum(pkt, IPPROTO_ICMPV6);
   1dc00:	213a      	movs	r1, #58	; 0x3a
   1dc02:	4620      	mov	r0, r4
		goto drop;
	}

	net_pkt_set_ipv6_ext_len(pkt, ROUTER_ALERT_LEN);

	net_pkt_write_be16(pkt, pkt->frags,
   1dc04:	68a7      	ldr	r7, [r4, #8]
   1dc06:	f7fe fa26 	bl	1c056 <net_calc_chksum>
   1dc0a:	213a      	movs	r1, #58	; 0x3a
   1dc0c:	4606      	mov	r6, r0
   1dc0e:	4620      	mov	r0, r4
   1dc10:	f7fe fa21 	bl	1c056 <net_calc_chksum>
			   NET_IPV6H_LEN + ROUTER_ALERT_LEN + 2,
			   &pos, ntohs(~net_calc_chksum_icmpv6(pkt)));
   1dc14:	ea6f 2626 	mvn.w	r6, r6, asr #8
   1dc18:	b2f6      	uxtb	r6, r6
   1dc1a:	43c0      	mvns	r0, r0
   1dc1c:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
	net_pkt_write_be16(pkt, pkt->frags,
   1dc20:	b280      	uxth	r0, r0
						 struct net_buf *frag,
						 u16_t offset,
						 u16_t *pos,
						 u16_t data)
{
	u16_t value = htons(data);
   1dc22:	0203      	lsls	r3, r0, #8
   1dc24:	ea43 2010 	orr.w	r0, r3, r0, lsr #8

	return net_pkt_write(pkt, frag, offset, pos, sizeof(u16_t),
   1dc28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1dc2c:	9302      	str	r3, [sp, #8]
   1dc2e:	f10d 0316 	add.w	r3, sp, #22
   1dc32:	9301      	str	r3, [sp, #4]
   1dc34:	2302      	movs	r3, #2
	u16_t value = htons(data);
   1dc36:	f8ad 0016 	strh.w	r0, [sp, #22]
	return net_pkt_write(pkt, frag, offset, pos, sizeof(u16_t),
   1dc3a:	9300      	str	r3, [sp, #0]
   1dc3c:	2232      	movs	r2, #50	; 0x32
   1dc3e:	ab05      	add	r3, sp, #20
   1dc40:	4639      	mov	r1, r7
   1dc42:	4620      	mov	r0, r4
   1dc44:	f7fd ffd2 	bl	1bbec <net_pkt_write>

	ret = net_send_data(pkt);
   1dc48:	4620      	mov	r0, r4
   1dc4a:	f7fc fcb7 	bl	1a5bc <net_send_data>
	if (ret < 0) {
   1dc4e:	1e06      	subs	r6, r0, #0
   1dc50:	da05      	bge.n	1dc5e <send_mldv2_raw+0x142>
	net_stats_update_ipv6_mld_sent();

	return 0;

drop:
	net_pkt_unref(pkt);
   1dc52:	4620      	mov	r0, r4
   1dc54:	f7fd fe1b 	bl	1b88e <net_pkt_unref>
	net_stats_update_icmp_drop();
	net_stats_update_ipv6_mld_drop();

	return ret;
}
   1dc58:	4630      	mov	r0, r6
   1dc5a:	b00b      	add	sp, #44	; 0x2c
   1dc5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return 0;
   1dc5e:	462e      	mov	r6, r5
   1dc60:	e7fa      	b.n	1dc58 <send_mldv2_raw+0x13c>
	...

0001dc64 <send_mldv2>:

static int send_mldv2(struct net_if *iface, const struct in6_addr *addr,
		      u8_t mode)
{
   1dc64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1dc66:	460e      	mov	r6, r1
	struct net_pkt *pkt;
	int ret;

	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, NULL),
   1dc68:	2100      	movs	r1, #0
{
   1dc6a:	4617      	mov	r7, r2
   1dc6c:	4605      	mov	r5, r0
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, NULL),
   1dc6e:	f7ff fcc0 	bl	1d5f2 <net_if_get_ll_reserve>
   1dc72:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1dc76:	f7fd fd8d 	bl	1b794 <net_pkt_get_reserve_tx>
				     K_FOREVER);

	net_pkt_append_be16(pkt, 1); /* number of records */
   1dc7a:	2101      	movs	r1, #1
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, NULL),
   1dc7c:	4604      	mov	r4, r0
	net_pkt_append_be16(pkt, 1); /* number of records */
   1dc7e:	f7ff fe25 	bl	1d8cc <net_pkt_append_be16>
	net_pkt_append_u8(pkt, record_type);
   1dc82:	4639      	mov	r1, r7
   1dc84:	4620      	mov	r0, r4
   1dc86:	f7ff fe12 	bl	1d8ae <net_pkt_append_u8>
	net_pkt_append_u8(pkt, 0); /* aux data len */
   1dc8a:	2100      	movs	r1, #0
   1dc8c:	4620      	mov	r0, r4
   1dc8e:	f7ff fe0e 	bl	1d8ae <net_pkt_append_u8>
	net_pkt_append_be16(pkt, num_sources); /* number of addresses */
   1dc92:	2101      	movs	r1, #1
   1dc94:	4620      	mov	r0, r4
   1dc96:	f7ff fe19 	bl	1d8cc <net_pkt_append_be16>
	return net_pkt_append(pkt, len, data, timeout) == len;
   1dc9a:	4632      	mov	r2, r6
   1dc9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1dca0:	2110      	movs	r1, #16
   1dca2:	4620      	mov	r0, r4
   1dca4:	f7fd fee6 	bl	1ba74 <net_pkt_append>
   1dca8:	4a09      	ldr	r2, [pc, #36]	; (1dcd0 <send_mldv2+0x6c>)
   1dcaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1dcae:	2110      	movs	r1, #16
   1dcb0:	4620      	mov	r0, r4
   1dcb2:	f7fd fedf 	bl	1ba74 <net_pkt_append>

	pkt = create_mldv2(pkt, addr, mode, 1);

	ret = send_mldv2_raw(iface, pkt->frags);
   1dcb6:	68a1      	ldr	r1, [r4, #8]
   1dcb8:	4628      	mov	r0, r5
   1dcba:	f7ff ff2f 	bl	1db1c <send_mldv2_raw>

	pkt->frags = NULL;
   1dcbe:	2300      	movs	r3, #0
	ret = send_mldv2_raw(iface, pkt->frags);
   1dcc0:	4605      	mov	r5, r0
	pkt->frags = NULL;
   1dcc2:	60a3      	str	r3, [r4, #8]

	net_pkt_unref(pkt);
   1dcc4:	4620      	mov	r0, r4
   1dcc6:	f7fd fde2 	bl	1b88e <net_pkt_unref>

	return ret;
}
   1dcca:	4628      	mov	r0, r5
   1dccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1dcce:	bf00      	nop
   1dcd0:	000272b8 	.word	0x000272b8

0001dcd4 <handle_mld_query>:

	net_pkt_unref(pkt);
}

static enum net_verdict handle_mld_query(struct net_pkt *pkt)
{
   1dcd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1dcd8:	4604      	mov	r4, r0
   1dcda:	b08d      	sub	sp, #52	; 0x34
	return net_buf_frags_len(pkt->frags);
   1dcdc:	6880      	ldr	r0, [r0, #8]
   1dcde:	f7ff fc73 	bl	1d5c8 <net_buf_frags_len>
	net_stats_update_ipv6_mld_recv();

	/* offset tells now where the ICMPv6 header is starting */
	frag = net_frag_get_pos(pkt,
				net_pkt_ip_hdr_len(pkt) +
				net_pkt_ipv6_ext_len(pkt) +
   1dce2:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
				net_pkt_ip_hdr_len(pkt) +
   1dce6:	f894 1035 	ldrb.w	r1, [r4, #53]	; 0x35
	frag = net_frag_get_pos(pkt,
   1dcea:	4419      	add	r1, r3
   1dcec:	aa06      	add	r2, sp, #24
   1dcee:	3104      	adds	r1, #4
	u16_t total_len = net_pkt_get_len(pkt);
   1dcf0:	b286      	uxth	r6, r0
	frag = net_frag_get_pos(pkt,
   1dcf2:	4620      	mov	r0, r4
   1dcf4:	f7fe f80d 	bl	1bd12 <net_frag_get_pos>
	return net_frag_read(frag, offset, pos, len, NULL);
   1dcf8:	2700      	movs	r7, #0
				sizeof(struct net_icmp_hdr),
				&offset);

	frag = net_frag_read_be16(frag, offset, &pos, &max_rsp_code);
   1dcfa:	ab05      	add	r3, sp, #20
   1dcfc:	f10d 021a 	add.w	r2, sp, #26
   1dd00:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   1dd04:	f7fd ff56 	bl	1bbb4 <net_frag_read_be16>
	frag = net_frag_skip(frag, pos, &pos, 2); /* two reserved bytes */
	frag = net_frag_read(frag, pos, &pos, sizeof(mcast), mcast.s6_addr);
   1dd08:	ad08      	add	r5, sp, #32
   1dd0a:	f8bd 101a 	ldrh.w	r1, [sp, #26]
   1dd0e:	9700      	str	r7, [sp, #0]
   1dd10:	2302      	movs	r3, #2
   1dd12:	f10d 021a 	add.w	r2, sp, #26
   1dd16:	f7fd ff15 	bl	1bb44 <net_frag_read>
   1dd1a:	f8bd 101a 	ldrh.w	r1, [sp, #26]
   1dd1e:	9500      	str	r5, [sp, #0]
   1dd20:	2310      	movs	r3, #16
   1dd22:	f10d 021a 	add.w	r2, sp, #26
   1dd26:	f7fd ff0d 	bl	1bb44 <net_frag_read>
   1dd2a:	f8bd 101a 	ldrh.w	r1, [sp, #26]
   1dd2e:	9700      	str	r7, [sp, #0]
   1dd30:	2302      	movs	r3, #2
   1dd32:	f10d 021a 	add.w	r2, sp, #26
   1dd36:	f7fd ff05 	bl	1bb44 <net_frag_read>
	frag = net_frag_skip(frag, pos, &pos, 2); /* skip S, QRV & QQIC */
	frag = net_frag_read_be16(pkt->frags, pos, &pos, &num_src);
   1dd3a:	f10d 0316 	add.w	r3, sp, #22
   1dd3e:	f10d 021a 	add.w	r2, sp, #26
   1dd42:	f8bd 101a 	ldrh.w	r1, [sp, #26]
   1dd46:	68a0      	ldr	r0, [r4, #8]
   1dd48:	f7fd ff34 	bl	1bbb4 <net_frag_read_be16>
	if (!frag && pos == 0xffff) {
   1dd4c:	b928      	cbnz	r0, 1dd5a <handle_mld_query+0x86>
   1dd4e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
   1dd52:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1dd56:	429a      	cmp	r2, r3
   1dd58:	d070      	beq.n	1de3c <handle_mld_query+0x168>
		goto drop;
	}

	pkt_len = sizeof(struct net_ipv6_hdr) +	net_pkt_ipv6_ext_len(pkt) +
		sizeof(struct net_icmp_hdr) + (2 + 2 + 16 + 2 + 2) +
		sizeof(struct in6_addr) * num_src;
   1dd5a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   1dd5e:	011b      	lsls	r3, r3, #4
	pkt_len = sizeof(struct net_ipv6_hdr) +	net_pkt_ipv6_ext_len(pkt) +
   1dd60:	f103 0244 	add.w	r2, r3, #68	; 0x44
   1dd64:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
   1dd68:	4413      	add	r3, r2
   1dd6a:	b29b      	uxth	r3, r3

	if ((total_len < pkt_len || pkt_len > NET_IPV6_MTU ||
   1dd6c:	429e      	cmp	r6, r3
   1dd6e:	d307      	bcc.n	1dd80 <handle_mld_query+0xac>
   1dd70:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
   1dd74:	d804      	bhi.n	1dd80 <handle_mld_query+0xac>
	return pkt->frags->data;
   1dd76:	68a3      	ldr	r3, [r4, #8]
	     (NET_IPV6_HDR(pkt)->hop_limit != 1))) {
   1dd78:	689b      	ldr	r3, [r3, #8]
	if ((total_len < pkt_len || pkt_len > NET_IPV6_MTU ||
   1dd7a:	79db      	ldrb	r3, [r3, #7]
   1dd7c:	2b01      	cmp	r3, #1
   1dd7e:	d008      	beq.n	1dd92 <handle_mld_query+0xbe>
		struct net_icmp_hdr hdr, *icmp_hdr;

		icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   1dd80:	a907      	add	r1, sp, #28
   1dd82:	4620      	mov	r0, r4
   1dd84:	f7fe ff4e 	bl	1cc24 <net_icmpv6_get_hdr>
		if (!icmp_hdr || icmp_hdr->code != 0) {
   1dd88:	2800      	cmp	r0, #0
   1dd8a:	d057      	beq.n	1de3c <handle_mld_query+0x168>
   1dd8c:	7843      	ldrb	r3, [r0, #1]
   1dd8e:	2b00      	cmp	r3, #0
   1dd90:	d154      	bne.n	1de3c <handle_mld_query+0x168>
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1dd92:	4628      	mov	r0, r5
   1dd94:	2210      	movs	r2, #16
   1dd96:	492b      	ldr	r1, [pc, #172]	; (1de44 <handle_mld_query+0x170>)
   1dd98:	f7e2 fcce 	bl	738 <memcmp>
			goto drop;
		}
	}

	/* Currently we only support a unspecified address query. */
	if (!net_ipv6_addr_cmp(&mcast, net_ipv6_unspecified_address())) {
   1dd9c:	4605      	mov	r5, r0
   1dd9e:	2800      	cmp	r0, #0
   1dda0:	d14c      	bne.n	1de3c <handle_mld_query+0x168>
   1dda2:	6966      	ldr	r6, [r4, #20]
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, NULL),
   1dda4:	4601      	mov	r1, r0
   1dda6:	4630      	mov	r0, r6
   1dda8:	f7ff fc23 	bl	1d5f2 <net_if_get_ll_reserve>
   1ddac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1ddb0:	f7fd fcf0 	bl	1b794 <net_pkt_get_reserve_tx>
	net_pkt_append_u8(pkt, 0); /* This will be the record count */
   1ddb4:	4629      	mov	r1, r5
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, NULL),
   1ddb6:	4604      	mov	r4, r0
	net_pkt_append_u8(pkt, 0); /* This will be the record count */
   1ddb8:	f7ff fd79 	bl	1d8ae <net_pkt_append_u8>
   1ddbc:	f506 78bc 	add.w	r8, r6, #376	; 0x178
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1ddc0:	462f      	mov	r7, r5
		if (!iface->ipv6.mcast[i].is_used ||
   1ddc2:	f04f 0918 	mov.w	r9, #24
   1ddc6:	fb09 6307 	mla	r3, r9, r7, r6
   1ddca:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   1ddce:	07da      	lsls	r2, r3, #31
   1ddd0:	d515      	bpl.n	1ddfe <handle_mld_query+0x12a>
   1ddd2:	079b      	lsls	r3, r3, #30
   1ddd4:	d513      	bpl.n	1ddfe <handle_mld_query+0x12a>
	net_pkt_append_u8(pkt, record_type);
   1ddd6:	2102      	movs	r1, #2
   1ddd8:	4620      	mov	r0, r4
   1ddda:	f7ff fd68 	bl	1d8ae <net_pkt_append_u8>
	net_pkt_append_u8(pkt, 0); /* aux data len */
   1ddde:	2100      	movs	r1, #0
   1dde0:	4620      	mov	r0, r4
   1dde2:	f7ff fd64 	bl	1d8ae <net_pkt_append_u8>
	net_pkt_append_be16(pkt, num_sources); /* number of addresses */
   1dde6:	2100      	movs	r1, #0
   1dde8:	4620      	mov	r0, r4
   1ddea:	f7ff fd6f 	bl	1d8cc <net_pkt_append_be16>
	return net_pkt_append(pkt, len, data, timeout) == len;
   1ddee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ddf2:	4642      	mov	r2, r8
   1ddf4:	2110      	movs	r1, #16
   1ddf6:	4620      	mov	r0, r4
   1ddf8:	f7fd fe3c 	bl	1ba74 <net_pkt_append>
		count++;
   1ddfc:	3501      	adds	r5, #1
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1ddfe:	3701      	adds	r7, #1
   1de00:	2f02      	cmp	r7, #2
   1de02:	f108 0818 	add.w	r8, r8, #24
   1de06:	d1de      	bne.n	1ddc6 <handle_mld_query+0xf2>
	if (count > 0) {
   1de08:	b1ad      	cbz	r5, 1de36 <handle_mld_query+0x162>
	return net_pkt_write(pkt, frag, offset, pos, sizeof(u8_t),
   1de0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		net_pkt_write_u8(pkt, pkt->frags, 0, &pos, count);
   1de0e:	68a1      	ldr	r1, [r4, #8]
   1de10:	9302      	str	r3, [sp, #8]
   1de12:	f10d 0313 	add.w	r3, sp, #19
   1de16:	9301      	str	r3, [sp, #4]
   1de18:	2301      	movs	r3, #1
   1de1a:	9300      	str	r3, [sp, #0]
   1de1c:	2200      	movs	r2, #0
   1de1e:	ab07      	add	r3, sp, #28
   1de20:	4620      	mov	r0, r4
   1de22:	f88d 5013 	strb.w	r5, [sp, #19]
   1de26:	f7fd fee1 	bl	1bbec <net_pkt_write>
		send_mldv2_raw(iface, pkt->frags);
   1de2a:	68a1      	ldr	r1, [r4, #8]
   1de2c:	4630      	mov	r0, r6
   1de2e:	f7ff fe75 	bl	1db1c <send_mldv2_raw>
		pkt->frags = NULL;
   1de32:	2300      	movs	r3, #0
   1de34:	60a3      	str	r3, [r4, #8]
	net_pkt_unref(pkt);
   1de36:	4620      	mov	r0, r4
   1de38:	f7fd fd29 	bl	1b88e <net_pkt_unref>

drop:
	net_stats_update_ipv6_mld_drop();

	return NET_DROP;
}
   1de3c:	2002      	movs	r0, #2
   1de3e:	b00d      	add	sp, #52	; 0x34
   1de40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1de44:	000272b8 	.word	0x000272b8

0001de48 <net_ipv6_finalize>:
	if (context->flags & NET_CONTEXT_PROTO) {
   1de48:	f890 205d 	ldrb.w	r2, [r0, #93]	; 0x5d
{
   1de4c:	460b      	mov	r3, r1
   1de4e:	f012 0f40 	tst.w	r2, #64	; 0x40
	return net_ipv6_finalize_raw(pkt, net_context_get_ip_proto(context));
   1de52:	bf14      	ite	ne
   1de54:	2106      	movne	r1, #6
   1de56:	2111      	moveq	r1, #17
   1de58:	4618      	mov	r0, r3
   1de5a:	f7ff be3e 	b.w	1dada <net_ipv6_finalize_raw>

0001de5e <net_ipv6_nbr_lookup>:
	return nbr_lookup(&net_neighbor.table, iface, addr);
   1de5e:	f7ff bd45 	b.w	1d8ec <nbr_lookup.isra.29>

0001de62 <net_ipv6_send_na>:
{
   1de62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1de66:	4689      	mov	r9, r1
   1de68:	b092      	sub	sp, #72	; 0x48
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, dst),
   1de6a:	4611      	mov	r1, r2
{
   1de6c:	4615      	mov	r5, r2
   1de6e:	461e      	mov	r6, r3
   1de70:	4607      	mov	r7, r0
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, dst),
   1de72:	f7ff fbbe 	bl	1d5f2 <net_if_get_ll_reserve>
   1de76:	210a      	movs	r1, #10
   1de78:	f7fd fc8c 	bl	1b794 <net_pkt_get_reserve_tx>
	if (!pkt) {
   1de7c:	4604      	mov	r4, r0
   1de7e:	b138      	cbz	r0, 1de90 <net_ipv6_send_na+0x2e>
	frag = net_pkt_get_frag(pkt, ND_NET_BUF_TIMEOUT);
   1de80:	210a      	movs	r1, #10
   1de82:	f7fd fc9f 	bl	1b7c4 <net_pkt_get_frag>
	if (!frag) {
   1de86:	4682      	mov	sl, r0
   1de88:	b928      	cbnz	r0, 1de96 <net_ipv6_send_na+0x34>
		net_pkt_unref(pkt);
   1de8a:	4620      	mov	r0, r4
   1de8c:	f7fd fcff 	bl	1b88e <net_pkt_unref>
		return -ENOMEM;
   1de90:	f06f 000b 	mvn.w	r0, #11
   1de94:	e03a      	b.n	1df0c <net_ipv6_send_na+0xaa>
	net_pkt_frag_add(pkt, frag);
   1de96:	4601      	mov	r1, r0
   1de98:	4620      	mov	r0, r4
   1de9a:	f7fd fd1f 	bl	1b8dc <net_pkt_frag_add>
	pkt->iface = iface;
   1de9e:	6167      	str	r7, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1dea0:	7d7b      	ldrb	r3, [r7, #21]
   1dea2:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1dea6:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	pkt->family = family;
   1deaa:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   1deae:	220a      	movs	r2, #10
   1deb0:	f362 03c6 	bfi	r3, r2, #3, #4
   1deb4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	pkt->ip_hdr_len = len;
   1deb8:	2328      	movs	r3, #40	; 0x28
   1deba:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	net_pkt_ll_clear(pkt);
   1debe:	4620      	mov	r0, r4
   1dec0:	f7ff fc15 	bl	1d6ee <net_pkt_ll_clear>
   1dec4:	7d3b      	ldrb	r3, [r7, #20]
	if (iface->link_addr.len == 6) {
   1dec6:	2b06      	cmp	r3, #6
   1dec8:	d023      	beq.n	1df12 <net_ipv6_send_na+0xb0>
	return 0;
   1deca:	2b08      	cmp	r3, #8
   1decc:	bf0c      	ite	eq
   1dece:	2710      	moveq	r7, #16
   1ded0:	2700      	movne	r7, #0
	pkt->ipv6_ext_len = len;
   1ded2:	2300      	movs	r3, #0
	setup_headers(pkt, sizeof(struct net_icmpv6_na_hdr) + llao_len,
   1ded4:	f107 0814 	add.w	r8, r7, #20
   1ded8:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
   1dedc:	2288      	movs	r2, #136	; 0x88
   1dede:	f008 01fc 	and.w	r1, r8, #252	; 0xfc
   1dee2:	4620      	mov	r0, r4
   1dee4:	f7ff fbe2 	bl	1d6ac <setup_headers>
	net_buf_add(frag, sizeof(struct net_icmpv6_na_hdr) + llao_len);
   1dee8:	4641      	mov	r1, r8
   1deea:	f10a 0008 	add.w	r0, sl, #8
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   1deee:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
	net_buf_add(frag, sizeof(struct net_icmpv6_na_hdr) + llao_len);
   1def2:	f7fb fa5b 	bl	193ac <net_buf_simple_add>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   1def6:	4651      	mov	r1, sl
   1def8:	4620      	mov	r0, r4
   1defa:	f7ff f883 	bl	1d004 <net_icmpv6_get_na_hdr>
	if (!na_hdr) {
   1defe:	4680      	mov	r8, r0
   1df00:	b948      	cbnz	r0, 1df16 <net_ipv6_send_na+0xb4>
	net_pkt_unref(pkt);
   1df02:	4620      	mov	r0, r4
   1df04:	f7fd fcc3 	bl	1b88e <net_pkt_unref>
	return -EINVAL;
   1df08:	f06f 0015 	mvn.w	r0, #21
}
   1df0c:	b012      	add	sp, #72	; 0x48
   1df0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return 8;
   1df12:	2708      	movs	r7, #8
   1df14:	e7dd      	b.n	1ded2 <net_ipv6_send_na+0x70>
	return pkt->frags->data;
   1df16:	68a3      	ldr	r3, [r4, #8]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, src);
   1df18:	f10d 0c04 	add.w	ip, sp, #4
   1df1c:	f8d3 e008 	ldr.w	lr, [r3, #8]
   1df20:	464b      	mov	r3, r9
   1df22:	f109 0910 	add.w	r9, r9, #16
   1df26:	6818      	ldr	r0, [r3, #0]
   1df28:	6859      	ldr	r1, [r3, #4]
   1df2a:	4662      	mov	r2, ip
   1df2c:	c203      	stmia	r2!, {r0, r1}
   1df2e:	3308      	adds	r3, #8
   1df30:	454b      	cmp	r3, r9
   1df32:	4694      	mov	ip, r2
   1df34:	d1f7      	bne.n	1df26 <net_ipv6_send_na+0xc4>
   1df36:	f10d 0c04 	add.w	ip, sp, #4
   1df3a:	f10e 0208 	add.w	r2, lr, #8
   1df3e:	f10d 0914 	add.w	r9, sp, #20
   1df42:	4663      	mov	r3, ip
   1df44:	cb03      	ldmia	r3!, {r0, r1}
   1df46:	454b      	cmp	r3, r9
   1df48:	6010      	str	r0, [r2, #0]
   1df4a:	6051      	str	r1, [r2, #4]
   1df4c:	469c      	mov	ip, r3
   1df4e:	f102 0208 	add.w	r2, r2, #8
   1df52:	d1f6      	bne.n	1df42 <net_ipv6_send_na+0xe0>
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, dst);
   1df54:	ab05      	add	r3, sp, #20
   1df56:	462a      	mov	r2, r5
   1df58:	f105 0910 	add.w	r9, r5, #16
   1df5c:	469c      	mov	ip, r3
   1df5e:	6810      	ldr	r0, [r2, #0]
   1df60:	6851      	ldr	r1, [r2, #4]
   1df62:	461d      	mov	r5, r3
   1df64:	c503      	stmia	r5!, {r0, r1}
   1df66:	3208      	adds	r2, #8
   1df68:	454a      	cmp	r2, r9
   1df6a:	462b      	mov	r3, r5
   1df6c:	d1f7      	bne.n	1df5e <net_ipv6_send_na+0xfc>
   1df6e:	f10e 0318 	add.w	r3, lr, #24
   1df72:	aa09      	add	r2, sp, #36	; 0x24
   1df74:	4665      	mov	r5, ip
   1df76:	cd03      	ldmia	r5!, {r0, r1}
   1df78:	4295      	cmp	r5, r2
   1df7a:	6018      	str	r0, [r3, #0]
   1df7c:	6059      	str	r1, [r3, #4]
   1df7e:	46ac      	mov	ip, r5
   1df80:	f103 0308 	add.w	r3, r3, #8
   1df84:	d1f6      	bne.n	1df74 <net_ipv6_send_na+0x112>
	net_ipaddr_copy(&na_hdr->tgt, tgt);
   1df86:	4633      	mov	r3, r6
   1df88:	f103 0e10 	add.w	lr, r3, #16
   1df8c:	4616      	mov	r6, r2
   1df8e:	6818      	ldr	r0, [r3, #0]
   1df90:	6859      	ldr	r1, [r3, #4]
   1df92:	4635      	mov	r5, r6
   1df94:	c503      	stmia	r5!, {r0, r1}
   1df96:	3308      	adds	r3, #8
   1df98:	4573      	cmp	r3, lr
   1df9a:	462e      	mov	r6, r5
   1df9c:	d1f7      	bne.n	1df8e <net_ipv6_send_na+0x12c>
   1df9e:	4613      	mov	r3, r2
   1dfa0:	f108 0504 	add.w	r5, r8, #4
   1dfa4:	461a      	mov	r2, r3
   1dfa6:	ca03      	ldmia	r2!, {r0, r1}
   1dfa8:	4552      	cmp	r2, sl
   1dfaa:	6028      	str	r0, [r5, #0]
   1dfac:	6069      	str	r1, [r5, #4]
   1dfae:	4613      	mov	r3, r2
   1dfb0:	f105 0508 	add.w	r5, r5, #8
   1dfb4:	d1f6      	bne.n	1dfa4 <net_ipv6_send_na+0x142>
		 (u8_t *)net_pkt_icmp_data(pkt) + sizeof(struct net_icmp_hdr) +
   1dfb6:	4620      	mov	r0, r4
	set_llao(&net_pkt_iface(pkt)->link_addr,
   1dfb8:	6965      	ldr	r5, [r4, #20]
		 (u8_t *)net_pkt_icmp_data(pkt) + sizeof(struct net_icmp_hdr) +
   1dfba:	f7fd feb3 	bl	1bd24 <net_pkt_icmp_data>
	set_llao(&net_pkt_iface(pkt)->link_addr,
   1dfbe:	3510      	adds	r5, #16
   1dfc0:	463a      	mov	r2, r7
   1dfc2:	f100 0118 	add.w	r1, r0, #24
   1dfc6:	2302      	movs	r3, #2
   1dfc8:	4628      	mov	r0, r5
   1dfca:	f7ff fb9f 	bl	1d70c <set_llao>
	na_hdr->flags = flags;
   1dfce:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
   1dfd2:	f888 3000 	strb.w	r3, [r8]
	net_icmpv6_set_na_hdr(pkt, na_hdr);
   1dfd6:	4641      	mov	r1, r8
   1dfd8:	4620      	mov	r0, r4
   1dfda:	f7ff f848 	bl	1d06e <net_icmpv6_set_na_hdr>
	pkt->frags->len = NET_IPV6ICMPH_LEN +
   1dfde:	68a1      	ldr	r1, [r4, #8]
		sizeof(struct net_icmpv6_na_hdr) + llao_len;
   1dfe0:	3740      	adds	r7, #64	; 0x40
	pkt->frags->len = NET_IPV6ICMPH_LEN +
   1dfe2:	818f      	strh	r7, [r1, #12]
	net_icmpv6_set_chksum(pkt, pkt->frags);
   1dfe4:	4620      	mov	r0, r4
   1dfe6:	f7fe fdd3 	bl	1cb90 <net_icmpv6_set_chksum>
	if (net_send_data(pkt) < 0) {
   1dfea:	4620      	mov	r0, r4
   1dfec:	f7fc fae6 	bl	1a5bc <net_send_data>
   1dff0:	2800      	cmp	r0, #0
   1dff2:	db86      	blt.n	1df02 <net_ipv6_send_na+0xa0>
	return 0;
   1dff4:	2000      	movs	r0, #0
   1dff6:	e789      	b.n	1df0c <net_ipv6_send_na+0xaa>

0001dff8 <net_ipv6_nbr_set_reachable_timer>:
	k_delayed_work_submit(&net_ipv6_nbr_data(nbr)->reachable, time);
   1dff8:	68c9      	ldr	r1, [r1, #12]
   1dffa:	f8d0 2244 	ldr.w	r2, [r0, #580]	; 0x244
   1dffe:	4802      	ldr	r0, [pc, #8]	; (1e008 <net_ipv6_nbr_set_reachable_timer+0x10>)
   1e000:	3114      	adds	r1, #20
   1e002:	f004 b97b 	b.w	222fc <k_delayed_work_submit_to_queue>
   1e006:	bf00      	nop
   1e008:	20003340 	.word	0x20003340

0001e00c <handle_na_input>:
{
   1e00c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e010:	4604      	mov	r4, r0
   1e012:	b08c      	sub	sp, #48	; 0x30
	return net_buf_frags_len(pkt->frags);
   1e014:	6880      	ldr	r0, [r0, #8]
   1e016:	f7ff fad7 	bl	1d5c8 <net_buf_frags_len>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &nahdr);
   1e01a:	a907      	add	r1, sp, #28
   1e01c:	4606      	mov	r6, r0
   1e01e:	4620      	mov	r0, r4
   1e020:	f7fe fff0 	bl	1d004 <net_icmpv6_get_na_hdr>
	if (!na_hdr) {
   1e024:	4605      	mov	r5, r0
   1e026:	b140      	cbz	r0, 1e03a <handle_na_input+0x2e>
	if ((total_len < (sizeof(struct net_ipv6_hdr) +
   1e028:	b2b6      	uxth	r6, r6
   1e02a:	2e41      	cmp	r6, #65	; 0x41
   1e02c:	d809      	bhi.n	1e042 <handle_na_input+0x36>
		icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   1e02e:	a905      	add	r1, sp, #20
   1e030:	4620      	mov	r0, r4
   1e032:	f7fe fdf7 	bl	1cc24 <net_icmpv6_get_hdr>
		if (!icmp_hdr || icmp_hdr->code != 0) {
   1e036:	2800      	cmp	r0, #0
   1e038:	d154      	bne.n	1e0e4 <handle_na_input+0xd8>
	return NET_DROP;
   1e03a:	2002      	movs	r0, #2
}
   1e03c:	b00c      	add	sp, #48	; 0x30
   1e03e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return pkt->frags->data;
   1e042:	68a3      	ldr	r3, [r4, #8]
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT) ||
   1e044:	689b      	ldr	r3, [r3, #8]
			  sizeof(struct net_icmpv6_nd_opt_hdr))) ||
   1e046:	79db      	ldrb	r3, [r3, #7]
   1e048:	2bff      	cmp	r3, #255	; 0xff
   1e04a:	d1f0      	bne.n	1e02e <handle_na_input+0x22>
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT) ||
   1e04c:	7903      	ldrb	r3, [r0, #4]
   1e04e:	2bff      	cmp	r3, #255	; 0xff
   1e050:	d0ed      	beq.n	1e02e <handle_na_input+0x22>
	    (net_is_solicited(pkt) &&
   1e052:	4620      	mov	r0, r4
   1e054:	f7ff fb0a 	bl	1d66c <net_is_solicited>
	    net_is_ipv6_addr_mcast(&na_hdr->tgt) ||
   1e058:	b120      	cbz	r0, 1e064 <handle_na_input+0x58>
   1e05a:	68a3      	ldr	r3, [r4, #8]
	    (net_is_solicited(pkt) &&
   1e05c:	689b      	ldr	r3, [r3, #8]
   1e05e:	7e1b      	ldrb	r3, [r3, #24]
   1e060:	2bff      	cmp	r3, #255	; 0xff
   1e062:	d0e4      	beq.n	1e02e <handle_na_input+0x22>
	pkt->ipv6_ext_opt_len = len;
   1e064:	2314      	movs	r3, #20
   1e066:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
	nd_opt_hdr = net_icmpv6_get_nd_opt_hdr(pkt, &ndopthdr);
   1e06a:	a902      	add	r1, sp, #8
   1e06c:	4620      	mov	r0, r4
   1e06e:	f7fe ff98 	bl	1cfa2 <net_icmpv6_get_nd_opt_hdr>
   1e072:	4601      	mov	r1, r0
	return net_buf_frags_len(pkt->frags);
   1e074:	68a0      	ldr	r0, [r4, #8]
   1e076:	f7ff faa7 	bl	1d5c8 <net_buf_frags_len>
	u16_t tllao_offset = 0;
   1e07a:	2600      	movs	r6, #0
	left_len = net_pkt_get_len(pkt) - (sizeof(struct net_ipv6_hdr) +
   1e07c:	f1a0 072c 	sub.w	r7, r0, #44	; 0x2c
	while (nd_opt_hdr && net_pkt_ipv6_ext_opt_len(pkt) < left_len) {
   1e080:	b131      	cbz	r1, 1e090 <handle_na_input+0x84>
   1e082:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
   1e086:	4297      	cmp	r7, r2
   1e088:	d902      	bls.n	1e090 <handle_na_input+0x84>
		if (!nd_opt_hdr->len) {
   1e08a:	784b      	ldrb	r3, [r1, #1]
   1e08c:	2b00      	cmp	r3, #0
   1e08e:	d12d      	bne.n	1e0ec <handle_na_input+0xe0>
	ifaddr = net_if_ipv6_addr_lookup_by_iface(net_pkt_iface(pkt),
   1e090:	1d2f      	adds	r7, r5, #4
   1e092:	4639      	mov	r1, r7
   1e094:	6960      	ldr	r0, [r4, #20]
   1e096:	f7ff fba6 	bl	1d7e6 <net_if_ipv6_addr_lookup_by_iface>
	if (ifaddr) {
   1e09a:	2800      	cmp	r0, #0
   1e09c:	d13e      	bne.n	1e11c <handle_na_input+0x110>
	struct net_linkaddr_storage lladdr = { 0 };
   1e09e:	9003      	str	r0, [sp, #12]
   1e0a0:	9004      	str	r0, [sp, #16]
	nbr = nbr_lookup(&net_neighbor.table, net_pkt_iface(pkt),
   1e0a2:	4639      	mov	r1, r7
   1e0a4:	6960      	ldr	r0, [r4, #20]
   1e0a6:	f7ff fc21 	bl	1d8ec <nbr_lookup.isra.29>
	if (!nbr) {
   1e0aa:	4605      	mov	r5, r0
   1e0ac:	2800      	cmp	r0, #0
   1e0ae:	d0c4      	beq.n	1e03a <handle_na_input+0x2e>
	if (tllao_offset) {
   1e0b0:	2e00      	cmp	r6, #0
   1e0b2:	d141      	bne.n	1e138 <handle_na_input+0x12c>
	if (nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
   1e0b4:	786b      	ldrb	r3, [r5, #1]
   1e0b6:	2bff      	cmp	r3, #255	; 0xff
   1e0b8:	d154      	bne.n	1e164 <handle_na_input+0x158>
		if (!tllao_offset) {
   1e0ba:	2e00      	cmp	r6, #0
   1e0bc:	d0bd      	beq.n	1e03a <handle_na_input+0x2e>
		nbr_lladdr.len = lladdr.len;
   1e0be:	f89d 300d 	ldrb.w	r3, [sp, #13]
   1e0c2:	f88d 3018 	strb.w	r3, [sp, #24]
		nbr_lladdr.addr = lladdr.addr;
   1e0c6:	aa0c      	add	r2, sp, #48	; 0x30
   1e0c8:	f10d 030e 	add.w	r3, sp, #14
   1e0cc:	f842 3d1c 	str.w	r3, [r2, #-28]!
		if (net_nbr_link(nbr, net_pkt_iface(pkt), &nbr_lladdr)) {
   1e0d0:	6961      	ldr	r1, [r4, #20]
   1e0d2:	4628      	mov	r0, r5
   1e0d4:	f7ff f9f6 	bl	1d4c4 <net_nbr_link>
   1e0d8:	2800      	cmp	r0, #0
   1e0da:	d043      	beq.n	1e164 <handle_na_input+0x158>
			nbr_free(nbr);
   1e0dc:	4628      	mov	r0, r5
   1e0de:	f7ff faa2 	bl	1d626 <nbr_free>
   1e0e2:	e7aa      	b.n	1e03a <handle_na_input+0x2e>
		if (!icmp_hdr || icmp_hdr->code != 0) {
   1e0e4:	7843      	ldrb	r3, [r0, #1]
   1e0e6:	2b00      	cmp	r3, #0
   1e0e8:	d1a7      	bne.n	1e03a <handle_na_input+0x2e>
   1e0ea:	e7bb      	b.n	1e064 <handle_na_input+0x58>
		switch (nd_opt_hdr->type) {
   1e0ec:	7809      	ldrb	r1, [r1, #0]
   1e0ee:	2902      	cmp	r1, #2
   1e0f0:	d107      	bne.n	1e102 <handle_na_input+0xf6>
			tllao_offset = net_pkt_ip_hdr_len(pkt) +
   1e0f2:	f894 6035 	ldrb.w	r6, [r4, #53]	; 0x35
				net_pkt_ipv6_ext_len(pkt) +
   1e0f6:	f894 103f 	ldrb.w	r1, [r4, #63]	; 0x3f
			tllao_offset = net_pkt_ip_hdr_len(pkt) +
   1e0fa:	440e      	add	r6, r1
   1e0fc:	3606      	adds	r6, #6
   1e0fe:	4416      	add	r6, r2
   1e100:	b2b6      	uxth	r6, r6
		net_pkt_set_ipv6_ext_opt_len(pkt,
   1e102:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1e106:	b2db      	uxtb	r3, r3
		if (prev_opt_len >= net_pkt_ipv6_ext_opt_len(pkt)) {
   1e108:	4293      	cmp	r3, r2
	pkt->ipv6_ext_opt_len = len;
   1e10a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
   1e10e:	d994      	bls.n	1e03a <handle_na_input+0x2e>
		nd_opt_hdr = net_icmpv6_get_nd_opt_hdr(pkt, &ndopthdr);
   1e110:	a902      	add	r1, sp, #8
   1e112:	4620      	mov	r0, r4
   1e114:	f7fe ff45 	bl	1cfa2 <net_icmpv6_get_nd_opt_hdr>
   1e118:	4601      	mov	r1, r0
   1e11a:	e7b1      	b.n	1e080 <handle_na_input+0x74>
		if (ifaddr->addr_state == NET_ADDR_TENTATIVE) {
   1e11c:	f990 3065 	ldrsb.w	r3, [r0, #101]	; 0x65
   1e120:	2b00      	cmp	r3, #0
   1e122:	d18a      	bne.n	1e03a <handle_na_input+0x2e>
	if (net_is_ipv6_ll_addr(addr)) {
   1e124:	88aa      	ldrh	r2, [r5, #4]
   1e126:	f248 03fe 	movw	r3, #33022	; 0x80fe
   1e12a:	429a      	cmp	r2, r3
   1e12c:	d085      	beq.n	1e03a <handle_na_input+0x2e>
	net_if_ipv6_dad_failed(iface, addr);
   1e12e:	4639      	mov	r1, r7
   1e130:	6960      	ldr	r0, [r4, #20]
   1e132:	f7fc fe03 	bl	1ad3c <net_if_ipv6_dad_failed>
   1e136:	e780      	b.n	1e03a <handle_na_input+0x2e>
		lladdr.len = net_pkt_iface(pkt)->link_addr.len;
   1e138:	6963      	ldr	r3, [r4, #20]
		frag = net_frag_read(pkt->frags, tllao_offset,
   1e13a:	68a0      	ldr	r0, [r4, #8]
		lladdr.len = net_pkt_iface(pkt)->link_addr.len;
   1e13c:	7d1b      	ldrb	r3, [r3, #20]
   1e13e:	f88d 300d 	strb.w	r3, [sp, #13]
		frag = net_frag_read(pkt->frags, tllao_offset,
   1e142:	f10d 020e 	add.w	r2, sp, #14
   1e146:	9200      	str	r2, [sp, #0]
   1e148:	4631      	mov	r1, r6
   1e14a:	f10d 020a 	add.w	r2, sp, #10
   1e14e:	f7fd fcf9 	bl	1bb44 <net_frag_read>
		if (!frag && pos == 0xffff) {
   1e152:	2800      	cmp	r0, #0
   1e154:	d1ae      	bne.n	1e0b4 <handle_na_input+0xa8>
   1e156:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   1e15a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1e15e:	429a      	cmp	r2, r3
   1e160:	d1a8      	bne.n	1e0b4 <handle_na_input+0xa8>
   1e162:	e76a      	b.n	1e03a <handle_na_input+0x2e>
	cached_lladdr = net_nbr_get_lladdr(nbr->idx);
   1e164:	7868      	ldrb	r0, [r5, #1]
   1e166:	f7ff fa27 	bl	1d5b8 <net_nbr_get_lladdr>
	if (!cached_lladdr) {
   1e16a:	4607      	mov	r7, r0
   1e16c:	2800      	cmp	r0, #0
   1e16e:	f43f af64 	beq.w	1e03a <handle_na_input+0x2e>
	if (tllao_offset) {
   1e172:	2e00      	cmp	r6, #0
   1e174:	d048      	beq.n	1e208 <handle_na_input+0x1fc>
		lladdr_changed = memcmp(lladdr.addr,
   1e176:	7842      	ldrb	r2, [r0, #1]
   1e178:	1c81      	adds	r1, r0, #2
   1e17a:	f10d 000e 	add.w	r0, sp, #14
   1e17e:	f7e2 fadb 	bl	738 <memcmp>
   1e182:	f110 0800 	adds.w	r8, r0, #0
   1e186:	bf18      	it	ne
   1e188:	f04f 0801 	movne.w	r8, #1
	if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_INCOMPLETE) {
   1e18c:	68eb      	ldr	r3, [r5, #12]
   1e18e:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   1e192:	2b00      	cmp	r3, #0
   1e194:	d13f      	bne.n	1e216 <handle_na_input+0x20a>
		if (!tllao_offset) {
   1e196:	2e00      	cmp	r6, #0
   1e198:	f43f af4f 	beq.w	1e03a <handle_na_input+0x2e>
		if (lladdr_changed) {
   1e19c:	f1b8 0f00 	cmp.w	r8, #0
   1e1a0:	d005      	beq.n	1e1ae <handle_na_input+0x1a2>
			net_linkaddr_set(cached_lladdr, lladdr.addr,
   1e1a2:	787a      	ldrb	r2, [r7, #1]
   1e1a4:	f10d 010e 	add.w	r1, sp, #14
   1e1a8:	4638      	mov	r0, r7
   1e1aa:	f7ff fa4e 	bl	1d64a <net_linkaddr_set>
		if (net_is_solicited(pkt)) {
   1e1ae:	4620      	mov	r0, r4
   1e1b0:	f7ff fa5c 	bl	1d66c <net_is_solicited>
   1e1b4:	b350      	cbz	r0, 1e20c <handle_na_input+0x200>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_REACHABLE);
   1e1b6:	2101      	movs	r1, #1
   1e1b8:	4628      	mov	r0, r5
   1e1ba:	f7ff fa1d 	bl	1d5f8 <ipv6_nbr_set_state>
   1e1be:	68eb      	ldr	r3, [r5, #12]
			net_ipv6_nbr_data(nbr)->ns_count = 0;
   1e1c0:	2200      	movs	r2, #0
   1e1c2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			k_delayed_work_cancel(
   1e1c6:	68e8      	ldr	r0, [r5, #12]
   1e1c8:	3014      	adds	r0, #20
   1e1ca:	f004 f83d 	bl	22248 <k_delayed_work_cancel>
			net_ipv6_nbr_set_reachable_timer(net_pkt_iface(pkt),
   1e1ce:	4629      	mov	r1, r5
   1e1d0:	6960      	ldr	r0, [r4, #20]
   1e1d2:	f7ff ff11 	bl	1dff8 <net_ipv6_nbr_set_reachable_timer>
	net_ipv6_nbr_data(nbr)->is_router = net_is_router(pkt);
   1e1d6:	4620      	mov	r0, r4
   1e1d8:	68ee      	ldr	r6, [r5, #12]
   1e1da:	f7ff fa5d 	bl	1d698 <net_is_router>
	pending = net_ipv6_nbr_data(nbr)->pending;
   1e1de:	68eb      	ldr	r3, [r5, #12]
	net_ipv6_nbr_data(nbr)->is_router = net_is_router(pkt);
   1e1e0:	f886 0069 	strb.w	r0, [r6, #105]	; 0x69
	pending = net_ipv6_nbr_data(nbr)->pending;
   1e1e4:	681e      	ldr	r6, [r3, #0]
	if (pending) {
   1e1e6:	b156      	cbz	r6, 1e1fe <handle_na_input+0x1f2>
		if (net_send_data(pending) < 0) {
   1e1e8:	4630      	mov	r0, r6
   1e1ea:	f7fc f9e7 	bl	1a5bc <net_send_data>
   1e1ee:	2800      	cmp	r0, #0
   1e1f0:	da5a      	bge.n	1e2a8 <handle_na_input+0x29c>
			nbr_clear_ns_pending(net_ipv6_nbr_data(nbr));
   1e1f2:	68e8      	ldr	r0, [r5, #12]
   1e1f4:	f7ff fa0b 	bl	1d60e <nbr_clear_ns_pending>
		net_pkt_unref(pending);
   1e1f8:	4630      	mov	r0, r6
   1e1fa:	f7fd fb48 	bl	1b88e <net_pkt_unref>
	net_pkt_unref(pkt);
   1e1fe:	4620      	mov	r0, r4
   1e200:	f7fd fb45 	bl	1b88e <net_pkt_unref>
	return NET_OK;
   1e204:	2000      	movs	r0, #0
   1e206:	e719      	b.n	1e03c <handle_na_input+0x30>
	bool lladdr_changed = false;
   1e208:	46b0      	mov	r8, r6
   1e20a:	e7bf      	b.n	1e18c <handle_na_input+0x180>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_STALE);
   1e20c:	2102      	movs	r1, #2
   1e20e:	4628      	mov	r0, r5
   1e210:	f7ff f9f2 	bl	1d5f8 <ipv6_nbr_set_state>
   1e214:	e7df      	b.n	1e1d6 <handle_na_input+0x1ca>
	if (!net_is_override(pkt) && lladdr_changed) {
   1e216:	4620      	mov	r0, r4
   1e218:	f7ff fa33 	bl	1d682 <net_is_override>
   1e21c:	b968      	cbnz	r0, 1e23a <handle_na_input+0x22e>
   1e21e:	f1b8 0f00 	cmp.w	r8, #0
   1e222:	d00a      	beq.n	1e23a <handle_na_input+0x22e>
		if (net_ipv6_nbr_data(nbr)->state ==
   1e224:	68eb      	ldr	r3, [r5, #12]
   1e226:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   1e22a:	2b01      	cmp	r3, #1
   1e22c:	f47f af05 	bne.w	1e03a <handle_na_input+0x2e>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_STALE);
   1e230:	2102      	movs	r1, #2
   1e232:	4628      	mov	r0, r5
   1e234:	f7ff f9e0 	bl	1d5f8 <ipv6_nbr_set_state>
   1e238:	e6ff      	b.n	1e03a <handle_na_input+0x2e>
	if (net_is_override(pkt) ||
   1e23a:	4620      	mov	r0, r4
   1e23c:	f7ff fa21 	bl	1d682 <net_is_override>
   1e240:	bb00      	cbnz	r0, 1e284 <handle_na_input+0x278>
	    (!net_is_override(pkt) && tllao_offset && !lladdr_changed)) {
   1e242:	4620      	mov	r0, r4
   1e244:	f7ff fa1d 	bl	1d682 <net_is_override>
	if (net_is_override(pkt) ||
   1e248:	b998      	cbnz	r0, 1e272 <handle_na_input+0x266>
	    (!net_is_override(pkt) && tllao_offset && !lladdr_changed)) {
   1e24a:	b196      	cbz	r6, 1e272 <handle_na_input+0x266>
   1e24c:	f1b8 0f00 	cmp.w	r8, #0
   1e250:	d10f      	bne.n	1e272 <handle_na_input+0x266>
		if (net_is_solicited(pkt)) {
   1e252:	4620      	mov	r0, r4
   1e254:	f7ff fa0a 	bl	1d66c <net_is_solicited>
   1e258:	b1f0      	cbz	r0, 1e298 <handle_na_input+0x28c>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_REACHABLE);
   1e25a:	2101      	movs	r1, #1
   1e25c:	4628      	mov	r0, r5
   1e25e:	f7ff f9cb 	bl	1d5f8 <ipv6_nbr_set_state>
			k_delayed_work_cancel(
   1e262:	68e8      	ldr	r0, [r5, #12]
   1e264:	3014      	adds	r0, #20
   1e266:	f003 ffef 	bl	22248 <k_delayed_work_cancel>
			net_ipv6_nbr_set_reachable_timer(net_pkt_iface(pkt),
   1e26a:	4629      	mov	r1, r5
   1e26c:	6960      	ldr	r0, [r4, #20]
   1e26e:	f7ff fec3 	bl	1dff8 <net_ipv6_nbr_set_reachable_timer>
	if (net_ipv6_nbr_data(nbr)->is_router && !net_is_router(pkt)) {
   1e272:	68eb      	ldr	r3, [r5, #12]
   1e274:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
   1e278:	2b00      	cmp	r3, #0
   1e27a:	d0ac      	beq.n	1e1d6 <handle_na_input+0x1ca>
   1e27c:	4620      	mov	r0, r4
   1e27e:	f7ff fa0b 	bl	1d698 <net_is_router>
   1e282:	e7a8      	b.n	1e1d6 <handle_na_input+0x1ca>
		if (lladdr_changed) {
   1e284:	f1b8 0f00 	cmp.w	r8, #0
   1e288:	d0e3      	beq.n	1e252 <handle_na_input+0x246>
			net_linkaddr_set(cached_lladdr, lladdr.addr,
   1e28a:	787a      	ldrb	r2, [r7, #1]
   1e28c:	f10d 010e 	add.w	r1, sp, #14
   1e290:	4638      	mov	r0, r7
   1e292:	f7ff f9da 	bl	1d64a <net_linkaddr_set>
   1e296:	e7dc      	b.n	1e252 <handle_na_input+0x246>
			if (lladdr_changed) {
   1e298:	f1b8 0f00 	cmp.w	r8, #0
   1e29c:	d0e9      	beq.n	1e272 <handle_na_input+0x266>
				ipv6_nbr_set_state(nbr,
   1e29e:	2102      	movs	r1, #2
   1e2a0:	4628      	mov	r0, r5
   1e2a2:	f7ff f9a9 	bl	1d5f8 <ipv6_nbr_set_state>
   1e2a6:	e7e4      	b.n	1e272 <handle_na_input+0x266>
			net_ipv6_nbr_data(nbr)->pending = NULL;
   1e2a8:	68eb      	ldr	r3, [r5, #12]
   1e2aa:	2200      	movs	r2, #0
   1e2ac:	601a      	str	r2, [r3, #0]
   1e2ae:	e7a3      	b.n	1e1f8 <handle_na_input+0x1ec>

0001e2b0 <net_ipv6_send_ns>:
{
   1e2b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e2b4:	b09d      	sub	sp, #116	; 0x74
   1e2b6:	461d      	mov	r5, r3
   1e2b8:	4689      	mov	r9, r1
   1e2ba:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
   1e2be:	9301      	str	r3, [sp, #4]
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, dst),
   1e2c0:	4629      	mov	r1, r5
{
   1e2c2:	4616      	mov	r6, r2
   1e2c4:	4680      	mov	r8, r0
   1e2c6:	f8dd a098 	ldr.w	sl, [sp, #152]	; 0x98
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, dst),
   1e2ca:	f7ff f992 	bl	1d5f2 <net_if_get_ll_reserve>
   1e2ce:	210a      	movs	r1, #10
   1e2d0:	f7fd fa60 	bl	1b794 <net_pkt_get_reserve_tx>
	if (!pkt) {
   1e2d4:	4604      	mov	r4, r0
   1e2d6:	b138      	cbz	r0, 1e2e8 <net_ipv6_send_ns+0x38>
	frag = net_pkt_get_frag(pkt, ND_NET_BUF_TIMEOUT);
   1e2d8:	210a      	movs	r1, #10
   1e2da:	f7fd fa73 	bl	1b7c4 <net_pkt_get_frag>
	if (!frag) {
   1e2de:	4607      	mov	r7, r0
   1e2e0:	b928      	cbnz	r0, 1e2ee <net_ipv6_send_ns+0x3e>
		net_pkt_unref(pkt);
   1e2e2:	4620      	mov	r0, r4
   1e2e4:	f7fd fad3 	bl	1b88e <net_pkt_unref>
		return -ENOMEM;
   1e2e8:	f06f 000b 	mvn.w	r0, #11
   1e2ec:	e03b      	b.n	1e366 <net_ipv6_send_ns+0xb6>
	net_pkt_frag_add(pkt, frag);
   1e2ee:	4601      	mov	r1, r0
   1e2f0:	4620      	mov	r0, r4
   1e2f2:	f7fd faf3 	bl	1b8dc <net_pkt_frag_add>
	pkt->iface = iface;
   1e2f6:	f8c4 8014 	str.w	r8, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1e2fa:	f898 3015 	ldrb.w	r3, [r8, #21]
   1e2fe:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1e302:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	pkt->family = family;
   1e306:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   1e30a:	220a      	movs	r2, #10
   1e30c:	f362 03c6 	bfi	r3, r2, #3, #4
   1e310:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	pkt->ip_hdr_len = len;
   1e314:	2328      	movs	r3, #40	; 0x28
   1e316:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	pkt->ipv6_ext_len = len;
   1e31a:	2300      	movs	r3, #0
   1e31c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
	net_pkt_ll_clear(pkt);
   1e320:	4620      	mov	r0, r4
   1e322:	f7ff f9e4 	bl	1d6ee <net_pkt_ll_clear>
   1e326:	6963      	ldr	r3, [r4, #20]
   1e328:	7d1b      	ldrb	r3, [r3, #20]
	if (iface->link_addr.len == 6) {
   1e32a:	2b06      	cmp	r3, #6
   1e32c:	d01e      	beq.n	1e36c <net_ipv6_send_ns+0xbc>
	return 0;
   1e32e:	2b08      	cmp	r3, #8
   1e330:	bf0c      	ite	eq
   1e332:	f04f 0810 	moveq.w	r8, #16
   1e336:	f04f 0800 	movne.w	r8, #0
	setup_headers(pkt, sizeof(struct net_icmpv6_ns_hdr) + llao_len,
   1e33a:	2287      	movs	r2, #135	; 0x87
   1e33c:	f108 0114 	add.w	r1, r8, #20
   1e340:	4620      	mov	r0, r4
	net_buf_add(frag, sizeof(struct net_icmpv6_ns_hdr));
   1e342:	3708      	adds	r7, #8
	setup_headers(pkt, sizeof(struct net_icmpv6_ns_hdr) + llao_len,
   1e344:	f7ff f9b2 	bl	1d6ac <setup_headers>
	net_buf_add(frag, sizeof(struct net_icmpv6_ns_hdr));
   1e348:	2114      	movs	r1, #20
   1e34a:	4638      	mov	r0, r7
   1e34c:	f7fb f82e 	bl	193ac <net_buf_simple_add>
	ns_hdr = net_icmpv6_get_ns_hdr(pkt, &hdr);
   1e350:	a917      	add	r1, sp, #92	; 0x5c
   1e352:	4620      	mov	r0, r4
   1e354:	f7fe fdca 	bl	1ceec <net_icmpv6_get_ns_hdr>
	if (!ns_hdr) {
   1e358:	4686      	mov	lr, r0
   1e35a:	b950      	cbnz	r0, 1e372 <net_ipv6_send_ns+0xc2>
	net_pkt_unref(pkt);
   1e35c:	4620      	mov	r0, r4
   1e35e:	f7fd fa96 	bl	1b88e <net_pkt_unref>
	return -EINVAL;
   1e362:	f06f 0015 	mvn.w	r0, #21
}
   1e366:	b01d      	add	sp, #116	; 0x74
   1e368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 8;
   1e36c:	f04f 0808 	mov.w	r8, #8
   1e370:	e7e3      	b.n	1e33a <net_ipv6_send_ns+0x8a>
   1e372:	68a3      	ldr	r3, [r4, #8]
	return pkt->frags->data;
   1e374:	689b      	ldr	r3, [r3, #8]
	if (!dst) {
   1e376:	2d00      	cmp	r5, #0
   1e378:	f040 8088 	bne.w	1e48c <net_ipv6_send_ns+0x1dc>
	dst->s6_addr[1]   = 0x02;
   1e37c:	2102      	movs	r1, #2
	dst->s6_addr[0]   = 0xFF;
   1e37e:	22ff      	movs	r2, #255	; 0xff
	dst->s6_addr[1]   = 0x02;
   1e380:	7659      	strb	r1, [r3, #25]
	dst->s6_addr[11]  = 0x01;
   1e382:	2101      	movs	r1, #1
	dst->s6_addr[0]   = 0xFF;
   1e384:	761a      	strb	r2, [r3, #24]
	dst->s6_addr[10]  = 0;
   1e386:	f883 5022 	strb.w	r5, [r3, #34]	; 0x22
	dst->s6_addr[11]  = 0x01;
   1e38a:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
	dst->s6_addr[12]  = 0xFF;
   1e38e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	UNALIGNED_PUT(0, &dst->s6_addr16[1]);
   1e392:	769d      	strb	r5, [r3, #26]
   1e394:	76dd      	strb	r5, [r3, #27]
	UNALIGNED_PUT(0, &dst->s6_addr16[2]);
   1e396:	771d      	strb	r5, [r3, #28]
   1e398:	775d      	strb	r5, [r3, #29]
	UNALIGNED_PUT(0, &dst->s6_addr16[3]);
   1e39a:	779d      	strb	r5, [r3, #30]
   1e39c:	77dd      	strb	r5, [r3, #31]
	UNALIGNED_PUT(0, &dst->s6_addr16[4]);
   1e39e:	f883 5020 	strb.w	r5, [r3, #32]
   1e3a2:	f883 5021 	strb.w	r5, [r3, #33]	; 0x21
	dst->s6_addr[13]  = src->s6_addr[13];
   1e3a6:	f89a 200d 	ldrb.w	r2, [sl, #13]
   1e3aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   1e3ae:	f8ba 200e 	ldrh.w	r2, [sl, #14]
   1e3b2:	84da      	strh	r2, [r3, #38]	; 0x26
	net_ipaddr_copy(&ns_hdr->tgt, tgt);
   1e3b4:	ab07      	add	r3, sp, #28
   1e3b6:	f10a 0510 	add.w	r5, sl, #16
   1e3ba:	469c      	mov	ip, r3
   1e3bc:	f8da 0000 	ldr.w	r0, [sl]
   1e3c0:	f8da 1004 	ldr.w	r1, [sl, #4]
   1e3c4:	461a      	mov	r2, r3
   1e3c6:	c203      	stmia	r2!, {r0, r1}
   1e3c8:	f10a 0a08 	add.w	sl, sl, #8
   1e3cc:	45aa      	cmp	sl, r5
   1e3ce:	4613      	mov	r3, r2
   1e3d0:	d1f4      	bne.n	1e3bc <net_ipv6_send_ns+0x10c>
   1e3d2:	f10e 0204 	add.w	r2, lr, #4
   1e3d6:	ad0b      	add	r5, sp, #44	; 0x2c
   1e3d8:	4692      	mov	sl, r2
   1e3da:	4663      	mov	r3, ip
   1e3dc:	cb03      	ldmia	r3!, {r0, r1}
   1e3de:	42ab      	cmp	r3, r5
   1e3e0:	6010      	str	r0, [r2, #0]
   1e3e2:	6051      	str	r1, [r2, #4]
   1e3e4:	469c      	mov	ip, r3
   1e3e6:	f102 0208 	add.w	r2, r2, #8
   1e3ea:	d1f6      	bne.n	1e3da <net_ipv6_send_ns+0x12a>
	net_icmpv6_set_ns_hdr(pkt, ns_hdr);
   1e3ec:	4671      	mov	r1, lr
   1e3ee:	4620      	mov	r0, r4
   1e3f0:	f7fe fd9f 	bl	1cf32 <net_icmpv6_set_ns_hdr>
	if (is_my_address) {
   1e3f4:	9a01      	ldr	r2, [sp, #4]
   1e3f6:	68a3      	ldr	r3, [r4, #8]
   1e3f8:	2a00      	cmp	r2, #0
   1e3fa:	d061      	beq.n	1e4c0 <net_ipv6_send_ns+0x210>
   1e3fc:	689e      	ldr	r6, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1e3fe:	4b5d      	ldr	r3, [pc, #372]	; (1e574 <net_ipv6_send_ns+0x2c4>)
   1e400:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1e402:	af0f      	add	r7, sp, #60	; 0x3c
   1e404:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   1e408:	f106 0208 	add.w	r2, r6, #8
   1e40c:	462b      	mov	r3, r5
   1e40e:	cb03      	ldmia	r3!, {r0, r1}
   1e410:	42bb      	cmp	r3, r7
   1e412:	6010      	str	r0, [r2, #0]
   1e414:	6051      	str	r1, [r2, #4]
   1e416:	461d      	mov	r5, r3
   1e418:	f102 0208 	add.w	r2, r2, #8
   1e41c:	d1f6      	bne.n	1e40c <net_ipv6_send_ns+0x15c>
		NET_IPV6_HDR(pkt)->len[1] -= llao_len;
   1e41e:	7973      	ldrb	r3, [r6, #5]
   1e420:	eba3 0808 	sub.w	r8, r3, r8
   1e424:	f886 8005 	strb.w	r8, [r6, #5]
	net_icmpv6_set_chksum(pkt, pkt->frags);
   1e428:	68a1      	ldr	r1, [r4, #8]
   1e42a:	4620      	mov	r0, r4
   1e42c:	f7fe fbb0 	bl	1cb90 <net_icmpv6_set_chksum>
	nbr = nbr_lookup(&net_neighbor.table, net_pkt_iface(pkt), &ns_hdr->tgt);
   1e430:	4651      	mov	r1, sl
   1e432:	6960      	ldr	r0, [r4, #20]
   1e434:	f7ff fa5a 	bl	1d8ec <nbr_lookup.isra.29>
	if (!nbr) {
   1e438:	4605      	mov	r5, r0
   1e43a:	b938      	cbnz	r0, 1e44c <net_ipv6_send_ns+0x19c>
		nbr = nbr_new(net_pkt_iface(pkt), &ns_hdr->tgt, false,
   1e43c:	4602      	mov	r2, r0
   1e43e:	4651      	mov	r1, sl
   1e440:	6960      	ldr	r0, [r4, #20]
   1e442:	f7ff f9ef 	bl	1d824 <nbr_new.isra.30>
		if (!nbr) {
   1e446:	4605      	mov	r5, r0
   1e448:	2800      	cmp	r0, #0
   1e44a:	d087      	beq.n	1e35c <net_ipv6_send_ns+0xac>
	if (pending) {
   1e44c:	f1b9 0f00 	cmp.w	r9, #0
   1e450:	d00f      	beq.n	1e472 <net_ipv6_send_ns+0x1c2>
   1e452:	68ee      	ldr	r6, [r5, #12]
		if (!net_ipv6_nbr_data(nbr)->pending) {
   1e454:	6833      	ldr	r3, [r6, #0]
			net_ipv6_nbr_data(nbr)->pending = net_pkt_ref(pending);
   1e456:	4648      	mov	r0, r9
		if (!net_ipv6_nbr_data(nbr)->pending) {
   1e458:	2b00      	cmp	r3, #0
   1e45a:	f040 8085 	bne.w	1e568 <net_ipv6_send_ns+0x2b8>
			net_ipv6_nbr_data(nbr)->pending = net_pkt_ref(pending);
   1e45e:	f7fd fa0b 	bl	1b878 <net_pkt_ref>
		k_delayed_work_submit(&net_ipv6_nbr_data(nbr)->send_ns,
   1e462:	68e9      	ldr	r1, [r5, #12]
			net_ipv6_nbr_data(nbr)->pending = net_pkt_ref(pending);
   1e464:	6030      	str	r0, [r6, #0]
   1e466:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1e46a:	313c      	adds	r1, #60	; 0x3c
   1e46c:	4842      	ldr	r0, [pc, #264]	; (1e578 <net_ipv6_send_ns+0x2c8>)
   1e46e:	f003 ff45 	bl	222fc <k_delayed_work_submit_to_queue>
	if (net_send_data(pkt) < 0) {
   1e472:	4620      	mov	r0, r4
   1e474:	f7fc f8a2 	bl	1a5bc <net_send_data>
   1e478:	2800      	cmp	r0, #0
   1e47a:	da78      	bge.n	1e56e <net_ipv6_send_ns+0x2be>
		if (pending) {
   1e47c:	f1b9 0f00 	cmp.w	r9, #0
   1e480:	f43f af6c 	beq.w	1e35c <net_ipv6_send_ns+0xac>
			nbr_clear_ns_pending(net_ipv6_nbr_data(nbr));
   1e484:	68e8      	ldr	r0, [r5, #12]
   1e486:	f7ff f8c2 	bl	1d60e <nbr_clear_ns_pending>
   1e48a:	e767      	b.n	1e35c <net_ipv6_send_ns+0xac>
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, dst);
   1e48c:	f10d 0c0c 	add.w	ip, sp, #12
   1e490:	f105 0b10 	add.w	fp, r5, #16
   1e494:	6828      	ldr	r0, [r5, #0]
   1e496:	6869      	ldr	r1, [r5, #4]
   1e498:	4662      	mov	r2, ip
   1e49a:	c203      	stmia	r2!, {r0, r1}
   1e49c:	3508      	adds	r5, #8
   1e49e:	455d      	cmp	r5, fp
   1e4a0:	4694      	mov	ip, r2
   1e4a2:	d1f7      	bne.n	1e494 <net_ipv6_send_ns+0x1e4>
   1e4a4:	ad03      	add	r5, sp, #12
   1e4a6:	3318      	adds	r3, #24
   1e4a8:	f10d 0c1c 	add.w	ip, sp, #28
   1e4ac:	462a      	mov	r2, r5
   1e4ae:	ca03      	ldmia	r2!, {r0, r1}
   1e4b0:	4562      	cmp	r2, ip
   1e4b2:	6018      	str	r0, [r3, #0]
   1e4b4:	6059      	str	r1, [r3, #4]
   1e4b6:	4615      	mov	r5, r2
   1e4b8:	f103 0308 	add.w	r3, r3, #8
   1e4bc:	d1f6      	bne.n	1e4ac <net_ipv6_send_ns+0x1fc>
   1e4be:	e779      	b.n	1e3b4 <net_ipv6_send_ns+0x104>
		if (src) {
   1e4c0:	b38e      	cbz	r6, 1e526 <net_ipv6_send_ns+0x276>
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, src);
   1e4c2:	aa0f      	add	r2, sp, #60	; 0x3c
   1e4c4:	689b      	ldr	r3, [r3, #8]
   1e4c6:	f106 0c10 	add.w	ip, r6, #16
   1e4ca:	4615      	mov	r5, r2
   1e4cc:	6830      	ldr	r0, [r6, #0]
   1e4ce:	6871      	ldr	r1, [r6, #4]
   1e4d0:	4696      	mov	lr, r2
   1e4d2:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   1e4d6:	3608      	adds	r6, #8
   1e4d8:	4566      	cmp	r6, ip
   1e4da:	4672      	mov	r2, lr
   1e4dc:	d1f6      	bne.n	1e4cc <net_ipv6_send_ns+0x21c>
   1e4de:	3308      	adds	r3, #8
   1e4e0:	ae13      	add	r6, sp, #76	; 0x4c
   1e4e2:	462a      	mov	r2, r5
   1e4e4:	ca03      	ldmia	r2!, {r0, r1}
   1e4e6:	42b2      	cmp	r2, r6
   1e4e8:	6018      	str	r0, [r3, #0]
   1e4ea:	6059      	str	r1, [r3, #4]
   1e4ec:	4615      	mov	r5, r2
   1e4ee:	f103 0308 	add.w	r3, r3, #8
   1e4f2:	d1f6      	bne.n	1e4e2 <net_ipv6_send_ns+0x232>
   1e4f4:	68a3      	ldr	r3, [r4, #8]
		if (net_is_ipv6_addr_unspecified(&NET_IPV6_HDR(pkt)->src)) {
   1e4f6:	6898      	ldr	r0, [r3, #8]
   1e4f8:	3008      	adds	r0, #8
   1e4fa:	f7ff f86d 	bl	1d5d8 <net_is_ipv6_addr_unspecified>
   1e4fe:	2800      	cmp	r0, #0
   1e500:	f47f af2c 	bne.w	1e35c <net_ipv6_send_ns+0xac>
		net_buf_add(frag, llao_len);
   1e504:	4641      	mov	r1, r8
   1e506:	4638      	mov	r0, r7
   1e508:	f7fa ff50 	bl	193ac <net_buf_simple_add>
			 (u8_t *)net_pkt_icmp_data(pkt) +
   1e50c:	4620      	mov	r0, r4
		set_llao(&net_pkt_iface(pkt)->link_addr,
   1e50e:	6965      	ldr	r5, [r4, #20]
			 (u8_t *)net_pkt_icmp_data(pkt) +
   1e510:	f7fd fc08 	bl	1bd24 <net_pkt_icmp_data>
		set_llao(&net_pkt_iface(pkt)->link_addr,
   1e514:	3510      	adds	r5, #16
   1e516:	f100 0118 	add.w	r1, r0, #24
   1e51a:	2301      	movs	r3, #1
   1e51c:	4642      	mov	r2, r8
   1e51e:	4628      	mov	r0, r5
   1e520:	f7ff f8f4 	bl	1d70c <set_llao>
   1e524:	e780      	b.n	1e428 <net_ipv6_send_ns+0x178>
   1e526:	689d      	ldr	r5, [r3, #8]
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1e528:	6960      	ldr	r0, [r4, #20]
   1e52a:	f105 0118 	add.w	r1, r5, #24
   1e52e:	f7fc fe37 	bl	1b1a0 <net_if_ipv6_select_src_addr>
		}
   1e532:	aa13      	add	r2, sp, #76	; 0x4c
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1e534:	4603      	mov	r3, r0
		}
   1e536:	f100 0c10 	add.w	ip, r0, #16
   1e53a:	4616      	mov	r6, r2
   1e53c:	6818      	ldr	r0, [r3, #0]
   1e53e:	6859      	ldr	r1, [r3, #4]
   1e540:	4696      	mov	lr, r2
   1e542:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   1e546:	3308      	adds	r3, #8
   1e548:	4563      	cmp	r3, ip
   1e54a:	4672      	mov	r2, lr
   1e54c:	d1f6      	bne.n	1e53c <net_ipv6_send_ns+0x28c>
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1e54e:	f105 0308 	add.w	r3, r5, #8
   1e552:	ad17      	add	r5, sp, #92	; 0x5c
   1e554:	4632      	mov	r2, r6
   1e556:	ca03      	ldmia	r2!, {r0, r1}
   1e558:	42aa      	cmp	r2, r5
   1e55a:	6018      	str	r0, [r3, #0]
   1e55c:	6059      	str	r1, [r3, #4]
   1e55e:	4616      	mov	r6, r2
   1e560:	f103 0308 	add.w	r3, r3, #8
   1e564:	d1f6      	bne.n	1e554 <net_ipv6_send_ns+0x2a4>
   1e566:	e7c5      	b.n	1e4f4 <net_ipv6_send_ns+0x244>
			net_pkt_unref(pending);
   1e568:	f7fd f991 	bl	1b88e <net_pkt_unref>
			goto drop;
   1e56c:	e6f6      	b.n	1e35c <net_ipv6_send_ns+0xac>
	return 0;
   1e56e:	2000      	movs	r0, #0
   1e570:	e6f9      	b.n	1e366 <net_ipv6_send_ns+0xb6>
   1e572:	bf00      	nop
   1e574:	000272b8 	.word	0x000272b8
   1e578:	20003340 	.word	0x20003340

0001e57c <net_ipv6_nbr_add>:
{
   1e57c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1e580:	4606      	mov	r6, r0
   1e582:	460f      	mov	r7, r1
   1e584:	4615      	mov	r5, r2
	nbr = nbr_lookup(&net_neighbor.table, iface, addr);
   1e586:	f7ff f9b1 	bl	1d8ec <nbr_lookup.isra.29>
	if (!nbr) {
   1e58a:	4604      	mov	r4, r0
   1e58c:	b940      	cbnz	r0, 1e5a0 <net_ipv6_nbr_add+0x24>
		nbr = nbr_new(iface, addr, is_router, state);
   1e58e:	f89d 2020 	ldrb.w	r2, [sp, #32]
   1e592:	4639      	mov	r1, r7
   1e594:	4630      	mov	r0, r6
   1e596:	f7ff f945 	bl	1d824 <nbr_new.isra.30>
		if (!nbr) {
   1e59a:	4604      	mov	r4, r0
   1e59c:	2800      	cmp	r0, #0
   1e59e:	d035      	beq.n	1e60c <net_ipv6_nbr_add+0x90>
	if (net_nbr_link(nbr, iface, lladdr) == -EALREADY &&
   1e5a0:	462a      	mov	r2, r5
   1e5a2:	4631      	mov	r1, r6
   1e5a4:	4620      	mov	r0, r4
   1e5a6:	f7fe ff8d 	bl	1d4c4 <net_nbr_link>
   1e5aa:	3045      	adds	r0, #69	; 0x45
   1e5ac:	d117      	bne.n	1e5de <net_ipv6_nbr_add+0x62>
	    net_ipv6_nbr_data(nbr)->state != NET_IPV6_NBR_STATE_STATIC) {
   1e5ae:	68e3      	ldr	r3, [r4, #12]
	if (net_nbr_link(nbr, iface, lladdr) == -EALREADY &&
   1e5b0:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   1e5b4:	2b05      	cmp	r3, #5
   1e5b6:	d023      	beq.n	1e600 <net_ipv6_nbr_add+0x84>
		cached_lladdr = net_nbr_get_lladdr(nbr->idx);
   1e5b8:	7860      	ldrb	r0, [r4, #1]
   1e5ba:	f7fe fffd 	bl	1d5b8 <net_nbr_get_lladdr>
		if (memcmp(cached_lladdr->addr, lladdr->addr, lladdr->len)) {
   1e5be:	792a      	ldrb	r2, [r5, #4]
   1e5c0:	6829      	ldr	r1, [r5, #0]
		cached_lladdr = net_nbr_get_lladdr(nbr->idx);
   1e5c2:	4680      	mov	r8, r0
		if (memcmp(cached_lladdr->addr, lladdr->addr, lladdr->len)) {
   1e5c4:	3002      	adds	r0, #2
   1e5c6:	f7e2 f8b7 	bl	738 <memcmp>
   1e5ca:	b1a0      	cbz	r0, 1e5f6 <net_ipv6_nbr_add+0x7a>
			net_linkaddr_set(cached_lladdr, lladdr->addr,
   1e5cc:	792a      	ldrb	r2, [r5, #4]
   1e5ce:	6829      	ldr	r1, [r5, #0]
   1e5d0:	4640      	mov	r0, r8
   1e5d2:	f7ff f83a 	bl	1d64a <net_linkaddr_set>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_STALE);
   1e5d6:	2102      	movs	r1, #2
   1e5d8:	4620      	mov	r0, r4
   1e5da:	f7ff f80d 	bl	1d5f8 <ipv6_nbr_set_state>
	if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_INCOMPLETE) {
   1e5de:	68e3      	ldr	r3, [r4, #12]
   1e5e0:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   1e5e4:	b963      	cbnz	r3, 1e600 <net_ipv6_nbr_add+0x84>
		ret = net_ipv6_send_ns(iface, NULL, NULL, NULL, addr, false);
   1e5e6:	9301      	str	r3, [sp, #4]
   1e5e8:	9700      	str	r7, [sp, #0]
   1e5ea:	461a      	mov	r2, r3
   1e5ec:	4619      	mov	r1, r3
   1e5ee:	4630      	mov	r0, r6
   1e5f0:	f7ff fe5e 	bl	1e2b0 <net_ipv6_send_ns>
   1e5f4:	e004      	b.n	1e600 <net_ipv6_nbr_add+0x84>
		} else if (net_ipv6_nbr_data(nbr)->state ==
   1e5f6:	68e3      	ldr	r3, [r4, #12]
   1e5f8:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   1e5fc:	2b00      	cmp	r3, #0
   1e5fe:	d0ea      	beq.n	1e5d6 <net_ipv6_nbr_add+0x5a>
   1e600:	2300      	movs	r3, #0
   1e602:	461a      	mov	r2, r3
   1e604:	4631      	mov	r1, r6
   1e606:	4803      	ldr	r0, [pc, #12]	; (1e614 <net_ipv6_nbr_add+0x98>)
   1e608:	f000 fff4 	bl	1f5f4 <net_mgmt_event_notify_with_info>
}
   1e60c:	4620      	mov	r0, r4
   1e60e:	b002      	add	sp, #8
   1e610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e614:	f060000f 	.word	0xf060000f

0001e618 <handle_ra_input>:
{
   1e618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e61c:	6885      	ldr	r5, [r0, #8]
   1e61e:	b097      	sub	sp, #92	; 0x5c
   1e620:	4604      	mov	r4, r0
	return net_buf_frags_len(pkt->frags);
   1e622:	4628      	mov	r0, r5
   1e624:	f7fe ffd0 	bl	1d5c8 <net_buf_frags_len>
	if ((total_len < (sizeof(struct net_ipv6_hdr) +
   1e628:	b280      	uxth	r0, r0
   1e62a:	2839      	cmp	r0, #57	; 0x39
   1e62c:	d908      	bls.n	1e640 <handle_ra_input+0x28>
	return pkt->frags->data;
   1e62e:	68ab      	ldr	r3, [r5, #8]
			  sizeof(struct net_icmpv6_nd_opt_hdr))) ||
   1e630:	79da      	ldrb	r2, [r3, #7]
   1e632:	2aff      	cmp	r2, #255	; 0xff
   1e634:	d104      	bne.n	1e640 <handle_ra_input+0x28>
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT) ||
   1e636:	891a      	ldrh	r2, [r3, #8]
   1e638:	f248 03fe 	movw	r3, #33022	; 0x80fe
   1e63c:	429a      	cmp	r2, r3
   1e63e:	d00a      	beq.n	1e656 <handle_ra_input+0x3e>
		icmp_hdr = net_icmpv6_get_hdr(pkt, &icmphdr);
   1e640:	a90e      	add	r1, sp, #56	; 0x38
   1e642:	4620      	mov	r0, r4
   1e644:	f7fe faee 	bl	1cc24 <net_icmpv6_get_hdr>
		if (!icmp_hdr || icmp_hdr->code != 0) {
   1e648:	b108      	cbz	r0, 1e64e <handle_ra_input+0x36>
   1e64a:	7843      	ldrb	r3, [r0, #1]
   1e64c:	b11b      	cbz	r3, 1e656 <handle_ra_input+0x3e>
	return NET_DROP;
   1e64e:	2002      	movs	r0, #2
}
   1e650:	b017      	add	sp, #92	; 0x5c
   1e652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	offset = sizeof(struct net_ipv6_hdr) + net_pkt_ipv6_ext_len(pkt) +
   1e656:	f894 103f 	ldrb.w	r1, [r4, #63]	; 0x3f
	return net_frag_read(frag, offset, pos, 1, value);
   1e65a:	68a0      	ldr	r0, [r4, #8]
   1e65c:	ad16      	add	r5, sp, #88	; 0x58
   1e65e:	312c      	adds	r1, #44	; 0x2c
   1e660:	f825 1d4a 	strh.w	r1, [r5, #-74]!
   1e664:	f10d 0309 	add.w	r3, sp, #9
   1e668:	9300      	str	r3, [sp, #0]
   1e66a:	462a      	mov	r2, r5
   1e66c:	2301      	movs	r3, #1
   1e66e:	f7fd fa69 	bl	1bb44 <net_frag_read>
	return net_frag_read(frag, offset, pos, len, NULL);
   1e672:	2300      	movs	r3, #0
   1e674:	9300      	str	r3, [sp, #0]
   1e676:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1e67a:	2301      	movs	r3, #1
   1e67c:	462a      	mov	r2, r5
   1e67e:	f7fd fa61 	bl	1bb44 <net_frag_read>
	if (!frag) {
   1e682:	2800      	cmp	r0, #0
   1e684:	d0e3      	beq.n	1e64e <handle_ra_input+0x36>
	if (hop_limit) {
   1e686:	f89d 3009 	ldrb.w	r3, [sp, #9]
   1e68a:	b113      	cbz	r3, 1e692 <handle_ra_input+0x7a>
   1e68c:	6962      	ldr	r2, [r4, #20]
	iface->ipv6.hop_limit = hop_limit;
   1e68e:	f882 324c 	strb.w	r3, [r2, #588]	; 0x24c
	frag = net_frag_read_be16(frag, offset, &offset, &router_lifetime);
   1e692:	ab03      	add	r3, sp, #12
   1e694:	462a      	mov	r2, r5
   1e696:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1e69a:	f7fd fa8b 	bl	1bbb4 <net_frag_read_be16>
	frag = net_frag_read_be32(frag, offset, &offset, &reachable_time);
   1e69e:	ab04      	add	r3, sp, #16
   1e6a0:	462a      	mov	r2, r5
   1e6a2:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1e6a6:	f7fd fa95 	bl	1bbd4 <net_frag_read_be32>
	frag = net_frag_read_be32(frag, offset, &offset, &retrans_timer);
   1e6aa:	ab05      	add	r3, sp, #20
   1e6ac:	462a      	mov	r2, r5
   1e6ae:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1e6b2:	f7fd fa8f 	bl	1bbd4 <net_frag_read_be32>
	if (!frag) {
   1e6b6:	4606      	mov	r6, r0
   1e6b8:	2800      	cmp	r0, #0
   1e6ba:	d0c8      	beq.n	1e64e <handle_ra_input+0x36>
	ra_hdr = net_icmpv6_get_ra_hdr(pkt, &hdr);
   1e6bc:	a907      	add	r1, sp, #28
   1e6be:	4620      	mov	r0, r4
   1e6c0:	f7fe fd1c 	bl	1d0fc <net_icmpv6_get_ra_hdr>
	if (!ra_hdr) {
   1e6c4:	2800      	cmp	r0, #0
   1e6c6:	d0c2      	beq.n	1e64e <handle_ra_input+0x36>
	if (reachable_time && reachable_time <= MAX_REACHABLE_TIME &&
   1e6c8:	9b04      	ldr	r3, [sp, #16]
   1e6ca:	4ac3      	ldr	r2, [pc, #780]	; (1e9d8 <handle_ra_input+0x3c0>)
   1e6cc:	1e59      	subs	r1, r3, #1
   1e6ce:	4291      	cmp	r1, r2
   1e6d0:	d80c      	bhi.n	1e6ec <handle_ra_input+0xd4>
   1e6d2:	6967      	ldr	r7, [r4, #20]
	     ra_hdr->reachable_time)) {
   1e6d4:	6841      	ldr	r1, [r0, #4]
	if (reachable_time && reachable_time <= MAX_REACHABLE_TIME &&
   1e6d6:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
   1e6da:	4291      	cmp	r1, r2
   1e6dc:	d006      	beq.n	1e6ec <handle_ra_input+0xd4>
	iface->ipv6.base_reachable_time = reachable_time;
   1e6de:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
	iface->ipv6.reachable_time = net_if_ipv6_calc_reachable_time(iface);
   1e6e2:	4638      	mov	r0, r7
   1e6e4:	f7fc fd9c 	bl	1b220 <net_if_ipv6_calc_reachable_time>
   1e6e8:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
	if (retrans_timer) {
   1e6ec:	9b05      	ldr	r3, [sp, #20]
   1e6ee:	b113      	cbz	r3, 1e6f6 <handle_ra_input+0xde>
	iface->ipv6.retrans_timer = retrans_timer;
   1e6f0:	6962      	ldr	r2, [r4, #20]
   1e6f2:	f8c2 3248 	str.w	r3, [r2, #584]	; 0x248
{
   1e6f6:	f04f 0800 	mov.w	r8, #0
		frag = net_frag_read(frag, offset, &offset, 1, &type);
   1e6fa:	f04f 0a01 	mov.w	sl, #1
   1e6fe:	f10d 030b 	add.w	r3, sp, #11
   1e702:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1e706:	9300      	str	r3, [sp, #0]
   1e708:	462a      	mov	r2, r5
   1e70a:	2301      	movs	r3, #1
   1e70c:	4630      	mov	r0, r6
   1e70e:	f7fd fa19 	bl	1bb44 <net_frag_read>
		frag = net_frag_read(frag, offset, &offset, 1, &length);
   1e712:	f10d 030a 	add.w	r3, sp, #10
   1e716:	9300      	str	r3, [sp, #0]
   1e718:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1e71c:	2301      	movs	r3, #1
   1e71e:	462a      	mov	r2, r5
   1e720:	f7fd fa10 	bl	1bb44 <net_frag_read>
		if (!frag) {
   1e724:	2800      	cmp	r0, #0
   1e726:	d092      	beq.n	1e64e <handle_ra_input+0x36>
		switch (type) {
   1e728:	f89d 200b 	ldrb.w	r2, [sp, #11]
   1e72c:	f8bd b00e 	ldrh.w	fp, [sp, #14]
   1e730:	2a03      	cmp	r2, #3
   1e732:	f000 8096 	beq.w	1e862 <handle_ra_input+0x24a>
   1e736:	2a05      	cmp	r2, #5
   1e738:	d044      	beq.n	1e7c4 <handle_ra_input+0x1ac>
   1e73a:	2a01      	cmp	r2, #1
   1e73c:	f89d 700a 	ldrb.w	r7, [sp, #10]
   1e740:	f040 818c 	bne.w	1ea5c <handle_ra_input+0x444>
	llstorage.len = NET_LINK_ADDR_MAX_LENGTH;
   1e744:	2306      	movs	r3, #6
	lladdr.len = NET_LINK_ADDR_MAX_LENGTH;
   1e746:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	llstorage.len = NET_LINK_ADDR_MAX_LENGTH;
   1e74a:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
	if (net_pkt_ll_src(pkt)->len < lladdr.len) {
   1e74e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   1e752:	2b05      	cmp	r3, #5
	lladdr.addr = llstorage.addr;
   1e754:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
		lladdr.len = net_pkt_ll_src(pkt)->len;
   1e758:	bf98      	it	ls
   1e75a:	f88d 302c 	strbls.w	r3, [sp, #44]	; 0x2c
	lladdr.addr = llstorage.addr;
   1e75e:	920a      	str	r2, [sp, #40]	; 0x28
	frag = net_frag_read(frag, offset, pos, lladdr.len, lladdr.addr);
   1e760:	9200      	str	r2, [sp, #0]
   1e762:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   1e766:	462a      	mov	r2, r5
   1e768:	4659      	mov	r1, fp
   1e76a:	f7fd f9eb 	bl	1bb44 <net_frag_read>
	if (!frag && offset) {
   1e76e:	4606      	mov	r6, r0
   1e770:	b910      	cbnz	r0, 1e778 <handle_ra_input+0x160>
   1e772:	f1bb 0f00 	cmp.w	fp, #0
   1e776:	d121      	bne.n	1e7bc <handle_ra_input+0x1a4>
	padding = len * 8 - 2 - lladdr.len;
   1e778:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   1e77c:	ebc3 03c7 	rsb	r3, r3, r7, lsl #3
   1e780:	3b02      	subs	r3, #2
	if (padding) {
   1e782:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   1e786:	d00c      	beq.n	1e7a2 <handle_ra_input+0x18a>
		frag = net_frag_read(frag, *pos, pos, padding, NULL);
   1e788:	2200      	movs	r2, #0
   1e78a:	9200      	str	r2, [sp, #0]
   1e78c:	4630      	mov	r0, r6
   1e78e:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1e792:	462a      	mov	r2, r5
   1e794:	f7fd f9d6 	bl	1bb44 <net_frag_read>
		if (!frag && *pos) {
   1e798:	4606      	mov	r6, r0
   1e79a:	b910      	cbnz	r0, 1e7a2 <handle_ra_input+0x18a>
   1e79c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1e7a0:	b963      	cbnz	r3, 1e7bc <handle_ra_input+0x1a4>
	return pkt->frags->data;
   1e7a2:	68a3      	ldr	r3, [r4, #8]
	return net_ipv6_nbr_add(net_pkt_iface(pkt), &NET_IPV6_HDR(pkt)->src,
   1e7a4:	6960      	ldr	r0, [r4, #20]
   1e7a6:	6899      	ldr	r1, [r3, #8]
   1e7a8:	2302      	movs	r3, #2
   1e7aa:	9300      	str	r3, [sp, #0]
   1e7ac:	aa0a      	add	r2, sp, #40	; 0x28
   1e7ae:	2301      	movs	r3, #1
   1e7b0:	3108      	adds	r1, #8
   1e7b2:	f7ff fee3 	bl	1e57c <net_ipv6_nbr_add>
   1e7b6:	4680      	mov	r8, r0
			if (!frag && offset) {
   1e7b8:	2e00      	cmp	r6, #0
   1e7ba:	d1a0      	bne.n	1e6fe <handle_ra_input+0xe6>
   1e7bc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1e7c0:	b303      	cbz	r3, 1e804 <handle_ra_input+0x1ec>
   1e7c2:	e744      	b.n	1e64e <handle_ra_input+0x36>
	return net_frag_read(frag, offset, pos, len, NULL);
   1e7c4:	2300      	movs	r3, #0
   1e7c6:	9300      	str	r3, [sp, #0]
   1e7c8:	462a      	mov	r2, r5
   1e7ca:	2302      	movs	r3, #2
   1e7cc:	4659      	mov	r1, fp
   1e7ce:	f7fd f9b9 	bl	1bb44 <net_frag_read>
			frag = net_frag_read_be32(frag, offset, &offset, &mtu);
   1e7d2:	ab06      	add	r3, sp, #24
   1e7d4:	462a      	mov	r2, r5
   1e7d6:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1e7da:	f7fd f9fb 	bl	1bbd4 <net_frag_read_be32>
			if (!frag && offset) {
   1e7de:	4606      	mov	r6, r0
   1e7e0:	b920      	cbnz	r0, 1e7ec <handle_ra_input+0x1d4>
   1e7e2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1e7e6:	2b00      	cmp	r3, #0
   1e7e8:	f47f af31 	bne.w	1e64e <handle_ra_input+0x36>
			if (mtu < MIN_IPV6_MTU || mtu > MAX_IPV6_MTU) {
   1e7ec:	9b06      	ldr	r3, [sp, #24]
   1e7ee:	f5a3 62a0 	sub.w	r2, r3, #1280	; 0x500
   1e7f2:	f5b2 4f7b 	cmp.w	r2, #64256	; 0xfb00
   1e7f6:	f4bf af2a 	bcs.w	1e64e <handle_ra_input+0x36>
	iface->mtu = mtu;
   1e7fa:	6962      	ldr	r2, [r4, #20]
			net_if_set_mtu(net_pkt_iface(pkt), mtu);
   1e7fc:	8513      	strh	r3, [r2, #40]	; 0x28
	while (frag) {
   1e7fe:	2e00      	cmp	r6, #0
   1e800:	f47f af7d 	bne.w	1e6fe <handle_ra_input+0xe6>
	return pkt->frags->data;
   1e804:	68a3      	ldr	r3, [r4, #8]
	router = net_if_ipv6_router_lookup(net_pkt_iface(pkt),
   1e806:	6960      	ldr	r0, [r4, #20]
   1e808:	6899      	ldr	r1, [r3, #8]
   1e80a:	3108      	adds	r1, #8
   1e80c:	f7fc fc12 	bl	1b034 <net_if_ipv6_router_lookup>
   1e810:	f8bd 200c 	ldrh.w	r2, [sp, #12]
	if (router) {
   1e814:	4603      	mov	r3, r0
   1e816:	2800      	cmp	r0, #0
   1e818:	f000 8138 	beq.w	1ea8c <handle_ra_input+0x474>
		if (!router_lifetime) {
   1e81c:	2a00      	cmp	r2, #0
   1e81e:	f040 8128 	bne.w	1ea72 <handle_ra_input+0x45a>
			net_if_ipv6_router_rm(router);
   1e822:	f7fc fc85 	bl	1b130 <net_if_ipv6_router_rm>
	if (nbr && net_ipv6_nbr_data(nbr)->pending) {
   1e826:	f1b8 0f00 	cmp.w	r8, #0
   1e82a:	d010      	beq.n	1e84e <handle_ra_input+0x236>
   1e82c:	f8d8 300c 	ldr.w	r3, [r8, #12]
   1e830:	6818      	ldr	r0, [r3, #0]
   1e832:	b160      	cbz	r0, 1e84e <handle_ra_input+0x236>
		if (net_send_data(net_ipv6_nbr_data(nbr)->pending) < 0) {
   1e834:	f7fb fec2 	bl	1a5bc <net_send_data>
   1e838:	2800      	cmp	r0, #0
   1e83a:	da04      	bge.n	1e846 <handle_ra_input+0x22e>
			net_pkt_unref(net_ipv6_nbr_data(nbr)->pending);
   1e83c:	f8d8 300c 	ldr.w	r3, [r8, #12]
   1e840:	6818      	ldr	r0, [r3, #0]
   1e842:	f7fd f824 	bl	1b88e <net_pkt_unref>
		nbr_clear_ns_pending(net_ipv6_nbr_data(nbr));
   1e846:	f8d8 000c 	ldr.w	r0, [r8, #12]
   1e84a:	f7fe fee0 	bl	1d60e <nbr_clear_ns_pending>
	k_delayed_work_cancel(&net_pkt_iface(pkt)->ipv6.rs_timer);
   1e84e:	6960      	ldr	r0, [r4, #20]
   1e850:	f500 7006 	add.w	r0, r0, #536	; 0x218
   1e854:	f003 fcf8 	bl	22248 <k_delayed_work_cancel>
	net_pkt_unref(pkt);
   1e858:	4620      	mov	r0, r4
   1e85a:	f7fd f818 	bl	1b88e <net_pkt_unref>
	return NET_OK;
   1e85e:	2000      	movs	r0, #0
   1e860:	e6f6      	b.n	1e650 <handle_ra_input+0x38>
			frag = handle_ra_prefix(pkt, frag, length, offset,
   1e862:	f89d 300a 	ldrb.w	r3, [sp, #10]
	prefix_info.type = NET_ICMPV6_ND_OPT_PREFIX_INFO;
   1e866:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	prefix_info.len = len * 8 - 2;
   1e86a:	00db      	lsls	r3, r3, #3
   1e86c:	3b02      	subs	r3, #2
   1e86e:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
	frag = net_frag_read(frag, offset, pos, 1, &prefix_info.prefix_len);
   1e872:	f10d 033a 	add.w	r3, sp, #58	; 0x3a
   1e876:	4659      	mov	r1, fp
   1e878:	9300      	str	r3, [sp, #0]
   1e87a:	462a      	mov	r2, r5
   1e87c:	2301      	movs	r3, #1
   1e87e:	f7fd f961 	bl	1bb44 <net_frag_read>
	frag = net_frag_read(frag, *pos, pos, 1, &prefix_info.flags);
   1e882:	f10d 033b 	add.w	r3, sp, #59	; 0x3b
   1e886:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1e88a:	9300      	str	r3, [sp, #0]
   1e88c:	462a      	mov	r2, r5
   1e88e:	2301      	movs	r3, #1
   1e890:	f7fd f958 	bl	1bb44 <net_frag_read>
	frag = net_frag_read_be32(frag, *pos, pos, &prefix_info.valid_lifetime);
   1e894:	ab0f      	add	r3, sp, #60	; 0x3c
   1e896:	462a      	mov	r2, r5
   1e898:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1e89c:	f7fd f99a 	bl	1bbd4 <net_frag_read_be32>
	frag = net_frag_read_be32(frag, *pos, pos,
   1e8a0:	ab10      	add	r3, sp, #64	; 0x40
   1e8a2:	462a      	mov	r2, r5
   1e8a4:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1e8a8:	f7fd f994 	bl	1bbd4 <net_frag_read_be32>
	return net_frag_read(frag, offset, pos, len, NULL);
   1e8ac:	2300      	movs	r3, #0
   1e8ae:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1e8b2:	9300      	str	r3, [sp, #0]
   1e8b4:	462a      	mov	r2, r5
   1e8b6:	2304      	movs	r3, #4
	frag = net_frag_read(frag, *pos, pos, sizeof(struct in6_addr),
   1e8b8:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   1e8bc:	f7fd f942 	bl	1bb44 <net_frag_read>
   1e8c0:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1e8c4:	f8cd b000 	str.w	fp, [sp]
   1e8c8:	2310      	movs	r3, #16
   1e8ca:	462a      	mov	r2, r5
   1e8cc:	f7fd f93a 	bl	1bb44 <net_frag_read>
	if (!frag && *pos) {
   1e8d0:	4606      	mov	r6, r0
   1e8d2:	b920      	cbnz	r0, 1e8de <handle_ra_input+0x2c6>
   1e8d4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1e8d8:	2b00      	cmp	r3, #0
   1e8da:	f47f af6f 	bne.w	1e7bc <handle_ra_input+0x1a4>
	if (prefix_info.valid_lifetime >= prefix_info.preferred_lifetime &&
   1e8de:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1e8e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1e8e2:	429a      	cmp	r2, r3
   1e8e4:	f4ff af68 	bcc.w	1e7b8 <handle_ra_input+0x1a0>
   1e8e8:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
   1e8ec:	f248 03fe 	movw	r3, #33022	; 0x80fe
   1e8f0:	429a      	cmp	r2, r3
   1e8f2:	f43f af61 	beq.w	1e7b8 <handle_ra_input+0x1a0>
		if (prefix_info.flags & NET_ICMPV6_RA_FLAG_ONLINK) {
   1e8f6:	f99d 303b 	ldrsb.w	r3, [sp, #59]	; 0x3b
   1e8fa:	2b00      	cmp	r3, #0
   1e8fc:	da20      	bge.n	1e940 <handle_ra_input+0x328>
	prefix = net_if_ipv6_prefix_lookup(net_pkt_iface(pkt),
   1e8fe:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
   1e902:	6960      	ldr	r0, [r4, #20]
   1e904:	4659      	mov	r1, fp
   1e906:	f7fc fafb 	bl	1af00 <net_if_ipv6_prefix_lookup>
	if (!prefix) {
   1e90a:	b940      	cbnz	r0, 1e91e <handle_ra_input+0x306>
		if (!prefix_info->valid_lifetime) {
   1e90c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1e90e:	b1bb      	cbz	r3, 1e940 <handle_ra_input+0x328>
		prefix = net_if_ipv6_prefix_add(net_pkt_iface(pkt),
   1e910:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
   1e914:	6960      	ldr	r0, [r4, #20]
   1e916:	4659      	mov	r1, fp
   1e918:	f7fc fa80 	bl	1ae1c <net_if_ipv6_prefix_add>
		if (prefix) {
   1e91c:	b180      	cbz	r0, 1e940 <handle_ra_input+0x328>
	switch (prefix_info->valid_lifetime) {
   1e91e:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1e920:	b139      	cbz	r1, 1e932 <handle_ra_input+0x31a>
   1e922:	1c4a      	adds	r2, r1, #1
   1e924:	d055      	beq.n	1e9d2 <handle_ra_input+0x3ba>
	prefix->is_infinite = is_infinite;
   1e926:	2300      	movs	r3, #0
   1e928:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
		net_if_ipv6_prefix_set_timer(prefix,
   1e92c:	f7fc fb38 	bl	1afa0 <net_if_ipv6_prefix_set_timer>
   1e930:	e006      	b.n	1e940 <handle_ra_input+0x328>
		net_if_ipv6_prefix_rm(net_pkt_iface(pkt),
   1e932:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
   1e936:	f100 0128 	add.w	r1, r0, #40	; 0x28
   1e93a:	6960      	ldr	r0, [r4, #20]
   1e93c:	f7fc fb42 	bl	1afc4 <net_if_ipv6_prefix_rm>
		if ((prefix_info.flags & NET_ICMPV6_RA_FLAG_AUTONOMOUS) &&
   1e940:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   1e944:	065b      	lsls	r3, r3, #25
   1e946:	f57f af37 	bpl.w	1e7b8 <handle_ra_input+0x1a0>
   1e94a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1e94c:	2b00      	cmp	r3, #0
   1e94e:	f43f af33 	beq.w	1e7b8 <handle_ra_input+0x1a0>
		    prefix_info.valid_lifetime &&
   1e952:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   1e956:	2b40      	cmp	r3, #64	; 0x40
   1e958:	f47f af2e 	bne.w	1e7b8 <handle_ra_input+0x1a0>
	struct in6_addr addr = { };
   1e95c:	2210      	movs	r2, #16
   1e95e:	2100      	movs	r1, #0
   1e960:	a80a      	add	r0, sp, #40	; 0x28
   1e962:	f7e1 ff42 	bl	7ea <memset>
	addr->s6_addr[0] = 0xfe;
   1e966:	f04f 09fe 	mov.w	r9, #254	; 0xfe
	addr->s6_addr[1] = 0x80;
   1e96a:	2280      	movs	r2, #128	; 0x80
   1e96c:	6967      	ldr	r7, [r4, #20]
	addr->s6_addr[0] = 0xfe;
   1e96e:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
	addr->s6_addr[1] = 0x80;
   1e972:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
	switch (lladdr->len) {
   1e976:	7d3a      	ldrb	r2, [r7, #20]
   1e978:	2a06      	cmp	r2, #6
   1e97a:	d02f      	beq.n	1e9dc <handle_ra_input+0x3c4>
   1e97c:	2a08      	cmp	r2, #8
   1e97e:	d048      	beq.n	1ea12 <handle_ra_input+0x3fa>
   1e980:	2a02      	cmp	r2, #2
   1e982:	d10e      	bne.n	1e9a2 <handle_ra_input+0x38a>
		if (lladdr->type == NET_LINK_IEEE802154) {
   1e984:	7d7a      	ldrb	r2, [r7, #21]
   1e986:	2a01      	cmp	r2, #1
   1e988:	d10b      	bne.n	1e9a2 <handle_ra_input+0x38a>
			addr->s6_addr[11] = 0xff;
   1e98a:	22ff      	movs	r2, #255	; 0xff
   1e98c:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
			addr->s6_addr[12] = 0xfe;
   1e990:	f88d 9034 	strb.w	r9, [sp, #52]	; 0x34
			addr->s6_addr[14] = lladdr->addr[0];
   1e994:	693b      	ldr	r3, [r7, #16]
   1e996:	781a      	ldrb	r2, [r3, #0]
   1e998:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
			addr->s6_addr[15] = lladdr->addr[1];
   1e99c:	785b      	ldrb	r3, [r3, #1]
   1e99e:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
	memcpy(&addr, &prefix_info->prefix, sizeof(struct in6_addr) / 2);
   1e9a2:	4659      	mov	r1, fp
   1e9a4:	2208      	movs	r2, #8
   1e9a6:	a80a      	add	r0, sp, #40	; 0x28
   1e9a8:	f7e1 fef3 	bl	792 <memcpy>
	ifaddr = net_if_ipv6_addr_lookup(&addr, NULL);
   1e9ac:	2100      	movs	r1, #0
   1e9ae:	a80a      	add	r0, sp, #40	; 0x28
   1e9b0:	f7fb ff92 	bl	1a8d8 <net_if_ipv6_addr_lookup>
   1e9b4:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
	if (ifaddr && ifaddr->addr_type == NET_ADDR_AUTOCONF) {
   1e9b8:	4607      	mov	r7, r0
   1e9ba:	2800      	cmp	r0, #0
   1e9bc:	d043      	beq.n	1ea46 <handle_ra_input+0x42e>
   1e9be:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
   1e9c2:	2b01      	cmp	r3, #1
   1e9c4:	d13f      	bne.n	1ea46 <handle_ra_input+0x42e>
		if (prefix_info->valid_lifetime ==
   1e9c6:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
   1e9ca:	d127      	bne.n	1ea1c <handle_ra_input+0x404>
	ifaddr->is_infinite = is_infinite;
   1e9cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
   1e9d0:	e6f2      	b.n	1e7b8 <handle_ra_input+0x1a0>
	prefix->is_infinite = is_infinite;
   1e9d2:	f880 a039 	strb.w	sl, [r0, #57]	; 0x39
   1e9d6:	e7b3      	b.n	1e940 <handle_ra_input+0x328>
   1e9d8:	0036ee7f 	.word	0x0036ee7f
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   1e9dc:	2203      	movs	r2, #3
   1e9de:	6939      	ldr	r1, [r7, #16]
   1e9e0:	a80c      	add	r0, sp, #48	; 0x30
   1e9e2:	f7e1 fed6 	bl	792 <memcpy>
		addr->s6_addr[11] = 0xff;
   1e9e6:	22ff      	movs	r2, #255	; 0xff
   1e9e8:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
		addr->s6_addr[12] = 0xfe;
   1e9ec:	f88d 9034 	strb.w	r9, [sp, #52]	; 0x34
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   1e9f0:	6939      	ldr	r1, [r7, #16]
   1e9f2:	2203      	movs	r2, #3
   1e9f4:	4411      	add	r1, r2
   1e9f6:	f10d 0035 	add.w	r0, sp, #53	; 0x35
   1e9fa:	f7e1 feca 	bl	792 <memcpy>
		if (lladdr->type == NET_LINK_ETHERNET) {
   1e9fe:	7d7b      	ldrb	r3, [r7, #21]
   1ea00:	2b03      	cmp	r3, #3
   1ea02:	d1ce      	bne.n	1e9a2 <handle_ra_input+0x38a>
		addr->s6_addr[8] ^= 0x02;
   1ea04:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   1ea08:	f083 0302 	eor.w	r3, r3, #2
   1ea0c:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
   1ea10:	e7c7      	b.n	1e9a2 <handle_ra_input+0x38a>
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
   1ea12:	6939      	ldr	r1, [r7, #16]
   1ea14:	a80c      	add	r0, sp, #48	; 0x30
   1ea16:	f7e1 febc 	bl	792 <memcpy>
   1ea1a:	e7f3      	b.n	1ea04 <handle_ra_input+0x3ec>
		if ((prefix_info->valid_lifetime > TWO_HOURS) ||
   1ea1c:	f5bb 5fe1 	cmp.w	fp, #7200	; 0x1c20
   1ea20:	d905      	bls.n	1ea2e <handle_ra_input+0x416>
			net_if_ipv6_addr_update_lifetime(ifaddr,
   1ea22:	990f      	ldr	r1, [sp, #60]	; 0x3c
			net_if_ipv6_addr_update_lifetime(ifaddr, TWO_HOURS);
   1ea24:	4638      	mov	r0, r7
   1ea26:	f7fb ffa5 	bl	1a974 <net_if_ipv6_addr_update_lifetime>
	ifaddr->is_infinite = is_infinite;
   1ea2a:	2300      	movs	r3, #0
   1ea2c:	e7ce      	b.n	1e9cc <handle_ra_input+0x3b4>
	return _timeout_remaining_get(&work->timeout);
   1ea2e:	3020      	adds	r0, #32
   1ea30:	f003 fd3e 	bl	224b0 <_timeout_remaining_get>
	return k_delayed_work_remaining_get(work) / MSEC_PER_SEC;
   1ea34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1ea38:	fb90 f0f3 	sdiv	r0, r0, r3
		if ((prefix_info->valid_lifetime > TWO_HOURS) ||
   1ea3c:	4583      	cmp	fp, r0
   1ea3e:	d8f0      	bhi.n	1ea22 <handle_ra_input+0x40a>
			net_if_ipv6_addr_update_lifetime(ifaddr, TWO_HOURS);
   1ea40:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
   1ea44:	e7ee      	b.n	1ea24 <handle_ra_input+0x40c>
		if (prefix_info->valid_lifetime ==
   1ea46:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
			net_if_ipv6_addr_add(net_pkt_iface(pkt),
   1ea4a:	bf0c      	ite	eq
   1ea4c:	2300      	moveq	r3, #0
			net_if_ipv6_addr_add(net_pkt_iface(pkt),
   1ea4e:	465b      	movne	r3, fp
   1ea50:	2201      	movs	r2, #1
   1ea52:	a90a      	add	r1, sp, #40	; 0x28
   1ea54:	6960      	ldr	r0, [r4, #20]
   1ea56:	f7fb ff93 	bl	1a980 <net_if_ipv6_addr_add>
   1ea5a:	e6ad      	b.n	1e7b8 <handle_ra_input+0x1a0>
					     length * 8 - 2);
   1ea5c:	00fb      	lsls	r3, r7, #3
   1ea5e:	2200      	movs	r2, #0
			frag = net_frag_skip(frag, offset, &offset,
   1ea60:	3b02      	subs	r3, #2
   1ea62:	9200      	str	r2, [sp, #0]
   1ea64:	b29b      	uxth	r3, r3
   1ea66:	462a      	mov	r2, r5
   1ea68:	4659      	mov	r1, fp
   1ea6a:	f7fd f86b 	bl	1bb44 <net_frag_read>
			if (!frag && offset) {
   1ea6e:	4606      	mov	r6, r0
   1ea70:	e6a2      	b.n	1e7b8 <handle_ra_input+0x1a0>
			if (nbr) {
   1ea72:	f1b8 0f00 	cmp.w	r8, #0
   1ea76:	d004      	beq.n	1ea82 <handle_ra_input+0x46a>
				net_ipv6_nbr_data(nbr)->is_router = true;
   1ea78:	f8d8 100c 	ldr.w	r1, [r8, #12]
   1ea7c:	2001      	movs	r0, #1
   1ea7e:	f881 0069 	strb.w	r0, [r1, #105]	; 0x69
			net_if_ipv6_router_update_lifetime(router,
   1ea82:	4611      	mov	r1, r2
   1ea84:	4618      	mov	r0, r3
   1ea86:	f7fc fb03 	bl	1b090 <net_if_ipv6_router_update_lifetime>
   1ea8a:	e6cc      	b.n	1e826 <handle_ra_input+0x20e>
	return pkt->frags->data;
   1ea8c:	68a3      	ldr	r3, [r4, #8]
		net_if_ipv6_router_add(net_pkt_iface(pkt),
   1ea8e:	6960      	ldr	r0, [r4, #20]
   1ea90:	6899      	ldr	r1, [r3, #8]
   1ea92:	3108      	adds	r1, #8
   1ea94:	f7fc fb02 	bl	1b09c <net_if_ipv6_router_add>
   1ea98:	e6c5      	b.n	1e826 <handle_ra_input+0x20e>
   1ea9a:	bf00      	nop

0001ea9c <handle_ns_input>:
{
   1ea9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eaa0:	4604      	mov	r4, r0
   1eaa2:	b09f      	sub	sp, #124	; 0x7c
	return net_buf_frags_len(pkt->frags);
   1eaa4:	6880      	ldr	r0, [r0, #8]
   1eaa6:	f7fe fd8f 	bl	1d5c8 <net_buf_frags_len>
	ns_hdr = net_icmpv6_get_ns_hdr(pkt, &nshdr);
   1eaaa:	f10d 0a64 	add.w	sl, sp, #100	; 0x64
   1eaae:	4605      	mov	r5, r0
   1eab0:	4651      	mov	r1, sl
   1eab2:	4620      	mov	r0, r4
   1eab4:	f7fe fa1a 	bl	1ceec <net_icmpv6_get_ns_hdr>
	if (!ns_hdr) {
   1eab8:	4681      	mov	r9, r0
   1eaba:	b908      	cbnz	r0, 1eac0 <handle_ns_input+0x24>
	return NET_DROP;
   1eabc:	2002      	movs	r0, #2
   1eabe:	e09e      	b.n	1ebfe <handle_ns_input+0x162>
	if ((total_len < (sizeof(struct net_ipv6_hdr) +
   1eac0:	b2ad      	uxth	r5, r5
   1eac2:	2d3f      	cmp	r5, #63	; 0x3f
   1eac4:	d904      	bls.n	1ead0 <handle_ns_input+0x34>
	return pkt->frags->data;
   1eac6:	68a3      	ldr	r3, [r4, #8]
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT)) {
   1eac8:	689b      	ldr	r3, [r3, #8]
			  sizeof(struct net_icmpv6_ns_hdr))) ||
   1eaca:	79db      	ldrb	r3, [r3, #7]
   1eacc:	2bff      	cmp	r3, #255	; 0xff
   1eace:	d00c      	beq.n	1eaea <handle_ns_input+0x4e>
		if (net_is_ipv6_addr_mcast(&ns_hdr->tgt)) {
   1ead0:	f899 3004 	ldrb.w	r3, [r9, #4]
   1ead4:	2bff      	cmp	r3, #255	; 0xff
   1ead6:	d108      	bne.n	1eaea <handle_ns_input+0x4e>
			icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   1ead8:	a915      	add	r1, sp, #84	; 0x54
   1eada:	4620      	mov	r0, r4
   1eadc:	f7fe f8a2 	bl	1cc24 <net_icmpv6_get_hdr>
			if (!icmp_hdr || icmp_hdr->code != 0) {
   1eae0:	2800      	cmp	r0, #0
   1eae2:	d0eb      	beq.n	1eabc <handle_ns_input+0x20>
   1eae4:	7843      	ldrb	r3, [r0, #1]
   1eae6:	2b00      	cmp	r3, #0
   1eae8:	d1e8      	bne.n	1eabc <handle_ns_input+0x20>
	pkt->ipv6_ext_opt_len = len;
   1eaea:	2314      	movs	r3, #20
   1eaec:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
	nd_opt_hdr = net_icmpv6_get_nd_opt_hdr(pkt, &ndopthdr);
   1eaf0:	a904      	add	r1, sp, #16
   1eaf2:	4620      	mov	r0, r4
   1eaf4:	f7fe fa55 	bl	1cfa2 <net_icmpv6_get_nd_opt_hdr>
   1eaf8:	4607      	mov	r7, r0
	return net_buf_frags_len(pkt->frags);
   1eafa:	68a0      	ldr	r0, [r4, #8]
   1eafc:	f7fe fd64 	bl	1d5c8 <net_buf_frags_len>
	frag = net_frag_read(pkt->frags, sllao_offset,
   1eb00:	f10d 0546 	add.w	r5, sp, #70	; 0x46
	left_len = net_pkt_get_len(pkt) - (sizeof(struct net_ipv6_hdr) +
   1eb04:	f1a0 0b2c 	sub.w	fp, r0, #44	; 0x2c
	while (nd_opt_hdr && net_pkt_ipv6_ext_opt_len(pkt) < left_len) {
   1eb08:	b11f      	cbz	r7, 1eb12 <handle_ns_input+0x76>
   1eb0a:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   1eb0e:	459b      	cmp	fp, r3
   1eb10:	d878      	bhi.n	1ec04 <handle_ns_input+0x168>
		ifaddr = net_if_ipv6_addr_lookup_by_iface(net_pkt_iface(pkt),
   1eb12:	f109 0604 	add.w	r6, r9, #4
   1eb16:	4631      	mov	r1, r6
   1eb18:	6960      	ldr	r0, [r4, #20]
   1eb1a:	f7fe fe64 	bl	1d7e6 <net_if_ipv6_addr_lookup_by_iface>
	if (!ifaddr) {
   1eb1e:	4683      	mov	fp, r0
   1eb20:	2800      	cmp	r0, #0
   1eb22:	d0cb      	beq.n	1eabc <handle_ns_input+0x20>
	return pkt->frags->data;
   1eb24:	68a3      	ldr	r3, [r4, #8]
   1eb26:	689d      	ldr	r5, [r3, #8]
		src = &NET_IPV6_HDR(pkt)->src;
   1eb28:	f105 0708 	add.w	r7, r5, #8
		tgt = &ifaddr->address.in6_addr;
   1eb2c:	f100 0804 	add.w	r8, r0, #4
	if (net_is_ipv6_addr_unspecified(&NET_IPV6_HDR(pkt)->src)) {
   1eb30:	4638      	mov	r0, r7
   1eb32:	f7fe fd51 	bl	1d5d8 <net_is_ipv6_addr_unspecified>
   1eb36:	4601      	mov	r1, r0
   1eb38:	2800      	cmp	r0, #0
   1eb3a:	f000 80c6 	beq.w	1ecca <handle_ns_input+0x22e>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   1eb3e:	69aa      	ldr	r2, [r5, #24]
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   1eb40:	f240 23ff 	movw	r3, #767	; 0x2ff
   1eb44:	429a      	cmp	r2, r3
   1eb46:	d1b9      	bne.n	1eabc <handle_ns_input+0x20>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   1eb48:	69eb      	ldr	r3, [r5, #28]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   1eb4a:	2b00      	cmp	r3, #0
   1eb4c:	d1b6      	bne.n	1eabc <handle_ns_input+0x20>
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   1eb4e:	6a2a      	ldr	r2, [r5, #32]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   1eb50:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
   1eb54:	d1b2      	bne.n	1eabc <handle_ns_input+0x20>
		((UNALIGNED_GET(&addr->s6_addr32[3]) & htonl(0xff000000)) ==
   1eb56:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   1eb58:	b2d2      	uxtb	r2, r2
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   1eb5a:	2aff      	cmp	r2, #255	; 0xff
   1eb5c:	d1ae      	bne.n	1eabc <handle_ns_input+0x20>
		if (ifaddr->addr_state == NET_ADDR_TENTATIVE) {
   1eb5e:	f99b 2065 	ldrsb.w	r2, [fp, #101]	; 0x65
   1eb62:	2a00      	cmp	r2, #0
   1eb64:	f000 80a5 	beq.w	1ecb2 <handle_ns_input+0x216>
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   1eb68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1eb6c:	762a      	strb	r2, [r5, #24]
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   1eb6e:	76ab      	strb	r3, [r5, #26]
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   1eb70:	2202      	movs	r2, #2
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   1eb72:	76eb      	strb	r3, [r5, #27]
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   1eb74:	772b      	strb	r3, [r5, #28]
   1eb76:	776b      	strb	r3, [r5, #29]
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   1eb78:	77ab      	strb	r3, [r5, #30]
   1eb7a:	77eb      	strb	r3, [r5, #31]
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   1eb7c:	f885 3020 	strb.w	r3, [r5, #32]
   1eb80:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   1eb84:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1eb88:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   1eb8c:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
   1eb90:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   1eb94:	f885 3026 	strb.w	r3, [r5, #38]	; 0x26
   1eb98:	2301      	movs	r3, #1
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   1eb9a:	766a      	strb	r2, [r5, #25]
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   1eb9c:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
		flags = NET_ICMPV6_NA_FLAG_OVERRIDE;
   1eba0:	f105 0118 	add.w	r1, r5, #24
   1eba4:	6960      	ldr	r0, [r4, #20]
   1eba6:	f7fc fafb 	bl	1b1a0 <net_if_ipv6_select_src_addr>
		goto send_na;
   1ebaa:	ad05      	add	r5, sp, #20
		flags = NET_ICMPV6_NA_FLAG_OVERRIDE;
   1ebac:	4603      	mov	r3, r0
		goto send_na;
   1ebae:	f100 0e10 	add.w	lr, r0, #16
   1ebb2:	462a      	mov	r2, r5
   1ebb4:	6818      	ldr	r0, [r3, #0]
   1ebb6:	6859      	ldr	r1, [r3, #4]
   1ebb8:	462e      	mov	r6, r5
   1ebba:	c603      	stmia	r6!, {r0, r1}
   1ebbc:	3308      	adds	r3, #8
   1ebbe:	4573      	cmp	r3, lr
   1ebc0:	4635      	mov	r5, r6
   1ebc2:	d1f7      	bne.n	1ebb4 <handle_ns_input+0x118>
				net_if_ipv6_select_src_addr(net_pkt_iface(pkt),
   1ebc4:	463d      	mov	r5, r7
   1ebc6:	ae09      	add	r6, sp, #36	; 0x24
   1ebc8:	4613      	mov	r3, r2
   1ebca:	cb03      	ldmia	r3!, {r0, r1}
   1ebcc:	42b3      	cmp	r3, r6
   1ebce:	6028      	str	r0, [r5, #0]
   1ebd0:	6069      	str	r1, [r5, #4]
   1ebd2:	461a      	mov	r2, r3
   1ebd4:	f105 0508 	add.w	r5, r5, #8
   1ebd8:	d1f6      	bne.n	1ebc8 <handle_ns_input+0x12c>
		flags = NET_ICMPV6_NA_FLAG_OVERRIDE;
   1ebda:	2320      	movs	r3, #32
   1ebdc:	68a2      	ldr	r2, [r4, #8]
	ret = net_ipv6_send_na(net_pkt_iface(pkt),
   1ebde:	6960      	ldr	r0, [r4, #20]
			       &NET_IPV6_HDR(pkt)->dst,
   1ebe0:	6892      	ldr	r2, [r2, #8]
	ret = net_ipv6_send_na(net_pkt_iface(pkt),
   1ebe2:	9300      	str	r3, [sp, #0]
   1ebe4:	3218      	adds	r2, #24
   1ebe6:	4643      	mov	r3, r8
   1ebe8:	4639      	mov	r1, r7
   1ebea:	f7ff f93a 	bl	1de62 <net_ipv6_send_na>
	if (!ret) {
   1ebee:	4605      	mov	r5, r0
   1ebf0:	2800      	cmp	r0, #0
   1ebf2:	f47f af63 	bne.w	1eabc <handle_ns_input+0x20>
		net_pkt_unref(pkt);
   1ebf6:	4620      	mov	r0, r4
   1ebf8:	f7fc fe49 	bl	1b88e <net_pkt_unref>
		return NET_OK;
   1ebfc:	4628      	mov	r0, r5
}
   1ebfe:	b01f      	add	sp, #124	; 0x7c
   1ec00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!nd_opt_hdr->len) {
   1ec04:	787e      	ldrb	r6, [r7, #1]
   1ec06:	9303      	str	r3, [sp, #12]
   1ec08:	2e00      	cmp	r6, #0
   1ec0a:	d082      	beq.n	1eb12 <handle_ns_input+0x76>
		switch (nd_opt_hdr->type) {
   1ec0c:	783a      	ldrb	r2, [r7, #0]
   1ec0e:	2a01      	cmp	r2, #1
   1ec10:	d13e      	bne.n	1ec90 <handle_ns_input+0x1f4>
   1ec12:	f8d4 8008 	ldr.w	r8, [r4, #8]
				    &NET_IPV6_HDR(pkt)->src)) {
   1ec16:	f8d8 0008 	ldr.w	r0, [r8, #8]
			if (net_is_ipv6_addr_unspecified(
   1ec1a:	3008      	adds	r0, #8
   1ec1c:	f7fe fcdc 	bl	1d5d8 <net_is_ipv6_addr_unspecified>
   1ec20:	2800      	cmp	r0, #0
   1ec22:	f47f af4b 	bne.w	1eabc <handle_ns_input+0x20>
			if (nd_opt_hdr->len > 2) {
   1ec26:	2e02      	cmp	r6, #2
   1ec28:	f63f af48 	bhi.w	1eabc <handle_ns_input+0x20>
						net_pkt_ipv6_ext_len(pkt) +
   1ec2c:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
						net_pkt_ip_hdr_len(pkt) +
   1ec30:	f894 1035 	ldrb.w	r1, [r4, #53]	; 0x35
			if (!handle_ns_neighbor(pkt, nd_opt_hdr->len,
   1ec34:	9b03      	ldr	r3, [sp, #12]
	frag = net_frag_read(pkt->frags, sllao_offset,
   1ec36:	9500      	str	r5, [sp, #0]
						net_pkt_ip_hdr_len(pkt) +
   1ec38:	4411      	add	r1, r2
			if (!handle_ns_neighbor(pkt, nd_opt_hdr->len,
   1ec3a:	3106      	adds	r1, #6
   1ec3c:	4419      	add	r1, r3
	lladdr.len = 8 * ll_len - 2;
   1ec3e:	00f3      	lsls	r3, r6, #3
   1ec40:	3b02      	subs	r3, #2
   1ec42:	b2db      	uxtb	r3, r3
	frag = net_frag_read(pkt->frags, sllao_offset,
   1ec44:	aa0d      	add	r2, sp, #52	; 0x34
   1ec46:	b289      	uxth	r1, r1
   1ec48:	4640      	mov	r0, r8
	lladdr.len = 8 * ll_len - 2;
   1ec4a:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
	frag = net_frag_read(pkt->frags, sllao_offset,
   1ec4e:	f7fc ff79 	bl	1bb44 <net_frag_read>
	if (!frag && pos == 0xffff) {
   1ec52:	b930      	cbnz	r0, 1ec62 <handle_ns_input+0x1c6>
   1ec54:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
   1ec58:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1ec5c:	429a      	cmp	r2, r3
   1ec5e:	f43f af2d 	beq.w	1eabc <handle_ns_input+0x20>
	nbr_lladdr.len = lladdr.len;
   1ec62:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
	if (net_pkt_ll_src(pkt)->len < nbr_lladdr.len) {
   1ec66:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	nbr_lladdr.len = lladdr.len;
   1ec6a:	f88d 2058 	strb.w	r2, [sp, #88]	; 0x58
	if (net_pkt_ll_src(pkt)->len < nbr_lladdr.len) {
   1ec6e:	429a      	cmp	r2, r3
		nbr_lladdr.len = net_pkt_ll_src(pkt)->len;
   1ec70:	bf88      	it	hi
   1ec72:	f88d 3058 	strbhi.w	r3, [sp, #88]	; 0x58
   1ec76:	68a3      	ldr	r3, [r4, #8]
	nbr_lladdr.addr = lladdr.addr;
   1ec78:	9515      	str	r5, [sp, #84]	; 0x54
	return net_ipv6_nbr_add(net_pkt_iface(pkt), &NET_IPV6_HDR(pkt)->src,
   1ec7a:	6899      	ldr	r1, [r3, #8]
   1ec7c:	6960      	ldr	r0, [r4, #20]
   1ec7e:	2300      	movs	r3, #0
   1ec80:	9300      	str	r3, [sp, #0]
   1ec82:	aa15      	add	r2, sp, #84	; 0x54
   1ec84:	3108      	adds	r1, #8
   1ec86:	f7ff fc79 	bl	1e57c <net_ipv6_nbr_add>
			if (!handle_ns_neighbor(pkt, nd_opt_hdr->len,
   1ec8a:	2800      	cmp	r0, #0
   1ec8c:	f43f af16 	beq.w	1eabc <handle_ns_input+0x20>
   1ec90:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
					     (nd_opt_hdr->len << 3));
   1ec94:	787b      	ldrb	r3, [r7, #1]
		net_pkt_set_ipv6_ext_opt_len(pkt,
   1ec96:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1ec9a:	b2db      	uxtb	r3, r3
		if (prev_opt_len >= net_pkt_ipv6_ext_opt_len(pkt)) {
   1ec9c:	4293      	cmp	r3, r2
	pkt->ipv6_ext_opt_len = len;
   1ec9e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
   1eca2:	f67f af0b 	bls.w	1eabc <handle_ns_input+0x20>
		nd_opt_hdr = net_icmpv6_get_nd_opt_hdr(pkt, &ndopthdr);
   1eca6:	a904      	add	r1, sp, #16
   1eca8:	4620      	mov	r0, r4
   1ecaa:	f7fe f97a 	bl	1cfa2 <net_icmpv6_get_nd_opt_hdr>
   1ecae:	4607      	mov	r7, r0
   1ecb0:	e72a      	b.n	1eb08 <handle_ns_input+0x6c>
	if (net_is_ipv6_ll_addr(addr)) {
   1ecb2:	f8bb 2004 	ldrh.w	r2, [fp, #4]
   1ecb6:	f248 03fe 	movw	r3, #33022	; 0x80fe
   1ecba:	429a      	cmp	r2, r3
   1ecbc:	f43f aefe 	beq.w	1eabc <handle_ns_input+0x20>
	net_if_ipv6_dad_failed(iface, addr);
   1ecc0:	4641      	mov	r1, r8
   1ecc2:	6960      	ldr	r0, [r4, #20]
   1ecc4:	f7fc f83a 	bl	1ad3c <net_if_ipv6_dad_failed>
   1ecc8:	e6f8      	b.n	1eabc <handle_ns_input+0x20>
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
   1ecca:	4638      	mov	r0, r7
   1eccc:	f7fb fe04 	bl	1a8d8 <net_if_ipv6_addr_lookup>
	if (net_is_my_ipv6_addr(&NET_IPV6_HDR(pkt)->src)) {
   1ecd0:	2800      	cmp	r0, #0
   1ecd2:	f47f aef3 	bne.w	1eabc <handle_ns_input+0x20>
	return pkt->frags->data;
   1ecd6:	68a3      	ldr	r3, [r4, #8]
   1ecd8:	689b      	ldr	r3, [r3, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   1ecda:	6999      	ldr	r1, [r3, #24]
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   1ecdc:	f240 22ff 	movw	r2, #767	; 0x2ff
   1ece0:	4291      	cmp	r1, r2
	if (net_is_ipv6_addr_solicited_node(&NET_IPV6_HDR(pkt)->dst)) {
   1ece2:	f103 0b18 	add.w	fp, r3, #24
   1ece6:	d139      	bne.n	1ed5c <handle_ns_input+0x2c0>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   1ece8:	69da      	ldr	r2, [r3, #28]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   1ecea:	bbba      	cbnz	r2, 1ed5c <handle_ns_input+0x2c0>
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   1ecec:	6a1a      	ldr	r2, [r3, #32]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   1ecee:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
   1ecf2:	d133      	bne.n	1ed5c <handle_ns_input+0x2c0>
		((UNALIGNED_GET(&addr->s6_addr32[3]) & htonl(0xff000000)) ==
   1ecf4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1ecf6:	b2d2      	uxtb	r2, r2
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   1ecf8:	2aff      	cmp	r2, #255	; 0xff
   1ecfa:	d12f      	bne.n	1ed5c <handle_ns_input+0x2c0>
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst,
   1ecfc:	ad09      	add	r5, sp, #36	; 0x24
   1ecfe:	f103 0208 	add.w	r2, r3, #8
   1ed02:	46ac      	mov	ip, r5
   1ed04:	6810      	ldr	r0, [r2, #0]
   1ed06:	6851      	ldr	r1, [r2, #4]
   1ed08:	46ae      	mov	lr, r5
   1ed0a:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   1ed0e:	3208      	adds	r2, #8
   1ed10:	455a      	cmp	r2, fp
   1ed12:	4675      	mov	r5, lr
   1ed14:	d1f6      	bne.n	1ed04 <handle_ns_input+0x268>
   1ed16:	ad0d      	add	r5, sp, #52	; 0x34
   1ed18:	46e6      	mov	lr, ip
   1ed1a:	e8be 0003 	ldmia.w	lr!, {r0, r1}
   1ed1e:	45ae      	cmp	lr, r5
   1ed20:	6010      	str	r0, [r2, #0]
   1ed22:	6051      	str	r1, [r2, #4]
   1ed24:	46f4      	mov	ip, lr
   1ed26:	f102 0208 	add.w	r2, r2, #8
   1ed2a:	d1f5      	bne.n	1ed18 <handle_ns_input+0x27c>
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, &ns_hdr->tgt);
   1ed2c:	46ae      	mov	lr, r5
   1ed2e:	f109 0914 	add.w	r9, r9, #20
   1ed32:	6830      	ldr	r0, [r6, #0]
   1ed34:	6871      	ldr	r1, [r6, #4]
   1ed36:	4672      	mov	r2, lr
   1ed38:	c203      	stmia	r2!, {r0, r1}
   1ed3a:	3608      	adds	r6, #8
   1ed3c:	454e      	cmp	r6, r9
   1ed3e:	4696      	mov	lr, r2
   1ed40:	d1f7      	bne.n	1ed32 <handle_ns_input+0x296>
   1ed42:	462a      	mov	r2, r5
   1ed44:	3308      	adds	r3, #8
   1ed46:	ae11      	add	r6, sp, #68	; 0x44
   1ed48:	4615      	mov	r5, r2
   1ed4a:	cd03      	ldmia	r5!, {r0, r1}
   1ed4c:	42b5      	cmp	r5, r6
   1ed4e:	6018      	str	r0, [r3, #0]
   1ed50:	6059      	str	r1, [r3, #4]
   1ed52:	462a      	mov	r2, r5
   1ed54:	f103 0308 	add.w	r3, r3, #8
   1ed58:	d1f6      	bne.n	1ed48 <handle_ns_input+0x2ac>
   1ed5a:	e03e      	b.n	1edda <handle_ns_input+0x33e>
		ifaddr = net_if_ipv6_addr_lookup_by_iface(net_pkt_iface(pkt),
   1ed5c:	4659      	mov	r1, fp
   1ed5e:	6960      	ldr	r0, [r4, #20]
   1ed60:	f7fe fd41 	bl	1d7e6 <net_if_ipv6_addr_lookup_by_iface>
	if (ifaddr) {
   1ed64:	4605      	mov	r5, r0
   1ed66:	2800      	cmp	r0, #0
   1ed68:	f43f aea8 	beq.w	1eabc <handle_ns_input+0x20>
   1ed6c:	68a3      	ldr	r3, [r4, #8]
   1ed6e:	689b      	ldr	r3, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst,
   1ed70:	f10d 0e44 	add.w	lr, sp, #68	; 0x44
   1ed74:	f103 0208 	add.w	r2, r3, #8
   1ed78:	f103 0b18 	add.w	fp, r3, #24
   1ed7c:	4617      	mov	r7, r2
   1ed7e:	46f4      	mov	ip, lr
   1ed80:	6810      	ldr	r0, [r2, #0]
   1ed82:	6851      	ldr	r1, [r2, #4]
   1ed84:	46f0      	mov	r8, lr
   1ed86:	e8a8 0003 	stmia.w	r8!, {r0, r1}
   1ed8a:	3208      	adds	r2, #8
   1ed8c:	455a      	cmp	r2, fp
   1ed8e:	46c6      	mov	lr, r8
   1ed90:	d1f6      	bne.n	1ed80 <handle_ns_input+0x2e4>
   1ed92:	3318      	adds	r3, #24
   1ed94:	aa15      	add	r2, sp, #84	; 0x54
   1ed96:	46e6      	mov	lr, ip
   1ed98:	e8be 0003 	ldmia.w	lr!, {r0, r1}
   1ed9c:	4596      	cmp	lr, r2
   1ed9e:	6018      	str	r0, [r3, #0]
   1eda0:	6059      	str	r1, [r3, #4]
   1eda2:	46f4      	mov	ip, lr
   1eda4:	f103 0308 	add.w	r3, r3, #8
   1eda8:	d1f5      	bne.n	1ed96 <handle_ns_input+0x2fa>
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, &ns_hdr->tgt);
   1edaa:	4696      	mov	lr, r2
   1edac:	f109 0914 	add.w	r9, r9, #20
   1edb0:	6830      	ldr	r0, [r6, #0]
   1edb2:	6871      	ldr	r1, [r6, #4]
   1edb4:	4673      	mov	r3, lr
   1edb6:	c303      	stmia	r3!, {r0, r1}
   1edb8:	3608      	adds	r6, #8
   1edba:	454e      	cmp	r6, r9
   1edbc:	469e      	mov	lr, r3
   1edbe:	d1f7      	bne.n	1edb0 <handle_ns_input+0x314>
   1edc0:	4613      	mov	r3, r2
   1edc2:	463e      	mov	r6, r7
   1edc4:	461a      	mov	r2, r3
   1edc6:	ca03      	ldmia	r2!, {r0, r1}
   1edc8:	4552      	cmp	r2, sl
   1edca:	6030      	str	r0, [r6, #0]
   1edcc:	6071      	str	r1, [r6, #4]
   1edce:	4613      	mov	r3, r2
   1edd0:	f106 0608 	add.w	r6, r6, #8
   1edd4:	d1f6      	bne.n	1edc4 <handle_ns_input+0x328>
		tgt = &ifaddr->address.in6_addr;
   1edd6:	f105 0804 	add.w	r8, r5, #4
		flags = NET_ICMPV6_NA_FLAG_SOLICITED |
   1edda:	2360      	movs	r3, #96	; 0x60
		goto send_na;
   1eddc:	e6fe      	b.n	1ebdc <handle_ns_input+0x140>
	...

0001ede0 <nd_reachable_timeout>:
{
   1ede0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1ede2:	4d36      	ldr	r5, [pc, #216]	; (1eebc <nd_reachable_timeout+0xdc>)
	struct net_ipv6_nbr_data *data = CONTAINER_OF(work,
   1ede4:	f1a0 0114 	sub.w	r1, r0, #20
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1ede8:	2200      	movs	r2, #0
   1edea:	462e      	mov	r6, r5
   1edec:	01d3      	lsls	r3, r2, #7
   1edee:	18ec      	adds	r4, r5, r3
		if (nbr->data == (u8_t *)data) {
   1edf0:	68e7      	ldr	r7, [r4, #12]
   1edf2:	42b9      	cmp	r1, r7
   1edf4:	d04f      	beq.n	1ee96 <nd_reachable_timeout+0xb6>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1edf6:	3201      	adds	r2, #1
   1edf8:	2a08      	cmp	r2, #8
   1edfa:	d1f7      	bne.n	1edec <nd_reachable_timeout+0xc>
}
   1edfc:	b003      	add	sp, #12
   1edfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (data->ns_count >= MAX_MULTICAST_SOLICIT) {
   1ee00:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
   1ee04:	2a02      	cmp	r2, #2
   1ee06:	d905      	bls.n	1ee14 <nd_reachable_timeout+0x34>
				nbr_free(nbr);
   1ee08:	4620      	mov	r0, r4
}
   1ee0a:	b003      	add	sp, #12
   1ee0c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
				nbr_free(nbr);
   1ee10:	f7fe bc09 	b.w	1d626 <nbr_free>
			data->ns_count++;
   1ee14:	3201      	adds	r2, #1
   1ee16:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
			ret = net_ipv6_send_ns(nbr->iface, NULL, NULL, NULL,
   1ee1a:	441e      	add	r6, r3
   1ee1c:	3810      	subs	r0, #16
   1ee1e:	2300      	movs	r3, #0
   1ee20:	9301      	str	r3, [sp, #4]
   1ee22:	9000      	str	r0, [sp, #0]
   1ee24:	461a      	mov	r2, r3
   1ee26:	4619      	mov	r1, r3
   1ee28:	68b0      	ldr	r0, [r6, #8]
   1ee2a:	f7ff fa41 	bl	1e2b0 <net_ipv6_send_ns>
   1ee2e:	e7e5      	b.n	1edfc <nd_reachable_timeout+0x1c>
		data->state = NET_IPV6_NBR_STATE_STALE;
   1ee30:	2302      	movs	r3, #2
   1ee32:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
		break;
   1ee36:	e7e1      	b.n	1edfc <nd_reachable_timeout+0x1c>
		data->state = NET_IPV6_NBR_STATE_PROBE;
   1ee38:	2204      	movs	r2, #4
   1ee3a:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
		data->ns_count = 0;
   1ee3e:	2200      	movs	r2, #0
   1ee40:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
		if (data->ns_count >= MAX_UNICAST_SOLICIT) {
   1ee44:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
   1ee48:	2a02      	cmp	r2, #2
   1ee4a:	f1a0 0110 	sub.w	r1, r0, #16
   1ee4e:	d90c      	bls.n	1ee6a <nd_reachable_timeout+0x8a>
			router = net_if_ipv6_router_lookup(nbr->iface,
   1ee50:	4433      	add	r3, r6
   1ee52:	6898      	ldr	r0, [r3, #8]
   1ee54:	f7fc f8ee 	bl	1b034 <net_if_ipv6_router_lookup>
			if (router && !router->is_infinite) {
   1ee58:	2800      	cmp	r0, #0
   1ee5a:	d0cf      	beq.n	1edfc <nd_reachable_timeout+0x1c>
   1ee5c:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
   1ee60:	2b00      	cmp	r3, #0
   1ee62:	d1cb      	bne.n	1edfc <nd_reachable_timeout+0x1c>
				net_if_ipv6_router_rm(router);
   1ee64:	f7fc f964 	bl	1b130 <net_if_ipv6_router_rm>
   1ee68:	e7ce      	b.n	1ee08 <nd_reachable_timeout+0x28>
			data->ns_count++;
   1ee6a:	3201      	adds	r2, #1
   1ee6c:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
			ret = net_ipv6_send_ns(nbr->iface, NULL, NULL, NULL,
   1ee70:	18f0      	adds	r0, r6, r3
   1ee72:	2300      	movs	r3, #0
   1ee74:	e88d 000a 	stmia.w	sp, {r1, r3}
   1ee78:	461a      	mov	r2, r3
   1ee7a:	4619      	mov	r1, r3
   1ee7c:	6880      	ldr	r0, [r0, #8]
   1ee7e:	f7ff fa17 	bl	1e2b0 <net_ipv6_send_ns>
			k_delayed_work_submit(
   1ee82:	68e1      	ldr	r1, [r4, #12]
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   1ee84:	480e      	ldr	r0, [pc, #56]	; (1eec0 <nd_reachable_timeout+0xe0>)
   1ee86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1ee8a:	3114      	adds	r1, #20
}
   1ee8c:	b003      	add	sp, #12
   1ee8e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1ee92:	f003 ba33 	b.w	222fc <k_delayed_work_submit_to_queue>
	if (!data || !nbr) {
   1ee96:	2900      	cmp	r1, #0
   1ee98:	d0b0      	beq.n	1edfc <nd_reachable_timeout+0x1c>
	switch (data->state) {
   1ee9a:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
   1ee9e:	2a04      	cmp	r2, #4
   1eea0:	d8ac      	bhi.n	1edfc <nd_reachable_timeout+0x1c>
   1eea2:	a101      	add	r1, pc, #4	; (adr r1, 1eea8 <nd_reachable_timeout+0xc8>)
   1eea4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   1eea8:	0001ee01 	.word	0x0001ee01
   1eeac:	0001ee31 	.word	0x0001ee31
   1eeb0:	0001ee09 	.word	0x0001ee09
   1eeb4:	0001ee39 	.word	0x0001ee39
   1eeb8:	0001ee45 	.word	0x0001ee45
   1eebc:	2000a168 	.word	0x2000a168
   1eec0:	20003340 	.word	0x20003340

0001eec4 <net_ipv6_start_dad>:
{
   1eec4:	b507      	push	{r0, r1, r2, lr}
	return net_ipv6_send_ns(iface, NULL, NULL, NULL,
   1eec6:	2301      	movs	r3, #1
   1eec8:	9301      	str	r3, [sp, #4]
   1eeca:	3104      	adds	r1, #4
   1eecc:	2300      	movs	r3, #0
   1eece:	9100      	str	r1, [sp, #0]
   1eed0:	461a      	mov	r2, r3
   1eed2:	4619      	mov	r1, r3
   1eed4:	f7ff f9ec 	bl	1e2b0 <net_ipv6_send_ns>
}
   1eed8:	b003      	add	sp, #12
   1eeda:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0001eee0 <net_ipv6_prepare_for_send>:
{
   1eee0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct net_if *iface = NULL;
   1eee2:	2300      	movs	r3, #0
   1eee4:	9303      	str	r3, [sp, #12]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1eee6:	6943      	ldr	r3, [r0, #20]
   1eee8:	f3bf 8f5b 	dmb	ish
   1eeec:	68db      	ldr	r3, [r3, #12]
   1eeee:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(net_pkt_iface(pkt)->flags, NET_IF_POINTOPOINT)) {
   1eef2:	0799      	lsls	r1, r3, #30
{
   1eef4:	4604      	mov	r4, r0
	if (atomic_test_bit(net_pkt_iface(pkt)->flags, NET_IF_POINTOPOINT)) {
   1eef6:	d468      	bmi.n	1efca <net_ipv6_prepare_for_send+0xea>
	if ((net_pkt_ll_dst(pkt)->addr &&
   1eef8:	6a83      	ldr	r3, [r0, #40]	; 0x28
   1eefa:	b923      	cbnz	r3, 1ef06 <net_ipv6_prepare_for_send+0x26>
   1eefc:	6883      	ldr	r3, [r0, #8]
   1eefe:	6899      	ldr	r1, [r3, #8]
	      !IS_ENABLED(CONFIG_NET_ROUTING))) ||
   1ef00:	7e0b      	ldrb	r3, [r1, #24]
   1ef02:	2bff      	cmp	r3, #255	; 0xff
   1ef04:	d10a      	bne.n	1ef1c <net_ipv6_prepare_for_send+0x3c>
	return pkt->forwarding;
   1ef06:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
	if (net_pkt_forwarding(pkt) &&
   1ef0a:	075a      	lsls	r2, r3, #29
   1ef0c:	d45d      	bmi.n	1efca <net_ipv6_prepare_for_send+0xea>
	return pkt->frags->data;
   1ef0e:	68a3      	ldr	r3, [r4, #8]
		return update_ll_reserve(pkt, &NET_IPV6_HDR(pkt)->dst);
   1ef10:	6899      	ldr	r1, [r3, #8]
   1ef12:	3118      	adds	r1, #24
   1ef14:	4620      	mov	r0, r4
   1ef16:	f7fe fc0f 	bl	1d738 <update_ll_reserve.part.32>
   1ef1a:	e056      	b.n	1efca <net_ipv6_prepare_for_send+0xea>
	if (net_if_ipv6_addr_onlink(&iface,
   1ef1c:	3118      	adds	r1, #24
   1ef1e:	a803      	add	r0, sp, #12
   1ef20:	f7fc f80e 	bl	1af40 <net_if_ipv6_addr_onlink>
   1ef24:	68a3      	ldr	r3, [r4, #8]
		nexthop = &NET_IPV6_HDR(pkt)->dst;
   1ef26:	689d      	ldr	r5, [r3, #8]
   1ef28:	3518      	adds	r5, #24
	if (net_if_ipv6_addr_onlink(&iface,
   1ef2a:	2800      	cmp	r0, #0
   1ef2c:	d03c      	beq.n	1efa8 <net_ipv6_prepare_for_send+0xc8>
		net_pkt_set_iface(pkt, iface);
   1ef2e:	9b03      	ldr	r3, [sp, #12]
	pkt->iface = iface;
   1ef30:	6163      	str	r3, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1ef32:	7d5b      	ldrb	r3, [r3, #21]
   1ef34:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1ef38:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	if (!iface) {
   1ef3c:	9b03      	ldr	r3, [sp, #12]
   1ef3e:	b963      	cbnz	r3, 1ef5a <net_ipv6_prepare_for_send+0x7a>
		if (net_if_ipv6_addr_onlink(&iface, nexthop)) {
   1ef40:	4629      	mov	r1, r5
   1ef42:	a803      	add	r0, sp, #12
   1ef44:	f7fb fffc 	bl	1af40 <net_if_ipv6_addr_onlink>
   1ef48:	2800      	cmp	r0, #0
   1ef4a:	d048      	beq.n	1efde <net_ipv6_prepare_for_send+0xfe>
			net_pkt_set_iface(pkt, iface);
   1ef4c:	9b03      	ldr	r3, [sp, #12]
	pkt->iface = iface;
   1ef4e:	6163      	str	r3, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1ef50:	7d5b      	ldrb	r3, [r3, #21]
   1ef52:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1ef56:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	nbr = nbr_lookup(&net_neighbor.table, iface, nexthop);
   1ef5a:	4629      	mov	r1, r5
   1ef5c:	9803      	ldr	r0, [sp, #12]
   1ef5e:	f7fe fcc5 	bl	1d8ec <nbr_lookup.isra.29>
	if (nbr && nbr->idx != NET_NBR_LLADDR_UNKNOWN) {
   1ef62:	4606      	mov	r6, r0
   1ef64:	2800      	cmp	r0, #0
   1ef66:	d03d      	beq.n	1efe4 <net_ipv6_prepare_for_send+0x104>
   1ef68:	7840      	ldrb	r0, [r0, #1]
   1ef6a:	28ff      	cmp	r0, #255	; 0xff
   1ef6c:	d03a      	beq.n	1efe4 <net_ipv6_prepare_for_send+0x104>
		lladdr = net_nbr_get_lladdr(nbr->idx);
   1ef6e:	f7fe fb23 	bl	1d5b8 <net_nbr_get_lladdr>
		net_pkt_ll_dst(pkt)->addr = lladdr->addr;
   1ef72:	1c83      	adds	r3, r0, #2
   1ef74:	62a3      	str	r3, [r4, #40]	; 0x28
		net_pkt_ll_dst(pkt)->len = lladdr->len;
   1ef76:	7843      	ldrb	r3, [r0, #1]
   1ef78:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_STALE) {
   1ef7c:	68f3      	ldr	r3, [r6, #12]
   1ef7e:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   1ef82:	2b02      	cmp	r3, #2
   1ef84:	d10a      	bne.n	1ef9c <net_ipv6_prepare_for_send+0xbc>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_DELAY);
   1ef86:	2103      	movs	r1, #3
   1ef88:	4630      	mov	r0, r6
   1ef8a:	f7fe fb35 	bl	1d5f8 <ipv6_nbr_set_state>
			k_delayed_work_submit(
   1ef8e:	68f1      	ldr	r1, [r6, #12]
   1ef90:	481c      	ldr	r0, [pc, #112]	; (1f004 <net_ipv6_prepare_for_send+0x124>)
   1ef92:	f241 3288 	movw	r2, #5000	; 0x1388
   1ef96:	3114      	adds	r1, #20
   1ef98:	f003 f9b0 	bl	222fc <k_delayed_work_submit_to_queue>
	return pkt->forwarding;
   1ef9c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
	if (net_pkt_forwarding(pkt) &&
   1efa0:	075b      	lsls	r3, r3, #29
   1efa2:	d412      	bmi.n	1efca <net_ipv6_prepare_for_send+0xea>
   1efa4:	4629      	mov	r1, r5
   1efa6:	e7b5      	b.n	1ef14 <net_ipv6_prepare_for_send+0x34>
	route = net_route_lookup(iface, dst);
   1efa8:	4629      	mov	r1, r5
   1efaa:	f000 fbcb 	bl	1f744 <net_route_lookup>
	if (route) {
   1efae:	4606      	mov	r6, r0
   1efb0:	b170      	cbz	r0, 1efd0 <net_ipv6_prepare_for_send+0xf0>
		nexthop = net_route_get_nexthop(route);
   1efb2:	f000 fc6d 	bl	1f890 <net_route_get_nexthop>
		if (!nexthop) {
   1efb6:	4605      	mov	r5, r0
   1efb8:	2800      	cmp	r0, #0
   1efba:	d1bf      	bne.n	1ef3c <net_ipv6_prepare_for_send+0x5c>
			net_route_del(route);
   1efbc:	4630      	mov	r0, r6
   1efbe:	f000 fc1b 	bl	1f7f8 <net_route_del>
			net_pkt_unref(pkt);
   1efc2:	4620      	mov	r0, r4
   1efc4:	f7fc fc63 	bl	1b88e <net_pkt_unref>
			return NULL;
   1efc8:	2400      	movs	r4, #0
}
   1efca:	4620      	mov	r0, r4
   1efcc:	b004      	add	sp, #16
   1efce:	bd70      	pop	{r4, r5, r6, pc}
		router = net_if_ipv6_router_find_default(NULL, dst);
   1efd0:	4629      	mov	r1, r5
   1efd2:	f7fc f845 	bl	1b060 <net_if_ipv6_router_find_default>
		if (!router) {
   1efd6:	b188      	cbz	r0, 1effc <net_ipv6_prepare_for_send+0x11c>
		nexthop = &router->address.in6_addr;
   1efd8:	f100 052c 	add.w	r5, r0, #44	; 0x2c
   1efdc:	e7ae      	b.n	1ef3c <net_ipv6_prepare_for_send+0x5c>
			iface = net_pkt_iface(pkt);
   1efde:	6963      	ldr	r3, [r4, #20]
   1efe0:	9303      	str	r3, [sp, #12]
   1efe2:	e7ba      	b.n	1ef5a <net_ipv6_prepare_for_send+0x7a>
	return pkt->frags->data;
   1efe4:	68a3      	ldr	r3, [r4, #8]
	ret = net_ipv6_send_ns(net_pkt_iface(pkt), pkt,
   1efe6:	2600      	movs	r6, #0
   1efe8:	689a      	ldr	r2, [r3, #8]
   1efea:	e88d 0060 	stmia.w	sp, {r5, r6}
   1efee:	4633      	mov	r3, r6
   1eff0:	3208      	adds	r2, #8
   1eff2:	4621      	mov	r1, r4
   1eff4:	6960      	ldr	r0, [r4, #20]
   1eff6:	f7ff f95b 	bl	1e2b0 <net_ipv6_send_ns>
   1effa:	e7e5      	b.n	1efc8 <net_ipv6_prepare_for_send+0xe8>
		if (!nexthop) {
   1effc:	2d00      	cmp	r5, #0
   1effe:	d1ac      	bne.n	1ef5a <net_ipv6_prepare_for_send+0x7a>
   1f000:	e7df      	b.n	1efc2 <net_ipv6_prepare_for_send+0xe2>
   1f002:	bf00      	nop
   1f004:	20003340 	.word	0x20003340

0001f008 <net_ipv6_send_rs>:
{
   1f008:	b5f0      	push	{r4, r5, r6, r7, lr}
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, NULL),
   1f00a:	2100      	movs	r1, #0
{
   1f00c:	b085      	sub	sp, #20
   1f00e:	4607      	mov	r7, r0
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, NULL),
   1f010:	f7fe faef 	bl	1d5f2 <net_if_get_ll_reserve>
   1f014:	210a      	movs	r1, #10
   1f016:	f7fc fbbd 	bl	1b794 <net_pkt_get_reserve_tx>
	if (!pkt) {
   1f01a:	4605      	mov	r5, r0
   1f01c:	b138      	cbz	r0, 1f02e <net_ipv6_send_rs+0x26>
	frag = net_pkt_get_frag(pkt, ND_NET_BUF_TIMEOUT);
   1f01e:	210a      	movs	r1, #10
   1f020:	f7fc fbd0 	bl	1b7c4 <net_pkt_get_frag>
	if (!frag) {
   1f024:	4606      	mov	r6, r0
   1f026:	b928      	cbnz	r0, 1f034 <net_ipv6_send_rs+0x2c>
		net_pkt_unref(pkt);
   1f028:	4628      	mov	r0, r5
   1f02a:	f7fc fc30 	bl	1b88e <net_pkt_unref>
		return -ENOMEM;
   1f02e:	f06f 000b 	mvn.w	r0, #11
   1f032:	e08b      	b.n	1f14c <net_ipv6_send_rs+0x144>
	net_pkt_frag_add(pkt, frag);
   1f034:	4601      	mov	r1, r0
   1f036:	4628      	mov	r0, r5
   1f038:	f7fc fc50 	bl	1b8dc <net_pkt_frag_add>
	pkt->iface = iface;
   1f03c:	616f      	str	r7, [r5, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1f03e:	7d7b      	ldrb	r3, [r7, #21]
   1f040:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1f044:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
	pkt->family = family;
   1f048:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
   1f04c:	220a      	movs	r2, #10
   1f04e:	f362 03c6 	bfi	r3, r2, #3, #4
   1f052:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
	pkt->ip_hdr_len = len;
   1f056:	2328      	movs	r3, #40	; 0x28
   1f058:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
	net_pkt_ll_clear(pkt);
   1f05c:	4628      	mov	r0, r5
   1f05e:	f7fe fb46 	bl	1d6ee <net_pkt_ll_clear>
	return pkt->frags->data;
   1f062:	68ab      	ldr	r3, [r5, #8]
   1f064:	689c      	ldr	r4, [r3, #8]
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   1f066:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f06a:	7623      	strb	r3, [r4, #24]
   1f06c:	2300      	movs	r3, #0
   1f06e:	2202      	movs	r2, #2
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   1f070:	76a3      	strb	r3, [r4, #26]
   1f072:	76e3      	strb	r3, [r4, #27]
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   1f074:	7723      	strb	r3, [r4, #28]
   1f076:	7763      	strb	r3, [r4, #29]
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   1f078:	77a3      	strb	r3, [r4, #30]
   1f07a:	77e3      	strb	r3, [r4, #31]
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   1f07c:	f884 3020 	strb.w	r3, [r4, #32]
   1f080:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   1f084:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
   1f088:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   1f08c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   1f090:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   1f094:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
   1f098:	2301      	movs	r3, #1
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   1f09a:	7662      	strb	r2, [r4, #25]
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   1f09c:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
						    &NET_IPV6_HDR(pkt)->dst));
   1f0a0:	4638      	mov	r0, r7
   1f0a2:	f104 0118 	add.w	r1, r4, #24
   1f0a6:	f7fc f87b 	bl	1b1a0 <net_if_ipv6_select_src_addr>

   1f0aa:	466f      	mov	r7, sp
						    &NET_IPV6_HDR(pkt)->dst));
   1f0ac:	4603      	mov	r3, r0

   1f0ae:	f100 0c10 	add.w	ip, r0, #16
   1f0b2:	466a      	mov	r2, sp
   1f0b4:	6818      	ldr	r0, [r3, #0]
   1f0b6:	6859      	ldr	r1, [r3, #4]
   1f0b8:	46be      	mov	lr, r7
   1f0ba:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   1f0be:	3308      	adds	r3, #8
   1f0c0:	4563      	cmp	r3, ip
   1f0c2:	4677      	mov	r7, lr
   1f0c4:	d1f6      	bne.n	1f0b4 <net_ipv6_send_rs+0xac>
			net_if_ipv6_select_src_addr(iface,
   1f0c6:	3408      	adds	r4, #8
   1f0c8:	af04      	add	r7, sp, #16
   1f0ca:	4613      	mov	r3, r2
   1f0cc:	cb03      	ldmia	r3!, {r0, r1}
   1f0ce:	42bb      	cmp	r3, r7
   1f0d0:	6020      	str	r0, [r4, #0]
   1f0d2:	6061      	str	r1, [r4, #4]
   1f0d4:	461a      	mov	r2, r3
   1f0d6:	f104 0408 	add.w	r4, r4, #8
   1f0da:	d1f6      	bne.n	1f0ca <net_ipv6_send_rs+0xc2>
   1f0dc:	68ab      	ldr	r3, [r5, #8]
	unspec_src = net_is_ipv6_addr_unspecified(&NET_IPV6_HDR(pkt)->src);
   1f0de:	6898      	ldr	r0, [r3, #8]
   1f0e0:	3008      	adds	r0, #8
   1f0e2:	f7fe fa79 	bl	1d5d8 <net_is_ipv6_addr_unspecified>
	if (!unspec_src) {
   1f0e6:	4607      	mov	r7, r0
   1f0e8:	bb90      	cbnz	r0, 1f150 <net_ipv6_send_rs+0x148>
   1f0ea:	696b      	ldr	r3, [r5, #20]
   1f0ec:	7d1b      	ldrb	r3, [r3, #20]
	if (iface->link_addr.len == 6) {
   1f0ee:	2b06      	cmp	r3, #6
   1f0f0:	d030      	beq.n	1f154 <net_ipv6_send_rs+0x14c>
		return 16;
   1f0f2:	2b08      	cmp	r3, #8
   1f0f4:	bf14      	ite	ne
   1f0f6:	2400      	movne	r4, #0
   1f0f8:	2410      	moveq	r4, #16
	setup_headers(pkt, sizeof(struct net_icmpv6_rs_hdr) + llao_len,
   1f0fa:	1d21      	adds	r1, r4, #4
   1f0fc:	4628      	mov	r0, r5
   1f0fe:	2285      	movs	r2, #133	; 0x85
	net_buf_add(frag, sizeof(struct net_icmpv6_rs_hdr));
   1f100:	3608      	adds	r6, #8
	setup_headers(pkt, sizeof(struct net_icmpv6_rs_hdr) + llao_len,
   1f102:	f7fe fad3 	bl	1d6ac <setup_headers>
	net_buf_add(frag, sizeof(struct net_icmpv6_rs_hdr));
   1f106:	2104      	movs	r1, #4
   1f108:	4630      	mov	r0, r6
   1f10a:	f7fa f94f 	bl	193ac <net_buf_simple_add>
	if (!unspec_src) {
   1f10e:	b97f      	cbnz	r7, 1f130 <net_ipv6_send_rs+0x128>
		net_buf_add(frag, llao_len);
   1f110:	4621      	mov	r1, r4
   1f112:	4630      	mov	r0, r6
   1f114:	f7fa f94a 	bl	193ac <net_buf_simple_add>
			 (u8_t *)net_pkt_icmp_data(pkt) +
   1f118:	4628      	mov	r0, r5
		set_llao(&net_pkt_iface(pkt)->link_addr,
   1f11a:	696e      	ldr	r6, [r5, #20]
			 (u8_t *)net_pkt_icmp_data(pkt) +
   1f11c:	f7fc fe02 	bl	1bd24 <net_pkt_icmp_data>
		set_llao(&net_pkt_iface(pkt)->link_addr,
   1f120:	3610      	adds	r6, #16
   1f122:	f100 0108 	add.w	r1, r0, #8
   1f126:	2301      	movs	r3, #1
   1f128:	4622      	mov	r2, r4
   1f12a:	4630      	mov	r0, r6
   1f12c:	f7fe faee 	bl	1d70c <set_llao>
	net_icmpv6_set_chksum(pkt, pkt->frags);
   1f130:	68a9      	ldr	r1, [r5, #8]
   1f132:	4628      	mov	r0, r5
   1f134:	f7fd fd2c 	bl	1cb90 <net_icmpv6_set_chksum>
	if (net_send_data(pkt) < 0) {
   1f138:	4628      	mov	r0, r5
   1f13a:	f7fb fa3f 	bl	1a5bc <net_send_data>
   1f13e:	2800      	cmp	r0, #0
   1f140:	da0a      	bge.n	1f158 <net_ipv6_send_rs+0x150>
	net_pkt_unref(pkt);
   1f142:	4628      	mov	r0, r5
   1f144:	f7fc fba3 	bl	1b88e <net_pkt_unref>
	return -EINVAL;
   1f148:	f06f 0015 	mvn.w	r0, #21
}
   1f14c:	b005      	add	sp, #20
   1f14e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return 0;
   1f150:	2400      	movs	r4, #0
   1f152:	e7d2      	b.n	1f0fa <net_ipv6_send_rs+0xf2>
		return 8;
   1f154:	2408      	movs	r4, #8
   1f156:	e7d0      	b.n	1f0fa <net_ipv6_send_rs+0xf2>
	return 0;
   1f158:	2000      	movs	r0, #0
   1f15a:	e7f7      	b.n	1f14c <net_ipv6_send_rs+0x144>

0001f15c <net_ipv6_start_rs>:
	return net_ipv6_send_rs(iface);
   1f15c:	f7ff bf54 	b.w	1f008 <net_ipv6_send_rs>

0001f160 <net_ipv6_mld_join>:
{
   1f160:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1f162:	ab02      	add	r3, sp, #8
   1f164:	460d      	mov	r5, r1
   1f166:	f843 0d04 	str.w	r0, [r3, #-4]!
	maddr = net_if_ipv6_maddr_lookup(addr, &iface);
   1f16a:	4628      	mov	r0, r5
   1f16c:	4619      	mov	r1, r3
   1f16e:	f7fb fdff 	bl	1ad70 <net_if_ipv6_maddr_lookup>
	if (maddr && net_if_ipv6_maddr_is_joined(maddr)) {
   1f172:	4604      	mov	r4, r0
   1f174:	b128      	cbz	r0, 1f182 <net_ipv6_mld_join+0x22>
	return addr->is_joined;
   1f176:	7803      	ldrb	r3, [r0, #0]
   1f178:	079b      	lsls	r3, r3, #30
   1f17a:	d508      	bpl.n	1f18e <net_ipv6_mld_join+0x2e>
		return -EALREADY;
   1f17c:	f06f 0644 	mvn.w	r6, #68	; 0x44
   1f180:	e01b      	b.n	1f1ba <net_ipv6_mld_join+0x5a>
		maddr = net_if_ipv6_maddr_add(iface, addr);
   1f182:	4629      	mov	r1, r5
   1f184:	9801      	ldr	r0, [sp, #4]
   1f186:	f7fb fd23 	bl	1abd0 <net_if_ipv6_maddr_add>
		if (!maddr) {
   1f18a:	4604      	mov	r4, r0
   1f18c:	b1c0      	cbz	r0, 1f1c0 <net_ipv6_mld_join+0x60>
	ret = send_mldv2(iface, addr, NET_IPV6_MLDv2_MODE_IS_EXCLUDE);
   1f18e:	2202      	movs	r2, #2
   1f190:	4629      	mov	r1, r5
   1f192:	9801      	ldr	r0, [sp, #4]
   1f194:	f7fe fd66 	bl	1dc64 <send_mldv2>
	if (ret < 0) {
   1f198:	1e06      	subs	r6, r0, #0
   1f19a:	db0e      	blt.n	1f1ba <net_ipv6_mld_join+0x5a>
	addr->is_joined = true;
   1f19c:	7823      	ldrb	r3, [r4, #0]
	net_if_mcast_monitor(iface, addr, true);
   1f19e:	9801      	ldr	r0, [sp, #4]
   1f1a0:	f043 0302 	orr.w	r3, r3, #2
   1f1a4:	7023      	strb	r3, [r4, #0]
   1f1a6:	2201      	movs	r2, #1
   1f1a8:	4629      	mov	r1, r5
   1f1aa:	f7fb fe1f 	bl	1adec <net_if_mcast_monitor>
   1f1ae:	2300      	movs	r3, #0
   1f1b0:	461a      	mov	r2, r3
   1f1b2:	9901      	ldr	r1, [sp, #4]
   1f1b4:	4804      	ldr	r0, [pc, #16]	; (1f1c8 <net_ipv6_mld_join+0x68>)
   1f1b6:	f000 fa1d 	bl	1f5f4 <net_mgmt_event_notify_with_info>
}
   1f1ba:	4630      	mov	r0, r6
   1f1bc:	b002      	add	sp, #8
   1f1be:	bd70      	pop	{r4, r5, r6, pc}
			return -ENOMEM;
   1f1c0:	f06f 060b 	mvn.w	r6, #11
   1f1c4:	e7f9      	b.n	1f1ba <net_ipv6_mld_join+0x5a>
   1f1c6:	bf00      	nop
   1f1c8:	f0600007 	.word	0xf0600007

0001f1cc <net_ipv6_process_pkt>:
	return NET_DROP;
}
#endif /* CONFIG_NET_ROUTE */

enum net_verdict net_ipv6_process_pkt(struct net_pkt *pkt)
{
   1f1cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f1d0:	4604      	mov	r4, r0
   1f1d2:	6880      	ldr	r0, [r0, #8]
   1f1d4:	6885      	ldr	r5, [r0, #8]
   1f1d6:	b087      	sub	sp, #28
	return net_buf_frags_len(pkt->frags);
   1f1d8:	f7fe f9f6 	bl	1d5c8 <net_buf_frags_len>
	struct net_ipv6_hdr *hdr = NET_IPV6_HDR(pkt);
	int real_len = net_pkt_get_len(pkt);
	int pkt_len = (hdr->len[0] << 8) + hdr->len[1] + sizeof(*hdr);
   1f1dc:	792a      	ldrb	r2, [r5, #4]
   1f1de:	796b      	ldrb	r3, [r5, #5]
   1f1e0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   1f1e4:	3328      	adds	r3, #40	; 0x28
	u8_t next, next_hdr, length;
	u8_t first_option;
	u16_t offset, total_len = 0;
	u8_t ext_bitmap;

	if (real_len != pkt_len) {
   1f1e6:	4298      	cmp	r0, r3
   1f1e8:	4683      	mov	fp, r0
   1f1ea:	d001      	beq.n	1f1f0 <net_ipv6_process_pkt+0x24>
		return NET_DROP;
#endif
	}

drop:
	return NET_DROP;
   1f1ec:	2002      	movs	r0, #2
   1f1ee:	e11a      	b.n	1f426 <net_ipv6_process_pkt+0x25a>
	if (net_is_ipv6_addr_mcast(&hdr->src)) {
   1f1f0:	7a2b      	ldrb	r3, [r5, #8]
   1f1f2:	2bff      	cmp	r3, #255	; 0xff
   1f1f4:	d0fa      	beq.n	1f1ec <net_ipv6_process_pkt+0x20>
	if (!net_is_my_ipv6_addr(&hdr->dst) &&
   1f1f6:	f105 0618 	add.w	r6, r5, #24
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
   1f1fa:	2100      	movs	r1, #0
   1f1fc:	4630      	mov	r0, r6
   1f1fe:	f7fb fb6b 	bl	1a8d8 <net_if_ipv6_addr_lookup>
   1f202:	4601      	mov	r1, r0
   1f204:	bb08      	cbnz	r0, 1f24a <net_ipv6_process_pkt+0x7e>
	return net_if_ipv6_maddr_lookup(maddr, NULL) != NULL;
   1f206:	4630      	mov	r0, r6
   1f208:	f7fb fdb2 	bl	1ad70 <net_if_ipv6_maddr_lookup>
   1f20c:	b9e8      	cbnz	r0, 1f24a <net_ipv6_process_pkt+0x7e>
	    !net_is_my_ipv6_maddr(&hdr->dst) &&
   1f20e:	7e2b      	ldrb	r3, [r5, #24]
   1f210:	2bff      	cmp	r3, #255	; 0xff
   1f212:	d01a      	beq.n	1f24a <net_ipv6_process_pkt+0x7e>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1f214:	69ab      	ldr	r3, [r5, #24]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1f216:	2b00      	cmp	r3, #0
   1f218:	f040 810d 	bne.w	1f436 <net_ipv6_process_pkt+0x26a>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1f21c:	69eb      	ldr	r3, [r5, #28]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1f21e:	2b00      	cmp	r3, #0
   1f220:	f040 8109 	bne.w	1f436 <net_ipv6_process_pkt+0x26a>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1f224:	6a2b      	ldr	r3, [r5, #32]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1f226:	2b00      	cmp	r3, #0
   1f228:	f040 8105 	bne.w	1f436 <net_ipv6_process_pkt+0x26a>
		ntohl(UNALIGNED_GET(&addr->s6_addr32[3])) == 1;
   1f22c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 *
   1f22e:	061a      	lsls	r2, r3, #24

   1f230:	0a19      	lsrs	r1, r3, #8
 * @brief Check if the IPv6 address is a multicast address.
   1f232:	ea42 6213 	orr.w	r2, r2, r3, lsr #24

   1f236:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 * @brief Check if the IPv6 address is a multicast address.
   1f23a:	021b      	lsls	r3, r3, #8
   1f23c:	430a      	orrs	r2, r1
   1f23e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   1f242:	4313      	orrs	r3, r2
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1f244:	2b01      	cmp	r3, #1
   1f246:	f040 80f6 	bne.w	1f436 <net_ipv6_process_pkt+0x26a>
	net_pkt_set_next_hdr(pkt, &hdr->nexthdr);
   1f24a:	1dab      	adds	r3, r5, #6
	pkt->next_hdr = hdr;
   1f24c:	61e3      	str	r3, [r4, #28]
	pkt->ipv6_ext_len = len;
   1f24e:	2700      	movs	r7, #0
	pkt->ip_hdr_len = len;
   1f250:	2328      	movs	r3, #40	; 0x28
	pkt->ipv6_ext_len = len;
   1f252:	f884 703f 	strb.w	r7, [r4, #63]	; 0x3f
	pkt->ip_hdr_len = len;
   1f256:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	next = *(net_pkt_next_hdr(pkt));
   1f25a:	f895 9006 	ldrb.w	r9, [r5, #6]
	return (proto == IPPROTO_ICMPV6 || proto == IPPROTO_UDP ||
   1f25e:	f1b9 0f3a 	cmp.w	r9, #58	; 0x3a
   1f262:	f000 80d4 	beq.w	1f40e <net_ipv6_process_pkt+0x242>
   1f266:	f1b9 0f11 	cmp.w	r9, #17
   1f26a:	f000 80df 	beq.w	1f42c <net_ipv6_process_pkt+0x260>
	if (is_upper_layer_protocol_header(next)) {
   1f26e:	f1b9 0f06 	cmp.w	r9, #6
   1f272:	d01b      	beq.n	1f2ac <net_ipv6_process_pkt+0xe0>
	offset = sizeof(struct net_ipv6_hdr);
   1f274:	f10d 0a18 	add.w	sl, sp, #24
	frag = pkt->frags;
   1f278:	68a0      	ldr	r0, [r4, #8]
	offset = sizeof(struct net_ipv6_hdr);
   1f27a:	f82a 3d08 	strh.w	r3, [sl, #-8]!
	while (frag) {
   1f27e:	464e      	mov	r6, r9
	u16_t offset, total_len = 0;
   1f280:	46b8      	mov	r8, r7
	while (frag) {
   1f282:	b130      	cbz	r0, 1f292 <net_ipv6_process_pkt+0xc6>
	return (proto == IPPROTO_ICMPV6 || proto == IPPROTO_UDP ||
   1f284:	2e3a      	cmp	r6, #58	; 0x3a
   1f286:	d114      	bne.n	1f2b2 <net_ipv6_process_pkt+0xe6>
			net_pkt_set_ipv6_ext_len(pkt, offset -
   1f288:	f89d 3010 	ldrb.w	r3, [sp, #16]
   1f28c:	3b28      	subs	r3, #40	; 0x28
	pkt->ipv6_ext_len = len;
   1f28e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
	if (total_len > 0) {
   1f292:	f1b8 0f00 	cmp.w	r8, #0
   1f296:	d001      	beq.n	1f29c <net_ipv6_process_pkt+0xd0>
		net_pkt_set_ipv6_ext_len(pkt, total_len);
   1f298:	f884 803f 	strb.w	r8, [r4, #63]	; 0x3f
	switch (next) {
   1f29c:	2e11      	cmp	r6, #17
   1f29e:	f000 80c5 	beq.w	1f42c <net_ipv6_process_pkt+0x260>
   1f2a2:	2e3a      	cmp	r6, #58	; 0x3a
   1f2a4:	f000 80b3 	beq.w	1f40e <net_ipv6_process_pkt+0x242>
   1f2a8:	2e06      	cmp	r6, #6
   1f2aa:	d19f      	bne.n	1f1ec <net_ipv6_process_pkt+0x20>
		return net_conn_input(IPPROTO_TCP, pkt);
   1f2ac:	4621      	mov	r1, r4
   1f2ae:	2006      	movs	r0, #6
   1f2b0:	e0be      	b.n	1f430 <net_ipv6_process_pkt+0x264>
	return (proto == IPPROTO_ICMPV6 || proto == IPPROTO_UDP ||
   1f2b2:	2e11      	cmp	r6, #17
   1f2b4:	d0e8      	beq.n	1f288 <net_ipv6_process_pkt+0xbc>
		if (is_upper_layer_protocol_header(next)) {
   1f2b6:	2e06      	cmp	r6, #6
   1f2b8:	d0e6      	beq.n	1f288 <net_ipv6_process_pkt+0xbc>
	return net_frag_read(frag, offset, pos, 1, value);
   1f2ba:	ab03      	add	r3, sp, #12
   1f2bc:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1f2c0:	9300      	str	r3, [sp, #0]
   1f2c2:	4652      	mov	r2, sl
   1f2c4:	2301      	movs	r3, #1
   1f2c6:	f7fc fc3d 	bl	1bb44 <net_frag_read>
   1f2ca:	f10d 030d 	add.w	r3, sp, #13
   1f2ce:	9300      	str	r3, [sp, #0]
   1f2d0:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1f2d4:	2301      	movs	r3, #1
   1f2d6:	4652      	mov	r2, sl
   1f2d8:	f7fc fc34 	bl	1bb44 <net_frag_read>
		if (!frag && offset == 0xffff) {
   1f2dc:	b928      	cbnz	r0, 1f2ea <net_ipv6_process_pkt+0x11e>
   1f2de:	f8bd 2010 	ldrh.w	r2, [sp, #16]
   1f2e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1f2e6:	429a      	cmp	r2, r3
   1f2e8:	d080      	beq.n	1f1ec <net_ipv6_process_pkt+0x20>
		length = length * 8 + 8;
   1f2ea:	f89d 500d 	ldrb.w	r5, [sp, #13]
   1f2ee:	3501      	adds	r5, #1
   1f2f0:	00ed      	lsls	r5, r5, #3
   1f2f2:	b2ed      	uxtb	r5, r5
   1f2f4:	f88d 500d 	strb.w	r5, [sp, #13]
		switch (next) {
   1f2f8:	b13e      	cbz	r6, 1f30a <net_ipv6_process_pkt+0x13e>
   1f2fa:	2e3b      	cmp	r6, #59	; 0x3b
   1f2fc:	f43f af76 	beq.w	1f1ec <net_ipv6_process_pkt+0x20>
bad_hdr:
	/* Send error message about parameter problem (RFC 2460)
	 */
	net_icmpv6_send_error(pkt, NET_ICMPV6_PARAM_PROBLEM,
			      NET_ICMPV6_PARAM_PROB_NEXTHEADER,
			      offset - 1);
   1f300:	f8bd 3010 	ldrh.w	r3, [sp, #16]
	net_icmpv6_send_error(pkt, NET_ICMPV6_PARAM_PROBLEM,
   1f304:	2201      	movs	r2, #1
   1f306:	3b01      	subs	r3, #1
   1f308:	e07a      	b.n	1f400 <net_ipv6_process_pkt+0x234>
			if (first_option != NET_IPV6_NEXTHDR_HBHO) {
   1f30a:	f1b9 0f00 	cmp.w	r9, #0
   1f30e:	d1f7      	bne.n	1f300 <net_ipv6_process_pkt+0x134>
			if (ext_bitmap & NET_IPV6_EXT_HDR_BITMAP_HBHO) {
   1f310:	2f00      	cmp	r7, #0
   1f312:	d1f5      	bne.n	1f300 <net_ipv6_process_pkt+0x134>
	if (len > total_len) {
   1f314:	45ab      	cmp	fp, r5
   1f316:	f6ff af69 	blt.w	1f1ec <net_ipv6_process_pkt+0x20>
   1f31a:	f10d 030e 	add.w	r3, sp, #14
   1f31e:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1f322:	9300      	str	r3, [sp, #0]
   1f324:	aa05      	add	r2, sp, #20
   1f326:	2301      	movs	r3, #1
   1f328:	f10d 070f 	add.w	r7, sp, #15
   1f32c:	f7fc fc0a 	bl	1bb44 <net_frag_read>
   1f330:	f8bd 1014 	ldrh.w	r1, [sp, #20]
   1f334:	9700      	str	r7, [sp, #0]
   1f336:	2301      	movs	r3, #1
   1f338:	aa05      	add	r2, sp, #20
		total_len += length;
   1f33a:	b2ad      	uxth	r5, r5
   1f33c:	f7fc fc02 	bl	1bb44 <net_frag_read>
	if (!frag && loc == 0xffff) {
   1f340:	2800      	cmp	r0, #0
   1f342:	d162      	bne.n	1f40a <net_ipv6_process_pkt+0x23e>
   1f344:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   1f348:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1f34c:	429a      	cmp	r2, r3
   1f34e:	f43f af4d 	beq.w	1f1ec <net_ipv6_process_pkt+0x20>
   1f352:	2602      	movs	r6, #2
	if (length != len) {
   1f354:	42b5      	cmp	r5, r6
   1f356:	f47f af49 	bne.w	1f1ec <net_ipv6_process_pkt+0x20>
	*pos += length;
   1f35a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
		next = next_hdr;
   1f35e:	f89d 600c 	ldrb.w	r6, [sp, #12]
		total_len += length;
   1f362:	44a8      	add	r8, r5
	*pos += length;
   1f364:	441d      	add	r5, r3
		total_len += length;
   1f366:	fa1f f888 	uxth.w	r8, r8
	*pos += length;
   1f36a:	f8ad 5010 	strh.w	r5, [sp, #16]
			ext_bitmap |= NET_IPV6_EXT_HDR_BITMAP_HBHO;
   1f36e:	2701      	movs	r7, #1
   1f370:	e787      	b.n	1f282 <net_ipv6_process_pkt+0xb6>
			loc--;
   1f372:	f8bd 3014 	ldrh.w	r3, [sp, #20]
			length++;
   1f376:	3601      	adds	r6, #1
   1f378:	b2b6      	uxth	r6, r6
			loc--;
   1f37a:	3b01      	subs	r3, #1
		if (length >= len) {
   1f37c:	42b5      	cmp	r5, r6
			loc += opt_len;
   1f37e:	f8ad 3014 	strh.w	r3, [sp, #20]
		if (length >= len) {
   1f382:	d9e7      	bls.n	1f354 <net_ipv6_process_pkt+0x188>
   1f384:	f10d 030e 	add.w	r3, sp, #14
   1f388:	f8bd 1014 	ldrh.w	r1, [sp, #20]
   1f38c:	9300      	str	r3, [sp, #0]
   1f38e:	aa05      	add	r2, sp, #20
   1f390:	2301      	movs	r3, #1
   1f392:	f7fc fbd7 	bl	1bb44 <net_frag_read>
   1f396:	f8bd 1014 	ldrh.w	r1, [sp, #20]
   1f39a:	9700      	str	r7, [sp, #0]
   1f39c:	2301      	movs	r3, #1
   1f39e:	aa05      	add	r2, sp, #20
   1f3a0:	f7fc fbd0 	bl	1bb44 <net_frag_read>
		if (!frag && loc == 0xffff) {
   1f3a4:	2800      	cmp	r0, #0
   1f3a6:	f43f af21 	beq.w	1f1ec <net_ipv6_process_pkt+0x20>
	while (frag && (length < len)) {
   1f3aa:	42b5      	cmp	r5, r6
   1f3ac:	d9d2      	bls.n	1f354 <net_ipv6_process_pkt+0x188>
		switch (opt_type) {
   1f3ae:	f89d 300e 	ldrb.w	r3, [sp, #14]
   1f3b2:	2b00      	cmp	r3, #0
   1f3b4:	d0dd      	beq.n	1f372 <net_ipv6_process_pkt+0x1a6>
   1f3b6:	2b01      	cmp	r3, #1
   1f3b8:	d010      	beq.n	1f3dc <net_ipv6_process_pkt+0x210>
	switch (opt_type & 0xc0) {
   1f3ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1f3be:	2b80      	cmp	r3, #128	; 0x80
   1f3c0:	d01c      	beq.n	1f3fc <net_ipv6_process_pkt+0x230>
   1f3c2:	2bc0      	cmp	r3, #192	; 0xc0
   1f3c4:	d014      	beq.n	1f3f0 <net_ipv6_process_pkt+0x224>
   1f3c6:	2b40      	cmp	r3, #64	; 0x40
   1f3c8:	f43f af10 	beq.w	1f1ec <net_ipv6_process_pkt+0x20>
			length += opt_len + 2;
   1f3cc:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1f3d0:	1c9a      	adds	r2, r3, #2
   1f3d2:	4416      	add	r6, r2
   1f3d4:	b2b6      	uxth	r6, r6
			loc += opt_len;
   1f3d6:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   1f3da:	e007      	b.n	1f3ec <net_ipv6_process_pkt+0x220>
			length += opt_len + 2;
   1f3dc:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1f3e0:	1c9a      	adds	r2, r3, #2
   1f3e2:	4416      	add	r6, r2
			loc += opt_len + 2;
   1f3e4:	f8bd 2014 	ldrh.w	r2, [sp, #20]
			length += opt_len + 2;
   1f3e8:	b2b6      	uxth	r6, r6
			loc += opt_len + 2;
   1f3ea:	3202      	adds	r2, #2
			loc += opt_len;
   1f3ec:	4413      	add	r3, r2
   1f3ee:	e7c5      	b.n	1f37c <net_ipv6_process_pkt+0x1b0>
	return pkt->frags->data;
   1f3f0:	68a3      	ldr	r3, [r4, #8]
		if (net_is_ipv6_addr_mcast(&NET_IPV6_HDR(pkt)->dst)) {
   1f3f2:	689b      	ldr	r3, [r3, #8]
   1f3f4:	7e1b      	ldrb	r3, [r3, #24]
   1f3f6:	2bff      	cmp	r3, #255	; 0xff
   1f3f8:	f43f aef8 	beq.w	1f1ec <net_ipv6_process_pkt+0x20>
		net_icmpv6_send_error(pkt, NET_ICMPV6_PARAM_PROBLEM,
   1f3fc:	4633      	mov	r3, r6
   1f3fe:	2202      	movs	r2, #2
	net_icmpv6_send_error(pkt, NET_ICMPV6_PARAM_PROBLEM,
   1f400:	2104      	movs	r1, #4
   1f402:	4620      	mov	r0, r4
   1f404:	f7fd fec2 	bl	1d18c <net_icmpv6_send_error>
   1f408:	e6f0      	b.n	1f1ec <net_ipv6_process_pkt+0x20>
	if (!frag && loc == 0xffff) {
   1f40a:	2602      	movs	r6, #2
   1f40c:	e7cd      	b.n	1f3aa <net_ipv6_process_pkt+0x1de>
	icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   1f40e:	a905      	add	r1, sp, #20
   1f410:	4620      	mov	r0, r4
   1f412:	f7fd fc07 	bl	1cc24 <net_icmpv6_get_hdr>
	if (!icmp_hdr) {
   1f416:	2800      	cmp	r0, #0
   1f418:	f43f aee8 	beq.w	1f1ec <net_ipv6_process_pkt+0x20>
	return net_icmpv6_input(pkt, icmp_hdr->type, icmp_hdr->code);
   1f41c:	7842      	ldrb	r2, [r0, #1]
   1f41e:	7801      	ldrb	r1, [r0, #0]
   1f420:	4620      	mov	r0, r4
   1f422:	f7fe f80f 	bl	1d444 <net_icmpv6_input>

	NET_DBG("Unknown next header type");
	net_stats_update_ip_errors_protoerr();

	return NET_DROP;
}
   1f426:	b007      	add	sp, #28
   1f428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return net_conn_input(IPPROTO_UDP, pkt);
   1f42c:	4621      	mov	r1, r4
   1f42e:	2011      	movs	r0, #17
		return net_conn_input(IPPROTO_TCP, pkt);
   1f430:	f000 fbd2 	bl	1fbd8 <net_conn_input>
   1f434:	e7f7      	b.n	1f426 <net_ipv6_process_pkt+0x25a>
		found = net_route_get_info(net_pkt_iface(pkt),
   1f436:	ab05      	add	r3, sp, #20
   1f438:	aa04      	add	r2, sp, #16
   1f43a:	4631      	mov	r1, r6
   1f43c:	6960      	ldr	r0, [r4, #20]
   1f43e:	f000 fa38 	bl	1f8b2 <net_route_get_info>
	if (found) {
   1f442:	2800      	cmp	r0, #0
   1f444:	f43f aed2 	beq.w	1f1ec <net_ipv6_process_pkt+0x20>
		if (route) {
   1f448:	9b04      	ldr	r3, [sp, #16]
   1f44a:	b133      	cbz	r3, 1f45a <net_ipv6_process_pkt+0x28e>
			net_pkt_set_iface(pkt, route->iface);
   1f44c:	68db      	ldr	r3, [r3, #12]
	pkt->iface = iface;
   1f44e:	6163      	str	r3, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1f450:	7d5b      	ldrb	r3, [r3, #21]
   1f452:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1f456:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
		ret = net_route_packet(pkt, nexthop);
   1f45a:	9905      	ldr	r1, [sp, #20]
   1f45c:	4620      	mov	r0, r4
   1f45e:	f000 fa4a 	bl	1f8f6 <net_route_packet>
		if (ret < 0) {
   1f462:	2800      	cmp	r0, #0
   1f464:	f6ff aec2 	blt.w	1f1ec <net_ipv6_process_pkt+0x20>
			return NET_OK;
   1f468:	2000      	movs	r0, #0
   1f46a:	e7dc      	b.n	1f426 <net_ipv6_process_pkt+0x25a>

0001f46c <net_ipv6_init>:

void net_ipv6_init(void)
{
   1f46c:	b508      	push	{r3, lr}
#if defined(CONFIG_NET_IPV6_NBR_CACHE)
	net_icmpv6_register_handler(&ns_input_handler);
   1f46e:	4807      	ldr	r0, [pc, #28]	; (1f48c <net_ipv6_init+0x20>)
   1f470:	f7fd fb84 	bl	1cb7c <net_icmpv6_register_handler>
	net_icmpv6_register_handler(&na_input_handler);
   1f474:	4806      	ldr	r0, [pc, #24]	; (1f490 <net_ipv6_init+0x24>)
   1f476:	f7fd fb81 	bl	1cb7c <net_icmpv6_register_handler>
#endif
#if defined(CONFIG_NET_IPV6_ND)
	net_icmpv6_register_handler(&ra_input_handler);
   1f47a:	4806      	ldr	r0, [pc, #24]	; (1f494 <net_ipv6_init+0x28>)
   1f47c:	f7fd fb7e 	bl	1cb7c <net_icmpv6_register_handler>
#endif
#if defined(CONFIG_NET_IPV6_MLD)
	net_icmpv6_register_handler(&mld_query_input_handler);
   1f480:	4805      	ldr	r0, [pc, #20]	; (1f498 <net_ipv6_init+0x2c>)
#endif
}
   1f482:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	net_icmpv6_register_handler(&mld_query_input_handler);
   1f486:	f7fd bb79 	b.w	1cb7c <net_icmpv6_register_handler>
   1f48a:	bf00      	nop
   1f48c:	2000a568 	.word	0x2000a568
   1f490:	2000a150 	.word	0x2000a150
   1f494:	2000a574 	.word	0x2000a574
   1f498:	2000a144 	.word	0x2000a144

0001f49c <mgmt_thread>:
			  K_THREAD_STACK_SIZEOF(mgmt_stack));
#endif
}

static void mgmt_thread(void)
{
   1f49c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!events[out_event].event) {
   1f4a0:	f8df 9110 	ldr.w	r9, [pc, #272]	; 1f5b4 <mgmt_thread+0x118>
   1f4a4:	464f      	mov	r7, r9
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   1f4a6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f4aa:	483e      	ldr	r0, [pc, #248]	; (1f5a4 <mgmt_thread+0x108>)
   1f4ac:	f002 fbe2 	bl	21c74 <_impl_k_sem_take>
   1f4b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f4b4:	483c      	ldr	r0, [pc, #240]	; (1f5a8 <mgmt_thread+0x10c>)
   1f4b6:	f002 fbdd 	bl	21c74 <_impl_k_sem_take>
   1f4ba:	4a3c      	ldr	r2, [pc, #240]	; (1f5ac <mgmt_thread+0x110>)
   1f4bc:	8815      	ldrh	r5, [r2, #0]
   1f4be:	f859 4035 	ldr.w	r4, [r9, r5, lsl #3]
   1f4c2:	b964      	cbnz	r4, 1f4de <mgmt_thread+0x42>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1f4c4:	4838      	ldr	r0, [pc, #224]	; (1f5a8 <mgmt_thread+0x10c>)
   1f4c6:	f002 fb75 	bl	21bb4 <_impl_k_sem_give>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   1f4ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1f4ce:	4621      	mov	r1, r4
   1f4d0:	4834      	ldr	r0, [pc, #208]	; (1f5a4 <mgmt_thread+0x108>)
   1f4d2:	f002 fb65 	bl	21ba0 <_impl_k_sem_init>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1f4d6:	4834      	ldr	r0, [pc, #208]	; (1f5a8 <mgmt_thread+0x10c>)
   1f4d8:	f002 fb6c 	bl	21bb4 <_impl_k_sem_give>
				k_sem_count_get(&network_event));

			k_sem_init(&network_event, 0, UINT_MAX);
			k_sem_give(&net_mgmt_lock);

			continue;
   1f4dc:	e7e3      	b.n	1f4a6 <mgmt_thread+0xa>
	out_event++;
   1f4de:	1c6b      	adds	r3, r5, #1
   1f4e0:	4e33      	ldr	r6, [pc, #204]	; (1f5b0 <mgmt_thread+0x114>)
   1f4e2:	b29b      	uxth	r3, r3
	if (out_event == CONFIG_NET_MGMT_EVENT_QUEUE_SIZE) {
   1f4e4:	2b02      	cmp	r3, #2
   1f4e6:	6834      	ldr	r4, [r6, #0]
		out_event = 0;
   1f4e8:	bf08      	it	eq
   1f4ea:	2300      	moveq	r3, #0
   1f4ec:	8013      	strh	r3, [r2, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
   1f4ee:	b9c4      	cbnz	r4, 1f522 <mgmt_thread+0x86>
	mgmt_event->event = 0;
   1f4f0:	2300      	movs	r3, #0
   1f4f2:	f847 3035 	str.w	r3, [r7, r5, lsl #3]
	mgmt_event->iface = NULL;
   1f4f6:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
   1f4fa:	482b      	ldr	r0, [pc, #172]	; (1f5a8 <mgmt_thread+0x10c>)
   1f4fc:	606b      	str	r3, [r5, #4]
   1f4fe:	f002 fb59 	bl	21bb4 <_impl_k_sem_give>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   1f502:	f002 fadb 	bl	21abc <_impl_k_yield>
   1f506:	e7ce      	b.n	1f4a6 <mgmt_thread+0xa>
		prev_node->next = node->next;
   1f508:	601a      	str	r2, [r3, #0]
		if (list->tail == node) {
   1f50a:	6872      	ldr	r2, [r6, #4]
   1f50c:	4294      	cmp	r4, r2
			list->tail = prev_node;
   1f50e:	bf08      	it	eq
   1f510:	6073      	streq	r3, [r6, #4]
   1f512:	e038      	b.n	1f586 <mgmt_thread+0xea>
			cb->handler(cb, mgmt_event->event, mgmt_event->iface);
   1f514:	6863      	ldr	r3, [r4, #4]
   1f516:	f8db 2004 	ldr.w	r2, [fp, #4]
   1f51a:	4620      	mov	r0, r4
   1f51c:	4798      	blx	r3
			prev = &cb->node;
   1f51e:	4623      	mov	r3, r4
   1f520:	e038      	b.n	1f594 <mgmt_thread+0xf8>
	return node->next;
   1f522:	2300      	movs	r3, #0
   1f524:	f8d4 8000 	ldr.w	r8, [r4]
			cb->handler(cb, mgmt_event->event, mgmt_event->iface);
   1f528:	eb07 0bc5 	add.w	fp, r7, r5, lsl #3
	node->next = NULL;
   1f52c:	469a      	mov	sl, r3
		if (!(NET_MGMT_GET_LAYER(mgmt_event->event) ==
   1f52e:	f857 1035 	ldr.w	r1, [r7, r5, lsl #3]
		      NET_MGMT_GET_LAYER(cb->event_mask)) ||
   1f532:	68a2      	ldr	r2, [r4, #8]
		if (!(NET_MGMT_GET_LAYER(mgmt_event->event) ==
   1f534:	ea81 0002 	eor.w	r0, r1, r2
   1f538:	f010 5f40 	tst.w	r0, #805306368	; 0x30000000
   1f53c:	d12a      	bne.n	1f594 <mgmt_thread+0xf8>
		    !(NET_MGMT_GET_LAYER_CODE(mgmt_event->event) ==
   1f53e:	f3c0 400a 	ubfx	r0, r0, #16, #11
		      NET_MGMT_GET_LAYER(cb->event_mask)) ||
   1f542:	bb38      	cbnz	r0, 1f594 <mgmt_thread+0xf8>
		    (NET_MGMT_GET_COMMAND(mgmt_event->event) &&
   1f544:	b288      	uxth	r0, r1
		      NET_MGMT_GET_LAYER_CODE(cb->event_mask)) ||
   1f546:	b130      	cbz	r0, 1f556 <mgmt_thread+0xba>
		     NET_MGMT_GET_COMMAND(cb->event_mask) &&
   1f548:	fa1f fe82 	uxth.w	lr, r2
		    (NET_MGMT_GET_COMMAND(mgmt_event->event) &&
   1f54c:	f1be 0f00 	cmp.w	lr, #0
   1f550:	d001      	beq.n	1f556 <mgmt_thread+0xba>
		     NET_MGMT_GET_COMMAND(cb->event_mask) &&
   1f552:	4202      	tst	r2, r0
   1f554:	d01e      	beq.n	1f594 <mgmt_thread+0xf8>
		if (NET_MGMT_EVENT_SYNCHRONOUS(cb->event_mask)) {
   1f556:	0112      	lsls	r2, r2, #4
   1f558:	d5dc      	bpl.n	1f514 <mgmt_thread+0x78>
			struct mgmt_event_wait *sync_data =
   1f55a:	6860      	ldr	r0, [r4, #4]
			if (sync_data->iface &&
   1f55c:	f8d0 e018 	ldr.w	lr, [r0, #24]
   1f560:	f1be 0f00 	cmp.w	lr, #0
   1f564:	d003      	beq.n	1f56e <mgmt_thread+0xd2>
   1f566:	f8db 2004 	ldr.w	r2, [fp, #4]
   1f56a:	4596      	cmp	lr, r2
   1f56c:	d112      	bne.n	1f594 <mgmt_thread+0xf8>
			cb->raised_event = mgmt_event->event;
   1f56e:	60a1      	str	r1, [r4, #8]
			sync_data->iface = mgmt_event->iface;
   1f570:	f8db 2004 	ldr.w	r2, [fp, #4]
   1f574:	6182      	str	r2, [r0, #24]
   1f576:	6822      	ldr	r2, [r4, #0]
	if (!prev_node) {
   1f578:	2b00      	cmp	r3, #0
   1f57a:	d1c5      	bne.n	1f508 <mgmt_thread+0x6c>
		if (list->tail == node) {
   1f57c:	6871      	ldr	r1, [r6, #4]
		list->head = node->next;
   1f57e:	6032      	str	r2, [r6, #0]
		if (list->tail == node) {
   1f580:	428c      	cmp	r4, r1
   1f582:	d100      	bne.n	1f586 <mgmt_thread+0xea>
			list->tail = list->head;
   1f584:	6072      	str	r2, [r6, #4]
	node->next = NULL;
   1f586:	f8c4 a000 	str.w	sl, [r4]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1f58a:	6860      	ldr	r0, [r4, #4]
   1f58c:	9301      	str	r3, [sp, #4]
   1f58e:	f002 fb11 	bl	21bb4 <_impl_k_sem_give>
   1f592:	9b01      	ldr	r3, [sp, #4]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
   1f594:	f1b8 0f00 	cmp.w	r8, #0
   1f598:	d0aa      	beq.n	1f4f0 <mgmt_thread+0x54>
   1f59a:	4644      	mov	r4, r8
   1f59c:	f8d8 8000 	ldr.w	r8, [r8]
   1f5a0:	e7c5      	b.n	1f52e <mgmt_thread+0x92>
   1f5a2:	bf00      	nop
   1f5a4:	2000a9cc 	.word	0x2000a9cc
   1f5a8:	2000a9b4 	.word	0x2000a9b4
   1f5ac:	200028b4 	.word	0x200028b4
   1f5b0:	2000282c 	.word	0x2000282c
   1f5b4:	20002834 	.word	0x20002834

0001f5b8 <net_mgmt_add_event_callback>:

	return ret;
}

void net_mgmt_add_event_callback(struct net_mgmt_event_callback *cb)
{
   1f5b8:	b510      	push	{r4, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   1f5ba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f5be:	4604      	mov	r4, r0
   1f5c0:	4809      	ldr	r0, [pc, #36]	; (1f5e8 <net_mgmt_add_event_callback+0x30>)
   1f5c2:	f002 fb57 	bl	21c74 <_impl_k_sem_take>
	node->next = list->head;
   1f5c6:	4b09      	ldr	r3, [pc, #36]	; (1f5ec <net_mgmt_add_event_callback+0x34>)
   1f5c8:	681a      	ldr	r2, [r3, #0]
   1f5ca:	6022      	str	r2, [r4, #0]
	if (!list->tail) {
   1f5cc:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   1f5ce:	601c      	str	r4, [r3, #0]
	if (!list->tail) {
   1f5d0:	b902      	cbnz	r2, 1f5d4 <net_mgmt_add_event_callback+0x1c>
		list->tail = list->head;
   1f5d2:	605c      	str	r4, [r3, #4]
	global_event_mask |= event_mask;
   1f5d4:	4a06      	ldr	r2, [pc, #24]	; (1f5f0 <net_mgmt_add_event_callback+0x38>)
   1f5d6:	68a3      	ldr	r3, [r4, #8]
   1f5d8:	6811      	ldr	r1, [r2, #0]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1f5da:	4803      	ldr	r0, [pc, #12]	; (1f5e8 <net_mgmt_add_event_callback+0x30>)
   1f5dc:	430b      	orrs	r3, r1
	sys_slist_prepend(&event_callbacks, &cb->node);

	mgmt_add_event_mask(cb->event_mask);

	k_sem_give(&net_mgmt_lock);
}
   1f5de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	global_event_mask |= event_mask;
   1f5e2:	6013      	str	r3, [r2, #0]
   1f5e4:	f002 bae6 	b.w	21bb4 <_impl_k_sem_give>
   1f5e8:	2000a9b4 	.word	0x2000a9b4
   1f5ec:	2000282c 	.word	0x2000282c
   1f5f0:	20002844 	.word	0x20002844

0001f5f4 <net_mgmt_event_notify_with_info>:
	k_sem_give(&net_mgmt_lock);
}

void net_mgmt_event_notify_with_info(u32_t mgmt_event, struct net_if *iface,
				     void *info, size_t length)
{
   1f5f4:	b538      	push	{r3, r4, r5, lr}
	return ((mgmt_event & global_event_mask) == mgmt_event);
   1f5f6:	4b18      	ldr	r3, [pc, #96]	; (1f658 <net_mgmt_event_notify_with_info+0x64>)
   1f5f8:	681b      	ldr	r3, [r3, #0]
	if (mgmt_is_event_handled(mgmt_event)) {
   1f5fa:	ea30 0303 	bics.w	r3, r0, r3
{
   1f5fe:	4604      	mov	r4, r0
   1f600:	460d      	mov	r5, r1
	if (mgmt_is_event_handled(mgmt_event)) {
   1f602:	d128      	bne.n	1f656 <net_mgmt_event_notify_with_info+0x62>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   1f604:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f608:	4814      	ldr	r0, [pc, #80]	; (1f65c <net_mgmt_event_notify_with_info+0x68>)
   1f60a:	f002 fb33 	bl	21c74 <_impl_k_sem_take>
	events[in_event].event = mgmt_event;
   1f60e:	4a14      	ldr	r2, [pc, #80]	; (1f660 <net_mgmt_event_notify_with_info+0x6c>)
   1f610:	4914      	ldr	r1, [pc, #80]	; (1f664 <net_mgmt_event_notify_with_info+0x70>)
   1f612:	8813      	ldrh	r3, [r2, #0]
	events[in_event].iface = iface;
   1f614:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
	events[in_event].event = mgmt_event;
   1f618:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
	in_event++;
   1f61c:	3301      	adds	r3, #1
   1f61e:	b29b      	uxth	r3, r3
	if (in_event == CONFIG_NET_MGMT_EVENT_QUEUE_SIZE) {
   1f620:	2b02      	cmp	r3, #2
		in_event = 0;
   1f622:	bf08      	it	eq
   1f624:	2300      	moveq	r3, #0
   1f626:	8013      	strh	r3, [r2, #0]
	events[in_event].iface = iface;
   1f628:	6045      	str	r5, [r0, #4]
	if (in_event == out_event) {
   1f62a:	8810      	ldrh	r0, [r2, #0]
   1f62c:	4a0e      	ldr	r2, [pc, #56]	; (1f668 <net_mgmt_event_notify_with_info+0x74>)
   1f62e:	8813      	ldrh	r3, [r2, #0]
   1f630:	4283      	cmp	r3, r0
   1f632:	d108      	bne.n	1f646 <net_mgmt_event_notify_with_info+0x52>
		u16_t o_idx = out_event + 1;
   1f634:	3301      	adds	r3, #1
   1f636:	b29b      	uxth	r3, r3
			o_idx = 0;
   1f638:	2b02      	cmp	r3, #2
   1f63a:	bf08      	it	eq
   1f63c:	2300      	moveq	r3, #0
		if (events[o_idx].event) {
   1f63e:	f851 1033 	ldr.w	r1, [r1, r3, lsl #3]
   1f642:	b101      	cbz	r1, 1f646 <net_mgmt_event_notify_with_info+0x52>
			out_event = o_idx;
   1f644:	8013      	strh	r3, [r2, #0]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1f646:	4805      	ldr	r0, [pc, #20]	; (1f65c <net_mgmt_event_notify_with_info+0x68>)
   1f648:	f002 fab4 	bl	21bb4 <_impl_k_sem_give>
   1f64c:	4807      	ldr	r0, [pc, #28]	; (1f66c <net_mgmt_event_notify_with_info+0x78>)
			NET_MGMT_GET_COMMAND(mgmt_event));

		mgmt_push_event(mgmt_event, iface, info, length);
		k_sem_give(&network_event);
	}
}
   1f64e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1f652:	f002 baaf 	b.w	21bb4 <_impl_k_sem_give>
   1f656:	bd38      	pop	{r3, r4, r5, pc}
   1f658:	20002844 	.word	0x20002844
   1f65c:	2000a9b4 	.word	0x2000a9b4
   1f660:	20002848 	.word	0x20002848
   1f664:	20002834 	.word	0x20002834
   1f668:	200028b4 	.word	0x200028b4
   1f66c:	2000a9cc 	.word	0x2000a9cc

0001f670 <net_mgmt_event_init>:
	list->head = NULL;
   1f670:	4b10      	ldr	r3, [pc, #64]	; (1f6b4 <net_mgmt_event_init+0x44>)
	global_event_mask = 0;

	in_event = 0;
	out_event = 0;

	memset(events, 0,
   1f672:	4811      	ldr	r0, [pc, #68]	; (1f6b8 <net_mgmt_event_init+0x48>)
{
   1f674:	b510      	push	{r4, lr}
   1f676:	2400      	movs	r4, #0
   1f678:	601c      	str	r4, [r3, #0]
	list->tail = NULL;
   1f67a:	605c      	str	r4, [r3, #4]
	global_event_mask = 0;
   1f67c:	4b0f      	ldr	r3, [pc, #60]	; (1f6bc <net_mgmt_event_init+0x4c>)
   1f67e:	601c      	str	r4, [r3, #0]
	in_event = 0;
   1f680:	4b0f      	ldr	r3, [pc, #60]	; (1f6c0 <net_mgmt_event_init+0x50>)
   1f682:	801c      	strh	r4, [r3, #0]
	out_event = 0;
   1f684:	4b0f      	ldr	r3, [pc, #60]	; (1f6c4 <net_mgmt_event_init+0x54>)
{
   1f686:	b086      	sub	sp, #24
	memset(events, 0,
   1f688:	4621      	mov	r1, r4
   1f68a:	2210      	movs	r2, #16
	out_event = 0;
   1f68c:	801c      	strh	r4, [r3, #0]
	memset(events, 0,
   1f68e:	f7e1 f8ac 	bl	7ea <memset>

   1f692:	f06f 0308 	mvn.w	r3, #8
   1f696:	9303      	str	r3, [sp, #12]
   1f698:	9405      	str	r4, [sp, #20]
   1f69a:	9404      	str	r4, [sp, #16]
   1f69c:	9402      	str	r4, [sp, #8]
   1f69e:	9401      	str	r4, [sp, #4]
   1f6a0:	9400      	str	r4, [sp, #0]
   1f6a2:	4b09      	ldr	r3, [pc, #36]	; (1f6c8 <net_mgmt_event_init+0x58>)
   1f6a4:	4909      	ldr	r1, [pc, #36]	; (1f6cc <net_mgmt_event_init+0x5c>)
   1f6a6:	480a      	ldr	r0, [pc, #40]	; (1f6d0 <net_mgmt_event_init+0x60>)
   1f6a8:	f44f 7200 	mov.w	r2, #512	; 0x200
   1f6ac:	f002 fcbe 	bl	2202c <_impl_k_thread_create>
			K_PRIO_COOP(CONFIG_NET_MGMT_EVENT_THREAD_PRIO), 0, 0);

	NET_DBG("Net MGMT initialized: queue of %u entries, stack size of %u",
		CONFIG_NET_MGMT_EVENT_QUEUE_SIZE,
		CONFIG_NET_MGMT_EVENT_STACK_SIZE);
}
   1f6b0:	b006      	add	sp, #24
   1f6b2:	bd10      	pop	{r4, pc}
   1f6b4:	2000282c 	.word	0x2000282c
   1f6b8:	20002834 	.word	0x20002834
   1f6bc:	20002844 	.word	0x20002844
   1f6c0:	20002848 	.word	0x20002848
   1f6c4:	200028b4 	.word	0x200028b4
   1f6c8:	0001f49d 	.word	0x0001f49d
   1f6cc:	20008928 	.word	0x20008928
   1f6d0:	2000284c 	.word	0x2000284c

0001f6d4 <sys_slist_find_and_remove.constprop.6>:
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
   1f6d4:	b510      	push	{r4, lr}
   1f6d6:	4a0e      	ldr	r2, [pc, #56]	; (1f710 <sys_slist_find_and_remove.constprop.6+0x3c>)
   1f6d8:	6813      	ldr	r3, [r2, #0]
	sys_snode_t *prev = NULL;
   1f6da:	2100      	movs	r1, #0
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   1f6dc:	b90b      	cbnz	r3, 1f6e2 <sys_slist_find_and_remove.constprop.6+0xe>
		}

		prev = test;
	}

	return false;
   1f6de:	4618      	mov	r0, r3
}
   1f6e0:	bd10      	pop	{r4, pc}
		if (test == node) {
   1f6e2:	4283      	cmp	r3, r0
   1f6e4:	681c      	ldr	r4, [r3, #0]
   1f6e6:	d10f      	bne.n	1f708 <sys_slist_find_and_remove.constprop.6+0x34>
	if (!prev_node) {
   1f6e8:	b941      	cbnz	r1, 1f6fc <sys_slist_find_and_remove.constprop.6+0x28>
		if (list->tail == node) {
   1f6ea:	6851      	ldr	r1, [r2, #4]
		list->head = node->next;
   1f6ec:	6014      	str	r4, [r2, #0]
		if (list->tail == node) {
   1f6ee:	428b      	cmp	r3, r1
   1f6f0:	d100      	bne.n	1f6f4 <sys_slist_find_and_remove.constprop.6+0x20>
			list->tail = list->head;
   1f6f2:	6054      	str	r4, [r2, #4]
	node->next = NULL;
   1f6f4:	2200      	movs	r2, #0
   1f6f6:	601a      	str	r2, [r3, #0]
			return true;
   1f6f8:	2001      	movs	r0, #1
   1f6fa:	bd10      	pop	{r4, pc}
		if (list->tail == node) {
   1f6fc:	6850      	ldr	r0, [r2, #4]
		prev_node->next = node->next;
   1f6fe:	600c      	str	r4, [r1, #0]
		if (list->tail == node) {
   1f700:	4283      	cmp	r3, r0
			list->tail = prev_node;
   1f702:	bf08      	it	eq
   1f704:	6051      	streq	r1, [r2, #4]
   1f706:	e7f5      	b.n	1f6f4 <sys_slist_find_and_remove.constprop.6+0x20>
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   1f708:	4619      	mov	r1, r3
   1f70a:	4623      	mov	r3, r4
   1f70c:	e7e6      	b.n	1f6dc <sys_slist_find_and_remove.constprop.6+0x8>
   1f70e:	bf00      	nop
   1f710:	200028b8 	.word	0x200028b8

0001f714 <net_route_entry_remove>:
   1f714:	4770      	bx	lr
	...

0001f718 <net_route_get_nbr>:
	NET_ASSERT(route);

	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
		struct net_nbr *nbr = get_nbr(i);

		if (!nbr->ref) {
   1f718:	4909      	ldr	r1, [pc, #36]	; (1f740 <net_route_get_nbr+0x28>)
{
   1f71a:	b530      	push	{r4, r5, lr}
	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
   1f71c:	2200      	movs	r2, #0
   1f71e:	2438      	movs	r4, #56	; 0x38
   1f720:	fb04 f302 	mul.w	r3, r4, r2
		if (!nbr->ref) {
   1f724:	5c5d      	ldrb	r5, [r3, r1]
   1f726:	b11d      	cbz	r5, 1f730 <net_route_get_nbr+0x18>
   1f728:	440b      	add	r3, r1
			continue;
		}

		if (nbr->data == (u8_t *)route) {
   1f72a:	68dd      	ldr	r5, [r3, #12]
   1f72c:	4285      	cmp	r5, r0
   1f72e:	d004      	beq.n	1f73a <net_route_get_nbr+0x22>
	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
   1f730:	3201      	adds	r2, #1
   1f732:	2a08      	cmp	r2, #8
   1f734:	d1f4      	bne.n	1f720 <net_route_get_nbr+0x8>

			return nbr;
		}
	}

	return NULL;
   1f736:	2000      	movs	r0, #0
   1f738:	bd30      	pop	{r4, r5, pc}
   1f73a:	4618      	mov	r0, r3
}
   1f73c:	bd30      	pop	{r4, r5, pc}
   1f73e:	bf00      	nop
   1f740:	2000a580 	.word	0x2000a580

0001f744 <net_route_lookup>:
	sys_slist_prepend(&routes, &route->node);
}

struct net_route_entry *net_route_lookup(struct net_if *iface,
					 struct in6_addr *dst)
{
   1f744:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		if (route->prefix_len >= longest_match &&
		    net_is_ipv6_prefix((u8_t *)dst,
				       (u8_t *)&route->addr,
				       route->prefix_len)) {
			found = route;
			longest_match = route->prefix_len;
   1f748:	2500      	movs	r5, #0
		if (!nbr->ref) {
   1f74a:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 1f7f4 <net_route_lookup+0xb0>
{
   1f74e:	9000      	str	r0, [sp, #0]
   1f750:	460b      	mov	r3, r1
	u8_t longest_match = 0;
   1f752:	46a8      	mov	r8, r5
	struct net_route_entry *route, *found = NULL;
   1f754:	462e      	mov	r6, r5
	for (i = 0; i < CONFIG_NET_MAX_ROUTES && longest_match < 128; i++) {
   1f756:	f018 0f80 	tst.w	r8, #128	; 0x80
   1f75a:	d13a      	bne.n	1f7d2 <net_route_lookup+0x8e>
		if (!nbr->ref) {
   1f75c:	f815 2009 	ldrb.w	r2, [r5, r9]
   1f760:	b39a      	cbz	r2, 1f7ca <net_route_lookup+0x86>
		if (iface && nbr->iface != iface) {
   1f762:	9a00      	ldr	r2, [sp, #0]
   1f764:	b12a      	cbz	r2, 1f772 <net_route_lookup+0x2e>
   1f766:	eb09 0205 	add.w	r2, r9, r5
   1f76a:	9900      	ldr	r1, [sp, #0]
   1f76c:	6892      	ldr	r2, [r2, #8]
   1f76e:	4291      	cmp	r1, r2
   1f770:	d12b      	bne.n	1f7ca <net_route_lookup+0x86>
   1f772:	eb09 0205 	add.w	r2, r9, r5
   1f776:	68d7      	ldr	r7, [r2, #12]
		if (route->prefix_len >= longest_match &&
   1f778:	f897 4020 	ldrb.w	r4, [r7, #32]
   1f77c:	4544      	cmp	r4, r8
   1f77e:	d324      	bcc.n	1f7ca <net_route_lookup+0x86>
	if (length > 128) {
   1f780:	2c80      	cmp	r4, #128	; 0x80
   1f782:	d822      	bhi.n	1f7ca <net_route_lookup+0x86>
				       (u8_t *)&route->addr,
   1f784:	f107 0b10 	add.w	fp, r7, #16
	if (memcmp(addr1, addr2, bytes)) {
   1f788:	ea4f 0ad4 	mov.w	sl, r4, lsr #3
   1f78c:	4618      	mov	r0, r3
   1f78e:	4652      	mov	r2, sl
   1f790:	4659      	mov	r1, fp
   1f792:	9301      	str	r3, [sp, #4]
   1f794:	f7e0 ffd0 	bl	738 <memcmp>
   1f798:	9b01      	ldr	r3, [sp, #4]
   1f79a:	b9b0      	cbnz	r0, 1f7ca <net_route_lookup+0x86>
	u8_t bits = 128 - length;
   1f79c:	f1c4 0480 	rsb	r4, r4, #128	; 0x80
	if (!remain) {
   1f7a0:	f014 0407 	ands.w	r4, r4, #7
   1f7a4:	d00e      	beq.n	1f7c4 <net_route_lookup+0x80>
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
   1f7a6:	f81b 200a 	ldrb.w	r2, [fp, sl]
   1f7aa:	f813 100a 	ldrb.w	r1, [r3, sl]
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
   1f7ae:	20ff      	movs	r0, #255	; 0xff
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
   1f7b0:	4051      	eors	r1, r2
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
   1f7b2:	f1c4 0208 	rsb	r2, r4, #8
   1f7b6:	fa00 f202 	lsl.w	r2, r0, r2
   1f7ba:	4042      	eors	r2, r0
   1f7bc:	fa02 f404 	lsl.w	r4, r2, r4
		if (route->prefix_len >= longest_match &&
   1f7c0:	4221      	tst	r1, r4
   1f7c2:	d102      	bne.n	1f7ca <net_route_lookup+0x86>
			longest_match = route->prefix_len;
   1f7c4:	f897 8020 	ldrb.w	r8, [r7, #32]
   1f7c8:	463e      	mov	r6, r7
   1f7ca:	3538      	adds	r5, #56	; 0x38
	for (i = 0; i < CONFIG_NET_MAX_ROUTES && longest_match < 128; i++) {
   1f7cc:	f5b5 7fe0 	cmp.w	r5, #448	; 0x1c0
   1f7d0:	d1c1      	bne.n	1f756 <net_route_lookup+0x12>
		}
	}

	if (found) {
   1f7d2:	b14e      	cbz	r6, 1f7e8 <net_route_lookup+0xa4>
	sys_slist_find_and_remove(&routes, &route->node);
   1f7d4:	4630      	mov	r0, r6
   1f7d6:	f7ff ff7d 	bl	1f6d4 <sys_slist_find_and_remove.constprop.6>
	node->next = list->head;
   1f7da:	4b05      	ldr	r3, [pc, #20]	; (1f7f0 <net_route_lookup+0xac>)
   1f7dc:	681a      	ldr	r2, [r3, #0]
   1f7de:	6032      	str	r2, [r6, #0]
	if (!list->tail) {
   1f7e0:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   1f7e2:	601e      	str	r6, [r3, #0]
	if (!list->tail) {
   1f7e4:	b902      	cbnz	r2, 1f7e8 <net_route_lookup+0xa4>
		list->tail = list->head;
   1f7e6:	605e      	str	r6, [r3, #4]

		update_route_access(found);
	}

	return found;
}
   1f7e8:	4630      	mov	r0, r6
   1f7ea:	b003      	add	sp, #12
   1f7ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f7f0:	200028b8 	.word	0x200028b8
   1f7f4:	2000a580 	.word	0x2000a580

0001f7f8 <net_route_del>:

	return route;
}

int net_route_del(struct net_route_entry *route)
{
   1f7f8:	b538      	push	{r3, r4, r5, lr}
	struct net_route_nexthop *nexthop_route;
#if defined(CONFIG_NET_MGMT_EVENT_INFO)
       struct net_event_ipv6_route info;
#endif

	if (!route) {
   1f7fa:	4604      	mov	r4, r0
   1f7fc:	b1d0      	cbz	r0, 1f834 <net_route_del+0x3c>
   1f7fe:	2300      	movs	r3, #0
   1f800:	68c1      	ldr	r1, [r0, #12]
   1f802:	480f      	ldr	r0, [pc, #60]	; (1f840 <net_route_del+0x48>)
   1f804:	461a      	mov	r2, r3
   1f806:	f7ff fef5 	bl	1f5f4 <net_mgmt_event_notify_with_info>
					sizeof(struct net_event_ipv6_route));
#else
	net_mgmt_event_notify(NET_EVENT_IPV6_ROUTE_DEL, route->iface);
#endif

	sys_slist_find_and_remove(&routes, &route->node);
   1f80a:	4620      	mov	r0, r4
   1f80c:	f7ff ff62 	bl	1f6d4 <sys_slist_find_and_remove.constprop.6>

	nbr = net_route_get_nbr(route);
   1f810:	4620      	mov	r0, r4
   1f812:	f7ff ff81 	bl	1f718 <net_route_get_nbr>
	if (!nbr) {
   1f816:	4605      	mov	r5, r0
   1f818:	b178      	cbz	r0, 1f83a <net_route_del+0x42>
   1f81a:	6864      	ldr	r4, [r4, #4]
		return -ENOENT;
	}

	net_route_info("Deleted", route, &route->addr);

	SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route, node) {
   1f81c:	b924      	cbnz	r4, 1f828 <net_route_del+0x30>
	net_nbr_unref(nbr);
   1f81e:	4628      	mov	r0, r5
   1f820:	f7fd fe2e 	bl	1d480 <net_nbr_unref>
		nbr_nexthop_put(nexthop_route->nbr);
	}

	nbr_free(nbr);

	return 0;
   1f824:	2000      	movs	r0, #0
   1f826:	bd38      	pop	{r3, r4, r5, pc}
		if (!nexthop_route->nbr) {
   1f828:	6860      	ldr	r0, [r4, #4]
   1f82a:	b108      	cbz	r0, 1f830 <net_route_del+0x38>
	net_nbr_unref(nbr);
   1f82c:	f7fd fe28 	bl	1d480 <net_nbr_unref>
	return node->next;
   1f830:	6824      	ldr	r4, [r4, #0]
   1f832:	e7f3      	b.n	1f81c <net_route_del+0x24>
		return -EINVAL;
   1f834:	f06f 0015 	mvn.w	r0, #21
   1f838:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOENT;
   1f83a:	f06f 0001 	mvn.w	r0, #1
}
   1f83e:	bd38      	pop	{r3, r4, r5, pc}
   1f840:	f060000c 	.word	0xf060000c

0001f844 <net_route_del_by_nexthop>:

int net_route_del_by_nexthop(struct net_if *iface, struct in6_addr *nexthop)
{
   1f844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i, ret;

	NET_ASSERT(iface);
	NET_ASSERT(nexthop);

	nbr_nexthop = net_ipv6_nbr_lookup(iface, nexthop);
   1f846:	f7fe fb0a 	bl	1de5e <net_ipv6_nbr_lookup>
   1f84a:	2400      	movs	r4, #0
   1f84c:	4607      	mov	r7, r0
	int count = 0, status = 0;
   1f84e:	4626      	mov	r6, r4
   1f850:	4625      	mov	r5, r4
   1f852:	4b0e      	ldr	r3, [pc, #56]	; (1f88c <net_route_del_by_nexthop+0x48>)
   1f854:	4423      	add	r3, r4
   1f856:	68d8      	ldr	r0, [r3, #12]

	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
		struct net_nbr *nbr = get_nbr(i);
		struct net_route_entry *route = net_route_data(nbr);

		if (!route) {
   1f858:	b140      	cbz	r0, 1f86c <net_route_del_by_nexthop+0x28>
   1f85a:	6843      	ldr	r3, [r0, #4]
			continue;
		}

		SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route,
   1f85c:	b133      	cbz	r3, 1f86c <net_route_del_by_nexthop+0x28>
					     node) {
			if (nexthop_route->nbr == nbr_nexthop) {
   1f85e:	685a      	ldr	r2, [r3, #4]
   1f860:	4297      	cmp	r7, r2
   1f862:	d10c      	bne.n	1f87e <net_route_del_by_nexthop+0x3a>
				/* This route contains this nexthop */
				ret = net_route_del(route);
   1f864:	f7ff ffc8 	bl	1f7f8 <net_route_del>
				if (!ret) {
   1f868:	b968      	cbnz	r0, 1f886 <net_route_del_by_nexthop+0x42>
					count++;
   1f86a:	3501      	adds	r5, #1
   1f86c:	3438      	adds	r4, #56	; 0x38
	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
   1f86e:	f5b4 7fe0 	cmp.w	r4, #448	; 0x1c0
   1f872:	d1ee      	bne.n	1f852 <net_route_del_by_nexthop+0xe>
				break;
			}
		}
	}

	if (count) {
   1f874:	b90d      	cbnz	r5, 1f87a <net_route_del_by_nexthop+0x36>
   1f876:	ea06 75e6 	and.w	r5, r6, r6, asr #31
	} else if (status < 0) {
		return status;
	}

	return 0;
}
   1f87a:	4628      	mov	r0, r5
   1f87c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f87e:	681b      	ldr	r3, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route,
   1f880:	2b00      	cmp	r3, #0
   1f882:	d1eb      	bne.n	1f85c <net_route_del_by_nexthop+0x18>
   1f884:	e7f2      	b.n	1f86c <net_route_del_by_nexthop+0x28>
   1f886:	4606      	mov	r6, r0
   1f888:	e7f0      	b.n	1f86c <net_route_del_by_nexthop+0x28>
   1f88a:	bf00      	nop
   1f88c:	2000a580 	.word	0x2000a580

0001f890 <net_route_get_nexthop>:
struct in6_addr *net_route_get_nexthop(struct net_route_entry *route)
{
	struct net_route_nexthop *nexthop_route;
	struct net_ipv6_nbr_data *ipv6_nbr_data;

	if (!route) {
   1f890:	b170      	cbz	r0, 1f8b0 <net_route_get_nexthop+0x20>
   1f892:	6843      	ldr	r3, [r0, #4]
   1f894:	461a      	mov	r2, r3
		return NULL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route, node) {
   1f896:	b153      	cbz	r3, 1f8ae <net_route_get_nexthop+0x1e>
		struct in6_addr *addr;

		NET_ASSERT(nexthop_route->nbr->idx != NET_NBR_LLADDR_UNKNOWN);

		if (nexthop_route->nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
   1f898:	685b      	ldr	r3, [r3, #4]
   1f89a:	7859      	ldrb	r1, [r3, #1]
   1f89c:	29ff      	cmp	r1, #255	; 0xff
   1f89e:	d003      	beq.n	1f8a8 <net_route_get_nexthop+0x18>
   1f8a0:	68d8      	ldr	r0, [r3, #12]
			continue;
		}

		ipv6_nbr_data = net_ipv6_nbr_data(nexthop_route->nbr);
		if (ipv6_nbr_data) {
   1f8a2:	b108      	cbz	r0, 1f8a8 <net_route_get_nexthop+0x18>
			addr = &ipv6_nbr_data->addr;
   1f8a4:	3004      	adds	r0, #4
			NET_ASSERT(addr);

			return addr;
   1f8a6:	4770      	bx	lr
   1f8a8:	6813      	ldr	r3, [r2, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route, node) {
   1f8aa:	2b00      	cmp	r3, #0
   1f8ac:	d1f2      	bne.n	1f894 <net_route_get_nexthop+0x4>
		return NULL;
   1f8ae:	2000      	movs	r0, #0
			NET_ERR("could not get neighbor data from next hop");
		}
	}

	return NULL;
}
   1f8b0:	4770      	bx	lr

0001f8b2 <net_route_get_info>:

bool net_route_get_info(struct net_if *iface,
			struct in6_addr *dst,
			struct net_route_entry **route,
			struct in6_addr **nexthop)
{
   1f8b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f8b4:	4607      	mov	r7, r0
   1f8b6:	460d      	mov	r5, r1
   1f8b8:	4616      	mov	r6, r2
   1f8ba:	461c      	mov	r4, r3
	struct net_if_router *router;

	/* Search in neighbor table first, if not search in routing table. */
	if (net_ipv6_nbr_lookup(iface, dst)) {
   1f8bc:	f7fe facf 	bl	1de5e <net_ipv6_nbr_lookup>
   1f8c0:	b120      	cbz	r0, 1f8cc <net_route_get_info+0x1a>
		/* Found nexthop, no need to look into routing table. */
		*route = NULL;
   1f8c2:	2300      	movs	r3, #0
   1f8c4:	6033      	str	r3, [r6, #0]
		*nexthop = dst;
   1f8c6:	6025      	str	r5, [r4, #0]
			return false;
		}

		*nexthop = &router->address.in6_addr;

		return true;
   1f8c8:	2001      	movs	r0, #1
	}

	return false;
}
   1f8ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	*route = net_route_lookup(iface, dst);
   1f8cc:	4629      	mov	r1, r5
   1f8ce:	4638      	mov	r0, r7
   1f8d0:	f7ff ff38 	bl	1f744 <net_route_lookup>
   1f8d4:	6030      	str	r0, [r6, #0]
	if (*route) {
   1f8d6:	b130      	cbz	r0, 1f8e6 <net_route_get_info+0x34>
		*nexthop = net_route_get_nexthop(*route);
   1f8d8:	f7ff ffda 	bl	1f890 <net_route_get_nexthop>
   1f8dc:	6020      	str	r0, [r4, #0]
		if (!*nexthop) {
   1f8de:	3000      	adds	r0, #0
   1f8e0:	bf18      	it	ne
   1f8e2:	2001      	movne	r0, #1
   1f8e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		router = net_if_ipv6_router_find_default(NULL, dst);
   1f8e6:	4629      	mov	r1, r5
   1f8e8:	f7fb fbba 	bl	1b060 <net_if_ipv6_router_find_default>
		if (!router) {
   1f8ec:	2800      	cmp	r0, #0
   1f8ee:	d0ec      	beq.n	1f8ca <net_route_get_info+0x18>
		*nexthop = &router->address.in6_addr;
   1f8f0:	302c      	adds	r0, #44	; 0x2c
   1f8f2:	6020      	str	r0, [r4, #0]
   1f8f4:	e7e8      	b.n	1f8c8 <net_route_get_info+0x16>

0001f8f6 <net_route_packet>:

int net_route_packet(struct net_pkt *pkt, struct in6_addr *nexthop)
{
   1f8f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f8f8:	4604      	mov	r4, r0
	struct net_linkaddr_storage *lladdr;
	struct net_nbr *nbr;

	nbr = net_ipv6_nbr_lookup(NULL, nexthop);
   1f8fa:	2000      	movs	r0, #0
   1f8fc:	f7fe faaf 	bl	1de5e <net_ipv6_nbr_lookup>
	if (!nbr) {
   1f900:	4606      	mov	r6, r0
   1f902:	2800      	cmp	r0, #0
   1f904:	d033      	beq.n	1f96e <net_route_packet+0x78>
		NET_DBG("Cannot find %s neighbor",
			net_sprint_ipv6_addr(nexthop));
		return -ENOENT;
	}

	lladdr = net_nbr_get_lladdr(nbr->idx);
   1f906:	7840      	ldrb	r0, [r0, #1]
   1f908:	f7fd fe56 	bl	1d5b8 <net_nbr_get_lladdr>
	if (!lladdr) {
   1f90c:	4605      	mov	r5, r0
   1f90e:	2800      	cmp	r0, #0
   1f910:	d030      	beq.n	1f974 <net_route_packet+0x7e>
		NET_DBG("Cannot find %s neighbor link layer address.",
			net_sprint_ipv6_addr(nexthop));
		return -ESRCH;
	}

	if (!net_pkt_ll_src(pkt)->addr) {
   1f912:	6a20      	ldr	r0, [r4, #32]
   1f914:	b910      	cbnz	r0, 1f91c <net_route_packet+0x26>
		NET_DBG("Link layer source address not set");
		return -EINVAL;
   1f916:	f06f 0015 	mvn.w	r0, #21
   1f91a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	/* Sanitycheck: If src and dst ll addresses are going to be same,
	 * then something went wrong in route lookup.
	 */
	if (!memcmp(net_pkt_ll_src(pkt)->addr, lladdr->addr, lladdr->len)) {
   1f91c:	1caf      	adds	r7, r5, #2
   1f91e:	786a      	ldrb	r2, [r5, #1]
   1f920:	4639      	mov	r1, r7
   1f922:	f7e0 ff09 	bl	738 <memcmp>
   1f926:	2800      	cmp	r0, #0
   1f928:	d0f5      	beq.n	1f916 <net_route_packet+0x20>
	pkt->forwarding = forward;
   1f92a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   1f92e:	f043 0304 	orr.w	r3, r3, #4
   1f932:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   1f936:	6963      	ldr	r3, [r4, #20]
	net_pkt_set_forwarding(pkt, true);

	/* Set the destination and source ll address in the packet.
	 * We set the destination address to be the nexthop recipient.
	 */
	net_pkt_ll_src(pkt)->addr = net_pkt_ll_if(pkt)->addr;
   1f938:	691a      	ldr	r2, [r3, #16]
   1f93a:	6222      	str	r2, [r4, #32]
	net_pkt_ll_src(pkt)->type = net_pkt_ll_if(pkt)->type;
   1f93c:	7d5a      	ldrb	r2, [r3, #21]
   1f93e:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
	net_pkt_ll_src(pkt)->len = net_pkt_ll_if(pkt)->len;
   1f942:	7d1b      	ldrb	r3, [r3, #20]
   1f944:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24

	net_pkt_ll_dst(pkt)->addr = lladdr->addr;
   1f948:	62a7      	str	r7, [r4, #40]	; 0x28
	net_pkt_ll_dst(pkt)->type = lladdr->type;
   1f94a:	782b      	ldrb	r3, [r5, #0]
   1f94c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	net_pkt_ll_dst(pkt)->len = lladdr->len;
   1f950:	786b      	ldrb	r3, [r5, #1]
   1f952:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

	net_pkt_set_iface(pkt, nbr->iface);
   1f956:	68b3      	ldr	r3, [r6, #8]
	pkt->iface = iface;
   1f958:	6163      	str	r3, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1f95a:	7d5b      	ldrb	r3, [r3, #21]
   1f95c:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1f960:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d

	return net_send_data(pkt);
   1f964:	4620      	mov	r0, r4
}
   1f966:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return net_send_data(pkt);
   1f96a:	f7fa be27 	b.w	1a5bc <net_send_data>
		return -ENOENT;
   1f96e:	f06f 0001 	mvn.w	r0, #1
   1f972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ESRCH;
   1f974:	f06f 0002 	mvn.w	r0, #2
}
   1f978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001f97a <net_route_init>:

void net_route_init(void)
{
   1f97a:	4770      	bx	lr

0001f97c <net_is_ipv6_addr_unspecified>:
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1f97c:	6802      	ldr	r2, [r0, #0]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1f97e:	b942      	cbnz	r2, 1f992 <net_is_ipv6_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1f980:	6843      	ldr	r3, [r0, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1f982:	b933      	cbnz	r3, 1f992 <net_is_ipv6_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1f984:	6882      	ldr	r2, [r0, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1f986:	b922      	cbnz	r2, 1f992 <net_is_ipv6_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   1f988:	68c0      	ldr	r0, [r0, #12]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1f98a:	fab0 f080 	clz	r0, r0
   1f98e:	0940      	lsrs	r0, r0, #5
   1f990:	4770      	bx	lr
   1f992:	2000      	movs	r0, #0
   1f994:	4770      	bx	lr

0001f996 <check_addr>:
}

static bool check_addr(struct net_pkt *pkt,
		       struct sockaddr *addr,
		       bool is_remote)
{
   1f996:	b538      	push	{r3, r4, r5, lr}
	return pkt->family;
   1f998:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
	if (addr->sa_family != net_pkt_family(pkt)) {
   1f99c:	880c      	ldrh	r4, [r1, #0]
   1f99e:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   1f9a2:	429c      	cmp	r4, r3
   1f9a4:	d117      	bne.n	1f9d6 <check_addr+0x40>
		return false;
	}

#if defined(CONFIG_NET_IPV6)
	if (net_pkt_family(pkt) == AF_INET6 && addr->sa_family == AF_INET6) {
   1f9a6:	2b0a      	cmp	r3, #10
   1f9a8:	d117      	bne.n	1f9da <check_addr+0x44>
   1f9aa:	2c0a      	cmp	r4, #10
   1f9ac:	d115      	bne.n	1f9da <check_addr+0x44>
   1f9ae:	6883      	ldr	r3, [r0, #8]
		struct in6_addr *addr6;

		if (is_remote) {
			addr6 = &NET_IPV6_HDR(pkt)->src;
   1f9b0:	689c      	ldr	r4, [r3, #8]
		if (is_remote) {
   1f9b2:	b172      	cbz	r2, 1f9d2 <check_addr+0x3c>
			addr6 = &NET_IPV6_HDR(pkt)->src;
   1f9b4:	3408      	adds	r4, #8
		} else {
			addr6 = &NET_IPV6_HDR(pkt)->dst;
		}

		if (!net_is_ipv6_addr_unspecified(
			    &net_sin6(addr)->sin6_addr)) {
   1f9b6:	1d0d      	adds	r5, r1, #4
		if (!net_is_ipv6_addr_unspecified(
   1f9b8:	4628      	mov	r0, r5
   1f9ba:	f7ff ffdf 	bl	1f97c <net_is_ipv6_addr_unspecified>
   1f9be:	b968      	cbnz	r0, 1f9dc <check_addr+0x46>
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1f9c0:	2210      	movs	r2, #16
   1f9c2:	4621      	mov	r1, r4
   1f9c4:	4628      	mov	r0, r5
   1f9c6:	f7e0 feb7 	bl	738 <memcmp>
			if (!net_ipv6_addr_cmp(&net_sin6(addr)->sin6_addr,
   1f9ca:	fab0 f080 	clz	r0, r0
   1f9ce:	0940      	lsrs	r0, r0, #5
   1f9d0:	bd38      	pop	{r3, r4, r5, pc}
			addr6 = &NET_IPV6_HDR(pkt)->dst;
   1f9d2:	3418      	adds	r4, #24
   1f9d4:	e7ef      	b.n	1f9b6 <check_addr+0x20>
		return false;
   1f9d6:	2000      	movs	r0, #0
   1f9d8:	bd38      	pop	{r3, r4, r5, pc}
			}
		}
	}
#endif /* CONFIG_NET_IPV4 */

	return true;
   1f9da:	2001      	movs	r0, #1
}
   1f9dc:	bd38      	pop	{r3, r4, r5, pc}
	...

0001f9e0 <net_conn_unregister>:
{
   1f9e0:	b508      	push	{r3, lr}
	if (conn < &conns[0] || conn > &conns[CONFIG_NET_MAX_CONN]) {
   1f9e2:	4b0b      	ldr	r3, [pc, #44]	; (1fa10 <net_conn_unregister+0x30>)
   1f9e4:	4298      	cmp	r0, r3
   1f9e6:	d30c      	bcc.n	1fa02 <net_conn_unregister+0x22>
   1f9e8:	33f0      	adds	r3, #240	; 0xf0
   1f9ea:	4298      	cmp	r0, r3
   1f9ec:	d809      	bhi.n	1fa02 <net_conn_unregister+0x22>
	if (!(conn->flags & NET_CONN_IN_USE)) {
   1f9ee:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
   1f9f2:	07db      	lsls	r3, r3, #31
   1f9f4:	d508      	bpl.n	1fa08 <net_conn_unregister+0x28>
	memset(conn, 0, sizeof(*conn));
   1f9f6:	223c      	movs	r2, #60	; 0x3c
   1f9f8:	2100      	movs	r1, #0
   1f9fa:	f7e0 fef6 	bl	7ea <memset>
	return 0;
   1f9fe:	2000      	movs	r0, #0
   1fa00:	bd08      	pop	{r3, pc}
		return -EINVAL;
   1fa02:	f06f 0015 	mvn.w	r0, #21
   1fa06:	bd08      	pop	{r3, pc}
		return -ENOENT;
   1fa08:	f06f 0001 	mvn.w	r0, #1
}
   1fa0c:	bd08      	pop	{r3, pc}
   1fa0e:	bf00      	nop
   1fa10:	200028c0 	.word	0x200028c0

0001fa14 <net_conn_register>:
{
   1fa14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fa18:	b087      	sub	sp, #28
   1fa1a:	4c6d      	ldr	r4, [pc, #436]	; (1fbd0 <net_conn_register+0x1bc>)
   1fa1c:	9301      	str	r3, [sp, #4]
   1fa1e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   1fa22:	9302      	str	r3, [sp, #8]
   1fa24:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1fa28:	ba5b      	rev16	r3, r3
   1fa2a:	f8ad 300e 	strh.w	r3, [sp, #14]
   1fa2e:	fa1f f983 	uxth.w	r9, r3
   1fa32:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   1fa36:	fa93 fb93 	rev16.w	fp, r3
   1fa3a:	fa1f f38b 	uxth.w	r3, fp
   1fa3e:	9304      	str	r3, [sp, #16]
					    &net_sin6(remote_addr)->sin6_addr,
   1fa40:	1d0b      	adds	r3, r1, #4
{
   1fa42:	4682      	mov	sl, r0
   1fa44:	460e      	mov	r6, r1
   1fa46:	4617      	mov	r7, r2
   1fa48:	f104 08f0 	add.w	r8, r4, #240	; 0xf0
					    &net_sin6(local_addr)->sin6_addr,
   1fa4c:	1d15      	adds	r5, r2, #4
					    &net_sin6(remote_addr)->sin6_addr,
   1fa4e:	9305      	str	r3, [sp, #20]
		if (!(conns[i].flags & NET_CONN_IN_USE)) {
   1fa50:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
   1fa54:	07d1      	lsls	r1, r2, #31
   1fa56:	d413      	bmi.n	1fa80 <net_conn_register+0x6c>
   1fa58:	343c      	adds	r4, #60	; 0x3c
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   1fa5a:	45a0      	cmp	r8, r4
   1fa5c:	d1f8      	bne.n	1fa50 <net_conn_register+0x3c>
   1fa5e:	4a5d      	ldr	r2, [pc, #372]	; (1fbd4 <net_conn_register+0x1c0>)
   1fa60:	2400      	movs	r4, #0
   1fa62:	233c      	movs	r3, #60	; 0x3c
   1fa64:	fb03 f904 	mul.w	r9, r3, r4
   1fa68:	eb02 0809 	add.w	r8, r2, r9
		if (conns[i].flags & NET_CONN_IN_USE) {
   1fa6c:	f898 1039 	ldrb.w	r1, [r8, #57]	; 0x39
   1fa70:	07c9      	lsls	r1, r1, #31
   1fa72:	d542      	bpl.n	1fafa <net_conn_register+0xe6>
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   1fa74:	3401      	adds	r4, #1
   1fa76:	2c04      	cmp	r4, #4
   1fa78:	d1f4      	bne.n	1fa64 <net_conn_register+0x50>
	return -ENOENT;
   1fa7a:	f06f 0001 	mvn.w	r0, #1
   1fa7e:	e039      	b.n	1faf4 <net_conn_register+0xe0>
		if (conns[i].proto != proto) {
   1fa80:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
   1fa84:	4551      	cmp	r1, sl
   1fa86:	d1e7      	bne.n	1fa58 <net_conn_register+0x44>
   1fa88:	f002 0202 	and.w	r2, r2, #2
		if (remote_addr) {
   1fa8c:	b1ae      	cbz	r6, 1faba <net_conn_register+0xa6>
			if (!(conns[i].flags & NET_CONN_REMOTE_ADDR_SET)) {
   1fa8e:	2a00      	cmp	r2, #0
   1fa90:	d0e2      	beq.n	1fa58 <net_conn_register+0x44>
			if (remote_addr->sa_family == AF_INET6 &&
   1fa92:	8832      	ldrh	r2, [r6, #0]
   1fa94:	2a0a      	cmp	r2, #10
   1fa96:	d1df      	bne.n	1fa58 <net_conn_register+0x44>
   1fa98:	f834 2c04 	ldrh.w	r2, [r4, #-4]
   1fa9c:	2a0a      	cmp	r2, #10
   1fa9e:	d1db      	bne.n	1fa58 <net_conn_register+0x44>
   1faa0:	2210      	movs	r2, #16
   1faa2:	4621      	mov	r1, r4
   1faa4:	9805      	ldr	r0, [sp, #20]
   1faa6:	f7e0 fe47 	bl	738 <memcmp>
				if (!net_ipv6_addr_cmp(
   1faaa:	2800      	cmp	r0, #0
   1faac:	d1d4      	bne.n	1fa58 <net_conn_register+0x44>
   1faae:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
		if (local_addr) {
   1fab2:	b92f      	cbnz	r7, 1fac0 <net_conn_register+0xac>
			if (conns[i].flags & NET_CONN_LOCAL_ADDR_SET) {
   1fab4:	0750      	lsls	r0, r2, #29
   1fab6:	d4cf      	bmi.n	1fa58 <net_conn_register+0x44>
   1fab8:	e012      	b.n	1fae0 <net_conn_register+0xcc>
			if (conns[i].flags & NET_CONN_REMOTE_ADDR_SET) {
   1faba:	2a00      	cmp	r2, #0
   1fabc:	d1cc      	bne.n	1fa58 <net_conn_register+0x44>
   1fabe:	e7f6      	b.n	1faae <net_conn_register+0x9a>
			if (!(conns[i].flags & NET_CONN_LOCAL_ADDR_SET)) {
   1fac0:	0753      	lsls	r3, r2, #29
   1fac2:	d5c9      	bpl.n	1fa58 <net_conn_register+0x44>
			if (local_addr->sa_family == AF_INET6 &&
   1fac4:	883a      	ldrh	r2, [r7, #0]
   1fac6:	2a0a      	cmp	r2, #10
   1fac8:	d1c6      	bne.n	1fa58 <net_conn_register+0x44>
   1faca:	8aa2      	ldrh	r2, [r4, #20]
   1facc:	2a0a      	cmp	r2, #10
   1face:	d1c3      	bne.n	1fa58 <net_conn_register+0x44>
   1fad0:	2210      	movs	r2, #16
   1fad2:	f104 0118 	add.w	r1, r4, #24
   1fad6:	4628      	mov	r0, r5
   1fad8:	f7e0 fe2e 	bl	738 <memcmp>
				if (!net_ipv6_addr_cmp(
   1fadc:	2800      	cmp	r0, #0
   1fade:	d1bb      	bne.n	1fa58 <net_conn_register+0x44>
		if (net_sin(&conns[i].remote_addr)->sin_port !=
   1fae0:	f834 2c02 	ldrh.w	r2, [r4, #-2]
   1fae4:	454a      	cmp	r2, r9
   1fae6:	d1b7      	bne.n	1fa58 <net_conn_register+0x44>
		if (net_sin(&conns[i].local_addr)->sin_port !=
   1fae8:	8ae2      	ldrh	r2, [r4, #22]
   1faea:	9b04      	ldr	r3, [sp, #16]
   1faec:	429a      	cmp	r2, r3
   1faee:	d1b3      	bne.n	1fa58 <net_conn_register+0x44>
		return -EALREADY;
   1faf0:	f06f 0044 	mvn.w	r0, #68	; 0x44
}
   1faf4:	b007      	add	sp, #28
   1faf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (remote_addr) {
   1fafa:	2e00      	cmp	r6, #0
   1fafc:	d061      	beq.n	1fbc2 <net_conn_register+0x1ae>
			if (remote_addr->sa_family == AF_INET6) {
   1fafe:	8833      	ldrh	r3, [r6, #0]
   1fb00:	2b0a      	cmp	r3, #10
   1fb02:	d002      	beq.n	1fb0a <net_conn_register+0xf6>
				return -EINVAL;
   1fb04:	f06f 0015 	mvn.w	r0, #21
   1fb08:	e7f4      	b.n	1faf4 <net_conn_register+0xe0>
				memcpy(&conns[i].remote_addr, remote_addr,
   1fb0a:	2218      	movs	r2, #24
   1fb0c:	4631      	mov	r1, r6
   1fb0e:	4640      	mov	r0, r8
   1fb10:	f7e0 fe3f 	bl	792 <memcpy>
				if (net_is_ipv6_addr_unspecified(
   1fb14:	1d30      	adds	r0, r6, #4
   1fb16:	f7ff ff31 	bl	1f97c <net_is_ipv6_addr_unspecified>
			conns[i].flags |= NET_CONN_REMOTE_ADDR_SET;
   1fb1a:	f898 3039 	ldrb.w	r3, [r8, #57]	; 0x39
					rank |= NET_RANK_REMOTE_UNSPEC_ADDR;
   1fb1e:	2800      	cmp	r0, #0
			conns[i].flags |= NET_CONN_REMOTE_ADDR_SET;
   1fb20:	f043 0302 	orr.w	r3, r3, #2
					rank |= NET_RANK_REMOTE_UNSPEC_ADDR;
   1fb24:	bf0c      	ite	eq
   1fb26:	2520      	moveq	r5, #32
   1fb28:	2508      	movne	r5, #8
			conns[i].flags |= NET_CONN_REMOTE_ADDR_SET;
   1fb2a:	f888 3039 	strb.w	r3, [r8, #57]	; 0x39
		if (local_addr) {
   1fb2e:	b30f      	cbz	r7, 1fb74 <net_conn_register+0x160>
			if (local_addr->sa_family == AF_INET6) {
   1fb30:	883b      	ldrh	r3, [r7, #0]
   1fb32:	2b0a      	cmp	r3, #10
   1fb34:	d1e6      	bne.n	1fb04 <net_conn_register+0xf0>
				memcpy(&conns[i].local_addr, local_addr,
   1fb36:	4b27      	ldr	r3, [pc, #156]	; (1fbd4 <net_conn_register+0x1c0>)
   1fb38:	9304      	str	r3, [sp, #16]
   1fb3a:	f109 0018 	add.w	r0, r9, #24
   1fb3e:	4418      	add	r0, r3
   1fb40:	2218      	movs	r2, #24
   1fb42:	4639      	mov	r1, r7
   1fb44:	f7e0 fe25 	bl	792 <memcpy>
				if (net_is_ipv6_addr_unspecified(
   1fb48:	1d38      	adds	r0, r7, #4
   1fb4a:	f7ff ff17 	bl	1f97c <net_is_ipv6_addr_unspecified>
   1fb4e:	9b04      	ldr	r3, [sp, #16]
   1fb50:	2800      	cmp	r0, #0
   1fb52:	d038      	beq.n	1fbc6 <net_conn_register+0x1b2>
					rank |= NET_RANK_LOCAL_UNSPEC_ADDR;
   1fb54:	f045 0504 	orr.w	r5, r5, #4
			conns[i].flags |= NET_CONN_LOCAL_ADDR_SET;
   1fb58:	223c      	movs	r2, #60	; 0x3c
   1fb5a:	fb02 3304 	mla	r3, r2, r4, r3
   1fb5e:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
   1fb62:	f042 0204 	orr.w	r2, r2, #4
   1fb66:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		if (remote_addr && local_addr) {
   1fb6a:	b11e      	cbz	r6, 1fb74 <net_conn_register+0x160>
			if (remote_addr->sa_family != local_addr->sa_family) {
   1fb6c:	8832      	ldrh	r2, [r6, #0]
   1fb6e:	883b      	ldrh	r3, [r7, #0]
   1fb70:	429a      	cmp	r2, r3
   1fb72:	d1c7      	bne.n	1fb04 <net_conn_register+0xf0>
		if (remote_port) {
   1fb74:	9b01      	ldr	r3, [sp, #4]
   1fb76:	b12b      	cbz	r3, 1fb84 <net_conn_register+0x170>
			net_sin(&conns[i].remote_addr)->sin_port =
   1fb78:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1fb7c:	f8a8 3002 	strh.w	r3, [r8, #2]
			rank |= NET_RANK_REMOTE_PORT;
   1fb80:	f045 0502 	orr.w	r5, r5, #2
		if (local_port) {
   1fb84:	9a02      	ldr	r2, [sp, #8]
   1fb86:	4b13      	ldr	r3, [pc, #76]	; (1fbd4 <net_conn_register+0x1c0>)
   1fb88:	b122      	cbz	r2, 1fb94 <net_conn_register+0x180>
			net_sin(&conns[i].local_addr)->sin_port =
   1fb8a:	4499      	add	r9, r3
			rank |= NET_RANK_LOCAL_PORT;
   1fb8c:	f045 0501 	orr.w	r5, r5, #1
			net_sin(&conns[i].local_addr)->sin_port =
   1fb90:	f8a9 b01a 	strh.w	fp, [r9, #26]
		conns[i].flags |= NET_CONN_IN_USE;
   1fb94:	223c      	movs	r2, #60	; 0x3c
   1fb96:	fb02 3404 	mla	r4, r2, r4, r3
   1fb9a:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
		conns[i].rank = rank;
   1fb9e:	f884 503a 	strb.w	r5, [r4, #58]	; 0x3a
		conns[i].flags |= NET_CONN_IN_USE;
   1fba2:	f043 0301 	orr.w	r3, r3, #1
   1fba6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		conns[i].cb = cb;
   1fbaa:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1fbac:	6323      	str	r3, [r4, #48]	; 0x30
		conns[i].user_data = user_data;
   1fbae:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1fbb0:	6363      	str	r3, [r4, #52]	; 0x34
		if (handle) {
   1fbb2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
		conns[i].proto = proto;
   1fbb4:	f884 a038 	strb.w	sl, [r4, #56]	; 0x38
		if (handle) {
   1fbb8:	b143      	cbz	r3, 1fbcc <net_conn_register+0x1b8>
			*handle = (struct net_conn_handle *)&conns[i];
   1fbba:	f8c3 8000 	str.w	r8, [r3]
		return 0;
   1fbbe:	2000      	movs	r0, #0
   1fbc0:	e798      	b.n	1faf4 <net_conn_register+0xe0>
	u8_t rank = 0;
   1fbc2:	4635      	mov	r5, r6
   1fbc4:	e7b3      	b.n	1fb2e <net_conn_register+0x11a>
					rank |= NET_RANK_LOCAL_SPEC_ADDR;
   1fbc6:	f045 0510 	orr.w	r5, r5, #16
   1fbca:	e7c5      	b.n	1fb58 <net_conn_register+0x144>
		return 0;
   1fbcc:	9813      	ldr	r0, [sp, #76]	; 0x4c
   1fbce:	e791      	b.n	1faf4 <net_conn_register+0xe0>
   1fbd0:	200028c4 	.word	0x200028c4
   1fbd4:	200028c0 	.word	0x200028c0

0001fbd8 <net_conn_input>:
#endif /* CONFIG_NET_IPV4 */
	}
}

enum net_verdict net_conn_input(enum net_ip_protocol proto, struct net_pkt *pkt)
{
   1fbd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* This is only used for getting source and destination ports.
	 * Because both TCP and UDP header have these in the same
	 * location, we can check them both using the UDP struct.
	 */
	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   1fbdc:	2811      	cmp	r0, #17
{
   1fbde:	b089      	sub	sp, #36	; 0x24
   1fbe0:	4680      	mov	r8, r0
   1fbe2:	460c      	mov	r4, r1
	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   1fbe4:	d13b      	bne.n	1fc5e <net_conn_input+0x86>
		struct net_udp_hdr hdr, *udp_hdr;

		ARG_UNUSED(hdr);

		udp_hdr = net_udp_get_hdr(pkt, &hdr);
   1fbe6:	a903      	add	r1, sp, #12
   1fbe8:	4620      	mov	r0, r4
   1fbea:	f000 fffd 	bl	20be8 <net_udp_get_hdr>
		if (!udp_hdr) {
   1fbee:	b908      	cbnz	r0, 1fbf4 <net_conn_input+0x1c>
	}

drop:
	net_stats_update_per_proto_drop(proto);

	return NET_DROP;
   1fbf0:	2002      	movs	r0, #2
   1fbf2:	e068      	b.n	1fcc6 <net_conn_input+0xee>
		src_port = udp_hdr->src_port;
   1fbf4:	8803      	ldrh	r3, [r0, #0]
   1fbf6:	9301      	str	r3, [sp, #4]
		dst_port = udp_hdr->dst_port;
   1fbf8:	f8b0 b002 	ldrh.w	fp, [r0, #2]
		chksum = udp_hdr->chksum;
   1fbfc:	f8b0 9006 	ldrh.w	r9, [r0, #6]
   1fc00:	4d46      	ldr	r5, [pc, #280]	; (1fd1c <net_conn_input+0x144>)
	s16_t best_rank = -1;
   1fc02:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
	int i, best_match = -1;
   1fc06:	4657      	mov	r7, sl
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   1fc08:	2600      	movs	r6, #0
		if (!(conns[i].flags & NET_CONN_IN_USE)) {
   1fc0a:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
   1fc0e:	07d3      	lsls	r3, r2, #31
   1fc10:	d53a      	bpl.n	1fc88 <net_conn_input+0xb0>
		if (conns[i].proto != proto) {
   1fc12:	f895 1020 	ldrb.w	r1, [r5, #32]
   1fc16:	4541      	cmp	r1, r8
   1fc18:	d136      	bne.n	1fc88 <net_conn_input+0xb0>
		if (net_sin(&conns[i].remote_addr)->sin_port) {
   1fc1a:	f835 0c16 	ldrh.w	r0, [r5, #-22]
   1fc1e:	f1a5 0118 	sub.w	r1, r5, #24
   1fc22:	b110      	cbz	r0, 1fc2a <net_conn_input+0x52>
			if (net_sin(&conns[i].remote_addr)->sin_port !=
   1fc24:	9b01      	ldr	r3, [sp, #4]
   1fc26:	4283      	cmp	r3, r0
   1fc28:	d12e      	bne.n	1fc88 <net_conn_input+0xb0>
		if (net_sin(&conns[i].local_addr)->sin_port) {
   1fc2a:	8868      	ldrh	r0, [r5, #2]
   1fc2c:	b108      	cbz	r0, 1fc32 <net_conn_input+0x5a>
			if (net_sin(&conns[i].local_addr)->sin_port !=
   1fc2e:	4583      	cmp	fp, r0
   1fc30:	d12a      	bne.n	1fc88 <net_conn_input+0xb0>
		if (conns[i].flags & NET_CONN_REMOTE_ADDR_SET) {
   1fc32:	0790      	lsls	r0, r2, #30
   1fc34:	d422      	bmi.n	1fc7c <net_conn_input+0xa4>
		if (conns[i].flags & NET_CONN_LOCAL_ADDR_SET) {
   1fc36:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
   1fc3a:	0751      	lsls	r1, r2, #29
   1fc3c:	d505      	bpl.n	1fc4a <net_conn_input+0x72>
			if (!check_addr(pkt, &conns[i].local_addr, false)) {
   1fc3e:	2200      	movs	r2, #0
   1fc40:	4629      	mov	r1, r5
   1fc42:	4620      	mov	r0, r4
   1fc44:	f7ff fea7 	bl	1f996 <check_addr>
   1fc48:	b1f0      	cbz	r0, 1fc88 <net_conn_input+0xb0>
		if (best_match >= 0 &&
   1fc4a:	1c7a      	adds	r2, r7, #1
   1fc4c:	d13e      	bne.n	1fccc <net_conn_input+0xf4>
		if (best_rank < conns[i].rank) {
   1fc4e:	f895 2022 	ldrb.w	r2, [r5, #34]	; 0x22
   1fc52:	4592      	cmp	sl, r2
			best_rank = conns[i].rank;
   1fc54:	bfbc      	itt	lt
   1fc56:	fa0f fa82 	sxthlt.w	sl, r2
   1fc5a:	4637      	movlt	r7, r6
   1fc5c:	e014      	b.n	1fc88 <net_conn_input+0xb0>
	} else if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
   1fc5e:	2806      	cmp	r0, #6
   1fc60:	d1c6      	bne.n	1fbf0 <net_conn_input+0x18>
		tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   1fc62:	a903      	add	r1, sp, #12
   1fc64:	4620      	mov	r0, r4
   1fc66:	f000 fb79 	bl	2035c <net_tcp_get_hdr>
		if (!tcp_hdr) {
   1fc6a:	2800      	cmp	r0, #0
   1fc6c:	d0c0      	beq.n	1fbf0 <net_conn_input+0x18>
		src_port = tcp_hdr->src_port;
   1fc6e:	8803      	ldrh	r3, [r0, #0]
   1fc70:	9301      	str	r3, [sp, #4]
		dst_port = tcp_hdr->dst_port;
   1fc72:	f8b0 b002 	ldrh.w	fp, [r0, #2]
		chksum = tcp_hdr->chksum;
   1fc76:	f8b0 9010 	ldrh.w	r9, [r0, #16]
   1fc7a:	e7c1      	b.n	1fc00 <net_conn_input+0x28>
			if (!check_addr(pkt, &conns[i].remote_addr, true)) {
   1fc7c:	2201      	movs	r2, #1
   1fc7e:	4620      	mov	r0, r4
   1fc80:	f7ff fe89 	bl	1f996 <check_addr>
   1fc84:	2800      	cmp	r0, #0
   1fc86:	d1d6      	bne.n	1fc36 <net_conn_input+0x5e>
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   1fc88:	3601      	adds	r6, #1
   1fc8a:	2e04      	cmp	r6, #4
   1fc8c:	f105 053c 	add.w	r5, r5, #60	; 0x3c
   1fc90:	d1bb      	bne.n	1fc0a <net_conn_input+0x32>
	if (best_match >= 0) {
   1fc92:	1c7b      	adds	r3, r7, #1
   1fc94:	d02e      	beq.n	1fcf4 <net_conn_input+0x11c>
		if (IS_ENABLED(CONFIG_NET_UDP_CHECKSUM) &&
   1fc96:	f1b8 0f11 	cmp.w	r8, #17
   1fc9a:	d11f      	bne.n	1fcdc <net_conn_input+0x104>
			net_udp_set_chksum(pkt, pkt->frags);
   1fc9c:	68a1      	ldr	r1, [r4, #8]
   1fc9e:	4620      	mov	r0, r4
   1fca0:	f000 ff3b 	bl	20b1a <net_udp_set_chksum>
			chksum_calc = net_udp_get_chksum(pkt, pkt->frags);
   1fca4:	68a1      	ldr	r1, [r4, #8]
   1fca6:	4620      	mov	r0, r4
   1fca8:	f000 ff7f 	bl	20baa <net_udp_get_chksum>
			if (chksum != chksum_calc) {
   1fcac:	4581      	cmp	r9, r0
   1fcae:	d19f      	bne.n	1fbf0 <net_conn_input+0x18>
		if (conns[best_match].cb(&conns[best_match], pkt,
   1fcb0:	4b1b      	ldr	r3, [pc, #108]	; (1fd20 <net_conn_input+0x148>)
   1fcb2:	203c      	movs	r0, #60	; 0x3c
   1fcb4:	fb00 3007 	mla	r0, r0, r7, r3
   1fcb8:	4621      	mov	r1, r4
   1fcba:	6b03      	ldr	r3, [r0, #48]	; 0x30
   1fcbc:	6b42      	ldr	r2, [r0, #52]	; 0x34
   1fcbe:	4798      	blx	r3
   1fcc0:	2802      	cmp	r0, #2
   1fcc2:	d095      	beq.n	1fbf0 <net_conn_input+0x18>
		return NET_OK;
   1fcc4:	2000      	movs	r0, #0
}
   1fcc6:	b009      	add	sp, #36	; 0x24
   1fcc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    net_sin(&conns[best_match].remote_addr)->sin_port) {
   1fccc:	4b14      	ldr	r3, [pc, #80]	; (1fd20 <net_conn_input+0x148>)
   1fcce:	223c      	movs	r2, #60	; 0x3c
   1fcd0:	fb02 3207 	mla	r2, r2, r7, r3
		if (best_match >= 0 &&
   1fcd4:	8852      	ldrh	r2, [r2, #2]
   1fcd6:	2a00      	cmp	r2, #0
   1fcd8:	d1d6      	bne.n	1fc88 <net_conn_input+0xb0>
   1fcda:	e7b8      	b.n	1fc4e <net_conn_input+0x76>
		} else if (IS_ENABLED(CONFIG_NET_TCP_CHECKSUM) &&
   1fcdc:	f1b8 0f06 	cmp.w	r8, #6
   1fce0:	d1e6      	bne.n	1fcb0 <net_conn_input+0xd8>
			net_tcp_set_chksum(pkt, pkt->frags);
   1fce2:	68a1      	ldr	r1, [r4, #8]
   1fce4:	4620      	mov	r0, r4
   1fce6:	f000 fcfc 	bl	206e2 <net_tcp_set_chksum>
			chksum_calc = net_tcp_get_chksum(pkt, pkt->frags);
   1fcea:	68a1      	ldr	r1, [r4, #8]
   1fcec:	4620      	mov	r0, r4
   1fcee:	f000 fcd9 	bl	206a4 <net_tcp_get_chksum>
   1fcf2:	e7db      	b.n	1fcac <net_conn_input+0xd4>
   1fcf4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
	if (net_pkt_family(pkt) == AF_INET6 &&
   1fcf8:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   1fcfc:	2b0a      	cmp	r3, #10
   1fcfe:	f47f af77 	bne.w	1fbf0 <net_conn_input+0x18>
	return pkt->frags->data;
   1fd02:	68a3      	ldr	r3, [r4, #8]
   1fd04:	689b      	ldr	r3, [r3, #8]
   1fd06:	7e1b      	ldrb	r3, [r3, #24]
   1fd08:	2bff      	cmp	r3, #255	; 0xff
   1fd0a:	f43f af71 	beq.w	1fbf0 <net_conn_input+0x18>
		net_icmpv6_send_error(pkt, NET_ICMPV6_DST_UNREACH,
   1fd0e:	2300      	movs	r3, #0
   1fd10:	4632      	mov	r2, r6
   1fd12:	2101      	movs	r1, #1
   1fd14:	4620      	mov	r0, r4
   1fd16:	f7fd fa39 	bl	1d18c <net_icmpv6_send_error>
   1fd1a:	e769      	b.n	1fbf0 <net_conn_input+0x18>
   1fd1c:	200028d8 	.word	0x200028d8
   1fd20:	200028c0 	.word	0x200028c0

0001fd24 <net_conn_init>:
		cb(&conns[i], user_data);
	}
}

void net_conn_init(void)
{
   1fd24:	4770      	bx	lr

0001fd26 <sys_get_be32>:
	return ((u16_t)src[0] << 8) | src[1];
   1fd26:	7803      	ldrb	r3, [r0, #0]
   1fd28:	7842      	ldrb	r2, [r0, #1]
   1fd2a:	7881      	ldrb	r1, [r0, #2]
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   1fd2c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	return ((u16_t)src[0] << 8) | src[1];
   1fd30:	78c3      	ldrb	r3, [r0, #3]
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   1fd32:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
}
   1fd36:	ea43 4002 	orr.w	r0, r3, r2, lsl #16
   1fd3a:	4770      	bx	lr

0001fd3c <net_tcp_header_fits>:
{
   1fd3c:	b510      	push	{r4, lr}
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   1fd3e:	2214      	movs	r2, #20
{
   1fd40:	460c      	mov	r4, r1
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   1fd42:	f7fc f9db 	bl	1c0fc <net_header_fits>
   1fd46:	2800      	cmp	r0, #0
}
   1fd48:	bf14      	ite	ne
   1fd4a:	4620      	movne	r0, r4
   1fd4c:	2000      	moveq	r0, #0
   1fd4e:	bd10      	pop	{r4, pc}

0001fd50 <prepare_segment.isra.12>:
	}

	return 0;
}

static int prepare_segment(struct net_tcp *tcp,
   1fd50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fd54:	4605      	mov	r5, r0
   1fd56:	b085      	sub	sp, #20
   1fd58:	460f      	mov	r7, r1
   1fd5a:	469b      	mov	fp, r3
			   struct tcp_segment *segment,
			   struct net_pkt *pkt,
			   struct net_pkt **out_pkt)
{
	struct net_buf *header, *tail = NULL;
	struct net_context *context = tcp->context;
   1fd5c:	f8d0 a000 	ldr.w	sl, [r0]
	u8_t optlen = 0;
	int status;

	NET_ASSERT(context);

	if (pkt) {
   1fd60:	4614      	mov	r4, r2
   1fd62:	b362      	cbz	r2, 1fdbe <prepare_segment.isra.12+0x6e>
		 * net_pkt at the head (so that net_context_send can find
		 * the context), and the data after.  Rejigger so we
		 * can insert a TCP header cleanly
		 */
		tail = pkt->frags;
		pkt->frags = NULL;
   1fd64:	2300      	movs	r3, #0
		tail = pkt->frags;
   1fd66:	f8d2 9008 	ldr.w	r9, [r2, #8]
		pkt->frags = NULL;
   1fd6a:	6093      	str	r3, [r2, #8]
		pkt_allocated = false;
   1fd6c:	4698      	mov	r8, r3
	return pkt->family;
   1fd6e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
								sin_port;
		NET_IPV4_HDR(pkt)->proto = IPPROTO_TCP;
	} else
#endif
#if defined(CONFIG_NET_IPV6)
	if (net_pkt_family(pkt) == AF_INET6) {
   1fd72:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   1fd76:	2b0a      	cmp	r3, #10
   1fd78:	d12e      	bne.n	1fdd8 <prepare_segment.isra.12+0x88>
		net_ipv6_create(tcp->context, pkt,
				net_sin6_ptr(segment->src_addr)->sin6_addr,
				&(net_sin6(segment->dst_addr)->sin6_addr));
   1fd7a:	697b      	ldr	r3, [r7, #20]
				net_sin6_ptr(segment->src_addr)->sin6_addr,
   1fd7c:	693a      	ldr	r2, [r7, #16]
		net_ipv6_create(tcp->context, pkt,
   1fd7e:	6828      	ldr	r0, [r5, #0]
   1fd80:	6852      	ldr	r2, [r2, #4]
   1fd82:	3304      	adds	r3, #4
   1fd84:	4621      	mov	r1, r4
   1fd86:	f7fd fe81 	bl	1da8c <net_ipv6_create>
		dst_port = net_sin6(segment->dst_addr)->sin6_port;
   1fd8a:	697b      	ldr	r3, [r7, #20]
   1fd8c:	885b      	ldrh	r3, [r3, #2]
   1fd8e:	9301      	str	r3, [sp, #4]
		src_port = ((struct sockaddr_in6_ptr *)&context->local)->
   1fd90:	f8ba 300a 	ldrh.w	r3, [sl, #10]
   1fd94:	9302      	str	r3, [sp, #8]
	return pkt->frags->data;
   1fd96:	68a3      	ldr	r3, [r4, #8]
								sin6_port;
		NET_IPV6_HDR(pkt)->nexthdr = IPPROTO_TCP;
   1fd98:	689b      	ldr	r3, [r3, #8]
   1fd9a:	2206      	movs	r2, #6
   1fd9c:	719a      	strb	r2, [r3, #6]
		}

		return -EINVAL;
	}

	header = net_pkt_get_data(context, ALLOC_TIMEOUT);
   1fd9e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   1fda2:	4650      	mov	r0, sl
   1fda4:	f7fb fd40 	bl	1b828 <net_pkt_get_data>
	if (!header) {
   1fda8:	4605      	mov	r5, r0
   1fdaa:	bb38      	cbnz	r0, 1fdfc <prepare_segment.isra.12+0xac>
		NET_WARN("[%p] Unable to alloc TCP header", tcp);
		if (pkt_allocated) {
   1fdac:	f1b8 0f00 	cmp.w	r8, #0
   1fdb0:	d021      	beq.n	1fdf6 <prepare_segment.isra.12+0xa6>
			net_pkt_unref(pkt);
   1fdb2:	4620      	mov	r0, r4
   1fdb4:	f7fb fd6b 	bl	1b88e <net_pkt_unref>
			return -ENOMEM;
   1fdb8:	f06f 050b 	mvn.w	r5, #11
   1fdbc:	e014      	b.n	1fde8 <prepare_segment.isra.12+0x98>
		pkt = net_pkt_get_tx(context, ALLOC_TIMEOUT);
   1fdbe:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   1fdc2:	4650      	mov	r0, sl
   1fdc4:	f7fb fd1e 	bl	1b804 <net_pkt_get_tx>
		if (!pkt) {
   1fdc8:	4604      	mov	r4, r0
   1fdca:	2800      	cmp	r0, #0
   1fdcc:	d0f4      	beq.n	1fdb8 <prepare_segment.isra.12+0x68>
		pkt_allocated = true;
   1fdce:	f04f 0801 	mov.w	r8, #1
	struct net_buf *header, *tail = NULL;
   1fdd2:	f04f 0900 	mov.w	r9, #0
   1fdd6:	e7ca      	b.n	1fd6e <prepare_segment.isra.12+0x1e>
		if (pkt_allocated) {
   1fdd8:	f1b8 0f00 	cmp.w	r8, #0
   1fddc:	d008      	beq.n	1fdf0 <prepare_segment.isra.12+0xa0>
			net_pkt_unref(pkt);
   1fdde:	4620      	mov	r0, r4
   1fde0:	f7fb fd55 	bl	1b88e <net_pkt_unref>
		return -EINVAL;
   1fde4:	f06f 0515 	mvn.w	r5, #21
	net_tcp_trace(pkt, tcp);

	*out_pkt = pkt;

	return 0;
}
   1fde8:	4628      	mov	r0, r5
   1fdea:	b005      	add	sp, #20
   1fdec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			pkt->frags = tail;
   1fdf0:	f8c4 9008 	str.w	r9, [r4, #8]
   1fdf4:	e7f6      	b.n	1fde4 <prepare_segment.isra.12+0x94>
			pkt->frags = tail;
   1fdf6:	f8c4 9008 	str.w	r9, [r4, #8]
   1fdfa:	e7dd      	b.n	1fdb8 <prepare_segment.isra.12+0x68>
	net_pkt_frag_add(pkt, header);
   1fdfc:	4601      	mov	r1, r0
   1fdfe:	4620      	mov	r0, r4
   1fe00:	f7fb fd6c 	bl	1b8dc <net_pkt_frag_add>
	tcp_hdr = (struct net_tcp_hdr *)net_buf_add(header, NET_TCPH_LEN);
   1fe04:	f105 0208 	add.w	r2, r5, #8
   1fe08:	2114      	movs	r1, #20
   1fe0a:	4610      	mov	r0, r2
   1fe0c:	9203      	str	r2, [sp, #12]
   1fe0e:	f7f9 facd 	bl	193ac <net_buf_simple_add>
	if (segment->options && segment->optlen) {
   1fe12:	68fb      	ldr	r3, [r7, #12]
	tcp_hdr = (struct net_tcp_hdr *)net_buf_add(header, NET_TCPH_LEN);
   1fe14:	4605      	mov	r5, r0
	if (segment->options && segment->optlen) {
   1fe16:	2b00      	cmp	r3, #0
   1fe18:	d050      	beq.n	1febc <prepare_segment.isra.12+0x16c>
   1fe1a:	7afe      	ldrb	r6, [r7, #11]
   1fe1c:	9a03      	ldr	r2, [sp, #12]
   1fe1e:	b17e      	cbz	r6, 1fe40 <prepare_segment.isra.12+0xf0>
	memcpy(net_buf_add(header, len), data, len);
   1fe20:	4631      	mov	r1, r6
   1fe22:	4610      	mov	r0, r2
   1fe24:	9303      	str	r3, [sp, #12]
   1fe26:	f7f9 fac1 	bl	193ac <net_buf_simple_add>
   1fe2a:	9b03      	ldr	r3, [sp, #12]
   1fe2c:	4632      	mov	r2, r6
   1fe2e:	4619      	mov	r1, r3
   1fe30:	f7e0 fcaf 	bl	792 <memcpy>
	if ((len & 0x3u) != 0u) {
   1fe34:	07b3      	lsls	r3, r6, #30
   1fe36:	d003      	beq.n	1fe40 <prepare_segment.isra.12+0xf0>
		optlen = (len & 0xfffCu) + 4u;
   1fe38:	f026 0603 	bic.w	r6, r6, #3
   1fe3c:	3604      	adds	r6, #4
   1fe3e:	b2f6      	uxtb	r6, r6
	tcp_hdr->offset = (NET_TCPH_LEN + optlen) << 2;
   1fe40:	3614      	adds	r6, #20
	tcp_hdr->src_port = src_port;
   1fe42:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   1fe46:	802b      	strh	r3, [r5, #0]
	tcp_hdr->offset = (NET_TCPH_LEN + optlen) << 2;
   1fe48:	00b6      	lsls	r6, r6, #2
   1fe4a:	732e      	strb	r6, [r5, #12]
	tcp_hdr->dst_port = dst_port;
   1fe4c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1fe50:	806b      	strh	r3, [r5, #2]
	sys_put_be32(segment->seq, tcp_hdr->seq);
   1fe52:	683b      	ldr	r3, [r7, #0]
	dst[1] = val;
   1fe54:	71eb      	strb	r3, [r5, #7]
	sys_put_be16(val >> 16, dst);
   1fe56:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val;
   1fe58:	716a      	strb	r2, [r5, #5]
	dst[0] = val >> 8;
   1fe5a:	0a11      	lsrs	r1, r2, #8
   1fe5c:	f3c3 2207 	ubfx	r2, r3, #8, #8
   1fe60:	7129      	strb	r1, [r5, #4]
   1fe62:	71aa      	strb	r2, [r5, #6]
	sys_put_be32(segment->ack, tcp_hdr->ack);
   1fe64:	687b      	ldr	r3, [r7, #4]
	dst[1] = val;
   1fe66:	72eb      	strb	r3, [r5, #11]
	sys_put_be16(val >> 16, dst);
   1fe68:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val;
   1fe6a:	726a      	strb	r2, [r5, #9]
	dst[0] = val >> 8;
   1fe6c:	0a11      	lsrs	r1, r2, #8
   1fe6e:	f3c3 2207 	ubfx	r2, r3, #8, #8
   1fe72:	72aa      	strb	r2, [r5, #10]
   1fe74:	7229      	strb	r1, [r5, #8]
	tcp_hdr->flags = segment->flags;
   1fe76:	7abb      	ldrb	r3, [r7, #10]
   1fe78:	736b      	strb	r3, [r5, #13]
	sys_put_be16(segment->wnd, tcp_hdr->wnd);
   1fe7a:	893b      	ldrh	r3, [r7, #8]
	dst[1] = val;
   1fe7c:	73eb      	strb	r3, [r5, #15]
	dst[0] = val >> 8;
   1fe7e:	0a1a      	lsrs	r2, r3, #8
	tcp_hdr->urg[0] = 0;
   1fe80:	2300      	movs	r3, #0
   1fe82:	73aa      	strb	r2, [r5, #14]
   1fe84:	74ab      	strb	r3, [r5, #18]
	tcp_hdr->urg[1] = 0;
   1fe86:	74eb      	strb	r3, [r5, #19]
	if (tail) {
   1fe88:	f1b9 0f00 	cmp.w	r9, #0
   1fe8c:	d003      	beq.n	1fe96 <prepare_segment.isra.12+0x146>
		net_pkt_frag_add(pkt, tail);
   1fe8e:	4649      	mov	r1, r9
   1fe90:	4620      	mov	r0, r4
   1fe92:	f7fb fd23 	bl	1b8dc <net_pkt_frag_add>
	return pkt->family;
   1fe96:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
	if (net_pkt_family(pkt) == AF_INET6) {
   1fe9a:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   1fe9e:	2b0a      	cmp	r3, #10
   1fea0:	d10e      	bne.n	1fec0 <prepare_segment.isra.12+0x170>
		return net_ipv6_finalize(context, pkt);
   1fea2:	4621      	mov	r1, r4
   1fea4:	4650      	mov	r0, sl
   1fea6:	f7fd ffcf 	bl	1de48 <net_ipv6_finalize>
	if (status < 0) {
   1feaa:	1e05      	subs	r5, r0, #0
   1feac:	da08      	bge.n	1fec0 <prepare_segment.isra.12+0x170>
		if (pkt_allocated) {
   1feae:	f1b8 0f00 	cmp.w	r8, #0
   1feb2:	d099      	beq.n	1fde8 <prepare_segment.isra.12+0x98>
			net_pkt_unref(pkt);
   1feb4:	4620      	mov	r0, r4
   1feb6:	f7fb fcea 	bl	1b88e <net_pkt_unref>
   1feba:	e795      	b.n	1fde8 <prepare_segment.isra.12+0x98>
	u8_t optlen = 0;
   1febc:	461e      	mov	r6, r3
   1febe:	e7bf      	b.n	1fe40 <prepare_segment.isra.12+0xf0>
	*out_pkt = pkt;
   1fec0:	f8cb 4000 	str.w	r4, [fp]
	return 0;
   1fec4:	2500      	movs	r5, #0
   1fec6:	e78f      	b.n	1fde8 <prepare_segment.isra.12+0x98>

0001fec8 <net_tcp_alloc>:
{
   1fec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1feca:	4607      	mov	r7, r0
	__asm__ volatile(
   1fecc:	f04f 0320 	mov.w	r3, #32
   1fed0:	f3ef 8511 	mrs	r5, BASEPRI
   1fed4:	f383 8811 	msr	BASEPRI, r3
	return tcp->flags & NET_TCP_IN_USE;
   1fed8:	4c28      	ldr	r4, [pc, #160]	; (1ff7c <net_tcp_alloc+0xb4>)
	for (i = 0; i < NET_MAX_TCP_CONTEXT; i++) {
   1feda:	2000      	movs	r0, #0
   1fedc:	f04f 0ee0 	mov.w	lr, #224	; 0xe0
   1fee0:	4626      	mov	r6, r4
   1fee2:	fb0e 4200 	mla	r2, lr, r0, r4
   1fee6:	32b8      	adds	r2, #184	; 0xb8
   1fee8:	8893      	ldrh	r3, [r2, #4]
   1feea:	f3c3 1147 	ubfx	r1, r3, #5, #8
		if (!net_tcp_is_used(&tcp_context[i])) {
   1feee:	f011 0f01 	tst.w	r1, #1
   1fef2:	d13d      	bne.n	1ff70 <net_tcp_alloc+0xa8>
			tcp_context[i].flags |= NET_TCP_IN_USE;
   1fef4:	f041 0101 	orr.w	r1, r1, #1
   1fef8:	f361 134c 	bfi	r3, r1, #5, #8
   1fefc:	8093      	strh	r3, [r2, #4]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1fefe:	f385 8811 	msr	BASEPRI, r5
	if (i >= NET_MAX_TCP_CONTEXT) {
   1ff02:	2806      	cmp	r0, #6
   1ff04:	d038      	beq.n	1ff78 <net_tcp_alloc+0xb0>
   1ff06:	22e0      	movs	r2, #224	; 0xe0
   1ff08:	fb02 f500 	mul.w	r5, r2, r0
	memset(&tcp_context[i], 0, sizeof(struct net_tcp));
   1ff0c:	1974      	adds	r4, r6, r5
   1ff0e:	2100      	movs	r1, #0
   1ff10:	4620      	mov	r0, r4
   1ff12:	f7e0 fc6a 	bl	7ea <memset>
	tcp_context[i].flags = NET_TCP_IN_USE;
   1ff16:	f8b4 20bc 	ldrh.w	r2, [r4, #188]	; 0xbc
   1ff1a:	2101      	movs	r1, #1
   1ff1c:	f361 124c 	bfi	r2, r1, #5, #8
   1ff20:	f8a4 20bc 	strh.w	r2, [r4, #188]	; 0xbc
	tcp_context[i].state = NET_TCP_CLOSED;
   1ff24:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
   1ff28:	f36f 3250 	bfc	r2, #13, #4
   1ff2c:	f8c4 20bc 	str.w	r2, [r4, #188]	; 0xbc
	tcp_context[i].context = context;
   1ff30:	5177      	str	r7, [r6, r5]
	return sys_rand32_get();
   1ff32:	f7e2 fc73 	bl	281c <sys_rand32_get>
	tcp_context[i].recv_wnd = min(NET_TCP_MAX_WIN, NET_TCP_BUF_MAX_LEN);
   1ff36:	f44f 63a0 	mov.w	r3, #1280	; 0x500
	tcp_context[i].send_seq = tcp_init_isn();
   1ff3a:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0
	tcp_context[i].recv_wnd = min(NET_TCP_MAX_WIN, NET_TCP_BUF_MAX_LEN);
   1ff3e:	f8a4 30dc 	strh.w	r3, [r4, #220]	; 0xdc
	tcp_context[i].accept_cb = NULL;
   1ff42:	2700      	movs	r7, #0
	tcp_context[i].send_mss = NET_TCP_DEFAULT_MSS;
   1ff44:	f44f 7306 	mov.w	r3, #536	; 0x218
	k_delayed_work_init(&tcp_context[i].retry_timer, tcp_retry_expired);
   1ff48:	f105 0058 	add.w	r0, r5, #88	; 0x58
   1ff4c:	490c      	ldr	r1, [pc, #48]	; (1ff80 <net_tcp_alloc+0xb8>)
	tcp_context[i].send_mss = NET_TCP_DEFAULT_MSS;
   1ff4e:	f8a4 30de 	strh.w	r3, [r4, #222]	; 0xde
	k_delayed_work_init(&tcp_context[i].retry_timer, tcp_retry_expired);
   1ff52:	4430      	add	r0, r6
	tcp_context[i].accept_cb = NULL;
   1ff54:	f8c4 70c0 	str.w	r7, [r4, #192]	; 0xc0
	k_delayed_work_init(&tcp_context[i].retry_timer, tcp_retry_expired);
   1ff58:	f002 f958 	bl	2220c <k_delayed_work_init>
	k_sem_init(&tcp_context[i].connect_wait, 0, UINT_MAX);
   1ff5c:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   1ff60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1ff64:	4639      	mov	r1, r7
   1ff66:	4430      	add	r0, r6
   1ff68:	f001 fe1a 	bl	21ba0 <_impl_k_sem_init>
}
   1ff6c:	4620      	mov	r0, r4
   1ff6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (i = 0; i < NET_MAX_TCP_CONTEXT; i++) {
   1ff70:	3001      	adds	r0, #1
   1ff72:	2806      	cmp	r0, #6
   1ff74:	d1b5      	bne.n	1fee2 <net_tcp_alloc+0x1a>
   1ff76:	e7c2      	b.n	1fefe <net_tcp_alloc+0x36>
		return NULL;
   1ff78:	2400      	movs	r4, #0
   1ff7a:	e7f7      	b.n	1ff6c <net_tcp_alloc+0xa4>
   1ff7c:	200029b0 	.word	0x200029b0
   1ff80:	00020865 	.word	0x00020865

0001ff84 <net_tcp_get_recv_wnd>:

u32_t net_tcp_get_recv_wnd(const struct net_tcp *tcp)
{
	return tcp->recv_wnd;
}
   1ff84:	f8b0 00dc 	ldrh.w	r0, [r0, #220]	; 0xdc
   1ff88:	4770      	bx	lr

0001ff8a <net_tcp_get_recv_mss>:
#else /* CONFIG_NET_IPV4 */
#define ip_max_packet_len(...) 0
#endif /* CONFIG_NET_IPV4 */

u16_t net_tcp_get_recv_mss(const struct net_tcp *tcp)
{
   1ff8a:	b508      	push	{r3, lr}
	sa_family_t family = net_context_get_family(tcp->context);
   1ff8c:	6803      	ldr	r3, [r0, #0]
	if (context->flags & NET_CONTEXT_FAMILY) {
   1ff8e:	f893 005d 	ldrb.w	r0, [r3, #93]	; 0x5d
   1ff92:	f010 0010 	ands.w	r0, r0, #16
   1ff96:	d00e      	beq.n	1ffb6 <net_tcp_get_recv_mss+0x2c>
	return net_if_get_by_index(context->iface);
   1ff98:	f893 005c 	ldrb.w	r0, [r3, #92]	; 0x5c
   1ff9c:	f7fb fa44 	bl	1b428 <net_if_get_by_index>
#if defined(CONFIG_NET_IPV6)
	else if (family == AF_INET6) {
		struct net_if *iface = net_context_get_iface(tcp->context);
		int mss = 0;

		if (iface && iface->mtu >= NET_IPV6TCPH_LEN) {
   1ffa0:	b150      	cbz	r0, 1ffb8 <net_tcp_get_recv_mss+0x2e>
   1ffa2:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   1ffa4:	283b      	cmp	r0, #59	; 0x3b
   1ffa6:	d907      	bls.n	1ffb8 <net_tcp_get_recv_mss+0x2e>
			/* Detect MSS based on interface MTU minus "TCP,IP
			 * header size"
			 */
			mss = iface->mtu - NET_IPV6TCPH_LEN;
   1ffa8:	383c      	subs	r0, #60	; 0x3c
   1ffaa:	f5b0 6fa0 	cmp.w	r0, #1280	; 0x500
   1ffae:	bfb8      	it	lt
   1ffb0:	f44f 60a0 	movlt.w	r0, #1280	; 0x500

		if (mss < NET_IPV6_MTU) {
			mss = NET_IPV6_MTU;
		}

		return mss;
   1ffb4:	b280      	uxth	r0, r0
	}
#endif /* CONFIG_NET_IPV6 */

	return 0;
}
   1ffb6:	bd08      	pop	{r3, pc}
			mss = NET_IPV6_MTU;
   1ffb8:	f44f 60a0 	mov.w	r0, #1280	; 0x500
   1ffbc:	e7fa      	b.n	1ffb4 <net_tcp_get_recv_mss+0x2a>

0001ffbe <net_tcp_prepare_reset>:

int net_tcp_prepare_reset(struct net_tcp *tcp,
			  const struct sockaddr *local,
			  const struct sockaddr *remote,
			  struct net_pkt **pkt)
{
   1ffbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ffc2:	4605      	mov	r5, r0
   1ffc4:	b08a      	sub	sp, #40	; 0x28
   1ffc6:	460c      	mov	r4, r1
   1ffc8:	4617      	mov	r7, r2
	struct tcp_segment segment = { 0 };
   1ffca:	2100      	movs	r1, #0
   1ffcc:	2218      	movs	r2, #24
   1ffce:	a804      	add	r0, sp, #16
{
   1ffd0:	461e      	mov	r6, r3
	struct tcp_segment segment = { 0 };
   1ffd2:	f7e0 fc0a 	bl	7ea <memset>
	int status = 0;
	struct sockaddr_ptr src_addr_ptr;

	if ((net_context_get_state(tcp->context) != NET_CONTEXT_UNCONNECTED) &&
   1ffd6:	682b      	ldr	r3, [r5, #0]
	return (context->flags >> NET_CONTEXT_STATE_SHIFT) &
   1ffd8:	f893 005d 	ldrb.w	r0, [r3, #93]	; 0x5d
   1ffdc:	f3c0 0041 	ubfx	r0, r0, #1, #2
   1ffe0:	b1f8      	cbz	r0, 20022 <net_tcp_prepare_reset+0x64>
	return (enum net_tcp_state)tcp->state;
   1ffe2:	f8d5 20bc 	ldr.w	r2, [r5, #188]	; 0xbc
   1ffe6:	f3c2 3243 	ubfx	r2, r2, #13, #4
   1ffea:	2a02      	cmp	r2, #2
   1ffec:	d031      	beq.n	20052 <net_tcp_prepare_reset+0x94>
	    (net_tcp_get_state(tcp) != NET_TCP_SYN_SENT) &&
   1ffee:	2a09      	cmp	r2, #9
   1fff0:	d02f      	beq.n	20052 <net_tcp_prepare_reset+0x94>
	    (net_tcp_get_state(tcp) != NET_TCP_TIME_WAIT)) {
		/* Send the reset segment always with acknowledgment. */
		segment.ack = tcp->send_ack;
   1fff2:	f8d5 20b4 	ldr.w	r2, [r5, #180]	; 0xb4
   1fff6:	9205      	str	r2, [sp, #20]
		segment.flags = NET_TCP_RST | NET_TCP_ACK;
   1fff8:	2214      	movs	r2, #20
   1fffa:	f88d 201a 	strb.w	r2, [sp, #26]
		segment.seq = tcp->send_seq;
   1fffe:	f8d5 20b0 	ldr.w	r2, [r5, #176]	; 0xb0
   20002:	9204      	str	r2, [sp, #16]

		if (!local) {
   20004:	b984      	cbnz	r4, 20028 <net_tcp_prepare_reset+0x6a>
			segment.src_addr = &tcp->context->local;
   20006:	3308      	adds	r3, #8
   20008:	9308      	str	r3, [sp, #32]
						      &src_addr_ptr);
			segment.src_addr = &src_addr_ptr;
		}

		segment.dst_addr = remote;
		segment.wnd = 0;
   2000a:	2200      	movs	r2, #0
		segment.options = NULL;
		segment.optlen = 0;

		status = prepare_segment(tcp, &segment, NULL, pkt);
   2000c:	4633      	mov	r3, r6
   2000e:	a904      	add	r1, sp, #16
   20010:	4628      	mov	r0, r5
		segment.dst_addr = remote;
   20012:	9709      	str	r7, [sp, #36]	; 0x24
		segment.wnd = 0;
   20014:	f8ad 2018 	strh.w	r2, [sp, #24]
		segment.options = NULL;
   20018:	9207      	str	r2, [sp, #28]
		segment.optlen = 0;
   2001a:	f88d 201b 	strb.w	r2, [sp, #27]
		status = prepare_segment(tcp, &segment, NULL, pkt);
   2001e:	f7ff fe97 	bl	1fd50 <prepare_segment.isra.12>
	}

	return status;
}
   20022:	b00a      	add	sp, #40	; 0x28
   20024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	memset(addr, 0, sizeof(struct sockaddr_ptr));
   20028:	f10d 0804 	add.w	r8, sp, #4
   2002c:	220c      	movs	r2, #12
   2002e:	2100      	movs	r1, #0
   20030:	4640      	mov	r0, r8
   20032:	f7e0 fbda 	bl	7ea <memset>
	if (local->sa_family == AF_INET6) {
   20036:	8823      	ldrh	r3, [r4, #0]
   20038:	2b0a      	cmp	r3, #10
   2003a:	d107      	bne.n	2004c <net_tcp_prepare_reset+0x8e>
		net_sin6_ptr(addr)->sin6_family = AF_INET6;
   2003c:	f8ad 3004 	strh.w	r3, [sp, #4]
		net_sin6_ptr(addr)->sin6_addr = &net_sin6(local)->sin6_addr;
   20040:	3404      	adds	r4, #4
		net_sin6_ptr(addr)->sin6_port = net_sin6(local)->sin6_port;
   20042:	f834 3c02 	ldrh.w	r3, [r4, #-2]
   20046:	f8ad 3006 	strh.w	r3, [sp, #6]
		net_sin6_ptr(addr)->sin6_addr = &net_sin6(local)->sin6_addr;
   2004a:	9402      	str	r4, [sp, #8]
			segment.src_addr = &src_addr_ptr;
   2004c:	f8cd 8020 	str.w	r8, [sp, #32]
   20050:	e7db      	b.n	2000a <net_tcp_prepare_reset+0x4c>
	int status = 0;
   20052:	2000      	movs	r0, #0
	return status;
   20054:	e7e5      	b.n	20022 <net_tcp_prepare_reset+0x64>

00020056 <net_tcp_init>:

	return true;
}

void net_tcp_init(void)
{
   20056:	4770      	bx	lr

00020058 <net_tcp_change_state>:
   20058:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
}
#endif /* CONFIG_NET_DEBUG_TCP */

void net_tcp_change_state(struct net_tcp *tcp,
			  enum net_tcp_state new_state)
{
   2005c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NET_ASSERT(tcp);

	if (net_tcp_get_state(tcp) == new_state) {
   2005e:	f3c3 3243 	ubfx	r2, r3, #13, #4
   20062:	428a      	cmp	r2, r1
{
   20064:	4604      	mov	r4, r0
	if (net_tcp_get_state(tcp) == new_state) {
   20066:	d01a      	beq.n	2009e <net_tcp_change_state+0x46>

#if defined(CONFIG_NET_DEBUG_TCP)
	validate_state_transition(tcp->state, new_state);
#endif /* CONFIG_NET_DEBUG_TCP */

	tcp->state = new_state;
   20068:	f361 3350 	bfi	r3, r1, #13, #4

	if (net_tcp_get_state(tcp) != NET_TCP_CLOSED) {
   2006c:	f011 050f 	ands.w	r5, r1, #15
	tcp->state = new_state;
   20070:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
	if (net_tcp_get_state(tcp) != NET_TCP_CLOSED) {
   20074:	d113      	bne.n	2009e <net_tcp_change_state+0x46>
		return;
	}

	if (!tcp->context) {
   20076:	6803      	ldr	r3, [r0, #0]
   20078:	b18b      	cbz	r3, 2009e <net_tcp_change_state+0x46>
		return;
	}

	/* Remove any port handlers if we are closing */
	if (tcp->context->conn_handler) {
   2007a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   2007c:	b118      	cbz	r0, 20086 <net_tcp_change_state+0x2e>
	return net_conn_unregister(handle);
   2007e:	f7ff fcaf 	bl	1f9e0 <net_conn_unregister>
		net_tcp_unregister(tcp->context->conn_handler);
		tcp->context->conn_handler = NULL;
   20082:	6823      	ldr	r3, [r4, #0]
   20084:	62dd      	str	r5, [r3, #44]	; 0x2c
	}

	if (tcp->accept_cb) {
   20086:	f8d4 50c0 	ldr.w	r5, [r4, #192]	; 0xc0
   2008a:	b145      	cbz	r5, 2009e <net_tcp_change_state+0x46>
		tcp->accept_cb(tcp->context,
   2008c:	6820      	ldr	r0, [r4, #0]
   2008e:	6803      	ldr	r3, [r0, #0]
   20090:	9300      	str	r3, [sp, #0]
   20092:	2218      	movs	r2, #24
   20094:	f06f 0333 	mvn.w	r3, #51	; 0x33
   20098:	f100 0114 	add.w	r1, r0, #20
   2009c:	47a8      	blx	r5
			       &tcp->context->remote,
			       sizeof(struct sockaddr),
			       -ENETRESET,
			       tcp->context->user_data);
	}
}
   2009e:	b003      	add	sp, #12
   200a0:	bd30      	pop	{r4, r5, pc}
	...

000200a4 <net_tcp_release>:
{
   200a4:	b570      	push	{r4, r5, r6, lr}
	if (!PART_OF_ARRAY(tcp_context, tcp)) {
   200a6:	4604      	mov	r4, r0
   200a8:	2800      	cmp	r0, #0
   200aa:	d052      	beq.n	20152 <net_tcp_release+0xae>
   200ac:	4b2a      	ldr	r3, [pc, #168]	; (20158 <net_tcp_release+0xb4>)
   200ae:	4298      	cmp	r0, r3
   200b0:	d34f      	bcc.n	20152 <net_tcp_release+0xae>
   200b2:	f503 63a8 	add.w	r3, r3, #1344	; 0x540
   200b6:	4298      	cmp	r0, r3
   200b8:	d24b      	bcs.n	20152 <net_tcp_release+0xae>
   200ba:	f8d0 30a8 	ldr.w	r3, [r0, #168]	; 0xa8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&tcp->sent_list, pkt, tmp,
   200be:	bb5b      	cbnz	r3, 20118 <net_tcp_release+0x74>
	sem->count = 0;
   200c0:	2500      	movs	r5, #0
	k_delayed_work_cancel(&tcp->retry_timer);
   200c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
   200c6:	f002 f8bf 	bl	22248 <k_delayed_work_cancel>
   200ca:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
	k_delayed_work_cancel(&tcp->ack_timer);
   200ce:	f104 0008 	add.w	r0, r4, #8
   200d2:	f002 f8b9 	bl	22248 <k_delayed_work_cancel>
	k_delayed_work_cancel(&tcp->fin_timer);
   200d6:	f104 0030 	add.w	r0, r4, #48	; 0x30
   200da:	f002 f8b5 	bl	22248 <k_delayed_work_cancel>
	k_delayed_work_cancel(&tcp->timewait_timer);
   200de:	f104 0080 	add.w	r0, r4, #128	; 0x80
   200e2:	f002 f8b1 	bl	22248 <k_delayed_work_cancel>
	net_tcp_change_state(tcp, NET_TCP_CLOSED);
   200e6:	4629      	mov	r1, r5
   200e8:	4620      	mov	r0, r4
   200ea:	f7ff ffb5 	bl	20058 <net_tcp_change_state>
	tcp->context = NULL;
   200ee:	6025      	str	r5, [r4, #0]
	__asm__ volatile(
   200f0:	f04f 0320 	mov.w	r3, #32
   200f4:	f3ef 8111 	mrs	r1, BASEPRI
   200f8:	f383 8811 	msr	BASEPRI, r3
	tcp->flags &= ~(NET_TCP_IN_USE | NET_TCP_RECV_MSS_SET);
   200fc:	f8b4 30bc 	ldrh.w	r3, [r4, #188]	; 0xbc
   20100:	f3c3 1247 	ubfx	r2, r3, #5, #8
   20104:	f022 0221 	bic.w	r2, r2, #33	; 0x21
   20108:	f362 134c 	bfi	r3, r2, #5, #8
   2010c:	f8a4 30bc 	strh.w	r3, [r4, #188]	; 0xbc
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   20110:	f381 8811 	msr	BASEPRI, r1
	return 0;
   20114:	4628      	mov	r0, r5
   20116:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&tcp->sent_list, pkt, tmp,
   20118:	f1b3 0038 	subs.w	r0, r3, #56	; 0x38
   2011c:	d0d0      	beq.n	200c0 <net_tcp_release+0x1c>
   2011e:	681d      	ldr	r5, [r3, #0]
   20120:	b105      	cbz	r5, 20124 <net_tcp_release+0x80>
   20122:	3d38      	subs	r5, #56	; 0x38
	node->next = NULL;
   20124:	2600      	movs	r6, #0
		list->head = node->next;
   20126:	4603      	mov	r3, r0
		if (list->tail == node) {
   20128:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
		list->head = node->next;
   2012c:	f853 2f38 	ldr.w	r2, [r3, #56]!
   20130:	f8c4 20a8 	str.w	r2, [r4, #168]	; 0xa8
		if (list->tail == node) {
   20134:	4299      	cmp	r1, r3
			list->tail = list->head;
   20136:	bf08      	it	eq
   20138:	f8c4 20ac 	streq.w	r2, [r4, #172]	; 0xac
	node->next = NULL;
   2013c:	6386      	str	r6, [r0, #56]	; 0x38
		net_pkt_unref(pkt);
   2013e:	f7fb fba6 	bl	1b88e <net_pkt_unref>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&tcp->sent_list, pkt, tmp,
   20142:	2d00      	cmp	r5, #0
   20144:	d0bc      	beq.n	200c0 <net_tcp_release+0x1c>
	return node->next;
   20146:	6bab      	ldr	r3, [r5, #56]	; 0x38
   20148:	b103      	cbz	r3, 2014c <net_tcp_release+0xa8>
   2014a:	3b38      	subs	r3, #56	; 0x38
   2014c:	4628      	mov	r0, r5
   2014e:	461d      	mov	r5, r3
   20150:	e7e9      	b.n	20126 <net_tcp_release+0x82>
		return -EINVAL;
   20152:	f06f 0015 	mvn.w	r0, #21
   20156:	bd70      	pop	{r4, r5, r6, pc}
   20158:	200029b0 	.word	0x200029b0

0002015c <net_tcp_prepare_segment>:
{
   2015c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20160:	b087      	sub	sp, #28
   20162:	4604      	mov	r4, r0
   20164:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   20166:	460d      	mov	r5, r1
   20168:	4691      	mov	r9, r2
	struct tcp_segment segment = { 0 };
   2016a:	2100      	movs	r1, #0
   2016c:	2218      	movs	r2, #24
   2016e:	4668      	mov	r0, sp
{
   20170:	4698      	mov	r8, r3
	struct tcp_segment segment = { 0 };
   20172:	f7e0 fb3a 	bl	7ea <memset>
	if (!local) {
   20176:	b90e      	cbnz	r6, 2017c <net_tcp_prepare_segment+0x20>
		local = &tcp->context->local;
   20178:	6826      	ldr	r6, [r4, #0]
   2017a:	3608      	adds	r6, #8
	if (flags & NET_TCP_ACK) {
   2017c:	06e9      	lsls	r1, r5, #27
	seq = tcp->send_seq;
   2017e:	f8d4 70b0 	ldr.w	r7, [r4, #176]	; 0xb0
	if (flags & NET_TCP_ACK) {
   20182:	d50f      	bpl.n	201a4 <net_tcp_prepare_segment+0x48>
	return (enum net_tcp_state)tcp->state;
   20184:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   20188:	f3c3 3343 	ubfx	r3, r3, #13, #4
		if (net_tcp_get_state(tcp) == NET_TCP_FIN_WAIT_1) {
   2018c:	2b07      	cmp	r3, #7
   2018e:	d143      	bne.n	20218 <net_tcp_prepare_segment+0xbc>
			if (flags & NET_TCP_FIN) {
   20190:	07ea      	lsls	r2, r5, #31
   20192:	d503      	bpl.n	2019c <net_tcp_prepare_segment+0x40>
				flags &= ~NET_TCP_FIN;
   20194:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
			net_tcp_change_state(tcp, NET_TCP_TIME_WAIT);
   20198:	2109      	movs	r1, #9
   2019a:	e000      	b.n	2019e <net_tcp_prepare_segment+0x42>
				net_tcp_change_state(tcp, NET_TCP_CLOSING);
   2019c:	210a      	movs	r1, #10
			net_tcp_change_state(tcp, NET_TCP_LAST_ACK);
   2019e:	4620      	mov	r0, r4
   201a0:	f7ff ff5a 	bl	20058 <net_tcp_change_state>
	if (flags & NET_TCP_FIN) {
   201a4:	07eb      	lsls	r3, r5, #31
   201a6:	d516      	bpl.n	201d6 <net_tcp_prepare_segment+0x7a>
		tcp->flags |= NET_TCP_FINAL_SENT;
   201a8:	f8b4 30bc 	ldrh.w	r3, [r4, #188]	; 0xbc
   201ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   201b0:	f8a4 30bc 	strh.w	r3, [r4, #188]	; 0xbc
   201b4:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   201b8:	f3c3 3343 	ubfx	r3, r3, #13, #4
		if (net_tcp_get_state(tcp) == NET_TCP_ESTABLISHED ||
   201bc:	330d      	adds	r3, #13
   201be:	f003 030f 	and.w	r3, r3, #15
   201c2:	2b01      	cmp	r3, #1
		flags |= NET_TCP_ACK;
   201c4:	f045 0510 	orr.w	r5, r5, #16
		seq++;
   201c8:	f107 0701 	add.w	r7, r7, #1
		if (net_tcp_get_state(tcp) == NET_TCP_ESTABLISHED ||
   201cc:	d803      	bhi.n	201d6 <net_tcp_prepare_segment+0x7a>
			net_tcp_change_state(tcp, NET_TCP_FIN_WAIT_1);
   201ce:	2107      	movs	r1, #7
   201d0:	4620      	mov	r0, r4
   201d2:	f7ff ff41 	bl	20058 <net_tcp_change_state>
	return tcp->recv_wnd;
   201d6:	f8b4 30dc 	ldrh.w	r3, [r4, #220]	; 0xdc
	segment.dst_addr = remote;
   201da:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   201dc:	9205      	str	r2, [sp, #20]
	segment.wnd = wnd;
   201de:	f8ad 3008 	strh.w	r3, [sp, #8]
	segment.seq = tcp->send_seq;
   201e2:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
	status = prepare_segment(tcp, &segment, *send_pkt, send_pkt);
   201e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
	segment.seq = tcp->send_seq;
   201e8:	9200      	str	r2, [sp, #0]
	segment.ack = tcp->send_ack;
   201ea:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   201ee:	9201      	str	r2, [sp, #4]
	status = prepare_segment(tcp, &segment, *send_pkt, send_pkt);
   201f0:	4669      	mov	r1, sp
   201f2:	681a      	ldr	r2, [r3, #0]
	segment.src_addr = (struct sockaddr_ptr *)local;
   201f4:	9604      	str	r6, [sp, #16]
	status = prepare_segment(tcp, &segment, *send_pkt, send_pkt);
   201f6:	4620      	mov	r0, r4
	segment.flags = flags;
   201f8:	f88d 500a 	strb.w	r5, [sp, #10]
	segment.options = options;
   201fc:	f8cd 900c 	str.w	r9, [sp, #12]
	segment.optlen = optlen;
   20200:	f88d 800b 	strb.w	r8, [sp, #11]
	status = prepare_segment(tcp, &segment, *send_pkt, send_pkt);
   20204:	f7ff fda4 	bl	1fd50 <prepare_segment.isra.12>
	if (status < 0) {
   20208:	2800      	cmp	r0, #0
	return 0;
   2020a:	bfa4      	itt	ge
   2020c:	2000      	movge	r0, #0
	tcp->send_seq = seq;
   2020e:	f8c4 70b0 	strge.w	r7, [r4, #176]	; 0xb0
}
   20212:	b007      	add	sp, #28
   20214:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if (net_tcp_get_state(tcp) == NET_TCP_FIN_WAIT_2) {
   20218:	2b08      	cmp	r3, #8
   2021a:	d0bd      	beq.n	20198 <net_tcp_prepare_segment+0x3c>
		} else if (net_tcp_get_state(tcp) == NET_TCP_CLOSE_WAIT) {
   2021c:	2b05      	cmp	r3, #5
   2021e:	d1c1      	bne.n	201a4 <net_tcp_prepare_segment+0x48>
			tcp->flags |= NET_TCP_IS_SHUTDOWN;
   20220:	f8b4 30bc 	ldrh.w	r3, [r4, #188]	; 0xbc
   20224:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   20228:	f8a4 30bc 	strh.w	r3, [r4, #188]	; 0xbc
			flags |= NET_TCP_FIN;
   2022c:	f045 0501 	orr.w	r5, r5, #1
			net_tcp_change_state(tcp, NET_TCP_LAST_ACK);
   20230:	2106      	movs	r1, #6
   20232:	e7b4      	b.n	2019e <net_tcp_prepare_segment+0x42>

00020234 <net_tcp_prepare_ack>:
{
   20234:	b570      	push	{r4, r5, r6, lr}
   20236:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
	switch (net_tcp_get_state(tcp)) {
   2023a:	f3c3 3343 	ubfx	r3, r3, #13, #4
   2023e:	2b03      	cmp	r3, #3
{
   20240:	b086      	sub	sp, #24
   20242:	4604      	mov	r4, r0
   20244:	460d      	mov	r5, r1
   20246:	4616      	mov	r6, r2
	switch (net_tcp_get_state(tcp)) {
   20248:	d00a      	beq.n	20260 <net_tcp_prepare_ack+0x2c>
   2024a:	d302      	bcc.n	20252 <net_tcp_prepare_ack+0x1e>
   2024c:	3b06      	subs	r3, #6
   2024e:	2b01      	cmp	r3, #1
   20250:	d929      	bls.n	202a6 <net_tcp_prepare_ack+0x72>
		return net_tcp_prepare_segment(tcp, NET_TCP_ACK, 0, 0, NULL,
   20252:	2300      	movs	r3, #0
   20254:	9602      	str	r6, [sp, #8]
   20256:	9501      	str	r5, [sp, #4]
   20258:	9300      	str	r3, [sp, #0]
   2025a:	461a      	mov	r2, r3
   2025c:	2110      	movs	r1, #16
   2025e:	e01e      	b.n	2029e <net_tcp_prepare_ack+0x6a>
	if (!(tcp->flags & NET_TCP_RECV_MSS_SET)) {
   20260:	f8b0 30bc 	ldrh.w	r3, [r0, #188]	; 0xbc
   20264:	055b      	lsls	r3, r3, #21
   20266:	d41c      	bmi.n	202a2 <net_tcp_prepare_ack+0x6e>
		recv_mss = net_tcp_get_recv_mss(tcp);
   20268:	f7ff fe8f 	bl	1ff8a <net_tcp_get_recv_mss>
		tcp->flags |= NET_TCP_RECV_MSS_SET;
   2026c:	f8b4 30bc 	ldrh.w	r3, [r4, #188]	; 0xbc
   20270:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   20274:	f8a4 30bc 	strh.w	r3, [r4, #188]	; 0xbc
	recv_mss |= (NET_TCP_MSS_OPT << 24) | (NET_TCP_MSS_SIZE << 16);
   20278:	f040 7301 	orr.w	r3, r0, #33816576	; 0x2040000
	UNALIGNED_PUT(htonl(recv_mss),
   2027c:	0218      	lsls	r0, r3, #8
   2027e:	f240 4202 	movw	r2, #1026	; 0x402
   20282:	ea42 6303 	orr.w	r3, r2, r3, lsl #24
   20286:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
   2028a:	aa06      	add	r2, sp, #24
   2028c:	4318      	orrs	r0, r3
		return net_tcp_prepare_segment(tcp, NET_TCP_SYN | NET_TCP_ACK,
   2028e:	2300      	movs	r3, #0
	UNALIGNED_PUT(htonl(recv_mss),
   20290:	f842 0d08 	str.w	r0, [r2, #-8]!
		return net_tcp_prepare_segment(tcp, NET_TCP_SYN | NET_TCP_ACK,
   20294:	2112      	movs	r1, #18
   20296:	9300      	str	r3, [sp, #0]
   20298:	9602      	str	r6, [sp, #8]
   2029a:	9501      	str	r5, [sp, #4]
   2029c:	2304      	movs	r3, #4
		return net_tcp_prepare_segment(tcp, NET_TCP_ACK, 0, 0, NULL,
   2029e:	4620      	mov	r0, r4
   202a0:	e007      	b.n	202b2 <net_tcp_prepare_ack+0x7e>
		recv_mss = 0;
   202a2:	2000      	movs	r0, #0
   202a4:	e7e8      	b.n	20278 <net_tcp_prepare_ack+0x44>
		return net_tcp_prepare_segment(tcp, NET_TCP_FIN | NET_TCP_ACK,
   202a6:	2300      	movs	r3, #0
   202a8:	9202      	str	r2, [sp, #8]
   202aa:	9101      	str	r1, [sp, #4]
   202ac:	9300      	str	r3, [sp, #0]
   202ae:	461a      	mov	r2, r3
   202b0:	2111      	movs	r1, #17
		return net_tcp_prepare_segment(tcp, NET_TCP_ACK, 0, 0, NULL,
   202b2:	f7ff ff53 	bl	2015c <net_tcp_prepare_segment>
}
   202b6:	b006      	add	sp, #24
   202b8:	bd70      	pop	{r4, r5, r6, pc}
	...

000202bc <net_tcp_queue_data>:
{
   202bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   202be:	b087      	sub	sp, #28
	struct net_conn *conn = (struct net_conn *)context->conn_handler;
   202c0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   202c2:	688c      	ldr	r4, [r1, #8]
{
   202c4:	9105      	str	r1, [sp, #20]
   202c6:	4605      	mov	r5, r0
	size_t bytes = 0;
   202c8:	2700      	movs	r7, #0
	while (buf) {
   202ca:	2c00      	cmp	r4, #0
   202cc:	d13b      	bne.n	20346 <net_tcp_queue_data+0x8a>
	ret = net_tcp_prepare_segment(context->tcp, NET_TCP_PSH | NET_TCP_ACK,
   202ce:	aa05      	add	r2, sp, #20
   202d0:	9202      	str	r2, [sp, #8]
   202d2:	9301      	str	r3, [sp, #4]
   202d4:	9400      	str	r4, [sp, #0]
   202d6:	4623      	mov	r3, r4
   202d8:	4622      	mov	r2, r4
   202da:	2118      	movs	r1, #24
   202dc:	6e28      	ldr	r0, [r5, #96]	; 0x60
   202de:	f7ff ff3d 	bl	2015c <net_tcp_prepare_segment>
	if (ret) {
   202e2:	4606      	mov	r6, r0
   202e4:	bb60      	cbnz	r0, 20340 <net_tcp_queue_data+0x84>
	context->tcp->send_seq += data_len;
   202e6:	6e28      	ldr	r0, [r5, #96]	; 0x60
	sys_slist_append(&context->tcp->sent_list, &pkt->sent_list);
   202e8:	9a05      	ldr	r2, [sp, #20]
	context->tcp->send_seq += data_len;
   202ea:	f8d0 30b0 	ldr.w	r3, [r0, #176]	; 0xb0
   202ee:	443b      	add	r3, r7
   202f0:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	sys_slist_append(&context->tcp->sent_list, &pkt->sent_list);
   202f4:	f102 0338 	add.w	r3, r2, #56	; 0x38
	node->next = NULL;
   202f8:	6394      	str	r4, [r2, #56]	; 0x38
	if (!list->tail) {
   202fa:	f8d0 20ac 	ldr.w	r2, [r0, #172]	; 0xac
   202fe:	bb32      	cbnz	r2, 2034e <net_tcp_queue_data+0x92>
		list->tail = node;
   20300:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
		list->head = node;
   20304:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
	return _timeout_remaining_get(&work->timeout);
   20308:	3064      	adds	r0, #100	; 0x64
   2030a:	f002 f8d1 	bl	224b0 <_timeout_remaining_get>
	if (k_delayed_work_remaining_get(&context->tcp->retry_timer) == 0) {
   2030e:	b950      	cbnz	r0, 20326 <net_tcp_queue_data+0x6a>
		k_delayed_work_submit(&context->tcp->retry_timer,
   20310:	6e29      	ldr	r1, [r5, #96]	; 0x60
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   20312:	4811      	ldr	r0, [pc, #68]	; (20358 <net_tcp_queue_data+0x9c>)
	return ((u32_t)1 << tcp->retry_timeout_shift) *
   20314:	f891 30bc 	ldrb.w	r3, [r1, #188]	; 0xbc
   20318:	22c8      	movs	r2, #200	; 0xc8
   2031a:	f003 031f 	and.w	r3, r3, #31
   2031e:	409a      	lsls	r2, r3
   20320:	3158      	adds	r1, #88	; 0x58
   20322:	f001 ffeb 	bl	222fc <k_delayed_work_submit_to_queue>
	do_ref_if_needed(context->tcp, pkt);
   20326:	9805      	ldr	r0, [sp, #20]
   20328:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   2032c:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   20330:	2b0a      	cmp	r3, #10
   20332:	d103      	bne.n	2033c <net_tcp_queue_data+0x80>
   20334:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   20338:	2b02      	cmp	r3, #2
   2033a:	d001      	beq.n	20340 <net_tcp_queue_data+0x84>
   2033c:	f7fb fa9c 	bl	1b878 <net_pkt_ref>
}
   20340:	4630      	mov	r0, r6
   20342:	b007      	add	sp, #28
   20344:	bdf0      	pop	{r4, r5, r6, r7, pc}
		bytes += buf->len;
   20346:	89a2      	ldrh	r2, [r4, #12]
		buf = buf->frags;
   20348:	6824      	ldr	r4, [r4, #0]
		bytes += buf->len;
   2034a:	4417      	add	r7, r2
   2034c:	e7bd      	b.n	202ca <net_tcp_queue_data+0xe>
		list->tail->next = node;
   2034e:	6013      	str	r3, [r2, #0]
		list->tail = node;
   20350:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
   20354:	e7d8      	b.n	20308 <net_tcp_queue_data+0x4c>
   20356:	bf00      	nop
   20358:	20003340 	.word	0x20003340

0002035c <net_tcp_get_hdr>:
					+ net_tcp_get_recv_wnd(tcp)) < 0);
}

struct net_tcp_hdr *net_tcp_get_hdr(struct net_pkt *pkt,
				    struct net_tcp_hdr *hdr)
{
   2035c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2035e:	4605      	mov	r5, r0
   20360:	460c      	mov	r4, r1
	struct net_tcp_hdr *tcp_hdr;
	struct net_buf *frag;
	u16_t pos;

	tcp_hdr = net_pkt_tcp_data(pkt);
   20362:	f7fb fd17 	bl	1bd94 <net_pkt_tcp_data>
   20366:	4606      	mov	r6, r0
	if (net_tcp_header_fits(pkt, tcp_hdr)) {
   20368:	4601      	mov	r1, r0
   2036a:	4628      	mov	r0, r5
   2036c:	f7ff fce6 	bl	1fd3c <net_tcp_header_fits>
   20370:	2800      	cmp	r0, #0
   20372:	d162      	bne.n	2043a <net_tcp_get_hdr+0xde>
		return tcp_hdr;
	}

	frag = net_frag_read(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   20374:	f895 0035 	ldrb.w	r0, [r5, #53]	; 0x35
			     net_pkt_ipv6_ext_len(pkt),
   20378:	f895 103f 	ldrb.w	r1, [r5, #63]	; 0x3f
	frag = net_frag_read(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   2037c:	9400      	str	r4, [sp, #0]
   2037e:	4401      	add	r1, r0
   20380:	2302      	movs	r3, #2
   20382:	f10d 020e 	add.w	r2, sp, #14
   20386:	68a8      	ldr	r0, [r5, #8]
   20388:	f7fb fbdc 	bl	1bb44 <net_frag_read>
			     &pos, sizeof(hdr->src_port),
			     (u8_t *)&hdr->src_port);
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->dst_port),
			     (u8_t *)&hdr->dst_port);
   2038c:	1ca3      	adds	r3, r4, #2
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->dst_port),
   2038e:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   20392:	9300      	str	r3, [sp, #0]
   20394:	f10d 020e 	add.w	r2, sp, #14
   20398:	2302      	movs	r3, #2
   2039a:	f7fb fbd3 	bl	1bb44 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->seq), hdr->seq);
   2039e:	1d23      	adds	r3, r4, #4
   203a0:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   203a4:	9300      	str	r3, [sp, #0]
   203a6:	f10d 020e 	add.w	r2, sp, #14
   203aa:	2304      	movs	r3, #4
   203ac:	f7fb fbca 	bl	1bb44 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->ack), hdr->ack);
   203b0:	f104 0308 	add.w	r3, r4, #8
   203b4:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   203b8:	9300      	str	r3, [sp, #0]
   203ba:	f10d 020e 	add.w	r2, sp, #14
   203be:	2304      	movs	r3, #4
   203c0:	f7fb fbc0 	bl	1bb44 <net_frag_read>
	frag = net_frag_read_u8(frag, pos, &pos, &hdr->offset);
   203c4:	f104 030c 	add.w	r3, r4, #12
	return net_frag_read(frag, offset, pos, 1, value);
   203c8:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   203cc:	9300      	str	r3, [sp, #0]
   203ce:	f10d 020e 	add.w	r2, sp, #14
   203d2:	2301      	movs	r3, #1
   203d4:	f7fb fbb6 	bl	1bb44 <net_frag_read>
	frag = net_frag_read_u8(frag, pos, &pos, &hdr->flags);
   203d8:	f104 030d 	add.w	r3, r4, #13
   203dc:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   203e0:	9300      	str	r3, [sp, #0]
   203e2:	f10d 020e 	add.w	r2, sp, #14
   203e6:	2301      	movs	r3, #1
   203e8:	f7fb fbac 	bl	1bb44 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->wnd), hdr->wnd);
   203ec:	f104 030e 	add.w	r3, r4, #14
   203f0:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   203f4:	9300      	str	r3, [sp, #0]
   203f6:	f10d 020e 	add.w	r2, sp, #14
   203fa:	2302      	movs	r3, #2
   203fc:	f7fb fba2 	bl	1bb44 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
			     (u8_t *)&hdr->chksum);
   20400:	f104 0310 	add.w	r3, r4, #16
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   20404:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   20408:	9300      	str	r3, [sp, #0]
   2040a:	f10d 020e 	add.w	r2, sp, #14
   2040e:	2302      	movs	r3, #2
   20410:	f7fb fb98 	bl	1bb44 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->urg), hdr->urg);
   20414:	f104 0312 	add.w	r3, r4, #18
   20418:	9300      	str	r3, [sp, #0]
   2041a:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   2041e:	2302      	movs	r3, #2
   20420:	f10d 020e 	add.w	r2, sp, #14
   20424:	f7fb fb8e 	bl	1bb44 <net_frag_read>

	if (!frag && pos == 0xffff) {
   20428:	b930      	cbnz	r0, 20438 <net_tcp_get_hdr+0xdc>
   2042a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
		if (IS_ENABLED(CONFIG_NET_DEBUG_TCP) &&
		    !is_6lo_technology(pkt)) {
			NET_ASSERT(frag);
		}

		return NULL;
   2042e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   20432:	429a      	cmp	r2, r3
   20434:	bf08      	it	eq
   20436:	2400      	moveq	r4, #0
   20438:	4626      	mov	r6, r4
	}

	return hdr;
}
   2043a:	4630      	mov	r0, r6
   2043c:	b004      	add	sp, #16
   2043e:	bd70      	pop	{r4, r5, r6, pc}

00020440 <net_tcp_ack_received>:
{
   20440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct net_tcp *tcp = ctx->tcp;
   20444:	6e04      	ldr	r4, [r0, #96]	; 0x60
	return (s32_t)(seq1 - seq2);
   20446:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   2044a:	1acb      	subs	r3, r1, r3
	if (net_tcp_seq_greater(ack, ctx->tcp->send_seq)) {
   2044c:	2b00      	cmp	r3, #0
{
   2044e:	b087      	sub	sp, #28
   20450:	4681      	mov	r9, r0
		return false;
   20452:	f04f 0600 	mov.w	r6, #0
	if (net_tcp_seq_greater(ack, ctx->tcp->send_seq)) {
   20456:	dc22      	bgt.n	2049e <net_tcp_ack_received+0x5e>
   20458:	1c4f      	adds	r7, r1, #1
	node->next = NULL;
   2045a:	46b2      	mov	sl, r6
   2045c:	f8d4 50a8 	ldr.w	r5, [r4, #168]	; 0xa8
	while (!sys_slist_is_empty(list)) {
   20460:	bb0d      	cbnz	r5, 204a6 <net_tcp_ack_received+0x66>
	if (valid_ack && net_tcp_get_state(tcp) == NET_TCP_ESTABLISHED) {
   20462:	2e00      	cmp	r6, #0
   20464:	d06f      	beq.n	20546 <net_tcp_ack_received+0x106>
   20466:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   2046a:	f3c3 3343 	ubfx	r3, r3, #13, #4
   2046e:	2b04      	cmp	r3, #4
   20470:	d115      	bne.n	2049e <net_tcp_ack_received+0x5e>
		restart_timer(ctx->tcp);
   20472:	f8d9 4060 	ldr.w	r4, [r9, #96]	; 0x60
	if (!sys_slist_is_empty(&tcp->sent_list)) {
   20476:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   2047a:	f104 0158 	add.w	r1, r4, #88	; 0x58
   2047e:	2b00      	cmp	r3, #0
   20480:	d053      	beq.n	2052a <net_tcp_ack_received+0xea>
		tcp->flags |= NET_TCP_RETRYING;
   20482:	f8b4 30bc 	ldrh.w	r3, [r4, #188]	; 0xbc
   20486:	4831      	ldr	r0, [pc, #196]	; (2054c <net_tcp_ack_received+0x10c>)
   20488:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   2048c:	f8a4 30bc 	strh.w	r3, [r4, #188]	; 0xbc
		tcp->retry_timeout_shift = 0;
   20490:	f36f 0304 	bfc	r3, #0, #5
   20494:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
   20498:	22c8      	movs	r2, #200	; 0xc8
   2049a:	f001 ff2f 	bl	222fc <k_delayed_work_submit_to_queue>
}
   2049e:	4630      	mov	r0, r6
   204a0:	b007      	add	sp, #28
   204a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		pkt = CONTAINER_OF(head, struct net_pkt, sent_list);
   204a6:	f1a5 0838 	sub.w	r8, r5, #56	; 0x38
		tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   204aa:	a901      	add	r1, sp, #4
   204ac:	4640      	mov	r0, r8
   204ae:	f7ff ff55 	bl	2035c <net_tcp_get_hdr>
		if (!tcp_hdr) {
   204b2:	4683      	mov	fp, r0
   204b4:	b970      	cbnz	r0, 204d4 <net_tcp_ack_received+0x94>
		if (list->tail == node) {
   204b6:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
		list->head = node->next;
   204ba:	682b      	ldr	r3, [r5, #0]
   204bc:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
		if (list->tail == node) {
   204c0:	4295      	cmp	r5, r2
			list->tail = list->head;
   204c2:	bf08      	it	eq
   204c4:	f8c4 30ac 	streq.w	r3, [r4, #172]	; 0xac
			net_pkt_unref(pkt);
   204c8:	4640      	mov	r0, r8
	node->next = NULL;
   204ca:	f8c5 a000 	str.w	sl, [r5]
   204ce:	f7fb f9de 	bl	1b88e <net_pkt_unref>
   204d2:	e7c3      	b.n	2045c <net_tcp_ack_received+0x1c>
		seq = sys_get_be32(tcp_hdr->seq) + net_pkt_appdatalen(pkt) - 1;
   204d4:	3004      	adds	r0, #4
   204d6:	f7ff fc26 	bl	1fd26 <sys_get_be32>
   204da:	f835 3c06 	ldrh.w	r3, [r5, #-6]
   204de:	1afb      	subs	r3, r7, r3
   204e0:	1a18      	subs	r0, r3, r0
		if (!net_tcp_seq_greater(ack, seq)) {
   204e2:	2800      	cmp	r0, #0
   204e4:	ddbd      	ble.n	20462 <net_tcp_ack_received+0x22>
		if (tcp_hdr->flags & NET_TCP_FIN) {
   204e6:	f89b 300d 	ldrb.w	r3, [fp, #13]
   204ea:	07db      	lsls	r3, r3, #31
   204ec:	d509      	bpl.n	20502 <net_tcp_ack_received+0xc2>
   204ee:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   204f2:	f3c3 3343 	ubfx	r3, r3, #13, #4
			if (s == NET_TCP_FIN_WAIT_1) {
   204f6:	2b07      	cmp	r3, #7
   204f8:	d113      	bne.n	20522 <net_tcp_ack_received+0xe2>
				net_tcp_change_state(tcp, NET_TCP_FIN_WAIT_2);
   204fa:	2108      	movs	r1, #8
				net_tcp_change_state(tcp, NET_TCP_TIME_WAIT);
   204fc:	4620      	mov	r0, r4
   204fe:	f7ff fdab 	bl	20058 <net_tcp_change_state>
		if (list->tail == node) {
   20502:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
		list->head = node->next;
   20506:	682b      	ldr	r3, [r5, #0]
   20508:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
		if (list->tail == node) {
   2050c:	4295      	cmp	r5, r2
			list->tail = list->head;
   2050e:	bf08      	it	eq
   20510:	f8c4 30ac 	streq.w	r3, [r4, #172]	; 0xac
		net_pkt_unref(pkt);
   20514:	4640      	mov	r0, r8
	node->next = NULL;
   20516:	f8c5 a000 	str.w	sl, [r5]
   2051a:	f7fb f9b8 	bl	1b88e <net_pkt_unref>
		valid_ack = true;
   2051e:	2601      	movs	r6, #1
   20520:	e79c      	b.n	2045c <net_tcp_ack_received+0x1c>
			} else if (s == NET_TCP_CLOSING) {
   20522:	2b0a      	cmp	r3, #10
   20524:	d1ed      	bne.n	20502 <net_tcp_ack_received+0xc2>
				net_tcp_change_state(tcp, NET_TCP_TIME_WAIT);
   20526:	2109      	movs	r1, #9
   20528:	e7e8      	b.n	204fc <net_tcp_ack_received+0xbc>
		k_delayed_work_cancel(&tcp->retry_timer);
   2052a:	4608      	mov	r0, r1
   2052c:	f001 fe8c 	bl	22248 <k_delayed_work_cancel>
		tcp->flags &= ~NET_TCP_RETRYING;
   20530:	f8b4 30bc 	ldrh.w	r3, [r4, #188]	; 0xbc
   20534:	f3c3 1247 	ubfx	r2, r3, #5, #8
   20538:	f022 0210 	bic.w	r2, r2, #16
   2053c:	f362 134c 	bfi	r3, r2, #5, #8
   20540:	f8a4 30bc 	strh.w	r3, [r4, #188]	; 0xbc
   20544:	e7ab      	b.n	2049e <net_tcp_ack_received+0x5e>
	return true;
   20546:	2601      	movs	r6, #1
   20548:	e7a9      	b.n	2049e <net_tcp_ack_received+0x5e>
   2054a:	bf00      	nop
   2054c:	20003340 	.word	0x20003340

00020550 <net_tcp_validate_seq>:
{
   20550:	b510      	push	{r4, lr}
   20552:	b086      	sub	sp, #24
   20554:	4604      	mov	r4, r0
   20556:	4608      	mov	r0, r1
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   20558:	a901      	add	r1, sp, #4
   2055a:	f7ff feff 	bl	2035c <net_tcp_get_hdr>
	if (!tcp_hdr) {
   2055e:	b170      	cbz	r0, 2057e <net_tcp_validate_seq+0x2e>
	return (net_tcp_seq_cmp(sys_get_be32(tcp_hdr->seq),
   20560:	3004      	adds	r0, #4
   20562:	f7ff fbe0 	bl	1fd26 <sys_get_be32>
   20566:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   2056a:	1a83      	subs	r3, r0, r2
				tcp->send_ack) >= 0) &&
   2056c:	2b00      	cmp	r3, #0
	return tcp->recv_wnd;
   2056e:	bfa1      	itttt	ge
   20570:	f8b4 30dc 	ldrhge.w	r3, [r4, #220]	; 0xdc
   20574:	189b      	addge	r3, r3, r2
   20576:	1ac0      	subge	r0, r0, r3
				tcp->send_ack) >= 0) &&
   20578:	0fc0      	lsrge	r0, r0, #31
   2057a:	bfb8      	it	lt
   2057c:	2000      	movlt	r0, #0
}
   2057e:	b006      	add	sp, #24
   20580:	bd10      	pop	{r4, pc}

00020582 <net_tcp_set_hdr>:

struct net_tcp_hdr *net_tcp_set_hdr(struct net_pkt *pkt,
				    struct net_tcp_hdr *hdr)
{
   20582:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20586:	b087      	sub	sp, #28
   20588:	4605      	mov	r5, r0
   2058a:	460c      	mov	r4, r1
	struct net_buf *frag;
	u16_t pos;

	if (net_tcp_header_fits(pkt, hdr)) {
   2058c:	f7ff fbd6 	bl	1fd3c <net_tcp_header_fits>
   20590:	4680      	mov	r8, r0
   20592:	2800      	cmp	r0, #0
   20594:	f040 8082 	bne.w	2069c <net_tcp_set_hdr+0x11a>
		return hdr;
	}

	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   20598:	f895 1035 	ldrb.w	r1, [r5, #53]	; 0x35
			     net_pkt_ipv6_ext_len(pkt),
   2059c:	f895 203f 	ldrb.w	r2, [r5, #63]	; 0x3f
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   205a0:	9401      	str	r4, [sp, #4]
   205a2:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
   205a6:	2702      	movs	r7, #2
   205a8:	440a      	add	r2, r1
   205aa:	f10d 0316 	add.w	r3, sp, #22
   205ae:	68a9      	ldr	r1, [r5, #8]
   205b0:	9602      	str	r6, [sp, #8]
   205b2:	9700      	str	r7, [sp, #0]
   205b4:	4628      	mov	r0, r5
   205b6:	f7fb fb19 	bl	1bbec <net_pkt_write>
			     &pos, sizeof(hdr->src_port),
			     (u8_t *)&hdr->src_port, ALLOC_TIMEOUT);
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->dst_port),
			     (u8_t *)&hdr->dst_port, ALLOC_TIMEOUT);
   205ba:	19e3      	adds	r3, r4, r7
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->dst_port),
   205bc:	4601      	mov	r1, r0
   205be:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   205c2:	9301      	str	r3, [sp, #4]
   205c4:	9602      	str	r6, [sp, #8]
   205c6:	f10d 0316 	add.w	r3, sp, #22
   205ca:	9700      	str	r7, [sp, #0]
   205cc:	4628      	mov	r0, r5
   205ce:	f7fb fb0d 	bl	1bbec <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->seq), hdr->seq,
   205d2:	f04f 0904 	mov.w	r9, #4
   205d6:	1d23      	adds	r3, r4, #4
   205d8:	4601      	mov	r1, r0
   205da:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   205de:	9301      	str	r3, [sp, #4]
   205e0:	f8cd 9000 	str.w	r9, [sp]
   205e4:	f10d 0316 	add.w	r3, sp, #22
   205e8:	9602      	str	r6, [sp, #8]
   205ea:	4628      	mov	r0, r5
   205ec:	f7fb fafe 	bl	1bbec <net_pkt_write>
			     ALLOC_TIMEOUT);
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->ack), hdr->ack,
   205f0:	f104 0308 	add.w	r3, r4, #8
   205f4:	4601      	mov	r1, r0
   205f6:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   205fa:	9301      	str	r3, [sp, #4]
   205fc:	f8cd 9000 	str.w	r9, [sp]
   20600:	f10d 0316 	add.w	r3, sp, #22
   20604:	9602      	str	r6, [sp, #8]
   20606:	4628      	mov	r0, r5
   20608:	f7fb faf0 	bl	1bbec <net_pkt_write>
			     ALLOC_TIMEOUT);
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->offset),
   2060c:	f04f 0901 	mov.w	r9, #1
   20610:	f104 030c 	add.w	r3, r4, #12
   20614:	4601      	mov	r1, r0
   20616:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   2061a:	9301      	str	r3, [sp, #4]
   2061c:	9602      	str	r6, [sp, #8]
   2061e:	f10d 0316 	add.w	r3, sp, #22
   20622:	f8cd 9000 	str.w	r9, [sp]
   20626:	4628      	mov	r0, r5
   20628:	f7fb fae0 	bl	1bbec <net_pkt_write>
			     &hdr->offset, ALLOC_TIMEOUT);
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->flags),
   2062c:	f104 030d 	add.w	r3, r4, #13
   20630:	4601      	mov	r1, r0
   20632:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   20636:	9301      	str	r3, [sp, #4]
   20638:	9602      	str	r6, [sp, #8]
   2063a:	f10d 0316 	add.w	r3, sp, #22
   2063e:	f8cd 9000 	str.w	r9, [sp]
   20642:	4628      	mov	r0, r5
   20644:	f7fb fad2 	bl	1bbec <net_pkt_write>
			     &hdr->flags, ALLOC_TIMEOUT);
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->wnd), hdr->wnd,
   20648:	f104 030e 	add.w	r3, r4, #14
   2064c:	4601      	mov	r1, r0
   2064e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   20652:	9301      	str	r3, [sp, #4]
   20654:	9602      	str	r6, [sp, #8]
   20656:	f10d 0316 	add.w	r3, sp, #22
   2065a:	9700      	str	r7, [sp, #0]
   2065c:	4628      	mov	r0, r5
   2065e:	f7fb fac5 	bl	1bbec <net_pkt_write>
			     ALLOC_TIMEOUT);
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
			     (u8_t *)&hdr->chksum, ALLOC_TIMEOUT);
   20662:	f104 0310 	add.w	r3, r4, #16
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   20666:	4601      	mov	r1, r0
   20668:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   2066c:	9301      	str	r3, [sp, #4]
   2066e:	9602      	str	r6, [sp, #8]
   20670:	f10d 0316 	add.w	r3, sp, #22
   20674:	9700      	str	r7, [sp, #0]
   20676:	4628      	mov	r0, r5
   20678:	f7fb fab8 	bl	1bbec <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->urg), hdr->urg,
   2067c:	f104 0312 	add.w	r3, r4, #18
   20680:	9301      	str	r3, [sp, #4]
   20682:	4601      	mov	r1, r0
   20684:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   20688:	9602      	str	r6, [sp, #8]
   2068a:	9700      	str	r7, [sp, #0]
   2068c:	f10d 0316 	add.w	r3, sp, #22
   20690:	4628      	mov	r0, r5
   20692:	f7fb faab 	bl	1bbec <net_pkt_write>
	if (!frag) {
		NET_ASSERT(frag);
		return NULL;
	}

	return hdr;
   20696:	2800      	cmp	r0, #0
   20698:	bf08      	it	eq
   2069a:	4644      	moveq	r4, r8
}
   2069c:	4620      	mov	r0, r4
   2069e:	b007      	add	sp, #28
   206a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000206a4 <net_tcp_get_chksum>:

u16_t net_tcp_get_chksum(struct net_pkt *pkt, struct net_buf *frag)
{
   206a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   206a6:	4604      	mov	r4, r0
   206a8:	460e      	mov	r6, r1
	struct net_tcp_hdr *hdr;
	u16_t chksum;
	u16_t pos;

	hdr = net_pkt_tcp_data(pkt);
   206aa:	f7fb fb73 	bl	1bd94 <net_pkt_tcp_data>
   206ae:	4605      	mov	r5, r0
	if (net_tcp_header_fits(pkt, hdr)) {
   206b0:	4601      	mov	r1, r0
   206b2:	4620      	mov	r0, r4
   206b4:	f7ff fb42 	bl	1fd3c <net_tcp_header_fits>
   206b8:	b110      	cbz	r0, 206c0 <net_tcp_get_chksum+0x1c>
		return hdr->chksum;
   206ba:	8a28      	ldrh	r0, [r5, #16]
			     1 + 1 + 2 /* offset + flags + wnd */,
			     &pos, sizeof(chksum), (u8_t *)&chksum);
	NET_ASSERT(frag);

	return chksum;
}
   206bc:	b004      	add	sp, #16
   206be:	bd70      	pop	{r4, r5, r6, pc}
			     net_pkt_ipv6_ext_len(pkt) +
   206c0:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
			     net_pkt_ip_hdr_len(pkt) +
   206c4:	f894 1035 	ldrb.w	r1, [r4, #53]	; 0x35
	frag = net_frag_read(frag,
   206c8:	4419      	add	r1, r3
   206ca:	ab03      	add	r3, sp, #12
   206cc:	9300      	str	r3, [sp, #0]
   206ce:	f10d 020e 	add.w	r2, sp, #14
   206d2:	2302      	movs	r3, #2
   206d4:	3110      	adds	r1, #16
   206d6:	4630      	mov	r0, r6
   206d8:	f7fb fa34 	bl	1bb44 <net_frag_read>
	return chksum;
   206dc:	f8bd 000c 	ldrh.w	r0, [sp, #12]
   206e0:	e7ec      	b.n	206bc <net_tcp_get_chksum+0x18>

000206e2 <net_tcp_set_chksum>:

struct net_buf *net_tcp_set_chksum(struct net_pkt *pkt, struct net_buf *frag)
{
   206e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   206e6:	b086      	sub	sp, #24
	struct net_tcp_hdr *hdr;
	u16_t chksum = 0;
   206e8:	2700      	movs	r7, #0
{
   206ea:	4604      	mov	r4, r0
   206ec:	460e      	mov	r6, r1
	u16_t chksum = 0;
   206ee:	f8ad 7014 	strh.w	r7, [sp, #20]
	u16_t pos;

	hdr = net_pkt_tcp_data(pkt);
   206f2:	f7fb fb4f 	bl	1bd94 <net_pkt_tcp_data>
   206f6:	4605      	mov	r5, r0
	if (net_tcp_header_fits(pkt, hdr)) {
   206f8:	4601      	mov	r1, r0
   206fa:	4620      	mov	r0, r4
   206fc:	f7ff fb1e 	bl	1fd3c <net_tcp_header_fits>
   20700:	b158      	cbz	r0, 2071a <net_tcp_set_chksum+0x38>
		hdr->chksum = 0;
   20702:	742f      	strb	r7, [r5, #16]
   20704:	746f      	strb	r7, [r5, #17]
}

static inline u16_t net_calc_chksum_tcp(struct net_pkt *pkt)
{
	return net_calc_chksum(pkt, IPPROTO_TCP);
   20706:	2106      	movs	r1, #6
   20708:	4620      	mov	r0, r4
   2070a:	f7fb fca4 	bl	1c056 <net_calc_chksum>
		hdr->chksum = ~net_calc_chksum_tcp(pkt);
   2070e:	43c0      	mvns	r0, r0
   20710:	8228      	strh	r0, [r5, #16]
			     (u8_t *)&chksum, ALLOC_TIMEOUT);

	NET_ASSERT(frag);

	return frag;
}
   20712:	4630      	mov	r0, r6
   20714:	b006      	add	sp, #24
   20716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			     net_pkt_ipv6_ext_len(pkt) +
   2071a:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
			     net_pkt_ip_hdr_len(pkt) +
   2071e:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
	frag = net_pkt_write(pkt, frag,
   20722:	f44f 78fa 	mov.w	r8, #500	; 0x1f4
   20726:	441a      	add	r2, r3
   20728:	ad05      	add	r5, sp, #20
   2072a:	2702      	movs	r7, #2
   2072c:	f10d 0316 	add.w	r3, sp, #22
   20730:	3210      	adds	r2, #16
   20732:	4631      	mov	r1, r6
   20734:	f8cd 8008 	str.w	r8, [sp, #8]
   20738:	9501      	str	r5, [sp, #4]
   2073a:	9700      	str	r7, [sp, #0]
   2073c:	4620      	mov	r0, r4
   2073e:	f7fb fa55 	bl	1bbec <net_pkt_write>
   20742:	2106      	movs	r1, #6
   20744:	4606      	mov	r6, r0
   20746:	4620      	mov	r0, r4
   20748:	f7fb fc85 	bl	1c056 <net_calc_chksum>
	frag = net_pkt_write(pkt, frag, pos - 2, &pos, sizeof(chksum),
   2074c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   20750:	f8cd 8008 	str.w	r8, [sp, #8]
	chksum = ~net_calc_chksum_tcp(pkt);
   20754:	43c0      	mvns	r0, r0
	frag = net_pkt_write(pkt, frag, pos - 2, &pos, sizeof(chksum),
   20756:	3a02      	subs	r2, #2
	chksum = ~net_calc_chksum_tcp(pkt);
   20758:	f8ad 0014 	strh.w	r0, [sp, #20]
	frag = net_pkt_write(pkt, frag, pos - 2, &pos, sizeof(chksum),
   2075c:	4631      	mov	r1, r6
   2075e:	9501      	str	r5, [sp, #4]
   20760:	9700      	str	r7, [sp, #0]
   20762:	f10d 0316 	add.w	r3, sp, #22
   20766:	b292      	uxth	r2, r2
   20768:	4620      	mov	r0, r4
   2076a:	f7fb fa3f 	bl	1bbec <net_pkt_write>
   2076e:	4606      	mov	r6, r0
	return frag;
   20770:	e7cf      	b.n	20712 <net_tcp_set_chksum+0x30>

00020772 <net_tcp_send_pkt>:
{
   20772:	b570      	push	{r4, r5, r6, lr}
   20774:	b086      	sub	sp, #24
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   20776:	a901      	add	r1, sp, #4
{
   20778:	4605      	mov	r5, r0
   2077a:	68c6      	ldr	r6, [r0, #12]
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   2077c:	f7ff fdee 	bl	2035c <net_tcp_get_hdr>
	if (!tcp_hdr) {
   20780:	4604      	mov	r4, r0
   20782:	2800      	cmp	r0, #0
   20784:	d060      	beq.n	20848 <net_tcp_send_pkt+0xd6>
	if (sys_get_be32(tcp_hdr->ack) != ctx->tcp->send_ack) {
   20786:	3008      	adds	r0, #8
   20788:	f7ff facd 	bl	1fd26 <sys_get_be32>
   2078c:	6e33      	ldr	r3, [r6, #96]	; 0x60
   2078e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   20792:	4298      	cmp	r0, r3
   20794:	d01a      	beq.n	207cc <net_tcp_send_pkt+0x5a>
	sys_put_be16(val >> 16, dst);
   20796:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val >> 8;
   20798:	0a11      	lsrs	r1, r2, #8
	dst[1] = val;
   2079a:	7262      	strb	r2, [r4, #9]
	dst[0] = val >> 8;
   2079c:	f3c3 2207 	ubfx	r2, r3, #8, #8
   207a0:	72a2      	strb	r2, [r4, #10]
   207a2:	7221      	strb	r1, [r4, #8]
	dst[1] = val;
   207a4:	72e3      	strb	r3, [r4, #11]
		calc_chksum = true;
   207a6:	2201      	movs	r2, #1
	if (ctx->tcp->sent_ack != ctx->tcp->send_ack &&
   207a8:	6e33      	ldr	r3, [r6, #96]	; 0x60
   207aa:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
   207ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   207b2:	4299      	cmp	r1, r3
   207b4:	d00c      	beq.n	207d0 <net_tcp_send_pkt+0x5e>
		(tcp_hdr->flags & NET_TCP_ACK) == 0) {
   207b6:	7b63      	ldrb	r3, [r4, #13]
	if (ctx->tcp->sent_ack != ctx->tcp->send_ack &&
   207b8:	06d9      	lsls	r1, r3, #27
   207ba:	d409      	bmi.n	207d0 <net_tcp_send_pkt+0x5e>
		tcp_hdr->flags |= NET_TCP_ACK;
   207bc:	f043 0310 	orr.w	r3, r3, #16
   207c0:	7363      	strb	r3, [r4, #13]
		net_tcp_set_chksum(pkt, pkt->frags);
   207c2:	68a9      	ldr	r1, [r5, #8]
   207c4:	4628      	mov	r0, r5
   207c6:	f7ff ff8c 	bl	206e2 <net_tcp_set_chksum>
   207ca:	e003      	b.n	207d4 <net_tcp_send_pkt+0x62>
	bool calc_chksum = false;
   207cc:	2200      	movs	r2, #0
   207ce:	e7eb      	b.n	207a8 <net_tcp_send_pkt+0x36>
	if (calc_chksum) {
   207d0:	2a00      	cmp	r2, #0
   207d2:	d1f6      	bne.n	207c2 <net_tcp_send_pkt+0x50>
	if (tcp_hdr->flags & NET_TCP_FIN) {
   207d4:	7b63      	ldrb	r3, [r4, #13]
   207d6:	07db      	lsls	r3, r3, #31
		ctx->tcp->fin_sent = 1;
   207d8:	bf41      	itttt	mi
   207da:	6e32      	ldrmi	r2, [r6, #96]	; 0x60
   207dc:	f892 30be 	ldrbmi.w	r3, [r2, #190]	; 0xbe
   207e0:	f043 0302 	orrmi.w	r3, r3, #2
   207e4:	f882 30be 	strbmi.w	r3, [r2, #190]	; 0xbe
	ctx->tcp->sent_ack = ctx->tcp->send_ack;
   207e8:	6e33      	ldr	r3, [r6, #96]	; 0x60
   207ea:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
   207ee:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	net_tcp_set_hdr(pkt, tcp_hdr);
   207f2:	4621      	mov	r1, r4
   207f4:	4628      	mov	r0, r5
   207f6:	f7ff fec4 	bl	20582 <net_tcp_set_hdr>
	return pkt->family;
   207fa:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
	if (is_6lo_technology(pkt)) {
   207fe:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   20802:	2b0a      	cmp	r3, #10
   20804:	d111      	bne.n	2082a <net_tcp_send_pkt+0xb8>
   20806:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
   2080a:	2b02      	cmp	r3, #2
   2080c:	d10d      	bne.n	2082a <net_tcp_send_pkt+0xb8>
   2080e:	6e33      	ldr	r3, [r6, #96]	; 0x60
   20810:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
		SYS_SLIST_FOR_EACH_CONTAINER(&ctx->tcp->sent_list,
   20814:	b100      	cbz	r0, 20818 <net_tcp_send_pkt+0xa6>
   20816:	3838      	subs	r0, #56	; 0x38
   20818:	b138      	cbz	r0, 2082a <net_tcp_send_pkt+0xb8>
			if (check_pkt == pkt) {
   2081a:	42a8      	cmp	r0, r5
   2081c:	d017      	beq.n	2084e <net_tcp_send_pkt+0xdc>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   2081e:	f110 0f38 	cmn.w	r0, #56	; 0x38
   20822:	d002      	beq.n	2082a <net_tcp_send_pkt+0xb8>
	return node->next;
   20824:	6b80      	ldr	r0, [r0, #56]	; 0x38
		SYS_SLIST_FOR_EACH_CONTAINER(&ctx->tcp->sent_list,
   20826:	2800      	cmp	r0, #0
   20828:	d1f5      	bne.n	20816 <net_tcp_send_pkt+0xa4>
	return net_send_data(pkt);
   2082a:	4628      	mov	r0, r5
   2082c:	f7f9 fec6 	bl	1a5bc <net_send_data>
   20830:	4604      	mov	r4, r0
   20832:	e006      	b.n	20842 <net_tcp_send_pkt+0xd0>
			ret = net_send_data(new_pkt);
   20834:	f7f9 fec2 	bl	1a5bc <net_send_data>
			if (ret < 0) {
   20838:	1e04      	subs	r4, r0, #0
   2083a:	da02      	bge.n	20842 <net_tcp_send_pkt+0xd0>
				net_pkt_unref(new_pkt);
   2083c:	4628      	mov	r0, r5
   2083e:	f7fb f826 	bl	1b88e <net_pkt_unref>
}
   20842:	4620      	mov	r0, r4
   20844:	b006      	add	sp, #24
   20846:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   20848:	f06f 0423 	mvn.w	r4, #35	; 0x23
   2084c:	e7f9      	b.n	20842 <net_tcp_send_pkt+0xd0>
			new_pkt = net_pkt_clone(pkt, ALLOC_TIMEOUT);
   2084e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   20852:	f7fb fab1 	bl	1bdb8 <net_pkt_clone>
			if (!new_pkt) {
   20856:	4605      	mov	r5, r0
   20858:	2800      	cmp	r0, #0
   2085a:	d1eb      	bne.n	20834 <net_tcp_send_pkt+0xc2>
				return -ENOMEM;
   2085c:	f06f 040b 	mvn.w	r4, #11
   20860:	e7ef      	b.n	20842 <net_tcp_send_pkt+0xd0>
	...

00020864 <tcp_retry_expired>:
	if (!sys_slist_is_empty(&tcp->sent_list)) {
   20864:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   20866:	b570      	push	{r4, r5, r6, lr}
   20868:	4604      	mov	r4, r0
	if (!sys_slist_is_empty(&tcp->sent_list)) {
   2086a:	2b00      	cmp	r3, #0
   2086c:	d052      	beq.n	20914 <tcp_retry_expired+0xb0>
		tcp->retry_timeout_shift++;
   2086e:	f890 2064 	ldrb.w	r2, [r0, #100]	; 0x64
   20872:	1c53      	adds	r3, r2, #1
   20874:	f003 031f 	and.w	r3, r3, #31
   20878:	f363 0204 	bfi	r2, r3, #0, #5
		if (tcp->retry_timeout_shift > CONFIG_NET_TCP_RETRY_COUNT) {
   2087c:	2b09      	cmp	r3, #9
		tcp->retry_timeout_shift++;
   2087e:	f880 2064 	strb.w	r2, [r0, #100]	; 0x64
		if (tcp->retry_timeout_shift > CONFIG_NET_TCP_RETRY_COUNT) {
   20882:	d90f      	bls.n	208a4 <tcp_retry_expired+0x40>
	struct net_context *ctx = tcp->context;
   20884:	f850 5c58 	ldr.w	r5, [r0, #-88]
	if (ctx->recv_cb) {
   20888:	6b2e      	ldr	r6, [r5, #48]	; 0x30
   2088a:	b136      	cbz	r6, 2089a <tcp_retry_expired+0x36>
		ctx->recv_cb(ctx, NULL, -ECONNRESET, tcp->recv_user_data);
   2088c:	f850 3c54 	ldr.w	r3, [r0, #-84]
   20890:	f06f 0235 	mvn.w	r2, #53	; 0x35
   20894:	2100      	movs	r1, #0
   20896:	4628      	mov	r0, r5
   20898:	47b0      	blx	r6
	net_context_unref(ctx);
   2089a:	4628      	mov	r0, r5
}
   2089c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	net_context_unref(ctx);
   208a0:	f7f9 b85c 	b.w	1995c <net_context_unref>
   208a4:	22c8      	movs	r2, #200	; 0xc8
   208a6:	409a      	lsls	r2, r3
   208a8:	4601      	mov	r1, r0
   208aa:	481b      	ldr	r0, [pc, #108]	; (20918 <tcp_retry_expired+0xb4>)
   208ac:	f001 fd26 	bl	222fc <k_delayed_work_submit_to_queue>
   208b0:	6d22      	ldr	r2, [r4, #80]	; 0x50
	return pkt->sent_or_eof;
   208b2:	7913      	ldrb	r3, [r2, #4]
		if (net_pkt_sent(pkt)) {
   208b4:	07d9      	lsls	r1, r3, #31
		pkt = CONTAINER_OF(sys_slist_peek_head(&tcp->sent_list),
   208b6:	f1a2 0438 	sub.w	r4, r2, #56	; 0x38
		if (net_pkt_sent(pkt)) {
   208ba:	d511      	bpl.n	208e0 <tcp_retry_expired+0x7c>
			do_ref_if_needed(tcp, pkt);
   208bc:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   208c0:	2b0a      	cmp	r3, #10
   208c2:	d103      	bne.n	208cc <tcp_retry_expired+0x68>
   208c4:	f812 3c0b 	ldrb.w	r3, [r2, #-11]
   208c8:	2b02      	cmp	r3, #2
   208ca:	d003      	beq.n	208d4 <tcp_retry_expired+0x70>
   208cc:	4620      	mov	r0, r4
   208ce:	f7fa ffd3 	bl	1b878 <net_pkt_ref>
   208d2:	4604      	mov	r4, r0
	pkt->sent_or_eof = sent;
   208d4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   208d8:	f36f 0300 	bfc	r3, #0, #1
   208dc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	pkt->pkt_queued = send;
   208e0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   208e4:	f043 0302 	orr.w	r3, r3, #2
   208e8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		if (net_tcp_send_pkt(pkt) < 0 && !is_6lo_technology(pkt)) {
   208ec:	4620      	mov	r0, r4
   208ee:	f7ff ff40 	bl	20772 <net_tcp_send_pkt>
   208f2:	2800      	cmp	r0, #0
   208f4:	da0e      	bge.n	20914 <tcp_retry_expired+0xb0>
	return pkt->family;
   208f6:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   208fa:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   208fe:	2b0a      	cmp	r3, #10
   20900:	d103      	bne.n	2090a <tcp_retry_expired+0xa6>
   20902:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   20906:	2b02      	cmp	r3, #2
   20908:	d004      	beq.n	20914 <tcp_retry_expired+0xb0>
			net_pkt_unref(pkt);
   2090a:	4620      	mov	r0, r4
}
   2090c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_pkt_unref(pkt);
   20910:	f7fa bfbd 	b.w	1b88e <net_pkt_unref>
   20914:	bd70      	pop	{r4, r5, r6, pc}
   20916:	bf00      	nop
   20918:	20003340 	.word	0x20003340

0002091c <net_tcp_send_data>:
{
   2091c:	6e03      	ldr	r3, [r0, #96]	; 0x60
   2091e:	b510      	push	{r4, lr}
   20920:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
	SYS_SLIST_FOR_EACH_CONTAINER(&context->tcp->sent_list, pkt, sent_list) {
   20924:	b10c      	cbz	r4, 2092a <net_tcp_send_data+0xe>
   20926:	3c38      	subs	r4, #56	; 0x38
   20928:	b90c      	cbnz	r4, 2092e <net_tcp_send_data+0x12>
}
   2092a:	2000      	movs	r0, #0
   2092c:	bd10      	pop	{r4, pc}
	return pkt->pkt_queued;
   2092e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
		if (net_pkt_queued(pkt)) {
   20932:	079a      	lsls	r2, r3, #30
   20934:	d419      	bmi.n	2096a <net_tcp_send_data+0x4e>
		if (!net_pkt_sent(pkt)) {
   20936:	07db      	lsls	r3, r3, #31
   20938:	d417      	bmi.n	2096a <net_tcp_send_data+0x4e>
			ret = net_tcp_send_pkt(pkt);
   2093a:	4620      	mov	r0, r4
   2093c:	f7ff ff19 	bl	20772 <net_tcp_send_pkt>
			if (ret < 0 && !is_6lo_technology(pkt)) {
   20940:	2800      	cmp	r0, #0
   20942:	da0c      	bge.n	2095e <net_tcp_send_data+0x42>
	return pkt->family;
   20944:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   20948:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   2094c:	2b0a      	cmp	r3, #10
   2094e:	d103      	bne.n	20958 <net_tcp_send_data+0x3c>
   20950:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   20954:	2b02      	cmp	r3, #2
   20956:	d002      	beq.n	2095e <net_tcp_send_data+0x42>
				net_pkt_unref(pkt);
   20958:	4620      	mov	r0, r4
   2095a:	f7fa ff98 	bl	1b88e <net_pkt_unref>
	pkt->pkt_queued = send;
   2095e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   20962:	f043 0302 	orr.w	r3, r3, #2
   20966:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   2096a:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   2096c:	e7da      	b.n	20924 <net_tcp_send_data+0x8>

0002096e <net_tcp_parse_opts>:

int net_tcp_parse_opts(struct net_pkt *pkt, int opt_totlen,
		       struct net_tcp_options *opts)
{
   2096e:	b5f0      	push	{r4, r5, r6, r7, lr}
   20970:	4615      	mov	r5, r2
	struct net_buf *frag = pkt->frags;
	u16_t pos = net_pkt_ip_hdr_len(pkt)
   20972:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
		  + net_pkt_ipv6_ext_len(pkt)
   20976:	f890 203f 	ldrb.w	r2, [r0, #63]	; 0x3f
	struct net_buf *frag = pkt->frags;
   2097a:	6886      	ldr	r6, [r0, #8]
		  + sizeof(struct net_tcp_hdr);
   2097c:	4413      	add	r3, r2
{
   2097e:	b085      	sub	sp, #20
		  + sizeof(struct net_tcp_hdr);
   20980:	3314      	adds	r3, #20
{
   20982:	460c      	mov	r4, r1
	u16_t pos = net_pkt_ip_hdr_len(pkt)
   20984:	f8ad 300e 	strh.w	r3, [sp, #14]
	u8_t opt, optlen;

	/* TODO: this should be done for each TCP pkt, on reception */
	if (pos + opt_totlen > net_pkt_get_len(pkt)) {
   20988:	4632      	mov	r2, r6
   2098a:	440b      	add	r3, r1
	size_t bytes = 0;
   2098c:	2100      	movs	r1, #0
	while (buf) {
   2098e:	b99a      	cbnz	r2, 209b8 <net_tcp_parse_opts+0x4a>
   20990:	428b      	cmp	r3, r1
   20992:	d815      	bhi.n	209c0 <net_tcp_parse_opts+0x52>
			(int)net_pkt_get_len(pkt), pos + opt_totlen);
		return -EINVAL;
	}

	while (opt_totlen) {
		frag = net_frag_read(frag, pos, &pos, sizeof(opt), &opt);
   20994:	af03      	add	r7, sp, #12
	while (opt_totlen) {
   20996:	b16c      	cbz	r4, 209b4 <net_tcp_parse_opts+0x46>
		frag = net_frag_read(frag, pos, &pos, sizeof(opt), &opt);
   20998:	2301      	movs	r3, #1
   2099a:	f10d 020e 	add.w	r2, sp, #14
   2099e:	4630      	mov	r0, r6
   209a0:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   209a4:	9700      	str	r7, [sp, #0]
   209a6:	f7fb f8cd 	bl	1bb44 <net_frag_read>
		/* "Options 0 and 1 are exactly one octet which is their
		 * kind field.  All other options have their one octet
		 * kind field, followed by a one octet length field,
		 * followed by length-2 octets of option data."
		 */
		if (opt == NET_TCP_END_OPT) {
   209aa:	f89d 200c 	ldrb.w	r2, [sp, #12]
		frag = net_frag_read(frag, pos, &pos, sizeof(opt), &opt);
   209ae:	4606      	mov	r6, r0
		opt_totlen--;
   209b0:	1e63      	subs	r3, r4, #1
		if (opt == NET_TCP_END_OPT) {
   209b2:	b94a      	cbnz	r2, 209c8 <net_tcp_parse_opts+0x5a>
		}

		opt_totlen -= optlen;
	}

	return 0;
   209b4:	2000      	movs	r0, #0
   209b6:	e005      	b.n	209c4 <net_tcp_parse_opts+0x56>
		bytes += buf->len;
   209b8:	8990      	ldrh	r0, [r2, #12]
		buf = buf->frags;
   209ba:	6812      	ldr	r2, [r2, #0]
		bytes += buf->len;
   209bc:	4401      	add	r1, r0
   209be:	e7e6      	b.n	2098e <net_tcp_parse_opts+0x20>
		return -EINVAL;
   209c0:	f06f 0015 	mvn.w	r0, #21

error:
	NET_ERR("Invalid TCP opt: %d len: %d", opt, optlen);
	return -EINVAL;
}
   209c4:	b005      	add	sp, #20
   209c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (opt == NET_TCP_NOP_OPT) {
   209c8:	2a01      	cmp	r2, #1
   209ca:	d032      	beq.n	20a32 <net_tcp_parse_opts+0xc4>
		if (!opt_totlen) {
   209cc:	2b00      	cmp	r3, #0
   209ce:	d0f7      	beq.n	209c0 <net_tcp_parse_opts+0x52>
		frag = net_frag_read(frag, pos, &pos, sizeof(optlen), &optlen);
   209d0:	f10d 030d 	add.w	r3, sp, #13
   209d4:	9300      	str	r3, [sp, #0]
   209d6:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   209da:	2301      	movs	r3, #1
   209dc:	f10d 020e 	add.w	r2, sp, #14
   209e0:	f7fb f8b0 	bl	1bb44 <net_frag_read>
		if (optlen < 2) {
   209e4:	f89d 300d 	ldrb.w	r3, [sp, #13]
   209e8:	2b01      	cmp	r3, #1
		opt_totlen--;
   209ea:	f1a4 0402 	sub.w	r4, r4, #2
		if (optlen < 2) {
   209ee:	d9e7      	bls.n	209c0 <net_tcp_parse_opts+0x52>
		optlen -= 2;
   209f0:	3b02      	subs	r3, #2
   209f2:	b2db      	uxtb	r3, r3
		if (opt_totlen < optlen) {
   209f4:	429c      	cmp	r4, r3
		optlen -= 2;
   209f6:	f88d 300d 	strb.w	r3, [sp, #13]
		if (opt_totlen < optlen) {
   209fa:	dbe1      	blt.n	209c0 <net_tcp_parse_opts+0x52>
		switch (opt) {
   209fc:	f89d 200c 	ldrb.w	r2, [sp, #12]
   20a00:	2a02      	cmp	r2, #2
   20a02:	d10d      	bne.n	20a20 <net_tcp_parse_opts+0xb2>
			if (optlen != 2) {
   20a04:	2b02      	cmp	r3, #2
   20a06:	d1db      	bne.n	209c0 <net_tcp_parse_opts+0x52>
			frag = net_frag_read_be16(frag, pos, &pos,
   20a08:	462b      	mov	r3, r5
   20a0a:	f10d 020e 	add.w	r2, sp, #14
   20a0e:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   20a12:	f7fb f8cf 	bl	1bbb4 <net_frag_read_be16>
		opt_totlen -= optlen;
   20a16:	f89d 300d 	ldrb.w	r3, [sp, #13]
	return net_frag_read(frag, offset, pos, len, NULL);
   20a1a:	4606      	mov	r6, r0
   20a1c:	1ae4      	subs	r4, r4, r3
   20a1e:	e7ba      	b.n	20996 <net_tcp_parse_opts+0x28>
   20a20:	2200      	movs	r2, #0
   20a22:	9200      	str	r2, [sp, #0]
   20a24:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   20a28:	f10d 020e 	add.w	r2, sp, #14
   20a2c:	f7fb f88a 	bl	1bb44 <net_frag_read>
   20a30:	e7f1      	b.n	20a16 <net_tcp_parse_opts+0xa8>
		opt_totlen--;
   20a32:	461c      	mov	r4, r3
   20a34:	e7af      	b.n	20996 <net_tcp_parse_opts+0x28>

00020a36 <net_udp_header_fits>:
{
   20a36:	b510      	push	{r4, lr}
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   20a38:	2208      	movs	r2, #8
{
   20a3a:	460c      	mov	r4, r1
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   20a3c:	f7fb fb5e 	bl	1c0fc <net_header_fits>
   20a40:	2800      	cmp	r0, #0
}
   20a42:	bf14      	ite	ne
   20a44:	4620      	movne	r0, r4
   20a46:	2000      	moveq	r0, #0
   20a48:	bd10      	pop	{r4, pc}

00020a4a <net_udp_insert_raw>:

struct net_pkt *net_udp_insert_raw(struct net_pkt *pkt,
				   u16_t offset,
				   u16_t src_port,
				   u16_t dst_port)
{
   20a4a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   20a4e:	f8ad 2006 	strh.w	r2, [sp, #6]
	struct net_buf *frag, *prev, *udp;
	u16_t pos;

	frag = net_frag_get_pos(pkt, offset, &pos);
   20a52:	f10d 020e 	add.w	r2, sp, #14
{
   20a56:	f8ad 3004 	strh.w	r3, [sp, #4]
   20a5a:	4604      	mov	r4, r0
	frag = net_frag_get_pos(pkt, offset, &pos);
   20a5c:	f7fb f959 	bl	1bd12 <net_frag_get_pos>
   20a60:	f8bd 300e 	ldrh.w	r3, [sp, #14]
	if (!frag && pos == 0xffff) {
   20a64:	b940      	cbnz	r0, 20a78 <net_udp_insert_raw+0x2e>
   20a66:	f64f 72ff 	movw	r2, #65535	; 0xffff
   20a6a:	4293      	cmp	r3, r2
   20a6c:	d106      	bne.n	20a7c <net_udp_insert_raw+0x32>
		NET_DBG("Offset %d out of pkt len %zd",
			offset, net_pkt_get_len(pkt));
		return NULL;
   20a6e:	2400      	movs	r4, #0
	return pkt;

fail:
	NET_DBG("Cannot insert UDP header into %p", pkt);
	return NULL;
}
   20a70:	4620      	mov	r0, r4
   20a72:	b004      	add	sp, #16
   20a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (frag && pos != 0) {
   20a78:	2b00      	cmp	r3, #0
   20a7a:	d1f8      	bne.n	20a6e <net_udp_insert_raw+0x24>
	if (pkt->frags != frag) {
   20a7c:	68a5      	ldr	r5, [r4, #8]
   20a7e:	42a8      	cmp	r0, r5
   20a80:	d143      	bne.n	20b0a <net_udp_insert_raw+0xc0>
	if (!prev) {
   20a82:	2d00      	cmp	r5, #0
   20a84:	d0f3      	beq.n	20a6e <net_udp_insert_raw+0x24>
	udp = net_pkt_get_frag(pkt, PKT_WAIT_TIME);
   20a86:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   20a8a:	4620      	mov	r0, r4
   20a8c:	f7fa fe9a 	bl	1b7c4 <net_pkt_get_frag>
	if (!udp) {
   20a90:	4680      	mov	r8, r0
   20a92:	2800      	cmp	r0, #0
   20a94:	d0eb      	beq.n	20a6e <net_udp_insert_raw+0x24>
	net_buf_add_mem(udp, &src_port, sizeof(src_port));
   20a96:	f100 0708 	add.w	r7, r0, #8
   20a9a:	2202      	movs	r2, #2
   20a9c:	f10d 0106 	add.w	r1, sp, #6
   20aa0:	4638      	mov	r0, r7
   20aa2:	f7f8 fc89 	bl	193b8 <net_buf_simple_add_mem>
	net_buf_add_mem(udp, &dst_port, sizeof(dst_port));
   20aa6:	2202      	movs	r2, #2
   20aa8:	a901      	add	r1, sp, #4
   20aaa:	4638      	mov	r0, r7
   20aac:	f7f8 fc84 	bl	193b8 <net_buf_simple_add_mem>
   20ab0:	68a6      	ldr	r6, [r4, #8]
	size_t bytes = 0;
   20ab2:	2300      	movs	r3, #0
	while (buf) {
   20ab4:	bb6e      	cbnz	r6, 20b12 <net_udp_insert_raw+0xc8>
	net_buf_add_be16(udp, net_pkt_get_len(pkt) -
   20ab6:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
   20aba:	f894 1035 	ldrb.w	r1, [r4, #53]	; 0x35
   20abe:	4411      	add	r1, r2
   20ac0:	f1c1 0108 	rsb	r1, r1, #8
   20ac4:	4419      	add	r1, r3
   20ac6:	b289      	uxth	r1, r1
   20ac8:	4638      	mov	r0, r7
   20aca:	f7f8 fc95 	bl	193f8 <net_buf_simple_add_be16>
	net_buf_add_be16(udp, 0); /* chksum */
   20ace:	4631      	mov	r1, r6
   20ad0:	4638      	mov	r0, r7
   20ad2:	f7f8 fc91 	bl	193f8 <net_buf_simple_add_be16>
	net_buf_frag_insert(prev, udp);
   20ad6:	4641      	mov	r1, r8
   20ad8:	4628      	mov	r0, r5
   20ada:	f7f8 fc40 	bl	1935e <net_buf_frag_insert>
	frag = net_frag_get_pos(pkt, net_pkt_ip_hdr_len(pkt) +
   20ade:	f894 1035 	ldrb.w	r1, [r4, #53]	; 0x35
				net_pkt_ipv6_ext_len(pkt) +
   20ae2:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
	frag = net_frag_get_pos(pkt, net_pkt_ip_hdr_len(pkt) +
   20ae6:	4419      	add	r1, r3
   20ae8:	f10d 020e 	add.w	r2, sp, #14
   20aec:	3108      	adds	r1, #8
   20aee:	4620      	mov	r0, r4
   20af0:	f7fb f90f 	bl	1bd12 <net_frag_get_pos>
	if (frag) {
   20af4:	2800      	cmp	r0, #0
   20af6:	d0bb      	beq.n	20a70 <net_udp_insert_raw+0x26>
		net_pkt_set_appdata(pkt, frag->data + pos);
   20af8:	6883      	ldr	r3, [r0, #8]
   20afa:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   20afe:	4413      	add	r3, r2
	pkt->appdata = data;
   20b00:	61a3      	str	r3, [r4, #24]
   20b02:	e7b5      	b.n	20a70 <net_udp_insert_raw+0x26>
			if (tmp->frags == frag) {
   20b04:	4298      	cmp	r0, r3
   20b06:	d0be      	beq.n	20a86 <net_udp_insert_raw+0x3c>
   20b08:	461d      	mov	r5, r3
		while (tmp->frags) {
   20b0a:	682b      	ldr	r3, [r5, #0]
   20b0c:	2b00      	cmp	r3, #0
   20b0e:	d1f9      	bne.n	20b04 <net_udp_insert_raw+0xba>
   20b10:	e7ad      	b.n	20a6e <net_udp_insert_raw+0x24>
		bytes += buf->len;
   20b12:	89b2      	ldrh	r2, [r6, #12]
		buf = buf->frags;
   20b14:	6836      	ldr	r6, [r6, #0]
		bytes += buf->len;
   20b16:	4413      	add	r3, r2
   20b18:	e7cc      	b.n	20ab4 <net_udp_insert_raw+0x6a>

00020b1a <net_udp_set_chksum>:

struct net_buf *net_udp_set_chksum(struct net_pkt *pkt, struct net_buf *frag)
{
   20b1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20b1e:	b086      	sub	sp, #24
	struct net_udp_hdr *hdr;
	u16_t chksum = 0;
   20b20:	2700      	movs	r7, #0
{
   20b22:	4604      	mov	r4, r0
   20b24:	460e      	mov	r6, r1
	u16_t chksum = 0;
   20b26:	f8ad 7014 	strh.w	r7, [sp, #20]
	u16_t pos;

	hdr = net_pkt_udp_data(pkt);
   20b2a:	f7fb f921 	bl	1bd70 <net_pkt_udp_data>
   20b2e:	4605      	mov	r5, r0
	if (net_udp_header_fits(pkt, hdr)) {
   20b30:	4601      	mov	r1, r0
   20b32:	4620      	mov	r0, r4
   20b34:	f7ff ff7f 	bl	20a36 <net_udp_header_fits>
   20b38:	b158      	cbz	r0, 20b52 <net_udp_set_chksum+0x38>
		hdr->chksum = 0;
   20b3a:	71af      	strb	r7, [r5, #6]
   20b3c:	71ef      	strb	r7, [r5, #7]
	return net_calc_chksum(pkt, IPPROTO_UDP);
   20b3e:	2111      	movs	r1, #17
   20b40:	4620      	mov	r0, r4
   20b42:	f7fb fa88 	bl	1c056 <net_calc_chksum>
		hdr->chksum = ~net_calc_chksum_udp(pkt);
   20b46:	43c0      	mvns	r0, r0
   20b48:	80e8      	strh	r0, [r5, #6]
			     (u8_t *)&chksum, PKT_WAIT_TIME);

	NET_ASSERT(frag);

	return frag;
}
   20b4a:	4630      	mov	r0, r6
   20b4c:	b006      	add	sp, #24
   20b4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			     net_pkt_ipv6_ext_len(pkt) +
   20b52:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
			     net_pkt_ip_hdr_len(pkt) +
   20b56:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
	frag = net_pkt_write(pkt, frag,
   20b5a:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   20b5e:	441a      	add	r2, r3
   20b60:	ad05      	add	r5, sp, #20
   20b62:	2702      	movs	r7, #2
   20b64:	f10d 0316 	add.w	r3, sp, #22
   20b68:	3206      	adds	r2, #6
   20b6a:	4631      	mov	r1, r6
   20b6c:	f8cd 8008 	str.w	r8, [sp, #8]
   20b70:	9501      	str	r5, [sp, #4]
   20b72:	9700      	str	r7, [sp, #0]
   20b74:	4620      	mov	r0, r4
   20b76:	f7fb f839 	bl	1bbec <net_pkt_write>
   20b7a:	2111      	movs	r1, #17
   20b7c:	4606      	mov	r6, r0
   20b7e:	4620      	mov	r0, r4
   20b80:	f7fb fa69 	bl	1c056 <net_calc_chksum>
	frag = net_pkt_write(pkt, frag, pos - 2, &pos, sizeof(chksum),
   20b84:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   20b88:	f8cd 8008 	str.w	r8, [sp, #8]
	chksum = ~net_calc_chksum_udp(pkt);
   20b8c:	43c0      	mvns	r0, r0
	frag = net_pkt_write(pkt, frag, pos - 2, &pos, sizeof(chksum),
   20b8e:	3a02      	subs	r2, #2
	chksum = ~net_calc_chksum_udp(pkt);
   20b90:	f8ad 0014 	strh.w	r0, [sp, #20]
	frag = net_pkt_write(pkt, frag, pos - 2, &pos, sizeof(chksum),
   20b94:	4631      	mov	r1, r6
   20b96:	9501      	str	r5, [sp, #4]
   20b98:	9700      	str	r7, [sp, #0]
   20b9a:	f10d 0316 	add.w	r3, sp, #22
   20b9e:	b292      	uxth	r2, r2
   20ba0:	4620      	mov	r0, r4
   20ba2:	f7fb f823 	bl	1bbec <net_pkt_write>
   20ba6:	4606      	mov	r6, r0
	return frag;
   20ba8:	e7cf      	b.n	20b4a <net_udp_set_chksum+0x30>

00020baa <net_udp_get_chksum>:

u16_t net_udp_get_chksum(struct net_pkt *pkt, struct net_buf *frag)
{
   20baa:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   20bac:	4604      	mov	r4, r0
   20bae:	460e      	mov	r6, r1
	struct net_udp_hdr *hdr;
	u16_t chksum;
	u16_t pos;

	hdr = net_pkt_udp_data(pkt);
   20bb0:	f7fb f8de 	bl	1bd70 <net_pkt_udp_data>
   20bb4:	4605      	mov	r5, r0
	if (net_udp_header_fits(pkt, hdr)) {
   20bb6:	4601      	mov	r1, r0
   20bb8:	4620      	mov	r0, r4
   20bba:	f7ff ff3c 	bl	20a36 <net_udp_header_fits>
   20bbe:	b110      	cbz	r0, 20bc6 <net_udp_get_chksum+0x1c>
		return hdr->chksum;
   20bc0:	88e8      	ldrh	r0, [r5, #6]
			     2 + 2 + 2 /* src + dst + len */,
			     &pos, sizeof(chksum), (u8_t *)&chksum);
	NET_ASSERT(frag);

	return chksum;
}
   20bc2:	b004      	add	sp, #16
   20bc4:	bd70      	pop	{r4, r5, r6, pc}
			     net_pkt_ipv6_ext_len(pkt) +
   20bc6:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
			     net_pkt_ip_hdr_len(pkt) +
   20bca:	f894 1035 	ldrb.w	r1, [r4, #53]	; 0x35
	frag = net_frag_read(frag,
   20bce:	4419      	add	r1, r3
   20bd0:	ab03      	add	r3, sp, #12
   20bd2:	9300      	str	r3, [sp, #0]
   20bd4:	f10d 020e 	add.w	r2, sp, #14
   20bd8:	2302      	movs	r3, #2
   20bda:	3106      	adds	r1, #6
   20bdc:	4630      	mov	r0, r6
   20bde:	f7fa ffb1 	bl	1bb44 <net_frag_read>
	return chksum;
   20be2:	f8bd 000c 	ldrh.w	r0, [sp, #12]
   20be6:	e7ec      	b.n	20bc2 <net_udp_get_chksum+0x18>

00020be8 <net_udp_get_hdr>:

struct net_udp_hdr *net_udp_get_hdr(struct net_pkt *pkt,
				    struct net_udp_hdr *hdr)
{
   20be8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   20bea:	4605      	mov	r5, r0
   20bec:	460c      	mov	r4, r1
	struct net_udp_hdr *udp_hdr;
	struct net_buf *frag;
	u16_t pos;

	udp_hdr = net_pkt_udp_data(pkt);
   20bee:	f7fb f8bf 	bl	1bd70 <net_pkt_udp_data>
   20bf2:	4606      	mov	r6, r0
	if (net_udp_header_fits(pkt, udp_hdr)) {
   20bf4:	4601      	mov	r1, r0
   20bf6:	4628      	mov	r0, r5
   20bf8:	f7ff ff1d 	bl	20a36 <net_udp_header_fits>
   20bfc:	bb50      	cbnz	r0, 20c54 <net_udp_get_hdr+0x6c>
		return udp_hdr;
	}

	frag = net_frag_read(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   20bfe:	f895 0035 	ldrb.w	r0, [r5, #53]	; 0x35
			     net_pkt_ipv6_ext_len(pkt),
   20c02:	f895 103f 	ldrb.w	r1, [r5, #63]	; 0x3f
	frag = net_frag_read(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   20c06:	9400      	str	r4, [sp, #0]
   20c08:	4401      	add	r1, r0
   20c0a:	2302      	movs	r3, #2
   20c0c:	f10d 020e 	add.w	r2, sp, #14
   20c10:	68a8      	ldr	r0, [r5, #8]
   20c12:	f7fa ff97 	bl	1bb44 <net_frag_read>
			     &pos, sizeof(hdr->src_port),
			     (u8_t *)&hdr->src_port);
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->dst_port),
			     (u8_t *)&hdr->dst_port);
   20c16:	1ca3      	adds	r3, r4, #2
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->dst_port),
   20c18:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   20c1c:	9300      	str	r3, [sp, #0]
   20c1e:	f10d 020e 	add.w	r2, sp, #14
   20c22:	2302      	movs	r3, #2
   20c24:	f7fa ff8e 	bl	1bb44 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->len),
			     (u8_t *)&hdr->len);
   20c28:	1d23      	adds	r3, r4, #4
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->len),
   20c2a:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   20c2e:	9300      	str	r3, [sp, #0]
   20c30:	f10d 020e 	add.w	r2, sp, #14
   20c34:	2302      	movs	r3, #2
   20c36:	f7fa ff85 	bl	1bb44 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
			     (u8_t *)&hdr->chksum);
   20c3a:	1da3      	adds	r3, r4, #6
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   20c3c:	9300      	str	r3, [sp, #0]
   20c3e:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   20c42:	2302      	movs	r3, #2
   20c44:	f10d 020e 	add.w	r2, sp, #14
   20c48:	f7fa ff7c 	bl	1bb44 <net_frag_read>
	if (!frag) {
   20c4c:	2800      	cmp	r0, #0
		NET_ASSERT(frag);
		return NULL;
	}

	return hdr;
   20c4e:	bf14      	ite	ne
   20c50:	4626      	movne	r6, r4
   20c52:	2600      	moveq	r6, #0
}
   20c54:	4630      	mov	r0, r6
   20c56:	b004      	add	sp, #16
   20c58:	bd70      	pop	{r4, r5, r6, pc}

00020c5a <net_udp_set_hdr>:

struct net_udp_hdr *net_udp_set_hdr(struct net_pkt *pkt,
				    struct net_udp_hdr *hdr)
{
   20c5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20c5e:	b086      	sub	sp, #24
   20c60:	4604      	mov	r4, r0
   20c62:	460d      	mov	r5, r1
	struct net_buf *frag;
	u16_t pos;

	if (net_udp_header_fits(pkt, hdr)) {
   20c64:	f7ff fee7 	bl	20a36 <net_udp_header_fits>
   20c68:	4680      	mov	r8, r0
   20c6a:	2800      	cmp	r0, #0
   20c6c:	d135      	bne.n	20cda <net_udp_set_hdr+0x80>
		return hdr;
	}

	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   20c6e:	f894 1035 	ldrb.w	r1, [r4, #53]	; 0x35
			     net_pkt_ipv6_ext_len(pkt),
   20c72:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   20c76:	9501      	str	r5, [sp, #4]
   20c78:	2602      	movs	r6, #2
   20c7a:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
   20c7e:	440a      	add	r2, r1
   20c80:	f10d 0316 	add.w	r3, sp, #22
   20c84:	68a1      	ldr	r1, [r4, #8]
   20c86:	9702      	str	r7, [sp, #8]
   20c88:	9600      	str	r6, [sp, #0]
   20c8a:	4620      	mov	r0, r4
   20c8c:	f7fa ffae 	bl	1bbec <net_pkt_write>
			     &pos, sizeof(hdr->src_port),
			     (u8_t *)&hdr->src_port, PKT_WAIT_TIME);
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->dst_port),
			     (u8_t *)&hdr->dst_port, PKT_WAIT_TIME);
   20c90:	19ab      	adds	r3, r5, r6
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->dst_port),
   20c92:	4601      	mov	r1, r0
   20c94:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   20c98:	9301      	str	r3, [sp, #4]
   20c9a:	9702      	str	r7, [sp, #8]
   20c9c:	f10d 0316 	add.w	r3, sp, #22
   20ca0:	9600      	str	r6, [sp, #0]
   20ca2:	4620      	mov	r0, r4
   20ca4:	f7fa ffa2 	bl	1bbec <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->len),
			     (u8_t *)&hdr->len, PKT_WAIT_TIME);
   20ca8:	1d2b      	adds	r3, r5, #4
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->len),
   20caa:	4601      	mov	r1, r0
   20cac:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   20cb0:	9301      	str	r3, [sp, #4]
   20cb2:	9702      	str	r7, [sp, #8]
   20cb4:	f10d 0316 	add.w	r3, sp, #22
   20cb8:	9600      	str	r6, [sp, #0]
   20cba:	4620      	mov	r0, r4
   20cbc:	f7fa ff96 	bl	1bbec <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
			     (u8_t *)&hdr->chksum, PKT_WAIT_TIME);
   20cc0:	1dab      	adds	r3, r5, #6
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   20cc2:	9301      	str	r3, [sp, #4]
   20cc4:	4601      	mov	r1, r0
   20cc6:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   20cca:	9702      	str	r7, [sp, #8]
   20ccc:	9600      	str	r6, [sp, #0]
   20cce:	f10d 0316 	add.w	r3, sp, #22
   20cd2:	4620      	mov	r0, r4
   20cd4:	f7fa ff8a 	bl	1bbec <net_pkt_write>

	if (!frag) {
   20cd8:	b100      	cbz	r0, 20cdc <net_udp_set_hdr+0x82>
		NET_ASSERT(frag);
		return NULL;
	}

	return hdr;
   20cda:	46a8      	mov	r8, r5
}
   20cdc:	4640      	mov	r0, r8
   20cde:	b006      	add	sp, #24
   20ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00020ce4 <net_udp_insert>:

struct net_pkt *net_udp_insert(struct net_context *context,
			       struct net_pkt *pkt,
			       u16_t offset,
			       u16_t port)
{
   20ce4:	b410      	push	{r4}
   20ce6:	460c      	mov	r4, r1
   20ce8:	4611      	mov	r1, r2
	return net_udp_insert_raw(pkt,
   20cea:	8942      	ldrh	r2, [r0, #10]
   20cec:	4620      	mov	r0, r4
				  offset,
				  net_sin((struct sockaddr *)
					  &context->local)->sin_port,
				  port);
}
   20cee:	bc10      	pop	{r4}
	return net_udp_insert_raw(pkt,
   20cf0:	f7ff beab 	b.w	20a4a <net_udp_insert_raw>

00020cf4 <net_udp_init>:
{
	return net_conn_unregister(handle);
}

void net_udp_init(void)
{
   20cf4:	4770      	bx	lr

00020cf6 <net_bt_reserve>:
{
	ARG_UNUSED(iface);
	ARG_UNUSED(unused);

	return 0;
}
   20cf6:	2000      	movs	r0, #0
   20cf8:	4770      	bx	lr

00020cfa <net_bt_enable>:
{
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;

	NET_DBG("iface %p %s", iface, state ? "up" : "down");

	if (state && ctxt->ipsp_chan.chan.state != BT_L2CAP_CONNECTED) {
   20cfa:	b149      	cbz	r1, 20d10 <net_bt_enable+0x16>
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   20cfc:	6803      	ldr	r3, [r0, #0]
	if (state && ctxt->ipsp_chan.chan.state != BT_L2CAP_CONNECTED) {
   20cfe:	689b      	ldr	r3, [r3, #8]
   20d00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
   20d04:	2b03      	cmp	r3, #3
		return -ENETDOWN;
   20d06:	bf0c      	ite	eq
   20d08:	2000      	moveq	r0, #0
   20d0a:	f06f 003d 	mvnne.w	r0, #61	; 0x3d
   20d0e:	4770      	bx	lr
	}

	return 0;
   20d10:	4608      	mov	r0, r1
}
   20d12:	4770      	bx	lr

00020d14 <bt_iface_init>:
	return ret;
}

static void bt_iface_init(struct net_if *iface)
{
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   20d14:	6803      	ldr	r3, [r0, #0]

	NET_DBG("iface %p", iface);

	ctxt->iface = iface;
   20d16:	689b      	ldr	r3, [r3, #8]
   20d18:	6018      	str	r0, [r3, #0]
   20d1a:	4770      	bx	lr

00020d1c <ipsp_accept>:

static int ipsp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
	NET_DBG("Incoming conn %p", conn);

	if (bt_context_data.ipsp_chan.chan.conn) {
   20d1c:	4b04      	ldr	r3, [pc, #16]	; (20d30 <ipsp_accept+0x14>)
   20d1e:	6858      	ldr	r0, [r3, #4]
   20d20:	b910      	cbnz	r0, 20d28 <ipsp_accept+0xc>
		NET_ERR("No channels available");
		return -ENOMEM;
	}

	*chan = &bt_context_data.ipsp_chan.chan;
   20d22:	3304      	adds	r3, #4
   20d24:	600b      	str	r3, [r1, #0]

	return 0;
   20d26:	4770      	bx	lr
		return -ENOMEM;
   20d28:	f06f 000b 	mvn.w	r0, #11
}
   20d2c:	4770      	bx	lr
   20d2e:	bf00      	nop
   20d30:	2000a744 	.word	0x2000a744

00020d34 <net_bt_send>:
{
   20d34:	b538      	push	{r3, r4, r5, lr}
	return pkt->family;
   20d36:	f891 303c 	ldrb.w	r3, [r1, #60]	; 0x3c
	if (net_pkt_family(pkt) != AF_INET6) {
   20d3a:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   20d3e:	2b0a      	cmp	r3, #10
{
   20d40:	460c      	mov	r4, r1
	if (net_pkt_family(pkt) != AF_INET6) {
   20d42:	d001      	beq.n	20d48 <net_bt_send+0x14>
		return NET_DROP;
   20d44:	2002      	movs	r0, #2
   20d46:	bd38      	pop	{r3, r4, r5, pc}
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   20d48:	6803      	ldr	r3, [r0, #0]
	if (!net_6lo_compress(pkt, true, NULL)) {
   20d4a:	2200      	movs	r2, #0
   20d4c:	2101      	movs	r1, #1
   20d4e:	4620      	mov	r0, r4
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   20d50:	689d      	ldr	r5, [r3, #8]
	if (!net_6lo_compress(pkt, true, NULL)) {
   20d52:	f7fb fa83 	bl	1c25c <net_6lo_compress>
   20d56:	2800      	cmp	r0, #0
   20d58:	d0f4      	beq.n	20d44 <net_bt_send+0x10>
	k_fifo_put(&iface->tx_queue, pkt);
   20d5a:	6828      	ldr	r0, [r5, #0]
   20d5c:	4621      	mov	r1, r4
   20d5e:	3018      	adds	r0, #24
   20d60:	f000 fcdd 	bl	2171e <k_queue_append>
	return NET_OK;
   20d64:	2000      	movs	r0, #0
}
   20d66:	bd38      	pop	{r3, r4, r5, pc}

00020d68 <net_bt_recv>:
{
   20d68:	b508      	push	{r3, lr}
	if (!net_6lo_uncompress(pkt)) {
   20d6a:	4608      	mov	r0, r1
   20d6c:	f7fb fcf3 	bl	1c756 <net_6lo_uncompress>
   20d70:	2800      	cmp	r0, #0
}
   20d72:	bf0c      	ite	eq
   20d74:	2002      	moveq	r0, #2
   20d76:	2001      	movne	r0, #1
   20d78:	bd08      	pop	{r3, pc}

00020d7a <ipsp_recv>:
{
   20d7a:	b570      	push	{r4, r5, r6, lr}
   20d7c:	4605      	mov	r5, r0
   20d7e:	460e      	mov	r6, r1
	pkt = net_pkt_get_reserve_rx(0, K_FOREVER);
   20d80:	2000      	movs	r0, #0
   20d82:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   20d86:	f7fa fcfd 	bl	1b784 <net_pkt_get_reserve_rx>
	net_pkt_ll_dst(pkt)->addr = ctxt->src.val;
   20d8a:	f105 039c 	add.w	r3, r5, #156	; 0x9c
	net_pkt_ll_dst(pkt)->len = sizeof(ctxt->src);
   20d8e:	2206      	movs	r2, #6
	net_pkt_ll_dst(pkt)->addr = ctxt->src.val;
   20d90:	6283      	str	r3, [r0, #40]	; 0x28
	net_pkt_ll_src(pkt)->addr = ctxt->dst.val;
   20d92:	f105 01a2 	add.w	r1, r5, #162	; 0xa2
	net_pkt_ll_dst(pkt)->type = NET_LINK_BLUETOOTH;
   20d96:	2302      	movs	r3, #2
	net_pkt_ll_dst(pkt)->len = sizeof(ctxt->src);
   20d98:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
	net_pkt_ll_dst(pkt)->type = NET_LINK_BLUETOOTH;
   20d9c:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
	net_pkt_ll_src(pkt)->len = sizeof(ctxt->dst);
   20da0:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
	net_pkt_ll_src(pkt)->type = NET_LINK_BLUETOOTH;
   20da4:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	pkt = net_pkt_get_reserve_rx(0, K_FOREVER);
   20da8:	4604      	mov	r4, r0
	net_pkt_ll_src(pkt)->addr = ctxt->dst.val;
   20daa:	6201      	str	r1, [r0, #32]
	net_pkt_frag_add(pkt, net_buf_ref(buf));
   20dac:	4630      	mov	r0, r6
   20dae:	f7f8 facd 	bl	1934c <net_buf_ref>
   20db2:	4601      	mov	r1, r0
   20db4:	4620      	mov	r0, r4
   20db6:	f7fa fd91 	bl	1b8dc <net_pkt_frag_add>
	if (net_recv_data(ctxt->iface, pkt) < 0) {
   20dba:	4621      	mov	r1, r4
   20dbc:	f855 0c04 	ldr.w	r0, [r5, #-4]
   20dc0:	f7f9 fc88 	bl	1a6d4 <net_recv_data>
   20dc4:	2800      	cmp	r0, #0
   20dc6:	da04      	bge.n	20dd2 <ipsp_recv+0x58>
		net_pkt_unref(pkt);
   20dc8:	4620      	mov	r0, r4
}
   20dca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_pkt_unref(pkt);
   20dce:	f7fa bd5e 	b.w	1b88e <net_pkt_unref>
   20dd2:	bd70      	pop	{r4, r5, r6, pc}

00020dd4 <ipsp_alloc_buf>:
	return net_pkt_get_reserve_rx_data(0, K_FOREVER);
   20dd4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   20dd8:	2000      	movs	r0, #0
   20dda:	f7fa bce3 	b.w	1b7a4 <net_pkt_get_reserve_rx_data>
	...

00020de0 <ipsp_disconnected>:
{
   20de0:	b510      	push	{r4, lr}
   20de2:	4604      	mov	r4, r0
	net_if_carrier_down(ctxt->iface);
   20de4:	f850 0c04 	ldr.w	r0, [r0, #-4]
   20de8:	f7fa fb64 	bl	1b4b4 <net_if_carrier_down>
	if (chan->conn != default_conn) {
   20dec:	6820      	ldr	r0, [r4, #0]
   20dee:	4c04      	ldr	r4, [pc, #16]	; (20e00 <ipsp_disconnected+0x20>)
   20df0:	6823      	ldr	r3, [r4, #0]
   20df2:	4298      	cmp	r0, r3
   20df4:	d103      	bne.n	20dfe <ipsp_disconnected+0x1e>
	bt_conn_unref(default_conn);
   20df6:	f7e5 fb73 	bl	64e0 <bt_conn_unref>
	default_conn = NULL;
   20dfa:	2300      	movs	r3, #0
   20dfc:	6023      	str	r3, [r4, #0]
   20dfe:	bd10      	pop	{r4, pc}
   20e00:	20002ef0 	.word	0x20002ef0

00020e04 <disconnected>:
	bt_l2cap_chan_connect(conn, &bt_context_data.ipsp_chan.chan,
			      L2CAP_IPSP_PSM);
}

static void disconnected(struct bt_conn *conn, u8_t reason)
{
   20e04:	b510      	push	{r4, lr}
#if defined(CONFIG_NET_DEBUG_L2_BT)
	char addr[BT_ADDR_LE_STR_LEN];
#endif

	if (conn != default_conn) {
   20e06:	4c04      	ldr	r4, [pc, #16]	; (20e18 <disconnected+0x14>)
   20e08:	6823      	ldr	r3, [r4, #0]
   20e0a:	4283      	cmp	r3, r0
   20e0c:	d103      	bne.n	20e16 <disconnected+0x12>
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));

	NET_DBG("Disconnected: %s (reason %u)\n", addr, reason);
#endif

	bt_conn_unref(default_conn);
   20e0e:	f7e5 fb67 	bl	64e0 <bt_conn_unref>
	default_conn = NULL;
   20e12:	2300      	movs	r3, #0
   20e14:	6023      	str	r3, [r4, #0]
   20e16:	bd10      	pop	{r4, pc}
   20e18:	20002ef0 	.word	0x20002ef0

00020e1c <net_bt_init>:
	.disconnected = disconnected,
};
#endif /* CONFIG_NET_L2_BT_MGMT */

static int net_bt_init(struct device *dev)
{
   20e1c:	b508      	push	{r3, lr}
	NET_DBG("dev %p driver_data %p", dev, dev->driver_data);

#if defined(CONFIG_NET_L2_BT_MGMT)
	bt_conn_cb_register(&conn_callbacks);
   20e1e:	4804      	ldr	r0, [pc, #16]	; (20e30 <net_bt_init+0x14>)
   20e20:	f7e4 fff6 	bl	5e10 <bt_conn_cb_register>
#endif
	bt_l2cap_server_register(&server);
   20e24:	4803      	ldr	r0, [pc, #12]	; (20e34 <net_bt_init+0x18>)
   20e26:	f7e6 f929 	bl	707c <bt_l2cap_server_register>

	return 0;
}
   20e2a:	2000      	movs	r0, #0
   20e2c:	bd08      	pop	{r3, pc}
   20e2e:	bf00      	nop
   20e30:	2000a7f8 	.word	0x2000a7f8
   20e34:	2000a828 	.word	0x2000a828

00020e38 <bt_iface_send>:
{
   20e38:	b538      	push	{r3, r4, r5, lr}
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   20e3a:	6802      	ldr	r2, [r0, #0]
	frags = pkt->frags;
   20e3c:	688d      	ldr	r5, [r1, #8]
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   20e3e:	6894      	ldr	r4, [r2, #8]
	pkt->frags = NULL;
   20e40:	2200      	movs	r2, #0
	net_pkt_unref(pkt);
   20e42:	4608      	mov	r0, r1
	pkt->frags = NULL;
   20e44:	608a      	str	r2, [r1, #8]
	net_pkt_unref(pkt);
   20e46:	f7fa fd22 	bl	1b88e <net_pkt_unref>
	ret = bt_l2cap_chan_send(&ctxt->ipsp_chan.chan, frags);
   20e4a:	4629      	mov	r1, r5
   20e4c:	1d20      	adds	r0, r4, #4
}
   20e4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = bt_l2cap_chan_send(&ctxt->ipsp_chan.chan, frags);
   20e52:	f7e6 bd91 	b.w	7978 <bt_l2cap_chan_send>
	...

00020e58 <connected>:
	if (err) {
   20e58:	b939      	cbnz	r1, 20e6a <connected+0x12>
	if (conn != default_conn) {
   20e5a:	4a04      	ldr	r2, [pc, #16]	; (20e6c <connected+0x14>)
   20e5c:	6812      	ldr	r2, [r2, #0]
   20e5e:	4282      	cmp	r2, r0
   20e60:	d103      	bne.n	20e6a <connected+0x12>
	bt_l2cap_chan_connect(conn, &bt_context_data.ipsp_chan.chan,
   20e62:	2223      	movs	r2, #35	; 0x23
   20e64:	4902      	ldr	r1, [pc, #8]	; (20e70 <connected+0x18>)
   20e66:	f7e6 b94f 	b.w	7108 <bt_l2cap_chan_connect>
   20e6a:	4770      	bx	lr
   20e6c:	20002ef0 	.word	0x20002ef0
   20e70:	2000a748 	.word	0x2000a748

00020e74 <ipsp_connected>:
{
   20e74:	b570      	push	{r4, r5, r6, lr}
   20e76:	b08e      	sub	sp, #56	; 0x38
   20e78:	4604      	mov	r4, r0
	if (bt_conn_get_info(chan->conn, &info) < 0) {
   20e7a:	a909      	add	r1, sp, #36	; 0x24
   20e7c:	6800      	ldr	r0, [r0, #0]
   20e7e:	f7e5 fb32 	bl	64e6 <bt_conn_get_info>
   20e82:	2800      	cmp	r0, #0
   20e84:	da04      	bge.n	20e90 <ipsp_connected+0x1c>
		bt_l2cap_chan_disconnect(chan);
   20e86:	4620      	mov	r0, r4
   20e88:	f7e6 f970 	bl	716c <bt_l2cap_chan_disconnect>
}
   20e8c:	b00e      	add	sp, #56	; 0x38
   20e8e:	bd70      	pop	{r4, r5, r6, pc}
	sys_memcpy_swap(ctxt->src.val, info.le.src->a.val, sizeof(ctxt->src));
   20e90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   20e92:	f104 059c 	add.w	r5, r4, #156	; 0x9c
	src += length - 1;
   20e96:	1d93      	adds	r3, r2, #6
   20e98:	f104 019b 	add.w	r1, r4, #155	; 0x9b
		*((u8_t *)dst++) = *((u8_t *)src--);
   20e9c:	f813 0901 	ldrb.w	r0, [r3], #-1
   20ea0:	f801 0f01 	strb.w	r0, [r1, #1]!
	for (; length > 0; length--) {
   20ea4:	429a      	cmp	r2, r3
   20ea6:	d1f9      	bne.n	20e9c <ipsp_connected+0x28>
	sys_memcpy_swap(ctxt->dst.val, info.le.dst->a.val, sizeof(ctxt->dst));
   20ea8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   20eaa:	f104 01a2 	add.w	r1, r4, #162	; 0xa2
	src += length - 1;
   20eae:	1d93      	adds	r3, r2, #6
   20eb0:	f104 00a1 	add.w	r0, r4, #161	; 0xa1
		*((u8_t *)dst++) = *((u8_t *)src--);
   20eb4:	f813 6901 	ldrb.w	r6, [r3], #-1
   20eb8:	f800 6f01 	strb.w	r6, [r0, #1]!
	for (; length > 0; length--) {
   20ebc:	429a      	cmp	r2, r3
   20ebe:	d1f9      	bne.n	20eb4 <ipsp_connected+0x40>
	net_if_set_link_addr(ctxt->iface, ctxt->src.val, sizeof(ctxt->src.val),
   20ec0:	f854 3c04 	ldr.w	r3, [r4, #-4]
   20ec4:	f3bf 8f5b 	dmb	ish
   20ec8:	68da      	ldr	r2, [r3, #12]
   20eca:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(iface->flags, NET_IF_UP)) {
   20ece:	07d2      	lsls	r2, r2, #31
   20ed0:	d404      	bmi.n	20edc <ipsp_connected+0x68>
	iface->link_addr.len = len;
   20ed2:	2206      	movs	r2, #6
   20ed4:	751a      	strb	r2, [r3, #20]
	iface->link_addr.type = type;
   20ed6:	2202      	movs	r2, #2
	iface->link_addr.addr = addr;
   20ed8:	611d      	str	r5, [r3, #16]
	iface->link_addr.type = type;
   20eda:	755a      	strb	r2, [r3, #21]
	ll.len = sizeof(ctxt->dst.val);
   20edc:	2306      	movs	r3, #6
   20ede:	f88d 3010 	strb.w	r3, [sp, #16]
	ll.type = NET_LINK_BLUETOOTH;
   20ee2:	2302      	movs	r3, #2
   20ee4:	f88d 3011 	strb.w	r3, [sp, #17]
	addr->s6_addr[1] = 0x80;
   20ee8:	2380      	movs	r3, #128	; 0x80
	addr->s6_addr[0] = 0xfe;
   20eea:	25fe      	movs	r5, #254	; 0xfe
	addr->s6_addr[1] = 0x80;
   20eec:	f88d 3015 	strb.w	r3, [sp, #21]
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   20ef0:	2203      	movs	r2, #3
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
   20ef2:	2300      	movs	r3, #0
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   20ef4:	a807      	add	r0, sp, #28
	ll.addr = ctxt->dst.val;
   20ef6:	9103      	str	r1, [sp, #12]
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
   20ef8:	f8ad 3016 	strh.w	r3, [sp, #22]
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
   20efc:	9306      	str	r3, [sp, #24]
	addr->s6_addr[0] = 0xfe;
   20efe:	f88d 5014 	strb.w	r5, [sp, #20]
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   20f02:	f7df fc46 	bl	792 <memcpy>
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   20f06:	9903      	ldr	r1, [sp, #12]
		addr->s6_addr[12] = 0xfe;
   20f08:	f88d 5020 	strb.w	r5, [sp, #32]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   20f0c:	2203      	movs	r2, #3
		addr->s6_addr[11] = 0xff;
   20f0e:	23ff      	movs	r3, #255	; 0xff
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   20f10:	4411      	add	r1, r2
   20f12:	f10d 0021 	add.w	r0, sp, #33	; 0x21
		addr->s6_addr[11] = 0xff;
   20f16:	f88d 301f 	strb.w	r3, [sp, #31]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   20f1a:	f7df fc3a 	bl	792 <memcpy>
		if (lladdr->type == NET_LINK_ETHERNET) {
   20f1e:	f89d 3011 	ldrb.w	r3, [sp, #17]
	net_ipv6_nbr_add(ctxt->iface, &in6, &ll, false,
   20f22:	f854 0c04 	ldr.w	r0, [r4, #-4]
   20f26:	2b03      	cmp	r3, #3
			addr->s6_addr[8] ^= 0x02;
   20f28:	bf02      	ittt	eq
   20f2a:	f89d 301c 	ldrbeq.w	r3, [sp, #28]
   20f2e:	f083 0302 	eoreq.w	r3, r3, #2
   20f32:	f88d 301c 	strbeq.w	r3, [sp, #28]
   20f36:	2305      	movs	r3, #5
   20f38:	9300      	str	r3, [sp, #0]
   20f3a:	aa03      	add	r2, sp, #12
   20f3c:	2300      	movs	r3, #0
   20f3e:	a905      	add	r1, sp, #20
   20f40:	f7fd fb1c 	bl	1e57c <net_ipv6_nbr_add>
	net_if_up(ctxt->iface);
   20f44:	f854 0c04 	ldr.w	r0, [r4, #-4]
   20f48:	f7fa fa88 	bl	1b45c <net_if_up>
   20f4c:	e79e      	b.n	20e8c <ipsp_connected+0x18>
	...

00020f50 <net_mgmt_NET_REQUEST_BT_ADVERTISE>:
{
   20f50:	b510      	push	{r4, lr}
	if (!strcmp(data, "on")) {
   20f52:	4913      	ldr	r1, [pc, #76]	; (20fa0 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x50>)
{
   20f54:	b086      	sub	sp, #24
	if (!strcmp(data, "on")) {
   20f56:	4610      	mov	r0, r2
{
   20f58:	4614      	mov	r4, r2
	if (!strcmp(data, "on")) {
   20f5a:	f7df fbe0 	bl	71e <strcmp>
   20f5e:	b9a0      	cbnz	r0, 20f8a <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x3a>
		return bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad),
   20f60:	22a0      	movs	r2, #160	; 0xa0
   20f62:	9003      	str	r0, [sp, #12]
   20f64:	2301      	movs	r3, #1
   20f66:	f8ad 200e 	strh.w	r2, [sp, #14]
   20f6a:	22f0      	movs	r2, #240	; 0xf0
   20f6c:	9004      	str	r0, [sp, #16]
   20f6e:	9005      	str	r0, [sp, #20]
   20f70:	f88d 300c 	strb.w	r3, [sp, #12]
   20f74:	f8ad 2010 	strh.w	r2, [sp, #16]
   20f78:	9300      	str	r3, [sp, #0]
   20f7a:	2202      	movs	r2, #2
   20f7c:	4b09      	ldr	r3, [pc, #36]	; (20fa4 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x54>)
   20f7e:	490a      	ldr	r1, [pc, #40]	; (20fa8 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x58>)
   20f80:	a803      	add	r0, sp, #12
   20f82:	f7e4 fc85 	bl	5890 <bt_le_adv_start>
}
   20f86:	b006      	add	sp, #24
   20f88:	bd10      	pop	{r4, pc}
	} else if (!strcmp(data, "off")) {
   20f8a:	4908      	ldr	r1, [pc, #32]	; (20fac <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x5c>)
   20f8c:	4620      	mov	r0, r4
   20f8e:	f7df fbc6 	bl	71e <strcmp>
   20f92:	b910      	cbnz	r0, 20f9a <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x4a>
		return bt_le_adv_stop();
   20f94:	f7e4 fd0c 	bl	59b0 <bt_le_adv_stop>
   20f98:	e7f5      	b.n	20f86 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x36>
		return -EINVAL;
   20f9a:	f06f 0015 	mvn.w	r0, #21
   20f9e:	e7f2      	b.n	20f86 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x36>
   20fa0:	00024269 	.word	0x00024269
   20fa4:	000272dc 	.word	0x000272dc
   20fa8:	000272c8 	.word	0x000272c8
   20fac:	000272d8 	.word	0x000272d8

00020fb0 <ipv6_event_handler>:
static struct net_mgmt_event_callback mgmt6_cb;
static struct in6_addr laddr;

static void ipv6_event_handler(struct net_mgmt_event_callback *cb,
			       u32_t mgmt_event, struct net_if *iface)
{
   20fb0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int i;

	if (mgmt_event == NET_EVENT_IPV6_ADDR_ADD) {
   20fb2:	4b1c      	ldr	r3, [pc, #112]	; (21024 <ipv6_event_handler+0x74>)
{
   20fb4:	9201      	str	r2, [sp, #4]
	if (mgmt_event == NET_EVENT_IPV6_ADDR_ADD) {
   20fb6:	4299      	cmp	r1, r3
   20fb8:	d114      	bne.n	20fe4 <ipv6_event_handler+0x34>
		/* save the last added IP address for this interface */
		for (i = NET_IF_MAX_IPV6_ADDR - 1; i >= 0; i--) {
			if (iface->ipv6.unicast[i].is_used) {
				memcpy(&laddr,
   20fba:	4e1b      	ldr	r6, [pc, #108]	; (21028 <ipv6_event_handler+0x78>)
   20fbc:	2402      	movs	r4, #2
			if (iface->ipv6.unicast[i].is_used) {
   20fbe:	256c      	movs	r5, #108	; 0x6c
   20fc0:	9901      	ldr	r1, [sp, #4]
   20fc2:	fb05 f304 	mul.w	r3, r5, r4
   20fc6:	18ca      	adds	r2, r1, r3
   20fc8:	f892 2094 	ldrb.w	r2, [r2, #148]	; 0x94
   20fcc:	b12a      	cbz	r2, 20fda <ipv6_event_handler+0x2a>
				       &iface->ipv6.unicast[i].address.in6_addr,
   20fce:	3330      	adds	r3, #48	; 0x30
				memcpy(&laddr,
   20fd0:	2210      	movs	r2, #16
   20fd2:	4419      	add	r1, r3
   20fd4:	4630      	mov	r0, r6
   20fd6:	f7df fbdc 	bl	792 <memcpy>
		for (i = NET_IF_MAX_IPV6_ADDR - 1; i >= 0; i--) {
   20fda:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
   20fde:	d2ef      	bcs.n	20fc0 <ipv6_event_handler+0x10>

	if (mgmt_event == NET_EVENT_IPV6_ROUTER_ADD) {
		k_sem_take(&counter, K_NO_WAIT);
		k_sem_give(&waiter);
	}
}
   20fe0:	b002      	add	sp, #8
   20fe2:	bd70      	pop	{r4, r5, r6, pc}
	if (mgmt_event == NET_EVENT_IPV6_DAD_SUCCEED) {
   20fe4:	4b11      	ldr	r3, [pc, #68]	; (2102c <ipv6_event_handler+0x7c>)
   20fe6:	4299      	cmp	r1, r3
   20fe8:	d119      	bne.n	2101e <ipv6_event_handler+0x6e>
		ifaddr = net_if_ipv6_addr_lookup(&laddr, &iface);
   20fea:	a901      	add	r1, sp, #4
   20fec:	480e      	ldr	r0, [pc, #56]	; (21028 <ipv6_event_handler+0x78>)
   20fee:	f7f9 fc73 	bl	1a8d8 <net_if_ipv6_addr_lookup>
		if (!ifaddr ||
   20ff2:	4604      	mov	r4, r0
   20ff4:	2800      	cmp	r0, #0
   20ff6:	d0f3      	beq.n	20fe0 <ipv6_event_handler+0x30>
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   20ff8:	2210      	movs	r2, #16
   20ffa:	490b      	ldr	r1, [pc, #44]	; (21028 <ipv6_event_handler+0x78>)
   20ffc:	3004      	adds	r0, #4
   20ffe:	f7df fb9b 	bl	738 <memcmp>
   21002:	2800      	cmp	r0, #0
   21004:	d1ec      	bne.n	20fe0 <ipv6_event_handler+0x30>
		    !(net_ipv6_addr_cmp(&ifaddr->address.in6_addr, &laddr) &&
   21006:	f994 3065 	ldrsb.w	r3, [r4, #101]	; 0x65
   2100a:	2b01      	cmp	r3, #1
   2100c:	d1e8      	bne.n	20fe0 <ipv6_event_handler+0x30>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   2100e:	2100      	movs	r1, #0
   21010:	4807      	ldr	r0, [pc, #28]	; (21030 <ipv6_event_handler+0x80>)
   21012:	f000 fe2f 	bl	21c74 <_impl_k_sem_take>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   21016:	4807      	ldr	r0, [pc, #28]	; (21034 <ipv6_event_handler+0x84>)
   21018:	f000 fdcc 	bl	21bb4 <_impl_k_sem_give>
   2101c:	e7e0      	b.n	20fe0 <ipv6_event_handler+0x30>
	if (mgmt_event == NET_EVENT_IPV6_ROUTER_ADD) {
   2101e:	4b06      	ldr	r3, [pc, #24]	; (21038 <ipv6_event_handler+0x88>)
   21020:	4299      	cmp	r1, r3
   21022:	e7f3      	b.n	2100c <ipv6_event_handler+0x5c>
   21024:	f0600001 	.word	0xf0600001
   21028:	20002f0c 	.word	0x20002f0c
   2102c:	f060000d 	.word	0xf060000d
   21030:	20002ef4 	.word	0x20002ef4
   21034:	2000aa14 	.word	0x2000aa14
   21038:	f0600009 	.word	0xf0600009

0002103c <net_app_init>:
#else
#define setup_ipv6(...)
#endif /* CONFIG_NET_IPV6 */

int net_app_init(const char *app_info, u32_t flags, s32_t timeout)
{
   2103c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21040:	460e      	mov	r6, r1
   21042:	4615      	mov	r5, r2
#define LOOP_DIVIDER 10
	struct net_if *iface = net_if_get_default();
   21044:	f7f9 fc22 	bl	1a88c <net_if_get_default>

	if (app_info) {
		NET_INFO("%s", app_info);
	}

	if (!iface) {
   21048:	4604      	mov	r4, r0
   2104a:	2800      	cmp	r0, #0
   2104c:	d044      	beq.n	210d8 <net_app_init+0x9c>

	if (flags & NET_APP_NEED_IPV6) {
		count++;
	}

	if (flags & NET_APP_NEED_IPV4) {
   2104e:	0772      	lsls	r2, r6, #29
	if (flags & NET_APP_NEED_IPV6) {
   21050:	f3c6 0140 	ubfx	r1, r6, #1, #1
		count++;
   21054:	bf48      	it	mi
   21056:	3101      	addmi	r1, #1
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   21058:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2105c:	4820      	ldr	r0, [pc, #128]	; (210e0 <net_app_init+0xa4>)
   2105e:	f000 fd9f 	bl	21ba0 <_impl_k_sem_init>
	if (net_addr_pton(AF_INET6, CONFIG_NET_APP_MY_IPV6_ADDR, &laddr)) {
   21062:	4a20      	ldr	r2, [pc, #128]	; (210e4 <net_app_init+0xa8>)
   21064:	4920      	ldr	r1, [pc, #128]	; (210e8 <net_app_init+0xac>)
   21066:	200a      	movs	r0, #10
   21068:	f7fa ffc1 	bl	1bfee <net_addr_pton>
	cb->handler = handler;
   2106c:	481f      	ldr	r0, [pc, #124]	; (210ec <net_app_init+0xb0>)
   2106e:	4b20      	ldr	r3, [pc, #128]	; (210f0 <net_app_init+0xb4>)
   21070:	6043      	str	r3, [r0, #4]
	cb->event_mask = mgmt_event_mask;
   21072:	4b20      	ldr	r3, [pc, #128]	; (210f4 <net_app_init+0xb8>)
   21074:	6083      	str	r3, [r0, #8]
	net_mgmt_add_event_callback(&mgmt6_cb);
   21076:	f7fe fa9f 	bl	1f5b8 <net_mgmt_add_event_callback>
		ifaddr = net_if_ipv6_addr_add(iface, &laddr,
   2107a:	2300      	movs	r3, #0
   2107c:	2203      	movs	r2, #3
   2107e:	4919      	ldr	r1, [pc, #100]	; (210e4 <net_app_init+0xa8>)
   21080:	4620      	mov	r0, r4
   21082:	f7f9 fc7d 	bl	1a980 <net_if_ipv6_addr_add>

	setup_dhcpv4(iface);

	setup_ipv6(iface, flags);

	if (timeout < 0) {
   21086:	2d00      	cmp	r5, #0
   21088:	db11      	blt.n	210ae <net_app_init+0x72>
		count = -1;
	} else if (timeout == 0) {
   2108a:	d00d      	beq.n	210a8 <net_app_init+0x6c>
		count = 0;
	} else {
		count = timeout / 1000 + 1;
   2108c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   21090:	fb95 f4f4 	sdiv	r4, r5, r4
   21094:	3401      	adds	r4, #1
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   21096:	4f18      	ldr	r7, [pc, #96]	; (210f8 <net_app_init+0xbc>)
	/* Loop here until we are ready to continue. As we might need
	 * to wait multiple events, sleep smaller amounts of data.
	 */
	while (count--) {
		if (k_sem_take(&waiter, loop)) {
			if (!k_sem_count_get(&counter)) {
   21098:	f8df 8044 	ldr.w	r8, [pc, #68]	; 210e0 <net_app_init+0xa4>
   2109c:	3c01      	subs	r4, #1
	int loop = timeout / LOOP_DIVIDER;
   2109e:	260a      	movs	r6, #10
   210a0:	fb95 f6f6 	sdiv	r6, r5, r6
	while (count--) {
   210a4:	1c63      	adds	r3, r4, #1
   210a6:	d105      	bne.n	210b4 <net_app_init+0x78>
	if (!count && timeout) {
		NET_ERR("Timeout while waiting setup");
		return -ETIMEDOUT;
	}

	return 0;
   210a8:	2000      	movs	r0, #0
   210aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		count = -1;
   210ae:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   210b2:	e7f0      	b.n	21096 <net_app_init+0x5a>
   210b4:	4631      	mov	r1, r6
   210b6:	4638      	mov	r0, r7
   210b8:	f000 fddc 	bl	21c74 <_impl_k_sem_take>
		if (k_sem_take(&waiter, loop)) {
   210bc:	b110      	cbz	r0, 210c4 <net_app_init+0x88>
			if (!k_sem_count_get(&counter)) {
   210be:	f8d8 3008 	ldr.w	r3, [r8, #8]
   210c2:	b10b      	cbz	r3, 210c8 <net_app_init+0x8c>
   210c4:	3c01      	subs	r4, #1
   210c6:	e7ed      	b.n	210a4 <net_app_init+0x68>
	if (!count && timeout) {
   210c8:	2c00      	cmp	r4, #0
   210ca:	d1ed      	bne.n	210a8 <net_app_init+0x6c>
   210cc:	2d00      	cmp	r5, #0
   210ce:	d0eb      	beq.n	210a8 <net_app_init+0x6c>
		return -ETIMEDOUT;
   210d0:	f06f 003b 	mvn.w	r0, #59	; 0x3b
}
   210d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENODEV;
   210d8:	f06f 0012 	mvn.w	r0, #18
   210dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   210e0:	20002ef4 	.word	0x20002ef4
   210e4:	20002f0c 	.word	0x20002f0c
   210e8:	00022d15 	.word	0x00022d15
   210ec:	20002f1c 	.word	0x20002f1c
   210f0:	00020fb1 	.word	0x00020fb1
   210f4:	f060000d 	.word	0xf060000d
   210f8:	2000aa14 	.word	0x2000aa14

000210fc <init_net_app>:

#if defined(CONFIG_NET_APP_AUTO_INIT)
static int init_net_app(struct device *device)
{
   210fc:	b508      	push	{r3, lr}
	ret = _net_app_ieee802154_setup();
	if (ret < 0) {
		NET_ERR("Cannot setup IEEE 802.15.4 interface (%d)", ret);
	}

	ret = _net_app_bt_setup();
   210fe:	f000 f80b 	bl	21118 <_net_app_bt_setup>
	if (IS_ENABLED(CONFIG_NET_APP_NEED_IPV4)) {
		flags |= NET_APP_NEED_IPV4;
	}

	/* Initialize the application automatically if needed */
	ret = net_app_init("Initializing network", flags,
   21102:	f247 5230 	movw	r2, #30000	; 0x7530
   21106:	2100      	movs	r1, #0
   21108:	4802      	ldr	r0, [pc, #8]	; (21114 <init_net_app+0x18>)
	if (ret < 0) {
		NET_ERR("Network initialization failed (%d)", ret);
	}

	return ret;
}
   2110a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	ret = net_app_init("Initializing network", flags,
   2110e:	f7ff bf95 	b.w	2103c <net_app_init>
   21112:	bf00      	nop
   21114:	000272eb 	.word	0x000272eb

00021118 <_net_app_bt_setup>:

static struct bt_gatt_service ipss_svc = BT_GATT_SERVICE(attrs);
#endif

int _net_app_bt_setup(void)
{
   21118:	b510      	push	{r4, lr}
	struct net_if *iface;
	struct device *dev;
	int err;

	err = bt_enable(NULL);
   2111a:	2000      	movs	r0, #0
   2111c:	f7e4 fb40 	bl	57a0 <bt_enable>
	if (err < 0 && err != -EALREADY) {
   21120:	2800      	cmp	r0, #0
   21122:	da02      	bge.n	2112a <_net_app_bt_setup+0x12>
   21124:	f110 0f45 	cmn.w	r0, #69	; 0x45
   21128:	d115      	bne.n	21156 <_net_app_bt_setup+0x3e>
		return err;
	}

	dev = device_get_binding("net_bt");
   2112a:	480d      	ldr	r0, [pc, #52]	; (21160 <_net_app_bt_setup+0x48>)
   2112c:	f000 f834 	bl	21198 <device_get_binding>
	if (!dev) {
   21130:	b190      	cbz	r0, 21158 <_net_app_bt_setup+0x40>
		return -ENODEV;
	}

	iface = net_if_lookup_by_dev(dev);
   21132:	f7f9 fb99 	bl	1a868 <net_if_lookup_by_dev>
	if (!iface) {
   21136:	4604      	mov	r4, r0
   21138:	b910      	cbnz	r0, 21140 <_net_app_bt_setup+0x28>
		return -EINVAL;
   2113a:	f06f 0015 	mvn.w	r0, #21
   2113e:	bd10      	pop	{r4, pc}
	}

#if defined(CONFIG_NET_APP_BT_NODE)
	bt_gatt_service_register(&ipss_svc);
   21140:	4808      	ldr	r0, [pc, #32]	; (21164 <_net_app_bt_setup+0x4c>)
   21142:	f7e8 f959 	bl	93f8 <bt_gatt_service_register>

	if (net_mgmt(NET_REQUEST_BT_ADVERTISE, iface, ADV_STR,
   21146:	2303      	movs	r3, #3
   21148:	4a07      	ldr	r2, [pc, #28]	; (21168 <_net_app_bt_setup+0x50>)
   2114a:	4808      	ldr	r0, [pc, #32]	; (2116c <_net_app_bt_setup+0x54>)
   2114c:	4621      	mov	r1, r4
   2114e:	f7ff feff 	bl	20f50 <net_mgmt_NET_REQUEST_BT_ADVERTISE>
   21152:	2800      	cmp	r0, #0
   21154:	d1f1      	bne.n	2113a <_net_app_bt_setup+0x22>
		return -EINVAL;
	}
#endif

	return 0;
}
   21156:	bd10      	pop	{r4, pc}
		return -ENODEV;
   21158:	f06f 0012 	mvn.w	r0, #18
   2115c:	e7fb      	b.n	21156 <_net_app_bt_setup+0x3e>
   2115e:	bf00      	nop
   21160:	000272e4 	.word	0x000272e4
   21164:	2000a850 	.word	0x2000a850
   21168:	00024269 	.word	0x00024269
   2116c:	61550001 	.word	0x61550001

00021170 <_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void _sys_device_do_config_level(int level)
{
   21170:	b538      	push	{r3, r4, r5, lr}
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1];
   21172:	4b08      	ldr	r3, [pc, #32]	; (21194 <_sys_device_do_config_level+0x24>)
   21174:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   21178:	3001      	adds	r0, #1
   2117a:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   2117e:	4620      	mov	r0, r4
   21180:	42a8      	cmp	r0, r5
   21182:	f104 040c 	add.w	r4, r4, #12
   21186:	d300      	bcc.n	2118a <_sys_device_do_config_level+0x1a>
		struct device_config *device = info->config;

		device->init(info);
		_k_object_init(info);
	}
}
   21188:	bd38      	pop	{r3, r4, r5, pc}
		device->init(info);
   2118a:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   2118e:	685b      	ldr	r3, [r3, #4]
   21190:	4798      	blx	r3
   21192:	e7f4      	b.n	2117e <_sys_device_do_config_level+0xe>
   21194:	00027300 	.word	0x00027300

00021198 <device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
   21198:	4b10      	ldr	r3, [pc, #64]	; (211dc <device_get_binding+0x44>)
{
   2119a:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
   2119c:	4c10      	ldr	r4, [pc, #64]	; (211e0 <device_get_binding+0x48>)
{
   2119e:	4605      	mov	r5, r0
   211a0:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
   211a2:	429c      	cmp	r4, r3
   211a4:	d104      	bne.n	211b0 <device_get_binding+0x18>
   211a6:	4c0e      	ldr	r4, [pc, #56]	; (211e0 <device_get_binding+0x48>)
		if (info->driver_api != NULL && info->config->name == name) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
   211a8:	42b4      	cmp	r4, r6
   211aa:	d109      	bne.n	211c0 <device_get_binding+0x28>
		if (!strcmp(name, info->config->name)) {
			return info;
		}
	}

	return NULL;
   211ac:	2400      	movs	r4, #0
   211ae:	e012      	b.n	211d6 <device_get_binding+0x3e>
		if (info->driver_api != NULL && info->config->name == name) {
   211b0:	6862      	ldr	r2, [r4, #4]
   211b2:	b11a      	cbz	r2, 211bc <device_get_binding+0x24>
   211b4:	6822      	ldr	r2, [r4, #0]
   211b6:	6812      	ldr	r2, [r2, #0]
   211b8:	42aa      	cmp	r2, r5
   211ba:	d00c      	beq.n	211d6 <device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
   211bc:	340c      	adds	r4, #12
   211be:	e7f0      	b.n	211a2 <device_get_binding+0xa>
		if (!info->driver_api) {
   211c0:	6863      	ldr	r3, [r4, #4]
   211c2:	b90b      	cbnz	r3, 211c8 <device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
   211c4:	340c      	adds	r4, #12
   211c6:	e7ef      	b.n	211a8 <device_get_binding+0x10>
		if (!strcmp(name, info->config->name)) {
   211c8:	6823      	ldr	r3, [r4, #0]
   211ca:	4628      	mov	r0, r5
   211cc:	6819      	ldr	r1, [r3, #0]
   211ce:	f7df faa6 	bl	71e <strcmp>
   211d2:	2800      	cmp	r0, #0
   211d4:	d1f6      	bne.n	211c4 <device_get_binding+0x2c>
}
   211d6:	4620      	mov	r0, r4
   211d8:	bd70      	pop	{r4, r5, r6, pc}
   211da:	bf00      	nop
   211dc:	2000a92c 	.word	0x2000a92c
   211e0:	2000a86c 	.word	0x2000a86c

000211e4 <__errno>:
const int _k_neg_eagain = -EAGAIN;

#ifdef CONFIG_ERRNO
int *__errno(void)
{
	return &_current->errno_var;
   211e4:	4b01      	ldr	r3, [pc, #4]	; (211ec <__errno+0x8>)
   211e6:	6898      	ldr	r0, [r3, #8]
}
   211e8:	3054      	adds	r0, #84	; 0x54
   211ea:	4770      	bx	lr
   211ec:	20002ff8 	.word	0x20002ff8

000211f0 <_sys_power_save_idle_exit>:
	if (_sys_pm_idle_exit_notify) {
		_sys_soc_resume();
	}
#endif

	if (_must_enter_tickless_idle(ticks)) {
   211f0:	1c43      	adds	r3, r0, #1
   211f2:	d003      	beq.n	211fc <_sys_power_save_idle_exit+0xc>
   211f4:	4b03      	ldr	r3, [pc, #12]	; (21204 <_sys_power_save_idle_exit+0x14>)
   211f6:	681b      	ldr	r3, [r3, #0]
   211f8:	4298      	cmp	r0, r3
   211fa:	db01      	blt.n	21200 <_sys_power_save_idle_exit+0x10>
		/* Resume normal periodic system timer interrupts */
		_timer_idle_exit();
   211fc:	f7e1 bfe8 	b.w	31d0 <_timer_idle_exit>
   21200:	4770      	bx	lr
   21202:	bf00      	nop
   21204:	2000a85c 	.word	0x2000a85c

00021208 <idle>:
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   21208:	4d0f      	ldr	r5, [pc, #60]	; (21248 <idle+0x40>)
#else
#define IDLE_YIELD_IF_COOP() do { } while ((0))
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   2120a:	b580      	push	{r7, lr}
	if (_must_enter_tickless_idle(ticks)) {
   2120c:	4f0f      	ldr	r7, [pc, #60]	; (2124c <idle+0x44>)
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2120e:	f105 0610 	add.w	r6, r5, #16
	__asm__ volatile(
   21212:	f04f 0220 	mov.w	r2, #32
   21216:	f3ef 8311 	mrs	r3, BASEPRI
   2121a:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
   2121e:	692b      	ldr	r3, [r5, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21220:	42b3      	cmp	r3, r6
   21222:	d00a      	beq.n	2123a <idle+0x32>
static inline s32_t _get_next_timeout_expiry(void)
{
	struct _timeout *t = (struct _timeout *)
			     sys_dlist_peek_head(&_timeout_q);

	return t ? t->delta_ticks_from_prev : K_FOREVER;
   21224:	b14b      	cbz	r3, 2123a <idle+0x32>
   21226:	691c      	ldr	r4, [r3, #16]
   21228:	1c63      	adds	r3, r4, #1
   2122a:	d008      	beq.n	2123e <idle+0x36>
   2122c:	683b      	ldr	r3, [r7, #0]
   2122e:	42a3      	cmp	r3, r4
   21230:	dd05      	ble.n	2123e <idle+0x36>
	_kernel.idle = ticks;
   21232:	61ac      	str	r4, [r5, #24]
	k_cpu_idle();
   21234:	f7e0 fd5c 	bl	1cf0 <k_cpu_idle>
   21238:	e7eb      	b.n	21212 <idle+0xa>
   2123a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		_timer_idle_enter(ticks);
   2123e:	4620      	mov	r0, r4
   21240:	f7e1 ffb2 	bl	31a8 <_timer_idle_enter>
   21244:	e7f5      	b.n	21232 <idle+0x2a>
   21246:	bf00      	nop
   21248:	20002ff8 	.word	0x20002ff8
   2124c:	2000a85c 	.word	0x2000a85c

00021250 <stack_analyze>:
{
   21250:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	size_t unused = 0;
   21252:	2300      	movs	r3, #0
	for (i = 0; i < size; i++) {
   21254:	429a      	cmp	r2, r3
   21256:	d002      	beq.n	2125e <stack_analyze+0xe>
		if ((unsigned char)stack[i] == 0xaa) {
   21258:	5ccc      	ldrb	r4, [r1, r3]
   2125a:	2caa      	cmp	r4, #170	; 0xaa
   2125c:	d00d      	beq.n	2127a <stack_analyze+0x2a>
	pcnt = ((size - unused) * 100) / size;
   2125e:	1ad4      	subs	r4, r2, r3
   21260:	2164      	movs	r1, #100	; 0x64
   21262:	4361      	muls	r1, r4
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
   21264:	9201      	str	r2, [sp, #4]
	pcnt = ((size - unused) * 100) / size;
   21266:	fbb1 f1f2 	udiv	r1, r1, r2
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
   2126a:	9400      	str	r4, [sp, #0]
   2126c:	9102      	str	r1, [sp, #8]
   2126e:	4601      	mov	r1, r0
   21270:	4803      	ldr	r0, [pc, #12]	; (21280 <stack_analyze+0x30>)
   21272:	f7e1 f815 	bl	22a0 <printk>
}
   21276:	b004      	add	sp, #16
   21278:	bd10      	pop	{r4, pc}
			unused++;
   2127a:	3301      	adds	r3, #1
   2127c:	e7ea      	b.n	21254 <stack_analyze+0x4>
   2127e:	bf00      	nop
   21280:	00023d8b 	.word	0x00023d8b

00021284 <k_call_stacks_analyze>:
extern K_THREAD_STACK_DEFINE(sys_work_q_stack,
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);


void k_call_stacks_analyze(void)
{
   21284:	b508      	push	{r3, lr}
	printk("Kernel stacks:\n");
   21286:	480e      	ldr	r0, [pc, #56]	; (212c0 <k_call_stacks_analyze+0x3c>)
   21288:	f7e1 f80a 	bl	22a0 <printk>
	STACK_ANALYZE("main     ", _main_stack);
   2128c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   21290:	490c      	ldr	r1, [pc, #48]	; (212c4 <k_call_stacks_analyze+0x40>)
   21292:	480d      	ldr	r0, [pc, #52]	; (212c8 <k_call_stacks_analyze+0x44>)
   21294:	f7ff ffdc 	bl	21250 <stack_analyze>
	STACK_ANALYZE("idle     ", _idle_stack);
   21298:	f44f 72a0 	mov.w	r2, #320	; 0x140
   2129c:	490b      	ldr	r1, [pc, #44]	; (212cc <k_call_stacks_analyze+0x48>)
   2129e:	480c      	ldr	r0, [pc, #48]	; (212d0 <k_call_stacks_analyze+0x4c>)
   212a0:	f7ff ffd6 	bl	21250 <stack_analyze>
	STACK_ANALYZE("interrupt", _interrupt_stack);
   212a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
   212a8:	490a      	ldr	r1, [pc, #40]	; (212d4 <k_call_stacks_analyze+0x50>)
   212aa:	480b      	ldr	r0, [pc, #44]	; (212d8 <k_call_stacks_analyze+0x54>)
   212ac:	f7ff ffd0 	bl	21250 <stack_analyze>
	STACK_ANALYZE("workqueue", sys_work_q_stack);
   212b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
   212b4:	4909      	ldr	r1, [pc, #36]	; (212dc <k_call_stacks_analyze+0x58>)
   212b6:	480a      	ldr	r0, [pc, #40]	; (212e0 <k_call_stacks_analyze+0x5c>)
}
   212b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	STACK_ANALYZE("workqueue", sys_work_q_stack);
   212bc:	f7ff bfc8 	b.w	21250 <stack_analyze>
   212c0:	00027365 	.word	0x00027365
   212c4:	20008b28 	.word	0x20008b28
   212c8:	00027375 	.word	0x00027375
   212cc:	20008f28 	.word	0x20008f28
   212d0:	0002737f 	.word	0x0002737f
   212d4:	20009068 	.word	0x20009068
   212d8:	00027389 	.word	0x00027389
   212dc:	20009868 	.word	0x20009868
   212e0:	00027393 	.word	0x00027393

000212e4 <_bss_zero>:
 *
 * @return N/A
 */
void _bss_zero(void)
{
	memset(&__bss_start, 0,
   212e4:	4802      	ldr	r0, [pc, #8]	; (212f0 <_bss_zero+0xc>)
   212e6:	4a03      	ldr	r2, [pc, #12]	; (212f4 <_bss_zero+0x10>)
   212e8:	2100      	movs	r1, #0
   212ea:	1a12      	subs	r2, r2, r0
   212ec:	f7df ba7d 	b.w	7ea <memset>
   212f0:	20000000 	.word	0x20000000
   212f4:	200033b8 	.word	0x200033b8

000212f8 <_data_copy>:
 *
 * @return N/A
 */
void _data_copy(void)
{
	memcpy(&__data_ram_start, &__data_rom_start,
   212f8:	4802      	ldr	r0, [pc, #8]	; (21304 <_data_copy+0xc>)
   212fa:	4a03      	ldr	r2, [pc, #12]	; (21308 <_data_copy+0x10>)
   212fc:	4903      	ldr	r1, [pc, #12]	; (2130c <_data_copy+0x14>)
   212fe:	1a12      	subs	r2, r2, r0
   21300:	f7df ba47 	b.w	792 <memcpy>
   21304:	20009c68 	.word	0x20009c68
   21308:	2000ad98 	.word	0x2000ad98
   2130c:	000273a0 	.word	0x000273a0

00021310 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   21310:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   21312:	2002      	movs	r0, #2
   21314:	f7ff ff2c 	bl	21170 <_sys_device_do_config_level>
	if (boot_delay > 0) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
   21318:	4908      	ldr	r1, [pc, #32]	; (2133c <bg_thread_main+0x2c>)
   2131a:	4809      	ldr	r0, [pc, #36]	; (21340 <bg_thread_main+0x30>)
   2131c:	f7e0 ffc0 	bl	22a0 <printk>

	/* Final init level before app starts */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   21320:	2003      	movs	r0, #3
   21322:	f7ff ff25 	bl	21170 <_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	_init_static_threads();
   21326:	f000 fec5 	bl	220b4 <_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
   2132a:	f7e0 f971 	bl	1610 <main>

	/* Terminate thread normally since it has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
   2132e:	4a05      	ldr	r2, [pc, #20]	; (21344 <bg_thread_main+0x34>)
   21330:	7a13      	ldrb	r3, [r2, #8]
   21332:	f023 0301 	bic.w	r3, r3, #1
   21336:	7213      	strb	r3, [r2, #8]
   21338:	bd08      	pop	{r3, pc}
   2133a:	bf00      	nop
   2133c:	0002731c 	.word	0x0002731c
   21340:	00027338 	.word	0x00027338
   21344:	20002f90 	.word	0x20002f90

00021348 <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
   21348:	b580      	push	{r7, lr}
   2134a:	b086      	sub	sp, #24
   2134c:	4e32      	ldr	r6, [pc, #200]	; (21418 <_Cstart+0xd0>)
   2134e:	af06      	add	r7, sp, #24
	_IntLibInit();
   21350:	f7e0 fa84 	bl	185c <_IntLibInit>
   21354:	2324      	movs	r3, #36	; 0x24
   21356:	199a      	adds	r2, r3, r6
	list->head = (sys_dnode_t *)list;
   21358:	519a      	str	r2, [r3, r6]
   2135a:	3308      	adds	r3, #8
	for (int ii = 0; ii < K_NUM_PRIORITIES; ii++) {
   2135c:	f5b3 7f92 	cmp.w	r3, #292	; 0x124
	list->tail = (sys_dnode_t *)list;
   21360:	6052      	str	r2, [r2, #4]
   21362:	d1f8      	bne.n	21356 <_Cstart+0xe>
	_ready_q.cache = _main_thread;
   21364:	4d2d      	ldr	r5, [pc, #180]	; (2141c <_Cstart+0xd4>)
	_setup_new_thread(_main_thread, _main_stack,
   21366:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 21444 <_Cstart+0xfc>
	_ready_q.cache = _main_thread;
   2136a:	61f5      	str	r5, [r6, #28]
	_setup_new_thread(_main_thread, _main_stack,
   2136c:	2400      	movs	r4, #0
   2136e:	f04f 0901 	mov.w	r9, #1
   21372:	4643      	mov	r3, r8
   21374:	f44f 6280 	mov.w	r2, #1024	; 0x400
   21378:	4929      	ldr	r1, [pc, #164]	; (21420 <_Cstart+0xd8>)
   2137a:	f8cd 9010 	str.w	r9, [sp, #16]
   2137e:	4628      	mov	r0, r5
   21380:	9403      	str	r4, [sp, #12]
   21382:	9402      	str	r4, [sp, #8]
   21384:	9401      	str	r4, [sp, #4]
   21386:	9400      	str	r4, [sp, #0]
   21388:	f000 fe4c 	bl	22024 <_setup_new_thread>
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2138c:	7a6b      	ldrb	r3, [r5, #9]
	_add_thread_to_ready_q(_main_thread);
   2138e:	4628      	mov	r0, r5
   21390:	f023 0304 	bic.w	r3, r3, #4
   21394:	726b      	strb	r3, [r5, #9]
   21396:	f000 fa2d 	bl	217f4 <_add_thread_to_ready_q>
	_setup_new_thread(thr, stack,
   2139a:	230f      	movs	r3, #15
   2139c:	9303      	str	r3, [sp, #12]
   2139e:	4921      	ldr	r1, [pc, #132]	; (21424 <_Cstart+0xdc>)
   213a0:	f8cd 9010 	str.w	r9, [sp, #16]
   213a4:	9402      	str	r4, [sp, #8]
   213a6:	9401      	str	r4, [sp, #4]
   213a8:	9400      	str	r4, [sp, #0]
   213aa:	4b1f      	ldr	r3, [pc, #124]	; (21428 <_Cstart+0xe0>)
   213ac:	481f      	ldr	r0, [pc, #124]	; (2142c <_Cstart+0xe4>)
   213ae:	f44f 72a0 	mov.w	r2, #320	; 0x140
   213b2:	f000 fe37 	bl	22024 <_setup_new_thread>
   213b6:	4b1d      	ldr	r3, [pc, #116]	; (2142c <_Cstart+0xe4>)
   213b8:	4a1c      	ldr	r2, [pc, #112]	; (2142c <_Cstart+0xe4>)
   213ba:	7a5b      	ldrb	r3, [r3, #9]
   213bc:	f023 0304 	bic.w	r3, r3, #4
   213c0:	7253      	strb	r3, [r2, #9]
	_add_thread_to_ready_q(thr);
   213c2:	4610      	mov	r0, r2
   213c4:	f000 fa16 	bl	217f4 <_add_thread_to_ready_q>
	list->head = (sys_dnode_t *)list;
   213c8:	4b19      	ldr	r3, [pc, #100]	; (21430 <_Cstart+0xe8>)
   213ca:	6133      	str	r3, [r6, #16]
	list->tail = (sys_dnode_t *)list;
   213cc:	6173      	str	r3, [r6, #20]
 * @return N/A
 */
static ALWAYS_INLINE void _InterruptStackSetup(void)
{
#ifdef CONFIG_MPU_REQUIRES_POWER_OF_TWO_ALIGNMENT
	u32_t msp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
   213ce:	4b19      	ldr	r3, [pc, #100]	; (21434 <_Cstart+0xec>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   213d0:	f383 8808 	msr	MSP, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   213d4:	4b18      	ldr	r3, [pc, #96]	; (21438 <_Cstart+0xf0>)
   213d6:	22e0      	movs	r2, #224	; 0xe0
   213d8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
   213dc:	77dc      	strb	r4, [r3, #31]
   213de:	761c      	strb	r4, [r3, #24]
   213e0:	765c      	strb	r4, [r3, #25]
   213e2:	769c      	strb	r4, [r3, #26]
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   213e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   213e6:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
   213ea:	625a      	str	r2, [r3, #36]	; 0x24
extern void _CpuIdleInit(void);
static ALWAYS_INLINE void kernel_arch_init(void)
{
	_InterruptStackSetup();
	_ExcSetup();
	_FaultInit();
   213ec:	f7e0 fbec 	bl	1bc8 <_FaultInit>
	_CpuIdleInit();
   213f0:	f7e0 fc78 	bl	1ce4 <_CpuIdleInit>
	 */

	prepare_multithreading(dummy_thread);

	/* perform basic hardware initialization */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   213f4:	4620      	mov	r0, r4
   213f6:	f7ff febb 	bl	21170 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   213fa:	4648      	mov	r0, r9
   213fc:	f7ff feb8 	bl	21170 <_sys_device_do_config_level>
		MPU_GUARD_ALIGN_AND_SIZE;
#else
	start_of_main_stack =
		K_THREAD_STACK_BUFFER(main_stack) + main_stack_size;
#endif
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
   21400:	4b0e      	ldr	r3, [pc, #56]	; (2143c <_Cstart+0xf4>)

	_current = main_thread;
   21402:	60b5      	str	r5, [r6, #8]
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
   21404:	f023 0307 	bic.w	r3, r3, #7

	/* the ready queue cache already contains the main thread */

	__asm__ __volatile__(
   21408:	4a0d      	ldr	r2, [pc, #52]	; (21440 <_Cstart+0xf8>)
   2140a:	f383 8809 	msr	PSP, r3
   2140e:	2100      	movs	r1, #0
   21410:	f381 8811 	msr	BASEPRI, r1
   21414:	4640      	mov	r0, r8
   21416:	4710      	bx	r2
   21418:	20002ff8 	.word	0x20002ff8
   2141c:	20002f90 	.word	0x20002f90
   21420:	20008b28 	.word	0x20008b28
   21424:	20008f28 	.word	0x20008f28
   21428:	00021209 	.word	0x00021209
   2142c:	20002f28 	.word	0x20002f28
   21430:	20003008 	.word	0x20003008
   21434:	20009868 	.word	0x20009868
   21438:	e000ed00 	.word	0xe000ed00
   2143c:	20008f28 	.word	0x20008f28
   21440:	00021fbd 	.word	0x00021fbd
   21444:	00021311 	.word	0x00021311

00021448 <init_mem_slab_module>:
{
	ARG_UNUSED(dev);

	struct k_mem_slab *slab;

	for (slab = _k_mem_slab_list_start;
   21448:	4b0b      	ldr	r3, [pc, #44]	; (21478 <init_mem_slab_module+0x30>)
   2144a:	480c      	ldr	r0, [pc, #48]	; (2147c <init_mem_slab_module+0x34>)
{
   2144c:	b570      	push	{r4, r5, r6, lr}
	slab->free_list = NULL;
   2144e:	2400      	movs	r4, #0
	for (slab = _k_mem_slab_list_start;
   21450:	4283      	cmp	r3, r0
   21452:	d301      	bcc.n	21458 <init_mem_slab_module+0x10>
	     slab++) {
		create_free_list(slab);
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
	}
	return 0;
}
   21454:	2000      	movs	r0, #0
   21456:	bd70      	pop	{r4, r5, r6, pc}
	p = slab->buffer;
   21458:	691a      	ldr	r2, [r3, #16]
	for (j = 0; j < slab->num_blocks; j++) {
   2145a:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   2145c:	615c      	str	r4, [r3, #20]
	for (j = 0; j < slab->num_blocks; j++) {
   2145e:	2100      	movs	r1, #0
   21460:	42a9      	cmp	r1, r5
   21462:	d101      	bne.n	21468 <init_mem_slab_module+0x20>
	     slab++) {
   21464:	331c      	adds	r3, #28
   21466:	e7f3      	b.n	21450 <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
   21468:	695e      	ldr	r6, [r3, #20]
   2146a:	6016      	str	r6, [r2, #0]
		p += slab->block_size;
   2146c:	68de      	ldr	r6, [r3, #12]
		slab->free_list = p;
   2146e:	615a      	str	r2, [r3, #20]
	for (j = 0; j < slab->num_blocks; j++) {
   21470:	3101      	adds	r1, #1
		p += slab->block_size;
   21472:	4432      	add	r2, r6
   21474:	e7f4      	b.n	21460 <init_mem_slab_module+0x18>
   21476:	bf00      	nop
   21478:	2000a960 	.word	0x2000a960
   2147c:	2000a9b4 	.word	0x2000a9b4

00021480 <k_mem_slab_alloc>:

	_k_object_init(slab);
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, s32_t timeout)
{
   21480:	b538      	push	{r3, r4, r5, lr}
   21482:	460c      	mov	r4, r1
   21484:	f04f 0120 	mov.w	r1, #32
   21488:	f3ef 8511 	mrs	r5, BASEPRI
   2148c:	f381 8811 	msr	BASEPRI, r1
	unsigned int key = irq_lock();
	int result;

	if (slab->free_list != NULL) {
   21490:	6941      	ldr	r1, [r0, #20]
   21492:	b151      	cbz	r1, 214aa <k_mem_slab_alloc+0x2a>
		/* take a free block */
		*mem = slab->free_list;
   21494:	6021      	str	r1, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   21496:	6942      	ldr	r2, [r0, #20]
   21498:	6812      	ldr	r2, [r2, #0]
   2149a:	6142      	str	r2, [r0, #20]
		slab->num_used++;
   2149c:	6982      	ldr	r2, [r0, #24]
   2149e:	3201      	adds	r2, #1
   214a0:	6182      	str	r2, [r0, #24]
		result = 0;
   214a2:	2000      	movs	r0, #0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   214a4:	f385 8811 	msr	BASEPRI, r5
	}

	irq_unlock(key);

	return result;
}
   214a8:	bd38      	pop	{r3, r4, r5, pc}
	} else if (timeout == K_NO_WAIT) {
   214aa:	b91a      	cbnz	r2, 214b4 <k_mem_slab_alloc+0x34>
		*mem = NULL;
   214ac:	6022      	str	r2, [r4, #0]
		result = -ENOMEM;
   214ae:	f06f 000b 	mvn.w	r0, #11
   214b2:	e7f7      	b.n	214a4 <k_mem_slab_alloc+0x24>
		_pend_current_thread(&slab->wait_q, timeout);
   214b4:	4611      	mov	r1, r2
   214b6:	f000 fa87 	bl	219c8 <_pend_current_thread>
	_update_time_slice_before_swap();
   214ba:	f000 fb47 	bl	21b4c <_update_time_slice_before_swap>
	return __swap(key);
   214be:	4628      	mov	r0, r5
   214c0:	f7e0 f9d8 	bl	1874 <__swap>
		if (result == 0) {
   214c4:	2800      	cmp	r0, #0
   214c6:	d1ef      	bne.n	214a8 <k_mem_slab_alloc+0x28>
			*mem = _current->base.swap_data;
   214c8:	4b02      	ldr	r3, [pc, #8]	; (214d4 <k_mem_slab_alloc+0x54>)
   214ca:	689b      	ldr	r3, [r3, #8]
   214cc:	68db      	ldr	r3, [r3, #12]
   214ce:	6023      	str	r3, [r4, #0]
   214d0:	bd38      	pop	{r3, r4, r5, pc}
   214d2:	bf00      	nop
   214d4:	20002ff8 	.word	0x20002ff8

000214d8 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   214d8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   214da:	f04f 0320 	mov.w	r3, #32
   214de:	f3ef 8411 	mrs	r4, BASEPRI
   214e2:	f383 8811 	msr	BASEPRI, r3
_find_first_thread_to_unpend(_wait_q_t *wait_q, struct k_thread *from)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	extern volatile int _handling_timeouts;

	if (_handling_timeouts) {
   214e6:	4b2e      	ldr	r3, [pc, #184]	; (215a0 <k_mem_slab_free+0xc8>)
   214e8:	681a      	ldr	r2, [r3, #0]
   214ea:	6803      	ldr	r3, [r0, #0]
   214ec:	b1a2      	cbz	r2, 21518 <k_mem_slab_free+0x40>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   214ee:	4298      	cmp	r0, r3
   214f0:	bf08      	it	eq
   214f2:	2300      	moveq	r3, #0
		sys_dlist_t *q = (sys_dlist_t *)wait_q;
		sys_dnode_t *cur = from ? &from->base.k_q_node : NULL;

		/* skip threads that have an expired timeout */
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
   214f4:	b943      	cbnz	r3, 21508 <k_mem_slab_free+0x30>
		if (_must_switch_threads()) {
			_Swap(key);
			return;
		}
	} else {
		**(char ***)mem = slab->free_list;
   214f6:	680b      	ldr	r3, [r1, #0]
   214f8:	6942      	ldr	r2, [r0, #20]
   214fa:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   214fc:	680b      	ldr	r3, [r1, #0]
   214fe:	6143      	str	r3, [r0, #20]
		slab->num_used--;
   21500:	6983      	ldr	r3, [r0, #24]
   21502:	3b01      	subs	r3, #1
   21504:	6183      	str	r3, [r0, #24]
   21506:	e03e      	b.n	21586 <k_mem_slab_free+0xae>
			struct k_thread *thread = (struct k_thread *)cur;

			if (_is_thread_timeout_expired(thread)) {
   21508:	6a1a      	ldr	r2, [r3, #32]
   2150a:	3202      	adds	r2, #2
   2150c:	d108      	bne.n	21520 <k_mem_slab_free+0x48>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   2150e:	6842      	ldr	r2, [r0, #4]
   21510:	4293      	cmp	r3, r2
   21512:	d0f0      	beq.n	214f6 <k_mem_slab_free+0x1e>
   21514:	681b      	ldr	r3, [r3, #0]
   21516:	e7ed      	b.n	214f4 <k_mem_slab_free+0x1c>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21518:	4298      	cmp	r0, r3
   2151a:	d0ec      	beq.n	214f6 <k_mem_slab_free+0x1e>
/* must be called with interrupts locked */
static inline struct k_thread *_unpend_first_thread(_wait_q_t *wait_q)
{
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);

	if (thread) {
   2151c:	2b00      	cmp	r3, #0
   2151e:	d0ea      	beq.n	214f6 <k_mem_slab_free+0x1e>
			if (_is_thread_timeout_expired(thread)) {
   21520:	4618      	mov	r0, r3
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   21522:	cb0c      	ldmia	r3, {r2, r3}
   21524:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   21526:	6802      	ldr	r2, [r0, #0]
   21528:	4d1e      	ldr	r5, [pc, #120]	; (215a4 <k_mem_slab_free+0xcc>)
   2152a:	6053      	str	r3, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   2152c:	7a43      	ldrb	r3, [r0, #9]
   2152e:	f023 0302 	bic.w	r3, r3, #2
   21532:	7243      	strb	r3, [r0, #9]
		_set_thread_return_value_with_data(pending_thread, 0, *mem);
   21534:	680b      	ldr	r3, [r1, #0]
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   21536:	6a01      	ldr	r1, [r0, #32]
	thread->base.swap_data = data;
   21538:	60c3      	str	r3, [r0, #12]
}

static ALWAYS_INLINE void
_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   2153a:	2200      	movs	r2, #0
   2153c:	1c4b      	adds	r3, r1, #1
   2153e:	6642      	str	r2, [r0, #100]	; 0x64
	return _abort_timeout(&thread->base.timeout);
   21540:	f100 0210 	add.w	r2, r0, #16
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   21544:	d00e      	beq.n	21564 <k_mem_slab_free+0x8c>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   21546:	696b      	ldr	r3, [r5, #20]
   21548:	429a      	cmp	r2, r3
	return (node == list->tail) ? NULL : node->next;
   2154a:	bf1f      	itttt	ne
   2154c:	6902      	ldrne	r2, [r0, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   2154e:	6913      	ldrne	r3, [r2, #16]
   21550:	185b      	addne	r3, r3, r1
   21552:	6113      	strne	r3, [r2, #16]
	node->prev->next = node->next;
   21554:	6943      	ldr	r3, [r0, #20]
   21556:	6902      	ldr	r2, [r0, #16]
   21558:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   2155a:	6902      	ldr	r2, [r0, #16]
   2155c:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   2155e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21562:	6203      	str	r3, [r0, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   21564:	7a43      	ldrb	r3, [r0, #9]
   21566:	f023 0204 	bic.w	r2, r3, #4
	return !(_is_thread_prevented_from_running(thread) ||
   2156a:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2156e:	7242      	strb	r2, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   21570:	d102      	bne.n	21578 <k_mem_slab_free+0xa0>
   21572:	6a03      	ldr	r3, [r0, #32]
   21574:	3301      	adds	r3, #1
   21576:	d009      	beq.n	2158c <k_mem_slab_free+0xb4>
	return _is_preempt(_current) && __must_switch_threads();
   21578:	68ab      	ldr	r3, [r5, #8]
   2157a:	895b      	ldrh	r3, [r3, #10]
   2157c:	2b7f      	cmp	r3, #127	; 0x7f
   2157e:	d802      	bhi.n	21586 <k_mem_slab_free+0xae>
   21580:	f000 fa32 	bl	219e8 <__must_switch_threads>
   21584:	b928      	cbnz	r0, 21592 <k_mem_slab_free+0xba>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   21586:	f384 8811 	msr	BASEPRI, r4
   2158a:	bd38      	pop	{r3, r4, r5, pc}
		_add_thread_to_ready_q(thread);
   2158c:	f000 f932 	bl	217f4 <_add_thread_to_ready_q>
   21590:	e7f2      	b.n	21578 <k_mem_slab_free+0xa0>
	_update_time_slice_before_swap();
   21592:	f000 fadb 	bl	21b4c <_update_time_slice_before_swap>
	return __swap(key);
   21596:	4620      	mov	r0, r4
	}

	irq_unlock(key);
}
   21598:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2159c:	f7e0 b96a 	b.w	1874 <__swap>
   215a0:	20003330 	.word	0x20003330
   215a4:	20002ff8 	.word	0x20002ff8

000215a8 <get_bit_ptr>:

/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct k_mem_pool *p, int level, int bn, u32_t **word)
{
   215a8:	b510      	push	{r4, lr}
	u32_t *bitarray = level <= p->max_inline_level ?
   215aa:	7ac4      	ldrb	r4, [r0, #11]
   215ac:	68c0      	ldr	r0, [r0, #12]
		&p->levels[level].bits : p->levels[level].bits_p;
   215ae:	428c      	cmp	r4, r1
   215b0:	f04f 040c 	mov.w	r4, #12
   215b4:	bfb6      	itet	lt
   215b6:	4361      	mullt	r1, r4
   215b8:	fb04 0101 	mlage	r1, r4, r1, r0
   215bc:	5841      	ldrlt	r1, [r0, r1]

	*word = &bitarray[bn / 32];
   215be:	2420      	movs	r4, #32
   215c0:	fb92 f4f4 	sdiv	r4, r2, r4
   215c4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   215c8:	6019      	str	r1, [r3, #0]

	return bn & 0x1f;
}
   215ca:	f002 001f 	and.w	r0, r2, #31
   215ce:	bd10      	pop	{r4, pc}

000215d0 <set_free_bit>:

static void set_free_bit(struct k_mem_pool *p, int level, int bn)
{
   215d0:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
   215d2:	ab01      	add	r3, sp, #4
   215d4:	f7ff ffe8 	bl	215a8 <get_bit_ptr>

	*word |= (1<<bit);
   215d8:	9a01      	ldr	r2, [sp, #4]
   215da:	2301      	movs	r3, #1
   215dc:	fa03 f000 	lsl.w	r0, r3, r0
   215e0:	6813      	ldr	r3, [r2, #0]
   215e2:	4303      	orrs	r3, r0
   215e4:	6013      	str	r3, [r2, #0]
}
   215e6:	b003      	add	sp, #12
   215e8:	f85d fb04 	ldr.w	pc, [sp], #4

000215ec <init_static_pools>:
		set_free_bit(p, 0, i);
	}
}

int init_static_pools(struct device *unused)
{
   215ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   215f0:	4c30      	ldr	r4, [pc, #192]	; (216b4 <init_static_pools+0xc8>)
	ARG_UNUSED(unused);
	struct k_mem_pool *p;

	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
   215f2:	4e31      	ldr	r6, [pc, #196]	; (216b8 <init_static_pools+0xcc>)
		sys_dlist_init(&p->levels[i].free_list);
   215f4:	270c      	movs	r7, #12
   215f6:	f1a4 0510 	sub.w	r5, r4, #16
	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
   215fa:	42b5      	cmp	r5, r6
   215fc:	d302      	bcc.n	21604 <init_static_pools+0x18>
		init_mem_pool(p);
	}

	return 0;
}
   215fe:	2000      	movs	r0, #0
   21600:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   21604:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   21608:	f834 ec08 	ldrh.w	lr, [r4, #-8]
	u32_t *bits = p->buf + buflen;
   2160c:	f854 0c10 	ldr.w	r0, [r4, #-16]
	list->head = (sys_dnode_t *)list;
   21610:	6024      	str	r4, [r4, #0]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   21612:	fb03 fe0e 	mul.w	lr, r3, lr
	u32_t *bits = p->buf + buflen;
   21616:	4470      	add	r0, lr
	list->tail = (sys_dnode_t *)list;
   21618:	6064      	str	r4, [r4, #4]
	for (i = 0; i < p->n_levels; i++) {
   2161a:	2100      	movs	r1, #0
			bits += (nblocks + 31)/32;
   2161c:	f04f 0c20 	mov.w	ip, #32
	for (i = 0; i < p->n_levels; i++) {
   21620:	f814 2c06 	ldrb.w	r2, [r4, #-6]
   21624:	4291      	cmp	r1, r2
   21626:	db07      	blt.n	21638 <init_static_pools+0x4c>
   21628:	f04f 0800 	mov.w	r8, #0
	for (i = 0; i < p->n_max; i++) {
   2162c:	f834 3c08 	ldrh.w	r3, [r4, #-8]
   21630:	4598      	cmp	r8, r3
   21632:	db24      	blt.n	2167e <init_static_pools+0x92>
   21634:	3418      	adds	r4, #24
   21636:	e7de      	b.n	215f6 <init_static_pools+0xa>
		sys_dlist_init(&p->levels[i].free_list);
   21638:	f854 ac04 	ldr.w	sl, [r4, #-4]
		int nblocks = buflen / sz;
   2163c:	fbbe f2f3 	udiv	r2, lr, r3
		sys_dlist_init(&p->levels[i].free_list);
   21640:	fb07 f901 	mul.w	r9, r7, r1
		if (nblocks < 32) {
   21644:	2a1f      	cmp	r2, #31
		sys_dlist_init(&p->levels[i].free_list);
   21646:	eb0a 0809 	add.w	r8, sl, r9
		sz = _ALIGN4(sz / 4);
   2164a:	ea4f 0393 	mov.w	r3, r3, lsr #2
		sys_dlist_init(&p->levels[i].free_list);
   2164e:	f108 0b04 	add.w	fp, r8, #4
			bits += (nblocks + 31)/32;
   21652:	bfc8      	it	gt
   21654:	321f      	addgt	r2, #31
		sz = _ALIGN4(sz / 4);
   21656:	f103 0303 	add.w	r3, r3, #3
	list->head = (sys_dnode_t *)list;
   2165a:	f8c8 b004 	str.w	fp, [r8, #4]
	list->tail = (sys_dnode_t *)list;
   2165e:	f8c8 b008 	str.w	fp, [r8, #8]
			bits += (nblocks + 31)/32;
   21662:	bfca      	itet	gt
   21664:	fb92 f2fc 	sdivgt	r2, r2, ip
			p->max_inline_level = i;
   21668:	f804 1c05 	strble.w	r1, [r4, #-5]
			p->levels[i].bits_p = bits;
   2166c:	f84a 0009 	strgt.w	r0, [sl, r9]
		sz = _ALIGN4(sz / 4);
   21670:	f023 0303 	bic.w	r3, r3, #3
			bits += (nblocks + 31)/32;
   21674:	bfc8      	it	gt
   21676:	eb00 0082 	addgt.w	r0, r0, r2, lsl #2
	for (i = 0; i < p->n_levels; i++) {
   2167a:	3101      	adds	r1, #1
   2167c:	e7d0      	b.n	21620 <init_static_pools+0x34>
	return p->buf + lsz * block;
   2167e:	f854 2c0c 	ldr.w	r2, [r4, #-12]
		sys_dlist_append(&p->levels[0].free_list, block);
   21682:	f854 3c04 	ldr.w	r3, [r4, #-4]
	return p->buf + lsz * block;
   21686:	f854 0c10 	ldr.w	r0, [r4, #-16]
   2168a:	fb02 f208 	mul.w	r2, r2, r8
		sys_dlist_append(&p->levels[0].free_list, block);
   2168e:	f103 0e04 	add.w	lr, r3, #4
	node->next = list;
   21692:	f840 e002 	str.w	lr, [r0, r2]
	return p->buf + lsz * block;
   21696:	1881      	adds	r1, r0, r2
	node->prev = list->tail;
   21698:	689a      	ldr	r2, [r3, #8]
   2169a:	604a      	str	r2, [r1, #4]
	list->tail->next = node;
   2169c:	689a      	ldr	r2, [r3, #8]
		set_free_bit(p, 0, i);
   2169e:	4628      	mov	r0, r5
   216a0:	6011      	str	r1, [r2, #0]
	list->tail = node;
   216a2:	6099      	str	r1, [r3, #8]
   216a4:	4642      	mov	r2, r8
   216a6:	2100      	movs	r1, #0
   216a8:	f7ff ff92 	bl	215d0 <set_free_bit>
	for (i = 0; i < p->n_max; i++) {
   216ac:	f108 0801 	add.w	r8, r8, #1
   216b0:	e7bc      	b.n	2162c <init_static_pools+0x40>
   216b2:	bf00      	nop
   216b4:	2000a9c4 	.word	0x2000a9c4
   216b8:	2000a9b4 	.word	0x2000a9b4

000216bc <k_queue_init>:
	list->head = NULL;
   216bc:	2300      	movs	r3, #0
   216be:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
   216c0:	6043      	str	r3, [r0, #4]
void k_queue_init(struct k_queue *queue)
{
	sys_slist_init(&queue->data_q);
	sys_dlist_init(&queue->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&queue->poll_events);
   216c2:	f100 0308 	add.w	r3, r0, #8
	list->head = (sys_dnode_t *)list;
   216c6:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   216c8:	60c3      	str	r3, [r0, #12]
   216ca:	4770      	bx	lr

000216cc <k_queue_insert>:

	irq_unlock(key);
}

void k_queue_insert(struct k_queue *queue, void *prev, void *data)
{
   216cc:	b510      	push	{r4, lr}
	__asm__ volatile(
   216ce:	f04f 0320 	mov.w	r3, #32
   216d2:	f3ef 8411 	mrs	r4, BASEPRI
   216d6:	f383 8811 	msr	BASEPRI, r3
	if (!prev) {
   216da:	b931      	cbnz	r1, 216ea <k_queue_insert+0x1e>
	node->next = list->head;
   216dc:	6803      	ldr	r3, [r0, #0]
   216de:	6013      	str	r3, [r2, #0]
	if (!list->tail) {
   216e0:	6843      	ldr	r3, [r0, #4]
	list->head = node;
   216e2:	6002      	str	r2, [r0, #0]
	if (!list->tail) {
   216e4:	b943      	cbnz	r3, 216f8 <k_queue_insert+0x2c>
		list->tail = node;
   216e6:	6042      	str	r2, [r0, #4]
   216e8:	e006      	b.n	216f8 <k_queue_insert+0x2c>
	} else if (!prev->next) {
   216ea:	680b      	ldr	r3, [r1, #0]
	node->next = NULL;
   216ec:	6013      	str	r3, [r2, #0]
	} else if (!prev->next) {
   216ee:	b98b      	cbnz	r3, 21714 <k_queue_insert+0x48>
	if (!list->tail) {
   216f0:	6843      	ldr	r3, [r0, #4]
   216f2:	b96b      	cbnz	r3, 21710 <k_queue_insert+0x44>
		list->tail = node;
   216f4:	6042      	str	r2, [r0, #4]
		list->head = node;
   216f6:	6002      	str	r2, [r0, #0]
	return _handle_obj_poll_events(&queue->poll_events, state);
   216f8:	2104      	movs	r1, #4
   216fa:	3008      	adds	r0, #8
   216fc:	f001 f872 	bl	227e4 <_handle_obj_poll_events>
#endif /* !CONFIG_POLL */

	sys_slist_insert(&queue->data_q, prev, data);

#if defined(CONFIG_POLL)
	if (handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE)) {
   21700:	b150      	cbz	r0, 21718 <k_queue_insert+0x4c>
	_update_time_slice_before_swap();
   21702:	f000 fa23 	bl	21b4c <_update_time_slice_before_swap>
	return __swap(key);
   21706:	4620      	mov	r0, r4
		return;
	}
#endif /* CONFIG_POLL */

	irq_unlock(key);
}
   21708:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2170c:	f7e0 b8b2 	b.w	1874 <__swap>
		list->tail->next = node;
   21710:	601a      	str	r2, [r3, #0]
   21712:	e7e8      	b.n	216e6 <k_queue_insert+0x1a>
		prev->next = node;
   21714:	600a      	str	r2, [r1, #0]
   21716:	e7ef      	b.n	216f8 <k_queue_insert+0x2c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   21718:	f384 8811 	msr	BASEPRI, r4
   2171c:	bd10      	pop	{r4, pc}

0002171e <k_queue_append>:

void k_queue_append(struct k_queue *queue, void *data)
{
	return k_queue_insert(queue, queue->data_q.tail, data);
   2171e:	460a      	mov	r2, r1
   21720:	6841      	ldr	r1, [r0, #4]
   21722:	f7ff bfd3 	b.w	216cc <k_queue_insert>

00021726 <k_queue_prepend>:
}

void k_queue_prepend(struct k_queue *queue, void *data)
{
	return k_queue_insert(queue, NULL, data);
   21726:	460a      	mov	r2, r1
   21728:	2100      	movs	r1, #0
   2172a:	f7ff bfcf 	b.w	216cc <k_queue_insert>

0002172e <k_queue_append_list>:
}

void k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   2172e:	b510      	push	{r4, lr}
	__asm__ volatile(
   21730:	f04f 0320 	mov.w	r3, #32
   21734:	f3ef 8411 	mrs	r4, BASEPRI
   21738:	f383 8811 	msr	BASEPRI, r3
	if (!list->tail) {
   2173c:	6843      	ldr	r3, [r0, #4]
   2173e:	b96b      	cbnz	r3, 2175c <k_queue_append_list+0x2e>
		list->head = (sys_snode_t *)head;
   21740:	6001      	str	r1, [r0, #0]
		list->tail = (sys_snode_t *)tail;
   21742:	6042      	str	r2, [r0, #4]
	return _handle_obj_poll_events(&queue->poll_events, state);
   21744:	2104      	movs	r1, #4
   21746:	3008      	adds	r0, #8
   21748:	f001 f84c 	bl	227e4 <_handle_obj_poll_events>
			return;
		}
	}
#else
	sys_slist_append_list(&queue->data_q, head, tail);
	if (handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE)) {
   2174c:	b140      	cbz	r0, 21760 <k_queue_append_list+0x32>
	_update_time_slice_before_swap();
   2174e:	f000 f9fd 	bl	21b4c <_update_time_slice_before_swap>
	return __swap(key);
   21752:	4620      	mov	r0, r4
		return;
	}
#endif /* !CONFIG_POLL */

	irq_unlock(key);
}
   21754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   21758:	f7e0 b88c 	b.w	1874 <__swap>
		list->tail->next = (sys_snode_t *)head;
   2175c:	6019      	str	r1, [r3, #0]
   2175e:	e7f0      	b.n	21742 <k_queue_append_list+0x14>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   21760:	f384 8811 	msr	BASEPRI, r4
   21764:	bd10      	pop	{r4, pc}

00021766 <k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *k_queue_get(struct k_queue *queue, s32_t timeout)
{
   21766:	b530      	push	{r4, r5, lr}
   21768:	4604      	mov	r4, r0
   2176a:	b087      	sub	sp, #28
   2176c:	460d      	mov	r5, r1
	__asm__ volatile(
   2176e:	f04f 0220 	mov.w	r2, #32
   21772:	f3ef 8311 	mrs	r3, BASEPRI
   21776:	f382 8811 	msr	BASEPRI, r2
   2177a:	6802      	ldr	r2, [r0, #0]
	unsigned int key;
	void *data;

	key = irq_lock();

	if (likely(!sys_slist_is_empty(&queue->data_q))) {
   2177c:	b152      	cbz	r2, 21794 <k_queue_get+0x2e>
	list->head = node->next;
   2177e:	6811      	ldr	r1, [r2, #0]
   21780:	6001      	str	r1, [r0, #0]
	if (list->tail == node) {
   21782:	6840      	ldr	r0, [r0, #4]
   21784:	4282      	cmp	r2, r0
		list->tail = list->head;
   21786:	bf08      	it	eq
   21788:	6061      	streq	r1, [r4, #4]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2178a:	f383 8811 	msr	BASEPRI, r3
#else
	_pend_current_thread(&queue->wait_q, timeout);

	return _Swap(key) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
   2178e:	4610      	mov	r0, r2
   21790:	b007      	add	sp, #28
   21792:	bd30      	pop	{r4, r5, pc}
	if (timeout == K_NO_WAIT) {
   21794:	b919      	cbnz	r1, 2179e <k_queue_get+0x38>
   21796:	f383 8811 	msr	BASEPRI, r3
			return NULL;
   2179a:	2200      	movs	r2, #0
   2179c:	e7f7      	b.n	2178e <k_queue_get+0x28>
   2179e:	f383 8811 	msr	BASEPRI, r3
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   217a2:	2104      	movs	r1, #4
   217a4:	4603      	mov	r3, r0
   217a6:	eb0d 0001 	add.w	r0, sp, r1
   217aa:	f000 ff63 	bl	22674 <k_poll_event_init>
		event.state = K_POLL_STATE_NOT_READY;
   217ae:	f89d 3011 	ldrb.w	r3, [sp, #17]
		err = k_poll(&event, 1, timeout);
   217b2:	462a      	mov	r2, r5
		event.state = K_POLL_STATE_NOT_READY;
   217b4:	f36f 1307 	bfc	r3, #4, #4
		err = k_poll(&event, 1, timeout);
   217b8:	2101      	movs	r1, #1
   217ba:	a801      	add	r0, sp, #4
		event.state = K_POLL_STATE_NOT_READY;
   217bc:	f88d 3011 	strb.w	r3, [sp, #17]
		err = k_poll(&event, 1, timeout);
   217c0:	f000 ff6c 	bl	2269c <k_poll>
		if (err) {
   217c4:	2800      	cmp	r0, #0
   217c6:	d1e8      	bne.n	2179a <k_queue_get+0x34>
	__asm__ volatile(
   217c8:	f04f 0320 	mov.w	r3, #32
   217cc:	f3ef 8111 	mrs	r1, BASEPRI
   217d0:	f383 8811 	msr	BASEPRI, r3
   217d4:	6822      	ldr	r2, [r4, #0]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
   217d6:	b12a      	cbz	r2, 217e4 <k_queue_get+0x7e>
	if (list->tail == node) {
   217d8:	6860      	ldr	r0, [r4, #4]
	list->head = node->next;
   217da:	6813      	ldr	r3, [r2, #0]
   217dc:	6023      	str	r3, [r4, #0]
	if (list->tail == node) {
   217de:	4282      	cmp	r2, r0
		list->tail = list->head;
   217e0:	bf08      	it	eq
   217e2:	6063      	streq	r3, [r4, #4]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   217e4:	f381 8811 	msr	BASEPRI, r1
	} while (!val && timeout == K_FOREVER);
   217e8:	2a00      	cmp	r2, #0
   217ea:	d1d0      	bne.n	2178e <k_queue_get+0x28>
   217ec:	1c6b      	adds	r3, r5, #1
   217ee:	d0de      	beq.n	217ae <k_queue_get+0x48>
   217f0:	e7d3      	b.n	2179a <k_queue_get+0x34>
	...

000217f4 <_add_thread_to_ready_q>:
 *
 * Interrupts must be locked when calling this function.
 */

void _add_thread_to_ready_q(struct k_thread *thread)
{
   217f4:	b530      	push	{r4, r5, lr}
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
   217f6:	f990 300a 	ldrsb.w	r3, [r0, #10]
	*bmap |= _get_ready_q_prio_bit(prio);
   217fa:	4911      	ldr	r1, [pc, #68]	; (21840 <_add_thread_to_ready_q+0x4c>)
	return prio + _NUM_COOP_PRIO;
   217fc:	f103 0410 	add.w	r4, r3, #16
	return (prio + _NUM_COOP_PRIO) >> 5;
   21800:	1162      	asrs	r2, r4, #5
   21802:	3206      	adds	r2, #6
   21804:	eb01 0282 	add.w	r2, r1, r2, lsl #2
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
   21808:	f004 051f 	and.w	r5, r4, #31
   2180c:	2401      	movs	r4, #1
   2180e:	40ac      	lsls	r4, r5
   21810:	6895      	ldr	r5, [r2, #8]
	sys_dlist_t *q = &_ready_q.q[q_index];
   21812:	3314      	adds	r3, #20
	*bmap |= _get_ready_q_prio_bit(prio);
   21814:	432c      	orrs	r4, r5
	sys_dlist_t *q = &_ready_q.q[q_index];
   21816:	00db      	lsls	r3, r3, #3
	*bmap |= _get_ready_q_prio_bit(prio);
   21818:	6094      	str	r4, [r2, #8]
	sys_dlist_t *q = &_ready_q.q[q_index];
   2181a:	1d1a      	adds	r2, r3, #4
   2181c:	440a      	add	r2, r1
	node->prev = list->tail;
   2181e:	440b      	add	r3, r1
	node->next = list;
   21820:	6002      	str	r2, [r0, #0]
	node->prev = list->tail;
   21822:	689a      	ldr	r2, [r3, #8]
   21824:	6042      	str	r2, [r0, #4]
	list->tail->next = node;
   21826:	689a      	ldr	r2, [r3, #8]
   21828:	6010      	str	r0, [r2, #0]
	list->tail = node;
   2182a:	6098      	str	r0, [r3, #8]
	sys_dlist_append(q, &thread->base.k_q_node);

# ifndef CONFIG_SMP
	struct k_thread **cache = &_ready_q.cache;

	*cache = _is_t1_higher_prio_than_t2(thread, *cache) ? thread : *cache;
   2182c:	69cb      	ldr	r3, [r1, #28]
   2182e:	f990 400a 	ldrsb.w	r4, [r0, #10]
   21832:	f993 200a 	ldrsb.w	r2, [r3, #10]
   21836:	4294      	cmp	r4, r2
   21838:	bfa8      	it	ge
   2183a:	4618      	movge	r0, r3
   2183c:	61c8      	str	r0, [r1, #28]
   2183e:	bd30      	pop	{r4, r5, pc}
   21840:	20002ff8 	.word	0x20002ff8

00021844 <_ready_thread>:
	thread->base.thread_state &= ~_THREAD_PRESTART;
   21844:	7a42      	ldrb	r2, [r0, #9]
   21846:	f022 0104 	bic.w	r1, r2, #4
	return !(_is_thread_prevented_from_running(thread) ||
   2184a:	f012 0f1b 	tst.w	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2184e:	7241      	strb	r1, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   21850:	d104      	bne.n	2185c <_ready_thread+0x18>
   21852:	6a03      	ldr	r3, [r0, #32]
   21854:	3301      	adds	r3, #1
   21856:	d101      	bne.n	2185c <_ready_thread+0x18>
		_add_thread_to_ready_q(thread);
   21858:	f7ff bfcc 	b.w	217f4 <_add_thread_to_ready_q>
   2185c:	4770      	bx	lr
	...

00021860 <_add_timeout>:
{
   21860:	b570      	push	{r4, r5, r6, lr}
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   21862:	610b      	str	r3, [r1, #16]
	timeout->thread = thread;
   21864:	6088      	str	r0, [r1, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   21866:	60ca      	str	r2, [r1, #12]
	if (!timeout_in_ticks) {
   21868:	bb13      	cbnz	r3, 218b0 <_add_timeout+0x50>
	__asm__ volatile(
   2186a:	f04f 0220 	mov.w	r2, #32
   2186e:	f3ef 8411 	mrs	r4, BASEPRI
   21872:	f382 8811 	msr	BASEPRI, r2
	timeout->delta_ticks_from_prev = _INACTIVE;
   21876:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2187a:	610a      	str	r2, [r1, #16]
	if (thread) {
   2187c:	b180      	cbz	r0, 218a0 <_add_timeout+0x40>
	if (timeout_obj->wait_q) {
   2187e:	68ca      	ldr	r2, [r1, #12]
   21880:	b14a      	cbz	r2, 21896 <_add_timeout+0x36>
	node->prev->next = node->next;
   21882:	e890 0006 	ldmia.w	r0, {r1, r2}
   21886:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   21888:	6801      	ldr	r1, [r0, #0]
   2188a:	604a      	str	r2, [r1, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   2188c:	7a42      	ldrb	r2, [r0, #9]
		thread->base.timeout.wait_q = NULL;
   2188e:	61c3      	str	r3, [r0, #28]
   21890:	f022 0202 	bic.w	r2, r2, #2
   21894:	7242      	strb	r2, [r0, #9]
		_ready_thread(thread);
   21896:	f7ff ffd5 	bl	21844 <_ready_thread>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2189a:	f384 8811 	msr	BASEPRI, r4
   2189e:	bd70      	pop	{r4, r5, r6, pc}
   218a0:	f384 8811 	msr	BASEPRI, r4
		if (timeout->func) {
   218a4:	694b      	ldr	r3, [r1, #20]
   218a6:	b32b      	cbz	r3, 218f4 <_add_timeout+0x94>
			timeout->func(timeout);
   218a8:	4608      	mov	r0, r1
}
   218aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			timeout->func(timeout);
   218ae:	4718      	bx	r3
	return list->head == list;
   218b0:	4a11      	ldr	r2, [pc, #68]	; (218f8 <_add_timeout+0x98>)
   218b2:	4610      	mov	r0, r2
   218b4:	f850 3f10 	ldr.w	r3, [r0, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   218b8:	4283      	cmp	r3, r0
   218ba:	d10c      	bne.n	218d6 <_add_timeout+0x76>
	node->next = list;
   218bc:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
   218be:	6953      	ldr	r3, [r2, #20]
   218c0:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
   218c2:	6953      	ldr	r3, [r2, #20]
   218c4:	6019      	str	r1, [r3, #0]
	list->tail = node;
   218c6:	6151      	str	r1, [r2, #20]
   218c8:	bd70      	pop	{r4, r5, r6, pc}
		*delta -= in_q->delta_ticks_from_prev;
   218ca:	1b64      	subs	r4, r4, r5
   218cc:	610c      	str	r4, [r1, #16]
	return (node == list->tail) ? NULL : node->next;
   218ce:	6954      	ldr	r4, [r2, #20]
   218d0:	42a3      	cmp	r3, r4
   218d2:	d0f3      	beq.n	218bc <_add_timeout+0x5c>
   218d4:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   218d6:	2b00      	cmp	r3, #0
   218d8:	d0f0      	beq.n	218bc <_add_timeout+0x5c>
		if (*delta <= in_q->delta_ticks_from_prev) {
   218da:	690c      	ldr	r4, [r1, #16]
   218dc:	691d      	ldr	r5, [r3, #16]
   218de:	42ac      	cmp	r4, r5
   218e0:	dcf3      	bgt.n	218ca <_add_timeout+0x6a>
		node->prev = insert_point->prev;
   218e2:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   218e4:	1b2c      	subs	r4, r5, r4
   218e6:	611c      	str	r4, [r3, #16]
   218e8:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
   218ea:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
   218ec:	685a      	ldr	r2, [r3, #4]
   218ee:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
   218f0:	6059      	str	r1, [r3, #4]
   218f2:	bd70      	pop	{r4, r5, r6, pc}
   218f4:	bd70      	pop	{r4, r5, r6, pc}
   218f6:	bf00      	nop
   218f8:	20002ff8 	.word	0x20002ff8

000218fc <_remove_thread_from_ready_q>:
	node->prev->next = node->next;
   218fc:	e890 000a 	ldmia.w	r0, {r1, r3}
 *
 * Interrupts must be locked when calling this function.
 */

void _remove_thread_from_ready_q(struct k_thread *thread)
{
   21900:	b510      	push	{r4, lr}
#if defined(CONFIG_MULTITHREADING) && !defined(CONFIG_SMP)
	int q_index = _get_ready_q_q_index(thread->base.prio);
   21902:	f990 200a 	ldrsb.w	r2, [r0, #10]
   21906:	6019      	str	r1, [r3, #0]
	node->next->prev = node->prev;
   21908:	6801      	ldr	r1, [r0, #0]
	sys_dlist_t *q = &_ready_q.q[q_index];
   2190a:	3214      	adds	r2, #20
   2190c:	604b      	str	r3, [r1, #4]
   2190e:	4b14      	ldr	r3, [pc, #80]	; (21960 <_remove_thread_from_ready_q+0x64>)
   21910:	00d2      	lsls	r2, r2, #3
   21912:	1d11      	adds	r1, r2, #4
	return list->head == list;
   21914:	441a      	add	r2, r3
   21916:	4419      	add	r1, r3

	sys_dlist_remove(&thread->base.k_q_node);
	if (sys_dlist_is_empty(q)) {
   21918:	6852      	ldr	r2, [r2, #4]
   2191a:	428a      	cmp	r2, r1
   2191c:	d10f      	bne.n	2193e <_remove_thread_from_ready_q+0x42>
		clear_ready_q_prio_bit(thread->base.prio);
   2191e:	f990 100a 	ldrsb.w	r1, [r0, #10]
	return (prio + _NUM_COOP_PRIO) >> 5;
   21922:	3110      	adds	r1, #16
   21924:	114a      	asrs	r2, r1, #5
	*bmap &= ~_get_ready_q_prio_bit(prio);
   21926:	3206      	adds	r2, #6
   21928:	eb03 0282 	add.w	r2, r3, r2, lsl #2
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
   2192c:	2401      	movs	r4, #1
   2192e:	f001 011f 	and.w	r1, r1, #31
   21932:	fa04 f101 	lsl.w	r1, r4, r1
   21936:	6894      	ldr	r4, [r2, #8]
   21938:	ea24 0401 	bic.w	r4, r4, r1
   2193c:	6094      	str	r4, [r2, #8]
	}

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? get_ready_q_head() : *cache;
   2193e:	69da      	ldr	r2, [r3, #28]
   21940:	4290      	cmp	r0, r2
   21942:	d10b      	bne.n	2195c <_remove_thread_from_ready_q+0x60>
	return __builtin_ffs(op);
   21944:	6a19      	ldr	r1, [r3, #32]
   21946:	fa91 f2a1 	rbit	r2, r1
   2194a:	2900      	cmp	r1, #0
   2194c:	fab2 f282 	clz	r2, r2
   21950:	bf08      	it	eq
   21952:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   21956:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   2195a:	6a52      	ldr	r2, [r2, #36]	; 0x24
   2195c:	61da      	str	r2, [r3, #28]
   2195e:	bd10      	pop	{r4, pc}
   21960:	20002ff8 	.word	0x20002ff8

00021964 <_pend_thread>:
#endif

/* pend the specified thread: it must *not* be in the ready queue */
/* must be called with interrupts locked */
void _pend_thread(struct k_thread *thread, _wait_q_t *wait_q, s32_t timeout)
{
   21964:	b430      	push	{r4, r5}
   21966:	680c      	ldr	r4, [r1, #0]
#ifdef CONFIG_MULTITHREADING
	sys_dlist_t *wait_q_list = (sys_dlist_t *)wait_q;
	struct k_thread *pending;

	SYS_DLIST_FOR_EACH_CONTAINER(wait_q_list, pending, base.k_q_node) {
   21968:	42a1      	cmp	r1, r4
   2196a:	bf08      	it	eq
   2196c:	2400      	moveq	r4, #0
   2196e:	b314      	cbz	r4, 219b6 <_pend_thread+0x52>
		if (_is_t1_higher_prio_than_t2(thread, pending)) {
   21970:	f990 500a 	ldrsb.w	r5, [r0, #10]
   21974:	f994 300a 	ldrsb.w	r3, [r4, #10]
   21978:	429d      	cmp	r5, r3
   2197a:	da16      	bge.n	219aa <_pend_thread+0x46>
		node->prev = insert_point->prev;
   2197c:	6863      	ldr	r3, [r4, #4]
   2197e:	6043      	str	r3, [r0, #4]
		node->next = insert_point;
   21980:	6004      	str	r4, [r0, #0]
		insert_point->prev->next = node;
   21982:	6863      	ldr	r3, [r4, #4]
   21984:	6018      	str	r0, [r3, #0]
		insert_point->prev = node;
   21986:	6060      	str	r0, [r4, #4]
	thread->base.thread_state |= _THREAD_PENDING;
   21988:	7a43      	ldrb	r3, [r0, #9]
   2198a:	f043 0302 	orr.w	r3, r3, #2
   2198e:	7243      	strb	r3, [r0, #9]
	sys_dlist_append(wait_q_list, &thread->base.k_q_node);

inserted:
	_mark_thread_as_pending(thread);

	if (timeout != K_FOREVER) {
   21990:	1c53      	adds	r3, r2, #1
   21992:	d017      	beq.n	219c4 <_pend_thread+0x60>
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   21994:	3209      	adds	r2, #9
   21996:	230a      	movs	r3, #10
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(timeout);

		_add_thread_timeout(thread, wait_q, ticks);
	}
#endif
}
   21998:	bc30      	pop	{r4, r5}
   2199a:	fbb2 f3f3 	udiv	r3, r2, r3
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   2199e:	460a      	mov	r2, r1
   219a0:	3301      	adds	r3, #1
   219a2:	f100 0110 	add.w	r1, r0, #16
   219a6:	f7ff bf5b 	b.w	21860 <_add_timeout>
	return (node == list->tail) ? NULL : node->next;
   219aa:	684b      	ldr	r3, [r1, #4]
   219ac:	429c      	cmp	r4, r3
   219ae:	d002      	beq.n	219b6 <_pend_thread+0x52>
   219b0:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(wait_q_list, pending, base.k_q_node) {
   219b2:	2c00      	cmp	r4, #0
   219b4:	d1db      	bne.n	2196e <_pend_thread+0xa>
	node->next = list;
   219b6:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
   219b8:	684b      	ldr	r3, [r1, #4]
   219ba:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
   219bc:	684b      	ldr	r3, [r1, #4]
   219be:	6018      	str	r0, [r3, #0]
	list->tail = node;
   219c0:	6048      	str	r0, [r1, #4]
   219c2:	e7e1      	b.n	21988 <_pend_thread+0x24>
}
   219c4:	bc30      	pop	{r4, r5}
   219c6:	4770      	bx	lr

000219c8 <_pend_current_thread>:

/* pend the current thread */
/* must be called with interrupts locked */
void _pend_current_thread(_wait_q_t *wait_q, s32_t timeout)
{
   219c8:	b570      	push	{r4, r5, r6, lr}
	_remove_thread_from_ready_q(_current);
   219ca:	4c06      	ldr	r4, [pc, #24]	; (219e4 <_pend_current_thread+0x1c>)
{
   219cc:	460e      	mov	r6, r1
   219ce:	4605      	mov	r5, r0
	_remove_thread_from_ready_q(_current);
   219d0:	68a0      	ldr	r0, [r4, #8]
   219d2:	f7ff ff93 	bl	218fc <_remove_thread_from_ready_q>
	_pend_thread(_current, wait_q, timeout);
   219d6:	4632      	mov	r2, r6
   219d8:	4629      	mov	r1, r5
   219da:	68a0      	ldr	r0, [r4, #8]
}
   219dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	_pend_thread(_current, wait_q, timeout);
   219e0:	f7ff bfc0 	b.w	21964 <_pend_thread>
   219e4:	20002ff8 	.word	0x20002ff8

000219e8 <__must_switch_threads>:
	ready_range = _ready_q.prio_bmap[0];
   219e8:	4a09      	ldr	r2, [pc, #36]	; (21a10 <__must_switch_threads+0x28>)
   219ea:	6a11      	ldr	r1, [r2, #32]

#ifdef CONFIG_KERNEL_DEBUG
	dump_ready_q();
#endif  /* CONFIG_KERNEL_DEBUG */

	return _is_prio_higher(_get_highest_ready_prio(), _current->base.prio);
   219ec:	6892      	ldr	r2, [r2, #8]
   219ee:	2900      	cmp	r1, #0
   219f0:	fa91 f3a1 	rbit	r3, r1
   219f4:	f992 000a 	ldrsb.w	r0, [r2, #10]
   219f8:	fab3 f383 	clz	r3, r3
   219fc:	bf08      	it	eq
   219fe:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
	return abs_prio - _NUM_COOP_PRIO;
   21a02:	3b10      	subs	r3, #16
#else
	return 0;
#endif
}
   21a04:	4298      	cmp	r0, r3
   21a06:	bfd4      	ite	le
   21a08:	2000      	movle	r0, #0
   21a0a:	2001      	movgt	r0, #1
   21a0c:	4770      	bx	lr
   21a0e:	bf00      	nop
   21a10:	20002ff8 	.word	0x20002ff8

00021a14 <_reschedule_threads>:
{
   21a14:	b510      	push	{r4, lr}
	return _is_preempt(_current) && __must_switch_threads();
   21a16:	4b0a      	ldr	r3, [pc, #40]	; (21a40 <_reschedule_threads+0x2c>)
   21a18:	689b      	ldr	r3, [r3, #8]
   21a1a:	895b      	ldrh	r3, [r3, #10]
   21a1c:	2b7f      	cmp	r3, #127	; 0x7f
   21a1e:	4604      	mov	r4, r0
   21a20:	d802      	bhi.n	21a28 <_reschedule_threads+0x14>
   21a22:	f7ff ffe1 	bl	219e8 <__must_switch_threads>
   21a26:	b910      	cbnz	r0, 21a2e <_reschedule_threads+0x1a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   21a28:	f384 8811 	msr	BASEPRI, r4
   21a2c:	bd10      	pop	{r4, pc}
		_set_time(remaining);
	}

#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
   21a2e:	4b05      	ldr	r3, [pc, #20]	; (21a44 <_reschedule_threads+0x30>)
   21a30:	2200      	movs	r2, #0
   21a32:	4620      	mov	r0, r4
}
   21a34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_time_slice_elapsed = 0;
   21a38:	601a      	str	r2, [r3, #0]
   21a3a:	f7df bf1b 	b.w	1874 <__swap>
   21a3e:	bf00      	nop
   21a40:	20002ff8 	.word	0x20002ff8
   21a44:	20003334 	.word	0x20003334

00021a48 <k_sched_unlock>:
	__asm__ volatile(
   21a48:	f04f 0320 	mov.w	r3, #32
   21a4c:	f3ef 8011 	mrs	r0, BASEPRI
   21a50:	f383 8811 	msr	BASEPRI, r3
	++_current->base.sched_locked;
   21a54:	4b03      	ldr	r3, [pc, #12]	; (21a64 <k_sched_unlock+0x1c>)
   21a56:	689a      	ldr	r2, [r3, #8]
   21a58:	7ad3      	ldrb	r3, [r2, #11]
   21a5a:	3301      	adds	r3, #1
   21a5c:	72d3      	strb	r3, [r2, #11]
	_reschedule_threads(key);
   21a5e:	f7ff bfd9 	b.w	21a14 <_reschedule_threads>
   21a62:	bf00      	nop
   21a64:	20002ff8 	.word	0x20002ff8

00021a68 <_move_thread_to_end_of_prio_q>:
	int q_index = _get_ready_q_q_index(thread->base.prio);
   21a68:	f990 300a 	ldrsb.w	r3, [r0, #10]
	sys_dlist_t *q = &_ready_q.q[q_index];
   21a6c:	4a12      	ldr	r2, [pc, #72]	; (21ab8 <_move_thread_to_end_of_prio_q+0x50>)
{
   21a6e:	b530      	push	{r4, r5, lr}
	sys_dlist_t *q = &_ready_q.q[q_index];
   21a70:	3314      	adds	r3, #20
   21a72:	00db      	lsls	r3, r3, #3
   21a74:	1d19      	adds	r1, r3, #4
   21a76:	4411      	add	r1, r2
	if (sys_dlist_is_tail(q, &thread->base.k_q_node)) {
   21a78:	684c      	ldr	r4, [r1, #4]
   21a7a:	42a0      	cmp	r0, r4
   21a7c:	d01b      	beq.n	21ab6 <_move_thread_to_end_of_prio_q+0x4e>
	node->prev->next = node->next;
   21a7e:	6844      	ldr	r4, [r0, #4]
   21a80:	6805      	ldr	r5, [r0, #0]
   21a82:	6025      	str	r5, [r4, #0]
	node->next->prev = node->prev;
   21a84:	6805      	ldr	r5, [r0, #0]
	node->prev = list->tail;
   21a86:	4413      	add	r3, r2
	node->next->prev = node->prev;
   21a88:	606c      	str	r4, [r5, #4]
	node->next = list;
   21a8a:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
   21a8c:	6899      	ldr	r1, [r3, #8]
   21a8e:	6041      	str	r1, [r0, #4]
	list->tail->next = node;
   21a90:	6899      	ldr	r1, [r3, #8]
   21a92:	6008      	str	r0, [r1, #0]
	list->tail = node;
   21a94:	6098      	str	r0, [r3, #8]
	*cache = *cache == thread ? get_ready_q_head() : *cache;
   21a96:	69d3      	ldr	r3, [r2, #28]
   21a98:	4298      	cmp	r0, r3
   21a9a:	d10b      	bne.n	21ab4 <_move_thread_to_end_of_prio_q+0x4c>
	return __builtin_ffs(op);
   21a9c:	6a11      	ldr	r1, [r2, #32]
   21a9e:	fa91 f3a1 	rbit	r3, r1
   21aa2:	2900      	cmp	r1, #0
   21aa4:	fab3 f383 	clz	r3, r3
   21aa8:	bf08      	it	eq
   21aaa:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   21aae:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   21ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   21ab4:	61d3      	str	r3, [r2, #28]
   21ab6:	bd30      	pop	{r4, r5, pc}
   21ab8:	20002ff8 	.word	0x20002ff8

00021abc <_impl_k_yield>:
{
   21abc:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   21abe:	f04f 0320 	mov.w	r3, #32
   21ac2:	f3ef 8511 	mrs	r5, BASEPRI
   21ac6:	f383 8811 	msr	BASEPRI, r3
	_move_thread_to_end_of_prio_q(_current);
   21aca:	4c09      	ldr	r4, [pc, #36]	; (21af0 <_impl_k_yield+0x34>)
   21acc:	68a0      	ldr	r0, [r4, #8]
   21ace:	f7ff ffcb 	bl	21a68 <_move_thread_to_end_of_prio_q>
	if (_current == _get_next_ready_thread()) {
   21ad2:	68a2      	ldr	r2, [r4, #8]
   21ad4:	69e3      	ldr	r3, [r4, #28]
   21ad6:	429a      	cmp	r2, r3
   21ad8:	d102      	bne.n	21ae0 <_impl_k_yield+0x24>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   21ada:	f385 8811 	msr	BASEPRI, r5
   21ade:	bd38      	pop	{r3, r4, r5, pc}
	_time_slice_elapsed = 0;
   21ae0:	4b04      	ldr	r3, [pc, #16]	; (21af4 <_impl_k_yield+0x38>)
   21ae2:	2200      	movs	r2, #0
   21ae4:	601a      	str	r2, [r3, #0]
   21ae6:	4628      	mov	r0, r5
}
   21ae8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   21aec:	f7df bec2 	b.w	1874 <__swap>
   21af0:	20002ff8 	.word	0x20002ff8
   21af4:	20003334 	.word	0x20003334

00021af8 <_impl_k_current_get>:
}
   21af8:	4b01      	ldr	r3, [pc, #4]	; (21b00 <_impl_k_current_get+0x8>)
   21afa:	6898      	ldr	r0, [r3, #8]
   21afc:	4770      	bx	lr
   21afe:	bf00      	nop
   21b00:	20002ff8 	.word	0x20002ff8

00021b04 <_is_thread_time_slicing>:
	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
   21b04:	4b0d      	ldr	r3, [pc, #52]	; (21b3c <_is_thread_time_slicing+0x38>)
   21b06:	681b      	ldr	r3, [r3, #0]
   21b08:	2b00      	cmp	r3, #0
   21b0a:	dd14      	ble.n	21b36 <_is_thread_time_slicing+0x32>
	return thread == _idle_thread;
   21b0c:	4b0c      	ldr	r3, [pc, #48]	; (21b40 <_is_thread_time_slicing+0x3c>)
   21b0e:	681b      	ldr	r3, [r3, #0]
   21b10:	4298      	cmp	r0, r3
   21b12:	d010      	beq.n	21b36 <_is_thread_time_slicing+0x32>
	    || _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
   21b14:	4a0b      	ldr	r2, [pc, #44]	; (21b44 <_is_thread_time_slicing+0x40>)
   21b16:	f990 300a 	ldrsb.w	r3, [r0, #10]
   21b1a:	6812      	ldr	r2, [r2, #0]
   21b1c:	4293      	cmp	r3, r2
   21b1e:	db0a      	blt.n	21b36 <_is_thread_time_slicing+0x32>
	return list->head != list->tail;
   21b20:	f103 0214 	add.w	r2, r3, #20
   21b24:	4b08      	ldr	r3, [pc, #32]	; (21b48 <_is_thread_time_slicing+0x44>)
   21b26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   21b2a:	6858      	ldr	r0, [r3, #4]
   21b2c:	689b      	ldr	r3, [r3, #8]
   21b2e:	1ac0      	subs	r0, r0, r3
   21b30:	bf18      	it	ne
   21b32:	2001      	movne	r0, #1
	return sys_dlist_has_multiple_nodes(q);
   21b34:	4770      	bx	lr
		return 0;
   21b36:	2000      	movs	r0, #0
}
   21b38:	4770      	bx	lr
   21b3a:	bf00      	nop
   21b3c:	2000311c 	.word	0x2000311c
   21b40:	00027318 	.word	0x00027318
   21b44:	20003120 	.word	0x20003120
   21b48:	20002ff8 	.word	0x20002ff8

00021b4c <_update_time_slice_before_swap>:
	_time_slice_elapsed = 0;
   21b4c:	4b01      	ldr	r3, [pc, #4]	; (21b54 <_update_time_slice_before_swap+0x8>)
   21b4e:	2200      	movs	r2, #0
   21b50:	601a      	str	r2, [r3, #0]
   21b52:	4770      	bx	lr
   21b54:	20003334 	.word	0x20003334

00021b58 <_unpend_first_thread>:
	if (_handling_timeouts) {
   21b58:	4a10      	ldr	r2, [pc, #64]	; (21b9c <_unpend_first_thread+0x44>)
   21b5a:	6812      	ldr	r2, [r2, #0]
{
   21b5c:	4603      	mov	r3, r0
   21b5e:	6800      	ldr	r0, [r0, #0]
	if (_handling_timeouts) {
   21b60:	b16a      	cbz	r2, 21b7e <_unpend_first_thread+0x26>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21b62:	4283      	cmp	r3, r0
   21b64:	bf08      	it	eq
   21b66:	2000      	moveq	r0, #0
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
   21b68:	b908      	cbnz	r0, 21b6e <_unpend_first_thread+0x16>
   21b6a:	2000      	movs	r0, #0
   21b6c:	4770      	bx	lr
			if (_is_thread_timeout_expired(thread)) {
   21b6e:	6a02      	ldr	r2, [r0, #32]
   21b70:	3202      	adds	r2, #2
   21b72:	d107      	bne.n	21b84 <_unpend_first_thread+0x2c>
	return (node == list->tail) ? NULL : node->next;
   21b74:	685a      	ldr	r2, [r3, #4]
   21b76:	4290      	cmp	r0, r2
   21b78:	d0f7      	beq.n	21b6a <_unpend_first_thread+0x12>
   21b7a:	6800      	ldr	r0, [r0, #0]
   21b7c:	e7f4      	b.n	21b68 <_unpend_first_thread+0x10>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21b7e:	4283      	cmp	r3, r0
   21b80:	d00a      	beq.n	21b98 <_unpend_first_thread+0x40>
	if (thread) {
   21b82:	b150      	cbz	r0, 21b9a <_unpend_first_thread+0x42>
	node->prev->next = node->next;
   21b84:	e890 000c 	ldmia.w	r0, {r2, r3}
   21b88:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   21b8a:	6802      	ldr	r2, [r0, #0]
   21b8c:	6053      	str	r3, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   21b8e:	7a43      	ldrb	r3, [r0, #9]
   21b90:	f023 0302 	bic.w	r3, r3, #2
   21b94:	7243      	strb	r3, [r0, #9]
   21b96:	4770      	bx	lr
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21b98:	4610      	mov	r0, r2
		_unpend_thread(thread);
	}

	return thread;
}
   21b9a:	4770      	bx	lr
   21b9c:	20003330 	.word	0x20003330

00021ba0 <_impl_k_sem_init>:

	sem->count = initial_count;
	sem->limit = limit;
	sys_dlist_init(&sem->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&sem->poll_events);
   21ba0:	f100 0310 	add.w	r3, r0, #16
	sem->count = initial_count;
   21ba4:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   21ba6:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   21ba8:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   21baa:	6040      	str	r0, [r0, #4]
	list->head = (sys_dnode_t *)list;
   21bac:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   21bae:	6143      	str	r3, [r0, #20]
   21bb0:	4770      	bx	lr
	...

00021bb4 <_impl_k_sem_give>:

	_set_thread_return_value(thread, 0);
}

void _impl_k_sem_give(struct k_sem *sem)
{
   21bb4:	b570      	push	{r4, r5, r6, lr}
   21bb6:	4605      	mov	r5, r0
	__asm__ volatile(
   21bb8:	f04f 0320 	mov.w	r3, #32
   21bbc:	f3ef 8611 	mrs	r6, BASEPRI
   21bc0:	f383 8811 	msr	BASEPRI, r3
	struct k_thread *thread = _unpend_first_thread(&sem->wait_q);
   21bc4:	f7ff ffc8 	bl	21b58 <_unpend_first_thread>
	if (!thread) {
   21bc8:	4604      	mov	r4, r0
   21bca:	b998      	cbnz	r0, 21bf4 <_impl_k_sem_give+0x40>
	sem->count += (sem->count != sem->limit);
   21bcc:	68ab      	ldr	r3, [r5, #8]
   21bce:	68ea      	ldr	r2, [r5, #12]
   21bd0:	429a      	cmp	r2, r3
   21bd2:	bf18      	it	ne
   21bd4:	3301      	addne	r3, #1
   21bd6:	60ab      	str	r3, [r5, #8]
	return _handle_obj_poll_events(&sem->poll_events, state);
   21bd8:	2102      	movs	r1, #2
   21bda:	f105 0010 	add.w	r0, r5, #16
   21bde:	f000 fe01 	bl	227e4 <_handle_obj_poll_events>
	unsigned int key;

	key = irq_lock();

	if (do_sem_give(sem)) {
   21be2:	2800      	cmp	r0, #0
   21be4:	d03b      	beq.n	21c5e <_impl_k_sem_give+0xaa>
	_update_time_slice_before_swap();
   21be6:	f7ff ffb1 	bl	21b4c <_update_time_slice_before_swap>
	return __swap(key);
   21bea:	4630      	mov	r0, r6
		_Swap(key);
	} else {
		irq_unlock(key);
	}
}
   21bec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   21bf0:	f7df be40 	b.w	1874 <__swap>
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   21bf4:	6a01      	ldr	r1, [r0, #32]
	return _abort_timeout(&thread->base.timeout);
   21bf6:	f100 0210 	add.w	r2, r0, #16
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   21bfa:	1c48      	adds	r0, r1, #1
   21bfc:	d00f      	beq.n	21c1e <_impl_k_sem_give+0x6a>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   21bfe:	4b1b      	ldr	r3, [pc, #108]	; (21c6c <_impl_k_sem_give+0xb8>)
   21c00:	695b      	ldr	r3, [r3, #20]
   21c02:	429a      	cmp	r2, r3
	return (node == list->tail) ? NULL : node->next;
   21c04:	bf1f      	itttt	ne
   21c06:	6922      	ldrne	r2, [r4, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   21c08:	6913      	ldrne	r3, [r2, #16]
   21c0a:	185b      	addne	r3, r3, r1
   21c0c:	6113      	strne	r3, [r2, #16]
	node->prev->next = node->next;
   21c0e:	6963      	ldr	r3, [r4, #20]
   21c10:	6922      	ldr	r2, [r4, #16]
   21c12:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   21c14:	6922      	ldr	r2, [r4, #16]
   21c16:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   21c18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21c1c:	6223      	str	r3, [r4, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   21c1e:	7a63      	ldrb	r3, [r4, #9]
   21c20:	f023 0204 	bic.w	r2, r3, #4
	return !(_is_thread_prevented_from_running(thread) ||
   21c24:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   21c28:	7262      	strb	r2, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   21c2a:	d102      	bne.n	21c32 <_impl_k_sem_give+0x7e>
   21c2c:	6a23      	ldr	r3, [r4, #32]
   21c2e:	3301      	adds	r3, #1
   21c30:	d018      	beq.n	21c64 <_impl_k_sem_give+0xb0>
   21c32:	2300      	movs	r3, #0
   21c34:	6663      	str	r3, [r4, #100]	; 0x64
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   21c36:	f3ef 8305 	mrs	r3, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
   21c3a:	2b0d      	cmp	r3, #13
   21c3c:	d80f      	bhi.n	21c5e <_impl_k_sem_give+0xaa>
   21c3e:	b11b      	cbz	r3, 21c48 <_impl_k_sem_give+0x94>
   21c40:	4b0b      	ldr	r3, [pc, #44]	; (21c70 <_impl_k_sem_give+0xbc>)
   21c42:	685b      	ldr	r3, [r3, #4]
   21c44:	051b      	lsls	r3, r3, #20
   21c46:	d50a      	bpl.n	21c5e <_impl_k_sem_give+0xaa>
	return _is_preempt(_current) && __must_switch_threads();
   21c48:	4b08      	ldr	r3, [pc, #32]	; (21c6c <_impl_k_sem_give+0xb8>)
   21c4a:	689b      	ldr	r3, [r3, #8]
   21c4c:	895b      	ldrh	r3, [r3, #10]
   21c4e:	2b7f      	cmp	r3, #127	; 0x7f
   21c50:	d805      	bhi.n	21c5e <_impl_k_sem_give+0xaa>
   21c52:	f7ff fec9 	bl	219e8 <__must_switch_threads>
   21c56:	3000      	adds	r0, #0
   21c58:	bf18      	it	ne
   21c5a:	2001      	movne	r0, #1
   21c5c:	e7c1      	b.n	21be2 <_impl_k_sem_give+0x2e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   21c5e:	f386 8811 	msr	BASEPRI, r6
   21c62:	bd70      	pop	{r4, r5, r6, pc}
		_add_thread_to_ready_q(thread);
   21c64:	4620      	mov	r0, r4
   21c66:	f7ff fdc5 	bl	217f4 <_add_thread_to_ready_q>
   21c6a:	e7e2      	b.n	21c32 <_impl_k_sem_give+0x7e>
   21c6c:	20002ff8 	.word	0x20002ff8
   21c70:	e000ed00 	.word	0xe000ed00

00021c74 <_impl_k_sem_take>:
#ifdef CONFIG_USERSPACE
_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
#endif

int _impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   21c74:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   21c76:	f04f 0320 	mov.w	r3, #32
   21c7a:	f3ef 8411 	mrs	r4, BASEPRI
   21c7e:	f383 8811 	msr	BASEPRI, r3
	__ASSERT(!_is_in_isr() || timeout == K_NO_WAIT, "");

	unsigned int key = irq_lock();

	if (likely(sem->count > 0)) {
   21c82:	6883      	ldr	r3, [r0, #8]
   21c84:	b12b      	cbz	r3, 21c92 <_impl_k_sem_take+0x1e>
		sem->count--;
   21c86:	3b01      	subs	r3, #1
   21c88:	6083      	str	r3, [r0, #8]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   21c8a:	f384 8811 	msr	BASEPRI, r4
		irq_unlock(key);
		return 0;
   21c8e:	2000      	movs	r0, #0
   21c90:	bd38      	pop	{r3, r4, r5, pc}
	}

	if (timeout == K_NO_WAIT) {
   21c92:	b921      	cbnz	r1, 21c9e <_impl_k_sem_take+0x2a>
   21c94:	f384 8811 	msr	BASEPRI, r4
		irq_unlock(key);
		return -EBUSY;
   21c98:	f06f 000f 	mvn.w	r0, #15
   21c9c:	bd38      	pop	{r3, r4, r5, pc}
	}

	_pend_current_thread(&sem->wait_q, timeout);
   21c9e:	f7ff fe93 	bl	219c8 <_pend_current_thread>
	_update_time_slice_before_swap();
   21ca2:	f7ff ff53 	bl	21b4c <_update_time_slice_before_swap>
	return __swap(key);
   21ca6:	4620      	mov	r0, r4

	return _Swap(key);
}
   21ca8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   21cac:	f7df bde2 	b.w	1874 <__swap>

00021cb0 <_impl_k_uptime_get_32>:
u32_t _tick_get_32(void)
{
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)_get_elapsed_clock_time();
#else
	return (u32_t)_sys_clock_tick_count;
   21cb0:	4b03      	ldr	r3, [pc, #12]	; (21cc0 <_impl_k_uptime_get_32+0x10>)
   21cb2:	e9d3 0100 	ldrd	r0, r1, [r3]
	return (u64_t)ticks * _ms_per_tick;
   21cb6:	230a      	movs	r3, #10
   21cb8:	fba0 0103 	umull	r0, r1, r0, r3
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get_32());
}
   21cbc:	4770      	bx	lr
   21cbe:	bf00      	nop
   21cc0:	20003338 	.word	0x20003338

00021cc4 <_tick_get>:
	__asm__ volatile(
   21cc4:	f04f 0220 	mov.w	r2, #32
   21cc8:	f3ef 8311 	mrs	r3, BASEPRI
   21ccc:	f382 8811 	msr	BASEPRI, r2
	unsigned int imask = irq_lock();

#ifdef CONFIG_TICKLESS_KERNEL
	tmp_sys_clock_tick_count = _get_elapsed_clock_time();
#else
	tmp_sys_clock_tick_count = _sys_clock_tick_count;
   21cd0:	4a02      	ldr	r2, [pc, #8]	; (21cdc <_tick_get+0x18>)
   21cd2:	e9d2 0100 	ldrd	r0, r1, [r2]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   21cd6:	f383 8811 	msr	BASEPRI, r3
#endif
	irq_unlock(imask);
	return tmp_sys_clock_tick_count;
}
   21cda:	4770      	bx	lr
   21cdc:	20003338 	.word	0x20003338

00021ce0 <_impl_k_uptime_get>:
FUNC_ALIAS(_tick_get, sys_tick_get, s64_t);

s64_t _impl_k_uptime_get(void)
{
   21ce0:	b510      	push	{r4, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get());
   21ce2:	f7ff ffef 	bl	21cc4 <_tick_get>
   21ce6:	240a      	movs	r4, #10
   21ce8:	fba0 2304 	umull	r2, r3, r0, r4
   21cec:	fb04 3301 	mla	r3, r4, r1, r3
}
   21cf0:	4610      	mov	r0, r2
   21cf2:	4619      	mov	r1, r3
   21cf4:	bd10      	pop	{r4, pc}
	...

00021cf8 <_nano_sys_clock_tick_announce>:
 * timers that have expired and wake up the threads pending on them.
 *
 * @return N/A
 */
void _nano_sys_clock_tick_announce(s32_t ticks)
{
   21cf8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21cfc:	4607      	mov	r7, r0
	__asm__ volatile(
   21cfe:	f04f 0320 	mov.w	r3, #32
   21d02:	f3ef 8011 	mrs	r0, BASEPRI
   21d06:	f383 8811 	msr	BASEPRI, r3

	K_DEBUG("ticks: %d\n", ticks);

	/* 64-bit value, ensure atomic access with irq lock */
	key = irq_lock();
	_sys_clock_tick_count += ticks;
   21d0a:	4963      	ldr	r1, [pc, #396]	; (21e98 <_nano_sys_clock_tick_announce+0x1a0>)
   21d0c:	e9d1 4500 	ldrd	r4, r5, [r1]
   21d10:	19e2      	adds	r2, r4, r7
   21d12:	eb45 73e7 	adc.w	r3, r5, r7, asr #31
   21d16:	e9c1 2300 	strd	r2, r3, [r1]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   21d1a:	f380 8811 	msr	BASEPRI, r0
	list->head = (sys_dnode_t *)list;
   21d1e:	466e      	mov	r6, sp
   21d20:	f8cd d000 	str.w	sp, [sp]
	list->tail = (sys_dnode_t *)list;
   21d24:	f8cd d004 	str.w	sp, [sp, #4]
	__asm__ volatile(
   21d28:	f04f 0320 	mov.w	r3, #32
   21d2c:	f3ef 8011 	mrs	r0, BASEPRI
   21d30:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   21d34:	4c59      	ldr	r4, [pc, #356]	; (21e9c <_nano_sys_clock_tick_announce+0x1a4>)
   21d36:	4621      	mov	r1, r4
   21d38:	4602      	mov	r2, r0
   21d3a:	f851 3f10 	ldr.w	r3, [r1, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21d3e:	428b      	cmp	r3, r1
   21d40:	d000      	beq.n	21d44 <_nano_sys_clock_tick_announce+0x4c>
	if (!next) {
   21d42:	b9fb      	cbnz	r3, 21d84 <_nano_sys_clock_tick_announce+0x8c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   21d44:	f380 8811 	msr	BASEPRI, r0
	if (!_is_thread_time_slicing(_current)) {
   21d48:	68a0      	ldr	r0, [r4, #8]
   21d4a:	f7ff fedb 	bl	21b04 <_is_thread_time_slicing>
   21d4e:	b1b0      	cbz	r0, 21d7e <_nano_sys_clock_tick_announce+0x86>
	_time_slice_elapsed += __ticks_to_ms(ticks);
   21d50:	4a53      	ldr	r2, [pc, #332]	; (21ea0 <_nano_sys_clock_tick_announce+0x1a8>)
   21d52:	6811      	ldr	r1, [r2, #0]
   21d54:	230a      	movs	r3, #10
   21d56:	fb07 1703 	mla	r7, r7, r3, r1
	if (_time_slice_elapsed >= _time_slice_duration) {
   21d5a:	4b52      	ldr	r3, [pc, #328]	; (21ea4 <_nano_sys_clock_tick_announce+0x1ac>)
	_time_slice_elapsed += __ticks_to_ms(ticks);
   21d5c:	6017      	str	r7, [r2, #0]
	if (_time_slice_elapsed >= _time_slice_duration) {
   21d5e:	681b      	ldr	r3, [r3, #0]
   21d60:	429f      	cmp	r7, r3
   21d62:	db0c      	blt.n	21d7e <_nano_sys_clock_tick_announce+0x86>
		_time_slice_elapsed = 0;
   21d64:	2300      	movs	r3, #0
   21d66:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   21d68:	f04f 0320 	mov.w	r3, #32
   21d6c:	f3ef 8511 	mrs	r5, BASEPRI
   21d70:	f383 8811 	msr	BASEPRI, r3
		_move_thread_to_end_of_prio_q(_current);
   21d74:	68a0      	ldr	r0, [r4, #8]
   21d76:	f7ff fe77 	bl	21a68 <_move_thread_to_end_of_prio_q>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   21d7a:	f385 8811 	msr	BASEPRI, r5
	if ((!remaining && next_to) || (next_to < remaining)) {
		/* Clears current program if next_to = 0 and remaining > 0 */
		_set_time(next_to);
	}
#endif
}
   21d7e:	b003      	add	sp, #12
   21d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_handling_timeouts = 1;
   21d84:	4d48      	ldr	r5, [pc, #288]	; (21ea8 <_nano_sys_clock_tick_announce+0x1b0>)
   21d86:	2101      	movs	r1, #1
   21d88:	6029      	str	r1, [r5, #0]
   21d8a:	46ab      	mov	fp, r5
   21d8c:	4639      	mov	r1, r7
			timeout->delta_ticks_from_prev = 0;
   21d8e:	f04f 0e00 	mov.w	lr, #0
			timeout->delta_ticks_from_prev = _EXPIRED;
   21d92:	f06f 0c01 	mvn.w	ip, #1
		s32_t tmp = timeout->delta_ticks_from_prev;
   21d96:	6918      	ldr	r0, [r3, #16]
		if (timeout->delta_ticks_from_prev < ticks) {
   21d98:	4288      	cmp	r0, r1
			timeout->delta_ticks_from_prev -= ticks;
   21d9a:	bfaa      	itet	ge
   21d9c:	eba0 0801 	subge.w	r8, r0, r1
			timeout->delta_ticks_from_prev = 0;
   21da0:	f8c3 e010 	strlt.w	lr, [r3, #16]
			timeout->delta_ticks_from_prev -= ticks;
   21da4:	f8c3 8010 	strge.w	r8, [r3, #16]
		ticks -= tmp;
   21da8:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   21daa:	6960      	ldr	r0, [r4, #20]
		if (timeout->delta_ticks_from_prev == 0) {
   21dac:	691d      	ldr	r5, [r3, #16]
   21dae:	4298      	cmp	r0, r3
   21db0:	bf14      	ite	ne
   21db2:	6818      	ldrne	r0, [r3, #0]
   21db4:	2000      	moveq	r0, #0
   21db6:	b9d5      	cbnz	r5, 21dee <_nano_sys_clock_tick_announce+0xf6>
	node->prev->next = node->next;
   21db8:	e893 0220 	ldmia.w	r3, {r5, r9}
   21dbc:	f8c9 5000 	str.w	r5, [r9]
	node->next->prev = node->prev;
   21dc0:	681d      	ldr	r5, [r3, #0]
   21dc2:	f8c5 9004 	str.w	r9, [r5, #4]
	node->next = list->head;
   21dc6:	9d00      	ldr	r5, [sp, #0]
	node->prev = list;
   21dc8:	e883 0060 	stmia.w	r3, {r5, r6}
	list->head->prev = node;
   21dcc:	9d00      	ldr	r5, [sp, #0]
	list->head = node;
   21dce:	9300      	str	r3, [sp, #0]
	list->head->prev = node;
   21dd0:	606b      	str	r3, [r5, #4]
			timeout->delta_ticks_from_prev = _EXPIRED;
   21dd2:	f8c3 c010 	str.w	ip, [r3, #16]
   21dd6:	f382 8811 	msr	BASEPRI, r2
	__asm__ volatile(
   21dda:	f04f 0320 	mov.w	r3, #32
   21dde:	f3ef 8211 	mrs	r2, BASEPRI
   21de2:	f383 8811 	msr	BASEPRI, r3
	while (next) {
   21de6:	4603      	mov	r3, r0
   21de8:	2800      	cmp	r0, #0
   21dea:	d1d4      	bne.n	21d96 <_nano_sys_clock_tick_announce+0x9e>
   21dec:	e001      	b.n	21df2 <_nano_sys_clock_tick_announce+0xfa>
		} else if (ticks <= 0) {
   21dee:	2900      	cmp	r1, #0
   21df0:	dcf1      	bgt.n	21dd6 <_nano_sys_clock_tick_announce+0xde>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   21df2:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
   21df6:	9800      	ldr	r0, [sp, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21df8:	42b0      	cmp	r0, r6
   21dfa:	d103      	bne.n	21e04 <_nano_sys_clock_tick_announce+0x10c>
	_handling_timeouts = 0;
   21dfc:	2300      	movs	r3, #0
   21dfe:	f8cb 3000 	str.w	r3, [fp]
   21e02:	e7a1      	b.n	21d48 <_nano_sys_clock_tick_announce+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   21e04:	2800      	cmp	r0, #0
   21e06:	d0f9      	beq.n	21dfc <_nano_sys_clock_tick_announce+0x104>
	return (node == list->tail) ? NULL : node->next;
   21e08:	9b01      	ldr	r3, [sp, #4]
   21e0a:	4298      	cmp	r0, r3
   21e0c:	d101      	bne.n	21e12 <_nano_sys_clock_tick_announce+0x11a>
   21e0e:	2600      	movs	r6, #0
   21e10:	e000      	b.n	21e14 <_nano_sys_clock_tick_announce+0x11c>
   21e12:	6806      	ldr	r6, [r0, #0]
	timeout->delta_ticks_from_prev = _INACTIVE;
   21e14:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
		thread->base.timeout.wait_q = NULL;
   21e18:	f04f 0900 	mov.w	r9, #0
	node->prev->next = node->next;
   21e1c:	e890 000c 	ldmia.w	r0, {r2, r3}
   21e20:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   21e22:	6802      	ldr	r2, [r0, #0]
   21e24:	6053      	str	r3, [r2, #4]
	struct k_thread *thread = timeout->thread;
   21e26:	6883      	ldr	r3, [r0, #8]
	__asm__ volatile(
   21e28:	f04f 0220 	mov.w	r2, #32
   21e2c:	f3ef 8a11 	mrs	sl, BASEPRI
   21e30:	f382 8811 	msr	BASEPRI, r2
	timeout->delta_ticks_from_prev = _INACTIVE;
   21e34:	f8c0 8010 	str.w	r8, [r0, #16]
	if (thread) {
   21e38:	b1fb      	cbz	r3, 21e7a <_nano_sys_clock_tick_announce+0x182>
	if (timeout_obj->wait_q) {
   21e3a:	68c2      	ldr	r2, [r0, #12]
   21e3c:	b152      	cbz	r2, 21e54 <_nano_sys_clock_tick_announce+0x15c>
	node->prev->next = node->next;
   21e3e:	6859      	ldr	r1, [r3, #4]
   21e40:	681a      	ldr	r2, [r3, #0]
   21e42:	600a      	str	r2, [r1, #0]
	node->next->prev = node->prev;
   21e44:	681a      	ldr	r2, [r3, #0]
   21e46:	6051      	str	r1, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   21e48:	7a5a      	ldrb	r2, [r3, #9]
		thread->base.timeout.wait_q = NULL;
   21e4a:	f8c3 901c 	str.w	r9, [r3, #28]
   21e4e:	f022 0202 	bic.w	r2, r2, #2
   21e52:	725a      	strb	r2, [r3, #9]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   21e54:	7a5a      	ldrb	r2, [r3, #9]
   21e56:	f022 0104 	bic.w	r1, r2, #4
	return !(_is_thread_prevented_from_running(thread) ||
   21e5a:	f012 0f1b 	tst.w	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   21e5e:	7259      	strb	r1, [r3, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   21e60:	d102      	bne.n	21e68 <_nano_sys_clock_tick_announce+0x170>
   21e62:	6a1a      	ldr	r2, [r3, #32]
   21e64:	3201      	adds	r2, #1
   21e66:	d013      	beq.n	21e90 <_nano_sys_clock_tick_announce+0x198>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   21e68:	f38a 8811 	msr	BASEPRI, sl
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   21e6c:	2e00      	cmp	r6, #0
   21e6e:	d0c5      	beq.n	21dfc <_nano_sys_clock_tick_announce+0x104>
	return (node == list->tail) ? NULL : node->next;
   21e70:	9b01      	ldr	r3, [sp, #4]
   21e72:	42b3      	cmp	r3, r6
   21e74:	d108      	bne.n	21e88 <_nano_sys_clock_tick_announce+0x190>
   21e76:	2300      	movs	r3, #0
   21e78:	e007      	b.n	21e8a <_nano_sys_clock_tick_announce+0x192>
   21e7a:	f38a 8811 	msr	BASEPRI, sl
		if (timeout->func) {
   21e7e:	6943      	ldr	r3, [r0, #20]
   21e80:	2b00      	cmp	r3, #0
   21e82:	d0f3      	beq.n	21e6c <_nano_sys_clock_tick_announce+0x174>
			timeout->func(timeout);
   21e84:	4798      	blx	r3
   21e86:	e7f1      	b.n	21e6c <_nano_sys_clock_tick_announce+0x174>
   21e88:	6833      	ldr	r3, [r6, #0]
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   21e8a:	4630      	mov	r0, r6
   21e8c:	461e      	mov	r6, r3
   21e8e:	e7c5      	b.n	21e1c <_nano_sys_clock_tick_announce+0x124>
		_add_thread_to_ready_q(thread);
   21e90:	4618      	mov	r0, r3
   21e92:	f7ff fcaf 	bl	217f4 <_add_thread_to_ready_q>
   21e96:	e7e7      	b.n	21e68 <_nano_sys_clock_tick_announce+0x170>
   21e98:	20003338 	.word	0x20003338
   21e9c:	20002ff8 	.word	0x20002ff8
   21ea0:	20003334 	.word	0x20003334
   21ea4:	2000311c 	.word	0x2000311c
   21ea8:	20003330 	.word	0x20003330

00021eac <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   21eac:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   21eae:	f44f 6280 	mov.w	r2, #1024	; 0x400
   21eb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21eb6:	4903      	ldr	r1, [pc, #12]	; (21ec4 <k_sys_work_q_init+0x18>)
   21eb8:	4803      	ldr	r0, [pc, #12]	; (21ec8 <k_sys_work_q_init+0x1c>)
   21eba:	f000 f98d 	bl	221d8 <k_work_q_start>
		       sys_work_q_stack,
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);

	return 0;
}
   21ebe:	2000      	movs	r0, #0
   21ec0:	bd08      	pop	{r3, pc}
   21ec2:	bf00      	nop
   21ec4:	20009868 	.word	0x20009868
   21ec8:	20003340 	.word	0x20003340

00021ecc <_is_thread_ready>:
	return !(_is_thread_prevented_from_running(thread) ||
   21ecc:	7a43      	ldrb	r3, [r0, #9]
   21ece:	06da      	lsls	r2, r3, #27
   21ed0:	d104      	bne.n	21edc <_is_thread_ready+0x10>
   21ed2:	6a00      	ldr	r0, [r0, #32]
   21ed4:	1c43      	adds	r3, r0, #1
   21ed6:	4258      	negs	r0, r3
   21ed8:	4158      	adcs	r0, r3
   21eda:	4770      	bx	lr
   21edc:	2000      	movs	r0, #0
}
   21ede:	4770      	bx	lr

00021ee0 <_abort_timeout>:
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   21ee0:	6903      	ldr	r3, [r0, #16]
   21ee2:	1c5a      	adds	r2, r3, #1
   21ee4:	d011      	beq.n	21f0a <_abort_timeout+0x2a>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   21ee6:	4a0a      	ldr	r2, [pc, #40]	; (21f10 <_abort_timeout+0x30>)
   21ee8:	6952      	ldr	r2, [r2, #20]
   21eea:	4290      	cmp	r0, r2
   21eec:	bf1f      	itttt	ne
   21eee:	6801      	ldrne	r1, [r0, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   21ef0:	690a      	ldrne	r2, [r1, #16]
   21ef2:	189b      	addne	r3, r3, r2
   21ef4:	610b      	strne	r3, [r1, #16]
	node->prev->next = node->next;
   21ef6:	e890 000c 	ldmia.w	r0, {r2, r3}
   21efa:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   21efc:	6802      	ldr	r2, [r0, #0]
   21efe:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   21f00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21f04:	6103      	str	r3, [r0, #16]
	return 0;
   21f06:	2000      	movs	r0, #0
   21f08:	4770      	bx	lr
		return _INACTIVE;
   21f0a:	4618      	mov	r0, r3
}
   21f0c:	4770      	bx	lr
   21f0e:	bf00      	nop
   21f10:	20002ff8 	.word	0x20002ff8

00021f14 <schedule_new_thread.part.13>:
_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_start, K_OBJ_THREAD, struct k_thread *);
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
   21f14:	b5f0      	push	{r4, r5, r6, r7, lr}
	__asm__ volatile(
   21f16:	f04f 0320 	mov.w	r3, #32
   21f1a:	f3ef 8611 	mrs	r6, BASEPRI
   21f1e:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   21f22:	4a19      	ldr	r2, [pc, #100]	; (21f88 <schedule_new_thread.part.13+0x74>)
	timeout->thread = thread;
   21f24:	6180      	str	r0, [r0, #24]
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   21f26:	230a      	movs	r3, #10
   21f28:	3109      	adds	r1, #9
   21f2a:	fbb1 f1f3 	udiv	r1, r1, r3
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (delay == 0) {
		k_thread_start(thread);
	} else {
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(delay);
   21f2e:	3101      	adds	r1, #1
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   21f30:	6201      	str	r1, [r0, #32]
   21f32:	4611      	mov	r1, r2
	timeout->wait_q = (sys_dlist_t *)wait_q;
   21f34:	2300      	movs	r3, #0
   21f36:	61c3      	str	r3, [r0, #28]
   21f38:	f851 3f10 	ldr.w	r3, [r1, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21f3c:	428b      	cmp	r3, r1
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   21f3e:	f100 0510 	add.w	r5, r0, #16
   21f42:	d108      	bne.n	21f56 <schedule_new_thread.part.13+0x42>
	node->next = list;
   21f44:	6101      	str	r1, [r0, #16]
	node->prev = list->tail;
   21f46:	6953      	ldr	r3, [r2, #20]
   21f48:	6143      	str	r3, [r0, #20]
	list->tail->next = node;
   21f4a:	6953      	ldr	r3, [r2, #20]
   21f4c:	601d      	str	r5, [r3, #0]
	list->tail = node;
   21f4e:	6155      	str	r5, [r2, #20]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   21f50:	f386 8811 	msr	BASEPRI, r6
   21f54:	bdf0      	pop	{r4, r5, r6, r7, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   21f56:	2b00      	cmp	r3, #0
   21f58:	d0f4      	beq.n	21f44 <schedule_new_thread.part.13+0x30>
   21f5a:	f8d2 e014 	ldr.w	lr, [r2, #20]
		if (*delta <= in_q->delta_ticks_from_prev) {
   21f5e:	6a04      	ldr	r4, [r0, #32]
   21f60:	691f      	ldr	r7, [r3, #16]
   21f62:	42bc      	cmp	r4, r7
   21f64:	dc08      	bgt.n	21f78 <schedule_new_thread.part.13+0x64>
		node->prev = insert_point->prev;
   21f66:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   21f68:	1b3c      	subs	r4, r7, r4
   21f6a:	611c      	str	r4, [r3, #16]
   21f6c:	6142      	str	r2, [r0, #20]
		node->next = insert_point;
   21f6e:	6103      	str	r3, [r0, #16]
		insert_point->prev->next = node;
   21f70:	685a      	ldr	r2, [r3, #4]
   21f72:	6015      	str	r5, [r2, #0]
		insert_point->prev = node;
   21f74:	605d      	str	r5, [r3, #4]
   21f76:	e7eb      	b.n	21f50 <schedule_new_thread.part.13+0x3c>
		*delta -= in_q->delta_ticks_from_prev;
   21f78:	1be4      	subs	r4, r4, r7
	return (node == list->tail) ? NULL : node->next;
   21f7a:	4573      	cmp	r3, lr
   21f7c:	6204      	str	r4, [r0, #32]
   21f7e:	d0e1      	beq.n	21f44 <schedule_new_thread.part.13+0x30>
   21f80:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   21f82:	2b00      	cmp	r3, #0
   21f84:	d1eb      	bne.n	21f5e <schedule_new_thread.part.13+0x4a>
   21f86:	e7dd      	b.n	21f44 <schedule_new_thread.part.13+0x30>
   21f88:	20002ff8 	.word	0x20002ff8

00021f8c <k_is_in_isr>:
   21f8c:	f3ef 8005 	mrs	r0, IPSR
   21f90:	280d      	cmp	r0, #13
   21f92:	d807      	bhi.n	21fa4 <k_is_in_isr+0x18>
   21f94:	b138      	cbz	r0, 21fa6 <k_is_in_isr+0x1a>
   21f96:	4b04      	ldr	r3, [pc, #16]	; (21fa8 <k_is_in_isr+0x1c>)
   21f98:	6858      	ldr	r0, [r3, #4]
   21f9a:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
   21f9e:	f3c0 20c0 	ubfx	r0, r0, #11, #1
   21fa2:	4770      	bx	lr
   21fa4:	2001      	movs	r0, #1
}
   21fa6:	4770      	bx	lr
   21fa8:	e000ed00 	.word	0xe000ed00

00021fac <_is_thread_essential>:
	return _current->base.user_options & K_ESSENTIAL;
   21fac:	4b02      	ldr	r3, [pc, #8]	; (21fb8 <_is_thread_essential+0xc>)
   21fae:	689b      	ldr	r3, [r3, #8]
   21fb0:	7a18      	ldrb	r0, [r3, #8]
}
   21fb2:	f000 0001 	and.w	r0, r0, #1
   21fb6:	4770      	bx	lr
   21fb8:	20002ff8 	.word	0x20002ff8

00021fbc <_thread_entry>:
{
   21fbc:	b508      	push	{r3, lr}
   21fbe:	4604      	mov	r4, r0
   21fc0:	4608      	mov	r0, r1
   21fc2:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   21fc4:	461a      	mov	r2, r3
   21fc6:	47a0      	blx	r4
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
   21fc8:	f7ff fd96 	bl	21af8 <_impl_k_current_get>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
   21fcc:	f7df ff06 	bl	1ddc <_impl_k_thread_abort>

00021fd0 <_impl_k_thread_start>:
{
   21fd0:	b510      	push	{r4, lr}
   21fd2:	4601      	mov	r1, r0
	__asm__ volatile(
   21fd4:	f04f 0320 	mov.w	r3, #32
   21fd8:	f3ef 8411 	mrs	r4, BASEPRI
   21fdc:	f383 8811 	msr	BASEPRI, r3
   21fe0:	7a43      	ldrb	r3, [r0, #9]
	if (_has_thread_started(thread)) {
   21fe2:	075a      	lsls	r2, r3, #29
   21fe4:	d402      	bmi.n	21fec <_impl_k_thread_start+0x1c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   21fe6:	f384 8811 	msr	BASEPRI, r4
   21fea:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   21fec:	f023 0304 	bic.w	r3, r3, #4
   21ff0:	7243      	strb	r3, [r0, #9]
	if (_is_thread_ready(thread)) {
   21ff2:	f7ff ff6b 	bl	21ecc <_is_thread_ready>
   21ff6:	2800      	cmp	r0, #0
   21ff8:	d0f5      	beq.n	21fe6 <_impl_k_thread_start+0x16>
		_add_thread_to_ready_q(thread);
   21ffa:	4608      	mov	r0, r1
   21ffc:	f7ff fbfa 	bl	217f4 <_add_thread_to_ready_q>
	return _is_preempt(_current) && __must_switch_threads();
   22000:	4b07      	ldr	r3, [pc, #28]	; (22020 <_impl_k_thread_start+0x50>)
   22002:	689b      	ldr	r3, [r3, #8]
   22004:	895b      	ldrh	r3, [r3, #10]
   22006:	2b7f      	cmp	r3, #127	; 0x7f
   22008:	d8ed      	bhi.n	21fe6 <_impl_k_thread_start+0x16>
   2200a:	f7ff fced 	bl	219e8 <__must_switch_threads>
   2200e:	2800      	cmp	r0, #0
   22010:	d0e9      	beq.n	21fe6 <_impl_k_thread_start+0x16>
	_update_time_slice_before_swap();
   22012:	f7ff fd9b 	bl	21b4c <_update_time_slice_before_swap>
	return __swap(key);
   22016:	4620      	mov	r0, r4
}
   22018:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2201c:	f7df bc2a 	b.w	1874 <__swap>
   22020:	20002ff8 	.word	0x20002ff8

00022024 <_setup_new_thread>:
void _setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options)
{
   22024:	b410      	push	{r4}

	if (options & K_INHERIT_PERMS) {
		_thread_perms_inherit(_current, new_thread);
	}
#endif
}
   22026:	bc10      	pop	{r4}
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   22028:	f7df be30 	b.w	1c8c <_new_thread>

0002202c <_impl_k_thread_create>:
k_tid_t _impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
   2202c:	b570      	push	{r4, r5, r6, lr}
   2202e:	b086      	sub	sp, #24
   22030:	4604      	mov	r4, r0
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   22032:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   22034:	9604      	str	r6, [sp, #16]
   22036:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   22038:	9603      	str	r6, [sp, #12]
   2203a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   2203c:	9602      	str	r6, [sp, #8]
   2203e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
{
   22040:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   22042:	9601      	str	r6, [sp, #4]
   22044:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   22046:	9600      	str	r6, [sp, #0]
   22048:	f7df fe20 	bl	1c8c <_new_thread>
	__ASSERT(!_is_in_isr(), "Threads may not be created in ISRs");
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
			  prio, options);

	if (delay != K_FOREVER) {
   2204c:	1c6b      	adds	r3, r5, #1
   2204e:	d003      	beq.n	22058 <_impl_k_thread_create+0x2c>
	if (delay == 0) {
   22050:	b92d      	cbnz	r5, 2205e <_impl_k_thread_create+0x32>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread);
   22052:	4620      	mov	r0, r4
   22054:	f7ff ffbc 	bl	21fd0 <_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}
	return new_thread;
}
   22058:	4620      	mov	r0, r4
   2205a:	b006      	add	sp, #24
   2205c:	bd70      	pop	{r4, r5, r6, pc}
   2205e:	4629      	mov	r1, r5
   22060:	4620      	mov	r0, r4
   22062:	f7ff ff57 	bl	21f14 <schedule_new_thread.part.13>
   22066:	e7f7      	b.n	22058 <_impl_k_thread_create+0x2c>

00022068 <_k_thread_single_abort>:
_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_resume, K_OBJ_THREAD, k_tid_t);
#endif

void _k_thread_single_abort(struct k_thread *thread)
{
	if (thread->fn_abort != NULL) {
   22068:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   2206a:	b510      	push	{r4, lr}
   2206c:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   2206e:	b103      	cbz	r3, 22072 <_k_thread_single_abort+0xa>
		thread->fn_abort();
   22070:	4798      	blx	r3
	}

	if (_is_thread_ready(thread)) {
   22072:	4620      	mov	r0, r4
   22074:	f7ff ff2a 	bl	21ecc <_is_thread_ready>
   22078:	b138      	cbz	r0, 2208a <_k_thread_single_abort+0x22>
		_remove_thread_from_ready_q(thread);
   2207a:	4620      	mov	r0, r4
   2207c:	f7ff fc3e 	bl	218fc <_remove_thread_from_ready_q>
		if (_is_thread_timeout_active(thread)) {
			_abort_thread_timeout(thread);
		}
	}

	thread->base.thread_state |= _THREAD_DEAD;
   22080:	7a63      	ldrb	r3, [r4, #9]
   22082:	f043 0308 	orr.w	r3, r3, #8
   22086:	7263      	strb	r3, [r4, #9]
   22088:	bd10      	pop	{r4, pc}
		if (_is_thread_pending(thread)) {
   2208a:	7a63      	ldrb	r3, [r4, #9]
   2208c:	079b      	lsls	r3, r3, #30
   2208e:	d508      	bpl.n	220a2 <_k_thread_single_abort+0x3a>
	node->prev->next = node->next;
   22090:	e894 000c 	ldmia.w	r4, {r2, r3}
   22094:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   22096:	6822      	ldr	r2, [r4, #0]
   22098:	6053      	str	r3, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   2209a:	7a63      	ldrb	r3, [r4, #9]
   2209c:	f023 0302 	bic.w	r3, r3, #2
   220a0:	7263      	strb	r3, [r4, #9]
		if (_is_thread_timeout_active(thread)) {
   220a2:	6a23      	ldr	r3, [r4, #32]
   220a4:	3301      	adds	r3, #1
   220a6:	d0eb      	beq.n	22080 <_k_thread_single_abort+0x18>
	return _abort_timeout(&thread->base.timeout);
   220a8:	f104 0010 	add.w	r0, r4, #16
   220ac:	f7ff ff18 	bl	21ee0 <_abort_timeout>
   220b0:	e7e6      	b.n	22080 <_k_thread_single_abort+0x18>
	...

000220b4 <_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void _init_static_threads(void)
{
   220b4:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
   220b6:	4f21      	ldr	r7, [pc, #132]	; (2213c <_init_static_threads+0x88>)
   220b8:	4d21      	ldr	r5, [pc, #132]	; (22140 <_init_static_threads+0x8c>)
{
   220ba:	b087      	sub	sp, #28
   220bc:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
   220be:	42bd      	cmp	r5, r7
   220c0:	f105 042c 	add.w	r4, r5, #44	; 0x2c
   220c4:	d314      	bcc.n	220f0 <_init_static_threads+0x3c>
	--_current->base.sched_locked;
   220c6:	4b1f      	ldr	r3, [pc, #124]	; (22144 <_init_static_threads+0x90>)
   220c8:	689a      	ldr	r2, [r3, #8]
   220ca:	7ad3      	ldrb	r3, [r2, #11]
   220cc:	3b01      	subs	r3, #1
   220ce:	72d3      	strb	r3, [r2, #11]
	__asm__ volatile(
   220d0:	f04f 0320 	mov.w	r3, #32
   220d4:	f3ef 8511 	mrs	r5, BASEPRI
   220d8:	f383 8811 	msr	BASEPRI, r3
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
   220dc:	4c18      	ldr	r4, [pc, #96]	; (22140 <_init_static_threads+0x8c>)
   220de:	42b4      	cmp	r4, r6
   220e0:	d31f      	bcc.n	22122 <_init_static_threads+0x6e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   220e2:	f385 8811 	msr	BASEPRI, r5
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
}
   220e6:	b007      	add	sp, #28
   220e8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
   220ec:	f7ff bcac 	b.w	21a48 <k_sched_unlock>
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   220f0:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   220f4:	9304      	str	r3, [sp, #16]
   220f6:	f854 3c10 	ldr.w	r3, [r4, #-16]
   220fa:	9303      	str	r3, [sp, #12]
   220fc:	f854 3c14 	ldr.w	r3, [r4, #-20]
   22100:	9302      	str	r3, [sp, #8]
   22102:	f854 3c18 	ldr.w	r3, [r4, #-24]
   22106:	9301      	str	r3, [sp, #4]
   22108:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   2210c:	9300      	str	r3, [sp, #0]
   2210e:	f1a4 002c 	sub.w	r0, r4, #44	; 0x2c
   22112:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   22114:	f7df fdba 	bl	1c8c <_new_thread>
		thread_data->init_thread->init_data = thread_data;
   22118:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   2211c:	64dd      	str	r5, [r3, #76]	; 0x4c
   2211e:	4625      	mov	r5, r4
   22120:	e7cd      	b.n	220be <_init_static_threads+0xa>
		if (thread_data->init_delay != K_FOREVER) {
   22122:	6a61      	ldr	r1, [r4, #36]	; 0x24
   22124:	1c4b      	adds	r3, r1, #1
   22126:	d003      	beq.n	22130 <_init_static_threads+0x7c>
			schedule_new_thread(thread_data->init_thread,
   22128:	6820      	ldr	r0, [r4, #0]
	if (delay == 0) {
   2212a:	b919      	cbnz	r1, 22134 <_init_static_threads+0x80>
   2212c:	f7ff ff50 	bl	21fd0 <_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   22130:	342c      	adds	r4, #44	; 0x2c
   22132:	e7d4      	b.n	220de <_init_static_threads+0x2a>
   22134:	f7ff feee 	bl	21f14 <schedule_new_thread.part.13>
   22138:	e7fa      	b.n	22130 <_init_static_threads+0x7c>
   2213a:	bf00      	nop
   2213c:	2000a92c 	.word	0x2000a92c
   22140:	2000a92c 	.word	0x2000a92c
   22144:	20002ff8 	.word	0x20002ff8

00022148 <_init_thread_base>:
void _init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
   22148:	7203      	strb	r3, [r0, #8]
	thread_base->thread_state = (u8_t)initial_state;
   2214a:	7242      	strb	r2, [r0, #9]

	thread_base->prio = priority;

	thread_base->sched_locked = 0;
   2214c:	2300      	movs	r3, #0
	t->delta_ticks_from_prev = _INACTIVE;
   2214e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	thread_base->prio = priority;
   22152:	7281      	strb	r1, [r0, #10]
	thread_base->sched_locked = 0;
   22154:	72c3      	strb	r3, [r0, #11]
   22156:	6202      	str	r2, [r0, #32]
	t->wait_q = NULL;
   22158:	61c3      	str	r3, [r0, #28]
	t->thread = NULL;
   2215a:	6183      	str	r3, [r0, #24]
	t->func = func;
   2215c:	6243      	str	r3, [r0, #36]	; 0x24
   2215e:	4770      	bx	lr

00022160 <k_work_submit_to_queue>:
{
   22160:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   22162:	f101 0308 	add.w	r3, r1, #8
   22166:	f3bf 8f5b 	dmb	ish
   2216a:	e853 2f00 	ldrex	r2, [r3]
   2216e:	f042 0e01 	orr.w	lr, r2, #1
   22172:	e843 ec00 	strex	ip, lr, [r3]
   22176:	f1bc 0f00 	cmp.w	ip, #0
   2217a:	d1f6      	bne.n	2216a <k_work_submit_to_queue+0xa>
   2217c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   22180:	07d3      	lsls	r3, r2, #31
   22182:	d403      	bmi.n	2218c <k_work_submit_to_queue+0x2c>
}
   22184:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   22188:	f7ff bac9 	b.w	2171e <k_queue_append>
   2218c:	f85d fb04 	ldr.w	pc, [sp], #4

00022190 <work_timeout>:
{
	struct k_delayed_work *w = CONTAINER_OF(t, struct k_delayed_work,
						   timeout);

	/* submit work to workqueue */
	k_work_submit_to_queue(w->work_q, &w->work);
   22190:	f1a0 010c 	sub.w	r1, r0, #12
   22194:	6980      	ldr	r0, [r0, #24]
   22196:	f7ff bfe3 	b.w	22160 <k_work_submit_to_queue>

0002219a <work_q_main>:
{
   2219a:	b510      	push	{r4, lr}
   2219c:	4604      	mov	r4, r0
		work = k_queue_get(&work_q->queue, K_FOREVER);
   2219e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   221a2:	4620      	mov	r0, r4
   221a4:	f7ff fadf 	bl	21766 <k_queue_get>
		if (!work) {
   221a8:	4603      	mov	r3, r0
   221aa:	2800      	cmp	r0, #0
   221ac:	d0f7      	beq.n	2219e <work_q_main+0x4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   221ae:	3308      	adds	r3, #8
		handler = work->handler;
   221b0:	6842      	ldr	r2, [r0, #4]
   221b2:	f3bf 8f5b 	dmb	ish
   221b6:	e853 1f00 	ldrex	r1, [r3]
   221ba:	f021 0e01 	bic.w	lr, r1, #1
   221be:	e843 ec00 	strex	ip, lr, [r3]
   221c2:	f1bc 0f00 	cmp.w	ip, #0
   221c6:	d1f6      	bne.n	221b6 <work_q_main+0x1c>
   221c8:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(work->flags,
   221cc:	07cb      	lsls	r3, r1, #31
   221ce:	d500      	bpl.n	221d2 <work_q_main+0x38>
			handler(work);
   221d0:	4790      	blx	r2
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   221d2:	f7ff fc73 	bl	21abc <_impl_k_yield>
   221d6:	e7e2      	b.n	2219e <work_q_main+0x4>

000221d8 <k_work_q_start>:
{
   221d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   221da:	b087      	sub	sp, #28
   221dc:	4604      	mov	r4, r0
   221de:	461f      	mov	r7, r3
   221e0:	460d      	mov	r5, r1
   221e2:	4616      	mov	r6, r2
	k_queue_init(&work_q->queue);
   221e4:	f7ff fa6a 	bl	216bc <k_queue_init>

   221e8:	2000      	movs	r0, #0
   221ea:	9005      	str	r0, [sp, #20]
   221ec:	9004      	str	r0, [sp, #16]
   221ee:	9002      	str	r0, [sp, #8]
   221f0:	9001      	str	r0, [sp, #4]
   221f2:	9703      	str	r7, [sp, #12]
   221f4:	9400      	str	r4, [sp, #0]
   221f6:	4b04      	ldr	r3, [pc, #16]	; (22208 <k_work_q_start+0x30>)
   221f8:	4632      	mov	r2, r6
   221fa:	4629      	mov	r1, r5
   221fc:	f104 0010 	add.w	r0, r4, #16
   22200:	f7ff ff14 	bl	2202c <_impl_k_thread_create>
}
   22204:	b007      	add	sp, #28
   22206:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22208:	0002219b 	.word	0x0002219b

0002220c <k_delayed_work_init>:
}

void k_delayed_work_init(struct k_delayed_work *work, k_work_handler_t handler)
{
   2220c:	b500      	push	{lr}
   2220e:	f100 0308 	add.w	r3, r0, #8
   22212:	f3bf 8f5b 	dmb	ish
   22216:	e853 2f00 	ldrex	r2, [r3]
   2221a:	f022 0201 	bic.w	r2, r2, #1
   2221e:	e843 2e00 	strex	lr, r2, [r3]
   22222:	f1be 0f00 	cmp.w	lr, #0
   22226:	d1f6      	bne.n	22216 <k_delayed_work_init+0xa>
   22228:	f3bf 8f5b 	dmb	ish
	t->delta_ticks_from_prev = _INACTIVE;
   2222c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   22230:	61c3      	str	r3, [r0, #28]
	t->func = func;
   22232:	4a04      	ldr	r2, [pc, #16]	; (22244 <k_delayed_work_init+0x38>)
	work->handler = handler;
   22234:	6041      	str	r1, [r0, #4]
	t->wait_q = NULL;
   22236:	2300      	movs	r3, #0
   22238:	6183      	str	r3, [r0, #24]
	t->thread = NULL;
   2223a:	6143      	str	r3, [r0, #20]
	t->func = func;
   2223c:	6202      	str	r2, [r0, #32]
	k_work_init(&work->work, handler);
	_init_timeout(&work->timeout, work_timeout);
	work->work_q = NULL;
   2223e:	6243      	str	r3, [r0, #36]	; 0x24
   22240:	f85d fb04 	ldr.w	pc, [sp], #4
   22244:	00022191 	.word	0x00022191

00022248 <k_delayed_work_cancel>:

	return err;
}

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   22248:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
   2224a:	f04f 0320 	mov.w	r3, #32
   2224e:	f3ef 8411 	mrs	r4, BASEPRI
   22252:	f383 8811 	msr	BASEPRI, r3
	int key = irq_lock();

	if (!work->work_q) {
   22256:	6a43      	ldr	r3, [r0, #36]	; 0x24
   22258:	b923      	cbnz	r3, 22264 <k_delayed_work_cancel+0x1c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2225a:	f384 8811 	msr	BASEPRI, r4

	if (k_work_pending(&work->work)) {
		/* Remove from the queue if already submitted */
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
			irq_unlock(key);
			return -EINVAL;
   2225e:	f06f 0015 	mvn.w	r0, #21

	atomic_clear_bit(work->work.flags, K_WORK_STATE_PENDING);
	irq_unlock(key);

	return 0;
}
   22262:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   22264:	f3bf 8f5b 	dmb	ish
   22268:	6883      	ldr	r3, [r0, #8]
   2226a:	f3bf 8f5b 	dmb	ish
	if (k_work_pending(&work->work)) {
   2226e:	07da      	lsls	r2, r3, #31
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   22270:	f100 0508 	add.w	r5, r0, #8
   22274:	d529      	bpl.n	222ca <k_delayed_work_cancel+0x82>
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   22276:	6a42      	ldr	r2, [r0, #36]	; 0x24
   22278:	6813      	ldr	r3, [r2, #0]
	sys_snode_t *prev = NULL;
   2227a:	2100      	movs	r1, #0
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   2227c:	2b00      	cmp	r3, #0
   2227e:	d0ec      	beq.n	2225a <k_delayed_work_cancel+0x12>
		if (test == node) {
   22280:	4298      	cmp	r0, r3
   22282:	d11f      	bne.n	222c4 <k_delayed_work_cancel+0x7c>
   22284:	6803      	ldr	r3, [r0, #0]
   22286:	6856      	ldr	r6, [r2, #4]
	if (!prev_node) {
   22288:	b9b9      	cbnz	r1, 222ba <k_delayed_work_cancel+0x72>
		if (list->tail == node) {
   2228a:	42b0      	cmp	r0, r6
		list->head = node->next;
   2228c:	6013      	str	r3, [r2, #0]
		if (list->tail == node) {
   2228e:	d100      	bne.n	22292 <k_delayed_work_cancel+0x4a>
			list->tail = list->head;
   22290:	6053      	str	r3, [r2, #4]
	node->next = NULL;
   22292:	2300      	movs	r3, #0
   22294:	6003      	str	r3, [r0, #0]
	work->work_q = NULL;
   22296:	2300      	movs	r3, #0
   22298:	6243      	str	r3, [r0, #36]	; 0x24
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2229a:	f3bf 8f5b 	dmb	ish
   2229e:	e855 2f00 	ldrex	r2, [r5]
   222a2:	f022 0201 	bic.w	r2, r2, #1
   222a6:	e845 2100 	strex	r1, r2, [r5]
   222aa:	2900      	cmp	r1, #0
   222ac:	d1f7      	bne.n	2229e <k_delayed_work_cancel+0x56>
   222ae:	f3bf 8f5b 	dmb	ish
   222b2:	f384 8811 	msr	BASEPRI, r4
	return 0;
   222b6:	4618      	mov	r0, r3
   222b8:	bd70      	pop	{r4, r5, r6, pc}
		if (list->tail == node) {
   222ba:	42b0      	cmp	r0, r6
		prev_node->next = node->next;
   222bc:	600b      	str	r3, [r1, #0]
			list->tail = prev_node;
   222be:	bf08      	it	eq
   222c0:	6051      	streq	r1, [r2, #4]
   222c2:	e7e6      	b.n	22292 <k_delayed_work_cancel+0x4a>
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   222c4:	4619      	mov	r1, r3
   222c6:	681b      	ldr	r3, [r3, #0]
   222c8:	e7d8      	b.n	2227c <k_delayed_work_cancel+0x34>
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   222ca:	69c1      	ldr	r1, [r0, #28]
   222cc:	1c4b      	adds	r3, r1, #1
		_abort_timeout(&work->timeout);
   222ce:	f100 020c 	add.w	r2, r0, #12
   222d2:	d0e0      	beq.n	22296 <k_delayed_work_cancel+0x4e>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   222d4:	4b08      	ldr	r3, [pc, #32]	; (222f8 <k_delayed_work_cancel+0xb0>)
   222d6:	695b      	ldr	r3, [r3, #20]
   222d8:	429a      	cmp	r2, r3
	return (node == list->tail) ? NULL : node->next;
   222da:	bf1f      	itttt	ne
   222dc:	68c2      	ldrne	r2, [r0, #12]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   222de:	6913      	ldrne	r3, [r2, #16]
   222e0:	185b      	addne	r3, r3, r1
   222e2:	6113      	strne	r3, [r2, #16]
	node->prev->next = node->next;
   222e4:	6903      	ldr	r3, [r0, #16]
   222e6:	68c2      	ldr	r2, [r0, #12]
   222e8:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   222ea:	68c2      	ldr	r2, [r0, #12]
   222ec:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   222ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   222f2:	61c3      	str	r3, [r0, #28]
   222f4:	e7cf      	b.n	22296 <k_delayed_work_cancel+0x4e>
   222f6:	bf00      	nop
   222f8:	20002ff8 	.word	0x20002ff8

000222fc <k_delayed_work_submit_to_queue>:
{
   222fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   222fe:	4607      	mov	r7, r0
   22300:	460c      	mov	r4, r1
   22302:	4615      	mov	r5, r2
	__asm__ volatile(
   22304:	f04f 0320 	mov.w	r3, #32
   22308:	f3ef 8611 	mrs	r6, BASEPRI
   2230c:	f383 8811 	msr	BASEPRI, r3
	if (work->work_q && work->work_q != work_q) {
   22310:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   22312:	b123      	cbz	r3, 2231e <k_delayed_work_submit_to_queue+0x22>
   22314:	4283      	cmp	r3, r0
   22316:	d00b      	beq.n	22330 <k_delayed_work_submit_to_queue+0x34>
		err = -EADDRINUSE;
   22318:	f06f 002f 	mvn.w	r0, #47	; 0x2f
   2231c:	e00d      	b.n	2233a <k_delayed_work_submit_to_queue+0x3e>
	if (work->work_q == work_q) {
   2231e:	b138      	cbz	r0, 22330 <k_delayed_work_submit_to_queue+0x34>
	work->work_q = work_q;
   22320:	6267      	str	r7, [r4, #36]	; 0x24
	if (!delay) {
   22322:	b96d      	cbnz	r5, 22340 <k_delayed_work_submit_to_queue+0x44>
		k_work_submit_to_queue(work_q, &work->work);
   22324:	4621      	mov	r1, r4
   22326:	4638      	mov	r0, r7
   22328:	f7ff ff1a 	bl	22160 <k_work_submit_to_queue>
	err = 0;
   2232c:	2000      	movs	r0, #0
   2232e:	e004      	b.n	2233a <k_delayed_work_submit_to_queue+0x3e>
		err = k_delayed_work_cancel(work);
   22330:	4620      	mov	r0, r4
   22332:	f7ff ff89 	bl	22248 <k_delayed_work_cancel>
		if (err < 0) {
   22336:	2800      	cmp	r0, #0
   22338:	daf2      	bge.n	22320 <k_delayed_work_submit_to_queue+0x24>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2233a:	f386 8811 	msr	BASEPRI, r6
}
   2233e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   22340:	220a      	movs	r2, #10
   22342:	3509      	adds	r5, #9
   22344:	fbb5 f5f2 	udiv	r5, r5, r2
	return list->head == list;
   22348:	4a16      	ldr	r2, [pc, #88]	; (223a4 <k_delayed_work_submit_to_queue+0xa8>)
   2234a:	4611      	mov	r1, r2
	timeout->thread = thread;
   2234c:	2300      	movs	r3, #0
   2234e:	6163      	str	r3, [r4, #20]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   22350:	61a3      	str	r3, [r4, #24]
   22352:	f851 3f10 	ldr.w	r3, [r1, #16]!
		_add_timeout(NULL, &work->timeout, NULL,
   22356:	3501      	adds	r5, #1
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22358:	428b      	cmp	r3, r1
   2235a:	f104 070c 	add.w	r7, r4, #12
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   2235e:	61e5      	str	r5, [r4, #28]
   22360:	d106      	bne.n	22370 <k_delayed_work_submit_to_queue+0x74>
	node->next = list;
   22362:	60e1      	str	r1, [r4, #12]
	node->prev = list->tail;
   22364:	6953      	ldr	r3, [r2, #20]
   22366:	6123      	str	r3, [r4, #16]
	list->tail->next = node;
   22368:	6953      	ldr	r3, [r2, #20]
   2236a:	601f      	str	r7, [r3, #0]
	list->tail = node;
   2236c:	6157      	str	r7, [r2, #20]
   2236e:	e7dd      	b.n	2232c <k_delayed_work_submit_to_queue+0x30>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   22370:	2b00      	cmp	r3, #0
   22372:	d0f6      	beq.n	22362 <k_delayed_work_submit_to_queue+0x66>
   22374:	f8d2 e014 	ldr.w	lr, [r2, #20]
		if (*delta <= in_q->delta_ticks_from_prev) {
   22378:	69e0      	ldr	r0, [r4, #28]
   2237a:	691d      	ldr	r5, [r3, #16]
   2237c:	42a8      	cmp	r0, r5
   2237e:	dc08      	bgt.n	22392 <k_delayed_work_submit_to_queue+0x96>
		node->prev = insert_point->prev;
   22380:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   22382:	1a28      	subs	r0, r5, r0
   22384:	6118      	str	r0, [r3, #16]
   22386:	6122      	str	r2, [r4, #16]
		node->next = insert_point;
   22388:	60e3      	str	r3, [r4, #12]
		insert_point->prev->next = node;
   2238a:	685a      	ldr	r2, [r3, #4]
   2238c:	6017      	str	r7, [r2, #0]
		insert_point->prev = node;
   2238e:	605f      	str	r7, [r3, #4]
   22390:	e7cc      	b.n	2232c <k_delayed_work_submit_to_queue+0x30>
		*delta -= in_q->delta_ticks_from_prev;
   22392:	1b40      	subs	r0, r0, r5
	return (node == list->tail) ? NULL : node->next;
   22394:	4573      	cmp	r3, lr
   22396:	61e0      	str	r0, [r4, #28]
   22398:	d0e3      	beq.n	22362 <k_delayed_work_submit_to_queue+0x66>
   2239a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   2239c:	2b00      	cmp	r3, #0
   2239e:	d1eb      	bne.n	22378 <k_delayed_work_submit_to_queue+0x7c>
   223a0:	e7df      	b.n	22362 <k_delayed_work_submit_to_queue+0x66>
   223a2:	bf00      	nop
   223a4:	20002ff8 	.word	0x20002ff8

000223a8 <_ready_thread>:
	thread->base.thread_state &= ~_THREAD_PRESTART;
   223a8:	7a42      	ldrb	r2, [r0, #9]
   223aa:	f022 0104 	bic.w	r1, r2, #4
	return !(_is_thread_prevented_from_running(thread) ||
   223ae:	f012 0f1b 	tst.w	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   223b2:	7241      	strb	r1, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   223b4:	d104      	bne.n	223c0 <_ready_thread+0x18>
   223b6:	6a03      	ldr	r3, [r0, #32]
   223b8:	3301      	adds	r3, #1
   223ba:	d101      	bne.n	223c0 <_ready_thread+0x18>
		_add_thread_to_ready_q(thread);
   223bc:	f7ff ba1a 	b.w	217f4 <_add_thread_to_ready_q>
   223c0:	4770      	bx	lr

000223c2 <_unpend_thread>:
	node->prev->next = node->next;
   223c2:	e890 000c 	ldmia.w	r0, {r2, r3}
   223c6:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   223c8:	6802      	ldr	r2, [r0, #0]
   223ca:	6053      	str	r3, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   223cc:	7a43      	ldrb	r3, [r0, #9]
   223ce:	f023 0302 	bic.w	r3, r3, #2
   223d2:	7243      	strb	r3, [r0, #9]
   223d4:	4770      	bx	lr
	...

000223d8 <_add_timeout.constprop.9>:
static inline void _add_timeout(struct k_thread *thread,
   223d8:	b430      	push	{r4, r5}
	timeout->thread = thread;
   223da:	2400      	movs	r4, #0
static inline void _add_timeout(struct k_thread *thread,
   223dc:	4603      	mov	r3, r0
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   223de:	6102      	str	r2, [r0, #16]
	timeout->thread = thread;
   223e0:	6084      	str	r4, [r0, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   223e2:	60c1      	str	r1, [r0, #12]
	if (!timeout_in_ticks) {
   223e4:	b972      	cbnz	r2, 22404 <_add_timeout.constprop.9+0x2c>
	__asm__ volatile(
   223e6:	f04f 0120 	mov.w	r1, #32
   223ea:	f3ef 8211 	mrs	r2, BASEPRI
   223ee:	f381 8811 	msr	BASEPRI, r1
	timeout->delta_ticks_from_prev = _INACTIVE;
   223f2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   223f6:	6101      	str	r1, [r0, #16]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   223f8:	f382 8811 	msr	BASEPRI, r2
		if (timeout->func) {
   223fc:	6943      	ldr	r3, [r0, #20]
   223fe:	b16b      	cbz	r3, 2241c <_add_timeout.constprop.9+0x44>
}
   22400:	bc30      	pop	{r4, r5}
			timeout->func(timeout);
   22402:	4718      	bx	r3
	return list->head == list;
   22404:	4911      	ldr	r1, [pc, #68]	; (2244c <_add_timeout.constprop.9+0x74>)
   22406:	4608      	mov	r0, r1
   22408:	f850 2f10 	ldr.w	r2, [r0, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2240c:	4282      	cmp	r2, r0
   2240e:	d10d      	bne.n	2242c <_add_timeout.constprop.9+0x54>
	node->next = list;
   22410:	6018      	str	r0, [r3, #0]
	node->prev = list->tail;
   22412:	694a      	ldr	r2, [r1, #20]
   22414:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
   22416:	694a      	ldr	r2, [r1, #20]
   22418:	6013      	str	r3, [r2, #0]
	list->tail = node;
   2241a:	614b      	str	r3, [r1, #20]
}
   2241c:	bc30      	pop	{r4, r5}
   2241e:	4770      	bx	lr
		*delta -= in_q->delta_ticks_from_prev;
   22420:	1b64      	subs	r4, r4, r5
   22422:	611c      	str	r4, [r3, #16]
	return (node == list->tail) ? NULL : node->next;
   22424:	694c      	ldr	r4, [r1, #20]
   22426:	42a2      	cmp	r2, r4
   22428:	d0f2      	beq.n	22410 <_add_timeout.constprop.9+0x38>
   2242a:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   2242c:	2a00      	cmp	r2, #0
   2242e:	d0ef      	beq.n	22410 <_add_timeout.constprop.9+0x38>
		if (*delta <= in_q->delta_ticks_from_prev) {
   22430:	691c      	ldr	r4, [r3, #16]
   22432:	6915      	ldr	r5, [r2, #16]
   22434:	42ac      	cmp	r4, r5
   22436:	dcf3      	bgt.n	22420 <_add_timeout.constprop.9+0x48>
		node->prev = insert_point->prev;
   22438:	6851      	ldr	r1, [r2, #4]
			in_q->delta_ticks_from_prev -= *delta;
   2243a:	1b2c      	subs	r4, r5, r4
   2243c:	6114      	str	r4, [r2, #16]
   2243e:	6059      	str	r1, [r3, #4]
		node->next = insert_point;
   22440:	601a      	str	r2, [r3, #0]
		insert_point->prev->next = node;
   22442:	6851      	ldr	r1, [r2, #4]
   22444:	600b      	str	r3, [r1, #0]
		insert_point->prev = node;
   22446:	6053      	str	r3, [r2, #4]
   22448:	e7e8      	b.n	2241c <_add_timeout.constprop.9+0x44>
   2244a:	bf00      	nop
   2244c:	20002ff8 	.word	0x20002ff8

00022450 <_timer_expiration_handler>:

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (timer->period > 0) {
   22450:	6a83      	ldr	r3, [r0, #40]	; 0x28
   22452:	2b00      	cmp	r3, #0
{
   22454:	b570      	push	{r4, r5, r6, lr}
   22456:	4604      	mov	r4, r0
   22458:	f100 0518 	add.w	r5, r0, #24
	if (timer->period > 0) {
   2245c:	dd0b      	ble.n	22476 <_timer_expiration_handler+0x26>
	__asm__ volatile(
   2245e:	f04f 0320 	mov.w	r3, #32
   22462:	f3ef 8611 	mrs	r6, BASEPRI
   22466:	f383 8811 	msr	BASEPRI, r3
		key = irq_lock();
		_add_timeout(NULL, &timer->timeout, &timer->wait_q,
   2246a:	6a82      	ldr	r2, [r0, #40]	; 0x28
   2246c:	4629      	mov	r1, r5
   2246e:	f7ff ffb3 	bl	223d8 <_add_timeout.constprop.9>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   22472:	f386 8811 	msr	BASEPRI, r6
				timer->period);
		irq_unlock(key);
	}

	/* update timer's status */
	timer->status += 1;
   22476:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   22478:	3301      	adds	r3, #1
   2247a:	62e3      	str	r3, [r4, #44]	; 0x2c

	/* invoke timer expiry function */
	if (timer->expiry_fn) {
   2247c:	6a23      	ldr	r3, [r4, #32]
   2247e:	b10b      	cbz	r3, 22484 <_timer_expiration_handler+0x34>
		timer->expiry_fn(timer);
   22480:	4620      	mov	r0, r4
   22482:	4798      	blx	r3
	return list->head == list;
   22484:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22486:	42ac      	cmp	r4, r5
   22488:	d010      	beq.n	224ac <_timer_expiration_handler+0x5c>
	}

	thread = (struct k_thread *)sys_dlist_peek_head(&timer->wait_q);

	if (!thread) {
   2248a:	b17c      	cbz	r4, 224ac <_timer_expiration_handler+0x5c>
	 * calling _unpend_thread() because a) this is the only place a thread
	 * can be taken off this pend queue, and b) the only place a thread
	 * can be put on the pend queue is at thread level, which of course
	 * cannot interrupt the current context.
	 */
	_unpend_thread(thread);
   2248c:	4620      	mov	r0, r4
   2248e:	f7ff ff98 	bl	223c2 <_unpend_thread>
	__asm__ volatile(
   22492:	f04f 0320 	mov.w	r3, #32
   22496:	f3ef 8511 	mrs	r5, BASEPRI
   2249a:	f383 8811 	msr	BASEPRI, r3

	key = irq_lock();
	_ready_thread(thread);
   2249e:	4620      	mov	r0, r4
   224a0:	f7ff ff82 	bl	223a8 <_ready_thread>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   224a4:	f385 8811 	msr	BASEPRI, r5
   224a8:	2300      	movs	r3, #0
   224aa:	6663      	str	r3, [r4, #100]	; 0x64
   224ac:	bd70      	pop	{r4, r5, r6, pc}
	...

000224b0 <_timeout_remaining_get>:
#ifdef CONFIG_USERSPACE
_SYSCALL_HANDLER1_SIMPLE(k_timer_status_sync, K_OBJ_TIMER, struct k_timer *);
#endif

s32_t _timeout_remaining_get(struct _timeout *timeout)
{
   224b0:	b530      	push	{r4, r5, lr}
	__asm__ volatile(
   224b2:	f04f 0320 	mov.w	r3, #32
   224b6:	f3ef 8411 	mrs	r4, BASEPRI
   224ba:	f383 8811 	msr	BASEPRI, r3
	unsigned int key = irq_lock();
	s32_t remaining_ticks;

	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   224be:	6903      	ldr	r3, [r0, #16]
   224c0:	3301      	adds	r3, #1
   224c2:	d016      	beq.n	224f2 <_timeout_remaining_get+0x42>
	return list->head == list;
   224c4:	490d      	ldr	r1, [pc, #52]	; (224fc <_timeout_remaining_get+0x4c>)
   224c6:	460a      	mov	r2, r1
   224c8:	f852 3f10 	ldr.w	r3, [r2, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   224cc:	4293      	cmp	r3, r2
   224ce:	d012      	beq.n	224f6 <_timeout_remaining_get+0x46>
		 * and summing up the various tick deltas involved
		 */
		struct _timeout *t =
			(struct _timeout *)sys_dlist_peek_head(&_timeout_q);

		remaining_ticks = t->delta_ticks_from_prev;
   224d0:	691a      	ldr	r2, [r3, #16]
   224d2:	6949      	ldr	r1, [r1, #20]
		while (t != timeout) {
   224d4:	4283      	cmp	r3, r0
   224d6:	d105      	bne.n	224e4 <_timeout_remaining_get+0x34>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   224d8:	f384 8811 	msr	BASEPRI, r4
	return (u64_t)ticks * _ms_per_tick;
   224dc:	200a      	movs	r0, #10
   224de:	fb82 0100 	smull	r0, r1, r2, r0
		}
	}

	irq_unlock(key);
	return __ticks_to_ms(remaining_ticks);
}
   224e2:	bd30      	pop	{r4, r5, pc}
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   224e4:	b13b      	cbz	r3, 224f6 <_timeout_remaining_get+0x46>
	return (node == list->tail) ? NULL : node->next;
   224e6:	428b      	cmp	r3, r1
   224e8:	d005      	beq.n	224f6 <_timeout_remaining_get+0x46>
   224ea:	681b      	ldr	r3, [r3, #0]
			remaining_ticks += t->delta_ticks_from_prev;
   224ec:	691d      	ldr	r5, [r3, #16]
   224ee:	442a      	add	r2, r5
   224f0:	e7f0      	b.n	224d4 <_timeout_remaining_get+0x24>
		remaining_ticks = 0;
   224f2:	2200      	movs	r2, #0
   224f4:	e7f0      	b.n	224d8 <_timeout_remaining_get+0x28>
			remaining_ticks += t->delta_ticks_from_prev;
   224f6:	2300      	movs	r3, #0
   224f8:	691b      	ldr	r3, [r3, #16]
   224fa:	deff      	udf	#255	; 0xff
   224fc:	20002ff8 	.word	0x20002ff8

00022500 <sys_dlist_remove>:
	node->prev->next = node->next;
   22500:	e890 000c 	ldmia.w	r0, {r2, r3}
   22504:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   22506:	6802      	ldr	r2, [r0, #0]
   22508:	6053      	str	r3, [r2, #4]
   2250a:	4770      	bx	lr

0002250c <clear_event_registrations>:

/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int last_registered,
					      unsigned int key)
{
   2250c:	b570      	push	{r4, r5, r6, lr}
   2250e:	2414      	movs	r4, #20
   22510:	4615      	mov	r5, r2
   22512:	fb04 0401 	mla	r4, r4, r1, r0
	event->poller = NULL;
   22516:	2600      	movs	r6, #0
	for (; last_registered >= 0; last_registered--) {
   22518:	2900      	cmp	r1, #0
   2251a:	da00      	bge.n	2251e <clear_event_registrations+0x12>
		clear_event_registration(&events[last_registered]);
		irq_unlock(key);
		key = irq_lock();
	}
}
   2251c:	bd70      	pop	{r4, r5, r6, pc}
	switch (event->type) {
   2251e:	7b63      	ldrb	r3, [r4, #13]
	event->poller = NULL;
   22520:	60a6      	str	r6, [r4, #8]
	switch (event->type) {
   22522:	f003 030f 	and.w	r3, r3, #15
   22526:	2b02      	cmp	r3, #2
   22528:	d003      	beq.n	22532 <clear_event_registrations+0x26>
   2252a:	2b04      	cmp	r3, #4
   2252c:	d001      	beq.n	22532 <clear_event_registrations+0x26>
   2252e:	2b01      	cmp	r3, #1
   22530:	d102      	bne.n	22538 <clear_event_registrations+0x2c>
		sys_dlist_remove(&event->_node);
   22532:	4620      	mov	r0, r4
   22534:	f7ff ffe4 	bl	22500 <sys_dlist_remove>
   22538:	f385 8811 	msr	BASEPRI, r5
	__asm__ volatile(
   2253c:	f04f 0320 	mov.w	r3, #32
   22540:	f3ef 8511 	mrs	r5, BASEPRI
   22544:	f383 8811 	msr	BASEPRI, r3
	for (; last_registered >= 0; last_registered--) {
   22548:	3901      	subs	r1, #1
   2254a:	3c14      	subs	r4, #20
   2254c:	e7e4      	b.n	22518 <clear_event_registrations+0xc>
	...

00022550 <signal_poll_event>:
}

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state,
			      int *must_reschedule)
{
   22550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	*must_reschedule = 0;
   22552:	2300      	movs	r3, #0
   22554:	6013      	str	r3, [r2, #0]

	if (!event->poller) {
   22556:	6883      	ldr	r3, [r0, #8]
{
   22558:	4605      	mov	r5, r0
   2255a:	460e      	mov	r6, r1
   2255c:	4617      	mov	r7, r2
	if (!event->poller) {
   2255e:	2b00      	cmp	r3, #0
   22560:	d049      	beq.n	225f6 <signal_poll_event+0xa6>
		goto ready_event;
	}

	struct k_thread *thread = event->poller->thread;
   22562:	6819      	ldr	r1, [r3, #0]
	thread->base.thread_state &= ~states;
   22564:	7a4b      	ldrb	r3, [r1, #9]
   22566:	f023 0220 	bic.w	r2, r3, #32

	__ASSERT(event->poller->thread, "poller should have a thread\n");

	clear_polling_state(thread);

	if (!_is_thread_pending(thread)) {
   2256a:	0798      	lsls	r0, r3, #30
   2256c:	724a      	strb	r2, [r1, #9]
   2256e:	d542      	bpl.n	225f6 <signal_poll_event+0xa6>
		goto ready_event;
	}

	if (_is_thread_timeout_expired(thread)) {
   22570:	6a0b      	ldr	r3, [r1, #32]
   22572:	3302      	adds	r3, #2
   22574:	d04a      	beq.n	2260c <signal_poll_event+0xbc>
	sys_dlist_remove(&thread->base.k_q_node);
   22576:	4608      	mov	r0, r1
   22578:	f7ff ffc2 	bl	22500 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2257c:	7a4b      	ldrb	r3, [r1, #9]
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   2257e:	6a0c      	ldr	r4, [r1, #32]
   22580:	f023 0302 	bic.w	r3, r3, #2
   22584:	1c62      	adds	r2, r4, #1
   22586:	724b      	strb	r3, [r1, #9]
	return _abort_timeout(&thread->base.timeout);
   22588:	f101 0010 	add.w	r0, r1, #16
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   2258c:	d00c      	beq.n	225a8 <signal_poll_event+0x58>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   2258e:	4b21      	ldr	r3, [pc, #132]	; (22614 <signal_poll_event+0xc4>)
   22590:	695b      	ldr	r3, [r3, #20]
   22592:	4298      	cmp	r0, r3
	return (node == list->tail) ? NULL : node->next;
   22594:	bf1f      	itttt	ne
   22596:	690a      	ldrne	r2, [r1, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   22598:	6913      	ldrne	r3, [r2, #16]
   2259a:	191b      	addne	r3, r3, r4
   2259c:	6113      	strne	r3, [r2, #16]
	sys_dlist_remove(&timeout->node);
   2259e:	f7ff ffaf 	bl	22500 <sys_dlist_remove>
	timeout->delta_ticks_from_prev = _INACTIVE;
   225a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   225a6:	620b      	str	r3, [r1, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   225a8:	7a48      	ldrb	r0, [r1, #9]
		return -EAGAIN;
	}

	_unpend_thread(thread);
	_abort_thread_timeout(thread);
	_set_thread_return_value(thread,
   225aa:	2e00      	cmp	r6, #0
   225ac:	bf0c      	ite	eq
   225ae:	f06f 0303 	mvneq.w	r3, #3
   225b2:	2300      	movne	r3, #0
   225b4:	f010 041f 	ands.w	r4, r0, #31
   225b8:	664b      	str	r3, [r1, #100]	; 0x64
   225ba:	d11c      	bne.n	225f6 <signal_poll_event+0xa6>
   225bc:	6a0b      	ldr	r3, [r1, #32]
   225be:	3301      	adds	r3, #1
   225c0:	d119      	bne.n	225f6 <signal_poll_event+0xa6>

	if (!_is_thread_ready(thread)) {
		goto ready_event;
	}

	_add_thread_to_ready_q(thread);
   225c2:	4608      	mov	r0, r1
   225c4:	f7ff f916 	bl	217f4 <_add_thread_to_ready_q>
   225c8:	f3ef 8305 	mrs	r3, IPSR
   225cc:	2b0d      	cmp	r3, #13
   225ce:	d81b      	bhi.n	22608 <signal_poll_event+0xb8>
   225d0:	b123      	cbz	r3, 225dc <signal_poll_event+0x8c>
   225d2:	4b11      	ldr	r3, [pc, #68]	; (22618 <signal_poll_event+0xc8>)
   225d4:	6858      	ldr	r0, [r3, #4]
   225d6:	f410 6000 	ands.w	r0, r0, #2048	; 0x800
   225da:	d00b      	beq.n	225f4 <signal_poll_event+0xa4>
	return _is_preempt(_current) && __must_switch_threads();
   225dc:	4b0d      	ldr	r3, [pc, #52]	; (22614 <signal_poll_event+0xc4>)
   225de:	689b      	ldr	r3, [r3, #8]
   225e0:	895b      	ldrh	r3, [r3, #10]
   225e2:	2b7f      	cmp	r3, #127	; 0x7f
   225e4:	d901      	bls.n	225ea <signal_poll_event+0x9a>
	*must_reschedule = !_is_in_isr() && _must_switch_threads();
   225e6:	2000      	movs	r0, #0
   225e8:	e004      	b.n	225f4 <signal_poll_event+0xa4>
   225ea:	f7ff f9fd 	bl	219e8 <__must_switch_threads>
   225ee:	3000      	adds	r0, #0
   225f0:	bf18      	it	ne
   225f2:	2001      	movne	r0, #1
   225f4:	6038      	str	r0, [r7, #0]
	event->state |= state;
   225f6:	7b6b      	ldrb	r3, [r5, #13]
   225f8:	ea46 1613 	orr.w	r6, r6, r3, lsr #4
   225fc:	f366 1307 	bfi	r3, r6, #4, #4
	event->poller = NULL;
   22600:	2000      	movs	r0, #0
	event->state |= state;
   22602:	736b      	strb	r3, [r5, #13]
	event->poller = NULL;
   22604:	60a8      	str	r0, [r5, #8]

ready_event:
	set_event_ready(event, state);
	return 0;
   22606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	*must_reschedule = !_is_in_isr() && _must_switch_threads();
   22608:	4620      	mov	r0, r4
   2260a:	e7f3      	b.n	225f4 <signal_poll_event+0xa4>
		return -EAGAIN;
   2260c:	f06f 000a 	mvn.w	r0, #10
   22610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22612:	bf00      	nop
   22614:	20002ff8 	.word	0x20002ff8
   22618:	e000ed00 	.word	0xe000ed00

0002261c <add_event>:
	return list->head == list;
   2261c:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2261e:	4298      	cmp	r0, r3
{
   22620:	b530      	push	{r4, r5, lr}
   22622:	d00a      	beq.n	2263a <add_event+0x1e>
   22624:	6844      	ldr	r4, [r0, #4]
	if (!pending || _is_t1_higher_prio_than_t2(pending->poller->thread,
   22626:	b144      	cbz	r4, 2263a <add_event+0x1e>
   22628:	68a5      	ldr	r5, [r4, #8]
   2262a:	6812      	ldr	r2, [r2, #0]
   2262c:	682d      	ldr	r5, [r5, #0]
   2262e:	f992 200a 	ldrsb.w	r2, [r2, #10]
   22632:	f995 500a 	ldrsb.w	r5, [r5, #10]
   22636:	4295      	cmp	r5, r2
   22638:	da17      	bge.n	2266a <add_event+0x4e>
	node->next = list;
   2263a:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
   2263c:	6843      	ldr	r3, [r0, #4]
   2263e:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
   22640:	6843      	ldr	r3, [r0, #4]
   22642:	6019      	str	r1, [r3, #0]
	list->tail = node;
   22644:	6041      	str	r1, [r0, #4]
   22646:	bd30      	pop	{r4, r5, pc}
		if (_is_t1_higher_prio_than_t2(poller->thread,
   22648:	689d      	ldr	r5, [r3, #8]
   2264a:	682d      	ldr	r5, [r5, #0]
   2264c:	f995 500a 	ldrsb.w	r5, [r5, #10]
   22650:	4295      	cmp	r5, r2
   22652:	dd06      	ble.n	22662 <add_event+0x46>
		node->prev = insert_point->prev;
   22654:	685a      	ldr	r2, [r3, #4]
   22656:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
   22658:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
   2265a:	685a      	ldr	r2, [r3, #4]
   2265c:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
   2265e:	6059      	str	r1, [r3, #4]
   22660:	bd30      	pop	{r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   22662:	42a3      	cmp	r3, r4
   22664:	d003      	beq.n	2266e <add_event+0x52>
   22666:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   22668:	b10b      	cbz	r3, 2266e <add_event+0x52>
   2266a:	2b00      	cmp	r3, #0
   2266c:	d1ec      	bne.n	22648 <add_event+0x2c>
	node->prev = list->tail;
   2266e:	e881 0011 	stmia.w	r1, {r0, r4}
   22672:	e7e5      	b.n	22640 <add_event+0x24>

00022674 <k_poll_event_init>:
{
   22674:	b530      	push	{r4, r5, lr}
	event->type = type;
   22676:	7b44      	ldrb	r4, [r0, #13]
	event->obj = obj;
   22678:	6103      	str	r3, [r0, #16]
	event->type = type;
   2267a:	f361 0403 	bfi	r4, r1, #0, #4
	event->mode = mode;
   2267e:	7b81      	ldrb	r1, [r0, #14]
   22680:	f362 0100 	bfi	r1, r2, #0, #1
   22684:	7381      	strb	r1, [r0, #14]
	event->unused = 0;
   22686:	89c2      	ldrh	r2, [r0, #14]
	event->poller = NULL;
   22688:	2500      	movs	r5, #0
	event->state = K_POLL_STATE_NOT_READY;
   2268a:	f365 1407 	bfi	r4, r5, #4, #4
	event->unused = 0;
   2268e:	f365 024f 	bfi	r2, r5, #1, #15
	event->poller = NULL;
   22692:	6085      	str	r5, [r0, #8]
	event->state = K_POLL_STATE_NOT_READY;
   22694:	7344      	strb	r4, [r0, #13]
	event->unused = 0;
   22696:	81c2      	strh	r2, [r0, #14]
	event->obj = obj;
   22698:	bd30      	pop	{r4, r5, pc}
	...

0002269c <k_poll>:
{
   2269c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   226a0:	b087      	sub	sp, #28
   226a2:	4680      	mov	r8, r0
   226a4:	9101      	str	r1, [sp, #4]
   226a6:	4691      	mov	r9, r2
   226a8:	f04f 0320 	mov.w	r3, #32
   226ac:	f3ef 8111 	mrs	r1, BASEPRI
   226b0:	f383 8811 	msr	BASEPRI, r3
	set_polling_state(_current);
   226b4:	4d4a      	ldr	r5, [pc, #296]	; (227e0 <k_poll+0x144>)
   226b6:	68aa      	ldr	r2, [r5, #8]
	thread->base.thread_state |= states;
   226b8:	7a53      	ldrb	r3, [r2, #9]
   226ba:	f043 0320 	orr.w	r3, r3, #32
   226be:	7253      	strb	r3, [r2, #9]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   226c0:	f381 8811 	msr	BASEPRI, r1
	struct _poller poller = { .thread = _current };
   226c4:	f10d 0a18 	add.w	sl, sp, #24
   226c8:	68aa      	ldr	r2, [r5, #8]
   226ca:	f84a 2d0c 	str.w	r2, [sl, #-12]!
   226ce:	4604      	mov	r4, r0
	for (int ii = 0; ii < num_events; ii++) {
   226d0:	2700      	movs	r7, #0
	int last_registered = -1, rc;
   226d2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
	for (int ii = 0; ii < num_events; ii++) {
   226d6:	9b01      	ldr	r3, [sp, #4]
   226d8:	429f      	cmp	r7, r3
   226da:	db15      	blt.n	22708 <k_poll+0x6c>
	__asm__ volatile(
   226dc:	f04f 0320 	mov.w	r3, #32
   226e0:	f3ef 8711 	mrs	r7, BASEPRI
   226e4:	f383 8811 	msr	BASEPRI, r3
	return _is_thread_polling(_current);
   226e8:	68aa      	ldr	r2, [r5, #8]
   226ea:	7a53      	ldrb	r3, [r2, #9]
	if (!is_polling()) {
   226ec:	f013 0420 	ands.w	r4, r3, #32
   226f0:	d144      	bne.n	2277c <k_poll+0xe0>
		clear_event_registrations(events, last_registered, key);
   226f2:	463a      	mov	r2, r7
   226f4:	4631      	mov	r1, r6
   226f6:	4640      	mov	r0, r8
   226f8:	f7ff ff08 	bl	2250c <clear_event_registrations>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   226fc:	f387 8811 	msr	BASEPRI, r7
}
   22700:	4620      	mov	r0, r4
   22702:	b007      	add	sp, #28
   22704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   22708:	f04f 0220 	mov.w	r2, #32
   2270c:	f3ef 8b11 	mrs	fp, BASEPRI
   22710:	f382 8811 	msr	BASEPRI, r2
	switch (event->type) {
   22714:	7b61      	ldrb	r1, [r4, #13]
   22716:	f001 020f 	and.w	r2, r1, #15
   2271a:	2a02      	cmp	r2, #2
   2271c:	d003      	beq.n	22726 <k_poll+0x8a>
   2271e:	2a04      	cmp	r2, #4
   22720:	d004      	beq.n	2272c <k_poll+0x90>
   22722:	2a01      	cmp	r2, #1
   22724:	d106      	bne.n	22734 <k_poll+0x98>
		if (event->signal->signaled) {
   22726:	6920      	ldr	r0, [r4, #16]
   22728:	6880      	ldr	r0, [r0, #8]
   2272a:	e001      	b.n	22730 <k_poll+0x94>
		if (!k_queue_is_empty(event->queue)) {
   2272c:	6920      	ldr	r0, [r4, #16]
   2272e:	6800      	ldr	r0, [r0, #0]
		if (event->signal->signaled) {
   22730:	2800      	cmp	r0, #0
   22732:	d148      	bne.n	227c6 <k_poll+0x12a>
		} else if (timeout != K_NO_WAIT && is_polling()) {
   22734:	f1b9 0f00 	cmp.w	r9, #0
   22738:	d016      	beq.n	22768 <k_poll+0xcc>
   2273a:	68a9      	ldr	r1, [r5, #8]
   2273c:	7a49      	ldrb	r1, [r1, #9]
   2273e:	068b      	lsls	r3, r1, #26
   22740:	d512      	bpl.n	22768 <k_poll+0xcc>
	switch (event->type) {
   22742:	2a02      	cmp	r2, #2
   22744:	d007      	beq.n	22756 <k_poll+0xba>
   22746:	2a04      	cmp	r2, #4
   22748:	d013      	beq.n	22772 <k_poll+0xd6>
   2274a:	2a01      	cmp	r2, #1
   2274c:	d109      	bne.n	22762 <k_poll+0xc6>
		add_event(&event->signal->poll_events, event, poller);
   2274e:	4652      	mov	r2, sl
   22750:	4621      	mov	r1, r4
   22752:	6920      	ldr	r0, [r4, #16]
   22754:	e003      	b.n	2275e <k_poll+0xc2>
		add_event(&event->sem->poll_events, event, poller);
   22756:	6920      	ldr	r0, [r4, #16]
   22758:	4652      	mov	r2, sl
   2275a:	4621      	mov	r1, r4
   2275c:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   2275e:	f7ff ff5d 	bl	2261c <add_event>
	event->poller = poller;
   22762:	f8c4 a008 	str.w	sl, [r4, #8]
				++last_registered;
   22766:	3601      	adds	r6, #1
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   22768:	f38b 8811 	msr	BASEPRI, fp
	for (int ii = 0; ii < num_events; ii++) {
   2276c:	3701      	adds	r7, #1
   2276e:	3414      	adds	r4, #20
   22770:	e7b1      	b.n	226d6 <k_poll+0x3a>
		add_event(&event->queue->poll_events, event, poller);
   22772:	6920      	ldr	r0, [r4, #16]
   22774:	4652      	mov	r2, sl
   22776:	4621      	mov	r1, r4
   22778:	3008      	adds	r0, #8
   2277a:	e7f0      	b.n	2275e <k_poll+0xc2>
	thread->base.thread_state &= ~states;
   2277c:	f023 0320 	bic.w	r3, r3, #32
   22780:	7253      	strb	r3, [r2, #9]
	if (timeout == K_NO_WAIT) {
   22782:	f1b9 0f00 	cmp.w	r9, #0
   22786:	d104      	bne.n	22792 <k_poll+0xf6>
   22788:	f387 8811 	msr	BASEPRI, r7
		return -EAGAIN;
   2278c:	f06f 040a 	mvn.w	r4, #10
   22790:	e7b6      	b.n	22700 <k_poll+0x64>
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
   22792:	a804      	add	r0, sp, #16
	_pend_current_thread(&wait_q, timeout);
   22794:	4649      	mov	r1, r9
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
   22796:	9004      	str	r0, [sp, #16]
   22798:	9005      	str	r0, [sp, #20]
	_pend_current_thread(&wait_q, timeout);
   2279a:	f7ff f915 	bl	219c8 <_pend_current_thread>
	_update_time_slice_before_swap();
   2279e:	f7ff f9d5 	bl	21b4c <_update_time_slice_before_swap>
	return __swap(key);
   227a2:	4638      	mov	r0, r7
   227a4:	f7df f866 	bl	1874 <__swap>
   227a8:	4604      	mov	r4, r0
	__asm__ volatile(
   227aa:	f04f 0320 	mov.w	r3, #32
   227ae:	f3ef 8511 	mrs	r5, BASEPRI
   227b2:	f383 8811 	msr	BASEPRI, r3
	clear_event_registrations(events, last_registered, key);
   227b6:	462a      	mov	r2, r5
   227b8:	4631      	mov	r1, r6
   227ba:	4640      	mov	r0, r8
   227bc:	f7ff fea6 	bl	2250c <clear_event_registrations>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   227c0:	f385 8811 	msr	BASEPRI, r5
	return swap_rc;
   227c4:	e79c      	b.n	22700 <k_poll+0x64>
	event->state |= state;
   227c6:	ea42 1211 	orr.w	r2, r2, r1, lsr #4
   227ca:	f362 1107 	bfi	r1, r2, #4, #4
	event->poller = NULL;
   227ce:	2300      	movs	r3, #0
   227d0:	60a3      	str	r3, [r4, #8]
	event->state |= state;
   227d2:	7361      	strb	r1, [r4, #13]
			clear_polling_state(_current);
   227d4:	68a9      	ldr	r1, [r5, #8]
   227d6:	7a4a      	ldrb	r2, [r1, #9]
   227d8:	f022 0220 	bic.w	r2, r2, #32
   227dc:	724a      	strb	r2, [r1, #9]
   227de:	e7c3      	b.n	22768 <k_poll+0xcc>
   227e0:	20002ff8 	.word	0x20002ff8

000227e4 <_handle_obj_poll_events>:
}

/* returns 1 if a reschedule must take place, 0 otherwise */
int _handle_obj_poll_events(sys_dlist_t *events, u32_t state)
{
   227e4:	b513      	push	{r0, r1, r4, lr}
	return list->head == list;
   227e6:	6804      	ldr	r4, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node;

	if (sys_dlist_is_empty(list)) {
   227e8:	42a0      	cmp	r0, r4
   227ea:	d102      	bne.n	227f2 <_handle_obj_poll_events+0xe>
	struct k_poll_event *poll_event;
	int must_reschedule;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (!poll_event) {
		return 0;
   227ec:	2000      	movs	r0, #0
	}

	(void) signal_poll_event(poll_event, state, &must_reschedule);
	return must_reschedule;
}
   227ee:	b002      	add	sp, #8
   227f0:	bd10      	pop	{r4, pc}
		return NULL;
	}

	node = list->head;
	sys_dlist_remove(node);
   227f2:	4620      	mov	r0, r4
   227f4:	f7ff fe84 	bl	22500 <sys_dlist_remove>
	if (!poll_event) {
   227f8:	2c00      	cmp	r4, #0
   227fa:	d0f7      	beq.n	227ec <_handle_obj_poll_events+0x8>
	(void) signal_poll_event(poll_event, state, &must_reschedule);
   227fc:	aa01      	add	r2, sp, #4
   227fe:	4620      	mov	r0, r4
   22800:	f7ff fea6 	bl	22550 <signal_poll_event>
	return must_reschedule;
   22804:	9801      	ldr	r0, [sp, #4]
   22806:	e7f2      	b.n	227ee <_handle_obj_poll_events+0xa>

00022808 <k_poll_signal>:
	signal->signaled = 0;
	/* signal->result is left unitialized */
}

int k_poll_signal(struct k_poll_signal *signal, int result)
{
   22808:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__asm__ volatile(
   2280a:	f04f 0320 	mov.w	r3, #32
   2280e:	f3ef 8511 	mrs	r5, BASEPRI
   22812:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   22816:	6804      	ldr	r4, [r0, #0]
	unsigned int key = irq_lock();
	struct k_poll_event *poll_event;
	int must_reschedule;

	signal->result = result;
   22818:	60c1      	str	r1, [r0, #12]
	if (sys_dlist_is_empty(list)) {
   2281a:	42a0      	cmp	r0, r4
	signal->signaled = 1;
   2281c:	f04f 0101 	mov.w	r1, #1
   22820:	6081      	str	r1, [r0, #8]
   22822:	d105      	bne.n	22830 <k_poll_signal+0x28>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   22824:	f385 8811 	msr	BASEPRI, r5

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (!poll_event) {
		irq_unlock(key);
		return 0;
   22828:	2400      	movs	r4, #0
	} else {
		irq_unlock(key);
	}

	return rc;
}
   2282a:	4620      	mov	r0, r4
   2282c:	b003      	add	sp, #12
   2282e:	bd30      	pop	{r4, r5, pc}
	sys_dlist_remove(node);
   22830:	4620      	mov	r0, r4
   22832:	f7ff fe65 	bl	22500 <sys_dlist_remove>
	if (!poll_event) {
   22836:	2c00      	cmp	r4, #0
   22838:	d0f4      	beq.n	22824 <k_poll_signal+0x1c>
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED,
   2283a:	4620      	mov	r0, r4
   2283c:	aa01      	add	r2, sp, #4
   2283e:	f7ff fe87 	bl	22550 <signal_poll_event>
	if (must_reschedule) {
   22842:	9b01      	ldr	r3, [sp, #4]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED,
   22844:	4604      	mov	r4, r0
	if (must_reschedule) {
   22846:	b12b      	cbz	r3, 22854 <k_poll_signal+0x4c>
	_update_time_slice_before_swap();
   22848:	f7ff f980 	bl	21b4c <_update_time_slice_before_swap>
	return __swap(key);
   2284c:	4628      	mov	r0, r5
   2284e:	f7df f811 	bl	1874 <__swap>
   22852:	e7ea      	b.n	2282a <k_poll_signal+0x22>
   22854:	f385 8811 	msr	BASEPRI, r5
   22858:	e7e7      	b.n	2282a <k_poll_signal+0x22>

0002285a <_OffsetAbsSyms>:

#ifdef CONFIG_FLOAT
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread) -
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
   2285a:	4770      	bx	lr
