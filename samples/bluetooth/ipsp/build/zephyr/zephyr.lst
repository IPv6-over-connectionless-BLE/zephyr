
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:
};
#endif

/* Linker needs this */
GEN_ABS_SYM_BEGIN(isr_tables_syms)
GEN_ABSOLUTE_SYM(__ISR_LIST_SIZEOF, sizeof(struct _isr_list));
       0:	20008f28 	.word	0x20008f28
       4:	00001e59 	.word	0x00001e59
       8:	00001eb5 	.word	0x00001eb5
       c:	00001cf1 	.word	0x00001cf1
      10:	00001cf1 	.word	0x00001cf1
      14:	00001cf1 	.word	0x00001cf1
      18:	00001cf1 	.word	0x00001cf1
      1c:	00001cf1 	.word	0x00001cf1
      20:	00001cf1 	.word	0x00001cf1
      24:	00001cf1 	.word	0x00001cf1
      28:	00001cf1 	.word	0x00001cf1
      2c:	000018dd 	.word	0x000018dd
      30:	00001cf1 	.word	0x00001cf1
      34:	00001cf1 	.word	0x00001cf1
      38:	00001899 	.word	0x00001899
      3c:	00001cf1 	.word	0x00001cf1

00000040 <_irq_vector_table>:
      40:	00001e1d 00016cd3 00001e1d 00001e1d     .....l..........
      50:	00001e1d 00001e1d 00001e1d 00001e1d     ................
      60:	00001e1d 00001e1d 00001e1d 00001e1d     ................
      70:	00001e1d 00001e1d 00001e1d 00001e1d     ................
      80:	00001e1d 00001e1d 00001e1d 00001e1d     ................
      90:	00001e1d 00001e1d 00001e1d 00001e1d     ................
      a0:	00001e1d 00001e1d 00001e1d 00001e1d     ................
      b0:	00001e1d 00001e1d 00001e1d 00001e1d     ................
      c0:	00001e1d 00001e1d 00001e1d 00001e1d     ................
      d0:	00001e1d 00001e1d 00001e1d 00001e1d     ................
      e0:	00001e1d 00001e1d 00001e1d 00001e1d     ................
      f0:	00001e1d 00001e1d                       ........

000000f8 <_sw_isr_table>:
      f8:	00000000 00002aa1 00000000 00001c61     .....*......a...
     108:	00000000 00001c61 00000000 00001c61     ....a.......a...
     118:	00000000 00001c61 00000000 00001c61     ....a.......a...
     128:	2000a8e4 00002c85 00000000 00001c61     ... .,......a...
     138:	00000000 00001c61 00000000 00001c61     ....a.......a...
     148:	00000000 00001c61 00000000 00016c99     ....a........l..
     158:	00000000 00001c61 2000a8c0 0000304d     ....a...... M0..
     168:	00000000 00001c61 00000000 00001c61     ....a.......a...
     178:	00000000 00001c61 00000000 0000318d     ....a........1..
     188:	00000000 00001c61 00000000 00001c61     ....a.......a...
     198:	00000000 00001c61 00000000 00001c61     ....a.......a...
     1a8:	00000000 00001c61 00000000 00001c61     ....a.......a...
     1b8:	00000000 00016ccd 00000000 00001c61     .....l......a...
     1c8:	00000000 00001c61 00000000 00001c61     ....a.......a...
     1d8:	00000000 00001c61 00000000 00001c61     ....a.......a...
     1e8:	00000000 00001c61 00000000 00001c61     ....a.......a...
     1f8:	00000000 00001c61 00000000 00001c61     ....a.......a...
     208:	00000000 00001c61 00000000 00001c61     ....a.......a...
     218:	00000000 00001c61 00000000 00001c61     ....a.......a...
     228:	00000000 00001c61 00000000 00001c61     ....a.......a...
     238:	00000000 00001c61 00000000 00001c61     ....a.......a...
     248:	00000000 00001c61 00000000 00001c61     ....a.......a...
     258:	00000000 00001c61 00000000 00001c61     ....a.......a...

00000268 <__aeabi_llsr>:
     268:	40d0      	lsrs	r0, r2
     26a:	1c0b      	adds	r3, r1, #0
     26c:	40d1      	lsrs	r1, r2
     26e:	469c      	mov	ip, r3
     270:	3a20      	subs	r2, #32
     272:	40d3      	lsrs	r3, r2
     274:	4318      	orrs	r0, r3
     276:	4252      	negs	r2, r2
     278:	4663      	mov	r3, ip
     27a:	4093      	lsls	r3, r2
     27c:	4318      	orrs	r0, r3
     27e:	4770      	bx	lr

00000280 <__aeabi_llsl>:
     280:	4091      	lsls	r1, r2
     282:	1c03      	adds	r3, r0, #0
     284:	4090      	lsls	r0, r2
     286:	469c      	mov	ip, r3
     288:	3a20      	subs	r2, #32
     28a:	4093      	lsls	r3, r2
     28c:	4319      	orrs	r1, r3
     28e:	4252      	negs	r2, r2
     290:	4663      	mov	r3, ip
     292:	40d3      	lsrs	r3, r2
     294:	4319      	orrs	r1, r3
     296:	4770      	bx	lr

00000298 <__aeabi_uldivmod>:
     298:	b953      	cbnz	r3, 2b0 <__aeabi_uldivmod+0x18>
     29a:	b94a      	cbnz	r2, 2b0 <__aeabi_uldivmod+0x18>
     29c:	2900      	cmp	r1, #0
     29e:	bf08      	it	eq
     2a0:	2800      	cmpeq	r0, #0
     2a2:	bf1c      	itt	ne
     2a4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     2a8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     2ac:	f000 b98e 	b.w	5cc <__aeabi_idiv0>
     2b0:	f1ad 0c08 	sub.w	ip, sp, #8
     2b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     2b8:	f000 f81a 	bl	2f0 <__udivmoddi4>
     2bc:	f8dd e004 	ldr.w	lr, [sp, #4]
     2c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     2c4:	b004      	add	sp, #16
     2c6:	4770      	bx	lr

000002c8 <__popcountsi2>:
     2c8:	0843      	lsrs	r3, r0, #1
     2ca:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
     2ce:	1ac0      	subs	r0, r0, r3
     2d0:	0883      	lsrs	r3, r0, #2
     2d2:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
     2d6:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
     2da:	4418      	add	r0, r3
     2dc:	eb00 1010 	add.w	r0, r0, r0, lsr #4
     2e0:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
     2e4:	eb00 2000 	add.w	r0, r0, r0, lsl #8
     2e8:	eb00 4000 	add.w	r0, r0, r0, lsl #16
     2ec:	0e00      	lsrs	r0, r0, #24
     2ee:	4770      	bx	lr

000002f0 <__udivmoddi4>:
     2f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     2f4:	468c      	mov	ip, r1
     2f6:	460d      	mov	r5, r1
     2f8:	4604      	mov	r4, r0
     2fa:	9e08      	ldr	r6, [sp, #32]
     2fc:	2b00      	cmp	r3, #0
     2fe:	d151      	bne.n	3a4 <__udivmoddi4+0xb4>
     300:	428a      	cmp	r2, r1
     302:	4617      	mov	r7, r2
     304:	d96d      	bls.n	3e2 <__udivmoddi4+0xf2>
     306:	fab2 fe82 	clz	lr, r2
     30a:	f1be 0f00 	cmp.w	lr, #0
     30e:	d00b      	beq.n	328 <__udivmoddi4+0x38>
     310:	f1ce 0c20 	rsb	ip, lr, #32
     314:	fa01 f50e 	lsl.w	r5, r1, lr
     318:	fa20 fc0c 	lsr.w	ip, r0, ip
     31c:	fa02 f70e 	lsl.w	r7, r2, lr
     320:	ea4c 0c05 	orr.w	ip, ip, r5
     324:	fa00 f40e 	lsl.w	r4, r0, lr
     328:	ea4f 4a17 	mov.w	sl, r7, lsr #16
     32c:	0c25      	lsrs	r5, r4, #16
     32e:	fbbc f8fa 	udiv	r8, ip, sl
     332:	fa1f f987 	uxth.w	r9, r7
     336:	fb0a cc18 	mls	ip, sl, r8, ip
     33a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     33e:	fb08 f309 	mul.w	r3, r8, r9
     342:	42ab      	cmp	r3, r5
     344:	d90a      	bls.n	35c <__udivmoddi4+0x6c>
     346:	19ed      	adds	r5, r5, r7
     348:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
     34c:	f080 8123 	bcs.w	596 <CONFIG_NET_TX_STACK_SIZE+0xe6>
     350:	42ab      	cmp	r3, r5
     352:	f240 8120 	bls.w	596 <CONFIG_NET_TX_STACK_SIZE+0xe6>
     356:	f1a8 0802 	sub.w	r8, r8, #2
     35a:	443d      	add	r5, r7
     35c:	1aed      	subs	r5, r5, r3
     35e:	b2a4      	uxth	r4, r4
     360:	fbb5 f0fa 	udiv	r0, r5, sl
     364:	fb0a 5510 	mls	r5, sl, r0, r5
     368:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     36c:	fb00 f909 	mul.w	r9, r0, r9
     370:	45a1      	cmp	r9, r4
     372:	d909      	bls.n	388 <__udivmoddi4+0x98>
     374:	19e4      	adds	r4, r4, r7
     376:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     37a:	f080 810a 	bcs.w	592 <CONFIG_NET_TX_STACK_SIZE+0xe2>
     37e:	45a1      	cmp	r9, r4
     380:	f240 8107 	bls.w	592 <CONFIG_NET_TX_STACK_SIZE+0xe2>
     384:	3802      	subs	r0, #2
     386:	443c      	add	r4, r7
     388:	eba4 0409 	sub.w	r4, r4, r9
     38c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     390:	2100      	movs	r1, #0
     392:	2e00      	cmp	r6, #0
     394:	d061      	beq.n	45a <CONFIG_BT_RX_STACK_SIZE+0x5a>
     396:	fa24 f40e 	lsr.w	r4, r4, lr
     39a:	2300      	movs	r3, #0
     39c:	6034      	str	r4, [r6, #0]
     39e:	6073      	str	r3, [r6, #4]
     3a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3a4:	428b      	cmp	r3, r1
     3a6:	d907      	bls.n	3b8 <__udivmoddi4+0xc8>
     3a8:	2e00      	cmp	r6, #0
     3aa:	d054      	beq.n	456 <CONFIG_BT_RX_STACK_SIZE+0x56>
     3ac:	2100      	movs	r1, #0
     3ae:	e886 0021 	stmia.w	r6, {r0, r5}
     3b2:	4608      	mov	r0, r1
     3b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3b8:	fab3 f183 	clz	r1, r3
     3bc:	2900      	cmp	r1, #0
     3be:	f040 808e 	bne.w	4de <CONFIG_NET_TX_STACK_SIZE+0x2e>
     3c2:	42ab      	cmp	r3, r5
     3c4:	d302      	bcc.n	3cc <__udivmoddi4+0xdc>
     3c6:	4282      	cmp	r2, r0
     3c8:	f200 80fa 	bhi.w	5c0 <CONFIG_NET_TX_STACK_SIZE+0x110>
     3cc:	1a84      	subs	r4, r0, r2
     3ce:	eb65 0503 	sbc.w	r5, r5, r3
     3d2:	2001      	movs	r0, #1
     3d4:	46ac      	mov	ip, r5
     3d6:	2e00      	cmp	r6, #0
     3d8:	d03f      	beq.n	45a <CONFIG_BT_RX_STACK_SIZE+0x5a>
     3da:	e886 1010 	stmia.w	r6, {r4, ip}
     3de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3e2:	b912      	cbnz	r2, 3ea <CONFIG_NET_TCP_ACK_TIMEOUT+0x2>
     3e4:	2701      	movs	r7, #1
     3e6:	fbb7 f7f2 	udiv	r7, r7, r2
     3ea:	fab7 fe87 	clz	lr, r7
     3ee:	f1be 0f00 	cmp.w	lr, #0
     3f2:	d134      	bne.n	45e <CONFIG_BT_RX_STACK_SIZE+0x5e>
     3f4:	1beb      	subs	r3, r5, r7
     3f6:	0c3a      	lsrs	r2, r7, #16
     3f8:	fa1f fc87 	uxth.w	ip, r7
     3fc:	2101      	movs	r1, #1
     3fe:	fbb3 f8f2 	udiv	r8, r3, r2
     402:	0c25      	lsrs	r5, r4, #16
     404:	fb02 3318 	mls	r3, r2, r8, r3
     408:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     40c:	fb0c f308 	mul.w	r3, ip, r8
     410:	42ab      	cmp	r3, r5
     412:	d907      	bls.n	424 <CONFIG_BT_RX_STACK_SIZE+0x24>
     414:	19ed      	adds	r5, r5, r7
     416:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     41a:	d202      	bcs.n	422 <CONFIG_BT_RX_STACK_SIZE+0x22>
     41c:	42ab      	cmp	r3, r5
     41e:	f200 80d1 	bhi.w	5c4 <CONFIG_NET_TX_STACK_SIZE+0x114>
     422:	4680      	mov	r8, r0
     424:	1aed      	subs	r5, r5, r3
     426:	b2a3      	uxth	r3, r4
     428:	fbb5 f0f2 	udiv	r0, r5, r2
     42c:	fb02 5510 	mls	r5, r2, r0, r5
     430:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     434:	fb0c fc00 	mul.w	ip, ip, r0
     438:	45a4      	cmp	ip, r4
     43a:	d907      	bls.n	44c <CONFIG_BT_RX_STACK_SIZE+0x4c>
     43c:	19e4      	adds	r4, r4, r7
     43e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     442:	d202      	bcs.n	44a <CONFIG_BT_RX_STACK_SIZE+0x4a>
     444:	45a4      	cmp	ip, r4
     446:	f200 80b8 	bhi.w	5ba <CONFIG_NET_TX_STACK_SIZE+0x10a>
     44a:	4618      	mov	r0, r3
     44c:	eba4 040c 	sub.w	r4, r4, ip
     450:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     454:	e79d      	b.n	392 <__udivmoddi4+0xa2>
     456:	4631      	mov	r1, r6
     458:	4630      	mov	r0, r6
     45a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     45e:	f1ce 0420 	rsb	r4, lr, #32
     462:	fa05 f30e 	lsl.w	r3, r5, lr
     466:	fa07 f70e 	lsl.w	r7, r7, lr
     46a:	fa20 f804 	lsr.w	r8, r0, r4
     46e:	0c3a      	lsrs	r2, r7, #16
     470:	fa25 f404 	lsr.w	r4, r5, r4
     474:	ea48 0803 	orr.w	r8, r8, r3
     478:	fbb4 f1f2 	udiv	r1, r4, r2
     47c:	ea4f 4518 	mov.w	r5, r8, lsr #16
     480:	fb02 4411 	mls	r4, r2, r1, r4
     484:	fa1f fc87 	uxth.w	ip, r7
     488:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
     48c:	fb01 f30c 	mul.w	r3, r1, ip
     490:	42ab      	cmp	r3, r5
     492:	fa00 f40e 	lsl.w	r4, r0, lr
     496:	d909      	bls.n	4ac <CONFIG_BT_RX_STACK_SIZE+0xac>
     498:	19ed      	adds	r5, r5, r7
     49a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
     49e:	f080 808a 	bcs.w	5b6 <CONFIG_NET_TX_STACK_SIZE+0x106>
     4a2:	42ab      	cmp	r3, r5
     4a4:	f240 8087 	bls.w	5b6 <CONFIG_NET_TX_STACK_SIZE+0x106>
     4a8:	3902      	subs	r1, #2
     4aa:	443d      	add	r5, r7
     4ac:	1aeb      	subs	r3, r5, r3
     4ae:	fa1f f588 	uxth.w	r5, r8
     4b2:	fbb3 f0f2 	udiv	r0, r3, r2
     4b6:	fb02 3310 	mls	r3, r2, r0, r3
     4ba:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     4be:	fb00 f30c 	mul.w	r3, r0, ip
     4c2:	42ab      	cmp	r3, r5
     4c4:	d907      	bls.n	4d6 <CONFIG_NET_TX_STACK_SIZE+0x26>
     4c6:	19ed      	adds	r5, r5, r7
     4c8:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
     4cc:	d26f      	bcs.n	5ae <CONFIG_NET_TX_STACK_SIZE+0xfe>
     4ce:	42ab      	cmp	r3, r5
     4d0:	d96d      	bls.n	5ae <CONFIG_NET_TX_STACK_SIZE+0xfe>
     4d2:	3802      	subs	r0, #2
     4d4:	443d      	add	r5, r7
     4d6:	1aeb      	subs	r3, r5, r3
     4d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     4dc:	e78f      	b.n	3fe <CONFIG_NET_TCP_ACK_TIMEOUT+0x16>
     4de:	f1c1 0720 	rsb	r7, r1, #32
     4e2:	fa22 f807 	lsr.w	r8, r2, r7
     4e6:	408b      	lsls	r3, r1
     4e8:	fa05 f401 	lsl.w	r4, r5, r1
     4ec:	ea48 0303 	orr.w	r3, r8, r3
     4f0:	fa20 fe07 	lsr.w	lr, r0, r7
     4f4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
     4f8:	40fd      	lsrs	r5, r7
     4fa:	ea4e 0e04 	orr.w	lr, lr, r4
     4fe:	fbb5 f9fc 	udiv	r9, r5, ip
     502:	ea4f 441e 	mov.w	r4, lr, lsr #16
     506:	fb0c 5519 	mls	r5, ip, r9, r5
     50a:	fa1f f883 	uxth.w	r8, r3
     50e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
     512:	fb09 f408 	mul.w	r4, r9, r8
     516:	42ac      	cmp	r4, r5
     518:	fa02 f201 	lsl.w	r2, r2, r1
     51c:	fa00 fa01 	lsl.w	sl, r0, r1
     520:	d908      	bls.n	534 <CONFIG_NET_TX_STACK_SIZE+0x84>
     522:	18ed      	adds	r5, r5, r3
     524:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     528:	d243      	bcs.n	5b2 <CONFIG_NET_TX_STACK_SIZE+0x102>
     52a:	42ac      	cmp	r4, r5
     52c:	d941      	bls.n	5b2 <CONFIG_NET_TX_STACK_SIZE+0x102>
     52e:	f1a9 0902 	sub.w	r9, r9, #2
     532:	441d      	add	r5, r3
     534:	1b2d      	subs	r5, r5, r4
     536:	fa1f fe8e 	uxth.w	lr, lr
     53a:	fbb5 f0fc 	udiv	r0, r5, ip
     53e:	fb0c 5510 	mls	r5, ip, r0, r5
     542:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
     546:	fb00 f808 	mul.w	r8, r0, r8
     54a:	45a0      	cmp	r8, r4
     54c:	d907      	bls.n	55e <CONFIG_NET_TX_STACK_SIZE+0xae>
     54e:	18e4      	adds	r4, r4, r3
     550:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
     554:	d229      	bcs.n	5aa <CONFIG_NET_TX_STACK_SIZE+0xfa>
     556:	45a0      	cmp	r8, r4
     558:	d927      	bls.n	5aa <CONFIG_NET_TX_STACK_SIZE+0xfa>
     55a:	3802      	subs	r0, #2
     55c:	441c      	add	r4, r3
     55e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     562:	eba4 0408 	sub.w	r4, r4, r8
     566:	fba0 8902 	umull	r8, r9, r0, r2
     56a:	454c      	cmp	r4, r9
     56c:	46c6      	mov	lr, r8
     56e:	464d      	mov	r5, r9
     570:	d315      	bcc.n	59e <CONFIG_NET_TX_STACK_SIZE+0xee>
     572:	d012      	beq.n	59a <CONFIG_NET_TX_STACK_SIZE+0xea>
     574:	b156      	cbz	r6, 58c <CONFIG_NET_TX_STACK_SIZE+0xdc>
     576:	ebba 030e 	subs.w	r3, sl, lr
     57a:	eb64 0405 	sbc.w	r4, r4, r5
     57e:	fa04 f707 	lsl.w	r7, r4, r7
     582:	40cb      	lsrs	r3, r1
     584:	431f      	orrs	r7, r3
     586:	40cc      	lsrs	r4, r1
     588:	6037      	str	r7, [r6, #0]
     58a:	6074      	str	r4, [r6, #4]
     58c:	2100      	movs	r1, #0
     58e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     592:	4618      	mov	r0, r3
     594:	e6f8      	b.n	388 <__udivmoddi4+0x98>
     596:	4690      	mov	r8, r2
     598:	e6e0      	b.n	35c <__udivmoddi4+0x6c>
     59a:	45c2      	cmp	sl, r8
     59c:	d2ea      	bcs.n	574 <CONFIG_NET_TX_STACK_SIZE+0xc4>
     59e:	ebb8 0e02 	subs.w	lr, r8, r2
     5a2:	eb69 0503 	sbc.w	r5, r9, r3
     5a6:	3801      	subs	r0, #1
     5a8:	e7e4      	b.n	574 <CONFIG_NET_TX_STACK_SIZE+0xc4>
     5aa:	4628      	mov	r0, r5
     5ac:	e7d7      	b.n	55e <CONFIG_NET_TX_STACK_SIZE+0xae>
     5ae:	4640      	mov	r0, r8
     5b0:	e791      	b.n	4d6 <CONFIG_NET_TX_STACK_SIZE+0x26>
     5b2:	4681      	mov	r9, r0
     5b4:	e7be      	b.n	534 <CONFIG_NET_TX_STACK_SIZE+0x84>
     5b6:	4601      	mov	r1, r0
     5b8:	e778      	b.n	4ac <CONFIG_BT_RX_STACK_SIZE+0xac>
     5ba:	3802      	subs	r0, #2
     5bc:	443c      	add	r4, r7
     5be:	e745      	b.n	44c <CONFIG_BT_RX_STACK_SIZE+0x4c>
     5c0:	4608      	mov	r0, r1
     5c2:	e708      	b.n	3d6 <__udivmoddi4+0xe6>
     5c4:	f1a8 0802 	sub.w	r8, r8, #2
     5c8:	443d      	add	r5, r7
     5ca:	e72b      	b.n	424 <CONFIG_BT_RX_STACK_SIZE+0x24>

000005cc <__aeabi_idiv0>:
     5cc:	4770      	bx	lr
     5ce:	bf00      	nop

000005d0 <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
     5d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     5d4:	4686      	mov	lr, r0
     5d6:	460f      	mov	r7, r1
	register const char *s = nptr;
     5d8:	4605      	mov	r5, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
     5da:	462c      	mov	r4, r5
     5dc:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (((unsigned)c|32)-'a') < 26;
}

static inline int isspace(int c)
{
	return c == ' ' || ((unsigned)c-'\t') < 5;
     5e0:	2b20      	cmp	r3, #32
     5e2:	d003      	beq.n	5ec <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x10>
     5e4:	f1a3 0109 	sub.w	r1, r3, #9
     5e8:	2904      	cmp	r1, #4
     5ea:	d857      	bhi.n	69c <CONFIG_BT_CTLR_COMPANY_ID+0xab>
{
     5ec:	4625      	mov	r5, r4
     5ee:	e7f4      	b.n	5da <strtol+0xa>
	} while (isspace(c));
	if (c == '-') {
		neg = 1;
		c = *s++;
	} else if (c == '+')
     5f0:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
     5f2:	bf04      	itt	eq
     5f4:	1cac      	addeq	r4, r5, #2
     5f6:	786b      	ldrbeq	r3, [r5, #1]
	register int neg = 0, any, cutlim;
     5f8:	2100      	movs	r1, #0
     5fa:	e054      	b.n	6a6 <CONFIG_BT_CTLR_COMPANY_ID+0xb5>
	if ((base == 0 || base == 16) &&
     5fc:	2b30      	cmp	r3, #48	; 0x30
     5fe:	d127      	bne.n	650 <CONFIG_BT_CTLR_COMPANY_ID+0x5f>
	    c == '0' && (*s == 'x' || *s == 'X')) {
     600:	7823      	ldrb	r3, [r4, #0]
     602:	f003 03df 	and.w	r3, r3, #223	; 0xdf
     606:	2b58      	cmp	r3, #88	; 0x58
     608:	d154      	bne.n	6b4 <CONFIG_BT_CTLR_COMPANY_ID+0xc3>
		c = s[1];
     60a:	7863      	ldrb	r3, [r4, #1]
		s += 2;
		base = 16;
     60c:	2210      	movs	r2, #16
		s += 2;
     60e:	3402      	adds	r4, #2
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
     610:	2900      	cmp	r1, #0
     612:	bf0c      	ite	eq
     614:	f06f 4800 	mvneq.w	r8, #2147483648	; 0x80000000
     618:	f04f 4800 	movne.w	r8, #2147483648	; 0x80000000
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
     61c:	2600      	movs	r6, #0
	cutlim = cutoff % (unsigned long)base;
     61e:	fbb8 fcf2 	udiv	ip, r8, r2
	for (acc = 0, any = 0;; c = *s++) {
     622:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
     624:	fb02 891c 	mls	r9, r2, ip, r8
	return ((((unsigned)c) >= ' ') && (((unsigned)c) <= '~'));
}

static inline int isdigit(int a)
{
	return (((unsigned)(a)-'0') < 10);
     628:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c))
     62c:	2d09      	cmp	r5, #9
     62e:	d811      	bhi.n	654 <CONFIG_BT_CTLR_COMPANY_ID+0x63>
			c -= '0';
     630:	462b      	mov	r3, r5
		else if (isalpha(c))
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		else
			break;
		if (c >= base)
     632:	429a      	cmp	r2, r3
     634:	dd1e      	ble.n	674 <CONFIG_BT_CTLR_COMPANY_ID+0x83>
			break;
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
     636:	1c75      	adds	r5, r6, #1
     638:	d007      	beq.n	64a <CONFIG_BT_CTLR_COMPANY_ID+0x59>
     63a:	4560      	cmp	r0, ip
     63c:	d817      	bhi.n	66e <CONFIG_BT_CTLR_COMPANY_ID+0x7d>
     63e:	d101      	bne.n	644 <CONFIG_BT_CTLR_COMPANY_ID+0x53>
     640:	454b      	cmp	r3, r9
     642:	dc14      	bgt.n	66e <CONFIG_BT_CTLR_COMPANY_ID+0x7d>
			any = -1;
		else {
			any = 1;
			acc *= base;
			acc += c;
     644:	fb02 3000 	mla	r0, r2, r0, r3
			any = 1;
     648:	2601      	movs	r6, #1
	for (acc = 0, any = 0;; c = *s++) {
     64a:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c))
     64e:	e7eb      	b.n	628 <CONFIG_BT_CTLR_COMPANY_ID+0x37>
		base = c == '0' ? 8 : 10;
     650:	220a      	movs	r2, #10
     652:	e7dd      	b.n	610 <CONFIG_BT_CTLR_COMPANY_ID+0x1f>
	return (((unsigned)c|32)-'a') < 26;
     654:	f043 0520 	orr.w	r5, r3, #32
     658:	3d61      	subs	r5, #97	; 0x61
		else if (isalpha(c))
     65a:	2d19      	cmp	r5, #25
     65c:	d80a      	bhi.n	674 <CONFIG_BT_CTLR_COMPANY_ID+0x83>
	return ((unsigned)(a)-'A') < 26;
     65e:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
     662:	2d19      	cmp	r5, #25
     664:	bf8c      	ite	hi
     666:	2557      	movhi	r5, #87	; 0x57
     668:	2537      	movls	r5, #55	; 0x37
     66a:	1b5b      	subs	r3, r3, r5
     66c:	e7e1      	b.n	632 <CONFIG_BT_CTLR_COMPANY_ID+0x41>
			any = -1;
     66e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
     672:	e7ea      	b.n	64a <CONFIG_BT_CTLR_COMPANY_ID+0x59>
		}
	}
	if (any < 0) {
     674:	1c73      	adds	r3, r6, #1
     676:	d107      	bne.n	688 <CONFIG_BT_CTLR_COMPANY_ID+0x97>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
     678:	f020 fdb0 	bl	211dc <__errno>
     67c:	2326      	movs	r3, #38	; 0x26
     67e:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
     680:	4640      	mov	r0, r8
	} else if (neg)
		acc = -acc;
	if (endptr != 0)
     682:	b92f      	cbnz	r7, 690 <CONFIG_BT_CTLR_COMPANY_ID+0x9f>
     684:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg)
     688:	b101      	cbz	r1, 68c <CONFIG_BT_CTLR_COMPANY_ID+0x9b>
		acc = -acc;
     68a:	4240      	negs	r0, r0
	if (endptr != 0)
     68c:	b1bf      	cbz	r7, 6be <CONFIG_BT_CTLR_COMPANY_ID+0xcd>
		*endptr = (char *)(any ? s - 1 : nptr);
     68e:	b10e      	cbz	r6, 694 <CONFIG_BT_CTLR_COMPANY_ID+0xa3>
     690:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
     694:	f8c7 e000 	str.w	lr, [r7]
	return acc;
     698:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (c == '-') {
     69c:	2b2d      	cmp	r3, #45	; 0x2d
     69e:	d1a7      	bne.n	5f0 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x14>
		c = *s++;
     6a0:	786b      	ldrb	r3, [r5, #1]
     6a2:	1cac      	adds	r4, r5, #2
		neg = 1;
     6a4:	2101      	movs	r1, #1
	if ((base == 0 || base == 16) &&
     6a6:	2a00      	cmp	r2, #0
     6a8:	d0a8      	beq.n	5fc <CONFIG_BT_CTLR_COMPANY_ID+0xb>
     6aa:	2a10      	cmp	r2, #16
     6ac:	d1b0      	bne.n	610 <CONFIG_BT_CTLR_COMPANY_ID+0x1f>
     6ae:	2b30      	cmp	r3, #48	; 0x30
     6b0:	d0a6      	beq.n	600 <CONFIG_BT_CTLR_COMPANY_ID+0xf>
     6b2:	e7ad      	b.n	610 <CONFIG_BT_CTLR_COMPANY_ID+0x1f>
	if (base == 0)
     6b4:	2330      	movs	r3, #48	; 0x30
     6b6:	2a00      	cmp	r2, #0
     6b8:	d1aa      	bne.n	610 <CONFIG_BT_CTLR_COMPANY_ID+0x1f>
		base = c == '0' ? 8 : 10;
     6ba:	2208      	movs	r2, #8
     6bc:	e7a8      	b.n	610 <CONFIG_BT_CTLR_COMPANY_ID+0x1f>
}
     6be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000006c2 <strcpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
     6c2:	3901      	subs	r1, #1
	char *dest = d;

	while (*s != '\0') {
     6c4:	4603      	mov	r3, r0
     6c6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
     6ca:	b90a      	cbnz	r2, 6d0 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
     6cc:	701a      	strb	r2, [r3, #0]

	return dest;
}
     6ce:	4770      	bx	lr
		*d = *s;
     6d0:	f803 2b01 	strb.w	r2, [r3], #1
     6d4:	e7f7      	b.n	6c6 <strcpy+0x4>

000006d6 <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
     6d6:	b2c9      	uxtb	r1, r1
     6d8:	4603      	mov	r3, r0

	while ((*s != tmp) && (*s != '\0'))
     6da:	f810 2b01 	ldrb.w	r2, [r0], #1
     6de:	4291      	cmp	r1, r2
     6e0:	d006      	beq.n	6f0 <strchr+0x1a>
     6e2:	2a00      	cmp	r2, #0
     6e4:	d1f8      	bne.n	6d8 <strchr+0x2>
		s++;

	return (*s == tmp) ? (char *) s : NULL;
     6e6:	2900      	cmp	r1, #0
     6e8:	bf0c      	ite	eq
     6ea:	4618      	moveq	r0, r3
     6ec:	2000      	movne	r0, #0
     6ee:	4770      	bx	lr
     6f0:	4618      	mov	r0, r3
}
     6f2:	4770      	bx	lr

000006f4 <strrchr>:
 *
 * @return pointer to last instance of found byte, or NULL if not found
 */

char *strrchr(const char *s, int c)
{
     6f4:	b510      	push	{r4, lr}
	char *match = NULL;
     6f6:	2300      	movs	r3, #0

	do {
		if (*s == (char)c) {
     6f8:	b2c9      	uxtb	r1, r1
     6fa:	4604      	mov	r4, r0
     6fc:	f810 2b01 	ldrb.w	r2, [r0], #1
     700:	428a      	cmp	r2, r1
     702:	bf08      	it	eq
     704:	4623      	moveq	r3, r4
			match = (char *)s;
		}
	} while (*s++);
     706:	2a00      	cmp	r2, #0
     708:	d1f7      	bne.n	6fa <strrchr+0x6>

	return match;
}
     70a:	4618      	mov	r0, r3
     70c:	bd10      	pop	{r4, pc}

0000070e <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
     70e:	4602      	mov	r2, r0
	size_t n = 0;

	while (*s != '\0') {
     710:	4603      	mov	r3, r0
     712:	1a98      	subs	r0, r3, r2
     714:	f813 1b01 	ldrb.w	r1, [r3], #1
     718:	2900      	cmp	r1, #0
     71a:	d1fa      	bne.n	712 <strlen+0x4>
		s++;
		n++;
	}

	return n;
}
     71c:	4770      	bx	lr

0000071e <strcmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
     71e:	3801      	subs	r0, #1
     720:	3901      	subs	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
     722:	f810 3f01 	ldrb.w	r3, [r0, #1]!
     726:	f811 2f01 	ldrb.w	r2, [r1, #1]!
     72a:	4293      	cmp	r3, r2
     72c:	d102      	bne.n	734 <strcmp+0x16>
     72e:	2b00      	cmp	r3, #0
     730:	d1f7      	bne.n	722 <strcmp+0x4>
     732:	461a      	mov	r2, r3
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
     734:	1a98      	subs	r0, r3, r2
     736:	4770      	bx	lr

00000738 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
     738:	b570      	push	{r4, r5, r6, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n)
     73a:	b182      	cbz	r2, 75e <memcmp+0x26>
		return 0;

	while ((--n > 0) && (*c1 == *c2)) {
     73c:	3a01      	subs	r2, #1
     73e:	460c      	mov	r4, r1
     740:	4603      	mov	r3, r0
     742:	d103      	bne.n	74c <memcmp+0x14>
		c1++;
		c2++;
	}

	return *c1 - *c2;
     744:	781a      	ldrb	r2, [r3, #0]
     746:	7820      	ldrb	r0, [r4, #0]
     748:	1a10      	subs	r0, r2, r0
     74a:	bd70      	pop	{r4, r5, r6, pc}
	while ((--n > 0) && (*c1 == *c2)) {
     74c:	781e      	ldrb	r6, [r3, #0]
     74e:	7825      	ldrb	r5, [r4, #0]
     750:	42ae      	cmp	r6, r5
     752:	f100 0001 	add.w	r0, r0, #1
     756:	f101 0101 	add.w	r1, r1, #1
     75a:	d0ef      	beq.n	73c <memcmp+0x4>
     75c:	e7f2      	b.n	744 <memcmp+0xc>
		return 0;
     75e:	4610      	mov	r0, r2
}
     760:	bd70      	pop	{r4, r5, r6, pc}

00000762 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (d - s) < n) {
     762:	1a43      	subs	r3, r0, r1
     764:	4293      	cmp	r3, r2
{
     766:	b510      	push	{r4, lr}
     768:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (d - s) < n) {
     76c:	d304      	bcc.n	778 <memmove+0x16>
     76e:	3901      	subs	r1, #1
     770:	4602      	mov	r2, r0
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
     772:	429a      	cmp	r2, r3
     774:	d108      	bne.n	788 <memmove+0x26>
			n--;
		}
	}

	return d;
}
     776:	bd10      	pop	{r4, pc}
     778:	440a      	add	r2, r1
			dest[n] = src[n];
     77a:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
     77e:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
     782:	428a      	cmp	r2, r1
     784:	d1f9      	bne.n	77a <memmove+0x18>
     786:	bd10      	pop	{r4, pc}
			*dest = *src;
     788:	f811 4f01 	ldrb.w	r4, [r1, #1]!
     78c:	f802 4b01 	strb.w	r4, [r2], #1
     790:	e7ef      	b.n	772 <memmove+0x10>

00000792 <memcpy>:
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
     792:	ea81 0300 	eor.w	r3, r1, r0
     796:	f013 0f03 	tst.w	r3, #3
{
     79a:	b570      	push	{r4, r5, r6, lr}
     79c:	4603      	mov	r3, r0
	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
     79e:	d00b      	beq.n	7b8 <memcpy+0x26>
     7a0:	3b01      	subs	r3, #1
     7a2:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
     7a4:	4291      	cmp	r1, r2
     7a6:	d11b      	bne.n	7e0 <memcpy+0x4e>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
     7a8:	bd70      	pop	{r4, r5, r6, pc}
			if (n == 0) {
     7aa:	2a00      	cmp	r2, #0
     7ac:	d0fc      	beq.n	7a8 <memcpy+0x16>
			*(d_byte++) = *(s_byte++);
     7ae:	f811 4b01 	ldrb.w	r4, [r1], #1
     7b2:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
     7b6:	3a01      	subs	r2, #1
		while (((unsigned int)d_byte) & 0x3) {
     7b8:	079c      	lsls	r4, r3, #30
     7ba:	d1f6      	bne.n	7aa <memcpy+0x18>
     7bc:	1f1e      	subs	r6, r3, #4
     7be:	460d      	mov	r5, r1
     7c0:	1b54      	subs	r4, r2, r5
     7c2:	440c      	add	r4, r1
		while (n >= sizeof(unsigned int)) {
     7c4:	2c03      	cmp	r4, #3
     7c6:	d806      	bhi.n	7d6 <memcpy+0x44>
     7c8:	f022 0403 	bic.w	r4, r2, #3
     7cc:	4421      	add	r1, r4
     7ce:	4423      	add	r3, r4
     7d0:	f002 0203 	and.w	r2, r2, #3
     7d4:	e7e4      	b.n	7a0 <memcpy+0xe>
			*(d_word++) = *(s_word++);
     7d6:	f855 4b04 	ldr.w	r4, [r5], #4
     7da:	f846 4f04 	str.w	r4, [r6, #4]!
     7de:	e7ef      	b.n	7c0 <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
     7e0:	f811 4b01 	ldrb.w	r4, [r1], #1
     7e4:	f803 4f01 	strb.w	r4, [r3, #1]!
     7e8:	e7dc      	b.n	7a4 <memcpy+0x12>

000007ea <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
     7ea:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
     7ec:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
     7ee:	4603      	mov	r3, r0

	while (((unsigned int)d_byte) & 0x3) {
     7f0:	079c      	lsls	r4, r3, #30
     7f2:	d111      	bne.n	818 <CONFIG_ISR_STACK_SIZE+0x18>
	/* do word-sized initialization as long as possible */

	unsigned int *d_word = (unsigned int *)d_byte;
	unsigned int c_word = (unsigned int)(unsigned char)c;

	c_word |= c_word << 8;
     7f4:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
     7f8:	ea44 4404 	orr.w	r4, r4, r4, lsl #16

	while (n >= sizeof(unsigned int)) {
     7fc:	461e      	mov	r6, r3
     7fe:	1b95      	subs	r5, r2, r6
     800:	441d      	add	r5, r3
     802:	2d03      	cmp	r5, #3
     804:	d80e      	bhi.n	824 <CONFIG_ISR_STACK_SIZE+0x24>
     806:	f022 0403 	bic.w	r4, r2, #3
     80a:	4423      	add	r3, r4
     80c:	f002 0203 	and.w	r2, r2, #3
     810:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
     812:	4293      	cmp	r3, r2
     814:	d109      	bne.n	82a <CONFIG_ISR_STACK_SIZE+0x2a>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
     816:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
     818:	2a00      	cmp	r2, #0
     81a:	d0fc      	beq.n	816 <CONFIG_ISR_STACK_SIZE+0x16>
		*(d_byte++) = c_byte;
     81c:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
     820:	3a01      	subs	r2, #1
     822:	e7e5      	b.n	7f0 <memset+0x6>
		*(d_word++) = c_word;
     824:	f846 4b04 	str.w	r4, [r6], #4
     828:	e7e9      	b.n	7fe <memset+0x14>
		*(d_byte++) = c_byte;
     82a:	f803 1b01 	strb.w	r1, [r3], #1
     82e:	e7f0      	b.n	812 <CONFIG_ISR_STACK_SIZE+0x12>

00000830 <_to_x>:
/* Writes the specified number into the buffer in the given base,
 * using the digit characters 0-9a-z (i.e. base>36 will start writing
 * odd bytes), padding with leading zeros up to the minimum length.
 */
static int _to_x(char *buf, uint32_t n, int base, int minlen)
{
     830:	b570      	push	{r4, r5, r6, lr}
     832:	4604      	mov	r4, r0
	char *buf0 = buf;

	do {
		int d = n % base;
     834:	fbb1 f6f2 	udiv	r6, r1, r2
     838:	fb02 1116 	mls	r1, r2, r6, r1

		n /= base;
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
     83c:	b2cd      	uxtb	r5, r1
     83e:	2909      	cmp	r1, #9
     840:	bfcc      	ite	gt
     842:	2127      	movgt	r1, #39	; 0x27
     844:	2100      	movle	r1, #0
     846:	3530      	adds	r5, #48	; 0x30
     848:	4429      	add	r1, r5
     84a:	f804 1b01 	strb.w	r1, [r4], #1
	} while (n);
     84e:	4631      	mov	r1, r6
     850:	2e00      	cmp	r6, #0
     852:	d1ef      	bne.n	834 <_to_x+0x4>
		*end++ = '0';
     854:	2130      	movs	r1, #48	; 0x30
     856:	1a22      	subs	r2, r4, r0
	while (end - start < minlen) {
     858:	4293      	cmp	r3, r2
     85a:	dc07      	bgt.n	86c <_to_x+0x3c>
	*end = 0;
     85c:	4623      	mov	r3, r4
     85e:	2100      	movs	r1, #0
     860:	f803 1901 	strb.w	r1, [r3], #-1
	for (end--; end > start; end--, start++) {
     864:	4283      	cmp	r3, r0
     866:	d804      	bhi.n	872 <_to_x+0x42>
	return _reverse_and_pad(buf0, buf, minlen);
}
     868:	4610      	mov	r0, r2
     86a:	bd70      	pop	{r4, r5, r6, pc}
		*end++ = '0';
     86c:	f804 1b01 	strb.w	r1, [r4], #1
     870:	e7f1      	b.n	856 <_to_x+0x26>
		char tmp = *end;
     872:	7819      	ldrb	r1, [r3, #0]
		*end = *start;
     874:	7804      	ldrb	r4, [r0, #0]
     876:	f803 4901 	strb.w	r4, [r3], #-1
		*start = tmp;
     87a:	f800 1b01 	strb.w	r1, [r0], #1
     87e:	e7f1      	b.n	864 <_to_x+0x34>

00000880 <_rlrshift>:
	return (buf + _to_udec(buf, (uint32_t) value, precision)) - start;
}

static	void _rlrshift(uint64_t *v)
{
	*v = (*v & 1) + (*v >> 1);
     880:	e9d0 2300 	ldrd	r2, r3, [r0]
{
     884:	b530      	push	{r4, r5, lr}
	*v = (*v & 1) + (*v >> 1);
     886:	f002 0401 	and.w	r4, r2, #1
     88a:	085b      	lsrs	r3, r3, #1
     88c:	ea4f 0232 	mov.w	r2, r2, rrx
     890:	1912      	adds	r2, r2, r4
     892:	f04f 0500 	mov.w	r5, #0
     896:	416b      	adcs	r3, r5
     898:	e9c0 2300 	strd	r2, r3, [r0]
     89c:	bd30      	pop	{r4, r5, pc}
	...

000008a0 <_ldiv5>:
 * six.  This was tested exhaustively through the first ~10B values in
 * the input space, and for ~2e12 (4 hours runtime) random inputs
 * taken from the full 64 bit space.
 */
static void _ldiv5(uint64_t *v)
{
     8a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t i, hi;
	uint64_t rem = *v, quot = 0, q;
     8a4:	e9d0 4500 	ldrd	r4, r5, [r0]
	static const char shifts[] = { 32, 3, 0 };

	/* Usage in this file wants rounded behavior, not truncation.  So add
	 * two to get the threshold right.
	 */
	rem += 2;
     8a8:	3402      	adds	r4, #2
{
     8aa:	4680      	mov	r8, r0
	rem += 2;
     8ac:	f145 0500 	adc.w	r5, r5, #0
	uint64_t rem = *v, quot = 0, q;
     8b0:	f04f 0a00 	mov.w	sl, #0
     8b4:	f04f 0b00 	mov.w	fp, #0

	for (i = 0; i < 3; i++) {
     8b8:	2600      	movs	r6, #0
		hi = rem >> shifts[i];
		q = (uint64_t)(hi / 5) << shifts[i];
     8ba:	2705      	movs	r7, #5
		hi = rem >> shifts[i];
     8bc:	4b0f      	ldr	r3, [pc, #60]	; (8fc <_ldiv5+0x5c>)
     8be:	f816 9003 	ldrb.w	r9, [r6, r3]
     8c2:	4620      	mov	r0, r4
     8c4:	464a      	mov	r2, r9
     8c6:	4629      	mov	r1, r5
     8c8:	f7ff fcce 	bl	268 <__aeabi_llsr>
		q = (uint64_t)(hi / 5) << shifts[i];
     8cc:	464a      	mov	r2, r9
     8ce:	fbb0 f0f7 	udiv	r0, r0, r7
     8d2:	2100      	movs	r1, #0
     8d4:	f7ff fcd4 	bl	280 <__aeabi_llsl>
		rem -= q * 5;
     8d8:	fba0 2307 	umull	r2, r3, r0, r7
     8dc:	1aa4      	subs	r4, r4, r2
     8de:	fb07 3301 	mla	r3, r7, r1, r3
     8e2:	eb65 0503 	sbc.w	r5, r5, r3
	for (i = 0; i < 3; i++) {
     8e6:	3601      	adds	r6, #1
		quot += q;
     8e8:	eb1a 0a00 	adds.w	sl, sl, r0
     8ec:	eb4b 0b01 	adc.w	fp, fp, r1
	for (i = 0; i < 3; i++) {
     8f0:	2e03      	cmp	r6, #3
     8f2:	d1e3      	bne.n	8bc <_ldiv5+0x1c>
	}

	*v = quot;
     8f4:	e9c8 ab00 	strd	sl, fp, [r8]
     8f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     8fc:	000229b2 	.word	0x000229b2

00000900 <_get_digit>:

static	char _get_digit(uint64_t *fr, int *digit_count)
{
	int		rval;

	if (*digit_count > 0) {
     900:	680b      	ldr	r3, [r1, #0]
     902:	2b00      	cmp	r3, #0
{
     904:	b510      	push	{r4, lr}
	if (*digit_count > 0) {
     906:	dd10      	ble.n	92a <_get_digit+0x2a>
		*digit_count -= 1;
     908:	3b01      	subs	r3, #1
		*fr = *fr * 10;
     90a:	6802      	ldr	r2, [r0, #0]
		*digit_count -= 1;
     90c:	600b      	str	r3, [r1, #0]
		*fr = *fr * 10;
     90e:	6844      	ldr	r4, [r0, #4]
     910:	210a      	movs	r1, #10
     912:	fba2 2301 	umull	r2, r3, r2, r1
     916:	fb01 3304 	mla	r3, r1, r4, r3
		rval = ((*fr >> 60) & 0xF) + '0';
     91a:	0f19      	lsrs	r1, r3, #28
		*fr &= 0x0FFFFFFFFFFFFFFFull;
     91c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
     920:	e9c0 2300 	strd	r2, r3, [r0]
		rval = ((*fr >> 60) & 0xF) + '0';
     924:	3130      	adds	r1, #48	; 0x30
	} else
		rval = '0';
	return (char) (rval);
}
     926:	b2c8      	uxtb	r0, r1
     928:	bd10      	pop	{r4, pc}
		rval = '0';
     92a:	2130      	movs	r1, #48	; 0x30
     92c:	e7fb      	b.n	926 <_get_digit+0x26>
	...

00000930 <_prf>:
	*sptr = p;
	return i;
}

int _prf(int (*func)(), void *dest, char *format, va_list vargs)
{
     930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     934:	b0cf      	sub	sp, #316	; 0x13c
     936:	461f      	mov	r7, r3
	int32_t			*int32ptr_temp;
	int32_t			int32_temp;
	uint32_t			uint32_temp;
	uint64_t			double_temp;

	count = 0;
     938:	2300      	movs	r3, #0
{
     93a:	9009      	str	r0, [sp, #36]	; 0x24
     93c:	9112      	str	r1, [sp, #72]	; 0x48
	count = 0;
     93e:	9304      	str	r3, [sp, #16]

	while ((c = *format++)) {
     940:	7810      	ldrb	r0, [r2, #0]
     942:	1c53      	adds	r3, r2, #1
     944:	9301      	str	r3, [sp, #4]
     946:	2800      	cmp	r0, #0
     948:	d046      	beq.n	9d8 <_prf+0xa8>
		if (c != '%') {
     94a:	2825      	cmp	r0, #37	; 0x25
     94c:	d13c      	bne.n	9c8 <_prf+0x98>
     94e:	f04f 0900 	mov.w	r9, #0
     952:	2320      	movs	r3, #32
     954:	9300      	str	r3, [sp, #0]
     956:	f8cd 9014 	str.w	r9, [sp, #20]
     95a:	f8cd 9020 	str.w	r9, [sp, #32]
     95e:	464e      	mov	r6, r9
		} else {
			fminus = fplus = fspace = falt = false;
			pad = ' ';		/* Default pad character    */
			precision = -1;	/* No precision specified   */

			while (strchr("-+ #0", (c = *format++)) != NULL) {
     960:	9b01      	ldr	r3, [sp, #4]
     962:	489a      	ldr	r0, [pc, #616]	; (bcc <_prf+0x29c>)
     964:	f813 4b01 	ldrb.w	r4, [r3], #1
		if (c != '%') {
     968:	9d01      	ldr	r5, [sp, #4]
			while (strchr("-+ #0", (c = *format++)) != NULL) {
     96a:	9301      	str	r3, [sp, #4]
     96c:	4621      	mov	r1, r4
     96e:	f7ff feb2 	bl	6d6 <strchr>
     972:	2800      	cmp	r0, #0
     974:	d13b      	bne.n	9ee <_prf+0xbe>
				case '\0':
					return count;
				}
			}

			if (c == '*') {
     976:	2c2a      	cmp	r4, #42	; 0x2a
     978:	d154      	bne.n	a24 <_prf+0xf4>
				/* Is the width a parameter? */
				width = (int32_t) va_arg(vargs, int32_t);
     97a:	683a      	ldr	r2, [r7, #0]
     97c:	9202      	str	r2, [sp, #8]
				if (width < 0) {
     97e:	2a00      	cmp	r2, #0
					fminus = true;
					width = -width;
     980:	bfbf      	itttt	lt
     982:	4252      	neglt	r2, r2
     984:	9202      	strlt	r2, [sp, #8]
					fminus = true;
     986:	2201      	movlt	r2, #1
     988:	9208      	strlt	r2, [sp, #32]
				}
				c = *format++;
     98a:	9a01      	ldr	r2, [sp, #4]
				width = (int32_t) va_arg(vargs, int32_t);
     98c:	1d3b      	adds	r3, r7, #4
				c = *format++;
     98e:	7814      	ldrb	r4, [r2, #0]
				width = (int32_t) va_arg(vargs, int32_t);
     990:	461f      	mov	r7, r3
				c = *format++;
     992:	1cab      	adds	r3, r5, #2
			} else if (!isdigit(c))
				width = 0;
			else {
				width = _atoi(&format);	/* Find width */
				c = *format++;
     994:	9301      	str	r3, [sp, #4]
			 * not be expressed as a positive number using 32-bit
			 * two's complement.  To cover that case, cast it to
			 * an unsigned before comparing it against MAXFLD.
			 */
			if ((unsigned) width > MAXFLD) {
				width = MAXFLD;
     996:	9b02      	ldr	r3, [sp, #8]
     998:	2bc9      	cmp	r3, #201	; 0xc9
     99a:	bf28      	it	cs
     99c:	23c8      	movcs	r3, #200	; 0xc8
     99e:	9302      	str	r3, [sp, #8]
			}

			if (c == '.') {
     9a0:	2c2e      	cmp	r4, #46	; 0x2e
     9a2:	d17f      	bne.n	aa4 <_prf+0x174>
				c = *format++;
				if (c == '*') {
     9a4:	9b01      	ldr	r3, [sp, #4]
     9a6:	781b      	ldrb	r3, [r3, #0]
     9a8:	2b2a      	cmp	r3, #42	; 0x2a
     9aa:	d051      	beq.n	a50 <_prf+0x120>
     9ac:	9901      	ldr	r1, [sp, #4]
     9ae:	2500      	movs	r5, #0
		i = 10 * i + *p++ - '0';
     9b0:	240a      	movs	r4, #10
     9b2:	460a      	mov	r2, r1
	while (isdigit(((int) *p)))
     9b4:	f811 3b01 	ldrb.w	r3, [r1], #1
	return (((unsigned)(a)-'0') < 10);
     9b8:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
     9bc:	2809      	cmp	r0, #9
     9be:	d84b      	bhi.n	a58 <_prf+0x128>
		i = 10 * i + *p++ - '0';
     9c0:	fb04 3505 	mla	r5, r4, r5, r3
     9c4:	3d30      	subs	r5, #48	; 0x30
     9c6:	e7f4      	b.n	9b2 <_prf+0x82>
			if ((*func) (c, dest) == EOF) {
     9c8:	9912      	ldr	r1, [sp, #72]	; 0x48
     9ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
     9cc:	4798      	blx	r3
     9ce:	3001      	adds	r0, #1
     9d0:	d106      	bne.n	9e0 <_prf+0xb0>
				return EOF;
     9d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     9d6:	9304      	str	r3, [sp, #16]
				}
			}
		}
	}
	return count;
}
     9d8:	9804      	ldr	r0, [sp, #16]
     9da:	b04f      	add	sp, #316	; 0x13c
     9dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			count++;
     9e0:	9c04      	ldr	r4, [sp, #16]
     9e2:	9703      	str	r7, [sp, #12]
     9e4:	3401      	adds	r4, #1
			if (c >= MAXFLD + 1)
     9e6:	9f03      	ldr	r7, [sp, #12]
     9e8:	9a01      	ldr	r2, [sp, #4]
     9ea:	9404      	str	r4, [sp, #16]
     9ec:	e7a8      	b.n	940 <_prf+0x10>
				switch (c) {
     9ee:	2c23      	cmp	r4, #35	; 0x23
     9f0:	d014      	beq.n	a1c <_prf+0xec>
     9f2:	d806      	bhi.n	a02 <_prf+0xd2>
     9f4:	2c00      	cmp	r4, #0
     9f6:	d0ef      	beq.n	9d8 <_prf+0xa8>
					fspace = true;
     9f8:	2c20      	cmp	r4, #32
     9fa:	bf08      	it	eq
     9fc:	f04f 0901 	moveq.w	r9, #1
     a00:	e7ae      	b.n	960 <_prf+0x30>
				switch (c) {
     a02:	2c2d      	cmp	r4, #45	; 0x2d
     a04:	d007      	beq.n	a16 <_prf+0xe6>
     a06:	2c30      	cmp	r4, #48	; 0x30
     a08:	d00a      	beq.n	a20 <_prf+0xf0>
					fplus = true;
     a0a:	2c2b      	cmp	r4, #43	; 0x2b
     a0c:	9b05      	ldr	r3, [sp, #20]
     a0e:	bf08      	it	eq
     a10:	2301      	moveq	r3, #1
     a12:	9305      	str	r3, [sp, #20]
     a14:	e7a4      	b.n	960 <_prf+0x30>
					fminus = true;
     a16:	2301      	movs	r3, #1
     a18:	9308      	str	r3, [sp, #32]
     a1a:	e7a1      	b.n	960 <_prf+0x30>
					falt = true;
     a1c:	2601      	movs	r6, #1
					break;
     a1e:	e79f      	b.n	960 <_prf+0x30>
					pad = '0';
     a20:	9400      	str	r4, [sp, #0]
					break;
     a22:	e79d      	b.n	960 <_prf+0x30>
     a24:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
			} else if (!isdigit(c))
     a28:	2b09      	cmp	r3, #9
				width = 0;
     a2a:	9002      	str	r0, [sp, #8]
			} else if (!isdigit(c))
     a2c:	d8b8      	bhi.n	9a0 <_prf+0x70>
		i = 10 * i + *p++ - '0';
     a2e:	210a      	movs	r1, #10
	while (isdigit(((int) *p)))
     a30:	f815 0b01 	ldrb.w	r0, [r5], #1
     a34:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
     a38:	2a09      	cmp	r2, #9
     a3a:	4604      	mov	r4, r0
     a3c:	d901      	bls.n	a42 <_prf+0x112>
				c = *format++;
     a3e:	462b      	mov	r3, r5
     a40:	e7a8      	b.n	994 <_prf+0x64>
		i = 10 * i + *p++ - '0';
     a42:	9b02      	ldr	r3, [sp, #8]
     a44:	fb01 0003 	mla	r0, r1, r3, r0
     a48:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
     a4c:	9302      	str	r3, [sp, #8]
     a4e:	e7ef      	b.n	a30 <_prf+0x100>
				c = *format++;
     a50:	9a01      	ldr	r2, [sp, #4]
					precision = (int32_t)
     a52:	683d      	ldr	r5, [r7, #0]
				c = *format++;
     a54:	3201      	adds	r2, #1
					precision = (int32_t)
     a56:	3704      	adds	r7, #4
					precision = -1;
     a58:	2dc9      	cmp	r5, #201	; 0xc9
				c = *format++;
     a5a:	f102 0301 	add.w	r3, r2, #1
     a5e:	7814      	ldrb	r4, [r2, #0]
     a60:	9301      	str	r3, [sp, #4]
					precision = -1;
     a62:	bfa8      	it	ge
     a64:	f04f 35ff 	movge.w	r5, #4294967295	; 0xffffffff
			if (strchr("hlLz", c) != NULL) {
     a68:	4621      	mov	r1, r4
     a6a:	4859      	ldr	r0, [pc, #356]	; (bd0 <_prf+0x2a0>)
     a6c:	f7ff fe33 	bl	6d6 <strchr>
     a70:	b118      	cbz	r0, a7a <_prf+0x14a>
				c = *format++;
     a72:	9b01      	ldr	r3, [sp, #4]
     a74:	781c      	ldrb	r4, [r3, #0]
     a76:	3301      	adds	r3, #1
     a78:	9301      	str	r3, [sp, #4]
			switch (c) {
     a7a:	2c67      	cmp	r4, #103	; 0x67
     a7c:	dc40      	bgt.n	b00 <_prf+0x1d0>
     a7e:	2c65      	cmp	r4, #101	; 0x65
     a80:	f280 80a8 	bge.w	bd4 <_prf+0x2a4>
     a84:	2c47      	cmp	r4, #71	; 0x47
     a86:	f000 80a5 	beq.w	bd4 <_prf+0x2a4>
     a8a:	dc0e      	bgt.n	aaa <_prf+0x17a>
     a8c:	2c25      	cmp	r4, #37	; 0x25
     a8e:	f000 82d1 	beq.w	1034 <_prf+0x704>
     a92:	2c45      	cmp	r4, #69	; 0x45
     a94:	f000 809e 	beq.w	bd4 <_prf+0x2a4>
     a98:	2c00      	cmp	r4, #0
     a9a:	d09d      	beq.n	9d8 <_prf+0xa8>
			if (c >= MAXFLD + 1)
     a9c:	2cc8      	cmp	r4, #200	; 0xc8
     a9e:	f340 82d3 	ble.w	1048 <_prf+0x718>
     aa2:	e796      	b.n	9d2 <_prf+0xa2>
			precision = -1;	/* No precision specified   */
     aa4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
     aa8:	e7de      	b.n	a68 <_prf+0x138>
			switch (c) {
     aaa:	2c63      	cmp	r4, #99	; 0x63
     aac:	d06e      	beq.n	b8c <_prf+0x25c>
     aae:	dc32      	bgt.n	b16 <_prf+0x1e6>
     ab0:	2c58      	cmp	r4, #88	; 0x58
     ab2:	d1f3      	bne.n	a9c <_prf+0x16c>
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
     ab4:	1d3b      	adds	r3, r7, #4
     ab6:	9303      	str	r3, [sp, #12]
     ab8:	6839      	ldr	r1, [r7, #0]
	if (alt_form) {
     aba:	2e00      	cmp	r6, #0
     abc:	f000 82b0 	beq.w	1020 <_prf+0x6f0>
		*buf++ = '0';
     ac0:	2330      	movs	r3, #48	; 0x30
     ac2:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
		*buf++ = 'x';
     ac6:	2378      	movs	r3, #120	; 0x78
     ac8:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
     acc:	f10d 076e 	add.w	r7, sp, #110	; 0x6e
	len = _to_x(buf, value, 16, precision);
     ad0:	462b      	mov	r3, r5
     ad2:	2210      	movs	r2, #16
     ad4:	4638      	mov	r0, r7
     ad6:	f7ff feab 	bl	830 <_to_x>
	if (prefix == 'X') {
     ada:	2c58      	cmp	r4, #88	; 0x58
     adc:	d104      	bne.n	ae8 <_prf+0x1b8>
     ade:	aa1b      	add	r2, sp, #108	; 0x6c
	for (/**/; *buf; buf++) {
     ae0:	7813      	ldrb	r3, [r2, #0]
     ae2:	2b00      	cmp	r3, #0
     ae4:	f040 829e 	bne.w	1024 <_prf+0x6f4>
	return len + (buf - buf0);
     ae8:	f10d 0a6c 	add.w	sl, sp, #108	; 0x6c
					prefix = 2;
     aec:	2e00      	cmp	r6, #0
	return len + (buf - buf0);
     aee:	eba7 0a0a 	sub.w	sl, r7, sl
     af2:	4450      	add	r0, sl
					prefix = 2;
     af4:	bf0c      	ite	eq
     af6:	f04f 0900 	moveq.w	r9, #0
     afa:	f04f 0902 	movne.w	r9, #2
     afe:	e029      	b.n	b54 <_prf+0x224>
			switch (c) {
     b00:	2c70      	cmp	r4, #112	; 0x70
     b02:	f000 8265 	beq.w	fd0 <_prf+0x6a0>
     b06:	dc27      	bgt.n	b58 <_prf+0x228>
     b08:	2c6e      	cmp	r4, #110	; 0x6e
     b0a:	f000 8221 	beq.w	f50 <_prf+0x620>
     b0e:	f300 8226 	bgt.w	f5e <_prf+0x62e>
     b12:	2c69      	cmp	r4, #105	; 0x69
     b14:	d1c2      	bne.n	a9c <_prf+0x16c>
				int32_temp = (int32_t) va_arg(vargs, int32_t);
     b16:	683c      	ldr	r4, [r7, #0]
     b18:	1d3b      	adds	r3, r7, #4
	if (value < 0) {
     b1a:	2c00      	cmp	r4, #0
				int32_temp = (int32_t) va_arg(vargs, int32_t);
     b1c:	9303      	str	r3, [sp, #12]
	if (value < 0) {
     b1e:	da41      	bge.n	ba4 <_prf+0x274>
		*buf++ = '-';
     b20:	232d      	movs	r3, #45	; 0x2d
		if (value != 0x80000000)
     b22:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
		*buf++ = '-';
     b26:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
		if (value != 0x80000000)
     b2a:	d040      	beq.n	bae <_prf+0x27e>
			value = -value;
     b2c:	4261      	negs	r1, r4
		*buf++ = ' ';
     b2e:	f10d 0a6d 	add.w	sl, sp, #109	; 0x6d
	return _to_x(buf, value, 10, precision);
     b32:	462b      	mov	r3, r5
     b34:	4650      	mov	r0, sl
     b36:	220a      	movs	r2, #10
     b38:	f7ff fe7a 	bl	830 <_to_x>
				if (fplus || fspace || (int32_temp < 0))
     b3c:	9b05      	ldr	r3, [sp, #20]
	return (buf + _to_udec(buf, (uint32_t) value, precision)) - start;
     b3e:	4482      	add	sl, r0
     b40:	a81b      	add	r0, sp, #108	; 0x6c
     b42:	ebaa 0000 	sub.w	r0, sl, r0
				if (fplus || fspace || (int32_temp < 0))
     b46:	2b00      	cmp	r3, #0
     b48:	d13c      	bne.n	bc4 <_prf+0x294>
     b4a:	f1b9 0f00 	cmp.w	r9, #0
     b4e:	d101      	bne.n	b54 <_prf+0x224>
     b50:	ea4f 79d4 	mov.w	r9, r4, lsr #31
					pad = ' ';
     b54:	3501      	adds	r5, #1
     b56:	e233      	b.n	fc0 <_prf+0x690>
			switch (c) {
     b58:	2c75      	cmp	r4, #117	; 0x75
     b5a:	f000 8258 	beq.w	100e <_prf+0x6de>
     b5e:	2c78      	cmp	r4, #120	; 0x78
     b60:	d0a8      	beq.n	ab4 <_prf+0x184>
     b62:	2c73      	cmp	r4, #115	; 0x73
     b64:	d19a      	bne.n	a9c <_prf+0x16c>
				cptr_temp = (char *) va_arg(vargs, char *);
     b66:	1d3b      	adds	r3, r7, #4
     b68:	6839      	ldr	r1, [r7, #0]
     b6a:	9303      	str	r3, [sp, #12]
				for (c = 0; c < MAXFLD; c++) {
     b6c:	2600      	movs	r6, #0
					if (cptr_temp[c] == '\0') {
     b6e:	5d8b      	ldrb	r3, [r1, r6]
     b70:	2b00      	cmp	r3, #0
     b72:	f040 8241 	bne.w	ff8 <_prf+0x6c8>
				if ((precision >= 0) && (precision < c))
     b76:	2d00      	cmp	r5, #0
     b78:	f280 8245 	bge.w	1006 <_prf+0x6d6>
				if (c > 0) {
     b7c:	2e00      	cmp	r6, #0
     b7e:	f000 81ec 	beq.w	f5a <_prf+0x62a>
					memcpy(buf, cptr_temp, (size_t) c);
     b82:	4632      	mov	r2, r6
     b84:	a81b      	add	r0, sp, #108	; 0x6c
     b86:	f7ff fe04 	bl	792 <memcpy>
     b8a:	e008      	b.n	b9e <_prf+0x26e>
				buf[0] = (char) ((int32_t) va_arg(vargs, int32_t));
     b8c:	1d3b      	adds	r3, r7, #4
     b8e:	9303      	str	r3, [sp, #12]
     b90:	683b      	ldr	r3, [r7, #0]
     b92:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
				buf[1] = '\0';
     b96:	2300      	movs	r3, #0
     b98:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
				c = 1;
     b9c:	2601      	movs	r6, #1
					prefix = 2;
     b9e:	f04f 0900 	mov.w	r9, #0
     ba2:	e1ec      	b.n	f7e <_prf+0x64e>
	} else if (fplus)
     ba4:	9b05      	ldr	r3, [sp, #20]
     ba6:	b123      	cbz	r3, bb2 <_prf+0x282>
		*buf++ = '+';
     ba8:	232b      	movs	r3, #43	; 0x2b
		*buf++ = ' ';
     baa:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
     bae:	4621      	mov	r1, r4
     bb0:	e7bd      	b.n	b2e <_prf+0x1fe>
	else if (fspace)
     bb2:	f1b9 0f00 	cmp.w	r9, #0
     bb6:	d001      	beq.n	bbc <_prf+0x28c>
		*buf++ = ' ';
     bb8:	2320      	movs	r3, #32
     bba:	e7f6      	b.n	baa <_prf+0x27a>
	else if (fspace)
     bbc:	4621      	mov	r1, r4
     bbe:	f10d 0a6c 	add.w	sl, sp, #108	; 0x6c
     bc2:	e7b6      	b.n	b32 <_prf+0x202>
					prefix = 1;
     bc4:	f8dd 9014 	ldr.w	r9, [sp, #20]
     bc8:	e7c4      	b.n	b54 <_prf+0x224>
     bca:	bf00      	nop
     bcc:	000229a7 	.word	0x000229a7
     bd0:	000229ad 	.word	0x000229ad
				u.d = (double) va_arg(vargs, double);
     bd4:	3707      	adds	r7, #7
     bd6:	f027 0707 	bic.w	r7, r7, #7
				double_temp = u.i;
     bda:	e897 0003 	ldmia.w	r7, {r0, r1}
				u.d = (double) va_arg(vargs, double);
     bde:	f107 0308 	add.w	r3, r7, #8
     be2:	9303      	str	r3, [sp, #12]
	fract = (double_temp << 11) & ~HIGHBIT64;
     be4:	02cb      	lsls	r3, r1, #11
     be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     bea:	9307      	str	r3, [sp, #28]
     bec:	02c3      	lsls	r3, r0, #11
     bee:	9306      	str	r3, [sp, #24]
     bf0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
	exp = double_temp >> 52 & 0x7ff;
     bf4:	f3c1 5a0a 	ubfx	sl, r1, #20, #11
	sign = !!(double_temp & HIGHBIT64);
     bf8:	4688      	mov	r8, r1
	if (exp == 0x7ff) {
     bfa:	f240 71ff 	movw	r1, #2047	; 0x7ff
	fract = (double_temp << 11) & ~HIGHBIT64;
     bfe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
	if (exp == 0x7ff) {
     c02:	458a      	cmp	sl, r1
	fract = (double_temp << 11) & ~HIGHBIT64;
     c04:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
	sign = !!(double_temp & HIGHBIT64);
     c08:	4607      	mov	r7, r0
	if (exp == 0x7ff) {
     c0a:	d139      	bne.n	c80 <_prf+0x350>
		if (!fract) {
     c0c:	4313      	orrs	r3, r2
     c0e:	d12c      	bne.n	c6a <_prf+0x33a>
			*buf++ = sign ? '-' : '+';
     c10:	2800      	cmp	r0, #0
     c12:	f178 0300 	sbcs.w	r3, r8, #0
     c16:	bfb4      	ite	lt
     c18:	232d      	movlt	r3, #45	; 0x2d
     c1a:	232b      	movge	r3, #43	; 0x2b
     c1c:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
			*buf++ = 'I';
     c20:	2349      	movs	r3, #73	; 0x49
     c22:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
			*buf++ = 'N';
     c26:	234e      	movs	r3, #78	; 0x4e
     c28:	f88d 306e 	strb.w	r3, [sp, #110]	; 0x6e
			*buf++ = 'F';
     c2c:	2346      	movs	r3, #70	; 0x46
     c2e:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
     c32:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
	*buf = 0;
     c36:	2300      	movs	r3, #0
     c38:	f88a 3000 	strb.w	r3, [sl]
				if (fplus || fspace || (buf[0] == '-'))
     c3c:	9b05      	ldr	r3, [sp, #20]
	return buf - start;
     c3e:	a81b      	add	r0, sp, #108	; 0x6c
     c40:	ebaa 0000 	sub.w	r0, sl, r0
				if (fplus || fspace || (buf[0] == '-'))
     c44:	2b00      	cmp	r3, #0
     c46:	f040 8224 	bne.w	1092 <_prf+0x762>
     c4a:	f1b9 0f00 	cmp.w	r9, #0
     c4e:	d107      	bne.n	c60 <_prf+0x330>
     c50:	f89d 906c 	ldrb.w	r9, [sp, #108]	; 0x6c
     c54:	f1a9 032d 	sub.w	r3, r9, #45	; 0x2d
     c58:	f1d3 0900 	rsbs	r9, r3, #0
     c5c:	eb49 0903 	adc.w	r9, r9, r3
			if (c >= MAXFLD + 1)
     c60:	28c8      	cmp	r0, #200	; 0xc8
     c62:	f73f aeb6 	bgt.w	9d2 <_prf+0xa2>
     c66:	4606      	mov	r6, r0
     c68:	e189      	b.n	f7e <_prf+0x64e>
			*buf++ = 'N';
     c6a:	234e      	movs	r3, #78	; 0x4e
			*buf++ = 'a';
     c6c:	2261      	movs	r2, #97	; 0x61
			*buf++ = 'N';
     c6e:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
			*buf++ = 'a';
     c72:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
			*buf++ = 'N';
     c76:	f88d 306e 	strb.w	r3, [sp, #110]	; 0x6e
     c7a:	f10d 0a6f 	add.w	sl, sp, #111	; 0x6f
     c7e:	e7da      	b.n	c36 <_prf+0x306>
	if ((exp | fract) != 0) {
     c80:	ea42 000a 	orr.w	r0, r2, sl
     c84:	ea43 71ea 	orr.w	r1, r3, sl, asr #31
     c88:	4301      	orrs	r1, r0
     c8a:	d036      	beq.n	cfa <_prf+0x3ca>
		fract |= HIGHBIT64;
     c8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
	if (decexp && sign) {
     c90:	2f00      	cmp	r7, #0
		fract |= HIGHBIT64;
     c92:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
	if (decexp && sign) {
     c96:	f178 0300 	sbcs.w	r3, r8, #0
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
     c9a:	f2aa 3afe 	subw	sl, sl, #1022	; 0x3fe
	if (decexp && sign) {
     c9e:	da2e      	bge.n	cfe <_prf+0x3ce>
		*buf++ = '-';
     ca0:	232d      	movs	r3, #45	; 0x2d
		*buf++ = ' ';
     ca2:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
     ca6:	f10d 086d 	add.w	r8, sp, #109	; 0x6d
	decexp = 0;
     caa:	2700      	movs	r7, #0
	while (exp <= -3) {
     cac:	f11a 0f02 	cmn.w	sl, #2
     cb0:	db36      	blt.n	d20 <_prf+0x3f0>
	while (exp > 0) {
     cb2:	f1ba 0f00 	cmp.w	sl, #0
     cb6:	dc66      	bgt.n	d86 <_prf+0x456>
		_rlrshift(&fract);
     cb8:	a816      	add	r0, sp, #88	; 0x58
		exp++;
     cba:	f10a 0a01 	add.w	sl, sl, #1
		_rlrshift(&fract);
     cbe:	f7ff fddf 	bl	880 <_rlrshift>
	while (exp < (0 + 4)) {
     cc2:	f1ba 0f04 	cmp.w	sl, #4
     cc6:	d1f7      	bne.n	cb8 <_prf+0x388>
		precision = 6;		/* Default precision if none given */
     cc8:	2d00      	cmp	r5, #0
	if ((c == 'g') || (c == 'G')) {
     cca:	f024 0320 	bic.w	r3, r4, #32
		precision = 6;		/* Default precision if none given */
     cce:	bfb8      	it	lt
     cd0:	2506      	movlt	r5, #6
	if ((c == 'g') || (c == 'G')) {
     cd2:	2b47      	cmp	r3, #71	; 0x47
     cd4:	d17e      	bne.n	dd4 <_prf+0x4a4>
		if (!falt && (precision > 0))
     cd6:	2e00      	cmp	r6, #0
     cd8:	d17a      	bne.n	dd0 <_prf+0x4a0>
     cda:	1c2b      	adds	r3, r5, #0
     cdc:	bf18      	it	ne
     cde:	2301      	movne	r3, #1
		if ((decexp < (-4 + 1)) || (decexp > (precision + 1))) {
     ce0:	1cfa      	adds	r2, r7, #3
     ce2:	469b      	mov	fp, r3
     ce4:	db02      	blt.n	cec <_prf+0x3bc>
     ce6:	1c6b      	adds	r3, r5, #1
     ce8:	429f      	cmp	r7, r3
     cea:	dd77      	ble.n	ddc <_prf+0x4ac>
				c = 'E';
     cec:	2c67      	cmp	r4, #103	; 0x67
     cee:	bf0c      	ite	eq
     cf0:	2465      	moveq	r4, #101	; 0x65
     cf2:	2445      	movne	r4, #69	; 0x45
		exp = precision + 1;
     cf4:	f105 0a01 	add.w	sl, r5, #1
     cf8:	e075      	b.n	de6 <_prf+0x4b6>
	if ((exp | fract) != 0) {
     cfa:	f04f 0a00 	mov.w	sl, #0
	} else if (fplus) {
     cfe:	9b05      	ldr	r3, [sp, #20]
     d00:	b10b      	cbz	r3, d06 <_prf+0x3d6>
		*buf++ = '+';
     d02:	232b      	movs	r3, #43	; 0x2b
     d04:	e7cd      	b.n	ca2 <_prf+0x372>
	} else if (fspace) {
     d06:	f1b9 0f00 	cmp.w	r9, #0
     d0a:	d001      	beq.n	d10 <_prf+0x3e0>
		*buf++ = ' ';
     d0c:	2320      	movs	r3, #32
     d0e:	e7c8      	b.n	ca2 <_prf+0x372>
	} else if (fspace) {
     d10:	f10d 086c 	add.w	r8, sp, #108	; 0x6c
     d14:	e7c9      	b.n	caa <_prf+0x37a>
			_rlrshift(&fract);
     d16:	a816      	add	r0, sp, #88	; 0x58
     d18:	f7ff fdb2 	bl	880 <_rlrshift>
			exp++;
     d1c:	f10a 0a01 	add.w	sl, sl, #1
		while ((fract >> 32) >= (MAXFP1 / 5)) {
     d20:	2200      	movs	r2, #0
     d22:	9b17      	ldr	r3, [sp, #92]	; 0x5c
     d24:	920b      	str	r2, [sp, #44]	; 0x2c
     d26:	930a      	str	r3, [sp, #40]	; 0x28
     d28:	e9dd bc0a 	ldrd	fp, ip, [sp, #40]	; 0x28
     d2c:	49b1      	ldr	r1, [pc, #708]	; (ff4 <_prf+0x6c4>)
     d2e:	9816      	ldr	r0, [sp, #88]	; 0x58
     d30:	2200      	movs	r2, #0
     d32:	4562      	cmp	r2, ip
     d34:	bf08      	it	eq
     d36:	4559      	cmpeq	r1, fp
     d38:	d3ed      	bcc.n	d16 <_prf+0x3e6>
		fract *= 5;
     d3a:	2205      	movs	r2, #5
     d3c:	fba0 0102 	umull	r0, r1, r0, r2
     d40:	fb02 1103 	mla	r1, r2, r3, r1
     d44:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
		exp++;
     d48:	f10a 0a01 	add.w	sl, sl, #1
		decexp--;
     d4c:	3f01      	subs	r7, #1
     d4e:	f04f 0e00 	mov.w	lr, #0
		while ((fract >> 32) <= (MAXFP1 / 2)) {
     d52:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
     d56:	f04f 0c00 	mov.w	ip, #0
     d5a:	2300      	movs	r3, #0
     d5c:	910c      	str	r1, [sp, #48]	; 0x30
     d5e:	930d      	str	r3, [sp, #52]	; 0x34
     d60:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
     d64:	459c      	cmp	ip, r3
     d66:	bf08      	it	eq
     d68:	4593      	cmpeq	fp, r2
     d6a:	d205      	bcs.n	d78 <_prf+0x448>
     d6c:	f1be 0f00 	cmp.w	lr, #0
     d70:	d09c      	beq.n	cac <_prf+0x37c>
     d72:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
     d76:	e799      	b.n	cac <_prf+0x37c>
			fract <<= 1;
     d78:	1800      	adds	r0, r0, r0
     d7a:	4149      	adcs	r1, r1
			exp--;
     d7c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
     d80:	f04f 0e01 	mov.w	lr, #1
     d84:	e7e9      	b.n	d5a <_prf+0x42a>
		_ldiv5(&fract);
     d86:	a816      	add	r0, sp, #88	; 0x58
     d88:	f7ff fd8a 	bl	8a0 <_ldiv5>
     d8c:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
		exp--;
     d90:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
		decexp++;
     d94:	3701      	adds	r7, #1
     d96:	f04f 0e00 	mov.w	lr, #0
		while ((fract >> 32) <= (MAXFP1 / 2)) {
     d9a:	2200      	movs	r2, #0
     d9c:	910e      	str	r1, [sp, #56]	; 0x38
     d9e:	920f      	str	r2, [sp, #60]	; 0x3c
     da0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
     da4:	f04f 0c00 	mov.w	ip, #0
     da8:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
     dac:	459c      	cmp	ip, r3
     dae:	bf08      	it	eq
     db0:	4593      	cmpeq	fp, r2
     db2:	d206      	bcs.n	dc2 <_prf+0x492>
     db4:	f1be 0f00 	cmp.w	lr, #0
     db8:	f43f af7b 	beq.w	cb2 <_prf+0x382>
     dbc:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
     dc0:	e777      	b.n	cb2 <_prf+0x382>
			fract <<= 1;
     dc2:	1800      	adds	r0, r0, r0
     dc4:	4149      	adcs	r1, r1
			exp--;
     dc6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
     dca:	f04f 0e01 	mov.w	lr, #1
     dce:	e7e4      	b.n	d9a <_prf+0x46a>
		if (!falt && (precision > 0))
     dd0:	2300      	movs	r3, #0
     dd2:	e785      	b.n	ce0 <_prf+0x3b0>
	prune_zero = false;		/* Assume trailing 0's allowed     */
     dd4:	2300      	movs	r3, #0
	if (c == 'f') {
     dd6:	2c66      	cmp	r4, #102	; 0x66
	prune_zero = false;		/* Assume trailing 0's allowed     */
     dd8:	469b      	mov	fp, r3
	if (c == 'f') {
     dda:	d18b      	bne.n	cf4 <_prf+0x3c4>
		exp = precision + decexp;
     ddc:	eb07 0a05 	add.w	sl, r7, r5
     de0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
     de4:	2466      	movs	r4, #102	; 0x66
	digit_count = 16;
     de6:	2310      	movs	r3, #16
     de8:	9315      	str	r3, [sp, #84]	; 0x54
	ltemp = 0x0800000000000000;
     dea:	2000      	movs	r0, #0
     dec:	ab4e      	add	r3, sp, #312	; 0x138
     dee:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
     df2:	e963 0136 	strd	r0, r1, [r3, #-216]!	; 0xd8
     df6:	f1ba 0f10 	cmp.w	sl, #16
     dfa:	bfa8      	it	ge
     dfc:	f04f 0a10 	movge.w	sl, #16
	while (exp--) {
     e00:	f1ba 0f00 	cmp.w	sl, #0
     e04:	d137      	bne.n	e76 <_prf+0x546>
	fract += ltemp;
     e06:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
     e0a:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
     e0e:	1812      	adds	r2, r2, r0
     e10:	414b      	adcs	r3, r1
	if ((fract >> 32) & 0xF0000000) {
     e12:	9310      	str	r3, [sp, #64]	; 0x40
     e14:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
	fract += ltemp;
     e18:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
	if ((fract >> 32) & 0xF0000000) {
     e1c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
     e20:	2300      	movs	r3, #0
     e22:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
     e26:	4313      	orrs	r3, r2
     e28:	d006      	beq.n	e38 <_prf+0x508>
		_ldiv5(&fract);
     e2a:	a816      	add	r0, sp, #88	; 0x58
     e2c:	f7ff fd38 	bl	8a0 <_ldiv5>
		_rlrshift(&fract);
     e30:	a816      	add	r0, sp, #88	; 0x58
     e32:	f7ff fd25 	bl	880 <_rlrshift>
		decexp++;
     e36:	3701      	adds	r7, #1
	if (c == 'f') {
     e38:	2c66      	cmp	r4, #102	; 0x66
     e3a:	d13d      	bne.n	eb8 <_prf+0x588>
		if (decexp > 0) {
     e3c:	2f00      	cmp	r7, #0
     e3e:	dd26      	ble.n	e8e <_prf+0x55e>
     e40:	4447      	add	r7, r8
     e42:	46c2      	mov	sl, r8
				*buf++ = _get_digit(&fract, &digit_count);
     e44:	a915      	add	r1, sp, #84	; 0x54
     e46:	a816      	add	r0, sp, #88	; 0x58
     e48:	f7ff fd5a 	bl	900 <_get_digit>
     e4c:	f80a 0b01 	strb.w	r0, [sl], #1
			while (decexp > 0) {
     e50:	4557      	cmp	r7, sl
     e52:	d1f7      	bne.n	e44 <_prf+0x514>
     e54:	2700      	movs	r7, #0
		if (falt || (precision > 0))
     e56:	b906      	cbnz	r6, e5a <_prf+0x52a>
     e58:	b155      	cbz	r5, e70 <_prf+0x540>
			*buf++ = '.';
     e5a:	4656      	mov	r6, sl
     e5c:	232e      	movs	r3, #46	; 0x2e
     e5e:	f806 3b02 	strb.w	r3, [r6], #2
     e62:	46a8      	mov	r8, r5
				*buf++ = '0';
     e64:	2330      	movs	r3, #48	; 0x30
		while (precision-- > 0) {
     e66:	f118 38ff 	adds.w	r8, r8, #4294967295	; 0xffffffff
     e6a:	d216      	bcs.n	e9a <_prf+0x56a>
     e6c:	3501      	adds	r5, #1
     e6e:	44aa      	add	sl, r5
	if (prune_zero) {
     e70:	465b      	mov	r3, fp
     e72:	bb8b      	cbnz	r3, ed8 <_prf+0x5a8>
     e74:	e6df      	b.n	c36 <_prf+0x306>
		_ldiv5(&ltemp);
     e76:	4618      	mov	r0, r3
     e78:	9313      	str	r3, [sp, #76]	; 0x4c
     e7a:	f7ff fd11 	bl	8a0 <_ldiv5>
		_rlrshift(&ltemp);
     e7e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
     e80:	4618      	mov	r0, r3
     e82:	f7ff fcfd 	bl	880 <_rlrshift>
     e86:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
     e8a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
     e8c:	e7b8      	b.n	e00 <_prf+0x4d0>
			*buf++ = '0';
     e8e:	2330      	movs	r3, #48	; 0x30
     e90:	f108 0a01 	add.w	sl, r8, #1
     e94:	f888 3000 	strb.w	r3, [r8]
     e98:	e7dd      	b.n	e56 <_prf+0x526>
			if (decexp < 0) {
     e9a:	b127      	cbz	r7, ea6 <_prf+0x576>
				*buf++ = '0';
     e9c:	f806 3c01 	strb.w	r3, [r6, #-1]
				decexp++;
     ea0:	3701      	adds	r7, #1
     ea2:	3601      	adds	r6, #1
     ea4:	e7df      	b.n	e66 <_prf+0x536>
				*buf++ = _get_digit(&fract, &digit_count);
     ea6:	a915      	add	r1, sp, #84	; 0x54
     ea8:	a816      	add	r0, sp, #88	; 0x58
     eaa:	9313      	str	r3, [sp, #76]	; 0x4c
     eac:	f7ff fd28 	bl	900 <_get_digit>
     eb0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
     eb2:	f806 0c01 	strb.w	r0, [r6, #-1]
     eb6:	e7f4      	b.n	ea2 <_prf+0x572>
		*buf = _get_digit(&fract, &digit_count);
     eb8:	a915      	add	r1, sp, #84	; 0x54
     eba:	a816      	add	r0, sp, #88	; 0x58
     ebc:	f7ff fd20 	bl	900 <_get_digit>
		if (*buf++ != '0')
     ec0:	2830      	cmp	r0, #48	; 0x30
		*buf = _get_digit(&fract, &digit_count);
     ec2:	f888 0000 	strb.w	r0, [r8]
			decexp--;
     ec6:	bf18      	it	ne
     ec8:	f107 37ff 	addne.w	r7, r7, #4294967295	; 0xffffffff
		if (falt || (precision > 0))
     ecc:	bb8e      	cbnz	r6, f32 <_prf+0x602>
     ece:	bb85      	cbnz	r5, f32 <_prf+0x602>
		if (*buf++ != '0')
     ed0:	f108 0a01 	add.w	sl, r8, #1
	if (prune_zero) {
     ed4:	465b      	mov	r3, fp
     ed6:	b13b      	cbz	r3, ee8 <_prf+0x5b8>
		while (*--buf == '0')
     ed8:	4653      	mov	r3, sl
     eda:	f81a 2d01 	ldrb.w	r2, [sl, #-1]!
     ede:	2a30      	cmp	r2, #48	; 0x30
     ee0:	d0fa      	beq.n	ed8 <_prf+0x5a8>
		if (*buf != '.')
     ee2:	2a2e      	cmp	r2, #46	; 0x2e
     ee4:	bf18      	it	ne
     ee6:	469a      	movne	sl, r3
	if ((c == 'e') || (c == 'E')) {
     ee8:	f024 0320 	bic.w	r3, r4, #32
     eec:	2b45      	cmp	r3, #69	; 0x45
     eee:	f47f aea2 	bne.w	c36 <_prf+0x306>
		*buf++ = (char) c;
     ef2:	4653      	mov	r3, sl
		if (decexp < 0) {
     ef4:	2f00      	cmp	r7, #0
		*buf++ = (char) c;
     ef6:	f803 4b02 	strb.w	r4, [r3], #2
		*buf++ = (char) ((decexp / 100) + '0');
     efa:	f04f 0164 	mov.w	r1, #100	; 0x64
			decexp = -decexp;
     efe:	bfba      	itte	lt
     f00:	427f      	neglt	r7, r7
			*buf++ = '-';
     f02:	222d      	movlt	r2, #45	; 0x2d
			*buf++ = '+';
     f04:	222b      	movge	r2, #43	; 0x2b
     f06:	f88a 2001 	strb.w	r2, [sl, #1]
		*buf++ = (char) ((decexp / 100) + '0');
     f0a:	fb97 f2f1 	sdiv	r2, r7, r1
     f0e:	f102 0030 	add.w	r0, r2, #48	; 0x30
		decexp %= 100;
     f12:	fb01 7712 	mls	r7, r1, r2, r7
		*buf++ = (char) ((decexp / 10) + '0');
     f16:	210a      	movs	r1, #10
		*buf++ = (char) ((decexp / 100) + '0');
     f18:	7018      	strb	r0, [r3, #0]
		*buf++ = (char) ((decexp / 10) + '0');
     f1a:	fb97 f2f1 	sdiv	r2, r7, r1
     f1e:	f102 0030 	add.w	r0, r2, #48	; 0x30
		decexp %= 10;
     f22:	fb01 7212 	mls	r2, r1, r2, r7
		*buf++ = (char) (decexp + '0');
     f26:	3230      	adds	r2, #48	; 0x30
		*buf++ = (char) ((decexp / 10) + '0');
     f28:	7058      	strb	r0, [r3, #1]
		*buf++ = (char) (decexp + '0');
     f2a:	f103 0a03 	add.w	sl, r3, #3
     f2e:	709a      	strb	r2, [r3, #2]
     f30:	e681      	b.n	c36 <_prf+0x306>
			*buf++ = '.';
     f32:	f108 0a02 	add.w	sl, r8, #2
     f36:	232e      	movs	r3, #46	; 0x2e
     f38:	f888 3001 	strb.w	r3, [r8, #1]
     f3c:	4455      	add	r5, sl
		while (precision-- > 0)
     f3e:	4555      	cmp	r5, sl
     f40:	d0c8      	beq.n	ed4 <_prf+0x5a4>
			*buf++ = _get_digit(&fract, &digit_count);
     f42:	a915      	add	r1, sp, #84	; 0x54
     f44:	a816      	add	r0, sp, #88	; 0x58
     f46:	f7ff fcdb 	bl	900 <_get_digit>
     f4a:	f80a 0b01 	strb.w	r0, [sl], #1
     f4e:	e7f6      	b.n	f3e <_prf+0x60e>
				int32ptr_temp = (int32_t *)va_arg(vargs, int32_t *);
     f50:	1d3b      	adds	r3, r7, #4
     f52:	9303      	str	r3, [sp, #12]
				*int32ptr_temp = count;
     f54:	683b      	ldr	r3, [r7, #0]
     f56:	9a04      	ldr	r2, [sp, #16]
     f58:	601a      	str	r2, [r3, #0]
							prefix = 0;
     f5a:	9c04      	ldr	r4, [sp, #16]
     f5c:	e543      	b.n	9e6 <_prf+0xb6>
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
     f5e:	1d3b      	adds	r3, r7, #4
     f60:	9303      	str	r3, [sp, #12]
     f62:	6839      	ldr	r1, [r7, #0]
	if (alt_form) {
     f64:	b1fe      	cbz	r6, fa6 <_prf+0x676>
		*buf++ = '0';
     f66:	2330      	movs	r3, #48	; 0x30
     f68:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
		if (!value) {
     f6c:	bb69      	cbnz	r1, fca <_prf+0x69a>
			prefix = 0;
     f6e:	3501      	adds	r5, #1
     f70:	9b00      	ldr	r3, [sp, #0]
			*buf++ = 0;
     f72:	f88d 106d 	strb.w	r1, [sp, #109]	; 0x6d
			prefix = 0;
     f76:	bf18      	it	ne
     f78:	2320      	movne	r3, #32
     f7a:	4689      	mov	r9, r1
     f7c:	9300      	str	r3, [sp, #0]
				if (c < width) {
     f7e:	9b02      	ldr	r3, [sp, #8]
     f80:	42b3      	cmp	r3, r6
     f82:	dc63      	bgt.n	104c <_prf+0x71c>
							prefix = 0;
     f84:	9c04      	ldr	r4, [sp, #16]
					if ((*func)(*cptr, dest) == EOF)
     f86:	ad1b      	add	r5, sp, #108	; 0x6c
     f88:	4426      	add	r6, r4
     f8a:	1b2d      	subs	r5, r5, r4
     f8c:	1b33      	subs	r3, r6, r4
				for (cptr = buf; c > 0; c--, cptr++, count++) {
     f8e:	2b00      	cmp	r3, #0
     f90:	f77f ad29 	ble.w	9e6 <_prf+0xb6>
					if ((*func)(*cptr, dest) == EOF)
     f94:	9912      	ldr	r1, [sp, #72]	; 0x48
     f96:	5d28      	ldrb	r0, [r5, r4]
     f98:	9b09      	ldr	r3, [sp, #36]	; 0x24
     f9a:	4798      	blx	r3
     f9c:	3001      	adds	r0, #1
     f9e:	f43f ad18 	beq.w	9d2 <_prf+0xa2>
				for (cptr = buf; c > 0; c--, cptr++, count++) {
     fa2:	3401      	adds	r4, #1
     fa4:	e7f2      	b.n	f8c <_prf+0x65c>
	if (alt_form) {
     fa6:	a81b      	add	r0, sp, #108	; 0x6c
	return (buf - buf0) + _to_x(buf, value, 8, precision);
     fa8:	f10d 0a6c 	add.w	sl, sp, #108	; 0x6c
     fac:	462b      	mov	r3, r5
     fae:	2208      	movs	r2, #8
     fb0:	eba0 0a0a 	sub.w	sl, r0, sl
     fb4:	f7ff fc3c 	bl	830 <_to_x>
     fb8:	4450      	add	r0, sl
			prefix = 0;
     fba:	3501      	adds	r5, #1
     fbc:	f04f 0900 	mov.w	r9, #0
     fc0:	9b00      	ldr	r3, [sp, #0]
     fc2:	bf18      	it	ne
     fc4:	2320      	movne	r3, #32
     fc6:	9300      	str	r3, [sp, #0]
     fc8:	e64a      	b.n	c60 <_prf+0x330>
		*buf++ = '0';
     fca:	f10d 006d 	add.w	r0, sp, #109	; 0x6d
     fce:	e7eb      	b.n	fa8 <_prf+0x678>
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
     fd0:	1d3b      	adds	r3, r7, #4
     fd2:	9303      	str	r3, [sp, #12]
		*buf++ = '0';
     fd4:	2330      	movs	r3, #48	; 0x30
     fd6:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
		*buf++ = 'x';
     fda:	2378      	movs	r3, #120	; 0x78
     fdc:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
     fe0:	6839      	ldr	r1, [r7, #0]
	len = _to_x(buf, value, 16, precision);
     fe2:	2308      	movs	r3, #8
     fe4:	2210      	movs	r2, #16
     fe6:	f10d 006e 	add.w	r0, sp, #110	; 0x6e
     fea:	f7ff fc21 	bl	830 <_to_x>
	return len + (buf - buf0);
     fee:	3002      	adds	r0, #2
     ff0:	e7e3      	b.n	fba <_prf+0x68a>
     ff2:	bf00      	nop
     ff4:	33333332 	.word	0x33333332
				for (c = 0; c < MAXFLD; c++) {
     ff8:	3601      	adds	r6, #1
     ffa:	2ec8      	cmp	r6, #200	; 0xc8
     ffc:	f47f adb7 	bne.w	b6e <_prf+0x23e>
				if ((precision >= 0) && (precision < c))
    1000:	2d00      	cmp	r5, #0
    1002:	f6ff adbe 	blt.w	b82 <_prf+0x252>
    1006:	42ae      	cmp	r6, r5
    1008:	bfa8      	it	ge
    100a:	462e      	movge	r6, r5
    100c:	e5b6      	b.n	b7c <_prf+0x24c>
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
    100e:	1d3b      	adds	r3, r7, #4
    1010:	9303      	str	r3, [sp, #12]
	return _to_x(buf, value, 10, precision);
    1012:	220a      	movs	r2, #10
    1014:	462b      	mov	r3, r5
    1016:	6839      	ldr	r1, [r7, #0]
    1018:	a81b      	add	r0, sp, #108	; 0x6c
    101a:	f7ff fc09 	bl	830 <_to_x>
    101e:	e7cc      	b.n	fba <_prf+0x68a>
	if (alt_form) {
    1020:	af1b      	add	r7, sp, #108	; 0x6c
    1022:	e555      	b.n	ad0 <_prf+0x1a0>
		if (*buf >= 'a' && *buf <= 'z') {
    1024:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
    1028:	2919      	cmp	r1, #25
			*buf += 'A' - 'a';
    102a:	bf9c      	itt	ls
    102c:	3b20      	subls	r3, #32
    102e:	7013      	strbls	r3, [r2, #0]
	for (/**/; *buf; buf++) {
    1030:	3201      	adds	r2, #1
    1032:	e555      	b.n	ae0 <_prf+0x1b0>
				if ((*func)('%', dest) == EOF) {
    1034:	9912      	ldr	r1, [sp, #72]	; 0x48
    1036:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1038:	4620      	mov	r0, r4
    103a:	4798      	blx	r3
    103c:	3001      	adds	r0, #1
    103e:	f43f acc8 	beq.w	9d2 <_prf+0xa2>
				count++;
    1042:	9b04      	ldr	r3, [sp, #16]
    1044:	3301      	adds	r3, #1
    1046:	9304      	str	r3, [sp, #16]
			if (c >= MAXFLD + 1)
    1048:	9703      	str	r7, [sp, #12]
    104a:	e786      	b.n	f5a <_prf+0x62a>
					if (fminus)	{
    104c:	9b08      	ldr	r3, [sp, #32]
    104e:	b13b      	cbz	r3, 1060 <_prf+0x730>
							buf[i] = ' ';
    1050:	ab1b      	add	r3, sp, #108	; 0x6c
    1052:	2220      	movs	r2, #32
						for (i = c; i < width; i++)
    1054:	9902      	ldr	r1, [sp, #8]
							buf[i] = ' ';
    1056:	54f2      	strb	r2, [r6, r3]
						for (i = c; i < width; i++)
    1058:	3601      	adds	r6, #1
    105a:	42b1      	cmp	r1, r6
    105c:	d1fa      	bne.n	1054 <_prf+0x724>
    105e:	e791      	b.n	f84 <_prf+0x654>
						(void) memmove((buf + (width - c)), buf, (size_t) (c
    1060:	9b02      	ldr	r3, [sp, #8]
    1062:	ac1b      	add	r4, sp, #108	; 0x6c
    1064:	1b9d      	subs	r5, r3, r6
    1066:	1960      	adds	r0, r4, r5
    1068:	1c72      	adds	r2, r6, #1
    106a:	4621      	mov	r1, r4
    106c:	f7ff fb79 	bl	762 <memmove>
							prefix = 0;
    1070:	9b00      	ldr	r3, [sp, #0]
    1072:	2b20      	cmp	r3, #32
    1074:	bf08      	it	eq
    1076:	f04f 0900 	moveq.w	r9, #0
						c = width - c + prefix;
    107a:	444d      	add	r5, r9
						for (i = prefix; i < c; i++)
    107c:	45a9      	cmp	r9, r5
    107e:	db01      	blt.n	1084 <_prf+0x754>
    1080:	9e02      	ldr	r6, [sp, #8]
    1082:	e77f      	b.n	f84 <_prf+0x654>
							buf[i] = pad;
    1084:	f89d 3000 	ldrb.w	r3, [sp]
    1088:	f809 3004 	strb.w	r3, [r9, r4]
						for (i = prefix; i < c; i++)
    108c:	f109 0901 	add.w	r9, r9, #1
    1090:	e7f4      	b.n	107c <_prf+0x74c>
					prefix = 1;
    1092:	f8dd 9014 	ldr.w	r9, [sp, #20]
    1096:	e5e3      	b.n	c60 <_prf+0x330>

00001098 <sprintf_out>:
	int len;
};

static int sprintf_out(int c, struct emitter *p)
{
	if (p->len > 1) { /* need to reserve a byte for EOS */
    1098:	684b      	ldr	r3, [r1, #4]
    109a:	2b01      	cmp	r3, #1
    109c:	dd07      	ble.n	10ae <sprintf_out+0x16>
		*(p->ptr) = c;
    109e:	680b      	ldr	r3, [r1, #0]
    10a0:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
    10a2:	680b      	ldr	r3, [r1, #0]
    10a4:	3301      	adds	r3, #1
    10a6:	600b      	str	r3, [r1, #0]
		p->len -= 1;
    10a8:	684b      	ldr	r3, [r1, #4]
    10aa:	3b01      	subs	r3, #1
    10ac:	604b      	str	r3, [r1, #4]
	}
	return 0; /* indicate keep going so we get the total count */
}
    10ae:	2000      	movs	r0, #0
    10b0:	4770      	bx	lr
	...

000010b4 <snprintf>:

int snprintf(char *_MLIBC_RESTRICT s, size_t len,
	     const char *_MLIBC_RESTRICT format, ...)
{
    10b4:	b40c      	push	{r2, r3}
    10b6:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
    10b8:	b909      	cbnz	r1, 10be <snprintf+0xa>
		s = &dummy; /* write final NUL to dummy, can't change *s */
    10ba:	f10d 0003 	add.w	r0, sp, #3
	}

	p.ptr = s;
	p.len = (int) len;

	va_start(vargs, format);
    10be:	ab07      	add	r3, sp, #28
	p.ptr = s;
    10c0:	9002      	str	r0, [sp, #8]
	p.len = (int) len;
    10c2:	9103      	str	r1, [sp, #12]
	r = _prf(sprintf_out, (void *) (&p), format, vargs);
    10c4:	9a06      	ldr	r2, [sp, #24]
    10c6:	4806      	ldr	r0, [pc, #24]	; (10e0 <snprintf+0x2c>)
	va_start(vargs, format);
    10c8:	9301      	str	r3, [sp, #4]
	r = _prf(sprintf_out, (void *) (&p), format, vargs);
    10ca:	a902      	add	r1, sp, #8
    10cc:	f7ff fc30 	bl	930 <_prf>
	va_end(vargs);

	*(p.ptr) = 0;
    10d0:	9b02      	ldr	r3, [sp, #8]
    10d2:	2200      	movs	r2, #0
    10d4:	701a      	strb	r2, [r3, #0]
	return r;
}
    10d6:	b005      	add	sp, #20
    10d8:	f85d eb04 	ldr.w	lr, [sp], #4
    10dc:	b002      	add	sp, #8
    10de:	4770      	bx	lr
    10e0:	00001099 	.word	0x00001099

000010e4 <tx_tcp_pool>:
NET_PKT_DATA_POOL_DEFINE(echo_data_tcp, 30);

static struct k_mem_slab *tx_tcp_pool(void)
{
	return &echo_tx_tcp;
}
    10e4:	4800      	ldr	r0, [pc, #0]	; (10e8 <tx_tcp_pool+0x4>)
    10e6:	4770      	bx	lr
    10e8:	2000a960 	.word	0x2000a960

000010ec <data_tcp_pool>:

static struct net_buf_pool *data_tcp_pool(void)
{
	return &echo_data_tcp;
}
    10ec:	4800      	ldr	r0, [pc, #0]	; (10f0 <data_tcp_pool+0x4>)
    10ee:	4770      	bx	lr
    10f0:	2000aa5c 	.word	0x2000aa5c

000010f4 <pkt_sent>:

static inline void pkt_sent(struct net_context *context,
			    int status,
			    void *token,
			    void *user_data)
{
    10f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (!status) {
    10f6:	b949      	cbnz	r1, 110c <pkt_sent+0x18>
		SYS_LOG_DBG("Sent %d bytes", POINTER_TO_UINT(token));
    10f8:	4b06      	ldr	r3, [pc, #24]	; (1114 <pkt_sent+0x20>)
    10fa:	9302      	str	r3, [sp, #8]
    10fc:	9201      	str	r2, [sp, #4]
    10fe:	9300      	str	r3, [sp, #0]
    1100:	4a05      	ldr	r2, [pc, #20]	; (1118 <pkt_sent+0x24>)
    1102:	4b06      	ldr	r3, [pc, #24]	; (111c <pkt_sent+0x28>)
    1104:	4906      	ldr	r1, [pc, #24]	; (1120 <pkt_sent+0x2c>)
    1106:	4807      	ldr	r0, [pc, #28]	; (1124 <pkt_sent+0x30>)
    1108:	f001 f8c4 	bl	2294 <printk>
	}
}
    110c:	b005      	add	sp, #20
    110e:	f85d fb04 	ldr.w	pc, [sp], #4
    1112:	bf00      	nop
    1114:	00023dae 	.word	0x00023dae
    1118:	00022d4c 	.word	0x00022d4c
    111c:	000229da 	.word	0x000229da
    1120:	00022d53 	.word	0x00022d53
    1124:	00022d58 	.word	0x00022d58

00001128 <tcp_accepted>:
static void tcp_accepted(struct net_context *context,
			 struct sockaddr *addr,
			 socklen_t addrlen,
			 int error,
			 void *user_data)
{
    1128:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int ret;

	NET_DBG("Accept called, context %p error %d", context, error);

	ret = net_context_recv(context, tcp_received, 0, NULL);
    112a:	2300      	movs	r3, #0
    112c:	461a      	mov	r2, r3
    112e:	490d      	ldr	r1, [pc, #52]	; (1164 <tcp_accepted+0x3c>)
{
    1130:	4604      	mov	r4, r0
	ret = net_context_recv(context, tcp_received, 0, NULL);
    1132:	f019 f913 	bl	1a35c <net_context_recv>
	if (ret < 0) {
    1136:	2800      	cmp	r0, #0
    1138:	da11      	bge.n	115e <tcp_accepted+0x36>
 */
static inline sa_family_t net_context_get_family(struct net_context *context)
{
	NET_ASSERT(context);

	if (context->flags & NET_CONTEXT_FAMILY) {
    113a:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
		SYS_LOG_ERR("Cannot receive TCP packet (family %d)",
    113e:	490a      	ldr	r1, [pc, #40]	; (1168 <tcp_accepted+0x40>)
    1140:	480a      	ldr	r0, [pc, #40]	; (116c <tcp_accepted+0x44>)
		return AF_INET6;
	}

	return AF_INET;
    1142:	f013 0f10 	tst.w	r3, #16
    1146:	bf18      	it	ne
    1148:	220a      	movne	r2, #10
    114a:	4b09      	ldr	r3, [pc, #36]	; (1170 <tcp_accepted+0x48>)
    114c:	9302      	str	r3, [sp, #8]
    114e:	bf08      	it	eq
    1150:	2202      	moveq	r2, #2
    1152:	9201      	str	r2, [sp, #4]
    1154:	9300      	str	r3, [sp, #0]
    1156:	4a07      	ldr	r2, [pc, #28]	; (1174 <tcp_accepted+0x4c>)
    1158:	4b07      	ldr	r3, [pc, #28]	; (1178 <tcp_accepted+0x50>)
    115a:	f001 f89b 	bl	2294 <printk>
			    net_context_get_family(context));
	}
}
    115e:	b004      	add	sp, #16
    1160:	bd10      	pop	{r4, pc}
    1162:	bf00      	nop
    1164:	0000145d 	.word	0x0000145d
    1168:	00022d53 	.word	0x00022d53
    116c:	00022d7d 	.word	0x00022d7d
    1170:	00023dae 	.word	0x00023dae
    1174:	00022d76 	.word	0x00022d76
    1178:	00022a19 	.word	0x00022a19

0000117c <listen>:
		SYS_LOG_ERR("Cannot receive IPv6 TCP packets (%d)", ret);
	}
}

static void listen(void)
{
    117c:	b570      	push	{r4, r5, r6, lr}
	struct net_context *udp_recv6 = { 0 };
    117e:	2500      	movs	r5, #0
{
    1180:	b098      	sub	sp, #96	; 0x60
	struct sockaddr_in6 mcast_addr6 = { 0 };
    1182:	2218      	movs	r2, #24
    1184:	4629      	mov	r1, r5
    1186:	a80c      	add	r0, sp, #48	; 0x30
	struct net_context *udp_recv6 = { 0 };
    1188:	9505      	str	r5, [sp, #20]
	struct net_context *tcp_recv6 = { 0 };
    118a:	9506      	str	r5, [sp, #24]
	struct net_context *mcast_recv6 = { 0 };
    118c:	9507      	str	r5, [sp, #28]
	struct sockaddr_in6 mcast_addr6 = { 0 };
    118e:	f7ff fb2c 	bl	7ea <memset>
	struct sockaddr_in6 my_addr6 = { 0 };
    1192:	2218      	movs	r2, #24
    1194:	4629      	mov	r1, r5
    1196:	a812      	add	r0, sp, #72	; 0x48
    1198:	f7ff fb27 	bl	7ea <memset>
	net_ipaddr_copy(&mcast_addr6.sin6_addr, &in6addr_mcast);
    119c:	4b6d      	ldr	r3, [pc, #436]	; (1354 <listen+0x1d8>)
    119e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    11a0:	ac08      	add	r4, sp, #32
    11a2:	ae0d      	add	r6, sp, #52	; 0x34
    11a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    11a8:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
	mcast_addr6.sin6_family = AF_INET6;
    11ac:	260a      	movs	r6, #10
	my_addr6.sin6_port = htons(MY_PORT);
    11ae:	f249 2310 	movw	r3, #37392	; 0x9210
    11b2:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
	ret = net_context_get(AF_INET6, SOCK_DGRAM, IPPROTO_UDP, udp_recv6);
    11b6:	2211      	movs	r2, #17
    11b8:	ab05      	add	r3, sp, #20
    11ba:	2102      	movs	r1, #2
    11bc:	4630      	mov	r0, r6
	mcast_addr6.sin6_family = AF_INET6;
    11be:	f8ad 6030 	strh.w	r6, [sp, #48]	; 0x30
	my_addr6.sin6_family = AF_INET6;
    11c2:	f8ad 6048 	strh.w	r6, [sp, #72]	; 0x48
	ret = net_context_get(AF_INET6, SOCK_DGRAM, IPPROTO_UDP, udp_recv6);
    11c6:	f018 fae3 	bl	19790 <net_context_get>
	if (ret < 0) {
    11ca:	2800      	cmp	r0, #0
    11cc:	4c62      	ldr	r4, [pc, #392]	; (1358 <listen+0x1dc>)
    11ce:	da09      	bge.n	11e4 <listen+0x68>
		SYS_LOG_ERR("Cannot get network context for IPv6 UDP (%d)",
    11d0:	9001      	str	r0, [sp, #4]
    11d2:	4b62      	ldr	r3, [pc, #392]	; (135c <listen+0x1e0>)
    11d4:	4a62      	ldr	r2, [pc, #392]	; (1360 <listen+0x1e4>)
    11d6:	4963      	ldr	r1, [pc, #396]	; (1364 <listen+0x1e8>)
    11d8:	4863      	ldr	r0, [pc, #396]	; (1368 <listen+0x1ec>)
    11da:	9402      	str	r4, [sp, #8]
    11dc:	9400      	str	r4, [sp, #0]
		SYS_LOG_ERR("Cannot listen IPv6 TCP (%d)", ret);
    11de:	f001 f859 	bl	2294 <printk>
    11e2:	e016      	b.n	1212 <listen+0x96>
	ret = net_context_bind(*udp_recv6, (struct sockaddr *)&my_addr6,
    11e4:	2218      	movs	r2, #24
    11e6:	a912      	add	r1, sp, #72	; 0x48
    11e8:	9805      	ldr	r0, [sp, #20]
    11ea:	f018 fd43 	bl	19c74 <net_context_bind>
	if (ret < 0) {
    11ee:	2800      	cmp	r0, #0
    11f0:	da18      	bge.n	1224 <listen+0xa8>
		SYS_LOG_ERR("Cannot bind IPv6 UDP port %d (%d)",
    11f2:	f8bd 204a 	ldrh.w	r2, [sp, #74]	; 0x4a
    11f6:	9002      	str	r0, [sp, #8]
    11f8:	0213      	lsls	r3, r2, #8
    11fa:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
    11fe:	b29b      	uxth	r3, r3
    1200:	9301      	str	r3, [sp, #4]
    1202:	4a57      	ldr	r2, [pc, #348]	; (1360 <listen+0x1e4>)
    1204:	4b55      	ldr	r3, [pc, #340]	; (135c <listen+0x1e0>)
    1206:	4957      	ldr	r1, [pc, #348]	; (1364 <listen+0x1e8>)
    1208:	4858      	ldr	r0, [pc, #352]	; (136c <listen+0x1f0>)
    120a:	9403      	str	r4, [sp, #12]
    120c:	9400      	str	r4, [sp, #0]
		SYS_LOG_ERR("Cannot bind IPv6 TCP port %d (%d)",
    120e:	f001 f841 	bl	2294 <printk>

	if (!get_context(&udp_recv6, &tcp_recv6, &mcast_recv6)) {
		SYS_LOG_ERR("Cannot get network contexts");
    1212:	9401      	str	r4, [sp, #4]
    1214:	9400      	str	r4, [sp, #0]
    1216:	4b56      	ldr	r3, [pc, #344]	; (1370 <listen+0x1f4>)
    1218:	4a51      	ldr	r2, [pc, #324]	; (1360 <listen+0x1e4>)
    121a:	4952      	ldr	r1, [pc, #328]	; (1364 <listen+0x1e8>)
    121c:	4855      	ldr	r0, [pc, #340]	; (1374 <listen+0x1f8>)
    121e:	f001 f839 	bl	2294 <printk>
    1222:	e095      	b.n	1350 <listen+0x1d4>
	ret = net_context_get(AF_INET6, SOCK_DGRAM, IPPROTO_UDP, mcast_recv6);
    1224:	ab07      	add	r3, sp, #28
    1226:	2211      	movs	r2, #17
    1228:	2102      	movs	r1, #2
    122a:	4630      	mov	r0, r6
    122c:	f018 fab0 	bl	19790 <net_context_get>
	if (ret < 0) {
    1230:	2800      	cmp	r0, #0
    1232:	da07      	bge.n	1244 <listen+0xc8>
		SYS_LOG_ERR("Cannot get receiving IPv6 mcast network context"
    1234:	9001      	str	r0, [sp, #4]
    1236:	9402      	str	r4, [sp, #8]
    1238:	9400      	str	r4, [sp, #0]
    123a:	4b48      	ldr	r3, [pc, #288]	; (135c <listen+0x1e0>)
    123c:	4a48      	ldr	r2, [pc, #288]	; (1360 <listen+0x1e4>)
    123e:	4949      	ldr	r1, [pc, #292]	; (1364 <listen+0x1e8>)
    1240:	484d      	ldr	r0, [pc, #308]	; (1378 <listen+0x1fc>)
    1242:	e7cc      	b.n	11de <listen+0x62>
	ret = net_context_bind(*mcast_recv6, (struct sockaddr *)&mcast_addr6,
    1244:	2218      	movs	r2, #24
    1246:	a90c      	add	r1, sp, #48	; 0x30
    1248:	9807      	ldr	r0, [sp, #28]
    124a:	f018 fd13 	bl	19c74 <net_context_bind>
	if (ret < 0) {
    124e:	2800      	cmp	r0, #0
    1250:	da07      	bge.n	1262 <listen+0xe6>
		SYS_LOG_ERR("Cannot bind IPv6 mcast (%d)", ret);
    1252:	9001      	str	r0, [sp, #4]
    1254:	9402      	str	r4, [sp, #8]
    1256:	9400      	str	r4, [sp, #0]
    1258:	4b40      	ldr	r3, [pc, #256]	; (135c <listen+0x1e0>)
    125a:	4a41      	ldr	r2, [pc, #260]	; (1360 <listen+0x1e4>)
    125c:	4941      	ldr	r1, [pc, #260]	; (1364 <listen+0x1e8>)
    125e:	4847      	ldr	r0, [pc, #284]	; (137c <listen+0x200>)
    1260:	e7bd      	b.n	11de <listen+0x62>
	ret = net_context_get(AF_INET6, SOCK_STREAM, IPPROTO_TCP, tcp_recv6);
    1262:	ab06      	add	r3, sp, #24
    1264:	2206      	movs	r2, #6
    1266:	2101      	movs	r1, #1
    1268:	4630      	mov	r0, r6
    126a:	f018 fa91 	bl	19790 <net_context_get>
	if (ret < 0) {
    126e:	2800      	cmp	r0, #0
    1270:	da07      	bge.n	1282 <listen+0x106>
		SYS_LOG_ERR("Cannot get network context for IPv6 TCP (%d)",
    1272:	9001      	str	r0, [sp, #4]
    1274:	9402      	str	r4, [sp, #8]
    1276:	9400      	str	r4, [sp, #0]
    1278:	4b38      	ldr	r3, [pc, #224]	; (135c <listen+0x1e0>)
    127a:	4a39      	ldr	r2, [pc, #228]	; (1360 <listen+0x1e4>)
    127c:	4939      	ldr	r1, [pc, #228]	; (1364 <listen+0x1e8>)
    127e:	4840      	ldr	r0, [pc, #256]	; (1380 <listen+0x204>)
    1280:	e7ad      	b.n	11de <listen+0x62>
	net_context_setup_pools(*tcp_recv6, tx_tcp_pool, data_tcp_pool);
    1282:	9806      	ldr	r0, [sp, #24]
					   net_pkt_get_slab_func_t tx_slab,
					   net_pkt_get_pool_func_t data_pool)
{
	NET_ASSERT(context);

	context->tx_slab = tx_slab;
    1284:	4b3f      	ldr	r3, [pc, #252]	; (1384 <listen+0x208>)
    1286:	63c3      	str	r3, [r0, #60]	; 0x3c
	context->data_pool = data_pool;
    1288:	4b3f      	ldr	r3, [pc, #252]	; (1388 <listen+0x20c>)
    128a:	6403      	str	r3, [r0, #64]	; 0x40
	ret = net_context_bind(*tcp_recv6, (struct sockaddr *)&my_addr6,
    128c:	2218      	movs	r2, #24
    128e:	a912      	add	r1, sp, #72	; 0x48
    1290:	f018 fcf0 	bl	19c74 <net_context_bind>
	if (ret < 0) {
    1294:	2800      	cmp	r0, #0
    1296:	da0e      	bge.n	12b6 <listen+0x13a>
		SYS_LOG_ERR("Cannot bind IPv6 TCP port %d (%d)",
    1298:	f8bd 204a 	ldrh.w	r2, [sp, #74]	; 0x4a
    129c:	9002      	str	r0, [sp, #8]
    129e:	0213      	lsls	r3, r2, #8
    12a0:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
    12a4:	b29b      	uxth	r3, r3
    12a6:	9301      	str	r3, [sp, #4]
    12a8:	9403      	str	r4, [sp, #12]
    12aa:	9400      	str	r4, [sp, #0]
    12ac:	4b2b      	ldr	r3, [pc, #172]	; (135c <listen+0x1e0>)
    12ae:	4a2c      	ldr	r2, [pc, #176]	; (1360 <listen+0x1e4>)
    12b0:	492c      	ldr	r1, [pc, #176]	; (1364 <listen+0x1e8>)
    12b2:	4836      	ldr	r0, [pc, #216]	; (138c <listen+0x210>)
    12b4:	e7ab      	b.n	120e <listen+0x92>
	ret = net_context_listen(*tcp_recv6, 0);
    12b6:	4629      	mov	r1, r5
    12b8:	9806      	ldr	r0, [sp, #24]
    12ba:	f018 ff8f 	bl	1a1dc <net_context_listen>
	if (ret < 0) {
    12be:	2800      	cmp	r0, #0
    12c0:	da07      	bge.n	12d2 <listen+0x156>
		SYS_LOG_ERR("Cannot listen IPv6 TCP (%d)", ret);
    12c2:	9001      	str	r0, [sp, #4]
    12c4:	9402      	str	r4, [sp, #8]
    12c6:	9400      	str	r4, [sp, #0]
    12c8:	4b24      	ldr	r3, [pc, #144]	; (135c <listen+0x1e0>)
    12ca:	4a25      	ldr	r2, [pc, #148]	; (1360 <listen+0x1e4>)
    12cc:	4925      	ldr	r1, [pc, #148]	; (1364 <listen+0x1e8>)
    12ce:	4830      	ldr	r0, [pc, #192]	; (1390 <listen+0x214>)
    12d0:	e785      	b.n	11de <listen+0x62>
		return;
	}

	SYS_LOG_INF("Starting to wait");
    12d2:	4b27      	ldr	r3, [pc, #156]	; (1370 <listen+0x1f4>)
    12d4:	4a2f      	ldr	r2, [pc, #188]	; (1394 <listen+0x218>)
    12d6:	4923      	ldr	r1, [pc, #140]	; (1364 <listen+0x1e8>)
    12d8:	9401      	str	r4, [sp, #4]
    12da:	9400      	str	r4, [sp, #0]
    12dc:	482e      	ldr	r0, [pc, #184]	; (1398 <listen+0x21c>)
    12de:	f000 ffd9 	bl	2294 <printk>
	ret = net_context_accept(tcp_recv6, tcp_accepted, K_NO_WAIT, NULL);
    12e2:	462b      	mov	r3, r5
    12e4:	462a      	mov	r2, r5
    12e6:	492d      	ldr	r1, [pc, #180]	; (139c <listen+0x220>)
    12e8:	9806      	ldr	r0, [sp, #24]
    12ea:	f018 ff93 	bl	1a214 <net_context_accept>
	if (ret < 0) {
    12ee:	2800      	cmp	r0, #0
    12f0:	da08      	bge.n	1304 <listen+0x188>
		SYS_LOG_ERR("Cannot receive IPv6 TCP packets (%d)", ret);
    12f2:	9001      	str	r0, [sp, #4]
    12f4:	9402      	str	r4, [sp, #8]
    12f6:	9400      	str	r4, [sp, #0]
    12f8:	4b29      	ldr	r3, [pc, #164]	; (13a0 <listen+0x224>)
    12fa:	4a19      	ldr	r2, [pc, #100]	; (1360 <listen+0x1e4>)
    12fc:	4919      	ldr	r1, [pc, #100]	; (1364 <listen+0x1e8>)
    12fe:	4829      	ldr	r0, [pc, #164]	; (13a4 <listen+0x228>)
    1300:	f000 ffc8 	bl	2294 <printk>
	ret = net_context_recv(udp_recv6, udp_received, 0, NULL);
    1304:	2300      	movs	r3, #0
    1306:	461a      	mov	r2, r3
    1308:	4927      	ldr	r1, [pc, #156]	; (13a8 <listen+0x22c>)
    130a:	9805      	ldr	r0, [sp, #20]
    130c:	f019 f826 	bl	1a35c <net_context_recv>
	if (ret < 0) {
    1310:	2800      	cmp	r0, #0
    1312:	da07      	bge.n	1324 <listen+0x1a8>
		SYS_LOG_ERR("Cannot receive IPv6 UDP packets");
    1314:	9401      	str	r4, [sp, #4]
    1316:	9400      	str	r4, [sp, #0]
    1318:	4b24      	ldr	r3, [pc, #144]	; (13ac <listen+0x230>)
    131a:	4a11      	ldr	r2, [pc, #68]	; (1360 <listen+0x1e4>)
    131c:	4911      	ldr	r1, [pc, #68]	; (1364 <listen+0x1e8>)
    131e:	4824      	ldr	r0, [pc, #144]	; (13b0 <listen+0x234>)
    1320:	f000 ffb8 	bl	2294 <printk>

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex);

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);

K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    1324:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    1328:	4822      	ldr	r0, [pc, #136]	; (13b4 <listen+0x238>)
    132a:	f020 fc9f 	bl	21c6c <_impl_k_sem_take>
	setup_tcp_accept(tcp_recv6);
	setup_udp_recv(udp_recv6);

	k_sem_take(&quit_lock, K_FOREVER);

	SYS_LOG_INF("Stopping...");
    132e:	4b10      	ldr	r3, [pc, #64]	; (1370 <listen+0x1f4>)
    1330:	4a18      	ldr	r2, [pc, #96]	; (1394 <listen+0x218>)
    1332:	490c      	ldr	r1, [pc, #48]	; (1364 <listen+0x1e8>)
    1334:	9401      	str	r4, [sp, #4]
    1336:	9400      	str	r4, [sp, #0]
    1338:	481f      	ldr	r0, [pc, #124]	; (13b8 <listen+0x23c>)
    133a:	f000 ffab 	bl	2294 <printk>

	net_context_put(udp_recv6);
    133e:	9805      	ldr	r0, [sp, #20]
    1340:	f018 fc4e 	bl	19be0 <net_context_put>
	net_context_put(mcast_recv6);
    1344:	9807      	ldr	r0, [sp, #28]
    1346:	f018 fc4b 	bl	19be0 <net_context_put>
	net_context_put(tcp_recv6);
    134a:	9806      	ldr	r0, [sp, #24]
    134c:	f018 fc48 	bl	19be0 <net_context_put>
}
    1350:	b018      	add	sp, #96	; 0x60
    1352:	bd70      	pop	{r4, r5, r6, pc}
    1354:	20009c68 	.word	0x20009c68
    1358:	00023dae 	.word	0x00023dae
    135c:	000229be 	.word	0x000229be
    1360:	00022d76 	.word	0x00022d76
    1364:	00022d53 	.word	0x00022d53
    1368:	00022a97 	.word	0x00022a97
    136c:	00022ad4 	.word	0x00022ad4
    1370:	00022a37 	.word	0x00022a37
    1374:	00022c99 	.word	0x00022c99
    1378:	00022b06 	.word	0x00022b06
    137c:	00022b4a 	.word	0x00022b4a
    1380:	00022b76 	.word	0x00022b76
    1384:	000010e5 	.word	0x000010e5
    1388:	000010ed 	.word	0x000010ed
    138c:	00022bb3 	.word	0x00022bb3
    1390:	00022be5 	.word	0x00022be5
    1394:	00022c76 	.word	0x00022c76
    1398:	00022cc5 	.word	0x00022cc5
    139c:	00001129 	.word	0x00001129
    13a0:	00022a26 	.word	0x00022a26
    13a4:	00022c11 	.word	0x00022c11
    13a8:	00001501 	.word	0x00001501
    13ac:	000229fd 	.word	0x000229fd
    13b0:	00022c46 	.word	0x00022c46
    13b4:	20000084 	.word	0x20000084
    13b8:	00022c7d 	.word	0x00022c7d

000013bc <build_reply_pkt>:
{
    13bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    13c0:	b085      	sub	sp, #20
	SYS_LOG_DBG("%s received %d bytes", name, net_pkt_appdatalen(pkt));
    13c2:	4d20      	ldr	r5, [pc, #128]	; (1444 <build_reply_pkt+0x88>)
    13c4:	9503      	str	r5, [sp, #12]
    13c6:	8e53      	ldrh	r3, [r2, #50]	; 0x32
    13c8:	9302      	str	r3, [sp, #8]
{
    13ca:	460c      	mov	r4, r1
    13cc:	4617      	mov	r7, r2
	SYS_LOG_DBG("%s received %d bytes", name, net_pkt_appdatalen(pkt));
    13ce:	9001      	str	r0, [sp, #4]
    13d0:	4b1d      	ldr	r3, [pc, #116]	; (1448 <build_reply_pkt+0x8c>)
    13d2:	4a1e      	ldr	r2, [pc, #120]	; (144c <build_reply_pkt+0x90>)
    13d4:	491e      	ldr	r1, [pc, #120]	; (1450 <build_reply_pkt+0x94>)
    13d6:	9500      	str	r5, [sp, #0]
    13d8:	481e      	ldr	r0, [pc, #120]	; (1454 <build_reply_pkt+0x98>)
    13da:	f000 ff5b 	bl	2294 <printk>
	reply_pkt = net_pkt_get_tx(context, K_FOREVER);
    13de:	4620      	mov	r0, r4
    13e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    13e4:	f01a fa0a 	bl	1b7fc <net_pkt_get_tx>
    13e8:	f8d7 9008 	ldr.w	r9, [r7, #8]
    13ec:	4680      	mov	r8, r0
    13ee:	464c      	mov	r4, r9
 *
 *  @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
	size_t bytes = 0;
    13f0:	2600      	movs	r6, #0

	while (buf) {
    13f2:	b9f4      	cbnz	r4, 1432 <build_reply_pkt+0x76>
	header_len = net_pkt_appdata(pkt) - tmp->data;
    13f4:	4648      	mov	r0, r9
	pkt->frags = NULL;
    13f6:	60bc      	str	r4, [r7, #8]
	header_len = net_pkt_appdata(pkt) - tmp->data;
    13f8:	f850 3f08 	ldr.w	r3, [r0, #8]!
    13fc:	69bf      	ldr	r7, [r7, #24]
    13fe:	1aff      	subs	r7, r7, r3
	net_buf_pull(tmp, header_len);
    1400:	4639      	mov	r1, r7
    1402:	f018 f81f 	bl	19444 <net_buf_simple_pull>
	net_pkt_frag_add(reply_pkt, tmp);
    1406:	4649      	mov	r1, r9
    1408:	4640      	mov	r0, r8
    140a:	f01a fa63 	bl	1b8d4 <net_pkt_frag_add>
    140e:	f8d8 3008 	ldr.w	r3, [r8, #8]
    1412:	b993      	cbnz	r3, 143a <build_reply_pkt+0x7e>
	SYS_LOG_DBG("Received %d bytes, sending %d bytes",
    1414:	1bf6      	subs	r6, r6, r7
    1416:	9503      	str	r5, [sp, #12]
    1418:	9402      	str	r4, [sp, #8]
    141a:	e88d 0060 	stmia.w	sp, {r5, r6}
    141e:	4b0a      	ldr	r3, [pc, #40]	; (1448 <build_reply_pkt+0x8c>)
    1420:	4a0a      	ldr	r2, [pc, #40]	; (144c <build_reply_pkt+0x90>)
    1422:	490b      	ldr	r1, [pc, #44]	; (1450 <build_reply_pkt+0x94>)
    1424:	480c      	ldr	r0, [pc, #48]	; (1458 <build_reply_pkt+0x9c>)
    1426:	f000 ff35 	bl	2294 <printk>
}
    142a:	4640      	mov	r0, r8
    142c:	b005      	add	sp, #20
    142e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes += buf->len;
    1432:	89a3      	ldrh	r3, [r4, #12]
		buf = buf->frags;
    1434:	6824      	ldr	r4, [r4, #0]
		bytes += buf->len;
    1436:	441e      	add	r6, r3
    1438:	e7db      	b.n	13f2 <build_reply_pkt+0x36>
    143a:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
    143c:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
    143e:	4414      	add	r4, r2
    1440:	e7e7      	b.n	1412 <build_reply_pkt+0x56>
    1442:	bf00      	nop
    1444:	00023dae 	.word	0x00023dae
    1448:	000229ca 	.word	0x000229ca
    144c:	00022d4c 	.word	0x00022d4c
    1450:	00022d53 	.word	0x00022d53
    1454:	00022a3e 	.word	0x00022a3e
    1458:	00022a63 	.word	0x00022a63

0000145c <tcp_received>:
{
    145c:	b530      	push	{r4, r5, lr}
    145e:	4605      	mov	r5, r0
    1460:	b085      	sub	sp, #20
	if (!pkt) {
    1462:	460c      	mov	r4, r1
    1464:	2900      	cmp	r1, #0
    1466:	d036      	beq.n	14d6 <tcp_received+0x7a>
#endif
}

static inline u8_t net_pkt_family(struct net_pkt *pkt)
{
	return pkt->family;
    1468:	f891 303c 	ldrb.w	r3, [r1, #60]	; 0x3c
	snprintf(dbg, MAX_DBG_PRINT, "TCP IPv%c",
    146c:	4a1b      	ldr	r2, [pc, #108]	; (14dc <tcp_received+0x80>)
    146e:	481c      	ldr	r0, [pc, #112]	; (14e0 <tcp_received+0x84>)
    1470:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    1474:	2b0a      	cmp	r3, #10
    1476:	bf0c      	ite	eq
    1478:	2336      	moveq	r3, #54	; 0x36
    147a:	2334      	movne	r3, #52	; 0x34
    147c:	2140      	movs	r1, #64	; 0x40
    147e:	f7ff fe19 	bl	10b4 <snprintf>
	reply_pkt = build_reply_pkt(dbg, context, pkt);
    1482:	4622      	mov	r2, r4
    1484:	4629      	mov	r1, r5
    1486:	4816      	ldr	r0, [pc, #88]	; (14e0 <tcp_received+0x84>)
    1488:	f7ff ff98 	bl	13bc <build_reply_pkt>
    148c:	4605      	mov	r5, r0
	net_pkt_unref(pkt);
    148e:	4620      	mov	r0, r4
    1490:	f01a f9f9 	bl	1b886 <net_pkt_unref>
    1494:	68aa      	ldr	r2, [r5, #8]
	size_t bytes = 0;
    1496:	2300      	movs	r3, #0
	while (buf) {
    1498:	b9ca      	cbnz	r2, 14ce <tcp_received+0x72>
	ret = net_context_send(reply_pkt, pkt_sent, K_NO_WAIT,
    149a:	9200      	str	r2, [sp, #0]
    149c:	4911      	ldr	r1, [pc, #68]	; (14e4 <tcp_received+0x88>)
    149e:	4628      	mov	r0, r5
    14a0:	f018 ff26 	bl	1a2f0 <net_context_send>
	if (ret < 0) {
    14a4:	2800      	cmp	r0, #0
    14a6:	da16      	bge.n	14d6 <tcp_received+0x7a>
		SYS_LOG_ERR("Cannot send data to peer (%d)", ret);
    14a8:	4b0f      	ldr	r3, [pc, #60]	; (14e8 <tcp_received+0x8c>)
    14aa:	9302      	str	r3, [sp, #8]
    14ac:	9001      	str	r0, [sp, #4]
    14ae:	9300      	str	r3, [sp, #0]
    14b0:	4a0e      	ldr	r2, [pc, #56]	; (14ec <tcp_received+0x90>)
    14b2:	4b0f      	ldr	r3, [pc, #60]	; (14f0 <tcp_received+0x94>)
    14b4:	490f      	ldr	r1, [pc, #60]	; (14f4 <tcp_received+0x98>)
    14b6:	4810      	ldr	r0, [pc, #64]	; (14f8 <tcp_received+0x9c>)
    14b8:	f000 feec 	bl	2294 <printk>
		net_pkt_unref(reply_pkt);
    14bc:	4628      	mov	r0, r5
    14be:	f01a f9e2 	bl	1b886 <net_pkt_unref>

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    14c2:	480e      	ldr	r0, [pc, #56]	; (14fc <tcp_received+0xa0>)
}
    14c4:	b005      	add	sp, #20
    14c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    14ca:	f020 bb6f 	b.w	21bac <_impl_k_sem_give>
		bytes += buf->len;
    14ce:	8991      	ldrh	r1, [r2, #12]
		buf = buf->frags;
    14d0:	6812      	ldr	r2, [r2, #0]
		bytes += buf->len;
    14d2:	440b      	add	r3, r1
    14d4:	e7e0      	b.n	1498 <tcp_received+0x3c>
    14d6:	b005      	add	sp, #20
    14d8:	bd30      	pop	{r4, r5, pc}
    14da:	bf00      	nop
    14dc:	00022db3 	.word	0x00022db3
    14e0:	20000041 	.word	0x20000041
    14e4:	000010f5 	.word	0x000010f5
    14e8:	00023dae 	.word	0x00023dae
    14ec:	00022d76 	.word	0x00022d76
    14f0:	00022a0c 	.word	0x00022a0c
    14f4:	00022d53 	.word	0x00022d53
    14f8:	00022dbd 	.word	0x00022dbd
    14fc:	20000084 	.word	0x20000084

00001500 <udp_received>:
{
    1500:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1504:	f891 503c 	ldrb.w	r5, [r1, #60]	; 0x3c
	snprintf(dbg, MAX_DBG_PRINT, "UDP IPv%c",
    1508:	4a37      	ldr	r2, [pc, #220]	; (15e8 <udp_received+0xe8>)
	sa_family_t family = net_pkt_family(pkt);
    150a:	f3c5 05c3 	ubfx	r5, r5, #3, #4
	snprintf(dbg, MAX_DBG_PRINT, "UDP IPv%c",
    150e:	2d0a      	cmp	r5, #10
{
    1510:	461f      	mov	r7, r3
    1512:	b091      	sub	sp, #68	; 0x44
    1514:	460c      	mov	r4, r1
	snprintf(dbg, MAX_DBG_PRINT, "UDP IPv%c",
    1516:	bf0c      	ite	eq
    1518:	2336      	moveq	r3, #54	; 0x36
    151a:	2334      	movne	r3, #52	; 0x34
    151c:	2140      	movs	r1, #64	; 0x40
{
    151e:	4680      	mov	r8, r0
	snprintf(dbg, MAX_DBG_PRINT, "UDP IPv%c",
    1520:	4832      	ldr	r0, [pc, #200]	; (15ec <udp_received+0xec>)
    1522:	f7ff fdc7 	bl	10b4 <snprintf>
	udp_hdr = net_udp_get_hdr(pkt, &hdr);
    1526:	a904      	add	r1, sp, #16
    1528:	4620      	mov	r0, r4
    152a:	f01f fb59 	bl	20be0 <net_udp_get_hdr>
	if (!udp_hdr) {
    152e:	4686      	mov	lr, r0
    1530:	2800      	cmp	r0, #0
    1532:	d133      	bne.n	159c <udp_received+0x9c>
		SYS_LOG_ERR("Invalid UDP data");
    1534:	4b2e      	ldr	r3, [pc, #184]	; (15f0 <udp_received+0xf0>)
    1536:	9301      	str	r3, [sp, #4]
    1538:	9300      	str	r3, [sp, #0]
    153a:	4a2e      	ldr	r2, [pc, #184]	; (15f4 <udp_received+0xf4>)
    153c:	4b2e      	ldr	r3, [pc, #184]	; (15f8 <udp_received+0xf8>)
    153e:	492f      	ldr	r1, [pc, #188]	; (15fc <udp_received+0xfc>)
    1540:	482f      	ldr	r0, [pc, #188]	; (1600 <udp_received+0x100>)
    1542:	f000 fea7 	bl	2294 <printk>
	reply_pkt = build_reply_pkt(dbg, context, pkt);
    1546:	4622      	mov	r2, r4
    1548:	4641      	mov	r1, r8
    154a:	4828      	ldr	r0, [pc, #160]	; (15ec <udp_received+0xec>)
    154c:	f7ff ff36 	bl	13bc <build_reply_pkt>
    1550:	4606      	mov	r6, r0
	net_pkt_unref(pkt);
    1552:	4620      	mov	r0, r4
    1554:	f01a f997 	bl	1b886 <net_pkt_unref>
	ret = net_context_sendto(reply_pkt, &dst_addr,
    1558:	2d0a      	cmp	r5, #10
    155a:	68b3      	ldr	r3, [r6, #8]
    155c:	bf0c      	ite	eq
    155e:	2218      	moveq	r2, #24
    1560:	2208      	movne	r2, #8
	size_t bytes = 0;
    1562:	2100      	movs	r1, #0
	while (buf) {
    1564:	2b00      	cmp	r3, #0
    1566:	d13a      	bne.n	15de <udp_received+0xde>
    1568:	9101      	str	r1, [sp, #4]
    156a:	9300      	str	r3, [sp, #0]
    156c:	9702      	str	r7, [sp, #8]
    156e:	4b25      	ldr	r3, [pc, #148]	; (1604 <udp_received+0x104>)
    1570:	a90a      	add	r1, sp, #40	; 0x28
    1572:	4630      	mov	r0, r6
    1574:	f018 fed9 	bl	1a32a <net_context_sendto>
	if (ret < 0) {
    1578:	2800      	cmp	r0, #0
    157a:	da0c      	bge.n	1596 <udp_received+0x96>
		SYS_LOG_ERR("Cannot send data to peer (%d)", ret);
    157c:	4b1c      	ldr	r3, [pc, #112]	; (15f0 <udp_received+0xf0>)
    157e:	9302      	str	r3, [sp, #8]
    1580:	9001      	str	r0, [sp, #4]
    1582:	9300      	str	r3, [sp, #0]
    1584:	4a1b      	ldr	r2, [pc, #108]	; (15f4 <udp_received+0xf4>)
    1586:	4b20      	ldr	r3, [pc, #128]	; (1608 <udp_received+0x108>)
    1588:	491c      	ldr	r1, [pc, #112]	; (15fc <udp_received+0xfc>)
    158a:	4820      	ldr	r0, [pc, #128]	; (160c <udp_received+0x10c>)
    158c:	f000 fe82 	bl	2294 <printk>
		net_pkt_unref(reply_pkt);
    1590:	4630      	mov	r0, r6
    1592:	f01a f978 	bl	1b886 <net_pkt_unref>
}
    1596:	b011      	add	sp, #68	; 0x44
    1598:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return net_buf_frags_len(pkt->frags);
}

static inline u8_t *net_pkt_ip_data(struct net_pkt *pkt)
{
	return pkt->frags->data;
    159c:	68a3      	ldr	r3, [r4, #8]
	net_ipaddr_copy(&net_sin6(dst_addr)->sin6_addr,
    159e:	689e      	ldr	r6, [r3, #8]
    15a0:	f10d 0c18 	add.w	ip, sp, #24
    15a4:	f106 0308 	add.w	r3, r6, #8
    15a8:	4662      	mov	r2, ip
    15aa:	3618      	adds	r6, #24
    15ac:	6818      	ldr	r0, [r3, #0]
    15ae:	6859      	ldr	r1, [r3, #4]
    15b0:	46e1      	mov	r9, ip
    15b2:	e8a9 0003 	stmia.w	r9!, {r0, r1}
    15b6:	3308      	adds	r3, #8
    15b8:	42b3      	cmp	r3, r6
    15ba:	46cc      	mov	ip, r9
    15bc:	d1f6      	bne.n	15ac <udp_received+0xac>
    15be:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
    15c0:	ae0b      	add	r6, sp, #44	; 0x2c
    15c2:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
	net_sin6(dst_addr)->sin6_family = AF_INET6;
    15c6:	230a      	movs	r3, #10
	net_sin6(dst_addr)->sin6_port = udp_hdr->src_port;
    15c8:	f89e 2001 	ldrb.w	r2, [lr, #1]
	net_sin6(dst_addr)->sin6_family = AF_INET6;
    15cc:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	net_sin6(dst_addr)->sin6_port = udp_hdr->src_port;
    15d0:	f89e 3000 	ldrb.w	r3, [lr]
    15d4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    15d8:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
    15dc:	e7b3      	b.n	1546 <udp_received+0x46>
		bytes += buf->len;
    15de:	8998      	ldrh	r0, [r3, #12]
		buf = buf->frags;
    15e0:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
    15e2:	4401      	add	r1, r0
    15e4:	e7be      	b.n	1564 <udp_received+0x64>
    15e6:	bf00      	nop
    15e8:	00022deb 	.word	0x00022deb
    15ec:	20000000 	.word	0x20000000
    15f0:	00023dae 	.word	0x00023dae
    15f4:	00022d76 	.word	0x00022d76
    15f8:	000229e3 	.word	0x000229e3
    15fc:	00022d53 	.word	0x00022d53
    1600:	00022df5 	.word	0x00022df5
    1604:	000010f5 	.word	0x000010f5
    1608:	000229f0 	.word	0x000229f0
    160c:	00022dbd 	.word	0x00022dbd

00001610 <main>:

void main(void)
{
    1610:	b530      	push	{r4, r5, lr}
    1612:	b087      	sub	sp, #28
	SYS_LOG_INF("Run IPSP sample");
    1614:	4c1e      	ldr	r4, [pc, #120]	; (1690 <main+0x80>)
    1616:	4b1f      	ldr	r3, [pc, #124]	; (1694 <main+0x84>)
    1618:	4a1f      	ldr	r2, [pc, #124]	; (1698 <main+0x88>)
    161a:	4920      	ldr	r1, [pc, #128]	; (169c <main+0x8c>)
    161c:	9401      	str	r4, [sp, #4]
    161e:	9400      	str	r4, [sp, #0]
    1620:	481f      	ldr	r0, [pc, #124]	; (16a0 <main+0x90>)
	if (net_addr_pton(AF_INET6,
    1622:	4d20      	ldr	r5, [pc, #128]	; (16a4 <main+0x94>)
	SYS_LOG_INF("Run IPSP sample");
    1624:	f000 fe36 	bl	2294 <printk>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    1628:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    162c:	2100      	movs	r1, #0
    162e:	481e      	ldr	r0, [pc, #120]	; (16a8 <main+0x98>)
    1630:	f020 fab2 	bl	21b98 <_impl_k_sem_init>
	if (net_addr_pton(AF_INET6,
    1634:	4a1d      	ldr	r2, [pc, #116]	; (16ac <main+0x9c>)
    1636:	4629      	mov	r1, r5
    1638:	200a      	movs	r0, #10
    163a:	f01a fcd4 	bl	1bfe6 <net_addr_pton>
    163e:	2800      	cmp	r0, #0
    1640:	da08      	bge.n	1654 <main+0x44>
		SYS_LOG_ERR("Invalid IPv6 address %s",
    1642:	9402      	str	r4, [sp, #8]
    1644:	e88d 0030 	stmia.w	sp, {r4, r5}
    1648:	4b12      	ldr	r3, [pc, #72]	; (1694 <main+0x84>)
    164a:	4a19      	ldr	r2, [pc, #100]	; (16b0 <main+0xa0>)
    164c:	4913      	ldr	r1, [pc, #76]	; (169c <main+0x8c>)
    164e:	4819      	ldr	r0, [pc, #100]	; (16b4 <main+0xa4>)
    1650:	f000 fe20 	bl	2294 <printk>
		ifaddr = net_if_ipv6_addr_add(net_if_get_default(),
    1654:	f019 f916 	bl	1a884 <net_if_get_default>
    1658:	2300      	movs	r3, #0
    165a:	2203      	movs	r2, #3
    165c:	4913      	ldr	r1, [pc, #76]	; (16ac <main+0x9c>)
    165e:	f019 f98b 	bl	1a978 <net_if_ipv6_addr_add>
	net_if_ipv6_maddr_add(net_if_get_default(), &in6addr_mcast);
    1662:	f019 f90f 	bl	1a884 <net_if_get_default>
    1666:	4914      	ldr	r1, [pc, #80]	; (16b8 <main+0xa8>)
    1668:	f019 faae 	bl	1abc8 <net_if_ipv6_maddr_add>

    166c:	2300      	movs	r3, #0
    166e:	f06f 0208 	mvn.w	r2, #8
    1672:	9305      	str	r3, [sp, #20]
    1674:	9304      	str	r3, [sp, #16]
    1676:	9203      	str	r2, [sp, #12]
    1678:	9302      	str	r3, [sp, #8]
    167a:	9301      	str	r3, [sp, #4]
    167c:	9300      	str	r3, [sp, #0]
    167e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
    1682:	4b0e      	ldr	r3, [pc, #56]	; (16bc <main+0xac>)
    1684:	490e      	ldr	r1, [pc, #56]	; (16c0 <main+0xb0>)
    1686:	480f      	ldr	r0, [pc, #60]	; (16c4 <main+0xb4>)
    1688:	f020 fccc 	bl	22024 <_impl_k_thread_create>
	init_app();

	k_thread_create(&thread_data, thread_stack, STACKSIZE,
			(k_thread_entry_t)listen,
			NULL, NULL, NULL, K_PRIO_COOP(7), 0, 0);
}
    168c:	b007      	add	sp, #28
    168e:	bd30      	pop	{r4, r5, pc}
    1690:	00023dae 	.word	0x00023dae
    1694:	000229b5 	.word	0x000229b5
    1698:	00022c76 	.word	0x00022c76
    169c:	00022d53 	.word	0x00022d53
    16a0:	00022ce6 	.word	0x00022ce6
    16a4:	00022d06 	.word	0x00022d06
    16a8:	20000084 	.word	0x20000084
    16ac:	20009c78 	.word	0x20009c78
    16b0:	00022d76 	.word	0x00022d76
    16b4:	00022d12 	.word	0x00022d12
    16b8:	20009c68 	.word	0x20009c68
    16bc:	0000117d 	.word	0x0000117d
    16c0:	200033b8 	.word	0x200033b8
    16c4:	2000009c 	.word	0x2000009c

000016c8 <errata_103>:
	return false;
}

static bool errata_136_nrf52840(void)
{
	if ((*(u32_t *)0x10000130ul == 0x8ul) &&
    16c8:	4b05      	ldr	r3, [pc, #20]	; (16e0 <errata_103+0x18>)
    16ca:	681b      	ldr	r3, [r3, #0]
    16cc:	2b08      	cmp	r3, #8
	    (*(u32_t *)0x10000134ul == 0x0ul)) {
    16ce:	bf01      	itttt	eq
    16d0:	4b04      	ldreq	r3, [pc, #16]	; (16e4 <errata_103+0x1c>)
	if ((*(u32_t *)0x10000130ul == 0x8ul) &&
    16d2:	6818      	ldreq	r0, [r3, #0]
    16d4:	fab0 f080 	clzeq	r0, r0
    16d8:	0940      	lsreq	r0, r0, #5
		return true;
	}

	return false;
    16da:	bf18      	it	ne
    16dc:	2000      	movne	r0, #0
}
    16de:	4770      	bx	lr
    16e0:	10000130 	.word	0x10000130
    16e4:	10000134 	.word	0x10000134

000016e8 <nordicsemi_nrf52_init>:
{
	SystemCoreClock = __SYSTEM_CLOCK_64M;
}

static int nordicsemi_nrf52_init(struct device *arg)
{
    16e8:	b508      	push	{r3, lr}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
    16ea:	f04f 0320 	mov.w	r3, #32
    16ee:	f3ef 8111 	mrs	r1, BASEPRI
    16f2:	f383 8811 	msr	BASEPRI, r3
	if (errata_36()) {
    16f6:	f7ff ffe7 	bl	16c8 <errata_103>
    16fa:	b140      	cbz	r0, 170e <nordicsemi_nrf52_init+0x26>
		NRF_CLOCK->EVENTS_DONE = 0;
    16fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1700:	2200      	movs	r2, #0
    1702:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		NRF_CLOCK->EVENTS_CTTO = 0;
    1706:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
		NRF_CLOCK->CTIV = 0;
    170a:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
	if (errata_98()) {
    170e:	f7ff ffdb 	bl	16c8 <errata_103>
    1712:	b110      	cbz	r0, 171a <nordicsemi_nrf52_init+0x32>
		*(volatile u32_t *)0x4000568Cul = 0x00038148ul;
    1714:	4b38      	ldr	r3, [pc, #224]	; (17f8 <nordicsemi_nrf52_init+0x110>)
    1716:	4a39      	ldr	r2, [pc, #228]	; (17fc <nordicsemi_nrf52_init+0x114>)
    1718:	601a      	str	r2, [r3, #0]
	if (errata_103()) {
    171a:	f7ff ffd5 	bl	16c8 <errata_103>
    171e:	b118      	cbz	r0, 1728 <nordicsemi_nrf52_init+0x40>
		NRF_CCM->MAXPACKETSIZE = 0xFBul;
    1720:	4b37      	ldr	r3, [pc, #220]	; (1800 <nordicsemi_nrf52_init+0x118>)
    1722:	22fb      	movs	r2, #251	; 0xfb
    1724:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	if (errata_115()) {
    1728:	f7ff ffce 	bl	16c8 <errata_103>
    172c:	b148      	cbz	r0, 1742 <nordicsemi_nrf52_init+0x5a>
			(*(volatile u32_t *) 0x40000EE4 & 0xFFFFFFF0) |
    172e:	4835      	ldr	r0, [pc, #212]	; (1804 <nordicsemi_nrf52_init+0x11c>)
			(*(u32_t *)0x10000258 & 0x0000000F);
    1730:	4b35      	ldr	r3, [pc, #212]	; (1808 <nordicsemi_nrf52_init+0x120>)
			(*(volatile u32_t *) 0x40000EE4 & 0xFFFFFFF0) |
    1732:	6802      	ldr	r2, [r0, #0]
			(*(u32_t *)0x10000258 & 0x0000000F);
    1734:	681b      	ldr	r3, [r3, #0]
			(*(volatile u32_t *) 0x40000EE4 & 0xFFFFFFF0) |
    1736:	f022 020f 	bic.w	r2, r2, #15
			(*(u32_t *)0x10000258 & 0x0000000F);
    173a:	f003 030f 	and.w	r3, r3, #15
			(*(volatile u32_t *) 0x40000EE4 & 0xFFFFFFF0) |
    173e:	4313      	orrs	r3, r2
		*(volatile u32_t *)0x40000EE4 =
    1740:	6003      	str	r3, [r0, #0]
	if (errata_120()) {
    1742:	f7ff ffc1 	bl	16c8 <errata_103>
    1746:	b118      	cbz	r0, 1750 <nordicsemi_nrf52_init+0x68>
		*(volatile u32_t *)0x40029640ul = 0x200ul;
    1748:	4b30      	ldr	r3, [pc, #192]	; (180c <nordicsemi_nrf52_init+0x124>)
    174a:	f44f 7200 	mov.w	r2, #512	; 0x200
    174e:	601a      	str	r2, [r3, #0]
	if (errata_136_nrf52840()) {
    1750:	f7ff ffba 	bl	16c8 <errata_103>
    1754:	b148      	cbz	r0, 176a <nordicsemi_nrf52_init+0x82>
		if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk) {
    1756:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    175a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    175e:	07d2      	lsls	r2, r2, #31
			NRF_POWER->RESETREAS = ~POWER_RESETREAS_RESETPIN_Msk;
    1760:	bf44      	itt	mi
    1762:	f06f 0201 	mvnmi.w	r2, #1
    1766:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
	if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
    176a:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    176e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    1772:	2a00      	cmp	r2, #0
    1774:	db03      	blt.n	177e <nordicsemi_nrf52_init+0x96>
	    ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) !=
    1776:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
	     (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    177a:	2b00      	cmp	r3, #0
    177c:	da2f      	bge.n	17de <nordicsemi_nrf52_init+0xf6>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    177e:	4b24      	ldr	r3, [pc, #144]	; (1810 <nordicsemi_nrf52_init+0x128>)
    1780:	2201      	movs	r2, #1
    1782:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
    1786:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    178a:	2a00      	cmp	r2, #0
    178c:	d0fb      	beq.n	1786 <nordicsemi_nrf52_init+0x9e>
		NRF_UICR->PSELRESET[0] = 18;
    178e:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
    1792:	2112      	movs	r1, #18
    1794:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
    1798:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    179c:	2a00      	cmp	r2, #0
    179e:	d0fb      	beq.n	1798 <nordicsemi_nrf52_init+0xb0>
		NRF_UICR->PSELRESET[1] = 18;
    17a0:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    17a4:	2212      	movs	r2, #18
    17a6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
    17aa:	4b19      	ldr	r3, [pc, #100]	; (1810 <nordicsemi_nrf52_init+0x128>)
    17ac:	461a      	mov	r2, r3
    17ae:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
    17b2:	2900      	cmp	r1, #0
    17b4:	d0fb      	beq.n	17ae <nordicsemi_nrf52_init+0xc6>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    17b6:	2100      	movs	r1, #0
    17b8:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
    17bc:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    17c0:	2b00      	cmp	r3, #0
    17c2:	d0fb      	beq.n	17bc <nordicsemi_nrf52_init+0xd4>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    17c4:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    17c8:	4912      	ldr	r1, [pc, #72]	; (1814 <nordicsemi_nrf52_init+0x12c>)
    17ca:	4b13      	ldr	r3, [pc, #76]	; (1818 <nordicsemi_nrf52_init+0x130>)
    17cc:	68ca      	ldr	r2, [r1, #12]
    17ce:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    17d2:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    17d4:	60cb      	str	r3, [r1, #12]
    17d6:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    17da:	bf00      	nop
    17dc:	e7fd      	b.n	17da <nordicsemi_nrf52_init+0xf2>
static ALWAYS_INLINE void _ClearFaults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    17de:	4b0d      	ldr	r3, [pc, #52]	; (1814 <nordicsemi_nrf52_init+0x12c>)
    17e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    17e4:	629a      	str	r2, [r3, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    17e6:	62da      	str	r2, [r3, #44]	; 0x2c
	SystemCoreClock = __SYSTEM_CLOCK_64M;
    17e8:	4b0c      	ldr	r3, [pc, #48]	; (181c <nordicsemi_nrf52_init+0x134>)
    17ea:	4a0d      	ldr	r2, [pc, #52]	; (1820 <nordicsemi_nrf52_init+0x138>)
    17ec:	601a      	str	r2, [r3, #0]
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    17ee:	f381 8811 	msr	BASEPRI, r1
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    17f2:	2000      	movs	r0, #0
    17f4:	bd08      	pop	{r3, pc}
    17f6:	bf00      	nop
    17f8:	4000568c 	.word	0x4000568c
    17fc:	00038148 	.word	0x00038148
    1800:	4000f000 	.word	0x4000f000
    1804:	40000ee4 	.word	0x40000ee4
    1808:	10000258 	.word	0x10000258
    180c:	40029640 	.word	0x40029640
    1810:	4001e000 	.word	0x4001e000
    1814:	e000ed00 	.word	0xe000ed00
    1818:	05fa0004 	.word	0x05fa0004
    181c:	20009ccc 	.word	0x20009ccc
    1820:	03d09000 	.word	0x03d09000

00001824 <_ExcExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    1824:	4808      	ldr	r0, [pc, #32]	; (1848 <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
    1826:	6881      	ldr	r1, [r0, #8]

    /*
     * Non-preemptible thread ? Do not schedule (see explanation of
     * preempt field in kernel_struct.h).
     */
    ldrh r2, [r1, #_thread_offset_to_preempt]
    1828:	894a      	ldrh	r2, [r1, #10]
    cmp r2, #_PREEMPT_THRESHOLD
    182a:	2a7f      	cmp	r2, #127	; 0x7f
    bhi _EXIT_EXC
    182c:	d80b      	bhi.n	1846 <_EXIT_EXC>

    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
    182e:	69c0      	ldr	r0, [r0, #28]
    cmp r0, r1
    1830:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    1832:	d008      	beq.n	1846 <_EXIT_EXC>

#ifdef CONFIG_TIMESLICING
    push {lr}
    1834:	b500      	push	{lr}
    bl _update_time_slice_before_swap
    1836:	f020 f985 	bl	21b44 <_update_time_slice_before_swap>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    pop {r0}
    mov lr, r0
#else
    pop {lr}
    183a:	f85d eb04 	ldr.w	lr, [sp], #4
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TIMESLICING */

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    183e:	4903      	ldr	r1, [pc, #12]	; (184c <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
    1840:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
    1844:	600a      	str	r2, [r1, #0]

00001846 <_EXIT_EXC>:
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

    bx lr
    1846:	4770      	bx	lr
    ldr r0, =_kernel
    1848:	20002ff8 	.word	0x20002ff8
    ldr r1, =_SCS_ICSR
    184c:	e000ed04 	.word	0xe000ed04

00001850 <_IntLibInit>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1850:	4804      	ldr	r0, [pc, #16]	; (1864 <_IntLibInit+0x14>)
 * @return N/A
 */

void _IntLibInit(void)
{
	int irq = 0;
    1852:	2300      	movs	r3, #0
    1854:	2120      	movs	r1, #32
    1856:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    1858:	3301      	adds	r3, #1
    185a:	2b2e      	cmp	r3, #46	; 0x2e
    185c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    1860:	d1f9      	bne.n	1856 <_IntLibInit+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    1862:	4770      	bx	lr
    1864:	e000e100 	.word	0xe000e100

00001868 <__swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    1868:	4a08      	ldr	r2, [pc, #32]	; (188c <__swap+0x24>)
	_current->arch.swap_return_value = _k_neg_eagain;
    186a:	4909      	ldr	r1, [pc, #36]	; (1890 <__swap+0x28>)
	_current->arch.basepri = key;
    186c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    186e:	6809      	ldr	r1, [r1, #0]
    1870:	6659      	str	r1, [r3, #100]	; 0x64

	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1872:	4908      	ldr	r1, [pc, #32]	; (1894 <__swap+0x2c>)
	_current->arch.basepri = key;
    1874:	6618      	str	r0, [r3, #96]	; 0x60
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1876:	684b      	ldr	r3, [r1, #4]
    1878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    187c:	604b      	str	r3, [r1, #4]
    187e:	2300      	movs	r3, #0
    1880:	f383 8811 	msr	BASEPRI, r3

	/* clear mask or enable all irqs to take a pendsv */
	irq_unlock(0);

	return _current->arch.swap_return_value;
    1884:	6893      	ldr	r3, [r2, #8]
}
    1886:	6e58      	ldr	r0, [r3, #100]	; 0x64
    1888:	4770      	bx	lr
    188a:	bf00      	nop
    188c:	20002ff8 	.word	0x20002ff8
    1890:	00027304 	.word	0x00027304
    1894:	e000ed00 	.word	0xe000ed00

00001898 <__pendsv>:
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_KERNEL_EVENT_LOGGER_CONTEXT_SWITCH  */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1898:	490e      	ldr	r1, [pc, #56]	; (18d4 <__pendsv+0x3c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    189a:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    189c:	2028      	movs	r0, #40	; 0x28
    add r0, r2
    189e:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
    18a0:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    18a4:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
    18a8:	4f0b      	ldr	r7, [pc, #44]	; (18d8 <__pendsv+0x40>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    18aa:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    18ae:	2020      	movs	r0, #32
    msr BASEPRI, r0
    18b0:	f380 8811 	msr	BASEPRI, r0
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, _kernel_offset_to_ready_q_cache]
    18b4:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    18b6:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
    18b8:	603e      	str	r6, [r7, #0]

    /* Restore previous interrupt disable state (irq_lock key) */
    ldr r0, [r2, #_thread_offset_to_basepri]
    18ba:	6e10      	ldr	r0, [r2, #96]	; 0x60
    movs.n r3, #0
    18bc:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    18be:	6613      	str	r3, [r2, #96]	; 0x60
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    18c0:	f380 8811 	msr	BASEPRI, r0
    blx configure_mpu_user_context
    pop {r2, lr}
#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    18c4:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
    18c8:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    msr PSP, ip
    18cc:	f38c 8809 	msr	PSP, ip
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
    ldm sp!,{r0-r3} /* Load back regs ro to r4 */
#endif /* CONFIG_EXECUTION_BENCHMARKING */

    /* exc return */
    bx lr
    18d0:	4770      	bx	lr
    18d2:	0000      	.short	0x0000
    ldr r1, =_kernel
    18d4:	20002ff8 	.word	0x20002ff8
    ldr v4, =_SCS_ICSR
    18d8:	e000ed04 	.word	0xe000ed04

000018dc <__svc>:
 *
 * @return N/A
 */

SECTION_FUNC(TEXT, __svc)
    tst lr, #0x4    /* did we come from thread mode ? */
    18dc:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    18e0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    18e2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    18e6:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    18ea:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read  encoding */
    ldrh r1, [r1, #-2]
    18ec:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 2: kernel panic or oops (software generated fatal exception)
    * 3: System call
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
    18f0:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    tst r2, #0x1
    bne _oops

    cmp r1, #0
#endif
    beq _context_switch
    18f4:	d001      	beq.n	18fa <_context_switch>

    cmp r1, #2
    18f6:	2902      	cmp	r1, #2
    beq _oops
    18f8:	d007      	beq.n	190a <_oops>

000018fa <_context_switch>:
    /*
     * Unlock interrupts:
     * - in a SVC call, so protected against context switches
     * - allow PendSV, since it's running at prio 0xff
     */
    eors.n r0, r0
    18fa:	4040      	eors	r0, r0
    msr BASEPRI, r0
    18fc:	f380 8811 	msr	BASEPRI, r0

     /* set PENDSV bit, pending the PendSV exception */
    ldr r1, =_SCS_ICSR
    1900:	4904      	ldr	r1, [pc, #16]	; (1914 <_oops+0xa>)
    ldr r2, =_SCS_ICSR_PENDSV
    1902:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1, #0]
    1906:	600a      	str	r2, [r1, #0]

    /* handler mode exit, to PendSV */
    bx lr
    1908:	4770      	bx	lr

0000190a <_oops>:

_oops:
    push {lr}
    190a:	b500      	push	{lr}
    blx _do_kernel_oops
    190c:	f000 fa30 	bl	1d70 <_do_kernel_oops>
    pop {pc}
    1910:	bd00      	pop	{pc}
    1912:	0000      	.short	0x0000
    ldr r1, =_SCS_ICSR
    1914:	e000ed04 	.word	0xe000ed04

00001918 <_FaultThreadShow.isra.2>:
 *
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _FaultThreadShow(const NANO_ESF *esf)
    1918:	b510      	push	{r4, lr}
    191a:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    191c:	f020 f8e8 	bl	21af0 <_impl_k_current_get>
{
	PR_EXC("  Executing thread ID (thread): %p\n"
    1920:	6822      	ldr	r2, [r4, #0]
    1922:	4601      	mov	r1, r0
	       "  Faulting instruction address:  0x%x\n",
	       k_current_get(), esf->pc);
}
    1924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PR_EXC("  Executing thread ID (thread): %p\n"
    1928:	4801      	ldr	r0, [pc, #4]	; (1930 <_FaultThreadShow.isra.2+0x18>)
    192a:	f000 bcb3 	b.w	2294 <printk>
    192e:	bf00      	nop
    1930:	00022f7b 	.word	0x00022f7b

00001934 <_UsageFault>:
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _UsageFault(const NANO_ESF *esf)
{
    1934:	b510      	push	{r4, lr}
    1936:	4604      	mov	r4, r0
	PR_EXC("***** USAGE FAULT *****\n");
    1938:	481a      	ldr	r0, [pc, #104]	; (19a4 <_UsageFault+0x70>)
    193a:	f000 fcab 	bl	2294 <printk>

	_FaultThreadShow(esf);
    193e:	f104 0018 	add.w	r0, r4, #24

	/* bits are sticky: they stack and must be reset */
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
    1942:	4c19      	ldr	r4, [pc, #100]	; (19a8 <_UsageFault+0x74>)
	_FaultThreadShow(esf);
    1944:	f7ff ffe8 	bl	1918 <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
    1948:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    194a:	019a      	lsls	r2, r3, #6
    194c:	d502      	bpl.n	1954 <_UsageFault+0x20>
		PR_EXC("  Division by zero\n");
    194e:	4817      	ldr	r0, [pc, #92]	; (19ac <_UsageFault+0x78>)
    1950:	f000 fca0 	bl	2294 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) {
    1954:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1956:	01db      	lsls	r3, r3, #7
    1958:	d502      	bpl.n	1960 <_UsageFault+0x2c>
		PR_EXC("  Unaligned memory access\n");
    195a:	4815      	ldr	r0, [pc, #84]	; (19b0 <_UsageFault+0x7c>)
    195c:	f000 fc9a 	bl	2294 <printk>
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if (SCB->CFSR & SCB_CFSR_STKOF_Msk) {
		PR_EXC("  Stack overflow\n");
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if (SCB->CFSR & SCB_CFSR_NOCP_Msk) {
    1960:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1962:	0318      	lsls	r0, r3, #12
    1964:	d502      	bpl.n	196c <_UsageFault+0x38>
		PR_EXC("  No coprocessor instructions\n");
    1966:	4813      	ldr	r0, [pc, #76]	; (19b4 <_UsageFault+0x80>)
    1968:	f000 fc94 	bl	2294 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVPC_Msk) {
    196c:	4c0e      	ldr	r4, [pc, #56]	; (19a8 <_UsageFault+0x74>)
    196e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1970:	0359      	lsls	r1, r3, #13
    1972:	d502      	bpl.n	197a <_UsageFault+0x46>
		PR_EXC("  Illegal load of EXC_RETURN into PC\n");
    1974:	4810      	ldr	r0, [pc, #64]	; (19b8 <_UsageFault+0x84>)
    1976:	f000 fc8d 	bl	2294 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVSTATE_Msk) {
    197a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    197c:	039a      	lsls	r2, r3, #14
    197e:	d502      	bpl.n	1986 <_UsageFault+0x52>
		PR_EXC("  Illegal use of the EPSR\n");
    1980:	480e      	ldr	r0, [pc, #56]	; (19bc <_UsageFault+0x88>)
    1982:	f000 fc87 	bl	2294 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) {
    1986:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1988:	03db      	lsls	r3, r3, #15
    198a:	d502      	bpl.n	1992 <_UsageFault+0x5e>
		PR_EXC("  Attempt to execute undefined instruction\n");
    198c:	480c      	ldr	r0, [pc, #48]	; (19c0 <_UsageFault+0x8c>)
    198e:	f000 fc81 	bl	2294 <printk>
	}

	/* clear USFR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1992:	4a05      	ldr	r2, [pc, #20]	; (19a8 <_UsageFault+0x74>)
    1994:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1996:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    199a:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    199e:	6293      	str	r3, [r2, #40]	; 0x28
    19a0:	bd10      	pop	{r4, pc}
    19a2:	bf00      	nop
    19a4:	0002307c 	.word	0x0002307c
    19a8:	e000ed00 	.word	0xe000ed00
    19ac:	00023095 	.word	0x00023095
    19b0:	000230a9 	.word	0x000230a9
    19b4:	000230c4 	.word	0x000230c4
    19b8:	000230e3 	.word	0x000230e3
    19bc:	00023109 	.word	0x00023109
    19c0:	00023124 	.word	0x00023124

000019c4 <_MpuFault>:
{
    19c4:	b538      	push	{r3, r4, r5, lr}
    19c6:	4604      	mov	r4, r0
	PR_EXC("***** MPU FAULT *****\n");
    19c8:	4819      	ldr	r0, [pc, #100]	; (1a30 <_MpuFault+0x6c>)
{
    19ca:	460d      	mov	r5, r1
	PR_EXC("***** MPU FAULT *****\n");
    19cc:	f000 fc62 	bl	2294 <printk>
	_FaultThreadShow(esf);
    19d0:	f104 0018 	add.w	r0, r4, #24
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    19d4:	4c17      	ldr	r4, [pc, #92]	; (1a34 <_MpuFault+0x70>)
	_FaultThreadShow(esf);
    19d6:	f7ff ff9f 	bl	1918 <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    19da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    19dc:	06d9      	lsls	r1, r3, #27
    19de:	d504      	bpl.n	19ea <_MpuFault+0x26>
		PR_EXC("  Stacking error\n");
    19e0:	4815      	ldr	r0, [pc, #84]	; (1a38 <_MpuFault+0x74>)
}
    19e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		PR_EXC("  Floating-point lazy state preservation error\n");
    19e6:	f000 bc55 	b.w	2294 <printk>
	} else if (SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) {
    19ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    19ec:	071a      	lsls	r2, r3, #28
    19ee:	d501      	bpl.n	19f4 <_MpuFault+0x30>
		PR_EXC("  Unstacking error\n");
    19f0:	4812      	ldr	r0, [pc, #72]	; (1a3c <_MpuFault+0x78>)
    19f2:	e7f6      	b.n	19e2 <_MpuFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) {
    19f4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    19f6:	079b      	lsls	r3, r3, #30
    19f8:	d50f      	bpl.n	1a1a <_MpuFault+0x56>
		PR_EXC("  Data Access Violation\n");
    19fa:	4811      	ldr	r0, [pc, #68]	; (1a40 <_MpuFault+0x7c>)
    19fc:	f000 fc4a 	bl	2294 <printk>
		STORE_xFAR(mmfar, SCB->MMFAR);
    1a00:	6b61      	ldr	r1, [r4, #52]	; 0x34
		if (SCB->CFSR & SCB_CFSR_MMARVALID_Msk) {
    1a02:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1a04:	0618      	lsls	r0, r3, #24
    1a06:	d512      	bpl.n	1a2e <_MpuFault+0x6a>
			PR_EXC("  Address: 0x%x\n", mmfar);
    1a08:	480e      	ldr	r0, [pc, #56]	; (1a44 <_MpuFault+0x80>)
    1a0a:	f000 fc43 	bl	2294 <printk>
			if (fromHardFault) {
    1a0e:	b175      	cbz	r5, 1a2e <_MpuFault+0x6a>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1a10:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1a12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    1a16:	62a3      	str	r3, [r4, #40]	; 0x28
    1a18:	bd38      	pop	{r3, r4, r5, pc}
	} else if (SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) {
    1a1a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1a1c:	07da      	lsls	r2, r3, #31
    1a1e:	d501      	bpl.n	1a24 <_MpuFault+0x60>
		PR_EXC("  Instruction Access Violation\n");
    1a20:	4809      	ldr	r0, [pc, #36]	; (1a48 <_MpuFault+0x84>)
    1a22:	e7de      	b.n	19e2 <_MpuFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_MLSPERR_Msk) {
    1a24:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1a26:	069b      	lsls	r3, r3, #26
    1a28:	d501      	bpl.n	1a2e <_MpuFault+0x6a>
		PR_EXC("  Floating-point lazy state preservation error\n");
    1a2a:	4808      	ldr	r0, [pc, #32]	; (1a4c <_MpuFault+0x88>)
    1a2c:	e7d9      	b.n	19e2 <_MpuFault+0x1e>
    1a2e:	bd38      	pop	{r3, r4, r5, pc}
    1a30:	00022fc5 	.word	0x00022fc5
    1a34:	e000ed00 	.word	0xe000ed00
    1a38:	00022fdc 	.word	0x00022fdc
    1a3c:	00022fee 	.word	0x00022fee
    1a40:	00023002 	.word	0x00023002
    1a44:	0002301b 	.word	0x0002301b
    1a48:	0002302c 	.word	0x0002302c
    1a4c:	0002304c 	.word	0x0002304c

00001a50 <_BusFault>:
{
    1a50:	b538      	push	{r3, r4, r5, lr}
    1a52:	4604      	mov	r4, r0
	PR_EXC("***** BUS FAULT *****\n");
    1a54:	481d      	ldr	r0, [pc, #116]	; (1acc <_BusFault+0x7c>)
{
    1a56:	460d      	mov	r5, r1
	PR_EXC("***** BUS FAULT *****\n");
    1a58:	f000 fc1c 	bl	2294 <printk>
	_FaultThreadShow(esf);
    1a5c:	f104 0018 	add.w	r0, r4, #24
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1a60:	4c1b      	ldr	r4, [pc, #108]	; (1ad0 <_BusFault+0x80>)
	_FaultThreadShow(esf);
    1a62:	f7ff ff59 	bl	1918 <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1a66:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1a68:	04d8      	lsls	r0, r3, #19
    1a6a:	d504      	bpl.n	1a76 <_BusFault+0x26>
		PR_EXC("  Stacking error\n");
    1a6c:	4819      	ldr	r0, [pc, #100]	; (1ad4 <_BusFault+0x84>)
}
    1a6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		PR_EXC("  Floating-point lazy state preservation error\n");
    1a72:	f000 bc0f 	b.w	2294 <printk>
	} else if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1a76:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1a78:	0519      	lsls	r1, r3, #20
    1a7a:	d501      	bpl.n	1a80 <_BusFault+0x30>
		PR_EXC("  Unstacking error\n");
    1a7c:	4816      	ldr	r0, [pc, #88]	; (1ad8 <_BusFault+0x88>)
    1a7e:	e7f6      	b.n	1a6e <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1a80:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1a82:	059a      	lsls	r2, r3, #22
    1a84:	d514      	bpl.n	1ab0 <_BusFault+0x60>
		PR_EXC("  Precise data bus error\n");
    1a86:	4815      	ldr	r0, [pc, #84]	; (1adc <_BusFault+0x8c>)
    1a88:	f000 fc04 	bl	2294 <printk>
		STORE_xFAR(bfar, SCB->BFAR);
    1a8c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
		if (SCB->CFSR & SCB_CFSR_BFARVALID_Msk) {
    1a8e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1a90:	041b      	lsls	r3, r3, #16
    1a92:	d507      	bpl.n	1aa4 <_BusFault+0x54>
			PR_EXC("  Address: 0x%x\n", bfar);
    1a94:	4812      	ldr	r0, [pc, #72]	; (1ae0 <_BusFault+0x90>)
    1a96:	f000 fbfd 	bl	2294 <printk>
			if (fromHardFault) {
    1a9a:	b11d      	cbz	r5, 1aa4 <_BusFault+0x54>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1a9c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1a9e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    1aa2:	62a3      	str	r3, [r4, #40]	; 0x28
		if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1aa4:	4b0a      	ldr	r3, [pc, #40]	; (1ad0 <_BusFault+0x80>)
    1aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1aa8:	0558      	lsls	r0, r3, #21
    1aaa:	d50e      	bpl.n	1aca <_BusFault+0x7a>
			PR_EXC("  Imprecise data bus error\n");
    1aac:	480d      	ldr	r0, [pc, #52]	; (1ae4 <_BusFault+0x94>)
    1aae:	e7de      	b.n	1a6e <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1ab0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1ab2:	0559      	lsls	r1, r3, #21
    1ab4:	d4fa      	bmi.n	1aac <_BusFault+0x5c>
	} else if (SCB->CFSR & SCB_CFSR_IBUSERR_Msk) {
    1ab6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1ab8:	05da      	lsls	r2, r3, #23
    1aba:	d501      	bpl.n	1ac0 <_BusFault+0x70>
		PR_EXC("  Instruction bus error\n");
    1abc:	480a      	ldr	r0, [pc, #40]	; (1ae8 <_BusFault+0x98>)
    1abe:	e7d6      	b.n	1a6e <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1ac0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1ac2:	049b      	lsls	r3, r3, #18
    1ac4:	d501      	bpl.n	1aca <_BusFault+0x7a>
		PR_EXC("  Floating-point lazy state preservation error\n");
    1ac6:	4809      	ldr	r0, [pc, #36]	; (1aec <_BusFault+0x9c>)
    1ac8:	e7d1      	b.n	1a6e <_BusFault+0x1e>
    1aca:	bd38      	pop	{r3, r4, r5, pc}
    1acc:	00022e42 	.word	0x00022e42
    1ad0:	e000ed00 	.word	0xe000ed00
    1ad4:	00022fdc 	.word	0x00022fdc
    1ad8:	00022fee 	.word	0x00022fee
    1adc:	00022e59 	.word	0x00022e59
    1ae0:	0002301b 	.word	0x0002301b
    1ae4:	00022e73 	.word	0x00022e73
    1ae8:	00022e8f 	.word	0x00022e8f
    1aec:	0002304c 	.word	0x0002304c

00001af0 <_Fault>:
 *
 * @param esf ESF on the stack, either MSP or PSP depending at what processor
 *            state the exception was taken.
 */
void _Fault(const NANO_ESF *esf)
{
    1af0:	b538      	push	{r3, r4, r5, lr}
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1af2:	4d27      	ldr	r5, [pc, #156]	; (1b90 <_Fault+0xa0>)
    1af4:	686b      	ldr	r3, [r5, #4]
    1af6:	f3c3 0308 	ubfx	r3, r3, #0, #9
	switch (fault) {
    1afa:	1eda      	subs	r2, r3, #3
{
    1afc:	4604      	mov	r4, r0
	switch (fault) {
    1afe:	2a09      	cmp	r2, #9
    1b00:	d83a      	bhi.n	1b78 <_Fault+0x88>
    1b02:	e8df f002 	tbb	[pc, r2]
    1b06:	3305      	.short	0x3305
    1b08:	39392f35 	.word	0x39392f35
    1b0c:	37393939 	.word	0x37393939
	PR_EXC("***** HARD FAULT *****\n");
    1b10:	4820      	ldr	r0, [pc, #128]	; (1b94 <_Fault+0xa4>)
    1b12:	f000 fbbf 	bl	2294 <printk>
	if (SCB->HFSR & SCB_HFSR_VECTTBL_Msk) {
    1b16:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    1b18:	079a      	lsls	r2, r3, #30
    1b1a:	d503      	bpl.n	1b24 <_Fault+0x34>
		PR_EXC("  Bus fault on vector table read\n");
    1b1c:	481e      	ldr	r0, [pc, #120]	; (1b98 <_Fault+0xa8>)
	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
    1b1e:	f000 fbb9 	bl	2294 <printk>
    1b22:	e00c      	b.n	1b3e <_Fault+0x4e>
	} else if (SCB->HFSR & SCB_HFSR_FORCED_Msk) {
    1b24:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    1b26:	005b      	lsls	r3, r3, #1
    1b28:	d509      	bpl.n	1b3e <_Fault+0x4e>
		PR_EXC("  Fault escalation (see below)\n");
    1b2a:	481c      	ldr	r0, [pc, #112]	; (1b9c <_Fault+0xac>)
    1b2c:	f000 fbb2 	bl	2294 <printk>
		if (SCB_MMFSR) {
    1b30:	4b1b      	ldr	r3, [pc, #108]	; (1ba0 <_Fault+0xb0>)
    1b32:	781b      	ldrb	r3, [r3, #0]
    1b34:	b14b      	cbz	r3, 1b4a <_Fault+0x5a>
			_MpuFault(esf, 1);
    1b36:	2101      	movs	r1, #1
		_MpuFault(esf, 0);
    1b38:	4620      	mov	r0, r4
    1b3a:	f7ff ff43 	bl	19c4 <_MpuFault>

	FAULT_DUMP(esf, fault);

	_SysFatalErrorHandler(_NANO_ERR_HW_EXCEPTION, esf);
    1b3e:	4621      	mov	r1, r4
    1b40:	2000      	movs	r0, #0
}
    1b42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(_NANO_ERR_HW_EXCEPTION, esf);
    1b46:	f000 b917 	b.w	1d78 <_SysFatalErrorHandler>
		} else if (SCB_BFSR) {
    1b4a:	4b16      	ldr	r3, [pc, #88]	; (1ba4 <_Fault+0xb4>)
    1b4c:	781b      	ldrb	r3, [r3, #0]
    1b4e:	b123      	cbz	r3, 1b5a <_Fault+0x6a>
			_BusFault(esf, 1);
    1b50:	2101      	movs	r1, #1
		_BusFault(esf, 0);
    1b52:	4620      	mov	r0, r4
    1b54:	f7ff ff7c 	bl	1a50 <_BusFault>
    1b58:	e7f1      	b.n	1b3e <_Fault+0x4e>
		} else if (SCB_UFSR) {
    1b5a:	4b13      	ldr	r3, [pc, #76]	; (1ba8 <_Fault+0xb8>)
    1b5c:	881b      	ldrh	r3, [r3, #0]
    1b5e:	b29b      	uxth	r3, r3
    1b60:	2b00      	cmp	r3, #0
    1b62:	d0ec      	beq.n	1b3e <_Fault+0x4e>
		_UsageFault(esf);
    1b64:	4620      	mov	r0, r4
    1b66:	f7ff fee5 	bl	1934 <_UsageFault>
    1b6a:	e7e8      	b.n	1b3e <_Fault+0x4e>
		_MpuFault(esf, 0);
    1b6c:	2100      	movs	r1, #0
    1b6e:	e7e3      	b.n	1b38 <_Fault+0x48>
		_BusFault(esf, 0);
    1b70:	2100      	movs	r1, #0
    1b72:	e7ee      	b.n	1b52 <_Fault+0x62>
	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
    1b74:	480d      	ldr	r0, [pc, #52]	; (1bac <_Fault+0xbc>)
    1b76:	e7d2      	b.n	1b1e <_Fault+0x2e>
	PR_EXC("***** %s %d) *****\n",
    1b78:	480d      	ldr	r0, [pc, #52]	; (1bb0 <_Fault+0xc0>)
    1b7a:	490e      	ldr	r1, [pc, #56]	; (1bb4 <_Fault+0xc4>)
    1b7c:	f1a3 0210 	sub.w	r2, r3, #16
    1b80:	2b0f      	cmp	r3, #15
    1b82:	bfd8      	it	le
    1b84:	4601      	movle	r1, r0
    1b86:	480c      	ldr	r0, [pc, #48]	; (1bb8 <_Fault+0xc8>)
    1b88:	f000 fb84 	bl	2294 <printk>
    1b8c:	e7d7      	b.n	1b3e <_Fault+0x4e>
    1b8e:	bf00      	nop
    1b90:	e000ed00 	.word	0xe000ed00
    1b94:	00022ed6 	.word	0x00022ed6
    1b98:	00022eee 	.word	0x00022eee
    1b9c:	00022f10 	.word	0x00022f10
    1ba0:	e000ed28 	.word	0xe000ed28
    1ba4:	e000ed29 	.word	0xe000ed29
    1ba8:	e000ed2a 	.word	0xe000ed2a
    1bac:	00022f30 	.word	0x00022f30
    1bb0:	00022ea8 	.word	0x00022ea8
    1bb4:	00022ebd 	.word	0x00022ebd
    1bb8:	00022f67 	.word	0x00022f67

00001bbc <_FaultInit>:
 */
void _FaultInit(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1bbc:	4a02      	ldr	r2, [pc, #8]	; (1bc8 <_FaultInit+0xc>)
    1bbe:	6953      	ldr	r3, [r2, #20]
    1bc0:	f043 0310 	orr.w	r3, r3, #16
    1bc4:	6153      	str	r3, [r2, #20]
    1bc6:	4770      	bx	lr
    1bc8:	e000ed00 	.word	0xe000ed00

00001bcc <_arch_irq_enable>:
 *
 * @return N/A
 */
void _arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1bcc:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    1bce:	2b00      	cmp	r3, #0
    1bd0:	db08      	blt.n	1be4 <_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1bd2:	2201      	movs	r2, #1
    1bd4:	f000 001f 	and.w	r0, r0, #31
    1bd8:	fa02 f000 	lsl.w	r0, r2, r0
    1bdc:	095b      	lsrs	r3, r3, #5
    1bde:	4a02      	ldr	r2, [pc, #8]	; (1be8 <_arch_irq_enable+0x1c>)
    1be0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    1be4:	4770      	bx	lr
    1be6:	bf00      	nop
    1be8:	e000e100 	.word	0xe000e100

00001bec <_arch_irq_disable>:
 *
 * @return N/A
 */
void _arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    1bec:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    1bee:	2b00      	cmp	r3, #0
    1bf0:	db0d      	blt.n	1c0e <_arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1bf2:	2201      	movs	r2, #1
    1bf4:	095b      	lsrs	r3, r3, #5
    1bf6:	f000 001f 	and.w	r0, r0, #31
    1bfa:	fa02 f000 	lsl.w	r0, r2, r0
    1bfe:	3320      	adds	r3, #32
    1c00:	4a03      	ldr	r2, [pc, #12]	; (1c10 <_arch_irq_disable+0x24>)
    1c02:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    1c06:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1c0a:	f3bf 8f6f 	isb	sy
    1c0e:	4770      	bx	lr
    1c10:	e000e100 	.word	0xe000e100

00001c14 <_arch_irq_is_enabled>:
 * @param irq IRQ line
 * @return interrupt enable state, true or false
 */
int _arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & (1 << BIT_FROM_IRQ(irq));
    1c14:	0942      	lsrs	r2, r0, #5
    1c16:	4b05      	ldr	r3, [pc, #20]	; (1c2c <_arch_irq_is_enabled+0x18>)
    1c18:	f000 001f 	and.w	r0, r0, #31
    1c1c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1c20:	2301      	movs	r3, #1
    1c22:	fa03 f000 	lsl.w	r0, r3, r0
}
    1c26:	4010      	ands	r0, r2
    1c28:	4770      	bx	lr
    1c2a:	bf00      	nop
    1c2c:	e000e100 	.word	0xe000e100

00001c30 <_irq_priority_set>:
	 */
	__ASSERT(prio <= ((1 << CONFIG_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << CONFIG_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    1c30:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    1c32:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1c34:	bfa8      	it	ge
    1c36:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
    1c3a:	f101 0101 	add.w	r1, r1, #1
    1c3e:	ea4f 1141 	mov.w	r1, r1, lsl #5
    1c42:	bfad      	iteet	ge
    1c44:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1c48:	f000 000f 	andlt.w	r0, r0, #15
    1c4c:	4b03      	ldrlt	r3, [pc, #12]	; (1c5c <_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1c4e:	b2c9      	uxtbge	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1c50:	bfb6      	itet	lt
    1c52:	b2c9      	uxtblt	r1, r1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1c54:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1c58:	5419      	strblt	r1, [r3, r0]
    1c5a:	4770      	bx	lr
    1c5c:	e000ed14 	.word	0xe000ed14

00001c60 <_irq_spurious>:
 * @return N/A
 */
void _irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	__reserved();
    1c60:	f000 b846 	b.w	1cf0 <__bus_fault>

00001c64 <_arch_isr_direct_pm>:
 * See https://jira.zephyrproject.org/browse/ZEP-1595
 */

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
    1c64:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    1c66:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    1c68:	4b04      	ldr	r3, [pc, #16]	; (1c7c <_arch_isr_direct_pm+0x18>)
    1c6a:	6998      	ldr	r0, [r3, #24]
    1c6c:	b118      	cbz	r0, 1c76 <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    1c6e:	2200      	movs	r2, #0
    1c70:	619a      	str	r2, [r3, #24]
		_sys_power_save_idle_exit(idle_val);
    1c72:	f01f fab9 	bl	211e8 <_sys_power_save_idle_exit>
	}

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    1c76:	b662      	cpsie	i
    1c78:	bd08      	pop	{r3, pc}
    1c7a:	bf00      	nop
    1c7c:	20002ff8 	.word	0x20002ff8

00001c80 <_new_thread>:

void _new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
    1c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1c82:	460c      	mov	r4, r1
    1c84:	4605      	mov	r5, r0
	ARG_UNUSED(pStack);
	ARG_UNUSED(stackSize);
#endif

#ifdef CONFIG_INIT_STACKS
	memset(pStack, 0xaa, stackSize);
    1c86:	21aa      	movs	r1, #170	; 0xaa
    1c88:	4620      	mov	r0, r4
    1c8a:	4616      	mov	r6, r2
    1c8c:	461f      	mov	r7, r3
    1c8e:	f7fe fdac 	bl	7ea <memset>
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
    1c92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1c94:	9909      	ldr	r1, [sp, #36]	; 0x24
    1c96:	2204      	movs	r2, #4
    1c98:	4628      	mov	r0, r5
    1c9a:	f020 fa51 	bl	22140 <_init_thread_base>

	_new_thread_init(thread, pStackMem, stackEnd - pStackMem, priority,
			 options);

	/* carve the thread entry struct from the "base" of the stack */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    1c9e:	f1a6 0120 	sub.w	r1, r6, #32
    1ca2:	4421      	add	r1, r4
#else
	pInitCtx->pc = (u32_t)_thread_entry;
#endif

	/* force ARM mode by clearing LSB of address */
	pInitCtx->pc &= 0xfffffffe;
    1ca4:	4a0b      	ldr	r2, [pc, #44]	; (1cd4 <_new_thread+0x54>)
#if defined(CONFIG_USERSPACE)
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (u32_t)pStack;
    1ca6:	65ac      	str	r4, [r5, #88]	; 0x58
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    1ca8:	f021 0107 	bic.w	r1, r1, #7
	thread->init_data = NULL;
    1cac:	2300      	movs	r3, #0
	pInitCtx->pc &= 0xfffffffe;
    1cae:	f022 0201 	bic.w	r2, r2, #1
    1cb2:	64eb      	str	r3, [r5, #76]	; 0x4c
	thread->fn_abort = NULL;
    1cb4:	652b      	str	r3, [r5, #80]	; 0x50
	thread->stack_info.size = (u32_t)stackSize;
    1cb6:	65ee      	str	r6, [r5, #92]	; 0x5c
    1cb8:	618a      	str	r2, [r1, #24]

	pInitCtx->a1 = (u32_t)pEntry;
	pInitCtx->a2 = (u32_t)parameter1;
    1cba:	9a06      	ldr	r2, [sp, #24]
    1cbc:	604a      	str	r2, [r1, #4]
	pInitCtx->a3 = (u32_t)parameter2;
    1cbe:	9a07      	ldr	r2, [sp, #28]
    1cc0:	608a      	str	r2, [r1, #8]
	pInitCtx->a4 = (u32_t)parameter3;
    1cc2:	9a08      	ldr	r2, [sp, #32]
    1cc4:	60ca      	str	r2, [r1, #12]
	pInitCtx->a1 = (u32_t)pEntry;
    1cc6:	600f      	str	r7, [r1, #0]
	pInitCtx->xpsr =
    1cc8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    1ccc:	61ca      	str	r2, [r1, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
    1cce:	64a9      	str	r1, [r5, #72]	; 0x48
	thread->arch.basepri = 0;
    1cd0:	662b      	str	r3, [r5, #96]	; 0x60
    1cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1cd4:	00021fb5 	.word	0x00021fb5

00001cd8 <_CpuIdleInit>:
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
    1cd8:	4901      	ldr	r1, [pc, #4]	; (1ce0 <_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    1cda:	2210      	movs	r2, #16
	str r2, [r1]
    1cdc:	600a      	str	r2, [r1, #0]
	bx lr
    1cde:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    1ce0:	e000ed10 	.word	0xe000ed10

00001ce4 <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    1ce4:	4040      	eors	r0, r0
	msr BASEPRI, r0
    1ce6:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    1cea:	bf30      	wfi

	bx lr
    1cec:	4770      	bx	lr
    1cee:	bf00      	nop

00001cf0 <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
    1cf0:	4040      	eors	r0, r0
	msr BASEPRI, r0
    1cf2:	f380 8811 	msr	BASEPRI, r0

	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
    1cf6:	f8df c01c 	ldr.w	ip, [pc, #28]	; 1d14 <__bus_fault+0x24>
	ldr ip, [ip]
    1cfa:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
    1cfe:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
    1d02:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
    1d04:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
    1d08:	f3ef 8009 	mrsne	r0, PSP
				 * frame is on the PSP */
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	push {lr}
    1d0c:	b500      	push	{lr}
	bl _Fault
    1d0e:	f7ff feef 	bl	1af0 <_Fault>

	pop {pc}
    1d12:	bd00      	pop	{pc}
	ldr ip, =_SCS_ICSR
    1d14:	e000ed04 	.word	0xe000ed04

00001d18 <_NanoFatalErrorHandler>:
 * @param pEsf pointer to the exception stack frame
 */
void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
	switch (reason) {
    1d18:	2804      	cmp	r0, #4
{
    1d1a:	b538      	push	{r3, r4, r5, lr}
    1d1c:	4604      	mov	r4, r0
    1d1e:	460d      	mov	r5, r1
	switch (reason) {
    1d20:	d013      	beq.n	1d4a <_NanoFatalErrorHandler+0x32>
    1d22:	2805      	cmp	r0, #5
    1d24:	d013      	beq.n	1d4e <_NanoFatalErrorHandler+0x36>
    1d26:	2803      	cmp	r0, #3
    1d28:	d113      	bne.n	1d52 <_NanoFatalErrorHandler+0x3a>
		printk("***** Stack Check Fail! *****\n");
		break;
#endif /* CONFIG_STACK_CANARIES */

	case _NANO_ERR_ALLOCATION_FAIL:
		printk("**** Kernel Allocation Failure! ****\n");
    1d2a:	480c      	ldr	r0, [pc, #48]	; (1d5c <_NanoFatalErrorHandler+0x44>)
		break;

	case _NANO_ERR_KERNEL_OOPS:
		printk("***** Kernel OOPS! *****\n");
    1d2c:	f000 fab2 	bl	2294 <printk>
    1d30:	f01f fede 	bl	21af0 <_impl_k_current_get>

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
		break;
	}
	printk("Current thread ID = %p\n"
    1d34:	69aa      	ldr	r2, [r5, #24]
    1d36:	4601      	mov	r1, r0
    1d38:	4809      	ldr	r0, [pc, #36]	; (1d60 <_NanoFatalErrorHandler+0x48>)
    1d3a:	f000 faab 	bl	2294 <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	_SysFatalErrorHandler(reason, pEsf);
    1d3e:	4629      	mov	r1, r5
    1d40:	4620      	mov	r0, r4
}
    1d42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(reason, pEsf);
    1d46:	f000 b817 	b.w	1d78 <_SysFatalErrorHandler>
		printk("***** Kernel OOPS! *****\n");
    1d4a:	4806      	ldr	r0, [pc, #24]	; (1d64 <_NanoFatalErrorHandler+0x4c>)
    1d4c:	e7ee      	b.n	1d2c <_NanoFatalErrorHandler+0x14>
		printk("***** Kernel Panic! *****\n");
    1d4e:	4806      	ldr	r0, [pc, #24]	; (1d68 <_NanoFatalErrorHandler+0x50>)
    1d50:	e7ec      	b.n	1d2c <_NanoFatalErrorHandler+0x14>
		printk("**** Unknown Fatal Error %d! ****\n", reason);
    1d52:	4601      	mov	r1, r0
    1d54:	4805      	ldr	r0, [pc, #20]	; (1d6c <_NanoFatalErrorHandler+0x54>)
    1d56:	f000 fa9d 	bl	2294 <printk>
		break;
    1d5a:	e7e9      	b.n	1d30 <_NanoFatalErrorHandler+0x18>
    1d5c:	00023150 	.word	0x00023150
    1d60:	000231ce 	.word	0x000231ce
    1d64:	00023176 	.word	0x00023176
    1d68:	00023190 	.word	0x00023190
    1d6c:	000231ab 	.word	0x000231ab

00001d70 <_do_kernel_oops>:

void _do_kernel_oops(const NANO_ESF *esf)
{
    1d70:	4601      	mov	r1, r0
	_NanoFatalErrorHandler(esf->r0, esf);
    1d72:	6800      	ldr	r0, [r0, #0]
    1d74:	f7ff bfd0 	b.w	1d18 <_NanoFatalErrorHandler>

00001d78 <_SysFatalErrorHandler>:
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    1d78:	2805      	cmp	r0, #5
{
    1d7a:	b510      	push	{r4, lr}
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    1d7c:	d00c      	beq.n	1d98 <_SysFatalErrorHandler+0x20>
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
    1d7e:	f020 f901 	bl	21f84 <k_is_in_isr>
    1d82:	b160      	cbz	r0, 1d9e <_SysFatalErrorHandler+0x26>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
    1d84:	f020 f8fe 	bl	21f84 <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
    1d88:	4b0c      	ldr	r3, [pc, #48]	; (1dbc <_SysFatalErrorHandler+0x44>)
    1d8a:	490d      	ldr	r1, [pc, #52]	; (1dc0 <_SysFatalErrorHandler+0x48>)
    1d8c:	2800      	cmp	r0, #0
    1d8e:	bf08      	it	eq
    1d90:	4619      	moveq	r1, r3
    1d92:	480c      	ldr	r0, [pc, #48]	; (1dc4 <_SysFatalErrorHandler+0x4c>)
    1d94:	f000 fa7e 	bl	2294 <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
    1d98:	f7ff ffa4 	bl	1ce4 <k_cpu_idle>
    1d9c:	e7fc      	b.n	1d98 <_SysFatalErrorHandler+0x20>
	if (k_is_in_isr() || _is_thread_essential()) {
    1d9e:	f020 f901 	bl	21fa4 <_is_thread_essential>
    1da2:	2800      	cmp	r0, #0
    1da4:	d1ee      	bne.n	1d84 <_SysFatalErrorHandler+0xc>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
    1da6:	4c08      	ldr	r4, [pc, #32]	; (1dc8 <_SysFatalErrorHandler+0x50>)
    1da8:	4808      	ldr	r0, [pc, #32]	; (1dcc <_SysFatalErrorHandler+0x54>)
    1daa:	68a1      	ldr	r1, [r4, #8]
    1dac:	f000 fa72 	bl	2294 <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
    1db0:	68a0      	ldr	r0, [r4, #8]
	}
	CODE_UNREACHABLE;
}
    1db2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1db6:	f000 b80b 	b.w	1dd0 <_impl_k_thread_abort>
    1dba:	bf00      	nop
    1dbc:	0002320e 	.word	0x0002320e
    1dc0:	0002320a 	.word	0x0002320a
    1dc4:	0002321f 	.word	0x0002321f
    1dc8:	20002ff8 	.word	0x20002ff8
    1dcc:	0002323f 	.word	0x0002323f

00001dd0 <_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void _k_thread_single_abort(struct k_thread *thread);

void _impl_k_thread_abort(k_tid_t thread)
{
    1dd0:	b538      	push	{r3, r4, r5, lr}
    1dd2:	4605      	mov	r5, r0
	__asm__ volatile(
    1dd4:	f04f 0320 	mov.w	r3, #32
    1dd8:	f3ef 8411 	mrs	r4, BASEPRI
    1ddc:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	_k_thread_single_abort(thread);
    1de0:	f020 f93e 	bl	22060 <_k_thread_single_abort>
	_thread_monitor_exit(thread);

	if (_current == thread) {
    1de4:	4b0b      	ldr	r3, [pc, #44]	; (1e14 <_impl_k_thread_abort+0x44>)
    1de6:	689b      	ldr	r3, [r3, #8]
    1de8:	429d      	cmp	r5, r3
    1dea:	d10d      	bne.n	1e08 <_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    1dec:	4b0a      	ldr	r3, [pc, #40]	; (1e18 <_impl_k_thread_abort+0x48>)
    1dee:	685a      	ldr	r2, [r3, #4]
    1df0:	f3c2 0208 	ubfx	r2, r2, #0, #9
    1df4:	b922      	cbnz	r2, 1e00 <_impl_k_thread_abort+0x30>
extern unsigned int __swap(unsigned int key);

static inline unsigned int _Swap(unsigned int key)
{
	_check_stack_sentinel();
	_update_time_slice_before_swap();
    1df6:	f01f fea5 	bl	21b44 <_update_time_slice_before_swap>

	return __swap(key);
    1dfa:	4620      	mov	r0, r4
    1dfc:	f7ff fd34 	bl	1868 <__swap>
			_Swap(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1e00:	685a      	ldr	r2, [r3, #4]
    1e02:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    1e06:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule_threads(key);
    1e08:	4620      	mov	r0, r4
}
    1e0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_reschedule_threads(key);
    1e0e:	f01f bdfd 	b.w	21a0c <_reschedule_threads>
    1e12:	bf00      	nop
    1e14:	20002ff8 	.word	0x20002ff8
    1e18:	e000ed00 	.word	0xe000ed00

00001e1c <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {lr}		/* lr is now the first item on the stack */
    1e1c:	b500      	push	{lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, _sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
    1e1e:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1e20:	4a0b      	ldr	r2, [pc, #44]	; (1e50 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    1e22:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    1e24:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	blx _sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    1e26:	bf1e      	ittt	ne
	movne	r1, #0
    1e28:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    1e2a:	6191      	strne	r1, [r2, #24]
		blxne	_sys_power_save_idle_exit
    1e2c:	f01f f9dc 	blne	211e8 <_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1e30:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
    1e32:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1e36:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1e3a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    1e3e:	4905      	ldr	r1, [pc, #20]	; (1e54 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1e40:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1e42:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r4 regs */
#endif
	blx r3		/* call ISR */
    1e44:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {lr}
    1e46:	f85d eb04 	ldr.w	lr, [sp], #4
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* exception return is done in _IntExit() */
	b _IntExit
    1e4a:	f7ff bceb 	b.w	1824 <_ExcExit>
    1e4e:	0000      	.short	0x0000
	ldr r2, =_kernel
    1e50:	20002ff8 	.word	0x20002ff8
	ldr r1, =_sw_isr_table
    1e54:	000000f8 	.word	0x000000f8

00001e58 <__reset>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1e58:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1e5a:	f380 8811 	msr	BASEPRI, r0
    /* board-specific watchdog initialization is necessary */
    bl _WdogInit
#endif

#ifdef CONFIG_INIT_STACKS
    ldr r0, =_interrupt_stack
    1e5e:	4808      	ldr	r0, [pc, #32]	; (1e80 <__reset+0x28>)
    ldr r1, =0xaa
    1e60:	21aa      	movs	r1, #170	; 0xaa
    ldr r2, =CONFIG_ISR_STACK_SIZE
    1e62:	f44f 6200 	mov.w	r2, #2048	; 0x800
    bl memset
    1e66:	f7fe fcc0 	bl	7ea <memset>

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialisation.
     */
    ldr r0, =_interrupt_stack
    1e6a:	4805      	ldr	r0, [pc, #20]	; (1e80 <__reset+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    1e6c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    1e70:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1e72:	f380 8809 	msr	PSP, r0
    movs.n r0, #2	/* switch to using PSP (bit1 of CONTROL reg) */
    1e76:	2002      	movs	r0, #2
    msr CONTROL, r0
    1e78:	f380 8814 	msr	CONTROL, r0

    b _PrepC
    1e7c:	f000 b806 	b.w	1e8c <_PrepC>
    ldr r0, =_interrupt_stack
    1e80:	20009068 	.word	0x20009068

00001e84 <_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(_SysNmiOnReset)

SECTION_FUNC(TEXT, _SysNmiOnReset)
    wfi
    1e84:	bf30      	wfi
    b _SysNmiOnReset
    1e86:	f7ff bffd 	b.w	1e84 <_SysNmiOnReset>
    1e8a:	bf00      	nop

00001e8c <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
    1e8c:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1e8e:	4b07      	ldr	r3, [pc, #28]	; (1eac <_PrepC+0x20>)
    1e90:	4a07      	ldr	r2, [pc, #28]	; (1eb0 <_PrepC+0x24>)
    1e92:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    1e96:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    1e98:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1e9c:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	_bss_zero();
    1ea0:	f01f fa1c 	bl	212dc <_bss_zero>
	_data_copy();
    1ea4:	f01f fa24 	bl	212f0 <_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0;
#endif
	_Cstart();
    1ea8:	f01f fa4a 	bl	21340 <_Cstart>
    1eac:	00000000 	.word	0x00000000
    1eb0:	e000ed00 	.word	0xe000ed00

00001eb4 <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
    1eb4:	b508      	push	{r3, lr}
	handler();
    1eb6:	f7ff ffe5 	bl	1e84 <_SysNmiOnReset>
	_ExcExit();
}
    1eba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	_ExcExit();
    1ebe:	f7ff bcb1 	b.w	1824 <_ExcExit>
	...

00001ec4 <arm_mpu_init>:
	}
}

static inline u8_t _get_num_regions(void)
{
	u32_t type = ARM_MPU_DEV->type;
    1ec4:	4b15      	ldr	r3, [pc, #84]	; (1f1c <arm_mpu_init+0x58>)
static void _arm_mpu_config(void)
{
	u32_t r_index;

	/* ARM MPU supports up to 16 Regions */
	if (mpu_config.num_regions > _get_num_regions()) {
    1ec6:	4916      	ldr	r1, [pc, #88]	; (1f20 <arm_mpu_init+0x5c>)
	u32_t type = ARM_MPU_DEV->type;
    1ec8:	681a      	ldr	r2, [r3, #0]
	__DSB();
	__ISB();
}

static int arm_mpu_init(struct device *arg)
{
    1eca:	b530      	push	{r4, r5, lr}
	if (mpu_config.num_regions > _get_num_regions()) {
    1ecc:	680d      	ldr	r5, [r1, #0]
    1ece:	f3c2 2207 	ubfx	r2, r2, #8, #8
    1ed2:	4295      	cmp	r5, r2
    1ed4:	d80f      	bhi.n	1ef6 <arm_mpu_init+0x32>
	ARM_MPU_DEV->ctrl = 0;
    1ed6:	2200      	movs	r2, #0
    1ed8:	6848      	ldr	r0, [r1, #4]
    1eda:	605a      	str	r2, [r3, #4]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
    1edc:	4295      	cmp	r5, r2
    1ede:	f100 000c 	add.w	r0, r0, #12
    1ee2:	d10a      	bne.n	1efa <arm_mpu_init+0x36>
	ARM_MPU_DEV->ctrl = ARM_MPU_ENABLE | ARM_MPU_PRIVDEFENA;
    1ee4:	2205      	movs	r2, #5
    1ee6:	605a      	str	r2, [r3, #4]
	arm_mpu_enabled = 1;
    1ee8:	4b0e      	ldr	r3, [pc, #56]	; (1f24 <arm_mpu_init+0x60>)
    1eea:	2201      	movs	r2, #1
    1eec:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
    1eee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1ef2:	f3bf 8f6f 	isb	sy
	ARG_UNUSED(arg);

	_arm_mpu_config();

	return 0;
}
    1ef6:	2000      	movs	r0, #0
    1ef8:	bd30      	pop	{r4, r5, pc}
		_region_init(r_index,
    1efa:	f850 1c0c 	ldr.w	r1, [r0, #-12]
    1efe:	f850 4c04 	ldr.w	r4, [r0, #-4]
	ARM_MPU_DEV->rnr = index;
    1f02:	609a      	str	r2, [r3, #8]
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
    1f04:	f021 011f 	bic.w	r1, r1, #31
				| REGION_VALID | index;
    1f08:	f041 0110 	orr.w	r1, r1, #16
    1f0c:	4311      	orrs	r1, r2
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
    1f0e:	f044 0401 	orr.w	r4, r4, #1
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
    1f12:	60d9      	str	r1, [r3, #12]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
    1f14:	3201      	adds	r2, #1
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
    1f16:	611c      	str	r4, [r3, #16]
    1f18:	e7e0      	b.n	1edc <arm_mpu_init+0x18>
    1f1a:	bf00      	nop
    1f1c:	e000ed90 	.word	0xe000ed90
    1f20:	20009c88 	.word	0x20009c88
    1f24:	20000104 	.word	0x20000104

00001f28 <_nop_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
    1f28:	2000      	movs	r0, #0
    1f2a:	4770      	bx	lr

00001f2c <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    1f2c:	680b      	ldr	r3, [r1, #0]
    1f2e:	3301      	adds	r3, #1
    1f30:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    1f32:	4b01      	ldr	r3, [pc, #4]	; (1f38 <char_out+0xc>)
    1f34:	681b      	ldr	r3, [r3, #0]
    1f36:	4718      	bx	r3
    1f38:	20009cd0 	.word	0x20009cd0

00001f3c <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    1f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1f40:	b085      	sub	sp, #20
    1f42:	469b      	mov	fp, r3
    1f44:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    1f46:	f8df a090 	ldr.w	sl, [pc, #144]	; 1fd8 <_printk_dec_ulong+0x9c>
    1f4a:	2c01      	cmp	r4, #1
    1f4c:	bfb8      	it	lt
    1f4e:	2401      	movlt	r4, #1
    1f50:	2b01      	cmp	r3, #1
    1f52:	bf0c      	ite	eq
    1f54:	2330      	moveq	r3, #48	; 0x30
    1f56:	2320      	movne	r3, #32
    1f58:	4615      	mov	r5, r2
    1f5a:	4680      	mov	r8, r0
    1f5c:	4689      	mov	r9, r1
    1f5e:	9401      	str	r4, [sp, #4]
    1f60:	9302      	str	r3, [sp, #8]
    1f62:	2601      	movs	r6, #1
    1f64:	270a      	movs	r7, #10
    1f66:	2200      	movs	r2, #0
    1f68:	f10a 0401 	add.w	r4, sl, #1
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
    1f6c:	b90a      	cbnz	r2, 1f72 <_printk_dec_ulong+0x36>
    1f6e:	45aa      	cmp	sl, r5
    1f70:	d21f      	bcs.n	1fb2 <_printk_dec_ulong+0x76>
			found_largest_digit = 1;
			out((int)((remainder / (pos + 1)) + 48), ctx);
    1f72:	fbb5 f0f4 	udiv	r0, r5, r4
    1f76:	4649      	mov	r1, r9
    1f78:	3030      	adds	r0, #48	; 0x30
    1f7a:	47c0      	blx	r8
			digits++;
    1f7c:	3601      	adds	r6, #1
			found_largest_digit = 1;
    1f7e:	2201      	movs	r2, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
    1f80:	3f01      	subs	r7, #1
	while (pos >= 9) {
    1f82:	2f01      	cmp	r7, #1
		remainder %= (pos + 1);
    1f84:	fbb5 f1f4 	udiv	r1, r5, r4
		pos /= 10;
    1f88:	f04f 030a 	mov.w	r3, #10
		remainder %= (pos + 1);
    1f8c:	fb04 5511 	mls	r5, r4, r1, r5
		pos /= 10;
    1f90:	fbba faf3 	udiv	sl, sl, r3
	while (pos >= 9) {
    1f94:	d1e8      	bne.n	1f68 <_printk_dec_ulong+0x2c>
	}
	out((int)(remainder + 48), ctx);
    1f96:	4649      	mov	r1, r9
    1f98:	f105 0030 	add.w	r0, r5, #48	; 0x30
    1f9c:	47c0      	blx	r8

	if (padding == PAD_SPACE_AFTER) {
    1f9e:	f1bb 0f03 	cmp.w	fp, #3
    1fa2:	d103      	bne.n	1fac <_printk_dec_ulong+0x70>
		remaining = min_width - digits;
    1fa4:	9b01      	ldr	r3, [sp, #4]
    1fa6:	1b9c      	subs	r4, r3, r6
		while (remaining-- > 0) {
    1fa8:	2c00      	cmp	r4, #0
    1faa:	dc0f      	bgt.n	1fcc <_printk_dec_ulong+0x90>
			out(' ', ctx);
		}
	}
}
    1fac:	b005      	add	sp, #20
    1fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
    1fb2:	9b01      	ldr	r3, [sp, #4]
    1fb4:	42bb      	cmp	r3, r7
    1fb6:	dbe3      	blt.n	1f80 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
    1fb8:	f1bb 0f02 	cmp.w	fp, #2
    1fbc:	d8e0      	bhi.n	1f80 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    1fbe:	4649      	mov	r1, r9
    1fc0:	9802      	ldr	r0, [sp, #8]
    1fc2:	9203      	str	r2, [sp, #12]
			digits++;
    1fc4:	3601      	adds	r6, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    1fc6:	47c0      	blx	r8
			digits++;
    1fc8:	9a03      	ldr	r2, [sp, #12]
    1fca:	e7d9      	b.n	1f80 <_printk_dec_ulong+0x44>
			out(' ', ctx);
    1fcc:	4649      	mov	r1, r9
    1fce:	2020      	movs	r0, #32
    1fd0:	47c0      	blx	r8
    1fd2:	3c01      	subs	r4, #1
    1fd4:	e7e8      	b.n	1fa8 <_printk_dec_ulong+0x6c>
    1fd6:	bf00      	nop
    1fd8:	3b9ac9ff 	.word	0x3b9ac9ff

00001fdc <str_out>:
	int count;
};

static int str_out(int c, struct str_context *ctx)
{
	if (!ctx->str || ctx->count >= ctx->max) {
    1fdc:	680a      	ldr	r2, [r1, #0]
    1fde:	688b      	ldr	r3, [r1, #8]
{
    1fe0:	b530      	push	{r4, r5, lr}
	if (!ctx->str || ctx->count >= ctx->max) {
    1fe2:	b112      	cbz	r2, 1fea <str_out+0xe>
    1fe4:	684c      	ldr	r4, [r1, #4]
    1fe6:	42a3      	cmp	r3, r4
    1fe8:	db02      	blt.n	1ff0 <str_out+0x14>
		ctx->count++;
    1fea:	3301      	adds	r3, #1
    1fec:	608b      	str	r3, [r1, #8]
		return c;
    1fee:	bd30      	pop	{r4, r5, pc}
	}

	if (ctx->count == ctx->max - 1) {
    1ff0:	1e65      	subs	r5, r4, #1
    1ff2:	42ab      	cmp	r3, r5
		ctx->str[ctx->count++] = '\0';
    1ff4:	bf0b      	itete	eq
    1ff6:	608c      	streq	r4, [r1, #8]
	} else {
		ctx->str[ctx->count++] = c;
    1ff8:	1c5c      	addne	r4, r3, #1
		ctx->str[ctx->count++] = '\0';
    1ffa:	2100      	moveq	r1, #0
		ctx->str[ctx->count++] = c;
    1ffc:	608c      	strne	r4, [r1, #8]
		ctx->str[ctx->count++] = '\0';
    1ffe:	bf0c      	ite	eq
    2000:	54d1      	strbeq	r1, [r2, r3]
		ctx->str[ctx->count++] = c;
    2002:	54d0      	strbne	r0, [r2, r3]
	}

	return c;
}
    2004:	bd30      	pop	{r4, r5, pc}
	...

00002008 <__printk_hook_install>:
	_char_out = fn;
    2008:	4b01      	ldr	r3, [pc, #4]	; (2010 <__printk_hook_install+0x8>)
    200a:	6018      	str	r0, [r3, #0]
    200c:	4770      	bx	lr
    200e:	bf00      	nop
    2010:	20009cd0 	.word	0x20009cd0

00002014 <_vprintk>:
{
    2014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2018:	b089      	sub	sp, #36	; 0x24
	int long_ctr = 0;
    201a:	f04f 0a00 	mov.w	sl, #0
{
    201e:	4606      	mov	r6, r0
    2020:	460f      	mov	r7, r1
    2022:	9204      	str	r2, [sp, #16]
    2024:	461c      	mov	r4, r3
	int min_width = -1;
    2026:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
    202a:	46d0      	mov	r8, sl
	int might_format = 0; /* 1 if encountered a '%' */
    202c:	4655      	mov	r5, sl
	while (*fmt) {
    202e:	9b04      	ldr	r3, [sp, #16]
    2030:	7818      	ldrb	r0, [r3, #0]
    2032:	b910      	cbnz	r0, 203a <_vprintk+0x26>
}
    2034:	b009      	add	sp, #36	; 0x24
    2036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!might_format) {
    203a:	b945      	cbnz	r5, 204e <_vprintk+0x3a>
			if (*fmt != '%') {
    203c:	2825      	cmp	r0, #37	; 0x25
    203e:	f000 810c 	beq.w	225a <_vprintk+0x246>
				out((int)*fmt, ctx);
    2042:	4639      	mov	r1, r7
    2044:	47b0      	blx	r6
		++fmt;
    2046:	9b04      	ldr	r3, [sp, #16]
    2048:	3301      	adds	r3, #1
    204a:	9304      	str	r3, [sp, #16]
    204c:	e7ef      	b.n	202e <_vprintk+0x1a>
			switch (*fmt) {
    204e:	2864      	cmp	r0, #100	; 0x64
    2050:	d061      	beq.n	2116 <_vprintk+0x102>
    2052:	d819      	bhi.n	2088 <_vprintk+0x74>
    2054:	2839      	cmp	r0, #57	; 0x39
    2056:	d80a      	bhi.n	206e <_vprintk+0x5a>
    2058:	2831      	cmp	r0, #49	; 0x31
    205a:	d250      	bcs.n	20fe <_vprintk+0xea>
    205c:	282d      	cmp	r0, #45	; 0x2d
    205e:	d03c      	beq.n	20da <_vprintk+0xc6>
    2060:	2830      	cmp	r0, #48	; 0x30
    2062:	d03d      	beq.n	20e0 <_vprintk+0xcc>
    2064:	2825      	cmp	r0, #37	; 0x25
    2066:	d108      	bne.n	207a <_vprintk+0x66>
				out((int)'%', ctx);
    2068:	4639      	mov	r1, r7
				out((int)*fmt, ctx);
    206a:	47b0      	blx	r6
    206c:	e06f      	b.n	214e <_vprintk+0x13a>
			switch (*fmt) {
    206e:	2858      	cmp	r0, #88	; 0x58
    2070:	f000 8089 	beq.w	2186 <_vprintk+0x172>
    2074:	2863      	cmp	r0, #99	; 0x63
    2076:	f000 80ea 	beq.w	224e <_vprintk+0x23a>
				out((int)'%', ctx);
    207a:	4639      	mov	r1, r7
    207c:	2025      	movs	r0, #37	; 0x25
    207e:	47b0      	blx	r6
				out((int)*fmt, ctx);
    2080:	9b04      	ldr	r3, [sp, #16]
    2082:	4639      	mov	r1, r7
    2084:	7818      	ldrb	r0, [r3, #0]
    2086:	e7f0      	b.n	206a <_vprintk+0x56>
			switch (*fmt) {
    2088:	2870      	cmp	r0, #112	; 0x70
    208a:	d072      	beq.n	2172 <_vprintk+0x15e>
    208c:	d806      	bhi.n	209c <_vprintk+0x88>
    208e:	2869      	cmp	r0, #105	; 0x69
    2090:	d041      	beq.n	2116 <_vprintk+0x102>
    2092:	286c      	cmp	r0, #108	; 0x6c
    2094:	d03c      	beq.n	2110 <_vprintk+0xfc>
    2096:	2868      	cmp	r0, #104	; 0x68
    2098:	d0d5      	beq.n	2046 <_vprintk+0x32>
    209a:	e7ee      	b.n	207a <_vprintk+0x66>
    209c:	2875      	cmp	r0, #117	; 0x75
    209e:	d058      	beq.n	2152 <_vprintk+0x13e>
    20a0:	d817      	bhi.n	20d2 <_vprintk+0xbe>
    20a2:	2873      	cmp	r0, #115	; 0x73
    20a4:	d1e9      	bne.n	207a <_vprintk+0x66>
				char *s = va_arg(ap, char *);
    20a6:	6823      	ldr	r3, [r4, #0]
    20a8:	f104 0b04 	add.w	fp, r4, #4
    20ac:	461c      	mov	r4, r3
				while (*s)
    20ae:	4625      	mov	r5, r4
    20b0:	f815 0b01 	ldrb.w	r0, [r5], #1
    20b4:	2800      	cmp	r0, #0
    20b6:	f040 80bf 	bne.w	2238 <_vprintk+0x224>
				if (padding == PAD_SPACE_AFTER) {
    20ba:	f1b8 0f03 	cmp.w	r8, #3
    20be:	f040 80d5 	bne.w	226c <_vprintk+0x258>
					int remaining = min_width - (s - start);
    20c2:	1ae4      	subs	r4, r4, r3
    20c4:	eba9 0404 	sub.w	r4, r9, r4
					while (remaining-- > 0) {
    20c8:	2c00      	cmp	r4, #0
    20ca:	f300 80bb 	bgt.w	2244 <_vprintk+0x230>
				char *s = va_arg(ap, char *);
    20ce:	465c      	mov	r4, fp
    20d0:	e03d      	b.n	214e <_vprintk+0x13a>
			switch (*fmt) {
    20d2:	2878      	cmp	r0, #120	; 0x78
    20d4:	d057      	beq.n	2186 <_vprintk+0x172>
    20d6:	287a      	cmp	r0, #122	; 0x7a
    20d8:	e7de      	b.n	2098 <_vprintk+0x84>
				padding = PAD_SPACE_AFTER;
    20da:	f04f 0803 	mov.w	r8, #3
    20de:	e7b2      	b.n	2046 <_vprintk+0x32>
				if (min_width < 0 && padding == PAD_NONE) {
    20e0:	f1b9 0f00 	cmp.w	r9, #0
    20e4:	da0e      	bge.n	2104 <_vprintk+0xf0>
    20e6:	f1b8 0f00 	cmp.w	r8, #0
    20ea:	f000 80bc 	beq.w	2266 <_vprintk+0x252>
					min_width = *fmt - '0';
    20ee:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
    20f2:	f1b8 0f00 	cmp.w	r8, #0
    20f6:	bf08      	it	eq
    20f8:	f04f 0802 	moveq.w	r8, #2
    20fc:	e7a3      	b.n	2046 <_vprintk+0x32>
				if (min_width < 0) {
    20fe:	f1b9 0f00 	cmp.w	r9, #0
    2102:	dbf4      	blt.n	20ee <_vprintk+0xda>
					min_width = 10 * min_width + *fmt - '0';
    2104:	230a      	movs	r3, #10
    2106:	fb03 0909 	mla	r9, r3, r9, r0
    210a:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
    210e:	e7f0      	b.n	20f2 <_vprintk+0xde>
				long_ctr++;
    2110:	f10a 0a01 	add.w	sl, sl, #1
    2114:	e797      	b.n	2046 <_vprintk+0x32>
				if (long_ctr < 2) {
    2116:	f1ba 0f01 	cmp.w	sl, #1
					d = (long)va_arg(ap, long long);
    211a:	bfc5      	ittet	gt
    211c:	3407      	addgt	r4, #7
    211e:	f024 0307 	bicgt.w	r3, r4, #7
					d = va_arg(ap, long);
    2122:	6825      	ldrle	r5, [r4, #0]
					d = (long)va_arg(ap, long long);
    2124:	681d      	ldrgt	r5, [r3, #0]
					d = va_arg(ap, long);
    2126:	bfd4      	ite	le
    2128:	3404      	addle	r4, #4
					d = (long)va_arg(ap, long long);
    212a:	f103 0408 	addgt.w	r4, r3, #8
				if (d < 0) {
    212e:	2d00      	cmp	r5, #0
    2130:	da05      	bge.n	213e <_vprintk+0x12a>
					out((int)'-', ctx);
    2132:	4639      	mov	r1, r7
    2134:	202d      	movs	r0, #45	; 0x2d
    2136:	47b0      	blx	r6
					d = -d;
    2138:	426d      	negs	r5, r5
					min_width--;
    213a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
    213e:	f8cd 9000 	str.w	r9, [sp]
    2142:	4643      	mov	r3, r8
    2144:	462a      	mov	r2, r5
				_printk_dec_ulong(out, ctx, u, padding,
    2146:	4639      	mov	r1, r7
    2148:	4630      	mov	r0, r6
    214a:	f7ff fef7 	bl	1f3c <_printk_dec_ulong>
			might_format = 0;
    214e:	2500      	movs	r5, #0
				break;
    2150:	e779      	b.n	2046 <_vprintk+0x32>
				if (long_ctr < 2) {
    2152:	f1ba 0f01 	cmp.w	sl, #1
					u = (unsigned long)va_arg(ap,
    2156:	bfc5      	ittet	gt
    2158:	3407      	addgt	r4, #7
    215a:	f024 0307 	bicgt.w	r3, r4, #7
					u = va_arg(ap, unsigned long);
    215e:	6822      	ldrle	r2, [r4, #0]
					u = (unsigned long)va_arg(ap,
    2160:	681a      	ldrgt	r2, [r3, #0]
				_printk_dec_ulong(out, ctx, u, padding,
    2162:	f8cd 9000 	str.w	r9, [sp]
					u = (unsigned long)va_arg(ap,
    2166:	bfcc      	ite	gt
    2168:	f103 0408 	addgt.w	r4, r3, #8
					u = va_arg(ap, unsigned long);
    216c:	3404      	addle	r4, #4
				_printk_dec_ulong(out, ctx, u, padding,
    216e:	4643      	mov	r3, r8
    2170:	e7e9      	b.n	2146 <_vprintk+0x132>
				  out('0', ctx);
    2172:	4639      	mov	r1, r7
    2174:	2030      	movs	r0, #48	; 0x30
    2176:	47b0      	blx	r6
				  out('x', ctx);
    2178:	4639      	mov	r1, r7
    217a:	2078      	movs	r0, #120	; 0x78
    217c:	47b0      	blx	r6
				  min_width = 8;
    217e:	f04f 0908 	mov.w	r9, #8
				  padding = PAD_ZERO_BEFORE;
    2182:	f04f 0801 	mov.w	r8, #1
				if (long_ctr < 2) {
    2186:	f1ba 0f01 	cmp.w	sl, #1
					x = (unsigned long)va_arg(ap,
    218a:	bfc7      	ittee	gt
    218c:	3407      	addgt	r4, #7
    218e:	f024 0307 	bicgt.w	r3, r4, #7
					x = va_arg(ap, unsigned long);
    2192:	6823      	ldrle	r3, [r4, #0]
    2194:	9305      	strle	r3, [sp, #20]
					x = (unsigned long)va_arg(ap,
    2196:	bfc2      	ittt	gt
    2198:	f103 0408 	addgt.w	r4, r3, #8
    219c:	681b      	ldrgt	r3, [r3, #0]
    219e:	9305      	strgt	r3, [sp, #20]
	int remaining = 8; /* 8 digits max */
    21a0:	f04f 0208 	mov.w	r2, #8
	int digits = 0;
    21a4:	f04f 0300 	mov.w	r3, #0
					x = va_arg(ap, unsigned long);
    21a8:	bfd8      	it	le
    21aa:	3404      	addle	r4, #4
	int digits = 0;
    21ac:	9303      	str	r3, [sp, #12]
	int found_largest_digit = 0;
    21ae:	9307      	str	r3, [sp, #28]
	int size = sizeof(num) * 2;
    21b0:	4693      	mov	fp, r2
		char nibble = (num >> ((size - 1) << 2) & 0xf);
    21b2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    21b6:	9b05      	ldr	r3, [sp, #20]
    21b8:	ea4f 008b 	mov.w	r0, fp, lsl #2
    21bc:	fa23 f000 	lsr.w	r0, r3, r0
		if (nibble || found_largest_digit || size == 1) {
    21c0:	f010 000f 	ands.w	r0, r0, #15
    21c4:	d109      	bne.n	21da <_vprintk+0x1c6>
    21c6:	9b07      	ldr	r3, [sp, #28]
    21c8:	b913      	cbnz	r3, 21d0 <_vprintk+0x1bc>
    21ca:	f1bb 0f00 	cmp.w	fp, #0
    21ce:	d122      	bne.n	2216 <_vprintk+0x202>
			nibble += nibble > 9 ? 87 : 48;
    21d0:	f04f 0e30 	mov.w	lr, #48	; 0x30
    21d4:	e007      	b.n	21e6 <_vprintk+0x1d2>
	for (; size; size--) {
    21d6:	9a06      	ldr	r2, [sp, #24]
    21d8:	e7eb      	b.n	21b2 <_vprintk+0x19e>
			nibble += nibble > 9 ? 87 : 48;
    21da:	2809      	cmp	r0, #9
    21dc:	bf8c      	ite	hi
    21de:	f04f 0e57 	movhi.w	lr, #87	; 0x57
    21e2:	f04f 0e30 	movls.w	lr, #48	; 0x30
			out((int)nibble, ctx);
    21e6:	4639      	mov	r1, r7
    21e8:	4470      	add	r0, lr
    21ea:	9206      	str	r2, [sp, #24]
    21ec:	47b0      	blx	r6
			digits++;
    21ee:	9b03      	ldr	r3, [sp, #12]
			found_largest_digit = 1;
    21f0:	9507      	str	r5, [sp, #28]
			digits++;
    21f2:	3301      	adds	r3, #1
    21f4:	9303      	str	r3, [sp, #12]
	for (; size; size--) {
    21f6:	f1bb 0f00 	cmp.w	fp, #0
    21fa:	d1ec      	bne.n	21d6 <_vprintk+0x1c2>
	if (padding == PAD_SPACE_AFTER) {
    21fc:	f1b8 0f03 	cmp.w	r8, #3
    2200:	d1a5      	bne.n	214e <_vprintk+0x13a>
		remaining = min_width * 2 - digits;
    2202:	9b03      	ldr	r3, [sp, #12]
    2204:	ebc3 0549 	rsb	r5, r3, r9, lsl #1
		while (remaining-- > 0) {
    2208:	2d00      	cmp	r5, #0
    220a:	dda0      	ble.n	214e <_vprintk+0x13a>
			out(' ', ctx);
    220c:	4639      	mov	r1, r7
    220e:	2020      	movs	r0, #32
    2210:	47b0      	blx	r6
    2212:	3d01      	subs	r5, #1
    2214:	e7f8      	b.n	2208 <_vprintk+0x1f4>
		if (remaining-- <= min_width) {
    2216:	1e53      	subs	r3, r2, #1
    2218:	4591      	cmp	r9, r2
    221a:	9306      	str	r3, [sp, #24]
    221c:	dbeb      	blt.n	21f6 <_vprintk+0x1e2>
			if (padding == PAD_ZERO_BEFORE) {
    221e:	f1b8 0f01 	cmp.w	r8, #1
    2222:	d103      	bne.n	222c <_vprintk+0x218>
				out('0', ctx);
    2224:	4639      	mov	r1, r7
    2226:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
    2228:	47b0      	blx	r6
    222a:	e7e4      	b.n	21f6 <_vprintk+0x1e2>
			} else if (padding == PAD_SPACE_BEFORE) {
    222c:	f1b8 0f02 	cmp.w	r8, #2
    2230:	d1e1      	bne.n	21f6 <_vprintk+0x1e2>
				out(' ', ctx);
    2232:	4639      	mov	r1, r7
    2234:	2020      	movs	r0, #32
    2236:	e7f7      	b.n	2228 <_vprintk+0x214>
					out((int)(*s++), ctx);
    2238:	4639      	mov	r1, r7
    223a:	9303      	str	r3, [sp, #12]
    223c:	462c      	mov	r4, r5
    223e:	47b0      	blx	r6
    2240:	9b03      	ldr	r3, [sp, #12]
    2242:	e734      	b.n	20ae <_vprintk+0x9a>
						out(' ', ctx);
    2244:	4639      	mov	r1, r7
    2246:	2020      	movs	r0, #32
    2248:	47b0      	blx	r6
    224a:	3c01      	subs	r4, #1
    224c:	e73c      	b.n	20c8 <_vprintk+0xb4>
				out(c, ctx);
    224e:	6820      	ldr	r0, [r4, #0]
				int c = va_arg(ap, int);
    2250:	1d25      	adds	r5, r4, #4
				out(c, ctx);
    2252:	4639      	mov	r1, r7
    2254:	47b0      	blx	r6
				int c = va_arg(ap, int);
    2256:	462c      	mov	r4, r5
    2258:	e779      	b.n	214e <_vprintk+0x13a>
				long_ctr = 0;
    225a:	46aa      	mov	sl, r5
				padding = PAD_NONE;
    225c:	46a8      	mov	r8, r5
				min_width = -1;
    225e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
				might_format = 1;
    2262:	2501      	movs	r5, #1
    2264:	e6ef      	b.n	2046 <_vprintk+0x32>
					padding = PAD_ZERO_BEFORE;
    2266:	f04f 0801 	mov.w	r8, #1
    226a:	e6ec      	b.n	2046 <_vprintk+0x32>
				char *s = va_arg(ap, char *);
    226c:	465c      	mov	r4, fp
			might_format = 0;
    226e:	4605      	mov	r5, r0
    2270:	e6e9      	b.n	2046 <_vprintk+0x32>
	...

00002274 <vprintk>:
{
    2274:	b513      	push	{r0, r1, r4, lr}
	struct out_context ctx = { 0 };
    2276:	ac02      	add	r4, sp, #8
    2278:	2300      	movs	r3, #0
    227a:	f844 3d04 	str.w	r3, [r4, #-4]!
	_vprintk(char_out, &ctx, fmt, ap);
    227e:	4602      	mov	r2, r0
    2280:	460b      	mov	r3, r1
    2282:	4803      	ldr	r0, [pc, #12]	; (2290 <vprintk+0x1c>)
    2284:	4621      	mov	r1, r4
    2286:	f7ff fec5 	bl	2014 <_vprintk>
}
    228a:	9801      	ldr	r0, [sp, #4]
    228c:	b002      	add	sp, #8
    228e:	bd10      	pop	{r4, pc}
    2290:	00001f2d 	.word	0x00001f2d

00002294 <printk>:
{
    2294:	b40f      	push	{r0, r1, r2, r3}
    2296:	b507      	push	{r0, r1, r2, lr}
    2298:	a904      	add	r1, sp, #16
    229a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    229e:	9101      	str	r1, [sp, #4]
	ret = vprintk(fmt, ap);
    22a0:	f7ff ffe8 	bl	2274 <vprintk>
}
    22a4:	b003      	add	sp, #12
    22a6:	f85d eb04 	ldr.w	lr, [sp], #4
    22aa:	b004      	add	sp, #16
    22ac:	4770      	bx	lr
	...

000022b0 <snprintk>:

int snprintk(char *str, size_t size, const char *fmt, ...)
{
    22b0:	b40c      	push	{r2, r3}
    22b2:	b530      	push	{r4, r5, lr}
    22b4:	b085      	sub	sp, #20
    22b6:	ab08      	add	r3, sp, #32
    22b8:	4604      	mov	r4, r0
    22ba:	f853 2b04 	ldr.w	r2, [r3], #4
	struct str_context ctx = { str, size, 0 };
    22be:	9001      	str	r0, [sp, #4]
    22c0:	9102      	str	r1, [sp, #8]
    22c2:	2500      	movs	r5, #0
	va_list ap;

	va_start(ap, fmt);
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    22c4:	a901      	add	r1, sp, #4
    22c6:	4807      	ldr	r0, [pc, #28]	; (22e4 <snprintk+0x34>)
	va_start(ap, fmt);
    22c8:	9300      	str	r3, [sp, #0]
	struct str_context ctx = { str, size, 0 };
    22ca:	9503      	str	r5, [sp, #12]
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    22cc:	f7ff fea2 	bl	2014 <_vprintk>
	va_end(ap);

	if (ctx.count < ctx.max) {
    22d0:	9803      	ldr	r0, [sp, #12]
    22d2:	9b02      	ldr	r3, [sp, #8]
    22d4:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    22d6:	bfb8      	it	lt
    22d8:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    22da:	b005      	add	sp, #20
    22dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    22e0:	b002      	add	sp, #8
    22e2:	4770      	bx	lr
    22e4:	00001fdd 	.word	0x00001fdd

000022e8 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_HAS_NRFX, 1);
GEN_ABSOLUTE_SYM(CONFIG_TINYCRYPT, 1);
GEN_ABSOLUTE_SYM(CONFIG_TINYCRYPT_AES, 1);
GEN_ABSOLUTE_SYM(CONFIG_TINYCRYPT_AES_CMAC, 1);
GEN_ABSOLUTE_SYM(CONFIG_TEST_EXTRA_STACKSIZE, 0);
GEN_ABSOLUTE_SYM(CONFIG_NUM_IRQS, 46);
    22e8:	4770      	bx	lr

000022ea <_copy>:
#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
	if (from_len <= to_len) {
    22ea:	428b      	cmp	r3, r1
{
    22ec:	b538      	push	{r3, r4, r5, lr}
    22ee:	4615      	mov	r5, r2
    22f0:	461c      	mov	r4, r3
	if (from_len <= to_len) {
    22f2:	d805      	bhi.n	2300 <_copy+0x16>
		(void)memcpy(to, from, from_len);
    22f4:	461a      	mov	r2, r3
    22f6:	4629      	mov	r1, r5
    22f8:	f7fe fa4b 	bl	792 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
    22fc:	4620      	mov	r0, r4
    22fe:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
    2300:	2400      	movs	r4, #0
    2302:	e7fb      	b.n	22fc <_copy+0x12>

00002304 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
    2304:	f7fe ba71 	b.w	7ea <memset>

00002308 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
    2308:	09c3      	lsrs	r3, r0, #7
    230a:	005a      	lsls	r2, r3, #1
    230c:	4413      	add	r3, r2
    230e:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    2312:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
    2316:	b2c0      	uxtb	r0, r0
    2318:	4770      	bx	lr

0000231a <add_round_key>:
	return TC_CRYPTO_SUCCESS;
}

static inline void add_round_key(uint8_t *s, const unsigned int *k)
{
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
    231a:	78cb      	ldrb	r3, [r1, #3]
    231c:	7802      	ldrb	r2, [r0, #0]
    231e:	4053      	eors	r3, r2
    2320:	7003      	strb	r3, [r0, #0]
    2322:	884b      	ldrh	r3, [r1, #2]
    2324:	7842      	ldrb	r2, [r0, #1]
    2326:	4053      	eors	r3, r2
    2328:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
    232a:	680a      	ldr	r2, [r1, #0]
    232c:	7883      	ldrb	r3, [r0, #2]
    232e:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
    2332:	7083      	strb	r3, [r0, #2]
    2334:	680a      	ldr	r2, [r1, #0]
    2336:	78c3      	ldrb	r3, [r0, #3]
    2338:	4053      	eors	r3, r2
    233a:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
    233c:	79cb      	ldrb	r3, [r1, #7]
    233e:	7902      	ldrb	r2, [r0, #4]
    2340:	4053      	eors	r3, r2
    2342:	7103      	strb	r3, [r0, #4]
    2344:	88cb      	ldrh	r3, [r1, #6]
    2346:	7942      	ldrb	r2, [r0, #5]
    2348:	4053      	eors	r3, r2
    234a:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
    234c:	684a      	ldr	r2, [r1, #4]
    234e:	7983      	ldrb	r3, [r0, #6]
    2350:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
    2354:	7183      	strb	r3, [r0, #6]
    2356:	684a      	ldr	r2, [r1, #4]
    2358:	79c3      	ldrb	r3, [r0, #7]
    235a:	4053      	eors	r3, r2
    235c:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
    235e:	7acb      	ldrb	r3, [r1, #11]
    2360:	7a02      	ldrb	r2, [r0, #8]
    2362:	4053      	eors	r3, r2
    2364:	7203      	strb	r3, [r0, #8]
    2366:	7a42      	ldrb	r2, [r0, #9]
    2368:	894b      	ldrh	r3, [r1, #10]
    236a:	4053      	eors	r3, r2
    236c:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
    236e:	688a      	ldr	r2, [r1, #8]
    2370:	7a83      	ldrb	r3, [r0, #10]
    2372:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
    2376:	7283      	strb	r3, [r0, #10]
    2378:	688a      	ldr	r2, [r1, #8]
    237a:	7ac3      	ldrb	r3, [r0, #11]
    237c:	4053      	eors	r3, r2
    237e:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
    2380:	7bcb      	ldrb	r3, [r1, #15]
    2382:	7b02      	ldrb	r2, [r0, #12]
    2384:	4053      	eors	r3, r2
    2386:	7303      	strb	r3, [r0, #12]
    2388:	89cb      	ldrh	r3, [r1, #14]
    238a:	7b42      	ldrb	r2, [r0, #13]
    238c:	4053      	eors	r3, r2
    238e:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
    2390:	68ca      	ldr	r2, [r1, #12]
    2392:	7b83      	ldrb	r3, [r0, #14]
    2394:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
    2398:	7383      	strb	r3, [r0, #14]
    239a:	68ca      	ldr	r2, [r1, #12]
    239c:	7bc3      	ldrb	r3, [r0, #15]
    239e:	4053      	eors	r3, r2
    23a0:	73c3      	strb	r3, [r0, #15]
    23a2:	4770      	bx	lr

000023a4 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
    23a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
    23a6:	7802      	ldrb	r2, [r0, #0]
    23a8:	f88d 2000 	strb.w	r2, [sp]
    23ac:	7942      	ldrb	r2, [r0, #5]
    23ae:	f88d 2001 	strb.w	r2, [sp, #1]
    23b2:	7a82      	ldrb	r2, [r0, #10]
    23b4:	f88d 2002 	strb.w	r2, [sp, #2]
    23b8:	7bc2      	ldrb	r2, [r0, #15]
    23ba:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
    23be:	7902      	ldrb	r2, [r0, #4]
    23c0:	f88d 2004 	strb.w	r2, [sp, #4]
    23c4:	7a42      	ldrb	r2, [r0, #9]
    23c6:	f88d 2005 	strb.w	r2, [sp, #5]
    23ca:	7b82      	ldrb	r2, [r0, #14]
    23cc:	f88d 2006 	strb.w	r2, [sp, #6]
    23d0:	78c2      	ldrb	r2, [r0, #3]
    23d2:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
    23d6:	7a02      	ldrb	r2, [r0, #8]
    23d8:	f88d 2008 	strb.w	r2, [sp, #8]
    23dc:	7b42      	ldrb	r2, [r0, #13]
    23de:	f88d 2009 	strb.w	r2, [sp, #9]
    23e2:	7882      	ldrb	r2, [r0, #2]
    23e4:	f88d 200a 	strb.w	r2, [sp, #10]
    23e8:	79c2      	ldrb	r2, [r0, #7]
    23ea:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
    23ee:	7b02      	ldrb	r2, [r0, #12]
    23f0:	f88d 200c 	strb.w	r2, [sp, #12]
    23f4:	7842      	ldrb	r2, [r0, #1]
    23f6:	f88d 200d 	strb.w	r2, [sp, #13]
    23fa:	7ac3      	ldrb	r3, [r0, #11]
    23fc:	7982      	ldrb	r2, [r0, #6]
    23fe:	f88d 200e 	strb.w	r2, [sp, #14]
    2402:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
    2406:	2310      	movs	r3, #16
    2408:	466a      	mov	r2, sp
    240a:	4619      	mov	r1, r3
    240c:	f7ff ff6d 	bl	22ea <_copy>
}
    2410:	b005      	add	sp, #20
    2412:	f85d fb04 	ldr.w	pc, [sp], #4

00002416 <mult_row_column>:
{
    2416:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2418:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    241a:	7808      	ldrb	r0, [r1, #0]
{
    241c:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    241e:	f7ff ff73 	bl	2308 <_double_byte>
    2422:	4605      	mov	r5, r0
    2424:	7860      	ldrb	r0, [r4, #1]
    2426:	f7ff ff6f 	bl	2308 <_double_byte>
    242a:	78a2      	ldrb	r2, [r4, #2]
    242c:	7863      	ldrb	r3, [r4, #1]
    242e:	4053      	eors	r3, r2
    2430:	78e2      	ldrb	r2, [r4, #3]
    2432:	4053      	eors	r3, r2
    2434:	405d      	eors	r5, r3
    2436:	4045      	eors	r5, r0
    2438:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
    243a:	7860      	ldrb	r0, [r4, #1]
    243c:	7827      	ldrb	r7, [r4, #0]
    243e:	f7ff ff63 	bl	2308 <_double_byte>
    2442:	4605      	mov	r5, r0
    2444:	78a0      	ldrb	r0, [r4, #2]
    2446:	f7ff ff5f 	bl	2308 <_double_byte>
    244a:	78a3      	ldrb	r3, [r4, #2]
    244c:	405f      	eors	r7, r3
    244e:	78e3      	ldrb	r3, [r4, #3]
    2450:	405f      	eors	r7, r3
    2452:	407d      	eors	r5, r7
    2454:	4045      	eors	r5, r0
    2456:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
    2458:	78a0      	ldrb	r0, [r4, #2]
    245a:	7865      	ldrb	r5, [r4, #1]
    245c:	7827      	ldrb	r7, [r4, #0]
    245e:	f7ff ff53 	bl	2308 <_double_byte>
    2462:	406f      	eors	r7, r5
    2464:	4605      	mov	r5, r0
    2466:	78e0      	ldrb	r0, [r4, #3]
    2468:	f7ff ff4e 	bl	2308 <_double_byte>
    246c:	78e3      	ldrb	r3, [r4, #3]
    246e:	405f      	eors	r7, r3
    2470:	407d      	eors	r5, r7
    2472:	4045      	eors	r5, r0
    2474:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
    2476:	7820      	ldrb	r0, [r4, #0]
    2478:	f7ff ff46 	bl	2308 <_double_byte>
    247c:	7863      	ldrb	r3, [r4, #1]
    247e:	7825      	ldrb	r5, [r4, #0]
    2480:	405d      	eors	r5, r3
    2482:	78a3      	ldrb	r3, [r4, #2]
    2484:	405d      	eors	r5, r3
    2486:	4045      	eors	r5, r0
    2488:	78e0      	ldrb	r0, [r4, #3]
    248a:	f7ff ff3d 	bl	2308 <_double_byte>
    248e:	b2ed      	uxtb	r5, r5
    2490:	4068      	eors	r0, r5
    2492:	70f0      	strb	r0, [r6, #3]
    2494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00002498 <tc_aes128_set_encrypt_key>:
{
    2498:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
    249a:	4e28      	ldr	r6, [pc, #160]	; (253c <tc_aes128_set_encrypt_key+0xa4>)
{
    249c:	4607      	mov	r7, r0
    249e:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    24a0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
    24a2:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    24a4:	ad01      	add	r5, sp, #4
    24a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    24a8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    24aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    24ac:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    24b0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
    24b4:	2f00      	cmp	r7, #0
    24b6:	d03c      	beq.n	2532 <tc_aes128_set_encrypt_key+0x9a>
	} else if (k == (const uint8_t *) 0) {
    24b8:	2c00      	cmp	r4, #0
    24ba:	d03c      	beq.n	2536 <tc_aes128_set_encrypt_key+0x9e>
    24bc:	1f38      	subs	r0, r7, #4
    24be:	4621      	mov	r1, r4
    24c0:	4602      	mov	r2, r0
    24c2:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    24c4:	784b      	ldrb	r3, [r1, #1]
    24c6:	780d      	ldrb	r5, [r1, #0]
    24c8:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    24ca:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    24ce:	78cd      	ldrb	r5, [r1, #3]
    24d0:	432b      	orrs	r3, r5
    24d2:	788d      	ldrb	r5, [r1, #2]
    24d4:	3104      	adds	r1, #4
    24d6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
    24da:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    24dc:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    24e0:	d1f0      	bne.n	24c4 <tc_aes128_set_encrypt_key+0x2c>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    24e2:	4c17      	ldr	r4, [pc, #92]	; (2540 <tc_aes128_set_encrypt_key+0xa8>)
    24e4:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
    24e6:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    24e8:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    24ea:	d118      	bne.n	251e <tc_aes128_set_encrypt_key+0x86>
	return (((a) >> 24)|((a) << 8));
    24ec:	ea4f 6333 	mov.w	r3, r3, ror #24
			t = subword(rotword(t)) ^ rconst[i/Nk];
    24f0:	0e1a      	lsrs	r2, r3, #24
    24f2:	5ca5      	ldrb	r5, [r4, r2]
    24f4:	b2da      	uxtb	r2, r3
    24f6:	5ca2      	ldrb	r2, [r4, r2]
    24f8:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    24fc:	f3c3 4507 	ubfx	r5, r3, #16, #8
    2500:	f3c3 2307 	ubfx	r3, r3, #8, #8
    2504:	5d65      	ldrb	r5, [r4, r5]
    2506:	5ce3      	ldrb	r3, [r4, r3]
    2508:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    250c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    2510:	ad0c      	add	r5, sp, #48	; 0x30
    2512:	f021 0303 	bic.w	r3, r1, #3
    2516:	442b      	add	r3, r5
    2518:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    251c:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
    251e:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    2522:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    2524:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    2526:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    2528:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    252a:	d1dc      	bne.n	24e6 <tc_aes128_set_encrypt_key+0x4e>
	return TC_CRYPTO_SUCCESS;
    252c:	2001      	movs	r0, #1
}
    252e:	b00d      	add	sp, #52	; 0x34
    2530:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    2532:	4638      	mov	r0, r7
    2534:	e7fb      	b.n	252e <tc_aes128_set_encrypt_key+0x96>
    2536:	4620      	mov	r0, r4
    2538:	e7f9      	b.n	252e <tc_aes128_set_encrypt_key+0x96>
    253a:	bf00      	nop
    253c:	0002292c 	.word	0x0002292c
    2540:	00023264 	.word	0x00023264

00002544 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
    2544:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2548:	4615      	mov	r5, r2
    254a:	b089      	sub	sp, #36	; 0x24
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
    254c:	4680      	mov	r8, r0
    254e:	2800      	cmp	r0, #0
    2550:	d05b      	beq.n	260a <tc_aes_encrypt+0xc6>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
    2552:	2900      	cmp	r1, #0
    2554:	d05a      	beq.n	260c <tc_aes_encrypt+0xc8>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
    2556:	2a00      	cmp	r2, #0
    2558:	d05a      	beq.n	2610 <tc_aes_encrypt+0xcc>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
    255a:	2310      	movs	r3, #16
    255c:	460a      	mov	r2, r1
    255e:	4668      	mov	r0, sp
    2560:	4619      	mov	r1, r3
    2562:	f7ff fec2 	bl	22ea <_copy>
	add_round_key(state, s->words);
    2566:	4629      	mov	r1, r5
    2568:	4668      	mov	r0, sp
		s[i] = sbox[s[i]];
    256a:	4c2a      	ldr	r4, [pc, #168]	; (2614 <tc_aes_encrypt+0xd0>)
	add_round_key(state, s->words);
    256c:	f7ff fed5 	bl	231a <add_round_key>
    2570:	f105 0710 	add.w	r7, r5, #16
    2574:	46a1      	mov	r9, r4
    2576:	35a0      	adds	r5, #160	; 0xa0
{
    2578:	2600      	movs	r6, #0
		s[i] = sbox[s[i]];
    257a:	f81d 3006 	ldrb.w	r3, [sp, r6]
    257e:	5ce3      	ldrb	r3, [r4, r3]
    2580:	f80d 3006 	strb.w	r3, [sp, r6]
	for (i = 0; i < (Nb * Nk); ++i) {
    2584:	3601      	adds	r6, #1
    2586:	2e10      	cmp	r6, #16
    2588:	d1f7      	bne.n	257a <tc_aes_encrypt+0x36>

	for (i = 0; i < (Nr - 1); ++i) {
		sub_bytes(state);
		shift_rows(state);
    258a:	4668      	mov	r0, sp
    258c:	f7ff ff0a 	bl	23a4 <shift_rows>
	mult_row_column(t, s);
    2590:	4669      	mov	r1, sp
    2592:	a804      	add	r0, sp, #16
    2594:	f7ff ff3f 	bl	2416 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
    2598:	a901      	add	r1, sp, #4
    259a:	a805      	add	r0, sp, #20
    259c:	f7ff ff3b 	bl	2416 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
    25a0:	a902      	add	r1, sp, #8
    25a2:	a806      	add	r0, sp, #24
    25a4:	f7ff ff37 	bl	2416 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
    25a8:	a903      	add	r1, sp, #12
    25aa:	a807      	add	r0, sp, #28
    25ac:	f7ff ff33 	bl	2416 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
    25b0:	4633      	mov	r3, r6
    25b2:	aa04      	add	r2, sp, #16
    25b4:	4631      	mov	r1, r6
    25b6:	4668      	mov	r0, sp
    25b8:	f7ff fe97 	bl	22ea <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
    25bc:	4639      	mov	r1, r7
    25be:	4668      	mov	r0, sp
    25c0:	3710      	adds	r7, #16
    25c2:	f7ff feaa 	bl	231a <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
    25c6:	42bd      	cmp	r5, r7
    25c8:	d1d6      	bne.n	2578 <tc_aes_encrypt+0x34>
    25ca:	2600      	movs	r6, #0
		s[i] = sbox[s[i]];
    25cc:	f81d 3006 	ldrb.w	r3, [sp, r6]
    25d0:	f819 3003 	ldrb.w	r3, [r9, r3]
    25d4:	f80d 3006 	strb.w	r3, [sp, r6]
	for (i = 0; i < (Nb * Nk); ++i) {
    25d8:	3601      	adds	r6, #1
    25da:	2e10      	cmp	r6, #16
    25dc:	d1f6      	bne.n	25cc <tc_aes_encrypt+0x88>
	}

	sub_bytes(state);
	shift_rows(state);
    25de:	4668      	mov	r0, sp
    25e0:	f7ff fee0 	bl	23a4 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
    25e4:	4629      	mov	r1, r5
    25e6:	4668      	mov	r0, sp
    25e8:	f7ff fe97 	bl	231a <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
    25ec:	4633      	mov	r3, r6
    25ee:	466a      	mov	r2, sp
    25f0:	4631      	mov	r1, r6
    25f2:	4640      	mov	r0, r8
    25f4:	f7ff fe79 	bl	22ea <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
    25f8:	4668      	mov	r0, sp
    25fa:	4632      	mov	r2, r6
    25fc:	2100      	movs	r1, #0
    25fe:	f7ff fe81 	bl	2304 <_set>

	return TC_CRYPTO_SUCCESS;
    2602:	2001      	movs	r0, #1
}
    2604:	b009      	add	sp, #36	; 0x24
    2606:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    260a:	e7fb      	b.n	2604 <tc_aes_encrypt+0xc0>
		return TC_CRYPTO_FAIL;
    260c:	4608      	mov	r0, r1
    260e:	e7f9      	b.n	2604 <tc_aes_encrypt+0xc0>
    2610:	4610      	mov	r0, r2
    2612:	e7f7      	b.n	2604 <tc_aes_encrypt+0xc0>
    2614:	00023264 	.word	0x00023264

00002618 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
    2618:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
    261a:	f991 3000 	ldrsb.w	r3, [r1]
    261e:	2b00      	cmp	r3, #0
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);
    2620:	f101 020f 	add.w	r2, r1, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
    2624:	bfb4      	ite	lt
    2626:	2387      	movlt	r3, #135	; 0x87
    2628:	2300      	movge	r3, #0

	out += (TC_AES_BLOCK_SIZE - 1);
    262a:	300f      	adds	r0, #15
	for (;;) {
		*out-- = (*x << 1) ^ carry;
    262c:	7814      	ldrb	r4, [r2, #0]
		if (x == in) {
    262e:	428a      	cmp	r2, r1
		*out-- = (*x << 1) ^ carry;
    2630:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
    2634:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
    2638:	d003      	beq.n	2642 <gf_double+0x2a>
			break;
		}
		carry = *x-- >> 7;
    263a:	f812 3901 	ldrb.w	r3, [r2], #-1
    263e:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
    2640:	e7f4      	b.n	262c <gf_double+0x14>
    2642:	bd10      	pop	{r4, pc}

00002644 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
    2644:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
    2646:	b128      	cbz	r0, 2654 <tc_cmac_erase+0x10>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
    2648:	2258      	movs	r2, #88	; 0x58
    264a:	2100      	movs	r1, #0
    264c:	f7ff fe5a 	bl	2304 <_set>

	return TC_CRYPTO_SUCCESS;
    2650:	2001      	movs	r0, #1
    2652:	bd08      	pop	{r3, pc}
}
    2654:	bd08      	pop	{r3, pc}

00002656 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
    2656:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
    2658:	4604      	mov	r4, r0
    265a:	b190      	cbz	r0, 2682 <tc_cmac_init+0x2c>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
    265c:	2210      	movs	r2, #16
    265e:	2100      	movs	r1, #0
    2660:	f7ff fe50 	bl	2304 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
    2664:	f104 0030 	add.w	r0, r4, #48	; 0x30
    2668:	2210      	movs	r2, #16
    266a:	2100      	movs	r1, #0
    266c:	f7ff fe4a 	bl	2304 <_set>
	s->leftover_offset = 0;
    2670:	2300      	movs	r3, #0
    2672:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
    2674:	2200      	movs	r2, #0
    2676:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    267a:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
    267e:	2001      	movs	r0, #1
    2680:	bd10      	pop	{r4, pc}
}
    2682:	bd10      	pop	{r4, pc}

00002684 <tc_cmac_setup>:
{
    2684:	b570      	push	{r4, r5, r6, lr}
    2686:	460d      	mov	r5, r1
    2688:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
    268a:	4604      	mov	r4, r0
    268c:	b318      	cbz	r0, 26d6 <tc_cmac_setup+0x52>
    268e:	b319      	cbz	r1, 26d8 <tc_cmac_setup+0x54>
	_set(s, 0, sizeof(*s));
    2690:	2258      	movs	r2, #88	; 0x58
    2692:	2100      	movs	r1, #0
    2694:	f7ff fe36 	bl	2304 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
    2698:	4629      	mov	r1, r5
	s->sched = sched;
    269a:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
    269c:	4630      	mov	r0, r6
    269e:	f7ff fefb 	bl	2498 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
    26a2:	4620      	mov	r0, r4
    26a4:	2210      	movs	r2, #16
    26a6:	2100      	movs	r1, #0
    26a8:	f7ff fe2c 	bl	2304 <_set>
	gf_double (s->K1, s->iv);
    26ac:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
    26b0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    26b2:	4621      	mov	r1, r4
    26b4:	4620      	mov	r0, r4
    26b6:	f7ff ff45 	bl	2544 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
    26ba:	4621      	mov	r1, r4
    26bc:	4628      	mov	r0, r5
    26be:	f7ff ffab 	bl	2618 <gf_double>
	gf_double (s->K2, s->K1);
    26c2:	4629      	mov	r1, r5
    26c4:	f104 0020 	add.w	r0, r4, #32
    26c8:	f7ff ffa6 	bl	2618 <gf_double>
	tc_cmac_init(s);
    26cc:	4620      	mov	r0, r4
    26ce:	f7ff ffc2 	bl	2656 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
    26d2:	2001      	movs	r0, #1
    26d4:	bd70      	pop	{r4, r5, r6, pc}
    26d6:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
    26d8:	4608      	mov	r0, r1
}
    26da:	bd70      	pop	{r4, r5, r6, pc}

000026dc <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
    26dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    26de:	460d      	mov	r5, r1
    26e0:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
    26e2:	4604      	mov	r4, r0
    26e4:	2800      	cmp	r0, #0
    26e6:	d05b      	beq.n	27a0 <tc_cmac_update+0xc4>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
    26e8:	b90a      	cbnz	r2, 26ee <tc_cmac_update+0x12>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
    26ea:	2001      	movs	r0, #1
    26ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (data == (const uint8_t *) 0) {
    26ee:	2900      	cmp	r1, #0
    26f0:	d056      	beq.n	27a0 <tc_cmac_update+0xc4>
	if (s->countdown == 0) {
    26f2:	e9d0 2314 	ldrd	r2, r3, [r0, #80]	; 0x50
    26f6:	ea52 0103 	orrs.w	r1, r2, r3
    26fa:	d051      	beq.n	27a0 <tc_cmac_update+0xc4>
	s->countdown--;
    26fc:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
    2700:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
    2704:	e9c0 2314 	strd	r2, r3, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
    2708:	6c40      	ldr	r0, [r0, #68]	; 0x44
    270a:	b348      	cbz	r0, 2760 <tc_cmac_update+0x84>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
    270c:	f1c0 0710 	rsb	r7, r0, #16
		if (data_length < remaining_space) {
    2710:	42be      	cmp	r6, r7
    2712:	f100 0030 	add.w	r0, r0, #48	; 0x30
    2716:	d209      	bcs.n	272c <tc_cmac_update+0x50>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
    2718:	4633      	mov	r3, r6
    271a:	4631      	mov	r1, r6
    271c:	462a      	mov	r2, r5
    271e:	4420      	add	r0, r4
    2720:	f7ff fde3 	bl	22ea <_copy>
			s->leftover_offset += data_length;
    2724:	6c63      	ldr	r3, [r4, #68]	; 0x44
    2726:	441e      	add	r6, r3
		s->leftover_offset = data_length;
    2728:	6466      	str	r6, [r4, #68]	; 0x44
    272a:	e7de      	b.n	26ea <tc_cmac_update+0xe>
		_copy(&s->leftover[s->leftover_offset],
    272c:	463b      	mov	r3, r7
    272e:	462a      	mov	r2, r5
    2730:	4639      	mov	r1, r7
    2732:	4420      	add	r0, r4
    2734:	f7ff fdd9 	bl	22ea <_copy>
		s->leftover_offset = 0;
    2738:	2300      	movs	r3, #0
    273a:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
    273c:	1bf6      	subs	r6, r6, r7
		data += remaining_space;
    273e:	443d      	add	r5, r7
    2740:	1e63      	subs	r3, r4, #1
    2742:	f104 000f 	add.w	r0, r4, #15
			s->iv[i] ^= s->leftover[i];
    2746:	785a      	ldrb	r2, [r3, #1]
    2748:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
    274c:	404a      	eors	r2, r1
    274e:	f803 2f01 	strb.w	r2, [r3, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    2752:	4283      	cmp	r3, r0
    2754:	d1f7      	bne.n	2746 <tc_cmac_update+0x6a>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
    2756:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    2758:	4621      	mov	r1, r4
    275a:	4620      	mov	r0, r4
    275c:	f7ff fef2 	bl	2544 <tc_aes_encrypt>
    2760:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
    2764:	2e10      	cmp	r6, #16
    2766:	d911      	bls.n	278c <tc_cmac_update+0xb0>
    2768:	1e63      	subs	r3, r4, #1
    276a:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
    276c:	785a      	ldrb	r2, [r3, #1]
    276e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    2772:	4042      	eors	r2, r0
    2774:	f803 2f01 	strb.w	r2, [r3, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    2778:	42bb      	cmp	r3, r7
    277a:	d1f7      	bne.n	276c <tc_cmac_update+0x90>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
    277c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    277e:	4621      	mov	r1, r4
    2780:	4620      	mov	r0, r4
    2782:	f7ff fedf 	bl	2544 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
    2786:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
    2788:	3e10      	subs	r6, #16
    278a:	e7eb      	b.n	2764 <tc_cmac_update+0x88>
	if (data_length > 0) {
    278c:	2e00      	cmp	r6, #0
    278e:	d0ac      	beq.n	26ea <tc_cmac_update+0xe>
		_copy(s->leftover, data_length, data, data_length);
    2790:	4633      	mov	r3, r6
    2792:	462a      	mov	r2, r5
    2794:	4631      	mov	r1, r6
    2796:	f104 0030 	add.w	r0, r4, #48	; 0x30
    279a:	f7ff fda6 	bl	22ea <_copy>
    279e:	e7c3      	b.n	2728 <tc_cmac_update+0x4c>
		return TC_CRYPTO_FAIL;
    27a0:	2000      	movs	r0, #0
}
    27a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000027a4 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
    27a4:	b570      	push	{r4, r5, r6, lr}
    27a6:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
    27a8:	4605      	mov	r5, r0
    27aa:	b370      	cbz	r0, 280a <tc_cmac_final+0x66>
    27ac:	b371      	cbz	r1, 280c <tc_cmac_final+0x68>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
    27ae:	6c4a      	ldr	r2, [r1, #68]	; 0x44
    27b0:	2a10      	cmp	r2, #16
    27b2:	d11a      	bne.n	27ea <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
    27b4:	f101 0210 	add.w	r2, r1, #16
    27b8:	1e61      	subs	r1, r4, #1
    27ba:	3a01      	subs	r2, #1
    27bc:	f104 060f 	add.w	r6, r4, #15
		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
		s->iv[i] ^= s->leftover[i] ^ k[i];
    27c0:	f891 0031 	ldrb.w	r0, [r1, #49]	; 0x31
    27c4:	784b      	ldrb	r3, [r1, #1]
    27c6:	4043      	eors	r3, r0
    27c8:	f812 0f01 	ldrb.w	r0, [r2, #1]!
    27cc:	4043      	eors	r3, r0
    27ce:	f801 3f01 	strb.w	r3, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    27d2:	428e      	cmp	r6, r1
    27d4:	d1f4      	bne.n	27c0 <tc_cmac_final+0x1c>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
    27d6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    27d8:	4621      	mov	r1, r4
    27da:	4628      	mov	r0, r5
    27dc:	f7ff feb2 	bl	2544 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
    27e0:	4620      	mov	r0, r4
    27e2:	f7ff ff2f 	bl	2644 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
    27e6:	2001      	movs	r0, #1
    27e8:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
    27ea:	f102 0030 	add.w	r0, r2, #48	; 0x30
    27ee:	2100      	movs	r1, #0
    27f0:	f1c2 0210 	rsb	r2, r2, #16
    27f4:	4420      	add	r0, r4
    27f6:	f7ff fd85 	bl	2304 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
    27fa:	6c63      	ldr	r3, [r4, #68]	; 0x44
    27fc:	4423      	add	r3, r4
    27fe:	2280      	movs	r2, #128	; 0x80
    2800:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
    2804:	f104 0220 	add.w	r2, r4, #32
    2808:	e7d6      	b.n	27b8 <tc_cmac_final+0x14>
    280a:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
    280c:	4608      	mov	r0, r1
}
    280e:	bd70      	pop	{r4, r5, r6, pc}

00002810 <sys_rand32_get>:
#include <entropy.h>

static atomic_t entropy_driver;

u32_t sys_rand32_get(void)
{
    2810:	b513      	push	{r0, r1, r4, lr}
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    2812:	4c11      	ldr	r4, [pc, #68]	; (2858 <sys_rand32_get+0x48>)
    2814:	f3bf 8f5b 	dmb	ish
    2818:	6820      	ldr	r0, [r4, #0]
    281a:	f3bf 8f5b 	dmb	ish
	struct device *dev = (struct device *)atomic_get(&entropy_driver);
	u32_t random_num;
	int ret;

	if (unlikely(!dev)) {
    281e:	b960      	cbnz	r0, 283a <sys_rand32_get+0x2a>
		/* Only one entropy device exists, so this is safe even
		 * if the whole operation isn't atomic.
		 */
		dev = device_get_binding(CONFIG_ENTROPY_NAME);
    2820:	480e      	ldr	r0, [pc, #56]	; (285c <sys_rand32_get+0x4c>)
    2822:	f01e fcb5 	bl	21190 <device_get_binding>
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2826:	f3bf 8f5b 	dmb	ish
    282a:	e854 3f00 	ldrex	r3, [r4]
    282e:	e844 0200 	strex	r2, r0, [r4]
    2832:	2a00      	cmp	r2, #0
    2834:	d1f9      	bne.n	282a <sys_rand32_get+0x1a>
    2836:	f3bf 8f5b 	dmb	ish
					    u16_t length)
{
	const struct entropy_driver_api *api = dev->driver_api;

	__ASSERT(api->get_entropy, "Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
    283a:	6843      	ldr	r3, [r0, #4]
    283c:	2204      	movs	r2, #4
    283e:	681b      	ldr	r3, [r3, #0]
    2840:	eb0d 0102 	add.w	r1, sp, r2
    2844:	4798      	blx	r3
		atomic_set(&entropy_driver, (atomic_t)(uintptr_t)dev);
	}

	ret = entropy_get_entropy(dev, (u8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
    2846:	2800      	cmp	r0, #0
    2848:	da02      	bge.n	2850 <sys_rand32_get+0x40>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
    284a:	f000 fd0d 	bl	3268 <_timer_cycle_get_32>
    284e:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
    2850:	9801      	ldr	r0, [sp, #4]
    2852:	b002      	add	sp, #8
    2854:	bd10      	pop	{r4, pc}
    2856:	bf00      	nop
    2858:	20000108 	.word	0x20000108
    285c:	00023364 	.word	0x00023364

00002860 <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    2860:	280a      	cmp	r0, #10
{
    2862:	b538      	push	{r3, r4, r5, lr}
    2864:	4604      	mov	r4, r0
    2866:	4d07      	ldr	r5, [pc, #28]	; (2884 <console_out+0x24>)
	if ('\n' == c) {
    2868:	d104      	bne.n	2874 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    286a:	6828      	ldr	r0, [r5, #0]
static inline unsigned char _impl_uart_poll_out(struct device *dev,
						unsigned char out_char)
{
	const struct uart_driver_api *api = dev->driver_api;

	return api->poll_out(dev, out_char);
    286c:	6843      	ldr	r3, [r0, #4]
    286e:	210d      	movs	r1, #13
    2870:	685b      	ldr	r3, [r3, #4]
    2872:	4798      	blx	r3
	}
	uart_poll_out(uart_console_dev, c);
    2874:	6828      	ldr	r0, [r5, #0]
    2876:	6843      	ldr	r3, [r0, #4]
    2878:	b2e1      	uxtb	r1, r4
    287a:	685b      	ldr	r3, [r3, #4]
    287c:	4798      	blx	r3

	return c;
}
    287e:	4620      	mov	r0, r4
    2880:	bd38      	pop	{r3, r4, r5, pc}
    2882:	bf00      	nop
    2884:	2000010c 	.word	0x2000010c

00002888 <uart_console_hook_install>:
 */

void uart_console_hook_install(void)
{
	__stdout_hook_install(console_out);
	__printk_hook_install(console_out);
    2888:	4801      	ldr	r0, [pc, #4]	; (2890 <uart_console_hook_install+0x8>)
    288a:	f7ff bbbd 	b.w	2008 <__printk_hook_install>
    288e:	bf00      	nop
    2890:	00002861 	.word	0x00002861

00002894 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    2894:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    2896:	4804      	ldr	r0, [pc, #16]	; (28a8 <uart_console_init+0x14>)
    2898:	f01e fc7a 	bl	21190 <device_get_binding>
    289c:	4b03      	ldr	r3, [pc, #12]	; (28ac <uart_console_init+0x18>)
    289e:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    28a0:	f7ff fff2 	bl	2888 <uart_console_hook_install>

	return 0;
}
    28a4:	2000      	movs	r0, #0
    28a6:	bd08      	pop	{r3, pc}
    28a8:	0002336e 	.word	0x0002336e
    28ac:	2000010c 	.word	0x2000010c

000028b0 <_m16src_stop>:
		return -EINPROGRESS;
	}
}

static int _m16src_stop(struct device *dev, clock_control_subsys_t sub_system)
{
    28b0:	b510      	push	{r4, lr}
    28b2:	f04f 0320 	mov.w	r3, #32
    28b6:	f3ef 8211 	mrs	r2, BASEPRI
    28ba:	f383 8811 	msr	BASEPRI, r3
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
    28be:	4c11      	ldr	r4, [pc, #68]	; (2904 <_m16src_stop+0x54>)
    28c0:	7823      	ldrb	r3, [r4, #0]
    28c2:	b923      	cbnz	r3, 28ce <_m16src_stop+0x1e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    28c4:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EALREADY;
    28c8:	f06f 0044 	mvn.w	r0, #68	; 0x44
    28cc:	bd10      	pop	{r4, pc}
	}

	if (--m16src_ref) {
    28ce:	3b01      	subs	r3, #1
    28d0:	b2db      	uxtb	r3, r3
    28d2:	7023      	strb	r3, [r4, #0]
    28d4:	b123      	cbz	r3, 28e0 <_m16src_stop+0x30>
    28d6:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EBUSY;
    28da:	f06f 000f 	mvn.w	r0, #15
    28de:	bd10      	pop	{r4, pc}
	}

	if (m16src_grd) {
    28e0:	4b09      	ldr	r3, [pc, #36]	; (2908 <_m16src_stop+0x58>)
    28e2:	7818      	ldrb	r0, [r3, #0]
    28e4:	2101      	movs	r1, #1
    28e6:	b128      	cbz	r0, 28f4 <_m16src_stop+0x44>
		m16src_ref++;
    28e8:	7021      	strb	r1, [r4, #0]
    28ea:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EAGAIN;
    28ee:	f06f 000a 	mvn.w	r0, #10
    28f2:	bd10      	pop	{r4, pc}
	}

	m16src_grd = 1;
    28f4:	7019      	strb	r1, [r3, #0]
    28f6:	f382 8811 	msr	BASEPRI, r2

	irq_unlock(imask);

	/* re-entrancy and mult-context safe, and reference count is zero, */

	NRF_CLOCK->TASKS_HFCLKSTOP = 1;
    28fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    28fe:	6051      	str	r1, [r2, #4]

	/* release resource guard */
	m16src_grd = 0;
    2900:	7018      	strb	r0, [r3, #0]

	return 0;
}
    2902:	bd10      	pop	{r4, pc}
    2904:	20000112 	.word	0x20000112
    2908:	20000111 	.word	0x20000111

0000290c <_clock_control_init>:
		}
	}
}

static int _clock_control_init(struct device *dev)
{
    290c:	b508      	push	{r3, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(NRF5_IRQ_POWER_CLOCK_IRQn,
    290e:	2200      	movs	r2, #0
    2910:	4610      	mov	r0, r2
    2912:	2101      	movs	r1, #1
    2914:	f7ff f98c 	bl	1c30 <_irq_priority_set>
		    CONFIG_CLOCK_CONTROL_NRF5_IRQ_PRIORITY,
		    _power_clock_isr, 0, 0);

	irq_enable(POWER_CLOCK_IRQn);
    2918:	2000      	movs	r0, #0
    291a:	f7ff f957 	bl	1bcc <_arch_irq_enable>

	return 0;
}
    291e:	2000      	movs	r0, #0
    2920:	bd08      	pop	{r3, pc}
	...

00002924 <_m16src_start>:
{
    2924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    2926:	f04f 0220 	mov.w	r2, #32
    292a:	f3ef 8311 	mrs	r3, BASEPRI
    292e:	f382 8811 	msr	BASEPRI, r2
	if (m16src_ref++) {
    2932:	4a25      	ldr	r2, [pc, #148]	; (29c8 <_m16src_start+0xa4>)
    2934:	7810      	ldrb	r0, [r2, #0]
    2936:	1c44      	adds	r4, r0, #1
    2938:	7014      	strb	r4, [r2, #0]
    293a:	b160      	cbz	r0, 2956 <_m16src_start+0x32>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    293c:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) {
    2940:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2944:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		return -EINPROGRESS;
    2948:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    294c:	bf14      	ite	ne
    294e:	2000      	movne	r0, #0
    2950:	f06f 0043 	mvneq.w	r0, #67	; 0x43
}
    2954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (m16src_grd) {
    2956:	4d1d      	ldr	r5, [pc, #116]	; (29cc <_m16src_start+0xa8>)
    2958:	782f      	ldrb	r7, [r5, #0]
    295a:	b12f      	cbz	r7, 2968 <_m16src_start+0x44>
		m16src_ref--;
    295c:	7010      	strb	r0, [r2, #0]
    295e:	f383 8811 	msr	BASEPRI, r3
		return -EAGAIN;
    2962:	f06f 000a 	mvn.w	r0, #10
    2966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	m16src_grd = 1;
    2968:	2601      	movs	r6, #1
    296a:	702e      	strb	r6, [r5, #0]
    296c:	f383 8811 	msr	BASEPRI, r3
    2970:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
	if (blocking) {
    2974:	b319      	cbz	r1, 29be <_m16src_start+0x9a>
		irq_disable(POWER_CLOCK_IRQn);
    2976:	4638      	mov	r0, r7
    2978:	f7ff f938 	bl	1bec <_arch_irq_disable>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    297c:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
		intenset = NRF_CLOCK->INTENSET;
    2980:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    2984:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    2988:	6026      	str	r6, [r4, #0]
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    298a:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    298e:	b192      	cbz	r2, 29b6 <_m16src_start+0x92>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    2990:	2200      	movs	r2, #0
    2992:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2996:	4a0e      	ldr	r2, [pc, #56]	; (29d0 <_m16src_start+0xac>)
		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
    2998:	f013 0f01 	tst.w	r3, #1
    299c:	f04f 0301 	mov.w	r3, #1
			NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    29a0:	bf08      	it	eq
    29a2:	f8c4 3308 	streq.w	r3, [r4, #776]	; 0x308
		irq_enable(POWER_CLOCK_IRQn);
    29a6:	2000      	movs	r0, #0
    29a8:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    29ac:	f7ff f90e 	bl	1bcc <_arch_irq_enable>
	m16src_grd = 0;
    29b0:	2300      	movs	r3, #0
    29b2:	702b      	strb	r3, [r5, #0]
    29b4:	e7c4      	b.n	2940 <_m16src_start+0x1c>
			__WFE();
    29b6:	bf20      	wfe
			__SEV();
    29b8:	bf40      	sev
			__WFE();
    29ba:	bf20      	wfe
    29bc:	e7e5      	b.n	298a <_m16src_start+0x66>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    29be:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    29c2:	6026      	str	r6, [r4, #0]
    29c4:	e7f4      	b.n	29b0 <_m16src_start+0x8c>
    29c6:	bf00      	nop
    29c8:	20000112 	.word	0x20000112
    29cc:	20000111 	.word	0x20000111
    29d0:	e000e100 	.word	0xe000e100

000029d4 <_k32src_start>:
{
    29d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    29d6:	4606      	mov	r6, r0
    29d8:	460c      	mov	r4, r1
	__asm__ volatile(
    29da:	f04f 0220 	mov.w	r2, #32
    29de:	f3ef 8311 	mrs	r3, BASEPRI
    29e2:	f382 8811 	msr	BASEPRI, r2
	if (k32src_initialized) {
    29e6:	4a2c      	ldr	r2, [pc, #176]	; (2a98 <_k32src_start+0xc4>)
    29e8:	7815      	ldrb	r5, [r2, #0]
    29ea:	b165      	cbz	r5, 2a06 <_k32src_start+0x32>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    29ec:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) {
    29f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    29f4:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
		return -EINPROGRESS;
    29f8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
}
    29fc:	bf0c      	ite	eq
    29fe:	f06f 0043 	mvneq.w	r0, #67	; 0x43
    2a02:	2000      	movne	r0, #0
    2a04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	k32src_initialized = 1;
    2a06:	2701      	movs	r7, #1
    2a08:	7017      	strb	r7, [r2, #0]
    2a0a:	f383 8811 	msr	BASEPRI, r3
	irq_disable(POWER_CLOCK_IRQn);
    2a0e:	4628      	mov	r0, r5
    2a10:	f7ff f8ec 	bl	1bec <_arch_irq_disable>
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    2a14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    2a18:	2102      	movs	r1, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    2a1a:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
	intenset = NRF_CLOCK->INTENSET;
    2a1e:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    2a22:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
    2a26:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
	NRF_CLOCK->TASKS_LFCLKSTART = 1;
    2a2a:	609f      	str	r7, [r3, #8]
	while (NRF_CLOCK->EVENTS_LFCLKSTARTED == 0) {
    2a2c:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    2a30:	b371      	cbz	r1, 2a90 <_k32src_start+0xbc>
	if (!(intenset & CLOCK_INTENSET_LFCLKSTARTED_Msk)) {
    2a32:	0792      	lsls	r2, r2, #30
    2a34:	4f19      	ldr	r7, [pc, #100]	; (2a9c <_k32src_start+0xc8>)
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    2a36:	bf58      	it	pl
    2a38:	2202      	movpl	r2, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    2a3a:	f04f 0100 	mov.w	r1, #0
    2a3e:	f04f 0501 	mov.w	r5, #1
    2a42:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	irq_enable(POWER_CLOCK_IRQn);
    2a46:	f04f 0000 	mov.w	r0, #0
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    2a4a:	bf58      	it	pl
    2a4c:	f8c3 2308 	strpl.w	r2, [r3, #776]	; 0x308
    2a50:	f8c7 5180 	str.w	r5, [r7, #384]	; 0x180
	irq_enable(POWER_CLOCK_IRQn);
    2a54:	f7ff f8ba 	bl	1bcc <_arch_irq_enable>
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    2a58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	NRF_CLOCK->EVENTS_DONE = 0;
    2a5c:	2100      	movs	r1, #0
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    2a5e:	2218      	movs	r2, #24
    2a60:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	NRF_CLOCK->EVENTS_DONE = 0;
    2a64:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
	NRF_CLOCK->EVENTS_CTTO = 0;
    2a68:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    2a6c:	f014 0103 	ands.w	r1, r4, #3
    2a70:	d1be      	bne.n	29f0 <_k32src_start+0x1c>
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
    2a72:	2010      	movs	r0, #16
    2a74:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
		NRF_CLOCK->INTENSET =
    2a78:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    2a7c:	4630      	mov	r0, r6
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    2a7e:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    2a82:	f7ff ff4f 	bl	2924 <_m16src_start>
		if (!err) {
    2a86:	2800      	cmp	r0, #0
    2a88:	d1b2      	bne.n	29f0 <_k32src_start+0x1c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2a8a:	f8c7 5100 	str.w	r5, [r7, #256]	; 0x100
    2a8e:	e7af      	b.n	29f0 <_k32src_start+0x1c>
		__WFE();
    2a90:	bf20      	wfe
		__SEV();
    2a92:	bf40      	sev
		__WFE();
    2a94:	bf20      	wfe
    2a96:	e7c9      	b.n	2a2c <_k32src_start+0x58>
    2a98:	20000110 	.word	0x20000110
    2a9c:	e000e100 	.word	0xe000e100

00002aa0 <_power_clock_isr>:
{
    2aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    2aa2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
{
    2aa6:	4605      	mov	r5, r0
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    2aa8:	f8d3 e108 	ldr.w	lr, [r3, #264]	; 0x108
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    2aac:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
    2ab0:	f8d3 440c 	ldr.w	r4, [r3, #1036]	; 0x40c
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
    2ab4:	f8d3 7100 	ldr.w	r7, [r3, #256]	; 0x100
	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
    2ab8:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
	done = (NRF_CLOCK->EVENTS_DONE != 0);
    2abc:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    2ac0:	f8d3 6110 	ldr.w	r6, [r3, #272]	; 0x110
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    2ac4:	f002 0201 	and.w	r2, r2, #1
	if (pof) {
    2ac8:	f1be 0f00 	cmp.w	lr, #0
    2acc:	d003      	beq.n	2ad6 <_power_clock_isr+0x36>
		NRF_POWER->EVENTS_POFWARN = 0;
    2ace:	f04f 0e00 	mov.w	lr, #0
    2ad2:	f8c3 e108 	str.w	lr, [r3, #264]	; 0x108
	if (hf) {
    2ad6:	b127      	cbz	r7, 2ae2 <_power_clock_isr+0x42>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    2ad8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2adc:	2700      	movs	r7, #0
    2ade:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
	if (hf_intenset && hf_stat) {
    2ae2:	b13a      	cbz	r2, 2af4 <_power_clock_isr+0x54>
    2ae4:	03e3      	lsls	r3, r4, #15
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    2ae6:	bf41      	itttt	mi
    2ae8:	f04f 4380 	movmi.w	r3, #1073741824	; 0x40000000
    2aec:	2201      	movmi	r2, #1
    2aee:	f8c3 2308 	strmi.w	r2, [r3, #776]	; 0x308
		NRF_CLOCK->TASKS_CAL = 1;
    2af2:	611a      	strmi	r2, [r3, #16]
	if (lf) {
    2af4:	b120      	cbz	r0, 2b00 <_power_clock_isr+0x60>
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    2af6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2afa:	2200      	movs	r2, #0
    2afc:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (done) {
    2b00:	b149      	cbz	r1, 2b16 <_power_clock_isr+0x76>
		NRF_CLOCK->EVENTS_DONE = 0;
    2b02:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    2b06:	2100      	movs	r1, #0
    2b08:	f8c4 110c 	str.w	r1, [r4, #268]	; 0x10c
		err = _m16src_stop(dev, NULL);
    2b0c:	4628      	mov	r0, r5
    2b0e:	f7ff fecf 	bl	28b0 <_m16src_stop>
		NRF_CLOCK->TASKS_CTSTART = 1;
    2b12:	2301      	movs	r3, #1
    2b14:	6163      	str	r3, [r4, #20]
	if (ctto) {
    2b16:	b176      	cbz	r6, 2b36 <_power_clock_isr+0x96>
		NRF_CLOCK->EVENTS_CTTO = 0;
    2b18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2b1c:	2100      	movs	r1, #0
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    2b1e:	2401      	movs	r4, #1
		NRF_CLOCK->EVENTS_CTTO = 0;
    2b20:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
		err = _m16src_start(dev, false);
    2b24:	4628      	mov	r0, r5
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    2b26:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    2b2a:	f7ff fefb 	bl	2924 <_m16src_start>
		if (!err) {
    2b2e:	b910      	cbnz	r0, 2b36 <_power_clock_isr+0x96>
    2b30:	4b01      	ldr	r3, [pc, #4]	; (2b38 <_power_clock_isr+0x98>)
    2b32:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
    2b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2b38:	e000e100 	.word	0xe000e100

00002b3c <gpiote_find_channel>:
#define GPIOTE_CFG_PIN_GET(config) ((config & GPIOTE_CONFIG_PSEL_Msk) >> \
				GPIOTE_CONFIG_PSEL_Pos)

static int gpiote_find_channel(struct device *dev, u32_t pin)
{
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2b3c:	6803      	ldr	r3, [r0, #0]
    2b3e:	689b      	ldr	r3, [r3, #8]
    2b40:	689a      	ldr	r2, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
		if ((data->gpiote_chan_mask & BIT(i)) &&
    2b42:	6883      	ldr	r3, [r0, #8]
{
    2b44:	b510      	push	{r4, lr}
		if ((data->gpiote_chan_mask & BIT(i)) &&
    2b46:	68dc      	ldr	r4, [r3, #12]
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    2b48:	2000      	movs	r0, #0
		if ((data->gpiote_chan_mask & BIT(i)) &&
    2b4a:	fa24 f300 	lsr.w	r3, r4, r0
    2b4e:	07db      	lsls	r3, r3, #31
    2b50:	d507      	bpl.n	2b62 <gpiote_find_channel+0x26>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin)) {
    2b52:	f500 73a2 	add.w	r3, r0, #324	; 0x144
    2b56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2b5a:	f3c3 2304 	ubfx	r3, r3, #8, #5
		if ((data->gpiote_chan_mask & BIT(i)) &&
    2b5e:	428b      	cmp	r3, r1
    2b60:	d004      	beq.n	2b6c <gpiote_find_channel+0x30>
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    2b62:	3001      	adds	r0, #1
    2b64:	2808      	cmp	r0, #8
    2b66:	d1f0      	bne.n	2b4a <gpiote_find_channel+0xe>
			return i;
		}
	}

	return -ENODEV;
    2b68:	f06f 0012 	mvn.w	r0, #18
}
    2b6c:	bd10      	pop	{r4, pc}

00002b6e <gpio_nrf5_read>:
}

static int gpio_nrf5_read(struct device *dev,
			  int access_op, u32_t pin, u32_t *value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    2b6e:	6800      	ldr	r0, [r0, #0]
    2b70:	6880      	ldr	r0, [r0, #8]
    2b72:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
    2b74:	b941      	cbnz	r1, 2b88 <gpio_nrf5_read+0x1a>
		*value = (gpio->IN >> pin) & 0x1;
    2b76:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    2b7a:	fa21 f202 	lsr.w	r2, r1, r2
    2b7e:	f002 0201 	and.w	r2, r2, #1
	} else {
		*value = gpio->IN;
    2b82:	601a      	str	r2, [r3, #0]
	}
	return 0;
}
    2b84:	2000      	movs	r0, #0
    2b86:	4770      	bx	lr
		*value = gpio->IN;
    2b88:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
    2b8c:	e7f9      	b.n	2b82 <gpio_nrf5_read+0x14>

00002b8e <gpio_nrf5_write>:

static int gpio_nrf5_write(struct device *dev,
			   int access_op, u32_t pin, u32_t value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    2b8e:	6800      	ldr	r0, [r0, #0]
    2b90:	6880      	ldr	r0, [r0, #8]
    2b92:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
    2b94:	b949      	cbnz	r1, 2baa <gpio_nrf5_write+0x1c>
    2b96:	2101      	movs	r1, #1
		if (value) { /* 1 */
			gpio->OUTSET = BIT(pin);
    2b98:	4091      	lsls	r1, r2
		if (value) { /* 1 */
    2b9a:	b11b      	cbz	r3, 2ba4 <gpio_nrf5_write+0x16>
			gpio->OUTSET = BIT(pin);
    2b9c:	f8c0 1508 	str.w	r1, [r0, #1288]	; 0x508
		}
	} else {
		gpio->OUT = value;
	}
	return 0;
}
    2ba0:	2000      	movs	r0, #0
    2ba2:	4770      	bx	lr
			gpio->OUTCLR = BIT(pin);
    2ba4:	f8c0 150c 	str.w	r1, [r0, #1292]	; 0x50c
    2ba8:	e7fa      	b.n	2ba0 <gpio_nrf5_write+0x12>
		gpio->OUT = value;
    2baa:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
    2bae:	e7f7      	b.n	2ba0 <gpio_nrf5_write+0x12>

00002bb0 <gpio_nrf5_manage_callback>:

static int gpio_nrf5_manage_callback(struct device *dev,
				    struct gpio_callback *callback, bool set)
{
    2bb0:	b510      	push	{r4, lr}
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    2bb2:	6883      	ldr	r3, [r0, #8]
					 bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (set) {
    2bb4:	b13a      	cbz	r2, 2bc6 <gpio_nrf5_manage_callback+0x16>
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
    2bb6:	681a      	ldr	r2, [r3, #0]
    2bb8:	600a      	str	r2, [r1, #0]
	list->head = node;

	if (!list->tail) {
    2bba:	685a      	ldr	r2, [r3, #4]
	list->head = node;
    2bbc:	6019      	str	r1, [r3, #0]
	if (!list->tail) {
    2bbe:	b902      	cbnz	r2, 2bc2 <gpio_nrf5_manage_callback+0x12>
		list->tail = list->head;
    2bc0:	6059      	str	r1, [r3, #4]

	_gpio_manage_callback(&data->callbacks, callback, set);

	return 0;
}
    2bc2:	2000      	movs	r0, #0
    2bc4:	bd10      	pop	{r4, pc}
    2bc6:	6818      	ldr	r0, [r3, #0]
					     sys_snode_t *node)
{
	sys_snode_t *prev = NULL;
	sys_snode_t *test;

	SYS_SLIST_FOR_EACH_NODE(list, test) {
    2bc8:	2800      	cmp	r0, #0
    2bca:	d0fa      	beq.n	2bc2 <gpio_nrf5_manage_callback+0x12>
		if (test == node) {
    2bcc:	4281      	cmp	r1, r0
    2bce:	d10e      	bne.n	2bee <gpio_nrf5_manage_callback+0x3e>
    2bd0:	685c      	ldr	r4, [r3, #4]
    2bd2:	6808      	ldr	r0, [r1, #0]
	if (!prev_node) {
    2bd4:	b932      	cbnz	r2, 2be4 <gpio_nrf5_manage_callback+0x34>
		if (list->tail == node) {
    2bd6:	42a1      	cmp	r1, r4
		list->head = node->next;
    2bd8:	6018      	str	r0, [r3, #0]
		if (list->tail == node) {
    2bda:	d100      	bne.n	2bde <gpio_nrf5_manage_callback+0x2e>
			list->tail = list->head;
    2bdc:	6058      	str	r0, [r3, #4]
	node->next = NULL;
    2bde:	2300      	movs	r3, #0
    2be0:	600b      	str	r3, [r1, #0]
    2be2:	e7ee      	b.n	2bc2 <gpio_nrf5_manage_callback+0x12>
		if (list->tail == node) {
    2be4:	42a1      	cmp	r1, r4
		prev_node->next = node->next;
    2be6:	6010      	str	r0, [r2, #0]
			list->tail = prev_node;
    2be8:	bf08      	it	eq
    2bea:	605a      	streq	r2, [r3, #4]
    2bec:	e7f7      	b.n	2bde <gpio_nrf5_manage_callback+0x2e>
	SYS_SLIST_FOR_EACH_NODE(list, test) {
    2bee:	4602      	mov	r2, r0
    2bf0:	6800      	ldr	r0, [r0, #0]
    2bf2:	e7e9      	b.n	2bc8 <gpio_nrf5_manage_callback+0x18>

00002bf4 <gpio_nrf5_enable_callback>:


static int gpio_nrf5_enable_callback(struct device *dev,
				    int access_op, u32_t pin)
{
    2bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2bf6:	4614      	mov	r4, r2
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2bf8:	6802      	ldr	r2, [r0, #0]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    2bfa:	6887      	ldr	r7, [r0, #8]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2bfc:	6892      	ldr	r2, [r2, #8]
	int i;

	if (access_op == GPIO_ACCESS_BY_PIN) {
    2bfe:	460d      	mov	r5, r1
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2c00:	6896      	ldr	r6, [r2, #8]
	if (access_op == GPIO_ACCESS_BY_PIN) {
    2c02:	b9a1      	cbnz	r1, 2c2e <gpio_nrf5_enable_callback+0x3a>

		i = gpiote_find_channel(dev, pin);
    2c04:	4621      	mov	r1, r4
    2c06:	f7ff ff99 	bl	2b3c <gpiote_find_channel>
		if (i < 0) {
    2c0a:	2800      	cmp	r0, #0
    2c0c:	db11      	blt.n	2c32 <gpio_nrf5_enable_callback+0x3e>
			return i;
		}

		data->pin_callback_enables |= BIT(pin);
    2c0e:	68ba      	ldr	r2, [r7, #8]
    2c10:	2301      	movs	r3, #1
    2c12:	fa03 f404 	lsl.w	r4, r3, r4
    2c16:	4314      	orrs	r4, r2
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
    2c18:	f100 0240 	add.w	r2, r0, #64	; 0x40
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
    2c1c:	fa03 f000 	lsl.w	r0, r3, r0
		data->pin_callback_enables |= BIT(pin);
    2c20:	60bc      	str	r4, [r7, #8]
		gpiote->EVENTS_IN[i] = 0;
    2c22:	f846 5022 	str.w	r5, [r6, r2, lsl #2]
		gpiote->INTENSET = BIT(i);
    2c26:	f8c6 0304 	str.w	r0, [r6, #772]	; 0x304
	} else {
		return -ENOTSUP;
	}

	return 0;
    2c2a:	4628      	mov	r0, r5
    2c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOTSUP;
    2c2e:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
    2c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00002c34 <gpio_nrf5_disable_callback>:


static int gpio_nrf5_disable_callback(struct device *dev,
				     int access_op, u32_t pin)
{
    2c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2c36:	4614      	mov	r4, r2
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2c38:	6802      	ldr	r2, [r0, #0]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    2c3a:	6886      	ldr	r6, [r0, #8]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2c3c:	6892      	ldr	r2, [r2, #8]
	int i;

	if (access_op == GPIO_ACCESS_BY_PIN) {
    2c3e:	460d      	mov	r5, r1
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2c40:	6897      	ldr	r7, [r2, #8]
	if (access_op == GPIO_ACCESS_BY_PIN) {
    2c42:	b989      	cbnz	r1, 2c68 <gpio_nrf5_disable_callback+0x34>
		i = gpiote_find_channel(dev, pin);
    2c44:	4621      	mov	r1, r4
    2c46:	f7ff ff79 	bl	2b3c <gpiote_find_channel>
		if (i < 0) {
    2c4a:	2800      	cmp	r0, #0
    2c4c:	db0e      	blt.n	2c6c <gpio_nrf5_disable_callback+0x38>
			return i;
		}

		data->pin_callback_enables &= ~(BIT(pin));
    2c4e:	68b2      	ldr	r2, [r6, #8]
    2c50:	2301      	movs	r3, #1
    2c52:	fa03 f404 	lsl.w	r4, r3, r4
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR = BIT(i);
    2c56:	fa03 f000 	lsl.w	r0, r3, r0
		data->pin_callback_enables &= ~(BIT(pin));
    2c5a:	ea22 0404 	bic.w	r4, r2, r4
    2c5e:	60b4      	str	r4, [r6, #8]
		gpiote->INTENCLR = BIT(i);
    2c60:	f8c7 0308 	str.w	r0, [r7, #776]	; 0x308
	} else {
		return -ENOTSUP;
	}

	return 0;
    2c64:	4628      	mov	r0, r5
    2c66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOTSUP;
    2c68:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
    2c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00002c6e <gpio_nrf5_P0_init>:
		    &gpio_data_P0, &gpio_nrf5_P0_cfg,
		    POST_KERNEL, CONFIG_KERNEL_INIT_PRIORITY_DEFAULT,
		    &gpio_nrf5_drv_api_funcs);

static int gpio_nrf5_P0_init(struct device *dev)
{
    2c6e:	b508      	push	{r3, lr}
	IRQ_CONNECT(NRF5_IRQ_GPIOTE_IRQn, CONFIG_GPIO_NRF5_PORT_P0_PRI,
    2c70:	2200      	movs	r2, #0
    2c72:	2101      	movs	r1, #1
    2c74:	2006      	movs	r0, #6
    2c76:	f7fe ffdb 	bl	1c30 <_irq_priority_set>
		    gpio_nrf5_port_isr, DEVICE_GET(gpio_nrf5_P0), 0);

	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    2c7a:	2006      	movs	r0, #6
    2c7c:	f7fe ffa6 	bl	1bcc <_arch_irq_enable>

	return 0;
}
    2c80:	2000      	movs	r0, #0
    2c82:	bd08      	pop	{r3, pc}

00002c84 <gpio_nrf5_port_isr>:
{
    2c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2c86:	6803      	ldr	r3, [r0, #0]
{
    2c88:	4606      	mov	r6, r0
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2c8a:	689b      	ldr	r3, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    2c8c:	68b4      	ldr	r4, [r6, #8]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2c8e:	6898      	ldr	r0, [r3, #8]
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    2c90:	2200      	movs	r2, #0
	u32_t enabled_int, int_status = 0;
    2c92:	4613      	mov	r3, r2
			gpiote->EVENTS_IN[i] = 0;
    2c94:	4615      	mov	r5, r2
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
    2c96:	2701      	movs	r7, #1
    2c98:	eb00 0182 	add.w	r1, r0, r2, lsl #2
		if (gpiote->EVENTS_IN[i]) {
    2c9c:	f8d1 e100 	ldr.w	lr, [r1, #256]	; 0x100
    2ca0:	f1be 0f00 	cmp.w	lr, #0
    2ca4:	d008      	beq.n	2cb8 <gpio_nrf5_port_isr+0x34>
			gpiote->EVENTS_IN[i] = 0;
    2ca6:	f8c1 5100 	str.w	r5, [r1, #256]	; 0x100
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
    2caa:	f8d1 1510 	ldr.w	r1, [r1, #1296]	; 0x510
    2cae:	f3c1 2104 	ubfx	r1, r1, #8, #5
    2cb2:	fa07 f101 	lsl.w	r1, r7, r1
    2cb6:	430b      	orrs	r3, r1
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    2cb8:	3201      	adds	r2, #1
    2cba:	2a08      	cmp	r2, #8
    2cbc:	d1ec      	bne.n	2c98 <gpio_nrf5_port_isr+0x14>
	enabled_int = int_status & data->pin_callback_enables;
    2cbe:	68a5      	ldr	r5, [r4, #8]
	irq_disable(NRF5_IRQ_GPIOTE_IRQn);
    2cc0:	2006      	movs	r0, #6
	enabled_int = int_status & data->pin_callback_enables;
    2cc2:	401d      	ands	r5, r3
	irq_disable(NRF5_IRQ_GPIOTE_IRQn);
    2cc4:	f7fe ff92 	bl	1bec <_arch_irq_disable>
    2cc8:	6824      	ldr	r4, [r4, #0]
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
    2cca:	b924      	cbnz	r4, 2cd6 <gpio_nrf5_port_isr+0x52>
	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    2ccc:	2006      	movs	r0, #6
}
    2cce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    2cd2:	f7fe bf7b 	b.w	1bcc <_arch_irq_enable>
		if (cb->pin_mask & pins) {
    2cd6:	68a3      	ldr	r3, [r4, #8]
    2cd8:	421d      	tst	r5, r3
    2cda:	d0f5      	beq.n	2cc8 <gpio_nrf5_port_isr+0x44>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
    2cdc:	6863      	ldr	r3, [r4, #4]
    2cde:	462a      	mov	r2, r5
    2ce0:	4621      	mov	r1, r4
    2ce2:	4630      	mov	r0, r6
    2ce4:	4798      	blx	r3
    2ce6:	e7ef      	b.n	2cc8 <gpio_nrf5_port_isr+0x44>

00002ce8 <gpio_nrf5_config>:
{
    2ce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2cec:	4614      	mov	r4, r2
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2cee:	6802      	ldr	r2, [r0, #0]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    2cf0:	6887      	ldr	r7, [r0, #8]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2cf2:	6892      	ldr	r2, [r2, #8]
{
    2cf4:	4680      	mov	r8, r0
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2cf6:	6895      	ldr	r5, [r2, #8]
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    2cf8:	6810      	ldr	r0, [r2, #0]
	if (access_op == GPIO_ACCESS_BY_PIN) {
    2cfa:	b119      	cbz	r1, 2d04 <gpio_nrf5_config+0x1c>
		return -ENOTSUP;
    2cfc:	f06f 0022 	mvn.w	r0, #34	; 0x22
    2d00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    2d04:	f403 7240 	and.w	r2, r3, #768	; 0x300
    2d08:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
		int ds_low = (flags & GPIO_DS_LOW_MASK) >> GPIO_DS_LOW_POS;
    2d0c:	f3c3 3101 	ubfx	r1, r3, #12, #2
		int ds_high = (flags & GPIO_DS_HIGH_MASK) >> GPIO_DS_HIGH_POS;
    2d10:	f3c3 3981 	ubfx	r9, r3, #14, #2
		unsigned int sense = (flags & GPIO_PIN_CNF_SENSE_Msk);
    2d14:	f403 3e40 	and.w	lr, r3, #196608	; 0x30000
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    2d18:	d056      	beq.n	2dc8 <gpio_nrf5_config+0xe0>
		u8_t pull = GPIO_PULL_DISABLE;
    2d1a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    2d1e:	bf0c      	ite	eq
    2d20:	2204      	moveq	r2, #4
    2d22:	2200      	movne	r2, #0
			sense = GPIO_SENSE_DISABLE;
    2d24:	f5be 3f80 	cmp.w	lr, #65536	; 0x10000
    2d28:	bf08      	it	eq
    2d2a:	f04f 0e00 	moveq.w	lr, #0
		if ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT) {
    2d2e:	f013 0f01 	tst.w	r3, #1
    2d32:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 2dfc <gpio_nrf5_config+0x114>
    2d36:	ea4f 0181 	mov.w	r1, r1, lsl #2
    2d3a:	f504 76e0 	add.w	r6, r4, #448	; 0x1c0
    2d3e:	d04e      	beq.n	2dde <gpio_nrf5_config+0xf6>
			if (pull == GPIO_PULL_UP) {
    2d40:	2a0c      	cmp	r2, #12
    2d42:	d143      	bne.n	2dcc <gpio_nrf5_config+0xe4>
				gpio->OUTSET = BIT(pin);
    2d44:	f04f 0e01 	mov.w	lr, #1
    2d48:	fa0e fe04 	lsl.w	lr, lr, r4
    2d4c:	f8c0 e508 	str.w	lr, [r0, #1288]	; 0x508
					      drive_strength[ds_low][ds_high] |
    2d50:	4449      	add	r1, r9
					      GPIO_INPUT_DISCONNECT |
    2d52:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
    2d56:	f041 0103 	orr.w	r1, r1, #3
    2d5a:	430a      	orrs	r2, r1
			gpio->PIN_CNF[pin] = (sense |
    2d5c:	f840 2026 	str.w	r2, [r0, r6, lsl #2]
	if (flags & GPIO_INT) {
    2d60:	f013 0002 	ands.w	r0, r3, #2
    2d64:	d047      	beq.n	2df6 <gpio_nrf5_config+0x10e>
		if (flags & GPIO_INT_EDGE) {
    2d66:	0699      	lsls	r1, r3, #26
    2d68:	d5c8      	bpl.n	2cfc <gpio_nrf5_config+0x14>
			if (flags & GPIO_INT_DOUBLE_EDGE) {
    2d6a:	065a      	lsls	r2, r3, #25
    2d6c:	d43e      	bmi.n	2dec <gpio_nrf5_config+0x104>
				config |= GPIOTE_CFG_POL_H2L;
    2d6e:	f013 0f04 	tst.w	r3, #4
    2d72:	bf14      	ite	ne
    2d74:	f44f 3680 	movne.w	r6, #65536	; 0x10000
    2d78:	f44f 3600 	moveq.w	r6, #131072	; 0x20000
		if (__builtin_popcount(data->gpiote_chan_mask) ==
    2d7c:	68f8      	ldr	r0, [r7, #12]
    2d7e:	f7fd faa3 	bl	2c8 <__popcountsi2>
    2d82:	2808      	cmp	r0, #8
    2d84:	d035      	beq.n	2df2 <gpio_nrf5_config+0x10a>
		int i = gpiote_find_channel(dev, pin);
    2d86:	4621      	mov	r1, r4
    2d88:	4640      	mov	r0, r8
    2d8a:	f7ff fed7 	bl	2b3c <gpiote_find_channel>
		if (i < 0) {
    2d8e:	2800      	cmp	r0, #0
    2d90:	68fb      	ldr	r3, [r7, #12]
    2d92:	da08      	bge.n	2da6 <gpio_nrf5_config+0xbe>
			i = __builtin_ffs(~(data->gpiote_chan_mask)) - 1;
    2d94:	43da      	mvns	r2, r3
    2d96:	fa92 f0a2 	rbit	r0, r2
    2d9a:	2a00      	cmp	r2, #0
    2d9c:	fab0 f080 	clz	r0, r0
    2da0:	bf08      	it	eq
    2da2:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
		config |= GPIOTE_CFG_PIN(pin);
    2da6:	0224      	lsls	r4, r4, #8
		data->gpiote_chan_mask |= BIT(i);
    2da8:	2201      	movs	r2, #1
		config |= GPIOTE_CFG_PIN(pin);
    2daa:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
		data->gpiote_chan_mask |= BIT(i);
    2dae:	4082      	lsls	r2, r0
		config |= GPIOTE_CFG_PIN(pin);
    2db0:	f044 0401 	orr.w	r4, r4, #1
		gpiote->CONFIG[i] = config;
    2db4:	f500 70a2 	add.w	r0, r0, #324	; 0x144
		data->gpiote_chan_mask |= BIT(i);
    2db8:	4313      	orrs	r3, r2
		config |= GPIOTE_CFG_PIN(pin);
    2dba:	4334      	orrs	r4, r6
		data->gpiote_chan_mask |= BIT(i);
    2dbc:	60fb      	str	r3, [r7, #12]
		gpiote->CONFIG[i] = config;
    2dbe:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
	return 0;
    2dc2:	2000      	movs	r0, #0
    2dc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			pull = GPIO_PULL_UP;
    2dc8:	220c      	movs	r2, #12
    2dca:	e7ab      	b.n	2d24 <gpio_nrf5_config+0x3c>
			} else if (pull == GPIO_PULL_DOWN) {
    2dcc:	2a04      	cmp	r2, #4
				gpio->OUTCLR = BIT(pin);
    2dce:	bf02      	ittt	eq
    2dd0:	f04f 0e01 	moveq.w	lr, #1
    2dd4:	fa0e fe04 	lsleq.w	lr, lr, r4
    2dd8:	f8c0 e50c 	streq.w	lr, [r0, #1292]	; 0x50c
    2ddc:	e7b8      	b.n	2d50 <gpio_nrf5_config+0x68>
					      drive_strength[ds_low][ds_high] |
    2dde:	4449      	add	r1, r9
    2de0:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
    2de4:	430a      	orrs	r2, r1
    2de6:	ea42 020e 	orr.w	r2, r2, lr
    2dea:	e7b7      	b.n	2d5c <gpio_nrf5_config+0x74>
				config |= GPIOTE_CFG_POL_TOGG;
    2dec:	f44f 3640 	mov.w	r6, #196608	; 0x30000
    2df0:	e7c4      	b.n	2d7c <gpio_nrf5_config+0x94>
			return -EIO;
    2df2:	f06f 0004 	mvn.w	r0, #4
}
    2df6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2dfa:	bf00      	nop
    2dfc:	000233a8 	.word	0x000233a8

00002e00 <uart_nrf5_poll_in>:
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */

static int uart_nrf5_poll_in(struct device *dev, unsigned char *c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    2e00:	6803      	ldr	r3, [r0, #0]
    2e02:	689b      	ldr	r3, [r3, #8]
    2e04:	681b      	ldr	r3, [r3, #0]

	if (!uart->EVENTS_RXDRDY) {
    2e06:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
    2e0a:	b132      	cbz	r2, 2e1a <uart_nrf5_poll_in+0x1a>
		return -1;
	}

	/* Clear the interrupt */
	uart->EVENTS_RXDRDY = 0;
    2e0c:	2000      	movs	r0, #0
    2e0e:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108

	/* got a character */
	*c = (unsigned char)uart->RXD;
    2e12:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    2e16:	700b      	strb	r3, [r1, #0]

	return 0;
    2e18:	4770      	bx	lr
		return -1;
    2e1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    2e1e:	4770      	bx	lr

00002e20 <uart_nrf5_poll_out>:
 * @return Sent character
 */
static unsigned char uart_nrf5_poll_out(struct device *dev,
					unsigned char c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    2e20:	6803      	ldr	r3, [r0, #0]
    2e22:	689b      	ldr	r3, [r3, #8]
    2e24:	681b      	ldr	r3, [r3, #0]

	/* send a character */
	uart->TXD = (u8_t)c;
    2e26:	f8c3 151c 	str.w	r1, [r3, #1308]	; 0x51c

	/* Wait for transmitter to be ready */
	while (!uart->EVENTS_TXDRDY) {
    2e2a:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
    2e2e:	2a00      	cmp	r2, #0
    2e30:	d0fb      	beq.n	2e2a <uart_nrf5_poll_out+0xa>
	}

	uart->EVENTS_TXDRDY = 0;
    2e32:	2200      	movs	r2, #0
    2e34:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

	return c;
}
    2e38:	4608      	mov	r0, r1
    2e3a:	4770      	bx	lr

00002e3c <uart_nrf5_err_check>:

/** Console I/O function */
static int uart_nrf5_err_check(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    2e3c:	6803      	ldr	r3, [r0, #0]
    2e3e:	689b      	ldr	r3, [r3, #8]
    2e40:	681b      	ldr	r3, [r3, #0]
	u32_t error = 0;

	if (uart->EVENTS_ERROR) {
    2e42:	f8d3 0124 	ldr.w	r0, [r3, #292]	; 0x124
    2e46:	b118      	cbz	r0, 2e50 <uart_nrf5_err_check+0x14>
		/* register bitfields maps to the defines in uart.h */
		error = uart->ERRORSRC;
    2e48:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480

		/* Clear the register */
		uart->ERRORSRC = error;
    2e4c:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
	}

	error = error & 0x0F;

	return error;
}
    2e50:	f000 000f 	and.w	r0, r0, #15
    2e54:	4770      	bx	lr
	...

00002e58 <uart_nrf5_init>:
{
    2e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _uart *uart = UART_STRUCT(dev);
    2e5a:	6803      	ldr	r3, [r0, #0]
    2e5c:	689b      	ldr	r3, [r3, #8]
{
    2e5e:	4605      	mov	r5, r0
	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
    2e60:	4818      	ldr	r0, [pc, #96]	; (2ec4 <uart_nrf5_init+0x6c>)
	volatile struct _uart *uart = UART_STRUCT(dev);
    2e62:	681c      	ldr	r4, [r3, #0]
	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
    2e64:	f01e f994 	bl	21190 <device_get_binding>
static inline int _impl_gpio_config(struct device *port, int access_op,
				    u32_t pin, int flags)
{
	const struct gpio_driver_api *api = port->driver_api;

	return api->config(port, access_op, pin, flags);
    2e68:	6843      	ldr	r3, [r0, #4]
    2e6a:	4606      	mov	r6, r0
    2e6c:	681f      	ldr	r7, [r3, #0]
    2e6e:	2206      	movs	r2, #6
    2e70:	f240 1301 	movw	r3, #257	; 0x101
    2e74:	2100      	movs	r1, #0
    2e76:	47b8      	blx	r7
    2e78:	6873      	ldr	r3, [r6, #4]
    2e7a:	681f      	ldr	r7, [r3, #0]
    2e7c:	2300      	movs	r3, #0
    2e7e:	4619      	mov	r1, r3
    2e80:	2208      	movs	r2, #8
    2e82:	4630      	mov	r0, r6
    2e84:	47b8      	blx	r7
	uart->PSELTXD = CONFIG_UART_NRF5_GPIO_TX_PIN;
    2e86:	2306      	movs	r3, #6
    2e88:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
	uart->PSELRXD = CONFIG_UART_NRF5_GPIO_RX_PIN;
    2e8c:	2308      	movs	r3, #8
    2e8e:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
	DEV_DATA(dev)->baud_rate = CONFIG_UART_NRF5_BAUD_RATE;
    2e92:	68ab      	ldr	r3, [r5, #8]
    2e94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
    2e98:	601a      	str	r2, [r3, #0]
	volatile struct _uart *uart = UART_STRUCT(dev);
    2e9a:	682b      	ldr	r3, [r5, #0]
    2e9c:	689b      	ldr	r3, [r3, #8]
    2e9e:	681b      	ldr	r3, [r3, #0]
	uart->BAUDRATE = divisor << UART_BAUDRATE_BAUDRATE_Pos;
    2ea0:	f04f 72eb 	mov.w	r2, #30801920	; 0x1d60000
    2ea4:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	uart->ENABLE = (UART_ENABLE_ENABLE_Enabled << UART_ENABLE_ENABLE_Pos);
    2ea8:	2304      	movs	r3, #4
    2eaa:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	uart->EVENTS_TXDRDY = 0;
    2eae:	2000      	movs	r0, #0
	uart->TASKS_STARTTX = 1;
    2eb0:	2301      	movs	r3, #1
	uart->EVENTS_TXDRDY = 0;
    2eb2:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
	uart->EVENTS_RXDRDY = 0;
    2eb6:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
	uart->TASKS_STARTTX = 1;
    2eba:	60a3      	str	r3, [r4, #8]
	uart->TASKS_STARTRX = 1;
    2ebc:	6023      	str	r3, [r4, #0]
	dev->driver_api = &uart_nrf5_driver_api;
    2ebe:	4b02      	ldr	r3, [pc, #8]	; (2ec8 <uart_nrf5_init+0x70>)
    2ec0:	606b      	str	r3, [r5, #4]
}
    2ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2ec4:	00023410 	.word	0x00023410
    2ec8:	00023420 	.word	0x00023420

00002ecc <get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static inline u8_t get(struct rand *rng, u8_t octets, u8_t *rand)
{
    2ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u8_t first, last, avail, remaining, *d, *s;

	__ASSERT_NO_MSG(rng);

	first = rng->first;
    2ed0:	7883      	ldrb	r3, [r0, #2]
	last = rng->last;
    2ed2:	78c4      	ldrb	r4, [r0, #3]

	d = &rand[octets];
	s = &rng->rand[first];
    2ed4:	1d1e      	adds	r6, r3, #4

	if (first <= last) {
    2ed6:	42a3      	cmp	r3, r4
	d = &rand[octets];
    2ed8:	440a      	add	r2, r1
	s = &rng->rand[first];
    2eda:	4406      	add	r6, r0
	if (first <= last) {
    2edc:	d81f      	bhi.n	2f1e <get+0x52>
		/* copy octets from contiguous memory */
		avail = last - first;
    2ede:	1ae4      	subs	r4, r4, r3
    2ee0:	b2e4      	uxtb	r4, r4
		if (octets < avail) {
    2ee2:	42a1      	cmp	r1, r4
			remaining = avail - octets;
    2ee4:	bf3e      	ittt	cc
    2ee6:	1a64      	subcc	r4, r4, r1
    2ee8:	b2e7      	uxtbcc	r7, r4
    2eea:	460c      	movcc	r4, r1
			avail = octets;
		} else {
			remaining = 0;
		}

		first += avail;
    2eec:	4423      	add	r3, r4
		octets -= avail;
    2eee:	eba1 0104 	sub.w	r1, r1, r4
			remaining = 0;
    2ef2:	bf28      	it	cs
    2ef4:	2700      	movcs	r7, #0
		first += avail;
    2ef6:	b2db      	uxtb	r3, r3
		octets -= avail;
    2ef8:	b2c9      	uxtb	r1, r1
    2efa:	4434      	add	r4, r6

		while (avail--) {
    2efc:	42a6      	cmp	r6, r4
    2efe:	d109      	bne.n	2f14 <get+0x48>
			while (last--) {
				*(--d) = *s++;
			}
		}

		rng->first = first;
    2f00:	7083      	strb	r3, [r0, #2]
	}

	if (remaining < rng->threshold) {
    2f02:	7843      	ldrb	r3, [r0, #1]
    2f04:	42bb      	cmp	r3, r7
		NRF_RNG->TASKS_START = 1;
    2f06:	bf82      	ittt	hi
    2f08:	4b20      	ldrhi	r3, [pc, #128]	; (2f8c <get+0xc0>)
    2f0a:	2201      	movhi	r2, #1
    2f0c:	601a      	strhi	r2, [r3, #0]
		NRF_RNG_regw_sideeffects();
#endif
	}

	return octets;
}
    2f0e:	4608      	mov	r0, r1
    2f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			*(--d) = *s++;
    2f14:	f816 5b01 	ldrb.w	r5, [r6], #1
    2f18:	f802 5d01 	strb.w	r5, [r2, #-1]!
    2f1c:	e7ee      	b.n	2efc <get+0x30>
		avail = rng->count - first;
    2f1e:	7805      	ldrb	r5, [r0, #0]
    2f20:	1aed      	subs	r5, r5, r3
    2f22:	b2ed      	uxtb	r5, r5
		if (octets < avail) {
    2f24:	42a9      	cmp	r1, r5
			remaining = avail + last - octets;
    2f26:	bf3f      	itttt	cc
    2f28:	1a67      	subcc	r7, r4, r1
    2f2a:	19ed      	addcc	r5, r5, r7
    2f2c:	b2ef      	uxtbcc	r7, r5
    2f2e:	460d      	movcc	r5, r1
			first += avail;
    2f30:	bf38      	it	cc
    2f32:	185b      	addcc	r3, r3, r1
		octets -= avail;
    2f34:	eba1 0105 	sub.w	r1, r1, r5
			first += avail;
    2f38:	bf32      	itee	cc
    2f3a:	b2db      	uxtbcc	r3, r3
    2f3c:	4627      	movcs	r7, r4
			first = 0;
    2f3e:	2300      	movcs	r3, #0
		octets -= avail;
    2f40:	b2c9      	uxtb	r1, r1
    2f42:	4696      	mov	lr, r2
    2f44:	eb06 0c05 	add.w	ip, r6, r5
		while (avail--) {
    2f48:	4566      	cmp	r6, ip
    2f4a:	d119      	bne.n	2f80 <get+0xb4>
    2f4c:	1b52      	subs	r2, r2, r5
		if (octets && last) {
    2f4e:	2900      	cmp	r1, #0
    2f50:	d0d6      	beq.n	2f00 <get+0x34>
    2f52:	2c00      	cmp	r4, #0
    2f54:	d0d4      	beq.n	2f00 <get+0x34>
			if (octets < last) {
    2f56:	428c      	cmp	r4, r1
    2f58:	bf8a      	itet	hi
    2f5a:	460b      	movhi	r3, r1
    2f5c:	4623      	movls	r3, r4
				remaining = last - octets;
    2f5e:	1a64      	subhi	r4, r4, r1
			s = &rng->rand[0];
    2f60:	f100 0604 	add.w	r6, r0, #4
			octets -= last;
    2f64:	eba1 0103 	sub.w	r1, r1, r3
				remaining = last - octets;
    2f68:	bf8c      	ite	hi
    2f6a:	b2e7      	uxtbhi	r7, r4
				remaining = 0;
    2f6c:	2700      	movls	r7, #0
			octets -= last;
    2f6e:	b2c9      	uxtb	r1, r1
    2f70:	18f4      	adds	r4, r6, r3
			while (last--) {
    2f72:	42a6      	cmp	r6, r4
    2f74:	d0c4      	beq.n	2f00 <get+0x34>
				*(--d) = *s++;
    2f76:	f816 5b01 	ldrb.w	r5, [r6], #1
    2f7a:	f802 5d01 	strb.w	r5, [r2, #-1]!
    2f7e:	e7f8      	b.n	2f72 <get+0xa6>
			*(--d) = *s++;
    2f80:	f816 8b01 	ldrb.w	r8, [r6], #1
    2f84:	f80e 8d01 	strb.w	r8, [lr, #-1]!
    2f88:	e7de      	b.n	2f48 <get+0x7c>
    2f8a:	bf00      	nop
    2f8c:	4000d000 	.word	0x4000d000

00002f90 <isr>:
#pragma GCC pop_options

static int isr(struct rand *rng, bool store)
{
    2f90:	b530      	push	{r4, r5, lr}
	u8_t last;

	if (!rng) {
    2f92:	b1d0      	cbz	r0, 2fca <isr+0x3a>
		return -ENOBUFS;
	}

	last = rng->last + 1;
    2f94:	78c2      	ldrb	r2, [r0, #3]
	if (last == rng->count) {
    2f96:	7805      	ldrb	r5, [r0, #0]
		last = 0;
	}

	if (last == rng->first) {
    2f98:	7884      	ldrb	r4, [r0, #2]
	last = rng->last + 1;
    2f9a:	1c53      	adds	r3, r2, #1
    2f9c:	b2db      	uxtb	r3, r3
		last = 0;
    2f9e:	42ab      	cmp	r3, r5
    2fa0:	bf08      	it	eq
    2fa2:	2300      	moveq	r3, #0
	if (last == rng->first) {
    2fa4:	42a3      	cmp	r3, r4
    2fa6:	d010      	beq.n	2fca <isr+0x3a>
		 * new value could be generated before NRF_RNG task is stopped.
		 */
		return -ENOBUFS;
	}

	if (!store) {
    2fa8:	b161      	cbz	r1, 2fc4 <isr+0x34>
		return -EBUSY;
	}

	rng->rand[rng->last] = NRF_RNG->VALUE;
    2faa:	490a      	ldr	r1, [pc, #40]	; (2fd4 <isr+0x44>)
    2fac:	4402      	add	r2, r0
    2fae:	f8d1 1508 	ldr.w	r1, [r1, #1288]	; 0x508
    2fb2:	7111      	strb	r1, [r2, #4]
	rng->last = last;
    2fb4:	70c3      	strb	r3, [r0, #3]

	last = rng->last + 1;
    2fb6:	3301      	adds	r3, #1
    2fb8:	b2db      	uxtb	r3, r3
	if (last == rng->count) {
		last = 0;
    2fba:	429d      	cmp	r5, r3
    2fbc:	bf08      	it	eq
    2fbe:	2300      	moveq	r3, #0
	}

	if (last == rng->first) {
    2fc0:	42a3      	cmp	r3, r4
    2fc2:	d005      	beq.n	2fd0 <isr+0x40>
		return 0;
	}

	return -EBUSY;
    2fc4:	f06f 000f 	mvn.w	r0, #15
    2fc8:	bd30      	pop	{r4, r5, pc}
		return -ENOBUFS;
    2fca:	f06f 0036 	mvn.w	r0, #54	; 0x36
    2fce:	bd30      	pop	{r4, r5, pc}
		return 0;
    2fd0:	2000      	movs	r0, #0
}
    2fd2:	bd30      	pop	{r4, r5, pc}
    2fd4:	4000d000 	.word	0x4000d000

00002fd8 <entropy_nrf5_init>:
		    entropy_nrf5_init, &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(struct device *device)
{
    2fd8:	b570      	push	{r4, r5, r6, lr}
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
    2fda:	6884      	ldr	r4, [r0, #8]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    2fdc:	2201      	movs	r2, #1
    2fde:	4611      	mov	r1, r2
    2fe0:	4620      	mov	r0, r4
    2fe2:	f01e fdd9 	bl	21b98 <_impl_k_sem_init>
    2fe6:	f104 0018 	add.w	r0, r4, #24
    2fea:	2201      	movs	r2, #1
    2fec:	2100      	movs	r1, #0
    2fee:	f01e fdd3 	bl	21b98 <_impl_k_sem_init>
	rng->threshold = threshold;
    2ff2:	2304      	movs	r3, #4
    2ff4:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
    2ff8:	230c      	movs	r3, #12
	rng->first = rng->last = 0;
    2ffa:	2500      	movs	r5, #0
	rng->threshold = threshold;
    2ffc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	rng->count = len;
    3000:	2105      	movs	r1, #5
	init((struct rand *)dev_data->isr, RAND_ISR_LEN,
	     CONFIG_ENTROPY_NRF5_ISR_THRESHOLD);

	/* Enable or disable bias correction */
	if (IS_ENABLED(CONFIG_ENTROPY_NRF5_BIAS_CORRECTION)) {
		NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
    3002:	4b11      	ldr	r3, [pc, #68]	; (3048 <entropy_nrf5_init+0x70>)
	rng->count = len;
    3004:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
    3008:	260d      	movs	r6, #13
	rng->first = rng->last = 0;
    300a:	f884 5033 	strb.w	r5, [r4, #51]	; 0x33
    300e:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
	rng->count = len;
    3012:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
	rng->first = rng->last = 0;
    3016:	f884 503f 	strb.w	r5, [r4, #63]	; 0x3f
    301a:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
		NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
    301e:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
    3022:	f042 0201 	orr.w	r2, r2, #1
    3026:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	} else {
		NRF_RNG->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
	}

	NRF_RNG->EVENTS_VALRDY = 0;
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
    302a:	2201      	movs	r2, #1
	NRF_RNG->EVENTS_VALRDY = 0;
    302c:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
	NRF_RNG->TASKS_START = 1;
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RNG_regw_sideeffects();
#endif

	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr_rand,
    3030:	4630      	mov	r0, r6
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
    3032:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	NRF_RNG->TASKS_START = 1;
    3036:	601a      	str	r2, [r3, #0]
	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr_rand,
    3038:	462a      	mov	r2, r5
    303a:	f7fe fdf9 	bl	1c30 <_irq_priority_set>
		    DEVICE_GET(entropy_nrf5), 0);
	irq_enable(NRF5_IRQ_RNG_IRQn);
    303e:	4630      	mov	r0, r6
    3040:	f7fe fdc4 	bl	1bcc <_arch_irq_enable>

	return 0;
}
    3044:	4628      	mov	r0, r5
    3046:	bd70      	pop	{r4, r5, r6, pc}
    3048:	4000d000 	.word	0x4000d000

0000304c <isr_rand>:
{
    304c:	b538      	push	{r3, r4, r5, lr}
	if (NRF_RNG->EVENTS_VALRDY) {
    304e:	4b12      	ldr	r3, [pc, #72]	; (3098 <isr_rand+0x4c>)
    3050:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3054:	b1fb      	cbz	r3, 3096 <isr_rand+0x4a>
		struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
    3056:	6885      	ldr	r5, [r0, #8]
		ret = isr((struct rand *)dev_data->isr, true);
    3058:	2101      	movs	r1, #1
    305a:	f105 003c 	add.w	r0, r5, #60	; 0x3c
    305e:	f7ff ff97 	bl	2f90 <isr>
		if (ret != -EBUSY) {
    3062:	f110 0f10 	cmn.w	r0, #16
		ret = isr((struct rand *)dev_data->isr, true);
    3066:	4604      	mov	r4, r0
		if (ret != -EBUSY) {
    3068:	d00d      	beq.n	3086 <isr_rand+0x3a>
			ret = isr((struct rand *)dev_data->thr,
    306a:	f110 0437 	adds.w	r4, r0, #55	; 0x37
    306e:	bf14      	ite	ne
    3070:	2100      	movne	r1, #0
    3072:	2101      	moveq	r1, #1
    3074:	f105 0030 	add.w	r0, r5, #48	; 0x30
    3078:	f7ff ff8a 	bl	2f90 <isr>
    307c:	4604      	mov	r4, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    307e:	f105 0018 	add.w	r0, r5, #24
    3082:	f01e fd93 	bl	21bac <_impl_k_sem_give>
		NRF_RNG->EVENTS_VALRDY = 0;
    3086:	4b04      	ldr	r3, [pc, #16]	; (3098 <isr_rand+0x4c>)
    3088:	2200      	movs	r2, #0
		if (ret != -EBUSY) {
    308a:	3410      	adds	r4, #16
		NRF_RNG->EVENTS_VALRDY = 0;
    308c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
			NRF_RNG->TASKS_STOP = 1;
    3090:	bf1c      	itt	ne
    3092:	2201      	movne	r2, #1
    3094:	605a      	strne	r2, [r3, #4]
    3096:	bd38      	pop	{r3, r4, r5, pc}
    3098:	4000d000 	.word	0x4000d000

0000309c <entropy_nrf5_get_entropy>:
{
    309c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
    30a0:	6885      	ldr	r5, [r0, #8]
{
    30a2:	460f      	mov	r7, r1
    30a4:	4614      	mov	r4, r2
				k_sem_take(&dev_data->sem_sync, K_FOREVER);
    30a6:	f105 0818 	add.w	r8, r5, #24
	while (len) {
    30aa:	b914      	cbnz	r4, 30b2 <entropy_nrf5_get_entropy+0x16>
}
    30ac:	4620      	mov	r0, r4
    30ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    30b2:	2cff      	cmp	r4, #255	; 0xff
    30b4:	4623      	mov	r3, r4
    30b6:	bf28      	it	cs
    30b8:	23ff      	movcs	r3, #255	; 0xff
		len -= len8;
    30ba:	1ae4      	subs	r4, r4, r3
    30bc:	b2de      	uxtb	r6, r3
    30be:	b2a4      	uxth	r4, r4
			len8 = get((struct rand *)dev_data->thr, len8, buf);
    30c0:	f105 0930 	add.w	r9, r5, #48	; 0x30
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    30c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    30c8:	4628      	mov	r0, r5
    30ca:	f01e fdcf 	bl	21c6c <_impl_k_sem_take>
    30ce:	4631      	mov	r1, r6
    30d0:	463a      	mov	r2, r7
    30d2:	4648      	mov	r0, r9
    30d4:	f7ff fefa 	bl	2ecc <get>
    30d8:	4606      	mov	r6, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    30da:	4628      	mov	r0, r5
    30dc:	f01e fd66 	bl	21bac <_impl_k_sem_give>
			if (len8) {
    30e0:	2e00      	cmp	r6, #0
    30e2:	d0e2      	beq.n	30aa <entropy_nrf5_get_entropy+0xe>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    30e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    30e8:	4640      	mov	r0, r8
    30ea:	f01e fdbf 	bl	21c6c <_impl_k_sem_take>
    30ee:	e7e9      	b.n	30c4 <entropy_nrf5_get_entropy+0x28>

000030f0 <entropy_get_entropy_isr>:

u8_t entropy_get_entropy_isr(struct device *dev, u8_t *buf, u8_t len)
{
    30f0:	4613      	mov	r3, r2
	ARG_UNUSED(dev);
	return get((struct rand *)entropy_nrf5_data.isr, len, buf);
    30f2:	4802      	ldr	r0, [pc, #8]	; (30fc <entropy_get_entropy_isr+0xc>)
    30f4:	460a      	mov	r2, r1
    30f6:	4619      	mov	r1, r3
    30f8:	f7ff bee8 	b.w	2ecc <get>
    30fc:	20000160 	.word	0x20000160

00003100 <rtc_compare_set>:
static void rtc_compare_set(u32_t rtc_ticks)
{
	u32_t rtc_now;

	/* Try to set CC value. We assume the procedure is always successful. */
	RTC_CC_VALUE = rtc_ticks;
    3100:	4b08      	ldr	r3, [pc, #32]	; (3124 <rtc_compare_set+0x24>)
    3102:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
	rtc_now = RTC_COUNTER;
    3106:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	 * by checking if the unsigned subtraction wraps around.
	 * If either of the above are true then instead of waiting for the CC
	 * event to trigger in the form of an interrupt, trigger it directly
	 * using the NVIC.
	 */
	if ((((rtc_ticks - rtc_now) & RTC_MASK) < RTC_MIN_DELTA) ||
    310a:	1ac0      	subs	r0, r0, r3
    310c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3110:	4b05      	ldr	r3, [pc, #20]	; (3128 <rtc_compare_set+0x28>)
    3112:	3802      	subs	r0, #2
    3114:	4298      	cmp	r0, r3
    3116:	bf82      	ittt	hi
    3118:	4b04      	ldrhi	r3, [pc, #16]	; (312c <rtc_compare_set+0x2c>)
    311a:	f44f 3200 	movhi.w	r2, #131072	; 0x20000
    311e:	f8c3 2100 	strhi.w	r2, [r3, #256]	; 0x100
    3122:	4770      	bx	lr
    3124:	40011000 	.word	0x40011000
    3128:	007ffffd 	.word	0x007ffffd
    312c:	e000e100 	.word	0xe000e100

00003130 <rtc_announce_set_next>:
 * Since this function can be preempted, we need to take some provisions to
 * announce all expected sys ticks that have passed.
 *
 */
static void rtc_announce_set_next(void)
{
    3130:	b510      	push	{r4, lr}

	/* Read the RTC counter one single time in the beginning, so that an
	 * increase in the counter during this procedure leads to no race
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;
    3132:	4b12      	ldr	r3, [pc, #72]	; (317c <rtc_announce_set_next+0x4c>)

	/* Calculate how many RTC ticks elapsed since the last sys tick. */
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    3134:	4c12      	ldr	r4, [pc, #72]	; (3180 <rtc_announce_set_next+0x50>)
	rtc_now = RTC_COUNTER;
    3136:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    313a:	6822      	ldr	r2, [r4, #0]
    313c:	1a80      	subs	r0, r0, r2
    313e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	/* If no sys ticks have elapsed, there is no point in incrementing the
	 * counters or announcing it.
	 */
	if (rtc_elapsed >= RTC_TICKS_PER_SYS_TICK) {
    3142:	f5b0 7fa3 	cmp.w	r0, #326	; 0x146
    3146:	d911      	bls.n	316c <rtc_announce_set_next+0x3c>
		/* Calculate how many sys ticks elapsed since the last sys tick
		 * and notify the kernel if necessary.
		 */
		sys_elapsed = rtc_elapsed / RTC_TICKS_PER_SYS_TICK;

		if (sys_elapsed > expected_sys_ticks) {
    3148:	490e      	ldr	r1, [pc, #56]	; (3184 <rtc_announce_set_next+0x54>)
    314a:	6809      	ldr	r1, [r1, #0]
		sys_elapsed = rtc_elapsed / RTC_TICKS_PER_SYS_TICK;
    314c:	f240 1347 	movw	r3, #327	; 0x147
    3150:	fbb0 f0f3 	udiv	r0, r0, r3
    3154:	4288      	cmp	r0, r1
    3156:	bf28      	it	cs
    3158:	4608      	movcs	r0, r1

		/* Store RTC_COUNTER floored to the last sys tick. This is
		 * done, so that ISR can properly calculate that 1 sys tick
		 * has passed.
		 */
		rtc_past = (rtc_past +
    315a:	fb03 2300 	mla	r3, r3, r0, r2
				(sys_elapsed * RTC_TICKS_PER_SYS_TICK)
			   ) & RTC_MASK;
    315e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		rtc_past = (rtc_past +
    3162:	6023      	str	r3, [r4, #0]

		_sys_idle_elapsed_ticks = sys_elapsed;
    3164:	4b08      	ldr	r3, [pc, #32]	; (3188 <rtc_announce_set_next+0x58>)
    3166:	6018      	str	r0, [r3, #0]
		_sys_clock_tick_announce();
    3168:	f01e fdc2 	bl	21cf0 <_nano_sys_clock_tick_announce>
	}

	/* Set the RTC to the next sys tick */
	rtc_compare_set(rtc_past + RTC_TICKS_PER_SYS_TICK);
    316c:	6820      	ldr	r0, [r4, #0]
}
    316e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rtc_compare_set(rtc_past + RTC_TICKS_PER_SYS_TICK);
    3172:	f200 1047 	addw	r0, r0, #327	; 0x147
    3176:	f7ff bfc3 	b.w	3100 <rtc_compare_set>
    317a:	bf00      	nop
    317c:	40011000 	.word	0x40011000
    3180:	20000178 	.word	0x20000178
    3184:	20000174 	.word	0x20000174
    3188:	2000a860 	.word	0x2000a860

0000318c <rtc1_nrf5_isr>:
 */
static void rtc1_nrf5_isr(void *arg)
{

	ARG_UNUSED(arg);
	RTC_CC_EVENT = 0;
    318c:	4b02      	ldr	r3, [pc, #8]	; (3198 <rtc1_nrf5_isr+0xc>)
    318e:	2200      	movs	r2, #0
    3190:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	 */
	expected_sys_ticks = 0;
	/* Anounce elapsed of _sys_idle_elapsed_ticks systicks*/
	_sys_clock_tick_announce();
#else
	rtc_announce_set_next();
    3194:	f7ff bfcc 	b.w	3130 <rtc_announce_set_next>
    3198:	40011000 	.word	0x40011000

0000319c <_timer_idle_enter>:
	if ((sys_ticks < 0) ||
    319c:	f246 4335 	movw	r3, #25653	; 0x6435
		sys_ticks = RTC_HALF / RTC_TICKS_PER_SYS_TICK;
    31a0:	4298      	cmp	r0, r3
    31a2:	bf28      	it	cs
    31a4:	4618      	movcs	r0, r3
	expected_sys_ticks = sys_ticks;
    31a6:	4b05      	ldr	r3, [pc, #20]	; (31bc <_timer_idle_enter+0x20>)
    31a8:	6018      	str	r0, [r3, #0]
	rtc_compare_set(rtc_past + (sys_ticks * RTC_TICKS_PER_SYS_TICK));
    31aa:	4b05      	ldr	r3, [pc, #20]	; (31c0 <_timer_idle_enter+0x24>)
    31ac:	681b      	ldr	r3, [r3, #0]
    31ae:	f240 1247 	movw	r2, #327	; 0x147
    31b2:	fb02 3000 	mla	r0, r2, r0, r3
    31b6:	f7ff bfa3 	b.w	3100 <rtc_compare_set>
    31ba:	bf00      	nop
    31bc:	20000174 	.word	0x20000174
    31c0:	20000178 	.word	0x20000178

000031c4 <_timer_idle_exit>:
{
    31c4:	b508      	push	{r3, lr}
	RTC_CC_EVENT = 0;
    31c6:	4b07      	ldr	r3, [pc, #28]	; (31e4 <_timer_idle_exit+0x20>)
    31c8:	2200      	movs	r2, #0
    31ca:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    31ce:	4b06      	ldr	r3, [pc, #24]	; (31e8 <_timer_idle_exit+0x24>)
    31d0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    31d4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	rtc_announce_set_next();
    31d8:	f7ff ffaa 	bl	3130 <rtc_announce_set_next>
	expected_sys_ticks = 1;
    31dc:	4b03      	ldr	r3, [pc, #12]	; (31ec <_timer_idle_exit+0x28>)
    31de:	2201      	movs	r2, #1
    31e0:	601a      	str	r2, [r3, #0]
    31e2:	bd08      	pop	{r3, pc}
    31e4:	40011000 	.word	0x40011000
    31e8:	e000e100 	.word	0xe000e100
    31ec:	20000174 	.word	0x20000174

000031f0 <_sys_clock_driver_init>:
#endif

}

int _sys_clock_driver_init(struct device *device)
{
    31f0:	b570      	push	{r4, r5, r6, lr}
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    31f2:	4818      	ldr	r0, [pc, #96]	; (3254 <_sys_clock_driver_init+0x64>)
    31f4:	f01d ffcc 	bl	21190 <device_get_binding>
	if (!clock) {
    31f8:	b348      	cbz	r0, 324e <_sys_clock_driver_init+0x5e>
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->on(dev, sys);
    31fa:	6843      	ldr	r3, [r0, #4]
#ifdef CONFIG_TICKLESS_IDLE
	expected_sys_ticks = 1;
#endif /* CONFIG_TICKLESS_IDLE */

	/* TODO: replace with counter driver to access RTC */
	SYS_CLOCK_RTC->PRESCALER = 0;
    31fc:	4d16      	ldr	r5, [pc, #88]	; (3258 <_sys_clock_driver_init+0x68>)
    31fe:	681b      	ldr	r3, [r3, #0]
    3200:	2101      	movs	r1, #1
    3202:	4798      	blx	r3
	rtc_past = 0;
    3204:	4b15      	ldr	r3, [pc, #84]	; (325c <_sys_clock_driver_init+0x6c>)
    3206:	2400      	movs	r4, #0
    3208:	601c      	str	r4, [r3, #0]
	expected_sys_ticks = 1;
    320a:	4b15      	ldr	r3, [pc, #84]	; (3260 <_sys_clock_driver_init+0x70>)
    320c:	2601      	movs	r6, #1
    320e:	601e      	str	r6, [r3, #0]
	SYS_CLOCK_RTC->CC[0] = RTC_TICKS_PER_SYS_TICK;
    3210:	f240 1347 	movw	r3, #327	; 0x147
	SYS_CLOCK_RTC->PRESCALER = 0;
    3214:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
	SYS_CLOCK_RTC->CC[0] = RTC_TICKS_PER_SYS_TICK;
    3218:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
	SYS_CLOCK_RTC->EVTENSET = RTC_EVTENSET_COMPARE0_Msk;
    321c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3220:	f8c5 3344 	str.w	r3, [r5, #836]	; 0x344
	SYS_CLOCK_RTC->INTENSET = RTC_INTENSET_COMPARE0_Msk;
    3224:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    3228:	4b0e      	ldr	r3, [pc, #56]	; (3264 <_sys_clock_driver_init+0x74>)

	/* Clear the event flag and possible pending interrupt */
	RTC_CC_EVENT = 0;
    322a:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    322e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    3232:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ClearPendingIRQ(NRF5_IRQ_RTC1_IRQn);

	IRQ_CONNECT(NRF5_IRQ_RTC1_IRQn, 1, rtc1_nrf5_isr, 0, 0);
    3236:	4631      	mov	r1, r6
    3238:	4622      	mov	r2, r4
    323a:	2011      	movs	r0, #17
    323c:	f7fe fcf8 	bl	1c30 <_irq_priority_set>
	irq_enable(NRF5_IRQ_RTC1_IRQn);
    3240:	2011      	movs	r0, #17
    3242:	f7fe fcc3 	bl	1bcc <_arch_irq_enable>

	SYS_CLOCK_RTC->TASKS_CLEAR = 1;
    3246:	60ae      	str	r6, [r5, #8]
	SYS_CLOCK_RTC->TASKS_START = 1;

	return 0;
    3248:	4620      	mov	r0, r4
	SYS_CLOCK_RTC->TASKS_START = 1;
    324a:	602e      	str	r6, [r5, #0]
	return 0;
    324c:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    324e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    3252:	bd70      	pop	{r4, r5, r6, pc}
    3254:	00023390 	.word	0x00023390
    3258:	40011000 	.word	0x40011000
    325c:	20000178 	.word	0x20000178
    3260:	20000174 	.word	0x20000174
    3264:	e000e100 	.word	0xe000e100

00003268 <_timer_cycle_get_32>:

u32_t _timer_cycle_get_32(void)
{
    3268:	b530      	push	{r4, r5, lr}
	u32_t elapsed_cycles;
	u32_t sys_clock_tick_count;
	u32_t rtc_prev;
	u32_t rtc_now;

	rtc_now = RTC_COUNTER;
    326a:	4a0b      	ldr	r2, [pc, #44]	; (3298 <_timer_cycle_get_32+0x30>)
	/* Discard value of  RTC_COUNTER read at LFCLK transition */
	do {
		sys_clock_tick_count = _sys_clock_tick_count;
    326c:	480b      	ldr	r0, [pc, #44]	; (329c <_timer_cycle_get_32+0x34>)
	rtc_now = RTC_COUNTER;
    326e:	f8d2 1504 	ldr.w	r1, [r2, #1284]	; 0x504
		sys_clock_tick_count = _sys_clock_tick_count;
    3272:	e9d0 4500 	ldrd	r4, r5, [r0]
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
					     RTC_TICKS_PER_SYS_TICK)) &
				 RTC_MASK;
		rtc_prev = rtc_now;
		rtc_now = RTC_COUNTER;
    3276:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	} while (rtc_now != rtc_prev);
    327a:	4299      	cmp	r1, r3
    327c:	d10a      	bne.n	3294 <_timer_cycle_get_32+0x2c>

	return (sys_clock_tick_count * sys_clock_hw_cycles_per_tick) +
    327e:	4a08      	ldr	r2, [pc, #32]	; (32a0 <_timer_cycle_get_32+0x38>)
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
    3280:	f240 1347 	movw	r3, #327	; 0x147
    3284:	fb03 1314 	mls	r3, r3, r4, r1
	return (sys_clock_tick_count * sys_clock_hw_cycles_per_tick) +
    3288:	6810      	ldr	r0, [r2, #0]
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
    328a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	       elapsed_cycles;
}
    328e:	fb00 3004 	mla	r0, r0, r4, r3
    3292:	bd30      	pop	{r4, r5, pc}
    3294:	4619      	mov	r1, r3
    3296:	e7ec      	b.n	3272 <_timer_cycle_get_32+0xa>
    3298:	40011000 	.word	0x40011000
    329c:	20003338 	.word	0x20003338
    32a0:	2000a864 	.word	0x2000a864

000032a4 <bt_hex>:
#include <misc/util.h>
#include <bluetooth/bluetooth.h>
#include <bluetooth/hci.h>

const char *bt_hex(const void *buf, size_t len)
{
    32a4:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
    32a6:	f04f 0320 	mov.w	r3, #32
    32aa:	f3ef 8511 	mrs	r5, BASEPRI
    32ae:	f383 8811 	msr	BASEPRI, r3
	unsigned int mask;
	char *str;
	int i;

	mask = irq_lock();
	str = hexbufs[curbuf++];
    32b2:	4c14      	ldr	r4, [pc, #80]	; (3304 <bt_hex+0x60>)
    32b4:	4e14      	ldr	r6, [pc, #80]	; (3308 <bt_hex+0x64>)
    32b6:	7823      	ldrb	r3, [r4, #0]
    32b8:	eb03 12c3 	add.w	r2, r3, r3, lsl #7
    32bc:	3301      	adds	r3, #1
	curbuf %= ARRAY_SIZE(hexbufs);
    32be:	f003 0303 	and.w	r3, r3, #3
	str = hexbufs[curbuf++];
    32c2:	4432      	add	r2, r6
	curbuf %= ARRAY_SIZE(hexbufs);
    32c4:	7023      	strb	r3, [r4, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    32c6:	f385 8811 	msr	BASEPRI, r5
	irq_unlock(mask);

	len = min(len, (sizeof(hexbufs[0]) - 1) / 2);
    32ca:	2940      	cmp	r1, #64	; 0x40
    32cc:	bf28      	it	cs
    32ce:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    32d0:	4d0e      	ldr	r5, [pc, #56]	; (330c <bt_hex+0x68>)
    32d2:	3801      	subs	r0, #1
    32d4:	4613      	mov	r3, r2
    32d6:	eb02 0641 	add.w	r6, r2, r1, lsl #1
	for (i = 0; i < len; i++) {
    32da:	42b3      	cmp	r3, r6
    32dc:	d104      	bne.n	32e8 <bt_hex+0x44>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    32de:	2300      	movs	r3, #0
    32e0:	f802 3011 	strb.w	r3, [r2, r1, lsl #1]

	return str;
}
    32e4:	4610      	mov	r0, r2
    32e6:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    32e8:	7844      	ldrb	r4, [r0, #1]
    32ea:	0924      	lsrs	r4, r4, #4
    32ec:	3302      	adds	r3, #2
    32ee:	5d2c      	ldrb	r4, [r5, r4]
    32f0:	f803 4c02 	strb.w	r4, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    32f4:	f810 4f01 	ldrb.w	r4, [r0, #1]!
    32f8:	f004 040f 	and.w	r4, r4, #15
    32fc:	5d2c      	ldrb	r4, [r5, r4]
    32fe:	f803 4c01 	strb.w	r4, [r3, #-1]
    3302:	e7ea      	b.n	32da <bt_hex+0x36>
    3304:	200001b3 	.word	0x200001b3
    3308:	200001b4 	.word	0x200001b4
    330c:	00023486 	.word	0x00023486

00003310 <bt_addr_le_str>:

	return str;
}

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
    3310:	b570      	push	{r4, r5, r6, lr}
	static char bufs[2][BT_ADDR_LE_STR_LEN];
	static u8_t cur;
	char *str;

	str = bufs[cur++];
    3312:	4a1d      	ldr	r2, [pc, #116]	; (3388 <bt_addr_le_str+0x78>)
    3314:	491d      	ldr	r1, [pc, #116]	; (338c <bt_addr_le_str+0x7c>)
    3316:	7813      	ldrb	r3, [r2, #0]
    3318:	eb03 0643 	add.w	r6, r3, r3, lsl #1
    331c:	3301      	adds	r3, #1
	cur %= ARRAY_SIZE(bufs);
    331e:	f003 0301 	and.w	r3, r3, #1
    3322:	7013      	strb	r3, [r2, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    3324:	7803      	ldrb	r3, [r0, #0]
{
    3326:	b08a      	sub	sp, #40	; 0x28
	str = bufs[cur++];
    3328:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
{
    332c:	4604      	mov	r4, r0
	str = bufs[cur++];
    332e:	440e      	add	r6, r1
    3330:	ad07      	add	r5, sp, #28
    3332:	2b03      	cmp	r3, #3
    3334:	d821      	bhi.n	337a <bt_addr_le_str+0x6a>
    3336:	e8df f003 	tbb	[pc, r3]
    333a:	1a02      	.short	0x1a02
    333c:	1e1c      	.short	0x1e1c
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    333e:	4914      	ldr	r1, [pc, #80]	; (3390 <bt_addr_le_str+0x80>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    3340:	4628      	mov	r0, r5
    3342:	f7fd f9be 	bl	6c2 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    3346:	7862      	ldrb	r2, [r4, #1]
    3348:	9204      	str	r2, [sp, #16]
    334a:	78a2      	ldrb	r2, [r4, #2]
    334c:	9203      	str	r2, [sp, #12]
    334e:	78e2      	ldrb	r2, [r4, #3]
    3350:	9202      	str	r2, [sp, #8]
    3352:	7922      	ldrb	r2, [r4, #4]
    3354:	9201      	str	r2, [sp, #4]
    3356:	7962      	ldrb	r2, [r4, #5]
    3358:	9200      	str	r2, [sp, #0]
    335a:	79a3      	ldrb	r3, [r4, #6]
    335c:	9505      	str	r5, [sp, #20]
    335e:	4a0d      	ldr	r2, [pc, #52]	; (3394 <bt_addr_le_str+0x84>)
    3360:	211b      	movs	r1, #27
    3362:	4630      	mov	r0, r6
    3364:	f7fe ffa4 	bl	22b0 <snprintk>
	bt_addr_le_to_str(addr, str, sizeof(bufs[cur]));

	return str;
}
    3368:	4630      	mov	r0, r6
    336a:	b00a      	add	sp, #40	; 0x28
    336c:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    336e:	490a      	ldr	r1, [pc, #40]	; (3398 <bt_addr_le_str+0x88>)
    3370:	e7e6      	b.n	3340 <bt_addr_le_str+0x30>
		strcpy(type, "public id");
    3372:	490a      	ldr	r1, [pc, #40]	; (339c <bt_addr_le_str+0x8c>)
    3374:	e7e4      	b.n	3340 <bt_addr_le_str+0x30>
		strcpy(type, "random id");
    3376:	490a      	ldr	r1, [pc, #40]	; (33a0 <bt_addr_le_str+0x90>)
    3378:	e7e2      	b.n	3340 <bt_addr_le_str+0x30>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    337a:	4a0a      	ldr	r2, [pc, #40]	; (33a4 <bt_addr_le_str+0x94>)
    337c:	210a      	movs	r1, #10
    337e:	4628      	mov	r0, r5
    3380:	f7fe ff96 	bl	22b0 <snprintk>
    3384:	e7df      	b.n	3346 <bt_addr_le_str+0x36>
    3386:	bf00      	nop
    3388:	200001b2 	.word	0x200001b2
    338c:	2000017c 	.word	0x2000017c
    3390:	0002343a 	.word	0x0002343a
    3394:	00023463 	.word	0x00023463
    3398:	00023441 	.word	0x00023441
    339c:	00023448 	.word	0x00023448
    33a0:	00023452 	.word	0x00023452
    33a4:	0002345c 	.word	0x0002345c

000033a8 <ah>:

#define BT_DBG_ENABLED IS_ENABLED(CONFIG_BT_DEBUG_RPA)
#include "common/log.h"

static int ah(const u8_t irk[16], const u8_t r[3], u8_t out[3])
{
    33a8:	b530      	push	{r4, r5, lr}
    33aa:	b085      	sub	sp, #20
    33ac:	4604      	mov	r4, r0
    33ae:	4615      	mov	r5, r2
	int err;

	BT_DBG("irk %s, r %s", bt_hex(irk, 16), bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
    33b0:	4668      	mov	r0, sp
    33b2:	2203      	movs	r2, #3
    33b4:	f7fd f9ed 	bl	792 <memcpy>
	memset(res + 3, 0, 13);
    33b8:	220d      	movs	r2, #13
    33ba:	2100      	movs	r1, #0
    33bc:	f10d 0003 	add.w	r0, sp, #3
    33c0:	f7fd fa13 	bl	7ea <memset>

	err = bt_encrypt_le(irk, res, res);
    33c4:	4620      	mov	r0, r4
    33c6:	466a      	mov	r2, sp
    33c8:	4669      	mov	r1, sp
    33ca:	f009 fa5b 	bl	c884 <bt_encrypt_le>
	if (err) {
    33ce:	4604      	mov	r4, r0
    33d0:	b920      	cbnz	r0, 33dc <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
    33d2:	2203      	movs	r2, #3
    33d4:	4669      	mov	r1, sp
    33d6:	4628      	mov	r0, r5
    33d8:	f7fd f9db 	bl	792 <memcpy>

	return 0;
}
    33dc:	4620      	mov	r0, r4
    33de:	b005      	add	sp, #20
    33e0:	bd30      	pop	{r4, r5, pc}

000033e2 <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const u8_t irk[16], const bt_addr_t *addr)
{
    33e2:	b513      	push	{r0, r1, r4, lr}
    33e4:	460c      	mov	r4, r1
	u8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
    33e6:	aa01      	add	r2, sp, #4
    33e8:	3103      	adds	r1, #3
    33ea:	f7ff ffdd 	bl	33a8 <ah>
	if (err) {
    33ee:	b948      	cbnz	r0, 3404 <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
    33f0:	2203      	movs	r2, #3
    33f2:	a901      	add	r1, sp, #4
    33f4:	4620      	mov	r0, r4
    33f6:	f7fd f99f 	bl	738 <memcmp>
    33fa:	fab0 f080 	clz	r0, r0
    33fe:	0940      	lsrs	r0, r0, #5
}
    3400:	b002      	add	sp, #8
    3402:	bd10      	pop	{r4, pc}
		return false;
    3404:	2000      	movs	r0, #0
    3406:	e7fb      	b.n	3400 <bt_rpa_irk_matches+0x1e>

00003408 <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const u8_t irk[16], bt_addr_t *rpa)
{
    3408:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = bt_rand(rpa->val + 3, 3);
    340a:	1ccd      	adds	r5, r1, #3
{
    340c:	4606      	mov	r6, r0
    340e:	460c      	mov	r4, r1
	err = bt_rand(rpa->val + 3, 3);
    3410:	4628      	mov	r0, r5
    3412:	2103      	movs	r1, #3
    3414:	f009 fa1a 	bl	c84c <bt_rand>
	if (err) {
    3418:	b960      	cbnz	r0, 3434 <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
    341a:	7963      	ldrb	r3, [r4, #5]
    341c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    3420:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3424:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
    3426:	4622      	mov	r2, r4
    3428:	4629      	mov	r1, r5
    342a:	4630      	mov	r0, r6
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
    342c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
    3430:	f7ff bfba 	b.w	33a8 <ah>
}
    3434:	bd70      	pop	{r4, r5, r6, pc}
	...

00003438 <uuid_to_uuid128>:
	.val = { 0xfb, 0x34, 0x9b, 0x5f, 0x80, 0x00, 0x00, 0x80,
		 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    3438:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
    343a:	7802      	ldrb	r2, [r0, #0]
    343c:	2a01      	cmp	r2, #1
{
    343e:	4604      	mov	r4, r0
    3440:	460b      	mov	r3, r1
	switch (src->type) {
    3442:	d017      	beq.n	3474 <uuid_to_uuid128+0x3c>
    3444:	d303      	bcc.n	344e <uuid_to_uuid128+0x16>
    3446:	2a02      	cmp	r2, #2
    3448:	d02c      	beq.n	34a4 <uuid_to_uuid128+0x6c>
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    344a:	bcf0      	pop	{r4, r5, r6, r7}
    344c:	4770      	bx	lr
		*dst = uuid128_base;
    344e:	4a18      	ldr	r2, [pc, #96]	; (34b0 <uuid_to_uuid128+0x78>)
    3450:	460d      	mov	r5, r1
    3452:	f102 0710 	add.w	r7, r2, #16
    3456:	6810      	ldr	r0, [r2, #0]
    3458:	6851      	ldr	r1, [r2, #4]
    345a:	462e      	mov	r6, r5
    345c:	c603      	stmia	r6!, {r0, r1}
    345e:	3208      	adds	r2, #8
    3460:	42ba      	cmp	r2, r7
    3462:	4635      	mov	r5, r6
    3464:	d1f7      	bne.n	3456 <uuid_to_uuid128+0x1e>
    3466:	7812      	ldrb	r2, [r2, #0]
    3468:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
    346a:	8862      	ldrh	r2, [r4, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    346c:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    346e:	0a12      	lsrs	r2, r2, #8
    3470:	739a      	strb	r2, [r3, #14]
    3472:	e7ea      	b.n	344a <uuid_to_uuid128+0x12>
		*dst = uuid128_base;
    3474:	4a0e      	ldr	r2, [pc, #56]	; (34b0 <uuid_to_uuid128+0x78>)
    3476:	460d      	mov	r5, r1
    3478:	f102 0710 	add.w	r7, r2, #16
    347c:	6810      	ldr	r0, [r2, #0]
    347e:	6851      	ldr	r1, [r2, #4]
    3480:	462e      	mov	r6, r5
    3482:	c603      	stmia	r6!, {r0, r1}
    3484:	3208      	adds	r2, #8
    3486:	42ba      	cmp	r2, r7
    3488:	4635      	mov	r5, r6
    348a:	d1f7      	bne.n	347c <uuid_to_uuid128+0x44>
    348c:	7812      	ldrb	r2, [r2, #0]
    348e:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
    3490:	6862      	ldr	r2, [r4, #4]
	dst[0] = val;
    3492:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    3494:	f3c2 2107 	ubfx	r1, r2, #8, #8
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(u32_t val, u8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    3498:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
    349a:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
    349c:	0a12      	lsrs	r2, r2, #8
    349e:	7399      	strb	r1, [r3, #14]
    34a0:	741a      	strb	r2, [r3, #16]
    34a2:	e7d2      	b.n	344a <uuid_to_uuid128+0x12>
		memcpy(dst, src, sizeof(*dst));
    34a4:	4601      	mov	r1, r0
    34a6:	2211      	movs	r2, #17
    34a8:	4618      	mov	r0, r3
}
    34aa:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
    34ac:	f7fd b971 	b.w	792 <memcpy>
    34b0:	00023497 	.word	0x00023497

000034b4 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
    34b4:	b510      	push	{r4, lr}
    34b6:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type)
    34b8:	7801      	ldrb	r1, [r0, #0]
    34ba:	7822      	ldrb	r2, [r4, #0]
    34bc:	428a      	cmp	r2, r1
{
    34be:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type)
    34c0:	d00e      	beq.n	34e0 <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
    34c2:	4669      	mov	r1, sp
    34c4:	f7ff ffb8 	bl	3438 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
    34c8:	a905      	add	r1, sp, #20
    34ca:	4620      	mov	r0, r4
    34cc:	f7ff ffb4 	bl	3438 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
    34d0:	2210      	movs	r2, #16
    34d2:	f10d 0115 	add.w	r1, sp, #21
    34d6:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    34da:	f7fd f92d 	bl	738 <memcmp>
    34de:	e00a      	b.n	34f6 <bt_uuid_cmp+0x42>
	switch (u1->type) {
    34e0:	2a01      	cmp	r2, #1
    34e2:	d00a      	beq.n	34fa <bt_uuid_cmp+0x46>
    34e4:	d304      	bcc.n	34f0 <bt_uuid_cmp+0x3c>
    34e6:	2a02      	cmp	r2, #2
    34e8:	d00a      	beq.n	3500 <bt_uuid_cmp+0x4c>
	}

	return -EINVAL;
    34ea:	f06f 0015 	mvn.w	r0, #21
    34ee:	e002      	b.n	34f6 <bt_uuid_cmp+0x42>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
    34f0:	8840      	ldrh	r0, [r0, #2]
    34f2:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
    34f4:	1ac0      	subs	r0, r0, r3
}
    34f6:	b00a      	add	sp, #40	; 0x28
    34f8:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
    34fa:	6840      	ldr	r0, [r0, #4]
    34fc:	6863      	ldr	r3, [r4, #4]
    34fe:	e7f9      	b.n	34f4 <bt_uuid_cmp+0x40>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    3500:	2210      	movs	r2, #16
    3502:	1c61      	adds	r1, r4, #1
    3504:	3001      	adds	r0, #1
    3506:	e7e8      	b.n	34da <bt_uuid_cmp+0x26>

00003508 <ver_str>:
	return 0;
}

#if defined(CONFIG_BT_DEBUG)
static const char *ver_str(u8_t ver)
{
    3508:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
    350a:	4d0b      	ldr	r5, [pc, #44]	; (3538 <ver_str+0x30>)
{
    350c:	4606      	mov	r6, r0
	const char * const str[] = {
    350e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    3510:	b08a      	sub	sp, #40	; 0x28
	const char * const str[] = {
    3512:	466c      	mov	r4, sp
    3514:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    3516:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    3518:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    351a:	e895 0003 	ldmia.w	r5, {r0, r1}
		"1.0b", "1.1", "1.2", "2.0", "2.1", "3.0", "4.0", "4.1", "4.2",
		"5.0",
	};

	if (ver < ARRAY_SIZE(str)) {
    351e:	2e09      	cmp	r6, #9
	const char * const str[] = {
    3520:	e884 0003 	stmia.w	r4, {r0, r1}
		return str[ver];
    3524:	bf9b      	ittet	ls
    3526:	ab0a      	addls	r3, sp, #40	; 0x28
    3528:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	}

	return "unknown";
    352c:	4803      	ldrhi	r0, [pc, #12]	; (353c <ver_str+0x34>)
		return str[ver];
    352e:	f856 0c28 	ldrls.w	r0, [r6, #-40]
}
    3532:	b00a      	add	sp, #40	; 0x28
    3534:	bd70      	pop	{r4, r5, r6, pc}
    3536:	bf00      	nop
    3538:	00022958 	.word	0x00022958
    353c:	000242cc 	.word	0x000242cc

00003540 <valid_adv_param>:



static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    3540:	7803      	ldrb	r3, [r0, #0]
    3542:	8842      	ldrh	r2, [r0, #2]
    3544:	f013 0301 	ands.w	r3, r3, #1
    3548:	d105      	bne.n	3556 <valid_adv_param+0x16>
		 * BT Core 4.2 [Vol 2, Part E, 7.8.5]
		 * The Advertising_Interval_Min and Advertising_Interval_Max
		 * shall not be set to less than 0x00A0 (100 ms) if the
		 * Advertising_Type is set to ADV_SCAN_IND or ADV_NONCONN_IND.
		 */
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    354a:	4909      	ldr	r1, [pc, #36]	; (3570 <valid_adv_param+0x30>)
    354c:	7b89      	ldrb	r1, [r1, #14]
    354e:	2908      	cmp	r1, #8
    3550:	d801      	bhi.n	3556 <valid_adv_param+0x16>
    3552:	2a9f      	cmp	r2, #159	; 0x9f
    3554:	d90a      	bls.n	356c <valid_adv_param+0x2c>
		    param->interval_min < 0x00a0) {
			return false;
		}
	}

	if (param->interval_min > param->interval_max ||
    3556:	8880      	ldrh	r0, [r0, #4]
    3558:	4282      	cmp	r2, r0
    355a:	d807      	bhi.n	356c <valid_adv_param+0x2c>
    355c:	2a1f      	cmp	r2, #31
    355e:	d905      	bls.n	356c <valid_adv_param+0x2c>
	    param->interval_min < 0x0020 || param->interval_max > 0x4000) {
    3560:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    3564:	bf8c      	ite	hi
    3566:	2000      	movhi	r0, #0
    3568:	2001      	movls	r0, #1
    356a:	4770      	bx	lr
			return false;
    356c:	2000      	movs	r0, #0
		return false;
	}

	return true;
}
    356e:	4770      	bx	lr
    3570:	20009cd8 	.word	0x20009cd8

00003574 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    3574:	2207      	movs	r2, #7
    3576:	f7fd b90c 	b.w	792 <memcpy>

0000357a <atomic_or>:
 *
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
    357a:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
}
    357c:	f3bf 8f5b 	dmb	ish
    3580:	e850 3f00 	ldrex	r3, [r0]
    3584:	ea43 0201 	orr.w	r2, r3, r1
    3588:	e840 2e00 	strex	lr, r2, [r0]
    358c:	f1be 0f00 	cmp.w	lr, #0
    3590:	d1f6      	bne.n	3580 <atomic_or+0x6>
    3592:	f3bf 8f5b 	dmb	ish
    3596:	4618      	mov	r0, r3
    3598:	f85d fb04 	ldr.w	pc, [sp], #4

0000359c <atomic_test_bit>:
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    359c:	094b      	lsrs	r3, r1, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    359e:	f3bf 8f5b 	dmb	ish
    35a2:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    35a6:	f3bf 8f5b 	dmb	ish

	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    35aa:	f001 011f 	and.w	r1, r1, #31
    35ae:	4108      	asrs	r0, r1
}
    35b0:	f000 0001 	and.w	r0, r0, #1
    35b4:	4770      	bx	lr

000035b6 <atomic_and>:
{
    35b6:	b500      	push	{lr}
}
    35b8:	f3bf 8f5b 	dmb	ish
    35bc:	e850 3f00 	ldrex	r3, [r0]
    35c0:	ea03 0201 	and.w	r2, r3, r1
    35c4:	e840 2e00 	strex	lr, r2, [r0]
    35c8:	f1be 0f00 	cmp.w	lr, #0
    35cc:	d1f6      	bne.n	35bc <atomic_and+0x6>
    35ce:	f3bf 8f5b 	dmb	ish
    35d2:	4618      	mov	r0, r3
    35d4:	f85d fb04 	ldr.w	pc, [sp], #4

000035d8 <atomic_test_and_clear_bit>:
 * @param bit Bit number (starting from 0).
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_and_clear_bit(atomic_t *target, int bit)
{
    35d8:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
    35da:	f001 031f 	and.w	r3, r1, #31
    35de:	2401      	movs	r4, #1
    35e0:	409c      	lsls	r4, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    35e2:	094b      	lsrs	r3, r1, #5
    35e4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    35e8:	43e1      	mvns	r1, r4
    35ea:	f7ff ffe4 	bl	35b6 <atomic_and>

	return (old & mask) != 0;
    35ee:	4204      	tst	r4, r0
}
    35f0:	bf14      	ite	ne
    35f2:	2001      	movne	r0, #1
    35f4:	2000      	moveq	r0, #0
    35f6:	bd10      	pop	{r4, pc}

000035f8 <update_conn_param>:
	k_delayed_work_submit(&conn->le.update_work,
    35f8:	78c3      	ldrb	r3, [r0, #3]
    35fa:	2b00      	cmp	r3, #0
 * @retval -EADDRINUSE Work item is pending on a different workqueue.
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					s32_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    35fc:	f241 3288 	movw	r2, #5000	; 0x1388
    3600:	f100 0174 	add.w	r1, r0, #116	; 0x74
    3604:	bf08      	it	eq
    3606:	2200      	moveq	r2, #0
    3608:	4801      	ldr	r0, [pc, #4]	; (3610 <update_conn_param+0x18>)
    360a:	f01e be73 	b.w	222f4 <k_delayed_work_submit_to_queue>
    360e:	bf00      	nop
    3610:	20003340 	.word	0x20003340

00003614 <update_sec_level>:
{
    3614:	b513      	push	{r0, r1, r4, lr}
	if (!conn->encrypt) {
    3616:	7a83      	ldrb	r3, [r0, #10]
{
    3618:	4604      	mov	r4, r0
	if (!conn->encrypt) {
    361a:	b91b      	cbnz	r3, 3624 <update_sec_level+0x10>
		conn->sec_level = BT_SECURITY_LOW;
    361c:	2301      	movs	r3, #1
    361e:	7203      	strb	r3, [r0, #8]
}
    3620:	b002      	add	sp, #8
    3622:	bd10      	pop	{r4, pc}
	if (conn->le.keys && atomic_test_bit(conn->le.keys->flags,
    3624:	6f00      	ldr	r0, [r0, #112]	; 0x70
    3626:	b1f8      	cbz	r0, 3668 <update_sec_level+0x54>
    3628:	2100      	movs	r1, #0
    362a:	3008      	adds	r0, #8
    362c:	f7ff ffb6 	bl	359c <atomic_test_bit>
    3630:	b1d0      	cbz	r0, 3668 <update_sec_level+0x54>
		if (conn->le.keys->keys & BT_KEYS_LTK_P256) {
    3632:	6f23      	ldr	r3, [r4, #112]	; 0x70
    3634:	899b      	ldrh	r3, [r3, #12]
    3636:	069b      	lsls	r3, r3, #26
			conn->sec_level = BT_SECURITY_FIPS;
    3638:	bf4c      	ite	mi
    363a:	2304      	movmi	r3, #4
			conn->sec_level = BT_SECURITY_HIGH;
    363c:	2303      	movpl	r3, #3
		conn->sec_level = BT_SECURITY_MEDIUM;
    363e:	7223      	strb	r3, [r4, #8]
	if (conn->required_sec_level > conn->sec_level) {
    3640:	7a62      	ldrb	r2, [r4, #9]
    3642:	7a23      	ldrb	r3, [r4, #8]
    3644:	429a      	cmp	r2, r3
    3646:	d9eb      	bls.n	3620 <update_sec_level+0xc>
		BT_ERR("Failed to set required security level");
    3648:	4b08      	ldr	r3, [pc, #32]	; (366c <update_sec_level+0x58>)
    364a:	9301      	str	r3, [sp, #4]
    364c:	9300      	str	r3, [sp, #0]
    364e:	4a08      	ldr	r2, [pc, #32]	; (3670 <update_sec_level+0x5c>)
    3650:	4b08      	ldr	r3, [pc, #32]	; (3674 <update_sec_level+0x60>)
    3652:	4909      	ldr	r1, [pc, #36]	; (3678 <update_sec_level+0x64>)
    3654:	4809      	ldr	r0, [pc, #36]	; (367c <update_sec_level+0x68>)
    3656:	f7fe fe1d 	bl	2294 <printk>
		bt_conn_disconnect(conn, BT_HCI_ERR_AUTHENTICATION_FAIL);
    365a:	2105      	movs	r1, #5
    365c:	4620      	mov	r0, r4
}
    365e:	b002      	add	sp, #8
    3660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_conn_disconnect(conn, BT_HCI_ERR_AUTHENTICATION_FAIL);
    3664:	f002 bfc4 	b.w	65f0 <bt_conn_disconnect>
		conn->sec_level = BT_SECURITY_MEDIUM;
    3668:	2302      	movs	r3, #2
    366a:	e7e8      	b.n	363e <update_sec_level+0x2a>
    366c:	00023dae 	.word	0x00023dae
    3670:	00022d76 	.word	0x00022d76
    3674:	00023598 	.word	0x00023598
    3678:	000272d8 	.word	0x000272d8
    367c:	00024284 	.word	0x00024284

00003680 <hci_cmd_done>:
{
    3680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3684:	4606      	mov	r6, r0
    3686:	b086      	sub	sp, #24
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    3688:	7990      	ldrb	r0, [r2, #6]
    368a:	4f26      	ldr	r7, [pc, #152]	; (3724 <hci_cmd_done+0xa4>)
{
    368c:	4688      	mov	r8, r1
    368e:	4615      	mov	r5, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    3690:	f015 fd66 	bl	19160 <net_buf_pool_get>
    3694:	4287      	cmp	r7, r0
    3696:	d013      	beq.n	36c0 <hci_cmd_done+0x40>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    3698:	79ac      	ldrb	r4, [r5, #6]
    369a:	4620      	mov	r0, r4
    369c:	f015 fd60 	bl	19160 <net_buf_pool_get>
    36a0:	4b21      	ldr	r3, [pc, #132]	; (3728 <hci_cmd_done+0xa8>)
    36a2:	9305      	str	r3, [sp, #20]
    36a4:	9003      	str	r0, [sp, #12]
    36a6:	e88d 0048 	stmia.w	sp, {r3, r6}
    36aa:	9704      	str	r7, [sp, #16]
    36ac:	9402      	str	r4, [sp, #8]
    36ae:	4b1f      	ldr	r3, [pc, #124]	; (372c <hci_cmd_done+0xac>)
    36b0:	4a1f      	ldr	r2, [pc, #124]	; (3730 <hci_cmd_done+0xb0>)
    36b2:	4920      	ldr	r1, [pc, #128]	; (3734 <hci_cmd_done+0xb4>)
    36b4:	4820      	ldr	r0, [pc, #128]	; (3738 <hci_cmd_done+0xb8>)
    36b6:	f7fe fded 	bl	2294 <printk>
}
    36ba:	b006      	add	sp, #24
    36bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cmd(buf)->opcode != opcode) {
    36c0:	4628      	mov	r0, r5
    36c2:	f015 fd53 	bl	1916c <net_buf_id>
    36c6:	4c1d      	ldr	r4, [pc, #116]	; (373c <hci_cmd_done+0xbc>)
    36c8:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    36cc:	8843      	ldrh	r3, [r0, #2]
    36ce:	42b3      	cmp	r3, r6
    36d0:	d010      	beq.n	36f4 <hci_cmd_done+0x74>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    36d2:	4628      	mov	r0, r5
    36d4:	f015 fd4a 	bl	1916c <net_buf_id>
    36d8:	4b13      	ldr	r3, [pc, #76]	; (3728 <hci_cmd_done+0xa8>)
    36da:	9303      	str	r3, [sp, #12]
    36dc:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    36e0:	4914      	ldr	r1, [pc, #80]	; (3734 <hci_cmd_done+0xb4>)
    36e2:	8842      	ldrh	r2, [r0, #2]
    36e4:	9202      	str	r2, [sp, #8]
    36e6:	e88d 0048 	stmia.w	sp, {r3, r6}
    36ea:	4a11      	ldr	r2, [pc, #68]	; (3730 <hci_cmd_done+0xb0>)
    36ec:	4b0f      	ldr	r3, [pc, #60]	; (372c <hci_cmd_done+0xac>)
    36ee:	4814      	ldr	r0, [pc, #80]	; (3740 <hci_cmd_done+0xc0>)
    36f0:	f7fe fdd0 	bl	2294 <printk>
	if (cmd(buf)->sync) {
    36f4:	4628      	mov	r0, r5
    36f6:	f015 fd39 	bl	1916c <net_buf_id>
    36fa:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    36fe:	6843      	ldr	r3, [r0, #4]
    3700:	2b00      	cmp	r3, #0
    3702:	d0da      	beq.n	36ba <hci_cmd_done+0x3a>
		cmd(buf)->status = status;
    3704:	4628      	mov	r0, r5
    3706:	f015 fd31 	bl	1916c <net_buf_id>
    370a:	f804 8030 	strb.w	r8, [r4, r0, lsl #3]
		k_sem_give(cmd(buf)->sync);
    370e:	4628      	mov	r0, r5
    3710:	f015 fd2c 	bl	1916c <net_buf_id>
    3714:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    3718:	6840      	ldr	r0, [r0, #4]
}
    371a:	b006      	add	sp, #24
    371c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3720:	f01e ba44 	b.w	21bac <_impl_k_sem_give>
    3724:	2000aa9c 	.word	0x2000aa9c
    3728:	00023dae 	.word	0x00023dae
    372c:	000235fd 	.word	0x000235fd
    3730:	00024006 	.word	0x00024006
    3734:	000272d8 	.word	0x000272d8
    3738:	0002400d 	.word	0x0002400d
    373c:	200003b8 	.word	0x200003b8
    3740:	00024052 	.word	0x00024052

00003744 <sys_put_le64>:
    3744:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
    3748:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
    374a:	7053      	strb	r3, [r2, #1]
	sys_put_le16(val >> 16, &dst[2]);
    374c:	0c00      	lsrs	r0, r0, #16
	dst[1] = val >> 8;
    374e:	f3c1 2307 	ubfx	r3, r1, #8, #8
	dst[0] = val;
    3752:	7111      	strb	r1, [r2, #4]
	sys_put_le16(val >> 16, &dst[2]);
    3754:	0c09      	lsrs	r1, r1, #16
	dst[0] = val;
    3756:	7090      	strb	r0, [r2, #2]
    3758:	7191      	strb	r1, [r2, #6]
	dst[1] = val >> 8;
    375a:	0a00      	lsrs	r0, r0, #8
    375c:	0a09      	lsrs	r1, r1, #8
    375e:	70d0      	strb	r0, [r2, #3]
    3760:	7153      	strb	r3, [r2, #5]
    3762:	71d1      	strb	r1, [r2, #7]
    3764:	4770      	bx	lr
	...

00003768 <bt_hci_cmd_create>:
{
    3768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    376c:	4680      	mov	r8, r0
    376e:	4689      	mov	r9, r1
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    3770:	4813      	ldr	r0, [pc, #76]	; (37c0 <bt_hci_cmd_create+0x58>)
	cmd(buf)->opcode = opcode;
    3772:	4d14      	ldr	r5, [pc, #80]	; (37c4 <bt_hci_cmd_create+0x5c>)
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    3774:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3778:	f015 fd86 	bl	19288 <net_buf_alloc_fixed>
    377c:	4604      	mov	r4, r0
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    377e:	f100 0608 	add.w	r6, r0, #8
    3782:	2100      	movs	r1, #0
    3784:	4630      	mov	r0, r6
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	*(u8_t *)net_buf_user_data(buf) = type;
    3786:	2700      	movs	r7, #0
    3788:	f015 fd9d 	bl	192c6 <net_buf_simple_reserve>
    378c:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
    378e:	4620      	mov	r0, r4
    3790:	f015 fcec 	bl	1916c <net_buf_id>
    3794:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    3798:	f8a0 8002 	strh.w	r8, [r0, #2]
	cmd(buf)->sync = NULL;
    379c:	4620      	mov	r0, r4
    379e:	f015 fce5 	bl	1916c <net_buf_id>
    37a2:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
	hdr = net_buf_add(buf, sizeof(*hdr));
    37a6:	2103      	movs	r1, #3
	cmd(buf)->sync = NULL;
    37a8:	6047      	str	r7, [r0, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    37aa:	4630      	mov	r0, r6
    37ac:	f015 fdfa 	bl	193a4 <net_buf_simple_add>
	hdr->param_len = param_len;
    37b0:	f880 9002 	strb.w	r9, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    37b4:	f8a0 8000 	strh.w	r8, [r0]
}
    37b8:	4620      	mov	r0, r4
    37ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    37be:	bf00      	nop
    37c0:	2000aa9c 	.word	0x2000aa9c
    37c4:	200003b8 	.word	0x200003b8

000037c8 <bt_hci_cmd_send_sync>:
{
    37c8:	b570      	push	{r4, r5, r6, lr}
    37ca:	4615      	mov	r5, r2
    37cc:	b086      	sub	sp, #24
	if (!buf) {
    37ce:	460c      	mov	r4, r1
    37d0:	b919      	cbnz	r1, 37da <bt_hci_cmd_send_sync+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
    37d2:	f7ff ffc9 	bl	3768 <bt_hci_cmd_create>
		if (!buf) {
    37d6:	4604      	mov	r4, r0
    37d8:	b368      	cbz	r0, 3836 <bt_hci_cmd_send_sync+0x6e>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    37da:	2201      	movs	r2, #1
    37dc:	2100      	movs	r1, #0
    37de:	4668      	mov	r0, sp
    37e0:	f01e f9da 	bl	21b98 <_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    37e4:	4620      	mov	r0, r4
    37e6:	f015 fcc1 	bl	1916c <net_buf_id>
    37ea:	4e14      	ldr	r6, [pc, #80]	; (383c <bt_hci_cmd_send_sync+0x74>)
    37ec:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
    37f0:	f8c0 d004 	str.w	sp, [r0, #4]
	net_buf_ref(buf);
    37f4:	4620      	mov	r0, r4
    37f6:	f015 fda5 	bl	19344 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    37fa:	4621      	mov	r1, r4
    37fc:	4810      	ldr	r0, [pc, #64]	; (3840 <bt_hci_cmd_send_sync+0x78>)
    37fe:	f015 fd66 	bl	192ce <net_buf_put>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    3802:	f242 7110 	movw	r1, #10000	; 0x2710
    3806:	4668      	mov	r0, sp
    3808:	f01e fa30 	bl	21c6c <_impl_k_sem_take>
	if (cmd(buf)->status) {
    380c:	4620      	mov	r0, r4
    380e:	f015 fcad 	bl	1916c <net_buf_id>
    3812:	f816 0030 	ldrb.w	r0, [r6, r0, lsl #3]
    3816:	b130      	cbz	r0, 3826 <bt_hci_cmd_send_sync+0x5e>
		net_buf_unref(buf);
    3818:	4620      	mov	r0, r4
    381a:	f015 fd65 	bl	192e8 <net_buf_unref>
		err = -EIO;
    381e:	f06f 0004 	mvn.w	r0, #4
}
    3822:	b006      	add	sp, #24
    3824:	bd70      	pop	{r4, r5, r6, pc}
		if (rsp) {
    3826:	b10d      	cbz	r5, 382c <bt_hci_cmd_send_sync+0x64>
			*rsp = buf;
    3828:	602c      	str	r4, [r5, #0]
    382a:	e7fa      	b.n	3822 <bt_hci_cmd_send_sync+0x5a>
			net_buf_unref(buf);
    382c:	4620      	mov	r0, r4
    382e:	f015 fd5b 	bl	192e8 <net_buf_unref>
		err = 0;
    3832:	4628      	mov	r0, r5
    3834:	e7f5      	b.n	3822 <bt_hci_cmd_send_sync+0x5a>
			return -ENOBUFS;
    3836:	f06f 0036 	mvn.w	r0, #54	; 0x36
    383a:	e7f2      	b.n	3822 <bt_hci_cmd_send_sync+0x5a>
    383c:	200003b8 	.word	0x200003b8
    3840:	20009dac 	.word	0x20009dac

00003844 <set_random_address>:
{
    3844:	b570      	push	{r4, r5, r6, lr}
	return memcmp(a, b, sizeof(*a));
    3846:	4d15      	ldr	r5, [pc, #84]	; (389c <set_random_address+0x58>)
    3848:	2206      	movs	r2, #6
    384a:	f105 0108 	add.w	r1, r5, #8
    384e:	4606      	mov	r6, r0
    3850:	f7fc ff72 	bl	738 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    3854:	4604      	mov	r4, r0
    3856:	b1d8      	cbz	r0, 3890 <set_random_address+0x4c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    3858:	2106      	movs	r1, #6
    385a:	f242 0005 	movw	r0, #8197	; 0x2005
    385e:	f7ff ff83 	bl	3768 <bt_hci_cmd_create>
	if (!buf) {
    3862:	4604      	mov	r4, r0
    3864:	b1b0      	cbz	r0, 3894 <set_random_address+0x50>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    3866:	2206      	movs	r2, #6
    3868:	4631      	mov	r1, r6
    386a:	3008      	adds	r0, #8
    386c:	f015 fda0 	bl	193b0 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    3870:	4621      	mov	r1, r4
    3872:	2200      	movs	r2, #0
    3874:	f242 0005 	movw	r0, #8197	; 0x2005
    3878:	f7ff ffa6 	bl	37c8 <bt_hci_cmd_send_sync>
	if (err) {
    387c:	4604      	mov	r4, r0
    387e:	b938      	cbnz	r0, 3890 <set_random_address+0x4c>
	memcpy(dst, src, sizeof(*dst));
    3880:	2206      	movs	r2, #6
    3882:	4631      	mov	r1, r6
    3884:	f105 0008 	add.w	r0, r5, #8
    3888:	f7fc ff83 	bl	792 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    388c:	2301      	movs	r3, #1
    388e:	71eb      	strb	r3, [r5, #7]
}
    3890:	4620      	mov	r0, r4
    3892:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    3894:	f06f 0436 	mvn.w	r4, #54	; 0x36
    3898:	e7fa      	b.n	3890 <set_random_address+0x4c>
    389a:	bf00      	nop
    389c:	20009cd8 	.word	0x20009cd8

000038a0 <le_set_private_addr>:
{
    38a0:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
    38a2:	2106      	movs	r1, #6
    38a4:	4668      	mov	r0, sp
    38a6:	f008 ffd1 	bl	c84c <bt_rand>
	if (err) {
    38aa:	b940      	cbnz	r0, 38be <le_set_private_addr+0x1e>
	nrpa.val[5] &= 0x3f;
    38ac:	f89d 3005 	ldrb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
    38b0:	4668      	mov	r0, sp
	nrpa.val[5] &= 0x3f;
    38b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    38b6:	f88d 3005 	strb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
    38ba:	f7ff ffc3 	bl	3844 <set_random_address>
}
    38be:	b003      	add	sp, #12
    38c0:	f85d fb04 	ldr.w	pc, [sp], #4

000038c4 <hci_id_add>:
{
    38c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    38c6:	4607      	mov	r7, r0
    38c8:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
    38ca:	f242 0027 	movw	r0, #8231	; 0x2027
    38ce:	2127      	movs	r1, #39	; 0x27
    38d0:	f7ff ff4a 	bl	3768 <bt_hci_cmd_create>
	if (!buf) {
    38d4:	4604      	mov	r4, r0
    38d6:	b1d0      	cbz	r0, 390e <hci_id_add+0x4a>
	cp = net_buf_add(buf, sizeof(*cp));
    38d8:	2127      	movs	r1, #39	; 0x27
    38da:	3008      	adds	r0, #8
    38dc:	f015 fd62 	bl	193a4 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
    38e0:	4639      	mov	r1, r7
	cp = net_buf_add(buf, sizeof(*cp));
    38e2:	4605      	mov	r5, r0
	bt_addr_le_copy(&cp->peer_id_addr, addr);
    38e4:	f7ff fe46 	bl	3574 <bt_addr_le_copy>
	memcpy(cp->peer_irk, val, 16);
    38e8:	4631      	mov	r1, r6
    38ea:	2210      	movs	r2, #16
    38ec:	1de8      	adds	r0, r5, #7
    38ee:	f7fc ff50 	bl	792 <memcpy>
	memset(cp->local_irk, 0, 16);
    38f2:	2210      	movs	r2, #16
    38f4:	2100      	movs	r1, #0
    38f6:	f105 0017 	add.w	r0, r5, #23
    38fa:	f7fc ff76 	bl	7ea <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
    38fe:	4621      	mov	r1, r4
    3900:	2200      	movs	r2, #0
    3902:	f242 0027 	movw	r0, #8231	; 0x2027
}
    3906:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
    390a:	f7ff bf5d 	b.w	37c8 <bt_hci_cmd_send_sync>
}
    390e:	f06f 0036 	mvn.w	r0, #54	; 0x36
    3912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00003914 <keys_add_id>:
	hci_id_add(&keys->addr, keys->irk.val);
    3914:	f100 0130 	add.w	r1, r0, #48	; 0x30
    3918:	f7ff bfd4 	b.w	38c4 <hci_id_add>

0000391c <addr_res_enable>:
{
    391c:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
    391e:	2101      	movs	r1, #1
{
    3920:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
    3922:	f242 002d 	movw	r0, #8237	; 0x202d
    3926:	f7ff ff1f 	bl	3768 <bt_hci_cmd_create>
	if (!buf) {
    392a:	4604      	mov	r4, r0
    392c:	b158      	cbz	r0, 3946 <addr_res_enable+0x2a>
	net_buf_add_u8(buf, enable);
    392e:	4629      	mov	r1, r5
    3930:	3008      	adds	r0, #8
    3932:	f015 fd46 	bl	193c2 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
    3936:	4621      	mov	r1, r4
    3938:	2200      	movs	r2, #0
    393a:	f242 002d 	movw	r0, #8237	; 0x202d
}
    393e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
    3942:	f7ff bf41 	b.w	37c8 <bt_hci_cmd_send_sync>
}
    3946:	f06f 0036 	mvn.w	r0, #54	; 0x36
    394a:	bd38      	pop	{r3, r4, r5, pc}

0000394c <set_le_scan_enable>:
{
    394c:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    394e:	2102      	movs	r1, #2
{
    3950:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    3952:	f242 000c 	movw	r0, #8204	; 0x200c
    3956:	f7ff ff07 	bl	3768 <bt_hci_cmd_create>
	if (!buf) {
    395a:	4604      	mov	r4, r0
    395c:	b328      	cbz	r0, 39aa <set_le_scan_enable+0x5e>
	cp = net_buf_add(buf, sizeof(*cp));
    395e:	2102      	movs	r1, #2
    3960:	3008      	adds	r0, #8
    3962:	f015 fd1f 	bl	193a4 <net_buf_simple_add>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    3966:	2d01      	cmp	r5, #1
	cp = net_buf_add(buf, sizeof(*cp));
    3968:	4602      	mov	r2, r0
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    396a:	d115      	bne.n	3998 <set_le_scan_enable+0x4c>
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
    396c:	210a      	movs	r1, #10
    396e:	4810      	ldr	r0, [pc, #64]	; (39b0 <set_le_scan_enable+0x64>)
    3970:	f7ff fe14 	bl	359c <atomic_test_bit>
    3974:	7050      	strb	r0, [r2, #1]
	cp->enable = enable;
    3976:	7015      	strb	r5, [r2, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    3978:	4621      	mov	r1, r4
    397a:	2200      	movs	r2, #0
    397c:	f242 000c 	movw	r0, #8204	; 0x200c
    3980:	f7ff ff22 	bl	37c8 <bt_hci_cmd_send_sync>
	if (err) {
    3984:	4604      	mov	r4, r0
    3986:	b928      	cbnz	r0, 3994 <set_le_scan_enable+0x48>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    3988:	2d01      	cmp	r5, #1
    398a:	d108      	bne.n	399e <set_le_scan_enable+0x52>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    398c:	2180      	movs	r1, #128	; 0x80
    398e:	4808      	ldr	r0, [pc, #32]	; (39b0 <set_le_scan_enable+0x64>)
    3990:	f7ff fdf3 	bl	357a <atomic_or>
}
    3994:	4620      	mov	r0, r4
    3996:	bd38      	pop	{r3, r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    3998:	2300      	movs	r3, #0
    399a:	7043      	strb	r3, [r0, #1]
    399c:	e7eb      	b.n	3976 <set_le_scan_enable+0x2a>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    399e:	f06f 0180 	mvn.w	r1, #128	; 0x80
    39a2:	4803      	ldr	r0, [pc, #12]	; (39b0 <set_le_scan_enable+0x64>)
    39a4:	f7ff fe07 	bl	35b6 <atomic_and>
    39a8:	e7f4      	b.n	3994 <set_le_scan_enable+0x48>
		return -ENOBUFS;
    39aa:	f06f 0436 	mvn.w	r4, #54	; 0x36
    39ae:	e7f1      	b.n	3994 <set_le_scan_enable+0x48>
    39b0:	20009d48 	.word	0x20009d48

000039b4 <set_advertise_enable>:
{
    39b4:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    39b6:	2101      	movs	r1, #1
{
    39b8:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    39ba:	f242 000a 	movw	r0, #8202	; 0x200a
    39be:	f7ff fed3 	bl	3768 <bt_hci_cmd_create>
	if (!buf) {
    39c2:	4604      	mov	r4, r0
    39c4:	b1d8      	cbz	r0, 39fe <set_advertise_enable+0x4a>
    39c6:	3008      	adds	r0, #8
	if (enable) {
    39c8:	b18d      	cbz	r5, 39ee <set_advertise_enable+0x3a>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    39ca:	2101      	movs	r1, #1
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    39cc:	f015 fcf9 	bl	193c2 <net_buf_simple_add_u8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    39d0:	4621      	mov	r1, r4
    39d2:	2200      	movs	r2, #0
    39d4:	f242 000a 	movw	r0, #8202	; 0x200a
    39d8:	f7ff fef6 	bl	37c8 <bt_hci_cmd_send_sync>
	if (err) {
    39dc:	4604      	mov	r4, r0
    39de:	b920      	cbnz	r0, 39ea <set_advertise_enable+0x36>
	if (enable) {
    39e0:	b13d      	cbz	r5, 39f2 <set_advertise_enable+0x3e>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    39e2:	2120      	movs	r1, #32
    39e4:	4807      	ldr	r0, [pc, #28]	; (3a04 <set_advertise_enable+0x50>)
    39e6:	f7ff fdc8 	bl	357a <atomic_or>
}
    39ea:	4620      	mov	r0, r4
    39ec:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    39ee:	4629      	mov	r1, r5
    39f0:	e7ec      	b.n	39cc <set_advertise_enable+0x18>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    39f2:	f06f 0120 	mvn.w	r1, #32
    39f6:	4803      	ldr	r0, [pc, #12]	; (3a04 <set_advertise_enable+0x50>)
    39f8:	f7ff fddd 	bl	35b6 <atomic_and>
    39fc:	e7f5      	b.n	39ea <set_advertise_enable+0x36>
		return -ENOBUFS;
    39fe:	f06f 0436 	mvn.w	r4, #54	; 0x36
    3a02:	e7f2      	b.n	39ea <set_advertise_enable+0x36>
    3a04:	20009d48 	.word	0x20009d48

00003a08 <set_ad>:

static int set_ad(u16_t hci_op, const struct bt_data *ad, size_t ad_len)
{
    3a08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3a0c:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int i;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    3a0e:	2120      	movs	r1, #32
{
    3a10:	4607      	mov	r7, r0
    3a12:	4690      	mov	r8, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    3a14:	f7ff fea8 	bl	3768 <bt_hci_cmd_create>
	if (!buf) {
    3a18:	4606      	mov	r6, r0
    3a1a:	2800      	cmp	r0, #0
    3a1c:	d03c      	beq.n	3a98 <set_ad+0x90>
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
    3a1e:	2120      	movs	r1, #32
    3a20:	3008      	adds	r0, #8
    3a22:	f015 fcbf 	bl	193a4 <net_buf_simple_add>

	memset(set_data, 0, sizeof(*set_data));
    3a26:	2220      	movs	r2, #32
    3a28:	2100      	movs	r1, #0
	set_data = net_buf_add(buf, sizeof(*set_data));
    3a2a:	4605      	mov	r5, r0
	memset(set_data, 0, sizeof(*set_data));
    3a2c:	f7fc fedd 	bl	7ea <memset>

	for (i = 0; i < ad_len; i++) {
    3a30:	f04f 0900 	mov.w	r9, #0
    3a34:	45c1      	cmp	r9, r8
    3a36:	d106      	bne.n	3a46 <set_ad+0x3e>
		memcpy(&set_data->data[set_data->len], ad[i].data,
		       ad[i].data_len);
		set_data->len += ad[i].data_len;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    3a38:	4631      	mov	r1, r6
    3a3a:	4638      	mov	r0, r7
    3a3c:	2200      	movs	r2, #0
}
    3a3e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    3a42:	f7ff bec1 	b.w	37c8 <bt_hci_cmd_send_sync>
		if (set_data->len + ad[i].data_len + 2 > 31) {
    3a46:	7862      	ldrb	r2, [r4, #1]
    3a48:	782b      	ldrb	r3, [r5, #0]
    3a4a:	18d1      	adds	r1, r2, r3
    3a4c:	3102      	adds	r1, #2
    3a4e:	291f      	cmp	r1, #31
    3a50:	f104 0408 	add.w	r4, r4, #8
    3a54:	dd06      	ble.n	3a64 <set_ad+0x5c>
			net_buf_unref(buf);
    3a56:	4630      	mov	r0, r6
    3a58:	f015 fc46 	bl	192e8 <net_buf_unref>
			return -EINVAL;
    3a5c:	f06f 0015 	mvn.w	r0, #21
    3a60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		set_data->data[set_data->len++] = ad[i].data_len + 1;
    3a64:	18e9      	adds	r1, r5, r3
    3a66:	1c50      	adds	r0, r2, #1
    3a68:	7048      	strb	r0, [r1, #1]
		set_data->data[set_data->len++] = ad[i].type;
    3a6a:	1c98      	adds	r0, r3, #2
    3a6c:	b2c0      	uxtb	r0, r0
		set_data->data[set_data->len++] = ad[i].data_len + 1;
    3a6e:	3301      	adds	r3, #1
		set_data->data[set_data->len++] = ad[i].type;
    3a70:	7028      	strb	r0, [r5, #0]
    3a72:	fa55 f383 	uxtab	r3, r5, r3
    3a76:	f814 1c08 	ldrb.w	r1, [r4, #-8]
    3a7a:	7059      	strb	r1, [r3, #1]
		memcpy(&set_data->data[set_data->len], ad[i].data,
    3a7c:	3001      	adds	r0, #1
    3a7e:	f854 1c04 	ldr.w	r1, [r4, #-4]
    3a82:	4428      	add	r0, r5
    3a84:	f7fc fe85 	bl	792 <memcpy>
		set_data->len += ad[i].data_len;
    3a88:	782b      	ldrb	r3, [r5, #0]
    3a8a:	f814 2c07 	ldrb.w	r2, [r4, #-7]
    3a8e:	4413      	add	r3, r2
    3a90:	702b      	strb	r3, [r5, #0]
	for (i = 0; i < ad_len; i++) {
    3a92:	f109 0901 	add.w	r9, r9, #1
    3a96:	e7cd      	b.n	3a34 <set_ad+0x2c>
		return -ENOBUFS;
    3a98:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    3a9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00003aa0 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
    3aa0:	8802      	ldrh	r2, [r0, #0]
    3aa2:	8843      	ldrh	r3, [r0, #2]
    3aa4:	429a      	cmp	r2, r3
{
    3aa6:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
    3aa8:	d818      	bhi.n	3adc <bt_le_conn_params_valid+0x3c>
    3aaa:	2a05      	cmp	r2, #5
    3aac:	d916      	bls.n	3adc <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
    3aae:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    3ab2:	d813      	bhi.n	3adc <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
    3ab4:	8884      	ldrh	r4, [r0, #4]
    3ab6:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
    3aba:	d20f      	bcs.n	3adc <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
    3abc:	88c1      	ldrh	r1, [r0, #6]
    3abe:	f1a1 020a 	sub.w	r2, r1, #10
    3ac2:	b292      	uxth	r2, r2
    3ac4:	f640 4076 	movw	r0, #3190	; 0xc76
    3ac8:	4282      	cmp	r2, r0
    3aca:	d807      	bhi.n	3adc <bt_le_conn_params_valid+0x3c>
	     ((1 + param->latency) * param->interval_max))) {
    3acc:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
    3ad0:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
    3ad4:	bfb4      	ite	lt
    3ad6:	2001      	movlt	r0, #1
    3ad8:	2000      	movge	r0, #0
    3ada:	bd10      	pop	{r4, pc}
		return false;
    3adc:	2000      	movs	r0, #0
}
    3ade:	bd10      	pop	{r4, pc}

00003ae0 <bt_id_add>:
{
    3ae0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    3ae4:	4d66      	ldr	r5, [pc, #408]	; (3c80 <bt_id_add+0x1a0>)
    3ae6:	f895 30a4 	ldrb.w	r3, [r5, #164]	; 0xa4
{
    3aea:	4606      	mov	r6, r0
    3aec:	462c      	mov	r4, r5
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    3aee:	b11b      	cbz	r3, 3af8 <bt_id_add+0x18>
    3af0:	f895 20a5 	ldrb.w	r2, [r5, #165]	; 0xa5
    3af4:	429a      	cmp	r2, r3
    3af6:	d909      	bls.n	3b0c <bt_id_add+0x2c>
		bt_dev.le.rl_entries++;
    3af8:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
    3afc:	3301      	adds	r3, #1
    3afe:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
		return 0;
    3b02:	2500      	movs	r5, #0
}
    3b04:	4628      	mov	r0, r5
    3b06:	b004      	add	sp, #16
    3b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT);
    3b0c:	2102      	movs	r1, #2
    3b0e:	2000      	movs	r0, #0
    3b10:	f002 fcc0 	bl	6494 <bt_conn_lookup_state_le>
	if (conn) {
    3b14:	4680      	mov	r8, r0
    3b16:	b180      	cbz	r0, 3b3a <bt_id_add+0x5a>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    3b18:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    3b1c:	f105 0070 	add.w	r0, r5, #112	; 0x70
    3b20:	f7ff fd2b 	bl	357a <atomic_or>
    3b24:	2104      	movs	r1, #4
    3b26:	f106 0008 	add.w	r0, r6, #8
    3b2a:	f7ff fd26 	bl	357a <atomic_or>
		bt_conn_unref(conn);
    3b2e:	4640      	mov	r0, r8
    3b30:	f002 fcd2 	bl	64d8 <bt_conn_unref>
		return -EAGAIN;
    3b34:	f06f 050a 	mvn.w	r5, #10
    3b38:	e7e4      	b.n	3b04 <bt_id_add+0x24>
	adv_enabled = atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING);
    3b3a:	2105      	movs	r1, #5
    3b3c:	f105 0070 	add.w	r0, r5, #112	; 0x70
    3b40:	f7ff fd2c 	bl	359c <atomic_test_bit>
	if (adv_enabled) {
    3b44:	4607      	mov	r7, r0
    3b46:	b110      	cbz	r0, 3b4e <bt_id_add+0x6e>
		set_advertise_enable(false);
    3b48:	4640      	mov	r0, r8
    3b4a:	f7ff ff33 	bl	39b4 <set_advertise_enable>
	scan_enabled = atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING);
    3b4e:	2107      	movs	r1, #7
    3b50:	484c      	ldr	r0, [pc, #304]	; (3c84 <bt_id_add+0x1a4>)
    3b52:	f7ff fd23 	bl	359c <atomic_test_bit>
	if (scan_enabled) {
    3b56:	4680      	mov	r8, r0
    3b58:	b110      	cbz	r0, 3b60 <bt_id_add+0x80>
		set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    3b5a:	2000      	movs	r0, #0
    3b5c:	f7ff fef6 	bl	394c <set_le_scan_enable>
	if (bt_dev.le.rl_entries) {
    3b60:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
    3b64:	b1e3      	cbz	r3, 3ba0 <bt_id_add+0xc0>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    3b66:	2000      	movs	r0, #0
    3b68:	f7ff fed8 	bl	391c <addr_res_enable>
		if (err) {
    3b6c:	4605      	mov	r5, r0
    3b6e:	b1b8      	cbz	r0, 3ba0 <bt_id_add+0xc0>
			BT_WARN("Failed to disable address resolution");
    3b70:	4b45      	ldr	r3, [pc, #276]	; (3c88 <bt_id_add+0x1a8>)
    3b72:	9301      	str	r3, [sp, #4]
    3b74:	9300      	str	r3, [sp, #0]
    3b76:	4a45      	ldr	r2, [pc, #276]	; (3c8c <bt_id_add+0x1ac>)
    3b78:	4b45      	ldr	r3, [pc, #276]	; (3c90 <bt_id_add+0x1b0>)
    3b7a:	4946      	ldr	r1, [pc, #280]	; (3c94 <bt_id_add+0x1b4>)
    3b7c:	4846      	ldr	r0, [pc, #280]	; (3c98 <bt_id_add+0x1b8>)
			BT_ERR("Failed to clear resolution list");
    3b7e:	f7fe fb89 	bl	2294 <printk>
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    3b82:	2001      	movs	r0, #1
    3b84:	f7ff feca 	bl	391c <addr_res_enable>
	if (scan_enabled) {
    3b88:	f1b8 0f00 	cmp.w	r8, #0
    3b8c:	d002      	beq.n	3b94 <bt_id_add+0xb4>
		set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
    3b8e:	2001      	movs	r0, #1
    3b90:	f7ff fedc 	bl	394c <set_le_scan_enable>
	if (adv_enabled) {
    3b94:	2f00      	cmp	r7, #0
    3b96:	d0b5      	beq.n	3b04 <bt_id_add+0x24>
		set_advertise_enable(true);
    3b98:	2001      	movs	r0, #1
    3b9a:	f7ff ff0b 	bl	39b4 <set_advertise_enable>
    3b9e:	e7b1      	b.n	3b04 <bt_id_add+0x24>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
    3ba0:	f894 20a5 	ldrb.w	r2, [r4, #165]	; 0xa5
    3ba4:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    3ba8:	429a      	cmp	r2, r3
    3baa:	d11d      	bne.n	3be8 <bt_id_add+0x108>
		BT_WARN("Resolving list size exceeded. Switching to host.");
    3bac:	4e36      	ldr	r6, [pc, #216]	; (3c88 <bt_id_add+0x1a8>)
    3bae:	4b38      	ldr	r3, [pc, #224]	; (3c90 <bt_id_add+0x1b0>)
    3bb0:	4a36      	ldr	r2, [pc, #216]	; (3c8c <bt_id_add+0x1ac>)
    3bb2:	4938      	ldr	r1, [pc, #224]	; (3c94 <bt_id_add+0x1b4>)
    3bb4:	9601      	str	r6, [sp, #4]
    3bb6:	9600      	str	r6, [sp, #0]
    3bb8:	4838      	ldr	r0, [pc, #224]	; (3c9c <bt_id_add+0x1bc>)
    3bba:	f7fe fb6b 	bl	2294 <printk>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
    3bbe:	2200      	movs	r2, #0
    3bc0:	4611      	mov	r1, r2
    3bc2:	f242 0029 	movw	r0, #8233	; 0x2029
    3bc6:	f7ff fdff 	bl	37c8 <bt_hci_cmd_send_sync>
		if (err) {
    3bca:	4605      	mov	r5, r0
    3bcc:	b130      	cbz	r0, 3bdc <bt_id_add+0xfc>
			BT_ERR("Failed to clear resolution list");
    3bce:	9601      	str	r6, [sp, #4]
    3bd0:	9600      	str	r6, [sp, #0]
    3bd2:	4b2f      	ldr	r3, [pc, #188]	; (3c90 <bt_id_add+0x1b0>)
    3bd4:	4a32      	ldr	r2, [pc, #200]	; (3ca0 <bt_id_add+0x1c0>)
    3bd6:	492f      	ldr	r1, [pc, #188]	; (3c94 <bt_id_add+0x1b4>)
    3bd8:	4832      	ldr	r0, [pc, #200]	; (3ca4 <bt_id_add+0x1c4>)
    3bda:	e7d0      	b.n	3b7e <bt_id_add+0x9e>
		bt_dev.le.rl_entries++;
    3bdc:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
    3be0:	3301      	adds	r3, #1
    3be2:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
    3be6:	e7cc      	b.n	3b82 <bt_id_add+0xa2>
	err = hci_id_add(&keys->addr, keys->irk.val);
    3be8:	f106 0130 	add.w	r1, r6, #48	; 0x30
    3bec:	4630      	mov	r0, r6
    3bee:	f7ff fe69 	bl	38c4 <hci_id_add>
	if (err) {
    3bf2:	4605      	mov	r5, r0
    3bf4:	b138      	cbz	r0, 3c06 <bt_id_add+0x126>
		BT_ERR("Failed to add IRK to controller");
    3bf6:	4b24      	ldr	r3, [pc, #144]	; (3c88 <bt_id_add+0x1a8>)
    3bf8:	9301      	str	r3, [sp, #4]
    3bfa:	9300      	str	r3, [sp, #0]
    3bfc:	4a28      	ldr	r2, [pc, #160]	; (3ca0 <bt_id_add+0x1c0>)
    3bfe:	4b24      	ldr	r3, [pc, #144]	; (3c90 <bt_id_add+0x1b0>)
    3c00:	4924      	ldr	r1, [pc, #144]	; (3c94 <bt_id_add+0x1b4>)
    3c02:	4829      	ldr	r0, [pc, #164]	; (3ca8 <bt_id_add+0x1c8>)
    3c04:	e7bb      	b.n	3b7e <bt_id_add+0x9e>
	bt_dev.le.rl_entries++;
    3c06:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
    3c0a:	3301      	adds	r3, #1
    3c0c:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
    3c10:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    3c14:	075b      	lsls	r3, r3, #29
    3c16:	d407      	bmi.n	3c28 <bt_id_add+0x148>
		BT_WARN("Set privacy mode command is not supported");
    3c18:	4b1b      	ldr	r3, [pc, #108]	; (3c88 <bt_id_add+0x1a8>)
    3c1a:	9301      	str	r3, [sp, #4]
    3c1c:	9300      	str	r3, [sp, #0]
    3c1e:	4a1b      	ldr	r2, [pc, #108]	; (3c8c <bt_id_add+0x1ac>)
    3c20:	4b22      	ldr	r3, [pc, #136]	; (3cac <bt_id_add+0x1cc>)
    3c22:	491c      	ldr	r1, [pc, #112]	; (3c94 <bt_id_add+0x1b4>)
    3c24:	4822      	ldr	r0, [pc, #136]	; (3cb0 <bt_id_add+0x1d0>)
    3c26:	e7aa      	b.n	3b7e <bt_id_add+0x9e>
	bt_addr_le_copy(&cp.id_addr, addr);
    3c28:	4631      	mov	r1, r6
    3c2a:	a802      	add	r0, sp, #8
    3c2c:	f7ff fca2 	bl	3574 <bt_addr_le_copy>
	cp.mode = mode;
    3c30:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    3c32:	2108      	movs	r1, #8
    3c34:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
    3c38:	f88d 300f 	strb.w	r3, [sp, #15]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    3c3c:	f7ff fd94 	bl	3768 <bt_hci_cmd_create>
	if (!buf) {
    3c40:	4604      	mov	r4, r0
    3c42:	b1c8      	cbz	r0, 3c78 <bt_id_add+0x198>
	net_buf_add_mem(buf, &cp, sizeof(cp));
    3c44:	2208      	movs	r2, #8
    3c46:	eb0d 0102 	add.w	r1, sp, r2
    3c4a:	4410      	add	r0, r2
    3c4c:	f015 fbb0 	bl	193b0 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
    3c50:	4621      	mov	r1, r4
    3c52:	462a      	mov	r2, r5
    3c54:	f242 004e 	movw	r0, #8270	; 0x204e
    3c58:	f7ff fdb6 	bl	37c8 <bt_hci_cmd_send_sync>
	if (err) {
    3c5c:	4604      	mov	r4, r0
    3c5e:	2800      	cmp	r0, #0
    3c60:	d08f      	beq.n	3b82 <bt_id_add+0xa2>
		BT_ERR("Failed to set privacy mode");
    3c62:	4b09      	ldr	r3, [pc, #36]	; (3c88 <bt_id_add+0x1a8>)
    3c64:	9301      	str	r3, [sp, #4]
    3c66:	9300      	str	r3, [sp, #0]
    3c68:	4a0d      	ldr	r2, [pc, #52]	; (3ca0 <bt_id_add+0x1c0>)
    3c6a:	4b09      	ldr	r3, [pc, #36]	; (3c90 <bt_id_add+0x1b0>)
    3c6c:	4909      	ldr	r1, [pc, #36]	; (3c94 <bt_id_add+0x1b4>)
    3c6e:	4811      	ldr	r0, [pc, #68]	; (3cb4 <bt_id_add+0x1d4>)
    3c70:	f7fe fb10 	bl	2294 <printk>
    3c74:	4625      	mov	r5, r4
    3c76:	e784      	b.n	3b82 <bt_id_add+0xa2>
		return -ENOBUFS;
    3c78:	f06f 0436 	mvn.w	r4, #54	; 0x36
    3c7c:	e7f1      	b.n	3c62 <bt_id_add+0x182>
    3c7e:	bf00      	nop
    3c80:	20009cd8 	.word	0x20009cd8
    3c84:	20009d48 	.word	0x20009d48
    3c88:	00023dae 	.word	0x00023dae
    3c8c:	00024006 	.word	0x00024006
    3c90:	00023584 	.word	0x00023584
    3c94:	000272d8 	.word	0x000272d8
    3c98:	0002373c 	.word	0x0002373c
    3c9c:	00023771 	.word	0x00023771
    3ca0:	00022d76 	.word	0x00022d76
    3ca4:	000237b2 	.word	0x000237b2
    3ca8:	000237e2 	.word	0x000237e2
    3cac:	00023570 	.word	0x00023570
    3cb0:	00023812 	.word	0x00023812
    3cb4:	0002384c 	.word	0x0002384c

00003cb8 <bt_id_del>:
{
    3cb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (!bt_dev.le.rl_size ||
    3cbc:	4c4d      	ldr	r4, [pc, #308]	; (3df4 <bt_id_del+0x13c>)
    3cbe:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
{
    3cc2:	b085      	sub	sp, #20
    3cc4:	4606      	mov	r6, r0
    3cc6:	4625      	mov	r5, r4
	if (!bt_dev.le.rl_size ||
    3cc8:	b123      	cbz	r3, 3cd4 <bt_id_del+0x1c>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
    3cca:	f894 20a5 	ldrb.w	r2, [r4, #165]	; 0xa5
    3cce:	3301      	adds	r3, #1
	if (!bt_dev.le.rl_size ||
    3cd0:	429a      	cmp	r2, r3
    3cd2:	dd09      	ble.n	3ce8 <bt_id_del+0x30>
		bt_dev.le.rl_entries--;
    3cd4:	f895 30a5 	ldrb.w	r3, [r5, #165]	; 0xa5
    3cd8:	3b01      	subs	r3, #1
    3cda:	f885 30a5 	strb.w	r3, [r5, #165]	; 0xa5
		return 0;
    3cde:	2400      	movs	r4, #0
}
    3ce0:	4620      	mov	r0, r4
    3ce2:	b005      	add	sp, #20
    3ce4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT);
    3ce8:	2102      	movs	r1, #2
    3cea:	2000      	movs	r0, #0
    3cec:	f002 fbd2 	bl	6494 <bt_conn_lookup_state_le>
	if (conn) {
    3cf0:	4680      	mov	r8, r0
    3cf2:	b178      	cbz	r0, 3d14 <bt_id_del+0x5c>
    3cf4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    3cf8:	f104 0070 	add.w	r0, r4, #112	; 0x70
    3cfc:	f7ff fc3d 	bl	357a <atomic_or>
    3d00:	2108      	movs	r1, #8
    3d02:	1870      	adds	r0, r6, r1
    3d04:	f7ff fc39 	bl	357a <atomic_or>
		bt_conn_unref(conn);
    3d08:	4640      	mov	r0, r8
    3d0a:	f002 fbe5 	bl	64d8 <bt_conn_unref>
		return -EAGAIN;
    3d0e:	f06f 040a 	mvn.w	r4, #10
    3d12:	e7e5      	b.n	3ce0 <bt_id_del+0x28>
	adv_enabled = atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING);
    3d14:	2105      	movs	r1, #5
    3d16:	f104 0070 	add.w	r0, r4, #112	; 0x70
    3d1a:	f7ff fc3f 	bl	359c <atomic_test_bit>
	if (adv_enabled) {
    3d1e:	4607      	mov	r7, r0
    3d20:	b110      	cbz	r0, 3d28 <bt_id_del+0x70>
		set_advertise_enable(false);
    3d22:	4640      	mov	r0, r8
    3d24:	f7ff fe46 	bl	39b4 <set_advertise_enable>
	scan_enabled = atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING);
    3d28:	2107      	movs	r1, #7
    3d2a:	4833      	ldr	r0, [pc, #204]	; (3df8 <bt_id_del+0x140>)
    3d2c:	f7ff fc36 	bl	359c <atomic_test_bit>
	if (scan_enabled) {
    3d30:	4680      	mov	r8, r0
    3d32:	b110      	cbz	r0, 3d3a <bt_id_del+0x82>
		set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    3d34:	2000      	movs	r0, #0
    3d36:	f7ff fe09 	bl	394c <set_le_scan_enable>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    3d3a:	2000      	movs	r0, #0
    3d3c:	f7ff fdee 	bl	391c <addr_res_enable>
	if (err) {
    3d40:	4604      	mov	r4, r0
    3d42:	b1d8      	cbz	r0, 3d7c <bt_id_del+0xc4>
		BT_ERR("Disabling address resolution failed (err %d)", err);
    3d44:	4b2d      	ldr	r3, [pc, #180]	; (3dfc <bt_id_del+0x144>)
    3d46:	9302      	str	r3, [sp, #8]
    3d48:	e88d 0018 	stmia.w	sp, {r3, r4}
    3d4c:	4a2c      	ldr	r2, [pc, #176]	; (3e00 <bt_id_del+0x148>)
    3d4e:	4b2d      	ldr	r3, [pc, #180]	; (3e04 <bt_id_del+0x14c>)
    3d50:	492d      	ldr	r1, [pc, #180]	; (3e08 <bt_id_del+0x150>)
    3d52:	482e      	ldr	r0, [pc, #184]	; (3e0c <bt_id_del+0x154>)
    3d54:	f7fe fa9e 	bl	2294 <printk>
	if (bt_dev.le.rl_entries) {
    3d58:	f895 30a5 	ldrb.w	r3, [r5, #165]	; 0xa5
    3d5c:	b113      	cbz	r3, 3d64 <bt_id_del+0xac>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    3d5e:	2001      	movs	r0, #1
    3d60:	f7ff fddc 	bl	391c <addr_res_enable>
	if (scan_enabled) {
    3d64:	f1b8 0f00 	cmp.w	r8, #0
    3d68:	d002      	beq.n	3d70 <bt_id_del+0xb8>
		set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
    3d6a:	2001      	movs	r0, #1
    3d6c:	f7ff fdee 	bl	394c <set_le_scan_enable>
	if (adv_enabled) {
    3d70:	2f00      	cmp	r7, #0
    3d72:	d0b5      	beq.n	3ce0 <bt_id_del+0x28>
		set_advertise_enable(true);
    3d74:	2001      	movs	r0, #1
    3d76:	f7ff fe1d 	bl	39b4 <set_advertise_enable>
    3d7a:	e7b1      	b.n	3ce0 <bt_id_del+0x28>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    3d7c:	f895 30a5 	ldrb.w	r3, [r5, #165]	; 0xa5
    3d80:	f895 20a4 	ldrb.w	r2, [r5, #164]	; 0xa4
    3d84:	429a      	cmp	r2, r3
    3d86:	d20b      	bcs.n	3da0 <bt_id_del+0xe8>
		bt_dev.le.rl_entries--;
    3d88:	3b01      	subs	r3, #1
    3d8a:	f885 30a5 	strb.w	r3, [r5, #165]	; 0xa5
		keys->keys &= ~BT_KEYS_IRK;
    3d8e:	89b3      	ldrh	r3, [r6, #12]
		bt_keys_foreach(BT_KEYS_IRK, keys_add_id);
    3d90:	491f      	ldr	r1, [pc, #124]	; (3e10 <bt_id_del+0x158>)
		keys->keys &= ~BT_KEYS_IRK;
    3d92:	f023 0302 	bic.w	r3, r3, #2
    3d96:	81b3      	strh	r3, [r6, #12]
		bt_keys_foreach(BT_KEYS_IRK, keys_add_id);
    3d98:	2002      	movs	r0, #2
    3d9a:	f007 fc8b 	bl	b6b4 <bt_keys_foreach>
    3d9e:	e7db      	b.n	3d58 <bt_id_del+0xa0>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
    3da0:	2107      	movs	r1, #7
    3da2:	f242 0028 	movw	r0, #8232	; 0x2028
    3da6:	f7ff fcdf 	bl	3768 <bt_hci_cmd_create>
	if (!buf) {
    3daa:	4681      	mov	r9, r0
    3dac:	b1f0      	cbz	r0, 3dec <bt_id_del+0x134>
	cp = net_buf_add(buf, sizeof(*cp));
    3dae:	2107      	movs	r1, #7
    3db0:	3008      	adds	r0, #8
    3db2:	f015 faf7 	bl	193a4 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, &keys->addr);
    3db6:	4631      	mov	r1, r6
    3db8:	f7ff fbdc 	bl	3574 <bt_addr_le_copy>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
    3dbc:	4622      	mov	r2, r4
    3dbe:	4649      	mov	r1, r9
    3dc0:	f242 0028 	movw	r0, #8232	; 0x2028
    3dc4:	f7ff fd00 	bl	37c8 <bt_hci_cmd_send_sync>
	if (err) {
    3dc8:	4604      	mov	r4, r0
    3dca:	b148      	cbz	r0, 3de0 <bt_id_del+0x128>
		BT_ERR("Failed to remove IRK from controller");
    3dcc:	4b0b      	ldr	r3, [pc, #44]	; (3dfc <bt_id_del+0x144>)
    3dce:	9301      	str	r3, [sp, #4]
    3dd0:	9300      	str	r3, [sp, #0]
    3dd2:	4a0b      	ldr	r2, [pc, #44]	; (3e00 <bt_id_del+0x148>)
    3dd4:	4b0b      	ldr	r3, [pc, #44]	; (3e04 <bt_id_del+0x14c>)
    3dd6:	490c      	ldr	r1, [pc, #48]	; (3e08 <bt_id_del+0x150>)
    3dd8:	480e      	ldr	r0, [pc, #56]	; (3e14 <bt_id_del+0x15c>)
    3dda:	f7fe fa5b 	bl	2294 <printk>
    3dde:	e7bb      	b.n	3d58 <bt_id_del+0xa0>
	bt_dev.le.rl_entries--;
    3de0:	f895 30a5 	ldrb.w	r3, [r5, #165]	; 0xa5
    3de4:	3b01      	subs	r3, #1
    3de6:	f885 30a5 	strb.w	r3, [r5, #165]	; 0xa5
    3dea:	e7b5      	b.n	3d58 <bt_id_del+0xa0>
		err = -ENOBUFS;
    3dec:	f06f 0436 	mvn.w	r4, #54	; 0x36
    3df0:	e7b2      	b.n	3d58 <bt_id_del+0xa0>
    3df2:	bf00      	nop
    3df4:	20009cd8 	.word	0x20009cd8
    3df8:	20009d48 	.word	0x20009d48
    3dfc:	00023dae 	.word	0x00023dae
    3e00:	00022d76 	.word	0x00022d76
    3e04:	0002358e 	.word	0x0002358e
    3e08:	000272d8 	.word	0x000272d8
    3e0c:	00023877 	.word	0x00023877
    3e10:	00003915 	.word	0x00003915
    3e14:	000238b4 	.word	0x000238b4

00003e18 <update_pending_id>:
{
    3e18:	b538      	push	{r3, r4, r5, lr}
	if (atomic_test_and_clear_bit(keys->flags, BT_KEYS_ID_PENDING_ADD)) {
    3e1a:	f100 0508 	add.w	r5, r0, #8
{
    3e1e:	4604      	mov	r4, r0
	if (atomic_test_and_clear_bit(keys->flags, BT_KEYS_ID_PENDING_ADD)) {
    3e20:	2102      	movs	r1, #2
    3e22:	4628      	mov	r0, r5
    3e24:	f7ff fbd8 	bl	35d8 <atomic_test_and_clear_bit>
    3e28:	b120      	cbz	r0, 3e34 <update_pending_id+0x1c>
		bt_id_add(keys);
    3e2a:	4620      	mov	r0, r4
}
    3e2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_id_add(keys);
    3e30:	f7ff be56 	b.w	3ae0 <bt_id_add>
	if (atomic_test_and_clear_bit(keys->flags, BT_KEYS_ID_PENDING_DEL)) {
    3e34:	2103      	movs	r1, #3
    3e36:	4628      	mov	r0, r5
    3e38:	f7ff fbce 	bl	35d8 <atomic_test_and_clear_bit>
    3e3c:	b120      	cbz	r0, 3e48 <update_pending_id+0x30>
		bt_id_del(keys);
    3e3e:	4620      	mov	r0, r4
}
    3e40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_id_del(keys);
    3e44:	f7ff bf38 	b.w	3cb8 <bt_id_del>
    3e48:	bd38      	pop	{r3, r4, r5, pc}

00003e4a <bt_addr_le_create_static>:
	addr->type = BT_ADDR_LE_RANDOM;
    3e4a:	2301      	movs	r3, #1
{
    3e4c:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
    3e4e:	2106      	movs	r1, #6
{
    3e50:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
    3e52:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
    3e56:	f008 fcf9 	bl	c84c <bt_rand>
	if (err) {
    3e5a:	b918      	cbnz	r0, 3e64 <bt_addr_le_create_static+0x1a>
	BT_ADDR_SET_STATIC(&addr->a);
    3e5c:	79a3      	ldrb	r3, [r4, #6]
    3e5e:	f063 033f 	orn	r3, r3, #63	; 0x3f
    3e62:	71a3      	strb	r3, [r4, #6]
}
    3e64:	bd10      	pop	{r4, pc}
	...

00003e68 <bt_send>:
	return bt_dev.drv->send(buf);
    3e68:	4b02      	ldr	r3, [pc, #8]	; (3e74 <bt_send+0xc>)
    3e6a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    3e6e:	68db      	ldr	r3, [r3, #12]
    3e70:	4718      	bx	r3
    3e72:	bf00      	nop
    3e74:	20009cd8 	.word	0x20009cd8

00003e78 <bt_hci_cmd_send>:
{
    3e78:	b530      	push	{r4, r5, lr}
    3e7a:	4604      	mov	r4, r0
    3e7c:	b085      	sub	sp, #20
	if (!buf) {
    3e7e:	460d      	mov	r5, r1
    3e80:	b919      	cbnz	r1, 3e8a <bt_hci_cmd_send+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
    3e82:	f7ff fc71 	bl	3768 <bt_hci_cmd_create>
		if (!buf) {
    3e86:	4605      	mov	r5, r0
    3e88:	b1f0      	cbz	r0, 3ec8 <bt_hci_cmd_send+0x50>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    3e8a:	f640 4335 	movw	r3, #3125	; 0xc35
    3e8e:	429c      	cmp	r4, r3
    3e90:	d114      	bne.n	3ebc <bt_hci_cmd_send+0x44>
		err = bt_send(buf);
    3e92:	4628      	mov	r0, r5
    3e94:	f7ff ffe8 	bl	3e68 <bt_send>
		if (err) {
    3e98:	4604      	mov	r4, r0
    3e9a:	b160      	cbz	r0, 3eb6 <bt_hci_cmd_send+0x3e>
			BT_ERR("Unable to send to driver (err %d)", err);
    3e9c:	4b0c      	ldr	r3, [pc, #48]	; (3ed0 <bt_hci_cmd_send+0x58>)
    3e9e:	9302      	str	r3, [sp, #8]
    3ea0:	e88d 0018 	stmia.w	sp, {r3, r4}
    3ea4:	4a0b      	ldr	r2, [pc, #44]	; (3ed4 <bt_hci_cmd_send+0x5c>)
    3ea6:	4b0c      	ldr	r3, [pc, #48]	; (3ed8 <bt_hci_cmd_send+0x60>)
    3ea8:	490c      	ldr	r1, [pc, #48]	; (3edc <bt_hci_cmd_send+0x64>)
    3eaa:	480d      	ldr	r0, [pc, #52]	; (3ee0 <bt_hci_cmd_send+0x68>)
    3eac:	f7fe f9f2 	bl	2294 <printk>
			net_buf_unref(buf);
    3eb0:	4628      	mov	r0, r5
    3eb2:	f015 fa19 	bl	192e8 <net_buf_unref>
}
    3eb6:	4620      	mov	r0, r4
    3eb8:	b005      	add	sp, #20
    3eba:	bd30      	pop	{r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    3ebc:	4629      	mov	r1, r5
    3ebe:	4809      	ldr	r0, [pc, #36]	; (3ee4 <bt_hci_cmd_send+0x6c>)
    3ec0:	f015 fa05 	bl	192ce <net_buf_put>
	return 0;
    3ec4:	2400      	movs	r4, #0
    3ec6:	e7f6      	b.n	3eb6 <bt_hci_cmd_send+0x3e>
			return -ENOBUFS;
    3ec8:	f06f 0436 	mvn.w	r4, #54	; 0x36
    3ecc:	e7f3      	b.n	3eb6 <bt_hci_cmd_send+0x3e>
    3ece:	bf00      	nop
    3ed0:	00023dae 	.word	0x00023dae
    3ed4:	00022d76 	.word	0x00022d76
    3ed8:	000234a8 	.word	0x000234a8
    3edc:	000272d8 	.word	0x000272d8
    3ee0:	0002370a 	.word	0x0002370a
    3ee4:	20009dac 	.word	0x20009dac

00003ee8 <start_le_scan>:
{
    3ee8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    3eea:	4605      	mov	r5, r0
    3eec:	460e      	mov	r6, r1
    3eee:	4614      	mov	r4, r2
	memset(&set_param, 0, sizeof(set_param));
    3ef0:	2100      	movs	r1, #0
    3ef2:	2207      	movs	r2, #7
    3ef4:	4668      	mov	r0, sp
    3ef6:	f7fc fc78 	bl	7ea <memset>
		set_param.addr_type =  bt_dev.id_addr.type;
    3efa:	4821      	ldr	r0, [pc, #132]	; (3f80 <start_le_scan+0x98>)
	set_param.scan_type = scan_type;
    3efc:	f88d 5000 	strb.w	r5, [sp]
	set_param.filter_policy = 0x00;
    3f00:	2300      	movs	r3, #0
    3f02:	f88d 3006 	strb.w	r3, [sp, #6]
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    3f06:	2d01      	cmp	r5, #1
		set_param.addr_type =  bt_dev.id_addr.type;
    3f08:	7803      	ldrb	r3, [r0, #0]
	set_param.interval = sys_cpu_to_le16(interval);
    3f0a:	f8ad 6001 	strh.w	r6, [sp, #1]
	set_param.window = sys_cpu_to_le16(window);
    3f0e:	f8ad 4003 	strh.w	r4, [sp, #3]
		set_param.addr_type =  bt_dev.id_addr.type;
    3f12:	f88d 3005 	strb.w	r3, [sp, #5]
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    3f16:	d10a      	bne.n	3f2e <start_le_scan+0x46>
		    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    3f18:	2105      	movs	r1, #5
    3f1a:	3070      	adds	r0, #112	; 0x70
    3f1c:	f7ff fb3e 	bl	359c <atomic_test_bit>
		    scan_type == BT_HCI_LE_SCAN_ACTIVE &&
    3f20:	b928      	cbnz	r0, 3f2e <start_le_scan+0x46>
			err = le_set_private_addr();
    3f22:	f7ff fcbd 	bl	38a0 <le_set_private_addr>
			if (err) {
    3f26:	4604      	mov	r4, r0
    3f28:	b9f0      	cbnz	r0, 3f68 <start_le_scan+0x80>
			set_param.addr_type = BT_ADDR_LE_RANDOM;
    3f2a:	f88d 5005 	strb.w	r5, [sp, #5]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    3f2e:	2107      	movs	r1, #7
    3f30:	f242 000b 	movw	r0, #8203	; 0x200b
    3f34:	f7ff fc18 	bl	3768 <bt_hci_cmd_create>
	if (!buf) {
    3f38:	4604      	mov	r4, r0
    3f3a:	b1f0      	cbz	r0, 3f7a <start_le_scan+0x92>
	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    3f3c:	2207      	movs	r2, #7
    3f3e:	4669      	mov	r1, sp
    3f40:	3008      	adds	r0, #8
    3f42:	f015 fa35 	bl	193b0 <net_buf_simple_add_mem>
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_SCAN_PARAM, buf);
    3f46:	4621      	mov	r1, r4
    3f48:	f242 000b 	movw	r0, #8203	; 0x200b
    3f4c:	f7ff ff94 	bl	3e78 <bt_hci_cmd_send>
	err = set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
    3f50:	2001      	movs	r0, #1
    3f52:	f7ff fcfb 	bl	394c <set_le_scan_enable>
	if (err) {
    3f56:	4604      	mov	r4, r0
    3f58:	b930      	cbnz	r0, 3f68 <start_le_scan+0x80>
	if (scan_type == BT_HCI_LE_SCAN_ACTIVE) {
    3f5a:	2d01      	cmp	r5, #1
    3f5c:	d107      	bne.n	3f6e <start_le_scan+0x86>
    3f5e:	f44f 7100 	mov.w	r1, #512	; 0x200
    3f62:	4808      	ldr	r0, [pc, #32]	; (3f84 <start_le_scan+0x9c>)
    3f64:	f7ff fb09 	bl	357a <atomic_or>
}
    3f68:	4620      	mov	r0, r4
    3f6a:	b002      	add	sp, #8
    3f6c:	bd70      	pop	{r4, r5, r6, pc}
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3f6e:	f46f 7100 	mvn.w	r1, #512	; 0x200
    3f72:	4804      	ldr	r0, [pc, #16]	; (3f84 <start_le_scan+0x9c>)
    3f74:	f7ff fb1f 	bl	35b6 <atomic_and>
    3f78:	e7f6      	b.n	3f68 <start_le_scan+0x80>
		return -ENOBUFS;
    3f7a:	f06f 0436 	mvn.w	r4, #54	; 0x36
    3f7e:	e7f3      	b.n	3f68 <start_le_scan+0x80>
    3f80:	20009cd8 	.word	0x20009cd8
    3f84:	20009d48 	.word	0x20009d48

00003f88 <bt_le_scan_update>:
{
    3f88:	b538      	push	{r3, r4, r5, lr}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    3f8a:	2108      	movs	r1, #8
{
    3f8c:	4605      	mov	r5, r0
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    3f8e:	4816      	ldr	r0, [pc, #88]	; (3fe8 <bt_le_scan_update+0x60>)
    3f90:	f7ff fb04 	bl	359c <atomic_test_bit>
    3f94:	4602      	mov	r2, r0
    3f96:	b108      	cbz	r0, 3f9c <bt_le_scan_update+0x14>
		return 0;
    3f98:	2000      	movs	r0, #0
    3f9a:	bd38      	pop	{r3, r4, r5, pc}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    3f9c:	2107      	movs	r1, #7
    3f9e:	4812      	ldr	r0, [pc, #72]	; (3fe8 <bt_le_scan_update+0x60>)
    3fa0:	f7ff fafc 	bl	359c <atomic_test_bit>
    3fa4:	b9d0      	cbnz	r0, 3fdc <bt_le_scan_update+0x54>
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT_SCAN);
    3fa6:	2101      	movs	r1, #1
    3fa8:	2000      	movs	r0, #0
    3faa:	f002 fa73 	bl	6494 <bt_conn_lookup_state_le>
		if (!conn) {
    3fae:	4604      	mov	r4, r0
    3fb0:	2800      	cmp	r0, #0
    3fb2:	d0f1      	beq.n	3f98 <bt_le_scan_update+0x10>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    3fb4:	f44f 6180 	mov.w	r1, #1024	; 0x400
    3fb8:	480b      	ldr	r0, [pc, #44]	; (3fe8 <bt_le_scan_update+0x60>)
    3fba:	f7ff fade 	bl	357a <atomic_or>
		bt_conn_unref(conn);
    3fbe:	4620      	mov	r0, r4
    3fc0:	f002 fa8a 	bl	64d8 <bt_conn_unref>
			window = BT_GAP_SCAN_SLOW_WINDOW_1;
    3fc4:	2d00      	cmp	r5, #0
		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    3fc6:	bf15      	itete	ne
    3fc8:	2230      	movne	r2, #48	; 0x30
    3fca:	2212      	moveq	r2, #18
    3fcc:	2160      	movne	r1, #96	; 0x60
    3fce:	f44f 6100 	moveq.w	r1, #2048	; 0x800
    3fd2:	2000      	movs	r0, #0
}
    3fd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    3fd8:	f7ff bf86 	b.w	3ee8 <start_le_scan>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    3fdc:	4610      	mov	r0, r2
    3fde:	f7ff fcb5 	bl	394c <set_le_scan_enable>
		if (err) {
    3fe2:	2800      	cmp	r0, #0
    3fe4:	d0df      	beq.n	3fa6 <bt_le_scan_update+0x1e>
    3fe6:	bd38      	pop	{r3, r4, r5, pc}
    3fe8:	20009d48 	.word	0x20009d48
    3fec:	00000000 	.word	0x00000000

00003ff0 <bt_init>:
{
    3ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3ff4:	b08e      	sub	sp, #56	; 0x38
	err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    3ff6:	aa0c      	add	r2, sp, #48	; 0x30
    3ff8:	2100      	movs	r1, #0
    3ffa:	f640 4003 	movw	r0, #3075	; 0xc03
    3ffe:	f7ff fbe3 	bl	37c8 <bt_hci_cmd_send_sync>
	if (err) {
    4002:	4604      	mov	r4, r0
    4004:	2800      	cmp	r0, #0
    4006:	d17e      	bne.n	4106 <bt_init+0x116>
	u8_t status = buf->data[0];
    4008:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    400a:	689b      	ldr	r3, [r3, #8]
	if (status) {
    400c:	781b      	ldrb	r3, [r3, #0]
    400e:	b96b      	cbnz	r3, 402c <bt_init+0x3c>
	scan_dev_found_cb = NULL;
    4010:	4a3f      	ldr	r2, [pc, #252]	; (4110 <bt_init+0x120>)
    4012:	6013      	str	r3, [r2, #0]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    4014:	4b3f      	ldr	r3, [pc, #252]	; (4114 <bt_init+0x124>)
    4016:	f3bf 8f5b 	dmb	ish
    401a:	2201      	movs	r2, #1
    401c:	e853 1f00 	ldrex	r1, [r3]
    4020:	e843 2000 	strex	r0, r2, [r3]
    4024:	2800      	cmp	r0, #0
    4026:	d1f9      	bne.n	401c <bt_init+0x2c>
    4028:	f3bf 8f5b 	dmb	ish
	net_buf_unref(rsp);
    402c:	980c      	ldr	r0, [sp, #48]	; 0x30
    402e:	f015 f95b 	bl	192e8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    4032:	aa0c      	add	r2, sp, #48	; 0x30
    4034:	2100      	movs	r1, #0
    4036:	f241 0003 	movw	r0, #4099	; 0x1003
    403a:	f7ff fbc5 	bl	37c8 <bt_hci_cmd_send_sync>
	if (err) {
    403e:	4604      	mov	r4, r0
    4040:	2800      	cmp	r0, #0
    4042:	d160      	bne.n	4106 <bt_init+0x116>
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    4044:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4046:	4d34      	ldr	r5, [pc, #208]	; (4118 <bt_init+0x128>)
    4048:	6899      	ldr	r1, [r3, #8]
    404a:	2208      	movs	r2, #8
    404c:	3101      	adds	r1, #1
    404e:	f105 0016 	add.w	r0, r5, #22
    4052:	f7fc fb9e 	bl	792 <memcpy>
	net_buf_unref(rsp);
    4056:	980c      	ldr	r0, [sp, #48]	; 0x30
    4058:	f015 f946 	bl	192e8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    405c:	4621      	mov	r1, r4
    405e:	aa0c      	add	r2, sp, #48	; 0x30
    4060:	f241 0001 	movw	r0, #4097	; 0x1001
    4064:	f7ff fbb0 	bl	37c8 <bt_hci_cmd_send_sync>
    4068:	462e      	mov	r6, r5
	if (err) {
    406a:	4604      	mov	r4, r0
    406c:	2800      	cmp	r0, #0
    406e:	d14a      	bne.n	4106 <bt_init+0x116>
	read_local_ver_complete(rsp);
    4070:	980c      	ldr	r0, [sp, #48]	; 0x30
    4072:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    4074:	785a      	ldrb	r2, [r3, #1]
    4076:	73aa      	strb	r2, [r5, #14]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    4078:	78d9      	ldrb	r1, [r3, #3]
    407a:	789a      	ldrb	r2, [r3, #2]
    407c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    4080:	822a      	strh	r2, [r5, #16]
	bt_dev.lmp_version = rp->lmp_version;
    4082:	791a      	ldrb	r2, [r3, #4]
    4084:	73ea      	strb	r2, [r5, #15]
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    4086:	7a19      	ldrb	r1, [r3, #8]
    4088:	79da      	ldrb	r2, [r3, #7]
    408a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    408e:	826a      	strh	r2, [r5, #18]
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    4090:	795a      	ldrb	r2, [r3, #5]
    4092:	799b      	ldrb	r3, [r3, #6]
    4094:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    4098:	82ab      	strh	r3, [r5, #20]
	net_buf_unref(rsp);
    409a:	f015 f925 	bl	192e8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    409e:	4621      	mov	r1, r4
    40a0:	aa0c      	add	r2, sp, #48	; 0x30
    40a2:	f241 0009 	movw	r0, #4105	; 0x1009
    40a6:	f7ff fb8f 	bl	37c8 <bt_hci_cmd_send_sync>
	if (err) {
    40aa:	4604      	mov	r4, r0
    40ac:	bb58      	cbnz	r0, 4106 <bt_init+0x116>
	bt_addr_copy(&bt_dev.id_addr.a, &rp->bdaddr);
    40ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    40b0:	6899      	ldr	r1, [r3, #8]
    40b2:	2206      	movs	r2, #6
    40b4:	3101      	adds	r1, #1
    40b6:	1c68      	adds	r0, r5, #1
    40b8:	f7fc fb6b 	bl	792 <memcpy>
	net_buf_unref(rsp);
    40bc:	980c      	ldr	r0, [sp, #48]	; 0x30
	bt_dev.id_addr.type = BT_ADDR_LE_PUBLIC;
    40be:	702c      	strb	r4, [r5, #0]
	net_buf_unref(rsp);
    40c0:	f015 f912 	bl	192e8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    40c4:	4621      	mov	r1, r4
    40c6:	aa0c      	add	r2, sp, #48	; 0x30
    40c8:	f241 0002 	movw	r0, #4098	; 0x1002
    40cc:	f7ff fb7c 	bl	37c8 <bt_hci_cmd_send_sync>
	if (err) {
    40d0:	4604      	mov	r4, r0
    40d2:	b9c0      	cbnz	r0, 4106 <bt_init+0x116>
	memcpy(bt_dev.supported_commands, rp->commands,
    40d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    40d6:	6899      	ldr	r1, [r3, #8]
    40d8:	2240      	movs	r2, #64	; 0x40
    40da:	3101      	adds	r1, #1
    40dc:	f105 001e 	add.w	r0, r5, #30
    40e0:	f7fc fb57 	bl	792 <memcpy>
	net_buf_unref(rsp);
    40e4:	980c      	ldr	r0, [sp, #48]	; 0x30
    40e6:	f015 f8ff 	bl	192e8 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    40ea:	7eab      	ldrb	r3, [r5, #26]
    40ec:	065d      	lsls	r5, r3, #25
    40ee:	d41f      	bmi.n	4130 <bt_init+0x140>
		BT_ERR("Non-LE capable controller detected!");
    40f0:	4b0a      	ldr	r3, [pc, #40]	; (411c <bt_init+0x12c>)
    40f2:	9301      	str	r3, [sp, #4]
    40f4:	9300      	str	r3, [sp, #0]
    40f6:	4a0a      	ldr	r2, [pc, #40]	; (4120 <bt_init+0x130>)
    40f8:	4b0a      	ldr	r3, [pc, #40]	; (4124 <bt_init+0x134>)
    40fa:	490b      	ldr	r1, [pc, #44]	; (4128 <bt_init+0x138>)
    40fc:	480b      	ldr	r0, [pc, #44]	; (412c <bt_init+0x13c>)
    40fe:	f7fe f8c9 	bl	2294 <printk>
		return -ENODEV;
    4102:	f06f 0412 	mvn.w	r4, #18
}
    4106:	4620      	mov	r0, r4
    4108:	b00e      	add	sp, #56	; 0x38
    410a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    410e:	bf00      	nop
    4110:	20000414 	.word	0x20000414
    4114:	20009d48 	.word	0x20009d48
    4118:	20009cd8 	.word	0x20009cd8
    411c:	00023dae 	.word	0x00023dae
    4120:	00022d76 	.word	0x00022d76
    4124:	0002364c 	.word	0x0002364c
    4128:	000272d8 	.word	0x000272d8
    412c:	000238e9 	.word	0x000238e9
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    4130:	4621      	mov	r1, r4
    4132:	aa0c      	add	r2, sp, #48	; 0x30
    4134:	f242 0003 	movw	r0, #8195	; 0x2003
    4138:	f7ff fb46 	bl	37c8 <bt_hci_cmd_send_sync>
	if (err) {
    413c:	4604      	mov	r4, r0
    413e:	2800      	cmp	r0, #0
    4140:	d1e1      	bne.n	4106 <bt_init+0x116>
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    4142:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4144:	6899      	ldr	r1, [r3, #8]
    4146:	2208      	movs	r2, #8
    4148:	3101      	adds	r1, #1
    414a:	f106 0078 	add.w	r0, r6, #120	; 0x78
    414e:	f7fc fb20 	bl	792 <memcpy>
	net_buf_unref(rsp);
    4152:	980c      	ldr	r0, [sp, #48]	; 0x30
    4154:	f015 f8c8 	bl	192e8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    4158:	4621      	mov	r1, r4
    415a:	aa0c      	add	r2, sp, #48	; 0x30
    415c:	f242 0002 	movw	r0, #8194	; 0x2002
    4160:	f7ff fb32 	bl	37c8 <bt_hci_cmd_send_sync>
	if (err) {
    4164:	4604      	mov	r4, r0
    4166:	2800      	cmp	r0, #0
    4168:	d1cd      	bne.n	4106 <bt_init+0x116>
    416a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    416c:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->le_max_len);
    416e:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    4172:	f8a6 2088 	strh.w	r2, [r6, #136]	; 0x88
	if (!bt_dev.le.mtu) {
    4176:	b142      	cbz	r2, 418a <bt_init+0x19a>
	le_max_num = min(rp->le_max_num, CONFIG_BT_CONN_TX_MAX);
    4178:	78da      	ldrb	r2, [r3, #3]
	k_sem_init(&bt_dev.le.pkts, le_max_num, le_max_num);
    417a:	2a02      	cmp	r2, #2
    417c:	bf28      	it	cs
    417e:	2202      	movcs	r2, #2
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    4180:	4611      	mov	r1, r2
    4182:	f106 008c 	add.w	r0, r6, #140	; 0x8c
    4186:	f01d fd07 	bl	21b98 <_impl_k_sem_init>
	net_buf_unref(rsp);
    418a:	980c      	ldr	r0, [sp, #48]	; 0x30
    418c:	f015 f8ac 	bl	192e8 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    4190:	7eb4      	ldrb	r4, [r6, #26]
    4192:	f014 0420 	ands.w	r4, r4, #32
    4196:	f000 80c9 	beq.w	432c <bt_init+0x33c>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    419a:	f896 303a 	ldrb.w	r3, [r6, #58]	; 0x3a
    419e:	071c      	lsls	r4, r3, #28
    41a0:	d513      	bpl.n	41ca <bt_init+0x1da>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    41a2:	aa0c      	add	r2, sp, #48	; 0x30
    41a4:	2100      	movs	r1, #0
    41a6:	f242 001c 	movw	r0, #8220	; 0x201c
    41aa:	f7ff fb0d 	bl	37c8 <bt_hci_cmd_send_sync>
		if (err) {
    41ae:	4604      	mov	r4, r0
    41b0:	2800      	cmp	r0, #0
    41b2:	d1a8      	bne.n	4106 <bt_init+0x116>
		le_read_supp_states_complete(rsp);
    41b4:	980c      	ldr	r0, [sp, #48]	; 0x30
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    41b6:	6883      	ldr	r3, [r0, #8]
    41b8:	f853 2f01 	ldr.w	r2, [r3, #1]!
    41bc:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    41be:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    41c2:	f8c6 2080 	str.w	r2, [r6, #128]	; 0x80
		net_buf_unref(rsp);
    41c6:	f015 f88f 	bl	192e8 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    41ca:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
    41ce:	0698      	lsls	r0, r3, #26
    41d0:	f100 80c8 	bmi.w	4364 <bt_init+0x374>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    41d4:	2108      	movs	r1, #8
    41d6:	f242 0001 	movw	r0, #8193	; 0x2001
    41da:	f7ff fac5 	bl	3768 <bt_hci_cmd_create>
	if (!buf) {
    41de:	4604      	mov	r4, r0
    41e0:	2800      	cmp	r0, #0
    41e2:	f000 80aa 	beq.w	433a <bt_init+0x34a>
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    41e6:	2108      	movs	r1, #8
    41e8:	4408      	add	r0, r1
    41ea:	f015 f8db 	bl	193a4 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    41ee:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
		if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
    41f2:	f896 5079 	ldrb.w	r5, [r6, #121]	; 0x79
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    41f6:	0799      	lsls	r1, r3, #30
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    41f8:	4602      	mov	r2, r0
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    41fa:	bf4c      	ite	mi
    41fc:	202f      	movmi	r0, #47	; 0x2f
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    41fe:	200f      	movpl	r0, #15
		if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    4200:	069f      	lsls	r7, r3, #26
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    4202:	bf48      	it	mi
    4204:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
    4208:	f015 0f09 	tst.w	r5, #9
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    420c:	bf18      	it	ne
    420e:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    4212:	07dd      	lsls	r5, r3, #31
	if ((bt_dev.supported_commands[34] & 0x02) &&
    4214:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
    4218:	f003 0306 	and.w	r3, r3, #6
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
    421c:	bf48      	it	mi
    421e:	f040 0010 	orrmi.w	r0, r0, #16
	if ((bt_dev.supported_commands[34] & 0x02) &&
    4222:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    4224:	bf08      	it	eq
    4226:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    422a:	2100      	movs	r1, #0
	sys_put_le64(mask, cp_mask->events);
    422c:	f7ff fa8a 	bl	3744 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    4230:	4621      	mov	r1, r4
    4232:	2200      	movs	r2, #0
    4234:	f242 0001 	movw	r0, #8193	; 0x2001
    4238:	f7ff fac6 	bl	37c8 <bt_hci_cmd_send_sync>
	if (err) {
    423c:	4604      	mov	r4, r0
    423e:	2800      	cmp	r0, #0
    4240:	f47f af61 	bne.w	4106 <bt_init+0x116>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    4244:	7eb3      	ldrb	r3, [r6, #26]
    4246:	0698      	lsls	r0, r3, #26
    4248:	d421      	bmi.n	428e <bt_init+0x29e>
	if (bt_dev.le.mtu) {
    424a:	f8b6 1088 	ldrh.w	r1, [r6, #136]	; 0x88
    424e:	b9f1      	cbnz	r1, 428e <bt_init+0x29e>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    4250:	aa0c      	add	r2, sp, #48	; 0x30
    4252:	f241 0005 	movw	r0, #4101	; 0x1005
    4256:	f7ff fab7 	bl	37c8 <bt_hci_cmd_send_sync>
	if (err) {
    425a:	4604      	mov	r4, r0
    425c:	2800      	cmp	r0, #0
    425e:	f47f af52 	bne.w	4106 <bt_init+0x116>
	if (bt_dev.le.mtu) {
    4262:	f8b6 3088 	ldrh.w	r3, [r6, #136]	; 0x88
    4266:	b97b      	cbnz	r3, 4288 <bt_init+0x298>
    4268:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    426a:	4895      	ldr	r0, [pc, #596]	; (44c0 <bt_init+0x4d0>)
    426c:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->acl_max_len);
    426e:	7899      	ldrb	r1, [r3, #2]
    4270:	785a      	ldrb	r2, [r3, #1]
    4272:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    4276:	f8a6 2088 	strh.w	r2, [r6, #136]	; 0x88
	pkts = sys_le16_to_cpu(rp->acl_max_num);
    427a:	889a      	ldrh	r2, [r3, #4]
	k_sem_init(&bt_dev.le.pkts, pkts, pkts);
    427c:	2a02      	cmp	r2, #2
    427e:	bf28      	it	cs
    4280:	2202      	movcs	r2, #2
    4282:	4611      	mov	r1, r2
    4284:	f01d fc88 	bl	21b98 <_impl_k_sem_init>
	net_buf_unref(rsp);
    4288:	980c      	ldr	r0, [sp, #48]	; 0x30
    428a:	f015 f82d 	bl	192e8 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    428e:	2108      	movs	r1, #8
    4290:	f640 4001 	movw	r0, #3073	; 0xc01
    4294:	f7ff fa68 	bl	3768 <bt_hci_cmd_create>
	if (!buf) {
    4298:	4604      	mov	r4, r0
    429a:	2800      	cmp	r0, #0
    429c:	d04d      	beq.n	433a <bt_init+0x34a>
	ev = net_buf_add(buf, sizeof(*ev));
    429e:	2108      	movs	r1, #8
    42a0:	4408      	add	r0, r1
    42a2:	f015 f87f 	bl	193a4 <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    42a6:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
    42aa:	07d9      	lsls	r1, r3, #31
	ev = net_buf_add(buf, sizeof(*ev));
    42ac:	4602      	mov	r2, r0
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    42ae:	f140 8085 	bpl.w	43bc <bt_init+0x3cc>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
    42b2:	a181      	add	r1, pc, #516	; (adr r1, 44b8 <bt_init+0x4c8>)
    42b4:	e9d1 0100 	ldrd	r0, r1, [r1]
	sys_put_le64(mask, ev->events);
    42b8:	f7ff fa44 	bl	3744 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    42bc:	4621      	mov	r1, r4
    42be:	2200      	movs	r2, #0
    42c0:	f640 4001 	movw	r0, #3073	; 0xc01
    42c4:	f7ff fa80 	bl	37c8 <bt_hci_cmd_send_sync>
	if (err) {
    42c8:	4604      	mov	r4, r0
    42ca:	2800      	cmp	r0, #0
    42cc:	f47f af1b 	bne.w	4106 <bt_init+0x116>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    42d0:	4601      	mov	r1, r0
    42d2:	aa0c      	add	r2, sp, #48	; 0x30
    42d4:	f64f 4001 	movw	r0, #64513	; 0xfc01
    42d8:	f7ff fa76 	bl	37c8 <bt_hci_cmd_send_sync>
    42dc:	4d79      	ldr	r5, [pc, #484]	; (44c4 <bt_init+0x4d4>)
	if (err) {
    42de:	2800      	cmp	r0, #0
    42e0:	d070      	beq.n	43c4 <bt_init+0x3d4>
		BT_WARN("Vendor HCI extensions not available");
    42e2:	4b79      	ldr	r3, [pc, #484]	; (44c8 <bt_init+0x4d8>)
    42e4:	4a79      	ldr	r2, [pc, #484]	; (44cc <bt_init+0x4dc>)
    42e6:	497a      	ldr	r1, [pc, #488]	; (44d0 <bt_init+0x4e0>)
    42e8:	487a      	ldr	r0, [pc, #488]	; (44d4 <bt_init+0x4e4>)
    42ea:	9501      	str	r5, [sp, #4]
    42ec:	9500      	str	r5, [sp, #0]
		BT_WARN("Failed to read supported vendor commands");
    42ee:	f7fd ffd1 	bl	2294 <printk>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    42f2:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    42f4:	2207      	movs	r2, #7
    42f6:	a90c      	add	r1, sp, #48	; 0x30
    42f8:	4877      	ldr	r0, [pc, #476]	; (44d8 <bt_init+0x4e8>)
    42fa:	930c      	str	r3, [sp, #48]	; 0x30
    42fc:	f8cd 3033 	str.w	r3, [sp, #51]	; 0x33
    4300:	f7fc fa1a 	bl	738 <memcmp>
    4304:	2800      	cmp	r0, #0
    4306:	f040 8109 	bne.w	451c <bt_init+0x52c>
	if (bt_storage) {
    430a:	4f74      	ldr	r7, [pc, #464]	; (44dc <bt_init+0x4ec>)
    430c:	683b      	ldr	r3, [r7, #0]
    430e:	2b00      	cmp	r3, #0
    4310:	f040 8151 	bne.w	45b6 <bt_init+0x5c6>
	if (bt_dev.vs_commands[1] & BIT(0)) {
    4314:	f896 3060 	ldrb.w	r3, [r6, #96]	; 0x60
    4318:	07db      	lsls	r3, r3, #31
    431a:	f100 8170 	bmi.w	45fe <bt_init+0x60e>
		BT_WARN("Read Static Addresses command not available");
    431e:	9501      	str	r5, [sp, #4]
    4320:	9500      	str	r5, [sp, #0]
    4322:	4b6f      	ldr	r3, [pc, #444]	; (44e0 <bt_init+0x4f0>)
    4324:	4a69      	ldr	r2, [pc, #420]	; (44cc <bt_init+0x4dc>)
    4326:	496a      	ldr	r1, [pc, #424]	; (44d0 <bt_init+0x4e0>)
    4328:	486e      	ldr	r0, [pc, #440]	; (44e4 <bt_init+0x4f4>)
    432a:	e175      	b.n	4618 <bt_init+0x628>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    432c:	2102      	movs	r1, #2
    432e:	f640 406d 	movw	r0, #3181	; 0xc6d
    4332:	f7ff fa19 	bl	3768 <bt_hci_cmd_create>
		if (!buf) {
    4336:	4605      	mov	r5, r0
    4338:	b910      	cbnz	r0, 4340 <bt_init+0x350>
		return -ENOBUFS;
    433a:	f06f 0436 	mvn.w	r4, #54	; 0x36
    433e:	e6e2      	b.n	4106 <bt_init+0x116>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
    4340:	2102      	movs	r1, #2
    4342:	3008      	adds	r0, #8
    4344:	f015 f82e 	bl	193a4 <net_buf_simple_add>
		cp_le->le = 0x01;
    4348:	2301      	movs	r3, #1
		cp_le->simul = 0x00;
    434a:	7044      	strb	r4, [r0, #1]
		cp_le->le = 0x01;
    434c:	7003      	strb	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    434e:	4622      	mov	r2, r4
    4350:	4629      	mov	r1, r5
    4352:	f640 406d 	movw	r0, #3181	; 0xc6d
    4356:	f7ff fa37 	bl	37c8 <bt_hci_cmd_send_sync>
		if (err) {
    435a:	4604      	mov	r4, r0
    435c:	2800      	cmp	r0, #0
    435e:	f43f af1c 	beq.w	419a <bt_init+0x1aa>
    4362:	e6d0      	b.n	4106 <bt_init+0x116>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL,
    4364:	aa0c      	add	r2, sp, #48	; 0x30
    4366:	2100      	movs	r1, #0
    4368:	f242 002f 	movw	r0, #8239	; 0x202f
    436c:	f7ff fa2c 	bl	37c8 <bt_hci_cmd_send_sync>
		if (err) {
    4370:	4604      	mov	r4, r0
    4372:	2800      	cmp	r0, #0
    4374:	f47f aec7 	bne.w	4106 <bt_init+0x116>
		rp = (void *)rsp->data;
    4378:	980c      	ldr	r0, [sp, #48]	; 0x30
    437a:	6883      	ldr	r3, [r0, #8]
		tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    437c:	f8b3 8001 	ldrh.w	r8, [r3, #1]
		tx_time = sys_le16_to_cpu(rp->max_tx_time);
    4380:	f8b3 7003 	ldrh.w	r7, [r3, #3]
		net_buf_unref(rsp);
    4384:	f014 ffb0 	bl	192e8 <net_buf_unref>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    4388:	2104      	movs	r1, #4
    438a:	f242 0024 	movw	r0, #8228	; 0x2024
    438e:	f7ff f9eb 	bl	3768 <bt_hci_cmd_create>
		if (!buf) {
    4392:	4605      	mov	r5, r0
    4394:	2800      	cmp	r0, #0
    4396:	d0d0      	beq.n	433a <bt_init+0x34a>
		cp = net_buf_add(buf, sizeof(*cp));
    4398:	2104      	movs	r1, #4
    439a:	3008      	adds	r0, #8
    439c:	f015 f802 	bl	193a4 <net_buf_simple_add>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    43a0:	4622      	mov	r2, r4
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    43a2:	f8a0 8000 	strh.w	r8, [r0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    43a6:	8047      	strh	r7, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    43a8:	4629      	mov	r1, r5
    43aa:	f242 0024 	movw	r0, #8228	; 0x2024
    43ae:	f7ff fa0b 	bl	37c8 <bt_hci_cmd_send_sync>
		if (err) {
    43b2:	4604      	mov	r4, r0
    43b4:	2800      	cmp	r0, #0
    43b6:	f43f af0d 	beq.w	41d4 <bt_init+0x1e4>
    43ba:	e6a4      	b.n	4106 <bt_init+0x116>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
    43bc:	484a      	ldr	r0, [pc, #296]	; (44e8 <bt_init+0x4f8>)
    43be:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    43c2:	e779      	b.n	42b8 <bt_init+0x2c8>
	rp.info = (void *)rsp->data;
    43c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	BT_INFO("HW Platform: %s (0x%04x)",
    43c6:	4942      	ldr	r1, [pc, #264]	; (44d0 <bt_init+0x4e0>)
	rp.info = (void *)rsp->data;
    43c8:	689c      	ldr	r4, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
    43ca:	4848      	ldr	r0, [pc, #288]	; (44ec <bt_init+0x4fc>)
    43cc:	f8b4 3001 	ldrh.w	r3, [r4, #1]
    43d0:	9302      	str	r3, [sp, #8]
	if (platform < ARRAY_SIZE(plat_str)) {
    43d2:	2b03      	cmp	r3, #3
		return plat_str[platform];
    43d4:	bf96      	itet	ls
    43d6:	4a46      	ldrls	r2, [pc, #280]	; (44f0 <bt_init+0x500>)
	return "unknown";
    43d8:	4a46      	ldrhi	r2, [pc, #280]	; (44f4 <bt_init+0x504>)
		return plat_str[platform];
    43da:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
    43de:	9201      	str	r2, [sp, #4]
    43e0:	4b39      	ldr	r3, [pc, #228]	; (44c8 <bt_init+0x4d8>)
    43e2:	4a45      	ldr	r2, [pc, #276]	; (44f8 <bt_init+0x508>)
    43e4:	9503      	str	r5, [sp, #12]
    43e6:	9500      	str	r5, [sp, #0]
    43e8:	f7fd ff54 	bl	2294 <printk>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    43ec:	f8b4 3001 	ldrh.w	r3, [r4, #1]
	BT_INFO("HW Variant: %s (0x%04x)",
    43f0:	f8b4 2003 	ldrh.w	r2, [r4, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    43f4:	2b02      	cmp	r3, #2
    43f6:	d13a      	bne.n	446e <bt_init+0x47e>
	if (variant < ARRAY_SIZE(nordic_str)) {
    43f8:	2a02      	cmp	r2, #2
    43fa:	d838      	bhi.n	446e <bt_init+0x47e>
		return nordic_str[variant];
    43fc:	4b3f      	ldr	r3, [pc, #252]	; (44fc <bt_init+0x50c>)
    43fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
    4402:	9202      	str	r2, [sp, #8]
    4404:	9301      	str	r3, [sp, #4]
    4406:	4a3c      	ldr	r2, [pc, #240]	; (44f8 <bt_init+0x508>)
    4408:	4b2f      	ldr	r3, [pc, #188]	; (44c8 <bt_init+0x4d8>)
    440a:	4931      	ldr	r1, [pc, #196]	; (44d0 <bt_init+0x4e0>)
    440c:	9503      	str	r5, [sp, #12]
    440e:	9500      	str	r5, [sp, #0]
    4410:	483b      	ldr	r0, [pc, #236]	; (4500 <bt_init+0x510>)
    4412:	f7fd ff3f 	bl	2294 <printk>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    4416:	7963      	ldrb	r3, [r4, #5]
    4418:	9506      	str	r5, [sp, #24]
    441a:	f8d4 1009 	ldr.w	r1, [r4, #9]
    441e:	9105      	str	r1, [sp, #20]
	if (variant < ARRAY_SIZE(var_str)) {
    4420:	2b03      	cmp	r3, #3
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    4422:	f8b4 1007 	ldrh.w	r1, [r4, #7]
		return var_str[variant];
    4426:	bf98      	it	ls
    4428:	4a36      	ldrls	r2, [pc, #216]	; (4504 <bt_init+0x514>)
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    442a:	9104      	str	r1, [sp, #16]
    442c:	79a1      	ldrb	r1, [r4, #6]
		return var_str[variant];
    442e:	bf94      	ite	ls
    4430:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
	return "unknown";
    4434:	4a2f      	ldrhi	r2, [pc, #188]	; (44f4 <bt_init+0x504>)
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    4436:	9103      	str	r1, [sp, #12]
    4438:	9302      	str	r3, [sp, #8]
    443a:	4925      	ldr	r1, [pc, #148]	; (44d0 <bt_init+0x4e0>)
    443c:	4b22      	ldr	r3, [pc, #136]	; (44c8 <bt_init+0x4d8>)
    443e:	9201      	str	r2, [sp, #4]
    4440:	9500      	str	r5, [sp, #0]
    4442:	4a2d      	ldr	r2, [pc, #180]	; (44f8 <bt_init+0x508>)
    4444:	4830      	ldr	r0, [pc, #192]	; (4508 <bt_init+0x518>)
    4446:	f7fd ff25 	bl	2294 <printk>
	net_buf_unref(rsp);
    444a:	980c      	ldr	r0, [sp, #48]	; 0x30
    444c:	f014 ff4c 	bl	192e8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    4450:	aa0c      	add	r2, sp, #48	; 0x30
    4452:	2100      	movs	r1, #0
    4454:	f64f 4002 	movw	r0, #64514	; 0xfc02
    4458:	f7ff f9b6 	bl	37c8 <bt_hci_cmd_send_sync>
	if (err) {
    445c:	4604      	mov	r4, r0
    445e:	b140      	cbz	r0, 4472 <bt_init+0x482>
		BT_WARN("Failed to read supported vendor features");
    4460:	9501      	str	r5, [sp, #4]
    4462:	9500      	str	r5, [sp, #0]
    4464:	4b18      	ldr	r3, [pc, #96]	; (44c8 <bt_init+0x4d8>)
    4466:	4a19      	ldr	r2, [pc, #100]	; (44cc <bt_init+0x4dc>)
    4468:	4919      	ldr	r1, [pc, #100]	; (44d0 <bt_init+0x4e0>)
    446a:	4828      	ldr	r0, [pc, #160]	; (450c <bt_init+0x51c>)
    446c:	e73f      	b.n	42ee <bt_init+0x2fe>
		return "unknown";
    446e:	4b21      	ldr	r3, [pc, #132]	; (44f4 <bt_init+0x504>)
    4470:	e7c7      	b.n	4402 <bt_init+0x412>
	rp.cmds = (void *)rsp->data;
    4472:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    4474:	4826      	ldr	r0, [pc, #152]	; (4510 <bt_init+0x520>)
    4476:	6899      	ldr	r1, [r3, #8]
    4478:	2202      	movs	r2, #2
    447a:	3101      	adds	r1, #1
    447c:	f7fc f989 	bl	792 <memcpy>
	net_buf_unref(rsp);
    4480:	980c      	ldr	r0, [sp, #48]	; 0x30
    4482:	f014 ff31 	bl	192e8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    4486:	aa0c      	add	r2, sp, #48	; 0x30
    4488:	4621      	mov	r1, r4
    448a:	f64f 4003 	movw	r0, #64515	; 0xfc03
    448e:	f7ff f99b 	bl	37c8 <bt_hci_cmd_send_sync>
	if (err) {
    4492:	b130      	cbz	r0, 44a2 <bt_init+0x4b2>
		BT_WARN("Failed to read supported vendor commands");
    4494:	9501      	str	r5, [sp, #4]
    4496:	9500      	str	r5, [sp, #0]
    4498:	4b0b      	ldr	r3, [pc, #44]	; (44c8 <bt_init+0x4d8>)
    449a:	4a0c      	ldr	r2, [pc, #48]	; (44cc <bt_init+0x4dc>)
    449c:	490c      	ldr	r1, [pc, #48]	; (44d0 <bt_init+0x4e0>)
    449e:	481d      	ldr	r0, [pc, #116]	; (4514 <bt_init+0x524>)
    44a0:	e725      	b.n	42ee <bt_init+0x2fe>
	rp.feat = (void *)rsp->data;
    44a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	memcpy(bt_dev.vs_features, rp.feat->features, BT_DEV_VS_FEAT_MAX);
    44a4:	481c      	ldr	r0, [pc, #112]	; (4518 <bt_init+0x528>)
    44a6:	6899      	ldr	r1, [r3, #8]
    44a8:	2201      	movs	r2, #1
    44aa:	4411      	add	r1, r2
    44ac:	f7fc f971 	bl	792 <memcpy>
	net_buf_unref(rsp);
    44b0:	980c      	ldr	r0, [sp, #48]	; 0x30
    44b2:	f014 ff19 	bl	192e8 <net_buf_unref>
    44b6:	e71c      	b.n	42f2 <bt_init+0x302>
    44b8:	02008890 	.word	0x02008890
    44bc:	20008000 	.word	0x20008000
    44c0:	20009d64 	.word	0x20009d64
    44c4:	00023dae 	.word	0x00023dae
    44c8:	00023672 	.word	0x00023672
    44cc:	00024006 	.word	0x00024006
    44d0:	000272d8 	.word	0x000272d8
    44d4:	0002391d 	.word	0x0002391d
    44d8:	20009cd8 	.word	0x20009cd8
    44dc:	20003124 	.word	0x20003124
    44e0:	00023654 	.word	0x00023654
    44e4:	00023aba 	.word	0x00023aba
    44e8:	02008810 	.word	0x02008810
    44ec:	00023951 	.word	0x00023951
    44f0:	000241a4 	.word	0x000241a4
    44f4:	000242cc 	.word	0x000242cc
    44f8:	00022c76 	.word	0x00022c76
    44fc:	00024198 	.word	0x00024198
    4500:	0002397a 	.word	0x0002397a
    4504:	000242bc 	.word	0x000242bc
    4508:	000239a2 	.word	0x000239a2
    450c:	000239df 	.word	0x000239df
    4510:	20009d37 	.word	0x20009d37
    4514:	00023a18 	.word	0x00023a18
    4518:	20009d36 	.word	0x20009d36
	    !bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_NONE)) {
    451c:	4b62      	ldr	r3, [pc, #392]	; (46a8 <bt_init+0x6b8>)
    451e:	6818      	ldr	r0, [r3, #0]
    4520:	889a      	ldrh	r2, [r3, #4]
    4522:	900a      	str	r0, [sp, #40]	; 0x28
    4524:	799b      	ldrb	r3, [r3, #6]
    4526:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
    452a:	a90a      	add	r1, sp, #40	; 0x28
    452c:	2207      	movs	r2, #7
    452e:	485f      	ldr	r0, [pc, #380]	; (46ac <bt_init+0x6bc>)
    4530:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    4534:	f7fc f900 	bl	738 <memcmp>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    4538:	2800      	cmp	r0, #0
    453a:	f43f aee6 	beq.w	430a <bt_init+0x31a>
	BT_INFO("Identity: %s", bt_addr_le_str(&bt_dev.id_addr));
    453e:	485b      	ldr	r0, [pc, #364]	; (46ac <bt_init+0x6bc>)
    4540:	f7fe fee6 	bl	3310 <bt_addr_le_str>
    4544:	4b5a      	ldr	r3, [pc, #360]	; (46b0 <bt_init+0x6c0>)
    4546:	4a5b      	ldr	r2, [pc, #364]	; (46b4 <bt_init+0x6c4>)
    4548:	495b      	ldr	r1, [pc, #364]	; (46b8 <bt_init+0x6c8>)
    454a:	9001      	str	r0, [sp, #4]
    454c:	9502      	str	r5, [sp, #8]
    454e:	9500      	str	r5, [sp, #0]
    4550:	485a      	ldr	r0, [pc, #360]	; (46bc <bt_init+0x6cc>)
    4552:	f7fd fe9f 	bl	2294 <printk>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    4556:	7bb4      	ldrb	r4, [r6, #14]
    4558:	4620      	mov	r0, r4
    455a:	f7fe ffd5 	bl	3508 <ver_str>
    455e:	9505      	str	r5, [sp, #20]
    4560:	8ab3      	ldrh	r3, [r6, #20]
    4562:	9304      	str	r3, [sp, #16]
    4564:	8a33      	ldrh	r3, [r6, #16]
    4566:	4a53      	ldr	r2, [pc, #332]	; (46b4 <bt_init+0x6c4>)
    4568:	4953      	ldr	r1, [pc, #332]	; (46b8 <bt_init+0x6c8>)
    456a:	9303      	str	r3, [sp, #12]
    456c:	9402      	str	r4, [sp, #8]
    456e:	4b50      	ldr	r3, [pc, #320]	; (46b0 <bt_init+0x6c0>)
    4570:	9001      	str	r0, [sp, #4]
    4572:	9500      	str	r5, [sp, #0]
    4574:	4852      	ldr	r0, [pc, #328]	; (46c0 <bt_init+0x6d0>)
    4576:	f7fd fe8d 	bl	2294 <printk>
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
    457a:	7bf4      	ldrb	r4, [r6, #15]
    457c:	4620      	mov	r0, r4
    457e:	f7fe ffc3 	bl	3508 <ver_str>
    4582:	9504      	str	r5, [sp, #16]
    4584:	8a73      	ldrh	r3, [r6, #18]
    4586:	9303      	str	r3, [sp, #12]
    4588:	9402      	str	r4, [sp, #8]
    458a:	9001      	str	r0, [sp, #4]
    458c:	4b48      	ldr	r3, [pc, #288]	; (46b0 <bt_init+0x6c0>)
    458e:	4a49      	ldr	r2, [pc, #292]	; (46b4 <bt_init+0x6c4>)
    4590:	4949      	ldr	r1, [pc, #292]	; (46b8 <bt_init+0x6c8>)
    4592:	9500      	str	r5, [sp, #0]
    4594:	484b      	ldr	r0, [pc, #300]	; (46c4 <bt_init+0x6d4>)
    4596:	f7fd fe7d 	bl	2294 <printk>
		err = bt_conn_init();
    459a:	f002 f9b5 	bl	6908 <bt_conn_init>
		if (err) {
    459e:	4604      	mov	r4, r0
    45a0:	2800      	cmp	r0, #0
    45a2:	f47f adb0 	bne.w	4106 <bt_init+0x116>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    45a6:	2102      	movs	r1, #2
    45a8:	4847      	ldr	r0, [pc, #284]	; (46c8 <bt_init+0x6d8>)
    45aa:	f7fe ffe6 	bl	357a <atomic_or>
	bt_le_scan_update(false);
    45ae:	4620      	mov	r0, r4
    45b0:	f7ff fcea 	bl	3f88 <bt_le_scan_update>
    45b4:	e5a7      	b.n	4106 <bt_init+0x116>
		ret = bt_storage->read(NULL, BT_STORAGE_ID_ADDR,
    45b6:	2100      	movs	r1, #0
    45b8:	681c      	ldr	r4, [r3, #0]
    45ba:	4a3c      	ldr	r2, [pc, #240]	; (46ac <bt_init+0x6bc>)
    45bc:	2307      	movs	r3, #7
    45be:	4608      	mov	r0, r1
    45c0:	47a0      	blx	r4
		if (ret == sizeof(bt_dev.id_addr)) {
    45c2:	2807      	cmp	r0, #7
    45c4:	f47f aea6 	bne.w	4314 <bt_init+0x324>
	if (bt_dev.id_addr.type != BT_ADDR_LE_RANDOM ||
    45c8:	7833      	ldrb	r3, [r6, #0]
    45ca:	2b01      	cmp	r3, #1
    45cc:	d104      	bne.n	45d8 <bt_init+0x5e8>
    45ce:	79b3      	ldrb	r3, [r6, #6]
    45d0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    45d4:	2bc0      	cmp	r3, #192	; 0xc0
    45d6:	d05b      	beq.n	4690 <bt_init+0x6a0>
		BT_ERR("Only static random address supported as identity");
    45d8:	9501      	str	r5, [sp, #4]
    45da:	9500      	str	r5, [sp, #0]
    45dc:	4b3b      	ldr	r3, [pc, #236]	; (46cc <bt_init+0x6dc>)
    45de:	4a3c      	ldr	r2, [pc, #240]	; (46d0 <bt_init+0x6e0>)
    45e0:	4935      	ldr	r1, [pc, #212]	; (46b8 <bt_init+0x6c8>)
    45e2:	483c      	ldr	r0, [pc, #240]	; (46d4 <bt_init+0x6e4>)
    45e4:	f7fd fe56 	bl	2294 <printk>
		return -EINVAL;
    45e8:	f06f 0415 	mvn.w	r4, #21
			BT_ERR("Unable to set identity address");
    45ec:	9501      	str	r5, [sp, #4]
    45ee:	9500      	str	r5, [sp, #0]
    45f0:	4b39      	ldr	r3, [pc, #228]	; (46d8 <bt_init+0x6e8>)
    45f2:	4a37      	ldr	r2, [pc, #220]	; (46d0 <bt_init+0x6e0>)
    45f4:	4930      	ldr	r1, [pc, #192]	; (46b8 <bt_init+0x6c8>)
    45f6:	4839      	ldr	r0, [pc, #228]	; (46dc <bt_init+0x6ec>)
    45f8:	f7fd fe4c 	bl	2294 <printk>
    45fc:	e583      	b.n	4106 <bt_init+0x116>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS,
    45fe:	aa09      	add	r2, sp, #36	; 0x24
    4600:	2100      	movs	r1, #0
    4602:	f64f 4009 	movw	r0, #64521	; 0xfc09
    4606:	f7ff f8df 	bl	37c8 <bt_hci_cmd_send_sync>
		if (err) {
    460a:	b140      	cbz	r0, 461e <bt_init+0x62e>
			BT_WARN("Failed to read static addresses");
    460c:	4b2f      	ldr	r3, [pc, #188]	; (46cc <bt_init+0x6dc>)
    460e:	4a34      	ldr	r2, [pc, #208]	; (46e0 <bt_init+0x6f0>)
    4610:	4929      	ldr	r1, [pc, #164]	; (46b8 <bt_init+0x6c8>)
    4612:	4834      	ldr	r0, [pc, #208]	; (46e4 <bt_init+0x6f4>)
    4614:	9501      	str	r5, [sp, #4]
    4616:	9500      	str	r5, [sp, #0]
		BT_WARN("Read Static Addresses command not available");
    4618:	f7fd fe3c 	bl	2294 <printk>
    461c:	e019      	b.n	4652 <bt_init+0x662>
		rp = (void *)rsp->data;
    461e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4620:	6899      	ldr	r1, [r3, #8]
		if (rp->num_addrs) {
    4622:	784b      	ldrb	r3, [r1, #1]
    4624:	b153      	cbz	r3, 463c <bt_init+0x64c>
			bt_dev.id_addr.type = BT_ADDR_LE_RANDOM;
    4626:	2301      	movs	r3, #1
	memcpy(dst, src, sizeof(*dst));
    4628:	2206      	movs	r2, #6
    462a:	3102      	adds	r1, #2
    462c:	482e      	ldr	r0, [pc, #184]	; (46e8 <bt_init+0x6f8>)
    462e:	7033      	strb	r3, [r6, #0]
    4630:	f7fc f8af 	bl	792 <memcpy>
			net_buf_unref(rsp);
    4634:	9809      	ldr	r0, [sp, #36]	; 0x24
    4636:	f014 fe57 	bl	192e8 <net_buf_unref>
    463a:	e7c5      	b.n	45c8 <bt_init+0x5d8>
		BT_WARN("No static addresses stored in controller");
    463c:	9501      	str	r5, [sp, #4]
    463e:	9500      	str	r5, [sp, #0]
    4640:	4b22      	ldr	r3, [pc, #136]	; (46cc <bt_init+0x6dc>)
    4642:	4a27      	ldr	r2, [pc, #156]	; (46e0 <bt_init+0x6f0>)
    4644:	491c      	ldr	r1, [pc, #112]	; (46b8 <bt_init+0x6c8>)
    4646:	4829      	ldr	r0, [pc, #164]	; (46ec <bt_init+0x6fc>)
    4648:	f7fd fe24 	bl	2294 <printk>
		net_buf_unref(rsp);
    464c:	9809      	ldr	r0, [sp, #36]	; 0x24
    464e:	f014 fe4b 	bl	192e8 <net_buf_unref>
	err = bt_addr_le_create_static(&bt_dev.id_addr);
    4652:	4816      	ldr	r0, [pc, #88]	; (46ac <bt_init+0x6bc>)
    4654:	f7ff fbf9 	bl	3e4a <bt_addr_le_create_static>
	if (err) {
    4658:	4604      	mov	r4, r0
    465a:	2800      	cmp	r0, #0
    465c:	d1c6      	bne.n	45ec <bt_init+0x5fc>
	if (bt_storage) {
    465e:	683b      	ldr	r3, [r7, #0]
    4660:	b17b      	cbz	r3, 4682 <bt_init+0x692>
		ret = bt_storage->write(NULL, BT_STORAGE_ID_ADDR,
    4662:	685f      	ldr	r7, [r3, #4]
    4664:	4a11      	ldr	r2, [pc, #68]	; (46ac <bt_init+0x6bc>)
    4666:	2307      	movs	r3, #7
    4668:	4601      	mov	r1, r0
    466a:	47b8      	blx	r7
		if (ret != sizeof(bt_dev.id_addr)) {
    466c:	2807      	cmp	r0, #7
    466e:	d0ab      	beq.n	45c8 <bt_init+0x5d8>
			BT_ERR("Unable to store static address");
    4670:	4b16      	ldr	r3, [pc, #88]	; (46cc <bt_init+0x6dc>)
    4672:	4a17      	ldr	r2, [pc, #92]	; (46d0 <bt_init+0x6e0>)
    4674:	4910      	ldr	r1, [pc, #64]	; (46b8 <bt_init+0x6c8>)
    4676:	481e      	ldr	r0, [pc, #120]	; (46f0 <bt_init+0x700>)
    4678:	9501      	str	r5, [sp, #4]
    467a:	9500      	str	r5, [sp, #0]
		BT_WARN("Using temporary static random address");
    467c:	f7fd fe0a 	bl	2294 <printk>
    4680:	e7a2      	b.n	45c8 <bt_init+0x5d8>
    4682:	9501      	str	r5, [sp, #4]
    4684:	9500      	str	r5, [sp, #0]
    4686:	4b11      	ldr	r3, [pc, #68]	; (46cc <bt_init+0x6dc>)
    4688:	4a15      	ldr	r2, [pc, #84]	; (46e0 <bt_init+0x6f0>)
    468a:	490b      	ldr	r1, [pc, #44]	; (46b8 <bt_init+0x6c8>)
    468c:	4819      	ldr	r0, [pc, #100]	; (46f4 <bt_init+0x704>)
    468e:	e7f5      	b.n	467c <bt_init+0x68c>
	err = set_random_address(&bt_dev.id_addr.a);
    4690:	4815      	ldr	r0, [pc, #84]	; (46e8 <bt_init+0x6f8>)
    4692:	f7ff f8d7 	bl	3844 <set_random_address>
	if (err) {
    4696:	4604      	mov	r4, r0
    4698:	2800      	cmp	r0, #0
    469a:	d1a7      	bne.n	45ec <bt_init+0x5fc>
    469c:	2104      	movs	r1, #4
    469e:	480a      	ldr	r0, [pc, #40]	; (46c8 <bt_init+0x6d8>)
    46a0:	f7fe ff6b 	bl	357a <atomic_or>
    46a4:	e74b      	b.n	453e <bt_init+0x54e>
    46a6:	bf00      	nop
    46a8:	00022980 	.word	0x00022980
    46ac:	20009cd8 	.word	0x20009cd8
    46b0:	00023664 	.word	0x00023664
    46b4:	00022c76 	.word	0x00022c76
    46b8:	000272d8 	.word	0x000272d8
    46bc:	00023b9c 	.word	0x00023b9c
    46c0:	00023bb9 	.word	0x00023bb9
    46c4:	00023c07 	.word	0x00023c07
    46c8:	20009d48 	.word	0x20009d48
    46cc:	00023654 	.word	0x00023654
    46d0:	00022d76 	.word	0x00022d76
    46d4:	00023b5b 	.word	0x00023b5b
    46d8:	0002367e 	.word	0x0002367e
    46dc:	00023c3e 	.word	0x00023c3e
    46e0:	00024006 	.word	0x00024006
    46e4:	00023a51 	.word	0x00023a51
    46e8:	20009cd9 	.word	0x20009cd9
    46ec:	00023a81 	.word	0x00023a81
    46f0:	00023af6 	.word	0x00023af6
    46f4:	00023b25 	.word	0x00023b25

000046f8 <init_work>:
{
    46f8:	b510      	push	{r4, lr}
	err = bt_init();
    46fa:	f7ff fc79 	bl	3ff0 <bt_init>
	if (ready_cb) {
    46fe:	4b03      	ldr	r3, [pc, #12]	; (470c <init_work+0x14>)
    4700:	681b      	ldr	r3, [r3, #0]
    4702:	b113      	cbz	r3, 470a <init_work+0x12>
}
    4704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    4708:	4718      	bx	r3
    470a:	bd10      	pop	{r4, pc}
    470c:	20000410 	.word	0x20000410

00004710 <check_pending_conn.part.27>:
static void check_pending_conn(const bt_addr_le_t *id_addr,
    4710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4714:	460d      	mov	r5, r1
	conn = bt_conn_lookup_state_le(id_addr, BT_CONN_CONNECT_SCAN);
    4716:	2101      	movs	r1, #1
    4718:	f001 febc 	bl	6494 <bt_conn_lookup_state_le>
	if (!conn) {
    471c:	4604      	mov	r4, r0
    471e:	2800      	cmp	r0, #0
    4720:	d068      	beq.n	47f4 <check_pending_conn.part.27+0xe4>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    4722:	2107      	movs	r1, #7
    4724:	4834      	ldr	r0, [pc, #208]	; (47f8 <check_pending_conn.part.27+0xe8>)
    4726:	f7fe ff39 	bl	359c <atomic_test_bit>
    472a:	2800      	cmp	r0, #0
    472c:	d14f      	bne.n	47ce <check_pending_conn.part.27+0xbe>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_ID_STATIC_RANDOM)) {
    472e:	2102      	movs	r1, #2
    4730:	4831      	ldr	r0, [pc, #196]	; (47f8 <check_pending_conn.part.27+0xe8>)
    4732:	f7fe ff33 	bl	359c <atomic_test_bit>
    4736:	b110      	cbz	r0, 473e <check_pending_conn.part.27+0x2e>
			set_random_address(&bt_dev.id_addr.a);
    4738:	4830      	ldr	r0, [pc, #192]	; (47fc <check_pending_conn.part.27+0xec>)
    473a:	f7ff f883 	bl	3844 <set_random_address>
		bt_addr_le_copy(&conn->le.init_addr, &bt_dev.id_addr);
    473e:	4930      	ldr	r1, [pc, #192]	; (4800 <check_pending_conn.part.27+0xf0>)
    4740:	f104 004f 	add.w	r0, r4, #79	; 0x4f
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    4744:	f104 0856 	add.w	r8, r4, #86	; 0x56
		bt_addr_le_copy(&conn->le.init_addr, &bt_dev.id_addr);
    4748:	f7fe ff14 	bl	3574 <bt_addr_le_copy>
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    474c:	4629      	mov	r1, r5
    474e:	4640      	mov	r0, r8
    4750:	f7fe ff10 	bl	3574 <bt_addr_le_copy>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    4754:	2119      	movs	r1, #25
    4756:	f242 000d 	movw	r0, #8205	; 0x200d
    475a:	f7ff f805 	bl	3768 <bt_hci_cmd_create>
	if (!buf) {
    475e:	4606      	mov	r6, r0
    4760:	b3d0      	cbz	r0, 47d8 <check_pending_conn.part.27+0xc8>
	cp = net_buf_add(buf, sizeof(*cp));
    4762:	2119      	movs	r1, #25
    4764:	3008      	adds	r0, #8
    4766:	f014 fe1d 	bl	193a4 <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
    476a:	2219      	movs	r2, #25
	cp = net_buf_add(buf, sizeof(*cp));
    476c:	4605      	mov	r5, r0
	memset(cp, 0, sizeof(*cp));
    476e:	2100      	movs	r1, #0
    4770:	f7fc f83b 	bl	7ea <memset>
	cp->scan_interval = sys_cpu_to_le16(BT_GAP_SCAN_FAST_INTERVAL);
    4774:	2700      	movs	r7, #0
    4776:	2360      	movs	r3, #96	; 0x60
    4778:	702b      	strb	r3, [r5, #0]
	cp->scan_window = cp->scan_interval;
    477a:	70ab      	strb	r3, [r5, #2]
	bt_addr_le_copy(&cp->peer_addr, &conn->le.resp_addr);
    477c:	4641      	mov	r1, r8
    477e:	1d68      	adds	r0, r5, #5
	cp->scan_interval = sys_cpu_to_le16(BT_GAP_SCAN_FAST_INTERVAL);
    4780:	706f      	strb	r7, [r5, #1]
	cp->scan_window = cp->scan_interval;
    4782:	70ef      	strb	r7, [r5, #3]
	bt_addr_le_copy(&cp->peer_addr, &conn->le.resp_addr);
    4784:	f7fe fef6 	bl	3574 <bt_addr_le_copy>
	cp->own_addr_type = conn->le.init_addr.type;
    4788:	f894 304f 	ldrb.w	r3, [r4, #79]	; 0x4f
    478c:	732b      	strb	r3, [r5, #12]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    478e:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
    4792:	f8a5 300d 	strh.w	r3, [r5, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    4796:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
    479a:	f8a5 300f 	strh.w	r3, [r5, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
    479e:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
    47a2:	f8a5 3011 	strh.w	r3, [r5, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    47a6:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    47aa:	f8a5 3013 	strh.w	r3, [r5, #19]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    47ae:	463a      	mov	r2, r7
    47b0:	4631      	mov	r1, r6
    47b2:	f242 000d 	movw	r0, #8205	; 0x200d
    47b6:	f7ff f807 	bl	37c8 <bt_hci_cmd_send_sync>
	if (hci_le_create_conn(conn)) {
    47ba:	b968      	cbnz	r0, 47d8 <check_pending_conn.part.27+0xc8>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    47bc:	4620      	mov	r0, r4
    47be:	2102      	movs	r1, #2
    47c0:	f001 fd40 	bl	6244 <bt_conn_set_state>
	bt_conn_unref(conn);
    47c4:	4620      	mov	r0, r4
}
    47c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_conn_unref(conn);
    47ca:	f001 be85 	b.w	64d8 <bt_conn_unref>
	    set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE)) {
    47ce:	2000      	movs	r0, #0
    47d0:	f7ff f8bc 	bl	394c <set_le_scan_enable>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    47d4:	2800      	cmp	r0, #0
    47d6:	d0aa      	beq.n	472e <check_pending_conn.part.27+0x1e>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    47d8:	231f      	movs	r3, #31
    47da:	72e3      	strb	r3, [r4, #11]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    47dc:	4620      	mov	r0, r4
    47de:	2100      	movs	r1, #0
    47e0:	f001 fd30 	bl	6244 <bt_conn_set_state>
	bt_conn_unref(conn);
    47e4:	4620      	mov	r0, r4
    47e6:	f001 fe77 	bl	64d8 <bt_conn_unref>
	bt_le_scan_update(false);
    47ea:	2000      	movs	r0, #0
}
    47ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_le_scan_update(false);
    47f0:	f7ff bbca 	b.w	3f88 <bt_le_scan_update>
    47f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    47f8:	20009d48 	.word	0x20009d48
    47fc:	20009cd9 	.word	0x20009cd9
    4800:	20009cd8 	.word	0x20009cd8

00004804 <hci_le_set_phy.isra.29>:
static int hci_le_set_phy(struct bt_conn *conn)
    4804:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    4806:	2107      	movs	r1, #7
static int hci_le_set_phy(struct bt_conn *conn)
    4808:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    480a:	f242 0032 	movw	r0, #8242	; 0x2032
    480e:	f7fe ffab 	bl	3768 <bt_hci_cmd_create>
	if (!buf) {
    4812:	4605      	mov	r5, r0
    4814:	b198      	cbz	r0, 483e <hci_le_set_phy.isra.29+0x3a>
	cp = net_buf_add(buf, sizeof(*cp));
    4816:	2107      	movs	r1, #7
    4818:	3008      	adds	r0, #8
    481a:	f014 fdc3 	bl	193a4 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    481e:	8823      	ldrh	r3, [r4, #0]
    4820:	8003      	strh	r3, [r0, #0]
	cp->all_phys = 0;
    4822:	2400      	movs	r4, #0
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    4824:	2302      	movs	r3, #2
	cp->all_phys = 0;
    4826:	7084      	strb	r4, [r0, #2]
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    4828:	70c3      	strb	r3, [r0, #3]
	cp->rx_phys = BT_HCI_LE_PHY_PREFER_2M;
    482a:	7103      	strb	r3, [r0, #4]
	cp->phy_opts = BT_HCI_LE_PHY_CODED_ANY;
    482c:	7144      	strb	r4, [r0, #5]
    482e:	7184      	strb	r4, [r0, #6]
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
    4830:	4629      	mov	r1, r5
    4832:	f242 0032 	movw	r0, #8242	; 0x2032
    4836:	f7ff fb1f 	bl	3e78 <bt_hci_cmd_send>
	return 0;
    483a:	4620      	mov	r0, r4
    483c:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    483e:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    4842:	bd38      	pop	{r3, r4, r5, pc}

00004844 <hci_le_set_data_len.isra.30>:
static int hci_le_set_data_len(struct bt_conn *conn)
    4844:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4846:	4607      	mov	r7, r0
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    4848:	aa01      	add	r2, sp, #4
    484a:	2100      	movs	r1, #0
    484c:	f242 002f 	movw	r0, #8239	; 0x202f
    4850:	f7fe ffba 	bl	37c8 <bt_hci_cmd_send_sync>
	if (err) {
    4854:	b9d8      	cbnz	r0, 488e <hci_le_set_data_len.isra.30+0x4a>
	rp = (void *)rsp->data;
    4856:	9801      	ldr	r0, [sp, #4]
    4858:	6883      	ldr	r3, [r0, #8]
	tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    485a:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	tx_time = sys_le16_to_cpu(rp->max_tx_time);
    485e:	f8b3 5003 	ldrh.w	r5, [r3, #3]
	net_buf_unref(rsp);
    4862:	f014 fd41 	bl	192e8 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
    4866:	2106      	movs	r1, #6
    4868:	f242 0022 	movw	r0, #8226	; 0x2022
    486c:	f7fe ff7c 	bl	3768 <bt_hci_cmd_create>
	if (!buf) {
    4870:	4604      	mov	r4, r0
    4872:	b170      	cbz	r0, 4892 <hci_le_set_data_len.isra.30+0x4e>
	cp = net_buf_add(buf, sizeof(*cp));
    4874:	2106      	movs	r1, #6
    4876:	3008      	adds	r0, #8
    4878:	f014 fd94 	bl	193a4 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    487c:	883b      	ldrh	r3, [r7, #0]
    487e:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
    4880:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
    4882:	8085      	strh	r5, [r0, #4]
	err = bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
    4884:	4621      	mov	r1, r4
    4886:	f242 0022 	movw	r0, #8226	; 0x2022
    488a:	f7ff faf5 	bl	3e78 <bt_hci_cmd_send>
}
    488e:	b003      	add	sp, #12
    4890:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
    4892:	f06f 0036 	mvn.w	r0, #54	; 0x36
    4896:	e7fa      	b.n	488e <hci_le_set_data_len.isra.30+0x4a>

00004898 <le_enh_conn_complete>:
{
    4898:	b5f0      	push	{r4, r5, r6, r7, lr}
	u16_t handle = sys_le16_to_cpu(evt->handle);
    489a:	f8b0 6001 	ldrh.w	r6, [r0, #1]
{
    489e:	b089      	sub	sp, #36	; 0x24
    48a0:	4605      	mov	r5, r0
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
    48a2:	210c      	movs	r1, #12
    48a4:	4867      	ldr	r0, [pc, #412]	; (4a44 <le_enh_conn_complete+0x1ac>)
	u16_t handle = sys_le16_to_cpu(evt->handle);
    48a6:	b2b7      	uxth	r7, r6
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
    48a8:	f7fe fe96 	bl	35d8 <atomic_test_and_clear_bit>
    48ac:	b118      	cbz	r0, 48b6 <le_enh_conn_complete+0x1e>
		bt_keys_foreach(BT_KEYS_IRK, update_pending_id);
    48ae:	4966      	ldr	r1, [pc, #408]	; (4a48 <le_enh_conn_complete+0x1b0>)
    48b0:	2002      	movs	r0, #2
    48b2:	f006 feff 	bl	b6b4 <bt_keys_foreach>
	if (evt->status) {
    48b6:	782b      	ldrb	r3, [r5, #0]
    48b8:	b17b      	cbz	r3, 48da <le_enh_conn_complete+0x42>
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT);
    48ba:	2102      	movs	r1, #2
    48bc:	2000      	movs	r0, #0
    48be:	f001 fde9 	bl	6494 <bt_conn_lookup_state_le>
		if (!conn) {
    48c2:	4604      	mov	r4, r0
    48c4:	b138      	cbz	r0, 48d6 <le_enh_conn_complete+0x3e>
		conn->err = evt->status;
    48c6:	782b      	ldrb	r3, [r5, #0]
    48c8:	72c3      	strb	r3, [r0, #11]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    48ca:	2100      	movs	r1, #0
    48cc:	f001 fcba 	bl	6244 <bt_conn_set_state>
		bt_conn_unref(conn);
    48d0:	4620      	mov	r0, r4
    48d2:	f001 fe01 	bl	64d8 <bt_conn_unref>
}
    48d6:	b009      	add	sp, #36	; 0x24
    48d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_addr_le_copy(&id_addr, &evt->peer_addr);
    48da:	1d2c      	adds	r4, r5, #4
    48dc:	4621      	mov	r1, r4
    48de:	a806      	add	r0, sp, #24
    48e0:	f7fe fe48 	bl	3574 <bt_addr_le_copy>
	if (id_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    48e4:	f89d 3018 	ldrb.w	r3, [sp, #24]
    48e8:	3b02      	subs	r3, #2
    48ea:	b2db      	uxtb	r3, r3
    48ec:	2b01      	cmp	r3, #1
    48ee:	d829      	bhi.n	4944 <le_enh_conn_complete+0xac>
    48f0:	2206      	movs	r2, #6
    48f2:	f105 0111 	add.w	r1, r5, #17
    48f6:	f10d 0011 	add.w	r0, sp, #17
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    48fa:	f88d 3018 	strb.w	r3, [sp, #24]
    48fe:	f7fb ff48 	bl	792 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    4902:	2301      	movs	r3, #1
    4904:	f88d 3010 	strb.w	r3, [sp, #16]
	conn = bt_conn_lookup_state_le(&id_addr, BT_CONN_CONNECT);
    4908:	2102      	movs	r1, #2
    490a:	a806      	add	r0, sp, #24
    490c:	f001 fdc2 	bl	6494 <bt_conn_lookup_state_le>
	if (evt->role == BT_CONN_ROLE_SLAVE) {
    4910:	78eb      	ldrb	r3, [r5, #3]
    4912:	2b01      	cmp	r3, #1
	conn = bt_conn_lookup_state_le(&id_addr, BT_CONN_CONNECT);
    4914:	4604      	mov	r4, r0
	if (evt->role == BT_CONN_ROLE_SLAVE) {
    4916:	d109      	bne.n	492c <le_enh_conn_complete+0x94>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    4918:	f06f 0120 	mvn.w	r1, #32
    491c:	4849      	ldr	r0, [pc, #292]	; (4a44 <le_enh_conn_complete+0x1ac>)
    491e:	f7fe fe4a 	bl	35b6 <atomic_and>
		if (!conn) {
    4922:	b9a4      	cbnz	r4, 494e <le_enh_conn_complete+0xb6>
			conn = bt_conn_add_le(&id_addr);
    4924:	a806      	add	r0, sp, #24
    4926:	f001 fc53 	bl	61d0 <bt_conn_add_le>
    492a:	4604      	mov	r4, r0
	if (!conn) {
    492c:	b97c      	cbnz	r4, 494e <le_enh_conn_complete+0xb6>
		BT_ERR("Unable to add new conn for handle %u", handle);
    492e:	4b47      	ldr	r3, [pc, #284]	; (4a4c <le_enh_conn_complete+0x1b4>)
    4930:	9302      	str	r3, [sp, #8]
    4932:	e88d 0088 	stmia.w	sp, {r3, r7}
    4936:	4a46      	ldr	r2, [pc, #280]	; (4a50 <le_enh_conn_complete+0x1b8>)
    4938:	4b46      	ldr	r3, [pc, #280]	; (4a54 <le_enh_conn_complete+0x1bc>)
    493a:	4947      	ldr	r1, [pc, #284]	; (4a58 <le_enh_conn_complete+0x1c0>)
    493c:	4847      	ldr	r0, [pc, #284]	; (4a5c <le_enh_conn_complete+0x1c4>)
    493e:	f7fd fca9 	bl	2294 <printk>
		return;
    4942:	e7c8      	b.n	48d6 <le_enh_conn_complete+0x3e>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    4944:	4621      	mov	r1, r4
    4946:	a804      	add	r0, sp, #16
    4948:	f7fe fe14 	bl	3574 <bt_addr_le_copy>
    494c:	e7dc      	b.n	4908 <le_enh_conn_complete+0x70>
	conn->handle   = handle;
    494e:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    4950:	a906      	add	r1, sp, #24
	conn->handle   = handle;
    4952:	f820 6b48 	strh.w	r6, [r0], #72
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    4956:	f7fe fe0d 	bl	3574 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    495a:	7e2a      	ldrb	r2, [r5, #24]
    495c:	7deb      	ldrb	r3, [r5, #23]
    495e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    4962:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    4966:	7eaa      	ldrb	r2, [r5, #26]
    4968:	7e6b      	ldrb	r3, [r5, #25]
    496a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    496e:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    4972:	7eeb      	ldrb	r3, [r5, #27]
    4974:	7f2a      	ldrb	r2, [r5, #28]
    4976:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    497a:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
	conn->role = evt->role;
    497e:	78ee      	ldrb	r6, [r5, #3]
    4980:	70e6      	strb	r6, [r4, #3]
	if (conn->role == BT_HCI_ROLE_SLAVE) {
    4982:	2e01      	cmp	r6, #1
    4984:	d11a      	bne.n	49bc <le_enh_conn_complete+0x124>
			bt_addr_le_copy(&conn->le.resp_addr, &bt_dev.id_addr);
    4986:	4f36      	ldr	r7, [pc, #216]	; (4a60 <le_enh_conn_complete+0x1c8>)
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
    4988:	a904      	add	r1, sp, #16
    498a:	f104 004f 	add.w	r0, r4, #79	; 0x4f
    498e:	f7fe fdf1 	bl	3574 <bt_addr_le_copy>
			bt_addr_le_copy(&conn->le.resp_addr, &bt_dev.id_addr);
    4992:	4639      	mov	r1, r7
    4994:	f104 0056 	add.w	r0, r4, #86	; 0x56
    4998:	f7fe fdec 	bl	3574 <bt_addr_le_copy>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    499c:	2106      	movs	r1, #6
    499e:	f107 0070 	add.w	r0, r7, #112	; 0x70
    49a2:	f7fe fdfb 	bl	359c <atomic_test_bit>
    49a6:	b148      	cbz	r0, 49bc <le_enh_conn_complete+0x124>
		    BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    49a8:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
    49ac:	2200      	movs	r2, #0
    49ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    49b2:	4313      	orrs	r3, r2
    49b4:	d002      	beq.n	49bc <le_enh_conn_complete+0x124>
			set_advertise_enable(true);
    49b6:	4630      	mov	r0, r6
    49b8:	f7fe fffc 	bl	39b4 <set_advertise_enable>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    49bc:	2103      	movs	r1, #3
    49be:	4620      	mov	r0, r4
    49c0:	f001 fc40 	bl	6244 <bt_conn_set_state>
	if (conn->state != BT_CONN_CONNECTED) {
    49c4:	7b23      	ldrb	r3, [r4, #12]
    49c6:	2b03      	cmp	r3, #3
    49c8:	d118      	bne.n	49fc <le_enh_conn_complete+0x164>
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    49ca:	78eb      	ldrb	r3, [r5, #3]
    49cc:	b123      	cbz	r3, 49d8 <le_enh_conn_complete+0x140>
	    BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features)) {
    49ce:	4b24      	ldr	r3, [pc, #144]	; (4a60 <le_enh_conn_complete+0x1c8>)
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    49d0:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    49d4:	0719      	lsls	r1, r3, #28
    49d6:	d518      	bpl.n	4a0a <le_enh_conn_complete+0x172>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    49d8:	2102      	movs	r1, #2
    49da:	f242 0016 	movw	r0, #8214	; 0x2016
    49de:	f7fe fec3 	bl	3768 <bt_hci_cmd_create>
	if (!buf) {
    49e2:	4605      	mov	r5, r0
    49e4:	b188      	cbz	r0, 4a0a <le_enh_conn_complete+0x172>
	cp = net_buf_add(buf, sizeof(*cp));
    49e6:	2102      	movs	r1, #2
    49e8:	3008      	adds	r0, #8
    49ea:	f014 fcdb 	bl	193a4 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    49ee:	8823      	ldrh	r3, [r4, #0]
    49f0:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    49f2:	4629      	mov	r1, r5
    49f4:	f242 0016 	movw	r0, #8214	; 0x2016
    49f8:	f7ff fa3e 	bl	3e78 <bt_hci_cmd_send>
	bt_conn_unref(conn);
    49fc:	4620      	mov	r0, r4
    49fe:	f001 fd6b 	bl	64d8 <bt_conn_unref>
	bt_le_scan_update(false);
    4a02:	2000      	movs	r0, #0
    4a04:	f7ff fac0 	bl	3f88 <bt_le_scan_update>
    4a08:	e765      	b.n	48d6 <le_enh_conn_complete+0x3e>
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features)) {
    4a0a:	4d15      	ldr	r5, [pc, #84]	; (4a60 <le_enh_conn_complete+0x1c8>)
    4a0c:	f895 2079 	ldrb.w	r2, [r5, #121]	; 0x79
    4a10:	07d2      	lsls	r2, r2, #31
    4a12:	d508      	bpl.n	4a26 <le_enh_conn_complete+0x18e>
		err = hci_le_set_phy(conn);
    4a14:	4620      	mov	r0, r4
    4a16:	f7ff fef5 	bl	4804 <hci_le_set_phy.isra.29>
		if (!err) {
    4a1a:	b920      	cbnz	r0, 4a26 <le_enh_conn_complete+0x18e>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    4a1c:	2180      	movs	r1, #128	; 0x80
    4a1e:	1d20      	adds	r0, r4, #4
    4a20:	f7fe fdab 	bl	357a <atomic_or>
    4a24:	e7ea      	b.n	49fc <le_enh_conn_complete+0x164>
	if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    4a26:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    4a2a:	069b      	lsls	r3, r3, #26
    4a2c:	d506      	bpl.n	4a3c <le_enh_conn_complete+0x1a4>
		err = hci_le_set_data_len(conn);
    4a2e:	4620      	mov	r0, r4
    4a30:	f7ff ff08 	bl	4844 <hci_le_set_data_len.isra.30>
		if (!err) {
    4a34:	b910      	cbnz	r0, 4a3c <le_enh_conn_complete+0x1a4>
    4a36:	f44f 7180 	mov.w	r1, #256	; 0x100
    4a3a:	e7f0      	b.n	4a1e <le_enh_conn_complete+0x186>
	update_conn_param(conn);
    4a3c:	4620      	mov	r0, r4
    4a3e:	f7fe fddb 	bl	35f8 <update_conn_param>
    4a42:	e7db      	b.n	49fc <le_enh_conn_complete+0x164>
    4a44:	20009d48 	.word	0x20009d48
    4a48:	00003e19 	.word	0x00003e19
    4a4c:	00023dae 	.word	0x00023dae
    4a50:	00022d76 	.word	0x00022d76
    4a54:	000234ef 	.word	0x000234ef
    4a58:	000272d8 	.word	0x000272d8
    4a5c:	00024140 	.word	0x00024140
    4a60:	20009cd8 	.word	0x20009cd8

00004a64 <le_conn_param_neg_reply>:
{
    4a64:	b570      	push	{r4, r5, r6, lr}
    4a66:	4606      	mov	r6, r0
    4a68:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    4a6a:	f242 0021 	movw	r0, #8225	; 0x2021
    4a6e:	2103      	movs	r1, #3
    4a70:	f7fe fe7a 	bl	3768 <bt_hci_cmd_create>
	if (!buf) {
    4a74:	4604      	mov	r4, r0
    4a76:	b160      	cbz	r0, 4a92 <le_conn_param_neg_reply+0x2e>
	cp = net_buf_add(buf, sizeof(*cp));
    4a78:	2103      	movs	r1, #3
    4a7a:	3008      	adds	r0, #8
    4a7c:	f014 fc92 	bl	193a4 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    4a80:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    4a82:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    4a84:	4621      	mov	r1, r4
    4a86:	f242 0021 	movw	r0, #8225	; 0x2021
}
    4a8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    4a8e:	f7ff b9f3 	b.w	3e78 <bt_hci_cmd_send>
}
    4a92:	f06f 0036 	mvn.w	r0, #54	; 0x36
    4a96:	bd70      	pop	{r4, r5, r6, pc}

00004a98 <hci_tx_thread>:
{
    4a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    4a9c:	f8df a148 	ldr.w	sl, [pc, #328]	; 4be8 <hci_tx_thread+0x150>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    4aa0:	4d4f      	ldr	r5, [pc, #316]	; (4be0 <hci_tx_thread+0x148>)
{
    4aa2:	b085      	sub	sp, #20
		events[0].state = K_POLL_STATE_NOT_READY;
    4aa4:	f89a 300d 	ldrb.w	r3, [sl, #13]
			ev_count += bt_conn_prepare_events(&events[1]);
    4aa8:	484e      	ldr	r0, [pc, #312]	; (4be4 <hci_tx_thread+0x14c>)
		events[0].state = K_POLL_STATE_NOT_READY;
    4aaa:	f36f 1307 	bfc	r3, #4, #4
    4aae:	f88a 300d 	strb.w	r3, [sl, #13]
			ev_count += bt_conn_prepare_events(&events[1]);
    4ab2:	f001 fb45 	bl	6140 <bt_conn_prepare_events>
    4ab6:	f100 0901 	add.w	r9, r0, #1
		err = k_poll(events, ev_count, K_FOREVER);
    4aba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4abe:	4649      	mov	r1, r9
    4ac0:	4849      	ldr	r0, [pc, #292]	; (4be8 <hci_tx_thread+0x150>)
    4ac2:	f01d fde7 	bl	22694 <k_poll>
		BT_ASSERT(err == 0);
    4ac6:	b948      	cbnz	r0, 4adc <hci_tx_thread+0x44>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    4ac8:	4c48      	ldr	r4, [pc, #288]	; (4bec <hci_tx_thread+0x154>)
    4aca:	4e47      	ldr	r6, [pc, #284]	; (4be8 <hci_tx_thread+0x150>)
    4acc:	f104 0bd4 	add.w	fp, r4, #212	; 0xd4
	for (; count; ev++, count--) {
    4ad0:	f1b9 0f00 	cmp.w	r9, #0
    4ad4:	d111      	bne.n	4afa <hci_tx_thread+0x62>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    4ad6:	f01c ffed 	bl	21ab4 <_impl_k_yield>
    4ada:	e7e3      	b.n	4aa4 <hci_tx_thread+0xc>
		BT_ASSERT(err == 0);
    4adc:	4b40      	ldr	r3, [pc, #256]	; (4be0 <hci_tx_thread+0x148>)
    4ade:	9301      	str	r3, [sp, #4]
    4ae0:	9300      	str	r3, [sp, #0]
    4ae2:	4a43      	ldr	r2, [pc, #268]	; (4bf0 <hci_tx_thread+0x158>)
    4ae4:	4b43      	ldr	r3, [pc, #268]	; (4bf4 <hci_tx_thread+0x15c>)
    4ae6:	4944      	ldr	r1, [pc, #272]	; (4bf8 <hci_tx_thread+0x160>)
    4ae8:	4844      	ldr	r0, [pc, #272]	; (4bfc <hci_tx_thread+0x164>)
	BT_ASSERT(buf);
    4aea:	f7fd fbd3 	bl	2294 <printk>
    4aee:	4040      	eors	r0, r0
    4af0:	f380 8811 	msr	BASEPRI, r0
    4af4:	f04f 0004 	mov.w	r0, #4
    4af8:	df02      	svc	2
		switch (ev->state) {
    4afa:	7b73      	ldrb	r3, [r6, #13]
    4afc:	091b      	lsrs	r3, r3, #4
    4afe:	2b01      	cmp	r3, #1
    4b00:	d952      	bls.n	4ba8 <hci_tx_thread+0x110>
    4b02:	2b04      	cmp	r3, #4
    4b04:	d162      	bne.n	4bcc <hci_tx_thread+0x134>
			if (ev->tag == BT_EVENT_CMD_TX) {
    4b06:	7b37      	ldrb	r7, [r6, #12]
    4b08:	2f00      	cmp	r7, #0
    4b0a:	d151      	bne.n	4bb0 <hci_tx_thread+0x118>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    4b0c:	4639      	mov	r1, r7
    4b0e:	4658      	mov	r0, fp
    4b10:	f014 fbc0 	bl	19294 <net_buf_get>
	BT_ASSERT(buf);
    4b14:	4680      	mov	r8, r0
    4b16:	b938      	cbnz	r0, 4b28 <hci_tx_thread+0x90>
    4b18:	4b31      	ldr	r3, [pc, #196]	; (4be0 <hci_tx_thread+0x148>)
    4b1a:	9301      	str	r3, [sp, #4]
    4b1c:	9300      	str	r3, [sp, #0]
    4b1e:	4a34      	ldr	r2, [pc, #208]	; (4bf0 <hci_tx_thread+0x158>)
    4b20:	4b37      	ldr	r3, [pc, #220]	; (4c00 <hci_tx_thread+0x168>)
    4b22:	4935      	ldr	r1, [pc, #212]	; (4bf8 <hci_tx_thread+0x160>)
    4b24:	4837      	ldr	r0, [pc, #220]	; (4c04 <hci_tx_thread+0x16c>)
    4b26:	e7e0      	b.n	4aea <hci_tx_thread+0x52>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    4b28:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    4b2c:	4836      	ldr	r0, [pc, #216]	; (4c08 <hci_tx_thread+0x170>)
    4b2e:	f01d f89d 	bl	21c6c <_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    4b32:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
    4b36:	b16b      	cbz	r3, 4b54 <hci_tx_thread+0xbc>
		BT_ERR("Uncleared pending sent_cmd");
    4b38:	4b31      	ldr	r3, [pc, #196]	; (4c00 <hci_tx_thread+0x168>)
    4b3a:	4a2d      	ldr	r2, [pc, #180]	; (4bf0 <hci_tx_thread+0x158>)
    4b3c:	492e      	ldr	r1, [pc, #184]	; (4bf8 <hci_tx_thread+0x160>)
    4b3e:	9501      	str	r5, [sp, #4]
    4b40:	9500      	str	r5, [sp, #0]
    4b42:	4832      	ldr	r0, [pc, #200]	; (4c0c <hci_tx_thread+0x174>)
    4b44:	f7fd fba6 	bl	2294 <printk>
		net_buf_unref(bt_dev.sent_cmd);
    4b48:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
    4b4c:	f014 fbcc 	bl	192e8 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    4b50:	f8c4 70c0 	str.w	r7, [r4, #192]	; 0xc0
	bt_dev.sent_cmd = net_buf_ref(buf);
    4b54:	4640      	mov	r0, r8
    4b56:	f014 fbf5 	bl	19344 <net_buf_ref>
    4b5a:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	err = bt_send(buf);
    4b5e:	4640      	mov	r0, r8
    4b60:	f7ff f982 	bl	3e68 <bt_send>
	if (err) {
    4b64:	b300      	cbz	r0, 4ba8 <hci_tx_thread+0x110>
		BT_ERR("Unable to send to driver (err %d)", err);
    4b66:	4b26      	ldr	r3, [pc, #152]	; (4c00 <hci_tx_thread+0x168>)
    4b68:	4a21      	ldr	r2, [pc, #132]	; (4bf0 <hci_tx_thread+0x158>)
    4b6a:	4923      	ldr	r1, [pc, #140]	; (4bf8 <hci_tx_thread+0x160>)
    4b6c:	9001      	str	r0, [sp, #4]
    4b6e:	9502      	str	r5, [sp, #8]
    4b70:	9500      	str	r5, [sp, #0]
    4b72:	4827      	ldr	r0, [pc, #156]	; (4c10 <hci_tx_thread+0x178>)
    4b74:	f7fd fb8e 	bl	2294 <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    4b78:	4823      	ldr	r0, [pc, #140]	; (4c08 <hci_tx_thread+0x170>)
    4b7a:	f01d f817 	bl	21bac <_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED,
    4b7e:	4640      	mov	r0, r8
    4b80:	f014 faf4 	bl	1916c <net_buf_id>
    4b84:	4b23      	ldr	r3, [pc, #140]	; (4c14 <hci_tx_thread+0x17c>)
    4b86:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    4b8a:	2200      	movs	r2, #0
    4b8c:	211f      	movs	r1, #31
    4b8e:	8840      	ldrh	r0, [r0, #2]
    4b90:	f7fe fd76 	bl	3680 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    4b94:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
    4b98:	f014 fba6 	bl	192e8 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    4b9c:	2300      	movs	r3, #0
		net_buf_unref(buf);
    4b9e:	4640      	mov	r0, r8
		bt_dev.sent_cmd = NULL;
    4ba0:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
		net_buf_unref(buf);
    4ba4:	f014 fba0 	bl	192e8 <net_buf_unref>
	for (; count; ev++, count--) {
    4ba8:	3614      	adds	r6, #20
    4baa:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    4bae:	e78f      	b.n	4ad0 <hci_tx_thread+0x38>
				if (ev->tag == BT_EVENT_CONN_TX_NOTIFY) {
    4bb0:	2f01      	cmp	r7, #1
    4bb2:	d104      	bne.n	4bbe <hci_tx_thread+0x126>
					conn = CONTAINER_OF(ev->fifo,
    4bb4:	6930      	ldr	r0, [r6, #16]
					bt_conn_notify_tx(conn);
    4bb6:	381c      	subs	r0, #28
    4bb8:	f001 f9ee 	bl	5f98 <bt_conn_notify_tx>
    4bbc:	e7f4      	b.n	4ba8 <hci_tx_thread+0x110>
				} else if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    4bbe:	2f02      	cmp	r7, #2
    4bc0:	d1f2      	bne.n	4ba8 <hci_tx_thread+0x110>
					conn = CONTAINER_OF(ev->fifo,
    4bc2:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
    4bc4:	382c      	subs	r0, #44	; 0x2c
    4bc6:	f001 fe23 	bl	6810 <bt_conn_process_tx>
    4bca:	e7ed      	b.n	4ba8 <hci_tx_thread+0x110>
		switch (ev->state) {
    4bcc:	9301      	str	r3, [sp, #4]
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    4bce:	9502      	str	r5, [sp, #8]
    4bd0:	9500      	str	r5, [sp, #0]
    4bd2:	4b11      	ldr	r3, [pc, #68]	; (4c18 <hci_tx_thread+0x180>)
    4bd4:	4a11      	ldr	r2, [pc, #68]	; (4c1c <hci_tx_thread+0x184>)
    4bd6:	4908      	ldr	r1, [pc, #32]	; (4bf8 <hci_tx_thread+0x160>)
    4bd8:	4811      	ldr	r0, [pc, #68]	; (4c20 <hci_tx_thread+0x188>)
    4bda:	f7fd fb5b 	bl	2294 <printk>
    4bde:	e7e3      	b.n	4ba8 <hci_tx_thread+0x110>
    4be0:	00023dae 	.word	0x00023dae
    4be4:	20009dd4 	.word	0x20009dd4
    4be8:	20009dc0 	.word	0x20009dc0
    4bec:	20009cd8 	.word	0x20009cd8
    4bf0:	00022d76 	.word	0x00022d76
    4bf4:	0002363e 	.word	0x0002363e
    4bf8:	000272d8 	.word	0x000272d8
    4bfc:	00024095 	.word	0x00024095
    4c00:	00023626 	.word	0x00023626
    4c04:	000240bf 	.word	0x000240bf
    4c08:	20009d80 	.word	0x20009d80
    4c0c:	000240e4 	.word	0x000240e4
    4c10:	0002370a 	.word	0x0002370a
    4c14:	200003b8 	.word	0x200003b8
    4c18:	0002362f 	.word	0x0002362f
    4c1c:	00024006 	.word	0x00024006
    4c20:	0002410f 	.word	0x0002410f

00004c24 <bt_recv>:
{
    4c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	 * pointer to an enum causes issues on qemu_x86 because the true
	 * size is 8-bit, but the enum is 32-bit on qemu_x86. So we put in
	 * a temporary cast to 8-bit to ensure only 8 bits are read from
	 * the pointer.
	 */
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    4c28:	7d03      	ldrb	r3, [r0, #20]
	switch (bt_buf_get_type(buf)) {
    4c2a:	2b01      	cmp	r3, #1
{
    4c2c:	b095      	sub	sp, #84	; 0x54
    4c2e:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    4c30:	d040      	beq.n	4cb4 <bt_recv+0x90>
    4c32:	2b03      	cmp	r3, #3
    4c34:	f040 8434 	bne.w	54a0 <bt_recv+0x87c>
	struct bt_hci_acl_hdr *hdr = (void *)buf->data;
    4c38:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(hdr->handle);
    4c3a:	881e      	ldrh	r6, [r3, #0]
	u16_t handle, len = sys_le16_to_cpu(hdr->len);
    4c3c:	885d      	ldrh	r5, [r3, #2]
	acl(buf)->handle = bt_acl_handle(handle);
    4c3e:	f3c6 030b 	ubfx	r3, r6, #0, #12
    4c42:	82c3      	strh	r3, [r0, #22]
	acl(buf)->id = BT_CONN_ID_INVALID;
    4c44:	23ff      	movs	r3, #255	; 0xff
    4c46:	7543      	strb	r3, [r0, #21]
	net_buf_pull(buf, sizeof(*hdr));
    4c48:	2104      	movs	r1, #4
    4c4a:	3008      	adds	r0, #8
    4c4c:	f014 fbfa 	bl	19444 <net_buf_simple_pull>
	if (buf->len != len) {
    4c50:	89a2      	ldrh	r2, [r4, #12]
    4c52:	4295      	cmp	r5, r2
    4c54:	d00e      	beq.n	4c74 <bt_recv+0x50>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    4c56:	4ba2      	ldr	r3, [pc, #648]	; (4ee0 <bt_recv+0x2bc>)
    4c58:	9303      	str	r3, [sp, #12]
    4c5a:	9201      	str	r2, [sp, #4]
    4c5c:	9300      	str	r3, [sp, #0]
    4c5e:	9502      	str	r5, [sp, #8]
    4c60:	4ba0      	ldr	r3, [pc, #640]	; (4ee4 <bt_recv+0x2c0>)
    4c62:	4aa1      	ldr	r2, [pc, #644]	; (4ee8 <bt_recv+0x2c4>)
    4c64:	49a1      	ldr	r1, [pc, #644]	; (4eec <bt_recv+0x2c8>)
    4c66:	48a2      	ldr	r0, [pc, #648]	; (4ef0 <bt_recv+0x2cc>)
    4c68:	f7fd fb14 	bl	2294 <printk>
	net_buf_unref(buf);
    4c6c:	4620      	mov	r0, r4
    4c6e:	f014 fb3b 	bl	192e8 <net_buf_unref>
    4c72:	e01b      	b.n	4cac <bt_recv+0x88>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    4c74:	8ae0      	ldrh	r0, [r4, #22]
    4c76:	f001 fbc1 	bl	63fc <bt_conn_lookup_handle>
	if (!conn) {
    4c7a:	4605      	mov	r5, r0
    4c7c:	b958      	cbnz	r0, 4c96 <bt_recv+0x72>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    4c7e:	4b98      	ldr	r3, [pc, #608]	; (4ee0 <bt_recv+0x2bc>)
    4c80:	8ae2      	ldrh	r2, [r4, #22]
    4c82:	9302      	str	r3, [sp, #8]
    4c84:	9201      	str	r2, [sp, #4]
    4c86:	9300      	str	r3, [sp, #0]
    4c88:	4a97      	ldr	r2, [pc, #604]	; (4ee8 <bt_recv+0x2c4>)
    4c8a:	4b96      	ldr	r3, [pc, #600]	; (4ee4 <bt_recv+0x2c0>)
    4c8c:	4997      	ldr	r1, [pc, #604]	; (4eec <bt_recv+0x2c8>)
    4c8e:	4899      	ldr	r0, [pc, #612]	; (4ef4 <bt_recv+0x2d0>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    4c90:	f7fd fb00 	bl	2294 <printk>
    4c94:	e7ea      	b.n	4c6c <bt_recv+0x48>
	acl(buf)->id = bt_conn_get_id(conn);
    4c96:	f001 fe2b 	bl	68f0 <bt_conn_get_id>
	bt_conn_recv(conn, buf, flags);
    4c9a:	0b32      	lsrs	r2, r6, #12
	acl(buf)->id = bt_conn_get_id(conn);
    4c9c:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    4c9e:	4621      	mov	r1, r4
    4ca0:	4628      	mov	r0, r5
    4ca2:	f001 f8b9 	bl	5e18 <bt_conn_recv>
	bt_conn_unref(conn);
    4ca6:	4628      	mov	r0, r5
    4ca8:	f001 fc16 	bl	64d8 <bt_conn_unref>
		return 0;
    4cac:	2000      	movs	r0, #0
}
    4cae:	b015      	add	sp, #84	; 0x54
    4cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    4cb4:	6886      	ldr	r6, [r0, #8]
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    4cb6:	7832      	ldrb	r2, [r6, #0]
    4cb8:	2a13      	cmp	r2, #19
    4cba:	f200 8402 	bhi.w	54c2 <bt_recv+0x89e>
    4cbe:	4093      	lsls	r3, r2
    4cc0:	f413 2f0c 	tst.w	r3, #573440	; 0x8c000
    4cc4:	f000 83fd 	beq.w	54c2 <bt_recv+0x89e>
    4cc8:	4b85      	ldr	r3, [pc, #532]	; (4ee0 <bt_recv+0x2bc>)
    4cca:	9301      	str	r3, [sp, #4]
    4ccc:	9300      	str	r3, [sp, #0]
    4cce:	4a86      	ldr	r2, [pc, #536]	; (4ee8 <bt_recv+0x2c4>)
    4cd0:	4b89      	ldr	r3, [pc, #548]	; (4ef8 <bt_recv+0x2d4>)
    4cd2:	4986      	ldr	r1, [pc, #536]	; (4eec <bt_recv+0x2c8>)
    4cd4:	4889      	ldr	r0, [pc, #548]	; (4efc <bt_recv+0x2d8>)
    4cd6:	f7fd fadd 	bl	2294 <printk>
    4cda:	4040      	eors	r0, r0
    4cdc:	f380 8811 	msr	BASEPRI, r0
    4ce0:	f04f 0004 	mov.w	r0, #4
    4ce4:	df02      	svc	2
    4ce6:	68a7      	ldr	r7, [r4, #8]
	if (evt->status) {
    4ce8:	783e      	ldrb	r6, [r7, #0]
    4cea:	2e00      	cmp	r6, #0
    4cec:	d1be      	bne.n	4c6c <bt_recv+0x48>
	u16_t handle = sys_le16_to_cpu(evt->handle);
    4cee:	f8b7 8001 	ldrh.w	r8, [r7, #1]
	conn = bt_conn_lookup_handle(handle);
    4cf2:	4640      	mov	r0, r8
    4cf4:	f001 fb82 	bl	63fc <bt_conn_lookup_handle>
	if (!conn) {
    4cf8:	4605      	mov	r5, r0
    4cfa:	b9c8      	cbnz	r0, 4d30 <bt_recv+0x10c>
		BT_ERR("Unable to look up conn with handle %u", handle);
    4cfc:	4b78      	ldr	r3, [pc, #480]	; (4ee0 <bt_recv+0x2bc>)
    4cfe:	9302      	str	r3, [sp, #8]
    4d00:	e88d 0108 	stmia.w	sp, {r3, r8}
    4d04:	4a78      	ldr	r2, [pc, #480]	; (4ee8 <bt_recv+0x2c4>)
    4d06:	4b7e      	ldr	r3, [pc, #504]	; (4f00 <bt_recv+0x2dc>)
    4d08:	4978      	ldr	r1, [pc, #480]	; (4eec <bt_recv+0x2c8>)
    4d0a:	487e      	ldr	r0, [pc, #504]	; (4f04 <bt_recv+0x2e0>)
    4d0c:	f7fd fac2 	bl	2294 <printk>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    4d10:	2106      	movs	r1, #6
    4d12:	487d      	ldr	r0, [pc, #500]	; (4f08 <bt_recv+0x2e4>)
    4d14:	f7fe fc42 	bl	359c <atomic_test_bit>
    4d18:	2800      	cmp	r0, #0
    4d1a:	d0a7      	beq.n	4c6c <bt_recv+0x48>
	    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    4d1c:	2105      	movs	r1, #5
    4d1e:	487a      	ldr	r0, [pc, #488]	; (4f08 <bt_recv+0x2e4>)
    4d20:	f7fe fc3c 	bl	359c <atomic_test_bit>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    4d24:	2800      	cmp	r0, #0
    4d26:	d1a1      	bne.n	4c6c <bt_recv+0x48>
		set_advertise_enable(true);
    4d28:	2001      	movs	r0, #1
    4d2a:	f7fe fe43 	bl	39b4 <set_advertise_enable>
    4d2e:	e79d      	b.n	4c6c <bt_recv+0x48>
	conn->err = evt->reason;
    4d30:	78fb      	ldrb	r3, [r7, #3]
    4d32:	72c3      	strb	r3, [r0, #11]
	k_call_stacks_analyze();
    4d34:	f01c faa2 	bl	2127c <k_call_stacks_analyze>
			break;
		}
	}
#else
	for (i = 0; i < size; i++) {
		if ((unsigned char)stack[i] == 0xaa) {
    4d38:	4a74      	ldr	r2, [pc, #464]	; (4f0c <bt_recv+0x2e8>)
	size_t unused = 0;
    4d3a:	4633      	mov	r3, r6
		if ((unsigned char)stack[i] == 0xaa) {
    4d3c:	5c99      	ldrb	r1, [r3, r2]
    4d3e:	29aa      	cmp	r1, #170	; 0xaa
    4d40:	d103      	bne.n	4d4a <bt_recv+0x126>
			unused++;
    4d42:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
    4d44:	f5b3 7f6b 	cmp.w	r3, #940	; 0x3ac
    4d48:	d1f8      	bne.n	4d3c <bt_recv+0x118>
	unsigned int pcnt, unused = 0;

	unused = stack_unused_space_get(stack, size);

	/* Calculate the real size reserved for the stack */
	pcnt = ((size - unused) * 100) / size;
    4d4a:	f5c3 706b 	rsb	r0, r3, #940	; 0x3ac
    4d4e:	f44f 726b 	mov.w	r2, #940	; 0x3ac
    4d52:	2164      	movs	r1, #100	; 0x64

	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
    4d54:	e88d 0005 	stmia.w	sp, {r0, r2}
	pcnt = ((size - unused) * 100) / size;
    4d58:	4341      	muls	r1, r0
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
    4d5a:	486d      	ldr	r0, [pc, #436]	; (4f10 <bt_recv+0x2ec>)
	pcnt = ((size - unused) * 100) / size;
    4d5c:	fbb1 f1f2 	udiv	r1, r1, r2
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
    4d60:	9102      	str	r1, [sp, #8]
    4d62:	496c      	ldr	r1, [pc, #432]	; (4f14 <bt_recv+0x2f0>)
    4d64:	f7fd fa96 	bl	2294 <printk>
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    4d68:	2100      	movs	r1, #0
    4d6a:	4628      	mov	r0, r5
    4d6c:	f001 fa6a 	bl	6244 <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
    4d70:	78ae      	ldrb	r6, [r5, #2]
	conn->handle = 0;
    4d72:	2300      	movs	r3, #0
    4d74:	802b      	strh	r3, [r5, #0]
	if (conn->type != BT_CONN_TYPE_LE) {
    4d76:	b10e      	cbz	r6, 4d7c <bt_recv+0x158>
	bt_conn_unref(conn);
    4d78:	4628      	mov	r0, r5
    4d7a:	e15c      	b.n	5036 <bt_recv+0x412>
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    4d7c:	4631      	mov	r1, r6
    4d7e:	1d28      	adds	r0, r5, #4
    4d80:	f7fe fc0c 	bl	359c <atomic_test_bit>
    4d84:	b130      	cbz	r0, 4d94 <bt_recv+0x170>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    4d86:	4628      	mov	r0, r5
    4d88:	2101      	movs	r1, #1
    4d8a:	f001 fa5b 	bl	6244 <bt_conn_set_state>
		bt_le_scan_update(false);
    4d8e:	4630      	mov	r0, r6
    4d90:	f7ff f8fa 	bl	3f88 <bt_le_scan_update>
	bt_conn_unref(conn);
    4d94:	4628      	mov	r0, r5
    4d96:	f001 fb9f 	bl	64d8 <bt_conn_unref>
    4d9a:	e7b9      	b.n	4d10 <bt_recv+0xec>
    4d9c:	68a6      	ldr	r6, [r4, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    4d9e:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    4da2:	4638      	mov	r0, r7
    4da4:	f001 fb2a 	bl	63fc <bt_conn_lookup_handle>
	if (!conn) {
    4da8:	4605      	mov	r5, r0
    4daa:	b940      	cbnz	r0, 4dbe <bt_recv+0x19a>
		BT_ERR("Unable to look up conn with handle %u", handle);
    4dac:	4b4c      	ldr	r3, [pc, #304]	; (4ee0 <bt_recv+0x2bc>)
    4dae:	9302      	str	r3, [sp, #8]
    4db0:	e88d 0088 	stmia.w	sp, {r3, r7}
    4db4:	4b58      	ldr	r3, [pc, #352]	; (4f18 <bt_recv+0x2f4>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    4db6:	4a4c      	ldr	r2, [pc, #304]	; (4ee8 <bt_recv+0x2c4>)
    4db8:	494c      	ldr	r1, [pc, #304]	; (4eec <bt_recv+0x2c8>)
    4dba:	4852      	ldr	r0, [pc, #328]	; (4f04 <bt_recv+0x2e0>)
    4dbc:	e768      	b.n	4c90 <bt_recv+0x6c>
	if (evt->status) {
    4dbe:	7833      	ldrb	r3, [r6, #0]
    4dc0:	7882      	ldrb	r2, [r0, #2]
    4dc2:	b123      	cbz	r3, 4dce <bt_recv+0x1aa>
		if (conn->type == BT_CONN_TYPE_LE) {
    4dc4:	2a00      	cmp	r2, #0
    4dc6:	d1d7      	bne.n	4d78 <bt_recv+0x154>
			conn->required_sec_level = conn->sec_level;
    4dc8:	7a03      	ldrb	r3, [r0, #8]
    4dca:	7243      	strb	r3, [r0, #9]
    4dcc:	e7d4      	b.n	4d78 <bt_recv+0x154>
	conn->encrypt = evt->encrypt;
    4dce:	78f3      	ldrb	r3, [r6, #3]
    4dd0:	7283      	strb	r3, [r0, #10]
	if (conn->type == BT_CONN_TYPE_LE) {
    4dd2:	b9e2      	cbnz	r2, 4e0e <bt_recv+0x1ea>
		if (conn->encrypt) {
    4dd4:	b10b      	cbz	r3, 4dda <bt_recv+0x1b6>
		bt_smp_update_keys(conn);
    4dd6:	f006 fb7d 	bl	b4d4 <bt_smp_update_keys>
		update_sec_level(conn);
    4dda:	4628      	mov	r0, r5
    4ddc:	f7fe fc1a 	bl	3614 <update_sec_level>
    4de0:	e015      	b.n	4e0e <bt_recv+0x1ea>
    4de2:	68a6      	ldr	r6, [r4, #8]
	handle = sys_le16_to_cpu(evt->handle);
    4de4:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    4de8:	4638      	mov	r0, r7
    4dea:	f001 fb07 	bl	63fc <bt_conn_lookup_handle>
	if (!conn) {
    4dee:	4605      	mov	r5, r0
    4df0:	b928      	cbnz	r0, 4dfe <bt_recv+0x1da>
		BT_ERR("Unable to look up conn with handle %u", handle);
    4df2:	4b3b      	ldr	r3, [pc, #236]	; (4ee0 <bt_recv+0x2bc>)
    4df4:	9302      	str	r3, [sp, #8]
    4df6:	e88d 0088 	stmia.w	sp, {r3, r7}
    4dfa:	4b48      	ldr	r3, [pc, #288]	; (4f1c <bt_recv+0x2f8>)
    4dfc:	e7db      	b.n	4db6 <bt_recv+0x192>
	if (evt->status) {
    4dfe:	7831      	ldrb	r1, [r6, #0]
    4e00:	b111      	cbz	r1, 4e08 <bt_recv+0x1e4>
		bt_l2cap_encrypt_change(conn, evt->status);
    4e02:	f001 ff77 	bl	6cf4 <bt_l2cap_encrypt_change>
    4e06:	e731      	b.n	4c6c <bt_recv+0x48>
	if (conn->type == BT_CONN_TYPE_LE) {
    4e08:	7883      	ldrb	r3, [r0, #2]
    4e0a:	2b00      	cmp	r3, #0
    4e0c:	d0e3      	beq.n	4dd6 <bt_recv+0x1b2>
	bt_l2cap_encrypt_change(conn, evt->status);
    4e0e:	4628      	mov	r0, r5
    4e10:	7831      	ldrb	r1, [r6, #0]
    4e12:	f001 ff6f 	bl	6cf4 <bt_l2cap_encrypt_change>
	bt_conn_security_changed(conn);
    4e16:	4628      	mov	r0, r5
    4e18:	f000 ff84 	bl	5d24 <bt_conn_security_changed>
    4e1c:	e7ac      	b.n	4d78 <bt_recv+0x154>
    4e1e:	68a1      	ldr	r1, [r4, #8]
	enh.status         = evt->status;
    4e20:	780b      	ldrb	r3, [r1, #0]
    4e22:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	enh.handle         = evt->handle;
    4e26:	f8b1 3001 	ldrh.w	r3, [r1, #1]
    4e2a:	f8ad 3031 	strh.w	r3, [sp, #49]	; 0x31
	enh.role           = evt->role;
    4e2e:	78cb      	ldrb	r3, [r1, #3]
    4e30:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
	enh.interval       = evt->interval;
    4e34:	f8b1 300b 	ldrh.w	r3, [r1, #11]
    4e38:	f8ad 3047 	strh.w	r3, [sp, #71]	; 0x47
	enh.latency        = evt->latency;
    4e3c:	f8b1 300d 	ldrh.w	r3, [r1, #13]
    4e40:	f8ad 3049 	strh.w	r3, [sp, #73]	; 0x49
	enh.supv_timeout   = evt->supv_timeout;
    4e44:	f8b1 300f 	ldrh.w	r3, [r1, #15]
    4e48:	f8ad 304b 	strh.w	r3, [sp, #75]	; 0x4b
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
    4e4c:	ae0d      	add	r6, sp, #52	; 0x34
	enh.clock_accuracy = evt->clock_accuracy;
    4e4e:	7c4b      	ldrb	r3, [r1, #17]
    4e50:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
    4e54:	3104      	adds	r1, #4
    4e56:	4630      	mov	r0, r6
    4e58:	f7fe fb8c 	bl	3574 <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
    4e5c:	2500      	movs	r5, #0
    4e5e:	2206      	movs	r2, #6
    4e60:	a908      	add	r1, sp, #32
    4e62:	f10d 003b 	add.w	r0, sp, #59	; 0x3b
    4e66:	9508      	str	r5, [sp, #32]
    4e68:	f8ad 5024 	strh.w	r5, [sp, #36]	; 0x24
    4e6c:	f7fb fc91 	bl	792 <memcpy>
		keys = bt_keys_find_irk(addr);
    4e70:	4630      	mov	r0, r6
    4e72:	f006 fc47 	bl	b704 <bt_keys_find_irk>
		if (keys) {
    4e76:	4607      	mov	r7, r0
    4e78:	b1a8      	cbz	r0, 4ea6 <bt_recv+0x282>
	if (id_addr != &enh.peer_addr) {
    4e7a:	42b0      	cmp	r0, r6
    4e7c:	d013      	beq.n	4ea6 <bt_recv+0x282>
    4e7e:	2206      	movs	r2, #6
    4e80:	f10d 0135 	add.w	r1, sp, #53	; 0x35
    4e84:	f10d 0041 	add.w	r0, sp, #65	; 0x41
    4e88:	f7fb fc83 	bl	792 <memcpy>
		bt_addr_le_copy(&enh.peer_addr, id_addr);
    4e8c:	4639      	mov	r1, r7
    4e8e:	4630      	mov	r0, r6
    4e90:	f7fe fb70 	bl	3574 <bt_addr_le_copy>
		enh.peer_addr.type += BT_ADDR_LE_PUBLIC_ID;
    4e94:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    4e98:	3302      	adds	r3, #2
    4e9a:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
	le_enh_conn_complete(&enh);
    4e9e:	a80c      	add	r0, sp, #48	; 0x30
		le_enh_conn_complete((void *)buf->data);
    4ea0:	f7ff fcfa 	bl	4898 <le_enh_conn_complete>
    4ea4:	e6e2      	b.n	4c6c <bt_recv+0x48>
    4ea6:	2206      	movs	r2, #6
    4ea8:	a90a      	add	r1, sp, #40	; 0x28
    4eaa:	f10d 0041 	add.w	r0, sp, #65	; 0x41
		bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
    4eae:	950a      	str	r5, [sp, #40]	; 0x28
    4eb0:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
    4eb4:	f7fb fc6d 	bl	792 <memcpy>
    4eb8:	e7f1      	b.n	4e9e <bt_recv+0x27a>
		le_enh_conn_complete((void *)buf->data);
    4eba:	68a0      	ldr	r0, [r4, #8]
    4ebc:	e7f0      	b.n	4ea0 <bt_recv+0x27c>
    4ebe:	68a5      	ldr	r5, [r4, #8]
	handle = sys_le16_to_cpu(evt->handle);
    4ec0:	f8b5 7001 	ldrh.w	r7, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    4ec4:	4638      	mov	r0, r7
    4ec6:	f001 fa99 	bl	63fc <bt_conn_lookup_handle>
	if (!conn) {
    4eca:	4606      	mov	r6, r0
    4ecc:	bb60      	cbnz	r0, 4f28 <bt_recv+0x304>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    4ece:	4b04      	ldr	r3, [pc, #16]	; (4ee0 <bt_recv+0x2bc>)
    4ed0:	9302      	str	r3, [sp, #8]
    4ed2:	e88d 0088 	stmia.w	sp, {r3, r7}
    4ed6:	4b12      	ldr	r3, [pc, #72]	; (4f20 <bt_recv+0x2fc>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    4ed8:	4a03      	ldr	r2, [pc, #12]	; (4ee8 <bt_recv+0x2c4>)
    4eda:	4904      	ldr	r1, [pc, #16]	; (4eec <bt_recv+0x2c8>)
    4edc:	4811      	ldr	r0, [pc, #68]	; (4f24 <bt_recv+0x300>)
    4ede:	e6d7      	b.n	4c90 <bt_recv+0x6c>
    4ee0:	00023dae 	.word	0x00023dae
    4ee4:	000234b8 	.word	0x000234b8
    4ee8:	00022d76 	.word	0x00022d76
    4eec:	000272d8 	.word	0x000272d8
    4ef0:	00023cd6 	.word	0x00023cd6
    4ef4:	00023d0a 	.word	0x00023d0a
    4ef8:	0002361c 	.word	0x0002361c
    4efc:	00023e95 	.word	0x00023e95
    4f00:	000234da 	.word	0x000234da
    4f04:	00023d3c 	.word	0x00023d3c
    4f08:	20009d48 	.word	0x20009d48
    4f0c:	20005190 	.word	0x20005190
    4f10:	00023d7b 	.word	0x00023d7b
    4f14:	00023d72 	.word	0x00023d72
    4f18:	000235a9 	.word	0x000235a9
    4f1c:	000235bc 	.word	0x000235bc
    4f20:	00023558 	.word	0x00023558
    4f24:	00023daf 	.word	0x00023daf
	if (!evt->status) {
    4f28:	782b      	ldrb	r3, [r5, #0]
    4f2a:	b99b      	cbnz	r3, 4f54 <bt_recv+0x330>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    4f2c:	792a      	ldrb	r2, [r5, #4]
    4f2e:	78eb      	ldrb	r3, [r5, #3]
    4f30:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    4f34:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    4f38:	79aa      	ldrb	r2, [r5, #6]
    4f3a:	796b      	ldrb	r3, [r5, #5]
    4f3c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    4f40:	f8a0 3064 	strh.w	r3, [r0, #100]	; 0x64
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    4f44:	79eb      	ldrb	r3, [r5, #7]
    4f46:	7a2a      	ldrb	r2, [r5, #8]
    4f48:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    4f4c:	f8a0 3066 	strh.w	r3, [r0, #102]	; 0x66
		notify_le_param_updated(conn);
    4f50:	f000 fe60 	bl	5c14 <notify_le_param_updated>
	bt_conn_unref(conn);
    4f54:	4630      	mov	r0, r6
    4f56:	e06e      	b.n	5036 <bt_recv+0x412>
    4f58:	68a6      	ldr	r6, [r4, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    4f5a:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    4f5e:	4638      	mov	r0, r7
    4f60:	f001 fa4c 	bl	63fc <bt_conn_lookup_handle>
	if (!conn) {
    4f64:	4605      	mov	r5, r0
    4f66:	b928      	cbnz	r0, 4f74 <bt_recv+0x350>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    4f68:	4ba6      	ldr	r3, [pc, #664]	; (5204 <bt_recv+0x5e0>)
    4f6a:	9302      	str	r3, [sp, #8]
    4f6c:	e88d 0088 	stmia.w	sp, {r3, r7}
    4f70:	4ba5      	ldr	r3, [pc, #660]	; (5208 <bt_recv+0x5e4>)
    4f72:	e7b1      	b.n	4ed8 <bt_recv+0x2b4>
	if (!evt->status) {
    4f74:	7833      	ldrb	r3, [r6, #0]
    4f76:	b923      	cbnz	r3, 4f82 <bt_recv+0x35e>
		memcpy(conn->le.features, evt->features,
    4f78:	2208      	movs	r2, #8
    4f7a:	1cf1      	adds	r1, r6, #3
    4f7c:	3068      	adds	r0, #104	; 0x68
    4f7e:	f7fb fc08 	bl	792 <memcpy>
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
    4f82:	4ea2      	ldr	r6, [pc, #648]	; (520c <bt_recv+0x5e8>)
    4f84:	f896 2079 	ldrb.w	r2, [r6, #121]	; 0x79
    4f88:	07d2      	lsls	r2, r2, #31
    4f8a:	d50c      	bpl.n	4fa6 <bt_recv+0x382>
    4f8c:	f895 3069 	ldrb.w	r3, [r5, #105]	; 0x69
    4f90:	07db      	lsls	r3, r3, #31
    4f92:	d508      	bpl.n	4fa6 <bt_recv+0x382>
		err = hci_le_set_phy(conn);
    4f94:	4628      	mov	r0, r5
    4f96:	f7ff fc35 	bl	4804 <hci_le_set_phy.isra.29>
		if (!err) {
    4f9a:	b920      	cbnz	r0, 4fa6 <bt_recv+0x382>
    4f9c:	2180      	movs	r1, #128	; 0x80
    4f9e:	1d28      	adds	r0, r5, #4
    4fa0:	f7fe faeb 	bl	357a <atomic_or>
    4fa4:	e6e8      	b.n	4d78 <bt_recv+0x154>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    4fa6:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
    4faa:	069f      	lsls	r7, r3, #26
    4fac:	d57e      	bpl.n	50ac <bt_recv+0x488>
    4fae:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
    4fb2:	069e      	lsls	r6, r3, #26
    4fb4:	d57a      	bpl.n	50ac <bt_recv+0x488>
		err = hci_le_set_data_len(conn);
    4fb6:	4628      	mov	r0, r5
    4fb8:	f7ff fc44 	bl	4844 <hci_le_set_data_len.isra.30>
		if (!err) {
    4fbc:	2800      	cmp	r0, #0
    4fbe:	d175      	bne.n	50ac <bt_recv+0x488>
    4fc0:	f44f 7180 	mov.w	r1, #256	; 0x100
    4fc4:	e7eb      	b.n	4f9e <bt_recv+0x37a>
    4fc6:	68a3      	ldr	r3, [r4, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    4fc8:	78d9      	ldrb	r1, [r3, #3]
    4fca:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    4fcc:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    4fce:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    4fd2:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    4fd6:	7959      	ldrb	r1, [r3, #5]
    4fd8:	791a      	ldrb	r2, [r3, #4]
    4fda:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    4fde:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
	param.latency = sys_le16_to_cpu(evt->latency);
    4fe2:	799a      	ldrb	r2, [r3, #6]
    4fe4:	79d9      	ldrb	r1, [r3, #7]
    4fe6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    4fea:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
	param.timeout = sys_le16_to_cpu(evt->timeout);
    4fee:	7a1a      	ldrb	r2, [r3, #8]
    4ff0:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
    4ff2:	b2bd      	uxth	r5, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
    4ff4:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
    4ff8:	4628      	mov	r0, r5
	param.timeout = sys_le16_to_cpu(evt->timeout);
    4ffa:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
	conn = bt_conn_lookup_handle(handle);
    4ffe:	f001 f9fd 	bl	63fc <bt_conn_lookup_handle>
	if (!conn) {
    5002:	4680      	mov	r8, r0
    5004:	b970      	cbnz	r0, 5024 <bt_recv+0x400>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    5006:	4b7f      	ldr	r3, [pc, #508]	; (5204 <bt_recv+0x5e0>)
    5008:	9302      	str	r3, [sp, #8]
    500a:	e88d 0028 	stmia.w	sp, {r3, r5}
    500e:	4a80      	ldr	r2, [pc, #512]	; (5210 <bt_recv+0x5ec>)
    5010:	4b80      	ldr	r3, [pc, #512]	; (5214 <bt_recv+0x5f0>)
    5012:	4981      	ldr	r1, [pc, #516]	; (5218 <bt_recv+0x5f4>)
    5014:	4881      	ldr	r0, [pc, #516]	; (521c <bt_recv+0x5f8>)
    5016:	f7fd f93d 	bl	2294 <printk>
		return le_conn_param_neg_reply(handle,
    501a:	2102      	movs	r1, #2
    501c:	4628      	mov	r0, r5
    501e:	f7ff fd21 	bl	4a64 <le_conn_param_neg_reply>
    5022:	e623      	b.n	4c6c <bt_recv+0x48>
	if (!le_param_req(conn, &param)) {
    5024:	a90c      	add	r1, sp, #48	; 0x30
    5026:	f000 fe09 	bl	5c3c <le_param_req>
    502a:	b938      	cbnz	r0, 503c <bt_recv+0x418>
		err = le_conn_param_neg_reply(handle,
    502c:	211e      	movs	r1, #30
    502e:	4628      	mov	r0, r5
    5030:	f7ff fd18 	bl	4a64 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    5034:	4640      	mov	r0, r8
	bt_conn_unref(conn);
    5036:	f001 fa4f 	bl	64d8 <bt_conn_unref>
    503a:	e617      	b.n	4c6c <bt_recv+0x48>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    503c:	210e      	movs	r1, #14
    503e:	f242 0020 	movw	r0, #8224	; 0x2020
    5042:	f7fe fb91 	bl	3768 <bt_hci_cmd_create>
	if (!buf) {
    5046:	4606      	mov	r6, r0
    5048:	2800      	cmp	r0, #0
    504a:	d0f3      	beq.n	5034 <bt_recv+0x410>
	cp = net_buf_add(buf, sizeof(*cp));
    504c:	210e      	movs	r1, #14
    504e:	3008      	adds	r0, #8
    5050:	f014 f9a8 	bl	193a4 <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
    5054:	220e      	movs	r2, #14
	cp = net_buf_add(buf, sizeof(*cp));
    5056:	4605      	mov	r5, r0
	memset(cp, 0, sizeof(*cp));
    5058:	2100      	movs	r1, #0
    505a:	f7fb fbc6 	bl	7ea <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    505e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    5062:	806b      	strh	r3, [r5, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    5064:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    5068:	80ab      	strh	r3, [r5, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    506a:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
    506e:	80eb      	strh	r3, [r5, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    5070:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
	cp->handle = sys_cpu_to_le16(handle);
    5074:	802f      	strh	r7, [r5, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    5076:	812b      	strh	r3, [r5, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    5078:	4631      	mov	r1, r6
    507a:	f242 0020 	movw	r0, #8224	; 0x2020
    507e:	f7fe fefb 	bl	3e78 <bt_hci_cmd_send>
    5082:	e7d7      	b.n	5034 <bt_recv+0x410>
	u16_t handle = sys_le16_to_cpu(evt->handle);
    5084:	68a3      	ldr	r3, [r4, #8]
    5086:	881e      	ldrh	r6, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
    5088:	4630      	mov	r0, r6
    508a:	f001 f9b7 	bl	63fc <bt_conn_lookup_handle>
	if (!conn) {
    508e:	4605      	mov	r5, r0
    5090:	b928      	cbnz	r0, 509e <bt_recv+0x47a>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    5092:	4b5c      	ldr	r3, [pc, #368]	; (5204 <bt_recv+0x5e0>)
    5094:	9302      	str	r3, [sp, #8]
    5096:	e88d 0048 	stmia.w	sp, {r3, r6}
    509a:	4b61      	ldr	r3, [pc, #388]	; (5220 <bt_recv+0x5fc>)
    509c:	e71c      	b.n	4ed8 <bt_recv+0x2b4>
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_DATA_LEN)) {
    509e:	2108      	movs	r1, #8
    50a0:	3004      	adds	r0, #4
    50a2:	f7fe fa99 	bl	35d8 <atomic_test_and_clear_bit>
    50a6:	2800      	cmp	r0, #0
    50a8:	f43f ae66 	beq.w	4d78 <bt_recv+0x154>
	update_conn_param(conn);
    50ac:	4628      	mov	r0, r5
    50ae:	f7fe faa3 	bl	35f8 <update_conn_param>
    50b2:	e661      	b.n	4d78 <bt_recv+0x154>
	u16_t handle = sys_le16_to_cpu(evt->handle);
    50b4:	68a3      	ldr	r3, [r4, #8]
    50b6:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    50ba:	4630      	mov	r0, r6
    50bc:	f001 f99e 	bl	63fc <bt_conn_lookup_handle>
	if (!conn) {
    50c0:	4605      	mov	r5, r0
    50c2:	b928      	cbnz	r0, 50d0 <bt_recv+0x4ac>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    50c4:	4b4f      	ldr	r3, [pc, #316]	; (5204 <bt_recv+0x5e0>)
    50c6:	9302      	str	r3, [sp, #8]
    50c8:	e88d 0048 	stmia.w	sp, {r3, r6}
    50cc:	4b55      	ldr	r3, [pc, #340]	; (5224 <bt_recv+0x600>)
    50ce:	e703      	b.n	4ed8 <bt_recv+0x2b4>
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    50d0:	1d06      	adds	r6, r0, #4
    50d2:	2107      	movs	r1, #7
    50d4:	4630      	mov	r0, r6
    50d6:	f7fe fa7f 	bl	35d8 <atomic_test_and_clear_bit>
    50da:	2800      	cmp	r0, #0
    50dc:	f43f ae4c 	beq.w	4d78 <bt_recv+0x154>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    50e0:	4b4a      	ldr	r3, [pc, #296]	; (520c <bt_recv+0x5e8>)
    50e2:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    50e6:	0698      	lsls	r0, r3, #26
    50e8:	d5e0      	bpl.n	50ac <bt_recv+0x488>
    50ea:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
    50ee:	0699      	lsls	r1, r3, #26
    50f0:	d5dc      	bpl.n	50ac <bt_recv+0x488>
		err = hci_le_set_data_len(conn);
    50f2:	4628      	mov	r0, r5
    50f4:	f7ff fba6 	bl	4844 <hci_le_set_data_len.isra.30>
		if (!err) {
    50f8:	2800      	cmp	r0, #0
    50fa:	d1d7      	bne.n	50ac <bt_recv+0x488>
    50fc:	f44f 7180 	mov.w	r1, #256	; 0x100
    5100:	4630      	mov	r0, r6
    5102:	e74d      	b.n	4fa0 <bt_recv+0x37c>
    5104:	68a5      	ldr	r5, [r4, #8]
	handle = sys_le16_to_cpu(evt->handle);
    5106:	882f      	ldrh	r7, [r5, #0]
	conn = bt_conn_lookup_handle(handle);
    5108:	4638      	mov	r0, r7
    510a:	f001 f977 	bl	63fc <bt_conn_lookup_handle>
	if (!conn) {
    510e:	4606      	mov	r6, r0
    5110:	b928      	cbnz	r0, 511e <bt_recv+0x4fa>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    5112:	4b3c      	ldr	r3, [pc, #240]	; (5204 <bt_recv+0x5e0>)
    5114:	9302      	str	r3, [sp, #8]
    5116:	e88d 0088 	stmia.w	sp, {r3, r7}
    511a:	4b43      	ldr	r3, [pc, #268]	; (5228 <bt_recv+0x604>)
    511c:	e6dc      	b.n	4ed8 <bt_recv+0x2b4>
	if (evt->rand == 0 && evt->ediv == 0 && bt_smp_get_tk(conn, tk)) {
    511e:	f8d5 2002 	ldr.w	r2, [r5, #2]
    5122:	f8d5 3006 	ldr.w	r3, [r5, #6]
    5126:	4313      	orrs	r3, r2
    5128:	d127      	bne.n	517a <bt_recv+0x556>
    512a:	896b      	ldrh	r3, [r5, #10]
    512c:	bb2b      	cbnz	r3, 517a <bt_recv+0x556>
    512e:	a90c      	add	r1, sp, #48	; 0x30
    5130:	f006 fa52 	bl	b5d8 <bt_smp_get_tk>
    5134:	b308      	cbz	r0, 517a <bt_recv+0x556>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    5136:	2112      	movs	r1, #18
    5138:	f242 001a 	movw	r0, #8218	; 0x201a
    513c:	f7fe fb14 	bl	3768 <bt_hci_cmd_create>
		if (!buf) {
    5140:	4607      	mov	r7, r0
    5142:	b948      	cbnz	r0, 5158 <bt_recv+0x534>
			BT_ERR("Out of command buffers");
    5144:	4b2f      	ldr	r3, [pc, #188]	; (5204 <bt_recv+0x5e0>)
    5146:	9301      	str	r3, [sp, #4]
    5148:	9300      	str	r3, [sp, #0]
    514a:	4b37      	ldr	r3, [pc, #220]	; (5228 <bt_recv+0x604>)
		BT_ERR("Out of command buffers");
    514c:	4a30      	ldr	r2, [pc, #192]	; (5210 <bt_recv+0x5ec>)
    514e:	4932      	ldr	r1, [pc, #200]	; (5218 <bt_recv+0x5f4>)
    5150:	4836      	ldr	r0, [pc, #216]	; (522c <bt_recv+0x608>)
    5152:	f7fd f89f 	bl	2294 <printk>
    5156:	e6fd      	b.n	4f54 <bt_recv+0x330>
		cp = net_buf_add(buf, sizeof(*cp));
    5158:	2112      	movs	r1, #18
    515a:	3008      	adds	r0, #8
    515c:	f014 f922 	bl	193a4 <net_buf_simple_add>
		cp->handle = evt->handle;
    5160:	882b      	ldrh	r3, [r5, #0]
    5162:	f820 3b02 	strh.w	r3, [r0], #2
		memcpy(cp->ltk, tk, sizeof(cp->ltk));
    5166:	2210      	movs	r2, #16
    5168:	a90c      	add	r1, sp, #48	; 0x30
    516a:	f7fb fb12 	bl	792 <memcpy>
		bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
    516e:	4639      	mov	r1, r7
    5170:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    5174:	f7fe fe80 	bl	3e78 <bt_hci_cmd_send>
    5178:	e6ec      	b.n	4f54 <bt_recv+0x330>
	if (!conn->le.keys) {
    517a:	6f33      	ldr	r3, [r6, #112]	; 0x70
    517c:	2b00      	cmp	r3, #0
    517e:	f040 81e9 	bne.w	5554 <bt_recv+0x930>
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, &conn->le.dst);
    5182:	f106 0748 	add.w	r7, r6, #72	; 0x48
    5186:	4639      	mov	r1, r7
    5188:	2020      	movs	r0, #32
    518a:	f006 fa9d 	bl	b6c8 <bt_keys_find>
    518e:	6730      	str	r0, [r6, #112]	; 0x70
		if (!conn->le.keys) {
    5190:	2800      	cmp	r0, #0
    5192:	f040 81df 	bne.w	5554 <bt_recv+0x930>
			conn->le.keys = bt_keys_find(BT_KEYS_SLAVE_LTK,
    5196:	4639      	mov	r1, r7
    5198:	2001      	movs	r0, #1
    519a:	f006 fa95 	bl	b6c8 <bt_keys_find>
    519e:	6730      	str	r0, [r6, #112]	; 0x70
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    51a0:	2800      	cmp	r0, #0
    51a2:	d06b      	beq.n	527c <bt_recv+0x658>
    51a4:	8981      	ldrh	r1, [r0, #12]
    51a6:	068a      	lsls	r2, r1, #26
    51a8:	d542      	bpl.n	5230 <bt_recv+0x60c>
	    evt->rand == 0 && evt->ediv == 0) {
    51aa:	f8d5 2002 	ldr.w	r2, [r5, #2]
    51ae:	f8d5 3006 	ldr.w	r3, [r5, #6]
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    51b2:	4313      	orrs	r3, r2
    51b4:	d13c      	bne.n	5230 <bt_recv+0x60c>
	    evt->rand == 0 && evt->ediv == 0) {
    51b6:	f8b5 800a 	ldrh.w	r8, [r5, #10]
    51ba:	f1b8 0f00 	cmp.w	r8, #0
    51be:	d137      	bne.n	5230 <bt_recv+0x60c>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    51c0:	2112      	movs	r1, #18
    51c2:	f242 001a 	movw	r0, #8218	; 0x201a
    51c6:	f7fe facf 	bl	3768 <bt_hci_cmd_create>
		if (!buf) {
    51ca:	4607      	mov	r7, r0
    51cc:	2800      	cmp	r0, #0
    51ce:	d0b9      	beq.n	5144 <bt_recv+0x520>
		cp = net_buf_add(buf, sizeof(*cp));
    51d0:	2112      	movs	r1, #18
    51d2:	3008      	adds	r0, #8
    51d4:	f014 f8e6 	bl	193a4 <net_buf_simple_add>
		cp->handle = evt->handle;
    51d8:	882b      	ldrh	r3, [r5, #0]
    51da:	4605      	mov	r5, r0
    51dc:	f825 3b02 	strh.w	r3, [r5], #2
		memcpy(cp->ltk, conn->le.keys->ltk.val,
    51e0:	6f31      	ldr	r1, [r6, #112]	; 0x70
    51e2:	79ca      	ldrb	r2, [r1, #7]
    51e4:	311a      	adds	r1, #26
		memcpy(cp->ltk, conn->le.keys->slave_ltk.val,
    51e6:	4628      	mov	r0, r5
    51e8:	f7fb fad3 	bl	792 <memcpy>
		if (conn->le.keys->enc_size < sizeof(cp->ltk)) {
    51ec:	6f33      	ldr	r3, [r6, #112]	; 0x70
    51ee:	79d8      	ldrb	r0, [r3, #7]
    51f0:	280f      	cmp	r0, #15
    51f2:	d8bc      	bhi.n	516e <bt_recv+0x54a>
			memset(cp->ltk + conn->le.keys->enc_size, 0,
    51f4:	f1c0 0210 	rsb	r2, r0, #16
    51f8:	2100      	movs	r1, #0
    51fa:	4428      	add	r0, r5
    51fc:	f7fb faf5 	bl	7ea <memset>
    5200:	e7b5      	b.n	516e <bt_recv+0x54a>
    5202:	bf00      	nop
    5204:	00023dae 	.word	0x00023dae
    5208:	00023504 	.word	0x00023504
    520c:	20009cd8 	.word	0x20009cd8
    5210:	00022d76 	.word	0x00022d76
    5214:	00023546 	.word	0x00023546
    5218:	000272d8 	.word	0x000272d8
    521c:	00023daf 	.word	0x00023daf
    5220:	0002351c 	.word	0x0002351c
    5224:	0002352f 	.word	0x0002352f
    5228:	000235ee 	.word	0x000235ee
    522c:	00023de3 	.word	0x00023de3
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
    5230:	07cb      	lsls	r3, r1, #31
    5232:	d523      	bpl.n	527c <bt_recv+0x658>
    5234:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
	    conn->le.keys->slave_ltk.rand == evt->rand &&
    5238:	f8d5 9006 	ldr.w	r9, [r5, #6]
    523c:	f8d5 8002 	ldr.w	r8, [r5, #2]
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
    5240:	454b      	cmp	r3, r9
    5242:	bf08      	it	eq
    5244:	4542      	cmpeq	r2, r8
    5246:	d119      	bne.n	527c <bt_recv+0x658>
	    conn->le.keys->slave_ltk.rand == evt->rand &&
    5248:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
    524c:	896b      	ldrh	r3, [r5, #10]
    524e:	429a      	cmp	r2, r3
    5250:	d114      	bne.n	527c <bt_recv+0x658>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    5252:	2112      	movs	r1, #18
    5254:	f242 001a 	movw	r0, #8218	; 0x201a
    5258:	f7fe fa86 	bl	3768 <bt_hci_cmd_create>
		if (!buf) {
    525c:	4607      	mov	r7, r0
    525e:	2800      	cmp	r0, #0
    5260:	f43f af70 	beq.w	5144 <bt_recv+0x520>
		cp = net_buf_add(buf, sizeof(*cp));
    5264:	2112      	movs	r1, #18
    5266:	3008      	adds	r0, #8
    5268:	f014 f89c 	bl	193a4 <net_buf_simple_add>
		cp->handle = evt->handle;
    526c:	882b      	ldrh	r3, [r5, #0]
    526e:	4605      	mov	r5, r0
    5270:	f825 3b02 	strh.w	r3, [r5], #2
		memcpy(cp->ltk, conn->le.keys->slave_ltk.val,
    5274:	6f31      	ldr	r1, [r6, #112]	; 0x70
    5276:	79ca      	ldrb	r2, [r1, #7]
    5278:	3152      	adds	r1, #82	; 0x52
    527a:	e7b4      	b.n	51e6 <bt_recv+0x5c2>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
    527c:	2102      	movs	r1, #2
    527e:	f242 001b 	movw	r0, #8219	; 0x201b
	le_ltk_neg_reply(evt->handle);
    5282:	882f      	ldrh	r7, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
    5284:	f7fe fa70 	bl	3768 <bt_hci_cmd_create>
	if (!buf) {
    5288:	4605      	mov	r5, r0
    528a:	b920      	cbnz	r0, 5296 <bt_recv+0x672>
		BT_ERR("Out of command buffers");
    528c:	4bb2      	ldr	r3, [pc, #712]	; (5558 <bt_recv+0x934>)
    528e:	9301      	str	r3, [sp, #4]
    5290:	9300      	str	r3, [sp, #0]
    5292:	4bb2      	ldr	r3, [pc, #712]	; (555c <bt_recv+0x938>)
    5294:	e75a      	b.n	514c <bt_recv+0x528>
	cp = net_buf_add(buf, sizeof(*cp));
    5296:	2102      	movs	r1, #2
    5298:	3008      	adds	r0, #8
    529a:	f014 f883 	bl	193a4 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    529e:	4629      	mov	r1, r5
	cp->handle = handle;
    52a0:	8007      	strh	r7, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    52a2:	f242 001b 	movw	r0, #8219	; 0x201b
    52a6:	e765      	b.n	5174 <bt_recv+0x550>
    52a8:	68a6      	ldr	r6, [r4, #8]
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    52aa:	48ad      	ldr	r0, [pc, #692]	; (5560 <bt_recv+0x93c>)
    52ac:	f06f 0110 	mvn.w	r1, #16
    52b0:	f7fe f981 	bl	35b6 <atomic_and>
	if (!evt->status) {
    52b4:	7833      	ldrb	r3, [r6, #0]
    52b6:	b943      	cbnz	r3, 52ca <bt_recv+0x6a6>
		memcpy(pub_key, evt->key, 64);
    52b8:	1c71      	adds	r1, r6, #1
    52ba:	2240      	movs	r2, #64	; 0x40
    52bc:	48a9      	ldr	r0, [pc, #676]	; (5564 <bt_recv+0x940>)
    52be:	f7fb fa68 	bl	792 <memcpy>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    52c2:	2108      	movs	r1, #8
    52c4:	48a6      	ldr	r0, [pc, #664]	; (5560 <bt_recv+0x93c>)
    52c6:	f7fe f958 	bl	357a <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    52ca:	4ba7      	ldr	r3, [pc, #668]	; (5568 <bt_recv+0x944>)
    52cc:	681d      	ldr	r5, [r3, #0]
		cb->func(evt->status ? NULL : evt->key);
    52ce:	1c77      	adds	r7, r6, #1
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    52d0:	2d00      	cmp	r5, #0
    52d2:	f43f accb 	beq.w	4c6c <bt_recv+0x48>
		cb->func(evt->status ? NULL : evt->key);
    52d6:	7832      	ldrb	r2, [r6, #0]
    52d8:	682b      	ldr	r3, [r5, #0]
    52da:	2a00      	cmp	r2, #0
    52dc:	bf0c      	ite	eq
    52de:	4638      	moveq	r0, r7
    52e0:	2000      	movne	r0, #0
    52e2:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    52e4:	686d      	ldr	r5, [r5, #4]
    52e6:	e7f3      	b.n	52d0 <bt_recv+0x6ac>
	if (dh_key_cb) {
    52e8:	4da0      	ldr	r5, [pc, #640]	; (556c <bt_recv+0x948>)
    52ea:	68a0      	ldr	r0, [r4, #8]
    52ec:	682a      	ldr	r2, [r5, #0]
    52ee:	2a00      	cmp	r2, #0
    52f0:	f43f acbc 	beq.w	4c6c <bt_recv+0x48>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    52f4:	7803      	ldrb	r3, [r0, #0]
    52f6:	b923      	cbnz	r3, 5302 <bt_recv+0x6de>
    52f8:	3001      	adds	r0, #1
    52fa:	4790      	blx	r2
		dh_key_cb = NULL;
    52fc:	2300      	movs	r3, #0
    52fe:	602b      	str	r3, [r5, #0]
    5300:	e4b4      	b.n	4c6c <bt_recv+0x48>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    5302:	2000      	movs	r0, #0
    5304:	e7f9      	b.n	52fa <bt_recv+0x6d6>
	u8_t num_reports = net_buf_pull_u8(buf);
    5306:	4628      	mov	r0, r5
    5308:	f014 f8a4 	bl	19454 <net_buf_simple_pull_u8>
		if (scan_dev_found_cb) {
    530c:	f8df b284 	ldr.w	fp, [pc, #644]	; 5594 <bt_recv+0x970>
	u8_t num_reports = net_buf_pull_u8(buf);
    5310:	9007      	str	r0, [sp, #28]
	while (num_reports--) {
    5312:	9b07      	ldr	r3, [sp, #28]
    5314:	2b00      	cmp	r3, #0
    5316:	f43f aca9 	beq.w	4c6c <bt_recv+0x48>
		info = (void *)buf->data;
    531a:	68a6      	ldr	r6, [r4, #8]
		net_buf_pull(buf, sizeof(*info));
    531c:	2109      	movs	r1, #9
    531e:	4628      	mov	r0, r5
    5320:	f014 f890 	bl	19444 <net_buf_simple_pull>
		rssi = info->data[info->length];
    5324:	7a33      	ldrb	r3, [r6, #8]
    5326:	4433      	add	r3, r6
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    5328:	46b0      	mov	r8, r6
		rssi = info->data[info->length];
    532a:	7a5b      	ldrb	r3, [r3, #9]
    532c:	461f      	mov	r7, r3
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    532e:	f818 3f01 	ldrb.w	r3, [r8, #1]!
    5332:	3b02      	subs	r3, #2
    5334:	2b01      	cmp	r3, #1
    5336:	d838      	bhi.n	53aa <bt_recv+0x786>
			bt_addr_le_copy(&id_addr, &info->addr);
    5338:	4641      	mov	r1, r8
    533a:	a80c      	add	r0, sp, #48	; 0x30
    533c:	f7fe f91a 	bl	3574 <bt_addr_le_copy>
			id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    5340:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    5344:	3b02      	subs	r3, #2
    5346:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		if (scan_dev_found_cb) {
    534a:	f8db 3000 	ldr.w	r3, [fp]
    534e:	b1a3      	cbz	r3, 537a <bt_recv+0x756>
 *  @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    5350:	4628      	mov	r0, r5
    5352:	f014 f88f 	bl	19474 <net_buf_simple_headroom>
			buf->len = info->length;
    5356:	7a33      	ldrb	r3, [r6, #8]
	state->len = buf->len;
    5358:	f8b4 900c 	ldrh.w	r9, [r4, #12]
    535c:	81a3      	strh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    535e:	4682      	mov	sl, r0
			scan_dev_found_cb(&id_addr, rssi, info->evt_type,
    5360:	462b      	mov	r3, r5
    5362:	b279      	sxtb	r1, r7
    5364:	7832      	ldrb	r2, [r6, #0]
    5366:	f8db 7000 	ldr.w	r7, [fp]
    536a:	a80c      	add	r0, sp, #48	; 0x30
    536c:	47b8      	blx	r7
 *  @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
    536e:	6923      	ldr	r3, [r4, #16]
	buf->len = state->len;
    5370:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
    5374:	fa13 f38a 	uxtah	r3, r3, sl
    5378:	60a3      	str	r3, [r4, #8]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    537a:	2108      	movs	r1, #8
    537c:	4878      	ldr	r0, [pc, #480]	; (5560 <bt_recv+0x93c>)
		check_pending_conn(&id_addr, &info->addr, info->evt_type);
    537e:	7837      	ldrb	r7, [r6, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    5380:	f7fe f90c 	bl	359c <atomic_test_bit>
    5384:	b928      	cbnz	r0, 5392 <bt_recv+0x76e>
	if (evtype != BT_LE_ADV_IND && evtype != BT_LE_ADV_DIRECT_IND) {
    5386:	2f01      	cmp	r7, #1
    5388:	d803      	bhi.n	5392 <bt_recv+0x76e>
    538a:	4641      	mov	r1, r8
    538c:	a80c      	add	r0, sp, #48	; 0x30
    538e:	f7ff f9bf 	bl	4710 <check_pending_conn.part.27>
		net_buf_pull(buf, info->length + sizeof(rssi));
    5392:	7a31      	ldrb	r1, [r6, #8]
    5394:	4628      	mov	r0, r5
    5396:	3101      	adds	r1, #1
    5398:	f014 f854 	bl	19444 <net_buf_simple_pull>
    539c:	9b07      	ldr	r3, [sp, #28]
    539e:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
    53a2:	fa5f f389 	uxtb.w	r3, r9
    53a6:	9307      	str	r3, [sp, #28]
    53a8:	e7b3      	b.n	5312 <bt_recv+0x6ee>
		keys = bt_keys_find_irk(addr);
    53aa:	4640      	mov	r0, r8
    53ac:	f006 f9aa 	bl	b704 <bt_keys_find_irk>
			bt_addr_le_copy(&id_addr, find_id_addr(&info->addr));
    53b0:	2800      	cmp	r0, #0
    53b2:	bf14      	ite	ne
    53b4:	4601      	movne	r1, r0
    53b6:	4641      	moveq	r1, r8
    53b8:	a80c      	add	r0, sp, #48	; 0x30
    53ba:	f7fe f8db 	bl	3574 <bt_addr_le_copy>
    53be:	e7c4      	b.n	534a <bt_recv+0x726>
	u8_t num_reports = net_buf_pull_u8(buf);
    53c0:	4628      	mov	r0, r5
    53c2:	f014 f847 	bl	19454 <net_buf_simple_pull_u8>
		if (scan_dev_found_cb) {
    53c6:	f8df b1cc 	ldr.w	fp, [pc, #460]	; 5594 <bt_recv+0x970>
	u8_t num_reports = net_buf_pull_u8(buf);
    53ca:	9007      	str	r0, [sp, #28]
	while (num_reports--) {
    53cc:	9b07      	ldr	r3, [sp, #28]
    53ce:	2b00      	cmp	r3, #0
    53d0:	f43f ac4c 	beq.w	4c6c <bt_recv+0x48>
		info = (void *)buf->data;
    53d4:	68a6      	ldr	r6, [r4, #8]
		net_buf_pull(buf, sizeof(*info));
    53d6:	2117      	movs	r1, #23
    53d8:	4628      	mov	r0, r5
    53da:	f014 f833 	bl	19444 <net_buf_simple_pull>
		rssi = info->data[info->length];
    53de:	7db3      	ldrb	r3, [r6, #22]
    53e0:	4433      	add	r3, r6
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    53e2:	46b0      	mov	r8, r6
		rssi = info->data[info->length];
    53e4:	7ddb      	ldrb	r3, [r3, #23]
    53e6:	461f      	mov	r7, r3
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    53e8:	f818 3f01 	ldrb.w	r3, [r8, #1]!
    53ec:	3b02      	subs	r3, #2
    53ee:	2b01      	cmp	r3, #1
    53f0:	d838      	bhi.n	5464 <bt_recv+0x840>
			bt_addr_le_copy(&id_addr, &info->addr);
    53f2:	4641      	mov	r1, r8
    53f4:	a80c      	add	r0, sp, #48	; 0x30
    53f6:	f7fe f8bd 	bl	3574 <bt_addr_le_copy>
			id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    53fa:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    53fe:	3b02      	subs	r3, #2
    5400:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		if (scan_dev_found_cb) {
    5404:	f8db 3000 	ldr.w	r3, [fp]
    5408:	b1a3      	cbz	r3, 5434 <bt_recv+0x810>
	state->offset = net_buf_simple_headroom(buf);
    540a:	4628      	mov	r0, r5
    540c:	f014 f832 	bl	19474 <net_buf_simple_headroom>
			buf->len = info->length;
    5410:	7db3      	ldrb	r3, [r6, #22]
	state->len = buf->len;
    5412:	f8b4 900c 	ldrh.w	r9, [r4, #12]
    5416:	81a3      	strh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    5418:	4682      	mov	sl, r0
			scan_dev_found_cb(&id_addr, rssi, info->evt_type,
    541a:	462b      	mov	r3, r5
    541c:	b279      	sxtb	r1, r7
    541e:	7832      	ldrb	r2, [r6, #0]
    5420:	f8db 7000 	ldr.w	r7, [fp]
    5424:	a80c      	add	r0, sp, #48	; 0x30
    5426:	47b8      	blx	r7
	buf->data = buf->__buf + state->offset;
    5428:	6923      	ldr	r3, [r4, #16]
	buf->len = state->len;
    542a:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
    542e:	fa13 f38a 	uxtah	r3, r3, sl
    5432:	60a3      	str	r3, [r4, #8]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    5434:	2108      	movs	r1, #8
    5436:	484a      	ldr	r0, [pc, #296]	; (5560 <bt_recv+0x93c>)
		check_pending_conn(&id_addr, &info->addr, info->evt_type);
    5438:	7837      	ldrb	r7, [r6, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    543a:	f7fe f8af 	bl	359c <atomic_test_bit>
    543e:	b928      	cbnz	r0, 544c <bt_recv+0x828>
	if (evtype != BT_LE_ADV_IND && evtype != BT_LE_ADV_DIRECT_IND) {
    5440:	2f01      	cmp	r7, #1
    5442:	d803      	bhi.n	544c <bt_recv+0x828>
    5444:	4641      	mov	r1, r8
    5446:	a80c      	add	r0, sp, #48	; 0x30
    5448:	f7ff f962 	bl	4710 <check_pending_conn.part.27>
		net_buf_pull(buf, info->length + sizeof(rssi));
    544c:	7db1      	ldrb	r1, [r6, #22]
    544e:	4628      	mov	r0, r5
    5450:	3101      	adds	r1, #1
    5452:	f013 fff7 	bl	19444 <net_buf_simple_pull>
    5456:	9b07      	ldr	r3, [sp, #28]
    5458:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
    545c:	fa5f f389 	uxtb.w	r3, r9
    5460:	9307      	str	r3, [sp, #28]
    5462:	e7b3      	b.n	53cc <bt_recv+0x7a8>
		keys = bt_keys_find_irk(addr);
    5464:	4640      	mov	r0, r8
    5466:	f006 f94d 	bl	b704 <bt_keys_find_irk>
			bt_addr_le_copy(&id_addr, find_id_addr(&info->addr));
    546a:	2800      	cmp	r0, #0
    546c:	bf14      	ite	ne
    546e:	4601      	movne	r1, r0
    5470:	4641      	moveq	r1, r8
    5472:	a80c      	add	r0, sp, #48	; 0x30
    5474:	f7fe f87e 	bl	3574 <bt_addr_le_copy>
    5478:	e7c4      	b.n	5404 <bt_recv+0x7e0>
		BT_WARN("Unhandled LE event 0x%02x len %u: %s",
    547a:	89a5      	ldrh	r5, [r4, #12]
    547c:	68a0      	ldr	r0, [r4, #8]
    547e:	4629      	mov	r1, r5
    5480:	f7fd ff10 	bl	32a4 <bt_hex>
    5484:	4b34      	ldr	r3, [pc, #208]	; (5558 <bt_recv+0x934>)
    5486:	9304      	str	r3, [sp, #16]
    5488:	9003      	str	r0, [sp, #12]
    548a:	e88d 0048 	stmia.w	sp, {r3, r6}
    548e:	4a38      	ldr	r2, [pc, #224]	; (5570 <bt_recv+0x94c>)
    5490:	4b38      	ldr	r3, [pc, #224]	; (5574 <bt_recv+0x950>)
    5492:	4939      	ldr	r1, [pc, #228]	; (5578 <bt_recv+0x954>)
    5494:	4839      	ldr	r0, [pc, #228]	; (557c <bt_recv+0x958>)
    5496:	9502      	str	r5, [sp, #8]
		BT_WARN("Unhandled event 0x%02x len %u: %s", hdr->evt,
    5498:	f7fc fefc 	bl	2294 <printk>
    549c:	f7ff bbe6 	b.w	4c6c <bt_recv+0x48>
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    54a0:	4a2d      	ldr	r2, [pc, #180]	; (5558 <bt_recv+0x934>)
    54a2:	9202      	str	r2, [sp, #8]
    54a4:	e88d 000c 	stmia.w	sp, {r2, r3}
    54a8:	4933      	ldr	r1, [pc, #204]	; (5578 <bt_recv+0x954>)
    54aa:	4b35      	ldr	r3, [pc, #212]	; (5580 <bt_recv+0x95c>)
    54ac:	4a35      	ldr	r2, [pc, #212]	; (5584 <bt_recv+0x960>)
    54ae:	4836      	ldr	r0, [pc, #216]	; (5588 <bt_recv+0x964>)
    54b0:	f7fc fef0 	bl	2294 <printk>
		net_buf_unref(buf);
    54b4:	4620      	mov	r0, r4
    54b6:	f013 ff17 	bl	192e8 <net_buf_unref>
		return -EINVAL;
    54ba:	f06f 0015 	mvn.w	r0, #21
    54be:	f7ff bbf6 	b.w	4cae <bt_recv+0x8a>
	net_buf_pull(buf, sizeof(*hdr));
    54c2:	f104 0508 	add.w	r5, r4, #8
    54c6:	2102      	movs	r1, #2
    54c8:	4628      	mov	r0, r5
    54ca:	f013 ffbb 	bl	19444 <net_buf_simple_pull>
	switch (hdr->evt) {
    54ce:	7836      	ldrb	r6, [r6, #0]
    54d0:	2e08      	cmp	r6, #8
    54d2:	f43f ac63 	beq.w	4d9c <bt_recv+0x178>
    54d6:	d812      	bhi.n	54fe <bt_recv+0x8da>
    54d8:	2e05      	cmp	r6, #5
    54da:	f43f ac04 	beq.w	4ce6 <bt_recv+0xc2>
		BT_WARN("Unhandled event 0x%02x len %u: %s", hdr->evt,
    54de:	89a5      	ldrh	r5, [r4, #12]
    54e0:	68a0      	ldr	r0, [r4, #8]
    54e2:	4629      	mov	r1, r5
    54e4:	f7fd fede 	bl	32a4 <bt_hex>
    54e8:	4b1b      	ldr	r3, [pc, #108]	; (5558 <bt_recv+0x934>)
    54ea:	9304      	str	r3, [sp, #16]
    54ec:	9003      	str	r0, [sp, #12]
    54ee:	e88d 0048 	stmia.w	sp, {r3, r6}
    54f2:	9502      	str	r5, [sp, #8]
    54f4:	4b25      	ldr	r3, [pc, #148]	; (558c <bt_recv+0x968>)
    54f6:	4a1e      	ldr	r2, [pc, #120]	; (5570 <bt_recv+0x94c>)
    54f8:	491f      	ldr	r1, [pc, #124]	; (5578 <bt_recv+0x954>)
    54fa:	4825      	ldr	r0, [pc, #148]	; (5590 <bt_recv+0x96c>)
    54fc:	e7cc      	b.n	5498 <bt_recv+0x874>
	switch (hdr->evt) {
    54fe:	2e30      	cmp	r6, #48	; 0x30
    5500:	f43f ac6f 	beq.w	4de2 <bt_recv+0x1be>
    5504:	2e3e      	cmp	r6, #62	; 0x3e
    5506:	d1ea      	bne.n	54de <bt_recv+0x8ba>
	struct bt_hci_evt_le_meta_event *evt = (void *)buf->data;
    5508:	68a6      	ldr	r6, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    550a:	2101      	movs	r1, #1
    550c:	4628      	mov	r0, r5
    550e:	f013 ff99 	bl	19444 <net_buf_simple_pull>
	switch (evt->subevent) {
    5512:	7836      	ldrb	r6, [r6, #0]
    5514:	1e73      	subs	r3, r6, #1
    5516:	2b0c      	cmp	r3, #12
    5518:	d8af      	bhi.n	547a <bt_recv+0x856>
    551a:	a201      	add	r2, pc, #4	; (adr r2, 5520 <bt_recv+0x8fc>)
    551c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5520:	00004e1f 	.word	0x00004e1f
    5524:	00005307 	.word	0x00005307
    5528:	00004ebf 	.word	0x00004ebf
    552c:	00004f59 	.word	0x00004f59
    5530:	00005105 	.word	0x00005105
    5534:	00004fc7 	.word	0x00004fc7
    5538:	00005085 	.word	0x00005085
    553c:	000052a9 	.word	0x000052a9
    5540:	000052e9 	.word	0x000052e9
    5544:	00004ebb 	.word	0x00004ebb
    5548:	0000547b 	.word	0x0000547b
    554c:	000050b5 	.word	0x000050b5
    5550:	000053c1 	.word	0x000053c1
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    5554:	6f30      	ldr	r0, [r6, #112]	; 0x70
    5556:	e625      	b.n	51a4 <bt_recv+0x580>
    5558:	00023dae 	.word	0x00023dae
    555c:	000235dd 	.word	0x000235dd
    5560:	20009d48 	.word	0x20009d48
    5564:	200003cc 	.word	0x200003cc
    5568:	2000040c 	.word	0x2000040c
    556c:	200003c8 	.word	0x200003c8
    5570:	00024006 	.word	0x00024006
    5574:	0002360a 	.word	0x0002360a
    5578:	000272d8 	.word	0x000272d8
    557c:	00023e0a 	.word	0x00023e0a
    5580:	00023687 	.word	0x00023687
    5584:	00022d76 	.word	0x00022d76
    5588:	00023e71 	.word	0x00023e71
    558c:	0002361c 	.word	0x0002361c
    5590:	00023e3f 	.word	0x00023e3f
    5594:	20000414 	.word	0x20000414

00005598 <bt_recv_prio>:
{
    5598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    559c:	7d03      	ldrb	r3, [r0, #20]
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    559e:	6886      	ldr	r6, [r0, #8]
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    55a0:	2b01      	cmp	r3, #1
{
    55a2:	b087      	sub	sp, #28
    55a4:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    55a6:	d00e      	beq.n	55c6 <bt_recv_prio+0x2e>
    55a8:	4b65      	ldr	r3, [pc, #404]	; (5740 <bt_recv_prio+0x1a8>)
    55aa:	9301      	str	r3, [sp, #4]
    55ac:	9300      	str	r3, [sp, #0]
    55ae:	4a65      	ldr	r2, [pc, #404]	; (5744 <bt_recv_prio+0x1ac>)
    55b0:	4b65      	ldr	r3, [pc, #404]	; (5748 <bt_recv_prio+0x1b0>)
    55b2:	4966      	ldr	r1, [pc, #408]	; (574c <bt_recv_prio+0x1b4>)
    55b4:	4866      	ldr	r0, [pc, #408]	; (5750 <bt_recv_prio+0x1b8>)
	BT_ASSERT(buf->len >= sizeof(*hdr));
    55b6:	f7fc fe6d 	bl	2294 <printk>
    55ba:	4040      	eors	r0, r0
    55bc:	f380 8811 	msr	BASEPRI, r0
    55c0:	f04f 0004 	mov.w	r0, #4
    55c4:	df02      	svc	2
    55c6:	8982      	ldrh	r2, [r0, #12]
    55c8:	2a01      	cmp	r2, #1
    55ca:	d807      	bhi.n	55dc <bt_recv_prio+0x44>
    55cc:	4b5c      	ldr	r3, [pc, #368]	; (5740 <bt_recv_prio+0x1a8>)
    55ce:	9301      	str	r3, [sp, #4]
    55d0:	9300      	str	r3, [sp, #0]
    55d2:	4a5c      	ldr	r2, [pc, #368]	; (5744 <bt_recv_prio+0x1ac>)
    55d4:	4b5c      	ldr	r3, [pc, #368]	; (5748 <bt_recv_prio+0x1b0>)
    55d6:	495d      	ldr	r1, [pc, #372]	; (574c <bt_recv_prio+0x1b4>)
    55d8:	485e      	ldr	r0, [pc, #376]	; (5754 <bt_recv_prio+0x1bc>)
    55da:	e7ec      	b.n	55b6 <bt_recv_prio+0x1e>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    55dc:	7832      	ldrb	r2, [r6, #0]
    55de:	2a13      	cmp	r2, #19
    55e0:	f200 80a5 	bhi.w	572e <bt_recv_prio+0x196>
    55e4:	4093      	lsls	r3, r2
    55e6:	f413 2f0c 	tst.w	r3, #573440	; 0x8c000
    55ea:	f000 80a0 	beq.w	572e <bt_recv_prio+0x196>
	net_buf_pull(buf, sizeof(*hdr));
    55ee:	f100 0508 	add.w	r5, r0, #8
    55f2:	2102      	movs	r1, #2
    55f4:	4628      	mov	r0, r5
    55f6:	f013 ff25 	bl	19444 <net_buf_simple_pull>
	switch (hdr->evt) {
    55fa:	7833      	ldrb	r3, [r6, #0]
    55fc:	2b0f      	cmp	r3, #15
    55fe:	d01d      	beq.n	563c <bt_recv_prio+0xa4>
    5600:	2b13      	cmp	r3, #19
    5602:	d02b      	beq.n	565c <bt_recv_prio+0xc4>
    5604:	2b0e      	cmp	r3, #14
    5606:	f040 8087 	bne.w	5718 <bt_recv_prio+0x180>
	struct bt_hci_evt_cmd_complete *evt = (void *)buf->data;
    560a:	68a3      	ldr	r3, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    560c:	2103      	movs	r1, #3
    560e:	4628      	mov	r0, r5
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    5610:	f8b3 7001 	ldrh.w	r7, [r3, #1]
	u8_t status, ncmd = evt->ncmd;
    5614:	781e      	ldrb	r6, [r3, #0]
	net_buf_pull(buf, sizeof(*evt));
    5616:	f013 ff15 	bl	19444 <net_buf_simple_pull>
	status = buf->data[0];
    561a:	68a3      	ldr	r3, [r4, #8]
	hci_cmd_done(opcode, status, buf);
    561c:	4622      	mov	r2, r4
    561e:	7819      	ldrb	r1, [r3, #0]
    5620:	4638      	mov	r0, r7
    5622:	f7fe f82d 	bl	3680 <hci_cmd_done>
	if (ncmd) {
    5626:	b116      	cbz	r6, 562e <bt_recv_prio+0x96>
    5628:	484b      	ldr	r0, [pc, #300]	; (5758 <bt_recv_prio+0x1c0>)
    562a:	f01c fabf 	bl	21bac <_impl_k_sem_give>
	net_buf_unref(buf);
    562e:	4620      	mov	r0, r4
    5630:	f013 fe5a 	bl	192e8 <net_buf_unref>
}
    5634:	2000      	movs	r0, #0
    5636:	b007      	add	sp, #28
    5638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct bt_hci_evt_cmd_status *evt = (void *)buf->data;
    563c:	68a6      	ldr	r6, [r4, #8]
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    563e:	f8b6 8002 	ldrh.w	r8, [r6, #2]
	u8_t ncmd = evt->ncmd;
    5642:	7877      	ldrb	r7, [r6, #1]
	net_buf_pull(buf, sizeof(*evt));
    5644:	2104      	movs	r1, #4
    5646:	4628      	mov	r0, r5
    5648:	f013 fefc 	bl	19444 <net_buf_simple_pull>
	hci_cmd_done(opcode, evt->status, buf);
    564c:	4622      	mov	r2, r4
    564e:	7831      	ldrb	r1, [r6, #0]
    5650:	4640      	mov	r0, r8
    5652:	f7fe f815 	bl	3680 <hci_cmd_done>
	if (ncmd) {
    5656:	2f00      	cmp	r7, #0
    5658:	d0e9      	beq.n	562e <bt_recv_prio+0x96>
    565a:	e7e5      	b.n	5628 <bt_recv_prio+0x90>
    565c:	68a3      	ldr	r3, [r4, #8]
				BT_ERR("packets count mismatch");
    565e:	4f38      	ldr	r7, [pc, #224]	; (5740 <bt_recv_prio+0x1a8>)
    5660:	f8df 9108 	ldr.w	r9, [pc, #264]	; 576c <bt_recv_prio+0x1d4>
    5664:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 5744 <bt_recv_prio+0x1ac>
    5668:	9304      	str	r3, [sp, #16]
	for (i = 0; i < evt->num_handles; i++) {
    566a:	2600      	movs	r6, #0
    566c:	9b04      	ldr	r3, [sp, #16]
    566e:	781b      	ldrb	r3, [r3, #0]
    5670:	429e      	cmp	r6, r3
    5672:	dadc      	bge.n	562e <bt_recv_prio+0x96>
    5674:	9b04      	ldr	r3, [sp, #16]
    5676:	eb03 0386 	add.w	r3, r3, r6, lsl #2
		handle = sys_le16_to_cpu(evt->h[i].handle);
    567a:	f8b3 2001 	ldrh.w	r2, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    567e:	f8b3 8003 	ldrh.w	r8, [r3, #3]
	__asm__ volatile(
    5682:	f04f 0120 	mov.w	r1, #32
    5686:	f3ef 8b11 	mrs	fp, BASEPRI
    568a:	f381 8811 	msr	BASEPRI, r1
		conn = bt_conn_lookup_handle(handle);
    568e:	4610      	mov	r0, r2
    5690:	9205      	str	r2, [sp, #20]
    5692:	f000 feb3 	bl	63fc <bt_conn_lookup_handle>
		if (!conn) {
    5696:	9a05      	ldr	r2, [sp, #20]
    5698:	4605      	mov	r5, r0
    569a:	b960      	cbnz	r0, 56b6 <bt_recv_prio+0x11e>
			BT_ERR("No connection for handle %u", handle);
    569c:	9201      	str	r2, [sp, #4]
    569e:	9702      	str	r7, [sp, #8]
    56a0:	9700      	str	r7, [sp, #0]
    56a2:	464b      	mov	r3, r9
    56a4:	4652      	mov	r2, sl
    56a6:	4929      	ldr	r1, [pc, #164]	; (574c <bt_recv_prio+0x1b4>)
    56a8:	482c      	ldr	r0, [pc, #176]	; (575c <bt_recv_prio+0x1c4>)
    56aa:	f7fc fdf3 	bl	2294 <printk>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    56ae:	f38b 8811 	msr	BASEPRI, fp
	for (i = 0; i < evt->num_handles; i++) {
    56b2:	3601      	adds	r6, #1
    56b4:	e7da      	b.n	566c <bt_recv_prio+0xd4>
    56b6:	f38b 8811 	msr	BASEPRI, fp
			k_fifo_put(&conn->tx_notify, node);
    56ba:	f100 0b1c 	add.w	fp, r0, #28
		while (count--) {
    56be:	f1b8 0f00 	cmp.w	r8, #0
    56c2:	d01c      	beq.n	56fe <bt_recv_prio+0x166>
	__asm__ volatile(
    56c4:	f04f 0220 	mov.w	r2, #32
    56c8:	f3ef 8e11 	mrs	lr, BASEPRI
    56cc:	f382 8811 	msr	BASEPRI, r2
    56d0:	6969      	ldr	r1, [r5, #20]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    56d2:	b129      	cbz	r1, 56e0 <bt_recv_prio+0x148>
	if (list->tail == node) {
    56d4:	69aa      	ldr	r2, [r5, #24]
	list->head = node->next;
    56d6:	6808      	ldr	r0, [r1, #0]
    56d8:	6168      	str	r0, [r5, #20]
	if (list->tail == node) {
    56da:	4291      	cmp	r1, r2
		list->tail = list->head;
    56dc:	bf08      	it	eq
    56de:	61a8      	streq	r0, [r5, #24]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    56e0:	f38e 8811 	msr	BASEPRI, lr
    56e4:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    56e8:	fa1f f883 	uxth.w	r8, r3
			if (!node) {
    56ec:	b959      	cbnz	r1, 5706 <bt_recv_prio+0x16e>
				BT_ERR("packets count mismatch");
    56ee:	9701      	str	r7, [sp, #4]
    56f0:	9700      	str	r7, [sp, #0]
    56f2:	464b      	mov	r3, r9
    56f4:	4652      	mov	r2, sl
    56f6:	4915      	ldr	r1, [pc, #84]	; (574c <bt_recv_prio+0x1b4>)
    56f8:	4819      	ldr	r0, [pc, #100]	; (5760 <bt_recv_prio+0x1c8>)
    56fa:	f7fc fdcb 	bl	2294 <printk>
		bt_conn_unref(conn);
    56fe:	4628      	mov	r0, r5
    5700:	f000 feea 	bl	64d8 <bt_conn_unref>
    5704:	e7d5      	b.n	56b2 <bt_recv_prio+0x11a>
			k_fifo_put(&conn->tx_notify, node);
    5706:	4658      	mov	r0, fp
    5708:	f01c f805 	bl	21716 <k_queue_append>
			k_sem_give(bt_conn_get_pkts(conn));
    570c:	4628      	mov	r0, r5
    570e:	f000 fa7d 	bl	5c0c <bt_conn_get_pkts>
    5712:	f01c fa4b 	bl	21bac <_impl_k_sem_give>
    5716:	e7d2      	b.n	56be <bt_recv_prio+0x126>
		net_buf_unref(buf);
    5718:	4620      	mov	r0, r4
    571a:	f013 fde5 	bl	192e8 <net_buf_unref>
		BT_ASSERT(0);
    571e:	4b08      	ldr	r3, [pc, #32]	; (5740 <bt_recv_prio+0x1a8>)
    5720:	9301      	str	r3, [sp, #4]
    5722:	9300      	str	r3, [sp, #0]
    5724:	4a07      	ldr	r2, [pc, #28]	; (5744 <bt_recv_prio+0x1ac>)
    5726:	4b08      	ldr	r3, [pc, #32]	; (5748 <bt_recv_prio+0x1b0>)
    5728:	4908      	ldr	r1, [pc, #32]	; (574c <bt_recv_prio+0x1b4>)
    572a:	480e      	ldr	r0, [pc, #56]	; (5764 <bt_recv_prio+0x1cc>)
    572c:	e743      	b.n	55b6 <bt_recv_prio+0x1e>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    572e:	4b04      	ldr	r3, [pc, #16]	; (5740 <bt_recv_prio+0x1a8>)
    5730:	9301      	str	r3, [sp, #4]
    5732:	9300      	str	r3, [sp, #0]
    5734:	4a03      	ldr	r2, [pc, #12]	; (5744 <bt_recv_prio+0x1ac>)
    5736:	4b04      	ldr	r3, [pc, #16]	; (5748 <bt_recv_prio+0x1b0>)
    5738:	4904      	ldr	r1, [pc, #16]	; (574c <bt_recv_prio+0x1b4>)
    573a:	480b      	ldr	r0, [pc, #44]	; (5768 <bt_recv_prio+0x1d0>)
    573c:	e73b      	b.n	55b6 <bt_recv_prio+0x1e>
    573e:	bf00      	nop
    5740:	00023dae 	.word	0x00023dae
    5744:	00022d76 	.word	0x00022d76
    5748:	0002368f 	.word	0x0002368f
    574c:	000272d8 	.word	0x000272d8
    5750:	00023ed4 	.word	0x00023ed4
    5754:	00023f18 	.word	0x00023f18
    5758:	20009d80 	.word	0x20009d80
    575c:	00023f52 	.word	0x00023f52
    5760:	00023f7e 	.word	0x00023f7e
    5764:	00023fa5 	.word	0x00023fa5
    5768:	00023fc8 	.word	0x00023fc8
    576c:	000234c0 	.word	0x000234c0

00005770 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    5770:	4a08      	ldr	r2, [pc, #32]	; (5794 <bt_hci_driver_register+0x24>)
    5772:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    5776:	b93b      	cbnz	r3, 5788 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    5778:	6881      	ldr	r1, [r0, #8]
    577a:	b141      	cbz	r1, 578e <bt_hci_driver_register+0x1e>
    577c:	68c1      	ldr	r1, [r0, #12]
    577e:	b131      	cbz	r1, 578e <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    5780:	f8c2 00e4 	str.w	r0, [r2, #228]	; 0xe4
	return 0;
    5784:	4618      	mov	r0, r3
    5786:	4770      	bx	lr
		return -EALREADY;
    5788:	f06f 0044 	mvn.w	r0, #68	; 0x44
    578c:	4770      	bx	lr
		return -EINVAL;
    578e:	f06f 0015 	mvn.w	r0, #21
}
    5792:	4770      	bx	lr
    5794:	20009cd8 	.word	0x20009cd8

00005798 <bt_enable>:
{
    5798:	b570      	push	{r4, r5, r6, lr}
	if (!bt_dev.drv) {
    579a:	4d2a      	ldr	r5, [pc, #168]	; (5844 <bt_enable+0xac>)
    579c:	f8d5 30e4 	ldr.w	r3, [r5, #228]	; 0xe4
{
    57a0:	b086      	sub	sp, #24
    57a2:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    57a4:	b96b      	cbnz	r3, 57c2 <bt_enable+0x2a>
		BT_ERR("No HCI driver registered");
    57a6:	4b28      	ldr	r3, [pc, #160]	; (5848 <bt_enable+0xb0>)
    57a8:	9301      	str	r3, [sp, #4]
    57aa:	9300      	str	r3, [sp, #0]
    57ac:	4a27      	ldr	r2, [pc, #156]	; (584c <bt_enable+0xb4>)
    57ae:	4b28      	ldr	r3, [pc, #160]	; (5850 <bt_enable+0xb8>)
    57b0:	4928      	ldr	r1, [pc, #160]	; (5854 <bt_enable+0xbc>)
    57b2:	4829      	ldr	r0, [pc, #164]	; (5858 <bt_enable+0xc0>)
    57b4:	f7fc fd6e 	bl	2294 <printk>
		return -ENODEV;
    57b8:	f06f 0412 	mvn.w	r4, #18
}
    57bc:	4620      	mov	r0, r4
    57be:	b006      	add	sp, #24
    57c0:	bd70      	pop	{r4, r5, r6, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    57c2:	2101      	movs	r1, #1
    57c4:	f105 0070 	add.w	r0, r5, #112	; 0x70
    57c8:	f7fd fed7 	bl	357a <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    57cc:	f010 0001 	ands.w	r0, r0, #1
    57d0:	d134      	bne.n	583c <bt_enable+0xa4>
	ready_cb = cb;
    57d2:	4b22      	ldr	r3, [pc, #136]	; (585c <bt_enable+0xc4>)

    57d4:	4922      	ldr	r1, [pc, #136]	; (5860 <bt_enable+0xc8>)
    57d6:	601e      	str	r6, [r3, #0]
    57d8:	f06f 0308 	mvn.w	r3, #8
    57dc:	9005      	str	r0, [sp, #20]
    57de:	9004      	str	r0, [sp, #16]
    57e0:	9303      	str	r3, [sp, #12]
    57e2:	9002      	str	r0, [sp, #8]
    57e4:	9001      	str	r0, [sp, #4]
    57e6:	9000      	str	r0, [sp, #0]
    57e8:	4b1e      	ldr	r3, [pc, #120]	; (5864 <bt_enable+0xcc>)
    57ea:	481f      	ldr	r0, [pc, #124]	; (5868 <bt_enable+0xd0>)
    57ec:	f44f 726b 	mov.w	r2, #940	; 0x3ac
    57f0:	f01c fc18 	bl	22024 <_impl_k_thread_create>
	err = bt_dev.drv->open();
    57f4:	f8d5 30e4 	ldr.w	r3, [r5, #228]	; 0xe4
    57f8:	689b      	ldr	r3, [r3, #8]
    57fa:	4798      	blx	r3
	if (err) {
    57fc:	4604      	mov	r4, r0
    57fe:	b150      	cbz	r0, 5816 <bt_enable+0x7e>
		BT_ERR("HCI driver open failed (%d)", err);
    5800:	4b11      	ldr	r3, [pc, #68]	; (5848 <bt_enable+0xb0>)
    5802:	9302      	str	r3, [sp, #8]
    5804:	e88d 0018 	stmia.w	sp, {r3, r4}
    5808:	4a10      	ldr	r2, [pc, #64]	; (584c <bt_enable+0xb4>)
    580a:	4b11      	ldr	r3, [pc, #68]	; (5850 <bt_enable+0xb8>)
    580c:	4911      	ldr	r1, [pc, #68]	; (5854 <bt_enable+0xbc>)
    580e:	4817      	ldr	r0, [pc, #92]	; (586c <bt_enable+0xd4>)
    5810:	f7fc fd40 	bl	2294 <printk>
		return err;
    5814:	e7d2      	b.n	57bc <bt_enable+0x24>
	if (!cb) {
    5816:	b926      	cbnz	r6, 5822 <bt_enable+0x8a>
}
    5818:	b006      	add	sp, #24
    581a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
    581e:	f7fe bbe7 	b.w	3ff0 <bt_init>
    5822:	2101      	movs	r1, #1
    5824:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    5828:	f7fd fea7 	bl	357a <atomic_or>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    582c:	07c3      	lsls	r3, r0, #31
    582e:	d4c5      	bmi.n	57bc <bt_enable+0x24>
		k_queue_append(&work_q->queue, work);
    5830:	f105 0164 	add.w	r1, r5, #100	; 0x64
    5834:	480e      	ldr	r0, [pc, #56]	; (5870 <bt_enable+0xd8>)
    5836:	f01b ff6e 	bl	21716 <k_queue_append>
    583a:	e7bf      	b.n	57bc <bt_enable+0x24>
		return -EALREADY;
    583c:	f06f 0444 	mvn.w	r4, #68	; 0x44
    5840:	e7bc      	b.n	57bc <bt_enable+0x24>
    5842:	bf00      	nop
    5844:	20009cd8 	.word	0x20009cd8
    5848:	00023dae 	.word	0x00023dae
    584c:	00022d76 	.word	0x00022d76
    5850:	0002369c 	.word	0x0002369c
    5854:	000272d8 	.word	0x000272d8
    5858:	000236b5 	.word	0x000236b5
    585c:	20000410 	.word	0x20000410
    5860:	20005190 	.word	0x20005190
    5864:	00004a99 	.word	0x00004a99
    5868:	20000418 	.word	0x20000418
    586c:	000236de 	.word	0x000236de
    5870:	20003340 	.word	0x20003340

00005874 <bt_addr_le_is_bonded>:
{
    5874:	b508      	push	{r3, lr}
		struct bt_keys *keys = bt_keys_find_addr(addr);
    5876:	f005 ff79 	bl	b76c <bt_keys_find_addr>
		return keys && keys->keys;
    587a:	b118      	cbz	r0, 5884 <bt_addr_le_is_bonded+0x10>
    587c:	8980      	ldrh	r0, [r0, #12]
    587e:	3000      	adds	r0, #0
    5880:	bf18      	it	ne
    5882:	2001      	movne	r0, #1
}
    5884:	bd08      	pop	{r3, pc}
	...

00005888 <bt_le_adv_start>:
//#endif /*CONFIG_EXT_ADV*/

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    5888:	b5f0      	push	{r4, r5, r6, r7, lr}
    588a:	b085      	sub	sp, #20
    588c:	4605      	mov	r5, r0
    588e:	460c      	mov	r4, r1
    5890:	4617      	mov	r7, r2
    5892:	461e      	mov	r6, r3
	struct bt_hci_cp_le_set_adv_param set_param;
	struct net_buf *buf;
	int err;

	if (!valid_adv_param(param)) {
    5894:	f7fd fe54 	bl	3540 <valid_adv_param>
    5898:	b920      	cbnz	r0, 58a4 <bt_le_adv_start+0x1c>
		return -EINVAL;
    589a:	f06f 0415 	mvn.w	r4, #21
	if (!(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING);
	}

	return 0;
}
    589e:	4620      	mov	r0, r4
    58a0:	b005      	add	sp, #20
    58a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    58a4:	2105      	movs	r1, #5
    58a6:	483e      	ldr	r0, [pc, #248]	; (59a0 <bt_le_adv_start+0x118>)
    58a8:	f7fd fe78 	bl	359c <atomic_test_bit>
    58ac:	2800      	cmp	r0, #0
    58ae:	d171      	bne.n	5994 <bt_le_adv_start+0x10c>
	err = set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
    58b0:	4621      	mov	r1, r4
    58b2:	463a      	mov	r2, r7
    58b4:	f242 0008 	movw	r0, #8200	; 0x2008
    58b8:	f7fe f8a6 	bl	3a08 <set_ad>
	if (err) {
    58bc:	4604      	mov	r4, r0
    58be:	2800      	cmp	r0, #0
    58c0:	d1ed      	bne.n	589e <bt_le_adv_start+0x16>
	if (sd || (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    58c2:	2e00      	cmp	r6, #0
    58c4:	d146      	bne.n	5954 <bt_le_adv_start+0xcc>
    58c6:	782b      	ldrb	r3, [r5, #0]
    58c8:	07d9      	lsls	r1, r3, #31
    58ca:	d443      	bmi.n	5954 <bt_le_adv_start+0xcc>
	memset(&set_param, 0, sizeof(set_param));
    58cc:	220f      	movs	r2, #15
    58ce:	2100      	movs	r1, #0
    58d0:	4668      	mov	r0, sp
    58d2:	f7fa ff8a 	bl	7ea <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    58d6:	886b      	ldrh	r3, [r5, #2]
    58d8:	f8ad 3000 	strh.w	r3, [sp]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    58dc:	88ab      	ldrh	r3, [r5, #4]
    58de:	f8ad 3002 	strh.w	r3, [sp, #2]
	set_param.channel_map  = 0x07;
    58e2:	2307      	movs	r3, #7
    58e4:	f88d 300d 	strb.w	r3, [sp, #13]
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    58e8:	782b      	ldrb	r3, [r5, #0]
    58ea:	07da      	lsls	r2, r3, #31
    58ec:	d53c      	bpl.n	5968 <bt_le_adv_start+0xe0>
			if (atomic_test_bit(bt_dev.flags,
    58ee:	2102      	movs	r1, #2
    58f0:	482b      	ldr	r0, [pc, #172]	; (59a0 <bt_le_adv_start+0x118>)
    58f2:	4c2c      	ldr	r4, [pc, #176]	; (59a4 <bt_le_adv_start+0x11c>)
    58f4:	f7fd fe52 	bl	359c <atomic_test_bit>
    58f8:	b110      	cbz	r0, 5900 <bt_le_adv_start+0x78>
				set_random_address(&bt_dev.id_addr.a);
    58fa:	1c60      	adds	r0, r4, #1
    58fc:	f7fd ffa2 	bl	3844 <set_random_address>
			set_param.own_addr_type = bt_dev.id_addr.type;
    5900:	7823      	ldrb	r3, [r4, #0]
    5902:	f88d 3005 	strb.w	r3, [sp, #5]
		set_param.type = BT_LE_ADV_IND;
    5906:	2300      	movs	r3, #0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    5908:	210f      	movs	r1, #15
    590a:	f242 0006 	movw	r0, #8198	; 0x2006
			set_param.type = BT_LE_ADV_NONCONN_IND;
    590e:	f88d 3004 	strb.w	r3, [sp, #4]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    5912:	f7fd ff29 	bl	3768 <bt_hci_cmd_create>
	if (!buf) {
    5916:	4604      	mov	r4, r0
    5918:	2800      	cmp	r0, #0
    591a:	d03e      	beq.n	599a <bt_le_adv_start+0x112>
	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    591c:	220f      	movs	r2, #15
    591e:	4669      	mov	r1, sp
    5920:	3008      	adds	r0, #8
    5922:	f013 fd45 	bl	193b0 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    5926:	4621      	mov	r1, r4
    5928:	2200      	movs	r2, #0
    592a:	f242 0006 	movw	r0, #8198	; 0x2006
    592e:	f7fd ff4b 	bl	37c8 <bt_hci_cmd_send_sync>
	if (err) {
    5932:	4604      	mov	r4, r0
    5934:	2800      	cmp	r0, #0
    5936:	d1b2      	bne.n	589e <bt_le_adv_start+0x16>
	err = set_advertise_enable(true);
    5938:	2001      	movs	r0, #1
    593a:	f7fe f83b 	bl	39b4 <set_advertise_enable>
	if (err) {
    593e:	4604      	mov	r4, r0
    5940:	2800      	cmp	r0, #0
    5942:	d1ac      	bne.n	589e <bt_le_adv_start+0x16>
	if (!(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    5944:	782b      	ldrb	r3, [r5, #0]
    5946:	079b      	lsls	r3, r3, #30
    5948:	d4a9      	bmi.n	589e <bt_le_adv_start+0x16>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    594a:	2140      	movs	r1, #64	; 0x40
    594c:	4814      	ldr	r0, [pc, #80]	; (59a0 <bt_le_adv_start+0x118>)
    594e:	f7fd fe14 	bl	357a <atomic_or>
    5952:	e7a4      	b.n	589e <bt_le_adv_start+0x16>
		err = set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    5954:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    5956:	4631      	mov	r1, r6
    5958:	f242 0009 	movw	r0, #8201	; 0x2009
    595c:	f7fe f854 	bl	3a08 <set_ad>
		if (err) {
    5960:	4604      	mov	r4, r0
    5962:	2800      	cmp	r0, #0
    5964:	d0b2      	beq.n	58cc <bt_le_adv_start+0x44>
    5966:	e79a      	b.n	589e <bt_le_adv_start+0x16>
		if (param->own_addr) {
    5968:	68a8      	ldr	r0, [r5, #8]
    596a:	b170      	cbz	r0, 598a <bt_le_adv_start+0x102>
			if (!BT_ADDR_IS_NRPA(param->own_addr)) {
    596c:	7943      	ldrb	r3, [r0, #5]
    596e:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    5972:	d192      	bne.n	589a <bt_le_adv_start+0x12>
			err = set_random_address(param->own_addr);
    5974:	f7fd ff66 	bl	3844 <set_random_address>
			err = le_set_private_addr();
    5978:	4604      	mov	r4, r0
		if (err) {
    597a:	2800      	cmp	r0, #0
    597c:	d18f      	bne.n	589e <bt_le_adv_start+0x16>
		set_param.own_addr_type = BT_ADDR_LE_RANDOM;
    597e:	2301      	movs	r3, #1
    5980:	f88d 3005 	strb.w	r3, [sp, #5]
		if (sd) {
    5984:	b126      	cbz	r6, 5990 <bt_le_adv_start+0x108>
			set_param.type = BT_LE_ADV_SCAN_IND;
    5986:	2302      	movs	r3, #2
    5988:	e7be      	b.n	5908 <bt_le_adv_start+0x80>
			err = le_set_private_addr();
    598a:	f7fd ff89 	bl	38a0 <le_set_private_addr>
    598e:	e7f3      	b.n	5978 <bt_le_adv_start+0xf0>
			set_param.type = BT_LE_ADV_NONCONN_IND;
    5990:	2303      	movs	r3, #3
    5992:	e7b9      	b.n	5908 <bt_le_adv_start+0x80>
		return -EALREADY;
    5994:	f06f 0444 	mvn.w	r4, #68	; 0x44
    5998:	e781      	b.n	589e <bt_le_adv_start+0x16>
		return -ENOBUFS;
    599a:	f06f 0436 	mvn.w	r4, #54	; 0x36
    599e:	e77e      	b.n	589e <bt_le_adv_start+0x16>
    59a0:	20009d48 	.word	0x20009d48
    59a4:	20009cd8 	.word	0x20009cd8

000059a8 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
    59a8:	b510      	push	{r4, lr}
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    59aa:	f06f 0140 	mvn.w	r1, #64	; 0x40
    59ae:	4810      	ldr	r0, [pc, #64]	; (59f0 <bt_le_adv_stop+0x48>)
    59b0:	f7fd fe01 	bl	35b6 <atomic_and>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING);

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    59b4:	2105      	movs	r1, #5
    59b6:	480e      	ldr	r0, [pc, #56]	; (59f0 <bt_le_adv_stop+0x48>)
    59b8:	f7fd fdf0 	bl	359c <atomic_test_bit>
    59bc:	b910      	cbnz	r0, 59c4 <bt_le_adv_stop+0x1c>
		return 0;
    59be:	2400      	movs	r4, #0
			le_set_private_addr();
		}
	}

	return 0;
}
    59c0:	4620      	mov	r0, r4
    59c2:	bd10      	pop	{r4, pc}
	err = set_advertise_enable(false);
    59c4:	2000      	movs	r0, #0
    59c6:	f7fd fff5 	bl	39b4 <set_advertise_enable>
	if (err) {
    59ca:	4604      	mov	r4, r0
    59cc:	2800      	cmp	r0, #0
    59ce:	d1f7      	bne.n	59c0 <bt_le_adv_stop+0x18>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    59d0:	2107      	movs	r1, #7
    59d2:	4807      	ldr	r0, [pc, #28]	; (59f0 <bt_le_adv_stop+0x48>)
    59d4:	f7fd fde2 	bl	359c <atomic_test_bit>
    59d8:	2800      	cmp	r0, #0
    59da:	d0f0      	beq.n	59be <bt_le_adv_stop+0x16>
		    atomic_test_bit(bt_dev.flags, BT_DEV_ACTIVE_SCAN)) {
    59dc:	2109      	movs	r1, #9
    59de:	4804      	ldr	r0, [pc, #16]	; (59f0 <bt_le_adv_stop+0x48>)
    59e0:	f7fd fddc 	bl	359c <atomic_test_bit>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    59e4:	2800      	cmp	r0, #0
    59e6:	d0ea      	beq.n	59be <bt_le_adv_stop+0x16>
			le_set_private_addr();
    59e8:	f7fd ff5a 	bl	38a0 <le_set_private_addr>
    59ec:	e7e8      	b.n	59c0 <bt_le_adv_stop+0x18>
    59ee:	bf00      	nop
    59f0:	20009d48 	.word	0x20009d48

000059f4 <bt_buf_get_rx>:

	return bt_le_scan_update(false);
}

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, s32_t timeout)
{
    59f4:	b538      	push	{r3, r4, r5, lr}
    59f6:	4605      	mov	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    59f8:	4805      	ldr	r0, [pc, #20]	; (5a10 <bt_buf_get_rx+0x1c>)
    59fa:	f013 fc45 	bl	19288 <net_buf_alloc_fixed>
#endif

	if (buf) {
    59fe:	4604      	mov	r4, r0
    5a00:	b120      	cbz	r0, 5a0c <bt_buf_get_rx+0x18>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    5a02:	2100      	movs	r1, #0
    5a04:	3008      	adds	r0, #8
    5a06:	f013 fc5e 	bl	192c6 <net_buf_simple_reserve>
	*(u8_t *)net_buf_user_data(buf) = type;
    5a0a:	7525      	strb	r5, [r4, #20]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    5a0c:	4620      	mov	r0, r4
    5a0e:	bd38      	pop	{r3, r4, r5, pc}
    5a10:	2000aabc 	.word	0x2000aabc

00005a14 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(s32_t timeout)
{
    5a14:	b510      	push	{r4, lr}
    5a16:	4601      	mov	r1, r0
	__asm__ volatile(
    5a18:	f04f 0320 	mov.w	r3, #32
    5a1c:	f3ef 8011 	mrs	r0, BASEPRI
    5a20:	f383 8811 	msr	BASEPRI, r3
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    5a24:	4a0b      	ldr	r2, [pc, #44]	; (5a54 <bt_buf_get_cmd_complete+0x40>)
	bt_dev.sent_cmd = NULL;
    5a26:	2300      	movs	r3, #0
	buf = bt_dev.sent_cmd;
    5a28:	f8d2 40c0 	ldr.w	r4, [r2, #192]	; 0xc0
	bt_dev.sent_cmd = NULL;
    5a2c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    5a30:	f380 8811 	msr	BASEPRI, r0
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    5a34:	b924      	cbnz	r4, 5a40 <bt_buf_get_cmd_complete+0x2c>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    5a36:	2001      	movs	r0, #1
}
    5a38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    5a3c:	f7ff bfda 	b.w	59f4 <bt_buf_get_rx>
    5a40:	2201      	movs	r2, #1
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    5a42:	f104 0008 	add.w	r0, r4, #8
    5a46:	7522      	strb	r2, [r4, #20]
		buf->len = 0;
    5a48:	81a3      	strh	r3, [r4, #12]
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    5a4a:	4619      	mov	r1, r3
    5a4c:	f013 fc3b 	bl	192c6 <net_buf_simple_reserve>
}
    5a50:	4620      	mov	r0, r4
    5a52:	bd10      	pop	{r4, pc}
    5a54:	20009cd8 	.word	0x20009cd8

00005a58 <bt_pub_key_gen>:
{
	return cmd(buf)->opcode;
}

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
    5a58:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!(bt_dev.supported_commands[34] & 0x02) ||
    5a5c:	4e27      	ldr	r6, [pc, #156]	; (5afc <bt_pub_key_gen+0xa4>)
    5a5e:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
    5a62:	f003 0306 	and.w	r3, r3, #6
    5a66:	2b06      	cmp	r3, #6
{
    5a68:	4607      	mov	r7, r0
	if (!(bt_dev.supported_commands[34] & 0x02) ||
    5a6a:	d00e      	beq.n	5a8a <bt_pub_key_gen+0x32>
	    !(bt_dev.supported_commands[34] & 0x04)) {
		BT_WARN("ECC HCI commands not available");
    5a6c:	4b24      	ldr	r3, [pc, #144]	; (5b00 <bt_pub_key_gen+0xa8>)
    5a6e:	9301      	str	r3, [sp, #4]
    5a70:	9300      	str	r3, [sp, #0]
    5a72:	4a24      	ldr	r2, [pc, #144]	; (5b04 <bt_pub_key_gen+0xac>)
    5a74:	4b24      	ldr	r3, [pc, #144]	; (5b08 <bt_pub_key_gen+0xb0>)
    5a76:	4925      	ldr	r1, [pc, #148]	; (5b0c <bt_pub_key_gen+0xb4>)
    5a78:	4825      	ldr	r0, [pc, #148]	; (5b10 <bt_pub_key_gen+0xb8>)
    5a7a:	f7fc fc0b 	bl	2294 <printk>
		return -ENOTSUP;
    5a7e:	f06f 0422 	mvn.w	r4, #34	; 0x22
			cb->func(NULL);
		}
	}

	return 0;
}
    5a82:	4620      	mov	r0, r4
    5a84:	b002      	add	sp, #8
    5a86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	new_cb->_next = pub_key_cb;
    5a8a:	4d22      	ldr	r5, [pc, #136]	; (5b14 <bt_pub_key_gen+0xbc>)
    5a8c:	682b      	ldr	r3, [r5, #0]
    5a8e:	6043      	str	r3, [r0, #4]
	pub_key_cb = new_cb;
    5a90:	6028      	str	r0, [r5, #0]
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    5a92:	2110      	movs	r1, #16
    5a94:	f106 0070 	add.w	r0, r6, #112	; 0x70
    5a98:	f7fd fd6f 	bl	357a <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    5a9c:	f010 0810 	ands.w	r8, r0, #16
    5aa0:	d001      	beq.n	5aa6 <bt_pub_key_gen+0x4e>
		return 0;
    5aa2:	2400      	movs	r4, #0
    5aa4:	e7ed      	b.n	5a82 <bt_pub_key_gen+0x2a>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    5aa6:	f06f 0108 	mvn.w	r1, #8
    5aaa:	f106 0070 	add.w	r0, r6, #112	; 0x70
    5aae:	f7fd fd82 	bl	35b6 <atomic_and>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
    5ab2:	4642      	mov	r2, r8
    5ab4:	4641      	mov	r1, r8
    5ab6:	f242 0025 	movw	r0, #8229	; 0x2025
    5aba:	f7fd fe85 	bl	37c8 <bt_hci_cmd_send_sync>
	if (err) {
    5abe:	4604      	mov	r4, r0
    5ac0:	b188      	cbz	r0, 5ae6 <bt_pub_key_gen+0x8e>
		BT_ERR("Sending LE P256 Public Key command failed");
    5ac2:	4b0f      	ldr	r3, [pc, #60]	; (5b00 <bt_pub_key_gen+0xa8>)
    5ac4:	9301      	str	r3, [sp, #4]
    5ac6:	9300      	str	r3, [sp, #0]
    5ac8:	4a13      	ldr	r2, [pc, #76]	; (5b18 <bt_pub_key_gen+0xc0>)
    5aca:	4b0f      	ldr	r3, [pc, #60]	; (5b08 <bt_pub_key_gen+0xb0>)
    5acc:	490f      	ldr	r1, [pc, #60]	; (5b0c <bt_pub_key_gen+0xb4>)
    5ace:	4813      	ldr	r0, [pc, #76]	; (5b1c <bt_pub_key_gen+0xc4>)
    5ad0:	f7fc fbe0 	bl	2294 <printk>
    5ad4:	f06f 0110 	mvn.w	r1, #16
    5ad8:	f106 0070 	add.w	r0, r6, #112	; 0x70
    5adc:	f7fd fd6b 	bl	35b6 <atomic_and>
		pub_key_cb = NULL;
    5ae0:	f8c5 8000 	str.w	r8, [r5]
		return err;
    5ae4:	e7cd      	b.n	5a82 <bt_pub_key_gen+0x2a>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    5ae6:	682c      	ldr	r4, [r5, #0]
    5ae8:	2c00      	cmp	r4, #0
    5aea:	d0da      	beq.n	5aa2 <bt_pub_key_gen+0x4a>
		if (cb != new_cb) {
    5aec:	42bc      	cmp	r4, r7
    5aee:	d002      	beq.n	5af6 <bt_pub_key_gen+0x9e>
			cb->func(NULL);
    5af0:	6823      	ldr	r3, [r4, #0]
    5af2:	2000      	movs	r0, #0
    5af4:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    5af6:	6864      	ldr	r4, [r4, #4]
    5af8:	e7f6      	b.n	5ae8 <bt_pub_key_gen+0x90>
    5afa:	bf00      	nop
    5afc:	20009cd8 	.word	0x20009cd8
    5b00:	00023dae 	.word	0x00023dae
    5b04:	00024006 	.word	0x00024006
    5b08:	000236a6 	.word	0x000236a6
    5b0c:	000272d8 	.word	0x000272d8
    5b10:	00023c6d 	.word	0x00023c6d
    5b14:	2000040c 	.word	0x2000040c
    5b18:	00022d76 	.word	0x00022d76
    5b1c:	00023c9c 	.word	0x00023c9c

00005b20 <bt_dh_key_gen>:

	return NULL;
}

int bt_dh_key_gen(const u8_t remote_pk[64], bt_dh_key_cb_t cb)
{
    5b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_cp_le_generate_dhkey *cp;
	struct net_buf *buf;
	int err;

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    5b22:	4c1a      	ldr	r4, [pc, #104]	; (5b8c <bt_dh_key_gen+0x6c>)
    5b24:	6823      	ldr	r3, [r4, #0]
{
    5b26:	4607      	mov	r7, r0
    5b28:	460a      	mov	r2, r1
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    5b2a:	b113      	cbz	r3, 5b32 <bt_dh_key_gen+0x12>
		return -EBUSY;
    5b2c:	f06f 000f 	mvn.w	r0, #15
    5b30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    5b32:	2104      	movs	r1, #4
    5b34:	4816      	ldr	r0, [pc, #88]	; (5b90 <bt_dh_key_gen+0x70>)
    5b36:	f7fd fd31 	bl	359c <atomic_test_bit>
    5b3a:	4606      	mov	r6, r0
    5b3c:	2800      	cmp	r0, #0
    5b3e:	d1f5      	bne.n	5b2c <bt_dh_key_gen+0xc>
	}

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    5b40:	2103      	movs	r1, #3
    5b42:	4813      	ldr	r0, [pc, #76]	; (5b90 <bt_dh_key_gen+0x70>)
    5b44:	f7fd fd2a 	bl	359c <atomic_test_bit>
    5b48:	b1e0      	cbz	r0, 5b84 <bt_dh_key_gen+0x64>
		return -EADDRNOTAVAIL;
	}

	dh_key_cb = cb;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    5b4a:	2140      	movs	r1, #64	; 0x40
    5b4c:	f242 0026 	movw	r0, #8230	; 0x2026
	dh_key_cb = cb;
    5b50:	6022      	str	r2, [r4, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    5b52:	f7fd fe09 	bl	3768 <bt_hci_cmd_create>
	if (!buf) {
    5b56:	4605      	mov	r5, r0
    5b58:	b918      	cbnz	r0, 5b62 <bt_dh_key_gen+0x42>
		dh_key_cb = NULL;
    5b5a:	6020      	str	r0, [r4, #0]
		return -ENOBUFS;
    5b5c:	f06f 0036 	mvn.w	r0, #54	; 0x36
    5b60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	cp = net_buf_add(buf, sizeof(*cp));
    5b62:	2140      	movs	r1, #64	; 0x40
    5b64:	3008      	adds	r0, #8
    5b66:	f013 fc1d 	bl	193a4 <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
    5b6a:	2240      	movs	r2, #64	; 0x40
    5b6c:	4639      	mov	r1, r7
    5b6e:	f7fa fe10 	bl	792 <memcpy>

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
    5b72:	4632      	mov	r2, r6
    5b74:	4629      	mov	r1, r5
    5b76:	f242 0026 	movw	r0, #8230	; 0x2026
    5b7a:	f7fd fe25 	bl	37c8 <bt_hci_cmd_send_sync>
	if (err) {
    5b7e:	b118      	cbz	r0, 5b88 <bt_dh_key_gen+0x68>
		dh_key_cb = NULL;
    5b80:	6026      	str	r6, [r4, #0]
		return err;
    5b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EADDRNOTAVAIL;
    5b84:	f06f 0030 	mvn.w	r0, #48	; 0x30
	}

	return 0;
}
    5b88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5b8a:	bf00      	nop
    5b8c:	200003c8 	.word	0x200003c8
    5b90:	20009d48 	.word	0x20009d48

00005b94 <notify_connected>:
		return "(unknown)";
	}
}

static void notify_connected(struct bt_conn *conn)
{
    5b94:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    5b96:	4b06      	ldr	r3, [pc, #24]	; (5bb0 <notify_connected+0x1c>)
    5b98:	681c      	ldr	r4, [r3, #0]
{
    5b9a:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    5b9c:	b904      	cbnz	r4, 5ba0 <notify_connected+0xc>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}
}
    5b9e:	bd38      	pop	{r3, r4, r5, pc}
		if (cb->connected) {
    5ba0:	6823      	ldr	r3, [r4, #0]
    5ba2:	b113      	cbz	r3, 5baa <notify_connected+0x16>
			cb->connected(conn, conn->err);
    5ba4:	7ae9      	ldrb	r1, [r5, #11]
    5ba6:	4628      	mov	r0, r5
    5ba8:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    5baa:	69a4      	ldr	r4, [r4, #24]
    5bac:	e7f6      	b.n	5b9c <notify_connected+0x8>
    5bae:	bf00      	nop
    5bb0:	20000480 	.word	0x20000480

00005bb4 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5bb4:	f3bf 8f5b 	dmb	ish
    5bb8:	6800      	ldr	r0, [r0, #0]
    5bba:	f3bf 8f5b 	dmb	ish
}
    5bbe:	4770      	bx	lr

00005bc0 <bt_conn_reset_rx_state>:
	callback_list = cb;
}

static void bt_conn_reset_rx_state(struct bt_conn *conn)
{
	if (!conn->rx_len) {
    5bc0:	89c3      	ldrh	r3, [r0, #14]
{
    5bc2:	b510      	push	{r4, lr}
    5bc4:	4604      	mov	r4, r0
	if (!conn->rx_len) {
    5bc6:	b12b      	cbz	r3, 5bd4 <bt_conn_reset_rx_state+0x14>
		return;
	}

	net_buf_unref(conn->rx);
    5bc8:	6900      	ldr	r0, [r0, #16]
    5bca:	f013 fb8d 	bl	192e8 <net_buf_unref>
	conn->rx = NULL;
    5bce:	2300      	movs	r3, #0
    5bd0:	6123      	str	r3, [r4, #16]
	conn->rx_len = 0;
    5bd2:	81e3      	strh	r3, [r4, #14]
    5bd4:	bd10      	pop	{r4, pc}

00005bd6 <atomic_dec>:
}
    5bd6:	f3bf 8f5b 	dmb	ish
    5bda:	e850 3f00 	ldrex	r3, [r0]
    5bde:	1e5a      	subs	r2, r3, #1
    5be0:	e840 2100 	strex	r1, r2, [r0]
    5be4:	2900      	cmp	r1, #0
    5be6:	d1f8      	bne.n	5bda <atomic_dec+0x4>
    5be8:	f3bf 8f5b 	dmb	ish
    5bec:	4618      	mov	r0, r3
    5bee:	4770      	bx	lr

00005bf0 <atomic_inc>:
}
    5bf0:	f3bf 8f5b 	dmb	ish
    5bf4:	e850 3f00 	ldrex	r3, [r0]
    5bf8:	1c5a      	adds	r2, r3, #1
    5bfa:	e840 2100 	strex	r1, r2, [r0]
    5bfe:	2900      	cmp	r1, #0
    5c00:	d1f8      	bne.n	5bf4 <atomic_inc+0x4>
    5c02:	f3bf 8f5b 	dmb	ish
    5c06:	4618      	mov	r0, r3
    5c08:	4770      	bx	lr
	...

00005c0c <bt_conn_get_pkts>:
}
    5c0c:	4800      	ldr	r0, [pc, #0]	; (5c10 <bt_conn_get_pkts+0x4>)
    5c0e:	4770      	bx	lr
    5c10:	20009d64 	.word	0x20009d64

00005c14 <notify_le_param_updated>:
	for (cb = callback_list; cb; cb = cb->_next) {
    5c14:	4b08      	ldr	r3, [pc, #32]	; (5c38 <notify_le_param_updated+0x24>)
{
    5c16:	b570      	push	{r4, r5, r6, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    5c18:	681c      	ldr	r4, [r3, #0]
{
    5c1a:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    5c1c:	b904      	cbnz	r4, 5c20 <notify_le_param_updated+0xc>
}
    5c1e:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
    5c20:	68e6      	ldr	r6, [r4, #12]
    5c22:	b13e      	cbz	r6, 5c34 <notify_le_param_updated+0x20>
			cb->le_param_updated(conn, conn->le.interval,
    5c24:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
    5c28:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
    5c2c:	f8b5 105e 	ldrh.w	r1, [r5, #94]	; 0x5e
    5c30:	4628      	mov	r0, r5
    5c32:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    5c34:	69a4      	ldr	r4, [r4, #24]
    5c36:	e7f1      	b.n	5c1c <notify_le_param_updated+0x8>
    5c38:	20000480 	.word	0x20000480

00005c3c <le_param_req>:
{
    5c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5c3e:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
    5c40:	4608      	mov	r0, r1
{
    5c42:	460e      	mov	r6, r1
	if (!bt_le_conn_params_valid(param)) {
    5c44:	f7fd ff2c 	bl	3aa0 <bt_le_conn_params_valid>
    5c48:	4605      	mov	r5, r0
    5c4a:	b910      	cbnz	r0, 5c52 <le_param_req+0x16>
		return false;
    5c4c:	2500      	movs	r5, #0
}
    5c4e:	4628      	mov	r0, r5
    5c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    5c52:	4b09      	ldr	r3, [pc, #36]	; (5c78 <le_param_req+0x3c>)
    5c54:	681c      	ldr	r4, [r3, #0]
    5c56:	2c00      	cmp	r4, #0
    5c58:	d0f9      	beq.n	5c4e <le_param_req+0x12>
		if (!cb->le_param_req) {
    5c5a:	68a3      	ldr	r3, [r4, #8]
    5c5c:	b90b      	cbnz	r3, 5c62 <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
    5c5e:	69a4      	ldr	r4, [r4, #24]
    5c60:	e7f9      	b.n	5c56 <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
    5c62:	4631      	mov	r1, r6
    5c64:	4638      	mov	r0, r7
    5c66:	4798      	blx	r3
    5c68:	2800      	cmp	r0, #0
    5c6a:	d0ef      	beq.n	5c4c <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
    5c6c:	4630      	mov	r0, r6
    5c6e:	f7fd ff17 	bl	3aa0 <bt_le_conn_params_valid>
    5c72:	2800      	cmp	r0, #0
    5c74:	d1f3      	bne.n	5c5e <le_param_req+0x22>
    5c76:	e7e9      	b.n	5c4c <le_param_req+0x10>
    5c78:	20000480 	.word	0x20000480

00005c7c <bt_conn_identity_resolved>:
{
    5c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->role == BT_HCI_ROLE_MASTER) {
    5c7e:	78c3      	ldrb	r3, [r0, #3]
{
    5c80:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_MASTER) {
    5c82:	b93b      	cbnz	r3, 5c94 <bt_conn_identity_resolved+0x18>
		rpa = &conn->le.resp_addr;
    5c84:	f100 0656 	add.w	r6, r0, #86	; 0x56
	for (cb = callback_list; cb; cb = cb->_next) {
    5c88:	4b08      	ldr	r3, [pc, #32]	; (5cac <bt_conn_identity_resolved+0x30>)
    5c8a:	681d      	ldr	r5, [r3, #0]
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    5c8c:	f104 0748 	add.w	r7, r4, #72	; 0x48
	for (cb = callback_list; cb; cb = cb->_next) {
    5c90:	b91d      	cbnz	r5, 5c9a <bt_conn_identity_resolved+0x1e>
}
    5c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rpa = &conn->le.init_addr;
    5c94:	f100 064f 	add.w	r6, r0, #79	; 0x4f
    5c98:	e7f6      	b.n	5c88 <bt_conn_identity_resolved+0xc>
		if (cb->identity_resolved) {
    5c9a:	692b      	ldr	r3, [r5, #16]
    5c9c:	b11b      	cbz	r3, 5ca6 <bt_conn_identity_resolved+0x2a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    5c9e:	463a      	mov	r2, r7
    5ca0:	4631      	mov	r1, r6
    5ca2:	4620      	mov	r0, r4
    5ca4:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    5ca6:	69ad      	ldr	r5, [r5, #24]
    5ca8:	e7f2      	b.n	5c90 <bt_conn_identity_resolved+0x14>
    5caa:	bf00      	nop
    5cac:	20000480 	.word	0x20000480

00005cb0 <bt_conn_le_start_encryption>:
{
    5cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
    5cb4:	211c      	movs	r1, #28
{
    5cb6:	4682      	mov	sl, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
    5cb8:	f242 0019 	movw	r0, #8217	; 0x2019
{
    5cbc:	4691      	mov	r9, r2
    5cbe:	4698      	mov	r8, r3
    5cc0:	f8bd 4020 	ldrh.w	r4, [sp, #32]
    5cc4:	9f09      	ldr	r7, [sp, #36]	; 0x24
    5cc6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
    5cc8:	f7fd fd4e 	bl	3768 <bt_hci_cmd_create>
	if (!buf) {
    5ccc:	4606      	mov	r6, r0
    5cce:	b320      	cbz	r0, 5d1a <bt_conn_le_start_encryption+0x6a>
	cp = net_buf_add(buf, sizeof(*cp));
    5cd0:	211c      	movs	r1, #28
    5cd2:	3008      	adds	r0, #8
    5cd4:	f013 fb66 	bl	193a4 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    5cd8:	4603      	mov	r3, r0
    5cda:	f8ba 2000 	ldrh.w	r2, [sl]
    5cde:	f823 2b02 	strh.w	r2, [r3], #2
	cp->rand = rand;
    5ce2:	f8c0 9002 	str.w	r9, [r0, #2]
    5ce6:	f8c3 8004 	str.w	r8, [r3, #4]
	cp->ediv = ediv;
    5cea:	8144      	strh	r4, [r0, #10]
	memcpy(cp->ltk, ltk, len);
    5cec:	f100 040c 	add.w	r4, r0, #12
    5cf0:	462a      	mov	r2, r5
    5cf2:	4639      	mov	r1, r7
    5cf4:	4620      	mov	r0, r4
    5cf6:	f7fa fd4c 	bl	792 <memcpy>
	if (len < sizeof(cp->ltk)) {
    5cfa:	2d0f      	cmp	r5, #15
    5cfc:	d805      	bhi.n	5d0a <bt_conn_le_start_encryption+0x5a>
		memset(cp->ltk + len, 0, sizeof(cp->ltk) - len);
    5cfe:	f1c5 0210 	rsb	r2, r5, #16
    5d02:	2100      	movs	r1, #0
    5d04:	1960      	adds	r0, r4, r5
    5d06:	f7fa fd70 	bl	7ea <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
    5d0a:	4631      	mov	r1, r6
    5d0c:	2200      	movs	r2, #0
    5d0e:	f242 0019 	movw	r0, #8217	; 0x2019
}
    5d12:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
    5d16:	f7fd bd57 	b.w	37c8 <bt_hci_cmd_send_sync>
}
    5d1a:	f06f 0036 	mvn.w	r0, #54	; 0x36
    5d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

00005d24 <bt_conn_security_changed>:
{
    5d24:	b538      	push	{r3, r4, r5, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    5d26:	4b06      	ldr	r3, [pc, #24]	; (5d40 <bt_conn_security_changed+0x1c>)
    5d28:	681c      	ldr	r4, [r3, #0]
{
    5d2a:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    5d2c:	b904      	cbnz	r4, 5d30 <bt_conn_security_changed+0xc>
}
    5d2e:	bd38      	pop	{r3, r4, r5, pc}
		if (cb->security_changed) {
    5d30:	6963      	ldr	r3, [r4, #20]
    5d32:	b113      	cbz	r3, 5d3a <bt_conn_security_changed+0x16>
			cb->security_changed(conn, conn->sec_level);
    5d34:	7a29      	ldrb	r1, [r5, #8]
    5d36:	4628      	mov	r0, r5
    5d38:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    5d3a:	69a4      	ldr	r4, [r4, #24]
    5d3c:	e7f6      	b.n	5d2c <bt_conn_security_changed+0x8>
    5d3e:	bf00      	nop
    5d40:	20000480 	.word	0x20000480

00005d44 <bt_conn_security>:
{
    5d44:	b530      	push	{r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    5d46:	7b03      	ldrb	r3, [r0, #12]
    5d48:	2b03      	cmp	r3, #3
{
    5d4a:	b085      	sub	sp, #20
    5d4c:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
    5d4e:	d156      	bne.n	5dfe <bt_conn_security+0xba>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
    5d50:	7a03      	ldrb	r3, [r0, #8]
    5d52:	428b      	cmp	r3, r1
    5d54:	d302      	bcc.n	5d5c <bt_conn_security+0x18>
		return 0;
    5d56:	2000      	movs	r0, #0
}
    5d58:	b005      	add	sp, #20
    5d5a:	bd30      	pop	{r4, r5, pc}
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
    5d5c:	7a43      	ldrb	r3, [r0, #9]
    5d5e:	428b      	cmp	r3, r1
    5d60:	d2f9      	bcs.n	5d56 <bt_conn_security+0x12>
	switch (conn->role) {
    5d62:	78c3      	ldrb	r3, [r0, #3]
	conn->required_sec_level = sec;
    5d64:	7241      	strb	r1, [r0, #9]
	switch (conn->role) {
    5d66:	b123      	cbz	r3, 5d72 <bt_conn_security+0x2e>
    5d68:	2b01      	cmp	r3, #1
    5d6a:	d045      	beq.n	5df8 <bt_conn_security+0xb4>
		return -EINVAL;
    5d6c:	f06f 0015 	mvn.w	r0, #21
    5d70:	e01a      	b.n	5da8 <bt_conn_security+0x64>
		if (!conn->le.keys) {
    5d72:	6f03      	ldr	r3, [r0, #112]	; 0x70
    5d74:	2b00      	cmp	r3, #0
    5d76:	d145      	bne.n	5e04 <bt_conn_security+0xc0>
						     &conn->le.dst);
    5d78:	f100 0548 	add.w	r5, r0, #72	; 0x48
			conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
    5d7c:	4629      	mov	r1, r5
    5d7e:	2020      	movs	r0, #32
    5d80:	f005 fca2 	bl	b6c8 <bt_keys_find>
    5d84:	6720      	str	r0, [r4, #112]	; 0x70
			if (!conn->le.keys) {
    5d86:	2800      	cmp	r0, #0
    5d88:	d13c      	bne.n	5e04 <bt_conn_security+0xc0>
				conn->le.keys = bt_keys_find(BT_KEYS_LTK,
    5d8a:	4629      	mov	r1, r5
    5d8c:	2004      	movs	r0, #4
    5d8e:	f005 fc9b 	bl	b6c8 <bt_keys_find>
    5d92:	6720      	str	r0, [r4, #112]	; 0x70
		if (!conn->le.keys ||
    5d94:	b118      	cbz	r0, 5d9e <bt_conn_security+0x5a>
    5d96:	8983      	ldrh	r3, [r0, #12]
    5d98:	f003 0324 	and.w	r3, r3, #36	; 0x24
    5d9c:	b93b      	cbnz	r3, 5dae <bt_conn_security+0x6a>
			return bt_smp_send_pairing_req(conn);
    5d9e:	4620      	mov	r0, r4
    5da0:	f005 fab2 	bl	b308 <bt_smp_send_pairing_req>
	if (err) {
    5da4:	2800      	cmp	r0, #0
    5da6:	d0d6      	beq.n	5d56 <bt_conn_security+0x12>
		conn->required_sec_level = conn->sec_level;
    5da8:	7a23      	ldrb	r3, [r4, #8]
    5daa:	7263      	strb	r3, [r4, #9]
    5dac:	e7d4      	b.n	5d58 <bt_conn_security+0x14>
		if (conn->required_sec_level > BT_SECURITY_MEDIUM &&
    5dae:	7a63      	ldrb	r3, [r4, #9]
    5db0:	2b02      	cmp	r3, #2
    5db2:	d904      	bls.n	5dbe <bt_conn_security+0x7a>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    5db4:	3008      	adds	r0, #8
    5db6:	f7ff fefd 	bl	5bb4 <atomic_get>
    5dba:	07c1      	lsls	r1, r0, #31
    5dbc:	d5ef      	bpl.n	5d9e <bt_conn_security+0x5a>
		if (conn->required_sec_level > BT_SECURITY_HIGH &&
    5dbe:	7a63      	ldrb	r3, [r4, #9]
    5dc0:	2b03      	cmp	r3, #3
    5dc2:	d909      	bls.n	5dd8 <bt_conn_security+0x94>
		    !atomic_test_bit(conn->le.keys->flags,
    5dc4:	6f20      	ldr	r0, [r4, #112]	; 0x70
    5dc6:	3008      	adds	r0, #8
    5dc8:	f7ff fef4 	bl	5bb4 <atomic_get>
		if (conn->required_sec_level > BT_SECURITY_HIGH &&
    5dcc:	07c2      	lsls	r2, r0, #31
    5dce:	d403      	bmi.n	5dd8 <bt_conn_security+0x94>
		    !(conn->le.keys->keys & BT_KEYS_LTK_P256)) {
    5dd0:	6f23      	ldr	r3, [r4, #112]	; 0x70
				     BT_KEYS_AUTHENTICATED) &&
    5dd2:	899b      	ldrh	r3, [r3, #12]
    5dd4:	069b      	lsls	r3, r3, #26
    5dd6:	d5e2      	bpl.n	5d9e <bt_conn_security+0x5a>
						   conn->le.keys->ltk.rand,
    5dd8:	6f23      	ldr	r3, [r4, #112]	; 0x70
		return bt_conn_le_start_encryption(conn,
    5dda:	79da      	ldrb	r2, [r3, #7]
    5ddc:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
    5de0:	9202      	str	r2, [sp, #8]
						   conn->le.keys->ltk.val,
    5de2:	f103 021a 	add.w	r2, r3, #26
		return bt_conn_le_start_encryption(conn,
    5de6:	9201      	str	r2, [sp, #4]
    5de8:	8b1b      	ldrh	r3, [r3, #24]
    5dea:	9300      	str	r3, [sp, #0]
    5dec:	4602      	mov	r2, r0
    5dee:	460b      	mov	r3, r1
    5df0:	4620      	mov	r0, r4
    5df2:	f7ff ff5d 	bl	5cb0 <bt_conn_le_start_encryption>
    5df6:	e7d5      	b.n	5da4 <bt_conn_security+0x60>
		return bt_smp_send_security_req(conn);
    5df8:	f005 fa42 	bl	b280 <bt_smp_send_security_req>
    5dfc:	e7d2      	b.n	5da4 <bt_conn_security+0x60>
		return -ENOTCONN;
    5dfe:	f06f 0038 	mvn.w	r0, #56	; 0x38
    5e02:	e7a9      	b.n	5d58 <bt_conn_security+0x14>
		if (!conn->le.keys ||
    5e04:	6f20      	ldr	r0, [r4, #112]	; 0x70
    5e06:	e7c6      	b.n	5d96 <bt_conn_security+0x52>

00005e08 <bt_conn_cb_register>:
	cb->_next = callback_list;
    5e08:	4b02      	ldr	r3, [pc, #8]	; (5e14 <bt_conn_cb_register+0xc>)
    5e0a:	681a      	ldr	r2, [r3, #0]
    5e0c:	6182      	str	r2, [r0, #24]
	callback_list = cb;
    5e0e:	6018      	str	r0, [r3, #0]
    5e10:	4770      	bx	lr
    5e12:	bf00      	nop
    5e14:	20000480 	.word	0x20000480

00005e18 <bt_conn_recv>:
	u16_t len;

	BT_DBG("handle %u len %u flags %02x", conn->handle, buf->len, flags);

	/* Check packet boundary flags */
	switch (flags) {
    5e18:	2a01      	cmp	r2, #1
{
    5e1a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    5e1c:	4604      	mov	r4, r0
    5e1e:	460d      	mov	r5, r1
	switch (flags) {
    5e20:	d01b      	beq.n	5e5a <bt_conn_recv+0x42>
    5e22:	2a02      	cmp	r2, #2
    5e24:	d16b      	bne.n	5efe <bt_conn_recv+0xe6>
	case BT_ACL_START:
		hdr = (void *)buf->data;
		len = sys_le16_to_cpu(hdr->len);
    5e26:	688b      	ldr	r3, [r1, #8]
    5e28:	881e      	ldrh	r6, [r3, #0]

		BT_DBG("First, len %u final %u", buf->len, len);

		if (conn->rx_len) {
    5e2a:	89c3      	ldrh	r3, [r0, #14]
    5e2c:	b15b      	cbz	r3, 5e46 <bt_conn_recv+0x2e>
			BT_ERR("Unexpected first L2CAP frame");
    5e2e:	4b3d      	ldr	r3, [pc, #244]	; (5f24 <bt_conn_recv+0x10c>)
    5e30:	9301      	str	r3, [sp, #4]
    5e32:	9300      	str	r3, [sp, #0]
    5e34:	4a3c      	ldr	r2, [pc, #240]	; (5f28 <bt_conn_recv+0x110>)
    5e36:	4b3d      	ldr	r3, [pc, #244]	; (5f2c <bt_conn_recv+0x114>)
    5e38:	493d      	ldr	r1, [pc, #244]	; (5f30 <bt_conn_recv+0x118>)
    5e3a:	483e      	ldr	r0, [pc, #248]	; (5f34 <bt_conn_recv+0x11c>)
    5e3c:	f7fc fa2a 	bl	2294 <printk>
			bt_conn_reset_rx_state(conn);
    5e40:	4620      	mov	r0, r4
    5e42:	f7ff febd 	bl	5bc0 <bt_conn_reset_rx_state>
		}

		conn->rx_len = (sizeof(*hdr) + len) - buf->len;
    5e46:	89ab      	ldrh	r3, [r5, #12]
    5e48:	1af3      	subs	r3, r6, r3
    5e4a:	3304      	adds	r3, #4
    5e4c:	b29b      	uxth	r3, r3
    5e4e:	81e3      	strh	r3, [r4, #14]
		BT_DBG("rx_len %u", conn->rx_len);
		if (conn->rx_len) {
    5e50:	2b00      	cmp	r3, #0
    5e52:	d042      	beq.n	5eda <bt_conn_recv+0xc2>
			conn->rx = buf;
    5e54:	6125      	str	r5, [r4, #16]
	}

	BT_DBG("Successfully parsed %u byte L2CAP packet", buf->len);

	bt_l2cap_recv(conn, buf);
}
    5e56:	b004      	add	sp, #16
    5e58:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->rx_len) {
    5e5a:	89c3      	ldrh	r3, [r0, #14]
    5e5c:	b98b      	cbnz	r3, 5e82 <bt_conn_recv+0x6a>
			BT_ERR("Unexpected L2CAP continuation");
    5e5e:	4b31      	ldr	r3, [pc, #196]	; (5f24 <bt_conn_recv+0x10c>)
    5e60:	9301      	str	r3, [sp, #4]
    5e62:	9300      	str	r3, [sp, #0]
    5e64:	4a30      	ldr	r2, [pc, #192]	; (5f28 <bt_conn_recv+0x110>)
    5e66:	4b31      	ldr	r3, [pc, #196]	; (5f2c <bt_conn_recv+0x114>)
    5e68:	4931      	ldr	r1, [pc, #196]	; (5f30 <bt_conn_recv+0x118>)
    5e6a:	4833      	ldr	r0, [pc, #204]	; (5f38 <bt_conn_recv+0x120>)
			BT_ERR("L2CAP data overflow");
    5e6c:	f7fc fa12 	bl	2294 <printk>
			bt_conn_reset_rx_state(conn);
    5e70:	4620      	mov	r0, r4
    5e72:	f7ff fea5 	bl	5bc0 <bt_conn_reset_rx_state>
			net_buf_unref(buf);
    5e76:	4628      	mov	r0, r5
}
    5e78:	b004      	add	sp, #16
    5e7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
    5e7e:	f013 ba33 	b.w	192e8 <net_buf_unref>
		if (buf->len > conn->rx_len) {
    5e82:	898e      	ldrh	r6, [r1, #12]
    5e84:	42b3      	cmp	r3, r6
    5e86:	d207      	bcs.n	5e98 <bt_conn_recv+0x80>
			BT_ERR("L2CAP data overflow");
    5e88:	4b26      	ldr	r3, [pc, #152]	; (5f24 <bt_conn_recv+0x10c>)
    5e8a:	9301      	str	r3, [sp, #4]
    5e8c:	9300      	str	r3, [sp, #0]
    5e8e:	4a26      	ldr	r2, [pc, #152]	; (5f28 <bt_conn_recv+0x110>)
    5e90:	4b26      	ldr	r3, [pc, #152]	; (5f2c <bt_conn_recv+0x114>)
    5e92:	4927      	ldr	r1, [pc, #156]	; (5f30 <bt_conn_recv+0x118>)
    5e94:	4829      	ldr	r0, [pc, #164]	; (5f3c <bt_conn_recv+0x124>)
    5e96:	e7e9      	b.n	5e6c <bt_conn_recv+0x54>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    5e98:	6900      	ldr	r0, [r0, #16]
    5e9a:	3008      	adds	r0, #8
    5e9c:	f013 faee 	bl	1947c <net_buf_simple_tailroom>
    5ea0:	4286      	cmp	r6, r0
    5ea2:	d907      	bls.n	5eb4 <bt_conn_recv+0x9c>
			BT_ERR("Not enough buffer space for L2CAP data");
    5ea4:	4b1f      	ldr	r3, [pc, #124]	; (5f24 <bt_conn_recv+0x10c>)
    5ea6:	9301      	str	r3, [sp, #4]
    5ea8:	9300      	str	r3, [sp, #0]
    5eaa:	4a1f      	ldr	r2, [pc, #124]	; (5f28 <bt_conn_recv+0x110>)
    5eac:	4b1f      	ldr	r3, [pc, #124]	; (5f2c <bt_conn_recv+0x114>)
    5eae:	4920      	ldr	r1, [pc, #128]	; (5f30 <bt_conn_recv+0x118>)
    5eb0:	4823      	ldr	r0, [pc, #140]	; (5f40 <bt_conn_recv+0x128>)
    5eb2:	e7db      	b.n	5e6c <bt_conn_recv+0x54>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
    5eb4:	6920      	ldr	r0, [r4, #16]
    5eb6:	89aa      	ldrh	r2, [r5, #12]
    5eb8:	68a9      	ldr	r1, [r5, #8]
    5eba:	3008      	adds	r0, #8
    5ebc:	f013 fa78 	bl	193b0 <net_buf_simple_add_mem>
		conn->rx_len -= buf->len;
    5ec0:	89e3      	ldrh	r3, [r4, #14]
    5ec2:	89aa      	ldrh	r2, [r5, #12]
    5ec4:	1a9b      	subs	r3, r3, r2
    5ec6:	81e3      	strh	r3, [r4, #14]
		net_buf_unref(buf);
    5ec8:	4628      	mov	r0, r5
    5eca:	f013 fa0d 	bl	192e8 <net_buf_unref>
		if (conn->rx_len) {
    5ece:	89e3      	ldrh	r3, [r4, #14]
    5ed0:	2b00      	cmp	r3, #0
    5ed2:	d1c0      	bne.n	5e56 <bt_conn_recv+0x3e>
		buf = conn->rx;
    5ed4:	6925      	ldr	r5, [r4, #16]
		conn->rx_len = 0;
    5ed6:	81e3      	strh	r3, [r4, #14]
		conn->rx = NULL;
    5ed8:	6123      	str	r3, [r4, #16]
	len = sys_le16_to_cpu(hdr->len);
    5eda:	68ab      	ldr	r3, [r5, #8]
	if (sizeof(*hdr) + len != buf->len) {
    5edc:	89a9      	ldrh	r1, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
    5ede:	881a      	ldrh	r2, [r3, #0]
	if (sizeof(*hdr) + len != buf->len) {
    5ee0:	1d13      	adds	r3, r2, #4
    5ee2:	428b      	cmp	r3, r1
    5ee4:	d016      	beq.n	5f14 <bt_conn_recv+0xfc>
		BT_ERR("ACL len mismatch (%u != %u)", len, buf->len);
    5ee6:	4b0f      	ldr	r3, [pc, #60]	; (5f24 <bt_conn_recv+0x10c>)
    5ee8:	9303      	str	r3, [sp, #12]
    5eea:	9102      	str	r1, [sp, #8]
    5eec:	9201      	str	r2, [sp, #4]
    5eee:	9300      	str	r3, [sp, #0]
    5ef0:	4a0d      	ldr	r2, [pc, #52]	; (5f28 <bt_conn_recv+0x110>)
    5ef2:	4b0e      	ldr	r3, [pc, #56]	; (5f2c <bt_conn_recv+0x114>)
    5ef4:	490e      	ldr	r1, [pc, #56]	; (5f30 <bt_conn_recv+0x118>)
    5ef6:	4813      	ldr	r0, [pc, #76]	; (5f44 <bt_conn_recv+0x12c>)
    5ef8:	f7fc f9cc 	bl	2294 <printk>
    5efc:	e7bb      	b.n	5e76 <bt_conn_recv+0x5e>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    5efe:	4b09      	ldr	r3, [pc, #36]	; (5f24 <bt_conn_recv+0x10c>)
    5f00:	9302      	str	r3, [sp, #8]
	switch (flags) {
    5f02:	9201      	str	r2, [sp, #4]
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    5f04:	9300      	str	r3, [sp, #0]
    5f06:	4a08      	ldr	r2, [pc, #32]	; (5f28 <bt_conn_recv+0x110>)
    5f08:	4b08      	ldr	r3, [pc, #32]	; (5f2c <bt_conn_recv+0x114>)
    5f0a:	4909      	ldr	r1, [pc, #36]	; (5f30 <bt_conn_recv+0x118>)
    5f0c:	480e      	ldr	r0, [pc, #56]	; (5f48 <bt_conn_recv+0x130>)
    5f0e:	f7fc f9c1 	bl	2294 <printk>
    5f12:	e7ad      	b.n	5e70 <bt_conn_recv+0x58>
	bt_l2cap_recv(conn, buf);
    5f14:	4629      	mov	r1, r5
    5f16:	4620      	mov	r0, r4
}
    5f18:	b004      	add	sp, #16
    5f1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
    5f1e:	f001 b9cd 	b.w	72bc <bt_l2cap_recv>
    5f22:	bf00      	nop
    5f24:	00023dae 	.word	0x00023dae
    5f28:	00022d76 	.word	0x00022d76
    5f2c:	000242d4 	.word	0x000242d4
    5f30:	000272d8 	.word	0x000272d8
    5f34:	00024320 	.word	0x00024320
    5f38:	0002434d 	.word	0x0002434d
    5f3c:	0002437b 	.word	0x0002437b
    5f40:	0002439f 	.word	0x0002439f
    5f44:	00024404 	.word	0x00024404
    5f48:	000243d6 	.word	0x000243d6

00005f4c <bt_conn_send_cb>:
int bt_conn_send_cb(struct bt_conn *conn, struct net_buf *buf,
		    bt_conn_tx_cb_t cb)
{
	BT_DBG("conn handle %u buf len %u cb %p", conn->handle, buf->len, cb);

	if (conn->state != BT_CONN_CONNECTED) {
    5f4c:	7b03      	ldrb	r3, [r0, #12]
    5f4e:	2b03      	cmp	r3, #3
{
    5f50:	b513      	push	{r0, r1, r4, lr}
    5f52:	460c      	mov	r4, r1
	if (conn->state != BT_CONN_CONNECTED) {
    5f54:	d00f      	beq.n	5f76 <bt_conn_send_cb+0x2a>
		BT_ERR("not connected!");
    5f56:	4b0b      	ldr	r3, [pc, #44]	; (5f84 <bt_conn_send_cb+0x38>)
    5f58:	9301      	str	r3, [sp, #4]
    5f5a:	9300      	str	r3, [sp, #0]
    5f5c:	4a0a      	ldr	r2, [pc, #40]	; (5f88 <bt_conn_send_cb+0x3c>)
    5f5e:	4b0b      	ldr	r3, [pc, #44]	; (5f8c <bt_conn_send_cb+0x40>)
    5f60:	490b      	ldr	r1, [pc, #44]	; (5f90 <bt_conn_send_cb+0x44>)
    5f62:	480c      	ldr	r0, [pc, #48]	; (5f94 <bt_conn_send_cb+0x48>)
    5f64:	f7fc f996 	bl	2294 <printk>
		net_buf_unref(buf);
    5f68:	4620      	mov	r0, r4
    5f6a:	f013 f9bd 	bl	192e8 <net_buf_unref>
		return -ENOTCONN;
    5f6e:	f06f 0038 	mvn.w	r0, #56	; 0x38

	conn_tx(buf)->cb = cb;

	net_buf_put(&conn->tx_queue, buf);
	return 0;
}
    5f72:	b002      	add	sp, #8
    5f74:	bd10      	pop	{r4, pc}
	net_buf_put(&conn->tx_queue, buf);
    5f76:	302c      	adds	r0, #44	; 0x2c
	conn_tx(buf)->cb = cb;
    5f78:	614a      	str	r2, [r1, #20]
	net_buf_put(&conn->tx_queue, buf);
    5f7a:	f013 f9a8 	bl	192ce <net_buf_put>
	return 0;
    5f7e:	2000      	movs	r0, #0
    5f80:	e7f7      	b.n	5f72 <bt_conn_send_cb+0x26>
    5f82:	bf00      	nop
    5f84:	00023dae 	.word	0x00023dae
    5f88:	00022d76 	.word	0x00022d76
    5f8c:	000242e1 	.word	0x000242e1
    5f90:	000272d8 	.word	0x000272d8
    5f94:	00024430 	.word	0x00024430

00005f98 <bt_conn_notify_tx>:
	tx->cb = NULL;
	sys_slist_prepend(&free_tx, &tx->node);
}

void bt_conn_notify_tx(struct bt_conn *conn)
{
    5f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	node->next = list->head;
    5f9c:	4d0d      	ldr	r5, [pc, #52]	; (5fd4 <bt_conn_notify_tx+0x3c>)
    5f9e:	4606      	mov	r6, r0
	struct bt_conn_tx *tx;

	BT_DBG("conn %p", conn);

	while ((tx = k_fifo_get(&conn->tx_notify, K_NO_WAIT))) {
    5fa0:	f100 071c 	add.w	r7, r0, #28
    5fa4:	f04f 0800 	mov.w	r8, #0
    5fa8:	2100      	movs	r1, #0
    5faa:	4638      	mov	r0, r7
    5fac:	f01b fbd7 	bl	2175e <k_queue_get>
    5fb0:	4604      	mov	r4, r0
    5fb2:	b908      	cbnz	r0, 5fb8 <bt_conn_notify_tx+0x20>
			tx->cb(conn);
		}

		tx_free(tx);
	}
}
    5fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (tx->cb) {
    5fb8:	6863      	ldr	r3, [r4, #4]
    5fba:	b10b      	cbz	r3, 5fc0 <bt_conn_notify_tx+0x28>
			tx->cb(conn);
    5fbc:	4630      	mov	r0, r6
    5fbe:	4798      	blx	r3
    5fc0:	682b      	ldr	r3, [r5, #0]
    5fc2:	6023      	str	r3, [r4, #0]
	if (!list->tail) {
    5fc4:	686b      	ldr	r3, [r5, #4]
	tx->cb = NULL;
    5fc6:	f8c4 8004 	str.w	r8, [r4, #4]
	list->head = node;
    5fca:	602c      	str	r4, [r5, #0]
	if (!list->tail) {
    5fcc:	2b00      	cmp	r3, #0
    5fce:	d1eb      	bne.n	5fa8 <bt_conn_notify_tx+0x10>
		list->tail = list->head;
    5fd0:	606c      	str	r4, [r5, #4]
    5fd2:	e7e7      	b.n	5fa4 <bt_conn_notify_tx+0xc>
    5fd4:	20000530 	.word	0x20000530

00005fd8 <send_frag>:
	tx_free(CONTAINER_OF(node, struct bt_conn_tx, node));
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, u8_t flags,
		      bool always_consume)
{
    5fd8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    5fdc:	4605      	mov	r5, r0
    5fde:	460f      	mov	r7, r1
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    5fe0:	4843      	ldr	r0, [pc, #268]	; (60f0 <send_frag+0x118>)
    5fe2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    5fe6:	4698      	mov	r8, r3
    5fe8:	4614      	mov	r4, r2
    5fea:	f01b fe3f 	bl	21c6c <_impl_k_sem_take>
		if (!atomic_get(&conns[i].ref)) {
    5fee:	4b41      	ldr	r3, [pc, #260]	; (60f4 <send_frag+0x11c>)
    5ff0:	f103 0044 	add.w	r0, r3, #68	; 0x44
    5ff4:	f7ff fdde 	bl	5bb4 <atomic_get>
    5ff8:	b130      	cbz	r0, 6008 <send_frag+0x30>
		if (conns[i].state == BT_CONN_CONNECTED ||
    5ffa:	7b1a      	ldrb	r2, [r3, #12]
    5ffc:	3a03      	subs	r2, #3
    5ffe:	2a01      	cmp	r2, #1
    6000:	d802      	bhi.n	6008 <send_frag+0x30>
			bt_conn_notify_tx(&conns[i]);
    6002:	4618      	mov	r0, r3
    6004:	f7ff ffc8 	bl	5f98 <bt_conn_notify_tx>

	/* Make sure we notify and free up any pending tx contexts */
	notify_tx();

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
    6008:	7b2b      	ldrb	r3, [r5, #12]
    600a:	2b03      	cmp	r3, #3
    600c:	d153      	bne.n	60b6 <send_frag+0xde>
		goto fail;
	}

	hdr = net_buf_push(buf, sizeof(*hdr));
    600e:	2104      	movs	r1, #4
    6010:	f107 0008 	add.w	r0, r7, #8
    6014:	f013 f9fd 	bl	19412 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    6018:	882a      	ldrh	r2, [r5, #0]
	sys_snode_t *node = list->head;
    601a:	4e37      	ldr	r6, [pc, #220]	; (60f8 <send_frag+0x120>)
    601c:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
    6020:	8002      	strh	r2, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    6022:	89bb      	ldrh	r3, [r7, #12]
    6024:	6834      	ldr	r4, [r6, #0]
	if (list->tail == node) {
    6026:	6871      	ldr	r1, [r6, #4]

	cb = conn_tx(buf)->cb;
    6028:	697a      	ldr	r2, [r7, #20]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    602a:	3b04      	subs	r3, #4
    602c:	8043      	strh	r3, [r0, #2]
    602e:	2302      	movs	r3, #2
    6030:	753b      	strb	r3, [r7, #20]
	list->head = node->next;
    6032:	6823      	ldr	r3, [r4, #0]
    6034:	6033      	str	r3, [r6, #0]
	if (list->tail == node) {
    6036:	428c      	cmp	r4, r1
		list->tail = list->head;
    6038:	bf08      	it	eq
    603a:	6073      	streq	r3, [r6, #4]
	CONTAINER_OF(node, struct bt_conn_tx, node)->cb = cb;
    603c:	6062      	str	r2, [r4, #4]
	__asm__ volatile(
    603e:	f04f 0320 	mov.w	r3, #32
    6042:	f3ef 8211 	mrs	r2, BASEPRI
    6046:	f383 8811 	msr	BASEPRI, r3
	node->next = NULL;
    604a:	2300      	movs	r3, #0
    604c:	6023      	str	r3, [r4, #0]
	if (!list->tail) {
    604e:	69ab      	ldr	r3, [r5, #24]
    6050:	2b00      	cmp	r3, #0
    6052:	d13f      	bne.n	60d4 <send_frag+0xfc>
		list->tail = node;
    6054:	61ac      	str	r4, [r5, #24]
		list->head = node;
    6056:	616c      	str	r4, [r5, #20]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    6058:	f382 8811 	msr	BASEPRI, r2
	bt_buf_set_type(buf, BT_BUF_ACL_OUT);

	node = add_pending_tx(conn, cb);

	err = bt_send(buf);
    605c:	4638      	mov	r0, r7
    605e:	f7fd ff03 	bl	3e68 <bt_send>
	if (err) {
    6062:	2800      	cmp	r0, #0
    6064:	d041      	beq.n	60ea <send_frag+0x112>
		BT_ERR("Unable to send to driver (err %d)", err);
    6066:	4b25      	ldr	r3, [pc, #148]	; (60fc <send_frag+0x124>)
    6068:	9302      	str	r3, [sp, #8]
    606a:	9001      	str	r0, [sp, #4]
    606c:	9300      	str	r3, [sp, #0]
    606e:	4a24      	ldr	r2, [pc, #144]	; (6100 <send_frag+0x128>)
    6070:	4b24      	ldr	r3, [pc, #144]	; (6104 <send_frag+0x12c>)
    6072:	4925      	ldr	r1, [pc, #148]	; (6108 <send_frag+0x130>)
    6074:	4825      	ldr	r0, [pc, #148]	; (610c <send_frag+0x134>)
    6076:	f7fc f90d 	bl	2294 <printk>
	__asm__ volatile(
    607a:	f04f 0320 	mov.w	r3, #32
    607e:	f3ef 8011 	mrs	r0, BASEPRI
    6082:	f383 8811 	msr	BASEPRI, r3
    6086:	696b      	ldr	r3, [r5, #20]
	sys_snode_t *prev = NULL;
    6088:	2200      	movs	r2, #0
	SYS_SLIST_FOR_EACH_NODE(list, test) {
    608a:	b153      	cbz	r3, 60a2 <send_frag+0xca>
		if (test == node) {
    608c:	429c      	cmp	r4, r3
    608e:	d129      	bne.n	60e4 <send_frag+0x10c>
    6090:	6823      	ldr	r3, [r4, #0]
    6092:	69a9      	ldr	r1, [r5, #24]
	if (!prev_node) {
    6094:	bb0a      	cbnz	r2, 60da <send_frag+0x102>
		if (list->tail == node) {
    6096:	428c      	cmp	r4, r1
		list->head = node->next;
    6098:	616b      	str	r3, [r5, #20]
		if (list->tail == node) {
    609a:	d100      	bne.n	609e <send_frag+0xc6>
			list->tail = list->head;
    609c:	61ab      	str	r3, [r5, #24]
	node->next = NULL;
    609e:	2300      	movs	r3, #0
    60a0:	6023      	str	r3, [r4, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    60a2:	f380 8811 	msr	BASEPRI, r0
	tx->cb = NULL;
    60a6:	2300      	movs	r3, #0
    60a8:	6063      	str	r3, [r4, #4]
	node->next = list->head;
    60aa:	6833      	ldr	r3, [r6, #0]
    60ac:	6023      	str	r3, [r4, #0]
	if (!list->tail) {
    60ae:	6873      	ldr	r3, [r6, #4]
	list->head = node;
    60b0:	6034      	str	r4, [r6, #0]
	if (!list->tail) {
    60b2:	b903      	cbnz	r3, 60b6 <send_frag+0xde>
		list->tail = list->head;
    60b4:	6074      	str	r4, [r6, #4]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    60b6:	480e      	ldr	r0, [pc, #56]	; (60f0 <send_frag+0x118>)
    60b8:	f01b fd78 	bl	21bac <_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (always_consume) {
    60bc:	f1b8 0f00 	cmp.w	r8, #0
    60c0:	d004      	beq.n	60cc <send_frag+0xf4>
		net_buf_unref(buf);
    60c2:	4638      	mov	r0, r7
    60c4:	f013 f910 	bl	192e8 <net_buf_unref>
	}
	return false;
    60c8:	f04f 0800 	mov.w	r8, #0
}
    60cc:	4640      	mov	r0, r8
    60ce:	b004      	add	sp, #16
    60d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		list->tail->next = node;
    60d4:	601c      	str	r4, [r3, #0]
		list->tail = node;
    60d6:	61ac      	str	r4, [r5, #24]
    60d8:	e7be      	b.n	6058 <send_frag+0x80>
		if (list->tail == node) {
    60da:	428c      	cmp	r4, r1
		prev_node->next = node->next;
    60dc:	6013      	str	r3, [r2, #0]
			list->tail = prev_node;
    60de:	bf08      	it	eq
    60e0:	61aa      	streq	r2, [r5, #24]
    60e2:	e7dc      	b.n	609e <send_frag+0xc6>
	SYS_SLIST_FOR_EACH_NODE(list, test) {
    60e4:	461a      	mov	r2, r3
    60e6:	681b      	ldr	r3, [r3, #0]
    60e8:	e7cf      	b.n	608a <send_frag+0xb2>
	return true;
    60ea:	f04f 0801 	mov.w	r8, #1
    60ee:	e7ed      	b.n	60cc <send_frag+0xf4>
    60f0:	20009d64 	.word	0x20009d64
    60f4:	20000494 	.word	0x20000494
    60f8:	20000530 	.word	0x20000530
    60fc:	00023dae 	.word	0x00023dae
    6100:	00022d76 	.word	0x00022d76
    6104:	000242f1 	.word	0x000242f1
    6108:	000272d8 	.word	0x000272d8
    610c:	0002370a 	.word	0x0002370a

00006110 <conn_cleanup>:

static struct k_poll_signal conn_change =
		K_POLL_SIGNAL_INITIALIZER(conn_change);

static void conn_cleanup(struct bt_conn *conn)
{
    6110:	b538      	push	{r3, r4, r5, lr}
    6112:	4604      	mov	r4, r0
	struct net_buf *buf;

	/* Give back any allocated buffers */
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    6114:	f100 052c 	add.w	r5, r0, #44	; 0x2c
    6118:	2100      	movs	r1, #0
    611a:	4628      	mov	r0, r5
    611c:	f013 f8ba 	bl	19294 <net_buf_get>
    6120:	b958      	cbnz	r0, 613a <conn_cleanup+0x2a>
		net_buf_unref(buf);
	}

	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");

	bt_conn_notify_tx(conn);
    6122:	4620      	mov	r0, r4
    6124:	f7ff ff38 	bl	5f98 <bt_conn_notify_tx>

	bt_conn_reset_rx_state(conn);
    6128:	4620      	mov	r0, r4
    612a:	f7ff fd49 	bl	5bc0 <bt_conn_reset_rx_state>
	return conn;
}

void bt_conn_unref(struct bt_conn *conn)
{
	atomic_dec(&conn->ref);
    612e:	f104 0044 	add.w	r0, r4, #68	; 0x44
}
    6132:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	atomic_dec(&conn->ref);
    6136:	f7ff bd4e 	b.w	5bd6 <atomic_dec>
		net_buf_unref(buf);
    613a:	f013 f8d5 	bl	192e8 <net_buf_unref>
    613e:	e7eb      	b.n	6118 <conn_cleanup+0x8>

00006140 <bt_conn_prepare_events>:
{
    6140:	b538      	push	{r3, r4, r5, lr}
	conn_change.signaled = 0;
    6142:	4b1f      	ldr	r3, [pc, #124]	; (61c0 <bt_conn_prepare_events+0x80>)
    6144:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    6146:	2101      	movs	r1, #1
	conn_change.signaled = 0;
    6148:	609a      	str	r2, [r3, #8]
{
    614a:	4605      	mov	r5, r0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    614c:	f01c fa8e 	bl	2266c <k_poll_event_init>
		if (!atomic_get(&conn->ref)) {
    6150:	4b1c      	ldr	r3, [pc, #112]	; (61c4 <bt_conn_prepare_events+0x84>)
    6152:	f103 0044 	add.w	r0, r3, #68	; 0x44
    6156:	f7ff fd2d 	bl	5bb4 <atomic_get>
    615a:	4619      	mov	r1, r3
    615c:	b908      	cbnz	r0, 6162 <bt_conn_prepare_events+0x22>
			continue;
    615e:	2001      	movs	r0, #1
    6160:	bd38      	pop	{r3, r4, r5, pc}
		if (conn->state == BT_CONN_DISCONNECTED &&
    6162:	7b1a      	ldrb	r2, [r3, #12]
    6164:	b99a      	cbnz	r2, 618e <bt_conn_prepare_events+0x4e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6166:	f3bf 8f5b 	dmb	ish
    616a:	1d1a      	adds	r2, r3, #4
    616c:	e852 0f00 	ldrex	r0, [r2]
    6170:	f020 0440 	bic.w	r4, r0, #64	; 0x40
    6174:	e842 4e00 	strex	lr, r4, [r2]
    6178:	f1be 0f00 	cmp.w	lr, #0
    617c:	d1f6      	bne.n	616c <bt_conn_prepare_events+0x2c>
    617e:	f3bf 8f5b 	dmb	ish
    6182:	0642      	lsls	r2, r0, #25
    6184:	d503      	bpl.n	618e <bt_conn_prepare_events+0x4e>
			conn_cleanup(conn);
    6186:	4618      	mov	r0, r3
    6188:	f7ff ffc2 	bl	6110 <conn_cleanup>
    618c:	e7e7      	b.n	615e <bt_conn_prepare_events+0x1e>
		if (conn->state != BT_CONN_CONNECTED) {
    618e:	7b0c      	ldrb	r4, [r1, #12]
    6190:	2c03      	cmp	r4, #3
    6192:	d1e4      	bne.n	615e <bt_conn_prepare_events+0x1e>
		k_poll_event_init(&events[ev_count],
    6194:	f105 0014 	add.w	r0, r5, #20
    6198:	4b0b      	ldr	r3, [pc, #44]	; (61c8 <bt_conn_prepare_events+0x88>)
    619a:	2200      	movs	r2, #0
    619c:	2104      	movs	r1, #4
    619e:	f01c fa65 	bl	2266c <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_NOTIFY;
    61a2:	2301      	movs	r3, #1
    61a4:	f885 3020 	strb.w	r3, [r5, #32]
		k_poll_event_init(&events[ev_count],
    61a8:	f105 0028 	add.w	r0, r5, #40	; 0x28
    61ac:	4b07      	ldr	r3, [pc, #28]	; (61cc <bt_conn_prepare_events+0x8c>)
    61ae:	2200      	movs	r2, #0
    61b0:	2104      	movs	r1, #4
    61b2:	f01c fa5b 	bl	2266c <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
    61b6:	2302      	movs	r3, #2
    61b8:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
    61bc:	4620      	mov	r0, r4
}
    61be:	bd38      	pop	{r3, r4, r5, pc}
    61c0:	20009e10 	.word	0x20009e10
    61c4:	20000494 	.word	0x20000494
    61c8:	200004b0 	.word	0x200004b0
    61cc:	200004c0 	.word	0x200004c0

000061d0 <bt_conn_add_le>:
{
    61d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (!atomic_get(&conns[i].ref)) {
    61d4:	4c19      	ldr	r4, [pc, #100]	; (623c <bt_conn_add_le+0x6c>)
    61d6:	f104 0744 	add.w	r7, r4, #68	; 0x44
{
    61da:	4680      	mov	r8, r0
		if (!atomic_get(&conns[i].ref)) {
    61dc:	4638      	mov	r0, r7
    61de:	f7ff fce9 	bl	5bb4 <atomic_get>
    61e2:	4605      	mov	r5, r0
    61e4:	b110      	cbz	r0, 61ec <bt_conn_add_le+0x1c>
		return NULL;
    61e6:	2000      	movs	r0, #0
    61e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	memset(conn, 0, sizeof(*conn));
    61ec:	4601      	mov	r1, r0
    61ee:	229c      	movs	r2, #156	; 0x9c
    61f0:	4620      	mov	r0, r4
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    61f2:	2601      	movs	r6, #1
    61f4:	f7fa faf9 	bl	7ea <memset>
    61f8:	f3bf 8f5b 	dmb	ish
    61fc:	e857 3f00 	ldrex	r3, [r7]
    6200:	e847 6200 	strex	r2, r6, [r7]
    6204:	2a00      	cmp	r2, #0
    6206:	d1f9      	bne.n	61fc <bt_conn_add_le+0x2c>
    6208:	f3bf 8f5b 	dmb	ish
	memcpy(dst, src, sizeof(*dst));
    620c:	2207      	movs	r2, #7
    620e:	4641      	mov	r1, r8
    6210:	f104 0048 	add.w	r0, r4, #72	; 0x48
    6214:	f7fa fabd 	bl	792 <memcpy>
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    6218:	2318      	movs	r3, #24
    621a:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
    621e:	2328      	movs	r3, #40	; 0x28
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
    6220:	f104 0074 	add.w	r0, r4, #116	; 0x74
	conn->sec_level = BT_SECURITY_LOW;
    6224:	7226      	strb	r6, [r4, #8]
	conn->required_sec_level = BT_SECURITY_LOW;
    6226:	7266      	strb	r6, [r4, #9]
	conn->type = BT_CONN_TYPE_LE;
    6228:	70a5      	strb	r5, [r4, #2]
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
    622a:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
    622e:	4904      	ldr	r1, [pc, #16]	; (6240 <bt_conn_add_le+0x70>)
    6230:	f01b ffe8 	bl	22204 <k_delayed_work_init>
			conn = &conns[i];
    6234:	4620      	mov	r0, r4
}
    6236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    623a:	bf00      	nop
    623c:	20000494 	.word	0x20000494
    6240:	00006739 	.word	0x00006739

00006244 <bt_conn_set_state>:
{
    6244:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (conn->state == state) {
    6246:	7b05      	ldrb	r5, [r0, #12]
    6248:	428d      	cmp	r5, r1
{
    624a:	b085      	sub	sp, #20
    624c:	4604      	mov	r4, r0
    624e:	460e      	mov	r6, r1
	if (conn->state == state) {
    6250:	d10a      	bne.n	6268 <bt_conn_set_state+0x24>
		BT_WARN("no transition");
    6252:	4b5f      	ldr	r3, [pc, #380]	; (63d0 <bt_conn_set_state+0x18c>)
    6254:	9301      	str	r3, [sp, #4]
    6256:	9300      	str	r3, [sp, #0]
    6258:	4a5e      	ldr	r2, [pc, #376]	; (63d4 <bt_conn_set_state+0x190>)
    625a:	4b5f      	ldr	r3, [pc, #380]	; (63d8 <bt_conn_set_state+0x194>)
    625c:	495f      	ldr	r1, [pc, #380]	; (63dc <bt_conn_set_state+0x198>)
    625e:	4860      	ldr	r0, [pc, #384]	; (63e0 <bt_conn_set_state+0x19c>)
    6260:	f7fc f818 	bl	2294 <printk>
}
    6264:	b005      	add	sp, #20
    6266:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn->state = state;
    6268:	7321      	strb	r1, [r4, #12]
	switch (old_state) {
    626a:	b19d      	cbz	r5, 6294 <bt_conn_set_state+0x50>
    626c:	2d02      	cmp	r5, #2
    626e:	d015      	beq.n	629c <bt_conn_set_state+0x58>
	switch (conn->state) {
    6270:	7b23      	ldrb	r3, [r4, #12]
    6272:	2b04      	cmp	r3, #4
    6274:	f200 80a1 	bhi.w	63ba <bt_conn_set_state+0x176>
    6278:	a201      	add	r2, pc, #4	; (adr r2, 6280 <bt_conn_set_state+0x3c>)
    627a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    627e:	bf00      	nop
    6280:	000062e1 	.word	0x000062e1
    6284:	00006265 	.word	0x00006265
    6288:	0000639f 	.word	0x0000639f
    628c:	000062ab 	.word	0x000062ab
    6290:	00006265 	.word	0x00006265
	atomic_inc(&conn->ref);
    6294:	3044      	adds	r0, #68	; 0x44
    6296:	f7ff fcab 	bl	5bf0 <atomic_inc>
    629a:	e7e9      	b.n	6270 <bt_conn_set_state+0x2c>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    629c:	7883      	ldrb	r3, [r0, #2]
    629e:	2b00      	cmp	r3, #0
    62a0:	d1e6      	bne.n	6270 <bt_conn_set_state+0x2c>
			k_delayed_work_cancel(&conn->le.update_work);
    62a2:	3074      	adds	r0, #116	; 0x74
    62a4:	f01b ffcc 	bl	22240 <k_delayed_work_cancel>
    62a8:	e7e2      	b.n	6270 <bt_conn_set_state+0x2c>
		if (conn->type == BT_CONN_TYPE_SCO) {
    62aa:	78a3      	ldrb	r3, [r4, #2]
    62ac:	2b02      	cmp	r3, #2
    62ae:	d0d9      	beq.n	6264 <bt_conn_set_state+0x20>
		k_fifo_init(&conn->tx_queue);
    62b0:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    62b4:	f01b f9fe 	bl	216b4 <k_queue_init>
		k_fifo_init(&conn->tx_notify);
    62b8:	f104 001c 	add.w	r0, r4, #28
    62bc:	f01b f9fa 	bl	216b4 <k_queue_init>
		k_poll_signal(&conn_change, 0);
    62c0:	2100      	movs	r1, #0
    62c2:	4848      	ldr	r0, [pc, #288]	; (63e4 <bt_conn_set_state+0x1a0>)
    62c4:	f01c fa9c 	bl	22800 <k_poll_signal>
	list->head = NULL;
    62c8:	2300      	movs	r3, #0
		bt_l2cap_connected(conn);
    62ca:	4620      	mov	r0, r4
    62cc:	63e3      	str	r3, [r4, #60]	; 0x3c
	list->tail = NULL;
    62ce:	6423      	str	r3, [r4, #64]	; 0x40
    62d0:	f000 feac 	bl	702c <bt_l2cap_connected>
		notify_connected(conn);
    62d4:	4620      	mov	r0, r4
}
    62d6:	b005      	add	sp, #20
    62d8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		notify_connected(conn);
    62dc:	f7ff bc5a 	b.w	5b94 <notify_connected>
		if (conn->type == BT_CONN_TYPE_SCO) {
    62e0:	78a3      	ldrb	r3, [r4, #2]
    62e2:	2b02      	cmp	r3, #2
    62e4:	d106      	bne.n	62f4 <bt_conn_set_state+0xb0>
	atomic_dec(&conn->ref);
    62e6:	f104 0044 	add.w	r0, r4, #68	; 0x44
}
    62ea:	b005      	add	sp, #20
    62ec:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	atomic_dec(&conn->ref);
    62f0:	f7ff bc71 	b.w	5bd6 <atomic_dec>
		if (old_state == BT_CONN_CONNECTED ||
    62f4:	1eeb      	subs	r3, r5, #3
    62f6:	2b01      	cmp	r3, #1
    62f8:	d844      	bhi.n	6384 <bt_conn_set_state+0x140>
			bt_l2cap_disconnected(conn);
    62fa:	4620      	mov	r0, r4
    62fc:	f000 fc98 	bl	6c30 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    6300:	4b39      	ldr	r3, [pc, #228]	; (63e8 <bt_conn_set_state+0x1a4>)
    6302:	681d      	ldr	r5, [r3, #0]
    6304:	b9ed      	cbnz	r5, 6342 <bt_conn_set_state+0xfe>
	node->next = list->head;
    6306:	4e39      	ldr	r6, [pc, #228]	; (63ec <bt_conn_set_state+0x1a8>)
    6308:	4f39      	ldr	r7, [pc, #228]	; (63f0 <bt_conn_set_state+0x1ac>)
	__asm__ volatile(
    630a:	f04f 0320 	mov.w	r3, #32
    630e:	f3ef 8111 	mrs	r1, BASEPRI
    6312:	f383 8811 	msr	BASEPRI, r3
    6316:	6963      	ldr	r3, [r4, #20]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    6318:	b12b      	cbz	r3, 6326 <bt_conn_set_state+0xe2>
	if (list->tail == node) {
    631a:	69a0      	ldr	r0, [r4, #24]
	list->head = node->next;
    631c:	681a      	ldr	r2, [r3, #0]
    631e:	6162      	str	r2, [r4, #20]
	if (list->tail == node) {
    6320:	4283      	cmp	r3, r0
		list->tail = list->head;
    6322:	bf08      	it	eq
    6324:	61a2      	streq	r2, [r4, #24]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    6326:	f381 8811 	msr	BASEPRI, r1
		if (!node) {
    632a:	b18b      	cbz	r3, 6350 <bt_conn_set_state+0x10c>
	node->next = list->head;
    632c:	6832      	ldr	r2, [r6, #0]
    632e:	601a      	str	r2, [r3, #0]
	if (!list->tail) {
    6330:	6872      	ldr	r2, [r6, #4]
	tx->cb = NULL;
    6332:	605d      	str	r5, [r3, #4]
	list->head = node;
    6334:	6033      	str	r3, [r6, #0]
	if (!list->tail) {
    6336:	b902      	cbnz	r2, 633a <bt_conn_set_state+0xf6>
		list->tail = list->head;
    6338:	6073      	str	r3, [r6, #4]
    633a:	4638      	mov	r0, r7
    633c:	f01b fc36 	bl	21bac <_impl_k_sem_give>
    6340:	e7e3      	b.n	630a <bt_conn_set_state+0xc6>
		if (cb->disconnected) {
    6342:	686b      	ldr	r3, [r5, #4]
    6344:	b113      	cbz	r3, 634c <bt_conn_set_state+0x108>
			cb->disconnected(conn, conn->err);
    6346:	7ae1      	ldrb	r1, [r4, #11]
    6348:	4620      	mov	r0, r4
    634a:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    634c:	69ad      	ldr	r5, [r5, #24]
    634e:	e7d9      	b.n	6304 <bt_conn_set_state+0xc0>
			if (conn->type == BT_CONN_TYPE_LE) {
    6350:	78a3      	ldrb	r3, [r4, #2]
    6352:	b91b      	cbnz	r3, 635c <bt_conn_set_state+0x118>
				k_delayed_work_cancel(&conn->le.update_work);
    6354:	f104 0074 	add.w	r0, r4, #116	; 0x74
    6358:	f01b ff72 	bl	22240 <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    635c:	f3bf 8f5b 	dmb	ish
    6360:	3404      	adds	r4, #4
    6362:	e854 3f00 	ldrex	r3, [r4]
    6366:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    636a:	e844 3200 	strex	r2, r3, [r4]
    636e:	2a00      	cmp	r2, #0
    6370:	d1f7      	bne.n	6362 <bt_conn_set_state+0x11e>
    6372:	f3bf 8f5b 	dmb	ish
			k_poll_signal(&conn_change, 0);
    6376:	481b      	ldr	r0, [pc, #108]	; (63e4 <bt_conn_set_state+0x1a0>)
    6378:	2100      	movs	r1, #0
}
    637a:	b005      	add	sp, #20
    637c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			k_poll_signal(&conn_change, 0);
    6380:	f01c ba3e 	b.w	22800 <k_poll_signal>
		} else if (old_state == BT_CONN_CONNECT) {
    6384:	2d02      	cmp	r5, #2
    6386:	d103      	bne.n	6390 <bt_conn_set_state+0x14c>
			notify_connected(conn);
    6388:	4620      	mov	r0, r4
    638a:	f7ff fc03 	bl	5b94 <notify_connected>
    638e:	e7aa      	b.n	62e6 <bt_conn_set_state+0xa2>
		} else if (old_state == BT_CONN_CONNECT_SCAN) {
    6390:	2d01      	cmp	r5, #1
    6392:	f47f af67 	bne.w	6264 <bt_conn_set_state+0x20>
			if (conn->err) {
    6396:	7ae3      	ldrb	r3, [r4, #11]
    6398:	2b00      	cmp	r3, #0
    639a:	d0a4      	beq.n	62e6 <bt_conn_set_state+0xa2>
    639c:	e7f4      	b.n	6388 <bt_conn_set_state+0x144>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    639e:	78a3      	ldrb	r3, [r4, #2]
    63a0:	2b00      	cmp	r3, #0
    63a2:	f47f af5f 	bne.w	6264 <bt_conn_set_state+0x20>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    63a6:	4813      	ldr	r0, [pc, #76]	; (63f4 <bt_conn_set_state+0x1b0>)
    63a8:	f640 32b8 	movw	r2, #3000	; 0xbb8
    63ac:	f104 0174 	add.w	r1, r4, #116	; 0x74
}
    63b0:	b005      	add	sp, #20
    63b2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    63b6:	f01b bf9d 	b.w	222f4 <k_delayed_work_submit_to_queue>
		BT_WARN("no valid (%u) state was set", state);
    63ba:	4b05      	ldr	r3, [pc, #20]	; (63d0 <bt_conn_set_state+0x18c>)
    63bc:	9302      	str	r3, [sp, #8]
    63be:	e88d 0048 	stmia.w	sp, {r3, r6}
    63c2:	4a04      	ldr	r2, [pc, #16]	; (63d4 <bt_conn_set_state+0x190>)
    63c4:	4b04      	ldr	r3, [pc, #16]	; (63d8 <bt_conn_set_state+0x194>)
    63c6:	4905      	ldr	r1, [pc, #20]	; (63dc <bt_conn_set_state+0x198>)
    63c8:	480b      	ldr	r0, [pc, #44]	; (63f8 <bt_conn_set_state+0x1b4>)
    63ca:	f7fb ff63 	bl	2294 <printk>
		break;
    63ce:	e749      	b.n	6264 <bt_conn_set_state+0x20>
    63d0:	00023dae 	.word	0x00023dae
    63d4:	00024006 	.word	0x00024006
    63d8:	0002430e 	.word	0x0002430e
    63dc:	000272d8 	.word	0x000272d8
    63e0:	0002444f 	.word	0x0002444f
    63e4:	20009e10 	.word	0x20009e10
    63e8:	20000480 	.word	0x20000480
    63ec:	20000530 	.word	0x20000530
    63f0:	20009d64 	.word	0x20009d64
    63f4:	20003340 	.word	0x20003340
    63f8:	0002446d 	.word	0x0002446d

000063fc <bt_conn_lookup_handle>:
{
    63fc:	b510      	push	{r4, lr}
		if (!atomic_get(&conns[i].ref)) {
    63fe:	4c0b      	ldr	r4, [pc, #44]	; (642c <bt_conn_lookup_handle+0x30>)
{
    6400:	4602      	mov	r2, r0
		if (!atomic_get(&conns[i].ref)) {
    6402:	f104 0044 	add.w	r0, r4, #68	; 0x44
    6406:	f7ff fbd5 	bl	5bb4 <atomic_get>
    640a:	b168      	cbz	r0, 6428 <bt_conn_lookup_handle+0x2c>
		if (conns[i].state != BT_CONN_CONNECTED &&
    640c:	7b23      	ldrb	r3, [r4, #12]
    640e:	3b03      	subs	r3, #3
    6410:	2b01      	cmp	r3, #1
    6412:	d808      	bhi.n	6426 <bt_conn_lookup_handle+0x2a>
		if (conns[i].handle == handle) {
    6414:	8823      	ldrh	r3, [r4, #0]
    6416:	4293      	cmp	r3, r2
    6418:	d105      	bne.n	6426 <bt_conn_lookup_handle+0x2a>
	atomic_inc(&conn->ref);
    641a:	f104 0044 	add.w	r0, r4, #68	; 0x44
    641e:	f7ff fbe7 	bl	5bf0 <atomic_inc>
			return bt_conn_ref(&conns[i]);
    6422:	4620      	mov	r0, r4
    6424:	bd10      	pop	{r4, pc}
	return NULL;
    6426:	2000      	movs	r0, #0
}
    6428:	bd10      	pop	{r4, pc}
    642a:	bf00      	nop
    642c:	20000494 	.word	0x20000494

00006430 <bt_conn_addr_le_cmp>:
{
    6430:	b538      	push	{r3, r4, r5, lr}
    6432:	460d      	mov	r5, r1
    6434:	4604      	mov	r4, r0
	return memcmp(a, b, sizeof(*a));
    6436:	f100 0148 	add.w	r1, r0, #72	; 0x48
    643a:	2207      	movs	r2, #7
    643c:	4628      	mov	r0, r5
    643e:	f7fa f97b 	bl	738 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
    6442:	b160      	cbz	r0, 645e <bt_conn_addr_le_cmp+0x2e>
	if (conn->role == BT_HCI_ROLE_MASTER) {
    6444:	78e3      	ldrb	r3, [r4, #3]
    6446:	2207      	movs	r2, #7
    6448:	b933      	cbnz	r3, 6458 <bt_conn_addr_le_cmp+0x28>
    644a:	f104 0156 	add.w	r1, r4, #86	; 0x56
    644e:	4628      	mov	r0, r5
}
    6450:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    6454:	f7fa b970 	b.w	738 <memcmp>
    6458:	f104 014f 	add.w	r1, r4, #79	; 0x4f
    645c:	e7f7      	b.n	644e <bt_conn_addr_le_cmp+0x1e>
    645e:	bd38      	pop	{r3, r4, r5, pc}

00006460 <bt_conn_lookup_addr_le>:
{
    6460:	b510      	push	{r4, lr}
		if (!atomic_get(&conns[i].ref)) {
    6462:	4c0b      	ldr	r4, [pc, #44]	; (6490 <bt_conn_lookup_addr_le+0x30>)
{
    6464:	4601      	mov	r1, r0
		if (!atomic_get(&conns[i].ref)) {
    6466:	f104 0044 	add.w	r0, r4, #68	; 0x44
    646a:	f7ff fba3 	bl	5bb4 <atomic_get>
    646e:	b908      	cbnz	r0, 6474 <bt_conn_lookup_addr_le+0x14>
	return NULL;
    6470:	2000      	movs	r0, #0
    6472:	bd10      	pop	{r4, pc}
		if (conns[i].type != BT_CONN_TYPE_LE) {
    6474:	78a3      	ldrb	r3, [r4, #2]
    6476:	2b00      	cmp	r3, #0
    6478:	d1fa      	bne.n	6470 <bt_conn_lookup_addr_le+0x10>
		if (!bt_conn_addr_le_cmp(&conns[i], peer)) {
    647a:	4620      	mov	r0, r4
    647c:	f7ff ffd8 	bl	6430 <bt_conn_addr_le_cmp>
    6480:	2800      	cmp	r0, #0
    6482:	d1f5      	bne.n	6470 <bt_conn_lookup_addr_le+0x10>
	atomic_inc(&conn->ref);
    6484:	f104 0044 	add.w	r0, r4, #68	; 0x44
    6488:	f7ff fbb2 	bl	5bf0 <atomic_inc>
		if (!bt_conn_addr_le_cmp(&conns[i], peer)) {
    648c:	4620      	mov	r0, r4
}
    648e:	bd10      	pop	{r4, pc}
    6490:	20000494 	.word	0x20000494

00006494 <bt_conn_lookup_state_le>:
{
    6494:	b538      	push	{r3, r4, r5, lr}
		if (!atomic_get(&conns[i].ref)) {
    6496:	4c0e      	ldr	r4, [pc, #56]	; (64d0 <bt_conn_lookup_state_le+0x3c>)
{
    6498:	4603      	mov	r3, r0
		if (!atomic_get(&conns[i].ref)) {
    649a:	f104 0044 	add.w	r0, r4, #68	; 0x44
{
    649e:	460d      	mov	r5, r1
		if (!atomic_get(&conns[i].ref)) {
    64a0:	f7ff fb88 	bl	5bb4 <atomic_get>
    64a4:	b908      	cbnz	r0, 64aa <bt_conn_lookup_state_le+0x16>
	return NULL;
    64a6:	2000      	movs	r0, #0
    64a8:	bd38      	pop	{r3, r4, r5, pc}
		if (conns[i].type != BT_CONN_TYPE_LE) {
    64aa:	78a2      	ldrb	r2, [r4, #2]
    64ac:	2a00      	cmp	r2, #0
    64ae:	d1fa      	bne.n	64a6 <bt_conn_lookup_state_le+0x12>
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    64b0:	b93b      	cbnz	r3, 64c2 <bt_conn_lookup_state_le+0x2e>
		if (conns[i].state == state) {
    64b2:	7b23      	ldrb	r3, [r4, #12]
    64b4:	42ab      	cmp	r3, r5
    64b6:	d1f6      	bne.n	64a6 <bt_conn_lookup_state_le+0x12>
	atomic_inc(&conn->ref);
    64b8:	4806      	ldr	r0, [pc, #24]	; (64d4 <bt_conn_lookup_state_le+0x40>)
    64ba:	f7ff fb99 	bl	5bf0 <atomic_inc>
			return bt_conn_ref(&conns[i]);
    64be:	4804      	ldr	r0, [pc, #16]	; (64d0 <bt_conn_lookup_state_le+0x3c>)
}
    64c0:	bd38      	pop	{r3, r4, r5, pc}
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    64c2:	4619      	mov	r1, r3
    64c4:	4620      	mov	r0, r4
    64c6:	f7ff ffb3 	bl	6430 <bt_conn_addr_le_cmp>
    64ca:	2800      	cmp	r0, #0
    64cc:	d1eb      	bne.n	64a6 <bt_conn_lookup_state_le+0x12>
    64ce:	e7f0      	b.n	64b2 <bt_conn_lookup_state_le+0x1e>
    64d0:	20000494 	.word	0x20000494
    64d4:	200004d8 	.word	0x200004d8

000064d8 <bt_conn_unref>:
	atomic_dec(&conn->ref);
    64d8:	3044      	adds	r0, #68	; 0x44
    64da:	f7ff bb7c 	b.w	5bd6 <atomic_dec>

000064de <bt_conn_get_info>:
{
	return &conn->le.dst;
}

int bt_conn_get_info(const struct bt_conn *conn, struct bt_conn_info *info)
{
    64de:	b510      	push	{r4, lr}
	info->type = conn->type;
    64e0:	7883      	ldrb	r3, [r0, #2]
    64e2:	700b      	strb	r3, [r1, #0]
	info->role = conn->role;
    64e4:	78c4      	ldrb	r4, [r0, #3]
    64e6:	704c      	strb	r4, [r1, #1]

	switch (conn->type) {
    64e8:	b9a3      	cbnz	r3, 6514 <bt_conn_get_info+0x36>
    64ea:	f100 034f 	add.w	r3, r0, #79	; 0x4f
    64ee:	f100 0256 	add.w	r2, r0, #86	; 0x56
	case BT_CONN_TYPE_LE:
		if (conn->role == BT_HCI_ROLE_MASTER) {
    64f2:	b964      	cbnz	r4, 650e <bt_conn_get_info+0x30>
			info->le.src = &conn->le.init_addr;
    64f4:	604b      	str	r3, [r1, #4]
			info->le.dst = &conn->le.resp_addr;
    64f6:	608a      	str	r2, [r1, #8]
		} else {
			info->le.src = &conn->le.resp_addr;
			info->le.dst = &conn->le.init_addr;
		}
		info->le.interval = conn->le.interval;
    64f8:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    64fc:	818b      	strh	r3, [r1, #12]
		info->le.latency = conn->le.latency;
    64fe:	f8b0 3064 	ldrh.w	r3, [r0, #100]	; 0x64
    6502:	81cb      	strh	r3, [r1, #14]
		info->le.timeout = conn->le.timeout;
    6504:	f8b0 3066 	ldrh.w	r3, [r0, #102]	; 0x66
    6508:	820b      	strh	r3, [r1, #16]
		return 0;
    650a:	2000      	movs	r0, #0
    650c:	bd10      	pop	{r4, pc}
			info->le.src = &conn->le.resp_addr;
    650e:	604a      	str	r2, [r1, #4]
			info->le.dst = &conn->le.init_addr;
    6510:	608b      	str	r3, [r1, #8]
    6512:	e7f1      	b.n	64f8 <bt_conn_get_info+0x1a>
		info->br.dst = &conn->br.dst;
		return 0;
#endif
	}

	return -EINVAL;
    6514:	f06f 0015 	mvn.w	r0, #21
}
    6518:	bd10      	pop	{r4, pc}
	...

0000651c <bt_le_set_auto_conn>:
	return conn;
}

int bt_le_set_auto_conn(bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
    651c:	b570      	push	{r4, r5, r6, lr}
    651e:	4606      	mov	r6, r0
	struct bt_conn *conn;

	if (param && !bt_le_conn_params_valid(param)) {
    6520:	460d      	mov	r5, r1
    6522:	2900      	cmp	r1, #0
    6524:	d13d      	bne.n	65a2 <bt_le_set_auto_conn+0x86>
		return -EINVAL;
	}

	conn = bt_conn_lookup_addr_le(addr);
    6526:	4630      	mov	r0, r6
    6528:	f7ff ff9a 	bl	6460 <bt_conn_lookup_addr_le>
	if (!conn) {
    652c:	4604      	mov	r4, r0
    652e:	b928      	cbnz	r0, 653c <bt_le_set_auto_conn+0x20>
		conn = bt_conn_add_le(addr);
    6530:	4630      	mov	r0, r6
    6532:	f7ff fe4d 	bl	61d0 <bt_conn_add_le>
		if (!conn) {
    6536:	4604      	mov	r4, r0
    6538:	2800      	cmp	r0, #0
    653a:	d053      	beq.n	65e4 <bt_le_set_auto_conn+0xc8>
    653c:	1d23      	adds	r3, r4, #4
    653e:	f104 0644 	add.w	r6, r4, #68	; 0x44
			return -ENOMEM;
		}
	}

	if (param) {
    6542:	2d00      	cmp	r5, #0
    6544:	d035      	beq.n	65b2 <bt_le_set_auto_conn+0x96>
	conn->le.interval_max = param->interval_max;
    6546:	886a      	ldrh	r2, [r5, #2]
    6548:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
	conn->le.latency = param->latency;
    654c:	88aa      	ldrh	r2, [r5, #4]
    654e:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
	conn->le.timeout = param->timeout;
    6552:	88ea      	ldrh	r2, [r5, #6]
    6554:	f8a4 2066 	strh.w	r2, [r4, #102]	; 0x66
    6558:	f3bf 8f5b 	dmb	ish
    655c:	e853 2f00 	ldrex	r2, [r3]
    6560:	f042 0101 	orr.w	r1, r2, #1
    6564:	e843 1000 	strex	r0, r1, [r3]
    6568:	2800      	cmp	r0, #0
    656a:	d1f7      	bne.n	655c <bt_le_set_auto_conn+0x40>
    656c:	f3bf 8f5b 	dmb	ish
		bt_conn_set_param_le(conn, param);

		if (!atomic_test_and_set_bit(conn->flags,
    6570:	07d1      	lsls	r1, r2, #31
    6572:	d402      	bmi.n	657a <bt_le_set_auto_conn+0x5e>
	atomic_inc(&conn->ref);
    6574:	4630      	mov	r0, r6
    6576:	f7ff fb3b 	bl	5bf0 <atomic_inc>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
			}
		}
	}

	if (conn->state == BT_CONN_DISCONNECTED &&
    657a:	7b23      	ldrb	r3, [r4, #12]
    657c:	b963      	cbnz	r3, 6598 <bt_le_set_auto_conn+0x7c>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    657e:	481b      	ldr	r0, [pc, #108]	; (65ec <bt_le_set_auto_conn+0xd0>)
    6580:	f7ff fb18 	bl	5bb4 <atomic_get>
    6584:	0783      	lsls	r3, r0, #30
    6586:	d507      	bpl.n	6598 <bt_le_set_auto_conn+0x7c>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		if (param) {
    6588:	b11d      	cbz	r5, 6592 <bt_le_set_auto_conn+0x76>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    658a:	2101      	movs	r1, #1
    658c:	4620      	mov	r0, r4
    658e:	f7ff fe59 	bl	6244 <bt_conn_set_state>
		}
		bt_le_scan_update(false);
    6592:	2000      	movs	r0, #0
    6594:	f7fd fcf8 	bl	3f88 <bt_le_scan_update>
	atomic_dec(&conn->ref);
    6598:	4630      	mov	r0, r6
    659a:	f7ff fb1c 	bl	5bd6 <atomic_dec>
	}

	bt_conn_unref(conn);

	return 0;
    659e:	2000      	movs	r0, #0
    65a0:	bd70      	pop	{r4, r5, r6, pc}
	if (param && !bt_le_conn_params_valid(param)) {
    65a2:	4608      	mov	r0, r1
    65a4:	f7fd fa7c 	bl	3aa0 <bt_le_conn_params_valid>
    65a8:	2800      	cmp	r0, #0
    65aa:	d1bc      	bne.n	6526 <bt_le_set_auto_conn+0xa>
		return -EINVAL;
    65ac:	f06f 0015 	mvn.w	r0, #21
    65b0:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    65b2:	f3bf 8f5b 	dmb	ish
    65b6:	e853 2f00 	ldrex	r2, [r3]
    65ba:	f022 0101 	bic.w	r1, r2, #1
    65be:	e843 1000 	strex	r0, r1, [r3]
    65c2:	2800      	cmp	r0, #0
    65c4:	d1f7      	bne.n	65b6 <bt_le_set_auto_conn+0x9a>
    65c6:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(conn->flags,
    65ca:	07d2      	lsls	r2, r2, #31
    65cc:	d5d5      	bpl.n	657a <bt_le_set_auto_conn+0x5e>
	atomic_dec(&conn->ref);
    65ce:	4630      	mov	r0, r6
    65d0:	f7ff fb01 	bl	5bd6 <atomic_dec>
			if (conn->state == BT_CONN_CONNECT_SCAN) {
    65d4:	7b23      	ldrb	r3, [r4, #12]
    65d6:	2b01      	cmp	r3, #1
    65d8:	d1cf      	bne.n	657a <bt_le_set_auto_conn+0x5e>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    65da:	4629      	mov	r1, r5
    65dc:	4620      	mov	r0, r4
    65de:	f7ff fe31 	bl	6244 <bt_conn_set_state>
    65e2:	e7ca      	b.n	657a <bt_le_set_auto_conn+0x5e>
			return -ENOMEM;
    65e4:	f06f 000b 	mvn.w	r0, #11
}
    65e8:	bd70      	pop	{r4, r5, r6, pc}
    65ea:	bf00      	nop
    65ec:	20009d48 	.word	0x20009d48

000065f0 <bt_conn_disconnect>:
{
    65f0:	b570      	push	{r4, r5, r6, lr}
    65f2:	460e      	mov	r6, r1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    65f4:	7881      	ldrb	r1, [r0, #2]
{
    65f6:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    65f8:	b911      	cbnz	r1, 6600 <bt_conn_disconnect+0x10>
		bt_le_set_auto_conn(&conn->le.dst, NULL);
    65fa:	3048      	adds	r0, #72	; 0x48
    65fc:	f7ff ff8e 	bl	651c <bt_le_set_auto_conn>
	switch (conn->state) {
    6600:	7b23      	ldrb	r3, [r4, #12]
    6602:	3b01      	subs	r3, #1
    6604:	2b03      	cmp	r3, #3
    6606:	d803      	bhi.n	6610 <bt_conn_disconnect+0x20>
    6608:	e8df f003 	tbb	[pc, r3]
    660c:	0e1b1006 	.word	0x0e1b1006
		return -ENOTCONN;
    6610:	f06f 0538 	mvn.w	r5, #56	; 0x38
}
    6614:	4628      	mov	r0, r5
    6616:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    6618:	4620      	mov	r0, r4
		conn->err = reason;
    661a:	72e6      	strb	r6, [r4, #11]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    661c:	2100      	movs	r1, #0
    661e:	f7ff fe11 	bl	6244 <bt_conn_set_state>
		bt_le_scan_update(false);
    6622:	2000      	movs	r0, #0
    6624:	f7fd fcb0 	bl	3f88 <bt_le_scan_update>
		return 0;
    6628:	2500      	movs	r5, #0
    662a:	e7f3      	b.n	6614 <bt_conn_disconnect+0x24>
			k_delayed_work_cancel(&conn->le.update_work);
    662c:	f104 0074 	add.w	r0, r4, #116	; 0x74
    6630:	f01b fe06 	bl	22240 <k_delayed_work_cancel>
			return bt_hci_cmd_send(BT_HCI_OP_LE_CREATE_CONN_CANCEL,
    6634:	2100      	movs	r1, #0
    6636:	f242 000e 	movw	r0, #8206	; 0x200e
}
    663a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			return bt_hci_cmd_send(BT_HCI_OP_LE_CREATE_CONN_CANCEL,
    663e:	f7fd bc1b 	b.w	3e78 <bt_hci_cmd_send>
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
    6642:	2103      	movs	r1, #3
    6644:	f240 4006 	movw	r0, #1030	; 0x406
    6648:	f7fd f88e 	bl	3768 <bt_hci_cmd_create>
	if (!buf) {
    664c:	4605      	mov	r5, r0
    664e:	b198      	cbz	r0, 6678 <bt_conn_disconnect+0x88>
	disconn = net_buf_add(buf, sizeof(*disconn));
    6650:	2103      	movs	r1, #3
    6652:	3008      	adds	r0, #8
    6654:	f012 fea6 	bl	193a4 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(conn->handle);
    6658:	8823      	ldrh	r3, [r4, #0]
    665a:	8003      	strh	r3, [r0, #0]
	disconn->reason = reason;
    665c:	7086      	strb	r6, [r0, #2]
	err = bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
    665e:	4629      	mov	r1, r5
    6660:	f240 4006 	movw	r0, #1030	; 0x406
    6664:	f7fd fc08 	bl	3e78 <bt_hci_cmd_send>
	if (err) {
    6668:	4605      	mov	r5, r0
    666a:	2800      	cmp	r0, #0
    666c:	d1d2      	bne.n	6614 <bt_conn_disconnect+0x24>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
    666e:	2104      	movs	r1, #4
    6670:	4620      	mov	r0, r4
    6672:	f7ff fde7 	bl	6244 <bt_conn_set_state>
    6676:	e7cd      	b.n	6614 <bt_conn_disconnect+0x24>
		return -ENOBUFS;
    6678:	f06f 0536 	mvn.w	r5, #54	; 0x36
    667c:	e7ca      	b.n	6614 <bt_conn_disconnect+0x24>

0000667e <bt_conn_le_conn_update>:
}
#endif /* CONFIG_BT_PERIPHERAL */

int bt_conn_le_conn_update(struct bt_conn *conn,
			   const struct bt_le_conn_param *param)
{
    667e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6680:	4607      	mov	r7, r0
    6682:	460d      	mov	r5, r1
	struct hci_cp_le_conn_update *conn_update;
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
    6684:	f242 0013 	movw	r0, #8211	; 0x2013
    6688:	210e      	movs	r1, #14
    668a:	f7fd f86d 	bl	3768 <bt_hci_cmd_create>
				sizeof(*conn_update));
	if (!buf) {
    668e:	4606      	mov	r6, r0
    6690:	b1c8      	cbz	r0, 66c6 <bt_conn_le_conn_update+0x48>
		return -ENOBUFS;
	}

	conn_update = net_buf_add(buf, sizeof(*conn_update));
    6692:	210e      	movs	r1, #14
    6694:	3008      	adds	r0, #8
    6696:	f012 fe85 	bl	193a4 <net_buf_simple_add>
	memset(conn_update, 0, sizeof(*conn_update));
    669a:	2100      	movs	r1, #0
	conn_update = net_buf_add(buf, sizeof(*conn_update));
    669c:	4604      	mov	r4, r0
	memset(conn_update, 0, sizeof(*conn_update));
    669e:	220e      	movs	r2, #14
    66a0:	f7fa f8a3 	bl	7ea <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
    66a4:	883b      	ldrh	r3, [r7, #0]
    66a6:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
    66a8:	882b      	ldrh	r3, [r5, #0]
    66aa:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
    66ac:	886b      	ldrh	r3, [r5, #2]
    66ae:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
    66b0:	88ab      	ldrh	r3, [r5, #4]
    66b2:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
    66b4:	88eb      	ldrh	r3, [r5, #6]
    66b6:	8123      	strh	r3, [r4, #8]

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    66b8:	4631      	mov	r1, r6
    66ba:	f242 0013 	movw	r0, #8211	; 0x2013
}
    66be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    66c2:	f7fd bbd9 	b.w	3e78 <bt_hci_cmd_send>
}
    66c6:	f06f 0036 	mvn.w	r0, #54	; 0x36
    66ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000066cc <bt_conn_le_param_update>:
{
    66cc:	b538      	push	{r3, r4, r5, lr}
	if (conn->le.interval >= param->interval_min &&
    66ce:	880a      	ldrh	r2, [r1, #0]
    66d0:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    66d4:	429a      	cmp	r2, r3
{
    66d6:	4604      	mov	r4, r0
    66d8:	460d      	mov	r5, r1
	if (conn->le.interval >= param->interval_min &&
    66da:	d80c      	bhi.n	66f6 <bt_conn_le_param_update+0x2a>
    66dc:	884a      	ldrh	r2, [r1, #2]
    66de:	429a      	cmp	r2, r3
    66e0:	d309      	bcc.n	66f6 <bt_conn_le_param_update+0x2a>
	    conn->le.interval <= param->interval_max &&
    66e2:	f8b0 2064 	ldrh.w	r2, [r0, #100]	; 0x64
    66e6:	888b      	ldrh	r3, [r1, #4]
    66e8:	429a      	cmp	r2, r3
    66ea:	d104      	bne.n	66f6 <bt_conn_le_param_update+0x2a>
	    conn->le.latency == param->latency &&
    66ec:	f8b0 2066 	ldrh.w	r2, [r0, #102]	; 0x66
    66f0:	88cb      	ldrh	r3, [r1, #6]
    66f2:	429a      	cmp	r2, r3
    66f4:	d01a      	beq.n	672c <bt_conn_le_param_update+0x60>
	k_delayed_work_cancel(&conn->le.update_work);
    66f6:	f104 0074 	add.w	r0, r4, #116	; 0x74
    66fa:	f01b fda1 	bl	22240 <k_delayed_work_cancel>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    66fe:	4b0d      	ldr	r3, [pc, #52]	; (6734 <bt_conn_le_param_update+0x68>)
    6700:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    6704:	079a      	lsls	r2, r3, #30
    6706:	d503      	bpl.n	6710 <bt_conn_le_param_update+0x44>
    6708:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
    670c:	079b      	lsls	r3, r3, #30
    670e:	d401      	bmi.n	6714 <bt_conn_le_param_update+0x48>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features)) ||
    6710:	78e3      	ldrb	r3, [r4, #3]
    6712:	b92b      	cbnz	r3, 6720 <bt_conn_le_param_update+0x54>
		return bt_conn_le_conn_update(conn, param);
    6714:	4629      	mov	r1, r5
    6716:	4620      	mov	r0, r4
}
    6718:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return bt_conn_le_conn_update(conn, param);
    671c:	f7ff bfaf 	b.w	667e <bt_conn_le_conn_update>
	return bt_l2cap_update_conn_param(conn, param);
    6720:	4629      	mov	r1, r5
    6722:	4620      	mov	r0, r4
}
    6724:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    6728:	f000 bcc4 	b.w	70b4 <bt_l2cap_update_conn_param>
}
    672c:	f06f 0044 	mvn.w	r0, #68	; 0x44
    6730:	bd38      	pop	{r3, r4, r5, pc}
    6732:	bf00      	nop
    6734:	20009cd8 	.word	0x20009cd8

00006738 <le_conn_update>:
{
    6738:	4603      	mov	r3, r0
    673a:	b507      	push	{r0, r1, r2, lr}
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    673c:	f813 2c68 	ldrb.w	r2, [r3, #-104]
    6740:	2a02      	cmp	r2, #2
	struct bt_conn *conn = CONTAINER_OF(le, struct bt_conn, le);
    6742:	f1a0 0074 	sub.w	r0, r0, #116	; 0x74
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    6746:	d105      	bne.n	6754 <le_conn_update+0x1c>
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
    6748:	2113      	movs	r1, #19
    674a:	f7ff ff51 	bl	65f0 <bt_conn_disconnect>
}
    674e:	b003      	add	sp, #12
    6750:	f85d fb04 	ldr.w	pc, [sp], #4
	param = BT_LE_CONN_PARAM(conn->le.interval_min,
    6754:	f833 2c14 	ldrh.w	r2, [r3, #-20]
    6758:	f8ad 2000 	strh.w	r2, [sp]
    675c:	f833 2c12 	ldrh.w	r2, [r3, #-18]
    6760:	f8ad 2002 	strh.w	r2, [sp, #2]
	bt_conn_le_param_update(conn, param);
    6764:	4669      	mov	r1, sp
	param = BT_LE_CONN_PARAM(conn->le.interval_min,
    6766:	f833 2c10 	ldrh.w	r2, [r3, #-16]
    676a:	f833 3c0e 	ldrh.w	r3, [r3, #-14]
    676e:	f8ad 2004 	strh.w	r2, [sp, #4]
    6772:	f8ad 3006 	strh.w	r3, [sp, #6]
	bt_conn_le_param_update(conn, param);
    6776:	f7ff ffa9 	bl	66cc <bt_conn_le_param_update>
    677a:	e7e8      	b.n	674e <le_conn_update+0x16>

0000677c <bt_conn_create_pdu>:

struct net_buf *bt_conn_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
    677c:	b538      	push	{r3, r4, r5, lr}

	if (!pool) {
		pool = &acl_tx_pool;
	}

	buf = net_buf_alloc(pool, K_FOREVER);
    677e:	4b08      	ldr	r3, [pc, #32]	; (67a0 <bt_conn_create_pdu+0x24>)
{
    6780:	460d      	mov	r5, r1
	buf = net_buf_alloc(pool, K_FOREVER);
    6782:	2800      	cmp	r0, #0
    6784:	bf08      	it	eq
    6786:	4618      	moveq	r0, r3
    6788:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    678c:	f012 fd7c 	bl	19288 <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);

	reserve += sizeof(struct bt_hci_acl_hdr) + CONFIG_BT_HCI_RESERVE;
	net_buf_reserve(buf, reserve);
    6790:	1d29      	adds	r1, r5, #4
	buf = net_buf_alloc(pool, K_FOREVER);
    6792:	4604      	mov	r4, r0
	net_buf_reserve(buf, reserve);
    6794:	3008      	adds	r0, #8
    6796:	f012 fd96 	bl	192c6 <net_buf_simple_reserve>

	return buf;
}
    679a:	4620      	mov	r0, r4
    679c:	bd38      	pop	{r3, r4, r5, pc}
    679e:	bf00      	nop
    67a0:	2000aa3c 	.word	0x2000aa3c

000067a4 <create_frag.isra.6>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    67a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    67a8:	4606      	mov	r6, r0
    67aa:	460c      	mov	r4, r1
	frag = bt_conn_create_pdu(&frag_pool, 0);
    67ac:	4816      	ldr	r0, [pc, #88]	; (6808 <create_frag.isra.6+0x64>)
    67ae:	2100      	movs	r1, #0
    67b0:	f7ff ffe4 	bl	677c <bt_conn_create_pdu>
	if (conn->state != BT_CONN_CONNECTED) {
    67b4:	7833      	ldrb	r3, [r6, #0]
    67b6:	2b03      	cmp	r3, #3
	frag = bt_conn_create_pdu(&frag_pool, 0);
    67b8:	4605      	mov	r5, r0
    67ba:	f04f 0600 	mov.w	r6, #0
	if (conn->state != BT_CONN_CONNECTED) {
    67be:	d005      	beq.n	67cc <create_frag.isra.6+0x28>
		net_buf_unref(frag);
    67c0:	f012 fd92 	bl	192e8 <net_buf_unref>
		return NULL;
    67c4:	4635      	mov	r5, r6
}
    67c6:	4628      	mov	r0, r5
    67c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn_tx(frag)->cb = NULL;
    67cc:	6146      	str	r6, [r0, #20]
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    67ce:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.mtu;
    67d2:	4e0e      	ldr	r6, [pc, #56]	; (680c <create_frag.isra.6+0x68>)
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    67d4:	4638      	mov	r0, r7
    67d6:	f8b6 8088 	ldrh.w	r8, [r6, #136]	; 0x88
    67da:	f012 fe4f 	bl	1947c <net_buf_simple_tailroom>
    67de:	4580      	cmp	r8, r0
    67e0:	d20c      	bcs.n	67fc <create_frag.isra.6+0x58>
	return bt_dev.le.mtu;
    67e2:	f8b6 6088 	ldrh.w	r6, [r6, #136]	; 0x88
	net_buf_add_mem(frag, buf->data, frag_len);
    67e6:	f854 1f08 	ldr.w	r1, [r4, #8]!
    67ea:	4632      	mov	r2, r6
    67ec:	4638      	mov	r0, r7
    67ee:	f012 fddf 	bl	193b0 <net_buf_simple_add_mem>
	net_buf_pull(buf, frag_len);
    67f2:	4631      	mov	r1, r6
    67f4:	4620      	mov	r0, r4
    67f6:	f012 fe25 	bl	19444 <net_buf_simple_pull>
    67fa:	e7e4      	b.n	67c6 <create_frag.isra.6+0x22>
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    67fc:	4638      	mov	r0, r7
    67fe:	f012 fe3d 	bl	1947c <net_buf_simple_tailroom>
    6802:	b286      	uxth	r6, r0
    6804:	e7ef      	b.n	67e6 <create_frag.isra.6+0x42>
    6806:	bf00      	nop
    6808:	2000aa7c 	.word	0x2000aa7c
    680c:	20009cd8 	.word	0x20009cd8

00006810 <bt_conn_process_tx>:
	if (conn->state == BT_CONN_DISCONNECTED &&
    6810:	7b03      	ldrb	r3, [r0, #12]
{
    6812:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6814:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    6816:	b99b      	cbnz	r3, 6840 <bt_conn_process_tx+0x30>
    6818:	f3bf 8f5b 	dmb	ish
    681c:	1d03      	adds	r3, r0, #4
    681e:	e853 2f00 	ldrex	r2, [r3]
    6822:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    6826:	e843 1400 	strex	r4, r1, [r3]
    682a:	2c00      	cmp	r4, #0
    682c:	d1f7      	bne.n	681e <bt_conn_process_tx+0xe>
    682e:	f3bf 8f5b 	dmb	ish
    6832:	0653      	lsls	r3, r2, #25
    6834:	d504      	bpl.n	6840 <bt_conn_process_tx+0x30>
}
    6836:	b003      	add	sp, #12
    6838:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		conn_cleanup(conn);
    683c:	f7ff bc68 	b.w	6110 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    6840:	2100      	movs	r1, #0
    6842:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    6846:	f012 fd25 	bl	19294 <net_buf_get>
	BT_ASSERT(buf);
    684a:	4604      	mov	r4, r0
    684c:	b970      	cbnz	r0, 686c <bt_conn_process_tx+0x5c>
    684e:	4b22      	ldr	r3, [pc, #136]	; (68d8 <bt_conn_process_tx+0xc8>)
    6850:	9301      	str	r3, [sp, #4]
    6852:	9300      	str	r3, [sp, #0]
    6854:	4a21      	ldr	r2, [pc, #132]	; (68dc <bt_conn_process_tx+0xcc>)
    6856:	4b22      	ldr	r3, [pc, #136]	; (68e0 <bt_conn_process_tx+0xd0>)
    6858:	4922      	ldr	r1, [pc, #136]	; (68e4 <bt_conn_process_tx+0xd4>)
    685a:	4823      	ldr	r0, [pc, #140]	; (68e8 <bt_conn_process_tx+0xd8>)
    685c:	f7fb fd1a 	bl	2294 <printk>
    6860:	4040      	eors	r0, r0
    6862:	f380 8811 	msr	BASEPRI, r0
    6866:	f04f 0004 	mov.w	r0, #4
    686a:	df02      	svc	2
	return bt_dev.le.mtu;
    686c:	4e1f      	ldr	r6, [pc, #124]	; (68ec <bt_conn_process_tx+0xdc>)
	if (buf->len <= conn_mtu(conn)) {
    686e:	8981      	ldrh	r1, [r0, #12]
    6870:	f8b6 2088 	ldrh.w	r2, [r6, #136]	; 0x88
    6874:	4291      	cmp	r1, r2
    6876:	d808      	bhi.n	688a <bt_conn_process_tx+0x7a>
		return send_frag(conn, buf, BT_ACL_START_NO_FLUSH, false);
    6878:	2300      	movs	r3, #0
    687a:	461a      	mov	r2, r3
	return send_frag(conn, buf, BT_ACL_CONT, false);
    687c:	4621      	mov	r1, r4
    687e:	4628      	mov	r0, r5
    6880:	f7ff fbaa 	bl	5fd8 <send_frag>
	if (!send_buf(conn, buf)) {
    6884:	b148      	cbz	r0, 689a <bt_conn_process_tx+0x8a>
}
    6886:	b003      	add	sp, #12
    6888:	bdf0      	pop	{r4, r5, r6, r7, pc}
    688a:	f105 070c 	add.w	r7, r5, #12
	frag = create_frag(conn, buf);
    688e:	4601      	mov	r1, r0
    6890:	4638      	mov	r0, r7
    6892:	f7ff ff87 	bl	67a4 <create_frag.isra.6>
	if (!frag) {
    6896:	4601      	mov	r1, r0
    6898:	b928      	cbnz	r0, 68a6 <bt_conn_process_tx+0x96>
		net_buf_unref(buf);
    689a:	4620      	mov	r0, r4
}
    689c:	b003      	add	sp, #12
    689e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		net_buf_unref(buf);
    68a2:	f012 bd21 	b.w	192e8 <net_buf_unref>
	if (!send_frag(conn, frag, BT_ACL_START_NO_FLUSH, true)) {
    68a6:	2301      	movs	r3, #1
    68a8:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    68aa:	4628      	mov	r0, r5
    68ac:	f7ff fb94 	bl	5fd8 <send_frag>
    68b0:	2800      	cmp	r0, #0
    68b2:	d0f2      	beq.n	689a <bt_conn_process_tx+0x8a>
	while (buf->len > conn_mtu(conn)) {
    68b4:	89a2      	ldrh	r2, [r4, #12]
    68b6:	f8b6 3088 	ldrh.w	r3, [r6, #136]	; 0x88
    68ba:	429a      	cmp	r2, r3
    68bc:	d802      	bhi.n	68c4 <bt_conn_process_tx+0xb4>
	return send_frag(conn, buf, BT_ACL_CONT, false);
    68be:	2300      	movs	r3, #0
    68c0:	2201      	movs	r2, #1
    68c2:	e7db      	b.n	687c <bt_conn_process_tx+0x6c>
		frag = create_frag(conn, buf);
    68c4:	4621      	mov	r1, r4
    68c6:	4638      	mov	r0, r7
    68c8:	f7ff ff6c 	bl	67a4 <create_frag.isra.6>
		if (!frag) {
    68cc:	4601      	mov	r1, r0
    68ce:	2800      	cmp	r0, #0
    68d0:	d0e3      	beq.n	689a <bt_conn_process_tx+0x8a>
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    68d2:	2301      	movs	r3, #1
    68d4:	461a      	mov	r2, r3
    68d6:	e7e8      	b.n	68aa <bt_conn_process_tx+0x9a>
    68d8:	00023dae 	.word	0x00023dae
    68dc:	00022d76 	.word	0x00022d76
    68e0:	000242fb 	.word	0x000242fb
    68e4:	000272d8 	.word	0x000272d8
    68e8:	000240bf 	.word	0x000240bf
    68ec:	20009cd8 	.word	0x20009cd8

000068f0 <bt_conn_get_id>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

u8_t bt_conn_get_id(struct bt_conn *conn)
{
	return conn - conns;
    68f0:	4b03      	ldr	r3, [pc, #12]	; (6900 <bt_conn_get_id+0x10>)
    68f2:	1ac0      	subs	r0, r0, r3
    68f4:	4b03      	ldr	r3, [pc, #12]	; (6904 <bt_conn_get_id+0x14>)
    68f6:	1080      	asrs	r0, r0, #2
    68f8:	4358      	muls	r0, r3
}
    68fa:	b2c0      	uxtb	r0, r0
    68fc:	4770      	bx	lr
    68fe:	bf00      	nop
    6900:	20000494 	.word	0x20000494
    6904:	96f96f97 	.word	0x96f96f97

00006908 <bt_conn_init>:
	node->next = list->head;
    6908:	4b12      	ldr	r3, [pc, #72]	; (6954 <bt_conn_init+0x4c>)
    690a:	4a13      	ldr	r2, [pc, #76]	; (6958 <bt_conn_init+0x50>)
    690c:	6819      	ldr	r1, [r3, #0]

	return bt_conn_ref(conn);
}

int bt_conn_init(void)
{
    690e:	b510      	push	{r4, lr}
    6910:	6011      	str	r1, [r2, #0]
	if (!list->tail) {
    6912:	6859      	ldr	r1, [r3, #4]
    6914:	b901      	cbnz	r1, 6918 <bt_conn_init+0x10>
		list->tail = list->head;
    6916:	605a      	str	r2, [r3, #4]
	if (!list->tail) {
    6918:	6859      	ldr	r1, [r3, #4]
	node->next = list->head;
    691a:	6092      	str	r2, [r2, #8]
	list->head = node;
    691c:	4a0f      	ldr	r2, [pc, #60]	; (695c <bt_conn_init+0x54>)
    691e:	601a      	str	r2, [r3, #0]
	if (!list->tail) {
    6920:	b901      	cbnz	r1, 6924 <bt_conn_init+0x1c>
		list->tail = list->head;
    6922:	605a      	str	r2, [r3, #4]

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		sys_slist_prepend(&free_tx, &conn_tx[i].node);
	}

	bt_att_init();
    6924:	f002 f9ae 	bl	8c84 <bt_att_init>

	err = bt_smp_init();
    6928:	f004 fe7c 	bl	b624 <bt_smp_init>
	if (err) {
    692c:	4604      	mov	r4, r0
    692e:	b970      	cbnz	r0, 694e <bt_conn_init+0x46>
		return err;
	}

	bt_l2cap_init();
    6930:	f000 fbe0 	bl	70f4 <bt_l2cap_init>
	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(conns); i++) {
			struct bt_conn *conn = &conns[i];

			if (!atomic_get(&conn->ref)) {
    6934:	480a      	ldr	r0, [pc, #40]	; (6960 <bt_conn_init+0x58>)
    6936:	f7ff f93d 	bl	5bb4 <atomic_get>
    693a:	b140      	cbz	r0, 694e <bt_conn_init+0x46>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    693c:	4809      	ldr	r0, [pc, #36]	; (6964 <bt_conn_init+0x5c>)
    693e:	f7ff f939 	bl	5bb4 <atomic_get>
				continue;
			}

			if (atomic_test_bit(conn->flags,
    6942:	07c3      	lsls	r3, r0, #31
    6944:	d503      	bpl.n	694e <bt_conn_init+0x46>
					    BT_CONN_AUTO_CONNECT)) {
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    6946:	2101      	movs	r1, #1
    6948:	4807      	ldr	r0, [pc, #28]	; (6968 <bt_conn_init+0x60>)
    694a:	f7ff fc7b 	bl	6244 <bt_conn_set_state>
			}
		}
	}

	return 0;
}
    694e:	4620      	mov	r0, r4
    6950:	bd10      	pop	{r4, pc}
    6952:	bf00      	nop
    6954:	20000530 	.word	0x20000530
    6958:	20000484 	.word	0x20000484
    695c:	2000048c 	.word	0x2000048c
    6960:	200004d8 	.word	0x200004d8
    6964:	20000498 	.word	0x20000498
    6968:	20000494 	.word	0x20000494

0000696c <sys_slist_append>:
	node->next = NULL;
    696c:	2300      	movs	r3, #0
    696e:	600b      	str	r3, [r1, #0]
	if (!list->tail) {
    6970:	6843      	ldr	r3, [r0, #4]
    6972:	b913      	cbnz	r3, 697a <sys_slist_append+0xe>
		list->tail = node;
    6974:	6041      	str	r1, [r0, #4]
		list->head = node;
    6976:	6001      	str	r1, [r0, #0]
    6978:	4770      	bx	lr
		list->tail->next = node;
    697a:	6019      	str	r1, [r3, #0]
		list->tail = node;
    697c:	6041      	str	r1, [r0, #4]
    697e:	4770      	bx	lr

00006980 <sys_slist_remove>:
{
    6980:	b510      	push	{r4, lr}
    6982:	6813      	ldr	r3, [r2, #0]
    6984:	6844      	ldr	r4, [r0, #4]
	if (!prev_node) {
    6986:	b931      	cbnz	r1, 6996 <sys_slist_remove+0x16>
		if (list->tail == node) {
    6988:	42a2      	cmp	r2, r4
		list->head = node->next;
    698a:	6003      	str	r3, [r0, #0]
		if (list->tail == node) {
    698c:	d100      	bne.n	6990 <sys_slist_remove+0x10>
			list->tail = list->head;
    698e:	6043      	str	r3, [r0, #4]
	node->next = NULL;
    6990:	2300      	movs	r3, #0
    6992:	6013      	str	r3, [r2, #0]
    6994:	bd10      	pop	{r4, pc}
		if (list->tail == node) {
    6996:	42a2      	cmp	r2, r4
		prev_node->next = node->next;
    6998:	600b      	str	r3, [r1, #0]
			list->tail = prev_node;
    699a:	bf08      	it	eq
    699c:	6041      	streq	r1, [r0, #4]
    699e:	e7f7      	b.n	6990 <sys_slist_remove+0x10>

000069a0 <net_buf_frags_len>:
 *  @param buf Buffer to start off with.
 *
 *  @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
    69a0:	4603      	mov	r3, r0
	size_t bytes = 0;
    69a2:	2000      	movs	r0, #0

	while (buf) {
    69a4:	b903      	cbnz	r3, 69a8 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
    69a6:	4770      	bx	lr
		bytes += buf->len;
    69a8:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
    69aa:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
    69ac:	4410      	add	r0, r2
    69ae:	e7f9      	b.n	69a4 <net_buf_frags_len+0x4>

000069b0 <get_ident>:

static u8_t get_ident(void)
{
	static u8_t ident;

	ident++;
    69b0:	4b04      	ldr	r3, [pc, #16]	; (69c4 <get_ident+0x14>)
    69b2:	781a      	ldrb	r2, [r3, #0]
    69b4:	3201      	adds	r2, #1
	/* handle integer overflow (0 is not valid) */
	if (!ident) {
    69b6:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
    69ba:	bf08      	it	eq
    69bc:	2201      	moveq	r2, #1
    69be:	701a      	strb	r2, [r3, #0]
	}

	return ident;
}
    69c0:	7818      	ldrb	r0, [r3, #0]
    69c2:	4770      	bx	lr
    69c4:	200005d4 	.word	0x200005d4

000069c8 <__l2cap_lookup_ident>:
	return NULL;
}

static struct bt_l2cap_le_chan *
__l2cap_lookup_ident(struct bt_conn *conn, u16_t ident, bool remove)
{
    69c8:	b538      	push	{r3, r4, r5, lr}
    69ca:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
	struct bt_l2cap_chan *chan;
	sys_snode_t *prev = NULL;

	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    69cc:	b17c      	cbz	r4, 69ee <__l2cap_lookup_ident+0x26>
    69ce:	3c08      	subs	r4, #8
    69d0:	2300      	movs	r3, #0
    69d2:	b90c      	cbnz	r4, 69d8 <__l2cap_lookup_ident+0x10>
		}

		prev = &chan->node;
	}

	return NULL;
    69d4:	2400      	movs	r4, #0
    69d6:	e00a      	b.n	69ee <__l2cap_lookup_ident+0x26>
		if (chan->ident == ident) {
    69d8:	f894 503c 	ldrb.w	r5, [r4, #60]	; 0x3c
    69dc:	428d      	cmp	r5, r1
    69de:	d108      	bne.n	69f2 <__l2cap_lookup_ident+0x2a>
			if (remove) {
    69e0:	b12a      	cbz	r2, 69ee <__l2cap_lookup_ident+0x26>
				sys_slist_remove(&conn->channels, prev,
    69e2:	f104 0208 	add.w	r2, r4, #8
    69e6:	4619      	mov	r1, r3
    69e8:	303c      	adds	r0, #60	; 0x3c
    69ea:	f7ff ffc9 	bl	6980 <sys_slist_remove>
}
    69ee:	4620      	mov	r0, r4
    69f0:	bd38      	pop	{r3, r4, r5, pc}
		prev = &chan->node;
    69f2:	f104 0308 	add.w	r3, r4, #8
	return node->next;
    69f6:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    69f8:	2c00      	cmp	r4, #0
    69fa:	d0eb      	beq.n	69d4 <__l2cap_lookup_ident+0xc>
    69fc:	3c08      	subs	r4, #8
    69fe:	e7e8      	b.n	69d2 <__l2cap_lookup_ident+0xa>

00006a00 <l2cap_server_lookup_psm>:
	return NULL;
}

#if defined(CONFIG_BT_L2CAP_DYNAMIC_CHANNEL)
static struct bt_l2cap_server *l2cap_server_lookup_psm(u16_t psm)
{
    6a00:	4b08      	ldr	r3, [pc, #32]	; (6a24 <l2cap_server_lookup_psm+0x24>)
    6a02:	4602      	mov	r2, r0
    6a04:	6818      	ldr	r0, [r3, #0]
	struct bt_l2cap_server *server;

	SYS_SLIST_FOR_EACH_CONTAINER(&servers, server, node) {
    6a06:	b100      	cbz	r0, 6a0a <l2cap_server_lookup_psm+0xa>
    6a08:	3808      	subs	r0, #8
    6a0a:	b900      	cbnz	r0, 6a0e <l2cap_server_lookup_psm+0xe>
			return server;
		}
	}

	return NULL;
}
    6a0c:	4770      	bx	lr
		if (server->psm == psm) {
    6a0e:	8803      	ldrh	r3, [r0, #0]
    6a10:	4293      	cmp	r3, r2
    6a12:	d0fb      	beq.n	6a0c <l2cap_server_lookup_psm+0xc>
    6a14:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&servers, server, node) {
    6a16:	2000      	movs	r0, #0
    6a18:	2b00      	cmp	r3, #0
    6a1a:	d0f7      	beq.n	6a0c <l2cap_server_lookup_psm+0xc>
    6a1c:	f1a3 0008 	sub.w	r0, r3, #8
    6a20:	e7f3      	b.n	6a0a <l2cap_server_lookup_psm+0xa>
    6a22:	bf00      	nop
    6a24:	200005e0 	.word	0x200005e0

00006a28 <l2cap_remove_tx_cid>:
{
	struct bt_l2cap_chan *chan;
	sys_snode_t *prev = NULL;

	/* Protect fixed channels against accidental removal */
	if (!L2CAP_LE_CID_IS_DYN(cid)) {
    6a28:	f1a1 0340 	sub.w	r3, r1, #64	; 0x40
    6a2c:	2b3f      	cmp	r3, #63	; 0x3f
{
    6a2e:	b510      	push	{r4, lr}
	if (!L2CAP_LE_CID_IS_DYN(cid)) {
    6a30:	d804      	bhi.n	6a3c <l2cap_remove_tx_cid+0x14>
    6a32:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
		return NULL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    6a34:	b114      	cbz	r4, 6a3c <l2cap_remove_tx_cid+0x14>
    6a36:	3c08      	subs	r4, #8
    6a38:	2300      	movs	r3, #0
    6a3a:	b90c      	cbnz	r4, 6a40 <l2cap_remove_tx_cid+0x18>
		return NULL;
    6a3c:	2000      	movs	r0, #0
    6a3e:	bd10      	pop	{r4, pc}
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
    6a40:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
    6a44:	428a      	cmp	r2, r1
    6a46:	f104 0208 	add.w	r2, r4, #8
    6a4a:	d105      	bne.n	6a58 <l2cap_remove_tx_cid+0x30>
			sys_slist_remove(&conn->channels, prev, &chan->node);
    6a4c:	4619      	mov	r1, r3
    6a4e:	303c      	adds	r0, #60	; 0x3c
    6a50:	f7ff ff96 	bl	6980 <sys_slist_remove>
			return BT_L2CAP_LE_CHAN(chan);
    6a54:	4620      	mov	r0, r4
    6a56:	bd10      	pop	{r4, pc}
    6a58:	68a4      	ldr	r4, [r4, #8]
		}

		prev = &chan->node;
    6a5a:	4613      	mov	r3, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    6a5c:	2c00      	cmp	r4, #0
    6a5e:	d0ed      	beq.n	6a3c <l2cap_remove_tx_cid+0x14>
    6a60:	3c08      	subs	r4, #8
    6a62:	e7ea      	b.n	6a3a <l2cap_remove_tx_cid+0x12>

00006a64 <l2cap_disconnected>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static void l2cap_disconnected(struct bt_l2cap_chan *chan)
{
    6a64:	4770      	bx	lr
	...

00006a68 <l2cap_accept>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    6a68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    6a6a:	4a0b      	ldr	r2, [pc, #44]	; (6a98 <l2cap_accept+0x30>)
    6a6c:	6813      	ldr	r3, [r2, #0]
    6a6e:	b933      	cbnz	r3, 6a7e <l2cap_accept+0x16>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    6a70:	480a      	ldr	r0, [pc, #40]	; (6a9c <l2cap_accept+0x34>)
    6a72:	6050      	str	r0, [r2, #4]
		*chan = &l2cap->chan.chan;
    6a74:	600a      	str	r2, [r1, #0]

		return 0;
    6a76:	4618      	mov	r0, r3
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
    6a78:	b005      	add	sp, #20
    6a7a:	f85d fb04 	ldr.w	pc, [sp], #4
	BT_ERR("No available L2CAP context for conn %p", conn);
    6a7e:	4b08      	ldr	r3, [pc, #32]	; (6aa0 <l2cap_accept+0x38>)
    6a80:	9302      	str	r3, [sp, #8]
    6a82:	9001      	str	r0, [sp, #4]
    6a84:	9300      	str	r3, [sp, #0]
    6a86:	4a07      	ldr	r2, [pc, #28]	; (6aa4 <l2cap_accept+0x3c>)
    6a88:	4b07      	ldr	r3, [pc, #28]	; (6aa8 <l2cap_accept+0x40>)
    6a8a:	4908      	ldr	r1, [pc, #32]	; (6aac <l2cap_accept+0x44>)
    6a8c:	4808      	ldr	r0, [pc, #32]	; (6ab0 <l2cap_accept+0x48>)
    6a8e:	f7fb fc01 	bl	2294 <printk>
	return -ENOMEM;
    6a92:	f06f 000b 	mvn.w	r0, #11
    6a96:	e7ef      	b.n	6a78 <l2cap_accept+0x10>
    6a98:	20000538 	.word	0x20000538
    6a9c:	20009e2c 	.word	0x20009e2c
    6aa0:	00023dae 	.word	0x00023dae
    6aa4:	00022d76 	.word	0x00022d76
    6aa8:	0002458c 	.word	0x0002458c
    6aac:	000272d8 	.word	0x000272d8
    6ab0:	000246ba 	.word	0x000246ba

00006ab4 <l2cap_chan_destroy>:
{
    6ab4:	b570      	push	{r4, r5, r6, lr}
    6ab6:	4604      	mov	r4, r0
	k_delayed_work_cancel(&chan->rtx_work);
    6ab8:	3010      	adds	r0, #16
    6aba:	f01b fbc1 	bl	22240 <k_delayed_work_cancel>
	while ((buf = net_buf_get(&ch->tx_queue, K_NO_WAIT))) {
    6abe:	f104 0680 	add.w	r6, r4, #128	; 0x80
    6ac2:	2100      	movs	r1, #0
    6ac4:	4630      	mov	r0, r6
    6ac6:	f012 fbe5 	bl	19294 <net_buf_get>
    6aca:	4605      	mov	r5, r0
    6acc:	b948      	cbnz	r0, 6ae2 <l2cap_chan_destroy+0x2e>
	if (ch->_sdu) {
    6ace:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    6ad2:	b128      	cbz	r0, 6ae0 <l2cap_chan_destroy+0x2c>
		net_buf_unref(ch->_sdu);
    6ad4:	f012 fc08 	bl	192e8 <net_buf_unref>
		ch->_sdu = NULL;
    6ad8:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
		ch->_sdu_len = 0;
    6adc:	f8a4 5098 	strh.w	r5, [r4, #152]	; 0x98
    6ae0:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
    6ae2:	f012 fc01 	bl	192e8 <net_buf_unref>
    6ae6:	e7ec      	b.n	6ac2 <l2cap_chan_destroy+0xe>

00006ae8 <l2cap_chan_tx_init>:
{
    6ae8:	b510      	push	{r4, lr}
	memset(&chan->tx, 0, sizeof(chan->tx));
    6aea:	2220      	movs	r2, #32
{
    6aec:	4604      	mov	r4, r0
	memset(&chan->tx, 0, sizeof(chan->tx));
    6aee:	2100      	movs	r1, #0
    6af0:	3060      	adds	r0, #96	; 0x60
    6af2:	f7f9 fe7a 	bl	7ea <memset>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    6af6:	f104 0068 	add.w	r0, r4, #104	; 0x68
    6afa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6afe:	2100      	movs	r1, #0
    6b00:	f01b f84a 	bl	21b98 <_impl_k_sem_init>
	k_fifo_init(&chan->tx_queue);
    6b04:	f104 0080 	add.w	r0, r4, #128	; 0x80
}
    6b08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_init(&chan->tx_queue);
    6b0c:	f01a bdd2 	b.w	216b4 <k_queue_init>

00006b10 <l2cap_chan_rx_init>:
	if (!chan->rx.mtu) {
    6b10:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    6b14:	b913      	cbnz	r3, 6b1c <l2cap_chan_rx_init+0xc>
		chan->rx.mtu = L2CAP_MAX_LE_MTU;
    6b16:	2342      	movs	r3, #66	; 0x42
    6b18:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
	if (!chan->rx.init_credits) {
    6b1c:	f8b0 2046 	ldrh.w	r2, [r0, #70]	; 0x46
    6b20:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    6b24:	b94a      	cbnz	r2, 6b3a <l2cap_chan_rx_init+0x2a>
		if (chan->chan.ops->alloc_buf) {
    6b26:	6842      	ldr	r2, [r0, #4]
    6b28:	68d2      	ldr	r2, [r2, #12]
    6b2a:	b192      	cbz	r2, 6b52 <l2cap_chan_rx_init+0x42>
			chan->rx.init_credits = (chan->rx.mtu +
    6b2c:	f103 0243 	add.w	r2, r3, #67	; 0x43
						 (L2CAP_MAX_LE_MPS - 1)) /
    6b30:	2144      	movs	r1, #68	; 0x44
    6b32:	fb92 f2f1 	sdiv	r2, r2, r1
			chan->rx.init_credits = L2CAP_LE_MAX_CREDITS;
    6b36:	f8a0 2046 	strh.w	r2, [r0, #70]	; 0x46
	chan->rx.mps = min(chan->rx.mtu + 2, L2CAP_MAX_LE_MPS);
    6b3a:	3302      	adds	r3, #2
    6b3c:	2b44      	cmp	r3, #68	; 0x44
    6b3e:	bfa8      	it	ge
    6b40:	2344      	movge	r3, #68	; 0x44
    6b42:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    6b46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6b4a:	2100      	movs	r1, #0
    6b4c:	3048      	adds	r0, #72	; 0x48
    6b4e:	f01b b823 	b.w	21b98 <_impl_k_sem_init>
			chan->rx.init_credits = L2CAP_LE_MAX_CREDITS;
    6b52:	2202      	movs	r2, #2
    6b54:	e7ef      	b.n	6b36 <l2cap_chan_rx_init+0x26>

00006b56 <l2cap_create_le_sig_pdu.isra.6>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    6b56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6b58:	4607      	mov	r7, r0
    6b5a:	460e      	mov	r6, r1
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    6b5c:	2000      	movs	r0, #0
    6b5e:	2104      	movs	r1, #4
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    6b60:	4615      	mov	r5, r2
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    6b62:	f7ff fe0b 	bl	677c <bt_conn_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    6b66:	2104      	movs	r1, #4
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    6b68:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    6b6a:	3008      	adds	r0, #8
    6b6c:	f012 fc1a 	bl	193a4 <net_buf_simple_add>
	hdr->code = code;
    6b70:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
    6b72:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    6b74:	8045      	strh	r5, [r0, #2]
}
    6b76:	4620      	mov	r0, r4
    6b78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00006b7a <l2cap_connected>:
    6b7a:	4770      	bx	lr

00006b7c <bt_l2cap_le_fixed_chan_register>:
	sys_slist_append(&le_channels, &chan->node);
    6b7c:	f100 0108 	add.w	r1, r0, #8
    6b80:	4801      	ldr	r0, [pc, #4]	; (6b88 <bt_l2cap_le_fixed_chan_register+0xc>)
    6b82:	f7ff bef3 	b.w	696c <sys_slist_append>
    6b86:	bf00      	nop
    6b88:	200005d8 	.word	0x200005d8

00006b8c <bt_l2cap_chan_remove>:
{
    6b8c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    6b8e:	b410      	push	{r4}
    6b90:	460c      	mov	r4, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    6b92:	b113      	cbz	r3, 6b9a <bt_l2cap_chan_remove+0xe>
    6b94:	3b08      	subs	r3, #8
    6b96:	2100      	movs	r1, #0
    6b98:	b90b      	cbnz	r3, 6b9e <bt_l2cap_chan_remove+0x12>
}
    6b9a:	bc10      	pop	{r4}
    6b9c:	4770      	bx	lr
		if (chan == ch) {
    6b9e:	42a3      	cmp	r3, r4
    6ba0:	f103 0208 	add.w	r2, r3, #8
    6ba4:	d103      	bne.n	6bae <bt_l2cap_chan_remove+0x22>
			sys_slist_remove(&conn->channels, prev, &chan->node);
    6ba6:	303c      	adds	r0, #60	; 0x3c
}
    6ba8:	bc10      	pop	{r4}
			sys_slist_remove(&conn->channels, prev, &chan->node);
    6baa:	f7ff bee9 	b.w	6980 <sys_slist_remove>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    6bae:	4611      	mov	r1, r2
    6bb0:	2a00      	cmp	r2, #0
    6bb2:	d0f2      	beq.n	6b9a <bt_l2cap_chan_remove+0xe>
	return node->next;
    6bb4:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    6bb6:	2b00      	cmp	r3, #0
    6bb8:	d0ef      	beq.n	6b9a <bt_l2cap_chan_remove+0xe>
    6bba:	3b08      	subs	r3, #8
    6bbc:	e7ec      	b.n	6b98 <bt_l2cap_chan_remove+0xc>

00006bbe <bt_l2cap_chan_del>:
	if (!chan->conn) {
    6bbe:	6803      	ldr	r3, [r0, #0]
{
    6bc0:	b510      	push	{r4, lr}
    6bc2:	4604      	mov	r4, r0
	if (!chan->conn) {
    6bc4:	b12b      	cbz	r3, 6bd2 <bt_l2cap_chan_del+0x14>
	if (chan->ops->disconnected) {
    6bc6:	6843      	ldr	r3, [r0, #4]
    6bc8:	685b      	ldr	r3, [r3, #4]
    6bca:	b103      	cbz	r3, 6bce <bt_l2cap_chan_del+0x10>
		chan->ops->disconnected(chan);
    6bcc:	4798      	blx	r3
	chan->conn = NULL;
    6bce:	2300      	movs	r3, #0
    6bd0:	6023      	str	r3, [r4, #0]
	chan->state = state;
    6bd2:	2300      	movs	r3, #0
    6bd4:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	chan->psm = 0;
    6bd8:	8763      	strh	r3, [r4, #58]	; 0x3a
	if (chan->destroy) {
    6bda:	68e3      	ldr	r3, [r4, #12]
    6bdc:	b11b      	cbz	r3, 6be6 <bt_l2cap_chan_del+0x28>
		chan->destroy(chan);
    6bde:	4620      	mov	r0, r4
}
    6be0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		chan->destroy(chan);
    6be4:	4718      	bx	r3
    6be6:	bd10      	pop	{r4, pc}

00006be8 <l2cap_rtx_timeout>:
{
    6be8:	b530      	push	{r4, r5, lr}
	BT_ERR("chan %p timeout", chan);
    6bea:	4b0c      	ldr	r3, [pc, #48]	; (6c1c <l2cap_rtx_timeout+0x34>)
    6bec:	4a0c      	ldr	r2, [pc, #48]	; (6c20 <l2cap_rtx_timeout+0x38>)
    6bee:	490d      	ldr	r1, [pc, #52]	; (6c24 <l2cap_rtx_timeout+0x3c>)
{
    6bf0:	b085      	sub	sp, #20
	struct bt_l2cap_le_chan *chan = LE_CHAN_RTX(work);
    6bf2:	f1a0 0410 	sub.w	r4, r0, #16
{
    6bf6:	4605      	mov	r5, r0
	BT_ERR("chan %p timeout", chan);
    6bf8:	9302      	str	r3, [sp, #8]
    6bfa:	e88d 0018 	stmia.w	sp, {r3, r4}
    6bfe:	480a      	ldr	r0, [pc, #40]	; (6c28 <l2cap_rtx_timeout+0x40>)
    6c00:	4b0a      	ldr	r3, [pc, #40]	; (6c2c <l2cap_rtx_timeout+0x44>)
    6c02:	f7fb fb47 	bl	2294 <printk>
	bt_l2cap_chan_remove(chan->chan.conn, &chan->chan);
    6c06:	f855 0c10 	ldr.w	r0, [r5, #-16]
    6c0a:	4621      	mov	r1, r4
    6c0c:	f7ff ffbe 	bl	6b8c <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    6c10:	4620      	mov	r0, r4
}
    6c12:	b005      	add	sp, #20
    6c14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
    6c18:	f7ff bfd1 	b.w	6bbe <bt_l2cap_chan_del>
    6c1c:	00023dae 	.word	0x00023dae
    6c20:	00022d76 	.word	0x00022d76
    6c24:	000272d8 	.word	0x000272d8
    6c28:	00024a06 	.word	0x00024a06
    6c2c:	000244bc 	.word	0x000244bc

00006c30 <bt_l2cap_disconnected>:
{
    6c30:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    6c32:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    6c34:	b1a3      	cbz	r3, 6c60 <bt_l2cap_disconnected+0x30>
    6c36:	f1b3 0008 	subs.w	r0, r3, #8
    6c3a:	d10a      	bne.n	6c52 <bt_l2cap_disconnected+0x22>
    6c3c:	bd10      	pop	{r4, pc}
    6c3e:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
    6c40:	f7ff ffbd 	bl	6bbe <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    6c44:	b164      	cbz	r4, 6c60 <bt_l2cap_disconnected+0x30>
    6c46:	68a3      	ldr	r3, [r4, #8]
    6c48:	b103      	cbz	r3, 6c4c <bt_l2cap_disconnected+0x1c>
    6c4a:	3b08      	subs	r3, #8
{
    6c4c:	4620      	mov	r0, r4
    6c4e:	461c      	mov	r4, r3
    6c50:	e7f6      	b.n	6c40 <bt_l2cap_disconnected+0x10>
    6c52:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    6c54:	2c00      	cmp	r4, #0
    6c56:	d1f2      	bne.n	6c3e <bt_l2cap_disconnected+0xe>
}
    6c58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_l2cap_chan_del(chan);
    6c5c:	f7ff bfaf 	b.w	6bbe <bt_l2cap_chan_del>
    6c60:	bd10      	pop	{r4, pc}

00006c62 <bt_l2cap_create_pdu>:
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    6c62:	3104      	adds	r1, #4
    6c64:	f7ff bd8a 	b.w	677c <bt_conn_create_pdu>

00006c68 <bt_l2cap_send_cb>:
{
    6c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6c6a:	4614      	mov	r4, r2
    6c6c:	4605      	mov	r5, r0
    6c6e:	460f      	mov	r7, r1
	hdr = net_buf_push(buf, sizeof(*hdr));
    6c70:	f102 0008 	add.w	r0, r2, #8
    6c74:	2104      	movs	r1, #4
{
    6c76:	461e      	mov	r6, r3
	hdr = net_buf_push(buf, sizeof(*hdr));
    6c78:	f012 fbcb 	bl	19412 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    6c7c:	89a1      	ldrh	r1, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
    6c7e:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    6c80:	3904      	subs	r1, #4
    6c82:	8001      	strh	r1, [r0, #0]
	bt_conn_send_cb(conn, buf, cb);
    6c84:	4632      	mov	r2, r6
    6c86:	4621      	mov	r1, r4
    6c88:	4628      	mov	r0, r5
}
    6c8a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_send_cb(conn, buf, cb);
    6c8e:	f7ff b95d 	b.w	5f4c <bt_conn_send_cb>
	...

00006c94 <l2cap_le_conn_req>:
{
    6c94:	b538      	push	{r3, r4, r5, lr}
    6c96:	4604      	mov	r4, r0
	ch->chan.ident = get_ident();
    6c98:	f7ff fe8a 	bl	69b0 <get_ident>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_LE_CONN_REQ,
    6c9c:	220a      	movs	r2, #10
	ch->chan.ident = get_ident();
    6c9e:	4601      	mov	r1, r0
    6ca0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_LE_CONN_REQ,
    6ca4:	2014      	movs	r0, #20
    6ca6:	f7ff ff56 	bl	6b56 <l2cap_create_le_sig_pdu.isra.6>
	req = net_buf_add(buf, sizeof(*req));
    6caa:	210a      	movs	r1, #10
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_LE_CONN_REQ,
    6cac:	4605      	mov	r5, r0
	req = net_buf_add(buf, sizeof(*req));
    6cae:	3008      	adds	r0, #8
    6cb0:	f012 fb78 	bl	193a4 <net_buf_simple_add>
	req->psm = sys_cpu_to_le16(ch->chan.psm);
    6cb4:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
    6cb6:	8003      	strh	r3, [r0, #0]
	req->scid = sys_cpu_to_le16(ch->rx.cid);
    6cb8:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
    6cbc:	8043      	strh	r3, [r0, #2]
	req->mtu = sys_cpu_to_le16(ch->rx.mtu);
    6cbe:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    6cc2:	8083      	strh	r3, [r0, #4]
	req->mps = sys_cpu_to_le16(ch->rx.mps);
    6cc4:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
    6cc8:	80c3      	strh	r3, [r0, #6]
	req->credits = sys_cpu_to_le16(ch->rx.init_credits);
    6cca:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
    6cce:	8103      	strh	r3, [r0, #8]
    6cd0:	f104 0110 	add.w	r1, r4, #16
    6cd4:	f649 4240 	movw	r2, #40000	; 0x9c40
    6cd8:	4805      	ldr	r0, [pc, #20]	; (6cf0 <l2cap_le_conn_req+0x5c>)
    6cda:	f01b fb0b 	bl	222f4 <k_delayed_work_submit_to_queue>
		      bt_conn_tx_cb_t cb);

static inline void bt_l2cap_send(struct bt_conn *conn, u16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL);
    6cde:	6820      	ldr	r0, [r4, #0]
    6ce0:	2300      	movs	r3, #0
    6ce2:	462a      	mov	r2, r5
    6ce4:	2105      	movs	r1, #5
    6ce6:	f7ff ffbf 	bl	6c68 <bt_l2cap_send_cb>
}
    6cea:	2000      	movs	r0, #0
    6cec:	bd38      	pop	{r3, r4, r5, pc}
    6cee:	bf00      	nop
    6cf0:	20003340 	.word	0x20003340

00006cf4 <bt_l2cap_encrypt_change>:
{
    6cf4:	b538      	push	{r3, r4, r5, lr}
    6cf6:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
    6cf8:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    6cfa:	b10c      	cbz	r4, 6d00 <bt_l2cap_encrypt_change+0xc>
    6cfc:	3c08      	subs	r4, #8
    6cfe:	b904      	cbnz	r4, 6d02 <bt_l2cap_encrypt_change+0xe>
    6d00:	bd38      	pop	{r3, r4, r5, pc}
	if (chan->state != BT_L2CAP_CONNECT || chan->ident) {
    6d02:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    6d06:	2b01      	cmp	r3, #1
    6d08:	d10a      	bne.n	6d20 <bt_l2cap_encrypt_change+0x2c>
    6d0a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    6d0e:	b93b      	cbnz	r3, 6d20 <bt_l2cap_encrypt_change+0x2c>
	if (status) {
    6d10:	b175      	cbz	r5, 6d30 <bt_l2cap_encrypt_change+0x3c>
		bt_l2cap_chan_remove(chan->conn, chan);
    6d12:	6820      	ldr	r0, [r4, #0]
    6d14:	4621      	mov	r1, r4
    6d16:	f7ff ff39 	bl	6b8c <bt_l2cap_chan_remove>
		bt_l2cap_chan_del(chan);
    6d1a:	4620      	mov	r0, r4
    6d1c:	f7ff ff4f 	bl	6bbe <bt_l2cap_chan_del>
		if (chan->ops->encrypt_change) {
    6d20:	6863      	ldr	r3, [r4, #4]
    6d22:	689b      	ldr	r3, [r3, #8]
    6d24:	b113      	cbz	r3, 6d2c <bt_l2cap_encrypt_change+0x38>
			chan->ops->encrypt_change(chan, hci_status);
    6d26:	4629      	mov	r1, r5
    6d28:	4620      	mov	r0, r4
    6d2a:	4798      	blx	r3
    6d2c:	68a4      	ldr	r4, [r4, #8]
    6d2e:	e7e4      	b.n	6cfa <bt_l2cap_encrypt_change+0x6>
	l2cap_le_conn_req(BT_L2CAP_LE_CHAN(chan));
    6d30:	4620      	mov	r0, r4
    6d32:	f7ff ffaf 	bl	6c94 <l2cap_le_conn_req>
    6d36:	e7f3      	b.n	6d20 <bt_l2cap_encrypt_change+0x2c>

00006d38 <l2cap_send_reject>:
{
    6d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6d3c:	f89d 7020 	ldrb.w	r7, [sp, #32]
    6d40:	4691      	mov	r9, r2
    6d42:	4680      	mov	r8, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    6d44:	1cba      	adds	r2, r7, #2
    6d46:	2001      	movs	r0, #1
{
    6d48:	461e      	mov	r6, r3
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    6d4a:	f7ff ff04 	bl	6b56 <l2cap_create_le_sig_pdu.isra.6>
	rej = net_buf_add(buf, sizeof(*rej));
    6d4e:	f100 0508 	add.w	r5, r0, #8
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    6d52:	4604      	mov	r4, r0
	rej = net_buf_add(buf, sizeof(*rej));
    6d54:	2102      	movs	r1, #2
    6d56:	4628      	mov	r0, r5
    6d58:	f012 fb24 	bl	193a4 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    6d5c:	f8a0 9000 	strh.w	r9, [r0]
	if (data) {
    6d60:	b126      	cbz	r6, 6d6c <l2cap_send_reject+0x34>
		net_buf_add_mem(buf, data, data_len);
    6d62:	463a      	mov	r2, r7
    6d64:	4631      	mov	r1, r6
    6d66:	4628      	mov	r0, r5
    6d68:	f012 fb22 	bl	193b0 <net_buf_simple_add_mem>
    6d6c:	4622      	mov	r2, r4
    6d6e:	4640      	mov	r0, r8
    6d70:	2300      	movs	r3, #0
    6d72:	2105      	movs	r1, #5
}
    6d74:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6d78:	f7ff bf76 	b.w	6c68 <bt_l2cap_send_cb>

00006d7c <l2cap_chan_le_send>:
{
    6d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6d80:	4607      	mov	r7, r0
    6d82:	460c      	mov	r4, r1
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    6d84:	3068      	adds	r0, #104	; 0x68
    6d86:	2100      	movs	r1, #0
    6d88:	4616      	mov	r6, r2
    6d8a:	f01a ff6f 	bl	21c6c <_impl_k_sem_take>
	if (k_sem_take(&ch->tx.credits, K_NO_WAIT)) {
    6d8e:	2800      	cmp	r0, #0
    6d90:	d169      	bne.n	6e66 <l2cap_chan_le_send+0xea>
	if (buf->len + sdu_hdr_len > ch->tx.mps) {
    6d92:	89a3      	ldrh	r3, [r4, #12]
    6d94:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
    6d98:	4433      	add	r3, r6
    6d9a:	4293      	cmp	r3, r2
    6d9c:	f104 0908 	add.w	r9, r4, #8
    6da0:	d820      	bhi.n	6de4 <l2cap_chan_le_send+0x68>
	if (net_buf_headroom(buf) >= headroom && !buf->frags) {
    6da2:	4648      	mov	r0, r9
    6da4:	f012 fb66 	bl	19474 <net_buf_simple_headroom>
	headroom = BT_L2CAP_CHAN_SEND_RESERVE + sdu_hdr_len;
    6da8:	f106 0308 	add.w	r3, r6, #8
	if (net_buf_headroom(buf) >= headroom && !buf->frags) {
    6dac:	b29b      	uxth	r3, r3
    6dae:	4298      	cmp	r0, r3
    6db0:	d318      	bcc.n	6de4 <l2cap_chan_le_send+0x68>
    6db2:	6823      	ldr	r3, [r4, #0]
    6db4:	b9b3      	cbnz	r3, 6de4 <l2cap_chan_le_send+0x68>
		if (sdu_hdr_len) {
    6db6:	b136      	cbz	r6, 6dc6 <l2cap_chan_le_send+0x4a>
			net_buf_push_le16(buf, net_buf_frags_len(buf));
    6db8:	4620      	mov	r0, r4
    6dba:	f7ff fdf1 	bl	69a0 <net_buf_frags_len>
    6dbe:	b281      	uxth	r1, r0
    6dc0:	4648      	mov	r0, r9
    6dc2:	f012 fb2e 	bl	19422 <net_buf_simple_push_le16>
		return net_buf_ref(buf);
    6dc6:	4620      	mov	r0, r4
    6dc8:	f012 fabc 	bl	19344 <net_buf_ref>
    6dcc:	4605      	mov	r5, r0
	if (!ch->chan.conn) {
    6dce:	6838      	ldr	r0, [r7, #0]
    6dd0:	2800      	cmp	r0, #0
    6dd2:	d13f      	bne.n	6e54 <l2cap_chan_le_send+0xd8>
		net_buf_unref(buf);
    6dd4:	4628      	mov	r0, r5
    6dd6:	f012 fa87 	bl	192e8 <net_buf_unref>
		return -ECONNRESET;
    6dda:	f06f 0635 	mvn.w	r6, #53	; 0x35
}
    6dde:	4630      	mov	r0, r6
    6de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    6de4:	79a0      	ldrb	r0, [r4, #6]
    6de6:	f012 f9bb 	bl	19160 <net_buf_pool_get>
	seg = net_buf_alloc(pool, K_NO_WAIT);
    6dea:	2100      	movs	r1, #0
    6dec:	f012 fa4c 	bl	19288 <net_buf_alloc_fixed>
	if (seg) {
    6df0:	4605      	mov	r5, r0
    6df2:	b340      	cbz	r0, 6e46 <l2cap_chan_le_send+0xca>
		net_buf_reserve(seg, BT_L2CAP_CHAN_SEND_RESERVE);
    6df4:	2108      	movs	r1, #8
    6df6:	4408      	add	r0, r1
    6df8:	f012 fa65 	bl	192c6 <net_buf_simple_reserve>
    6dfc:	f105 0808 	add.w	r8, r5, #8
	if (sdu_hdr_len) {
    6e00:	b136      	cbz	r6, 6e10 <l2cap_chan_le_send+0x94>
		net_buf_add_le16(seg, net_buf_frags_len(buf));
    6e02:	4620      	mov	r0, r4
    6e04:	f7ff fdcc 	bl	69a0 <net_buf_frags_len>
    6e08:	b281      	uxth	r1, r0
    6e0a:	4640      	mov	r0, r8
    6e0c:	f012 fae1 	bl	193d2 <net_buf_simple_add_le16>
	len = min(net_buf_tailroom(seg), ch->tx.mps - sdu_hdr_len);
    6e10:	4640      	mov	r0, r8
    6e12:	f012 fb33 	bl	1947c <net_buf_simple_tailroom>
    6e16:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
    6e1a:	1b89      	subs	r1, r1, r6
    6e1c:	4288      	cmp	r0, r1
    6e1e:	d217      	bcs.n	6e50 <l2cap_chan_le_send+0xd4>
    6e20:	4640      	mov	r0, r8
    6e22:	f012 fb2b 	bl	1947c <net_buf_simple_tailroom>
    6e26:	b280      	uxth	r0, r0
	len = min(buf->len, len);
    6e28:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
	net_buf_add_mem(seg, buf->data, len);
    6e2c:	68a1      	ldr	r1, [r4, #8]
    6e2e:	4582      	cmp	sl, r0
    6e30:	bf28      	it	cs
    6e32:	4682      	movcs	sl, r0
    6e34:	4652      	mov	r2, sl
    6e36:	4640      	mov	r0, r8
    6e38:	f012 faba 	bl	193b0 <net_buf_simple_add_mem>
	net_buf_pull(buf, len);
    6e3c:	4651      	mov	r1, sl
    6e3e:	4648      	mov	r0, r9
    6e40:	f012 fb00 	bl	19444 <net_buf_simple_pull>
    6e44:	e7c3      	b.n	6dce <l2cap_chan_le_send+0x52>
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    6e46:	2104      	movs	r1, #4
    6e48:	f7ff fc98 	bl	677c <bt_conn_create_pdu>
    6e4c:	4605      	mov	r5, r0
    6e4e:	e7d5      	b.n	6dfc <l2cap_chan_le_send+0x80>
	len = min(net_buf_tailroom(seg), ch->tx.mps - sdu_hdr_len);
    6e50:	b288      	uxth	r0, r1
    6e52:	e7e9      	b.n	6e28 <l2cap_chan_le_send+0xac>
	len = buf->len - sdu_hdr_len;
    6e54:	89ab      	ldrh	r3, [r5, #12]
    6e56:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
    6e5a:	1b9e      	subs	r6, r3, r6
    6e5c:	462a      	mov	r2, r5
    6e5e:	2300      	movs	r3, #0
    6e60:	f7ff ff02 	bl	6c68 <bt_l2cap_send_cb>
    6e64:	e7bb      	b.n	6dde <l2cap_chan_le_send+0x62>
		return -EAGAIN;
    6e66:	f06f 060a 	mvn.w	r6, #10
    6e6a:	e7b8      	b.n	6dde <l2cap_chan_le_send+0x62>

00006e6c <l2cap_chan_le_send_sdu>:
{
    6e6c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	total_len = net_buf_frags_len(*buf) + sent;
    6e70:	680c      	ldr	r4, [r1, #0]
{
    6e72:	9201      	str	r2, [sp, #4]
    6e74:	4606      	mov	r6, r0
	total_len = net_buf_frags_len(*buf) + sent;
    6e76:	4620      	mov	r0, r4
{
    6e78:	460f      	mov	r7, r1
	total_len = net_buf_frags_len(*buf) + sent;
    6e7a:	f7ff fd91 	bl	69a0 <net_buf_frags_len>
    6e7e:	9b01      	ldr	r3, [sp, #4]
	if (total_len > ch->tx.mtu) {
    6e80:	f8b6 2062 	ldrh.w	r2, [r6, #98]	; 0x62
	total_len = net_buf_frags_len(*buf) + sent;
    6e84:	eb03 0800 	add.w	r8, r3, r0
	if (total_len > ch->tx.mtu) {
    6e88:	4590      	cmp	r8, r2
    6e8a:	dc36      	bgt.n	6efa <l2cap_chan_le_send_sdu+0x8e>
	if (!frag->len && frag->frags) {
    6e8c:	89a2      	ldrh	r2, [r4, #12]
    6e8e:	b91a      	cbnz	r2, 6e98 <l2cap_chan_le_send_sdu+0x2c>
    6e90:	6822      	ldr	r2, [r4, #0]
    6e92:	2a00      	cmp	r2, #0
    6e94:	bf18      	it	ne
    6e96:	4614      	movne	r4, r2
	if (!sent) {
    6e98:	b9b3      	cbnz	r3, 6ec8 <l2cap_chan_le_send_sdu+0x5c>
		ret = l2cap_chan_le_send(ch, frag, BT_L2CAP_SDU_HDR_LEN);
    6e9a:	2202      	movs	r2, #2
    6e9c:	4621      	mov	r1, r4
    6e9e:	4630      	mov	r0, r6
    6ea0:	f7ff ff6c 	bl	6d7c <l2cap_chan_le_send>
		if (ret < 0) {
    6ea4:	1e05      	subs	r5, r0, #0
    6ea6:	da0e      	bge.n	6ec6 <l2cap_chan_le_send_sdu+0x5a>
			if (ret == -EAGAIN) {
    6ea8:	f115 0f0b 	cmn.w	r5, #11
    6eac:	d106      	bne.n	6ebc <l2cap_chan_le_send_sdu+0x50>
				memcpy(net_buf_user_data(frag), &sent,
    6eae:	2204      	movs	r2, #4
    6eb0:	eb0d 0102 	add.w	r1, sp, r2
    6eb4:	f104 0014 	add.w	r0, r4, #20
    6eb8:	f7f9 fc6b 	bl	792 <memcpy>
			*buf = frag;
    6ebc:	603c      	str	r4, [r7, #0]
}
    6ebe:	4628      	mov	r0, r5
    6ec0:	b002      	add	sp, #8
    6ec2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		sent = ret;
    6ec6:	9501      	str	r5, [sp, #4]
	if (!frag->len && frag->frags) {
    6ec8:	2500      	movs	r5, #0
	for (ret = 0; sent < total_len; sent += ret) {
    6eca:	9b01      	ldr	r3, [sp, #4]
    6ecc:	4598      	cmp	r8, r3
    6ece:	dc03      	bgt.n	6ed8 <l2cap_chan_le_send_sdu+0x6c>
	net_buf_unref(frag);
    6ed0:	4620      	mov	r0, r4
    6ed2:	f012 fa09 	bl	192e8 <net_buf_unref>
	return ret;
    6ed6:	e7f2      	b.n	6ebe <l2cap_chan_le_send_sdu+0x52>
		if (!frag->len) {
    6ed8:	89a0      	ldrh	r0, [r4, #12]
    6eda:	b918      	cbnz	r0, 6ee4 <l2cap_chan_le_send_sdu+0x78>
			frag = net_buf_frag_del(NULL, frag);
    6edc:	4621      	mov	r1, r4
    6ede:	f012 fa55 	bl	1938c <net_buf_frag_del>
    6ee2:	4604      	mov	r4, r0
		ret = l2cap_chan_le_send(ch, frag, 0);
    6ee4:	2200      	movs	r2, #0
    6ee6:	4621      	mov	r1, r4
    6ee8:	4630      	mov	r0, r6
    6eea:	f7ff ff47 	bl	6d7c <l2cap_chan_le_send>
		if (ret < 0) {
    6eee:	1e05      	subs	r5, r0, #0
    6ef0:	dbda      	blt.n	6ea8 <l2cap_chan_le_send_sdu+0x3c>
	for (ret = 0; sent < total_len; sent += ret) {
    6ef2:	9b01      	ldr	r3, [sp, #4]
    6ef4:	442b      	add	r3, r5
    6ef6:	9301      	str	r3, [sp, #4]
    6ef8:	e7e7      	b.n	6eca <l2cap_chan_le_send_sdu+0x5e>
		return -EMSGSIZE;
    6efa:	f06f 0523 	mvn.w	r5, #35	; 0x23
    6efe:	e7de      	b.n	6ebe <l2cap_chan_le_send_sdu+0x52>

00006f00 <l2cap_chan_update_credits.isra.9>:
static void l2cap_chan_update_credits(struct bt_l2cap_le_chan *chan,
    6f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6f04:	6d03      	ldr	r3, [r0, #80]	; 0x50
	    L2CAP_LE_CREDITS_THRESHOLD(chan->rx.init_credits)) {
    6f06:	f8b0 4046 	ldrh.w	r4, [r0, #70]	; 0x46
	if (k_sem_count_get(&chan->rx.credits) >
    6f0a:	ebb3 0f54 	cmp.w	r3, r4, lsr #1
static void l2cap_chan_update_credits(struct bt_l2cap_le_chan *chan,
    6f0e:	4606      	mov	r6, r0
	if (k_sem_count_get(&chan->rx.credits) >
    6f10:	d823      	bhi.n	6f5a <l2cap_chan_update_credits.isra.9+0x5a>
	credits = chan->rx.init_credits - k_sem_count_get(&chan->rx.credits);
    6f12:	1ae4      	subs	r4, r4, r3
    6f14:	b2a4      	uxth	r4, r4
    6f16:	4625      	mov	r5, r4
		k_sem_give(&chan->rx.credits);
    6f18:	f100 0748 	add.w	r7, r0, #72	; 0x48
	while (credits--) {
    6f1c:	b9bd      	cbnz	r5, 6f4e <l2cap_chan_update_credits.isra.9+0x4e>
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CREDITS, get_ident(),
    6f1e:	f7ff fd47 	bl	69b0 <get_ident>
    6f22:	2204      	movs	r2, #4
    6f24:	4601      	mov	r1, r0
    6f26:	2016      	movs	r0, #22
    6f28:	f7ff fe15 	bl	6b56 <l2cap_create_le_sig_pdu.isra.6>
	ev = net_buf_add(buf, sizeof(*ev));
    6f2c:	2104      	movs	r1, #4
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CREDITS, get_ident(),
    6f2e:	4607      	mov	r7, r0
	ev = net_buf_add(buf, sizeof(*ev));
    6f30:	3008      	adds	r0, #8
    6f32:	f012 fa37 	bl	193a4 <net_buf_simple_add>
	ev->cid = sys_cpu_to_le16(chan->rx.cid);
    6f36:	f8b6 3040 	ldrh.w	r3, [r6, #64]	; 0x40
    6f3a:	8003      	strh	r3, [r0, #0]
	ev->credits = sys_cpu_to_le16(credits);
    6f3c:	8044      	strh	r4, [r0, #2]
    6f3e:	462b      	mov	r3, r5
    6f40:	463a      	mov	r2, r7
    6f42:	6830      	ldr	r0, [r6, #0]
    6f44:	2105      	movs	r1, #5
}
    6f46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6f4a:	f7ff be8d 	b.w	6c68 <bt_l2cap_send_cb>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    6f4e:	4638      	mov	r0, r7
    6f50:	3d01      	subs	r5, #1
    6f52:	f01a fe2b 	bl	21bac <_impl_k_sem_give>
    6f56:	b2ad      	uxth	r5, r5
    6f58:	e7e0      	b.n	6f1c <l2cap_chan_update_credits.isra.9+0x1c>
    6f5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006f5e <bt_l2cap_le_lookup_tx_cid>:
{
    6f5e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    6f60:	b100      	cbz	r0, 6f64 <bt_l2cap_le_lookup_tx_cid+0x6>
    6f62:	3808      	subs	r0, #8
    6f64:	b900      	cbnz	r0, 6f68 <bt_l2cap_le_lookup_tx_cid+0xa>
}
    6f66:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
    6f68:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
    6f6c:	428b      	cmp	r3, r1
    6f6e:	d0fa      	beq.n	6f66 <bt_l2cap_le_lookup_tx_cid+0x8>
    6f70:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    6f72:	2000      	movs	r0, #0
    6f74:	2b00      	cmp	r3, #0
    6f76:	d0f6      	beq.n	6f66 <bt_l2cap_le_lookup_tx_cid+0x8>
    6f78:	f1a3 0008 	sub.w	r0, r3, #8
    6f7c:	e7f2      	b.n	6f64 <bt_l2cap_le_lookup_tx_cid+0x6>

00006f7e <bt_l2cap_le_lookup_rx_cid>:
{
    6f7e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    6f80:	b100      	cbz	r0, 6f84 <bt_l2cap_le_lookup_rx_cid+0x6>
    6f82:	3808      	subs	r0, #8
    6f84:	b900      	cbnz	r0, 6f88 <bt_l2cap_le_lookup_rx_cid+0xa>
}
    6f86:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
    6f88:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
    6f8c:	428b      	cmp	r3, r1
    6f8e:	d0fa      	beq.n	6f86 <bt_l2cap_le_lookup_rx_cid+0x8>
    6f90:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    6f92:	2000      	movs	r0, #0
    6f94:	2b00      	cmp	r3, #0
    6f96:	d0f6      	beq.n	6f86 <bt_l2cap_le_lookup_rx_cid+0x8>
    6f98:	f1a3 0008 	sub.w	r0, r3, #8
    6f9c:	e7f2      	b.n	6f84 <bt_l2cap_le_lookup_rx_cid+0x6>
	...

00006fa0 <l2cap_chan_add>:
{
    6fa0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    6fa2:	4605      	mov	r5, r0
    6fa4:	4616      	mov	r6, r2
	if (ch && ch->rx.cid > 0) {
    6fa6:	460c      	mov	r4, r1
    6fa8:	b111      	cbz	r1, 6fb0 <l2cap_chan_add+0x10>
    6faa:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
    6fae:	b943      	cbnz	r3, 6fc2 <l2cap_chan_add+0x22>
    6fb0:	2240      	movs	r2, #64	; 0x40
		if (ch && !bt_l2cap_le_lookup_rx_cid(conn, cid)) {
    6fb2:	b1fc      	cbz	r4, 6ff4 <l2cap_chan_add+0x54>
    6fb4:	4611      	mov	r1, r2
    6fb6:	4628      	mov	r0, r5
    6fb8:	f7ff ffe1 	bl	6f7e <bt_l2cap_le_lookup_rx_cid>
    6fbc:	b9d0      	cbnz	r0, 6ff4 <l2cap_chan_add+0x54>
			ch->rx.cid = cid;
    6fbe:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    6fc2:	4914      	ldr	r1, [pc, #80]	; (7014 <l2cap_chan_add+0x74>)
    6fc4:	f104 0010 	add.w	r0, r4, #16
    6fc8:	f01b f91c 	bl	22204 <k_delayed_work_init>
	sys_slist_append(&conn->channels, &chan->node);
    6fcc:	f105 003c 	add.w	r0, r5, #60	; 0x3c
    6fd0:	f104 0108 	add.w	r1, r4, #8
    6fd4:	f7ff fcca 	bl	696c <sys_slist_append>
	    L2CAP_LE_CID_IS_DYN(ch->rx.cid)) {
    6fd8:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
	chan->conn = conn;
    6fdc:	6025      	str	r5, [r4, #0]
	    L2CAP_LE_CID_IS_DYN(ch->rx.cid)) {
    6fde:	3b40      	subs	r3, #64	; 0x40
	if (IS_ENABLED(CONFIG_BT_L2CAP_DYNAMIC_CHANNEL) &&
    6fe0:	b29b      	uxth	r3, r3
    6fe2:	2b3f      	cmp	r3, #63	; 0x3f
	chan->destroy = destroy;
    6fe4:	60e6      	str	r6, [r4, #12]
    6fe6:	f04f 0001 	mov.w	r0, #1
	if (IS_ENABLED(CONFIG_BT_L2CAP_DYNAMIC_CHANNEL) &&
    6fea:	d801      	bhi.n	6ff0 <l2cap_chan_add+0x50>
	chan->state = state;
    6fec:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
    6ff0:	b002      	add	sp, #8
    6ff2:	bd70      	pop	{r4, r5, r6, pc}
	for (cid = L2CAP_LE_CID_DYN_START; cid <= L2CAP_LE_CID_DYN_END; cid++) {
    6ff4:	3201      	adds	r2, #1
    6ff6:	b292      	uxth	r2, r2
    6ff8:	2a80      	cmp	r2, #128	; 0x80
    6ffa:	d1da      	bne.n	6fb2 <l2cap_chan_add+0x12>
		BT_ERR("Unable to allocate L2CAP CID");
    6ffc:	4b06      	ldr	r3, [pc, #24]	; (7018 <l2cap_chan_add+0x78>)
    6ffe:	9301      	str	r3, [sp, #4]
    7000:	9300      	str	r3, [sp, #0]
    7002:	4a06      	ldr	r2, [pc, #24]	; (701c <l2cap_chan_add+0x7c>)
    7004:	4b06      	ldr	r3, [pc, #24]	; (7020 <l2cap_chan_add+0x80>)
    7006:	4907      	ldr	r1, [pc, #28]	; (7024 <l2cap_chan_add+0x84>)
    7008:	4807      	ldr	r0, [pc, #28]	; (7028 <l2cap_chan_add+0x88>)
    700a:	f7fb f943 	bl	2294 <printk>
    700e:	2000      	movs	r0, #0
    7010:	e7ee      	b.n	6ff0 <l2cap_chan_add+0x50>
    7012:	bf00      	nop
    7014:	00006be9 	.word	0x00006be9
    7018:	00023dae 	.word	0x00023dae
    701c:	00022d76 	.word	0x00022d76
    7020:	000244ce 	.word	0x000244ce
    7024:	000272d8 	.word	0x000272d8
    7028:	000246f1 	.word	0x000246f1

0000702c <bt_l2cap_connected>:
{
    702c:	4b10      	ldr	r3, [pc, #64]	; (7070 <bt_l2cap_connected+0x44>)
    702e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    7030:	681c      	ldr	r4, [r3, #0]
    7032:	4605      	mov	r5, r0
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    7034:	b10c      	cbz	r4, 703a <bt_l2cap_connected+0xe>
    7036:	3c08      	subs	r4, #8
    7038:	b90c      	cbnz	r4, 703e <bt_l2cap_connected+0x12>
}
    703a:	b003      	add	sp, #12
    703c:	bd30      	pop	{r4, r5, pc}
		if (fchan->accept(conn, &chan) < 0) {
    703e:	6863      	ldr	r3, [r4, #4]
    7040:	a901      	add	r1, sp, #4
    7042:	4628      	mov	r0, r5
    7044:	4798      	blx	r3
    7046:	2800      	cmp	r0, #0
    7048:	db10      	blt.n	706c <bt_l2cap_connected+0x40>
		ch = BT_L2CAP_LE_CHAN(chan);
    704a:	9901      	ldr	r1, [sp, #4]
		ch->rx.cid = fchan->cid;
    704c:	8823      	ldrh	r3, [r4, #0]
    704e:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
		ch->tx.cid = fchan->cid;
    7052:	f8a1 3060 	strh.w	r3, [r1, #96]	; 0x60
		if (!l2cap_chan_add(conn, chan, NULL)) {
    7056:	2200      	movs	r2, #0
    7058:	4628      	mov	r0, r5
    705a:	f7ff ffa1 	bl	6fa0 <l2cap_chan_add>
    705e:	2800      	cmp	r0, #0
    7060:	d0eb      	beq.n	703a <bt_l2cap_connected+0xe>
		if (chan->ops->connected) {
    7062:	9801      	ldr	r0, [sp, #4]
    7064:	6843      	ldr	r3, [r0, #4]
    7066:	681b      	ldr	r3, [r3, #0]
    7068:	b103      	cbz	r3, 706c <bt_l2cap_connected+0x40>
			chan->ops->connected(chan);
    706a:	4798      	blx	r3
    706c:	68a4      	ldr	r4, [r4, #8]
    706e:	e7e1      	b.n	7034 <bt_l2cap_connected+0x8>
    7070:	200005d8 	.word	0x200005d8

00007074 <bt_l2cap_server_register>:
{
    7074:	4601      	mov	r1, r0
	if (server->psm < L2CAP_LE_PSM_START ||
    7076:	8800      	ldrh	r0, [r0, #0]
{
    7078:	b508      	push	{r3, lr}
	if (server->psm < L2CAP_LE_PSM_START ||
    707a:	1e43      	subs	r3, r0, #1
    707c:	2bfe      	cmp	r3, #254	; 0xfe
    707e:	d811      	bhi.n	70a4 <bt_l2cap_server_register+0x30>
	    server->psm > L2CAP_LE_PSM_END || !server->accept) {
    7080:	684b      	ldr	r3, [r1, #4]
    7082:	b17b      	cbz	r3, 70a4 <bt_l2cap_server_register+0x30>
	if (server->sec_level > BT_SECURITY_FIPS) {
    7084:	788b      	ldrb	r3, [r1, #2]
    7086:	2b04      	cmp	r3, #4
    7088:	d80c      	bhi.n	70a4 <bt_l2cap_server_register+0x30>
	} else if (server->sec_level < BT_SECURITY_LOW) {
    708a:	b90b      	cbnz	r3, 7090 <bt_l2cap_server_register+0x1c>
		server->sec_level = BT_SECURITY_LOW;
    708c:	2301      	movs	r3, #1
    708e:	708b      	strb	r3, [r1, #2]
	if (l2cap_server_lookup_psm(server->psm)) {
    7090:	f7ff fcb6 	bl	6a00 <l2cap_server_lookup_psm>
    7094:	4602      	mov	r2, r0
    7096:	b940      	cbnz	r0, 70aa <bt_l2cap_server_register+0x36>
	sys_slist_append(&servers, &server->node);
    7098:	3108      	adds	r1, #8
    709a:	4805      	ldr	r0, [pc, #20]	; (70b0 <bt_l2cap_server_register+0x3c>)
    709c:	f7ff fc66 	bl	696c <sys_slist_append>
	return 0;
    70a0:	4610      	mov	r0, r2
    70a2:	bd08      	pop	{r3, pc}
		return -EINVAL;
    70a4:	f06f 0015 	mvn.w	r0, #21
    70a8:	bd08      	pop	{r3, pc}
		return -EADDRINUSE;
    70aa:	f06f 002f 	mvn.w	r0, #47	; 0x2f
}
    70ae:	bd08      	pop	{r3, pc}
    70b0:	200005e0 	.word	0x200005e0

000070b4 <bt_l2cap_update_conn_param>:
{
    70b4:	b570      	push	{r4, r5, r6, lr}
    70b6:	460c      	mov	r4, r1
    70b8:	4606      	mov	r6, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    70ba:	f7ff fc79 	bl	69b0 <get_ident>
    70be:	2208      	movs	r2, #8
    70c0:	4601      	mov	r1, r0
    70c2:	2012      	movs	r0, #18
    70c4:	f7ff fd47 	bl	6b56 <l2cap_create_le_sig_pdu.isra.6>
	req = net_buf_add(buf, sizeof(*req));
    70c8:	2108      	movs	r1, #8
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    70ca:	4605      	mov	r5, r0
	req = net_buf_add(buf, sizeof(*req));
    70cc:	4408      	add	r0, r1
    70ce:	f012 f969 	bl	193a4 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    70d2:	8823      	ldrh	r3, [r4, #0]
    70d4:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    70d6:	8863      	ldrh	r3, [r4, #2]
    70d8:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    70da:	88a3      	ldrh	r3, [r4, #4]
    70dc:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    70de:	88e3      	ldrh	r3, [r4, #6]
    70e0:	80c3      	strh	r3, [r0, #6]
    70e2:	462a      	mov	r2, r5
    70e4:	4630      	mov	r0, r6
    70e6:	2300      	movs	r3, #0
    70e8:	2105      	movs	r1, #5
    70ea:	f7ff fdbd 	bl	6c68 <bt_l2cap_send_cb>
}
    70ee:	2000      	movs	r0, #0
    70f0:	bd70      	pop	{r4, r5, r6, pc}
	...

000070f4 <bt_l2cap_init>:
	static struct bt_l2cap_fixed_chan chan = {
		.cid	= BT_L2CAP_CID_LE_SIG,
		.accept	= l2cap_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    70f4:	4801      	ldr	r0, [pc, #4]	; (70fc <bt_l2cap_init+0x8>)
    70f6:	f7ff bd41 	b.w	6b7c <bt_l2cap_le_fixed_chan_register>
    70fa:	bf00      	nop
    70fc:	20009e20 	.word	0x20009e20

00007100 <bt_l2cap_chan_connect>:
	return l2cap_le_conn_req(ch);
}

int bt_l2cap_chan_connect(struct bt_conn *conn, struct bt_l2cap_chan *chan,
			  u16_t psm)
{
    7100:	b570      	push	{r4, r5, r6, lr}
    7102:	460c      	mov	r4, r1
    7104:	4616      	mov	r6, r2
	BT_DBG("conn %p chan %p psm 0x%04x", conn, chan, psm);

	if (!conn || conn->state != BT_CONN_CONNECTED) {
    7106:	4605      	mov	r5, r0
    7108:	b318      	cbz	r0, 7152 <bt_l2cap_chan_connect+0x52>
    710a:	7b03      	ldrb	r3, [r0, #12]
    710c:	2b03      	cmp	r3, #3
    710e:	d120      	bne.n	7152 <bt_l2cap_chan_connect+0x52>
		return -ENOTCONN;
	}

	if (!chan) {
    7110:	b911      	cbnz	r1, 7118 <bt_l2cap_chan_connect+0x18>
		return -EINVAL;
    7112:	f06f 0015 	mvn.w	r0, #21
    7116:	bd70      	pop	{r4, r5, r6, pc}
	if (IS_ENABLED(CONFIG_BT_BREDR) &&
	    conn->type == BT_CONN_TYPE_BR) {
		return bt_l2cap_br_chan_connect(conn, chan, psm);
	}

	if (chan->required_sec_level > BT_SECURITY_FIPS) {
    7118:	f891 303d 	ldrb.w	r3, [r1, #61]	; 0x3d
    711c:	2b04      	cmp	r3, #4
    711e:	d8f8      	bhi.n	7112 <bt_l2cap_chan_connect+0x12>
		return -EINVAL;
	} else if (chan->required_sec_level == BT_SECURITY_NONE) {
    7120:	b913      	cbnz	r3, 7128 <bt_l2cap_chan_connect+0x28>
		chan->required_sec_level = BT_SECURITY_LOW;
    7122:	2301      	movs	r3, #1
    7124:	f881 303d 	strb.w	r3, [r1, #61]	; 0x3d
	if (psm < L2CAP_LE_PSM_START || psm > L2CAP_LE_PSM_END) {
    7128:	1e73      	subs	r3, r6, #1
    712a:	2bfe      	cmp	r3, #254	; 0xfe
    712c:	d8f1      	bhi.n	7112 <bt_l2cap_chan_connect+0x12>
	l2cap_chan_tx_init(ch);
    712e:	4620      	mov	r0, r4
    7130:	f7ff fcda 	bl	6ae8 <l2cap_chan_tx_init>
	l2cap_chan_rx_init(ch);
    7134:	4620      	mov	r0, r4
    7136:	f7ff fceb 	bl	6b10 <l2cap_chan_rx_init>
	if (!l2cap_chan_add(conn, &ch->chan, l2cap_chan_destroy)) {
    713a:	4a09      	ldr	r2, [pc, #36]	; (7160 <bt_l2cap_chan_connect+0x60>)
    713c:	4621      	mov	r1, r4
    713e:	4628      	mov	r0, r5
    7140:	f7ff ff2e 	bl	6fa0 <l2cap_chan_add>
    7144:	b140      	cbz	r0, 7158 <bt_l2cap_chan_connect+0x58>
	ch->chan.psm = psm;
    7146:	8766      	strh	r6, [r4, #58]	; 0x3a
	return l2cap_le_conn_req(ch);
    7148:	4620      	mov	r0, r4
	}

	return l2cap_le_connect(conn, BT_L2CAP_LE_CHAN(chan), psm);
}
    714a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return l2cap_le_conn_req(ch);
    714e:	f7ff bda1 	b.w	6c94 <l2cap_le_conn_req>
		return -ENOTCONN;
    7152:	f06f 0038 	mvn.w	r0, #56	; 0x38
    7156:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
    7158:	f06f 000b 	mvn.w	r0, #11
}
    715c:	bd70      	pop	{r4, r5, r6, pc}
    715e:	bf00      	nop
    7160:	00006ab5 	.word	0x00006ab5

00007164 <bt_l2cap_chan_disconnect>:

int bt_l2cap_chan_disconnect(struct bt_l2cap_chan *chan)
{
    7164:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = chan->conn;
	struct net_buf *buf;
	struct bt_l2cap_disconn_req *req;
	struct bt_l2cap_le_chan *ch;

	if (!conn) {
    7166:	6803      	ldr	r3, [r0, #0]
{
    7168:	4604      	mov	r4, r0
	if (!conn) {
    716a:	b32b      	cbz	r3, 71b8 <bt_l2cap_chan_disconnect+0x54>
	ch = BT_L2CAP_LE_CHAN(chan);

	BT_DBG("chan %p scid 0x%04x dcid 0x%04x", chan, ch->rx.cid,
	       ch->tx.cid);

	ch->chan.ident = get_ident();
    716c:	f7ff fc20 	bl	69b0 <get_ident>

	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_DISCONN_REQ,
    7170:	2204      	movs	r2, #4
	ch->chan.ident = get_ident();
    7172:	4601      	mov	r1, r0
    7174:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_DISCONN_REQ,
    7178:	2006      	movs	r0, #6
    717a:	f7ff fcec 	bl	6b56 <l2cap_create_le_sig_pdu.isra.6>
				      ch->chan.ident, sizeof(*req));

	req = net_buf_add(buf, sizeof(*req));
    717e:	2104      	movs	r1, #4
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_DISCONN_REQ,
    7180:	4605      	mov	r5, r0
	req = net_buf_add(buf, sizeof(*req));
    7182:	3008      	adds	r0, #8
    7184:	f012 f90e 	bl	193a4 <net_buf_simple_add>
	req->dcid = sys_cpu_to_le16(ch->tx.cid);
    7188:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
    718c:	8003      	strh	r3, [r0, #0]
	req->scid = sys_cpu_to_le16(ch->rx.cid);
    718e:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
    7192:	8043      	strh	r3, [r0, #2]
    7194:	f104 0110 	add.w	r1, r4, #16
    7198:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
    719c:	4808      	ldr	r0, [pc, #32]	; (71c0 <bt_l2cap_chan_disconnect+0x5c>)
    719e:	f01b f8a9 	bl	222f4 <k_delayed_work_submit_to_queue>
    71a2:	6820      	ldr	r0, [r4, #0]
    71a4:	2300      	movs	r3, #0
    71a6:	462a      	mov	r2, r5
    71a8:	2105      	movs	r1, #5
    71aa:	f7ff fd5d 	bl	6c68 <bt_l2cap_send_cb>
	chan->state = state;
    71ae:	2304      	movs	r3, #4
    71b0:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

	l2cap_chan_send_req(ch, buf, L2CAP_DISC_TIMEOUT);
	bt_l2cap_chan_set_state(chan, BT_L2CAP_DISCONNECT);

	return 0;
    71b4:	2000      	movs	r0, #0
    71b6:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTCONN;
    71b8:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
    71bc:	bd38      	pop	{r3, r4, r5, pc}
    71be:	bf00      	nop
    71c0:	20003340 	.word	0x20003340

000071c4 <l2cap_chan_le_recv_sdu>:
{
    71c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    71c8:	460d      	mov	r5, r1
	if (net_buf_frags_len(chan->_sdu) + buf->len > chan->_sdu_len) {
    71ca:	f8d0 1094 	ldr.w	r1, [r0, #148]	; 0x94
{
    71ce:	4604      	mov	r4, r0
	if (net_buf_frags_len(chan->_sdu) + buf->len > chan->_sdu_len) {
    71d0:	4608      	mov	r0, r1
    71d2:	f7ff fbe5 	bl	69a0 <net_buf_frags_len>
    71d6:	89ab      	ldrh	r3, [r5, #12]
    71d8:	4418      	add	r0, r3
    71da:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
    71de:	4298      	cmp	r0, r3
    71e0:	d90e      	bls.n	7200 <l2cap_chan_le_recv_sdu+0x3c>
		BT_ERR("SDU length mismatch");
    71e2:	4b30      	ldr	r3, [pc, #192]	; (72a4 <l2cap_chan_le_recv_sdu+0xe0>)
    71e4:	9301      	str	r3, [sp, #4]
    71e6:	9300      	str	r3, [sp, #0]
    71e8:	4a2f      	ldr	r2, [pc, #188]	; (72a8 <l2cap_chan_le_recv_sdu+0xe4>)
    71ea:	4b30      	ldr	r3, [pc, #192]	; (72ac <l2cap_chan_le_recv_sdu+0xe8>)
    71ec:	4930      	ldr	r1, [pc, #192]	; (72b0 <l2cap_chan_le_recv_sdu+0xec>)
    71ee:	4831      	ldr	r0, [pc, #196]	; (72b4 <l2cap_chan_le_recv_sdu+0xf0>)
				BT_ERR("Unable to store SDU");
    71f0:	f7fb f850 	bl	2294 <printk>
				bt_l2cap_chan_disconnect(&chan->chan);
    71f4:	4620      	mov	r0, r4
}
    71f6:	b003      	add	sp, #12
    71f8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
				bt_l2cap_chan_disconnect(&chan->chan);
    71fc:	f7ff bfb2 	b.w	7164 <bt_l2cap_chan_disconnect>
	frag = net_buf_frag_last(chan->_sdu);
    7200:	4608      	mov	r0, r1
    7202:	f012 f8a3 	bl	1934c <net_buf_frag_last>
		net_buf_pull(buf, len);
    7206:	f105 0908 	add.w	r9, r5, #8
	frag = net_buf_frag_last(chan->_sdu);
    720a:	4606      	mov	r6, r0
	while (buf->len) {
    720c:	89af      	ldrh	r7, [r5, #12]
    720e:	b9d7      	cbnz	r7, 7246 <l2cap_chan_le_recv_sdu+0x82>
	if (net_buf_frags_len(chan->_sdu) == chan->_sdu_len) {
    7210:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
    7214:	4608      	mov	r0, r1
    7216:	f7ff fbc3 	bl	69a0 <net_buf_frags_len>
    721a:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
    721e:	4298      	cmp	r0, r3
    7220:	d10b      	bne.n	723a <l2cap_chan_le_recv_sdu+0x76>
		chan->chan.ops->recv(&chan->chan, chan->_sdu);
    7222:	6863      	ldr	r3, [r4, #4]
    7224:	4620      	mov	r0, r4
    7226:	691b      	ldr	r3, [r3, #16]
    7228:	4798      	blx	r3
		net_buf_unref(chan->_sdu);
    722a:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    722e:	f012 f85b 	bl	192e8 <net_buf_unref>
		chan->_sdu = NULL;
    7232:	f8c4 7094 	str.w	r7, [r4, #148]	; 0x94
		chan->_sdu_len = 0;
    7236:	f8a4 7098 	strh.w	r7, [r4, #152]	; 0x98
	l2cap_chan_update_credits(chan, buf);
    723a:	4620      	mov	r0, r4
}
    723c:	b003      	add	sp, #12
    723e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	l2cap_chan_update_credits(chan, buf);
    7242:	f7ff be5d 	b.w	6f00 <l2cap_chan_update_credits.isra.9>
		if (!net_buf_tailroom(frag)) {
    7246:	f106 0008 	add.w	r0, r6, #8
    724a:	f012 f917 	bl	1947c <net_buf_simple_tailroom>
    724e:	b950      	cbnz	r0, 7266 <l2cap_chan_le_recv_sdu+0xa2>
	frag = chan->chan.ops->alloc_buf(&chan->chan);
    7250:	6863      	ldr	r3, [r4, #4]
    7252:	4620      	mov	r0, r4
    7254:	68db      	ldr	r3, [r3, #12]
    7256:	4798      	blx	r3
	if (!frag) {
    7258:	4606      	mov	r6, r0
    725a:	b1d0      	cbz	r0, 7292 <l2cap_chan_le_recv_sdu+0xce>
	net_buf_frag_add(chan->_sdu, frag);
    725c:	4601      	mov	r1, r0
    725e:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    7262:	f012 f883 	bl	1936c <net_buf_frag_add>
		len = min(net_buf_tailroom(frag), buf->len);
    7266:	f106 0808 	add.w	r8, r6, #8
    726a:	4640      	mov	r0, r8
    726c:	f012 f906 	bl	1947c <net_buf_simple_tailroom>
    7270:	89af      	ldrh	r7, [r5, #12]
    7272:	42b8      	cmp	r0, r7
    7274:	d203      	bcs.n	727e <l2cap_chan_le_recv_sdu+0xba>
    7276:	4640      	mov	r0, r8
    7278:	f012 f900 	bl	1947c <net_buf_simple_tailroom>
    727c:	b287      	uxth	r7, r0
		net_buf_add_mem(frag, buf->data, len);
    727e:	68a9      	ldr	r1, [r5, #8]
    7280:	463a      	mov	r2, r7
    7282:	4640      	mov	r0, r8
    7284:	f012 f894 	bl	193b0 <net_buf_simple_add_mem>
		net_buf_pull(buf, len);
    7288:	4639      	mov	r1, r7
    728a:	4648      	mov	r0, r9
    728c:	f012 f8da 	bl	19444 <net_buf_simple_pull>
    7290:	e7bc      	b.n	720c <l2cap_chan_le_recv_sdu+0x48>
				BT_ERR("Unable to store SDU");
    7292:	4b04      	ldr	r3, [pc, #16]	; (72a4 <l2cap_chan_le_recv_sdu+0xe0>)
    7294:	9301      	str	r3, [sp, #4]
    7296:	9300      	str	r3, [sp, #0]
    7298:	4a03      	ldr	r2, [pc, #12]	; (72a8 <l2cap_chan_le_recv_sdu+0xe4>)
    729a:	4b04      	ldr	r3, [pc, #16]	; (72ac <l2cap_chan_le_recv_sdu+0xe8>)
    729c:	4904      	ldr	r1, [pc, #16]	; (72b0 <l2cap_chan_le_recv_sdu+0xec>)
    729e:	4806      	ldr	r0, [pc, #24]	; (72b8 <l2cap_chan_le_recv_sdu+0xf4>)
    72a0:	e7a6      	b.n	71f0 <l2cap_chan_le_recv_sdu+0x2c>
    72a2:	bf00      	nop
    72a4:	00023dae 	.word	0x00023dae
    72a8:	00022d76 	.word	0x00022d76
    72ac:	00024554 	.word	0x00024554
    72b0:	000272d8 	.word	0x000272d8
    72b4:	0002471e 	.word	0x0002471e
    72b8:	00024742 	.word	0x00024742

000072bc <bt_l2cap_recv>:
{
    72bc:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    72be:	898b      	ldrh	r3, [r1, #12]
    72c0:	2b03      	cmp	r3, #3
{
    72c2:	b085      	sub	sp, #20
    72c4:	4604      	mov	r4, r0
    72c6:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    72c8:	d80e      	bhi.n	72e8 <bt_l2cap_recv+0x2c>
		BT_ERR("Too small L2CAP PDU received");
    72ca:	4b3c      	ldr	r3, [pc, #240]	; (73bc <bt_l2cap_recv+0x100>)
    72cc:	9301      	str	r3, [sp, #4]
    72ce:	9300      	str	r3, [sp, #0]
    72d0:	4a3b      	ldr	r2, [pc, #236]	; (73c0 <bt_l2cap_recv+0x104>)
    72d2:	4b3c      	ldr	r3, [pc, #240]	; (73c4 <bt_l2cap_recv+0x108>)
    72d4:	493c      	ldr	r1, [pc, #240]	; (73c8 <bt_l2cap_recv+0x10c>)
    72d6:	483d      	ldr	r0, [pc, #244]	; (73cc <bt_l2cap_recv+0x110>)
    72d8:	f7fa ffdc 	bl	2294 <printk>
	net_buf_unref(buf);
    72dc:	4628      	mov	r0, r5
}
    72de:	b005      	add	sp, #20
    72e0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	net_buf_unref(buf);
    72e4:	f012 b800 	b.w	192e8 <net_buf_unref>
	cid = sys_le16_to_cpu(hdr->cid);
    72e8:	460e      	mov	r6, r1
	net_buf_pull(buf, sizeof(*hdr));
    72ea:	2104      	movs	r1, #4
	cid = sys_le16_to_cpu(hdr->cid);
    72ec:	f856 3f08 	ldr.w	r3, [r6, #8]!
    72f0:	885f      	ldrh	r7, [r3, #2]
	net_buf_pull(buf, sizeof(*hdr));
    72f2:	4630      	mov	r0, r6
    72f4:	f012 f8a6 	bl	19444 <net_buf_simple_pull>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    72f8:	4620      	mov	r0, r4
    72fa:	4639      	mov	r1, r7
    72fc:	f7ff fe3f 	bl	6f7e <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    7300:	4604      	mov	r4, r0
    7302:	b950      	cbnz	r0, 731a <bt_l2cap_recv+0x5e>
		BT_WARN("Ignoring data for unknown CID 0x%04x", cid);
    7304:	4b2d      	ldr	r3, [pc, #180]	; (73bc <bt_l2cap_recv+0x100>)
    7306:	9302      	str	r3, [sp, #8]
    7308:	e88d 0088 	stmia.w	sp, {r3, r7}
    730c:	4a30      	ldr	r2, [pc, #192]	; (73d0 <bt_l2cap_recv+0x114>)
    730e:	4b2d      	ldr	r3, [pc, #180]	; (73c4 <bt_l2cap_recv+0x108>)
    7310:	492d      	ldr	r1, [pc, #180]	; (73c8 <bt_l2cap_recv+0x10c>)
    7312:	4830      	ldr	r0, [pc, #192]	; (73d4 <bt_l2cap_recv+0x118>)
    7314:	f7fa ffbe 	bl	2294 <printk>
    7318:	e7e0      	b.n	72dc <bt_l2cap_recv+0x20>
	if (L2CAP_LE_CID_IS_DYN(ch->rx.cid)) {
    731a:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
    731e:	3b40      	subs	r3, #64	; 0x40
    7320:	b29b      	uxth	r3, r3
    7322:	2b3f      	cmp	r3, #63	; 0x3f
    7324:	d844      	bhi.n	73b0 <bt_l2cap_recv+0xf4>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    7326:	2100      	movs	r1, #0
    7328:	3048      	adds	r0, #72	; 0x48
    732a:	f01a fc9f 	bl	21c6c <_impl_k_sem_take>
	if (k_sem_take(&chan->rx.credits, K_NO_WAIT)) {
    732e:	b160      	cbz	r0, 734a <bt_l2cap_recv+0x8e>
		BT_ERR("No credits to receive packet");
    7330:	4b22      	ldr	r3, [pc, #136]	; (73bc <bt_l2cap_recv+0x100>)
    7332:	9301      	str	r3, [sp, #4]
    7334:	9300      	str	r3, [sp, #0]
    7336:	4a22      	ldr	r2, [pc, #136]	; (73c0 <bt_l2cap_recv+0x104>)
    7338:	4b27      	ldr	r3, [pc, #156]	; (73d8 <bt_l2cap_recv+0x11c>)
    733a:	4923      	ldr	r1, [pc, #140]	; (73c8 <bt_l2cap_recv+0x10c>)
    733c:	4827      	ldr	r0, [pc, #156]	; (73dc <bt_l2cap_recv+0x120>)
			BT_ERR("Unable to allocate buffer for SDU");
    733e:	f7fa ffa9 	bl	2294 <printk>
			bt_l2cap_chan_disconnect(&chan->chan);
    7342:	4620      	mov	r0, r4
    7344:	f7ff ff0e 	bl	7164 <bt_l2cap_chan_disconnect>
    7348:	e7c8      	b.n	72dc <bt_l2cap_recv+0x20>
	if (chan->_sdu) {
    734a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    734e:	b123      	cbz	r3, 735a <bt_l2cap_recv+0x9e>
		l2cap_chan_le_recv_sdu(chan, buf);
    7350:	4629      	mov	r1, r5
    7352:	4620      	mov	r0, r4
    7354:	f7ff ff36 	bl	71c4 <l2cap_chan_le_recv_sdu>
    7358:	e7c0      	b.n	72dc <bt_l2cap_recv+0x20>
	sdu_len = net_buf_pull_le16(buf);
    735a:	4630      	mov	r0, r6
    735c:	f012 f882 	bl	19464 <net_buf_simple_pull_le16>
	if (sdu_len > chan->rx.mtu) {
    7360:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    7364:	4283      	cmp	r3, r0
	sdu_len = net_buf_pull_le16(buf);
    7366:	4606      	mov	r6, r0
	if (sdu_len > chan->rx.mtu) {
    7368:	d207      	bcs.n	737a <bt_l2cap_recv+0xbe>
		BT_ERR("Invalid SDU length");
    736a:	4b14      	ldr	r3, [pc, #80]	; (73bc <bt_l2cap_recv+0x100>)
    736c:	9301      	str	r3, [sp, #4]
    736e:	9300      	str	r3, [sp, #0]
    7370:	4a13      	ldr	r2, [pc, #76]	; (73c0 <bt_l2cap_recv+0x104>)
    7372:	4b19      	ldr	r3, [pc, #100]	; (73d8 <bt_l2cap_recv+0x11c>)
    7374:	4914      	ldr	r1, [pc, #80]	; (73c8 <bt_l2cap_recv+0x10c>)
    7376:	481a      	ldr	r0, [pc, #104]	; (73e0 <bt_l2cap_recv+0x124>)
    7378:	e7e1      	b.n	733e <bt_l2cap_recv+0x82>
	if (chan->chan.ops->alloc_buf) {
    737a:	6863      	ldr	r3, [r4, #4]
    737c:	68da      	ldr	r2, [r3, #12]
    737e:	b17a      	cbz	r2, 73a0 <bt_l2cap_recv+0xe4>
		chan->_sdu = chan->chan.ops->alloc_buf(&chan->chan);
    7380:	4620      	mov	r0, r4
    7382:	4790      	blx	r2
    7384:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
		if (!chan->_sdu) {
    7388:	b938      	cbnz	r0, 739a <bt_l2cap_recv+0xde>
			BT_ERR("Unable to allocate buffer for SDU");
    738a:	4b0c      	ldr	r3, [pc, #48]	; (73bc <bt_l2cap_recv+0x100>)
    738c:	9301      	str	r3, [sp, #4]
    738e:	9300      	str	r3, [sp, #0]
    7390:	4a0b      	ldr	r2, [pc, #44]	; (73c0 <bt_l2cap_recv+0x104>)
    7392:	4b11      	ldr	r3, [pc, #68]	; (73d8 <bt_l2cap_recv+0x11c>)
    7394:	490c      	ldr	r1, [pc, #48]	; (73c8 <bt_l2cap_recv+0x10c>)
    7396:	4813      	ldr	r0, [pc, #76]	; (73e4 <bt_l2cap_recv+0x128>)
    7398:	e7d1      	b.n	733e <bt_l2cap_recv+0x82>
		chan->_sdu_len = sdu_len;
    739a:	f8a4 6098 	strh.w	r6, [r4, #152]	; 0x98
    739e:	e7d7      	b.n	7350 <bt_l2cap_recv+0x94>
	chan->chan.ops->recv(&chan->chan, buf);
    73a0:	4620      	mov	r0, r4
    73a2:	691b      	ldr	r3, [r3, #16]
    73a4:	4629      	mov	r1, r5
    73a6:	4798      	blx	r3
	l2cap_chan_update_credits(chan, buf);
    73a8:	4620      	mov	r0, r4
    73aa:	f7ff fda9 	bl	6f00 <l2cap_chan_update_credits.isra.9>
    73ae:	e795      	b.n	72dc <bt_l2cap_recv+0x20>
	chan->ops->recv(chan, buf);
    73b0:	6843      	ldr	r3, [r0, #4]
    73b2:	4629      	mov	r1, r5
    73b4:	691b      	ldr	r3, [r3, #16]
    73b6:	4798      	blx	r3
    73b8:	e790      	b.n	72dc <bt_l2cap_recv+0x20>
    73ba:	bf00      	nop
    73bc:	00023dae 	.word	0x00023dae
    73c0:	00022d76 	.word	0x00022d76
    73c4:	0002457e 	.word	0x0002457e
    73c8:	000272d8 	.word	0x000272d8
    73cc:	000245d6 	.word	0x000245d6
    73d0:	00024006 	.word	0x00024006
    73d4:	00024603 	.word	0x00024603
    73d8:	0002456b 	.word	0x0002456b
    73dc:	00024638 	.word	0x00024638
    73e0:	00024665 	.word	0x00024665
    73e4:	00024688 	.word	0x00024688

000073e8 <l2cap_recv>:
{
    73e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (buf->len < sizeof(*hdr)) {
    73ec:	898b      	ldrh	r3, [r1, #12]
    73ee:	2b03      	cmp	r3, #3
{
    73f0:	b089      	sub	sp, #36	; 0x24
    73f2:	4606      	mov	r6, r0
    73f4:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    73f6:	d809      	bhi.n	740c <l2cap_recv+0x24>
		BT_ERR("Too small L2CAP signaling PDU");
    73f8:	4ba4      	ldr	r3, [pc, #656]	; (768c <l2cap_recv+0x2a4>)
    73fa:	9301      	str	r3, [sp, #4]
    73fc:	9300      	str	r3, [sp, #0]
    73fe:	4aa4      	ldr	r2, [pc, #656]	; (7690 <l2cap_recv+0x2a8>)
    7400:	4ba4      	ldr	r3, [pc, #656]	; (7694 <l2cap_recv+0x2ac>)
    7402:	49a5      	ldr	r1, [pc, #660]	; (7698 <l2cap_recv+0x2b0>)
    7404:	48a5      	ldr	r0, [pc, #660]	; (769c <l2cap_recv+0x2b4>)
		BT_ERR("Invalid ident value in L2CAP PDU");
    7406:	f7fa ff45 	bl	2294 <printk>
		return;
    740a:	e013      	b.n	7434 <l2cap_recv+0x4c>
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
    740c:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    740e:	2104      	movs	r1, #4
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
    7410:	f850 7f08 	ldr.w	r7, [r0, #8]!
	len = sys_le16_to_cpu(hdr->len);
    7414:	887c      	ldrh	r4, [r7, #2]
	net_buf_pull(buf, sizeof(*hdr));
    7416:	f012 f815 	bl	19444 <net_buf_simple_pull>
	if (buf->len != len) {
    741a:	89ab      	ldrh	r3, [r5, #12]
    741c:	429c      	cmp	r4, r3
    741e:	d00c      	beq.n	743a <l2cap_recv+0x52>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
    7420:	4a9a      	ldr	r2, [pc, #616]	; (768c <l2cap_recv+0x2a4>)
    7422:	9203      	str	r2, [sp, #12]
    7424:	e88d 001c 	stmia.w	sp, {r2, r3, r4}
    7428:	499b      	ldr	r1, [pc, #620]	; (7698 <l2cap_recv+0x2b0>)
    742a:	4b9a      	ldr	r3, [pc, #616]	; (7694 <l2cap_recv+0x2ac>)
    742c:	4a98      	ldr	r2, [pc, #608]	; (7690 <l2cap_recv+0x2a8>)
    742e:	489c      	ldr	r0, [pc, #624]	; (76a0 <l2cap_recv+0x2b8>)
    7430:	f7fa ff30 	bl	2294 <printk>
}
    7434:	b009      	add	sp, #36	; 0x24
    7436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!hdr->ident) {
    743a:	787c      	ldrb	r4, [r7, #1]
    743c:	b93c      	cbnz	r4, 744e <l2cap_recv+0x66>
		BT_ERR("Invalid ident value in L2CAP PDU");
    743e:	4b93      	ldr	r3, [pc, #588]	; (768c <l2cap_recv+0x2a4>)
    7440:	9301      	str	r3, [sp, #4]
    7442:	9300      	str	r3, [sp, #0]
    7444:	4a92      	ldr	r2, [pc, #584]	; (7690 <l2cap_recv+0x2a8>)
    7446:	4b93      	ldr	r3, [pc, #588]	; (7694 <l2cap_recv+0x2ac>)
    7448:	4993      	ldr	r1, [pc, #588]	; (7698 <l2cap_recv+0x2b0>)
    744a:	4896      	ldr	r0, [pc, #600]	; (76a4 <l2cap_recv+0x2bc>)
    744c:	e7db      	b.n	7406 <l2cap_recv+0x1e>
	switch (hdr->code) {
    744e:	783a      	ldrb	r2, [r7, #0]
    7450:	1e51      	subs	r1, r2, #1
    7452:	2915      	cmp	r1, #21
    7454:	f200 825c 	bhi.w	7910 <l2cap_recv+0x528>
    7458:	e8df f011 	tbh	[pc, r1, lsl #1]
    745c:	025a0254 	.word	0x025a0254
    7460:	025a025a 	.word	0x025a025a
    7464:	01b5025a 	.word	0x01b5025a
    7468:	025a01ef 	.word	0x025a01ef
    746c:	025a025a 	.word	0x025a025a
    7470:	025a025a 	.word	0x025a025a
    7474:	025a025a 	.word	0x025a025a
    7478:	025a025a 	.word	0x025a025a
    747c:	0020025a 	.word	0x0020025a
    7480:	00720016 	.word	0x00720016
    7484:	02010136 	.word	0x02010136
	if (buf->len < sizeof(*rsp)) {
    7488:	2b01      	cmp	r3, #1
    748a:	d8d3      	bhi.n	7434 <l2cap_recv+0x4c>
		BT_ERR("Too small LE conn param rsp");
    748c:	4b7f      	ldr	r3, [pc, #508]	; (768c <l2cap_recv+0x2a4>)
    748e:	9301      	str	r3, [sp, #4]
    7490:	9300      	str	r3, [sp, #0]
    7492:	4a7f      	ldr	r2, [pc, #508]	; (7690 <l2cap_recv+0x2a8>)
    7494:	4b84      	ldr	r3, [pc, #528]	; (76a8 <l2cap_recv+0x2c0>)
    7496:	4980      	ldr	r1, [pc, #512]	; (7698 <l2cap_recv+0x2b0>)
    7498:	4884      	ldr	r0, [pc, #528]	; (76ac <l2cap_recv+0x2c4>)
    749a:	e7b4      	b.n	7406 <l2cap_recv+0x1e>
	if (buf->len < sizeof(*req)) {
    749c:	2b07      	cmp	r3, #7
    749e:	d807      	bhi.n	74b0 <l2cap_recv+0xc8>
		BT_ERR("Too small LE conn update param req");
    74a0:	4b7a      	ldr	r3, [pc, #488]	; (768c <l2cap_recv+0x2a4>)
    74a2:	9301      	str	r3, [sp, #4]
    74a4:	9300      	str	r3, [sp, #0]
    74a6:	4a7a      	ldr	r2, [pc, #488]	; (7690 <l2cap_recv+0x2a8>)
    74a8:	4b81      	ldr	r3, [pc, #516]	; (76b0 <l2cap_recv+0x2c8>)
    74aa:	497b      	ldr	r1, [pc, #492]	; (7698 <l2cap_recv+0x2b0>)
    74ac:	4881      	ldr	r0, [pc, #516]	; (76b4 <l2cap_recv+0x2cc>)
    74ae:	e7aa      	b.n	7406 <l2cap_recv+0x1e>
    74b0:	6836      	ldr	r6, [r6, #0]
	if (conn->role != BT_HCI_ROLE_MASTER) {
    74b2:	78f7      	ldrb	r7, [r6, #3]
    74b4:	b13f      	cbz	r7, 74c6 <l2cap_recv+0xde>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
    74b6:	2300      	movs	r3, #0
    74b8:	9300      	str	r3, [sp, #0]
    74ba:	461a      	mov	r2, r3
    74bc:	4621      	mov	r1, r4
    74be:	4630      	mov	r0, r6
		l2cap_send_reject(chan->conn, hdr->ident,
    74c0:	f7ff fc3a 	bl	6d38 <l2cap_send_reject>
		break;
    74c4:	e7b6      	b.n	7434 <l2cap_recv+0x4c>
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
    74c6:	68ab      	ldr	r3, [r5, #8]
	param.interval_min = sys_le16_to_cpu(req->min_interval);
    74c8:	7859      	ldrb	r1, [r3, #1]
    74ca:	781a      	ldrb	r2, [r3, #0]
    74cc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    74d0:	f8ad 2018 	strh.w	r2, [sp, #24]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
    74d4:	78d9      	ldrb	r1, [r3, #3]
    74d6:	789a      	ldrb	r2, [r3, #2]
    74d8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    74dc:	f8ad 201a 	strh.w	r2, [sp, #26]
	param.latency = sys_le16_to_cpu(req->latency);
    74e0:	7959      	ldrb	r1, [r3, #5]
    74e2:	791a      	ldrb	r2, [r3, #4]
    74e4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    74e8:	f8ad 201c 	strh.w	r2, [sp, #28]
	param.timeout = sys_le16_to_cpu(req->timeout);
    74ec:	799a      	ldrb	r2, [r3, #6]
    74ee:	79db      	ldrb	r3, [r3, #7]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    74f0:	4621      	mov	r1, r4
	param.timeout = sys_le16_to_cpu(req->timeout);
    74f2:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    74f6:	2013      	movs	r0, #19
    74f8:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
    74fa:	f8ad 301e 	strh.w	r3, [sp, #30]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    74fe:	f7ff fb2a 	bl	6b56 <l2cap_create_le_sig_pdu.isra.6>
	accepted = le_param_req(conn, &param);
    7502:	a906      	add	r1, sp, #24
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    7504:	4605      	mov	r5, r0
	accepted = le_param_req(conn, &param);
    7506:	4630      	mov	r0, r6
    7508:	f7fe fb98 	bl	5c3c <le_param_req>
	rsp = net_buf_add(buf, sizeof(*rsp));
    750c:	2102      	movs	r1, #2
	accepted = le_param_req(conn, &param);
    750e:	4604      	mov	r4, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    7510:	f105 0008 	add.w	r0, r5, #8
    7514:	f011 ff46 	bl	193a4 <net_buf_simple_add>
	if (accepted) {
    7518:	b174      	cbz	r4, 7538 <l2cap_recv+0x150>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
    751a:	7007      	strb	r7, [r0, #0]
    751c:	7047      	strb	r7, [r0, #1]
    751e:	2300      	movs	r3, #0
    7520:	462a      	mov	r2, r5
    7522:	2105      	movs	r1, #5
    7524:	4630      	mov	r0, r6
    7526:	f7ff fb9f 	bl	6c68 <bt_l2cap_send_cb>
	if (accepted) {
    752a:	2c00      	cmp	r4, #0
    752c:	d082      	beq.n	7434 <l2cap_recv+0x4c>
		bt_conn_le_conn_update(conn, &param);
    752e:	a906      	add	r1, sp, #24
    7530:	4630      	mov	r0, r6
    7532:	f7ff f8a4 	bl	667e <bt_conn_le_conn_update>
    7536:	e77d      	b.n	7434 <l2cap_recv+0x4c>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_REJECTED);
    7538:	2301      	movs	r3, #1
    753a:	7003      	strb	r3, [r0, #0]
    753c:	7044      	strb	r4, [r0, #1]
    753e:	e7ee      	b.n	751e <l2cap_recv+0x136>
	if (buf->len < sizeof(*req)) {
    7540:	2b09      	cmp	r3, #9
    7542:	d807      	bhi.n	7554 <l2cap_recv+0x16c>
		BT_ERR("Too small LE conn req packet size");
    7544:	4b51      	ldr	r3, [pc, #324]	; (768c <l2cap_recv+0x2a4>)
    7546:	9301      	str	r3, [sp, #4]
    7548:	9300      	str	r3, [sp, #0]
    754a:	4b5b      	ldr	r3, [pc, #364]	; (76b8 <l2cap_recv+0x2d0>)
		BT_ERR("Too small LE conn req packet size");
    754c:	4a50      	ldr	r2, [pc, #320]	; (7690 <l2cap_recv+0x2a8>)
    754e:	4952      	ldr	r1, [pc, #328]	; (7698 <l2cap_recv+0x2b0>)
    7550:	485a      	ldr	r0, [pc, #360]	; (76bc <l2cap_recv+0x2d4>)
    7552:	e758      	b.n	7406 <l2cap_recv+0x1e>
	struct bt_l2cap_le_conn_req *req = (void *)buf->data;
    7554:	68aa      	ldr	r2, [r5, #8]
	mtu = sys_le16_to_cpu(req->mtu);
    7556:	f8b2 9004 	ldrh.w	r9, [r2, #4]
	if (mtu < L2CAP_LE_MIN_MTU || mps < L2CAP_LE_MIN_MTU) {
    755a:	f1b9 0f16 	cmp.w	r9, #22
    755e:	d904      	bls.n	756a <l2cap_recv+0x182>
	mps = sys_le16_to_cpu(req->mps);
    7560:	f8b2 a006 	ldrh.w	sl, [r2, #6]
	if (mtu < L2CAP_LE_MIN_MTU || mps < L2CAP_LE_MIN_MTU) {
    7564:	f1ba 0f16 	cmp.w	sl, #22
    7568:	d807      	bhi.n	757a <l2cap_recv+0x192>
		BT_ERR("Invalid LE-Conn Req params");
    756a:	4b48      	ldr	r3, [pc, #288]	; (768c <l2cap_recv+0x2a4>)
    756c:	9301      	str	r3, [sp, #4]
    756e:	9300      	str	r3, [sp, #0]
    7570:	4a47      	ldr	r2, [pc, #284]	; (7690 <l2cap_recv+0x2a8>)
    7572:	4b51      	ldr	r3, [pc, #324]	; (76b8 <l2cap_recv+0x2d0>)
    7574:	4948      	ldr	r1, [pc, #288]	; (7698 <l2cap_recv+0x2b0>)
    7576:	4852      	ldr	r0, [pc, #328]	; (76c0 <l2cap_recv+0x2d8>)
    7578:	e745      	b.n	7406 <l2cap_recv+0x1e>
	credits = sys_le16_to_cpu(req->credits);
    757a:	8913      	ldrh	r3, [r2, #8]
	scid = sys_le16_to_cpu(req->scid);
    757c:	f8b2 b002 	ldrh.w	fp, [r2, #2]
    7580:	6835      	ldr	r5, [r6, #0]
	psm = sys_le16_to_cpu(req->psm);
    7582:	8816      	ldrh	r6, [r2, #0]
	credits = sys_le16_to_cpu(req->credits);
    7584:	9305      	str	r3, [sp, #20]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CONN_RSP, ident,
    7586:	220a      	movs	r2, #10
    7588:	4621      	mov	r1, r4
    758a:	2015      	movs	r0, #21
	credits = sys_le16_to_cpu(req->credits);
    758c:	461f      	mov	r7, r3
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CONN_RSP, ident,
    758e:	f7ff fae2 	bl	6b56 <l2cap_create_le_sig_pdu.isra.6>
	rsp = net_buf_add(buf, sizeof(*rsp));
    7592:	210a      	movs	r1, #10
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CONN_RSP, ident,
    7594:	9004      	str	r0, [sp, #16]
	rsp = net_buf_add(buf, sizeof(*rsp));
    7596:	3008      	adds	r0, #8
    7598:	f011 ff04 	bl	193a4 <net_buf_simple_add>
	memset(rsp, 0, sizeof(*rsp));
    759c:	220a      	movs	r2, #10
    759e:	2100      	movs	r1, #0
	rsp = net_buf_add(buf, sizeof(*rsp));
    75a0:	4604      	mov	r4, r0
	memset(rsp, 0, sizeof(*rsp));
    75a2:	f7f9 f922 	bl	7ea <memset>
	server = l2cap_server_lookup_psm(psm);
    75a6:	4630      	mov	r0, r6
    75a8:	f7ff fa2a 	bl	6a00 <l2cap_server_lookup_psm>
	if (!server) {
    75ac:	4606      	mov	r6, r0
    75ae:	b940      	cbnz	r0, 75c2 <l2cap_recv+0x1da>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_PSM_NOT_SUPP);
    75b0:	2302      	movs	r3, #2
    75b2:	9a04      	ldr	r2, [sp, #16]
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_NO_RESOURCES);
    75b4:	8123      	strh	r3, [r4, #8]
    75b6:	2105      	movs	r1, #5
    75b8:	2300      	movs	r3, #0
    75ba:	4628      	mov	r0, r5
    75bc:	f7ff fb54 	bl	6c68 <bt_l2cap_send_cb>
    75c0:	e738      	b.n	7434 <l2cap_recv+0x4c>
	if (conn->sec_level < server->sec_level) {
    75c2:	7a29      	ldrb	r1, [r5, #8]
    75c4:	7882      	ldrb	r2, [r0, #2]
    75c6:	4291      	cmp	r1, r2
    75c8:	d201      	bcs.n	75ce <l2cap_recv+0x1e6>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_AUTHENTICATION);
    75ca:	2305      	movs	r3, #5
    75cc:	e7f1      	b.n	75b2 <l2cap_recv+0x1ca>
	if (!L2CAP_LE_CID_IS_DYN(scid)) {
    75ce:	f1ab 0240 	sub.w	r2, fp, #64	; 0x40
    75d2:	2a3f      	cmp	r2, #63	; 0x3f
    75d4:	d901      	bls.n	75da <l2cap_recv+0x1f2>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_INVALID_SCID);
    75d6:	2309      	movs	r3, #9
    75d8:	e7eb      	b.n	75b2 <l2cap_recv+0x1ca>
	chan = bt_l2cap_le_lookup_tx_cid(conn, scid);
    75da:	4659      	mov	r1, fp
    75dc:	4628      	mov	r0, r5
    75de:	f7ff fcbe 	bl	6f5e <bt_l2cap_le_lookup_tx_cid>
    75e2:	9006      	str	r0, [sp, #24]
	if (chan) {
    75e4:	b108      	cbz	r0, 75ea <l2cap_recv+0x202>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_SCID_IN_USE);
    75e6:	230a      	movs	r3, #10
    75e8:	e7e3      	b.n	75b2 <l2cap_recv+0x1ca>
	if (server->accept(conn, &chan) < 0) {
    75ea:	6873      	ldr	r3, [r6, #4]
    75ec:	a906      	add	r1, sp, #24
    75ee:	4628      	mov	r0, r5
    75f0:	4798      	blx	r3
    75f2:	2800      	cmp	r0, #0
    75f4:	da01      	bge.n	75fa <l2cap_recv+0x212>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_NO_RESOURCES);
    75f6:	2304      	movs	r3, #4
    75f8:	e7db      	b.n	75b2 <l2cap_recv+0x1ca>
	chan->required_sec_level = server->sec_level;
    75fa:	9906      	ldr	r1, [sp, #24]
    75fc:	78b3      	ldrb	r3, [r6, #2]
    75fe:	f881 303d 	strb.w	r3, [r1, #61]	; 0x3d
	if (l2cap_chan_add(conn, chan, l2cap_chan_destroy)) {
    7602:	4a30      	ldr	r2, [pc, #192]	; (76c4 <l2cap_recv+0x2dc>)
    7604:	4628      	mov	r0, r5
    7606:	f7ff fccb 	bl	6fa0 <l2cap_chan_add>
    760a:	2800      	cmp	r0, #0
    760c:	d0f3      	beq.n	75f6 <l2cap_recv+0x20e>
		struct bt_l2cap_le_chan *ch = BT_L2CAP_LE_CHAN(chan);
    760e:	f8dd 8018 	ldr.w	r8, [sp, #24]
		l2cap_chan_tx_init(ch);
    7612:	4640      	mov	r0, r8
    7614:	f7ff fa68 	bl	6ae8 <l2cap_chan_tx_init>
		ch->tx.init_credits = credits;
    7618:	f8bd 3014 	ldrh.w	r3, [sp, #20]
		ch->tx.mtu = mtu;
    761c:	f8a8 9062 	strh.w	r9, [r8, #98]	; 0x62
		ch->tx.cid = scid;
    7620:	f8a8 b060 	strh.w	fp, [r8, #96]	; 0x60
		ch->tx.mps = mps;
    7624:	f8a8 a064 	strh.w	sl, [r8, #100]	; 0x64
		ch->tx.init_credits = credits;
    7628:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
		k_sem_give(&chan->tx.credits);
    762c:	f108 0968 	add.w	r9, r8, #104	; 0x68
	while (credits--) {
    7630:	b9ff      	cbnz	r7, 7672 <l2cap_recv+0x28a>
		l2cap_chan_rx_init(ch);
    7632:	4640      	mov	r0, r8
    7634:	f7ff fa6c 	bl	6b10 <l2cap_chan_rx_init>
		l2cap_chan_rx_give_credits(ch, ch->rx.init_credits);
    7638:	f8b8 7046 	ldrh.w	r7, [r8, #70]	; 0x46
		k_sem_give(&chan->rx.credits);
    763c:	f108 0948 	add.w	r9, r8, #72	; 0x48
	while (credits--) {
    7640:	b9ef      	cbnz	r7, 767e <l2cap_recv+0x296>
		chan->psm = server->psm;
    7642:	9806      	ldr	r0, [sp, #24]
    7644:	8832      	ldrh	r2, [r6, #0]
    7646:	8742      	strh	r2, [r0, #58]	; 0x3a
	chan->state = state;
    7648:	2203      	movs	r2, #3
    764a:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
		if (chan->ops->connected) {
    764e:	6842      	ldr	r2, [r0, #4]
    7650:	6812      	ldr	r2, [r2, #0]
    7652:	b102      	cbz	r2, 7656 <l2cap_recv+0x26e>
			chan->ops->connected(chan);
    7654:	4790      	blx	r2
		rsp->dcid = sys_cpu_to_le16(ch->rx.cid);
    7656:	f8b8 2040 	ldrh.w	r2, [r8, #64]	; 0x40
    765a:	8022      	strh	r2, [r4, #0]
		rsp->mps = sys_cpu_to_le16(ch->rx.mps);
    765c:	f8b8 2044 	ldrh.w	r2, [r8, #68]	; 0x44
		rsp->credits = sys_cpu_to_le16(ch->rx.init_credits);
    7660:	f8b8 3046 	ldrh.w	r3, [r8, #70]	; 0x46
		rsp->mps = sys_cpu_to_le16(ch->rx.mps);
    7664:	80a2      	strh	r2, [r4, #4]
		rsp->mtu = sys_cpu_to_le16(ch->rx.mtu);
    7666:	f8b8 2042 	ldrh.w	r2, [r8, #66]	; 0x42
    766a:	8062      	strh	r2, [r4, #2]
		rsp->credits = sys_cpu_to_le16(ch->rx.init_credits);
    766c:	80e3      	strh	r3, [r4, #6]
		rsp->result = BT_L2CAP_SUCCESS;
    766e:	2300      	movs	r3, #0
    7670:	e79f      	b.n	75b2 <l2cap_recv+0x1ca>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    7672:	4648      	mov	r0, r9
    7674:	3f01      	subs	r7, #1
    7676:	f01a fa99 	bl	21bac <_impl_k_sem_give>
    767a:	b2bf      	uxth	r7, r7
    767c:	e7d8      	b.n	7630 <l2cap_recv+0x248>
    767e:	4648      	mov	r0, r9
    7680:	3f01      	subs	r7, #1
    7682:	f01a fa93 	bl	21bac <_impl_k_sem_give>
    7686:	b2bf      	uxth	r7, r7
    7688:	e7da      	b.n	7640 <l2cap_recv+0x258>
    768a:	bf00      	nop
    768c:	00023dae 	.word	0x00023dae
    7690:	00022d76 	.word	0x00022d76
    7694:	00024549 	.word	0x00024549
    7698:	000272d8 	.word	0x000272d8
    769c:	00024766 	.word	0x00024766
    76a0:	00024794 	.word	0x00024794
    76a4:	000247c5 	.word	0x000247c5
    76a8:	000244dd 	.word	0x000244dd
    76ac:	000247f6 	.word	0x000247f6
    76b0:	000244ef 	.word	0x000244ef
    76b4:	00024822 	.word	0x00024822
    76b8:	00024508 	.word	0x00024508
    76bc:	00024855 	.word	0x00024855
    76c0:	00024887 	.word	0x00024887
    76c4:	00006ab5 	.word	0x00006ab5
	if (buf->len < sizeof(*rsp)) {
    76c8:	2b09      	cmp	r3, #9
    76ca:	d807      	bhi.n	76dc <l2cap_recv+0x2f4>
		BT_ERR("Too small LE conn rsp packet size");
    76cc:	4b98      	ldr	r3, [pc, #608]	; (7930 <l2cap_recv+0x548>)
    76ce:	9301      	str	r3, [sp, #4]
    76d0:	9300      	str	r3, [sp, #0]
    76d2:	4a98      	ldr	r2, [pc, #608]	; (7934 <l2cap_recv+0x54c>)
    76d4:	4b98      	ldr	r3, [pc, #608]	; (7938 <l2cap_recv+0x550>)
    76d6:	4999      	ldr	r1, [pc, #612]	; (793c <l2cap_recv+0x554>)
    76d8:	4899      	ldr	r0, [pc, #612]	; (7940 <l2cap_recv+0x558>)
    76da:	e694      	b.n	7406 <l2cap_recv+0x1e>
	struct bt_l2cap_le_conn_rsp *rsp = (void *)buf->data;
    76dc:	68ab      	ldr	r3, [r5, #8]
    76de:	f8d6 8000 	ldr.w	r8, [r6]
	result = sys_le16_to_cpu(rsp->result);
    76e2:	891f      	ldrh	r7, [r3, #8]
	dcid = sys_le16_to_cpu(rsp->dcid);
    76e4:	f8b3 b000 	ldrh.w	fp, [r3]
	mtu = sys_le16_to_cpu(rsp->mtu);
    76e8:	f8b3 a002 	ldrh.w	sl, [r3, #2]
	mps = sys_le16_to_cpu(rsp->mps);
    76ec:	f8b3 9004 	ldrh.w	r9, [r3, #4]
	credits = sys_le16_to_cpu(rsp->credits);
    76f0:	88de      	ldrh	r6, [r3, #6]
	if (result == BT_L2CAP_SUCCESS ||
    76f2:	f027 0308 	bic.w	r3, r7, #8
    76f6:	b2a1      	uxth	r1, r4
    76f8:	b10b      	cbz	r3, 76fe <l2cap_recv+0x316>
    76fa:	2f05      	cmp	r7, #5
    76fc:	d110      	bne.n	7720 <l2cap_recv+0x338>
		chan = l2cap_lookup_ident(conn, ident);
    76fe:	2200      	movs	r2, #0
		chan = l2cap_remove_ident(conn, ident);
    7700:	4640      	mov	r0, r8
    7702:	f7ff f961 	bl	69c8 <__l2cap_lookup_ident>
    7706:	4605      	mov	r5, r0
	if (!chan) {
    7708:	b960      	cbnz	r0, 7724 <l2cap_recv+0x33c>
		BT_ERR("Cannot find channel for ident %u", ident);
    770a:	4b89      	ldr	r3, [pc, #548]	; (7930 <l2cap_recv+0x548>)
    770c:	9302      	str	r3, [sp, #8]
    770e:	e88d 0018 	stmia.w	sp, {r3, r4}
    7712:	4a88      	ldr	r2, [pc, #544]	; (7934 <l2cap_recv+0x54c>)
    7714:	4b88      	ldr	r3, [pc, #544]	; (7938 <l2cap_recv+0x550>)
    7716:	4989      	ldr	r1, [pc, #548]	; (793c <l2cap_recv+0x554>)
    7718:	488a      	ldr	r0, [pc, #552]	; (7944 <l2cap_recv+0x55c>)
    771a:	f7fa fdbb 	bl	2294 <printk>
    771e:	e689      	b.n	7434 <l2cap_recv+0x4c>
		chan = l2cap_remove_ident(conn, ident);
    7720:	2201      	movs	r2, #1
    7722:	e7ed      	b.n	7700 <l2cap_recv+0x318>
	k_delayed_work_cancel(&chan->chan.rtx_work);
    7724:	3010      	adds	r0, #16
    7726:	f01a fd8b 	bl	22240 <k_delayed_work_cancel>
	chan->chan.ident = 0;
    772a:	2300      	movs	r3, #0
	switch (result) {
    772c:	2f05      	cmp	r7, #5
	chan->chan.ident = 0;
    772e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
	switch (result) {
    7732:	d03c      	beq.n	77ae <l2cap_recv+0x3c6>
    7734:	2f08      	cmp	r7, #8
    7736:	d023      	beq.n	7780 <l2cap_recv+0x398>
    7738:	bbaf      	cbnz	r7, 77a6 <l2cap_recv+0x3be>
	chan->state = state;
    773a:	2303      	movs	r3, #3
    773c:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
		if (chan->chan.ops->connected) {
    7740:	686b      	ldr	r3, [r5, #4]
		chan->tx.cid = dcid;
    7742:	f8a5 b060 	strh.w	fp, [r5, #96]	; 0x60
		if (chan->chan.ops->connected) {
    7746:	681b      	ldr	r3, [r3, #0]
		chan->tx.mtu = mtu;
    7748:	f8a5 a062 	strh.w	sl, [r5, #98]	; 0x62
		chan->tx.mps = mps;
    774c:	f8a5 9064 	strh.w	r9, [r5, #100]	; 0x64
		if (chan->chan.ops->connected) {
    7750:	b10b      	cbz	r3, 7756 <l2cap_recv+0x36e>
			chan->chan.ops->connected(&chan->chan);
    7752:	4628      	mov	r0, r5
    7754:	4798      	blx	r3
		k_sem_give(&chan->tx.credits);
    7756:	f105 0468 	add.w	r4, r5, #104	; 0x68
	while (credits--) {
    775a:	b95e      	cbnz	r6, 7774 <l2cap_recv+0x38c>
		l2cap_chan_rx_give_credits(chan, chan->rx.init_credits);
    775c:	f8b5 4046 	ldrh.w	r4, [r5, #70]	; 0x46
		k_sem_give(&chan->rx.credits);
    7760:	3548      	adds	r5, #72	; 0x48
	while (credits--) {
    7762:	2c00      	cmp	r4, #0
    7764:	f43f ae66 	beq.w	7434 <l2cap_recv+0x4c>
    7768:	4628      	mov	r0, r5
    776a:	3c01      	subs	r4, #1
    776c:	f01a fa1e 	bl	21bac <_impl_k_sem_give>
    7770:	b2a4      	uxth	r4, r4
    7772:	e7f6      	b.n	7762 <l2cap_recv+0x37a>
    7774:	4620      	mov	r0, r4
    7776:	3e01      	subs	r6, #1
    7778:	f01a fa18 	bl	21bac <_impl_k_sem_give>
    777c:	b2b6      	uxth	r6, r6
    777e:	e7ec      	b.n	775a <l2cap_recv+0x372>
		if (chan->chan.required_sec_level >= BT_SECURITY_MEDIUM) {
    7780:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
    7784:	2b01      	cmp	r3, #1
    7786:	d80a      	bhi.n	779e <l2cap_recv+0x3b6>
			chan->chan.required_sec_level = BT_SECURITY_MEDIUM;
    7788:	2302      	movs	r3, #2
			chan->chan.required_sec_level = BT_SECURITY_FIPS;
    778a:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
	return bt_conn_security(chan->chan.conn, chan->chan.required_sec_level);
    778e:	f895 103d 	ldrb.w	r1, [r5, #61]	; 0x3d
    7792:	6828      	ldr	r0, [r5, #0]
    7794:	f7fe fad6 	bl	5d44 <bt_conn_security>
		if (l2cap_change_security(chan, result) == 0) {
    7798:	2800      	cmp	r0, #0
    779a:	f43f ae4b 	beq.w	7434 <l2cap_recv+0x4c>
		bt_l2cap_chan_remove(conn, &chan->chan);
    779e:	4629      	mov	r1, r5
    77a0:	4640      	mov	r0, r8
    77a2:	f7ff f9f3 	bl	6b8c <bt_l2cap_chan_remove>
		bt_l2cap_chan_del(&chan->chan);
    77a6:	4628      	mov	r0, r5
	bt_l2cap_chan_del(&chan->chan);
    77a8:	f7ff fa09 	bl	6bbe <bt_l2cap_chan_del>
    77ac:	e642      	b.n	7434 <l2cap_recv+0x4c>
		if (chan->chan.required_sec_level < BT_SECURITY_MEDIUM) {
    77ae:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
    77b2:	2b01      	cmp	r3, #1
    77b4:	d9e8      	bls.n	7788 <l2cap_recv+0x3a0>
		} else if (chan->chan.required_sec_level < BT_SECURITY_HIGH) {
    77b6:	2b02      	cmp	r3, #2
    77b8:	d101      	bne.n	77be <l2cap_recv+0x3d6>
			chan->chan.required_sec_level = BT_SECURITY_HIGH;
    77ba:	2303      	movs	r3, #3
    77bc:	e7e5      	b.n	778a <l2cap_recv+0x3a2>
		} else if (chan->chan.required_sec_level < BT_SECURITY_FIPS) {
    77be:	2b03      	cmp	r3, #3
    77c0:	d1ed      	bne.n	779e <l2cap_recv+0x3b6>
			chan->chan.required_sec_level = BT_SECURITY_FIPS;
    77c2:	2304      	movs	r3, #4
    77c4:	e7e1      	b.n	778a <l2cap_recv+0x3a2>
	if (buf->len < sizeof(*req)) {
    77c6:	2b03      	cmp	r3, #3
    77c8:	d804      	bhi.n	77d4 <l2cap_recv+0x3ec>
		BT_ERR("Too small LE conn req packet size");
    77ca:	4b59      	ldr	r3, [pc, #356]	; (7930 <l2cap_recv+0x548>)
    77cc:	9301      	str	r3, [sp, #4]
    77ce:	9300      	str	r3, [sp, #0]
    77d0:	4b5d      	ldr	r3, [pc, #372]	; (7948 <l2cap_recv+0x560>)
    77d2:	e6bb      	b.n	754c <l2cap_recv+0x164>
    77d4:	6837      	ldr	r7, [r6, #0]
	struct bt_l2cap_disconn_req *req = (void *)buf->data;
    77d6:	68ad      	ldr	r5, [r5, #8]
	chan = l2cap_remove_tx_cid(conn, scid);
    77d8:	4638      	mov	r0, r7
    77da:	8869      	ldrh	r1, [r5, #2]
    77dc:	f7ff f924 	bl	6a28 <l2cap_remove_tx_cid>
	if (!chan) {
    77e0:	4606      	mov	r6, r0
    77e2:	b990      	cbnz	r0, 780a <l2cap_recv+0x422>
		data.scid = req->scid;
    77e4:	78ea      	ldrb	r2, [r5, #3]
    77e6:	78ab      	ldrb	r3, [r5, #2]
    77e8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    77ec:	f8ad 3018 	strh.w	r3, [sp, #24]
		data.dcid = req->dcid;
    77f0:	786a      	ldrb	r2, [r5, #1]
    77f2:	782b      	ldrb	r3, [r5, #0]
    77f4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    77f8:	f8ad 301a 	strh.w	r3, [sp, #26]
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_INVALID_CID, &data,
    77fc:	2304      	movs	r3, #4
    77fe:	9300      	str	r3, [sp, #0]
    7800:	2202      	movs	r2, #2
    7802:	ab06      	add	r3, sp, #24
    7804:	4621      	mov	r1, r4
    7806:	4638      	mov	r0, r7
    7808:	e65a      	b.n	74c0 <l2cap_recv+0xd8>
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_DISCONN_RSP, ident,
    780a:	2204      	movs	r2, #4
    780c:	4621      	mov	r1, r4
    780e:	2007      	movs	r0, #7
    7810:	f7ff f9a1 	bl	6b56 <l2cap_create_le_sig_pdu.isra.6>
	rsp = net_buf_add(buf, sizeof(*rsp));
    7814:	2104      	movs	r1, #4
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_DISCONN_RSP, ident,
    7816:	4604      	mov	r4, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    7818:	3008      	adds	r0, #8
    781a:	f011 fdc3 	bl	193a4 <net_buf_simple_add>
	rsp->dcid = sys_cpu_to_le16(chan->rx.cid);
    781e:	f8b6 3040 	ldrh.w	r3, [r6, #64]	; 0x40
    7822:	8003      	strh	r3, [r0, #0]
	rsp->scid = sys_cpu_to_le16(chan->tx.cid);
    7824:	f8b6 3060 	ldrh.w	r3, [r6, #96]	; 0x60
    7828:	8043      	strh	r3, [r0, #2]
	bt_l2cap_chan_del(&chan->chan);
    782a:	4630      	mov	r0, r6
    782c:	f7ff f9c7 	bl	6bbe <bt_l2cap_chan_del>
    7830:	2300      	movs	r3, #0
    7832:	4622      	mov	r2, r4
    7834:	2105      	movs	r1, #5
    7836:	4638      	mov	r0, r7
    7838:	e6c0      	b.n	75bc <l2cap_recv+0x1d4>
	if (buf->len < sizeof(*rsp)) {
    783a:	2b03      	cmp	r3, #3
    783c:	d807      	bhi.n	784e <l2cap_recv+0x466>
		BT_ERR("Too small LE disconn rsp packet size");
    783e:	4b3c      	ldr	r3, [pc, #240]	; (7930 <l2cap_recv+0x548>)
    7840:	9301      	str	r3, [sp, #4]
    7842:	9300      	str	r3, [sp, #0]
    7844:	4a3b      	ldr	r2, [pc, #236]	; (7934 <l2cap_recv+0x54c>)
    7846:	4b41      	ldr	r3, [pc, #260]	; (794c <l2cap_recv+0x564>)
    7848:	493c      	ldr	r1, [pc, #240]	; (793c <l2cap_recv+0x554>)
    784a:	4841      	ldr	r0, [pc, #260]	; (7950 <l2cap_recv+0x568>)
    784c:	e5db      	b.n	7406 <l2cap_recv+0x1e>
	dcid = sys_le16_to_cpu(rsp->dcid);
    784e:	68ab      	ldr	r3, [r5, #8]
	chan = l2cap_remove_tx_cid(conn, dcid);
    7850:	6830      	ldr	r0, [r6, #0]
    7852:	8819      	ldrh	r1, [r3, #0]
    7854:	f7ff f8e8 	bl	6a28 <l2cap_remove_tx_cid>
	if (!chan) {
    7858:	2800      	cmp	r0, #0
    785a:	d1a5      	bne.n	77a8 <l2cap_recv+0x3c0>
    785c:	e5ea      	b.n	7434 <l2cap_recv+0x4c>
	if (buf->len < sizeof(*ev)) {
    785e:	2b03      	cmp	r3, #3
    7860:	d807      	bhi.n	7872 <l2cap_recv+0x48a>
		BT_ERR("Too small LE Credits packet size");
    7862:	4b33      	ldr	r3, [pc, #204]	; (7930 <l2cap_recv+0x548>)
    7864:	9301      	str	r3, [sp, #4]
    7866:	9300      	str	r3, [sp, #0]
    7868:	4a32      	ldr	r2, [pc, #200]	; (7934 <l2cap_recv+0x54c>)
    786a:	4b3a      	ldr	r3, [pc, #232]	; (7954 <l2cap_recv+0x56c>)
    786c:	4933      	ldr	r1, [pc, #204]	; (793c <l2cap_recv+0x554>)
    786e:	483a      	ldr	r0, [pc, #232]	; (7958 <l2cap_recv+0x570>)
    7870:	e5c9      	b.n	7406 <l2cap_recv+0x1e>
	struct bt_l2cap_le_credits *ev = (void *)buf->data;
    7872:	68ab      	ldr	r3, [r5, #8]
	chan = bt_l2cap_le_lookup_tx_cid(conn, cid);
    7874:	6830      	ldr	r0, [r6, #0]
    7876:	8819      	ldrh	r1, [r3, #0]
	credits = sys_le16_to_cpu(ev->credits);
    7878:	885d      	ldrh	r5, [r3, #2]
	chan = bt_l2cap_le_lookup_tx_cid(conn, cid);
    787a:	f7ff fb70 	bl	6f5e <bt_l2cap_le_lookup_tx_cid>
	if (!chan) {
    787e:	4604      	mov	r4, r0
    7880:	b938      	cbnz	r0, 7892 <l2cap_recv+0x4aa>
		BT_ERR("Unable to find channel of LE Credits packet");
    7882:	4b2b      	ldr	r3, [pc, #172]	; (7930 <l2cap_recv+0x548>)
    7884:	9301      	str	r3, [sp, #4]
    7886:	9300      	str	r3, [sp, #0]
    7888:	4a2a      	ldr	r2, [pc, #168]	; (7934 <l2cap_recv+0x54c>)
    788a:	4b32      	ldr	r3, [pc, #200]	; (7954 <l2cap_recv+0x56c>)
    788c:	492b      	ldr	r1, [pc, #172]	; (793c <l2cap_recv+0x554>)
    788e:	4833      	ldr	r0, [pc, #204]	; (795c <l2cap_recv+0x574>)
    7890:	e5b9      	b.n	7406 <l2cap_recv+0x1e>
	if (k_sem_count_get(&ch->tx.credits) + credits > UINT16_MAX) {
    7892:	6f03      	ldr	r3, [r0, #112]	; 0x70
    7894:	442b      	add	r3, r5
    7896:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    789a:	d21b      	bcs.n	78d4 <l2cap_recv+0x4ec>
		k_sem_give(&chan->tx.credits);
    789c:	f100 0668 	add.w	r6, r0, #104	; 0x68
	while (credits--) {
    78a0:	bb2d      	cbnz	r5, 78ee <l2cap_recv+0x506>
	return net_buf_get(&ch->tx_queue, K_NO_WAIT);
    78a2:	f104 0680 	add.w	r6, r4, #128	; 0x80
	if (ch->tx_buf) {
    78a6:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
    78aa:	b331      	cbz	r1, 78fa <l2cap_recv+0x512>
		ch->tx_buf = NULL;
    78ac:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
	while ((buf = l2cap_chan_le_get_tx_buf(ch))) {
    78b0:	9106      	str	r1, [sp, #24]
    78b2:	2900      	cmp	r1, #0
    78b4:	f43f adbe 	beq.w	7434 <l2cap_recv+0x4c>
		sent = l2cap_chan_le_send_sdu(ch, &buf, sent);
    78b8:	694a      	ldr	r2, [r1, #20]
    78ba:	4620      	mov	r0, r4
    78bc:	a906      	add	r1, sp, #24
    78be:	f7ff fad5 	bl	6e6c <l2cap_chan_le_send_sdu>
		if (sent < 0) {
    78c2:	2800      	cmp	r0, #0
    78c4:	daef      	bge.n	78a6 <l2cap_recv+0x4be>
			if (sent == -EAGAIN) {
    78c6:	300b      	adds	r0, #11
    78c8:	f47f adb4 	bne.w	7434 <l2cap_recv+0x4c>
				ch->tx_buf = buf;
    78cc:	9b06      	ldr	r3, [sp, #24]
    78ce:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    78d2:	e5af      	b.n	7434 <l2cap_recv+0x4c>
		BT_ERR("Credits overflow");
    78d4:	4b16      	ldr	r3, [pc, #88]	; (7930 <l2cap_recv+0x548>)
    78d6:	9301      	str	r3, [sp, #4]
    78d8:	9300      	str	r3, [sp, #0]
    78da:	4a16      	ldr	r2, [pc, #88]	; (7934 <l2cap_recv+0x54c>)
    78dc:	4b1d      	ldr	r3, [pc, #116]	; (7954 <l2cap_recv+0x56c>)
    78de:	4917      	ldr	r1, [pc, #92]	; (793c <l2cap_recv+0x554>)
    78e0:	481f      	ldr	r0, [pc, #124]	; (7960 <l2cap_recv+0x578>)
    78e2:	f7fa fcd7 	bl	2294 <printk>
		bt_l2cap_chan_disconnect(chan);
    78e6:	4620      	mov	r0, r4
    78e8:	f7ff fc3c 	bl	7164 <bt_l2cap_chan_disconnect>
    78ec:	e5a2      	b.n	7434 <l2cap_recv+0x4c>
    78ee:	4630      	mov	r0, r6
    78f0:	3d01      	subs	r5, #1
    78f2:	f01a f95b 	bl	21bac <_impl_k_sem_give>
    78f6:	b2ad      	uxth	r5, r5
    78f8:	e7d2      	b.n	78a0 <l2cap_recv+0x4b8>
	return net_buf_get(&ch->tx_queue, K_NO_WAIT);
    78fa:	4630      	mov	r0, r6
    78fc:	f011 fcca 	bl	19294 <net_buf_get>
    7900:	4601      	mov	r1, r0
    7902:	e7d5      	b.n	78b0 <l2cap_recv+0x4c8>
	chan = l2cap_remove_ident(conn, ident);
    7904:	2201      	movs	r2, #1
    7906:	4621      	mov	r1, r4
    7908:	6830      	ldr	r0, [r6, #0]
    790a:	f7ff f85d 	bl	69c8 <__l2cap_lookup_ident>
    790e:	e7a3      	b.n	7858 <l2cap_recv+0x470>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    7910:	4b07      	ldr	r3, [pc, #28]	; (7930 <l2cap_recv+0x548>)
    7912:	9302      	str	r3, [sp, #8]
	switch (hdr->code) {
    7914:	9201      	str	r2, [sp, #4]
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    7916:	9300      	str	r3, [sp, #0]
    7918:	4a12      	ldr	r2, [pc, #72]	; (7964 <l2cap_recv+0x57c>)
    791a:	4b13      	ldr	r3, [pc, #76]	; (7968 <l2cap_recv+0x580>)
    791c:	4907      	ldr	r1, [pc, #28]	; (793c <l2cap_recv+0x554>)
    791e:	4813      	ldr	r0, [pc, #76]	; (796c <l2cap_recv+0x584>)
    7920:	f7fa fcb8 	bl	2294 <printk>
		l2cap_send_reject(chan->conn, hdr->ident,
    7924:	2300      	movs	r3, #0
    7926:	7879      	ldrb	r1, [r7, #1]
    7928:	9300      	str	r3, [sp, #0]
    792a:	461a      	mov	r2, r3
    792c:	6830      	ldr	r0, [r6, #0]
    792e:	e5c7      	b.n	74c0 <l2cap_recv+0xd8>
    7930:	00023dae 	.word	0x00023dae
    7934:	00022d76 	.word	0x00022d76
    7938:	00024523 	.word	0x00024523
    793c:	000272d8 	.word	0x000272d8
    7940:	000248b2 	.word	0x000248b2
    7944:	000248e4 	.word	0x000248e4
    7948:	00024514 	.word	0x00024514
    794c:	0002452f 	.word	0x0002452f
    7950:	00024915 	.word	0x00024915
    7954:	0002453e 	.word	0x0002453e
    7958:	0002494a 	.word	0x0002494a
    795c:	0002497b 	.word	0x0002497b
    7960:	000249b7 	.word	0x000249b7
    7964:	00024006 	.word	0x00024006
    7968:	00024549 	.word	0x00024549
    796c:	000249d8 	.word	0x000249d8

00007970 <bt_l2cap_chan_send>:

int bt_l2cap_chan_send(struct bt_l2cap_chan *chan, struct net_buf *buf)
{
    7970:	b530      	push	{r4, r5, lr}
    7972:	b087      	sub	sp, #28
    7974:	4605      	mov	r5, r0
    7976:	9105      	str	r1, [sp, #20]
	int err;

	if (!buf) {
    7978:	b311      	cbz	r1, 79c0 <bt_l2cap_chan_send+0x50>
		return -EINVAL;
	}

	BT_DBG("chan %p buf %p len %zu", chan, buf, net_buf_frags_len(buf));

	if (!chan->conn || chan->conn->state != BT_CONN_CONNECTED) {
    797a:	6803      	ldr	r3, [r0, #0]
    797c:	b31b      	cbz	r3, 79c6 <bt_l2cap_chan_send+0x56>
    797e:	7b1b      	ldrb	r3, [r3, #12]
    7980:	2b03      	cmp	r3, #3
    7982:	d120      	bne.n	79c6 <bt_l2cap_chan_send+0x56>
	if (IS_ENABLED(CONFIG_BT_BREDR) &&
	    chan->conn->type == BT_CONN_TYPE_BR) {
		return bt_l2cap_br_chan_send(chan, buf);
	}

	err = l2cap_chan_le_send_sdu(BT_L2CAP_LE_CHAN(chan), &buf, 0);
    7984:	2200      	movs	r2, #0
    7986:	a905      	add	r1, sp, #20
    7988:	f7ff fa70 	bl	6e6c <l2cap_chan_le_send_sdu>
	if (err < 0) {
    798c:	1e04      	subs	r4, r0, #0
    798e:	da09      	bge.n	79a4 <bt_l2cap_chan_send+0x34>
		if (err == -EAGAIN) {
    7990:	f114 0f0b 	cmn.w	r4, #11
    7994:	d109      	bne.n	79aa <bt_l2cap_chan_send+0x3a>
			/* Queue buffer to be sent later */
			net_buf_put(&(BT_L2CAP_LE_CHAN(chan))->tx_queue, buf);
    7996:	9905      	ldr	r1, [sp, #20]
    7998:	f105 0080 	add.w	r0, r5, #128	; 0x80
    799c:	f011 fc97 	bl	192ce <net_buf_put>
			return *((int *)net_buf_user_data(buf));
    79a0:	9b05      	ldr	r3, [sp, #20]
    79a2:	695c      	ldr	r4, [r3, #20]
		}
		BT_ERR("failed to send message %d", err);
	}

	return err;
}
    79a4:	4620      	mov	r0, r4
    79a6:	b007      	add	sp, #28
    79a8:	bd30      	pop	{r4, r5, pc}
		BT_ERR("failed to send message %d", err);
    79aa:	4b08      	ldr	r3, [pc, #32]	; (79cc <bt_l2cap_chan_send+0x5c>)
    79ac:	9302      	str	r3, [sp, #8]
    79ae:	e88d 0018 	stmia.w	sp, {r3, r4}
    79b2:	4a07      	ldr	r2, [pc, #28]	; (79d0 <bt_l2cap_chan_send+0x60>)
    79b4:	4b07      	ldr	r3, [pc, #28]	; (79d4 <bt_l2cap_chan_send+0x64>)
    79b6:	4908      	ldr	r1, [pc, #32]	; (79d8 <bt_l2cap_chan_send+0x68>)
    79b8:	4808      	ldr	r0, [pc, #32]	; (79dc <bt_l2cap_chan_send+0x6c>)
    79ba:	f7fa fc6b 	bl	2294 <printk>
    79be:	e7f1      	b.n	79a4 <bt_l2cap_chan_send+0x34>
		return -EINVAL;
    79c0:	f06f 0415 	mvn.w	r4, #21
    79c4:	e7ee      	b.n	79a4 <bt_l2cap_chan_send+0x34>
		return -ENOTCONN;
    79c6:	f06f 0438 	mvn.w	r4, #56	; 0x38
    79ca:	e7eb      	b.n	79a4 <bt_l2cap_chan_send+0x34>
    79cc:	00023dae 	.word	0x00023dae
    79d0:	00022d76 	.word	0x00022d76
    79d4:	00024599 	.word	0x00024599
    79d8:	000272d8 	.word	0x000272d8
    79dc:	000245ac 	.word	0x000245ac

000079e0 <att_exec_write_req>:

	BT_DBG("flags 0x%02x", req->flags);

	return att_exec_write_rsp(att, req->flags);
#endif /* CONFIG_BT_ATT_PREPARE_COUNT */
}
    79e0:	2006      	movs	r0, #6
    79e2:	4770      	bx	lr

000079e4 <att_op_get_type>:
		ATT_COMMAND,
		att_signed_write_cmd },
};

static att_type_t att_op_get_type(u8_t op)
{
    79e4:	b510      	push	{r4, lr}
	const struct att_handler *handler;
	int i;

	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
		if (op == handlers[i].op) {
    79e6:	4a0a      	ldr	r2, [pc, #40]	; (7a10 <att_op_get_type+0x2c>)
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    79e8:	2300      	movs	r3, #0
		if (op == handlers[i].op) {
    79ea:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
    79ee:	4284      	cmp	r4, r0
    79f0:	ea4f 01c3 	mov.w	r1, r3, lsl #3
    79f4:	d102      	bne.n	79fc <att_op_get_type+0x18>
			return handlers[i].type;
    79f6:	440a      	add	r2, r1
    79f8:	7890      	ldrb	r0, [r2, #2]
    79fa:	bd10      	pop	{r4, pc}
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    79fc:	3301      	adds	r3, #1
    79fe:	2b1b      	cmp	r3, #27
    7a00:	d1f3      	bne.n	79ea <att_op_get_type+0x6>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
    7a02:	f010 0f40 	tst.w	r0, #64	; 0x40
    7a06:	bf14      	ite	ne
    7a08:	2000      	movne	r0, #0
    7a0a:	2006      	moveq	r0, #6
}
    7a0c:	bd10      	pop	{r4, pc}
    7a0e:	bf00      	nop
    7a10:	00024d14 	.word	0x00024d14

00007a14 <att_req_destroy>:
{
    7a14:	b510      	push	{r4, lr}
    7a16:	4604      	mov	r4, r0
	if (req->buf) {
    7a18:	6900      	ldr	r0, [r0, #16]
    7a1a:	b108      	cbz	r0, 7a20 <att_req_destroy+0xc>
		net_buf_unref(req->buf);
    7a1c:	f011 fc64 	bl	192e8 <net_buf_unref>
	if (req->destroy) {
    7a20:	68a3      	ldr	r3, [r4, #8]
    7a22:	b10b      	cbz	r3, 7a28 <att_req_destroy+0x14>
		req->destroy(req);
    7a24:	4620      	mov	r0, r4
    7a26:	4798      	blx	r3
	memset(req, 0, sizeof(*req));
    7a28:	4620      	mov	r0, r4
    7a2a:	2218      	movs	r2, #24
    7a2c:	2100      	movs	r1, #0
}
    7a2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	memset(req, 0, sizeof(*req));
    7a32:	f7f8 beda 	b.w	7ea <memset>

00007a36 <att_notify>:
{
    7a36:	b508      	push	{r3, lr}
	handle = net_buf_pull_le16(buf);
    7a38:	f101 0008 	add.w	r0, r1, #8
    7a3c:	f011 fd12 	bl	19464 <net_buf_simple_pull_le16>
}
    7a40:	2000      	movs	r0, #0
    7a42:	bd08      	pop	{r3, pc}

00007a44 <read_group_cb>:
{
    7a44:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = data->att;
    7a48:	680d      	ldr	r5, [r1, #0]
{
    7a4a:	4606      	mov	r6, r0
    7a4c:	460c      	mov	r4, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    7a4e:	f04f 0800 	mov.w	r8, #0
    7a52:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    7a56:	a902      	add	r1, sp, #8
    7a58:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    7a5a:	682f      	ldr	r7, [r5, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    7a5c:	f88d 8008 	strb.w	r8, [sp, #8]
    7a60:	f8ad 300a 	strh.w	r3, [sp, #10]
    7a64:	f7fb fd26 	bl	34b4 <bt_uuid_cmp>
    7a68:	b198      	cbz	r0, 7a92 <read_group_cb+0x4e>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    7a6a:	f642 0301 	movw	r3, #10241	; 0x2801
    7a6e:	a903      	add	r1, sp, #12
    7a70:	6830      	ldr	r0, [r6, #0]
    7a72:	f88d 800c 	strb.w	r8, [sp, #12]
    7a76:	f8ad 300e 	strh.w	r3, [sp, #14]
    7a7a:	f7fb fd1b 	bl	34b4 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    7a7e:	b140      	cbz	r0, 7a92 <read_group_cb+0x4e>
		if (data->group && attr->handle > data->group->end_handle) {
    7a80:	6923      	ldr	r3, [r4, #16]
    7a82:	b123      	cbz	r3, 7a8e <read_group_cb+0x4a>
    7a84:	8a32      	ldrh	r2, [r6, #16]
    7a86:	8859      	ldrh	r1, [r3, #2]
    7a88:	4291      	cmp	r1, r2
    7a8a:	d200      	bcs.n	7a8e <read_group_cb+0x4a>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    7a8c:	805a      	strh	r2, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    7a8e:	2001      	movs	r0, #1
    7a90:	e012      	b.n	7ab8 <read_group_cb+0x74>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    7a92:	6861      	ldr	r1, [r4, #4]
    7a94:	6830      	ldr	r0, [r6, #0]
    7a96:	f7fb fd0d 	bl	34b4 <bt_uuid_cmp>
    7a9a:	b110      	cbz	r0, 7aa2 <read_group_cb+0x5e>
		data->group = NULL;
    7a9c:	2300      	movs	r3, #0
    7a9e:	6123      	str	r3, [r4, #16]
    7aa0:	e7f5      	b.n	7a8e <read_group_cb+0x4a>
	if (data->rsp->len &&
    7aa2:	68e3      	ldr	r3, [r4, #12]
    7aa4:	68a0      	ldr	r0, [r4, #8]
    7aa6:	781a      	ldrb	r2, [r3, #0]
    7aa8:	b14a      	cbz	r2, 7abe <read_group_cb+0x7a>
	    att->chan.tx.mtu - data->buf->len < data->rsp->len) {
    7aaa:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
    7aae:	8981      	ldrh	r1, [r0, #12]
    7ab0:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    7ab2:	4293      	cmp	r3, r2
    7ab4:	da03      	bge.n	7abe <read_group_cb+0x7a>
		return BT_GATT_ITER_STOP;
    7ab6:	2000      	movs	r0, #0
}
    7ab8:	b004      	add	sp, #16
    7aba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    7abe:	2104      	movs	r1, #4
    7ac0:	3008      	adds	r0, #8
    7ac2:	f011 fc6f 	bl	193a4 <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    7ac6:	8a33      	ldrh	r3, [r6, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    7ac8:	68a1      	ldr	r1, [r4, #8]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    7aca:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    7acc:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    7ace:	8043      	strh	r3, [r0, #2]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    7ad0:	898a      	ldrh	r2, [r1, #12]
    7ad2:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
    7ad6:	6889      	ldr	r1, [r1, #8]
    7ad8:	f8d6 8004 	ldr.w	r8, [r6, #4]
    7adc:	1a9b      	subs	r3, r3, r2
    7ade:	2500      	movs	r5, #0
    7ae0:	440a      	add	r2, r1
    7ae2:	9500      	str	r5, [sp, #0]
    7ae4:	4631      	mov	r1, r6
    7ae6:	b29b      	uxth	r3, r3
    7ae8:	4638      	mov	r0, r7
    7aea:	47c0      	blx	r8
	if (read < 0) {
    7aec:	1e01      	subs	r1, r0, #0
    7aee:	dbe2      	blt.n	7ab6 <read_group_cb+0x72>
	if (!data->rsp->len) {
    7af0:	68e0      	ldr	r0, [r4, #12]
    7af2:	7802      	ldrb	r2, [r0, #0]
    7af4:	1d0b      	adds	r3, r1, #4
    7af6:	b92a      	cbnz	r2, 7b04 <read_group_cb+0xc0>
		data->rsp->len = read + sizeof(*data->group);
    7af8:	7003      	strb	r3, [r0, #0]
	net_buf_add(data->buf, read);
    7afa:	68a0      	ldr	r0, [r4, #8]
    7afc:	3008      	adds	r0, #8
    7afe:	f011 fc51 	bl	193a4 <net_buf_simple_add>
    7b02:	e7c4      	b.n	7a8e <read_group_cb+0x4a>
	} else if (data->rsp->len != read + sizeof(*data->group)) {
    7b04:	429a      	cmp	r2, r3
    7b06:	d0f8      	beq.n	7afa <read_group_cb+0xb6>
		data->buf->len -= sizeof(*data->group);
    7b08:	68a2      	ldr	r2, [r4, #8]
    7b0a:	8993      	ldrh	r3, [r2, #12]
    7b0c:	3b04      	subs	r3, #4
    7b0e:	8193      	strh	r3, [r2, #12]
    7b10:	e7d1      	b.n	7ab6 <read_group_cb+0x72>

00007b12 <find_info_cb>:
	if (!data->rsp) {
    7b12:	688b      	ldr	r3, [r1, #8]
{
    7b14:	b570      	push	{r4, r5, r6, lr}
    7b16:	4605      	mov	r5, r0
    7b18:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    7b1a:	680e      	ldr	r6, [r1, #0]
	if (!data->rsp) {
    7b1c:	b963      	cbnz	r3, 7b38 <find_info_cb+0x26>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    7b1e:	6848      	ldr	r0, [r1, #4]
    7b20:	2101      	movs	r1, #1
    7b22:	3008      	adds	r0, #8
    7b24:	f011 fc3e 	bl	193a4 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    7b28:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    7b2a:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    7b2c:	781b      	ldrb	r3, [r3, #0]
    7b2e:	2b00      	cmp	r3, #0
    7b30:	bf0c      	ite	eq
    7b32:	2301      	moveq	r3, #1
    7b34:	2302      	movne	r3, #2
    7b36:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
    7b38:	68a3      	ldr	r3, [r4, #8]
    7b3a:	781b      	ldrb	r3, [r3, #0]
    7b3c:	2b01      	cmp	r3, #1
    7b3e:	d003      	beq.n	7b48 <find_info_cb+0x36>
    7b40:	2b02      	cmp	r3, #2
    7b42:	d01a      	beq.n	7b7a <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
    7b44:	2000      	movs	r0, #0
}
    7b46:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_16) {
    7b48:	682b      	ldr	r3, [r5, #0]
    7b4a:	781b      	ldrb	r3, [r3, #0]
    7b4c:	2b00      	cmp	r3, #0
    7b4e:	d1f9      	bne.n	7b44 <find_info_cb+0x32>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
    7b50:	6860      	ldr	r0, [r4, #4]
    7b52:	2104      	movs	r1, #4
    7b54:	3008      	adds	r0, #8
    7b56:	f011 fc25 	bl	193a4 <net_buf_simple_add>
    7b5a:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(attr->handle);
    7b5c:	8a2b      	ldrh	r3, [r5, #16]
    7b5e:	8003      	strh	r3, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
    7b60:	682b      	ldr	r3, [r5, #0]
    7b62:	885b      	ldrh	r3, [r3, #2]
    7b64:	8043      	strh	r3, [r0, #2]
		if (att->chan.tx.mtu - data->buf->len >
    7b66:	6863      	ldr	r3, [r4, #4]
    7b68:	f8b6 0062 	ldrh.w	r0, [r6, #98]	; 0x62
    7b6c:	899b      	ldrh	r3, [r3, #12]
    7b6e:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
    7b70:	2804      	cmp	r0, #4
    7b72:	bf94      	ite	ls
    7b74:	2000      	movls	r0, #0
    7b76:	2001      	movhi	r0, #1
    7b78:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
    7b7a:	682b      	ldr	r3, [r5, #0]
    7b7c:	781b      	ldrb	r3, [r3, #0]
    7b7e:	2b02      	cmp	r3, #2
    7b80:	d1e0      	bne.n	7b44 <find_info_cb+0x32>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
    7b82:	6860      	ldr	r0, [r4, #4]
    7b84:	2112      	movs	r1, #18
    7b86:	3008      	adds	r0, #8
    7b88:	f011 fc0c 	bl	193a4 <net_buf_simple_add>
    7b8c:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    7b8e:	6829      	ldr	r1, [r5, #0]
		data->info128->handle = sys_cpu_to_le16(attr->handle);
    7b90:	8a2b      	ldrh	r3, [r5, #16]
    7b92:	f820 3b02 	strh.w	r3, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    7b96:	2210      	movs	r2, #16
    7b98:	3101      	adds	r1, #1
    7b9a:	f7f8 fdfa 	bl	792 <memcpy>
		if (att->chan.tx.mtu - data->buf->len >
    7b9e:	6863      	ldr	r3, [r4, #4]
    7ba0:	f8b6 0062 	ldrh.w	r0, [r6, #98]	; 0x62
    7ba4:	899b      	ldrh	r3, [r3, #12]
    7ba6:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
    7ba8:	2812      	cmp	r0, #18
    7baa:	e7e2      	b.n	7b72 <find_info_cb+0x60>

00007bac <find_type_cb>:
{
    7bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_att *att = data->att;
    7bb0:	680e      	ldr	r6, [r1, #0]
{
    7bb2:	b088      	sub	sp, #32
    7bb4:	4605      	mov	r5, r0
    7bb6:	460c      	mov	r4, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    7bb8:	2700      	movs	r7, #0
    7bba:	f642 0301 	movw	r3, #10241	; 0x2801
    7bbe:	a902      	add	r1, sp, #8
    7bc0:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    7bc2:	f8d6 8000 	ldr.w	r8, [r6]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    7bc6:	f88d 7008 	strb.w	r7, [sp, #8]
    7bca:	f8ad 300a 	strh.w	r3, [sp, #10]
    7bce:	f7fb fc71 	bl	34b4 <bt_uuid_cmp>
    7bd2:	b928      	cbnz	r0, 7be0 <find_type_cb+0x34>
		data->group = NULL;
    7bd4:	2300      	movs	r3, #0
    7bd6:	60a3      	str	r3, [r4, #8]
		return BT_GATT_ITER_CONTINUE;
    7bd8:	2001      	movs	r0, #1
}
    7bda:	b008      	add	sp, #32
    7bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    7be0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    7be4:	a903      	add	r1, sp, #12
    7be6:	6828      	ldr	r0, [r5, #0]
    7be8:	f88d 700c 	strb.w	r7, [sp, #12]
    7bec:	f8ad 300e 	strh.w	r3, [sp, #14]
    7bf0:	f7fb fc60 	bl	34b4 <bt_uuid_cmp>
    7bf4:	b140      	cbz	r0, 7c08 <find_type_cb+0x5c>
		if (data->group && attr->handle > data->group->end_handle) {
    7bf6:	68a3      	ldr	r3, [r4, #8]
    7bf8:	2b00      	cmp	r3, #0
    7bfa:	d0ed      	beq.n	7bd8 <find_type_cb+0x2c>
    7bfc:	8a2a      	ldrh	r2, [r5, #16]
    7bfe:	8859      	ldrh	r1, [r3, #2]
    7c00:	4291      	cmp	r1, r2
    7c02:	d2e9      	bcs.n	7bd8 <find_type_cb+0x2c>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    7c04:	805a      	strh	r2, [r3, #2]
    7c06:	e7e7      	b.n	7bd8 <find_type_cb+0x2c>
	if (att->chan.tx.mtu - data->buf->len < sizeof(*data->group)) {
    7c08:	6862      	ldr	r2, [r4, #4]
    7c0a:	f8b6 3062 	ldrh.w	r3, [r6, #98]	; 0x62
    7c0e:	8992      	ldrh	r2, [r2, #12]
    7c10:	1a9b      	subs	r3, r3, r2
    7c12:	2b03      	cmp	r3, #3
    7c14:	d9e1      	bls.n	7bda <find_type_cb+0x2e>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    7c16:	2310      	movs	r3, #16
    7c18:	9000      	str	r0, [sp, #0]
    7c1a:	eb0d 0203 	add.w	r2, sp, r3
    7c1e:	686e      	ldr	r6, [r5, #4]
    7c20:	4629      	mov	r1, r5
    7c22:	4640      	mov	r0, r8
    7c24:	47b0      	blx	r6
	if (read < 0) {
    7c26:	1e02      	subs	r2, r0, #0
    7c28:	dbd4      	blt.n	7bd4 <find_type_cb+0x28>
	if (read != data->value_len || memcmp(data->value, uuid, read)) {
    7c2a:	7c23      	ldrb	r3, [r4, #16]
    7c2c:	429a      	cmp	r2, r3
    7c2e:	d1d1      	bne.n	7bd4 <find_type_cb+0x28>
    7c30:	a904      	add	r1, sp, #16
    7c32:	68e0      	ldr	r0, [r4, #12]
    7c34:	f7f8 fd80 	bl	738 <memcmp>
    7c38:	2800      	cmp	r0, #0
    7c3a:	d1cb      	bne.n	7bd4 <find_type_cb+0x28>
	data->err = 0x00;
    7c3c:	7460      	strb	r0, [r4, #17]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    7c3e:	6860      	ldr	r0, [r4, #4]
    7c40:	2104      	movs	r1, #4
    7c42:	3008      	adds	r0, #8
    7c44:	f011 fbae 	bl	193a4 <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    7c48:	8a2b      	ldrh	r3, [r5, #16]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    7c4a:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    7c4c:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    7c4e:	8043      	strh	r3, [r0, #2]
    7c50:	e7c2      	b.n	7bd8 <find_type_cb+0x2c>
	...

00007c54 <bt_att_connected>:
	bt_gatt_disconnected(ch->chan.conn);
	ch->chan.conn = NULL;
}

static void bt_att_connected(struct bt_l2cap_chan *chan)
{
    7c54:	b510      	push	{r4, lr}

#if CONFIG_BT_ATT_PREPARE_COUNT > 0
	k_fifo_init(&att->prep_queue);
#endif

	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    7c56:	2317      	movs	r3, #23
{
    7c58:	4604      	mov	r4, r0
	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    7c5a:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
	ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    7c5e:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42

	k_delayed_work_init(&att->timeout_work, att_timeout);
    7c62:	4907      	ldr	r1, [pc, #28]	; (7c80 <bt_att_connected+0x2c>)
    7c64:	30ac      	adds	r0, #172	; 0xac
    7c66:	f01a facd 	bl	22204 <k_delayed_work_init>
	list->head = NULL;
    7c6a:	2300      	movs	r3, #0
    7c6c:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
	list->tail = NULL;
    7c70:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	sys_slist_init(&att->reqs);

	bt_gatt_connected(ch->chan.conn);
    7c74:	6820      	ldr	r0, [r4, #0]
}
    7c76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(ch->chan.conn);
    7c7a:	f001 bcd3 	b.w	9624 <bt_gatt_connected>
    7c7e:	bf00      	nop
    7c80:	000081d5 	.word	0x000081d5

00007c84 <check_perm>:
{
    7c84:	b510      	push	{r4, lr}
	if ((mask & BT_GATT_PERM_READ) &&
    7c86:	f012 0f01 	tst.w	r2, #1
    7c8a:	7c8b      	ldrb	r3, [r1, #18]
    7c8c:	d004      	beq.n	7c98 <check_perm+0x14>
    7c8e:	f013 0f15 	tst.w	r3, #21
    7c92:	d018      	beq.n	7cc6 <check_perm+0x42>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
    7c94:	684c      	ldr	r4, [r1, #4]
    7c96:	b1b4      	cbz	r4, 7cc6 <check_perm+0x42>
	if ((mask & BT_GATT_PERM_WRITE) &&
    7c98:	0794      	lsls	r4, r2, #30
    7c9a:	d504      	bpl.n	7ca6 <check_perm+0x22>
    7c9c:	f013 0f2a 	tst.w	r3, #42	; 0x2a
    7ca0:	d013      	beq.n	7cca <check_perm+0x46>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
    7ca2:	6889      	ldr	r1, [r1, #8]
    7ca4:	b189      	cbz	r1, 7cca <check_perm+0x46>
	mask &= attr->perm;
    7ca6:	401a      	ands	r2, r3
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
    7ca8:	f012 0f30 	tst.w	r2, #48	; 0x30
    7cac:	d002      	beq.n	7cb4 <check_perm+0x30>
		if (conn->sec_level < BT_SECURITY_HIGH) {
    7cae:	7a03      	ldrb	r3, [r0, #8]
    7cb0:	2b02      	cmp	r3, #2
    7cb2:	d90c      	bls.n	7cce <check_perm+0x4a>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
    7cb4:	f012 020c 	ands.w	r2, r2, #12
    7cb8:	d00b      	beq.n	7cd2 <check_perm+0x4e>
		if (!conn->encrypt) {
    7cba:	7a83      	ldrb	r3, [r0, #10]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
    7cbc:	2b00      	cmp	r3, #0
    7cbe:	bf14      	ite	ne
    7cc0:	2000      	movne	r0, #0
    7cc2:	200f      	moveq	r0, #15
    7cc4:	bd10      	pop	{r4, pc}
		return BT_ATT_ERR_READ_NOT_PERMITTED;
    7cc6:	2002      	movs	r0, #2
    7cc8:	bd10      	pop	{r4, pc}
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
    7cca:	2003      	movs	r0, #3
    7ccc:	bd10      	pop	{r4, pc}
			return BT_ATT_ERR_AUTHENTICATION;
    7cce:	2005      	movs	r0, #5
    7cd0:	bd10      	pop	{r4, pc}
	return 0;
    7cd2:	4610      	mov	r0, r2
}
    7cd4:	bd10      	pop	{r4, pc}

00007cd6 <read_type_cb>:
{
    7cd6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att *att = data->att;
    7cda:	680f      	ldr	r7, [r1, #0]
{
    7cdc:	4606      	mov	r6, r0
    7cde:	460c      	mov	r4, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    7ce0:	6800      	ldr	r0, [r0, #0]
    7ce2:	6849      	ldr	r1, [r1, #4]
	struct bt_conn *conn = att->chan.chan.conn;
    7ce4:	f8d7 9000 	ldr.w	r9, [r7]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    7ce8:	f7fb fbe4 	bl	34b4 <bt_uuid_cmp>
    7cec:	4680      	mov	r8, r0
    7cee:	2800      	cmp	r0, #0
    7cf0:	d14e      	bne.n	7d90 <read_type_cb+0xba>
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    7cf2:	2215      	movs	r2, #21
    7cf4:	4631      	mov	r1, r6
    7cf6:	4648      	mov	r0, r9
    7cf8:	f7ff ffc4 	bl	7c84 <check_perm>
    7cfc:	4605      	mov	r5, r0
    7cfe:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    7d00:	b148      	cbz	r0, 7d16 <read_type_cb+0x40>
		if (data->rsp->len) {
    7d02:	68e3      	ldr	r3, [r4, #12]
    7d04:	781d      	ldrb	r5, [r3, #0]
    7d06:	b115      	cbz	r5, 7d0e <read_type_cb+0x38>
			data->err = 0x00;
    7d08:	f884 8014 	strb.w	r8, [r4, #20]
		return BT_GATT_ITER_STOP;
    7d0c:	4645      	mov	r5, r8
}
    7d0e:	4628      	mov	r0, r5
    7d10:	b003      	add	sp, #12
    7d12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(data->buf, sizeof(*data->item));
    7d16:	68a0      	ldr	r0, [r4, #8]
    7d18:	2102      	movs	r1, #2
    7d1a:	3008      	adds	r0, #8
    7d1c:	f011 fb42 	bl	193a4 <net_buf_simple_add>
	data->item->handle = sys_cpu_to_le16(attr->handle);
    7d20:	8a33      	ldrh	r3, [r6, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    7d22:	68a1      	ldr	r1, [r4, #8]
	data->item = net_buf_add(data->buf, sizeof(*data->item));
    7d24:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(attr->handle);
    7d26:	8003      	strh	r3, [r0, #0]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    7d28:	898a      	ldrh	r2, [r1, #12]
    7d2a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
    7d2e:	6889      	ldr	r1, [r1, #8]
    7d30:	f8d6 8004 	ldr.w	r8, [r6, #4]
    7d34:	9500      	str	r5, [sp, #0]
    7d36:	1a9b      	subs	r3, r3, r2
    7d38:	b29b      	uxth	r3, r3
    7d3a:	440a      	add	r2, r1
    7d3c:	4648      	mov	r0, r9
    7d3e:	4631      	mov	r1, r6
    7d40:	47c0      	blx	r8
	if (read < 0) {
    7d42:	1e01      	subs	r1, r0, #0
    7d44:	da08      	bge.n	7d58 <read_type_cb+0x82>
	if (err < 0 && err >= -0xff) {
    7d46:	f101 03ff 	add.w	r3, r1, #255	; 0xff
    7d4a:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    7d4c:	bf9a      	itte	ls
    7d4e:	4249      	negls	r1, r1
    7d50:	b2c9      	uxtbls	r1, r1
	return BT_ATT_ERR_UNLIKELY;
    7d52:	210e      	movhi	r1, #14
		data->err = err_to_att(read);
    7d54:	7521      	strb	r1, [r4, #20]
		return BT_GATT_ITER_STOP;
    7d56:	e7da      	b.n	7d0e <read_type_cb+0x38>
	if (!data->rsp->len) {
    7d58:	68e0      	ldr	r0, [r4, #12]
    7d5a:	7802      	ldrb	r2, [r0, #0]
    7d5c:	1c8b      	adds	r3, r1, #2
    7d5e:	b982      	cbnz	r2, 7d82 <read_type_cb+0xac>
		data->rsp->len = read + sizeof(*data->item);
    7d60:	7003      	strb	r3, [r0, #0]
	net_buf_add(data->buf, read);
    7d62:	68a0      	ldr	r0, [r4, #8]
    7d64:	3008      	adds	r0, #8
    7d66:	f011 fb1d 	bl	193a4 <net_buf_simple_add>
	return att->chan.tx.mtu - data->buf->len > data->rsp->len ?
    7d6a:	68a3      	ldr	r3, [r4, #8]
    7d6c:	f8b7 5062 	ldrh.w	r5, [r7, #98]	; 0x62
    7d70:	899b      	ldrh	r3, [r3, #12]
    7d72:	1aed      	subs	r5, r5, r3
    7d74:	68e3      	ldr	r3, [r4, #12]
    7d76:	781b      	ldrb	r3, [r3, #0]
	       BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    7d78:	429d      	cmp	r5, r3
    7d7a:	bfd4      	ite	le
    7d7c:	2500      	movle	r5, #0
    7d7e:	2501      	movgt	r5, #1
    7d80:	e7c5      	b.n	7d0e <read_type_cb+0x38>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
    7d82:	429a      	cmp	r2, r3
    7d84:	d0ed      	beq.n	7d62 <read_type_cb+0x8c>
		data->buf->len -= sizeof(*data->item);
    7d86:	68a2      	ldr	r2, [r4, #8]
    7d88:	8993      	ldrh	r3, [r2, #12]
    7d8a:	3b02      	subs	r3, #2
    7d8c:	8193      	strh	r3, [r2, #12]
		return BT_GATT_ITER_STOP;
    7d8e:	e7be      	b.n	7d0e <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
    7d90:	2501      	movs	r5, #1
    7d92:	e7bc      	b.n	7d0e <read_type_cb+0x38>

00007d94 <att_cb.isra.4>:
static bt_conn_tx_cb_t att_cb(struct net_buf *buf)
    7d94:	b508      	push	{r3, lr}
	switch (att_op_get_type(buf->data[0])) {
    7d96:	7800      	ldrb	r0, [r0, #0]
    7d98:	f7ff fe24 	bl	79e4 <att_op_get_type>
    7d9c:	3801      	subs	r0, #1
    7d9e:	b2c0      	uxtb	r0, r0
    7da0:	2804      	cmp	r0, #4
    7da2:	bf9a      	itte	ls
    7da4:	4b02      	ldrls	r3, [pc, #8]	; (7db0 <att_cb.isra.4+0x1c>)
    7da6:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
    7daa:	4802      	ldrhi	r0, [pc, #8]	; (7db4 <att_cb.isra.4+0x20>)
}
    7dac:	bd08      	pop	{r3, pc}
    7dae:	bf00      	nop
    7db0:	00024a28 	.word	0x00024a28
    7db4:	00008219 	.word	0x00008219

00007db8 <uuid_create>:
{
    7db8:	b510      	push	{r4, lr}
	switch (buf->len) {
    7dba:	898a      	ldrh	r2, [r1, #12]
    7dbc:	2a02      	cmp	r2, #2
{
    7dbe:	4604      	mov	r4, r0
	switch (buf->len) {
    7dc0:	d003      	beq.n	7dca <uuid_create+0x12>
    7dc2:	2a10      	cmp	r2, #16
    7dc4:	d00a      	beq.n	7ddc <uuid_create+0x24>
	return false;
    7dc6:	2000      	movs	r0, #0
}
    7dc8:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_16;
    7dca:	2300      	movs	r3, #0
    7dcc:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = net_buf_pull_le16(buf);
    7dce:	f101 0008 	add.w	r0, r1, #8
    7dd2:	f011 fb47 	bl	19464 <net_buf_simple_pull_le16>
    7dd6:	8060      	strh	r0, [r4, #2]
		return true;
    7dd8:	2001      	movs	r0, #1
    7dda:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_128;
    7ddc:	2302      	movs	r3, #2
    7dde:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(BT_UUID_128(uuid)->val, buf->data, buf->len);
    7de2:	6889      	ldr	r1, [r1, #8]
    7de4:	f7f8 fcd5 	bl	792 <memcpy>
    7de8:	e7f6      	b.n	7dd8 <uuid_create+0x20>
	...

00007dec <att_req_sent>:
{
    7dec:	b510      	push	{r4, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    7dee:	2104      	movs	r1, #4
    7df0:	f7ff f8b5 	bl	6f5e <bt_l2cap_le_lookup_tx_cid>
    7df4:	4604      	mov	r4, r0
    7df6:	30d4      	adds	r0, #212	; 0xd4
    7df8:	f019 fed8 	bl	21bac <_impl_k_sem_give>
	if (att->req) {
    7dfc:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    7e00:	b143      	cbz	r3, 7e14 <att_req_sent+0x28>
    7e02:	f104 01ac 	add.w	r1, r4, #172	; 0xac
    7e06:	f247 5230 	movw	r2, #30000	; 0x7530
    7e0a:	4803      	ldr	r0, [pc, #12]	; (7e18 <att_req_sent+0x2c>)
}
    7e0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7e10:	f01a ba70 	b.w	222f4 <k_delayed_work_submit_to_queue>
    7e14:	bd10      	pop	{r4, pc}
    7e16:	bf00      	nop
    7e18:	20003340 	.word	0x20003340

00007e1c <bt_att_accept>:
	att->req->buf = NULL;
}
#endif /* CONFIG_BT_SMP */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    7e1c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_req_pool); i++) {
		struct bt_att *att = &bt_req_pool[i];

		if (att->chan.chan.conn) {
    7e1e:	4d14      	ldr	r5, [pc, #80]	; (7e70 <bt_att_accept+0x54>)
    7e20:	682c      	ldr	r4, [r5, #0]
{
    7e22:	460e      	mov	r6, r1
		if (att->chan.chan.conn) {
    7e24:	b9bc      	cbnz	r4, 7e56 <bt_att_accept+0x3a>
			continue;
		}

		att->chan.chan.ops = &ops;
    7e26:	4b13      	ldr	r3, [pc, #76]	; (7e74 <bt_att_accept+0x58>)
    7e28:	606b      	str	r3, [r5, #4]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    7e2a:	f105 039c 	add.w	r3, r5, #156	; 0x9c
    7e2e:	f3bf 8f5b 	dmb	ish
    7e32:	e853 2f00 	ldrex	r2, [r3]
    7e36:	e843 4100 	strex	r1, r4, [r3]
    7e3a:	2900      	cmp	r1, #0
    7e3c:	d1f9      	bne.n	7e32 <bt_att_accept+0x16>
    7e3e:	f3bf 8f5b 	dmb	ish
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    7e42:	2202      	movs	r2, #2
    7e44:	f105 00d4 	add.w	r0, r5, #212	; 0xd4
    7e48:	4611      	mov	r1, r2
    7e4a:	f019 fea5 	bl	21b98 <_impl_k_sem_init>
		atomic_set(att->flags, 0);
		k_sem_init(&att->tx_sem, CONFIG_BT_ATT_TX_MAX,
			   CONFIG_BT_ATT_TX_MAX);

		*chan = &att->chan.chan;
    7e4e:	6035      	str	r5, [r6, #0]

		return 0;
    7e50:	4620      	mov	r0, r4
	}

	BT_ERR("No available ATT context for conn %p", conn);

	return -ENOMEM;
}
    7e52:	b004      	add	sp, #16
    7e54:	bd70      	pop	{r4, r5, r6, pc}
	BT_ERR("No available ATT context for conn %p", conn);
    7e56:	4b08      	ldr	r3, [pc, #32]	; (7e78 <bt_att_accept+0x5c>)
    7e58:	9302      	str	r3, [sp, #8]
    7e5a:	9001      	str	r0, [sp, #4]
    7e5c:	9300      	str	r3, [sp, #0]
    7e5e:	4a07      	ldr	r2, [pc, #28]	; (7e7c <bt_att_accept+0x60>)
    7e60:	4b07      	ldr	r3, [pc, #28]	; (7e80 <bt_att_accept+0x64>)
    7e62:	4908      	ldr	r1, [pc, #32]	; (7e84 <bt_att_accept+0x68>)
    7e64:	4808      	ldr	r0, [pc, #32]	; (7e88 <bt_att_accept+0x6c>)
    7e66:	f7fa fa15 	bl	2294 <printk>
	return -ENOMEM;
    7e6a:	f06f 000b 	mvn.w	r0, #11
    7e6e:	e7f0      	b.n	7e52 <bt_att_accept+0x36>
    7e70:	200005e8 	.word	0x200005e8
    7e74:	20009e4c 	.word	0x20009e4c
    7e78:	00023dae 	.word	0x00023dae
    7e7c:	00022d76 	.word	0x00022d76
    7e80:	00024aba 	.word	0x00024aba
    7e84:	000272d8 	.word	0x000272d8
    7e88:	00024bca 	.word	0x00024bca

00007e8c <att_is_connected>:
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    7e8c:	6803      	ldr	r3, [r0, #0]
    7e8e:	7b1b      	ldrb	r3, [r3, #12]
    7e90:	2b03      	cmp	r3, #3
    7e92:	d10a      	bne.n	7eaa <att_is_connected+0x1e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7e94:	f3bf 8f5b 	dmb	ish
    7e98:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
    7e9c:	f3bf 8f5b 	dmb	ish
    7ea0:	ea6f 00a0 	mvn.w	r0, r0, asr #2
    7ea4:	f000 0001 	and.w	r0, r0, #1
    7ea8:	4770      	bx	lr
    7eaa:	2001      	movs	r0, #1
}
    7eac:	4770      	bx	lr

00007eae <att_prepare_write_req>:
    7eae:	2006      	movs	r0, #6
    7eb0:	4770      	bx	lr
	...

00007eb4 <att_send_req>:
{
    7eb4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    7eb6:	4605      	mov	r5, r0
	k_sem_take(&att->tx_sem, K_FOREVER);
    7eb8:	f100 06d4 	add.w	r6, r0, #212	; 0xd4
	att->req = req;
    7ebc:	f8c5 10a0 	str.w	r1, [r5, #160]	; 0xa0
{
    7ec0:	460c      	mov	r4, r1
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    7ec2:	4630      	mov	r0, r6
    7ec4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    7ec8:	f019 fed0 	bl	21c6c <_impl_k_sem_take>
	if (!att_is_connected(att)) {
    7ecc:	4628      	mov	r0, r5
    7ece:	f7ff ffdd 	bl	7e8c <att_is_connected>
    7ed2:	b978      	cbnz	r0, 7ef4 <att_send_req+0x40>
		BT_WARN("Disconnected");
    7ed4:	4b14      	ldr	r3, [pc, #80]	; (7f28 <att_send_req+0x74>)
    7ed6:	9301      	str	r3, [sp, #4]
    7ed8:	9300      	str	r3, [sp, #0]
    7eda:	4a14      	ldr	r2, [pc, #80]	; (7f2c <att_send_req+0x78>)
    7edc:	4b14      	ldr	r3, [pc, #80]	; (7f30 <att_send_req+0x7c>)
    7ede:	4915      	ldr	r1, [pc, #84]	; (7f34 <att_send_req+0x80>)
    7ee0:	4815      	ldr	r0, [pc, #84]	; (7f38 <att_send_req+0x84>)
    7ee2:	f7fa f9d7 	bl	2294 <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    7ee6:	4630      	mov	r0, r6
    7ee8:	f019 fe60 	bl	21bac <_impl_k_sem_give>
		return -ENOTCONN;
    7eec:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
    7ef0:	b002      	add	sp, #8
    7ef2:	bd70      	pop	{r4, r5, r6, pc}
	net_buf_simple_save(&req->buf->b, &req->state);
    7ef4:	6926      	ldr	r6, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
    7ef6:	f106 0008 	add.w	r0, r6, #8
    7efa:	f011 fabb 	bl	19474 <net_buf_simple_headroom>
	state->len = buf->len;
    7efe:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
    7f00:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
    7f02:	81e3      	strh	r3, [r4, #14]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    7f04:	6920      	ldr	r0, [r4, #16]
    7f06:	682d      	ldr	r5, [r5, #0]
    7f08:	f011 fa1c 	bl	19344 <net_buf_ref>
    7f0c:	6923      	ldr	r3, [r4, #16]
    7f0e:	4606      	mov	r6, r0
    7f10:	6898      	ldr	r0, [r3, #8]
    7f12:	f7ff ff3f 	bl	7d94 <att_cb.isra.4>
    7f16:	4632      	mov	r2, r6
    7f18:	4603      	mov	r3, r0
    7f1a:	2104      	movs	r1, #4
    7f1c:	4628      	mov	r0, r5
    7f1e:	f7fe fea3 	bl	6c68 <bt_l2cap_send_cb>
	return 0;
    7f22:	2000      	movs	r0, #0
    7f24:	e7e4      	b.n	7ef0 <att_send_req+0x3c>
    7f26:	bf00      	nop
    7f28:	00023dae 	.word	0x00023dae
    7f2c:	00024006 	.word	0x00024006
    7f30:	00024a3c 	.word	0x00024a3c
    7f34:	000272d8 	.word	0x000272d8
    7f38:	00024b6c 	.word	0x00024b6c

00007f3c <att_handle_rsp>:
{
    7f3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    7f40:	4604      	mov	r4, r0
	k_delayed_work_cancel(&att->timeout_work);
    7f42:	30ac      	adds	r0, #172	; 0xac
{
    7f44:	461e      	mov	r6, r3
    7f46:	460f      	mov	r7, r1
    7f48:	4690      	mov	r8, r2
	k_delayed_work_cancel(&att->timeout_work);
    7f4a:	f01a f979 	bl	22240 <k_delayed_work_cancel>
	if (!att->req) {
    7f4e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    7f52:	b9db      	cbnz	r3, 7f8c <att_handle_rsp+0x50>
		BT_WARN("No pending ATT request");
    7f54:	4b1c      	ldr	r3, [pc, #112]	; (7fc8 <att_handle_rsp+0x8c>)
    7f56:	9301      	str	r3, [sp, #4]
    7f58:	9300      	str	r3, [sp, #0]
    7f5a:	4a1c      	ldr	r2, [pc, #112]	; (7fcc <att_handle_rsp+0x90>)
    7f5c:	4b1c      	ldr	r3, [pc, #112]	; (7fd0 <att_handle_rsp+0x94>)
    7f5e:	491d      	ldr	r1, [pc, #116]	; (7fd4 <att_handle_rsp+0x98>)
    7f60:	481d      	ldr	r0, [pc, #116]	; (7fd8 <att_handle_rsp+0x9c>)
    7f62:	f7fa f997 	bl	2294 <printk>
    7f66:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    7f6a:	b159      	cbz	r1, 7f84 <att_handle_rsp+0x48>
	if (list->tail == node) {
    7f6c:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
	list->head = node->next;
    7f70:	680b      	ldr	r3, [r1, #0]
    7f72:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
	if (list->tail == node) {
    7f76:	4291      	cmp	r1, r2
		list->tail = list->head;
    7f78:	bf08      	it	eq
    7f7a:	f8c4 30a8 	streq.w	r3, [r4, #168]	; 0xa8
	att_send_req(att, ATT_REQ(node));
    7f7e:	4620      	mov	r0, r4
    7f80:	f7ff ff98 	bl	7eb4 <att_send_req>
}
    7f84:	2000      	movs	r0, #0
    7f86:	b003      	add	sp, #12
    7f88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (att->req->buf) {
    7f8c:	6918      	ldr	r0, [r3, #16]
    7f8e:	b128      	cbz	r0, 7f9c <att_handle_rsp+0x60>
		net_buf_unref(att->req->buf);
    7f90:	f011 f9aa 	bl	192e8 <net_buf_unref>
		att->req->buf = NULL;
    7f94:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    7f98:	2200      	movs	r2, #0
    7f9a:	611a      	str	r2, [r3, #16]
	func = att->req->func;
    7f9c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	func(att->chan.chan.conn, err, pdu, len, att->req);
    7fa0:	6820      	ldr	r0, [r4, #0]
	func = att->req->func;
    7fa2:	f8d3 9004 	ldr.w	r9, [r3, #4]
	att->req->func = NULL;
    7fa6:	2500      	movs	r5, #0
    7fa8:	605d      	str	r5, [r3, #4]
	func(att->chan.chan.conn, err, pdu, len, att->req);
    7faa:	463a      	mov	r2, r7
    7fac:	9300      	str	r3, [sp, #0]
    7fae:	4631      	mov	r1, r6
    7fb0:	4643      	mov	r3, r8
    7fb2:	47c8      	blx	r9
	if (!att->req->func) {
    7fb4:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    7fb8:	6843      	ldr	r3, [r0, #4]
    7fba:	b90b      	cbnz	r3, 7fc0 <att_handle_rsp+0x84>
		att_req_destroy(att->req);
    7fbc:	f7ff fd2a 	bl	7a14 <att_req_destroy>
	att->req = NULL;
    7fc0:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
    7fc4:	e7cf      	b.n	7f66 <att_handle_rsp+0x2a>
    7fc6:	bf00      	nop
    7fc8:	00023dae 	.word	0x00023dae
    7fcc:	00024006 	.word	0x00024006
    7fd0:	00024a49 	.word	0x00024a49
    7fd4:	000272d8 	.word	0x000272d8
    7fd8:	00024b45 	.word	0x00024b45

00007fdc <att_confirm>:
	return att_handle_rsp(att, buf->data, buf->len, 0);
    7fdc:	898a      	ldrh	r2, [r1, #12]
    7fde:	6889      	ldr	r1, [r1, #8]
    7fe0:	2300      	movs	r3, #0
    7fe2:	f7ff bfab 	b.w	7f3c <att_handle_rsp>

00007fe6 <att_handle_exec_write_rsp>:
    7fe6:	f7ff bff9 	b.w	7fdc <att_confirm>

00007fea <att_handle_prepare_write_rsp>:
    7fea:	f7ff bff7 	b.w	7fdc <att_confirm>

00007fee <att_handle_write_rsp>:
    7fee:	f7ff bff5 	b.w	7fdc <att_confirm>

00007ff2 <att_handle_read_mult_rsp>:
    7ff2:	f7ff bff3 	b.w	7fdc <att_confirm>

00007ff6 <att_handle_read_blob_rsp>:
    7ff6:	f7ff bff1 	b.w	7fdc <att_confirm>

00007ffa <att_handle_read_rsp>:
    7ffa:	f7ff bfef 	b.w	7fdc <att_confirm>

00007ffe <att_handle_read_type_rsp>:
    7ffe:	f7ff bfed 	b.w	7fdc <att_confirm>

00008002 <att_handle_find_type_rsp>:
    8002:	f7ff bfeb 	b.w	7fdc <att_confirm>

00008006 <att_handle_find_info_rsp>:
    8006:	f7ff bfe9 	b.w	7fdc <att_confirm>

0000800a <att_mtu_rsp>:
{
    800a:	b410      	push	{r4}
    800c:	460a      	mov	r2, r1
	if (!att) {
    800e:	b198      	cbz	r0, 8038 <att_mtu_rsp+0x2e>
	rsp = (void *)buf->data;
    8010:	6889      	ldr	r1, [r1, #8]
	mtu = sys_le16_to_cpu(rsp->mtu);
    8012:	880b      	ldrh	r3, [r1, #0]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
    8014:	2b16      	cmp	r3, #22
    8016:	d805      	bhi.n	8024 <att_mtu_rsp+0x1a>
		return att_handle_rsp(att, NULL, 0, BT_ATT_ERR_INVALID_PDU);
    8018:	2200      	movs	r2, #0
    801a:	2304      	movs	r3, #4
    801c:	4611      	mov	r1, r2
}
    801e:	bc10      	pop	{r4}
	return att_handle_rsp(att, rsp, buf->len, 0);
    8020:	f7ff bf8c 	b.w	7f3c <att_handle_rsp>
	att->chan.rx.mtu = min(mtu, BT_ATT_MTU);
    8024:	2b41      	cmp	r3, #65	; 0x41
    8026:	bf28      	it	cs
    8028:	2341      	movcs	r3, #65	; 0x41
    802a:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
	att->chan.tx.mtu = att->chan.rx.mtu;
    802e:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
	return att_handle_rsp(att, rsp, buf->len, 0);
    8032:	8992      	ldrh	r2, [r2, #12]
    8034:	2300      	movs	r3, #0
    8036:	e7f2      	b.n	801e <att_mtu_rsp+0x14>
}
    8038:	bc10      	pop	{r4}
    803a:	4770      	bx	lr

0000803c <bt_att_encrypt_change>:
{
    803c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    803e:	4604      	mov	r4, r0
	if (hci_status) {
    8040:	460d      	mov	r5, r1
    8042:	b139      	cbz	r1, 8054 <bt_att_encrypt_change+0x18>
		att_handle_rsp(att, NULL, 0, BT_ATT_ERR_AUTHENTICATION);
    8044:	2200      	movs	r2, #0
    8046:	2305      	movs	r3, #5
    8048:	4611      	mov	r1, r2
}
    804a:	b003      	add	sp, #12
    804c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		att_handle_rsp(att, NULL, 0, BT_ATT_ERR_AUTHENTICATION);
    8050:	f7ff bf74 	b.w	7f3c <att_handle_rsp>
	struct bt_conn *conn = ch->chan.conn;
    8054:	6806      	ldr	r6, [r0, #0]
	if (conn->sec_level == BT_SECURITY_LOW) {
    8056:	7a33      	ldrb	r3, [r6, #8]
    8058:	2b01      	cmp	r3, #1
    805a:	d02d      	beq.n	80b8 <bt_att_encrypt_change+0x7c>
	if (!att->req || !att->req->retrying) {
    805c:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    8060:	b353      	cbz	r3, 80b8 <bt_att_encrypt_change+0x7c>
    8062:	7d1b      	ldrb	r3, [r3, #20]
    8064:	b343      	cbz	r3, 80b8 <bt_att_encrypt_change+0x7c>
	k_sem_take(&att->tx_sem, K_FOREVER);
    8066:	f100 07d4 	add.w	r7, r0, #212	; 0xd4
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    806a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    806e:	4638      	mov	r0, r7
    8070:	f019 fdfc 	bl	21c6c <_impl_k_sem_take>
	if (!att_is_connected(att)) {
    8074:	4620      	mov	r0, r4
    8076:	f7ff ff09 	bl	7e8c <att_is_connected>
    807a:	b970      	cbnz	r0, 809a <bt_att_encrypt_change+0x5e>
		BT_WARN("Disconnected");
    807c:	4b0f      	ldr	r3, [pc, #60]	; (80bc <bt_att_encrypt_change+0x80>)
    807e:	9301      	str	r3, [sp, #4]
    8080:	9300      	str	r3, [sp, #0]
    8082:	4a0f      	ldr	r2, [pc, #60]	; (80c0 <bt_att_encrypt_change+0x84>)
    8084:	4b0f      	ldr	r3, [pc, #60]	; (80c4 <bt_att_encrypt_change+0x88>)
    8086:	4910      	ldr	r1, [pc, #64]	; (80c8 <bt_att_encrypt_change+0x8c>)
    8088:	4810      	ldr	r0, [pc, #64]	; (80cc <bt_att_encrypt_change+0x90>)
    808a:	f7fa f903 	bl	2294 <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    808e:	4638      	mov	r0, r7
}
    8090:	b003      	add	sp, #12
    8092:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    8096:	f019 bd89 	b.w	21bac <_impl_k_sem_give>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, att->req->buf,
    809a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    809e:	691f      	ldr	r7, [r3, #16]
    80a0:	68b8      	ldr	r0, [r7, #8]
    80a2:	f7ff fe77 	bl	7d94 <att_cb.isra.4>
    80a6:	463a      	mov	r2, r7
    80a8:	4603      	mov	r3, r0
    80aa:	2104      	movs	r1, #4
    80ac:	4630      	mov	r0, r6
    80ae:	f7fe fddb 	bl	6c68 <bt_l2cap_send_cb>
	att->req->buf = NULL;
    80b2:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    80b6:	611d      	str	r5, [r3, #16]
}
    80b8:	b003      	add	sp, #12
    80ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    80bc:	00023dae 	.word	0x00023dae
    80c0:	00024006 	.word	0x00024006
    80c4:	00024aa4 	.word	0x00024aa4
    80c8:	000272d8 	.word	0x000272d8
    80cc:	00024b6c 	.word	0x00024b6c

000080d0 <att_error_rsp>:
{
    80d0:	b570      	push	{r4, r5, r6, lr}
    80d2:	4604      	mov	r4, r0
	rsp = (void *)buf->data;
    80d4:	6888      	ldr	r0, [r1, #8]
	if (!att->req) {
    80d6:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
    80da:	b332      	cbz	r2, 812a <att_error_rsp+0x5a>
	if (att->req->buf) {
    80dc:	6913      	ldr	r3, [r2, #16]
    80de:	b12b      	cbz	r3, 80ec <att_error_rsp+0x1c>
	buf->data = buf->__buf + state->offset;
    80e0:	8995      	ldrh	r5, [r2, #12]
    80e2:	6919      	ldr	r1, [r3, #16]
    80e4:	4429      	add	r1, r5
    80e6:	6099      	str	r1, [r3, #8]
	buf->len = state->len;
    80e8:	89d1      	ldrh	r1, [r2, #14]
    80ea:	8199      	strh	r1, [r3, #12]
	if (att->req->retrying) {
    80ec:	7d13      	ldrb	r3, [r2, #20]
	err = rsp->error;
    80ee:	78c5      	ldrb	r5, [r0, #3]
	if (att->req->retrying) {
    80f0:	b9e3      	cbnz	r3, 812c <att_error_rsp+0x5c>
	switch (err) {
    80f2:	2d05      	cmp	r5, #5
	if (!att_change_security(att->chan.chan.conn, err)) {
    80f4:	6820      	ldr	r0, [r4, #0]
	switch (err) {
    80f6:	d006      	beq.n	8106 <att_error_rsp+0x36>
    80f8:	2d0f      	cmp	r5, #15
    80fa:	d117      	bne.n	812c <att_error_rsp+0x5c>
		if (conn->sec_level >= BT_SECURITY_MEDIUM)
    80fc:	7a03      	ldrb	r3, [r0, #8]
    80fe:	2b01      	cmp	r3, #1
    8100:	d814      	bhi.n	812c <att_error_rsp+0x5c>
		sec = BT_SECURITY_MEDIUM;
    8102:	2102      	movs	r1, #2
    8104:	e007      	b.n	8116 <att_error_rsp+0x46>
		if (conn->sec_level < BT_SECURITY_MEDIUM) {
    8106:	7a03      	ldrb	r3, [r0, #8]
    8108:	2b01      	cmp	r3, #1
    810a:	d9fa      	bls.n	8102 <att_error_rsp+0x32>
		} else if (conn->sec_level < BT_SECURITY_HIGH) {
    810c:	2b02      	cmp	r3, #2
    810e:	d00a      	beq.n	8126 <att_error_rsp+0x56>
		} else if (conn->sec_level < BT_SECURITY_FIPS) {
    8110:	2b03      	cmp	r3, #3
    8112:	d10b      	bne.n	812c <att_error_rsp+0x5c>
			sec = BT_SECURITY_FIPS;
    8114:	2104      	movs	r1, #4
	return bt_conn_security(conn, sec);
    8116:	f7fd fe15 	bl	5d44 <bt_conn_security>
	if (!att_change_security(att->chan.chan.conn, err)) {
    811a:	b938      	cbnz	r0, 812c <att_error_rsp+0x5c>
		att->req->retrying = true;
    811c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    8120:	2201      	movs	r2, #1
    8122:	751a      	strb	r2, [r3, #20]
		return 0;
    8124:	bd70      	pop	{r4, r5, r6, pc}
			sec = BT_SECURITY_HIGH;
    8126:	2103      	movs	r1, #3
    8128:	e7f5      	b.n	8116 <att_error_rsp+0x46>
		err = BT_ATT_ERR_UNLIKELY;
    812a:	250e      	movs	r5, #14
	return att_handle_rsp(att, NULL, 0, err);
    812c:	2200      	movs	r2, #0
    812e:	462b      	mov	r3, r5
    8130:	4620      	mov	r0, r4
    8132:	4611      	mov	r1, r2
}
    8134:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return att_handle_rsp(att, NULL, 0, err);
    8138:	f7ff bf00 	b.w	7f3c <att_handle_rsp>

0000813c <att_reset>:
{
    813c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    813e:	f100 039c 	add.w	r3, r0, #156	; 0x9c
    8142:	4605      	mov	r5, r0
    8144:	f3bf 8f5b 	dmb	ish
    8148:	e853 2f00 	ldrex	r2, [r3]
    814c:	f042 0204 	orr.w	r2, r2, #4
    8150:	e843 2100 	strex	r1, r2, [r3]
    8154:	2900      	cmp	r1, #0
    8156:	d1f7      	bne.n	8148 <att_reset+0xc>
    8158:	f3bf 8f5b 	dmb	ish
		k_sem_give(&att->tx_sem);
    815c:	f105 04d4 	add.w	r4, r5, #212	; 0xd4
    8160:	4620      	mov	r0, r4
    8162:	f019 fd23 	bl	21bac <_impl_k_sem_give>
    8166:	4620      	mov	r0, r4
    8168:	f019 fd20 	bl	21bac <_impl_k_sem_give>
    816c:	f8d5 40a4 	ldr.w	r4, [r5, #164]	; 0xa4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    8170:	b98c      	cbnz	r4, 8196 <att_reset+0x5a>
	if (!att->req) {
    8172:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	list->head = NULL;
    8176:	2200      	movs	r2, #0
    8178:	f8c5 20a4 	str.w	r2, [r5, #164]	; 0xa4
	list->tail = NULL;
    817c:	f8c5 20a8 	str.w	r2, [r5, #168]	; 0xa8
    8180:	b90b      	cbnz	r3, 8186 <att_reset+0x4a>
}
    8182:	b003      	add	sp, #12
    8184:	bdf0      	pop	{r4, r5, r6, r7, pc}
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
    8186:	230e      	movs	r3, #14
    8188:	4611      	mov	r1, r2
    818a:	4628      	mov	r0, r5
}
    818c:	b003      	add	sp, #12
    818e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
    8192:	f7ff bed3 	b.w	7f3c <att_handle_rsp>
	return node->next;
    8196:	6826      	ldr	r6, [r4, #0]
		if (req->func) {
    8198:	6867      	ldr	r7, [r4, #4]
    819a:	b12f      	cbz	r7, 81a8 <att_reset+0x6c>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0, req);
    819c:	2300      	movs	r3, #0
    819e:	9400      	str	r4, [sp, #0]
    81a0:	461a      	mov	r2, r3
    81a2:	210e      	movs	r1, #14
    81a4:	4618      	mov	r0, r3
    81a6:	47b8      	blx	r7
		att_req_destroy(req);
    81a8:	4620      	mov	r0, r4
    81aa:	f7ff fc33 	bl	7a14 <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    81ae:	2e00      	cmp	r6, #0
    81b0:	d0df      	beq.n	8172 <att_reset+0x36>
    81b2:	4634      	mov	r4, r6
    81b4:	6836      	ldr	r6, [r6, #0]
    81b6:	e7ef      	b.n	8198 <att_reset+0x5c>

000081b8 <bt_att_disconnected>:
{
    81b8:	b510      	push	{r4, lr}
    81ba:	4604      	mov	r4, r0
	att_reset(att);
    81bc:	f7ff ffbe 	bl	813c <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    81c0:	6820      	ldr	r0, [r4, #0]
    81c2:	f001 fa39 	bl	9638 <bt_gatt_disconnected>
	memset(att, 0, sizeof(*att));
    81c6:	4620      	mov	r0, r4
    81c8:	22ec      	movs	r2, #236	; 0xec
    81ca:	2100      	movs	r1, #0
}
    81cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	memset(att, 0, sizeof(*att));
    81d0:	f7f8 bb0b 	b.w	7ea <memset>

000081d4 <att_timeout>:
{
    81d4:	b513      	push	{r0, r1, r4, lr}
	BT_ERR("ATT Timeout");
    81d6:	4b0b      	ldr	r3, [pc, #44]	; (8204 <att_timeout+0x30>)
    81d8:	4a0b      	ldr	r2, [pc, #44]	; (8208 <att_timeout+0x34>)
    81da:	490c      	ldr	r1, [pc, #48]	; (820c <att_timeout+0x38>)
    81dc:	9301      	str	r3, [sp, #4]
{
    81de:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
    81e0:	9300      	str	r3, [sp, #0]
    81e2:	480b      	ldr	r0, [pc, #44]	; (8210 <att_timeout+0x3c>)
    81e4:	4b0b      	ldr	r3, [pc, #44]	; (8214 <att_timeout+0x40>)
    81e6:	f7fa f855 	bl	2294 <printk>
	att_reset(att);
    81ea:	f1a4 00ac 	sub.w	r0, r4, #172	; 0xac
    81ee:	f7ff ffa5 	bl	813c <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    81f2:	f854 0cac 	ldr.w	r0, [r4, #-172]
    81f6:	f001 fa1f 	bl	9638 <bt_gatt_disconnected>
	ch->chan.conn = NULL;
    81fa:	2300      	movs	r3, #0
    81fc:	f844 3cac 	str.w	r3, [r4, #-172]
}
    8200:	b002      	add	sp, #8
    8202:	bd10      	pop	{r4, pc}
    8204:	00023dae 	.word	0x00023dae
    8208:	00022d76 	.word	0x00022d76
    820c:	000272d8 	.word	0x000272d8
    8210:	00024bae 	.word	0x00024bae
    8214:	00024a98 	.word	0x00024a98

00008218 <att_pdu_sent>:
{
    8218:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    821a:	2104      	movs	r1, #4
    821c:	f7fe fe9f 	bl	6f5e <bt_l2cap_le_lookup_tx_cid>
}
    8220:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    8224:	30d4      	adds	r0, #212	; 0xd4
    8226:	f019 bcc1 	b.w	21bac <_impl_k_sem_give>

0000822a <att_cfm_sent>:
{
    822a:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    822c:	2104      	movs	r1, #4
    822e:	f7fe fe96 	bl	6f5e <bt_l2cap_le_lookup_tx_cid>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    8232:	f3bf 8f5b 	dmb	ish
    8236:	f100 039c 	add.w	r3, r0, #156	; 0x9c
    823a:	e853 2f00 	ldrex	r2, [r3]
    823e:	f022 0202 	bic.w	r2, r2, #2
    8242:	e843 2100 	strex	r1, r2, [r3]
    8246:	2900      	cmp	r1, #0
    8248:	d1f7      	bne.n	823a <att_cfm_sent+0x10>
    824a:	f3bf 8f5b 	dmb	ish
    824e:	30d4      	adds	r0, #212	; 0xd4
}
    8250:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    8254:	f019 bcaa 	b.w	21bac <_impl_k_sem_give>

00008258 <att_rsp_sent>:
{
    8258:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    825a:	2104      	movs	r1, #4
    825c:	f7fe fe7f 	bl	6f5e <bt_l2cap_le_lookup_tx_cid>
    8260:	f3bf 8f5b 	dmb	ish
    8264:	f100 039c 	add.w	r3, r0, #156	; 0x9c
    8268:	e853 2f00 	ldrex	r2, [r3]
    826c:	f022 0201 	bic.w	r2, r2, #1
    8270:	e843 2100 	strex	r1, r2, [r3]
    8274:	2900      	cmp	r1, #0
    8276:	d1f7      	bne.n	8268 <att_rsp_sent+0x10>
    8278:	f3bf 8f5b 	dmb	ish
    827c:	30d4      	adds	r0, #212	; 0xd4
}
    827e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    8282:	f019 bc93 	b.w	21bac <_impl_k_sem_give>
	...

00008288 <att_chan_get>:
	if (conn->state != BT_CONN_CONNECTED) {
    8288:	7b03      	ldrb	r3, [r0, #12]
    828a:	2b03      	cmp	r3, #3
{
    828c:	b513      	push	{r0, r1, r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    828e:	d00b      	beq.n	82a8 <att_chan_get+0x20>
		BT_WARN("Not connected");
    8290:	4b15      	ldr	r3, [pc, #84]	; (82e8 <att_chan_get+0x60>)
    8292:	9301      	str	r3, [sp, #4]
    8294:	9300      	str	r3, [sp, #0]
    8296:	4a15      	ldr	r2, [pc, #84]	; (82ec <att_chan_get+0x64>)
    8298:	4b15      	ldr	r3, [pc, #84]	; (82f0 <att_chan_get+0x68>)
    829a:	4916      	ldr	r1, [pc, #88]	; (82f4 <att_chan_get+0x6c>)
    829c:	4816      	ldr	r0, [pc, #88]	; (82f8 <att_chan_get+0x70>)
		BT_WARN("ATT context flagged as disconnected");
    829e:	f7f9 fff9 	bl	2294 <printk>
		return NULL;
    82a2:	2000      	movs	r0, #0
}
    82a4:	b002      	add	sp, #8
    82a6:	bd10      	pop	{r4, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    82a8:	2104      	movs	r1, #4
    82aa:	f7fe fe68 	bl	6f7e <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    82ae:	4604      	mov	r4, r0
    82b0:	b950      	cbnz	r0, 82c8 <att_chan_get+0x40>
		BT_ERR("Unable to find ATT channel");
    82b2:	4b0d      	ldr	r3, [pc, #52]	; (82e8 <att_chan_get+0x60>)
    82b4:	9301      	str	r3, [sp, #4]
    82b6:	9300      	str	r3, [sp, #0]
    82b8:	4a10      	ldr	r2, [pc, #64]	; (82fc <att_chan_get+0x74>)
    82ba:	4b0d      	ldr	r3, [pc, #52]	; (82f0 <att_chan_get+0x68>)
    82bc:	490d      	ldr	r1, [pc, #52]	; (82f4 <att_chan_get+0x6c>)
    82be:	4810      	ldr	r0, [pc, #64]	; (8300 <att_chan_get+0x78>)
    82c0:	f7f9 ffe8 	bl	2294 <printk>
    82c4:	4620      	mov	r0, r4
    82c6:	e7ed      	b.n	82a4 <att_chan_get+0x1c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    82c8:	f3bf 8f5b 	dmb	ish
    82cc:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
    82d0:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att->flags, ATT_DISCONNECTED)) {
    82d4:	075b      	lsls	r3, r3, #29
    82d6:	d5f5      	bpl.n	82c4 <att_chan_get+0x3c>
		BT_WARN("ATT context flagged as disconnected");
    82d8:	4b03      	ldr	r3, [pc, #12]	; (82e8 <att_chan_get+0x60>)
    82da:	9301      	str	r3, [sp, #4]
    82dc:	9300      	str	r3, [sp, #0]
    82de:	4a03      	ldr	r2, [pc, #12]	; (82ec <att_chan_get+0x64>)
    82e0:	4b03      	ldr	r3, [pc, #12]	; (82f0 <att_chan_get+0x68>)
    82e2:	4904      	ldr	r1, [pc, #16]	; (82f4 <att_chan_get+0x6c>)
    82e4:	4807      	ldr	r0, [pc, #28]	; (8304 <att_chan_get+0x7c>)
    82e6:	e7da      	b.n	829e <att_chan_get+0x16>
    82e8:	00023dae 	.word	0x00023dae
    82ec:	00024006 	.word	0x00024006
    82f0:	00024a79 	.word	0x00024a79
    82f4:	000272d8 	.word	0x000272d8
    82f8:	00024ac8 	.word	0x00024ac8
    82fc:	00022d76 	.word	0x00022d76
    8300:	00024ae6 	.word	0x00024ae6
    8304:	00024b11 	.word	0x00024b11

00008308 <write_cb>:
{
    8308:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    830c:	680f      	ldr	r7, [r1, #0]
{
    830e:	460c      	mov	r4, r1
    8310:	4606      	mov	r6, r0
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    8312:	4601      	mov	r1, r0
    8314:	222a      	movs	r2, #42	; 0x2a
    8316:	4638      	mov	r0, r7
    8318:	f7ff fcb4 	bl	7c84 <check_perm>
    831c:	4605      	mov	r5, r0
    831e:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    8320:	b9e8      	cbnz	r0, 835e <write_cb+0x56>
	write = attr->write(data->conn, attr, data->value, data->len,
    8322:	8a62      	ldrh	r2, [r4, #18]
    8324:	9001      	str	r0, [sp, #4]
    8326:	9200      	str	r2, [sp, #0]
    8328:	7c23      	ldrb	r3, [r4, #16]
    832a:	f8d6 8008 	ldr.w	r8, [r6, #8]
    832e:	68e2      	ldr	r2, [r4, #12]
    8330:	4631      	mov	r1, r6
    8332:	4638      	mov	r0, r7
    8334:	47c0      	blx	r8
	if (write < 0 || write != data->len) {
    8336:	2800      	cmp	r0, #0
    8338:	db02      	blt.n	8340 <write_cb+0x38>
    833a:	7c23      	ldrb	r3, [r4, #16]
    833c:	4298      	cmp	r0, r3
    833e:	d00b      	beq.n	8358 <write_cb+0x50>
	if (err < 0 && err >= -0xff) {
    8340:	f100 03ff 	add.w	r3, r0, #255	; 0xff
    8344:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    8346:	bf9a      	itte	ls
    8348:	4240      	negls	r0, r0
    834a:	b2c0      	uxtbls	r0, r0
	return BT_ATT_ERR_UNLIKELY;
    834c:	200e      	movhi	r0, #14
		data->err = err_to_att(write);
    834e:	7520      	strb	r0, [r4, #20]
}
    8350:	4628      	mov	r0, r5
    8352:	b002      	add	sp, #8
    8354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->err = 0;
    8358:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
    835a:	2501      	movs	r5, #1
    835c:	e7f8      	b.n	8350 <write_cb+0x48>
		return BT_GATT_ITER_STOP;
    835e:	2500      	movs	r5, #0
    8360:	e7f6      	b.n	8350 <write_cb+0x48>

00008362 <read_cb>:
{
    8362:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    8366:	4606      	mov	r6, r0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    8368:	6888      	ldr	r0, [r1, #8]
	struct bt_att *att = data->att;
    836a:	f8d1 9000 	ldr.w	r9, [r1]
{
    836e:	460c      	mov	r4, r1
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    8370:	3008      	adds	r0, #8
    8372:	2100      	movs	r1, #0
	struct bt_conn *conn = att->chan.chan.conn;
    8374:	f8d9 8000 	ldr.w	r8, [r9]
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    8378:	f011 f814 	bl	193a4 <net_buf_simple_add>
	data->err = 0x00;
    837c:	2700      	movs	r7, #0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    837e:	60e0      	str	r0, [r4, #12]
	data->err = 0x00;
    8380:	7427      	strb	r7, [r4, #16]
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    8382:	2215      	movs	r2, #21
    8384:	4631      	mov	r1, r6
    8386:	4640      	mov	r0, r8
    8388:	f7ff fc7c 	bl	7c84 <check_perm>
    838c:	4605      	mov	r5, r0
    838e:	7420      	strb	r0, [r4, #16]
	if (data->err) {
    8390:	bb08      	cbnz	r0, 83d6 <read_cb+0x74>
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    8392:	68a1      	ldr	r1, [r4, #8]
    8394:	f8b9 3062 	ldrh.w	r3, [r9, #98]	; 0x62
    8398:	898a      	ldrh	r2, [r1, #12]
    839a:	6889      	ldr	r1, [r1, #8]
    839c:	88a0      	ldrh	r0, [r4, #4]
    839e:	9000      	str	r0, [sp, #0]
    83a0:	1a9b      	subs	r3, r3, r2
    83a2:	6877      	ldr	r7, [r6, #4]
    83a4:	440a      	add	r2, r1
    83a6:	b29b      	uxth	r3, r3
    83a8:	4631      	mov	r1, r6
    83aa:	4640      	mov	r0, r8
    83ac:	47b8      	blx	r7
	if (read < 0) {
    83ae:	1e01      	subs	r1, r0, #0
    83b0:	da0b      	bge.n	83ca <read_cb+0x68>
	if (err < 0 && err >= -0xff) {
    83b2:	f101 03ff 	add.w	r3, r1, #255	; 0xff
    83b6:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    83b8:	bf9a      	itte	ls
    83ba:	4249      	negls	r1, r1
    83bc:	b2c9      	uxtbls	r1, r1
	return BT_ATT_ERR_UNLIKELY;
    83be:	210e      	movhi	r1, #14
		data->err = err_to_att(read);
    83c0:	7421      	strb	r1, [r4, #16]
}
    83c2:	4628      	mov	r0, r5
    83c4:	b003      	add	sp, #12
    83c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	net_buf_add(data->buf, read);
    83ca:	68a0      	ldr	r0, [r4, #8]
    83cc:	3008      	adds	r0, #8
    83ce:	f010 ffe9 	bl	193a4 <net_buf_simple_add>
	return BT_GATT_ITER_CONTINUE;
    83d2:	2501      	movs	r5, #1
    83d4:	e7f5      	b.n	83c2 <read_cb+0x60>
		return BT_GATT_ITER_STOP;
    83d6:	463d      	mov	r5, r7
    83d8:	e7f3      	b.n	83c2 <read_cb+0x60>
	...

000083dc <bt_att_create_pdu>:
{
    83dc:	b530      	push	{r4, r5, lr}
    83de:	b085      	sub	sp, #20
    83e0:	460d      	mov	r5, r1
    83e2:	4614      	mov	r4, r2
	att = att_chan_get(conn);
    83e4:	f7ff ff50 	bl	8288 <att_chan_get>
	if (!att) {
    83e8:	b1f0      	cbz	r0, 8428 <bt_att_create_pdu+0x4c>
	if (len + sizeof(op) > att->chan.tx.mtu) {
    83ea:	f8b0 1062 	ldrh.w	r1, [r0, #98]	; 0x62
    83ee:	3401      	adds	r4, #1
    83f0:	428c      	cmp	r4, r1
    83f2:	d90e      	bls.n	8412 <bt_att_create_pdu+0x36>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
    83f4:	4b0d      	ldr	r3, [pc, #52]	; (842c <bt_att_create_pdu+0x50>)
    83f6:	9303      	str	r3, [sp, #12]
    83f8:	9402      	str	r4, [sp, #8]
    83fa:	9101      	str	r1, [sp, #4]
    83fc:	9300      	str	r3, [sp, #0]
    83fe:	4a0c      	ldr	r2, [pc, #48]	; (8430 <bt_att_create_pdu+0x54>)
    8400:	4b0c      	ldr	r3, [pc, #48]	; (8434 <bt_att_create_pdu+0x58>)
    8402:	490d      	ldr	r1, [pc, #52]	; (8438 <bt_att_create_pdu+0x5c>)
    8404:	480d      	ldr	r0, [pc, #52]	; (843c <bt_att_create_pdu+0x60>)
    8406:	f7f9 ff45 	bl	2294 <printk>
		return NULL;
    840a:	2400      	movs	r4, #0
}
    840c:	4620      	mov	r0, r4
    840e:	b005      	add	sp, #20
    8410:	bd30      	pop	{r4, r5, pc}
	buf = bt_l2cap_create_pdu(NULL, 0);
    8412:	2100      	movs	r1, #0
    8414:	4608      	mov	r0, r1
    8416:	f7fe fc24 	bl	6c62 <bt_l2cap_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    841a:	2101      	movs	r1, #1
	buf = bt_l2cap_create_pdu(NULL, 0);
    841c:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    841e:	3008      	adds	r0, #8
    8420:	f010 ffc0 	bl	193a4 <net_buf_simple_add>
	hdr->code = op;
    8424:	7005      	strb	r5, [r0, #0]
	return buf;
    8426:	e7f1      	b.n	840c <bt_att_create_pdu+0x30>
		return NULL;
    8428:	4604      	mov	r4, r0
    842a:	e7ef      	b.n	840c <bt_att_create_pdu+0x30>
    842c:	00023dae 	.word	0x00023dae
    8430:	00024006 	.word	0x00024006
    8434:	00024a86 	.word	0x00024a86
    8438:	000272d8 	.word	0x000272d8
    843c:	00024bff 	.word	0x00024bff

00008440 <att_indicate>:
{
    8440:	b510      	push	{r4, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    8442:	6804      	ldr	r4, [r0, #0]
	handle = net_buf_pull_le16(buf);
    8444:	f101 0008 	add.w	r0, r1, #8
    8448:	f011 f80c 	bl	19464 <net_buf_simple_pull_le16>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_CONFIRM, 0);
    844c:	2200      	movs	r2, #0
    844e:	211e      	movs	r1, #30
    8450:	4620      	mov	r0, r4
    8452:	f7ff ffc3 	bl	83dc <bt_att_create_pdu>
	if (!buf) {
    8456:	4602      	mov	r2, r0
    8458:	b120      	cbz	r0, 8464 <att_indicate+0x24>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cfm_sent);
    845a:	4b03      	ldr	r3, [pc, #12]	; (8468 <att_indicate+0x28>)
    845c:	2104      	movs	r1, #4
    845e:	4620      	mov	r0, r4
    8460:	f7fe fc02 	bl	6c68 <bt_l2cap_send_cb>
}
    8464:	2000      	movs	r0, #0
    8466:	bd10      	pop	{r4, pc}
    8468:	0000822b 	.word	0x0000822b

0000846c <att_mtu_req>:
{
    846c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	mtu_client = sys_le16_to_cpu(req->mtu);
    8470:	688b      	ldr	r3, [r1, #8]
    8472:	881d      	ldrh	r5, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    8474:	2d16      	cmp	r5, #22
{
    8476:	4606      	mov	r6, r0
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    8478:	d920      	bls.n	84bc <att_mtu_req+0x50>
	struct bt_conn *conn = att->chan.chan.conn;
    847a:	f8d0 8000 	ldr.w	r8, [r0]
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
    847e:	2202      	movs	r2, #2
    8480:	2103      	movs	r1, #3
    8482:	4640      	mov	r0, r8
    8484:	f7ff ffaa 	bl	83dc <bt_att_create_pdu>
	if (!pdu) {
    8488:	4607      	mov	r7, r0
    848a:	b1d0      	cbz	r0, 84c2 <att_mtu_req+0x56>
	rsp = net_buf_add(pdu, sizeof(*rsp));
    848c:	2102      	movs	r1, #2
    848e:	3008      	adds	r0, #8
    8490:	f010 ff88 	bl	193a4 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    8494:	2400      	movs	r4, #0
    8496:	2341      	movs	r3, #65	; 0x41
    8498:	7003      	strb	r3, [r0, #0]
    849a:	7044      	strb	r4, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, pdu, att_rsp_sent);
    849c:	4b0a      	ldr	r3, [pc, #40]	; (84c8 <att_mtu_req+0x5c>)
    849e:	4640      	mov	r0, r8
    84a0:	463a      	mov	r2, r7
    84a2:	2104      	movs	r1, #4
    84a4:	f7fe fbe0 	bl	6c68 <bt_l2cap_send_cb>
	att->chan.rx.mtu = min(mtu_client, mtu_server);
    84a8:	2d41      	cmp	r5, #65	; 0x41
    84aa:	bf28      	it	cs
    84ac:	2541      	movcs	r5, #65	; 0x41
    84ae:	f8a6 5042 	strh.w	r5, [r6, #66]	; 0x42
	att->chan.tx.mtu = att->chan.rx.mtu;
    84b2:	f8a6 5062 	strh.w	r5, [r6, #98]	; 0x62
	return 0;
    84b6:	4620      	mov	r0, r4
    84b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_INVALID_PDU;
    84bc:	2004      	movs	r0, #4
    84be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_UNLIKELY;
    84c2:	200e      	movs	r0, #14
}
    84c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    84c8:	00008259 	.word	0x00008259

000084cc <send_err_rsp.part.8>:
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    84cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    84d0:	4688      	mov	r8, r1
    84d2:	4617      	mov	r7, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    84d4:	2101      	movs	r1, #1
    84d6:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    84d8:	4605      	mov	r5, r0
    84da:	461e      	mov	r6, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    84dc:	f7ff ff7e 	bl	83dc <bt_att_create_pdu>
	if (!buf) {
    84e0:	4604      	mov	r4, r0
    84e2:	b180      	cbz	r0, 8506 <send_err_rsp.part.8+0x3a>
	rsp = net_buf_add(buf, sizeof(*rsp));
    84e4:	2104      	movs	r1, #4
    84e6:	3008      	adds	r0, #8
    84e8:	f010 ff5c 	bl	193a4 <net_buf_simple_add>
	rsp->request = req;
    84ec:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
    84f0:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
    84f2:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    84f6:	4622      	mov	r2, r4
    84f8:	4628      	mov	r0, r5
    84fa:	4b04      	ldr	r3, [pc, #16]	; (850c <send_err_rsp.part.8+0x40>)
    84fc:	2104      	movs	r1, #4
}
    84fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    8502:	f7fe bbb1 	b.w	6c68 <bt_l2cap_send_cb>
    8506:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    850a:	bf00      	nop
    850c:	00008259 	.word	0x00008259

00008510 <bt_att_recv>:
{
    8510:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    8512:	898b      	ldrh	r3, [r1, #12]
{
    8514:	b085      	sub	sp, #20
    8516:	4604      	mov	r4, r0
    8518:	460f      	mov	r7, r1
	if (buf->len < sizeof(*hdr)) {
    851a:	b953      	cbnz	r3, 8532 <bt_att_recv+0x22>
		BT_ERR("Too small ATT PDU received");
    851c:	4b4b      	ldr	r3, [pc, #300]	; (864c <bt_att_recv+0x13c>)
    851e:	9301      	str	r3, [sp, #4]
    8520:	9300      	str	r3, [sp, #0]
    8522:	4a4b      	ldr	r2, [pc, #300]	; (8650 <bt_att_recv+0x140>)
    8524:	4b4b      	ldr	r3, [pc, #300]	; (8654 <bt_att_recv+0x144>)
    8526:	494c      	ldr	r1, [pc, #304]	; (8658 <bt_att_recv+0x148>)
    8528:	484c      	ldr	r0, [pc, #304]	; (865c <bt_att_recv+0x14c>)
			BT_WARN("Ignoring unexpected request");
    852a:	f7f9 feb3 	bl	2294 <printk>
}
    852e:	b005      	add	sp, #20
    8530:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct bt_att_hdr *hdr = (void *)buf->data;
    8532:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    8534:	2101      	movs	r1, #1
	struct bt_att_hdr *hdr = (void *)buf->data;
    8536:	f850 5f08 	ldr.w	r5, [r0, #8]!
	net_buf_pull(buf, sizeof(*hdr));
    853a:	f010 ff83 	bl	19444 <net_buf_simple_pull>
		if (hdr->code == handlers[i].op) {
    853e:	4a48      	ldr	r2, [pc, #288]	; (8660 <bt_att_recv+0x150>)
    8540:	7828      	ldrb	r0, [r5, #0]
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    8542:	2300      	movs	r3, #0
    8544:	4611      	mov	r1, r2
		if (hdr->code == handlers[i].op) {
    8546:	f812 6033 	ldrb.w	r6, [r2, r3, lsl #3]
    854a:	4286      	cmp	r6, r0
    854c:	ea4f 0ec3 	mov.w	lr, r3, lsl #3
    8550:	d11c      	bne.n	858c <bt_att_recv+0x7c>
		if (handler->type == ATT_REQUEST &&
    8552:	4472      	add	r2, lr
    8554:	7896      	ldrb	r6, [r2, #2]
    8556:	2e01      	cmp	r6, #1
    8558:	d136      	bne.n	85c8 <bt_att_recv+0xb8>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    855a:	f3bf 8f5b 	dmb	ish
    855e:	f104 029c 	add.w	r2, r4, #156	; 0x9c
    8562:	e852 3f00 	ldrex	r3, [r2]
    8566:	f043 0001 	orr.w	r0, r3, #1
    856a:	e842 0c00 	strex	ip, r0, [r2]
    856e:	f1bc 0f00 	cmp.w	ip, #0
    8572:	d1f6      	bne.n	8562 <bt_att_recv+0x52>
    8574:	f3bf 8f5b 	dmb	ish
    8578:	07da      	lsls	r2, r3, #31
    857a:	d540      	bpl.n	85fe <bt_att_recv+0xee>
			BT_WARN("Ignoring unexpected request");
    857c:	4b33      	ldr	r3, [pc, #204]	; (864c <bt_att_recv+0x13c>)
    857e:	9301      	str	r3, [sp, #4]
    8580:	9300      	str	r3, [sp, #0]
    8582:	4a38      	ldr	r2, [pc, #224]	; (8664 <bt_att_recv+0x154>)
    8584:	4b33      	ldr	r3, [pc, #204]	; (8654 <bt_att_recv+0x144>)
    8586:	4934      	ldr	r1, [pc, #208]	; (8658 <bt_att_recv+0x148>)
    8588:	4837      	ldr	r0, [pc, #220]	; (8668 <bt_att_recv+0x158>)
    858a:	e7ce      	b.n	852a <bt_att_recv+0x1a>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    858c:	3301      	adds	r3, #1
    858e:	2b1b      	cmp	r3, #27
    8590:	d1d9      	bne.n	8546 <bt_att_recv+0x36>
		BT_WARN("Unknown ATT code 0x%02x", hdr->code);
    8592:	4b2e      	ldr	r3, [pc, #184]	; (864c <bt_att_recv+0x13c>)
    8594:	9302      	str	r3, [sp, #8]
    8596:	9001      	str	r0, [sp, #4]
    8598:	9300      	str	r3, [sp, #0]
    859a:	4a32      	ldr	r2, [pc, #200]	; (8664 <bt_att_recv+0x154>)
    859c:	4b2d      	ldr	r3, [pc, #180]	; (8654 <bt_att_recv+0x144>)
    859e:	492e      	ldr	r1, [pc, #184]	; (8658 <bt_att_recv+0x148>)
    85a0:	4832      	ldr	r0, [pc, #200]	; (866c <bt_att_recv+0x15c>)
    85a2:	f7f9 fe77 	bl	2294 <printk>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    85a6:	782d      	ldrb	r5, [r5, #0]
    85a8:	4628      	mov	r0, r5
    85aa:	f7ff fa1b 	bl	79e4 <att_op_get_type>
    85ae:	2800      	cmp	r0, #0
    85b0:	d0bd      	beq.n	852e <bt_att_recv+0x1e>
	if (!req) {
    85b2:	2d00      	cmp	r5, #0
    85b4:	d0bb      	beq.n	852e <bt_att_recv+0x1e>
    85b6:	2306      	movs	r3, #6
    85b8:	2200      	movs	r2, #0
    85ba:	4629      	mov	r1, r5
    85bc:	6820      	ldr	r0, [r4, #0]
}
    85be:	b005      	add	sp, #20
    85c0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    85c4:	f7ff bf82 	b.w	84cc <send_err_rsp.part.8>
		} else if (handler->type == ATT_INDICATION &&
    85c8:	2e05      	cmp	r6, #5
    85ca:	d118      	bne.n	85fe <bt_att_recv+0xee>
    85cc:	f3bf 8f5b 	dmb	ish
    85d0:	f104 029c 	add.w	r2, r4, #156	; 0x9c
    85d4:	e852 3f00 	ldrex	r3, [r2]
    85d8:	f043 0002 	orr.w	r0, r3, #2
    85dc:	e842 0c00 	strex	ip, r0, [r2]
    85e0:	f1bc 0f00 	cmp.w	ip, #0
    85e4:	d1f6      	bne.n	85d4 <bt_att_recv+0xc4>
    85e6:	f3bf 8f5b 	dmb	ish
    85ea:	079b      	lsls	r3, r3, #30
    85ec:	d507      	bpl.n	85fe <bt_att_recv+0xee>
			BT_WARN("Ignoring unexpected indication");
    85ee:	4b17      	ldr	r3, [pc, #92]	; (864c <bt_att_recv+0x13c>)
    85f0:	9301      	str	r3, [sp, #4]
    85f2:	9300      	str	r3, [sp, #0]
    85f4:	4a1b      	ldr	r2, [pc, #108]	; (8664 <bt_att_recv+0x154>)
    85f6:	4b17      	ldr	r3, [pc, #92]	; (8654 <bt_att_recv+0x144>)
    85f8:	4917      	ldr	r1, [pc, #92]	; (8658 <bt_att_recv+0x148>)
    85fa:	481d      	ldr	r0, [pc, #116]	; (8670 <bt_att_recv+0x160>)
    85fc:	e795      	b.n	852a <bt_att_recv+0x1a>
	if (buf->len < handler->expect_len) {
    85fe:	eb01 030e 	add.w	r3, r1, lr
    8602:	89ba      	ldrh	r2, [r7, #12]
    8604:	7859      	ldrb	r1, [r3, #1]
    8606:	4291      	cmp	r1, r2
    8608:	d90f      	bls.n	862a <bt_att_recv+0x11a>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    860a:	4b10      	ldr	r3, [pc, #64]	; (864c <bt_att_recv+0x13c>)
    860c:	9303      	str	r3, [sp, #12]
    860e:	7829      	ldrb	r1, [r5, #0]
    8610:	9102      	str	r1, [sp, #8]
    8612:	9201      	str	r2, [sp, #4]
    8614:	9300      	str	r3, [sp, #0]
    8616:	4a0e      	ldr	r2, [pc, #56]	; (8650 <bt_att_recv+0x140>)
    8618:	4b0e      	ldr	r3, [pc, #56]	; (8654 <bt_att_recv+0x144>)
    861a:	490f      	ldr	r1, [pc, #60]	; (8658 <bt_att_recv+0x148>)
    861c:	4815      	ldr	r0, [pc, #84]	; (8674 <bt_att_recv+0x164>)
    861e:	f7f9 fe39 	bl	2294 <printk>
	if (handler->type == ATT_REQUEST && err) {
    8622:	2e01      	cmp	r6, #1
    8624:	d183      	bne.n	852e <bt_att_recv+0x1e>
		err = BT_ATT_ERR_INVALID_PDU;
    8626:	2304      	movs	r3, #4
    8628:	e00a      	b.n	8640 <bt_att_recv+0x130>
		err = handler->func(att, buf);
    862a:	685b      	ldr	r3, [r3, #4]
    862c:	4639      	mov	r1, r7
    862e:	4620      	mov	r0, r4
    8630:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    8632:	2e01      	cmp	r6, #1
		err = handler->func(att, buf);
    8634:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    8636:	f47f af7a 	bne.w	852e <bt_att_recv+0x1e>
    863a:	2800      	cmp	r0, #0
    863c:	f43f af77 	beq.w	852e <bt_att_recv+0x1e>
		send_err_rsp(chan->conn, hdr->code, 0, err);
    8640:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
    8642:	2900      	cmp	r1, #0
    8644:	f43f af73 	beq.w	852e <bt_att_recv+0x1e>
    8648:	2200      	movs	r2, #0
    864a:	e7b7      	b.n	85bc <bt_att_recv+0xac>
    864c:	00023dae 	.word	0x00023dae
    8650:	00022d76 	.word	0x00022d76
    8654:	00024a6d 	.word	0x00024a6d
    8658:	000272d8 	.word	0x000272d8
    865c:	00024c34 	.word	0x00024c34
    8660:	00024d14 	.word	0x00024d14
    8664:	00024006 	.word	0x00024006
    8668:	00024c5f 	.word	0x00024c5f
    866c:	00024ce9 	.word	0x00024ce9
    8670:	00024c8b 	.word	0x00024c8b
    8674:	00024cba 	.word	0x00024cba

00008678 <att_read_group_req>:
{
    8678:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    867c:	898b      	ldrh	r3, [r1, #12]
    867e:	2b06      	cmp	r3, #6
{
    8680:	b08d      	sub	sp, #52	; 0x34
    8682:	4680      	mov	r8, r0
    8684:	460c      	mov	r4, r1
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    8686:	d001      	beq.n	868c <att_read_group_req+0x14>
    8688:	2b14      	cmp	r3, #20
    868a:	d168      	bne.n	875e <att_read_group_req+0xe6>
	req = (void *)buf->data;
    868c:	4620      	mov	r0, r4
	net_buf_pull(buf, sizeof(*req));
    868e:	2104      	movs	r1, #4
	req = (void *)buf->data;
    8690:	f850 3f08 	ldr.w	r3, [r0, #8]!
	struct bt_conn *conn = att->chan.chan.conn;
    8694:	f8d8 9000 	ldr.w	r9, [r8]
	start_handle = sys_le16_to_cpu(req->start_handle);
    8698:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    869a:	885e      	ldrh	r6, [r3, #2]
	if (!uuid_create(&u.uuid, buf)) {
    869c:	af02      	add	r7, sp, #8
	net_buf_pull(buf, sizeof(*req));
    869e:	f010 fed1 	bl	19444 <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
    86a2:	4621      	mov	r1, r4
    86a4:	4638      	mov	r0, r7
    86a6:	f7ff fb87 	bl	7db8 <uuid_create>
    86aa:	2800      	cmp	r0, #0
    86ac:	d059      	beq.n	8762 <att_read_group_req+0xea>
	if (!start || !end) {
    86ae:	2d00      	cmp	r5, #0
    86b0:	d05a      	beq.n	8768 <att_read_group_req+0xf0>
    86b2:	2400      	movs	r4, #0
    86b4:	2e00      	cmp	r6, #0
    86b6:	d056      	beq.n	8766 <att_read_group_req+0xee>
	if (start > end) {
    86b8:	42b5      	cmp	r5, r6
    86ba:	d855      	bhi.n	8768 <att_read_group_req+0xf0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    86bc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    86c0:	4669      	mov	r1, sp
    86c2:	4638      	mov	r0, r7
    86c4:	f88d 4000 	strb.w	r4, [sp]
    86c8:	f8ad 3002 	strh.w	r3, [sp, #2]
    86cc:	f7fa fef2 	bl	34b4 <bt_uuid_cmp>
    86d0:	bb38      	cbnz	r0, 8722 <att_read_group_req+0xaa>
	struct bt_conn *conn = att->chan.chan.conn;
    86d2:	f8d8 9000 	ldr.w	r9, [r8]
	memset(&data, 0, sizeof(data));
    86d6:	2214      	movs	r2, #20
    86d8:	2100      	movs	r1, #0
    86da:	a807      	add	r0, sp, #28
    86dc:	f7f8 f885 	bl	7ea <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    86e0:	2201      	movs	r2, #1
    86e2:	2111      	movs	r1, #17
    86e4:	4648      	mov	r0, r9
    86e6:	f7ff fe79 	bl	83dc <bt_att_create_pdu>
    86ea:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    86ec:	2800      	cmp	r0, #0
    86ee:	d038      	beq.n	8762 <att_read_group_req+0xea>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    86f0:	2101      	movs	r1, #1
    86f2:	3008      	adds	r0, #8
	data.uuid = uuid;
    86f4:	9708      	str	r7, [sp, #32]
	data.att = att;
    86f6:	f8cd 801c 	str.w	r8, [sp, #28]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    86fa:	f010 fe53 	bl	193a4 <net_buf_simple_add>
	data.rsp->len = 0;
    86fe:	2700      	movs	r7, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    8700:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    8702:	ab07      	add	r3, sp, #28
	data.rsp->len = 0;
    8704:	7007      	strb	r7, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    8706:	4a1c      	ldr	r2, [pc, #112]	; (8778 <att_read_group_req+0x100>)
	data.group = NULL;
    8708:	970b      	str	r7, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    870a:	4631      	mov	r1, r6
    870c:	4628      	mov	r0, r5
    870e:	f000 fea1 	bl	9454 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    8712:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8714:	781c      	ldrb	r4, [r3, #0]
    8716:	b9d4      	cbnz	r4, 874e <att_read_group_req+0xd6>
		net_buf_unref(data.buf);
    8718:	9809      	ldr	r0, [sp, #36]	; 0x24
    871a:	f010 fde5 	bl	192e8 <net_buf_unref>
    871e:	230a      	movs	r3, #10
    8720:	e00c      	b.n	873c <att_read_group_req+0xc4>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    8722:	f642 0301 	movw	r3, #10241	; 0x2801
    8726:	a901      	add	r1, sp, #4
    8728:	4638      	mov	r0, r7
    872a:	f88d 4004 	strb.w	r4, [sp, #4]
    872e:	f8ad 3006 	strh.w	r3, [sp, #6]
    8732:	f7fa febf 	bl	34b4 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    8736:	2800      	cmp	r0, #0
    8738:	d0cb      	beq.n	86d2 <att_read_group_req+0x5a>
    873a:	2310      	movs	r3, #16
    873c:	462a      	mov	r2, r5
    873e:	2110      	movs	r1, #16
    8740:	4648      	mov	r0, r9
    8742:	f7ff fec3 	bl	84cc <send_err_rsp.part.8>
}
    8746:	4620      	mov	r0, r4
    8748:	b00d      	add	sp, #52	; 0x34
    874a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    874e:	4b0b      	ldr	r3, [pc, #44]	; (877c <att_read_group_req+0x104>)
    8750:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8752:	2104      	movs	r1, #4
    8754:	4648      	mov	r0, r9
    8756:	f7fe fa87 	bl	6c68 <bt_l2cap_send_cb>
		return 0;
    875a:	2400      	movs	r4, #0
    875c:	e7f3      	b.n	8746 <att_read_group_req+0xce>
		return BT_ATT_ERR_INVALID_PDU;
    875e:	2404      	movs	r4, #4
    8760:	e7f1      	b.n	8746 <att_read_group_req+0xce>
		return BT_ATT_ERR_UNLIKELY;
    8762:	240e      	movs	r4, #14
    8764:	e7ef      	b.n	8746 <att_read_group_req+0xce>
			*err = 0;
    8766:	4635      	mov	r5, r6
    8768:	2301      	movs	r3, #1
    876a:	462a      	mov	r2, r5
    876c:	2110      	movs	r1, #16
    876e:	4648      	mov	r0, r9
    8770:	f7ff feac 	bl	84cc <send_err_rsp.part.8>
    8774:	e7f1      	b.n	875a <att_read_group_req+0xe2>
    8776:	bf00      	nop
    8778:	00007a45 	.word	0x00007a45
    877c:	00008259 	.word	0x00008259

00008780 <att_read_mult_req>:
{
    8780:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    8784:	6804      	ldr	r4, [r0, #0]
{
    8786:	b087      	sub	sp, #28
	memset(&data, 0, sizeof(data));
    8788:	2214      	movs	r2, #20
{
    878a:	4606      	mov	r6, r0
    878c:	460d      	mov	r5, r1
	memset(&data, 0, sizeof(data));
    878e:	a801      	add	r0, sp, #4
    8790:	2100      	movs	r1, #0
    8792:	f7f8 f82a 	bl	7ea <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    8796:	2200      	movs	r2, #0
    8798:	210f      	movs	r1, #15
    879a:	4620      	mov	r0, r4
    879c:	f7ff fe1e 	bl	83dc <bt_att_create_pdu>
    87a0:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    87a2:	b368      	cbz	r0, 8800 <att_read_mult_req+0x80>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    87a4:	f8df 9060 	ldr.w	r9, [pc, #96]	; 8808 <att_read_mult_req+0x88>
	data.att = att;
    87a8:	9601      	str	r6, [sp, #4]
		handle = net_buf_pull_le16(buf);
    87aa:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    87ae:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(u16_t)) {
    87b2:	89ab      	ldrh	r3, [r5, #12]
    87b4:	2b01      	cmp	r3, #1
    87b6:	d806      	bhi.n	87c6 <att_read_mult_req+0x46>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    87b8:	4b12      	ldr	r3, [pc, #72]	; (8804 <att_read_mult_req+0x84>)
    87ba:	9a03      	ldr	r2, [sp, #12]
    87bc:	2104      	movs	r1, #4
    87be:	4620      	mov	r0, r4
    87c0:	f7fe fa52 	bl	6c68 <bt_l2cap_send_cb>
    87c4:	e018      	b.n	87f8 <att_read_mult_req+0x78>
		handle = net_buf_pull_le16(buf);
    87c6:	4638      	mov	r0, r7
    87c8:	f010 fe4c 	bl	19464 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    87cc:	ab01      	add	r3, sp, #4
    87ce:	464a      	mov	r2, r9
    87d0:	4601      	mov	r1, r0
		handle = net_buf_pull_le16(buf);
    87d2:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    87d4:	f88d 8014 	strb.w	r8, [sp, #20]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    87d8:	f000 fe3c 	bl	9454 <bt_gatt_foreach_attr>
		if (data.err) {
    87dc:	f89d 3014 	ldrb.w	r3, [sp, #20]
    87e0:	2b00      	cmp	r3, #0
    87e2:	d0e6      	beq.n	87b2 <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
    87e4:	9803      	ldr	r0, [sp, #12]
    87e6:	f010 fd7f 	bl	192e8 <net_buf_unref>
    87ea:	f89d 3014 	ldrb.w	r3, [sp, #20]
    87ee:	4632      	mov	r2, r6
    87f0:	210e      	movs	r1, #14
    87f2:	4620      	mov	r0, r4
    87f4:	f7ff fe6a 	bl	84cc <send_err_rsp.part.8>
	return 0;
    87f8:	2000      	movs	r0, #0
}
    87fa:	b007      	add	sp, #28
    87fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
    8800:	200e      	movs	r0, #14
    8802:	e7fa      	b.n	87fa <att_read_mult_req+0x7a>
    8804:	00008259 	.word	0x00008259
    8808:	00008363 	.word	0x00008363

0000880c <att_read_rsp>:
{
    880c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8810:	4607      	mov	r7, r0
    8812:	b086      	sub	sp, #24
    8814:	460c      	mov	r4, r1
    8816:	4690      	mov	r8, r2
	if (!handle) {
    8818:	461d      	mov	r5, r3
    881a:	b3a3      	cbz	r3, 8886 <att_read_rsp+0x7a>
	struct bt_conn *conn = att->chan.chan.conn;
    881c:	6806      	ldr	r6, [r0, #0]
	memset(&data, 0, sizeof(data));
    881e:	2214      	movs	r2, #20
    8820:	2100      	movs	r1, #0
    8822:	a801      	add	r0, sp, #4
    8824:	f7f7 ffe1 	bl	7ea <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    8828:	2200      	movs	r2, #0
    882a:	4641      	mov	r1, r8
    882c:	4630      	mov	r0, r6
    882e:	f7ff fdd5 	bl	83dc <bt_att_create_pdu>
    8832:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    8834:	b348      	cbz	r0, 888a <att_read_rsp+0x7e>
	data.offset = offset;
    8836:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    883a:	f8ad 3008 	strh.w	r3, [sp, #8]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    883e:	2301      	movs	r3, #1
    8840:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    8844:	4a12      	ldr	r2, [pc, #72]	; (8890 <att_read_rsp+0x84>)
	data.att = att;
    8846:	9701      	str	r7, [sp, #4]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    8848:	ab01      	add	r3, sp, #4
    884a:	4629      	mov	r1, r5
    884c:	4628      	mov	r0, r5
    884e:	f000 fe01 	bl	9454 <bt_gatt_foreach_attr>
	if (data.err) {
    8852:	f89d 7014 	ldrb.w	r7, [sp, #20]
    8856:	b17f      	cbz	r7, 8878 <att_read_rsp+0x6c>
		net_buf_unref(data.buf);
    8858:	9803      	ldr	r0, [sp, #12]
    885a:	f010 fd45 	bl	192e8 <net_buf_unref>
	if (!req) {
    885e:	b13c      	cbz	r4, 8870 <att_read_rsp+0x64>
    8860:	f89d 3014 	ldrb.w	r3, [sp, #20]
    8864:	462a      	mov	r2, r5
    8866:	4621      	mov	r1, r4
    8868:	4630      	mov	r0, r6
    886a:	f7ff fe2f 	bl	84cc <send_err_rsp.part.8>
		return 0;
    886e:	2400      	movs	r4, #0
}
    8870:	4620      	mov	r0, r4
    8872:	b006      	add	sp, #24
    8874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    8878:	4b06      	ldr	r3, [pc, #24]	; (8894 <att_read_rsp+0x88>)
    887a:	9a03      	ldr	r2, [sp, #12]
    887c:	2104      	movs	r1, #4
    887e:	4630      	mov	r0, r6
    8880:	f7fe f9f2 	bl	6c68 <bt_l2cap_send_cb>
    8884:	e7f3      	b.n	886e <att_read_rsp+0x62>
		return BT_ATT_ERR_INVALID_HANDLE;
    8886:	2401      	movs	r4, #1
    8888:	e7f2      	b.n	8870 <att_read_rsp+0x64>
		return BT_ATT_ERR_UNLIKELY;
    888a:	240e      	movs	r4, #14
    888c:	e7f0      	b.n	8870 <att_read_rsp+0x64>
    888e:	bf00      	nop
    8890:	00008363 	.word	0x00008363
    8894:	00008259 	.word	0x00008259

00008898 <att_read_blob_req>:
{
    8898:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
    889a:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_BLOB_REQ,
    889c:	8813      	ldrh	r3, [r2, #0]
    889e:	8852      	ldrh	r2, [r2, #2]
    88a0:	9200      	str	r2, [sp, #0]
    88a2:	210c      	movs	r1, #12
    88a4:	220d      	movs	r2, #13
    88a6:	f7ff ffb1 	bl	880c <att_read_rsp>
}
    88aa:	b003      	add	sp, #12
    88ac:	f85d fb04 	ldr.w	pc, [sp], #4

000088b0 <att_read_req>:
{
    88b0:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
    88b2:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
    88b4:	2200      	movs	r2, #0
    88b6:	881b      	ldrh	r3, [r3, #0]
    88b8:	9200      	str	r2, [sp, #0]
    88ba:	210a      	movs	r1, #10
    88bc:	220b      	movs	r2, #11
    88be:	f7ff ffa5 	bl	880c <att_read_rsp>
}
    88c2:	b003      	add	sp, #12
    88c4:	f85d fb04 	ldr.w	pc, [sp], #4

000088c8 <att_read_type_req>:
{
    88c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    88cc:	898b      	ldrh	r3, [r1, #12]
    88ce:	2b06      	cmp	r3, #6
{
    88d0:	b08d      	sub	sp, #52	; 0x34
    88d2:	4607      	mov	r7, r0
    88d4:	460e      	mov	r6, r1
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    88d6:	d001      	beq.n	88dc <att_read_type_req+0x14>
    88d8:	2b14      	cmp	r3, #20
    88da:	d152      	bne.n	8982 <att_read_type_req+0xba>
	req = (void *)buf->data;
    88dc:	4630      	mov	r0, r6
	net_buf_pull(buf, sizeof(*req));
    88de:	2104      	movs	r1, #4
	req = (void *)buf->data;
    88e0:	f850 3f08 	ldr.w	r3, [r0, #8]!
	struct bt_conn *conn = att->chan.chan.conn;
    88e4:	f8d7 9000 	ldr.w	r9, [r7]
	start_handle = sys_le16_to_cpu(req->start_handle);
    88e8:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    88ea:	885c      	ldrh	r4, [r3, #2]
	if (!uuid_create(&u.uuid, buf)) {
    88ec:	f10d 0804 	add.w	r8, sp, #4
	net_buf_pull(buf, sizeof(*req));
    88f0:	f010 fda8 	bl	19444 <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
    88f4:	4631      	mov	r1, r6
    88f6:	4640      	mov	r0, r8
    88f8:	f7ff fa5e 	bl	7db8 <uuid_create>
    88fc:	b198      	cbz	r0, 8926 <att_read_type_req+0x5e>
	if (!start || !end) {
    88fe:	2d00      	cmp	r5, #0
    8900:	d042      	beq.n	8988 <att_read_type_req+0xc0>
    8902:	2c00      	cmp	r4, #0
    8904:	d03f      	beq.n	8986 <att_read_type_req+0xbe>
	if (start > end) {
    8906:	42a5      	cmp	r5, r4
    8908:	d83e      	bhi.n	8988 <att_read_type_req+0xc0>
	memset(&data, 0, sizeof(data));
    890a:	2218      	movs	r2, #24
	struct bt_conn *conn = att->chan.chan.conn;
    890c:	683e      	ldr	r6, [r7, #0]
	memset(&data, 0, sizeof(data));
    890e:	2100      	movs	r1, #0
    8910:	eb0d 0002 	add.w	r0, sp, r2
    8914:	f7f7 ff69 	bl	7ea <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    8918:	2201      	movs	r2, #1
    891a:	2109      	movs	r1, #9
    891c:	4630      	mov	r0, r6
    891e:	f7ff fd5d 	bl	83dc <bt_att_create_pdu>
    8922:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
    8924:	b908      	cbnz	r0, 892a <att_read_type_req+0x62>
		return BT_ATT_ERR_UNLIKELY;
    8926:	240e      	movs	r4, #14
    8928:	e027      	b.n	897a <att_read_type_req+0xb2>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    892a:	2101      	movs	r1, #1
    892c:	3008      	adds	r0, #8
	data.att = att;
    892e:	9706      	str	r7, [sp, #24]
	data.uuid = uuid;
    8930:	f8cd 801c 	str.w	r8, [sp, #28]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    8934:	f010 fd36 	bl	193a4 <net_buf_simple_add>
	data.rsp->len = 0;
    8938:	2700      	movs	r7, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    893a:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    893c:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    893e:	4621      	mov	r1, r4
	data.rsp->len = 0;
    8940:	7007      	strb	r7, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    8942:	4a14      	ldr	r2, [pc, #80]	; (8994 <att_read_type_req+0xcc>)
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    8944:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    8948:	4628      	mov	r0, r5
    894a:	ab06      	add	r3, sp, #24
    894c:	f000 fd82 	bl	9454 <bt_gatt_foreach_attr>
	if (data.err) {
    8950:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
    8954:	b15c      	cbz	r4, 896e <att_read_type_req+0xa6>
		net_buf_unref(data.buf);
    8956:	9808      	ldr	r0, [sp, #32]
    8958:	f010 fcc6 	bl	192e8 <net_buf_unref>
    895c:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    8960:	462a      	mov	r2, r5
    8962:	2108      	movs	r1, #8
    8964:	4630      	mov	r0, r6
    8966:	f7ff fdb1 	bl	84cc <send_err_rsp.part.8>
		return 0;
    896a:	2400      	movs	r4, #0
    896c:	e005      	b.n	897a <att_read_type_req+0xb2>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    896e:	4b0a      	ldr	r3, [pc, #40]	; (8998 <att_read_type_req+0xd0>)
    8970:	9a08      	ldr	r2, [sp, #32]
    8972:	2104      	movs	r1, #4
    8974:	4630      	mov	r0, r6
    8976:	f7fe f977 	bl	6c68 <bt_l2cap_send_cb>
}
    897a:	4620      	mov	r0, r4
    897c:	b00d      	add	sp, #52	; 0x34
    897e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_INVALID_PDU;
    8982:	2404      	movs	r4, #4
    8984:	e7f9      	b.n	897a <att_read_type_req+0xb2>
			*err = 0;
    8986:	4625      	mov	r5, r4
    8988:	2301      	movs	r3, #1
    898a:	462a      	mov	r2, r5
    898c:	2108      	movs	r1, #8
    898e:	4648      	mov	r0, r9
    8990:	e7e9      	b.n	8966 <att_read_type_req+0x9e>
    8992:	bf00      	nop
    8994:	00007cd7 	.word	0x00007cd7
    8998:	00008259 	.word	0x00008259

0000899c <att_find_type_req>:
{
    899c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    89a0:	f8d0 9000 	ldr.w	r9, [r0]
{
    89a4:	4680      	mov	r8, r0
	req = (void *)buf->data;
    89a6:	4608      	mov	r0, r1
{
    89a8:	b089      	sub	sp, #36	; 0x24
	req = (void *)buf->data;
    89aa:	f850 3f08 	ldr.w	r3, [r0, #8]!
{
    89ae:	468b      	mov	fp, r1
	value = net_buf_pull(buf, sizeof(*req));
    89b0:	2106      	movs	r1, #6
	start_handle = sys_le16_to_cpu(req->start_handle);
    89b2:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    89b4:	885f      	ldrh	r7, [r3, #2]
	type = sys_le16_to_cpu(req->type);
    89b6:	889e      	ldrh	r6, [r3, #4]
	value = net_buf_pull(buf, sizeof(*req));
    89b8:	f010 fd44 	bl	19444 <net_buf_simple_pull>
    89bc:	4682      	mov	sl, r0
	if (!start || !end) {
    89be:	2d00      	cmp	r5, #0
    89c0:	d057      	beq.n	8a72 <att_find_type_req+0xd6>
    89c2:	2400      	movs	r4, #0
    89c4:	2f00      	cmp	r7, #0
    89c6:	d053      	beq.n	8a70 <att_find_type_req+0xd4>
	if (start > end) {
    89c8:	42bd      	cmp	r5, r7
    89ca:	d852      	bhi.n	8a72 <att_find_type_req+0xd6>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    89cc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    89d0:	a902      	add	r1, sp, #8
    89d2:	a801      	add	r0, sp, #4
    89d4:	f8ad 6006 	strh.w	r6, [sp, #6]
    89d8:	f88d 4004 	strb.w	r4, [sp, #4]
    89dc:	f88d 4008 	strb.w	r4, [sp, #8]
    89e0:	f8ad 300a 	strh.w	r3, [sp, #10]
    89e4:	f7fa fd66 	bl	34b4 <bt_uuid_cmp>
    89e8:	4606      	mov	r6, r0
    89ea:	b148      	cbz	r0, 8a00 <att_find_type_req+0x64>
    89ec:	230a      	movs	r3, #10
    89ee:	462a      	mov	r2, r5
    89f0:	2106      	movs	r1, #6
    89f2:	4648      	mov	r0, r9
    89f4:	f7ff fd6a 	bl	84cc <send_err_rsp.part.8>
}
    89f8:	4620      	mov	r0, r4
    89fa:	b009      	add	sp, #36	; 0x24
    89fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct bt_conn *conn = att->chan.chan.conn;
    8a00:	f8d8 9000 	ldr.w	r9, [r8]
				 buf->len);
    8a04:	f8bb 400c 	ldrh.w	r4, [fp, #12]
	memset(&data, 0, sizeof(data));
    8a08:	2214      	movs	r2, #20
    8a0a:	4631      	mov	r1, r6
    8a0c:	a803      	add	r0, sp, #12
    8a0e:	f7f7 feec 	bl	7ea <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    8a12:	4632      	mov	r2, r6
    8a14:	2107      	movs	r1, #7
    8a16:	4648      	mov	r0, r9
    8a18:	f7ff fce0 	bl	83dc <bt_att_create_pdu>
    8a1c:	9004      	str	r0, [sp, #16]
	if (!data.buf) {
    8a1e:	b328      	cbz	r0, 8a6c <att_find_type_req+0xd0>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    8a20:	230a      	movs	r3, #10
    8a22:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    8a26:	4a14      	ldr	r2, [pc, #80]	; (8a78 <att_find_type_req+0xdc>)
	return att_find_type_rsp(att, start_handle, end_handle, value,
    8a28:	f88d 401c 	strb.w	r4, [sp, #28]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    8a2c:	ab03      	add	r3, sp, #12
    8a2e:	4639      	mov	r1, r7
    8a30:	4628      	mov	r0, r5
	data.att = att;
    8a32:	f8cd 800c 	str.w	r8, [sp, #12]
	data.group = NULL;
    8a36:	9605      	str	r6, [sp, #20]
	data.value = value;
    8a38:	f8cd a018 	str.w	sl, [sp, #24]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    8a3c:	f000 fd0a 	bl	9454 <bt_gatt_foreach_attr>
	if (data.err) {
    8a40:	f89d 401d 	ldrb.w	r4, [sp, #29]
    8a44:	b15c      	cbz	r4, 8a5e <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
    8a46:	9804      	ldr	r0, [sp, #16]
    8a48:	f010 fc4e 	bl	192e8 <net_buf_unref>
    8a4c:	f89d 301d 	ldrb.w	r3, [sp, #29]
    8a50:	462a      	mov	r2, r5
    8a52:	2106      	movs	r1, #6
    8a54:	4648      	mov	r0, r9
    8a56:	f7ff fd39 	bl	84cc <send_err_rsp.part.8>
		return 0;
    8a5a:	2400      	movs	r4, #0
    8a5c:	e7cc      	b.n	89f8 <att_find_type_req+0x5c>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    8a5e:	4b07      	ldr	r3, [pc, #28]	; (8a7c <att_find_type_req+0xe0>)
    8a60:	9a04      	ldr	r2, [sp, #16]
    8a62:	2104      	movs	r1, #4
    8a64:	4648      	mov	r0, r9
    8a66:	f7fe f8ff 	bl	6c68 <bt_l2cap_send_cb>
    8a6a:	e7c5      	b.n	89f8 <att_find_type_req+0x5c>
		return BT_ATT_ERR_UNLIKELY;
    8a6c:	240e      	movs	r4, #14
	return att_find_type_rsp(att, start_handle, end_handle, value,
    8a6e:	e7c3      	b.n	89f8 <att_find_type_req+0x5c>
			*err = 0;
    8a70:	463d      	mov	r5, r7
    8a72:	2301      	movs	r3, #1
    8a74:	e7ec      	b.n	8a50 <att_find_type_req+0xb4>
    8a76:	bf00      	nop
    8a78:	00007bad 	.word	0x00007bad
    8a7c:	00008259 	.word	0x00008259

00008a80 <att_find_info_req>:
{
    8a80:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    8a82:	688b      	ldr	r3, [r1, #8]
	struct bt_conn *conn = att->chan.chan.conn;
    8a84:	6806      	ldr	r6, [r0, #0]
	start_handle = sys_le16_to_cpu(req->start_handle);
    8a86:	881d      	ldrh	r5, [r3, #0]
{
    8a88:	b085      	sub	sp, #20
    8a8a:	4607      	mov	r7, r0
	if (!start || !end) {
    8a8c:	b375      	cbz	r5, 8aec <att_find_info_req+0x6c>
	end_handle = sys_le16_to_cpu(req->end_handle);
    8a8e:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    8a90:	b35c      	cbz	r4, 8aea <att_find_info_req+0x6a>
	if (start > end) {
    8a92:	42a5      	cmp	r5, r4
    8a94:	d82a      	bhi.n	8aec <att_find_info_req+0x6c>
	memset(&data, 0, sizeof(data));
    8a96:	2210      	movs	r2, #16
    8a98:	2100      	movs	r1, #0
    8a9a:	4668      	mov	r0, sp
    8a9c:	f7f7 fea5 	bl	7ea <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    8aa0:	2200      	movs	r2, #0
    8aa2:	2105      	movs	r1, #5
    8aa4:	4630      	mov	r0, r6
    8aa6:	f7ff fc99 	bl	83dc <bt_att_create_pdu>
    8aaa:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    8aac:	b910      	cbnz	r0, 8ab4 <att_find_info_req+0x34>
		return BT_ATT_ERR_UNLIKELY;
    8aae:	200e      	movs	r0, #14
}
    8ab0:	b005      	add	sp, #20
    8ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    8ab4:	4621      	mov	r1, r4
    8ab6:	466b      	mov	r3, sp
    8ab8:	4a0d      	ldr	r2, [pc, #52]	; (8af0 <att_find_info_req+0x70>)
	data.att = att;
    8aba:	9700      	str	r7, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    8abc:	4628      	mov	r0, r5
    8abe:	f000 fcc9 	bl	9454 <bt_gatt_foreach_attr>
	if (!data.rsp) {
    8ac2:	9c02      	ldr	r4, [sp, #8]
    8ac4:	b94c      	cbnz	r4, 8ada <att_find_info_req+0x5a>
		net_buf_unref(data.buf);
    8ac6:	9801      	ldr	r0, [sp, #4]
    8ac8:	f010 fc0e 	bl	192e8 <net_buf_unref>
    8acc:	230a      	movs	r3, #10
    8ace:	462a      	mov	r2, r5
    8ad0:	2104      	movs	r1, #4
    8ad2:	4630      	mov	r0, r6
    8ad4:	f7ff fcfa 	bl	84cc <send_err_rsp.part.8>
    8ad8:	e005      	b.n	8ae6 <att_find_info_req+0x66>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    8ada:	4b06      	ldr	r3, [pc, #24]	; (8af4 <att_find_info_req+0x74>)
    8adc:	9a01      	ldr	r2, [sp, #4]
    8ade:	2104      	movs	r1, #4
    8ae0:	4630      	mov	r0, r6
    8ae2:	f7fe f8c1 	bl	6c68 <bt_l2cap_send_cb>
		return 0;
    8ae6:	2000      	movs	r0, #0
    8ae8:	e7e2      	b.n	8ab0 <att_find_info_req+0x30>
			*err = 0;
    8aea:	4625      	mov	r5, r4
    8aec:	2301      	movs	r3, #1
    8aee:	e7ee      	b.n	8ace <att_find_info_req+0x4e>
    8af0:	00007b13 	.word	0x00007b13
    8af4:	00008259 	.word	0x00008259

00008af8 <att_write_rsp.part.9.constprop.14>:
static u8_t att_write_rsp(struct bt_conn *conn, u8_t op, u8_t rsp,
    8af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8afc:	b086      	sub	sp, #24
    8afe:	4690      	mov	r8, r2
    8b00:	4605      	mov	r5, r0
    8b02:	460e      	mov	r6, r1
	memset(&data, 0, sizeof(data));
    8b04:	2218      	movs	r2, #24
    8b06:	2100      	movs	r1, #0
    8b08:	4668      	mov	r0, sp
static u8_t att_write_rsp(struct bt_conn *conn, u8_t op, u8_t rsp,
    8b0a:	461f      	mov	r7, r3
	memset(&data, 0, sizeof(data));
    8b0c:	f7f7 fe6d 	bl	7ea <memset>
	if (rsp) {
    8b10:	f1b8 0f00 	cmp.w	r8, #0
    8b14:	d11f      	bne.n	8b56 <att_write_rsp.part.9.constprop.14+0x5e>
	data.offset = offset;
    8b16:	2300      	movs	r3, #0
    8b18:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
    8b1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8b1e:	9303      	str	r3, [sp, #12]
	data.len = len;
    8b20:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    8b24:	f88d 3010 	strb.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    8b28:	2301      	movs	r3, #1
    8b2a:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    8b2e:	4a1b      	ldr	r2, [pc, #108]	; (8b9c <att_write_rsp.part.9.constprop.14+0xa4>)
	data.conn = conn;
    8b30:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    8b32:	466b      	mov	r3, sp
    8b34:	4639      	mov	r1, r7
    8b36:	4638      	mov	r0, r7
	data.op = op;
    8b38:	f88d 6008 	strb.w	r6, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    8b3c:	f000 fc8a 	bl	9454 <bt_gatt_foreach_attr>
	if (data.err) {
    8b40:	f89d 4014 	ldrb.w	r4, [sp, #20]
    8b44:	b98c      	cbnz	r4, 8b6a <att_write_rsp.part.9.constprop.14+0x72>
	if (data.buf) {
    8b46:	9a01      	ldr	r2, [sp, #4]
    8b48:	b1b2      	cbz	r2, 8b78 <att_write_rsp.part.9.constprop.14+0x80>
		bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf,
    8b4a:	4b15      	ldr	r3, [pc, #84]	; (8ba0 <att_write_rsp.part.9.constprop.14+0xa8>)
    8b4c:	2104      	movs	r1, #4
    8b4e:	4628      	mov	r0, r5
    8b50:	f7fe f88a 	bl	6c68 <bt_l2cap_send_cb>
    8b54:	e011      	b.n	8b7a <att_write_rsp.part.9.constprop.14+0x82>
		data.buf = bt_att_create_pdu(conn, rsp, 0);
    8b56:	2200      	movs	r2, #0
    8b58:	4641      	mov	r1, r8
    8b5a:	4628      	mov	r0, r5
    8b5c:	f7ff fc3e 	bl	83dc <bt_att_create_pdu>
    8b60:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    8b62:	2800      	cmp	r0, #0
    8b64:	d1d7      	bne.n	8b16 <att_write_rsp.part.9.constprop.14+0x1e>
			return BT_ATT_ERR_UNLIKELY;
    8b66:	240e      	movs	r4, #14
    8b68:	e007      	b.n	8b7a <att_write_rsp.part.9.constprop.14+0x82>
		if (rsp) {
    8b6a:	f1b8 0f00 	cmp.w	r8, #0
    8b6e:	d00f      	beq.n	8b90 <att_write_rsp.part.9.constprop.14+0x98>
			net_buf_unref(data.buf);
    8b70:	9801      	ldr	r0, [sp, #4]
    8b72:	f010 fbb9 	bl	192e8 <net_buf_unref>
	if (!req) {
    8b76:	b926      	cbnz	r6, 8b82 <att_write_rsp.part.9.constprop.14+0x8a>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    8b78:	2400      	movs	r4, #0
}
    8b7a:	4620      	mov	r0, r4
    8b7c:	b006      	add	sp, #24
    8b7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8b82:	f89d 3014 	ldrb.w	r3, [sp, #20]
    8b86:	463a      	mov	r2, r7
    8b88:	4631      	mov	r1, r6
    8b8a:	4628      	mov	r0, r5
    8b8c:	f7ff fc9e 	bl	84cc <send_err_rsp.part.8>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    8b90:	2e18      	cmp	r6, #24
    8b92:	d1f1      	bne.n	8b78 <att_write_rsp.part.9.constprop.14+0x80>
    8b94:	f89d 4014 	ldrb.w	r4, [sp, #20]
    8b98:	e7ef      	b.n	8b7a <att_write_rsp.part.9.constprop.14+0x82>
    8b9a:	bf00      	nop
    8b9c:	00008309 	.word	0x00008309
    8ba0:	00008259 	.word	0x00008259

00008ba4 <att_signed_write_cmd>:
{
    8ba4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	handle = sys_le16_to_cpu(req->handle);
    8ba8:	460c      	mov	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
    8baa:	6806      	ldr	r6, [r0, #0]
	handle = sys_le16_to_cpu(req->handle);
    8bac:	f854 3f08 	ldr.w	r3, [r4, #8]!
{
    8bb0:	460d      	mov	r5, r1
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    8bb2:	4620      	mov	r0, r4
    8bb4:	2101      	movs	r1, #1
	handle = sys_le16_to_cpu(req->handle);
    8bb6:	f8b3 8000 	ldrh.w	r8, [r3]
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    8bba:	f010 fc2a 	bl	19412 <net_buf_simple_push>
	err = bt_smp_sign_verify(conn, buf);
    8bbe:	4629      	mov	r1, r5
    8bc0:	4630      	mov	r0, r6
    8bc2:	f002 fc83 	bl	b4cc <bt_smp_sign_verify>
	if (err) {
    8bc6:	4607      	mov	r7, r0
    8bc8:	b160      	cbz	r0, 8be4 <att_signed_write_cmd+0x40>
		BT_ERR("Error verifying data");
    8bca:	4b13      	ldr	r3, [pc, #76]	; (8c18 <att_signed_write_cmd+0x74>)
    8bcc:	9301      	str	r3, [sp, #4]
    8bce:	9300      	str	r3, [sp, #0]
    8bd0:	4a12      	ldr	r2, [pc, #72]	; (8c1c <att_signed_write_cmd+0x78>)
    8bd2:	4b13      	ldr	r3, [pc, #76]	; (8c20 <att_signed_write_cmd+0x7c>)
    8bd4:	4913      	ldr	r1, [pc, #76]	; (8c24 <att_signed_write_cmd+0x80>)
    8bd6:	4814      	ldr	r0, [pc, #80]	; (8c28 <att_signed_write_cmd+0x84>)
    8bd8:	f7f9 fb5c 	bl	2294 <printk>
    8bdc:	2000      	movs	r0, #0
}
    8bde:	b002      	add	sp, #8
    8be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	net_buf_pull(buf, sizeof(struct bt_att_hdr));
    8be4:	2101      	movs	r1, #1
    8be6:	4620      	mov	r0, r4
    8be8:	f010 fc2c 	bl	19444 <net_buf_simple_pull>
	net_buf_pull(buf, sizeof(*req));
    8bec:	2102      	movs	r1, #2
    8bee:	4620      	mov	r0, r4
    8bf0:	f010 fc28 	bl	19444 <net_buf_simple_pull>
	if (!handle) {
    8bf4:	f1b8 0f00 	cmp.w	r8, #0
    8bf8:	d00c      	beq.n	8c14 <att_signed_write_cmd+0x70>
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data,
    8bfa:	7b2b      	ldrb	r3, [r5, #12]
    8bfc:	3b0c      	subs	r3, #12
    8bfe:	b2db      	uxtb	r3, r3
    8c00:	9301      	str	r3, [sp, #4]
    8c02:	68ab      	ldr	r3, [r5, #8]
    8c04:	9300      	str	r3, [sp, #0]
    8c06:	463a      	mov	r2, r7
    8c08:	4643      	mov	r3, r8
    8c0a:	4639      	mov	r1, r7
    8c0c:	4630      	mov	r0, r6
    8c0e:	f7ff ff73 	bl	8af8 <att_write_rsp.part.9.constprop.14>
    8c12:	e7e4      	b.n	8bde <att_signed_write_cmd+0x3a>
		return BT_ATT_ERR_INVALID_HANDLE;
    8c14:	2001      	movs	r0, #1
    8c16:	e7e2      	b.n	8bde <att_signed_write_cmd+0x3a>
    8c18:	00023dae 	.word	0x00023dae
    8c1c:	00022d76 	.word	0x00022d76
    8c20:	00024a58 	.word	0x00024a58
    8c24:	000272d8 	.word	0x000272d8
    8c28:	00024b89 	.word	0x00024b89

00008c2c <att_write_cmd>:
{
    8c2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    8c2e:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    8c30:	f101 0008 	add.w	r0, r1, #8
{
    8c34:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
    8c36:	f010 fc15 	bl	19464 <net_buf_simple_pull_le16>
	if (!handle) {
    8c3a:	4603      	mov	r3, r0
    8c3c:	b150      	cbz	r0, 8c54 <att_write_cmd+0x28>
    8c3e:	7b22      	ldrb	r2, [r4, #12]
    8c40:	9201      	str	r2, [sp, #4]
    8c42:	68a2      	ldr	r2, [r4, #8]
    8c44:	9200      	str	r2, [sp, #0]
    8c46:	2200      	movs	r2, #0
    8c48:	4611      	mov	r1, r2
    8c4a:	4628      	mov	r0, r5
    8c4c:	f7ff ff54 	bl	8af8 <att_write_rsp.part.9.constprop.14>
}
    8c50:	b003      	add	sp, #12
    8c52:	bd30      	pop	{r4, r5, pc}
		return BT_ATT_ERR_INVALID_HANDLE;
    8c54:	2001      	movs	r0, #1
    8c56:	e7fb      	b.n	8c50 <att_write_cmd+0x24>

00008c58 <att_write_req>:
{
    8c58:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    8c5a:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    8c5c:	f101 0008 	add.w	r0, r1, #8
{
    8c60:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
    8c62:	f010 fbff 	bl	19464 <net_buf_simple_pull_le16>
	if (!handle) {
    8c66:	4603      	mov	r3, r0
    8c68:	b150      	cbz	r0, 8c80 <att_write_req+0x28>
    8c6a:	7b22      	ldrb	r2, [r4, #12]
    8c6c:	9201      	str	r2, [sp, #4]
    8c6e:	68a2      	ldr	r2, [r4, #8]
    8c70:	9200      	str	r2, [sp, #0]
    8c72:	2112      	movs	r1, #18
    8c74:	2213      	movs	r2, #19
    8c76:	4628      	mov	r0, r5
    8c78:	f7ff ff3e 	bl	8af8 <att_write_rsp.part.9.constprop.14>
}
    8c7c:	b003      	add	sp, #12
    8c7e:	bd30      	pop	{r4, r5, pc}
		return BT_ATT_ERR_INVALID_HANDLE;
    8c80:	2001      	movs	r0, #1
    8c82:	e7fb      	b.n	8c7c <att_write_req+0x24>

00008c84 <bt_att_init>:

void bt_att_init(void)
{
    8c84:	b508      	push	{r3, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid		= BT_L2CAP_CID_ATT,
		.accept		= bt_att_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    8c86:	4803      	ldr	r0, [pc, #12]	; (8c94 <bt_att_init+0x10>)
    8c88:	f7fd ff78 	bl	6b7c <bt_l2cap_le_fixed_chan_register>

	bt_gatt_init();
}
    8c8c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_gatt_init();
    8c90:	f000 bb98 	b.w	93c4 <bt_gatt_init>
    8c94:	20009e40 	.word	0x20009e40

00008c98 <bt_att_req_send>:

	return 0;
}

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
    8c98:	b510      	push	{r4, lr}
    8c9a:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	if (!conn || !req) {
    8c9c:	b1d8      	cbz	r0, 8cd6 <bt_att_req_send+0x3e>
    8c9e:	b1d1      	cbz	r1, 8cd6 <bt_att_req_send+0x3e>
		return -EINVAL;
	}

	att = att_chan_get(conn);
    8ca0:	f7ff faf2 	bl	8288 <att_chan_get>
	if (!att) {
    8ca4:	4603      	mov	r3, r0
    8ca6:	b1c8      	cbz	r0, 8cdc <bt_att_req_send+0x44>
		return -ENOTCONN;
	}

	/* Check if there is a request outstanding */
	if (att->req) {
    8ca8:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
    8cac:	b172      	cbz	r2, 8ccc <bt_att_req_send+0x34>
	if (!list->tail) {
    8cae:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
	node->next = NULL;
    8cb2:	2000      	movs	r0, #0
    8cb4:	6020      	str	r0, [r4, #0]
	if (!list->tail) {
    8cb6:	b92a      	cbnz	r2, 8cc4 <bt_att_req_send+0x2c>
		list->tail = node;
    8cb8:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
		list->head = node;
    8cbc:	f8c3 40a4 	str.w	r4, [r3, #164]	; 0xa4
		/* Queue the request to be send later */
		sys_slist_append(&att->reqs, &req->node);
		return 0;
    8cc0:	4610      	mov	r0, r2
    8cc2:	bd10      	pop	{r4, pc}
		list->tail->next = node;
    8cc4:	6014      	str	r4, [r2, #0]
		list->tail = node;
    8cc6:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
    8cca:	bd10      	pop	{r4, pc}
	}

	return att_send_req(att, req);
    8ccc:	4621      	mov	r1, r4
}
    8cce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return att_send_req(att, req);
    8cd2:	f7ff b8ef 	b.w	7eb4 <att_send_req>
		return -EINVAL;
    8cd6:	f06f 0015 	mvn.w	r0, #21
    8cda:	bd10      	pop	{r4, pc}
		return -ENOTCONN;
    8cdc:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
    8ce0:	bd10      	pop	{r4, pc}

00008ce2 <sc_ccc_cfg_changed>:

static struct bt_gatt_ccc_cfg sc_ccc_cfg[BT_GATT_CCC_MAX] = {};

static void sc_ccc_cfg_changed(const struct bt_gatt_attr *attr,
			       u16_t value)
{
    8ce2:	4770      	bx	lr

00008ce4 <find_next>:

static u8_t find_next(const struct bt_gatt_attr *attr, void *user_data)
{
	struct bt_gatt_attr **next = user_data;

	*next = (struct bt_gatt_attr *)attr;
    8ce4:	6008      	str	r0, [r1, #0]

	return BT_GATT_ITER_STOP;
}
    8ce6:	2000      	movs	r0, #0
    8ce8:	4770      	bx	lr

00008cea <gatt_ccc_changed>:
				 sizeof(value));
}

static void gatt_ccc_changed(const struct bt_gatt_attr *attr,
			     struct _bt_gatt_ccc *ccc)
{
    8cea:	b430      	push	{r4, r5}
	int i;
	u16_t value = 0x0000;
    8cec:	2300      	movs	r3, #0
    8cee:	684d      	ldr	r5, [r1, #4]

	for (i = 0; i < ccc->cfg_len; i++) {
    8cf0:	461a      	mov	r2, r3
    8cf2:	42aa      	cmp	r2, r5
    8cf4:	d107      	bne.n	8d06 <gatt_ccc_changed+0x1c>
		}
	}

	BT_DBG("ccc %p value 0x%04x", ccc, value);

	if (value != ccc->value) {
    8cf6:	890a      	ldrh	r2, [r1, #8]
    8cf8:	429a      	cmp	r2, r3
    8cfa:	d00d      	beq.n	8d18 <gatt_ccc_changed+0x2e>
		ccc->value = value;
    8cfc:	810b      	strh	r3, [r1, #8]
		ccc->cfg_changed(attr, value);
    8cfe:	68ca      	ldr	r2, [r1, #12]
	}
}
    8d00:	bc30      	pop	{r4, r5}
		ccc->cfg_changed(attr, value);
    8d02:	4619      	mov	r1, r3
    8d04:	4710      	bx	r2
		if (ccc->cfg[i].value > value) {
    8d06:	680c      	ldr	r4, [r1, #0]
    8d08:	eb04 1402 	add.w	r4, r4, r2, lsl #4
	for (i = 0; i < ccc->cfg_len; i++) {
    8d0c:	3201      	adds	r2, #1
    8d0e:	8924      	ldrh	r4, [r4, #8]
    8d10:	42a3      	cmp	r3, r4
    8d12:	bf38      	it	cc
    8d14:	4623      	movcc	r3, r4
    8d16:	e7ec      	b.n	8cf2 <gatt_ccc_changed+0x8>
}
    8d18:	bc30      	pop	{r4, r5}
    8d1a:	4770      	bx	lr

00008d1c <gatt_indicate_rsp>:
	return 0;
}

static void gatt_indicate_rsp(struct bt_conn *conn, u8_t err,
			      const void *pdu, u16_t length, void *user_data)
{
    8d1c:	b410      	push	{r4}
    8d1e:	9b01      	ldr	r3, [sp, #4]
	struct bt_gatt_indicate_params *params = user_data;

	params->func(conn, params->attr, err);
    8d20:	69dc      	ldr	r4, [r3, #28]
    8d22:	460a      	mov	r2, r1
    8d24:	6999      	ldr	r1, [r3, #24]
    8d26:	4623      	mov	r3, r4
}
    8d28:	bc10      	pop	{r4}
	params->func(conn, params->attr, err);
    8d2a:	4718      	bx	r3

00008d2c <bt_gatt_attr_write_ccc>:
{
    8d2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8d30:	4689      	mov	r9, r1
    8d32:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
	struct _bt_gatt_ccc *ccc = attr->user_data;
    8d36:	f8d9 400c 	ldr.w	r4, [r9, #12]
	if (offset > sizeof(u16_t)) {
    8d3a:	2902      	cmp	r1, #2
{
    8d3c:	4682      	mov	sl, r0
	if (offset > sizeof(u16_t)) {
    8d3e:	d856      	bhi.n	8dee <bt_gatt_attr_write_ccc+0xc2>
	if (offset + len > sizeof(u16_t)) {
    8d40:	4419      	add	r1, r3
    8d42:	2902      	cmp	r1, #2
    8d44:	461e      	mov	r6, r3
    8d46:	dc55      	bgt.n	8df4 <bt_gatt_attr_write_ccc+0xc8>
	return ((u16_t)src[1] << 8) | src[0];
    8d48:	7853      	ldrb	r3, [r2, #1]
    8d4a:	7817      	ldrb	r7, [r2, #0]
	for (i = 0; i < ccc->cfg_len; i++) {
    8d4c:	2500      	movs	r5, #0
    8d4e:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
    8d52:	6863      	ldr	r3, [r4, #4]
    8d54:	429d      	cmp	r5, r3
    8d56:	d207      	bcs.n	8d68 <bt_gatt_attr_write_ccc+0x3c>
		if (!bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    8d58:	6821      	ldr	r1, [r4, #0]
    8d5a:	eb01 1105 	add.w	r1, r1, r5, lsl #4
    8d5e:	3101      	adds	r1, #1
    8d60:	4650      	mov	r0, sl
    8d62:	f7fd fb65 	bl	6430 <bt_conn_addr_le_cmp>
    8d66:	b9a8      	cbnz	r0, 8d94 <bt_gatt_attr_write_ccc+0x68>
	if (i == ccc->cfg_len) {
    8d68:	6863      	ldr	r3, [r4, #4]
    8d6a:	429d      	cmp	r5, r3
    8d6c:	d12f      	bne.n	8dce <bt_gatt_attr_write_ccc+0xa2>
    8d6e:	f04f 0800 	mov.w	r8, #0
		for (i = 0; i < ccc->cfg_len; i++) {
    8d72:	4545      	cmp	r5, r8
    8d74:	d110      	bne.n	8d98 <bt_gatt_attr_write_ccc+0x6c>
			BT_WARN("No space to store CCC cfg");
    8d76:	4b21      	ldr	r3, [pc, #132]	; (8dfc <bt_gatt_attr_write_ccc+0xd0>)
    8d78:	9301      	str	r3, [sp, #4]
    8d7a:	9300      	str	r3, [sp, #0]
    8d7c:	4a20      	ldr	r2, [pc, #128]	; (8e00 <bt_gatt_attr_write_ccc+0xd4>)
    8d7e:	4b21      	ldr	r3, [pc, #132]	; (8e04 <bt_gatt_attr_write_ccc+0xd8>)
    8d80:	4921      	ldr	r1, [pc, #132]	; (8e08 <bt_gatt_attr_write_ccc+0xdc>)
    8d82:	4822      	ldr	r0, [pc, #136]	; (8e0c <bt_gatt_attr_write_ccc+0xe0>)
    8d84:	f7f9 fa86 	bl	2294 <printk>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    8d88:	f06f 0610 	mvn.w	r6, #16
}
    8d8c:	4630      	mov	r0, r6
    8d8e:	b003      	add	sp, #12
    8d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (i = 0; i < ccc->cfg_len; i++) {
    8d94:	3501      	adds	r5, #1
    8d96:	e7dc      	b.n	8d52 <bt_gatt_attr_write_ccc+0x26>
    8d98:	ea4f 1b08 	mov.w	fp, r8, lsl #4
			if (ccc->cfg[i].valid) {
    8d9c:	6823      	ldr	r3, [r4, #0]
    8d9e:	eb03 000b 	add.w	r0, r3, fp
    8da2:	f813 300b 	ldrb.w	r3, [r3, fp]
    8da6:	b113      	cbz	r3, 8dae <bt_gatt_attr_write_ccc+0x82>
		for (i = 0; i < ccc->cfg_len; i++) {
    8da8:	f108 0801 	add.w	r8, r8, #1
    8dac:	e7e1      	b.n	8d72 <bt_gatt_attr_write_ccc+0x46>
	memcpy(dst, src, sizeof(*dst));
    8dae:	2207      	movs	r2, #7
    8db0:	f10a 0148 	add.w	r1, sl, #72	; 0x48
    8db4:	3001      	adds	r0, #1
    8db6:	f7f7 fcec 	bl	792 <memcpy>
			if (value) {
    8dba:	b11f      	cbz	r7, 8dc4 <bt_gatt_attr_write_ccc+0x98>
				ccc->cfg[i].valid = true;
    8dbc:	6823      	ldr	r3, [r4, #0]
    8dbe:	2201      	movs	r2, #1
    8dc0:	f803 200b 	strb.w	r2, [r3, fp]
		if (i == ccc->cfg_len) {
    8dc4:	6863      	ldr	r3, [r4, #4]
    8dc6:	4598      	cmp	r8, r3
    8dc8:	d0d5      	beq.n	8d76 <bt_gatt_attr_write_ccc+0x4a>
    8dca:	4645      	mov	r5, r8
    8dcc:	e003      	b.n	8dd6 <bt_gatt_attr_write_ccc+0xaa>
	} else if (!value) {
    8dce:	b917      	cbnz	r7, 8dd6 <bt_gatt_attr_write_ccc+0xaa>
		ccc->cfg[i].valid = false;
    8dd0:	6822      	ldr	r2, [r4, #0]
    8dd2:	012b      	lsls	r3, r5, #4
    8dd4:	54d7      	strb	r7, [r2, r3]
	ccc->cfg[i].value = value;
    8dd6:	6823      	ldr	r3, [r4, #0]
    8dd8:	eb03 1505 	add.w	r5, r3, r5, lsl #4
	if (ccc->cfg[i].value != ccc->value) {
    8ddc:	8923      	ldrh	r3, [r4, #8]
	ccc->cfg[i].value = value;
    8dde:	812f      	strh	r7, [r5, #8]
	if (ccc->cfg[i].value != ccc->value) {
    8de0:	42bb      	cmp	r3, r7
    8de2:	d0d3      	beq.n	8d8c <bt_gatt_attr_write_ccc+0x60>
		gatt_ccc_changed(attr, ccc);
    8de4:	4621      	mov	r1, r4
    8de6:	4648      	mov	r0, r9
    8de8:	f7ff ff7f 	bl	8cea <gatt_ccc_changed>
    8dec:	e7ce      	b.n	8d8c <bt_gatt_attr_write_ccc+0x60>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    8dee:	f06f 0606 	mvn.w	r6, #6
    8df2:	e7cb      	b.n	8d8c <bt_gatt_attr_write_ccc+0x60>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    8df4:	f06f 060c 	mvn.w	r6, #12
    8df8:	e7c8      	b.n	8d8c <bt_gatt_attr_write_ccc+0x60>
    8dfa:	bf00      	nop
    8dfc:	00023dae 	.word	0x00023dae
    8e00:	00024006 	.word	0x00024006
    8e04:	00024e11 	.word	0x00024e11
    8e08:	000272d8 	.word	0x000272d8
    8e0c:	00024e82 	.word	0x00024e82

00008e10 <gatt_register>:
{
    8e10:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (sys_slist_is_empty(&db)) {
    8e12:	4a1f      	ldr	r2, [pc, #124]	; (8e90 <gatt_register+0x80>)
	struct bt_gatt_attr *attrs = svc->attrs;
    8e14:	6801      	ldr	r1, [r0, #0]
	if (sys_slist_is_empty(&db)) {
    8e16:	6813      	ldr	r3, [r2, #0]
	u16_t count = svc->attr_count;
    8e18:	8885      	ldrh	r5, [r0, #4]
	if (sys_slist_is_empty(&db)) {
    8e1a:	b15b      	cbz	r3, 8e34 <gatt_register+0x24>
    8e1c:	6853      	ldr	r3, [r2, #4]
	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
    8e1e:	2b00      	cmp	r3, #0
    8e20:	d033      	beq.n	8e8a <gatt_register+0x7a>
	handle = last->attrs[last->attr_count - 1].handle;
    8e22:	f833 4c04 	ldrh.w	r4, [r3, #-4]
    8e26:	f853 3c08 	ldr.w	r3, [r3, #-8]
    8e2a:	2614      	movs	r6, #20
    8e2c:	fb06 3304 	mla	r3, r6, r4, r3
    8e30:	f833 3c04 	ldrh.w	r3, [r3, #-4]
    8e34:	2414      	movs	r4, #20
    8e36:	fb04 1505 	mla	r5, r4, r5, r1
	for (; attrs && count; attrs++, count--) {
    8e3a:	b109      	cbz	r1, 8e40 <gatt_register+0x30>
    8e3c:	42a9      	cmp	r1, r5
    8e3e:	d108      	bne.n	8e52 <gatt_register+0x42>
	node->next = NULL;
    8e40:	2300      	movs	r3, #0
	sys_slist_append(&db, &svc->node);
    8e42:	f100 0108 	add.w	r1, r0, #8
    8e46:	6083      	str	r3, [r0, #8]
	if (!list->tail) {
    8e48:	6850      	ldr	r0, [r2, #4]
    8e4a:	b9d0      	cbnz	r0, 8e82 <gatt_register+0x72>
		list->tail = node;
    8e4c:	6051      	str	r1, [r2, #4]
		list->head = node;
    8e4e:	6011      	str	r1, [r2, #0]
    8e50:	e015      	b.n	8e7e <gatt_register+0x6e>
		if (!attrs->handle) {
    8e52:	8a0c      	ldrh	r4, [r1, #16]
    8e54:	b92c      	cbnz	r4, 8e62 <gatt_register+0x52>
			attrs->handle = ++handle;
    8e56:	3301      	adds	r3, #1
    8e58:	b29c      	uxth	r4, r3
    8e5a:	820c      	strh	r4, [r1, #16]
	for (; attrs && count; attrs++, count--) {
    8e5c:	3114      	adds	r1, #20
    8e5e:	4623      	mov	r3, r4
    8e60:	e7eb      	b.n	8e3a <gatt_register+0x2a>
		} else if (attrs->handle > handle) {
    8e62:	42a3      	cmp	r3, r4
    8e64:	d3fa      	bcc.n	8e5c <gatt_register+0x4c>
			BT_ERR("Unable to register handle 0x%04x",
    8e66:	4b0b      	ldr	r3, [pc, #44]	; (8e94 <gatt_register+0x84>)
    8e68:	9302      	str	r3, [sp, #8]
    8e6a:	e88d 0018 	stmia.w	sp, {r3, r4}
    8e6e:	4a0a      	ldr	r2, [pc, #40]	; (8e98 <gatt_register+0x88>)
    8e70:	4b0a      	ldr	r3, [pc, #40]	; (8e9c <gatt_register+0x8c>)
    8e72:	490b      	ldr	r1, [pc, #44]	; (8ea0 <gatt_register+0x90>)
    8e74:	480b      	ldr	r0, [pc, #44]	; (8ea4 <gatt_register+0x94>)
    8e76:	f7f9 fa0d 	bl	2294 <printk>
			return -EINVAL;
    8e7a:	f06f 0015 	mvn.w	r0, #21
}
    8e7e:	b004      	add	sp, #16
    8e80:	bd70      	pop	{r4, r5, r6, pc}
		list->tail->next = node;
    8e82:	6001      	str	r1, [r0, #0]
		list->tail = node;
    8e84:	6051      	str	r1, [r2, #4]
	return 0;
    8e86:	4618      	mov	r0, r3
    8e88:	e7f9      	b.n	8e7e <gatt_register+0x6e>
	handle = last->attrs[last->attr_count - 1].handle;
    8e8a:	681b      	ldr	r3, [r3, #0]
    8e8c:	deff      	udf	#255	; 0xff
    8e8e:	bf00      	nop
    8e90:	200006d4 	.word	0x200006d4
    8e94:	00023dae 	.word	0x00023dae
    8e98:	00022d76 	.word	0x00022d76
    8e9c:	00024dec 	.word	0x00024dec
    8ea0:	000272d8 	.word	0x000272d8
    8ea4:	00024f46 	.word	0x00024f46

00008ea8 <gatt_notify>:
{
    8ea8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    8eac:	468a      	mov	sl, r1
    8eae:	4691      	mov	r9, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    8eb0:	211b      	movs	r1, #27
    8eb2:	1c9a      	adds	r2, r3, #2
{
    8eb4:	4680      	mov	r8, r0
    8eb6:	461e      	mov	r6, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    8eb8:	f7ff fa90 	bl	83dc <bt_att_create_pdu>
	if (!buf) {
    8ebc:	4604      	mov	r4, r0
    8ebe:	b968      	cbnz	r0, 8edc <gatt_notify+0x34>
		BT_WARN("No buffer available to send notification");
    8ec0:	4b13      	ldr	r3, [pc, #76]	; (8f10 <gatt_notify+0x68>)
    8ec2:	9301      	str	r3, [sp, #4]
    8ec4:	9300      	str	r3, [sp, #0]
    8ec6:	4a13      	ldr	r2, [pc, #76]	; (8f14 <gatt_notify+0x6c>)
    8ec8:	4b13      	ldr	r3, [pc, #76]	; (8f18 <gatt_notify+0x70>)
    8eca:	4914      	ldr	r1, [pc, #80]	; (8f1c <gatt_notify+0x74>)
    8ecc:	4814      	ldr	r0, [pc, #80]	; (8f20 <gatt_notify+0x78>)
    8ece:	f7f9 f9e1 	bl	2294 <printk>
    8ed2:	f06f 000b 	mvn.w	r0, #11
}
    8ed6:	b002      	add	sp, #8
    8ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	nfy = net_buf_add(buf, sizeof(*nfy));
    8edc:	f100 0708 	add.w	r7, r0, #8
    8ee0:	2102      	movs	r1, #2
    8ee2:	4638      	mov	r0, r7
    8ee4:	f010 fa5e 	bl	193a4 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    8ee8:	4605      	mov	r5, r0
	net_buf_add(buf, len);
    8eea:	4631      	mov	r1, r6
	nfy->handle = sys_cpu_to_le16(handle);
    8eec:	f825 ab02 	strh.w	sl, [r5], #2
	net_buf_add(buf, len);
    8ef0:	4638      	mov	r0, r7
    8ef2:	f010 fa57 	bl	193a4 <net_buf_simple_add>
	memcpy(nfy->value, data, len);
    8ef6:	4632      	mov	r2, r6
    8ef8:	4649      	mov	r1, r9
    8efa:	4628      	mov	r0, r5
    8efc:	f7f7 fc49 	bl	792 <memcpy>
    8f00:	4640      	mov	r0, r8
    8f02:	2300      	movs	r3, #0
    8f04:	4622      	mov	r2, r4
    8f06:	2104      	movs	r1, #4
    8f08:	f7fd feae 	bl	6c68 <bt_l2cap_send_cb>
	return 0;
    8f0c:	2000      	movs	r0, #0
    8f0e:	e7e2      	b.n	8ed6 <gatt_notify+0x2e>
    8f10:	00023dae 	.word	0x00023dae
    8f14:	00024006 	.word	0x00024006
    8f18:	00024e28 	.word	0x00024e28
    8f1c:	000272d8 	.word	0x000272d8
    8f20:	00024f0d 	.word	0x00024f0d

00008f24 <gatt_indicate>:
	return err;
}

static int gatt_indicate(struct bt_conn *conn,
			 struct bt_gatt_indicate_params *params)
{
    8f24:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct net_buf *buf;
	struct bt_att_indicate *ind;

	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
				sizeof(*ind) + params->len);
    8f28:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
{
    8f2a:	460c      	mov	r4, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    8f2c:	3202      	adds	r2, #2
    8f2e:	211d      	movs	r1, #29
{
    8f30:	4680      	mov	r8, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    8f32:	f7ff fa53 	bl	83dc <bt_att_create_pdu>
	if (!buf) {
    8f36:	4605      	mov	r5, r0
    8f38:	b970      	cbnz	r0, 8f58 <gatt_indicate+0x34>
		BT_WARN("No buffer available to send indication");
    8f3a:	4b1e      	ldr	r3, [pc, #120]	; (8fb4 <gatt_indicate+0x90>)
    8f3c:	9301      	str	r3, [sp, #4]
    8f3e:	9300      	str	r3, [sp, #0]
    8f40:	4a1d      	ldr	r2, [pc, #116]	; (8fb8 <gatt_indicate+0x94>)
    8f42:	4b1e      	ldr	r3, [pc, #120]	; (8fbc <gatt_indicate+0x98>)
    8f44:	491e      	ldr	r1, [pc, #120]	; (8fc0 <gatt_indicate+0x9c>)
    8f46:	481f      	ldr	r0, [pc, #124]	; (8fc4 <gatt_indicate+0xa0>)
    8f48:	f7f9 f9a4 	bl	2294 <printk>
    8f4c:	f06f 040b 	mvn.w	r4, #11

	net_buf_add(buf, params->len);
	memcpy(ind->value, params->data, params->len);

	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
}
    8f50:	4620      	mov	r0, r4
    8f52:	b004      	add	sp, #16
    8f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ind = net_buf_add(buf, sizeof(*ind));
    8f58:	f100 0608 	add.w	r6, r0, #8
    8f5c:	2102      	movs	r1, #2
    8f5e:	4630      	mov	r0, r6
    8f60:	f010 fa20 	bl	193a4 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(params->attr->handle);
    8f64:	69a3      	ldr	r3, [r4, #24]
	net_buf_add(buf, params->len);
    8f66:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
	ind->handle = sys_cpu_to_le16(params->attr->handle);
    8f68:	8a1b      	ldrh	r3, [r3, #16]
    8f6a:	4607      	mov	r7, r0
	net_buf_add(buf, params->len);
    8f6c:	4630      	mov	r0, r6
	ind->handle = sys_cpu_to_le16(params->attr->handle);
    8f6e:	f827 3b02 	strh.w	r3, [r7], #2
	net_buf_add(buf, params->len);
    8f72:	f010 fa17 	bl	193a4 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    8f76:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    8f78:	6a21      	ldr	r1, [r4, #32]
    8f7a:	4638      	mov	r0, r7
    8f7c:	f7f7 fc09 	bl	792 <memcpy>
		req->func = func;
    8f80:	4b11      	ldr	r3, [pc, #68]	; (8fc8 <gatt_indicate+0xa4>)
    8f82:	6063      	str	r3, [r4, #4]
		req->destroy = destroy;
    8f84:	2300      	movs	r3, #0
		req->buf = buf;
    8f86:	6125      	str	r5, [r4, #16]
		req->destroy = destroy;
    8f88:	60a3      	str	r3, [r4, #8]
		err = bt_att_req_send(conn, req);
    8f8a:	4621      	mov	r1, r4
    8f8c:	4640      	mov	r0, r8
    8f8e:	f7ff fe83 	bl	8c98 <bt_att_req_send>
	if (err) {
    8f92:	4604      	mov	r4, r0
    8f94:	2800      	cmp	r0, #0
    8f96:	d0db      	beq.n	8f50 <gatt_indicate+0x2c>
		BT_ERR("Error sending ATT PDU: %d", err);
    8f98:	4b06      	ldr	r3, [pc, #24]	; (8fb4 <gatt_indicate+0x90>)
    8f9a:	9302      	str	r3, [sp, #8]
    8f9c:	e88d 0018 	stmia.w	sp, {r3, r4}
    8fa0:	4a0a      	ldr	r2, [pc, #40]	; (8fcc <gatt_indicate+0xa8>)
    8fa2:	4b0b      	ldr	r3, [pc, #44]	; (8fd0 <gatt_indicate+0xac>)
    8fa4:	4906      	ldr	r1, [pc, #24]	; (8fc0 <gatt_indicate+0x9c>)
    8fa6:	480b      	ldr	r0, [pc, #44]	; (8fd4 <gatt_indicate+0xb0>)
    8fa8:	f7f9 f974 	bl	2294 <printk>
		net_buf_unref(buf);
    8fac:	4628      	mov	r0, r5
    8fae:	f010 f99b 	bl	192e8 <net_buf_unref>
    8fb2:	e7cd      	b.n	8f50 <gatt_indicate+0x2c>
    8fb4:	00023dae 	.word	0x00023dae
    8fb8:	00024006 	.word	0x00024006
    8fbc:	00024e3e 	.word	0x00024e3e
    8fc0:	000272d8 	.word	0x000272d8
    8fc4:	00024eac 	.word	0x00024eac
    8fc8:	00008d1d 	.word	0x00008d1d
    8fcc:	00022d76 	.word	0x00022d76
    8fd0:	00024e34 	.word	0x00024e34
    8fd4:	00024ee3 	.word	0x00024ee3

00008fd8 <sc_indicate.constprop.17>:
static void sc_indicate(struct gatt_sc *sc, uint16_t start, uint16_t end)
    8fd8:	b510      	push	{r4, lr}
    8fda:	4b17      	ldr	r3, [pc, #92]	; (9038 <sc_indicate.constprop.17+0x60>)
    8fdc:	f3bf 8f5b 	dmb	ish
    8fe0:	f103 0254 	add.w	r2, r3, #84	; 0x54
    8fe4:	e852 4f00 	ldrex	r4, [r2]
    8fe8:	f044 0e01 	orr.w	lr, r4, #1
    8fec:	e842 ec00 	strex	ip, lr, [r2]
    8ff0:	f1bc 0f00 	cmp.w	ip, #0
    8ff4:	d1f6      	bne.n	8fe4 <sc_indicate.constprop.17+0xc>
    8ff6:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(sc->flags, SC_RANGE_CHANGED)) {
    8ffa:	07e2      	lsls	r2, r4, #31
    8ffc:	d402      	bmi.n	9004 <sc_indicate.constprop.17+0x2c>
		sc->start = start;
    8ffe:	8518      	strh	r0, [r3, #40]	; 0x28
		*end = new_end;
    9000:	8559      	strh	r1, [r3, #42]	; 0x2a
    9002:	e00a      	b.n	901a <sc_indicate.constprop.17+0x42>
	if (new_start >= *start && new_end <= *end) {
    9004:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    9006:	4282      	cmp	r2, r0
    9008:	d803      	bhi.n	9012 <sc_indicate.constprop.17+0x3a>
    900a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    900c:	428a      	cmp	r2, r1
    900e:	d301      	bcc.n	9014 <sc_indicate.constprop.17+0x3c>
    9010:	bd10      	pop	{r4, pc}
		*start = new_start;
    9012:	8518      	strh	r0, [r3, #40]	; 0x28
	if (*end < new_end) {
    9014:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    9016:	428a      	cmp	r2, r1
    9018:	d3f2      	bcc.n	9000 <sc_indicate.constprop.17+0x28>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    901a:	f3bf 8f5b 	dmb	ish
    901e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    9020:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(sc->flags, SC_INDICATE_PENDING)) {
    9024:	079b      	lsls	r3, r3, #30
    9026:	d406      	bmi.n	9036 <sc_indicate.constprop.17+0x5e>
    9028:	220a      	movs	r2, #10
    902a:	4904      	ldr	r1, [pc, #16]	; (903c <sc_indicate.constprop.17+0x64>)
    902c:	4804      	ldr	r0, [pc, #16]	; (9040 <sc_indicate.constprop.17+0x68>)
}
    902e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9032:	f019 b95f 	b.w	222f4 <k_delayed_work_submit_to_queue>
    9036:	bd10      	pop	{r4, pc}
    9038:	200006dc 	.word	0x200006dc
    903c:	20000708 	.word	0x20000708
    9040:	20003340 	.word	0x20003340

00009044 <connected_cb>:
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    9044:	6882      	ldr	r2, [r0, #8]
    9046:	4b19      	ldr	r3, [pc, #100]	; (90ac <connected_cb+0x68>)
    9048:	429a      	cmp	r2, r3
{
    904a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    904e:	4607      	mov	r7, r0
    9050:	460c      	mov	r4, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    9052:	d126      	bne.n	90a2 <connected_cb+0x5e>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    9054:	68c5      	ldr	r5, [r0, #12]

	for (i = 0; i < ccc->cfg_len; i++) {
    9056:	2600      	movs	r6, #0
    9058:	686b      	ldr	r3, [r5, #4]
    905a:	429e      	cmp	r6, r3
    905c:	d221      	bcs.n	90a2 <connected_cb+0x5e>
		/* Ignore configuration for different peer */
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    905e:	6829      	ldr	r1, [r5, #0]
    9060:	ea4f 1806 	mov.w	r8, r6, lsl #4
    9064:	4441      	add	r1, r8
    9066:	3101      	adds	r1, #1
    9068:	4620      	mov	r0, r4
    906a:	f7fd f9e1 	bl	6430 <bt_conn_addr_le_cmp>
    906e:	b9d8      	cbnz	r0, 90a8 <connected_cb+0x64>
			continue;
		}

		if (ccc->cfg[i].value) {
    9070:	682b      	ldr	r3, [r5, #0]
    9072:	4443      	add	r3, r8
    9074:	891b      	ldrh	r3, [r3, #8]
    9076:	b1bb      	cbz	r3, 90a8 <connected_cb+0x64>
			gatt_ccc_changed(attr, ccc);
    9078:	4629      	mov	r1, r5
    907a:	4638      	mov	r0, r7
    907c:	f7ff fe35 	bl	8cea <gatt_ccc_changed>
			if (ccc->cfg == sc_ccc_cfg) {
    9080:	682c      	ldr	r4, [r5, #0]
    9082:	4b0b      	ldr	r3, [pc, #44]	; (90b0 <connected_cb+0x6c>)
    9084:	429c      	cmp	r4, r3
    9086:	d10c      	bne.n	90a2 <connected_cb+0x5e>
				sc_restore(&ccc->cfg[i]);
    9088:	4444      	add	r4, r8
	if (!data->start && !data->end) {
    908a:	89a0      	ldrh	r0, [r4, #12]
    908c:	89e1      	ldrh	r1, [r4, #14]
    908e:	b900      	cbnz	r0, 9092 <connected_cb+0x4e>
    9090:	b139      	cbz	r1, 90a2 <connected_cb+0x5e>
	sc_indicate(&gatt_sc, data->start, data->end);
    9092:	f7ff ffa1 	bl	8fd8 <sc_indicate.constprop.17>
	memset(cfg->data, 0, sizeof(cfg->data));
    9096:	2204      	movs	r2, #4
    9098:	2100      	movs	r1, #0
    909a:	f104 000c 	add.w	r0, r4, #12
    909e:	f7f7 fba4 	bl	7ea <memset>
			return BT_GATT_ITER_CONTINUE;
		}
	}

	return BT_GATT_ITER_CONTINUE;
}
    90a2:	2001      	movs	r0, #1
    90a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0; i < ccc->cfg_len; i++) {
    90a8:	3601      	adds	r6, #1
    90aa:	e7d5      	b.n	9058 <connected_cb+0x14>
    90ac:	00008d2d 	.word	0x00008d2d
    90b0:	20000734 	.word	0x20000734

000090b4 <sc_indicate_rsp>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    90b4:	490d      	ldr	r1, [pc, #52]	; (90ec <sc_indicate_rsp+0x38>)
    90b6:	f3bf 8f5b 	dmb	ish
    90ba:	f101 0354 	add.w	r3, r1, #84	; 0x54
    90be:	e853 2f00 	ldrex	r2, [r3]
    90c2:	f022 0202 	bic.w	r2, r2, #2
    90c6:	e843 2000 	strex	r0, r2, [r3]
    90ca:	2800      	cmp	r0, #0
    90cc:	d1f7      	bne.n	90be <sc_indicate_rsp+0xa>
    90ce:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    90d2:	f3bf 8f5b 	dmb	ish
    90d6:	6d4b      	ldr	r3, [r1, #84]	; 0x54
    90d8:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    90dc:	07db      	lsls	r3, r3, #31
    90de:	d504      	bpl.n	90ea <sc_indicate_rsp+0x36>
    90e0:	2200      	movs	r2, #0
    90e2:	312c      	adds	r1, #44	; 0x2c
    90e4:	4802      	ldr	r0, [pc, #8]	; (90f0 <sc_indicate_rsp+0x3c>)
    90e6:	f019 b905 	b.w	222f4 <k_delayed_work_submit_to_queue>
    90ea:	4770      	bx	lr
    90ec:	200006dc 	.word	0x200006dc
    90f0:	20003340 	.word	0x20003340

000090f4 <read_appearance>:
{
    90f4:	b513      	push	{r0, r1, r4, lr}
    90f6:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    90fa:	4610      	mov	r0, r2
	if (offset > value_len) {
    90fc:	2902      	cmp	r1, #2
	u16_t appearance = sys_cpu_to_le16(gap_appearance);
    90fe:	f04f 0200 	mov.w	r2, #0
    9102:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
    9106:	d80d      	bhi.n	9124 <read_appearance+0x30>
	len = min(buf_len, value_len - offset);
    9108:	f1c1 0402 	rsb	r4, r1, #2
    910c:	429c      	cmp	r4, r3
    910e:	bfa8      	it	ge
    9110:	461c      	movge	r4, r3
	memcpy(buf, value + offset, len);
    9112:	f10d 0306 	add.w	r3, sp, #6
    9116:	4622      	mov	r2, r4
    9118:	4419      	add	r1, r3
    911a:	f7f7 fb3a 	bl	792 <memcpy>
}
    911e:	4620      	mov	r0, r4
    9120:	b002      	add	sp, #8
    9122:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    9124:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
    9128:	e7f9      	b.n	911e <read_appearance+0x2a>
	...

0000912c <disconnected_cb>:

static u8_t disconnected_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    912c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    9130:	6882      	ldr	r2, [r0, #8]
    9132:	4b24      	ldr	r3, [pc, #144]	; (91c4 <disconnected_cb+0x98>)
    9134:	429a      	cmp	r2, r3
{
    9136:	4607      	mov	r7, r0
    9138:	4688      	mov	r8, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    913a:	d129      	bne.n	9190 <disconnected_cb+0x64>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    913c:	68c4      	ldr	r4, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
    913e:	8923      	ldrh	r3, [r4, #8]
    9140:	b333      	cbz	r3, 9190 <disconnected_cb+0x64>
    9142:	2600      	movs	r6, #0

				bt_conn_unref(tmp);
			}
		} else {
			/* Clear value if not paired */
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
    9144:	f101 0948 	add.w	r9, r1, #72	; 0x48
	for (i = 0; i < ccc->cfg_len; i++) {
    9148:	6863      	ldr	r3, [r4, #4]
    914a:	429e      	cmp	r6, r3
    914c:	d30b      	bcc.n	9166 <disconnected_cb+0x3a>
			}
		}
	}

	/* Reset value while disconnected */
	memset(&ccc->value, 0, sizeof(ccc->value));
    914e:	2202      	movs	r2, #2
    9150:	2100      	movs	r1, #0
    9152:	f104 0008 	add.w	r0, r4, #8
    9156:	f7f7 fb48 	bl	7ea <memset>
	if (ccc->cfg_changed) {
    915a:	68e3      	ldr	r3, [r4, #12]
    915c:	b1c3      	cbz	r3, 9190 <disconnected_cb+0x64>
		ccc->cfg_changed(attr, ccc->value);
    915e:	8921      	ldrh	r1, [r4, #8]
    9160:	4638      	mov	r0, r7
    9162:	4798      	blx	r3
    9164:	e014      	b.n	9190 <disconnected_cb+0x64>
		if (!ccc->cfg[i].value) {
    9166:	6821      	ldr	r1, [r4, #0]
    9168:	0135      	lsls	r5, r6, #4
    916a:	4429      	add	r1, r5
    916c:	890b      	ldrh	r3, [r1, #8]
    916e:	b1a3      	cbz	r3, 919a <disconnected_cb+0x6e>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    9170:	3101      	adds	r1, #1
    9172:	4640      	mov	r0, r8
    9174:	f7fd f95c 	bl	6430 <bt_conn_addr_le_cmp>
    9178:	b188      	cbz	r0, 919e <disconnected_cb+0x72>
			tmp = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    917a:	6820      	ldr	r0, [r4, #0]
    917c:	4428      	add	r0, r5
    917e:	3001      	adds	r0, #1
    9180:	f7fd f96e 	bl	6460 <bt_conn_lookup_addr_le>
			if (tmp) {
    9184:	b148      	cbz	r0, 919a <disconnected_cb+0x6e>
				if (tmp->state == BT_CONN_CONNECTED) {
    9186:	7b03      	ldrb	r3, [r0, #12]
    9188:	2b03      	cmp	r3, #3
    918a:	d104      	bne.n	9196 <disconnected_cb+0x6a>
					bt_conn_unref(tmp);
    918c:	f7fd f9a4 	bl	64d8 <bt_conn_unref>
	}

	BT_DBG("ccc %p reseted", ccc);

	return BT_GATT_ITER_CONTINUE;
}
    9190:	2001      	movs	r0, #1
    9192:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				bt_conn_unref(tmp);
    9196:	f7fd f99f 	bl	64d8 <bt_conn_unref>
	for (i = 0; i < ccc->cfg_len; i++) {
    919a:	3601      	adds	r6, #1
    919c:	e7d4      	b.n	9148 <disconnected_cb+0x1c>
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
    919e:	4648      	mov	r0, r9
    91a0:	f7fc fb68 	bl	5874 <bt_addr_le_is_bonded>
    91a4:	6823      	ldr	r3, [r4, #0]
    91a6:	4601      	mov	r1, r0
				ccc->cfg[i].valid = false;
    91a8:	1958      	adds	r0, r3, r5
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
    91aa:	b929      	cbnz	r1, 91b8 <disconnected_cb+0x8c>
				ccc->cfg[i].valid = false;
    91ac:	5559      	strb	r1, [r3, r5]
				memset(&ccc->cfg[i].value, 0,
    91ae:	2202      	movs	r2, #2
    91b0:	3008      	adds	r0, #8
    91b2:	f7f7 fb1a 	bl	7ea <memset>
    91b6:	e7f0      	b.n	919a <disconnected_cb+0x6e>
    91b8:	2207      	movs	r2, #7
    91ba:	4649      	mov	r1, r9
    91bc:	3001      	adds	r0, #1
    91be:	f7f7 fae8 	bl	792 <memcpy>
    91c2:	e7ea      	b.n	919a <disconnected_cb+0x6e>
    91c4:	00008d2d 	.word	0x00008d2d

000091c8 <read_name>:
{
    91c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
				 strlen(gap_name));
    91cc:	4e0d      	ldr	r6, [pc, #52]	; (9204 <read_name+0x3c>)
{
    91ce:	f8bd 5018 	ldrh.w	r5, [sp, #24]
				 strlen(gap_name));
    91d2:	4630      	mov	r0, r6
{
    91d4:	4698      	mov	r8, r3
    91d6:	4617      	mov	r7, r2
				 strlen(gap_name));
    91d8:	f7f7 fa99 	bl	70e <strlen>
	if (offset > value_len) {
    91dc:	b283      	uxth	r3, r0
    91de:	42ab      	cmp	r3, r5
    91e0:	d30d      	bcc.n	91fe <read_name+0x36>
	len = min(buf_len, value_len - offset);
    91e2:	1b5c      	subs	r4, r3, r5
    91e4:	4544      	cmp	r4, r8
    91e6:	4623      	mov	r3, r4
    91e8:	bfa8      	it	ge
    91ea:	4643      	movge	r3, r8
    91ec:	b29c      	uxth	r4, r3
	memcpy(buf, value + offset, len);
    91ee:	4622      	mov	r2, r4
    91f0:	1971      	adds	r1, r6, r5
    91f2:	4638      	mov	r0, r7
    91f4:	f7f7 facd 	bl	792 <memcpy>
}
    91f8:	4620      	mov	r0, r4
    91fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    91fe:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, gap_name,
    9202:	e7f9      	b.n	91f8 <read_name+0x30>
    9204:	00024f77 	.word	0x00024f77

00009208 <bt_gatt_attr_read_ccc>:
{
    9208:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	struct _bt_gatt_ccc *ccc = attr->user_data;
    920c:	68ce      	ldr	r6, [r1, #12]
{
    920e:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
    9212:	4604      	mov	r4, r0
    9214:	4690      	mov	r8, r2
    9216:	4699      	mov	r9, r3
	for (i = 0; i < ccc->cfg_len; i++) {
    9218:	2500      	movs	r5, #0
    921a:	6873      	ldr	r3, [r6, #4]
    921c:	429d      	cmp	r5, r3
    921e:	d20f      	bcs.n	9240 <bt_gatt_attr_read_ccc+0x38>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    9220:	6831      	ldr	r1, [r6, #0]
    9222:	ea4f 1a05 	mov.w	sl, r5, lsl #4
    9226:	4451      	add	r1, sl
    9228:	3101      	adds	r1, #1
    922a:	4620      	mov	r0, r4
    922c:	f7fd f900 	bl	6430 <bt_conn_addr_le_cmp>
    9230:	b108      	cbz	r0, 9236 <bt_gatt_attr_read_ccc+0x2e>
	for (i = 0; i < ccc->cfg_len; i++) {
    9232:	3501      	adds	r5, #1
    9234:	e7f1      	b.n	921a <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(ccc->cfg[i].value);
    9236:	6832      	ldr	r2, [r6, #0]
    9238:	4452      	add	r2, sl
    923a:	8913      	ldrh	r3, [r2, #8]
    923c:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (i == ccc->cfg_len) {
    9240:	6873      	ldr	r3, [r6, #4]
    9242:	429d      	cmp	r5, r3
		value = 0x0000;
    9244:	bf04      	itt	eq
    9246:	2300      	moveq	r3, #0
    9248:	f8ad 3006 	strheq.w	r3, [sp, #6]
	if (offset > value_len) {
    924c:	2f02      	cmp	r7, #2
    924e:	d80f      	bhi.n	9270 <bt_gatt_attr_read_ccc+0x68>
	len = min(buf_len, value_len - offset);
    9250:	f1c7 0402 	rsb	r4, r7, #2
    9254:	454c      	cmp	r4, r9
    9256:	bfa8      	it	ge
    9258:	464c      	movge	r4, r9
	memcpy(buf, value + offset, len);
    925a:	f10d 0306 	add.w	r3, sp, #6
    925e:	4622      	mov	r2, r4
    9260:	19d9      	adds	r1, r3, r7
    9262:	4640      	mov	r0, r8
    9264:	f7f7 fa95 	bl	792 <memcpy>
}
    9268:	4620      	mov	r0, r4
    926a:	b002      	add	sp, #8
    926c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    9270:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
    9274:	e7f8      	b.n	9268 <bt_gatt_attr_read_ccc+0x60>

00009276 <bt_gatt_attr_read_service>:
{
    9276:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
    9278:	68c9      	ldr	r1, [r1, #12]
{
    927a:	f8bd 5018 	ldrh.w	r5, [sp, #24]
    927e:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
    9280:	780a      	ldrb	r2, [r1, #0]
    9282:	b992      	cbnz	r2, 92aa <bt_gatt_attr_read_service+0x34>
		u16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
    9284:	884a      	ldrh	r2, [r1, #2]
    9286:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
    928a:	2d02      	cmp	r5, #2
    928c:	d819      	bhi.n	92c2 <bt_gatt_attr_read_service+0x4c>
	len = min(buf_len, value_len - offset);
    928e:	f1c5 0402 	rsb	r4, r5, #2
    9292:	429c      	cmp	r4, r3
    9294:	bfa8      	it	ge
    9296:	461c      	movge	r4, r3
	memcpy(buf, value + offset, len);
    9298:	f10d 0306 	add.w	r3, sp, #6
    929c:	4622      	mov	r2, r4
    929e:	1959      	adds	r1, r3, r5
    92a0:	f7f7 fa77 	bl	792 <memcpy>
}
    92a4:	4620      	mov	r0, r4
    92a6:	b003      	add	sp, #12
    92a8:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
    92aa:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
    92ac:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
    92b0:	d807      	bhi.n	92c2 <bt_gatt_attr_read_service+0x4c>
	len = min(buf_len, value_len - offset);
    92b2:	f1c5 0410 	rsb	r4, r5, #16
    92b6:	429c      	cmp	r4, r3
    92b8:	bfa8      	it	ge
    92ba:	461c      	movge	r4, r3
	memcpy(buf, value + offset, len);
    92bc:	4622      	mov	r2, r4
    92be:	4429      	add	r1, r5
    92c0:	e7ee      	b.n	92a0 <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    92c2:	f06f 0406 	mvn.w	r4, #6
    92c6:	e7ed      	b.n	92a4 <bt_gatt_attr_read_service+0x2e>

000092c8 <notify_cb>:
{
    92c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    92cc:	f642 1302 	movw	r3, #10498	; 0x2902
{
    92d0:	4605      	mov	r5, r0
    92d2:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    92d4:	2400      	movs	r4, #0
    92d6:	4669      	mov	r1, sp
    92d8:	6800      	ldr	r0, [r0, #0]
    92da:	f88d 4000 	strb.w	r4, [sp]
    92de:	f8ad 3002 	strh.w	r3, [sp, #2]
    92e2:	f7fa f8e7 	bl	34b4 <bt_uuid_cmp>
    92e6:	b178      	cbz	r0, 9308 <notify_cb+0x40>
		if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    92e8:	f642 0303 	movw	r3, #10243	; 0x2803
    92ec:	6828      	ldr	r0, [r5, #0]
    92ee:	f88d 4004 	strb.w	r4, [sp, #4]
    92f2:	a901      	add	r1, sp, #4
    92f4:	f8ad 3006 	strh.w	r3, [sp, #6]
    92f8:	f7fa f8dc 	bl	34b4 <bt_uuid_cmp>
			return BT_GATT_ITER_STOP;
    92fc:	1b00      	subs	r0, r0, r4
    92fe:	bf18      	it	ne
    9300:	2001      	movne	r0, #1
}
    9302:	b003      	add	sp, #12
    9304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (attr->write != bt_gatt_attr_write_ccc) {
    9308:	68aa      	ldr	r2, [r5, #8]
    930a:	4b2c      	ldr	r3, [pc, #176]	; (93bc <notify_cb+0xf4>)
    930c:	429a      	cmp	r2, r3
    930e:	d001      	beq.n	9314 <notify_cb+0x4c>
		return BT_GATT_ITER_CONTINUE;
    9310:	2001      	movs	r0, #1
    9312:	e7f6      	b.n	9302 <notify_cb+0x3a>
	ccc = attr->user_data;
    9314:	68ef      	ldr	r7, [r5, #12]
    9316:	4d2a      	ldr	r5, [pc, #168]	; (93c0 <notify_cb+0xf8>)
	for (i = 0; i < ccc->cfg_len; i++) {
    9318:	4604      	mov	r4, r0
    931a:	46a8      	mov	r8, r5
    931c:	4681      	mov	r9, r0
    931e:	687b      	ldr	r3, [r7, #4]
    9320:	429c      	cmp	r4, r3
    9322:	d2f5      	bcs.n	9310 <notify_cb+0x48>
		if (ccc->cfg[i].value != data->type) {
    9324:	6838      	ldr	r0, [r7, #0]
    9326:	88b3      	ldrh	r3, [r6, #4]
    9328:	eb00 1004 	add.w	r0, r0, r4, lsl #4
    932c:	8902      	ldrh	r2, [r0, #8]
    932e:	429a      	cmp	r2, r3
    9330:	d115      	bne.n	935e <notify_cb+0x96>
		conn = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    9332:	3001      	adds	r0, #1
    9334:	f7fd f894 	bl	6460 <bt_conn_lookup_addr_le>
		if (!conn) {
    9338:	4683      	mov	fp, r0
    933a:	b9f8      	cbnz	r0, 937c <notify_cb+0xb4>
			if (ccc->cfg == sc_ccc_cfg) {
    933c:	683b      	ldr	r3, [r7, #0]
    933e:	4543      	cmp	r3, r8
    9340:	d10d      	bne.n	935e <notify_cb+0x96>
				sc_save(&ccc->cfg[i], data->params);
    9342:	6973      	ldr	r3, [r6, #20]
	memcpy(&data, params->data, params->len);
    9344:	a801      	add	r0, sp, #4
    9346:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
    9348:	6a19      	ldr	r1, [r3, #32]
    934a:	f7f7 fa22 	bl	792 <memcpy>
	if (!stored->start && !stored->end) {
    934e:	89a8      	ldrh	r0, [r5, #12]
	data.end = sys_le16_to_cpu(data.end);
    9350:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    9354:	89ea      	ldrh	r2, [r5, #14]
	if (!stored->start && !stored->end) {
    9356:	b928      	cbnz	r0, 9364 <notify_cb+0x9c>
    9358:	b942      	cbnz	r2, 936c <notify_cb+0xa4>
		*stored = data;
    935a:	9801      	ldr	r0, [sp, #4]
    935c:	60e8      	str	r0, [r5, #12]
	for (i = 0; i < ccc->cfg_len; i++) {
    935e:	3401      	adds	r4, #1
    9360:	3510      	adds	r5, #16
    9362:	e7dc      	b.n	931e <notify_cb+0x56>
	data.start = sys_le16_to_cpu(data.start);
    9364:	f8bd 1004 	ldrh.w	r1, [sp, #4]
	if (new_start >= *start && new_end <= *end) {
    9368:	4281      	cmp	r1, r0
    936a:	d305      	bcc.n	9378 <notify_cb+0xb0>
    936c:	429a      	cmp	r2, r3
    936e:	d2f6      	bcs.n	935e <notify_cb+0x96>
	if (*end < new_end) {
    9370:	429a      	cmp	r2, r3
    9372:	d2f4      	bcs.n	935e <notify_cb+0x96>
		*end = new_end;
    9374:	81eb      	strh	r3, [r5, #14]
    9376:	e7f2      	b.n	935e <notify_cb+0x96>
		*start = new_start;
    9378:	81a9      	strh	r1, [r5, #12]
    937a:	e7f9      	b.n	9370 <notify_cb+0xa8>
		if (conn->state != BT_CONN_CONNECTED) {
    937c:	7b03      	ldrb	r3, [r0, #12]
    937e:	2b03      	cmp	r3, #3
    9380:	d002      	beq.n	9388 <notify_cb+0xc0>
			bt_conn_unref(conn);
    9382:	f7fd f8a9 	bl	64d8 <bt_conn_unref>
    9386:	e7ea      	b.n	935e <notify_cb+0x96>
		if (data->type == BT_GATT_CCC_INDICATE) {
    9388:	88b3      	ldrh	r3, [r6, #4]
    938a:	2b02      	cmp	r3, #2
    938c:	d10c      	bne.n	93a8 <notify_cb+0xe0>
			err = gatt_indicate(conn, data->params);
    938e:	6971      	ldr	r1, [r6, #20]
    9390:	f7ff fdc8 	bl	8f24 <gatt_indicate>
			err = gatt_notify(conn, data->attr->handle, data->data,
    9394:	4682      	mov	sl, r0
		bt_conn_unref(conn);
    9396:	4658      	mov	r0, fp
    9398:	f7fd f89e 	bl	64d8 <bt_conn_unref>
		if (err < 0) {
    939c:	f1ba 0f00 	cmp.w	sl, #0
    93a0:	db09      	blt.n	93b6 <notify_cb+0xee>
		data->err = 0;
    93a2:	f8c6 9000 	str.w	r9, [r6]
    93a6:	e7da      	b.n	935e <notify_cb+0x96>
			err = gatt_notify(conn, data->attr->handle, data->data,
    93a8:	68b1      	ldr	r1, [r6, #8]
    93aa:	8a33      	ldrh	r3, [r6, #16]
    93ac:	68f2      	ldr	r2, [r6, #12]
    93ae:	8a09      	ldrh	r1, [r1, #16]
    93b0:	f7ff fd7a 	bl	8ea8 <gatt_notify>
    93b4:	e7ee      	b.n	9394 <notify_cb+0xcc>
			return BT_GATT_ITER_STOP;
    93b6:	2000      	movs	r0, #0
    93b8:	e7a3      	b.n	9302 <notify_cb+0x3a>
    93ba:	bf00      	nop
    93bc:	00008d2d 	.word	0x00008d2d
    93c0:	20000734 	.word	0x20000734

000093c4 <bt_gatt_init>:
{
    93c4:	b508      	push	{r3, lr}
	gatt_register(&gap_svc);
    93c6:	4806      	ldr	r0, [pc, #24]	; (93e0 <bt_gatt_init+0x1c>)
    93c8:	f7ff fd22 	bl	8e10 <gatt_register>
	gatt_register(&gatt_svc);
    93cc:	4805      	ldr	r0, [pc, #20]	; (93e4 <bt_gatt_init+0x20>)
    93ce:	f7ff fd1f 	bl	8e10 <gatt_register>
	k_delayed_work_init(&gatt_sc.work, sc_process);
    93d2:	4905      	ldr	r1, [pc, #20]	; (93e8 <bt_gatt_init+0x24>)
    93d4:	4805      	ldr	r0, [pc, #20]	; (93ec <bt_gatt_init+0x28>)
}
    93d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_delayed_work_init(&gatt_sc.work, sc_process);
    93da:	f018 bf13 	b.w	22204 <k_delayed_work_init>
    93de:	bf00      	nop
    93e0:	20009f24 	.word	0x20009f24
    93e4:	20009f80 	.word	0x20009f80
    93e8:	000094d5 	.word	0x000094d5
    93ec:	20000708 	.word	0x20000708

000093f0 <bt_gatt_service_register>:
{
    93f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
    93f2:	6803      	ldr	r3, [r0, #0]
{
    93f4:	4604      	mov	r4, r0
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
    93f6:	2500      	movs	r5, #0
    93f8:	6818      	ldr	r0, [r3, #0]
    93fa:	f88d 5000 	strb.w	r5, [sp]
    93fe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    9402:	4669      	mov	r1, sp
    9404:	f8ad 3002 	strh.w	r3, [sp, #2]
    9408:	f7fa f854 	bl	34b4 <bt_uuid_cmp>
    940c:	b918      	cbnz	r0, 9416 <bt_gatt_service_register+0x26>
		return -EALREADY;
    940e:	f06f 0044 	mvn.w	r0, #68	; 0x44
}
    9412:	b003      	add	sp, #12
    9414:	bd30      	pop	{r4, r5, pc}
	    !bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GATT)) {
    9416:	6823      	ldr	r3, [r4, #0]
    9418:	a901      	add	r1, sp, #4
    941a:	6818      	ldr	r0, [r3, #0]
    941c:	f88d 5004 	strb.w	r5, [sp, #4]
    9420:	f641 0301 	movw	r3, #6145	; 0x1801
    9424:	f8ad 3006 	strh.w	r3, [sp, #6]
    9428:	f7fa f844 	bl	34b4 <bt_uuid_cmp>
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
    942c:	2800      	cmp	r0, #0
    942e:	d0ee      	beq.n	940e <bt_gatt_service_register+0x1e>
	err = gatt_register(svc);
    9430:	4620      	mov	r0, r4
    9432:	f7ff fced 	bl	8e10 <gatt_register>
	if (err < 0) {
    9436:	2800      	cmp	r0, #0
    9438:	dbeb      	blt.n	9412 <bt_gatt_service_register+0x22>
	sc_indicate(&gatt_sc, svc->attrs[0].handle,
    943a:	6822      	ldr	r2, [r4, #0]
		    svc->attrs[svc->attr_count - 1].handle);
    943c:	88a3      	ldrh	r3, [r4, #4]
	sc_indicate(&gatt_sc, svc->attrs[0].handle,
    943e:	8a10      	ldrh	r0, [r2, #16]
    9440:	2114      	movs	r1, #20
    9442:	fb01 2303 	mla	r3, r1, r3, r2
    9446:	f833 1c04 	ldrh.w	r1, [r3, #-4]
    944a:	f7ff fdc5 	bl	8fd8 <sc_indicate.constprop.17>
	return 0;
    944e:	4628      	mov	r0, r5
    9450:	e7df      	b.n	9412 <bt_gatt_service_register+0x22>
	...

00009454 <bt_gatt_foreach_attr>:
{
    9454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9458:	4699      	mov	r9, r3
    945a:	4b12      	ldr	r3, [pc, #72]	; (94a4 <bt_gatt_foreach_attr+0x50>)
    945c:	681c      	ldr	r4, [r3, #0]
    945e:	4606      	mov	r6, r0
    9460:	460f      	mov	r7, r1
    9462:	4690      	mov	r8, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    9464:	b1dc      	cbz	r4, 949e <bt_gatt_foreach_attr+0x4a>
    9466:	3c08      	subs	r4, #8
			struct bt_gatt_attr *attr = &svc->attrs[i];
    9468:	f04f 0a14 	mov.w	sl, #20
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    946c:	b1bc      	cbz	r4, 949e <bt_gatt_foreach_attr+0x4a>
    946e:	2500      	movs	r5, #0
    9470:	e006      	b.n	9480 <bt_gatt_foreach_attr+0x2c>
			struct bt_gatt_attr *attr = &svc->attrs[i];
    9472:	6820      	ldr	r0, [r4, #0]
    9474:	fb0a 0005 	mla	r0, sl, r5, r0
			if (attr->handle < start_handle ||
    9478:	8a03      	ldrh	r3, [r0, #16]
    947a:	42b3      	cmp	r3, r6
    947c:	d207      	bcs.n	948e <bt_gatt_foreach_attr+0x3a>
		for (i = 0; i < svc->attr_count; i++) {
    947e:	3501      	adds	r5, #1
    9480:	88a3      	ldrh	r3, [r4, #4]
    9482:	429d      	cmp	r5, r3
    9484:	dbf5      	blt.n	9472 <bt_gatt_foreach_attr+0x1e>
	return node->next;
    9486:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    9488:	b14c      	cbz	r4, 949e <bt_gatt_foreach_attr+0x4a>
    948a:	3c08      	subs	r4, #8
    948c:	e7ee      	b.n	946c <bt_gatt_foreach_attr+0x18>
			if (attr->handle < start_handle ||
    948e:	42bb      	cmp	r3, r7
    9490:	d8f5      	bhi.n	947e <bt_gatt_foreach_attr+0x2a>
			if (func(attr, user_data) == BT_GATT_ITER_STOP) {
    9492:	4649      	mov	r1, r9
    9494:	47c0      	blx	r8
    9496:	2800      	cmp	r0, #0
    9498:	d1f1      	bne.n	947e <bt_gatt_foreach_attr+0x2a>
    949a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    949e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    94a2:	bf00      	nop
    94a4:	200006d4 	.word	0x200006d4

000094a8 <bt_gatt_indicate.part.10>:
int bt_gatt_indicate(struct bt_conn *conn,
    94a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	nfy.err = -ENOTCONN;
    94aa:	f06f 0338 	mvn.w	r3, #56	; 0x38
	nfy.params = params;
    94ae:	9005      	str	r0, [sp, #20]
	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    94b0:	6980      	ldr	r0, [r0, #24]
	nfy.err = -ENOTCONN;
    94b2:	9300      	str	r3, [sp, #0]
	nfy.type = BT_GATT_CCC_INDICATE;
    94b4:	2302      	movs	r3, #2
    94b6:	f8ad 3004 	strh.w	r3, [sp, #4]
	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    94ba:	4a05      	ldr	r2, [pc, #20]	; (94d0 <bt_gatt_indicate.part.10+0x28>)
    94bc:	8a00      	ldrh	r0, [r0, #16]
    94be:	466b      	mov	r3, sp
    94c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    94c4:	f7ff ffc6 	bl	9454 <bt_gatt_foreach_attr>
}
    94c8:	9800      	ldr	r0, [sp, #0]
    94ca:	b007      	add	sp, #28
    94cc:	f85d fb04 	ldr.w	pc, [sp], #4
    94d0:	000092c9 	.word	0x000092c9

000094d4 <sc_process>:
{
    94d4:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
    94d6:	f830 2c04 	ldrh.w	r2, [r0, #-4]
    94da:	f8ad 2004 	strh.w	r2, [sp, #4]
{
    94de:	4603      	mov	r3, r0
	sc_range[1] = sys_cpu_to_le16(sc->end);
    94e0:	f830 2c02 	ldrh.w	r2, [r0, #-2]
    94e4:	f8ad 2006 	strh.w	r2, [sp, #6]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    94e8:	382c      	subs	r0, #44	; 0x2c
    94ea:	f103 0428 	add.w	r4, r3, #40	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    94ee:	f3bf 8f5b 	dmb	ish
    94f2:	e854 2f00 	ldrex	r2, [r4]
    94f6:	f022 0201 	bic.w	r2, r2, #1
    94fa:	e844 2100 	strex	r1, r2, [r4]
    94fe:	2900      	cmp	r1, #0
    9500:	d1f7      	bne.n	94f2 <sc_process+0x1e>
    9502:	f3bf 8f5b 	dmb	ish
	sc->start = 0;
    9506:	2200      	movs	r2, #0
    9508:	f823 2c04 	strh.w	r2, [r3, #-4]
	sc->end = 0;
    950c:	f823 2c02 	strh.w	r2, [r3, #-2]
	sc->params.attr = &gatt_attrs[2];
    9510:	4a0e      	ldr	r2, [pc, #56]	; (954c <sc_process+0x78>)
    9512:	f843 2c14 	str.w	r2, [r3, #-20]
	sc->params.func = sc_indicate_rsp;
    9516:	4a0e      	ldr	r2, [pc, #56]	; (9550 <sc_process+0x7c>)
    9518:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.data = &sc_range[0];
    951c:	aa01      	add	r2, sp, #4
    951e:	f843 2c0c 	str.w	r2, [r3, #-12]
	sc->params.len = sizeof(sc_range);
    9522:	2204      	movs	r2, #4
    9524:	f823 2c08 	strh.w	r2, [r3, #-8]
    9528:	f7ff ffbe 	bl	94a8 <bt_gatt_indicate.part.10>
	if (bt_gatt_indicate(NULL, &sc->params)) {
    952c:	b958      	cbnz	r0, 9546 <sc_process+0x72>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    952e:	f3bf 8f5b 	dmb	ish
    9532:	e854 3f00 	ldrex	r3, [r4]
    9536:	f043 0302 	orr.w	r3, r3, #2
    953a:	e844 3200 	strex	r2, r3, [r4]
    953e:	2a00      	cmp	r2, #0
    9540:	d1f7      	bne.n	9532 <sc_process+0x5e>
    9542:	f3bf 8f5b 	dmb	ish
}
    9546:	b002      	add	sp, #8
    9548:	bd10      	pop	{r4, pc}
    954a:	bf00      	nop
    954c:	20009f58 	.word	0x20009f58
    9550:	000090b5 	.word	0x000090b5

00009554 <bt_gatt_attr_next>:
{
    9554:	b507      	push	{r0, r1, r2, lr}
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    9556:	8a01      	ldrh	r1, [r0, #16]
	struct bt_gatt_attr *next = NULL;
    9558:	ab02      	add	r3, sp, #8
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    955a:	3101      	adds	r1, #1
    955c:	b289      	uxth	r1, r1
	struct bt_gatt_attr *next = NULL;
    955e:	2200      	movs	r2, #0
    9560:	f843 2d04 	str.w	r2, [r3, #-4]!
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    9564:	4608      	mov	r0, r1
    9566:	4a03      	ldr	r2, [pc, #12]	; (9574 <bt_gatt_attr_next+0x20>)
    9568:	f7ff ff74 	bl	9454 <bt_gatt_foreach_attr>
}
    956c:	9801      	ldr	r0, [sp, #4]
    956e:	b003      	add	sp, #12
    9570:	f85d fb04 	ldr.w	pc, [sp], #4
    9574:	00008ce5 	.word	0x00008ce5

00009578 <bt_gatt_attr_read_chrc>:
{
    9578:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
    957c:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
    9580:	b08b      	sub	sp, #44	; 0x2c
    9582:	461c      	mov	r4, r3
	next = bt_gatt_attr_next(attr);
    9584:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
    9586:	f899 3004 	ldrb.w	r3, [r9, #4]
{
    958a:	f8bd 6048 	ldrh.w	r6, [sp, #72]	; 0x48
	pdu.properties = chrc->properties;
    958e:	f88d 3014 	strb.w	r3, [sp, #20]
{
    9592:	4688      	mov	r8, r1
    9594:	4617      	mov	r7, r2
	next = bt_gatt_attr_next(attr);
    9596:	f7ff ffdd 	bl	9554 <bt_gatt_attr_next>
	if (!next) {
    959a:	4605      	mov	r5, r0
    959c:	bb40      	cbnz	r0, 95f0 <bt_gatt_attr_read_chrc+0x78>
		BT_WARN("No value for characteristic at 0x%04x", attr->handle);
    959e:	4b1c      	ldr	r3, [pc, #112]	; (9610 <bt_gatt_attr_read_chrc+0x98>)
    95a0:	f8b8 2010 	ldrh.w	r2, [r8, #16]
    95a4:	9302      	str	r3, [sp, #8]
    95a6:	9201      	str	r2, [sp, #4]
    95a8:	9300      	str	r3, [sp, #0]
    95aa:	4a1a      	ldr	r2, [pc, #104]	; (9614 <bt_gatt_attr_read_chrc+0x9c>)
    95ac:	4b1a      	ldr	r3, [pc, #104]	; (9618 <bt_gatt_attr_read_chrc+0xa0>)
    95ae:	491b      	ldr	r1, [pc, #108]	; (961c <bt_gatt_attr_read_chrc+0xa4>)
    95b0:	481b      	ldr	r0, [pc, #108]	; (9620 <bt_gatt_attr_read_chrc+0xa8>)
    95b2:	f7f8 fe6f 	bl	2294 <printk>
		pdu.value_handle = 0x0000;
    95b6:	f88d 5015 	strb.w	r5, [sp, #21]
    95ba:	f88d 5016 	strb.w	r5, [sp, #22]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
    95be:	f8d9 1000 	ldr.w	r1, [r9]
    95c2:	780b      	ldrb	r3, [r1, #0]
    95c4:	b9c3      	cbnz	r3, 95f8 <bt_gatt_attr_read_chrc+0x80>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
    95c6:	884b      	ldrh	r3, [r1, #2]
    95c8:	f8ad 3017 	strh.w	r3, [sp, #23]
		value_len += 2;
    95cc:	2305      	movs	r3, #5
	if (offset > value_len) {
    95ce:	42b3      	cmp	r3, r6
    95d0:	d31a      	bcc.n	9608 <bt_gatt_attr_read_chrc+0x90>
	len = min(buf_len, value_len - offset);
    95d2:	1b9b      	subs	r3, r3, r6
    95d4:	42a3      	cmp	r3, r4
    95d6:	bfa8      	it	ge
    95d8:	4623      	movge	r3, r4
    95da:	b29c      	uxth	r4, r3
	memcpy(buf, value + offset, len);
    95dc:	ab05      	add	r3, sp, #20
    95de:	4622      	mov	r2, r4
    95e0:	1999      	adds	r1, r3, r6
    95e2:	4638      	mov	r0, r7
    95e4:	f7f7 f8d5 	bl	792 <memcpy>
}
    95e8:	4620      	mov	r0, r4
    95ea:	b00b      	add	sp, #44	; 0x2c
    95ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		pdu.value_handle = sys_cpu_to_le16(next->handle);
    95f0:	8a03      	ldrh	r3, [r0, #16]
    95f2:	f8ad 3015 	strh.w	r3, [sp, #21]
    95f6:	e7e2      	b.n	95be <bt_gatt_attr_read_chrc+0x46>
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
    95f8:	2210      	movs	r2, #16
    95fa:	3101      	adds	r1, #1
    95fc:	f10d 0017 	add.w	r0, sp, #23
    9600:	f7f7 f8c7 	bl	792 <memcpy>
		value_len += 16;
    9604:	2313      	movs	r3, #19
    9606:	e7e2      	b.n	95ce <bt_gatt_attr_read_chrc+0x56>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    9608:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
    960c:	e7ec      	b.n	95e8 <bt_gatt_attr_read_chrc+0x70>
    960e:	bf00      	nop
    9610:	00023dae 	.word	0x00023dae
    9614:	00024006 	.word	0x00024006
    9618:	00024dfa 	.word	0x00024dfa
    961c:	000272d8 	.word	0x000272d8
    9620:	00024e4c 	.word	0x00024e4c

00009624 <bt_gatt_connected>:
#endif /* CONFIG_BT_GATT_CLIENT */

void bt_gatt_connected(struct bt_conn *conn)
{
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, connected_cb, conn);
    9624:	4603      	mov	r3, r0
    9626:	4a03      	ldr	r2, [pc, #12]	; (9634 <bt_gatt_connected+0x10>)
    9628:	f64f 71ff 	movw	r1, #65535	; 0xffff
    962c:	2001      	movs	r0, #1
    962e:	f7ff bf11 	b.w	9454 <bt_gatt_foreach_attr>
    9632:	bf00      	nop
    9634:	00009045 	.word	0x00009045

00009638 <bt_gatt_disconnected>:
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    9638:	4603      	mov	r3, r0
    963a:	4a03      	ldr	r2, [pc, #12]	; (9648 <bt_gatt_disconnected+0x10>)
    963c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    9640:	2001      	movs	r0, #1
    9642:	f7ff bf07 	b.w	9454 <bt_gatt_foreach_attr>
    9646:	bf00      	nop
    9648:	0000912d 	.word	0x0000912d

0000964c <sys_memcpy_swap>:
{
	__ASSERT(((src < dst && (src + length) <= dst) ||
		  (src > dst && (dst + length) <= src)),
		 "Source and destination buffers must not overlap");

	src += length - 1;
    964c:	1e53      	subs	r3, r2, #1
    964e:	4419      	add	r1, r3
    9650:	3801      	subs	r0, #1
    9652:	1a52      	subs	r2, r2, r1

	for (; length > 0; length--) {
    9654:	42d1      	cmn	r1, r2
    9656:	d100      	bne.n	965a <sys_memcpy_swap+0xe>
		*((u8_t *)dst++) = *((u8_t *)src--);
	}
}
    9658:	4770      	bx	lr
		*((u8_t *)dst++) = *((u8_t *)src--);
    965a:	f811 3901 	ldrb.w	r3, [r1], #-1
    965e:	f800 3f01 	strb.w	r3, [r0, #1]!
    9662:	e7f7      	b.n	9654 <sys_memcpy_swap+0x8>

00009664 <get_io_capa>:
static bool sc_local_pkey_valid;
static u8_t sc_public_key[64];

static u8_t get_io_capa(void)
{
	if (!bt_auth) {
    9664:	4b10      	ldr	r3, [pc, #64]	; (96a8 <get_io_capa+0x44>)
    9666:	681b      	ldr	r3, [r3, #0]
    9668:	b1ab      	cbz	r3, 9696 <get_io_capa+0x32>
		return BT_SMP_IO_NO_INPUT_OUTPUT;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
    966a:	681a      	ldr	r2, [r3, #0]
    966c:	b132      	cbz	r2, 967c <get_io_capa+0x18>
    966e:	6859      	ldr	r1, [r3, #4]
    9670:	b121      	cbz	r1, 967c <get_io_capa+0x18>
    9672:	6899      	ldr	r1, [r3, #8]
    9674:	b989      	cbnz	r1, 969a <get_io_capa+0x36>
	    (bt_auth->passkey_confirm || !sc_supported)) {
    9676:	490d      	ldr	r1, [pc, #52]	; (96ac <get_io_capa+0x48>)
    9678:	7809      	ldrb	r1, [r1, #0]
    967a:	b171      	cbz	r1, 969a <get_io_capa+0x36>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
    967c:	490b      	ldr	r1, [pc, #44]	; (96ac <get_io_capa+0x48>)
    967e:	7809      	ldrb	r1, [r1, #0]
    9680:	b111      	cbz	r1, 9688 <get_io_capa+0x24>
    9682:	b10a      	cbz	r2, 9688 <get_io_capa+0x24>
    9684:	6899      	ldr	r1, [r3, #8]
    9686:	b951      	cbnz	r1, 969e <get_io_capa+0x3a>
	    bt_auth->passkey_confirm) {
		return BT_SMP_IO_DISPLAY_YESNO;
	}

	if (bt_auth->passkey_entry) {
    9688:	685b      	ldr	r3, [r3, #4]
    968a:	b953      	cbnz	r3, 96a2 <get_io_capa+0x3e>
		return BT_SMP_IO_KEYBOARD_ONLY;
	}

	if (bt_auth->passkey_display) {
		return BT_SMP_IO_DISPLAY_ONLY;
    968c:	2a00      	cmp	r2, #0
    968e:	bf0c      	ite	eq
    9690:	2003      	moveq	r0, #3
    9692:	2000      	movne	r0, #0
    9694:	4770      	bx	lr
	}

	return BT_SMP_IO_NO_INPUT_OUTPUT;
    9696:	2003      	movs	r0, #3
    9698:	4770      	bx	lr
		return BT_SMP_IO_KEYBOARD_DISPLAY;
    969a:	2004      	movs	r0, #4
    969c:	4770      	bx	lr
		return BT_SMP_IO_DISPLAY_YESNO;
    969e:	2001      	movs	r0, #1
    96a0:	4770      	bx	lr
		return BT_SMP_IO_KEYBOARD_ONLY;
    96a2:	2002      	movs	r0, #2
}
    96a4:	4770      	bx	lr
    96a6:	bf00      	nop
    96a8:	20003128 	.word	0x20003128
    96ac:	20000939 	.word	0x20000939

000096b0 <get_auth>:
	return 0;
}

static u8_t get_auth(u8_t auth)
{
	if (sc_supported) {
    96b0:	4b08      	ldr	r3, [pc, #32]	; (96d4 <get_auth+0x24>)
    96b2:	781b      	ldrb	r3, [r3, #0]
{
    96b4:	b510      	push	{r4, lr}
	if (sc_supported) {
    96b6:	b153      	cbz	r3, 96ce <get_auth+0x1e>
		auth &= BT_SMP_AUTH_MASK_SC;
    96b8:	f000 040f 	and.w	r4, r0, #15
	} else {
		auth &= BT_SMP_AUTH_MASK;
	}

	if (get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) {
    96bc:	f7ff ffd2 	bl	9664 <get_io_capa>
    96c0:	2803      	cmp	r0, #3
		auth &= ~(BT_SMP_AUTH_MITM);
    96c2:	bf0c      	ite	eq
    96c4:	f004 000b 	andeq.w	r0, r4, #11
	} else {
		auth |= BT_SMP_AUTH_MITM;
    96c8:	f044 0004 	orrne.w	r0, r4, #4
	}

	return auth;
}
    96cc:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
    96ce:	f000 0407 	and.w	r4, r0, #7
    96d2:	e7f3      	b.n	96bc <get_auth+0xc>
    96d4:	20000939 	.word	0x20000939

000096d8 <smp_signing_info>:
}
#else
static u8_t smp_signing_info(struct bt_smp *smp, struct net_buf *buf)
{
	return BT_SMP_ERR_CMD_NOTSUPP;
}
    96d8:	2007      	movs	r0, #7
    96da:	4770      	bx	lr

000096dc <bt_smp_accept>:

	return true;
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    96dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
    96de:	4a0b      	ldr	r2, [pc, #44]	; (970c <bt_smp_accept+0x30>)
    96e0:	6813      	ldr	r3, [r2, #0]
    96e2:	b933      	cbnz	r3, 96f2 <bt_smp_accept+0x16>
			continue;
		}

		smp->chan.chan.ops = &ops;
    96e4:	480a      	ldr	r0, [pc, #40]	; (9710 <bt_smp_accept+0x34>)
    96e6:	6050      	str	r0, [r2, #4]

		*chan = &smp->chan.chan;
    96e8:	600a      	str	r2, [r1, #0]

		return 0;
    96ea:	4618      	mov	r0, r3
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
    96ec:	b005      	add	sp, #20
    96ee:	f85d fb04 	ldr.w	pc, [sp], #4
	BT_ERR("No available SMP context for conn %p", conn);
    96f2:	4b08      	ldr	r3, [pc, #32]	; (9714 <bt_smp_accept+0x38>)
    96f4:	9302      	str	r3, [sp, #8]
    96f6:	9001      	str	r0, [sp, #4]
    96f8:	9300      	str	r3, [sp, #0]
    96fa:	4a07      	ldr	r2, [pc, #28]	; (9718 <bt_smp_accept+0x3c>)
    96fc:	4b07      	ldr	r3, [pc, #28]	; (971c <bt_smp_accept+0x40>)
    96fe:	4908      	ldr	r1, [pc, #32]	; (9720 <bt_smp_accept+0x44>)
    9700:	4808      	ldr	r0, [pc, #32]	; (9724 <bt_smp_accept+0x48>)
    9702:	f7f8 fdc7 	bl	2294 <printk>
	return -ENOMEM;
    9706:	f06f 000b 	mvn.w	r0, #11
    970a:	e7ef      	b.n	96ec <bt_smp_accept+0x10>
    970c:	20000754 	.word	0x20000754
    9710:	20009f98 	.word	0x20009f98
    9714:	00023dae 	.word	0x00023dae
    9718:	00022d76 	.word	0x00022d76
    971c:	000250a2 	.word	0x000250a2
    9720:	000272d8 	.word	0x000272d8
    9724:	000250b0 	.word	0x000250b0

00009728 <atomic_test_bit>:
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    9728:	094b      	lsrs	r3, r1, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    972a:	f3bf 8f5b 	dmb	ish
    972e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    9732:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    9736:	f001 011f 	and.w	r1, r1, #31
    973a:	4108      	asrs	r0, r1
}
    973c:	f000 0001 	and.w	r0, r0, #1
    9740:	4770      	bx	lr

00009742 <atomic_set_bit>:
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    9742:	094b      	lsrs	r3, r1, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
    9744:	2201      	movs	r2, #1
    9746:	f001 011f 	and.w	r1, r1, #31
    974a:	fa02 f101 	lsl.w	r1, r2, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    974e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    9752:	f3bf 8f5b 	dmb	ish
    9756:	e850 3f00 	ldrex	r3, [r0]
    975a:	430b      	orrs	r3, r1
    975c:	e840 3200 	strex	r2, r3, [r0]
    9760:	2a00      	cmp	r2, #0
    9762:	d1f8      	bne.n	9756 <atomic_set_bit+0x14>
    9764:	f3bf 8f5b 	dmb	ish
    9768:	4770      	bx	lr

0000976a <smp_init>:
{
    976a:	b538      	push	{r3, r4, r5, lr}
	memset((u8_t *)smp + sizeof(smp->chan), 0,
    976c:	f100 059c 	add.w	r5, r0, #156	; 0x9c
{
    9770:	4604      	mov	r4, r0
	memset((u8_t *)smp + sizeof(smp->chan), 0,
    9772:	22e0      	movs	r2, #224	; 0xe0
    9774:	2100      	movs	r1, #0
    9776:	4628      	mov	r0, r5
    9778:	f7f7 f837 	bl	7ea <memset>
	if (bt_rand(smp->prnd, 16)) {
    977c:	f104 00c3 	add.w	r0, r4, #195	; 0xc3
    9780:	2110      	movs	r1, #16
    9782:	f003 f863 	bl	c84c <bt_rand>
    9786:	4604      	mov	r4, r0
    9788:	b928      	cbnz	r0, 9796 <smp_init+0x2c>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
    978a:	2105      	movs	r1, #5
    978c:	4628      	mov	r0, r5
    978e:	f7ff ffd8 	bl	9742 <atomic_set_bit>
}
    9792:	4620      	mov	r0, r4
    9794:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    9796:	2408      	movs	r4, #8
    9798:	e7fb      	b.n	9792 <smp_init+0x28>

0000979a <bt_smp_aes_cmac>:
{
    979a:	b570      	push	{r4, r5, r6, lr}
    979c:	b0c2      	sub	sp, #264	; 0x108
    979e:	460d      	mov	r5, r1
    97a0:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
    97a2:	4601      	mov	r1, r0
    97a4:	aa16      	add	r2, sp, #88	; 0x58
    97a6:	4668      	mov	r0, sp
{
    97a8:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
    97aa:	f7f8 ff6b 	bl	2684 <tc_cmac_setup>
    97ae:	b918      	cbnz	r0, 97b8 <bt_smp_aes_cmac+0x1e>
		return -EIO;
    97b0:	f06f 0004 	mvn.w	r0, #4
}
    97b4:	b042      	add	sp, #264	; 0x108
    97b6:	bd70      	pop	{r4, r5, r6, pc}
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
    97b8:	4632      	mov	r2, r6
    97ba:	4629      	mov	r1, r5
    97bc:	4668      	mov	r0, sp
    97be:	f7f8 ff8d 	bl	26dc <tc_cmac_update>
    97c2:	2800      	cmp	r0, #0
    97c4:	d0f4      	beq.n	97b0 <bt_smp_aes_cmac+0x16>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
    97c6:	4669      	mov	r1, sp
    97c8:	4620      	mov	r0, r4
    97ca:	f7f8 ffeb 	bl	27a4 <tc_cmac_final>
    97ce:	2800      	cmp	r0, #0
    97d0:	d0ee      	beq.n	97b0 <bt_smp_aes_cmac+0x16>
	return 0;
    97d2:	2000      	movs	r0, #0
    97d4:	e7ee      	b.n	97b4 <bt_smp_aes_cmac+0x1a>
	...

000097d8 <smp_g2>:
{
    97d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    97da:	b099      	sub	sp, #100	; 0x64
    97dc:	4615      	mov	r5, r2
    97de:	460f      	mov	r7, r1
	sys_memcpy_swap(m, u, 32);
    97e0:	2220      	movs	r2, #32
    97e2:	4601      	mov	r1, r0
    97e4:	a804      	add	r0, sp, #16
{
    97e6:	461e      	mov	r6, r3
    97e8:	9c1e      	ldr	r4, [sp, #120]	; 0x78
	sys_memcpy_swap(m, u, 32);
    97ea:	f7ff ff2f 	bl	964c <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
    97ee:	2220      	movs	r2, #32
    97f0:	4639      	mov	r1, r7
    97f2:	a80c      	add	r0, sp, #48	; 0x30
    97f4:	f7ff ff2a 	bl	964c <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
    97f8:	2210      	movs	r2, #16
    97fa:	4631      	mov	r1, r6
    97fc:	a814      	add	r0, sp, #80	; 0x50
    97fe:	f7ff ff25 	bl	964c <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
    9802:	4629      	mov	r1, r5
    9804:	2210      	movs	r2, #16
    9806:	4668      	mov	r0, sp
    9808:	f7ff ff20 	bl	964c <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
    980c:	466b      	mov	r3, sp
    980e:	2250      	movs	r2, #80	; 0x50
    9810:	a904      	add	r1, sp, #16
    9812:	4668      	mov	r0, sp
    9814:	f7ff ffc1 	bl	979a <bt_smp_aes_cmac>
	if (err) {
    9818:	4605      	mov	r5, r0
    981a:	b960      	cbnz	r0, 9836 <smp_g2+0x5e>
	memcpy(passkey, xs + 12, 4);
    981c:	2204      	movs	r2, #4
    981e:	a903      	add	r1, sp, #12
    9820:	4620      	mov	r0, r4
    9822:	f7f6 ffb6 	bl	792 <memcpy>
    9826:	6823      	ldr	r3, [r4, #0]
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    9828:	4904      	ldr	r1, [pc, #16]	; (983c <smp_g2+0x64>)
    982a:	ba1b      	rev	r3, r3
    982c:	fbb3 f2f1 	udiv	r2, r3, r1
    9830:	fb01 3312 	mls	r3, r1, r2, r3
    9834:	6023      	str	r3, [r4, #0]
}
    9836:	4628      	mov	r0, r5
    9838:	b019      	add	sp, #100	; 0x64
    983a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    983c:	000f4240 	.word	0x000f4240

00009840 <bt_smp_disconnected>:
{
    9840:	b538      	push	{r3, r4, r5, lr}
	struct bt_keys *keys = chan->conn->le.keys;
    9842:	6803      	ldr	r3, [r0, #0]
    9844:	6f1c      	ldr	r4, [r3, #112]	; 0x70
{
    9846:	4605      	mov	r5, r0
	k_delayed_work_cancel(&smp->work);
    9848:	f500 70be 	add.w	r0, r0, #380	; 0x17c
    984c:	f018 fcf8 	bl	22240 <k_delayed_work_cancel>
	if (keys) {
    9850:	b124      	cbz	r4, 985c <bt_smp_disconnected+0x1c>
		if (!keys->keys ||
    9852:	89a3      	ldrh	r3, [r4, #12]
    9854:	b953      	cbnz	r3, 986c <bt_smp_disconnected+0x2c>
			bt_keys_clear(keys);
    9856:	4620      	mov	r0, r4
    9858:	f001 ff00 	bl	b65c <bt_keys_clear>
	memset(smp, 0, sizeof(*smp));
    985c:	4628      	mov	r0, r5
    985e:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
    9862:	2100      	movs	r1, #0
}
    9864:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memset(smp, 0, sizeof(*smp));
    9868:	f7f6 bfbf 	b.w	7ea <memset>
		    atomic_test_bit(keys->flags, BT_KEYS_DEBUG)) {
    986c:	2101      	movs	r1, #1
    986e:	f104 0008 	add.w	r0, r4, #8
    9872:	f7ff ff59 	bl	9728 <atomic_test_bit>
		if (!keys->keys ||
    9876:	2800      	cmp	r0, #0
    9878:	d1ed      	bne.n	9856 <bt_smp_disconnected+0x16>
    987a:	e7ef      	b.n	985c <bt_smp_disconnected+0x1c>

0000987c <smp_ident_info>:
{
    987c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    987e:	4605      	mov	r5, r0
    9880:	460a      	mov	r2, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    9882:	30a0      	adds	r0, #160	; 0xa0
    9884:	210a      	movs	r1, #10
    9886:	f7ff ff4f 	bl	9728 <atomic_test_bit>
    988a:	b1e0      	cbz	r0, 98c6 <smp_ident_info+0x4a>
		keys = bt_keys_get_type(BT_KEYS_IRK, &conn->le.dst);
    988c:	682c      	ldr	r4, [r5, #0]
		struct bt_smp_ident_info *req = (void *)buf->data;
    988e:	6896      	ldr	r6, [r2, #8]
		keys = bt_keys_get_type(BT_KEYS_IRK, &conn->le.dst);
    9890:	3448      	adds	r4, #72	; 0x48
    9892:	4621      	mov	r1, r4
    9894:	2002      	movs	r0, #2
    9896:	f001 ff27 	bl	b6e8 <bt_keys_get_type>
		if (!keys) {
    989a:	b978      	cbnz	r0, 98bc <smp_ident_info+0x40>
			BT_ERR("Unable to get keys for %s",
    989c:	4620      	mov	r0, r4
    989e:	f7f9 fd37 	bl	3310 <bt_addr_le_str>
    98a2:	4b0c      	ldr	r3, [pc, #48]	; (98d4 <smp_ident_info+0x58>)
    98a4:	9302      	str	r3, [sp, #8]
    98a6:	9001      	str	r0, [sp, #4]
    98a8:	9300      	str	r3, [sp, #0]
    98aa:	4a0b      	ldr	r2, [pc, #44]	; (98d8 <smp_ident_info+0x5c>)
    98ac:	4b0b      	ldr	r3, [pc, #44]	; (98dc <smp_ident_info+0x60>)
    98ae:	490c      	ldr	r1, [pc, #48]	; (98e0 <smp_ident_info+0x64>)
    98b0:	480c      	ldr	r0, [pc, #48]	; (98e4 <smp_ident_info+0x68>)
    98b2:	f7f8 fcef 	bl	2294 <printk>
			return BT_SMP_ERR_UNSPECIFIED;
    98b6:	2008      	movs	r0, #8
}
    98b8:	b004      	add	sp, #16
    98ba:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->irk.val, req->irk, 16);
    98bc:	2210      	movs	r2, #16
    98be:	4631      	mov	r1, r6
    98c0:	3030      	adds	r0, #48	; 0x30
    98c2:	f7f6 ff66 	bl	792 <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
    98c6:	f105 009c 	add.w	r0, r5, #156	; 0x9c
    98ca:	2109      	movs	r1, #9
    98cc:	f7ff ff39 	bl	9742 <atomic_set_bit>
	return 0;
    98d0:	2000      	movs	r0, #0
    98d2:	e7f1      	b.n	98b8 <smp_ident_info+0x3c>
    98d4:	00023dae 	.word	0x00023dae
    98d8:	00022d76 	.word	0x00022d76
    98dc:	0002502a 	.word	0x0002502a
    98e0:	000272d8 	.word	0x000272d8
    98e4:	00025413 	.word	0x00025413

000098e8 <smp_encrypt_info>:
{
    98e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    98ea:	4605      	mov	r5, r0
    98ec:	460a      	mov	r2, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    98ee:	30a0      	adds	r0, #160	; 0xa0
    98f0:	210a      	movs	r1, #10
    98f2:	f7ff ff19 	bl	9728 <atomic_test_bit>
    98f6:	b1e0      	cbz	r0, 9932 <smp_encrypt_info+0x4a>
		keys = bt_keys_get_type(BT_KEYS_LTK, &conn->le.dst);
    98f8:	682c      	ldr	r4, [r5, #0]
		struct bt_smp_encrypt_info *req = (void *)buf->data;
    98fa:	6896      	ldr	r6, [r2, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, &conn->le.dst);
    98fc:	3448      	adds	r4, #72	; 0x48
    98fe:	4621      	mov	r1, r4
    9900:	2004      	movs	r0, #4
    9902:	f001 fef1 	bl	b6e8 <bt_keys_get_type>
		if (!keys) {
    9906:	b978      	cbnz	r0, 9928 <smp_encrypt_info+0x40>
			BT_ERR("Unable to get keys for %s",
    9908:	4620      	mov	r0, r4
    990a:	f7f9 fd01 	bl	3310 <bt_addr_le_str>
    990e:	4b0c      	ldr	r3, [pc, #48]	; (9940 <smp_encrypt_info+0x58>)
    9910:	9302      	str	r3, [sp, #8]
    9912:	9001      	str	r0, [sp, #4]
    9914:	9300      	str	r3, [sp, #0]
    9916:	4a0b      	ldr	r2, [pc, #44]	; (9944 <smp_encrypt_info+0x5c>)
    9918:	4b0b      	ldr	r3, [pc, #44]	; (9948 <smp_encrypt_info+0x60>)
    991a:	490c      	ldr	r1, [pc, #48]	; (994c <smp_encrypt_info+0x64>)
    991c:	480c      	ldr	r0, [pc, #48]	; (9950 <smp_encrypt_info+0x68>)
    991e:	f7f8 fcb9 	bl	2294 <printk>
			return BT_SMP_ERR_UNSPECIFIED;
    9922:	2008      	movs	r0, #8
}
    9924:	b004      	add	sp, #16
    9926:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->ltk.val, req->ltk, 16);
    9928:	2210      	movs	r2, #16
    992a:	4631      	mov	r1, r6
    992c:	301a      	adds	r0, #26
    992e:	f7f6 ff30 	bl	792 <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_MASTER_IDENT);
    9932:	f105 009c 	add.w	r0, r5, #156	; 0x9c
    9936:	2107      	movs	r1, #7
    9938:	f7ff ff03 	bl	9742 <atomic_set_bit>
	return 0;
    993c:	2000      	movs	r0, #0
    993e:	e7f1      	b.n	9924 <smp_encrypt_info+0x3c>
    9940:	00023dae 	.word	0x00023dae
    9944:	00022d76 	.word	0x00022d76
    9948:	00024fe8 	.word	0x00024fe8
    994c:	000272d8 	.word	0x000272d8
    9950:	00025413 	.word	0x00025413

00009954 <legacy_request_tk>:
{
    9954:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
    9956:	6806      	ldr	r6, [r0, #0]
{
    9958:	b086      	sub	sp, #24
    995a:	4605      	mov	r5, r0
	keys = bt_keys_find_addr(&conn->le.dst);
    995c:	f106 0048 	add.w	r0, r6, #72	; 0x48
    9960:	f001 ff04 	bl	b76c <bt_keys_find_addr>
	if (keys && atomic_test_bit(keys->flags, BT_KEYS_AUTHENTICATED) &&
    9964:	b190      	cbz	r0, 998c <legacy_request_tk+0x38>
    9966:	2100      	movs	r1, #0
    9968:	3008      	adds	r0, #8
    996a:	f7ff fedd 	bl	9728 <atomic_test_bit>
    996e:	b168      	cbz	r0, 998c <legacy_request_tk+0x38>
    9970:	f895 30a4 	ldrb.w	r3, [r5, #164]	; 0xa4
    9974:	b953      	cbnz	r3, 998c <legacy_request_tk+0x38>
		BT_ERR("JustWorks failed, authenticated keys present");
    9976:	4b21      	ldr	r3, [pc, #132]	; (99fc <legacy_request_tk+0xa8>)
    9978:	9301      	str	r3, [sp, #4]
    997a:	9300      	str	r3, [sp, #0]
    997c:	4a20      	ldr	r2, [pc, #128]	; (9a00 <legacy_request_tk+0xac>)
    997e:	4b21      	ldr	r3, [pc, #132]	; (9a04 <legacy_request_tk+0xb0>)
    9980:	4921      	ldr	r1, [pc, #132]	; (9a08 <legacy_request_tk+0xb4>)
    9982:	4822      	ldr	r0, [pc, #136]	; (9a0c <legacy_request_tk+0xb8>)
    9984:	f7f8 fc86 	bl	2294 <printk>
			return BT_SMP_ERR_UNSPECIFIED;
    9988:	2008      	movs	r0, #8
    998a:	e01f      	b.n	99cc <legacy_request_tk+0x78>
	switch (smp->method) {
    998c:	f895 30a4 	ldrb.w	r3, [r5, #164]	; 0xa4
    9990:	2b01      	cmp	r3, #1
    9992:	d01d      	beq.n	99d0 <legacy_request_tk+0x7c>
    9994:	d319      	bcc.n	99ca <legacy_request_tk+0x76>
    9996:	2b02      	cmp	r3, #2
    9998:	d125      	bne.n	99e6 <legacy_request_tk+0x92>
		if (bt_rand(&passkey, sizeof(passkey))) {
    999a:	2104      	movs	r1, #4
    999c:	a805      	add	r0, sp, #20
    999e:	f002 ff55 	bl	c84c <bt_rand>
    99a2:	2800      	cmp	r0, #0
    99a4:	d1f0      	bne.n	9988 <legacy_request_tk+0x34>
		passkey %= 1000000;
    99a6:	9a05      	ldr	r2, [sp, #20]
    99a8:	4b19      	ldr	r3, [pc, #100]	; (9a10 <legacy_request_tk+0xbc>)
    99aa:	fbb2 f1f3 	udiv	r1, r2, r3
    99ae:	fb03 2111 	mls	r1, r3, r1, r2
		bt_auth->passkey_display(conn, passkey);
    99b2:	4b18      	ldr	r3, [pc, #96]	; (9a14 <legacy_request_tk+0xc0>)
		passkey %= 1000000;
    99b4:	9105      	str	r1, [sp, #20]
		bt_auth->passkey_display(conn, passkey);
    99b6:	681b      	ldr	r3, [r3, #0]
    99b8:	4630      	mov	r0, r6
    99ba:	681b      	ldr	r3, [r3, #0]
    99bc:	4798      	blx	r3
		memcpy(smp->tk, &passkey, sizeof(passkey));
    99be:	2204      	movs	r2, #4
    99c0:	a905      	add	r1, sp, #20
    99c2:	f105 00e3 	add.w	r0, r5, #227	; 0xe3
    99c6:	f7f6 fee4 	bl	792 <memcpy>
	return 0;
    99ca:	2000      	movs	r0, #0
}
    99cc:	b006      	add	sp, #24
    99ce:	bd70      	pop	{r4, r5, r6, pc}
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    99d0:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
    99d4:	2109      	movs	r1, #9
    99d6:	f7ff feb4 	bl	9742 <atomic_set_bit>
		bt_auth->passkey_entry(conn);
    99da:	4b0e      	ldr	r3, [pc, #56]	; (9a14 <legacy_request_tk+0xc0>)
    99dc:	681b      	ldr	r3, [r3, #0]
    99de:	4630      	mov	r0, r6
    99e0:	685b      	ldr	r3, [r3, #4]
    99e2:	4798      	blx	r3
    99e4:	e7f1      	b.n	99ca <legacy_request_tk+0x76>
		BT_ERR("Unknown pairing method (%u)", smp->method);
    99e6:	4a05      	ldr	r2, [pc, #20]	; (99fc <legacy_request_tk+0xa8>)
    99e8:	9202      	str	r2, [sp, #8]
    99ea:	e88d 000c 	stmia.w	sp, {r2, r3}
    99ee:	4906      	ldr	r1, [pc, #24]	; (9a08 <legacy_request_tk+0xb4>)
    99f0:	4b04      	ldr	r3, [pc, #16]	; (9a04 <legacy_request_tk+0xb0>)
    99f2:	4a03      	ldr	r2, [pc, #12]	; (9a00 <legacy_request_tk+0xac>)
    99f4:	4808      	ldr	r0, [pc, #32]	; (9a18 <legacy_request_tk+0xc4>)
    99f6:	f7f8 fc4d 	bl	2294 <printk>
    99fa:	e7c5      	b.n	9988 <legacy_request_tk+0x34>
    99fc:	00023dae 	.word	0x00023dae
    9a00:	00022d76 	.word	0x00022d76
    9a04:	00024fc0 	.word	0x00024fc0
    9a08:	000272d8 	.word	0x000272d8
    9a0c:	00025304 	.word	0x00025304
    9a10:	000f4240 	.word	0x000f4240
    9a14:	20003128 	.word	0x20003128
    9a18:	00025341 	.word	0x00025341

00009a1c <legacy_get_pair_method>:
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY)
    9a1c:	2904      	cmp	r1, #4
{
    9a1e:	b538      	push	{r3, r4, r5, lr}
    9a20:	4605      	mov	r5, r0
    9a22:	460c      	mov	r4, r1
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY)
    9a24:	d817      	bhi.n	9a56 <legacy_get_pair_method+0x3a>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    9a26:	f890 00a8 	ldrb.w	r0, [r0, #168]	; 0xa8
    9a2a:	f895 30af 	ldrb.w	r3, [r5, #175]	; 0xaf
    9a2e:	4318      	orrs	r0, r3
    9a30:	f010 0004 	ands.w	r0, r0, #4
    9a34:	d010      	beq.n	9a58 <legacy_get_pair_method+0x3c>
	method = gen_method_legacy[remote_io][get_io_capa()];
    9a36:	f7ff fe15 	bl	9664 <get_io_capa>
    9a3a:	4908      	ldr	r1, [pc, #32]	; (9a5c <legacy_get_pair_method+0x40>)
    9a3c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    9a40:	440c      	add	r4, r1
    9a42:	5c20      	ldrb	r0, [r4, r0]
	if (method == PASSKEY_ROLE) {
    9a44:	2804      	cmp	r0, #4
    9a46:	d107      	bne.n	9a58 <legacy_get_pair_method+0x3c>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    9a48:	682b      	ldr	r3, [r5, #0]
    9a4a:	78db      	ldrb	r3, [r3, #3]
    9a4c:	2b00      	cmp	r3, #0
			method = PASSKEY_INPUT;
    9a4e:	bf0c      	ite	eq
    9a50:	2002      	moveq	r0, #2
    9a52:	2001      	movne	r0, #1
    9a54:	bd38      	pop	{r3, r4, r5, pc}
		return JUST_WORKS;
    9a56:	2000      	movs	r0, #0
}
    9a58:	bd38      	pop	{r3, r4, r5, pc}
    9a5a:	bf00      	nop
    9a5c:	00025262 	.word	0x00025262

00009a60 <sec_level_reachable.isra.2>:
	switch (conn->required_sec_level) {
    9a60:	3801      	subs	r0, #1
static bool sec_level_reachable(struct bt_conn *conn)
    9a62:	b508      	push	{r3, lr}
	switch (conn->required_sec_level) {
    9a64:	2803      	cmp	r0, #3
    9a66:	d803      	bhi.n	9a70 <sec_level_reachable.isra.2+0x10>
    9a68:	e8df f000 	tbb	[pc, r0]
    9a6c:	0a041414 	.word	0x0a041414
		return false;
    9a70:	2000      	movs	r0, #0
    9a72:	bd08      	pop	{r3, pc}
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT;
    9a74:	f7ff fdf6 	bl	9664 <get_io_capa>
    9a78:	3803      	subs	r0, #3
    9a7a:	bf18      	it	ne
    9a7c:	2001      	movne	r0, #1
    9a7e:	bd08      	pop	{r3, pc}
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT &&
    9a80:	f7ff fdf0 	bl	9664 <get_io_capa>
    9a84:	2803      	cmp	r0, #3
    9a86:	bf1a      	itte	ne
    9a88:	4b03      	ldrne	r3, [pc, #12]	; (9a98 <sec_level_reachable.isra.2+0x38>)
    9a8a:	7818      	ldrbne	r0, [r3, #0]
    9a8c:	2000      	moveq	r0, #0
    9a8e:	f000 0001 	and.w	r0, r0, #1
    9a92:	bd08      	pop	{r3, pc}
		return true;
    9a94:	2001      	movs	r0, #1
}
    9a96:	bd08      	pop	{r3, pc}
    9a98:	20000939 	.word	0x20000939

00009a9c <smp_chan_get>:
{
    9a9c:	b513      	push	{r0, r1, r4, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
    9a9e:	2106      	movs	r1, #6
    9aa0:	f7fd fa6d 	bl	6f7e <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    9aa4:	4604      	mov	r4, r0
    9aa6:	b940      	cbnz	r0, 9aba <smp_chan_get+0x1e>
		BT_ERR("Unable to find SMP channel");
    9aa8:	4b05      	ldr	r3, [pc, #20]	; (9ac0 <smp_chan_get+0x24>)
    9aaa:	9301      	str	r3, [sp, #4]
    9aac:	9300      	str	r3, [sp, #0]
    9aae:	4a05      	ldr	r2, [pc, #20]	; (9ac4 <smp_chan_get+0x28>)
    9ab0:	4b05      	ldr	r3, [pc, #20]	; (9ac8 <smp_chan_get+0x2c>)
    9ab2:	4906      	ldr	r1, [pc, #24]	; (9acc <smp_chan_get+0x30>)
    9ab4:	4806      	ldr	r0, [pc, #24]	; (9ad0 <smp_chan_get+0x34>)
    9ab6:	f7f8 fbed 	bl	2294 <printk>
}
    9aba:	4620      	mov	r0, r4
    9abc:	b002      	add	sp, #8
    9abe:	bd10      	pop	{r4, pc}
    9ac0:	00023dae 	.word	0x00023dae
    9ac4:	00022d76 	.word	0x00022d76
    9ac8:	0002500a 	.word	0x0002500a
    9acc:	000272d8 	.word	0x000272d8
    9ad0:	000253bd 	.word	0x000253bd

00009ad4 <smp_create_pdu.isra.5>:
	buf = bt_l2cap_create_pdu(NULL, 0);
    9ad4:	2100      	movs	r1, #0
static struct net_buf *smp_create_pdu(struct bt_conn *conn, u8_t op,
    9ad6:	b538      	push	{r3, r4, r5, lr}
    9ad8:	4605      	mov	r5, r0
	buf = bt_l2cap_create_pdu(NULL, 0);
    9ada:	4608      	mov	r0, r1
    9adc:	f7fd f8c1 	bl	6c62 <bt_l2cap_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    9ae0:	2101      	movs	r1, #1
	buf = bt_l2cap_create_pdu(NULL, 0);
    9ae2:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    9ae4:	3008      	adds	r0, #8
    9ae6:	f00f fc5d 	bl	193a4 <net_buf_simple_add>
	hdr->code = op;
    9aea:	7005      	strb	r5, [r0, #0]
}
    9aec:	4620      	mov	r0, r4
    9aee:	bd38      	pop	{r3, r4, r5, pc}

00009af0 <display_passkey>:
{
    9af0:	b538      	push	{r3, r4, r5, lr}
	if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
    9af2:	2104      	movs	r1, #4
{
    9af4:	4605      	mov	r5, r0
	if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
    9af6:	f500 70ba 	add.w	r0, r0, #372	; 0x174
    9afa:	f002 fea7 	bl	c84c <bt_rand>
    9afe:	4604      	mov	r4, r0
    9b00:	b988      	cbnz	r0, 9b26 <display_passkey+0x36>
	smp->passkey %= 1000000;
    9b02:	f8d5 2174 	ldr.w	r2, [r5, #372]	; 0x174
    9b06:	4b09      	ldr	r3, [pc, #36]	; (9b2c <display_passkey+0x3c>)
    9b08:	fbb2 f1f3 	udiv	r1, r2, r3
    9b0c:	fb03 2111 	mls	r1, r3, r1, r2
	bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
    9b10:	4b07      	ldr	r3, [pc, #28]	; (9b30 <display_passkey+0x40>)
	smp->passkey_round = 0;
    9b12:	f885 0178 	strb.w	r0, [r5, #376]	; 0x178
	bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
    9b16:	681b      	ldr	r3, [r3, #0]
    9b18:	6828      	ldr	r0, [r5, #0]
	smp->passkey %= 1000000;
    9b1a:	f8c5 1174 	str.w	r1, [r5, #372]	; 0x174
	bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
    9b1e:	681b      	ldr	r3, [r3, #0]
    9b20:	4798      	blx	r3
    9b22:	4620      	mov	r0, r4
    9b24:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    9b26:	2008      	movs	r0, #8
}
    9b28:	bd38      	pop	{r3, r4, r5, pc}
    9b2a:	bf00      	nop
    9b2c:	000f4240 	.word	0x000f4240
    9b30:	20003128 	.word	0x20003128

00009b34 <sys_mem_swap.constprop.15>:
 * Where n is an index and 'end' the last index of buf.
 *
 * @param buf A valid pointer on a memory area to swap
 * @param length Size of buf memory area
 */
static inline void sys_mem_swap(void *buf, size_t length)
    9b34:	b510      	push	{r4, lr}
    9b36:	1e43      	subs	r3, r0, #1
    9b38:	f100 0210 	add.w	r2, r0, #16
    9b3c:	3007      	adds	r0, #7
	size_t i;

	for (i = 0; i < (length/2); i++) {
		u8_t tmp = ((u8_t *)buf)[i];

		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    9b3e:	f812 4c01 	ldrb.w	r4, [r2, #-1]
		u8_t tmp = ((u8_t *)buf)[i];
    9b42:	7859      	ldrb	r1, [r3, #1]
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    9b44:	f803 4f01 	strb.w	r4, [r3, #1]!
	for (i = 0; i < (length/2); i++) {
    9b48:	4283      	cmp	r3, r0
		((u8_t *)buf)[length - 1 - i] = tmp;
    9b4a:	f802 1d01 	strb.w	r1, [r2, #-1]!
	for (i = 0; i < (length/2); i++) {
    9b4e:	d1f6      	bne.n	9b3e <sys_mem_swap.constprop.15+0xa>
	}
}
    9b50:	bd10      	pop	{r4, pc}

00009b52 <smp_f6>:
{
    9b52:	b570      	push	{r4, r5, r6, lr}
    9b54:	b096      	sub	sp, #88	; 0x58
    9b56:	4605      	mov	r5, r0
    9b58:	4616      	mov	r6, r2
	sys_memcpy_swap(m, n1, 16);
    9b5a:	a805      	add	r0, sp, #20
    9b5c:	2210      	movs	r2, #16
{
    9b5e:	461c      	mov	r4, r3
	sys_memcpy_swap(m, n1, 16);
    9b60:	f7ff fd74 	bl	964c <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
    9b64:	2210      	movs	r2, #16
    9b66:	4631      	mov	r1, r6
    9b68:	a809      	add	r0, sp, #36	; 0x24
    9b6a:	f7ff fd6f 	bl	964c <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
    9b6e:	4621      	mov	r1, r4
    9b70:	2210      	movs	r2, #16
    9b72:	a80d      	add	r0, sp, #52	; 0x34
    9b74:	f7ff fd6a 	bl	964c <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
    9b78:	2203      	movs	r2, #3
    9b7a:	991a      	ldr	r1, [sp, #104]	; 0x68
    9b7c:	a811      	add	r0, sp, #68	; 0x44
    9b7e:	f7ff fd65 	bl	964c <sys_memcpy_swap>
	m[51] = a1->type;
    9b82:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
    9b84:	f814 3b01 	ldrb.w	r3, [r4], #1
    9b88:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
    9b8c:	4621      	mov	r1, r4
    9b8e:	2206      	movs	r2, #6
    9b90:	a812      	add	r0, sp, #72	; 0x48
    9b92:	f7f6 fdfe 	bl	792 <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
    9b96:	4621      	mov	r1, r4
    9b98:	2206      	movs	r2, #6
    9b9a:	a812      	add	r0, sp, #72	; 0x48
    9b9c:	f7ff fd56 	bl	964c <sys_memcpy_swap>
	m[58] = a2->type;
    9ba0:	9c1c      	ldr	r4, [sp, #112]	; 0x70
    9ba2:	f814 3b01 	ldrb.w	r3, [r4], #1
    9ba6:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
    9baa:	4621      	mov	r1, r4
    9bac:	2206      	movs	r2, #6
    9bae:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
    9bb2:	f7f6 fdee 	bl	792 <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
    9bb6:	4621      	mov	r1, r4
    9bb8:	2206      	movs	r2, #6
    9bba:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
    9bbe:	f7ff fd45 	bl	964c <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
    9bc2:	2210      	movs	r2, #16
    9bc4:	4629      	mov	r1, r5
    9bc6:	a801      	add	r0, sp, #4
    9bc8:	f7ff fd40 	bl	964c <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
    9bcc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    9bce:	2241      	movs	r2, #65	; 0x41
    9bd0:	a905      	add	r1, sp, #20
    9bd2:	a801      	add	r0, sp, #4
    9bd4:	f7ff fde1 	bl	979a <bt_smp_aes_cmac>
	if (err) {
    9bd8:	4604      	mov	r4, r0
    9bda:	b910      	cbnz	r0, 9be2 <smp_f6+0x90>
	sys_mem_swap(check, 16);
    9bdc:	981d      	ldr	r0, [sp, #116]	; 0x74
    9bde:	f7ff ffa9 	bl	9b34 <sys_mem_swap.constprop.15>
}
    9be2:	4620      	mov	r0, r4
    9be4:	b016      	add	sp, #88	; 0x58
    9be6:	bd70      	pop	{r4, r5, r6, pc}

00009be8 <smp_f5>:
{
    9be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9bec:	b09a      	sub	sp, #104	; 0x68
    9bee:	4604      	mov	r4, r0
    9bf0:	4688      	mov	r8, r1
    9bf2:	4617      	mov	r7, r2
	u8_t m[53] = { 0x00, /* counter */
    9bf4:	2100      	movs	r1, #0
    9bf6:	2235      	movs	r2, #53	; 0x35
    9bf8:	a80c      	add	r0, sp, #48	; 0x30
{
    9bfa:	461d      	mov	r5, r3
	u8_t m[53] = { 0x00, /* counter */
    9bfc:	f7f6 fdf5 	bl	7ea <memset>
    9c00:	2362      	movs	r3, #98	; 0x62
    9c02:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    9c06:	2374      	movs	r3, #116	; 0x74
    9c08:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    9c0c:	236c      	movs	r3, #108	; 0x6c
	sys_memcpy_swap(ws, w, 32);
    9c0e:	4621      	mov	r1, r4
	u8_t m[53] = { 0x00, /* counter */
    9c10:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
	sys_memcpy_swap(ws, w, 32);
    9c14:	2220      	movs	r2, #32
	u8_t m[53] = { 0x00, /* counter */
    9c16:	2365      	movs	r3, #101	; 0x65
	sys_memcpy_swap(ws, w, 32);
    9c18:	a804      	add	r0, sp, #16
	u8_t m[53] = { 0x00, /* counter */
    9c1a:	2601      	movs	r6, #1
    9c1c:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    9c20:	f88d 6063 	strb.w	r6, [sp, #99]	; 0x63
	sys_memcpy_swap(ws, w, 32);
    9c24:	f7ff fd12 	bl	964c <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
    9c28:	466b      	mov	r3, sp
    9c2a:	2220      	movs	r2, #32
    9c2c:	a904      	add	r1, sp, #16
    9c2e:	4820      	ldr	r0, [pc, #128]	; (9cb0 <smp_f5+0xc8>)
    9c30:	f7ff fdb3 	bl	979a <bt_smp_aes_cmac>
	if (err) {
    9c34:	4604      	mov	r4, r0
    9c36:	bbb8      	cbnz	r0, 9ca8 <smp_f5+0xc0>
	sys_memcpy_swap(m + 5, n1, 16);
    9c38:	2210      	movs	r2, #16
    9c3a:	4641      	mov	r1, r8
    9c3c:	f10d 0035 	add.w	r0, sp, #53	; 0x35
    9c40:	f7ff fd04 	bl	964c <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
    9c44:	2210      	movs	r2, #16
    9c46:	4639      	mov	r1, r7
    9c48:	f10d 0045 	add.w	r0, sp, #69	; 0x45
    9c4c:	f7ff fcfe 	bl	964c <sys_memcpy_swap>
	m[37] = a1->type;
    9c50:	4629      	mov	r1, r5
	sys_memcpy_swap(m + 38, a1->a.val, 6);
    9c52:	2206      	movs	r2, #6
	m[37] = a1->type;
    9c54:	f811 3b01 	ldrb.w	r3, [r1], #1
    9c58:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
	sys_memcpy_swap(m + 38, a1->a.val, 6);
    9c5c:	f10d 0056 	add.w	r0, sp, #86	; 0x56
    9c60:	f7ff fcf4 	bl	964c <sys_memcpy_swap>
	m[44] = a2->type;
    9c64:	9920      	ldr	r1, [sp, #128]	; 0x80
	sys_memcpy_swap(m + 45, a2->a.val, 6);
    9c66:	2206      	movs	r2, #6
	m[44] = a2->type;
    9c68:	f811 3b01 	ldrb.w	r3, [r1], #1
    9c6c:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
    9c70:	f10d 005d 	add.w	r0, sp, #93	; 0x5d
    9c74:	f7ff fcea 	bl	964c <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
    9c78:	9b21      	ldr	r3, [sp, #132]	; 0x84
    9c7a:	2235      	movs	r2, #53	; 0x35
    9c7c:	a90c      	add	r1, sp, #48	; 0x30
    9c7e:	4668      	mov	r0, sp
    9c80:	f7ff fd8b 	bl	979a <bt_smp_aes_cmac>
	if (err) {
    9c84:	4604      	mov	r4, r0
    9c86:	b978      	cbnz	r0, 9ca8 <smp_f5+0xc0>
	sys_mem_swap(mackey, 16);
    9c88:	9821      	ldr	r0, [sp, #132]	; 0x84
    9c8a:	f7ff ff53 	bl	9b34 <sys_mem_swap.constprop.15>
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
    9c8e:	9b22      	ldr	r3, [sp, #136]	; 0x88
	m[0] = 0x01;
    9c90:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
    9c94:	2235      	movs	r2, #53	; 0x35
    9c96:	a90c      	add	r1, sp, #48	; 0x30
    9c98:	4668      	mov	r0, sp
    9c9a:	f7ff fd7e 	bl	979a <bt_smp_aes_cmac>
	if (err) {
    9c9e:	4604      	mov	r4, r0
    9ca0:	b910      	cbnz	r0, 9ca8 <smp_f5+0xc0>
	sys_mem_swap(ltk, 16);
    9ca2:	9822      	ldr	r0, [sp, #136]	; 0x88
    9ca4:	f7ff ff46 	bl	9b34 <sys_mem_swap.constprop.15>
}
    9ca8:	4620      	mov	r0, r4
    9caa:	b01a      	add	sp, #104	; 0x68
    9cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9cb0:	0002536d 	.word	0x0002536d

00009cb4 <smp_f4>:
{
    9cb4:	b570      	push	{r4, r5, r6, lr}
    9cb6:	b096      	sub	sp, #88	; 0x58
    9cb8:	4614      	mov	r4, r2
    9cba:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
    9cbc:	2220      	movs	r2, #32
    9cbe:	4601      	mov	r1, r0
    9cc0:	a805      	add	r0, sp, #20
{
    9cc2:	461d      	mov	r5, r3
	sys_memcpy_swap(m, u, 32);
    9cc4:	f7ff fcc2 	bl	964c <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
    9cc8:	2220      	movs	r2, #32
    9cca:	4631      	mov	r1, r6
    9ccc:	a80d      	add	r0, sp, #52	; 0x34
    9cce:	f7ff fcbd 	bl	964c <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
    9cd2:	4621      	mov	r1, r4
    9cd4:	2210      	movs	r2, #16
    9cd6:	a801      	add	r0, sp, #4
	m[64] = z;
    9cd8:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
    9cdc:	f7ff fcb6 	bl	964c <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
    9ce0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    9ce2:	2241      	movs	r2, #65	; 0x41
    9ce4:	a905      	add	r1, sp, #20
    9ce6:	a801      	add	r0, sp, #4
    9ce8:	f7ff fd57 	bl	979a <bt_smp_aes_cmac>
	if (err) {
    9cec:	4604      	mov	r4, r0
    9cee:	b910      	cbnz	r0, 9cf6 <smp_f4+0x42>
	sys_mem_swap(res, 16);
    9cf0:	981a      	ldr	r0, [sp, #104]	; 0x68
    9cf2:	f7ff ff1f 	bl	9b34 <sys_mem_swap.constprop.15>
}
    9cf6:	4620      	mov	r0, r4
    9cf8:	b016      	add	sp, #88	; 0x58
    9cfa:	bd70      	pop	{r4, r5, r6, pc}

00009cfc <sc_smp_check_confirm>:
{
    9cfc:	b530      	push	{r4, r5, lr}
	switch (smp->method) {
    9cfe:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
{
    9d02:	b087      	sub	sp, #28
    9d04:	4604      	mov	r4, r0
	switch (smp->method) {
    9d06:	2b03      	cmp	r3, #3
    9d08:	d825      	bhi.n	9d56 <sc_smp_check_confirm+0x5a>
    9d0a:	e8df f003 	tbb	[pc, r3]
    9d0e:	0222      	.short	0x0222
    9d10:	2202      	.short	0x2202
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    9d12:	f890 2178 	ldrb.w	r2, [r0, #376]	; 0x178
    9d16:	f8d0 3174 	ldr.w	r3, [r0, #372]	; 0x174
    9d1a:	40d3      	lsrs	r3, r2
    9d1c:	f003 0301 	and.w	r3, r3, #1
		r |= 0x80;
    9d20:	f063 037f 	orn	r3, r3, #127	; 0x7f
    9d24:	b2db      	uxtb	r3, r3
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    9d26:	ad02      	add	r5, sp, #8
    9d28:	9500      	str	r5, [sp, #0]
    9d2a:	f104 02d3 	add.w	r2, r4, #211	; 0xd3
    9d2e:	490b      	ldr	r1, [pc, #44]	; (9d5c <sc_smp_check_confirm+0x60>)
    9d30:	f104 00f3 	add.w	r0, r4, #243	; 0xf3
    9d34:	f7ff ffbe 	bl	9cb4 <smp_f4>
    9d38:	b968      	cbnz	r0, 9d56 <sc_smp_check_confirm+0x5a>
	if (memcmp(smp->pcnf, cfm, 16)) {
    9d3a:	2210      	movs	r2, #16
    9d3c:	4629      	mov	r1, r5
    9d3e:	f104 00b3 	add.w	r0, r4, #179	; 0xb3
    9d42:	f7f6 fcf9 	bl	738 <memcmp>
    9d46:	2800      	cmp	r0, #0
	return 0;
    9d48:	bf14      	ite	ne
    9d4a:	2004      	movne	r0, #4
    9d4c:	2000      	moveq	r0, #0
}
    9d4e:	b007      	add	sp, #28
    9d50:	bd30      	pop	{r4, r5, pc}
		r = 0;
    9d52:	2300      	movs	r3, #0
    9d54:	e7e7      	b.n	9d26 <sc_smp_check_confirm+0x2a>
		return BT_SMP_ERR_UNSPECIFIED;
    9d56:	2008      	movs	r0, #8
    9d58:	e7f9      	b.n	9d4e <sc_smp_check_confirm+0x52>
    9d5a:	bf00      	nop
    9d5c:	200008f9 	.word	0x200008f9

00009d60 <smp_send>:
{
    9d60:	b510      	push	{r4, lr}
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb);
    9d62:	4613      	mov	r3, r2
{
    9d64:	4604      	mov	r4, r0
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb);
    9d66:	460a      	mov	r2, r1
    9d68:	6800      	ldr	r0, [r0, #0]
    9d6a:	2106      	movs	r1, #6
    9d6c:	f7fc ff7c 	bl	6c68 <bt_l2cap_send_cb>
    9d70:	f504 71be 	add.w	r1, r4, #380	; 0x17c
    9d74:	f247 5230 	movw	r2, #30000	; 0x7530
    9d78:	4802      	ldr	r0, [pc, #8]	; (9d84 <smp_send+0x24>)
}
    9d7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9d7e:	f018 bab9 	b.w	222f4 <k_delayed_work_submit_to_queue>
    9d82:	bf00      	nop
    9d84:	20003340 	.word	0x20003340

00009d88 <sc_smp_send_dhkey_check>:
{
    9d88:	b570      	push	{r4, r5, r6, lr}
    9d8a:	4605      	mov	r5, r0
	buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_DHKEY_CHECK,
    9d8c:	200d      	movs	r0, #13
{
    9d8e:	460e      	mov	r6, r1
	buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_DHKEY_CHECK,
    9d90:	f7ff fea0 	bl	9ad4 <smp_create_pdu.isra.5>
	if (!buf) {
    9d94:	4604      	mov	r4, r0
    9d96:	b170      	cbz	r0, 9db6 <sc_smp_send_dhkey_check+0x2e>
	req = net_buf_add(buf, sizeof(*req));
    9d98:	2110      	movs	r1, #16
    9d9a:	3008      	adds	r0, #8
    9d9c:	f00f fb02 	bl	193a4 <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
    9da0:	4631      	mov	r1, r6
    9da2:	2210      	movs	r2, #16
    9da4:	f7f6 fcf5 	bl	792 <memcpy>
	smp_send(smp, buf, NULL);
    9da8:	4628      	mov	r0, r5
    9daa:	2200      	movs	r2, #0
    9dac:	4621      	mov	r1, r4
    9dae:	f7ff ffd7 	bl	9d60 <smp_send>
	return 0;
    9db2:	2000      	movs	r0, #0
    9db4:	bd70      	pop	{r4, r5, r6, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    9db6:	2008      	movs	r0, #8
}
    9db8:	bd70      	pop	{r4, r5, r6, pc}

00009dba <compute_and_send_master_dhcheck>:
{
    9dba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9dbe:	4604      	mov	r4, r0
    9dc0:	b08c      	sub	sp, #48	; 0x30
	memset(r, 0, sizeof(r));
    9dc2:	2210      	movs	r2, #16
    9dc4:	2100      	movs	r1, #0
    9dc6:	a808      	add	r0, sp, #32
    9dc8:	f7f6 fd0f 	bl	7ea <memset>
	switch (smp->method) {
    9dcc:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    9dd0:	2b03      	cmp	r3, #3
    9dd2:	d81f      	bhi.n	9e14 <compute_and_send_master_dhcheck+0x5a>
    9dd4:	e8df f003 	tbb	[pc, r3]
    9dd8:	08020208 	.word	0x08020208
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
    9ddc:	2204      	movs	r2, #4
    9dde:	f504 71ba 	add.w	r1, r4, #372	; 0x174
    9de2:	a808      	add	r0, sp, #32
    9de4:	f7f6 fcd5 	bl	792 <memcpy>
		   &smp->chan.chan.conn->le.init_addr,
    9de8:	6823      	ldr	r3, [r4, #0]
		   smp->tk)) {
    9dea:	f104 02e3 	add.w	r2, r4, #227	; 0xe3
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
    9dee:	f104 07c3 	add.w	r7, r4, #195	; 0xc3
    9df2:	f104 08d3 	add.w	r8, r4, #211	; 0xd3
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    9df6:	f204 1563 	addw	r5, r4, #355	; 0x163
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
    9dfa:	9202      	str	r2, [sp, #8]
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    9dfc:	f103 0256 	add.w	r2, r3, #86	; 0x56
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
    9e00:	9200      	str	r2, [sp, #0]
    9e02:	9501      	str	r5, [sp, #4]
    9e04:	334f      	adds	r3, #79	; 0x4f
    9e06:	4642      	mov	r2, r8
    9e08:	4639      	mov	r1, r7
    9e0a:	f204 1033 	addw	r0, r4, #307	; 0x133
    9e0e:	f7ff feeb 	bl	9be8 <smp_f5>
    9e12:	b108      	cbz	r0, 9e18 <compute_and_send_master_dhcheck+0x5e>
		return BT_SMP_ERR_UNSPECIFIED;
    9e14:	2008      	movs	r0, #8
    9e16:	e01d      	b.n	9e54 <compute_and_send_master_dhcheck+0x9a>
		   &smp->chan.chan.conn->le.init_addr,
    9e18:	4622      	mov	r2, r4
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
    9e1a:	ae04      	add	r6, sp, #16
		   &smp->chan.chan.conn->le.init_addr,
    9e1c:	f852 3ba6 	ldr.w	r3, [r2], #166
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
    9e20:	9603      	str	r6, [sp, #12]
		   &smp->chan.chan.conn->le.resp_addr, e)) {
    9e22:	f103 0156 	add.w	r1, r3, #86	; 0x56
		   &smp->chan.chan.conn->le.init_addr,
    9e26:	334f      	adds	r3, #79	; 0x4f
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
    9e28:	e88d 000c 	stmia.w	sp, {r2, r3}
    9e2c:	9102      	str	r1, [sp, #8]
    9e2e:	4628      	mov	r0, r5
    9e30:	ab08      	add	r3, sp, #32
    9e32:	4642      	mov	r2, r8
    9e34:	4639      	mov	r1, r7
    9e36:	f7ff fe8c 	bl	9b52 <smp_f6>
    9e3a:	4605      	mov	r5, r0
    9e3c:	2800      	cmp	r0, #0
    9e3e:	d1e9      	bne.n	9e14 <compute_and_send_master_dhcheck+0x5a>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    9e40:	210d      	movs	r1, #13
    9e42:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    9e46:	f7ff fc7c 	bl	9742 <atomic_set_bit>
	sc_smp_send_dhkey_check(smp, e);
    9e4a:	4631      	mov	r1, r6
    9e4c:	4620      	mov	r0, r4
    9e4e:	f7ff ff9b 	bl	9d88 <sc_smp_send_dhkey_check>
	return 0;
    9e52:	4628      	mov	r0, r5
}
    9e54:	b00c      	add	sp, #48	; 0x30
    9e56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00009e5a <compute_and_check_and_send_slave_dhcheck>:
{
    9e5a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    9e5e:	4604      	mov	r4, r0
    9e60:	b091      	sub	sp, #68	; 0x44
	memset(r, 0, sizeof(r));
    9e62:	2210      	movs	r2, #16
    9e64:	2100      	movs	r1, #0
    9e66:	a80c      	add	r0, sp, #48	; 0x30
    9e68:	f7f6 fcbf 	bl	7ea <memset>
	switch (smp->method) {
    9e6c:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    9e70:	2b03      	cmp	r3, #3
    9e72:	d81f      	bhi.n	9eb4 <compute_and_check_and_send_slave_dhcheck+0x5a>
    9e74:	e8df f003 	tbb	[pc, r3]
    9e78:	08020208 	.word	0x08020208
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
    9e7c:	2204      	movs	r2, #4
    9e7e:	f504 71ba 	add.w	r1, r4, #372	; 0x174
    9e82:	a80c      	add	r0, sp, #48	; 0x30
    9e84:	f7f6 fc85 	bl	792 <memcpy>
		   &smp->chan.chan.conn->le.init_addr,
    9e88:	6823      	ldr	r3, [r4, #0]
		   smp->tk)) {
    9e8a:	f104 02e3 	add.w	r2, r4, #227	; 0xe3
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    9e8e:	f104 06d3 	add.w	r6, r4, #211	; 0xd3
    9e92:	f104 08c3 	add.w	r8, r4, #195	; 0xc3
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    9e96:	f204 1563 	addw	r5, r4, #355	; 0x163
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    9e9a:	9202      	str	r2, [sp, #8]
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    9e9c:	f103 0256 	add.w	r2, r3, #86	; 0x56
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    9ea0:	9200      	str	r2, [sp, #0]
    9ea2:	9501      	str	r5, [sp, #4]
    9ea4:	334f      	adds	r3, #79	; 0x4f
    9ea6:	4642      	mov	r2, r8
    9ea8:	4631      	mov	r1, r6
    9eaa:	f204 1033 	addw	r0, r4, #307	; 0x133
    9eae:	f7ff fe9b 	bl	9be8 <smp_f5>
    9eb2:	b108      	cbz	r0, 9eb8 <compute_and_check_and_send_slave_dhcheck+0x5e>
		return BT_SMP_ERR_UNSPECIFIED;
    9eb4:	2008      	movs	r0, #8
    9eb6:	e039      	b.n	9f2c <compute_and_check_and_send_slave_dhcheck+0xd2>
		   &smp->chan.chan.conn->le.resp_addr,
    9eb8:	4622      	mov	r2, r4
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    9eba:	af08      	add	r7, sp, #32
		   &smp->chan.chan.conn->le.resp_addr,
    9ebc:	f852 3bad 	ldr.w	r3, [r2], #173
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    9ec0:	9703      	str	r7, [sp, #12]
		   &smp->chan.chan.conn->le.init_addr, e)) {
    9ec2:	f103 014f 	add.w	r1, r3, #79	; 0x4f
		   &smp->chan.chan.conn->le.resp_addr,
    9ec6:	3356      	adds	r3, #86	; 0x56
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    9ec8:	e88d 000c 	stmia.w	sp, {r2, r3}
    9ecc:	9102      	str	r1, [sp, #8]
    9ece:	ab0c      	add	r3, sp, #48	; 0x30
    9ed0:	4632      	mov	r2, r6
    9ed2:	4641      	mov	r1, r8
    9ed4:	4628      	mov	r0, r5
    9ed6:	f7ff fe3c 	bl	9b52 <smp_f6>
    9eda:	2800      	cmp	r0, #0
    9edc:	d1ea      	bne.n	9eb4 <compute_and_check_and_send_slave_dhcheck+0x5a>
		   &smp->chan.chan.conn->le.init_addr,
    9ede:	4622      	mov	r2, r4
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    9ee0:	f10d 0910 	add.w	r9, sp, #16
		   &smp->chan.chan.conn->le.init_addr,
    9ee4:	f852 3ba6 	ldr.w	r3, [r2], #166
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    9ee8:	f8cd 900c 	str.w	r9, [sp, #12]
		   &smp->chan.chan.conn->le.resp_addr, re)) {
    9eec:	f103 0156 	add.w	r1, r3, #86	; 0x56
		   &smp->chan.chan.conn->le.init_addr,
    9ef0:	334f      	adds	r3, #79	; 0x4f
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    9ef2:	e88d 000c 	stmia.w	sp, {r2, r3}
    9ef6:	9102      	str	r1, [sp, #8]
    9ef8:	ab0c      	add	r3, sp, #48	; 0x30
    9efa:	4642      	mov	r2, r8
    9efc:	4631      	mov	r1, r6
    9efe:	4628      	mov	r0, r5
    9f00:	f7ff fe27 	bl	9b52 <smp_f6>
    9f04:	2800      	cmp	r0, #0
    9f06:	d1d5      	bne.n	9eb4 <compute_and_check_and_send_slave_dhcheck+0x5a>
	if (memcmp(smp->e, re, 16)) {
    9f08:	2210      	movs	r2, #16
    9f0a:	4649      	mov	r1, r9
    9f0c:	f204 1053 	addw	r0, r4, #339	; 0x153
    9f10:	f7f6 fc12 	bl	738 <memcmp>
    9f14:	4605      	mov	r5, r0
    9f16:	b960      	cbnz	r0, 9f32 <compute_and_check_and_send_slave_dhcheck+0xd8>
	sc_smp_send_dhkey_check(smp, e);
    9f18:	4639      	mov	r1, r7
    9f1a:	4620      	mov	r0, r4
    9f1c:	f7ff ff34 	bl	9d88 <sc_smp_send_dhkey_check>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    9f20:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    9f24:	2101      	movs	r1, #1
    9f26:	f7ff fc0c 	bl	9742 <atomic_set_bit>
	return 0;
    9f2a:	4628      	mov	r0, r5
}
    9f2c:	b011      	add	sp, #68	; 0x44
    9f2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
    9f32:	200b      	movs	r0, #11
    9f34:	e7fa      	b.n	9f2c <compute_and_check_and_send_slave_dhcheck+0xd2>

00009f36 <smp_dhkey_check>:
{
    9f36:	b5f0      	push	{r4, r5, r6, r7, lr}
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    9f38:	6803      	ldr	r3, [r0, #0]
	struct bt_smp_dhkey_check *req = (void *)buf->data;
    9f3a:	688f      	ldr	r7, [r1, #8]
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    9f3c:	78dd      	ldrb	r5, [r3, #3]
{
    9f3e:	b08d      	sub	sp, #52	; 0x34
    9f40:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    9f42:	2d00      	cmp	r5, #0
    9f44:	d14c      	bne.n	9fe0 <smp_dhkey_check+0xaa>
		memset(r, 0, sizeof(r));
    9f46:	2210      	movs	r2, #16
    9f48:	4629      	mov	r1, r5
    9f4a:	a808      	add	r0, sp, #32
    9f4c:	f7f6 fc4d 	bl	7ea <memset>
		switch (smp->method) {
    9f50:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    9f54:	2b03      	cmp	r3, #3
    9f56:	d81e      	bhi.n	9f96 <smp_dhkey_check+0x60>
    9f58:	e8df f003 	tbb	[pc, r3]
    9f5c:	08020208 	.word	0x08020208
			memcpy(r, &smp->passkey, sizeof(smp->passkey));
    9f60:	2204      	movs	r2, #4
    9f62:	f504 71ba 	add.w	r1, r4, #372	; 0x174
    9f66:	a808      	add	r0, sp, #32
    9f68:	f7f6 fc13 	bl	792 <memcpy>
			   &smp->chan.chan.conn->le.resp_addr,
    9f6c:	4622      	mov	r2, r4
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
    9f6e:	ae04      	add	r6, sp, #16
			   &smp->chan.chan.conn->le.resp_addr,
    9f70:	f852 3bc3 	ldr.w	r3, [r2], #195
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
    9f74:	9603      	str	r6, [sp, #12]
			   &smp->chan.chan.conn->le.init_addr, e)) {
    9f76:	f103 014f 	add.w	r1, r3, #79	; 0x4f
			   &smp->chan.chan.conn->le.resp_addr,
    9f7a:	3356      	adds	r3, #86	; 0x56
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
    9f7c:	9301      	str	r3, [sp, #4]
    9f7e:	f104 03ad 	add.w	r3, r4, #173	; 0xad
    9f82:	9102      	str	r1, [sp, #8]
    9f84:	9300      	str	r3, [sp, #0]
    9f86:	f104 01d3 	add.w	r1, r4, #211	; 0xd3
    9f8a:	ab08      	add	r3, sp, #32
    9f8c:	f204 1063 	addw	r0, r4, #355	; 0x163
    9f90:	f7ff fddf 	bl	9b52 <smp_f6>
    9f94:	b118      	cbz	r0, 9f9e <smp_dhkey_check+0x68>
			return BT_SMP_ERR_UNSPECIFIED;
    9f96:	2508      	movs	r5, #8
}
    9f98:	4628      	mov	r0, r5
    9f9a:	b00d      	add	sp, #52	; 0x34
    9f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (memcmp(e, req->e, 16)) {
    9f9e:	2210      	movs	r2, #16
    9fa0:	4639      	mov	r1, r7
    9fa2:	4630      	mov	r0, r6
    9fa4:	f7f6 fbc8 	bl	738 <memcmp>
    9fa8:	b9c0      	cbnz	r0, 9fdc <smp_dhkey_check+0xa6>
	return min(req->max_key_size, rsp->max_key_size);
    9faa:	f894 20b0 	ldrb.w	r2, [r4, #176]	; 0xb0
    9fae:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
		if (bt_conn_le_start_encryption(smp->chan.chan.conn, 0, 0,
    9fb2:	429a      	cmp	r2, r3
    9fb4:	bf94      	ite	ls
    9fb6:	9202      	strls	r2, [sp, #8]
    9fb8:	9302      	strhi	r3, [sp, #8]
						smp->tk, enc_size) < 0) {
    9fba:	f104 03e3 	add.w	r3, r4, #227	; 0xe3
		if (bt_conn_le_start_encryption(smp->chan.chan.conn, 0, 0,
    9fbe:	e88d 0009 	stmia.w	sp, {r0, r3}
    9fc2:	2200      	movs	r2, #0
    9fc4:	2300      	movs	r3, #0
    9fc6:	6820      	ldr	r0, [r4, #0]
    9fc8:	f7fb fe72 	bl	5cb0 <bt_conn_le_start_encryption>
    9fcc:	2800      	cmp	r0, #0
    9fce:	dbe2      	blt.n	9f96 <smp_dhkey_check+0x60>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    9fd0:	2101      	movs	r1, #1
    9fd2:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    9fd6:	f7ff fbb4 	bl	9742 <atomic_set_bit>
			return 0;
    9fda:	e7dd      	b.n	9f98 <smp_dhkey_check+0x62>
			return BT_SMP_ERR_DHKEY_CHECK_FAILED;
    9fdc:	250b      	movs	r5, #11
    9fde:	e7db      	b.n	9f98 <smp_dhkey_check+0x62>
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
    9fe0:	2d01      	cmp	r5, #1
    9fe2:	d11d      	bne.n	a020 <smp_dhkey_check+0xea>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    9fe4:	f3bf 8f5b 	dmb	ish
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    9fe8:	f100 06a0 	add.w	r6, r0, #160	; 0xa0
    9fec:	e856 3f00 	ldrex	r3, [r6]
    9ff0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    9ff4:	e846 3200 	strex	r2, r3, [r6]
    9ff8:	2a00      	cmp	r2, #0
    9ffa:	d1f7      	bne.n	9fec <smp_dhkey_check+0xb6>
    9ffc:	f3bf 8f5b 	dmb	ish
		memcpy(smp->e, req->e, sizeof(smp->e));
    a000:	2210      	movs	r2, #16
    a002:	4639      	mov	r1, r7
    a004:	f204 1053 	addw	r0, r4, #339	; 0x153
    a008:	f7f6 fbc3 	bl	792 <memcpy>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
    a00c:	2107      	movs	r1, #7
    a00e:	4630      	mov	r0, r6
    a010:	f7ff fb8a 	bl	9728 <atomic_test_bit>
    a014:	4605      	mov	r5, r0
    a016:	b128      	cbz	r0, a024 <smp_dhkey_check+0xee>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    a018:	2108      	movs	r1, #8
    a01a:	4630      	mov	r0, r6
    a01c:	f7ff fb91 	bl	9742 <atomic_set_bit>
	return 0;
    a020:	2500      	movs	r5, #0
    a022:	e7b9      	b.n	9f98 <smp_dhkey_check+0x62>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    a024:	2109      	movs	r1, #9
    a026:	4630      	mov	r0, r6
    a028:	f7ff fb7e 	bl	9728 <atomic_test_bit>
    a02c:	b110      	cbz	r0, a034 <smp_dhkey_check+0xfe>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    a02e:	2108      	movs	r1, #8
    a030:	4630      	mov	r0, r6
    a032:	e7d0      	b.n	9fd6 <smp_dhkey_check+0xa0>
		return compute_and_check_and_send_slave_dhcheck(smp);
    a034:	4620      	mov	r0, r4
    a036:	f7ff ff10 	bl	9e5a <compute_and_check_and_send_slave_dhcheck>
    a03a:	4605      	mov	r5, r0
    a03c:	e7ac      	b.n	9f98 <smp_dhkey_check+0x62>
	...

0000a040 <sc_send_public_key>:
{
    a040:	b570      	push	{r4, r5, r6, lr}
    a042:	4605      	mov	r5, r0
	req_buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_CMD_PUBLIC_KEY,
    a044:	200c      	movs	r0, #12
    a046:	f7ff fd45 	bl	9ad4 <smp_create_pdu.isra.5>
	if (!req_buf) {
    a04a:	4604      	mov	r4, r0
    a04c:	b1a0      	cbz	r0, a078 <sc_send_public_key+0x38>
	req = net_buf_add(req_buf, sizeof(*req));
    a04e:	2140      	movs	r1, #64	; 0x40
    a050:	3008      	adds	r0, #8
    a052:	f00f f9a7 	bl	193a4 <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
    a056:	2220      	movs	r2, #32
    a058:	4908      	ldr	r1, [pc, #32]	; (a07c <sc_send_public_key+0x3c>)
	req = net_buf_add(req_buf, sizeof(*req));
    a05a:	4606      	mov	r6, r0
	memcpy(req->x, sc_public_key, sizeof(req->x));
    a05c:	f7f6 fb99 	bl	792 <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
    a060:	2220      	movs	r2, #32
    a062:	18b0      	adds	r0, r6, r2
    a064:	4906      	ldr	r1, [pc, #24]	; (a080 <sc_send_public_key+0x40>)
    a066:	f7f6 fb94 	bl	792 <memcpy>
	smp_send(smp, req_buf, NULL);
    a06a:	4628      	mov	r0, r5
    a06c:	2200      	movs	r2, #0
    a06e:	4621      	mov	r1, r4
    a070:	f7ff fe76 	bl	9d60 <smp_send>
	return 0;
    a074:	2000      	movs	r0, #0
    a076:	bd70      	pop	{r4, r5, r6, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    a078:	2008      	movs	r0, #8
}
    a07a:	bd70      	pop	{r4, r5, r6, pc}
    a07c:	200008f9 	.word	0x200008f9
    a080:	20000919 	.word	0x20000919

0000a084 <send_pairing_rsp>:
{
    a084:	b538      	push	{r3, r4, r5, lr}
    a086:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
    a088:	2002      	movs	r0, #2
    a08a:	f7ff fd23 	bl	9ad4 <smp_create_pdu.isra.5>
	if (!rsp_buf) {
    a08e:	4604      	mov	r4, r0
    a090:	b178      	cbz	r0, a0b2 <send_pairing_rsp+0x2e>
	rsp = net_buf_add(rsp_buf, sizeof(*rsp));
    a092:	2106      	movs	r1, #6
    a094:	3008      	adds	r0, #8
    a096:	f00f f985 	bl	193a4 <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
    a09a:	f105 01ad 	add.w	r1, r5, #173	; 0xad
    a09e:	2206      	movs	r2, #6
    a0a0:	f7f6 fb77 	bl	792 <memcpy>
	smp_send(smp, rsp_buf, NULL);
    a0a4:	4628      	mov	r0, r5
    a0a6:	2200      	movs	r2, #0
    a0a8:	4621      	mov	r1, r4
    a0aa:	f7ff fe59 	bl	9d60 <smp_send>
	return 0;
    a0ae:	2000      	movs	r0, #0
    a0b0:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    a0b2:	2008      	movs	r0, #8
}
    a0b4:	bd38      	pop	{r3, r4, r5, pc}
	...

0000a0b8 <smp_pairing_req>:
{
    a0b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_smp_pairing *req = (void *)buf->data;
    a0ba:	688f      	ldr	r7, [r1, #8]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    a0bc:	78fb      	ldrb	r3, [r7, #3]
    a0be:	3b07      	subs	r3, #7
    a0c0:	2b09      	cmp	r3, #9
{
    a0c2:	4604      	mov	r4, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    a0c4:	f200 80bf 	bhi.w	a246 <smp_pairing_req+0x18e>
	ret = smp_init(smp);
    a0c8:	f7ff fb4f 	bl	976a <smp_init>
	if (ret) {
    a0cc:	4605      	mov	r5, r0
    a0ce:	b110      	cbz	r0, a0d6 <smp_pairing_req+0x1e>
		return ret;
    a0d0:	b2c5      	uxtb	r5, r0
}
    a0d2:	4628      	mov	r0, r5
    a0d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    a0d6:	2301      	movs	r3, #1
	memcpy(smp->preq + 1, req, sizeof(*req));
    a0d8:	2206      	movs	r2, #6
    a0da:	4639      	mov	r1, r7
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    a0dc:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
	memcpy(smp->preq + 1, req, sizeof(*req));
    a0e0:	f104 00a6 	add.w	r0, r4, #166	; 0xa6
    a0e4:	f7f6 fb55 	bl	792 <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
    a0e8:	2302      	movs	r3, #2
    a0ea:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
	rsp->auth_req = get_auth(req->auth_req);
    a0ee:	78b8      	ldrb	r0, [r7, #2]
    a0f0:	f7ff fade 	bl	96b0 <get_auth>
    a0f4:	f884 00af 	strb.w	r0, [r4, #175]	; 0xaf
    a0f8:	4606      	mov	r6, r0
	rsp->io_capability = get_io_capa();
    a0fa:	f7ff fab3 	bl	9664 <get_io_capa>
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    a0fe:	2310      	movs	r3, #16
	rsp->io_capability = get_io_capa();
    a100:	f884 00ad 	strb.w	r0, [r4, #173]	; 0xad
	rsp->oob_flag = BT_SMP_OOB_NOT_PRESENT;
    a104:	f884 50ae 	strb.w	r5, [r4, #174]	; 0xae
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    a108:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
    a10c:	793b      	ldrb	r3, [r7, #4]
    a10e:	f003 0303 	and.w	r3, r3, #3
    a112:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
    a116:	797b      	ldrb	r3, [r7, #5]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    a118:	f016 0f08 	tst.w	r6, #8
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
    a11c:	f003 0301 	and.w	r3, r3, #1
    a120:	f884 30b2 	strb.w	r3, [r4, #178]	; 0xb2
    a124:	f104 06a0 	add.w	r6, r4, #160	; 0xa0
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    a128:	d00e      	beq.n	a148 <smp_pairing_req+0x90>
    a12a:	78bb      	ldrb	r3, [r7, #2]
    a12c:	071b      	lsls	r3, r3, #28
    a12e:	d50b      	bpl.n	a148 <smp_pairing_req+0x90>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
    a130:	2105      	movs	r1, #5
    a132:	4630      	mov	r0, r6
    a134:	f7ff fb05 	bl	9742 <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
    a138:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
		rsp->resp_key_dist &= SEND_KEYS_SC;
    a13c:	f884 50b2 	strb.w	r5, [r4, #178]	; 0xb2
		rsp->init_key_dist &= RECV_KEYS_SC;
    a140:	f003 0302 	and.w	r3, r3, #2
    a144:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    a148:	f894 30af 	ldrb.w	r3, [r4, #175]	; 0xaf
    a14c:	0698      	lsls	r0, r3, #26
    a14e:	d506      	bpl.n	a15e <smp_pairing_req+0xa6>
    a150:	78bb      	ldrb	r3, [r7, #2]
    a152:	0699      	lsls	r1, r3, #26
    a154:	d503      	bpl.n	a15e <smp_pairing_req+0xa6>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
    a156:	2111      	movs	r1, #17
    a158:	4630      	mov	r0, r6
    a15a:	f7ff faf2 	bl	9742 <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
    a15e:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
    a162:	f884 3179 	strb.w	r3, [r4, #377]	; 0x179
	smp->remote_dist = rsp->init_key_dist;
    a166:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
    a16a:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    a16e:	f894 30af 	ldrb.w	r3, [r4, #175]	; 0xaf
    a172:	07da      	lsls	r2, r3, #31
    a174:	d506      	bpl.n	a184 <smp_pairing_req+0xcc>
    a176:	78bb      	ldrb	r3, [r7, #2]
    a178:	07db      	lsls	r3, r3, #31
    a17a:	d503      	bpl.n	a184 <smp_pairing_req+0xcc>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
    a17c:	210a      	movs	r1, #10
    a17e:	4630      	mov	r0, r6
    a180:	f7ff fadf 	bl	9742 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
    a184:	2103      	movs	r1, #3
    a186:	4630      	mov	r0, r6
    a188:	f7ff fadb 	bl	9742 <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    a18c:	2105      	movs	r1, #5
    a18e:	4630      	mov	r0, r6
    a190:	f7ff faca 	bl	9728 <atomic_test_bit>
    a194:	783f      	ldrb	r7, [r7, #0]
    a196:	bb58      	cbnz	r0, a1f0 <smp_pairing_req+0x138>
	smp->method = legacy_get_pair_method(smp, remote_io);
    a198:	4639      	mov	r1, r7
    a19a:	4620      	mov	r0, r4
    a19c:	f7ff fc3e 	bl	9a1c <legacy_get_pair_method>
    a1a0:	4605      	mov	r5, r0
    a1a2:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
	if (smp->method == JUST_WORKS &&
    a1a6:	b990      	cbnz	r0, a1ce <smp_pairing_req+0x116>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    a1a8:	210c      	movs	r1, #12
    a1aa:	4630      	mov	r0, r6
    a1ac:	f7ff fabc 	bl	9728 <atomic_test_bit>
	if (smp->method == JUST_WORKS &&
    a1b0:	b968      	cbnz	r0, a1ce <smp_pairing_req+0x116>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    a1b2:	4f26      	ldr	r7, [pc, #152]	; (a24c <smp_pairing_req+0x194>)
    a1b4:	683b      	ldr	r3, [r7, #0]
    a1b6:	b153      	cbz	r3, a1ce <smp_pairing_req+0x116>
	    bt_auth && bt_auth->pairing_confirm) {
    a1b8:	691b      	ldr	r3, [r3, #16]
    a1ba:	b143      	cbz	r3, a1ce <smp_pairing_req+0x116>
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    a1bc:	4630      	mov	r0, r6
    a1be:	2109      	movs	r1, #9
    a1c0:	f7ff fabf 	bl	9742 <atomic_set_bit>
			bt_auth->pairing_confirm(smp->chan.chan.conn);
    a1c4:	683b      	ldr	r3, [r7, #0]
    a1c6:	6820      	ldr	r0, [r4, #0]
    a1c8:	691b      	ldr	r3, [r3, #16]
    a1ca:	4798      	blx	r3
			return 0;
    a1cc:	e781      	b.n	a0d2 <smp_pairing_req+0x1a>
	ret = send_pairing_rsp(smp);
    a1ce:	4620      	mov	r0, r4
    a1d0:	f7ff ff58 	bl	a084 <send_pairing_rsp>
	if (ret) {
    a1d4:	4605      	mov	r5, r0
    a1d6:	2800      	cmp	r0, #0
    a1d8:	f47f af7b 	bne.w	a0d2 <smp_pairing_req+0x1a>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    a1dc:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    a1e0:	2103      	movs	r1, #3
    a1e2:	f7ff faae 	bl	9742 <atomic_set_bit>
	return legacy_request_tk(smp);
    a1e6:	4620      	mov	r0, r4
}
    a1e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return legacy_request_tk(smp);
    a1ec:	f7ff bbb2 	b.w	9954 <legacy_request_tk>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY)
    a1f0:	2f04      	cmp	r7, #4
    a1f2:	d826      	bhi.n	a242 <smp_pairing_req+0x18a>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    a1f4:	f894 50a8 	ldrb.w	r5, [r4, #168]	; 0xa8
    a1f8:	f894 30af 	ldrb.w	r3, [r4, #175]	; 0xaf
    a1fc:	431d      	orrs	r5, r3
    a1fe:	f015 0504 	ands.w	r5, r5, #4
    a202:	d006      	beq.n	a212 <smp_pairing_req+0x15a>
	return gen_method_sc[remote_io][get_io_capa()];
    a204:	f7ff fa2e 	bl	9664 <get_io_capa>
    a208:	4911      	ldr	r1, [pc, #68]	; (a250 <smp_pairing_req+0x198>)
    a20a:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    a20e:	440f      	add	r7, r1
    a210:	5c3d      	ldrb	r5, [r7, r0]
	smp->method = get_pair_method(smp, req->io_capability);
    a212:	f884 50a4 	strb.w	r5, [r4, #164]	; 0xa4
	if (smp->method == JUST_WORKS) {
    a216:	b955      	cbnz	r5, a22e <smp_pairing_req+0x176>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    a218:	210c      	movs	r1, #12
    a21a:	4630      	mov	r0, r6
    a21c:	f7ff fa84 	bl	9728 <atomic_test_bit>
    a220:	b928      	cbnz	r0, a22e <smp_pairing_req+0x176>
    a222:	4f0a      	ldr	r7, [pc, #40]	; (a24c <smp_pairing_req+0x194>)
    a224:	683b      	ldr	r3, [r7, #0]
    a226:	b113      	cbz	r3, a22e <smp_pairing_req+0x176>
		    bt_auth && bt_auth->pairing_confirm) {
    a228:	691b      	ldr	r3, [r3, #16]
    a22a:	2b00      	cmp	r3, #0
    a22c:	d1c6      	bne.n	a1bc <smp_pairing_req+0x104>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    a22e:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    a232:	210c      	movs	r1, #12
    a234:	f7ff fa85 	bl	9742 <atomic_set_bit>
	return send_pairing_rsp(smp);
    a238:	4620      	mov	r0, r4
}
    a23a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return send_pairing_rsp(smp);
    a23e:	f7ff bf21 	b.w	a084 <send_pairing_rsp>
		return JUST_WORKS;
    a242:	2500      	movs	r5, #0
    a244:	e7e5      	b.n	a212 <smp_pairing_req+0x15a>
		return BT_SMP_ERR_ENC_KEY_SIZE;
    a246:	2506      	movs	r5, #6
    a248:	e743      	b.n	a0d2 <smp_pairing_req+0x1a>
    a24a:	bf00      	nop
    a24c:	20003128 	.word	0x20003128
    a250:	0002527b 	.word	0x0002527b

0000a254 <smp_send_pairing_random>:
{
    a254:	b538      	push	{r3, r4, r5, lr}
    a256:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
    a258:	2004      	movs	r0, #4
    a25a:	f7ff fc3b 	bl	9ad4 <smp_create_pdu.isra.5>
	if (!rsp_buf) {
    a25e:	4604      	mov	r4, r0
    a260:	b178      	cbz	r0, a282 <smp_send_pairing_random+0x2e>
	req = net_buf_add(rsp_buf, sizeof(*req));
    a262:	2110      	movs	r1, #16
    a264:	3008      	adds	r0, #8
    a266:	f00f f89d 	bl	193a4 <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
    a26a:	f105 01c3 	add.w	r1, r5, #195	; 0xc3
    a26e:	2210      	movs	r2, #16
    a270:	f7f6 fa8f 	bl	792 <memcpy>
	smp_send(smp, rsp_buf, NULL);
    a274:	4628      	mov	r0, r5
    a276:	2200      	movs	r2, #0
    a278:	4621      	mov	r1, r4
    a27a:	f7ff fd71 	bl	9d60 <smp_send>
	return 0;
    a27e:	2000      	movs	r0, #0
    a280:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    a282:	2008      	movs	r0, #8
}
    a284:	bd38      	pop	{r3, r4, r5, pc}
	...

0000a288 <bt_smp_distribute_keys>:
{
    a288:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a28c:	4605      	mov	r5, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    a28e:	6800      	ldr	r0, [r0, #0]
	if (!keys) {
    a290:	6f03      	ldr	r3, [r0, #112]	; 0x70
{
    a292:	b08d      	sub	sp, #52	; 0x34
	if (!keys) {
    a294:	b97b      	cbnz	r3, a2b6 <bt_smp_distribute_keys+0x2e>
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
    a296:	3048      	adds	r0, #72	; 0x48
    a298:	f7f9 f83a 	bl	3310 <bt_addr_le_str>
    a29c:	4b43      	ldr	r3, [pc, #268]	; (a3ac <bt_smp_distribute_keys+0x124>)
    a29e:	9302      	str	r3, [sp, #8]
    a2a0:	9001      	str	r0, [sp, #4]
    a2a2:	9300      	str	r3, [sp, #0]
    a2a4:	4a42      	ldr	r2, [pc, #264]	; (a3b0 <bt_smp_distribute_keys+0x128>)
    a2a6:	4b43      	ldr	r3, [pc, #268]	; (a3b4 <bt_smp_distribute_keys+0x12c>)
    a2a8:	4943      	ldr	r1, [pc, #268]	; (a3b8 <bt_smp_distribute_keys+0x130>)
    a2aa:	4844      	ldr	r0, [pc, #272]	; (a3bc <bt_smp_distribute_keys+0x134>)
    a2ac:	f7f7 fff2 	bl	2294 <printk>
}
    a2b0:	b00d      	add	sp, #52	; 0x34
    a2b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    a2b6:	f105 07a0 	add.w	r7, r5, #160	; 0xa0
    a2ba:	2105      	movs	r1, #5
    a2bc:	4638      	mov	r0, r7
    a2be:	f7ff fa33 	bl	9728 <atomic_test_bit>
    a2c2:	4680      	mov	r8, r0
    a2c4:	2800      	cmp	r0, #0
    a2c6:	d1f3      	bne.n	a2b0 <bt_smp_distribute_keys+0x28>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
    a2c8:	f895 3179 	ldrb.w	r3, [r5, #377]	; 0x179
    a2cc:	07db      	lsls	r3, r3, #31
    a2ce:	d5ef      	bpl.n	a2b0 <bt_smp_distribute_keys+0x28>
	struct bt_keys *keys = conn->le.keys;
    a2d0:	682b      	ldr	r3, [r5, #0]
		bt_rand(key, sizeof(key));
    a2d2:	2110      	movs	r1, #16
    a2d4:	a808      	add	r0, sp, #32
	struct bt_keys *keys = conn->le.keys;
    a2d6:	6f1c      	ldr	r4, [r3, #112]	; 0x70
		bt_rand(key, sizeof(key));
    a2d8:	f002 fab8 	bl	c84c <bt_rand>
		bt_rand(&rand, sizeof(rand));
    a2dc:	2108      	movs	r1, #8
    a2de:	a806      	add	r0, sp, #24
    a2e0:	f002 fab4 	bl	c84c <bt_rand>
		bt_rand(&ediv, sizeof(ediv));
    a2e4:	2102      	movs	r1, #2
    a2e6:	f10d 0016 	add.w	r0, sp, #22
    a2ea:	f002 faaf 	bl	c84c <bt_rand>
		buf = smp_create_pdu(conn, BT_SMP_CMD_ENCRYPT_INFO,
    a2ee:	2006      	movs	r0, #6
    a2f0:	f7ff fbf0 	bl	9ad4 <smp_create_pdu.isra.5>
		if (!buf) {
    a2f4:	4606      	mov	r6, r0
    a2f6:	b948      	cbnz	r0, a30c <bt_smp_distribute_keys+0x84>
			BT_ERR("Unable to allocate Encrypt Info buffer");
    a2f8:	4b2c      	ldr	r3, [pc, #176]	; (a3ac <bt_smp_distribute_keys+0x124>)
    a2fa:	9301      	str	r3, [sp, #4]
    a2fc:	9300      	str	r3, [sp, #0]
    a2fe:	4a2c      	ldr	r2, [pc, #176]	; (a3b0 <bt_smp_distribute_keys+0x128>)
    a300:	4b2f      	ldr	r3, [pc, #188]	; (a3c0 <bt_smp_distribute_keys+0x138>)
    a302:	492d      	ldr	r1, [pc, #180]	; (a3b8 <bt_smp_distribute_keys+0x130>)
    a304:	482f      	ldr	r0, [pc, #188]	; (a3c4 <bt_smp_distribute_keys+0x13c>)
			BT_ERR("Unable to allocate Master Ident buffer");
    a306:	f7f7 ffc5 	bl	2294 <printk>
    a30a:	e7d1      	b.n	a2b0 <bt_smp_distribute_keys+0x28>
		info = net_buf_add(buf, sizeof(*info));
    a30c:	2110      	movs	r1, #16
    a30e:	3008      	adds	r0, #8
    a310:	f00f f848 	bl	193a4 <net_buf_simple_add>
		memcpy(info->ltk, key, keys->enc_size);
    a314:	79e2      	ldrb	r2, [r4, #7]
    a316:	a908      	add	r1, sp, #32
		info = net_buf_add(buf, sizeof(*info));
    a318:	4681      	mov	r9, r0
		memcpy(info->ltk, key, keys->enc_size);
    a31a:	f7f6 fa3a 	bl	792 <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
    a31e:	79e0      	ldrb	r0, [r4, #7]
    a320:	280f      	cmp	r0, #15
    a322:	d805      	bhi.n	a330 <bt_smp_distribute_keys+0xa8>
			memset(info->ltk + keys->enc_size, 0,
    a324:	f1c0 0210 	rsb	r2, r0, #16
    a328:	4641      	mov	r1, r8
    a32a:	4448      	add	r0, r9
    a32c:	f7f6 fa5d 	bl	7ea <memset>
		smp_send(smp, buf, NULL);
    a330:	4631      	mov	r1, r6
    a332:	2200      	movs	r2, #0
    a334:	4628      	mov	r0, r5
    a336:	f7ff fd13 	bl	9d60 <smp_send>
		buf = smp_create_pdu(conn, BT_SMP_CMD_MASTER_IDENT,
    a33a:	2007      	movs	r0, #7
    a33c:	f7ff fbca 	bl	9ad4 <smp_create_pdu.isra.5>
		if (!buf) {
    a340:	4606      	mov	r6, r0
    a342:	b938      	cbnz	r0, a354 <bt_smp_distribute_keys+0xcc>
			BT_ERR("Unable to allocate Master Ident buffer");
    a344:	4b19      	ldr	r3, [pc, #100]	; (a3ac <bt_smp_distribute_keys+0x124>)
    a346:	9301      	str	r3, [sp, #4]
    a348:	9300      	str	r3, [sp, #0]
    a34a:	4a19      	ldr	r2, [pc, #100]	; (a3b0 <bt_smp_distribute_keys+0x128>)
    a34c:	4b1c      	ldr	r3, [pc, #112]	; (a3c0 <bt_smp_distribute_keys+0x138>)
    a34e:	491a      	ldr	r1, [pc, #104]	; (a3b8 <bt_smp_distribute_keys+0x130>)
    a350:	481d      	ldr	r0, [pc, #116]	; (a3c8 <bt_smp_distribute_keys+0x140>)
    a352:	e7d8      	b.n	a306 <bt_smp_distribute_keys+0x7e>
		ident = net_buf_add(buf, sizeof(*ident));
    a354:	210a      	movs	r1, #10
    a356:	3008      	adds	r0, #8
    a358:	f00f f824 	bl	193a4 <net_buf_simple_add>
		ident->rand = rand;
    a35c:	9b06      	ldr	r3, [sp, #24]
    a35e:	f8c0 3002 	str.w	r3, [r0, #2]
    a362:	9b07      	ldr	r3, [sp, #28]
    a364:	f8c0 3006 	str.w	r3, [r0, #6]
		ident->ediv = ediv;
    a368:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    a36c:	8003      	strh	r3, [r0, #0]
		smp_send(smp, buf, ident_sent);
    a36e:	4631      	mov	r1, r6
    a370:	4628      	mov	r0, r5
    a372:	4a16      	ldr	r2, [pc, #88]	; (a3cc <bt_smp_distribute_keys+0x144>)
    a374:	f7ff fcf4 	bl	9d60 <smp_send>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    a378:	210a      	movs	r1, #10
    a37a:	4638      	mov	r0, r7
    a37c:	f7ff f9d4 	bl	9728 <atomic_test_bit>
    a380:	2800      	cmp	r0, #0
    a382:	d095      	beq.n	a2b0 <bt_smp_distribute_keys+0x28>
			bt_keys_add_type(keys, BT_KEYS_SLAVE_LTK);
    a384:	2101      	movs	r1, #1
    a386:	4620      	mov	r0, r4
    a388:	f001 f9fe 	bl	b788 <bt_keys_add_type>
			memcpy(keys->slave_ltk.val, key,
    a38c:	2210      	movs	r2, #16
    a38e:	a908      	add	r1, sp, #32
    a390:	f104 0052 	add.w	r0, r4, #82	; 0x52
    a394:	f7f6 f9fd 	bl	792 <memcpy>
			keys->slave_ltk.rand = rand;
    a398:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    a39c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
			keys->slave_ltk.ediv = ediv;
    a3a0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    a3a4:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
    a3a8:	e782      	b.n	a2b0 <bt_smp_distribute_keys+0x28>
    a3aa:	bf00      	nop
    a3ac:	00023dae 	.word	0x00023dae
    a3b0:	00022d76 	.word	0x00022d76
    a3b4:	00024fa9 	.word	0x00024fa9
    a3b8:	000272d8 	.word	0x000272d8
    a3bc:	000250e5 	.word	0x000250e5
    a3c0:	00024f92 	.word	0x00024f92
    a3c4:	0002510a 	.word	0x0002510a
    a3c8:	00025141 	.word	0x00025141
    a3cc:	0000a895 	.word	0x0000a895

0000a3d0 <atomic_test_and_clear_bit>:
{
    a3d0:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
    a3d2:	f001 021f 	and.w	r2, r1, #31
    a3d6:	2301      	movs	r3, #1
    a3d8:	4093      	lsls	r3, r2
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    a3da:	0949      	lsrs	r1, r1, #5
    a3dc:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a3de:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    a3e2:	f3bf 8f5b 	dmb	ish
    a3e6:	e850 2f00 	ldrex	r2, [r0]
    a3ea:	ea02 0104 	and.w	r1, r2, r4
    a3ee:	e840 1e00 	strex	lr, r1, [r0]
    a3f2:	f1be 0f00 	cmp.w	lr, #0
    a3f6:	d1f6      	bne.n	a3e6 <atomic_test_and_clear_bit+0x16>
    a3f8:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
    a3fc:	421a      	tst	r2, r3
}
    a3fe:	bf14      	ite	ne
    a400:	2001      	movne	r0, #1
    a402:	2000      	moveq	r0, #0
    a404:	bd10      	pop	{r4, pc}

0000a406 <smp_reset>:
{
    a406:	b538      	push	{r3, r4, r5, lr}
    a408:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    a40a:	6805      	ldr	r5, [r0, #0]
	k_delayed_work_cancel(&smp->work);
    a40c:	f500 70be 	add.w	r0, r0, #380	; 0x17c
    a410:	f017 ff16 	bl	22240 <k_delayed_work_cancel>
	smp->method = JUST_WORKS;
    a414:	2300      	movs	r3, #0
    a416:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
	atomic_set(&smp->allowed_cmds, 0);
    a41a:	f104 009c 	add.w	r0, r4, #156	; 0x9c
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    a41e:	f3bf 8f5b 	dmb	ish
    a422:	e850 2f00 	ldrex	r2, [r0]
    a426:	e840 3100 	strex	r1, r3, [r0]
    a42a:	2900      	cmp	r1, #0
    a42c:	d1f9      	bne.n	a422 <smp_reset+0x1c>
    a42e:	f3bf 8f5b 	dmb	ish
    a432:	f3bf 8f5b 	dmb	ish
    a436:	34a0      	adds	r4, #160	; 0xa0
    a438:	e854 2f00 	ldrex	r2, [r4]
    a43c:	e844 3100 	strex	r1, r3, [r4]
    a440:	2900      	cmp	r1, #0
    a442:	d1f9      	bne.n	a438 <smp_reset+0x32>
    a444:	f3bf 8f5b 	dmb	ish
	if (conn->required_sec_level != conn->sec_level) {
    a448:	7a2b      	ldrb	r3, [r5, #8]
    a44a:	7a6a      	ldrb	r2, [r5, #9]
    a44c:	429a      	cmp	r2, r3
		conn->required_sec_level = conn->sec_level;
    a44e:	bf18      	it	ne
    a450:	726b      	strbne	r3, [r5, #9]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    a452:	78eb      	ldrb	r3, [r5, #3]
    a454:	b923      	cbnz	r3, a460 <smp_reset+0x5a>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
    a456:	210b      	movs	r1, #11
}
    a458:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
    a45c:	f7ff b971 	b.w	9742 <atomic_set_bit>
    a460:	2101      	movs	r1, #1
    a462:	e7f9      	b.n	a458 <smp_reset+0x52>

0000a464 <smp_error>:
{
    a464:	b570      	push	{r4, r5, r6, lr}
    a466:	4605      	mov	r5, r0
    a468:	460e      	mov	r6, r1
	smp_reset(smp);
    a46a:	f7ff ffcc 	bl	a406 <smp_reset>
	buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_CMD_PAIRING_FAIL,
    a46e:	2005      	movs	r0, #5
    a470:	f7ff fb30 	bl	9ad4 <smp_create_pdu.isra.5>
	if (!buf) {
    a474:	4604      	mov	r4, r0
    a476:	b160      	cbz	r0, a492 <smp_error+0x2e>
	rsp = net_buf_add(buf, sizeof(*rsp));
    a478:	2101      	movs	r1, #1
    a47a:	3008      	adds	r0, #8
    a47c:	f00e ff92 	bl	193a4 <net_buf_simple_add>
	rsp->reason = reason;
    a480:	7006      	strb	r6, [r0, #0]
    a482:	6828      	ldr	r0, [r5, #0]
    a484:	2300      	movs	r3, #0
    a486:	4622      	mov	r2, r4
    a488:	2106      	movs	r1, #6
    a48a:	f7fc fbed 	bl	6c68 <bt_l2cap_send_cb>
	return 0;
    a48e:	2000      	movs	r0, #0
    a490:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    a492:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    a496:	bd70      	pop	{r4, r5, r6, pc}

0000a498 <bt_smp_dhkey_ready>:
{
    a498:	b538      	push	{r3, r4, r5, lr}
		if (atomic_test_and_clear_bit(bt_smp_pool[i].flags,
    a49a:	4c1d      	ldr	r4, [pc, #116]	; (a510 <bt_smp_dhkey_ready+0x78>)
{
    a49c:	4605      	mov	r5, r0
		if (atomic_test_and_clear_bit(bt_smp_pool[i].flags,
    a49e:	2107      	movs	r1, #7
    a4a0:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    a4a4:	f7ff ff94 	bl	a3d0 <atomic_test_and_clear_bit>
    a4a8:	b370      	cbz	r0, a508 <bt_smp_dhkey_ready+0x70>
	if (!dhkey) {
    a4aa:	b92d      	cbnz	r5, a4b8 <bt_smp_dhkey_ready+0x20>
		smp_error(smp, BT_SMP_ERR_DHKEY_CHECK_FAILED);
    a4ac:	210b      	movs	r1, #11
			smp_error(smp, err);
    a4ae:	4620      	mov	r0, r4
}
    a4b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			smp_error(smp, err);
    a4b4:	f7ff bfd6 	b.w	a464 <smp_error>
	memcpy(smp->dhkey, dhkey, 32);
    a4b8:	4629      	mov	r1, r5
    a4ba:	2220      	movs	r2, #32
    a4bc:	f204 1033 	addw	r0, r4, #307	; 0x133
    a4c0:	f7f6 f967 	bl	792 <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    a4c4:	2109      	movs	r1, #9
    a4c6:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    a4ca:	f7ff f92d 	bl	9728 <atomic_test_bit>
    a4ce:	b128      	cbz	r0, a4dc <bt_smp_dhkey_ready+0x44>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    a4d0:	2108      	movs	r1, #8
    a4d2:	4810      	ldr	r0, [pc, #64]	; (a514 <bt_smp_dhkey_ready+0x7c>)
}
    a4d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    a4d8:	f7ff b933 	b.w	9742 <atomic_set_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
    a4dc:	210d      	movs	r1, #13
    a4de:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    a4e2:	f7ff f921 	bl	9728 <atomic_test_bit>
    a4e6:	2800      	cmp	r0, #0
    a4e8:	d1f2      	bne.n	a4d0 <bt_smp_dhkey_ready+0x38>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
    a4ea:	2108      	movs	r1, #8
    a4ec:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    a4f0:	f7ff f91a 	bl	9728 <atomic_test_bit>
    a4f4:	b140      	cbz	r0, a508 <bt_smp_dhkey_ready+0x70>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    a4f6:	6823      	ldr	r3, [r4, #0]
    a4f8:	78db      	ldrb	r3, [r3, #3]
			err = compute_and_send_master_dhcheck(smp);
    a4fa:	4620      	mov	r0, r4
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    a4fc:	b92b      	cbnz	r3, a50a <bt_smp_dhkey_ready+0x72>
			err = compute_and_send_master_dhcheck(smp);
    a4fe:	f7ff fc5c 	bl	9dba <compute_and_send_master_dhcheck>
		if (err) {
    a502:	4601      	mov	r1, r0
    a504:	2800      	cmp	r0, #0
    a506:	d1d2      	bne.n	a4ae <bt_smp_dhkey_ready+0x16>
    a508:	bd38      	pop	{r3, r4, r5, pc}
		err = compute_and_check_and_send_slave_dhcheck(smp);
    a50a:	f7ff fca6 	bl	9e5a <compute_and_check_and_send_slave_dhcheck>
    a50e:	e7f8      	b.n	a502 <bt_smp_dhkey_ready+0x6a>
    a510:	20000754 	.word	0x20000754
    a514:	200007f4 	.word	0x200007f4

0000a518 <bt_smp_recv>:
{
    a518:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    a51a:	898b      	ldrh	r3, [r1, #12]
{
    a51c:	b085      	sub	sp, #20
    a51e:	4604      	mov	r4, r0
    a520:	460e      	mov	r6, r1
	if (buf->len < sizeof(*hdr)) {
    a522:	b953      	cbnz	r3, a53a <bt_smp_recv+0x22>
		BT_ERR("Too small SMP PDU received");
    a524:	4b36      	ldr	r3, [pc, #216]	; (a600 <bt_smp_recv+0xe8>)
    a526:	9301      	str	r3, [sp, #4]
    a528:	9300      	str	r3, [sp, #0]
    a52a:	4a36      	ldr	r2, [pc, #216]	; (a604 <bt_smp_recv+0xec>)
    a52c:	4b36      	ldr	r3, [pc, #216]	; (a608 <bt_smp_recv+0xf0>)
    a52e:	4937      	ldr	r1, [pc, #220]	; (a60c <bt_smp_recv+0xf4>)
    a530:	4837      	ldr	r0, [pc, #220]	; (a610 <bt_smp_recv+0xf8>)
    a532:	f7f7 feaf 	bl	2294 <printk>
}
    a536:	b005      	add	sp, #20
    a538:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct bt_smp_hdr *hdr = (void *)buf->data;
    a53a:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    a53c:	2101      	movs	r1, #1
	struct bt_smp_hdr *hdr = (void *)buf->data;
    a53e:	f850 5f08 	ldr.w	r5, [r0, #8]!
	net_buf_pull(buf, sizeof(*hdr));
    a542:	f00e ff7f 	bl	19444 <net_buf_simple_pull>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    a546:	2104      	movs	r1, #4
    a548:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    a54c:	f7ff f8ec 	bl	9728 <atomic_test_bit>
    a550:	b158      	cbz	r0, a56a <bt_smp_recv+0x52>
		BT_WARN("SMP command (code 0x%02x) received after timeout",
    a552:	4b2b      	ldr	r3, [pc, #172]	; (a600 <bt_smp_recv+0xe8>)
    a554:	9302      	str	r3, [sp, #8]
    a556:	782a      	ldrb	r2, [r5, #0]
    a558:	9201      	str	r2, [sp, #4]
    a55a:	9300      	str	r3, [sp, #0]
    a55c:	4a2d      	ldr	r2, [pc, #180]	; (a614 <bt_smp_recv+0xfc>)
    a55e:	4b2a      	ldr	r3, [pc, #168]	; (a608 <bt_smp_recv+0xf0>)
    a560:	492a      	ldr	r1, [pc, #168]	; (a60c <bt_smp_recv+0xf4>)
    a562:	482d      	ldr	r0, [pc, #180]	; (a618 <bt_smp_recv+0x100>)
    a564:	f7f7 fe96 	bl	2294 <printk>
		return;
    a568:	e7e5      	b.n	a536 <bt_smp_recv+0x1e>
	if (hdr->code >= ARRAY_SIZE(handlers) || !handlers[hdr->code].func) {
    a56a:	7829      	ldrb	r1, [r5, #0]
    a56c:	290d      	cmp	r1, #13
    a56e:	d803      	bhi.n	a578 <bt_smp_recv+0x60>
    a570:	4f2a      	ldr	r7, [pc, #168]	; (a61c <bt_smp_recv+0x104>)
    a572:	f857 3031 	ldr.w	r3, [r7, r1, lsl #3]
    a576:	b983      	cbnz	r3, a59a <bt_smp_recv+0x82>
		BT_WARN("Unhandled SMP code 0x%02x", hdr->code);
    a578:	4b21      	ldr	r3, [pc, #132]	; (a600 <bt_smp_recv+0xe8>)
    a57a:	9302      	str	r3, [sp, #8]
    a57c:	9101      	str	r1, [sp, #4]
    a57e:	9300      	str	r3, [sp, #0]
    a580:	4922      	ldr	r1, [pc, #136]	; (a60c <bt_smp_recv+0xf4>)
    a582:	4b21      	ldr	r3, [pc, #132]	; (a608 <bt_smp_recv+0xf0>)
    a584:	4a23      	ldr	r2, [pc, #140]	; (a614 <bt_smp_recv+0xfc>)
    a586:	4826      	ldr	r0, [pc, #152]	; (a620 <bt_smp_recv+0x108>)
    a588:	f7f7 fe84 	bl	2294 <printk>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
    a58c:	2107      	movs	r1, #7
		smp_error(smp, err);
    a58e:	4620      	mov	r0, r4
}
    a590:	b005      	add	sp, #20
    a592:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		smp_error(smp, err);
    a596:	f7ff bf65 	b.w	a464 <smp_error>
	if (!atomic_test_and_clear_bit(&smp->allowed_cmds, hdr->code)) {
    a59a:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    a59e:	f7ff ff17 	bl	a3d0 <atomic_test_and_clear_bit>
    a5a2:	b978      	cbnz	r0, a5c4 <bt_smp_recv+0xac>
		BT_WARN("Unexpected SMP code 0x%02x", hdr->code);
    a5a4:	4b16      	ldr	r3, [pc, #88]	; (a600 <bt_smp_recv+0xe8>)
    a5a6:	9302      	str	r3, [sp, #8]
    a5a8:	782a      	ldrb	r2, [r5, #0]
    a5aa:	9201      	str	r2, [sp, #4]
    a5ac:	9300      	str	r3, [sp, #0]
    a5ae:	4a19      	ldr	r2, [pc, #100]	; (a614 <bt_smp_recv+0xfc>)
    a5b0:	4b15      	ldr	r3, [pc, #84]	; (a608 <bt_smp_recv+0xf0>)
    a5b2:	4916      	ldr	r1, [pc, #88]	; (a60c <bt_smp_recv+0xf4>)
    a5b4:	481b      	ldr	r0, [pc, #108]	; (a624 <bt_smp_recv+0x10c>)
    a5b6:	f7f7 fe6d 	bl	2294 <printk>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
    a5ba:	782b      	ldrb	r3, [r5, #0]
    a5bc:	2b05      	cmp	r3, #5
    a5be:	d0ba      	beq.n	a536 <bt_smp_recv+0x1e>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    a5c0:	2108      	movs	r1, #8
    a5c2:	e7e4      	b.n	a58e <bt_smp_recv+0x76>
	if (buf->len != handlers[hdr->code].expect_len) {
    a5c4:	782b      	ldrb	r3, [r5, #0]
    a5c6:	89b1      	ldrh	r1, [r6, #12]
    a5c8:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    a5cc:	7912      	ldrb	r2, [r2, #4]
    a5ce:	428a      	cmp	r2, r1
    a5d0:	d00c      	beq.n	a5ec <bt_smp_recv+0xd4>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    a5d2:	4a0b      	ldr	r2, [pc, #44]	; (a600 <bt_smp_recv+0xe8>)
    a5d4:	9203      	str	r2, [sp, #12]
    a5d6:	9302      	str	r3, [sp, #8]
    a5d8:	9101      	str	r1, [sp, #4]
    a5da:	9200      	str	r2, [sp, #0]
    a5dc:	490b      	ldr	r1, [pc, #44]	; (a60c <bt_smp_recv+0xf4>)
    a5de:	4b0a      	ldr	r3, [pc, #40]	; (a608 <bt_smp_recv+0xf0>)
    a5e0:	4a08      	ldr	r2, [pc, #32]	; (a604 <bt_smp_recv+0xec>)
    a5e2:	4811      	ldr	r0, [pc, #68]	; (a628 <bt_smp_recv+0x110>)
    a5e4:	f7f7 fe56 	bl	2294 <printk>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
    a5e8:	210a      	movs	r1, #10
    a5ea:	e7d0      	b.n	a58e <bt_smp_recv+0x76>
	err = handlers[hdr->code].func(smp, buf);
    a5ec:	4631      	mov	r1, r6
    a5ee:	f857 3033 	ldr.w	r3, [r7, r3, lsl #3]
    a5f2:	4620      	mov	r0, r4
    a5f4:	4798      	blx	r3
	if (err) {
    a5f6:	4601      	mov	r1, r0
    a5f8:	2800      	cmp	r0, #0
    a5fa:	d09c      	beq.n	a536 <bt_smp_recv+0x1e>
    a5fc:	e7c7      	b.n	a58e <bt_smp_recv+0x76>
    a5fe:	bf00      	nop
    a600:	00023dae 	.word	0x00023dae
    a604:	00022d76 	.word	0x00022d76
    a608:	00025071 	.word	0x00025071
    a60c:	000272d8 	.word	0x000272d8
    a610:	000251a1 	.word	0x000251a1
    a614:	00024006 	.word	0x00024006
    a618:	000251cc 	.word	0x000251cc
    a61c:	00025294 	.word	0x00025294
    a620:	0002520d 	.word	0x0002520d
    a624:	00025237 	.word	0x00025237
    a628:	00024cba 	.word	0x00024cba

0000a62c <smp_pairing_failed>:
{
    a62c:	b530      	push	{r4, r5, lr}
    a62e:	b085      	sub	sp, #20
	BT_ERR("reason 0x%x", req->reason);
    a630:	4b14      	ldr	r3, [pc, #80]	; (a684 <smp_pairing_failed+0x58>)
	struct bt_conn *conn = smp->chan.chan.conn;
    a632:	6805      	ldr	r5, [r0, #0]
	BT_ERR("reason 0x%x", req->reason);
    a634:	9302      	str	r3, [sp, #8]
    a636:	688a      	ldr	r2, [r1, #8]
    a638:	4913      	ldr	r1, [pc, #76]	; (a688 <smp_pairing_failed+0x5c>)
    a63a:	7812      	ldrb	r2, [r2, #0]
    a63c:	9201      	str	r2, [sp, #4]
{
    a63e:	4604      	mov	r4, r0
	BT_ERR("reason 0x%x", req->reason);
    a640:	9300      	str	r3, [sp, #0]
    a642:	4a12      	ldr	r2, [pc, #72]	; (a68c <smp_pairing_failed+0x60>)
    a644:	4b12      	ldr	r3, [pc, #72]	; (a690 <smp_pairing_failed+0x64>)
    a646:	4813      	ldr	r0, [pc, #76]	; (a694 <smp_pairing_failed+0x68>)
    a648:	f7f7 fe24 	bl	2294 <printk>
	switch (smp->method) {
    a64c:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    a650:	3b01      	subs	r3, #1
    a652:	2b02      	cmp	r3, #2
    a654:	d804      	bhi.n	a660 <smp_pairing_failed+0x34>
		bt_auth->cancel(conn);
    a656:	4b10      	ldr	r3, [pc, #64]	; (a698 <smp_pairing_failed+0x6c>)
    a658:	681b      	ldr	r3, [r3, #0]
    a65a:	4628      	mov	r0, r5
    a65c:	68db      	ldr	r3, [r3, #12]
    a65e:	4798      	blx	r3
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    a660:	2102      	movs	r1, #2
    a662:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    a666:	f7ff f85f 	bl	9728 <atomic_test_bit>
    a66a:	b120      	cbz	r0, a676 <smp_pairing_failed+0x4a>
	    smp->chan.chan.conn->le.keys) {
    a66c:	6823      	ldr	r3, [r4, #0]
    a66e:	6f18      	ldr	r0, [r3, #112]	; 0x70
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    a670:	b108      	cbz	r0, a676 <smp_pairing_failed+0x4a>
		bt_keys_clear(smp->chan.chan.conn->le.keys);
    a672:	f000 fff3 	bl	b65c <bt_keys_clear>
	smp_reset(smp);
    a676:	4620      	mov	r0, r4
    a678:	f7ff fec5 	bl	a406 <smp_reset>
}
    a67c:	2000      	movs	r0, #0
    a67e:	b005      	add	sp, #20
    a680:	bd30      	pop	{r4, r5, pc}
    a682:	bf00      	nop
    a684:	00023dae 	.word	0x00023dae
    a688:	000272d8 	.word	0x000272d8
    a68c:	00022d76 	.word	0x00022d76
    a690:	00025017 	.word	0x00025017
    a694:	0002543d 	.word	0x0002543d
    a698:	20003128 	.word	0x20003128

0000a69c <smp_timeout>:
{
    a69c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	BT_ERR("SMP Timeout");
    a69e:	4b10      	ldr	r3, [pc, #64]	; (a6e0 <smp_timeout+0x44>)
    a6a0:	9301      	str	r3, [sp, #4]
{
    a6a2:	4604      	mov	r4, r0
	BT_ERR("SMP Timeout");
    a6a4:	9300      	str	r3, [sp, #0]
    a6a6:	490f      	ldr	r1, [pc, #60]	; (a6e4 <smp_timeout+0x48>)
    a6a8:	4b0f      	ldr	r3, [pc, #60]	; (a6e8 <smp_timeout+0x4c>)
    a6aa:	4a10      	ldr	r2, [pc, #64]	; (a6ec <smp_timeout+0x50>)
	struct bt_smp *smp = CONTAINER_OF(work, struct bt_smp, work);
    a6ac:	f5a0 75be 	sub.w	r5, r0, #380	; 0x17c
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    a6b0:	3cdc      	subs	r4, #220	; 0xdc
	BT_ERR("SMP Timeout");
    a6b2:	480f      	ldr	r0, [pc, #60]	; (a6f0 <smp_timeout+0x54>)
    a6b4:	f7f7 fdee 	bl	2294 <printk>
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    a6b8:	2102      	movs	r1, #2
    a6ba:	4620      	mov	r0, r4
    a6bc:	f7ff f834 	bl	9728 <atomic_test_bit>
    a6c0:	b120      	cbz	r0, a6cc <smp_timeout+0x30>
	    smp->chan.chan.conn->le.keys) {
    a6c2:	682b      	ldr	r3, [r5, #0]
    a6c4:	6f18      	ldr	r0, [r3, #112]	; 0x70
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    a6c6:	b108      	cbz	r0, a6cc <smp_timeout+0x30>
		bt_keys_clear(smp->chan.chan.conn->le.keys);
    a6c8:	f000 ffc8 	bl	b65c <bt_keys_clear>
	smp_reset(smp);
    a6cc:	4628      	mov	r0, r5
    a6ce:	f7ff fe9a 	bl	a406 <smp_reset>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
    a6d2:	2104      	movs	r1, #4
    a6d4:	4620      	mov	r0, r4
}
    a6d6:	b003      	add	sp, #12
    a6d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
    a6dc:	f7ff b831 	b.w	9742 <atomic_set_bit>
    a6e0:	00023dae 	.word	0x00023dae
    a6e4:	000272d8 	.word	0x000272d8
    a6e8:	00024f86 	.word	0x00024f86
    a6ec:	00022d76 	.word	0x00022d76
    a6f0:	0002552b 	.word	0x0002552b

0000a6f4 <bt_smp_encrypt_change>:
{
    a6f4:	b570      	push	{r4, r5, r6, lr}
    a6f6:	4604      	mov	r4, r0
	if (hci_status) {
    a6f8:	2900      	cmp	r1, #0
    a6fa:	d15d      	bne.n	a7b8 <bt_smp_encrypt_change+0xc4>
	struct bt_conn *conn = chan->conn;
    a6fc:	6806      	ldr	r6, [r0, #0]
	if (!smp || !conn->encrypt) {
    a6fe:	7ab3      	ldrb	r3, [r6, #10]
    a700:	2b00      	cmp	r3, #0
    a702:	d059      	beq.n	a7b8 <bt_smp_encrypt_change+0xc4>
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
    a704:	f100 05a0 	add.w	r5, r0, #160	; 0xa0
    a708:	2101      	movs	r1, #1
    a70a:	4628      	mov	r0, r5
    a70c:	f7ff fe60 	bl	a3d0 <atomic_test_and_clear_bit>
    a710:	2800      	cmp	r0, #0
    a712:	d051      	beq.n	a7b8 <bt_smp_encrypt_change+0xc4>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    a714:	2103      	movs	r1, #3
    a716:	4628      	mov	r0, r5
    a718:	f7ff f806 	bl	9728 <atomic_test_bit>
    a71c:	b930      	cbnz	r0, a72c <bt_smp_encrypt_change+0x38>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
    a71e:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    a722:	210b      	movs	r1, #11
}
    a724:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
    a728:	f7ff b80b 	b.w	9742 <atomic_set_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    a72c:	2105      	movs	r1, #5
    a72e:	4628      	mov	r0, r5
    a730:	f7fe fffa 	bl	9728 <atomic_test_bit>
    a734:	b1b8      	cbz	r0, a766 <bt_smp_encrypt_change+0x72>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
    a736:	f894 3179 	ldrb.w	r3, [r4, #377]	; 0x179
    a73a:	071b      	lsls	r3, r3, #28
    a73c:	d507      	bpl.n	a74e <bt_smp_encrypt_change+0x5a>
    a73e:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    a742:	0718      	lsls	r0, r3, #28
    a744:	d503      	bpl.n	a74e <bt_smp_encrypt_change+0x5a>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
    a746:	210e      	movs	r1, #14
    a748:	4628      	mov	r0, r5
    a74a:	f7fe fffa 	bl	9742 <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
    a74e:	f894 3179 	ldrb.w	r3, [r4, #377]	; 0x179
    a752:	f023 0308 	bic.w	r3, r3, #8
    a756:	f884 3179 	strb.w	r3, [r4, #377]	; 0x179
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
    a75a:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    a75e:	f023 0308 	bic.w	r3, r3, #8
    a762:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
    a766:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    a76a:	07d9      	lsls	r1, r3, #31
    a76c:	d51c      	bpl.n	a7a8 <bt_smp_encrypt_change+0xb4>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
    a76e:	2106      	movs	r1, #6
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    a770:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    a774:	f7fe ffe5 	bl	9742 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
    a778:	2102      	movs	r1, #2
    a77a:	4628      	mov	r0, r5
    a77c:	f7fe ffe1 	bl	9742 <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    a780:	78f3      	ldrb	r3, [r6, #3]
    a782:	b913      	cbnz	r3, a78a <bt_smp_encrypt_change+0x96>
	    conn->role == BT_HCI_ROLE_MASTER && smp->remote_dist) {
    a784:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    a788:	b9b3      	cbnz	r3, a7b8 <bt_smp_encrypt_change+0xc4>
	bt_smp_distribute_keys(smp);
    a78a:	4620      	mov	r0, r4
    a78c:	f7ff fd7c 	bl	a288 <bt_smp_distribute_keys>
	if (!smp->local_dist && !smp->remote_dist) {
    a790:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
    a794:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    a798:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    a79c:	b963      	cbnz	r3, a7b8 <bt_smp_encrypt_change+0xc4>
	smp_reset(smp);
    a79e:	4620      	mov	r0, r4
}
    a7a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	smp_reset(smp);
    a7a4:	f7ff be2f 	b.w	a406 <smp_reset>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    a7a8:	079a      	lsls	r2, r3, #30
    a7aa:	d501      	bpl.n	a7b0 <bt_smp_encrypt_change+0xbc>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    a7ac:	2108      	movs	r1, #8
    a7ae:	e7df      	b.n	a770 <bt_smp_encrypt_change+0x7c>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    a7b0:	075b      	lsls	r3, r3, #29
    a7b2:	d5e1      	bpl.n	a778 <bt_smp_encrypt_change+0x84>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    a7b4:	210a      	movs	r1, #10
    a7b6:	e7db      	b.n	a770 <bt_smp_encrypt_change+0x7c>
    a7b8:	bd70      	pop	{r4, r5, r6, pc}
	...

0000a7bc <smp_master_ident>:
{
    a7bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    a7be:	460a      	mov	r2, r1
    a7c0:	b085      	sub	sp, #20
    a7c2:	4605      	mov	r5, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    a7c4:	210a      	movs	r1, #10
	struct bt_conn *conn = smp->chan.chan.conn;
    a7c6:	f850 6ba0 	ldr.w	r6, [r0], #160
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    a7ca:	f7fe ffad 	bl	9728 <atomic_test_bit>
    a7ce:	b340      	cbz	r0, a822 <smp_master_ident+0x66>
		keys = bt_keys_get_type(BT_KEYS_LTK, &conn->le.dst);
    a7d0:	f106 0748 	add.w	r7, r6, #72	; 0x48
    a7d4:	4639      	mov	r1, r7
    a7d6:	2004      	movs	r0, #4
		struct bt_smp_master_ident *req = (void *)buf->data;
    a7d8:	6894      	ldr	r4, [r2, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, &conn->le.dst);
    a7da:	f000 ff85 	bl	b6e8 <bt_keys_get_type>
		if (!keys) {
    a7de:	b978      	cbnz	r0, a800 <smp_master_ident+0x44>
			BT_ERR("Unable to get keys for %s",
    a7e0:	4638      	mov	r0, r7
    a7e2:	f7f8 fd95 	bl	3310 <bt_addr_le_str>
    a7e6:	4b1f      	ldr	r3, [pc, #124]	; (a864 <smp_master_ident+0xa8>)
    a7e8:	9302      	str	r3, [sp, #8]
    a7ea:	9001      	str	r0, [sp, #4]
    a7ec:	9300      	str	r3, [sp, #0]
    a7ee:	4a1e      	ldr	r2, [pc, #120]	; (a868 <smp_master_ident+0xac>)
    a7f0:	4b1e      	ldr	r3, [pc, #120]	; (a86c <smp_master_ident+0xb0>)
    a7f2:	491f      	ldr	r1, [pc, #124]	; (a870 <smp_master_ident+0xb4>)
    a7f4:	481f      	ldr	r0, [pc, #124]	; (a874 <smp_master_ident+0xb8>)
    a7f6:	f7f7 fd4d 	bl	2294 <printk>
			return BT_SMP_ERR_UNSPECIFIED;
    a7fa:	2008      	movs	r0, #8
}
    a7fc:	b005      	add	sp, #20
    a7fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		keys->ltk.ediv = req->ediv;
    a800:	7862      	ldrb	r2, [r4, #1]
    a802:	7823      	ldrb	r3, [r4, #0]
    a804:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    a808:	8303      	strh	r3, [r0, #24]
		keys->ltk.rand = req->rand;
    a80a:	f8d4 2002 	ldr.w	r2, [r4, #2]
    a80e:	f8d4 3006 	ldr.w	r3, [r4, #6]
    a812:	6143      	str	r3, [r0, #20]
    a814:	6102      	str	r2, [r0, #16]
		smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
    a816:	f895 317a 	ldrb.w	r3, [r5, #378]	; 0x17a
    a81a:	f023 0301 	bic.w	r3, r3, #1
    a81e:	f885 317a 	strb.w	r3, [r5, #378]	; 0x17a
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    a822:	f895 317a 	ldrb.w	r3, [r5, #378]	; 0x17a
    a826:	079a      	lsls	r2, r3, #30
    a828:	d518      	bpl.n	a85c <smp_master_ident+0xa0>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    a82a:	2108      	movs	r1, #8
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    a82c:	f105 009c 	add.w	r0, r5, #156	; 0x9c
    a830:	f7fe ff87 	bl	9742 <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    a834:	78f3      	ldrb	r3, [r6, #3]
    a836:	b92b      	cbnz	r3, a844 <smp_master_ident+0x88>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    a838:	f895 317a 	ldrb.w	r3, [r5, #378]	; 0x17a
    a83c:	b913      	cbnz	r3, a844 <smp_master_ident+0x88>
		bt_smp_distribute_keys(smp);
    a83e:	4628      	mov	r0, r5
    a840:	f7ff fd22 	bl	a288 <bt_smp_distribute_keys>
	if (!smp->local_dist && !smp->remote_dist) {
    a844:	f8d5 4178 	ldr.w	r4, [r5, #376]	; 0x178
    a848:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    a84c:	f024 04ff 	bic.w	r4, r4, #255	; 0xff
    a850:	b914      	cbnz	r4, a858 <smp_master_ident+0x9c>
	smp_reset(smp);
    a852:	4628      	mov	r0, r5
    a854:	f7ff fdd7 	bl	a406 <smp_reset>
	return 0;
    a858:	2000      	movs	r0, #0
    a85a:	e7cf      	b.n	a7fc <smp_master_ident+0x40>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    a85c:	075b      	lsls	r3, r3, #29
    a85e:	d5e9      	bpl.n	a834 <smp_master_ident+0x78>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    a860:	210a      	movs	r1, #10
    a862:	e7e3      	b.n	a82c <smp_master_ident+0x70>
    a864:	00023dae 	.word	0x00023dae
    a868:	00022d76 	.word	0x00022d76
    a86c:	00024ff9 	.word	0x00024ff9
    a870:	000272d8 	.word	0x000272d8
    a874:	00025413 	.word	0x00025413

0000a878 <bt_smp_connected>:
{
    a878:	b510      	push	{r4, lr}
	k_delayed_work_init(&smp->work, smp_timeout);
    a87a:	4905      	ldr	r1, [pc, #20]	; (a890 <bt_smp_connected+0x18>)
{
    a87c:	4604      	mov	r4, r0
	k_delayed_work_init(&smp->work, smp_timeout);
    a87e:	f500 70be 	add.w	r0, r0, #380	; 0x17c
    a882:	f017 fcbf 	bl	22204 <k_delayed_work_init>
	smp_reset(smp);
    a886:	4620      	mov	r0, r4
}
    a888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	smp_reset(smp);
    a88c:	f7ff bdbb 	b.w	a406 <smp_reset>
    a890:	0000a69d 	.word	0x0000a69d

0000a894 <ident_sent>:
{
    a894:	b508      	push	{r3, lr}
	if (conn->type == BT_CONN_TYPE_LE) {
    a896:	7883      	ldrb	r3, [r0, #2]
    a898:	b99b      	cbnz	r3, a8c2 <ident_sent+0x2e>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
    a89a:	2106      	movs	r1, #6
    a89c:	f7fc fb5f 	bl	6f5e <bt_l2cap_le_lookup_tx_cid>
		smp->local_dist &= ~dist_complete;
    a8a0:	f890 2179 	ldrb.w	r2, [r0, #377]	; 0x179
    a8a4:	f022 0201 	bic.w	r2, r2, #1
    a8a8:	f880 2179 	strb.w	r2, [r0, #377]	; 0x179
		if (!smp->local_dist && !smp->remote_dist) {
    a8ac:	f8d0 3178 	ldr.w	r3, [r0, #376]	; 0x178
    a8b0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    a8b4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    a8b8:	b91b      	cbnz	r3, a8c2 <ident_sent+0x2e>
}
    a8ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	smp_reset(smp);
    a8be:	f7ff bda2 	b.w	a406 <smp_reset>
    a8c2:	bd08      	pop	{r3, pc}

0000a8c4 <smp_send_pairing_confirm>:
{
    a8c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	switch (smp->method) {
    a8c6:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
{
    a8ca:	4604      	mov	r4, r0
	switch (smp->method) {
    a8cc:	2b03      	cmp	r3, #3
    a8ce:	d824      	bhi.n	a91a <smp_send_pairing_confirm+0x56>
    a8d0:	e8df f003 	tbb	[pc, r3]
    a8d4:	25020225 	.word	0x25020225
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    a8d8:	f890 3178 	ldrb.w	r3, [r0, #376]	; 0x178
    a8dc:	f8d0 5174 	ldr.w	r5, [r0, #372]	; 0x174
    a8e0:	40dd      	lsrs	r5, r3
    a8e2:	f005 0501 	and.w	r5, r5, #1
		r |= 0x80;
    a8e6:	f065 057f 	orn	r5, r5, #127	; 0x7f
    a8ea:	b2ed      	uxtb	r5, r5
	buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    a8ec:	2003      	movs	r0, #3
    a8ee:	f7ff f8f1 	bl	9ad4 <smp_create_pdu.isra.5>
	if (!buf) {
    a8f2:	4606      	mov	r6, r0
    a8f4:	b188      	cbz	r0, a91a <smp_send_pairing_confirm+0x56>
	req = net_buf_add(buf, sizeof(*req));
    a8f6:	2110      	movs	r1, #16
    a8f8:	3008      	adds	r0, #8
    a8fa:	f00e fd53 	bl	193a4 <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
    a8fe:	462b      	mov	r3, r5
    a900:	9000      	str	r0, [sp, #0]
    a902:	f104 02c3 	add.w	r2, r4, #195	; 0xc3
    a906:	f104 01f3 	add.w	r1, r4, #243	; 0xf3
    a90a:	4810      	ldr	r0, [pc, #64]	; (a94c <smp_send_pairing_confirm+0x88>)
    a90c:	f7ff f9d2 	bl	9cb4 <smp_f4>
    a910:	4605      	mov	r5, r0
    a912:	b130      	cbz	r0, a922 <smp_send_pairing_confirm+0x5e>
		net_buf_unref(buf);
    a914:	4630      	mov	r0, r6
    a916:	f00e fce7 	bl	192e8 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
    a91a:	2008      	movs	r0, #8
    a91c:	e014      	b.n	a948 <smp_send_pairing_confirm+0x84>
		r = 0;
    a91e:	2500      	movs	r5, #0
    a920:	e7e4      	b.n	a8ec <smp_send_pairing_confirm+0x28>
	smp_send(smp, buf, NULL);
    a922:	4602      	mov	r2, r0
    a924:	4631      	mov	r1, r6
    a926:	4620      	mov	r0, r4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a928:	34a0      	adds	r4, #160	; 0xa0
    a92a:	f7ff fa19 	bl	9d60 <smp_send>
    a92e:	f3bf 8f5b 	dmb	ish
    a932:	e854 3f00 	ldrex	r3, [r4]
    a936:	f023 0301 	bic.w	r3, r3, #1
    a93a:	e844 3200 	strex	r2, r3, [r4]
    a93e:	2a00      	cmp	r2, #0
    a940:	d1f7      	bne.n	a932 <smp_send_pairing_confirm+0x6e>
    a942:	f3bf 8f5b 	dmb	ish
	return 0;
    a946:	4628      	mov	r0, r5
}
    a948:	b002      	add	sp, #8
    a94a:	bd70      	pop	{r4, r5, r6, pc}
    a94c:	200008f9 	.word	0x200008f9

0000a950 <smp_c1>:
{
    a950:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a954:	b089      	sub	sp, #36	; 0x24
    a956:	461f      	mov	r7, r3
    a958:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    a95c:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
	p1[0] = ia->type;
    a960:	f898 3000 	ldrb.w	r3, [r8]
    a964:	f88d 3000 	strb.w	r3, [sp]
{
    a968:	4606      	mov	r6, r0
	p1[1] = ra->type;
    a96a:	f899 3000 	ldrb.w	r3, [r9]
    a96e:	f88d 3001 	strb.w	r3, [sp, #1]
{
    a972:	460c      	mov	r4, r1
	memcpy(p1 + 2, preq, 7);
    a974:	f10d 0002 	add.w	r0, sp, #2
{
    a978:	4611      	mov	r1, r2
	memcpy(p1 + 2, preq, 7);
    a97a:	2207      	movs	r2, #7
{
    a97c:	9d12      	ldr	r5, [sp, #72]	; 0x48
	memcpy(p1 + 2, preq, 7);
    a97e:	f7f5 ff08 	bl	792 <memcpy>
	memcpy(p1 + 9, pres, 7);
    a982:	2207      	movs	r2, #7
    a984:	4639      	mov	r1, r7
    a986:	f10d 0009 	add.w	r0, sp, #9
    a98a:	f7f5 ff02 	bl	792 <memcpy>
    a98e:	2300      	movs	r3, #0
		*r++ = *p++ ^ *q++;
    a990:	f814 2b01 	ldrb.w	r2, [r4], #1
    a994:	f81d 1003 	ldrb.w	r1, [sp, r3]
    a998:	404a      	eors	r2, r1
    a99a:	54ea      	strb	r2, [r5, r3]
    a99c:	3301      	adds	r3, #1
	while (len--) {
    a99e:	2b10      	cmp	r3, #16
    a9a0:	d1f6      	bne.n	a990 <smp_c1+0x40>
	err = bt_encrypt_le(k, enc_data, enc_data);
    a9a2:	462a      	mov	r2, r5
    a9a4:	4629      	mov	r1, r5
    a9a6:	4630      	mov	r0, r6
    a9a8:	f001 ff6c 	bl	c884 <bt_encrypt_le>
	if (err) {
    a9ac:	4604      	mov	r4, r0
    a9ae:	bb08      	cbnz	r0, a9f4 <smp_c1+0xa4>
	memcpy(p2, ra->a.val, 6);
    a9b0:	af04      	add	r7, sp, #16
    a9b2:	2206      	movs	r2, #6
    a9b4:	f109 0101 	add.w	r1, r9, #1
    a9b8:	4638      	mov	r0, r7
    a9ba:	f7f5 feea 	bl	792 <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
    a9be:	2206      	movs	r2, #6
    a9c0:	f108 0101 	add.w	r1, r8, #1
    a9c4:	f10d 0016 	add.w	r0, sp, #22
    a9c8:	f7f5 fee3 	bl	792 <memcpy>
	memset(p2 + 12, 0, 4);
    a9cc:	2204      	movs	r2, #4
    a9ce:	4621      	mov	r1, r4
    a9d0:	a807      	add	r0, sp, #28
    a9d2:	f7f5 ff0a 	bl	7ea <memset>
    a9d6:	1e6b      	subs	r3, r5, #1
		*r++ = *p++ ^ *q++;
    a9d8:	785a      	ldrb	r2, [r3, #1]
    a9da:	5d39      	ldrb	r1, [r7, r4]
    a9dc:	3401      	adds	r4, #1
    a9de:	404a      	eors	r2, r1
	while (len--) {
    a9e0:	2c10      	cmp	r4, #16
		*r++ = *p++ ^ *q++;
    a9e2:	f803 2f01 	strb.w	r2, [r3, #1]!
	while (len--) {
    a9e6:	d1f7      	bne.n	a9d8 <smp_c1+0x88>
	return bt_encrypt_le(k, enc_data, enc_data);
    a9e8:	462a      	mov	r2, r5
    a9ea:	4629      	mov	r1, r5
    a9ec:	4630      	mov	r0, r6
    a9ee:	f001 ff49 	bl	c884 <bt_encrypt_le>
    a9f2:	4604      	mov	r4, r0
}
    a9f4:	4620      	mov	r0, r4
    a9f6:	b009      	add	sp, #36	; 0x24
    a9f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0000a9fc <legacy_send_pairing_confirm>:
{
    a9fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
    a9fe:	6805      	ldr	r5, [r0, #0]
{
    aa00:	4604      	mov	r4, r0
	buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    aa02:	2003      	movs	r0, #3
    aa04:	f7ff f866 	bl	9ad4 <smp_create_pdu.isra.5>
	if (!buf) {
    aa08:	4606      	mov	r6, r0
    aa0a:	b1c0      	cbz	r0, aa3e <legacy_send_pairing_confirm+0x42>
	req = net_buf_add(buf, sizeof(*req));
    aa0c:	2110      	movs	r1, #16
    aa0e:	3008      	adds	r0, #8
    aa10:	f00e fcc8 	bl	193a4 <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
    aa14:	f105 0356 	add.w	r3, r5, #86	; 0x56
    aa18:	354f      	adds	r5, #79	; 0x4f
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
    aa1a:	9002      	str	r0, [sp, #8]
    aa1c:	9301      	str	r3, [sp, #4]
    aa1e:	9500      	str	r5, [sp, #0]
    aa20:	f104 03ac 	add.w	r3, r4, #172	; 0xac
    aa24:	f104 02a5 	add.w	r2, r4, #165	; 0xa5
    aa28:	f104 01c3 	add.w	r1, r4, #195	; 0xc3
    aa2c:	f104 00e3 	add.w	r0, r4, #227	; 0xe3
    aa30:	f7ff ff8e 	bl	a950 <smp_c1>
    aa34:	4605      	mov	r5, r0
    aa36:	b120      	cbz	r0, aa42 <legacy_send_pairing_confirm+0x46>
		net_buf_unref(buf);
    aa38:	4630      	mov	r0, r6
    aa3a:	f00e fc55 	bl	192e8 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
    aa3e:	2008      	movs	r0, #8
    aa40:	e012      	b.n	aa68 <legacy_send_pairing_confirm+0x6c>
	smp_send(smp, buf, NULL);
    aa42:	4602      	mov	r2, r0
    aa44:	4631      	mov	r1, r6
    aa46:	4620      	mov	r0, r4
    aa48:	34a0      	adds	r4, #160	; 0xa0
    aa4a:	f7ff f989 	bl	9d60 <smp_send>
    aa4e:	f3bf 8f5b 	dmb	ish
    aa52:	e854 3f00 	ldrex	r3, [r4]
    aa56:	f023 0301 	bic.w	r3, r3, #1
    aa5a:	e844 3200 	strex	r2, r3, [r4]
    aa5e:	2a00      	cmp	r2, #0
    aa60:	d1f7      	bne.n	aa52 <legacy_send_pairing_confirm+0x56>
    aa62:	f3bf 8f5b 	dmb	ish
	return 0;
    aa66:	4628      	mov	r0, r5
}
    aa68:	b004      	add	sp, #16
    aa6a:	bd70      	pop	{r4, r5, r6, pc}

0000aa6c <legacy_pairing_confirm>:
{
    aa6c:	b510      	push	{r4, lr}
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    aa6e:	6803      	ldr	r3, [r0, #0]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    aa70:	78db      	ldrb	r3, [r3, #3]
{
    aa72:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    aa74:	b94b      	cbnz	r3, aa8a <legacy_pairing_confirm+0x1e>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    aa76:	2103      	movs	r1, #3
			atomic_set_bit(&smp->allowed_cmds,
    aa78:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    aa7c:	f7fe fe61 	bl	9742 <atomic_set_bit>
			return legacy_send_pairing_confirm(smp);
    aa80:	4620      	mov	r0, r4
}
    aa82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			return legacy_send_pairing_confirm(smp);
    aa86:	f7ff bfb9 	b.w	a9fc <legacy_send_pairing_confirm>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    aa8a:	f100 02a0 	add.w	r2, r0, #160	; 0xa0
    aa8e:	2109      	movs	r1, #9
    aa90:	4610      	mov	r0, r2
    aa92:	f7fe fe49 	bl	9728 <atomic_test_bit>
    aa96:	b908      	cbnz	r0, aa9c <legacy_pairing_confirm+0x30>
			atomic_set_bit(&smp->allowed_cmds,
    aa98:	2104      	movs	r1, #4
    aa9a:	e7ed      	b.n	aa78 <legacy_pairing_confirm+0xc>
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    aa9c:	4610      	mov	r0, r2
    aa9e:	2100      	movs	r1, #0
    aaa0:	f7fe fe4f 	bl	9742 <atomic_set_bit>
}
    aaa4:	2000      	movs	r0, #0
    aaa6:	bd10      	pop	{r4, pc}

0000aaa8 <smp_pairing_confirm>:
{
    aaa8:	b510      	push	{r4, lr}
    aaaa:	4604      	mov	r4, r0
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
    aaac:	2210      	movs	r2, #16
    aaae:	6889      	ldr	r1, [r1, #8]
    aab0:	30b3      	adds	r0, #179	; 0xb3
    aab2:	f7f5 fe6e 	bl	792 <memcpy>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    aab6:	6823      	ldr	r3, [r4, #0]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    aab8:	78db      	ldrb	r3, [r3, #3]
    aaba:	b94b      	cbnz	r3, aad0 <smp_pairing_confirm+0x28>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    aabc:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    aac0:	2104      	movs	r1, #4
    aac2:	f7fe fe3e 	bl	9742 <atomic_set_bit>
		return smp_send_pairing_random(smp);
    aac6:	4620      	mov	r0, r4
}
    aac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return smp_send_pairing_random(smp);
    aacc:	f7ff bbc2 	b.w	a254 <smp_send_pairing_random>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    aad0:	f104 02a0 	add.w	r2, r4, #160	; 0xa0
    aad4:	2105      	movs	r1, #5
    aad6:	4610      	mov	r0, r2
    aad8:	f7fe fe26 	bl	9728 <atomic_test_bit>
    aadc:	b920      	cbnz	r0, aae8 <smp_pairing_confirm+0x40>
		return legacy_pairing_confirm(smp);
    aade:	4620      	mov	r0, r4
}
    aae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return legacy_pairing_confirm(smp);
    aae4:	f7ff bfc2 	b.w	aa6c <legacy_pairing_confirm>
	switch (smp->method) {
    aae8:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    aaec:	2b01      	cmp	r3, #1
    aaee:	d00b      	beq.n	ab08 <smp_pairing_confirm+0x60>
    aaf0:	2b02      	cmp	r3, #2
    aaf2:	d115      	bne.n	ab20 <smp_pairing_confirm+0x78>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    aaf4:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    aaf8:	2104      	movs	r1, #4
    aafa:	f7fe fe22 	bl	9742 <atomic_set_bit>
		return smp_send_pairing_confirm(smp);
    aafe:	4620      	mov	r0, r4
}
    ab00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return smp_send_pairing_confirm(smp);
    ab04:	f7ff bede 	b.w	a8c4 <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    ab08:	2109      	movs	r1, #9
    ab0a:	4610      	mov	r0, r2
    ab0c:	f7fe fe0c 	bl	9728 <atomic_test_bit>
    ab10:	2800      	cmp	r0, #0
    ab12:	d0ef      	beq.n	aaf4 <smp_pairing_confirm+0x4c>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    ab14:	4610      	mov	r0, r2
    ab16:	2100      	movs	r1, #0
    ab18:	f7fe fe13 	bl	9742 <atomic_set_bit>
			return 0;
    ab1c:	2000      	movs	r0, #0
    ab1e:	bd10      	pop	{r4, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    ab20:	2008      	movs	r0, #8
}
    ab22:	bd10      	pop	{r4, pc}

0000ab24 <smp_public_key_slave.part.11>:
static u8_t smp_public_key_slave(struct bt_smp *smp)
    ab24:	b538      	push	{r3, r4, r5, lr}
	switch (smp->method) {
    ab26:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
static u8_t smp_public_key_slave(struct bt_smp *smp)
    ab2a:	4605      	mov	r5, r0
	switch (smp->method) {
    ab2c:	2b03      	cmp	r3, #3
    ab2e:	d831      	bhi.n	ab94 <smp_public_key_slave.part.11+0x70>
    ab30:	e8df f003 	tbb	[pc, r3]
    ab34:	020b2102 	.word	0x020b2102
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    ab38:	309c      	adds	r0, #156	; 0x9c
    ab3a:	2104      	movs	r1, #4
    ab3c:	f7fe fe01 	bl	9742 <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
    ab40:	4628      	mov	r0, r5
    ab42:	f7ff febf 	bl	a8c4 <smp_send_pairing_confirm>
		if (err) {
    ab46:	b140      	cbz	r0, ab5a <smp_public_key_slave.part.11+0x36>
    ab48:	bd38      	pop	{r3, r4, r5, pc}
		err = display_passkey(smp);
    ab4a:	f7fe ffd1 	bl	9af0 <display_passkey>
		if (err) {
    ab4e:	bb10      	cbnz	r0, ab96 <smp_public_key_slave.part.11+0x72>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    ab50:	2103      	movs	r1, #3
    ab52:	f105 009c 	add.w	r0, r5, #156	; 0x9c
    ab56:	f7fe fdf4 	bl	9742 <atomic_set_bit>
	if (bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready)) {
    ab5a:	490f      	ldr	r1, [pc, #60]	; (ab98 <smp_public_key_slave.part.11+0x74>)
    ab5c:	f105 00f3 	add.w	r0, r5, #243	; 0xf3
    ab60:	f7fa ffde 	bl	5b20 <bt_dh_key_gen>
    ab64:	4604      	mov	r4, r0
    ab66:	b9a8      	cbnz	r0, ab94 <smp_public_key_slave.part.11+0x70>
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
    ab68:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
    ab6c:	2107      	movs	r1, #7
    ab6e:	f7fe fde8 	bl	9742 <atomic_set_bit>
	return 0;
    ab72:	4620      	mov	r0, r4
    ab74:	bd38      	pop	{r3, r4, r5, pc}
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    ab76:	2103      	movs	r1, #3
    ab78:	309c      	adds	r0, #156	; 0x9c
    ab7a:	f7fe fde2 	bl	9742 <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    ab7e:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
    ab82:	2109      	movs	r1, #9
    ab84:	f7fe fddd 	bl	9742 <atomic_set_bit>
		bt_auth->passkey_entry(smp->chan.chan.conn);
    ab88:	4b04      	ldr	r3, [pc, #16]	; (ab9c <smp_public_key_slave.part.11+0x78>)
    ab8a:	6828      	ldr	r0, [r5, #0]
    ab8c:	681b      	ldr	r3, [r3, #0]
    ab8e:	685b      	ldr	r3, [r3, #4]
    ab90:	4798      	blx	r3
    ab92:	e7e2      	b.n	ab5a <smp_public_key_slave.part.11+0x36>
		return BT_SMP_ERR_UNSPECIFIED;
    ab94:	2008      	movs	r0, #8
}
    ab96:	bd38      	pop	{r3, r4, r5, pc}
    ab98:	0000a499 	.word	0x0000a499
    ab9c:	20003128 	.word	0x20003128

0000aba0 <smp_public_key>:
{
    aba0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_smp_public_key *req = (void *)buf->data;
    aba2:	688e      	ldr	r6, [r1, #8]
	memcpy(smp->pkey, req->x, 32);
    aba4:	f100 04f3 	add.w	r4, r0, #243	; 0xf3
{
    aba8:	4605      	mov	r5, r0
	memcpy(smp->pkey, req->x, 32);
    abaa:	2220      	movs	r2, #32
    abac:	4631      	mov	r1, r6
    abae:	4620      	mov	r0, r4
    abb0:	f7f5 fdef 	bl	792 <memcpy>
	memcpy(&smp->pkey[32], req->y, 32);
    abb4:	2220      	movs	r2, #32
    abb6:	18b1      	adds	r1, r6, r2
    abb8:	f205 1013 	addw	r0, r5, #275	; 0x113
    abbc:	f7f5 fde9 	bl	792 <memcpy>
	if (memcmp(smp->pkey, sc_debug_public_key, 64) == 0) {
    abc0:	2240      	movs	r2, #64	; 0x40
    abc2:	492f      	ldr	r1, [pc, #188]	; (ac80 <smp_public_key+0xe0>)
    abc4:	4620      	mov	r0, r4
    abc6:	f7f5 fdb7 	bl	738 <memcmp>
    abca:	b968      	cbnz	r0, abe8 <smp_public_key+0x48>
		BT_INFO("Remote is using Debug Public key");
    abcc:	4b2d      	ldr	r3, [pc, #180]	; (ac84 <smp_public_key+0xe4>)
    abce:	9301      	str	r3, [sp, #4]
    abd0:	9300      	str	r3, [sp, #0]
    abd2:	492d      	ldr	r1, [pc, #180]	; (ac88 <smp_public_key+0xe8>)
    abd4:	4b2d      	ldr	r3, [pc, #180]	; (ac8c <smp_public_key+0xec>)
    abd6:	4a2e      	ldr	r2, [pc, #184]	; (ac90 <smp_public_key+0xf0>)
    abd8:	482e      	ldr	r0, [pc, #184]	; (ac94 <smp_public_key+0xf4>)
    abda:	f7f7 fb5b 	bl	2294 <printk>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
    abde:	210b      	movs	r1, #11
    abe0:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
    abe4:	f7fe fdad 	bl	9742 <atomic_set_bit>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    abe8:	682b      	ldr	r3, [r5, #0]
    abea:	78db      	ldrb	r3, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    abec:	2b00      	cmp	r3, #0
    abee:	d134      	bne.n	ac5a <smp_public_key+0xba>
		switch (smp->method) {
    abf0:	f895 30a4 	ldrb.w	r3, [r5, #164]	; 0xa4
    abf4:	2b03      	cmp	r3, #3
    abf6:	d840      	bhi.n	ac7a <smp_public_key+0xda>
    abf8:	e8df f003 	tbb	[pc, r3]
    abfc:	02142402 	.word	0x02142402
			atomic_set_bit(&smp->allowed_cmds,
    ac00:	2103      	movs	r1, #3
    ac02:	f105 009c 	add.w	r0, r5, #156	; 0x9c
    ac06:	f7fe fd9c 	bl	9742 <atomic_set_bit>
	if (bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready)) {
    ac0a:	4620      	mov	r0, r4
    ac0c:	4922      	ldr	r1, [pc, #136]	; (ac98 <smp_public_key+0xf8>)
    ac0e:	f7fa ff87 	bl	5b20 <bt_dh_key_gen>
    ac12:	4604      	mov	r4, r0
    ac14:	bb88      	cbnz	r0, ac7a <smp_public_key+0xda>
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
    ac16:	2107      	movs	r1, #7
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    ac18:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
    ac1c:	f7fe fd91 	bl	9742 <atomic_set_bit>
		return 0;
    ac20:	4620      	mov	r0, r4
    ac22:	e00d      	b.n	ac40 <smp_public_key+0xa0>
			err = display_passkey(smp);
    ac24:	4628      	mov	r0, r5
    ac26:	f7fe ff63 	bl	9af0 <display_passkey>
			if (err) {
    ac2a:	b948      	cbnz	r0, ac40 <smp_public_key+0xa0>
			atomic_set_bit(&smp->allowed_cmds,
    ac2c:	f105 009c 	add.w	r0, r5, #156	; 0x9c
    ac30:	2103      	movs	r1, #3
    ac32:	f7fe fd86 	bl	9742 <atomic_set_bit>
			err = smp_send_pairing_confirm(smp);
    ac36:	4628      	mov	r0, r5
    ac38:	f7ff fe44 	bl	a8c4 <smp_send_pairing_confirm>
			if (err) {
    ac3c:	2800      	cmp	r0, #0
    ac3e:	d0e4      	beq.n	ac0a <smp_public_key+0x6a>
}
    ac40:	b002      	add	sp, #8
    ac42:	bd70      	pop	{r4, r5, r6, pc}
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    ac44:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
    ac48:	2109      	movs	r1, #9
    ac4a:	f7fe fd7a 	bl	9742 <atomic_set_bit>
			bt_auth->passkey_entry(smp->chan.chan.conn);
    ac4e:	4b13      	ldr	r3, [pc, #76]	; (ac9c <smp_public_key+0xfc>)
    ac50:	6828      	ldr	r0, [r5, #0]
    ac52:	681b      	ldr	r3, [r3, #0]
    ac54:	685b      	ldr	r3, [r3, #4]
    ac56:	4798      	blx	r3
			break;
    ac58:	e7d7      	b.n	ac0a <smp_public_key+0x6a>
	if (!sc_local_pkey_valid) {
    ac5a:	4b11      	ldr	r3, [pc, #68]	; (aca0 <smp_public_key+0x100>)
    ac5c:	781c      	ldrb	r4, [r3, #0]
    ac5e:	b90c      	cbnz	r4, ac64 <smp_public_key+0xc4>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    ac60:	2106      	movs	r1, #6
    ac62:	e7d9      	b.n	ac18 <smp_public_key+0x78>
	err = sc_send_public_key(smp);
    ac64:	4628      	mov	r0, r5
    ac66:	f7ff f9eb 	bl	a040 <sc_send_public_key>
	if (err) {
    ac6a:	2800      	cmp	r0, #0
    ac6c:	d1e8      	bne.n	ac40 <smp_public_key+0xa0>
    ac6e:	4628      	mov	r0, r5
}
    ac70:	b002      	add	sp, #8
    ac72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ac76:	f7ff bf55 	b.w	ab24 <smp_public_key_slave.part.11>
		return BT_SMP_ERR_UNSPECIFIED;
    ac7a:	2008      	movs	r0, #8
    ac7c:	e7e0      	b.n	ac40 <smp_public_key+0xa0>
    ac7e:	bf00      	nop
    ac80:	0002537d 	.word	0x0002537d
    ac84:	00023dae 	.word	0x00023dae
    ac88:	000272d8 	.word	0x000272d8
    ac8c:	00025062 	.word	0x00025062
    ac90:	00022c76 	.word	0x00022c76
    ac94:	00025484 	.word	0x00025484
    ac98:	0000a499 	.word	0x0000a499
    ac9c:	20003128 	.word	0x20003128
    aca0:	200008f8 	.word	0x200008f8

0000aca4 <bt_smp_pkey_ready>:
{
    aca4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!pkey) {
    aca6:	4604      	mov	r4, r0
    aca8:	4d1e      	ldr	r5, [pc, #120]	; (ad24 <bt_smp_pkey_ready+0x80>)
    acaa:	b958      	cbnz	r0, acc4 <bt_smp_pkey_ready+0x20>
		BT_WARN("Public key not available");
    acac:	4b1e      	ldr	r3, [pc, #120]	; (ad28 <bt_smp_pkey_ready+0x84>)
    acae:	9301      	str	r3, [sp, #4]
    acb0:	9300      	str	r3, [sp, #0]
    acb2:	4a1e      	ldr	r2, [pc, #120]	; (ad2c <bt_smp_pkey_ready+0x88>)
    acb4:	4b1e      	ldr	r3, [pc, #120]	; (ad30 <bt_smp_pkey_ready+0x8c>)
    acb6:	491f      	ldr	r1, [pc, #124]	; (ad34 <bt_smp_pkey_ready+0x90>)
    acb8:	481f      	ldr	r0, [pc, #124]	; (ad38 <bt_smp_pkey_ready+0x94>)
    acba:	f7f7 faeb 	bl	2294 <printk>
		sc_local_pkey_valid = false;
    acbe:	702c      	strb	r4, [r5, #0]
}
    acc0:	b003      	add	sp, #12
    acc2:	bd30      	pop	{r4, r5, pc}
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
    acc4:	4c1d      	ldr	r4, [pc, #116]	; (ad3c <bt_smp_pkey_ready+0x98>)
	memcpy(sc_public_key, pkey, 64);
    acc6:	4601      	mov	r1, r0
    acc8:	2240      	movs	r2, #64	; 0x40
    acca:	481d      	ldr	r0, [pc, #116]	; (ad40 <bt_smp_pkey_ready+0x9c>)
    accc:	f7f5 fd61 	bl	792 <memcpy>
	sc_local_pkey_valid = true;
    acd0:	2301      	movs	r3, #1
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
    acd2:	2106      	movs	r1, #6
    acd4:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
	sc_local_pkey_valid = true;
    acd8:	702b      	strb	r3, [r5, #0]
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
    acda:	f7fe fd25 	bl	9728 <atomic_test_bit>
    acde:	2800      	cmp	r0, #0
    ace0:	d0ee      	beq.n	acc0 <bt_smp_pkey_ready+0x1c>
		    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    ace2:	6823      	ldr	r3, [r4, #0]
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    ace4:	78db      	ldrb	r3, [r3, #3]
			err = sc_send_public_key(smp);
    ace6:	4620      	mov	r0, r4
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    ace8:	b96b      	cbnz	r3, ad06 <bt_smp_pkey_ready+0x62>
			err = sc_send_public_key(smp);
    acea:	f7ff f9a9 	bl	a040 <sc_send_public_key>
			if (err) {
    acee:	4601      	mov	r1, r0
    acf0:	b110      	cbz	r0, acf8 <bt_smp_pkey_ready+0x54>
				smp_error(smp, err);
    acf2:	4620      	mov	r0, r4
    acf4:	f7ff fbb6 	bl	a464 <smp_error>
			atomic_set_bit(&smp->allowed_cmds,
    acf8:	4812      	ldr	r0, [pc, #72]	; (ad44 <bt_smp_pkey_ready+0xa0>)
    acfa:	210c      	movs	r1, #12
}
    acfc:	b003      	add	sp, #12
    acfe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			atomic_set_bit(&smp->allowed_cmds,
    ad02:	f7fe bd1e 	b.w	9742 <atomic_set_bit>
	err = sc_send_public_key(smp);
    ad06:	f7ff f99b 	bl	a040 <sc_send_public_key>
	if (err) {
    ad0a:	b920      	cbnz	r0, ad16 <bt_smp_pkey_ready+0x72>
    ad0c:	4620      	mov	r0, r4
    ad0e:	f7ff ff09 	bl	ab24 <smp_public_key_slave.part.11>
		if (err) {
    ad12:	2800      	cmp	r0, #0
    ad14:	d0d4      	beq.n	acc0 <bt_smp_pkey_ready+0x1c>
			smp_error(smp, err);
    ad16:	4601      	mov	r1, r0
    ad18:	4808      	ldr	r0, [pc, #32]	; (ad3c <bt_smp_pkey_ready+0x98>)
}
    ad1a:	b003      	add	sp, #12
    ad1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			smp_error(smp, err);
    ad20:	f7ff bba0 	b.w	a464 <smp_error>
    ad24:	200008f8 	.word	0x200008f8
    ad28:	00023dae 	.word	0x00023dae
    ad2c:	00024006 	.word	0x00024006
    ad30:	0002507d 	.word	0x0002507d
    ad34:	000272d8 	.word	0x000272d8
    ad38:	00025178 	.word	0x00025178
    ad3c:	20000754 	.word	0x20000754
    ad40:	200008f9 	.word	0x200008f9
    ad44:	200007f0 	.word	0x200007f0

0000ad48 <smp_ident_addr_info>:
{
    ad48:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
    ad4c:	688e      	ldr	r6, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
    ad4e:	6804      	ldr	r4, [r0, #0]
	return BT_ADDR_IS_RPA(&addr->a);
}

static inline bool bt_addr_le_is_identity(const bt_addr_le_t *addr)
{
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    ad50:	7833      	ldrb	r3, [r6, #0]
{
    ad52:	4605      	mov	r5, r0
    ad54:	b1db      	cbz	r3, ad8e <smp_ident_addr_info+0x46>
	if (!bt_addr_le_is_identity(&req->addr)) {
    ad56:	79b3      	ldrb	r3, [r6, #6]
    ad58:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    ad5c:	2bc0      	cmp	r3, #192	; 0xc0
    ad5e:	d016      	beq.n	ad8e <smp_ident_addr_info+0x46>
		BT_ERR("Invalid identity %s for %s",
    ad60:	4630      	mov	r0, r6
    ad62:	f7f8 fad5 	bl	3310 <bt_addr_le_str>
    ad66:	4605      	mov	r5, r0
    ad68:	f104 0048 	add.w	r0, r4, #72	; 0x48
    ad6c:	f7f8 fad0 	bl	3310 <bt_addr_le_str>
    ad70:	4b3e      	ldr	r3, [pc, #248]	; (ae6c <smp_ident_addr_info+0x124>)
    ad72:	9303      	str	r3, [sp, #12]
    ad74:	9002      	str	r0, [sp, #8]
    ad76:	e88d 0028 	stmia.w	sp, {r3, r5}
    ad7a:	4a3d      	ldr	r2, [pc, #244]	; (ae70 <smp_ident_addr_info+0x128>)
    ad7c:	4b3d      	ldr	r3, [pc, #244]	; (ae74 <smp_ident_addr_info+0x12c>)
    ad7e:	493e      	ldr	r1, [pc, #248]	; (ae78 <smp_ident_addr_info+0x130>)
    ad80:	483e      	ldr	r0, [pc, #248]	; (ae7c <smp_ident_addr_info+0x134>)
    ad82:	f7f7 fa87 	bl	2294 <printk>
		return BT_SMP_ERR_INVALID_PARAMS;
    ad86:	200a      	movs	r0, #10
}
    ad88:	b004      	add	sp, #16
    ad8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    ad8e:	210a      	movs	r1, #10
    ad90:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
    ad94:	f7fe fcc8 	bl	9728 <atomic_test_bit>
    ad98:	2800      	cmp	r0, #0
    ad9a:	d042      	beq.n	ae22 <smp_ident_addr_info+0xda>
		keys = bt_keys_get_type(BT_KEYS_IRK, &conn->le.dst);
    ad9c:	f104 0848 	add.w	r8, r4, #72	; 0x48
    ada0:	4641      	mov	r1, r8
    ada2:	2002      	movs	r0, #2
    ada4:	f000 fca0 	bl	b6e8 <bt_keys_get_type>
		if (!keys) {
    ada8:	4607      	mov	r7, r0
    adaa:	b970      	cbnz	r0, adca <smp_ident_addr_info+0x82>
			BT_ERR("Unable to get keys for %s",
    adac:	4640      	mov	r0, r8
    adae:	f7f8 faaf 	bl	3310 <bt_addr_le_str>
    adb2:	4b2e      	ldr	r3, [pc, #184]	; (ae6c <smp_ident_addr_info+0x124>)
    adb4:	9302      	str	r3, [sp, #8]
    adb6:	9001      	str	r0, [sp, #4]
    adb8:	9300      	str	r3, [sp, #0]
    adba:	4a2d      	ldr	r2, [pc, #180]	; (ae70 <smp_ident_addr_info+0x128>)
    adbc:	4b2d      	ldr	r3, [pc, #180]	; (ae74 <smp_ident_addr_info+0x12c>)
    adbe:	492e      	ldr	r1, [pc, #184]	; (ae78 <smp_ident_addr_info+0x130>)
    adc0:	482f      	ldr	r0, [pc, #188]	; (ae80 <smp_ident_addr_info+0x138>)
    adc2:	f7f7 fa67 	bl	2294 <printk>
			return BT_SMP_ERR_UNSPECIFIED;
    adc6:	2008      	movs	r0, #8
    adc8:	e7de      	b.n	ad88 <smp_ident_addr_info+0x40>
		if (conn->role == BT_HCI_ROLE_MASTER) {
    adca:	78e3      	ldrb	r3, [r4, #3]
    adcc:	2b00      	cmp	r3, #0
    adce:	d149      	bne.n	ae64 <smp_ident_addr_info+0x11c>
			dst = &conn->le.resp_addr;
    add0:	f104 0156 	add.w	r1, r4, #86	; 0x56
	if (addr->type != BT_ADDR_LE_RANDOM) {
    add4:	780b      	ldrb	r3, [r1, #0]
    add6:	2b01      	cmp	r3, #1
    add8:	d120      	bne.n	ae1c <smp_ident_addr_info+0xd4>
		if (bt_addr_le_is_rpa(dst)) {
    adda:	798b      	ldrb	r3, [r1, #6]
    addc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    ade0:	2b40      	cmp	r3, #64	; 0x40
    ade2:	d11b      	bne.n	ae1c <smp_ident_addr_info+0xd4>
	memcpy(dst, src, sizeof(*dst));
    ade4:	2206      	movs	r2, #6
    ade6:	3101      	adds	r1, #1
    ade8:	f107 0040 	add.w	r0, r7, #64	; 0x40
    adec:	f7f5 fcd1 	bl	792 <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    adf0:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    adf4:	b193      	cbz	r3, ae1c <smp_ident_addr_info+0xd4>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
    adf6:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
    adfa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    adfe:	2bc0      	cmp	r3, #192	; 0xc0
    ae00:	d00c      	beq.n	ae1c <smp_ident_addr_info+0xd4>
	memcpy(dst, src, sizeof(*dst));
    ae02:	2207      	movs	r2, #7
    ae04:	4631      	mov	r1, r6
    ae06:	4638      	mov	r0, r7
    ae08:	f7f5 fcc3 	bl	792 <memcpy>
    ae0c:	2207      	movs	r2, #7
    ae0e:	4631      	mov	r1, r6
    ae10:	4640      	mov	r0, r8
    ae12:	f7f5 fcbe 	bl	792 <memcpy>
				bt_conn_identity_resolved(conn);
    ae16:	4620      	mov	r0, r4
    ae18:	f7fa ff30 	bl	5c7c <bt_conn_identity_resolved>
		bt_id_add(keys);
    ae1c:	4638      	mov	r0, r7
    ae1e:	f7f8 fe5f 	bl	3ae0 <bt_id_add>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
    ae22:	f895 317a 	ldrb.w	r3, [r5, #378]	; 0x17a
    ae26:	f023 0202 	bic.w	r2, r3, #2
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    ae2a:	075b      	lsls	r3, r3, #29
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
    ae2c:	f885 217a 	strb.w	r2, [r5, #378]	; 0x17a
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    ae30:	d504      	bpl.n	ae3c <smp_ident_addr_info+0xf4>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    ae32:	210a      	movs	r1, #10
    ae34:	f105 009c 	add.w	r0, r5, #156	; 0x9c
    ae38:	f7fe fc83 	bl	9742 <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    ae3c:	78e3      	ldrb	r3, [r4, #3]
    ae3e:	b92b      	cbnz	r3, ae4c <smp_ident_addr_info+0x104>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    ae40:	f895 317a 	ldrb.w	r3, [r5, #378]	; 0x17a
    ae44:	b913      	cbnz	r3, ae4c <smp_ident_addr_info+0x104>
		bt_smp_distribute_keys(smp);
    ae46:	4628      	mov	r0, r5
    ae48:	f7ff fa1e 	bl	a288 <bt_smp_distribute_keys>
	if (!smp->local_dist && !smp->remote_dist) {
    ae4c:	f8d5 4178 	ldr.w	r4, [r5, #376]	; 0x178
    ae50:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    ae54:	f024 04ff 	bic.w	r4, r4, #255	; 0xff
    ae58:	b914      	cbnz	r4, ae60 <smp_ident_addr_info+0x118>
	smp_reset(smp);
    ae5a:	4628      	mov	r0, r5
    ae5c:	f7ff fad3 	bl	a406 <smp_reset>
	return 0;
    ae60:	2000      	movs	r0, #0
    ae62:	e791      	b.n	ad88 <smp_ident_addr_info+0x40>
			dst = &conn->le.init_addr;
    ae64:	f104 014f 	add.w	r1, r4, #79	; 0x4f
    ae68:	e7b4      	b.n	add4 <smp_ident_addr_info+0x8c>
    ae6a:	bf00      	nop
    ae6c:	00023dae 	.word	0x00023dae
    ae70:	00022d76 	.word	0x00022d76
    ae74:	00025039 	.word	0x00025039
    ae78:	000272d8 	.word	0x000272d8
    ae7c:	000253e8 	.word	0x000253e8
    ae80:	00025413 	.word	0x00025413

0000ae84 <smp_pairing_rsp>:
{
    ae84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_smp_pairing *rsp = (void *)buf->data;
    ae86:	688d      	ldr	r5, [r1, #8]
	if ((rsp->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    ae88:	78eb      	ldrb	r3, [r5, #3]
    ae8a:	3b07      	subs	r3, #7
    ae8c:	2b09      	cmp	r3, #9
{
    ae8e:	4604      	mov	r4, r0
	if ((rsp->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    ae90:	f200 80ad 	bhi.w	afee <smp_pairing_rsp+0x16a>
	smp->local_dist &= rsp->init_key_dist;
    ae94:	792a      	ldrb	r2, [r5, #4]
    ae96:	f890 3179 	ldrb.w	r3, [r0, #377]	; 0x179
    ae9a:	4013      	ands	r3, r2
    ae9c:	f880 3179 	strb.w	r3, [r0, #377]	; 0x179
	smp->remote_dist &= rsp->resp_key_dist;
    aea0:	796a      	ldrb	r2, [r5, #5]
    aea2:	f890 317a 	ldrb.w	r3, [r0, #378]	; 0x17a
    aea6:	4013      	ands	r3, r2
    aea8:	f880 317a 	strb.w	r3, [r0, #378]	; 0x17a
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
    aeac:	2302      	movs	r3, #2
    aeae:	f880 30ac 	strb.w	r3, [r0, #172]	; 0xac
	memcpy(smp->prsp + 1, rsp, sizeof(*rsp));
    aeb2:	2206      	movs	r2, #6
    aeb4:	4629      	mov	r1, r5
    aeb6:	30ad      	adds	r0, #173	; 0xad
    aeb8:	f7f5 fc6b 	bl	792 <memcpy>
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    aebc:	78ab      	ldrb	r3, [r5, #2]
    aebe:	f013 0f08 	tst.w	r3, #8
    aec2:	f104 06a0 	add.w	r6, r4, #160	; 0xa0
    aec6:	d007      	beq.n	aed8 <smp_pairing_rsp+0x54>
    aec8:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    aecc:	071f      	lsls	r7, r3, #28
    aece:	d503      	bpl.n	aed8 <smp_pairing_rsp+0x54>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
    aed0:	2105      	movs	r1, #5
    aed2:	4630      	mov	r0, r6
    aed4:	f7fe fc35 	bl	9742 <atomic_set_bit>
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    aed8:	78ab      	ldrb	r3, [r5, #2]
    aeda:	0698      	lsls	r0, r3, #26
    aedc:	d507      	bpl.n	aeee <smp_pairing_rsp+0x6a>
    aede:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    aee2:	0699      	lsls	r1, r3, #26
    aee4:	d503      	bpl.n	aeee <smp_pairing_rsp+0x6a>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
    aee6:	2111      	movs	r1, #17
    aee8:	4630      	mov	r0, r6
    aeea:	f7fe fc2a 	bl	9742 <atomic_set_bit>
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    aeee:	78ab      	ldrb	r3, [r5, #2]
    aef0:	07da      	lsls	r2, r3, #31
    aef2:	d507      	bpl.n	af04 <smp_pairing_rsp+0x80>
    aef4:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    aef8:	07db      	lsls	r3, r3, #31
    aefa:	d503      	bpl.n	af04 <smp_pairing_rsp+0x80>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
    aefc:	210a      	movs	r1, #10
    aefe:	4630      	mov	r0, r6
    af00:	f7fe fc1f 	bl	9742 <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    af04:	2105      	movs	r1, #5
    af06:	4630      	mov	r0, r6
    af08:	f7fe fc0e 	bl	9728 <atomic_test_bit>
    af0c:	782f      	ldrb	r7, [r5, #0]
    af0e:	bba8      	cbnz	r0, af7c <smp_pairing_rsp+0xf8>
	smp->method = legacy_get_pair_method(smp, remote_io);
    af10:	4639      	mov	r1, r7
    af12:	4620      	mov	r0, r4
    af14:	f7fe fd82 	bl	9a1c <legacy_get_pair_method>
    af18:	4605      	mov	r5, r0
    af1a:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
	if (smp->method == JUST_WORKS &&
    af1e:	b998      	cbnz	r0, af48 <smp_pairing_rsp+0xc4>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    af20:	210c      	movs	r1, #12
    af22:	4630      	mov	r0, r6
    af24:	f7fe fc00 	bl	9728 <atomic_test_bit>
	if (smp->method == JUST_WORKS &&
    af28:	b170      	cbz	r0, af48 <smp_pairing_rsp+0xc4>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    af2a:	4f32      	ldr	r7, [pc, #200]	; (aff4 <smp_pairing_rsp+0x170>)
    af2c:	683b      	ldr	r3, [r7, #0]
    af2e:	b15b      	cbz	r3, af48 <smp_pairing_rsp+0xc4>
	    bt_auth && bt_auth->pairing_confirm) {
    af30:	691b      	ldr	r3, [r3, #16]
    af32:	b14b      	cbz	r3, af48 <smp_pairing_rsp+0xc4>
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    af34:	4630      	mov	r0, r6
    af36:	2109      	movs	r1, #9
    af38:	f7fe fc03 	bl	9742 <atomic_set_bit>
			bt_auth->pairing_confirm(smp->chan.chan.conn);
    af3c:	683b      	ldr	r3, [r7, #0]
    af3e:	6820      	ldr	r0, [r4, #0]
    af40:	691b      	ldr	r3, [r3, #16]
    af42:	4798      	blx	r3
}
    af44:	4628      	mov	r0, r5
    af46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ret = legacy_request_tk(smp);
    af48:	4620      	mov	r0, r4
    af4a:	f7fe fd03 	bl	9954 <legacy_request_tk>
	if (ret) {
    af4e:	4605      	mov	r5, r0
    af50:	2800      	cmp	r0, #0
    af52:	d1f7      	bne.n	af44 <smp_pairing_rsp+0xc0>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    af54:	2109      	movs	r1, #9
    af56:	4630      	mov	r0, r6
    af58:	f7fe fbe6 	bl	9728 <atomic_test_bit>
    af5c:	b948      	cbnz	r0, af72 <smp_pairing_rsp+0xee>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    af5e:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    af62:	2103      	movs	r1, #3
    af64:	f7fe fbed 	bl	9742 <atomic_set_bit>
		return legacy_send_pairing_confirm(smp);
    af68:	4620      	mov	r0, r4
}
    af6a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		return legacy_send_pairing_confirm(smp);
    af6e:	f7ff bd45 	b.w	a9fc <legacy_send_pairing_confirm>
	atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    af72:	4629      	mov	r1, r5
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    af74:	4630      	mov	r0, r6
    af76:	f7fe fbe4 	bl	9742 <atomic_set_bit>
		return 0;
    af7a:	e7e3      	b.n	af44 <smp_pairing_rsp+0xc0>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY)
    af7c:	2f04      	cmp	r7, #4
    af7e:	d82a      	bhi.n	afd6 <smp_pairing_rsp+0x152>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    af80:	f894 50a8 	ldrb.w	r5, [r4, #168]	; 0xa8
    af84:	f894 30af 	ldrb.w	r3, [r4, #175]	; 0xaf
    af88:	431d      	orrs	r5, r3
    af8a:	f015 0504 	ands.w	r5, r5, #4
    af8e:	d006      	beq.n	af9e <smp_pairing_rsp+0x11a>
	return gen_method_sc[remote_io][get_io_capa()];
    af90:	f7fe fb68 	bl	9664 <get_io_capa>
    af94:	4918      	ldr	r1, [pc, #96]	; (aff8 <smp_pairing_rsp+0x174>)
    af96:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    af9a:	440f      	add	r7, r1
    af9c:	5c3d      	ldrb	r5, [r7, r0]
	smp->method = get_pair_method(smp, rsp->io_capability);
    af9e:	f884 50a4 	strb.w	r5, [r4, #164]	; 0xa4
	smp->local_dist &= SEND_KEYS_SC;
    afa2:	2300      	movs	r3, #0
    afa4:	f884 3179 	strb.w	r3, [r4, #377]	; 0x179
	smp->remote_dist &= RECV_KEYS_SC;
    afa8:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    afac:	f003 0302 	and.w	r3, r3, #2
    afb0:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
	if (smp->method == JUST_WORKS) {
    afb4:	b955      	cbnz	r5, afcc <smp_pairing_rsp+0x148>
		if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    afb6:	210c      	movs	r1, #12
    afb8:	4630      	mov	r0, r6
    afba:	f7fe fbb5 	bl	9728 <atomic_test_bit>
    afbe:	b128      	cbz	r0, afcc <smp_pairing_rsp+0x148>
    afc0:	4f0c      	ldr	r7, [pc, #48]	; (aff4 <smp_pairing_rsp+0x170>)
    afc2:	683b      	ldr	r3, [r7, #0]
    afc4:	b113      	cbz	r3, afcc <smp_pairing_rsp+0x148>
		    bt_auth && bt_auth->pairing_confirm) {
    afc6:	691b      	ldr	r3, [r3, #16]
    afc8:	2b00      	cmp	r3, #0
    afca:	d1b3      	bne.n	af34 <smp_pairing_rsp+0xb0>
	if (!sc_local_pkey_valid) {
    afcc:	4b0b      	ldr	r3, [pc, #44]	; (affc <smp_pairing_rsp+0x178>)
    afce:	781d      	ldrb	r5, [r3, #0]
    afd0:	b91d      	cbnz	r5, afda <smp_pairing_rsp+0x156>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    afd2:	2106      	movs	r1, #6
    afd4:	e7ce      	b.n	af74 <smp_pairing_rsp+0xf0>
		return JUST_WORKS;
    afd6:	2500      	movs	r5, #0
    afd8:	e7e1      	b.n	af9e <smp_pairing_rsp+0x11a>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    afda:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    afde:	210c      	movs	r1, #12
    afe0:	f7fe fbaf 	bl	9742 <atomic_set_bit>
	return sc_send_public_key(smp);
    afe4:	4620      	mov	r0, r4
}
    afe6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return sc_send_public_key(smp);
    afea:	f7ff b829 	b.w	a040 <sc_send_public_key>
		return BT_SMP_ERR_ENC_KEY_SIZE;
    afee:	2506      	movs	r5, #6
    aff0:	e7a8      	b.n	af44 <smp_pairing_rsp+0xc0>
    aff2:	bf00      	nop
    aff4:	20003128 	.word	0x20003128
    aff8:	0002527b 	.word	0x0002527b
    affc:	200008f8 	.word	0x200008f8

0000b000 <smp_pairing_random>:
{
    b000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b004:	4604      	mov	r4, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    b006:	f100 08d3 	add.w	r8, r0, #211	; 0xd3
{
    b00a:	b089      	sub	sp, #36	; 0x24
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    b00c:	2210      	movs	r2, #16
    b00e:	6889      	ldr	r1, [r1, #8]
    b010:	4640      	mov	r0, r8
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    b012:	f104 06a0 	add.w	r6, r4, #160	; 0xa0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    b016:	f7f5 fbbc 	bl	792 <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    b01a:	2105      	movs	r1, #5
    b01c:	4630      	mov	r0, r6
    b01e:	f7fe fb83 	bl	9728 <atomic_test_bit>
    b022:	f8d4 9000 	ldr.w	r9, [r4]
    b026:	2800      	cmp	r0, #0
    b028:	d174      	bne.n	b114 <smp_pairing_random+0x114>
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
    b02a:	f109 0356 	add.w	r3, r9, #86	; 0x56
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    b02e:	f104 0ae3 	add.w	sl, r4, #227	; 0xe3
    b032:	af04      	add	r7, sp, #16
    b034:	9301      	str	r3, [sp, #4]
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
    b036:	f109 034f 	add.w	r3, r9, #79	; 0x4f
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    b03a:	9300      	str	r3, [sp, #0]
    b03c:	9702      	str	r7, [sp, #8]
    b03e:	f104 03ac 	add.w	r3, r4, #172	; 0xac
    b042:	f104 02a5 	add.w	r2, r4, #165	; 0xa5
    b046:	4641      	mov	r1, r8
    b048:	4650      	mov	r0, sl
    b04a:	f7ff fc81 	bl	a950 <smp_c1>
	if (err) {
    b04e:	b108      	cbz	r0, b054 <smp_pairing_random+0x54>
		return BT_SMP_ERR_UNSPECIFIED;
    b050:	2508      	movs	r5, #8
    b052:	e059      	b.n	b108 <smp_pairing_random+0x108>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
    b054:	2210      	movs	r2, #16
    b056:	4639      	mov	r1, r7
    b058:	f104 00b3 	add.w	r0, r4, #179	; 0xb3
    b05c:	f7f5 fb6c 	bl	738 <memcmp>
    b060:	2800      	cmp	r0, #0
    b062:	d155      	bne.n	b110 <smp_pairing_random+0x110>
	    conn->role == BT_HCI_ROLE_MASTER) {
    b064:	f899 5003 	ldrb.w	r5, [r9, #3]
    b068:	f104 0bc3 	add.w	fp, r4, #195	; 0xc3
	memcpy(out, r2, 8);
    b06c:	2208      	movs	r2, #8
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    b06e:	bb75      	cbnz	r5, b0ce <smp_pairing_random+0xce>
	memcpy(out, r2, 8);
    b070:	4659      	mov	r1, fp
    b072:	4638      	mov	r0, r7
    b074:	f7f5 fb8d 	bl	792 <memcpy>
	memcpy(out + 8, r1, 8);
    b078:	2208      	movs	r2, #8
    b07a:	4641      	mov	r1, r8
    b07c:	a806      	add	r0, sp, #24
    b07e:	f7f5 fb88 	bl	792 <memcpy>
	return bt_encrypt_le(k, out, out);
    b082:	463a      	mov	r2, r7
    b084:	4639      	mov	r1, r7
    b086:	4650      	mov	r0, sl
    b088:	f001 fbfc 	bl	c884 <bt_encrypt_le>
		if (err) {
    b08c:	2800      	cmp	r0, #0
    b08e:	d1df      	bne.n	b050 <smp_pairing_random+0x50>
	return min(req->max_key_size, rsp->max_key_size);
    b090:	f894 20b0 	ldrb.w	r2, [r4, #176]	; 0xb0
    b094:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
		if (bt_conn_le_start_encryption(conn, 0, 0, tmp,
    b098:	429a      	cmp	r2, r3
    b09a:	bf94      	ite	ls
    b09c:	9202      	strls	r2, [sp, #8]
    b09e:	9302      	strhi	r3, [sp, #8]
    b0a0:	e88d 00a0 	stmia.w	sp, {r5, r7}
    b0a4:	2200      	movs	r2, #0
    b0a6:	2300      	movs	r3, #0
    b0a8:	4648      	mov	r0, r9
    b0aa:	f7fa fe01 	bl	5cb0 <bt_conn_le_start_encryption>
    b0ae:	b148      	cbz	r0, b0c4 <smp_pairing_random+0xc4>
			BT_ERR("Failed to start encryption");
    b0b0:	4b6c      	ldr	r3, [pc, #432]	; (b264 <smp_pairing_random+0x264>)
    b0b2:	9301      	str	r3, [sp, #4]
    b0b4:	9300      	str	r3, [sp, #0]
    b0b6:	4a6c      	ldr	r2, [pc, #432]	; (b268 <smp_pairing_random+0x268>)
    b0b8:	4b6c      	ldr	r3, [pc, #432]	; (b26c <smp_pairing_random+0x26c>)
    b0ba:	496d      	ldr	r1, [pc, #436]	; (b270 <smp_pairing_random+0x270>)
    b0bc:	486d      	ldr	r0, [pc, #436]	; (b274 <smp_pairing_random+0x274>)
    b0be:	f7f7 f8e9 	bl	2294 <printk>
    b0c2:	e7c5      	b.n	b050 <smp_pairing_random+0x50>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    b0c4:	2101      	movs	r1, #1
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    b0c6:	4630      	mov	r0, r6
    b0c8:	f7fe fb3b 	bl	9742 <atomic_set_bit>
			return 0;
    b0cc:	e01c      	b.n	b108 <smp_pairing_random+0x108>
	memcpy(out, r2, 8);
    b0ce:	4641      	mov	r1, r8
    b0d0:	4638      	mov	r0, r7
    b0d2:	f7f5 fb5e 	bl	792 <memcpy>
	memcpy(out + 8, r1, 8);
    b0d6:	2208      	movs	r2, #8
    b0d8:	4659      	mov	r1, fp
    b0da:	a806      	add	r0, sp, #24
    b0dc:	f7f5 fb59 	bl	792 <memcpy>
	return bt_encrypt_le(k, out, out);
    b0e0:	463a      	mov	r2, r7
    b0e2:	4639      	mov	r1, r7
    b0e4:	4650      	mov	r0, sl
    b0e6:	f001 fbcd 	bl	c884 <bt_encrypt_le>
		if (err) {
    b0ea:	4605      	mov	r5, r0
    b0ec:	2800      	cmp	r0, #0
    b0ee:	d1af      	bne.n	b050 <smp_pairing_random+0x50>
		memcpy(smp->tk, tmp, sizeof(smp->tk));
    b0f0:	2210      	movs	r2, #16
    b0f2:	4639      	mov	r1, r7
    b0f4:	4650      	mov	r0, sl
    b0f6:	f7f5 fb4c 	bl	792 <memcpy>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    b0fa:	4630      	mov	r0, r6
    b0fc:	2101      	movs	r1, #1
    b0fe:	f7fe fb20 	bl	9742 <atomic_set_bit>
		smp_send_pairing_random(smp);
    b102:	4620      	mov	r0, r4
    b104:	f7ff f8a6 	bl	a254 <smp_send_pairing_random>
}
    b108:	4628      	mov	r0, r5
    b10a:	b009      	add	sp, #36	; 0x24
    b10c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_SMP_ERR_CONFIRM_FAILED;
    b110:	2504      	movs	r5, #4
		return legacy_pairing_random(smp);
    b112:	e7f9      	b.n	b108 <smp_pairing_random+0x108>
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    b114:	f899 3003 	ldrb.w	r3, [r9, #3]
    b118:	2b00      	cmp	r3, #0
    b11a:	d14e      	bne.n	b1ba <smp_pairing_random+0x1ba>
		err = sc_smp_check_confirm(smp);
    b11c:	4620      	mov	r0, r4
    b11e:	f7fe fded 	bl	9cfc <sc_smp_check_confirm>
		if (err) {
    b122:	4605      	mov	r5, r0
    b124:	2800      	cmp	r0, #0
    b126:	d1ef      	bne.n	b108 <smp_pairing_random+0x108>
		switch (smp->method) {
    b128:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    b12c:	2b03      	cmp	r3, #3
    b12e:	d88f      	bhi.n	b050 <smp_pairing_random+0x50>
    b130:	e8df f003 	tbb	[pc, r3]
    b134:	021e1e37 	.word	0x021e1e37
			if (smp_g2(sc_public_key, smp->pkey, smp->prnd,
    b138:	ab04      	add	r3, sp, #16
    b13a:	9300      	str	r3, [sp, #0]
    b13c:	f104 02c3 	add.w	r2, r4, #195	; 0xc3
    b140:	4643      	mov	r3, r8
    b142:	f104 01f3 	add.w	r1, r4, #243	; 0xf3
    b146:	484c      	ldr	r0, [pc, #304]	; (b278 <smp_pairing_random+0x278>)
    b148:	f7fe fb46 	bl	97d8 <smp_g2>
    b14c:	2800      	cmp	r0, #0
    b14e:	f47f af7f 	bne.w	b050 <smp_pairing_random+0x50>
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    b152:	4630      	mov	r0, r6
    b154:	2109      	movs	r1, #9
    b156:	f7fe faf4 	bl	9742 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    b15a:	4630      	mov	r0, r6
    b15c:	2108      	movs	r1, #8
    b15e:	f7fe faf0 	bl	9742 <atomic_set_bit>
			bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
    b162:	4b46      	ldr	r3, [pc, #280]	; (b27c <smp_pairing_random+0x27c>)
    b164:	9904      	ldr	r1, [sp, #16]
    b166:	681b      	ldr	r3, [r3, #0]
    b168:	6820      	ldr	r0, [r4, #0]
    b16a:	689b      	ldr	r3, [r3, #8]
    b16c:	4798      	blx	r3
			return 0;
    b16e:	e7cb      	b.n	b108 <smp_pairing_random+0x108>
			smp->passkey_round++;
    b170:	f894 3178 	ldrb.w	r3, [r4, #376]	; 0x178
    b174:	3301      	adds	r3, #1
    b176:	b2db      	uxtb	r3, r3
			if (smp->passkey_round == 20) {
    b178:	2b14      	cmp	r3, #20
			smp->passkey_round++;
    b17a:	f884 3178 	strb.w	r3, [r4, #376]	; 0x178
			if (smp->passkey_round == 20) {
    b17e:	d010      	beq.n	b1a2 <smp_pairing_random+0x1a2>
			if (bt_rand(smp->prnd, 16)) {
    b180:	2110      	movs	r1, #16
    b182:	f104 00c3 	add.w	r0, r4, #195	; 0xc3
    b186:	f001 fb61 	bl	c84c <bt_rand>
    b18a:	2800      	cmp	r0, #0
    b18c:	f47f af60 	bne.w	b050 <smp_pairing_random+0x50>
			atomic_set_bit(&smp->allowed_cmds,
    b190:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    b194:	2103      	movs	r1, #3
    b196:	f7fe fad4 	bl	9742 <atomic_set_bit>
			smp_send_pairing_confirm(smp);
    b19a:	4620      	mov	r0, r4
    b19c:	f7ff fb92 	bl	a8c4 <smp_send_pairing_confirm>
			return 0;
    b1a0:	e7b2      	b.n	b108 <smp_pairing_random+0x108>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
    b1a2:	2107      	movs	r1, #7
    b1a4:	4630      	mov	r0, r6
    b1a6:	f7fe fabf 	bl	9728 <atomic_test_bit>
    b1aa:	b108      	cbz	r0, b1b0 <smp_pairing_random+0x1b0>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    b1ac:	2108      	movs	r1, #8
    b1ae:	e78a      	b.n	b0c6 <smp_pairing_random+0xc6>
		return compute_and_send_master_dhcheck(smp);
    b1b0:	4620      	mov	r0, r4
    b1b2:	f7fe fe02 	bl	9dba <compute_and_send_master_dhcheck>
    b1b6:	4605      	mov	r5, r0
    b1b8:	e7a6      	b.n	b108 <smp_pairing_random+0x108>
	switch (smp->method) {
    b1ba:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    b1be:	2b03      	cmp	r3, #3
    b1c0:	f63f af46 	bhi.w	b050 <smp_pairing_random+0x50>
    b1c4:	e8df f003 	tbb	[pc, r3]
    b1c8:	02272719 	.word	0x02272719
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
    b1cc:	ab04      	add	r3, sp, #16
    b1ce:	9300      	str	r3, [sp, #0]
    b1d0:	4642      	mov	r2, r8
    b1d2:	f104 03c3 	add.w	r3, r4, #195	; 0xc3
    b1d6:	4928      	ldr	r1, [pc, #160]	; (b278 <smp_pairing_random+0x278>)
    b1d8:	f104 00f3 	add.w	r0, r4, #243	; 0xf3
    b1dc:	f7fe fafc 	bl	97d8 <smp_g2>
    b1e0:	2800      	cmp	r0, #0
    b1e2:	f47f af35 	bne.w	b050 <smp_pairing_random+0x50>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    b1e6:	2109      	movs	r1, #9
    b1e8:	4630      	mov	r0, r6
    b1ea:	f7fe faaa 	bl	9742 <atomic_set_bit>
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
    b1ee:	4b23      	ldr	r3, [pc, #140]	; (b27c <smp_pairing_random+0x27c>)
    b1f0:	9904      	ldr	r1, [sp, #16]
    b1f2:	681b      	ldr	r3, [r3, #0]
    b1f4:	6820      	ldr	r0, [r4, #0]
    b1f6:	689b      	ldr	r3, [r3, #8]
    b1f8:	4798      	blx	r3
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    b1fa:	210d      	movs	r1, #13
    b1fc:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    b200:	f7fe fa9f 	bl	9742 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    b204:	210d      	movs	r1, #13
    b206:	4630      	mov	r0, r6
    b208:	f7fe fa9b 	bl	9742 <atomic_set_bit>
	smp_send_pairing_random(smp);
    b20c:	4620      	mov	r0, r4
    b20e:	f7ff f821 	bl	a254 <smp_send_pairing_random>
	return 0;
    b212:	2500      	movs	r5, #0
    b214:	e778      	b.n	b108 <smp_pairing_random+0x108>
		err = sc_smp_check_confirm(smp);
    b216:	4620      	mov	r0, r4
    b218:	f7fe fd70 	bl	9cfc <sc_smp_check_confirm>
		if (err) {
    b21c:	4605      	mov	r5, r0
    b21e:	2800      	cmp	r0, #0
    b220:	f47f af72 	bne.w	b108 <smp_pairing_random+0x108>
		atomic_set_bit(&smp->allowed_cmds,
    b224:	f104 079c 	add.w	r7, r4, #156	; 0x9c
    b228:	2103      	movs	r1, #3
    b22a:	4638      	mov	r0, r7
    b22c:	f7fe fa89 	bl	9742 <atomic_set_bit>
		smp_send_pairing_random(smp);
    b230:	4620      	mov	r0, r4
    b232:	f7ff f80f 	bl	a254 <smp_send_pairing_random>
		smp->passkey_round++;
    b236:	f894 3178 	ldrb.w	r3, [r4, #376]	; 0x178
    b23a:	3301      	adds	r3, #1
    b23c:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20) {
    b23e:	2b14      	cmp	r3, #20
		smp->passkey_round++;
    b240:	f884 3178 	strb.w	r3, [r4, #376]	; 0x178
		if (smp->passkey_round == 20) {
    b244:	d105      	bne.n	b252 <smp_pairing_random+0x252>
			atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    b246:	210d      	movs	r1, #13
    b248:	4638      	mov	r0, r7
    b24a:	f7fe fa7a 	bl	9742 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    b24e:	210d      	movs	r1, #13
    b250:	e739      	b.n	b0c6 <smp_pairing_random+0xc6>
		if (bt_rand(smp->prnd, 16)) {
    b252:	2110      	movs	r1, #16
    b254:	f104 00c3 	add.w	r0, r4, #195	; 0xc3
    b258:	f001 faf8 	bl	c84c <bt_rand>
    b25c:	2800      	cmp	r0, #0
    b25e:	f47f aef7 	bne.w	b050 <smp_pairing_random+0x50>
    b262:	e751      	b.n	b108 <smp_pairing_random+0x108>
    b264:	00023dae 	.word	0x00023dae
    b268:	00022d76 	.word	0x00022d76
    b26c:	00024fd2 	.word	0x00024fd2
    b270:	000272d8 	.word	0x000272d8
    b274:	00025459 	.word	0x00025459
    b278:	200008f9 	.word	0x200008f9
    b27c:	20003128 	.word	0x20003128

0000b280 <bt_smp_send_security_req>:
{
    b280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b284:	4607      	mov	r7, r0
	smp = smp_chan_get(conn);
    b286:	f7fe fc09 	bl	9a9c <smp_chan_get>
	if (!smp) {
    b28a:	4605      	mov	r5, r0
    b28c:	b368      	cbz	r0, b2ea <bt_smp_send_security_req+0x6a>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    b28e:	f100 02a0 	add.w	r2, r0, #160	; 0xa0
    b292:	2104      	movs	r1, #4
    b294:	4610      	mov	r0, r2
    b296:	f7fe fa47 	bl	9728 <atomic_test_bit>
    b29a:	bb48      	cbnz	r0, b2f0 <bt_smp_send_security_req+0x70>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    b29c:	2103      	movs	r1, #3
    b29e:	4610      	mov	r0, r2
    b2a0:	f7fe fa42 	bl	9728 <atomic_test_bit>
    b2a4:	4604      	mov	r4, r0
    b2a6:	bb30      	cbnz	r0, b2f6 <bt_smp_send_security_req+0x76>
	if (!sec_level_reachable(conn)) {
    b2a8:	7a78      	ldrb	r0, [r7, #9]
    b2aa:	f7fe fbd9 	bl	9a60 <sec_level_reachable.isra.2>
    b2ae:	b328      	cbz	r0, b2fc <bt_smp_send_security_req+0x7c>
	req_buf = smp_create_pdu(conn, BT_SMP_CMD_SECURITY_REQUEST,
    b2b0:	200b      	movs	r0, #11
    b2b2:	f7fe fc0f 	bl	9ad4 <smp_create_pdu.isra.5>
	if (!req_buf) {
    b2b6:	4606      	mov	r6, r0
    b2b8:	b318      	cbz	r0, b302 <bt_smp_send_security_req+0x82>
	req = net_buf_add(req_buf, sizeof(*req));
    b2ba:	2101      	movs	r1, #1
    b2bc:	3008      	adds	r0, #8
    b2be:	f00e f871 	bl	193a4 <net_buf_simple_add>
    b2c2:	4680      	mov	r8, r0
	req->auth_req = get_auth(BT_SMP_AUTH_DEFAULT);
    b2c4:	2009      	movs	r0, #9
    b2c6:	f7fe f9f3 	bl	96b0 <get_auth>
    b2ca:	2106      	movs	r1, #6
    b2cc:	f888 0000 	strb.w	r0, [r8]
    b2d0:	4623      	mov	r3, r4
    b2d2:	4638      	mov	r0, r7
    b2d4:	4632      	mov	r2, r6
    b2d6:	f7fb fcc7 	bl	6c68 <bt_l2cap_send_cb>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
    b2da:	2105      	movs	r1, #5
    b2dc:	f105 009c 	add.w	r0, r5, #156	; 0x9c
    b2e0:	f7fe fa2f 	bl	9742 <atomic_set_bit>
}
    b2e4:	4620      	mov	r0, r4
    b2e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOTCONN;
    b2ea:	f06f 0438 	mvn.w	r4, #56	; 0x38
    b2ee:	e7f9      	b.n	b2e4 <bt_smp_send_security_req+0x64>
		return -EIO;
    b2f0:	f06f 0404 	mvn.w	r4, #4
    b2f4:	e7f6      	b.n	b2e4 <bt_smp_send_security_req+0x64>
		return -EBUSY;
    b2f6:	f06f 040f 	mvn.w	r4, #15
    b2fa:	e7f3      	b.n	b2e4 <bt_smp_send_security_req+0x64>
		return -EINVAL;
    b2fc:	f06f 0415 	mvn.w	r4, #21
    b300:	e7f0      	b.n	b2e4 <bt_smp_send_security_req+0x64>
		return -ENOBUFS;
    b302:	f06f 0436 	mvn.w	r4, #54	; 0x36
    b306:	e7ed      	b.n	b2e4 <bt_smp_send_security_req+0x64>

0000b308 <bt_smp_send_pairing_req>:
{
    b308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b30c:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
    b30e:	f7fe fbc5 	bl	9a9c <smp_chan_get>
	if (!smp) {
    b312:	4605      	mov	r5, r0
    b314:	2800      	cmp	r0, #0
    b316:	d052      	beq.n	b3be <bt_smp_send_pairing_req+0xb6>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    b318:	f100 07a0 	add.w	r7, r0, #160	; 0xa0
    b31c:	2104      	movs	r1, #4
    b31e:	4638      	mov	r0, r7
    b320:	f7fe fa02 	bl	9728 <atomic_test_bit>
    b324:	2800      	cmp	r0, #0
    b326:	d14d      	bne.n	b3c4 <bt_smp_send_pairing_req+0xbc>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    b328:	2103      	movs	r1, #3
    b32a:	4638      	mov	r0, r7
    b32c:	f7fe f9fc 	bl	9728 <atomic_test_bit>
    b330:	2800      	cmp	r0, #0
    b332:	d14a      	bne.n	b3ca <bt_smp_send_pairing_req+0xc2>
	if (!sec_level_reachable(conn)) {
    b334:	7a60      	ldrb	r0, [r4, #9]
    b336:	f7fe fb93 	bl	9a60 <sec_level_reachable.isra.2>
    b33a:	2800      	cmp	r0, #0
    b33c:	d048      	beq.n	b3d0 <bt_smp_send_pairing_req+0xc8>
	if (smp_init(smp)) {
    b33e:	4628      	mov	r0, r5
    b340:	f7fe fa13 	bl	976a <smp_init>
    b344:	4604      	mov	r4, r0
    b346:	b120      	cbz	r0, b352 <bt_smp_send_pairing_req+0x4a>
		return -ENOBUFS;
    b348:	f06f 0436 	mvn.w	r4, #54	; 0x36
}
    b34c:	4620      	mov	r0, r4
    b34e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	req_buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_REQ, sizeof(*req));
    b352:	2001      	movs	r0, #1
    b354:	f7fe fbbe 	bl	9ad4 <smp_create_pdu.isra.5>
	if (!req_buf) {
    b358:	4681      	mov	r9, r0
    b35a:	2800      	cmp	r0, #0
    b35c:	d0f4      	beq.n	b348 <bt_smp_send_pairing_req+0x40>
	req = net_buf_add(req_buf, sizeof(*req));
    b35e:	2106      	movs	r1, #6
    b360:	3008      	adds	r0, #8
    b362:	f00e f81f 	bl	193a4 <net_buf_simple_add>
    b366:	4606      	mov	r6, r0
	req->auth_req = get_auth(BT_SMP_AUTH_DEFAULT);
    b368:	2009      	movs	r0, #9
    b36a:	f7fe f9a1 	bl	96b0 <get_auth>
    b36e:	70b0      	strb	r0, [r6, #2]
	req->io_capability = get_io_capa();
    b370:	f7fe f978 	bl	9664 <get_io_capa>
	req->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    b374:	2310      	movs	r3, #16
    b376:	70f3      	strb	r3, [r6, #3]
	req->resp_key_dist = RECV_KEYS;
    b378:	f04f 0803 	mov.w	r8, #3
	req->init_key_dist = SEND_KEYS;
    b37c:	2301      	movs	r3, #1
    b37e:	7133      	strb	r3, [r6, #4]
	req->io_capability = get_io_capa();
    b380:	7030      	strb	r0, [r6, #0]
	req->oob_flag = BT_SMP_OOB_NOT_PRESENT;
    b382:	7074      	strb	r4, [r6, #1]
	req->resp_key_dist = RECV_KEYS;
    b384:	f886 8005 	strb.w	r8, [r6, #5]
	memcpy(smp->preq + 1, req, sizeof(*req));
    b388:	4631      	mov	r1, r6
	smp->local_dist = SEND_KEYS;
    b38a:	f885 3179 	strb.w	r3, [r5, #377]	; 0x179
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    b38e:	f885 30a5 	strb.w	r3, [r5, #165]	; 0xa5
	smp->remote_dist = RECV_KEYS;
    b392:	f885 817a 	strb.w	r8, [r5, #378]	; 0x17a
	memcpy(smp->preq + 1, req, sizeof(*req));
    b396:	2206      	movs	r2, #6
    b398:	f105 00a6 	add.w	r0, r5, #166	; 0xa6
    b39c:	f7f5 f9f9 	bl	792 <memcpy>
	smp_send(smp, req_buf, NULL);
    b3a0:	4622      	mov	r2, r4
    b3a2:	4649      	mov	r1, r9
    b3a4:	4628      	mov	r0, r5
    b3a6:	f7fe fcdb 	bl	9d60 <smp_send>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RSP);
    b3aa:	f105 009c 	add.w	r0, r5, #156	; 0x9c
    b3ae:	2102      	movs	r1, #2
    b3b0:	f7fe f9c7 	bl	9742 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
    b3b4:	4641      	mov	r1, r8
    b3b6:	4638      	mov	r0, r7
    b3b8:	f7fe f9c3 	bl	9742 <atomic_set_bit>
	return 0;
    b3bc:	e7c6      	b.n	b34c <bt_smp_send_pairing_req+0x44>
		return -ENOTCONN;
    b3be:	f06f 0438 	mvn.w	r4, #56	; 0x38
    b3c2:	e7c3      	b.n	b34c <bt_smp_send_pairing_req+0x44>
		return -EIO;
    b3c4:	f06f 0404 	mvn.w	r4, #4
    b3c8:	e7c0      	b.n	b34c <bt_smp_send_pairing_req+0x44>
		return -EBUSY;
    b3ca:	f06f 040f 	mvn.w	r4, #15
    b3ce:	e7bd      	b.n	b34c <bt_smp_send_pairing_req+0x44>
		return -EINVAL;
    b3d0:	f06f 0415 	mvn.w	r4, #21
    b3d4:	e7ba      	b.n	b34c <bt_smp_send_pairing_req+0x44>
	...

0000b3d8 <smp_security_request>:
{
    b3d8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (sc_supported) {
    b3da:	4b34      	ldr	r3, [pc, #208]	; (b4ac <smp_security_request+0xd4>)
	struct bt_smp_security_request *req = (void *)buf->data;
    b3dc:	688a      	ldr	r2, [r1, #8]
	if (sc_supported) {
    b3de:	781b      	ldrb	r3, [r3, #0]
	struct bt_conn *conn = smp->chan.chan.conn;
    b3e0:	6805      	ldr	r5, [r0, #0]
    b3e2:	7814      	ldrb	r4, [r2, #0]
{
    b3e4:	b085      	sub	sp, #20
    b3e6:	4606      	mov	r6, r0
	if (sc_supported) {
    b3e8:	b33b      	cbz	r3, b43a <smp_security_request+0x62>
		auth = req->auth_req & BT_SMP_AUTH_MASK_SC;
    b3ea:	f004 040f 	and.w	r4, r4, #15
	if (!conn->le.keys) {
    b3ee:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    b3f0:	2b00      	cmp	r3, #0
    b3f2:	d158      	bne.n	b4a6 <smp_security_request+0xce>
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, &conn->le.dst);
    b3f4:	f105 0748 	add.w	r7, r5, #72	; 0x48
    b3f8:	4639      	mov	r1, r7
    b3fa:	2020      	movs	r0, #32
    b3fc:	f000 f964 	bl	b6c8 <bt_keys_find>
    b400:	6728      	str	r0, [r5, #112]	; 0x70
		if (!conn->le.keys) {
    b402:	2800      	cmp	r0, #0
    b404:	d14f      	bne.n	b4a6 <smp_security_request+0xce>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
    b406:	4639      	mov	r1, r7
    b408:	2004      	movs	r0, #4
    b40a:	f000 f95d 	bl	b6c8 <bt_keys_find>
    b40e:	6728      	str	r0, [r5, #112]	; 0x70
	if (!conn->le.keys) {
    b410:	b1d8      	cbz	r0, b44a <smp_security_request+0x72>
	if ((auth & BT_SMP_AUTH_MITM) &&
    b412:	0761      	lsls	r1, r4, #29
    b414:	d520      	bpl.n	b458 <smp_security_request+0x80>
	    !atomic_test_bit(conn->le.keys->flags, BT_KEYS_AUTHENTICATED)) {
    b416:	2100      	movs	r1, #0
    b418:	3008      	adds	r0, #8
    b41a:	f7fe f985 	bl	9728 <atomic_test_bit>
	if ((auth & BT_SMP_AUTH_MITM) &&
    b41e:	b9d8      	cbnz	r0, b458 <smp_security_request+0x80>
		if (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT) {
    b420:	f7fe f920 	bl	9664 <get_io_capa>
    b424:	4b22      	ldr	r3, [pc, #136]	; (b4b0 <smp_security_request+0xd8>)
			BT_INFO("New auth requirements: 0x%x, repairing",
    b426:	9302      	str	r3, [sp, #8]
		if (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT) {
    b428:	2803      	cmp	r0, #3
			BT_INFO("New auth requirements: 0x%x, repairing",
    b42a:	e88d 0018 	stmia.w	sp, {r3, r4}
    b42e:	4b21      	ldr	r3, [pc, #132]	; (b4b4 <smp_security_request+0xdc>)
		if (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT) {
    b430:	d006      	beq.n	b440 <smp_security_request+0x68>
		BT_INFO("New auth requirements: 0x%x, repairing", auth);
    b432:	4a21      	ldr	r2, [pc, #132]	; (b4b8 <smp_security_request+0xe0>)
    b434:	4921      	ldr	r1, [pc, #132]	; (b4bc <smp_security_request+0xe4>)
    b436:	4822      	ldr	r0, [pc, #136]	; (b4c0 <smp_security_request+0xe8>)
    b438:	e005      	b.n	b446 <smp_security_request+0x6e>
		auth = req->auth_req & BT_SMP_AUTH_MASK;
    b43a:	f004 0407 	and.w	r4, r4, #7
    b43e:	e7d6      	b.n	b3ee <smp_security_request+0x16>
		BT_WARN("Unsupported auth requirements: 0x%x, repairing",
    b440:	4a20      	ldr	r2, [pc, #128]	; (b4c4 <smp_security_request+0xec>)
    b442:	491e      	ldr	r1, [pc, #120]	; (b4bc <smp_security_request+0xe4>)
    b444:	4820      	ldr	r0, [pc, #128]	; (b4c8 <smp_security_request+0xf0>)
		BT_INFO("New auth requirements: 0x%x, repairing", auth);
    b446:	f7f6 ff25 	bl	2294 <printk>
	if (bt_smp_send_pairing_req(conn) < 0) {
    b44a:	4628      	mov	r0, r5
    b44c:	f7ff ff5c 	bl	b308 <bt_smp_send_pairing_req>
    b450:	2800      	cmp	r0, #0
    b452:	db1e      	blt.n	b492 <smp_security_request+0xba>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
    b454:	210c      	movs	r1, #12
    b456:	e020      	b.n	b49a <smp_security_request+0xc2>
	if ((auth & BT_SMP_AUTH_SC) &&
    b458:	f014 0f08 	tst.w	r4, #8
    b45c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    b45e:	d008      	beq.n	b472 <smp_security_request+0x9a>
    b460:	899a      	ldrh	r2, [r3, #12]
    b462:	0692      	lsls	r2, r2, #26
    b464:	d405      	bmi.n	b472 <smp_security_request+0x9a>
		BT_INFO("New auth requirements: 0x%x, repairing", auth);
    b466:	4b12      	ldr	r3, [pc, #72]	; (b4b0 <smp_security_request+0xd8>)
    b468:	9302      	str	r3, [sp, #8]
    b46a:	e88d 0018 	stmia.w	sp, {r3, r4}
    b46e:	4b11      	ldr	r3, [pc, #68]	; (b4b4 <smp_security_request+0xdc>)
    b470:	e7df      	b.n	b432 <smp_security_request+0x5a>
	if (bt_conn_le_start_encryption(conn, conn->le.keys->ltk.rand,
    b472:	79da      	ldrb	r2, [r3, #7]
    b474:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
    b478:	9202      	str	r2, [sp, #8]
					conn->le.keys->ltk.val,
    b47a:	f103 021a 	add.w	r2, r3, #26
	if (bt_conn_le_start_encryption(conn, conn->le.keys->ltk.rand,
    b47e:	9201      	str	r2, [sp, #4]
    b480:	8b1b      	ldrh	r3, [r3, #24]
    b482:	9300      	str	r3, [sp, #0]
    b484:	4602      	mov	r2, r0
    b486:	460b      	mov	r3, r1
    b488:	4628      	mov	r0, r5
    b48a:	f7fa fc11 	bl	5cb0 <bt_conn_le_start_encryption>
    b48e:	2800      	cmp	r0, #0
    b490:	da02      	bge.n	b498 <smp_security_request+0xc0>
		return BT_SMP_ERR_UNSPECIFIED;
    b492:	2008      	movs	r0, #8
}
    b494:	b005      	add	sp, #20
    b496:	bdf0      	pop	{r4, r5, r6, r7, pc}
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    b498:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
    b49a:	f106 00a0 	add.w	r0, r6, #160	; 0xa0
    b49e:	f7fe f950 	bl	9742 <atomic_set_bit>
	return 0;
    b4a2:	2000      	movs	r0, #0
    b4a4:	e7f6      	b.n	b494 <smp_security_request+0xbc>
	if (!conn->le.keys) {
    b4a6:	6f28      	ldr	r0, [r5, #112]	; 0x70
    b4a8:	e7b3      	b.n	b412 <smp_security_request+0x3a>
    b4aa:	bf00      	nop
    b4ac:	20000939 	.word	0x20000939
    b4b0:	00023dae 	.word	0x00023dae
    b4b4:	0002504d 	.word	0x0002504d
    b4b8:	00022c76 	.word	0x00022c76
    b4bc:	000272d8 	.word	0x000272d8
    b4c0:	000254b5 	.word	0x000254b5
    b4c4:	00024006 	.word	0x00024006
    b4c8:	000254ec 	.word	0x000254ec

0000b4cc <bt_smp_sign_verify>:
    b4cc:	f06f 0022 	mvn.w	r0, #34	; 0x22
    b4d0:	4770      	bx	lr
	...

0000b4d4 <bt_smp_update_keys>:
{
    b4d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    b4d6:	b085      	sub	sp, #20
    b4d8:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
    b4da:	f7fe fadf 	bl	9a9c <smp_chan_get>
	if (!smp) {
    b4de:	4605      	mov	r5, r0
    b4e0:	2800      	cmp	r0, #0
    b4e2:	d05f      	beq.n	b5a4 <bt_smp_update_keys+0xd0>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    b4e4:	f100 06a0 	add.w	r6, r0, #160	; 0xa0
    b4e8:	2103      	movs	r1, #3
    b4ea:	4630      	mov	r0, r6
    b4ec:	f7fe f91c 	bl	9728 <atomic_test_bit>
    b4f0:	2800      	cmp	r0, #0
    b4f2:	d057      	beq.n	b5a4 <bt_smp_update_keys+0xd0>
	if (conn->le.keys) {
    b4f4:	6f20      	ldr	r0, [r4, #112]	; 0x70
    b4f6:	b108      	cbz	r0, b4fc <bt_smp_update_keys+0x28>
		bt_keys_clear(conn->le.keys);
    b4f8:	f000 f8b0 	bl	b65c <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(&conn->le.dst);
    b4fc:	f104 0748 	add.w	r7, r4, #72	; 0x48
    b500:	4638      	mov	r0, r7
    b502:	f000 f8b9 	bl	b678 <bt_keys_get_addr>
    b506:	6720      	str	r0, [r4, #112]	; 0x70
	if (!conn->le.keys) {
    b508:	b998      	cbnz	r0, b532 <bt_smp_update_keys+0x5e>
		BT_ERR("Unable to get keys for %s",
    b50a:	4638      	mov	r0, r7
    b50c:	f7f7 ff00 	bl	3310 <bt_addr_le_str>
    b510:	4b2c      	ldr	r3, [pc, #176]	; (b5c4 <bt_smp_update_keys+0xf0>)
    b512:	9302      	str	r3, [sp, #8]
    b514:	9001      	str	r0, [sp, #4]
    b516:	9300      	str	r3, [sp, #0]
    b518:	4a2b      	ldr	r2, [pc, #172]	; (b5c8 <bt_smp_update_keys+0xf4>)
    b51a:	4b2c      	ldr	r3, [pc, #176]	; (b5cc <bt_smp_update_keys+0xf8>)
    b51c:	492c      	ldr	r1, [pc, #176]	; (b5d0 <bt_smp_update_keys+0xfc>)
    b51e:	482d      	ldr	r0, [pc, #180]	; (b5d4 <bt_smp_update_keys+0x100>)
    b520:	f7f6 feb8 	bl	2294 <printk>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    b524:	2108      	movs	r1, #8
    b526:	4628      	mov	r0, r5
}
    b528:	b005      	add	sp, #20
    b52a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    b52e:	f7fe bf99 	b.w	a464 <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
    b532:	210b      	movs	r1, #11
    b534:	4630      	mov	r0, r6
    b536:	f7fe f8f7 	bl	9728 <atomic_test_bit>
    b53a:	b120      	cbz	r0, b546 <bt_smp_update_keys+0x72>
		atomic_set_bit(conn->le.keys->flags, BT_KEYS_DEBUG);
    b53c:	6f20      	ldr	r0, [r4, #112]	; 0x70
    b53e:	2101      	movs	r1, #1
    b540:	3008      	adds	r0, #8
    b542:	f7fe f8fe 	bl	9742 <atomic_set_bit>
	switch (smp->method) {
    b546:	f895 30a4 	ldrb.w	r3, [r5, #164]	; 0xa4
    b54a:	6f20      	ldr	r0, [r4, #112]	; 0x70
    b54c:	3b01      	subs	r3, #1
    b54e:	2b02      	cmp	r3, #2
    b550:	d82a      	bhi.n	b5a8 <bt_smp_update_keys+0xd4>
		atomic_set_bit(conn->le.keys->flags, BT_KEYS_AUTHENTICATED);
    b552:	2100      	movs	r1, #0
    b554:	3008      	adds	r0, #8
    b556:	f7fe f8f4 	bl	9742 <atomic_set_bit>
	return min(req->max_key_size, rsp->max_key_size);
    b55a:	f895 10a9 	ldrb.w	r1, [r5, #169]	; 0xa9
    b55e:	f895 30b0 	ldrb.w	r3, [r5, #176]	; 0xb0
	conn->le.keys->enc_size = get_encryption_key_size(smp);
    b562:	6f22      	ldr	r2, [r4, #112]	; 0x70
	return min(req->max_key_size, rsp->max_key_size);
    b564:	428b      	cmp	r3, r1
    b566:	bf28      	it	cs
    b568:	460b      	movcs	r3, r1
	conn->le.keys->enc_size = get_encryption_key_size(smp);
    b56a:	71d3      	strb	r3, [r2, #7]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC) &&
    b56c:	2105      	movs	r1, #5
    b56e:	4630      	mov	r0, r6
    b570:	f7fe f8da 	bl	9728 <atomic_test_bit>
    b574:	b1b0      	cbz	r0, b5a4 <bt_smp_update_keys+0xd0>
	    atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    b576:	210a      	movs	r1, #10
    b578:	4630      	mov	r0, r6
    b57a:	f7fe f8d5 	bl	9728 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC) &&
    b57e:	b188      	cbz	r0, b5a4 <bt_smp_update_keys+0xd0>
		bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
    b580:	2120      	movs	r1, #32
    b582:	6f20      	ldr	r0, [r4, #112]	; 0x70
    b584:	f000 f900 	bl	b788 <bt_keys_add_type>
		memcpy(conn->le.keys->ltk.val, smp->tk,
    b588:	6f20      	ldr	r0, [r4, #112]	; 0x70
    b58a:	2210      	movs	r2, #16
    b58c:	f105 01e3 	add.w	r1, r5, #227	; 0xe3
    b590:	301a      	adds	r0, #26
    b592:	f7f5 f8fe 	bl	792 <memcpy>
		conn->le.keys->ltk.rand = 0;
    b596:	6f23      	ldr	r3, [r4, #112]	; 0x70
    b598:	2000      	movs	r0, #0
    b59a:	2100      	movs	r1, #0
    b59c:	e9c3 0104 	strd	r0, r1, [r3, #16]
		conn->le.keys->ltk.ediv = 0;
    b5a0:	2200      	movs	r2, #0
    b5a2:	831a      	strh	r2, [r3, #24]
}
    b5a4:	b005      	add	sp, #20
    b5a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b5a8:	3008      	adds	r0, #8
    b5aa:	f3bf 8f5b 	dmb	ish
    b5ae:	e850 3f00 	ldrex	r3, [r0]
    b5b2:	f023 0301 	bic.w	r3, r3, #1
    b5b6:	e840 3200 	strex	r2, r3, [r0]
    b5ba:	2a00      	cmp	r2, #0
    b5bc:	d1f7      	bne.n	b5ae <bt_smp_update_keys+0xda>
    b5be:	f3bf 8f5b 	dmb	ish
    b5c2:	e7ca      	b.n	b55a <bt_smp_update_keys+0x86>
    b5c4:	00023dae 	.word	0x00023dae
    b5c8:	00022d76 	.word	0x00022d76
    b5cc:	0002508f 	.word	0x0002508f
    b5d0:	000272d8 	.word	0x000272d8
    b5d4:	00025413 	.word	0x00025413

0000b5d8 <bt_smp_get_tk>:
{
    b5d8:	b570      	push	{r4, r5, r6, lr}
    b5da:	460e      	mov	r6, r1
	smp = smp_chan_get(conn);
    b5dc:	f7fe fa5e 	bl	9a9c <smp_chan_get>
	if (!smp) {
    b5e0:	4605      	mov	r5, r0
    b5e2:	b908      	cbnz	r0, b5e8 <bt_smp_get_tk+0x10>
		return false;
    b5e4:	2000      	movs	r0, #0
    b5e6:	bd70      	pop	{r4, r5, r6, pc}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    b5e8:	2103      	movs	r1, #3
    b5ea:	30a0      	adds	r0, #160	; 0xa0
    b5ec:	f7fe f89c 	bl	9728 <atomic_test_bit>
    b5f0:	2800      	cmp	r0, #0
    b5f2:	d0f7      	beq.n	b5e4 <bt_smp_get_tk+0xc>
	return min(req->max_key_size, rsp->max_key_size);
    b5f4:	f895 40b0 	ldrb.w	r4, [r5, #176]	; 0xb0
    b5f8:	f895 30a9 	ldrb.w	r3, [r5, #169]	; 0xa9
    b5fc:	429c      	cmp	r4, r3
    b5fe:	bf28      	it	cs
    b600:	461c      	movcs	r4, r3
	memcpy(tk, smp->tk, enc_size);
    b602:	4622      	mov	r2, r4
    b604:	f105 01e3 	add.w	r1, r5, #227	; 0xe3
    b608:	4630      	mov	r0, r6
    b60a:	f7f5 f8c2 	bl	792 <memcpy>
	if (enc_size < sizeof(smp->tk)) {
    b60e:	2c0f      	cmp	r4, #15
    b610:	d805      	bhi.n	b61e <bt_smp_get_tk+0x46>
		memset(tk + enc_size, 0, sizeof(smp->tk) - enc_size);
    b612:	f1c4 0210 	rsb	r2, r4, #16
    b616:	2100      	movs	r1, #0
    b618:	1930      	adds	r0, r6, r4
    b61a:	f7f5 f8e6 	bl	7ea <memset>
	return true;
    b61e:	2001      	movs	r0, #1
}
    b620:	bd70      	pop	{r4, r5, r6, pc}
	...

0000b624 <bt_smp_init>:
	return (bt_dev.supported_commands[34] & 0x02) &&
	       (bt_dev.supported_commands[34] & 0x04);
}

int bt_smp_init(void)
{
    b624:	b508      	push	{r3, lr}
	return (bt_dev.supported_commands[34] & 0x02) &&
    b626:	4b09      	ldr	r3, [pc, #36]	; (b64c <bt_smp_init+0x28>)
	if (IS_ENABLED(CONFIG_BT_SMP_SC_ONLY) && !sc_supported) {
		BT_ERR("SC Only Mode selected but LE SC not supported");
		return -ENOENT;
	}

	bt_l2cap_le_fixed_chan_register(&chan);
    b628:	4809      	ldr	r0, [pc, #36]	; (b650 <bt_smp_init+0x2c>)
	return (bt_dev.supported_commands[34] & 0x02) &&
    b62a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    b62e:	f003 0306 	and.w	r3, r3, #6
    b632:	1f9a      	subs	r2, r3, #6
    b634:	4253      	negs	r3, r2
    b636:	4153      	adcs	r3, r2
    b638:	4a06      	ldr	r2, [pc, #24]	; (b654 <bt_smp_init+0x30>)
    b63a:	7013      	strb	r3, [r2, #0]
	bt_l2cap_le_fixed_chan_register(&chan);
    b63c:	f7fb fa9e 	bl	6b7c <bt_l2cap_le_fixed_chan_register>
	}
#endif

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	bt_pub_key_gen(&pub_key_cb);
    b640:	4805      	ldr	r0, [pc, #20]	; (b658 <bt_smp_init+0x34>)
    b642:	f7fa fa09 	bl	5a58 <bt_pub_key_gen>

	return smp_self_test();
}
    b646:	2000      	movs	r0, #0
    b648:	bd08      	pop	{r3, pc}
    b64a:	bf00      	nop
    b64c:	20009cd8 	.word	0x20009cd8
    b650:	20009f8c 	.word	0x20009f8c
    b654:	20000939 	.word	0x20000939
    b658:	20009fac 	.word	0x20009fac

0000b65c <bt_keys_clear>:

void bt_keys_clear(struct bt_keys *keys)
{
	BT_DBG("keys for %s", bt_addr_le_str(&keys->addr));

	if (keys->keys & BT_KEYS_IRK) {
    b65c:	8983      	ldrh	r3, [r0, #12]
    b65e:	079b      	lsls	r3, r3, #30
{
    b660:	b510      	push	{r4, lr}
    b662:	4604      	mov	r4, r0
	if (keys->keys & BT_KEYS_IRK) {
    b664:	d501      	bpl.n	b66a <bt_keys_clear+0xe>
		bt_id_del(keys);
    b666:	f7f8 fb27 	bl	3cb8 <bt_id_del>
	}

	memset(keys, 0, sizeof(*keys));
    b66a:	4620      	mov	r0, r4
    b66c:	2268      	movs	r2, #104	; 0x68
    b66e:	2100      	movs	r1, #0
}
    b670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	memset(keys, 0, sizeof(*keys));
    b674:	f7f5 b8b9 	b.w	7ea <memset>

0000b678 <bt_keys_get_addr>:
{
    b678:	b537      	push	{r0, r1, r2, r4, r5, lr}
    b67a:	4605      	mov	r5, r0
	return memcmp(a, b, sizeof(*a));
    b67c:	4601      	mov	r1, r0
    b67e:	2207      	movs	r2, #7
    b680:	480b      	ldr	r0, [pc, #44]	; (b6b0 <bt_keys_get_addr+0x38>)
    b682:	f7f5 f859 	bl	738 <memcmp>
		if (!bt_addr_le_cmp(&keys->addr, addr)) {
    b686:	b170      	cbz	r0, b6a6 <bt_keys_get_addr+0x2e>
		if (!bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
    b688:	2400      	movs	r4, #0
    b68a:	2207      	movs	r2, #7
    b68c:	4669      	mov	r1, sp
    b68e:	4808      	ldr	r0, [pc, #32]	; (b6b0 <bt_keys_get_addr+0x38>)
    b690:	9400      	str	r4, [sp, #0]
    b692:	f8cd 4003 	str.w	r4, [sp, #3]
    b696:	f7f5 f84f 	bl	738 <memcmp>
    b69a:	b938      	cbnz	r0, b6ac <bt_keys_get_addr+0x34>
	memcpy(dst, src, sizeof(*dst));
    b69c:	2207      	movs	r2, #7
    b69e:	4629      	mov	r1, r5
    b6a0:	4803      	ldr	r0, [pc, #12]	; (b6b0 <bt_keys_get_addr+0x38>)
    b6a2:	f7f5 f876 	bl	792 <memcpy>
		keys = &key_pool[i];
    b6a6:	4802      	ldr	r0, [pc, #8]	; (b6b0 <bt_keys_get_addr+0x38>)
}
    b6a8:	b003      	add	sp, #12
    b6aa:	bd30      	pop	{r4, r5, pc}
	return NULL;
    b6ac:	4620      	mov	r0, r4
    b6ae:	e7fb      	b.n	b6a8 <bt_keys_get_addr+0x30>
    b6b0:	20000940 	.word	0x20000940

0000b6b4 <bt_keys_foreach>:
		if ((key_pool[i].keys & type)) {
    b6b4:	4b03      	ldr	r3, [pc, #12]	; (b6c4 <bt_keys_foreach+0x10>)
    b6b6:	899a      	ldrh	r2, [r3, #12]
    b6b8:	4202      	tst	r2, r0
    b6ba:	d001      	beq.n	b6c0 <bt_keys_foreach+0xc>
			func(&key_pool[i]);
    b6bc:	4618      	mov	r0, r3
    b6be:	4708      	bx	r1
    b6c0:	4770      	bx	lr
    b6c2:	bf00      	nop
    b6c4:	20000940 	.word	0x20000940

0000b6c8 <bt_keys_find>:
{
    b6c8:	b510      	push	{r4, lr}
		if ((key_pool[i].keys & type) &&
    b6ca:	4c06      	ldr	r4, [pc, #24]	; (b6e4 <bt_keys_find+0x1c>)
    b6cc:	89a3      	ldrh	r3, [r4, #12]
    b6ce:	4203      	tst	r3, r0
    b6d0:	d004      	beq.n	b6dc <bt_keys_find+0x14>
	return memcmp(a, b, sizeof(*a));
    b6d2:	2207      	movs	r2, #7
    b6d4:	4620      	mov	r0, r4
    b6d6:	f7f5 f82f 	bl	738 <memcmp>
    b6da:	b108      	cbz	r0, b6e0 <bt_keys_find+0x18>
	return NULL;
    b6dc:	2000      	movs	r0, #0
    b6de:	bd10      	pop	{r4, pc}
			return &key_pool[i];
    b6e0:	4620      	mov	r0, r4
}
    b6e2:	bd10      	pop	{r4, pc}
    b6e4:	20000940 	.word	0x20000940

0000b6e8 <bt_keys_get_type>:
{
    b6e8:	b538      	push	{r3, r4, r5, lr}
    b6ea:	4604      	mov	r4, r0
    b6ec:	460d      	mov	r5, r1
	keys = bt_keys_find(type, addr);
    b6ee:	f7ff ffeb 	bl	b6c8 <bt_keys_find>
	if (keys) {
    b6f2:	b930      	cbnz	r0, b702 <bt_keys_get_type+0x1a>
	keys = bt_keys_get_addr(addr);
    b6f4:	4628      	mov	r0, r5
    b6f6:	f7ff ffbf 	bl	b678 <bt_keys_get_addr>
	if (!keys) {
    b6fa:	b110      	cbz	r0, b702 <bt_keys_get_type+0x1a>
	keys->keys |= type;
    b6fc:	8983      	ldrh	r3, [r0, #12]
    b6fe:	431c      	orrs	r4, r3
    b700:	8184      	strh	r4, [r0, #12]
}
    b702:	bd38      	pop	{r3, r4, r5, pc}

0000b704 <bt_keys_find_irk>:
{
    b704:	b570      	push	{r4, r5, r6, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
    b706:	7803      	ldrb	r3, [r0, #0]
    b708:	2b01      	cmp	r3, #1
    b70a:	4605      	mov	r5, r0
    b70c:	d001      	beq.n	b712 <bt_keys_find_irk+0xe>
		return NULL;
    b70e:	2000      	movs	r0, #0
    b710:	bd70      	pop	{r4, r5, r6, pc}
	if (!bt_addr_le_is_rpa(addr)) {
    b712:	7983      	ldrb	r3, [r0, #6]
    b714:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    b718:	2b40      	cmp	r3, #64	; 0x40
    b71a:	d1f8      	bne.n	b70e <bt_keys_find_irk+0xa>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    b71c:	4c10      	ldr	r4, [pc, #64]	; (b760 <bt_keys_find_irk+0x5c>)
    b71e:	89a3      	ldrh	r3, [r4, #12]
    b720:	f013 0f02 	tst.w	r3, #2
    b724:	4626      	mov	r6, r4
    b726:	d110      	bne.n	b74a <bt_keys_find_irk+0x46>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    b728:	89b3      	ldrh	r3, [r6, #12]
    b72a:	079b      	lsls	r3, r3, #30
    b72c:	d5ef      	bpl.n	b70e <bt_keys_find_irk+0xa>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
    b72e:	3501      	adds	r5, #1
    b730:	4629      	mov	r1, r5
    b732:	480c      	ldr	r0, [pc, #48]	; (b764 <bt_keys_find_irk+0x60>)
    b734:	f7f7 fe55 	bl	33e2 <bt_rpa_irk_matches>
    b738:	2800      	cmp	r0, #0
    b73a:	d0e8      	beq.n	b70e <bt_keys_find_irk+0xa>
	memcpy(dst, src, sizeof(*dst));
    b73c:	2206      	movs	r2, #6
    b73e:	4629      	mov	r1, r5
    b740:	4809      	ldr	r0, [pc, #36]	; (b768 <bt_keys_find_irk+0x64>)
    b742:	f7f5 f826 	bl	792 <memcpy>
			return &key_pool[i];
    b746:	4806      	ldr	r0, [pc, #24]	; (b760 <bt_keys_find_irk+0x5c>)
    b748:	bd70      	pop	{r4, r5, r6, pc}
	return memcmp(a, b, sizeof(*a));
    b74a:	2206      	movs	r2, #6
    b74c:	f104 0140 	add.w	r1, r4, #64	; 0x40
    b750:	3001      	adds	r0, #1
    b752:	f7f4 fff1 	bl	738 <memcmp>
		if (!bt_addr_cmp(&addr->a, &key_pool[i].irk.rpa)) {
    b756:	2800      	cmp	r0, #0
    b758:	d1e6      	bne.n	b728 <bt_keys_find_irk+0x24>
			return &key_pool[i];
    b75a:	4620      	mov	r0, r4
}
    b75c:	bd70      	pop	{r4, r5, r6, pc}
    b75e:	bf00      	nop
    b760:	20000940 	.word	0x20000940
    b764:	20000970 	.word	0x20000970
    b768:	20000980 	.word	0x20000980

0000b76c <bt_keys_find_addr>:
	return memcmp(a, b, sizeof(*a));
    b76c:	4601      	mov	r1, r0
{
    b76e:	b508      	push	{r3, lr}
    b770:	2207      	movs	r2, #7
    b772:	4804      	ldr	r0, [pc, #16]	; (b784 <bt_keys_find_addr+0x18>)
    b774:	f7f4 ffe0 	bl	738 <memcmp>
		if (!bt_addr_le_cmp(&key_pool[i].addr, addr)) {
    b778:	2800      	cmp	r0, #0
}
    b77a:	4802      	ldr	r0, [pc, #8]	; (b784 <bt_keys_find_addr+0x18>)
    b77c:	bf18      	it	ne
    b77e:	2000      	movne	r0, #0
    b780:	bd08      	pop	{r3, pc}
    b782:	bf00      	nop
    b784:	20000940 	.word	0x20000940

0000b788 <bt_keys_add_type>:
	keys->keys |= type;
    b788:	8983      	ldrh	r3, [r0, #12]
    b78a:	4319      	orrs	r1, r3
    b78c:	8181      	strh	r1, [r0, #12]
    b78e:	4770      	bx	lr

0000b790 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
    b790:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	*mem_head = mem_pool;
    b792:	6018      	str	r0, [r3, #0]

	/* Store free mem_count after the list's next pointer at an aligned
	 * memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    b794:	1dc3      	adds	r3, r0, #7
{
    b796:	4605      	mov	r5, r0
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    b798:	f023 0303 	bic.w	r3, r3, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    b79c:	1e50      	subs	r0, r2, #1
{
    b79e:	460e      	mov	r6, r1
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    b7a0:	b280      	uxth	r0, r0
{
    b7a2:	4614      	mov	r4, r2
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    b7a4:	801a      	strh	r2, [r3, #0]
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    b7a6:	2100      	movs	r1, #0
    b7a8:	2204      	movs	r2, #4
    b7aa:	fb06 5000 	mla	r0, r6, r0, r5
    b7ae:	f7f5 f81c 	bl	7ea <memset>
    b7b2:	3c02      	subs	r4, #2
    b7b4:	b2a4      	uxth	r4, r4
	       sizeof(mem_pool));
	while (mem_count--) {
    b7b6:	f64f 77ff 	movw	r7, #65535	; 0xffff
    b7ba:	42bc      	cmp	r4, r7
    b7bc:	d101      	bne.n	b7c2 <mem_init+0x32>
		next = (u32_t)((u8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
		       (void *)&next, sizeof(next));
	}
}
    b7be:	b003      	add	sp, #12
    b7c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			       (mem_size * (mem_count + 1)));
    b7c2:	fb04 6006 	mla	r0, r4, r6, r6
		next = (u32_t)((u8_t *) mem_pool +
    b7c6:	182b      	adds	r3, r5, r0
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    b7c8:	2204      	movs	r2, #4
    b7ca:	1b80      	subs	r0, r0, r6
    b7cc:	eb0d 0102 	add.w	r1, sp, r2
    b7d0:	4428      	add	r0, r5
    b7d2:	3c01      	subs	r4, #1
		next = (u32_t)((u8_t *) mem_pool +
    b7d4:	9301      	str	r3, [sp, #4]
    b7d6:	b2a4      	uxth	r4, r4
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    b7d8:	f7f4 ffdb 	bl	792 <memcpy>
    b7dc:	e7ed      	b.n	b7ba <mem_init+0x2a>

0000b7de <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    b7de:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (*mem_head) {
    b7e0:	6805      	ldr	r5, [r0, #0]
{
    b7e2:	4606      	mov	r6, r0
	if (*mem_head) {
    b7e4:	b195      	cbz	r5, b80c <mem_acquire+0x2e>
		u16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    b7e6:	1deb      	adds	r3, r5, #7
    b7e8:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    b7ec:	2204      	movs	r2, #4
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    b7ee:	881c      	ldrh	r4, [r3, #0]
		memcpy(&head, mem, sizeof(head));
    b7f0:	4629      	mov	r1, r5
    b7f2:	eb0d 0002 	add.w	r0, sp, r2
    b7f6:	f7f4 ffcc 	bl	792 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    b7fa:	9b01      	ldr	r3, [sp, #4]
		free_count--;
    b7fc:	3c01      	subs	r4, #1
    b7fe:	b2a4      	uxth	r4, r4
		if (head) {
    b800:	b11b      	cbz	r3, b80a <mem_acquire+0x2c>
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
    b802:	1dda      	adds	r2, r3, #7
    b804:	f022 0203 	bic.w	r2, r2, #3
    b808:	8014      	strh	r4, [r2, #0]
				free_count;
		}

		*mem_head = head;
    b80a:	6033      	str	r3, [r6, #0]
		return mem;
	}

	return NULL;
}
    b80c:	4628      	mov	r0, r5
    b80e:	b002      	add	sp, #8
    b810:	bd70      	pop	{r4, r5, r6, pc}

0000b812 <mem_release>:

void mem_release(void *mem, void **mem_head)
{
    b812:	b570      	push	{r4, r5, r6, lr}
	u16_t free_count = 0;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    b814:	680c      	ldr	r4, [r1, #0]
{
    b816:	4606      	mov	r6, r0
    b818:	460d      	mov	r5, r1
	if (*mem_head) {
    b81a:	b11c      	cbz	r4, b824 <mem_release+0x12>
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    b81c:	1de3      	adds	r3, r4, #7
    b81e:	f023 0303 	bic.w	r3, r3, #3
    b822:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
    b824:	2204      	movs	r2, #4
    b826:	4629      	mov	r1, r5
    b828:	4630      	mov	r0, r6
    b82a:	f7f4 ffb2 	bl	792 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    b82e:	1df2      	adds	r2, r6, #7
    b830:	f022 0203 	bic.w	r2, r2, #3
	free_count++;
    b834:	1c63      	adds	r3, r4, #1
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    b836:	8013      	strh	r3, [r2, #0]

	*mem_head = mem;
    b838:	602e      	str	r6, [r5, #0]
    b83a:	bd70      	pop	{r4, r5, r6, pc}

0000b83c <mem_free_count_get>:
u16_t mem_free_count_get(void *mem_head)
{
	u16_t free_count = 0;

	/* Get the free count from the list */
	if (mem_head) {
    b83c:	b118      	cbz	r0, b846 <mem_free_count_get+0xa>
		free_count = *((u16_t *)MROUND((u8_t *)mem_head +
    b83e:	3007      	adds	r0, #7
    b840:	f020 0003 	bic.w	r0, r0, #3
    b844:	8800      	ldrh	r0, [r0, #0]
					       sizeof(mem_head)));
	}

	return free_count;
}
    b846:	4770      	bx	lr

0000b848 <mem_get>:

void *mem_get(void *mem_pool, u16_t mem_size, u16_t index)
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
}
    b848:	fb02 0001 	mla	r0, r2, r1, r0
    b84c:	4770      	bx	lr

0000b84e <mem_index_get>:

u16_t mem_index_get(void *mem, void *mem_pool, u16_t mem_size)
{
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
    b84e:	1a40      	subs	r0, r0, r1
    b850:	b280      	uxth	r0, r0
}
    b852:	fbb0 f0f2 	udiv	r0, r0, r2
    b856:	4770      	bx	lr

0000b858 <mem_rcopy>:

void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
    b858:	b510      	push	{r4, lr}
	src += len;
    b85a:	4411      	add	r1, r2
    b85c:	3801      	subs	r0, #1
	while (len--) {
    b85e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b862:	3a01      	subs	r2, #1
    b864:	b292      	uxth	r2, r2
    b866:	429a      	cmp	r2, r3
    b868:	d100      	bne.n	b86c <mem_rcopy+0x14>
		*dst++ = *--src;
	}
}
    b86a:	bd10      	pop	{r4, pc}
		*dst++ = *--src;
    b86c:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
    b870:	f800 4f01 	strb.w	r4, [r0, #1]!
    b874:	e7f5      	b.n	b862 <mem_rcopy+0xa>

0000b876 <mem_nz>:

u8_t mem_nz(u8_t *src, u16_t len)
{
    b876:	4401      	add	r1, r0
	while (len--) {
    b878:	4288      	cmp	r0, r1
    b87a:	d101      	bne.n	b880 <mem_nz+0xa>
		if (*src++) {
			return 1;
		}
	}

	return 0;
    b87c:	2000      	movs	r0, #0
    b87e:	4770      	bx	lr
		if (*src++) {
    b880:	f810 3b01 	ldrb.w	r3, [r0], #1
    b884:	2b00      	cmp	r3, #0
    b886:	d0f7      	beq.n	b878 <mem_nz+0x2>
			return 1;
    b888:	2001      	movs	r0, #1
}
    b88a:	4770      	bx	lr

0000b88c <memq_init>:
inline memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem);

memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* head and tail pointer to the initial link */
	*head = *tail = link;
    b88c:	6010      	str	r0, [r2, #0]
    b88e:	6008      	str	r0, [r1, #0]

	return link;
}
    b890:	4770      	bx	lr

0000b892 <memq_enqueue>:

memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
    b892:	b510      	push	{r4, lr}
	/* make the current tail link's next point to new link */
	(*tail)->next = link;
    b894:	6814      	ldr	r4, [r2, #0]
    b896:	6020      	str	r0, [r4, #0]

	/* assign mem to current tail link's mem */
	(*tail)->mem = mem;
    b898:	6814      	ldr	r4, [r2, #0]
    b89a:	6061      	str	r1, [r4, #4]

	/* increment the tail! */
	*tail = link;
    b89c:	6010      	str	r0, [r2, #0]

	return link;
}
    b89e:	bd10      	pop	{r4, pc}

0000b8a0 <memq_peek>:

memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* if head and tail are equal, then queue empty */
	if (head == tail) {
    b8a0:	4288      	cmp	r0, r1
    b8a2:	d003      	beq.n	b8ac <memq_peek+0xc>
		return NULL;
	}

	/* extract the link's mem */
	if (mem) {
    b8a4:	b11a      	cbz	r2, b8ae <memq_peek+0xe>
		*mem = head->mem;
    b8a6:	6843      	ldr	r3, [r0, #4]
    b8a8:	6013      	str	r3, [r2, #0]
    b8aa:	4770      	bx	lr
		return NULL;
    b8ac:	2000      	movs	r0, #0
	}

	return head;
}
    b8ae:	4770      	bx	lr

0000b8b0 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *link;

	/* use memq peek to get the link and mem */
	link = memq_peek(*head, tail, mem);
    b8b0:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    b8b2:	4283      	cmp	r3, r0
    b8b4:	d009      	beq.n	b8ca <memq_dequeue+0x1a>
	if (mem) {
    b8b6:	b122      	cbz	r2, b8c2 <memq_dequeue+0x12>
		*mem = head->mem;
    b8b8:	6858      	ldr	r0, [r3, #4]
    b8ba:	6010      	str	r0, [r2, #0]
	if (!link) {
		return link;
	}

	/* increment the head to next link node */
	*head = link->next;
    b8bc:	681a      	ldr	r2, [r3, #0]
    b8be:	600a      	str	r2, [r1, #0]

	return link;
    b8c0:	e001      	b.n	b8c6 <memq_dequeue+0x16>
	if (!link) {
    b8c2:	2b00      	cmp	r3, #0
    b8c4:	d1fa      	bne.n	b8bc <memq_dequeue+0xc>
}
    b8c6:	4618      	mov	r0, r3
    b8c8:	4770      	bx	lr
		return NULL;
    b8ca:	2300      	movs	r3, #0
    b8cc:	e7fb      	b.n	b8c6 <memq_dequeue+0x16>
	...

0000b8d0 <mayfly_init>:
} mft[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

static memq_link_t mfl[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

void mayfly_init(void)
{
    b8d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (callee_id--) {
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(&mfl[callee_id][caller_id],
    b8d4:	4f11      	ldr	r7, [pc, #68]	; (b91c <mayfly_init+0x4c>)
    b8d6:	f8df 9048 	ldr.w	r9, [pc, #72]	; b920 <mayfly_init+0x50>
	callee_id = MAYFLY_CALLEE_COUNT;
    b8da:	2604      	movs	r6, #4
	while (callee_id--) {
    b8dc:	3e01      	subs	r6, #1
    b8de:	b2f6      	uxtb	r6, r6
    b8e0:	2eff      	cmp	r6, #255	; 0xff
    b8e2:	d019      	beq.n	b918 <mayfly_init+0x48>
    b8e4:	b233      	sxth	r3, r6
    b8e6:	ea4f 0883 	mov.w	r8, r3, lsl #2
    b8ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    b8ee:	011d      	lsls	r5, r3, #4
    b8f0:	2404      	movs	r4, #4
    b8f2:	f04f 0a0c 	mov.w	sl, #12
    b8f6:	e00a      	b.n	b90e <mayfly_init+0x3e>
    b8f8:	fb1a 5104 	smlabb	r1, sl, r4, r5
			memq_init(&mfl[callee_id][caller_id],
    b8fc:	1d0a      	adds	r2, r1, #4
    b8fe:	eb04 0008 	add.w	r0, r4, r8
    b902:	443a      	add	r2, r7
    b904:	4439      	add	r1, r7
    b906:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
    b90a:	f7ff ffbf 	bl	b88c <memq_init>
		while (caller_id--) {
    b90e:	3c01      	subs	r4, #1
    b910:	b2e4      	uxtb	r4, r4
    b912:	2cff      	cmp	r4, #255	; 0xff
    b914:	d1f0      	bne.n	b8f8 <mayfly_init+0x28>
    b916:	e7e1      	b.n	b8dc <mayfly_init+0xc>
    b918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b91c:	20000a28 	.word	0x20000a28
    b920:	200009a8 	.word	0x200009a8

0000b924 <mayfly_enable>:
		}
	}
}

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
    b924:	b4f0      	push	{r4, r5, r6, r7}
    b926:	4b12      	ldr	r3, [pc, #72]	; (b970 <mayfly_enable+0x4c>)
    b928:	4605      	mov	r5, r0
    b92a:	460f      	mov	r7, r1
    b92c:	260c      	movs	r6, #12
    b92e:	2430      	movs	r4, #48	; 0x30
	if (enable) {
    b930:	b172      	cbz	r2, b950 <mayfly_enable+0x2c>
		if (mft[callee_id][caller_id].enable_req ==
    b932:	4361      	muls	r1, r4
    b934:	fb06 1400 	mla	r4, r6, r0, r1
    b938:	4423      	add	r3, r4
    b93a:	7a59      	ldrb	r1, [r3, #9]
    b93c:	7a18      	ldrb	r0, [r3, #8]
    b93e:	4281      	cmp	r1, r0
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    b940:	bf04      	itt	eq
    b942:	3101      	addeq	r1, #1
    b944:	7219      	strbeq	r1, [r3, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    b946:	4628      	mov	r0, r5
    b948:	4639      	mov	r1, r7
			mft[callee_id][caller_id].disable_req++;

			mayfly_pend(caller_id, callee_id);
		}
	}
}
    b94a:	bcf0      	pop	{r4, r5, r6, r7}
		mayfly_enable_cb(caller_id, callee_id, enable);
    b94c:	f00d baf8 	b.w	18f40 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
    b950:	434c      	muls	r4, r1
    b952:	fb06 4400 	mla	r4, r6, r0, r4
    b956:	4423      	add	r3, r4
    b958:	7a9c      	ldrb	r4, [r3, #10]
    b95a:	7ada      	ldrb	r2, [r3, #11]
    b95c:	42a2      	cmp	r2, r4
    b95e:	d104      	bne.n	b96a <mayfly_enable+0x46>
			mft[callee_id][caller_id].disable_req++;
    b960:	3201      	adds	r2, #1
    b962:	729a      	strb	r2, [r3, #10]
}
    b964:	bcf0      	pop	{r4, r5, r6, r7}
			mayfly_pend(caller_id, callee_id);
    b966:	f00d bb4b 	b.w	19000 <mayfly_pend>
}
    b96a:	bcf0      	pop	{r4, r5, r6, r7}
    b96c:	4770      	bx	lr
    b96e:	bf00      	nop
    b970:	20000a28 	.word	0x20000a28

0000b974 <mayfly_enqueue>:

u32_t mayfly_enqueue(u8_t caller_id, u8_t callee_id, u8_t chain,
			struct mayfly *m)
{
    b974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b976:	4605      	mov	r5, r0
    b978:	460e      	mov	r6, r1
    b97a:	461c      	mov	r4, r3
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    b97c:	b18a      	cbz	r2, b9a2 <mayfly_enqueue+0x2e>
    b97e:	2301      	movs	r3, #1
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
    b980:	7862      	ldrb	r2, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    b982:	7820      	ldrb	r0, [r4, #0]
    b984:	1a80      	subs	r0, r0, r2
	if (state != 0) {
    b986:	f010 0703 	ands.w	r7, r0, #3
    b98a:	d029      	beq.n	b9e0 <mayfly_enqueue+0x6c>
		if (chain) {
    b98c:	b303      	cbz	r3, b9d0 <mayfly_enqueue+0x5c>
			if (state != 1) {
    b98e:	2f01      	cmp	r7, #1
    b990:	d039      	beq.n	ba06 <mayfly_enqueue+0x92>
				/* mark as ready in queue */
				m->_req = ack + 1;
    b992:	3201      	adds	r2, #1
    b994:	b2d2      	uxtb	r2, r2
    b996:	7022      	strb	r2, [r4, #0]
	/* new, add as ready in the queue */
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    b998:	4631      	mov	r1, r6
    b99a:	4628      	mov	r0, r5
    b99c:	f00d fb30 	bl	19000 <mayfly_pend>
    b9a0:	e01c      	b.n	b9dc <mayfly_enqueue+0x68>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    b9a2:	f00d fb1b 	bl	18fdc <mayfly_prio_is_equal>
    b9a6:	2800      	cmp	r0, #0
    b9a8:	d0e9      	beq.n	b97e <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
    b9aa:	4631      	mov	r1, r6
    b9ac:	4628      	mov	r0, r5
    b9ae:	f00d faef 	bl	18f90 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    b9b2:	2800      	cmp	r0, #0
    b9b4:	d0e3      	beq.n	b97e <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
    b9b6:	2330      	movs	r3, #48	; 0x30
    b9b8:	220c      	movs	r2, #12
    b9ba:	4373      	muls	r3, r6
    b9bc:	fb02 3305 	mla	r3, r2, r5, r3
    b9c0:	4a12      	ldr	r2, [pc, #72]	; (ba0c <mayfly_enqueue+0x98>)
    b9c2:	441a      	add	r2, r3
		!mayfly_is_enabled(caller_id, callee_id) ||
    b9c4:	7a93      	ldrb	r3, [r2, #10]
    b9c6:	7ad2      	ldrb	r2, [r2, #11]
    b9c8:	1a9b      	subs	r3, r3, r2
    b9ca:	bf18      	it	ne
    b9cc:	2301      	movne	r3, #1
    b9ce:	e7d7      	b.n	b980 <mayfly_enqueue+0xc>
		m->_req = ack + 2;
    b9d0:	3202      	adds	r2, #2
    b9d2:	b2d2      	uxtb	r2, r2
    b9d4:	7022      	strb	r2, [r4, #0]
		m->fp(m->param);
    b9d6:	68e3      	ldr	r3, [r4, #12]
    b9d8:	68a0      	ldr	r0, [r4, #8]
    b9da:	4798      	blx	r3
		return 0;
    b9dc:	2000      	movs	r0, #0
    b9de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!chain) {
    b9e0:	2b00      	cmp	r3, #0
    b9e2:	d0f8      	beq.n	b9d6 <mayfly_enqueue+0x62>
	m->_req = ack + 1;
    b9e4:	3201      	adds	r2, #1
    b9e6:	b2d2      	uxtb	r2, r2
    b9e8:	7022      	strb	r2, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    b9ea:	2304      	movs	r3, #4
    b9ec:	2230      	movs	r2, #48	; 0x30
    b9ee:	fb12 3206 	smlabb	r2, r2, r6, r3
    b9f2:	230c      	movs	r3, #12
    b9f4:	fb13 2305 	smlabb	r3, r3, r5, r2
    b9f8:	4a04      	ldr	r2, [pc, #16]	; (ba0c <mayfly_enqueue+0x98>)
    b9fa:	6860      	ldr	r0, [r4, #4]
    b9fc:	441a      	add	r2, r3
    b9fe:	4621      	mov	r1, r4
    ba00:	f7ff ff47 	bl	b892 <memq_enqueue>
    ba04:	e7c8      	b.n	b998 <mayfly_enqueue+0x24>
			return 1;
    ba06:	4638      	mov	r0, r7

	return 0;
}
    ba08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ba0a:	bf00      	nop
    ba0c:	20000a28 	.word	0x20000a28

0000ba10 <mayfly_run>:

void mayfly_run(u8_t callee_id)
{
    ba10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ba14:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    ba18:	b089      	sub	sp, #36	; 0x24
    ba1a:	011b      	lsls	r3, r3, #4
	u8_t disable = 0;
	u8_t enable = 0;
    ba1c:	f04f 0800 	mov.w	r8, #0
	while (caller_id--) {
		memq_link_t *link;
		struct mayfly *m = 0;

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
    ba20:	4e43      	ldr	r6, [pc, #268]	; (bb30 <mayfly_run+0x120>)
    ba22:	9304      	str	r3, [sp, #16]
{
    ba24:	4605      	mov	r5, r0
	caller_id = MAYFLY_CALLER_COUNT;
    ba26:	2404      	movs	r4, #4
	u8_t disable = 0;
    ba28:	f8cd 8004 	str.w	r8, [sp, #4]
	while (caller_id--) {
    ba2c:	3c01      	subs	r4, #1
    ba2e:	b2e4      	uxtb	r4, r4
    ba30:	2cff      	cmp	r4, #255	; 0xff
    ba32:	d10b      	bne.n	ba4c <mayfly_run+0x3c>
			mft[callee_id][caller_id].enable_ack =
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    ba34:	9b01      	ldr	r3, [sp, #4]
    ba36:	2b00      	cmp	r3, #0
    ba38:	d076      	beq.n	bb28 <mayfly_run+0x118>
    ba3a:	f1b8 0f00 	cmp.w	r8, #0
    ba3e:	d173      	bne.n	bb28 <mayfly_run+0x118>
		mayfly_enable_cb(callee_id, callee_id, 0);
    ba40:	4642      	mov	r2, r8
    ba42:	4629      	mov	r1, r5
    ba44:	4628      	mov	r0, r5
    ba46:	f00d fa7b 	bl	18f40 <mayfly_enable_cb>
    ba4a:	e06d      	b.n	bb28 <mayfly_run+0x118>
		struct mayfly *m = 0;
    ba4c:	f10d 0b20 	add.w	fp, sp, #32
    ba50:	2300      	movs	r3, #0
		link = memq_peek(mft[callee_id][caller_id].head,
    ba52:	270c      	movs	r7, #12
		struct mayfly *m = 0;
    ba54:	f84b 3d04 	str.w	r3, [fp, #-4]!
		link = memq_peek(mft[callee_id][caller_id].head,
    ba58:	f04f 0930 	mov.w	r9, #48	; 0x30
    ba5c:	fb07 f304 	mul.w	r3, r7, r4
    ba60:	fb09 3005 	mla	r0, r9, r5, r3
    ba64:	1831      	adds	r1, r6, r0
    ba66:	465a      	mov	r2, fp
    ba68:	6849      	ldr	r1, [r1, #4]
    ba6a:	5830      	ldr	r0, [r6, r0]
    ba6c:	9302      	str	r3, [sp, #8]
    ba6e:	f7ff ff17 	bl	b8a0 <memq_peek>
				memq_dequeue(mft[callee_id][caller_id].tail,
    ba72:	9b04      	ldr	r3, [sp, #16]
    ba74:	fb17 3704 	smlabb	r7, r7, r4, r3
    ba78:	19f3      	adds	r3, r6, r7
		link = memq_peek(mft[callee_id][caller_id].head,
    ba7a:	4682      	mov	sl, r0
				memq_dequeue(mft[callee_id][caller_id].tail,
    ba7c:	9303      	str	r3, [sp, #12]
		while (link) {
    ba7e:	f1ba 0f00 	cmp.w	sl, #0
    ba82:	d119      	bne.n	bab8 <mayfly_run+0xa8>
		if (mft[callee_id][caller_id].disable_req !=
    ba84:	2230      	movs	r2, #48	; 0x30
    ba86:	230c      	movs	r3, #12
    ba88:	436a      	muls	r2, r5
    ba8a:	fb03 2204 	mla	r2, r3, r4, r2
    ba8e:	4432      	add	r2, r6
    ba90:	7a91      	ldrb	r1, [r2, #10]
    ba92:	7ad0      	ldrb	r0, [r2, #11]
    ba94:	4288      	cmp	r0, r1
			mft[callee_id][caller_id].disable_ack =
    ba96:	bf1e      	ittt	ne
    ba98:	72d1      	strbne	r1, [r2, #11]
			disable = 1;
    ba9a:	2201      	movne	r2, #1
    ba9c:	9201      	strne	r2, [sp, #4]
		if (mft[callee_id][caller_id].enable_req !=
    ba9e:	2230      	movs	r2, #48	; 0x30
    baa0:	436a      	muls	r2, r5
    baa2:	fb03 2304 	mla	r3, r3, r4, r2
    baa6:	4433      	add	r3, r6
    baa8:	7a1a      	ldrb	r2, [r3, #8]
    baaa:	7a59      	ldrb	r1, [r3, #9]
    baac:	4291      	cmp	r1, r2
			mft[callee_id][caller_id].enable_ack =
    baae:	bf1c      	itt	ne
    bab0:	725a      	strbne	r2, [r3, #9]
			enable = 1;
    bab2:	f04f 0801 	movne.w	r8, #1
    bab6:	e7b9      	b.n	ba2c <mayfly_run+0x1c>
			req = m->_req;
    bab8:	9b07      	ldr	r3, [sp, #28]
    baba:	781f      	ldrb	r7, [r3, #0]
			state = (req - m->_ack) & 0x03;
    babc:	785a      	ldrb	r2, [r3, #1]
    babe:	1abf      	subs	r7, r7, r2
    bac0:	f007 0703 	and.w	r7, r7, #3
			if (state == 1) {
    bac4:	2f01      	cmp	r7, #1
    bac6:	d104      	bne.n	bad2 <mayfly_run+0xc2>
				m->_ack--;
    bac8:	3a01      	subs	r2, #1
    baca:	705a      	strb	r2, [r3, #1]
				m->fp(m->param);
    bacc:	6898      	ldr	r0, [r3, #8]
    bace:	68da      	ldr	r2, [r3, #12]
    bad0:	4790      	blx	r2
			req = m->_req;
    bad2:	9a07      	ldr	r2, [sp, #28]
    bad4:	7813      	ldrb	r3, [r2, #0]
			if (((req - m->_ack) & 0x03) != 1) {
    bad6:	7852      	ldrb	r2, [r2, #1]
			req = m->_req;
    bad8:	b2db      	uxtb	r3, r3
			if (((req - m->_ack) & 0x03) != 1) {
    bada:	1a9a      	subs	r2, r3, r2
    badc:	f002 0203 	and.w	r2, r2, #3
    bae0:	2a01      	cmp	r2, #1
    bae2:	9305      	str	r3, [sp, #20]
    bae4:	d00d      	beq.n	bb02 <mayfly_run+0xf2>
				memq_dequeue(mft[callee_id][caller_id].tail,
    bae6:	9b02      	ldr	r3, [sp, #8]
    bae8:	9903      	ldr	r1, [sp, #12]
    baea:	fb09 3005 	mla	r0, r9, r5, r3
    baee:	4430      	add	r0, r6
    baf0:	2200      	movs	r2, #0
    baf2:	6840      	ldr	r0, [r0, #4]
    baf4:	f7ff fedc 	bl	b8b0 <memq_dequeue>
				m->_link = link;
    baf8:	9a07      	ldr	r2, [sp, #28]
				m->_ack = req;
    bafa:	9b05      	ldr	r3, [sp, #20]
				m->_link = link;
    bafc:	f8c2 a004 	str.w	sl, [r2, #4]
				m->_ack = req;
    bb00:	7053      	strb	r3, [r2, #1]
			link = memq_peek(mft[callee_id][caller_id].head,
    bb02:	9b02      	ldr	r3, [sp, #8]
    bb04:	fb09 3305 	mla	r3, r9, r5, r3
    bb08:	18f1      	adds	r1, r6, r3
    bb0a:	465a      	mov	r2, fp
    bb0c:	6849      	ldr	r1, [r1, #4]
    bb0e:	58f0      	ldr	r0, [r6, r3]
    bb10:	f7ff fec6 	bl	b8a0 <memq_peek>
			if (state == 1) {
    bb14:	2f01      	cmp	r7, #1
			link = memq_peek(mft[callee_id][caller_id].head,
    bb16:	4682      	mov	sl, r0
			if (state == 1) {
    bb18:	d1b1      	bne.n	ba7e <mayfly_run+0x6e>
				if (caller_id || link) {
    bb1a:	b90c      	cbnz	r4, bb20 <mayfly_run+0x110>
    bb1c:	2800      	cmp	r0, #0
    bb1e:	d0b1      	beq.n	ba84 <mayfly_run+0x74>
					mayfly_pend(callee_id, callee_id);
    bb20:	4629      	mov	r1, r5
    bb22:	4628      	mov	r0, r5
    bb24:	f00d fa6c 	bl	19000 <mayfly_pend>
	}
}
    bb28:	b009      	add	sp, #36	; 0x24
    bb2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bb2e:	bf00      	nop
    bb30:	20000a28 	.word	0x20000a28

0000bb34 <util_ones_count_get>:

#include <zephyr/types.h>
#include "util.h"

u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
    bb34:	b510      	push	{r4, lr}
    bb36:	1e42      	subs	r2, r0, #1
	u8_t one_count = 0;
    bb38:	2000      	movs	r0, #0

	while (octets_len--) {
    bb3a:	3901      	subs	r1, #1
    bb3c:	b2c9      	uxtb	r1, r1
    bb3e:	29ff      	cmp	r1, #255	; 0xff
    bb40:	d100      	bne.n	bb44 <util_ones_count_get+0x10>
		}
		octets++;
	}

	return one_count;
}
    bb42:	bd10      	pop	{r4, pc}
		bite = *octets;
    bb44:	f812 3f01 	ldrb.w	r3, [r2, #1]!
		while (bite) {
    bb48:	2b00      	cmp	r3, #0
    bb4a:	d0f6      	beq.n	bb3a <util_ones_count_get+0x6>
			bite &= (bite - 1);
    bb4c:	1e5c      	subs	r4, r3, #1
			one_count++;
    bb4e:	3001      	adds	r0, #1
			bite &= (bite - 1);
    bb50:	4023      	ands	r3, r4
			one_count++;
    bb52:	b2c0      	uxtb	r0, r0
    bb54:	e7f8      	b.n	bb48 <util_ones_count_get+0x14>

0000bb56 <ticker_dequeue>:

	return id;
}

static u32_t ticker_dequeue(struct ticker_instance *instance, u8_t id)
{
    bb56:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t current;
	u32_t total;

	/* find the ticker's position in ticker list */
	node = &instance->node[0];
	previous = instance->ticker_id_head;
    bb58:	7f43      	ldrb	r3, [r0, #29]
	node = &instance->node[0];
    bb5a:	6805      	ldr	r5, [r0, #0]
	current = previous;
    bb5c:	461a      	mov	r2, r3
	total = 0;
    bb5e:	2400      	movs	r4, #0
	ticker_current = 0;
	while (current != TICKER_NULL) {
    bb60:	2aff      	cmp	r2, #255	; 0xff
    bb62:	d101      	bne.n	bb68 <ticker_dequeue+0x12>
		current = ticker_current->next;
	}

	/* ticker not in active list */
	if (current == TICKER_NULL) {
		return 0;
    bb64:	2000      	movs	r0, #0
    bb66:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ticker_current = &node[current];
    bb68:	eb02 0782 	add.w	r7, r2, r2, lsl #2
		if (current == id) {
    bb6c:	428a      	cmp	r2, r1
		ticker_current = &node[current];
    bb6e:	eb05 06c7 	add.w	r6, r5, r7, lsl #3
    bb72:	f815 7037 	ldrb.w	r7, [r5, r7, lsl #3]
		if (current == id) {
    bb76:	d004      	beq.n	bb82 <ticker_dequeue+0x2c>
		total += ticker_current->ticks_to_expire;
    bb78:	68b3      	ldr	r3, [r6, #8]
    bb7a:	441c      	add	r4, r3
		current = ticker_current->next;
    bb7c:	4613      	mov	r3, r2
    bb7e:	463a      	mov	r2, r7
    bb80:	e7ee      	b.n	bb60 <ticker_dequeue+0xa>
	}

	/* ticker is the first in the list */
	if (previous == current) {
    bb82:	4293      	cmp	r3, r2
    bb84:	d100      	bne.n	bb88 <ticker_dequeue+0x32>
		instance->ticker_id_head = ticker_current->next;
    bb86:	7747      	strb	r7, [r0, #29]
	timeout = ticker_current->ticks_to_expire;

	/* link previous ticker with next of this ticker
	 * i.e. removing the ticker from list
	 */
	node[previous].next = ticker_current->next;
    bb88:	b21b      	sxth	r3, r3
    bb8a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    bb8e:	7832      	ldrb	r2, [r6, #0]
	timeout = ticker_current->ticks_to_expire;
    bb90:	68b0      	ldr	r0, [r6, #8]
	node[previous].next = ticker_current->next;
    bb92:	f805 2033 	strb.w	r2, [r5, r3, lsl #3]

	/* if this is not the last ticker, increment the
	 * next ticker by this ticker timeout
	 */
	if (ticker_current->next != TICKER_NULL) {
    bb96:	7833      	ldrb	r3, [r6, #0]
    bb98:	2bff      	cmp	r3, #255	; 0xff
    bb9a:	d006      	beq.n	bbaa <ticker_dequeue+0x54>
		node[ticker_current->next].ticks_to_expire += timeout;
    bb9c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    bba0:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    bba4:	689a      	ldr	r2, [r3, #8]
    bba6:	4402      	add	r2, r0
    bba8:	609a      	str	r2, [r3, #8]
	}

	return (total + timeout);
    bbaa:	4420      	add	r0, r4
    bbac:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000bbae <ticks_to_expire_prep>:
			   instance);
}

static void ticks_to_expire_prep(struct ticker_node *ticker,
				 u32_t ticks_current, u32_t ticks_at_start)
{
    bbae:	b530      	push	{r4, r5, lr}
	u32_t ticks_to_expire = ticker->ticks_to_expire;
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    bbb0:	1a55      	subs	r5, r2, r1
    bbb2:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
	u32_t ticks_to_expire = ticker->ticks_to_expire;
    bbb6:	6883      	ldr	r3, [r0, #8]
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
    bbb8:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    bbba:	d109      	bne.n	bbd0 <ticks_to_expire_prep+0x22>
	return cntr_cnt_get();
}

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    bbbc:	f025 427f 	bic.w	r2, r5, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    bbc0:	441a      	add	r2, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
    bbc2:	42a2      	cmp	r2, r4
    bbc4:	d90e      	bls.n	bbe4 <ticks_to_expire_prep+0x36>
		ticks_to_expire -= ticks_to_expire_minus;
    bbc6:	1b12      	subs	r2, r2, r4
		ticks_to_expire_minus = 0;
    bbc8:	2400      	movs	r4, #0
	ticker->ticks_to_expire = ticks_to_expire;
    bbca:	6082      	str	r2, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    bbcc:	6144      	str	r4, [r0, #20]
    bbce:	bd30      	pop	{r4, r5, pc}
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    bbd0:	1a8a      	subs	r2, r1, r2
    bbd2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    bbd6:	4293      	cmp	r3, r2
    bbd8:	d901      	bls.n	bbde <ticks_to_expire_prep+0x30>
			ticks_to_expire -= delta_current_start;
    bbda:	1a9a      	subs	r2, r3, r2
    bbdc:	e7f1      	b.n	bbc2 <ticks_to_expire_prep+0x14>
    bbde:	4422      	add	r2, r4
			ticks_to_expire_minus +=
    bbe0:	1ad4      	subs	r4, r2, r3
			ticks_to_expire = 0;
    bbe2:	2200      	movs	r2, #0
		ticks_to_expire_minus -= ticks_to_expire;
    bbe4:	1aa4      	subs	r4, r4, r2
		ticks_to_expire = 0;
    bbe6:	2200      	movs	r2, #0
    bbe8:	e7ef      	b.n	bbca <ticks_to_expire_prep+0x1c>

0000bbea <ticker_job_op_cb>:
{
    bbea:	4603      	mov	r3, r0
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    bbec:	2200      	movs	r2, #0
    bbee:	701a      	strb	r2, [r3, #0]
	if (user_op->fp_op_func) {
    bbf0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	user_op->status = status;
    bbf2:	6259      	str	r1, [r3, #36]	; 0x24
{
    bbf4:	4608      	mov	r0, r1
	if (user_op->fp_op_func) {
    bbf6:	b10a      	cbz	r2, bbfc <ticker_job_op_cb+0x12>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    bbf8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    bbfa:	4710      	bx	r2
    bbfc:	4770      	bx	lr

0000bbfe <ticker_worker>:
{
    bbfe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (instance->job_guard) {
    bc02:	7f85      	ldrb	r5, [r0, #30]
	instance->worker_trigger = 1;
    bc04:	2301      	movs	r3, #1
{
    bc06:	4604      	mov	r4, r0
	instance->worker_trigger = 1;
    bc08:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
    bc0a:	2d00      	cmp	r5, #0
    bc0c:	d14c      	bne.n	bca8 <ticker_worker+0xaa>
	if (instance->ticker_id_head == TICKER_NULL) {
    bc0e:	7f43      	ldrb	r3, [r0, #29]
    bc10:	2bff      	cmp	r3, #255	; 0xff
    bc12:	d102      	bne.n	bc1a <ticker_worker+0x1c>
		instance->worker_trigger = 0;
    bc14:	77c5      	strb	r5, [r0, #31]
		return;
    bc16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
    bc1a:	f00c fc25 	bl	18468 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    bc1e:	6967      	ldr	r7, [r4, #20]
	ticker_id_head = instance->ticker_id_head;
    bc20:	7f66      	ldrb	r6, [r4, #29]
	node = &instance->node[0];
    bc22:	f8d4 8000 	ldr.w	r8, [r4]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    bc26:	1bc7      	subs	r7, r0, r7
    bc28:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
	while (ticker_id_head != TICKER_NULL) {
    bc2c:	2eff      	cmp	r6, #255	; 0xff
    bc2e:	d006      	beq.n	bc3e <ticker_worker+0x40>
		ticker = &node[ticker_id_head];
    bc30:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    bc34:	eb08 01c6 	add.w	r1, r8, r6, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    bc38:	688b      	ldr	r3, [r1, #8]
		if (ticks_elapsed < ticks_to_expire) {
    bc3a:	429f      	cmp	r7, r3
    bc3c:	d218      	bcs.n	bc70 <ticker_worker+0x72>
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
    bc3e:	7aa2      	ldrb	r2, [r4, #10]
    bc40:	7ae3      	ldrb	r3, [r4, #11]
    bc42:	4293      	cmp	r3, r2
    bc44:	d105      	bne.n	bc52 <ticker_worker+0x54>
		last = instance->ticks_elapsed_last + 1;
    bc46:	3301      	adds	r3, #1
    bc48:	b2db      	uxtb	r3, r3
			last = 0;
    bc4a:	2b02      	cmp	r3, #2
    bc4c:	bf08      	it	eq
    bc4e:	2300      	moveq	r3, #0
		instance->ticks_elapsed_last = last;
    bc50:	72e3      	strb	r3, [r4, #11]
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    bc52:	7ae3      	ldrb	r3, [r4, #11]
    bc54:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    bc58:	2201      	movs	r2, #1
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    bc5a:	60dd      	str	r5, [r3, #12]
	instance->worker_trigger = 0;
    bc5c:	2300      	movs	r3, #0
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    bc5e:	6a65      	ldr	r5, [r4, #36]	; 0x24
	instance->worker_trigger = 0;
    bc60:	77e3      	strb	r3, [r4, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    bc62:	46ac      	mov	ip, r5
    bc64:	4623      	mov	r3, r4
    bc66:	2104      	movs	r1, #4
    bc68:	2003      	movs	r0, #3
}
    bc6a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    bc6e:	4760      	bx	ip
		ticks_elapsed -= ticks_to_expire;
    bc70:	1aff      	subs	r7, r7, r3
		ticks_expired += ticks_to_expire;
    bc72:	441d      	add	r5, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    bc74:	788a      	ldrb	r2, [r1, #2]
    bc76:	784b      	ldrb	r3, [r1, #1]
		ticker_id_head = ticker->next;
    bc78:	f818 6036 	ldrb.w	r6, [r8, r6, lsl #3]
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    bc7c:	1a9b      	subs	r3, r3, r2
    bc7e:	b2db      	uxtb	r3, r3
    bc80:	2b01      	cmp	r3, #1
    bc82:	d1d3      	bne.n	bc2c <ticker_worker+0x2e>
		if (ticker->timeout_func) {
    bc84:	f8d1 900c 	ldr.w	r9, [r1, #12]
		ticker->ack--;
    bc88:	3a01      	subs	r2, #1
    bc8a:	708a      	strb	r2, [r1, #2]
		if (ticker->timeout_func) {
    bc8c:	f1b9 0f00 	cmp.w	r9, #0
    bc90:	d0cc      	beq.n	bc2c <ticker_worker+0x2e>
					   ticks_expired -
    bc92:	6948      	ldr	r0, [r1, #20]
    bc94:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
    bc96:	8bca      	ldrh	r2, [r1, #30]
					   ticks_expired -
    bc98:	1a28      	subs	r0, r5, r0
    bc9a:	4418      	add	r0, r3
			ticker->timeout_func(ticks_at_expire,
    bc9c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    bca0:	690b      	ldr	r3, [r1, #16]
    bca2:	6a49      	ldr	r1, [r1, #36]	; 0x24
    bca4:	47c8      	blx	r9
    bca6:	e7c1      	b.n	bc2c <ticker_worker+0x2e>
    bca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000bcac <ticker_job>:
{
    bcac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->worker_trigger) {
    bcb0:	7fc2      	ldrb	r2, [r0, #31]
{
    bcb2:	b095      	sub	sp, #84	; 0x54
    bcb4:	4683      	mov	fp, r0
	if (instance->worker_trigger) {
    bcb6:	2a00      	cmp	r2, #0
    bcb8:	f040 83be 	bne.w	c438 <ticker_job+0x78c>
	ticks_previous = instance->ticks_current;
    bcbc:	6943      	ldr	r3, [r0, #20]
    bcbe:	9307      	str	r3, [sp, #28]
	instance->job_guard = 1;
    bcc0:	2101      	movs	r1, #1
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    bcc2:	7a83      	ldrb	r3, [r0, #10]
	instance->job_guard = 1;
    bcc4:	7781      	strb	r1, [r0, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    bcc6:	7ac0      	ldrb	r0, [r0, #11]
    bcc8:	4298      	cmp	r0, r3
    bcca:	f000 808f 	beq.w	bdec <ticker_job+0x140>
		first = instance->ticks_elapsed_first + 1;
    bcce:	440b      	add	r3, r1
    bcd0:	b2db      	uxtb	r3, r3
			first = 0;
    bcd2:	2b02      	cmp	r3, #2
    bcd4:	bf08      	it	eq
    bcd6:	2300      	moveq	r3, #0
		instance->ticks_elapsed_first = first;
    bcd8:	f88b 300a 	strb.w	r3, [fp, #10]
		ticks_elapsed =
    bcdc:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
		flag_elapsed = 1;
    bce0:	9103      	str	r1, [sp, #12]
		ticks_elapsed =
    bce2:	f8d3 800c 	ldr.w	r8, [r3, #12]
		instance->ticks_current += ticks_elapsed;
    bce6:	9b07      	ldr	r3, [sp, #28]
    bce8:	4443      	add	r3, r8
		instance->ticks_current &= 0x00FFFFFF;
    bcea:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    bcee:	f8cb 3014 	str.w	r3, [fp, #20]
	ticker_id_old_head = instance->ticker_id_head;
    bcf2:	f89b 301d 	ldrb.w	r3, [fp, #29]
    bcf6:	9305      	str	r3, [sp, #20]
	node = &instance->node[0];
    bcf8:	f8db 3000 	ldr.w	r3, [fp]
    bcfc:	9306      	str	r3, [sp, #24]
	users = &instance->user[0];
    bcfe:	f8db 3004 	ldr.w	r3, [fp, #4]
    bd02:	930d      	str	r3, [sp, #52]	; 0x34
    bd04:	f89b 3009 	ldrb.w	r3, [fp, #9]
    bd08:	3b01      	subs	r3, #1
    bd0a:	b2db      	uxtb	r3, r3
    bd0c:	9304      	str	r3, [sp, #16]
	pending = 0;
    bd0e:	2300      	movs	r3, #0
    bd10:	9309      	str	r3, [sp, #36]	; 0x24
	insert_head = TICKER_NULL;
    bd12:	f04f 0aff 	mov.w	sl, #255	; 0xff
	while (count_user--) {
    bd16:	9b04      	ldr	r3, [sp, #16]
    bd18:	2bff      	cmp	r3, #255	; 0xff
    bd1a:	d16a      	bne.n	bdf2 <ticker_job+0x146>
	if (instance->ticker_id_head != ticker_id_old_head) {
    bd1c:	f89b 301d 	ldrb.w	r3, [fp, #29]
	flag_compare_update = 0;
    bd20:	9a05      	ldr	r2, [sp, #20]
    bd22:	1a9b      	subs	r3, r3, r2
    bd24:	bf18      	it	ne
    bd26:	2301      	movne	r3, #1
    bd28:	9304      	str	r3, [sp, #16]
	if (flag_elapsed) {
    bd2a:	9b03      	ldr	r3, [sp, #12]
    bd2c:	b1e3      	cbz	r3, bd68 <ticker_job+0xbc>
	node = &instance->node[0];
    bd2e:	f8db 3000 	ldr.w	r3, [fp]
    bd32:	9306      	str	r3, [sp, #24]
	ticks_expired = 0;
    bd34:	f04f 0900 	mov.w	r9, #0
	while (instance->ticker_id_head != TICKER_NULL) {
    bd38:	f89b 601d 	ldrb.w	r6, [fp, #29]
    bd3c:	2eff      	cmp	r6, #255	; 0xff
    bd3e:	d00c      	beq.n	bd5a <ticker_job+0xae>
		ticker = &node[id_expired];
    bd40:	b237      	sxth	r7, r6
    bd42:	9b06      	ldr	r3, [sp, #24]
    bd44:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    bd48:	eb03 04c7 	add.w	r4, r3, r7, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    bd4c:	68a5      	ldr	r5, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    bd4e:	4545      	cmp	r5, r8
    bd50:	f240 8136 	bls.w	bfc0 <ticker_job+0x314>
			ticker->ticks_to_expire -= ticks_elapsed;
    bd54:	eba5 0508 	sub.w	r5, r5, r8
    bd58:	60a5      	str	r5, [r4, #8]
			flag_compare_update = 1;
    bd5a:	9b04      	ldr	r3, [sp, #16]
    bd5c:	9a03      	ldr	r2, [sp, #12]
    bd5e:	9905      	ldr	r1, [sp, #20]
    bd60:	42b1      	cmp	r1, r6
    bd62:	bf18      	it	ne
    bd64:	4613      	movne	r3, r2
    bd66:	9304      	str	r3, [sp, #16]
	node = &instance->node[0];
    bd68:	f8db 3000 	ldr.w	r3, [fp]
    bd6c:	930a      	str	r3, [sp, #40]	; 0x28
	users = &instance->user[0];
    bd6e:	f8db 3004 	ldr.w	r3, [fp, #4]
    bd72:	9312      	str	r3, [sp, #72]	; 0x48
    bd74:	f89b 3009 	ldrb.w	r3, [fp, #9]
    bd78:	3b01      	subs	r3, #1
    bd7a:	b2db      	uxtb	r3, r3
    bd7c:	9303      	str	r3, [sp, #12]
	while (count_user--) {
    bd7e:	9b03      	ldr	r3, [sp, #12]
    bd80:	2bff      	cmp	r3, #255	; 0xff
    bd82:	f040 8170 	bne.w	c066 <ticker_job+0x3ba>
	if (instance->ticker_id_head != ticker_id_old_head) {
    bd86:	f89b 301d 	ldrb.w	r3, [fp, #29]
    bd8a:	9a05      	ldr	r2, [sp, #20]
    bd8c:	4293      	cmp	r3, r2
	if (!pending) {
    bd8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
	if (instance->ticker_id_head != ticker_id_old_head) {
    bd90:	f040 8349 	bne.w	c426 <ticker_job+0x77a>
	if (!pending) {
    bd94:	b95b      	cbnz	r3, bdae <ticker_job+0x102>
    bd96:	f89b 4009 	ldrb.w	r4, [fp, #9]
	users = &instance->user[0];
    bd9a:	f8db 3004 	ldr.w	r3, [fp, #4]
    bd9e:	9303      	str	r3, [sp, #12]
    bda0:	3c01      	subs	r4, #1
    bda2:	b2e4      	uxtb	r4, r4
		uop->status = TICKER_STATUS_SUCCESS;
    bda4:	f04f 0800 	mov.w	r8, #0
	while (count_user--) {
    bda8:	2cff      	cmp	r4, #255	; 0xff
    bdaa:	f040 82a0 	bne.w	c2ee <ticker_job+0x642>
	instance->job_guard = 0;
    bdae:	2300      	movs	r3, #0
    bdb0:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
    bdb4:	9b04      	ldr	r3, [sp, #16]
    bdb6:	b14b      	cbz	r3, bdcc <ticker_job+0x120>
	if (instance->ticker_id_head == TICKER_NULL) {
    bdb8:	f89b 301d 	ldrb.w	r3, [fp, #29]
    bdbc:	2bff      	cmp	r3, #255	; 0xff
    bdbe:	f040 82e9 	bne.w	c394 <ticker_job+0x6e8>
		if (cntr_stop() == 0) {
    bdc2:	f00c fb23 	bl	1840c <cntr_stop>
    bdc6:	b908      	cbnz	r0, bdcc <ticker_job+0x120>
			instance->ticks_slot_previous = 0;
    bdc8:	f8cb 0018 	str.w	r0, [fp, #24]
	if (instance->worker_trigger) {
    bdcc:	f89b 301f 	ldrb.w	r3, [fp, #31]
    bdd0:	2b00      	cmp	r3, #0
    bdd2:	f000 8331 	beq.w	c438 <ticker_job+0x78c>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    bdd6:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    bdda:	465b      	mov	r3, fp
    bddc:	2201      	movs	r2, #1
    bdde:	2103      	movs	r1, #3
    bde0:	2004      	movs	r0, #4
    bde2:	46a4      	mov	ip, r4
}
    bde4:	b015      	add	sp, #84	; 0x54
    bde6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    bdea:	4760      	bx	ip
		flag_elapsed = 0;
    bdec:	9203      	str	r2, [sp, #12]
		ticks_elapsed = 0;
    bdee:	4690      	mov	r8, r2
    bdf0:	e77f      	b.n	bcf2 <ticker_job+0x46>
		user = &users[count_user];
    bdf2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    bdf4:	9a04      	ldr	r2, [sp, #16]
    bdf6:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
		user_ops = &user->user_op[0];
    bdfa:	687b      	ldr	r3, [r7, #4]
    bdfc:	9308      	str	r3, [sp, #32]
		while (user->middle != user->last) {
    bdfe:	78f9      	ldrb	r1, [r7, #3]
    be00:	78be      	ldrb	r6, [r7, #2]
    be02:	428e      	cmp	r6, r1
    be04:	f000 80d7 	beq.w	bfb6 <ticker_job+0x30a>
			user_op = &user_ops[user->middle];
    be08:	9b08      	ldr	r3, [sp, #32]
			if (middle == user->count_user_op) {
    be0a:	7838      	ldrb	r0, [r7, #0]
			user_op = &user_ops[user->middle];
    be0c:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    be10:	0112      	lsls	r2, r2, #4
    be12:	189d      	adds	r5, r3, r2
			middle = user->middle + 1;
    be14:	1c73      	adds	r3, r6, #1
    be16:	b2db      	uxtb	r3, r3
				middle = 0;
    be18:	4298      	cmp	r0, r3
    be1a:	bf08      	it	eq
    be1c:	2300      	moveq	r3, #0
			user->middle = middle;
    be1e:	70bb      	strb	r3, [r7, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    be20:	9b08      	ldr	r3, [sp, #32]
    be22:	5c9a      	ldrb	r2, [r3, r2]
    be24:	2a03      	cmp	r2, #3
    be26:	d9eb      	bls.n	be00 <ticker_job+0x154>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    be28:	2a05      	cmp	r2, #5
    be2a:	d817      	bhi.n	be5c <ticker_job+0x1b0>
			ticker = &node[user_op->id];
    be2c:	7869      	ldrb	r1, [r5, #1]
    be2e:	eb01 0381 	add.w	r3, r1, r1, lsl #2
    be32:	930c      	str	r3, [sp, #48]	; 0x30
    be34:	980c      	ldr	r0, [sp, #48]	; 0x30
    be36:	9b06      	ldr	r3, [sp, #24]
    be38:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
			state = (ticker->req - ticker->ack) & 0xff;
    be3c:	7863      	ldrb	r3, [r4, #1]
    be3e:	78a0      	ldrb	r0, [r4, #2]
    be40:	1a1b      	subs	r3, r3, r0
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    be42:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    be46:	d009      	beq.n	be5c <ticker_job+0x1b0>
			    (state == 0) ||
    be48:	2a04      	cmp	r2, #4
    be4a:	d10c      	bne.n	be66 <ticker_job+0x1ba>
			     (user_op->params.update.ticks_drift_plus == 0) &&
    be4c:	686a      	ldr	r2, [r5, #4]
    be4e:	b952      	cbnz	r2, be66 <ticker_job+0x1ba>
			     (user_op->params.update.ticks_slot_plus == 0) &&
    be50:	68aa      	ldr	r2, [r5, #8]
    be52:	b942      	cbnz	r2, be66 <ticker_job+0x1ba>
			     (user_op->params.update.lazy == 0) &&
    be54:	68ea      	ldr	r2, [r5, #12]
    be56:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    be5a:	d104      	bne.n	be66 <ticker_job+0x1ba>
				ticker_job_op_cb(user_op,
    be5c:	2101      	movs	r1, #1
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    be5e:	4628      	mov	r0, r5
    be60:	f7ff fec3 	bl	bbea <ticker_job_op_cb>
    be64:	e7cb      	b.n	bdfe <ticker_job+0x152>
			if (state == 1) {
    be66:	2b01      	cmp	r3, #1
    be68:	f040 809b 	bne.w	bfa2 <ticker_job+0x2f6>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    be6c:	4658      	mov	r0, fp
    be6e:	f7ff fe72 	bl	bb56 <ticker_dequeue>
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    be72:	782b      	ldrb	r3, [r5, #0]
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    be74:	60a0      	str	r0, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    be76:	2b04      	cmp	r3, #4
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    be78:	4606      	mov	r6, r0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    be7a:	f040 8084 	bne.w	bf86 <ticker_job+0x2da>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    be7e:	f8db 3014 	ldr.w	r3, [fp, #20]
    be82:	930a      	str	r3, [sp, #40]	; 0x28
	ticks_now = cntr_cnt_get();
    be84:	f00c faf0 	bl	18468 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    be88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	ticks_now = cntr_cnt_get();
    be8a:	900b      	str	r0, [sp, #44]	; 0x2c
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    be8c:	1ac3      	subs	r3, r0, r3
    be8e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    be92:	4443      	add	r3, r8
	if (ticks_to_expire > ticks_elapsed) {
    be94:	429e      	cmp	r6, r3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    be96:	4602      	mov	r2, r0
		ticker->ticks_to_expire_minus += ticks_elapsed -
    be98:	bf9e      	ittt	ls
    be9a:	6962      	ldrls	r2, [r4, #20]
    be9c:	1b92      	subls	r2, r2, r6
    be9e:	189b      	addls	r3, r3, r2
	if ((ticker->ticks_periodic != 0) &&
    bea0:	6862      	ldr	r2, [r4, #4]
		ticker->ticks_to_expire_minus += ticks_elapsed -
    bea2:	bf96      	itet	ls
    bea4:	6163      	strls	r3, [r4, #20]
		ticks_to_expire -= ticks_elapsed;
    bea6:	1af3      	subhi	r3, r6, r3
		ticks_to_expire = 0;
    bea8:	2300      	movls	r3, #0
	if ((ticker->ticks_periodic != 0) &&
    beaa:	b18a      	cbz	r2, bed0 <ticker_job+0x224>
	    (user_op->params.update.lazy != 0)) {
    beac:	89a9      	ldrh	r1, [r5, #12]
	if ((ticker->ticks_periodic != 0) &&
    beae:	b179      	cbz	r1, bed0 <ticker_job+0x224>
		user_op->params.update.lazy--;
    beb0:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
    beb4:	fa1f fe8e 	uxth.w	lr, lr
    beb8:	f8a5 e00c 	strh.w	lr, [r5, #12]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    bebc:	429a      	cmp	r2, r3
    bebe:	d32b      	bcc.n	bf18 <ticker_job+0x26c>
		ticker->remainder_current -= 30517578UL;
    bec0:	f8df 9324 	ldr.w	r9, [pc, #804]	; c1e8 <ticker_job+0x53c>
		while (ticker->lazy_current < user_op->params.update.lazy) {
    bec4:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    bec8:	45e6      	cmp	lr, ip
    beca:	d847      	bhi.n	bf5c <ticker_job+0x2b0>
		ticker->lazy_periodic = user_op->params.update.lazy;
    becc:	f8a4 e01c 	strh.w	lr, [r4, #28]
				  user_op->params.update.ticks_drift_plus;
    bed0:	88aa      	ldrh	r2, [r5, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    bed2:	990a      	ldr	r1, [sp, #40]	; 0x28
	ticker->ticks_to_expire = ticks_to_expire +
    bed4:	4413      	add	r3, r2
    bed6:	60a3      	str	r3, [r4, #8]
				user_op->params.update.ticks_drift_minus;
    bed8:	88ea      	ldrh	r2, [r5, #6]
	ticker->ticks_to_expire_minus +=
    beda:	6963      	ldr	r3, [r4, #20]
    bedc:	4413      	add	r3, r2
    bede:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    bee0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    bee2:	4620      	mov	r0, r4
    bee4:	f7ff fe63 	bl	bbae <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    bee8:	69a2      	ldr	r2, [r4, #24]
    beea:	892b      	ldrh	r3, [r5, #8]
    beec:	4413      	add	r3, r2
    beee:	61a3      	str	r3, [r4, #24]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    bef0:	896a      	ldrh	r2, [r5, #10]
    bef2:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
    bef4:	bf8c      	ite	hi
    bef6:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0;
    bef8:	2300      	movls	r3, #0
    befa:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0) {
    befc:	7bab      	ldrb	r3, [r5, #14]
    befe:	b103      	cbz	r3, bf02 <ticker_job+0x256>
		ticker->force = user_op->params.update.force;
    bf00:	70e3      	strb	r3, [r4, #3]
	ticker->next = *insert_head;
    bf02:	9b06      	ldr	r3, [sp, #24]
    bf04:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    bf06:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
		ticker->req++;
    bf0a:	7863      	ldrb	r3, [r4, #1]
	*insert_head = user_op->id;
    bf0c:	f895 a001 	ldrb.w	sl, [r5, #1]
		ticker->req++;
    bf10:	3301      	adds	r3, #1
    bf12:	7063      	strb	r3, [r4, #1]
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    bf14:	2100      	movs	r1, #0
    bf16:	e7a2      	b.n	be5e <ticker_job+0x1b2>
		       (ticker->lazy_current > user_op->params.update.lazy)) {
    bf18:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    bf1c:	45e6      	cmp	lr, ip
    bf1e:	d2cf      	bcs.n	bec0 <ticker_job+0x214>
	if ((ticker->remainder_current >= BIT(31)) ||
    bf20:	6a61      	ldr	r1, [r4, #36]	; 0x24
    bf22:	4eaf      	ldr	r6, [pc, #700]	; (c1e0 <ticker_job+0x534>)
    bf24:	48af      	ldr	r0, [pc, #700]	; (c1e4 <ticker_job+0x538>)
    bf26:	198e      	adds	r6, r1, r6
    bf28:	4286      	cmp	r6, r0
		ticker->remainder_current += 30517578UL;
    bf2a:	bf81      	itttt	hi
    bf2c:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
    bf30:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
    bf34:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
    bf38:	6261      	strhi	r1, [r4, #36]	; 0x24
	ticker->remainder_current -= ticker->remainder_periodic;
    bf3a:	6a66      	ldr	r6, [r4, #36]	; 0x24
    bf3c:	6a21      	ldr	r1, [r4, #32]
		decrement++;
    bf3e:	bf8c      	ite	hi
    bf40:	f04f 0901 	movhi.w	r9, #1
	u8_t decrement = 0;
    bf44:	f04f 0900 	movls.w	r9, #0
	ticker->remainder_current -= ticker->remainder_periodic;
    bf48:	1a76      	subs	r6, r6, r1
			ticks_to_expire -= ticker->ticks_periodic +
    bf4a:	4491      	add	r9, r2
			ticker->lazy_current--;
    bf4c:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
	ticker->remainder_current -= ticker->remainder_periodic;
    bf50:	6266      	str	r6, [r4, #36]	; 0x24
			ticks_to_expire -= ticker->ticks_periodic +
    bf52:	eba3 0309 	sub.w	r3, r3, r9
			ticker->lazy_current--;
    bf56:	f8a4 c01e 	strh.w	ip, [r4, #30]
    bf5a:	e7af      	b.n	bebc <ticker_job+0x210>
	ticker->remainder_current += ticker->remainder_periodic;
    bf5c:	6a66      	ldr	r6, [r4, #36]	; 0x24
    bf5e:	6a21      	ldr	r1, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    bf60:	48a0      	ldr	r0, [pc, #640]	; (c1e4 <ticker_job+0x538>)
	ticker->remainder_current += ticker->remainder_periodic;
    bf62:	440e      	add	r6, r1
	if ((ticker->remainder_current < BIT(31)) &&
    bf64:	499e      	ldr	r1, [pc, #632]	; (c1e0 <ticker_job+0x534>)
    bf66:	1871      	adds	r1, r6, r1
    bf68:	4281      	cmp	r1, r0
	return 0;
    bf6a:	bf8e      	itee	hi
    bf6c:	2100      	movhi	r1, #0
		return 1;
    bf6e:	2101      	movls	r1, #1
		ticker->remainder_current -= 30517578UL;
    bf70:	444e      	addls	r6, r9
			ticks_to_expire += ticker->ticks_periodic +
    bf72:	4411      	add	r1, r2
			ticker->lazy_current++;
    bf74:	f10c 0c01 	add.w	ip, ip, #1
	ticker->remainder_current += ticker->remainder_periodic;
    bf78:	bf8c      	ite	hi
    bf7a:	6266      	strhi	r6, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
    bf7c:	6266      	strls	r6, [r4, #36]	; 0x24
			ticks_to_expire += ticker->ticks_periodic +
    bf7e:	440b      	add	r3, r1
			ticker->lazy_current++;
    bf80:	f8a4 c01e 	strh.w	ip, [r4, #30]
    bf84:	e79e      	b.n	bec4 <ticker_job+0x218>
		ticker->req = ticker->ack;
    bf86:	78a3      	ldrb	r3, [r4, #2]
    bf88:	7063      	strb	r3, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
    bf8a:	786b      	ldrb	r3, [r5, #1]
    bf8c:	f89b 201c 	ldrb.w	r2, [fp, #28]
    bf90:	429a      	cmp	r2, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    bf92:	bf01      	itttt	eq
    bf94:	23ff      	moveq	r3, #255	; 0xff
    bf96:	f88b 301c 	strbeq.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
    bf9a:	2300      	moveq	r3, #0
    bf9c:	f8cb 3018 	streq.w	r3, [fp, #24]
    bfa0:	e7b8      	b.n	bf14 <ticker_job+0x268>
				instance->sched_cb(TICKER_CALL_ID_JOB,
    bfa2:	2104      	movs	r1, #4
    bfa4:	465b      	mov	r3, fp
    bfa6:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    bfaa:	2201      	movs	r2, #1
    bfac:	4608      	mov	r0, r1
    bfae:	47a0      	blx	r4
				pending = 1;
    bfb0:	2301      	movs	r3, #1
				user->middle = prev;
    bfb2:	70be      	strb	r6, [r7, #2]
				pending = 1;
    bfb4:	9309      	str	r3, [sp, #36]	; 0x24
    bfb6:	9b04      	ldr	r3, [sp, #16]
    bfb8:	3b01      	subs	r3, #1
    bfba:	b2db      	uxtb	r3, r3
    bfbc:	9304      	str	r3, [sp, #16]
    bfbe:	e6aa      	b.n	bd16 <ticker_job+0x6a>
		if (instance->ticks_slot_previous > ticks_to_expire) {
    bfc0:	f8db 3018 	ldr.w	r3, [fp, #24]
    bfc4:	429d      	cmp	r5, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    bfc6:	bf29      	itett	cs
    bfc8:	23ff      	movcs	r3, #255	; 0xff
			instance->ticks_slot_previous -= ticks_to_expire;
    bfca:	1b5b      	subcc	r3, r3, r5
			instance->ticker_id_slot_previous = TICKER_NULL;
    bfcc:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
    bfd0:	2300      	movcs	r3, #0
    bfd2:	f8cb 3018 	str.w	r3, [fp, #24]
		if (ticker->ticks_slot != 0) {
    bfd6:	69a3      	ldr	r3, [r4, #24]
		ticks_expired += ticks_to_expire;
    bfd8:	44a9      	add	r9, r5
		if (ticker->ticks_slot != 0) {
    bfda:	b11b      	cbz	r3, bfe4 <ticker_job+0x338>
			instance->ticker_id_slot_previous = id_expired;
    bfdc:	f88b 601c 	strb.w	r6, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
    bfe0:	f8cb 3018 	str.w	r3, [fp, #24]
		ticker->ticks_to_expire = 0;
    bfe4:	2200      	movs	r2, #0
		instance->ticker_id_head = ticker->next;
    bfe6:	9b06      	ldr	r3, [sp, #24]
		ticker->ticks_to_expire = 0;
    bfe8:	60a2      	str	r2, [r4, #8]
		instance->ticker_id_head = ticker->next;
    bfea:	f813 3037 	ldrb.w	r3, [r3, r7, lsl #3]
    bfee:	f88b 301d 	strb.w	r3, [fp, #29]
		if (ticker->ticks_periodic != 0) {
    bff2:	f8d4 e004 	ldr.w	lr, [r4, #4]
    bff6:	f1be 0f00 	cmp.w	lr, #0
    bffa:	d030      	beq.n	c05e <ticker_job+0x3b2>
    bffc:	8ba0      	ldrh	r0, [r4, #28]
	if ((ticker->remainder_current < BIT(31)) &&
    bffe:	f8df c1e4 	ldr.w	ip, [pc, #484]	; c1e4 <ticker_job+0x538>
	ticker->remainder_current += ticker->remainder_periodic;
    c002:	6a63      	ldr	r3, [r4, #36]	; 0x24
    c004:	6a21      	ldr	r1, [r4, #32]
    c006:	440b      	add	r3, r1
	if ((ticker->remainder_current < BIT(31)) &&
    c008:	4975      	ldr	r1, [pc, #468]	; (c1e0 <ticker_job+0x534>)
    c00a:	1859      	adds	r1, r3, r1
    c00c:	4561      	cmp	r1, ip
		ticker->remainder_current -= 30517578UL;
    c00e:	bf9f      	itttt	ls
    c010:	f1a3 73e8 	subls.w	r3, r3, #30408704	; 0x1d00000
    c014:	f5a3 33d4 	subls.w	r3, r3, #108544	; 0x1a800
    c018:	f5a3 73a5 	subls.w	r3, r3, #330	; 0x14a
    c01c:	6263      	strls	r3, [r4, #36]	; 0x24
		return 1;
    c01e:	bf92      	itee	ls
    c020:	9b03      	ldrls	r3, [sp, #12]
	ticker->remainder_current += ticker->remainder_periodic;
    c022:	6263      	strhi	r3, [r4, #36]	; 0x24
	return 0;
    c024:	2300      	movhi	r3, #0
				ticks_to_expire += ticker_remainder_inc(ticker);
    c026:	4473      	add	r3, lr
			while (count--) {
    c028:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
				ticks_to_expire += ticker_remainder_inc(ticker);
    c02c:	441a      	add	r2, r3
			while (count--) {
    c02e:	d2e8      	bcs.n	c002 <ticker_job+0x356>
			ticks_to_expire_prep(ticker, instance->ticks_current,
    c030:	9b07      	ldr	r3, [sp, #28]
			ticker->ticks_to_expire = ticks_to_expire;
    c032:	60a2      	str	r2, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
    c034:	f8db 1014 	ldr.w	r1, [fp, #20]
    c038:	eb03 0209 	add.w	r2, r3, r9
    c03c:	4620      	mov	r0, r4
    c03e:	f7ff fdb6 	bl	bbae <ticks_to_expire_prep>
			ticker->lazy_current = ticker->lazy_periodic;
    c042:	8ba3      	ldrh	r3, [r4, #28]
    c044:	83e3      	strh	r3, [r4, #30]
			ticker->force = 0;
    c046:	2300      	movs	r3, #0
    c048:	70e3      	strb	r3, [r4, #3]
			ticker->next = *insert_head;
    c04a:	9b06      	ldr	r3, [sp, #24]
    c04c:	f803 a037 	strb.w	sl, [r3, r7, lsl #3]
			ticker->req++;
    c050:	7863      	ldrb	r3, [r4, #1]
    c052:	3301      	adds	r3, #1
    c054:	7063      	strb	r3, [r4, #1]
		ticks_elapsed -= ticks_to_expire;
    c056:	eba8 0805 	sub.w	r8, r8, r5
    c05a:	46b2      	mov	sl, r6
    c05c:	e66c      	b.n	bd38 <ticker_job+0x8c>
			ticker->req = ticker->ack;
    c05e:	78a3      	ldrb	r3, [r4, #2]
    c060:	7063      	strb	r3, [r4, #1]
    c062:	4656      	mov	r6, sl
    c064:	e7f7      	b.n	c056 <ticker_job+0x3aa>
		user = &users[count_user];
    c066:	9b12      	ldr	r3, [sp, #72]	; 0x48
    c068:	9a03      	ldr	r2, [sp, #12]
    c06a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    c06e:	9306      	str	r3, [sp, #24]
		user_ops = (void *)&user->user_op[0];
    c070:	685b      	ldr	r3, [r3, #4]
    c072:	930c      	str	r3, [sp, #48]	; 0x30
		user_ops_first = user->first;
    c074:	9b06      	ldr	r3, [sp, #24]
    c076:	f893 9001 	ldrb.w	r9, [r3, #1]
		while ((insert_head != TICKER_NULL) ||
    c07a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    c07e:	f000 808e 	beq.w	c19e <ticker_job+0x4f2>
				ticker = &node[id_insert];
    c082:	fa0f f38a 	sxth.w	r3, sl
    c086:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    c08a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
				insert_head = ticker->next;
    c08c:	46d0      	mov	r8, sl
    c08e:	f812 a033 	ldrb.w	sl, [r2, r3, lsl #3]
				ticker = &node[id_insert];
    c092:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
				user_op = NULL;
    c096:	2500      	movs	r5, #0
	struct ticker_node *node = &instance->node[0];
    c098:	f8db 3000 	ldr.w	r3, [fp]
    c09c:	930d      	str	r3, [sp, #52]	; 0x34
	ticker->next = TICKER_NULL;
    c09e:	23ff      	movs	r3, #255	; 0xff
	if (ticker->lazy_current > ticker->lazy_periodic) {
    c0a0:	8ba2      	ldrh	r2, [r4, #28]
	ticker->next = TICKER_NULL;
    c0a2:	7023      	strb	r3, [r4, #0]
	if (ticker->lazy_current > ticker->lazy_periodic) {
    c0a4:	8be3      	ldrh	r3, [r4, #30]
    c0a6:	4293      	cmp	r3, r2
		skip = ticker->lazy_current -
    c0a8:	bf86      	itte	hi
    c0aa:	1a9b      	subhi	r3, r3, r2
    c0ac:	b29b      	uxthhi	r3, r3
		skip = 0;
    c0ae:	2300      	movls	r3, #0
    c0b0:	930e      	str	r3, [sp, #56]	; 0x38
	ticker_new = &node[id];
    c0b2:	fa0f f388 	sxth.w	r3, r8
    c0b6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    c0ba:	00db      	lsls	r3, r3, #3
    c0bc:	9313      	str	r3, [sp, #76]	; 0x4c
    c0be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
	node = &instance->node[0];
    c0c0:	f8db 2000 	ldr.w	r2, [fp]
	ticks_slot_previous = instance->ticks_slot_previous;
    c0c4:	f8db 0018 	ldr.w	r0, [fp, #24]
    c0c8:	9007      	str	r0, [sp, #28]
	ticker_new = &node[id];
    c0ca:	eb02 0e03 	add.w	lr, r2, r3
	collide = ticker_id_slot_previous = TICKER_NULL;
    c0ce:	20ff      	movs	r0, #255	; 0xff
	current = instance->ticker_id_head;
    c0d0:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker_new->ticks_to_expire;
    c0d4:	f8de 1008 	ldr.w	r1, [lr, #8]
	previous = current;
    c0d8:	930b      	str	r3, [sp, #44]	; 0x2c
	collide = ticker_id_slot_previous = TICKER_NULL;
    c0da:	9008      	str	r0, [sp, #32]
	while ((current != TICKER_NULL) &&
    c0dc:	2bff      	cmp	r3, #255	; 0xff
    c0de:	d007      	beq.n	c0f0 <ticker_job+0x444>
		 (ticker_current = &node[current])->ticks_to_expire))) {
    c0e0:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
    c0e4:	eb02 06cc 	add.w	r6, r2, ip, lsl #3
		(ticks_to_expire_current =
    c0e8:	68b0      	ldr	r0, [r6, #8]
	while ((current != TICKER_NULL) &&
    c0ea:	4281      	cmp	r1, r0
    c0ec:	f200 80a9 	bhi.w	c242 <ticker_job+0x596>
				     ticks_to_expire + ticker_new->ticks_slot);
    c0f0:	f8de 0018 	ldr.w	r0, [lr, #24]
    c0f4:	900f      	str	r0, [sp, #60]	; 0x3c
	collide = ticker_by_slot_get(&node[0], current,
    c0f6:	eb01 0c00 	add.w	ip, r1, r0
    c0fa:	461e      	mov	r6, r3
	while (ticker_id_head != TICKER_NULL) {
    c0fc:	2eff      	cmp	r6, #255	; 0xff
    c0fe:	f040 80ae 	bne.w	c25e <ticker_job+0x5b2>
	if ((ticker_new->ticks_slot == 0) ||
    c102:	980f      	ldr	r0, [sp, #60]	; 0x3c
    c104:	b130      	cbz	r0, c114 <ticker_job+0x468>
    c106:	9807      	ldr	r0, [sp, #28]
    c108:	4281      	cmp	r1, r0
    c10a:	f0c0 80bf 	bcc.w	c28c <ticker_job+0x5e0>
	    ((ticks_slot_previous <= ticks_to_expire) &&
    c10e:	2eff      	cmp	r6, #255	; 0xff
    c110:	f040 818e 	bne.w	c430 <ticker_job+0x784>
		if (previous == current) {
    c114:	980b      	ldr	r0, [sp, #44]	; 0x2c
		ticker_new->ticks_to_expire = ticks_to_expire;
    c116:	f8ce 1008 	str.w	r1, [lr, #8]
		if (previous == current) {
    c11a:	4283      	cmp	r3, r0
			node[previous].next = id;
    c11c:	bf18      	it	ne
    c11e:	f9bd 002c 	ldrshne.w	r0, [sp, #44]	; 0x2c
		ticker_new->next = current;
    c122:	f88e 3000 	strb.w	r3, [lr]
			node[previous].next = id;
    c126:	bf16      	itet	ne
    c128:	eb00 0080 	addne.w	r0, r0, r0, lsl #2
			instance->ticker_id_head = id;
    c12c:	f88b 801d 	strbeq.w	r8, [fp, #29]
			node[previous].next = id;
    c130:	f802 8030 	strbne.w	r8, [r2, r0, lsl #3]
		if (current != TICKER_NULL) {
    c134:	2bff      	cmp	r3, #255	; 0xff
    c136:	d006      	beq.n	c146 <ticker_job+0x49a>
			node[current].ticks_to_expire -= ticks_to_expire;
    c138:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    c13c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    c140:	689a      	ldr	r2, [r3, #8]
    c142:	1a51      	subs	r1, r2, r1
    c144:	6099      	str	r1, [r3, #8]
	ticker->req = ticker->ack + 1;
    c146:	78a3      	ldrb	r3, [r4, #2]
    c148:	3301      	adds	r3, #1
    c14a:	7063      	strb	r3, [r4, #1]
	return TICKER_STATUS_SUCCESS;
    c14c:	2100      	movs	r1, #0
			if (user_op) {
    c14e:	2d00      	cmp	r5, #0
    c150:	d093      	beq.n	c07a <ticker_job+0x3ce>
				ticker_job_op_cb(user_op, status);
    c152:	4628      	mov	r0, r5
    c154:	f7ff fd49 	bl	bbea <ticker_job_op_cb>
    c158:	e78f      	b.n	c07a <ticker_job+0x3ce>
				user_op = &user_ops[user_ops_first];
    c15a:	eb09 0349 	add.w	r3, r9, r9, lsl #1
    c15e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c160:	011b      	lsls	r3, r3, #4
    c162:	18d5      	adds	r5, r2, r3
				first = user_ops_first + 1;
    c164:	f109 0201 	add.w	r2, r9, #1
    c168:	fa5f f982 	uxtb.w	r9, r2
				if (first == user->count_user_op) {
    c16c:	9a06      	ldr	r2, [sp, #24]
    c16e:	7812      	ldrb	r2, [r2, #0]
					first = 0;
    c170:	454a      	cmp	r2, r9
    c172:	bf08      	it	eq
    c174:	f04f 0900 	moveq.w	r9, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    c178:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c17a:	5cd3      	ldrb	r3, [r2, r3]
    c17c:	2b03      	cmp	r3, #3
    c17e:	d10e      	bne.n	c19e <ticker_job+0x4f2>
				id_insert = user_op->id;
    c180:	f895 8001 	ldrb.w	r8, [r5, #1]
				ticker = &node[id_insert];
    c184:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c186:	eb08 0488 	add.w	r4, r8, r8, lsl #2
    c18a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
				if (((ticker->req - ticker->ack) & 0xff) != 0) {
    c18e:	7862      	ldrb	r2, [r4, #1]
    c190:	78a3      	ldrb	r3, [r4, #2]
    c192:	429a      	cmp	r2, r3
    c194:	d009      	beq.n	c1aa <ticker_job+0x4fe>
					ticker_job_op_cb(user_op,
    c196:	2101      	movs	r1, #1
    c198:	4628      	mov	r0, r5
    c19a:	f7ff fd26 	bl	bbea <ticker_job_op_cb>
		while ((insert_head != TICKER_NULL) ||
    c19e:	9b06      	ldr	r3, [sp, #24]
    c1a0:	789b      	ldrb	r3, [r3, #2]
    c1a2:	454b      	cmp	r3, r9
    c1a4:	d1d9      	bne.n	c15a <ticker_job+0x4ae>
    c1a6:	9b03      	ldr	r3, [sp, #12]
    c1a8:	e5e6      	b.n	bd78 <ticker_job+0xcc>
	ticker->ticks_periodic = start->ticks_periodic;
    c1aa:	68eb      	ldr	r3, [r5, #12]
				ticker_job_op_start(ticker, user_op,
    c1ac:	f8db 1014 	ldr.w	r1, [fp, #20]
	ticker->ticks_periodic = start->ticks_periodic;
    c1b0:	6063      	str	r3, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    c1b2:	692b      	ldr	r3, [r5, #16]
    c1b4:	6223      	str	r3, [r4, #32]
	ticker->lazy_periodic = start->lazy;
    c1b6:	8aab      	ldrh	r3, [r5, #20]
    c1b8:	83a3      	strh	r3, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
    c1ba:	69ab      	ldr	r3, [r5, #24]
    c1bc:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
    c1be:	69eb      	ldr	r3, [r5, #28]
    c1c0:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
    c1c2:	6a2b      	ldr	r3, [r5, #32]
    c1c4:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire_minus = 0;
    c1c6:	2600      	movs	r6, #0
	ticker->ticks_to_expire = start->ticks_first;
    c1c8:	68ab      	ldr	r3, [r5, #8]
    c1ca:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0;
    c1cc:	6166      	str	r6, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    c1ce:	686a      	ldr	r2, [r5, #4]
    c1d0:	4620      	mov	r0, r4
    c1d2:	f7ff fcec 	bl	bbae <ticks_to_expire_prep>
	ticker->force = 1;
    c1d6:	2301      	movs	r3, #1
	ticker->remainder_current = 0;
    c1d8:	6266      	str	r6, [r4, #36]	; 0x24
	ticker->lazy_current = 0;
    c1da:	83e6      	strh	r6, [r4, #30]
	ticker->force = 1;
    c1dc:	70e3      	strb	r3, [r4, #3]
    c1de:	e75b      	b.n	c098 <ticker_job+0x3ec>
    c1e0:	ff172b5a 	.word	0xff172b5a
    c1e4:	7f172b59 	.word	0x7f172b59
    c1e8:	fe2e56b6 	.word	0xfe2e56b6
		if (ticker->ticks_periodic != 0) {
    c1ec:	6860      	ldr	r0, [r4, #4]
    c1ee:	2800      	cmp	r0, #0
    c1f0:	d07b      	beq.n	c2ea <ticker_job+0x63e>
	ticker->remainder_current += ticker->remainder_periodic;
    c1f2:	6a62      	ldr	r2, [r4, #36]	; 0x24
    c1f4:	6a21      	ldr	r1, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    c1f6:	4b92      	ldr	r3, [pc, #584]	; (c440 <ticker_job+0x794>)
	ticker->remainder_current += ticker->remainder_periodic;
    c1f8:	440a      	add	r2, r1
	if ((ticker->remainder_current < BIT(31)) &&
    c1fa:	4992      	ldr	r1, [pc, #584]	; (c444 <ticker_job+0x798>)
    c1fc:	18d3      	adds	r3, r2, r3
    c1fe:	428b      	cmp	r3, r1
		ticker->remainder_current -= 30517578UL;
    c200:	bf9c      	itt	ls
    c202:	f1a2 72e8 	subls.w	r2, r2, #30408704	; 0x1d00000
    c206:	f5a2 32d4 	subls.w	r2, r2, #108544	; 0x1a800
			ticker->ticks_to_expire += ticker->ticks_periodic +
    c20a:	68a3      	ldr	r3, [r4, #8]
	ticker->remainder_current += ticker->remainder_periodic;
    c20c:	bf8b      	itete	hi
    c20e:	6262      	strhi	r2, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
    c210:	f5a2 72a5 	subls.w	r2, r2, #330	; 0x14a
	return 0;
    c214:	2200      	movhi	r2, #0
		ticker->remainder_current -= 30517578UL;
    c216:	6262      	strls	r2, [r4, #36]	; 0x24
			ticker->ticks_to_expire += ticker->ticks_periodic +
    c218:	4403      	add	r3, r0
		return 1;
    c21a:	bf98      	it	ls
    c21c:	2201      	movls	r2, #1
			ticker->ticks_to_expire += ticker->ticks_periodic +
    c21e:	4413      	add	r3, r2
			ticker->lazy_current++;
    c220:	8be2      	ldrh	r2, [r4, #30]
			ticker->ticks_to_expire += ticker->ticks_periodic +
    c222:	60a3      	str	r3, [r4, #8]
			ticker->lazy_current++;
    c224:	3201      	adds	r2, #1
    c226:	83e2      	strh	r2, [r4, #30]
			    ticker->ticks_to_expire_minus) {
    c228:	6962      	ldr	r2, [r4, #20]
			if (ticker->ticks_to_expire >
    c22a:	4293      	cmp	r3, r2
    c22c:	f04f 0100 	mov.w	r1, #0
				ticker->ticks_to_expire -=
    c230:	bf89      	itett	hi
    c232:	1a9b      	subhi	r3, r3, r2
				ticker->ticks_to_expire_minus -=
    c234:	1ad3      	subls	r3, r2, r3
				ticker->ticks_to_expire -=
    c236:	60a3      	strhi	r3, [r4, #8]
				ticker->ticks_to_expire_minus = 0;
    c238:	6161      	strhi	r1, [r4, #20]
				ticker->ticks_to_expire_minus -=
    c23a:	bf9c      	itt	ls
    c23c:	6163      	strls	r3, [r4, #20]
				ticker->ticks_to_expire = 0;
    c23e:	60a1      	strls	r1, [r4, #8]
    c240:	e73d      	b.n	c0be <ticker_job+0x412>
		if (ticker_current->ticks_slot != 0) {
    c242:	69b6      	ldr	r6, [r6, #24]
		ticks_to_expire -= ticks_to_expire_current;
    c244:	1a09      	subs	r1, r1, r0
		if (ticker_current->ticks_slot != 0) {
    c246:	b946      	cbnz	r6, c25a <ticker_job+0x5ae>
			if (ticks_slot_previous > ticks_to_expire_current) {
    c248:	9f07      	ldr	r7, [sp, #28]
    c24a:	42b8      	cmp	r0, r7
    c24c:	d200      	bcs.n	c250 <ticker_job+0x5a4>
				ticks_slot_previous -= ticks_to_expire_current;
    c24e:	1a3e      	subs	r6, r7, r0
		current = ticker_current->next;
    c250:	930b      	str	r3, [sp, #44]	; 0x2c
    c252:	9607      	str	r6, [sp, #28]
    c254:	f812 303c 	ldrb.w	r3, [r2, ip, lsl #3]
    c258:	e740      	b.n	c0dc <ticker_job+0x430>
		if (ticker_current->ticks_slot != 0) {
    c25a:	9308      	str	r3, [sp, #32]
    c25c:	e7f8      	b.n	c250 <ticker_job+0x5a4>
		ticker = &node[ticker_id_head];
    c25e:	b230      	sxth	r0, r6
    c260:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    c264:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
    c268:	9710      	str	r7, [sp, #64]	; 0x40
		ticks_to_expire = ticker->ticks_to_expire;
    c26a:	68bf      	ldr	r7, [r7, #8]
    c26c:	9711      	str	r7, [sp, #68]	; 0x44
		if (ticks_slot <= ticks_to_expire) {
    c26e:	4567      	cmp	r7, ip
    c270:	d20a      	bcs.n	c288 <ticker_job+0x5dc>
		if (ticker->ticks_slot) {
    c272:	9f10      	ldr	r7, [sp, #64]	; 0x40
    c274:	69bf      	ldr	r7, [r7, #24]
    c276:	2f00      	cmp	r7, #0
    c278:	f47f af43 	bne.w	c102 <ticker_job+0x456>
		ticks_slot -= ticks_to_expire;
    c27c:	9e11      	ldr	r6, [sp, #68]	; 0x44
    c27e:	ebac 0c06 	sub.w	ip, ip, r6
		ticker_id_head = ticker->next;
    c282:	f812 6030 	ldrb.w	r6, [r2, r0, lsl #3]
    c286:	e739      	b.n	c0fc <ticker_job+0x450>
			return TICKER_NULL;
    c288:	26ff      	movs	r6, #255	; 0xff
    c28a:	e73a      	b.n	c102 <ticker_job+0x456>
	while (id_insert !=
    c28c:	9b08      	ldr	r3, [sp, #32]
    c28e:	4598      	cmp	r8, r3
    c290:	f43f af59 	beq.w	c146 <ticker_job+0x49a>
		if (id_collide != TICKER_NULL) {
    c294:	9b08      	ldr	r3, [sp, #32]
    c296:	2bff      	cmp	r3, #255	; 0xff
    c298:	d0a8      	beq.n	c1ec <ticker_job+0x540>
    c29a:	461e      	mov	r6, r3
			struct ticker_node *ticker_collide = &node[id_collide];
    c29c:	b233      	sxth	r3, r6
    c29e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    c2a2:	9307      	str	r3, [sp, #28]
    c2a4:	9a07      	ldr	r2, [sp, #28]
    c2a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c2a8:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
			if (ticker_collide->lazy_current >
    c2ac:	8bfb      	ldrh	r3, [r7, #30]
			    ticker_collide->lazy_periodic) {
    c2ae:	8bba      	ldrh	r2, [r7, #28]
			if (ticker_collide->lazy_current >
    c2b0:	4293      	cmp	r3, r2
				skip_collide = ticker_collide->lazy_current -
    c2b2:	bf88      	it	hi
    c2b4:	1a9b      	subhi	r3, r3, r2
			if (ticker_collide->ticks_periodic &&
    c2b6:	687a      	ldr	r2, [r7, #4]
				skip_collide = ticker_collide->lazy_current -
    c2b8:	bf8c      	ite	hi
    c2ba:	b29b      	uxthhi	r3, r3
				skip_collide = 0;
    c2bc:	2300      	movls	r3, #0
			if (ticker_collide->ticks_periodic &&
    c2be:	2a00      	cmp	r2, #0
    c2c0:	d094      	beq.n	c1ec <ticker_job+0x540>
    c2c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    c2c4:	4293      	cmp	r3, r2
    c2c6:	d891      	bhi.n	c1ec <ticker_job+0x540>
			    skip_collide <= skip &&
    c2c8:	78fa      	ldrb	r2, [r7, #3]
    c2ca:	78e3      	ldrb	r3, [r4, #3]
    c2cc:	429a      	cmp	r2, r3
    c2ce:	d28d      	bcs.n	c1ec <ticker_job+0x540>
					ticker_dequeue(instance, id_collide);
    c2d0:	4631      	mov	r1, r6
    c2d2:	4658      	mov	r0, fp
    c2d4:	f7ff fc3f 	bl	bb56 <ticker_dequeue>
				ticker_collide->req = ticker_collide->ack;
    c2d8:	78bb      	ldrb	r3, [r7, #2]
    c2da:	707b      	strb	r3, [r7, #1]
				ticker_collide->next = *insert_head;
    c2dc:	9a07      	ldr	r2, [sp, #28]
    c2de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
				ticker_collide->ticks_to_expire =
    c2e0:	60b8      	str	r0, [r7, #8]
				ticker_collide->next = *insert_head;
    c2e2:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
    c2e6:	46b2      	mov	sl, r6
    c2e8:	e6e9      	b.n	c0be <ticker_job+0x412>
			return TICKER_STATUS_FAILURE;
    c2ea:	2101      	movs	r1, #1
    c2ec:	e72f      	b.n	c14e <ticker_job+0x4a2>
		user = &users[count_user];
    c2ee:	9b03      	ldr	r3, [sp, #12]
    c2f0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
		user_op = &user->user_op[0];
    c2f4:	686e      	ldr	r6, [r5, #4]
		while (user->first != user->last) {
    c2f6:	786b      	ldrb	r3, [r5, #1]
    c2f8:	78ea      	ldrb	r2, [r5, #3]
    c2fa:	429a      	cmp	r2, r3
    c2fc:	d102      	bne.n	c304 <ticker_job+0x658>
    c2fe:	3c01      	subs	r4, #1
    c300:	b2e4      	uxtb	r4, r4
    c302:	e551      	b.n	bda8 <ticker_job+0xfc>
			ticker_job_op_inquire(instance, &user_op[user->first]);
    c304:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    c308:	011b      	lsls	r3, r3, #4
    c30a:	18f2      	adds	r2, r6, r3
	switch (uop->op) {
    c30c:	5cf3      	ldrb	r3, [r6, r3]
    c30e:	2b01      	cmp	r3, #1
    c310:	d025      	beq.n	c35e <ticker_job+0x6b2>
    c312:	2b02      	cmp	r3, #2
    c314:	d12a      	bne.n	c36c <ticker_job+0x6c0>
		ticker_by_next_slot_get(instance,
    c316:	f8d2 c004 	ldr.w	ip, [r2, #4]
    c31a:	6893      	ldr	r3, [r2, #8]
	_ticker_id_head = *ticker_id_head;
    c31c:	f89c 0000 	ldrb.w	r0, [ip]
		ticker_by_next_slot_get(instance,
    c320:	f8d2 900c 	ldr.w	r9, [r2, #12]
	node = instance->node;
    c324:	f8db e000 	ldr.w	lr, [fp]
	if ((_ticker_id_head == TICKER_NULL) ||
    c328:	28ff      	cmp	r0, #255	; 0xff
    c32a:	d004      	beq.n	c336 <ticker_job+0x68a>
    c32c:	6819      	ldr	r1, [r3, #0]
    c32e:	f8db 7014 	ldr.w	r7, [fp, #20]
    c332:	42b9      	cmp	r1, r7
    c334:	d023      	beq.n	c37e <ticker_job+0x6d2>
		*ticks_current = instance->ticks_current;
    c336:	f8db 0014 	ldr.w	r0, [fp, #20]
		_ticker_id_head = instance->ticker_id_head;
    c33a:	f89b 101d 	ldrb.w	r1, [fp, #29]
		*ticks_current = instance->ticks_current;
    c33e:	6018      	str	r0, [r3, #0]
		_ticks_to_expire = 0;
    c340:	2300      	movs	r3, #0
	while ((_ticker_id_head != TICKER_NULL) &&
    c342:	29ff      	cmp	r1, #255	; 0xff
    c344:	d007      	beq.n	c356 <ticker_job+0x6aa>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0)) {
    c346:	eb01 0a81 	add.w	sl, r1, r1, lsl #2
    c34a:	eb0e 00ca 	add.w	r0, lr, sl, lsl #3
	while ((_ticker_id_head != TICKER_NULL) &&
    c34e:	6987      	ldr	r7, [r0, #24]
    c350:	6880      	ldr	r0, [r0, #8]
    c352:	b1df      	cbz	r7, c38c <ticker_job+0x6e0>
		_ticks_to_expire += ticker->ticks_to_expire;
    c354:	4403      	add	r3, r0
	*ticker_id_head = _ticker_id_head;
    c356:	f88c 1000 	strb.w	r1, [ip]
	*ticks_to_expire = _ticks_to_expire;
    c35a:	f8c9 3000 	str.w	r3, [r9]
		fp_op_func = uop->fp_op_func;
    c35e:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uop->status = TICKER_STATUS_SUCCESS;
    c360:	f8c2 8024 	str.w	r8, [r2, #36]	; 0x24
	if (fp_op_func) {
    c364:	b113      	cbz	r3, c36c <ticker_job+0x6c0>
		fp_op_func(uop->status, uop->op_context);
    c366:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    c368:	2000      	movs	r0, #0
    c36a:	4798      	blx	r3
			first = user->first + 1;
    c36c:	786b      	ldrb	r3, [r5, #1]
			if (first == user->count_user_op) {
    c36e:	782a      	ldrb	r2, [r5, #0]
			first = user->first + 1;
    c370:	3301      	adds	r3, #1
    c372:	b2db      	uxtb	r3, r3
				first = 0;
    c374:	429a      	cmp	r2, r3
    c376:	bf08      	it	eq
    c378:	2300      	moveq	r3, #0
			user->first = first;
    c37a:	706b      	strb	r3, [r5, #1]
    c37c:	e7bb      	b.n	c2f6 <ticker_job+0x64a>
		ticker = &node[_ticker_id_head];
    c37e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
	_ticks_to_expire = *ticks_to_expire;
    c382:	f8d9 3000 	ldr.w	r3, [r9]
		_ticker_id_head = ticker->next;
    c386:	f81e 1030 	ldrb.w	r1, [lr, r0, lsl #3]
    c38a:	e7da      	b.n	c342 <ticker_job+0x696>
		_ticks_to_expire += ticker->ticks_to_expire;
    c38c:	4403      	add	r3, r0
		_ticker_id_head = ticker->next;
    c38e:	f81e 103a 	ldrb.w	r1, [lr, sl, lsl #3]
    c392:	e7d6      	b.n	c342 <ticker_job+0x696>
	if (ticker_id_old_head == TICKER_NULL) {
    c394:	9b05      	ldr	r3, [sp, #20]
    c396:	2bff      	cmp	r3, #255	; 0xff
    c398:	d107      	bne.n	c3aa <ticker_job+0x6fe>
		ticks_current = cntr_cnt_get();
    c39a:	f00c f865 	bl	18468 <cntr_cnt_get>
    c39e:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
    c3a0:	f00c f826 	bl	183f0 <cntr_start>
    c3a4:	b908      	cbnz	r0, c3aa <ticker_job+0x6fe>
			instance->ticks_current = ticks_current;
    c3a6:	f8cb 4014 	str.w	r4, [fp, #20]
	ticker = &instance->node[instance->ticker_id_head];
    c3aa:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker->ticks_to_expire;
    c3ae:	f8db 2000 	ldr.w	r2, [fp]
	ticker = &instance->node[instance->ticker_id_head];
    c3b2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	ticks_to_expire = ticker->ticks_to_expire;
    c3b6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    c3ba:	260a      	movs	r6, #10
    c3bc:	689d      	ldr	r5, [r3, #8]
		ctr = cntr_cnt_get();
    c3be:	f00c f853 	bl	18468 <cntr_cnt_get>
		cc = instance->ticks_current;
    c3c2:	f8db 4014 	ldr.w	r4, [fp, #20]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    c3c6:	1b03      	subs	r3, r0, r4
    c3c8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
    c3cc:	3303      	adds	r3, #3
		cc += ((ticks_elapsed < ticks_to_expire) ?
    c3ce:	42ab      	cmp	r3, r5
    c3d0:	bf2c      	ite	cs
    c3d2:	18e4      	addcs	r4, r4, r3
    c3d4:	1964      	addcc	r4, r4, r5
		cc &= 0x00FFFFFF;
    c3d6:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		ctr = cntr_cnt_get();
    c3da:	4607      	mov	r7, r0
		instance->trigger_set_cb(cc);
    c3dc:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
    c3e0:	4620      	mov	r0, r4
    c3e2:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
    c3e4:	f00c f840 	bl	18468 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    c3e8:	1bc0      	subs	r0, r0, r7
    c3ea:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    c3ee:	1be4      	subs	r4, r4, r7
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
    c3f0:	3003      	adds	r0, #3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    c3f2:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
    c3f6:	42a0      	cmp	r0, r4
    c3f8:	f67f ace8 	bls.w	bdcc <ticker_job+0x120>
		LL_ASSERT(i);
    c3fc:	3e01      	subs	r6, #1
    c3fe:	d1de      	bne.n	c3be <ticker_job+0x712>
    c400:	4b11      	ldr	r3, [pc, #68]	; (c448 <ticker_job+0x79c>)
    c402:	9301      	str	r3, [sp, #4]
    c404:	9300      	str	r3, [sp, #0]
    c406:	4a11      	ldr	r2, [pc, #68]	; (c44c <ticker_job+0x7a0>)
    c408:	4b11      	ldr	r3, [pc, #68]	; (c450 <ticker_job+0x7a4>)
    c40a:	4912      	ldr	r1, [pc, #72]	; (c454 <ticker_job+0x7a8>)
    c40c:	4812      	ldr	r0, [pc, #72]	; (c458 <ticker_job+0x7ac>)
    c40e:	f7f5 ff41 	bl	2294 <printk>
    c412:	4040      	eors	r0, r0
    c414:	f380 8811 	msr	BASEPRI, r0
    c418:	f04f 0004 	mov.w	r0, #4
    c41c:	df02      	svc	2
	instance->job_guard = 0;
    c41e:	2300      	movs	r3, #0
    c420:	f88b 301e 	strb.w	r3, [fp, #30]
    c424:	e4c8      	b.n	bdb8 <ticker_job+0x10c>
	if (!pending) {
    c426:	2b00      	cmp	r3, #0
    c428:	d1f9      	bne.n	c41e <ticker_job+0x772>
		flag_compare_update = 1;
    c42a:	2301      	movs	r3, #1
    c42c:	9304      	str	r3, [sp, #16]
    c42e:	e4b2      	b.n	bd96 <ticker_job+0xea>
	while (id_insert !=
    c430:	45b0      	cmp	r8, r6
    c432:	f47f af33 	bne.w	c29c <ticker_job+0x5f0>
    c436:	e686      	b.n	c146 <ticker_job+0x49a>
}
    c438:	b015      	add	sp, #84	; 0x54
    c43a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c43e:	bf00      	nop
    c440:	ff172b5a 	.word	0xff172b5a
    c444:	7f172b59 	.word	0x7f172b59
    c448:	00023dae 	.word	0x00023dae
    c44c:	00022d76 	.word	0x00022d76
    c450:	00025547 	.word	0x00025547
    c454:	000272d8 	.word	0x000272d8
    c458:	00025561 	.word	0x00025561

0000c45c <ticker_init>:
{
    c45c:	b5f0      	push	{r4, r5, r6, r7, lr}
	instance->count_node = count_node;
    c45e:	4d1a      	ldr	r5, [pc, #104]	; (c4c8 <ticker_init+0x6c>)
{
    c460:	9f05      	ldr	r7, [sp, #20]
    c462:	f89d 4018 	ldrb.w	r4, [sp, #24]
	instance->count_node = count_node;
    c466:	262c      	movs	r6, #44	; 0x2c
    c468:	4346      	muls	r6, r0
    c46a:	eb05 0e06 	add.w	lr, r5, r6
	instance->node = node;
    c46e:	51aa      	str	r2, [r5, r6]
	instance->count_node = count_node;
    c470:	f88e 1008 	strb.w	r1, [lr, #8]
	struct ticker_user_op *user_op_ = (void *)user_op;
    c474:	9907      	ldr	r1, [sp, #28]
	instance->count_user = count_user;
    c476:	f88e 3009 	strb.w	r3, [lr, #9]
	instance->user = user;
    c47a:	f8ce 7004 	str.w	r7, [lr, #4]
	while (count_user--) {
    c47e:	3b01      	subs	r3, #1
    c480:	b2db      	uxtb	r3, r3
    c482:	2bff      	cmp	r3, #255	; 0xff
    c484:	d111      	bne.n	c4aa <ticker_init+0x4e>
	if (count_op) {
    c486:	b9ec      	cbnz	r4, c4c4 <ticker_init+0x68>
	instance->caller_id_get_cb = caller_id_get_cb;
    c488:	222c      	movs	r2, #44	; 0x2c
    c48a:	fb02 5200 	mla	r2, r2, r0, r5
    c48e:	9908      	ldr	r1, [sp, #32]
    c490:	6211      	str	r1, [r2, #32]
	instance->sched_cb = sched_cb;
    c492:	9909      	ldr	r1, [sp, #36]	; 0x24
    c494:	6251      	str	r1, [r2, #36]	; 0x24
	instance->trigger_set_cb = trigger_set_cb;
    c496:	990a      	ldr	r1, [sp, #40]	; 0x28
    c498:	6291      	str	r1, [r2, #40]	; 0x28
	instance->ticker_id_head = TICKER_NULL;
    c49a:	7753      	strb	r3, [r2, #29]
	instance->ticker_id_slot_previous = TICKER_NULL;
    c49c:	7713      	strb	r3, [r2, #28]
	instance->ticks_slot_previous = 0;
    c49e:	6194      	str	r4, [r2, #24]
	instance->ticks_current = 0;
    c4a0:	6154      	str	r4, [r2, #20]
	instance->ticks_elapsed_first = 0;
    c4a2:	7294      	strb	r4, [r2, #10]
	instance->ticks_elapsed_last = 0;
    c4a4:	72d4      	strb	r4, [r2, #11]
	return TICKER_STATUS_SUCCESS;
    c4a6:	4620      	mov	r0, r4
    c4a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		users[count_user].user_op = user_op_;
    c4aa:	b21a      	sxth	r2, r3
    c4ac:	eb07 06c2 	add.w	r6, r7, r2, lsl #3
    c4b0:	6071      	str	r1, [r6, #4]
		user_op_ += users[count_user].count_user_op;
    c4b2:	f817 2032 	ldrb.w	r2, [r7, r2, lsl #3]
    c4b6:	eb02 0642 	add.w	r6, r2, r2, lsl #1
		count_op -= users[count_user].count_user_op;
    c4ba:	1aa4      	subs	r4, r4, r2
		user_op_ += users[count_user].count_user_op;
    c4bc:	eb01 1106 	add.w	r1, r1, r6, lsl #4
		count_op -= users[count_user].count_user_op;
    c4c0:	b2e4      	uxtb	r4, r4
    c4c2:	e7dc      	b.n	c47e <ticker_init+0x22>
		return TICKER_STATUS_FAILURE;
    c4c4:	2001      	movs	r0, #1
}
    c4c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c4c8:	20000ae8 	.word	0x20000ae8

0000c4cc <ticker_trigger>:
	instance = &_instance[instance_index];
    c4cc:	4a07      	ldr	r2, [pc, #28]	; (c4ec <ticker_trigger+0x20>)
    c4ce:	212c      	movs	r1, #44	; 0x2c
    c4d0:	fb00 2301 	mla	r3, r0, r1, r2
{
    c4d4:	b410      	push	{r4}
	if (instance->sched_cb) {
    c4d6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    c4d8:	b12c      	cbz	r4, c4e6 <ticker_trigger+0x1a>
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    c4da:	46a4      	mov	ip, r4
    c4dc:	2201      	movs	r2, #1
    c4de:	2103      	movs	r1, #3
    c4e0:	2002      	movs	r0, #2
}
    c4e2:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    c4e4:	4760      	bx	ip
}
    c4e6:	bc10      	pop	{r4}
    c4e8:	4770      	bx	lr
    c4ea:	bf00      	nop
    c4ec:	20000ae8 	.word	0x20000ae8

0000c4f0 <ticker_start>:
{
    c4f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    c4f4:	4f25      	ldr	r7, [pc, #148]	; (c58c <ticker_start+0x9c>)
    c4f6:	f04f 082c 	mov.w	r8, #44	; 0x2c
{
    c4fa:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    c4fc:	fb08 7000 	mla	r0, r8, r0, r7
    c500:	fa0f fc81 	sxth.w	ip, r1
    c504:	f8d0 e004 	ldr.w	lr, [r0, #4]
    c508:	eb0e 06cc 	add.w	r6, lr, ip, lsl #3
	if (last >= user->count_user_op) {
    c50c:	f81e e03c 	ldrb.w	lr, [lr, ip, lsl #3]
	last = user->last + 1;
    c510:	78f4      	ldrb	r4, [r6, #3]
    c512:	1c65      	adds	r5, r4, #1
    c514:	b2ed      	uxtb	r5, r5
		last = 0;
    c516:	45ae      	cmp	lr, r5
    c518:	bf98      	it	ls
    c51a:	2500      	movls	r5, #0
	if (last == user->first) {
    c51c:	f896 e001 	ldrb.w	lr, [r6, #1]
    c520:	45ae      	cmp	lr, r5
    c522:	d02f      	beq.n	c584 <ticker_start+0x94>
	user_op = &user->user_op[user->last];
    c524:	f8d6 c004 	ldr.w	ip, [r6, #4]
    c528:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    c52c:	ea4f 1e04 	mov.w	lr, r4, lsl #4
    c530:	eb0c 040e 	add.w	r4, ip, lr
	user_op->op = TICKER_USER_OP_TYPE_START;
    c534:	f04f 0a03 	mov.w	sl, #3
    c538:	f80c a00e 	strb.w	sl, [ip, lr]
	user_op->params.start.ticks_at_start = ticks_anchor;
    c53c:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
    c53e:	9b08      	ldr	r3, [sp, #32]
    c540:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    c542:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c544:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    c546:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c548:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    c54a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c54c:	61a3      	str	r3, [r4, #24]
	user_op->params.start.lazy = lazy;
    c54e:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    c552:	82a3      	strh	r3, [r4, #20]
	user_op->params.start.fp_timeout_func = fp_timeout_func;
    c554:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c556:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
    c558:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c55a:	6223      	str	r3, [r4, #32]
	user_op->status = TICKER_STATUS_BUSY;
    c55c:	2302      	movs	r3, #2
    c55e:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    c560:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c562:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    c564:	9b10      	ldr	r3, [sp, #64]	; 0x40
	user_op->id = ticker_id;
    c566:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    c568:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    c56a:	70f5      	strb	r5, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    c56c:	6a45      	ldr	r5, [r0, #36]	; 0x24
    c56e:	6a03      	ldr	r3, [r0, #32]
    c570:	4608      	mov	r0, r1
    c572:	4798      	blx	r3
    c574:	fb09 7308 	mla	r3, r9, r8, r7
    c578:	2200      	movs	r2, #0
    c57a:	2104      	movs	r1, #4
    c57c:	47a8      	blx	r5
	return user_op->status;
    c57e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    c580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    c584:	2001      	movs	r0, #1
}
    c586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c58a:	bf00      	nop
    c58c:	20000ae8 	.word	0x20000ae8

0000c590 <ticker_update>:
{
    c590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    c594:	f8df 8090 	ldr.w	r8, [pc, #144]	; c628 <ticker_update+0x98>
    c598:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    c59c:	fb0a 8e00 	mla	lr, sl, r0, r8
    c5a0:	b20f      	sxth	r7, r1
    c5a2:	f8de 5004 	ldr.w	r5, [lr, #4]
{
    c5a6:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    c5a8:	eb05 00c7 	add.w	r0, r5, r7, lsl #3
	if (last >= user->count_user_op) {
    c5ac:	f815 5037 	ldrb.w	r5, [r5, r7, lsl #3]
	last = user->last + 1;
    c5b0:	78c4      	ldrb	r4, [r0, #3]
    c5b2:	1c66      	adds	r6, r4, #1
    c5b4:	b2f6      	uxtb	r6, r6
		last = 0;
    c5b6:	42b5      	cmp	r5, r6
    c5b8:	bf98      	it	ls
    c5ba:	2600      	movls	r6, #0
	if (last == user->first) {
    c5bc:	7845      	ldrb	r5, [r0, #1]
    c5be:	42b5      	cmp	r5, r6
    c5c0:	d02f      	beq.n	c622 <ticker_update+0x92>
	user_op = &user->user_op[user->last];
    c5c2:	f8d0 c004 	ldr.w	ip, [r0, #4]
    c5c6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    c5ca:	0125      	lsls	r5, r4, #4
    c5cc:	eb0c 0405 	add.w	r4, ip, r5
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    c5d0:	2704      	movs	r7, #4
    c5d2:	f80c 7005 	strb.w	r7, [ip, r5]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    c5d6:	80a3      	strh	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    c5d8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    c5dc:	80e3      	strh	r3, [r4, #6]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    c5de:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    c5e2:	8123      	strh	r3, [r4, #8]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    c5e4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    c5e8:	8163      	strh	r3, [r4, #10]
	user_op->params.update.lazy = lazy;
    c5ea:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    c5ee:	81a3      	strh	r3, [r4, #12]
	user_op->params.update.force = force;
    c5f0:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    c5f4:	73a3      	strb	r3, [r4, #14]
	user_op->status = TICKER_STATUS_BUSY;
    c5f6:	2302      	movs	r3, #2
    c5f8:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    c5fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c5fc:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    c5fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	user_op->id = ticker_id;
    c600:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    c602:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    c604:	70c6      	strb	r6, [r0, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    c606:	f8de 3020 	ldr.w	r3, [lr, #32]
    c60a:	f8de 5024 	ldr.w	r5, [lr, #36]	; 0x24
    c60e:	4608      	mov	r0, r1
    c610:	4798      	blx	r3
    c612:	fb09 830a 	mla	r3, r9, sl, r8
    c616:	2200      	movs	r2, #0
    c618:	4639      	mov	r1, r7
    c61a:	47a8      	blx	r5
	return user_op->status;
    c61c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    c61e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    c622:	2001      	movs	r0, #1
}
    c624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c628:	20000ae8 	.word	0x20000ae8

0000c62c <ticker_stop>:
{
    c62c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    c630:	f8df 906c 	ldr.w	r9, [pc, #108]	; c6a0 <ticker_stop+0x74>
    c634:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    c638:	fb0a 9e00 	mla	lr, sl, r0, r9
{
    c63c:	4680      	mov	r8, r0
	user = &instance->user[user_id];
    c63e:	f8de 0004 	ldr.w	r0, [lr, #4]
    c642:	b20e      	sxth	r6, r1
    c644:	eb00 07c6 	add.w	r7, r0, r6, lsl #3
	if (last >= user->count_user_op) {
    c648:	f810 0036 	ldrb.w	r0, [r0, r6, lsl #3]
	last = user->last + 1;
    c64c:	78fc      	ldrb	r4, [r7, #3]
    c64e:	1c65      	adds	r5, r4, #1
    c650:	b2ed      	uxtb	r5, r5
		last = 0;
    c652:	42a8      	cmp	r0, r5
    c654:	bf98      	it	ls
    c656:	2500      	movls	r5, #0
	if (last == user->first) {
    c658:	7878      	ldrb	r0, [r7, #1]
    c65a:	42a8      	cmp	r0, r5
    c65c:	d01d      	beq.n	c69a <ticker_stop+0x6e>
	user_op = &user->user_op[user->last];
    c65e:	6878      	ldr	r0, [r7, #4]
    c660:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    c664:	0124      	lsls	r4, r4, #4
    c666:	1906      	adds	r6, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    c668:	f04f 0c05 	mov.w	ip, #5
    c66c:	f800 c004 	strb.w	ip, [r0, r4]
	user_op->id = ticker_id;
    c670:	7072      	strb	r2, [r6, #1]
	user_op->fp_op_func = fp_op_func;
    c672:	62b3      	str	r3, [r6, #40]	; 0x28
	user_op->status = TICKER_STATUS_BUSY;
    c674:	2202      	movs	r2, #2
	user_op->op_context = op_context;
    c676:	9b08      	ldr	r3, [sp, #32]
	user_op->status = TICKER_STATUS_BUSY;
    c678:	6272      	str	r2, [r6, #36]	; 0x24
	user_op->op_context = op_context;
    c67a:	62f3      	str	r3, [r6, #44]	; 0x2c
	user->last = last;
    c67c:	70fd      	strb	r5, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    c67e:	f8de 3020 	ldr.w	r3, [lr, #32]
    c682:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
    c686:	4608      	mov	r0, r1
    c688:	4798      	blx	r3
    c68a:	fb08 930a 	mla	r3, r8, sl, r9
    c68e:	2200      	movs	r2, #0
    c690:	2104      	movs	r1, #4
    c692:	47a0      	blx	r4
	return user_op->status;
    c694:	6a70      	ldr	r0, [r6, #36]	; 0x24
    c696:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    c69a:	2001      	movs	r0, #1
}
    c69c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c6a0:	20000ae8 	.word	0x20000ae8

0000c6a4 <ticker_next_slot_get>:
{
    c6a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    c6a8:	f8df 8078 	ldr.w	r8, [pc, #120]	; c724 <ticker_next_slot_get+0x80>
    c6ac:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
{
    c6b0:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    c6b2:	fb0a 8000 	mla	r0, sl, r0, r8
    c6b6:	fa0f fe81 	sxth.w	lr, r1
    c6ba:	6845      	ldr	r5, [r0, #4]
    c6bc:	eb05 07ce 	add.w	r7, r5, lr, lsl #3
	if (last >= user->count_user_op) {
    c6c0:	f815 503e 	ldrb.w	r5, [r5, lr, lsl #3]
	last = user->last + 1;
    c6c4:	78fc      	ldrb	r4, [r7, #3]
    c6c6:	1c66      	adds	r6, r4, #1
    c6c8:	b2f6      	uxtb	r6, r6
		last = 0;
    c6ca:	42b5      	cmp	r5, r6
    c6cc:	bf98      	it	ls
    c6ce:	2600      	movls	r6, #0
	if (last == user->first) {
    c6d0:	787d      	ldrb	r5, [r7, #1]
    c6d2:	42b5      	cmp	r5, r6
    c6d4:	d023      	beq.n	c71e <ticker_next_slot_get+0x7a>
	user_op = &user->user_op[user->last];
    c6d6:	f8d7 c004 	ldr.w	ip, [r7, #4]
    c6da:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    c6de:	0125      	lsls	r5, r4, #4
    c6e0:	eb0c 0405 	add.w	r4, ip, r5
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
    c6e4:	f04f 0e02 	mov.w	lr, #2
    c6e8:	f80c e005 	strb.w	lr, [ip, r5]
	user_op->params.slot_get.ticks_current = ticks_current;
    c6ec:	60a3      	str	r3, [r4, #8]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
    c6ee:	9b08      	ldr	r3, [sp, #32]
    c6f0:	60e3      	str	r3, [r4, #12]
	user_op->fp_op_func = fp_op_func;
    c6f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c6f4:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->id = TICKER_NULL;
    c6f6:	25ff      	movs	r5, #255	; 0xff
	user_op->op_context = op_context;
    c6f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	user_op->params.slot_get.ticker_id = ticker_id;
    c6fa:	6062      	str	r2, [r4, #4]
	user_op->id = TICKER_NULL;
    c6fc:	7065      	strb	r5, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
    c6fe:	f8c4 e024 	str.w	lr, [r4, #36]	; 0x24
	user_op->op_context = op_context;
    c702:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    c704:	70fe      	strb	r6, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    c706:	6a45      	ldr	r5, [r0, #36]	; 0x24
    c708:	6a03      	ldr	r3, [r0, #32]
    c70a:	4608      	mov	r0, r1
    c70c:	4798      	blx	r3
    c70e:	fb09 830a 	mla	r3, r9, sl, r8
    c712:	2200      	movs	r2, #0
    c714:	2104      	movs	r1, #4
    c716:	47a8      	blx	r5
	return user_op->status;
    c718:	6a60      	ldr	r0, [r4, #36]	; 0x24
    c71a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    c71e:	2001      	movs	r0, #1
}
    c720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c724:	20000ae8 	.word	0x20000ae8

0000c728 <ticker_job_idle_get>:
{
    c728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    c72c:	f8df 906c 	ldr.w	r9, [pc, #108]	; c79c <ticker_job_idle_get+0x74>
    c730:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    c734:	fb0a 9e00 	mla	lr, sl, r0, r9
{
    c738:	4680      	mov	r8, r0
	user = &instance->user[user_id];
    c73a:	f8de 0004 	ldr.w	r0, [lr, #4]
    c73e:	b20e      	sxth	r6, r1
    c740:	eb00 07c6 	add.w	r7, r0, r6, lsl #3
	if (last >= user->count_user_op) {
    c744:	f810 0036 	ldrb.w	r0, [r0, r6, lsl #3]
	last = user->last + 1;
    c748:	78fc      	ldrb	r4, [r7, #3]
    c74a:	1c65      	adds	r5, r4, #1
    c74c:	b2ed      	uxtb	r5, r5
		last = 0;
    c74e:	42a8      	cmp	r0, r5
    c750:	bf98      	it	ls
    c752:	2500      	movls	r5, #0
	if (last == user->first) {
    c754:	7878      	ldrb	r0, [r7, #1]
    c756:	42a8      	cmp	r0, r5
    c758:	d01d      	beq.n	c796 <ticker_job_idle_get+0x6e>
	user_op = &user->user_op[user->last];
    c75a:	6878      	ldr	r0, [r7, #4]
    c75c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    c760:	0124      	lsls	r4, r4, #4
    c762:	1906      	adds	r6, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
    c764:	f04f 0c01 	mov.w	ip, #1
    c768:	f800 c004 	strb.w	ip, [r0, r4]
	user_op->id = TICKER_NULL;
    c76c:	20ff      	movs	r0, #255	; 0xff
    c76e:	7070      	strb	r0, [r6, #1]
	user_op->status = TICKER_STATUS_BUSY;
    c770:	2002      	movs	r0, #2
    c772:	6270      	str	r0, [r6, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    c774:	62b2      	str	r2, [r6, #40]	; 0x28
	user_op->op_context = op_context;
    c776:	62f3      	str	r3, [r6, #44]	; 0x2c
	user->last = last;
    c778:	70fd      	strb	r5, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    c77a:	f8de 3020 	ldr.w	r3, [lr, #32]
    c77e:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
    c782:	4608      	mov	r0, r1
    c784:	4798      	blx	r3
    c786:	fb08 930a 	mla	r3, r8, sl, r9
    c78a:	2200      	movs	r2, #0
    c78c:	2104      	movs	r1, #4
    c78e:	47a0      	blx	r4
	return user_op->status;
    c790:	6a70      	ldr	r0, [r6, #36]	; 0x24
    c792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    c796:	2001      	movs	r0, #1
}
    c798:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c79c:	20000ae8 	.word	0x20000ae8

0000c7a0 <ticker_job_sched>:
{
    c7a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    c7a4:	4c08      	ldr	r4, [pc, #32]	; (c7c8 <ticker_job_sched+0x28>)
    c7a6:	252c      	movs	r5, #44	; 0x2c
    c7a8:	fb05 4300 	mla	r3, r5, r0, r4
{
    c7ac:	4606      	mov	r6, r0
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    c7ae:	6a5f      	ldr	r7, [r3, #36]	; 0x24
    c7b0:	6a1b      	ldr	r3, [r3, #32]
    c7b2:	4608      	mov	r0, r1
    c7b4:	4798      	blx	r3
    c7b6:	fb06 4305 	mla	r3, r6, r5, r4
    c7ba:	46bc      	mov	ip, r7
    c7bc:	2200      	movs	r2, #0
    c7be:	2104      	movs	r1, #4
}
    c7c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    c7c4:	4760      	bx	ip
    c7c6:	bf00      	nop
    c7c8:	20000ae8 	.word	0x20000ae8

0000c7cc <ticker_ticks_now_get>:
	return cntr_cnt_get();
    c7cc:	f00b be4c 	b.w	18468 <cntr_cnt_get>

0000c7d0 <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    c7d0:	1a40      	subs	r0, r0, r1
}
    c7d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    c7d6:	4770      	bx	lr

0000c7d8 <ll_addr_get>:

static u8_t pub_addr[BDADDR_SIZE];
static u8_t rnd_addr[BDADDR_SIZE];

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
    c7d8:	b508      	push	{r3, lr}
    c7da:	4603      	mov	r3, r0
	if (addr_type > 1) {
    c7dc:	2b01      	cmp	r3, #1
{
    c7de:	4608      	mov	r0, r1
	if (addr_type > 1) {
    c7e0:	d80e      	bhi.n	c800 <ll_addr_get+0x28>
		return NULL;
	}

	if (addr_type) {
    c7e2:	b133      	cbz	r3, c7f2 <ll_addr_get+0x1a>
		if (bdaddr) {
    c7e4:	b119      	cbz	r1, c7ee <ll_addr_get+0x16>
			memcpy(bdaddr, rnd_addr, BDADDR_SIZE);
    c7e6:	2206      	movs	r2, #6
    c7e8:	4906      	ldr	r1, [pc, #24]	; (c804 <ll_addr_get+0x2c>)
    c7ea:	f7f3 ffd2 	bl	792 <memcpy>
		}

		return rnd_addr;
    c7ee:	4805      	ldr	r0, [pc, #20]	; (c804 <ll_addr_get+0x2c>)
    c7f0:	bd08      	pop	{r3, pc}
	}

	if (bdaddr) {
    c7f2:	b119      	cbz	r1, c7fc <ll_addr_get+0x24>
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
    c7f4:	2206      	movs	r2, #6
    c7f6:	4904      	ldr	r1, [pc, #16]	; (c808 <ll_addr_get+0x30>)
    c7f8:	f7f3 ffcb 	bl	792 <memcpy>
	}

	return pub_addr;
    c7fc:	4802      	ldr	r0, [pc, #8]	; (c808 <ll_addr_get+0x30>)
}
    c7fe:	bd08      	pop	{r3, pc}
		return NULL;
    c800:	2000      	movs	r0, #0
    c802:	bd08      	pop	{r3, pc}
    c804:	20000b46 	.word	0x20000b46
    c808:	20000b40 	.word	0x20000b40

0000c80c <ll_addr_set>:

u32_t ll_addr_set(u8_t addr_type, u8_t const *const bdaddr)
{
    c80c:	b570      	push	{r4, r5, r6, lr}
    c80e:	4606      	mov	r6, r0
    c810:	460d      	mov	r5, r1
	if (ll_adv_is_enabled() ||
    c812:	f008 ffbf 	bl	15794 <ll_adv_is_enabled>
    c816:	4604      	mov	r4, r0
    c818:	b110      	cbz	r0, c820 <ll_addr_set+0x14>
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
    c81a:	240c      	movs	r4, #12
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
}
    c81c:	4620      	mov	r0, r4
    c81e:	bd70      	pop	{r4, r5, r6, pc}
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
    c820:	f008 ffce 	bl	157c0 <ll_scan_is_enabled>
	if (ll_adv_is_enabled() ||
    c824:	f010 0f06 	tst.w	r0, #6
    c828:	d1f7      	bne.n	c81a <ll_addr_set+0xe>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    c82a:	2206      	movs	r2, #6
    c82c:	4629      	mov	r1, r5
	if (addr_type) {
    c82e:	b11e      	cbz	r6, c838 <ll_addr_set+0x2c>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    c830:	4802      	ldr	r0, [pc, #8]	; (c83c <ll_addr_set+0x30>)
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    c832:	f7f3 ffae 	bl	792 <memcpy>
    c836:	e7f1      	b.n	c81c <ll_addr_set+0x10>
    c838:	4801      	ldr	r0, [pc, #4]	; (c840 <ll_addr_set+0x34>)
    c83a:	e7fa      	b.n	c832 <ll_addr_set+0x26>
    c83c:	20000b46 	.word	0x20000b46
    c840:	20000b40 	.word	0x20000b40

0000c844 <ll_tx_pwr_get>:
}

void ll_tx_pwr_get(s8_t *min, s8_t *max)
{
	/* TODO: Support TX Power Level other than 0dBm */
	*min = 0;
    c844:	2300      	movs	r3, #0
    c846:	7003      	strb	r3, [r0, #0]
	*max = 0;
    c848:	700b      	strb	r3, [r1, #0]
    c84a:	4770      	bx	lr

0000c84c <bt_rand>:
#include "common/log.h"

#include "hal/ecb.h"

int bt_rand(void *buf, size_t len)
{
    c84c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    c84e:	4607      	mov	r7, r0
    c850:	460e      	mov	r6, r1
	while (len) {
    c852:	460c      	mov	r4, r1
    c854:	1b35      	subs	r5, r6, r4
    c856:	443d      	add	r5, r7
    c858:	b18c      	cbz	r4, c87e <bt_rand+0x32>
		u32_t v = sys_rand32_get();
    c85a:	f7f5 ffd9 	bl	2810 <sys_rand32_get>

		if (len >= sizeof(v)) {
    c85e:	2c03      	cmp	r4, #3
		u32_t v = sys_rand32_get();
    c860:	9001      	str	r0, [sp, #4]
		if (len >= sizeof(v)) {
    c862:	d907      	bls.n	c874 <bt_rand+0x28>
			memcpy(buf, &v, sizeof(v));
    c864:	2204      	movs	r2, #4
    c866:	eb0d 0102 	add.w	r1, sp, r2
    c86a:	4628      	mov	r0, r5
    c86c:	f7f3 ff91 	bl	792 <memcpy>

			buf += sizeof(v);
			len -= sizeof(v);
    c870:	3c04      	subs	r4, #4
    c872:	e7ef      	b.n	c854 <bt_rand+0x8>
		} else {
			memcpy(buf, &v, len);
    c874:	4622      	mov	r2, r4
    c876:	a901      	add	r1, sp, #4
    c878:	4628      	mov	r0, r5
    c87a:	f7f3 ff8a 	bl	792 <memcpy>
			break;
		}
	}

	return 0;
}
    c87e:	2000      	movs	r0, #0
    c880:	b003      	add	sp, #12
    c882:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000c884 <bt_encrypt_le>:

int bt_encrypt_le(const u8_t key[16], const u8_t plaintext[16],
		  u8_t enc_data[16])
{
    c884:	b508      	push	{r3, lr}
	BT_DBG("key %s plaintext %s", bt_hex(key, 16), bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
    c886:	2300      	movs	r3, #0
    c888:	f00b fe22 	bl	184d0 <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
    c88c:	2000      	movs	r0, #0
    c88e:	bd08      	pop	{r3, pc}

0000c890 <_hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int _hci_driver_init(struct device *unused)
{
    c890:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    c892:	4802      	ldr	r0, [pc, #8]	; (c89c <_hci_driver_init+0xc>)
    c894:	f7f8 ff6c 	bl	5770 <bt_hci_driver_register>

	return 0;
}
    c898:	2000      	movs	r0, #0
    c89a:	bd08      	pop	{r3, pc}
    c89c:	000255b0 	.word	0x000255b0

0000c8a0 <stack_analyze>:
{
    c8a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	size_t unused = 0;
    c8a2:	2300      	movs	r3, #0
	for (i = 0; i < size; i++) {
    c8a4:	429a      	cmp	r2, r3
    c8a6:	d002      	beq.n	c8ae <stack_analyze+0xe>
		if ((unsigned char)stack[i] == 0xaa) {
    c8a8:	5ccc      	ldrb	r4, [r1, r3]
    c8aa:	2caa      	cmp	r4, #170	; 0xaa
    c8ac:	d00d      	beq.n	c8ca <stack_analyze+0x2a>
	pcnt = ((size - unused) * 100) / size;
    c8ae:	1ad4      	subs	r4, r2, r3
    c8b0:	2164      	movs	r1, #100	; 0x64
    c8b2:	4361      	muls	r1, r4
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
    c8b4:	9201      	str	r2, [sp, #4]
	pcnt = ((size - unused) * 100) / size;
    c8b6:	fbb1 f1f2 	udiv	r1, r1, r2
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
    c8ba:	9400      	str	r4, [sp, #0]
    c8bc:	9102      	str	r1, [sp, #8]
    c8be:	4601      	mov	r1, r0
    c8c0:	4803      	ldr	r0, [pc, #12]	; (c8d0 <stack_analyze+0x30>)
    c8c2:	f7f5 fce7 	bl	2294 <printk>
	       size, unused, size - unused, size, pcnt);
}
    c8c6:	b004      	add	sp, #16
    c8c8:	bd10      	pop	{r4, pc}
			unused++;
    c8ca:	3301      	adds	r3, #1
    c8cc:	e7ea      	b.n	c8a4 <stack_analyze+0x4>
    c8ce:	bf00      	nop
    c8d0:	00023d7b 	.word	0x00023d7b

0000c8d4 <recv_thread>:
{
    c8d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		node_rx = k_fifo_get(&recv_fifo, K_FOREVER);
    c8d6:	4e31      	ldr	r6, [pc, #196]	; (c99c <recv_thread+0xc8>)
		if (k_uptime_get_32() - rx_ts > K_SECONDS(5)) {
    c8d8:	4d31      	ldr	r5, [pc, #196]	; (c9a0 <recv_thread+0xcc>)
		node_rx = k_fifo_get(&recv_fifo, K_FOREVER);
    c8da:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    c8de:	4630      	mov	r0, r6
    c8e0:	f014 ff3d 	bl	2175e <k_queue_get>
		if (node_rx && !buf) {
    c8e4:	4604      	mov	r4, r0
    c8e6:	2800      	cmp	r0, #0
    c8e8:	d037      	beq.n	c95a <recv_thread+0x86>
	s8_t class = hci_get_class(node_rx);
    c8ea:	f001 fde7 	bl	e4bc <hci_get_class>
	switch (class) {
    c8ee:	1e03      	subs	r3, r0, #0
    c8f0:	9403      	str	r4, [sp, #12]
    c8f2:	db03      	blt.n	c8fc <recv_thread+0x28>
    c8f4:	2b02      	cmp	r3, #2
    c8f6:	dd10      	ble.n	c91a <recv_thread+0x46>
    c8f8:	2b03      	cmp	r3, #3
    c8fa:	d042      	beq.n	c982 <recv_thread+0xae>
		LL_ASSERT(0);
    c8fc:	4b29      	ldr	r3, [pc, #164]	; (c9a4 <recv_thread+0xd0>)
    c8fe:	9301      	str	r3, [sp, #4]
    c900:	9300      	str	r3, [sp, #0]
    c902:	4a29      	ldr	r2, [pc, #164]	; (c9a8 <recv_thread+0xd4>)
    c904:	4b29      	ldr	r3, [pc, #164]	; (c9ac <recv_thread+0xd8>)
    c906:	492a      	ldr	r1, [pc, #168]	; (c9b0 <recv_thread+0xdc>)
    c908:	482a      	ldr	r0, [pc, #168]	; (c9b4 <recv_thread+0xe0>)
    c90a:	f7f5 fcc3 	bl	2294 <printk>
    c90e:	4040      	eors	r0, r0
    c910:	f380 8811 	msr	BASEPRI, r0
    c914:	f04f 0004 	mov.w	r0, #4
    c918:	df02      	svc	2
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    c91a:	2b01      	cmp	r3, #1
			buf = bt_buf_get_rx(BT_BUF_EVT, K_NO_WAIT);
    c91c:	bf0e      	itee	eq
    c91e:	2100      	moveq	r1, #0
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    c920:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    c924:	2001      	movne	r0, #1
    c926:	f7f9 f865 	bl	59f4 <bt_buf_get_rx>
    c92a:	4604      	mov	r4, r0
		if (buf) {
    c92c:	b118      	cbz	r0, c936 <recv_thread+0x62>
			hci_evt_encode(node_rx, buf);
    c92e:	4601      	mov	r1, r0
    c930:	9803      	ldr	r0, [sp, #12]
    c932:	f001 fb3b 	bl	dfac <hci_evt_encode>
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    c936:	9b03      	ldr	r3, [sp, #12]
    c938:	2100      	movs	r1, #0
    c93a:	88d8      	ldrh	r0, [r3, #6]
    c93c:	f009 fbee 	bl	1611c <radio_rx_fc_set>
	node_rx->hdr.onion.next = 0;
    c940:	a804      	add	r0, sp, #16
    c942:	2200      	movs	r2, #0
    c944:	f850 3d04 	ldr.w	r3, [r0, #-4]!
    c948:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    c94a:	f009 fb71 	bl	16030 <ll_rx_mem_release>
		if (buf) {
    c94e:	b124      	cbz	r4, c95a <recv_thread+0x86>
			if (buf->len) {
    c950:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
    c952:	4620      	mov	r0, r4
			if (buf->len) {
    c954:	b1fb      	cbz	r3, c996 <recv_thread+0xc2>
				bt_recv(buf);
    c956:	f7f8 f965 	bl	4c24 <bt_recv>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    c95a:	f015 f8ab 	bl	21ab4 <_impl_k_yield>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
    c95e:	f015 f9a3 	bl	21ca8 <_impl_k_uptime_get_32>
		if (k_uptime_get_32() - rx_ts > K_SECONDS(5)) {
    c962:	682b      	ldr	r3, [r5, #0]
    c964:	1ac0      	subs	r0, r0, r3
    c966:	f241 3388 	movw	r3, #5000	; 0x1388
    c96a:	4298      	cmp	r0, r3
    c96c:	d9b5      	bls.n	c8da <recv_thread+0x6>
			STACK_ANALYZE("recv thread stack", recv_thread_stack);
    c96e:	f240 522c 	movw	r2, #1324	; 0x52c
    c972:	4911      	ldr	r1, [pc, #68]	; (c9b8 <recv_thread+0xe4>)
    c974:	4811      	ldr	r0, [pc, #68]	; (c9bc <recv_thread+0xe8>)
    c976:	f7ff ff93 	bl	c8a0 <stack_analyze>
    c97a:	f015 f995 	bl	21ca8 <_impl_k_uptime_get_32>
			rx_ts = k_uptime_get_32();
    c97e:	6028      	str	r0, [r5, #0]
    c980:	e7ab      	b.n	c8da <recv_thread+0x6>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
    c982:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    c986:	f7f9 f835 	bl	59f4 <bt_buf_get_rx>
    c98a:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
    c98c:	4601      	mov	r1, r0
    c98e:	9803      	ldr	r0, [sp, #12]
    c990:	f001 facc 	bl	df2c <hci_acl_encode>
    c994:	e7cf      	b.n	c936 <recv_thread+0x62>
				net_buf_unref(buf);
    c996:	f00c fca7 	bl	192e8 <net_buf_unref>
    c99a:	e7de      	b.n	c95a <recv_thread+0x86>
    c99c:	2000aa2c 	.word	0x2000aa2c
    c9a0:	20000b50 	.word	0x20000b50
    c9a4:	00023dae 	.word	0x00023dae
    c9a8:	00022d76 	.word	0x00022d76
    c9ac:	00025584 	.word	0x00025584
    c9b0:	000272d8 	.word	0x000272d8
    c9b4:	00023fa5 	.word	0x00023fa5
    c9b8:	20005c08 	.word	0x20005c08
    c9bc:	00025637 	.word	0x00025637

0000c9c0 <hci_driver_send>:
{
    c9c0:	b530      	push	{r4, r5, lr}
	if (!buf->len) {
    c9c2:	8983      	ldrh	r3, [r0, #12]
{
    c9c4:	b087      	sub	sp, #28
    c9c6:	4605      	mov	r5, r0
	if (!buf->len) {
    c9c8:	b96b      	cbnz	r3, c9e6 <hci_driver_send+0x26>
		BT_ERR("Empty HCI packet");
    c9ca:	4b19      	ldr	r3, [pc, #100]	; (ca30 <hci_driver_send+0x70>)
    c9cc:	9301      	str	r3, [sp, #4]
    c9ce:	9300      	str	r3, [sp, #0]
    c9d0:	4a18      	ldr	r2, [pc, #96]	; (ca34 <hci_driver_send+0x74>)
    c9d2:	4b19      	ldr	r3, [pc, #100]	; (ca38 <hci_driver_send+0x78>)
    c9d4:	4919      	ldr	r1, [pc, #100]	; (ca3c <hci_driver_send+0x7c>)
    c9d6:	481a      	ldr	r0, [pc, #104]	; (ca40 <hci_driver_send+0x80>)
    c9d8:	f7f5 fc5c 	bl	2294 <printk>
		return -EINVAL;
    c9dc:	f06f 0415 	mvn.w	r4, #21
}
    c9e0:	4620      	mov	r0, r4
    c9e2:	b007      	add	sp, #28
    c9e4:	bd30      	pop	{r4, r5, pc}
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    c9e6:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
    c9e8:	b183      	cbz	r3, ca0c <hci_driver_send+0x4c>
    c9ea:	2b02      	cmp	r3, #2
    c9ec:	d115      	bne.n	ca1a <hci_driver_send+0x5a>
	err = hci_acl_handle(buf, &evt);
    c9ee:	a905      	add	r1, sp, #20
    c9f0:	f001 fa0c 	bl	de0c <hci_acl_handle>
    c9f4:	4604      	mov	r4, r0
	if (evt) {
    c9f6:	9805      	ldr	r0, [sp, #20]
    c9f8:	b108      	cbz	r0, c9fe <hci_driver_send+0x3e>
		bt_recv_prio(evt);
    c9fa:	f7f8 fdcd 	bl	5598 <bt_recv_prio>
	if (!err) {
    c9fe:	2c00      	cmp	r4, #0
    ca00:	d1ee      	bne.n	c9e0 <hci_driver_send+0x20>
		net_buf_unref(buf);
    ca02:	4628      	mov	r0, r5
    ca04:	f00c fc70 	bl	192e8 <net_buf_unref>
    ca08:	2400      	movs	r4, #0
    ca0a:	e7e9      	b.n	c9e0 <hci_driver_send+0x20>
	evt = hci_cmd_handle(buf);
    ca0c:	f000 fc62 	bl	d2d4 <hci_cmd_handle>
	if (evt) {
    ca10:	2800      	cmp	r0, #0
    ca12:	d0f6      	beq.n	ca02 <hci_driver_send+0x42>
		bt_recv_prio(evt);
    ca14:	f7f8 fdc0 	bl	5598 <bt_recv_prio>
    ca18:	e7f3      	b.n	ca02 <hci_driver_send+0x42>
		BT_ERR("Unknown HCI type %u", type);
    ca1a:	4a05      	ldr	r2, [pc, #20]	; (ca30 <hci_driver_send+0x70>)
    ca1c:	9202      	str	r2, [sp, #8]
    ca1e:	e88d 000c 	stmia.w	sp, {r2, r3}
    ca22:	4906      	ldr	r1, [pc, #24]	; (ca3c <hci_driver_send+0x7c>)
    ca24:	4b04      	ldr	r3, [pc, #16]	; (ca38 <hci_driver_send+0x78>)
    ca26:	4a03      	ldr	r2, [pc, #12]	; (ca34 <hci_driver_send+0x74>)
    ca28:	4806      	ldr	r0, [pc, #24]	; (ca44 <hci_driver_send+0x84>)
    ca2a:	f7f5 fc33 	bl	2294 <printk>
    ca2e:	e7d5      	b.n	c9dc <hci_driver_send+0x1c>
    ca30:	00023dae 	.word	0x00023dae
    ca34:	00022d76 	.word	0x00022d76
    ca38:	00025590 	.word	0x00025590
    ca3c:	000272d8 	.word	0x000272d8
    ca40:	000255ed 	.word	0x000255ed
    ca44:	0002560e 	.word	0x0002560e

0000ca48 <prio_recv_thread>:
{
    ca48:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    ca4c:	4f1d      	ldr	r7, [pc, #116]	; (cac4 <prio_recv_thread+0x7c>)
		if (k_uptime_get_32() - prio_ts > K_SECONDS(5)) {
    ca4e:	4c1e      	ldr	r4, [pc, #120]	; (cac8 <prio_recv_thread+0x80>)
			STACK_ANALYZE("prio recv thread stack",
    ca50:	4e1e      	ldr	r6, [pc, #120]	; (cacc <prio_recv_thread+0x84>)
		while ((num_cmplt = ll_rx_get(&node_rx, &handle))) {
    ca52:	f10d 0102 	add.w	r1, sp, #2
    ca56:	a801      	add	r0, sp, #4
    ca58:	f009 fab2 	bl	15fc0 <ll_rx_get>
    ca5c:	4605      	mov	r5, r0
    ca5e:	b940      	cbnz	r0, ca72 <prio_recv_thread+0x2a>
		if (node_rx) {
    ca60:	9b01      	ldr	r3, [sp, #4]
    ca62:	b1bb      	cbz	r3, ca94 <prio_recv_thread+0x4c>
			ll_rx_dequeue();
    ca64:	f00a f86e 	bl	16b44 <ll_rx_dequeue>
			k_fifo_put(&recv_fifo, node_rx);
    ca68:	9901      	ldr	r1, [sp, #4]
    ca6a:	4819      	ldr	r0, [pc, #100]	; (cad0 <prio_recv_thread+0x88>)
    ca6c:	f014 fe53 	bl	21716 <k_queue_append>
    ca70:	e7ef      	b.n	ca52 <prio_recv_thread+0xa>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    ca72:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ca76:	2001      	movs	r0, #1
    ca78:	f7f8 ffbc 	bl	59f4 <bt_buf_get_rx>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    ca7c:	462a      	mov	r2, r5
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    ca7e:	4680      	mov	r8, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    ca80:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    ca84:	f001 fd06 	bl	e494 <hci_num_cmplt_encode>
			bt_recv_prio(buf);
    ca88:	4640      	mov	r0, r8
    ca8a:	f7f8 fd85 	bl	5598 <bt_recv_prio>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    ca8e:	f015 f811 	bl	21ab4 <_impl_k_yield>
    ca92:	e7de      	b.n	ca52 <prio_recv_thread+0xa>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    ca94:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ca98:	4638      	mov	r0, r7
    ca9a:	f015 f8e7 	bl	21c6c <_impl_k_sem_take>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
    ca9e:	f015 f903 	bl	21ca8 <_impl_k_uptime_get_32>
		if (k_uptime_get_32() - prio_ts > K_SECONDS(5)) {
    caa2:	6823      	ldr	r3, [r4, #0]
    caa4:	1ac0      	subs	r0, r0, r3
    caa6:	f241 3388 	movw	r3, #5000	; 0x1388
    caaa:	4298      	cmp	r0, r3
    caac:	d9d1      	bls.n	ca52 <prio_recv_thread+0xa>
			STACK_ANALYZE("prio recv thread stack",
    caae:	f44f 723b 	mov.w	r2, #748	; 0x2ec
    cab2:	4631      	mov	r1, r6
    cab4:	4807      	ldr	r0, [pc, #28]	; (cad4 <prio_recv_thread+0x8c>)
    cab6:	f7ff fef3 	bl	c8a0 <stack_analyze>
    caba:	f015 f8f5 	bl	21ca8 <_impl_k_uptime_get_32>
			prio_ts = k_uptime_get_32();
    cabe:	6020      	str	r0, [r4, #0]
    cac0:	e7c7      	b.n	ca52 <prio_recv_thread+0xa>
    cac2:	bf00      	nop
    cac4:	2000a9e4 	.word	0x2000a9e4
    cac8:	20000b4c 	.word	0x20000b4c
    cacc:	20005918 	.word	0x20005918
    cad0:	2000aa2c 	.word	0x2000aa2c
    cad4:	00025632 	.word	0x00025632

0000cad8 <hci_driver_open>:
{
    cad8:	b510      	push	{r4, lr}
	err = ll_init(&sem_prio_recv);
    cada:	481a      	ldr	r0, [pc, #104]	; (cb44 <hci_driver_open+0x6c>)
{
    cadc:	b086      	sub	sp, #24
	err = ll_init(&sem_prio_recv);
    cade:	f00a f90f 	bl	16d00 <ll_init>
	if (err) {
    cae2:	4604      	mov	r4, r0
    cae4:	b160      	cbz	r0, cb00 <hci_driver_open+0x28>
		BT_ERR("LL initialization failed: %u", err);
    cae6:	4b18      	ldr	r3, [pc, #96]	; (cb48 <hci_driver_open+0x70>)
    cae8:	9302      	str	r3, [sp, #8]
    caea:	e88d 0018 	stmia.w	sp, {r3, r4}
    caee:	4a17      	ldr	r2, [pc, #92]	; (cb4c <hci_driver_open+0x74>)
    caf0:	4b17      	ldr	r3, [pc, #92]	; (cb50 <hci_driver_open+0x78>)
    caf2:	4918      	ldr	r1, [pc, #96]	; (cb54 <hci_driver_open+0x7c>)
    caf4:	4818      	ldr	r0, [pc, #96]	; (cb58 <hci_driver_open+0x80>)
    caf6:	f7f5 fbcd 	bl	2294 <printk>
}
    cafa:	4620      	mov	r0, r4
    cafc:	b006      	add	sp, #24
    cafe:	bd10      	pop	{r4, pc}
	hci_init(NULL);
    cb00:	f001 fcf4 	bl	e4ec <hci_init>

    cb04:	f06f 0309 	mvn.w	r3, #9
    cb08:	9303      	str	r3, [sp, #12]
    cb0a:	9405      	str	r4, [sp, #20]
    cb0c:	9404      	str	r4, [sp, #16]
    cb0e:	9402      	str	r4, [sp, #8]
    cb10:	9401      	str	r4, [sp, #4]
    cb12:	9400      	str	r4, [sp, #0]
    cb14:	4b11      	ldr	r3, [pc, #68]	; (cb5c <hci_driver_open+0x84>)
    cb16:	4912      	ldr	r1, [pc, #72]	; (cb60 <hci_driver_open+0x88>)
    cb18:	4812      	ldr	r0, [pc, #72]	; (cb64 <hci_driver_open+0x8c>)
    cb1a:	f44f 723b 	mov.w	r2, #748	; 0x2ec
    cb1e:	f015 fa81 	bl	22024 <_impl_k_thread_create>
    cb22:	f06f 0307 	mvn.w	r3, #7
    cb26:	9303      	str	r3, [sp, #12]
    cb28:	9405      	str	r4, [sp, #20]
    cb2a:	9404      	str	r4, [sp, #16]
    cb2c:	9402      	str	r4, [sp, #8]
    cb2e:	9401      	str	r4, [sp, #4]
    cb30:	9400      	str	r4, [sp, #0]
    cb32:	4b0d      	ldr	r3, [pc, #52]	; (cb68 <hci_driver_open+0x90>)
    cb34:	490d      	ldr	r1, [pc, #52]	; (cb6c <hci_driver_open+0x94>)
    cb36:	480e      	ldr	r0, [pc, #56]	; (cb70 <hci_driver_open+0x98>)
    cb38:	f240 522c 	movw	r2, #1324	; 0x52c
    cb3c:	f015 fa72 	bl	22024 <_impl_k_thread_create>
    cb40:	e7db      	b.n	cafa <hci_driver_open+0x22>
    cb42:	bf00      	nop
    cb44:	2000a9e4 	.word	0x2000a9e4
    cb48:	00023dae 	.word	0x00023dae
    cb4c:	00022d76 	.word	0x00022d76
    cb50:	000255a0 	.word	0x000255a0
    cb54:	000272d8 	.word	0x000272d8
    cb58:	000255c0 	.word	0x000255c0
    cb5c:	0000ca49 	.word	0x0000ca49
    cb60:	20005918 	.word	0x20005918
    cb64:	20003194 	.word	0x20003194
    cb68:	0000c8d5 	.word	0x0000c8d5
    cb6c:	20005c08 	.word	0x20005c08
    cb70:	2000312c 	.word	0x2000312c

0000cb74 <sys_put_le32>:
	dst[1] = val >> 8;
    cb74:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
    cb78:	7008      	strb	r0, [r1, #0]
	sys_put_le16(val >> 16, &dst[2]);
    cb7a:	0c00      	lsrs	r0, r0, #16
	dst[0] = val;
    cb7c:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
    cb7e:	0a00      	lsrs	r0, r0, #8
    cb80:	704b      	strb	r3, [r1, #1]
    cb82:	70c8      	strb	r0, [r1, #3]
    cb84:	4770      	bx	lr

0000cb86 <evt_create>:
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
			     u16_t handle, struct net_buf *buf);
#endif /* CONFIG_BT_CONN */

static void evt_create(struct net_buf *buf, u8_t evt, u8_t len)
{
    cb86:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_hdr *hdr;

	hdr = net_buf_add(buf, sizeof(*hdr));
    cb88:	3008      	adds	r0, #8
{
    cb8a:	460d      	mov	r5, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
    cb8c:	2102      	movs	r1, #2
{
    cb8e:	4614      	mov	r4, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
    cb90:	f00c fc08 	bl	193a4 <net_buf_simple_add>
	hdr->evt = evt;
    cb94:	7005      	strb	r5, [r0, #0]
	hdr->len = len;
    cb96:	7044      	strb	r4, [r0, #1]
    cb98:	bd38      	pop	{r3, r4, r5, pc}
	...

0000cb9c <cmd_status>:
	return net_buf_add(*buf, plen);
}

#if defined(CONFIG_BT_CONN)
static struct net_buf *cmd_status(u8_t status)
{
    cb9c:	b538      	push	{r3, r4, r5, lr}
    cb9e:	4605      	mov	r5, r0
	struct bt_hci_evt_cmd_status *cs;
	struct net_buf *buf;

	buf = bt_buf_get_cmd_complete(K_FOREVER);
    cba0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    cba4:	f7f8 ff36 	bl	5a14 <bt_buf_get_cmd_complete>
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    cba8:	2204      	movs	r2, #4
	buf = bt_buf_get_cmd_complete(K_FOREVER);
    cbaa:	4604      	mov	r4, r0
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    cbac:	210f      	movs	r1, #15
    cbae:	f7ff ffea 	bl	cb86 <evt_create>

	cs = net_buf_add(buf, sizeof(*cs));
    cbb2:	2104      	movs	r1, #4
    cbb4:	f104 0008 	add.w	r0, r4, #8
    cbb8:	f00c fbf4 	bl	193a4 <net_buf_simple_add>
	cs->status = status;
	cs->ncmd = 1;
    cbbc:	2301      	movs	r3, #1
    cbbe:	7043      	strb	r3, [r0, #1]
	cs->opcode = sys_cpu_to_le16(_opcode);
    cbc0:	4b02      	ldr	r3, [pc, #8]	; (cbcc <cmd_status+0x30>)
	cs->status = status;
    cbc2:	7005      	strb	r5, [r0, #0]
	cs->opcode = sys_cpu_to_le16(_opcode);
    cbc4:	881b      	ldrh	r3, [r3, #0]
    cbc6:	8043      	strh	r3, [r0, #2]

	return buf;
}
    cbc8:	4620      	mov	r0, r4
    cbca:	bd38      	pop	{r3, r4, r5, pc}
    cbcc:	20000b54 	.word	0x20000b54

0000cbd0 <meta_evt>:
#endif

static void *meta_evt(struct net_buf *buf, u8_t subevt, u8_t melen)
{
    cbd0:	b570      	push	{r4, r5, r6, lr}
    cbd2:	4604      	mov	r4, r0
    cbd4:	4615      	mov	r5, r2
	struct bt_hci_evt_le_meta_event *me;

	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    cbd6:	3201      	adds	r2, #1
{
    cbd8:	460e      	mov	r6, r1
	me = net_buf_add(buf, sizeof(*me));
    cbda:	3408      	adds	r4, #8
	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    cbdc:	b2d2      	uxtb	r2, r2
    cbde:	213e      	movs	r1, #62	; 0x3e
    cbe0:	f7ff ffd1 	bl	cb86 <evt_create>
	me = net_buf_add(buf, sizeof(*me));
    cbe4:	2101      	movs	r1, #1
    cbe6:	4620      	mov	r0, r4
    cbe8:	f00c fbdc 	bl	193a4 <net_buf_simple_add>
	me->subevent = subevt;
    cbec:	7006      	strb	r6, [r0, #0]

	return net_buf_add(buf, melen);
    cbee:	4629      	mov	r1, r5
    cbf0:	4620      	mov	r0, r4
}
    cbf2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return net_buf_add(buf, melen);
    cbf6:	f00c bbd5 	b.w	193a4 <net_buf_simple_add>
	...

0000cbfc <cmd_complete>:
{
    cbfc:	b538      	push	{r3, r4, r5, lr}
    cbfe:	4604      	mov	r4, r0
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    cc00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
{
    cc04:	460d      	mov	r5, r1
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    cc06:	f7f8 ff05 	bl	5a14 <bt_buf_get_cmd_complete>
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    cc0a:	1cea      	adds	r2, r5, #3
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    cc0c:	6020      	str	r0, [r4, #0]
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    cc0e:	b2d2      	uxtb	r2, r2
    cc10:	210e      	movs	r1, #14
    cc12:	f7ff ffb8 	bl	cb86 <evt_create>
	cc = net_buf_add(*buf, sizeof(*cc));
    cc16:	6820      	ldr	r0, [r4, #0]
    cc18:	2103      	movs	r1, #3
    cc1a:	3008      	adds	r0, #8
    cc1c:	f00c fbc2 	bl	193a4 <net_buf_simple_add>
	cc->ncmd = 1;
    cc20:	2301      	movs	r3, #1
    cc22:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(_opcode);
    cc24:	4b05      	ldr	r3, [pc, #20]	; (cc3c <cmd_complete+0x40>)
    cc26:	881b      	ldrh	r3, [r3, #0]
    cc28:	f8a0 3001 	strh.w	r3, [r0, #1]
	return net_buf_add(*buf, plen);
    cc2c:	6820      	ldr	r0, [r4, #0]
    cc2e:	4629      	mov	r1, r5
    cc30:	3008      	adds	r0, #8
}
    cc32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_buf_add(*buf, plen);
    cc36:	f00c bbb5 	b.w	193a4 <net_buf_simple_add>
    cc3a:	bf00      	nop
    cc3c:	20000b54 	.word	0x20000b54

0000cc40 <le_advertising_report>:
}
#endif /* CONFIG_BT_CTLR_DUP_FILTER_LEN > 0 */

static void le_advertising_report(struct pdu_data *pdu_data, u8_t *b,
				  struct net_buf *buf)
{
    cc40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cc44:	b087      	sub	sp, #28
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    cc46:	2301      	movs	r3, #1
    cc48:	f88d 3011 	strb.w	r3, [sp, #17]
    cc4c:	2303      	movs	r3, #3
    cc4e:	f88d 3012 	strb.w	r3, [sp, #18]
    cc52:	23ff      	movs	r3, #255	; 0xff
    cc54:	f88d 3013 	strb.w	r3, [sp, #19]
    cc58:	f88d 3015 	strb.w	r3, [sp, #21]
    cc5c:	2302      	movs	r3, #2
    cc5e:	f88d 3016 	strb.w	r3, [sp, #22]
	u8_t direct;
#endif /* CONFIG_BT_CTLR_EXT_SCAN_FP */
	s8_t *prssi;

#if defined(CONFIG_BT_CTLR_PRIVACY)
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    cc62:	7843      	ldrb	r3, [r0, #1]
{
    cc64:	4688      	mov	r8, r1
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    cc66:	4443      	add	r3, r8
{
    cc68:	4604      	mov	r4, r0
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    cc6a:	7add      	ldrb	r5, [r3, #11]
		   offsetof(struct pdu_adv, payload) + adv->len + 1];
	/* Update current RPA */
	if (adv->tx_addr) {
    cc6c:	7803      	ldrb	r3, [r0, #0]
{
    cc6e:	4693      	mov	fp, r2
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    cc70:	2100      	movs	r1, #0
    cc72:	2204      	movs	r2, #4
	if (adv->tx_addr) {
    cc74:	0658      	lsls	r0, r3, #25
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    cc76:	f88d 1010 	strb.w	r1, [sp, #16]
    cc7a:	f88d 2014 	strb.w	r2, [sp, #20]
	if (adv->tx_addr) {
    cc7e:	d504      	bpl.n	cc8a <le_advertising_report+0x4a>
		ll_rl_crpa_set(0x00, NULL, rl_idx, &adv->adv_ind.addr[0]);
    cc80:	1ca3      	adds	r3, r4, #2
    cc82:	462a      	mov	r2, r5
    cc84:	4608      	mov	r0, r1
    cc86:	f00b fac1 	bl	1820c <ll_rl_crpa_set>
	}
#endif

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    cc8a:	4b7d      	ldr	r3, [pc, #500]	; (ce80 <le_advertising_report+0x240>)
    cc8c:	e9d3 2300 	ldrd	r2, r3, [r3]
    cc90:	2200      	movs	r2, #0
    cc92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    cc96:	4313      	orrs	r3, r2
    cc98:	f000 80ae 	beq.w	cdf8 <le_advertising_report+0x1b8>
		return;
	}

#if defined(CONFIG_BT_CTLR_EXT_SCAN_FP)
	direct = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    cc9c:	7863      	ldrb	r3, [r4, #1]
    cc9e:	4443      	add	r3, r8
    cca0:	f893 a00c 	ldrb.w	sl, [r3, #12]
    cca4:	4b77      	ldr	r3, [pc, #476]	; (ce84 <le_advertising_report+0x244>)
		   offsetof(struct pdu_adv, payload) + adv->len + 2];

	if ((!direct && !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) ||
    cca6:	e9d3 2300 	ldrd	r2, r3, [r3]
    ccaa:	f1ba 0f00 	cmp.w	sl, #0
    ccae:	d138      	bne.n	cd22 <le_advertising_report+0xe2>
    ccb0:	f002 0202 	and.w	r2, r2, #2
	    (direct && !(le_event_mask & BT_HCI_EVT_LE_DIRECT_ADV_REPORT))) {
    ccb4:	2300      	movs	r3, #0
    ccb6:	4313      	orrs	r3, r2
    ccb8:	f000 809e 	beq.w	cdf8 <le_advertising_report+0x1b8>
	if (dup_count >= 0) {
    ccbc:	4f72      	ldr	r7, [pc, #456]	; (ce88 <le_advertising_report+0x248>)
    ccbe:	683b      	ldr	r3, [r7, #0]
    ccc0:	2b00      	cmp	r3, #0
    ccc2:	db50      	blt.n	cd66 <le_advertising_report+0x126>
    ccc4:	f8df 91e0 	ldr.w	r9, [pc, #480]	; cea8 <le_advertising_report+0x268>
    ccc8:	2600      	movs	r6, #0
    ccca:	1ca3      	adds	r3, r4, #2
		for (i = 0; i < dup_count; i++) {
    cccc:	683a      	ldr	r2, [r7, #0]
    ccce:	4296      	cmp	r6, r2
    ccd0:	db2a      	blt.n	cd28 <le_advertising_report+0xe8>
		memcpy(&dup_filter[dup_curr].addr.a.val[0],
    ccd2:	4e6e      	ldr	r6, [pc, #440]	; (ce8c <le_advertising_report+0x24c>)
    ccd4:	f8df 91b8 	ldr.w	r9, [pc, #440]	; ce90 <le_advertising_report+0x250>
    ccd8:	6830      	ldr	r0, [r6, #0]
    ccda:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
    ccde:	4619      	mov	r1, r3
    cce0:	2206      	movs	r2, #6
    cce2:	3002      	adds	r0, #2
    cce4:	f7f3 fd55 	bl	792 <memcpy>
		dup_filter[dup_curr].addr.type = adv->tx_addr;
    cce8:	6832      	ldr	r2, [r6, #0]
    ccea:	7823      	ldrb	r3, [r4, #0]
    ccec:	eb09 01c2 	add.w	r1, r9, r2, lsl #3
    ccf0:	f3c3 1380 	ubfx	r3, r3, #6, #1
    ccf4:	704b      	strb	r3, [r1, #1]
		dup_filter[dup_curr].mask = BIT(adv->type);
    ccf6:	7823      	ldrb	r3, [r4, #0]
    ccf8:	f003 010f 	and.w	r1, r3, #15
    ccfc:	2301      	movs	r3, #1
    ccfe:	408b      	lsls	r3, r1
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    cd00:	6839      	ldr	r1, [r7, #0]
		dup_filter[dup_curr].mask = BIT(adv->type);
    cd02:	f809 3032 	strb.w	r3, [r9, r2, lsl #3]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    cd06:	290f      	cmp	r1, #15
			dup_count++;
    cd08:	bfd5      	itete	le
    cd0a:	3101      	addle	r1, #1
			dup_curr++;
    cd0c:	3201      	addgt	r2, #1
			dup_curr = dup_count;
    cd0e:	6031      	strle	r1, [r6, #0]
			dup_curr++;
    cd10:	6032      	strgt	r2, [r6, #0]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    cd12:	6832      	ldr	r2, [r6, #0]
			dup_count++;
    cd14:	bfd8      	it	le
    cd16:	6039      	strle	r1, [r7, #0]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    cd18:	2a10      	cmp	r2, #16
    cd1a:	d124      	bne.n	cd66 <le_advertising_report+0x126>
			dup_curr = 0;
    cd1c:	2200      	movs	r2, #0
    cd1e:	6032      	str	r2, [r6, #0]
    cd20:	e021      	b.n	cd66 <le_advertising_report+0x126>
	    (direct && !(le_event_mask & BT_HCI_EVT_LE_DIRECT_ADV_REPORT))) {
    cd22:	f002 020b 	and.w	r2, r2, #11
    cd26:	e7c5      	b.n	ccb4 <le_advertising_report+0x74>
			if (!memcmp(&adv->adv_ind.addr[0],
    cd28:	4618      	mov	r0, r3
    cd2a:	2206      	movs	r2, #6
    cd2c:	4649      	mov	r1, r9
    cd2e:	9303      	str	r3, [sp, #12]
    cd30:	f7f3 fd02 	bl	738 <memcmp>
    cd34:	9b03      	ldr	r3, [sp, #12]
    cd36:	b9f0      	cbnz	r0, cd76 <le_advertising_report+0x136>
			    adv->tx_addr == dup_filter[i].addr.type) {
    cd38:	7821      	ldrb	r1, [r4, #0]
    cd3a:	f819 0c01 	ldrb.w	r0, [r9, #-1]
    cd3e:	460a      	mov	r2, r1
    cd40:	f3c1 1180 	ubfx	r1, r1, #6, #1
				    sizeof(bt_addr_t)) &&
    cd44:	4281      	cmp	r1, r0
    cd46:	d116      	bne.n	cd76 <le_advertising_report+0x136>
				if (dup_filter[i].mask & BIT(adv->type)) {
    cd48:	4851      	ldr	r0, [pc, #324]	; (ce90 <le_advertising_report+0x250>)
    cd4a:	f810 3036 	ldrb.w	r3, [r0, r6, lsl #3]
    cd4e:	f002 020f 	and.w	r2, r2, #15
    cd52:	fa23 f102 	lsr.w	r1, r3, r2
    cd56:	07c9      	lsls	r1, r1, #31
    cd58:	d44e      	bmi.n	cdf8 <le_advertising_report+0x1b8>
				dup_filter[i].mask |= BIT(adv->type);
    cd5a:	2101      	movs	r1, #1
    cd5c:	fa01 f202 	lsl.w	r2, r1, r2
    cd60:	4313      	orrs	r3, r2
    cd62:	f800 3036 	strb.w	r3, [r0, r6, lsl #3]
	if (dup_found(adv)) {
		return;
	}
#endif /* CONFIG_BT_CTLR_DUP_FILTER_LEN > 0 */

	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    cd66:	7823      	ldrb	r3, [r4, #0]
    cd68:	7862      	ldrb	r2, [r4, #1]
    cd6a:	f003 030f 	and.w	r3, r3, #15
    cd6e:	2b01      	cmp	r3, #1
    cd70:	d105      	bne.n	cd7e <le_advertising_report+0x13e>
		data_len = (adv->len - BDADDR_SIZE);
	} else {
		data_len = 0;
    cd72:	2600      	movs	r6, #0
    cd74:	e005      	b.n	cd82 <le_advertising_report+0x142>
		for (i = 0; i < dup_count; i++) {
    cd76:	3601      	adds	r6, #1
    cd78:	f109 0908 	add.w	r9, r9, #8
    cd7c:	e7a6      	b.n	cccc <le_advertising_report+0x8c>
		data_len = (adv->len - BDADDR_SIZE);
    cd7e:	1f96      	subs	r6, r2, #6
    cd80:	b2f6      	uxtb	r6, r6
	}

	/* The Link Layer currently returns RSSI as an absolute value */
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    cd82:	4442      	add	r2, r8
    cd84:	f104 0908 	add.w	r9, r4, #8
    cd88:	7a97      	ldrb	r7, [r2, #10]
    cd8a:	427f      	negs	r7, r7
    cd8c:	b27f      	sxtb	r7, r7
		  offsetof(struct pdu_adv, payload) + adv->len];

#if defined(CONFIG_BT_CTLR_EXT_SCAN_FP)
	if (direct) {
    cd8e:	f1ba 0f00 	cmp.w	sl, #0
    cd92:	d03e      	beq.n	ce12 <le_advertising_report+0x1d2>
		struct bt_hci_evt_le_direct_adv_report *drp;
		struct bt_hci_evt_le_direct_adv_info *dir_info;

		LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
    cd94:	2b01      	cmp	r3, #1
    cd96:	d00e      	beq.n	cdb6 <le_advertising_report+0x176>
    cd98:	4b3e      	ldr	r3, [pc, #248]	; (ce94 <le_advertising_report+0x254>)
    cd9a:	9301      	str	r3, [sp, #4]
    cd9c:	9300      	str	r3, [sp, #0]
    cd9e:	4a3e      	ldr	r2, [pc, #248]	; (ce98 <le_advertising_report+0x258>)
    cda0:	4b3e      	ldr	r3, [pc, #248]	; (ce9c <le_advertising_report+0x25c>)
    cda2:	493f      	ldr	r1, [pc, #252]	; (cea0 <le_advertising_report+0x260>)
    cda4:	483f      	ldr	r0, [pc, #252]	; (cea4 <le_advertising_report+0x264>)
    cda6:	f7f5 fa75 	bl	2294 <printk>
    cdaa:	4040      	eors	r0, r0
    cdac:	f380 8811 	msr	BASEPRI, r0
    cdb0:	f04f 0004 	mov.w	r0, #4
    cdb4:	df02      	svc	2
		drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
    cdb6:	2211      	movs	r2, #17
    cdb8:	210b      	movs	r1, #11
    cdba:	4658      	mov	r0, fp
    cdbc:	9303      	str	r3, [sp, #12]
    cdbe:	f7ff ff07 	bl	cbd0 <meta_evt>
			       sizeof(*drp) + sizeof(*dir_info));

		drp->num_reports = 1;
    cdc2:	9b03      	ldr	r3, [sp, #12]
    cdc4:	7003      	strb	r3, [r0, #0]
		dir_info = (void *)(((u8_t *)drp) + sizeof(*drp));

		dir_info->evt_type = c_adv_type[PDU_ADV_TYPE_DIRECT_IND];
    cdc6:	7043      	strb	r3, [r0, #1]
		drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
    cdc8:	4606      	mov	r6, r0

#if defined(CONFIG_BT_CTLR_PRIVACY)
		if (rl_idx < ll_rl_size_get()) {
    cdca:	f00b f8f5 	bl	17fb8 <ll_rl_size_get>
    cdce:	4285      	cmp	r5, r0
    cdd0:	f106 0003 	add.w	r0, r6, #3
    cdd4:	d213      	bcs.n	cdfe <le_advertising_report+0x1be>
			/* Store identity address */
			ll_rl_id_addr_get(rl_idx, &dir_info->addr.type,
    cdd6:	4602      	mov	r2, r0
    cdd8:	1cb1      	adds	r1, r6, #2
    cdda:	4628      	mov	r0, r5
    cddc:	f00a fec0 	bl	17b60 <ll_rl_id_addr_get>
					  &dir_info->addr.a.val[0]);
			/* Mark it as identity address from RPA (0x02, 0x03) */
			dir_info->addr.type += 2;
    cde0:	78b3      	ldrb	r3, [r6, #2]
    cde2:	3302      	adds	r3, #2
    cde4:	70b3      	strb	r3, [r6, #2]
			memcpy(&dir_info->addr.a.val[0],
			       &adv->direct_ind.adv_addr[0],
			       sizeof(bt_addr_t));
		}

		dir_info->dir_addr.type = 0x1;
    cde6:	2301      	movs	r3, #1
    cde8:	7273      	strb	r3, [r6, #9]
		memcpy(&dir_info->dir_addr.a.val[0],
    cdea:	2206      	movs	r2, #6
    cdec:	4649      	mov	r1, r9
    cdee:	f106 000a 	add.w	r0, r6, #10
    cdf2:	f7f3 fcce 	bl	792 <memcpy>
		       &adv->direct_ind.tgt_addr[0], sizeof(bt_addr_t));

		dir_info->rssi = rssi;
    cdf6:	7437      	strb	r7, [r6, #16]
	adv_info->length = data_len;
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
	/* RSSI */
	prssi = &adv_info->data[0] + data_len;
	*prssi = rssi;
}
    cdf8:	b007      	add	sp, #28
    cdfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			dir_info->addr.type = adv->tx_addr;
    cdfe:	4621      	mov	r1, r4
			memcpy(&dir_info->addr.a.val[0],
    ce00:	2206      	movs	r2, #6
			dir_info->addr.type = adv->tx_addr;
    ce02:	f811 3b02 	ldrb.w	r3, [r1], #2
    ce06:	f3c3 1380 	ubfx	r3, r3, #6, #1
    ce0a:	70b3      	strb	r3, [r6, #2]
			memcpy(&dir_info->addr.a.val[0],
    ce0c:	f7f3 fcc1 	bl	792 <memcpy>
    ce10:	e7e9      	b.n	cde6 <le_advertising_report+0x1a6>
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    ce12:	f106 020b 	add.w	r2, r6, #11
    ce16:	b2d2      	uxtb	r2, r2
    ce18:	2102      	movs	r1, #2
    ce1a:	4658      	mov	r0, fp
    ce1c:	f7ff fed8 	bl	cbd0 <meta_evt>
	sep->num_reports = 1;
    ce20:	2301      	movs	r3, #1
    ce22:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
    ce24:	7823      	ldrb	r3, [r4, #0]
    ce26:	aa06      	add	r2, sp, #24
    ce28:	f003 030f 	and.w	r3, r3, #15
    ce2c:	4413      	add	r3, r2
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    ce2e:	4605      	mov	r5, r0
	adv_info->evt_type = c_adv_type[adv->type];
    ce30:	f813 3c08 	ldrb.w	r3, [r3, #-8]
    ce34:	7043      	strb	r3, [r0, #1]
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    ce36:	7863      	ldrb	r3, [r4, #1]
    ce38:	4498      	add	r8, r3
    ce3a:	f898 800b 	ldrb.w	r8, [r8, #11]
	if (rl_idx < ll_rl_size_get()) {
    ce3e:	f00b f8bb 	bl	17fb8 <ll_rl_size_get>
    ce42:	4580      	cmp	r8, r0
    ce44:	f105 0003 	add.w	r0, r5, #3
    ce48:	d210      	bcs.n	ce6c <le_advertising_report+0x22c>
		ll_rl_id_addr_get(rl_idx, &adv_info->addr.type,
    ce4a:	4602      	mov	r2, r0
    ce4c:	1ca9      	adds	r1, r5, #2
    ce4e:	4640      	mov	r0, r8
    ce50:	f00a fe86 	bl	17b60 <ll_rl_id_addr_get>
		adv_info->addr.type += 2;
    ce54:	78ab      	ldrb	r3, [r5, #2]
    ce56:	3302      	adds	r3, #2
    ce58:	70ab      	strb	r3, [r5, #2]
	adv_info->length = data_len;
    ce5a:	726e      	strb	r6, [r5, #9]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    ce5c:	350a      	adds	r5, #10
    ce5e:	4632      	mov	r2, r6
    ce60:	4649      	mov	r1, r9
    ce62:	4628      	mov	r0, r5
    ce64:	f7f3 fc95 	bl	792 <memcpy>
	*prssi = rssi;
    ce68:	55af      	strb	r7, [r5, r6]
    ce6a:	e7c5      	b.n	cdf8 <le_advertising_report+0x1b8>
		adv_info->addr.type = adv->tx_addr;
    ce6c:	4621      	mov	r1, r4
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
    ce6e:	2206      	movs	r2, #6
		adv_info->addr.type = adv->tx_addr;
    ce70:	f811 3b02 	ldrb.w	r3, [r1], #2
    ce74:	f3c3 1380 	ubfx	r3, r3, #6, #1
    ce78:	70ab      	strb	r3, [r5, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
    ce7a:	f7f3 fc8a 	bl	792 <memcpy>
    ce7e:	e7ec      	b.n	ce5a <le_advertising_report+0x21a>
    ce80:	20009fb8 	.word	0x20009fb8
    ce84:	20009fc0 	.word	0x20009fc0
    ce88:	20000b5c 	.word	0x20000b5c
    ce8c:	20000b60 	.word	0x20000b60
    ce90:	20000b64 	.word	0x20000b64
    ce94:	00023dae 	.word	0x00023dae
    ce98:	00022d76 	.word	0x00022d76
    ce9c:	0002567d 	.word	0x0002567d
    cea0:	000272d8 	.word	0x000272d8
    cea4:	0002598e 	.word	0x0002598e
    cea8:	20000b66 	.word	0x20000b66

0000ceac <encrypt_change>:
static void encrypt_change(u8_t err, u16_t handle,
			   struct net_buf *buf)
{
	struct bt_hci_evt_encrypt_change *ep;

	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    ceac:	4b0e      	ldr	r3, [pc, #56]	; (cee8 <encrypt_change+0x3c>)
{
    ceae:	b570      	push	{r4, r5, r6, lr}
    ceb0:	4615      	mov	r5, r2
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    ceb2:	e9d3 2300 	ldrd	r2, r3, [r3]
    ceb6:	2300      	movs	r3, #0
    ceb8:	f002 0280 	and.w	r2, r2, #128	; 0x80
    cebc:	4313      	orrs	r3, r2
{
    cebe:	4604      	mov	r4, r0
    cec0:	460e      	mov	r6, r1
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    cec2:	d010      	beq.n	cee6 <encrypt_change+0x3a>
		return;
	}

	evt_create(buf, BT_HCI_EVT_ENCRYPT_CHANGE, sizeof(*ep));
    cec4:	2204      	movs	r2, #4
    cec6:	2108      	movs	r1, #8
    cec8:	4628      	mov	r0, r5
    ceca:	f7ff fe5c 	bl	cb86 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    cece:	2104      	movs	r1, #4
    ced0:	f105 0008 	add.w	r0, r5, #8
    ced4:	f00c fa66 	bl	193a4 <net_buf_simple_add>

	ep->status = err;
	ep->handle = sys_cpu_to_le16(handle);
	ep->encrypt = !err ? 1 : 0;
    ced8:	fab4 f384 	clz	r3, r4
    cedc:	095b      	lsrs	r3, r3, #5
	ep->status = err;
    cede:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    cee0:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
    cee4:	70c3      	strb	r3, [r0, #3]
    cee6:	bd70      	pop	{r4, r5, r6, pc}
    cee8:	20009fb8 	.word	0x20009fb8

0000ceec <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
    ceec:	b570      	push	{r4, r5, r6, lr}
    ceee:	4604      	mov	r4, r0
    cef0:	4618      	mov	r0, r3
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    cef2:	4b13      	ldr	r3, [pc, #76]	; (cf40 <le_remote_feat_complete+0x54>)
{
    cef4:	4616      	mov	r6, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    cef6:	e9d3 2300 	ldrd	r2, r3, [r3]
    cefa:	2200      	movs	r2, #0
    cefc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    cf00:	4313      	orrs	r3, r2
{
    cf02:	460d      	mov	r5, r1
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    cf04:	d01b      	beq.n	cf3e <le_remote_feat_complete+0x52>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    cf06:	4b0f      	ldr	r3, [pc, #60]	; (cf44 <le_remote_feat_complete+0x58>)
    cf08:	e9d3 2300 	ldrd	r2, r3, [r3]
    cf0c:	2300      	movs	r3, #0
    cf0e:	f002 0208 	and.w	r2, r2, #8
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    cf12:	4313      	orrs	r3, r2
    cf14:	d013      	beq.n	cf3e <le_remote_feat_complete+0x52>
		return;
	}

	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
    cf16:	220b      	movs	r2, #11
    cf18:	2104      	movs	r1, #4
    cf1a:	f7ff fe59 	bl	cbd0 <meta_evt>

	sep->status = status;
	sep->handle = sys_cpu_to_le16(handle);
	if (!status) {
		memcpy(&sep->features[0],
    cf1e:	2208      	movs	r2, #8
	sep->status = status;
    cf20:	7004      	strb	r4, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    cf22:	f8a0 6001 	strh.w	r6, [r0, #1]
    cf26:	3003      	adds	r0, #3
	if (!status) {
    cf28:	b924      	cbnz	r4, cf34 <le_remote_feat_complete+0x48>
		memcpy(&sep->features[0],
    cf2a:	1d29      	adds	r1, r5, #4
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
    cf2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(&sep->features[0],
    cf30:	f7f3 bc2f 	b.w	792 <memcpy>
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    cf34:	2100      	movs	r1, #0
}
    cf36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    cf3a:	f7f3 bc56 	b.w	7ea <memset>
    cf3e:	bd70      	pop	{r4, r5, r6, pc}
    cf40:	20009fb8 	.word	0x20009fb8
    cf44:	20009fc0 	.word	0x20009fc0

0000cf48 <le_set_adv_param.isra.37>:
static void le_set_adv_param(struct net_buf *buf, struct net_buf **evt)
    cf48:	b5f0      	push	{r4, r5, r6, r7, lr}
    cf4a:	b08b      	sub	sp, #44	; 0x2c
	status = ll_adv_params_set(cmd->handle, cmd->props, min_interval,
    cf4c:	2400      	movs	r4, #0
    cf4e:	7a03      	ldrb	r3, [r0, #8]
    cf50:	f8b0 2003 	ldrh.w	r2, [r0, #3]
    cf54:	7806      	ldrb	r6, [r0, #0]
static void le_set_adv_param(struct net_buf *buf, struct net_buf **evt)
    cf56:	460d      	mov	r5, r1
	status = ll_adv_params_set(cmd->handle, cmd->props, min_interval,
    cf58:	f8b0 1001 	ldrh.w	r1, [r0, #1]
    cf5c:	9409      	str	r4, [sp, #36]	; 0x24
    cf5e:	7d47      	ldrb	r7, [r0, #21]
    cf60:	9708      	str	r7, [sp, #32]
    cf62:	7d07      	ldrb	r7, [r0, #20]
    cf64:	9707      	str	r7, [sp, #28]
    cf66:	7cc7      	ldrb	r7, [r0, #19]
    cf68:	9706      	str	r7, [sp, #24]
    cf6a:	7c87      	ldrb	r7, [r0, #18]
    cf6c:	9705      	str	r7, [sp, #20]
    cf6e:	9404      	str	r4, [sp, #16]
    cf70:	7c04      	ldrb	r4, [r0, #16]
    cf72:	9403      	str	r4, [sp, #12]
    cf74:	79c4      	ldrb	r4, [r0, #7]
    cf76:	9402      	str	r4, [sp, #8]
				   &cmd->direct_addr.a.val[0], cmd->prim_channel_map,
    cf78:	f100 040a 	add.w	r4, r0, #10
	status = ll_adv_params_set(cmd->handle, cmd->props, min_interval,
    cf7c:	9401      	str	r4, [sp, #4]
    cf7e:	7a40      	ldrb	r0, [r0, #9]
    cf80:	9000      	str	r0, [sp, #0]
    cf82:	4630      	mov	r0, r6
    cf84:	f009 ff66 	bl	16e54 <ll_adv_params_set>
	ccst = cmd_complete(evt, sizeof(*ccst));
    cf88:	2102      	movs	r1, #2
	status = ll_adv_params_set(cmd->handle, cmd->props, min_interval,
    cf8a:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    cf8c:	4628      	mov	r0, r5
    cf8e:	f7ff fe35 	bl	cbfc <cmd_complete>
	status = ll_adv_params_set(cmd->handle, cmd->props, min_interval,
    cf92:	7004      	strb	r4, [r0, #0]
}
    cf94:	b00b      	add	sp, #44	; 0x2c
    cf96:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000cf98 <le_set_adv_enable.isra.40>:
static void le_set_adv_enable(struct net_buf *buf, struct net_buf **evt)
    cf98:	b538      	push	{r3, r4, r5, lr}
	status = ll_adv_enable(cmd->enable);
    cf9a:	7800      	ldrb	r0, [r0, #0]
static void le_set_adv_enable(struct net_buf *buf, struct net_buf **evt)
    cf9c:	460d      	mov	r5, r1
	status = ll_adv_enable(cmd->enable);
    cf9e:	f00a f9d7 	bl	17350 <ll_adv_enable>
	ccst = cmd_complete(evt, sizeof(*ccst));
    cfa2:	2101      	movs	r1, #1
	status = ll_adv_enable(cmd->enable);
    cfa4:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    cfa6:	4628      	mov	r0, r5
    cfa8:	f7ff fe28 	bl	cbfc <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    cfac:	2c00      	cmp	r4, #0
    cfae:	bf0c      	ite	eq
    cfb0:	2300      	moveq	r3, #0
    cfb2:	230c      	movne	r3, #12
    cfb4:	7003      	strb	r3, [r0, #0]
    cfb6:	bd38      	pop	{r3, r4, r5, pc}

0000cfb8 <le_conn_complete.part.44>:
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
    cfb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cfbc:	4605      	mov	r5, r0
    cfbe:	4618      	mov	r0, r3
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    cfc0:	4b46      	ldr	r3, [pc, #280]	; (d0dc <le_conn_complete.part.44+0x124>)
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
    cfc2:	4616      	mov	r6, r2
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    cfc4:	e9d3 2300 	ldrd	r2, r3, [r3]
    cfc8:	f240 2801 	movw	r8, #513	; 0x201
    cfcc:	f04f 0900 	mov.w	r9, #0
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    cfd0:	f402 7a00 	and.w	sl, r2, #512	; 0x200
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    cfd4:	ea03 0309 	and.w	r3, r3, r9
    cfd8:	ea02 0208 	and.w	r2, r2, r8
    cfdc:	4313      	orrs	r3, r2
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
    cfde:	460c      	mov	r4, r1
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    cfe0:	f04f 0b00 	mov.w	fp, #0
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    cfe4:	d077      	beq.n	d0d6 <le_conn_complete.part.44+0x11e>
	if (!status) {
    cfe6:	2d00      	cmp	r5, #0
    cfe8:	d150      	bne.n	d08c <le_conn_complete.part.44+0xd4>
		conn_count++;
    cfea:	4a3d      	ldr	r2, [pc, #244]	; (d0e0 <le_conn_complete.part.44+0x128>)
    cfec:	6813      	ldr	r3, [r2, #0]
    cfee:	3301      	adds	r3, #1
    cff0:	6013      	str	r3, [r2, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    cff2:	ea5a 030b 	orrs.w	r3, sl, fp
    cff6:	f101 0803 	add.w	r8, r1, #3
    cffa:	d151      	bne.n	d0a0 <le_conn_complete.part.44+0xe8>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    cffc:	2212      	movs	r2, #18
    cffe:	2101      	movs	r1, #1
    d000:	f7ff fde6 	bl	cbd0 <meta_evt>
	lecc->status = 0x00;
    d004:	7005      	strb	r5, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
    d006:	f8a0 6001 	strh.w	r6, [r0, #1]
	lecc->role = radio_cc->role;
    d00a:	7863      	ldrb	r3, [r4, #1]
    d00c:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = radio_cc->peer_addr_type;
    d00e:	78a3      	ldrb	r3, [r4, #2]
    d010:	7103      	strb	r3, [r0, #4]
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    d012:	4607      	mov	r7, r0
	memcpy(&lecc->peer_addr.a.val[0], &radio_cc->peer_addr[0], BDADDR_SIZE);
    d014:	2206      	movs	r2, #6
    d016:	4641      	mov	r1, r8
    d018:	3005      	adds	r0, #5
    d01a:	f7f3 fbba 	bl	792 <memcpy>
	lecc->interval = sys_cpu_to_le16(radio_cc->interval);
    d01e:	8ae3      	ldrh	r3, [r4, #22]
    d020:	f8a7 300b 	strh.w	r3, [r7, #11]
	lecc->latency = sys_cpu_to_le16(radio_cc->latency);
    d024:	8b23      	ldrh	r3, [r4, #24]
    d026:	f8a7 300d 	strh.w	r3, [r7, #13]
	lecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    d02a:	8b63      	ldrh	r3, [r4, #26]
    d02c:	f8a7 300f 	strh.w	r3, [r7, #15]
	lecc->clock_accuracy = radio_cc->mca;
    d030:	7f23      	ldrb	r3, [r4, #28]
    d032:	747b      	strb	r3, [r7, #17]
    d034:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    d038:	221e      	movs	r2, #30
    d03a:	210a      	movs	r1, #10
    d03c:	f7ff fdc8 	bl	cbd0 <meta_evt>
			memset(leecc, 0x00, sizeof(*leecc));
    d040:	221e      	movs	r2, #30
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    d042:	4604      	mov	r4, r0
		memset(lecc, 0x00, sizeof(*lecc));
    d044:	2100      	movs	r1, #0
    d046:	f7f3 fbd0 	bl	7ea <memset>
		lecc->status = status;
    d04a:	7025      	strb	r5, [r4, #0]
    d04c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((radio_cc->own_addr_type) &&
    d050:	7d63      	ldrb	r3, [r4, #21]
    d052:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    d056:	2b40      	cmp	r3, #64	; 0x40
    d058:	d138      	bne.n	d0cc <le_conn_complete.part.44+0x114>
			memcpy(&leecc->local_rpa.val[0], &radio_cc->own_addr[0],
    d05a:	2206      	movs	r2, #6
    d05c:	f104 0110 	add.w	r1, r4, #16
    d060:	f7f3 fb97 	bl	792 <memcpy>
		memcpy(&leecc->peer_rpa.val[0], &radio_cc->peer_rpa[0],
    d064:	2206      	movs	r2, #6
    d066:	f104 0109 	add.w	r1, r4, #9
    d06a:	f107 0011 	add.w	r0, r7, #17
    d06e:	f7f3 fb90 	bl	792 <memcpy>
		leecc->interval = sys_cpu_to_le16(radio_cc->interval);
    d072:	8ae3      	ldrh	r3, [r4, #22]
    d074:	f8a7 3017 	strh.w	r3, [r7, #23]
		leecc->latency = sys_cpu_to_le16(radio_cc->latency);
    d078:	8b23      	ldrh	r3, [r4, #24]
    d07a:	f8a7 3019 	strh.w	r3, [r7, #25]
		leecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    d07e:	8b63      	ldrh	r3, [r4, #26]
    d080:	f8a7 301b 	strh.w	r3, [r7, #27]
		leecc->clock_accuracy = radio_cc->mca;
    d084:	7f23      	ldrb	r3, [r4, #28]
    d086:	777b      	strb	r3, [r7, #29]
    d088:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    d08c:	ea5a 030b 	orrs.w	r3, sl, fp
    d090:	d1d2      	bne.n	d038 <le_conn_complete.part.44+0x80>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    d092:	2212      	movs	r2, #18
    d094:	2101      	movs	r1, #1
    d096:	f7ff fd9b 	bl	cbd0 <meta_evt>
		memset(lecc, 0x00, sizeof(*lecc));
    d09a:	2212      	movs	r2, #18
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    d09c:	4604      	mov	r4, r0
    d09e:	e7d1      	b.n	d044 <le_conn_complete.part.44+0x8c>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    d0a0:	221e      	movs	r2, #30
    d0a2:	210a      	movs	r1, #10
    d0a4:	f7ff fd94 	bl	cbd0 <meta_evt>
		leecc->status = 0x00;
    d0a8:	7005      	strb	r5, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
    d0aa:	f8a0 6001 	strh.w	r6, [r0, #1]
		leecc->role = radio_cc->role;
    d0ae:	7863      	ldrb	r3, [r4, #1]
    d0b0:	70c3      	strb	r3, [r0, #3]
		leecc->peer_addr.type = radio_cc->peer_addr_type;
    d0b2:	78a3      	ldrb	r3, [r4, #2]
    d0b4:	7103      	strb	r3, [r0, #4]
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    d0b6:	4607      	mov	r7, r0
		memcpy(&leecc->peer_addr.a.val[0], &radio_cc->peer_addr[0],
    d0b8:	2206      	movs	r2, #6
    d0ba:	4641      	mov	r1, r8
    d0bc:	3005      	adds	r0, #5
    d0be:	f7f3 fb68 	bl	792 <memcpy>
		if ((radio_cc->own_addr_type) &&
    d0c2:	7be3      	ldrb	r3, [r4, #15]
    d0c4:	f107 000b 	add.w	r0, r7, #11
    d0c8:	2b00      	cmp	r3, #0
    d0ca:	d1c1      	bne.n	d050 <le_conn_complete.part.44+0x98>
			memset(&leecc->local_rpa.val[0], 0x0, BDADDR_SIZE);
    d0cc:	2206      	movs	r2, #6
    d0ce:	2100      	movs	r1, #0
    d0d0:	f7f3 fb8b 	bl	7ea <memset>
    d0d4:	e7c6      	b.n	d064 <le_conn_complete.part.44+0xac>
    d0d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d0da:	bf00      	nop
    d0dc:	20009fc0 	.word	0x20009fc0
    d0e0:	20000b58 	.word	0x20000b58

0000d0e4 <bt_addr_le_to_str.constprop.73>:
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    d0e4:	b570      	push	{r4, r5, r6, lr}
	switch (addr->type) {
    d0e6:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    d0e8:	b08a      	sub	sp, #40	; 0x28
    d0ea:	4604      	mov	r4, r0
    d0ec:	460e      	mov	r6, r1
    d0ee:	ad07      	add	r5, sp, #28
	switch (addr->type) {
    d0f0:	2b03      	cmp	r3, #3
    d0f2:	d820      	bhi.n	d136 <bt_addr_le_to_str.constprop.73+0x52>
    d0f4:	e8df f003 	tbb	[pc, r3]
    d0f8:	1d1b1902 	.word	0x1d1b1902
		strcpy(type, "public");
    d0fc:	4911      	ldr	r1, [pc, #68]	; (d144 <bt_addr_le_to_str.constprop.73+0x60>)
		strcpy(type, "random");
    d0fe:	4628      	mov	r0, r5
    d100:	f7f3 fadf 	bl	6c2 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    d104:	7862      	ldrb	r2, [r4, #1]
    d106:	9204      	str	r2, [sp, #16]
    d108:	78a2      	ldrb	r2, [r4, #2]
    d10a:	9203      	str	r2, [sp, #12]
    d10c:	78e2      	ldrb	r2, [r4, #3]
    d10e:	9202      	str	r2, [sp, #8]
    d110:	7922      	ldrb	r2, [r4, #4]
    d112:	9201      	str	r2, [sp, #4]
    d114:	7962      	ldrb	r2, [r4, #5]
    d116:	9200      	str	r2, [sp, #0]
    d118:	79a3      	ldrb	r3, [r4, #6]
    d11a:	9505      	str	r5, [sp, #20]
    d11c:	4a0a      	ldr	r2, [pc, #40]	; (d148 <bt_addr_le_to_str.constprop.73+0x64>)
    d11e:	211b      	movs	r1, #27
    d120:	4630      	mov	r0, r6
    d122:	f7f5 f8c5 	bl	22b0 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    d126:	b00a      	add	sp, #40	; 0x28
    d128:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    d12a:	4908      	ldr	r1, [pc, #32]	; (d14c <bt_addr_le_to_str.constprop.73+0x68>)
    d12c:	e7e7      	b.n	d0fe <bt_addr_le_to_str.constprop.73+0x1a>
		strcpy(type, "public id");
    d12e:	4908      	ldr	r1, [pc, #32]	; (d150 <bt_addr_le_to_str.constprop.73+0x6c>)
    d130:	e7e5      	b.n	d0fe <bt_addr_le_to_str.constprop.73+0x1a>
		strcpy(type, "random id");
    d132:	4908      	ldr	r1, [pc, #32]	; (d154 <bt_addr_le_to_str.constprop.73+0x70>)
    d134:	e7e3      	b.n	d0fe <bt_addr_le_to_str.constprop.73+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    d136:	4a08      	ldr	r2, [pc, #32]	; (d158 <bt_addr_le_to_str.constprop.73+0x74>)
    d138:	210a      	movs	r1, #10
    d13a:	4628      	mov	r0, r5
    d13c:	f7f5 f8b8 	bl	22b0 <snprintk>
    d140:	e7e0      	b.n	d104 <bt_addr_le_to_str.constprop.73+0x20>
    d142:	bf00      	nop
    d144:	0002343a 	.word	0x0002343a
    d148:	00023463 	.word	0x00023463
    d14c:	00023441 	.word	0x00023441
    d150:	00023448 	.word	0x00023448
    d154:	00023452 	.word	0x00023452
    d158:	0002345c 	.word	0x0002345c

0000d15c <le_adv_ext_report>:
{
    d15c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d160:	460d      	mov	r5, r1
		  offsetof(struct pdu_adv, payload) + adv->len];
    d162:	7841      	ldrb	r1, [r0, #1]
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    d164:	4e51      	ldr	r6, [pc, #324]	; (d2ac <le_adv_ext_report+0x150>)
{
    d166:	4691      	mov	r9, r2
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    d168:	186a      	adds	r2, r5, r1
{
    d16a:	b092      	sub	sp, #72	; 0x48
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    d16c:	7a97      	ldrb	r7, [r2, #10]
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    d16e:	9607      	str	r6, [sp, #28]
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    d170:	427f      	negs	r7, r7
    d172:	b27f      	sxtb	r7, r7
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    d174:	9706      	str	r7, [sp, #24]
    d176:	7802      	ldrb	r2, [r0, #0]
    d178:	9103      	str	r1, [sp, #12]
{
    d17a:	4604      	mov	r4, r0
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    d17c:	09d0      	lsrs	r0, r2, #7
    d17e:	9005      	str	r0, [sp, #20]
    d180:	f3c2 1080 	ubfx	r0, r2, #6, #1
    d184:	f002 020f 	and.w	r2, r2, #15
    d188:	9004      	str	r0, [sp, #16]
    d18a:	9202      	str	r2, [sp, #8]
    d18c:	9301      	str	r3, [sp, #4]
    d18e:	9600      	str	r6, [sp, #0]
    d190:	4b47      	ldr	r3, [pc, #284]	; (d2b0 <le_adv_ext_report+0x154>)
    d192:	4a48      	ldr	r2, [pc, #288]	; (d2b4 <le_adv_ext_report+0x158>)
    d194:	4948      	ldr	r1, [pc, #288]	; (d2b8 <le_adv_ext_report+0x15c>)
    d196:	4849      	ldr	r0, [pc, #292]	; (d2bc <le_adv_ext_report+0x160>)
    d198:	f7f5 f87c 	bl	2294 <printk>
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    d19c:	7823      	ldrb	r3, [r4, #0]
    d19e:	f003 030f 	and.w	r3, r3, #15
    d1a2:	2b07      	cmp	r3, #7
    d1a4:	d17b      	bne.n	d29e <le_adv_ext_report+0x142>
    d1a6:	7863      	ldrb	r3, [r4, #1]
    d1a8:	2b00      	cmp	r3, #0
    d1aa:	d078      	beq.n	d29e <le_adv_ext_report+0x142>
		BT_WARN("Ext. adv mode= 0x%x, hdr len= %u", p->adv_mode,
    d1ac:	78a3      	ldrb	r3, [r4, #2]
    d1ae:	9603      	str	r6, [sp, #12]
    d1b0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    d1b4:	099b      	lsrs	r3, r3, #6
    d1b6:	9202      	str	r2, [sp, #8]
    d1b8:	9301      	str	r3, [sp, #4]
    d1ba:	9600      	str	r6, [sp, #0]
    d1bc:	4b3c      	ldr	r3, [pc, #240]	; (d2b0 <le_adv_ext_report+0x154>)
    d1be:	4a3d      	ldr	r2, [pc, #244]	; (d2b4 <le_adv_ext_report+0x158>)
    d1c0:	493d      	ldr	r1, [pc, #244]	; (d2b8 <le_adv_ext_report+0x15c>)
    d1c2:	483f      	ldr	r0, [pc, #252]	; (d2c0 <le_adv_ext_report+0x164>)
    d1c4:	f7f5 f866 	bl	2294 <printk>
		if (!p->ext_hdr_len) {
    d1c8:	78a3      	ldrb	r3, [r4, #2]
    d1ca:	0698      	lsls	r0, r3, #26
    d1cc:	d064      	beq.n	d298 <le_adv_ext_report+0x13c>
		if (h->adv_addr) {
    d1ce:	78e3      	ldrb	r3, [r4, #3]
    d1d0:	07d9      	lsls	r1, r3, #31
		ptr = (u8_t *)h + sizeof(*h);
    d1d2:	f104 0504 	add.w	r5, r4, #4
		if (h->adv_addr) {
    d1d6:	d51d      	bpl.n	d214 <le_adv_ext_report+0xb8>
			addr.type = adv->tx_addr;
    d1d8:	7823      	ldrb	r3, [r4, #0]
    d1da:	f10d 0848 	add.w	r8, sp, #72	; 0x48
    d1de:	f3c3 1380 	ubfx	r3, r3, #6, #1
    d1e2:	f808 3d24 	strb.w	r3, [r8, #-36]!
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    d1e6:	2206      	movs	r2, #6
    d1e8:	4629      	mov	r1, r5
			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    d1ea:	f10d 0a2c 	add.w	sl, sp, #44	; 0x2c
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    d1ee:	f10d 0025 	add.w	r0, sp, #37	; 0x25
    d1f2:	f7f3 face 	bl	792 <memcpy>
			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    d1f6:	4651      	mov	r1, sl
    d1f8:	4640      	mov	r0, r8
    d1fa:	f7ff ff73 	bl	d0e4 <bt_addr_le_to_str.constprop.73>
			BT_WARN("AdvA: %s", addr_str);
    d1fe:	9602      	str	r6, [sp, #8]
    d200:	e88d 0440 	stmia.w	sp, {r6, sl}
    d204:	4b2a      	ldr	r3, [pc, #168]	; (d2b0 <le_adv_ext_report+0x154>)
    d206:	4a2b      	ldr	r2, [pc, #172]	; (d2b4 <le_adv_ext_report+0x158>)
    d208:	492b      	ldr	r1, [pc, #172]	; (d2b8 <le_adv_ext_report+0x15c>)
    d20a:	482e      	ldr	r0, [pc, #184]	; (d2c4 <le_adv_ext_report+0x168>)
			ptr += BDADDR_SIZE;
    d20c:	f104 050a 	add.w	r5, r4, #10
			BT_WARN("AdvA: %s", addr_str);
    d210:	f7f5 f840 	bl	2294 <printk>
		if(h->tgt_addr){
    d214:	78e3      	ldrb	r3, [r4, #3]
    d216:	079a      	lsls	r2, r3, #30
			ptr += BDADDR_SIZE;
    d218:	bf48      	it	mi
    d21a:	3506      	addmi	r5, #6
		if(h->adi){
    d21c:	0718      	lsls	r0, r3, #28
			ptr += sizeof(*adi_ptr);
    d21e:	bf48      	it	mi
    d220:	3502      	addmi	r5, #2
		if(h->aux_ptr){
    d222:	06d9      	lsls	r1, r3, #27
			ptr += sizeof(*ap);
    d224:	bf48      	it	mi
    d226:	3503      	addmi	r5, #3
		if (h->tx_pwr) {
    d228:	065a      	lsls	r2, r3, #25
    d22a:	d50a      	bpl.n	d242 <le_adv_ext_report+0xe6>
			tx_pwr = *(s8_t *)ptr;
    d22c:	f915 3b01 	ldrsb.w	r3, [r5], #1
			BT_WARN("Tx pwr= %d dB", tx_pwr);
    d230:	9301      	str	r3, [sp, #4]
    d232:	9602      	str	r6, [sp, #8]
    d234:	9600      	str	r6, [sp, #0]
    d236:	4b1e      	ldr	r3, [pc, #120]	; (d2b0 <le_adv_ext_report+0x154>)
    d238:	4a1e      	ldr	r2, [pc, #120]	; (d2b4 <le_adv_ext_report+0x158>)
    d23a:	491f      	ldr	r1, [pc, #124]	; (d2b8 <le_adv_ext_report+0x15c>)
    d23c:	4822      	ldr	r0, [pc, #136]	; (d2c8 <le_adv_ext_report+0x16c>)
    d23e:	f7f5 f829 	bl	2294 <printk>
		data_len = adv->len -(p->ext_hdr_len + offsetof(struct pdu_adv_com_ext_adv,
    d242:	78a2      	ldrb	r2, [r4, #2]
    d244:	f3c2 0305 	ubfx	r3, r2, #0, #6
    d248:	7862      	ldrb	r2, [r4, #1]
    d24a:	1ad2      	subs	r2, r2, r3
    d24c:	b2d2      	uxtb	r2, r2
    d24e:	f102 38ff 	add.w	r8, r2, #4294967295	; 0xffffffff
		sep = meta_evt(buf, BT_HCI_EVT_LE_EXT_ADVERTISING_REPORT,
    d252:	3218      	adds	r2, #24
    d254:	b2d2      	uxtb	r2, r2
    d256:	210d      	movs	r1, #13
    d258:	4648      	mov	r0, r9
    d25a:	f7ff fcb9 	bl	cbd0 <meta_evt>
		sep->num_reports = 1;
    d25e:	2301      	movs	r3, #1
    d260:	7003      	strb	r3, [r0, #0]
		if(h->adv_addr){
    d262:	78e3      	ldrb	r3, [r4, #3]
    d264:	07db      	lsls	r3, r3, #31
		data_len = adv->len -(p->ext_hdr_len + offsetof(struct pdu_adv_com_ext_adv,
    d266:	fa5f f888 	uxtb.w	r8, r8
		sep = meta_evt(buf, BT_HCI_EVT_LE_EXT_ADVERTISING_REPORT,
    d26a:	4606      	mov	r6, r0
		if(h->adv_addr){
    d26c:	d508      	bpl.n	d280 <le_adv_ext_report+0x124>
			adv_info->addr.type = addr.type;
    d26e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    d272:	7083      	strb	r3, [r0, #2]
			memcpy(&adv_info->addr.a.val[0], &addr.a.val[0],
    d274:	2206      	movs	r2, #6
    d276:	f10d 0125 	add.w	r1, sp, #37	; 0x25
    d27a:	3003      	adds	r0, #3
    d27c:	f7f3 fa89 	bl	792 <memcpy>
		adv_info->evt_type = 0x07;
    d280:	2307      	movs	r3, #7
    d282:	7073      	strb	r3, [r6, #1]
		adv_info->length = data_len;
    d284:	f886 8017 	strb.w	r8, [r6, #23]
		memcpy(&adv_info->data[0], ptr, data_len);
    d288:	3618      	adds	r6, #24
    d28a:	4642      	mov	r2, r8
    d28c:	4629      	mov	r1, r5
    d28e:	4630      	mov	r0, r6
    d290:	f7f3 fa7f 	bl	792 <memcpy>
		*prssi = rssi;
    d294:	f806 7008 	strb.w	r7, [r6, r8]
}
    d298:	b012      	add	sp, #72	; 0x48
    d29a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		le_advertising_report(pdu_data, b, buf);
    d29e:	464a      	mov	r2, r9
    d2a0:	4629      	mov	r1, r5
    d2a2:	4620      	mov	r0, r4
    d2a4:	f7ff fccc 	bl	cc40 <le_advertising_report>
	return;
    d2a8:	e7f6      	b.n	d298 <le_adv_ext_report+0x13c>
    d2aa:	bf00      	nop
    d2ac:	00023dae 	.word	0x00023dae
    d2b0:	00025693 	.word	0x00025693
    d2b4:	00024006 	.word	0x00024006
    d2b8:	000272d8 	.word	0x000272d8
    d2bc:	000258d9 	.word	0x000258d9
    d2c0:	00025926 	.word	0x00025926
    d2c4:	00025957 	.word	0x00025957
    d2c8:	00025970 	.word	0x00025970

0000d2cc <sys_get_le64>:
{
    d2cc:	4603      	mov	r3, r0
}
    d2ce:	6800      	ldr	r0, [r0, #0]
    d2d0:	6859      	ldr	r1, [r3, #4]
    d2d2:	4770      	bx	lr

0000d2d4 <hci_cmd_handle>:
{
    d2d4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
    d2d6:	8981      	ldrh	r1, [r0, #12]
{
    d2d8:	b093      	sub	sp, #76	; 0x4c
	struct net_buf *evt = NULL;
    d2da:	2500      	movs	r5, #0
	if (cmd->len < sizeof(*chdr)) {
    d2dc:	2902      	cmp	r1, #2
{
    d2de:	4604      	mov	r4, r0
	struct net_buf *evt = NULL;
    d2e0:	9507      	str	r5, [sp, #28]
	if (cmd->len < sizeof(*chdr)) {
    d2e2:	d80b      	bhi.n	d2fc <hci_cmd_handle+0x28>
		BT_ERR("No HCI Command header");
    d2e4:	4b8f      	ldr	r3, [pc, #572]	; (d524 <hci_cmd_handle+0x250>)
    d2e6:	9301      	str	r3, [sp, #4]
    d2e8:	9300      	str	r3, [sp, #0]
    d2ea:	4a8f      	ldr	r2, [pc, #572]	; (d528 <hci_cmd_handle+0x254>)
    d2ec:	4b8f      	ldr	r3, [pc, #572]	; (d52c <hci_cmd_handle+0x258>)
    d2ee:	4990      	ldr	r1, [pc, #576]	; (d530 <hci_cmd_handle+0x25c>)
    d2f0:	4890      	ldr	r0, [pc, #576]	; (d534 <hci_cmd_handle+0x260>)
		BT_ERR("Invalid HCI CMD packet length");
    d2f2:	f7f4 ffcf 	bl	2294 <printk>
		return NULL;
    d2f6:	4628      	mov	r0, r5
}
    d2f8:	b013      	add	sp, #76	; 0x4c
    d2fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chdr = (void *)cmd->data;
    d2fc:	6883      	ldr	r3, [r0, #8]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    d2fe:	4e8e      	ldr	r6, [pc, #568]	; (d538 <hci_cmd_handle+0x264>)
    d300:	781a      	ldrb	r2, [r3, #0]
    d302:	7858      	ldrb	r0, [r3, #1]
	if (cmd->len < chdr->param_len) {
    d304:	789b      	ldrb	r3, [r3, #2]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    d306:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	if (cmd->len < chdr->param_len) {
    d30a:	428b      	cmp	r3, r1
	_opcode = sys_le16_to_cpu(chdr->opcode);
    d30c:	8032      	strh	r2, [r6, #0]
	if (cmd->len < chdr->param_len) {
    d30e:	d907      	bls.n	d320 <hci_cmd_handle+0x4c>
		BT_ERR("Invalid HCI CMD packet length");
    d310:	4b84      	ldr	r3, [pc, #528]	; (d524 <hci_cmd_handle+0x250>)
    d312:	9301      	str	r3, [sp, #4]
    d314:	9300      	str	r3, [sp, #0]
    d316:	4a84      	ldr	r2, [pc, #528]	; (d528 <hci_cmd_handle+0x254>)
    d318:	4b84      	ldr	r3, [pc, #528]	; (d52c <hci_cmd_handle+0x258>)
    d31a:	4985      	ldr	r1, [pc, #532]	; (d530 <hci_cmd_handle+0x25c>)
    d31c:	4887      	ldr	r0, [pc, #540]	; (d53c <hci_cmd_handle+0x268>)
    d31e:	e7e8      	b.n	d2f2 <hci_cmd_handle+0x1e>
	net_buf_pull(cmd, sizeof(*chdr));
    d320:	2103      	movs	r1, #3
    d322:	f104 0008 	add.w	r0, r4, #8
    d326:	f00c f88d 	bl	19444 <net_buf_simple_pull>
	ocf = BT_OCF(_opcode);
    d32a:	8833      	ldrh	r3, [r6, #0]
    d32c:	f3c3 0209 	ubfx	r2, r3, #0, #10
	switch (BT_OGF(_opcode)) {
    d330:	0a9b      	lsrs	r3, r3, #10
    d332:	2b04      	cmp	r3, #4
    d334:	f000 80c6 	beq.w	d4c4 <hci_cmd_handle+0x1f0>
    d338:	d813      	bhi.n	d362 <hci_cmd_handle+0x8e>
    d33a:	2b01      	cmp	r3, #1
    d33c:	d030      	beq.n	d3a0 <hci_cmd_handle+0xcc>
    d33e:	2b03      	cmp	r3, #3
    d340:	d045      	beq.n	d3ce <hci_cmd_handle+0xfa>
		ccst = cmd_complete(&evt, sizeof(*ccst));
    d342:	2101      	movs	r1, #1
    d344:	a807      	add	r0, sp, #28
    d346:	f7ff fc59 	bl	cbfc <cmd_complete>
		BT_ERR("Invalid BT_HCI_ERR_UNKNOWN_CMD");
    d34a:	4b76      	ldr	r3, [pc, #472]	; (d524 <hci_cmd_handle+0x250>)
    d34c:	9301      	str	r3, [sp, #4]
    d34e:	9300      	str	r3, [sp, #0]
		ccst = cmd_complete(&evt, sizeof(*ccst));
    d350:	4604      	mov	r4, r0
		BT_ERR("Invalid BT_HCI_ERR_UNKNOWN_CMD");
    d352:	4b76      	ldr	r3, [pc, #472]	; (d52c <hci_cmd_handle+0x258>)
    d354:	4a74      	ldr	r2, [pc, #464]	; (d528 <hci_cmd_handle+0x254>)
    d356:	4976      	ldr	r1, [pc, #472]	; (d530 <hci_cmd_handle+0x25c>)
    d358:	4879      	ldr	r0, [pc, #484]	; (d540 <hci_cmd_handle+0x26c>)
    d35a:	f7f4 ff9b 	bl	2294 <printk>
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    d35e:	2301      	movs	r3, #1
    d360:	e378      	b.n	da54 <hci_cmd_handle+0x780>
	switch (BT_OGF(_opcode)) {
    d362:	2b08      	cmp	r3, #8
    d364:	f000 8173 	beq.w	d64e <hci_cmd_handle+0x37a>
    d368:	2b3f      	cmp	r3, #63	; 0x3f
    d36a:	d1ea      	bne.n	d342 <hci_cmd_handle+0x6e>
	switch (ocf) {
    d36c:	3a01      	subs	r2, #1
    d36e:	2a09      	cmp	r2, #9
    d370:	d8e7      	bhi.n	d342 <hci_cmd_handle+0x6e>
    d372:	a301      	add	r3, pc, #4	; (adr r3, d378 <hci_cmd_handle+0xa4>)
    d374:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    d378:	0000dc25 	.word	0x0000dc25
    d37c:	0000dc55 	.word	0x0000dc55
    d380:	0000dc7f 	.word	0x0000dc7f
    d384:	0000d343 	.word	0x0000d343
    d388:	0000d343 	.word	0x0000d343
    d38c:	0000dcc5 	.word	0x0000dcc5
    d390:	0000d343 	.word	0x0000d343
    d394:	0000dc97 	.word	0x0000dc97
    d398:	0000dcd1 	.word	0x0000dcd1
    d39c:	0000dd3f 	.word	0x0000dd3f
	switch (ocf) {
    d3a0:	2a06      	cmp	r2, #6
    d3a2:	d006      	beq.n	d3b2 <hci_cmd_handle+0xde>
    d3a4:	2a1d      	cmp	r2, #29
    d3a6:	d1cc      	bne.n	d342 <hci_cmd_handle+0x6e>
	handle = sys_le16_to_cpu(cmd->handle);
    d3a8:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
    d3aa:	8818      	ldrh	r0, [r3, #0]
    d3ac:	f008 fd1c 	bl	15de8 <ll_version_ind_send>
    d3b0:	e004      	b.n	d3bc <hci_cmd_handle+0xe8>
    d3b2:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
    d3b4:	7899      	ldrb	r1, [r3, #2]
    d3b6:	8818      	ldrh	r0, [r3, #0]
    d3b8:	f008 fd2a 	bl	15e10 <ll_terminate_ind_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    d3bc:	2800      	cmp	r0, #0
    d3be:	bf14      	ite	ne
    d3c0:	200c      	movne	r0, #12
    d3c2:	2000      	moveq	r0, #0
    d3c4:	f7ff fbea 	bl	cb9c <cmd_status>
    d3c8:	9007      	str	r0, [sp, #28]
	return evt;
    d3ca:	9807      	ldr	r0, [sp, #28]
    d3cc:	e794      	b.n	d2f8 <hci_cmd_handle+0x24>
	switch (ocf) {
    d3ce:	2a2d      	cmp	r2, #45	; 0x2d
    d3d0:	d03a      	beq.n	d448 <hci_cmd_handle+0x174>
    d3d2:	d820      	bhi.n	d416 <hci_cmd_handle+0x142>
    d3d4:	2a01      	cmp	r2, #1
    d3d6:	d02b      	beq.n	d430 <hci_cmd_handle+0x15c>
    d3d8:	2a03      	cmp	r2, #3
    d3da:	d1b2      	bne.n	d342 <hci_cmd_handle+0x6e>
	dup_count = -1;
    d3dc:	4b59      	ldr	r3, [pc, #356]	; (d544 <hci_cmd_handle+0x270>)
    d3de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    d3e2:	601a      	str	r2, [r3, #0]
	event_mask = DEFAULT_EVENT_MASK;
    d3e4:	4b58      	ldr	r3, [pc, #352]	; (d548 <hci_cmd_handle+0x274>)
    d3e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d3ea:	f641 71ff 	movw	r1, #8191	; 0x1fff
    d3ee:	e9c3 0100 	strd	r0, r1, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    d3f2:	4b56      	ldr	r3, [pc, #344]	; (d54c <hci_cmd_handle+0x278>)
    d3f4:	2000      	movs	r0, #0
    d3f6:	2100      	movs	r1, #0
    d3f8:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    d3fc:	4b54      	ldr	r3, [pc, #336]	; (d550 <hci_cmd_handle+0x27c>)
    d3fe:	201f      	movs	r0, #31
    d400:	2100      	movs	r1, #0
    d402:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
    d406:	f008 f969 	bl	156dc <ll_reset>
	ccst = cmd_complete(evt, sizeof(*ccst));
    d40a:	2101      	movs	r1, #1
    d40c:	a807      	add	r0, sp, #28
    d40e:	f7ff fbf5 	bl	cbfc <cmd_complete>
	ccst->status = 0x00;
    d412:	2300      	movs	r3, #0
    d414:	e25f      	b.n	d8d6 <hci_cmd_handle+0x602>
	switch (ocf) {
    d416:	2a7b      	cmp	r2, #123	; 0x7b
    d418:	d02c      	beq.n	d474 <hci_cmd_handle+0x1a0>
    d41a:	2a7c      	cmp	r2, #124	; 0x7c
    d41c:	d041      	beq.n	d4a2 <hci_cmd_handle+0x1ce>
    d41e:	2a63      	cmp	r2, #99	; 0x63
    d420:	d18f      	bne.n	d342 <hci_cmd_handle+0x6e>
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    d422:	68a0      	ldr	r0, [r4, #8]
    d424:	f7ff ff52 	bl	d2cc <sys_get_le64>
    d428:	4b48      	ldr	r3, [pc, #288]	; (d54c <hci_cmd_handle+0x278>)
	le_event_mask = sys_get_le64(cmd->events);
    d42a:	e9c3 0100 	strd	r0, r1, [r3]
    d42e:	e7ec      	b.n	d40a <hci_cmd_handle+0x136>
	event_mask = sys_get_le64(cmd->events);
    d430:	68a0      	ldr	r0, [r4, #8]
    d432:	f7ff ff4b 	bl	d2cc <sys_get_le64>
    d436:	4b44      	ldr	r3, [pc, #272]	; (d548 <hci_cmd_handle+0x274>)
    d438:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
    d43c:	4611      	mov	r1, r2
    d43e:	a807      	add	r0, sp, #28
    d440:	f7ff fbdc 	bl	cbfc <cmd_complete>
	ccst->status = 0x00;
    d444:	7005      	strb	r5, [r0, #0]
    d446:	e7c0      	b.n	d3ca <hci_cmd_handle+0xf6>
    d448:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    d44a:	2104      	movs	r1, #4
    d44c:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    d44e:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
    d450:	789f      	ldrb	r7, [r3, #2]
	rp = cmd_complete(evt, sizeof(*rp));
    d452:	f7ff fbd3 	bl	cbfc <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    d456:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    d458:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(handle, type, &rp->tx_power_level);
    d45a:	1cc2      	adds	r2, r0, #3
    d45c:	4639      	mov	r1, r7
    d45e:	4630      	mov	r0, r6
    d460:	f008 fcea 	bl	15e38 <ll_tx_pwr_lvl_get>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    d464:	2800      	cmp	r0, #0
    d466:	bf14      	ite	ne
    d468:	2302      	movne	r3, #2
    d46a:	2300      	moveq	r3, #0
    d46c:	7023      	strb	r3, [r4, #0]
	rp->handle = sys_le16_to_cpu(handle);
    d46e:	f8a4 5001 	strh.w	r5, [r4, #1]
    d472:	e7aa      	b.n	d3ca <hci_cmd_handle+0xf6>
	handle = sys_le16_to_cpu(cmd->handle);
    d474:	68a3      	ldr	r3, [r4, #8]
    d476:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
    d478:	a908      	add	r1, sp, #32
    d47a:	b2a0      	uxth	r0, r4
    d47c:	f008 fce6 	bl	15e4c <ll_apto_get>
	rp = cmd_complete(evt, sizeof(*rp));
    d480:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
    d482:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    d484:	a807      	add	r0, sp, #28
    d486:	f7ff fbb9 	bl	cbfc <cmd_complete>
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d48a:	2d00      	cmp	r5, #0
    d48c:	bf14      	ite	ne
    d48e:	230c      	movne	r3, #12
    d490:	2300      	moveq	r3, #0
    d492:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    d494:	f8a0 4001 	strh.w	r4, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
    d498:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    d49c:	f8a0 3003 	strh.w	r3, [r0, #3]
    d4a0:	e793      	b.n	d3ca <hci_cmd_handle+0xf6>
    d4a2:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    d4a4:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
    d4a6:	8859      	ldrh	r1, [r3, #2]
    d4a8:	b2a0      	uxth	r0, r4
    d4aa:	f008 fce3 	bl	15e74 <ll_apto_set>
	status = ll_length_req_send(handle, tx_octets, tx_time);
    d4ae:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    d4b0:	2103      	movs	r1, #3
    d4b2:	a807      	add	r0, sp, #28
    d4b4:	f7ff fba2 	bl	cbfc <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d4b8:	2d00      	cmp	r5, #0
    d4ba:	bf14      	ite	ne
    d4bc:	230c      	movne	r3, #12
    d4be:	2300      	moveq	r3, #0
    d4c0:	7003      	strb	r3, [r0, #0]
    d4c2:	e2ab      	b.n	da1c <hci_cmd_handle+0x748>
	switch (ocf) {
    d4c4:	3a01      	subs	r2, #1
    d4c6:	2a08      	cmp	r2, #8
    d4c8:	f63f af3b 	bhi.w	d342 <hci_cmd_handle+0x6e>
    d4cc:	a301      	add	r3, pc, #4	; (adr r3, d4d4 <hci_cmd_handle+0x200>)
    d4ce:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    d4d2:	bf00      	nop
    d4d4:	0000d4f9 	.word	0x0000d4f9
    d4d8:	0000d555 	.word	0x0000d555
    d4dc:	0000d61b 	.word	0x0000d61b
    d4e0:	0000d343 	.word	0x0000d343
    d4e4:	0000d343 	.word	0x0000d343
    d4e8:	0000d343 	.word	0x0000d343
    d4ec:	0000d343 	.word	0x0000d343
    d4f0:	0000d343 	.word	0x0000d343
    d4f4:	0000d637 	.word	0x0000d637
	rp = cmd_complete(evt, sizeof(*rp));
    d4f8:	2109      	movs	r1, #9
    d4fa:	a807      	add	r0, sp, #28
    d4fc:	f7ff fb7e 	bl	cbfc <cmd_complete>
	rp->status = 0x00;
    d500:	2300      	movs	r3, #0
    d502:	7003      	strb	r3, [r0, #0]
	rp->hci_revision = sys_cpu_to_le16(0);
    d504:	7083      	strb	r3, [r0, #2]
    d506:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    d508:	f06f 030e 	mvn.w	r3, #14
    d50c:	7143      	strb	r3, [r0, #5]
    d50e:	2305      	movs	r3, #5
	rp->hci_version = BT_HCI_VERSION_5_0;
    d510:	2209      	movs	r2, #9
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    d512:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    d514:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	rp->hci_version = BT_HCI_VERSION_5_0;
    d518:	7042      	strb	r2, [r0, #1]
	rp->lmp_version = RADIO_BLE_VERSION_NUMBER;
    d51a:	7102      	strb	r2, [r0, #4]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    d51c:	71c3      	strb	r3, [r0, #7]
    d51e:	7203      	strb	r3, [r0, #8]
    d520:	e753      	b.n	d3ca <hci_cmd_handle+0xf6>
    d522:	bf00      	nop
    d524:	00023dae 	.word	0x00023dae
    d528:	00022d76 	.word	0x00022d76
    d52c:	0002565f 	.word	0x0002565f
    d530:	000272d8 	.word	0x000272d8
    d534:	000257a2 	.word	0x000257a2
    d538:	20000b54 	.word	0x20000b54
    d53c:	000257c8 	.word	0x000257c8
    d540:	000257f6 	.word	0x000257f6
    d544:	20000b5c 	.word	0x20000b5c
    d548:	20009fb8 	.word	0x20009fb8
    d54c:	20000be8 	.word	0x20000be8
    d550:	20009fc0 	.word	0x20009fc0
	rp = cmd_complete(evt, sizeof(*rp));
    d554:	2141      	movs	r1, #65	; 0x41
    d556:	a807      	add	r0, sp, #28
    d558:	f7ff fb50 	bl	cbfc <cmd_complete>
	rp->status = 0x00;
    d55c:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    d55e:	4604      	mov	r4, r0
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    d560:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    d562:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    d566:	f7f3 f940 	bl	7ea <memset>
	rp->commands[2] |= BIT(7);
    d56a:	78e3      	ldrb	r3, [r4, #3]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    d56c:	7ea2      	ldrb	r2, [r4, #26]
	rp->commands[36] |= BIT(1);
    d56e:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
	rp->commands[38] |= BIT(7);
    d572:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
	rp->commands[2] |= BIT(7);
    d576:	f063 037f 	orn	r3, r3, #127	; 0x7f
    d57a:	70e3      	strb	r3, [r4, #3]
	rp->commands[5] |= BIT(6) | BIT(7);
    d57c:	79a3      	ldrb	r3, [r4, #6]
    d57e:	f063 033f 	orn	r3, r3, #63	; 0x3f
    d582:	71a3      	strb	r3, [r4, #6]
	rp->commands[10] |= BIT(2);
    d584:	7ae3      	ldrb	r3, [r4, #11]
    d586:	f043 0304 	orr.w	r3, r3, #4
    d58a:	72e3      	strb	r3, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
    d58c:	7be3      	ldrb	r3, [r4, #15]
    d58e:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    d592:	73e3      	strb	r3, [r4, #15]
	rp->commands[15] |= BIT(1);
    d594:	7c23      	ldrb	r3, [r4, #16]
    d596:	f043 0302 	orr.w	r3, r3, #2
    d59a:	7423      	strb	r3, [r4, #16]
	rp->commands[22] |= BIT(2);
    d59c:	7de3      	ldrb	r3, [r4, #23]
    d59e:	f043 0304 	orr.w	r3, r3, #4
    d5a2:	75e3      	strb	r3, [r4, #23]
	rp->commands[28] |= BIT(3);
    d5a4:	7f63      	ldrb	r3, [r4, #29]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    d5a6:	f062 0208 	orn	r2, r2, #8
    d5aa:	76a2      	strb	r2, [r4, #26]
	rp->commands[28] |= BIT(1) | BIT(2);
    d5ac:	f043 030f 	orr.w	r3, r3, #15
	rp->commands[37] |= BIT(5);
    d5b0:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
	rp->commands[28] |= BIT(1) | BIT(2);
    d5b4:	7763      	strb	r3, [r4, #29]
	rp->commands[0] |= BIT(5);
    d5b6:	7863      	ldrb	r3, [r4, #1]
	rp->commands[37] |= BIT(6);
    d5b8:	f042 0260 	orr.w	r2, r2, #96	; 0x60
    d5bc:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
	rp->commands[0] |= BIT(5);
    d5c0:	f043 0320 	orr.w	r3, r3, #32
	rp->commands[26] |= BIT(4) | BIT(5);
    d5c4:	22ff      	movs	r2, #255	; 0xff
    d5c6:	76e2      	strb	r2, [r4, #27]
	rp->commands[0] |= BIT(5);
    d5c8:	7063      	strb	r3, [r4, #1]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
    d5ca:	7722      	strb	r2, [r4, #28]
	rp->commands[33] |= BIT(4) | BIT(5);
    d5cc:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
	rp->commands[32] |= BIT(4) | BIT(5);
    d5d0:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
	rp->commands[33] |= BIT(6) | BIT(7);
    d5d4:	f063 030f 	orn	r3, r3, #15
	rp->commands[32] |= BIT(4) | BIT(5);
    d5d8:	f042 0230 	orr.w	r2, r2, #48	; 0x30
    d5dc:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
	rp->commands[33] |= BIT(6) | BIT(7);
    d5e0:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    d5e4:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
	rp->commands[35] |= BIT(3);
    d5e8:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	rp->commands[38] |= BIT(7);
    d5ec:	f060 007f 	orn	r0, r0, #127	; 0x7f
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    d5f0:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
	rp->commands[36] |= BIT(4);
    d5f4:	f061 0101 	orn	r1, r1, #1
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    d5f8:	f062 0206 	orn	r2, r2, #6
	rp->commands[38] |= BIT(7);
    d5fc:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
	rp->commands[36] |= BIT(4);
    d600:	f884 1025 	strb.w	r1, [r4, #37]	; 0x25
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    d604:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    d608:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	rp->commands[39] |= BIT(2);
    d60c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    d610:	f043 0304 	orr.w	r3, r3, #4
    d614:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    d618:	e6d7      	b.n	d3ca <hci_cmd_handle+0xf6>
	rp = cmd_complete(evt, sizeof(*rp));
    d61a:	2109      	movs	r1, #9
    d61c:	a807      	add	r0, sp, #28
    d61e:	f7ff faed 	bl	cbfc <cmd_complete>
	rp->status = 0x00;
    d622:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    d624:	4604      	mov	r4, r0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    d626:	2208      	movs	r2, #8
	rp->status = 0x00;
    d628:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    d62c:	f7f3 f8dd 	bl	7ea <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
    d630:	2360      	movs	r3, #96	; 0x60
    d632:	7163      	strb	r3, [r4, #5]
    d634:	e6c9      	b.n	d3ca <hci_cmd_handle+0xf6>
	rp = cmd_complete(evt, sizeof(*rp));
    d636:	2107      	movs	r1, #7
    d638:	a807      	add	r0, sp, #28
    d63a:	f7ff fadf 	bl	cbfc <cmd_complete>
	rp->status = 0x00;
    d63e:	4601      	mov	r1, r0
    d640:	2300      	movs	r3, #0
    d642:	f801 3b01 	strb.w	r3, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
    d646:	4618      	mov	r0, r3
    d648:	f7ff f8c6 	bl	c7d8 <ll_addr_get>
    d64c:	e6bd      	b.n	d3ca <hci_cmd_handle+0xf6>
	switch (ocf) {
    d64e:	3a01      	subs	r2, #1
    d650:	2a4d      	cmp	r2, #77	; 0x4d
    d652:	f63f ae76 	bhi.w	d342 <hci_cmd_handle+0x6e>
    d656:	a301      	add	r3, pc, #4	; (adr r3, d65c <hci_cmd_handle+0x388>)
    d658:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    d65c:	0000d795 	.word	0x0000d795
    d660:	0000d79f 	.word	0x0000d79f
    d664:	0000d7b7 	.word	0x0000d7b7
    d668:	0000d343 	.word	0x0000d343
    d66c:	0000d7db 	.word	0x0000d7db
    d670:	0000d881 	.word	0x0000d881
    d674:	0000dd2d 	.word	0x0000dd2d
    d678:	0000d88b 	.word	0x0000d88b
    d67c:	0000d897 	.word	0x0000d897
    d680:	0000d8a3 	.word	0x0000d8a3
    d684:	0000d8ad 	.word	0x0000d8ad
    d688:	0000d8db 	.word	0x0000d8db
    d68c:	0000d8fb 	.word	0x0000d8fb
    d690:	0000d925 	.word	0x0000d925
    d694:	0000d7e7 	.word	0x0000d7e7
    d698:	0000d7fd 	.word	0x0000d7fd
    d69c:	0000d80f 	.word	0x0000d80f
    d6a0:	0000d817 	.word	0x0000d817
    d6a4:	0000d9df 	.word	0x0000d9df
    d6a8:	0000d985 	.word	0x0000d985
    d6ac:	0000d9bb 	.word	0x0000d9bb
    d6b0:	0000d9d5 	.word	0x0000d9d5
    d6b4:	0000d81f 	.word	0x0000d81f
    d6b8:	0000d845 	.word	0x0000d845
    d6bc:	0000d98d 	.word	0x0000d98d
    d6c0:	0000d9a1 	.word	0x0000d9a1
    d6c4:	0000d9b1 	.word	0x0000d9b1
    d6c8:	0000d85b 	.word	0x0000d85b
    d6cc:	0000d343 	.word	0x0000d343
    d6d0:	0000d343 	.word	0x0000d343
    d6d4:	0000d343 	.word	0x0000d343
    d6d8:	0000d9f9 	.word	0x0000d9f9
    d6dc:	0000da23 	.word	0x0000da23
    d6e0:	0000da31 	.word	0x0000da31
    d6e4:	0000da41 	.word	0x0000da41
    d6e8:	0000da59 	.word	0x0000da59
    d6ec:	0000d343 	.word	0x0000d343
    d6f0:	0000d343 	.word	0x0000d343
    d6f4:	0000db6d 	.word	0x0000db6d
    d6f8:	0000db7b 	.word	0x0000db7b
    d6fc:	0000db83 	.word	0x0000db83
    d700:	0000db93 	.word	0x0000db93
    d704:	0000dba5 	.word	0x0000dba5
    d708:	0000dbc3 	.word	0x0000dbc3
    d70c:	0000dbe1 	.word	0x0000dbe1
    d710:	0000dbf7 	.word	0x0000dbf7
    d714:	0000da85 	.word	0x0000da85
    d718:	0000da9d 	.word	0x0000da9d
    d71c:	0000daf3 	.word	0x0000daf3
    d720:	0000db11 	.word	0x0000db11
    d724:	0000d343 	.word	0x0000d343
    d728:	0000d343 	.word	0x0000d343
    d72c:	0000d343 	.word	0x0000d343
    d730:	0000d881 	.word	0x0000d881
    d734:	0000d88b 	.word	0x0000d88b
    d738:	0000d897 	.word	0x0000d897
    d73c:	0000d8a3 	.word	0x0000d8a3
    d740:	0000d343 	.word	0x0000d343
    d744:	0000d343 	.word	0x0000d343
    d748:	0000d343 	.word	0x0000d343
    d74c:	0000d343 	.word	0x0000d343
    d750:	0000d343 	.word	0x0000d343
    d754:	0000d343 	.word	0x0000d343
    d758:	0000d343 	.word	0x0000d343
    d75c:	0000d343 	.word	0x0000d343
    d760:	0000d343 	.word	0x0000d343
    d764:	0000d343 	.word	0x0000d343
    d768:	0000d343 	.word	0x0000d343
    d76c:	0000d343 	.word	0x0000d343
    d770:	0000d343 	.word	0x0000d343
    d774:	0000d343 	.word	0x0000d343
    d778:	0000d343 	.word	0x0000d343
    d77c:	0000d343 	.word	0x0000d343
    d780:	0000d343 	.word	0x0000d343
    d784:	0000dc0b 	.word	0x0000dc0b
    d788:	0000d343 	.word	0x0000d343
    d78c:	0000d343 	.word	0x0000d343
    d790:	0000dc01 	.word	0x0000dc01
	le_event_mask = sys_get_le64(cmd->events);
    d794:	68a0      	ldr	r0, [r4, #8]
    d796:	f7ff fd99 	bl	d2cc <sys_get_le64>
    d79a:	4bb6      	ldr	r3, [pc, #728]	; (da74 <hci_cmd_handle+0x7a0>)
    d79c:	e645      	b.n	d42a <hci_cmd_handle+0x156>
	rp = cmd_complete(evt, sizeof(*rp));
    d79e:	2104      	movs	r1, #4
    d7a0:	a807      	add	r0, sp, #28
    d7a2:	f7ff fa2b 	bl	cbfc <cmd_complete>
	rp->status = 0x00;
    d7a6:	2300      	movs	r3, #0
    d7a8:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    d7aa:	221b      	movs	r2, #27
    d7ac:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    d7ae:	2302      	movs	r3, #2
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    d7b0:	7042      	strb	r2, [r0, #1]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    d7b2:	70c3      	strb	r3, [r0, #3]
    d7b4:	e609      	b.n	d3ca <hci_cmd_handle+0xf6>
	rp = cmd_complete(evt, sizeof(*rp));
    d7b6:	2109      	movs	r1, #9
    d7b8:	a807      	add	r0, sp, #28
    d7ba:	f7ff fa1f 	bl	cbfc <cmd_complete>
	rp->status = 0x00;
    d7be:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    d7c0:	4604      	mov	r4, r0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    d7c2:	2208      	movs	r2, #8
	rp->status = 0x00;
    d7c4:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    d7c8:	f7f3 f80f 	bl	7ea <memset>
	rp->features[0] = RADIO_BLE_FEAT & 0xFF;
    d7cc:	23ff      	movs	r3, #255	; 0xff
    d7ce:	7063      	strb	r3, [r4, #1]
	rp->features[1] = (RADIO_BLE_FEAT >> 8)  & 0xFF;
    d7d0:	2349      	movs	r3, #73	; 0x49
    d7d2:	70a3      	strb	r3, [r4, #2]
	rp->features[2] = (RADIO_BLE_FEAT >> 16)  & 0xFF;
    d7d4:	2301      	movs	r3, #1
    d7d6:	70e3      	strb	r3, [r4, #3]
    d7d8:	e5f7      	b.n	d3ca <hci_cmd_handle+0xf6>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
    d7da:	68a1      	ldr	r1, [r4, #8]
    d7dc:	2001      	movs	r0, #1
    d7de:	f7ff f815 	bl	c80c <ll_addr_set>
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    d7e2:	4604      	mov	r4, r0
    d7e4:	e0c6      	b.n	d974 <hci_cmd_handle+0x6a0>
	rp = cmd_complete(evt, sizeof(*rp));
    d7e6:	2102      	movs	r1, #2
    d7e8:	a807      	add	r0, sp, #28
    d7ea:	f7ff fa07 	bl	cbfc <cmd_complete>
	rp->status = 0x00;
    d7ee:	2300      	movs	r3, #0
    d7f0:	7003      	strb	r3, [r0, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    d7f2:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
    d7f4:	f00a f870 	bl	178d8 <ll_wl_size_get>
    d7f8:	7060      	strb	r0, [r4, #1]
    d7fa:	e5e6      	b.n	d3ca <hci_cmd_handle+0xf6>
	ccst = cmd_complete(evt, sizeof(*ccst));
    d7fc:	2101      	movs	r1, #1
    d7fe:	a807      	add	r0, sp, #28
    d800:	f7ff f9fc 	bl	cbfc <cmd_complete>
    d804:	4604      	mov	r4, r0
	ccst->status = ll_wl_clear();
    d806:	f00a f869 	bl	178dc <ll_wl_clear>
	ccst->status = ll_rl_enable(enable);
    d80a:	7020      	strb	r0, [r4, #0]
    d80c:	e5dd      	b.n	d3ca <hci_cmd_handle+0xf6>
	status = ll_wl_add(&cmd->addr);
    d80e:	68a0      	ldr	r0, [r4, #8]
    d810:	f00a f91a 	bl	17a48 <ll_wl_add>
    d814:	e7e5      	b.n	d7e2 <hci_cmd_handle+0x50e>
	status = ll_wl_remove(&cmd->addr);
    d816:	68a0      	ldr	r0, [r4, #8]
    d818:	f00a f880 	bl	1791c <ll_wl_remove>
    d81c:	e7e1      	b.n	d7e2 <hci_cmd_handle+0x50e>
    d81e:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    d820:	2300      	movs	r3, #0
    d822:	aa08      	add	r2, sp, #32
    d824:	f100 0110 	add.w	r1, r0, #16
    d828:	f00a fe52 	bl	184d0 <ecb_encrypt>
	rp = cmd_complete(evt, sizeof(*rp));
    d82c:	2111      	movs	r1, #17
    d82e:	a807      	add	r0, sp, #28
    d830:	f7ff f9e4 	bl	cbfc <cmd_complete>
	rp->status = 0x00;
    d834:	2300      	movs	r3, #0
    d836:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
    d83a:	2210      	movs	r2, #16
    d83c:	a908      	add	r1, sp, #32
	memcpy(rp->info, build_info, sizeof(build_info));
    d83e:	f7f2 ffa8 	bl	792 <memcpy>
    d842:	e5c2      	b.n	d3ca <hci_cmd_handle+0xf6>
	rp = cmd_complete(evt, sizeof(*rp));
    d844:	2109      	movs	r1, #9
    d846:	a807      	add	r0, sp, #28
    d848:	f7ff f9d8 	bl	cbfc <cmd_complete>
	rp->status = 0x00;
    d84c:	2300      	movs	r3, #0
    d84e:	f800 3b01 	strb.w	r3, [r0], #1
	bt_rand(rp->rand, count);
    d852:	2108      	movs	r1, #8
    d854:	f7fe fffa 	bl	c84c <bt_rand>
    d858:	e5b7      	b.n	d3ca <hci_cmd_handle+0xf6>
	rp = cmd_complete(evt, sizeof(*rp));
    d85a:	2109      	movs	r1, #9
    d85c:	a807      	add	r0, sp, #28
    d85e:	f7ff f9cd 	bl	cbfc <cmd_complete>
	rp->status = 0x00;
    d862:	4601      	mov	r1, r0
    d864:	2300      	movs	r3, #0
	rp = cmd_complete(evt, sizeof(*rp));
    d866:	4602      	mov	r2, r0
	rp->status = 0x00;
    d868:	f801 3b01 	strb.w	r3, [r1], #1
	sys_put_le32(val, dst);
    d86c:	f46f 0040 	mvn.w	r0, #12582912	; 0xc00000
    d870:	f7ff f980 	bl	cb74 <sys_put_le32>
	sys_put_le32(val >> 32, &dst[4]);
    d874:	f240 30ff 	movw	r0, #1023	; 0x3ff
    d878:	1d51      	adds	r1, r2, #5
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    d87a:	f7ff f97b 	bl	cb74 <sys_put_le32>
    d87e:	e5a4      	b.n	d3ca <hci_cmd_handle+0xf6>
		le_set_adv_param(cmd, evt);
    d880:	a907      	add	r1, sp, #28
    d882:	68a0      	ldr	r0, [r4, #8]
    d884:	f7ff fb60 	bl	cf48 <le_set_adv_param.isra.37>
    d888:	e59f      	b.n	d3ca <hci_cmd_handle+0xf6>
    d88a:	68a3      	ldr	r3, [r4, #8]
	ll_adv_data_set(cmd->len, &cmd->data[0]);
    d88c:	1c59      	adds	r1, r3, #1
    d88e:	7818      	ldrb	r0, [r3, #0]
    d890:	f009 fcb0 	bl	171f4 <ll_adv_data_set>
    d894:	e5b9      	b.n	d40a <hci_cmd_handle+0x136>
    d896:	68a3      	ldr	r3, [r4, #8]
	ll_scan_data_set(cmd->len, &cmd->data[0]);
    d898:	1c59      	adds	r1, r3, #1
    d89a:	7818      	ldrb	r0, [r3, #0]
    d89c:	f009 fd16 	bl	172cc <ll_scan_data_set>
    d8a0:	e5b3      	b.n	d40a <hci_cmd_handle+0x136>
		le_set_adv_enable(cmd, evt);
    d8a2:	a907      	add	r1, sp, #28
    d8a4:	68a0      	ldr	r0, [r4, #8]
    d8a6:	f7ff fb77 	bl	cf98 <le_set_adv_enable.isra.40>
    d8aa:	e58e      	b.n	d3ca <hci_cmd_handle+0xf6>
    d8ac:	68a4      	ldr	r4, [r4, #8]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
    d8ae:	7963      	ldrb	r3, [r4, #5]
    d8b0:	f8b4 2003 	ldrh.w	r2, [r4, #3]
    d8b4:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    d8b8:	7820      	ldrb	r0, [r4, #0]
    d8ba:	79a4      	ldrb	r4, [r4, #6]
    d8bc:	9400      	str	r4, [sp, #0]
    d8be:	f009 fdc3 	bl	17448 <ll_scan_params_set>
	status = ll_scan_enable(cmd->enable);
    d8c2:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    d8c4:	2101      	movs	r1, #1
    d8c6:	a807      	add	r0, sp, #28
    d8c8:	f7ff f998 	bl	cbfc <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d8cc:	2c00      	cmp	r4, #0
    d8ce:	bf18      	it	ne
    d8d0:	230c      	movne	r3, #12
    d8d2:	bf08      	it	eq
    d8d4:	2300      	moveq	r3, #0
	ccst->status = 0x00;
    d8d6:	7003      	strb	r3, [r0, #0]
    d8d8:	e577      	b.n	d3ca <hci_cmd_handle+0xf6>
    d8da:	68a2      	ldr	r2, [r4, #8]
    d8dc:	4b66      	ldr	r3, [pc, #408]	; (da78 <hci_cmd_handle+0x7a4>)
	if (cmd->enable && cmd->filter_dup) {
    d8de:	7810      	ldrb	r0, [r2, #0]
    d8e0:	b140      	cbz	r0, d8f4 <hci_cmd_handle+0x620>
    d8e2:	7852      	ldrb	r2, [r2, #1]
    d8e4:	b132      	cbz	r2, d8f4 <hci_cmd_handle+0x620>
		dup_count = 0;
    d8e6:	2200      	movs	r2, #0
    d8e8:	601a      	str	r2, [r3, #0]
		dup_curr = 0;
    d8ea:	4b64      	ldr	r3, [pc, #400]	; (da7c <hci_cmd_handle+0x7a8>)
		dup_count = -1;
    d8ec:	601a      	str	r2, [r3, #0]
	status = ll_scan_enable(cmd->enable);
    d8ee:	f009 fdcf 	bl	17490 <ll_scan_enable>
    d8f2:	e7e6      	b.n	d8c2 <hci_cmd_handle+0x5ee>
		dup_count = -1;
    d8f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    d8f8:	e7f8      	b.n	d8ec <hci_cmd_handle+0x618>
    d8fa:	68a4      	ldr	r4, [r4, #8]
	status = ll_create_connection(scan_interval, scan_window,
    d8fc:	f8b4 5013 	ldrh.w	r5, [r4, #19]
    d900:	7963      	ldrb	r3, [r4, #5]
    d902:	7922      	ldrb	r2, [r4, #4]
    d904:	8861      	ldrh	r1, [r4, #2]
    d906:	8820      	ldrh	r0, [r4, #0]
    d908:	9504      	str	r5, [sp, #16]
    d90a:	f8b4 5011 	ldrh.w	r5, [r4, #17]
    d90e:	9503      	str	r5, [sp, #12]
    d910:	f8b4 500f 	ldrh.w	r5, [r4, #15]
    d914:	9502      	str	r5, [sp, #8]
    d916:	7b25      	ldrb	r5, [r4, #12]
    d918:	9501      	str	r5, [sp, #4]
    d91a:	3406      	adds	r4, #6
    d91c:	9400      	str	r4, [sp, #0]
    d91e:	f009 fdf1 	bl	17504 <ll_create_connection>
    d922:	e54b      	b.n	d3bc <hci_cmd_handle+0xe8>
	status = ll_connect_disable();
    d924:	f009 f904 	bl	16b30 <ll_connect_disable>
	cmd_status = status ? BT_HCI_ERR_CMD_DISALLOWED : 0x00;
    d928:	4606      	mov	r6, r0
    d92a:	bb48      	cbnz	r0, d980 <hci_cmd_handle+0x6ac>
		*evt = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    d92c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    d930:	2001      	movs	r0, #1
    d932:	f7f8 f85f 	bl	59f4 <bt_buf_get_rx>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d936:	4a52      	ldr	r2, [pc, #328]	; (da80 <hci_cmd_handle+0x7ac>)
		*evt = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    d938:	9007      	str	r0, [sp, #28]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d93a:	e9d2 4500 	ldrd	r4, r5, [r2]
    d93e:	2400      	movs	r4, #0
    d940:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    d944:	ea54 0205 	orrs.w	r2, r4, r5
		*evt = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    d948:	4603      	mov	r3, r0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d94a:	d004      	beq.n	d956 <hci_cmd_handle+0x682>
    d94c:	4632      	mov	r2, r6
    d94e:	4631      	mov	r1, r6
    d950:	2002      	movs	r0, #2
    d952:	f7ff fb31 	bl	cfb8 <le_conn_complete.part.44>
		if ((*evt)->len) {
    d956:	9807      	ldr	r0, [sp, #28]
    d958:	8984      	ldrh	r4, [r0, #12]
    d95a:	b14c      	cbz	r4, d970 <hci_cmd_handle+0x69c>
			ccst = cmd_complete(&cc, sizeof(*ccst));
    d95c:	2101      	movs	r1, #1
    d95e:	a808      	add	r0, sp, #32
    d960:	f7ff f94c 	bl	cbfc <cmd_complete>
			ccst->status = cmd_status;
    d964:	2300      	movs	r3, #0
    d966:	7003      	strb	r3, [r0, #0]
			bt_recv_prio(cc);
    d968:	9808      	ldr	r0, [sp, #32]
    d96a:	f7f7 fe15 	bl	5598 <bt_recv_prio>
    d96e:	e52c      	b.n	d3ca <hci_cmd_handle+0xf6>
			net_buf_unref(*evt);
    d970:	f00b fcba 	bl	192e8 <net_buf_unref>
	ccst = cmd_complete(evt, sizeof(*ccst));
    d974:	2101      	movs	r1, #1
    d976:	a807      	add	r0, sp, #28
    d978:	f7ff f940 	bl	cbfc <cmd_complete>
	ccst->status = status;
    d97c:	7004      	strb	r4, [r0, #0]
    d97e:	e524      	b.n	d3ca <hci_cmd_handle+0xf6>
	cmd_status = status ? BT_HCI_ERR_CMD_DISALLOWED : 0x00;
    d980:	240c      	movs	r4, #12
    d982:	e7f7      	b.n	d974 <hci_cmd_handle+0x6a0>
	status = ll_chm_update(&cmd->ch_map[0]);
    d984:	68a0      	ldr	r0, [r4, #8]
    d986:	f008 f981 	bl	15c8c <ll_chm_update>
    d98a:	e79a      	b.n	d8c2 <hci_cmd_handle+0x5ee>
    d98c:	68a0      	ldr	r0, [r4, #8]
	status = ll_enc_req_send(handle,
    d98e:	f100 030c 	add.w	r3, r0, #12
    d992:	f100 020a 	add.w	r2, r0, #10
    d996:	1c81      	adds	r1, r0, #2
    d998:	8800      	ldrh	r0, [r0, #0]
    d99a:	f008 fc6f 	bl	1627c <ll_enc_req_send>
    d99e:	e50d      	b.n	d3bc <hci_cmd_handle+0xe8>
	handle = sys_le16_to_cpu(cmd->handle);
    d9a0:	68a2      	ldr	r2, [r4, #8]
    d9a2:	f832 4b02 	ldrh.w	r4, [r2], #2
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
    d9a6:	2100      	movs	r1, #0
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
    d9a8:	b2a0      	uxth	r0, r4
    d9aa:	f008 f9c6 	bl	15d3a <ll_start_enc_req_send>
    d9ae:	e57e      	b.n	d4ae <hci_cmd_handle+0x1da>
	handle = sys_le16_to_cpu(cmd->handle);
    d9b0:	68a3      	ldr	r3, [r4, #8]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
    d9b2:	2200      	movs	r2, #0
	handle = sys_le16_to_cpu(cmd->handle);
    d9b4:	881c      	ldrh	r4, [r3, #0]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
    d9b6:	2106      	movs	r1, #6
    d9b8:	e7f6      	b.n	d9a8 <hci_cmd_handle+0x6d4>
	handle = sys_le16_to_cpu(cmd->handle);
    d9ba:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    d9bc:	2108      	movs	r1, #8
    d9be:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    d9c0:	881d      	ldrh	r5, [r3, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    d9c2:	f7ff f91b 	bl	cbfc <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    d9c6:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    d9c8:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
    d9ca:	1cc1      	adds	r1, r0, #3
    d9cc:	4630      	mov	r0, r6
    d9ce:	f008 f99f 	bl	15d10 <ll_chm_get>
    d9d2:	e547      	b.n	d464 <hci_cmd_handle+0x190>
	handle = sys_le16_to_cpu(cmd->handle);
    d9d4:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
    d9d6:	8818      	ldrh	r0, [r3, #0]
    d9d8:	f008 f9f2 	bl	15dc0 <ll_feature_req_send>
    d9dc:	e4ee      	b.n	d3bc <hci_cmd_handle+0xe8>
    d9de:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_max,
    d9e0:	8911      	ldrh	r1, [r2, #8]
    d9e2:	8893      	ldrh	r3, [r2, #4]
    d9e4:	8810      	ldrh	r0, [r2, #0]
    d9e6:	9101      	str	r1, [sp, #4]
    d9e8:	88d2      	ldrh	r2, [r2, #6]
    d9ea:	9200      	str	r2, [sp, #0]
    d9ec:	2200      	movs	r2, #0
    d9ee:	4611      	mov	r1, r2
    d9f0:	f008 f8d4 	bl	15b9c <ll_conn_update>
	*evt = cmd_status(status);
    d9f4:	b2c0      	uxtb	r0, r0
    d9f6:	e4e5      	b.n	d3c4 <hci_cmd_handle+0xf0>
    d9f8:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    d9fa:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    d9fc:	8814      	ldrh	r4, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    d9fe:	8893      	ldrh	r3, [r2, #4]
    da00:	9101      	str	r1, [sp, #4]
    da02:	88d2      	ldrh	r2, [r2, #6]
    da04:	9200      	str	r2, [sp, #0]
    da06:	2200      	movs	r2, #0
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    da08:	2102      	movs	r1, #2
    da0a:	b2a0      	uxth	r0, r4
    da0c:	f008 f8c6 	bl	15b9c <ll_conn_update>
	rp = cmd_complete(evt, sizeof(*rp));
    da10:	2103      	movs	r1, #3
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    da12:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    da14:	a807      	add	r0, sp, #28
    da16:	f7ff f8f1 	bl	cbfc <cmd_complete>
	rp->status = status;
    da1a:	7005      	strb	r5, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    da1c:	f8a0 4001 	strh.w	r4, [r0, #1]
    da20:	e4d3      	b.n	d3ca <hci_cmd_handle+0xf6>
    da22:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    da24:	881c      	ldrh	r4, [r3, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    da26:	789a      	ldrb	r2, [r3, #2]
    da28:	2300      	movs	r3, #0
    da2a:	9301      	str	r3, [sp, #4]
    da2c:	9300      	str	r3, [sp, #0]
    da2e:	e7eb      	b.n	da08 <hci_cmd_handle+0x734>
    da30:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    da32:	881c      	ldrh	r4, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
    da34:	889a      	ldrh	r2, [r3, #4]
    da36:	8859      	ldrh	r1, [r3, #2]
    da38:	b2a0      	uxth	r0, r4
    da3a:	f008 fa31 	bl	15ea0 <ll_length_req_send>
    da3e:	e536      	b.n	d4ae <hci_cmd_handle+0x1da>
	rp = cmd_complete(evt, sizeof(*rp));
    da40:	2105      	movs	r1, #5
    da42:	a807      	add	r0, sp, #28
    da44:	f7ff f8da 	bl	cbfc <cmd_complete>
    da48:	4604      	mov	r4, r0
	ll_length_default_get(&rp->max_tx_octets, &rp->max_tx_time);
    da4a:	1cc1      	adds	r1, r0, #3
    da4c:	3001      	adds	r0, #1
    da4e:	f008 fa4b 	bl	15ee8 <ll_length_default_get>
	rp->status = 0x00;
    da52:	2300      	movs	r3, #0
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    da54:	7023      	strb	r3, [r4, #0]
    da56:	e4b8      	b.n	d3ca <hci_cmd_handle+0xf6>
    da58:	68a3      	ldr	r3, [r4, #8]
	status = ll_length_default_set(cmd->max_tx_octets, cmd->max_tx_time);
    da5a:	8859      	ldrh	r1, [r3, #2]
    da5c:	8818      	ldrh	r0, [r3, #0]
    da5e:	f008 fa4d 	bl	15efc <ll_length_default_set>
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    da62:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    da64:	2101      	movs	r1, #1
    da66:	a807      	add	r0, sp, #28
    da68:	f7ff f8c8 	bl	cbfc <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_INVALID_LL_PARAM;
    da6c:	2c00      	cmp	r4, #0
    da6e:	bf18      	it	ne
    da70:	231e      	movne	r3, #30
    da72:	e72e      	b.n	d8d2 <hci_cmd_handle+0x5fe>
    da74:	20009fc0 	.word	0x20009fc0
    da78:	20000b5c 	.word	0x20000b5c
    da7c:	20000b60 	.word	0x20000b60
    da80:	20009fb8 	.word	0x20009fb8
	rp = cmd_complete(evt, sizeof(*rp));
    da84:	2109      	movs	r1, #9
    da86:	a807      	add	r0, sp, #28
    da88:	f7ff f8b8 	bl	cbfc <cmd_complete>
    da8c:	4604      	mov	r4, r0
	ll_length_max_get(&rp->max_tx_octets, &rp->max_tx_time,
    da8e:	1dc3      	adds	r3, r0, #7
    da90:	1d42      	adds	r2, r0, #5
    da92:	1cc1      	adds	r1, r0, #3
    da94:	3001      	adds	r0, #1
    da96:	f008 fa3b 	bl	15f10 <ll_length_max_get>
    da9a:	e7da      	b.n	da52 <hci_cmd_handle+0x77e>
	handle = sys_le16_to_cpu(cmd->handle);
    da9c:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    da9e:	2105      	movs	r1, #5
    daa0:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    daa2:	881d      	ldrh	r5, [r3, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    daa4:	f7ff f8aa 	bl	cbfc <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    daa8:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    daaa:	4604      	mov	r4, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    daac:	1d02      	adds	r2, r0, #4
    daae:	1cc1      	adds	r1, r0, #3
    dab0:	4630      	mov	r0, r6
    dab2:	f008 fa36 	bl	15f22 <ll_phy_get>
	return __builtin_ffs(op);
    dab6:	78e2      	ldrb	r2, [r4, #3]
	rp->handle = sys_cpu_to_le16(handle);
    dab8:	f8a4 5001 	strh.w	r5, [r4, #1]
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    dabc:	2800      	cmp	r0, #0
    dabe:	bf14      	ite	ne
    dac0:	230c      	movne	r3, #12
    dac2:	2300      	moveq	r3, #0
    dac4:	7023      	strb	r3, [r4, #0]
    dac6:	2a00      	cmp	r2, #0
    dac8:	fa92 f3a2 	rbit	r3, r2
    dacc:	fab3 f383 	clz	r3, r3
    dad0:	7922      	ldrb	r2, [r4, #4]
    dad2:	bf08      	it	eq
    dad4:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    dad8:	3301      	adds	r3, #1
	rp->tx_phy = find_lsb_set(rp->tx_phy);
    dada:	70e3      	strb	r3, [r4, #3]
    dadc:	2a00      	cmp	r2, #0
    dade:	fa92 f3a2 	rbit	r3, r2
    dae2:	fab3 f383 	clz	r3, r3
    dae6:	bf08      	it	eq
    dae8:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    daec:	3301      	adds	r3, #1
	rp->rx_phy = find_lsb_set(rp->rx_phy);
    daee:	7123      	strb	r3, [r4, #4]
    daf0:	e46b      	b.n	d3ca <hci_cmd_handle+0xf6>
    daf2:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    daf4:	781a      	ldrb	r2, [r3, #0]
    daf6:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
    daf8:	bf44      	itt	mi
    dafa:	2107      	movmi	r1, #7
    dafc:	7059      	strbmi	r1, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    dafe:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
    db00:	bf44      	itt	mi
    db02:	2207      	movmi	r2, #7
    db04:	709a      	strbmi	r2, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    db06:	7899      	ldrb	r1, [r3, #2]
    db08:	7858      	ldrb	r0, [r3, #1]
    db0a:	f008 fa1f 	bl	15f4c <ll_phy_default_set>
    db0e:	e7a8      	b.n	da62 <hci_cmd_handle+0x78e>
    db10:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    db12:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(cmd->handle);
    db14:	8818      	ldrh	r0, [r3, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
    db16:	f8b3 4005 	ldrh.w	r4, [r3, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    db1a:	07d7      	lsls	r7, r2, #31
		cmd->tx_phys = mask_phys;
    db1c:	bf44      	itt	mi
    db1e:	2107      	movmi	r1, #7
    db20:	70d9      	strbmi	r1, [r3, #3]
	if (!(cmd->tx_phys & 0x07) ||
    db22:	78d9      	ldrb	r1, [r3, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    db24:	0796      	lsls	r6, r2, #30
		cmd->rx_phys = mask_phys;
    db26:	bf44      	itt	mi
    db28:	2207      	movmi	r2, #7
    db2a:	711a      	strbmi	r2, [r3, #4]
	if (!(cmd->tx_phys & 0x07) ||
    db2c:	074d      	lsls	r5, r1, #29
    db2e:	d002      	beq.n	db36 <hci_cmd_handle+0x862>
	    !(cmd->rx_phys & 0x07)) {
    db30:	791b      	ldrb	r3, [r3, #4]
	if (!(cmd->tx_phys & 0x07) ||
    db32:	075a      	lsls	r2, r3, #29
    db34:	d105      	bne.n	db42 <hci_cmd_handle+0x86e>
		ccst = cmd_complete(evt, sizeof(*ccst));
    db36:	2101      	movs	r1, #1
    db38:	a807      	add	r0, sp, #28
    db3a:	f7ff f85f 	bl	cbfc <cmd_complete>
		ccst->status = BT_HCI_ERR_INVALID_PARAM;
    db3e:	2312      	movs	r3, #18
    db40:	e6c9      	b.n	d8d6 <hci_cmd_handle+0x602>
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
    db42:	ea41 0203 	orr.w	r2, r1, r3
    db46:	f012 0ff8 	tst.w	r2, #248	; 0xf8
    db4a:	d005      	beq.n	db58 <hci_cmd_handle+0x884>
		ccst = cmd_complete(evt, sizeof(*ccst));
    db4c:	2101      	movs	r1, #1
    db4e:	a807      	add	r0, sp, #28
    db50:	f7ff f854 	bl	cbfc <cmd_complete>
		ccst->status = BT_HCI_ERR_UNSUPP_FEATURE_PARAM_VAL;
    db54:	2311      	movs	r3, #17
    db56:	e6be      	b.n	d8d6 <hci_cmd_handle+0x602>
	if (phy_opts & 0x03) {
    db58:	f014 0203 	ands.w	r2, r4, #3
		phy_opts -= 1;
    db5c:	bf1c      	itt	ne
    db5e:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
		phy_opts &= 1;
    db62:	f004 0201 	andne.w	r2, r4, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
    db66:	f008 f9fb 	bl	15f60 <ll_phy_req_send>
    db6a:	e427      	b.n	d3bc <hci_cmd_handle+0xe8>
    db6c:	68a0      	ldr	r0, [r4, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
    db6e:	f100 0217 	add.w	r2, r0, #23
    db72:	1dc1      	adds	r1, r0, #7
    db74:	f00a fa3c 	bl	17ff0 <ll_rl_add>
    db78:	e633      	b.n	d7e2 <hci_cmd_handle+0x50e>
	status = ll_rl_remove(&cmd->peer_id_addr);
    db7a:	68a0      	ldr	r0, [r4, #8]
    db7c:	f00a fada 	bl	18134 <ll_rl_remove>
    db80:	e62f      	b.n	d7e2 <hci_cmd_handle+0x50e>
	ccst = cmd_complete(evt, sizeof(*ccst));
    db82:	2101      	movs	r1, #1
    db84:	a807      	add	r0, sp, #28
    db86:	f7ff f839 	bl	cbfc <cmd_complete>
    db8a:	4604      	mov	r4, r0
	ccst->status = ll_rl_clear();
    db8c:	f00a fa16 	bl	17fbc <ll_rl_clear>
    db90:	e63b      	b.n	d80a <hci_cmd_handle+0x536>
	rp = cmd_complete(evt, sizeof(*rp));
    db92:	2102      	movs	r1, #2
    db94:	a807      	add	r0, sp, #28
    db96:	f7ff f831 	bl	cbfc <cmd_complete>
    db9a:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
    db9c:	f00a fa0c 	bl	17fb8 <ll_rl_size_get>
    dba0:	7060      	strb	r0, [r4, #1]
    dba2:	e756      	b.n	da52 <hci_cmd_handle+0x77e>
	memcpy(dst, src, sizeof(*dst));
    dba4:	2207      	movs	r2, #7
    dba6:	68a1      	ldr	r1, [r4, #8]
    dba8:	a808      	add	r0, sp, #32
    dbaa:	f7f2 fdf2 	bl	792 <memcpy>
	rp = cmd_complete(evt, sizeof(*rp));
    dbae:	2107      	movs	r1, #7
    dbb0:	a807      	add	r0, sp, #28
    dbb2:	f7ff f823 	bl	cbfc <cmd_complete>
    dbb6:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
    dbb8:	1c41      	adds	r1, r0, #1
    dbba:	a808      	add	r0, sp, #32
    dbbc:	f00a fb48 	bl	18250 <ll_rl_crpa_get>
    dbc0:	e623      	b.n	d80a <hci_cmd_handle+0x536>
    dbc2:	2207      	movs	r2, #7
    dbc4:	68a1      	ldr	r1, [r4, #8]
    dbc6:	a808      	add	r0, sp, #32
    dbc8:	f7f2 fde3 	bl	792 <memcpy>
	rp = cmd_complete(evt, sizeof(*rp));
    dbcc:	2107      	movs	r1, #7
    dbce:	a807      	add	r0, sp, #28
    dbd0:	f7ff f814 	bl	cbfc <cmd_complete>
    dbd4:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
    dbd6:	1c41      	adds	r1, r0, #1
    dbd8:	a808      	add	r0, sp, #32
    dbda:	f00a fb59 	bl	18290 <ll_rl_lrpa_get>
    dbde:	e614      	b.n	d80a <hci_cmd_handle+0x536>
	u8_t enable = cmd->enable;
    dbe0:	68a3      	ldr	r3, [r4, #8]
	ccst = cmd_complete(evt, sizeof(*ccst));
    dbe2:	2101      	movs	r1, #1
    dbe4:	a807      	add	r0, sp, #28
	u8_t enable = cmd->enable;
    dbe6:	781d      	ldrb	r5, [r3, #0]
	ccst = cmd_complete(evt, sizeof(*ccst));
    dbe8:	f7ff f808 	bl	cbfc <cmd_complete>
    dbec:	4604      	mov	r4, r0
	ccst->status = ll_rl_enable(enable);
    dbee:	4628      	mov	r0, r5
    dbf0:	f00a fb66 	bl	182c0 <ll_rl_enable>
    dbf4:	e609      	b.n	d80a <hci_cmd_handle+0x536>
	u16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
    dbf6:	68a3      	ldr	r3, [r4, #8]
	ll_rl_timeout_set(timeout);
    dbf8:	8818      	ldrh	r0, [r3, #0]
    dbfa:	f00a fb73 	bl	182e4 <ll_rl_timeout_set>
    dbfe:	e404      	b.n	d40a <hci_cmd_handle+0x136>
    dc00:	68a0      	ldr	r0, [r4, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    dc02:	79c1      	ldrb	r1, [r0, #7]
    dc04:	f00a fb76 	bl	182f4 <ll_priv_mode_set>
    dc08:	e5eb      	b.n	d7e2 <hci_cmd_handle+0x50e>
	rp = cmd_complete(evt, sizeof(*rp));
    dc0a:	2103      	movs	r1, #3
    dc0c:	a807      	add	r0, sp, #28
    dc0e:	f7fe fff5 	bl	cbfc <cmd_complete>
	rp->status = 0x00;
    dc12:	4601      	mov	r1, r0
    dc14:	2300      	movs	r3, #0
    dc16:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    dc1a:	3001      	adds	r0, #1
    dc1c:	f7fe fe12 	bl	c844 <ll_tx_pwr_get>
    dc20:	f7ff bbd3 	b.w	d3ca <hci_cmd_handle+0xf6>
	rp = cmd_complete(evt, sizeof(*rp));
    dc24:	210d      	movs	r1, #13
    dc26:	a807      	add	r0, sp, #28
    dc28:	f7fe ffe8 	bl	cbfc <cmd_complete>
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    dc2c:	2202      	movs	r2, #2
    dc2e:	7042      	strb	r2, [r0, #1]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    dc30:	70c2      	strb	r2, [r0, #3]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    dc32:	2201      	movs	r2, #1
    dc34:	7182      	strb	r2, [r0, #6]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    dc36:	220b      	movs	r2, #11
	rp->status = 0x00;
    dc38:	2300      	movs	r3, #0
	rp->fw_revision = KERNEL_VERSION_MINOR;
    dc3a:	71c2      	strb	r2, [r0, #7]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    dc3c:	2263      	movs	r2, #99	; 0x63
	rp->status = 0x00;
    dc3e:	7003      	strb	r3, [r0, #0]
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    dc40:	7083      	strb	r3, [r0, #2]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    dc42:	7103      	strb	r3, [r0, #4]
	rp->fw_variant = 0;
    dc44:	7143      	strb	r3, [r0, #5]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    dc46:	7203      	strb	r3, [r0, #8]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    dc48:	7242      	strb	r2, [r0, #9]
    dc4a:	7283      	strb	r3, [r0, #10]
    dc4c:	72c3      	strb	r3, [r0, #11]
    dc4e:	7303      	strb	r3, [r0, #12]
    dc50:	f7ff bbbb 	b.w	d3ca <hci_cmd_handle+0xf6>
	rp = cmd_complete(evt, sizeof(*rp));
    dc54:	2141      	movs	r1, #65	; 0x41
    dc56:	a807      	add	r0, sp, #28
    dc58:	f7fe ffd0 	bl	cbfc <cmd_complete>
	rp->status = 0x00;
    dc5c:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    dc5e:	4604      	mov	r4, r0
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    dc60:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    dc62:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    dc66:	f7f2 fdc0 	bl	7ea <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
    dc6a:	7863      	ldrb	r3, [r4, #1]
    dc6c:	f063 0358 	orn	r3, r3, #88	; 0x58
    dc70:	7063      	strb	r3, [r4, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    dc72:	78a3      	ldrb	r3, [r4, #2]
    dc74:	f043 0303 	orr.w	r3, r3, #3
    dc78:	70a3      	strb	r3, [r4, #2]
    dc7a:	f7ff bba6 	b.w	d3ca <hci_cmd_handle+0xf6>
	rp = cmd_complete(evt, sizeof(*rp));
    dc7e:	2109      	movs	r1, #9
    dc80:	a807      	add	r0, sp, #28
    dc82:	f7fe ffbb 	bl	cbfc <cmd_complete>
	rp->status = 0x00;
    dc86:	2100      	movs	r1, #0
    dc88:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    dc8c:	2208      	movs	r2, #8
		memset(rp->er, 0x00, sizeof(rp->er));
    dc8e:	f7f2 fdac 	bl	7ea <memset>
    dc92:	f7ff bb9a 	b.w	d3ca <hci_cmd_handle+0xf6>
	const char build_info[] = HCI_VS_BUILD_INFO;
    dc96:	4b5c      	ldr	r3, [pc, #368]	; (de08 <hci_cmd_handle+0xb34>)
    dc98:	aa08      	add	r2, sp, #32
    dc9a:	f103 0628 	add.w	r6, r3, #40	; 0x28
    dc9e:	4615      	mov	r5, r2
    dca0:	6818      	ldr	r0, [r3, #0]
    dca2:	6859      	ldr	r1, [r3, #4]
    dca4:	4614      	mov	r4, r2
    dca6:	c403      	stmia	r4!, {r0, r1}
    dca8:	3308      	adds	r3, #8
    dcaa:	42b3      	cmp	r3, r6
    dcac:	4622      	mov	r2, r4
    dcae:	d1f7      	bne.n	dca0 <hci_cmd_handle+0x9cc>
	rp = cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
    dcb0:	2129      	movs	r1, #41	; 0x29
    dcb2:	a807      	add	r0, sp, #28
    dcb4:	f7fe ffa2 	bl	cbfc <cmd_complete>
	rp->status = 0x00;
    dcb8:	2300      	movs	r3, #0
    dcba:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
    dcbe:	2228      	movs	r2, #40	; 0x28
    dcc0:	4629      	mov	r1, r5
    dcc2:	e5bc      	b.n	d83e <hci_cmd_handle+0x56a>
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    dcc4:	68a1      	ldr	r1, [r4, #8]
    dcc6:	2000      	movs	r0, #0
    dcc8:	f7fe fda0 	bl	c80c <ll_addr_set>
    dccc:	f7ff bb9d 	b.w	d40a <hci_cmd_handle+0x136>
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    dcd0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    dcd4:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
    dcd8:	3201      	adds	r2, #1
    dcda:	d106      	bne.n	dcea <hci_cmd_handle+0xa16>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    dcdc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    dce0:	f64f 72ff 	movw	r2, #65535	; 0xffff
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    dce4:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    dce6:	4293      	cmp	r3, r2
    dce8:	d020      	beq.n	dd2c <hci_cmd_handle+0xa58>
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
    dcea:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    dcee:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    dcf2:	07db      	lsls	r3, r3, #31
    dcf4:	d51a      	bpl.n	dd2c <hci_cmd_handle+0xa58>
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    dcf6:	2118      	movs	r1, #24
    dcf8:	a807      	add	r0, sp, #28
    dcfa:	f7fe ff7f 	bl	cbfc <cmd_complete>
		rp->status = 0x00;
    dcfe:	2600      	movs	r6, #0
		rp->num_addrs = 1;
    dd00:	2301      	movs	r3, #1
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    dd02:	4604      	mov	r4, r0
		rp->num_addrs = 1;
    dd04:	7043      	strb	r3, [r0, #1]
		rp->status = 0x00;
    dd06:	7006      	strb	r6, [r0, #0]
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addr->bdaddr.val[0]);
    dd08:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    dd0c:	1ca1      	adds	r1, r4, #2
    dd0e:	f7fe ff31 	bl	cb74 <sys_put_le32>
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addr->bdaddr.val[4]);
    dd12:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
	dst[0] = val;
    dd16:	71a3      	strb	r3, [r4, #6]
	dst[1] = val >> 8;
    dd18:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addr->bdaddr);
    dd1c:	f063 033f 	orn	r3, r3, #63	; 0x3f
    dd20:	71e3      	strb	r3, [r4, #7]
		memset(addr->ir, 0x00, sizeof(addr->ir));
    dd22:	2210      	movs	r2, #16
    dd24:	4631      	mov	r1, r6
    dd26:	f104 0008 	add.w	r0, r4, #8
    dd2a:	e7b0      	b.n	dc8e <hci_cmd_handle+0x9ba>
	rp = cmd_complete(evt, sizeof(*rp));
    dd2c:	2102      	movs	r1, #2
    dd2e:	a807      	add	r0, sp, #28
    dd30:	f7fe ff64 	bl	cbfc <cmd_complete>
	rp->status = 0x00;
    dd34:	2300      	movs	r3, #0
    dd36:	7003      	strb	r3, [r0, #0]
	rp->num_addrs = 0;
    dd38:	7043      	strb	r3, [r0, #1]
    dd3a:	f7ff bb46 	b.w	d3ca <hci_cmd_handle+0xf6>
	rp = cmd_complete(evt, sizeof(*rp));
    dd3e:	2121      	movs	r1, #33	; 0x21
    dd40:	a807      	add	r0, sp, #28
    dd42:	f7fe ff5b 	bl	cbfc <cmd_complete>
	rp->status = 0x00;
    dd46:	4603      	mov	r3, r0
    dd48:	2200      	movs	r2, #0
    dd4a:	f803 2b01 	strb.w	r2, [r3], #1
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    dd4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	rp = cmd_complete(evt, sizeof(*rp));
    dd52:	4604      	mov	r4, r0
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    dd54:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
    dd58:	3101      	adds	r1, #1
    dd5a:	d04b      	beq.n	ddf4 <hci_cmd_handle+0xb20>
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    dd5c:	f8d2 1094 	ldr.w	r1, [r2, #148]	; 0x94
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    dd60:	3101      	adds	r1, #1
    dd62:	d047      	beq.n	ddf4 <hci_cmd_handle+0xb20>
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    dd64:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    dd68:	3101      	adds	r1, #1
    dd6a:	d043      	beq.n	ddf4 <hci_cmd_handle+0xb20>
	    (NRF_FICR->IR[3] != UINT32_MAX)) {
    dd6c:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    dd70:	3101      	adds	r1, #1
    dd72:	d03f      	beq.n	ddf4 <hci_cmd_handle+0xb20>
		sys_put_le32(NRF_FICR->IR[0], &rp->ir[0]);
    dd74:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
    dd78:	4619      	mov	r1, r3
    dd7a:	f7fe fefb 	bl	cb74 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[1], &rp->ir[4]);
    dd7e:	1d61      	adds	r1, r4, #5
    dd80:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
    dd84:	f7fe fef6 	bl	cb74 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[2], &rp->ir[8]);
    dd88:	f104 0109 	add.w	r1, r4, #9
    dd8c:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    dd90:	f7fe fef0 	bl	cb74 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[3], &rp->ir[12]);
    dd94:	f104 010d 	add.w	r1, r4, #13
    dd98:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
    dd9c:	f7fe feea 	bl	cb74 <sys_put_le32>
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    dda0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    dda4:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    dda8:	3301      	adds	r3, #1
    ddaa:	f104 0311 	add.w	r3, r4, #17
    ddae:	d027      	beq.n	de00 <hci_cmd_handle+0xb2c>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    ddb0:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    ddb4:	3101      	adds	r1, #1
    ddb6:	d023      	beq.n	de00 <hci_cmd_handle+0xb2c>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    ddb8:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    ddbc:	3101      	adds	r1, #1
    ddbe:	d01f      	beq.n	de00 <hci_cmd_handle+0xb2c>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
    ddc0:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    ddc4:	3101      	adds	r1, #1
    ddc6:	d01b      	beq.n	de00 <hci_cmd_handle+0xb2c>
		sys_put_le32(NRF_FICR->ER[0], &rp->er[0]);
    ddc8:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
    ddcc:	4619      	mov	r1, r3
    ddce:	f7fe fed1 	bl	cb74 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[1], &rp->er[4]);
    ddd2:	f104 0115 	add.w	r1, r4, #21
    ddd6:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    ddda:	f7fe fecb 	bl	cb74 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[2], &rp->er[8]);
    ddde:	f104 0119 	add.w	r1, r4, #25
    dde2:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
    dde6:	f7fe fec5 	bl	cb74 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    ddea:	f104 011d 	add.w	r1, r4, #29
    ddee:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
    ddf2:	e542      	b.n	d87a <hci_cmd_handle+0x5a6>
		memset(rp->ir, 0x00, sizeof(rp->ir));
    ddf4:	2210      	movs	r2, #16
    ddf6:	2100      	movs	r1, #0
    ddf8:	4618      	mov	r0, r3
    ddfa:	f7f2 fcf6 	bl	7ea <memset>
    ddfe:	e7cf      	b.n	dda0 <hci_cmd_handle+0xacc>
		memset(rp->er, 0x00, sizeof(rp->er));
    de00:	2210      	movs	r2, #16
    de02:	2100      	movs	r1, #0
    de04:	4618      	mov	r0, r3
    de06:	e742      	b.n	dc8e <hci_cmd_handle+0x9ba>
    de08:	00025825 	.word	0x00025825

0000de0c <hci_acl_handle>:
{
    de0c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	*evt = NULL;
    de10:	2300      	movs	r3, #0
    de12:	600b      	str	r3, [r1, #0]
	if (buf->len < sizeof(*acl)) {
    de14:	8983      	ldrh	r3, [r0, #12]
    de16:	2b03      	cmp	r3, #3
{
    de18:	4606      	mov	r6, r0
    de1a:	4688      	mov	r8, r1
	if (buf->len < sizeof(*acl)) {
    de1c:	d80d      	bhi.n	de3a <hci_acl_handle+0x2e>
		BT_ERR("No HCI ACL header");
    de1e:	4b3a      	ldr	r3, [pc, #232]	; (df08 <hci_acl_handle+0xfc>)
    de20:	9301      	str	r3, [sp, #4]
    de22:	9300      	str	r3, [sp, #0]
    de24:	4a39      	ldr	r2, [pc, #228]	; (df0c <hci_acl_handle+0x100>)
    de26:	4b3a      	ldr	r3, [pc, #232]	; (df10 <hci_acl_handle+0x104>)
    de28:	493a      	ldr	r1, [pc, #232]	; (df14 <hci_acl_handle+0x108>)
    de2a:	483b      	ldr	r0, [pc, #236]	; (df18 <hci_acl_handle+0x10c>)
		BT_ERR("Invalid HCI ACL packet length");
    de2c:	f7f4 fa32 	bl	2294 <printk>
		return -EINVAL;
    de30:	f06f 0015 	mvn.w	r0, #21
}
    de34:	b003      	add	sp, #12
    de36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	acl = (void *)buf->data;
    de3a:	f850 3f08 	ldr.w	r3, [r0, #8]!
	net_buf_pull(buf, sizeof(*acl));
    de3e:	2104      	movs	r1, #4
	len = sys_le16_to_cpu(acl->len);
    de40:	885f      	ldrh	r7, [r3, #2]
	handle = sys_le16_to_cpu(acl->handle);
    de42:	881d      	ldrh	r5, [r3, #0]
	net_buf_pull(buf, sizeof(*acl));
    de44:	f00b fafe 	bl	19444 <net_buf_simple_pull>
	if (buf->len < len) {
    de48:	89b3      	ldrh	r3, [r6, #12]
    de4a:	42bb      	cmp	r3, r7
    de4c:	d207      	bcs.n	de5e <hci_acl_handle+0x52>
		BT_ERR("Invalid HCI ACL packet length");
    de4e:	4b2e      	ldr	r3, [pc, #184]	; (df08 <hci_acl_handle+0xfc>)
    de50:	9301      	str	r3, [sp, #4]
    de52:	9300      	str	r3, [sp, #0]
    de54:	4a2d      	ldr	r2, [pc, #180]	; (df0c <hci_acl_handle+0x100>)
    de56:	4b2e      	ldr	r3, [pc, #184]	; (df10 <hci_acl_handle+0x104>)
    de58:	492e      	ldr	r1, [pc, #184]	; (df14 <hci_acl_handle+0x108>)
    de5a:	4830      	ldr	r0, [pc, #192]	; (df1c <hci_acl_handle+0x110>)
    de5c:	e7e6      	b.n	de2c <hci_acl_handle+0x20>
	node_tx = ll_tx_mem_acquire();
    de5e:	f008 f989 	bl	16174 <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
    de62:	ea4f 3915 	mov.w	r9, r5, lsr #12
	if (!node_tx) {
    de66:	4604      	mov	r4, r0
	handle = bt_acl_handle(handle);
    de68:	f3c5 050b 	ubfx	r5, r5, #0, #12
	if (!node_tx) {
    de6c:	bb30      	cbnz	r0, debc <hci_acl_handle+0xb0>
		BT_ERR("Tx Buffer Overflow");
    de6e:	4b26      	ldr	r3, [pc, #152]	; (df08 <hci_acl_handle+0xfc>)
    de70:	9301      	str	r3, [sp, #4]
    de72:	9300      	str	r3, [sp, #0]
    de74:	4a25      	ldr	r2, [pc, #148]	; (df0c <hci_acl_handle+0x100>)
    de76:	4b26      	ldr	r3, [pc, #152]	; (df10 <hci_acl_handle+0x104>)
    de78:	4926      	ldr	r1, [pc, #152]	; (df14 <hci_acl_handle+0x108>)
    de7a:	4829      	ldr	r0, [pc, #164]	; (df20 <hci_acl_handle+0x114>)
    de7c:	f7f4 fa0a 	bl	2294 <printk>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
    de80:	4b28      	ldr	r3, [pc, #160]	; (df24 <hci_acl_handle+0x118>)
    de82:	e9d3 2300 	ldrd	r2, r3, [r3]
    de86:	2300      	movs	r3, #0
    de88:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    de8c:	4313      	orrs	r3, r2
    de8e:	d012      	beq.n	deb6 <hci_acl_handle+0xaa>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    de90:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    de94:	2001      	movs	r0, #1
    de96:	f7f7 fdad 	bl	59f4 <bt_buf_get_rx>
	evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
    de9a:	2201      	movs	r2, #1
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    de9c:	f8c8 0000 	str.w	r0, [r8]
	evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
    dea0:	211a      	movs	r1, #26
    dea2:	f7fe fe70 	bl	cb86 <evt_create>
	ep = net_buf_add(*buf, sizeof(*ep));
    dea6:	f8d8 0000 	ldr.w	r0, [r8]
    deaa:	2101      	movs	r1, #1
    deac:	3008      	adds	r0, #8
    deae:	f00b fa79 	bl	193a4 <net_buf_simple_add>
	ep->link_type = BT_OVERFLOW_LINK_ACL;
    deb2:	2301      	movs	r3, #1
    deb4:	7003      	strb	r3, [r0, #0]
		return -ENOBUFS;
    deb6:	f06f 0036 	mvn.w	r0, #54	; 0x36
    deba:	e7bb      	b.n	de34 <hci_acl_handle+0x28>
    debc:	7903      	ldrb	r3, [r0, #4]
	if (flags == BT_ACL_START_NO_FLUSH || flags == BT_ACL_START) {
    debe:	f1b9 0f00 	cmp.w	r9, #0
    dec2:	d002      	beq.n	deca <hci_acl_handle+0xbe>
    dec4:	f1b9 0f02 	cmp.w	r9, #2
    dec8:	d11c      	bne.n	df04 <hci_acl_handle+0xf8>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
    deca:	2202      	movs	r2, #2
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    decc:	f362 0301 	bfi	r3, r2, #0, #2
    ded0:	7123      	strb	r3, [r4, #4]
	pdu_data->len = len;
    ded2:	7167      	strb	r7, [r4, #5]
	memcpy(&pdu_data->lldata[0], buf->data, len);
    ded4:	68b1      	ldr	r1, [r6, #8]
    ded6:	463a      	mov	r2, r7
    ded8:	1de0      	adds	r0, r4, #7
    deda:	f7f2 fc5a 	bl	792 <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
    dede:	4621      	mov	r1, r4
    dee0:	4628      	mov	r0, r5
    dee2:	f008 f953 	bl	1618c <ll_tx_mem_enqueue>
    dee6:	2800      	cmp	r0, #0
    dee8:	d0a4      	beq.n	de34 <hci_acl_handle+0x28>
		BT_ERR("Invalid Tx Enqueue");
    deea:	4b07      	ldr	r3, [pc, #28]	; (df08 <hci_acl_handle+0xfc>)
    deec:	9301      	str	r3, [sp, #4]
    deee:	9300      	str	r3, [sp, #0]
    def0:	4a06      	ldr	r2, [pc, #24]	; (df0c <hci_acl_handle+0x100>)
    def2:	4b07      	ldr	r3, [pc, #28]	; (df10 <hci_acl_handle+0x104>)
    def4:	4907      	ldr	r1, [pc, #28]	; (df14 <hci_acl_handle+0x108>)
    def6:	480c      	ldr	r0, [pc, #48]	; (df28 <hci_acl_handle+0x11c>)
    def8:	f7f4 f9cc 	bl	2294 <printk>
		ll_tx_mem_release(node_tx);
    defc:	4620      	mov	r0, r4
    defe:	f008 f93f 	bl	16180 <ll_tx_mem_release>
    df02:	e795      	b.n	de30 <hci_acl_handle+0x24>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    df04:	2201      	movs	r2, #1
    df06:	e7e1      	b.n	decc <hci_acl_handle+0xc0>
    df08:	00023dae 	.word	0x00023dae
    df0c:	00022d76 	.word	0x00022d76
    df10:	0002566e 	.word	0x0002566e
    df14:	000272d8 	.word	0x000272d8
    df18:	0002570c 	.word	0x0002570c
    df1c:	0002572e 	.word	0x0002572e
    df20:	0002575c 	.word	0x0002575c
    df24:	20009fb8 	.word	0x20009fb8
    df28:	0002577f 	.word	0x0002577f

0000df2c <hci_acl_encode>:
	u8_t *data;

	pdu_data = (void *)node_rx->pdu_data;
	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
    df2c:	7a03      	ldrb	r3, [r0, #8]
    df2e:	f003 0303 	and.w	r3, r3, #3
    df32:	3b01      	subs	r3, #1
    df34:	2b01      	cmp	r3, #1
{
    df36:	b573      	push	{r0, r1, r4, r5, r6, lr}
    df38:	4604      	mov	r4, r0
	handle = node_rx->hdr.handle;
    df3a:	88c5      	ldrh	r5, [r0, #6]
	switch (pdu_data->ll_id) {
    df3c:	d81c      	bhi.n	df78 <hci_acl_encode+0x4c>
	case PDU_DATA_LLID_DATA_CONTINUE:
	case PDU_DATA_LLID_DATA_START:
		acl = (void *)net_buf_add(buf, sizeof(*acl));
    df3e:	f101 0608 	add.w	r6, r1, #8
    df42:	4630      	mov	r0, r6
    df44:	2104      	movs	r1, #4
    df46:	f00b fa2d 	bl	193a4 <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    df4a:	7a23      	ldrb	r3, [r4, #8]
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
		} else {
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
		}
		acl->handle = sys_cpu_to_le16(handle_flags);
		acl->len = sys_cpu_to_le16(pdu_data->len);
    df4c:	7a61      	ldrb	r1, [r4, #9]
    df4e:	8041      	strh	r1, [r0, #2]
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    df50:	f003 0303 	and.w	r3, r3, #3
    df54:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
    df56:	bf0c      	ite	eq
    df58:	f445 5500 	orreq.w	r5, r5, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
    df5c:	f445 5580 	orrne.w	r5, r5, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
    df60:	8005      	strh	r5, [r0, #0]
		data = (void *)net_buf_add(buf, pdu_data->len);
    df62:	4630      	mov	r0, r6
    df64:	f00b fa1e 	bl	193a4 <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
    df68:	7a62      	ldrb	r2, [r4, #9]
    df6a:	f104 010b 	add.w	r1, r4, #11
	default:
		LL_ASSERT(0);
		break;
	}

}
    df6e:	b002      	add	sp, #8
    df70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
    df74:	f7f2 bc0d 	b.w	792 <memcpy>
		LL_ASSERT(0);
    df78:	4b07      	ldr	r3, [pc, #28]	; (df98 <hci_acl_encode+0x6c>)
    df7a:	9301      	str	r3, [sp, #4]
    df7c:	9300      	str	r3, [sp, #0]
    df7e:	4a07      	ldr	r2, [pc, #28]	; (df9c <hci_acl_encode+0x70>)
    df80:	4b07      	ldr	r3, [pc, #28]	; (dfa0 <hci_acl_encode+0x74>)
    df82:	4908      	ldr	r1, [pc, #32]	; (dfa4 <hci_acl_encode+0x78>)
    df84:	4808      	ldr	r0, [pc, #32]	; (dfa8 <hci_acl_encode+0x7c>)
    df86:	f7f4 f985 	bl	2294 <printk>
    df8a:	4040      	eors	r0, r0
    df8c:	f380 8811 	msr	BASEPRI, r0
    df90:	f04f 0004 	mov.w	r0, #4
    df94:	df02      	svc	2
    df96:	bf00      	nop
    df98:	00023dae 	.word	0x00023dae
    df9c:	00022d76 	.word	0x00022d76
    dfa0:	000256fd 	.word	0x000256fd
    dfa4:	000272d8 	.word	0x000272d8
    dfa8:	00023fa5 	.word	0x00023fa5

0000dfac <hci_evt_encode>:
#endif

void hci_evt_encode(struct radio_pdu_node_rx *node_rx, struct net_buf *buf)
{
    dfac:	b5f0      	push	{r4, r5, r6, r7, lr}
    dfae:	4604      	mov	r4, r0
    dfb0:	b091      	sub	sp, #68	; 0x44
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    dfb2:	7923      	ldrb	r3, [r4, #4]
	handle = node_rx->hdr.handle;
    dfb4:	88e6      	ldrh	r6, [r4, #6]
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    dfb6:	2b01      	cmp	r3, #1
{
    dfb8:	460d      	mov	r5, r1
	pdu_data = (void *)node_rx->pdu_data;
    dfba:	f100 0008 	add.w	r0, r0, #8
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    dfbe:	f000 816c 	beq.w	e29a <hci_evt_encode+0x2ee>
	switch (node_rx->hdr.type) {
    dfc2:	3b02      	subs	r3, #2
    dfc4:	2b0a      	cmp	r3, #10
    dfc6:	f200 8159 	bhi.w	e27c <hci_evt_encode+0x2d0>
    dfca:	e8df f013 	tbh	[pc, r3, lsl #1]
    dfce:	000b      	.short	0x000b
    dfd0:	00170011 	.word	0x00170011
    dfd4:	00600019 	.word	0x00600019
    dfd8:	0097007a 	.word	0x0097007a
    dfdc:	00d400bc 	.word	0x00d400bc
    dfe0:	010400e9 	.word	0x010400e9
		le_advertising_report(pdu_data, b, buf);
    dfe4:	460a      	mov	r2, r1
    dfe6:	4621      	mov	r1, r4
    dfe8:	f7fe fe2a 	bl	cc40 <le_advertising_report>
		encode_control(node_rx, pdu_data, buf);
	} else {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
    dfec:	b011      	add	sp, #68	; 0x44
    dfee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	le_adv_ext_report(pdu_data, b, buf, BIT(0));
    dff0:	2301      	movs	r3, #1
	le_adv_ext_report(pdu_data, b, buf, BIT(2));
    dff2:	462a      	mov	r2, r5
    dff4:	4621      	mov	r1, r4
    dff6:	f7ff f8b1 	bl	d15c <le_adv_ext_report>
    dffa:	e7f7      	b.n	dfec <hci_evt_encode+0x40>
    dffc:	2304      	movs	r3, #4
    dffe:	e7f8      	b.n	dff2 <hci_evt_encode+0x46>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e000:	4bb3      	ldr	r3, [pc, #716]	; (e2d0 <hci_evt_encode+0x324>)
    e002:	e9d3 2300 	ldrd	r2, r3, [r3]
    e006:	2200      	movs	r2, #0
    e008:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    e00c:	4313      	orrs	r3, r2
    e00e:	f104 060a 	add.w	r6, r4, #10
    e012:	d007      	beq.n	e024 <hci_evt_encode+0x78>
	    !(le_event_mask & BT_EVT_MASK_LE_SCAN_REQ_RECEIVED)) {
    e014:	4baf      	ldr	r3, [pc, #700]	; (e2d4 <hci_evt_encode+0x328>)
    e016:	e9d3 2300 	ldrd	r2, r3, [r3]
    e01a:	2300      	movs	r3, #0
    e01c:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e020:	4313      	orrs	r3, r2
    e022:	d123      	bne.n	e06c <hci_evt_encode+0xc0>
		addr.type = adv->tx_addr;
    e024:	7a23      	ldrb	r3, [r4, #8]
    e026:	ad10      	add	r5, sp, #64	; 0x40
    e028:	f3c3 1380 	ubfx	r3, r3, #6, #1
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    e02c:	2206      	movs	r2, #6
    e02e:	4631      	mov	r1, r6
    e030:	f10d 001d 	add.w	r0, sp, #29
		addr.type = adv->tx_addr;
    e034:	f805 3d24 	strb.w	r3, [r5, #-36]!
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    e038:	f7f2 fbab 	bl	792 <memcpy>
			  offsetof(struct pdu_adv, payload) + adv->len];
    e03c:	7a63      	ldrb	r3, [r4, #9]
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    e03e:	441c      	add	r4, r3
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    e040:	ae09      	add	r6, sp, #36	; 0x24
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    e042:	7aa4      	ldrb	r4, [r4, #10]
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    e044:	4631      	mov	r1, r6
    e046:	4628      	mov	r0, r5
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    e048:	4264      	negs	r4, r4
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    e04a:	f7ff f84b 	bl	d0e4 <bt_addr_le_to_str.constprop.73>
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    e04e:	b264      	sxtb	r4, r4
		BT_WARN("handle: %d, addr: %s, rssi: %d dB.",
    e050:	4ba1      	ldr	r3, [pc, #644]	; (e2d8 <hci_evt_encode+0x32c>)
    e052:	9304      	str	r3, [sp, #16]
    e054:	2200      	movs	r2, #0
    e056:	9201      	str	r2, [sp, #4]
    e058:	9300      	str	r3, [sp, #0]
    e05a:	9403      	str	r4, [sp, #12]
    e05c:	9602      	str	r6, [sp, #8]
    e05e:	4b9f      	ldr	r3, [pc, #636]	; (e2dc <hci_evt_encode+0x330>)
    e060:	4a9f      	ldr	r2, [pc, #636]	; (e2e0 <hci_evt_encode+0x334>)
    e062:	49a0      	ldr	r1, [pc, #640]	; (e2e4 <hci_evt_encode+0x338>)
    e064:	48a0      	ldr	r0, [pc, #640]	; (e2e8 <hci_evt_encode+0x33c>)
    e066:	f7f4 f915 	bl	2294 <printk>
    e06a:	e7bf      	b.n	dfec <hci_evt_encode+0x40>
	sep = meta_evt(buf, BT_HCI_EVT_LE_SCAN_REQ_RECEIVED, sizeof(*sep));
    e06c:	2208      	movs	r2, #8
    e06e:	2113      	movs	r1, #19
    e070:	4628      	mov	r0, r5
    e072:	f7fe fdad 	bl	cbd0 <meta_evt>
	sep->handle = 0;
    e076:	2300      	movs	r3, #0
    e078:	7003      	strb	r3, [r0, #0]
	sep->addr.type = adv->tx_addr;
    e07a:	7a23      	ldrb	r3, [r4, #8]
    e07c:	f3c3 1380 	ubfx	r3, r3, #6, #1
    e080:	7043      	strb	r3, [r0, #1]
	memcpy(&sep->addr.a.val[0], &adv->scan_req.scan_addr[0],
    e082:	2206      	movs	r2, #6
    e084:	4631      	mov	r1, r6
    e086:	3002      	adds	r0, #2
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(u16_t));
    e088:	f7f2 fb83 	bl	792 <memcpy>
    e08c:	e7ae      	b.n	dfec <hci_evt_encode+0x40>
			le_conn_complete(cc->status, cc, handle, buf);
    e08e:	7ae7      	ldrb	r7, [r4, #11]
	if (!status) {
    e090:	b93f      	cbnz	r7, e0a2 <hci_evt_encode+0xf6>
		ll_rl_crpa_set(radio_cc->peer_addr_type,
    e092:	f104 0314 	add.w	r3, r4, #20
    e096:	22ff      	movs	r2, #255	; 0xff
    e098:	f104 010e 	add.w	r1, r4, #14
    e09c:	7b60      	ldrb	r0, [r4, #13]
    e09e:	f00a f8b5 	bl	1820c <ll_rl_crpa_set>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e0a2:	4b8b      	ldr	r3, [pc, #556]	; (e2d0 <hci_evt_encode+0x324>)
    e0a4:	e9d3 2300 	ldrd	r2, r3, [r3]
    e0a8:	2200      	movs	r2, #0
    e0aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    e0ae:	4313      	orrs	r3, r2
    e0b0:	d09c      	beq.n	dfec <hci_evt_encode+0x40>
    e0b2:	462b      	mov	r3, r5
    e0b4:	4632      	mov	r2, r6
    e0b6:	f104 010b 	add.w	r1, r4, #11
    e0ba:	4638      	mov	r0, r7
    e0bc:	f7fe ff7c 	bl	cfb8 <le_conn_complete.part.44>
    e0c0:	e794      	b.n	dfec <hci_evt_encode+0x40>
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    e0c2:	4b83      	ldr	r3, [pc, #524]	; (e2d0 <hci_evt_encode+0x324>)
    e0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
    e0c8:	2300      	movs	r3, #0
    e0ca:	f002 0210 	and.w	r2, r2, #16
    e0ce:	4313      	orrs	r3, r2
    e0d0:	d08c      	beq.n	dfec <hci_evt_encode+0x40>
	evt_create(buf, BT_HCI_EVT_DISCONN_COMPLETE, sizeof(*ep));
    e0d2:	2204      	movs	r2, #4
    e0d4:	2105      	movs	r1, #5
    e0d6:	4628      	mov	r0, r5
    e0d8:	f7fe fd55 	bl	cb86 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    e0dc:	2104      	movs	r1, #4
    e0de:	f105 0008 	add.w	r0, r5, #8
    e0e2:	f00b f95f 	bl	193a4 <net_buf_simple_add>
	ep->status = 0x00;
    e0e6:	2300      	movs	r3, #0
	conn_count--;
    e0e8:	4a80      	ldr	r2, [pc, #512]	; (e2ec <hci_evt_encode+0x340>)
	ep->status = 0x00;
    e0ea:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    e0ec:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((u8_t *)pdu_data);
    e0f0:	7a23      	ldrb	r3, [r4, #8]
    e0f2:	70c3      	strb	r3, [r0, #3]
	conn_count--;
    e0f4:	6813      	ldr	r3, [r2, #0]
    e0f6:	3b01      	subs	r3, #1
    e0f8:	6013      	str	r3, [r2, #0]
    e0fa:	e777      	b.n	dfec <hci_evt_encode+0x40>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e0fc:	4b74      	ldr	r3, [pc, #464]	; (e2d0 <hci_evt_encode+0x324>)
    e0fe:	e9d3 2300 	ldrd	r2, r3, [r3]
    e102:	2200      	movs	r2, #0
    e104:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    e108:	4313      	orrs	r3, r2
    e10a:	f43f af6f 	beq.w	dfec <hci_evt_encode+0x40>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
    e10e:	4b71      	ldr	r3, [pc, #452]	; (e2d4 <hci_evt_encode+0x328>)
    e110:	e9d3 2300 	ldrd	r2, r3, [r3]
    e114:	2300      	movs	r3, #0
    e116:	f002 0204 	and.w	r2, r2, #4
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e11a:	4313      	orrs	r3, r2
    e11c:	f43f af66 	beq.w	dfec <hci_evt_encode+0x40>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
    e120:	2209      	movs	r2, #9
    e122:	2103      	movs	r1, #3
    e124:	4628      	mov	r0, r5
    e126:	f7fe fd53 	bl	cbd0 <meta_evt>
	sep->status = radio_cu->status;
    e12a:	7ae3      	ldrb	r3, [r4, #11]
    e12c:	7003      	strb	r3, [r0, #0]
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
    e12e:	89a3      	ldrh	r3, [r4, #12]
	sep->handle = sys_cpu_to_le16(handle);
    e130:	f8a0 6001 	strh.w	r6, [r0, #1]
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
    e134:	f8a0 3003 	strh.w	r3, [r0, #3]
	sep->latency = sys_cpu_to_le16(radio_cu->latency);
    e138:	89e3      	ldrh	r3, [r4, #14]
    e13a:	f8a0 3005 	strh.w	r3, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(radio_cu->timeout);
    e13e:	8a23      	ldrh	r3, [r4, #16]
    e140:	f8a0 3007 	strh.w	r3, [r0, #7]
    e144:	e752      	b.n	dfec <hci_evt_encode+0x40>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
    e146:	4b62      	ldr	r3, [pc, #392]	; (e2d0 <hci_evt_encode+0x324>)
    e148:	e9d3 2300 	ldrd	r2, r3, [r3]
    e14c:	2200      	movs	r2, #0
    e14e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    e152:	4313      	orrs	r3, r2
    e154:	f43f af4a 	beq.w	dfec <hci_evt_encode+0x40>
	evt_create(buf, BT_HCI_EVT_ENCRYPT_KEY_REFRESH_COMPLETE, sizeof(*ep));
    e158:	2203      	movs	r2, #3
    e15a:	2130      	movs	r1, #48	; 0x30
    e15c:	4628      	mov	r0, r5
    e15e:	f7fe fd12 	bl	cb86 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    e162:	2103      	movs	r1, #3
    e164:	f105 0008 	add.w	r0, r5, #8
    e168:	f00b f91c 	bl	193a4 <net_buf_simple_add>
	ep->status = 0x00;
    e16c:	2300      	movs	r3, #0
    e16e:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    e170:	f8a0 6001 	strh.w	r6, [r0, #1]
    e174:	e73a      	b.n	dfec <hci_evt_encode+0x40>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
    e176:	4b5e      	ldr	r3, [pc, #376]	; (e2f0 <hci_evt_encode+0x344>)
    e178:	e9d3 2300 	ldrd	r2, r3, [r3]
    e17c:	2300      	movs	r3, #0
    e17e:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
    e182:	4313      	orrs	r3, r2
    e184:	f43f af32 	beq.w	dfec <hci_evt_encode+0x40>
	evt_create(buf, BT_HCI_EVT_AUTH_PAYLOAD_TIMEOUT_EXP, sizeof(*ep));
    e188:	2202      	movs	r2, #2
    e18a:	2157      	movs	r1, #87	; 0x57
    e18c:	4628      	mov	r0, r5
    e18e:	f7fe fcfa 	bl	cb86 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    e192:	2102      	movs	r1, #2
    e194:	f105 0008 	add.w	r0, r5, #8
    e198:	f00b f904 	bl	193a4 <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
    e19c:	8006      	strh	r6, [r0, #0]
    e19e:	e725      	b.n	dfec <hci_evt_encode+0x40>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e1a0:	4b4b      	ldr	r3, [pc, #300]	; (e2d0 <hci_evt_encode+0x324>)
    e1a2:	e9d3 2300 	ldrd	r2, r3, [r3]
    e1a6:	2200      	movs	r2, #0
    e1a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    e1ac:	4313      	orrs	r3, r2
    e1ae:	f43f af1d 	beq.w	dfec <hci_evt_encode+0x40>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
    e1b2:	4b48      	ldr	r3, [pc, #288]	; (e2d4 <hci_evt_encode+0x328>)
    e1b4:	e9d3 2300 	ldrd	r2, r3, [r3]
    e1b8:	2300      	movs	r3, #0
    e1ba:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e1be:	4313      	orrs	r3, r2
    e1c0:	f43f af14 	beq.w	dfec <hci_evt_encode+0x40>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CHAN_SEL_ALGO, sizeof(*sep));
    e1c4:	2203      	movs	r2, #3
    e1c6:	2114      	movs	r1, #20
    e1c8:	4628      	mov	r0, r5
    e1ca:	f7fe fd01 	bl	cbd0 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    e1ce:	8006      	strh	r6, [r0, #0]
	sep->chan_sel_algo = radio_le_chan_sel_algo->chan_sel_algo;
    e1d0:	7ae3      	ldrb	r3, [r4, #11]
    e1d2:	7083      	strb	r3, [r0, #2]
    e1d4:	e70a      	b.n	dfec <hci_evt_encode+0x40>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e1d6:	4b3e      	ldr	r3, [pc, #248]	; (e2d0 <hci_evt_encode+0x324>)
    e1d8:	e9d3 2300 	ldrd	r2, r3, [r3]
    e1dc:	2200      	movs	r2, #0
    e1de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    e1e2:	4313      	orrs	r3, r2
    e1e4:	d007      	beq.n	e1f6 <hci_evt_encode+0x24a>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
    e1e6:	4b3b      	ldr	r3, [pc, #236]	; (e2d4 <hci_evt_encode+0x328>)
    e1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
    e1ec:	2300      	movs	r3, #0
    e1ee:	f402 6200 	and.w	r2, r2, #2048	; 0x800
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e1f2:	4313      	orrs	r3, r2
    e1f4:	d122      	bne.n	e23c <hci_evt_encode+0x290>
    e1f6:	7b22      	ldrb	r2, [r4, #12]
    e1f8:	7b61      	ldrb	r1, [r4, #13]
		BT_WARN("handle: 0x%04x, status: %x, tx: %x, rx: %x.", handle,
    e1fa:	483e      	ldr	r0, [pc, #248]	; (e2f4 <hci_evt_encode+0x348>)
    e1fc:	2a00      	cmp	r2, #0
    e1fe:	fa92 f3a2 	rbit	r3, r2
    e202:	fab3 f383 	clz	r3, r3
    e206:	fa91 f2a1 	rbit	r2, r1
    e20a:	bf08      	it	eq
    e20c:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    e210:	2900      	cmp	r1, #0
    e212:	fab2 f282 	clz	r2, r2
    e216:	bf08      	it	eq
    e218:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
    e21c:	492e      	ldr	r1, [pc, #184]	; (e2d8 <hci_evt_encode+0x32c>)
    e21e:	9105      	str	r1, [sp, #20]
    e220:	3301      	adds	r3, #1
    e222:	3201      	adds	r2, #1
    e224:	9204      	str	r2, [sp, #16]
    e226:	9303      	str	r3, [sp, #12]
    e228:	7ae3      	ldrb	r3, [r4, #11]
    e22a:	9302      	str	r3, [sp, #8]
    e22c:	e88d 0042 	stmia.w	sp, {r1, r6}
    e230:	4b31      	ldr	r3, [pc, #196]	; (e2f8 <hci_evt_encode+0x34c>)
    e232:	4a2b      	ldr	r2, [pc, #172]	; (e2e0 <hci_evt_encode+0x334>)
    e234:	492b      	ldr	r1, [pc, #172]	; (e2e4 <hci_evt_encode+0x338>)
    e236:	f7f4 f82d 	bl	2294 <printk>
    e23a:	e6d7      	b.n	dfec <hci_evt_encode+0x40>
	sep = meta_evt(buf, BT_HCI_EVT_LE_PHY_UPDATE_COMPLETE, sizeof(*sep));
    e23c:	2205      	movs	r2, #5
    e23e:	210c      	movs	r1, #12
    e240:	4628      	mov	r0, r5
    e242:	f7fe fcc5 	bl	cbd0 <meta_evt>
	sep->status = radio_le_phy_upd_cmplt->status;
    e246:	7ae3      	ldrb	r3, [r4, #11]
    e248:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    e24a:	f8a0 6001 	strh.w	r6, [r0, #1]
    e24e:	7b22      	ldrb	r2, [r4, #12]
    e250:	2a00      	cmp	r2, #0
    e252:	fa92 f3a2 	rbit	r3, r2
    e256:	fab3 f383 	clz	r3, r3
    e25a:	bf08      	it	eq
    e25c:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    e260:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(radio_le_phy_upd_cmplt->tx);
    e262:	70c3      	strb	r3, [r0, #3]
    e264:	7b62      	ldrb	r2, [r4, #13]
    e266:	fa92 f3a2 	rbit	r3, r2
    e26a:	2a00      	cmp	r2, #0
    e26c:	fab3 f383 	clz	r3, r3
    e270:	bf08      	it	eq
    e272:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    e276:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(radio_le_phy_upd_cmplt->rx);
    e278:	7103      	strb	r3, [r0, #4]
    e27a:	e6b7      	b.n	dfec <hci_evt_encode+0x40>
		LL_ASSERT(0);
    e27c:	4b16      	ldr	r3, [pc, #88]	; (e2d8 <hci_evt_encode+0x32c>)
    e27e:	9301      	str	r3, [sp, #4]
    e280:	9300      	str	r3, [sp, #0]
    e282:	4b1e      	ldr	r3, [pc, #120]	; (e2fc <hci_evt_encode+0x350>)
		LL_ASSERT(0);
    e284:	4a1e      	ldr	r2, [pc, #120]	; (e300 <hci_evt_encode+0x354>)
    e286:	4917      	ldr	r1, [pc, #92]	; (e2e4 <hci_evt_encode+0x338>)
    e288:	481e      	ldr	r0, [pc, #120]	; (e304 <hci_evt_encode+0x358>)
    e28a:	f7f4 f803 	bl	2294 <printk>
    e28e:	4040      	eors	r0, r0
    e290:	f380 8811 	msr	BASEPRI, r0
    e294:	f04f 0004 	mov.w	r0, #4
    e298:	df02      	svc	2
	switch (pdu_data->llctrl.opcode) {
    e29a:	7ae3      	ldrb	r3, [r4, #11]
    e29c:	3b03      	subs	r3, #3
    e29e:	2b12      	cmp	r3, #18
    e2a0:	f200 80e2 	bhi.w	e468 <hci_evt_encode+0x4bc>
    e2a4:	e8df f013 	tbh	[pc, r3, lsl #1]
    e2a8:	00e00030 	.word	0x00e00030
    e2ac:	005500e0 	.word	0x005500e0
    e2b0:	00e000cd 	.word	0x00e000cd
    e2b4:	00e0005b 	.word	0x00e0005b
    e2b8:	006200e0 	.word	0x006200e0
    e2bc:	00e00081 	.word	0x00e00081
    e2c0:	00e00085 	.word	0x00e00085
    e2c4:	00e000e0 	.word	0x00e000e0
    e2c8:	00ad00e0 	.word	0x00ad00e0
    e2cc:	00ad      	.short	0x00ad
    e2ce:	bf00      	nop
    e2d0:	20009fb8 	.word	0x20009fb8
    e2d4:	20009fc0 	.word	0x20009fc0
    e2d8:	00023dae 	.word	0x00023dae
    e2dc:	000256a5 	.word	0x000256a5
    e2e0:	00024006 	.word	0x00024006
    e2e4:	000272d8 	.word	0x000272d8
    e2e8:	0002584d 	.word	0x0002584d
    e2ec:	20000b58 	.word	0x20000b58
    e2f0:	20000be8 	.word	0x20000be8
    e2f4:	00025880 	.word	0x00025880
    e2f8:	000256ba 	.word	0x000256ba
    e2fc:	000256ce 	.word	0x000256ce
    e300:	00022d76 	.word	0x00022d76
    e304:	00023fa5 	.word	0x00023fa5
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e308:	4b5a      	ldr	r3, [pc, #360]	; (e474 <hci_evt_encode+0x4c8>)
    e30a:	e9d3 2300 	ldrd	r2, r3, [r3]
    e30e:	2200      	movs	r2, #0
    e310:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    e314:	4313      	orrs	r3, r2
    e316:	f43f ae69 	beq.w	dfec <hci_evt_encode+0x40>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
    e31a:	4b57      	ldr	r3, [pc, #348]	; (e478 <hci_evt_encode+0x4cc>)
    e31c:	e9d3 2300 	ldrd	r2, r3, [r3]
    e320:	2300      	movs	r3, #0
    e322:	f002 0210 	and.w	r2, r2, #16
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e326:	4313      	orrs	r3, r2
    e328:	f43f ae60 	beq.w	dfec <hci_evt_encode+0x40>
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    e32c:	220c      	movs	r2, #12
    e32e:	2105      	movs	r1, #5
    e330:	4628      	mov	r0, r5
    e332:	f7fe fc4d 	bl	cbd0 <meta_evt>
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    e336:	2208      	movs	r2, #8
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    e338:	4605      	mov	r5, r0
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    e33a:	f104 010c 	add.w	r1, r4, #12
	sep->handle = sys_cpu_to_le16(handle);
    e33e:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    e342:	f7f2 fa26 	bl	792 <memcpy>
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(u16_t));
    e346:	2202      	movs	r2, #2
    e348:	f104 0114 	add.w	r1, r4, #20
    e34c:	f105 000a 	add.w	r0, r5, #10
    e350:	e69a      	b.n	e088 <hci_evt_encode+0xdc>
		encrypt_change(0x00, handle, buf);
    e352:	460a      	mov	r2, r1
    e354:	2000      	movs	r0, #0
    e356:	4631      	mov	r1, r6
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
    e358:	f7fe fda8 	bl	ceac <encrypt_change>
    e35c:	e646      	b.n	dfec <hci_evt_encode+0x40>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    e35e:	460b      	mov	r3, r1
    e360:	4632      	mov	r2, r6
    e362:	4601      	mov	r1, r0
    e364:	2000      	movs	r0, #0
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    e366:	f7fe fdc1 	bl	ceec <le_remote_feat_complete>
    e36a:	e63f      	b.n	dfec <hci_evt_encode+0x40>
	if (!(event_mask & BT_EVT_MASK_REMOTE_VERSION_INFO)) {
    e36c:	4b41      	ldr	r3, [pc, #260]	; (e474 <hci_evt_encode+0x4c8>)
    e36e:	e9d3 2300 	ldrd	r2, r3, [r3]
    e372:	2300      	movs	r3, #0
    e374:	f402 6200 	and.w	r2, r2, #2048	; 0x800
    e378:	4313      	orrs	r3, r2
    e37a:	f43f ae37 	beq.w	dfec <hci_evt_encode+0x40>
	evt_create(buf, BT_HCI_EVT_REMOTE_VERSION_INFO, sizeof(*ep));
    e37e:	2208      	movs	r2, #8
    e380:	210c      	movs	r1, #12
    e382:	4628      	mov	r0, r5
    e384:	f7fe fbff 	bl	cb86 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    e388:	2108      	movs	r1, #8
    e38a:	1868      	adds	r0, r5, r1
    e38c:	f00b f80a 	bl	193a4 <net_buf_simple_add>
	ep->status = 0x00;
    e390:	2300      	movs	r3, #0
    e392:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    e394:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->version = ver_ind->version_number;
    e398:	7b23      	ldrb	r3, [r4, #12]
    e39a:	70c3      	strb	r3, [r0, #3]
	ep->manufacturer = sys_cpu_to_le16(ver_ind->company_id);
    e39c:	f8b4 300d 	ldrh.w	r3, [r4, #13]
    e3a0:	8083      	strh	r3, [r0, #4]
	ep->subversion = sys_cpu_to_le16(ver_ind->sub_version_number);
    e3a2:	f8b4 300f 	ldrh.w	r3, [r4, #15]
    e3a6:	80c3      	strh	r3, [r0, #6]
    e3a8:	e620      	b.n	dfec <hci_evt_encode+0x40>
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
    e3aa:	460a      	mov	r2, r1
    e3ac:	7b20      	ldrb	r0, [r4, #12]
    e3ae:	4631      	mov	r1, r6
    e3b0:	e7d2      	b.n	e358 <hci_evt_encode+0x3ac>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e3b2:	4b30      	ldr	r3, [pc, #192]	; (e474 <hci_evt_encode+0x4c8>)
    e3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
    e3b8:	2200      	movs	r2, #0
    e3ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    e3be:	4313      	orrs	r3, r2
    e3c0:	d007      	beq.n	e3d2 <hci_evt_encode+0x426>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
    e3c2:	4b2d      	ldr	r3, [pc, #180]	; (e478 <hci_evt_encode+0x4cc>)
    e3c4:	e9d3 2300 	ldrd	r2, r3, [r3]
    e3c8:	2300      	movs	r3, #0
    e3ca:	f002 0220 	and.w	r2, r2, #32
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e3ce:	4313      	orrs	r3, r2
    e3d0:	d108      	bne.n	e3e4 <hci_evt_encode+0x438>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    e3d2:	2300      	movs	r3, #0
    e3d4:	9301      	str	r3, [sp, #4]
    e3d6:	9300      	str	r3, [sp, #0]
    e3d8:	221a      	movs	r2, #26
    e3da:	2102      	movs	r1, #2
    e3dc:	4630      	mov	r0, r6
    e3de:	f007 fbdd 	bl	15b9c <ll_conn_update>
    e3e2:	e603      	b.n	dfec <hci_evt_encode+0x40>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
    e3e4:	220a      	movs	r2, #10
    e3e6:	2106      	movs	r1, #6
    e3e8:	4628      	mov	r0, r5
    e3ea:	f7fe fbf1 	bl	cbd0 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    e3ee:	8006      	strh	r6, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
    e3f0:	89a3      	ldrh	r3, [r4, #12]
    e3f2:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
    e3f4:	89e3      	ldrh	r3, [r4, #14]
    e3f6:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
    e3f8:	8a23      	ldrh	r3, [r4, #16]
    e3fa:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
    e3fc:	8a63      	ldrh	r3, [r4, #18]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
    e3fe:	8103      	strh	r3, [r0, #8]
    e400:	e5f4      	b.n	dfec <hci_evt_encode+0x40>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e402:	4b1c      	ldr	r3, [pc, #112]	; (e474 <hci_evt_encode+0x4c8>)
    e404:	e9d3 2300 	ldrd	r2, r3, [r3]
    e408:	2200      	movs	r2, #0
    e40a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    e40e:	4313      	orrs	r3, r2
    e410:	f43f adec 	beq.w	dfec <hci_evt_encode+0x40>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
    e414:	4b18      	ldr	r3, [pc, #96]	; (e478 <hci_evt_encode+0x4cc>)
    e416:	e9d3 2300 	ldrd	r2, r3, [r3]
    e41a:	2300      	movs	r3, #0
    e41c:	f002 0240 	and.w	r2, r2, #64	; 0x40
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e420:	4313      	orrs	r3, r2
    e422:	f43f ade3 	beq.w	dfec <hci_evt_encode+0x40>
	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));
    e426:	220a      	movs	r2, #10
    e428:	2107      	movs	r1, #7
    e42a:	4628      	mov	r0, r5
    e42c:	f7fe fbd0 	bl	cbd0 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    e430:	8006      	strh	r6, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
    e432:	8a23      	ldrh	r3, [r4, #16]
    e434:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
    e436:	8a63      	ldrh	r3, [r4, #18]
    e438:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
    e43a:	89a3      	ldrh	r3, [r4, #12]
    e43c:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
    e43e:	89e3      	ldrh	r3, [r4, #14]
    e440:	e7dd      	b.n	e3fe <hci_evt_encode+0x452>
    e442:	7b22      	ldrb	r2, [r4, #12]
	switch (pdu_data->llctrl.unknown_rsp.type) {
    e444:	2a0e      	cmp	r2, #14
    e446:	d104      	bne.n	e452 <hci_evt_encode+0x4a6>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    e448:	460b      	mov	r3, r1
    e44a:	4632      	mov	r2, r6
    e44c:	2100      	movs	r1, #0
    e44e:	201a      	movs	r0, #26
    e450:	e789      	b.n	e366 <hci_evt_encode+0x3ba>
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
    e452:	4b0a      	ldr	r3, [pc, #40]	; (e47c <hci_evt_encode+0x4d0>)
    e454:	9302      	str	r3, [sp, #8]
	switch (pdu_data->llctrl.unknown_rsp.type) {
    e456:	9201      	str	r2, [sp, #4]
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
    e458:	9300      	str	r3, [sp, #0]
    e45a:	4a09      	ldr	r2, [pc, #36]	; (e480 <hci_evt_encode+0x4d4>)
    e45c:	4b09      	ldr	r3, [pc, #36]	; (e484 <hci_evt_encode+0x4d8>)
    e45e:	490a      	ldr	r1, [pc, #40]	; (e488 <hci_evt_encode+0x4dc>)
    e460:	480a      	ldr	r0, [pc, #40]	; (e48c <hci_evt_encode+0x4e0>)
    e462:	f7f3 ff17 	bl	2294 <printk>
    e466:	e5c1      	b.n	dfec <hci_evt_encode+0x40>
		LL_ASSERT(0);
    e468:	4b04      	ldr	r3, [pc, #16]	; (e47c <hci_evt_encode+0x4d0>)
    e46a:	9301      	str	r3, [sp, #4]
    e46c:	9300      	str	r3, [sp, #0]
    e46e:	4b08      	ldr	r3, [pc, #32]	; (e490 <hci_evt_encode+0x4e4>)
    e470:	e708      	b.n	e284 <hci_evt_encode+0x2d8>
    e472:	bf00      	nop
    e474:	20009fb8 	.word	0x20009fb8
    e478:	20009fc0 	.word	0x20009fc0
    e47c:	00023dae 	.word	0x00023dae
    e480:	00024006 	.word	0x00024006
    e484:	000256dd 	.word	0x000256dd
    e488:	000272d8 	.word	0x000272d8
    e48c:	000258bc 	.word	0x000258bc
    e490:	000256ec 	.word	0x000256ec

0000e494 <hci_num_cmplt_encode>:

void hci_num_cmplt_encode(struct net_buf *buf, u16_t handle, u8_t num)
{
    e494:	b570      	push	{r4, r5, r6, lr}
    e496:	4606      	mov	r6, r0
    e498:	460d      	mov	r5, r1
    e49a:	4614      	mov	r4, r2
	u8_t len;

	num_handles = 1;

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);
    e49c:	2113      	movs	r1, #19
    e49e:	2205      	movs	r2, #5
    e4a0:	f7fe fb71 	bl	cb86 <evt_create>

	ep = net_buf_add(buf, len);
    e4a4:	2105      	movs	r1, #5
    e4a6:	f106 0008 	add.w	r0, r6, #8
    e4aa:	f00a ff7b 	bl	193a4 <net_buf_simple_add>
	ep->num_handles = num_handles;
    e4ae:	2301      	movs	r3, #1
    e4b0:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
    e4b2:	f8a0 5001 	strh.w	r5, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
    e4b6:	f8a0 4003 	strh.w	r4, [r0, #3]
    e4ba:	bd70      	pop	{r4, r5, r6, pc}

0000e4bc <hci_get_class>:
{
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    e4bc:	7903      	ldrb	r3, [r0, #4]
    e4be:	2b01      	cmp	r3, #1
    e4c0:	d006      	beq.n	e4d0 <hci_get_class+0x14>
    e4c2:	3b02      	subs	r3, #2
    e4c4:	b2db      	uxtb	r3, r3
    e4c6:	2b0a      	cmp	r3, #10
    e4c8:	d80a      	bhi.n	e4e0 <hci_get_class+0x24>
    e4ca:	4a07      	ldr	r2, [pc, #28]	; (e4e8 <hci_get_class+0x2c>)
    e4cc:	56d0      	ldrsb	r0, [r2, r3]
    e4ce:	4770      	bx	lr
			return HCI_CLASS_EVT_CONNECTION;
		default:
			return -1;
		}

	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    e4d0:	7a03      	ldrb	r3, [r0, #8]
    e4d2:	f003 0303 	and.w	r3, r3, #3
    e4d6:	2b03      	cmp	r3, #3
		return HCI_CLASS_EVT_CONNECTION;
	} else {
		return HCI_CLASS_ACL_DATA;
    e4d8:	bf0c      	ite	eq
    e4da:	2002      	moveq	r0, #2
    e4dc:	2003      	movne	r0, #3
    e4de:	4770      	bx	lr
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    e4e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
}
    e4e4:	4770      	bx	lr
    e4e6:	bf00      	nop
    e4e8:	00025654 	.word	0x00025654

0000e4ec <hci_init>:
	dup_count = -1;
    e4ec:	4b0a      	ldr	r3, [pc, #40]	; (e518 <hci_init+0x2c>)
    e4ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    e4f2:	601a      	str	r2, [r3, #0]
	event_mask = DEFAULT_EVENT_MASK;
    e4f4:	4b09      	ldr	r3, [pc, #36]	; (e51c <hci_init+0x30>)
    e4f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e4fa:	f641 71ff 	movw	r1, #8191	; 0x1fff
    e4fe:	e9c3 0100 	strd	r0, r1, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    e502:	4b07      	ldr	r3, [pc, #28]	; (e520 <hci_init+0x34>)
    e504:	2000      	movs	r0, #0
    e506:	2100      	movs	r1, #0
    e508:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    e50c:	4b05      	ldr	r3, [pc, #20]	; (e524 <hci_init+0x38>)
    e50e:	201f      	movs	r0, #31
    e510:	2100      	movs	r1, #0
    e512:	e9c3 0100 	strd	r0, r1, [r3]
    e516:	4770      	bx	lr
    e518:	20000b5c 	.word	0x20000b5c
    e51c:	20009fb8 	.word	0x20009fb8
    e520:	20000be8 	.word	0x20000be8
    e524:	20009fc0 	.word	0x20009fc0

0000e528 <cpu_sleep>:
#ifndef _CPU_H_
#define _CPU_H_

static inline void cpu_sleep(void)
{
	__WFE();
    e528:	bf20      	wfe
	__SEV();
    e52a:	bf40      	sev
	__WFE();
    e52c:	bf20      	wfe
    e52e:	4770      	bx	lr

0000e530 <pdu_len_cmp>:
	return nack;
}
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

static inline bool pdu_len_cmp(u8_t opcode, u8_t len)
{
    e530:	b5f0      	push	{r4, r5, r6, r7, lr}
	const u8_t ctrl_len_lut[] = {
    e532:	4b0d      	ldr	r3, [pc, #52]	; (e568 <pdu_len_cmp+0x38>)
{
    e534:	b089      	sub	sp, #36	; 0x24
    e536:	4605      	mov	r5, r0
    e538:	460e      	mov	r6, r1
	const u8_t ctrl_len_lut[] = {
    e53a:	aa01      	add	r2, sp, #4
    e53c:	f103 0718 	add.w	r7, r3, #24
    e540:	6818      	ldr	r0, [r3, #0]
    e542:	6859      	ldr	r1, [r3, #4]
    e544:	4614      	mov	r4, r2
    e546:	c403      	stmia	r4!, {r0, r1}
    e548:	3308      	adds	r3, #8
    e54a:	42bb      	cmp	r3, r7
    e54c:	4622      	mov	r2, r4
    e54e:	d1f7      	bne.n	e540 <pdu_len_cmp+0x10>
    e550:	881b      	ldrh	r3, [r3, #0]
    e552:	8023      	strh	r3, [r4, #0]
		 sizeof(struct pdu_data_llctrl_phy_upd_ind)),
		(offsetof(struct pdu_data_llctrl, min_used_chans_ind) +
		 sizeof(struct pdu_data_llctrl_min_used_chans_ind)),
	};

	return ctrl_len_lut[opcode] == len;
    e554:	ab08      	add	r3, sp, #32
    e556:	441d      	add	r5, r3
    e558:	f815 0c1c 	ldrb.w	r0, [r5, #-28]
}
    e55c:	1b83      	subs	r3, r0, r6
    e55e:	4258      	negs	r0, r3
    e560:	4158      	adcs	r0, r3
    e562:	b009      	add	sp, #36	; 0x24
    e564:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e566:	bf00      	nop
    e568:	0002298d 	.word	0x0002298d

0000e56c <ticker_if_done>:
}
#endif

static void ticker_if_done(u32_t status, void *ops_context)
{
	*((u32_t volatile *)ops_context) = status;
    e56c:	6008      	str	r0, [r1, #0]
    e56e:	4770      	bx	lr

0000e570 <prepare_reduced>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    e570:	b918      	cbnz	r0, e57a <prepare_reduced+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start |= XON_BITMASK;
    e572:	680b      	ldr	r3, [r1, #0]
    e574:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    e578:	600b      	str	r3, [r1, #0]
    e57a:	4770      	bx	lr

0000e57c <prepare_normal>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    e57c:	b918      	cbnz	r0, e586 <prepare_normal+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start &= ~XON_BITMASK;
    e57e:	680b      	ldr	r3, [r1, #0]
    e580:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    e584:	600b      	str	r3, [r1, #0]
    e586:	4770      	bx	lr

0000e588 <chan_sel_remap>:
	}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */
}

static u8_t chan_sel_remap(u8_t *chan_map, u8_t chan_index)
{
    e588:	b570      	push	{r4, r5, r6, lr}
    e58a:	1d03      	adds	r3, r0, #4
    e58c:	1e45      	subs	r5, r0, #1
	u8_t chan_next;
	u8_t byte_count;

	chan_next = 0;
    e58e:	2400      	movs	r4, #0
	byte_count = 5;
	while (byte_count--) {
    e590:	429d      	cmp	r5, r3
    e592:	d101      	bne.n	e598 <chan_sel_remap+0x10>
    e594:	4620      	mov	r0, r4

		chan_map++;
	}

	return chan_next;
}
    e596:	bd70      	pop	{r4, r5, r6, pc}
		bite = *chan_map;
    e598:	f815 6f01 	ldrb.w	r6, [r5, #1]!
		while (bit_count--) {
    e59c:	2200      	movs	r2, #0
    e59e:	18a0      	adds	r0, r4, r2
    e5a0:	2a08      	cmp	r2, #8
    e5a2:	b2c0      	uxtb	r0, r0
    e5a4:	d101      	bne.n	e5aa <chan_sel_remap+0x22>
    e5a6:	4604      	mov	r4, r0
    e5a8:	e7f2      	b.n	e590 <chan_sel_remap+0x8>
			if (bite & 0x01) {
    e5aa:	f016 0f01 	tst.w	r6, #1
    e5ae:	d003      	beq.n	e5b8 <chan_sel_remap+0x30>
				if (chan_index == 0) {
    e5b0:	2900      	cmp	r1, #0
    e5b2:	d0f0      	beq.n	e596 <chan_sel_remap+0xe>
				chan_index--;
    e5b4:	3901      	subs	r1, #1
    e5b6:	b2c9      	uxtb	r1, r1
			bite >>= 1;
    e5b8:	0876      	lsrs	r6, r6, #1
    e5ba:	3201      	adds	r2, #1
    e5bc:	e7ef      	b.n	e59e <chan_sel_remap+0x16>
	...

0000e5c0 <packet_rx_acquired_count_get>:
	}
}

static inline u8_t packet_rx_acquired_count_get(void)
{
	if (_radio.packet_rx_acquire >=
    e5c0:	4b09      	ldr	r3, [pc, #36]	; (e5e8 <packet_rx_acquired_count_get+0x28>)
    e5c2:	f893 074a 	ldrb.w	r0, [r3, #1866]	; 0x74a
	    _radio.packet_rx_last) {
    e5c6:	f893 2749 	ldrb.w	r2, [r3, #1865]	; 0x749
	if (_radio.packet_rx_acquire >=
    e5ca:	4290      	cmp	r0, r2
		return (_radio.packet_rx_acquire -
			_radio.packet_rx_last);
	} else {
		return (_radio.packet_rx_count -
			_radio.packet_rx_last +
    e5cc:	bf3b      	ittet	cc
    e5ce:	f893 2749 	ldrbcc.w	r2, [r3, #1865]	; 0x749
    e5d2:	f893 3748 	ldrbcc.w	r3, [r3, #1864]	; 0x748
			_radio.packet_rx_last);
    e5d6:	f893 3749 	ldrbcs.w	r3, [r3, #1865]	; 0x749
			_radio.packet_rx_last +
    e5da:	18c0      	addcc	r0, r0, r3
		return (_radio.packet_rx_acquire -
    e5dc:	bf2c      	ite	cs
    e5de:	1ac0      	subcs	r0, r0, r3
			_radio.packet_rx_last +
    e5e0:	1a80      	subcc	r0, r0, r2
    e5e2:	b2c0      	uxtb	r0, r0
			_radio.packet_rx_acquire);
	}
}
    e5e4:	4770      	bx	lr
    e5e6:	bf00      	nop
    e5e8:	20000bf0 	.word	0x20000bf0

0000e5ec <packet_rx_reserve_get>:

static inline struct radio_pdu_node_rx *packet_rx_reserve_get(u8_t count)
{
    e5ec:	b508      	push	{r3, lr}
    e5ee:	4601      	mov	r1, r0
	if (count > packet_rx_acquired_count_get()) {
    e5f0:	f7ff ffe6 	bl	e5c0 <packet_rx_acquired_count_get>
    e5f4:	4288      	cmp	r0, r1
		return 0;
	}

	return _radio.packet_rx[_radio.packet_rx_last];
    e5f6:	bf21      	itttt	cs
    e5f8:	4b04      	ldrcs	r3, [pc, #16]	; (e60c <packet_rx_reserve_get+0x20>)
    e5fa:	f893 2749 	ldrbcs.w	r2, [r3, #1865]	; 0x749
    e5fe:	f8d3 3744 	ldrcs.w	r3, [r3, #1860]	; 0x744
    e602:	f853 0022 	ldrcs.w	r0, [r3, r2, lsl #2]
		return 0;
    e606:	bf38      	it	cc
    e608:	2000      	movcc	r0, #0
}
    e60a:	bd08      	pop	{r3, pc}
    e60c:	20000bf0 	.word	0x20000bf0

0000e610 <conn_update_req>:
}

#if defined (CONFIG_BT_CTLR_XTAL_ADVANCED) && \
    defined(CONFIG_BT_CTLR_SCHED_ADVANCED)
static u32_t conn_update_req(struct connection *conn)
{
    e610:	b530      	push	{r4, r5, lr}
	if (conn->llcp_req != conn->llcp_ack) {
    e612:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
    e616:	f890 4075 	ldrb.w	r4, [r0, #117]	; 0x75
    e61a:	429c      	cmp	r4, r3
    e61c:	d15a      	bne.n	e6d4 <conn_update_req+0xc4>
		return 1;
	}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
	if (conn->llcp_conn_param.req != conn->llcp_conn_param.ack) {
    e61e:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
    e622:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
    e626:	428b      	cmp	r3, r1
    e628:	d154      	bne.n	e6d4 <conn_update_req+0xc4>
		return 1;
	}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	if (!conn->role) {
    e62a:	f990 301d 	ldrsb.w	r3, [r0, #29]
    e62e:	2b00      	cmp	r3, #0
    e630:	db25      	blt.n	e67e <conn_update_req+0x6e>
		conn->llcp.conn_upd.win_size = 1;
		conn->llcp.conn_upd.win_offset_us = 0;
		conn->llcp.conn_upd.interval = conn->conn_interval;
		conn->llcp.conn_upd.latency = conn->latency;
    e632:	8cc1      	ldrh	r1, [r0, #38]	; 0x26
		conn->llcp.conn_upd.interval = conn->conn_interval;
    e634:	8c82      	ldrh	r2, [r0, #36]	; 0x24
		conn->llcp.conn_upd.latency = conn->latency;
    e636:	f8a0 107c 	strh.w	r1, [r0, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->conn_interval *
					      conn->supervision_reload *
    e63a:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
		conn->llcp.conn_upd.interval = conn->conn_interval;
    e63c:	f8a0 207a 	strh.w	r2, [r0, #122]	; 0x7a
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    e640:	4351      	muls	r1, r2
					      conn->supervision_reload *
    e642:	227d      	movs	r2, #125	; 0x7d
    e644:	434a      	muls	r2, r1
					      125 / 1000;
    e646:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    e64a:	fb92 f2f1 	sdiv	r2, r2, r1
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    e64e:	f8a0 207e 	strh.w	r2, [r0, #126]	; 0x7e
		/* conn->llcp.conn_upd.instant     = 0; */
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    e652:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
		conn->llcp.conn_upd.win_size = 1;
    e656:	2501      	movs	r5, #1
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    e658:	f365 0201 	bfi	r2, r5, #0, #2
		conn->llcp.conn_upd.is_internal = 1;
    e65c:	b2d2      	uxtb	r2, r2
		conn->llcp.conn_upd.win_offset_us = 0;
    e65e:	2300      	movs	r3, #0
		conn->llcp.conn_upd.is_internal = 1;
    e660:	f042 0204 	orr.w	r2, r2, #4

		conn->llcp_type = LLCP_CONN_UPD;
		conn->llcp_ack--;
    e664:	3c01      	subs	r4, #1
		conn->llcp.conn_upd.win_size = 1;
    e666:	f880 5088 	strb.w	r5, [r0, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
    e66a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
		conn->llcp.conn_upd.is_internal = 1;
    e66e:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
    e672:	f880 5076 	strb.w	r5, [r0, #118]	; 0x76
		conn->llcp_ack--;
    e676:	f880 4075 	strb.w	r4, [r0, #117]	; 0x75
						125 / 1000;
		conn->llcp_conn_param.state = LLCP_CPR_STATE_REQ;
		conn->llcp_conn_param.cmd = 0;
		conn->llcp_conn_param.ack--;

		return 0;
    e67a:	4618      	mov	r0, r3
    e67c:	bd30      	pop	{r4, r5, pc}
	} else if (!conn->llcp_conn_param.disabled &&
    e67e:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    e682:	06dc      	lsls	r4, r3, #27
    e684:	d428      	bmi.n	e6d8 <conn_update_req+0xc8>
		   (!conn->common.fex_valid ||
    e686:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
	} else if (!conn->llcp_conn_param.disabled &&
    e68a:	069a      	lsls	r2, r3, #26
    e68c:	d503      	bpl.n	e696 <conn_update_req+0x86>
		    (conn->llcp_features &
    e68e:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
		   (!conn->common.fex_valid ||
    e692:	079b      	lsls	r3, r3, #30
    e694:	d520      	bpl.n	e6d8 <conn_update_req+0xc8>
		conn->llcp_conn_param.latency = conn->latency;
    e696:	8cc4      	ldrh	r4, [r0, #38]	; 0x26
		conn->llcp_conn_param.interval = conn->conn_interval;
    e698:	8c82      	ldrh	r2, [r0, #36]	; 0x24
		conn->llcp_conn_param.latency = conn->latency;
    e69a:	f8a0 40c6 	strh.w	r4, [r0, #198]	; 0xc6
						conn->supervision_reload *
    e69e:	8fc4      	ldrh	r4, [r0, #62]	; 0x3e
		conn->llcp_conn_param.interval = conn->conn_interval;
    e6a0:	f8a0 20c4 	strh.w	r2, [r0, #196]	; 0xc4
		conn->llcp_conn_param.timeout = conn->conn_interval *
    e6a4:	4354      	muls	r4, r2
						conn->supervision_reload *
    e6a6:	227d      	movs	r2, #125	; 0x7d
    e6a8:	4362      	muls	r2, r4
						125 / 1000;
    e6aa:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    e6ae:	fb92 f2f4 	sdiv	r2, r2, r4
		conn->llcp_conn_param.timeout = conn->conn_interval *
    e6b2:	f8a0 20c8 	strh.w	r2, [r0, #200]	; 0xc8
		conn->llcp_conn_param.state = LLCP_CPR_STATE_REQ;
    e6b6:	f890 20c2 	ldrb.w	r2, [r0, #194]	; 0xc2
		conn->llcp_conn_param.status = 0;
    e6ba:	2300      	movs	r3, #0
		conn->llcp_conn_param.cmd = 0;
    e6bc:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
    e6c0:	f363 02c3 	bfi	r2, r3, #3, #1
		conn->llcp_conn_param.ack--;
    e6c4:	3901      	subs	r1, #1
		conn->llcp_conn_param.status = 0;
    e6c6:	f880 30c3 	strb.w	r3, [r0, #195]	; 0xc3
		conn->llcp_conn_param.cmd = 0;
    e6ca:	f880 20c2 	strb.w	r2, [r0, #194]	; 0xc2
		conn->llcp_conn_param.ack--;
    e6ce:	f880 10c1 	strb.w	r1, [r0, #193]	; 0xc1
    e6d2:	e7d2      	b.n	e67a <conn_update_req+0x6a>
		return 1;
    e6d4:	2001      	movs	r0, #1
    e6d6:	bd30      	pop	{r4, r5, pc}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	}

	return 2;
    e6d8:	2002      	movs	r0, #2
}
    e6da:	bd30      	pop	{r4, r5, pc}

0000e6dc <packet_rx_allocate>:
{
    e6dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (max > _radio.link_rx_data_quota) {
    e6e0:	4d22      	ldr	r5, [pc, #136]	; (e76c <packet_rx_allocate+0x90>)
	acquire = _radio.packet_rx_acquire + 1;
    e6e2:	f895 474a 	ldrb.w	r4, [r5, #1866]	; 0x74a
    e6e6:	f895 975c 	ldrb.w	r9, [r5, #1884]	; 0x75c
	if (acquire == _radio.packet_rx_count) {
    e6ea:	f895 3748 	ldrb.w	r3, [r5, #1864]	; 0x748
	acquire = _radio.packet_rx_acquire + 1;
    e6ee:	3401      	adds	r4, #1
    e6f0:	4581      	cmp	r9, r0
    e6f2:	b2e4      	uxtb	r4, r4
    e6f4:	bf28      	it	cs
    e6f6:	4681      	movcs	r9, r0
		link = mem_acquire(&_radio.link_rx_free);
    e6f8:	f505 67ea 	add.w	r7, r5, #1872	; 0x750
		acquire = 0;
    e6fc:	42a3      	cmp	r3, r4
    e6fe:	bf08      	it	eq
    e700:	2400      	moveq	r4, #0
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    e702:	f505 68e7 	add.w	r8, r5, #1848	; 0x738
	while ((max--) && (acquire != _radio.packet_rx_last)) {
    e706:	f1b9 0f00 	cmp.w	r9, #0
    e70a:	d003      	beq.n	e714 <packet_rx_allocate+0x38>
    e70c:	f895 3749 	ldrb.w	r3, [r5, #1865]	; 0x749
    e710:	429c      	cmp	r4, r3
    e712:	d101      	bne.n	e718 <packet_rx_allocate+0x3c>
    e714:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		link = mem_acquire(&_radio.link_rx_free);
    e718:	4638      	mov	r0, r7
    e71a:	f7fd f860 	bl	b7de <mem_acquire>
		if (!link) {
    e71e:	4606      	mov	r6, r0
    e720:	2800      	cmp	r0, #0
    e722:	d0f7      	beq.n	e714 <packet_rx_allocate+0x38>
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    e724:	4640      	mov	r0, r8
    e726:	f7fd f85a 	bl	b7de <mem_acquire>
		if (!node_rx) {
    e72a:	b928      	cbnz	r0, e738 <packet_rx_allocate+0x5c>
			mem_release(link, &_radio.link_rx_free);
    e72c:	4630      	mov	r0, r6
    e72e:	4910      	ldr	r1, [pc, #64]	; (e770 <packet_rx_allocate+0x94>)
}
    e730:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			mem_release(link, &_radio.link_rx_free);
    e734:	f7fd b86d 	b.w	b812 <mem_release>
		node_rx->hdr.onion.link = link;
    e738:	6006      	str	r6, [r0, #0]
		_radio.packet_rx[_radio.packet_rx_acquire] = node_rx;
    e73a:	f895 274a 	ldrb.w	r2, [r5, #1866]	; 0x74a
    e73e:	f8d5 3744 	ldr.w	r3, [r5, #1860]	; 0x744
    e742:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
		_radio.packet_rx_acquire = acquire;
    e746:	f885 474a 	strb.w	r4, [r5, #1866]	; 0x74a
		if (acquire == _radio.packet_rx_count) {
    e74a:	f895 3748 	ldrb.w	r3, [r5, #1864]	; 0x748
		acquire = _radio.packet_rx_acquire + 1;
    e74e:	3401      	adds	r4, #1
    e750:	b2e4      	uxtb	r4, r4
			acquire = 0;
    e752:	42a3      	cmp	r3, r4
    e754:	bf08      	it	eq
    e756:	2400      	moveq	r4, #0
		_radio.link_rx_data_quota--;
    e758:	f895 375c 	ldrb.w	r3, [r5, #1884]	; 0x75c
    e75c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    e760:	3b01      	subs	r3, #1
    e762:	f885 375c 	strb.w	r3, [r5, #1884]	; 0x75c
    e766:	fa5f f989 	uxtb.w	r9, r9
    e76a:	e7cc      	b.n	e706 <packet_rx_allocate+0x2a>
    e76c:	20000bf0 	.word	0x20000bf0
    e770:	20001340 	.word	0x20001340

0000e774 <common_init>:
{
    e774:	b513      	push	{r0, r1, r4, lr}
	if (_radio.connection_count) {
    e776:	4c39      	ldr	r4, [pc, #228]	; (e85c <common_init+0xe8>)
    e778:	f894 2718 	ldrb.w	r2, [r4, #1816]	; 0x718
    e77c:	2a00      	cmp	r2, #0
    e77e:	d040      	beq.n	e802 <common_init+0x8e>
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
    e780:	f204 7314 	addw	r3, r4, #1812	; 0x714
    e784:	f44f 71aa 	mov.w	r1, #340	; 0x154
    e788:	f8d4 0710 	ldr.w	r0, [r4, #1808]	; 0x710
    e78c:	f7fd f800 	bl	b790 <mem_init>
	mem_init(_radio.pkt_rx_data_pool,
    e790:	4b33      	ldr	r3, [pc, #204]	; (e860 <common_init+0xec>)
    e792:	f894 2742 	ldrb.w	r2, [r4, #1858]	; 0x742
    e796:	f8b4 1740 	ldrh.w	r1, [r4, #1856]	; 0x740
    e79a:	f8d4 0734 	ldr.w	r0, [r4, #1844]	; 0x734
    e79e:	f7fc fff7 	bl	b790 <mem_init>
		 (_radio.packet_rx_count + _radio.connection_count),
    e7a2:	f894 1748 	ldrb.w	r1, [r4, #1864]	; 0x748
    e7a6:	f894 2718 	ldrb.w	r2, [r4, #1816]	; 0x718
	mem_init(_radio.link_rx_pool, (sizeof(memq_link_t)),
    e7aa:	4b2e      	ldr	r3, [pc, #184]	; (e864 <common_init+0xf0>)
    e7ac:	f8d4 074c 	ldr.w	r0, [r4, #1868]	; 0x74c
    e7b0:	440a      	add	r2, r1
    e7b2:	2108      	movs	r1, #8
    e7b4:	f7fc ffec 	bl	b790 <mem_init>
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
    e7b8:	4b2b      	ldr	r3, [pc, #172]	; (e868 <common_init+0xf4>)
    e7ba:	f8d4 0760 	ldr.w	r0, [r4, #1888]	; 0x760
    e7be:	2202      	movs	r2, #2
    e7c0:	2124      	movs	r1, #36	; 0x24
    e7c2:	f7fc ffe5 	bl	b790 <mem_init>
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
    e7c6:	f894 277c 	ldrb.w	r2, [r4, #1916]	; 0x77c
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
    e7ca:	f8d4 0768 	ldr.w	r0, [r4, #1896]	; 0x768
    e7ce:	4b27      	ldr	r3, [pc, #156]	; (e86c <common_init+0xf8>)
    e7d0:	f8b4 1770 	ldrh.w	r1, [r4, #1904]	; 0x770
    e7d4:	3a01      	subs	r2, #1
    e7d6:	b292      	uxth	r2, r2
    e7d8:	f7fc ffda 	bl	b790 <mem_init>
	link = mem_acquire(&_radio.link_rx_free);
    e7dc:	4821      	ldr	r0, [pc, #132]	; (e864 <common_init+0xf0>)
    e7de:	f7fc fffe 	bl	b7de <mem_acquire>
	LL_ASSERT(link);
    e7e2:	b988      	cbnz	r0, e808 <common_init+0x94>
    e7e4:	4b22      	ldr	r3, [pc, #136]	; (e870 <common_init+0xfc>)
    e7e6:	9301      	str	r3, [sp, #4]
    e7e8:	9300      	str	r3, [sp, #0]
    e7ea:	4a22      	ldr	r2, [pc, #136]	; (e874 <common_init+0x100>)
    e7ec:	4b22      	ldr	r3, [pc, #136]	; (e878 <common_init+0x104>)
    e7ee:	4923      	ldr	r1, [pc, #140]	; (e87c <common_init+0x108>)
    e7f0:	4823      	ldr	r0, [pc, #140]	; (e880 <common_init+0x10c>)
    e7f2:	f7f3 fd4f 	bl	2294 <printk>
    e7f6:	4040      	eors	r0, r0
    e7f8:	f380 8811 	msr	BASEPRI, r0
    e7fc:	f04f 0004 	mov.w	r0, #4
    e800:	df02      	svc	2
		_radio.conn_free = NULL;
    e802:	f8c4 2714 	str.w	r2, [r4, #1812]	; 0x714
    e806:	e7c3      	b.n	e790 <common_init+0x1c>
	memq_init(link, &_radio.link_rx_head, (void *)&_radio.link_rx_tail);
    e808:	4a1e      	ldr	r2, [pc, #120]	; (e884 <common_init+0x110>)
    e80a:	1f11      	subs	r1, r2, #4
    e80c:	f7fd f83e 	bl	b88c <memq_init>
	_radio.advertiser.chan_map = 0x07;
    e810:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    e814:	f043 0370 	orr.w	r3, r3, #112	; 0x70
    e818:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	_radio.data_chan_map[4] = 0x1F;
    e81c:	231f      	movs	r3, #31
    e81e:	f884 3726 	strb.w	r3, [r4, #1830]	; 0x726
	_radio.data_chan_count = 37;
    e822:	2325      	movs	r3, #37	; 0x25
    e824:	f884 3727 	strb.w	r3, [r4, #1831]	; 0x727
	_radio.default_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
    e828:	231b      	movs	r3, #27
    e82a:	f8a4 372a 	strh.w	r3, [r4, #1834]	; 0x72a
	_radio.default_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN,
    e82e:	f44f 73a4 	mov.w	r3, #328	; 0x148
	_radio.data_chan_map[0] = 0xFF;
    e832:	20ff      	movs	r0, #255	; 0xff
	_radio.default_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN,
    e834:	f8a4 372c 	strh.w	r3, [r4, #1836]	; 0x72c
	_radio.default_phy_tx |= BIT(2);
    e838:	2307      	movs	r3, #7
	_radio.data_chan_map[0] = 0xFF;
    e83a:	f884 0722 	strb.w	r0, [r4, #1826]	; 0x722
	_radio.data_chan_map[1] = 0xFF;
    e83e:	f884 0723 	strb.w	r0, [r4, #1827]	; 0x723
	_radio.data_chan_map[2] = 0xFF;
    e842:	f884 0724 	strb.w	r0, [r4, #1828]	; 0x724
	_radio.data_chan_map[3] = 0xFF;
    e846:	f884 0725 	strb.w	r0, [r4, #1829]	; 0x725
	_radio.default_phy_tx |= BIT(2);
    e84a:	f8a4 372e 	strh.w	r3, [r4, #1838]	; 0x72e
	_radio.default_phy_rx |= BIT(2);
    e84e:	f8a4 3730 	strh.w	r3, [r4, #1840]	; 0x730
}
    e852:	b002      	add	sp, #8
    e854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	packet_rx_allocate(0xFF);
    e858:	f7ff bf40 	b.w	e6dc <packet_rx_allocate>
    e85c:	20000bf0 	.word	0x20000bf0
    e860:	20001328 	.word	0x20001328
    e864:	20001340 	.word	0x20001340
    e868:	20001354 	.word	0x20001354
    e86c:	2000135c 	.word	0x2000135c
    e870:	00023dae 	.word	0x00023dae
    e874:	00022d76 	.word	0x00022d76
    e878:	000259d4 	.word	0x000259d4
    e87c:	000272d8 	.word	0x000272d8
    e880:	00025ef2 	.word	0x00025ef2
    e884:	20001348 	.word	0x20001348

0000e888 <tx_cmplt_get>:
	return 0;
}
#endif /* CONFIG_BT_CTLR_PHY */

static u8_t tx_cmplt_get(u16_t *handle, u8_t *first, u8_t last)
{
    e888:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t _first;
	u8_t cmplt;

	_first = *first;
    e88c:	780c      	ldrb	r4, [r1, #0]
	if (_first == last) {
    e88e:	4294      	cmp	r4, r2
{
    e890:	4681      	mov	r9, r0
    e892:	460f      	mov	r7, r1
    e894:	4690      	mov	r8, r2
	if (_first == last) {
    e896:	d03d      	beq.n	e914 <tx_cmplt_get+0x8c>
		return 0;
	}

	cmplt = 0;
	*handle = _radio.pkt_release[_first].handle;
    e898:	4e1f      	ldr	r6, [pc, #124]	; (e918 <tx_cmplt_get+0x90>)
    e89a:	f8d6 3778 	ldr.w	r3, [r6, #1912]	; 0x778
    e89e:	f833 3034 	ldrh.w	r3, [r3, r4, lsl #3]
    e8a2:	8003      	strh	r3, [r0, #0]
	cmplt = 0;
    e8a4:	2500      	movs	r5, #0
			_radio.pkt_release[_first].node_tx = (void *)1;

			cmplt++;
		} else {
			/* ctrl packet, hence not num cmplt */
			_radio.pkt_release[_first].node_tx = (void *)2;
    e8a6:	f04f 0b02 	mov.w	fp, #2
		}

		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    e8aa:	f206 7a6c 	addw	sl, r6, #1900	; 0x76c
		if (*handle != _radio.pkt_release[_first].handle) {
    e8ae:	b222      	sxth	r2, r4
    e8b0:	f8d6 0778 	ldr.w	r0, [r6, #1912]	; 0x778
    e8b4:	f8b9 e000 	ldrh.w	lr, [r9]
    e8b8:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    e8bc:	f830 2032 	ldrh.w	r2, [r0, r2, lsl #3]
    e8c0:	4596      	cmp	lr, r2
    e8c2:	d120      	bne.n	e906 <tx_cmplt_get+0x7e>
		node_tx = _radio.pkt_release[_first].node_tx;
    e8c4:	6848      	ldr	r0, [r1, #4]
		if ((!node_tx) || (node_tx == (void *)1) ||
    e8c6:	2801      	cmp	r0, #1
    e8c8:	f020 0303 	bic.w	r3, r0, #3
    e8cc:	d90a      	bls.n	e8e4 <tx_cmplt_get+0x5c>
    e8ce:	b1f3      	cbz	r3, e90e <tx_cmplt_get+0x86>
		    ((((u32_t)node_tx & ~(0x00000003)) != 0) &&
    e8d0:	1d02      	adds	r2, r0, #4
    e8d2:	d01c      	beq.n	e90e <tx_cmplt_get+0x86>
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    e8d4:	7942      	ldrb	r2, [r0, #5]
    e8d6:	b1d2      	cbz	r2, e90e <tx_cmplt_get+0x86>
		     ((pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_START) ||
    e8d8:	7902      	ldrb	r2, [r0, #4]
    e8da:	f002 0203 	and.w	r2, r2, #3
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    e8de:	3a01      	subs	r2, #1
    e8e0:	2a01      	cmp	r2, #1
    e8e2:	d814      	bhi.n	e90e <tx_cmplt_get+0x86>
			_radio.pkt_release[_first].node_tx = (void *)1;
    e8e4:	2201      	movs	r2, #1
			cmplt++;
    e8e6:	4415      	add	r5, r2
			_radio.pkt_release[_first].node_tx = (void *)1;
    e8e8:	604a      	str	r2, [r1, #4]
			cmplt++;
    e8ea:	b2ed      	uxtb	r5, r5
		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
    e8ec:	b113      	cbz	r3, e8f4 <tx_cmplt_get+0x6c>
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    e8ee:	4651      	mov	r1, sl
    e8f0:	f7fc ff8f 	bl	b812 <mem_release>
		}

		_first = _first + 1;
    e8f4:	3401      	adds	r4, #1
		if (_first == _radio.packet_tx_count) {
    e8f6:	f896 277c 	ldrb.w	r2, [r6, #1916]	; 0x77c
		_first = _first + 1;
    e8fa:	b2e4      	uxtb	r4, r4
			_first = 0;
    e8fc:	42a2      	cmp	r2, r4
    e8fe:	bf08      	it	eq
    e900:	2400      	moveq	r4, #0
		}

	} while (_first != last);
    e902:	4544      	cmp	r4, r8
    e904:	d1d3      	bne.n	e8ae <tx_cmplt_get+0x26>

	*first = _first;
    e906:	703c      	strb	r4, [r7, #0]

	return cmplt;
}
    e908:	4628      	mov	r0, r5
    e90a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			_radio.pkt_release[_first].node_tx = (void *)2;
    e90e:	f8c1 b004 	str.w	fp, [r1, #4]
    e912:	e7eb      	b.n	e8ec <tx_cmplt_get+0x64>
		return 0;
    e914:	2500      	movs	r5, #0
    e916:	e7f7      	b.n	e908 <tx_cmplt_get+0x80>
    e918:	20000bf0 	.word	0x20000bf0

0000e91c <connection_get>:
{
    e91c:	b510      	push	{r4, lr}
	if (handle < _radio.connection_count) {
    e91e:	4b09      	ldr	r3, [pc, #36]	; (e944 <connection_get+0x28>)
    e920:	f893 2718 	ldrb.w	r2, [r3, #1816]	; 0x718
    e924:	4282      	cmp	r2, r0
{
    e926:	4604      	mov	r4, r0
	if (handle < _radio.connection_count) {
    e928:	d90a      	bls.n	e940 <connection_get+0x24>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE, handle);
    e92a:	4602      	mov	r2, r0
    e92c:	f44f 71aa 	mov.w	r1, #340	; 0x154
    e930:	f8d3 0710 	ldr.w	r0, [r3, #1808]	; 0x710
    e934:	f7fc ff88 	bl	b848 <mem_get>
		if ((conn) && (conn->handle == handle)) {
    e938:	b110      	cbz	r0, e940 <connection_get+0x24>
    e93a:	8c03      	ldrh	r3, [r0, #32]
    e93c:	42a3      	cmp	r3, r4
    e93e:	d000      	beq.n	e942 <connection_get+0x26>
	return 0;
    e940:	2000      	movs	r0, #0
}
    e942:	bd10      	pop	{r4, pc}
    e944:	20000bf0 	.word	0x20000bf0

0000e948 <role_disable>:
{
    e948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e94c:	b086      	sub	sp, #24
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    e94e:	2302      	movs	r3, #2
	switch (ticker_id_primary) {
    e950:	2805      	cmp	r0, #5
{
    e952:	4605      	mov	r5, r0
    e954:	460f      	mov	r7, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    e956:	9302      	str	r3, [sp, #8]
	switch (ticker_id_primary) {
    e958:	d00c      	beq.n	e974 <role_disable+0x2c>
    e95a:	2806      	cmp	r0, #6
    e95c:	d040      	beq.n	e9e0 <role_disable+0x98>
		if (ticker_id_primary >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    e95e:	d945      	bls.n	e9ec <role_disable+0xa4>
			conn_handle = ticker_id_primary -
    e960:	3807      	subs	r0, #7
			conn = connection_get(conn_handle);
    e962:	b280      	uxth	r0, r0
    e964:	f7ff ffda 	bl	e91c <connection_get>
			if (!conn) {
    e968:	2800      	cmp	r0, #0
    e96a:	f000 8123 	beq.w	ebb4 <role_disable+0x26c>
			ticks_active_to_start =
    e96e:	e890 0140 	ldmia.w	r0, {r6, r8}
		break;
    e972:	e00f      	b.n	e994 <role_disable+0x4c>
		ticks_xtal_to_start =
    e974:	4b90      	ldr	r3, [pc, #576]	; (ebb8 <role_disable+0x270>)
    e976:	699e      	ldr	r6, [r3, #24]
		ticks_active_to_start =
    e978:	f8d3 801c 	ldr.w	r8, [r3, #28]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    e97c:	ab02      	add	r3, sp, #8
    e97e:	9300      	str	r3, [sp, #0]
    e980:	460a      	mov	r2, r1
    e982:	4b8e      	ldr	r3, [pc, #568]	; (ebbc <role_disable+0x274>)
    e984:	2103      	movs	r1, #3
    e986:	2000      	movs	r0, #0
    e988:	f7fd fe50 	bl	c62c <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    e98c:	2802      	cmp	r0, #2
    e98e:	d011      	beq.n	e9b4 <role_disable+0x6c>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    e990:	9b02      	ldr	r3, [sp, #8]
    e992:	b99b      	cbnz	r3, e9bc <role_disable+0x74>
	LL_ASSERT(!_radio.ticker_id_stop);
    e994:	4c88      	ldr	r4, [pc, #544]	; (ebb8 <role_disable+0x270>)
    e996:	7ca3      	ldrb	r3, [r4, #18]
    e998:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    e99c:	2b00      	cmp	r3, #0
    e99e:	d02d      	beq.n	e9fc <role_disable+0xb4>
    e9a0:	4b87      	ldr	r3, [pc, #540]	; (ebc0 <role_disable+0x278>)
    e9a2:	9301      	str	r3, [sp, #4]
    e9a4:	9300      	str	r3, [sp, #0]
    e9a6:	4a87      	ldr	r2, [pc, #540]	; (ebc4 <role_disable+0x27c>)
    e9a8:	4b87      	ldr	r3, [pc, #540]	; (ebc8 <role_disable+0x280>)
    e9aa:	4988      	ldr	r1, [pc, #544]	; (ebcc <role_disable+0x284>)
    e9ac:	4888      	ldr	r0, [pc, #544]	; (ebd0 <role_disable+0x288>)
    e9ae:	e00f      	b.n	e9d0 <role_disable+0x88>
				cpu_sleep();
    e9b0:	f7ff fdba 	bl	e528 <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
    e9b4:	9b02      	ldr	r3, [sp, #8]
    e9b6:	2b02      	cmp	r3, #2
    e9b8:	d0fa      	beq.n	e9b0 <role_disable+0x68>
    e9ba:	e7e9      	b.n	e990 <role_disable+0x48>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    e9bc:	9b02      	ldr	r3, [sp, #8]
    e9be:	2b01      	cmp	r3, #1
    e9c0:	d0e8      	beq.n	e994 <role_disable+0x4c>
    e9c2:	4b7f      	ldr	r3, [pc, #508]	; (ebc0 <role_disable+0x278>)
    e9c4:	9301      	str	r3, [sp, #4]
    e9c6:	9300      	str	r3, [sp, #0]
    e9c8:	4a7e      	ldr	r2, [pc, #504]	; (ebc4 <role_disable+0x27c>)
    e9ca:	4b7f      	ldr	r3, [pc, #508]	; (ebc8 <role_disable+0x280>)
    e9cc:	497f      	ldr	r1, [pc, #508]	; (ebcc <role_disable+0x284>)
    e9ce:	4881      	ldr	r0, [pc, #516]	; (ebd4 <role_disable+0x28c>)
			LL_ASSERT(0);
    e9d0:	f7f3 fc60 	bl	2294 <printk>
    e9d4:	4040      	eors	r0, r0
    e9d6:	f380 8811 	msr	BASEPRI, r0
    e9da:	f04f 0004 	mov.w	r0, #4
    e9de:	df02      	svc	2
		ticks_xtal_to_start =
    e9e0:	4b75      	ldr	r3, [pc, #468]	; (ebb8 <role_disable+0x270>)
    e9e2:	f8d3 663c 	ldr.w	r6, [r3, #1596]	; 0x63c
		ticks_active_to_start =
    e9e6:	f8d3 8640 	ldr.w	r8, [r3, #1600]	; 0x640
		break;
    e9ea:	e7d3      	b.n	e994 <role_disable+0x4c>
			LL_ASSERT(0);
    e9ec:	4b74      	ldr	r3, [pc, #464]	; (ebc0 <role_disable+0x278>)
    e9ee:	9301      	str	r3, [sp, #4]
    e9f0:	9300      	str	r3, [sp, #0]
    e9f2:	4b75      	ldr	r3, [pc, #468]	; (ebc8 <role_disable+0x280>)
    e9f4:	4a73      	ldr	r2, [pc, #460]	; (ebc4 <role_disable+0x27c>)
    e9f6:	4975      	ldr	r1, [pc, #468]	; (ebcc <role_disable+0x284>)
    e9f8:	4877      	ldr	r0, [pc, #476]	; (ebd8 <role_disable+0x290>)
    e9fa:	e7e9      	b.n	e9d0 <role_disable+0x88>
	ret_cb = TICKER_STATUS_BUSY;
    e9fc:	ab06      	add	r3, sp, #24
    e9fe:	2202      	movs	r2, #2
	_radio.ticker_id_stop = ticker_id_primary;
    ea00:	74a5      	strb	r5, [r4, #18]
	ret_cb = TICKER_STATUS_BUSY;
    ea02:	f843 2d10 	str.w	r2, [r3, #-16]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    ea06:	2103      	movs	r1, #3
    ea08:	9300      	str	r3, [sp, #0]
    ea0a:	462a      	mov	r2, r5
    ea0c:	4b6b      	ldr	r3, [pc, #428]	; (ebbc <role_disable+0x274>)
    ea0e:	f7fd fe0d 	bl	c62c <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    ea12:	2802      	cmp	r0, #2
    ea14:	d025      	beq.n	ea62 <role_disable+0x11a>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
    ea16:	9b02      	ldr	r3, [sp, #8]
    ea18:	2b00      	cmp	r3, #0
    ea1a:	d169      	bne.n	eaf0 <role_disable+0x1a8>
	if ((_radio.ticker_id_prepare == ticker_id_primary)
    ea1c:	7c23      	ldrb	r3, [r4, #16]
    ea1e:	429d      	cmp	r5, r3
    ea20:	d002      	beq.n	ea28 <role_disable+0xe0>
	    || (_radio.ticker_id_event == ticker_id_primary)) {
    ea22:	7c63      	ldrb	r3, [r4, #17]
    ea24:	429d      	cmp	r5, r3
    ea26:	d15f      	bne.n	eae8 <role_disable+0x1a0>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
    ea28:	ab06      	add	r3, sp, #24
    ea2a:	2202      	movs	r2, #2
    ea2c:	f843 2d0c 	str.w	r2, [r3, #-12]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    ea30:	2200      	movs	r2, #0
    ea32:	9300      	str	r3, [sp, #0]
    ea34:	2103      	movs	r1, #3
    ea36:	4b61      	ldr	r3, [pc, #388]	; (ebbc <role_disable+0x274>)
    ea38:	4610      	mov	r0, r2
    ea3a:	f7fd fdf7 	bl	c62c <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    ea3e:	2802      	cmp	r0, #2
    ea40:	d11d      	bne.n	ea7e <role_disable+0x136>
		mayfly_enable(RADIO_TICKER_USER_ID_APP,
    ea42:	2201      	movs	r2, #1
    ea44:	4611      	mov	r1, r2
    ea46:	2003      	movs	r0, #3
    ea48:	f7fc ff6c 	bl	b924 <mayfly_enable>
		LL_ASSERT(ret_cb_evt != TICKER_STATUS_BUSY);
    ea4c:	9b03      	ldr	r3, [sp, #12]
    ea4e:	2b02      	cmp	r3, #2
    ea50:	d115      	bne.n	ea7e <role_disable+0x136>
    ea52:	4b5b      	ldr	r3, [pc, #364]	; (ebc0 <role_disable+0x278>)
    ea54:	9301      	str	r3, [sp, #4]
    ea56:	9300      	str	r3, [sp, #0]
    ea58:	4a5a      	ldr	r2, [pc, #360]	; (ebc4 <role_disable+0x27c>)
    ea5a:	4b60      	ldr	r3, [pc, #384]	; (ebdc <role_disable+0x294>)
    ea5c:	495b      	ldr	r1, [pc, #364]	; (ebcc <role_disable+0x284>)
    ea5e:	4860      	ldr	r0, [pc, #384]	; (ebe0 <role_disable+0x298>)
    ea60:	e7b6      	b.n	e9d0 <role_disable+0x88>
		if (_radio.ticker_id_event == ticker_id_primary) {
    ea62:	7c63      	ldrb	r3, [r4, #17]
    ea64:	429d      	cmp	r5, r3
    ea66:	d104      	bne.n	ea72 <role_disable+0x12a>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    ea68:	2201      	movs	r2, #1
    ea6a:	4611      	mov	r1, r2
    ea6c:	2003      	movs	r0, #3
    ea6e:	f7fc ff59 	bl	b924 <mayfly_enable>
		while (ret_cb == TICKER_STATUS_BUSY) {
    ea72:	9b02      	ldr	r3, [sp, #8]
    ea74:	2b02      	cmp	r3, #2
    ea76:	d1ce      	bne.n	ea16 <role_disable+0xce>
			cpu_sleep();
    ea78:	f7ff fd56 	bl	e528 <cpu_sleep>
    ea7c:	e7f9      	b.n	ea72 <role_disable+0x12a>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
    ea7e:	9803      	ldr	r0, [sp, #12]
    ea80:	2800      	cmp	r0, #0
    ea82:	d150      	bne.n	eb26 <role_disable+0x1de>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
    ea84:	2302      	movs	r3, #2
    ea86:	9304      	str	r3, [sp, #16]
		LL_ASSERT(_radio.ticker_id_prepare);
    ea88:	7c23      	ldrb	r3, [r4, #16]
    ea8a:	b93b      	cbnz	r3, ea9c <role_disable+0x154>
    ea8c:	4b4c      	ldr	r3, [pc, #304]	; (ebc0 <role_disable+0x278>)
    ea8e:	9301      	str	r3, [sp, #4]
    ea90:	9300      	str	r3, [sp, #0]
    ea92:	4a4c      	ldr	r2, [pc, #304]	; (ebc4 <role_disable+0x27c>)
    ea94:	4b51      	ldr	r3, [pc, #324]	; (ebdc <role_disable+0x294>)
    ea96:	494d      	ldr	r1, [pc, #308]	; (ebcc <role_disable+0x284>)
    ea98:	4852      	ldr	r0, [pc, #328]	; (ebe4 <role_disable+0x29c>)
    ea9a:	e799      	b.n	e9d0 <role_disable+0x88>
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    ea9c:	ab04      	add	r3, sp, #16
    ea9e:	9300      	str	r3, [sp, #0]
    eaa0:	2201      	movs	r2, #1
    eaa2:	4b46      	ldr	r3, [pc, #280]	; (ebbc <role_disable+0x274>)
		_radio.ticker_id_prepare = 0;
    eaa4:	7420      	strb	r0, [r4, #16]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    eaa6:	2103      	movs	r1, #3
    eaa8:	f7fd fdc0 	bl	c62c <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    eaac:	2802      	cmp	r0, #2
    eaae:	d10f      	bne.n	ead0 <role_disable+0x188>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    eab0:	2201      	movs	r2, #1
    eab2:	4611      	mov	r1, r2
    eab4:	2003      	movs	r0, #3
    eab6:	f7fc ff35 	bl	b924 <mayfly_enable>
			LL_ASSERT(ret_cb_m0 != TICKER_STATUS_BUSY);
    eaba:	9b04      	ldr	r3, [sp, #16]
    eabc:	2b02      	cmp	r3, #2
    eabe:	d107      	bne.n	ead0 <role_disable+0x188>
    eac0:	4b3f      	ldr	r3, [pc, #252]	; (ebc0 <role_disable+0x278>)
    eac2:	9301      	str	r3, [sp, #4]
    eac4:	9300      	str	r3, [sp, #0]
    eac6:	4a3f      	ldr	r2, [pc, #252]	; (ebc4 <role_disable+0x27c>)
    eac8:	4b44      	ldr	r3, [pc, #272]	; (ebdc <role_disable+0x294>)
    eaca:	4940      	ldr	r1, [pc, #256]	; (ebcc <role_disable+0x284>)
    eacc:	4846      	ldr	r0, [pc, #280]	; (ebe8 <role_disable+0x2a0>)
    eace:	e77f      	b.n	e9d0 <role_disable+0x88>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
    ead0:	9a04      	ldr	r2, [sp, #16]
    ead2:	b99a      	cbnz	r2, eafc <role_disable+0x1b4>
			ticks_xtal_to_start &= ~XON_BITMASK;
    ead4:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
			if (ticks_active_to_start > ticks_xtal_to_start) {
    ead8:	45b0      	cmp	r8, r6
    eada:	d922      	bls.n	eb22 <role_disable+0x1da>
				ret = mayfly_enqueue(
    eadc:	4b43      	ldr	r3, [pc, #268]	; (ebec <role_disable+0x2a4>)
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    eade:	4611      	mov	r1, r2
    eae0:	2003      	movs	r0, #3
    eae2:	f7fc ff47 	bl	b974 <mayfly_enqueue>
			LL_ASSERT(!ret);
    eae6:	b9a0      	cbnz	r0, eb12 <role_disable+0x1ca>
	if (!_radio.ticker_id_stop) {
    eae8:	7ca3      	ldrb	r3, [r4, #18]
    eaea:	b90b      	cbnz	r3, eaf0 <role_disable+0x1a8>
		ret_cb = TICKER_STATUS_FAILURE;
    eaec:	2301      	movs	r3, #1
    eaee:	9302      	str	r3, [sp, #8]
	_radio.ticker_id_stop = 0;
    eaf0:	2300      	movs	r3, #0
    eaf2:	74a3      	strb	r3, [r4, #18]
	return ret_cb;
    eaf4:	9802      	ldr	r0, [sp, #8]
}
    eaf6:	b006      	add	sp, #24
    eaf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
    eafc:	9b04      	ldr	r3, [sp, #16]
    eafe:	2b01      	cmp	r3, #1
    eb00:	d153      	bne.n	ebaa <role_disable+0x262>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    eb02:	2200      	movs	r2, #0
    eb04:	4611      	mov	r1, r2
    eb06:	4b39      	ldr	r3, [pc, #228]	; (ebec <role_disable+0x2a4>)
    eb08:	2003      	movs	r0, #3
    eb0a:	f7fc ff33 	bl	b974 <mayfly_enqueue>
			LL_ASSERT(!ret);
    eb0e:	4602      	mov	r2, r0
    eb10:	b138      	cbz	r0, eb22 <role_disable+0x1da>
			LL_ASSERT(!ret);
    eb12:	4b2b      	ldr	r3, [pc, #172]	; (ebc0 <role_disable+0x278>)
    eb14:	9301      	str	r3, [sp, #4]
    eb16:	9300      	str	r3, [sp, #0]
    eb18:	4a2a      	ldr	r2, [pc, #168]	; (ebc4 <role_disable+0x27c>)
    eb1a:	4b30      	ldr	r3, [pc, #192]	; (ebdc <role_disable+0x294>)
    eb1c:	492b      	ldr	r1, [pc, #172]	; (ebcc <role_disable+0x284>)
    eb1e:	4834      	ldr	r0, [pc, #208]	; (ebf0 <role_disable+0x2a8>)
    eb20:	e756      	b.n	e9d0 <role_disable+0x88>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    eb22:	4b34      	ldr	r3, [pc, #208]	; (ebf4 <role_disable+0x2ac>)
    eb24:	e7db      	b.n	eade <role_disable+0x196>
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
    eb26:	9d03      	ldr	r5, [sp, #12]
    eb28:	2d01      	cmp	r5, #1
    eb2a:	d13e      	bne.n	ebaa <role_disable+0x262>
		if (ticker_id_stop != TICKER_NULL) {
    eb2c:	2fff      	cmp	r7, #255	; 0xff
    eb2e:	d029      	beq.n	eb84 <role_disable+0x23c>
			u32_t volatile ret_cb_stop = TICKER_STATUS_BUSY;
    eb30:	ab06      	add	r3, sp, #24
    eb32:	2202      	movs	r2, #2
    eb34:	f843 2d04 	str.w	r2, [r3, #-4]!
			ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    eb38:	2103      	movs	r1, #3
    eb3a:	9300      	str	r3, [sp, #0]
    eb3c:	463a      	mov	r2, r7
    eb3e:	4b1f      	ldr	r3, [pc, #124]	; (ebbc <role_disable+0x274>)
    eb40:	2000      	movs	r0, #0
    eb42:	f7fd fd73 	bl	c62c <ticker_stop>
			if (ret == TICKER_STATUS_BUSY) {
    eb46:	2802      	cmp	r0, #2
    eb48:	d10f      	bne.n	eb6a <role_disable+0x222>
				mayfly_enable(RADIO_TICKER_USER_ID_APP,
    eb4a:	462a      	mov	r2, r5
    eb4c:	4629      	mov	r1, r5
    eb4e:	2003      	movs	r0, #3
    eb50:	f7fc fee8 	bl	b924 <mayfly_enable>
				LL_ASSERT(ret_cb_stop != TICKER_STATUS_BUSY);
    eb54:	9b05      	ldr	r3, [sp, #20]
    eb56:	2b02      	cmp	r3, #2
    eb58:	d107      	bne.n	eb6a <role_disable+0x222>
    eb5a:	4b19      	ldr	r3, [pc, #100]	; (ebc0 <role_disable+0x278>)
    eb5c:	9301      	str	r3, [sp, #4]
    eb5e:	9300      	str	r3, [sp, #0]
    eb60:	4a18      	ldr	r2, [pc, #96]	; (ebc4 <role_disable+0x27c>)
    eb62:	4b1e      	ldr	r3, [pc, #120]	; (ebdc <role_disable+0x294>)
    eb64:	4919      	ldr	r1, [pc, #100]	; (ebcc <role_disable+0x284>)
    eb66:	4824      	ldr	r0, [pc, #144]	; (ebf8 <role_disable+0x2b0>)
    eb68:	e732      	b.n	e9d0 <role_disable+0x88>
			LL_ASSERT((ret_cb_stop == TICKER_STATUS_SUCCESS) ||
    eb6a:	9b05      	ldr	r3, [sp, #20]
    eb6c:	b153      	cbz	r3, eb84 <role_disable+0x23c>
    eb6e:	9b05      	ldr	r3, [sp, #20]
    eb70:	2b01      	cmp	r3, #1
    eb72:	d007      	beq.n	eb84 <role_disable+0x23c>
    eb74:	4b12      	ldr	r3, [pc, #72]	; (ebc0 <role_disable+0x278>)
    eb76:	9301      	str	r3, [sp, #4]
    eb78:	9300      	str	r3, [sp, #0]
    eb7a:	4a12      	ldr	r2, [pc, #72]	; (ebc4 <role_disable+0x27c>)
    eb7c:	4b17      	ldr	r3, [pc, #92]	; (ebdc <role_disable+0x294>)
    eb7e:	4913      	ldr	r1, [pc, #76]	; (ebcc <role_disable+0x284>)
    eb80:	481e      	ldr	r0, [pc, #120]	; (ebfc <role_disable+0x2b4>)
    eb82:	e725      	b.n	e9d0 <role_disable+0x88>
		if (_radio.role != ROLE_NONE) {
    eb84:	7ce3      	ldrb	r3, [r4, #19]
    eb86:	2b00      	cmp	r3, #0
    eb88:	d0ae      	beq.n	eae8 <role_disable+0x1a0>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    eb8a:	4b1d      	ldr	r3, [pc, #116]	; (ec00 <role_disable+0x2b8>)
    eb8c:	2204      	movs	r2, #4
    eb8e:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    eb90:	2200      	movs	r2, #0
    eb92:	4611      	mov	r1, r2
    eb94:	2003      	movs	r0, #3
    eb96:	f7fc feed 	bl	b974 <mayfly_enqueue>
			LL_ASSERT(!ret);
    eb9a:	2800      	cmp	r0, #0
    eb9c:	d1b9      	bne.n	eb12 <role_disable+0x1ca>
			while (_radio.role != ROLE_NONE) {
    eb9e:	7ce3      	ldrb	r3, [r4, #19]
    eba0:	2b00      	cmp	r3, #0
    eba2:	d0a1      	beq.n	eae8 <role_disable+0x1a0>
				cpu_sleep();
    eba4:	f7ff fcc0 	bl	e528 <cpu_sleep>
    eba8:	e7f9      	b.n	eb9e <role_disable+0x256>
		LL_ASSERT(0);
    ebaa:	4b05      	ldr	r3, [pc, #20]	; (ebc0 <role_disable+0x278>)
    ebac:	9301      	str	r3, [sp, #4]
    ebae:	9300      	str	r3, [sp, #0]
    ebb0:	4b0a      	ldr	r3, [pc, #40]	; (ebdc <role_disable+0x294>)
    ebb2:	e71f      	b.n	e9f4 <role_disable+0xac>
				return 1;
    ebb4:	2001      	movs	r0, #1
    ebb6:	e79e      	b.n	eaf6 <role_disable+0x1ae>
    ebb8:	20000bf0 	.word	0x20000bf0
    ebbc:	0000e56d 	.word	0x0000e56d
    ebc0:	00023dae 	.word	0x00023dae
    ebc4:	00022d76 	.word	0x00022d76
    ebc8:	00025e84 	.word	0x00025e84
    ebcc:	000272d8 	.word	0x000272d8
    ebd0:	00026859 	.word	0x00026859
    ebd4:	00026819 	.word	0x00026819
    ebd8:	00023fa5 	.word	0x00023fa5
    ebdc:	00025e70 	.word	0x00025e70
    ebe0:	00026891 	.word	0x00026891
    ebe4:	000268c2 	.word	0x000268c2
    ebe8:	000268fc 	.word	0x000268fc
    ebec:	2000a008 	.word	0x2000a008
    ebf0:	0002692c 	.word	0x0002692c
    ebf4:	2000a0c8 	.word	0x2000a0c8
    ebf8:	00026952 	.word	0x00026952
    ebfc:	00026984 	.word	0x00026984
    ec00:	2000a038 	.word	0x2000a038

0000ec04 <mayfly_xtal_retain>:
{
    ec04:	b513      	push	{r0, r1, r4, lr}
    ec06:	4b1d      	ldr	r3, [pc, #116]	; (ec7c <mayfly_xtal_retain+0x78>)
    ec08:	4604      	mov	r4, r0
		if (!s_xtal_retained) {
    ec0a:	781a      	ldrb	r2, [r3, #0]
	if (retain) {
    ec0c:	b301      	cbz	r1, ec50 <mayfly_xtal_retain+0x4c>
		if (!s_xtal_retained) {
    ec0e:	2a00      	cmp	r2, #0
    ec10:	d132      	bne.n	ec78 <mayfly_xtal_retain+0x74>
			LL_ASSERT(caller_id == RADIO_TICKER_USER_ID_JOB);
    ec12:	2801      	cmp	r0, #1
    ec14:	d00e      	beq.n	ec34 <mayfly_xtal_retain+0x30>
    ec16:	4b1a      	ldr	r3, [pc, #104]	; (ec80 <mayfly_xtal_retain+0x7c>)
    ec18:	9301      	str	r3, [sp, #4]
    ec1a:	9300      	str	r3, [sp, #0]
    ec1c:	4a19      	ldr	r2, [pc, #100]	; (ec84 <mayfly_xtal_retain+0x80>)
    ec1e:	4b1a      	ldr	r3, [pc, #104]	; (ec88 <mayfly_xtal_retain+0x84>)
    ec20:	491a      	ldr	r1, [pc, #104]	; (ec8c <mayfly_xtal_retain+0x88>)
    ec22:	481b      	ldr	r0, [pc, #108]	; (ec90 <mayfly_xtal_retain+0x8c>)
			LL_ASSERT(!retval);
    ec24:	f7f3 fb36 	bl	2294 <printk>
    ec28:	4040      	eors	r0, r0
    ec2a:	f380 8811 	msr	BASEPRI, r0
    ec2e:	f04f 0004 	mov.w	r0, #4
    ec32:	df02      	svc	2
			s_xtal_retained = 1;
    ec34:	7018      	strb	r0, [r3, #0]
			retval = mayfly_enqueue(caller_id,
    ec36:	4b17      	ldr	r3, [pc, #92]	; (ec94 <mayfly_xtal_retain+0x90>)
    ec38:	4611      	mov	r1, r2
    ec3a:	f7fc fe9b 	bl	b974 <mayfly_enqueue>
			LL_ASSERT(!retval);
    ec3e:	b1d8      	cbz	r0, ec78 <mayfly_xtal_retain+0x74>
    ec40:	4b0f      	ldr	r3, [pc, #60]	; (ec80 <mayfly_xtal_retain+0x7c>)
    ec42:	9301      	str	r3, [sp, #4]
    ec44:	9300      	str	r3, [sp, #0]
    ec46:	4a0f      	ldr	r2, [pc, #60]	; (ec84 <mayfly_xtal_retain+0x80>)
    ec48:	4b0f      	ldr	r3, [pc, #60]	; (ec88 <mayfly_xtal_retain+0x84>)
    ec4a:	4910      	ldr	r1, [pc, #64]	; (ec8c <mayfly_xtal_retain+0x88>)
    ec4c:	4812      	ldr	r0, [pc, #72]	; (ec98 <mayfly_xtal_retain+0x94>)
    ec4e:	e7e9      	b.n	ec24 <mayfly_xtal_retain+0x20>
		if (s_xtal_retained) {
    ec50:	b192      	cbz	r2, ec78 <mayfly_xtal_retain+0x74>
			s_xtal_retained = 0;
    ec52:	7019      	strb	r1, [r3, #0]
			switch (caller_id) {
    ec54:	b170      	cbz	r0, ec74 <mayfly_xtal_retain+0x70>
    ec56:	2801      	cmp	r0, #1
    ec58:	d104      	bne.n	ec64 <mayfly_xtal_retain+0x60>
				p_mfy_xtal_stop = &s_mfy_xtal_stop[1];
    ec5a:	4b10      	ldr	r3, [pc, #64]	; (ec9c <mayfly_xtal_retain+0x98>)
			retval = mayfly_enqueue(caller_id,
    ec5c:	2200      	movs	r2, #0
    ec5e:	4611      	mov	r1, r2
    ec60:	4620      	mov	r0, r4
    ec62:	e7ea      	b.n	ec3a <mayfly_xtal_retain+0x36>
				LL_ASSERT(0);
    ec64:	4b06      	ldr	r3, [pc, #24]	; (ec80 <mayfly_xtal_retain+0x7c>)
    ec66:	9301      	str	r3, [sp, #4]
    ec68:	9300      	str	r3, [sp, #0]
    ec6a:	4a06      	ldr	r2, [pc, #24]	; (ec84 <mayfly_xtal_retain+0x80>)
    ec6c:	4b06      	ldr	r3, [pc, #24]	; (ec88 <mayfly_xtal_retain+0x84>)
    ec6e:	4907      	ldr	r1, [pc, #28]	; (ec8c <mayfly_xtal_retain+0x88>)
    ec70:	480b      	ldr	r0, [pc, #44]	; (eca0 <mayfly_xtal_retain+0x9c>)
    ec72:	e7d7      	b.n	ec24 <mayfly_xtal_retain+0x20>
				p_mfy_xtal_stop = &s_mfy_xtal_stop[0];
    ec74:	4b0b      	ldr	r3, [pc, #44]	; (eca4 <mayfly_xtal_retain+0xa0>)
    ec76:	e7f1      	b.n	ec5c <mayfly_xtal_retain+0x58>
}
    ec78:	b002      	add	sp, #8
    ec7a:	bd10      	pop	{r4, pc}
    ec7c:	20001434 	.word	0x20001434
    ec80:	00023dae 	.word	0x00023dae
    ec84:	00022d76 	.word	0x00022d76
    ec88:	00025b8d 	.word	0x00025b8d
    ec8c:	000272d8 	.word	0x000272d8
    ec90:	00026672 	.word	0x00026672
    ec94:	2000a088 	.word	0x2000a088
    ec98:	000266a2 	.word	0x000266a2
    ec9c:	2000a0a8 	.word	0x2000a0a8
    eca0:	00023fa5 	.word	0x00023fa5
    eca4:	2000a098 	.word	0x2000a098

0000eca8 <rx_packet_set>:
{
    eca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	phy = conn->phy_rx;
    ecaa:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
	max_rx_octets = conn->max_rx_octets;
    ecae:	8e05      	ldrh	r5, [r0, #48]	; 0x30
{
    ecb0:	4606      	mov	r6, r0
	phy = conn->phy_rx;
    ecb2:	f004 0407 	and.w	r4, r4, #7
{
    ecb6:	460f      	mov	r7, r1
	radio_phy_set(phy, 0);
    ecb8:	4620      	mov	r0, r4
    ecba:	2100      	movs	r1, #0
    ecbc:	f009 fd9a 	bl	187f4 <radio_phy_set>
	if (conn->enc_rx) {
    ecc0:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
    ecc4:	f013 0f10 	tst.w	r3, #16
    ecc8:	ea4f 0244 	mov.w	r2, r4, lsl #1
    eccc:	d010      	beq.n	ecf0 <rx_packet_set+0x48>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
    ecce:	1d29      	adds	r1, r5, #4
    ecd0:	f042 0201 	orr.w	r2, r2, #1
    ecd4:	b2c9      	uxtb	r1, r1
    ecd6:	2008      	movs	r0, #8
    ecd8:	f009 fdf0 	bl	188bc <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&conn->ccm_rx, phy,
    ecdc:	463a      	mov	r2, r7
    ecde:	4621      	mov	r1, r4
    ece0:	f106 00f9 	add.w	r0, r6, #249	; 0xf9
    ece4:	f00a f830 	bl	18d48 <radio_ccm_rx_pkt_set>
}
    ece8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(pdu_data_rx);
    ecec:	f009 be18 	b.w	18920 <radio_pkt_rx_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
    ecf0:	2008      	movs	r0, #8
    ecf2:	f042 0201 	orr.w	r2, r2, #1
    ecf6:	b2e9      	uxtb	r1, r5
    ecf8:	f009 fde0 	bl	188bc <radio_pkt_configure>
		radio_pkt_rx_set(pdu_data_rx);
    ecfc:	4638      	mov	r0, r7
    ecfe:	e7f3      	b.n	ece8 <rx_packet_set+0x40>

0000ed00 <tx_packet_set>:
{
    ed00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ed02:	460f      	mov	r7, r1
	phy = conn->phy_tx;
    ed04:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
	max_tx_octets = conn->max_tx_octets;
    ed08:	8dc5      	ldrh	r5, [r0, #46]	; 0x2e
	phy = conn->phy_tx;
    ed0a:	f3c1 04c2 	ubfx	r4, r1, #3, #3
{
    ed0e:	4606      	mov	r6, r0
	radio_phy_set(phy, flags);
    ed10:	09c9      	lsrs	r1, r1, #7
    ed12:	4620      	mov	r0, r4
    ed14:	f009 fd6e 	bl	187f4 <radio_phy_set>
	if (conn->enc_tx) {
    ed18:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
    ed1c:	f013 0f20 	tst.w	r3, #32
    ed20:	ea4f 0244 	mov.w	r2, r4, lsl #1
    ed24:	d00f      	beq.n	ed46 <tx_packet_set+0x46>
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
    ed26:	1d29      	adds	r1, r5, #4
    ed28:	b2c9      	uxtb	r1, r1
    ed2a:	2008      	movs	r0, #8
    ed2c:	f042 0201 	orr.w	r2, r2, #1
    ed30:	f009 fdc4 	bl	188bc <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&conn->ccm_tx,
    ed34:	4639      	mov	r1, r7
    ed36:	f506 708d 	add.w	r0, r6, #282	; 0x11a
    ed3a:	f00a f85b 	bl	18df4 <radio_ccm_tx_pkt_set>
}
    ed3e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
    ed42:	f009 bdf3 	b.w	1892c <radio_pkt_tx_set>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
    ed46:	2008      	movs	r0, #8
    ed48:	f042 0201 	orr.w	r2, r2, #1
    ed4c:	b2e9      	uxtb	r1, r5
    ed4e:	f009 fdb5 	bl	188bc <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
    ed52:	4638      	mov	r0, r7
    ed54:	e7f3      	b.n	ed3e <tx_packet_set+0x3e>
	...

0000ed58 <chan_set>:
{
    ed58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	pdu = (void *)_radio.advertiser.adv_data.data
    ed5c:	4e89      	ldr	r6, [pc, #548]	; (ef84 <chan_set+0x22c>)
    ed5e:	f896 322e 	ldrb.w	r3, [r6, #558]	; 0x22e
	if(pdu->type == PDU_ADV_TYPE_EXT_IND){
    ed62:	eb03 2303 	add.w	r3, r3, r3, lsl #8
    ed66:	4433      	add	r3, r6
{
    ed68:	b085      	sub	sp, #20
	if(pdu->type == PDU_ADV_TYPE_EXT_IND){
    ed6a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    ed6e:	f003 030f 	and.w	r3, r3, #15
    ed72:	2b07      	cmp	r3, #7
{
    ed74:	4604      	mov	r4, r0
	if(pdu->type == PDU_ADV_TYPE_EXT_IND){
    ed76:	f040 80ed 	bne.w	ef54 <chan_set+0x1fc>
		switch (chan) {
    ed7a:	2826      	cmp	r0, #38	; 0x26
    ed7c:	f8df 825c 	ldr.w	r8, [pc, #604]	; efdc <chan_set+0x284>
    ed80:	d02e      	beq.n	ede0 <chan_set+0x88>
    ed82:	2827      	cmp	r0, #39	; 0x27
    ed84:	f8df 9258 	ldr.w	r9, [pc, #600]	; efe0 <chan_set+0x288>
    ed88:	d034      	beq.n	edf4 <chan_set+0x9c>
    ed8a:	2825      	cmp	r0, #37	; 0x25
    ed8c:	d162      	bne.n	ee54 <chan_set+0xfc>
			stop_time_37 = k_cycle_get_32();
    ed8e:	f7f4 fa6b 	bl	3268 <_timer_cycle_get_32>
			cycles_spent_37 = stop_time_37 - start_time37;
    ed92:	4e7d      	ldr	r6, [pc, #500]	; (ef88 <chan_set+0x230>)
			stop_time_37 = k_cycle_get_32();
    ed94:	4b7d      	ldr	r3, [pc, #500]	; (ef8c <chan_set+0x234>)
			cycles_spent_37 = stop_time_37 - start_time37;
    ed96:	6837      	ldr	r7, [r6, #0]
			stop_time_37 = k_cycle_get_32();
    ed98:	6018      	str	r0, [r3, #0]
			cycles_spent_37 = stop_time_37 - start_time37;
    ed9a:	4b7d      	ldr	r3, [pc, #500]	; (ef90 <chan_set+0x238>)
    ed9c:	1bc7      	subs	r7, r0, r7
    ed9e:	601f      	str	r7, [r3, #0]
			us_spent_37 = SYS_CLOCK_HW_CYCLES_TO_NS(cycles_spent_37)/1000;
    eda0:	4b7c      	ldr	r3, [pc, #496]	; (ef94 <chan_set+0x23c>)
    eda2:	681a      	ldr	r2, [r3, #0]
    eda4:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    eda8:	fb82 2305 	smull	r2, r3, r2, r5
    edac:	fba2 0107 	umull	r0, r1, r2, r7
    edb0:	f8d9 2000 	ldr.w	r2, [r9]
    edb4:	fb07 1103 	mla	r1, r7, r3, r1
    edb8:	17d3      	asrs	r3, r2, #31
    edba:	f7f1 fa6d 	bl	298 <__aeabi_uldivmod>
    edbe:	4b76      	ldr	r3, [pc, #472]	; (ef98 <chan_set+0x240>)
    edc0:	fbb0 f0f5 	udiv	r0, r0, r5
    edc4:	6018      	str	r0, [r3, #0]
			start_time = k_cycle_get_32();
    edc6:	f7f4 fa4f 	bl	3268 <_timer_cycle_get_32>
    edca:	f8c8 0000 	str.w	r0, [r8]
			start_time37= k_cycle_get_32();
    edce:	f7f4 fa4b 	bl	3268 <_timer_cycle_get_32>
			pckt_send++;
    edd2:	4a72      	ldr	r2, [pc, #456]	; (ef9c <chan_set+0x244>)
			start_time37= k_cycle_get_32();
    edd4:	6030      	str	r0, [r6, #0]
			pckt_send++;
    edd6:	7813      	ldrb	r3, [r2, #0]
    edd8:	3301      	adds	r3, #1
    edda:	7013      	strb	r3, [r2, #0]
			radio_freq_chan_set(2);
    eddc:	2002      	movs	r0, #2
    edde:	e0ad      	b.n	ef3c <chan_set+0x1e4>
			start_time = k_cycle_get_32();
    ede0:	f7f4 fa42 	bl	3268 <_timer_cycle_get_32>
			pckt_send++;
    ede4:	4a6d      	ldr	r2, [pc, #436]	; (ef9c <chan_set+0x244>)
			start_time = k_cycle_get_32();
    ede6:	f8c8 0000 	str.w	r0, [r8]
			pckt_send++;
    edea:	7813      	ldrb	r3, [r2, #0]
    edec:	3301      	adds	r3, #1
    edee:	7013      	strb	r3, [r2, #0]
			radio_freq_chan_set(26);
    edf0:	201a      	movs	r0, #26
    edf2:	e0a3      	b.n	ef3c <chan_set+0x1e4>
			stop_time_39 = k_cycle_get_32();
    edf4:	f7f4 fa38 	bl	3268 <_timer_cycle_get_32>
    edf8:	4b69      	ldr	r3, [pc, #420]	; (efa0 <chan_set+0x248>)
    edfa:	6018      	str	r0, [r3, #0]
			Time_difference = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_39 - start_time)/1000;
    edfc:	f8d8 3000 	ldr.w	r3, [r8]
    ee00:	eba0 0e03 	sub.w	lr, r0, r3
    ee04:	4b63      	ldr	r3, [pc, #396]	; (ef94 <chan_set+0x23c>)
    ee06:	681a      	ldr	r2, [r3, #0]
    ee08:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
    ee0c:	fb82 2307 	smull	r2, r3, r2, r7
    ee10:	fbae 0102 	umull	r0, r1, lr, r2
    ee14:	f8d9 2000 	ldr.w	r2, [r9]
    ee18:	fb0e 1103 	mla	r1, lr, r3, r1
    ee1c:	17d3      	asrs	r3, r2, #31
    ee1e:	f7f1 fa3b 	bl	298 <__aeabi_uldivmod>
    ee22:	4b60      	ldr	r3, [pc, #384]	; (efa4 <chan_set+0x24c>)
    ee24:	fbb0 f0f7 	udiv	r0, r0, r7
    ee28:	6018      	str	r0, [r3, #0]
			pckt_send = 0;
    ee2a:	4b5c      	ldr	r3, [pc, #368]	; (ef9c <chan_set+0x244>)
			Time_difference = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_39 - start_time)/1000;
    ee2c:	2500      	movs	r5, #0
			pckt_send = 0;
    ee2e:	701d      	strb	r5, [r3, #0]
			start_time = k_cycle_get_32();
    ee30:	f7f4 fa1a 	bl	3268 <_timer_cycle_get_32>
			_radio.ext_advertiser.current_slot++;
    ee34:	f896 3689 	ldrb.w	r3, [r6, #1673]	; 0x689
			if(_radio.ext_advertiser.current_slot > _radio.ext_advertiser.max_skip){
    ee38:	f896 2688 	ldrb.w	r2, [r6, #1672]	; 0x688
			start_time = k_cycle_get_32();
    ee3c:	f8c8 0000 	str.w	r0, [r8]
			_radio.ext_advertiser.current_slot++;
    ee40:	3301      	adds	r3, #1
    ee42:	b2db      	uxtb	r3, r3
			if(_radio.ext_advertiser.current_slot > _radio.ext_advertiser.max_skip){
    ee44:	429a      	cmp	r2, r3
			_radio.ext_advertiser.current_slot++;
    ee46:	f886 3689 	strb.w	r3, [r6, #1673]	; 0x689
			if(_radio.ext_advertiser.current_slot > _radio.ext_advertiser.max_skip){
    ee4a:	d201      	bcs.n	ee50 <chan_set+0xf8>
			_radio.ext_advertiser.current_slot= 0;
    ee4c:	f886 5689 	strb.w	r5, [r6, #1673]	; 0x689
			radio_freq_chan_set(80);
    ee50:	2050      	movs	r0, #80	; 0x50
    ee52:	e073      	b.n	ef3c <chan_set+0x1e4>
			stop_time_aux1 = k_cycle_get_32();
    ee54:	f7f4 fa08 	bl	3268 <_timer_cycle_get_32>
    ee58:	4b53      	ldr	r3, [pc, #332]	; (efa8 <chan_set+0x250>)
    ee5a:	6018      	str	r0, [r3, #0]
    ee5c:	4b4d      	ldr	r3, [pc, #308]	; (ef94 <chan_set+0x23c>)
    ee5e:	681b      	ldr	r3, [r3, #0]
    ee60:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    ee64:	fb83 ab05 	smull	sl, fp, r3, r5
			us_spent_aux1 = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_aux1 - start_time)/1000;
    ee68:	f8d9 3000 	ldr.w	r3, [r9]
    ee6c:	4619      	mov	r1, r3
    ee6e:	17da      	asrs	r2, r3, #31
    ee70:	f8d8 3000 	ldr.w	r3, [r8]
			us_spent_5 = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_aux1 - start_time_5)/1000;
    ee74:	f8df 816c 	ldr.w	r8, [pc, #364]	; efe4 <chan_set+0x28c>
			us_spent_aux1 = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_aux1 - start_time)/1000;
    ee78:	1ac3      	subs	r3, r0, r3
			stop_time_aux1 = k_cycle_get_32();
    ee7a:	4607      	mov	r7, r0
			us_spent_aux1 = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_aux1 - start_time)/1000;
    ee7c:	e9cd 1202 	strd	r1, r2, [sp, #8]
    ee80:	fba3 010a 	umull	r0, r1, r3, sl
    ee84:	fb03 110b 	mla	r1, r3, fp, r1
    ee88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    ee8c:	f7f1 fa04 	bl	298 <__aeabi_uldivmod>
    ee90:	4b46      	ldr	r3, [pc, #280]	; (efac <chan_set+0x254>)
    ee92:	fbb0 f0f5 	udiv	r0, r0, r5
    ee96:	6018      	str	r0, [r3, #0]
			us_spent_aux = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_aux1 - start_time37)/1000;
    ee98:	4b3b      	ldr	r3, [pc, #236]	; (ef88 <chan_set+0x230>)
    ee9a:	681b      	ldr	r3, [r3, #0]
    ee9c:	1afb      	subs	r3, r7, r3
    ee9e:	fba3 010a 	umull	r0, r1, r3, sl
    eea2:	fb03 110b 	mla	r1, r3, fp, r1
    eea6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    eeaa:	f7f1 f9f5 	bl	298 <__aeabi_uldivmod>
    eeae:	4b40      	ldr	r3, [pc, #256]	; (efb0 <chan_set+0x258>)
    eeb0:	fbb0 f0f5 	udiv	r0, r0, r5
    eeb4:	6018      	str	r0, [r3, #0]
			us_spent_5 = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_aux1 - start_time_5)/1000;
    eeb6:	f8d8 3000 	ldr.w	r3, [r8]
    eeba:	1aff      	subs	r7, r7, r3
    eebc:	fba7 010a 	umull	r0, r1, r7, sl
    eec0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    eec4:	fb07 110b 	mla	r1, r7, fp, r1
    eec8:	f7f1 f9e6 	bl	298 <__aeabi_uldivmod>
    eecc:	4b39      	ldr	r3, [pc, #228]	; (efb4 <chan_set+0x25c>)
    eece:	fbb0 f0f5 	udiv	r0, r0, r5
    eed2:	6018      	str	r0, [r3, #0]
 			stop_dynamic_cal = k_cycle_get_32(); 
    eed4:	f7f4 f9c8 	bl	3268 <_timer_cycle_get_32>
    eed8:	4b37      	ldr	r3, [pc, #220]	; (efb8 <chan_set+0x260>)
			last_dynamic_cal = final_dynamic_cal;
    eeda:	4f38      	ldr	r7, [pc, #224]	; (efbc <chan_set+0x264>)
 			stop_dynamic_cal = k_cycle_get_32(); 
    eedc:	2100      	movs	r1, #0
    eede:	e9c3 0100 	strd	r0, r1, [r3]
			last_dynamic_cal = final_dynamic_cal;
    eee2:	4b37      	ldr	r3, [pc, #220]	; (efc0 <chan_set+0x268>)
    eee4:	f8d7 b000 	ldr.w	fp, [r7]
    eee8:	687a      	ldr	r2, [r7, #4]
    eeea:	f8c3 b000 	str.w	fp, [r3]
    eeee:	605a      	str	r2, [r3, #4]
			final_dynamic_cal = SYS_CLOCK_HW_CYCLES_TO_NS(stop_dynamic_cal - start_dynamic_cal)/1000;
    eef0:	4b34      	ldr	r3, [pc, #208]	; (efc4 <chan_set+0x26c>)
    eef2:	e9d3 2300 	ldrd	r2, r3, [r3]
    eef6:	1a82      	subs	r2, r0, r2
    eef8:	eb61 0303 	sbc.w	r3, r1, r3
    eefc:	4925      	ldr	r1, [pc, #148]	; (ef94 <chan_set+0x23c>)
    eefe:	6808      	ldr	r0, [r1, #0]
    ef00:	fb80 0105 	smull	r0, r1, r0, r5
    ef04:	4351      	muls	r1, r2
    ef06:	fb00 1303 	mla	r3, r0, r3, r1
    ef0a:	fba2 0100 	umull	r0, r1, r2, r0
    ef0e:	f8d9 2000 	ldr.w	r2, [r9]
    ef12:	4419      	add	r1, r3
    ef14:	17d3      	asrs	r3, r2, #31
    ef16:	f7f1 f9bf 	bl	298 <__aeabi_uldivmod>
    ef1a:	2300      	movs	r3, #0
    ef1c:	fbb0 f0f5 	udiv	r0, r0, r5
    ef20:	6038      	str	r0, [r7, #0]
			_radio.ext_advertiser.last_dynamic_cal = final_dynamic_cal-last_dynamic_cal;
    ef22:	eba0 000b 	sub.w	r0, r0, fp
			final_dynamic_cal = SYS_CLOCK_HW_CYCLES_TO_NS(stop_dynamic_cal - start_dynamic_cal)/1000;
    ef26:	607b      	str	r3, [r7, #4]
			_radio.ext_advertiser.last_dynamic_cal = final_dynamic_cal-last_dynamic_cal;
    ef28:	f8c6 06a8 	str.w	r0, [r6, #1704]	; 0x6a8
			start_time_5 = k_cycle_get_32();
    ef2c:	f7f4 f99c 	bl	3268 <_timer_cycle_get_32>
    ef30:	f8c8 0000 	str.w	r0, [r8]
			if (chan < 11) {
    ef34:	2c0a      	cmp	r4, #10
    ef36:	d809      	bhi.n	ef4c <chan_set+0x1f4>
				radio_freq_chan_set(4 + (2 * chan));
    ef38:	1ca0      	adds	r0, r4, #2
				radio_freq_chan_set(28 + (2 * (chan - 11)));
    ef3a:	0040      	lsls	r0, r0, #1
    ef3c:	f009 fc8e 	bl	1885c <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
    ef40:	4620      	mov	r0, r4
}
    ef42:	b005      	add	sp, #20
    ef44:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	radio_whiten_iv_set(chan);
    ef48:	f009 bc8e 	b.w	18868 <radio_whiten_iv_set>
			} else if (chan < 40) {
    ef4c:	2c27      	cmp	r4, #39	; 0x27
    ef4e:	d80a      	bhi.n	ef66 <chan_set+0x20e>
				radio_freq_chan_set(28 + (2 * (chan - 11)));
    ef50:	1ce0      	adds	r0, r4, #3
    ef52:	e7f2      	b.n	ef3a <chan_set+0x1e2>
		switch (chan) {
    ef54:	2826      	cmp	r0, #38	; 0x26
    ef56:	f43f af4b 	beq.w	edf0 <chan_set+0x98>
    ef5a:	2827      	cmp	r0, #39	; 0x27
    ef5c:	f43f af78 	beq.w	ee50 <chan_set+0xf8>
    ef60:	2825      	cmp	r0, #37	; 0x25
    ef62:	d1e7      	bne.n	ef34 <chan_set+0x1dc>
    ef64:	e73a      	b.n	eddc <chan_set+0x84>
				LL_ASSERT(0);
    ef66:	4b18      	ldr	r3, [pc, #96]	; (efc8 <chan_set+0x270>)
    ef68:	9301      	str	r3, [sp, #4]
    ef6a:	9300      	str	r3, [sp, #0]
    ef6c:	4a17      	ldr	r2, [pc, #92]	; (efcc <chan_set+0x274>)
    ef6e:	4b18      	ldr	r3, [pc, #96]	; (efd0 <chan_set+0x278>)
    ef70:	4918      	ldr	r1, [pc, #96]	; (efd4 <chan_set+0x27c>)
    ef72:	4819      	ldr	r0, [pc, #100]	; (efd8 <chan_set+0x280>)
    ef74:	f7f3 f98e 	bl	2294 <printk>
    ef78:	4040      	eors	r0, r0
    ef7a:	f380 8811 	msr	BASEPRI, r0
    ef7e:	f04f 0004 	mov.w	r0, #4
    ef82:	df02      	svc	2
    ef84:	20000bf0 	.word	0x20000bf0
    ef88:	20003218 	.word	0x20003218
    ef8c:	20003284 	.word	0x20003284
    ef90:	200032d4 	.word	0x200032d4
    ef94:	2000a868 	.word	0x2000a868
    ef98:	200032f0 	.word	0x200032f0
    ef9c:	200013d0 	.word	0x200013d0
    efa0:	20003288 	.word	0x20003288
    efa4:	200032d8 	.word	0x200032d8
    efa8:	200032e4 	.word	0x200032e4
    efac:	200032b0 	.word	0x200032b0
    efb0:	20003204 	.word	0x20003204
    efb4:	200032e8 	.word	0x200032e8
    efb8:	200032a8 	.word	0x200032a8
    efbc:	20001390 	.word	0x20001390
    efc0:	20001398 	.word	0x20001398
    efc4:	20003210 	.word	0x20003210
    efc8:	00023dae 	.word	0x00023dae
    efcc:	00022d76 	.word	0x00022d76
    efd0:	00025c56 	.word	0x00025c56
    efd4:	000272d8 	.word	0x000272d8
    efd8:	00023fa5 	.word	0x00023fa5
    efdc:	200032a0 	.word	0x200032a0
    efe0:	2000a864 	.word	0x2000a864
    efe4:	200032c4 	.word	0x200032c4

0000efe8 <adv_setup>:
{
    efe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (_radio.advertiser.adv_data.first !=
    efec:	4c8d      	ldr	r4, [pc, #564]	; (f224 <adv_setup+0x23c>)
    efee:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
    eff2:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    eff6:	429a      	cmp	r2, r3
    eff8:	f000 80dc 	beq.w	f1b4 <adv_setup+0x1cc>
		first = _radio.advertiser.adv_data.first + 1;
    effc:	3301      	adds	r3, #1
    effe:	b2db      	uxtb	r3, r3
			first = 0;
    f000:	2b02      	cmp	r3, #2
    f002:	bf08      	it	eq
    f004:	2300      	moveq	r3, #0
		_radio.advertiser.adv_data.first = first;
    f006:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
		upd = 1;
    f00a:	f04f 0a01 	mov.w	sl, #1
	if (_radio.advertiser.scan_data.first != _radio.
    f00e:	f894 3636 	ldrb.w	r3, [r4, #1590]	; 0x636
    f012:	f894 2637 	ldrb.w	r2, [r4, #1591]	; 0x637
    f016:	429a      	cmp	r2, r3
    f018:	d008      	beq.n	f02c <adv_setup+0x44>
		first = _radio.advertiser.scan_data.first + 1;
    f01a:	3301      	adds	r3, #1
    f01c:	b2db      	uxtb	r3, r3
			first = 0;
    f01e:	2b02      	cmp	r3, #2
    f020:	bf08      	it	eq
    f022:	2300      	moveq	r3, #0
		_radio.advertiser.scan_data.first = first;
    f024:	f884 3636 	strb.w	r3, [r4, #1590]	; 0x636
		upd = 1;
    f028:	f04f 0a01 	mov.w	sl, #1
	pdu = (void *)_radio.advertiser.adv_data.data
    f02c:	f894 722e 	ldrb.w	r7, [r4, #558]	; 0x22e
    f030:	eb07 2707 	add.w	r7, r7, r7, lsl #8
    f034:	372c      	adds	r7, #44	; 0x2c
    f036:	eb04 0907 	add.w	r9, r4, r7
	if(pdu->type == PDU_ADV_TYPE_EXT_IND){
    f03a:	5de3      	ldrb	r3, [r4, r7]
    f03c:	f003 030f 	and.w	r3, r3, #15
    f040:	2b07      	cmp	r3, #7
    f042:	d161      	bne.n	f108 <adv_setup+0x120>
			if(h->adv_addr){
    f044:	f899 3003 	ldrb.w	r3, [r9, #3]
    f048:	07dd      	lsls	r5, r3, #31
				ptr += BDADDR_SIZE;
    f04a:	bf4c      	ite	mi
    f04c:	f109 050a 	addmi.w	r5, r9, #10
		ptr = (u8_t *)h + sizeof(*h);
    f050:	f109 0504 	addpl.w	r5, r9, #4
			if(h->tgt_addr){
    f054:	079a      	lsls	r2, r3, #30
				ptr += BDADDR_SIZE;
    f056:	bf48      	it	mi
    f058:	3506      	addmi	r5, #6
			if(h->adi){
    f05a:	071e      	lsls	r6, r3, #28
				ptr += sizeof(*adi_ptr);
    f05c:	bf48      	it	mi
    f05e:	3502      	addmi	r5, #2
			if(h->aux_ptr){
    f060:	06da      	lsls	r2, r3, #27
    f062:	d54b      	bpl.n	f0fc <adv_setup+0x114>
					_radio.ext_advertiser.slot = ( _radio.ext_advertiser.prim_interval + _radio.ext_advertiser.ticker_offset) * _radio.ext_advertiser.current_slot;
    f064:	f8d4 26a4 	ldr.w	r2, [r4, #1700]	; 0x6a4
    f068:	f8d4 3680 	ldr.w	r3, [r4, #1664]	; 0x680
				if((_radio.advertiser.chan_map & 0x07)== 0x07) {
    f06c:	f894 6029 	ldrb.w	r6, [r4, #41]	; 0x29
					_radio.ext_advertiser.slot = ( _radio.ext_advertiser.prim_interval + _radio.ext_advertiser.ticker_offset) * _radio.ext_advertiser.current_slot;
    f070:	4413      	add	r3, r2
    f072:	f894 2689 	ldrb.w	r2, [r4, #1673]	; 0x689
				if((_radio.advertiser.chan_map & 0x07)== 0x07) {
    f076:	f3c6 1602 	ubfx	r6, r6, #4, #3
					_radio.ext_advertiser.slot = ( _radio.ext_advertiser.prim_interval + _radio.ext_advertiser.ticker_offset) * _radio.ext_advertiser.current_slot;
    f07a:	435a      	muls	r2, r3
				if((_radio.advertiser.chan_map & 0x07)== 0x07) {
    f07c:	2e07      	cmp	r6, #7
					_radio.ext_advertiser.slot = ( _radio.ext_advertiser.prim_interval + _radio.ext_advertiser.ticker_offset) * _radio.ext_advertiser.current_slot;
    f07e:	f8c4 268c 	str.w	r2, [r4, #1676]	; 0x68c
				if((_radio.advertiser.chan_map & 0x07)== 0x07) {
    f082:	f040 80a7 	bne.w	f1d4 <adv_setup+0x1ec>
					if((_radio.advertiser.chan_map_current & 0x07) == 0x07){
    f086:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    f08a:	f003 0307 	and.w	r3, r3, #7
    f08e:	2b07      	cmp	r3, #7
    f090:	f040 8093 	bne.w	f1ba <adv_setup+0x1d2>
						offset = (_radio.ext_advertiser.chan_37 -  _radio.ext_advertiser.slot );
    f094:	f8d4 0690 	ldr.w	r0, [r4, #1680]	; 0x690
    f098:	1a82      	subs	r2, r0, r2
    f09a:	4610      	mov	r0, r2
    f09c:	2100      	movs	r1, #0
						_radio.ext_advertiser.chan_offset = offset;
    f09e:	f8c4 269c 	str.w	r2, [r4, #1692]	; 0x69c
				if(offset > 245700){
    f0a2:	4a61      	ldr	r2, [pc, #388]	; (f228 <adv_setup+0x240>)
    f0a4:	78ae      	ldrb	r6, [r5, #2]
    f0a6:	f895 8000 	ldrb.w	r8, [r5]
    f0aa:	2300      	movs	r3, #0
    f0ac:	428b      	cmp	r3, r1
    f0ae:	bf08      	it	eq
    f0b0:	4282      	cmpeq	r2, r0
    f0b2:	f080 80a0 	bcs.w	f1f6 <adv_setup+0x20e>
					ap->offs = offset/1200;
    f0b6:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
    f0ba:	2300      	movs	r3, #0
    f0bc:	f7f1 f8ec 	bl	298 <__aeabi_uldivmod>
    f0c0:	f026 061f 	bic.w	r6, r6, #31
    f0c4:	7068      	strb	r0, [r5, #1]
    f0c6:	f3c0 2004 	ubfx	r0, r0, #8, #5
    f0ca:	4330      	orrs	r0, r6
    f0cc:	70a8      	strb	r0, [r5, #2]
					ap->offs_units = EXT_ADV_AUX_PTR_OFFS_UNITS_300;
    f0ce:	f048 0880 	orr.w	r8, r8, #128	; 0x80
				if(_radio.advertiser.ext_adv == 1){
    f0d2:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
					ap->offs_units = EXT_ADV_AUX_PTR_OFFS_UNITS_30;
    f0d6:	f885 8000 	strb.w	r8, [r5]
				if(_radio.advertiser.ext_adv == 1){
    f0da:	07db      	lsls	r3, r3, #31
    f0dc:	d508      	bpl.n	f0f0 <adv_setup+0x108>
					_radio.ext_advertiser.aux_pckt_chan++;
    f0de:	f894 36a0 	ldrb.w	r3, [r4, #1696]	; 0x6a0
    f0e2:	3301      	adds	r3, #1
    f0e4:	b2db      	uxtb	r3, r3
					if(_radio.ext_advertiser.aux_pckt_chan == 0x25){ //37 channel
    f0e6:	2b25      	cmp	r3, #37	; 0x25
						_radio.ext_advertiser.aux_pckt_chan = 0;
    f0e8:	bf08      	it	eq
    f0ea:	2300      	moveq	r3, #0
    f0ec:	f884 36a0 	strb.w	r3, [r4, #1696]	; 0x6a0
				ap->chan_idx = _radio.ext_advertiser.aux_pckt_chan;	
    f0f0:	782b      	ldrb	r3, [r5, #0]
    f0f2:	f894 26a0 	ldrb.w	r2, [r4, #1696]	; 0x6a0
    f0f6:	f362 0305 	bfi	r3, r2, #0, #6
    f0fa:	702b      	strb	r3, [r5, #0]
		_radio.advertiser.ext_adv = 0;
    f0fc:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    f100:	f36f 0300 	bfc	r3, #0, #1
    f104:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	if (upd) {
    f108:	f1ba 0f00 	cmp.w	sl, #0
    f10c:	d00b      	beq.n	f126 <adv_setup+0x13e>
		struct pdu_adv *scan_pdu = (void *)
    f10e:	f894 0636 	ldrb.w	r0, [r4, #1590]	; 0x636
    f112:	eb00 2000 	add.w	r0, r0, r0, lsl #8
    f116:	4420      	add	r0, r4
		memcpy(&scan_pdu->scan_rsp.addr[0],
    f118:	2206      	movs	r2, #6
    f11a:	f109 0102 	add.w	r1, r9, #2
    f11e:	f200 4036 	addw	r0, r0, #1078	; 0x436
    f122:	f7f1 fb36 	bl	792 <memcpy>
		radio_pkt_tx_set(pdu);
    f126:	4648      	mov	r0, r9
    f128:	f009 fc00 	bl	1892c <radio_pkt_tx_set>
		if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
    f12c:	5de3      	ldrb	r3, [r4, r7]
    f12e:	f003 030f 	and.w	r3, r3, #15
    f132:	2b02      	cmp	r3, #2
    f134:	d06d      	beq.n	f212 <adv_setup+0x22a>
    f136:	2b07      	cmp	r3, #7
    f138:	d06b      	beq.n	f212 <adv_setup+0x22a>
			_radio.state = STATE_TX;
    f13a:	2302      	movs	r3, #2
			radio_tmr_tifs_set(RADIO_TIFS);
    f13c:	2096      	movs	r0, #150	; 0x96
			_radio.state = STATE_TX;
    f13e:	7523      	strb	r3, [r4, #20]
			radio_tmr_tifs_set(RADIO_TIFS);
    f140:	f009 fd1a 	bl	18b78 <radio_tmr_tifs_set>
			radio_switch_complete_and_rx(0);
    f144:	2000      	movs	r0, #0
    f146:	f009 fc79 	bl	18a3c <radio_switch_complete_and_rx>
		bitmap = _radio.advertiser.chan_map_current;
    f14a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    f14e:	f3c3 0202 	ubfx	r2, r3, #0, #3
    f152:	b2d3      	uxtb	r3, r2
    f154:	4619      	mov	r1, r3
		while ((bitmap & 0x01) == 0) {
    f156:	2000      	movs	r0, #0
    f158:	07ce      	lsls	r6, r1, #31
    f15a:	f100 0501 	add.w	r5, r0, #1
    f15e:	d55d      	bpl.n	f21c <adv_setup+0x234>
			(_radio.advertiser.chan_map_current - 1);
    f160:	3b01      	subs	r3, #1
			_radio.advertiser.chan_map_current &=
    f162:	4013      	ands	r3, r2
    f164:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
		count++;
    f168:	4d30      	ldr	r5, [pc, #192]	; (f22c <adv_setup+0x244>)
			_radio.advertiser.chan_map_current &=
    f16a:	f363 0202 	bfi	r2, r3, #0, #3
    f16e:	4b30      	ldr	r3, [pc, #192]	; (f230 <adv_setup+0x248>)
    f170:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
		if(! _radio.advertiser.chan_map_current){	
    f174:	f012 0f07 	tst.w	r2, #7
			chan_case ++;
    f178:	bf08      	it	eq
    f17a:	781a      	ldrbeq	r2, [r3, #0]
		count++;
    f17c:	7829      	ldrb	r1, [r5, #0]
			chan_case ++;
    f17e:	bf0c      	ite	eq
    f180:	3201      	addeq	r2, #1
*/			chan_case = 0 ;
    f182:	2200      	movne	r2, #0
    f184:	701a      	strb	r2, [r3, #0]
		_radio.ext_advertiser.event++;
    f186:	f894 368a 	ldrb.w	r3, [r4, #1674]	; 0x68a
		if(_radio.ext_advertiser.event > _radio.ext_advertiser.max_skip){
    f18a:	f894 2688 	ldrb.w	r2, [r4, #1672]	; 0x688
		_radio.ext_advertiser.event++;
    f18e:	3301      	adds	r3, #1
    f190:	b2db      	uxtb	r3, r3
		if(_radio.ext_advertiser.event > _radio.ext_advertiser.max_skip){
    f192:	429a      	cmp	r2, r3
		count++;
    f194:	f101 0101 	add.w	r1, r1, #1
		_radio.ext_advertiser.event++;
    f198:	f884 368a 	strb.w	r3, [r4, #1674]	; 0x68a
		count++;
    f19c:	7029      	strb	r1, [r5, #0]
			_radio.ext_advertiser.event = 0;
    f19e:	bf38      	it	cc
    f1a0:	2300      	movcc	r3, #0
		chan_set(37 + chan);
    f1a2:	b2c0      	uxtb	r0, r0
			_radio.ext_advertiser.event = 0;
    f1a4:	bf38      	it	cc
    f1a6:	f884 368a 	strbcc.w	r3, [r4, #1674]	; 0x68a
		chan_set(37 + chan);
    f1aa:	3025      	adds	r0, #37	; 0x25
}
    f1ac:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		chan_set(37 + chan);
    f1b0:	f7ff bdd2 	b.w	ed58 <chan_set>
	u8_t upd = 0;
    f1b4:	f04f 0a00 	mov.w	sl, #0
    f1b8:	e729      	b.n	f00e <adv_setup+0x26>
					}else if((_radio.advertiser.chan_map_current & 0x07) == 0x06){
    f1ba:	2b06      	cmp	r3, #6
    f1bc:	d104      	bne.n	f1c8 <adv_setup+0x1e0>
						offset = (_radio.ext_advertiser.chan_38 - _radio.ext_advertiser.slot );
    f1be:	f8d4 0694 	ldr.w	r0, [r4, #1684]	; 0x694
						offset = (_radio.ext_advertiser.chan_39 - _radio.ext_advertiser.slot );
    f1c2:	1a80      	subs	r0, r0, r2
					offset = (_radio.ext_advertiser.chan_37 -  _radio.ext_advertiser.slot );
    f1c4:	2100      	movs	r1, #0
    f1c6:	e76c      	b.n	f0a2 <adv_setup+0xba>
					}else if((_radio.advertiser.chan_map_current & 0x07) == 0x04){
    f1c8:	2b04      	cmp	r3, #4
    f1ca:	f47f af6a 	bne.w	f0a2 <adv_setup+0xba>
						offset = (_radio.ext_advertiser.chan_39 - _radio.ext_advertiser.slot );
    f1ce:	f8d4 0698 	ldr.w	r0, [r4, #1688]	; 0x698
    f1d2:	e7f6      	b.n	f1c2 <adv_setup+0x1da>
					_radio.ext_advertiser.slot = ( _radio.ext_advertiser.prim_interval + _radio.ext_advertiser.ticker_offset ) * _radio.ext_advertiser.event;
    f1d4:	f894 668a 	ldrb.w	r6, [r4, #1674]	; 0x68a
    f1d8:	4373      	muls	r3, r6
    f1da:	f8c4 368c 	str.w	r3, [r4, #1676]	; 0x68c
					if(_radio.ext_advertiser.event == 0){
    f1de:	b926      	cbnz	r6, f1ea <adv_setup+0x202>
						start_dynamic_cal = k_cycle_get_32(); 
    f1e0:	f7f4 f842 	bl	3268 <_timer_cycle_get_32>
    f1e4:	4b13      	ldr	r3, [pc, #76]	; (f234 <adv_setup+0x24c>)
    f1e6:	e883 0041 	stmia.w	r3, {r0, r6}
					offset = (_radio.ext_advertiser.chan_37 -  _radio.ext_advertiser.slot );
    f1ea:	f8d4 0690 	ldr.w	r0, [r4, #1680]	; 0x690
    f1ee:	f8d4 368c 	ldr.w	r3, [r4, #1676]	; 0x68c
    f1f2:	1ac0      	subs	r0, r0, r3
    f1f4:	e7e6      	b.n	f1c4 <adv_setup+0x1dc>
					ap->offs = offset /30;
    f1f6:	221e      	movs	r2, #30
    f1f8:	2300      	movs	r3, #0
    f1fa:	f7f1 f84d 	bl	298 <__aeabi_uldivmod>
    f1fe:	f026 061f 	bic.w	r6, r6, #31
    f202:	7068      	strb	r0, [r5, #1]
    f204:	f3c0 2004 	ubfx	r0, r0, #8, #5
    f208:	4306      	orrs	r6, r0
    f20a:	70ae      	strb	r6, [r5, #2]
					ap->offs_units = EXT_ADV_AUX_PTR_OFFS_UNITS_30;
    f20c:	f36f 18c7 	bfc	r8, #7, #1
    f210:	e75f      	b.n	f0d2 <adv_setup+0xea>
			_radio.state = STATE_CLOSE;
    f212:	2303      	movs	r3, #3
    f214:	7523      	strb	r3, [r4, #20]
			radio_switch_complete_and_disable();
    f216:	f009 fc27 	bl	18a68 <radio_switch_complete_and_disable>
    f21a:	e796      	b.n	f14a <adv_setup+0x162>
			bitmap >>= 1;
    f21c:	0849      	lsrs	r1, r1, #1
    f21e:	4628      	mov	r0, r5
    f220:	e79a      	b.n	f158 <adv_setup+0x170>
    f222:	bf00      	nop
    f224:	20000bf0 	.word	0x20000bf0
    f228:	0003bfc4 	.word	0x0003bfc4
    f22c:	2000138a 	.word	0x2000138a
    f230:	20001389 	.word	0x20001389
    f234:	20003210 	.word	0x20003210

0000f238 <sched_free_win_offset_calc>:
{
    f238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f23c:	b08f      	sub	sp, #60	; 0x3c
    f23e:	4692      	mov	sl, r2
    f240:	9304      	str	r3, [sp, #16]
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
    f242:	6803      	ldr	r3, [r0, #0]
{
    f244:	9109      	str	r1, [sp, #36]	; 0x24
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
    f246:	2b00      	cmp	r3, #0
{
    f248:	4680      	mov	r8, r0
    f24a:	6842      	ldr	r2, [r0, #4]
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
    f24c:	da3a      	bge.n	f2c4 <sched_free_win_offset_calc+0x8c>
		u32_t ticks_prepare_to_start =
    f24e:	6881      	ldr	r1, [r0, #8]
		ticks_slot_abs = conn_curr->hdr.ticks_xtal_to_start &
    f250:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
		ticks_prepare_reduced = ticks_slot_abs - ticks_prepare_to_start;
    f254:	4291      	cmp	r1, r2
    f256:	bf2c      	ite	cs
    f258:	1a5a      	subcs	r2, r3, r1
    f25a:	1a9a      	subcc	r2, r3, r2
	u32_t ticks_prepare_reduced = 0;
    f25c:	9205      	str	r2, [sp, #20]
	ticks_slot_abs += conn_curr->hdr.ticks_slot +
    f25e:	f8d8 200c 	ldr.w	r2, [r8, #12]
    f262:	323d      	adds	r2, #61	; 0x3d
		ticks_anchor_prev = offset_index = _win_offset = 0;
    f264:	2400      	movs	r4, #0
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    f266:	27ff      	movs	r7, #255	; 0xff
	ticks_slot_abs += conn_curr->hdr.ticks_slot +
    f268:	18d3      	adds	r3, r2, r3
    f26a:	9307      	str	r3, [sp, #28]
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    f26c:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
		ticks_anchor_prev = offset_index = _win_offset = 0;
    f270:	f8ad 402a 	strh.w	r4, [sp, #42]	; 0x2a
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
    f274:	940c      	str	r4, [sp, #48]	; 0x30
    f276:	940b      	str	r4, [sp, #44]	; 0x2c
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    f278:	9706      	str	r7, [sp, #24]
		ticks_anchor_prev = offset_index = _win_offset = 0;
    f27a:	46a1      	mov	r9, r4
	ticks_slot_abs_prev = 0;
    f27c:	46a3      	mov	fp, r4
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
    f27e:	4625      	mov	r5, r4
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    f280:	2302      	movs	r3, #2
    f282:	930d      	str	r3, [sp, #52]	; 0x34
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    f284:	ab0d      	add	r3, sp, #52	; 0x34
    f286:	9302      	str	r3, [sp, #8]
    f288:	4b81      	ldr	r3, [pc, #516]	; (f490 <sched_free_win_offset_calc+0x258>)
    f28a:	9301      	str	r3, [sp, #4]
    f28c:	ab0b      	add	r3, sp, #44	; 0x2c
    f28e:	9300      	str	r3, [sp, #0]
    f290:	f10d 0229 	add.w	r2, sp, #41	; 0x29
    f294:	ab0c      	add	r3, sp, #48	; 0x30
    f296:	2101      	movs	r1, #1
    f298:	2000      	movs	r0, #0
    f29a:	f7fd fa03 	bl	c6a4 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    f29e:	2802      	cmp	r0, #2
    f2a0:	d019      	beq.n	f2d6 <sched_free_win_offset_calc+0x9e>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    f2a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f2a4:	b1db      	cbz	r3, f2de <sched_free_win_offset_calc+0xa6>
    f2a6:	4b7b      	ldr	r3, [pc, #492]	; (f494 <sched_free_win_offset_calc+0x25c>)
    f2a8:	9301      	str	r3, [sp, #4]
    f2aa:	9300      	str	r3, [sp, #0]
    f2ac:	4a7a      	ldr	r2, [pc, #488]	; (f498 <sched_free_win_offset_calc+0x260>)
    f2ae:	4b7b      	ldr	r3, [pc, #492]	; (f49c <sched_free_win_offset_calc+0x264>)
    f2b0:	497b      	ldr	r1, [pc, #492]	; (f4a0 <sched_free_win_offset_calc+0x268>)
    f2b2:	487c      	ldr	r0, [pc, #496]	; (f4a4 <sched_free_win_offset_calc+0x26c>)
			LL_ASSERT(0);
    f2b4:	f7f2 ffee 	bl	2294 <printk>
    f2b8:	4040      	eors	r0, r0
    f2ba:	f380 8811 	msr	BASEPRI, r0
    f2be:	f04f 0004 	mov.w	r0, #4
    f2c2:	df02      	svc	2
		u32_t ticks_prepare_to_start =
    f2c4:	4293      	cmp	r3, r2
    f2c6:	bf38      	it	cc
    f2c8:	4613      	movcc	r3, r2
	u32_t ticks_prepare_reduced = 0;
    f2ca:	2200      	movs	r2, #0
    f2cc:	e7c6      	b.n	f25c <sched_free_win_offset_calc+0x24>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    f2ce:	2101      	movs	r1, #1
    f2d0:	2000      	movs	r0, #0
    f2d2:	f7fd fa65 	bl	c7a0 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    f2d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f2d8:	2b02      	cmp	r3, #2
    f2da:	d0f8      	beq.n	f2ce <sched_free_win_offset_calc+0x96>
    f2dc:	e7e1      	b.n	f2a2 <sched_free_win_offset_calc+0x6a>
		if (ticker_id == 0xff) {
    f2de:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
    f2e2:	2aff      	cmp	r2, #255	; 0xff
    f2e4:	d065      	beq.n	f3b2 <sched_free_win_offset_calc+0x17a>
		if ((ticker_id_prev != 0xff) &&
    f2e6:	2fff      	cmp	r7, #255	; 0xff
    f2e8:	d00a      	beq.n	f300 <sched_free_win_offset_calc+0xc8>
    f2ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f2ec:	4599      	cmp	r9, r3
    f2ee:	d007      	beq.n	f300 <sched_free_win_offset_calc+0xc8>
			LL_ASSERT(0);
    f2f0:	4b68      	ldr	r3, [pc, #416]	; (f494 <sched_free_win_offset_calc+0x25c>)
    f2f2:	9301      	str	r3, [sp, #4]
    f2f4:	9300      	str	r3, [sp, #0]
    f2f6:	4a68      	ldr	r2, [pc, #416]	; (f498 <sched_free_win_offset_calc+0x260>)
    f2f8:	4b68      	ldr	r3, [pc, #416]	; (f49c <sched_free_win_offset_calc+0x264>)
    f2fa:	4969      	ldr	r1, [pc, #420]	; (f4a0 <sched_free_win_offset_calc+0x268>)
    f2fc:	486a      	ldr	r0, [pc, #424]	; (f4a8 <sched_free_win_offset_calc+0x270>)
    f2fe:	e7d9      	b.n	f2b4 <sched_free_win_offset_calc+0x7c>
		if (ticker_id <= RADIO_TICKER_ID_ADV ||
    f300:	2a05      	cmp	r2, #5
    f302:	d951      	bls.n	f3a8 <sched_free_win_offset_calc+0x170>
				  _radio.connection_count)) {
    f304:	4869      	ldr	r0, [pc, #420]	; (f4ac <sched_free_win_offset_calc+0x274>)
    f306:	f890 3718 	ldrb.w	r3, [r0, #1816]	; 0x718
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    f30a:	3307      	adds	r3, #7
		if (ticker_id <= RADIO_TICKER_ID_ADV ||
    f30c:	429a      	cmp	r2, r3
    f30e:	da4b      	bge.n	f3a8 <sched_free_win_offset_calc+0x170>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION) {
    f310:	2a06      	cmp	r2, #6
    f312:	f000 8092 	beq.w	f43a <sched_free_win_offset_calc+0x202>
		if (ticker_id_other != 0xFF) {
    f316:	9b06      	ldr	r3, [sp, #24]
    f318:	2bff      	cmp	r3, #255	; 0xff
    f31a:	d14a      	bne.n	f3b2 <sched_free_win_offset_calc+0x17a>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    f31c:	3a07      	subs	r2, #7
    f31e:	b292      	uxth	r2, r2
    f320:	f44f 71aa 	mov.w	r1, #340	; 0x154
    f324:	f8d0 0710 	ldr.w	r0, [r0, #1808]	; 0x710
    f328:	f7fc fa8e 	bl	b848 <mem_get>
		if ((conn != conn_curr) && (is_select || !conn->role)) {
    f32c:	4580      	cmp	r8, r0
    f32e:	d03b      	beq.n	f3a8 <sched_free_win_offset_calc+0x170>
    f330:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f332:	b91b      	cbnz	r3, f33c <sched_free_win_offset_calc+0x104>
    f334:	f990 301d 	ldrsb.w	r3, [r0, #29]
    f338:	2b00      	cmp	r3, #0
    f33a:	db35      	blt.n	f3a8 <sched_free_win_offset_calc+0x170>
			u32_t ticks_to_expire_normal =
    f33c:	9b05      	ldr	r3, [sp, #20]
    f33e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    f340:	6841      	ldr	r1, [r0, #4]
    f342:	441e      	add	r6, r3
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    f344:	6803      	ldr	r3, [r0, #0]
    f346:	2b00      	cmp	r3, #0
    f348:	da4e      	bge.n	f3e8 <sched_free_win_offset_calc+0x1b0>
				u32_t ticks_prepare_to_start =
    f34a:	6882      	ldr	r2, [r0, #8]
				ticks_slot_abs_curr =
    f34c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    f350:	428a      	cmp	r2, r1
    f352:	bf2c      	ite	cs
    f354:	18b6      	addcs	r6, r6, r2
    f356:	1876      	addcc	r6, r6, r1
				ticks_to_expire_normal -=
    f358:	1af6      	subs	r6, r6, r3
			ticks_slot_abs_curr +=
    f35a:	68c2      	ldr	r2, [r0, #12]
    f35c:	f102 093d 	add.w	r9, r2, #61	; 0x3d
    f360:	444b      	add	r3, r9
    f362:	9308      	str	r3, [sp, #32]
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
    f364:	f8da 3000 	ldr.w	r3, [sl]
    f368:	429e      	cmp	r6, r3
    f36a:	d916      	bls.n	f39a <sched_free_win_offset_calc+0x162>
    f36c:	429d      	cmp	r5, r3
    f36e:	bf38      	it	cc
    f370:	461d      	movcc	r5, r3
					(ticks_slot_abs_prev +
    f372:	9b07      	ldr	r3, [sp, #28]
    f374:	eb0b 0703 	add.w	r7, fp, r3
				while ((offset_index < *offset_max) &&
    f378:	9b18      	ldr	r3, [sp, #96]	; 0x60
    f37a:	781b      	ldrb	r3, [r3, #0]
    f37c:	42a3      	cmp	r3, r4
    f37e:	d905      	bls.n	f38c <sched_free_win_offset_calc+0x154>
				       (ticker_ticks_diff_get(
    f380:	4629      	mov	r1, r5
    f382:	4630      	mov	r0, r6
    f384:	f7fd fa24 	bl	c7d0 <ticker_ticks_diff_get>
				while ((offset_index < *offset_max) &&
    f388:	42b8      	cmp	r0, r7
    f38a:	d231      	bcs.n	f3f0 <sched_free_win_offset_calc+0x1b8>
				if (_win_offset >= conn_interval) {
    f38c:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
    f390:	9a04      	ldr	r2, [sp, #16]
				*ticks_to_offset_next = ticks_to_expire_prev;
    f392:	f8ca 5000 	str.w	r5, [sl]
				if (_win_offset >= conn_interval) {
    f396:	4293      	cmp	r3, r2
    f398:	d20b      	bcs.n	f3b2 <sched_free_win_offset_calc+0x17a>
			ticks_anchor_prev = ticks_anchor;
    f39a:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
			ticker_id_prev = ticker_id;
    f39e:	f89d 7029 	ldrb.w	r7, [sp, #41]	; 0x29
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    f3a2:	f8dd b020 	ldr.w	fp, [sp, #32]
			ticker_id_prev = ticker_id;
    f3a6:	4635      	mov	r5, r6
	} while (offset_index < *offset_max);
    f3a8:	9b18      	ldr	r3, [sp, #96]	; 0x60
    f3aa:	781b      	ldrb	r3, [r3, #0]
    f3ac:	42a3      	cmp	r3, r4
    f3ae:	f63f af67 	bhi.w	f280 <sched_free_win_offset_calc+0x48>
	if (ticker_id == 0xFF) {
    f3b2:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
    f3b6:	2bff      	cmp	r3, #255	; 0xff
    f3b8:	d111      	bne.n	f3de <sched_free_win_offset_calc+0x1a6>
    f3ba:	f8da 3000 	ldr.w	r3, [sl]
			_win_offset = HAL_TICKER_TICKS_TO_US(
    f3be:	f8df 80f0 	ldr.w	r8, [pc, #240]	; f4b0 <sched_free_win_offset_calc+0x278>
    f3c2:	a731      	add	r7, pc, #196	; (adr r7, f488 <sched_free_win_offset_calc+0x250>)
    f3c4:	e9d7 6700 	ldrd	r6, r7, [r7]
    f3c8:	429d      	cmp	r5, r3
    f3ca:	bf38      	it	cc
    f3cc:	461d      	movcc	r5, r3
    f3ce:	f04f 0907 	mov.w	r9, #7
		while (offset_index < *offset_max) {
    f3d2:	9b18      	ldr	r3, [sp, #96]	; 0x60
    f3d4:	781b      	ldrb	r3, [r3, #0]
    f3d6:	42a3      	cmp	r3, r4
    f3d8:	d831      	bhi.n	f43e <sched_free_win_offset_calc+0x206>
		*ticks_to_offset_next = ticks_to_expire_prev;
    f3da:	f8ca 5000 	str.w	r5, [sl]
	*offset_max = offset_index;
    f3de:	9b18      	ldr	r3, [sp, #96]	; 0x60
    f3e0:	701c      	strb	r4, [r3, #0]
}
    f3e2:	b00f      	add	sp, #60	; 0x3c
    f3e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				u32_t ticks_prepare_to_start =
    f3e8:	428b      	cmp	r3, r1
    f3ea:	bf38      	it	cc
    f3ec:	460b      	movcc	r3, r1
    f3ee:	e7b4      	b.n	f35a <sched_free_win_offset_calc+0x122>
					_win_offset = HAL_TICKER_TICKS_TO_US(
    f3f0:	4a2f      	ldr	r2, [pc, #188]	; (f4b0 <sched_free_win_offset_calc+0x278>)
    f3f2:	eb05 030b 	add.w	r3, r5, fp
    f3f6:	fba3 0102 	umull	r0, r1, r3, r2
    f3fa:	2207      	movs	r2, #7
    f3fc:	fb02 1103 	mla	r1, r2, r3, r1
    f400:	a321      	add	r3, pc, #132	; (adr r3, f488 <sched_free_win_offset_calc+0x250>)
    f402:	e9d3 2300 	ldrd	r2, r3, [r3]
    f406:	f7f0 ff47 	bl	298 <__aeabi_uldivmod>
						ticks_slot_abs_prev) / 1250;
    f40a:	f240 43e2 	movw	r3, #1250	; 0x4e2
    f40e:	fbb0 f0f3 	udiv	r0, r0, r3
					if (_win_offset >= conn_interval) {
    f412:	9b04      	ldr	r3, [sp, #16]
					_win_offset = HAL_TICKER_TICKS_TO_US(
    f414:	b280      	uxth	r0, r0
					if (_win_offset >= conn_interval) {
    f416:	4298      	cmp	r0, r3
					_win_offset = HAL_TICKER_TICKS_TO_US(
    f418:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
					if (_win_offset >= conn_interval) {
    f41c:	d20b      	bcs.n	f436 <sched_free_win_offset_calc+0x1fe>
					memcpy(win_offset +
    f41e:	9b19      	ldr	r3, [sp, #100]	; 0x64
    f420:	2202      	movs	r2, #2
    f422:	eb03 0044 	add.w	r0, r3, r4, lsl #1
    f426:	f10d 012a 	add.w	r1, sp, #42	; 0x2a
					offset_index++;
    f42a:	3401      	adds	r4, #1
					memcpy(win_offset +
    f42c:	f7f1 f9b1 	bl	792 <memcpy>
					offset_index++;
    f430:	b2e4      	uxtb	r4, r4
					ticks_to_expire_prev +=
    f432:	3528      	adds	r5, #40	; 0x28
    f434:	e7a0      	b.n	f378 <sched_free_win_offset_calc+0x140>
						ticks_to_expire_prev = 0;
    f436:	2500      	movs	r5, #0
    f438:	e7a8      	b.n	f38c <sched_free_win_offset_calc+0x154>
    f43a:	9206      	str	r2, [sp, #24]
    f43c:	e7b4      	b.n	f3a8 <sched_free_win_offset_calc+0x170>
			_win_offset = HAL_TICKER_TICKS_TO_US(
    f43e:	eb05 030b 	add.w	r3, r5, fp
    f442:	fba3 0108 	umull	r0, r1, r3, r8
    f446:	fb09 1103 	mla	r1, r9, r3, r1
    f44a:	4632      	mov	r2, r6
    f44c:	463b      	mov	r3, r7
    f44e:	f7f0 ff23 	bl	298 <__aeabi_uldivmod>
					ticks_slot_abs_prev) / 1250;
    f452:	f240 43e2 	movw	r3, #1250	; 0x4e2
    f456:	fbb0 f0f3 	udiv	r0, r0, r3
			if (_win_offset >= conn_interval) {
    f45a:	9b04      	ldr	r3, [sp, #16]
			_win_offset = HAL_TICKER_TICKS_TO_US(
    f45c:	b280      	uxth	r0, r0
			if (_win_offset >= conn_interval) {
    f45e:	4283      	cmp	r3, r0
			_win_offset = HAL_TICKER_TICKS_TO_US(
    f460:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
			if (_win_offset >= conn_interval) {
    f464:	d90b      	bls.n	f47e <sched_free_win_offset_calc+0x246>
			memcpy(win_offset + (sizeof(u16_t) * offset_index),
    f466:	9b19      	ldr	r3, [sp, #100]	; 0x64
    f468:	2202      	movs	r2, #2
    f46a:	eb03 0044 	add.w	r0, r3, r4, lsl #1
    f46e:	f10d 012a 	add.w	r1, sp, #42	; 0x2a
			offset_index++;
    f472:	3401      	adds	r4, #1
			memcpy(win_offset + (sizeof(u16_t) * offset_index),
    f474:	f7f1 f98d 	bl	792 <memcpy>
			offset_index++;
    f478:	b2e4      	uxtb	r4, r4
			ticks_to_expire_prev += HAL_TICKER_US_TO_TICKS(1250);
    f47a:	3528      	adds	r5, #40	; 0x28
    f47c:	e7a9      	b.n	f3d2 <sched_free_win_offset_calc+0x19a>
				ticks_to_expire_prev = 0;
    f47e:	2500      	movs	r5, #0
    f480:	e7ab      	b.n	f3da <sched_free_win_offset_calc+0x1a2>
    f482:	bf00      	nop
    f484:	f3af 8000 	nop.w
    f488:	3b9aca00 	.word	0x3b9aca00
    f48c:	00000000 	.word	0x00000000
    f490:	0000e56d 	.word	0x0000e56d
    f494:	00023dae 	.word	0x00023dae
    f498:	00022d76 	.word	0x00022d76
    f49c:	00025c09 	.word	0x00025c09
    f4a0:	000272d8 	.word	0x000272d8
    f4a4:	00026a61 	.word	0x00026a61
    f4a8:	00023fa5 	.word	0x00023fa5
    f4ac:	20000bf0 	.word	0x20000bf0
    f4b0:	1afd498d 	.word	0x1afd498d

0000f4b4 <mayfly_sched_free_win_offset_calc>:
{
    f4b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	u32_t ticks_to_offset_default = 0;
    f4b6:	2300      	movs	r3, #0
    f4b8:	9303      	str	r3, [sp, #12]
	u8_t offset_max = 6;
    f4ba:	2306      	movs	r3, #6
    f4bc:	f88d 300b 	strb.w	r3, [sp, #11]
	if (conn->role) {
    f4c0:	f990 301d 	ldrsb.w	r3, [r0, #29]
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    f4c4:	f8d0 10dc 	ldr.w	r1, [r0, #220]	; 0xdc
	if (conn->role) {
    f4c8:	2b00      	cmp	r3, #0
		conn->llcp_conn_param.ticks_to_offset_next =
    f4ca:	bfbe      	ittt	lt
    f4cc:	4602      	movlt	r2, r0
    f4ce:	6f03      	ldrlt	r3, [r0, #112]	; 0x70
    f4d0:	f842 3fe4 	strlt.w	r3, [r2, #228]!
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    f4d4:	9101      	str	r1, [sp, #4]
    f4d6:	f10d 010b 	add.w	r1, sp, #11
    f4da:	9100      	str	r1, [sp, #0]
	ticks_to_offset_next = &ticks_to_offset_default;
    f4dc:	bfa8      	it	ge
    f4de:	aa03      	addge	r2, sp, #12
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    f4e0:	f8b0 30c4 	ldrh.w	r3, [r0, #196]	; 0xc4
    f4e4:	2100      	movs	r1, #0
    f4e6:	f7ff fea7 	bl	f238 <sched_free_win_offset_calc>
}
    f4ea:	b005      	add	sp, #20
    f4ec:	f85d fb04 	ldr.w	pc, [sp], #4

0000f4f0 <mayfly_sched_win_offset_select>:
{
    f4f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    f4f4:	f8b0 20ce 	ldrh.w	r2, [r0, #206]	; 0xce
{
    f4f8:	b089      	sub	sp, #36	; 0x24
    f4fa:	4604      	mov	r4, r0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    f4fc:	4840      	ldr	r0, [pc, #256]	; (f600 <mayfly_sched_win_offset_select+0x110>)
	u8_t offset_m_max = OFFSET_M_MAX;
    f4fe:	2306      	movs	r3, #6
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
    f500:	ae05      	add	r6, sp, #20
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    f502:	fba2 0100 	umull	r0, r1, r2, r0
	u8_t offset_m_max = OFFSET_M_MAX;
    f506:	f88d 300d 	strb.w	r3, [sp, #13]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    f50a:	f240 1323 	movw	r3, #291	; 0x123
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
    f50e:	2500      	movs	r5, #0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    f510:	fb03 1102 	mla	r1, r3, r2, r1
    f514:	a338      	add	r3, pc, #224	; (adr r3, f5f8 <mayfly_sched_win_offset_select+0x108>)
    f516:	e9d3 2300 	ldrd	r2, r3, [r3]
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
    f51a:	9505      	str	r5, [sp, #20]
    f51c:	6075      	str	r5, [r6, #4]
    f51e:	60b5      	str	r5, [r6, #8]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    f520:	f7f0 feba 	bl	298 <__aeabi_uldivmod>
    f524:	aa08      	add	r2, sp, #32
	sched_free_win_offset_calc(conn, 1, &ticks_to_offset,
    f526:	f10d 010d 	add.w	r1, sp, #13
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    f52a:	f842 0d10 	str.w	r0, [r2, #-16]!
	sched_free_win_offset_calc(conn, 1, &ticks_to_offset,
    f52e:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    f532:	9100      	str	r1, [sp, #0]
    f534:	9601      	str	r6, [sp, #4]
    f536:	2101      	movs	r1, #1
    f538:	4620      	mov	r0, r4
    f53a:	f7ff fe7d 	bl	f238 <sched_free_win_offset_calc>
    f53e:	f104 07ce 	add.w	r7, r4, #206	; 0xce
    f542:	f104 08da 	add.w	r8, r4, #218	; 0xda
			if (win_offset_s != 0xffff) {
    f546:	f64f 79ff 	movw	r9, #65535	; 0xffff
		memcpy((u8_t *)&win_offset_s,
    f54a:	2202      	movs	r2, #2
    f54c:	4639      	mov	r1, r7
    f54e:	f10d 000e 	add.w	r0, sp, #14
    f552:	f7f1 f91e 	bl	792 <memcpy>
		while (offset_index_m < offset_m_max) {
    f556:	f89d 000d 	ldrb.w	r0, [sp, #13]
			if (win_offset_s != 0xffff) {
    f55a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
		while (offset_index_m < offset_m_max) {
    f55e:	2300      	movs	r3, #0
    f560:	b2d9      	uxtb	r1, r3
    f562:	4288      	cmp	r0, r1
    f564:	d811      	bhi.n	f58a <mayfly_sched_win_offset_select+0x9a>
    f566:	3702      	adds	r7, #2
	while (offset_index_s < OFFSET_S_MAX) {
    f568:	4547      	cmp	r7, r8
    f56a:	d1ee      	bne.n	f54a <mayfly_sched_win_offset_select+0x5a>
	} else if (!has_offset_s) {
    f56c:	b9b5      	cbnz	r5, f59c <mayfly_sched_win_offset_select+0xac>
			win_offset_m[0] * 1250;
    f56e:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    f572:	f240 43e2 	movw	r3, #1250	; 0x4e2
    f576:	4353      	muls	r3, r2
		conn->llcp.conn_upd.win_offset_us =
    f578:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
    f57c:	2202      	movs	r2, #2
    f57e:	4631      	mov	r1, r6
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
    f580:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    f584:	f7f1 f905 	bl	792 <memcpy>
    f588:	e027      	b.n	f5da <mayfly_sched_win_offset_select+0xea>
			if (win_offset_s != 0xffff) {
    f58a:	454a      	cmp	r2, r9
    f58c:	d004      	beq.n	f598 <mayfly_sched_win_offset_select+0xa8>
				if (win_offset_s ==
    f58e:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
    f592:	4291      	cmp	r1, r2
    f594:	d024      	beq.n	f5e0 <mayfly_sched_win_offset_select+0xf0>
				has_offset_s = 1;
    f596:	2501      	movs	r5, #1
    f598:	3301      	adds	r3, #1
    f59a:	e7e1      	b.n	f560 <mayfly_sched_win_offset_select+0x70>
		conn->llcp_ack = conn->llcp_req;
    f59c:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    f5a0:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    f5a4:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    f5a8:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
		_radio.conn_upd = NULL;
    f5ac:	4b15      	ldr	r3, [pc, #84]	; (f604 <mayfly_sched_win_offset_select+0x114>)
    f5ae:	2200      	movs	r2, #0
    f5b0:	f8c3 2790 	str.w	r2, [r3, #1936]	; 0x790
			((u8_t *)conn->llcp.conn_upd.pdu_win_offset -
    f5b4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    f5b8:	f813 2c05 	ldrb.w	r2, [r3, #-5]
    f5bc:	f042 0203 	orr.w	r2, r2, #3
    f5c0:	f803 2c05 	strb.w	r2, [r3, #-5]
		pdu_ctrl_tx->len =
    f5c4:	2203      	movs	r2, #3
    f5c6:	f803 2c04 	strb.w	r2, [r3, #-4]
		pdu_ctrl_tx->llctrl.opcode =
    f5ca:	2211      	movs	r2, #17
    f5cc:	f803 2c02 	strb.w	r2, [r3, #-2]
		pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode =
    f5d0:	220f      	movs	r2, #15
    f5d2:	f803 2c01 	strb.w	r2, [r3, #-1]
		pdu_ctrl_tx->llctrl.reject_ext_ind.error_code =
    f5d6:	2220      	movs	r2, #32
    f5d8:	701a      	strb	r2, [r3, #0]
}
    f5da:	b009      	add	sp, #36	; 0x24
    f5dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			win_offset_s * 1250;
    f5e0:	f240 43e2 	movw	r3, #1250	; 0x4e2
    f5e4:	4353      	muls	r3, r2
		conn->llcp.conn_upd.win_offset_us =
    f5e6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
    f5ea:	2202      	movs	r2, #2
    f5ec:	f10d 010e 	add.w	r1, sp, #14
    f5f0:	e7c6      	b.n	f580 <mayfly_sched_win_offset_select+0x90>
    f5f2:	bf00      	nop
    f5f4:	f3af 8000 	nop.w
    f5f8:	1afd498d 	.word	0x1afd498d
    f5fc:	00000007 	.word	0x00000007
    f600:	09ce5400 	.word	0x09ce5400
    f604:	20000bf0 	.word	0x20000bf0

0000f608 <sched_after_mstr_free_slot_get>:
{
    f608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f60c:	b08b      	sub	sp, #44	; 0x2c
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    f60e:	2400      	movs	r4, #0
	ticker_id = ticker_id_prev = 0xff;
    f610:	25ff      	movs	r5, #255	; 0xff
				  _radio.connection_count)) {
    f612:	f8df 9140 	ldr.w	r9, [pc, #320]	; f754 <sched_after_mstr_free_slot_get+0x14c>
	ticker_id = ticker_id_prev = 0xff;
    f616:	f88d 501f 	strb.w	r5, [sp, #31]
{
    f61a:	4680      	mov	r8, r0
    f61c:	4693      	mov	fp, r2
    f61e:	461f      	mov	r7, r3
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(RADIO_TICKER_JITTER_US << 3);
    f620:	f101 0a04 	add.w	sl, r1, #4
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    f624:	601c      	str	r4, [r3, #0]
    f626:	9408      	str	r4, [sp, #32]
    f628:	4626      	mov	r6, r4
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    f62a:	2302      	movs	r3, #2
    f62c:	9309      	str	r3, [sp, #36]	; 0x24
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    f62e:	ab09      	add	r3, sp, #36	; 0x24
    f630:	9302      	str	r3, [sp, #8]
    f632:	4b41      	ldr	r3, [pc, #260]	; (f738 <sched_after_mstr_free_slot_get+0x130>)
    f634:	9301      	str	r3, [sp, #4]
    f636:	ab08      	add	r3, sp, #32
    f638:	9300      	str	r3, [sp, #0]
    f63a:	f10d 021f 	add.w	r2, sp, #31
    f63e:	465b      	mov	r3, fp
    f640:	4641      	mov	r1, r8
    f642:	2000      	movs	r0, #0
    f644:	f7fd f82e 	bl	c6a4 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    f648:	2802      	cmp	r0, #2
    f64a:	d014      	beq.n	f676 <sched_after_mstr_free_slot_get+0x6e>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    f64c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f64e:	b1b3      	cbz	r3, f67e <sched_after_mstr_free_slot_get+0x76>
    f650:	4b3a      	ldr	r3, [pc, #232]	; (f73c <sched_after_mstr_free_slot_get+0x134>)
    f652:	9301      	str	r3, [sp, #4]
    f654:	9300      	str	r3, [sp, #0]
    f656:	4a3a      	ldr	r2, [pc, #232]	; (f740 <sched_after_mstr_free_slot_get+0x138>)
    f658:	4b3a      	ldr	r3, [pc, #232]	; (f744 <sched_after_mstr_free_slot_get+0x13c>)
    f65a:	493b      	ldr	r1, [pc, #236]	; (f748 <sched_after_mstr_free_slot_get+0x140>)
    f65c:	483b      	ldr	r0, [pc, #236]	; (f74c <sched_after_mstr_free_slot_get+0x144>)
    f65e:	f7f2 fe19 	bl	2294 <printk>
    f662:	4040      	eors	r0, r0
    f664:	f380 8811 	msr	BASEPRI, r0
    f668:	f04f 0004 	mov.w	r0, #4
    f66c:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    f66e:	4641      	mov	r1, r8
    f670:	2000      	movs	r0, #0
    f672:	f7fd f895 	bl	c7a0 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    f676:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f678:	2b02      	cmp	r3, #2
    f67a:	d0f8      	beq.n	f66e <sched_after_mstr_free_slot_get+0x66>
    f67c:	e7e6      	b.n	f64c <sched_after_mstr_free_slot_get+0x44>
		if (ticker_id == 0xff) {
    f67e:	f89d 201f 	ldrb.w	r2, [sp, #31]
    f682:	2aff      	cmp	r2, #255	; 0xff
    f684:	d04e      	beq.n	f724 <sched_after_mstr_free_slot_get+0x11c>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    f686:	2a06      	cmp	r2, #6
    f688:	d9cf      	bls.n	f62a <sched_after_mstr_free_slot_get+0x22>
				  _radio.connection_count)) {
    f68a:	f899 3718 	ldrb.w	r3, [r9, #1816]	; 0x718
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    f68e:	3307      	adds	r3, #7
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    f690:	429a      	cmp	r2, r3
    f692:	daca      	bge.n	f62a <sched_after_mstr_free_slot_get+0x22>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    f694:	3a07      	subs	r2, #7
    f696:	b292      	uxth	r2, r2
    f698:	f44f 71aa 	mov.w	r1, #340	; 0x154
    f69c:	f8d9 0710 	ldr.w	r0, [r9, #1808]	; 0x710
    f6a0:	f7fc f8d2 	bl	b848 <mem_get>
		if (conn && !conn->role) {
    f6a4:	2800      	cmp	r0, #0
    f6a6:	d0c0      	beq.n	f62a <sched_after_mstr_free_slot_get+0x22>
    f6a8:	f990 301d 	ldrsb.w	r3, [r0, #29]
    f6ac:	2b00      	cmp	r3, #0
    f6ae:	dbbc      	blt.n	f62a <sched_after_mstr_free_slot_get+0x22>
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    f6b0:	6803      	ldr	r3, [r0, #0]
			u32_t ticks_to_expire_normal = ticks_to_expire;
    f6b2:	9a08      	ldr	r2, [sp, #32]
    f6b4:	f8d0 e004 	ldr.w	lr, [r0, #4]
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    f6b8:	2b00      	cmp	r3, #0
    f6ba:	da12      	bge.n	f6e2 <sched_after_mstr_free_slot_get+0xda>
    f6bc:	6881      	ldr	r1, [r0, #8]
				ticks_slot_abs_curr =
    f6be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    f6c2:	4571      	cmp	r1, lr
    f6c4:	bf2c      	ite	cs
    f6c6:	1852      	addcs	r2, r2, r1
    f6c8:	4472      	addcc	r2, lr
				ticks_to_expire_normal -=
    f6ca:	1ad2      	subs	r2, r2, r3
			ticks_slot_abs_curr +=
    f6cc:	68c1      	ldr	r1, [r0, #12]
			if ((ticker_id_prev != 0xFF) &&
    f6ce:	2dff      	cmp	r5, #255	; 0xff
			ticks_slot_abs_curr +=
    f6d0:	f101 0104 	add.w	r1, r1, #4
    f6d4:	440b      	add	r3, r1
			if ((ticker_id_prev != 0xFF) &&
    f6d6:	d108      	bne.n	f6ea <sched_after_mstr_free_slot_get+0xe2>
			ticker_id_prev = ticker_id;
    f6d8:	f89d 501f 	ldrb.w	r5, [sp, #31]
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    f6dc:	461c      	mov	r4, r3
			ticks_to_expire_prev = ticks_to_expire_normal;
    f6de:	4616      	mov	r6, r2
    f6e0:	e7a3      	b.n	f62a <sched_after_mstr_free_slot_get+0x22>
				u32_t ticks_prepare_to_start =
    f6e2:	4573      	cmp	r3, lr
    f6e4:	bf38      	it	cc
    f6e6:	4673      	movcc	r3, lr
    f6e8:	e7f0      	b.n	f6cc <sched_after_mstr_free_slot_get+0xc4>
			    (ticker_ticks_diff_get(ticks_to_expire_normal,
    f6ea:	4631      	mov	r1, r6
    f6ec:	4610      	mov	r0, r2
    f6ee:	9305      	str	r3, [sp, #20]
    f6f0:	9204      	str	r2, [sp, #16]
    f6f2:	f7fd f86d 	bl	c7d0 <ticker_ticks_diff_get>
			     (ticks_slot_abs_prev + ticks_slot_abs))) {
    f6f6:	eb04 010a 	add.w	r1, r4, sl
			if ((ticker_id_prev != 0xFF) &&
    f6fa:	4288      	cmp	r0, r1
    f6fc:	9a04      	ldr	r2, [sp, #16]
    f6fe:	9b05      	ldr	r3, [sp, #20]
    f700:	d9ea      	bls.n	f6d8 <sched_after_mstr_free_slot_get+0xd0>
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    f702:	4813      	ldr	r0, [pc, #76]	; (f750 <sched_after_mstr_free_slot_get+0x148>)
    f704:	4434      	add	r4, r6
    f706:	fba4 0100 	umull	r0, r1, r4, r0
    f70a:	2307      	movs	r3, #7
    f70c:	fb03 1104 	mla	r1, r3, r4, r1
    f710:	a307      	add	r3, pc, #28	; (adr r3, f730 <sched_after_mstr_free_slot_get+0x128>)
    f712:	e9d3 2300 	ldrd	r2, r3, [r3]
    f716:	f7f0 fdbf 	bl	298 <__aeabi_uldivmod>
						    ticks_slot_abs_prev) +
    f71a:	3080      	adds	r0, #128	; 0x80
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    f71c:	6038      	str	r0, [r7, #0]
}
    f71e:	b00b      	add	sp, #44	; 0x2c
    f720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (ticker_id_prev != 0xff) {
    f724:	2dff      	cmp	r5, #255	; 0xff
    f726:	d1ec      	bne.n	f702 <sched_after_mstr_free_slot_get+0xfa>
    f728:	e7f9      	b.n	f71e <sched_after_mstr_free_slot_get+0x116>
    f72a:	bf00      	nop
    f72c:	f3af 8000 	nop.w
    f730:	3b9aca00 	.word	0x3b9aca00
    f734:	00000000 	.word	0x00000000
    f738:	0000e56d 	.word	0x0000e56d
    f73c:	00023dae 	.word	0x00023dae
    f740:	00022d76 	.word	0x00022d76
    f744:	00025bc9 	.word	0x00025bc9
    f748:	000272d8 	.word	0x000272d8
    f74c:	00026a61 	.word	0x00026a61
    f750:	1afd498d 	.word	0x1afd498d
    f754:	20000bf0 	.word	0x20000bf0

0000f758 <isr_adv_ci_adva_check>:
{
    f758:	b570      	push	{r4, r5, r6, lr}
	return (adv->tx_addr == ci->rx_addr) &&
    f75a:	7804      	ldrb	r4, [r0, #0]
    f75c:	780a      	ldrb	r2, [r1, #0]
    f75e:	f3c4 1380 	ubfx	r3, r4, #6, #1
    f762:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    f766:	d119      	bne.n	f79c <isr_adv_ci_adva_check+0x44>
    f768:	f004 040f 	and.w	r4, r4, #15
    f76c:	2c01      	cmp	r4, #1
    f76e:	f101 0608 	add.w	r6, r1, #8
    f772:	f100 0502 	add.w	r5, r0, #2
    f776:	d008      	beq.n	f78a <isr_adv_ci_adva_check+0x32>
		 (!memcmp(adv->adv_ind.addr, ci->connect_ind.adv_addr,
    f778:	2206      	movs	r2, #6
    f77a:	4631      	mov	r1, r6
    f77c:	4628      	mov	r0, r5
    f77e:	f7f0 ffdb 	bl	738 <memcmp>
			 BDADDR_SIZE)) ||
    f782:	fab0 f080 	clz	r0, r0
    f786:	0940      	lsrs	r0, r0, #5
    f788:	bd70      	pop	{r4, r5, r6, pc}
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
    f78a:	2206      	movs	r2, #6
    f78c:	4631      	mov	r1, r6
    f78e:	4628      	mov	r0, r5
    f790:	f7f0 ffd2 	bl	738 <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
    f794:	2800      	cmp	r0, #0
    f796:	d1ef      	bne.n	f778 <isr_adv_ci_adva_check+0x20>
	return (adv->tx_addr == ci->rx_addr) &&
    f798:	4620      	mov	r0, r4
    f79a:	bd70      	pop	{r4, r5, r6, pc}
    f79c:	2000      	movs	r0, #0
}
    f79e:	bd70      	pop	{r4, r5, r6, pc}

0000f7a0 <packet_rx_enqueue>:
{
    f7a0:	b513      	push	{r0, r1, r4, lr}
	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
    f7a2:	4a1e      	ldr	r2, [pc, #120]	; (f81c <packet_rx_enqueue+0x7c>)
    f7a4:	f892 3749 	ldrb.w	r3, [r2, #1865]	; 0x749
    f7a8:	f892 174a 	ldrb.w	r1, [r2, #1866]	; 0x74a
    f7ac:	4299      	cmp	r1, r3
    f7ae:	d10e      	bne.n	f7ce <packet_rx_enqueue+0x2e>
    f7b0:	4b1b      	ldr	r3, [pc, #108]	; (f820 <packet_rx_enqueue+0x80>)
    f7b2:	9301      	str	r3, [sp, #4]
    f7b4:	9300      	str	r3, [sp, #0]
    f7b6:	4a1b      	ldr	r2, [pc, #108]	; (f824 <packet_rx_enqueue+0x84>)
    f7b8:	4b1b      	ldr	r3, [pc, #108]	; (f828 <packet_rx_enqueue+0x88>)
    f7ba:	491c      	ldr	r1, [pc, #112]	; (f82c <packet_rx_enqueue+0x8c>)
    f7bc:	481c      	ldr	r0, [pc, #112]	; (f830 <packet_rx_enqueue+0x90>)
	LL_ASSERT(link);
    f7be:	f7f2 fd69 	bl	2294 <printk>
    f7c2:	4040      	eors	r0, r0
    f7c4:	f380 8811 	msr	BASEPRI, r0
    f7c8:	f04f 0004 	mov.w	r0, #4
    f7cc:	df02      	svc	2
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    f7ce:	f892 1749 	ldrb.w	r1, [r2, #1865]	; 0x749
    f7d2:	f8d2 3744 	ldr.w	r3, [r2, #1860]	; 0x744
    f7d6:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    f7da:	f892 3780 	ldrb.w	r3, [r2, #1920]	; 0x780
	link = node_rx->hdr.onion.link;
    f7de:	6808      	ldr	r0, [r1, #0]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    f7e0:	700b      	strb	r3, [r1, #0]
	last = _radio.packet_rx_last + 1;
    f7e2:	f892 3749 	ldrb.w	r3, [r2, #1865]	; 0x749
	if (last == _radio.packet_rx_count) {
    f7e6:	f892 4748 	ldrb.w	r4, [r2, #1864]	; 0x748
	last = _radio.packet_rx_last + 1;
    f7ea:	3301      	adds	r3, #1
    f7ec:	b2db      	uxtb	r3, r3
		last = 0;
    f7ee:	429c      	cmp	r4, r3
    f7f0:	bf08      	it	eq
    f7f2:	2300      	moveq	r3, #0
	_radio.packet_rx_last = last;
    f7f4:	f882 3749 	strb.w	r3, [r2, #1865]	; 0x749
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    f7f8:	f502 62eb 	add.w	r2, r2, #1880	; 0x758
    f7fc:	f7fc f849 	bl	b892 <memq_enqueue>
	LL_ASSERT(link);
    f800:	b938      	cbnz	r0, f812 <packet_rx_enqueue+0x72>
    f802:	4b07      	ldr	r3, [pc, #28]	; (f820 <packet_rx_enqueue+0x80>)
    f804:	9301      	str	r3, [sp, #4]
    f806:	9300      	str	r3, [sp, #0]
    f808:	4a06      	ldr	r2, [pc, #24]	; (f824 <packet_rx_enqueue+0x84>)
    f80a:	4b07      	ldr	r3, [pc, #28]	; (f828 <packet_rx_enqueue+0x88>)
    f80c:	4907      	ldr	r1, [pc, #28]	; (f82c <packet_rx_enqueue+0x8c>)
    f80e:	4809      	ldr	r0, [pc, #36]	; (f834 <packet_rx_enqueue+0x94>)
    f810:	e7d5      	b.n	f7be <packet_rx_enqueue+0x1e>
}
    f812:	b002      	add	sp, #8
    f814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
    f818:	f007 ba6c 	b.w	16cf4 <radio_event_callback>
    f81c:	20000bf0 	.word	0x20000bf0
    f820:	00023dae 	.word	0x00023dae
    f824:	00022d76 	.word	0x00022d76
    f828:	00025df6 	.word	0x00025df6
    f82c:	000272d8 	.word	0x000272d8
    f830:	0002671f 	.word	0x0002671f
    f834:	00025ef2 	.word	0x00025ef2

0000f838 <isr_scan_tgta_check>:
{
    f838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f83c:	4682      	mov	sl, r0
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    f83e:	7808      	ldrb	r0, [r1, #0]
				 pdu->direct_ind.tgt_addr, rl_idx)) {
    f840:	f101 0808 	add.w	r8, r1, #8
{
    f844:	460d      	mov	r5, r1
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    f846:	09c0      	lsrs	r0, r0, #7
    f848:	4641      	mov	r1, r8
{
    f84a:	4691      	mov	r9, r2
    f84c:	461e      	mov	r6, r3
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    f84e:	f008 fa01 	bl	17c54 <ctrl_rl_addr_resolve>
    f852:	4604      	mov	r4, r0
    f854:	b9d8      	cbnz	r0, f88e <isr_scan_tgta_check+0x56>
    f856:	4f1c      	ldr	r7, [pc, #112]	; (f8c8 <isr_scan_tgta_check+0x90>)
	} else if (init && _radio.scanner.rpa_gen && ctrl_lrpa_get(rl_idx)) {
    f858:	f1ba 0f00 	cmp.w	sl, #0
    f85c:	d10e      	bne.n	f87c <isr_scan_tgta_check+0x44>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    f85e:	782b      	ldrb	r3, [r5, #0]
    f860:	f897 264d 	ldrb.w	r2, [r7, #1613]	; 0x64d
			BDADDR_SIZE) == 0))) ||
    f864:	09db      	lsrs	r3, r3, #7
    f866:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    f86a:	d113      	bne.n	f894 <isr_scan_tgta_check+0x5c>
		(memcmp(&_radio.scanner.init_addr[0],
    f86c:	2206      	movs	r2, #6
    f86e:	4641      	mov	r1, r8
    f870:	4816      	ldr	r0, [pc, #88]	; (f8cc <isr_scan_tgta_check+0x94>)
    f872:	f7f0 ff61 	bl	738 <memcmp>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    f876:	b968      	cbnz	r0, f894 <isr_scan_tgta_check+0x5c>
			BDADDR_SIZE) == 0))) ||
    f878:	2001      	movs	r0, #1
    f87a:	e012      	b.n	f8a2 <isr_scan_tgta_check+0x6a>
	} else if (init && _radio.scanner.rpa_gen && ctrl_lrpa_get(rl_idx)) {
    f87c:	f897 364e 	ldrb.w	r3, [r7, #1614]	; 0x64e
    f880:	07db      	lsls	r3, r3, #31
    f882:	d5ec      	bpl.n	f85e <isr_scan_tgta_check+0x26>
    f884:	4648      	mov	r0, r9
    f886:	f007 ff37 	bl	176f8 <ctrl_lrpa_get>
    f88a:	2800      	cmp	r0, #0
    f88c:	d0e7      	beq.n	f85e <isr_scan_tgta_check+0x26>
}
    f88e:	4620      	mov	r0, r4
    f890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    f894:	f897 064d 	ldrb.w	r0, [r7, #1613]	; 0x64d
    f898:	f3c0 1001 	ubfx	r0, r0, #4, #2
    f89c:	f010 0002 	ands.w	r0, r0, #2
    f8a0:	d101      	bne.n	f8a6 <isr_scan_tgta_check+0x6e>
			BDADDR_SIZE) == 0))) ||
    f8a2:	4604      	mov	r4, r0
    f8a4:	e7f3      	b.n	f88e <isr_scan_tgta_check+0x56>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    f8a6:	f995 3000 	ldrsb.w	r3, [r5]
    f8aa:	2b00      	cmp	r3, #0
    f8ac:	da09      	bge.n	f8c2 <isr_scan_tgta_check+0x8a>
	    (pdu->rx_addr != 0) &&
    f8ae:	7b6b      	ldrb	r3, [r5, #13]
    f8b0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    f8b4:	2b40      	cmp	r3, #64	; 0x40
    f8b6:	d104      	bne.n	f8c2 <isr_scan_tgta_check+0x8a>
		if (dir_report) {
    f8b8:	2e00      	cmp	r6, #0
    f8ba:	d0dd      	beq.n	f878 <isr_scan_tgta_check+0x40>
			*dir_report = true;
    f8bc:	2001      	movs	r0, #1
    f8be:	7030      	strb	r0, [r6, #0]
    f8c0:	e7ef      	b.n	f8a2 <isr_scan_tgta_check+0x6a>
			BDADDR_SIZE) == 0))) ||
    f8c2:	2000      	movs	r0, #0
    f8c4:	e7ed      	b.n	f8a2 <isr_scan_tgta_check+0x6a>
    f8c6:	bf00      	nop
    f8c8:	20000bf0 	.word	0x20000bf0
    f8cc:	20001240 	.word	0x20001240

0000f8d0 <isr_rx_scan_report>:
{
    f8d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    f8d4:	4681      	mov	r9, r0
	node_rx = packet_rx_reserve_get(3);
    f8d6:	2003      	movs	r0, #3
{
    f8d8:	460f      	mov	r7, r1
    f8da:	4616      	mov	r6, r2
	node_rx = packet_rx_reserve_get(3);
    f8dc:	f7fe fe86 	bl	e5ec <packet_rx_reserve_get>
	if (node_rx == 0) {
    f8e0:	4604      	mov	r4, r0
    f8e2:	2800      	cmp	r0, #0
    f8e4:	d03e      	beq.n	f964 <isr_rx_scan_report+0x94>
	node_rx->hdr.handle = 0xffff;
    f8e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f8ea:	80c3      	strh	r3, [r0, #6]
	} else if (_radio.scanner.phy) {
    f8ec:	4b1e      	ldr	r3, [pc, #120]	; (f968 <isr_rx_scan_report+0x98>)
    f8ee:	f893 364d 	ldrb.w	r3, [r3, #1613]	; 0x64d
    f8f2:	075a      	lsls	r2, r3, #29
    f8f4:	d032      	beq.n	f95c <isr_rx_scan_report+0x8c>
		switch (_radio.scanner.phy) {
    f8f6:	f3c3 0302 	ubfx	r3, r3, #0, #3
    f8fa:	b2da      	uxtb	r2, r3
    f8fc:	2a01      	cmp	r2, #1
    f8fe:	d010      	beq.n	f922 <isr_rx_scan_report+0x52>
    f900:	2a04      	cmp	r2, #4
    f902:	d00f      	beq.n	f924 <isr_rx_scan_report+0x54>
			LL_ASSERT(0);
    f904:	4b19      	ldr	r3, [pc, #100]	; (f96c <isr_rx_scan_report+0x9c>)
    f906:	9301      	str	r3, [sp, #4]
    f908:	9300      	str	r3, [sp, #0]
    f90a:	4a19      	ldr	r2, [pc, #100]	; (f970 <isr_rx_scan_report+0xa0>)
    f90c:	4b19      	ldr	r3, [pc, #100]	; (f974 <isr_rx_scan_report+0xa4>)
    f90e:	491a      	ldr	r1, [pc, #104]	; (f978 <isr_rx_scan_report+0xa8>)
    f910:	481a      	ldr	r0, [pc, #104]	; (f97c <isr_rx_scan_report+0xac>)
    f912:	f7f2 fcbf 	bl	2294 <printk>
    f916:	4040      	eors	r0, r0
    f918:	f380 8811 	msr	BASEPRI, r0
    f91c:	f04f 0004 	mov.w	r0, #4
    f920:	df02      	svc	2
			node_rx->hdr.type = NODE_RX_TYPE_EXT_1M_REPORT;
    f922:	2303      	movs	r3, #3
			     pdu_adv_rx->len] =
    f924:	f894 8009 	ldrb.w	r8, [r4, #9]
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    f928:	7123      	strb	r3, [r4, #4]
	pdu_adv_rx = (void *)node_rx->pdu_data;
    f92a:	f104 0508 	add.w	r5, r4, #8
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    f92e:	f108 0802 	add.w	r8, r8, #2
			     pdu_adv_rx->len] =
    f932:	f1b9 0f00 	cmp.w	r9, #0
    f936:	d013      	beq.n	f960 <isr_rx_scan_report+0x90>
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;
    f938:	f009 f8ae 	bl	18a98 <radio_rssi_get>
			     pdu_adv_rx->len] =
    f93c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    f940:	f805 0008 	strb.w	r0, [r5, r8]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    f944:	7a63      	ldrb	r3, [r4, #9]
			     pdu_adv_rx->len + 1] = rl_idx;
    f946:	442b      	add	r3, r5
    f948:	70df      	strb	r7, [r3, #3]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    f94a:	7a63      	ldrb	r3, [r4, #9]
			     pdu_adv_rx->len + 2] = dir_report ? 1 : 0;
    f94c:	441d      	add	r5, r3
    f94e:	712e      	strb	r6, [r5, #4]
	packet_rx_enqueue();
    f950:	f7ff ff26 	bl	f7a0 <packet_rx_enqueue>
	return 0;
    f954:	2000      	movs	r0, #0
}
    f956:	b003      	add	sp, #12
    f958:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    f95c:	2302      	movs	r3, #2
    f95e:	e7e1      	b.n	f924 <isr_rx_scan_report+0x54>
			     pdu_adv_rx->len] =
    f960:	207f      	movs	r0, #127	; 0x7f
    f962:	e7ed      	b.n	f940 <isr_rx_scan_report+0x70>
		return 1;
    f964:	2001      	movs	r0, #1
    f966:	e7f6      	b.n	f956 <isr_rx_scan_report+0x86>
    f968:	20000bf0 	.word	0x20000bf0
    f96c:	00023dae 	.word	0x00023dae
    f970:	00022d76 	.word	0x00022d76
    f974:	000259fe 	.word	0x000259fe
    f978:	000272d8 	.word	0x000272d8
    f97c:	00023fa5 	.word	0x00023fa5

0000f980 <rx_fc_lock>:
	packet_rx_allocate(0xff);
}

static void rx_fc_lock(u16_t handle)
{
	if (_radio.fc_req == _radio.fc_ack) {
    f980:	4a0b      	ldr	r2, [pc, #44]	; (f9b0 <rx_fc_lock+0x30>)
    f982:	f892 3788 	ldrb.w	r3, [r2, #1928]	; 0x788
    f986:	f892 1789 	ldrb.w	r1, [r2, #1929]	; 0x789
    f98a:	4299      	cmp	r1, r3
    f98c:	d10e      	bne.n	f9ac <rx_fc_lock+0x2c>
		u8_t req;

		_radio.fc_handle[_radio.fc_req] = handle;
    f98e:	f892 3788 	ldrb.w	r3, [r2, #1928]	; 0x788
    f992:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    f996:	f8a3 0782 	strh.w	r0, [r3, #1922]	; 0x782
		req = _radio.fc_req + 1;
    f99a:	f892 3788 	ldrb.w	r3, [r2, #1928]	; 0x788
    f99e:	3301      	adds	r3, #1
    f9a0:	b2db      	uxtb	r3, r3
		if (req == TRIPLE_BUFFER_SIZE) {
			req = 0;
    f9a2:	2b03      	cmp	r3, #3
    f9a4:	bf08      	it	eq
    f9a6:	2300      	moveq	r3, #0
		}
		_radio.fc_req = req;
    f9a8:	f882 3788 	strb.w	r3, [r2, #1928]	; 0x788
    f9ac:	4770      	bx	lr
    f9ae:	bf00      	nop
    f9b0:	20000bf0 	.word	0x20000bf0

0000f9b4 <ticker_success_assert>:
{
    f9b4:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    f9b6:	b170      	cbz	r0, f9d6 <ticker_success_assert+0x22>
    f9b8:	4b08      	ldr	r3, [pc, #32]	; (f9dc <ticker_success_assert+0x28>)
    f9ba:	9301      	str	r3, [sp, #4]
    f9bc:	9300      	str	r3, [sp, #0]
    f9be:	4a08      	ldr	r2, [pc, #32]	; (f9e0 <ticker_success_assert+0x2c>)
    f9c0:	4b08      	ldr	r3, [pc, #32]	; (f9e4 <ticker_success_assert+0x30>)
    f9c2:	4909      	ldr	r1, [pc, #36]	; (f9e8 <ticker_success_assert+0x34>)
    f9c4:	4809      	ldr	r0, [pc, #36]	; (f9ec <ticker_success_assert+0x38>)
    f9c6:	f7f2 fc65 	bl	2294 <printk>
    f9ca:	4040      	eors	r0, r0
    f9cc:	f380 8811 	msr	BASEPRI, r0
    f9d0:	f04f 0004 	mov.w	r0, #4
    f9d4:	df02      	svc	2
}
    f9d6:	b003      	add	sp, #12
    f9d8:	f85d fb04 	ldr.w	pc, [sp], #4
    f9dc:	00023dae 	.word	0x00023dae
    f9e0:	00022d76 	.word	0x00022d76
    f9e4:	00025ad9 	.word	0x00025ad9
    f9e8:	000272d8 	.word	0x000272d8
    f9ec:	00026bb5 	.word	0x00026bb5

0000f9f0 <ticker_stop_adv_assert>:
	if (status == TICKER_STATUS_FAILURE) {
    f9f0:	2801      	cmp	r0, #1
{
    f9f2:	b507      	push	{r0, r1, r2, lr}
    f9f4:	4b11      	ldr	r3, [pc, #68]	; (fa3c <ticker_stop_adv_assert+0x4c>)
	if (status == TICKER_STATUS_FAILURE) {
    f9f6:	d116      	bne.n	fa26 <ticker_stop_adv_assert+0x36>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_ADV) {
    f9f8:	7c9a      	ldrb	r2, [r3, #18]
    f9fa:	2a05      	cmp	r2, #5
    f9fc:	d104      	bne.n	fa08 <ticker_stop_adv_assert+0x18>
			_radio.ticker_id_stop = 0;
    f9fe:	2200      	movs	r2, #0
    fa00:	749a      	strb	r2, [r3, #18]
}
    fa02:	b003      	add	sp, #12
    fa04:	f85d fb04 	ldr.w	pc, [sp], #4
			LL_ASSERT(0);
    fa08:	4b0d      	ldr	r3, [pc, #52]	; (fa40 <ticker_stop_adv_assert+0x50>)
    fa0a:	9301      	str	r3, [sp, #4]
    fa0c:	9300      	str	r3, [sp, #0]
    fa0e:	4a0d      	ldr	r2, [pc, #52]	; (fa44 <ticker_stop_adv_assert+0x54>)
    fa10:	4b0d      	ldr	r3, [pc, #52]	; (fa48 <ticker_stop_adv_assert+0x58>)
    fa12:	490e      	ldr	r1, [pc, #56]	; (fa4c <ticker_stop_adv_assert+0x5c>)
    fa14:	480e      	ldr	r0, [pc, #56]	; (fa50 <ticker_stop_adv_assert+0x60>)
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_ADV);
    fa16:	f7f2 fc3d 	bl	2294 <printk>
    fa1a:	4040      	eors	r0, r0
    fa1c:	f380 8811 	msr	BASEPRI, r0
    fa20:	f04f 0004 	mov.w	r0, #4
    fa24:	df02      	svc	2
    fa26:	7c1b      	ldrb	r3, [r3, #16]
    fa28:	2b05      	cmp	r3, #5
    fa2a:	d1ea      	bne.n	fa02 <ticker_stop_adv_assert+0x12>
    fa2c:	4b04      	ldr	r3, [pc, #16]	; (fa40 <ticker_stop_adv_assert+0x50>)
    fa2e:	9301      	str	r3, [sp, #4]
    fa30:	9300      	str	r3, [sp, #0]
    fa32:	4a04      	ldr	r2, [pc, #16]	; (fa44 <ticker_stop_adv_assert+0x54>)
    fa34:	4b04      	ldr	r3, [pc, #16]	; (fa48 <ticker_stop_adv_assert+0x58>)
    fa36:	4905      	ldr	r1, [pc, #20]	; (fa4c <ticker_stop_adv_assert+0x5c>)
    fa38:	4806      	ldr	r0, [pc, #24]	; (fa54 <ticker_stop_adv_assert+0x64>)
    fa3a:	e7ec      	b.n	fa16 <ticker_stop_adv_assert+0x26>
    fa3c:	20000bf0 	.word	0x20000bf0
    fa40:	00023dae 	.word	0x00023dae
    fa44:	00022d76 	.word	0x00022d76
    fa48:	00025aef 	.word	0x00025aef
    fa4c:	000272d8 	.word	0x000272d8
    fa50:	00023fa5 	.word	0x00023fa5
    fa54:	00026afb 	.word	0x00026afb

0000fa58 <ticker_stop_scan_assert>:
	if (status == TICKER_STATUS_FAILURE) {
    fa58:	2801      	cmp	r0, #1
{
    fa5a:	b507      	push	{r0, r1, r2, lr}
    fa5c:	4b11      	ldr	r3, [pc, #68]	; (faa4 <ticker_stop_scan_assert+0x4c>)
	if (status == TICKER_STATUS_FAILURE) {
    fa5e:	d116      	bne.n	fa8e <ticker_stop_scan_assert+0x36>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_SCAN) {
    fa60:	7c9a      	ldrb	r2, [r3, #18]
    fa62:	2a06      	cmp	r2, #6
    fa64:	d104      	bne.n	fa70 <ticker_stop_scan_assert+0x18>
			_radio.ticker_id_stop = 0;
    fa66:	2200      	movs	r2, #0
    fa68:	749a      	strb	r2, [r3, #18]
}
    fa6a:	b003      	add	sp, #12
    fa6c:	f85d fb04 	ldr.w	pc, [sp], #4
			LL_ASSERT(0);
    fa70:	4b0d      	ldr	r3, [pc, #52]	; (faa8 <ticker_stop_scan_assert+0x50>)
    fa72:	9301      	str	r3, [sp, #4]
    fa74:	9300      	str	r3, [sp, #0]
    fa76:	4a0d      	ldr	r2, [pc, #52]	; (faac <ticker_stop_scan_assert+0x54>)
    fa78:	4b0d      	ldr	r3, [pc, #52]	; (fab0 <ticker_stop_scan_assert+0x58>)
    fa7a:	490e      	ldr	r1, [pc, #56]	; (fab4 <ticker_stop_scan_assert+0x5c>)
    fa7c:	480e      	ldr	r0, [pc, #56]	; (fab8 <ticker_stop_scan_assert+0x60>)
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_SCAN);
    fa7e:	f7f2 fc09 	bl	2294 <printk>
    fa82:	4040      	eors	r0, r0
    fa84:	f380 8811 	msr	BASEPRI, r0
    fa88:	f04f 0004 	mov.w	r0, #4
    fa8c:	df02      	svc	2
    fa8e:	7c1b      	ldrb	r3, [r3, #16]
    fa90:	2b06      	cmp	r3, #6
    fa92:	d1ea      	bne.n	fa6a <ticker_stop_scan_assert+0x12>
    fa94:	4b04      	ldr	r3, [pc, #16]	; (faa8 <ticker_stop_scan_assert+0x50>)
    fa96:	9301      	str	r3, [sp, #4]
    fa98:	9300      	str	r3, [sp, #0]
    fa9a:	4a04      	ldr	r2, [pc, #16]	; (faac <ticker_stop_scan_assert+0x54>)
    fa9c:	4b04      	ldr	r3, [pc, #16]	; (fab0 <ticker_stop_scan_assert+0x58>)
    fa9e:	4905      	ldr	r1, [pc, #20]	; (fab4 <ticker_stop_scan_assert+0x5c>)
    faa0:	4806      	ldr	r0, [pc, #24]	; (fabc <ticker_stop_scan_assert+0x64>)
    faa2:	e7ec      	b.n	fa7e <ticker_stop_scan_assert+0x26>
    faa4:	20000bf0 	.word	0x20000bf0
    faa8:	00023dae 	.word	0x00023dae
    faac:	00022d76 	.word	0x00022d76
    fab0:	00025b06 	.word	0x00025b06
    fab4:	000272d8 	.word	0x000272d8
    fab8:	00023fa5 	.word	0x00023fa5
    fabc:	00026b76 	.word	0x00026b76

0000fac0 <ticker_update_adv_assert>:
{
    fac0:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    fac2:	b190      	cbz	r0, faea <ticker_update_adv_assert+0x2a>
    fac4:	4b0a      	ldr	r3, [pc, #40]	; (faf0 <ticker_update_adv_assert+0x30>)
    fac6:	7c9b      	ldrb	r3, [r3, #18]
    fac8:	2b05      	cmp	r3, #5
    faca:	d00e      	beq.n	faea <ticker_update_adv_assert+0x2a>
    facc:	4b09      	ldr	r3, [pc, #36]	; (faf4 <ticker_update_adv_assert+0x34>)
    face:	9301      	str	r3, [sp, #4]
    fad0:	9300      	str	r3, [sp, #0]
    fad2:	4a09      	ldr	r2, [pc, #36]	; (faf8 <ticker_update_adv_assert+0x38>)
    fad4:	4b09      	ldr	r3, [pc, #36]	; (fafc <ticker_update_adv_assert+0x3c>)
    fad6:	490a      	ldr	r1, [pc, #40]	; (fb00 <ticker_update_adv_assert+0x40>)
    fad8:	480a      	ldr	r0, [pc, #40]	; (fb04 <ticker_update_adv_assert+0x44>)
    fada:	f7f2 fbdb 	bl	2294 <printk>
    fade:	4040      	eors	r0, r0
    fae0:	f380 8811 	msr	BASEPRI, r0
    fae4:	f04f 0004 	mov.w	r0, #4
    fae8:	df02      	svc	2
}
    faea:	b003      	add	sp, #12
    faec:	f85d fb04 	ldr.w	pc, [sp], #4
    faf0:	20000bf0 	.word	0x20000bf0
    faf4:	00023dae 	.word	0x00023dae
    faf8:	00022d76 	.word	0x00022d76
    fafc:	00025b1e 	.word	0x00025b1e
    fb00:	000272d8 	.word	0x000272d8
    fb04:	00026be2 	.word	0x00026be2

0000fb08 <ticker_update_slave_assert>:
{
    fb08:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    fb0a:	b198      	cbz	r0, fb34 <ticker_update_slave_assert+0x2c>
    fb0c:	4b0b      	ldr	r3, [pc, #44]	; (fb3c <ticker_update_slave_assert+0x34>)
    fb0e:	7c9b      	ldrb	r3, [r3, #18]
    fb10:	b2c9      	uxtb	r1, r1
    fb12:	4299      	cmp	r1, r3
    fb14:	d00e      	beq.n	fb34 <ticker_update_slave_assert+0x2c>
    fb16:	4b0a      	ldr	r3, [pc, #40]	; (fb40 <ticker_update_slave_assert+0x38>)
    fb18:	9301      	str	r3, [sp, #4]
    fb1a:	9300      	str	r3, [sp, #0]
    fb1c:	4a09      	ldr	r2, [pc, #36]	; (fb44 <ticker_update_slave_assert+0x3c>)
    fb1e:	4b0a      	ldr	r3, [pc, #40]	; (fb48 <ticker_update_slave_assert+0x40>)
    fb20:	490a      	ldr	r1, [pc, #40]	; (fb4c <ticker_update_slave_assert+0x44>)
    fb22:	480b      	ldr	r0, [pc, #44]	; (fb50 <ticker_update_slave_assert+0x48>)
    fb24:	f7f2 fbb6 	bl	2294 <printk>
    fb28:	4040      	eors	r0, r0
    fb2a:	f380 8811 	msr	BASEPRI, r0
    fb2e:	f04f 0004 	mov.w	r0, #4
    fb32:	df02      	svc	2
}
    fb34:	b003      	add	sp, #12
    fb36:	f85d fb04 	ldr.w	pc, [sp], #4
    fb3a:	bf00      	nop
    fb3c:	20000bf0 	.word	0x20000bf0
    fb40:	00023dae 	.word	0x00023dae
    fb44:	00022d76 	.word	0x00022d76
    fb48:	00025b37 	.word	0x00025b37
    fb4c:	000272d8 	.word	0x000272d8
    fb50:	00026c31 	.word	0x00026c31

0000fb54 <ticker_op_latency_cancelled>:
{
	mem_release(node_tx, &_radio.pkt_tx_data_free);
}

static void ticker_op_latency_cancelled(u32_t ticker_status, void *params)
{
    fb54:	b507      	push	{r0, r1, r2, lr}
	struct connection *conn = params;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
    fb56:	b170      	cbz	r0, fb76 <ticker_op_latency_cancelled+0x22>
    fb58:	4b0b      	ldr	r3, [pc, #44]	; (fb88 <ticker_op_latency_cancelled+0x34>)
    fb5a:	9301      	str	r3, [sp, #4]
    fb5c:	9300      	str	r3, [sp, #0]
    fb5e:	4a0b      	ldr	r2, [pc, #44]	; (fb8c <ticker_op_latency_cancelled+0x38>)
    fb60:	4b0b      	ldr	r3, [pc, #44]	; (fb90 <ticker_op_latency_cancelled+0x3c>)
    fb62:	490c      	ldr	r1, [pc, #48]	; (fb94 <ticker_op_latency_cancelled+0x40>)
    fb64:	480c      	ldr	r0, [pc, #48]	; (fb98 <ticker_op_latency_cancelled+0x44>)
    fb66:	f7f2 fb95 	bl	2294 <printk>
    fb6a:	4040      	eors	r0, r0
    fb6c:	f380 8811 	msr	BASEPRI, r0
    fb70:	f04f 0004 	mov.w	r0, #4
    fb74:	df02      	svc	2

	conn->slave.latency_cancel = 0;
    fb76:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
    fb7a:	f360 0341 	bfi	r3, r0, #1, #1
    fb7e:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
}
    fb82:	b003      	add	sp, #12
    fb84:	f85d fb04 	ldr.w	pc, [sp], #4
    fb88:	00023dae 	.word	0x00023dae
    fb8c:	00022d76 	.word	0x00022d76
    fb90:	00025ec4 	.word	0x00025ec4
    fb94:	000272d8 	.word	0x000272d8
    fb98:	00026ac7 	.word	0x00026ac7

0000fb9c <ticker_job_disable>:
	if (_radio.state != STATE_NONE) {
    fb9c:	4b04      	ldr	r3, [pc, #16]	; (fbb0 <ticker_job_disable+0x14>)
    fb9e:	7d1b      	ldrb	r3, [r3, #20]
    fba0:	b123      	cbz	r3, fbac <ticker_job_disable+0x10>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    fba2:	2101      	movs	r1, #1
    fba4:	2200      	movs	r2, #0
    fba6:	4608      	mov	r0, r1
    fba8:	f7fb bebc 	b.w	b924 <mayfly_enable>
    fbac:	4770      	bx	lr
    fbae:	bf00      	nop
    fbb0:	20000bf0 	.word	0x20000bf0

0000fbb4 <hdr_conn_get>:
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    fbb4:	2806      	cmp	r0, #6
{
    fbb6:	b510      	push	{r4, lr}
    fbb8:	460c      	mov	r4, r1
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    fbba:	d90a      	bls.n	fbd2 <hdr_conn_get+0x1e>
		*conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    fbbc:	4b09      	ldr	r3, [pc, #36]	; (fbe4 <hdr_conn_get+0x30>)
    fbbe:	1fc2      	subs	r2, r0, #7
    fbc0:	b292      	uxth	r2, r2
    fbc2:	f44f 71aa 	mov.w	r1, #340	; 0x154
    fbc6:	f8d3 0710 	ldr.w	r0, [r3, #1808]	; 0x710
    fbca:	f7fb fe3d 	bl	b848 <mem_get>
    fbce:	6020      	str	r0, [r4, #0]
    fbd0:	bd10      	pop	{r4, pc}
	} else if (ticker_id == RADIO_TICKER_ID_ADV) {
    fbd2:	2805      	cmp	r0, #5
    fbd4:	d004      	beq.n	fbe0 <hdr_conn_get+0x2c>
	} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
    fbd6:	2806      	cmp	r0, #6
	return NULL;
    fbd8:	4803      	ldr	r0, [pc, #12]	; (fbe8 <hdr_conn_get+0x34>)
    fbda:	bf18      	it	ne
    fbdc:	2000      	movne	r0, #0
    fbde:	bd10      	pop	{r4, pc}
		return &_radio.advertiser.hdr;
    fbe0:	4802      	ldr	r0, [pc, #8]	; (fbec <hdr_conn_get+0x38>)
}
    fbe2:	bd10      	pop	{r4, pc}
    fbe4:	20000bf0 	.word	0x20000bf0
    fbe8:	2000122c 	.word	0x2000122c
    fbec:	20000c08 	.word	0x20000c08

0000fbf0 <event_stop.part.11>:
static void event_stop(u32_t ticks_at_expire, u32_t remainder,
    fbf0:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(!retval);
    fbf2:	4b07      	ldr	r3, [pc, #28]	; (fc10 <event_stop.part.11+0x20>)
    fbf4:	9301      	str	r3, [sp, #4]
    fbf6:	9300      	str	r3, [sp, #0]
    fbf8:	4a06      	ldr	r2, [pc, #24]	; (fc14 <event_stop.part.11+0x24>)
    fbfa:	4b07      	ldr	r3, [pc, #28]	; (fc18 <event_stop.part.11+0x28>)
    fbfc:	4907      	ldr	r1, [pc, #28]	; (fc1c <event_stop.part.11+0x2c>)
    fbfe:	4808      	ldr	r0, [pc, #32]	; (fc20 <event_stop.part.11+0x30>)
    fc00:	f7f2 fb48 	bl	2294 <printk>
    fc04:	4040      	eors	r0, r0
    fc06:	f380 8811 	msr	BASEPRI, r0
    fc0a:	f04f 0004 	mov.w	r0, #4
    fc0e:	df02      	svc	2
    fc10:	00023dae 	.word	0x00023dae
    fc14:	00022d76 	.word	0x00022d76
    fc18:	00025c36 	.word	0x00025c36
    fc1c:	000272d8 	.word	0x000272d8
    fc20:	000266a2 	.word	0x000266a2

0000fc24 <event_stop>:
	s_mfy_radio_stop.param = context;
    fc24:	4a06      	ldr	r2, [pc, #24]	; (fc40 <event_stop+0x1c>)
{
    fc26:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
    fc28:	6093      	str	r3, [r2, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    fc2a:	4613      	mov	r3, r2
    fc2c:	2200      	movs	r2, #0
    fc2e:	4611      	mov	r1, r2
    fc30:	4610      	mov	r0, r2
    fc32:	f7fb fe9f 	bl	b974 <mayfly_enqueue>
	LL_ASSERT(!retval);
    fc36:	b108      	cbz	r0, fc3c <event_stop+0x18>
    fc38:	f7ff ffda 	bl	fbf0 <event_stop.part.11>
    fc3c:	bd08      	pop	{r3, pc}
    fc3e:	bf00      	nop
    fc40:	2000a018 	.word	0x2000a018

0000fc44 <event_active>:
{
    fc44:	b507      	push	{r0, r1, r2, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    fc46:	2200      	movs	r2, #0
    fc48:	4b0b      	ldr	r3, [pc, #44]	; (fc78 <event_active+0x34>)
    fc4a:	4611      	mov	r1, r2
    fc4c:	4610      	mov	r0, r2
    fc4e:	f7fb fe91 	bl	b974 <mayfly_enqueue>
	LL_ASSERT(!retval);
    fc52:	b170      	cbz	r0, fc72 <event_active+0x2e>
    fc54:	4b09      	ldr	r3, [pc, #36]	; (fc7c <event_active+0x38>)
    fc56:	9301      	str	r3, [sp, #4]
    fc58:	9300      	str	r3, [sp, #0]
    fc5a:	4a09      	ldr	r2, [pc, #36]	; (fc80 <event_active+0x3c>)
    fc5c:	4b09      	ldr	r3, [pc, #36]	; (fc84 <event_active+0x40>)
    fc5e:	490a      	ldr	r1, [pc, #40]	; (fc88 <event_active+0x44>)
    fc60:	480a      	ldr	r0, [pc, #40]	; (fc8c <event_active+0x48>)
    fc62:	f7f2 fb17 	bl	2294 <printk>
    fc66:	4040      	eors	r0, r0
    fc68:	f380 8811 	msr	BASEPRI, r0
    fc6c:	f04f 0004 	mov.w	r0, #4
    fc70:	df02      	svc	2
}
    fc72:	b003      	add	sp, #12
    fc74:	f85d fb04 	ldr.w	pc, [sp], #4
    fc78:	20009fd8 	.word	0x20009fd8
    fc7c:	00023dae 	.word	0x00023dae
    fc80:	00022d76 	.word	0x00022d76
    fc84:	00025b66 	.word	0x00025b66
    fc88:	000272d8 	.word	0x000272d8
    fc8c:	000266a2 	.word	0x000266a2

0000fc90 <event_xtal>:
{
    fc90:	b507      	push	{r0, r1, r2, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    fc92:	2200      	movs	r2, #0
    fc94:	4b0b      	ldr	r3, [pc, #44]	; (fcc4 <event_xtal+0x34>)
    fc96:	4611      	mov	r1, r2
    fc98:	4610      	mov	r0, r2
    fc9a:	f7fb fe6b 	bl	b974 <mayfly_enqueue>
	LL_ASSERT(!retval);
    fc9e:	b170      	cbz	r0, fcbe <event_xtal+0x2e>
    fca0:	4b09      	ldr	r3, [pc, #36]	; (fcc8 <event_xtal+0x38>)
    fca2:	9301      	str	r3, [sp, #4]
    fca4:	9300      	str	r3, [sp, #0]
    fca6:	4a09      	ldr	r2, [pc, #36]	; (fccc <event_xtal+0x3c>)
    fca8:	4b09      	ldr	r3, [pc, #36]	; (fcd0 <event_xtal+0x40>)
    fcaa:	490a      	ldr	r1, [pc, #40]	; (fcd4 <event_xtal+0x44>)
    fcac:	480a      	ldr	r0, [pc, #40]	; (fcd8 <event_xtal+0x48>)
    fcae:	f7f2 faf1 	bl	2294 <printk>
    fcb2:	4040      	eors	r0, r0
    fcb4:	f380 8811 	msr	BASEPRI, r0
    fcb8:	f04f 0004 	mov.w	r0, #4
    fcbc:	df02      	svc	2
}
    fcbe:	b003      	add	sp, #12
    fcc0:	f85d fb04 	ldr.w	pc, [sp], #4
    fcc4:	2000a078 	.word	0x2000a078
    fcc8:	00023dae 	.word	0x00023dae
    fccc:	00022d76 	.word	0x00022d76
    fcd0:	00025b82 	.word	0x00025b82
    fcd4:	000272d8 	.word	0x000272d8
    fcd8:	000266a2 	.word	0x000266a2

0000fcdc <mayfly_radio_active>:
{
    fcdc:	b507      	push	{r0, r1, r2, lr}
    fcde:	4a12      	ldr	r2, [pc, #72]	; (fd28 <mayfly_radio_active+0x4c>)
		if (s_active++) {
    fce0:	7813      	ldrb	r3, [r2, #0]
	if ((u32_t)params) {
    fce2:	b140      	cbz	r0, fcf6 <mayfly_radio_active+0x1a>
		if (s_active++) {
    fce4:	1c59      	adds	r1, r3, #1
    fce6:	7011      	strb	r1, [r2, #0]
    fce8:	b9d3      	cbnz	r3, fd20 <mayfly_radio_active+0x44>
		radio_active_callback(1);
    fcea:	2001      	movs	r0, #1
}
    fcec:	b003      	add	sp, #12
    fcee:	f85d eb04 	ldr.w	lr, [sp], #4
		radio_active_callback(0);
    fcf2:	f006 bffd 	b.w	16cf0 <radio_active_callback>
		LL_ASSERT(s_active);
    fcf6:	b973      	cbnz	r3, fd16 <mayfly_radio_active+0x3a>
    fcf8:	4b0c      	ldr	r3, [pc, #48]	; (fd2c <mayfly_radio_active+0x50>)
    fcfa:	9301      	str	r3, [sp, #4]
    fcfc:	9300      	str	r3, [sp, #0]
    fcfe:	4a0c      	ldr	r2, [pc, #48]	; (fd30 <mayfly_radio_active+0x54>)
    fd00:	4b0c      	ldr	r3, [pc, #48]	; (fd34 <mayfly_radio_active+0x58>)
    fd02:	490d      	ldr	r1, [pc, #52]	; (fd38 <mayfly_radio_active+0x5c>)
    fd04:	480d      	ldr	r0, [pc, #52]	; (fd3c <mayfly_radio_active+0x60>)
    fd06:	f7f2 fac5 	bl	2294 <printk>
    fd0a:	4040      	eors	r0, r0
    fd0c:	f380 8811 	msr	BASEPRI, r0
    fd10:	f04f 0004 	mov.w	r0, #4
    fd14:	df02      	svc	2
		if (--s_active) {
    fd16:	3b01      	subs	r3, #1
    fd18:	b2db      	uxtb	r3, r3
    fd1a:	7013      	strb	r3, [r2, #0]
    fd1c:	2b00      	cmp	r3, #0
    fd1e:	d0e5      	beq.n	fcec <mayfly_radio_active+0x10>
}
    fd20:	b003      	add	sp, #12
    fd22:	f85d fb04 	ldr.w	pc, [sp], #4
    fd26:	bf00      	nop
    fd28:	200013d1 	.word	0x200013d1
    fd2c:	00023dae 	.word	0x00023dae
    fd30:	00022d76 	.word	0x00022d76
    fd34:	00025b52 	.word	0x00025b52
    fd38:	000272d8 	.word	0x000272d8
    fd3c:	000265f7 	.word	0x000265f7

0000fd40 <mayfly_radio_inactive>:
	mayfly_radio_active(0);
    fd40:	2000      	movs	r0, #0
    fd42:	f7ff bfcb 	b.w	fcdc <mayfly_radio_active>
	...

0000fd48 <mayfly_radio_stop>:
{
    fd48:	b507      	push	{r0, r1, r2, lr}
	enum state state = (enum state)((u32_t)params & 0xff);
    fd4a:	b2c0      	uxtb	r0, r0
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
    fd4c:	1f03      	subs	r3, r0, #4
    fd4e:	2b01      	cmp	r3, #1
    fd50:	d90e      	bls.n	fd70 <mayfly_radio_stop+0x28>
    fd52:	4b11      	ldr	r3, [pc, #68]	; (fd98 <mayfly_radio_stop+0x50>)
    fd54:	9301      	str	r3, [sp, #4]
    fd56:	9300      	str	r3, [sp, #0]
    fd58:	4a10      	ldr	r2, [pc, #64]	; (fd9c <mayfly_radio_stop+0x54>)
    fd5a:	4b11      	ldr	r3, [pc, #68]	; (fda0 <mayfly_radio_stop+0x58>)
    fd5c:	4911      	ldr	r1, [pc, #68]	; (fda4 <mayfly_radio_stop+0x5c>)
    fd5e:	4812      	ldr	r0, [pc, #72]	; (fda8 <mayfly_radio_stop+0x60>)
    fd60:	f7f2 fa98 	bl	2294 <printk>
    fd64:	4040      	eors	r0, r0
    fd66:	f380 8811 	msr	BASEPRI, r0
    fd6a:	f04f 0004 	mov.w	r0, #4
    fd6e:	df02      	svc	2
	radio_used = ((_radio.state != STATE_NONE) &&
    fd70:	4a0e      	ldr	r2, [pc, #56]	; (fdac <mayfly_radio_stop+0x64>)
    fd72:	7d13      	ldrb	r3, [r2, #20]
		      (_radio.state != STATE_STOP) &&
    fd74:	b143      	cbz	r3, fd88 <mayfly_radio_stop+0x40>
	radio_used = ((_radio.state != STATE_NONE) &&
    fd76:	3b04      	subs	r3, #4
    fd78:	2b01      	cmp	r3, #1
    fd7a:	d905      	bls.n	fd88 <mayfly_radio_stop+0x40>
			_radio.state = state;
    fd7c:	7510      	strb	r0, [r2, #20]
}
    fd7e:	b003      	add	sp, #12
    fd80:	f85d eb04 	ldr.w	lr, [sp], #4
		radio_disable();
    fd84:	f008 be00 	b.w	18988 <radio_disable>
	if (radio_used || !radio_is_idle()) {
    fd88:	f008 fe30 	bl	189ec <radio_is_idle>
    fd8c:	2800      	cmp	r0, #0
    fd8e:	d0f6      	beq.n	fd7e <mayfly_radio_stop+0x36>
}
    fd90:	b003      	add	sp, #12
    fd92:	f85d fb04 	ldr.w	pc, [sp], #4
    fd96:	bf00      	nop
    fd98:	00023dae 	.word	0x00023dae
    fd9c:	00022d76 	.word	0x00022d76
    fda0:	00025c24 	.word	0x00025c24
    fda4:	000272d8 	.word	0x000272d8
    fda8:	00026621 	.word	0x00026621
    fdac:	20000bf0 	.word	0x20000bf0

0000fdb0 <pdu_node_tx_release>:
{
    fdb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	last = _radio.packet_release_last + 1;
    fdb2:	4a17      	ldr	r2, [pc, #92]	; (fe10 <pdu_node_tx_release+0x60>)
    fdb4:	f892 3780 	ldrb.w	r3, [r2, #1920]	; 0x780
	if (last == _radio.packet_tx_count) {
    fdb8:	f892 477c 	ldrb.w	r4, [r2, #1916]	; 0x77c
	last = _radio.packet_release_last + 1;
    fdbc:	3301      	adds	r3, #1
    fdbe:	b2db      	uxtb	r3, r3
		last = 0;
    fdc0:	429c      	cmp	r4, r3
    fdc2:	bf08      	it	eq
    fdc4:	2300      	moveq	r3, #0
	LL_ASSERT(last != _radio.packet_release_first);
    fdc6:	f892 477f 	ldrb.w	r4, [r2, #1919]	; 0x77f
    fdca:	429c      	cmp	r4, r3
    fdcc:	d10e      	bne.n	fdec <pdu_node_tx_release+0x3c>
    fdce:	4b11      	ldr	r3, [pc, #68]	; (fe14 <pdu_node_tx_release+0x64>)
    fdd0:	9301      	str	r3, [sp, #4]
    fdd2:	9300      	str	r3, [sp, #0]
    fdd4:	4a10      	ldr	r2, [pc, #64]	; (fe18 <pdu_node_tx_release+0x68>)
    fdd6:	4b11      	ldr	r3, [pc, #68]	; (fe1c <pdu_node_tx_release+0x6c>)
    fdd8:	4911      	ldr	r1, [pc, #68]	; (fe20 <pdu_node_tx_release+0x70>)
    fdda:	4812      	ldr	r0, [pc, #72]	; (fe24 <pdu_node_tx_release+0x74>)
    fddc:	f7f2 fa5a 	bl	2294 <printk>
    fde0:	4040      	eors	r0, r0
    fde2:	f380 8811 	msr	BASEPRI, r0
    fde6:	f04f 0004 	mov.w	r0, #4
    fdea:	df02      	svc	2
	_radio.pkt_release[_radio.packet_release_last].handle = handle;
    fdec:	f892 5780 	ldrb.w	r5, [r2, #1920]	; 0x780
    fdf0:	f8d2 4778 	ldr.w	r4, [r2, #1912]	; 0x778
    fdf4:	f824 0035 	strh.w	r0, [r4, r5, lsl #3]
	_radio.pkt_release[_radio.packet_release_last].node_tx = node_tx;
    fdf8:	f892 0780 	ldrb.w	r0, [r2, #1920]	; 0x780
    fdfc:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
    fe00:	6061      	str	r1, [r4, #4]
	_radio.packet_release_last = last;
    fe02:	f882 3780 	strb.w	r3, [r2, #1920]	; 0x780
}
    fe06:	b003      	add	sp, #12
    fe08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	radio_event_callback();
    fe0c:	f006 bf72 	b.w	16cf4 <radio_event_callback>
    fe10:	20000bf0 	.word	0x20000bf0
    fe14:	00023dae 	.word	0x00023dae
    fe18:	00022d76 	.word	0x00022d76
    fe1c:	00025e08 	.word	0x00025e08
    fe20:	000272d8 	.word	0x000272d8
    fe24:	00026772 	.word	0x00026772

0000fe28 <packet_tx_enqueue>:
{
    fe28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    fe2c:	4c24      	ldr	r4, [pc, #144]	; (fec0 <packet_tx_enqueue+0x98>)
{
    fe2e:	4606      	mov	r6, r0
		node_tx_new->next = NULL;
    fe30:	2700      	movs	r7, #0
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    fe32:	b12e      	cbz	r6, fe40 <packet_tx_enqueue+0x18>
    fe34:	f894 377d 	ldrb.w	r3, [r4, #1917]	; 0x77d
    fe38:	f894 277e 	ldrb.w	r2, [r4, #1918]	; 0x77e
    fe3c:	429a      	cmp	r2, r3
    fe3e:	d101      	bne.n	fe44 <packet_tx_enqueue+0x1c>
    fe40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    fe44:	f894 877d 	ldrb.w	r8, [r4, #1917]	; 0x77d
    fe48:	f8d4 9774 	ldr.w	r9, [r4, #1908]	; 0x774
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    fe4c:	f8d4 0710 	ldr.w	r0, [r4, #1808]	; 0x710
    fe50:	f839 2038 	ldrh.w	r2, [r9, r8, lsl #3]
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    fe54:	eb09 03c8 	add.w	r3, r9, r8, lsl #3
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    fe58:	f44f 71aa 	mov.w	r1, #340	; 0x154
		node_tx_new = pdu_data_q_tx->node_tx;
    fe5c:	685d      	ldr	r5, [r3, #4]
		node_tx_new->next = NULL;
    fe5e:	602f      	str	r7, [r5, #0]
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    fe60:	f7fb fcf2 	bl	b848 <mem_get>
    fe64:	4603      	mov	r3, r0
		if (conn->handle == pdu_data_q_tx->handle) {
    fe66:	f839 0038 	ldrh.w	r0, [r9, r8, lsl #3]
    fe6a:	8c1a      	ldrh	r2, [r3, #32]
    fe6c:	4282      	cmp	r2, r0
    fe6e:	d11f      	bne.n	feb0 <packet_tx_enqueue+0x88>
			if (conn->pkt_tx_data == 0) {
    fe70:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    fe74:	b942      	cbnz	r2, fe88 <packet_tx_enqueue+0x60>
				if (conn->pkt_tx_head == 0) {
    fe76:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
				conn->pkt_tx_data = node_tx_new;
    fe7a:	f8c3 5148 	str.w	r5, [r3, #328]	; 0x148
				if (conn->pkt_tx_head == 0) {
    fe7e:	b91a      	cbnz	r2, fe88 <packet_tx_enqueue+0x60>
					conn->pkt_tx_head = node_tx_new;
    fe80:	f8c3 513c 	str.w	r5, [r3, #316]	; 0x13c
					conn->pkt_tx_last = NULL;
    fe84:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
			if (conn->pkt_tx_last) {
    fe88:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
    fe8c:	b102      	cbz	r2, fe90 <packet_tx_enqueue+0x68>
				conn->pkt_tx_last->next = node_tx_new;
    fe8e:	6015      	str	r5, [r2, #0]
			conn->pkt_tx_last = node_tx_new;
    fe90:	f8c3 514c 	str.w	r5, [r3, #332]	; 0x14c
		first = _radio.packet_tx_first + 1;
    fe94:	f894 377d 	ldrb.w	r3, [r4, #1917]	; 0x77d
		if (first == _radio.packet_tx_count) {
    fe98:	f894 277c 	ldrb.w	r2, [r4, #1916]	; 0x77c
		first = _radio.packet_tx_first + 1;
    fe9c:	3301      	adds	r3, #1
    fe9e:	b2db      	uxtb	r3, r3
			first = 0;
    fea0:	429a      	cmp	r2, r3
    fea2:	bf08      	it	eq
    fea4:	2300      	moveq	r3, #0
    fea6:	3e01      	subs	r6, #1
		_radio.packet_tx_first = first;
    fea8:	f884 377d 	strb.w	r3, [r4, #1917]	; 0x77d
    feac:	b2f6      	uxtb	r6, r6
    feae:	e7c0      	b.n	fe32 <packet_tx_enqueue+0xa>
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    feb0:	792b      	ldrb	r3, [r5, #4]
    feb2:	f367 0301 	bfi	r3, r7, #0, #2
    feb6:	712b      	strb	r3, [r5, #4]
			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
    feb8:	4629      	mov	r1, r5
    feba:	f7ff ff79 	bl	fdb0 <pdu_node_tx_release>
    febe:	e7e9      	b.n	fe94 <packet_tx_enqueue+0x6c>
    fec0:	20000bf0 	.word	0x20000bf0

0000fec4 <connection_release>:
{
    fec4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    fec6:	2201      	movs	r2, #1
{
    fec8:	4604      	mov	r4, r0
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    feca:	4611      	mov	r1, r2
    fecc:	2000      	movs	r0, #0
    fece:	f7fb fd29 	bl	b924 <mayfly_enable>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    fed2:	f894 2020 	ldrb.w	r2, [r4, #32]
	ticker_status =
    fed6:	2100      	movs	r1, #0
    fed8:	f242 733a 	movw	r3, #10042	; 0x273a
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    fedc:	3207      	adds	r2, #7
	ticker_status =
    fede:	9300      	str	r3, [sp, #0]
    fee0:	4608      	mov	r0, r1
    fee2:	4b3e      	ldr	r3, [pc, #248]	; (ffdc <connection_release+0x118>)
    fee4:	b2d2      	uxtb	r2, r2
    fee6:	f7fc fba1 	bl	c62c <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    feea:	f030 0102 	bics.w	r1, r0, #2
    feee:	d00e      	beq.n	ff0e <connection_release+0x4a>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    fef0:	4b3b      	ldr	r3, [pc, #236]	; (ffe0 <connection_release+0x11c>)
    fef2:	9301      	str	r3, [sp, #4]
    fef4:	9300      	str	r3, [sp, #0]
    fef6:	4a3b      	ldr	r2, [pc, #236]	; (ffe4 <connection_release+0x120>)
    fef8:	4b3b      	ldr	r3, [pc, #236]	; (ffe8 <connection_release+0x124>)
    fefa:	493c      	ldr	r1, [pc, #240]	; (ffec <connection_release+0x128>)
    fefc:	483c      	ldr	r0, [pc, #240]	; (fff0 <connection_release+0x12c>)
    fefe:	f7f2 f9c9 	bl	2294 <printk>
    ff02:	4040      	eors	r0, r0
    ff04:	f380 8811 	msr	BASEPRI, r0
    ff08:	f04f 0004 	mov.w	r0, #4
    ff0c:	df02      	svc	2
	if ((_radio.state == STATE_ABORT) &&
    ff0e:	4b39      	ldr	r3, [pc, #228]	; (fff4 <connection_release+0x130>)
    ff10:	7d1a      	ldrb	r2, [r3, #20]
    ff12:	2a05      	cmp	r2, #5
    ff14:	461d      	mov	r5, r3
    ff16:	d11b      	bne.n	ff50 <connection_release+0x8c>
					  conn->handle))) {
    ff18:	8c22      	ldrh	r2, [r4, #32]
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
    ff1a:	7c18      	ldrb	r0, [r3, #16]
    ff1c:	3207      	adds	r2, #7
	if ((_radio.state == STATE_ABORT) &&
    ff1e:	4290      	cmp	r0, r2
    ff20:	d116      	bne.n	ff50 <connection_release+0x8c>
		_radio.ticker_id_prepare = 0;
    ff22:	7419      	strb	r1, [r3, #16]
		ticker_status =
    ff24:	f242 734b 	movw	r3, #10059	; 0x274b
    ff28:	9300      	str	r3, [sp, #0]
    ff2a:	2201      	movs	r2, #1
    ff2c:	4b2b      	ldr	r3, [pc, #172]	; (ffdc <connection_release+0x118>)
    ff2e:	4608      	mov	r0, r1
    ff30:	f7fc fb7c 	bl	c62c <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ff34:	f030 0202 	bics.w	r2, r0, #2
    ff38:	d1da      	bne.n	fef0 <connection_release+0x2c>
		ticker_status =
    ff3a:	f242 7352 	movw	r3, #10066	; 0x2752
    ff3e:	9300      	str	r3, [sp, #0]
    ff40:	4611      	mov	r1, r2
    ff42:	4b26      	ldr	r3, [pc, #152]	; (ffdc <connection_release+0x118>)
    ff44:	4610      	mov	r0, r2
    ff46:	f7fc fb71 	bl	c62c <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ff4a:	f030 0302 	bics.w	r3, r0, #2
    ff4e:	d1cf      	bne.n	fef0 <connection_release+0x2c>
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
    ff50:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    ff54:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    ff58:	4299      	cmp	r1, r3
    ff5a:	d003      	beq.n	ff64 <connection_release+0xa0>
    ff5c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    ff60:	4299      	cmp	r1, r3
    ff62:	d101      	bne.n	ff68 <connection_release+0xa4>
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    ff64:	4e24      	ldr	r6, [pc, #144]	; (fff8 <connection_release+0x134>)
    ff66:	e012      	b.n	ff8e <connection_release+0xca>
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    ff68:	790b      	ldrb	r3, [r1, #4]
    ff6a:	f36f 0301 	bfc	r3, #0, #2
    ff6e:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    ff70:	680b      	ldr	r3, [r1, #0]
    ff72:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		pdu_node_tx_release(conn->handle, node_tx);
    ff76:	8c20      	ldrh	r0, [r4, #32]
    ff78:	f7ff ff1a 	bl	fdb0 <pdu_node_tx_release>
    ff7c:	e7e8      	b.n	ff50 <connection_release+0x8c>
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    ff7e:	6803      	ldr	r3, [r0, #0]
    ff80:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		conn->pkt_tx_ctrl = conn->pkt_tx_head;
    ff84:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    ff88:	4631      	mov	r1, r6
    ff8a:	f7fb fc42 	bl	b812 <mem_release>
	while ((conn->pkt_tx_head) &&
    ff8e:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
    ff92:	b118      	cbz	r0, ff9c <connection_release+0xd8>
    ff94:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    ff98:	4298      	cmp	r0, r3
    ff9a:	d1f0      	bne.n	ff7e <connection_release+0xba>
	conn->pkt_tx_ctrl = NULL;
    ff9c:	2300      	movs	r3, #0
    ff9e:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	conn->pkt_tx_ctrl_last = NULL;
    ffa2:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
	while (conn->pkt_tx_head) {
    ffa6:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    ffaa:	b951      	cbnz	r1, ffc2 <connection_release+0xfe>
	conn->handle = 0xffff;
    ffac:	f64f 73ff 	movw	r3, #65535	; 0xffff
    ffb0:	8423      	strh	r3, [r4, #32]
	if (_radio.conn_upd == conn) {
    ffb2:	f8d5 3790 	ldr.w	r3, [r5, #1936]	; 0x790
    ffb6:	429c      	cmp	r4, r3
		_radio.conn_upd = NULL;
    ffb8:	bf08      	it	eq
    ffba:	f8c5 1790 	streq.w	r1, [r5, #1936]	; 0x790
}
    ffbe:	b002      	add	sp, #8
    ffc0:	bd70      	pop	{r4, r5, r6, pc}
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    ffc2:	790b      	ldrb	r3, [r1, #4]
    ffc4:	f36f 0301 	bfc	r3, #0, #2
    ffc8:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    ffca:	680b      	ldr	r3, [r1, #0]
    ffcc:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		conn->pkt_tx_data = conn->pkt_tx_head;
    ffd0:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
		pdu_node_tx_release(conn->handle, node_tx);
    ffd4:	8c20      	ldrh	r0, [r4, #32]
    ffd6:	f7ff feeb 	bl	fdb0 <pdu_node_tx_release>
    ffda:	e7e4      	b.n	ffa6 <connection_release+0xe2>
    ffdc:	0000f9b5 	.word	0x0000f9b5
    ffe0:	00023dae 	.word	0x00023dae
    ffe4:	00022d76 	.word	0x00022d76
    ffe8:	00025e1c 	.word	0x00025e1c
    ffec:	000272d8 	.word	0x000272d8
    fff0:	00025f18 	.word	0x00025f18
    fff4:	20000bf0 	.word	0x20000bf0
    fff8:	20001354 	.word	0x20001354

0000fffc <ticker_stop_adv_stop>:
{
    fffc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    fffe:	4c52      	ldr	r4, [pc, #328]	; (10148 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x149>)
	if (status != TICKER_STATUS_SUCCESS) {
   10000:	b190      	cbz	r0, 10028 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x29>
		LL_ASSERT(_radio.ticker_id_stop == RADIO_TICKER_ID_ADV);
   10002:	7ca3      	ldrb	r3, [r4, #18]
   10004:	2b05      	cmp	r3, #5
   10006:	f000 809c 	beq.w	10142 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x143>
   1000a:	4b50      	ldr	r3, [pc, #320]	; (1014c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x14d>)
   1000c:	9301      	str	r3, [sp, #4]
   1000e:	9300      	str	r3, [sp, #0]
   10010:	4a4f      	ldr	r2, [pc, #316]	; (10150 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x151>)
   10012:	4b50      	ldr	r3, [pc, #320]	; (10154 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x155>)
   10014:	4950      	ldr	r1, [pc, #320]	; (10158 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x159>)
   10016:	4851      	ldr	r0, [pc, #324]	; (1015c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x15d>)
		LL_ASSERT(_radio.ticker_id_prepare);
   10018:	f7f2 f93c 	bl	2294 <printk>
   1001c:	4040      	eors	r0, r0
   1001e:	f380 8811 	msr	BASEPRI, r0
   10022:	f04f 0004 	mov.w	r0, #4
   10026:	df02      	svc	2
	if ((_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV) ||
   10028:	7c23      	ldrb	r3, [r4, #16]
   1002a:	2b05      	cmp	r3, #5
   1002c:	d002      	beq.n	10034 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x35>
	    (_radio.ticker_id_event == RADIO_TICKER_ID_ADV)) {
   1002e:	7c63      	ldrb	r3, [r4, #17]
	if ((_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV) ||
   10030:	2b05      	cmp	r3, #5
   10032:	d16d      	bne.n	10110 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x111>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
   10034:	ab04      	add	r3, sp, #16
   10036:	2202      	movs	r2, #2
   10038:	f843 2d08 	str.w	r2, [r3, #-8]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   1003c:	2200      	movs	r2, #0
   1003e:	9300      	str	r3, [sp, #0]
   10040:	2101      	movs	r1, #1
   10042:	4b47      	ldr	r3, [pc, #284]	; (10160 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x161>)
   10044:	4610      	mov	r0, r2
   10046:	f7fc faf1 	bl	c62c <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
   1004a:	2802      	cmp	r0, #2
   1004c:	d00d      	beq.n	1006a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x6b>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
   1004e:	9802      	ldr	r0, [sp, #8]
   10050:	b1c0      	cbz	r0, 10084 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x85>
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
   10052:	9802      	ldr	r0, [sp, #8]
   10054:	2801      	cmp	r0, #1
   10056:	d16c      	bne.n	10132 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x133>
		if (_radio.role != ROLE_NONE) {
   10058:	7ce3      	ldrb	r3, [r4, #19]
   1005a:	2b00      	cmp	r3, #0
   1005c:	d058      	beq.n	10110 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x111>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
   1005e:	4b41      	ldr	r3, [pc, #260]	; (10164 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x165>)
   10060:	2204      	movs	r2, #4
   10062:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
   10064:	2200      	movs	r2, #0
   10066:	4611      	mov	r1, r2
   10068:	e04e      	b.n	10108 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x109>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
   1006a:	2201      	movs	r2, #1
   1006c:	4611      	mov	r1, r2
   1006e:	4610      	mov	r0, r2
   10070:	f7fb fc58 	bl	b924 <mayfly_enable>
		while (ret_cb_evt == TICKER_STATUS_BUSY) {
   10074:	9b02      	ldr	r3, [sp, #8]
   10076:	2b02      	cmp	r3, #2
   10078:	d1e9      	bne.n	1004e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x4f>
			ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   1007a:	2101      	movs	r1, #1
   1007c:	2000      	movs	r0, #0
   1007e:	f7fc fb8f 	bl	c7a0 <ticker_job_sched>
   10082:	e7f7      	b.n	10074 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x75>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
   10084:	2302      	movs	r3, #2
   10086:	9303      	str	r3, [sp, #12]
		LL_ASSERT(_radio.ticker_id_prepare);
   10088:	7c23      	ldrb	r3, [r4, #16]
   1008a:	b93b      	cbnz	r3, 1009c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x9d>
   1008c:	4b2f      	ldr	r3, [pc, #188]	; (1014c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x14d>)
   1008e:	9301      	str	r3, [sp, #4]
   10090:	9300      	str	r3, [sp, #0]
   10092:	4a2f      	ldr	r2, [pc, #188]	; (10150 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x151>)
   10094:	4b34      	ldr	r3, [pc, #208]	; (10168 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x169>)
   10096:	4930      	ldr	r1, [pc, #192]	; (10158 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x159>)
   10098:	4834      	ldr	r0, [pc, #208]	; (1016c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x16d>)
   1009a:	e7bd      	b.n	10018 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x19>
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   1009c:	ab03      	add	r3, sp, #12
   1009e:	2201      	movs	r2, #1
		_radio.ticker_id_prepare = 0;
   100a0:	7420      	strb	r0, [r4, #16]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   100a2:	4611      	mov	r1, r2
   100a4:	9300      	str	r3, [sp, #0]
   100a6:	4b2e      	ldr	r3, [pc, #184]	; (10160 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x161>)
   100a8:	f7fc fac0 	bl	c62c <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
   100ac:	2802      	cmp	r0, #2
   100ae:	d015      	beq.n	100dc <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xdd>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
   100b0:	9a03      	ldr	r2, [sp, #12]
   100b2:	b302      	cbz	r2, 100f6 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xf7>
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
   100b4:	9c03      	ldr	r4, [sp, #12]
   100b6:	2c01      	cmp	r4, #1
   100b8:	d13b      	bne.n	10132 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x133>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
   100ba:	2200      	movs	r2, #0
   100bc:	4611      	mov	r1, r2
   100be:	4b2c      	ldr	r3, [pc, #176]	; (10170 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x171>)
   100c0:	4620      	mov	r0, r4
   100c2:	f7fb fc57 	bl	b974 <mayfly_enqueue>
			LL_ASSERT(!ret);
   100c6:	4602      	mov	r2, r0
   100c8:	2800      	cmp	r0, #0
   100ca:	d030      	beq.n	1012e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x12f>
			LL_ASSERT(!ret);
   100cc:	4b1f      	ldr	r3, [pc, #124]	; (1014c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x14d>)
   100ce:	9301      	str	r3, [sp, #4]
   100d0:	9300      	str	r3, [sp, #0]
   100d2:	4a1f      	ldr	r2, [pc, #124]	; (10150 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x151>)
   100d4:	4b24      	ldr	r3, [pc, #144]	; (10168 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x169>)
   100d6:	4920      	ldr	r1, [pc, #128]	; (10158 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x159>)
   100d8:	4826      	ldr	r0, [pc, #152]	; (10174 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x175>)
   100da:	e79d      	b.n	10018 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x19>
			mayfly_enable(RADIO_TICKER_USER_ID_JOB,
   100dc:	2201      	movs	r2, #1
   100de:	4611      	mov	r1, r2
   100e0:	4610      	mov	r0, r2
   100e2:	f7fb fc1f 	bl	b924 <mayfly_enable>
			while (ret_cb_m0 == TICKER_STATUS_BUSY) {
   100e6:	9b03      	ldr	r3, [sp, #12]
   100e8:	2b02      	cmp	r3, #2
   100ea:	d1e1      	bne.n	100b0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xb1>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   100ec:	2101      	movs	r1, #1
   100ee:	2000      	movs	r0, #0
   100f0:	f7fc fb56 	bl	c7a0 <ticker_job_sched>
   100f4:	e7f7      	b.n	100e6 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xe7>
			u32_t ticks_xtal_to_start =
   100f6:	69a3      	ldr	r3, [r4, #24]
			if (_radio.advertiser.hdr.ticks_active_to_start >
   100f8:	69e1      	ldr	r1, [r4, #28]
			ticks_xtal_to_start &= ~XON_BITMASK;
   100fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			if (_radio.advertiser.hdr.ticks_active_to_start >
   100fe:	428b      	cmp	r3, r1
   10100:	d215      	bcs.n	1012e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x12f>
				ret = mayfly_enqueue(
   10102:	4b1b      	ldr	r3, [pc, #108]	; (10170 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x171>)
				ret = mayfly_enqueue(
   10104:	4611      	mov	r1, r2
   10106:	2001      	movs	r0, #1
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
   10108:	f7fb fc34 	bl	b974 <mayfly_enqueue>
			LL_ASSERT(!ret);
   1010c:	2800      	cmp	r0, #0
   1010e:	d1dd      	bne.n	100cc <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xcd>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
   10110:	2200      	movs	r2, #0
   10112:	4b19      	ldr	r3, [pc, #100]	; (10178 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x179>)
   10114:	4611      	mov	r1, r2
   10116:	2001      	movs	r0, #1
   10118:	f7fb fc2c 	bl	b974 <mayfly_enqueue>
	LL_ASSERT(!retval);
   1011c:	b188      	cbz	r0, 10142 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x143>
   1011e:	4b0b      	ldr	r3, [pc, #44]	; (1014c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x14d>)
   10120:	9301      	str	r3, [sp, #4]
   10122:	9300      	str	r3, [sp, #0]
   10124:	4a0a      	ldr	r2, [pc, #40]	; (10150 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x151>)
   10126:	4b0b      	ldr	r3, [pc, #44]	; (10154 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x155>)
   10128:	490b      	ldr	r1, [pc, #44]	; (10158 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x159>)
   1012a:	4814      	ldr	r0, [pc, #80]	; (1017c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x17d>)
   1012c:	e774      	b.n	10018 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x19>
				ret = mayfly_enqueue(
   1012e:	4b14      	ldr	r3, [pc, #80]	; (10180 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x181>)
   10130:	e7e8      	b.n	10104 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x105>
		LL_ASSERT(0);
   10132:	4b06      	ldr	r3, [pc, #24]	; (1014c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x14d>)
   10134:	9301      	str	r3, [sp, #4]
   10136:	9300      	str	r3, [sp, #0]
   10138:	4a05      	ldr	r2, [pc, #20]	; (10150 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x151>)
   1013a:	4b0b      	ldr	r3, [pc, #44]	; (10168 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x169>)
   1013c:	4906      	ldr	r1, [pc, #24]	; (10158 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x159>)
   1013e:	4811      	ldr	r0, [pc, #68]	; (10184 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x185>)
   10140:	e76a      	b.n	10018 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x19>
}
   10142:	b004      	add	sp, #16
   10144:	bd10      	pop	{r4, pc}
   10146:	bf00      	nop
   10148:	20000bf0 	.word	0x20000bf0
   1014c:	00023dae 	.word	0x00023dae
   10150:	00022d76 	.word	0x00022d76
   10154:	00025ce7 	.word	0x00025ce7
   10158:	000272d8 	.word	0x000272d8
   1015c:	00026b3a 	.word	0x00026b3a
   10160:	0000e56d 	.word	0x0000e56d
   10164:	2000a028 	.word	0x2000a028
   10168:	00025ccb 	.word	0x00025ccb
   1016c:	000268c2 	.word	0x000268c2
   10170:	20009ff8 	.word	0x20009ff8
   10174:	0002692c 	.word	0x0002692c
   10178:	20009fc8 	.word	0x20009fc8
   1017c:	000266a2 	.word	0x000266a2
   10180:	2000a0b8 	.word	0x2000a0b8
   10184:	00023fa5 	.word	0x00023fa5

00010188 <sched_after_mstr_free_offset_get>:
{
   10188:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1018a:	4616      	mov	r6, r2
	u32_t ticks_anchor_offset = ticks_anchor;
   1018c:	aa04      	add	r2, sp, #16
{
   1018e:	461c      	mov	r4, r3
   10190:	4605      	mov	r5, r0
	u32_t ticks_anchor_offset = ticks_anchor;
   10192:	f842 6d04 	str.w	r6, [r2, #-4]!
	sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_JOB,
   10196:	3127      	adds	r1, #39	; 0x27
   10198:	2001      	movs	r0, #1
   1019a:	f7ff fa35 	bl	f608 <sched_after_mstr_free_slot_get>
	if (!*win_offset_us) {
   1019e:	6823      	ldr	r3, [r4, #0]
   101a0:	b363      	cbz	r3, 101fc <sched_after_mstr_free_offset_get+0x74>
	LL_ASSERT(!((ticks_anchor_offset - ticks_anchor) &
   101a2:	9803      	ldr	r0, [sp, #12]
   101a4:	1b83      	subs	r3, r0, r6
   101a6:	021b      	lsls	r3, r3, #8
   101a8:	d50e      	bpl.n	101c8 <sched_after_mstr_free_offset_get+0x40>
   101aa:	4b19      	ldr	r3, [pc, #100]	; (10210 <sched_after_mstr_free_offset_get+0x88>)
   101ac:	9301      	str	r3, [sp, #4]
   101ae:	9300      	str	r3, [sp, #0]
   101b0:	4a18      	ldr	r2, [pc, #96]	; (10214 <sched_after_mstr_free_offset_get+0x8c>)
   101b2:	4b19      	ldr	r3, [pc, #100]	; (10218 <sched_after_mstr_free_offset_get+0x90>)
   101b4:	4919      	ldr	r1, [pc, #100]	; (1021c <sched_after_mstr_free_offset_get+0x94>)
   101b6:	481a      	ldr	r0, [pc, #104]	; (10220 <sched_after_mstr_free_offset_get+0x98>)
   101b8:	f7f2 f86c 	bl	2294 <printk>
   101bc:	4040      	eors	r0, r0
   101be:	f380 8811 	msr	BASEPRI, r0
   101c2:	f04f 0004 	mov.w	r0, #4
   101c6:	df02      	svc	2
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
   101c8:	4631      	mov	r1, r6
   101ca:	f7fc fb01 	bl	c7d0 <ticker_ticks_diff_get>
   101ce:	4602      	mov	r2, r0
   101d0:	4814      	ldr	r0, [pc, #80]	; (10224 <sched_after_mstr_free_offset_get+0x9c>)
   101d2:	2307      	movs	r3, #7
   101d4:	fba2 0100 	umull	r0, r1, r2, r0
   101d8:	fb03 1102 	mla	r1, r3, r2, r1
   101dc:	a30a      	add	r3, pc, #40	; (adr r3, 10208 <sched_after_mstr_free_offset_get+0x80>)
   101de:	e9d3 2300 	ldrd	r2, r3, [r3]
   101e2:	f7f0 f859 	bl	298 <__aeabi_uldivmod>
   101e6:	6823      	ldr	r3, [r4, #0]
   101e8:	4418      	add	r0, r3
	if ((*win_offset_us & BIT(31)) == 0) {
   101ea:	2800      	cmp	r0, #0
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
   101ec:	6020      	str	r0, [r4, #0]
	if ((*win_offset_us & BIT(31)) == 0) {
   101ee:	db05      	blt.n	101fc <sched_after_mstr_free_offset_get+0x74>
		u32_t conn_interval_us = conn_interval * 1250;
   101f0:	f240 40e2 	movw	r0, #1250	; 0x4e2
   101f4:	4368      	muls	r0, r5
		while (*win_offset_us > conn_interval_us) {
   101f6:	6823      	ldr	r3, [r4, #0]
   101f8:	4298      	cmp	r0, r3
   101fa:	d301      	bcc.n	10200 <sched_after_mstr_free_offset_get+0x78>
}
   101fc:	b004      	add	sp, #16
   101fe:	bd70      	pop	{r4, r5, r6, pc}
			*win_offset_us -= conn_interval_us;
   10200:	1a1b      	subs	r3, r3, r0
   10202:	6023      	str	r3, [r4, #0]
   10204:	e7f7      	b.n	101f6 <sched_after_mstr_free_offset_get+0x6e>
   10206:	bf00      	nop
   10208:	3b9aca00 	.word	0x3b9aca00
   1020c:	00000000 	.word	0x00000000
   10210:	00023dae 	.word	0x00023dae
   10214:	00022d76 	.word	0x00022d76
   10218:	00025be8 	.word	0x00025be8
   1021c:	000272d8 	.word	0x000272d8
   10220:	00026a08 	.word	0x00026a08
   10224:	1afd498d 	.word	0x1afd498d

00010228 <mayfly_sched_win_offset_use>:
{
   10228:	b513      	push	{r0, r1, r4, lr}
	sched_after_mstr_free_offset_get(conn->conn_interval,
   1022a:	f100 0384 	add.w	r3, r0, #132	; 0x84
{
   1022e:	4604      	mov	r4, r0
	sched_after_mstr_free_offset_get(conn->conn_interval,
   10230:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
   10234:	68c1      	ldr	r1, [r0, #12]
   10236:	8c80      	ldrh	r0, [r0, #36]	; 0x24
   10238:	f7ff ffa6 	bl	10188 <sched_after_mstr_free_offset_get>
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
   1023c:	a902      	add	r1, sp, #8
   1023e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
   10242:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
   10246:	f240 42e2 	movw	r2, #1250	; 0x4e2
   1024a:	fbb3 f3f2 	udiv	r3, r3, r2
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
   1024e:	2202      	movs	r2, #2
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
   10250:	f821 3d02 	strh.w	r3, [r1, #-2]!
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
   10254:	f7f0 fa9d 	bl	792 <memcpy>
}
   10258:	b002      	add	sp, #8
   1025a:	bd10      	pop	{r4, pc}

0001025c <mayfly_sched_after_mstr_free_offset_get>:
{
   1025c:	b410      	push	{r4}
	sched_after_mstr_free_offset_get(_radio.scanner.conn_interval,
   1025e:	4c05      	ldr	r4, [pc, #20]	; (10274 <mayfly_sched_after_mstr_free_offset_get+0x18>)
   10260:	4602      	mov	r2, r0
   10262:	f504 63cf 	add.w	r3, r4, #1656	; 0x678
   10266:	f8d4 1670 	ldr.w	r1, [r4, #1648]	; 0x670
   1026a:	f8b4 0668 	ldrh.w	r0, [r4, #1640]	; 0x668
}
   1026e:	bc10      	pop	{r4}
	sched_after_mstr_free_offset_get(_radio.scanner.conn_interval,
   10270:	f7ff bf8a 	b.w	10188 <sched_after_mstr_free_offset_get>
   10274:	20000bf0 	.word	0x20000bf0

00010278 <mayfly_adv_stop>:
{
   10278:	b513      	push	{r0, r1, r4, lr}
	node_rx = packet_rx_reserve_get(1);
   1027a:	2001      	movs	r0, #1
   1027c:	f7fe f9b6 	bl	e5ec <packet_rx_reserve_get>
	LL_ASSERT(node_rx);
   10280:	4604      	mov	r4, r0
   10282:	b970      	cbnz	r0, 102a2 <mayfly_adv_stop+0x2a>
   10284:	4b0f      	ldr	r3, [pc, #60]	; (102c4 <mayfly_adv_stop+0x4c>)
   10286:	9301      	str	r3, [sp, #4]
   10288:	9300      	str	r3, [sp, #0]
   1028a:	4a0f      	ldr	r2, [pc, #60]	; (102c8 <mayfly_adv_stop+0x50>)
   1028c:	4b0f      	ldr	r3, [pc, #60]	; (102cc <mayfly_adv_stop+0x54>)
   1028e:	4910      	ldr	r1, [pc, #64]	; (102d0 <mayfly_adv_stop+0x58>)
   10290:	4810      	ldr	r0, [pc, #64]	; (102d4 <mayfly_adv_stop+0x5c>)
   10292:	f7f1 ffff 	bl	2294 <printk>
   10296:	4040      	eors	r0, r0
   10298:	f380 8811 	msr	BASEPRI, r0
   1029c:	f04f 0004 	mov.w	r0, #4
   102a0:	df02      	svc	2
	node_rx->hdr.handle = 0xffff;
   102a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   102a6:	80c3      	strh	r3, [r0, #6]
	node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   102a8:	2306      	movs	r3, #6
   102aa:	7103      	strb	r3, [r0, #4]
	memset(radio_le_conn_cmplt, 0x00, sizeof(struct radio_le_conn_cmplt));
   102ac:	221d      	movs	r2, #29
   102ae:	2100      	movs	r1, #0
   102b0:	300b      	adds	r0, #11
   102b2:	f7f0 fa9a 	bl	7ea <memset>
	radio_le_conn_cmplt->status = 0x3c;
   102b6:	233c      	movs	r3, #60	; 0x3c
   102b8:	72e3      	strb	r3, [r4, #11]
}
   102ba:	b002      	add	sp, #8
   102bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	packet_rx_enqueue();
   102c0:	f7ff ba6e 	b.w	f7a0 <packet_rx_enqueue>
   102c4:	00023dae 	.word	0x00023dae
   102c8:	00022d76 	.word	0x00022d76
   102cc:	00025cbb 	.word	0x00025cbb
   102d0:	000272d8 	.word	0x000272d8
   102d4:	000265ce 	.word	0x000265ce

000102d8 <terminate_ind_rx_enqueue>:
{
   102d8:	b513      	push	{r0, r1, r4, lr}
   102da:	4603      	mov	r3, r0
   102dc:	460a      	mov	r2, r1
	node_rx = (void *)&conn->llcp_terminate.radio_pdu_node_rx;
   102de:	f100 01b4 	add.w	r1, r0, #180	; 0xb4
	LL_ASSERT(node_rx->hdr.onion.link);
   102e2:	f8d0 00b4 	ldr.w	r0, [r0, #180]	; 0xb4
   102e6:	b970      	cbnz	r0, 10306 <terminate_ind_rx_enqueue+0x2e>
   102e8:	4b16      	ldr	r3, [pc, #88]	; (10344 <terminate_ind_rx_enqueue+0x6c>)
   102ea:	9301      	str	r3, [sp, #4]
   102ec:	9300      	str	r3, [sp, #0]
   102ee:	4a16      	ldr	r2, [pc, #88]	; (10348 <terminate_ind_rx_enqueue+0x70>)
   102f0:	4b16      	ldr	r3, [pc, #88]	; (1034c <terminate_ind_rx_enqueue+0x74>)
   102f2:	4917      	ldr	r1, [pc, #92]	; (10350 <terminate_ind_rx_enqueue+0x78>)
   102f4:	4817      	ldr	r0, [pc, #92]	; (10354 <terminate_ind_rx_enqueue+0x7c>)
	LL_ASSERT(link);
   102f6:	f7f1 ffcd 	bl	2294 <printk>
   102fa:	4040      	eors	r0, r0
   102fc:	f380 8811 	msr	BASEPRI, r0
   10300:	f04f 0004 	mov.w	r0, #4
   10304:	df02      	svc	2
	node_rx->hdr.handle = conn->handle;
   10306:	8c1c      	ldrh	r4, [r3, #32]
   10308:	f8a3 40ba 	strh.w	r4, [r3, #186]	; 0xba
	*((u8_t *)node_rx->pdu_data) = reason;
   1030c:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   10310:	2407      	movs	r4, #7
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
   10312:	4a11      	ldr	r2, [pc, #68]	; (10358 <terminate_ind_rx_enqueue+0x80>)
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   10314:	f883 40b8 	strb.w	r4, [r3, #184]	; 0xb8
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
   10318:	f892 4780 	ldrb.w	r4, [r2, #1920]	; 0x780
   1031c:	f883 40b4 	strb.w	r4, [r3, #180]	; 0xb4
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
   10320:	f502 62eb 	add.w	r2, r2, #1880	; 0x758
   10324:	f7fb fab5 	bl	b892 <memq_enqueue>
	LL_ASSERT(link);
   10328:	b938      	cbnz	r0, 1033a <terminate_ind_rx_enqueue+0x62>
   1032a:	4b06      	ldr	r3, [pc, #24]	; (10344 <terminate_ind_rx_enqueue+0x6c>)
   1032c:	9301      	str	r3, [sp, #4]
   1032e:	9300      	str	r3, [sp, #0]
   10330:	4a05      	ldr	r2, [pc, #20]	; (10348 <terminate_ind_rx_enqueue+0x70>)
   10332:	4b06      	ldr	r3, [pc, #24]	; (1034c <terminate_ind_rx_enqueue+0x74>)
   10334:	4906      	ldr	r1, [pc, #24]	; (10350 <terminate_ind_rx_enqueue+0x78>)
   10336:	4809      	ldr	r0, [pc, #36]	; (1035c <terminate_ind_rx_enqueue+0x84>)
   10338:	e7dd      	b.n	102f6 <terminate_ind_rx_enqueue+0x1e>
}
   1033a:	b002      	add	sp, #8
   1033c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
   10340:	f006 bcd8 	b.w	16cf4 <radio_event_callback>
   10344:	00023dae 	.word	0x00023dae
   10348:	00022d76 	.word	0x00022d76
   1034c:	00025e2f 	.word	0x00025e2f
   10350:	000272d8 	.word	0x000272d8
   10354:	00026a8e 	.word	0x00026a8e
   10358:	20000bf0 	.word	0x20000bf0
   1035c:	00025ef2 	.word	0x00025ef2

00010360 <scan_ticker_enable>:
static void scan_ticker_enable (void){
   10360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			HAL_TICKER_US_TO_TICKS((u64_t) _radio.scanner.interval * 625),
   10364:	4f34      	ldr	r7, [pc, #208]	; (10438 <scan_ticker_enable+0xd8>)
static void scan_ticker_enable (void){
   10366:	b08a      	sub	sp, #40	; 0x28
	ticks_anchor = ticker_ticks_now_get();
   10368:	f7fc fa30 	bl	c7cc <ticker_ticks_now_get>
			HAL_TICKER_US_TO_TICKS((u64_t) _radio.scanner.interval * 625),
   1036c:	f8d7 8660 	ldr.w	r8, [r7, #1632]	; 0x660
			HAL_TICKER_REMAINDER((u64_t) (_radio.scanner.interval * 625)),
   10370:	4b32      	ldr	r3, [pc, #200]	; (1043c <scan_ticker_enable+0xdc>)
   10372:	f240 2471 	movw	r4, #625	; 0x271
   10376:	fb04 f408 	mul.w	r4, r4, r8
   1037a:	fba4 4503 	umull	r4, r5, r4, r3
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1037e:	f642 5355 	movw	r3, #11605	; 0x2d55
   10382:	9308      	str	r3, [sp, #32]
   10384:	4b2e      	ldr	r3, [pc, #184]	; (10440 <scan_ticker_enable+0xe0>)
   10386:	9307      	str	r3, [sp, #28]
   10388:	2600      	movs	r6, #0
   1038a:	4b2e      	ldr	r3, [pc, #184]	; (10444 <scan_ticker_enable+0xe4>)
   1038c:	9606      	str	r6, [sp, #24]
   1038e:	9305      	str	r3, [sp, #20]
   10390:	f8d7 2648 	ldr.w	r2, [r7, #1608]	; 0x648
   10394:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
   10398:	9603      	str	r6, [sp, #12]
   1039a:	4413      	add	r3, r2
   1039c:	9304      	str	r3, [sp, #16]
			HAL_TICKER_REMAINDER((u64_t) (_radio.scanner.interval * 625)),
   1039e:	4620      	mov	r0, r4
   103a0:	a323      	add	r3, pc, #140	; (adr r3, 10430 <scan_ticker_enable+0xd0>)
   103a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   103a6:	4629      	mov	r1, r5
   103a8:	f7ef ff76 	bl	298 <__aeabi_uldivmod>
   103ac:	4a26      	ldr	r2, [pc, #152]	; (10448 <scan_ticker_enable+0xe8>)
   103ae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   103b2:	2307      	movs	r3, #7
   103b4:	2100      	movs	r1, #0
   103b6:	4343      	muls	r3, r0
   103b8:	fb02 3301 	mla	r3, r2, r1, r3
   103bc:	fba0 0102 	umull	r0, r1, r0, r2
   103c0:	1a20      	subs	r0, r4, r0
   103c2:	4419      	add	r1, r3
   103c4:	eb65 0101 	sbc.w	r1, r5, r1
   103c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   103cc:	2300      	movs	r3, #0
   103ce:	f7ef ff63 	bl	298 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   103d2:	9002      	str	r0, [sp, #8]
			HAL_TICKER_US_TO_TICKS((u64_t) _radio.scanner.interval * 625),
   103d4:	481d      	ldr	r0, [pc, #116]	; (1044c <scan_ticker_enable+0xec>)
   103d6:	2391      	movs	r3, #145	; 0x91
   103d8:	fba8 0100 	umull	r0, r1, r8, r0
   103dc:	fb03 1108 	mla	r1, r3, r8, r1
   103e0:	a313      	add	r3, pc, #76	; (adr r3, 10430 <scan_ticker_enable+0xd0>)
   103e2:	e9d3 2300 	ldrd	r2, r3, [r3]
   103e6:	f7ef ff57 	bl	298 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   103ea:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   103ee:	9001      	str	r0, [sp, #4]
   103f0:	9600      	str	r6, [sp, #0]
   103f2:	f8d7 370c 	ldr.w	r3, [r7, #1804]	; 0x70c
   103f6:	2206      	movs	r2, #6
   103f8:	4631      	mov	r1, r6
   103fa:	4630      	mov	r0, r6
   103fc:	f7fc f878 	bl	c4f0 <ticker_start>
			LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   10400:	f030 0302 	bics.w	r3, r0, #2
   10404:	d00e      	beq.n	10424 <scan_ticker_enable+0xc4>
   10406:	4b12      	ldr	r3, [pc, #72]	; (10450 <scan_ticker_enable+0xf0>)
   10408:	9301      	str	r3, [sp, #4]
   1040a:	9300      	str	r3, [sp, #0]
   1040c:	4a11      	ldr	r2, [pc, #68]	; (10454 <scan_ticker_enable+0xf4>)
   1040e:	4b12      	ldr	r3, [pc, #72]	; (10458 <scan_ticker_enable+0xf8>)
   10410:	4912      	ldr	r1, [pc, #72]	; (1045c <scan_ticker_enable+0xfc>)
   10412:	4813      	ldr	r0, [pc, #76]	; (10460 <scan_ticker_enable+0x100>)
   10414:	f7f1 ff3e 	bl	2294 <printk>
   10418:	4040      	eors	r0, r0
   1041a:	f380 8811 	msr	BASEPRI, r0
   1041e:	f04f 0004 	mov.w	r0, #4
   10422:	df02      	svc	2
}
   10424:	b00a      	add	sp, #40	; 0x28
   10426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1042a:	bf00      	nop
   1042c:	f3af 8000 	nop.w
   10430:	1afd498d 	.word	0x1afd498d
   10434:	00000007 	.word	0x00000007
   10438:	20000bf0 	.word	0x20000bf0
   1043c:	3b9aca00 	.word	0x3b9aca00
   10440:	0000f9b5 	.word	0x0000f9b5
   10444:	00010f5d 	.word	0x00010f5d
   10448:	1afd498d 	.word	0x1afd498d
   1044c:	84e72a00 	.word	0x84e72a00
   10450:	00023dae 	.word	0x00023dae
   10454:	00022d76 	.word	0x00022d76
   10458:	00025e91 	.word	0x00025e91
   1045c:	000272d8 	.word	0x000272d8
   10460:	000269ce 	.word	0x000269ce

00010464 <aux_packet_function>:
scan_ticker_enable();	
   10464:	f7ff bf7c 	b.w	10360 <scan_ticker_enable>

00010468 <prepare_normal_set>:
{
   10468:	b530      	push	{r4, r5, lr}
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
   1046a:	6804      	ldr	r4, [r0, #0]
   1046c:	2c00      	cmp	r4, #0
{
   1046e:	b089      	sub	sp, #36	; 0x24
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
   10470:	da26      	bge.n	104c0 <prepare_normal_set+0x58>
		u32_t ticks_prepare_to_start =
   10472:	6843      	ldr	r3, [r0, #4]
   10474:	6885      	ldr	r5, [r0, #8]
		ticker_status =
   10476:	9006      	str	r0, [sp, #24]
		u32_t ticks_drift_minus = (hdr->ticks_xtal_to_start &
   10478:	429d      	cmp	r5, r3
   1047a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
   1047e:	bf34      	ite	cc
   10480:	1ae4      	subcc	r4, r4, r3
   10482:	1b64      	subcs	r4, r4, r5
		ticker_status =
   10484:	4b0f      	ldr	r3, [pc, #60]	; (104c4 <prepare_normal_set+0x5c>)
   10486:	9305      	str	r3, [sp, #20]
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   10488:	b2a4      	uxth	r4, r4
		ticker_status =
   1048a:	2300      	movs	r3, #0
   1048c:	9304      	str	r3, [sp, #16]
   1048e:	9303      	str	r3, [sp, #12]
   10490:	9302      	str	r3, [sp, #8]
   10492:	4618      	mov	r0, r3
   10494:	9401      	str	r4, [sp, #4]
   10496:	9400      	str	r4, [sp, #0]
   10498:	f7fc f87a 	bl	c590 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1049c:	f030 0302 	bics.w	r3, r0, #2
   104a0:	d00e      	beq.n	104c0 <prepare_normal_set+0x58>
   104a2:	4b09      	ldr	r3, [pc, #36]	; (104c8 <prepare_normal_set+0x60>)
   104a4:	9301      	str	r3, [sp, #4]
   104a6:	9300      	str	r3, [sp, #0]
   104a8:	4a08      	ldr	r2, [pc, #32]	; (104cc <prepare_normal_set+0x64>)
   104aa:	4b09      	ldr	r3, [pc, #36]	; (104d0 <prepare_normal_set+0x68>)
   104ac:	4909      	ldr	r1, [pc, #36]	; (104d4 <prepare_normal_set+0x6c>)
   104ae:	480a      	ldr	r0, [pc, #40]	; (104d8 <prepare_normal_set+0x70>)
   104b0:	f7f1 fef0 	bl	2294 <printk>
   104b4:	4040      	eors	r0, r0
   104b6:	f380 8811 	msr	BASEPRI, r0
   104ba:	f04f 0004 	mov.w	r0, #4
   104be:	df02      	svc	2
}
   104c0:	b009      	add	sp, #36	; 0x24
   104c2:	bd30      	pop	{r4, r5, pc}
   104c4:	0000e57d 	.word	0x0000e57d
   104c8:	00023dae 	.word	0x00023dae
   104cc:	00022d76 	.word	0x00022d76
   104d0:	00025ba0 	.word	0x00025ba0
   104d4:	000272d8 	.word	0x000272d8
   104d8:	00025f18 	.word	0x00025f18

000104dc <preempt_calc>:
{
   104dc:	b570      	push	{r4, r5, r6, lr}
   104de:	4614      	mov	r4, r2
   104e0:	460e      	mov	r6, r1
   104e2:	4605      	mov	r5, r0
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);
   104e4:	f7fc f972 	bl	c7cc <ticker_ticks_now_get>
	u32_t diff =
   104e8:	4621      	mov	r1, r4
   104ea:	f7fc f971 	bl	c7d0 <ticker_ticks_diff_get>
	diff += 3;
   104ee:	1cc4      	adds	r4, r0, #3
	if (diff > HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
   104f0:	2c09      	cmp	r4, #9
   104f2:	d90f      	bls.n	10514 <preempt_calc+0x38>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_WORKER, 0);
   104f4:	2100      	movs	r1, #0
   104f6:	4608      	mov	r0, r1
   104f8:	f7fe fb84 	bl	ec04 <mayfly_xtal_retain>
		prepare_normal_set(hdr, RADIO_TICKER_USER_ID_WORKER, ticker_id);
   104fc:	4632      	mov	r2, r6
   104fe:	2100      	movs	r1, #0
   10500:	4628      	mov	r0, r5
   10502:	f7ff ffb1 	bl	10468 <prepare_normal_set>
		diff += hdr->ticks_preempt_to_start;
   10506:	68ab      	ldr	r3, [r5, #8]
   10508:	441c      	add	r4, r3
		if (diff <
   1050a:	2c26      	cmp	r4, #38	; 0x26
   1050c:	d800      	bhi.n	10510 <preempt_calc+0x34>
			hdr->ticks_preempt_to_start = diff;
   1050e:	60ac      	str	r4, [r5, #8]
		return 1;
   10510:	2001      	movs	r0, #1
}
   10512:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   10514:	2000      	movs	r0, #0
   10516:	bd70      	pop	{r4, r5, r6, pc}

00010518 <event_ext_adv>:
	LL_ASSERT(_radio.role == ROLE_NONE);
   10518:	4b60      	ldr	r3, [pc, #384]	; (1069c <event_ext_adv+0x184>)
{
   1051a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
   1051c:	7cd9      	ldrb	r1, [r3, #19]
{
   1051e:	4606      	mov	r6, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
   10520:	f001 02ff 	and.w	r2, r1, #255	; 0xff
   10524:	461c      	mov	r4, r3
   10526:	b171      	cbz	r1, 10546 <event_ext_adv+0x2e>
   10528:	4b5d      	ldr	r3, [pc, #372]	; (106a0 <event_ext_adv+0x188>)
   1052a:	9301      	str	r3, [sp, #4]
   1052c:	9300      	str	r3, [sp, #0]
   1052e:	4a5d      	ldr	r2, [pc, #372]	; (106a4 <event_ext_adv+0x18c>)
   10530:	4b5d      	ldr	r3, [pc, #372]	; (106a8 <event_ext_adv+0x190>)
   10532:	495e      	ldr	r1, [pc, #376]	; (106ac <event_ext_adv+0x194>)
   10534:	485e      	ldr	r0, [pc, #376]	; (106b0 <event_ext_adv+0x198>)
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_EXT_ADV);
   10536:	f7f1 fead 	bl	2294 <printk>
   1053a:	4040      	eors	r0, r0
   1053c:	f380 8811 	msr	BASEPRI, r0
   10540:	f04f 0004 	mov.w	r0, #4
   10544:	df02      	svc	2
   10546:	7c1b      	ldrb	r3, [r3, #16]
   10548:	b2db      	uxtb	r3, r3
   1054a:	2b08      	cmp	r3, #8
   1054c:	d007      	beq.n	1055e <event_ext_adv+0x46>
   1054e:	4b54      	ldr	r3, [pc, #336]	; (106a0 <event_ext_adv+0x188>)
   10550:	9301      	str	r3, [sp, #4]
   10552:	9300      	str	r3, [sp, #0]
   10554:	4a53      	ldr	r2, [pc, #332]	; (106a4 <event_ext_adv+0x18c>)
   10556:	4b54      	ldr	r3, [pc, #336]	; (106a8 <event_ext_adv+0x190>)
   10558:	4954      	ldr	r1, [pc, #336]	; (106ac <event_ext_adv+0x194>)
   1055a:	4856      	ldr	r0, [pc, #344]	; (106b4 <event_ext_adv+0x19c>)
   1055c:	e7eb      	b.n	10536 <event_ext_adv+0x1e>
	_radio.role = ROLE_ADV;
   1055e:	2101      	movs	r1, #1
   10560:	74e1      	strb	r1, [r4, #19]
	_radio.ticks_anchor = ticks_at_expire;
   10562:	60a0      	str	r0, [r4, #8]
	_radio.ticker_id_prepare = 0;
   10564:	7422      	strb	r2, [r4, #16]
	if (_radio.advertiser.adv_data.first !=
   10566:	f894 022f 	ldrb.w	r0, [r4, #559]	; 0x22f
	_radio.ticker_id_event = RADIO_TICKER_ID_EXT_ADV;
   1056a:	7463      	strb	r3, [r4, #17]
	if (_radio.advertiser.adv_data.first !=
   1056c:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
   10570:	4298      	cmp	r0, r3
   10572:	d007      	beq.n	10584 <event_ext_adv+0x6c>
		first = _radio.advertiser.adv_data.first + 1;
   10574:	440b      	add	r3, r1
   10576:	b2db      	uxtb	r3, r3
			first = 0;
   10578:	2b02      	cmp	r3, #2
   1057a:	bf08      	it	eq
   1057c:	2300      	moveq	r3, #0
		_radio.advertiser.adv_data.first = first;
   1057e:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
		upd = 1;
   10582:	460a      	mov	r2, r1
	if (_radio.advertiser.scan_data.first != _radio.
   10584:	f894 3636 	ldrb.w	r3, [r4, #1590]	; 0x636
   10588:	f894 1637 	ldrb.w	r1, [r4, #1591]	; 0x637
   1058c:	4299      	cmp	r1, r3
   1058e:	d007      	beq.n	105a0 <event_ext_adv+0x88>
		first = _radio.advertiser.scan_data.first + 1;
   10590:	3301      	adds	r3, #1
   10592:	b2db      	uxtb	r3, r3
			first = 0;
   10594:	2b02      	cmp	r3, #2
   10596:	bf08      	it	eq
   10598:	2300      	moveq	r3, #0
		_radio.advertiser.scan_data.first = first;
   1059a:	f884 3636 	strb.w	r3, [r4, #1590]	; 0x636
		upd = 1;
   1059e:	2201      	movs	r2, #1
	aux_pdu = (void *)_radio.advertiser.aux_adv_data.data
   105a0:	f894 5433 	ldrb.w	r5, [r4, #1075]	; 0x433
	pdu = (void *)_radio.advertiser.adv_data.data
   105a4:	f894 722e 	ldrb.w	r7, [r4, #558]	; 0x22e
	aux_pdu = (void *)_radio.advertiser.aux_adv_data.data
   105a8:	eb05 2505 	add.w	r5, r5, r5, lsl #8
   105ac:	f505 750c 	add.w	r5, r5, #560	; 0x230
   105b0:	4425      	add	r5, r4
	pdu = (void *)_radio.advertiser.adv_data.data
   105b2:	eb07 2707 	add.w	r7, r7, r7, lsl #8
		*(h+6)+=1;
   105b6:	7a6b      	ldrb	r3, [r5, #9]
	pdu = (void *)_radio.advertiser.adv_data.data
   105b8:	372c      	adds	r7, #44	; 0x2c
		*(h+6)+=1;
   105ba:	3301      	adds	r3, #1
	pdu = (void *)_radio.advertiser.adv_data.data
   105bc:	19e1      	adds	r1, r4, r7
		*(h+6)+=1;
   105be:	726b      	strb	r3, [r5, #9]
	if (upd) {
   105c0:	b152      	cbz	r2, 105d8 <event_ext_adv+0xc0>
		struct pdu_adv *scan_pdu = (void *)
   105c2:	f894 0636 	ldrb.w	r0, [r4, #1590]	; 0x636
   105c6:	eb00 2000 	add.w	r0, r0, r0, lsl #8
   105ca:	4420      	add	r0, r4
		memcpy(&scan_pdu->scan_rsp.addr[0],
   105cc:	2206      	movs	r2, #6
   105ce:	3102      	adds	r1, #2
   105d0:	f200 4036 	addw	r0, r0, #1078	; 0x436
   105d4:	f7f0 f8dd 	bl	792 <memcpy>
			radio_pkt_tx_set(aux_pdu);
   105d8:	4628      	mov	r0, r5
   105da:	f008 f9a7 	bl	1892c <radio_pkt_tx_set>
			if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   105de:	5de3      	ldrb	r3, [r4, r7]
   105e0:	f003 030f 	and.w	r3, r3, #15
   105e4:	2b02      	cmp	r3, #2
   105e6:	d038      	beq.n	1065a <event_ext_adv+0x142>
   105e8:	2b07      	cmp	r3, #7
   105ea:	d036      	beq.n	1065a <event_ext_adv+0x142>
				_radio.state = STATE_TX;
   105ec:	2302      	movs	r3, #2
				radio_tmr_tifs_set(RADIO_TIFS);
   105ee:	2096      	movs	r0, #150	; 0x96
				_radio.state = STATE_TX;
   105f0:	7523      	strb	r3, [r4, #20]
				radio_tmr_tifs_set(RADIO_TIFS);
   105f2:	f008 fac1 	bl	18b78 <radio_tmr_tifs_set>
				radio_switch_complete_and_rx(0);
   105f6:	2000      	movs	r0, #0
   105f8:	f008 fa20 	bl	18a3c <radio_switch_complete_and_rx>
			_radio.ext_advertiser.current_slot = 0;
   105fc:	2300      	movs	r3, #0
				chan_set(_radio.ext_advertiser.aux_pckt_chan);
   105fe:	f894 06a0 	ldrb.w	r0, [r4, #1696]	; 0x6a0
			_radio.ext_advertiser.current_slot = 0;
   10602:	f884 3689 	strb.w	r3, [r4, #1673]	; 0x689
			_radio.ext_advertiser.event = 0;
   10606:	f884 368a 	strb.w	r3, [r4, #1674]	; 0x68a
				chan_set(_radio.ext_advertiser.aux_pckt_chan);
   1060a:	f7fe fba5 	bl	ed58 <chan_set>
	if (ctrl_rl_enabled()) {
   1060e:	f007 fb41 	bl	17c94 <ctrl_rl_enabled>
   10612:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   10616:	b358      	cbz	r0, 10670 <event_ext_adv+0x158>
		struct ll_filter *filter =
   10618:	f013 0003 	ands.w	r0, r3, #3
   1061c:	bf18      	it	ne
   1061e:	2001      	movne	r0, #1
		struct ll_filter *wl = ctrl_filter_get(true);
   10620:	f007 f94e 	bl	178c0 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
   10624:	1c82      	adds	r2, r0, #2
   10626:	7841      	ldrb	r1, [r0, #1]
   10628:	7800      	ldrb	r0, [r0, #0]
   1062a:	f008 fa4d 	bl	18ac8 <radio_filter_configure>
	remainder_us = radio_tmr_start(1, ticks_at_expire +
   1062e:	68e2      	ldr	r2, [r4, #12]
   10630:	f106 0109 	add.w	r1, r6, #9
   10634:	2001      	movs	r0, #1
   10636:	f008 faab 	bl	18b90 <radio_tmr_start>
	radio_tmr_end_capture();
   1063a:	f008 fb67 	bl	18d0c <radio_tmr_end_capture>
	if (preempt_calc(&_radio.advertiser.hdr, RADIO_TICKER_ID_ADV,
   1063e:	4632      	mov	r2, r6
   10640:	2105      	movs	r1, #5
   10642:	481d      	ldr	r0, [pc, #116]	; (106b8 <event_ext_adv+0x1a0>)
   10644:	f7ff ff4a 	bl	104dc <preempt_calc>
   10648:	4603      	mov	r3, r0
   1064a:	b1a8      	cbz	r0, 10678 <event_ext_adv+0x160>
		_radio.state = STATE_STOP;
   1064c:	2304      	movs	r3, #4
   1064e:	7523      	strb	r3, [r4, #20]
}
   10650:	b003      	add	sp, #12
   10652:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		radio_disable();
   10656:	f008 b997 	b.w	18988 <radio_disable>
				_radio.state = STATE_CLOSE;
   1065a:	2303      	movs	r3, #3
   1065c:	7523      	strb	r3, [r4, #20]
				_radio.advertiser.ext_adv = 1;
   1065e:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   10662:	f043 0301 	orr.w	r3, r3, #1
   10666:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
				radio_switch_complete_and_disable();
   1066a:	f008 f9fd 	bl	18a68 <radio_switch_complete_and_disable>
   1066e:	e7c5      	b.n	105fc <event_ext_adv+0xe4>
	if (_radio.advertiser.filter_policy) {
   10670:	079b      	lsls	r3, r3, #30
   10672:	d0dc      	beq.n	1062e <event_ext_adv+0x116>
		struct ll_filter *wl = ctrl_filter_get(true);
   10674:	2001      	movs	r0, #1
   10676:	e7d3      	b.n	10620 <event_ext_adv+0x108>
		ticker_status =
   10678:	4a10      	ldr	r2, [pc, #64]	; (106bc <event_ext_adv+0x1a4>)
   1067a:	4601      	mov	r1, r0
   1067c:	f7fc f854 	bl	c728 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   10680:	f030 0302 	bics.w	r3, r0, #2
   10684:	d007      	beq.n	10696 <event_ext_adv+0x17e>
   10686:	4b06      	ldr	r3, [pc, #24]	; (106a0 <event_ext_adv+0x188>)
   10688:	9301      	str	r3, [sp, #4]
   1068a:	9300      	str	r3, [sp, #0]
   1068c:	4a05      	ldr	r2, [pc, #20]	; (106a4 <event_ext_adv+0x18c>)
   1068e:	4b06      	ldr	r3, [pc, #24]	; (106a8 <event_ext_adv+0x190>)
   10690:	4906      	ldr	r1, [pc, #24]	; (106ac <event_ext_adv+0x194>)
   10692:	480b      	ldr	r0, [pc, #44]	; (106c0 <event_ext_adv+0x1a8>)
   10694:	e74f      	b.n	10536 <event_ext_adv+0x1e>
}
   10696:	b003      	add	sp, #12
   10698:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1069a:	bf00      	nop
   1069c:	20000bf0 	.word	0x20000bf0
   106a0:	00023dae 	.word	0x00023dae
   106a4:	00022d76 	.word	0x00022d76
   106a8:	00025cad 	.word	0x00025cad
   106ac:	000272d8 	.word	0x000272d8
   106b0:	00026073 	.word	0x00026073
   106b4:	000260ad 	.word	0x000260ad
   106b8:	20000c08 	.word	0x20000c08
   106bc:	0000fb9d 	.word	0x0000fb9d
   106c0:	00025f18 	.word	0x00025f18
   106c4:	00000000 	.word	0x00000000

000106c8 <mayfly_xtal_stop_calc>:
{
   106c8:	b570      	push	{r4, r5, r6, lr}
   106ca:	b08e      	sub	sp, #56	; 0x38
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   106cc:	2302      	movs	r3, #2
   106ce:	9309      	str	r3, [sp, #36]	; 0x24
	ticker_id_next = 0xff;
   106d0:	22ff      	movs	r2, #255	; 0xff
	struct connection *conn_curr = NULL;
   106d2:	2300      	movs	r3, #0
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
   106d4:	4e7e      	ldr	r6, [pc, #504]	; (108d0 <mayfly_xtal_stop_calc+0x208>)
				    _radio.connection_count));
   106d6:	4d7f      	ldr	r5, [pc, #508]	; (108d4 <mayfly_xtal_stop_calc+0x20c>)
	struct connection *conn_curr = NULL;
   106d8:	930a      	str	r3, [sp, #40]	; 0x28
{
   106da:	4604      	mov	r4, r0
	struct connection *conn_next = NULL;
   106dc:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker_id_next = 0xff;
   106de:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
	ticks_to_expire = 0;
   106e2:	930c      	str	r3, [sp, #48]	; 0x30
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
   106e4:	ab09      	add	r3, sp, #36	; 0x24
   106e6:	9302      	str	r3, [sp, #8]
   106e8:	ab0c      	add	r3, sp, #48	; 0x30
   106ea:	9300      	str	r3, [sp, #0]
   106ec:	9601      	str	r6, [sp, #4]
   106ee:	ab0d      	add	r3, sp, #52	; 0x34
   106f0:	f10d 0223 	add.w	r2, sp, #35	; 0x23
   106f4:	2101      	movs	r1, #1
   106f6:	2000      	movs	r0, #0
   106f8:	f7fb ffd4 	bl	c6a4 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
   106fc:	2802      	cmp	r0, #2
   106fe:	d014      	beq.n	1072a <mayfly_xtal_stop_calc+0x62>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   10700:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10702:	b1b3      	cbz	r3, 10732 <mayfly_xtal_stop_calc+0x6a>
   10704:	4b74      	ldr	r3, [pc, #464]	; (108d8 <mayfly_xtal_stop_calc+0x210>)
   10706:	9301      	str	r3, [sp, #4]
   10708:	9300      	str	r3, [sp, #0]
   1070a:	4a74      	ldr	r2, [pc, #464]	; (108dc <mayfly_xtal_stop_calc+0x214>)
   1070c:	4b74      	ldr	r3, [pc, #464]	; (108e0 <mayfly_xtal_stop_calc+0x218>)
   1070e:	4975      	ldr	r1, [pc, #468]	; (108e4 <mayfly_xtal_stop_calc+0x21c>)
   10710:	4875      	ldr	r0, [pc, #468]	; (108e8 <mayfly_xtal_stop_calc+0x220>)
	LL_ASSERT(hdr_curr);
   10712:	f7f1 fdbf 	bl	2294 <printk>
   10716:	4040      	eors	r0, r0
   10718:	f380 8811 	msr	BASEPRI, r0
   1071c:	f04f 0004 	mov.w	r0, #4
   10720:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   10722:	2101      	movs	r1, #1
   10724:	2000      	movs	r0, #0
   10726:	f7fc f83b 	bl	c7a0 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
   1072a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1072c:	2b02      	cmp	r3, #2
   1072e:	d0f8      	beq.n	10722 <mayfly_xtal_stop_calc+0x5a>
   10730:	e7e6      	b.n	10700 <mayfly_xtal_stop_calc+0x38>
	} while (ticker_id_next != TICKER_NULL &&
   10732:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				    _radio.connection_count));
   10736:	2bff      	cmp	r3, #255	; 0xff
   10738:	d004      	beq.n	10744 <mayfly_xtal_stop_calc+0x7c>
   1073a:	f895 2718 	ldrb.w	r2, [r5, #1816]	; 0x718
		 ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
   1073e:	3207      	adds	r2, #7
	} while (ticker_id_next != TICKER_NULL &&
   10740:	4293      	cmp	r3, r2
   10742:	dacf      	bge.n	106e4 <mayfly_xtal_stop_calc+0x1c>
	if ((ticker_id_next == TICKER_NULL) ||
   10744:	1f5a      	subs	r2, r3, #5
   10746:	b2d2      	uxtb	r2, r2
   10748:	2af9      	cmp	r2, #249	; 0xf9
   1074a:	d805      	bhi.n	10758 <mayfly_xtal_stop_calc+0x90>
				_radio.connection_count))) {
   1074c:	4a61      	ldr	r2, [pc, #388]	; (108d4 <mayfly_xtal_stop_calc+0x20c>)
   1074e:	f892 2718 	ldrb.w	r2, [r2, #1816]	; 0x718
	    (ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
   10752:	3207      	adds	r2, #7
	    (ticker_id_next < RADIO_TICKER_ID_ADV) ||
   10754:	4293      	cmp	r3, r2
   10756:	db05      	blt.n	10764 <mayfly_xtal_stop_calc+0x9c>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 0);
   10758:	2100      	movs	r1, #0
   1075a:	2001      	movs	r0, #1
   1075c:	f7fe fa52 	bl	ec04 <mayfly_xtal_retain>
}
   10760:	b00e      	add	sp, #56	; 0x38
   10762:	bd70      	pop	{r4, r5, r6, pc}
	hdr_curr = hdr_conn_get(ticker_id_curr, &conn_curr);
   10764:	a90a      	add	r1, sp, #40	; 0x28
   10766:	b2e0      	uxtb	r0, r4
   10768:	f7ff fa24 	bl	fbb4 <hdr_conn_get>
	LL_ASSERT(hdr_curr);
   1076c:	b938      	cbnz	r0, 1077e <mayfly_xtal_stop_calc+0xb6>
   1076e:	4b5a      	ldr	r3, [pc, #360]	; (108d8 <mayfly_xtal_stop_calc+0x210>)
   10770:	9301      	str	r3, [sp, #4]
   10772:	9300      	str	r3, [sp, #0]
   10774:	4a59      	ldr	r2, [pc, #356]	; (108dc <mayfly_xtal_stop_calc+0x214>)
   10776:	4b5a      	ldr	r3, [pc, #360]	; (108e0 <mayfly_xtal_stop_calc+0x218>)
   10778:	495a      	ldr	r1, [pc, #360]	; (108e4 <mayfly_xtal_stop_calc+0x21c>)
   1077a:	485c      	ldr	r0, [pc, #368]	; (108ec <mayfly_xtal_stop_calc+0x224>)
   1077c:	e7c9      	b.n	10712 <mayfly_xtal_stop_calc+0x4a>
	if (hdr_curr->ticks_xtal_to_start & XON_BITMASK) {
   1077e:	6803      	ldr	r3, [r0, #0]
   10780:	6844      	ldr	r4, [r0, #4]
   10782:	2b00      	cmp	r3, #0
		ticks_slot_abs = (hdr_curr->ticks_active_to_start >
   10784:	bfb8      	it	lt
   10786:	6883      	ldrlt	r3, [r0, #8]
		ticks_slot_abs = (hdr_curr->ticks_active_to_start >
   10788:	429c      	cmp	r4, r3
   1078a:	bf38      	it	cc
   1078c:	461c      	movcc	r4, r3
	ticks_slot_abs += hdr_curr->ticks_slot;
   1078e:	68c3      	ldr	r3, [r0, #12]
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
   10790:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   10794:	a90b      	add	r1, sp, #44	; 0x2c
	ticks_slot_abs += hdr_curr->ticks_slot;
   10796:	441c      	add	r4, r3
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
   10798:	f7ff fa0c 	bl	fbb4 <hdr_conn_get>
	LL_ASSERT(hdr_next);
   1079c:	4605      	mov	r5, r0
   1079e:	b938      	cbnz	r0, 107b0 <mayfly_xtal_stop_calc+0xe8>
   107a0:	4b4d      	ldr	r3, [pc, #308]	; (108d8 <mayfly_xtal_stop_calc+0x210>)
   107a2:	9301      	str	r3, [sp, #4]
   107a4:	9300      	str	r3, [sp, #0]
   107a6:	4a4d      	ldr	r2, [pc, #308]	; (108dc <mayfly_xtal_stop_calc+0x214>)
   107a8:	4b4d      	ldr	r3, [pc, #308]	; (108e0 <mayfly_xtal_stop_calc+0x218>)
   107aa:	494e      	ldr	r1, [pc, #312]	; (108e4 <mayfly_xtal_stop_calc+0x21c>)
   107ac:	4850      	ldr	r0, [pc, #320]	; (108f0 <mayfly_xtal_stop_calc+0x228>)
   107ae:	e7b0      	b.n	10712 <mayfly_xtal_stop_calc+0x4a>
	ticks_prepare_to_start_next = (hdr_next->ticks_active_to_start >
   107b0:	6886      	ldr	r6, [r0, #8]
   107b2:	6843      	ldr	r3, [r0, #4]
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
   107b4:	6802      	ldr	r2, [r0, #0]
	ticks_prepare_to_start_next = (hdr_next->ticks_active_to_start >
   107b6:	429e      	cmp	r6, r3
   107b8:	bf38      	it	cc
   107ba:	461e      	movcc	r6, r3
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
   107bc:	2a00      	cmp	r2, #0
   107be:	da05      	bge.n	107cc <mayfly_xtal_stop_calc+0x104>
		ticks_to_expire -=
   107c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			(hdr_next->ticks_xtal_to_start &
   107c2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
		ticks_to_expire -=
   107c6:	4433      	add	r3, r6
   107c8:	1a9b      	subs	r3, r3, r2
   107ca:	930c      	str	r3, [sp, #48]	; 0x30
	if (ticks_to_expire >
   107cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	    (ticks_slot_abs +
   107ce:	f104 0331 	add.w	r3, r4, #49	; 0x31
	if (ticks_to_expire >
   107d2:	4293      	cmp	r3, r2
   107d4:	d20a      	bcs.n	107ec <mayfly_xtal_stop_calc+0x124>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 0);
   107d6:	2100      	movs	r1, #0
   107d8:	2001      	movs	r0, #1
   107da:	f7fe fa13 	bl	ec04 <mayfly_xtal_retain>
		prepare_normal_set(hdr_next, RADIO_TICKER_USER_ID_JOB,
   107de:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   107e2:	2101      	movs	r1, #1
   107e4:	4628      	mov	r0, r5
   107e6:	f7ff fe3f 	bl	10468 <prepare_normal_set>
   107ea:	e7b9      	b.n	10760 <mayfly_xtal_stop_calc+0x98>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 1);
   107ec:	2101      	movs	r1, #1
   107ee:	4608      	mov	r0, r1
   107f0:	f7fe fa08 	bl	ec04 <mayfly_xtal_retain>
		if (!(hdr_next->ticks_xtal_to_start & XON_BITMASK) &&
   107f4:	682b      	ldr	r3, [r5, #0]
   107f6:	2b00      	cmp	r3, #0
   107f8:	db1c      	blt.n	10834 <mayfly_xtal_stop_calc+0x16c>
   107fa:	429e      	cmp	r6, r3
   107fc:	d21a      	bcs.n	10834 <mayfly_xtal_stop_calc+0x16c>
			u32_t ticks_drift_plus = hdr_next->ticks_xtal_to_start -
   107fe:	1b9b      	subs	r3, r3, r6
			ticker_status =
   10800:	2000      	movs	r0, #0
				ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   10802:	b29b      	uxth	r3, r3
			ticker_status =
   10804:	493b      	ldr	r1, [pc, #236]	; (108f4 <mayfly_xtal_stop_calc+0x22c>)
   10806:	9105      	str	r1, [sp, #20]
   10808:	9302      	str	r3, [sp, #8]
   1080a:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   1080e:	9506      	str	r5, [sp, #24]
   10810:	9004      	str	r0, [sp, #16]
   10812:	9003      	str	r0, [sp, #12]
   10814:	9001      	str	r0, [sp, #4]
   10816:	9000      	str	r0, [sp, #0]
   10818:	2101      	movs	r1, #1
   1081a:	f7fb feb9 	bl	c590 <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1081e:	f030 0302 	bics.w	r3, r0, #2
   10822:	d007      	beq.n	10834 <mayfly_xtal_stop_calc+0x16c>
   10824:	4b2c      	ldr	r3, [pc, #176]	; (108d8 <mayfly_xtal_stop_calc+0x210>)
   10826:	9301      	str	r3, [sp, #4]
   10828:	9300      	str	r3, [sp, #0]
   1082a:	4a2c      	ldr	r2, [pc, #176]	; (108dc <mayfly_xtal_stop_calc+0x214>)
   1082c:	4b2c      	ldr	r3, [pc, #176]	; (108e0 <mayfly_xtal_stop_calc+0x218>)
   1082e:	492d      	ldr	r1, [pc, #180]	; (108e4 <mayfly_xtal_stop_calc+0x21c>)
   10830:	4831      	ldr	r0, [pc, #196]	; (108f8 <mayfly_xtal_stop_calc+0x230>)
   10832:	e76e      	b.n	10712 <mayfly_xtal_stop_calc+0x4a>
		if (!conn_curr || !conn_next) {
   10834:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   10836:	2e00      	cmp	r6, #0
   10838:	d092      	beq.n	10760 <mayfly_xtal_stop_calc+0x98>
   1083a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1083c:	2d00      	cmp	r5, #0
   1083e:	d08f      	beq.n	10760 <mayfly_xtal_stop_calc+0x98>
		if (conn_curr->conn_interval == conn_next->conn_interval) {
   10840:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
   10842:	8caa      	ldrh	r2, [r5, #36]	; 0x24
   10844:	429a      	cmp	r2, r3
   10846:	d18b      	bne.n	10760 <mayfly_xtal_stop_calc+0x98>
			u32_t ticks_conn_interval = HAL_TICKER_US_TO_TICKS(
   10848:	482c      	ldr	r0, [pc, #176]	; (108fc <mayfly_xtal_stop_calc+0x234>)
   1084a:	b292      	uxth	r2, r2
   1084c:	fba2 0100 	umull	r0, r1, r2, r0
   10850:	f240 1323 	movw	r3, #291	; 0x123
   10854:	fb03 1102 	mla	r1, r3, r2, r1
   10858:	a31b      	add	r3, pc, #108	; (adr r3, 108c8 <mayfly_xtal_stop_calc+0x200>)
   1085a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1085e:	f7ef fd1b 	bl	298 <__aeabi_uldivmod>
   10862:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10864:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			while (ticks_to_expire > ticks_conn_interval) {
   10868:	2200      	movs	r2, #0
   1086a:	4298      	cmp	r0, r3
   1086c:	d318      	bcc.n	108a0 <mayfly_xtal_stop_calc+0x1d8>
   1086e:	b102      	cbz	r2, 10872 <mayfly_xtal_stop_calc+0x1aa>
   10870:	930c      	str	r3, [sp, #48]	; 0x30
			if (conn_curr->role && !conn_next->role &&
   10872:	f996 201d 	ldrsb.w	r2, [r6, #29]
   10876:	2a00      	cmp	r2, #0
   10878:	f995 201d 	ldrsb.w	r2, [r5, #29]
   1087c:	da13      	bge.n	108a6 <mayfly_xtal_stop_calc+0x1de>
   1087e:	2a00      	cmp	r2, #0
   10880:	f6ff af6e 	blt.w	10760 <mayfly_xtal_stop_calc+0x98>
			     (ticks_slot_abs +
   10884:	3414      	adds	r4, #20
			if (conn_curr->role && !conn_next->role &&
   10886:	429c      	cmp	r4, r3
   10888:	f67f af6a 	bls.w	10760 <mayfly_xtal_stop_calc+0x98>
				status = conn_update_req(conn_curr);
   1088c:	4630      	mov	r0, r6
   1088e:	f7fd febf 	bl	e610 <conn_update_req>
				if (status == 2) {
   10892:	2802      	cmp	r0, #2
   10894:	f47f af64 	bne.w	10760 <mayfly_xtal_stop_calc+0x98>
					conn_update_req(conn_next);
   10898:	980b      	ldr	r0, [sp, #44]	; 0x2c
					conn_update_req(conn_curr);
   1089a:	f7fd feb9 	bl	e610 <conn_update_req>
   1089e:	e75f      	b.n	10760 <mayfly_xtal_stop_calc+0x98>
				ticks_to_expire -= ticks_conn_interval;
   108a0:	1a1b      	subs	r3, r3, r0
   108a2:	2201      	movs	r2, #1
   108a4:	e7e1      	b.n	1086a <mayfly_xtal_stop_calc+0x1a2>
			} else if (!conn_curr->role && conn_next->role &&
   108a6:	2a00      	cmp	r2, #0
   108a8:	f6bf af5a 	bge.w	10760 <mayfly_xtal_stop_calc+0x98>
				    (ticks_slot_abs +
   108ac:	3414      	adds	r4, #20
			} else if (!conn_curr->role && conn_next->role &&
   108ae:	429c      	cmp	r4, r3
   108b0:	f67f af56 	bls.w	10760 <mayfly_xtal_stop_calc+0x98>
				status = conn_update_req(conn_next);
   108b4:	4628      	mov	r0, r5
   108b6:	f7fd feab 	bl	e610 <conn_update_req>
				if (status == 2) {
   108ba:	2802      	cmp	r0, #2
   108bc:	f47f af50 	bne.w	10760 <mayfly_xtal_stop_calc+0x98>
					conn_update_req(conn_curr);
   108c0:	980a      	ldr	r0, [sp, #40]	; 0x28
   108c2:	e7ea      	b.n	1089a <mayfly_xtal_stop_calc+0x1d2>
   108c4:	f3af 8000 	nop.w
   108c8:	1afd498d 	.word	0x1afd498d
   108cc:	00000007 	.word	0x00000007
   108d0:	0000e56d 	.word	0x0000e56d
   108d4:	20000bf0 	.word	0x20000bf0
   108d8:	00023dae 	.word	0x00023dae
   108dc:	00022d76 	.word	0x00022d76
   108e0:	00025bb3 	.word	0x00025bb3
   108e4:	000272d8 	.word	0x000272d8
   108e8:	00026a61 	.word	0x00026a61
   108ec:	000266cb 	.word	0x000266cb
   108f0:	000266f5 	.word	0x000266f5
   108f4:	0000e571 	.word	0x0000e571
   108f8:	00025f18 	.word	0x00025f18
   108fc:	09ce5400 	.word	0x09ce5400

00010900 <adv_scan_configure.constprop.32>:
static void adv_scan_configure(u8_t phy, u8_t flags)
   10900:	b537      	push	{r0, r1, r2, r4, r5, lr}
	u32_t aa = 0x8e89bed6;
   10902:	ad02      	add	r5, sp, #8
   10904:	4b10      	ldr	r3, [pc, #64]	; (10948 <adv_scan_configure.constprop.32+0x48>)
   10906:	f845 3d04 	str.w	r3, [r5, #-4]!
static void adv_scan_configure(u8_t phy, u8_t flags)
   1090a:	4604      	mov	r4, r0
	radio_reset();
   1090c:	f007 ff58 	bl	187c0 <radio_reset>
	radio_tx_power_set(0);
   10910:	2000      	movs	r0, #0
   10912:	f007 ff9d 	bl	18850 <radio_tx_power_set>
	radio_isr_set(isr);
   10916:	480d      	ldr	r0, [pc, #52]	; (1094c <adv_scan_configure.constprop.32+0x4c>)
   10918:	f007 ff1c 	bl	18754 <radio_isr_set>
	radio_phy_set(phy, flags);
   1091c:	2101      	movs	r1, #1
   1091e:	4620      	mov	r0, r4
   10920:	f007 ff68 	bl	187f4 <radio_phy_set>
	radio_aa_set((u8_t *)&aa);
   10924:	4628      	mov	r0, r5
   10926:	f007 ffb1 	bl	1888c <radio_aa_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, (phy << 1));
   1092a:	0062      	lsls	r2, r4, #1
   1092c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
   10930:	21ff      	movs	r1, #255	; 0xff
   10932:	2008      	movs	r0, #8
   10934:	f007 ffc2 	bl	188bc <radio_pkt_configure>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   10938:	4905      	ldr	r1, [pc, #20]	; (10950 <adv_scan_configure.constprop.32+0x50>)
   1093a:	f240 605b 	movw	r0, #1627	; 0x65b
   1093e:	f008 f85f 	bl	18a00 <radio_crc_configure>
}
   10942:	b003      	add	sp, #12
   10944:	bd30      	pop	{r4, r5, pc}
   10946:	bf00      	nop
   10948:	8e89bed6 	.word	0x8e89bed6
   1094c:	00013c29 	.word	0x00013c29
   10950:	00555555 	.word	0x00555555

00010954 <event_scan>:
{
   10954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
   10958:	4b9a      	ldr	r3, [pc, #616]	; (10bc4 <event_scan+0x270>)
   1095a:	7cd9      	ldrb	r1, [r3, #19]
{
   1095c:	b08c      	sub	sp, #48	; 0x30
   1095e:	4605      	mov	r5, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
   10960:	f001 02ff 	and.w	r2, r1, #255	; 0xff
   10964:	461c      	mov	r4, r3
   10966:	b171      	cbz	r1, 10986 <event_scan+0x32>
   10968:	4b97      	ldr	r3, [pc, #604]	; (10bc8 <event_scan+0x274>)
   1096a:	9301      	str	r3, [sp, #4]
   1096c:	9300      	str	r3, [sp, #0]
   1096e:	4a97      	ldr	r2, [pc, #604]	; (10bcc <event_scan+0x278>)
   10970:	4b97      	ldr	r3, [pc, #604]	; (10bd0 <event_scan+0x27c>)
   10972:	4998      	ldr	r1, [pc, #608]	; (10bd4 <event_scan+0x280>)
   10974:	4898      	ldr	r0, [pc, #608]	; (10bd8 <event_scan+0x284>)
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_SCAN);
   10976:	f7f1 fc8d 	bl	2294 <printk>
   1097a:	4040      	eors	r0, r0
   1097c:	f380 8811 	msr	BASEPRI, r0
   10980:	f04f 0004 	mov.w	r0, #4
   10984:	df02      	svc	2
   10986:	7c1b      	ldrb	r3, [r3, #16]
   10988:	b2db      	uxtb	r3, r3
   1098a:	2b06      	cmp	r3, #6
   1098c:	d007      	beq.n	1099e <event_scan+0x4a>
   1098e:	4b8e      	ldr	r3, [pc, #568]	; (10bc8 <event_scan+0x274>)
   10990:	9301      	str	r3, [sp, #4]
   10992:	9300      	str	r3, [sp, #0]
   10994:	4a8d      	ldr	r2, [pc, #564]	; (10bcc <event_scan+0x278>)
   10996:	4b8e      	ldr	r3, [pc, #568]	; (10bd0 <event_scan+0x27c>)
   10998:	498e      	ldr	r1, [pc, #568]	; (10bd4 <event_scan+0x280>)
   1099a:	4890      	ldr	r0, [pc, #576]	; (10bdc <event_scan+0x288>)
   1099c:	e7eb      	b.n	10976 <event_scan+0x22>
	_radio.role = ROLE_SCAN;
   1099e:	2102      	movs	r1, #2
   109a0:	74e1      	strb	r1, [r4, #19]
	_radio.ticks_anchor = ticks_at_expire;
   109a2:	60a0      	str	r0, [r4, #8]
	_radio.ticker_id_prepare = 0;
   109a4:	7422      	strb	r2, [r4, #16]
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
   109a6:	f894 064d 	ldrb.w	r0, [r4, #1613]	; 0x64d
	_radio.ticker_id_event = RADIO_TICKER_ID_SCAN;
   109aa:	7463      	strb	r3, [r4, #17]
	_radio.scanner.state = 0;
   109ac:	f894 364c 	ldrb.w	r3, [r4, #1612]	; 0x64c
	_radio.state = STATE_RX;
   109b0:	2101      	movs	r1, #1
	_radio.scanner.state = 0;
   109b2:	f362 0341 	bfi	r3, r2, #1, #1
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
   109b6:	f000 0007 	and.w	r0, r0, #7
	_radio.scanner.state = 0;
   109ba:	f884 364c 	strb.w	r3, [r4, #1612]	; 0x64c
	_radio.state = STATE_RX;
   109be:	7521      	strb	r1, [r4, #20]
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
   109c0:	f7ff ff9e 	bl	10900 <adv_scan_configure.constprop.32>
	if(aux_scan){
   109c4:	4b86      	ldr	r3, [pc, #536]	; (10be0 <event_scan+0x28c>)
   109c6:	781e      	ldrb	r6, [r3, #0]
   109c8:	4698      	mov	r8, r3
   109ca:	2e00      	cmp	r6, #0
   109cc:	f000 80af 	beq.w	10b2e <event_scan+0x1da>
		stop_time_ticker = k_cycle_get_32();
   109d0:	f7f2 fc4a 	bl	3268 <_timer_cycle_get_32>
   109d4:	4b83      	ldr	r3, [pc, #524]	; (10be4 <event_scan+0x290>)
   109d6:	6018      	str	r0, [r3, #0]
		event_time_diff = (stop_time_ticker - start_time_ticker);
   109d8:	4b83      	ldr	r3, [pc, #524]	; (10be8 <event_scan+0x294>)
   109da:	681f      	ldr	r7, [r3, #0]
   109dc:	4b83      	ldr	r3, [pc, #524]	; (10bec <event_scan+0x298>)
   109de:	1bc7      	subs	r7, r0, r7
   109e0:	601f      	str	r7, [r3, #0]
		Time_difference_ticker = (SYS_CLOCK_HW_CYCLES_TO_NS(event_time_diff))/1000;
   109e2:	4b83      	ldr	r3, [pc, #524]	; (10bf0 <event_scan+0x29c>)
   109e4:	681a      	ldr	r2, [r3, #0]
   109e6:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
   109ea:	fb82 2306 	smull	r2, r3, r2, r6
   109ee:	fba2 0107 	umull	r0, r1, r2, r7
   109f2:	fb07 1103 	mla	r1, r7, r3, r1
   109f6:	4b7f      	ldr	r3, [pc, #508]	; (10bf4 <event_scan+0x2a0>)
   109f8:	681a      	ldr	r2, [r3, #0]
   109fa:	17d3      	asrs	r3, r2, #31
   109fc:	f7ef fc4c 	bl	298 <__aeabi_uldivmod>
   10a00:	4b7d      	ldr	r3, [pc, #500]	; (10bf8 <event_scan+0x2a4>)
		counter++;
   10a02:	4a7e      	ldr	r2, [pc, #504]	; (10bfc <event_scan+0x2a8>)
		Time_difference_ticker = (SYS_CLOCK_HW_CYCLES_TO_NS(event_time_diff))/1000;
   10a04:	fbb0 f0f6 	udiv	r0, r0, r6
   10a08:	2100      	movs	r1, #0
   10a0a:	e9c3 0100 	strd	r0, r1, [r3]
		counter++;
   10a0e:	7813      	ldrb	r3, [r2, #0]
   10a10:	3301      	adds	r3, #1
   10a12:	7013      	strb	r3, [r2, #0]
		if(Time_difference_ticker < _radio.ext_scanner.chan_off){
   10a14:	f504 63d7 	add.w	r3, r4, #1720	; 0x6b8
   10a18:	e9d3 6700 	ldrd	r6, r7, [r3]
   10a1c:	42b9      	cmp	r1, r7
   10a1e:	bf08      	it	eq
   10a20:	42b0      	cmpeq	r0, r6
   10a22:	f504 6ed9 	add.w	lr, r4, #1736	; 0x6c8
   10a26:	d206      	bcs.n	10a36 <event_scan+0xe2>
			_radio.ext_scanner.chan_off_calculation -= Time_difference_ticker;
   10a28:	e9de 2300 	ldrd	r2, r3, [lr]
   10a2c:	1a10      	subs	r0, r2, r0
   10a2e:	eb63 0101 	sbc.w	r1, r3, r1
   10a32:	e9ce 0100 	strd	r0, r1, [lr]
		if( _radio.ext_scanner.chan_off_calculation < 0x2710){
   10a36:	e9de 2300 	ldrd	r2, r3, [lr]
   10a3a:	2100      	movs	r1, #0
   10a3c:	f242 700f 	movw	r0, #9999	; 0x270f
   10a40:	4299      	cmp	r1, r3
   10a42:	bf08      	it	eq
   10a44:	4290      	cmpeq	r0, r2
   10a46:	d36f      	bcc.n	10b28 <event_scan+0x1d4>
			if( _radio.ext_scanner.chan_off_calculation <(int)1000){
   10a48:	2b00      	cmp	r3, #0
   10a4a:	bf08      	it	eq
   10a4c:	f5b2 7f7a 	cmpeq.w	r2, #1000	; 0x3e8
   10a50:	d21d      	bcs.n	10a8e <event_scan+0x13a>
					ticker_status =
   10a52:	f641 434e 	movw	r3, #7246	; 0x1c4e
   10a56:	2100      	movs	r1, #0
   10a58:	9306      	str	r3, [sp, #24]
   10a5a:	4b69      	ldr	r3, [pc, #420]	; (10c00 <event_scan+0x2ac>)
   10a5c:	9305      	str	r3, [sp, #20]
   10a5e:	9104      	str	r1, [sp, #16]
   10a60:	2320      	movs	r3, #32
   10a62:	9103      	str	r1, [sp, #12]
   10a64:	9102      	str	r1, [sp, #8]
   10a66:	9101      	str	r1, [sp, #4]
   10a68:	9100      	str	r1, [sp, #0]
   10a6a:	2206      	movs	r2, #6
   10a6c:	4608      	mov	r0, r1
   10a6e:	f7fb fd8f 	bl	c590 <ticker_update>
				LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   10a72:	f030 0302 	bics.w	r3, r0, #2
   10a76:	d00a      	beq.n	10a8e <event_scan+0x13a>
   10a78:	7ca3      	ldrb	r3, [r4, #18]
   10a7a:	2b06      	cmp	r3, #6
   10a7c:	d007      	beq.n	10a8e <event_scan+0x13a>
   10a7e:	4b52      	ldr	r3, [pc, #328]	; (10bc8 <event_scan+0x274>)
   10a80:	9301      	str	r3, [sp, #4]
   10a82:	9300      	str	r3, [sp, #0]
   10a84:	4a51      	ldr	r2, [pc, #324]	; (10bcc <event_scan+0x278>)
   10a86:	4b52      	ldr	r3, [pc, #328]	; (10bd0 <event_scan+0x27c>)
   10a88:	4952      	ldr	r1, [pc, #328]	; (10bd4 <event_scan+0x280>)
   10a8a:	485e      	ldr	r0, [pc, #376]	; (10c04 <event_scan+0x2b0>)
   10a8c:	e773      	b.n	10976 <event_scan+0x22>
			chan_set(_radio.ext_scanner.chan_index);
   10a8e:	f894 06b0 	ldrb.w	r0, [r4, #1712]	; 0x6b0
   10a92:	f7fe f961 	bl	ed58 <chan_set>
			aux_scan = 0x00;
   10a96:	2300      	movs	r3, #0
   10a98:	f888 3000 	strb.w	r3, [r8]
	radio_tmr_tifs_set(RADIO_TIFS);
   10a9c:	2096      	movs	r0, #150	; 0x96
   10a9e:	f008 f86b 	bl	18b78 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   10aa2:	2300      	movs	r3, #0
   10aa4:	4619      	mov	r1, r3
   10aa6:	461a      	mov	r2, r3
   10aa8:	4618      	mov	r0, r3
   10aaa:	f007 ffd3 	bl	18a54 <radio_switch_complete_and_tx>
	radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
   10aae:	f8d4 3744 	ldr.w	r3, [r4, #1860]	; 0x744
   10ab2:	f894 2749 	ldrb.w	r2, [r4, #1865]	; 0x749
   10ab6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   10aba:	3008      	adds	r0, #8
   10abc:	f007 ff30 	bl	18920 <radio_pkt_rx_set>
	radio_rssi_measure();
   10ac0:	f007 ffe0 	bl	18a84 <radio_rssi_measure>
	pdu = (void *)radio_pkt_scratch_get();
   10ac4:	f007 ffb6 	bl	18a34 <radio_pkt_scratch_get>
	if (ctrl_rl_enabled()) {
   10ac8:	f007 f8e4 	bl	17c94 <ctrl_rl_enabled>
   10acc:	f894 364d 	ldrb.w	r3, [r4, #1613]	; 0x64d
   10ad0:	2800      	cmp	r0, #0
   10ad2:	d043      	beq.n	10b5c <event_scan+0x208>
		struct ll_filter *filter =
   10ad4:	f3c3 1000 	ubfx	r0, r3, #4, #1
   10ad8:	f006 fef2 	bl	178c0 <ctrl_filter_get>
   10adc:	4606      	mov	r6, r0
		u8_t count, *irks = ctrl_irks_get(&count);
   10ade:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
   10ae2:	f006 fe1d 	bl	17720 <ctrl_irks_get>
		radio_filter_configure(filter->enable_bitmask,
   10ae6:	7871      	ldrb	r1, [r6, #1]
		u8_t count, *irks = ctrl_irks_get(&count);
   10ae8:	4607      	mov	r7, r0
		radio_filter_configure(filter->enable_bitmask,
   10aea:	1cb2      	adds	r2, r6, #2
   10aec:	7830      	ldrb	r0, [r6, #0]
   10aee:	f007 ffeb 	bl	18ac8 <radio_filter_configure>
		radio_ar_configure(count, irks);
   10af2:	4639      	mov	r1, r7
   10af4:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
   10af8:	f008 f9ca 	bl	18e90 <radio_ar_configure>
	remainder_us = radio_tmr_start(0, ticks_at_expire +
   10afc:	68e2      	ldr	r2, [r4, #12]
   10afe:	f105 0109 	add.w	r1, r5, #9
   10b02:	2000      	movs	r0, #0
   10b04:	f008 f844 	bl	18b90 <radio_tmr_start>
	radio_tmr_end_capture();
   10b08:	f008 f900 	bl	18d0c <radio_tmr_end_capture>
	if (preempt_calc(&_radio.scanner.hdr, RADIO_TICKER_ID_SCAN,
   10b0c:	2106      	movs	r1, #6
   10b0e:	462a      	mov	r2, r5
   10b10:	483d      	ldr	r0, [pc, #244]	; (10c08 <event_scan+0x2b4>)
   10b12:	f7ff fce3 	bl	104dc <preempt_calc>
   10b16:	4601      	mov	r1, r0
   10b18:	b360      	cbz	r0, 10b74 <event_scan+0x220>
		_radio.state = STATE_STOP;
   10b1a:	2304      	movs	r3, #4
   10b1c:	7523      	strb	r3, [r4, #20]
		radio_disable();
   10b1e:	f007 ff33 	bl	18988 <radio_disable>
}
   10b22:	b00c      	add	sp, #48	; 0x30
   10b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			_radio.ext_scanner.chan_off_calculation = _radio.ext_scanner.chan_off;
   10b28:	e9ce 6700 	strd	r6, r7, [lr]
   10b2c:	e7b6      	b.n	10a9c <event_scan+0x148>
		chan_set(37 + _radio.scanner.chan++);
   10b2e:	f894 364c 	ldrb.w	r3, [r4, #1612]	; 0x64c
   10b32:	f3c3 0081 	ubfx	r0, r3, #2, #2
   10b36:	1c42      	adds	r2, r0, #1
   10b38:	f362 0383 	bfi	r3, r2, #2, #2
   10b3c:	3025      	adds	r0, #37	; 0x25
   10b3e:	f884 364c 	strb.w	r3, [r4, #1612]	; 0x64c
   10b42:	f7fe f909 	bl	ed58 <chan_set>
		if (_radio.scanner.chan == 3) {
   10b46:	f894 364c 	ldrb.w	r3, [r4, #1612]	; 0x64c
   10b4a:	f003 020c 	and.w	r2, r3, #12
   10b4e:	2a0c      	cmp	r2, #12
			_radio.scanner.chan = 0;
   10b50:	bf04      	itt	eq
   10b52:	f366 0383 	bfieq	r3, r6, #2, #2
   10b56:	f884 364c 	strbeq.w	r3, [r4, #1612]	; 0x64c
   10b5a:	e79f      	b.n	10a9c <event_scan+0x148>
	if (_radio.scanner.filter_policy) {
   10b5c:	f013 0f30 	tst.w	r3, #48	; 0x30
   10b60:	d0cc      	beq.n	10afc <event_scan+0x1a8>
		struct ll_filter *wl = ctrl_filter_get(true);
   10b62:	2001      	movs	r0, #1
   10b64:	f006 feac 	bl	178c0 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
   10b68:	1c82      	adds	r2, r0, #2
   10b6a:	7841      	ldrb	r1, [r0, #1]
   10b6c:	7800      	ldrb	r0, [r0, #0]
   10b6e:	f007 ffab 	bl	18ac8 <radio_filter_configure>
   10b72:	e7c3      	b.n	10afc <event_scan+0x1a8>
		ret = ticker_start(															//this ticker was for closing the window.we ll use it for Aux packet
   10b74:	f641 43c5 	movw	r3, #7365	; 0x1cc5
   10b78:	9308      	str	r3, [sp, #32]
   10b7a:	4b24      	ldr	r3, [pc, #144]	; (10c0c <event_scan+0x2b8>)
   10b7c:	9307      	str	r3, [sp, #28]
   10b7e:	2204      	movs	r2, #4
   10b80:	4b23      	ldr	r3, [pc, #140]	; (10c10 <event_scan+0x2bc>)
   10b82:	9206      	str	r2, [sp, #24]
   10b84:	9305      	str	r3, [sp, #20]
   10b86:	9004      	str	r0, [sp, #16]
   10b88:	9003      	str	r0, [sp, #12]
   10b8a:	9002      	str	r0, [sp, #8]
   10b8c:	9001      	str	r0, [sp, #4]
   10b8e:	f8d4 365c 	ldr.w	r3, [r4, #1628]	; 0x65c
   10b92:	3309      	adds	r3, #9
   10b94:	9300      	str	r3, [sp, #0]
   10b96:	462b      	mov	r3, r5
   10b98:	f7fb fcaa 	bl	c4f0 <ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   10b9c:	f030 0302 	bics.w	r3, r0, #2
   10ba0:	d007      	beq.n	10bb2 <event_scan+0x25e>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   10ba2:	4b09      	ldr	r3, [pc, #36]	; (10bc8 <event_scan+0x274>)
   10ba4:	9301      	str	r3, [sp, #4]
   10ba6:	9300      	str	r3, [sp, #0]
   10ba8:	4a08      	ldr	r2, [pc, #32]	; (10bcc <event_scan+0x278>)
   10baa:	4b09      	ldr	r3, [pc, #36]	; (10bd0 <event_scan+0x27c>)
   10bac:	4909      	ldr	r1, [pc, #36]	; (10bd4 <event_scan+0x280>)
   10bae:	4819      	ldr	r0, [pc, #100]	; (10c14 <event_scan+0x2c0>)
   10bb0:	e6e1      	b.n	10976 <event_scan+0x22>
		ret = ticker_job_idle_get(RADIO_TICKER_INSTANCE_ID_RADIO,
   10bb2:	4619      	mov	r1, r3
   10bb4:	4618      	mov	r0, r3
   10bb6:	4a18      	ldr	r2, [pc, #96]	; (10c18 <event_scan+0x2c4>)
   10bb8:	f7fb fdb6 	bl	c728 <ticker_job_idle_get>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   10bbc:	f030 0302 	bics.w	r3, r0, #2
   10bc0:	d1ef      	bne.n	10ba2 <event_scan+0x24e>
   10bc2:	e7ae      	b.n	10b22 <event_scan+0x1ce>
   10bc4:	20000bf0 	.word	0x20000bf0
   10bc8:	00023dae 	.word	0x00023dae
   10bcc:	00022d76 	.word	0x00022d76
   10bd0:	00025d1e 	.word	0x00025d1e
   10bd4:	000272d8 	.word	0x000272d8
   10bd8:	00026073 	.word	0x00026073
   10bdc:	000260ec 	.word	0x000260ec
   10be0:	20001388 	.word	0x20001388
   10be4:	200032bc 	.word	0x200032bc
   10be8:	200032c0 	.word	0x200032c0
   10bec:	200032e0 	.word	0x200032e0
   10bf0:	2000a868 	.word	0x2000a868
   10bf4:	2000a864 	.word	0x2000a864
   10bf8:	20003290 	.word	0x20003290
   10bfc:	2000138b 	.word	0x2000138b
   10c00:	0000fac1 	.word	0x0000fac1
   10c04:	0002612b 	.word	0x0002612b
   10c08:	2000122c 	.word	0x2000122c
   10c0c:	0000f9b5 	.word	0x0000f9b5
   10c10:	0000fc25 	.word	0x0000fc25
   10c14:	000269ce 	.word	0x000269ce
   10c18:	0000fb9d 	.word	0x0000fb9d

00010c1c <event_adv>:
	LL_ASSERT(_radio.role == ROLE_NONE);
   10c1c:	4b3a      	ldr	r3, [pc, #232]	; (10d08 <event_adv+0xec>)
   10c1e:	7cda      	ldrb	r2, [r3, #19]
{
   10c20:	b573      	push	{r0, r1, r4, r5, r6, lr}
   10c22:	4605      	mov	r5, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
   10c24:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   10c28:	461c      	mov	r4, r3
   10c2a:	b172      	cbz	r2, 10c4a <event_adv+0x2e>
   10c2c:	4b37      	ldr	r3, [pc, #220]	; (10d0c <event_adv+0xf0>)
   10c2e:	9301      	str	r3, [sp, #4]
   10c30:	9300      	str	r3, [sp, #0]
   10c32:	4a37      	ldr	r2, [pc, #220]	; (10d10 <event_adv+0xf4>)
   10c34:	4b37      	ldr	r3, [pc, #220]	; (10d14 <event_adv+0xf8>)
   10c36:	4938      	ldr	r1, [pc, #224]	; (10d18 <event_adv+0xfc>)
   10c38:	4838      	ldr	r0, [pc, #224]	; (10d1c <event_adv+0x100>)
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV);
   10c3a:	f7f1 fb2b 	bl	2294 <printk>
   10c3e:	4040      	eors	r0, r0
   10c40:	f380 8811 	msr	BASEPRI, r0
   10c44:	f04f 0004 	mov.w	r0, #4
   10c48:	df02      	svc	2
   10c4a:	7c1b      	ldrb	r3, [r3, #16]
   10c4c:	b2db      	uxtb	r3, r3
   10c4e:	2b05      	cmp	r3, #5
   10c50:	d007      	beq.n	10c62 <event_adv+0x46>
   10c52:	4b2e      	ldr	r3, [pc, #184]	; (10d0c <event_adv+0xf0>)
   10c54:	9301      	str	r3, [sp, #4]
   10c56:	9300      	str	r3, [sp, #0]
   10c58:	4a2d      	ldr	r2, [pc, #180]	; (10d10 <event_adv+0xf4>)
   10c5a:	4b2e      	ldr	r3, [pc, #184]	; (10d14 <event_adv+0xf8>)
   10c5c:	492e      	ldr	r1, [pc, #184]	; (10d18 <event_adv+0xfc>)
   10c5e:	4830      	ldr	r0, [pc, #192]	; (10d20 <event_adv+0x104>)
   10c60:	e7eb      	b.n	10c3a <event_adv+0x1e>
	_radio.ticks_anchor = ticks_at_expire;
   10c62:	60a0      	str	r0, [r4, #8]
	adv_scan_configure(_radio.advertiser.phy_p, 1);
   10c64:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
	_radio.role = ROLE_ADV;
   10c68:	2601      	movs	r6, #1
	adv_scan_configure(_radio.advertiser.phy_p, 1);
   10c6a:	f3c0 0042 	ubfx	r0, r0, #1, #3
	_radio.role = ROLE_ADV;
   10c6e:	74e6      	strb	r6, [r4, #19]
	_radio.ticker_id_prepare = 0;
   10c70:	7421      	strb	r1, [r4, #16]
	_radio.ticker_id_event = RADIO_TICKER_ID_ADV;
   10c72:	7463      	strb	r3, [r4, #17]
	adv_scan_configure(_radio.advertiser.phy_p, 1);
   10c74:	f7ff fe44 	bl	10900 <adv_scan_configure.constprop.32>
	_radio.advertiser.chan_map_current = _radio.advertiser.chan_map;
   10c78:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   10c7c:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
   10c80:	f3c3 1302 	ubfx	r3, r3, #4, #3
   10c84:	f363 0202 	bfi	r2, r3, #0, #3
   10c88:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	adv_setup();
   10c8c:	f7fe f9ac 	bl	efe8 <adv_setup>
	if (ctrl_rl_enabled()) {
   10c90:	f007 f800 	bl	17c94 <ctrl_rl_enabled>
   10c94:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   10c98:	b300      	cbz	r0, 10cdc <event_adv+0xc0>
		struct ll_filter *filter =
   10c9a:	f013 0003 	ands.w	r0, r3, #3
   10c9e:	bf18      	it	ne
   10ca0:	4630      	movne	r0, r6
		struct ll_filter *wl = ctrl_filter_get(true);
   10ca2:	f006 fe0d 	bl	178c0 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
   10ca6:	1c82      	adds	r2, r0, #2
   10ca8:	7841      	ldrb	r1, [r0, #1]
   10caa:	7800      	ldrb	r0, [r0, #0]
   10cac:	f007 ff0c 	bl	18ac8 <radio_filter_configure>
	remainder_us = radio_tmr_start(1, ticks_at_expire +
   10cb0:	68e2      	ldr	r2, [r4, #12]
   10cb2:	f105 0109 	add.w	r1, r5, #9
   10cb6:	2001      	movs	r0, #1
   10cb8:	f007 ff6a 	bl	18b90 <radio_tmr_start>
	radio_tmr_end_capture();
   10cbc:	f008 f826 	bl	18d0c <radio_tmr_end_capture>
	if (preempt_calc(&_radio.advertiser.hdr, RADIO_TICKER_ID_ADV,
   10cc0:	462a      	mov	r2, r5
   10cc2:	2105      	movs	r1, #5
   10cc4:	4817      	ldr	r0, [pc, #92]	; (10d24 <event_adv+0x108>)
   10cc6:	f7ff fc09 	bl	104dc <preempt_calc>
   10cca:	4603      	mov	r3, r0
   10ccc:	b150      	cbz	r0, 10ce4 <event_adv+0xc8>
		_radio.state = STATE_STOP;
   10cce:	2304      	movs	r3, #4
   10cd0:	7523      	strb	r3, [r4, #20]
}
   10cd2:	b002      	add	sp, #8
   10cd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		radio_disable();
   10cd8:	f007 be56 	b.w	18988 <radio_disable>
	if (_radio.advertiser.filter_policy) {
   10cdc:	079b      	lsls	r3, r3, #30
   10cde:	d0e7      	beq.n	10cb0 <event_adv+0x94>
		struct ll_filter *wl = ctrl_filter_get(true);
   10ce0:	4630      	mov	r0, r6
   10ce2:	e7de      	b.n	10ca2 <event_adv+0x86>
		ticker_status =
   10ce4:	4a10      	ldr	r2, [pc, #64]	; (10d28 <event_adv+0x10c>)
   10ce6:	4601      	mov	r1, r0
   10ce8:	f7fb fd1e 	bl	c728 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   10cec:	f030 0302 	bics.w	r3, r0, #2
   10cf0:	d007      	beq.n	10d02 <event_adv+0xe6>
   10cf2:	4b06      	ldr	r3, [pc, #24]	; (10d0c <event_adv+0xf0>)
   10cf4:	9301      	str	r3, [sp, #4]
   10cf6:	9300      	str	r3, [sp, #0]
   10cf8:	4a05      	ldr	r2, [pc, #20]	; (10d10 <event_adv+0xf4>)
   10cfa:	4b06      	ldr	r3, [pc, #24]	; (10d14 <event_adv+0xf8>)
   10cfc:	4906      	ldr	r1, [pc, #24]	; (10d18 <event_adv+0xfc>)
   10cfe:	480b      	ldr	r0, [pc, #44]	; (10d2c <event_adv+0x110>)
   10d00:	e79b      	b.n	10c3a <event_adv+0x1e>
}
   10d02:	b002      	add	sp, #8
   10d04:	bd70      	pop	{r4, r5, r6, pc}
   10d06:	bf00      	nop
   10d08:	20000bf0 	.word	0x20000bf0
   10d0c:	00023dae 	.word	0x00023dae
   10d10:	00022d76 	.word	0x00022d76
   10d14:	00025ca3 	.word	0x00025ca3
   10d18:	000272d8 	.word	0x000272d8
   10d1c:	00026073 	.word	0x00026073
   10d20:	00025f66 	.word	0x00025f66
   10d24:	20000c08 	.word	0x20000c08
   10d28:	0000fb9d 	.word	0x0000fb9d
   10d2c:	00025f18 	.word	0x00025f18

00010d30 <event_stop.constprop.33>:
static void event_stop(u32_t ticks_at_expire, u32_t remainder,
   10d30:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
   10d32:	4b05      	ldr	r3, [pc, #20]	; (10d48 <event_stop.constprop.33+0x18>)
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   10d34:	2200      	movs	r2, #0
	s_mfy_radio_stop.param = context;
   10d36:	6098      	str	r0, [r3, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   10d38:	4611      	mov	r1, r2
   10d3a:	4610      	mov	r0, r2
   10d3c:	f7fa fe1a 	bl	b974 <mayfly_enqueue>
	LL_ASSERT(!retval);
   10d40:	b108      	cbz	r0, 10d46 <event_stop.constprop.33+0x16>
   10d42:	f7fe ff55 	bl	fbf0 <event_stop.part.11>
   10d46:	bd08      	pop	{r3, pc}
   10d48:	2000a018 	.word	0x2000a018

00010d4c <event_common_prepare>:
{
   10d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u32_t _ticks_xtal_to_start = *ticks_xtal_to_start;
   10d50:	6814      	ldr	r4, [r2, #0]
	u32_t _ticks_active_to_start = *ticks_active_to_start;
   10d52:	681d      	ldr	r5, [r3, #0]
{
   10d54:	b08d      	sub	sp, #52	; 0x34
	if (_ticks_xtal_to_start & XON_BITMASK) {
   10d56:	2c00      	cmp	r4, #0
{
   10d58:	4681      	mov	r9, r0
   10d5a:	910b      	str	r1, [sp, #44]	; 0x2c
   10d5c:	4690      	mov	r8, r2
   10d5e:	469b      	mov	fp, r3
   10d60:	f89d a05c 	ldrb.w	sl, [sp, #92]	; 0x5c
	if (_ticks_xtal_to_start & XON_BITMASK) {
   10d64:	da03      	bge.n	10d6e <event_common_prepare+0x22>
		_ticks_xtal_to_start =
   10d66:	9c16      	ldr	r4, [sp, #88]	; 0x58
   10d68:	42ac      	cmp	r4, r5
   10d6a:	bf38      	it	cc
   10d6c:	462c      	movcc	r4, r5
	if (_ticks_active_to_start < _ticks_xtal_to_start) {
   10d6e:	42ac      	cmp	r4, r5
   10d70:	4f56      	ldr	r7, [pc, #344]	; (10ecc <event_common_prepare+0x180>)
   10d72:	d924      	bls.n	10dbe <event_common_prepare+0x72>
		ticker_status =
   10d74:	f241 63e4 	movw	r3, #5860	; 0x16e4
   10d78:	9308      	str	r3, [sp, #32]
   10d7a:	4b55      	ldr	r3, [pc, #340]	; (10ed0 <event_common_prepare+0x184>)
   10d7c:	9305      	str	r3, [sp, #20]
   10d7e:	2100      	movs	r1, #0
		ticks_to_active = _ticks_xtal_to_start - _ticks_active_to_start;
   10d80:	1b63      	subs	r3, r4, r5
		ticker_status =
   10d82:	9300      	str	r3, [sp, #0]
   10d84:	9707      	str	r7, [sp, #28]
   10d86:	464b      	mov	r3, r9
   10d88:	9106      	str	r1, [sp, #24]
   10d8a:	9104      	str	r1, [sp, #16]
   10d8c:	9103      	str	r1, [sp, #12]
   10d8e:	9102      	str	r1, [sp, #8]
   10d90:	9101      	str	r1, [sp, #4]
   10d92:	2201      	movs	r2, #1
   10d94:	4608      	mov	r0, r1
   10d96:	f7fb fbab 	bl	c4f0 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   10d9a:	f030 0302 	bics.w	r3, r0, #2
   10d9e:	d034      	beq.n	10e0a <event_common_prepare+0xbe>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   10da0:	4b4c      	ldr	r3, [pc, #304]	; (10ed4 <event_common_prepare+0x188>)
   10da2:	9301      	str	r3, [sp, #4]
   10da4:	9300      	str	r3, [sp, #0]
   10da6:	4a4c      	ldr	r2, [pc, #304]	; (10ed8 <event_common_prepare+0x18c>)
   10da8:	4b4c      	ldr	r3, [pc, #304]	; (10edc <event_common_prepare+0x190>)
   10daa:	494d      	ldr	r1, [pc, #308]	; (10ee0 <event_common_prepare+0x194>)
   10dac:	484d      	ldr	r0, [pc, #308]	; (10ee4 <event_common_prepare+0x198>)
		LL_ASSERT(!retval);
   10dae:	f7f1 fa71 	bl	2294 <printk>
   10db2:	4040      	eors	r0, r0
   10db4:	f380 8811 	msr	BASEPRI, r0
   10db8:	f04f 0004 	mov.w	r0, #4
   10dbc:	df02      	svc	2
	} else if (_ticks_active_to_start > _ticks_xtal_to_start) {
   10dbe:	d21d      	bcs.n	10dfc <event_common_prepare+0xb0>
		event_active(0, 0, 0, NULL);
   10dc0:	2300      	movs	r3, #0
   10dc2:	461a      	mov	r2, r3
   10dc4:	4619      	mov	r1, r3
   10dc6:	4618      	mov	r0, r3
   10dc8:	f7fe ff3c 	bl	fc44 <event_active>
		ticker_status =
   10dcc:	f241 63f9 	movw	r3, #5881	; 0x16f9
   10dd0:	2100      	movs	r1, #0
   10dd2:	9308      	str	r3, [sp, #32]
		ticks_to_xtal = _ticks_active_to_start - _ticks_xtal_to_start;
   10dd4:	1b2c      	subs	r4, r5, r4
		ticker_status =
   10dd6:	4b44      	ldr	r3, [pc, #272]	; (10ee8 <event_common_prepare+0x19c>)
   10dd8:	9305      	str	r3, [sp, #20]
   10dda:	9707      	str	r7, [sp, #28]
   10ddc:	464b      	mov	r3, r9
   10dde:	9106      	str	r1, [sp, #24]
   10de0:	9104      	str	r1, [sp, #16]
   10de2:	9103      	str	r1, [sp, #12]
   10de4:	9102      	str	r1, [sp, #8]
   10de6:	9101      	str	r1, [sp, #4]
   10de8:	9400      	str	r4, [sp, #0]
   10dea:	2201      	movs	r2, #1
   10dec:	4608      	mov	r0, r1
   10dee:	f7fb fb7f 	bl	c4f0 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   10df2:	f030 0302 	bics.w	r3, r0, #2
   10df6:	d1d3      	bne.n	10da0 <event_common_prepare+0x54>
   10df8:	462c      	mov	r4, r5
   10dfa:	e00b      	b.n	10e14 <event_common_prepare+0xc8>
		event_active(0, 0, 0, NULL);
   10dfc:	2300      	movs	r3, #0
   10dfe:	461a      	mov	r2, r3
   10e00:	4619      	mov	r1, r3
   10e02:	4618      	mov	r0, r3
   10e04:	f7fe ff1e 	bl	fc44 <event_active>
		event_xtal(0, 0, 0, NULL);
   10e08:	2300      	movs	r3, #0
   10e0a:	461a      	mov	r2, r3
   10e0c:	4619      	mov	r1, r3
   10e0e:	4618      	mov	r0, r3
   10e10:	f7fe ff3e 	bl	fc90 <event_xtal>
	_radio.remainder_anchor = remainder;
   10e14:	4e35      	ldr	r6, [pc, #212]	; (10eec <event_common_prepare+0x1a0>)
   10e16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10e18:	60f3      	str	r3, [r6, #12]
	ticker_status =
   10e1a:	f241 7311 	movw	r3, #5905	; 0x1711
   10e1e:	9308      	str	r3, [sp, #32]
   10e20:	9b19      	ldr	r3, [sp, #100]	; 0x64
   10e22:	9306      	str	r3, [sp, #24]
   10e24:	2200      	movs	r2, #0
   10e26:	9b18      	ldr	r3, [sp, #96]	; 0x60
   10e28:	9305      	str	r3, [sp, #20]
   10e2a:	9707      	str	r7, [sp, #28]
   10e2c:	464b      	mov	r3, r9
   10e2e:	9204      	str	r2, [sp, #16]
   10e30:	9203      	str	r2, [sp, #12]
   10e32:	9202      	str	r2, [sp, #8]
   10e34:	9201      	str	r2, [sp, #4]
   10e36:	9400      	str	r4, [sp, #0]
   10e38:	4611      	mov	r1, r2
   10e3a:	4610      	mov	r0, r2
   10e3c:	f7fb fb58 	bl	c4f0 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   10e40:	f030 0302 	bics.w	r3, r0, #2
   10e44:	d1ac      	bne.n	10da0 <event_common_prepare+0x54>
	event_stop(0, 0, 0, (void *)STATE_ABORT);
   10e46:	2005      	movs	r0, #5
   10e48:	f7ff ff72 	bl	10d30 <event_stop.constprop.33>
	if (_radio.ticks_active_to_start != _ticks_active_to_start) {
   10e4c:	f8d6 378c 	ldr.w	r3, [r6, #1932]	; 0x78c
   10e50:	429d      	cmp	r5, r3
   10e52:	d023      	beq.n	10e9c <event_common_prepare+0x150>
		*ticks_active_to_start = _radio.ticks_active_to_start;
   10e54:	f8cb 3000 	str.w	r3, [fp]
		if (*ticks_xtal_to_start & XON_BITMASK) {
   10e58:	f8d8 3000 	ldr.w	r3, [r8]
		ticker_status =
   10e5c:	9705      	str	r7, [sp, #20]
		if (*ticks_xtal_to_start & XON_BITMASK) {
   10e5e:	2b00      	cmp	r3, #0
			*ticks_xtal_to_start &= ~XON_BITMASK;
   10e60:	bfbc      	itt	lt
   10e62:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
   10e66:	f8c8 3000 	strlt.w	r3, [r8]
		ticks_to_start_new = (_radio.ticks_active_to_start <
   10e6a:	f8d6 278c 	ldr.w	r2, [r6, #1932]	; 0x78c
   10e6e:	f8d8 1000 	ldr.w	r1, [r8]
   10e72:	428a      	cmp	r2, r1
   10e74:	bf38      	it	cc
   10e76:	460a      	movcc	r2, r1
		ticker_status =
   10e78:	f241 7141 	movw	r1, #5953	; 0x1741
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   10e7c:	b2a3      	uxth	r3, r4
   10e7e:	b292      	uxth	r2, r2
		ticker_status =
   10e80:	9106      	str	r1, [sp, #24]
   10e82:	2100      	movs	r1, #0
   10e84:	9302      	str	r3, [sp, #8]
   10e86:	9201      	str	r2, [sp, #4]
   10e88:	9200      	str	r2, [sp, #0]
   10e8a:	9104      	str	r1, [sp, #16]
   10e8c:	9103      	str	r1, [sp, #12]
   10e8e:	4652      	mov	r2, sl
   10e90:	4608      	mov	r0, r1
   10e92:	f7fb fb7d 	bl	c590 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   10e96:	f030 0302 	bics.w	r3, r0, #2
   10e9a:	d181      	bne.n	10da0 <event_common_prepare+0x54>
	packet_tx_enqueue(0xFF);
   10e9c:	20ff      	movs	r0, #255	; 0xff
   10e9e:	f7fe ffc3 	bl	fe28 <packet_tx_enqueue>
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
   10ea2:	4b13      	ldr	r3, [pc, #76]	; (10ef0 <event_common_prepare+0x1a4>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   10ea4:	2201      	movs	r2, #1
   10ea6:	4611      	mov	r1, r2
   10ea8:	2000      	movs	r0, #0
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
   10eaa:	f8c3 a008 	str.w	sl, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   10eae:	f7fa fd61 	bl	b974 <mayfly_enqueue>
		LL_ASSERT(!retval);
   10eb2:	b138      	cbz	r0, 10ec4 <event_common_prepare+0x178>
   10eb4:	4b07      	ldr	r3, [pc, #28]	; (10ed4 <event_common_prepare+0x188>)
   10eb6:	9301      	str	r3, [sp, #4]
   10eb8:	9300      	str	r3, [sp, #0]
   10eba:	4a07      	ldr	r2, [pc, #28]	; (10ed8 <event_common_prepare+0x18c>)
   10ebc:	4b07      	ldr	r3, [pc, #28]	; (10edc <event_common_prepare+0x190>)
   10ebe:	4908      	ldr	r1, [pc, #32]	; (10ee0 <event_common_prepare+0x194>)
   10ec0:	480c      	ldr	r0, [pc, #48]	; (10ef4 <event_common_prepare+0x1a8>)
   10ec2:	e774      	b.n	10dae <event_common_prepare+0x62>
}
   10ec4:	b00d      	add	sp, #52	; 0x34
   10ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10eca:	bf00      	nop
   10ecc:	0000f9b5 	.word	0x0000f9b5
   10ed0:	0000fc45 	.word	0x0000fc45
   10ed4:	00023dae 	.word	0x00023dae
   10ed8:	00022d76 	.word	0x00022d76
   10edc:	00025c41 	.word	0x00025c41
   10ee0:	000272d8 	.word	0x000272d8
   10ee4:	00025f18 	.word	0x00025f18
   10ee8:	0000fc91 	.word	0x0000fc91
   10eec:	20000bf0 	.word	0x20000bf0
   10ef0:	2000a0d8 	.word	0x2000a0d8
   10ef4:	000266a2 	.word	0x000266a2

00010ef8 <radio_event_adv_prepare>:
{
   10ef8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
   10efa:	4a11      	ldr	r2, [pc, #68]	; (10f40 <radio_event_adv_prepare+0x48>)
   10efc:	7c13      	ldrb	r3, [r2, #16]
   10efe:	f003 04ff 	and.w	r4, r3, #255	; 0xff
   10f02:	b173      	cbz	r3, 10f22 <radio_event_adv_prepare+0x2a>
   10f04:	4b0f      	ldr	r3, [pc, #60]	; (10f44 <radio_event_adv_prepare+0x4c>)
   10f06:	9301      	str	r3, [sp, #4]
   10f08:	9300      	str	r3, [sp, #0]
   10f0a:	4a0f      	ldr	r2, [pc, #60]	; (10f48 <radio_event_adv_prepare+0x50>)
   10f0c:	4b0f      	ldr	r3, [pc, #60]	; (10f4c <radio_event_adv_prepare+0x54>)
   10f0e:	4910      	ldr	r1, [pc, #64]	; (10f50 <radio_event_adv_prepare+0x58>)
   10f10:	4810      	ldr	r0, [pc, #64]	; (10f54 <radio_event_adv_prepare+0x5c>)
   10f12:	f7f1 f9bf 	bl	2294 <printk>
   10f16:	4040      	eors	r0, r0
   10f18:	f380 8811 	msr	BASEPRI, r0
   10f1c:	f04f 0004 	mov.w	r0, #4
   10f20:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_ADV;
   10f22:	2305      	movs	r3, #5
   10f24:	7413      	strb	r3, [r2, #16]
	event_common_prepare(ticks_at_expire, remainder,
   10f26:	9403      	str	r4, [sp, #12]
   10f28:	4c0b      	ldr	r4, [pc, #44]	; (10f58 <radio_event_adv_prepare+0x60>)
   10f2a:	9402      	str	r4, [sp, #8]
   10f2c:	9301      	str	r3, [sp, #4]
   10f2e:	6a13      	ldr	r3, [r2, #32]
   10f30:	9300      	str	r3, [sp, #0]
   10f32:	f102 031c 	add.w	r3, r2, #28
   10f36:	3218      	adds	r2, #24
   10f38:	f7ff ff08 	bl	10d4c <event_common_prepare>
}
   10f3c:	b004      	add	sp, #16
   10f3e:	bd10      	pop	{r4, pc}
   10f40:	20000bf0 	.word	0x20000bf0
   10f44:	00023dae 	.word	0x00023dae
   10f48:	00022d76 	.word	0x00022d76
   10f4c:	00025c6f 	.word	0x00025c6f
   10f50:	000272d8 	.word	0x000272d8
   10f54:	000267de 	.word	0x000267de
   10f58:	00010c1d 	.word	0x00010c1d

00010f5c <event_scan_prepare>:
{
   10f5c:	b530      	push	{r4, r5, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
   10f5e:	4c25      	ldr	r4, [pc, #148]	; (10ff4 <event_scan_prepare+0x98>)
   10f60:	7c23      	ldrb	r3, [r4, #16]
{
   10f62:	b085      	sub	sp, #20
   10f64:	4605      	mov	r5, r0
	LL_ASSERT(!_radio.ticker_id_prepare);
   10f66:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   10f6a:	b173      	cbz	r3, 10f8a <event_scan_prepare+0x2e>
   10f6c:	4b22      	ldr	r3, [pc, #136]	; (10ff8 <event_scan_prepare+0x9c>)
   10f6e:	9301      	str	r3, [sp, #4]
   10f70:	9300      	str	r3, [sp, #0]
   10f72:	4a22      	ldr	r2, [pc, #136]	; (10ffc <event_scan_prepare+0xa0>)
   10f74:	4b22      	ldr	r3, [pc, #136]	; (11000 <event_scan_prepare+0xa4>)
   10f76:	4923      	ldr	r1, [pc, #140]	; (11004 <event_scan_prepare+0xa8>)
   10f78:	4823      	ldr	r0, [pc, #140]	; (11008 <event_scan_prepare+0xac>)
		LL_ASSERT(!retval);
   10f7a:	f7f1 f98b 	bl	2294 <printk>
   10f7e:	4040      	eors	r0, r0
   10f80:	f380 8811 	msr	BASEPRI, r0
   10f84:	f04f 0004 	mov.w	r0, #4
   10f88:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_SCAN;
   10f8a:	2306      	movs	r3, #6
   10f8c:	7423      	strb	r3, [r4, #16]
	event_common_prepare(ticks_at_expire, remainder,
   10f8e:	9203      	str	r2, [sp, #12]
   10f90:	9301      	str	r3, [sp, #4]
   10f92:	4a1e      	ldr	r2, [pc, #120]	; (1100c <event_scan_prepare+0xb0>)
   10f94:	f8d4 3644 	ldr.w	r3, [r4, #1604]	; 0x644
   10f98:	9202      	str	r2, [sp, #8]
   10f9a:	9300      	str	r3, [sp, #0]
   10f9c:	f204 623c 	addw	r2, r4, #1596	; 0x63c
   10fa0:	f504 63c8 	add.w	r3, r4, #1600	; 0x640
   10fa4:	f7ff fed2 	bl	10d4c <event_common_prepare>
	if (_radio.scanner.conn) {
   10fa8:	f8d4 3674 	ldr.w	r3, [r4, #1652]	; 0x674
   10fac:	b303      	cbz	r3, 10ff0 <event_scan_prepare+0x94>
		if (_radio.scanner.hdr.ticks_xtal_to_start & XON_BITMASK) {
   10fae:	f8d4 363c 	ldr.w	r3, [r4, #1596]	; 0x63c
   10fb2:	2b00      	cmp	r3, #0
   10fb4:	da0c      	bge.n	10fd0 <event_scan_prepare+0x74>
			u32_t ticks_prepare_to_start =
   10fb6:	f8d4 1644 	ldr.w	r1, [r4, #1604]	; 0x644
   10fba:	f8d4 2640 	ldr.w	r2, [r4, #1600]	; 0x640
				(_radio.scanner.hdr.ticks_xtal_to_start &
   10fbe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
				 ~XON_BITMASK) - ticks_prepare_to_start;
   10fc2:	4291      	cmp	r1, r2
   10fc4:	bf2c      	ite	cs
   10fc6:	ebc3 0301 	rsbcs	r3, r3, r1
   10fca:	ebc3 0302 	rsbcc	r3, r3, r2
			ticks_at_expire_normal -=
   10fce:	441d      	add	r5, r3
		s_mfy_sched_after_mstr_free_offset_get.param =
   10fd0:	4b0f      	ldr	r3, [pc, #60]	; (11010 <event_scan_prepare+0xb4>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   10fd2:	2201      	movs	r2, #1
   10fd4:	4611      	mov	r1, r2
   10fd6:	2000      	movs	r0, #0
		s_mfy_sched_after_mstr_free_offset_get.param =
   10fd8:	609d      	str	r5, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   10fda:	f7fa fccb 	bl	b974 <mayfly_enqueue>
		LL_ASSERT(!retval);
   10fde:	b138      	cbz	r0, 10ff0 <event_scan_prepare+0x94>
   10fe0:	4b05      	ldr	r3, [pc, #20]	; (10ff8 <event_scan_prepare+0x9c>)
   10fe2:	9301      	str	r3, [sp, #4]
   10fe4:	9300      	str	r3, [sp, #0]
   10fe6:	4a05      	ldr	r2, [pc, #20]	; (10ffc <event_scan_prepare+0xa0>)
   10fe8:	4b05      	ldr	r3, [pc, #20]	; (11000 <event_scan_prepare+0xa4>)
   10fea:	4906      	ldr	r1, [pc, #24]	; (11004 <event_scan_prepare+0xa8>)
   10fec:	4809      	ldr	r0, [pc, #36]	; (11014 <event_scan_prepare+0xb8>)
   10fee:	e7c4      	b.n	10f7a <event_scan_prepare+0x1e>
}
   10ff0:	b005      	add	sp, #20
   10ff2:	bd30      	pop	{r4, r5, pc}
   10ff4:	20000bf0 	.word	0x20000bf0
   10ff8:	00023dae 	.word	0x00023dae
   10ffc:	00022d76 	.word	0x00022d76
   11000:	00025d0b 	.word	0x00025d0b
   11004:	000272d8 	.word	0x000272d8
   11008:	000267de 	.word	0x000267de
   1100c:	00010955 	.word	0x00010955
   11010:	2000a048 	.word	0x2000a048
   11014:	000266a2 	.word	0x000266a2

00011018 <radio_event_ext_adv_prepare>:
{
   11018:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
   1101a:	4a11      	ldr	r2, [pc, #68]	; (11060 <radio_event_ext_adv_prepare+0x48>)
   1101c:	7c13      	ldrb	r3, [r2, #16]
   1101e:	f003 04ff 	and.w	r4, r3, #255	; 0xff
   11022:	b173      	cbz	r3, 11042 <radio_event_ext_adv_prepare+0x2a>
   11024:	4b0f      	ldr	r3, [pc, #60]	; (11064 <radio_event_ext_adv_prepare+0x4c>)
   11026:	9301      	str	r3, [sp, #4]
   11028:	9300      	str	r3, [sp, #0]
   1102a:	4a0f      	ldr	r2, [pc, #60]	; (11068 <radio_event_ext_adv_prepare+0x50>)
   1102c:	4b0f      	ldr	r3, [pc, #60]	; (1106c <radio_event_ext_adv_prepare+0x54>)
   1102e:	4910      	ldr	r1, [pc, #64]	; (11070 <radio_event_ext_adv_prepare+0x58>)
   11030:	4810      	ldr	r0, [pc, #64]	; (11074 <radio_event_ext_adv_prepare+0x5c>)
   11032:	f7f1 f92f 	bl	2294 <printk>
   11036:	4040      	eors	r0, r0
   11038:	f380 8811 	msr	BASEPRI, r0
   1103c:	f04f 0004 	mov.w	r0, #4
   11040:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_EXT_ADV;
   11042:	2308      	movs	r3, #8
   11044:	7413      	strb	r3, [r2, #16]
	event_common_prepare(ticks_at_expire, remainder,
   11046:	9403      	str	r4, [sp, #12]
   11048:	4c0b      	ldr	r4, [pc, #44]	; (11078 <radio_event_ext_adv_prepare+0x60>)
   1104a:	9402      	str	r4, [sp, #8]
   1104c:	9301      	str	r3, [sp, #4]
   1104e:	6a13      	ldr	r3, [r2, #32]
   11050:	9300      	str	r3, [sp, #0]
   11052:	f102 031c 	add.w	r3, r2, #28
   11056:	3218      	adds	r2, #24
   11058:	f7ff fe78 	bl	10d4c <event_common_prepare>
}
   1105c:	b004      	add	sp, #16
   1105e:	bd10      	pop	{r4, pc}
   11060:	20000bf0 	.word	0x20000bf0
   11064:	00023dae 	.word	0x00023dae
   11068:	00022d76 	.word	0x00022d76
   1106c:	00025c87 	.word	0x00025c87
   11070:	000272d8 	.word	0x000272d8
   11074:	000267de 	.word	0x000267de
   11078:	00010519 	.word	0x00010519

0001107c <event_adv_stop>:
{
   1107c:	b507      	push	{r0, r1, r2, lr}
	event_stop(0, 0, 0, (void *)STATE_ABORT);
   1107e:	2005      	movs	r0, #5
   11080:	f7ff fe56 	bl	10d30 <event_stop.constprop.33>
	ticker_status =
   11084:	f641 33c7 	movw	r3, #7111	; 0x1bc7
   11088:	2100      	movs	r1, #0
   1108a:	9300      	str	r3, [sp, #0]
   1108c:	2205      	movs	r2, #5
   1108e:	4b0c      	ldr	r3, [pc, #48]	; (110c0 <event_adv_stop+0x44>)
   11090:	4608      	mov	r0, r1
   11092:	f7fb facb 	bl	c62c <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   11096:	f030 0302 	bics.w	r3, r0, #2
   1109a:	d00e      	beq.n	110ba <event_adv_stop+0x3e>
   1109c:	4b09      	ldr	r3, [pc, #36]	; (110c4 <event_adv_stop+0x48>)
   1109e:	9301      	str	r3, [sp, #4]
   110a0:	9300      	str	r3, [sp, #0]
   110a2:	4a09      	ldr	r2, [pc, #36]	; (110c8 <event_adv_stop+0x4c>)
   110a4:	4b09      	ldr	r3, [pc, #36]	; (110cc <event_adv_stop+0x50>)
   110a6:	490a      	ldr	r1, [pc, #40]	; (110d0 <event_adv_stop+0x54>)
   110a8:	480a      	ldr	r0, [pc, #40]	; (110d4 <event_adv_stop+0x58>)
   110aa:	f7f1 f8f3 	bl	2294 <printk>
   110ae:	4040      	eors	r0, r0
   110b0:	f380 8811 	msr	BASEPRI, r0
   110b4:	f04f 0004 	mov.w	r0, #4
   110b8:	df02      	svc	2
}
   110ba:	b003      	add	sp, #12
   110bc:	f85d fb04 	ldr.w	pc, [sp], #4
   110c0:	0000fffd 	.word	0x0000fffd
   110c4:	00023dae 	.word	0x00023dae
   110c8:	00022d76 	.word	0x00022d76
   110cc:	00025cfc 	.word	0x00025cfc
   110d0:	000272d8 	.word	0x000272d8
   110d4:	00025f18 	.word	0x00025f18

000110d8 <mayfly_xtal_start>:
	clock_control_on(_radio.hf_clock, NULL);
   110d8:	4b02      	ldr	r3, [pc, #8]	; (110e4 <mayfly_xtal_start+0xc>)
   110da:	6818      	ldr	r0, [r3, #0]
   110dc:	6843      	ldr	r3, [r0, #4]
   110de:	2100      	movs	r1, #0
   110e0:	681b      	ldr	r3, [r3, #0]
   110e2:	4718      	bx	r3
   110e4:	20000bf0 	.word	0x20000bf0

000110e8 <mayfly_xtal_stop>:
	clock_control_off(_radio.hf_clock, NULL);
   110e8:	4b02      	ldr	r3, [pc, #8]	; (110f4 <mayfly_xtal_stop+0xc>)
   110ea:	6818      	ldr	r0, [r3, #0]
static inline int clock_control_off(struct device *dev,
				    clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->off(dev, sys);
   110ec:	6843      	ldr	r3, [r0, #4]
   110ee:	2100      	movs	r1, #0
   110f0:	685b      	ldr	r3, [r3, #4]
   110f2:	4718      	bx	r3
   110f4:	20000bf0 	.word	0x20000bf0

000110f8 <chan_sel_2>:
{
   110f8:	b5f0      	push	{r4, r5, r6, r7, lr}
	prn_e = counter ^ chan_id;
   110fa:	4048      	eors	r0, r1
   110fc:	2703      	movs	r7, #3
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
   110fe:	ea4f 2e10 	mov.w	lr, r0, lsr #8
   11102:	2608      	movs	r6, #8
	o = 0;
   11104:	2400      	movs	r4, #0
		o |= (i & 1);
   11106:	f00e 0501 	and.w	r5, lr, #1
   1110a:	3e01      	subs	r6, #1
   1110c:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
	for (iterate = 0; iterate < 8; iterate++) {
   11110:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
		o |= (i & 1);
   11114:	b2ec      	uxtb	r4, r5
		i >>= 1;
   11116:	ea4f 0e5e 	mov.w	lr, lr, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
   1111a:	d1f4      	bne.n	11106 <chan_sel_2+0xe>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
   1111c:	0225      	lsls	r5, r4, #8
   1111e:	b22d      	sxth	r5, r5
   11120:	b2c0      	uxtb	r0, r0
   11122:	f04f 0e08 	mov.w	lr, #8
	o = 0;
   11126:	4634      	mov	r4, r6
		o |= (i & 1);
   11128:	f000 0601 	and.w	r6, r0, #1
   1112c:	ea46 0444 	orr.w	r4, r6, r4, lsl #1
   11130:	f10e 36ff 	add.w	r6, lr, #4294967295	; 0xffffffff
	for (iterate = 0; iterate < 8; iterate++) {
   11134:	f016 0eff 	ands.w	lr, r6, #255	; 0xff
		o |= (i & 1);
   11138:	b2e4      	uxtb	r4, r4
		i >>= 1;
   1113a:	ea4f 0050 	mov.w	r0, r0, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
   1113e:	d1f3      	bne.n	11128 <chan_sel_2+0x30>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
   11140:	432c      	orrs	r4, r5
	return ((u32_t)a * 17 + b) & 0xFFFF;
   11142:	eb04 1404 	add.w	r4, r4, r4, lsl #4
   11146:	3f01      	subs	r7, #1
   11148:	440c      	add	r4, r1
	for (iterate = 0; iterate < 3; iterate++) {
   1114a:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
	return ((u32_t)a * 17 + b) & 0xFFFF;
   1114e:	b2a0      	uxth	r0, r4
	for (iterate = 0; iterate < 3; iterate++) {
   11150:	d1d5      	bne.n	110fe <chan_sel_2+0x6>
	chan_next = prn_e % 37;
   11152:	2425      	movs	r4, #37	; 0x25
	prn_e ^= chan_id;
   11154:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
   11156:	fbb1 f0f4 	udiv	r0, r1, r4
   1115a:	fb04 1010 	mls	r0, r4, r0, r1
   1115e:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
   11160:	08c4      	lsrs	r4, r0, #3
   11162:	f000 0507 	and.w	r5, r0, #7
   11166:	5d14      	ldrb	r4, [r2, r4]
   11168:	412c      	asrs	r4, r5
   1116a:	07e4      	lsls	r4, r4, #31
   1116c:	d407      	bmi.n	1117e <chan_sel_2+0x86>
		chan_index = ((u32_t)chan_count * prn_e) >> 16;
   1116e:	4359      	muls	r1, r3
		chan_next = chan_sel_remap(chan_map, chan_index);
   11170:	f3c1 4107 	ubfx	r1, r1, #16, #8
   11174:	4610      	mov	r0, r2
}
   11176:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		chan_next = chan_sel_remap(chan_map, chan_index);
   1117a:	f7fd ba05 	b.w	e588 <chan_sel_remap>
}
   1117e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00011180 <ctrl_tx_enqueue>:
{
   11180:	b510      	push	{r4, lr}
	    !conn->empty &&
   11182:	f890 40f8 	ldrb.w	r4, [r0, #248]	; 0xf8
   11186:	f8d0 2140 	ldr.w	r2, [r0, #320]	; 0x140
	if (
   1118a:	f014 0f80 	tst.w	r4, #128	; 0x80
   1118e:	d118      	bne.n	111c2 <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
   11190:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
	    !conn->empty &&
   11194:	b1ab      	cbz	r3, 111c2 <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
   11196:	0724      	lsls	r4, r4, #28
   11198:	d413      	bmi.n	111c2 <ctrl_tx_enqueue+0x42>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
   1119a:	f8d0 4148 	ldr.w	r4, [r0, #328]	; 0x148
   1119e:	42a3      	cmp	r3, r4
			conn->pkt_tx_data = conn->pkt_tx_data->next;
   111a0:	bf04      	itt	eq
   111a2:	681c      	ldreq	r4, [r3, #0]
   111a4:	f8c0 4148 	streq.w	r4, [r0, #328]	; 0x148
		if (!conn->pkt_tx_ctrl) {
   111a8:	b992      	cbnz	r2, 111d0 <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head->next;
   111aa:	681a      	ldr	r2, [r3, #0]
   111ac:	600a      	str	r2, [r1, #0]
			conn->pkt_tx_head->next = node_tx;
   111ae:	6019      	str	r1, [r3, #0]
			conn->pkt_tx_ctrl = node_tx;
   111b0:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
	conn->pkt_tx_ctrl_last = node_tx;
   111b4:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
	if (node_tx->next == 0) {
   111b8:	680b      	ldr	r3, [r1, #0]
   111ba:	b90b      	cbnz	r3, 111c0 <ctrl_tx_enqueue+0x40>
		conn->pkt_tx_last = node_tx;
   111bc:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
   111c0:	bd10      	pop	{r4, pc}
		if (!conn->pkt_tx_ctrl) {
   111c2:	b92a      	cbnz	r2, 111d0 <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head;
   111c4:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
   111c8:	600b      	str	r3, [r1, #0]
			conn->pkt_tx_head = node_tx;
   111ca:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
   111ce:	e7ef      	b.n	111b0 <ctrl_tx_enqueue+0x30>
	node_tx->next = conn->pkt_tx_ctrl_last->next;
   111d0:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
   111d4:	681a      	ldr	r2, [r3, #0]
   111d6:	600a      	str	r2, [r1, #0]
	conn->pkt_tx_ctrl_last->next = node_tx;
   111d8:	6019      	str	r1, [r3, #0]
   111da:	e7eb      	b.n	111b4 <ctrl_tx_enqueue+0x34>

000111dc <ctrl_tx_sec_enqueue>:
{
   111dc:	b410      	push	{r4}
	if (conn->pause_tx) {
   111de:	f890 40f8 	ldrb.w	r4, [r0, #248]	; 0xf8
   111e2:	0724      	lsls	r4, r4, #28
{
   111e4:	460a      	mov	r2, r1
	if (conn->pause_tx) {
   111e6:	d50f      	bpl.n	11208 <ctrl_tx_sec_enqueue+0x2c>
		if (!conn->pkt_tx_ctrl) {
   111e8:	f8d0 1140 	ldr.w	r1, [r0, #320]	; 0x140
   111ec:	b931      	cbnz	r1, 111fc <ctrl_tx_sec_enqueue+0x20>
			node_tx->next = conn->pkt_tx_head;
   111ee:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
   111f2:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_head = node_tx;
   111f4:	f8c0 213c 	str.w	r2, [r0, #316]	; 0x13c
}
   111f8:	bc10      	pop	{r4}
   111fa:	4770      	bx	lr
			node_tx->next = conn->pkt_tx_ctrl_last->next;
   111fc:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
   11200:	6819      	ldr	r1, [r3, #0]
   11202:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_ctrl_last->next = node_tx;
   11204:	601a      	str	r2, [r3, #0]
   11206:	e7f7      	b.n	111f8 <ctrl_tx_sec_enqueue+0x1c>
}
   11208:	bc10      	pop	{r4}
		ctrl_tx_enqueue(conn, node_tx);
   1120a:	f7ff bfb9 	b.w	11180 <ctrl_tx_enqueue>
	...

00011210 <feature_rsp_send>:
{
   11210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11212:	4f21      	ldr	r7, [pc, #132]	; (11298 <feature_rsp_send+0x88>)
{
   11214:	4605      	mov	r5, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11216:	f207 7064 	addw	r0, r7, #1892	; 0x764
{
   1121a:	460e      	mov	r6, r1
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   1121c:	f7fa fadf 	bl	b7de <mem_acquire>
	if (!node_tx) {
   11220:	4604      	mov	r4, r0
   11222:	b3b0      	cbz	r0, 11292 <feature_rsp_send+0x82>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
   11224:	7933      	ldrb	r3, [r6, #4]
	       (features[1] << 8) | (features[2] << 16);
   11226:	7971      	ldrb	r1, [r6, #5]
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
   11228:	f8d7 271c 	ldr.w	r2, [r7, #1820]	; 0x71c
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
   1122c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
   11230:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
   11234:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
   11238:	f043 0310 	orr.w	r3, r3, #16
   1123c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	       (features[1] << 8) | (features[2] << 16);
   11240:	79b1      	ldrb	r1, [r6, #6]
   11242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
   11246:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
   1124a:	f3c1 0110 	ubfx	r1, r1, #0, #17
   1124e:	400b      	ands	r3, r1
   11250:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	_radio.conn_curr->common.fex_valid = 1;
   11254:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
   11258:	f043 0320 	orr.w	r3, r3, #32
   1125c:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11260:	7903      	ldrb	r3, [r0, #4]
   11262:	f043 0303 	orr.w	r3, r3, #3
   11266:	7103      	strb	r3, [r0, #4]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
   11268:	2208      	movs	r2, #8
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   1126a:	2309      	movs	r3, #9
   1126c:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   1126e:	71c3      	strb	r3, [r0, #7]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
   11270:	2100      	movs	r1, #0
   11272:	4410      	add	r0, r2
   11274:	f7ef fab9 	bl	7ea <memset>
		conn->llcp_features & 0xFF;
   11278:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
	pdu_ctrl_tx->llctrl.feature_req.features[0] =
   1127c:	7223      	strb	r3, [r4, #8]
		(conn->llcp_features >> 8) & 0xFF;
   1127e:	0a1a      	lsrs	r2, r3, #8
		(conn->llcp_features >> 16) & 0xFF;
   11280:	0c1b      	lsrs	r3, r3, #16
	ctrl_tx_sec_enqueue(conn, node_tx);
   11282:	4628      	mov	r0, r5
	pdu_ctrl_tx->llctrl.feature_req.features[1] =
   11284:	7262      	strb	r2, [r4, #9]
	pdu_ctrl_tx->llctrl.feature_req.features[2] =
   11286:	72a3      	strb	r3, [r4, #10]
	ctrl_tx_sec_enqueue(conn, node_tx);
   11288:	4621      	mov	r1, r4
   1128a:	f7ff ffa7 	bl	111dc <ctrl_tx_sec_enqueue>
	return 0;
   1128e:	2000      	movs	r0, #0
   11290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
   11292:	2001      	movs	r0, #1
}
   11294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11296:	bf00      	nop
   11298:	20000bf0 	.word	0x20000bf0

0001129c <start_enc_rsp_send>:
{
   1129c:	b510      	push	{r4, lr}
   1129e:	4604      	mov	r4, r0
	if (!pdu_ctrl_tx) {
   112a0:	b9c9      	cbnz	r1, 112d6 <start_enc_rsp_send+0x3a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   112a2:	480f      	ldr	r0, [pc, #60]	; (112e0 <start_enc_rsp_send+0x44>)
   112a4:	f7fa fa9b 	bl	b7de <mem_acquire>
		if (!node_tx) {
   112a8:	b1b8      	cbz	r0, 112da <start_enc_rsp_send+0x3e>
		pdu_ctrl_tx = (void *)node_tx->pdu_data;
   112aa:	1d01      	adds	r1, r0, #4
	conn->enc_tx = 1;
   112ac:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   112b0:	f043 0320 	orr.w	r3, r3, #32
   112b4:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   112b8:	780b      	ldrb	r3, [r1, #0]
   112ba:	f043 0303 	orr.w	r3, r3, #3
   112be:	700b      	strb	r3, [r1, #0]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   112c0:	2301      	movs	r3, #1
   112c2:	704b      	strb	r3, [r1, #1]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   112c4:	2306      	movs	r3, #6
   112c6:	70cb      	strb	r3, [r1, #3]
	if (node_tx) {
   112c8:	b140      	cbz	r0, 112dc <start_enc_rsp_send+0x40>
		ctrl_tx_enqueue(conn, node_tx);
   112ca:	4601      	mov	r1, r0
   112cc:	4620      	mov	r0, r4
   112ce:	f7ff ff57 	bl	11180 <ctrl_tx_enqueue>
	return 0;
   112d2:	2000      	movs	r0, #0
   112d4:	bd10      	pop	{r4, pc}
	struct radio_pdu_node_tx *node_tx = NULL;
   112d6:	2000      	movs	r0, #0
   112d8:	e7e8      	b.n	112ac <start_enc_rsp_send+0x10>
			return 1;
   112da:	2001      	movs	r0, #1
}
   112dc:	bd10      	pop	{r4, pc}
   112de:	bf00      	nop
   112e0:	20001354 	.word	0x20001354

000112e4 <reject_ext_ind_send>:
{
   112e4:	b570      	push	{r4, r5, r6, lr}
   112e6:	4604      	mov	r4, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   112e8:	480b      	ldr	r0, [pc, #44]	; (11318 <reject_ext_ind_send+0x34>)
{
   112ea:	460e      	mov	r6, r1
   112ec:	4615      	mov	r5, r2
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   112ee:	f7fa fa76 	bl	b7de <mem_acquire>
	if (!node_tx) {
   112f2:	b178      	cbz	r0, 11314 <reject_ext_ind_send+0x30>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   112f4:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
   112f6:	7206      	strb	r6, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   112f8:	f043 0303 	orr.w	r3, r3, #3
   112fc:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   112fe:	2303      	movs	r3, #3
   11300:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   11302:	2311      	movs	r3, #17
   11304:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
   11306:	7245      	strb	r5, [r0, #9]
	ctrl_tx_enqueue(conn, node_tx);
   11308:	4601      	mov	r1, r0
   1130a:	4620      	mov	r0, r4
   1130c:	f7ff ff38 	bl	11180 <ctrl_tx_enqueue>
	return 0;
   11310:	2000      	movs	r0, #0
   11312:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   11314:	2001      	movs	r0, #1
}
   11316:	bd70      	pop	{r4, r5, r6, pc}
   11318:	20001354 	.word	0x20001354
   1131c:	00000000 	.word	0x00000000

00011320 <event_connection_prepare>:
{
   11320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
   11324:	4db8      	ldr	r5, [pc, #736]	; (11608 <event_connection_prepare+0x2e8>)
{
   11326:	b08f      	sub	sp, #60	; 0x3c
   11328:	461c      	mov	r4, r3
	LL_ASSERT(!_radio.ticker_id_prepare);
   1132a:	7c2b      	ldrb	r3, [r5, #16]
{
   1132c:	910c      	str	r1, [sp, #48]	; 0x30
   1132e:	4680      	mov	r8, r0
	LL_ASSERT(!_radio.ticker_id_prepare);
   11330:	b173      	cbz	r3, 11350 <event_connection_prepare+0x30>
   11332:	4bb6      	ldr	r3, [pc, #728]	; (1160c <event_connection_prepare+0x2ec>)
   11334:	9301      	str	r3, [sp, #4]
   11336:	9300      	str	r3, [sp, #0]
   11338:	4ab5      	ldr	r2, [pc, #724]	; (11610 <event_connection_prepare+0x2f0>)
   1133a:	4bb6      	ldr	r3, [pc, #728]	; (11614 <event_connection_prepare+0x2f4>)
   1133c:	49b6      	ldr	r1, [pc, #728]	; (11618 <event_connection_prepare+0x2f8>)
   1133e:	48b7      	ldr	r0, [pc, #732]	; (1161c <event_connection_prepare+0x2fc>)
		LL_ASSERT(!retval);
   11340:	f7f0 ffa8 	bl	2294 <printk>
   11344:	4040      	eors	r0, r0
   11346:	f380 8811 	msr	BASEPRI, r0
   1134a:	f04f 0004 	mov.w	r0, #4
   1134e:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_FIRST_CONNECTION +
   11350:	f894 3020 	ldrb.w	r3, [r4, #32]
   11354:	3307      	adds	r3, #7
   11356:	b2db      	uxtb	r3, r3
   11358:	742b      	strb	r3, [r5, #16]
	if (conn->role) {
   1135a:	f994 301d 	ldrsb.w	r3, [r4, #29]
   1135e:	2b00      	cmp	r3, #0
   11360:	da09      	bge.n	11376 <event_connection_prepare+0x56>
		    conn->slave.window_widening_periodic_us * (lazy + 1);
   11362:	6d63      	ldr	r3, [r4, #84]	; 0x54
		conn->slave.window_widening_prepare_us +=
   11364:	6de1      	ldr	r1, [r4, #92]	; 0x5c
		    conn->slave.window_widening_periodic_us * (lazy + 1);
   11366:	fb02 3303 	mla	r3, r2, r3, r3
		conn->slave.window_widening_prepare_us +=
   1136a:	440b      	add	r3, r1
		    conn->slave.window_widening_max_us) {
   1136c:	6da1      	ldr	r1, [r4, #88]	; 0x58
		conn->slave.window_widening_prepare_us +=
   1136e:	65e3      	str	r3, [r4, #92]	; 0x5c
		if (conn->slave.window_widening_prepare_us >
   11370:	428b      	cmp	r3, r1
			conn->slave.window_widening_prepare_us =
   11372:	bf88      	it	hi
   11374:	65e1      	strhi	r1, [r4, #92]	; 0x5c
	conn->latency_prepare += lazy;
   11376:	8d26      	ldrh	r6, [r4, #40]	; 0x28
	if ((conn->llcp_ack == conn->llcp_req) && !conn->pause_rx) {
   11378:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
	conn->latency_prepare += lazy;
   1137c:	4432      	add	r2, r6
	event_counter = conn->event_counter + conn->latency_prepare;
   1137e:	8c66      	ldrh	r6, [r4, #34]	; 0x22
	conn->latency_prepare += lazy;
   11380:	b292      	uxth	r2, r2
   11382:	8522      	strh	r2, [r4, #40]	; 0x28
	event_counter = conn->event_counter + conn->latency_prepare;
   11384:	4432      	add	r2, r6
   11386:	b296      	uxth	r6, r2
	if ((conn->llcp_ack == conn->llcp_req) && !conn->pause_rx) {
   11388:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
   1138c:	429a      	cmp	r2, r3
   1138e:	f040 81ba 	bne.w	11706 <event_connection_prepare+0x3e6>
   11392:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   11396:	075f      	lsls	r7, r3, #29
   11398:	f100 84ab 	bmi.w	11cf2 <event_connection_prepare+0x9d2>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   1139c:	f894 20c1 	ldrb.w	r2, [r4, #193]	; 0xc1
   113a0:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
   113a4:	429a      	cmp	r2, r3
   113a6:	f000 8096 	beq.w	114d6 <event_connection_prepare+0x1b6>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
   113aa:	2005      	movs	r0, #5
   113ac:	f7ff fcc0 	bl	10d30 <event_stop.constprop.33>
	conn_upd = _radio.conn_upd;
   113b0:	f8d5 3790 	ldr.w	r3, [r5, #1936]	; 0x790
	if (conn_upd && (conn_upd != conn)) {
   113b4:	b113      	cbz	r3, 113bc <event_connection_prepare+0x9c>
   113b6:	429c      	cmp	r4, r3
   113b8:	f040 808d 	bne.w	114d6 <event_connection_prepare+0x1b6>
	switch (conn->llcp_conn_param.state) {
   113bc:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
   113c0:	f003 0307 	and.w	r3, r3, #7
   113c4:	2b05      	cmp	r3, #5
   113c6:	f200 815d 	bhi.w	11684 <event_connection_prepare+0x364>
   113ca:	e8df f013 	tbh	[pc, r3, lsl #1]
   113ce:	0006      	.short	0x0006
   113d0:	01310065 	.word	0x01310065
   113d4:	00840084 	.word	0x00840084
   113d8:	0084      	.short	0x0084
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   113da:	4891      	ldr	r0, [pc, #580]	; (11620 <event_connection_prepare+0x300>)
   113dc:	f7fa f9ff 	bl	b7de <mem_acquire>
	if (!node_tx) {
   113e0:	4607      	mov	r7, r0
   113e2:	2800      	cmp	r0, #0
   113e4:	d077      	beq.n	114d6 <event_connection_prepare+0x1b6>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
   113e6:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
   113ea:	2204      	movs	r2, #4
   113ec:	f362 0302 	bfi	r3, r2, #0, #3
   113f0:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   113f4:	7903      	ldrb	r3, [r0, #4]
   113f6:	f043 0303 	orr.w	r3, r3, #3
   113fa:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   113fc:	2318      	movs	r3, #24
   113fe:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   11400:	230f      	movs	r3, #15
   11402:	71c3      	strb	r3, [r0, #7]
	p->interval_min = conn->llcp_conn_param.interval;
   11404:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   11408:	8103      	strh	r3, [r0, #8]
	p->interval_max = conn->llcp_conn_param.interval;
   1140a:	8143      	strh	r3, [r0, #10]
	p->latency = conn->llcp_conn_param.latency;
   1140c:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   11410:	8183      	strh	r3, [r0, #12]
	p->timeout = conn->llcp_conn_param.timeout;
   11412:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   11416:	81c3      	strh	r3, [r0, #14]
	p->preferred_periodicity = 0;
   11418:	2300      	movs	r3, #0
   1141a:	7403      	strb	r3, [r0, #16]
	p->offset0 = 0x0000;
   1141c:	74c3      	strb	r3, [r0, #19]
   1141e:	7503      	strb	r3, [r0, #20]
	p->offset1 = 0xffff;
   11420:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11424:	7543      	strb	r3, [r0, #21]
   11426:	7583      	strb	r3, [r0, #22]
	p->offset2 = 0xffff;
   11428:	75c3      	strb	r3, [r0, #23]
   1142a:	7603      	strb	r3, [r0, #24]
	p->offset3 = 0xffff;
   1142c:	7643      	strb	r3, [r0, #25]
   1142e:	7683      	strb	r3, [r0, #26]
	p->offset4 = 0xffff;
   11430:	76c3      	strb	r3, [r0, #27]
   11432:	7703      	strb	r3, [r0, #28]
	p->offset5 = 0xffff;
   11434:	7743      	strb	r3, [r0, #29]
   11436:	7783      	strb	r3, [r0, #30]
	p->reference_conn_event_count = event_counter;
   11438:	f8a0 6011 	strh.w	r6, [r0, #17]
	ctrl_tx_enqueue(conn, node_tx);
   1143c:	4601      	mov	r1, r0
   1143e:	4620      	mov	r0, r4
   11440:	f7ff fe9e 	bl	11180 <ctrl_tx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
   11444:	6822      	ldr	r2, [r4, #0]
	conn->procedure_expire = conn->procedure_reload;
   11446:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
	_radio.conn_upd = conn;
   1144a:	f8c5 4790 	str.w	r4, [r5, #1936]	; 0x790
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
   1144e:	2a00      	cmp	r2, #0
	conn->procedure_expire = conn->procedure_reload;
   11450:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
		conn->llcp_conn_param.ticks_ref = ticks_at_expire;
   11454:	f8c4 80e0 	str.w	r8, [r4, #224]	; 0xe0
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
   11458:	da0b      	bge.n	11472 <event_connection_prepare+0x152>
			u32_t ticks_prepare_to_start =
   1145a:	68a3      	ldr	r3, [r4, #8]
   1145c:	6861      	ldr	r1, [r4, #4]
				(conn->hdr.ticks_xtal_to_start &
   1145e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
			conn->llcp_conn_param.ticks_ref -=
   11462:	428b      	cmp	r3, r1
   11464:	bf2c      	ite	cs
   11466:	4443      	addcs	r3, r8
   11468:	eb08 0301 	addcc.w	r3, r8, r1
   1146c:	1a9b      	subs	r3, r3, r2
   1146e:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
		conn->llcp_conn_param.pdu_win_offset0 = (u16_t *)&p->offset0;
   11472:	3713      	adds	r7, #19
		s_mfy_sched_offset.param = (void *)conn;
   11474:	4b6b      	ldr	r3, [pc, #428]	; (11624 <event_connection_prepare+0x304>)
		conn->llcp_conn_param.pdu_win_offset0 = (u16_t *)&p->offset0;
   11476:	f8c4 70dc 	str.w	r7, [r4, #220]	; 0xdc
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   1147a:	2201      	movs	r2, #1
   1147c:	4611      	mov	r1, r2
   1147e:	2000      	movs	r0, #0
		s_mfy_sched_offset.param = (void *)conn;
   11480:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   11482:	f7fa fa77 	bl	b974 <mayfly_enqueue>
		LL_ASSERT(!retval);
   11486:	b330      	cbz	r0, 114d6 <event_connection_prepare+0x1b6>
   11488:	4b60      	ldr	r3, [pc, #384]	; (1160c <event_connection_prepare+0x2ec>)
   1148a:	9301      	str	r3, [sp, #4]
   1148c:	9300      	str	r3, [sp, #0]
   1148e:	4b66      	ldr	r3, [pc, #408]	; (11628 <event_connection_prepare+0x308>)
   11490:	4a5f      	ldr	r2, [pc, #380]	; (11610 <event_connection_prepare+0x2f0>)
   11492:	4961      	ldr	r1, [pc, #388]	; (11618 <event_connection_prepare+0x2f8>)
   11494:	4865      	ldr	r0, [pc, #404]	; (1162c <event_connection_prepare+0x30c>)
   11496:	e753      	b.n	11340 <event_connection_prepare+0x20>
	if (conn->llcp_conn_param.status) {
   11498:	f894 70c3 	ldrb.w	r7, [r4, #195]	; 0xc3
   1149c:	b397      	cbz	r7, 11504 <event_connection_prepare+0x1e4>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   1149e:	4860      	ldr	r0, [pc, #384]	; (11620 <event_connection_prepare+0x300>)
   114a0:	f7fa f99d 	bl	b7de <mem_acquire>
		if (!node_tx) {
   114a4:	4601      	mov	r1, r0
   114a6:	b1b0      	cbz	r0, 114d6 <event_connection_prepare+0x1b6>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   114a8:	7903      	ldrb	r3, [r0, #4]
   114aa:	f043 0303 	orr.w	r3, r3, #3
   114ae:	7103      	strb	r3, [r0, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   114b0:	2311      	movs	r3, #17
   114b2:	71c3      	strb	r3, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   114b4:	2303      	movs	r3, #3
   114b6:	7143      	strb	r3, [r0, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   114b8:	230f      	movs	r3, #15
   114ba:	7203      	strb	r3, [r0, #8]
		rej->error_code = conn->llcp_conn_param.status;
   114bc:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
   114c0:	7243      	strb	r3, [r0, #9]
		ctrl_tx_enqueue(conn, node_tx);
   114c2:	4620      	mov	r0, r4
   114c4:	f7ff fe5c 	bl	11180 <ctrl_tx_enqueue>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   114c8:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
   114cc:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
		_radio.conn_upd = NULL;
   114d0:	2300      	movs	r3, #0
   114d2:	f8c5 3790 	str.w	r3, [r5, #1936]	; 0x790
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   114d6:	f894 20f5 	ldrb.w	r2, [r4, #245]	; 0xf5
   114da:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   114de:	429a      	cmp	r2, r3
   114e0:	f000 810a 	beq.w	116f8 <event_connection_prepare+0x3d8>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
   114e4:	2005      	movs	r0, #5
   114e6:	f7ff fc23 	bl	10d30 <event_stop.constprop.33>
	switch (conn->llcp_phy.state) {
   114ea:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   114ee:	f003 0203 	and.w	r2, r3, #3
   114f2:	2a03      	cmp	r2, #3
   114f4:	f200 8179 	bhi.w	117ea <event_connection_prepare+0x4ca>
   114f8:	e8df f012 	tbh	[pc, r2, lsl #1]
   114fc:	00fe00cc 	.word	0x00fe00cc
   11500:	011800fe 	.word	0x011800fe
	if (!conn->role) {
   11504:	f994 301d 	ldrsb.w	r3, [r4, #29]
   11508:	2b00      	cmp	r3, #0
   1150a:	db3b      	blt.n	11584 <event_connection_prepare+0x264>
		if (conn->llcp_req != conn->llcp_ack) {
   1150c:	f894 1074 	ldrb.w	r1, [r4, #116]	; 0x74
   11510:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
   11514:	428b      	cmp	r3, r1
   11516:	d1de      	bne.n	114d6 <event_connection_prepare+0x1b6>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   11518:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
		conn->llcp.conn_upd.win_offset_us = 0;
   1151c:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   11520:	2205      	movs	r2, #5
   11522:	f362 0302 	bfi	r3, r2, #0, #3
		if (conn->llcp_conn_param.preferred_periodicity) {
   11526:	f894 20ca 	ldrb.w	r2, [r4, #202]	; 0xca
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   1152a:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
		conn->llcp.conn_upd.win_size = 1;
   1152e:	2301      	movs	r3, #1
   11530:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
				((conn->llcp_conn_param.interval /
   11534:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
		if (conn->llcp_conn_param.preferred_periodicity) {
   11538:	b122      	cbz	r2, 11544 <event_connection_prepare+0x224>
				((conn->llcp_conn_param.interval /
   1153a:	fb93 f3f2 	sdiv	r3, r3, r2
				  conn->llcp_conn_param.preferred_periodicity) +
   1153e:	3301      	adds	r3, #1
			conn->llcp.conn_upd.interval =
   11540:	fb13 f302 	smulbb	r3, r3, r2
			conn->llcp.conn_upd.interval =
   11544:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
		conn->llcp.conn_upd.latency = conn->llcp_conn_param.latency;
   11548:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   1154c:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->llcp_conn_param.timeout;
   11550:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   11554:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_SELECT;
   11558:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   1155c:	2202      	movs	r2, #2
   1155e:	f362 0301 	bfi	r3, r2, #0, #2
		conn->llcp.conn_upd.is_internal = !conn->llcp_conn_param.cmd;
   11562:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
   11566:	f082 0208 	eor.w	r2, r2, #8
   1156a:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   1156e:	f362 0382 	bfi	r3, r2, #2, #1
   11572:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_ack--;
   11576:	3901      	subs	r1, #1
		conn->llcp_type = LLCP_CONN_UPD;
   11578:	2301      	movs	r3, #1
   1157a:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_ack--;
   1157e:	f884 1075 	strb.w	r1, [r4, #117]	; 0x75
   11582:	e7a8      	b.n	114d6 <event_connection_prepare+0x1b6>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11584:	4826      	ldr	r0, [pc, #152]	; (11620 <event_connection_prepare+0x300>)
   11586:	f7fa f92a 	bl	b7de <mem_acquire>
	if (!node_tx) {
   1158a:	4601      	mov	r1, r0
   1158c:	2800      	cmp	r0, #0
   1158e:	d0a2      	beq.n	114d6 <event_connection_prepare+0x1b6>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   11590:	7903      	ldrb	r3, [r0, #4]
   11592:	f043 0303 	orr.w	r3, r3, #3
   11596:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
   11598:	2318      	movs	r3, #24
   1159a:	7143      	strb	r3, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
   1159c:	2310      	movs	r3, #16
   1159e:	71c3      	strb	r3, [r0, #7]
	rsp->interval_min = conn->llcp_conn_param.interval;
   115a0:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   115a4:	8103      	strh	r3, [r0, #8]
	rsp->interval_max = conn->llcp_conn_param.interval;
   115a6:	8143      	strh	r3, [r0, #10]
	rsp->latency = conn->llcp_conn_param.latency;
   115a8:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   115ac:	8183      	strh	r3, [r0, #12]
	rsp->timeout = conn->llcp_conn_param.timeout;
   115ae:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   115b2:	81c3      	strh	r3, [r0, #14]
	rsp->preferred_periodicity =
   115b4:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
   115b8:	7403      	strb	r3, [r0, #16]
	rsp->reference_conn_event_count =
   115ba:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
   115be:	f8a0 3011 	strh.w	r3, [r0, #17]
	rsp->offset0 = conn->llcp_conn_param.offset0;
   115c2:	f8b4 30ce 	ldrh.w	r3, [r4, #206]	; 0xce
   115c6:	f8a0 3013 	strh.w	r3, [r0, #19]
	rsp->offset1 = conn->llcp_conn_param.offset1;
   115ca:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
   115ce:	f8a0 3015 	strh.w	r3, [r0, #21]
	rsp->offset2 = conn->llcp_conn_param.offset2;
   115d2:	f8b4 30d2 	ldrh.w	r3, [r4, #210]	; 0xd2
   115d6:	f8a0 3017 	strh.w	r3, [r0, #23]
	rsp->offset3 = conn->llcp_conn_param.offset3;
   115da:	f8b4 30d4 	ldrh.w	r3, [r4, #212]	; 0xd4
   115de:	f8a0 3019 	strh.w	r3, [r0, #25]
	rsp->offset4 = conn->llcp_conn_param.offset4;
   115e2:	f8b4 30d6 	ldrh.w	r3, [r4, #214]	; 0xd6
   115e6:	f8a0 301b 	strh.w	r3, [r0, #27]
	rsp->offset5 = conn->llcp_conn_param.offset5;
   115ea:	f8b4 30d8 	ldrh.w	r3, [r4, #216]	; 0xd8
   115ee:	f8a0 301d 	strh.w	r3, [r0, #29]
	ctrl_tx_enqueue(conn, node_tx);
   115f2:	4620      	mov	r0, r4
   115f4:	f7ff fdc4 	bl	11180 <ctrl_tx_enqueue>
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   115f8:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
   115fc:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
	_radio.conn_upd = NULL;
   11600:	f8c5 7790 	str.w	r7, [r5, #1936]	; 0x790
   11604:	e767      	b.n	114d6 <event_connection_prepare+0x1b6>
   11606:	bf00      	nop
   11608:	20000bf0 	.word	0x20000bf0
   1160c:	00023dae 	.word	0x00023dae
   11610:	00022d76 	.word	0x00022d76
   11614:	00025dc4 	.word	0x00025dc4
   11618:	000272d8 	.word	0x000272d8
   1161c:	000267de 	.word	0x000267de
   11620:	20001354 	.word	0x20001354
   11624:	2000a068 	.word	0x2000a068
   11628:	00025d60 	.word	0x00025d60
   1162c:	000266a2 	.word	0x000266a2
	if (conn->pause_tx) {
   11630:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   11634:	0718      	lsls	r0, r3, #28
   11636:	f53f af4e 	bmi.w	114d6 <event_connection_prepare+0x1b6>
	node_rx = packet_rx_reserve_get(2);
   1163a:	2002      	movs	r0, #2
   1163c:	f7fc ffd6 	bl	e5ec <packet_rx_reserve_get>
	if (!node_rx) {
   11640:	2800      	cmp	r0, #0
   11642:	f43f af48 	beq.w	114d6 <event_connection_prepare+0x1b6>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   11646:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
   1164a:	2203      	movs	r2, #3
   1164c:	f362 0302 	bfi	r3, r2, #0, #3
   11650:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	node_rx->hdr.handle = conn->handle;
   11654:	8c23      	ldrh	r3, [r4, #32]
   11656:	80c3      	strh	r3, [r0, #6]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   11658:	2301      	movs	r3, #1
   1165a:	7103      	strb	r3, [r0, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1165c:	7a03      	ldrb	r3, [r0, #8]
   1165e:	4313      	orrs	r3, r2
   11660:	7203      	strb	r3, [r0, #8]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   11662:	2318      	movs	r3, #24
   11664:	7243      	strb	r3, [r0, #9]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   11666:	230f      	movs	r3, #15
   11668:	72c3      	strb	r3, [r0, #11]
	p->interval_min = conn->llcp_conn_param.interval;
   1166a:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   1166e:	8183      	strh	r3, [r0, #12]
	p->interval_max = conn->llcp_conn_param.interval;
   11670:	81c3      	strh	r3, [r0, #14]
	p->latency = conn->llcp_conn_param.latency;
   11672:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   11676:	8203      	strh	r3, [r0, #16]
	p->timeout = conn->llcp_conn_param.timeout;
   11678:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   1167c:	8243      	strh	r3, [r0, #18]
	packet_rx_enqueue();
   1167e:	f7fe f88f 	bl	f7a0 <packet_rx_enqueue>
   11682:	e728      	b.n	114d6 <event_connection_prepare+0x1b6>
		LL_ASSERT(0);
   11684:	4bb9      	ldr	r3, [pc, #740]	; (1196c <event_connection_prepare+0x64c>)
   11686:	9301      	str	r3, [sp, #4]
   11688:	9300      	str	r3, [sp, #0]
   1168a:	4bb9      	ldr	r3, [pc, #740]	; (11970 <event_connection_prepare+0x650>)
		LL_ASSERT(0);
   1168c:	4ab9      	ldr	r2, [pc, #740]	; (11974 <event_connection_prepare+0x654>)
   1168e:	49ba      	ldr	r1, [pc, #744]	; (11978 <event_connection_prepare+0x658>)
   11690:	48ba      	ldr	r0, [pc, #744]	; (1197c <event_connection_prepare+0x65c>)
   11692:	e655      	b.n	11340 <event_connection_prepare+0x20>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11694:	48ba      	ldr	r0, [pc, #744]	; (11980 <event_connection_prepare+0x660>)
   11696:	f7fa f8a2 	bl	b7de <mem_acquire>
		if (!node_tx) {
   1169a:	4601      	mov	r1, r0
   1169c:	b360      	cbz	r0, 116f8 <event_connection_prepare+0x3d8>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   1169e:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
		conn->phy_pref_rx = conn->llcp_phy.rx;
   116a2:	f894 7039 	ldrb.w	r7, [r4, #57]	; 0x39
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   116a6:	2201      	movs	r2, #1
   116a8:	f362 0301 	bfi	r3, r2, #0, #2
   116ac:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		conn->phy_pref_tx = conn->llcp_phy.tx;
   116b0:	b2db      	uxtb	r3, r3
   116b2:	f3c3 0082 	ubfx	r0, r3, #2, #3
		conn->phy_pref_rx = conn->llcp_phy.rx;
   116b6:	f3c3 1342 	ubfx	r3, r3, #5, #3
		conn->phy_pref_tx = conn->llcp_phy.tx;
   116ba:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
		conn->phy_pref_rx = conn->llcp_phy.rx;
   116be:	f363 07c5 	bfi	r7, r3, #3, #3
   116c2:	f884 7039 	strb.w	r7, [r4, #57]	; 0x39
		conn->phy_pref_flags = conn->llcp_phy.flags;
   116c6:	f894 70f7 	ldrb.w	r7, [r4, #247]	; 0xf7
		conn->phy_pref_tx = conn->llcp_phy.tx;
   116ca:	f360 0202 	bfi	r2, r0, #0, #3
		conn->phy_pref_flags = conn->llcp_phy.flags;
   116ce:	f367 1286 	bfi	r2, r7, #6, #1
   116d2:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   116d6:	790a      	ldrb	r2, [r1, #4]
		pr->tx_phys = conn->llcp_phy.tx;
   116d8:	7208      	strb	r0, [r1, #8]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   116da:	f042 0203 	orr.w	r2, r2, #3
   116de:	710a      	strb	r2, [r1, #4]
		pdu_ctrl_tx->len =
   116e0:	2203      	movs	r2, #3
   116e2:	714a      	strb	r2, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
   116e4:	2216      	movs	r2, #22
		pr->rx_phys = conn->llcp_phy.rx;
   116e6:	724b      	strb	r3, [r1, #9]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
   116e8:	71ca      	strb	r2, [r1, #7]
		ctrl_tx_enqueue(conn, node_tx);
   116ea:	4620      	mov	r0, r4
   116ec:	f7ff fd48 	bl	11180 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
   116f0:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   116f4:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	if (conn->llcp_ack != conn->llcp_req) {
   116f8:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
   116fc:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   11700:	429a      	cmp	r2, r3
   11702:	f000 82f6 	beq.w	11cf2 <event_connection_prepare+0x9d2>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
   11706:	2005      	movs	r0, #5
   11708:	f7ff fb12 	bl	10d30 <event_stop.constprop.33>
		switch (conn->llcp_type) {
   1170c:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
   11710:	3b01      	subs	r3, #1
   11712:	2b07      	cmp	r3, #7
   11714:	f200 85a7 	bhi.w	12266 <event_connection_prepare+0xf46>
   11718:	e8df f013 	tbh	[pc, r3, lsl #1]
   1171c:	02c4006c 	.word	0x02c4006c
   11720:	045e0343 	.word	0x045e0343
   11724:	05a5048e 	.word	0x05a5048e
   11728:	04fa04e6 	.word	0x04fa04e6
		conn->llcp_phy.ack = conn->llcp_phy.req;
   1172c:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
   11730:	f884 20f5 	strb.w	r2, [r4, #245]	; 0xf5
		if (conn->llcp_phy.tx & BIT(1)) {
   11734:	f3c3 0282 	ubfx	r2, r3, #2, #3
   11738:	0791      	lsls	r1, r2, #30
   1173a:	d544      	bpl.n	117c6 <event_connection_prepare+0x4a6>
			conn->llcp_phy.tx = BIT(1);
   1173c:	2202      	movs	r2, #2
			conn->llcp_phy.tx = 0;
   1173e:	f362 0384 	bfi	r3, r2, #2, #3
   11742:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		if (conn->llcp_phy.rx & BIT(1)) {
   11746:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   1174a:	095a      	lsrs	r2, r3, #5
   1174c:	0790      	lsls	r0, r2, #30
   1174e:	d543      	bpl.n	117d8 <event_connection_prepare+0x4b8>
			conn->llcp_phy.rx = BIT(1);
   11750:	2202      	movs	r2, #2
			conn->llcp_phy.rx = 0;
   11752:	f362 1347 	bfi	r3, r2, #5, #3
   11756:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		if (conn->llcp_phy.tx != conn->phy_tx) {
   1175a:	f894 20f6 	ldrb.w	r2, [r4, #246]	; 0xf6
   1175e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   11762:	f3c2 0182 	ubfx	r1, r2, #2, #3
   11766:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   1176a:	428b      	cmp	r3, r1
   1176c:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
			conn->llcp.phy_upd_ind.tx = conn->llcp_phy.tx;
   11770:	bf14      	ite	ne
   11772:	f361 0384 	bfine	r3, r1, #2, #3
			conn->llcp.phy_upd_ind.tx = 0;
   11776:	f36f 0384 	bfceq	r3, #2, #3
   1177a:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		if (conn->llcp_phy.rx != conn->phy_rx) {
   1177e:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
   11782:	0952      	lsrs	r2, r2, #5
   11784:	f003 0307 	and.w	r3, r3, #7
   11788:	4293      	cmp	r3, r2
   1178a:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
			conn->llcp.phy_upd_ind.rx = conn->llcp_phy.rx;
   1178e:	bf14      	ite	ne
   11790:	f362 1347 	bfine	r3, r2, #5, #3
			conn->llcp.phy_upd_ind.rx = 0;
   11794:	f36f 1347 	bfceq	r3, #5, #3
   11798:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.initiate = 1;
   1179c:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   117a0:	f894 20f7 	ldrb.w	r2, [r4, #247]	; 0xf7
   117a4:	f043 0301 	orr.w	r3, r3, #1
   117a8:	f3c2 0240 	ubfx	r2, r2, #1, #1
   117ac:	f362 0341 	bfi	r3, r2, #1, #1
   117b0:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_PHY_UPD;
   117b4:	2308      	movs	r3, #8
   117b6:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_ack--;
   117ba:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
   117be:	3b01      	subs	r3, #1
   117c0:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
   117c4:	e798      	b.n	116f8 <event_connection_prepare+0x3d8>
		} else if (conn->llcp_phy.tx & BIT(0)) {
   117c6:	07d7      	lsls	r7, r2, #31
   117c8:	d501      	bpl.n	117ce <event_connection_prepare+0x4ae>
			conn->llcp_phy.tx = BIT(0);
   117ca:	2201      	movs	r2, #1
   117cc:	e7b7      	b.n	1173e <event_connection_prepare+0x41e>
		} else if (conn->llcp_phy.tx & BIT(2)) {
   117ce:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.tx = BIT(2);
   117d2:	bf18      	it	ne
   117d4:	2204      	movne	r2, #4
   117d6:	e7b2      	b.n	1173e <event_connection_prepare+0x41e>
		} else if (conn->llcp_phy.rx & BIT(0)) {
   117d8:	07d1      	lsls	r1, r2, #31
   117da:	d501      	bpl.n	117e0 <event_connection_prepare+0x4c0>
			conn->llcp_phy.rx = BIT(0);
   117dc:	2201      	movs	r2, #1
   117de:	e7b8      	b.n	11752 <event_connection_prepare+0x432>
		} else if (conn->llcp_phy.rx & BIT(2)) {
   117e0:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.rx = BIT(2);
   117e4:	bf18      	it	ne
   117e6:	2204      	movne	r2, #4
   117e8:	e7b3      	b.n	11752 <event_connection_prepare+0x432>
		LL_ASSERT(0);
   117ea:	4b60      	ldr	r3, [pc, #384]	; (1196c <event_connection_prepare+0x64c>)
   117ec:	9301      	str	r3, [sp, #4]
   117ee:	9300      	str	r3, [sp, #0]
   117f0:	4b64      	ldr	r3, [pc, #400]	; (11984 <event_connection_prepare+0x664>)
   117f2:	e74b      	b.n	1168c <event_connection_prepare+0x36c>
	if (!conn_upd) {
   117f4:	f8d5 3790 	ldr.w	r3, [r5, #1936]	; 0x790
   117f8:	b90b      	cbnz	r3, 117fe <event_connection_prepare+0x4de>
		_radio.conn_upd = conn;
   117fa:	f8c5 4790 	str.w	r4, [r5, #1936]	; 0x790
	if (conn->llcp.conn_upd.state != LLCP_CUI_STATE_INPROG) {
   117fe:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   11802:	f013 0303 	ands.w	r3, r3, #3
   11806:	d068      	beq.n	118da <event_connection_prepare+0x5ba>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11808:	485d      	ldr	r0, [pc, #372]	; (11980 <event_connection_prepare+0x660>)
   1180a:	f7f9 ffe8 	bl	b7de <mem_acquire>
		if (!node_tx) {
   1180e:	4607      	mov	r7, r0
   11810:	2800      	cmp	r0, #0
   11812:	f000 826e 	beq.w	11cf2 <event_connection_prepare+0x9d2>
		switch (conn->llcp.conn_upd.state) {
   11816:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   1181a:	f003 0303 	and.w	r3, r3, #3
   1181e:	2b01      	cmp	r3, #1
   11820:	d059      	beq.n	118d6 <event_connection_prepare+0x5b6>
   11822:	2b02      	cmp	r3, #2
   11824:	d152      	bne.n	118cc <event_connection_prepare+0x5ac>
			fp_mayfly_select_or_use =
   11826:	4a58      	ldr	r2, [pc, #352]	; (11988 <event_connection_prepare+0x668>)
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
   11828:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   1182c:	f36f 0301 	bfc	r3, #0, #2
   11830:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		event_counter + conn->latency + 6;
   11834:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   11836:	3306      	adds	r3, #6
   11838:	4433      	add	r3, r6
   1183a:	b29b      	uxth	r3, r3
	conn->llcp.conn_upd.instant =
   1183c:	f8a4 3080 	strh.w	r3, [r4, #128]	; 0x80
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11840:	7939      	ldrb	r1, [r7, #4]
   11842:	f041 0103 	orr.w	r1, r1, #3
   11846:	7139      	strb	r1, [r7, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
   11848:	210c      	movs	r1, #12
   1184a:	7179      	strb	r1, [r7, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
   1184c:	2100      	movs	r1, #0
   1184e:	71f9      	strb	r1, [r7, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size =
   11850:	f894 1088 	ldrb.w	r1, [r4, #136]	; 0x88
   11854:	7239      	strb	r1, [r7, #8]
		win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
   11856:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
   1185a:	f240 40e2 	movw	r0, #1250	; 0x4e2
   1185e:	fbb1 f1f0 	udiv	r1, r1, r0
   11862:	f8a7 1009 	strh.w	r1, [r7, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
   11866:	f8b4 107a 	ldrh.w	r1, [r4, #122]	; 0x7a
   1186a:	f8a7 100b 	strh.w	r1, [r7, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
   1186e:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
   11872:	f8a7 100d 	strh.w	r1, [r7, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
   11876:	f8b4 107e 	ldrh.w	r1, [r4, #126]	; 0x7e
   1187a:	f8a7 100f 	strh.w	r1, [r7, #15]
	pdu_ctrl_tx->llctrl.conn_update_ind.instant =
   1187e:	f8a7 3011 	strh.w	r3, [r7, #17]
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
   11882:	6821      	ldr	r1, [r4, #0]
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
   11884:	f8c4 8090 	str.w	r8, [r4, #144]	; 0x90
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
   11888:	2900      	cmp	r1, #0
   1188a:	da0b      	bge.n	118a4 <event_connection_prepare+0x584>
			u32_t ticks_prepare_to_start =
   1188c:	68a3      	ldr	r3, [r4, #8]
   1188e:	6860      	ldr	r0, [r4, #4]
				(conn->hdr.ticks_xtal_to_start &
   11890:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
			conn->llcp.conn_upd.ticks_anchor -=
   11894:	4283      	cmp	r3, r0
   11896:	bf2c      	ite	cs
   11898:	4443      	addcs	r3, r8
   1189a:	eb08 0300 	addcc.w	r3, r8, r0
   1189e:	1a5b      	subs	r3, r3, r1
   118a0:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		conn->llcp.conn_upd.pdu_win_offset = (u16_t *)
   118a4:	f107 0309 	add.w	r3, r7, #9
   118a8:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		mayfly_sched_offset->fp = fp_mayfly_select_or_use;
   118ac:	4b37      	ldr	r3, [pc, #220]	; (1198c <event_connection_prepare+0x66c>)
   118ae:	60da      	str	r2, [r3, #12]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   118b0:	2201      	movs	r2, #1
   118b2:	4611      	mov	r1, r2
   118b4:	2000      	movs	r0, #0
		mayfly_sched_offset->param = (void *)conn;
   118b6:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   118b8:	f7fa f85c 	bl	b974 <mayfly_enqueue>
		LL_ASSERT(!retval);
   118bc:	2800      	cmp	r0, #0
   118be:	f000 8214 	beq.w	11cea <event_connection_prepare+0x9ca>
   118c2:	4b2a      	ldr	r3, [pc, #168]	; (1196c <event_connection_prepare+0x64c>)
   118c4:	9301      	str	r3, [sp, #4]
   118c6:	9300      	str	r3, [sp, #0]
   118c8:	4b31      	ldr	r3, [pc, #196]	; (11990 <event_connection_prepare+0x670>)
   118ca:	e5e1      	b.n	11490 <event_connection_prepare+0x170>
			LL_ASSERT(0);
   118cc:	4b27      	ldr	r3, [pc, #156]	; (1196c <event_connection_prepare+0x64c>)
   118ce:	9301      	str	r3, [sp, #4]
   118d0:	9300      	str	r3, [sp, #0]
   118d2:	4b30      	ldr	r3, [pc, #192]	; (11994 <event_connection_prepare+0x674>)
   118d4:	e6da      	b.n	1168c <event_connection_prepare+0x36c>
			fp_mayfly_select_or_use = mayfly_sched_win_offset_use;
   118d6:	4a30      	ldr	r2, [pc, #192]	; (11998 <event_connection_prepare+0x678>)
   118d8:	e7a6      	b.n	11828 <event_connection_prepare+0x508>
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
   118da:	f8b4 7080 	ldrh.w	r7, [r4, #128]	; 0x80
   118de:	1bf7      	subs	r7, r6, r7
   118e0:	b2bf      	uxth	r7, r7
	} else if (instant_latency <= 0x7FFF) {
   118e2:	043a      	lsls	r2, r7, #16
   118e4:	f100 8205 	bmi.w	11cf2 <event_connection_prepare+0x9d2>
		conn->llcp_ack = conn->llcp_req;
   118e8:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
   118ec:	f884 2075 	strb.w	r2, [r4, #117]	; 0x75
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   118f0:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
   118f4:	f894 20c1 	ldrb.w	r2, [r4, #193]	; 0xc1
   118f8:	428a      	cmp	r2, r1
   118fa:	d009      	beq.n	11910 <event_connection_prepare+0x5f0>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
   118fc:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   11900:	f002 0207 	and.w	r2, r2, #7
   11904:	2a05      	cmp	r2, #5
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   11906:	bf04      	itt	eq
   11908:	f884 10c1 	strbeq.w	r1, [r4, #193]	; 0xc1
			conn->procedure_expire = 0;
   1190c:	f8a4 3044 	strheq.w	r3, [r4, #68]	; 0x44
		if (_radio.conn_upd == conn) {
   11910:	f8d5 2790 	ldr.w	r2, [r5, #1936]	; 0x790
		_radio.ticker_id_prepare = 0;
   11914:	2300      	movs	r3, #0
		if (_radio.conn_upd == conn) {
   11916:	4294      	cmp	r4, r2
			_radio.conn_upd = NULL;
   11918:	bf08      	it	eq
   1191a:	f8c5 3790 	streq.w	r3, [r5, #1936]	; 0x790
		_radio.ticker_id_prepare = 0;
   1191e:	742b      	strb	r3, [r5, #16]
		if ((conn->llcp.conn_upd.interval !=
   11920:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
   11922:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
   11926:	429a      	cmp	r2, r3
   11928:	d114      	bne.n	11954 <event_connection_prepare+0x634>
		     conn->conn_interval) ||
   1192a:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
   1192e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   11930:	4299      	cmp	r1, r3
   11932:	d10f      	bne.n	11954 <event_connection_prepare+0x634>
		    (RADIO_CONN_EVENTS(conn->llcp.conn_upd.timeout *
   11934:	f240 43e2 	movw	r3, #1250	; 0x4e2
   11938:	435a      	muls	r2, r3
   1193a:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
   1193e:	f242 7110 	movw	r1, #10000	; 0x2710
   11942:	fb01 2303 	mla	r3, r1, r3, r2
   11946:	3b01      	subs	r3, #1
   11948:	fb93 f3f2 	sdiv	r3, r3, r2
		    (conn->llcp.conn_upd.latency != conn->latency) ||
   1194c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
   1194e:	b29b      	uxth	r3, r3
   11950:	429a      	cmp	r2, r3
   11952:	d036      	beq.n	119c2 <event_connection_prepare+0x6a2>
			node_rx = packet_rx_reserve_get(2);
   11954:	2002      	movs	r0, #2
   11956:	f7fc fe49 	bl	e5ec <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
   1195a:	bb08      	cbnz	r0, 119a0 <event_connection_prepare+0x680>
   1195c:	4b03      	ldr	r3, [pc, #12]	; (1196c <event_connection_prepare+0x64c>)
   1195e:	9301      	str	r3, [sp, #4]
   11960:	9300      	str	r3, [sp, #0]
   11962:	4b0c      	ldr	r3, [pc, #48]	; (11994 <event_connection_prepare+0x674>)
		LL_ASSERT(node_rx);
   11964:	4a03      	ldr	r2, [pc, #12]	; (11974 <event_connection_prepare+0x654>)
   11966:	4904      	ldr	r1, [pc, #16]	; (11978 <event_connection_prepare+0x658>)
   11968:	480c      	ldr	r0, [pc, #48]	; (1199c <event_connection_prepare+0x67c>)
   1196a:	e4e9      	b.n	11340 <event_connection_prepare+0x20>
   1196c:	00023dae 	.word	0x00023dae
   11970:	00025d75 	.word	0x00025d75
   11974:	00022d76 	.word	0x00022d76
   11978:	000272d8 	.word	0x000272d8
   1197c:	00023fa5 	.word	0x00023fa5
   11980:	20001354 	.word	0x20001354
   11984:	00025d9a 	.word	0x00025d9a
   11988:	0000f4f1 	.word	0x0000f4f1
   1198c:	2000a058 	.word	0x2000a058
   11990:	00025d29 	.word	0x00025d29
   11994:	00025d3d 	.word	0x00025d3d
   11998:	00010229 	.word	0x00010229
   1199c:	000265ce 	.word	0x000265ce
			node_rx->hdr.handle = conn->handle;
   119a0:	8c23      	ldrh	r3, [r4, #32]
   119a2:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   119a4:	2308      	movs	r3, #8
   119a6:	7103      	strb	r3, [r0, #4]
			radio_le_conn_update_cmplt->status =
   119a8:	2300      	movs	r3, #0
   119aa:	72c3      	strb	r3, [r0, #11]
			radio_le_conn_update_cmplt->interval =
   119ac:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
   119b0:	8183      	strh	r3, [r0, #12]
			radio_le_conn_update_cmplt->latency =
   119b2:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
   119b6:	81c3      	strh	r3, [r0, #14]
			radio_le_conn_update_cmplt->timeout =
   119b8:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
   119bc:	8203      	strh	r3, [r0, #16]
			packet_rx_enqueue();
   119be:	f7fd feef 	bl	f7a0 <packet_rx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
   119c2:	6823      	ldr	r3, [r4, #0]
   119c4:	6866      	ldr	r6, [r4, #4]
   119c6:	2b00      	cmp	r3, #0
   119c8:	da09      	bge.n	119de <event_connection_prepare+0x6be>
			u32_t ticks_prepare_to_start =
   119ca:	68a0      	ldr	r0, [r4, #8]
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
   119cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
   119d0:	42b0      	cmp	r0, r6
   119d2:	bf2c      	ite	cs
   119d4:	4480      	addcs	r8, r0
   119d6:	44b0      	addcc	r8, r6
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
   119d8:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
   119da:	eba8 0803 	sub.w	r8, r8, r3
		conn_interval_old = instant_latency * conn->conn_interval;
   119de:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
			conn->llcp.conn_upd.interval;
   119e0:	f8b4 a07a 	ldrh.w	sl, [r4, #122]	; 0x7a
   119e4:	49a0      	ldr	r1, [pc, #640]	; (11c68 <event_connection_prepare+0x948>)
		conn_interval_old = instant_latency * conn->conn_interval;
   119e6:	fb13 f307 	smulbb	r3, r3, r7
   119ea:	b29b      	uxth	r3, r3
		latency = conn_interval_old /
   119ec:	fbb3 f2fa 	udiv	r2, r3, sl
   119f0:	fa1f f982 	uxth.w	r9, r2
		conn_interval_new = latency *
   119f4:	fb1a f009 	smulbb	r0, sl, r9
   119f8:	b280      	uxth	r0, r0
		if (conn_interval_new > conn_interval_old) {
   119fa:	4283      	cmp	r3, r0
   119fc:	f080 80bf 	bcs.w	11b7e <event_connection_prepare+0x85e>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
   11a00:	1ac0      	subs	r0, r0, r3
   11a02:	f240 1223 	movw	r2, #291	; 0x123
   11a06:	4342      	muls	r2, r0
   11a08:	17c3      	asrs	r3, r0, #31
   11a0a:	fb01 2303 	mla	r3, r1, r3, r2
   11a0e:	fba0 0101 	umull	r0, r1, r0, r1
   11a12:	4419      	add	r1, r3
   11a14:	a392      	add	r3, pc, #584	; (adr r3, 11c60 <event_connection_prepare+0x940>)
   11a16:	e9d3 2300 	ldrd	r2, r3, [r3]
   11a1a:	f7ee fc3d 	bl	298 <__aeabi_uldivmod>
   11a1e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   11a22:	eb00 0308 	add.w	r3, r0, r8
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
   11a26:	930b      	str	r3, [sp, #44]	; 0x2c
		conn->latency_prepare -= (instant_latency - latency);
   11a28:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   11a2a:	f8df b274 	ldr.w	fp, [pc, #628]	; 11ca0 <event_connection_prepare+0x980>
   11a2e:	1bdb      	subs	r3, r3, r7
   11a30:	444b      	add	r3, r9
   11a32:	8523      	strh	r3, [r4, #40]	; 0x28
		ticks_slot_offset =
   11a34:	6823      	ldr	r3, [r4, #0]
   11a36:	429e      	cmp	r6, r3
   11a38:	bf38      	it	cc
   11a3a:	461e      	movcc	r6, r3
		if (conn->role) {
   11a3c:	f994 301d 	ldrsb.w	r3, [r4, #29]
		ticks_slot_offset =
   11a40:	960d      	str	r6, [sp, #52]	; 0x34
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
   11a42:	f240 48e2 	movw	r8, #1250	; 0x4e2
		if (conn->role) {
   11a46:	2b00      	cmp	r3, #0
   11a48:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
   11a4c:	930c      	str	r3, [sp, #48]	; 0x30
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
   11a4e:	fb08 f60a 	mul.w	r6, r8, sl
		if (conn->role) {
   11a52:	f280 80a5 	bge.w	11ba0 <event_connection_prepare+0x880>
				conn->slave.window_widening_periodic_us *
   11a56:	6d63      	ldr	r3, [r4, #84]	; 0x54
			conn->slave.window_widening_prepare_us -=
   11a58:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   11a5a:	fb03 2717 	mls	r7, r3, r7, r2
				(((gc_lookup_ppm[_radio.sca] +
   11a5e:	f895 3728 	ldrb.w	r3, [r5, #1832]	; 0x728
   11a62:	4a82      	ldr	r2, [pc, #520]	; (11c6c <event_connection_prepare+0x94c>)
   11a64:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
				   gc_lookup_ppm[conn->slave.sca]) *
   11a68:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   11a6c:	f3c3 0382 	ubfx	r3, r3, #2, #3
   11a70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				conn->llcp.conn_upd.win_size * 1250;
   11a74:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
				(((gc_lookup_ppm[_radio.sca] +
   11a78:	441d      	add	r5, r3
				   gc_lookup_ppm[conn->slave.sca]) *
   11a7a:	4375      	muls	r5, r6
				  conn_interval_us) + (1000000 - 1)) / 1000000;
   11a7c:	f505 2574 	add.w	r5, r5, #999424	; 0xf4000
   11a80:	4b7b      	ldr	r3, [pc, #492]	; (11c70 <event_connection_prepare+0x950>)
				conn->llcp.conn_upd.win_size * 1250;
   11a82:	fb08 f202 	mul.w	r2, r8, r2
				  conn_interval_us) + (1000000 - 1)) / 1000000;
   11a86:	f205 253f 	addw	r5, r5, #575	; 0x23f
   11a8a:	fbb5 f5f3 	udiv	r5, r5, r3
				(conn_interval_us >> 1) - RADIO_TIFS;
   11a8e:	0873      	lsrs	r3, r6, #1
				conn->slave.window_widening_periodic_us *
   11a90:	fb05 f009 	mul.w	r0, r5, r9
				(conn_interval_us >> 1) - RADIO_TIFS;
   11a94:	3b96      	subs	r3, #150	; 0x96
			conn->slave.window_widening_prepare_us +=
   11a96:	4407      	add	r7, r0
			conn->slave.window_size_prepare_us =
   11a98:	6662      	str	r2, [r4, #100]	; 0x64
			conn->slave.ticks_to_offset = 0;
   11a9a:	2200      	movs	r2, #0
			conn->slave.window_widening_prepare_us +=
   11a9c:	429f      	cmp	r7, r3
   11a9e:	bf94      	ite	ls
   11aa0:	65e7      	strls	r7, [r4, #92]	; 0x5c
   11aa2:	65e3      	strhi	r3, [r4, #92]	; 0x5c
			conn->slave.window_widening_periodic_us =
   11aa4:	6565      	str	r5, [r4, #84]	; 0x54
			conn->slave.window_widening_max_us =
   11aa6:	65a3      	str	r3, [r4, #88]	; 0x58
			conn->slave.ticks_to_offset = 0;
   11aa8:	6722      	str	r2, [r4, #112]	; 0x70
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
   11aaa:	fba0 010b 	umull	r0, r1, r0, fp
   11aae:	a36c      	add	r3, pc, #432	; (adr r3, 11c60 <event_connection_prepare+0x940>)
   11ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
   11ab4:	f7ee fbf0 	bl	298 <__aeabi_uldivmod>
   11ab8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11aba:	1a1b      	subs	r3, r3, r0
   11abc:	930b      	str	r3, [sp, #44]	; 0x2c
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
   11abe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11ac0:	fbb3 f0f8 	udiv	r0, r3, r8
   11ac4:	fb08 f000 	mul.w	r0, r8, r0
   11ac8:	a365      	add	r3, pc, #404	; (adr r3, 11c60 <event_connection_prepare+0x940>)
   11aca:	e9d3 2300 	ldrd	r2, r3, [r3]
   11ace:	fba0 010b 	umull	r0, r1, r0, fp
   11ad2:	f7ee fbe1 	bl	298 <__aeabi_uldivmod>
			periodic_us -= conn->slave.window_widening_periodic_us;
   11ad6:	1b75      	subs	r5, r6, r5
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
   11ad8:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
   11adc:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
		conn->latency = conn->llcp.conn_upd.latency;
   11ae0:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
   11ae4:	84e2      	strh	r2, [r4, #38]	; 0x26
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
   11ae6:	f242 7110 	movw	r1, #10000	; 0x2710
   11aea:	fb01 6303 	mla	r3, r1, r3, r6
   11aee:	3b01      	subs	r3, #1
   11af0:	fbb3 f3f6 	udiv	r3, r3, r6
   11af4:	87e3      	strh	r3, [r4, #62]	; 0x3e
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   11af6:	4b5f      	ldr	r3, [pc, #380]	; (11c74 <event_connection_prepare+0x954>)
		conn->conn_interval = conn->llcp.conn_upd.interval;
   11af8:	f8a4 a024 	strh.w	sl, [r4, #36]	; 0x24
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   11afc:	4433      	add	r3, r6
   11afe:	fbb3 f3f6 	udiv	r3, r3, r6
   11b02:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   11b06:	4b5c      	ldr	r3, [pc, #368]	; (11c78 <event_connection_prepare+0x958>)
   11b08:	4433      	add	r3, r6
   11b0a:	fbb3 f6f6 	udiv	r6, r3, r6
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   11b0e:	1d93      	adds	r3, r2, #6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   11b10:	b2b1      	uxth	r1, r6
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   11b12:	4299      	cmp	r1, r3
   11b14:	bfc4      	itt	gt
   11b16:	f5c2 437f 	rsbgt	r3, r2, #65280	; 0xff00
   11b1a:	33fa      	addgt	r3, #250	; 0xfa
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   11b1c:	f8a4 104a 	strh.w	r1, [r4, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   11b20:	bfc8      	it	gt
   11b22:	18c9      	addgt	r1, r1, r3
		if (!conn->llcp.conn_upd.is_internal) {
   11b24:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   11b28:	bfc8      	it	gt
   11b2a:	b289      	uxthgt	r1, r1
		if (!conn->llcp.conn_upd.is_internal) {
   11b2c:	f013 0304 	ands.w	r3, r3, #4
			conn->supervision_expire = 0;
   11b30:	bf08      	it	eq
   11b32:	f8a4 3040 	strheq.w	r3, [r4, #64]	; 0x40
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   11b36:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
		mayfly_was_enabled =
   11b3a:	2000      	movs	r0, #0
   11b3c:	2101      	movs	r1, #1
   11b3e:	f007 fa27 	bl	18f90 <mayfly_is_enabled>
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
   11b42:	2200      	movs	r2, #0
   11b44:	2101      	movs	r1, #1
		mayfly_was_enabled =
   11b46:	4681      	mov	r9, r0
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
   11b48:	4610      	mov	r0, r2
   11b4a:	f7f9 feeb 	bl	b924 <mayfly_enable>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   11b4e:	f894 2020 	ldrb.w	r2, [r4, #32]
		ticker_status =
   11b52:	f641 63d3 	movw	r3, #7891	; 0x1ed3
   11b56:	2100      	movs	r1, #0
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   11b58:	3207      	adds	r2, #7
		ticker_status =
   11b5a:	9300      	str	r3, [sp, #0]
   11b5c:	b2d2      	uxtb	r2, r2
   11b5e:	4b47      	ldr	r3, [pc, #284]	; (11c7c <event_connection_prepare+0x95c>)
   11b60:	4608      	mov	r0, r1
   11b62:	f7fa fd63 	bl	c62c <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   11b66:	f030 0802 	bics.w	r8, r0, #2
   11b6a:	d026      	beq.n	11bba <event_connection_prepare+0x89a>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   11b6c:	4b44      	ldr	r3, [pc, #272]	; (11c80 <event_connection_prepare+0x960>)
   11b6e:	9301      	str	r3, [sp, #4]
   11b70:	9300      	str	r3, [sp, #0]
   11b72:	4a44      	ldr	r2, [pc, #272]	; (11c84 <event_connection_prepare+0x964>)
   11b74:	4b44      	ldr	r3, [pc, #272]	; (11c88 <event_connection_prepare+0x968>)
   11b76:	4945      	ldr	r1, [pc, #276]	; (11c8c <event_connection_prepare+0x96c>)
   11b78:	4845      	ldr	r0, [pc, #276]	; (11c90 <event_connection_prepare+0x970>)
   11b7a:	f7ff bbe1 	b.w	11340 <event_connection_prepare+0x20>
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
   11b7e:	fb0a 3212 	mls	r2, sl, r2, r3
   11b82:	b292      	uxth	r2, r2
   11b84:	fba2 0101 	umull	r0, r1, r2, r1
   11b88:	f240 1323 	movw	r3, #291	; 0x123
   11b8c:	fb03 1102 	mla	r1, r3, r2, r1
   11b90:	a333      	add	r3, pc, #204	; (adr r3, 11c60 <event_connection_prepare+0x940>)
   11b92:	e9d3 2300 	ldrd	r2, r3, [r3]
   11b96:	f7ee fb7f 	bl	298 <__aeabi_uldivmod>
   11b9a:	eba8 0300 	sub.w	r3, r8, r0
   11b9e:	e742      	b.n	11a26 <event_connection_prepare+0x706>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
   11ba0:	990c      	ldr	r1, [sp, #48]	; 0x30
   11ba2:	a32f      	add	r3, pc, #188	; (adr r3, 11c60 <event_connection_prepare+0x940>)
   11ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
   11ba8:	fba1 010b 	umull	r0, r1, r1, fp
   11bac:	f7ee fb74 	bl	298 <__aeabi_uldivmod>
   11bb0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_win_offset += 1;
   11bb4:	1c47      	adds	r7, r0, #1
		periodic_us = conn_interval_us;
   11bb6:	4635      	mov	r5, r6
   11bb8:	e790      	b.n	11adc <event_connection_prepare+0x7bc>
				     HAL_TICKER_US_TO_TICKS(periodic_us),
   11bba:	fba5 ab0b 	umull	sl, fp, r5, fp
   11bbe:	a328      	add	r3, pc, #160	; (adr r3, 11c60 <event_connection_prepare+0x940>)
   11bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
   11bc4:	4650      	mov	r0, sl
   11bc6:	4659      	mov	r1, fp
   11bc8:	f7ee fb66 	bl	298 <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(periodic_us),
   11bcc:	4a31      	ldr	r2, [pc, #196]	; (11c94 <event_connection_prepare+0x974>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   11bce:	f894 6020 	ldrb.w	r6, [r4, #32]
   11bd2:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
				     HAL_TICKER_REMAINDER(periodic_us),
   11bd6:	2307      	movs	r3, #7
   11bd8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   11bdc:	2100      	movs	r1, #0
   11bde:	4343      	muls	r3, r0
   11be0:	fb02 3301 	mla	r3, r2, r1, r3
   11be4:	fba0 0102 	umull	r0, r1, r0, r2
   11be8:	ebba 0000 	subs.w	r0, sl, r0
   11bec:	4419      	add	r1, r3
   11bee:	eb6b 0101 	sbc.w	r1, fp, r1
   11bf2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11bf6:	2300      	movs	r3, #0
   11bf8:	f7ee fb4e 	bl	298 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   11bfc:	68e3      	ldr	r3, [r4, #12]
   11bfe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   11c00:	f994 e01d 	ldrsb.w	lr, [r4, #29]
   11c04:	4924      	ldr	r1, [pc, #144]	; (11c98 <event_connection_prepare+0x978>)
		ticker_status =
   11c06:	9002      	str	r0, [sp, #8]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   11c08:	441a      	add	r2, r3
   11c0a:	4613      	mov	r3, r2
   11c0c:	4a23      	ldr	r2, [pc, #140]	; (11c9c <event_connection_prepare+0x97c>)
		ticker_status =
   11c0e:	9304      	str	r3, [sp, #16]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   11c10:	ea12 022e 	ands.w	r2, r2, lr, asr #32
   11c14:	bf38      	it	cc
   11c16:	460a      	movcc	r2, r1
   11c18:	3607      	adds	r6, #7
		ticker_status =
   11c1a:	f641 61e3 	movw	r1, #7907	; 0x1ee3
   11c1e:	9108      	str	r1, [sp, #32]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   11c20:	b2f6      	uxtb	r6, r6
		ticker_status =
   11c22:	4916      	ldr	r1, [pc, #88]	; (11c7c <event_connection_prepare+0x95c>)
   11c24:	9107      	str	r1, [sp, #28]
   11c26:	9205      	str	r2, [sp, #20]
   11c28:	9406      	str	r4, [sp, #24]
   11c2a:	f8cd 800c 	str.w	r8, [sp, #12]
   11c2e:	9501      	str	r5, [sp, #4]
   11c30:	9700      	str	r7, [sp, #0]
   11c32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11c34:	4632      	mov	r2, r6
   11c36:	4641      	mov	r1, r8
   11c38:	4640      	mov	r0, r8
   11c3a:	f7fa fc59 	bl	c4f0 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   11c3e:	f030 0002 	bics.w	r0, r0, #2
   11c42:	d193      	bne.n	11b6c <event_connection_prepare+0x84c>
		if (mayfly_was_enabled) {
   11c44:	f1b9 0f00 	cmp.w	r9, #0
   11c48:	f000 8385 	beq.w	12356 <event_connection_prepare+0x1036>
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
   11c4c:	2201      	movs	r2, #1
   11c4e:	4611      	mov	r1, r2
}
   11c50:	b00f      	add	sp, #60	; 0x3c
   11c52:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
   11c56:	f7f9 be65 	b.w	b924 <mayfly_enable>
   11c5a:	bf00      	nop
   11c5c:	f3af 8000 	nop.w
   11c60:	1afd498d 	.word	0x1afd498d
   11c64:	00000007 	.word	0x00000007
   11c68:	09ce5400 	.word	0x09ce5400
   11c6c:	000261ea 	.word	0x000261ea
   11c70:	000f4240 	.word	0x000f4240
   11c74:	026259ff 	.word	0x026259ff
   11c78:	01c9c37f 	.word	0x01c9c37f
   11c7c:	0000f9b5 	.word	0x0000f9b5
   11c80:	00023dae 	.word	0x00023dae
   11c84:	00022d76 	.word	0x00022d76
   11c88:	00025d3d 	.word	0x00025d3d
   11c8c:	000272d8 	.word	0x000272d8
   11c90:	00025f18 	.word	0x00025f18
   11c94:	1afd498d 	.word	0x1afd498d
   11c98:	00012509 	.word	0x00012509
   11c9c:	0001250d 	.word	0x0001250d
   11ca0:	3b9aca00 	.word	0x3b9aca00
	if (conn->llcp.chan_map.initiate) {
   11ca4:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   11ca8:	2b00      	cmp	r3, #0
   11caa:	d05e      	beq.n	11d6a <event_connection_prepare+0xa4a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11cac:	48c9      	ldr	r0, [pc, #804]	; (11fd4 <event_connection_prepare+0xcb4>)
   11cae:	f7f9 fd96 	bl	b7de <mem_acquire>
		if (node_tx) {
   11cb2:	4607      	mov	r7, r0
   11cb4:	b1e8      	cbz	r0, 11cf2 <event_connection_prepare+0x9d2>
			conn->llcp.chan_map.initiate = 0;
   11cb6:	2300      	movs	r3, #0
   11cb8:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
				event_counter + conn->latency + 6;
   11cbc:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   11cbe:	3306      	adds	r3, #6
   11cc0:	4433      	add	r3, r6
			conn->llcp.chan_map.instant =
   11cc2:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11cc6:	7903      	ldrb	r3, [r0, #4]
   11cc8:	f043 0303 	orr.w	r3, r3, #3
   11ccc:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   11cce:	2308      	movs	r3, #8
   11cd0:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
   11cd2:	2301      	movs	r3, #1
   11cd4:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
   11cd6:	2205      	movs	r2, #5
   11cd8:	f104 0179 	add.w	r1, r4, #121	; 0x79
   11cdc:	3008      	adds	r0, #8
   11cde:	f7ee fd58 	bl	792 <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
   11ce2:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
   11ce6:	f8a7 300d 	strh.w	r3, [r7, #13]
			ctrl_tx_enqueue(conn, node_tx);
   11cea:	4639      	mov	r1, r7
   11cec:	4620      	mov	r0, r4
   11cee:	f7ff fa47 	bl	11180 <ctrl_tx_enqueue>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
   11cf2:	f894 20b1 	ldrb.w	r2, [r4, #177]	; 0xb1
   11cf6:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
   11cfa:	429a      	cmp	r2, r3
   11cfc:	d01e      	beq.n	11d3c <event_connection_prepare+0xa1c>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
   11cfe:	2005      	movs	r0, #5
   11d00:	f7ff f816 	bl	10d30 <event_stop.constprop.33>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11d04:	48b3      	ldr	r0, [pc, #716]	; (11fd4 <event_connection_prepare+0xcb4>)
   11d06:	f7f9 fd6a 	bl	b7de <mem_acquire>
		if (node_tx) {
   11d0a:	4601      	mov	r1, r0
   11d0c:	b1b0      	cbz	r0, 11d3c <event_connection_prepare+0xa1c>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
   11d0e:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
   11d12:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11d16:	7903      	ldrb	r3, [r0, #4]
   11d18:	f043 0303 	orr.w	r3, r3, #3
   11d1c:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   11d1e:	2302      	movs	r3, #2
   11d20:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
   11d22:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.terminate_ind.error_code =
   11d24:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
   11d28:	7203      	strb	r3, [r0, #8]
			ctrl_tx_enqueue(conn, node_tx);
   11d2a:	4620      	mov	r0, r4
   11d2c:	f7ff fa28 	bl	11180 <ctrl_tx_enqueue>
			conn->procedure_expire = conn->supervision_reload;
   11d30:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
			if (conn->procedure_expire <= 1) {
   11d32:	2b01      	cmp	r3, #1
				conn->procedure_expire++;
   11d34:	bf98      	it	ls
   11d36:	3301      	addls	r3, #1
   11d38:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	if (conn->llcp_length.ack != conn->llcp_length.req) {
   11d3c:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
   11d40:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   11d44:	429a      	cmp	r2, r3
   11d46:	f000 82ed 	beq.w	12324 <event_connection_prepare+0x1004>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
   11d4a:	2005      	movs	r0, #5
   11d4c:	f7fe fff0 	bl	10d30 <event_stop.constprop.33>
	switch (conn->llcp_length.state) {
   11d50:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   11d54:	f003 0303 	and.w	r3, r3, #3
   11d58:	2b03      	cmp	r3, #3
   11d5a:	f200 830e 	bhi.w	1237a <event_connection_prepare+0x105a>
   11d5e:	e8df f013 	tbh	[pc, r3, lsl #1]
   11d62:	0288      	.short	0x0288
   11d64:	02e102e1 	.word	0x02e102e1
   11d68:	02fd      	.short	0x02fd
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
   11d6a:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
   11d6e:	1af3      	subs	r3, r6, r3
   11d70:	041f      	lsls	r7, r3, #16
   11d72:	d4be      	bmi.n	11cf2 <event_connection_prepare+0x9d2>
		conn->llcp_ack = conn->llcp_req;
   11d74:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   11d78:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		memcpy(&conn->data_chan_map[0],
   11d7c:	f104 0717 	add.w	r7, r4, #23
   11d80:	2205      	movs	r2, #5
   11d82:	f104 0179 	add.w	r1, r4, #121	; 0x79
   11d86:	4638      	mov	r0, r7
   11d88:	f7ee fd03 	bl	792 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
   11d8c:	2105      	movs	r1, #5
   11d8e:	4638      	mov	r0, r7
   11d90:	f7f9 fed0 	bl	bb34 <util_ones_count_get>
		conn->data_chan_count =
   11d94:	7f63      	ldrb	r3, [r4, #29]
   11d96:	f360 0305 	bfi	r3, r0, #0, #6
   11d9a:	7763      	strb	r3, [r4, #29]
		conn->chm_update = 1;
   11d9c:	2301      	movs	r3, #1
   11d9e:	7723      	strb	r3, [r4, #28]
   11da0:	e7a7      	b.n	11cf2 <event_connection_prepare+0x9d2>
	if (conn->llcp.encryption.initiate) {
   11da2:	f894 9078 	ldrb.w	r9, [r4, #120]	; 0x78
   11da6:	f1b9 0f00 	cmp.w	r9, #0
   11daa:	d1a2      	bne.n	11cf2 <event_connection_prepare+0x9d2>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11dac:	4889      	ldr	r0, [pc, #548]	; (11fd4 <event_connection_prepare+0xcb4>)
   11dae:	f7f9 fd16 	bl	b7de <mem_acquire>
	if (!node_tx) {
   11db2:	4607      	mov	r7, r0
   11db4:	2800      	cmp	r0, #0
   11db6:	d09c      	beq.n	11cf2 <event_connection_prepare+0x9d2>
	if (!conn->role) {
   11db8:	f994 301d 	ldrsb.w	r3, [r4, #29]
   11dbc:	2b00      	cmp	r3, #0
	pdu_ctrl_tx = (void *)node_tx->pdu_data;
   11dbe:	f100 0a04 	add.w	sl, r0, #4
	if (!conn->role) {
   11dc2:	db4d      	blt.n	11e60 <event_connection_prepare+0xb40>
		ecb_encrypt(&conn->llcp.encryption.ltk[0],
   11dc4:	f104 0bf9 	add.w	fp, r4, #249	; 0xf9
   11dc8:	465b      	mov	r3, fp
   11dca:	464a      	mov	r2, r9
   11dcc:	f104 0194 	add.w	r1, r4, #148	; 0x94
   11dd0:	f104 0084 	add.w	r0, r4, #132	; 0x84
   11dd4:	f006 fb7c 	bl	184d0 <ecb_encrypt>
		memcpy(&conn->ccm_tx.key[0], &conn->ccm_rx.key[0],
   11dd8:	2210      	movs	r2, #16
   11dda:	4659      	mov	r1, fp
   11ddc:	f504 708d 	add.w	r0, r4, #282	; 0x11a
   11de0:	f7ee fcd7 	bl	792 <memcpy>
		memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
   11de4:	f504 7189 	add.w	r1, r4, #274	; 0x112
   11de8:	2208      	movs	r2, #8
   11dea:	f204 1033 	addw	r0, r4, #307	; 0x133
   11dee:	f7ee fcd0 	bl	792 <memcpy>
		conn->ccm_rx.direction = 0;
   11df2:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
		conn->ccm_rx.counter = 0;
   11df6:	f884 9109 	strb.w	r9, [r4, #265]	; 0x109
		conn->ccm_rx.direction = 0;
   11dfa:	f369 0300 	bfi	r3, r9, #0, #1
   11dfe:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
		conn->ccm_tx.direction = 1;
   11e02:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
		conn->ccm_rx.counter = 0;
   11e06:	f884 910a 	strb.w	r9, [r4, #266]	; 0x10a
		conn->ccm_tx.direction = 1;
   11e0a:	f043 0301 	orr.w	r3, r3, #1
   11e0e:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
		conn->enc_rx = 1;
   11e12:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
		conn->ccm_rx.counter = 0;
   11e16:	f884 910b 	strb.w	r9, [r4, #267]	; 0x10b
		conn->enc_rx = 1;
   11e1a:	f043 0310 	orr.w	r3, r3, #16
		conn->ccm_rx.counter = 0;
   11e1e:	f884 910c 	strb.w	r9, [r4, #268]	; 0x10c
   11e22:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
   11e26:	f884 910e 	strb.w	r9, [r4, #270]	; 0x10e
   11e2a:	f884 910f 	strb.w	r9, [r4, #271]	; 0x10f
   11e2e:	f884 9110 	strb.w	r9, [r4, #272]	; 0x110
		conn->ccm_tx.counter = 0;
   11e32:	f8a4 912a 	strh.w	r9, [r4, #298]	; 0x12a
   11e36:	f8a4 912c 	strh.w	r9, [r4, #300]	; 0x12c
   11e3a:	f8a4 912e 	strh.w	r9, [r4, #302]	; 0x12e
   11e3e:	f8a4 9130 	strh.w	r9, [r4, #304]	; 0x130
		conn->enc_rx = 1;
   11e42:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
		start_enc_rsp_send(conn, pdu_ctrl_tx);
   11e46:	4651      	mov	r1, sl
   11e48:	4620      	mov	r0, r4
   11e4a:	f7ff fa27 	bl	1129c <start_enc_rsp_send>
	ctrl_tx_enqueue(conn, node_tx);
   11e4e:	4639      	mov	r1, r7
   11e50:	4620      	mov	r0, r4
   11e52:	f7ff f995 	bl	11180 <ctrl_tx_enqueue>
	conn->llcp_ack = conn->llcp_req;
   11e56:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   11e5a:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
   11e5e:	e748      	b.n	11cf2 <event_connection_prepare+0x9d2>
	else if (!conn->pause_tx || conn->refresh) {
   11e60:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   11e64:	f003 0348 	and.w	r3, r3, #72	; 0x48
   11e68:	2b08      	cmp	r3, #8
   11e6a:	f000 80a2 	beq.w	11fb2 <event_connection_prepare+0xc92>
		if (conn->llcp.encryption.error_code) {
   11e6e:	f894 9079 	ldrb.w	r9, [r4, #121]	; 0x79
   11e72:	f1b9 0f00 	cmp.w	r9, #0
   11e76:	d020      	beq.n	11eba <event_connection_prepare+0xb9a>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   11e78:	7903      	ldrb	r3, [r0, #4]
   11e7a:	f043 0303 	orr.w	r3, r3, #3
   11e7e:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
   11e80:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   11e84:	0698      	lsls	r0, r3, #26
   11e86:	d512      	bpl.n	11eae <event_connection_prepare+0xb8e>
	    (conn->llcp_features & BIT(BT_LE_FEAT_BIT_EXT_REJ_IND))) {
   11e88:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
	if (conn->common.fex_valid &&
   11e8c:	0759      	lsls	r1, r3, #29
   11e8e:	d50e      	bpl.n	11eae <event_connection_prepare+0xb8e>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   11e90:	2311      	movs	r3, #17
   11e92:	71fb      	strb	r3, [r7, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   11e94:	2303      	movs	r3, #3
   11e96:	723b      	strb	r3, [r7, #8]
		p->error_code = conn->llcp.encryption.error_code;
   11e98:	f887 9009 	strb.w	r9, [r7, #9]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ext_ind);
   11e9c:	2302      	movs	r3, #2
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
   11e9e:	717b      	strb	r3, [r7, #5]
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
   11ea0:	797b      	ldrb	r3, [r7, #5]
   11ea2:	3301      	adds	r3, #1
   11ea4:	717b      	strb	r3, [r7, #5]
	conn->llcp.encryption.error_code = 0;
   11ea6:	2300      	movs	r3, #0
   11ea8:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
   11eac:	e7cf      	b.n	11e4e <event_connection_prepare+0xb2e>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   11eae:	230d      	movs	r3, #13
   11eb0:	71fb      	strb	r3, [r7, #7]
		p->error_code =	conn->llcp.encryption.error_code;
   11eb2:	f887 9008 	strb.w	r9, [r7, #8]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
   11eb6:	2301      	movs	r3, #1
   11eb8:	e7f1      	b.n	11e9e <event_connection_prepare+0xb7e>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11eba:	4846      	ldr	r0, [pc, #280]	; (11fd4 <event_connection_prepare+0xcb4>)
   11ebc:	f7f9 fc8f 	bl	b7de <mem_acquire>
	if (!node_tx) {
   11ec0:	4682      	mov	sl, r0
   11ec2:	2800      	cmp	r0, #0
   11ec4:	f000 8304 	beq.w	124d0 <event_connection_prepare+0x11b0>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11ec8:	7903      	ldrb	r3, [r0, #4]
   11eca:	f043 0303 	orr.w	r3, r3, #3
   11ece:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   11ed0:	f04f 0b04 	mov.w	fp, #4
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
   11ed4:	230d      	movs	r3, #13
   11ed6:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   11ed8:	f880 b007 	strb.w	fp, [r0, #7]
	entropy_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_rsp.skds,
   11edc:	f100 0308 	add.w	r3, r0, #8
   11ee0:	4619      	mov	r1, r3
   11ee2:	2208      	movs	r2, #8
   11ee4:	6868      	ldr	r0, [r5, #4]
   11ee6:	930d      	str	r3, [sp, #52]	; 0x34
   11ee8:	f7f1 f902 	bl	30f0 <entropy_get_entropy_isr>
	entropy_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_rsp.ivs,
   11eec:	f10a 0310 	add.w	r3, sl, #16
   11ef0:	4619      	mov	r1, r3
   11ef2:	465a      	mov	r2, fp
   11ef4:	6868      	ldr	r0, [r5, #4]
   11ef6:	930b      	str	r3, [sp, #44]	; 0x2c
   11ef8:	f7f1 f8fa 	bl	30f0 <entropy_get_entropy_isr>
	memcpy(&conn->llcp.encryption.skd[8],
   11efc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   11efe:	2208      	movs	r2, #8
   11f00:	4619      	mov	r1, r3
   11f02:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   11f06:	f7ee fc44 	bl	792 <memcpy>
	memcpy(&conn->ccm_rx.iv[4],
   11f0a:	465a      	mov	r2, fp
   11f0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   11f0e:	f504 708b 	add.w	r0, r4, #278	; 0x116
   11f12:	f7ee fc3e 	bl	792 <memcpy>
	ctrl_tx_enqueue(conn, node_tx);
   11f16:	4651      	mov	r1, sl
   11f18:	4620      	mov	r0, r4
			ecb_encrypt(&conn->llcp.encryption.ltk[0],
   11f1a:	f104 0af9 	add.w	sl, r4, #249	; 0xf9
	ctrl_tx_enqueue(conn, node_tx);
   11f1e:	f7ff f92f 	bl	11180 <ctrl_tx_enqueue>
			ecb_encrypt(&conn->llcp.encryption.ltk[0],
   11f22:	4653      	mov	r3, sl
   11f24:	464a      	mov	r2, r9
   11f26:	f104 0194 	add.w	r1, r4, #148	; 0x94
   11f2a:	f104 0084 	add.w	r0, r4, #132	; 0x84
   11f2e:	f006 facf 	bl	184d0 <ecb_encrypt>
			memcpy(&conn->ccm_tx.key[0],
   11f32:	2210      	movs	r2, #16
   11f34:	4651      	mov	r1, sl
   11f36:	f504 708d 	add.w	r0, r4, #282	; 0x11a
   11f3a:	f7ee fc2a 	bl	792 <memcpy>
			memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
   11f3e:	2208      	movs	r2, #8
   11f40:	f504 7189 	add.w	r1, r4, #274	; 0x112
   11f44:	f204 1033 	addw	r0, r4, #307	; 0x133
   11f48:	f7ee fc23 	bl	792 <memcpy>
			conn->ccm_rx.direction = 1;
   11f4c:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
			conn->ccm_rx.counter = 0;
   11f50:	f884 9109 	strb.w	r9, [r4, #265]	; 0x109
			conn->ccm_rx.direction = 1;
   11f54:	f043 0301 	orr.w	r3, r3, #1
   11f58:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
			conn->ccm_tx.direction = 0;
   11f5c:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
			conn->ccm_rx.counter = 0;
   11f60:	f884 910a 	strb.w	r9, [r4, #266]	; 0x10a
			conn->ccm_tx.direction = 0;
   11f64:	f369 0300 	bfi	r3, r9, #0, #1
   11f68:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
			conn->enc_rx = 1;
   11f6c:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
			conn->ccm_rx.counter = 0;
   11f70:	f884 910b 	strb.w	r9, [r4, #267]	; 0x10b
			conn->enc_rx = 1;
   11f74:	f043 0310 	orr.w	r3, r3, #16
   11f78:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11f7c:	793b      	ldrb	r3, [r7, #4]
			conn->ccm_rx.counter = 0;
   11f7e:	f884 910c 	strb.w	r9, [r4, #268]	; 0x10c
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11f82:	f043 0303 	orr.w	r3, r3, #3
			conn->ccm_rx.counter = 0;
   11f86:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
   11f8a:	f884 910e 	strb.w	r9, [r4, #270]	; 0x10e
   11f8e:	f884 910f 	strb.w	r9, [r4, #271]	; 0x10f
   11f92:	f884 9110 	strb.w	r9, [r4, #272]	; 0x110
			conn->ccm_tx.counter = 0;
   11f96:	f8a4 912a 	strh.w	r9, [r4, #298]	; 0x12a
   11f9a:	f8a4 912c 	strh.w	r9, [r4, #300]	; 0x12c
   11f9e:	f8a4 912e 	strh.w	r9, [r4, #302]	; 0x12e
   11fa2:	f8a4 9130 	strh.w	r9, [r4, #304]	; 0x130
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11fa6:	713b      	strb	r3, [r7, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   11fa8:	2301      	movs	r3, #1
   11faa:	717b      	strb	r3, [r7, #5]
			pdu_ctrl_tx->llctrl.opcode =
   11fac:	2305      	movs	r3, #5
   11fae:	71fb      	strb	r3, [r7, #7]
   11fb0:	e74d      	b.n	11e4e <event_connection_prepare+0xb2e>
		start_enc_rsp_send(_radio.conn_curr, pdu_ctrl_tx);
   11fb2:	4651      	mov	r1, sl
   11fb4:	f8d5 071c 	ldr.w	r0, [r5, #1820]	; 0x71c
   11fb8:	f7ff f970 	bl	1129c <start_enc_rsp_send>
		_radio.conn_curr->pause_rx = 0;
   11fbc:	f8d5 271c 	ldr.w	r2, [r5, #1820]	; 0x71c
   11fc0:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   11fc4:	f369 0382 	bfi	r3, r9, #2, #1
		_radio.conn_curr->pause_tx = 0;
   11fc8:	f369 03c3 	bfi	r3, r9, #3, #1
   11fcc:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
   11fd0:	e73d      	b.n	11e4e <event_connection_prepare+0xb2e>
   11fd2:	bf00      	nop
   11fd4:	20001354 	.word	0x20001354
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11fd8:	48b0      	ldr	r0, [pc, #704]	; (1229c <event_connection_prepare+0xf7c>)
   11fda:	f7f9 fc00 	bl	b7de <mem_acquire>
	if (node_tx) {
   11fde:	4607      	mov	r7, r0
   11fe0:	2800      	cmp	r0, #0
   11fe2:	f43f ae86 	beq.w	11cf2 <event_connection_prepare+0x9d2>
		conn->llcp_ack = conn->llcp_req;
   11fe6:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   11fea:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		conn->llcp_features = RADIO_BLE_FEAT;
   11fee:	4bac      	ldr	r3, [pc, #688]	; (122a0 <event_connection_prepare+0xf80>)
   11ff0:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11ff4:	7903      	ldrb	r3, [r0, #4]
   11ff6:	f043 0303 	orr.w	r3, r3, #3
   11ffa:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
   11ffc:	2309      	movs	r3, #9
   11ffe:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode =
   12000:	f994 301d 	ldrsb.w	r3, [r4, #29]
   12004:	2b00      	cmp	r3, #0
   12006:	bfac      	ite	ge
   12008:	2308      	movge	r3, #8
   1200a:	230e      	movlt	r3, #14
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
   1200c:	2208      	movs	r2, #8
		pdu_ctrl_tx->llctrl.opcode =
   1200e:	71c3      	strb	r3, [r0, #7]
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
   12010:	2100      	movs	r1, #0
   12012:	4410      	add	r0, r2
   12014:	f7ee fbe9 	bl	7ea <memset>
			conn->llcp_features & 0xFF;
   12018:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
		pdu_ctrl_tx->llctrl.feature_req.features[0] =
   1201c:	723b      	strb	r3, [r7, #8]
			(conn->llcp_features >> 8) & 0xFF;
   1201e:	0a1a      	lsrs	r2, r3, #8
			(conn->llcp_features >> 16) & 0xFF;
   12020:	0c1b      	lsrs	r3, r3, #16
		pdu_ctrl_tx->llctrl.feature_req.features[1] =
   12022:	727a      	strb	r2, [r7, #9]
		pdu_ctrl_tx->llctrl.feature_req.features[2] =
   12024:	72bb      	strb	r3, [r7, #10]
		ctrl_tx_enqueue(conn, node_tx);
   12026:	4639      	mov	r1, r7
		ctrl_tx_enqueue(conn, node_tx);
   12028:	4620      	mov	r0, r4
   1202a:	f7ff f8a9 	bl	11180 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
   1202e:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   12032:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   12036:	e65c      	b.n	11cf2 <event_connection_prepare+0x9d2>
	if (conn->llcp_version.tx == 0) {
   12038:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
   1203c:	07da      	lsls	r2, r3, #31
   1203e:	d424      	bmi.n	1208a <event_connection_prepare+0xd6a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   12040:	4896      	ldr	r0, [pc, #600]	; (1229c <event_connection_prepare+0xf7c>)
   12042:	f7f9 fbcc 	bl	b7de <mem_acquire>
		if (node_tx) {
   12046:	4601      	mov	r1, r0
   12048:	2800      	cmp	r0, #0
   1204a:	f43f ae52 	beq.w	11cf2 <event_connection_prepare+0x9d2>
			conn->llcp_ack = conn->llcp_req;
   1204e:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   12052:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
			conn->llcp_version.tx = 1;
   12056:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
   1205a:	f043 0301 	orr.w	r3, r3, #1
   1205e:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12062:	7903      	ldrb	r3, [r0, #4]
   12064:	f043 0303 	orr.w	r3, r3, #3
   12068:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len =
   1206a:	2306      	movs	r3, #6
   1206c:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
   1206e:	230c      	movs	r3, #12
   12070:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.version_ind.version_number =
   12072:	2309      	movs	r3, #9
   12074:	7203      	strb	r3, [r0, #8]
			pdu_ctrl_tx->llctrl.version_ind.company_id =
   12076:	f06f 030e 	mvn.w	r3, #14
   1207a:	7243      	strb	r3, [r0, #9]
   1207c:	2305      	movs	r3, #5
   1207e:	7283      	strb	r3, [r0, #10]
			pdu_ctrl_tx->llctrl.version_ind.sub_version_number =
   12080:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12084:	72c3      	strb	r3, [r0, #11]
   12086:	7303      	strb	r3, [r0, #12]
   12088:	e7ce      	b.n	12028 <event_connection_prepare+0xd08>
	} else if (conn->llcp_version.rx != 0) {
   1208a:	079b      	lsls	r3, r3, #30
   1208c:	d526      	bpl.n	120dc <event_connection_prepare+0xdbc>
		conn->llcp_ack = conn->llcp_req;
   1208e:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   12092:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		node_rx = packet_rx_reserve_get(2);
   12096:	2002      	movs	r0, #2
   12098:	f7fc faa8 	bl	e5ec <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
   1209c:	b920      	cbnz	r0, 120a8 <event_connection_prepare+0xd88>
   1209e:	4b81      	ldr	r3, [pc, #516]	; (122a4 <event_connection_prepare+0xf84>)
   120a0:	9301      	str	r3, [sp, #4]
   120a2:	9300      	str	r3, [sp, #0]
   120a4:	4b80      	ldr	r3, [pc, #512]	; (122a8 <event_connection_prepare+0xf88>)
   120a6:	e45d      	b.n	11964 <event_connection_prepare+0x644>
		node_rx->hdr.handle = conn->handle;
   120a8:	8c23      	ldrh	r3, [r4, #32]
   120aa:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   120ac:	2301      	movs	r3, #1
   120ae:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   120b0:	7a03      	ldrb	r3, [r0, #8]
   120b2:	f043 0303 	orr.w	r3, r3, #3
   120b6:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len =
   120b8:	2306      	movs	r3, #6
   120ba:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode =
   120bc:	230c      	movs	r3, #12
   120be:	72c3      	strb	r3, [r0, #11]
		pdu_ctrl_rx->llctrl.version_ind.version_number =
   120c0:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
   120c4:	7303      	strb	r3, [r0, #12]
		pdu_ctrl_rx->llctrl.version_ind.company_id =
   120c6:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
   120ca:	f8a0 300d 	strh.w	r3, [r0, #13]
		pdu_ctrl_rx->llctrl.version_ind.sub_version_number =
   120ce:	f8b4 30ac 	ldrh.w	r3, [r4, #172]	; 0xac
   120d2:	f8a0 300f 	strh.w	r3, [r0, #15]
		packet_rx_enqueue();
   120d6:	f7fd fb63 	bl	f7a0 <packet_rx_enqueue>
   120da:	e60a      	b.n	11cf2 <event_connection_prepare+0x9d2>
		LL_ASSERT(0);
   120dc:	4b71      	ldr	r3, [pc, #452]	; (122a4 <event_connection_prepare+0xf84>)
   120de:	9301      	str	r3, [sp, #4]
   120e0:	9300      	str	r3, [sp, #0]
   120e2:	4b71      	ldr	r3, [pc, #452]	; (122a8 <event_connection_prepare+0xf88>)
   120e4:	f7ff bad2 	b.w	1168c <event_connection_prepare+0x36c>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   120e8:	486c      	ldr	r0, [pc, #432]	; (1229c <event_connection_prepare+0xf7c>)
   120ea:	f7f9 fb78 	bl	b7de <mem_acquire>
	if (node_tx) {
   120ee:	4601      	mov	r1, r0
   120f0:	2800      	cmp	r0, #0
   120f2:	f43f adfe 	beq.w	11cf2 <event_connection_prepare+0x9d2>
		conn->llcp_ack = conn->llcp_req;
   120f6:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   120fa:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   120fe:	7903      	ldrb	r3, [r0, #4]
   12100:	f043 0303 	orr.w	r3, r3, #3
   12104:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
   12106:	2301      	movs	r3, #1
   12108:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
   1210a:	2312      	movs	r3, #18
   1210c:	71c3      	strb	r3, [r0, #7]
   1210e:	e78b      	b.n	12028 <event_connection_prepare+0xd08>
	if (conn->llcp.phy_upd_ind.initiate) {
   12110:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
   12114:	07d7      	lsls	r7, r2, #31
   12116:	d551      	bpl.n	121bc <event_connection_prepare+0xe9c>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   12118:	4860      	ldr	r0, [pc, #384]	; (1229c <event_connection_prepare+0xf7c>)
   1211a:	f7f9 fb60 	bl	b7de <mem_acquire>
		if (node_tx) {
   1211e:	4607      	mov	r7, r0
   12120:	2800      	cmp	r0, #0
   12122:	f43f ade6 	beq.w	11cf2 <event_connection_prepare+0x9d2>
			conn->llcp.phy_upd_ind.initiate = 0;
   12126:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   1212a:	f36f 0300 	bfc	r3, #0, #1
   1212e:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
			if (!((conn->llcp.phy_upd_ind.tx |
   12132:	b2db      	uxtb	r3, r3
   12134:	f3c3 0982 	ubfx	r9, r3, #2, #3
   12138:	ea59 1953 	orrs.w	r9, r9, r3, lsr #5
   1213c:	d138      	bne.n	121b0 <event_connection_prepare+0xe90>
				conn->llcp_ack = conn->llcp_req;
   1213e:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
   12142:	f884 2075 	strb.w	r2, [r4, #117]	; 0x75
				if (conn->llcp.phy_upd_ind.cmd) {
   12146:	0798      	lsls	r0, r3, #30
				conn->llcp.phy_upd_ind.instant = 0;
   12148:	f8a4 907a 	strh.w	r9, [r4, #122]	; 0x7a
				if (conn->llcp.phy_upd_ind.cmd) {
   1214c:	d51a      	bpl.n	12184 <event_connection_prepare+0xe64>
					node_rx = packet_rx_reserve_get(2);
   1214e:	2002      	movs	r0, #2
   12150:	f7fc fa4c 	bl	e5ec <packet_rx_reserve_get>
					LL_ASSERT(node_rx);
   12154:	b920      	cbnz	r0, 12160 <event_connection_prepare+0xe40>
		LL_ASSERT(node_rx);
   12156:	4b53      	ldr	r3, [pc, #332]	; (122a4 <event_connection_prepare+0xf84>)
   12158:	9301      	str	r3, [sp, #4]
   1215a:	9300      	str	r3, [sp, #0]
   1215c:	4b53      	ldr	r3, [pc, #332]	; (122ac <event_connection_prepare+0xf8c>)
   1215e:	e401      	b.n	11964 <event_connection_prepare+0x644>
					node_rx->hdr.handle = conn->handle;
   12160:	8c23      	ldrh	r3, [r4, #32]
   12162:	80c3      	strh	r3, [r0, #6]
					upd->status = 0;
   12164:	f880 900b 	strb.w	r9, [r0, #11]
					node_rx->hdr.type =
   12168:	230c      	movs	r3, #12
   1216a:	7103      	strb	r3, [r0, #4]
					upd->tx = conn->phy_tx;
   1216c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   12170:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   12174:	7303      	strb	r3, [r0, #12]
					upd->rx = conn->phy_rx;
   12176:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
   1217a:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1217e:	7343      	strb	r3, [r0, #13]
					packet_rx_enqueue();
   12180:	f7fd fb0e 	bl	f7a0 <packet_rx_enqueue>
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12184:	793b      	ldrb	r3, [r7, #4]
   12186:	f043 0303 	orr.w	r3, r3, #3
   1218a:	713b      	strb	r3, [r7, #4]
			pdu_ctrl_tx->len =
   1218c:	2305      	movs	r3, #5
   1218e:	717b      	strb	r3, [r7, #5]
			pdu_ctrl_tx->llctrl.opcode =
   12190:	2318      	movs	r3, #24
   12192:	71fb      	strb	r3, [r7, #7]
			ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
   12194:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   12198:	f3c3 0382 	ubfx	r3, r3, #2, #3
   1219c:	723b      	strb	r3, [r7, #8]
			ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
   1219e:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   121a2:	f3c3 1342 	ubfx	r3, r3, #5, #3
   121a6:	727b      	strb	r3, [r7, #9]
			ind->instant = conn->llcp.phy_upd_ind.instant;
   121a8:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
   121ac:	817b      	strh	r3, [r7, #10]
   121ae:	e59c      	b.n	11cea <event_connection_prepare+0x9ca>
								 conn->latency +
   121b0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   121b2:	3306      	adds	r3, #6
   121b4:	4433      	add	r3, r6
				conn->llcp.phy_upd_ind.instant = event_counter +
   121b6:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
   121ba:	e7e3      	b.n	12184 <event_connection_prepare+0xe64>
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) & 0xFFFF)
   121bc:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
   121c0:	1af3      	subs	r3, r6, r3
   121c2:	0419      	lsls	r1, r3, #16
   121c4:	f53f ad95 	bmi.w	11cf2 <event_connection_prepare+0x9d2>
		conn->llcp_ack = conn->llcp_req;
   121c8:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   121cc:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		if (conn->llcp.phy_upd_ind.tx) {
   121d0:	f012 0f1c 	tst.w	r2, #28
		old_tx = conn->phy_tx;
   121d4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
		old_rx = conn->phy_rx;
   121d8:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
			conn->phy_tx = conn->llcp.phy_upd_ind.tx;
   121dc:	bf18      	it	ne
   121de:	f3c2 0782 	ubfxne	r7, r2, #2, #3
		old_tx = conn->phy_tx;
   121e2:	f3c3 00c2 	ubfx	r0, r3, #3, #3
			conn->phy_tx = conn->llcp.phy_upd_ind.tx;
   121e6:	bf1c      	itt	ne
   121e8:	f367 03c5 	bfine	r3, r7, #3, #3
   121ec:	f884 3038 	strbne.w	r3, [r4, #56]	; 0x38
		if (conn->llcp.phy_upd_ind.rx) {
   121f0:	f012 0fe0 	tst.w	r2, #224	; 0xe0
		old_rx = conn->phy_rx;
   121f4:	f001 0107 	and.w	r1, r1, #7
		if (conn->llcp.phy_upd_ind.rx) {
   121f8:	d008      	beq.n	1220c <event_connection_prepare+0xeec>
			conn->phy_rx = conn->llcp.phy_upd_ind.rx;
   121fa:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   121fe:	f894 703a 	ldrb.w	r7, [r4, #58]	; 0x3a
   12202:	095b      	lsrs	r3, r3, #5
   12204:	f363 0702 	bfi	r7, r3, #0, #3
   12208:	f884 703a 	strb.w	r7, [r4, #58]	; 0x3a
		conn->phy_flags = conn->phy_pref_flags;
   1220c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   12210:	461f      	mov	r7, r3
   12212:	f3c3 1380 	ubfx	r3, r3, #6, #1
   12216:	f363 17c7 	bfi	r7, r3, #7, #1
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
   1221a:	0793      	lsls	r3, r2, #30
		conn->phy_flags = conn->phy_pref_flags;
   1221c:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
   12220:	d40b      	bmi.n	1223a <event_connection_prepare+0xf1a>
   12222:	b2fb      	uxtb	r3, r7
   12224:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   12228:	4283      	cmp	r3, r0
   1222a:	d106      	bne.n	1223a <event_connection_prepare+0xf1a>
		    (conn->phy_rx == old_rx)) {
   1222c:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
   12230:	f003 0307 	and.w	r3, r3, #7
   12234:	428b      	cmp	r3, r1
   12236:	f43f ad5c 	beq.w	11cf2 <event_connection_prepare+0x9d2>
		node_rx = packet_rx_reserve_get(2);
   1223a:	2002      	movs	r0, #2
   1223c:	f7fc f9d6 	bl	e5ec <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
   12240:	2800      	cmp	r0, #0
   12242:	d088      	beq.n	12156 <event_connection_prepare+0xe36>
		node_rx->hdr.handle = conn->handle;
   12244:	8c23      	ldrh	r3, [r4, #32]
   12246:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   12248:	230c      	movs	r3, #12
   1224a:	7103      	strb	r3, [r0, #4]
		upd->status = 0;
   1224c:	2300      	movs	r3, #0
   1224e:	72c3      	strb	r3, [r0, #11]
		upd->tx = conn->phy_tx;
   12250:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   12254:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   12258:	7303      	strb	r3, [r0, #12]
		upd->rx = conn->phy_rx;
   1225a:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
   1225e:	f3c3 0302 	ubfx	r3, r3, #0, #3
   12262:	7343      	strb	r3, [r0, #13]
   12264:	e737      	b.n	120d6 <event_connection_prepare+0xdb6>
			LL_ASSERT(0);
   12266:	4b0f      	ldr	r3, [pc, #60]	; (122a4 <event_connection_prepare+0xf84>)
   12268:	9301      	str	r3, [sp, #4]
   1226a:	9300      	str	r3, [sp, #0]
   1226c:	4b10      	ldr	r3, [pc, #64]	; (122b0 <event_connection_prepare+0xf90>)
   1226e:	f7ff ba0d 	b.w	1168c <event_connection_prepare+0x36c>
		free_count_rx = packet_rx_acquired_count_get() +
   12272:	f7fc f9a5 	bl	e5c0 <packet_rx_acquired_count_get>
   12276:	4607      	mov	r7, r0
			mem_free_count_get(_radio.pkt_rx_data_free);
   12278:	f8d5 0738 	ldr.w	r0, [r5, #1848]	; 0x738
   1227c:	f7f9 fade 	bl	b83c <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
   12280:	4438      	add	r0, r7
   12282:	b280      	uxth	r0, r0
		LL_ASSERT(free_count_rx <= 0xFF);
   12284:	28ff      	cmp	r0, #255	; 0xff
   12286:	d91d      	bls.n	122c4 <event_connection_prepare+0xfa4>
		LL_ASSERT(free_count_rx <= 0xFF);
   12288:	4b06      	ldr	r3, [pc, #24]	; (122a4 <event_connection_prepare+0xf84>)
   1228a:	9301      	str	r3, [sp, #4]
   1228c:	9300      	str	r3, [sp, #0]
   1228e:	4a09      	ldr	r2, [pc, #36]	; (122b4 <event_connection_prepare+0xf94>)
   12290:	4b09      	ldr	r3, [pc, #36]	; (122b8 <event_connection_prepare+0xf98>)
   12292:	490a      	ldr	r1, [pc, #40]	; (122bc <event_connection_prepare+0xf9c>)
   12294:	480a      	ldr	r0, [pc, #40]	; (122c0 <event_connection_prepare+0xfa0>)
   12296:	f7ff b853 	b.w	11340 <event_connection_prepare+0x20>
   1229a:	bf00      	nop
   1229c:	20001354 	.word	0x20001354
   122a0:	000149ff 	.word	0x000149ff
   122a4:	00023dae 	.word	0x00023dae
   122a8:	00025d51 	.word	0x00025d51
   122ac:	00025dad 	.word	0x00025dad
   122b0:	00025dc4 	.word	0x00025dc4
   122b4:	00022d76 	.word	0x00022d76
   122b8:	00025d8b 	.word	0x00025d8b
   122bc:	000272d8 	.word	0x000272d8
   122c0:	00025fa5 	.word	0x00025fa5
		if (_radio.packet_rx_data_count != free_count_rx) {
   122c4:	f895 3742 	ldrb.w	r3, [r5, #1858]	; 0x742
   122c8:	4283      	cmp	r3, r0
   122ca:	d12b      	bne.n	12324 <event_connection_prepare+0x1004>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   122cc:	4883      	ldr	r0, [pc, #524]	; (124dc <event_connection_prepare+0x11bc>)
   122ce:	f7f9 fa86 	bl	b7de <mem_acquire>
		if (!node_tx) {
   122d2:	4601      	mov	r1, r0
   122d4:	b330      	cbz	r0, 12324 <event_connection_prepare+0x1004>
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
   122d6:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
		conn->default_tx_time = conn->llcp_length.tx_time;
   122da:	f8b4 00f2 	ldrh.w	r0, [r4, #242]	; 0xf2
   122de:	8660      	strh	r0, [r4, #50]	; 0x32
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
   122e0:	2201      	movs	r2, #1
   122e2:	f362 0301 	bfi	r3, r2, #0, #2
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   122e6:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
   122ea:	85a2      	strh	r2, [r4, #44]	; 0x2c
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
   122ec:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   122f0:	790b      	ldrb	r3, [r1, #4]
		lr->max_tx_time = conn->default_tx_time;
   122f2:	81c8      	strh	r0, [r1, #14]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   122f4:	f043 0303 	orr.w	r3, r3, #3
   122f8:	710b      	strb	r3, [r1, #4]
		pdu_ctrl_tx->len =
   122fa:	2309      	movs	r3, #9
   122fc:	714b      	strb	r3, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   122fe:	2314      	movs	r3, #20
   12300:	71cb      	strb	r3, [r1, #7]
		lr->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   12302:	231b      	movs	r3, #27
   12304:	720b      	strb	r3, [r1, #8]
   12306:	2300      	movs	r3, #0
   12308:	724b      	strb	r3, [r1, #9]
		lr->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX,
   1230a:	f06f 036f 	mvn.w	r3, #111	; 0x6f
   1230e:	728b      	strb	r3, [r1, #10]
   12310:	230a      	movs	r3, #10
   12312:	72cb      	strb	r3, [r1, #11]
		lr->max_tx_octets = conn->default_tx_octets;
   12314:	818a      	strh	r2, [r1, #12]
		ctrl_tx_enqueue(conn, node_tx);
   12316:	4620      	mov	r0, r4
   12318:	f7fe ff32 	bl	11180 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
   1231c:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   12320:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	event_common_prepare(ticks_at_expire, remainder,
   12324:	f894 3020 	ldrb.w	r3, [r4, #32]
   12328:	f994 501d 	ldrsb.w	r5, [r4, #29]
   1232c:	486c      	ldr	r0, [pc, #432]	; (124e0 <event_connection_prepare+0x11c0>)
   1232e:	496d      	ldr	r1, [pc, #436]	; (124e4 <event_connection_prepare+0x11c4>)
   12330:	68a2      	ldr	r2, [r4, #8]
   12332:	9403      	str	r4, [sp, #12]
   12334:	3307      	adds	r3, #7
   12336:	ea11 0125 	ands.w	r1, r1, r5, asr #32
   1233a:	bf38      	it	cc
   1233c:	4601      	movcc	r1, r0
   1233e:	b2db      	uxtb	r3, r3
   12340:	e88d 000c 	stmia.w	sp, {r2, r3}
   12344:	9102      	str	r1, [sp, #8]
   12346:	1d23      	adds	r3, r4, #4
   12348:	4622      	mov	r2, r4
   1234a:	990c      	ldr	r1, [sp, #48]	; 0x30
   1234c:	4640      	mov	r0, r8
	conn->event_counter = event_counter + 1;
   1234e:	3601      	adds	r6, #1
	event_common_prepare(ticks_at_expire, remainder,
   12350:	f7fe fcfc 	bl	10d4c <event_common_prepare>
	conn->event_counter = event_counter + 1;
   12354:	8466      	strh	r6, [r4, #34]	; 0x22
}
   12356:	b00f      	add	sp, #60	; 0x3c
   12358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		free_count_rx = packet_rx_acquired_count_get() +
   1235c:	f7fc f930 	bl	e5c0 <packet_rx_acquired_count_get>
   12360:	4607      	mov	r7, r0
			mem_free_count_get(_radio.pkt_rx_data_free);
   12362:	f8d5 0738 	ldr.w	r0, [r5, #1848]	; 0x738
   12366:	f7f9 fa69 	bl	b83c <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
   1236a:	4438      	add	r0, r7
   1236c:	b280      	uxth	r0, r0
		LL_ASSERT(free_count_rx <= 0xFF);
   1236e:	28ff      	cmp	r0, #255	; 0xff
   12370:	d88a      	bhi.n	12288 <event_connection_prepare+0xf68>
		if (_radio.packet_rx_data_count != free_count_rx) {
   12372:	f895 3742 	ldrb.w	r3, [r5, #1858]	; 0x742
   12376:	4283      	cmp	r3, r0
   12378:	d005      	beq.n	12386 <event_connection_prepare+0x1066>
		LL_ASSERT(0);
   1237a:	4b5b      	ldr	r3, [pc, #364]	; (124e8 <event_connection_prepare+0x11c8>)
   1237c:	9301      	str	r3, [sp, #4]
   1237e:	9300      	str	r3, [sp, #0]
   12380:	4b5a      	ldr	r3, [pc, #360]	; (124ec <event_connection_prepare+0x11cc>)
   12382:	f7ff b983 	b.w	1168c <event_connection_prepare+0x36c>
		conn->llcp_length.ack = conn->llcp_length.req;
   12386:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   1238a:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		_radio.conn_curr->pause_tx = 0;
   1238e:	f8d5 371c 	ldr.w	r3, [r5, #1820]	; 0x71c
		conn->procedure_expire = 0;
   12392:	2100      	movs	r1, #0
   12394:	f8a4 1044 	strh.w	r1, [r4, #68]	; 0x44
		_radio.conn_curr->pause_tx = 0;
   12398:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   1239c:	f361 02c3 	bfi	r2, r1, #3, #1
   123a0:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		conn->max_rx_octets = conn->llcp_length.rx_octets;
   123a4:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
   123a8:	8623      	strh	r3, [r4, #48]	; 0x30
		conn->max_rx_time = conn->llcp_length.rx_time;
   123aa:	f8b4 30f0 	ldrh.w	r3, [r4, #240]	; 0xf0
   123ae:	86e3      	strh	r3, [r4, #54]	; 0x36
		free_count_conn = mem_free_count_get(_radio.conn_free);
   123b0:	f8d5 0714 	ldr.w	r0, [r5, #1812]	; 0x714
   123b4:	f7f9 fa42 	bl	b83c <mem_free_count_get>
		if (_radio.advertiser.conn) {
   123b8:	f8d5 3638 	ldr.w	r3, [r5, #1592]	; 0x638
   123bc:	b10b      	cbz	r3, 123c2 <event_connection_prepare+0x10a2>
			free_count_conn++;
   123be:	3001      	adds	r0, #1
   123c0:	b280      	uxth	r0, r0
		if (_radio.scanner.conn) {
   123c2:	f8d5 3674 	ldr.w	r3, [r5, #1652]	; 0x674
   123c6:	b10b      	cbz	r3, 123cc <event_connection_prepare+0x10ac>
			free_count_conn++;
   123c8:	3001      	adds	r0, #1
   123ca:	b280      	uxth	r0, r0
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
   123cc:	8e27      	ldrh	r7, [r4, #48]	; 0x30
		if (((free_count_conn + 1) == _radio.connection_count) ||
   123ce:	f895 3718 	ldrb.w	r3, [r5, #1816]	; 0x718
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
   123d2:	370e      	adds	r7, #14
		if (((free_count_conn + 1) == _radio.connection_count) ||
   123d4:	3001      	adds	r0, #1
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
   123d6:	f027 0703 	bic.w	r7, r7, #3
		if (((free_count_conn + 1) == _radio.connection_count) ||
   123da:	4298      	cmp	r0, r3
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
   123dc:	b2bf      	uxth	r7, r7
		if (((free_count_conn + 1) == _radio.connection_count) ||
   123de:	d054      	beq.n	1248a <event_connection_prepare+0x116a>
   123e0:	f8b5 3740 	ldrh.w	r3, [r5, #1856]	; 0x740
   123e4:	42bb      	cmp	r3, r7
   123e6:	d350      	bcc.n	1248a <event_connection_prepare+0x116a>
		node_rx = packet_rx_reserve_get(2);
   123e8:	2002      	movs	r0, #2
   123ea:	f7fc f8ff 	bl	e5ec <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
   123ee:	2800      	cmp	r0, #0
   123f0:	d157      	bne.n	124a2 <event_connection_prepare+0x1182>
   123f2:	4b3d      	ldr	r3, [pc, #244]	; (124e8 <event_connection_prepare+0x11c8>)
   123f4:	9301      	str	r3, [sp, #4]
   123f6:	9300      	str	r3, [sp, #0]
   123f8:	4b3c      	ldr	r3, [pc, #240]	; (124ec <event_connection_prepare+0x11cc>)
   123fa:	f7ff bab3 	b.w	11964 <event_connection_prepare+0x644>
				if (_radio.packet_rx_acquire == 0) {
   123fe:	b90b      	cbnz	r3, 12404 <event_connection_prepare+0x10e4>
						_radio.packet_rx_count - 1;
   12400:	f895 3748 	ldrb.w	r3, [r5, #1864]	; 0x748
					_radio.packet_rx_acquire -= 1;
   12404:	3b01      	subs	r3, #1
   12406:	f885 374a 	strb.w	r3, [r5, #1866]	; 0x74a
				node_rx = _radio.packet_rx[
   1240a:	f895 274a 	ldrb.w	r2, [r5, #1866]	; 0x74a
   1240e:	f8d5 3744 	ldr.w	r3, [r5, #1860]	; 0x744
				mem_release(node_rx->hdr.onion.link,
   12412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   12416:	4649      	mov	r1, r9
   12418:	6818      	ldr	r0, [r3, #0]
   1241a:	f7f9 f9fa 	bl	b812 <mem_release>
				LL_ASSERT(_radio.link_rx_data_quota <
   1241e:	f895 2748 	ldrb.w	r2, [r5, #1864]	; 0x748
   12422:	f895 375c 	ldrb.w	r3, [r5, #1884]	; 0x75c
   12426:	3a01      	subs	r2, #1
   12428:	4293      	cmp	r3, r2
   1242a:	db08      	blt.n	1243e <event_connection_prepare+0x111e>
   1242c:	4b2e      	ldr	r3, [pc, #184]	; (124e8 <event_connection_prepare+0x11c8>)
   1242e:	9301      	str	r3, [sp, #4]
   12430:	9300      	str	r3, [sp, #0]
   12432:	4a2f      	ldr	r2, [pc, #188]	; (124f0 <event_connection_prepare+0x11d0>)
   12434:	4b2d      	ldr	r3, [pc, #180]	; (124ec <event_connection_prepare+0x11cc>)
   12436:	492f      	ldr	r1, [pc, #188]	; (124f4 <event_connection_prepare+0x11d4>)
   12438:	482f      	ldr	r0, [pc, #188]	; (124f8 <event_connection_prepare+0x11d8>)
   1243a:	f7fe bf81 	b.w	11340 <event_connection_prepare+0x20>
				_radio.link_rx_data_quota++;
   1243e:	3301      	adds	r3, #1
   12440:	f885 375c 	strb.w	r3, [r5, #1884]	; 0x75c
			while (_radio.packet_rx_acquire !=
   12444:	f895 374a 	ldrb.w	r3, [r5, #1866]	; 0x74a
				_radio.packet_rx_last) {
   12448:	f895 2749 	ldrb.w	r2, [r5, #1865]	; 0x749
			while (_radio.packet_rx_acquire !=
   1244c:	4293      	cmp	r3, r2
   1244e:	d1d6      	bne.n	123fe <event_connection_prepare+0x10de>
			if (conn->max_rx_octets < (PDU_AC_SIZE_MAX +
   12450:	8e23      	ldrh	r3, [r4, #48]	; 0x30
			_radio.packet_rx_data_count =
   12452:	f8b5 273e 	ldrh.w	r2, [r5, #1854]	; 0x73e
			if (conn->max_rx_octets < (PDU_AC_SIZE_MAX +
   12456:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
				_radio.packet_rx_data_size =
   1245a:	bf3a      	itte	cc
   1245c:	f44f 7386 	movcc.w	r3, #268	; 0x10c
   12460:	f8a5 3740 	strhcc.w	r3, [r5, #1856]	; 0x740
				_radio.packet_rx_data_size =
   12464:	f8a5 7740 	strhcs.w	r7, [r5, #1856]	; 0x740
				_radio.packet_rx_data_size;
   12468:	f8b5 1740 	ldrh.w	r1, [r5, #1856]	; 0x740
			_radio.packet_rx_data_count =
   1246c:	fbb2 f2f1 	udiv	r2, r2, r1
   12470:	b2d2      	uxtb	r2, r2
   12472:	f885 2742 	strb.w	r2, [r5, #1858]	; 0x742
			LL_ASSERT(_radio.packet_rx_data_count);
   12476:	b95a      	cbnz	r2, 12490 <event_connection_prepare+0x1170>
   12478:	4b1b      	ldr	r3, [pc, #108]	; (124e8 <event_connection_prepare+0x11c8>)
   1247a:	9301      	str	r3, [sp, #4]
   1247c:	9300      	str	r3, [sp, #0]
   1247e:	4a1c      	ldr	r2, [pc, #112]	; (124f0 <event_connection_prepare+0x11d0>)
   12480:	4b1a      	ldr	r3, [pc, #104]	; (124ec <event_connection_prepare+0x11cc>)
   12482:	491c      	ldr	r1, [pc, #112]	; (124f4 <event_connection_prepare+0x11d4>)
   12484:	481d      	ldr	r0, [pc, #116]	; (124fc <event_connection_prepare+0x11dc>)
   12486:	f7fe bf5b 	b.w	11340 <event_connection_prepare+0x20>
				mem_release(node_rx->hdr.onion.link,
   1248a:	f8df 9078 	ldr.w	r9, [pc, #120]	; 12504 <event_connection_prepare+0x11e4>
   1248e:	e7d9      	b.n	12444 <event_connection_prepare+0x1124>
			mem_init(_radio.pkt_rx_data_pool,
   12490:	f8d5 0734 	ldr.w	r0, [r5, #1844]	; 0x734
   12494:	4b1a      	ldr	r3, [pc, #104]	; (12500 <event_connection_prepare+0x11e0>)
   12496:	f7f9 f97b 	bl	b790 <mem_init>
			packet_rx_allocate(4);
   1249a:	2004      	movs	r0, #4
   1249c:	f7fc f91e 	bl	e6dc <packet_rx_allocate>
   124a0:	e7a2      	b.n	123e8 <event_connection_prepare+0x10c8>
		node_rx->hdr.handle = conn->handle;
   124a2:	8c23      	ldrh	r3, [r4, #32]
   124a4:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   124a6:	2301      	movs	r3, #1
   124a8:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   124aa:	7a03      	ldrb	r3, [r0, #8]
   124ac:	f043 0303 	orr.w	r3, r3, #3
   124b0:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len =
   124b2:	2309      	movs	r3, #9
   124b4:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   124b6:	2315      	movs	r3, #21
   124b8:	72c3      	strb	r3, [r0, #11]
		lr->max_rx_octets = conn->max_rx_octets;
   124ba:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   124bc:	8183      	strh	r3, [r0, #12]
		lr->max_tx_octets = conn->max_tx_octets;
   124be:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
   124c0:	8203      	strh	r3, [r0, #16]
		lr->max_rx_time = conn->max_rx_time;
   124c2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   124c4:	81c3      	strh	r3, [r0, #14]
		lr->max_tx_time = conn->max_tx_time;
   124c6:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   124c8:	8243      	strh	r3, [r0, #18]
		packet_rx_enqueue();
   124ca:	f7fd f969 	bl	f7a0 <packet_rx_enqueue>
   124ce:	e729      	b.n	12324 <event_connection_prepare+0x1004>
				mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
   124d0:	4902      	ldr	r1, [pc, #8]	; (124dc <event_connection_prepare+0x11bc>)
   124d2:	4638      	mov	r0, r7
   124d4:	f7f9 f99d 	bl	b812 <mem_release>
   124d8:	e40b      	b.n	11cf2 <event_connection_prepare+0x9d2>
   124da:	bf00      	nop
   124dc:	20001354 	.word	0x20001354
   124e0:	0001285d 	.word	0x0001285d
   124e4:	0001254d 	.word	0x0001254d
   124e8:	00023dae 	.word	0x00023dae
   124ec:	00025d8b 	.word	0x00025d8b
   124f0:	00022d76 	.word	0x00022d76
   124f4:	000272d8 	.word	0x000272d8
   124f8:	00025fdc 	.word	0x00025fdc
   124fc:	00026036 	.word	0x00026036
   12500:	20001328 	.word	0x20001328
   12504:	20001340 	.word	0x20001340

00012508 <event_master_prepare>:
	event_connection_prepare(ticks_at_expire, remainder, lazy, context);
   12508:	f7fe bf0a 	b.w	11320 <event_connection_prepare>

0001250c <event_slave_prepare>:
   1250c:	f7fe bf08 	b.w	11320 <event_connection_prepare>

00012510 <connection_configure>:
{
   12510:	b510      	push	{r4, lr}
   12512:	4604      	mov	r4, r0
	radio_reset();
   12514:	f006 f954 	bl	187c0 <radio_reset>
	radio_tx_power_set(0);
   12518:	2000      	movs	r0, #0
   1251a:	f006 f999 	bl	18850 <radio_tx_power_set>
	radio_isr_set(isr);
   1251e:	480a      	ldr	r0, [pc, #40]	; (12548 <connection_configure+0x38>)
   12520:	f006 f918 	bl	18754 <radio_isr_set>
	radio_aa_set(conn->access_addr);
   12524:	f104 0010 	add.w	r0, r4, #16
   12528:	f006 f9b0 	bl	1888c <radio_aa_set>
			     ((u32_t)conn->crc_init[1] << 8) |
   1252c:	7d63      	ldrb	r3, [r4, #21]
			    (((u32_t)conn->crc_init[2] << 16) |
   1252e:	7da1      	ldrb	r1, [r4, #22]
			     ((u32_t)conn->crc_init[1] << 8) |
   12530:	021b      	lsls	r3, r3, #8
			    (((u32_t)conn->crc_init[2] << 16) |
   12532:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			     ((u32_t)conn->crc_init[0])));
   12536:	7d21      	ldrb	r1, [r4, #20]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   12538:	f240 605b 	movw	r0, #1627	; 0x65b
   1253c:	4319      	orrs	r1, r3
}
   1253e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   12542:	f006 ba5d 	b.w	18a00 <radio_crc_configure>
   12546:	bf00      	nop
   12548:	00013c29 	.word	0x00013c29

0001254c <event_slave>:
{
   1254c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   12550:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
   12552:	4b71      	ldr	r3, [pc, #452]	; (12718 <event_slave+0x1cc>)
   12554:	7cda      	ldrb	r2, [r3, #19]
{
   12556:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
   12558:	f002 06ff 	and.w	r6, r2, #255	; 0xff
   1255c:	461d      	mov	r5, r3
   1255e:	b172      	cbz	r2, 1257e <event_slave+0x32>
   12560:	4b6e      	ldr	r3, [pc, #440]	; (1271c <event_slave+0x1d0>)
   12562:	9301      	str	r3, [sp, #4]
   12564:	9300      	str	r3, [sp, #0]
   12566:	4a6e      	ldr	r2, [pc, #440]	; (12720 <event_slave+0x1d4>)
   12568:	4b6e      	ldr	r3, [pc, #440]	; (12724 <event_slave+0x1d8>)
   1256a:	496f      	ldr	r1, [pc, #444]	; (12728 <event_slave+0x1dc>)
   1256c:	486f      	ldr	r0, [pc, #444]	; (1272c <event_slave+0x1e0>)
	LL_ASSERT(_radio.ticker_id_prepare ==
   1256e:	f7ef fe91 	bl	2294 <printk>
   12572:	4040      	eors	r0, r0
   12574:	f380 8811 	msr	BASEPRI, r0
   12578:	f04f 0004 	mov.w	r0, #4
   1257c:	df02      	svc	2
   1257e:	7c1b      	ldrb	r3, [r3, #16]
   12580:	8c22      	ldrh	r2, [r4, #32]
   12582:	b2db      	uxtb	r3, r3
   12584:	3207      	adds	r2, #7
   12586:	4293      	cmp	r3, r2
   12588:	d007      	beq.n	1259a <event_slave+0x4e>
   1258a:	4b64      	ldr	r3, [pc, #400]	; (1271c <event_slave+0x1d0>)
   1258c:	9301      	str	r3, [sp, #4]
   1258e:	9300      	str	r3, [sp, #0]
   12590:	4a63      	ldr	r2, [pc, #396]	; (12720 <event_slave+0x1d4>)
   12592:	4b64      	ldr	r3, [pc, #400]	; (12724 <event_slave+0x1d8>)
   12594:	4964      	ldr	r1, [pc, #400]	; (12728 <event_slave+0x1dc>)
   12596:	4866      	ldr	r0, [pc, #408]	; (12730 <event_slave+0x1e4>)
   12598:	e7e9      	b.n	1256e <event_slave+0x22>
	_radio.packet_counter = 0;
   1259a:	f885 6720 	strb.w	r6, [r5, #1824]	; 0x720
	_radio.crc_expire = 0;
   1259e:	f885 6721 	strb.w	r6, [r5, #1825]	; 0x721
	_radio.role = ROLE_SLAVE;
   125a2:	2203      	movs	r2, #3
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
   125a4:	b2db      	uxtb	r3, r3
	_radio.role = ROLE_SLAVE;
   125a6:	74ea      	strb	r2, [r5, #19]
	_radio.ticker_id_prepare = 0;
   125a8:	742e      	strb	r6, [r5, #16]
	_radio.ticker_id_event =
   125aa:	746b      	strb	r3, [r5, #17]
	conn->latency_event = conn->latency_prepare;
   125ac:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
   125ae:	f8c5 471c 	str.w	r4, [r5, #1820]	; 0x71c
	_radio.state = STATE_RX;
   125b2:	2201      	movs	r2, #1
	conn->latency_event = conn->latency_prepare;
   125b4:	8563      	strh	r3, [r4, #42]	; 0x2a
	_radio.ticks_anchor = ticks_at_expire;
   125b6:	60a8      	str	r0, [r5, #8]
	conn->latency_prepare = 0;
   125b8:	8526      	strh	r6, [r4, #40]	; 0x28
	connection_configure(conn);
   125ba:	4620      	mov	r0, r4
	_radio.state = STATE_RX;
   125bc:	752a      	strb	r2, [r5, #20]
	connection_configure(conn);
   125be:	f7ff ffa7 	bl	12510 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
   125c2:	2096      	movs	r0, #150	; 0x96
   125c4:	f006 fad8 	bl	18b78 <radio_tmr_tifs_set>
				     conn->phy_flags);
   125c8:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
	radio_switch_complete_and_tx(conn->phy_rx, 0, conn->phy_tx,
   125cc:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   125d0:	09d3      	lsrs	r3, r2, #7
   125d2:	4631      	mov	r1, r6
   125d4:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   125d8:	f000 0007 	and.w	r0, r0, #7
   125dc:	f006 fa3a 	bl	18a54 <radio_switch_complete_and_tx>
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);
   125e0:	f895 2749 	ldrb.w	r2, [r5, #1865]	; 0x749
   125e4:	f8d5 3744 	ldr.w	r3, [r5, #1860]	; 0x744
   125e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
	rx_packet_set(conn, (void *)
   125ec:	4620      	mov	r0, r4
   125ee:	3108      	adds	r1, #8
   125f0:	f7fc fb5a 	bl	eca8 <rx_packet_set>
	if (conn->data_chan_sel) {
   125f4:	7f63      	ldrb	r3, [r4, #29]
   125f6:	f013 0f40 	tst.w	r3, #64	; 0x40
   125fa:	f104 0217 	add.w	r2, r4, #23
   125fe:	d05a      	beq.n	126b6 <event_slave+0x16a>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
   12600:	8c60      	ldrh	r0, [r4, #34]	; 0x22
   12602:	8be1      	ldrh	r1, [r4, #30]
   12604:	3801      	subs	r0, #1
   12606:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1260a:	b280      	uxth	r0, r0
   1260c:	f7fe fd74 	bl	110f8 <chan_sel_2>
	chan_set(data_chan_use);
   12610:	f7fc fba2 	bl	ed58 <chan_set>
	conn->slave.window_widening_event_us +=
   12614:	6e23      	ldr	r3, [r4, #96]	; 0x60
   12616:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   12618:	4413      	add	r3, r2
	conn->slave.window_widening_prepare_us = 0;
   1261a:	2200      	movs	r2, #0
   1261c:	65e2      	str	r2, [r4, #92]	; 0x5c
	    conn->slave.window_widening_max_us) {
   1261e:	6da2      	ldr	r2, [r4, #88]	; 0x58
	conn->slave.window_widening_event_us +=
   12620:	6623      	str	r3, [r4, #96]	; 0x60
	if (conn->slave.window_widening_event_us >
   12622:	4293      	cmp	r3, r2
		conn->slave.window_widening_event_us =
   12624:	bf88      	it	hi
   12626:	6622      	strhi	r2, [r4, #96]	; 0x60
	conn->slave.window_size_event_us +=
   12628:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   1262a:	6e62      	ldr	r2, [r4, #100]	; 0x64
	conn->slave.window_size_prepare_us = 0;
   1262c:	2600      	movs	r6, #0
	conn->slave.window_size_event_us +=
   1262e:	4413      	add	r3, r2
   12630:	66a3      	str	r3, [r4, #104]	; 0x68
	remainder_us = radio_tmr_start(0, ticks_at_expire +
   12632:	68ea      	ldr	r2, [r5, #12]
	conn->slave.window_size_prepare_us = 0;
   12634:	6666      	str	r6, [r4, #100]	; 0x64
	remainder_us = radio_tmr_start(0, ticks_at_expire +
   12636:	f107 0109 	add.w	r1, r7, #9
   1263a:	4630      	mov	r0, r6
   1263c:	f006 faa8 	bl	18b90 <radio_tmr_start>
   12640:	4680      	mov	r8, r0
	radio_tmr_aa_capture();
   12642:	f006 fb2f 	bl	18ca4 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
   12646:	4630      	mov	r0, r6
   12648:	f006 fb4e 	bl	18ce8 <radio_tmr_aa_save>
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
   1264c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
	       (conn->slave.window_widening_event_us << 1) +
   1264e:	6e20      	ldr	r0, [r4, #96]	; 0x60
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
   12650:	f103 0650 	add.w	r6, r3, #80	; 0x50
   12654:	eb06 0640 	add.w	r6, r6, r0, lsl #1
	hcto += radio_rx_ready_delay_get(conn->phy_rx, 1);
   12658:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   1265c:	2101      	movs	r1, #1
   1265e:	f000 0007 	and.w	r0, r0, #7
   12662:	f006 f974 	bl	1894e <radio_rx_ready_delay_get>
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
   12666:	4446      	add	r6, r8
	hcto += radio_rx_ready_delay_get(conn->phy_rx, 1);
   12668:	4406      	add	r6, r0
	hcto += addr_us_get(conn->phy_rx);
   1266a:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   1266e:	f000 0007 	and.w	r0, r0, #7
	switch (phy) {
   12672:	2802      	cmp	r0, #2
   12674:	d03f      	beq.n	126f6 <event_slave+0x1aa>
		return 40;
   12676:	2804      	cmp	r0, #4
   12678:	bf0c      	ite	eq
   1267a:	f44f 73bc 	moveq.w	r3, #376	; 0x178
   1267e:	2328      	movne	r3, #40	; 0x28
	hcto += radio_rx_chain_delay_get(conn->phy_rx, 1);
   12680:	2101      	movs	r1, #1
	hcto += addr_us_get(conn->phy_rx);
   12682:	441e      	add	r6, r3
	hcto += radio_rx_chain_delay_get(conn->phy_rx, 1);
   12684:	f006 f965 	bl	18952 <radio_rx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   12688:	4430      	add	r0, r6
   1268a:	f006 faed 	bl	18c68 <radio_tmr_hcto_configure>
	if (preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
   1268e:	f894 1020 	ldrb.w	r1, [r4, #32]
   12692:	3107      	adds	r1, #7
   12694:	463a      	mov	r2, r7
   12696:	b2c9      	uxtb	r1, r1
   12698:	4620      	mov	r0, r4
   1269a:	f7fd ff1f 	bl	104dc <preempt_calc>
   1269e:	4603      	mov	r3, r0
   126a0:	b358      	cbz	r0, 126fa <event_slave+0x1ae>
		_radio.state = STATE_STOP;
   126a2:	2304      	movs	r3, #4
   126a4:	752b      	strb	r3, [r5, #20]
		radio_disable();
   126a6:	f006 f96f 	bl	18988 <radio_disable>
	packet_tx_enqueue(2);
   126aa:	2002      	movs	r0, #2
}
   126ac:	b002      	add	sp, #8
   126ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	packet_tx_enqueue(2);
   126b2:	f7fd bbb9 	b.w	fe28 <packet_tx_enqueue>
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   126b6:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
   126b8:	7fa6      	ldrb	r6, [r4, #30]
   126ba:	fb01 6606 	mla	r6, r1, r6, r6
   126be:	7fe1      	ldrb	r1, [r4, #31]
   126c0:	2025      	movs	r0, #37	; 0x25
   126c2:	440e      	add	r6, r1
   126c4:	fb96 f1f0 	sdiv	r1, r6, r0
   126c8:	fb00 6611 	mls	r6, r0, r1, r6
   126cc:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
   126ce:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
   126d0:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
   126d2:	5c51      	ldrb	r1, [r2, r1]
   126d4:	f006 0607 	and.w	r6, r6, #7
   126d8:	fa41 f606 	asr.w	r6, r1, r6
   126dc:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
   126de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
   126e2:	d495      	bmi.n	12610 <event_slave+0xc4>
		chan_index = chan_next % chan_count;
   126e4:	fbb0 f1f3 	udiv	r1, r0, r3
   126e8:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
   126ec:	b2c9      	uxtb	r1, r1
   126ee:	4610      	mov	r0, r2
   126f0:	f7fb ff4a 	bl	e588 <chan_sel_remap>
   126f4:	e78c      	b.n	12610 <event_slave+0xc4>
		return 24;
   126f6:	2318      	movs	r3, #24
   126f8:	e7c2      	b.n	12680 <event_slave+0x134>
		ticker_status =
   126fa:	4a0e      	ldr	r2, [pc, #56]	; (12734 <event_slave+0x1e8>)
   126fc:	4601      	mov	r1, r0
   126fe:	f7fa f813 	bl	c728 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   12702:	f030 0302 	bics.w	r3, r0, #2
   12706:	d0d0      	beq.n	126aa <event_slave+0x15e>
   12708:	4b04      	ldr	r3, [pc, #16]	; (1271c <event_slave+0x1d0>)
   1270a:	9301      	str	r3, [sp, #4]
   1270c:	9300      	str	r3, [sp, #0]
   1270e:	4a04      	ldr	r2, [pc, #16]	; (12720 <event_slave+0x1d4>)
   12710:	4b04      	ldr	r3, [pc, #16]	; (12724 <event_slave+0x1d8>)
   12712:	4905      	ldr	r1, [pc, #20]	; (12728 <event_slave+0x1dc>)
   12714:	4808      	ldr	r0, [pc, #32]	; (12738 <event_slave+0x1ec>)
   12716:	e72a      	b.n	1256e <event_slave+0x22>
   12718:	20000bf0 	.word	0x20000bf0
   1271c:	00023dae 	.word	0x00023dae
   12720:	00022d76 	.word	0x00022d76
   12724:	00025ddd 	.word	0x00025ddd
   12728:	000272d8 	.word	0x000272d8
   1272c:	00026073 	.word	0x00026073
   12730:	00026199 	.word	0x00026199
   12734:	0000fb9d 	.word	0x0000fb9d
   12738:	00025f18 	.word	0x00025f18

0001273c <prepare_pdu_data_tx>:
	    conn->empty ||
   1273c:	f890 c0f8 	ldrb.w	ip, [r0, #248]	; 0xf8
	if (/* empty packet */
   12740:	f01c 0f80 	tst.w	ip, #128	; 0x80
{
   12744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12748:	4604      	mov	r4, r0
   1274a:	460e      	mov	r6, r1
	if (/* empty packet */
   1274c:	d109      	bne.n	12762 <prepare_pdu_data_tx+0x26>
	    !conn->pkt_tx_head ||
   1274e:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
	    conn->empty ||
   12752:	b131      	cbz	r1, 12762 <prepare_pdu_data_tx+0x26>
	    !conn->pkt_tx_head ||
   12754:	f01c 0f08 	tst.w	ip, #8
   12758:	f8d0 e140 	ldr.w	lr, [r0, #320]	; 0x140
   1275c:	d023      	beq.n	127a6 <prepare_pdu_data_tx+0x6a>
	    (conn->pause_tx && (conn->pkt_tx_head != conn->pkt_tx_ctrl))) {
   1275e:	4571      	cmp	r1, lr
   12760:	d021      	beq.n	127a6 <prepare_pdu_data_tx+0x6a>
	conn->empty = 1;
   12762:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   12766:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1276a:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_data_tx = (void *)radio_pkt_empty_get();
   1276e:	f006 f95d 	bl	18a2c <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   12772:	7803      	ldrb	r3, [r0, #0]
   12774:	2201      	movs	r2, #1
   12776:	f362 0301 	bfi	r3, r2, #0, #2
	pdu_data_tx->len = 0;
   1277a:	2200      	movs	r2, #0
   1277c:	7042      	strb	r2, [r0, #1]
	if (conn->pkt_tx_head) {
   1277e:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   12782:	7003      	strb	r3, [r0, #0]
   12784:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
   12786:	b15a      	cbz	r2, 127a0 <prepare_pdu_data_tx+0x64>
		pdu_data_tx->md = 1;
   12788:	f043 0310 	orr.w	r3, r3, #16
		pdu_data_tx->md = 0;
   1278c:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->rfu = 0;
   1278e:	7803      	ldrb	r3, [r0, #0]
   12790:	f36f 1347 	bfc	r3, #5, #3
   12794:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->resv = 0;
   12796:	2300      	movs	r3, #0
   12798:	7083      	strb	r3, [r0, #2]
	*pdu_data_tx = _pdu_data_tx;
   1279a:	6030      	str	r0, [r6, #0]
   1279c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pdu_data_tx->md = 0;
   127a0:	f362 1304 	bfi	r3, r2, #4, #1
   127a4:	e7f2      	b.n	1278c <prepare_pdu_data_tx+0x50>
					conn->packet_tx_head_offset);
   127a6:	f894 2151 	ldrb.w	r2, [r4, #337]	; 0x151
		if (!conn->packet_tx_head_len) {
   127aa:	f894 3150 	ldrb.w	r3, [r4, #336]	; 0x150
		_pdu_data_tx = (void *)(conn->pkt_tx_head->pdu_data +
   127ae:	1d0d      	adds	r5, r1, #4
   127b0:	18a8      	adds	r0, r5, r2
		if (!conn->packet_tx_head_len) {
   127b2:	b913      	cbnz	r3, 127ba <prepare_pdu_data_tx+0x7e>
			conn->packet_tx_head_len = _pdu_data_tx->len;
   127b4:	7843      	ldrb	r3, [r0, #1]
   127b6:	f884 3150 	strb.w	r3, [r4, #336]	; 0x150
		if (conn->packet_tx_head_offset) {
   127ba:	b122      	cbz	r2, 127c6 <prepare_pdu_data_tx+0x8a>
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   127bc:	5cab      	ldrb	r3, [r5, r2]
   127be:	2701      	movs	r7, #1
   127c0:	f367 0301 	bfi	r3, r7, #0, #2
   127c4:	54ab      	strb	r3, [r5, r2]
		_pdu_data_tx->len = conn->packet_tx_head_len -
   127c6:	f894 7150 	ldrb.w	r7, [r4, #336]	; 0x150
		switch (conn->phy_tx_time) {
   127ca:	f894 8039 	ldrb.w	r8, [r4, #57]	; 0x39
		_pdu_data_tx->len = conn->packet_tx_head_len -
   127ce:	1abf      	subs	r7, r7, r2
   127d0:	b2ff      	uxtb	r7, r7
   127d2:	7047      	strb	r7, [r0, #1]
		_pdu_data_tx->md = 0;
   127d4:	5cab      	ldrb	r3, [r5, r2]
   127d6:	f36f 1304 	bfc	r3, #4, #1
   127da:	54ab      	strb	r3, [r5, r2]
		switch (conn->phy_tx_time) {
   127dc:	f008 0807 	and.w	r8, r8, #7
   127e0:	f1b8 0f02 	cmp.w	r8, #2
   127e4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   127e6:	d029      	beq.n	1283c <prepare_pdu_data_tx+0x100>
   127e8:	f1b8 0f04 	cmp.w	r8, #4
   127ec:	d029      	beq.n	12842 <prepare_pdu_data_tx+0x106>
			max_tx_octets = (conn->max_tx_time >> 3) - 10;
   127ee:	08db      	lsrs	r3, r3, #3
   127f0:	3b0a      	subs	r3, #10
				max_tx_octets = ((conn->max_tx_time - 430) >>
   127f2:	b29b      	uxth	r3, r3
		if (conn->enc_tx) {
   127f4:	f01c 0f20 	tst.w	ip, #32
			max_tx_octets -= 4;
   127f8:	bf18      	it	ne
   127fa:	3b04      	subne	r3, #4
   127fc:	f8b4 c02e 	ldrh.w	ip, [r4, #46]	; 0x2e
   12800:	bf18      	it	ne
   12802:	b29b      	uxthne	r3, r3
   12804:	4563      	cmp	r3, ip
   12806:	bf28      	it	cs
   12808:	4663      	movcs	r3, ip
		if (_pdu_data_tx->len > max_tx_octets) {
   1280a:	429f      	cmp	r7, r3
			_pdu_data_tx->len = max_tx_octets;
   1280c:	bf81      	itttt	hi
   1280e:	7043      	strbhi	r3, [r0, #1]
			_pdu_data_tx->md = 1;
   12810:	5cab      	ldrbhi	r3, [r5, r2]
   12812:	f043 0310 	orrhi.w	r3, r3, #16
   12816:	54ab      	strbhi	r3, [r5, r2]
		if (conn->pkt_tx_head->next) {
   12818:	680b      	ldr	r3, [r1, #0]
   1281a:	b11b      	cbz	r3, 12824 <prepare_pdu_data_tx+0xe8>
			_pdu_data_tx->md = 1;
   1281c:	5cab      	ldrb	r3, [r5, r2]
   1281e:	f043 0310 	orr.w	r3, r3, #16
   12822:	54ab      	strb	r3, [r5, r2]
		if (!conn->pkt_tx_ctrl &&
   12824:	f1be 0f00 	cmp.w	lr, #0
   12828:	d1b1      	bne.n	1278e <prepare_pdu_data_tx+0x52>
   1282a:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   1282e:	4299      	cmp	r1, r3
			conn->pkt_tx_ctrl = conn->pkt_tx_ctrl_last =
   12830:	bf1c      	itt	ne
   12832:	f8c4 1144 	strne.w	r1, [r4, #324]	; 0x144
   12836:	f8c4 1140 	strne.w	r1, [r4, #320]	; 0x140
   1283a:	e7a8      	b.n	1278e <prepare_pdu_data_tx+0x52>
			max_tx_octets = (conn->max_tx_time >> 2) - 11;
   1283c:	089b      	lsrs	r3, r3, #2
   1283e:	3b0b      	subs	r3, #11
   12840:	e7d7      	b.n	127f2 <prepare_pdu_data_tx+0xb6>
			if (conn->phy_flags & 0x01) {
   12842:	f894 8038 	ldrb.w	r8, [r4, #56]	; 0x38
   12846:	ea5f 18d8 	movs.w	r8, r8, lsr #7
				max_tx_octets = ((conn->max_tx_time - 592) >>
   1284a:	bf15      	itete	ne
   1284c:	f5a3 7314 	subne.w	r3, r3, #592	; 0x250
				max_tx_octets = ((conn->max_tx_time - 430) >>
   12850:	f5a3 73d7 	subeq.w	r3, r3, #430	; 0x1ae
				max_tx_octets = ((conn->max_tx_time - 592) >>
   12854:	119b      	asrne	r3, r3, #6
				max_tx_octets = ((conn->max_tx_time - 430) >>
   12856:	111b      	asreq	r3, r3, #4
   12858:	3b02      	subs	r3, #2
   1285a:	e7ca      	b.n	127f2 <prepare_pdu_data_tx+0xb6>

0001285c <event_master>:
{
   1285c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1285e:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
   12860:	4b56      	ldr	r3, [pc, #344]	; (129bc <event_master+0x160>)
   12862:	7cd9      	ldrb	r1, [r3, #19]
{
   12864:	b085      	sub	sp, #20
   12866:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
   12868:	f001 02ff 	and.w	r2, r1, #255	; 0xff
   1286c:	461d      	mov	r5, r3
   1286e:	b171      	cbz	r1, 1288e <event_master+0x32>
   12870:	4b53      	ldr	r3, [pc, #332]	; (129c0 <event_master+0x164>)
   12872:	9301      	str	r3, [sp, #4]
   12874:	9300      	str	r3, [sp, #0]
   12876:	4a53      	ldr	r2, [pc, #332]	; (129c4 <event_master+0x168>)
   12878:	4b53      	ldr	r3, [pc, #332]	; (129c8 <event_master+0x16c>)
   1287a:	4954      	ldr	r1, [pc, #336]	; (129cc <event_master+0x170>)
   1287c:	4854      	ldr	r0, [pc, #336]	; (129d0 <event_master+0x174>)
	LL_ASSERT(_radio.ticker_id_prepare ==
   1287e:	f7ef fd09 	bl	2294 <printk>
   12882:	4040      	eors	r0, r0
   12884:	f380 8811 	msr	BASEPRI, r0
   12888:	f04f 0004 	mov.w	r0, #4
   1288c:	df02      	svc	2
   1288e:	7c1b      	ldrb	r3, [r3, #16]
   12890:	8c21      	ldrh	r1, [r4, #32]
   12892:	b2db      	uxtb	r3, r3
   12894:	3107      	adds	r1, #7
   12896:	428b      	cmp	r3, r1
   12898:	d007      	beq.n	128aa <event_master+0x4e>
   1289a:	4b49      	ldr	r3, [pc, #292]	; (129c0 <event_master+0x164>)
   1289c:	9301      	str	r3, [sp, #4]
   1289e:	9300      	str	r3, [sp, #0]
   128a0:	4a48      	ldr	r2, [pc, #288]	; (129c4 <event_master+0x168>)
   128a2:	4b49      	ldr	r3, [pc, #292]	; (129c8 <event_master+0x16c>)
   128a4:	4949      	ldr	r1, [pc, #292]	; (129cc <event_master+0x170>)
   128a6:	484b      	ldr	r0, [pc, #300]	; (129d4 <event_master+0x178>)
   128a8:	e7e9      	b.n	1287e <event_master+0x22>
	_radio.packet_counter = 0;
   128aa:	f885 2720 	strb.w	r2, [r5, #1824]	; 0x720
	_radio.crc_expire = 0;
   128ae:	f885 2721 	strb.w	r2, [r5, #1825]	; 0x721
	_radio.role = ROLE_MASTER;
   128b2:	2104      	movs	r1, #4
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
   128b4:	b2db      	uxtb	r3, r3
	_radio.role = ROLE_MASTER;
   128b6:	74e9      	strb	r1, [r5, #19]
	_radio.ticker_id_prepare = 0;
   128b8:	742a      	strb	r2, [r5, #16]
	_radio.ticker_id_event =
   128ba:	746b      	strb	r3, [r5, #17]
	conn->latency_event = conn->latency_prepare;
   128bc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
   128be:	f8c5 471c 	str.w	r4, [r5, #1820]	; 0x71c
	_radio.state = STATE_TX;
   128c2:	2002      	movs	r0, #2
	conn->latency_event = conn->latency_prepare;
   128c4:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;
   128c6:	8522      	strh	r2, [r4, #40]	; 0x28
	_radio.state = STATE_TX;
   128c8:	7528      	strb	r0, [r5, #20]
	_radio.ticks_anchor = ticks_at_expire;
   128ca:	60af      	str	r7, [r5, #8]
	packet_tx_enqueue(2);
   128cc:	f7fd faac 	bl	fe28 <packet_tx_enqueue>
	prepare_pdu_data_tx(conn, &pdu_data_tx);
   128d0:	a903      	add	r1, sp, #12
   128d2:	4620      	mov	r0, r4
   128d4:	f7ff ff32 	bl	1273c <prepare_pdu_data_tx>
	pdu_data_tx->sn = conn->sn;
   128d8:	9903      	ldr	r1, [sp, #12]
   128da:	f894 20f8 	ldrb.w	r2, [r4, #248]	; 0xf8
   128de:	780b      	ldrb	r3, [r1, #0]
   128e0:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = conn->nesn;
   128e4:	f3c2 0240 	ubfx	r2, r2, #1, #1
   128e8:	f362 0382 	bfi	r3, r2, #2, #1
   128ec:	700b      	strb	r3, [r1, #0]
	connection_configure(conn);
   128ee:	4620      	mov	r0, r4
   128f0:	f7ff fe0e 	bl	12510 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
   128f4:	2096      	movs	r0, #150	; 0x96
   128f6:	f006 f93f 	bl	18b78 <radio_tmr_tifs_set>
	radio_switch_complete_and_rx(conn->phy_rx);
   128fa:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   128fe:	f000 0007 	and.w	r0, r0, #7
   12902:	f006 f89b 	bl	18a3c <radio_switch_complete_and_rx>
	tx_packet_set(conn, pdu_data_tx);
   12906:	9903      	ldr	r1, [sp, #12]
   12908:	4620      	mov	r0, r4
   1290a:	f7fc f9f9 	bl	ed00 <tx_packet_set>
	if (conn->data_chan_sel) {
   1290e:	7f63      	ldrb	r3, [r4, #29]
   12910:	f013 0f40 	tst.w	r3, #64	; 0x40
   12914:	f104 0217 	add.w	r2, r4, #23
   12918:	d021      	beq.n	1295e <event_master+0x102>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
   1291a:	8c60      	ldrh	r0, [r4, #34]	; 0x22
   1291c:	8be1      	ldrh	r1, [r4, #30]
   1291e:	3801      	subs	r0, #1
   12920:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   12924:	b280      	uxth	r0, r0
   12926:	f7fe fbe7 	bl	110f8 <chan_sel_2>
	chan_set(data_chan_use);
   1292a:	f7fc fa15 	bl	ed58 <chan_set>
		remainder_us = radio_tmr_start(1,
   1292e:	68ea      	ldr	r2, [r5, #12]
   12930:	f107 0109 	add.w	r1, r7, #9
   12934:	2001      	movs	r0, #1
   12936:	f006 f92b 	bl	18b90 <radio_tmr_start>
		radio_tmr_end_capture();
   1293a:	f006 f9e7 	bl	18d0c <radio_tmr_end_capture>
	    preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
   1293e:	f894 1020 	ldrb.w	r1, [r4, #32]
   12942:	3107      	adds	r1, #7
   12944:	463a      	mov	r2, r7
   12946:	b2c9      	uxtb	r1, r1
   12948:	4620      	mov	r0, r4
   1294a:	f7fd fdc7 	bl	104dc <preempt_calc>
	if (0 !=
   1294e:	4603      	mov	r3, r0
   12950:	b328      	cbz	r0, 1299e <event_master+0x142>
		_radio.state = STATE_STOP;
   12952:	2304      	movs	r3, #4
   12954:	752b      	strb	r3, [r5, #20]
		radio_disable();
   12956:	f006 f817 	bl	18988 <radio_disable>
}
   1295a:	b005      	add	sp, #20
   1295c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   1295e:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
   12960:	7fa6      	ldrb	r6, [r4, #30]
   12962:	fb01 6606 	mla	r6, r1, r6, r6
   12966:	7fe1      	ldrb	r1, [r4, #31]
   12968:	2025      	movs	r0, #37	; 0x25
   1296a:	440e      	add	r6, r1
   1296c:	fb96 f1f0 	sdiv	r1, r6, r0
   12970:	fb00 6611 	mls	r6, r0, r1, r6
   12974:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
   12976:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
   12978:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
   1297a:	5c51      	ldrb	r1, [r2, r1]
   1297c:	f006 0607 	and.w	r6, r6, #7
   12980:	fa41 f606 	asr.w	r6, r1, r6
   12984:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
   12986:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
   1298a:	d4ce      	bmi.n	1292a <event_master+0xce>
		chan_index = chan_next % chan_count;
   1298c:	fbb0 f1f3 	udiv	r1, r0, r3
   12990:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
   12994:	b2c9      	uxtb	r1, r1
   12996:	4610      	mov	r0, r2
   12998:	f7fb fdf6 	bl	e588 <chan_sel_remap>
   1299c:	e7c5      	b.n	1292a <event_master+0xce>
		ticker_status =
   1299e:	4a0e      	ldr	r2, [pc, #56]	; (129d8 <event_master+0x17c>)
   129a0:	4601      	mov	r1, r0
   129a2:	f7f9 fec1 	bl	c728 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   129a6:	f030 0302 	bics.w	r3, r0, #2
   129aa:	d0d6      	beq.n	1295a <event_master+0xfe>
   129ac:	4b04      	ldr	r3, [pc, #16]	; (129c0 <event_master+0x164>)
   129ae:	9301      	str	r3, [sp, #4]
   129b0:	9300      	str	r3, [sp, #0]
   129b2:	4a04      	ldr	r2, [pc, #16]	; (129c4 <event_master+0x168>)
   129b4:	4b04      	ldr	r3, [pc, #16]	; (129c8 <event_master+0x16c>)
   129b6:	4905      	ldr	r1, [pc, #20]	; (129cc <event_master+0x170>)
   129b8:	4808      	ldr	r0, [pc, #32]	; (129dc <event_master+0x180>)
   129ba:	e760      	b.n	1287e <event_master+0x22>
   129bc:	20000bf0 	.word	0x20000bf0
   129c0:	00023dae 	.word	0x00023dae
   129c4:	00022d76 	.word	0x00022d76
   129c8:	00025de9 	.word	0x00025de9
   129cc:	000272d8 	.word	0x000272d8
   129d0:	00026073 	.word	0x00026073
   129d4:	00026199 	.word	0x00026199
   129d8:	0000fb9d 	.word	0x0000fb9d
   129dc:	00025f18 	.word	0x00025f18

000129e0 <isr_rx_conn_pkt_ctrl>:
{
   129e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (pdu_data_rx->llctrl.opcode) {
   129e4:	7ac7      	ldrb	r7, [r0, #11]
{
   129e6:	4604      	mov	r4, r0
   129e8:	460d      	mov	r5, r1
	pdu_data_rx = (void *)node_rx->pdu_data;
   129ea:	f100 0608 	add.w	r6, r0, #8
	switch (pdu_data_rx->llctrl.opcode) {
   129ee:	2f19      	cmp	r7, #25
   129f0:	f201 80e4 	bhi.w	13bbc <isr_rx_conn_pkt_ctrl+0x11dc>
   129f4:	e8df f017 	tbh	[pc, r7, lsl #1]
   129f8:	0081001a 	.word	0x0081001a
   129fc:	00cc00bd 	.word	0x00cc00bd
   12a00:	012200fa 	.word	0x012200fa
   12a04:	05850154 	.word	0x05850154
   12a08:	01c40190 	.word	0x01c40190
   12a0c:	021c01f2 	.word	0x021c01f2
   12a10:	02b6024d 	.word	0x02b6024d
   12a14:	02ce01a6 	.word	0x02ce01a6
   12a18:	04a40421 	.word	0x04a40421
   12a1c:	057a0560 	.word	0x057a0560
   12a20:	06480648 	.word	0x06480648
   12a24:	07ee0721 	.word	0x07ee0721
   12a28:	08af0825 	.word	0x08af0825
		if (!_radio.conn_curr->role ||
   12a2c:	4ecb      	ldr	r6, [pc, #812]	; (12d5c <isr_rx_conn_pkt_ctrl+0x37c>)
   12a2e:	f8d6 571c 	ldr.w	r5, [r6, #1820]	; 0x71c
   12a32:	f995 301d 	ldrsb.w	r3, [r5, #29]
   12a36:	2b00      	cmp	r3, #0
   12a38:	f281 80c0 	bge.w	13bbc <isr_rx_conn_pkt_ctrl+0x11dc>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND,
   12a3c:	7a41      	ldrb	r1, [r0, #9]
   12a3e:	2000      	movs	r0, #0
   12a40:	f7fb fd76 	bl	e530 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
   12a44:	2800      	cmp	r0, #0
   12a46:	f001 80b9 	beq.w	13bbc <isr_rx_conn_pkt_ctrl+0x11dc>
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
   12a4a:	f8b4 1015 	ldrh.w	r1, [r4, #21]
	      conn->event_counter) & 0xFFFF) > 0x7FFF) {
   12a4e:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
   12a50:	1acb      	subs	r3, r1, r3
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
   12a52:	041b      	lsls	r3, r3, #16
   12a54:	f101 80c8 	bmi.w	13be8 <isr_rx_conn_pkt_ctrl+0x1208>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   12a58:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   12a5c:	f895 2075 	ldrb.w	r2, [r5, #117]	; 0x75
   12a60:	429a      	cmp	r2, r3
   12a62:	d007      	beq.n	12a74 <isr_rx_conn_pkt_ctrl+0x94>
   12a64:	4bbe      	ldr	r3, [pc, #760]	; (12d60 <isr_rx_conn_pkt_ctrl+0x380>)
   12a66:	9301      	str	r3, [sp, #4]
   12a68:	9300      	str	r3, [sp, #0]
   12a6a:	4bbe      	ldr	r3, [pc, #760]	; (12d64 <isr_rx_conn_pkt_ctrl+0x384>)
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   12a6c:	4abe      	ldr	r2, [pc, #760]	; (12d68 <isr_rx_conn_pkt_ctrl+0x388>)
   12a6e:	49bf      	ldr	r1, [pc, #764]	; (12d6c <isr_rx_conn_pkt_ctrl+0x38c>)
   12a70:	48bf      	ldr	r0, [pc, #764]	; (12d70 <isr_rx_conn_pkt_ctrl+0x390>)
   12a72:	e0f7      	b.n	12c64 <isr_rx_conn_pkt_ctrl+0x284>
	if (_radio.conn_upd == 0) {
   12a74:	f8d6 2790 	ldr.w	r2, [r6, #1936]	; 0x790
   12a78:	b90a      	cbnz	r2, 12a7e <isr_rx_conn_pkt_ctrl+0x9e>
		_radio.conn_upd = conn;
   12a7a:	f8c6 5790 	str.w	r5, [r6, #1936]	; 0x790
	conn->llcp.conn_upd.win_size =
   12a7e:	7b22      	ldrb	r2, [r4, #12]
   12a80:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
		pdu_data_rx->llctrl.conn_update_ind.win_offset * 1250;
   12a84:	f8b4 000d 	ldrh.w	r0, [r4, #13]
   12a88:	f240 42e2 	movw	r2, #1250	; 0x4e2
   12a8c:	4342      	muls	r2, r0
	conn->llcp.conn_upd.win_offset_us =
   12a8e:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
		pdu_data_rx->llctrl.conn_update_ind.interval;
   12a92:	7c20      	ldrb	r0, [r4, #16]
   12a94:	7be2      	ldrb	r2, [r4, #15]
   12a96:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.interval =
   12a9a:	f8a5 207a 	strh.w	r2, [r5, #122]	; 0x7a
		pdu_data_rx->llctrl.conn_update_ind.latency;
   12a9e:	7ca0      	ldrb	r0, [r4, #18]
   12aa0:	7c62      	ldrb	r2, [r4, #17]
   12aa2:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.latency =
   12aa6:	f8a5 207c 	strh.w	r2, [r5, #124]	; 0x7c
		pdu_data_rx->llctrl.conn_update_ind.timeout;
   12aaa:	7ce2      	ldrb	r2, [r4, #19]
   12aac:	7d20      	ldrb	r0, [r4, #20]
	conn->llcp.conn_upd.instant =
   12aae:	f8a5 1080 	strh.w	r1, [r5, #128]	; 0x80
		pdu_data_rx->llctrl.conn_update_ind.timeout;
   12ab2:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.timeout =
   12ab6:	f8a5 207e 	strh.w	r2, [r5, #126]	; 0x7e
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
   12aba:	f895 2078 	ldrb.w	r2, [r5, #120]	; 0x78
	conn->llcp.conn_upd.is_internal = 0;
   12abe:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
   12ac2:	f36f 0282 	bfc	r2, #2, #1
	conn->llcp_ack--;
   12ac6:	3b01      	subs	r3, #1
	conn->llcp.conn_upd.is_internal = 0;
   12ac8:	f885 2078 	strb.w	r2, [r5, #120]	; 0x78
	conn->llcp_type = LLCP_CONN_UPD;
   12acc:	2201      	movs	r2, #1
   12ace:	f885 2076 	strb.w	r2, [r5, #118]	; 0x76
	conn->llcp_ack--;
   12ad2:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   12ad6:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
   12ada:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
   12ade:	4293      	cmp	r3, r2
   12ae0:	d007      	beq.n	12af2 <isr_rx_conn_pkt_ctrl+0x112>
	    (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT)) {
   12ae2:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   12ae6:	f003 0307 	and.w	r3, r3, #7
   12aea:	2b04      	cmp	r3, #4
   12aec:	d101      	bne.n	12af2 <isr_rx_conn_pkt_ctrl+0x112>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   12aee:	f885 20c1 	strb.w	r2, [r5, #193]	; 0xc1
			_radio.conn_curr->procedure_expire = 0;
   12af2:	2000      	movs	r0, #0
   12af4:	f8a5 0044 	strh.w	r0, [r5, #68]	; 0x44
   12af8:	e038      	b.n	12b6c <isr_rx_conn_pkt_ctrl+0x18c>
		if (!_radio.conn_curr->role ||
   12afa:	4b98      	ldr	r3, [pc, #608]	; (12d5c <isr_rx_conn_pkt_ctrl+0x37c>)
   12afc:	f8d3 571c 	ldr.w	r5, [r3, #1820]	; 0x71c
   12b00:	f995 301d 	ldrsb.w	r3, [r5, #29]
   12b04:	2b00      	cmp	r3, #0
   12b06:	f281 8059 	bge.w	13bbc <isr_rx_conn_pkt_ctrl+0x11dc>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CHAN_MAP_IND,
   12b0a:	7a41      	ldrb	r1, [r0, #9]
   12b0c:	2001      	movs	r0, #1
   12b0e:	f7fb fd0f 	bl	e530 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
   12b12:	2800      	cmp	r0, #0
   12b14:	f001 8052 	beq.w	13bbc <isr_rx_conn_pkt_ctrl+0x11dc>
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
   12b18:	f8b4 3011 	ldrh.w	r3, [r4, #17]
	      conn->event_counter) & 0xffff) > 0x7fff) {
   12b1c:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
   12b1e:	1a9b      	subs	r3, r3, r2
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
   12b20:	041f      	lsls	r7, r3, #16
   12b22:	f101 8061 	bmi.w	13be8 <isr_rx_conn_pkt_ctrl+0x1208>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   12b26:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
   12b2a:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
   12b2e:	429a      	cmp	r2, r3
   12b30:	d004      	beq.n	12b3c <isr_rx_conn_pkt_ctrl+0x15c>
   12b32:	4b8b      	ldr	r3, [pc, #556]	; (12d60 <isr_rx_conn_pkt_ctrl+0x380>)
   12b34:	9301      	str	r3, [sp, #4]
   12b36:	9300      	str	r3, [sp, #0]
   12b38:	4b8e      	ldr	r3, [pc, #568]	; (12d74 <isr_rx_conn_pkt_ctrl+0x394>)
   12b3a:	e797      	b.n	12a6c <isr_rx_conn_pkt_ctrl+0x8c>
	memcpy(&conn->llcp.chan_map.chm[0],
   12b3c:	2205      	movs	r2, #5
   12b3e:	f104 010c 	add.w	r1, r4, #12
   12b42:	f105 0079 	add.w	r0, r5, #121	; 0x79
   12b46:	f7ed fe24 	bl	792 <memcpy>
		pdu_data_rx->llctrl.chan_map_ind.instant;
   12b4a:	7c63      	ldrb	r3, [r4, #17]
   12b4c:	7ca2      	ldrb	r2, [r4, #18]
   12b4e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp.chan_map.instant =
   12b52:	f8a5 307e 	strh.w	r3, [r5, #126]	; 0x7e
	conn->llcp_type = LLCP_CHAN_MAP;
   12b56:	2302      	movs	r3, #2
   12b58:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
	conn->llcp_ack--;
   12b5c:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
	conn->llcp.chan_map.initiate = 0;
   12b60:	2000      	movs	r0, #0
	conn->llcp_ack--;
   12b62:	3b01      	subs	r3, #1
	conn->llcp.chan_map.initiate = 0;
   12b64:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
	conn->llcp_ack--;
   12b68:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
}
   12b6c:	b003      	add	sp, #12
   12b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_TERMINATE_IND,
   12b72:	7a41      	ldrb	r1, [r0, #9]
   12b74:	2002      	movs	r0, #2
   12b76:	f7fb fcdb 	bl	e530 <pdu_len_cmp>
   12b7a:	2800      	cmp	r0, #0
   12b7c:	f001 801e 	beq.w	13bbc <isr_rx_conn_pkt_ctrl+0x11dc>
		_radio.conn_curr->llcp_terminate.reason_peer =
   12b80:	4b76      	ldr	r3, [pc, #472]	; (12d5c <isr_rx_conn_pkt_ctrl+0x37c>)
   12b82:	7b22      	ldrb	r2, [r4, #12]
   12b84:	f8d3 371c 	ldr.w	r3, [r3, #1820]	; 0x71c
   12b88:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	u8_t nack = 0;
   12b8c:	2000      	movs	r0, #0
	return nack;
   12b8e:	e7ed      	b.n	12b6c <isr_rx_conn_pkt_ctrl+0x18c>
		if (!_radio.conn_curr->role ||
   12b90:	4e72      	ldr	r6, [pc, #456]	; (12d5c <isr_rx_conn_pkt_ctrl+0x37c>)
   12b92:	f8d6 871c 	ldr.w	r8, [r6, #1820]	; 0x71c
   12b96:	f998 301d 	ldrsb.w	r3, [r8, #29]
   12b9a:	2b00      	cmp	r3, #0
   12b9c:	f281 800e 	bge.w	13bbc <isr_rx_conn_pkt_ctrl+0x11dc>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_ENC_REQ,
   12ba0:	7a41      	ldrb	r1, [r0, #9]
   12ba2:	2003      	movs	r0, #3
   12ba4:	f7fb fcc4 	bl	e530 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
   12ba8:	2800      	cmp	r0, #0
   12baa:	f001 8007 	beq.w	13bbc <isr_rx_conn_pkt_ctrl+0x11dc>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
   12bae:	2208      	movs	r2, #8
   12bb0:	f104 0116 	add.w	r1, r4, #22
   12bb4:	f108 0094 	add.w	r0, r8, #148	; 0x94
   12bb8:	f7ed fdeb 	bl	792 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
   12bbc:	f8d6 071c 	ldr.w	r0, [r6, #1820]	; 0x71c
   12bc0:	2204      	movs	r2, #4
   12bc2:	f104 011e 	add.w	r1, r4, #30
   12bc6:	f500 7089 	add.w	r0, r0, #274	; 0x112
   12bca:	f7ed fde2 	bl	792 <memcpy>
		_radio.conn_curr->pause_rx = 1;
   12bce:	f8d6 371c 	ldr.w	r3, [r6, #1820]	; 0x71c
   12bd2:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   12bd6:	f042 0204 	orr.w	r2, r2, #4
   12bda:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
   12bde:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
   12be2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	*rx_enqueue = 1;
   12be6:	2301      	movs	r3, #1
   12be8:	702b      	strb	r3, [r5, #0]
   12bea:	e7cf      	b.n	12b8c <isr_rx_conn_pkt_ctrl+0x1ac>
		if (_radio.conn_curr->role ||
   12bec:	4d5b      	ldr	r5, [pc, #364]	; (12d5c <isr_rx_conn_pkt_ctrl+0x37c>)
   12bee:	f8d5 671c 	ldr.w	r6, [r5, #1820]	; 0x71c
   12bf2:	f996 301d 	ldrsb.w	r3, [r6, #29]
   12bf6:	2b00      	cmp	r3, #0
   12bf8:	f2c0 87e0 	blt.w	13bbc <isr_rx_conn_pkt_ctrl+0x11dc>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_ENC_RSP,
   12bfc:	7a41      	ldrb	r1, [r0, #9]
   12bfe:	2004      	movs	r0, #4
   12c00:	f7fb fc96 	bl	e530 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
   12c04:	2800      	cmp	r0, #0
   12c06:	f000 87d9 	beq.w	13bbc <isr_rx_conn_pkt_ctrl+0x11dc>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[8],
   12c0a:	2208      	movs	r2, #8
   12c0c:	f104 010c 	add.w	r1, r4, #12
   12c10:	f106 009c 	add.w	r0, r6, #156	; 0x9c
   12c14:	f7ed fdbd 	bl	792 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[4],
   12c18:	f8d5 071c 	ldr.w	r0, [r5, #1820]	; 0x71c
   12c1c:	2204      	movs	r2, #4
   12c1e:	f104 0114 	add.w	r1, r4, #20
   12c22:	f500 708b 	add.w	r0, r0, #278	; 0x116
   12c26:	f7ed fdb4 	bl	792 <memcpy>
		_radio.conn_curr->pause_rx = 1;
   12c2a:	f8d5 271c 	ldr.w	r2, [r5, #1820]	; 0x71c
   12c2e:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   12c32:	f043 0304 	orr.w	r3, r3, #4
   12c36:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
   12c3a:	e7a7      	b.n	12b8c <isr_rx_conn_pkt_ctrl+0x1ac>
		LL_ASSERT((_radio.conn_curr->llcp_req ==
   12c3c:	4b47      	ldr	r3, [pc, #284]	; (12d5c <isr_rx_conn_pkt_ctrl+0x37c>)
   12c3e:	f8d3 571c 	ldr.w	r5, [r3, #1820]	; 0x71c
   12c42:	f895 6075 	ldrb.w	r6, [r5, #117]	; 0x75
   12c46:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   12c4a:	42b3      	cmp	r3, r6
   12c4c:	d012      	beq.n	12c74 <isr_rx_conn_pkt_ctrl+0x294>
   12c4e:	f895 3076 	ldrb.w	r3, [r5, #118]	; 0x76
   12c52:	2b03      	cmp	r3, #3
   12c54:	d00e      	beq.n	12c74 <isr_rx_conn_pkt_ctrl+0x294>
			LL_ASSERT((_radio.conn_curr->llcp_req ==
   12c56:	4b42      	ldr	r3, [pc, #264]	; (12d60 <isr_rx_conn_pkt_ctrl+0x380>)
   12c58:	9301      	str	r3, [sp, #4]
   12c5a:	9300      	str	r3, [sp, #0]
   12c5c:	4a42      	ldr	r2, [pc, #264]	; (12d68 <isr_rx_conn_pkt_ctrl+0x388>)
   12c5e:	4b46      	ldr	r3, [pc, #280]	; (12d78 <isr_rx_conn_pkt_ctrl+0x398>)
   12c60:	4942      	ldr	r1, [pc, #264]	; (12d6c <isr_rx_conn_pkt_ctrl+0x38c>)
   12c62:	4846      	ldr	r0, [pc, #280]	; (12d7c <isr_rx_conn_pkt_ctrl+0x39c>)
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   12c64:	f7ef fb16 	bl	2294 <printk>
   12c68:	4040      	eors	r0, r0
   12c6a:	f380 8811 	msr	BASEPRI, r0
   12c6e:	f04f 0004 	mov.w	r0, #4
   12c72:	df02      	svc	2
		if (_radio.conn_curr->role ||
   12c74:	f995 301d 	ldrsb.w	r3, [r5, #29]
   12c78:	2b00      	cmp	r3, #0
   12c7a:	f2c0 879f 	blt.w	13bbc <isr_rx_conn_pkt_ctrl+0x11dc>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_REQ,
   12c7e:	7a61      	ldrb	r1, [r4, #9]
   12c80:	2005      	movs	r0, #5
   12c82:	f7fb fc55 	bl	e530 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
   12c86:	2800      	cmp	r0, #0
   12c88:	f000 8798 	beq.w	13bbc <isr_rx_conn_pkt_ctrl+0x11dc>
		_radio.conn_curr->llcp.encryption.initiate = 0;
   12c8c:	2000      	movs	r0, #0
		_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
   12c8e:	2303      	movs	r3, #3
		_radio.conn_curr->llcp_ack--;
   12c90:	3e01      	subs	r6, #1
		_radio.conn_curr->llcp.encryption.initiate = 0;
   12c92:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
		_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
   12c96:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
		_radio.conn_curr->llcp_ack--;
   12c9a:	f885 6075 	strb.w	r6, [r5, #117]	; 0x75
		break;
   12c9e:	e765      	b.n	12b6c <isr_rx_conn_pkt_ctrl+0x18c>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
   12ca0:	7a41      	ldrb	r1, [r0, #9]
   12ca2:	2006      	movs	r0, #6
   12ca4:	f7fb fc44 	bl	e530 <pdu_len_cmp>
   12ca8:	2800      	cmp	r0, #0
   12caa:	f000 8787 	beq.w	13bbc <isr_rx_conn_pkt_ctrl+0x11dc>
		if (_radio.role == ROLE_SLAVE) {
   12cae:	4b2b      	ldr	r3, [pc, #172]	; (12d5c <isr_rx_conn_pkt_ctrl+0x37c>)
   12cb0:	7cda      	ldrb	r2, [r3, #19]
   12cb2:	2a03      	cmp	r2, #3
   12cb4:	4619      	mov	r1, r3
   12cb6:	d124      	bne.n	12d02 <isr_rx_conn_pkt_ctrl+0x322>
			LL_ASSERT((_radio.conn_curr->llcp_req ==
   12cb8:	f8d3 371c 	ldr.w	r3, [r3, #1820]	; 0x71c
   12cbc:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
   12cc0:	f893 0074 	ldrb.w	r0, [r3, #116]	; 0x74
   12cc4:	4290      	cmp	r0, r2
   12cc6:	d003      	beq.n	12cd0 <isr_rx_conn_pkt_ctrl+0x2f0>
   12cc8:	f893 0076 	ldrb.w	r0, [r3, #118]	; 0x76
   12ccc:	2803      	cmp	r0, #3
   12cce:	d1c2      	bne.n	12c56 <isr_rx_conn_pkt_ctrl+0x276>
			_radio.conn_curr->llcp.encryption.initiate = 0;
   12cd0:	2000      	movs	r0, #0
   12cd2:	f883 0078 	strb.w	r0, [r3, #120]	; 0x78
			_radio.conn_curr->llcp_ack--;
   12cd6:	3a01      	subs	r2, #1
			_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
   12cd8:	2003      	movs	r0, #3
   12cda:	f883 0076 	strb.w	r0, [r3, #118]	; 0x76
			_radio.conn_curr->llcp_ack--;
   12cde:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
		if (_radio.conn_curr->refresh) {
   12ce2:	f8d1 271c 	ldr.w	r2, [r1, #1820]	; 0x71c
   12ce6:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   12cea:	065e      	lsls	r6, r3, #25
   12cec:	d505      	bpl.n	12cfa <isr_rx_conn_pkt_ctrl+0x31a>
			_radio.conn_curr->refresh = 0;
   12cee:	f36f 1386 	bfc	r3, #6, #1
   12cf2:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
			node_rx->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   12cf6:	2309      	movs	r3, #9
   12cf8:	7123      	strb	r3, [r4, #4]
				*rx_enqueue = 1;
   12cfa:	2301      	movs	r3, #1
   12cfc:	702b      	strb	r3, [r5, #0]
				break;
   12cfe:	f000 bcbf 	b.w	13680 <isr_rx_conn_pkt_ctrl+0xca0>
			_radio.conn_curr->pause_rx = 0;
   12d02:	f8d3 271c 	ldr.w	r2, [r3, #1820]	; 0x71c
   12d06:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
   12d0a:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   12d0e:	f36f 03c3 	bfc	r3, #3, #1
   12d12:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
   12d16:	e7e4      	b.n	12ce2 <isr_rx_conn_pkt_ctrl+0x302>
		if (!_radio.conn_curr->role ||
   12d18:	4b10      	ldr	r3, [pc, #64]	; (12d5c <isr_rx_conn_pkt_ctrl+0x37c>)
   12d1a:	f8d3 571c 	ldr.w	r5, [r3, #1820]	; 0x71c
   12d1e:	f995 301d 	ldrsb.w	r3, [r5, #29]
   12d22:	2b00      	cmp	r3, #0
   12d24:	f280 874a 	bge.w	13bbc <isr_rx_conn_pkt_ctrl+0x11dc>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_REQ,
   12d28:	7a41      	ldrb	r1, [r0, #9]
   12d2a:	2008      	movs	r0, #8
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
   12d2c:	f7fb fc00 	bl	e530 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
   12d30:	2800      	cmp	r0, #0
   12d32:	f000 8743 	beq.w	13bbc <isr_rx_conn_pkt_ctrl+0x11dc>
		nack = feature_rsp_send(_radio.conn_curr, pdu_data_rx);
   12d36:	4631      	mov	r1, r6
   12d38:	4628      	mov	r0, r5
}
   12d3a:	b003      	add	sp, #12
   12d3c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		nack = feature_rsp_send(_radio.conn_curr, pdu_data_rx);
   12d40:	f7fe ba66 	b.w	11210 <feature_rsp_send>
		if (_radio.conn_curr->role ||
   12d44:	4b05      	ldr	r3, [pc, #20]	; (12d5c <isr_rx_conn_pkt_ctrl+0x37c>)
   12d46:	f8d3 571c 	ldr.w	r5, [r3, #1820]	; 0x71c
   12d4a:	f995 301d 	ldrsb.w	r3, [r5, #29]
   12d4e:	2b00      	cmp	r3, #0
   12d50:	f2c0 8734 	blt.w	13bbc <isr_rx_conn_pkt_ctrl+0x11dc>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
   12d54:	7a41      	ldrb	r1, [r0, #9]
   12d56:	200e      	movs	r0, #14
   12d58:	e7e8      	b.n	12d2c <isr_rx_conn_pkt_ctrl+0x34c>
   12d5a:	bf00      	nop
   12d5c:	20000bf0 	.word	0x20000bf0
   12d60:	00023dae 	.word	0x00023dae
   12d64:	00025e48 	.word	0x00025e48
   12d68:	00022d76 	.word	0x00022d76
   12d6c:	000272d8 	.word	0x000272d8
   12d70:	00026333 	.word	0x00026333
   12d74:	00025e54 	.word	0x00025e54
   12d78:	00025a6c 	.word	0x00025a6c
   12d7c:	00026375 	.word	0x00026375
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_RSP,
   12d80:	7a41      	ldrb	r1, [r0, #9]
   12d82:	2009      	movs	r0, #9
   12d84:	f7fb fbd4 	bl	e530 <pdu_len_cmp>
   12d88:	2800      	cmp	r0, #0
   12d8a:	f000 8717 	beq.w	13bbc <isr_rx_conn_pkt_ctrl+0x11dc>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
   12d8e:	7b23      	ldrb	r3, [r4, #12]
	       (features[1] << 8) | (features[2] << 16);
   12d90:	7b61      	ldrb	r1, [r4, #13]
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
   12d92:	48b2      	ldr	r0, [pc, #712]	; (1305c <isr_rx_conn_pkt_ctrl+0x67c>)
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
   12d94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
   12d98:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
   12d9c:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
   12da0:	f043 0310 	orr.w	r3, r3, #16
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
   12da4:	f8d0 271c 	ldr.w	r2, [r0, #1820]	; 0x71c
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
   12da8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	       (features[1] << 8) | (features[2] << 16);
   12dac:	7ba1      	ldrb	r1, [r4, #14]
   12dae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
   12db2:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
   12db6:	f3c1 0110 	ubfx	r1, r1, #0, #17
   12dba:	400b      	ands	r3, r1
   12dbc:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
		_radio.conn_curr->common.fex_valid = 1;
   12dc0:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
   12dc4:	f043 0320 	orr.w	r3, r3, #32
   12dc8:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
		*rx_enqueue = 1;
   12dcc:	2301      	movs	r3, #1
   12dce:	702b      	strb	r3, [r5, #0]
		_radio.conn_curr->procedure_expire = 0;
   12dd0:	f8d0 371c 	ldr.w	r3, [r0, #1820]	; 0x71c
		_radio.conn_curr->procedure_expire = 0;
   12dd4:	2000      	movs	r0, #0
   12dd6:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
		break;
   12dda:	e6c7      	b.n	12b6c <isr_rx_conn_pkt_ctrl+0x18c>
		if (!_radio.conn_curr->role ||
   12ddc:	4e9f      	ldr	r6, [pc, #636]	; (1305c <isr_rx_conn_pkt_ctrl+0x67c>)
   12dde:	f8d6 571c 	ldr.w	r5, [r6, #1820]	; 0x71c
   12de2:	f995 301d 	ldrsb.w	r3, [r5, #29]
   12de6:	2b00      	cmp	r3, #0
   12de8:	f280 86e8 	bge.w	13bbc <isr_rx_conn_pkt_ctrl+0x11dc>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_REQ,
   12dec:	7a41      	ldrb	r1, [r0, #9]
   12dee:	200a      	movs	r0, #10
   12df0:	f7fb fb9e 	bl	e530 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
   12df4:	2800      	cmp	r0, #0
   12df6:	f000 86e1 	beq.w	13bbc <isr_rx_conn_pkt_ctrl+0x11dc>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   12dfa:	f206 7064 	addw	r0, r6, #1892	; 0x764
   12dfe:	f7f8 fcee 	bl	b7de <mem_acquire>
		if (!node_tx) {
   12e02:	4601      	mov	r1, r0
   12e04:	b908      	cbnz	r0, 12e0a <isr_rx_conn_pkt_ctrl+0x42a>
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
   12e06:	2001      	movs	r0, #1
   12e08:	e6b0      	b.n	12b6c <isr_rx_conn_pkt_ctrl+0x18c>
		conn->refresh = 1;
   12e0a:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
	conn->enc_rx = 0;
   12e0e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
   12e12:	f36f 1304 	bfc	r3, #4, #1
   12e16:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12e1a:	7903      	ldrb	r3, [r0, #4]
   12e1c:	f043 0303 	orr.w	r3, r3, #3
   12e20:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   12e22:	2301      	movs	r3, #1
   12e24:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   12e26:	230b      	movs	r3, #11
   12e28:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, node_tx);
   12e2a:	4628      	mov	r0, r5
   12e2c:	f000 bce0 	b.w	137f0 <isr_rx_conn_pkt_ctrl+0xe10>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
   12e30:	7a41      	ldrb	r1, [r0, #9]
   12e32:	200b      	movs	r0, #11
   12e34:	f7fb fb7c 	bl	e530 <pdu_len_cmp>
   12e38:	2800      	cmp	r0, #0
   12e3a:	f000 86bf 	beq.w	13bbc <isr_rx_conn_pkt_ctrl+0x11dc>
		nack = pause_enc_rsp_send(_radio.conn_curr, 0);
   12e3e:	4887      	ldr	r0, [pc, #540]	; (1305c <isr_rx_conn_pkt_ctrl+0x67c>)
   12e40:	f8d0 471c 	ldr.w	r4, [r0, #1820]	; 0x71c
	} else if (!conn->role) {
   12e44:	f994 301d 	ldrsb.w	r3, [r4, #29]
   12e48:	2b00      	cmp	r3, #0
   12e4a:	db1b      	blt.n	12e84 <isr_rx_conn_pkt_ctrl+0x4a4>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   12e4c:	f200 7064 	addw	r0, r0, #1892	; 0x764
   12e50:	f7f8 fcc5 	bl	b7de <mem_acquire>
		if (!node_tx) {
   12e54:	4601      	mov	r1, r0
   12e56:	2800      	cmp	r0, #0
   12e58:	d0d5      	beq.n	12e06 <isr_rx_conn_pkt_ctrl+0x426>
		conn->enc_tx = 0;
   12e5a:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
	conn->pause_rx = 1;
   12e5e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
	conn->enc_rx = 0;
   12e62:	f043 0304 	orr.w	r3, r3, #4
   12e66:	f36f 1304 	bfc	r3, #4, #1
   12e6a:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12e6e:	7903      	ldrb	r3, [r0, #4]
   12e70:	f043 0303 	orr.w	r3, r3, #3
   12e74:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   12e76:	2301      	movs	r3, #1
   12e78:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   12e7a:	230b      	movs	r3, #11
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   12e7c:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_enqueue(conn, node_tx);
   12e7e:	4620      	mov	r0, r4
   12e80:	f000 bcb6 	b.w	137f0 <isr_rx_conn_pkt_ctrl+0xe10>
		conn->enc_tx = 0;
   12e84:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   12e88:	f36f 1345 	bfc	r3, #5, #1
   12e8c:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
   12e90:	e67c      	b.n	12b8c <isr_rx_conn_pkt_ctrl+0x1ac>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_VERSION_IND,
   12e92:	7a41      	ldrb	r1, [r0, #9]
   12e94:	200c      	movs	r0, #12
   12e96:	f7fb fb4b 	bl	e530 <pdu_len_cmp>
   12e9a:	2800      	cmp	r0, #0
   12e9c:	f000 868e 	beq.w	13bbc <isr_rx_conn_pkt_ctrl+0x11dc>
		nack = version_ind_send(_radio.conn_curr, pdu_data_rx,
   12ea0:	486e      	ldr	r0, [pc, #440]	; (1305c <isr_rx_conn_pkt_ctrl+0x67c>)
   12ea2:	f8d0 671c 	ldr.w	r6, [r0, #1820]	; 0x71c
	if (!conn->llcp_version.tx) {
   12ea6:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
   12eaa:	f013 0701 	ands.w	r7, r3, #1
   12eae:	d150      	bne.n	12f52 <isr_rx_conn_pkt_ctrl+0x572>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   12eb0:	f200 7064 	addw	r0, r0, #1892	; 0x764
   12eb4:	f7f8 fc93 	bl	b7de <mem_acquire>
		if (!node_tx) {
   12eb8:	4601      	mov	r1, r0
   12eba:	2800      	cmp	r0, #0
   12ebc:	d0a3      	beq.n	12e06 <isr_rx_conn_pkt_ctrl+0x426>
		conn->llcp_version.tx = 1;
   12ebe:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
   12ec2:	f043 0301 	orr.w	r3, r3, #1
   12ec6:	f886 30a8 	strb.w	r3, [r6, #168]	; 0xa8
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12eca:	7903      	ldrb	r3, [r0, #4]
   12ecc:	f043 0303 	orr.w	r3, r3, #3
   12ed0:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
   12ed2:	2306      	movs	r3, #6
   12ed4:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   12ed6:	230c      	movs	r3, #12
   12ed8:	71c3      	strb	r3, [r0, #7]
		v->version_number = RADIO_BLE_VERSION_NUMBER;
   12eda:	2309      	movs	r3, #9
   12edc:	7203      	strb	r3, [r0, #8]
		v->company_id =	RADIO_BLE_COMPANY_ID;
   12ede:	f06f 030e 	mvn.w	r3, #14
   12ee2:	7243      	strb	r3, [r0, #9]
   12ee4:	2305      	movs	r3, #5
   12ee6:	7283      	strb	r3, [r0, #10]
		v->sub_version_number =	RADIO_BLE_SUB_VERSION_NUMBER;
   12ee8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12eec:	72c3      	strb	r3, [r0, #11]
   12eee:	7303      	strb	r3, [r0, #12]
		ctrl_tx_sec_enqueue(conn, node_tx);
   12ef0:	4630      	mov	r0, r6
   12ef2:	f7fe f973 	bl	111dc <ctrl_tx_sec_enqueue>
	conn->empty = 1;
   12ef6:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
   12efa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   12efe:	f886 30f8 	strb.w	r3, [r6, #248]	; 0xf8
	pdu_data_tx = (void *)radio_pkt_empty_get();
   12f02:	f005 fd93 	bl	18a2c <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   12f06:	7803      	ldrb	r3, [r0, #0]
	pdu_data_tx->len = 0;
   12f08:	7047      	strb	r7, [r0, #1]
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   12f0a:	2201      	movs	r2, #1
   12f0c:	f362 0301 	bfi	r3, r2, #0, #2
	if (conn->pkt_tx_head) {
   12f10:	f8d6 213c 	ldr.w	r2, [r6, #316]	; 0x13c
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   12f14:	7003      	strb	r3, [r0, #0]
   12f16:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
   12f18:	b1c2      	cbz	r2, 12f4c <isr_rx_conn_pkt_ctrl+0x56c>
		pdu_data_tx->md = 1;
   12f1a:	f043 0310 	orr.w	r3, r3, #16
		pdu_data_tx->md = 0;
   12f1e:	7003      	strb	r3, [r0, #0]
	conn->llcp_version.version_number = v->version_number;
   12f20:	7b23      	ldrb	r3, [r4, #12]
   12f22:	f886 30a9 	strb.w	r3, [r6, #169]	; 0xa9
	conn->llcp_version.company_id = v->company_id;
   12f26:	7ba2      	ldrb	r2, [r4, #14]
   12f28:	7b63      	ldrb	r3, [r4, #13]
   12f2a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   12f2e:	f8a6 30aa 	strh.w	r3, [r6, #170]	; 0xaa
	conn->llcp_version.sub_version_number = v->sub_version_number;
   12f32:	7be3      	ldrb	r3, [r4, #15]
   12f34:	7c22      	ldrb	r2, [r4, #16]
   12f36:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   12f3a:	f8a6 30ac 	strh.w	r3, [r6, #172]	; 0xac
	conn->llcp_version.rx = 1;
   12f3e:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
   12f42:	f043 0302 	orr.w	r3, r3, #2
   12f46:	f886 30a8 	strb.w	r3, [r6, #168]	; 0xa8
   12f4a:	e61f      	b.n	12b8c <isr_rx_conn_pkt_ctrl+0x1ac>
		pdu_data_tx->md = 0;
   12f4c:	f362 1304 	bfi	r3, r2, #4, #1
   12f50:	e7e5      	b.n	12f1e <isr_rx_conn_pkt_ctrl+0x53e>
	} else if (!conn->llcp_version.rx) {
   12f52:	f013 0302 	ands.w	r3, r3, #2
   12f56:	f47f ae19 	bne.w	12b8c <isr_rx_conn_pkt_ctrl+0x1ac>
		conn->procedure_expire = 0;
   12f5a:	f8a6 3044 	strh.w	r3, [r6, #68]	; 0x44
		*rx_enqueue = 1;
   12f5e:	2301      	movs	r3, #1
   12f60:	702b      	strb	r3, [r5, #0]
   12f62:	e7dd      	b.n	12f20 <isr_rx_conn_pkt_ctrl+0x540>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_IND,
   12f64:	7a41      	ldrb	r1, [r0, #9]
   12f66:	200d      	movs	r0, #13
   12f68:	f7fb fae2 	bl	e530 <pdu_len_cmp>
   12f6c:	2800      	cmp	r0, #0
   12f6e:	f000 8625 	beq.w	13bbc <isr_rx_conn_pkt_ctrl+0x11dc>
		_radio.conn_curr->pause_rx = 0;
   12f72:	4b3a      	ldr	r3, [pc, #232]	; (1305c <isr_rx_conn_pkt_ctrl+0x67c>)
   12f74:	f8d3 271c 	ldr.w	r2, [r3, #1820]	; 0x71c
   12f78:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
		_radio.conn_curr->pause_tx = 0;
   12f7c:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   12f80:	f36f 03c3 	bfc	r3, #3, #1
		_radio.conn_curr->procedure_expire = 0;
   12f84:	2000      	movs	r0, #0
		_radio.conn_curr->pause_tx = 0;
   12f86:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
		_radio.conn_curr->procedure_expire = 0;
   12f8a:	f8a2 0044 	strh.w	r0, [r2, #68]	; 0x44
		*rx_enqueue = 1;
   12f8e:	2301      	movs	r3, #1
   12f90:	702b      	strb	r3, [r5, #0]
   12f92:	e5eb      	b.n	12b6c <isr_rx_conn_pkt_ctrl+0x18c>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ,
   12f94:	7a41      	ldrb	r1, [r0, #9]
   12f96:	200f      	movs	r0, #15
   12f98:	f7fb faca 	bl	e530 <pdu_len_cmp>
   12f9c:	2800      	cmp	r0, #0
   12f9e:	f000 860d 	beq.w	13bbc <isr_rx_conn_pkt_ctrl+0x11dc>
		if (_radio.conn_upd && (_radio.conn_upd != _radio.conn_curr)) {
   12fa2:	4b2e      	ldr	r3, [pc, #184]	; (1305c <isr_rx_conn_pkt_ctrl+0x67c>)
   12fa4:	f8d3 1790 	ldr.w	r1, [r3, #1936]	; 0x790
   12fa8:	461a      	mov	r2, r3
   12faa:	b151      	cbz	r1, 12fc2 <isr_rx_conn_pkt_ctrl+0x5e2>
   12fac:	f8d3 071c 	ldr.w	r0, [r3, #1820]	; 0x71c
   12fb0:	4281      	cmp	r1, r0
   12fb2:	d006      	beq.n	12fc2 <isr_rx_conn_pkt_ctrl+0x5e2>
			nack = reject_ext_ind_send(_radio.conn_curr,
   12fb4:	2220      	movs	r2, #32
				nack = reject_ext_ind_send(_radio.conn_curr,
   12fb6:	210f      	movs	r1, #15
}
   12fb8:	b003      	add	sp, #12
   12fba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				nack = reject_ext_ind_send(_radio.conn_curr,
   12fbe:	f7fe b991 	b.w	112e4 <reject_ext_ind_send>
		if (!_radio.conn_curr->role) {
   12fc2:	f8d2 071c 	ldr.w	r0, [r2, #1820]	; 0x71c
   12fc6:	f990 301d 	ldrsb.w	r3, [r0, #29]
   12fca:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
   12fce:	2b00      	cmp	r3, #0
   12fd0:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
   12fd4:	f2c0 80a7 	blt.w	13126 <isr_rx_conn_pkt_ctrl+0x746>
			if ((conn->llcp_conn_param.req !=
   12fd8:	4299      	cmp	r1, r3
   12fda:	d009      	beq.n	12ff0 <isr_rx_conn_pkt_ctrl+0x610>
			    ((conn->llcp_conn_param.state ==
   12fdc:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
					conn->llcp_conn_param.ack) &&
   12fe0:	f013 0307 	ands.w	r3, r3, #7
   12fe4:	d002      	beq.n	12fec <isr_rx_conn_pkt_ctrl+0x60c>
			      LLCP_CPR_STATE_REQ) ||
   12fe6:	3b04      	subs	r3, #4
   12fe8:	2b01      	cmp	r3, #1
   12fea:	d801      	bhi.n	12ff0 <isr_rx_conn_pkt_ctrl+0x610>
				nack = reject_ext_ind_send(_radio.conn_curr,
   12fec:	2223      	movs	r2, #35	; 0x23
   12fee:	e7e2      	b.n	12fb6 <isr_rx_conn_pkt_ctrl+0x5d6>
			} else if (((conn->llcp_req != conn->llcp_ack) &&
   12ff0:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
   12ff4:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   12ff8:	4299      	cmp	r1, r3
   12ffa:	d003      	beq.n	13004 <isr_rx_conn_pkt_ctrl+0x624>
   12ffc:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
   13000:	2b03      	cmp	r3, #3
   13002:	d105      	bne.n	13010 <isr_rx_conn_pkt_ctrl+0x630>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
   13004:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
   13008:	f890 30f5 	ldrb.w	r3, [r0, #245]	; 0xf5
   1300c:	4299      	cmp	r1, r3
   1300e:	d001      	beq.n	13014 <isr_rx_conn_pkt_ctrl+0x634>
				nack = reject_ext_ind_send(_radio.conn_curr,
   13010:	222a      	movs	r2, #42	; 0x2a
   13012:	e7d0      	b.n	12fb6 <isr_rx_conn_pkt_ctrl+0x5d6>
				if ((cpr->interval_min < 6) ||
   13014:	f8b4 800c 	ldrh.w	r8, [r4, #12]
   13018:	4643      	mov	r3, r8
   1301a:	2b05      	cmp	r3, #5
   1301c:	d91b      	bls.n	13056 <isr_rx_conn_pkt_ctrl+0x676>
				    (cpr->interval_max > 3200) ||
   1301e:	89e7      	ldrh	r7, [r4, #14]
				if ((cpr->interval_min < 6) ||
   13020:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
   13024:	d817      	bhi.n	13056 <isr_rx_conn_pkt_ctrl+0x676>
				    (cpr->interval_max > 3200) ||
   13026:	45b8      	cmp	r8, r7
   13028:	d815      	bhi.n	13056 <isr_rx_conn_pkt_ctrl+0x676>
				    (cpr->latency > 499) ||
   1302a:	f8b4 c010 	ldrh.w	ip, [r4, #16]
				    (cpr->interval_min > cpr->interval_max) ||
   1302e:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
   13032:	d210      	bcs.n	13056 <isr_rx_conn_pkt_ctrl+0x676>
				    (cpr->timeout < 10) ||
   13034:	f8b4 e012 	ldrh.w	lr, [r4, #18]
				    (cpr->latency > 499) ||
   13038:	f1ae 060a 	sub.w	r6, lr, #10
   1303c:	b2b6      	uxth	r6, r6
   1303e:	f640 4976 	movw	r9, #3190	; 0xc76
   13042:	454e      	cmp	r6, r9
   13044:	d807      	bhi.n	13056 <isr_rx_conn_pkt_ctrl+0x676>
				     ((cpr->latency + 1) *
   13046:	fb0c 7107 	mla	r1, ip, r7, r7
				    (cpr->timeout > 3200) ||
   1304a:	ebb1 0f8e 	cmp.w	r1, lr, lsl #2
   1304e:	da02      	bge.n	13056 <isr_rx_conn_pkt_ctrl+0x676>
				    (cpr->preferred_periodicity >
   13050:	7d21      	ldrb	r1, [r4, #20]
				      cpr->interval_max)) ||
   13052:	428f      	cmp	r7, r1
   13054:	d204      	bcs.n	13060 <isr_rx_conn_pkt_ctrl+0x680>
				nack = reject_ext_ind_send(conn,
   13056:	221e      	movs	r2, #30
   13058:	e7ad      	b.n	12fb6 <isr_rx_conn_pkt_ctrl+0x5d6>
   1305a:	bf00      	nop
   1305c:	20000bf0 	.word	0x20000bf0
				conn->llcp_conn_param.interval = cpr->interval_min;
   13060:	f8a0 80c4 	strh.w	r8, [r0, #196]	; 0xc4
				conn->llcp_conn_param.latency =	cpr->latency;
   13064:	f8a0 c0c6 	strh.w	ip, [r0, #198]	; 0xc6
				conn->llcp_conn_param.timeout =	cpr->timeout;
   13068:	f8a0 e0c8 	strh.w	lr, [r0, #200]	; 0xc8
				conn->llcp_conn_param.preferred_periodicity =
   1306c:	f880 10ca 	strb.w	r1, [r0, #202]	; 0xca
					cpr->reference_conn_event_count;
   13070:	7da6      	ldrb	r6, [r4, #22]
   13072:	7d61      	ldrb	r1, [r4, #21]
   13074:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
   13078:	f8a0 10cc 	strh.w	r1, [r0, #204]	; 0xcc
				conn->llcp_conn_param.offset0 =	cpr->offset0;
   1307c:	7e26      	ldrb	r6, [r4, #24]
   1307e:	7de1      	ldrb	r1, [r4, #23]
   13080:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
   13084:	f8a0 10ce 	strh.w	r1, [r0, #206]	; 0xce
				conn->llcp_conn_param.offset1 =	cpr->offset1;
   13088:	7ea6      	ldrb	r6, [r4, #26]
   1308a:	7e61      	ldrb	r1, [r4, #25]
   1308c:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
   13090:	f8a0 10d0 	strh.w	r1, [r0, #208]	; 0xd0
				conn->llcp_conn_param.offset2 =	cpr->offset2;
   13094:	7f26      	ldrb	r6, [r4, #28]
   13096:	7ee1      	ldrb	r1, [r4, #27]
   13098:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
   1309c:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
				conn->llcp_conn_param.offset3 =	cpr->offset3;
   130a0:	7fa6      	ldrb	r6, [r4, #30]
   130a2:	7f61      	ldrb	r1, [r4, #29]
   130a4:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
   130a8:	f8a0 10d4 	strh.w	r1, [r0, #212]	; 0xd4
				conn->llcp_conn_param.offset4 =	cpr->offset4;
   130ac:	7fe1      	ldrb	r1, [r4, #31]
   130ae:	f894 6020 	ldrb.w	r6, [r4, #32]
   130b2:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
   130b6:	f8a0 10d6 	strh.w	r1, [r0, #214]	; 0xd6
				conn->llcp_conn_param.offset5 =	cpr->offset5;
   130ba:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
   130be:	f894 4022 	ldrb.w	r4, [r4, #34]	; 0x22
   130c2:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
   130c6:	f8a0 10d8 	strh.w	r1, [r0, #216]	; 0xd8
				if ((conn->llcp_conn_param.interval !=
   130ca:	f8d0 40c4 	ldr.w	r4, [r0, #196]	; 0xc4
   130ce:	6a41      	ldr	r1, [r0, #36]	; 0x24
   130d0:	428c      	cmp	r4, r1
   130d2:	d10f      	bne.n	130f4 <isr_rx_conn_pkt_ctrl+0x714>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   130d4:	8c84      	ldrh	r4, [r0, #36]	; 0x24
   130d6:	f240 41e2 	movw	r1, #1250	; 0x4e2
   130da:	4361      	muls	r1, r4
   130dc:	f242 7410 	movw	r4, #10000	; 0x2710
   130e0:	fb04 130e 	mla	r3, r4, lr, r1
   130e4:	3b01      	subs	r3, #1
   130e6:	fb93 f3f1 	sdiv	r3, r3, r1
				     conn->latency) ||
   130ea:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
   130ec:	b29b      	uxth	r3, r3
   130ee:	4299      	cmp	r1, r3
   130f0:	f000 8092 	beq.w	13218 <isr_rx_conn_pkt_ctrl+0x838>
					if (conn->pause_tx) {
   130f4:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
   130f8:	071c      	lsls	r4, r3, #28
   130fa:	f140 8087 	bpl.w	1320c <isr_rx_conn_pkt_ctrl+0x82c>
						conn->llcp_conn_param.state =
   130fe:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
   13102:	2102      	movs	r1, #2
				conn->llcp_conn_param.state =
   13104:	f361 0302 	bfi	r3, r1, #0, #3
   13108:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.ack--;
   1310c:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
   13110:	3b01      	subs	r3, #1
   13112:	f880 30c1 	strb.w	r3, [r0, #193]	; 0xc1
			if (_radio.conn_upd == 0) {
   13116:	f8d2 3790 	ldr.w	r3, [r2, #1936]	; 0x790
   1311a:	2b00      	cmp	r3, #0
   1311c:	f47f ad36 	bne.w	12b8c <isr_rx_conn_pkt_ctrl+0x1ac>
				_radio.conn_upd = conn;
   13120:	f8c2 0790 	str.w	r0, [r2, #1936]	; 0x790
   13124:	e532      	b.n	12b8c <isr_rx_conn_pkt_ctrl+0x1ac>
		} else if ((_radio.conn_curr->llcp_conn_param.req ==
   13126:	4299      	cmp	r1, r3
   13128:	d003      	beq.n	13132 <isr_rx_conn_pkt_ctrl+0x752>
			    _radio.conn_curr->llcp_conn_param.ack) ||
   1312a:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
   1312e:	0799      	lsls	r1, r3, #30
   13130:	d17b      	bne.n	1322a <isr_rx_conn_pkt_ctrl+0x84a>
			if ((cpr->interval_min < 6) ||
   13132:	f8b4 800c 	ldrh.w	r8, [r4, #12]
   13136:	4643      	mov	r3, r8
   13138:	2b05      	cmp	r3, #5
   1313a:	d98c      	bls.n	13056 <isr_rx_conn_pkt_ctrl+0x676>
			    (cpr->interval_max > 3200) ||
   1313c:	89e7      	ldrh	r7, [r4, #14]
			if ((cpr->interval_min < 6) ||
   1313e:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
   13142:	d888      	bhi.n	13056 <isr_rx_conn_pkt_ctrl+0x676>
			    (cpr->interval_max > 3200) ||
   13144:	45b8      	cmp	r8, r7
   13146:	d886      	bhi.n	13056 <isr_rx_conn_pkt_ctrl+0x676>
			    (cpr->latency > 499) ||
   13148:	f8b4 c010 	ldrh.w	ip, [r4, #16]
			    (cpr->interval_min > cpr->interval_max) ||
   1314c:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
   13150:	d281      	bcs.n	13056 <isr_rx_conn_pkt_ctrl+0x676>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   13152:	f8b4 e012 	ldrh.w	lr, [r4, #18]
			    (cpr->latency > 499) ||
   13156:	f1ae 060a 	sub.w	r6, lr, #10
   1315a:	b2b6      	uxth	r6, r6
   1315c:	f640 4976 	movw	r9, #3190	; 0xc76
   13160:	454e      	cmp	r6, r9
   13162:	f63f af78 	bhi.w	13056 <isr_rx_conn_pkt_ctrl+0x676>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
   13166:	fb0c 7107 	mla	r1, ip, r7, r7
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   1316a:	ebb1 0f8e 	cmp.w	r1, lr, lsl #2
   1316e:	f6bf af72 	bge.w	13056 <isr_rx_conn_pkt_ctrl+0x676>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
   13172:	7d21      	ldrb	r1, [r4, #20]
						    cpr->interval_max)) ||
   13174:	428f      	cmp	r7, r1
   13176:	f4ff af6e 	bcc.w	13056 <isr_rx_conn_pkt_ctrl+0x676>
			conn->llcp_conn_param.interval = cpr->interval_min;
   1317a:	f8a0 80c4 	strh.w	r8, [r0, #196]	; 0xc4
			conn->llcp_conn_param.latency =	cpr->latency;
   1317e:	f8a0 c0c6 	strh.w	ip, [r0, #198]	; 0xc6
			conn->llcp_conn_param.timeout =	cpr->timeout;
   13182:	f8a0 e0c8 	strh.w	lr, [r0, #200]	; 0xc8
			conn->llcp_conn_param.preferred_periodicity =
   13186:	f880 10ca 	strb.w	r1, [r0, #202]	; 0xca
				cpr->reference_conn_event_count;
   1318a:	7da6      	ldrb	r6, [r4, #22]
   1318c:	7d61      	ldrb	r1, [r4, #21]
   1318e:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   13192:	f8a0 10cc 	strh.w	r1, [r0, #204]	; 0xcc
			conn->llcp_conn_param.offset0 =	cpr->offset0;
   13196:	7e26      	ldrb	r6, [r4, #24]
   13198:	7de1      	ldrb	r1, [r4, #23]
   1319a:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
   1319e:	f8a0 10ce 	strh.w	r1, [r0, #206]	; 0xce
			conn->llcp_conn_param.offset1 =	cpr->offset1;
   131a2:	7ea6      	ldrb	r6, [r4, #26]
   131a4:	7e61      	ldrb	r1, [r4, #25]
   131a6:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
   131aa:	f8a0 10d0 	strh.w	r1, [r0, #208]	; 0xd0
			conn->llcp_conn_param.offset2 =	cpr->offset2;
   131ae:	7f26      	ldrb	r6, [r4, #28]
   131b0:	7ee1      	ldrb	r1, [r4, #27]
   131b2:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
   131b6:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
			conn->llcp_conn_param.offset3 =	cpr->offset3;
   131ba:	7fa6      	ldrb	r6, [r4, #30]
   131bc:	7f61      	ldrb	r1, [r4, #29]
   131be:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
   131c2:	f8a0 10d4 	strh.w	r1, [r0, #212]	; 0xd4
			conn->llcp_conn_param.offset4 =	cpr->offset4;
   131c6:	7fe1      	ldrb	r1, [r4, #31]
   131c8:	f894 6020 	ldrb.w	r6, [r4, #32]
   131cc:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
   131d0:	f8a0 10d6 	strh.w	r1, [r0, #214]	; 0xd6
			conn->llcp_conn_param.offset5 =	cpr->offset5;
   131d4:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
   131d8:	f894 4022 	ldrb.w	r4, [r4, #34]	; 0x22
   131dc:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
   131e0:	f8a0 10d8 	strh.w	r1, [r0, #216]	; 0xd8
			if ((conn->llcp_conn_param.interval !=
   131e4:	f8d0 40c4 	ldr.w	r4, [r0, #196]	; 0xc4
   131e8:	6a41      	ldr	r1, [r0, #36]	; 0x24
   131ea:	428c      	cmp	r4, r1
   131ec:	d10e      	bne.n	1320c <isr_rx_conn_pkt_ctrl+0x82c>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   131ee:	8c84      	ldrh	r4, [r0, #36]	; 0x24
   131f0:	f240 41e2 	movw	r1, #1250	; 0x4e2
   131f4:	4361      	muls	r1, r4
   131f6:	f242 7410 	movw	r4, #10000	; 0x2710
   131fa:	fb04 130e 	mla	r3, r4, lr, r1
   131fe:	3b01      	subs	r3, #1
   13200:	fb93 f3f1 	sdiv	r3, r3, r1
			    (conn->llcp_conn_param.latency != conn->latency) ||
   13204:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
   13206:	b29b      	uxth	r3, r3
   13208:	4299      	cmp	r1, r3
   1320a:	d005      	beq.n	13218 <isr_rx_conn_pkt_ctrl+0x838>
				*rx_enqueue = 1;
   1320c:	2301      	movs	r3, #1
   1320e:	702b      	strb	r3, [r5, #0]
				conn->llcp_conn_param.state =
   13210:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
   13214:	2103      	movs	r1, #3
   13216:	e775      	b.n	13104 <isr_rx_conn_pkt_ctrl+0x724>
				conn->llcp_conn_param.status = 0;
   13218:	2300      	movs	r3, #0
   1321a:	f880 30c3 	strb.w	r3, [r0, #195]	; 0xc3
				conn->llcp_conn_param.cmd = 0;
   1321e:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
				conn->llcp_conn_param.state =
   13222:	2101      	movs	r1, #1
   13224:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
   13228:	e76c      	b.n	13104 <isr_rx_conn_pkt_ctrl+0x724>
			LL_ASSERT(0);
   1322a:	4bc9      	ldr	r3, [pc, #804]	; (13550 <isr_rx_conn_pkt_ctrl+0xb70>)
   1322c:	9301      	str	r3, [sp, #4]
   1322e:	9300      	str	r3, [sp, #0]
   13230:	4ac8      	ldr	r2, [pc, #800]	; (13554 <isr_rx_conn_pkt_ctrl+0xb74>)
   13232:	4bc9      	ldr	r3, [pc, #804]	; (13558 <isr_rx_conn_pkt_ctrl+0xb78>)
   13234:	49c9      	ldr	r1, [pc, #804]	; (1355c <isr_rx_conn_pkt_ctrl+0xb7c>)
   13236:	48ca      	ldr	r0, [pc, #808]	; (13560 <isr_rx_conn_pkt_ctrl+0xb80>)
   13238:	e514      	b.n	12c64 <isr_rx_conn_pkt_ctrl+0x284>
		if (_radio.conn_curr->role ||
   1323a:	4bca      	ldr	r3, [pc, #808]	; (13564 <isr_rx_conn_pkt_ctrl+0xb84>)
   1323c:	f8d3 571c 	ldr.w	r5, [r3, #1820]	; 0x71c
   13240:	f995 301d 	ldrsb.w	r3, [r5, #29]
   13244:	2b00      	cmp	r3, #0
   13246:	f2c0 84b9 	blt.w	13bbc <isr_rx_conn_pkt_ctrl+0x11dc>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP,
   1324a:	7a41      	ldrb	r1, [r0, #9]
   1324c:	2010      	movs	r0, #16
   1324e:	f7fb f96f 	bl	e530 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
   13252:	2800      	cmp	r0, #0
   13254:	f000 84b2 	beq.w	13bbc <isr_rx_conn_pkt_ctrl+0x11dc>
		if (!_radio.conn_curr->role &&
   13258:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
   1325c:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
   13260:	429a      	cmp	r2, r3
   13262:	f43f ac93 	beq.w	12b8c <isr_rx_conn_pkt_ctrl+0x1ac>
		    (_radio.conn_curr->llcp_conn_param.state ==
   13266:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
		     _radio.conn_curr->llcp_conn_param.ack) &&
   1326a:	f003 0307 	and.w	r3, r3, #7
   1326e:	2b04      	cmp	r3, #4
   13270:	f47f ac8c 	bne.w	12b8c <isr_rx_conn_pkt_ctrl+0x1ac>
			if ((cpr->interval_min < 6) ||
   13274:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
   13278:	fa1f f28e 	uxth.w	r2, lr
   1327c:	2a05      	cmp	r2, #5
   1327e:	d91b      	bls.n	132b8 <isr_rx_conn_pkt_ctrl+0x8d8>
			    (cpr->interval_max > 3200) ||
   13280:	89e3      	ldrh	r3, [r4, #14]
			if ((cpr->interval_min < 6) ||
   13282:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   13286:	d817      	bhi.n	132b8 <isr_rx_conn_pkt_ctrl+0x8d8>
			    (cpr->interval_max > 3200) ||
   13288:	429a      	cmp	r2, r3
   1328a:	d815      	bhi.n	132b8 <isr_rx_conn_pkt_ctrl+0x8d8>
			    (cpr->latency > 499) ||
   1328c:	8a27      	ldrh	r7, [r4, #16]
   1328e:	b2ba      	uxth	r2, r7
			    (cpr->interval_min > cpr->interval_max) ||
   13290:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
   13294:	d210      	bcs.n	132b8 <isr_rx_conn_pkt_ctrl+0x8d8>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   13296:	8a66      	ldrh	r6, [r4, #18]
   13298:	b2b0      	uxth	r0, r6
			    (cpr->latency > 499) ||
   1329a:	f1a0 010a 	sub.w	r1, r0, #10
   1329e:	b289      	uxth	r1, r1
   132a0:	f640 4c76 	movw	ip, #3190	; 0xc76
   132a4:	4561      	cmp	r1, ip
   132a6:	d807      	bhi.n	132b8 <isr_rx_conn_pkt_ctrl+0x8d8>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
   132a8:	fb02 3203 	mla	r2, r2, r3, r3
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   132ac:	ebb2 0f80 	cmp.w	r2, r0, lsl #2
   132b0:	da02      	bge.n	132b8 <isr_rx_conn_pkt_ctrl+0x8d8>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
   132b2:	7d22      	ldrb	r2, [r4, #20]
						    cpr->interval_max)) ||
   132b4:	4293      	cmp	r3, r2
   132b6:	d203      	bcs.n	132c0 <isr_rx_conn_pkt_ctrl+0x8e0>
				nack = reject_ext_ind_send(conn,
   132b8:	221e      	movs	r2, #30
   132ba:	2110      	movs	r1, #16
   132bc:	4628      	mov	r0, r5
   132be:	e67b      	b.n	12fb8 <isr_rx_conn_pkt_ctrl+0x5d8>
			_radio.conn_curr->procedure_expire = 0;
   132c0:	2000      	movs	r0, #0
   132c2:	f8a5 0044 	strh.w	r0, [r5, #68]	; 0x44
			conn->llcp_conn_param.interval = cpr->interval_min;
   132c6:	f8a5 e0c4 	strh.w	lr, [r5, #196]	; 0xc4
			conn->llcp_conn_param.latency =	cpr->latency;
   132ca:	f8a5 70c6 	strh.w	r7, [r5, #198]	; 0xc6
			conn->llcp_conn_param.timeout =	cpr->timeout;
   132ce:	f8a5 60c8 	strh.w	r6, [r5, #200]	; 0xc8
			conn->llcp_conn_param.preferred_periodicity =
   132d2:	f885 20ca 	strb.w	r2, [r5, #202]	; 0xca
				cpr->reference_conn_event_count;
   132d6:	7da2      	ldrb	r2, [r4, #22]
   132d8:	7d63      	ldrb	r3, [r4, #21]
   132da:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   132de:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
			conn->llcp_conn_param.offset0 =	cpr->offset0;
   132e2:	7e22      	ldrb	r2, [r4, #24]
   132e4:	7de3      	ldrb	r3, [r4, #23]
   132e6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   132ea:	f8a5 30ce 	strh.w	r3, [r5, #206]	; 0xce
			conn->llcp_conn_param.offset1 =	cpr->offset1;
   132ee:	7ea2      	ldrb	r2, [r4, #26]
   132f0:	7e63      	ldrb	r3, [r4, #25]
   132f2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   132f6:	f8a5 30d0 	strh.w	r3, [r5, #208]	; 0xd0
			conn->llcp_conn_param.offset2 =	cpr->offset2;
   132fa:	7f22      	ldrb	r2, [r4, #28]
   132fc:	7ee3      	ldrb	r3, [r4, #27]
   132fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   13302:	f8a5 30d2 	strh.w	r3, [r5, #210]	; 0xd2
			conn->llcp_conn_param.offset3 =	cpr->offset3;
   13306:	7fa2      	ldrb	r2, [r4, #30]
   13308:	7f63      	ldrb	r3, [r4, #29]
   1330a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1330e:	f8a5 30d4 	strh.w	r3, [r5, #212]	; 0xd4
			conn->llcp_conn_param.offset4 =	cpr->offset4;
   13312:	f894 2020 	ldrb.w	r2, [r4, #32]
   13316:	7fe3      	ldrb	r3, [r4, #31]
   13318:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1331c:	f8a5 30d6 	strh.w	r3, [r5, #214]	; 0xd6
			conn->llcp_conn_param.offset5 =	cpr->offset5;
   13320:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
   13324:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   13328:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1332c:	f8a5 30d8 	strh.w	r3, [r5, #216]	; 0xd8
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   13330:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
   13334:	2201      	movs	r2, #1
   13336:	f362 0302 	bfi	r3, r2, #0, #3
   1333a:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
   1333e:	e415      	b.n	12b6c <isr_rx_conn_pkt_ctrl+0x18c>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND,
   13340:	7a41      	ldrb	r1, [r0, #9]
   13342:	2011      	movs	r0, #17
   13344:	f7fb f8f4 	bl	e530 <pdu_len_cmp>
   13348:	2800      	cmp	r0, #0
   1334a:	f000 8437 	beq.w	13bbc <isr_rx_conn_pkt_ctrl+0x11dc>
	} else if (_radio.conn_curr->llcp_phy.ack !=
   1334e:	4a85      	ldr	r2, [pc, #532]	; (13564 <isr_rx_conn_pkt_ctrl+0xb84>)
   13350:	f8d2 371c 	ldr.w	r3, [r2, #1820]	; 0x71c
   13354:	f893 10f5 	ldrb.w	r1, [r3, #245]	; 0xf5
		   _radio.conn_curr->llcp_phy.req) {
   13358:	f893 00f4 	ldrb.w	r0, [r3, #244]	; 0xf4
	} else if (_radio.conn_curr->llcp_phy.ack !=
   1335c:	4281      	cmp	r1, r0
   1335e:	7b21      	ldrb	r1, [r4, #12]
   13360:	d027      	beq.n	133b2 <isr_rx_conn_pkt_ctrl+0x9d2>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_PHY_REQ) {
   13362:	2916      	cmp	r1, #22
   13364:	f47f ac12 	bne.w	12b8c <isr_rx_conn_pkt_ctrl+0x1ac>
		if (rej_ext_ind->error_code != 0x23) {
   13368:	7b61      	ldrb	r1, [r4, #13]
   1336a:	2923      	cmp	r1, #35	; 0x23
   1336c:	d00e      	beq.n	1338c <isr_rx_conn_pkt_ctrl+0x9ac>
				_radio.conn_curr->phy_tx;
   1336e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
			_radio.conn_curr->llcp_phy.ack =
   13372:	f883 00f5 	strb.w	r0, [r3, #245]	; 0xf5
			_radio.conn_curr->phy_tx_time =
   13376:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
   1337a:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   1337e:	f362 0002 	bfi	r0, r2, #0, #3
			_radio.conn_curr->procedure_expire = 0;
   13382:	2200      	movs	r2, #0
			_radio.conn_curr->phy_tx_time =
   13384:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
			_radio.conn_curr->procedure_expire = 0;
   13388:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		if (!_radio.conn_curr->llcp_phy.cmd) {
   1338c:	f893 20f7 	ldrb.w	r2, [r3, #247]	; 0xf7
   13390:	0792      	lsls	r2, r2, #30
   13392:	f57f abfb 	bpl.w	12b8c <isr_rx_conn_pkt_ctrl+0x1ac>
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   13396:	220c      	movs	r2, #12
		p->status = rej_ext_ind->error_code;
   13398:	72e1      	strb	r1, [r4, #11]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   1339a:	7122      	strb	r2, [r4, #4]
		p->tx = _radio.conn_curr->phy_tx;
   1339c:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   133a0:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   133a4:	7322      	strb	r2, [r4, #12]
		p->rx = _radio.conn_curr->phy_rx;
   133a6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   133aa:	f3c3 0302 	ubfx	r3, r3, #0, #3
   133ae:	7363      	strb	r3, [r4, #13]
   133b0:	e419      	b.n	12be6 <isr_rx_conn_pkt_ctrl+0x206>
		   _radio.conn_curr->llcp_conn_param.req) {
   133b2:	f893 70c0 	ldrb.w	r7, [r3, #192]	; 0xc0
	} else if (_radio.conn_curr->llcp_conn_param.ack !=
   133b6:	f893 00c1 	ldrb.w	r0, [r3, #193]	; 0xc1
   133ba:	42b8      	cmp	r0, r7
   133bc:	d048      	beq.n	13450 <isr_rx_conn_pkt_ctrl+0xa70>
	if (rej_ext_ind->reject_opcode != PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ) {
   133be:	290f      	cmp	r1, #15
   133c0:	f47f abe4 	bne.w	12b8c <isr_rx_conn_pkt_ctrl+0x1ac>
   133c4:	f993 001d 	ldrsb.w	r0, [r3, #29]
   133c8:	7b61      	ldrb	r1, [r4, #13]
	if (!conn->role && (rej_ext_ind->error_code == 0x1a)) {
   133ca:	2800      	cmp	r0, #0
   133cc:	db0e      	blt.n	133ec <isr_rx_conn_pkt_ctrl+0xa0c>
   133ce:	291a      	cmp	r1, #26
   133d0:	d10c      	bne.n	133ec <isr_rx_conn_pkt_ctrl+0xa0c>
		LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   133d2:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
   133d6:	f893 4075 	ldrb.w	r4, [r3, #117]	; 0x75
   133da:	4294      	cmp	r4, r2
   133dc:	f000 80c8 	beq.w	13570 <isr_rx_conn_pkt_ctrl+0xb90>
   133e0:	4b5b      	ldr	r3, [pc, #364]	; (13550 <isr_rx_conn_pkt_ctrl+0xb70>)
   133e2:	9301      	str	r3, [sp, #4]
   133e4:	9300      	str	r3, [sp, #0]
   133e6:	4b60      	ldr	r3, [pc, #384]	; (13568 <isr_rx_conn_pkt_ctrl+0xb88>)
   133e8:	f7ff bb40 	b.w	12a6c <isr_rx_conn_pkt_ctrl+0x8c>
	else if (rej_ext_ind->error_code != 0x23) {
   133ec:	2923      	cmp	r1, #35	; 0x23
   133ee:	d018      	beq.n	13422 <isr_rx_conn_pkt_ctrl+0xa42>
		LL_ASSERT(_radio.conn_upd == conn);
   133f0:	f8d2 6790 	ldr.w	r6, [r2, #1936]	; 0x790
   133f4:	42b3      	cmp	r3, r6
   133f6:	d007      	beq.n	13408 <isr_rx_conn_pkt_ctrl+0xa28>
   133f8:	4b55      	ldr	r3, [pc, #340]	; (13550 <isr_rx_conn_pkt_ctrl+0xb70>)
   133fa:	9301      	str	r3, [sp, #4]
   133fc:	9300      	str	r3, [sp, #0]
   133fe:	4b5a      	ldr	r3, [pc, #360]	; (13568 <isr_rx_conn_pkt_ctrl+0xb88>)
			LL_ASSERT(_radio.conn_upd == conn);
   13400:	4a54      	ldr	r2, [pc, #336]	; (13554 <isr_rx_conn_pkt_ctrl+0xb74>)
   13402:	4956      	ldr	r1, [pc, #344]	; (1355c <isr_rx_conn_pkt_ctrl+0xb7c>)
   13404:	4859      	ldr	r0, [pc, #356]	; (1356c <isr_rx_conn_pkt_ctrl+0xb8c>)
   13406:	e42d      	b.n	12c64 <isr_rx_conn_pkt_ctrl+0x284>
		_radio.conn_upd = NULL;
   13408:	2600      	movs	r6, #0
		if (conn->role) {
   1340a:	42b0      	cmp	r0, r6
		_radio.conn_upd = NULL;
   1340c:	f8c2 6790 	str.w	r6, [r2, #1936]	; 0x790
			conn->slave.ticks_to_offset =
   13410:	bfb8      	it	lt
   13412:	f8d3 20e4 	ldrlt.w	r2, [r3, #228]	; 0xe4
		conn->llcp_conn_param.ack =
   13416:	f883 70c1 	strb.w	r7, [r3, #193]	; 0xc1
		conn->procedure_expire = 0;
   1341a:	f8a3 6044 	strh.w	r6, [r3, #68]	; 0x44
			conn->slave.ticks_to_offset =
   1341e:	bfb8      	it	lt
   13420:	671a      	strlt	r2, [r3, #112]	; 0x70
	if (!conn->llcp_conn_param.cmd) {
   13422:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
   13426:	0717      	lsls	r7, r2, #28
   13428:	f57f abb0 	bpl.w	12b8c <isr_rx_conn_pkt_ctrl+0x1ac>
	cp->status = rej_ext_ind->error_code;
   1342c:	72e1      	strb	r1, [r4, #11]
	node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   1342e:	2208      	movs	r2, #8
	cp->latency = conn->latency;
   13430:	8cd9      	ldrh	r1, [r3, #38]	; 0x26
	node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   13432:	7122      	strb	r2, [r4, #4]
	cp->interval = conn->conn_interval;
   13434:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
	cp->timeout = conn->supervision_reload *
   13436:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
	cp->interval = conn->conn_interval;
   13438:	81a2      	strh	r2, [r4, #12]
	cp->timeout = conn->supervision_reload *
   1343a:	435a      	muls	r2, r3
		      conn->conn_interval * 125 / 1000;
   1343c:	237d      	movs	r3, #125	; 0x7d
   1343e:	4353      	muls	r3, r2
	cp->latency = conn->latency;
   13440:	81e1      	strh	r1, [r4, #14]
	cp->timeout = conn->supervision_reload *
   13442:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   13446:	fb93 f3f2 	sdiv	r3, r3, r2
   1344a:	8223      	strh	r3, [r4, #16]
   1344c:	f7ff bbcb 	b.w	12be6 <isr_rx_conn_pkt_ctrl+0x206>
		   _radio.conn_curr->llcp_length.req) {
   13450:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
	} else if (_radio.conn_curr->llcp_length.ack !=
   13454:	f893 00e9 	ldrb.w	r0, [r3, #233]	; 0xe9
   13458:	4290      	cmp	r0, r2
   1345a:	d01a      	beq.n	13492 <isr_rx_conn_pkt_ctrl+0xab2>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
   1345c:	2914      	cmp	r1, #20
   1345e:	f47f ab95 	bne.w	12b8c <isr_rx_conn_pkt_ctrl+0x1ac>
		conn->llcp_length.ack = conn->llcp_length.req;
   13462:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
		conn->pause_tx = 0;
   13466:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
		conn->procedure_expire = 0;
   1346a:	2000      	movs	r0, #0
		conn->pause_tx = 0;
   1346c:	f360 02c3 	bfi	r2, r0, #3, #1
   13470:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		pdu_data_rx->len = offsetof(struct pdu_data_llctrl,
   13474:	2209      	movs	r2, #9
		conn->procedure_expire = 0;
   13476:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
		pdu_data_rx->len = offsetof(struct pdu_data_llctrl,
   1347a:	7262      	strb	r2, [r4, #9]
		pdu_data_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   1347c:	2215      	movs	r2, #21
   1347e:	72e2      	strb	r2, [r4, #11]
		lr->max_rx_octets = conn->max_rx_octets;
   13480:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
   13482:	81a2      	strh	r2, [r4, #12]
		lr->max_tx_octets = conn->max_tx_octets;
   13484:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
   13486:	8222      	strh	r2, [r4, #16]
		lr->max_rx_time = conn->max_rx_time;
   13488:	8eda      	ldrh	r2, [r3, #54]	; 0x36
		lr->max_tx_time = conn->max_tx_time;
   1348a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
		lr->max_rx_time = conn->max_rx_time;
   1348c:	81e2      	strh	r2, [r4, #14]
		lr->max_tx_time = conn->max_tx_time;
   1348e:	8263      	strh	r3, [r4, #18]
   13490:	e57d      	b.n	12f8e <isr_rx_conn_pkt_ctrl+0x5ae>
		switch (rej_ext_ind->reject_opcode) {
   13492:	2903      	cmp	r1, #3
   13494:	f47f ab7a 	bne.w	12b8c <isr_rx_conn_pkt_ctrl+0x1ac>
			_radio.conn_curr->pause_rx = 0;
   13498:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
   1349c:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
   134a0:	f36f 02c3 	bfc	r2, #3, #1
			_radio.conn_curr->procedure_expire = 0;
   134a4:	2000      	movs	r0, #0
			_radio.conn_curr->pause_tx = 0;
   134a6:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->procedure_expire = 0;
   134aa:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
			pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   134ae:	230d      	movs	r3, #13
   134b0:	72e3      	strb	r3, [r4, #11]
			pdu_rx->llctrl.reject_ind.error_code =
   134b2:	7b63      	ldrb	r3, [r4, #13]
   134b4:	7323      	strb	r3, [r4, #12]
   134b6:	e56a      	b.n	12f8e <isr_rx_conn_pkt_ctrl+0x5ae>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_REQ,
   134b8:	7a41      	ldrb	r1, [r0, #9]
   134ba:	2012      	movs	r0, #18
   134bc:	f7fb f838 	bl	e530 <pdu_len_cmp>
   134c0:	2800      	cmp	r0, #0
   134c2:	f000 837b 	beq.w	13bbc <isr_rx_conn_pkt_ctrl+0x11dc>
		nack = ping_resp_send(_radio.conn_curr);
   134c6:	4827      	ldr	r0, [pc, #156]	; (13564 <isr_rx_conn_pkt_ctrl+0xb84>)
   134c8:	f8d0 471c 	ldr.w	r4, [r0, #1820]	; 0x71c
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   134cc:	f200 7064 	addw	r0, r0, #1892	; 0x764
   134d0:	f7f8 f985 	bl	b7de <mem_acquire>
	if (!node_tx) {
   134d4:	4601      	mov	r1, r0
   134d6:	2800      	cmp	r0, #0
   134d8:	f43f ac95 	beq.w	12e06 <isr_rx_conn_pkt_ctrl+0x426>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   134dc:	7903      	ldrb	r3, [r0, #4]
   134de:	f043 0303 	orr.w	r3, r3, #3
   134e2:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
   134e4:	2301      	movs	r3, #1
   134e6:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   134e8:	2313      	movs	r3, #19
   134ea:	e4c7      	b.n	12e7c <isr_rx_conn_pkt_ctrl+0x49c>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_RSP,
   134ec:	7a41      	ldrb	r1, [r0, #9]
   134ee:	2013      	movs	r0, #19
   134f0:	f7fb f81e 	bl	e530 <pdu_len_cmp>
   134f4:	2800      	cmp	r0, #0
   134f6:	f000 8361 	beq.w	13bbc <isr_rx_conn_pkt_ctrl+0x11dc>
		_radio.conn_curr->procedure_expire = 0;
   134fa:	4b1a      	ldr	r3, [pc, #104]	; (13564 <isr_rx_conn_pkt_ctrl+0xb84>)
   134fc:	f8d3 371c 	ldr.w	r3, [r3, #1820]	; 0x71c
   13500:	e468      	b.n	12dd4 <isr_rx_conn_pkt_ctrl+0x3f4>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP,
   13502:	7a41      	ldrb	r1, [r0, #9]
   13504:	2007      	movs	r0, #7
   13506:	f7fb f813 	bl	e530 <pdu_len_cmp>
   1350a:	2800      	cmp	r0, #0
   1350c:	f000 8356 	beq.w	13bbc <isr_rx_conn_pkt_ctrl+0x11dc>
		} else if (_radio.conn_curr->llcp_conn_param.ack !=
   13510:	4a14      	ldr	r2, [pc, #80]	; (13564 <isr_rx_conn_pkt_ctrl+0xb84>)
   13512:	f8d2 371c 	ldr.w	r3, [r2, #1820]	; 0x71c
   13516:	f893 10c1 	ldrb.w	r1, [r3, #193]	; 0xc1
			   _radio.conn_curr->llcp_conn_param.req) {
   1351a:	f893 60c0 	ldrb.w	r6, [r3, #192]	; 0xc0
		} else if (_radio.conn_curr->llcp_conn_param.ack !=
   1351e:	42b1      	cmp	r1, r6
   13520:	4611      	mov	r1, r2
   13522:	d077      	beq.n	13614 <isr_rx_conn_pkt_ctrl+0xc34>
			conn->llcp_conn_param.disabled = 1;
   13524:	f893 00c2 	ldrb.w	r0, [r3, #194]	; 0xc2
   13528:	f040 0010 	orr.w	r0, r0, #16
   1352c:	f883 00c2 	strb.w	r0, [r3, #194]	; 0xc2
			if (!conn->role) {
   13530:	f993 001d 	ldrsb.w	r0, [r3, #29]
   13534:	2800      	cmp	r0, #0
   13536:	db47      	blt.n	135c8 <isr_rx_conn_pkt_ctrl+0xbe8>
				LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   13538:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
   1353c:	f893 4075 	ldrb.w	r4, [r3, #117]	; 0x75
   13540:	4294      	cmp	r4, r2
   13542:	d015      	beq.n	13570 <isr_rx_conn_pkt_ctrl+0xb90>
   13544:	4b02      	ldr	r3, [pc, #8]	; (13550 <isr_rx_conn_pkt_ctrl+0xb70>)
   13546:	9301      	str	r3, [sp, #4]
   13548:	9300      	str	r3, [sp, #0]
   1354a:	4b03      	ldr	r3, [pc, #12]	; (13558 <isr_rx_conn_pkt_ctrl+0xb78>)
   1354c:	f7ff ba8e 	b.w	12a6c <isr_rx_conn_pkt_ctrl+0x8c>
   13550:	00023dae 	.word	0x00023dae
   13554:	00022d76 	.word	0x00022d76
   13558:	00025a6c 	.word	0x00025a6c
   1355c:	000272d8 	.word	0x000272d8
   13560:	00023fa5 	.word	0x00023fa5
   13564:	20000bf0 	.word	0x20000bf0
   13568:	00025a31 	.word	0x00025a31
   1356c:	00026405 	.word	0x00026405
				conn->llcp_conn_param.state =
   13570:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
   13574:	2105      	movs	r1, #5
   13576:	f361 0202 	bfi	r2, r1, #0, #3
				conn->llcp.conn_upd.interval =
   1357a:	f8b3 10c4 	ldrh.w	r1, [r3, #196]	; 0xc4
   1357e:	f8a3 107a 	strh.w	r1, [r3, #122]	; 0x7a
				conn->llcp.conn_upd.latency =
   13582:	f8b3 10c6 	ldrh.w	r1, [r3, #198]	; 0xc6
   13586:	f8a3 107c 	strh.w	r1, [r3, #124]	; 0x7c
				conn->llcp.conn_upd.timeout =
   1358a:	f8b3 10c8 	ldrh.w	r1, [r3, #200]	; 0xc8
   1358e:	f8a3 107e 	strh.w	r1, [r3, #126]	; 0x7e
				conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   13592:	f893 1078 	ldrb.w	r1, [r3, #120]	; 0x78
				conn->llcp_conn_param.state =
   13596:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
				conn->llcp.conn_upd.win_size = 1;
   1359a:	2501      	movs	r5, #1
					!conn->llcp_conn_param.cmd;
   1359c:	f082 0208 	eor.w	r2, r2, #8
				conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   135a0:	f365 0101 	bfi	r1, r5, #0, #2
					!conn->llcp_conn_param.cmd;
   135a4:	f3c2 02c0 	ubfx	r2, r2, #3, #1
				conn->llcp.conn_upd.win_offset_us = 0;
   135a8:	2000      	movs	r0, #0
				conn->llcp.conn_upd.is_internal =
   135aa:	f362 0182 	bfi	r1, r2, #2, #1
				conn->llcp_ack--;
   135ae:	3c01      	subs	r4, #1
				conn->llcp.conn_upd.win_size = 1;
   135b0:	f883 5088 	strb.w	r5, [r3, #136]	; 0x88
				conn->llcp.conn_upd.win_offset_us = 0;
   135b4:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
				conn->llcp.conn_upd.is_internal =
   135b8:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
				conn->llcp_type = LLCP_CONN_UPD;
   135bc:	f883 5076 	strb.w	r5, [r3, #118]	; 0x76
				conn->llcp_ack--;
   135c0:	f883 4075 	strb.w	r4, [r3, #117]	; 0x75
				break;
   135c4:	f7ff bad2 	b.w	12b6c <isr_rx_conn_pkt_ctrl+0x18c>
			LL_ASSERT(_radio.conn_upd == conn);
   135c8:	f8d2 2790 	ldr.w	r2, [r2, #1936]	; 0x790
   135cc:	4293      	cmp	r3, r2
   135ce:	d004      	beq.n	135da <isr_rx_conn_pkt_ctrl+0xbfa>
   135d0:	4bcb      	ldr	r3, [pc, #812]	; (13900 <isr_rx_conn_pkt_ctrl+0xf20>)
   135d2:	9301      	str	r3, [sp, #4]
   135d4:	9300      	str	r3, [sp, #0]
   135d6:	4bcb      	ldr	r3, [pc, #812]	; (13904 <isr_rx_conn_pkt_ctrl+0xf24>)
   135d8:	e712      	b.n	13400 <isr_rx_conn_pkt_ctrl+0xa20>
			_radio.conn_upd = NULL;
   135da:	2200      	movs	r2, #0
   135dc:	f8c1 2790 	str.w	r2, [r1, #1936]	; 0x790
			if (!conn->llcp_conn_param.cmd) {
   135e0:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   135e4:	f883 60c1 	strb.w	r6, [r3, #193]	; 0xc1
			if (!conn->llcp_conn_param.cmd) {
   135e8:	0716      	lsls	r6, r2, #28
   135ea:	f57f aacf 	bpl.w	12b8c <isr_rx_conn_pkt_ctrl+0x1ac>
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   135ee:	2208      	movs	r2, #8
   135f0:	7122      	strb	r2, [r4, #4]
			cp->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   135f2:	221a      	movs	r2, #26
   135f4:	72e2      	strb	r2, [r4, #11]
			cp->interval = conn->conn_interval;
   135f6:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
			cp->latency = conn->latency;
   135f8:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
			cp->timeout = conn->supervision_reload *
   135fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
			cp->interval = conn->conn_interval;
   135fc:	81a2      	strh	r2, [r4, #12]
			cp->timeout = conn->supervision_reload *
   135fe:	435a      	muls	r2, r3
				      conn->conn_interval * 125 / 1000;
   13600:	237d      	movs	r3, #125	; 0x7d
   13602:	4353      	muls	r3, r2
			cp->latency = conn->latency;
   13604:	81e0      	strh	r0, [r4, #14]
			cp->timeout = conn->supervision_reload *
   13606:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1360a:	fb93 f3f2 	sdiv	r3, r3, r2
   1360e:	8223      	strh	r3, [r4, #16]
   13610:	f7ff bb73 	b.w	12cfa <isr_rx_conn_pkt_ctrl+0x31a>
		} else if (_radio.conn_curr->llcp_length.req !=
   13614:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
   13618:	f893 00e9 	ldrb.w	r0, [r3, #233]	; 0xe9
   1361c:	4290      	cmp	r0, r2
   1361e:	d009      	beq.n	13634 <isr_rx_conn_pkt_ctrl+0xc54>
			_radio.conn_curr->llcp_length.ack =
   13620:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
			_radio.conn_curr->pause_tx = 0;
   13624:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   13628:	f36f 02c3 	bfc	r2, #3, #1
   1362c:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
   13630:	f7ff bb63 	b.w	12cfa <isr_rx_conn_pkt_ctrl+0x31a>
		} else if (_radio.conn_curr->llcp_phy.req !=
   13634:	f893 20f4 	ldrb.w	r2, [r3, #244]	; 0xf4
   13638:	f893 00f5 	ldrb.w	r0, [r3, #245]	; 0xf5
   1363c:	4290      	cmp	r0, r2
   1363e:	d01b      	beq.n	13678 <isr_rx_conn_pkt_ctrl+0xc98>
			_radio.conn_curr->llcp_phy.ack =
   13640:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
				_radio.conn_curr->phy_tx;
   13644:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
			_radio.conn_curr->phy_tx_time =
   13648:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
				_radio.conn_curr->phy_tx;
   1364c:	f3c2 02c2 	ubfx	r2, r2, #3, #3
			_radio.conn_curr->phy_tx_time =
   13650:	f362 0002 	bfi	r0, r2, #0, #3
   13654:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
			if (_radio.conn_curr->llcp_phy.cmd) {
   13658:	f893 00f7 	ldrb.w	r0, [r3, #247]	; 0xf7
   1365c:	0780      	lsls	r0, r0, #30
   1365e:	d50f      	bpl.n	13680 <isr_rx_conn_pkt_ctrl+0xca0>
				node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   13660:	200c      	movs	r0, #12
   13662:	7120      	strb	r0, [r4, #4]
				p->status = 0;
   13664:	2000      	movs	r0, #0
   13666:	72e0      	strb	r0, [r4, #11]
				p->tx = _radio.conn_curr->phy_tx;
   13668:	7322      	strb	r2, [r4, #12]
				p->rx = _radio.conn_curr->phy_rx;
   1366a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   1366e:	f3c3 0302 	ubfx	r3, r3, #0, #3
   13672:	7363      	strb	r3, [r4, #13]
   13674:	f7ff bb41 	b.w	12cfa <isr_rx_conn_pkt_ctrl+0x31a>
			switch (llctrl->unknown_rsp.type) {
   13678:	7b23      	ldrb	r3, [r4, #12]
   1367a:	2b12      	cmp	r3, #18
   1367c:	f47f ab3d 	bne.w	12cfa <isr_rx_conn_pkt_ctrl+0x31a>
		_radio.conn_curr->procedure_expire = 0;
   13680:	f8d1 371c 	ldr.w	r3, [r1, #1820]	; 0x71c
   13684:	f7ff bba6 	b.w	12dd4 <isr_rx_conn_pkt_ctrl+0x3f4>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_LENGTH_REQ,
   13688:	7a41      	ldrb	r1, [r0, #9]
   1368a:	2014      	movs	r0, #20
   1368c:	f7fa ff50 	bl	e530 <pdu_len_cmp>
   13690:	2800      	cmp	r0, #0
   13692:	f000 8293 	beq.w	13bbc <isr_rx_conn_pkt_ctrl+0x11dc>
	if (pdu_data_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
   13696:	2f14      	cmp	r7, #20
   13698:	d127      	bne.n	136ea <isr_rx_conn_pkt_ctrl+0xd0a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   1369a:	489b      	ldr	r0, [pc, #620]	; (13908 <isr_rx_conn_pkt_ctrl+0xf28>)
   1369c:	f7f8 f89f 	bl	b7de <mem_acquire>
		if (!node_tx) {
   136a0:	4606      	mov	r6, r0
   136a2:	2800      	cmp	r0, #0
   136a4:	f43f abaf 	beq.w	12e06 <isr_rx_conn_pkt_ctrl+0x426>
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
   136a8:	4f98      	ldr	r7, [pc, #608]	; (1390c <isr_rx_conn_pkt_ctrl+0xf2c>)
   136aa:	f8d7 371c 	ldr.w	r3, [r7, #1820]	; 0x71c
	if (/* Local idle, and Peer request then complete the Peer procedure
   136ae:	f893 80e9 	ldrb.w	r8, [r3, #233]	; 0xe9
	    ((_radio.conn_curr->llcp_length.req ==
   136b2:	f893 c0e8 	ldrb.w	ip, [r3, #232]	; 0xe8
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
   136b6:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
   136b8:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
	eff_rx_time = _radio.conn_curr->max_rx_time;
   136ba:	8ed8      	ldrh	r0, [r3, #54]	; 0x36
	eff_tx_time = _radio.conn_curr->max_tx_time;
   136bc:	f8b3 e034 	ldrh.w	lr, [r3, #52]	; 0x34
	if (/* Local idle, and Peer request then complete the Peer procedure
   136c0:	45e0      	cmp	r8, ip
   136c2:	46ba      	mov	sl, r7
   136c4:	f894 800b 	ldrb.w	r8, [r4, #11]
   136c8:	d111      	bne.n	136ee <isr_rx_conn_pkt_ctrl+0xd0e>
	      _radio.conn_curr->llcp_length.ack) &&
   136ca:	f1b8 0f14 	cmp.w	r8, #20
   136ce:	d01a      	beq.n	13706 <isr_rx_conn_pkt_ctrl+0xd26>
		LL_ASSERT(pdu_data_rx->llctrl.opcode ==
   136d0:	f1b8 0f15 	cmp.w	r8, #21
   136d4:	f000 8296 	beq.w	13c04 <isr_rx_conn_pkt_ctrl+0x1224>
   136d8:	4b89      	ldr	r3, [pc, #548]	; (13900 <isr_rx_conn_pkt_ctrl+0xf20>)
   136da:	9301      	str	r3, [sp, #4]
   136dc:	9300      	str	r3, [sp, #0]
   136de:	4a8c      	ldr	r2, [pc, #560]	; (13910 <isr_rx_conn_pkt_ctrl+0xf30>)
   136e0:	4b8c      	ldr	r3, [pc, #560]	; (13914 <isr_rx_conn_pkt_ctrl+0xf34>)
   136e2:	498d      	ldr	r1, [pc, #564]	; (13918 <isr_rx_conn_pkt_ctrl+0xf38>)
   136e4:	488d      	ldr	r0, [pc, #564]	; (1391c <isr_rx_conn_pkt_ctrl+0xf3c>)
   136e6:	f7ff babd 	b.w	12c64 <isr_rx_conn_pkt_ctrl+0x284>
	struct radio_pdu_node_tx *node_tx = NULL;
   136ea:	2600      	movs	r6, #0
   136ec:	e7dc      	b.n	136a8 <isr_rx_conn_pkt_ctrl+0xcc8>
		 LLCP_LENGTH_STATE_REQ) ||
   136ee:	f893 70ea 	ldrb.w	r7, [r3, #234]	; 0xea
   136f2:	f007 0703 	and.w	r7, r7, #3
	      _radio.conn_curr->llcp_length.ack) &&
   136f6:	2f01      	cmp	r7, #1
   136f8:	d9e7      	bls.n	136ca <isr_rx_conn_pkt_ctrl+0xcea>
		PDU_DATA_LLCTRL_TYPE_LENGTH_REQ)) ||
   136fa:	2f02      	cmp	r7, #2
   136fc:	d1e8      	bne.n	136d0 <isr_rx_conn_pkt_ctrl+0xcf0>
		LLCP_LENGTH_STATE_RSP_WAIT) &&
   136fe:	f1a8 0714 	sub.w	r7, r8, #20
   13702:	2f01      	cmp	r7, #1
   13704:	d8e4      	bhi.n	136d0 <isr_rx_conn_pkt_ctrl+0xcf0>
		if (lr->max_rx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
   13706:	89a7      	ldrh	r7, [r4, #12]
   13708:	2f1a      	cmp	r7, #26
   1370a:	d936      	bls.n	1377a <isr_rx_conn_pkt_ctrl+0xd9a>
			eff_tx_octets = min(lr->max_rx_octets,
   1370c:	f8b3 802c 	ldrh.w	r8, [r3, #44]	; 0x2c
   13710:	4547      	cmp	r7, r8
   13712:	bf28      	it	cs
   13714:	4647      	movcs	r7, r8
		if (lr->max_tx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
   13716:	f8b4 8010 	ldrh.w	r8, [r4, #16]
			eff_rx_octets = min(lr->max_tx_octets,
   1371a:	f1b8 0f1b 	cmp.w	r8, #27
		if (lr->max_rx_time >=
   1371e:	f8b4 800e 	ldrh.w	r8, [r4, #14]
			eff_rx_octets = min(lr->max_tx_octets,
   13722:	bf34      	ite	cc
   13724:	4693      	movcc	fp, r2
   13726:	f04f 0b1b 	movcs.w	fp, #27
		if (lr->max_rx_time >=
   1372a:	f5b8 7fa4 	cmp.w	r8, #328	; 0x148
   1372e:	d326      	bcc.n	1377e <isr_rx_conn_pkt_ctrl+0xd9e>
			eff_tx_time = min(lr->max_rx_time,
   13730:	f8b3 9032 	ldrh.w	r9, [r3, #50]	; 0x32
   13734:	45c8      	cmp	r8, r9
   13736:	bf28      	it	cs
   13738:	46c8      	movcs	r8, r9
		if (lr->max_tx_time >=
   1373a:	f8b4 9012 	ldrh.w	r9, [r4, #18]
   1373e:	f5b9 7fa4 	cmp.w	r9, #328	; 0x148
   13742:	d31e      	bcc.n	13782 <isr_rx_conn_pkt_ctrl+0xda2>
			eff_rx_time = min(lr->max_tx_time,
   13744:	f5b9 6f29 	cmp.w	r9, #2704	; 0xa90
   13748:	bf28      	it	cs
   1374a:	f44f 6929 	movcs.w	r9, #2704	; 0xa90
		if (eff_rx_octets != _radio.conn_curr->max_rx_octets) {
   1374e:	455a      	cmp	r2, fp
   13750:	d052      	beq.n	137f8 <isr_rx_conn_pkt_ctrl+0xe18>
			free_count_rx = packet_rx_acquired_count_get() +
   13752:	f7fa ff35 	bl	e5c0 <packet_rx_acquired_count_get>
   13756:	4604      	mov	r4, r0
				mem_free_count_get(_radio.pkt_rx_data_free);
   13758:	f8da 0738 	ldr.w	r0, [sl, #1848]	; 0x738
   1375c:	f7f8 f86e 	bl	b83c <mem_free_count_get>
			free_count_rx = packet_rx_acquired_count_get() +
   13760:	4420      	add	r0, r4
   13762:	b280      	uxth	r0, r0
			LL_ASSERT(free_count_rx <= 0xFF);
   13764:	28ff      	cmp	r0, #255	; 0xff
   13766:	d90e      	bls.n	13786 <isr_rx_conn_pkt_ctrl+0xda6>
   13768:	4b65      	ldr	r3, [pc, #404]	; (13900 <isr_rx_conn_pkt_ctrl+0xf20>)
   1376a:	9301      	str	r3, [sp, #4]
   1376c:	9300      	str	r3, [sp, #0]
   1376e:	4a68      	ldr	r2, [pc, #416]	; (13910 <isr_rx_conn_pkt_ctrl+0xf30>)
   13770:	4b68      	ldr	r3, [pc, #416]	; (13914 <isr_rx_conn_pkt_ctrl+0xf34>)
   13772:	4969      	ldr	r1, [pc, #420]	; (13918 <isr_rx_conn_pkt_ctrl+0xf38>)
   13774:	486a      	ldr	r0, [pc, #424]	; (13920 <isr_rx_conn_pkt_ctrl+0xf40>)
   13776:	f7ff ba75 	b.w	12c64 <isr_rx_conn_pkt_ctrl+0x284>
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
   1377a:	460f      	mov	r7, r1
   1377c:	e7cb      	b.n	13716 <isr_rx_conn_pkt_ctrl+0xd36>
	eff_tx_time = _radio.conn_curr->max_tx_time;
   1377e:	46f0      	mov	r8, lr
   13780:	e7db      	b.n	1373a <isr_rx_conn_pkt_ctrl+0xd5a>
	eff_rx_time = _radio.conn_curr->max_rx_time;
   13782:	4681      	mov	r9, r0
   13784:	e7e3      	b.n	1374e <isr_rx_conn_pkt_ctrl+0xd6e>
			if (_radio.packet_rx_data_count == free_count_rx) {
   13786:	f89a 3742 	ldrb.w	r3, [sl, #1858]	; 0x742
   1378a:	4283      	cmp	r3, r0
   1378c:	f040 8231 	bne.w	13bf2 <isr_rx_conn_pkt_ctrl+0x1212>
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
   13790:	f8da 371c 	ldr.w	r3, [sl, #1820]	; 0x71c
					(_radio.conn_curr->llcp_length.req - 1);
   13794:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
   13798:	85df      	strh	r7, [r3, #46]	; 0x2e
					(_radio.conn_curr->llcp_length.req - 1);
   1379a:	3a01      	subs	r2, #1
				_radio.conn_curr->llcp_length.ack =
   1379c:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
				_radio.conn_curr->llcp_length.state =
   137a0:	f893 20ea 	ldrb.w	r2, [r3, #234]	; 0xea
				_radio.conn_curr->llcp_length.rx_octets =
   137a4:	f8a3 b0ec 	strh.w	fp, [r3, #236]	; 0xec
				_radio.conn_curr->llcp_length.state =
   137a8:	f042 0203 	orr.w	r2, r2, #3
				_radio.conn_curr->llcp_length.tx_octets =
   137ac:	f8a3 70ee 	strh.w	r7, [r3, #238]	; 0xee
				_radio.conn_curr->max_tx_time = eff_tx_time;
   137b0:	f8a3 8034 	strh.w	r8, [r3, #52]	; 0x34
				_radio.conn_curr->llcp_length.rx_time =
   137b4:	f8a3 90f0 	strh.w	r9, [r3, #240]	; 0xf0
				_radio.conn_curr->llcp_length.tx_time =
   137b8:	f8a3 80f2 	strh.w	r8, [r3, #242]	; 0xf2
				_radio.conn_curr->llcp_length.state =
   137bc:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
				_radio.state = STATE_CLOSE;
   137c0:	2303      	movs	r3, #3
   137c2:	f88a 3014 	strb.w	r3, [sl, #20]
	if (node_tx) {
   137c6:	2e00      	cmp	r6, #0
   137c8:	f43f a9e0 	beq.w	12b8c <isr_rx_conn_pkt_ctrl+0x1ac>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   137cc:	7933      	ldrb	r3, [r6, #4]
			length_resp_send(_radio.conn_curr, node_tx,
   137ce:	f8da 071c 	ldr.w	r0, [sl, #1820]	; 0x71c
	pdu_ctrl_tx->llctrl.length_rsp.max_rx_octets = eff_rx_octets;
   137d2:	f8a6 b008 	strh.w	fp, [r6, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   137d6:	f043 0303 	orr.w	r3, r3, #3
   137da:	7133      	strb	r3, [r6, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   137dc:	2309      	movs	r3, #9
   137de:	7173      	strb	r3, [r6, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   137e0:	2315      	movs	r3, #21
   137e2:	71f3      	strb	r3, [r6, #7]
	pdu_ctrl_tx->llctrl.length_rsp.max_tx_octets = eff_tx_octets;
   137e4:	81b7      	strh	r7, [r6, #12]
	pdu_ctrl_tx->llctrl.length_rsp.max_rx_time = eff_rx_time;
   137e6:	f8a6 900a 	strh.w	r9, [r6, #10]
	pdu_ctrl_tx->llctrl.length_rsp.max_tx_time = eff_tx_time;
   137ea:	f8a6 800e 	strh.w	r8, [r6, #14]
	ctrl_tx_enqueue(conn, node_tx);
   137ee:	4631      	mov	r1, r6
	ctrl_tx_enqueue(conn, node_tx);
   137f0:	f7fd fcc6 	bl	11180 <ctrl_tx_enqueue>
   137f4:	f7ff b9ca 	b.w	12b8c <isr_rx_conn_pkt_ctrl+0x1ac>
			_radio.conn_curr->pause_tx = 0;
   137f8:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->llcp_length.ack =
   137fc:	f883 c0e9 	strb.w	ip, [r3, #233]	; 0xe9
			_radio.conn_curr->procedure_expire = 0;
   13800:	f04f 0c00 	mov.w	ip, #0
			_radio.conn_curr->pause_tx = 0;
   13804:	f36c 02c3 	bfi	r2, ip, #3, #1
			if (eff_tx_octets == _radio.conn_curr->max_tx_octets &&
   13808:	42b9      	cmp	r1, r7
			_radio.conn_curr->procedure_expire = 0;
   1380a:	f8a3 c044 	strh.w	ip, [r3, #68]	; 0x44
			_radio.conn_curr->pause_tx = 0;
   1380e:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			if (eff_tx_octets == _radio.conn_curr->max_tx_octets &&
   13812:	d103      	bne.n	1381c <isr_rx_conn_pkt_ctrl+0xe3c>
   13814:	45c6      	cmp	lr, r8
   13816:	d101      	bne.n	1381c <isr_rx_conn_pkt_ctrl+0xe3c>
			    eff_tx_time == _radio.conn_curr->max_tx_time &&
   13818:	4548      	cmp	r0, r9
   1381a:	d0d4      	beq.n	137c6 <isr_rx_conn_pkt_ctrl+0xde6>
			_radio.conn_curr->max_tx_octets = eff_tx_octets;
   1381c:	85df      	strh	r7, [r3, #46]	; 0x2e
			_radio.conn_curr->max_rx_time = eff_rx_time;
   1381e:	f8a3 9036 	strh.w	r9, [r3, #54]	; 0x36
			_radio.conn_curr->max_tx_time = eff_tx_time;
   13822:	f8a3 8034 	strh.w	r8, [r3, #52]	; 0x34
			*rx_enqueue = 1;
   13826:	2301      	movs	r3, #1
			lr->max_rx_octets = eff_rx_octets;
   13828:	f8a4 b00c 	strh.w	fp, [r4, #12]
			lr->max_tx_octets = eff_tx_octets;
   1382c:	8227      	strh	r7, [r4, #16]
			lr->max_rx_time = eff_rx_time;
   1382e:	f8a4 900e 	strh.w	r9, [r4, #14]
			lr->max_tx_time = eff_tx_time;
   13832:	f8a4 8012 	strh.w	r8, [r4, #18]
			*rx_enqueue = 1;
   13836:	702b      	strb	r3, [r5, #0]
   13838:	e7c5      	b.n	137c6 <isr_rx_conn_pkt_ctrl+0xde6>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_REQ,
   1383a:	7a41      	ldrb	r1, [r0, #9]
   1383c:	2016      	movs	r0, #22
   1383e:	f7fa fe77 	bl	e530 <pdu_len_cmp>
   13842:	2800      	cmp	r0, #0
   13844:	f000 81ba 	beq.w	13bbc <isr_rx_conn_pkt_ctrl+0x11dc>
		if (_radio.role == ROLE_MASTER) {
   13848:	4830      	ldr	r0, [pc, #192]	; (1390c <isr_rx_conn_pkt_ctrl+0xf2c>)
   1384a:	7cc3      	ldrb	r3, [r0, #19]
   1384c:	2b04      	cmp	r3, #4
   1384e:	d169      	bne.n	13924 <isr_rx_conn_pkt_ctrl+0xf44>
			if ((_radio.conn_curr->llcp_phy.ack !=
   13850:	f8d0 071c 	ldr.w	r0, [r0, #1820]	; 0x71c
   13854:	f890 30f5 	ldrb.w	r3, [r0, #245]	; 0xf5
			     _radio.conn_curr->llcp_phy.req) &&
   13858:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
			if ((_radio.conn_curr->llcp_phy.ack !=
   1385c:	428b      	cmp	r3, r1
   1385e:	d00a      	beq.n	13876 <isr_rx_conn_pkt_ctrl+0xe96>
			      LLCP_PHY_STATE_RSP_WAIT) ||
   13860:	f890 20f6 	ldrb.w	r2, [r0, #246]	; 0xf6
   13864:	f002 0203 	and.w	r2, r2, #3
			     _radio.conn_curr->llcp_phy.req) &&
   13868:	3a01      	subs	r2, #1
   1386a:	2a02      	cmp	r2, #2
   1386c:	d803      	bhi.n	13876 <isr_rx_conn_pkt_ctrl+0xe96>
				nack = reject_ext_ind_send(_radio.conn_curr,
   1386e:	2223      	movs	r2, #35	; 0x23
				nack = reject_ext_ind_send(_radio.conn_curr,
   13870:	2116      	movs	r1, #22
   13872:	f7ff bba1 	b.w	12fb8 <isr_rx_conn_pkt_ctrl+0x5d8>
			} else if (((_radio.conn_curr->llcp_req !=
   13876:	f890 5074 	ldrb.w	r5, [r0, #116]	; 0x74
   1387a:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
   1387e:	4295      	cmp	r5, r2
   13880:	d003      	beq.n	1388a <isr_rx_conn_pkt_ctrl+0xeaa>
				     _radio.conn_curr->llcp_ack) &&
   13882:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
   13886:	2a03      	cmp	r2, #3
   13888:	d105      	bne.n	13896 <isr_rx_conn_pkt_ctrl+0xeb6>
				     LLCP_ENCRYPTION)) ||
   1388a:	f890 50c0 	ldrb.w	r5, [r0, #192]	; 0xc0
   1388e:	f890 20c1 	ldrb.w	r2, [r0, #193]	; 0xc1
   13892:	4295      	cmp	r5, r2
   13894:	d001      	beq.n	1389a <isr_rx_conn_pkt_ctrl+0xeba>
				nack = reject_ext_ind_send(_radio.conn_curr,
   13896:	222a      	movs	r2, #42	; 0x2a
   13898:	e7ea      	b.n	13870 <isr_rx_conn_pkt_ctrl+0xe90>
				_radio.conn_curr->llcp_phy.state =
   1389a:	f890 20f6 	ldrb.w	r2, [r0, #246]	; 0xf6
				if (_radio.conn_curr->llcp_phy.ack ==
   1389e:	428b      	cmp	r3, r1
				_radio.conn_curr->llcp_phy.state =
   138a0:	f042 0203 	orr.w	r2, r2, #3
   138a4:	f880 20f6 	strb.w	r2, [r0, #246]	; 0xf6
				if (_radio.conn_curr->llcp_phy.ack ==
   138a8:	d116      	bne.n	138d8 <isr_rx_conn_pkt_ctrl+0xef8>
					_radio.conn_curr->llcp_phy.ack--;
   138aa:	3b01      	subs	r3, #1
   138ac:	f880 30f5 	strb.w	r3, [r0, #245]	; 0xf5
					_radio.conn_curr->llcp_phy.cmd = 0;
   138b0:	f890 30f7 	ldrb.w	r3, [r0, #247]	; 0xf7
						_radio.conn_curr->phy_pref_tx;
   138b4:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
					_radio.conn_curr->llcp_phy.cmd = 0;
   138b8:	f36f 0341 	bfc	r3, #1, #1
   138bc:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
					_radio.conn_curr->llcp_phy.tx =
   138c0:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
   138c4:	f362 0384 	bfi	r3, r2, #2, #3
						_radio.conn_curr->phy_pref_rx;
   138c8:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
					_radio.conn_curr->llcp_phy.rx =
   138cc:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   138d0:	f362 1347 	bfi	r3, r2, #5, #3
   138d4:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
				_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
   138d8:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
   138dc:	7b62      	ldrb	r2, [r4, #13]
   138de:	f3c3 0182 	ubfx	r1, r3, #2, #3
   138e2:	400a      	ands	r2, r1
   138e4:	f362 0384 	bfi	r3, r2, #2, #3
   138e8:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
				_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
   138ec:	7b22      	ldrb	r2, [r4, #12]
   138ee:	b2db      	uxtb	r3, r3
   138f0:	ea02 1253 	and.w	r2, r2, r3, lsr #5
   138f4:	f362 1347 	bfi	r3, r2, #5, #3
   138f8:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
   138fc:	f7ff b946 	b.w	12b8c <isr_rx_conn_pkt_ctrl+0x1ac>
   13900:	00023dae 	.word	0x00023dae
   13904:	00025a6c 	.word	0x00025a6c
   13908:	20001354 	.word	0x20001354
   1390c:	20000bf0 	.word	0x20000bf0
   13910:	00022d76 	.word	0x00022d76
   13914:	00025a53 	.word	0x00025a53
   13918:	000272d8 	.word	0x000272d8
   1391c:	0002643e 	.word	0x0002643e
   13920:	00025fa5 	.word	0x00025fa5
			nack = phy_rsp_send(_radio.conn_curr, pdu_data_rx);
   13924:	f8d0 571c 	ldr.w	r5, [r0, #1820]	; 0x71c
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   13928:	f200 7064 	addw	r0, r0, #1892	; 0x764
   1392c:	f7f7 ff57 	bl	b7de <mem_acquire>
	if (!node_tx) {
   13930:	4601      	mov	r1, r0
   13932:	2800      	cmp	r0, #0
   13934:	f43f aa67 	beq.w	12e06 <isr_rx_conn_pkt_ctrl+0x426>
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   13938:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   1393c:	2202      	movs	r2, #2
   1393e:	f362 0301 	bfi	r3, r2, #0, #2
   13942:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	if (conn->llcp_phy.ack ==
   13946:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
   1394a:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
   1394e:	4293      	cmp	r3, r2
   13950:	d11a      	bne.n	13988 <isr_rx_conn_pkt_ctrl+0xfa8>
		conn->llcp_phy.ack--;
   13952:	3b01      	subs	r3, #1
   13954:	f885 30f5 	strb.w	r3, [r5, #245]	; 0xf5
		conn->llcp_phy.cmd = 0;
   13958:	f895 30f7 	ldrb.w	r3, [r5, #247]	; 0xf7
			conn->phy_pref_tx;
   1395c:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
		conn->llcp_phy.cmd = 0;
   13960:	f36f 0341 	bfc	r3, #1, #1
   13964:	f885 30f7 	strb.w	r3, [r5, #247]	; 0xf7
		conn->llcp_phy.tx =
   13968:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   1396c:	f362 0384 	bfi	r3, r2, #2, #3
			conn->phy_pref_rx;
   13970:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
		conn->llcp_phy.rx =
   13974:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   13978:	f362 1347 	bfi	r3, r2, #5, #3
   1397c:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
		conn->procedure_expire =
   13980:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
   13984:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
	conn->llcp_phy.tx &= p->rx_phys;
   13988:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   1398c:	7b62      	ldrb	r2, [r4, #13]
   1398e:	f3c3 0082 	ubfx	r0, r3, #2, #3
   13992:	4002      	ands	r2, r0
   13994:	f362 0384 	bfi	r3, r2, #2, #3
   13998:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	conn->llcp_phy.rx &= p->tx_phys;
   1399c:	7b22      	ldrb	r2, [r4, #12]
   1399e:	b2db      	uxtb	r3, r3
   139a0:	ea02 1253 	and.w	r2, r2, r3, lsr #5
   139a4:	f362 1347 	bfi	r3, r2, #5, #3
   139a8:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   139ac:	790b      	ldrb	r3, [r1, #4]
   139ae:	f043 0303 	orr.w	r3, r3, #3
   139b2:	710b      	strb	r3, [r1, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   139b4:	2303      	movs	r3, #3
   139b6:	714b      	strb	r3, [r1, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   139b8:	2317      	movs	r3, #23
   139ba:	71cb      	strb	r3, [r1, #7]
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   139bc:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   139c0:	f3c3 0302 	ubfx	r3, r3, #0, #3
   139c4:	720b      	strb	r3, [r1, #8]
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
   139c6:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
   139ca:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   139ce:	724b      	strb	r3, [r1, #9]
   139d0:	f7ff ba2b 	b.w	12e2a <isr_rx_conn_pkt_ctrl+0x44a>
		if (_radio.conn_curr->role ||
   139d4:	4e90      	ldr	r6, [pc, #576]	; (13c18 <isr_rx_conn_pkt_ctrl+0x1238>)
   139d6:	f8d6 571c 	ldr.w	r5, [r6, #1820]	; 0x71c
   139da:	f995 301d 	ldrsb.w	r3, [r5, #29]
   139de:	2b00      	cmp	r3, #0
   139e0:	f2c0 80ec 	blt.w	13bbc <isr_rx_conn_pkt_ctrl+0x11dc>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_RSP,
   139e4:	7a41      	ldrb	r1, [r0, #9]
   139e6:	2017      	movs	r0, #23
   139e8:	f7fa fda2 	bl	e530 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
   139ec:	2800      	cmp	r0, #0
   139ee:	f000 80e5 	beq.w	13bbc <isr_rx_conn_pkt_ctrl+0x11dc>
		if ((_radio.role == ROLE_MASTER) &&
   139f2:	7cf3      	ldrb	r3, [r6, #19]
   139f4:	2b04      	cmp	r3, #4
   139f6:	f47f a8c9 	bne.w	12b8c <isr_rx_conn_pkt_ctrl+0x1ac>
   139fa:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
   139fe:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
   13a02:	429a      	cmp	r2, r3
   13a04:	f43f a8c2 	beq.w	12b8c <isr_rx_conn_pkt_ctrl+0x1ac>
		    (_radio.conn_curr->llcp_phy.state ==
   13a08:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
		     _radio.conn_curr->llcp_phy.req) &&
   13a0c:	f003 0203 	and.w	r2, r3, #3
   13a10:	2a02      	cmp	r2, #2
   13a12:	f47f a8bb 	bne.w	12b8c <isr_rx_conn_pkt_ctrl+0x1ac>
			_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_UPD;
   13a16:	f043 0303 	orr.w	r3, r3, #3
   13a1a:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
   13a1e:	7b62      	ldrb	r2, [r4, #13]
   13a20:	f3c3 0182 	ubfx	r1, r3, #2, #3
   13a24:	400a      	ands	r2, r1
   13a26:	f362 0384 	bfi	r3, r2, #2, #3
   13a2a:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
   13a2e:	7b22      	ldrb	r2, [r4, #12]
   13a30:	b2db      	uxtb	r3, r3
   13a32:	ea02 1253 	and.w	r2, r2, r3, lsr #5
   13a36:	f362 1347 	bfi	r3, r2, #5, #3
   13a3a:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
   13a3e:	f7ff b858 	b.w	12af2 <isr_rx_conn_pkt_ctrl+0x112>
		if (!_radio.conn_curr->role ||
   13a42:	4b75      	ldr	r3, [pc, #468]	; (13c18 <isr_rx_conn_pkt_ctrl+0x1238>)
   13a44:	f8d3 671c 	ldr.w	r6, [r3, #1820]	; 0x71c
   13a48:	f996 301d 	ldrsb.w	r3, [r6, #29]
   13a4c:	2b00      	cmp	r3, #0
   13a4e:	f280 80b5 	bge.w	13bbc <isr_rx_conn_pkt_ctrl+0x11dc>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_UPD_IND,
   13a52:	7a41      	ldrb	r1, [r0, #9]
   13a54:	2018      	movs	r0, #24
   13a56:	f7fa fd6b 	bl	e530 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
   13a5a:	2800      	cmp	r0, #0
   13a5c:	f000 80ae 	beq.w	13bbc <isr_rx_conn_pkt_ctrl+0x11dc>
	if (!((ind->m_to_s_phy | ind->s_to_m_phy) & 0x07)) {
   13a60:	7b27      	ldrb	r7, [r4, #12]
   13a62:	7b62      	ldrb	r2, [r4, #13]
   13a64:	ea47 0002 	orr.w	r0, r7, r2
   13a68:	f010 0007 	ands.w	r0, r0, #7
   13a6c:	d125      	bne.n	13aba <isr_rx_conn_pkt_ctrl+0x10da>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   13a6e:	f896 20f4 	ldrb.w	r2, [r6, #244]	; 0xf4
   13a72:	f896 30f5 	ldrb.w	r3, [r6, #245]	; 0xf5
   13a76:	4293      	cmp	r3, r2
   13a78:	f43f a888 	beq.w	12b8c <isr_rx_conn_pkt_ctrl+0x1ac>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
   13a7c:	f896 30f6 	ldrb.w	r3, [r6, #246]	; 0xf6
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   13a80:	f003 0303 	and.w	r3, r3, #3
   13a84:	2b02      	cmp	r3, #2
   13a86:	f47f a881 	bne.w	12b8c <isr_rx_conn_pkt_ctrl+0x1ac>
		if (!conn->llcp_phy.cmd) {
   13a8a:	f896 30f7 	ldrb.w	r3, [r6, #247]	; 0xf7
		conn->llcp_phy.ack = conn->llcp_phy.req;
   13a8e:	f886 20f5 	strb.w	r2, [r6, #245]	; 0xf5
		if (!conn->llcp_phy.cmd) {
   13a92:	079a      	lsls	r2, r3, #30
		conn->procedure_expire = 0;
   13a94:	f8a6 0044 	strh.w	r0, [r6, #68]	; 0x44
		if (!conn->llcp_phy.cmd) {
   13a98:	f57f a878 	bpl.w	12b8c <isr_rx_conn_pkt_ctrl+0x1ac>
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   13a9c:	230c      	movs	r3, #12
		upd->status = 0;
   13a9e:	72e0      	strb	r0, [r4, #11]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   13aa0:	7123      	strb	r3, [r4, #4]
		upd->tx = conn->phy_tx;
   13aa2:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
   13aa6:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   13aaa:	7323      	strb	r3, [r4, #12]
		upd->rx = conn->phy_rx;
   13aac:	f896 303a 	ldrb.w	r3, [r6, #58]	; 0x3a
   13ab0:	f3c3 0302 	ubfx	r3, r3, #0, #3
   13ab4:	7363      	strb	r3, [r4, #13]
   13ab6:	f7ff ba6a 	b.w	12f8e <isr_rx_conn_pkt_ctrl+0x5ae>
	if (((ind->instant - conn->event_counter) & 0xffff) > 0x7fff) {
   13aba:	89e0      	ldrh	r0, [r4, #14]
   13abc:	8c73      	ldrh	r3, [r6, #34]	; 0x22
   13abe:	1ac3      	subs	r3, r0, r3
   13ac0:	041b      	lsls	r3, r3, #16
   13ac2:	f100 80a4 	bmi.w	13c0e <isr_rx_conn_pkt_ctrl+0x122e>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   13ac6:	f896 1074 	ldrb.w	r1, [r6, #116]	; 0x74
   13aca:	f896 3075 	ldrb.w	r3, [r6, #117]	; 0x75
   13ace:	428b      	cmp	r3, r1
   13ad0:	d005      	beq.n	13ade <isr_rx_conn_pkt_ctrl+0x10fe>
   13ad2:	4b52      	ldr	r3, [pc, #328]	; (13c1c <isr_rx_conn_pkt_ctrl+0x123c>)
   13ad4:	9301      	str	r3, [sp, #4]
   13ad6:	9300      	str	r3, [sp, #0]
   13ad8:	4b51      	ldr	r3, [pc, #324]	; (13c20 <isr_rx_conn_pkt_ctrl+0x1240>)
   13ada:	f7fe bfc7 	b.w	12a6c <isr_rx_conn_pkt_ctrl+0x8c>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   13ade:	f896 40f4 	ldrb.w	r4, [r6, #244]	; 0xf4
   13ae2:	f896 30f5 	ldrb.w	r3, [r6, #245]	; 0xf5
   13ae6:	42a3      	cmp	r3, r4
   13ae8:	d014      	beq.n	13b14 <isr_rx_conn_pkt_ctrl+0x1134>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   13aea:	f896 30f6 	ldrb.w	r3, [r6, #246]	; 0xf6
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   13aee:	f003 0303 	and.w	r3, r3, #3
   13af2:	2b02      	cmp	r3, #2
   13af4:	d10e      	bne.n	13b14 <isr_rx_conn_pkt_ctrl+0x1134>
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   13af6:	f896 30f7 	ldrb.w	r3, [r6, #247]	; 0xf7
		conn->llcp_phy.ack = conn->llcp_phy.req;
   13afa:	f886 40f5 	strb.w	r4, [r6, #245]	; 0xf5
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   13afe:	f896 4078 	ldrb.w	r4, [r6, #120]	; 0x78
   13b02:	f3c3 0340 	ubfx	r3, r3, #1, #1
   13b06:	f363 0441 	bfi	r4, r3, #1, #1
		conn->procedure_expire = 0;
   13b0a:	2300      	movs	r3, #0
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   13b0c:	f886 4078 	strb.w	r4, [r6, #120]	; 0x78
		conn->procedure_expire = 0;
   13b10:	f8a6 3044 	strh.w	r3, [r6, #68]	; 0x44
	conn->llcp.phy_upd_ind.tx = ind->s_to_m_phy;
   13b14:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
	conn->llcp.phy_upd_ind.instant = ind->instant;
   13b18:	f8a6 007a 	strh.w	r0, [r6, #122]	; 0x7a
	conn->llcp.phy_upd_ind.tx = ind->s_to_m_phy;
   13b1c:	f002 0207 	and.w	r2, r2, #7
   13b20:	f362 0384 	bfi	r3, r2, #2, #3
	conn->llcp.phy_upd_ind.rx = ind->m_to_s_phy;
   13b24:	f367 1347 	bfi	r3, r7, #5, #3
	conn->llcp.phy_upd_ind.initiate = 0;
   13b28:	f36f 0300 	bfc	r3, #0, #1
   13b2c:	f886 3078 	strb.w	r3, [r6, #120]	; 0x78
	conn->llcp_type = LLCP_PHY_UPD;
   13b30:	2008      	movs	r0, #8
	conn->llcp_ack--;
   13b32:	3901      	subs	r1, #1
	if (conn->llcp.phy_upd_ind.tx) {
   13b34:	f003 031c 	and.w	r3, r3, #28
	conn->llcp_type = LLCP_PHY_UPD;
   13b38:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
	conn->llcp_ack--;
   13b3c:	f886 1075 	strb.w	r1, [r6, #117]	; 0x75
	if (conn->llcp.phy_upd_ind.tx) {
   13b40:	2b00      	cmp	r3, #0
   13b42:	f43f a823 	beq.w	12b8c <isr_rx_conn_pkt_ctrl+0x1ac>
		conn->phy_tx_time = conn->llcp.phy_upd_ind.tx;
   13b46:	f896 3039 	ldrb.w	r3, [r6, #57]	; 0x39
   13b4a:	f362 0302 	bfi	r3, r2, #0, #3
   13b4e:	f886 3039 	strb.w	r3, [r6, #57]	; 0x39
   13b52:	f7ff b81b 	b.w	12b8c <isr_rx_conn_pkt_ctrl+0x1ac>
		if (_radio.conn_curr->role ||
   13b56:	4e30      	ldr	r6, [pc, #192]	; (13c18 <isr_rx_conn_pkt_ctrl+0x1238>)
   13b58:	f8d6 571c 	ldr.w	r5, [r6, #1820]	; 0x71c
   13b5c:	f995 301d 	ldrsb.w	r3, [r5, #29]
   13b60:	2b00      	cmp	r3, #0
   13b62:	db2b      	blt.n	13bbc <isr_rx_conn_pkt_ctrl+0x11dc>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND,
   13b64:	7a41      	ldrb	r1, [r0, #9]
   13b66:	2019      	movs	r0, #25
   13b68:	f7fa fce2 	bl	e530 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
   13b6c:	b330      	cbz	r0, 13bbc <isr_rx_conn_pkt_ctrl+0x11dc>
			if (!(p->phys & (conn->phy_tx | conn->phy_rx))) {
   13b6e:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
   13b72:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
   13b76:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
   13b7a:	7b22      	ldrb	r2, [r4, #12]
   13b7c:	f003 0307 	and.w	r3, r3, #7
   13b80:	4213      	tst	r3, r2
   13b82:	f43f a803 	beq.w	12b8c <isr_rx_conn_pkt_ctrl+0x1ac>
			if (conn->llcp_req != conn->llcp_ack) {
   13b86:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
   13b8a:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
   13b8e:	429a      	cmp	r2, r3
   13b90:	f47e affc 	bne.w	12b8c <isr_rx_conn_pkt_ctrl+0x1ac>
			memcpy(&conn->llcp.chan_map.chm[0],
   13b94:	2205      	movs	r2, #5
   13b96:	f206 7122 	addw	r1, r6, #1826	; 0x722
   13b9a:	f105 0079 	add.w	r0, r5, #121	; 0x79
   13b9e:	f7ec fdf8 	bl	792 <memcpy>
			conn->llcp.chan_map.initiate = 1;
   13ba2:	2301      	movs	r3, #1
   13ba4:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
			conn->llcp_type = LLCP_CHAN_MAP;
   13ba8:	2302      	movs	r3, #2
   13baa:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
			conn->llcp_ack--;
   13bae:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
   13bb2:	3b01      	subs	r3, #1
   13bb4:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
   13bb8:	f7fe bfe8 	b.w	12b8c <isr_rx_conn_pkt_ctrl+0x1ac>
		nack = unknown_rsp_send(_radio.conn_curr,
   13bbc:	4816      	ldr	r0, [pc, #88]	; (13c18 <isr_rx_conn_pkt_ctrl+0x1238>)
   13bbe:	f8d0 471c 	ldr.w	r4, [r0, #1820]	; 0x71c
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   13bc2:	f200 7064 	addw	r0, r0, #1892	; 0x764
   13bc6:	f7f7 fe0a 	bl	b7de <mem_acquire>
	if (!node_tx) {
   13bca:	4601      	mov	r1, r0
   13bcc:	2800      	cmp	r0, #0
   13bce:	f43f a91a 	beq.w	12e06 <isr_rx_conn_pkt_ctrl+0x426>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   13bd2:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.unknown_rsp.type = type;
   13bd4:	7207      	strb	r7, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   13bd6:	f043 0303 	orr.w	r3, r3, #3
   13bda:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
   13bdc:	2302      	movs	r3, #2
   13bde:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   13be0:	2307      	movs	r3, #7
   13be2:	71c3      	strb	r3, [r0, #7]
   13be4:	f7ff b94b 	b.w	12e7e <isr_rx_conn_pkt_ctrl+0x49e>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
   13be8:	2328      	movs	r3, #40	; 0x28
   13bea:	f885 30b3 	strb.w	r3, [r5, #179]	; 0xb3
   13bee:	f7fe bfcd 	b.w	12b8c <isr_rx_conn_pkt_ctrl+0x1ac>
	if (node_tx) {
   13bf2:	2e00      	cmp	r6, #0
   13bf4:	f43f a907 	beq.w	12e06 <isr_rx_conn_pkt_ctrl+0x426>
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
   13bf8:	490a      	ldr	r1, [pc, #40]	; (13c24 <isr_rx_conn_pkt_ctrl+0x1244>)
   13bfa:	4630      	mov	r0, r6
   13bfc:	f7f7 fe09 	bl	b812 <mem_release>
   13c00:	f7ff b901 	b.w	12e06 <isr_rx_conn_pkt_ctrl+0x426>
	eff_tx_time = _radio.conn_curr->max_tx_time;
   13c04:	46f0      	mov	r8, lr
	eff_rx_time = _radio.conn_curr->max_rx_time;
   13c06:	4681      	mov	r9, r0
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
   13c08:	460f      	mov	r7, r1
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
   13c0a:	4693      	mov	fp, r2
   13c0c:	e5db      	b.n	137c6 <isr_rx_conn_pkt_ctrl+0xde6>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
   13c0e:	2328      	movs	r3, #40	; 0x28
   13c10:	f886 30b3 	strb.w	r3, [r6, #179]	; 0xb3
   13c14:	f7fe bfba 	b.w	12b8c <isr_rx_conn_pkt_ctrl+0x1ac>
   13c18:	20000bf0 	.word	0x20000bf0
   13c1c:	00023dae 	.word	0x00023dae
   13c20:	00025e64 	.word	0x00025e64
   13c24:	20001354 	.word	0x20001354

00013c28 <isr>:
{
   13c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c2c:	b093      	sub	sp, #76	; 0x4c
	trx_done = radio_is_done();
   13c2e:	f004 fed3 	bl	189d8 <radio_is_done>
   13c32:	b2c6      	uxtb	r6, r0
	if (trx_done) {
   13c34:	b366      	cbz	r6, 13c90 <isr+0x68>
		crc_ok = radio_crc_is_valid();
   13c36:	f004 feef 	bl	18a18 <radio_crc_is_valid>
   13c3a:	b2c7      	uxtb	r7, r0
		devmatch_ok = radio_filter_has_match();
   13c3c:	f004 ff70 	bl	18b20 <radio_filter_has_match>
   13c40:	fa5f f880 	uxtb.w	r8, r0
		devmatch_id = radio_filter_match_get();
   13c44:	f004 ff76 	bl	18b34 <radio_filter_match_get>
   13c48:	fa5f f980 	uxtb.w	r9, r0
		irkmatch_ok = radio_ar_has_match();
   13c4c:	f005 f964 	bl	18f18 <radio_ar_has_match>
   13c50:	fa5f fa80 	uxtb.w	sl, r0
		irkmatch_id = radio_ar_match_get();
   13c54:	f005 f94e 	bl	18ef4 <radio_ar_match_get>
   13c58:	fa5f fb80 	uxtb.w	fp, r0
		rssi_ready = radio_rssi_is_ready();
   13c5c:	f004 ff2a 	bl	18ab4 <radio_rssi_is_ready>
   13c60:	b2c5      	uxtb	r5, r0
	switch (_radio.state) {
   13c62:	4cb4      	ldr	r4, [pc, #720]	; (13f34 <isr+0x30c>)
	radio_status_reset();
   13c64:	f004 fea2 	bl	189ac <radio_status_reset>
	radio_tmr_status_reset();
   13c68:	f004 ff76 	bl	18b58 <radio_tmr_status_reset>
	radio_filter_status_reset();
   13c6c:	f004 ff50 	bl	18b10 <radio_filter_status_reset>
	radio_ar_status_reset();
   13c70:	f005 f946 	bl	18f00 <radio_ar_status_reset>
	radio_rssi_status_reset();
   13c74:	f004 ff16 	bl	18aa4 <radio_rssi_status_reset>
	switch (_radio.state) {
   13c78:	7d23      	ldrb	r3, [r4, #20]
   13c7a:	2b05      	cmp	r3, #5
   13c7c:	f201 848e 	bhi.w	1559c <isr+0x1974>
   13c80:	e8df f013 	tbh	[pc, r3, lsl #1]
   13c84:	00cd007c 	.word	0x00cd007c
   13c88:	0a9d000e 	.word	0x0a9d000e
   13c8c:	0a9d0a9d 	.word	0x0a9d0a9d
		devmatch_id = irkmatch_id = 0xFF;
   13c90:	f04f 0bff 	mov.w	fp, #255	; 0xff
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0;
   13c94:	4635      	mov	r5, r6
   13c96:	46b2      	mov	sl, r6
   13c98:	46b0      	mov	r8, r6
   13c9a:	4637      	mov	r7, r6
		devmatch_id = irkmatch_id = 0xFF;
   13c9c:	46d9      	mov	r9, fp
   13c9e:	e7e0      	b.n	13c62 <isr+0x3a>
	_radio.state = STATE_RX;
   13ca0:	2301      	movs	r3, #1
   13ca2:	7523      	strb	r3, [r4, #20]
	hcto = radio_tmr_tifs_base_get()
   13ca4:	f005 f84a 	bl	18d3c <radio_tmr_tifs_base_get>
   13ca8:	4605      	mov	r5, r0
	radio_tmr_tifs_set(RADIO_TIFS);
   13caa:	2096      	movs	r0, #150	; 0x96
   13cac:	f004 ff64 	bl	18b78 <radio_tmr_tifs_set>
	switch (_radio.role) {
   13cb0:	7ce3      	ldrb	r3, [r4, #19]
   13cb2:	3b01      	subs	r3, #1
   13cb4:	2b03      	cmp	r3, #3
   13cb6:	f200 80aa 	bhi.w	13e0e <isr+0x1e6>
   13cba:	e8df f003 	tbb	[pc, r3]
   13cbe:	3202      	.short	0x3202
   13cc0:	6262      	.short	0x6262
		radio_switch_complete_and_tx(0, 0, 0, 0);
   13cc2:	2300      	movs	r3, #0
   13cc4:	461a      	mov	r2, r3
   13cc6:	4619      	mov	r1, r3
   13cc8:	4618      	mov	r0, r3
   13cca:	f004 fec3 	bl	18a54 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(radio_pkt_scratch_get());
   13cce:	f004 feb1 	bl	18a34 <radio_pkt_scratch_get>
   13cd2:	f004 fe25 	bl	18920 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
   13cd6:	f004 fe75 	bl	189c4 <radio_is_ready>
   13cda:	b138      	cbz	r0, 13cec <isr+0xc4>
		LL_ASSERT(!radio_is_ready());
   13cdc:	4b96      	ldr	r3, [pc, #600]	; (13f38 <isr+0x310>)
   13cde:	9301      	str	r3, [sp, #4]
   13ce0:	9300      	str	r3, [sp, #0]
   13ce2:	4b96      	ldr	r3, [pc, #600]	; (13f3c <isr+0x314>)
	LL_ASSERT(!radio_is_ready());
   13ce4:	4a96      	ldr	r2, [pc, #600]	; (13f40 <isr+0x318>)
   13ce6:	4997      	ldr	r1, [pc, #604]	; (13f44 <isr+0x31c>)
   13ce8:	4897      	ldr	r0, [pc, #604]	; (13f48 <isr+0x320>)
   13cea:	e34b      	b.n	14384 <isr+0x75c>
		if (ctrl_rl_enabled()) {
   13cec:	f003 ffd2 	bl	17c94 <ctrl_rl_enabled>
   13cf0:	b138      	cbz	r0, 13d02 <isr+0xda>
			u8_t count, *irks = ctrl_irks_get(&count);
   13cf2:	a810      	add	r0, sp, #64	; 0x40
   13cf4:	f003 fd14 	bl	17720 <ctrl_irks_get>
			radio_ar_configure(count, irks);
   13cf8:	4601      	mov	r1, r0
   13cfa:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
   13cfe:	f005 f8c7 	bl	18e90 <radio_ar_configure>
		hcto += radio_rx_chain_delay_get(0, 0);
   13d02:	2100      	movs	r1, #0
   13d04:	4608      	mov	r0, r1
   13d06:	f004 fe24 	bl	18952 <radio_rx_chain_delay_get>
		hcto += addr_us_get(0);
   13d0a:	35c3      	adds	r5, #195	; 0xc3
		hcto -= radio_tx_chain_delay_get(0, 0);
   13d0c:	2100      	movs	r1, #0
		hcto += addr_us_get(0);
   13d0e:	4405      	add	r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
   13d10:	4608      	mov	r0, r1
   13d12:	f004 fe1a 	bl	1894a <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
   13d16:	1a28      	subs	r0, r5, r0
   13d18:	f004 ffa6 	bl	18c68 <radio_tmr_hcto_configure>
		radio_tmr_end_capture();
   13d1c:	f004 fff6 	bl	18d0c <radio_tmr_end_capture>
   13d20:	e02c      	b.n	13d7c <isr+0x154>
		radio_switch_complete_and_tx(0, 0, 0, 0);
   13d22:	2300      	movs	r3, #0
   13d24:	461a      	mov	r2, r3
   13d26:	4619      	mov	r1, r3
   13d28:	4618      	mov	r0, r3
   13d2a:	f004 fe93 	bl	18a54 <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
   13d2e:	f894 2749 	ldrb.w	r2, [r4, #1865]	; 0x749
   13d32:	f8d4 3744 	ldr.w	r3, [r4, #1860]	; 0x744
		radio_pkt_rx_set(_radio.packet_rx
   13d36:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   13d3a:	3008      	adds	r0, #8
   13d3c:	f004 fdf0 	bl	18920 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
   13d40:	f004 fe40 	bl	189c4 <radio_is_ready>
   13d44:	2800      	cmp	r0, #0
   13d46:	d1c9      	bne.n	13cdc <isr+0xb4>
		if (ctrl_rl_enabled()) {
   13d48:	f003 ffa4 	bl	17c94 <ctrl_rl_enabled>
   13d4c:	b138      	cbz	r0, 13d5e <isr+0x136>
			u8_t count, *irks = ctrl_irks_get(&count);
   13d4e:	a810      	add	r0, sp, #64	; 0x40
   13d50:	f003 fce6 	bl	17720 <ctrl_irks_get>
			radio_ar_configure(count, irks);
   13d54:	4601      	mov	r1, r0
   13d56:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
   13d5a:	f005 f899 	bl	18e90 <radio_ar_configure>
		hcto += radio_rx_chain_delay_get(0, 0);
   13d5e:	2100      	movs	r1, #0
   13d60:	4608      	mov	r0, r1
   13d62:	f004 fdf6 	bl	18952 <radio_rx_chain_delay_get>
		hcto += addr_us_get(0);
   13d66:	35c3      	adds	r5, #195	; 0xc3
		hcto -= radio_tx_chain_delay_get(0, 0);
   13d68:	2100      	movs	r1, #0
		hcto += addr_us_get(0);
   13d6a:	4405      	add	r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
   13d6c:	4608      	mov	r0, r1
   13d6e:	f004 fdec 	bl	1894a <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
   13d72:	1a28      	subs	r0, r5, r0
   13d74:	f004 ff78 	bl	18c68 <radio_tmr_hcto_configure>
		radio_rssi_measure();
   13d78:	f004 fe84 	bl	18a84 <radio_rssi_measure>
}
   13d7c:	b013      	add	sp, #76	; 0x4c
   13d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
   13d82:	f8d4 371c 	ldr.w	r3, [r4, #1820]	; 0x71c
					     _radio.conn_curr->phy_flags);
   13d86:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
   13d8a:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
   13d8e:	2100      	movs	r1, #0
   13d90:	09d3      	lsrs	r3, r2, #7
   13d92:	f000 0007 	and.w	r0, r0, #7
   13d96:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   13d9a:	f004 fe5b 	bl	18a54 <radio_switch_complete_and_tx>
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
   13d9e:	f894 2749 	ldrb.w	r2, [r4, #1865]	; 0x749
   13da2:	f8d4 3744 	ldr.w	r3, [r4, #1860]	; 0x744
		rx_packet_set(_radio.conn_curr,	(void *)
   13da6:	f8d4 071c 	ldr.w	r0, [r4, #1820]	; 0x71c
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
   13daa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		rx_packet_set(_radio.conn_curr,	(void *)
   13dae:	3108      	adds	r1, #8
   13db0:	f7fa ff7a 	bl	eca8 <rx_packet_set>
		LL_ASSERT(!radio_is_ready());
   13db4:	f004 fe06 	bl	189c4 <radio_is_ready>
   13db8:	2800      	cmp	r0, #0
   13dba:	d18f      	bne.n	13cdc <isr+0xb4>
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_rx, 1);
   13dbc:	f8d4 371c 	ldr.w	r3, [r4, #1820]	; 0x71c
   13dc0:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
   13dc4:	2101      	movs	r1, #1
   13dc6:	f000 0007 	and.w	r0, r0, #7
   13dca:	f004 fdc2 	bl	18952 <radio_rx_chain_delay_get>
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
   13dce:	f8d4 271c 	ldr.w	r2, [r4, #1820]	; 0x71c
   13dd2:	f892 303a 	ldrb.w	r3, [r2, #58]	; 0x3a
	switch (phy) {
   13dd6:	f003 0307 	and.w	r3, r3, #7
	hcto = radio_tmr_tifs_base_get()
   13dda:	359b      	adds	r5, #155	; 0x9b
	switch (phy) {
   13ddc:	2b02      	cmp	r3, #2
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_rx, 1);
   13dde:	4405      	add	r5, r0
	switch (phy) {
   13de0:	d013      	beq.n	13e0a <isr+0x1e2>
		return 40;
   13de2:	2b04      	cmp	r3, #4
   13de4:	bf0c      	ite	eq
   13de6:	f44f 70bc 	moveq.w	r0, #376	; 0x178
   13dea:	2028      	movne	r0, #40	; 0x28
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
   13dec:	4405      	add	r5, r0
						 _radio.conn_curr->phy_flags);
   13dee:	f892 0038 	ldrb.w	r0, [r2, #56]	; 0x38
		hcto -= radio_tx_chain_delay_get(_radio.conn_curr->phy_tx,
   13df2:	09c1      	lsrs	r1, r0, #7
   13df4:	f3c0 00c2 	ubfx	r0, r0, #3, #3
   13df8:	f004 fda7 	bl	1894a <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
   13dfc:	1a28      	subs	r0, r5, r0
   13dfe:	f004 ff33 	bl	18c68 <radio_tmr_hcto_configure>
		packet_tx_enqueue(1);
   13e02:	2001      	movs	r0, #1
   13e04:	f7fc f810 	bl	fe28 <packet_tx_enqueue>
   13e08:	e7b8      	b.n	13d7c <isr+0x154>
		return 24;
   13e0a:	2018      	movs	r0, #24
   13e0c:	e7ee      	b.n	13dec <isr+0x1c4>
		LL_ASSERT(0);
   13e0e:	4b4a      	ldr	r3, [pc, #296]	; (13f38 <isr+0x310>)
   13e10:	9301      	str	r3, [sp, #4]
   13e12:	9300      	str	r3, [sp, #0]
   13e14:	4b49      	ldr	r3, [pc, #292]	; (13f3c <isr+0x314>)
		LL_ASSERT(0);
   13e16:	4a4a      	ldr	r2, [pc, #296]	; (13f40 <isr+0x318>)
   13e18:	494a      	ldr	r1, [pc, #296]	; (13f44 <isr+0x31c>)
   13e1a:	484c      	ldr	r0, [pc, #304]	; (13f4c <isr+0x324>)
   13e1c:	e2b2      	b.n	14384 <isr+0x75c>
	if (!((trx_done) || ((SILENT_CONNECTION) &&
   13e1e:	b926      	cbnz	r6, 13e2a <isr+0x202>
		_radio.state = STATE_CLOSE;
   13e20:	2303      	movs	r3, #3
   13e22:	7523      	strb	r3, [r4, #20]
		radio_disable();
   13e24:	f004 fdb0 	bl	18988 <radio_disable>
   13e28:	e7a8      	b.n	13d7c <isr+0x154>
	switch (_radio.role) {
   13e2a:	7ce3      	ldrb	r3, [r4, #19]
   13e2c:	3b01      	subs	r3, #1
   13e2e:	2b03      	cmp	r3, #3
   13e30:	f201 81bf 	bhi.w	151b2 <isr+0x158a>
   13e34:	e8df f013 	tbh	[pc, r3, lsl #1]
   13e38:	02ae0004 	.word	0x02ae0004
   13e3c:	067c067c 	.word	0x067c067c
		if (crc_ok) {
   13e40:	2f00      	cmp	r7, #0
   13e42:	d0ed      	beq.n	13e20 <isr+0x1f8>
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
   13e44:	f1ba 0f00 	cmp.w	sl, #0
   13e48:	d038      	beq.n	13ebc <isr+0x294>
   13e4a:	4658      	mov	r0, fp
   13e4c:	f003 fcc6 	bl	177dc <ctrl_rl_irk_idx>
   13e50:	f88d 0040 	strb.w	r0, [sp, #64]	; 0x40
	pdu_adv = (void *)radio_pkt_scratch_get();
   13e54:	f004 fdee 	bl	18a34 <radio_pkt_scratch_get>
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
   13e58:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
	pdu_adv = (void *)radio_pkt_scratch_get();
   13e5c:	4606      	mov	r6, r0
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
   13e5e:	eb03 2303 	add.w	r3, r3, r3, lsl #8
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
   13e62:	7800      	ldrb	r0, [r0, #0]
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
   13e64:	332c      	adds	r3, #44	; 0x2c
   13e66:	930a      	str	r3, [sp, #40]	; 0x28
   13e68:	18e5      	adds	r5, r4, r3
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
   13e6a:	f000 030f 	and.w	r3, r0, #15
   13e6e:	2b03      	cmp	r3, #3
   13e70:	d10a      	bne.n	13e88 <isr+0x260>
   13e72:	7873      	ldrb	r3, [r6, #1]
   13e74:	2b0c      	cmp	r3, #12
   13e76:	d107      	bne.n	13e88 <isr+0x260>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
   13e78:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   13e7c:	07df      	lsls	r7, r3, #31
   13e7e:	d51f      	bpl.n	13ec0 <isr+0x298>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
   13e80:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
				      rl_idx)) ||
   13e84:	07d8      	lsls	r0, r3, #31
   13e86:	d44a      	bmi.n	13f1e <isr+0x2f6>
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
   13e88:	7830      	ldrb	r0, [r6, #0]
   13e8a:	f000 030f 	and.w	r3, r0, #15
   13e8e:	2b05      	cmp	r3, #5
   13e90:	d1c6      	bne.n	13e20 <isr+0x1f8>
   13e92:	7873      	ldrb	r3, [r6, #1]
   13e94:	2b22      	cmp	r3, #34	; 0x22
   13e96:	d1c3      	bne.n	13e20 <isr+0x1f8>
	if (adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   13e98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13e9a:	5ce3      	ldrb	r3, [r4, r3]
   13e9c:	f003 030f 	and.w	r3, r3, #15
   13ea0:	2b01      	cmp	r3, #1
   13ea2:	f040 8150 	bne.w	14146 <isr+0x51e>
					    ci->connect_ind.init_addr,
   13ea6:	1cb7      	adds	r7, r6, #2
		return ctrl_rl_addr_allowed(ci->tx_addr,
   13ea8:	aa10      	add	r2, sp, #64	; 0x40
   13eaa:	4639      	mov	r1, r7
   13eac:	f3c0 1080 	ubfx	r0, r0, #6, #1
   13eb0:	f003 fe94 	bl	17bdc <ctrl_rl_addr_allowed>
		       isr_adv_ci_adva_check(adv, ci) &&
   13eb4:	2800      	cmp	r0, #0
   13eb6:	d14d      	bne.n	13f54 <isr+0x32c>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   13eb8:	2000      	movs	r0, #0
   13eba:	e05b      	b.n	13f74 <isr+0x34c>
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
   13ebc:	20ff      	movs	r0, #255	; 0xff
   13ebe:	e7c7      	b.n	13e50 <isr+0x228>
		 ctrl_rl_addr_allowed(sr->tx_addr, sr->scan_req.scan_addr,
   13ec0:	aa10      	add	r2, sp, #64	; 0x40
   13ec2:	1cb1      	adds	r1, r6, #2
   13ec4:	f3c0 1080 	ubfx	r0, r0, #6, #1
   13ec8:	f003 fe88 	bl	17bdc <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
   13ecc:	2800      	cmp	r0, #0
   13ece:	d0d7      	beq.n	13e80 <isr+0x258>
	return (adv->tx_addr == sr->rx_addr) &&
   13ed0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13ed2:	7832      	ldrb	r2, [r6, #0]
   13ed4:	5ce3      	ldrb	r3, [r4, r3]
   13ed6:	f3c3 1380 	ubfx	r3, r3, #6, #1
   13eda:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   13ede:	d1d3      	bne.n	13e88 <isr+0x260>
		!memcmp(adv->adv_ind.addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   13ee0:	2206      	movs	r2, #6
   13ee2:	f106 0108 	add.w	r1, r6, #8
   13ee6:	1ca8      	adds	r0, r5, #2
   13ee8:	f7ec fc26 	bl	738 <memcmp>
	    (pdu_adv->len == sizeof(struct pdu_adv_scan_req)) &&
   13eec:	2800      	cmp	r0, #0
   13eee:	d1cb      	bne.n	13e88 <isr+0x260>
		_radio.state = STATE_CLOSE;
   13ef0:	2303      	movs	r3, #3
   13ef2:	7523      	strb	r3, [r4, #20]
		radio_switch_complete_and_disable();
   13ef4:	f004 fdb8 	bl	18a68 <radio_switch_complete_and_disable>
		radio_pkt_tx_set(&_radio.advertiser.scan_data.data
   13ef8:	f894 0636 	ldrb.w	r0, [r4, #1590]	; 0x636
   13efc:	eb00 2000 	add.w	r0, r0, r0, lsl #8
   13f00:	f200 4034 	addw	r0, r0, #1076	; 0x434
   13f04:	4420      	add	r0, r4
   13f06:	f004 fd11 	bl	1892c <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   13f0a:	f004 fd5b 	bl	189c4 <radio_is_ready>
   13f0e:	2800      	cmp	r0, #0
   13f10:	f43f af34 	beq.w	13d7c <isr+0x154>
   13f14:	4b08      	ldr	r3, [pc, #32]	; (13f38 <isr+0x310>)
   13f16:	9301      	str	r3, [sp, #4]
   13f18:	9300      	str	r3, [sp, #0]
   13f1a:	4b0d      	ldr	r3, [pc, #52]	; (13f50 <isr+0x328>)
   13f1c:	e6e2      	b.n	13ce4 <isr+0xbc>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
   13f1e:	f1b8 0f00 	cmp.w	r8, #0
   13f22:	d1d5      	bne.n	13ed0 <isr+0x2a8>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   13f24:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
   13f28:	f003 fc9e 	bl	17868 <ctrl_irk_whitelisted>
   13f2c:	2800      	cmp	r0, #0
   13f2e:	d1cf      	bne.n	13ed0 <isr+0x2a8>
   13f30:	e7aa      	b.n	13e88 <isr+0x260>
   13f32:	bf00      	nop
   13f34:	20000bf0 	.word	0x20000bf0
   13f38:	00023dae 	.word	0x00023dae
   13f3c:	000259e0 	.word	0x000259e0
   13f40:	00022d76 	.word	0x00022d76
   13f44:	000272d8 	.word	0x000272d8
   13f48:	000261fa 	.word	0x000261fa
   13f4c:	00023fa5 	.word	0x00023fa5
   13f50:	000259f3 	.word	0x000259f3
		       isr_adv_ci_adva_check(adv, ci) &&
   13f54:	4631      	mov	r1, r6
   13f56:	4628      	mov	r0, r5
   13f58:	f7fb fbfe 	bl	f758 <isr_adv_ci_adva_check>
					    rl_idx) &&
   13f5c:	2800      	cmp	r0, #0
   13f5e:	d0ab      	beq.n	13eb8 <isr+0x290>
		       isr_adv_ci_tgta_check(adv, ci, *rl_idx);
   13f60:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (rl_idx != FILTER_IDX_NONE) {
   13f64:	2bff      	cmp	r3, #255	; 0xff
   13f66:	f000 80db 	beq.w	14120 <isr+0x4f8>
		return rl_idx == _radio.advertiser.rl_idx;
   13f6a:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
   13f6e:	1ac1      	subs	r1, r0, r3
   13f70:	4248      	negs	r0, r1
   13f72:	4148      	adcs	r0, r1
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   13f74:	f000 0001 	and.w	r0, r0, #1
		   (pdu_adv->len == sizeof(struct pdu_adv_connect_ind)) &&
   13f78:	2800      	cmp	r0, #0
   13f7a:	f43f af51 	beq.w	13e20 <isr+0x1f8>
		   isr_adv_ci_check(_pdu_adv, pdu_adv, devmatch_ok, &rl_idx) &&
   13f7e:	f894 378a 	ldrb.w	r3, [r4, #1930]	; 0x78a
   13f82:	b133      	cbz	r3, 13f92 <isr+0x36a>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
   13f84:	f894 3788 	ldrb.w	r3, [r4, #1928]	; 0x788
   13f88:	f894 2789 	ldrb.w	r2, [r4, #1929]	; 0x789
   13f8c:	429a      	cmp	r2, r3
   13f8e:	f47f af47 	bne.w	13e20 <isr+0x1f8>
   13f92:	f8d4 3638 	ldr.w	r3, [r4, #1592]	; 0x638
   13f96:	2b00      	cmp	r3, #0
   13f98:	f43f af42 	beq.w	13e20 <isr+0x1f8>
			node_rx = packet_rx_reserve_get(4);
   13f9c:	2004      	movs	r0, #4
   13f9e:	f7fa fb25 	bl	e5ec <packet_rx_reserve_get>
		if (!node_rx) {
   13fa2:	4607      	mov	r7, r0
   13fa4:	2800      	cmp	r0, #0
   13fa6:	f43f af3b 	beq.w	13e20 <isr+0x1f8>
		_radio.state = STATE_STOP;
   13faa:	f04f 0904 	mov.w	r9, #4
   13fae:	f884 9014 	strb.w	r9, [r4, #20]
		radio_disable();
   13fb2:	f004 fce9 	bl	18988 <radio_disable>
		conn = _radio.advertiser.conn;
   13fb6:	f8d4 5638 	ldr.w	r5, [r4, #1592]	; 0x638
		conn->handle = mem_index_get(conn, _radio.conn_pool,
   13fba:	f8d4 1710 	ldr.w	r1, [r4, #1808]	; 0x710
		_radio.advertiser.conn = NULL;
   13fbe:	2300      	movs	r3, #0
		conn->handle = mem_index_get(conn, _radio.conn_pool,
   13fc0:	f44f 72aa 	mov.w	r2, #340	; 0x154
   13fc4:	4628      	mov	r0, r5
		_radio.advertiser.conn = NULL;
   13fc6:	f8c4 3638 	str.w	r3, [r4, #1592]	; 0x638
		conn->handle = mem_index_get(conn, _radio.conn_pool,
   13fca:	f7f7 fc40 	bl	b84e <mem_index_get>
		memcpy(&conn->access_addr[0],
   13fce:	f105 0a10 	add.w	sl, r5, #16
		conn->handle = mem_index_get(conn, _radio.conn_pool,
   13fd2:	8428      	strh	r0, [r5, #32]
		memcpy(&conn->crc_init[0],
   13fd4:	2203      	movs	r2, #3
   13fd6:	f106 0112 	add.w	r1, r6, #18
   13fda:	f105 0014 	add.w	r0, r5, #20
   13fde:	f7ec fbd8 	bl	792 <memcpy>
		memcpy(&conn->data_chan_map[0],
   13fe2:	f105 0817 	add.w	r8, r5, #23
		memcpy(&conn->access_addr[0],
   13fe6:	464a      	mov	r2, r9
   13fe8:	f106 010e 	add.w	r1, r6, #14
   13fec:	4650      	mov	r0, sl
   13fee:	f7ec fbd0 	bl	792 <memcpy>
		memcpy(&conn->data_chan_map[0],
   13ff2:	2205      	movs	r2, #5
   13ff4:	f106 011e 	add.w	r1, r6, #30
   13ff8:	4640      	mov	r0, r8
   13ffa:	f7ec fbca 	bl	792 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
   13ffe:	2105      	movs	r1, #5
   14000:	4640      	mov	r0, r8
   14002:	f7f7 fd97 	bl	bb34 <util_ones_count_get>
		conn->data_chan_count =
   14006:	7f6b      	ldrb	r3, [r5, #29]
   14008:	f360 0305 	bfi	r3, r0, #0, #6
   1400c:	776b      	strb	r3, [r5, #29]
		conn->data_chan_hop = pdu_adv->connect_ind.hop;
   1400e:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
   14012:	f3c3 0304 	ubfx	r3, r3, #0, #5
   14016:	77ab      	strb	r3, [r5, #30]
			pdu_adv->connect_ind.interval;
   14018:	8b33      	ldrh	r3, [r6, #24]
		conn->conn_interval =
   1401a:	84ab      	strh	r3, [r5, #36]	; 0x24
			pdu_adv->connect_ind.interval * 1250;
   1401c:	f240 48e2 	movw	r8, #1250	; 0x4e2
   14020:	fb08 f803 	mul.w	r8, r8, r3
		conn->latency = pdu_adv->connect_ind.latency;
   14024:	7ef2      	ldrb	r2, [r6, #27]
   14026:	7eb3      	ldrb	r3, [r6, #26]
   14028:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
   1402c:	4651      	mov	r1, sl
   1402e:	464a      	mov	r2, r9
		conn->latency = pdu_adv->connect_ind.latency;
   14030:	84eb      	strh	r3, [r5, #38]	; 0x26
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
   14032:	f105 006c 	add.w	r0, r5, #108	; 0x6c
   14036:	f7ec fbac 	bl	792 <memcpy>
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
   1403a:	8bb3      	ldrh	r3, [r6, #28]
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   1403c:	8ce9      	ldrh	r1, [r5, #38]	; 0x26
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
   1403e:	f242 7210 	movw	r2, #10000	; 0x2710
   14042:	fb02 8303 	mla	r3, r2, r3, r8
   14046:	3b01      	subs	r3, #1
   14048:	fbb3 f3f8 	udiv	r3, r3, r8
   1404c:	87eb      	strh	r3, [r5, #62]	; 0x3e
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
   1404e:	4b54      	ldr	r3, [pc, #336]	; (141a0 <isr+0x578>)
   14050:	4443      	add	r3, r8
   14052:	fbb3 f3f8 	udiv	r3, r3, r8
   14056:	f8a5 3042 	strh.w	r3, [r5, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   1405a:	4b52      	ldr	r3, [pc, #328]	; (141a4 <isr+0x57c>)
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   1405c:	1d88      	adds	r0, r1, #6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   1405e:	4443      	add	r3, r8
   14060:	fbb3 f3f8 	udiv	r3, r3, r8
   14064:	b29a      	uxth	r2, r3
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   14066:	4282      	cmp	r2, r0
   14068:	4613      	mov	r3, r2
   1406a:	bfc4      	itt	gt
   1406c:	f5c1 437f 	rsbgt	r3, r1, #65280	; 0xff00
   14070:	33fa      	addgt	r3, #250	; 0xfa
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   14072:	f8a5 204a 	strh.w	r2, [r5, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   14076:	bfc4      	itt	gt
   14078:	18d2      	addgt	r2, r2, r3
   1407a:	b292      	uxthgt	r2, r2
		node_rx->hdr.handle = conn->handle;
   1407c:	8c2b      	ldrh	r3, [r5, #32]
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   1407e:	f8a5 2046 	strh.w	r2, [r5, #70]	; 0x46
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
   14082:	4631      	mov	r1, r6
		node_rx->hdr.handle = conn->handle;
   14084:	80fb      	strh	r3, [r7, #6]
		radio_le_conn_cmplt->role = 0x01;
   14086:	2201      	movs	r2, #1
		radio_le_conn_cmplt->status = 0x00;
   14088:	2300      	movs	r3, #0
   1408a:	72fb      	strb	r3, [r7, #11]
		radio_le_conn_cmplt->role = 0x01;
   1408c:	733a      	strb	r2, [r7, #12]
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
   1408e:	f811 2b08 	ldrb.w	r2, [r1], #8
		radio_le_conn_cmplt->status = 0x00;
   14092:	930c      	str	r3, [sp, #48]	; 0x30
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   14094:	f04f 0906 	mov.w	r9, #6
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
   14098:	f3c2 12c0 	ubfx	r2, r2, #7, #1
   1409c:	76ba      	strb	r2, [r7, #26]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   1409e:	f887 9004 	strb.w	r9, [r7, #4]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
   140a2:	464a      	mov	r2, r9
   140a4:	f107 001b 	add.w	r0, r7, #27
   140a8:	f7ec fb73 	bl	792 <memcpy>
		if (rl_idx != FILTER_IDX_NONE) {
   140ac:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
   140b0:	f107 030e 	add.w	r3, r7, #14
   140b4:	28ff      	cmp	r0, #255	; 0xff
   140b6:	930b      	str	r3, [sp, #44]	; 0x2c
   140b8:	f106 0a02 	add.w	sl, r6, #2
   140bc:	f107 0b14 	add.w	fp, r7, #20
   140c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   140c2:	d05f      	beq.n	14184 <isr+0x55c>
			ll_rl_id_addr_get(rl_idx,
   140c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   140c6:	f107 010d 	add.w	r1, r7, #13
   140ca:	f003 fd49 	bl	17b60 <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
   140ce:	7b7b      	ldrb	r3, [r7, #13]
   140d0:	3302      	adds	r3, #2
   140d2:	737b      	strb	r3, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
   140d4:	464a      	mov	r2, r9
   140d6:	4651      	mov	r1, sl
   140d8:	4658      	mov	r0, fp
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   140da:	f7ec fb5a 	bl	792 <memcpy>
			pdu_adv->connect_ind.interval;
   140de:	8b33      	ldrh	r3, [r6, #24]
		radio_le_conn_cmplt->interval =
   140e0:	f8a7 3021 	strh.w	r3, [r7, #33]	; 0x21
			pdu_adv->connect_ind.latency;
   140e4:	8b73      	ldrh	r3, [r6, #26]
		radio_le_conn_cmplt->latency =
   140e6:	f8a7 3023 	strh.w	r3, [r7, #35]	; 0x23
			pdu_adv->connect_ind.timeout;
   140ea:	8bb3      	ldrh	r3, [r6, #28]
		radio_le_conn_cmplt->timeout =
   140ec:	f8a7 3025 	strh.w	r3, [r7, #37]	; 0x25
			pdu_adv->connect_ind.sca;
   140f0:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
   140f4:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
   140f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		rx_fc_lock(conn->handle);
   140fc:	8c28      	ldrh	r0, [r5, #32]
   140fe:	f7fb fc3f 	bl	f980 <rx_fc_lock>
		packet_rx_enqueue();
   14102:	f7fb fb4d 	bl	f7a0 <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
   14106:	2003      	movs	r0, #3
   14108:	f7fa fa70 	bl	e5ec <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
   1410c:	2800      	cmp	r0, #0
   1410e:	d155      	bne.n	141bc <isr+0x594>
   14110:	4b25      	ldr	r3, [pc, #148]	; (141a8 <isr+0x580>)
   14112:	9301      	str	r3, [sp, #4]
   14114:	9300      	str	r3, [sp, #0]
   14116:	4b25      	ldr	r3, [pc, #148]	; (141ac <isr+0x584>)
			LL_ASSERT(node_rx);
   14118:	4a25      	ldr	r2, [pc, #148]	; (141b0 <isr+0x588>)
   1411a:	4926      	ldr	r1, [pc, #152]	; (141b4 <isr+0x58c>)
   1411c:	4826      	ldr	r0, [pc, #152]	; (141b8 <isr+0x590>)
   1411e:	e131      	b.n	14384 <isr+0x75c>
	return (adv->rx_addr == ci->tx_addr) &&
   14120:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14122:	5ce2      	ldrb	r2, [r4, r3]
   14124:	7833      	ldrb	r3, [r6, #0]
   14126:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1412a:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   1412e:	f47f aec3 	bne.w	13eb8 <isr+0x290>
	       !memcmp(adv->direct_ind.tgt_addr, ci->connect_ind.init_addr,
   14132:	2206      	movs	r2, #6
   14134:	4639      	mov	r1, r7
   14136:	f105 0008 	add.w	r0, r5, #8
   1413a:	f7ec fafd 	bl	738 <memcmp>
	return (adv->rx_addr == ci->tx_addr) &&
   1413e:	fab0 f080 	clz	r0, r0
   14142:	0940      	lsrs	r0, r0, #5
   14144:	e716      	b.n	13f74 <isr+0x34c>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
   14146:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   1414a:	079a      	lsls	r2, r3, #30
   1414c:	d50d      	bpl.n	1416a <isr+0x542>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
   1414e:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
				      rl_idx)) ||
   14152:	079b      	lsls	r3, r3, #30
   14154:	f57f aeb0 	bpl.w	13eb8 <isr+0x290>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
   14158:	f1b8 0f00 	cmp.w	r8, #0
   1415c:	d10d      	bne.n	1417a <isr+0x552>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   1415e:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
   14162:	f003 fb81 	bl	17868 <ctrl_irk_whitelisted>
   14166:	b940      	cbnz	r0, 1417a <isr+0x552>
   14168:	e6a6      	b.n	13eb8 <isr+0x290>
		 ctrl_rl_addr_allowed(ci->tx_addr, ci->connect_ind.init_addr,
   1416a:	aa10      	add	r2, sp, #64	; 0x40
   1416c:	1cb1      	adds	r1, r6, #2
   1416e:	f3c0 1080 	ubfx	r0, r0, #6, #1
   14172:	f003 fd33 	bl	17bdc <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
   14176:	2800      	cmp	r0, #0
   14178:	d0e9      	beq.n	1414e <isr+0x526>
	       isr_adv_ci_adva_check(adv, ci);
   1417a:	4631      	mov	r1, r6
   1417c:	4628      	mov	r0, r5
   1417e:	f7fb faeb 	bl	f758 <isr_adv_ci_adva_check>
   14182:	e6f7      	b.n	13f74 <isr+0x34c>
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
   14184:	4619      	mov	r1, r3
   14186:	464a      	mov	r2, r9
   14188:	4658      	mov	r0, fp
   1418a:	f7ec fb2e 	bl	7ea <memset>
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
   1418e:	7833      	ldrb	r3, [r6, #0]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   14190:	980b      	ldr	r0, [sp, #44]	; 0x2c
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
   14192:	f3c3 1380 	ubfx	r3, r3, #6, #1
   14196:	737b      	strb	r3, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   14198:	464a      	mov	r2, r9
   1419a:	4651      	mov	r1, sl
   1419c:	e79d      	b.n	140da <isr+0x4b2>
   1419e:	bf00      	nop
   141a0:	026259ff 	.word	0x026259ff
   141a4:	01c9c37f 	.word	0x01c9c37f
   141a8:	00023dae 	.word	0x00023dae
   141ac:	000259f3 	.word	0x000259f3
   141b0:	00022d76 	.word	0x00022d76
   141b4:	000272d8 	.word	0x000272d8
   141b8:	000265ce 	.word	0x000265ce
			node_rx->hdr.handle = conn->handle;
   141bc:	8c2b      	ldrh	r3, [r5, #32]
   141be:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
   141c0:	230b      	movs	r3, #11
   141c2:	7103      	strb	r3, [r0, #4]
			if (pdu_adv->chan_sel) {
   141c4:	7833      	ldrb	r3, [r6, #0]
   141c6:	f013 0320 	ands.w	r3, r3, #32
   141ca:	d00e      	beq.n	141ea <isr+0x5c2>
					((u16_t)conn->access_addr[1] << 8) |
   141cc:	7c6a      	ldrb	r2, [r5, #17]
					conn->access_addr[0];
   141ce:	7c2b      	ldrb	r3, [r5, #16]
					((u16_t)conn->access_addr[3] << 8) |
   141d0:	7ce9      	ldrb	r1, [r5, #19]
				u16_t aa_ls =
   141d2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
   141d6:	7caa      	ldrb	r2, [r5, #18]
				u16_t aa_ms =
   141d8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
   141dc:	7f69      	ldrb	r1, [r5, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
   141de:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
   141e0:	f041 0140 	orr.w	r1, r1, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
   141e4:	83eb      	strh	r3, [r5, #30]
				conn->data_chan_sel = 1;
   141e6:	7769      	strb	r1, [r5, #29]
				le_chan_sel_algo->chan_sel_algo = 0x01;
   141e8:	2301      	movs	r3, #1
				le_chan_sel_algo->chan_sel_algo = 0x00;
   141ea:	72c3      	strb	r3, [r0, #11]
			packet_rx_enqueue();
   141ec:	f7fb fad8 	bl	f7a0 <packet_rx_enqueue>
		conn->slave.sca = pdu_adv->connect_ind.sca;
   141f0:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
   141f4:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
			(((gc_lookup_ppm[_radio.sca] +
   141f8:	497d      	ldr	r1, [pc, #500]	; (143f0 <isr+0x7c8>)
		conn->slave.sca = pdu_adv->connect_ind.sca;
   141fa:	0952      	lsrs	r2, r2, #5
   141fc:	f362 0384 	bfi	r3, r2, #2, #3
   14200:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
			(((gc_lookup_ppm[_radio.sca] +
   14204:	f894 3728 	ldrb.w	r3, [r4, #1832]	; 0x728
			   gc_lookup_ppm[conn->slave.sca]) *
   14208:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
			(((gc_lookup_ppm[_radio.sca] +
   1420c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   14210:	4413      	add	r3, r2
			   gc_lookup_ppm[conn->slave.sca]) *
   14212:	fb08 f303 	mul.w	r3, r8, r3
			  conn_interval_us) + (1000000 - 1)) / 1000000;
   14216:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
   1421a:	4a76      	ldr	r2, [pc, #472]	; (143f4 <isr+0x7cc>)
   1421c:	f203 233f 	addw	r3, r3, #575	; 0x23f
   14220:	fbb3 f3f2 	udiv	r3, r3, r2
		conn->slave.window_widening_periodic_us =
   14224:	656b      	str	r3, [r5, #84]	; 0x54
			(conn_interval_us >> 1) - RADIO_TIFS;
   14226:	ea4f 0358 	mov.w	r3, r8, lsr #1
   1422a:	3b96      	subs	r3, #150	; 0x96
		conn->slave.window_widening_max_us =
   1422c:	65ab      	str	r3, [r5, #88]	; 0x58
			pdu_adv->connect_ind.win_size * 1250;
   1422e:	7d73      	ldrb	r3, [r6, #21]
   14230:	f240 49e2 	movw	r9, #1250	; 0x4e2
		conn->slave.window_size_prepare_us = 0;
   14234:	2700      	movs	r7, #0
			pdu_adv->connect_ind.win_size * 1250;
   14236:	fb09 f303 	mul.w	r3, r9, r3
		conn->slave.window_size_event_us =
   1423a:	66ab      	str	r3, [r5, #104]	; 0x68
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
   1423c:	4639      	mov	r1, r7
		conn->slave.window_size_prepare_us = 0;
   1423e:	666f      	str	r7, [r5, #100]	; 0x64
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
   14240:	4638      	mov	r0, r7
   14242:	f004 fb84 	bl	1894e <radio_rx_ready_delay_get>
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
   14246:	496c      	ldr	r1, [pc, #432]	; (143f8 <isr+0x7d0>)
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
   14248:	4683      	mov	fp, r0
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
   1424a:	f200 4052 	addw	r0, r0, #1106	; 0x452
   1424e:	a366      	add	r3, pc, #408	; (adr r3, 143e8 <isr+0x7c0>)
   14250:	e9d3 2300 	ldrd	r2, r3, [r3]
   14254:	fba0 0101 	umull	r0, r1, r0, r1
   14258:	f7ec f81e 	bl	298 <__aeabi_uldivmod>
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
   1425c:	f8d4 378c 	ldr.w	r3, [r4, #1932]	; 0x78c
   14260:	606b      	str	r3, [r5, #4]
		conn->hdr.ticks_xtal_to_start =
   14262:	2227      	movs	r2, #39	; 0x27
		ticks_slot_offset =
   14264:	4293      	cmp	r3, r2
   14266:	bf38      	it	cc
   14268:	4613      	movcc	r3, r2
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
   1426a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticks_slot_offset =
   1426e:	469a      	mov	sl, r3
		conn_interval_us -=
   14270:	6d6b      	ldr	r3, [r5, #84]	; 0x54
		conn->hdr.ticks_xtal_to_start =
   14272:	602a      	str	r2, [r5, #0]
		conn->hdr.ticks_slot =
   14274:	60e8      	str	r0, [r5, #12]
		conn->hdr.ticks_preempt_to_start =
   14276:	60af      	str	r7, [r5, #8]
		conn_interval_us -=
   14278:	eba8 0803 	sub.w	r8, r8, r3
		conn_offset_us = radio_tmr_end_get();
   1427c:	f004 fd58 	bl	18d30 <radio_tmr_end_get>
   14280:	900b      	str	r0, [sp, #44]	; 0x2c
			((u64_t)pdu_adv->connect_ind.win_offset +
   14282:	8af0      	ldrh	r0, [r6, #22]
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
   14284:	4639      	mov	r1, r7
		conn_offset_us +=
   14286:	fb00 9909 	mla	r9, r0, r9, r9
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
   1428a:	4638      	mov	r0, r7
   1428c:	f004 fb5d 	bl	1894a <radio_tx_chain_delay_get>
   14290:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14292:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
   14296:	4499      	add	r9, r3
   14298:	eba9 0900 	sub.w	r9, r9, r0
		conn_offset_us -= RADIO_TICKER_JITTER_US;
   1429c:	eba9 030b 	sub.w	r3, r9, fp
   142a0:	930b      	str	r3, [sp, #44]	; 0x2c
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   142a2:	f240 5323 	movw	r3, #1315	; 0x523
   142a6:	9300      	str	r3, [sp, #0]
   142a8:	2205      	movs	r2, #5
   142aa:	4b54      	ldr	r3, [pc, #336]	; (143fc <isr+0x7d4>)
   142ac:	f8df b148 	ldr.w	fp, [pc, #328]	; 143f8 <isr+0x7d0>
   142b0:	4639      	mov	r1, r7
   142b2:	4638      	mov	r0, r7
   142b4:	f7f8 f9ba 	bl	c62c <ticker_stop>
		ticker_stop_adv_assert(ticker_status, (void *)__LINE__);
   142b8:	f240 5124 	movw	r1, #1316	; 0x524
   142bc:	f7fb fb98 	bl	f9f0 <ticker_stop_adv_assert>
		if (_pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   142c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   142c2:	5ce3      	ldrb	r3, [r4, r3]
   142c4:	f003 030f 	and.w	r3, r3, #15
   142c8:	2b01      	cmp	r3, #1
   142ca:	d106      	bne.n	142da <isr+0x6b2>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   142cc:	9700      	str	r7, [sp, #0]
   142ce:	463b      	mov	r3, r7
   142d0:	2203      	movs	r2, #3
   142d2:	4639      	mov	r1, r7
   142d4:	4638      	mov	r0, r7
   142d6:	f7f8 f9a9 	bl	c62c <ticker_stop>
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   142da:	fba8 890b 	umull	r8, r9, r8, fp
   142de:	a342      	add	r3, pc, #264	; (adr r3, 143e8 <isr+0x7c0>)
   142e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   142e4:	4640      	mov	r0, r8
   142e6:	4649      	mov	r1, r9
   142e8:	f7eb ffd6 	bl	298 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   142ec:	f895 3020 	ldrb.w	r3, [r5, #32]
   142f0:	68a4      	ldr	r4, [r4, #8]
   142f2:	9506      	str	r5, [sp, #24]
   142f4:	3307      	adds	r3, #7
   142f6:	b2db      	uxtb	r3, r3
   142f8:	930a      	str	r3, [sp, #40]	; 0x28
   142fa:	f240 533b 	movw	r3, #1339	; 0x53b
   142fe:	9308      	str	r3, [sp, #32]
   14300:	4b3f      	ldr	r3, [pc, #252]	; (14400 <isr+0x7d8>)
   14302:	9307      	str	r3, [sp, #28]
   14304:	4b3f      	ldr	r3, [pc, #252]	; (14404 <isr+0x7dc>)
   14306:	9305      	str	r3, [sp, #20]
   14308:	68eb      	ldr	r3, [r5, #12]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
   1430a:	4a3f      	ldr	r2, [pc, #252]	; (14408 <isr+0x7e0>)
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1430c:	4453      	add	r3, sl
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   1430e:	4606      	mov	r6, r0
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   14310:	9304      	str	r3, [sp, #16]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
   14312:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   14316:	2307      	movs	r3, #7
   14318:	2100      	movs	r1, #0
   1431a:	4343      	muls	r3, r0
   1431c:	fb02 3301 	mla	r3, r2, r1, r3
   14320:	fba0 1202 	umull	r1, r2, r0, r2
   14324:	441a      	add	r2, r3
   14326:	4608      	mov	r0, r1
   14328:	ebb8 0000 	subs.w	r0, r8, r0
   1432c:	4611      	mov	r1, r2
   1432e:	eb69 0101 	sbc.w	r1, r9, r1
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   14332:	2500      	movs	r5, #0
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
   14334:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   14338:	2300      	movs	r3, #0
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1433a:	9503      	str	r5, [sp, #12]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
   1433c:	f7eb ffac 	bl	298 <__aeabi_uldivmod>
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
   14340:	990b      	ldr	r1, [sp, #44]	; 0x2c
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   14342:	9002      	str	r0, [sp, #8]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
   14344:	a328      	add	r3, pc, #160	; (adr r3, 143e8 <isr+0x7c0>)
   14346:	e9d3 2300 	ldrd	r2, r3, [r3]
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1434a:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
   1434e:	fba1 010b 	umull	r0, r1, r1, fp
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   14352:	9601      	str	r6, [sp, #4]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
   14354:	f7eb ffa0 	bl	298 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   14358:	eba4 040a 	sub.w	r4, r4, sl
   1435c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   14360:	9000      	str	r0, [sp, #0]
   14362:	4623      	mov	r3, r4
   14364:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   14366:	4629      	mov	r1, r5
   14368:	4628      	mov	r0, r5
   1436a:	f7f8 f8c1 	bl	c4f0 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1436e:	f030 0302 	bics.w	r3, r0, #2
   14372:	f43f ad03 	beq.w	13d7c <isr+0x154>
   14376:	4b25      	ldr	r3, [pc, #148]	; (1440c <isr+0x7e4>)
   14378:	9301      	str	r3, [sp, #4]
   1437a:	9300      	str	r3, [sp, #0]
   1437c:	4b24      	ldr	r3, [pc, #144]	; (14410 <isr+0x7e8>)
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1437e:	4a25      	ldr	r2, [pc, #148]	; (14414 <isr+0x7ec>)
   14380:	4925      	ldr	r1, [pc, #148]	; (14418 <isr+0x7f0>)
   14382:	4826      	ldr	r0, [pc, #152]	; (1441c <isr+0x7f4>)
		LL_ASSERT(0);
   14384:	f7ed ff86 	bl	2294 <printk>
   14388:	4040      	eors	r0, r0
   1438a:	f380 8811 	msr	BASEPRI, r0
   1438e:	f04f 0004 	mov.w	r0, #4
   14392:	df02      	svc	2
		rl_idx = devmatch_ok ?
   14394:	f1b8 0f00 	cmp.w	r8, #0
   14398:	d01c      	beq.n	143d4 <isr+0x7ac>
			 ctrl_rl_idx(!!(_radio.scanner.filter_policy & 0x01),
   1439a:	f894 064d 	ldrb.w	r0, [r4, #1613]	; 0x64d
		rl_idx = devmatch_ok ?
   1439e:	4649      	mov	r1, r9
   143a0:	f3c0 1000 	ubfx	r0, r0, #4, #1
   143a4:	f003 f9c6 	bl	17734 <ctrl_rl_idx>
   143a8:	4681      	mov	r9, r0
		if (crc_ok &&
   143aa:	b147      	cbz	r7, 143be <isr+0x796>
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
   143ac:	f894 364d 	ldrb.w	r3, [r4, #1613]	; 0x64d
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
   143b0:	06df      	lsls	r7, r3, #27
   143b2:	d535      	bpl.n	14420 <isr+0x7f8>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
   143b4:	f894 364d 	ldrb.w	r3, [r4, #1613]	; 0x64d
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
   143b8:	06de      	lsls	r6, r3, #27
   143ba:	f100 818e 	bmi.w	146da <isr+0xab2>
			_radio.state = STATE_CLOSE;
   143be:	2303      	movs	r3, #3
   143c0:	7523      	strb	r3, [r4, #20]
			radio_disable();
   143c2:	f004 fae1 	bl	18988 <radio_disable>
			_radio.scanner.state = 0;
   143c6:	f894 364c 	ldrb.w	r3, [r4, #1612]	; 0x64c
   143ca:	f36f 0341 	bfc	r3, #1, #1
   143ce:	f884 364c 	strb.w	r3, [r4, #1612]	; 0x64c
   143d2:	e4d3      	b.n	13d7c <isr+0x154>
		rl_idx = devmatch_ok ?
   143d4:	f1ba 0f00 	cmp.w	sl, #0
   143d8:	d003      	beq.n	143e2 <isr+0x7ba>
   143da:	4658      	mov	r0, fp
   143dc:	f003 f9fe 	bl	177dc <ctrl_rl_irk_idx>
   143e0:	e7e2      	b.n	143a8 <isr+0x780>
   143e2:	f04f 09ff 	mov.w	r9, #255	; 0xff
   143e6:	e7e0      	b.n	143aa <isr+0x782>
   143e8:	1afd498d 	.word	0x1afd498d
   143ec:	00000007 	.word	0x00000007
   143f0:	000261ea 	.word	0x000261ea
   143f4:	000f4240 	.word	0x000f4240
   143f8:	3b9aca00 	.word	0x3b9aca00
   143fc:	0000f9f1 	.word	0x0000f9f1
   14400:	0000f9b5 	.word	0x0000f9b5
   14404:	0001250d 	.word	0x0001250d
   14408:	1afd498d 	.word	0x1afd498d
   1440c:	00023dae 	.word	0x00023dae
   14410:	000259f3 	.word	0x000259f3
   14414:	00022d76 	.word	0x00022d76
   14418:	000272d8 	.word	0x000272d8
   1441c:	00025f18 	.word	0x00025f18
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
   14420:	f1b8 0f00 	cmp.w	r8, #0
   14424:	d005      	beq.n	14432 <isr+0x80a>
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
   14426:	4649      	mov	r1, r9
   14428:	4650      	mov	r0, sl
   1442a:	f003 fb65 	bl	17af8 <ctrl_rl_idx_allowed>
   1442e:	2800      	cmp	r0, #0
   14430:	d0c0      	beq.n	143b4 <isr+0x78c>
	bool dir_report = false;
   14432:	2300      	movs	r3, #0
   14434:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
   14438:	f894 2749 	ldrb.w	r2, [r4, #1865]	; 0x749
   1443c:	f8d4 3744 	ldr.w	r3, [r4, #1860]	; 0x744
   14440:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
		if(pdu_adv_rx->type == 0x07){			//PDU_ADV_TYPE_EXT_IND
   14444:	7a3b      	ldrb	r3, [r7, #8]
   14446:	f003 030f 	and.w	r3, r3, #15
   1444a:	2b07      	cmp	r3, #7
   1444c:	d16c      	bne.n	14528 <isr+0x900>
		if(h->adv_addr){
   1444e:	7afb      	ldrb	r3, [r7, #11]
   14450:	07d8      	lsls	r0, r3, #31
			ptr += BDADDR_SIZE;
   14452:	bf4c      	ite	mi
   14454:	f107 0612 	addmi.w	r6, r7, #18
		ptr = (u8_t *)h + sizeof(*h);
   14458:	f107 060c 	addpl.w	r6, r7, #12
		if(h->tgt_addr){
   1445c:	079a      	lsls	r2, r3, #30
			ptr += BDADDR_SIZE;
   1445e:	bf48      	it	mi
   14460:	3606      	addmi	r6, #6
		if(h->adi){
   14462:	071b      	lsls	r3, r3, #28
		if(pdu_adv_rx->len == 0x12){
   14464:	7a7b      	ldrb	r3, [r7, #9]
			ptr += sizeof(*adi_ptr);
   14466:	bf48      	it	mi
   14468:	3602      	addmi	r6, #2
		if(pdu_adv_rx->len == 0x12){
   1446a:	2b12      	cmp	r3, #18
   1446c:	d11d      	bne.n	144aa <isr+0x882>
			stop_time_int = k_cycle_get_32();
   1446e:	f7ee fefb 	bl	3268 <_timer_cycle_get_32>
   14472:	4ba1      	ldr	r3, [pc, #644]	; (146f8 <isr+0xad0>)
   14474:	6018      	str	r0, [r3, #0]
			event_time_int = (stop_time_int - start_time_int);
   14476:	4ba1      	ldr	r3, [pc, #644]	; (146fc <isr+0xad4>)
   14478:	681b      	ldr	r3, [r3, #0]
   1447a:	eba0 0e03 	sub.w	lr, r0, r3
   1447e:	4ba0      	ldr	r3, [pc, #640]	; (14700 <isr+0xad8>)
   14480:	f8c3 e000 	str.w	lr, [r3]
			Time_difference_int = (SYS_CLOCK_HW_CYCLES_TO_NS(event_time_int))/1000;
   14484:	4b9f      	ldr	r3, [pc, #636]	; (14704 <isr+0xadc>)
   14486:	681a      	ldr	r2, [r3, #0]
   14488:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   1448c:	fb82 2308 	smull	r2, r3, r2, r8
   14490:	fba2 010e 	umull	r0, r1, r2, lr
   14494:	fb0e 1103 	mla	r1, lr, r3, r1
   14498:	4b9b      	ldr	r3, [pc, #620]	; (14708 <isr+0xae0>)
   1449a:	681a      	ldr	r2, [r3, #0]
   1449c:	17d3      	asrs	r3, r2, #31
   1449e:	f7eb fefb 	bl	298 <__aeabi_uldivmod>
   144a2:	4b9a      	ldr	r3, [pc, #616]	; (1470c <isr+0xae4>)
   144a4:	fbb0 f0f8 	udiv	r0, r0, r8
   144a8:	6018      	str	r0, [r3, #0]
		if(h->aux_ptr && !aux_scan ){
   144aa:	7afb      	ldrb	r3, [r7, #11]
   144ac:	06d8      	lsls	r0, r3, #27
   144ae:	d53b      	bpl.n	14528 <isr+0x900>
   144b0:	4b97      	ldr	r3, [pc, #604]	; (14710 <isr+0xae8>)
   144b2:	781a      	ldrb	r2, [r3, #0]
   144b4:	2a00      	cmp	r2, #0
   144b6:	d137      	bne.n	14528 <isr+0x900>
			aux_scan = 0x01;
   144b8:	2201      	movs	r2, #1
   144ba:	701a      	strb	r2, [r3, #0]
			_radio.ext_scanner.chan_index = ap->chan_idx;
   144bc:	7833      	ldrb	r3, [r6, #0]
   144be:	f3c3 0305 	ubfx	r3, r3, #0, #6
   144c2:	f884 36b0 	strb.w	r3, [r4, #1712]	; 0x6b0
			_radio.ext_scanner.chan_off	= ap->offs;
   144c6:	78b3      	ldrb	r3, [r6, #2]
   144c8:	7870      	ldrb	r0, [r6, #1]
			_radio.ext_scanner.off_unit	= ap->offs_units;
   144ca:	7832      	ldrb	r2, [r6, #0]
			_radio.ext_scanner.chan_off	= ap->offs;
   144cc:	f003 031f 	and.w	r3, r3, #31
   144d0:	ea40 2e03 	orr.w	lr, r0, r3, lsl #8
			_radio.ext_scanner.off_unit	= ap->offs_units;
   144d4:	f3c2 12c0 	ubfx	r2, r2, #7, #1
			_radio.ext_scanner.chan_off	= ap->offs;
   144d8:	4b8e      	ldr	r3, [pc, #568]	; (14714 <isr+0xaec>)
			_radio.ext_scanner.off_unit	= ap->offs_units;
   144da:	f884 26d4 	strb.w	r2, [r4, #1748]	; 0x6d4
			_radio.ext_scanner.chan_off	= ap->offs;
   144de:	fa1f f08e 	uxth.w	r0, lr
			if(_radio.ext_scanner.off_unit == 0 ){
   144e2:	f012 0fff 	tst.w	r2, #255	; 0xff
			_radio.ext_scanner.chan_off	= ap->offs;
   144e6:	f04f 0100 	mov.w	r1, #0
   144ea:	e9c3 0100 	strd	r0, r1, [r3]
			_radio.ext_scanner.chan_off_debug = ap->offs;
   144ee:	e9c3 0102 	strd	r0, r1, [r3, #8]
				_radio.ext_scanner.chan_off *= 30;
   144f2:	bf0b      	itete	eq
   144f4:	221e      	moveq	r2, #30
				_radio.ext_scanner.chan_off *= 1200;//300;
   144f6:	f44f 6096 	movne.w	r0, #1200	; 0x4b0
				_radio.ext_scanner.chan_off *= 30;
   144fa:	fbae 0102 	umulleq	r0, r1, lr, r2
				_radio.ext_scanner.chan_off *= 1200;//300;
   144fe:	fbae 0100 	umullne	r0, r1, lr, r0
   14502:	e9c3 0100 	strd	r0, r1, [r3]
			_radio.ext_scanner.chan_off_calculation = _radio.ext_scanner.chan_off;
   14506:	e9d3 0100 	ldrd	r0, r1, [r3]
   1450a:	4b83      	ldr	r3, [pc, #524]	; (14718 <isr+0xaf0>)
   1450c:	e9c3 0100 	strd	r0, r1, [r3]
			start_time_ticker = k_cycle_get_32();
   14510:	f7ee feaa 	bl	3268 <_timer_cycle_get_32>
   14514:	4b81      	ldr	r3, [pc, #516]	; (1471c <isr+0xaf4>)
   14516:	6018      	str	r0, [r3, #0]
			start_time_int = k_cycle_get_32();
   14518:	f7ee fea6 	bl	3268 <_timer_cycle_get_32>
   1451c:	4b77      	ldr	r3, [pc, #476]	; (146fc <isr+0xad4>)
   1451e:	6018      	str	r0, [r3, #0]
		_radio.ext_scanner.ticks_now = ticker_ticks_now_get();
   14520:	f7f8 f954 	bl	c7cc <ticker_ticks_now_get>
   14524:	f8c4 070c 	str.w	r0, [r4, #1804]	; 0x70c
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
   14528:	f8d4 3674 	ldr.w	r3, [r4, #1652]	; 0x674
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
   1452c:	f107 0608 	add.w	r6, r7, #8
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
   14530:	2b00      	cmp	r3, #0
   14532:	f000 8107 	beq.w	14744 <isr+0xb1c>
   14536:	f894 378a 	ldrb.w	r3, [r4, #1930]	; 0x78a
   1453a:	b133      	cbz	r3, 1454a <isr+0x922>
				      (_radio.fc_req == _radio.fc_ack)) &&
   1453c:	f894 3788 	ldrb.w	r3, [r4, #1928]	; 0x788
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
   14540:	f894 2789 	ldrb.w	r2, [r4, #1929]	; 0x789
   14544:	429a      	cmp	r2, r3
   14546:	f040 80fd 	bne.w	14744 <isr+0xb1c>
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
   1454a:	f894 364d 	ldrb.w	r3, [r4, #1613]	; 0x64d
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   1454e:	f3c3 1000 	ubfx	r0, r3, #4, #1
   14552:	2800      	cmp	r0, #0
   14554:	f000 80ea 	beq.w	1472c <isr+0xb04>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
   14558:	7a38      	ldrb	r0, [r7, #8]
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   1455a:	f010 000f 	ands.w	r0, r0, #15
   1455e:	f040 816c 	bne.w	1483a <isr+0xc12>
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
   14562:	f004 fbe5 	bl	18d30 <radio_tmr_end_get>
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
   14566:	f8d4 3648 	ldr.w	r3, [r4, #1608]	; 0x648
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
   1456a:	f200 2816 	addw	r8, r0, #534	; 0x216
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
   1456e:	486c      	ldr	r0, [pc, #432]	; (14720 <isr+0xaf8>)
   14570:	2207      	movs	r2, #7
   14572:	fba3 0100 	umull	r0, r1, r3, r0
   14576:	fb02 1103 	mla	r1, r2, r3, r1
   1457a:	a35d      	add	r3, pc, #372	; (adr r3, 146f0 <isr+0xac8>)
   1457c:	e9d3 2300 	ldrd	r2, r3, [r3]
   14580:	f7eb fe8a 	bl	298 <__aeabi_uldivmod>
   14584:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
	    isr_scan_init_check(pdu_adv_rx, rl_idx) &&
   14588:	4580      	cmp	r8, r0
   1458a:	f080 80db 	bcs.w	14744 <isr+0xb1c>
			node_rx = packet_rx_reserve_get(4);
   1458e:	2004      	movs	r0, #4
   14590:	f7fa f82c 	bl	e5ec <packet_rx_reserve_get>
		if (node_rx == 0) {
   14594:	4680      	mov	r8, r0
   14596:	2800      	cmp	r0, #0
   14598:	f43f af11 	beq.w	143be <isr+0x796>
		_radio.state = STATE_STOP;
   1459c:	2304      	movs	r3, #4
   1459e:	7523      	strb	r3, [r4, #20]
		_radio.scanner.conn = NULL;
   145a0:	2300      	movs	r3, #0
		conn = _radio.scanner.conn;
   145a2:	f8d4 6674 	ldr.w	r6, [r4, #1652]	; 0x674
		_radio.scanner.conn = NULL;
   145a6:	f8c4 3674 	str.w	r3, [r4, #1652]	; 0x674
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
   145aa:	f004 fa43 	bl	18a34 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_IND;
   145ae:	7803      	ldrb	r3, [r0, #0]
			pdu_adv_tx->chan_sel = 1;
   145b0:	f003 03d0 	and.w	r3, r3, #208	; 0xd0
   145b4:	f043 0325 	orr.w	r3, r3, #37	; 0x25
   145b8:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
   145ba:	7a3b      	ldrb	r3, [r7, #8]
   145bc:	7802      	ldrb	r2, [r0, #0]
   145be:	f3c3 1380 	ubfx	r3, r3, #6, #1
   145c2:	f363 12c7 	bfi	r2, r3, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_connect_ind);
   145c6:	2322      	movs	r3, #34	; 0x22
   145c8:	7043      	strb	r3, [r0, #1]
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
   145ca:	4605      	mov	r5, r0
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
   145cc:	7002      	strb	r2, [r0, #0]
		lrpa = ctrl_lrpa_get(rl_idx);
   145ce:	4648      	mov	r0, r9
   145d0:	f003 f892 	bl	176f8 <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
   145d4:	f894 364e 	ldrb.w	r3, [r4, #1614]	; 0x64e
		lrpa = ctrl_lrpa_get(rl_idx);
   145d8:	4601      	mov	r1, r0
   145da:	4628      	mov	r0, r5
		if (_radio.scanner.rpa_gen && lrpa) {
   145dc:	f013 0f01 	tst.w	r3, #1
   145e0:	f810 3b02 	ldrb.w	r3, [r0], #2
   145e4:	f000 8134 	beq.w	14850 <isr+0xc28>
   145e8:	2900      	cmp	r1, #0
   145ea:	f000 8131 	beq.w	14850 <isr+0xc28>
			pdu_adv_tx->tx_addr = 1;
   145ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   145f2:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
   145f4:	2206      	movs	r2, #6
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
   145f6:	f7ec f8cc 	bl	792 <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.adv_addr[0],
   145fa:	f105 0308 	add.w	r3, r5, #8
   145fe:	4618      	mov	r0, r3
   14600:	2206      	movs	r2, #6
   14602:	f107 010a 	add.w	r1, r7, #10
   14606:	930a      	str	r3, [sp, #40]	; 0x28
   14608:	f7ec f8c3 	bl	792 <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.
   1460c:	2204      	movs	r2, #4
   1460e:	f106 0110 	add.w	r1, r6, #16
   14612:	f105 000e 	add.w	r0, r5, #14
   14616:	f7ec f8bc 	bl	792 <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.crc_init[0],
   1461a:	2203      	movs	r2, #3
   1461c:	f106 0114 	add.w	r1, r6, #20
   14620:	f105 0012 	add.w	r0, r5, #18
   14624:	f7ec f8b5 	bl	792 <memcpy>
		pdu_adv_tx->connect_ind.win_size = 1;
   14628:	2301      	movs	r3, #1
   1462a:	756b      	strb	r3, [r5, #21]
			(u32_t)_radio.scanner.conn_interval * 1250;
   1462c:	f8b4 3668 	ldrh.w	r3, [r4, #1640]	; 0x668
		conn_interval_us =
   14630:	f240 42e2 	movw	r2, #1250	; 0x4e2
   14634:	4353      	muls	r3, r2
   14636:	930b      	str	r3, [sp, #44]	; 0x2c
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
   14638:	f004 fb7a 	bl	18d30 <radio_tmr_end_get>
		if (!_radio.remainder_anchor ||
   1463c:	68e2      	ldr	r2, [r4, #12]
		if (_radio.scanner.win_offset_us == 0) {
   1463e:	f8d4 b678 	ldr.w	fp, [r4, #1656]	; 0x678
		if (!_radio.remainder_anchor ||
   14642:	2a00      	cmp	r2, #0
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
   14644:	f500 63db 	add.w	r3, r0, #1752	; 0x6d8
			conn_offset_us -= HAL_TICKER_TICKS_TO_US(1);
   14648:	bfd8      	it	le
   1464a:	f200 63ba 	addwle	r3, r0, #1722	; 0x6ba
		if (_radio.scanner.win_offset_us == 0) {
   1464e:	f1bb 0f00 	cmp.w	fp, #0
   14652:	f040 8108 	bne.w	14866 <isr+0xc3e>
			pdu_adv_tx->connect_ind.win_offset = 0;
   14656:	f885 b016 	strb.w	fp, [r5, #22]
   1465a:	f885 b017 	strb.w	fp, [r5, #23]
   1465e:	469b      	mov	fp, r3
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
   14660:	2100      	movs	r1, #0
   14662:	4608      	mov	r0, r1
   14664:	f004 f968 	bl	18938 <radio_tx_ready_delay_get>
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
   14668:	2100      	movs	r1, #0
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
   1466a:	ebab 0b00 	sub.w	fp, fp, r0
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
   1466e:	4608      	mov	r0, r1
   14670:	f004 f96b 	bl	1894a <radio_tx_chain_delay_get>
   14674:	ebab 0000 	sub.w	r0, fp, r0
		conn_space_us += HAL_TICKER_TICKS_TO_US(1);
   14678:	f100 031e 	add.w	r3, r0, #30
   1467c:	930c      	str	r3, [sp, #48]	; 0x30
		pdu_adv_tx->connect_ind.interval =
   1467e:	f8b4 3668 	ldrh.w	r3, [r4, #1640]	; 0x668
   14682:	832b      	strh	r3, [r5, #24]
		pdu_adv_tx->connect_ind.latency =
   14684:	f8b4 366a 	ldrh.w	r3, [r4, #1642]	; 0x66a
   14688:	836b      	strh	r3, [r5, #26]
		pdu_adv_tx->connect_ind.timeout =
   1468a:	f8b4 366c 	ldrh.w	r3, [r4, #1644]	; 0x66c
   1468e:	83ab      	strh	r3, [r5, #28]
		memcpy(&pdu_adv_tx->connect_ind.chan_map[0],
   14690:	f106 0117 	add.w	r1, r6, #23
   14694:	2205      	movs	r2, #5
   14696:	f105 001e 	add.w	r0, r5, #30
   1469a:	f7ec f87a 	bl	792 <memcpy>
		pdu_adv_tx->connect_ind.hop =
   1469e:	7fb2      	ldrb	r2, [r6, #30]
   146a0:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
   146a4:	f362 0304 	bfi	r3, r2, #0, #5
   146a8:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		pdu_adv_tx->connect_ind.sca = _radio.sca;
   146ac:	f894 2728 	ldrb.w	r2, [r4, #1832]	; 0x728
   146b0:	f362 1347 	bfi	r3, r2, #5, #3
   146b4:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		radio_switch_complete_and_disable();
   146b8:	f004 f9d6 	bl	18a68 <radio_switch_complete_and_disable>
		radio_pkt_tx_set(pdu_adv_tx);
   146bc:	4628      	mov	r0, r5
   146be:	f004 f935 	bl	1892c <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   146c2:	f004 f97f 	bl	189c4 <radio_is_ready>
   146c6:	4683      	mov	fp, r0
   146c8:	2800      	cmp	r0, #0
   146ca:	f000 80dc 	beq.w	14886 <isr+0xc5e>
		LL_ASSERT(!radio_is_ready());
   146ce:	4b15      	ldr	r3, [pc, #84]	; (14724 <isr+0xafc>)
   146d0:	9301      	str	r3, [sp, #4]
   146d2:	9300      	str	r3, [sp, #0]
   146d4:	4b14      	ldr	r3, [pc, #80]	; (14728 <isr+0xb00>)
   146d6:	f7ff bb05 	b.w	13ce4 <isr+0xbc>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
   146da:	f1b8 0f00 	cmp.w	r8, #0
   146de:	f47f aea8 	bne.w	14432 <isr+0x80a>
		 (devmatch_ok || ctrl_irk_whitelisted(rl_idx)));
   146e2:	4648      	mov	r0, r9
   146e4:	f003 f8c0 	bl	17868 <ctrl_irk_whitelisted>
		if (crc_ok &&
   146e8:	2800      	cmp	r0, #0
   146ea:	f43f ae68 	beq.w	143be <isr+0x796>
   146ee:	e6a0      	b.n	14432 <isr+0x80a>
   146f0:	3b9aca00 	.word	0x3b9aca00
   146f4:	00000000 	.word	0x00000000
   146f8:	20003298 	.word	0x20003298
   146fc:	20003208 	.word	0x20003208
   14700:	200032c8 	.word	0x200032c8
   14704:	2000a868 	.word	0x2000a868
   14708:	2000a864 	.word	0x2000a864
   1470c:	200032ec 	.word	0x200032ec
   14710:	20001388 	.word	0x20001388
   14714:	200012a8 	.word	0x200012a8
   14718:	200012b8 	.word	0x200012b8
   1471c:	200032c0 	.word	0x200032c0
   14720:	1afd498d 	.word	0x1afd498d
   14724:	00023dae 	.word	0x00023dae
   14728:	00025a11 	.word	0x00025a11
	if (rl_idx != FILTER_IDX_NONE) {
   1472c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   14730:	d072      	beq.n	14818 <isr+0xbf0>
		return (rl_idx == _radio.scanner.rl_idx);
   14732:	f894 064f 	ldrb.w	r0, [r4, #1615]	; 0x64f
   14736:	eba0 0209 	sub.w	r2, r0, r9
   1473a:	4250      	negs	r0, r2
   1473c:	4150      	adcs	r0, r2
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
   1473e:	2800      	cmp	r0, #0
   14740:	f47f af0a 	bne.w	14558 <isr+0x930>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   14744:	7a38      	ldrb	r0, [r7, #8]
   14746:	f010 000f 	ands.w	r0, r0, #15
   1474a:	d002      	beq.n	14752 <isr+0xb2a>
   1474c:	2806      	cmp	r0, #6
   1474e:	f040 81a6 	bne.w	14a9e <isr+0xe76>
		 (_radio.scanner.type != 0) &&
   14752:	f894 364d 	ldrb.w	r3, [r4, #1613]	; 0x64d
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
   14756:	071b      	lsls	r3, r3, #28
   14758:	f140 818c 	bpl.w	14a74 <isr+0xe4c>
		 (_radio.scanner.type != 0) &&
   1475c:	f8d4 2674 	ldr.w	r2, [r4, #1652]	; 0x674
   14760:	2a00      	cmp	r2, #0
   14762:	f040 8187 	bne.w	14a74 <isr+0xe4c>
		err = isr_rx_scan_report(rssi_ready,
   14766:	f1ba 0f00 	cmp.w	sl, #0
   1476a:	bf14      	ite	ne
   1476c:	4649      	movne	r1, r9
   1476e:	21ff      	moveq	r1, #255	; 0xff
   14770:	4628      	mov	r0, r5
   14772:	f7fb f8ad 	bl	f8d0 <isr_rx_scan_report>
		if (err) {
   14776:	2800      	cmp	r0, #0
   14778:	f47f ae21 	bne.w	143be <isr+0x796>
		if(pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND){
   1477c:	7a3b      	ldrb	r3, [r7, #8]
   1477e:	f003 030f 	and.w	r3, r3, #15
   14782:	2b07      	cmp	r3, #7
   14784:	d101      	bne.n	1478a <isr+0xb62>
			pdu_adv_tx = (void *)radio_pkt_scratch_get();
   14786:	f004 f955 	bl	18a34 <radio_pkt_scratch_get>
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
   1478a:	f004 f953 	bl	18a34 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
   1478e:	7803      	ldrb	r3, [r0, #0]
   14790:	2203      	movs	r2, #3
   14792:	f362 0303 	bfi	r3, r2, #0, #4
   14796:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
   14798:	7a3b      	ldrb	r3, [r7, #8]
   1479a:	7802      	ldrb	r2, [r0, #0]
   1479c:	f3c3 1380 	ubfx	r3, r3, #6, #1
   147a0:	f363 12c7 	bfi	r2, r3, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_scan_req);
   147a4:	230c      	movs	r3, #12
   147a6:	7043      	strb	r3, [r0, #1]
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
   147a8:	4605      	mov	r5, r0
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
   147aa:	7002      	strb	r2, [r0, #0]
		lrpa = ctrl_lrpa_get(rl_idx);
   147ac:	4648      	mov	r0, r9
   147ae:	f002 ffa3 	bl	176f8 <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
   147b2:	f894 364e 	ldrb.w	r3, [r4, #1614]	; 0x64e
		lrpa = ctrl_lrpa_get(rl_idx);
   147b6:	4601      	mov	r1, r0
   147b8:	4628      	mov	r0, r5
		if (_radio.scanner.rpa_gen && lrpa) {
   147ba:	f013 0f01 	tst.w	r3, #1
   147be:	f810 3b02 	ldrb.w	r3, [r0], #2
   147c2:	f000 814e 	beq.w	14a62 <isr+0xe3a>
   147c6:	2900      	cmp	r1, #0
   147c8:	f000 814b 	beq.w	14a62 <isr+0xe3a>
			pdu_adv_tx->tx_addr = 1;
   147cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   147d0:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
   147d2:	2206      	movs	r2, #6
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
   147d4:	f7eb ffdd 	bl	792 <memcpy>
		memcpy(&pdu_adv_tx->scan_req.adv_addr[0],
   147d8:	2206      	movs	r2, #6
   147da:	f107 010a 	add.w	r1, r7, #10
   147de:	f105 0008 	add.w	r0, r5, #8
   147e2:	f7eb ffd6 	bl	792 <memcpy>
		_radio.scanner.state = 1;
   147e6:	f894 364c 	ldrb.w	r3, [r4, #1612]	; 0x64c
   147ea:	f043 0302 	orr.w	r3, r3, #2
   147ee:	f884 364c 	strb.w	r3, [r4, #1612]	; 0x64c
		radio_tmr_tifs_set(RADIO_TIFS);
   147f2:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
   147f4:	2302      	movs	r3, #2
   147f6:	7523      	strb	r3, [r4, #20]
		radio_tmr_tifs_set(RADIO_TIFS);
   147f8:	f004 f9be 	bl	18b78 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   147fc:	2000      	movs	r0, #0
   147fe:	f004 f91d 	bl	18a3c <radio_switch_complete_and_rx>
		radio_pkt_tx_set(pdu_adv_tx);
   14802:	4628      	mov	r0, r5
   14804:	f004 f892 	bl	1892c <radio_pkt_tx_set>
		radio_tmr_end_capture();
   14808:	f004 fa80 	bl	18d0c <radio_tmr_end_capture>
		LL_ASSERT(!radio_is_ready());
   1480c:	f004 f8da 	bl	189c4 <radio_is_ready>
   14810:	2800      	cmp	r0, #0
   14812:	f43f aab3 	beq.w	13d7c <isr+0x154>
   14816:	e75a      	b.n	146ce <isr+0xaa6>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
   14818:	7a3a      	ldrb	r2, [r7, #8]
   1481a:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1481e:	f3c2 1280 	ubfx	r2, r2, #6, #1
   14822:	4293      	cmp	r3, r2
   14824:	d18b      	bne.n	1473e <isr+0xb16>
		(memcmp(&_radio.scanner.adv_addr[0],
   14826:	2206      	movs	r2, #6
   14828:	f107 010a 	add.w	r1, r7, #10
   1482c:	48b8      	ldr	r0, [pc, #736]	; (14b10 <isr+0xee8>)
   1482e:	f7eb ff83 	bl	738 <memcmp>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
   14832:	fab0 f080 	clz	r0, r0
   14836:	0940      	lsrs	r0, r0, #5
   14838:	e781      	b.n	1473e <isr+0xb16>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
   1483a:	2801      	cmp	r0, #1
   1483c:	d186      	bne.n	1474c <isr+0xb24>
		  isr_scan_tgta_check(true, pdu, rl_idx, NULL)))));
   1483e:	2300      	movs	r3, #0
   14840:	464a      	mov	r2, r9
   14842:	4631      	mov	r1, r6
   14844:	f7fa fff8 	bl	f838 <isr_scan_tgta_check>
				      (_radio.fc_req == _radio.fc_ack)) &&
   14848:	2800      	cmp	r0, #0
   1484a:	f43f af7b 	beq.w	14744 <isr+0xb1c>
   1484e:	e688      	b.n	14562 <isr+0x93a>
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
   14850:	f894 264d 	ldrb.w	r2, [r4, #1613]	; 0x64d
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
   14854:	49af      	ldr	r1, [pc, #700]	; (14b14 <isr+0xeec>)
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
   14856:	09d2      	lsrs	r2, r2, #7
   14858:	f362 1386 	bfi	r3, r2, #6, #1
   1485c:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
   1485e:	2206      	movs	r2, #6
   14860:	e6c9      	b.n	145f6 <isr+0x9ce>
				conn_space_us += conn_interval_us;
   14862:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   14864:	4493      	add	fp, r2
			while ((conn_space_us & ((u32_t)1 << 31)) ||
   14866:	f1bb 0f00 	cmp.w	fp, #0
   1486a:	dbfa      	blt.n	14862 <isr+0xc3a>
   1486c:	459b      	cmp	fp, r3
   1486e:	d3f8      	bcc.n	14862 <isr+0xc3a>
				(conn_space_us - conn_offset_us) / 1250;
   14870:	ebab 0303 	sub.w	r3, fp, r3
			pdu_adv_tx->connect_ind.win_offset =
   14874:	f240 42e2 	movw	r2, #1250	; 0x4e2
   14878:	fbb3 f3f2 	udiv	r3, r3, r2
   1487c:	82eb      	strh	r3, [r5, #22]
			pdu_adv_tx->connect_ind.win_size++;
   1487e:	7d6b      	ldrb	r3, [r5, #21]
   14880:	3301      	adds	r3, #1
   14882:	756b      	strb	r3, [r5, #21]
   14884:	e6ec      	b.n	14660 <isr+0xa38>
		conn->handle = mem_index_get(conn, _radio.conn_pool,
   14886:	f44f 72aa 	mov.w	r2, #340	; 0x154
   1488a:	f8d4 1710 	ldr.w	r1, [r4, #1808]	; 0x710
   1488e:	4630      	mov	r0, r6
   14890:	f7f6 ffdd 	bl	b84e <mem_index_get>
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
   14894:	4629      	mov	r1, r5
		conn->handle = mem_index_get(conn, _radio.conn_pool,
   14896:	8430      	strh	r0, [r6, #32]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   14898:	f04f 0306 	mov.w	r3, #6
		radio_le_conn_cmplt->status = 0x00;
   1489c:	f888 b00b 	strb.w	fp, [r8, #11]
		radio_le_conn_cmplt->role = 0x00;
   148a0:	f888 b00c 	strb.w	fp, [r8, #12]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   148a4:	f888 3004 	strb.w	r3, [r8, #4]
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
   148a8:	f811 3b02 	ldrb.w	r3, [r1], #2
		node_rx->hdr.handle = conn->handle;
   148ac:	f8a8 0006 	strh.w	r0, [r8, #6]
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
   148b0:	f3c3 1380 	ubfx	r3, r3, #6, #1
   148b4:	f888 301a 	strb.w	r3, [r8, #26]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
   148b8:	2206      	movs	r2, #6
   148ba:	f108 001b 	add.w	r0, r8, #27
   148be:	f7eb ff68 	bl	792 <memcpy>
   148c2:	f108 0b0e 	add.w	fp, r8, #14
   148c6:	f108 0314 	add.w	r3, r8, #20
		if (irkmatch_ok && rl_idx != FILTER_IDX_NONE) {
   148ca:	f1ba 0f00 	cmp.w	sl, #0
   148ce:	d035      	beq.n	1493c <isr+0xd14>
   148d0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   148d4:	d032      	beq.n	1493c <isr+0xd14>
			ll_rl_id_addr_get(rl_idx,
   148d6:	465a      	mov	r2, fp
   148d8:	f108 010d 	add.w	r1, r8, #13
   148dc:	4648      	mov	r0, r9
   148de:	930d      	str	r3, [sp, #52]	; 0x34
   148e0:	f003 f93e 	bl	17b60 <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
   148e4:	f898 200d 	ldrb.w	r2, [r8, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
   148e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   148ea:	990a      	ldr	r1, [sp, #40]	; 0x28
			radio_le_conn_cmplt->peer_addr_type += 2;
   148ec:	3202      	adds	r2, #2
   148ee:	f888 200d 	strb.w	r2, [r8, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
   148f2:	4618      	mov	r0, r3
   148f4:	2206      	movs	r2, #6
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   148f6:	f7eb ff4c 	bl	792 <memcpy>
		radio_le_conn_cmplt->interval = _radio.scanner.conn_interval;
   148fa:	f8b4 3668 	ldrh.w	r3, [r4, #1640]	; 0x668
   148fe:	f8a8 3021 	strh.w	r3, [r8, #33]	; 0x21
		radio_le_conn_cmplt->latency = _radio.scanner.conn_latency;
   14902:	f8b4 366a 	ldrh.w	r3, [r4, #1642]	; 0x66a
   14906:	f8a8 3023 	strh.w	r3, [r8, #35]	; 0x23
		radio_le_conn_cmplt->timeout = _radio.scanner.conn_timeout;
   1490a:	f8b4 366c 	ldrh.w	r3, [r4, #1644]	; 0x66c
   1490e:	f8a8 3025 	strh.w	r3, [r8, #37]	; 0x25
			pdu_adv_tx->connect_ind.sca;
   14912:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
   14916:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
   1491a:	f888 3027 	strb.w	r3, [r8, #39]	; 0x27
		rx_fc_lock(conn->handle);
   1491e:	8c30      	ldrh	r0, [r6, #32]
   14920:	f7fb f82e 	bl	f980 <rx_fc_lock>
		packet_rx_enqueue();
   14924:	f7fa ff3c 	bl	f7a0 <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
   14928:	2003      	movs	r0, #3
   1492a:	f7f9 fe5f 	bl	e5ec <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
   1492e:	b998      	cbnz	r0, 14958 <isr+0xd30>
   14930:	4b79      	ldr	r3, [pc, #484]	; (14b18 <isr+0xef0>)
   14932:	9301      	str	r3, [sp, #4]
   14934:	9300      	str	r3, [sp, #0]
   14936:	4b79      	ldr	r3, [pc, #484]	; (14b1c <isr+0xef4>)
   14938:	f7ff bbee 	b.w	14118 <isr+0x4f0>
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
   1493c:	2206      	movs	r2, #6
   1493e:	2100      	movs	r1, #0
   14940:	4618      	mov	r0, r3
   14942:	f7eb ff52 	bl	7ea <memset>
				pdu_adv_tx->rx_addr;
   14946:	782b      	ldrb	r3, [r5, #0]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   14948:	990a      	ldr	r1, [sp, #40]	; 0x28
				pdu_adv_tx->rx_addr;
   1494a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
			radio_le_conn_cmplt->peer_addr_type =
   1494e:	f888 300d 	strb.w	r3, [r8, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   14952:	2206      	movs	r2, #6
   14954:	4658      	mov	r0, fp
   14956:	e7ce      	b.n	148f6 <isr+0xcce>
			node_rx->hdr.handle = conn->handle;
   14958:	8c33      	ldrh	r3, [r6, #32]
   1495a:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
   1495c:	230b      	movs	r3, #11
   1495e:	7103      	strb	r3, [r0, #4]
			if (pdu_adv_rx->chan_sel) {
   14960:	7a3b      	ldrb	r3, [r7, #8]
   14962:	f013 0320 	ands.w	r3, r3, #32
   14966:	d00e      	beq.n	14986 <isr+0xd5e>
					((u16_t)conn->access_addr[1] << 8) |
   14968:	7c72      	ldrb	r2, [r6, #17]
					conn->access_addr[0];
   1496a:	7c33      	ldrb	r3, [r6, #16]
					((u16_t)conn->access_addr[3] << 8) |
   1496c:	7cf1      	ldrb	r1, [r6, #19]
				u16_t aa_ls =
   1496e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
   14972:	7cb2      	ldrb	r2, [r6, #18]
				u16_t aa_ms =
   14974:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
   14978:	7f71      	ldrb	r1, [r6, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
   1497a:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
   1497c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
   14980:	83f3      	strh	r3, [r6, #30]
				conn->data_chan_sel = 1;
   14982:	7771      	strb	r1, [r6, #29]
				le_chan_sel_algo->chan_sel_algo = 0x01;
   14984:	2301      	movs	r3, #1
				le_chan_sel_algo->chan_sel_algo = 0x00;
   14986:	72c3      	strb	r3, [r0, #11]
			packet_rx_enqueue();
   14988:	f7fa ff0a 	bl	f7a0 <packet_rx_enqueue>
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
   1498c:	2327      	movs	r3, #39	; 0x27
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
   1498e:	f8d4 778c 	ldr.w	r7, [r4, #1932]	; 0x78c
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
   14992:	6033      	str	r3, [r6, #0]
		conn->hdr.ticks_slot = _radio.scanner.ticks_conn_slot;
   14994:	f8d4 3670 	ldr.w	r3, [r4, #1648]	; 0x670
   14998:	60f3      	str	r3, [r6, #12]
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
   1499a:	2500      	movs	r5, #0
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   1499c:	f44f 63ee 	mov.w	r3, #1904	; 0x770
		ticks_slot_offset = (conn->hdr.ticks_active_to_start <
   149a0:	2f27      	cmp	r7, #39	; 0x27
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
   149a2:	6077      	str	r7, [r6, #4]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   149a4:	f04f 0206 	mov.w	r2, #6
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
   149a8:	60b5      	str	r5, [r6, #8]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   149aa:	4629      	mov	r1, r5
   149ac:	9300      	str	r3, [sp, #0]
   149ae:	4628      	mov	r0, r5
   149b0:	4b5b      	ldr	r3, [pc, #364]	; (14b20 <isr+0xef8>)
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   149b2:	f8df a178 	ldr.w	sl, [pc, #376]	; 14b2c <isr+0xf04>
		ticks_slot_offset = (conn->hdr.ticks_active_to_start <
   149b6:	bf38      	it	cc
   149b8:	2727      	movcc	r7, #39	; 0x27
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   149ba:	f7f7 fe37 	bl	c62c <ticker_stop>
		ticker_stop_scan_assert(ticker_status, (void *)__LINE__);
   149be:	f240 7171 	movw	r1, #1905	; 0x771
   149c2:	f7fb f849 	bl	fa58 <ticker_stop_scan_assert>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   149c6:	462b      	mov	r3, r5
   149c8:	2204      	movs	r2, #4
   149ca:	4629      	mov	r1, r5
   149cc:	9500      	str	r5, [sp, #0]
   149ce:	4628      	mov	r0, r5
   149d0:	f7f7 fe2c 	bl	c62c <ticker_stop>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   149d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   149d6:	fba3 890a 	umull	r8, r9, r3, sl
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   149da:	68a3      	ldr	r3, [r4, #8]
   149dc:	f896 4020 	ldrb.w	r4, [r6, #32]
		ticker_status =
   149e0:	9606      	str	r6, [sp, #24]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   149e2:	eba3 0b07 	sub.w	fp, r3, r7
		ticker_status =
   149e6:	f44f 63f1 	mov.w	r3, #1928	; 0x788
   149ea:	9308      	str	r3, [sp, #32]
   149ec:	4b4d      	ldr	r3, [pc, #308]	; (14b24 <isr+0xefc>)
   149ee:	9307      	str	r3, [sp, #28]
   149f0:	4b4d      	ldr	r3, [pc, #308]	; (14b28 <isr+0xf00>)
   149f2:	9305      	str	r3, [sp, #20]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   149f4:	68f3      	ldr	r3, [r6, #12]
		ticker_status =
   149f6:	9503      	str	r5, [sp, #12]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   149f8:	441f      	add	r7, r3
				     HAL_TICKER_REMAINDER(conn_interval_us),
   149fa:	4640      	mov	r0, r8
   149fc:	a342      	add	r3, pc, #264	; (adr r3, 14b08 <isr+0xee0>)
   149fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   14a02:	4649      	mov	r1, r9
		ticker_status =
   14a04:	9704      	str	r7, [sp, #16]
				     HAL_TICKER_REMAINDER(conn_interval_us),
   14a06:	f7eb fc47 	bl	298 <__aeabi_uldivmod>
   14a0a:	4610      	mov	r0, r2
   14a0c:	4619      	mov	r1, r3
   14a0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   14a12:	2300      	movs	r3, #0
   14a14:	f7eb fc40 	bl	298 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   14a18:	a33b      	add	r3, pc, #236	; (adr r3, 14b08 <isr+0xee0>)
   14a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   14a1e:	9002      	str	r0, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   14a20:	4649      	mov	r1, r9
   14a22:	4640      	mov	r0, r8
   14a24:	f7eb fc38 	bl	298 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
   14a28:	990c      	ldr	r1, [sp, #48]	; 0x30
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   14a2a:	9001      	str	r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
   14a2c:	a336      	add	r3, pc, #216	; (adr r3, 14b08 <isr+0xee0>)
   14a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
   14a32:	fba1 010a 	umull	r0, r1, r1, sl
   14a36:	f7eb fc2f 	bl	298 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   14a3a:	3407      	adds	r4, #7
   14a3c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticker_status =
   14a40:	b2e4      	uxtb	r4, r4
   14a42:	9000      	str	r0, [sp, #0]
   14a44:	465b      	mov	r3, fp
   14a46:	4622      	mov	r2, r4
   14a48:	4629      	mov	r1, r5
   14a4a:	4628      	mov	r0, r5
   14a4c:	f7f7 fd50 	bl	c4f0 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14a50:	f030 0302 	bics.w	r3, r0, #2
   14a54:	f43f a992 	beq.w	13d7c <isr+0x154>
   14a58:	4b2f      	ldr	r3, [pc, #188]	; (14b18 <isr+0xef0>)
   14a5a:	9301      	str	r3, [sp, #4]
   14a5c:	9300      	str	r3, [sp, #0]
   14a5e:	4b2f      	ldr	r3, [pc, #188]	; (14b1c <isr+0xef4>)
   14a60:	e48d      	b.n	1437e <isr+0x756>
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
   14a62:	f894 264d 	ldrb.w	r2, [r4, #1613]	; 0x64d
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
   14a66:	492b      	ldr	r1, [pc, #172]	; (14b14 <isr+0xeec>)
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
   14a68:	09d2      	lsrs	r2, r2, #7
   14a6a:	f362 1386 	bfi	r3, r2, #6, #1
   14a6e:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
   14a70:	2206      	movs	r2, #6
   14a72:	e6af      	b.n	147d4 <isr+0xbac>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   14a74:	b998      	cbnz	r0, 14a9e <isr+0xe76>
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
   14a76:	7a7b      	ldrb	r3, [r7, #9]
   14a78:	2b00      	cmp	r3, #0
   14a7a:	f43f aca0 	beq.w	143be <isr+0x796>
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
   14a7e:	f8d4 3674 	ldr.w	r3, [r4, #1652]	; 0x674
   14a82:	2b00      	cmp	r3, #0
   14a84:	f47f ac9b 	bne.w	143be <isr+0x796>
		err = isr_rx_scan_report(rssi_ready,
   14a88:	f1ba 0f00 	cmp.w	sl, #0
   14a8c:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   14a90:	bf14      	ite	ne
   14a92:	4649      	movne	r1, r9
   14a94:	21ff      	moveq	r1, #255	; 0xff
   14a96:	4628      	mov	r0, r5
   14a98:	f7fa ff1a 	bl	f8d0 <isr_rx_scan_report>
   14a9c:	e48f      	b.n	143be <isr+0x796>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   14a9e:	2801      	cmp	r0, #1
   14aa0:	d00d      	beq.n	14abe <isr+0xe96>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
   14aa2:	7a3b      	ldrb	r3, [r7, #8]
					&dir_report))) ||
   14aa4:	f003 020b 	and.w	r2, r3, #11
   14aa8:	2a02      	cmp	r2, #2
   14aaa:	d0e4      	beq.n	14a76 <isr+0xe4e>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
   14aac:	f003 030f 	and.w	r3, r3, #15
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND) ||
   14ab0:	2b07      	cmp	r3, #7
   14ab2:	d10d      	bne.n	14ad0 <isr+0xea8>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
   14ab4:	f894 364d 	ldrb.w	r3, [r4, #1613]	; 0x64d
   14ab8:	0758      	lsls	r0, r3, #29
   14aba:	d1dc      	bne.n	14a76 <isr+0xe4e>
   14abc:	e47f      	b.n	143be <isr+0x796>
		    isr_scan_tgta_check(false, pdu_adv_rx, rl_idx,
   14abe:	ab10      	add	r3, sp, #64	; 0x40
   14ac0:	464a      	mov	r2, r9
   14ac2:	4631      	mov	r1, r6
   14ac4:	2000      	movs	r0, #0
   14ac6:	f7fa feb7 	bl	f838 <isr_scan_tgta_check>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
   14aca:	2800      	cmp	r0, #0
   14acc:	d1d3      	bne.n	14a76 <isr+0xe4e>
   14ace:	e7e8      	b.n	14aa2 <isr+0xe7a>
		   (_radio.scanner.phy)) ||
   14ad0:	2b04      	cmp	r3, #4
   14ad2:	f47f ac74 	bne.w	143be <isr+0x796>
		   (_radio.scanner.state != 0) &&
   14ad6:	f894 364c 	ldrb.w	r3, [r4, #1612]	; 0x64c
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
   14ada:	0799      	lsls	r1, r3, #30
   14adc:	f57f ac6f 	bpl.w	143be <isr+0x796>
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
   14ae0:	f003 ffa8 	bl	18a34 <radio_pkt_scratch_get>
	return ((sreq->rx_addr == srsp->tx_addr) &&
   14ae4:	7a3b      	ldrb	r3, [r7, #8]
   14ae6:	7802      	ldrb	r2, [r0, #0]
   14ae8:	f3c3 1380 	ubfx	r3, r3, #6, #1
   14aec:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   14af0:	f47f ac65 	bne.w	143be <isr+0x796>
		(memcmp(&sreq->scan_req.adv_addr[0],
   14af4:	2206      	movs	r2, #6
   14af6:	f107 010a 	add.w	r1, r7, #10
   14afa:	3008      	adds	r0, #8
   14afc:	f7eb fe1c 	bl	738 <memcmp>
		   (_radio.scanner.state != 0) &&
   14b00:	2800      	cmp	r0, #0
   14b02:	d0b8      	beq.n	14a76 <isr+0xe4e>
   14b04:	e45b      	b.n	143be <isr+0x796>
   14b06:	bf00      	nop
   14b08:	1afd498d 	.word	0x1afd498d
   14b0c:	00000007 	.word	0x00000007
   14b10:	20001246 	.word	0x20001246
   14b14:	20001240 	.word	0x20001240
   14b18:	00023dae 	.word	0x00023dae
   14b1c:	00025a11 	.word	0x00025a11
   14b20:	0000fa59 	.word	0x0000fa59
   14b24:	0000f9b5 	.word	0x0000f9b5
   14b28:	00012509 	.word	0x00012509
   14b2c:	3b9aca00 	.word	0x3b9aca00
	_radio.packet_counter++;
   14b30:	f894 3720 	ldrb.w	r3, [r4, #1824]	; 0x720
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
   14b34:	f894 2749 	ldrb.w	r2, [r4, #1865]	; 0x749
	_radio.packet_counter++;
   14b38:	3301      	adds	r3, #1
   14b3a:	f884 3720 	strb.w	r3, [r4, #1824]	; 0x720
	u8_t rx_enqueue = 0;
   14b3e:	2600      	movs	r6, #0
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
   14b40:	f8d4 3744 	ldr.w	r3, [r4, #1860]	; 0x744
	u8_t rx_enqueue = 0;
   14b44:	f88d 603f 	strb.w	r6, [sp, #63]	; 0x3f
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
   14b48:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   14b4c:	2301      	movs	r3, #1
   14b4e:	f888 3004 	strb.w	r3, [r8, #4]
	if (crc_ok) {
   14b52:	2f00      	cmp	r7, #0
   14b54:	f000 82ba 	beq.w	150cc <isr+0x14a4>
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
   14b58:	f8d4 571c 	ldr.w	r5, [r4, #1820]	; 0x71c
   14b5c:	f898 1008 	ldrb.w	r1, [r8, #8]
   14b60:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   14b64:	f3c1 0180 	ubfx	r1, r1, #2, #1
   14b68:	f003 0201 	and.w	r2, r3, #1
   14b6c:	4291      	cmp	r1, r2
   14b6e:	f000 8185 	beq.w	14e7c <isr+0x1254>
		_radio.conn_curr->sn++;
   14b72:	f082 0201 	eor.w	r2, r2, #1
   14b76:	f362 0300 	bfi	r3, r2, #0, #1
   14b7a:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		if (_radio.role == ROLE_SLAVE) {
   14b7e:	7ce3      	ldrb	r3, [r4, #19]
   14b80:	2b03      	cmp	r3, #3
			_radio.conn_curr->slave.latency_enabled = 1;
   14b82:	bf02      	ittt	eq
   14b84:	f895 3050 	ldrbeq.w	r3, [r5, #80]	; 0x50
   14b88:	f043 0301 	orreq.w	r3, r3, #1
   14b8c:	f885 3050 	strbeq.w	r3, [r5, #80]	; 0x50
		if (_radio.conn_curr->empty == 0) {
   14b90:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   14b94:	061a      	lsls	r2, r3, #24
   14b96:	f100 816c 	bmi.w	14e72 <isr+0x124a>
			node_tx = _radio.conn_curr->pkt_tx_head;
   14b9a:	f8d5 613c 	ldr.w	r6, [r5, #316]	; 0x13c
				_radio.conn_curr->packet_tx_head_offset);
   14b9e:	f895 1151 	ldrb.w	r1, [r5, #337]	; 0x151
			pdu_data_tx = (void *)(node_tx->pdu_data +
   14ba2:	1d30      	adds	r0, r6, #4
   14ba4:	eb00 0a01 	add.w	sl, r0, r1
			pdu_data_tx_len = pdu_data_tx->len;
   14ba8:	f89a 9001 	ldrb.w	r9, [sl, #1]
			if (pdu_data_tx_len != 0) {
   14bac:	f1b9 0f00 	cmp.w	r9, #0
   14bb0:	f000 8092 	beq.w	14cd8 <isr+0x10b0>
				if (_radio.conn_curr->enc_tx) {
   14bb4:	069b      	lsls	r3, r3, #26
   14bb6:	d50b      	bpl.n	14bd0 <isr+0xfa8>
					_radio.conn_curr->ccm_tx.counter++;
   14bb8:	f8d5 b12a 	ldr.w	fp, [r5, #298]	; 0x12a
   14bbc:	f8d5 c12e 	ldr.w	ip, [r5, #302]	; 0x12e
   14bc0:	f11b 0201 	adds.w	r2, fp, #1
   14bc4:	f14c 0300 	adc.w	r3, ip, #0
   14bc8:	f8c5 212a 	str.w	r2, [r5, #298]	; 0x12a
   14bcc:	f8c5 312e 	str.w	r3, [r5, #302]	; 0x12e
				if (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) {
   14bd0:	5c43      	ldrb	r3, [r0, r1]
   14bd2:	f003 0303 	and.w	r3, r3, #3
   14bd6:	2b03      	cmp	r3, #3
   14bd8:	d17e      	bne.n	14cd8 <isr+0x10b0>
	switch (pdu_data_tx->llctrl.opcode) {
   14bda:	f89a 3003 	ldrb.w	r3, [sl, #3]
   14bde:	3b02      	subs	r3, #2
   14be0:	2b16      	cmp	r3, #22
   14be2:	d879      	bhi.n	14cd8 <isr+0x10b0>
   14be4:	e8df f013 	tbh	[pc, r3, lsl #1]
   14be8:	005c0017 	.word	0x005c0017
   14bec:	007800ae 	.word	0x007800ae
   14bf0:	00780078 	.word	0x00780078
   14bf4:	00780078 	.word	0x00780078
   14bf8:	0085007a 	.word	0x0085007a
   14bfc:	00b50078 	.word	0x00b50078
   14c00:	00780078 	.word	0x00780078
   14c04:	00780078 	.word	0x00780078
   14c08:	00780078 	.word	0x00780078
   14c0c:	007800bf 	.word	0x007800bf
   14c10:	00de00d7 	.word	0x00de00d7
   14c14:	0109      	.short	0x0109
		_radio.state = STATE_CLOSE;
   14c16:	2303      	movs	r3, #3
   14c18:	7523      	strb	r3, [r4, #20]
		radio_disable();
   14c1a:	f003 feb5 	bl	18988 <radio_disable>
		LL_ASSERT(!radio_is_ready());
   14c1e:	f003 fed1 	bl	189c4 <radio_is_ready>
   14c22:	b128      	cbz	r0, 14c30 <isr+0x1008>
   14c24:	4bc6      	ldr	r3, [pc, #792]	; (14f40 <isr+0x1318>)
   14c26:	9301      	str	r3, [sp, #4]
   14c28:	9300      	str	r3, [sp, #0]
   14c2a:	4bc6      	ldr	r3, [pc, #792]	; (14f44 <isr+0x131c>)
   14c2c:	f7ff b85a 	b.w	13ce4 <isr+0xbc>
		     (pdu_data_tx->llctrl.terminate_ind.error_code == 0x13) ?
   14c30:	f89a 1004 	ldrb.w	r1, [sl, #4]
		terminate_ind_rx_enqueue(_radio.conn_curr,
   14c34:	f8d4 071c 	ldr.w	r0, [r4, #1820]	; 0x71c
   14c38:	2913      	cmp	r1, #19
   14c3a:	bf08      	it	eq
   14c3c:	2116      	moveq	r1, #22
   14c3e:	f7fb fb4b 	bl	102d8 <terminate_ind_rx_enqueue>
		terminate = 1;
   14c42:	2501      	movs	r5, #1
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
   14c44:	f8d4 071c 	ldr.w	r0, [r4, #1820]	; 0x71c
   14c48:	f890 3151 	ldrb.w	r3, [r0, #337]	; 0x151
   14c4c:	4499      	add	r9, r3
			if (_radio.conn_curr->packet_tx_head_offset ==
   14c4e:	f890 3150 	ldrb.w	r3, [r0, #336]	; 0x150
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
   14c52:	fa5f f989 	uxtb.w	r9, r9
			if (_radio.conn_curr->packet_tx_head_offset ==
   14c56:	454b      	cmp	r3, r9
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
   14c58:	f880 9151 	strb.w	r9, [r0, #337]	; 0x151
			if (_radio.conn_curr->packet_tx_head_offset ==
   14c5c:	d11e      	bne.n	14c9c <isr+0x1074>
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
   14c5e:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
   14c62:	f8d0 1140 	ldr.w	r1, [r0, #320]	; 0x140
	conn->packet_tx_head_len = 0;
   14c66:	2200      	movs	r2, #0
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
   14c68:	428b      	cmp	r3, r1
	conn->packet_tx_head_len = 0;
   14c6a:	f880 2150 	strb.w	r2, [r0, #336]	; 0x150
	conn->packet_tx_head_offset = 0;
   14c6e:	f880 2151 	strb.w	r2, [r0, #337]	; 0x151
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
   14c72:	f040 80c9 	bne.w	14e08 <isr+0x11e0>
		if (node_tx) {
   14c76:	b18e      	cbz	r6, 14c9c <isr+0x1074>
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
   14c78:	f8d0 1144 	ldr.w	r1, [r0, #324]	; 0x144
			conn->pkt_tx_head = conn->pkt_tx_head->next;
   14c7c:	f8d3 e000 	ldr.w	lr, [r3]
   14c80:	f8c0 e13c 	str.w	lr, [r0, #316]	; 0x13c
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
   14c84:	428b      	cmp	r3, r1
				conn->pkt_tx_ctrl = NULL;
   14c86:	bf06      	itte	eq
   14c88:	f8c0 2140 	streq.w	r2, [r0, #320]	; 0x140
				conn->pkt_tx_ctrl_last = NULL;
   14c8c:	f8c0 2144 	streq.w	r2, [r0, #324]	; 0x144
				conn->pkt_tx_ctrl = conn->pkt_tx_head;
   14c90:	f8c0 e140 	strne.w	lr, [r0, #320]	; 0x140
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
   14c94:	49ac      	ldr	r1, [pc, #688]	; (14f48 <isr+0x1320>)
   14c96:	4630      	mov	r0, r6
   14c98:	f7f6 fdbb 	bl	b812 <mem_release>
	struct radio_pdu_node_tx *tx_release = NULL;
   14c9c:	2600      	movs	r6, #0
   14c9e:	e0bc      	b.n	14e1a <isr+0x11f2>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
   14ca0:	2208      	movs	r2, #8
   14ca2:	f10a 010e 	add.w	r1, sl, #14
   14ca6:	f105 0094 	add.w	r0, r5, #148	; 0x94
   14caa:	f7eb fd72 	bl	792 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
   14cae:	f8d4 071c 	ldr.w	r0, [r4, #1820]	; 0x71c
   14cb2:	2204      	movs	r2, #4
   14cb4:	f10a 0116 	add.w	r1, sl, #22
   14cb8:	f500 7089 	add.w	r0, r0, #274	; 0x112
   14cbc:	f7eb fd69 	bl	792 <memcpy>
		_radio.conn_curr->pause_tx = 1;
   14cc0:	f8d4 371c 	ldr.w	r3, [r4, #1820]	; 0x71c
   14cc4:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   14cc8:	f042 0208 	orr.w	r2, r2, #8
   14ccc:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
   14cd0:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
   14cd4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	u8_t terminate = 0;
   14cd8:	2500      	movs	r5, #0
   14cda:	e7b3      	b.n	14c44 <isr+0x101c>
		_radio.conn_curr->pause_tx = 1;
   14cdc:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->refresh = 1;
   14ce0:	f043 0348 	orr.w	r3, r3, #72	; 0x48
   14ce4:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
   14ce8:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
		_radio.conn_curr->procedure_expire = 0;
   14cec:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
   14cf0:	e7f2      	b.n	14cd8 <isr+0x10b0>
		if (_radio.role == ROLE_MASTER) {
   14cf2:	f894 a013 	ldrb.w	sl, [r4, #19]
   14cf6:	fa5f fa8a 	uxtb.w	sl, sl
   14cfa:	f1ba 0f04 	cmp.w	sl, #4
   14cfe:	d121      	bne.n	14d44 <isr+0x111c>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14d00:	7933      	ldrb	r3, [r6, #4]
   14d02:	f043 0303 	orr.w	r3, r3, #3
   14d06:	7133      	strb	r3, [r6, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
   14d08:	2317      	movs	r3, #23
   14d0a:	7173      	strb	r3, [r6, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   14d0c:	2303      	movs	r3, #3
   14d0e:	71f3      	strb	r3, [r6, #7]
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0],
   14d10:	2208      	movs	r2, #8
   14d12:	f105 017a 	add.w	r1, r5, #122	; 0x7a
   14d16:	3004      	adds	r0, #4
   14d18:	f7eb fd3b 	bl	792 <memcpy>
	pdu_ctrl_tx->llctrl.enc_req.ediv[0] =
   14d1c:	f895 3082 	ldrb.w	r3, [r5, #130]	; 0x82
   14d20:	7433      	strb	r3, [r6, #16]
	pdu_ctrl_tx->llctrl.enc_req.ediv[1] =
   14d22:	f895 3083 	ldrb.w	r3, [r5, #131]	; 0x83
   14d26:	7473      	strb	r3, [r6, #17]
	entropy_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_req.skdm,
   14d28:	f106 0112 	add.w	r1, r6, #18
   14d2c:	2208      	movs	r2, #8
   14d2e:	6860      	ldr	r0, [r4, #4]
   14d30:	f7ee f9de 	bl	30f0 <entropy_get_entropy_isr>
	entropy_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_req.ivm,
   14d34:	f106 011a 	add.w	r1, r6, #26
   14d38:	4652      	mov	r2, sl
   14d3a:	6860      	ldr	r0, [r4, #4]
   14d3c:	f7ee f9d8 	bl	30f0 <entropy_get_entropy_isr>
			*node_tx = NULL;
   14d40:	2600      	movs	r6, #0
   14d42:	e7c9      	b.n	14cd8 <isr+0x10b0>
			_radio.conn_curr->pause_tx = 1;
   14d44:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   14d48:	f043 0308 	orr.w	r3, r3, #8
   14d4c:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
   14d50:	e7c2      	b.n	14cd8 <isr+0x10b0>
		_radio.conn_curr->pause_rx = 0;
   14d52:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->pause_tx = 0;
   14d56:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   14d5a:	f36f 03c3 	bfc	r3, #3, #1
   14d5e:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->procedure_expire = 0;
   14d62:	2300      	movs	r3, #0
   14d64:	e7c2      	b.n	14cec <isr+0x10c4>
		if ((_radio.conn_curr->llcp_length.req !=
   14d66:	f895 20e8 	ldrb.w	r2, [r5, #232]	; 0xe8
   14d6a:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   14d6e:	429a      	cmp	r2, r3
   14d70:	d0b2      	beq.n	14cd8 <isr+0x10b0>
		    (_radio.conn_curr->llcp_length.state ==
   14d72:	f895 30ea 	ldrb.w	r3, [r5, #234]	; 0xea
		     _radio.conn_curr->llcp_length.ack) &&
   14d76:	f003 0203 	and.w	r2, r3, #3
   14d7a:	2a01      	cmp	r2, #1
   14d7c:	d1ac      	bne.n	14cd8 <isr+0x10b0>
			_radio.conn_curr->pause_tx = 1;
   14d7e:	f895 20f8 	ldrb.w	r2, [r5, #248]	; 0xf8
   14d82:	f042 0208 	orr.w	r2, r2, #8
   14d86:	f885 20f8 	strb.w	r2, [r5, #248]	; 0xf8
			_radio.conn_curr->llcp_length.state =
   14d8a:	2202      	movs	r2, #2
   14d8c:	f362 0301 	bfi	r3, r2, #0, #2
   14d90:	f885 30ea 	strb.w	r3, [r5, #234]	; 0xea
   14d94:	e7a0      	b.n	14cd8 <isr+0x10b0>
		_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   14d96:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   14d9a:	2202      	movs	r2, #2
   14d9c:	f362 0301 	bfi	r3, r2, #0, #2
   14da0:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
		if (_radio.role == ROLE_SLAVE) {
   14da4:	7ce3      	ldrb	r3, [r4, #19]
   14da6:	2b03      	cmp	r3, #3
   14da8:	d196      	bne.n	14cd8 <isr+0x10b0>
	u8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
   14daa:	2301      	movs	r3, #1
   14dac:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   14db0:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
   14db4:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   14db8:	2202      	movs	r2, #2
   14dba:	2304      	movs	r3, #4
   14dbc:	f88d 2042 	strb.w	r2, [sp, #66]	; 0x42
   14dc0:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
   14dc4:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
   14dc8:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
   14dcc:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	u8_t phys = conn->llcp_phy.tx | conn->phy_tx;
   14dd0:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   14dd4:	f895 20f6 	ldrb.w	r2, [r5, #246]	; 0xf6
   14dd8:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   14ddc:	ea43 0392 	orr.w	r3, r3, r2, lsr #2
	conn->phy_tx_time = phy_tx_time[phys];
   14de0:	f003 0307 	and.w	r3, r3, #7
   14de4:	aa12      	add	r2, sp, #72	; 0x48
   14de6:	4413      	add	r3, r2
   14de8:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
   14dec:	f813 3c08 	ldrb.w	r3, [r3, #-8]
		_radio.conn_curr->phy_tx_time =
   14df0:	f363 0202 	bfi	r2, r3, #0, #3
   14df4:	f885 2039 	strb.w	r2, [r5, #57]	; 0x39
   14df8:	e76e      	b.n	14cd8 <isr+0x10b0>
			_radio.conn_curr->llcp.phy_upd_ind.tx;
   14dfa:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
		_radio.conn_curr->phy_tx_time =
   14dfe:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
   14e02:	f3c3 0382 	ubfx	r3, r3, #2, #3
   14e06:	e7f3      	b.n	14df0 <isr+0x11c8>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
   14e08:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
   14e0c:	4293      	cmp	r3, r2
   14e0e:	681b      	ldr	r3, [r3, #0]
			conn->pkt_tx_data = conn->pkt_tx_data->next;
   14e10:	bf08      	it	eq
   14e12:	f8c0 3148 	streq.w	r3, [r0, #328]	; 0x148
		conn->pkt_tx_head = conn->pkt_tx_head->next;
   14e16:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
	if (terminate) {
   14e1a:	b37d      	cbz	r5, 14e7c <isr+0x1254>
		connection_release(_radio.conn_curr);
   14e1c:	f8d4 071c 	ldr.w	r0, [r4, #1820]	; 0x71c
   14e20:	f7fb f850 	bl	fec4 <connection_release>
		_radio.conn_curr = NULL;
   14e24:	2300      	movs	r3, #0
   14e26:	f8c4 371c 	str.w	r3, [r4, #1820]	; 0x71c
	if (!radio_tmr_aa_restore()) {
   14e2a:	f003 ff63 	bl	18cf4 <radio_tmr_aa_restore>
   14e2e:	b918      	cbnz	r0, 14e38 <isr+0x1210>
		radio_tmr_aa_save(radio_tmr_aa_get());
   14e30:	f003 ff54 	bl	18cdc <radio_tmr_aa_get>
   14e34:	f003 ff58 	bl	18ce8 <radio_tmr_aa_save>
	if (!_radio.conn_curr) {
   14e38:	f8d4 371c 	ldr.w	r3, [r4, #1820]	; 0x71c
   14e3c:	2b00      	cmp	r3, #0
   14e3e:	f43e af9d 	beq.w	13d7c <isr+0x154>
	if (tx_release) {
   14e42:	b11e      	cbz	r6, 14e4c <isr+0x1224>
		pdu_node_tx_release(_radio.conn_curr->handle, tx_release);
   14e44:	4631      	mov	r1, r6
   14e46:	8c18      	ldrh	r0, [r3, #32]
   14e48:	f7fa ffb2 	bl	fdb0 <pdu_node_tx_release>
	if (rx_enqueue) {
   14e4c:	f89d 303f 	ldrb.w	r3, [sp, #63]	; 0x3f
   14e50:	2b00      	cmp	r3, #0
   14e52:	f43e af93 	beq.w	13d7c <isr+0x154>
		rx_fc_lock(_radio.conn_curr->handle);
   14e56:	f8d4 371c 	ldr.w	r3, [r4, #1820]	; 0x71c
   14e5a:	8c18      	ldrh	r0, [r3, #32]
   14e5c:	f7fa fd90 	bl	f980 <rx_fc_lock>
		node_rx->hdr.handle = _radio.conn_curr->handle;
   14e60:	f8d4 371c 	ldr.w	r3, [r4, #1820]	; 0x71c
   14e64:	8c1b      	ldrh	r3, [r3, #32]
   14e66:	f8a8 3006 	strh.w	r3, [r8, #6]
		packet_rx_enqueue();
   14e6a:	f7fa fc99 	bl	f7a0 <packet_rx_enqueue>
   14e6e:	f7fe bf85 	b.w	13d7c <isr+0x154>
			_radio.conn_curr->empty = 0;
   14e72:	f36f 13c7 	bfc	r3, #7, #1
   14e76:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
   14e7a:	2600      	movs	r6, #0
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
   14e7c:	f8d4 371c 	ldr.w	r3, [r4, #1820]	; 0x71c
   14e80:	f898 2008 	ldrb.w	r2, [r8, #8]
   14e84:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
   14e88:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   14e8c:	f3c3 0340 	ubfx	r3, r3, #1, #1
   14e90:	429a      	cmp	r2, r3
   14e92:	f040 80eb 	bne.w	1506c <isr+0x1444>
	    (packet_rx_reserve_get(3) != 0) &&
   14e96:	2003      	movs	r0, #3
   14e98:	f7f9 fba8 	bl	e5ec <packet_rx_reserve_get>
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
   14e9c:	2800      	cmp	r0, #0
   14e9e:	f000 80e5 	beq.w	1506c <isr+0x1444>
	    (packet_rx_reserve_get(3) != 0) &&
   14ea2:	f894 378a 	ldrb.w	r3, [r4, #1930]	; 0x78a
   14ea6:	b393      	cbz	r3, 14f0e <isr+0x12e6>
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
   14ea8:	f8d4 3754 	ldr.w	r3, [r4, #1876]	; 0x754
   14eac:	f8d4 2758 	ldr.w	r2, [r4, #1880]	; 0x758
	    ((_radio.fc_ena == 0) ||
   14eb0:	4293      	cmp	r3, r2
   14eb2:	d105      	bne.n	14ec0 <isr+0x1298>
	      (_radio.fc_req == _radio.fc_ack)) ||
   14eb4:	f894 2788 	ldrb.w	r2, [r4, #1928]	; 0x788
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
   14eb8:	f894 1789 	ldrb.w	r1, [r4, #1929]	; 0x789
   14ebc:	4291      	cmp	r1, r2
   14ebe:	d026      	beq.n	14f0e <isr+0x12e6>
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
   14ec0:	f8d4 2758 	ldr.w	r2, [r4, #1880]	; 0x758
	      (_radio.fc_req == _radio.fc_ack)) ||
   14ec4:	4293      	cmp	r3, r2
   14ec6:	f000 80d1 	beq.w	1506c <isr+0x1444>
	      (_radio.fc_req != _radio.fc_ack) &&
   14eca:	f894 3788 	ldrb.w	r3, [r4, #1928]	; 0x788
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
   14ece:	f894 2789 	ldrb.w	r2, [r4, #1929]	; 0x789
   14ed2:	429a      	cmp	r2, r3
   14ed4:	f000 80ca 	beq.w	1506c <isr+0x1444>
		(((_radio.fc_req == 0) &&
   14ed8:	f894 3788 	ldrb.w	r3, [r4, #1928]	; 0x788
	      (_radio.fc_req != _radio.fc_ack) &&
   14edc:	b933      	cbnz	r3, 14eec <isr+0x12c4>
		   _radio.conn_curr->handle)) ||
   14ede:	f8d4 371c 	ldr.w	r3, [r4, #1820]	; 0x71c
		(((_radio.fc_req == 0) &&
   14ee2:	f8b4 2786 	ldrh.w	r2, [r4, #1926]	; 0x786
   14ee6:	8c1b      	ldrh	r3, [r3, #32]
   14ee8:	429a      	cmp	r2, r3
   14eea:	d010      	beq.n	14f0e <isr+0x12e6>
		 ((_radio.fc_req != 0) &&
   14eec:	f894 3788 	ldrb.w	r3, [r4, #1928]	; 0x788
		   _radio.conn_curr->handle)) ||
   14ef0:	2b00      	cmp	r3, #0
   14ef2:	f000 80bb 	beq.w	1506c <isr+0x1444>
		  (_radio.fc_handle[_radio.fc_req - 1] ==
   14ef6:	f894 3788 	ldrb.w	r3, [r4, #1928]	; 0x788
		   _radio.conn_curr->handle)))))) {
   14efa:	f8d4 171c 	ldr.w	r1, [r4, #1820]	; 0x71c
		  (_radio.fc_handle[_radio.fc_req - 1] ==
   14efe:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		 ((_radio.fc_req != 0) &&
   14f02:	f8b3 2780 	ldrh.w	r2, [r3, #1920]	; 0x780
   14f06:	8c0b      	ldrh	r3, [r1, #32]
   14f08:	429a      	cmp	r2, r3
   14f0a:	f040 80af 	bne.w	1506c <isr+0x1444>
		if (pdu_data_rx->len != 0) {
   14f0e:	f898 5009 	ldrb.w	r5, [r8, #9]
   14f12:	2d00      	cmp	r5, #0
   14f14:	f000 80b3 	beq.w	1507e <isr+0x1456>
			if (_radio.conn_curr->enc_rx) {
   14f18:	f8d4 371c 	ldr.w	r3, [r4, #1820]	; 0x71c
   14f1c:	f893 50f8 	ldrb.w	r5, [r3, #248]	; 0xf8
   14f20:	f015 0510 	ands.w	r5, r5, #16
   14f24:	d01b      	beq.n	14f5e <isr+0x1336>
				done = radio_ccm_is_done();
   14f26:	f003 ff8b 	bl	18e40 <radio_ccm_is_done>
				LL_ASSERT(done);
   14f2a:	b9b8      	cbnz	r0, 14f5c <isr+0x1334>
   14f2c:	4b04      	ldr	r3, [pc, #16]	; (14f40 <isr+0x1318>)
   14f2e:	9301      	str	r3, [sp, #4]
   14f30:	9300      	str	r3, [sp, #0]
   14f32:	4a06      	ldr	r2, [pc, #24]	; (14f4c <isr+0x1324>)
   14f34:	4b06      	ldr	r3, [pc, #24]	; (14f50 <isr+0x1328>)
   14f36:	4907      	ldr	r1, [pc, #28]	; (14f54 <isr+0x132c>)
   14f38:	4807      	ldr	r0, [pc, #28]	; (14f58 <isr+0x1330>)
   14f3a:	f7ff ba23 	b.w	14384 <isr+0x75c>
   14f3e:	bf00      	nop
   14f40:	00023dae 	.word	0x00023dae
   14f44:	00025a1d 	.word	0x00025a1d
   14f48:	20001354 	.word	0x20001354
   14f4c:	00022d76 	.word	0x00022d76
   14f50:	00025a81 	.word	0x00025a81
   14f54:	000272d8 	.word	0x000272d8
   14f58:	00026238 	.word	0x00026238
				ccm_rx_increment = 1;
   14f5c:	2501      	movs	r5, #1
			if ((_radio.conn_curr->enc_rx &&
   14f5e:	f8d4 371c 	ldr.w	r3, [r4, #1820]	; 0x71c
   14f62:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
   14f66:	06d9      	lsls	r1, r3, #27
   14f68:	d42c      	bmi.n	14fc4 <isr+0x139c>
			    (_radio.conn_curr->pause_rx &&
   14f6a:	f8d4 071c 	ldr.w	r0, [r4, #1820]	; 0x71c
   14f6e:	f898 3008 	ldrb.w	r3, [r8, #8]
   14f72:	f890 20f8 	ldrb.w	r2, [r0, #248]	; 0xf8
			     !radio_ccm_mic_is_valid()) ||
   14f76:	f012 0f04 	tst.w	r2, #4
   14f7a:	d135      	bne.n	14fe8 <isr+0x13c0>
			_radio.conn_curr->appto_expire = 0;
   14f7c:	2200      	movs	r2, #0
			switch (pdu_data_rx->ll_id) {
   14f7e:	f013 0303 	ands.w	r3, r3, #3
			_radio.conn_curr->appto_expire = 0;
   14f82:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
			_radio.conn_curr->apto_expire = 0;
   14f86:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
			switch (pdu_data_rx->ll_id) {
   14f8a:	d004      	beq.n	14f96 <isr+0x136e>
   14f8c:	2b02      	cmp	r3, #2
   14f8e:	d866      	bhi.n	1505e <isr+0x1436>
				*rx_enqueue = 1;
   14f90:	2301      	movs	r3, #1
   14f92:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
			_radio.conn_curr->nesn++;
   14f96:	f8d4 371c 	ldr.w	r3, [r4, #1820]	; 0x71c
   14f9a:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   14f9e:	f082 0202 	eor.w	r2, r2, #2
   14fa2:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			if (ccm_rx_increment) {
   14fa6:	2d00      	cmp	r5, #0
   14fa8:	d060      	beq.n	1506c <isr+0x1444>
				_radio.conn_curr->ccm_rx.counter++;
   14faa:	f8d3 9109 	ldr.w	r9, [r3, #265]	; 0x109
   14fae:	f8d3 a10d 	ldr.w	sl, [r3, #269]	; 0x10d
   14fb2:	f119 0001 	adds.w	r0, r9, #1
   14fb6:	f14a 0100 	adc.w	r1, sl, #0
   14fba:	f8c3 0109 	str.w	r0, [r3, #265]	; 0x109
   14fbe:	f8c3 110d 	str.w	r1, [r3, #269]	; 0x10d
   14fc2:	e053      	b.n	1506c <isr+0x1444>
			     !radio_ccm_mic_is_valid()) ||
   14fc4:	f003 ff5a 	bl	18e7c <radio_ccm_mic_is_valid>
			if ((_radio.conn_curr->enc_rx &&
   14fc8:	2800      	cmp	r0, #0
   14fca:	d1ce      	bne.n	14f6a <isr+0x1342>
				_radio.state = STATE_CLOSE;
   14fcc:	2303      	movs	r3, #3
   14fce:	7523      	strb	r3, [r4, #20]
				radio_disable();
   14fd0:	f003 fcda 	bl	18988 <radio_disable>
				LL_ASSERT(!radio_is_ready());
   14fd4:	f003 fcf6 	bl	189c4 <radio_is_ready>
   14fd8:	4605      	mov	r5, r0
   14fda:	b3a0      	cbz	r0, 15046 <isr+0x141e>
   14fdc:	4bb7      	ldr	r3, [pc, #732]	; (152bc <isr+0x1694>)
   14fde:	9301      	str	r3, [sp, #4]
   14fe0:	9300      	str	r3, [sp, #0]
   14fe2:	4bb7      	ldr	r3, [pc, #732]	; (152c0 <isr+0x1698>)
   14fe4:	f7fe be7e 	b.w	13ce4 <isr+0xbc>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   14fe8:	f003 0103 	and.w	r1, r3, #3
   14fec:	2903      	cmp	r1, #3
   14fee:	d1ed      	bne.n	14fcc <isr+0x13a4>
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
   14ff0:	f990 e01d 	ldrsb.w	lr, [r0, #29]
	u8_t opcode = pdu_data->llctrl.opcode;
   14ff4:	f898 100b 	ldrb.w	r1, [r8, #11]
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
   14ff8:	f1be 0f00 	cmp.w	lr, #0
   14ffc:	f002 0240 	and.w	r2, r2, #64	; 0x40
   15000:	db15      	blt.n	1502e <isr+0x1406>
	       (!conn->role &&
   15002:	b922      	cbnz	r2, 1500e <isr+0x13e6>
		((!conn->refresh &&
   15004:	2902      	cmp	r1, #2
   15006:	d0b9      	beq.n	14f7c <isr+0x1354>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   15008:	2911      	cmp	r1, #17
   1500a:	d8df      	bhi.n	14fcc <isr+0x13a4>
   1500c:	e009      	b.n	15022 <isr+0x13fa>
		 (conn->refresh &&
   1500e:	1e8a      	subs	r2, r1, #2
   15010:	b2d2      	uxtb	r2, r2
   15012:	2a09      	cmp	r2, #9
   15014:	d8f8      	bhi.n	15008 <isr+0x13e0>
   15016:	f240 2e05 	movw	lr, #517	; 0x205
   1501a:	fa2e f202 	lsr.w	r2, lr, r2
   1501e:	07d2      	lsls	r2, r2, #31
   15020:	d4ac      	bmi.n	14f7c <isr+0x1354>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   15022:	4aa8      	ldr	r2, [pc, #672]	; (152c4 <isr+0x169c>)
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   15024:	fa22 f101 	lsr.w	r1, r2, r1
   15028:	07ca      	lsls	r2, r1, #31
   1502a:	d5cf      	bpl.n	14fcc <isr+0x13a4>
   1502c:	e7a6      	b.n	14f7c <isr+0x1354>
	       (conn->role &&
   1502e:	b92a      	cbnz	r2, 1503c <isr+0x1414>
		((!conn->refresh &&
   15030:	2902      	cmp	r1, #2
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   15032:	d0a3      	beq.n	14f7c <isr+0x1354>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   15034:	2911      	cmp	r1, #17
   15036:	d8c9      	bhi.n	14fcc <isr+0x13a4>
   15038:	4aa3      	ldr	r2, [pc, #652]	; (152c8 <isr+0x16a0>)
   1503a:	e7f3      	b.n	15024 <isr+0x13fc>
		 (conn->refresh &&
   1503c:	1e8a      	subs	r2, r1, #2
   1503e:	2a01      	cmp	r2, #1
   15040:	d99c      	bls.n	14f7c <isr+0x1354>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   15042:	290b      	cmp	r1, #11
   15044:	e7f5      	b.n	15032 <isr+0x140a>
				terminate_ind_rx_enqueue(_radio.conn_curr,
   15046:	213d      	movs	r1, #61	; 0x3d
   15048:	f8d4 071c 	ldr.w	r0, [r4, #1820]	; 0x71c
   1504c:	f7fb f944 	bl	102d8 <terminate_ind_rx_enqueue>
				connection_release(_radio.conn_curr);
   15050:	f8d4 071c 	ldr.w	r0, [r4, #1820]	; 0x71c
   15054:	f7fa ff36 	bl	fec4 <connection_release>
				_radio.conn_curr = NULL;
   15058:	f8c4 571c 	str.w	r5, [r4, #1820]	; 0x71c
   1505c:	e6e5      	b.n	14e2a <isr+0x1202>
				nack = isr_rx_conn_pkt_ctrl(node_rx,
   1505e:	f10d 013f 	add.w	r1, sp, #63	; 0x3f
   15062:	4640      	mov	r0, r8
   15064:	f7fd fcbc 	bl	129e0 <isr_rx_conn_pkt_ctrl>
		if (!nack) {
   15068:	2800      	cmp	r0, #0
   1506a:	d094      	beq.n	14f96 <isr+0x136e>
		_radio.conn_curr->supervision_expire = 0;
   1506c:	f8d4 271c 	ldr.w	r2, [r4, #1820]	; 0x71c
		_radio.crc_expire = 0;
   15070:	2300      	movs	r3, #0
   15072:	f884 3721 	strb.w	r3, [r4, #1825]	; 0x721
	u8_t crc_close = 0;
   15076:	461d      	mov	r5, r3
		_radio.conn_curr->supervision_expire = 0;
   15078:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
   1507c:	e03d      	b.n	150fa <isr+0x14d2>
		} else if ((_radio.conn_curr->enc_rx) ||
   1507e:	f8d4 271c 	ldr.w	r2, [r4, #1820]	; 0x71c
   15082:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   15086:	f013 0f14 	tst.w	r3, #20
   1508a:	d084      	beq.n	14f96 <isr+0x136e>
					    (conn->latency + 6)) ?
   1508c:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
			appto_reload_new = (conn->apto_reload >
   1508e:	f8b2 004a 	ldrh.w	r0, [r2, #74]	; 0x4a
					    (conn->latency + 6)) ?
   15092:	1d8b      	adds	r3, r1, #6
			appto_reload_new = (conn->apto_reload >
   15094:	4298      	cmp	r0, r3
   15096:	bfc4      	itt	gt
   15098:	1f83      	subgt	r3, r0, #6
   1509a:	1a5b      	subgt	r3, r3, r1
			if (conn->appto_reload != appto_reload_new) {
   1509c:	f8b2 1046 	ldrh.w	r1, [r2, #70]	; 0x46
			appto_reload_new = (conn->apto_reload >
   150a0:	bfcc      	ite	gt
   150a2:	b29b      	uxthgt	r3, r3
   150a4:	4603      	movle	r3, r0
			if (conn->appto_reload != appto_reload_new) {
   150a6:	4299      	cmp	r1, r3
				conn->appto_reload = appto_reload_new;
   150a8:	bf1e      	ittt	ne
   150aa:	f8a2 3046 	strhne.w	r3, [r2, #70]	; 0x46
				conn->apto_expire = 0;
   150ae:	2300      	movne	r3, #0
   150b0:	f8a2 304c 	strhne.w	r3, [r2, #76]	; 0x4c
			if (conn->apto_expire == 0) {
   150b4:	f8b2 304c 	ldrh.w	r3, [r2, #76]	; 0x4c
   150b8:	2b00      	cmp	r3, #0
   150ba:	f47f af6c 	bne.w	14f96 <isr+0x136e>
				conn->appto_expire = conn->appto_reload;
   150be:	f8b2 3046 	ldrh.w	r3, [r2, #70]	; 0x46
   150c2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
				conn->apto_expire = conn->apto_reload;
   150c6:	f8a2 004c 	strh.w	r0, [r2, #76]	; 0x4c
   150ca:	e764      	b.n	14f96 <isr+0x136e>
		if (_radio.crc_expire == 0) {
   150cc:	f894 3721 	ldrb.w	r3, [r4, #1825]	; 0x721
   150d0:	b913      	cbnz	r3, 150d8 <isr+0x14b0>
			_radio.crc_expire = 2;
   150d2:	2302      	movs	r3, #2
   150d4:	f884 3721 	strb.w	r3, [r4, #1825]	; 0x721
		_radio.crc_expire--;
   150d8:	f894 3721 	ldrb.w	r3, [r4, #1825]	; 0x721
		if (!_radio.conn_curr->supervision_expire) {
   150dc:	f8d4 271c 	ldr.w	r2, [r4, #1820]	; 0x71c
		_radio.crc_expire--;
   150e0:	3b01      	subs	r3, #1
   150e2:	b2db      	uxtb	r3, r3
   150e4:	f884 3721 	strb.w	r3, [r4, #1825]	; 0x721
		if (!_radio.conn_curr->supervision_expire) {
   150e8:	f8b2 6040 	ldrh.w	r6, [r2, #64]	; 0x40
		crc_close = (_radio.crc_expire == 0);
   150ec:	fab3 f583 	clz	r5, r3
   150f0:	096d      	lsrs	r5, r5, #5
		if (!_radio.conn_curr->supervision_expire) {
   150f2:	bb86      	cbnz	r6, 15156 <isr+0x152e>
			_radio.conn_curr->supervision_expire =
   150f4:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
   150f6:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
   150fa:	f8d4 071c 	ldr.w	r0, [r4, #1820]	; 0x71c
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
   150fe:	a910      	add	r1, sp, #64	; 0x40
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
   15100:	f890 90f8 	ldrb.w	r9, [r0, #248]	; 0xf8
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
   15104:	f7fd fb1a 	bl	1273c <prepare_pdu_data_tx>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   15108:	7d23      	ldrb	r3, [r4, #20]
   1510a:	2b03      	cmp	r3, #3
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
   1510c:	ea4f 19d9 	mov.w	r9, r9, lsr #7
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   15110:	d010      	beq.n	15134 <isr+0x150c>
   15112:	bb15      	cbnz	r5, 1515a <isr+0x1532>
   15114:	b137      	cbz	r7, 15124 <isr+0x14fc>
			((crc_ok) && (pdu_data_rx->md == 0) &&
   15116:	f898 3008 	ldrb.w	r3, [r8, #8]
   1511a:	06d8      	lsls	r0, r3, #27
   1511c:	d402      	bmi.n	15124 <isr+0x14fc>
			 (pdu_data_tx->len == 0)) ||
   1511e:	9b10      	ldr	r3, [sp, #64]	; 0x40
			((crc_ok) && (pdu_data_rx->md == 0) &&
   15120:	785b      	ldrb	r3, [r3, #1]
   15122:	b1d3      	cbz	r3, 1515a <isr+0x1532>
			_radio.conn_curr->llcp_terminate.reason_peer) ?
   15124:	f8d4 371c 	ldr.w	r3, [r4, #1820]	; 0x71c
			 (pdu_data_tx->len == 0)) ||
   15128:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   1512c:	2b00      	cmp	r3, #0
   1512e:	bf0c      	ite	eq
   15130:	2302      	moveq	r3, #2
   15132:	2303      	movne	r3, #3
	if (_radio.state == STATE_CLOSE) {
   15134:	2b03      	cmp	r3, #3
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   15136:	7523      	strb	r3, [r4, #20]
	if (_radio.state == STATE_CLOSE) {
   15138:	d12d      	bne.n	15196 <isr+0x156e>
		if (_radio.role == ROLE_MASTER) {
   1513a:	7ce3      	ldrb	r3, [r4, #19]
   1513c:	2b04      	cmp	r3, #4
   1513e:	d10e      	bne.n	1515e <isr+0x1536>
			_radio.conn_curr->empty = is_empty_pdu_tx_retry;
   15140:	f8d4 371c 	ldr.w	r3, [r4, #1820]	; 0x71c
   15144:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   15148:	f369 12c7 	bfi	r2, r9, #7, #1
   1514c:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			radio_disable();
   15150:	f003 fc1a 	bl	18988 <radio_disable>
   15154:	e669      	b.n	14e2a <isr+0x1202>
	struct radio_pdu_node_tx *tx_release = NULL;
   15156:	2600      	movs	r6, #0
   15158:	e7cf      	b.n	150fa <isr+0x14d2>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   1515a:	2303      	movs	r3, #3
   1515c:	e7ea      	b.n	15134 <isr+0x150c>
			radio_switch_complete_and_disable();
   1515e:	f003 fc83 	bl	18a68 <radio_switch_complete_and_disable>
	pdu_data_tx->sn = _radio.conn_curr->sn;
   15162:	9910      	ldr	r1, [sp, #64]	; 0x40
   15164:	f8d4 071c 	ldr.w	r0, [r4, #1820]	; 0x71c
   15168:	780b      	ldrb	r3, [r1, #0]
   1516a:	f890 20f8 	ldrb.w	r2, [r0, #248]	; 0xf8
   1516e:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
   15172:	f3c2 0240 	ubfx	r2, r2, #1, #1
   15176:	f362 0382 	bfi	r3, r2, #2, #1
   1517a:	700b      	strb	r3, [r1, #0]
	tx_packet_set(_radio.conn_curr, pdu_data_tx);
   1517c:	f7f9 fdc0 	bl	ed00 <tx_packet_set>
	LL_ASSERT(!radio_is_ready());
   15180:	f003 fc20 	bl	189c4 <radio_is_ready>
   15184:	2800      	cmp	r0, #0
   15186:	f43f ae50 	beq.w	14e2a <isr+0x1202>
   1518a:	4b4c      	ldr	r3, [pc, #304]	; (152bc <isr+0x1694>)
   1518c:	9301      	str	r3, [sp, #4]
   1518e:	9300      	str	r3, [sp, #0]
   15190:	4b4e      	ldr	r3, [pc, #312]	; (152cc <isr+0x16a4>)
   15192:	f7fe bda7 	b.w	13ce4 <isr+0xbc>
		radio_tmr_tifs_set(RADIO_TIFS);
   15196:	2096      	movs	r0, #150	; 0x96
   15198:	f003 fcee 	bl	18b78 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(_radio.conn_curr->phy_rx);
   1519c:	f8d4 371c 	ldr.w	r3, [r4, #1820]	; 0x71c
   151a0:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
   151a4:	f000 0007 	and.w	r0, r0, #7
   151a8:	f003 fc48 	bl	18a3c <radio_switch_complete_and_rx>
		radio_tmr_end_capture();
   151ac:	f003 fdae 	bl	18d0c <radio_tmr_end_capture>
   151b0:	e7d7      	b.n	15162 <isr+0x153a>
		LL_ASSERT(0);
   151b2:	4b42      	ldr	r3, [pc, #264]	; (152bc <isr+0x1694>)
   151b4:	9301      	str	r3, [sp, #4]
   151b6:	9300      	str	r3, [sp, #0]
   151b8:	4b45      	ldr	r3, [pc, #276]	; (152d0 <isr+0x16a8>)
   151ba:	f7fe be2c 	b.w	13e16 <isr+0x1ee>
	switch (_radio.role) {
   151be:	7ce2      	ldrb	r2, [r4, #19]
   151c0:	2a04      	cmp	r2, #4
   151c2:	f200 81d9 	bhi.w	15578 <isr+0x1950>
   151c6:	e8df f012 	tbh	[pc, r2, lsl #1]
   151ca:	01c7      	.short	0x01c7
   151cc:	002c0005 	.word	0x002c0005
   151d0:	00600060 	.word	0x00600060
	if ((_radio.state == STATE_CLOSE) &&
   151d4:	2b03      	cmp	r3, #3
   151d6:	d109      	bne.n	151ec <isr+0x15c4>
	    (_radio.advertiser.chan_map_current != 0)) {
   151d8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	if ((_radio.state == STATE_CLOSE) &&
   151dc:	0759      	lsls	r1, r3, #29
   151de:	d005      	beq.n	151ec <isr+0x15c4>
		adv_setup();
   151e0:	f7f9 ff02 	bl	efe8 <adv_setup>
		radio_tx_enable();
   151e4:	f003 fbca 	bl	1897c <radio_tx_enable>
   151e8:	f7fe bd98 	b.w	13d1c <isr+0xf4>
		radio_filter_disable();
   151ec:	f003 fc86 	bl	18afc <radio_filter_disable>
	_radio.role = ROLE_NONE;
   151f0:	2500      	movs	r5, #0
   151f2:	74e5      	strb	r5, [r4, #19]
	_radio.state = STATE_NONE;
   151f4:	7525      	strb	r5, [r4, #20]
	_radio.ticker_id_event = 0;
   151f6:	7465      	strb	r5, [r4, #17]
	radio_tmr_stop();
   151f8:	f003 fd2a 	bl	18c50 <radio_tmr_stop>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   151fc:	462a      	mov	r2, r5
   151fe:	4629      	mov	r1, r5
   15200:	4628      	mov	r0, r5
   15202:	4b34      	ldr	r3, [pc, #208]	; (152d4 <isr+0x16ac>)
   15204:	f7f6 fbb6 	bl	b974 <mayfly_enqueue>
	LL_ASSERT(!retval);
   15208:	4605      	mov	r5, r0
   1520a:	2800      	cmp	r0, #0
   1520c:	f000 81ba 	beq.w	15584 <isr+0x195c>
   15210:	4b2a      	ldr	r3, [pc, #168]	; (152bc <isr+0x1694>)
   15212:	9301      	str	r3, [sp, #4]
   15214:	9300      	str	r3, [sp, #0]
   15216:	4a30      	ldr	r2, [pc, #192]	; (152d8 <isr+0x16b0>)
   15218:	4b30      	ldr	r3, [pc, #192]	; (152dc <isr+0x16b4>)
   1521a:	4931      	ldr	r1, [pc, #196]	; (152e0 <isr+0x16b8>)
   1521c:	4831      	ldr	r0, [pc, #196]	; (152e4 <isr+0x16bc>)
   1521e:	f7ff b8b1 	b.w	14384 <isr+0x75c>
	if (_radio.state == STATE_CLOSE) {
   15222:	2b03      	cmp	r3, #3
   15224:	d124      	bne.n	15270 <isr+0x1648>
		radio_tmr_tifs_set(RADIO_TIFS);
   15226:	2096      	movs	r0, #150	; 0x96
   15228:	f003 fca6 	bl	18b78 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
   1522c:	2300      	movs	r3, #0
   1522e:	4619      	mov	r1, r3
   15230:	461a      	mov	r2, r3
   15232:	4618      	mov	r0, r3
   15234:	f003 fc0e 	bl	18a54 <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
   15238:	f894 2749 	ldrb.w	r2, [r4, #1865]	; 0x749
   1523c:	f8d4 3744 	ldr.w	r3, [r4, #1860]	; 0x744
		radio_pkt_rx_set(_radio.packet_rx
   15240:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   15244:	3008      	adds	r0, #8
   15246:	f003 fb6b 	bl	18920 <radio_pkt_rx_set>
		radio_rssi_measure();
   1524a:	f003 fc1b 	bl	18a84 <radio_rssi_measure>
		if (ctrl_rl_enabled()) {
   1524e:	f002 fd21 	bl	17c94 <ctrl_rl_enabled>
   15252:	b138      	cbz	r0, 15264 <isr+0x163c>
			u8_t count, *irks = ctrl_irks_get(&count);
   15254:	a810      	add	r0, sp, #64	; 0x40
   15256:	f002 fa63 	bl	17720 <ctrl_irks_get>
			radio_ar_configure(count, irks);
   1525a:	4601      	mov	r1, r0
   1525c:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
   15260:	f003 fe16 	bl	18e90 <radio_ar_configure>
		_radio.state = STATE_RX;
   15264:	2301      	movs	r3, #1
   15266:	7523      	strb	r3, [r4, #20]
		radio_rx_enable();
   15268:	f003 fb82 	bl	18970 <radio_rx_enable>
   1526c:	f7fe bd56 	b.w	13d1c <isr+0xf4>
		radio_filter_disable();
   15270:	f003 fc44 	bl	18afc <radio_filter_disable>
		if (_radio.state == STATE_ABORT) {
   15274:	7d23      	ldrb	r3, [r4, #20]
   15276:	2b05      	cmp	r3, #5
   15278:	d1ba      	bne.n	151f0 <isr+0x15c8>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   1527a:	2300      	movs	r3, #0
   1527c:	9300      	str	r3, [sp, #0]
   1527e:	2204      	movs	r2, #4
   15280:	4619      	mov	r1, r3
   15282:	4618      	mov	r0, r3
   15284:	f7f7 f9d2 	bl	c62c <ticker_stop>
   15288:	e7b2      	b.n	151f0 <isr+0x15c8>
	if (_radio.conn_curr == 0) {
   1528a:	f8d4 071c 	ldr.w	r0, [r4, #1820]	; 0x71c
   1528e:	2800      	cmp	r0, #0
   15290:	d0ae      	beq.n	151f0 <isr+0x15c8>
	reason_peer = _radio.conn_curr->llcp_terminate.reason_peer;
   15292:	f890 10b3 	ldrb.w	r1, [r0, #179]	; 0xb3
	if (reason_peer && ((_radio.role == ROLE_SLAVE) ||
   15296:	b339      	cbz	r1, 152e8 <isr+0x16c0>
   15298:	7ce3      	ldrb	r3, [r4, #19]
   1529a:	2b03      	cmp	r3, #3
   1529c:	d003      	beq.n	152a6 <isr+0x167e>
   1529e:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
   152a2:	07da      	lsls	r2, r3, #31
   152a4:	d520      	bpl.n	152e8 <isr+0x16c0>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
   152a6:	f7fb f817 	bl	102d8 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
   152aa:	f8d4 071c 	ldr.w	r0, [r4, #1820]	; 0x71c
   152ae:	f7fa fe09 	bl	fec4 <connection_release>
			_radio.conn_curr = NULL;
   152b2:	2300      	movs	r3, #0
   152b4:	f8c4 371c 	str.w	r3, [r4, #1820]	; 0x71c
   152b8:	e79a      	b.n	151f0 <isr+0x15c8>
   152ba:	bf00      	nop
   152bc:	00023dae 	.word	0x00023dae
   152c0:	00025a81 	.word	0x00025a81
   152c4:	00022060 	.word	0x00022060
   152c8:	00022040 	.word	0x00022040
   152cc:	00025a91 	.word	0x00025a91
   152d0:	00025a9d 	.word	0x00025a9d
   152d4:	20009fe8 	.word	0x20009fe8
   152d8:	00022d76 	.word	0x00022d76
   152dc:	00025b73 	.word	0x00025b73
   152e0:	000272d8 	.word	0x000272d8
   152e4:	000266a2 	.word	0x000266a2
	latency_event = _radio.conn_curr->latency_event;
   152e8:	f8b0 b02a 	ldrh.w	fp, [r0, #42]	; 0x2a
	if (_radio.packet_counter &&
   152ec:	f894 7720 	ldrb.w	r7, [r4, #1824]	; 0x720
	elapsed_event = latency_event + 1;
   152f0:	f10b 0601 	add.w	r6, fp, #1
   152f4:	b2b6      	uxth	r6, r6
	if (_radio.packet_counter &&
   152f6:	2f00      	cmp	r7, #0
   152f8:	f000 8084 	beq.w	15404 <isr+0x17dc>
		if (_radio.role == ROLE_SLAVE) {
   152fc:	7ce3      	ldrb	r3, [r4, #19]
   152fe:	2b03      	cmp	r3, #3
   15300:	d173      	bne.n	153ea <isr+0x17c2>
			start_to_address_actual_us = radio_tmr_aa_restore() -
   15302:	f003 fcf7 	bl	18cf4 <radio_tmr_aa_restore>
   15306:	4681      	mov	r9, r0
						     radio_tmr_ready_get();
   15308:	f003 fcfa 	bl	18d00 <radio_tmr_ready_get>
				_radio.conn_curr->slave.window_widening_event_us;
   1530c:	f8d4 771c 	ldr.w	r7, [r4, #1820]	; 0x71c
				addr_us_get(_radio.conn_curr->phy_rx);
   15310:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
	switch (phy) {
   15314:	f003 0307 	and.w	r3, r3, #7
   15318:	2b02      	cmp	r3, #2
			start_to_address_actual_us = radio_tmr_aa_restore() -
   1531a:	eba9 0900 	sub.w	r9, r9, r0
			window_widening_event_us =
   1531e:	6e38      	ldr	r0, [r7, #96]	; 0x60
	switch (phy) {
   15320:	d052      	beq.n	153c8 <isr+0x17a0>
		return 40;
   15322:	2b04      	cmp	r3, #4
   15324:	bf0c      	ite	eq
   15326:	f44f 78bc 	moveq.w	r8, #376	; 0x178
   1532a:	f04f 0828 	movne.w	r8, #40	; 0x28
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
   1532e:	f100 0330 	add.w	r3, r0, #48	; 0x30
   15332:	4443      	add	r3, r8
			if (start_to_address_actual_us <=
   15334:	4599      	cmp	r9, r3
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
   15336:	930a      	str	r3, [sp, #40]	; 0x28
   15338:	f8df a298 	ldr.w	sl, [pc, #664]	; 155d4 <isr+0x19ac>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
   1533c:	a3a3      	add	r3, pc, #652	; (adr r3, 155cc <isr+0x19a4>)
   1533e:	e9d3 2300 	ldrd	r2, r3, [r3]
			if (start_to_address_actual_us <=
   15342:	d844      	bhi.n	153ce <isr+0x17a6>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
   15344:	fba0 010a 	umull	r0, r1, r0, sl
   15348:	f7ea ffa6 	bl	298 <__aeabi_uldivmod>
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
   1534c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
   1534e:	b285      	uxth	r5, r0
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
   15350:	eba3 0009 	sub.w	r0, r3, r9
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
   15354:	a39d      	add	r3, pc, #628	; (adr r3, 155cc <isr+0x19a4>)
   15356:	e9d3 2300 	ldrd	r2, r3, [r3]
   1535a:	fba0 010a 	umull	r0, r1, r0, sl
   1535e:	f7ea ff9b 	bl	298 <__aeabi_uldivmod>
			_radio.conn_curr->slave.window_widening_event_us = 0;
   15362:	2300      	movs	r3, #0
   15364:	663b      	str	r3, [r7, #96]	; 0x60
			_radio.conn_curr->slave.window_size_event_us = 0;
   15366:	66bb      	str	r3, [r7, #104]	; 0x68
			if (_radio.conn_curr->pkt_tx_head) {
   15368:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
   1536c:	fa1f f880 	uxth.w	r8, r0
			if (_radio.conn_curr->pkt_tx_head) {
   15370:	b3ab      	cbz	r3, 153de <isr+0x17b6>
				if (pdu_data_tx->len ||
   15372:	795b      	ldrb	r3, [r3, #5]
   15374:	b913      	cbnz	r3, 1537c <isr+0x1754>
   15376:	f897 3151 	ldrb.w	r3, [r7, #337]	; 0x151
   1537a:	b10b      	cbz	r3, 15380 <isr+0x1758>
					_radio.conn_curr->latency_event = 0;
   1537c:	2300      	movs	r3, #0
				_radio.conn_curr->latency_event =
   1537e:	857b      	strh	r3, [r7, #42]	; 0x2a
		_radio.conn_curr->connect_expire = 0;
   15380:	f8d4 371c 	ldr.w	r3, [r4, #1820]	; 0x71c
   15384:	2200      	movs	r2, #0
   15386:	879a      	strh	r2, [r3, #60]	; 0x3c
	if (_radio.conn_curr->supervision_expire) {
   15388:	f8d4 071c 	ldr.w	r0, [r4, #1820]	; 0x71c
   1538c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
   15390:	b1c3      	cbz	r3, 153c4 <isr+0x179c>
		if (_radio.conn_curr->supervision_expire > elapsed_event) {
   15392:	429e      	cmp	r6, r3
   15394:	f080 80b0 	bcs.w	154f8 <isr+0x18d0>
			_radio.conn_curr->supervision_expire -= elapsed_event;
   15398:	1b9b      	subs	r3, r3, r6
   1539a:	b29b      	uxth	r3, r3
			_radio.conn_curr->latency_event = 0;
   1539c:	2200      	movs	r2, #0
			if (_radio.conn_curr->supervision_expire <= 6) {
   1539e:	2b06      	cmp	r3, #6
			_radio.conn_curr->supervision_expire -= elapsed_event;
   153a0:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
			_radio.conn_curr->latency_event = 0;
   153a4:	8542      	strh	r2, [r0, #42]	; 0x2a
			if (_radio.conn_curr->supervision_expire <= 6) {
   153a6:	f240 80a9 	bls.w	154fc <isr+0x18d4>
			else if (_radio.role == ROLE_SLAVE) {
   153aa:	7ce3      	ldrb	r3, [r4, #19]
   153ac:	2b03      	cmp	r3, #3
   153ae:	d109      	bne.n	153c4 <isr+0x179c>
				if (latency_event != 0) {
   153b0:	f1bb 0f00 	cmp.w	fp, #0
   153b4:	f040 80a2 	bne.w	154fc <isr+0x18d4>
					force = _radio.conn_curr->slave.force & 0x01;
   153b8:	6ec7      	ldr	r7, [r0, #108]	; 0x6c
					_radio.conn_curr->slave.force >>= 1;
   153ba:	087b      	lsrs	r3, r7, #1
					if (force) {
   153bc:	f017 0701 	ands.w	r7, r7, #1
   153c0:	d13d      	bne.n	1543e <isr+0x1816>
					_radio.conn_curr->slave.force >>= 1;
   153c2:	66c3      	str	r3, [r0, #108]	; 0x6c
	force = 0;
   153c4:	2700      	movs	r7, #0
   153c6:	e03d      	b.n	15444 <isr+0x181c>
		return 24;
   153c8:	f04f 0818 	mov.w	r8, #24
   153cc:	e7af      	b.n	1532e <isr+0x1706>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
   153ce:	fba9 010a 	umull	r0, r1, r9, sl
   153d2:	f7ea ff61 	bl	298 <__aeabi_uldivmod>
   153d6:	b285      	uxth	r5, r0
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
   153d8:	f108 0030 	add.w	r0, r8, #48	; 0x30
   153dc:	e7ba      	b.n	15354 <isr+0x172c>
			} else if (_radio.conn_curr->slave.latency_enabled) {
   153de:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
   153e2:	07db      	lsls	r3, r3, #31
   153e4:	d5cc      	bpl.n	15380 <isr+0x1758>
				_radio.conn_curr->latency_event =
   153e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
   153e8:	e7c9      	b.n	1537e <isr+0x1756>
		} else if (reason_peer) {
   153ea:	b149      	cbz	r1, 15400 <isr+0x17d8>
			_radio.conn_curr->master.terminate_ack = 1;
   153ec:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
   153f0:	f043 0301 	orr.w	r3, r3, #1
   153f4:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
	ticks_drift_minus = 0;
   153f8:	f04f 0800 	mov.w	r8, #0
	ticks_drift_plus = 0;
   153fc:	4645      	mov	r5, r8
   153fe:	e7bf      	b.n	15380 <isr+0x1758>
	ticks_drift_minus = 0;
   15400:	4688      	mov	r8, r1
   15402:	e7fb      	b.n	153fc <isr+0x17d4>
	else if (_radio.conn_curr->connect_expire) {
   15404:	8f85      	ldrh	r5, [r0, #60]	; 0x3c
   15406:	b185      	cbz	r5, 1542a <isr+0x1802>
		if (_radio.conn_curr->connect_expire > elapsed_event) {
   15408:	42ae      	cmp	r6, r5
   1540a:	d204      	bcs.n	15416 <isr+0x17ee>
			_radio.conn_curr->connect_expire -= elapsed_event;
   1540c:	1bad      	subs	r5, r5, r6
   1540e:	8785      	strh	r5, [r0, #60]	; 0x3c
	ticks_drift_minus = 0;
   15410:	463d      	mov	r5, r7
   15412:	46a8      	mov	r8, r5
   15414:	e7b8      	b.n	15388 <isr+0x1760>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x3e);
   15416:	213e      	movs	r1, #62	; 0x3e
   15418:	f7fa ff5e 	bl	102d8 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
   1541c:	f8d4 071c 	ldr.w	r0, [r4, #1820]	; 0x71c
   15420:	f7fa fd50 	bl	fec4 <connection_release>
			_radio.conn_curr = NULL;
   15424:	f8c4 771c 	str.w	r7, [r4, #1820]	; 0x71c
   15428:	e6e2      	b.n	151f0 <isr+0x15c8>
		if (!_radio.conn_curr->supervision_expire) {
   1542a:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
   1542e:	f1b8 0f00 	cmp.w	r8, #0
   15432:	d1ee      	bne.n	15412 <isr+0x17ea>
			_radio.conn_curr->supervision_expire =
   15434:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
   15436:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
	ticks_drift_plus = 0;
   1543a:	4645      	mov	r5, r8
   1543c:	e7a4      	b.n	15388 <isr+0x1760>
						_radio.conn_curr->slave.force |=
   1543e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   15442:	66c3      	str	r3, [r0, #108]	; 0x6c
	if (_radio.conn_curr->procedure_expire != 0) {
   15444:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
   15448:	b123      	cbz	r3, 15454 <isr+0x182c>
		if (_radio.conn_curr->procedure_expire > elapsed_event) {
   1544a:	429e      	cmp	r6, r3
   1544c:	d258      	bcs.n	15500 <isr+0x18d8>
			_radio.conn_curr->procedure_expire -= elapsed_event;
   1544e:	1b9b      	subs	r3, r3, r6
   15450:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
	if (_radio.conn_curr->apto_expire != 0) {
   15454:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
   15458:	b123      	cbz	r3, 15464 <isr+0x183c>
		if (_radio.conn_curr->apto_expire > elapsed_event) {
   1545a:	429e      	cmp	r6, r3
   1545c:	d252      	bcs.n	15504 <isr+0x18dc>
			_radio.conn_curr->apto_expire -= elapsed_event;
   1545e:	1b9b      	subs	r3, r3, r6
   15460:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
	if (_radio.conn_curr->appto_expire != 0) {
   15464:	f8d4 271c 	ldr.w	r2, [r4, #1820]	; 0x71c
   15468:	f8b2 3048 	ldrh.w	r3, [r2, #72]	; 0x48
   1546c:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
   15470:	b123      	cbz	r3, 1547c <isr+0x1854>
		if (_radio.conn_curr->appto_expire > elapsed_event) {
   15472:	429e      	cmp	r6, r3
   15474:	d25c      	bcs.n	15530 <isr+0x1908>
			_radio.conn_curr->appto_expire -= elapsed_event;
   15476:	1b9e      	subs	r6, r3, r6
   15478:	f8a2 6048 	strh.w	r6, [r2, #72]	; 0x48
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
   1547c:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
   15480:	428b      	cmp	r3, r1
   15482:	d006      	beq.n	15492 <isr+0x186a>
	    ((_radio.conn_curr->llcp_type == LLCP_CONN_UPD) ||
   15484:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
   15488:	3b01      	subs	r3, #1
   1548a:	2b01      	cmp	r3, #1
		_radio.conn_curr->latency_event = 0;
   1548c:	bf9c      	itt	ls
   1548e:	2300      	movls	r3, #0
   15490:	8553      	strhls	r3, [r2, #42]	; 0x2a
	if ((force) || (latency_event != _radio.conn_curr->latency_event)) {
   15492:	b917      	cbnz	r7, 1549a <isr+0x1872>
   15494:	8d53      	ldrh	r3, [r2, #42]	; 0x2a
   15496:	455b      	cmp	r3, fp
   15498:	d05c      	beq.n	15554 <isr+0x192c>
		lazy = _radio.conn_curr->latency_event + 1;
   1549a:	8d53      	ldrh	r3, [r2, #42]	; 0x2a
   1549c:	3301      	adds	r3, #1
   1549e:	b29b      	uxth	r3, r3
	if ((ticks_drift_plus != 0) || (ticks_drift_minus != 0) ||
   154a0:	b935      	cbnz	r5, 154b0 <isr+0x1888>
   154a2:	f1b8 0f00 	cmp.w	r8, #0
   154a6:	d103      	bne.n	154b0 <isr+0x1888>
   154a8:	b913      	cbnz	r3, 154b0 <isr+0x1888>
	    (lazy != 0) || (force != 0)) {
   154aa:	2f00      	cmp	r7, #0
   154ac:	f43f aea0 	beq.w	151f0 <isr+0x15c8>
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
   154b0:	f892 2020 	ldrb.w	r2, [r2, #32]
		ticker_status =
   154b4:	9303      	str	r3, [sp, #12]
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
   154b6:	3207      	adds	r2, #7
		ticker_status =
   154b8:	2100      	movs	r1, #0
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
   154ba:	b2d6      	uxtb	r6, r2
		ticker_status =
   154bc:	4a3a      	ldr	r2, [pc, #232]	; (155a8 <isr+0x1980>)
   154be:	9205      	str	r2, [sp, #20]
   154c0:	462b      	mov	r3, r5
				      (void *)(u32_t)ticker_id);
   154c2:	9606      	str	r6, [sp, #24]
		ticker_status =
   154c4:	9704      	str	r7, [sp, #16]
   154c6:	9102      	str	r1, [sp, #8]
   154c8:	9101      	str	r1, [sp, #4]
   154ca:	f8cd 8000 	str.w	r8, [sp]
   154ce:	4632      	mov	r2, r6
   154d0:	4608      	mov	r0, r1
   154d2:	f7f7 f85d 	bl	c590 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   154d6:	f030 0302 	bics.w	r3, r0, #2
   154da:	f43f ae89 	beq.w	151f0 <isr+0x15c8>
   154de:	7ca3      	ldrb	r3, [r4, #18]
   154e0:	429e      	cmp	r6, r3
   154e2:	f43f ae85 	beq.w	151f0 <isr+0x15c8>
   154e6:	4b31      	ldr	r3, [pc, #196]	; (155ac <isr+0x1984>)
   154e8:	9301      	str	r3, [sp, #4]
   154ea:	9300      	str	r3, [sp, #0]
   154ec:	4a30      	ldr	r2, [pc, #192]	; (155b0 <isr+0x1988>)
   154ee:	4b31      	ldr	r3, [pc, #196]	; (155b4 <isr+0x198c>)
   154f0:	4931      	ldr	r1, [pc, #196]	; (155b8 <isr+0x1990>)
   154f2:	4832      	ldr	r0, [pc, #200]	; (155bc <isr+0x1994>)
   154f4:	f7fe bf46 	b.w	14384 <isr+0x75c>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
   154f8:	2108      	movs	r1, #8
   154fa:	e6d4      	b.n	152a6 <isr+0x167e>
				force = 1;
   154fc:	2701      	movs	r7, #1
   154fe:	e7a1      	b.n	15444 <isr+0x181c>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x22);
   15500:	2122      	movs	r1, #34	; 0x22
   15502:	e6d0      	b.n	152a6 <isr+0x167e>
			_radio.conn_curr->apto_expire = 0;
   15504:	2300      	movs	r3, #0
   15506:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
			node_rx = packet_rx_reserve_get(2);
   1550a:	2002      	movs	r0, #2
   1550c:	f7f9 f86e 	bl	e5ec <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
   15510:	b928      	cbnz	r0, 1551e <isr+0x18f6>
   15512:	4b26      	ldr	r3, [pc, #152]	; (155ac <isr+0x1984>)
   15514:	9301      	str	r3, [sp, #4]
   15516:	9300      	str	r3, [sp, #0]
   15518:	4b26      	ldr	r3, [pc, #152]	; (155b4 <isr+0x198c>)
   1551a:	f7fe bdfd 	b.w	14118 <isr+0x4f0>
			node_rx->hdr.handle = _radio.conn_curr->handle;
   1551e:	f8d4 371c 	ldr.w	r3, [r4, #1820]	; 0x71c
   15522:	8c1b      	ldrh	r3, [r3, #32]
   15524:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_APTO;
   15526:	230a      	movs	r3, #10
   15528:	7103      	strb	r3, [r0, #4]
			packet_rx_enqueue();
   1552a:	f7fa f939 	bl	f7a0 <packet_rx_enqueue>
   1552e:	e799      	b.n	15464 <isr+0x183c>
			_radio.conn_curr->appto_expire = 0;
   15530:	2300      	movs	r3, #0
   15532:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
			if ((_radio.conn_curr->procedure_expire == 0) &&
   15536:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
   1553a:	2b00      	cmp	r3, #0
   1553c:	d19e      	bne.n	1547c <isr+0x1854>
   1553e:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
   15542:	428b      	cmp	r3, r1
   15544:	d19e      	bne.n	15484 <isr+0x185c>
				_radio.conn_curr->llcp_type = LLCP_PING;
   15546:	2307      	movs	r3, #7
   15548:	f882 3076 	strb.w	r3, [r2, #118]	; 0x76
				_radio.conn_curr->llcp_ack--;
   1554c:	1e4b      	subs	r3, r1, #1
   1554e:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
   15552:	e793      	b.n	1547c <isr+0x1854>
	lazy = 0;
   15554:	463b      	mov	r3, r7
   15556:	e7a3      	b.n	154a0 <isr+0x1878>
		LL_ASSERT((_radio.state == STATE_STOP) ||
   15558:	3b04      	subs	r3, #4
   1555a:	2b01      	cmp	r3, #1
   1555c:	d908      	bls.n	15570 <isr+0x1948>
   1555e:	4b13      	ldr	r3, [pc, #76]	; (155ac <isr+0x1984>)
   15560:	9301      	str	r3, [sp, #4]
   15562:	9300      	str	r3, [sp, #0]
   15564:	4a12      	ldr	r2, [pc, #72]	; (155b0 <isr+0x1988>)
   15566:	4b16      	ldr	r3, [pc, #88]	; (155c0 <isr+0x1998>)
   15568:	4913      	ldr	r1, [pc, #76]	; (155b8 <isr+0x1990>)
   1556a:	4816      	ldr	r0, [pc, #88]	; (155c4 <isr+0x199c>)
   1556c:	f7fe bf0a 	b.w	14384 <isr+0x75c>
		_radio.state = STATE_NONE;
   15570:	2300      	movs	r3, #0
   15572:	7523      	strb	r3, [r4, #20]
   15574:	f7fe bc02 	b.w	13d7c <isr+0x154>
		LL_ASSERT(0);
   15578:	4b0c      	ldr	r3, [pc, #48]	; (155ac <isr+0x1984>)
   1557a:	9301      	str	r3, [sp, #4]
   1557c:	9300      	str	r3, [sp, #0]
   1557e:	4b10      	ldr	r3, [pc, #64]	; (155c0 <isr+0x1998>)
   15580:	f7fe bc49 	b.w	13e16 <isr+0x1ee>
	clock_control_off(_radio.hf_clock, NULL);
   15584:	6820      	ldr	r0, [r4, #0]
   15586:	6843      	ldr	r3, [r0, #4]
   15588:	4629      	mov	r1, r5
   1558a:	685b      	ldr	r3, [r3, #4]
   1558c:	4798      	blx	r3
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
   1558e:	2201      	movs	r2, #1
   15590:	4611      	mov	r1, r2
   15592:	4628      	mov	r0, r5
   15594:	f7f6 f9c6 	bl	b924 <mayfly_enable>
   15598:	f7fe bbf0 	b.w	13d7c <isr+0x154>
		LL_ASSERT(0);
   1559c:	4b03      	ldr	r3, [pc, #12]	; (155ac <isr+0x1984>)
   1559e:	9301      	str	r3, [sp, #4]
   155a0:	9300      	str	r3, [sp, #0]
   155a2:	4b09      	ldr	r3, [pc, #36]	; (155c8 <isr+0x19a0>)
   155a4:	f7fe bc37 	b.w	13e16 <isr+0x1ee>
   155a8:	0000fb09 	.word	0x0000fb09
   155ac:	00023dae 	.word	0x00023dae
   155b0:	00022d76 	.word	0x00022d76
   155b4:	00025ab0 	.word	0x00025ab0
   155b8:	000272d8 	.word	0x000272d8
   155bc:	0002625e 	.word	0x0002625e
   155c0:	00025abf 	.word	0x00025abf
   155c4:	000262d4 	.word	0x000262d4
   155c8:	00025ad5 	.word	0x00025ad5
   155cc:	1afd498d 	.word	0x1afd498d
   155d0:	00000007 	.word	0x00000007
   155d4:	3b9aca00 	.word	0x3b9aca00

000155d8 <radio_init>:
{
   155d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	_radio.hf_clock = hf_clock;
   155dc:	4e3e      	ldr	r6, [pc, #248]	; (156d8 <radio_init+0x100>)
{
   155de:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   155e0:	f89d c01c 	ldrb.w	ip, [sp, #28]
   155e4:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
   155e8:	f8bd 8020 	ldrh.w	r8, [sp, #32]
   155ec:	f89d e018 	ldrb.w	lr, [sp, #24]
	_radio.hf_clock = hf_clock;
   155f0:	6030      	str	r0, [r6, #0]
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
   155f2:	f44f 70aa 	mov.w	r0, #340	; 0x154
   155f6:	fb00 4003 	mla	r0, r0, r3, r4
	_radio.sca = sca;
   155fa:	f886 1728 	strb.w	r1, [r6, #1832]	; 0x728
	_radio.conn_pool = mem_radio;
   155fe:	f8c6 4710 	str.w	r4, [r6, #1808]	; 0x710
	mem_radio_end = mem_radio + mem_size;
   15602:	1961      	adds	r1, r4, r5
	tx_count_max += 1;
   15604:	f10c 0401 	add.w	r4, ip, #1
   15608:	b2e7      	uxtb	r7, r4
	_radio.entropy = entropy;
   1560a:	6072      	str	r2, [r6, #4]
	    (offsetof(struct pdu_data, lldata) +
   1560c:	f108 0403 	add.w	r4, r8, #3
	rx_count_max += 3;
   15610:	f10e 0203 	add.w	r2, lr, #3
	if ((PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA) <
   15614:	f5b4 7f82 	cmp.w	r4, #260	; 0x104
	rx_count_max += 3;
   15618:	b2d2      	uxtb	r2, r2
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
   1561a:	bf98      	it	ls
   1561c:	eb02 1442 	addls.w	r4, r2, r2, lsl #5
	_radio.packet_data_octets_max = packet_data_octets_max;
   15620:	f8a6 873c 	strh.w	r8, [r6, #1852]	; 0x73c
		    (MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
   15624:	bf88      	it	hi
   15626:	f108 080e 	addhi.w	r8, r8, #14
	_radio.link_rx_data_quota = rx_count_max;
   1562a:	f886 275c 	strb.w	r2, [r6, #1884]	; 0x75c
		_radio.packet_rx_data_pool_size =
   1562e:	bf8c      	ite	hi
   15630:	f028 0803 	bichi.w	r8, r8, #3
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
   15634:	eb02 0244 	addls.w	r2, r2, r4, lsl #1
	_radio.packet_rx_count = (rx_count_max + 1);
   15638:	f10e 0e04 	add.w	lr, lr, #4
	_radio.packet_tx_count = (tx_count_max + 1);
   1563c:	f10c 0c02 	add.w	ip, ip, #2
	_radio.packet_rx_count = (rx_count_max + 1);
   15640:	fa5f fe8e 	uxtb.w	lr, lr
		_radio.packet_rx_data_pool_size =
   15644:	bf8c      	ite	hi
   15646:	fb18 f202 	smulbbhi	r2, r8, r2
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
   1564a:	0092      	lslls	r2, r2, #2
	_radio.packet_tx_count = (tx_count_max + 1);
   1564c:	fa5f fc8c 	uxtb.w	ip, ip
		_radio.packet_rx_data_pool_size =
   15650:	f8a6 273e 	strh.w	r2, [r6, #1854]	; 0x73e
	_radio.packet_tx_count = (tx_count_max + 1);
   15654:	f886 c77c 	strb.w	ip, [r6, #1916]	; 0x77c
	_radio.packet_rx = (void *)mem_radio;
   15658:	f8c6 0744 	str.w	r0, [r6, #1860]	; 0x744
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   1565c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
	mem_radio +=
   15660:	eb00 008e 	add.w	r0, r0, lr, lsl #2
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   15664:	f8b6 473e 	ldrh.w	r4, [r6, #1854]	; 0x73e
	_radio.pkt_tx = (void *)mem_radio;
   15668:	f8c6 0774 	str.w	r0, [r6, #1908]	; 0x774
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   1566c:	4460      	add	r0, ip
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   1566e:	f44f 7286 	mov.w	r2, #268	; 0x10c
	_radio.pkt_release = (void *)mem_radio;
   15672:	f8c6 0778 	str.w	r0, [r6, #1912]	; 0x778
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   15676:	4460      	add	r0, ip
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   15678:	f8a6 2740 	strh.w	r2, [r6, #1856]	; 0x740
	_radio.pkt_rx_data_pool = mem_radio;
   1567c:	f8c6 0734 	str.w	r0, [r6, #1844]	; 0x734
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   15680:	fbb4 f2f2 	udiv	r2, r4, r2
	mem_radio += _radio.packet_rx_data_pool_size;
   15684:	4420      	add	r0, r4
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
   15686:	eb0e 0403 	add.w	r4, lr, r3
	_radio.link_rx_pool = mem_radio;
   1568a:	f8c6 074c 	str.w	r0, [r6, #1868]	; 0x74c
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
   1568e:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   15692:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
	_radio.pkt_tx_ctrl_pool = mem_radio;
   15696:	f8c6 0760 	str.w	r0, [r6, #1888]	; 0x760
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   1569a:	340a      	adds	r4, #10
   1569c:	f024 0403 	bic.w	r4, r4, #3
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;
   156a0:	3048      	adds	r0, #72	; 0x48
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   156a2:	b2a4      	uxth	r4, r4
	_radio.packet_tx_data_size =
   156a4:	f8a6 4770 	strh.w	r4, [r6, #1904]	; 0x770
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);
   156a8:	fb07 0404 	mla	r4, r7, r4, r0
	if (retcode) {
   156ac:	1a64      	subs	r4, r4, r1
	_radio.connection_count = connection_count_max;
   156ae:	f886 3718 	strb.w	r3, [r6, #1816]	; 0x718
	_radio.packet_rx_count = (rx_count_max + 1);
   156b2:	f886 e748 	strb.w	lr, [r6, #1864]	; 0x748
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   156b6:	f886 2742 	strb.w	r2, [r6, #1858]	; 0x742
	_radio.pkt_tx_data_pool = mem_radio;
   156ba:	f8c6 0768 	str.w	r0, [r6, #1896]	; 0x768
	if (retcode) {
   156be:	d003      	beq.n	156c8 <radio_init+0xf0>
		return (retcode + mem_size);
   156c0:	442c      	add	r4, r5
}
   156c2:	4620      	mov	r0, r4
   156c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_radio.fc_ena = 1;
   156c8:	2301      	movs	r3, #1
   156ca:	f886 378a 	strb.w	r3, [r6, #1930]	; 0x78a
	common_init();
   156ce:	f7f9 f851 	bl	e774 <common_init>
	radio_setup();
   156d2:	f003 f853 	bl	1877c <radio_setup>
	return retcode;
   156d6:	e7f4      	b.n	156c2 <radio_init+0xea>
   156d8:	20000bf0 	.word	0x20000bf0

000156dc <ll_reset>:
{
   156dc:	b538      	push	{r3, r4, r5, lr}
	role_disable(RADIO_TICKER_ID_ADV, RADIO_TICKER_ID_ADV_STOP);
   156de:	2103      	movs	r1, #3
   156e0:	2005      	movs	r0, #5
   156e2:	f7f9 f931 	bl	e948 <role_disable>
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);
   156e6:	2104      	movs	r1, #4
   156e8:	2006      	movs	r0, #6
   156ea:	f7f9 f92d 	bl	e948 <role_disable>
	for (conn_handle = 0; conn_handle < _radio.connection_count;
   156ee:	4c22      	ldr	r4, [pc, #136]	; (15778 <ll_reset+0x9c>)
   156f0:	2500      	movs	r5, #0
   156f2:	f894 2718 	ldrb.w	r2, [r4, #1816]	; 0x718
   156f6:	b2ab      	uxth	r3, r5
   156f8:	429a      	cmp	r2, r3
   156fa:	f105 0501 	add.w	r5, r5, #1
   156fe:	d835      	bhi.n	1576c <ll_reset+0x90>
	_radio.advertiser.is_enabled = 0;
   15700:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   15704:	f36f 13c7 	bfc	r3, #7, #1
   15708:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	_radio.scanner.is_enabled = 0;
   1570c:	f894 364c 	ldrb.w	r3, [r4, #1612]	; 0x64c
	_radio.advertiser.conn = NULL;
   15710:	2000      	movs	r0, #0
	_radio.scanner.is_enabled = 0;
   15712:	f360 0300 	bfi	r3, r0, #0, #1
   15716:	f884 364c 	strb.w	r3, [r4, #1612]	; 0x64c
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   1571a:	f44f 7286 	mov.w	r2, #268	; 0x10c
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   1571e:	f8b4 373e 	ldrh.w	r3, [r4, #1854]	; 0x73e
   15722:	fbb3 f3f2 	udiv	r3, r3, r2
   15726:	f884 3742 	strb.w	r3, [r4, #1858]	; 0x742
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   1572a:	f894 3748 	ldrb.w	r3, [r4, #1864]	; 0x748
	_radio.packet_rx_last = 0;
   1572e:	f884 0749 	strb.w	r0, [r4, #1865]	; 0x749
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   15732:	3b01      	subs	r3, #1
	_radio.packet_tx_first = 0;
   15734:	f884 077d 	strb.w	r0, [r4, #1917]	; 0x77d
	_radio.packet_release_last = 0;
   15738:	f884 0780 	strb.w	r0, [r4, #1920]	; 0x780
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   1573c:	f884 375c 	strb.w	r3, [r4, #1884]	; 0x75c
	_radio.fc_ack = _radio.fc_req;
   15740:	f894 3788 	ldrb.w	r3, [r4, #1928]	; 0x788
	_radio.advertiser.conn = NULL;
   15744:	f8c4 0638 	str.w	r0, [r4, #1592]	; 0x638
	_radio.scanner.conn = NULL;
   15748:	f8c4 0674 	str.w	r0, [r4, #1652]	; 0x674
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   1574c:	f8a4 2740 	strh.w	r2, [r4, #1856]	; 0x740
	_radio.packet_rx_acquire = 0;
   15750:	f884 074a 	strb.w	r0, [r4, #1866]	; 0x74a
	_radio.packet_tx_last = 0;
   15754:	f884 077e 	strb.w	r0, [r4, #1918]	; 0x77e
	_radio.packet_release_first = 0;
   15758:	f884 077f 	strb.w	r0, [r4, #1919]	; 0x77f
	_radio.fc_ack = _radio.fc_req;
   1575c:	f884 3789 	strb.w	r3, [r4, #1929]	; 0x789
	ll_filter_reset(false);
   15760:	f002 fdf0 	bl	18344 <ll_filter_reset>
}
   15764:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	common_init();
   15768:	f7f9 b804 	b.w	e774 <common_init>
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
   1576c:	1da8      	adds	r0, r5, #6
   1576e:	21ff      	movs	r1, #255	; 0xff
   15770:	b2c0      	uxtb	r0, r0
   15772:	f7f9 f8e9 	bl	e948 <role_disable>
   15776:	e7bc      	b.n	156f2 <ll_reset+0x16>
   15778:	20000bf0 	.word	0x20000bf0

0001577c <radio_adv_data_get>:
}
   1577c:	4800      	ldr	r0, [pc, #0]	; (15780 <radio_adv_data_get+0x4>)
   1577e:	4770      	bx	lr
   15780:	20000c1c 	.word	0x20000c1c

00015784 <radio_aux_adv_data_get>:
}
   15784:	4800      	ldr	r0, [pc, #0]	; (15788 <radio_aux_adv_data_get+0x4>)
   15786:	4770      	bx	lr
   15788:	20000e20 	.word	0x20000e20

0001578c <radio_scan_data_get>:
}
   1578c:	4800      	ldr	r0, [pc, #0]	; (15790 <radio_scan_data_get+0x4>)
   1578e:	4770      	bx	lr
   15790:	20001024 	.word	0x20001024

00015794 <ll_adv_is_enabled>:
	return _radio.advertiser.is_enabled;
   15794:	4b02      	ldr	r3, [pc, #8]	; (157a0 <ll_adv_is_enabled+0xc>)
   15796:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
}
   1579a:	09c0      	lsrs	r0, r0, #7
   1579c:	4770      	bx	lr
   1579e:	bf00      	nop
   157a0:	20000bf0 	.word	0x20000bf0

000157a4 <radio_adv_filter_pol_get>:
	if (_radio.advertiser.is_enabled) {
   157a4:	4b05      	ldr	r3, [pc, #20]	; (157bc <radio_adv_filter_pol_get+0x18>)
   157a6:	f993 2028 	ldrsb.w	r2, [r3, #40]	; 0x28
   157aa:	2a00      	cmp	r2, #0
		return _radio.advertiser.filter_policy;
   157ac:	bfba      	itte	lt
   157ae:	f893 002a 	ldrblt.w	r0, [r3, #42]	; 0x2a
   157b2:	f000 0003 	andlt.w	r0, r0, #3
   157b6:	2000      	movge	r0, #0
}
   157b8:	4770      	bx	lr
   157ba:	bf00      	nop
   157bc:	20000bf0 	.word	0x20000bf0

000157c0 <ll_scan_is_enabled>:
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
   157c0:	4a09      	ldr	r2, [pc, #36]	; (157e8 <ll_scan_is_enabled+0x28>)
   157c2:	f892 364c 	ldrb.w	r3, [r2, #1612]	; 0x64c
   157c6:	f892 064d 	ldrb.w	r0, [r2, #1613]	; 0x64d
	       (_radio.scanner.conn ? BIT(2) : 0);
   157ca:	f8d2 2674 	ldr.w	r2, [r2, #1652]	; 0x674
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
   157ce:	f3c0 00c0 	ubfx	r0, r0, #3, #1
	       (_radio.scanner.conn ? BIT(2) : 0);
   157d2:	2a00      	cmp	r2, #0
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
   157d4:	f003 0301 	and.w	r3, r3, #1
   157d8:	fa03 f300 	lsl.w	r3, r3, r0
	       (_radio.scanner.conn ? BIT(2) : 0);
   157dc:	bf14      	ite	ne
   157de:	2004      	movne	r0, #4
   157e0:	2000      	moveq	r0, #0
}
   157e2:	4318      	orrs	r0, r3
   157e4:	4770      	bx	lr
   157e6:	bf00      	nop
   157e8:	20000bf0 	.word	0x20000bf0

000157ec <radio_scan_filter_pol_get>:
	if (_radio.scanner.is_enabled) {
   157ec:	4b05      	ldr	r3, [pc, #20]	; (15804 <radio_scan_filter_pol_get+0x18>)
   157ee:	f893 064c 	ldrb.w	r0, [r3, #1612]	; 0x64c
   157f2:	f010 0001 	ands.w	r0, r0, #1
		return _radio.scanner.filter_policy;
   157f6:	bf1c      	itt	ne
   157f8:	f893 064d 	ldrbne.w	r0, [r3, #1613]	; 0x64d
   157fc:	f3c0 1001 	ubfxne	r0, r0, #4, #2
}
   15800:	4770      	bx	lr
   15802:	bf00      	nop
   15804:	20000bf0 	.word	0x20000bf0

00015808 <radio_connect_enable>:
{
   15808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (_radio.scanner.conn) {
   1580c:	f8df 8384 	ldr.w	r8, [pc, #900]	; 15b94 <radio_connect_enable+0x38c>
{
   15810:	b087      	sub	sp, #28
	if (_radio.scanner.conn) {
   15812:	f8d8 6674 	ldr.w	r6, [r8, #1652]	; 0x674
{
   15816:	9303      	str	r3, [sp, #12]
   15818:	4683      	mov	fp, r0
   1581a:	468a      	mov	sl, r1
   1581c:	4691      	mov	r9, r2
   1581e:	4645      	mov	r5, r8
	if (_radio.scanner.conn) {
   15820:	2e00      	cmp	r6, #0
   15822:	f040 819c 	bne.w	15b5e <radio_connect_enable+0x356>
	link = mem_acquire(&_radio.link_rx_free);
   15826:	f508 60ea 	add.w	r0, r8, #1872	; 0x750
   1582a:	f7f5 ffd8 	bl	b7de <mem_acquire>
	if (!link) {
   1582e:	4607      	mov	r7, r0
   15830:	b150      	cbz	r0, 15848 <radio_connect_enable+0x40>
	conn = mem_acquire(&_radio.conn_free);
   15832:	f208 7014 	addw	r0, r8, #1812	; 0x714
   15836:	f7f5 ffd2 	bl	b7de <mem_acquire>
	if (!conn) {
   1583a:	4604      	mov	r4, r0
   1583c:	b930      	cbnz	r0, 1584c <radio_connect_enable+0x44>
		mem_release(link, &_radio.link_rx_free);
   1583e:	f508 61ea 	add.w	r1, r8, #1872	; 0x750
   15842:	4638      	mov	r0, r7
   15844:	f7f5 ffe5 	bl	b812 <mem_release>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   15848:	2007      	movs	r0, #7
   1584a:	e15c      	b.n	15b06 <radio_connect_enable+0x2fe>
	_radio.scanner.adv_addr_type = adv_addr_type;
   1584c:	f898 364d 	ldrb.w	r3, [r8, #1613]	; 0x64d
   15850:	f36b 1386 	bfi	r3, fp, #6, #1
   15854:	f888 364d 	strb.w	r3, [r8, #1613]	; 0x64d
	memcpy(&_radio.scanner.adv_addr[0], adv_addr, BDADDR_SIZE);
   15858:	2206      	movs	r2, #6
   1585a:	4651      	mov	r1, sl
   1585c:	f208 6056 	addw	r0, r8, #1622	; 0x656
   15860:	f7ea ff97 	bl	792 <memcpy>
	_radio.scanner.conn_latency = latency;
   15864:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   15868:	f8a8 366a 	strh.w	r3, [r8, #1642]	; 0x66a
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
   1586c:	4631      	mov	r1, r6
	_radio.scanner.conn_timeout = timeout;
   1586e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
	_radio.scanner.conn_interval = interval;
   15872:	f8a8 9668 	strh.w	r9, [r8, #1640]	; 0x668
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
   15876:	4630      	mov	r0, r6
	_radio.scanner.conn_timeout = timeout;
   15878:	f8a8 366c 	strh.w	r3, [r8, #1644]	; 0x66c
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
   1587c:	f003 f85c 	bl	18938 <radio_tx_ready_delay_get>
   15880:	49bb      	ldr	r1, [pc, #748]	; (15b70 <radio_connect_enable+0x368>)
   15882:	f200 4052 	addw	r0, r0, #1106	; 0x452
   15886:	a3b8      	add	r3, pc, #736	; (adr r3, 15b68 <radio_connect_enable+0x360>)
   15888:	e9d3 2300 	ldrd	r2, r3, [r3]
   1588c:	fba0 0101 	umull	r0, r1, r0, r1
   15890:	f7ea fd02 	bl	298 <__aeabi_uldivmod>
	conn->handle = 0xFFFF;
   15894:	f64f 73ff 	movw	r3, #65535	; 0xffff
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
   15898:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1589c:	f8c8 0670 	str.w	r0, [r8, #1648]	; 0x670
	conn->handle = 0xFFFF;
   158a0:	8423      	strh	r3, [r4, #32]
	adv_aa_check = access_addr ^ 0x8e89bed6;
   158a2:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 15b98 <radio_connect_enable+0x390>
	conn->llcp_features = RADIO_BLE_FEAT;
   158a6:	f503 4394 	add.w	r3, r3, #18944	; 0x4a00
   158aa:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
   158ae:	2603      	movs	r6, #3
	consecutive_cnt = 1;
   158b0:	f04f 0901 	mov.w	r9, #1
	bt_rand(&access_addr, sizeof(u32_t));
   158b4:	2104      	movs	r1, #4
   158b6:	a805      	add	r0, sp, #20
   158b8:	f7f6 ffc8 	bl	c84c <bt_rand>
	consecutive_bit = (access_addr >> bit_idx) & 0x01;
   158bc:	f8dd c014 	ldr.w	ip, [sp, #20]
   158c0:	2000      	movs	r0, #0
   158c2:	ea4f 7adc 	mov.w	sl, ip, lsr #31
	bit_idx = 31;
   158c6:	231f      	movs	r3, #31
	transitions = 0;
   158c8:	4602      	mov	r2, r0
	consecutive_cnt = 1;
   158ca:	2101      	movs	r1, #1
	while (bit_idx--) {
   158cc:	3b01      	subs	r3, #1
   158ce:	b2db      	uxtb	r3, r3
   158d0:	2bff      	cmp	r3, #255	; 0xff
   158d2:	d103      	bne.n	158dc <radio_connect_enable+0xd4>
   158d4:	b3d0      	cbz	r0, 1594c <radio_connect_enable+0x144>
   158d6:	f8cd c014 	str.w	ip, [sp, #20]
   158da:	e037      	b.n	1594c <radio_connect_enable+0x144>
		bit = (access_addr >> bit_idx) & 0x01;
   158dc:	fa2c fe03 	lsr.w	lr, ip, r3
   158e0:	f00e 0e01 	and.w	lr, lr, #1
		if (bit == consecutive_bit) {
   158e4:	45d6      	cmp	lr, sl
   158e6:	d11a      	bne.n	1591e <radio_connect_enable+0x116>
			consecutive_cnt++;
   158e8:	3101      	adds	r1, #1
   158ea:	b2c9      	uxtb	r1, r1
		if ((consecutive_cnt > 6) ||
   158ec:	2906      	cmp	r1, #6
   158ee:	d807      	bhi.n	15900 <radio_connect_enable+0xf8>
   158f0:	2b1b      	cmp	r3, #27
   158f2:	d81a      	bhi.n	1592a <radio_connect_enable+0x122>
		    ((bit_idx < 28) && (transitions < 1)) ||
   158f4:	b122      	cbz	r2, 15900 <radio_connect_enable+0xf8>
   158f6:	2b1b      	cmp	r3, #27
   158f8:	d017      	beq.n	1592a <radio_connect_enable+0x122>
		    ((bit_idx < 27) && (transitions < 2))) {
   158fa:	2a01      	cmp	r2, #1
   158fc:	d815      	bhi.n	1592a <radio_connect_enable+0x122>
   158fe:	2201      	movs	r2, #1
				access_addr &= ~BIT(bit_idx);
   15900:	fa09 f103 	lsl.w	r1, r9, r3
			if (consecutive_bit) {
   15904:	f1be 0f00 	cmp.w	lr, #0
   15908:	f000 8100 	beq.w	15b0c <radio_connect_enable+0x304>
				access_addr &= ~BIT(bit_idx);
   1590c:	ea2c 0c01 	bic.w	ip, ip, r1
				consecutive_bit = 0;
   15910:	f04f 0e00 	mov.w	lr, #0
			transitions++;
   15914:	3201      	adds	r2, #1
   15916:	2001      	movs	r0, #1
   15918:	b2d2      	uxtb	r2, r2
			consecutive_cnt = 1;
   1591a:	4601      	mov	r1, r0
   1591c:	e005      	b.n	1592a <radio_connect_enable+0x122>
			transitions++;
   1591e:	3201      	adds	r2, #1
		if ((consecutive_cnt > 6) ||
   15920:	2b1b      	cmp	r3, #27
			transitions++;
   15922:	b2d2      	uxtb	r2, r2
			consecutive_cnt = 1;
   15924:	f04f 0101 	mov.w	r1, #1
		if ((consecutive_cnt > 6) ||
   15928:	d9e5      	bls.n	158f6 <radio_connect_enable+0xee>
		if (transitions > 24) {
   1592a:	2a18      	cmp	r2, #24
   1592c:	f240 80f6 	bls.w	15b1c <radio_connect_enable+0x314>
   15930:	b108      	cbz	r0, 15936 <radio_connect_enable+0x12e>
   15932:	f8cd c014 	str.w	ip, [sp, #20]
   15936:	3301      	adds	r3, #1
   15938:	9a05      	ldr	r2, [sp, #20]
				access_addr &= ~(BIT(bit_idx + 1) - 1);
   1593a:	fa09 f303 	lsl.w	r3, r9, r3
			if (consecutive_bit) {
   1593e:	f1be 0f00 	cmp.w	lr, #0
   15942:	f000 80e8 	beq.w	15b16 <radio_connect_enable+0x30e>
				access_addr &= ~(BIT(bit_idx + 1) - 1);
   15946:	425b      	negs	r3, r3
   15948:	4013      	ands	r3, r2
				access_addr |= (BIT(bit_idx + 1) - 1);
   1594a:	9305      	str	r3, [sp, #20]
	adv_aa_check = access_addr ^ 0x8e89bed6;
   1594c:	9b05      	ldr	r3, [sp, #20]
   1594e:	a806      	add	r0, sp, #24
   15950:	ea83 0308 	eor.w	r3, r3, r8
   15954:	f840 3d08 	str.w	r3, [r0, #-8]!
	if (util_ones_count_get((u8_t *)&adv_aa_check,
   15958:	2104      	movs	r1, #4
   1595a:	f7f6 f8eb 	bl	bb34 <util_ones_count_get>
   1595e:	2801      	cmp	r0, #1
   15960:	f240 80e3 	bls.w	15b2a <radio_connect_enable+0x322>
	if (!((access_addr & 0xFFFF) ^ (access_addr >> 16)) &&
   15964:	9b05      	ldr	r3, [sp, #20]
   15966:	b29a      	uxth	r2, r3
   15968:	ebb2 4f13 	cmp.w	r2, r3, lsr #16
   1596c:	f000 80d8 	beq.w	15b20 <radio_connect_enable+0x318>
	memcpy(&conn->access_addr[0], &access_addr, sizeof(conn->access_addr));
   15970:	2204      	movs	r2, #4
   15972:	a905      	add	r1, sp, #20
   15974:	f104 0010 	add.w	r0, r4, #16
	access_addr = access_addr_get();
   15978:	9305      	str	r3, [sp, #20]
	memcpy(&conn->access_addr[0], &access_addr, sizeof(conn->access_addr));
   1597a:	f7ea ff0a 	bl	792 <memcpy>
	bt_rand(&conn->crc_init[0], 3);
   1597e:	2103      	movs	r1, #3
   15980:	f104 0014 	add.w	r0, r4, #20
   15984:	f7f6 ff62 	bl	c84c <bt_rand>
	memcpy(&conn->data_chan_map[0], &_radio.data_chan_map[0],
   15988:	2205      	movs	r2, #5
   1598a:	497a      	ldr	r1, [pc, #488]	; (15b74 <radio_connect_enable+0x36c>)
   1598c:	f104 0017 	add.w	r0, r4, #23
   15990:	f7ea feff 	bl	792 <memcpy>
	conn->data_chan_count = _radio.data_chan_count;
   15994:	f895 2727 	ldrb.w	r2, [r5, #1831]	; 0x727
   15998:	7f63      	ldrb	r3, [r4, #29]
   1599a:	f362 0305 	bfi	r3, r2, #0, #6
	conn->data_chan_sel = 0;
   1599e:	f36f 1386 	bfc	r3, #6, #1
   159a2:	7763      	strb	r3, [r4, #29]
	conn->data_chan_hop = 6;
   159a4:	2206      	movs	r2, #6
	conn->data_chan_use = 0;
   159a6:	2300      	movs	r3, #0
	conn->data_chan_hop = 6;
   159a8:	77a2      	strb	r2, [r4, #30]
	conn->data_chan_use = 0;
   159aa:	77e3      	strb	r3, [r4, #31]
	conn->default_tx_octets = _radio.default_tx_octets;
   159ac:	f8b5 172a 	ldrh.w	r1, [r5, #1834]	; 0x72a
	conn->conn_interval = _radio.scanner.conn_interval;
   159b0:	f8b5 e668 	ldrh.w	lr, [r5, #1640]	; 0x668
	conn->latency = _radio.scanner.conn_latency;
   159b4:	f8b5 066a 	ldrh.w	r0, [r5, #1642]	; 0x66a
	conn->default_tx_octets = _radio.default_tx_octets;
   159b8:	85a1      	strh	r1, [r4, #44]	; 0x2c
	conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   159ba:	211b      	movs	r1, #27
   159bc:	85e1      	strh	r1, [r4, #46]	; 0x2e
	conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   159be:	8621      	strh	r1, [r4, #48]	; 0x30
	conn->default_tx_time = _radio.default_tx_time;
   159c0:	f8b5 172c 	ldrh.w	r1, [r5, #1836]	; 0x72c
   159c4:	8661      	strh	r1, [r4, #50]	; 0x32
	conn->max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   159c6:	f44f 71a4 	mov.w	r1, #328	; 0x148
	conn->phy_pref_tx = _radio.default_phy_tx;
   159ca:	f8b5 672e 	ldrh.w	r6, [r5, #1838]	; 0x72e
	conn->max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   159ce:	86a1      	strh	r1, [r4, #52]	; 0x34
	conn->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   159d0:	86e1      	strh	r1, [r4, #54]	; 0x36
	conn->phy_pref_tx = _radio.default_phy_tx;
   159d2:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
	conn->event_counter = 0;
   159d6:	8463      	strh	r3, [r4, #34]	; 0x22
	conn->phy_pref_tx = _radio.default_phy_tx;
   159d8:	f366 0102 	bfi	r1, r6, #0, #3
	conn->phy_tx = BIT(0);
   159dc:	2601      	movs	r6, #1
   159de:	f366 01c5 	bfi	r1, r6, #3, #3
	conn->phy_flags = 0;
   159e2:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
   159e6:	f363 11c7 	bfi	r1, r3, #7, #1
   159ea:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
	conn->phy_tx_time = BIT(0);
   159ee:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
	conn->conn_interval = _radio.scanner.conn_interval;
   159f2:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
	conn->phy_tx_time = BIT(0);
   159f6:	f366 0102 	bfi	r1, r6, #0, #3
   159fa:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
	conn->phy_pref_rx = _radio.default_phy_rx;
   159fe:	f8b5 c730 	ldrh.w	ip, [r5, #1840]	; 0x730
	conn->latency_prepare = 0;
   15a02:	8523      	strh	r3, [r4, #40]	; 0x28
	conn->phy_pref_rx = _radio.default_phy_rx;
   15a04:	b2c9      	uxtb	r1, r1
   15a06:	f36c 01c5 	bfi	r1, ip, #3, #3
   15a0a:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
	conn->phy_rx = BIT(0);
   15a0e:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
	conn->latency_event = 0;
   15a12:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->phy_rx = BIT(0);
   15a14:	f366 0102 	bfi	r1, r6, #0, #3
   15a18:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
	conn->role = 0;
   15a1c:	7f61      	ldrb	r1, [r4, #29]
	conn->connect_expire = 6;
   15a1e:	87a2      	strh	r2, [r4, #60]	; 0x3c
	conn->role = 0;
   15a20:	f363 11c7 	bfi	r1, r3, #7, #1
	conn->latency = _radio.scanner.conn_latency;
   15a24:	84e0      	strh	r0, [r4, #38]	; 0x26
	conn->role = 0;
   15a26:	7761      	strb	r1, [r4, #29]
	conn->common.fex_valid = 0;
   15a28:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
	conn->master.terminate_ack = 0;
   15a2c:	f001 01df 	and.w	r1, r1, #223	; 0xdf
   15a30:	f363 0100 	bfi	r1, r3, #0, #1
   15a34:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
	conn_interval_us =
   15a38:	f240 42e2 	movw	r2, #1250	; 0x4e2
   15a3c:	fb02 f20e 	mul.w	r2, r2, lr
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   15a40:	f8b5 166c 	ldrh.w	r1, [r5, #1644]	; 0x66c
	conn->supervision_expire = 0;
   15a44:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   15a48:	1e56      	subs	r6, r2, #1
   15a4a:	f242 7e10 	movw	lr, #10000	; 0x2710
   15a4e:	fb0e 6101 	mla	r1, lr, r1, r6
	conn->procedure_expire = 0;
   15a52:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   15a56:	fbb1 f1f2 	udiv	r1, r1, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   15a5a:	4b47      	ldr	r3, [pc, #284]	; (15b78 <radio_connect_enable+0x370>)
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   15a5c:	87e1      	strh	r1, [r4, #62]	; 0x3e
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   15a5e:	4947      	ldr	r1, [pc, #284]	; (15b7c <radio_connect_enable+0x374>)
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   15a60:	4413      	add	r3, r2
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   15a62:	4411      	add	r1, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   15a64:	fbb3 f3f2 	udiv	r3, r3, r2
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   15a68:	fbb1 f1f2 	udiv	r1, r1, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   15a6c:	b29a      	uxth	r2, r3
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   15a6e:	f8a4 1042 	strh.w	r1, [r4, #66]	; 0x42
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   15a72:	1d81      	adds	r1, r0, #6
   15a74:	428a      	cmp	r2, r1
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   15a76:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   15a7a:	dc6a      	bgt.n	15b52 <radio_connect_enable+0x34a>
	conn->llcp_version.tx = 0;
   15a7c:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   15a80:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
	conn->apto_expire = 0;
   15a84:	2000      	movs	r0, #0
	conn->llcp_version.rx = 0;
   15a86:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
   15a8a:	f360 0341 	bfi	r3, r0, #1, #1
   15a8e:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
	conn->llcp_conn_param.disabled = 0;
   15a92:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
	conn->apto_expire = 0;
   15a96:	f8a4 004c 	strh.w	r0, [r4, #76]	; 0x4c
	conn->llcp_conn_param.disabled = 0;
   15a9a:	f360 1304 	bfi	r3, r0, #4, #1
   15a9e:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	conn->sn = 0;
   15aa2:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
	conn->appto_expire = 0;
   15aa6:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
	conn->empty = 0;
   15aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
   15aae:	f360 13c7 	bfi	r3, r0, #7, #1
	conn->llcp_req = 0;
   15ab2:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
	conn->llcp_ack = 0;
   15ab6:	f884 0075 	strb.w	r0, [r4, #117]	; 0x75
	conn->llcp_terminate.req = 0;
   15aba:	f884 00b0 	strb.w	r0, [r4, #176]	; 0xb0
	conn->llcp_terminate.ack = 0;
   15abe:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1
	conn->llcp_terminate.reason_peer = 0;
   15ac2:	f884 00b3 	strb.w	r0, [r4, #179]	; 0xb3
	conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
   15ac6:	f8c4 70b4 	str.w	r7, [r4, #180]	; 0xb4
	conn->llcp_conn_param.req = 0;
   15aca:	f884 00c0 	strb.w	r0, [r4, #192]	; 0xc0
	conn->llcp_conn_param.ack = 0;
   15ace:	f884 00c1 	strb.w	r0, [r4, #193]	; 0xc1
	conn->llcp_length.req = 0;
   15ad2:	f884 00e8 	strb.w	r0, [r4, #232]	; 0xe8
	conn->llcp_length.ack = 0;
   15ad6:	f884 00e9 	strb.w	r0, [r4, #233]	; 0xe9
	conn->llcp_phy.req = 0;
   15ada:	f884 00f4 	strb.w	r0, [r4, #244]	; 0xf4
	conn->llcp_phy.ack = 0;
   15ade:	f884 00f5 	strb.w	r0, [r4, #245]	; 0xf5
	conn->empty = 0;
   15ae2:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	conn->pkt_tx_head = NULL;
   15ae6:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
	conn->pkt_tx_ctrl = NULL;
   15aea:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
	conn->pkt_tx_ctrl_last = NULL;
   15aee:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
	conn->pkt_tx_data = NULL;
   15af2:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
	conn->pkt_tx_last = NULL;
   15af6:	f8c4 014c 	str.w	r0, [r4, #332]	; 0x14c
	conn->packet_tx_head_len = 0;
   15afa:	f884 0150 	strb.w	r0, [r4, #336]	; 0x150
	conn->packet_tx_head_offset = 0;
   15afe:	f884 0151 	strb.w	r0, [r4, #337]	; 0x151
	_radio.scanner.conn = conn;
   15b02:	f8c5 4674 	str.w	r4, [r5, #1652]	; 0x674
}
   15b06:	b007      	add	sp, #28
   15b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				access_addr |= BIT(bit_idx);
   15b0c:	ea41 0c0c 	orr.w	ip, r1, ip
				consecutive_bit = 1;
   15b10:	f04f 0e01 	mov.w	lr, #1
   15b14:	e6fe      	b.n	15914 <radio_connect_enable+0x10c>
				access_addr |= (BIT(bit_idx + 1) - 1);
   15b16:	3b01      	subs	r3, #1
   15b18:	4313      	orrs	r3, r2
   15b1a:	e716      	b.n	1594a <radio_connect_enable+0x142>
		if (transitions > 24) {
   15b1c:	46f2      	mov	sl, lr
   15b1e:	e6d5      	b.n	158cc <radio_connect_enable+0xc4>
	    !((access_addr & 0xFF) ^ (access_addr >> 24))) {
   15b20:	b2da      	uxtb	r2, r3
	if (!((access_addr & 0xFFFF) ^ (access_addr >> 16)) &&
   15b22:	ebb2 6f13 	cmp.w	r2, r3, lsr #24
   15b26:	f47f af23 	bne.w	15970 <radio_connect_enable+0x168>
   15b2a:	3e01      	subs	r6, #1
	LL_ASSERT(retry);
   15b2c:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   15b30:	f47f aec0 	bne.w	158b4 <radio_connect_enable+0xac>
   15b34:	4b12      	ldr	r3, [pc, #72]	; (15b80 <radio_connect_enable+0x378>)
   15b36:	9301      	str	r3, [sp, #4]
   15b38:	9300      	str	r3, [sp, #0]
   15b3a:	4a12      	ldr	r2, [pc, #72]	; (15b84 <radio_connect_enable+0x37c>)
   15b3c:	4b12      	ldr	r3, [pc, #72]	; (15b88 <radio_connect_enable+0x380>)
   15b3e:	4913      	ldr	r1, [pc, #76]	; (15b8c <radio_connect_enable+0x384>)
   15b40:	4813      	ldr	r0, [pc, #76]	; (15b90 <radio_connect_enable+0x388>)
   15b42:	f7ec fba7 	bl	2294 <printk>
   15b46:	4040      	eors	r0, r0
   15b48:	f380 8811 	msr	BASEPRI, r0
   15b4c:	f04f 0004 	mov.w	r0, #4
   15b50:	df02      	svc	2
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   15b52:	f5c0 437f 	rsb	r3, r0, #65280	; 0xff00
   15b56:	33fa      	adds	r3, #250	; 0xfa
   15b58:	441a      	add	r2, r3
   15b5a:	b292      	uxth	r2, r2
   15b5c:	e78e      	b.n	15a7c <radio_connect_enable+0x274>
		return BT_HCI_ERR_CMD_DISALLOWED;
   15b5e:	200c      	movs	r0, #12
   15b60:	e7d1      	b.n	15b06 <radio_connect_enable+0x2fe>
   15b62:	bf00      	nop
   15b64:	f3af 8000 	nop.w
   15b68:	1afd498d 	.word	0x1afd498d
   15b6c:	00000007 	.word	0x00000007
   15b70:	3b9aca00 	.word	0x3b9aca00
   15b74:	20001312 	.word	0x20001312
   15b78:	01c9c37f 	.word	0x01c9c37f
   15b7c:	026259ff 	.word	0x026259ff
   15b80:	00023dae 	.word	0x00023dae
   15b84:	00022d76 	.word	0x00022d76
   15b88:	00025c5f 	.word	0x00025c5f
   15b8c:	000272d8 	.word	0x000272d8
   15b90:	000267b7 	.word	0x000267b7
   15b94:	20000bf0 	.word	0x20000bf0
   15b98:	8e89bed6 	.word	0x8e89bed6

00015b9c <ll_conn_update>:
{
   15b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15ba0:	460c      	mov	r4, r1
   15ba2:	4690      	mov	r8, r2
   15ba4:	461d      	mov	r5, r3
   15ba6:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   15baa:	f8bd 701c 	ldrh.w	r7, [sp, #28]
	conn = connection_get(handle);
   15bae:	f7f8 feb5 	bl	e91c <connection_get>
	if (!conn) {
   15bb2:	b330      	cbz	r0, 15c02 <ll_conn_update+0x66>
	if (!cmd) {
   15bb4:	2c00      	cmp	r4, #0
   15bb6:	d14a      	bne.n	15c4e <ll_conn_update+0xb2>
		if (!conn->llcp_conn_param.disabled &&
   15bb8:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
   15bbc:	06d9      	lsls	r1, r3, #27
   15bbe:	d407      	bmi.n	15bd0 <ll_conn_update+0x34>
		    (!conn->common.fex_valid ||
   15bc0:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
		if (!conn->llcp_conn_param.disabled &&
   15bc4:	069a      	lsls	r2, r3, #26
   15bc6:	d541      	bpl.n	15c4c <ll_conn_update+0xb0>
		     (conn->llcp_features &
   15bc8:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
		    (!conn->common.fex_valid ||
   15bcc:	079b      	lsls	r3, r3, #30
   15bce:	d43d      	bmi.n	15c4c <ll_conn_update+0xb0>
		} else if (conn->role) {
   15bd0:	f990 301d 	ldrsb.w	r3, [r0, #29]
   15bd4:	2b00      	cmp	r3, #0
   15bd6:	da17      	bge.n	15c08 <ll_conn_update+0x6c>
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   15bd8:	201a      	movs	r0, #26
   15bda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if ((conn->llcp_conn_param.req ==
   15bde:	428b      	cmp	r3, r1
   15be0:	d00f      	beq.n	15c02 <ll_conn_update+0x66>
			    (conn->llcp_conn_param.state !=
   15be2:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
			     conn->llcp_conn_param.ack) ||
   15be6:	f003 0207 	and.w	r2, r3, #7
   15bea:	2a03      	cmp	r2, #3
   15bec:	d109      	bne.n	15c02 <ll_conn_update+0x66>
			conn->llcp_conn_param.state = cmd;
   15bee:	f364 0302 	bfi	r3, r4, #0, #3
			conn->llcp_conn_param.cmd = 1;
   15bf2:	b2db      	uxtb	r3, r3
   15bf4:	f043 0308 	orr.w	r3, r3, #8
			conn->llcp_conn_param.status = status;
   15bf8:	f880 80c3 	strb.w	r8, [r0, #195]	; 0xc3
			conn->llcp_conn_param.cmd = 1;
   15bfc:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
   15c00:	e021      	b.n	15c46 <ll_conn_update+0xaa>
		return BT_HCI_ERR_CMD_DISALLOWED;
   15c02:	200c      	movs	r0, #12
   15c04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->llcp_req != conn->llcp_ack) {
   15c08:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
   15c0c:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
   15c10:	429a      	cmp	r2, r3
   15c12:	d1f6      	bne.n	15c02 <ll_conn_update+0x66>
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   15c14:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
		conn->llcp.conn_upd.interval = interval;
   15c18:	f8a0 507a 	strh.w	r5, [r0, #122]	; 0x7a
		conn->llcp.conn_upd.win_size = 1;
   15c1c:	2401      	movs	r4, #1
		conn->llcp.conn_upd.win_offset_us = 0;
   15c1e:	2100      	movs	r1, #0
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   15c20:	f364 0301 	bfi	r3, r4, #0, #2
		conn->llcp.conn_upd.is_internal = 0;
   15c24:	f361 0382 	bfi	r3, r1, #2, #1
		conn->llcp_req++;
   15c28:	4422      	add	r2, r4
		conn->llcp.conn_upd.win_size = 1;
   15c2a:	f880 4088 	strb.w	r4, [r0, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
   15c2e:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
		conn->llcp.conn_upd.latency = latency;
   15c32:	f8a0 607c 	strh.w	r6, [r0, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = timeout;
   15c36:	f8a0 707e 	strh.w	r7, [r0, #126]	; 0x7e
		conn->llcp.conn_upd.is_internal = 0;
   15c3a:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
   15c3e:	f880 4076 	strb.w	r4, [r0, #118]	; 0x76
		conn->llcp_req++;
   15c42:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
	return 0;
   15c46:	2000      	movs	r0, #0
   15c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			cmd++;
   15c4c:	2401      	movs	r4, #1
		cmd--;
   15c4e:	3c01      	subs	r4, #1
		if (cmd) {
   15c50:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   15c54:	f890 30c0 	ldrb.w	r3, [r0, #192]	; 0xc0
   15c58:	f890 10c1 	ldrb.w	r1, [r0, #193]	; 0xc1
   15c5c:	d1bf      	bne.n	15bde <ll_conn_update+0x42>
			if (conn->llcp_conn_param.req !=
   15c5e:	4299      	cmp	r1, r3
   15c60:	d1cf      	bne.n	15c02 <ll_conn_update+0x66>
			conn->llcp_conn_param.state = cmd;
   15c62:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.status = 0;
   15c66:	f880 40c3 	strb.w	r4, [r0, #195]	; 0xc3
			conn->llcp_conn_param.state = cmd;
   15c6a:	f364 0302 	bfi	r3, r4, #0, #3
			conn->llcp_conn_param.cmd = 1;
   15c6e:	b2db      	uxtb	r3, r3
   15c70:	f043 0308 	orr.w	r3, r3, #8
			conn->llcp_conn_param.req++;
   15c74:	3101      	adds	r1, #1
			conn->llcp_conn_param.interval = interval;
   15c76:	f8a0 50c4 	strh.w	r5, [r0, #196]	; 0xc4
			conn->llcp_conn_param.latency = latency;
   15c7a:	f8a0 60c6 	strh.w	r6, [r0, #198]	; 0xc6
			conn->llcp_conn_param.timeout = timeout;
   15c7e:	f8a0 70c8 	strh.w	r7, [r0, #200]	; 0xc8
			conn->llcp_conn_param.cmd = 1;
   15c82:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.req++;
   15c86:	f880 10c0 	strb.w	r1, [r0, #192]	; 0xc0
   15c8a:	e7dc      	b.n	15c46 <ll_conn_update+0xaa>

00015c8c <ll_chm_update>:
{
   15c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	memcpy(&_radio.data_chan_map[0], chm,
   15c90:	4c1e      	ldr	r4, [pc, #120]	; (15d0c <ll_chm_update+0x80>)
   15c92:	4601      	mov	r1, r0
   15c94:	2205      	movs	r2, #5
{
   15c96:	4605      	mov	r5, r0
	memcpy(&_radio.data_chan_map[0], chm,
   15c98:	f204 7022 	addw	r0, r4, #1826	; 0x722
   15c9c:	f7ea fd79 	bl	792 <memcpy>
		util_ones_count_get(&_radio.data_chan_map[0],
   15ca0:	f204 7022 	addw	r0, r4, #1826	; 0x722
   15ca4:	2105      	movs	r1, #5
   15ca6:	f7f5 ff45 	bl	bb34 <util_ones_count_get>
	_radio.data_chan_count =
   15caa:	f884 0727 	strb.w	r0, [r4, #1831]	; 0x727
   15cae:	f894 4718 	ldrb.w	r4, [r4, #1816]	; 0x718
   15cb2:	3c01      	subs	r4, #1
   15cb4:	b2e4      	uxtb	r4, r4
		conn->llcp.chan_map.initiate = 1;
   15cb6:	2701      	movs	r7, #1
		conn->llcp_type = LLCP_CHAN_MAP;
   15cb8:	f04f 0802 	mov.w	r8, #2
	while (instance--) {
   15cbc:	2cff      	cmp	r4, #255	; 0xff
   15cbe:	d102      	bne.n	15cc6 <ll_chm_update+0x3a>
	return 0;
   15cc0:	2000      	movs	r0, #0
   15cc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conn = connection_get(instance);
   15cc6:	4620      	mov	r0, r4
   15cc8:	f7f8 fe28 	bl	e91c <connection_get>
		if (!conn || conn->role) {
   15ccc:	4606      	mov	r6, r0
   15cce:	b1b8      	cbz	r0, 15d00 <ll_chm_update+0x74>
   15cd0:	f990 301d 	ldrsb.w	r3, [r0, #29]
   15cd4:	2b00      	cmp	r3, #0
   15cd6:	db13      	blt.n	15d00 <ll_chm_update+0x74>
		if (conn->llcp_req != conn->llcp_ack) {
   15cd8:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   15cdc:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   15ce0:	429a      	cmp	r2, r3
   15ce2:	d110      	bne.n	15d06 <ll_chm_update+0x7a>
		memcpy(&conn->llcp.chan_map.chm[0], chm,
   15ce4:	2205      	movs	r2, #5
   15ce6:	4629      	mov	r1, r5
   15ce8:	3079      	adds	r0, #121	; 0x79
   15cea:	f7ea fd52 	bl	792 <memcpy>
		conn->llcp_req++;
   15cee:	f896 3074 	ldrb.w	r3, [r6, #116]	; 0x74
		conn->llcp.chan_map.initiate = 1;
   15cf2:	f886 7078 	strb.w	r7, [r6, #120]	; 0x78
		conn->llcp_req++;
   15cf6:	3301      	adds	r3, #1
		conn->llcp_type = LLCP_CHAN_MAP;
   15cf8:	f886 8076 	strb.w	r8, [r6, #118]	; 0x76
		conn->llcp_req++;
   15cfc:	f886 3074 	strb.w	r3, [r6, #116]	; 0x74
   15d00:	3c01      	subs	r4, #1
   15d02:	b2e4      	uxtb	r4, r4
   15d04:	e7da      	b.n	15cbc <ll_chm_update+0x30>
			return 1;
   15d06:	2001      	movs	r0, #1
}
   15d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15d0c:	20000bf0 	.word	0x20000bf0

00015d10 <ll_chm_get>:
{
   15d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15d12:	460d      	mov	r5, r1
	conn = connection_get(handle);
   15d14:	f7f8 fe02 	bl	e91c <connection_get>
	if (!conn) {
   15d18:	4604      	mov	r4, r0
   15d1a:	b160      	cbz	r0, 15d36 <ll_chm_get+0x26>
		conn->chm_update = 0;
   15d1c:	2700      	movs	r7, #0
		memcpy(chm, conn->data_chan_map, sizeof(conn->data_chan_map));
   15d1e:	f100 0617 	add.w	r6, r0, #23
		conn->chm_update = 0;
   15d22:	7727      	strb	r7, [r4, #28]
		memcpy(chm, conn->data_chan_map, sizeof(conn->data_chan_map));
   15d24:	2205      	movs	r2, #5
   15d26:	4631      	mov	r1, r6
   15d28:	4628      	mov	r0, r5
   15d2a:	f7ea fd32 	bl	792 <memcpy>
	} while (conn->chm_update);
   15d2e:	7f20      	ldrb	r0, [r4, #28]
   15d30:	2800      	cmp	r0, #0
   15d32:	d1f6      	bne.n	15d22 <ll_chm_get+0x12>
   15d34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
   15d36:	2001      	movs	r0, #1
}
   15d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00015d3a <ll_start_enc_req_send>:
{
   15d3a:	b570      	push	{r4, r5, r6, lr}
   15d3c:	460d      	mov	r5, r1
   15d3e:	4616      	mov	r6, r2
	conn = connection_get(handle);
   15d40:	f7f8 fdec 	bl	e91c <connection_get>
	if (!conn) {
   15d44:	4604      	mov	r4, r0
   15d46:	b908      	cbnz	r0, 15d4c <ll_start_enc_req_send+0x12>
		return 1;
   15d48:	2001      	movs	r0, #1
   15d4a:	bd70      	pop	{r4, r5, r6, pc}
	if (error_code) {
   15d4c:	b315      	cbz	r5, 15d94 <ll_start_enc_req_send+0x5a>
		if (conn->refresh == 0) {
   15d4e:	f890 00f8 	ldrb.w	r0, [r0, #248]	; 0xf8
   15d52:	f010 0040 	ands.w	r0, r0, #64	; 0x40
   15d56:	d110      	bne.n	15d7a <ll_start_enc_req_send+0x40>
			if (conn->llcp_req != conn->llcp_ack) {
   15d58:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
   15d5c:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
   15d60:	4293      	cmp	r3, r2
   15d62:	d1f1      	bne.n	15d48 <ll_start_enc_req_send+0xe>
			conn->llcp_req++;
   15d64:	3301      	adds	r3, #1
			conn->llcp_type = LLCP_ENCRYPTION;
   15d66:	2203      	movs	r2, #3
			conn->llcp.encryption.error_code = error_code;
   15d68:	f884 5079 	strb.w	r5, [r4, #121]	; 0x79
			conn->llcp.encryption.initiate = 0;
   15d6c:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
			conn->llcp_req++;
   15d70:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
			conn->llcp_type = LLCP_ENCRYPTION;
   15d74:	f884 2076 	strb.w	r2, [r4, #118]	; 0x76
   15d78:	bd70      	pop	{r4, r5, r6, pc}
			if (conn->llcp_terminate.ack !=
   15d7a:	f894 20b1 	ldrb.w	r2, [r4, #177]	; 0xb1
   15d7e:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
   15d82:	4293      	cmp	r3, r2
   15d84:	d1e0      	bne.n	15d48 <ll_start_enc_req_send+0xe>
			conn->llcp_terminate.req++;
   15d86:	3301      	adds	r3, #1
			conn->llcp_terminate.reason_own = error_code;
   15d88:	f884 50b2 	strb.w	r5, [r4, #178]	; 0xb2
			conn->llcp_terminate.req++;
   15d8c:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
	return 0;
   15d90:	2000      	movs	r0, #0
   15d92:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(&conn->llcp.encryption.ltk[0], ltk,
   15d94:	2210      	movs	r2, #16
   15d96:	4631      	mov	r1, r6
   15d98:	3084      	adds	r0, #132	; 0x84
   15d9a:	f7ea fcfa 	bl	792 <memcpy>
		if (conn->llcp_req != conn->llcp_ack) {
   15d9e:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
   15da2:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
   15da6:	4293      	cmp	r3, r2
   15da8:	d1ce      	bne.n	15d48 <ll_start_enc_req_send+0xe>
		conn->llcp_type = LLCP_ENCRYPTION;
   15daa:	2203      	movs	r2, #3
		conn->llcp_req++;
   15dac:	3301      	adds	r3, #1
		conn->llcp.encryption.error_code = 0;
   15dae:	f884 5079 	strb.w	r5, [r4, #121]	; 0x79
		conn->llcp.encryption.initiate = 0;
   15db2:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_ENCRYPTION;
   15db6:	f884 2076 	strb.w	r2, [r4, #118]	; 0x76
		conn->llcp_req++;
   15dba:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
   15dbe:	e7e7      	b.n	15d90 <ll_start_enc_req_send+0x56>

00015dc0 <ll_feature_req_send>:
{
   15dc0:	b508      	push	{r3, lr}
	conn = connection_get(handle);
   15dc2:	f7f8 fdab 	bl	e91c <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   15dc6:	b168      	cbz	r0, 15de4 <ll_feature_req_send+0x24>
   15dc8:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   15dcc:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   15dd0:	4293      	cmp	r3, r2
   15dd2:	d107      	bne.n	15de4 <ll_feature_req_send+0x24>
	conn->llcp_req++;
   15dd4:	3301      	adds	r3, #1
	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
   15dd6:	2204      	movs	r2, #4
	conn->llcp_req++;
   15dd8:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
   15ddc:	f880 2076 	strb.w	r2, [r0, #118]	; 0x76
	return 0;
   15de0:	2000      	movs	r0, #0
   15de2:	bd08      	pop	{r3, pc}
		return 1;
   15de4:	2001      	movs	r0, #1
}
   15de6:	bd08      	pop	{r3, pc}

00015de8 <ll_version_ind_send>:
{
   15de8:	b508      	push	{r3, lr}
	conn = connection_get(handle);
   15dea:	f7f8 fd97 	bl	e91c <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   15dee:	b168      	cbz	r0, 15e0c <ll_version_ind_send+0x24>
   15df0:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   15df4:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   15df8:	4293      	cmp	r3, r2
   15dfa:	d107      	bne.n	15e0c <ll_version_ind_send+0x24>
	conn->llcp_req++;
   15dfc:	3301      	adds	r3, #1
	conn->llcp_type = LLCP_VERSION_EXCHANGE;
   15dfe:	2205      	movs	r2, #5
	conn->llcp_req++;
   15e00:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
	conn->llcp_type = LLCP_VERSION_EXCHANGE;
   15e04:	f880 2076 	strb.w	r2, [r0, #118]	; 0x76
	return 0;
   15e08:	2000      	movs	r0, #0
   15e0a:	bd08      	pop	{r3, pc}
		return 1;
   15e0c:	2001      	movs	r0, #1
}
   15e0e:	bd08      	pop	{r3, pc}

00015e10 <ll_terminate_ind_send>:
{
   15e10:	b510      	push	{r4, lr}
   15e12:	460c      	mov	r4, r1
	conn = connection_get(handle);
   15e14:	f7f8 fd82 	bl	e91c <connection_get>
	if (!conn || (conn->llcp_terminate.ack != conn->llcp_terminate.req)) {
   15e18:	b160      	cbz	r0, 15e34 <ll_terminate_ind_send+0x24>
   15e1a:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
   15e1e:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
   15e22:	4293      	cmp	r3, r2
   15e24:	d106      	bne.n	15e34 <ll_terminate_ind_send+0x24>
	conn->llcp_terminate.req++;
   15e26:	3301      	adds	r3, #1
	conn->llcp_terminate.reason_own = reason;
   15e28:	f880 40b2 	strb.w	r4, [r0, #178]	; 0xb2
	conn->llcp_terminate.req++;
   15e2c:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
	return 0;
   15e30:	2000      	movs	r0, #0
   15e32:	bd10      	pop	{r4, pc}
		return 1;
   15e34:	2001      	movs	r0, #1
}
   15e36:	bd10      	pop	{r4, pc}

00015e38 <ll_tx_pwr_lvl_get>:
{
   15e38:	b510      	push	{r4, lr}
   15e3a:	4614      	mov	r4, r2
	conn = connection_get(handle);
   15e3c:	f7f8 fd6e 	bl	e91c <connection_get>
	if (!conn) {
   15e40:	b110      	cbz	r0, 15e48 <ll_tx_pwr_lvl_get+0x10>
	*tx_pwr_lvl = 0;
   15e42:	2000      	movs	r0, #0
   15e44:	7020      	strb	r0, [r4, #0]
	return 0;
   15e46:	bd10      	pop	{r4, pc}
		return 1;
   15e48:	2001      	movs	r0, #1
}
   15e4a:	bd10      	pop	{r4, pc}

00015e4c <ll_apto_get>:
{
   15e4c:	b510      	push	{r4, lr}
   15e4e:	460c      	mov	r4, r1
	conn = connection_get(handle);
   15e50:	f7f8 fd64 	bl	e91c <connection_get>
	if (!conn) {
   15e54:	b160      	cbz	r0, 15e70 <ll_apto_get+0x24>
	*apto = conn->apto_reload * conn->conn_interval * 125 / 1000;
   15e56:	8c83      	ldrh	r3, [r0, #36]	; 0x24
   15e58:	f8b0 204a 	ldrh.w	r2, [r0, #74]	; 0x4a
   15e5c:	435a      	muls	r2, r3
   15e5e:	237d      	movs	r3, #125	; 0x7d
   15e60:	4353      	muls	r3, r2
	return 0;
   15e62:	2000      	movs	r0, #0
	*apto = conn->apto_reload * conn->conn_interval * 125 / 1000;
   15e64:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   15e68:	fb93 f3f2 	sdiv	r3, r3, r2
   15e6c:	8023      	strh	r3, [r4, #0]
	return 0;
   15e6e:	bd10      	pop	{r4, pc}
		return 1;
   15e70:	2001      	movs	r0, #1
}
   15e72:	bd10      	pop	{r4, pc}

00015e74 <ll_apto_set>:
{
   15e74:	b510      	push	{r4, lr}
   15e76:	460c      	mov	r4, r1
	conn = connection_get(handle);
   15e78:	f7f8 fd50 	bl	e91c <connection_get>
	if (!conn) {
   15e7c:	b170      	cbz	r0, 15e9c <ll_apto_set+0x28>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10 * 1000,
   15e7e:	8c82      	ldrh	r2, [r0, #36]	; 0x24
   15e80:	f240 43e2 	movw	r3, #1250	; 0x4e2
   15e84:	4353      	muls	r3, r2
   15e86:	f242 7110 	movw	r1, #10000	; 0x2710
   15e8a:	fb01 3404 	mla	r4, r1, r4, r3
   15e8e:	3c01      	subs	r4, #1
   15e90:	fb94 f4f3 	sdiv	r4, r4, r3
   15e94:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
	return 0;
   15e98:	2000      	movs	r0, #0
   15e9a:	bd10      	pop	{r4, pc}
		return 1;
   15e9c:	2001      	movs	r0, #1
}
   15e9e:	bd10      	pop	{r4, pc}

00015ea0 <ll_length_req_send>:
{
   15ea0:	b570      	push	{r4, r5, r6, lr}
   15ea2:	460e      	mov	r6, r1
   15ea4:	4615      	mov	r5, r2
	conn = connection_get(handle);
   15ea6:	f7f8 fd39 	bl	e91c <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   15eaa:	b1d0      	cbz	r0, 15ee2 <ll_length_req_send+0x42>
   15eac:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   15eb0:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   15eb4:	429a      	cmp	r2, r3
   15eb6:	d114      	bne.n	15ee2 <ll_length_req_send+0x42>
	    (conn->llcp_length.req != conn->llcp_length.ack)) {
   15eb8:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   15ebc:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   15ec0:	4293      	cmp	r3, r2
   15ec2:	d10e      	bne.n	15ee2 <ll_length_req_send+0x42>
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   15ec4:	f890 40ea 	ldrb.w	r4, [r0, #234]	; 0xea
	conn->llcp_length.tx_octets = tx_octets;
   15ec8:	f8a0 60ee 	strh.w	r6, [r0, #238]	; 0xee
	conn->llcp_length.req++;
   15ecc:	3301      	adds	r3, #1
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   15ece:	f36f 0401 	bfc	r4, #0, #2
	conn->llcp_length.req++;
   15ed2:	f880 30e8 	strb.w	r3, [r0, #232]	; 0xe8
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   15ed6:	f880 40ea 	strb.w	r4, [r0, #234]	; 0xea
	conn->llcp_length.tx_time = tx_time;
   15eda:	f8a0 50f2 	strh.w	r5, [r0, #242]	; 0xf2
	return 0;
   15ede:	2000      	movs	r0, #0
   15ee0:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   15ee2:	2001      	movs	r0, #1
}
   15ee4:	bd70      	pop	{r4, r5, r6, pc}
	...

00015ee8 <ll_length_default_get>:
	*max_tx_octets = _radio.default_tx_octets;
   15ee8:	4b03      	ldr	r3, [pc, #12]	; (15ef8 <ll_length_default_get+0x10>)
   15eea:	f8b3 272a 	ldrh.w	r2, [r3, #1834]	; 0x72a
   15eee:	8002      	strh	r2, [r0, #0]
	*max_tx_time = _radio.default_tx_time;
   15ef0:	f8b3 372c 	ldrh.w	r3, [r3, #1836]	; 0x72c
   15ef4:	800b      	strh	r3, [r1, #0]
   15ef6:	4770      	bx	lr
   15ef8:	20000bf0 	.word	0x20000bf0

00015efc <ll_length_default_set>:
	_radio.default_tx_octets = max_tx_octets;
   15efc:	4b03      	ldr	r3, [pc, #12]	; (15f0c <ll_length_default_set+0x10>)
   15efe:	f8a3 072a 	strh.w	r0, [r3, #1834]	; 0x72a
	_radio.default_tx_time = max_tx_time;
   15f02:	f8a3 172c 	strh.w	r1, [r3, #1836]	; 0x72c
}
   15f06:	2000      	movs	r0, #0
   15f08:	4770      	bx	lr
   15f0a:	bf00      	nop
   15f0c:	20000bf0 	.word	0x20000bf0

00015f10 <ll_length_max_get>:
{
   15f10:	b510      	push	{r4, lr}
	*max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   15f12:	241b      	movs	r4, #27
   15f14:	8004      	strh	r4, [r0, #0]
	*max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   15f16:	f44f 6029 	mov.w	r0, #2704	; 0xa90
   15f1a:	8008      	strh	r0, [r1, #0]
	*max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   15f1c:	8014      	strh	r4, [r2, #0]
	*max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   15f1e:	8018      	strh	r0, [r3, #0]
   15f20:	bd10      	pop	{r4, pc}

00015f22 <ll_phy_get>:
{
   15f22:	b538      	push	{r3, r4, r5, lr}
   15f24:	460d      	mov	r5, r1
   15f26:	4614      	mov	r4, r2
	conn = connection_get(handle);
   15f28:	f7f8 fcf8 	bl	e91c <connection_get>
	if (!conn) {
   15f2c:	b158      	cbz	r0, 15f46 <ll_phy_get+0x24>
	*tx = conn->phy_tx;
   15f2e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   15f32:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   15f36:	702b      	strb	r3, [r5, #0]
	*rx = conn->phy_rx;
   15f38:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
   15f3c:	f3c3 0302 	ubfx	r3, r3, #0, #3
   15f40:	7023      	strb	r3, [r4, #0]
	return 0;
   15f42:	2000      	movs	r0, #0
   15f44:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
   15f46:	2001      	movs	r0, #1
}
   15f48:	bd38      	pop	{r3, r4, r5, pc}
	...

00015f4c <ll_phy_default_set>:
	_radio.default_phy_tx = tx;
   15f4c:	4b03      	ldr	r3, [pc, #12]	; (15f5c <ll_phy_default_set+0x10>)
   15f4e:	f8a3 072e 	strh.w	r0, [r3, #1838]	; 0x72e
	_radio.default_phy_rx = rx;
   15f52:	f8a3 1730 	strh.w	r1, [r3, #1840]	; 0x730
}
   15f56:	2000      	movs	r0, #0
   15f58:	4770      	bx	lr
   15f5a:	bf00      	nop
   15f5c:	20000bf0 	.word	0x20000bf0

00015f60 <ll_phy_req_send>:
{
   15f60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15f64:	4689      	mov	r9, r1
   15f66:	4690      	mov	r8, r2
   15f68:	461f      	mov	r7, r3
	conn = connection_get(handle);
   15f6a:	f7f8 fcd7 	bl	e91c <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   15f6e:	b320      	cbz	r0, 15fba <ll_phy_req_send+0x5a>
   15f70:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   15f74:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   15f78:	429a      	cmp	r2, r3
   15f7a:	d11e      	bne.n	15fba <ll_phy_req_send+0x5a>
	    (conn->llcp_phy.req != conn->llcp_phy.ack)) {
   15f7c:	f890 30f4 	ldrb.w	r3, [r0, #244]	; 0xf4
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   15f80:	f890 50f5 	ldrb.w	r5, [r0, #245]	; 0xf5
   15f84:	429d      	cmp	r5, r3
   15f86:	d118      	bne.n	15fba <ll_phy_req_send+0x5a>
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   15f88:	f890 40f6 	ldrb.w	r4, [r0, #246]	; 0xf6
	conn->llcp_phy.cmd = 1;
   15f8c:	f890 60f7 	ldrb.w	r6, [r0, #247]	; 0xf7
	conn->llcp_phy.tx = tx;
   15f90:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
   15f94:	f369 0484 	bfi	r4, r9, #2, #3
	conn->llcp_phy.flags = flags;
   15f98:	f046 0102 	orr.w	r1, r6, #2
   15f9c:	f368 0100 	bfi	r1, r8, #0, #1
	conn->llcp_phy.rx = rx;
   15fa0:	4622      	mov	r2, r4
	conn->llcp_phy.req++;
   15fa2:	3501      	adds	r5, #1
	conn->llcp_phy.flags = flags;
   15fa4:	f880 10f7 	strb.w	r1, [r0, #247]	; 0xf7
	conn->llcp_phy.rx = rx;
   15fa8:	f367 1247 	bfi	r2, r7, #5, #3
	conn->llcp_phy.req++;
   15fac:	f880 50f4 	strb.w	r5, [r0, #244]	; 0xf4
	conn->llcp_phy.rx = rx;
   15fb0:	f880 20f6 	strb.w	r2, [r0, #246]	; 0xf6
	return 0;
   15fb4:	2000      	movs	r0, #0
   15fb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return 1;
   15fba:	2001      	movs	r0, #1
}
   15fbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00015fc0 <ll_rx_get>:
{
   15fc0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   15fc4:	4605      	mov	r5, r0
   15fc6:	4608      	mov	r0, r1
	if (_radio.link_rx_head != _radio.link_rx_tail) {
   15fc8:	4918      	ldr	r1, [pc, #96]	; (1602c <ll_rx_get+0x6c>)
   15fca:	f8d1 3754 	ldr.w	r3, [r1, #1876]	; 0x754
   15fce:	f8d1 2758 	ldr.w	r2, [r1, #1880]	; 0x758
   15fd2:	4293      	cmp	r3, r2
   15fd4:	460f      	mov	r7, r1
   15fd6:	d01f      	beq.n	16018 <ll_rx_get+0x58>
		_node_rx = _radio.link_rx_head->mem;
   15fd8:	f8d3 8004 	ldr.w	r8, [r3, #4]
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
   15fdc:	f201 717f 	addw	r1, r1, #1919	; 0x77f
   15fe0:	f898 2000 	ldrb.w	r2, [r8]
   15fe4:	f7f8 fc50 	bl	e888 <tx_cmplt_get>
		if (!cmplt) {
   15fe8:	4604      	mov	r4, r0
   15fea:	b9e0      	cbnz	r0, 16026 <ll_rx_get+0x66>
			first = _radio.packet_release_first;
   15fec:	ae02      	add	r6, sp, #8
   15fee:	f897 377f 	ldrb.w	r3, [r7, #1919]	; 0x77f
   15ff2:	f806 3d03 	strb.w	r3, [r6, #-3]!
				cmplt_curr = tx_cmplt_get(&h, &first,
   15ff6:	f897 2780 	ldrb.w	r2, [r7, #1920]	; 0x780
   15ffa:	4631      	mov	r1, r6
   15ffc:	f10d 0006 	add.w	r0, sp, #6
   16000:	f7f8 fc42 	bl	e888 <tx_cmplt_get>
				 (cmplt_prev != cmplt_curr));
   16004:	b934      	cbnz	r4, 16014 <ll_rx_get+0x54>
			} while ((cmplt_prev != 0) ||
   16006:	b928      	cbnz	r0, 16014 <ll_rx_get+0x54>
			*node_rx = _node_rx;
   16008:	f8c5 8000 	str.w	r8, [r5]
}
   1600c:	4620      	mov	r0, r4
   1600e:	b002      	add	sp, #8
   16010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
   16014:	4604      	mov	r4, r0
   16016:	e7ee      	b.n	15ff6 <ll_rx_get+0x36>
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
   16018:	f891 2780 	ldrb.w	r2, [r1, #1920]	; 0x780
   1601c:	f201 717f 	addw	r1, r1, #1919	; 0x77f
   16020:	f7f8 fc32 	bl	e888 <tx_cmplt_get>
   16024:	4604      	mov	r4, r0
		*node_rx = NULL;
   16026:	2300      	movs	r3, #0
   16028:	602b      	str	r3, [r5, #0]
   1602a:	e7ef      	b.n	1600c <ll_rx_get+0x4c>
   1602c:	20000bf0 	.word	0x20000bf0

00016030 <ll_rx_mem_release>:
{
   16030:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
			mem_release(_node_rx_free,
   16034:	4c1c      	ldr	r4, [pc, #112]	; (160a8 <ll_rx_mem_release+0x78>)
{
   16036:	4605      	mov	r5, r0
	_node_rx = *node_rx;
   16038:	6800      	ldr	r0, [r0, #0]
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   1603a:	f5a4 66e7 	sub.w	r6, r4, #1848	; 0x738
			mem_release(conn, &_radio.conn_free);
   1603e:	f1a4 0724 	sub.w	r7, r4, #36	; 0x24
	while (_node_rx) {
   16042:	b930      	cbnz	r0, 16052 <ll_rx_mem_release+0x22>
	*node_rx = _node_rx;
   16044:	6028      	str	r0, [r5, #0]
	packet_rx_allocate(0xff);
   16046:	20ff      	movs	r0, #255	; 0xff
}
   16048:	b002      	add	sp, #8
   1604a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	packet_rx_allocate(0xff);
   1604e:	f7f8 bb45 	b.w	e6dc <packet_rx_allocate>
		switch (_node_rx_free->hdr.type) {
   16052:	7902      	ldrb	r2, [r0, #4]
		_node_rx = _node_rx->hdr.onion.next;
   16054:	f8d0 8000 	ldr.w	r8, [r0]
   16058:	2a0c      	cmp	r2, #12
   1605a:	d807      	bhi.n	1606c <ll_rx_mem_release+0x3c>
   1605c:	2301      	movs	r3, #1
   1605e:	4093      	lsls	r3, r2
   16060:	f641 727e 	movw	r2, #8062	; 0x1f7e
   16064:	4213      	tst	r3, r2
   16066:	d110      	bne.n	1608a <ll_rx_mem_release+0x5a>
   16068:	061b      	lsls	r3, r3, #24
   1606a:	d413      	bmi.n	16094 <ll_rx_mem_release+0x64>
			LL_ASSERT(0);
   1606c:	4b0f      	ldr	r3, [pc, #60]	; (160ac <ll_rx_mem_release+0x7c>)
   1606e:	9301      	str	r3, [sp, #4]
   16070:	9300      	str	r3, [sp, #0]
   16072:	4a0f      	ldr	r2, [pc, #60]	; (160b0 <ll_rx_mem_release+0x80>)
   16074:	4b0f      	ldr	r3, [pc, #60]	; (160b4 <ll_rx_mem_release+0x84>)
   16076:	4910      	ldr	r1, [pc, #64]	; (160b8 <ll_rx_mem_release+0x88>)
   16078:	4810      	ldr	r0, [pc, #64]	; (160bc <ll_rx_mem_release+0x8c>)
   1607a:	f7ec f90b 	bl	2294 <printk>
   1607e:	4040      	eors	r0, r0
   16080:	f380 8811 	msr	BASEPRI, r0
   16084:	f04f 0004 	mov.w	r0, #4
   16088:	df02      	svc	2
			mem_release(_node_rx_free,
   1608a:	4621      	mov	r1, r4
			mem_release(conn, &_radio.conn_free);
   1608c:	f7f5 fbc1 	bl	b812 <mem_release>
{
   16090:	4640      	mov	r0, r8
   16092:	e7d6      	b.n	16042 <ll_rx_mem_release+0x12>
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   16094:	88c2      	ldrh	r2, [r0, #6]
   16096:	f8d6 0710 	ldr.w	r0, [r6, #1808]	; 0x710
   1609a:	f44f 71aa 	mov.w	r1, #340	; 0x154
   1609e:	f7f5 fbd3 	bl	b848 <mem_get>
			mem_release(conn, &_radio.conn_free);
   160a2:	4639      	mov	r1, r7
   160a4:	e7f2      	b.n	1608c <ll_rx_mem_release+0x5c>
   160a6:	bf00      	nop
   160a8:	20001328 	.word	0x20001328
   160ac:	00023dae 	.word	0x00023dae
   160b0:	00022d76 	.word	0x00022d76
   160b4:	00025eb2 	.word	0x00025eb2
   160b8:	000272d8 	.word	0x000272d8
   160bc:	00023fa5 	.word	0x00023fa5

000160c0 <do_radio_rx_fc_set>:
	if (req == ack) {
   160c0:	4291      	cmp	r1, r2
{
   160c2:	b510      	push	{r4, lr}
   160c4:	4b14      	ldr	r3, [pc, #80]	; (16118 <do_radio_rx_fc_set+0x58>)
	if (req == ack) {
   160c6:	d119      	bne.n	160fc <do_radio_rx_fc_set+0x3c>
		if (_radio.link_rx_head == _radio.link_rx_tail) {
   160c8:	f8d3 2758 	ldr.w	r2, [r3, #1880]	; 0x758
   160cc:	f8d3 4754 	ldr.w	r4, [r3, #1876]	; 0x754
   160d0:	4294      	cmp	r4, r2
   160d2:	d111      	bne.n	160f8 <do_radio_rx_fc_set+0x38>
			if (ack1 == 0) {
   160d4:	2900      	cmp	r1, #0
				ack1 = TRIPLE_BUFFER_SIZE;
   160d6:	bf14      	ite	ne
   160d8:	460a      	movne	r2, r1
   160da:	2203      	moveq	r2, #3
			_radio.fc_handle[--ack1] = handle;
   160dc:	3a01      	subs	r2, #1
   160de:	b2d2      	uxtb	r2, r2
   160e0:	eb03 0442 	add.w	r4, r3, r2, lsl #1
			_radio.fc_ack = ack1;
   160e4:	f883 2789 	strb.w	r2, [r3, #1929]	; 0x789
			if (req != _radio.fc_req) {
   160e8:	f893 2788 	ldrb.w	r2, [r3, #1928]	; 0x788
			_radio.fc_handle[--ack1] = handle;
   160ec:	f8a4 0782 	strh.w	r0, [r4, #1922]	; 0x782
			if (req != _radio.fc_req) {
   160f0:	4291      	cmp	r1, r2
   160f2:	d00f      	beq.n	16114 <do_radio_rx_fc_set+0x54>
				_radio.fc_ack = ack;
   160f4:	f883 1789 	strb.w	r1, [r3, #1929]	; 0x789
			return 1;
   160f8:	2001      	movs	r0, #1
   160fa:	bd10      	pop	{r4, pc}
	} else if (((req == 0) &&
   160fc:	b929      	cbnz	r1, 1610a <do_radio_rx_fc_set+0x4a>
   160fe:	f8b3 3786 	ldrh.w	r3, [r3, #1926]	; 0x786
				return 1;
   16102:	1a18      	subs	r0, r3, r0
   16104:	bf18      	it	ne
   16106:	2001      	movne	r0, #1
   16108:	bd10      	pop	{r4, pc}
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
   1610a:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   1610e:	f8b3 3780 	ldrh.w	r3, [r3, #1920]	; 0x780
   16112:	e7f6      	b.n	16102 <do_radio_rx_fc_set+0x42>
	return 0;
   16114:	2000      	movs	r0, #0
}
   16116:	bd10      	pop	{r4, pc}
   16118:	20000bf0 	.word	0x20000bf0

0001611c <radio_rx_fc_set>:
{
   1611c:	b430      	push	{r4, r5}
	if (_radio.fc_ena) {
   1611e:	4b14      	ldr	r3, [pc, #80]	; (16170 <radio_rx_fc_set+0x54>)
   16120:	f893 278a 	ldrb.w	r2, [r3, #1930]	; 0x78a
{
   16124:	460d      	mov	r5, r1
	if (_radio.fc_ena) {
   16126:	b302      	cbz	r2, 1616a <radio_rx_fc_set+0x4e>
		u8_t req = _radio.fc_req;
   16128:	f893 2788 	ldrb.w	r2, [r3, #1928]	; 0x788
   1612c:	b2d1      	uxtb	r1, r2
		u8_t ack = _radio.fc_ack;
   1612e:	f893 2789 	ldrb.w	r2, [r3, #1929]	; 0x789
		if (fc) {
   16132:	b135      	cbz	r5, 16142 <radio_rx_fc_set+0x26>
			if (handle != 0xffff) {
   16134:	f64f 73ff 	movw	r3, #65535	; 0xffff
   16138:	4298      	cmp	r0, r3
   1613a:	d016      	beq.n	1616a <radio_rx_fc_set+0x4e>
}
   1613c:	bc30      	pop	{r4, r5}
				return do_radio_rx_fc_set(handle, req, ack);
   1613e:	f7ff bfbf 	b.w	160c0 <do_radio_rx_fc_set>
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
   16142:	f8d3 0754 	ldr.w	r0, [r3, #1876]	; 0x754
   16146:	f8d3 4758 	ldr.w	r4, [r3, #1880]	; 0x758
   1614a:	42a0      	cmp	r0, r4
   1614c:	d10d      	bne.n	1616a <radio_rx_fc_set+0x4e>
   1614e:	4291      	cmp	r1, r2
   16150:	d00b      	beq.n	1616a <radio_rx_fc_set+0x4e>
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   16152:	f8d3 4758 	ldr.w	r4, [r3, #1880]	; 0x758
			_radio.fc_ack = req;
   16156:	f883 1789 	strb.w	r1, [r3, #1929]	; 0x789
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   1615a:	42a0      	cmp	r0, r4
   1615c:	d005      	beq.n	1616a <radio_rx_fc_set+0x4e>
			    (req == _radio.fc_req)) {
   1615e:	f893 0788 	ldrb.w	r0, [r3, #1928]	; 0x788
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   16162:	4281      	cmp	r1, r0
				_radio.fc_ack = ack;
   16164:	bf08      	it	eq
   16166:	f883 2789 	strbeq.w	r2, [r3, #1929]	; 0x789
}
   1616a:	2000      	movs	r0, #0
   1616c:	bc30      	pop	{r4, r5}
   1616e:	4770      	bx	lr
   16170:	20000bf0 	.word	0x20000bf0

00016174 <ll_tx_mem_acquire>:
	return mem_acquire(&_radio.pkt_tx_data_free);
   16174:	4801      	ldr	r0, [pc, #4]	; (1617c <ll_tx_mem_acquire+0x8>)
   16176:	f7f5 bb32 	b.w	b7de <mem_acquire>
   1617a:	bf00      	nop
   1617c:	2000135c 	.word	0x2000135c

00016180 <ll_tx_mem_release>:
	mem_release(node_tx, &_radio.pkt_tx_data_free);
   16180:	4901      	ldr	r1, [pc, #4]	; (16188 <ll_tx_mem_release+0x8>)
   16182:	f7f5 bb46 	b.w	b812 <mem_release>
   16186:	bf00      	nop
   16188:	2000135c 	.word	0x2000135c

0001618c <ll_tx_mem_enqueue>:

u32_t ll_tx_mem_enqueue(u16_t handle, void *node_tx)
{
   1618c:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t last;
	struct connection *conn;
	struct pdu_data *pdu_data;

	last = _radio.packet_tx_last + 1;
   1618e:	4d33      	ldr	r5, [pc, #204]	; (1625c <ll_tx_mem_enqueue+0xd0>)
   16190:	f895 477e 	ldrb.w	r4, [r5, #1918]	; 0x77e
	if (last == _radio.packet_tx_count) {
   16194:	f895 377c 	ldrb.w	r3, [r5, #1916]	; 0x77c
	last = _radio.packet_tx_last + 1;
   16198:	3401      	adds	r4, #1
{
   1619a:	b089      	sub	sp, #36	; 0x24
	last = _radio.packet_tx_last + 1;
   1619c:	b2e4      	uxtb	r4, r4
{
   1619e:	4607      	mov	r7, r0
   161a0:	460e      	mov	r6, r1
		last = 0;
   161a2:	42a3      	cmp	r3, r4
   161a4:	bf08      	it	eq
   161a6:	2400      	moveq	r4, #0
	}

	pdu_data = (void *)((struct radio_pdu_node_tx *)node_tx)->pdu_data;
	conn = connection_get(handle);
   161a8:	f7f8 fbb8 	bl	e91c <connection_get>
	if (!conn || (last == _radio.packet_tx_first)) {
   161ac:	2800      	cmp	r0, #0
   161ae:	d052      	beq.n	16256 <ll_tx_mem_enqueue+0xca>
   161b0:	f895 377d 	ldrb.w	r3, [r5, #1917]	; 0x77d
   161b4:	429c      	cmp	r4, r3
   161b6:	d04e      	beq.n	16256 <ll_tx_mem_enqueue+0xca>
		return 1;
	}

	LL_ASSERT(pdu_data->len <= (_radio.packet_tx_data_size -
   161b8:	f8b5 3770 	ldrh.w	r3, [r5, #1904]	; 0x770
   161bc:	7972      	ldrb	r2, [r6, #5]
   161be:	3b07      	subs	r3, #7
   161c0:	429a      	cmp	r2, r3
   161c2:	d90e      	bls.n	161e2 <ll_tx_mem_enqueue+0x56>
   161c4:	4b26      	ldr	r3, [pc, #152]	; (16260 <ll_tx_mem_enqueue+0xd4>)
   161c6:	9301      	str	r3, [sp, #4]
   161c8:	9300      	str	r3, [sp, #0]
   161ca:	4a26      	ldr	r2, [pc, #152]	; (16264 <ll_tx_mem_enqueue+0xd8>)
   161cc:	4b26      	ldr	r3, [pc, #152]	; (16268 <ll_tx_mem_enqueue+0xdc>)
   161ce:	4927      	ldr	r1, [pc, #156]	; (1626c <ll_tx_mem_enqueue+0xe0>)
   161d0:	4827      	ldr	r0, [pc, #156]	; (16270 <ll_tx_mem_enqueue+0xe4>)
				 RADIO_TICKER_USER_ID_APP,
				 RADIO_TICKER_ID_FIRST_CONNECTION +
				 conn->handle, 0, 0, 0, 0, 1, 0,
				 ticker_op_latency_cancelled,
				 (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   161d2:	f7ec f85f 	bl	2294 <printk>
   161d6:	4040      	eors	r0, r0
   161d8:	f380 8811 	msr	BASEPRI, r0
   161dc:	f04f 0004 	mov.w	r0, #4
   161e0:	df02      	svc	2
	_radio.pkt_tx[_radio.packet_tx_last].handle = handle;
   161e2:	f895 277e 	ldrb.w	r2, [r5, #1918]	; 0x77e
   161e6:	f8d5 3774 	ldr.w	r3, [r5, #1908]	; 0x774
   161ea:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
   161ee:	f823 7032 	strh.w	r7, [r3, r2, lsl #3]
	_radio.pkt_tx[_radio.packet_tx_last].node_tx = node_tx;
   161f2:	604e      	str	r6, [r1, #4]
	_radio.packet_tx_last = last;
   161f4:	f885 477e 	strb.w	r4, [r5, #1918]	; 0x77e
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
   161f8:	f990 301d 	ldrsb.w	r3, [r0, #29]
   161fc:	2b00      	cmp	r3, #0
   161fe:	db02      	blt.n	16206 <ll_tx_mem_enqueue+0x7a>
			  (ticker_status == TICKER_STATUS_BUSY));
	}

	return 0;
   16200:	2000      	movs	r0, #0
}
   16202:	b009      	add	sp, #36	; 0x24
   16204:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
   16206:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
   16208:	2b00      	cmp	r3, #0
   1620a:	d0f9      	beq.n	16200 <ll_tx_mem_enqueue+0x74>
   1620c:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
   16210:	f012 0302 	ands.w	r3, r2, #2
   16214:	d1f4      	bne.n	16200 <ll_tx_mem_enqueue+0x74>
		conn->slave.latency_cancel = 1;
   16216:	f042 0202 	orr.w	r2, r2, #2
   1621a:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
		ticker_status = ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   1621e:	f890 2020 	ldrb.w	r2, [r0, #32]
   16222:	4914      	ldr	r1, [pc, #80]	; (16274 <ll_tx_mem_enqueue+0xe8>)
   16224:	9105      	str	r1, [sp, #20]
   16226:	3207      	adds	r2, #7
   16228:	2101      	movs	r1, #1
   1622a:	9006      	str	r0, [sp, #24]
   1622c:	9304      	str	r3, [sp, #16]
   1622e:	9103      	str	r1, [sp, #12]
   16230:	9302      	str	r3, [sp, #8]
   16232:	9301      	str	r3, [sp, #4]
   16234:	9300      	str	r3, [sp, #0]
   16236:	4618      	mov	r0, r3
   16238:	b2d2      	uxtb	r2, r2
   1623a:	2103      	movs	r1, #3
   1623c:	f7f6 f9a8 	bl	c590 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   16240:	f030 0302 	bics.w	r3, r0, #2
   16244:	d0dc      	beq.n	16200 <ll_tx_mem_enqueue+0x74>
   16246:	4b06      	ldr	r3, [pc, #24]	; (16260 <ll_tx_mem_enqueue+0xd4>)
   16248:	9301      	str	r3, [sp, #4]
   1624a:	9300      	str	r3, [sp, #0]
   1624c:	4a05      	ldr	r2, [pc, #20]	; (16264 <ll_tx_mem_enqueue+0xd8>)
   1624e:	4b06      	ldr	r3, [pc, #24]	; (16268 <ll_tx_mem_enqueue+0xdc>)
   16250:	4906      	ldr	r1, [pc, #24]	; (1626c <ll_tx_mem_enqueue+0xe0>)
   16252:	4809      	ldr	r0, [pc, #36]	; (16278 <ll_tx_mem_enqueue+0xec>)
   16254:	e7bd      	b.n	161d2 <ll_tx_mem_enqueue+0x46>
		return 1;
   16256:	2001      	movs	r0, #1
   16258:	e7d3      	b.n	16202 <ll_tx_mem_enqueue+0x76>
   1625a:	bf00      	nop
   1625c:	20000bf0 	.word	0x20000bf0
   16260:	00023dae 	.word	0x00023dae
   16264:	00022d76 	.word	0x00022d76
   16268:	00025ee0 	.word	0x00025ee0
   1626c:	000272d8 	.word	0x000272d8
   16270:	00026516 	.word	0x00026516
   16274:	0000fb55 	.word	0x0000fb55
   16278:	00025f18 	.word	0x00025f18

0001627c <ll_enc_req_send>:
{
   1627c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   16280:	4607      	mov	r7, r0
   16282:	4688      	mov	r8, r1
   16284:	4616      	mov	r6, r2
   16286:	4699      	mov	r9, r3
	conn = connection_get(handle);
   16288:	f7f8 fb48 	bl	e91c <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   1628c:	4605      	mov	r5, r0
   1628e:	b910      	cbnz	r0, 16296 <ll_enc_req_send+0x1a>
			return 1;
   16290:	2001      	movs	r0, #1
   16292:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   16296:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   1629a:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   1629e:	429a      	cmp	r2, r3
   162a0:	d1f6      	bne.n	16290 <ll_enc_req_send+0x14>
	node_tx = ll_tx_mem_acquire();
   162a2:	f7ff ff67 	bl	16174 <ll_tx_mem_acquire>
	if (node_tx) {
   162a6:	4604      	mov	r4, r0
   162a8:	2800      	cmp	r0, #0
   162aa:	d0f1      	beq.n	16290 <ll_enc_req_send+0x14>
		memcpy(&conn->llcp.encryption.ltk[0], ltk,
   162ac:	2210      	movs	r2, #16
   162ae:	4649      	mov	r1, r9
   162b0:	f105 0084 	add.w	r0, r5, #132	; 0x84
   162b4:	f7ea fa6d 	bl	792 <memcpy>
		if ((conn->enc_rx == 0) && (conn->enc_tx == 0)) {
   162b8:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   162bc:	f013 0330 	ands.w	r3, r3, #48	; 0x30
   162c0:	d124      	bne.n	1630c <ll_enc_req_send+0x90>
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   162c2:	7923      	ldrb	r3, [r4, #4]
   162c4:	f043 0303 	orr.w	r3, r3, #3
   162c8:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len =
   162ca:	2317      	movs	r3, #23
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
   162cc:	2208      	movs	r2, #8
			pdu_data_tx->len =
   162ce:	7163      	strb	r3, [r4, #5]
			pdu_data_tx->llctrl.opcode =
   162d0:	2303      	movs	r3, #3
   162d2:	71e3      	strb	r3, [r4, #7]
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
   162d4:	4641      	mov	r1, r8
   162d6:	18a0      	adds	r0, r4, r2
   162d8:	f7ea fa5b 	bl	792 <memcpy>
			enc_req->ediv[0] = ediv[0];
   162dc:	7833      	ldrb	r3, [r6, #0]
   162de:	7423      	strb	r3, [r4, #16]
			enc_req->ediv[1] = ediv[1];
   162e0:	7873      	ldrb	r3, [r6, #1]
   162e2:	7463      	strb	r3, [r4, #17]
			bt_rand(enc_req->skdm, sizeof(enc_req->skdm));
   162e4:	2108      	movs	r1, #8
   162e6:	f104 0012 	add.w	r0, r4, #18
   162ea:	f7f6 faaf 	bl	c84c <bt_rand>
			bt_rand(enc_req->ivm, sizeof(enc_req->ivm));
   162ee:	2104      	movs	r1, #4
   162f0:	f104 001a 	add.w	r0, r4, #26
   162f4:	f7f6 faaa 	bl	c84c <bt_rand>
		if (ll_tx_mem_enqueue(handle, node_tx)) {
   162f8:	4621      	mov	r1, r4
   162fa:	4638      	mov	r0, r7
   162fc:	f7ff ff46 	bl	1618c <ll_tx_mem_enqueue>
   16300:	2601      	movs	r6, #1
   16302:	b1d0      	cbz	r0, 1633a <ll_enc_req_send+0xbe>
			ll_tx_mem_release(node_tx);
   16304:	4620      	mov	r0, r4
   16306:	f7ff ff3b 	bl	16180 <ll_tx_mem_release>
   1630a:	e7c1      	b.n	16290 <ll_enc_req_send+0x14>
		} else if ((conn->enc_rx != 0) && (conn->enc_tx != 0)) {
   1630c:	2b30      	cmp	r3, #48	; 0x30
   1630e:	d1f9      	bne.n	16304 <ll_enc_req_send+0x88>
			memcpy(&conn->llcp.encryption.rand[0], rand,
   16310:	2208      	movs	r2, #8
   16312:	4641      	mov	r1, r8
   16314:	f105 007a 	add.w	r0, r5, #122	; 0x7a
   16318:	f7ea fa3b 	bl	792 <memcpy>
			conn->llcp.encryption.ediv[0] = ediv[0];
   1631c:	7833      	ldrb	r3, [r6, #0]
   1631e:	f885 3082 	strb.w	r3, [r5, #130]	; 0x82
			conn->llcp.encryption.ediv[1] = ediv[1];
   16322:	7873      	ldrb	r3, [r6, #1]
   16324:	f885 3083 	strb.w	r3, [r5, #131]	; 0x83
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   16328:	7923      	ldrb	r3, [r4, #4]
   1632a:	f043 0303 	orr.w	r3, r3, #3
   1632e:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
   16330:	2301      	movs	r3, #1
   16332:	7163      	strb	r3, [r4, #5]
			pdu_data_tx->llctrl.opcode =
   16334:	230a      	movs	r3, #10
   16336:	71e3      	strb	r3, [r4, #7]
   16338:	e7de      	b.n	162f8 <ll_enc_req_send+0x7c>
		conn->llcp_type = LLCP_ENCRYPTION;
   1633a:	2303      	movs	r3, #3
   1633c:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
		conn->llcp_req++;
   16340:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
		conn->llcp.encryption.initiate = 1;
   16344:	f885 6078 	strb.w	r6, [r5, #120]	; 0x78
		conn->llcp_req++;
   16348:	3301      	adds	r3, #1
   1634a:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
}
   1634e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   16352:	0000      	movs	r0, r0
   16354:	0000      	movs	r0, r0
	...

00016358 <radio_adv_enable>:
{
   16358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1635c:	b093      	sub	sp, #76	; 0x4c
	if (_radio.advertiser.is_enabled) {
   1635e:	f8df 9514 	ldr.w	r9, [pc, #1300]	; 16874 <radio_adv_enable+0x51c>
{
   16362:	930b      	str	r3, [sp, #44]	; 0x2c
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   16364:	2302      	movs	r3, #2
   16366:	9311      	str	r3, [sp, #68]	; 0x44
	if (_radio.advertiser.is_enabled) {
   16368:	f999 3028 	ldrsb.w	r3, [r9, #40]	; 0x28
{
   1636c:	f89d 8074 	ldrb.w	r8, [sp, #116]	; 0x74
   16370:	f88d 203f 	strb.w	r2, [sp, #63]	; 0x3f
	if (_radio.advertiser.is_enabled) {
   16374:	2b00      	cmp	r3, #0
{
   16376:	4683      	mov	fp, r0
   16378:	468a      	mov	sl, r1
   1637a:	464e      	mov	r6, r9
	if (_radio.advertiser.is_enabled) {
   1637c:	da01      	bge.n	16382 <radio_adv_enable+0x2a>
	return BT_HCI_ERR_CMD_DISALLOWED;
   1637e:	200c      	movs	r0, #12
   16380:	e25c      	b.n	1683c <radio_adv_enable+0x4e4>
	pdu_adv = (void *)&_radio.advertiser.adv_data.data
   16382:	f899 722f 	ldrb.w	r7, [r9, #559]	; 0x22f
   16386:	eb07 2707 	add.w	r7, r7, r7, lsl #8
   1638a:	372c      	adds	r7, #44	; 0x2c
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
   1638c:	f819 3007 	ldrb.w	r3, [r9, r7]
   16390:	f003 030f 	and.w	r3, r3, #15
   16394:	2b01      	cmp	r3, #1
   16396:	f200 8149 	bhi.w	1662c <radio_adv_enable+0x2d4>
		if (_radio.advertiser.conn) {
   1639a:	f8d9 5638 	ldr.w	r5, [r9, #1592]	; 0x638
   1639e:	2d00      	cmp	r5, #0
   163a0:	d1ed      	bne.n	1637e <radio_adv_enable+0x26>
		link = mem_acquire(&_radio.link_rx_free);
   163a2:	f509 60ea 	add.w	r0, r9, #1872	; 0x750
   163a6:	f7f5 fa1a 	bl	b7de <mem_acquire>
		if (!link) {
   163aa:	900e      	str	r0, [sp, #56]	; 0x38
   163ac:	b158      	cbz	r0, 163c6 <radio_adv_enable+0x6e>
		conn = mem_acquire(&_radio.conn_free);
   163ae:	f209 7014 	addw	r0, r9, #1812	; 0x714
   163b2:	f7f5 fa14 	bl	b7de <mem_acquire>
		if (!conn) {
   163b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   163b8:	4604      	mov	r4, r0
   163ba:	b930      	cbnz	r0, 163ca <radio_adv_enable+0x72>
			mem_release(link, &_radio.link_rx_free);
   163bc:	f509 61ea 	add.w	r1, r9, #1872	; 0x750
   163c0:	4618      	mov	r0, r3
   163c2:	f7f5 fa26 	bl	b812 <mem_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   163c6:	2007      	movs	r0, #7
   163c8:	e238      	b.n	1683c <radio_adv_enable+0x4e4>
		conn->handle = 0xFFFF;
   163ca:	f64f 71ff 	movw	r1, #65535	; 0xffff
   163ce:	8401      	strh	r1, [r0, #32]
		conn->llcp_features = RADIO_BLE_FEAT;
   163d0:	f501 4194 	add.w	r1, r1, #18944	; 0x4a00
   163d4:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
		conn->data_chan_sel = 0;
   163d8:	7f41      	ldrb	r1, [r0, #29]
		conn->data_chan_use = 0;
   163da:	77c5      	strb	r5, [r0, #31]
		conn->data_chan_sel = 0;
   163dc:	f365 1186 	bfi	r1, r5, #6, #1
   163e0:	7741      	strb	r1, [r0, #29]
		conn->default_tx_octets = _radio.default_tx_octets;
   163e2:	f8b9 172a 	ldrh.w	r1, [r9, #1834]	; 0x72a
   163e6:	8581      	strh	r1, [r0, #44]	; 0x2c
		conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   163e8:	211b      	movs	r1, #27
   163ea:	85c1      	strh	r1, [r0, #46]	; 0x2e
		conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   163ec:	8601      	strh	r1, [r0, #48]	; 0x30
		conn->default_tx_time = _radio.default_tx_time;
   163ee:	f8b9 172c 	ldrh.w	r1, [r9, #1836]	; 0x72c
   163f2:	8641      	strh	r1, [r0, #50]	; 0x32
		conn->max_tx_time =
   163f4:	f44f 71a4 	mov.w	r1, #328	; 0x148
   163f8:	8681      	strh	r1, [r0, #52]	; 0x34
		conn->max_rx_time =
   163fa:	86c1      	strh	r1, [r0, #54]	; 0x36
		conn->event_counter = 0;
   163fc:	8445      	strh	r5, [r0, #34]	; 0x22
		conn->latency_prepare = 0;
   163fe:	8505      	strh	r5, [r0, #40]	; 0x28
		conn->latency_event = 0;
   16400:	8545      	strh	r5, [r0, #42]	; 0x2a
		conn->phy_pref_tx = _radio.default_phy_tx;
   16402:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
   16406:	f8b9 072e 	ldrh.w	r0, [r9, #1838]	; 0x72e
   1640a:	f360 0102 	bfi	r1, r0, #0, #3
		conn->phy_tx = BIT(0);
   1640e:	2001      	movs	r0, #1
   16410:	f360 01c5 	bfi	r1, r0, #3, #3
		conn->phy_pref_flags = 0;
   16414:	f365 1186 	bfi	r1, r5, #6, #1
		conn->phy_flags = 0;
   16418:	f365 11c7 	bfi	r1, r5, #7, #1
   1641c:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
		conn->phy_tx_time = BIT(0);
   16420:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
   16424:	f360 0102 	bfi	r1, r0, #0, #3
   16428:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
		conn->phy_pref_rx = _radio.default_phy_rx;
   1642c:	f8b9 e730 	ldrh.w	lr, [r9, #1840]	; 0x730
		conn->slave.window_widening_prepare_us = 0;
   16430:	65e5      	str	r5, [r4, #92]	; 0x5c
		conn->phy_pref_rx = _radio.default_phy_rx;
   16432:	b2c9      	uxtb	r1, r1
   16434:	f36e 01c5 	bfi	r1, lr, #3, #3
   16438:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
		conn->phy_rx = BIT(0);
   1643c:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
		conn->slave.window_widening_event_us = 0;
   16440:	6625      	str	r5, [r4, #96]	; 0x60
		conn->phy_rx = BIT(0);
   16442:	f360 0102 	bfi	r1, r0, #0, #3
   16446:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
		conn->role = 1;
   1644a:	7f61      	ldrb	r1, [r4, #29]
   1644c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   16450:	7761      	strb	r1, [r4, #29]
		conn->connect_expire = 6;
   16452:	2106      	movs	r1, #6
   16454:	87a1      	strh	r1, [r4, #60]	; 0x3c
		conn->common.fex_valid = 0;
   16456:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
   1645a:	f365 1145 	bfi	r1, r5, #5, #1
		conn->slave.latency_enabled = 0;
   1645e:	f365 0100 	bfi	r1, r5, #0, #1
		conn->slave.latency_cancel = 0;
   16462:	f365 0141 	bfi	r1, r5, #1, #1
   16466:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
		conn->slave.ticks_to_offset = 0;
   1646a:	6725      	str	r5, [r4, #112]	; 0x70
		conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
   1646c:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
		conn->llcp_conn_param.disabled = 0;
   16470:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
		conn->llcp_version.tx = 0;
   16474:	f894 10a8 	ldrb.w	r1, [r4, #168]	; 0xa8
		conn->supervision_expire = 0;
   16478:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
		conn->llcp_conn_param.disabled = 0;
   1647c:	f365 1304 	bfi	r3, r5, #4, #1
   16480:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
		conn->sn = 0;
   16484:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
		conn->procedure_expire = 0;
   16488:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
		conn->sn = 0;
   1648c:	f365 0300 	bfi	r3, r5, #0, #1
		conn->nesn = 0;
   16490:	f365 0341 	bfi	r3, r5, #1, #1
		conn->pause_rx = 0;
   16494:	f365 0382 	bfi	r3, r5, #2, #1
		conn->pause_tx = 0;
   16498:	f365 03c3 	bfi	r3, r5, #3, #1
		conn->enc_rx = 0;
   1649c:	f365 1304 	bfi	r3, r5, #4, #1
		conn->enc_tx = 0;
   164a0:	f365 1345 	bfi	r3, r5, #5, #1
		conn->llcp_version.tx = 0;
   164a4:	f365 0100 	bfi	r1, r5, #0, #1
		conn->refresh = 0;
   164a8:	f365 1386 	bfi	r3, r5, #6, #1
		conn->llcp_version.rx = 0;
   164ac:	f365 0141 	bfi	r1, r5, #1, #1
		conn->empty = 0;
   164b0:	f365 13c7 	bfi	r3, r5, #7, #1
		conn->apto_expire = 0;
   164b4:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
		conn->appto_expire = 0;
   164b8:	f8a4 5048 	strh.w	r5, [r4, #72]	; 0x48
		conn->llcp_req = 0;
   164bc:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
		conn->llcp_ack = 0;
   164c0:	f884 5075 	strb.w	r5, [r4, #117]	; 0x75
		conn->llcp_version.rx = 0;
   164c4:	f884 10a8 	strb.w	r1, [r4, #168]	; 0xa8
		conn->llcp_terminate.req = 0;
   164c8:	f884 50b0 	strb.w	r5, [r4, #176]	; 0xb0
		conn->llcp_terminate.ack = 0;
   164cc:	f884 50b1 	strb.w	r5, [r4, #177]	; 0xb1
		conn->llcp_terminate.reason_peer = 0;
   164d0:	f884 50b3 	strb.w	r5, [r4, #179]	; 0xb3
		conn->llcp_conn_param.req = 0;
   164d4:	f884 50c0 	strb.w	r5, [r4, #192]	; 0xc0
		conn->llcp_conn_param.ack = 0;
   164d8:	f884 50c1 	strb.w	r5, [r4, #193]	; 0xc1
		conn->llcp_length.req = 0;
   164dc:	f884 50e8 	strb.w	r5, [r4, #232]	; 0xe8
		conn->llcp_length.ack = 0;
   164e0:	f884 50e9 	strb.w	r5, [r4, #233]	; 0xe9
		conn->llcp_phy.req = 0;
   164e4:	f884 50f4 	strb.w	r5, [r4, #244]	; 0xf4
		conn->llcp_phy.ack = 0;
   164e8:	f884 50f5 	strb.w	r5, [r4, #245]	; 0xf5
		conn->empty = 0;
   164ec:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
		conn->pkt_tx_head = NULL;
   164f0:	f8c4 513c 	str.w	r5, [r4, #316]	; 0x13c
		conn->pkt_tx_ctrl = NULL;
   164f4:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
		conn->pkt_tx_ctrl_last = NULL;
   164f8:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
		conn->pkt_tx_data = NULL;
   164fc:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
		conn->pkt_tx_last = NULL;
   16500:	f8c4 514c 	str.w	r5, [r4, #332]	; 0x14c
		conn->packet_tx_head_len = 0;
   16504:	f884 5150 	strb.w	r5, [r4, #336]	; 0x150
		conn->packet_tx_head_offset = 0;
   16508:	f884 5151 	strb.w	r5, [r4, #337]	; 0x151
		_radio.advertiser.conn = conn;
   1650c:	f8c9 4638 	str.w	r4, [r9, #1592]	; 0x638
	_radio.advertiser.chan_map = chan_map;							//chan_map
   16510:	a812      	add	r0, sp, #72	; 0x48
	_radio.advertiser.phy_p = phy_p; 								//set phy_p
   16512:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
	_radio.advertiser.chan_map = chan_map;							//chan_map
   16516:	f810 1d09 	ldrb.w	r1, [r0, #-9]!
	_radio.advertiser.phy_p = phy_p; 								//set phy_p
   1651a:	f36b 0343 	bfi	r3, fp, #1, #3
	_radio.advertiser.chan_map = chan_map;							//chan_map
   1651e:	f361 1306 	bfi	r3, r1, #4, #3
   16522:	f886 3029 	strb.w	r3, [r6, #41]	; 0x29
	_radio.advertiser.filter_policy = filter_policy;				//filter plicy
   16526:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   16528:	f896 302a 	ldrb.w	r3, [r6, #42]	; 0x2a
   1652c:	f362 0301 	bfi	r3, r2, #0, #2
   16530:	f886 302a 	strb.w	r3, [r6, #42]	; 0x2a
	_radio.advertiser.rl_idx = rl_idx;								//rl_idx
   16534:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
   16538:	f886 302b 	strb.w	r3, [r6, #43]	; 0x2b
	_radio.advertiser.hdr.ticks_active_to_start =
   1653c:	f8d6 378c 	ldr.w	r3, [r6, #1932]	; 0x78c
   16540:	61f3      	str	r3, [r6, #28]
	_radio.advertiser.hdr.ticks_xtal_to_start =
   16542:	2327      	movs	r3, #39	; 0x27
   16544:	61b3      	str	r3, [r6, #24]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
   16546:	2101      	movs	r1, #1
	_radio.advertiser.hdr.ticks_preempt_to_start =
   16548:	2300      	movs	r3, #0
   1654a:	6233      	str	r3, [r6, #32]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
   1654c:	f7f5 faf2 	bl	bb34 <util_ones_count_get>
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   16550:	f819 5007 	ldrb.w	r5, [r9, r7]
   16554:	f005 050f 	and.w	r5, r5, #15
   16558:	2d01      	cmp	r5, #1
   1655a:	d169      	bne.n	16630 <radio_adv_enable+0x2d8>
		slot_us = ((RADIO_TICKER_START_PART_US + 176 + 152 + 40) *
   1655c:	f44f 7327 	mov.w	r3, #668	; 0x29c
   16560:	4358      	muls	r0, r3
			   chan_cnt) - 40 + 352;
   16562:	f500 709c 	add.w	r0, r0, #312	; 0x138
	_radio.advertiser.hdr.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
   16566:	4fba      	ldr	r7, [pc, #744]	; (16850 <radio_adv_enable+0x4f8>)
   16568:	a3b7      	add	r3, pc, #732	; (adr r3, 16848 <radio_adv_enable+0x4f0>)
   1656a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1656e:	fba0 0107 	umull	r0, r1, r0, r7
   16572:	f7e9 fe91 	bl	298 <__aeabi_uldivmod>
	ticks_slot_offset =
   16576:	69f3      	ldr	r3, [r6, #28]
	_radio.advertiser.hdr.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
   16578:	6270      	str	r0, [r6, #36]	; 0x24
	ticks_slot_offset =
   1657a:	69b0      	ldr	r0, [r6, #24]
   1657c:	4283      	cmp	r3, r0
   1657e:	bf38      	it	cc
   16580:	4603      	movcc	r3, r0
   16582:	930b      	str	r3, [sp, #44]	; 0x2c
   16584:	46b9      	mov	r9, r7
	_radio.advertiser.is_hdcd = !interval &&
   16586:	f1ba 0f00 	cmp.w	sl, #0
   1658a:	d15e      	bne.n	1664a <radio_adv_enable+0x2f2>
   1658c:	1e6a      	subs	r2, r5, #1
   1658e:	4253      	negs	r3, r2
   16590:	4153      	adcs	r3, r2
   16592:	f896 5028 	ldrb.w	r5, [r6, #40]	; 0x28
   16596:	f363 1586 	bfi	r5, r3, #6, #1
   1659a:	f886 5028 	strb.w	r5, [r6, #40]	; 0x28
	if (_radio.advertiser.is_hdcd) {
   1659e:	f015 0540 	ands.w	r5, r5, #64	; 0x40
   165a2:	d05a      	beq.n	1665a <radio_adv_enable+0x302>
		u32_t ticks_now = ticker_ticks_now_get();
   165a4:	f7f6 f912 	bl	c7cc <ticker_ticks_now_get>
		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   165a8:	6a73      	ldr	r3, [r6, #36]	; 0x24
   165aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   165ac:	4ea9      	ldr	r6, [pc, #676]	; (16854 <radio_adv_enable+0x4fc>)
   165ae:	9607      	str	r6, [sp, #28]
   165b0:	441a      	add	r2, r3
   165b2:	4613      	mov	r3, r2
		u32_t ticks_now = ticker_ticks_now_get();
   165b4:	4607      	mov	r7, r0
		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   165b6:	4aa8      	ldr	r2, [pc, #672]	; (16858 <radio_adv_enable+0x500>)
   165b8:	9205      	str	r2, [sp, #20]
   165ba:	2000      	movs	r0, #0
   165bc:	ad11      	add	r5, sp, #68	; 0x44
   165be:	9304      	str	r3, [sp, #16]
   165c0:	e88d 0009 	stmia.w	sp, {r0, r3}
   165c4:	9508      	str	r5, [sp, #32]
   165c6:	9006      	str	r0, [sp, #24]
   165c8:	9003      	str	r0, [sp, #12]
   165ca:	9002      	str	r0, [sp, #8]
   165cc:	463b      	mov	r3, r7
   165ce:	2205      	movs	r2, #5
   165d0:	2103      	movs	r1, #3
   165d2:	f7f5 ff8d 	bl	c4f0 <ticker_start>
		if (ret == TICKER_STATUS_BUSY) {
   165d6:	2802      	cmp	r0, #2
   165d8:	d03b      	beq.n	16652 <radio_adv_enable+0x2fa>
		if (ret_cb != TICKER_STATUS_SUCCESS) {
   165da:	9811      	ldr	r0, [sp, #68]	; 0x44
   165dc:	b9c8      	cbnz	r0, 16612 <radio_adv_enable+0x2ba>
		ret_cb = TICKER_STATUS_BUSY;
   165de:	2302      	movs	r3, #2
   165e0:	9311      	str	r3, [sp, #68]	; 0x44
		ret =
   165e2:	4b9e      	ldr	r3, [pc, #632]	; (1685c <radio_adv_enable+0x504>)
   165e4:	9305      	str	r3, [sp, #20]
   165e6:	2203      	movs	r2, #3
   165e8:	f24a 33fe 	movw	r3, #41982	; 0xa3fe
   165ec:	9300      	str	r3, [sp, #0]
   165ee:	9508      	str	r5, [sp, #32]
   165f0:	9607      	str	r6, [sp, #28]
   165f2:	9006      	str	r0, [sp, #24]
   165f4:	9004      	str	r0, [sp, #16]
   165f6:	9003      	str	r0, [sp, #12]
   165f8:	9002      	str	r0, [sp, #8]
   165fa:	9001      	str	r0, [sp, #4]
   165fc:	463b      	mov	r3, r7
   165fe:	4611      	mov	r1, r2
		ret=	
   16600:	f7f5 ff76 	bl	c4f0 <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
   16604:	2802      	cmp	r0, #2
   16606:	f000 8105 	beq.w	16814 <radio_adv_enable+0x4bc>
	if (ret_cb == TICKER_STATUS_SUCCESS) {
   1660a:	9811      	ldr	r0, [sp, #68]	; 0x44
   1660c:	2800      	cmp	r0, #0
   1660e:	f000 8105 	beq.w	1681c <radio_adv_enable+0x4c4>
	if (conn) {
   16612:	2c00      	cmp	r4, #0
   16614:	f43f aeb3 	beq.w	1637e <radio_adv_enable+0x26>
		mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.
   16618:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1661c:	4990      	ldr	r1, [pc, #576]	; (16860 <radio_adv_enable+0x508>)
   1661e:	f7f5 f8f8 	bl	b812 <mem_release>
		mem_release(conn, &_radio.conn_free);
   16622:	4990      	ldr	r1, [pc, #576]	; (16864 <radio_adv_enable+0x50c>)
   16624:	4620      	mov	r0, r4
   16626:	f7f5 f8f4 	bl	b812 <mem_release>
   1662a:	e6a8      	b.n	1637e <radio_adv_enable+0x26>
		conn = NULL;
   1662c:	2400      	movs	r4, #0
   1662e:	e76f      	b.n	16510 <radio_adv_enable+0x1b8>
	} else if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
   16630:	2d02      	cmp	r5, #2
   16632:	d103      	bne.n	1663c <radio_adv_enable+0x2e4>
		slot_us = (RADIO_TICKER_START_PART_US + 376) * chan_cnt;
   16634:	f44f 7329 	mov.w	r3, #676	; 0x2a4
			   152 + 376) * chan_cnt;
   16638:	4358      	muls	r0, r3
   1663a:	e794      	b.n	16566 <radio_adv_enable+0x20e>
	else if (pdu_adv->type == PDU_ADV_TYPE_EXT_IND) {
   1663c:	2d07      	cmp	r5, #7
		slot_us = ((RADIO_TICKER_START_PART_US + 2120) * chan_cnt) ;  // 265byte =2120us
   1663e:	bf0c      	ite	eq
   16640:	f640 1374 	movweq	r3, #2420	; 0x974
			   152 + 376) * chan_cnt;
   16644:	f240 53fc 	movwne	r3, #1532	; 0x5fc
   16648:	e7f6      	b.n	16638 <radio_adv_enable+0x2e0>
   1664a:	2300      	movs	r3, #0
   1664c:	e7a1      	b.n	16592 <radio_adv_enable+0x23a>
				cpu_sleep();
   1664e:	f7f7 ff6b 	bl	e528 <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
   16652:	9b11      	ldr	r3, [sp, #68]	; 0x44
   16654:	2b02      	cmp	r3, #2
   16656:	d0fa      	beq.n	1664e <radio_adv_enable+0x2f6>
   16658:	e7bf      	b.n	165da <radio_adv_enable+0x282>
		u32_t ticks_now = ticker_ticks_now_get();
   1665a:	f7f6 f8b7 	bl	c7cc <ticker_ticks_now_get>
		if(((u64_t)interval * 625) <= 100000){
   1665e:	fa1f f28a 	uxth.w	r2, sl
   16662:	2300      	movs	r3, #0
		u32_t ticks_now = ticker_ticks_now_get();
   16664:	900e      	str	r0, [sp, #56]	; 0x38
		if(((u64_t)interval * 625) <= 100000){
   16666:	f240 2071 	movw	r0, #625	; 0x271
   1666a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   1666e:	fbaa 0100 	umull	r0, r1, sl, r0
   16672:	4a7d      	ldr	r2, [pc, #500]	; (16868 <radio_adv_enable+0x510>)
		_radio.ext_advertiser.max_skip = skip;
   16674:	f886 8688 	strb.w	r8, [r6, #1672]	; 0x688
		if(((u64_t)interval * 625) <= 100000){
   16678:	2300      	movs	r3, #0
   1667a:	428b      	cmp	r3, r1
   1667c:	bf08      	it	eq
   1667e:	4282      	cmpeq	r2, r0
   16680:	d30b      	bcc.n	1669a <radio_adv_enable+0x342>
		int calculation = max_skip / 5;
   16682:	2305      	movs	r3, #5
   16684:	fbb8 f3f3 	udiv	r3, r8, r3
			if(calculation >= 5){
   16688:	2b04      	cmp	r3, #4
   1668a:	f240 80a5 	bls.w	167d8 <radio_adv_enable+0x480>
				ticker_offset = 30 * (max_skip-5);
   1668e:	f1a8 0505 	sub.w	r5, r8, #5
				ticker_offset = 30 * (max_skip-1);
   16692:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
				ticker_offset = 30 * max_skip;
   16696:	006d      	lsls	r5, r5, #1
   16698:	b2ad      	uxth	r5, r5
		_radio.ext_advertiser.aux_pckt_time = ((((u64_t)interval * 625 ) ) * skip) + 10000; //(10005 * offset) ;
   1669a:	f240 2371 	movw	r3, #625	; 0x271
   1669e:	fb03 f708 	mul.w	r7, r3, r8
   166a2:	f242 7210 	movw	r2, #10000	; 0x2710
   166a6:	fb0a 2707 	mla	r7, sl, r7, r2
		_radio.ext_advertiser.prim_interval = (u64_t)interval * 625;
   166aa:	fb03 f30a 	mul.w	r3, r3, sl
		_radio.ext_advertiser.aux_pckt_time = ((((u64_t)interval * 625 ) ) * skip) + 10000; //(10005 * offset) ;
   166ae:	f8c6 767c 	str.w	r7, [r6, #1660]	; 0x67c
		_radio.ext_advertiser.prim_interval = (u64_t)interval * 625;
   166b2:	f8c6 3680 	str.w	r3, [r6, #1664]	; 0x680
		_radio.ext_advertiser.ticker_offset = 183 * (((u64_t)interval * 625 )/100000);
   166b6:	4a6c      	ldr	r2, [pc, #432]	; (16868 <radio_adv_enable+0x510>)
   166b8:	2300      	movs	r3, #0
   166ba:	f7e9 fded 	bl	298 <__aeabi_uldivmod>
   166be:	23b7      	movs	r3, #183	; 0xb7
   166c0:	4358      	muls	r0, r3
		pdu = (void *)_radio.advertiser.adv_data.data
   166c2:	f896 322e 	ldrb.w	r3, [r6, #558]	; 0x22e
		_radio.ext_advertiser.ticker_offset = 183 * (((u64_t)interval * 625 )/100000);
   166c6:	f8c6 06a4 	str.w	r0, [r6, #1700]	; 0x6a4
		size = pdu->len + 2;
   166ca:	eb03 2303 	add.w	r3, r3, r3, lsl #8
   166ce:	4433      	add	r3, r6
		_radio.ext_advertiser.chan_37 = (_radio.ext_advertiser.aux_pckt_time +(_radio.ext_advertiser.ticker_offset *max_skip ) );
   166d0:	fb00 7708 	mla	r7, r0, r8, r7
		size = pdu->len + 2;
   166d4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
		_radio.ext_advertiser.chan_37 = (_radio.ext_advertiser.aux_pckt_time +(_radio.ext_advertiser.ticker_offset *max_skip ) );
   166d8:	f8c6 7690 	str.w	r7, [r6, #1680]	; 0x690
		final_pckt_size = (size + 1 + 4 + 3)*8 ; 
   166dc:	00db      	lsls	r3, r3, #3
   166de:	3350      	adds	r3, #80	; 0x50
		_radio.ext_advertiser.chan_38 = ((_radio.ext_advertiser.aux_pckt_time +(_radio.ext_advertiser.ticker_offset *max_skip ) ) -((final_pckt_size + 50)));
   166e0:	f1a7 0232 	sub.w	r2, r7, #50	; 0x32
   166e4:	1ad2      	subs	r2, r2, r3
		_radio.ext_advertiser.chan_39 = ((_radio.ext_advertiser.aux_pckt_time +(_radio.ext_advertiser.ticker_offset *max_skip )) -(((final_pckt_size + 50)* 2))) ;
   166e6:	3332      	adds	r3, #50	; 0x32
   166e8:	eba7 0743 	sub.w	r7, r7, r3, lsl #1
		ret =
   166ec:	4b59      	ldr	r3, [pc, #356]	; (16854 <radio_adv_enable+0x4fc>)
		_radio.ext_advertiser.chan_38 = ((_radio.ext_advertiser.aux_pckt_time +(_radio.ext_advertiser.ticker_offset *max_skip ) ) -((final_pckt_size + 50)));
   166ee:	f8c6 2694 	str.w	r2, [r6, #1684]	; 0x694
		_radio.ext_advertiser.chan_39 = ((_radio.ext_advertiser.aux_pckt_time +(_radio.ext_advertiser.ticker_offset *max_skip )) -(((final_pckt_size + 50)* 2))) ;
   166f2:	f8c6 7698 	str.w	r7, [r6, #1688]	; 0x698
		ret =
   166f6:	f04f 0b00 	mov.w	fp, #0
   166fa:	9307      	str	r3, [sp, #28]
   166fc:	af11      	add	r7, sp, #68	; 0x44
   166fe:	4b56      	ldr	r3, [pc, #344]	; (16858 <radio_adv_enable+0x500>)
   16700:	9708      	str	r7, [sp, #32]
   16702:	f8cd b018 	str.w	fp, [sp, #24]
   16706:	9305      	str	r3, [sp, #20]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   16708:	6a73      	ldr	r3, [r6, #36]	; 0x24
   1670a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
				     HAL_TICKER_US_TO_TICKS(((u64_t)interval *				//ticks periodic
   1670c:	4857      	ldr	r0, [pc, #348]	; (1686c <radio_adv_enable+0x514>)
		ret =
   1670e:	f8cd b00c 	str.w	fp, [sp, #12]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   16712:	4413      	add	r3, r2
		ret =
   16714:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_US_TO_TICKS(((u64_t)interval *				//ticks periodic
   16716:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   16718:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		ret =
   1671a:	f8cd b008 	str.w	fp, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(((u64_t)interval *				//ticks periodic
   1671e:	fba3 0100 	umull	r0, r1, r3, r0
   16722:	2391      	movs	r3, #145	; 0x91
   16724:	fb03 1102 	mla	r1, r3, r2, r1
   16728:	a347      	add	r3, pc, #284	; (adr r3, 16848 <radio_adv_enable+0x4f0>)
   1672a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1672e:	f7e9 fdb3 	bl	298 <__aeabi_uldivmod>
		ret =
   16732:	9b0e      	ldr	r3, [sp, #56]	; 0x38
				     HAL_TICKER_US_TO_TICKS(((u64_t)interval *				//ticks periodic
   16734:	9001      	str	r0, [sp, #4]
		ret =
   16736:	f8cd b000 	str.w	fp, [sp]
   1673a:	2205      	movs	r2, #5
   1673c:	2103      	movs	r1, #3
   1673e:	4658      	mov	r0, fp
   16740:	f7f5 fed6 	bl	c4f0 <ticker_start>
		if (ret == TICKER_STATUS_BUSY) {
   16744:	2802      	cmp	r0, #2
   16746:	4b43      	ldr	r3, [pc, #268]	; (16854 <radio_adv_enable+0x4fc>)
   16748:	d05e      	beq.n	16808 <radio_adv_enable+0x4b0>
		if (ret_cb != TICKER_STATUS_SUCCESS) {
   1674a:	9e11      	ldr	r6, [sp, #68]	; 0x44
   1674c:	2e00      	cmp	r6, #0
   1674e:	f47f af60 	bne.w	16612 <radio_adv_enable+0x2ba>
		ret=	
   16752:	9307      	str	r3, [sp, #28]
   16754:	4b46      	ldr	r3, [pc, #280]	; (16870 <radio_adv_enable+0x518>)
   16756:	9305      	str	r3, [sp, #20]
				    HAL_TICKER_US_TO_TICKS(	ticks_slot_offset +			
   16758:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		ret=	
   1675a:	9708      	str	r7, [sp, #32]
		ret_cb = TICKER_STATUS_BUSY;
   1675c:	2202      	movs	r2, #2
				    HAL_TICKER_US_TO_TICKS(	ticks_slot_offset +			
   1675e:	f503 70bc 	add.w	r0, r3, #376	; 0x178
		ret_cb = TICKER_STATUS_BUSY;
   16762:	9211      	str	r2, [sp, #68]	; 0x44
				    HAL_TICKER_US_TO_TICKS(	ticks_slot_offset +			
   16764:	fba0 0109 	umull	r0, r1, r0, r9
   16768:	a337      	add	r3, pc, #220	; (adr r3, 16848 <radio_adv_enable+0x4f0>)
   1676a:	e9d3 2300 	ldrd	r2, r3, [r3]
		u8_t offset = skip + 1;
   1676e:	f108 0801 	add.w	r8, r8, #1
		ret=	
   16772:	9606      	str	r6, [sp, #24]
		u64_t aux_pckt_interval = (((u64_t)interval * 625) * offset);
   16774:	fa5f f888 	uxtb.w	r8, r8
				    HAL_TICKER_US_TO_TICKS(	ticks_slot_offset +			
   16778:	f7e9 fd8e 	bl	298 <__aeabi_uldivmod>
		u64_t aux_pckt_interval = (((u64_t)interval * 625) * offset);
   1677c:	fba8 ab0a 	umull	sl, fp, r8, sl
   16780:	f240 2171 	movw	r1, #625	; 0x271
   16784:	fbaa 2301 	umull	r2, r3, sl, r1
				    HAL_TICKER_US_TO_TICKS( aux_pckt_interval - ticker_offset ),			
   16788:	1b52      	subs	r2, r2, r5
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1678a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		u64_t aux_pckt_interval = (((u64_t)interval * 625) * offset);
   1678e:	fb01 330b 	mla	r3, r1, fp, r3
				    HAL_TICKER_US_TO_TICKS( aux_pckt_interval - ticker_offset ),			
   16792:	f163 0300 	sbc.w	r3, r3, #0
		ret=	
   16796:	9004      	str	r0, [sp, #16]
				    HAL_TICKER_US_TO_TICKS( aux_pckt_interval - ticker_offset ),			
   16798:	fba2 0109 	umull	r0, r1, r2, r9
   1679c:	fb09 1103 	mla	r1, r9, r3, r1
   167a0:	a329      	add	r3, pc, #164	; (adr r3, 16848 <radio_adv_enable+0x4f0>)
   167a2:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret=	
   167a6:	9603      	str	r6, [sp, #12]
   167a8:	9602      	str	r6, [sp, #8]
				    HAL_TICKER_US_TO_TICKS( aux_pckt_interval - ticker_offset ),			
   167aa:	f7e9 fd75 	bl	298 <__aeabi_uldivmod>
					HAL_TICKER_US_TO_TICKS(	_radio.ext_advertiser.aux_pckt_time  ),			//ticks periodic
   167ae:	4b31      	ldr	r3, [pc, #196]	; (16874 <radio_adv_enable+0x51c>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   167b0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ret=	
   167b4:	9001      	str	r0, [sp, #4]
					HAL_TICKER_US_TO_TICKS(	_radio.ext_advertiser.aux_pckt_time  ),			//ticks periodic
   167b6:	f8d3 067c 	ldr.w	r0, [r3, #1660]	; 0x67c
   167ba:	a323      	add	r3, pc, #140	; (adr r3, 16848 <radio_adv_enable+0x4f0>)
   167bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   167c0:	fba0 0109 	umull	r0, r1, r0, r9
   167c4:	f7e9 fd68 	bl	298 <__aeabi_uldivmod>
		ret=	
   167c8:	2203      	movs	r2, #3
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   167ca:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ret=	
   167ce:	9000      	str	r0, [sp, #0]
   167d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   167d2:	4611      	mov	r1, r2
   167d4:	4630      	mov	r0, r6
   167d6:	e713      	b.n	16600 <radio_adv_enable+0x2a8>
			}else if(calculation >= 4){
   167d8:	d102      	bne.n	167e0 <radio_adv_enable+0x488>
				ticker_offset = 30 * (max_skip-4);
   167da:	f1a8 0504 	sub.w	r5, r8, #4
   167de:	e758      	b.n	16692 <radio_adv_enable+0x33a>
			}else if(calculation >=3){
   167e0:	2b03      	cmp	r3, #3
   167e2:	d102      	bne.n	167ea <radio_adv_enable+0x492>
				ticker_offset = 30 * (max_skip-3);
   167e4:	f1a8 0503 	sub.w	r5, r8, #3
   167e8:	e753      	b.n	16692 <radio_adv_enable+0x33a>
			}else if(calculation >= 2){
   167ea:	2b02      	cmp	r3, #2
   167ec:	d102      	bne.n	167f4 <radio_adv_enable+0x49c>
				ticker_offset = 30 * (max_skip-2);
   167ee:	f1a8 0502 	sub.w	r5, r8, #2
   167f2:	e74e      	b.n	16692 <radio_adv_enable+0x33a>
			}else if(calculation >= 1){
   167f4:	2b01      	cmp	r3, #1
   167f6:	d102      	bne.n	167fe <radio_adv_enable+0x4a6>
				ticker_offset = 30 * (max_skip-1);
   167f8:	f108 35ff 	add.w	r5, r8, #4294967295	; 0xffffffff
   167fc:	e749      	b.n	16692 <radio_adv_enable+0x33a>
				ticker_offset = 30 * max_skip;
   167fe:	ebc8 1508 	rsb	r5, r8, r8, lsl #4
   16802:	e748      	b.n	16696 <radio_adv_enable+0x33e>
				cpu_sleep();
   16804:	f7f7 fe90 	bl	e528 <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
   16808:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1680a:	2a02      	cmp	r2, #2
   1680c:	d0fa      	beq.n	16804 <radio_adv_enable+0x4ac>
   1680e:	e79c      	b.n	1674a <radio_adv_enable+0x3f2>
			cpu_sleep();
   16810:	f7f7 fe8a 	bl	e528 <cpu_sleep>
		while (ret_cb == TICKER_STATUS_BUSY) {
   16814:	9b11      	ldr	r3, [sp, #68]	; 0x44
   16816:	2b02      	cmp	r3, #2
   16818:	d0fa      	beq.n	16810 <radio_adv_enable+0x4b8>
   1681a:	e6f6      	b.n	1660a <radio_adv_enable+0x2b2>
		_radio.advertiser.is_enabled = 1;
   1681c:	4b15      	ldr	r3, [pc, #84]	; (16874 <radio_adv_enable+0x51c>)
   1681e:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   16822:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   16826:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		if (!_radio.scanner.is_enabled) {
   1682a:	f893 364c 	ldrb.w	r3, [r3, #1612]	; 0x64c
   1682e:	f013 0401 	ands.w	r4, r3, #1
   16832:	d103      	bne.n	1683c <radio_adv_enable+0x4e4>
			ll_adv_scan_state_cb(BIT(0));
   16834:	2001      	movs	r0, #1
   16836:	f001 fba7 	bl	17f88 <ll_adv_scan_state_cb>
		return 0;
   1683a:	4620      	mov	r0, r4
}
   1683c:	b013      	add	sp, #76	; 0x4c
   1683e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16842:	bf00      	nop
   16844:	f3af 8000 	nop.w
   16848:	1afd498d 	.word	0x1afd498d
   1684c:	00000007 	.word	0x00000007
   16850:	3b9aca00 	.word	0x3b9aca00
   16854:	0000e56d 	.word	0x0000e56d
   16858:	00010ef9 	.word	0x00010ef9
   1685c:	0001107d 	.word	0x0001107d
   16860:	20001340 	.word	0x20001340
   16864:	20001304 	.word	0x20001304
   16868:	000186a0 	.word	0x000186a0
   1686c:	84e72a00 	.word	0x84e72a00
   16870:	00011019 	.word	0x00011019
   16874:	20000bf0 	.word	0x20000bf0

00016878 <radio_adv_disable>:
{
   16878:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_ADV,
   1687a:	2103      	movs	r1, #3
   1687c:	2005      	movs	r0, #5
   1687e:	f7f8 f863 	bl	e948 <role_disable>
	if (!status) {
   16882:	4605      	mov	r5, r0
   16884:	b9e8      	cbnz	r0, 168c2 <radio_adv_disable+0x4a>
		_radio.advertiser.is_enabled = 0;
   16886:	4c10      	ldr	r4, [pc, #64]	; (168c8 <radio_adv_disable+0x50>)
   16888:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
   1688c:	f360 12c7 	bfi	r2, r0, #7, #1
   16890:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
		if (!_radio.scanner.is_enabled) {
   16894:	f894 264c 	ldrb.w	r2, [r4, #1612]	; 0x64c
   16898:	07d3      	lsls	r3, r2, #31
   1689a:	d401      	bmi.n	168a0 <radio_adv_disable+0x28>
			ll_adv_scan_state_cb(0);
   1689c:	f001 fb74 	bl	17f88 <ll_adv_scan_state_cb>
		conn = _radio.advertiser.conn;
   168a0:	f8d4 6638 	ldr.w	r6, [r4, #1592]	; 0x638
		if (conn) {
   168a4:	b15e      	cbz	r6, 168be <radio_adv_disable+0x46>
			_radio.advertiser.conn = NULL;
   168a6:	2300      	movs	r3, #0
   168a8:	f8c4 3638 	str.w	r3, [r4, #1592]	; 0x638
			mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link,
   168ac:	4907      	ldr	r1, [pc, #28]	; (168cc <radio_adv_disable+0x54>)
   168ae:	f8d6 00b4 	ldr.w	r0, [r6, #180]	; 0xb4
   168b2:	f7f4 ffae 	bl	b812 <mem_release>
			mem_release(conn, &_radio.conn_free);
   168b6:	4906      	ldr	r1, [pc, #24]	; (168d0 <radio_adv_disable+0x58>)
   168b8:	4630      	mov	r0, r6
   168ba:	f7f4 ffaa 	bl	b812 <mem_release>
}
   168be:	4628      	mov	r0, r5
   168c0:	bd70      	pop	{r4, r5, r6, pc}
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
   168c2:	250c      	movs	r5, #12
   168c4:	e7fb      	b.n	168be <radio_adv_disable+0x46>
   168c6:	bf00      	nop
   168c8:	20000bf0 	.word	0x20000bf0
   168cc:	20001340 	.word	0x20001340
   168d0:	20001304 	.word	0x20001304
   168d4:	00000000 	.word	0x00000000

000168d8 <radio_scan_enable>:
{
   168d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (_radio.scanner.is_enabled) {
   168dc:	4c76      	ldr	r4, [pc, #472]	; (16ab8 <radio_scan_enable+0x1e0>)
   168de:	f894 764c 	ldrb.w	r7, [r4, #1612]	; 0x64c
{
   168e2:	b08e      	sub	sp, #56	; 0x38
   168e4:	461d      	mov	r5, r3
	if (_radio.scanner.is_enabled) {
   168e6:	f017 0701 	ands.w	r7, r7, #1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   168ea:	f04f 0302 	mov.w	r3, #2
{
   168ee:	460e      	mov	r6, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   168f0:	930b      	str	r3, [sp, #44]	; 0x2c
{
   168f2:	4611      	mov	r1, r2
	if (_radio.scanner.is_enabled) {
   168f4:	d003      	beq.n	168fe <radio_scan_enable+0x26>
		return BT_HCI_ERR_CMD_DISALLOWED;
   168f6:	200c      	movs	r0, #12
}
   168f8:	b00e      	add	sp, #56	; 0x38
   168fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	_radio.scanner.type = type;
   168fe:	f894 364d 	ldrb.w	r3, [r4, #1613]	; 0x64d
	_radio.scanner.rpa_gen = rpa_gen;
   16902:	f894 264e 	ldrb.w	r2, [r4, #1614]	; 0x64e
	_radio.scanner.type = type;
   16906:	f360 03c3 	bfi	r3, r0, #3, #1
	_radio.scanner.phy = type >> 1;				//1
   1690a:	0840      	lsrs	r0, r0, #1
   1690c:	f360 0302 	bfi	r3, r0, #0, #3
	_radio.scanner.rpa_gen = rpa_gen;
   16910:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
   16914:	f360 0200 	bfi	r2, r0, #0, #1
   16918:	f884 264e 	strb.w	r2, [r4, #1614]	; 0x64e
	_radio.scanner.rl_idx = rl_idx;
   1691c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
   16920:	f884 264f 	strb.w	r2, [r4, #1615]	; 0x64f
	_radio.scanner.init_addr_type = init_addr_type;
   16924:	f366 13c7 	bfi	r3, r6, #7, #1
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
   16928:	2206      	movs	r2, #6
   1692a:	f504 60ca 	add.w	r0, r4, #1616	; 0x650
	_radio.scanner.init_addr_type = init_addr_type;
   1692e:	f884 364d 	strb.w	r3, [r4, #1613]	; 0x64d
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
   16932:	4e62      	ldr	r6, [pc, #392]	; (16abc <radio_scan_enable+0x1e4>)
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
   16934:	f7e9 ff2d 	bl	792 <memcpy>
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
   16938:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
   1693c:	f04f 0891 	mov.w	r8, #145	; 0x91
   16940:	fba2 0106 	umull	r0, r1, r2, r6
   16944:	fb08 1102 	mla	r1, r8, r2, r1
   16948:	a359      	add	r3, pc, #356	; (adr r3, 16ab0 <radio_scan_enable+0x1d8>)
   1694a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1694e:	f7e9 fca3 	bl	298 <__aeabi_uldivmod>
	_radio.scanner.filter_policy = filter_policy;
   16952:	f894 364d 	ldrb.w	r3, [r4, #1613]	; 0x64d
   16956:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
	_radio.scanner.hdr.ticks_preempt_to_start =
   1695a:	f8c4 7644 	str.w	r7, [r4, #1604]	; 0x644
	_radio.scanner.filter_policy = filter_policy;
   1695e:	f362 1305 	bfi	r3, r2, #4, #2
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
   16962:	b2aa      	uxth	r2, r5
   16964:	fba2 6706 	umull	r6, r7, r2, r6
		_radio.ticks_active_to_start;
   16968:	f8d4 a78c 	ldr.w	sl, [r4, #1932]	; 0x78c
	_radio.scanner.filter_policy = filter_policy;
   1696c:	f884 364d 	strb.w	r3, [r4, #1613]	; 0x64d
		_radio.scanner.ticks_window +
   16970:	f100 0909 	add.w	r9, r0, #9
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
   16974:	fb08 7702 	mla	r7, r8, r2, r7
	_radio.scanner.hdr.ticks_xtal_to_start =
   16978:	2327      	movs	r3, #39	; 0x27
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
   1697a:	f8c4 065c 	str.w	r0, [r4, #1628]	; 0x65c
	_radio.scanner.hdr.ticks_active_to_start =
   1697e:	f8c4 a640 	str.w	sl, [r4, #1600]	; 0x640
	_radio.scanner.hdr.ticks_xtal_to_start =
   16982:	f8c4 363c 	str.w	r3, [r4, #1596]	; 0x63c
	_radio.scanner.hdr.ticks_slot =
   16986:	f8c4 9648 	str.w	r9, [r4, #1608]	; 0x648
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
   1698a:	a349      	add	r3, pc, #292	; (adr r3, 16ab0 <radio_scan_enable+0x1d8>)
   1698c:	e9d3 2300 	ldrd	r2, r3, [r3]
   16990:	4630      	mov	r0, r6
   16992:	4639      	mov	r1, r7
   16994:	f7e9 fc80 	bl	298 <__aeabi_uldivmod>
	    (ticks_interval -
   16998:	f1a0 0327 	sub.w	r3, r0, #39	; 0x27
	if (_radio.scanner.hdr.ticks_slot >
   1699c:	4599      	cmp	r9, r3
	_radio.scanner.interval = interval;
   1699e:	f8c4 5660 	str.w	r5, [r4, #1632]	; 0x660
	ticks_slot_offset =
   169a2:	4655      	mov	r5, sl
		_radio.scanner.hdr.ticks_slot =
   169a4:	bf88      	it	hi
   169a6:	f8c4 3648 	strhi.w	r3, [r4, #1608]	; 0x648
	ticks_slot_offset =
   169aa:	2d27      	cmp	r5, #39	; 0x27
   169ac:	bf38      	it	cc
   169ae:	2527      	movcc	r5, #39	; 0x27
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
   169b0:	4680      	mov	r8, r0
	_radio.scanner.slot_offset = ticks_slot_offset ;
   169b2:	f8c4 5664 	str.w	r5, [r4, #1636]	; 0x664
	ticks_anchor = ticker_ticks_now_get();
   169b6:	f7f5 ff09 	bl	c7cc <ticker_ticks_now_get>
	if ((_radio.scanner.conn) ||
   169ba:	f8d4 3674 	ldr.w	r3, [r4, #1652]	; 0x674
	ticks_anchor = ticker_ticks_now_get();
   169be:	4682      	mov	sl, r0
	if ((_radio.scanner.conn) ||
   169c0:	2b00      	cmp	r3, #0
   169c2:	d05e      	beq.n	16a82 <radio_scan_enable+0x1aa>
		us_offset = 0;
   169c4:	2300      	movs	r3, #0
   169c6:	930c      	str	r3, [sp, #48]	; 0x30
   169c8:	483d      	ldr	r0, [pc, #244]	; (16ac0 <radio_scan_enable+0x1e8>)
   169ca:	f3bf 8f5b 	dmb	ish
   169ce:	e850 3f00 	ldrex	r3, [r0]
   169d2:	f023 0301 	bic.w	r3, r3, #1
   169d6:	e840 3200 	strex	r2, r3, [r0]
   169da:	2a00      	cmp	r2, #0
   169dc:	d1f7      	bne.n	169ce <radio_scan_enable+0xf6>
   169de:	f3bf 8f5b 	dmb	ish
	work->handler = handler;
   169e2:	4938      	ldr	r1, [pc, #224]	; (16ac4 <radio_scan_enable+0x1ec>)
   169e4:	f840 1c04 	str.w	r1, [r0, #-4]
	k_delayed_work_init(&aux_scanning.work_d, aux_packet_function);
   169e8:	3004      	adds	r0, #4
   169ea:	f00b fc0b 	bl	22204 <k_delayed_work_init>
			   (ticks_anchor + HAL_TICKER_US_TO_TICKS(us_offset)),
   169ee:	980c      	ldr	r0, [sp, #48]	; 0x30
   169f0:	4935      	ldr	r1, [pc, #212]	; (16ac8 <radio_scan_enable+0x1f0>)
   169f2:	a32f      	add	r3, pc, #188	; (adr r3, 16ab0 <radio_scan_enable+0x1d8>)
   169f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   169f8:	fba0 0101 	umull	r0, r1, r0, r1
   169fc:	f7e9 fc4c 	bl	298 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   16a00:	ab0b      	add	r3, sp, #44	; 0x2c
   16a02:	9308      	str	r3, [sp, #32]
   16a04:	4b31      	ldr	r3, [pc, #196]	; (16acc <radio_scan_enable+0x1f4>)
   16a06:	9307      	str	r3, [sp, #28]
   16a08:	4b31      	ldr	r3, [pc, #196]	; (16ad0 <radio_scan_enable+0x1f8>)
   16a0a:	9305      	str	r3, [sp, #20]
   16a0c:	f8d4 3648 	ldr.w	r3, [r4, #1608]	; 0x648
			   (ticks_anchor + HAL_TICKER_US_TO_TICKS(us_offset)),
   16a10:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   16a14:	f04f 0900 	mov.w	r9, #0
   16a18:	4482      	add	sl, r0
   16a1a:	441d      	add	r5, r3
			   HAL_TICKER_REMAINDER((u64_t) interval * 625),
   16a1c:	4630      	mov	r0, r6
   16a1e:	a324      	add	r3, pc, #144	; (adr r3, 16ab0 <radio_scan_enable+0x1d8>)
   16a20:	e9d3 2300 	ldrd	r2, r3, [r3]
   16a24:	4639      	mov	r1, r7
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   16a26:	f8cd 9018 	str.w	r9, [sp, #24]
   16a2a:	9504      	str	r5, [sp, #16]
   16a2c:	f8cd 900c 	str.w	r9, [sp, #12]
			   HAL_TICKER_REMAINDER((u64_t) interval * 625),
   16a30:	f7e9 fc32 	bl	298 <__aeabi_uldivmod>
   16a34:	4610      	mov	r0, r2
   16a36:	4619      	mov	r1, r3
   16a38:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   16a3c:	2300      	movs	r3, #0
   16a3e:	f7e9 fc2b 	bl	298 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   16a42:	f8cd 8004 	str.w	r8, [sp, #4]
   16a46:	9002      	str	r0, [sp, #8]
   16a48:	f8cd 9000 	str.w	r9, [sp]
   16a4c:	4653      	mov	r3, sl
   16a4e:	2206      	movs	r2, #6
   16a50:	2103      	movs	r1, #3
   16a52:	4648      	mov	r0, r9
   16a54:	f7f5 fd4c 	bl	c4f0 <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
   16a58:	2802      	cmp	r0, #2
   16a5a:	d023      	beq.n	16aa4 <radio_scan_enable+0x1cc>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
   16a5c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   16a5e:	2d00      	cmp	r5, #0
   16a60:	f47f af49 	bne.w	168f6 <radio_scan_enable+0x1e>
	_radio.scanner.is_enabled = 1;
   16a64:	f894 364c 	ldrb.w	r3, [r4, #1612]	; 0x64c
   16a68:	f043 0301 	orr.w	r3, r3, #1
   16a6c:	f884 364c 	strb.w	r3, [r4, #1612]	; 0x64c
	if (!_radio.advertiser.is_enabled) {
   16a70:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
   16a74:	2b00      	cmp	r3, #0
   16a76:	db02      	blt.n	16a7e <radio_scan_enable+0x1a6>
		ll_adv_scan_state_cb(BIT(1));
   16a78:	2002      	movs	r0, #2
   16a7a:	f001 fa85 	bl	17f88 <ll_adv_scan_state_cb>
	return 0;
   16a7e:	4628      	mov	r0, r5
   16a80:	e73a      	b.n	168f8 <radio_scan_enable+0x20>
		sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_APP,
   16a82:	f8d4 1648 	ldr.w	r1, [r4, #1608]	; 0x648
		u32_t ticks_ref = 0;
   16a86:	930d      	str	r3, [sp, #52]	; 0x34
		sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_APP,
   16a88:	aa0d      	add	r2, sp, #52	; 0x34
   16a8a:	ab0c      	add	r3, sp, #48	; 0x30
   16a8c:	4429      	add	r1, r5
   16a8e:	2003      	movs	r0, #3
   16a90:	f7f8 fdba 	bl	f608 <sched_after_mstr_free_slot_get>
		if (us_offset) {
   16a94:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   16a96:	2b00      	cmp	r3, #0
   16a98:	d096      	beq.n	169c8 <radio_scan_enable+0xf0>
			ticks_anchor = ticks_ref;
   16a9a:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
   16a9e:	e793      	b.n	169c8 <radio_scan_enable+0xf0>
			cpu_sleep();
   16aa0:	f7f7 fd42 	bl	e528 <cpu_sleep>
		while (ret_cb == TICKER_STATUS_BUSY) {
   16aa4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   16aa6:	2b02      	cmp	r3, #2
   16aa8:	d0fa      	beq.n	16aa0 <radio_scan_enable+0x1c8>
   16aaa:	e7d7      	b.n	16a5c <radio_scan_enable+0x184>
   16aac:	f3af 8000 	nop.w
   16ab0:	1afd498d 	.word	0x1afd498d
   16ab4:	00000007 	.word	0x00000007
   16ab8:	20000bf0 	.word	0x20000bf0
   16abc:	84e72a00 	.word	0x84e72a00
   16ac0:	20003250 	.word	0x20003250
   16ac4:	00010465 	.word	0x00010465
   16ac8:	3b9aca00 	.word	0x3b9aca00
   16acc:	0000e56d 	.word	0x0000e56d
   16ad0:	00010f5d 	.word	0x00010f5d

00016ad4 <radio_scan_disable>:
{
   16ad4:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_SCAN,
   16ad6:	2104      	movs	r1, #4
   16ad8:	2006      	movs	r0, #6
   16ada:	f7f7 ff35 	bl	e948 <role_disable>
	if (!status) {
   16ade:	4605      	mov	r5, r0
   16ae0:	b9e8      	cbnz	r0, 16b1e <radio_scan_disable+0x4a>
		_radio.scanner.is_enabled = 0;
   16ae2:	4c10      	ldr	r4, [pc, #64]	; (16b24 <radio_scan_disable+0x50>)
   16ae4:	f894 264c 	ldrb.w	r2, [r4, #1612]	; 0x64c
   16ae8:	f360 0200 	bfi	r2, r0, #0, #1
   16aec:	f884 264c 	strb.w	r2, [r4, #1612]	; 0x64c
		if (!_radio.advertiser.is_enabled) {
   16af0:	f994 2028 	ldrsb.w	r2, [r4, #40]	; 0x28
   16af4:	2a00      	cmp	r2, #0
   16af6:	db01      	blt.n	16afc <radio_scan_disable+0x28>
			ll_adv_scan_state_cb(0);
   16af8:	f001 fa46 	bl	17f88 <ll_adv_scan_state_cb>
		conn = _radio.scanner.conn;
   16afc:	f8d4 6674 	ldr.w	r6, [r4, #1652]	; 0x674
		if (conn) {
   16b00:	b15e      	cbz	r6, 16b1a <radio_scan_disable+0x46>
			_radio.scanner.conn = NULL;
   16b02:	2300      	movs	r3, #0
   16b04:	f8c4 3674 	str.w	r3, [r4, #1652]	; 0x674
			mem_release(conn->llcp_terminate.
   16b08:	4907      	ldr	r1, [pc, #28]	; (16b28 <radio_scan_disable+0x54>)
   16b0a:	f8d6 00b4 	ldr.w	r0, [r6, #180]	; 0xb4
   16b0e:	f7f4 fe80 	bl	b812 <mem_release>
			mem_release(conn, &_radio.conn_free);
   16b12:	4906      	ldr	r1, [pc, #24]	; (16b2c <radio_scan_disable+0x58>)
   16b14:	4630      	mov	r0, r6
   16b16:	f7f4 fe7c 	bl	b812 <mem_release>
}
   16b1a:	4628      	mov	r0, r5
   16b1c:	bd70      	pop	{r4, r5, r6, pc}
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
   16b1e:	250c      	movs	r5, #12
   16b20:	e7fb      	b.n	16b1a <radio_scan_disable+0x46>
   16b22:	bf00      	nop
   16b24:	20000bf0 	.word	0x20000bf0
   16b28:	20001340 	.word	0x20001340
   16b2c:	20001304 	.word	0x20001304

00016b30 <ll_connect_disable>:
	if (_radio.scanner.conn == 0) {
   16b30:	4b03      	ldr	r3, [pc, #12]	; (16b40 <ll_connect_disable+0x10>)
   16b32:	f8d3 3674 	ldr.w	r3, [r3, #1652]	; 0x674
   16b36:	b10b      	cbz	r3, 16b3c <ll_connect_disable+0xc>
	status = radio_scan_disable();
   16b38:	f7ff bfcc 	b.w	16ad4 <radio_scan_disable>
}
   16b3c:	200c      	movs	r0, #12
   16b3e:	4770      	bx	lr
   16b40:	20000bf0 	.word	0x20000bf0

00016b44 <ll_rx_dequeue>:
{
   16b44:	b530      	push	{r4, r5, lr}
   16b46:	b085      	sub	sp, #20
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
   16b48:	4d47      	ldr	r5, [pc, #284]	; (16c68 <ll_rx_dequeue+0x124>)
	struct radio_pdu_node_rx *node_rx = NULL;
   16b4a:	aa04      	add	r2, sp, #16
   16b4c:	2300      	movs	r3, #0
   16b4e:	f842 3d04 	str.w	r3, [r2, #-4]!
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
   16b52:	f8d5 0758 	ldr.w	r0, [r5, #1880]	; 0x758
   16b56:	f205 7154 	addw	r1, r5, #1876	; 0x754
   16b5a:	f7f4 fea9 	bl	b8b0 <memq_dequeue>
   16b5e:	462c      	mov	r4, r5
	LL_ASSERT(link);
   16b60:	b970      	cbnz	r0, 16b80 <ll_rx_dequeue+0x3c>
   16b62:	4b42      	ldr	r3, [pc, #264]	; (16c6c <ll_rx_dequeue+0x128>)
   16b64:	9301      	str	r3, [sp, #4]
   16b66:	9300      	str	r3, [sp, #0]
   16b68:	4a41      	ldr	r2, [pc, #260]	; (16c70 <ll_rx_dequeue+0x12c>)
   16b6a:	4b42      	ldr	r3, [pc, #264]	; (16c74 <ll_rx_dequeue+0x130>)
   16b6c:	4942      	ldr	r1, [pc, #264]	; (16c78 <ll_rx_dequeue+0x134>)
   16b6e:	4843      	ldr	r0, [pc, #268]	; (16c7c <ll_rx_dequeue+0x138>)
		LL_ASSERT(_radio.link_rx_data_quota <
   16b70:	f7eb fb90 	bl	2294 <printk>
   16b74:	4040      	eors	r0, r0
   16b76:	f380 8811 	msr	BASEPRI, r0
   16b7a:	f04f 0004 	mov.w	r0, #4
   16b7e:	df02      	svc	2
	mem_release(link, &_radio.link_rx_free);
   16b80:	f505 61ea 	add.w	r1, r5, #1872	; 0x750
   16b84:	f7f4 fe45 	bl	b812 <mem_release>
	switch (node_rx->hdr.type) {
   16b88:	9a03      	ldr	r2, [sp, #12]
   16b8a:	7911      	ldrb	r1, [r2, #4]
   16b8c:	290c      	cmp	r1, #12
   16b8e:	d807      	bhi.n	16ba0 <ll_rx_dequeue+0x5c>
   16b90:	2301      	movs	r3, #1
   16b92:	408b      	lsls	r3, r1
   16b94:	f641 707e 	movw	r0, #8062	; 0x1f7e
   16b98:	4203      	tst	r3, r0
   16b9a:	d109      	bne.n	16bb0 <ll_rx_dequeue+0x6c>
   16b9c:	0618      	lsls	r0, r3, #24
   16b9e:	d419      	bmi.n	16bd4 <ll_rx_dequeue+0x90>
		LL_ASSERT(0);
   16ba0:	4b32      	ldr	r3, [pc, #200]	; (16c6c <ll_rx_dequeue+0x128>)
   16ba2:	9301      	str	r3, [sp, #4]
   16ba4:	9300      	str	r3, [sp, #0]
   16ba6:	4a32      	ldr	r2, [pc, #200]	; (16c70 <ll_rx_dequeue+0x12c>)
   16ba8:	4b32      	ldr	r3, [pc, #200]	; (16c74 <ll_rx_dequeue+0x130>)
   16baa:	4933      	ldr	r1, [pc, #204]	; (16c78 <ll_rx_dequeue+0x134>)
   16bac:	4834      	ldr	r0, [pc, #208]	; (16c80 <ll_rx_dequeue+0x13c>)
   16bae:	e7df      	b.n	16b70 <ll_rx_dequeue+0x2c>
		LL_ASSERT(_radio.link_rx_data_quota <
   16bb0:	f895 0748 	ldrb.w	r0, [r5, #1864]	; 0x748
   16bb4:	f895 375c 	ldrb.w	r3, [r5, #1884]	; 0x75c
   16bb8:	3801      	subs	r0, #1
   16bba:	4283      	cmp	r3, r0
   16bbc:	db07      	blt.n	16bce <ll_rx_dequeue+0x8a>
   16bbe:	4b2b      	ldr	r3, [pc, #172]	; (16c6c <ll_rx_dequeue+0x128>)
   16bc0:	9301      	str	r3, [sp, #4]
   16bc2:	9300      	str	r3, [sp, #0]
   16bc4:	4a2a      	ldr	r2, [pc, #168]	; (16c70 <ll_rx_dequeue+0x12c>)
   16bc6:	4b2b      	ldr	r3, [pc, #172]	; (16c74 <ll_rx_dequeue+0x130>)
   16bc8:	492b      	ldr	r1, [pc, #172]	; (16c78 <ll_rx_dequeue+0x134>)
   16bca:	482e      	ldr	r0, [pc, #184]	; (16c84 <ll_rx_dequeue+0x140>)
   16bcc:	e7d0      	b.n	16b70 <ll_rx_dequeue+0x2c>
		_radio.link_rx_data_quota++;
   16bce:	3301      	adds	r3, #1
   16bd0:	f885 375c 	strb.w	r3, [r5, #1884]	; 0x75c
	if (node_rx->hdr.type == NODE_RX_TYPE_CONNECTION) {
   16bd4:	2906      	cmp	r1, #6
   16bd6:	d136      	bne.n	16c46 <ll_rx_dequeue+0x102>
		if ((radio_le_conn_cmplt->status == 0x3c) ||
   16bd8:	7ad3      	ldrb	r3, [r2, #11]
   16bda:	2b3c      	cmp	r3, #60	; 0x3c
   16bdc:	d00d      	beq.n	16bfa <ll_rx_dequeue+0xb6>
   16bde:	7b12      	ldrb	r2, [r2, #12]
   16be0:	b9e2      	cbnz	r2, 16c1c <ll_rx_dequeue+0xd8>
			LL_ASSERT(_radio.scanner.is_enabled);
   16be2:	f894 364c 	ldrb.w	r3, [r4, #1612]	; 0x64c
   16be6:	07d9      	lsls	r1, r3, #31
   16be8:	d42f      	bmi.n	16c4a <ll_rx_dequeue+0x106>
   16bea:	4b20      	ldr	r3, [pc, #128]	; (16c6c <ll_rx_dequeue+0x128>)
   16bec:	9301      	str	r3, [sp, #4]
   16bee:	9300      	str	r3, [sp, #0]
   16bf0:	4a1f      	ldr	r2, [pc, #124]	; (16c70 <ll_rx_dequeue+0x12c>)
   16bf2:	4b20      	ldr	r3, [pc, #128]	; (16c74 <ll_rx_dequeue+0x130>)
   16bf4:	4920      	ldr	r1, [pc, #128]	; (16c78 <ll_rx_dequeue+0x134>)
   16bf6:	4824      	ldr	r0, [pc, #144]	; (16c88 <ll_rx_dequeue+0x144>)
   16bf8:	e7ba      	b.n	16b70 <ll_rx_dequeue+0x2c>
				_radio.advertiser.conn = NULL;
   16bfa:	2300      	movs	r3, #0
				conn = _radio.advertiser.conn;
   16bfc:	f8d4 5638 	ldr.w	r5, [r4, #1592]	; 0x638
				_radio.advertiser.conn = NULL;
   16c00:	f8c4 3638 	str.w	r3, [r4, #1592]	; 0x638
			LL_ASSERT(_radio.advertiser.is_enabled);
   16c04:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
   16c08:	2b00      	cmp	r3, #0
   16c0a:	db09      	blt.n	16c20 <ll_rx_dequeue+0xdc>
   16c0c:	4b17      	ldr	r3, [pc, #92]	; (16c6c <ll_rx_dequeue+0x128>)
   16c0e:	9301      	str	r3, [sp, #4]
   16c10:	9300      	str	r3, [sp, #0]
   16c12:	4a17      	ldr	r2, [pc, #92]	; (16c70 <ll_rx_dequeue+0x12c>)
   16c14:	4b17      	ldr	r3, [pc, #92]	; (16c74 <ll_rx_dequeue+0x130>)
   16c16:	4918      	ldr	r1, [pc, #96]	; (16c78 <ll_rx_dequeue+0x134>)
   16c18:	481c      	ldr	r0, [pc, #112]	; (16c8c <ll_rx_dequeue+0x148>)
   16c1a:	e7a9      	b.n	16b70 <ll_rx_dequeue+0x2c>
		struct connection *conn = NULL;
   16c1c:	2500      	movs	r5, #0
   16c1e:	e7f1      	b.n	16c04 <ll_rx_dequeue+0xc0>
			_radio.advertiser.is_enabled = 0;
   16c20:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   16c24:	f36f 13c7 	bfc	r3, #7, #1
   16c28:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (conn) {
   16c2c:	b995      	cbnz	r5, 16c54 <ll_rx_dequeue+0x110>
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
   16c2e:	f894 064c 	ldrb.w	r0, [r4, #1612]	; 0x64c
		     _radio.advertiser.is_enabled;
   16c32:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
   16c36:	f000 0001 	and.w	r0, r0, #1
   16c3a:	0040      	lsls	r0, r0, #1
		if (!bm) {
   16c3c:	ea50 10d3 	orrs.w	r0, r0, r3, lsr #7
   16c40:	d101      	bne.n	16c46 <ll_rx_dequeue+0x102>
			ll_adv_scan_state_cb(0);
   16c42:	f001 f9a1 	bl	17f88 <ll_adv_scan_state_cb>
}
   16c46:	b005      	add	sp, #20
   16c48:	bd30      	pop	{r4, r5, pc}
			_radio.scanner.is_enabled = 0;
   16c4a:	f362 0300 	bfi	r3, r2, #0, #1
   16c4e:	f884 364c 	strb.w	r3, [r4, #1612]	; 0x64c
   16c52:	e7ec      	b.n	16c2e <ll_rx_dequeue+0xea>
			mem_release(node_rx->hdr.onion.link,
   16c54:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
   16c58:	490d      	ldr	r1, [pc, #52]	; (16c90 <ll_rx_dequeue+0x14c>)
   16c5a:	f7f4 fdda 	bl	b812 <mem_release>
			mem_release(conn, &_radio.conn_free);
   16c5e:	490d      	ldr	r1, [pc, #52]	; (16c94 <ll_rx_dequeue+0x150>)
   16c60:	4628      	mov	r0, r5
   16c62:	f7f4 fdd6 	bl	b812 <mem_release>
   16c66:	e7e2      	b.n	16c2e <ll_rx_dequeue+0xea>
   16c68:	20000bf0 	.word	0x20000bf0
   16c6c:	00023dae 	.word	0x00023dae
   16c70:	00022d76 	.word	0x00022d76
   16c74:	00025ea4 	.word	0x00025ea4
   16c78:	000272d8 	.word	0x000272d8
   16c7c:	00025ef2 	.word	0x00025ef2
   16c80:	00023fa5 	.word	0x00023fa5
   16c84:	00025fdc 	.word	0x00025fdc
   16c88:	000264db 	.word	0x000264db
   16c8c:	0002649d 	.word	0x0002649d
   16c90:	20001340 	.word	0x20001340
   16c94:	20001304 	.word	0x20001304

00016c98 <rtc0_nrf5_isr>:
	ISR_DIRECT_PM();
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
   16c98:	b538      	push	{r3, r4, r5, lr}
	u32_t compare0, compare1;

	/* store interested events */
	compare0 = NRF_RTC0->EVENTS_COMPARE[0];
   16c9a:	4c0b      	ldr	r4, [pc, #44]	; (16cc8 <rtc0_nrf5_isr+0x30>)
   16c9c:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
	compare1 = NRF_RTC0->EVENTS_COMPARE[1];
   16ca0:	f8d4 5144 	ldr.w	r5, [r4, #324]	; 0x144

	/* On compare0 run ticker worker instance0 */
	if (compare0) {
   16ca4:	b122      	cbz	r2, 16cb0 <rtc0_nrf5_isr+0x18>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   16ca6:	2000      	movs	r0, #0
   16ca8:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140

		ticker_trigger(0);
   16cac:	f7f5 fc0e 	bl	c4cc <ticker_trigger>
	}

	/* On compare1 run ticker worker instance1 */
	if (compare1) {
   16cb0:	b12d      	cbz	r5, 16cbe <rtc0_nrf5_isr+0x26>
		NRF_RTC0->EVENTS_COMPARE[1] = 0;
   16cb2:	2300      	movs	r3, #0
   16cb4:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144

		ticker_trigger(1);
   16cb8:	2001      	movs	r0, #1
   16cba:	f7f5 fc07 	bl	c4cc <ticker_trigger>
	}

	mayfly_run(MAYFLY_CALL_ID_0);
   16cbe:	2000      	movs	r0, #0
}
   16cc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	mayfly_run(MAYFLY_CALL_ID_0);
   16cc4:	f7f4 bea4 	b.w	ba10 <mayfly_run>
   16cc8:	4000b000 	.word	0x4000b000

00016ccc <swi4_nrf5_isr>:

static void swi4_nrf5_isr(void *arg)
{
	mayfly_run(MAYFLY_CALL_ID_1);
   16ccc:	2001      	movs	r0, #1
   16cce:	f7f4 be9f 	b.w	ba10 <mayfly_run>

00016cd2 <radio_nrf5_isr>:
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   16cd2:	4668      	mov	r0, sp
   16cd4:	f020 0107 	bic.w	r1, r0, #7
   16cd8:	468d      	mov	sp, r1
   16cda:	b501      	push	{r0, lr}
	isr_radio();
   16cdc:	f001 fd32 	bl	18744 <isr_radio>
	ISR_DIRECT_PM();
   16ce0:	f7ea ffc0 	bl	1c64 <_arch_isr_direct_pm>
extern void _IntExit(void);

static inline void _arch_isr_direct_footer(int maybe_swap)
{
	if (maybe_swap) {
		_IntExit();
   16ce4:	f7ea fd9e 	bl	1824 <_ExcExit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   16ce8:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   16cec:	4685      	mov	sp, r0
   16cee:	4770      	bx	lr

00016cf0 <radio_active_callback>:
{
   16cf0:	4770      	bx	lr
	...

00016cf4 <radio_event_callback>:
	k_sem_give(sem_recv);
   16cf4:	4b01      	ldr	r3, [pc, #4]	; (16cfc <radio_event_callback+0x8>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   16cf6:	6818      	ldr	r0, [r3, #0]
   16cf8:	f00a bf58 	b.w	21bac <_impl_k_sem_give>
   16cfc:	20001ec4 	.word	0x20001ec4

00016d00 <ll_init>:
}

int ll_init(struct k_sem *sem_rx)
{
   16d00:	b570      	push	{r4, r5, r6, lr}
	struct device *clk_k32;
	struct device *clk_m16;
	struct device *entropy;
	u32_t err;

	sem_recv = sem_rx;
   16d02:	4b41      	ldr	r3, [pc, #260]	; (16e08 <ll_init+0x108>)
{
   16d04:	b086      	sub	sp, #24
	sem_recv = sem_rx;
   16d06:	6018      	str	r0, [r3, #0]

	clk_k32 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
   16d08:	4840      	ldr	r0, [pc, #256]	; (16e0c <ll_init+0x10c>)
   16d0a:	f00a fa41 	bl	21190 <device_get_binding>
	if (!clk_k32) {
   16d0e:	b918      	cbnz	r0, 16d18 <ll_init+0x18>
		return -ENODEV;
   16d10:	f06f 0012 	mvn.w	r0, #18
	irq_enable(NRF5_IRQ_RADIO_IRQn);
	irq_enable(NRF5_IRQ_RTC0_IRQn);
	irq_enable(NRF5_IRQ_SWI4_IRQn);

	return 0;
}
   16d14:	b006      	add	sp, #24
   16d16:	bd70      	pop	{r4, r5, r6, pc}
	return api->on(dev, sys);
   16d18:	6843      	ldr	r3, [r0, #4]
   16d1a:	2101      	movs	r1, #1
   16d1c:	681b      	ldr	r3, [r3, #0]
   16d1e:	4798      	blx	r3
	entropy = device_get_binding(CONFIG_ENTROPY_NAME);
   16d20:	483b      	ldr	r0, [pc, #236]	; (16e10 <ll_init+0x110>)
   16d22:	f00a fa35 	bl	21190 <device_get_binding>
	if (!entropy) {
   16d26:	4604      	mov	r4, r0
   16d28:	2800      	cmp	r0, #0
   16d2a:	d0f1      	beq.n	16d10 <ll_init+0x10>
	cntr_init();
   16d2c:	f001 fb52 	bl	183d4 <cntr_init>
	mayfly_init();
   16d30:	f7f4 fdce 	bl	b8d0 <mayfly_init>
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   16d34:	4b37      	ldr	r3, [pc, #220]	; (16e14 <ll_init+0x114>)
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
   16d36:	2203      	movs	r2, #3
   16d38:	721a      	strb	r2, [r3, #8]
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   16d3a:	2108      	movs	r1, #8
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
   16d3c:	4a36      	ldr	r2, [pc, #216]	; (16e18 <ll_init+0x118>)
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   16d3e:	7019      	strb	r1, [r3, #0]
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
   16d40:	2000      	movs	r0, #0
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   16d42:	2502      	movs	r5, #2
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
   16d44:	7418      	strb	r0, [r3, #16]
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   16d46:	761d      	strb	r5, [r3, #24]
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
   16d48:	9205      	str	r2, [sp, #20]
   16d4a:	4a34      	ldr	r2, [pc, #208]	; (16e1c <ll_init+0x11c>)
   16d4c:	9204      	str	r2, [sp, #16]
   16d4e:	4a34      	ldr	r2, [pc, #208]	; (16e20 <ll_init+0x120>)
   16d50:	9203      	str	r2, [sp, #12]
   16d52:	4a34      	ldr	r2, [pc, #208]	; (16e24 <ll_init+0x124>)
   16d54:	9202      	str	r2, [sp, #8]
   16d56:	220d      	movs	r2, #13
   16d58:	9201      	str	r2, [sp, #4]
   16d5a:	9300      	str	r3, [sp, #0]
   16d5c:	4a32      	ldr	r2, [pc, #200]	; (16e28 <ll_init+0x128>)
   16d5e:	2304      	movs	r3, #4
   16d60:	f7f5 fb7c 	bl	c45c <ticker_init>
	LL_ASSERT(!err);
   16d64:	b170      	cbz	r0, 16d84 <ll_init+0x84>
   16d66:	4b31      	ldr	r3, [pc, #196]	; (16e2c <ll_init+0x12c>)
   16d68:	9301      	str	r3, [sp, #4]
   16d6a:	9300      	str	r3, [sp, #0]
   16d6c:	4a30      	ldr	r2, [pc, #192]	; (16e30 <ll_init+0x130>)
   16d6e:	4b31      	ldr	r3, [pc, #196]	; (16e34 <ll_init+0x134>)
   16d70:	4931      	ldr	r1, [pc, #196]	; (16e38 <ll_init+0x138>)
   16d72:	4832      	ldr	r0, [pc, #200]	; (16e3c <ll_init+0x13c>)
   16d74:	f7eb fa8e 	bl	2294 <printk>
   16d78:	4040      	eors	r0, r0
   16d7a:	f380 8811 	msr	BASEPRI, r0
   16d7e:	f04f 0004 	mov.w	r0, #4
   16d82:	df02      	svc	2
	clk_m16 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_M16SRC_DRV_NAME);
   16d84:	482e      	ldr	r0, [pc, #184]	; (16e40 <ll_init+0x140>)
   16d86:	f00a fa03 	bl	21190 <device_get_binding>
	if (!clk_m16) {
   16d8a:	2800      	cmp	r0, #0
   16d8c:	d0c0      	beq.n	16d10 <ll_init+0x10>
	err = radio_init(clk_m16, CLOCK_CONTROL_NRF5_K32SRC_ACCURACY, entropy,
   16d8e:	4b2d      	ldr	r3, [pc, #180]	; (16e44 <ll_init+0x144>)
   16d90:	9304      	str	r3, [sp, #16]
   16d92:	9501      	str	r5, [sp, #4]
   16d94:	231b      	movs	r3, #27
   16d96:	2501      	movs	r5, #1
   16d98:	f240 66bc 	movw	r6, #1724	; 0x6bc
   16d9c:	9303      	str	r3, [sp, #12]
   16d9e:	9302      	str	r3, [sp, #8]
   16da0:	4622      	mov	r2, r4
   16da2:	9605      	str	r6, [sp, #20]
   16da4:	9500      	str	r5, [sp, #0]
   16da6:	462b      	mov	r3, r5
   16da8:	2107      	movs	r1, #7
   16daa:	f7fe fc15 	bl	155d8 <radio_init>
	if (err) {
   16dae:	4604      	mov	r4, r0
   16db0:	b160      	cbz	r0, 16dcc <ll_init+0xcc>
		BT_ERR("Required RAM size: %d, supplied: %u.", err,
   16db2:	4b1e      	ldr	r3, [pc, #120]	; (16e2c <ll_init+0x12c>)
   16db4:	9303      	str	r3, [sp, #12]
   16db6:	e88d 0058 	stmia.w	sp, {r3, r4, r6}
   16dba:	4a1d      	ldr	r2, [pc, #116]	; (16e30 <ll_init+0x130>)
   16dbc:	4b1d      	ldr	r3, [pc, #116]	; (16e34 <ll_init+0x134>)
   16dbe:	491e      	ldr	r1, [pc, #120]	; (16e38 <ll_init+0x138>)
   16dc0:	4821      	ldr	r0, [pc, #132]	; (16e48 <ll_init+0x148>)
   16dc2:	f7eb fa67 	bl	2294 <printk>
		return -ENOMEM;
   16dc6:	f06f 000b 	mvn.w	r0, #11
   16dca:	e7a3      	b.n	16d14 <ll_init+0x14>
	ll_filter_reset(true);
   16dcc:	4628      	mov	r0, r5
   16dce:	f001 fab9 	bl	18344 <ll_filter_reset>
	IRQ_DIRECT_CONNECT(NRF5_IRQ_RADIO_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
   16dd2:	4622      	mov	r2, r4
   16dd4:	4621      	mov	r1, r4
   16dd6:	4628      	mov	r0, r5
   16dd8:	f7ea ff2a 	bl	1c30 <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_RTC0_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
   16ddc:	4622      	mov	r2, r4
   16dde:	4621      	mov	r1, r4
   16de0:	200b      	movs	r0, #11
   16de2:	f7ea ff25 	bl	1c30 <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_SWI4_IRQn, CONFIG_BT_CTLR_JOB_PRIO, swi4_nrf5_isr,
   16de6:	4622      	mov	r2, r4
   16de8:	4621      	mov	r1, r4
   16dea:	2018      	movs	r0, #24
   16dec:	f7ea ff20 	bl	1c30 <_irq_priority_set>
	irq_enable(NRF5_IRQ_RADIO_IRQn);
   16df0:	4628      	mov	r0, r5
   16df2:	f7ea feeb 	bl	1bcc <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RTC0_IRQn);
   16df6:	200b      	movs	r0, #11
   16df8:	f7ea fee8 	bl	1bcc <_arch_irq_enable>
	irq_enable(NRF5_IRQ_SWI4_IRQn);
   16dfc:	2018      	movs	r0, #24
   16dfe:	f7ea fee5 	bl	1bcc <_arch_irq_enable>
	return 0;
   16e02:	4620      	mov	r0, r4
   16e04:	e786      	b.n	16d14 <ll_init+0x14>
   16e06:	bf00      	nop
   16e08:	20001ec4 	.word	0x20001ec4
   16e0c:	00023390 	.word	0x00023390
   16e10:	00023364 	.word	0x00023364
   16e14:	20001ea4 	.word	0x20001ea4
   16e18:	00019155 	.word	0x00019155
   16e1c:	000190b1 	.word	0x000190b1
   16e20:	00019055 	.word	0x00019055
   16e24:	20001c34 	.word	0x20001c34
   16e28:	20001af4 	.word	0x20001af4
   16e2c:	00023dae 	.word	0x00023dae
   16e30:	00022d76 	.word	0x00022d76
   16e34:	00026c88 	.word	0x00026c88
   16e38:	000272d8 	.word	0x000272d8
   16e3c:	00026c90 	.word	0x00026c90
   16e40:	0002339b 	.word	0x0002339b
   16e44:	20001438 	.word	0x20001438
   16e48:	00026cb6 	.word	0x00026cb6

00016e4c <ll_adv_set_get>:


struct ll_adv_set *ll_adv_set_get(void)
{
	return &ll_adv;
}
   16e4c:	4800      	ldr	r0, [pc, #0]	; (16e50 <ll_adv_set_get+0x4>)
   16e4e:	4770      	bx	lr
   16e50:	20001eca 	.word	0x20001eca

00016e54 <ll_adv_params_set>:
u32_t ll_adv_params_set(u8_t Adv_handle, u16_t evt_prop, u16_t interval,
			u8_t own_addr_type,
			u8_t direct_addr_type, u8_t const *const direct_addr,
			u8_t chan_map, u8_t filter_policy, u8_t *tx_pwr,
			u8_t phy_p, u8_t skip, u8_t phy_s, u8_t sid, u8_t sreq)
{
   16e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16e58:	b08b      	sub	sp, #44	; 0x2c
   16e5a:	469b      	mov	fp, r3
   16e5c:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
   16e60:	9303      	str	r3, [sp, #12]
   16e62:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
   16e66:	9304      	str	r3, [sp, #16]
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   16e68:	2300      	movs	r3, #0
   16e6a:	f88d 3020 	strb.w	r3, [sp, #32]
   16e6e:	2306      	movs	r3, #6
   16e70:	2601      	movs	r6, #1
   16e72:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   16e76:	2502      	movs	r5, #2
   16e78:	2307      	movs	r3, #7
{
   16e7a:	4689      	mov	r9, r1
   16e7c:	4614      	mov	r4, r2
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   16e7e:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
   16e82:	f88d 5023 	strb.w	r5, [sp, #35]	; 0x23
   16e86:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
   16e8a:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	struct radio_adv_data *radio_adv_data;
	struct radio_adv_data *radio_aux_adv_data;
	struct pdu_adv *pdu;
	struct pdu_adv *aux_pdu;
	
	if (ll_adv_is_enabled()) {
   16e8e:	f7fe fc81 	bl	15794 <ll_adv_is_enabled>
   16e92:	4682      	mov	sl, r0
   16e94:	2800      	cmp	r0, #0
   16e96:	f040 81a3 	bne.w	171e0 <ll_adv_params_set+0x38c>

#if defined(CONFIG_BT_CTLR_ADV_EXT)
	/* TODO: check and fail (0x12, invalid HCI cmd param) if invalid
	 * evt_prop bits.
	 */
	ll_adv.max_skip = skip;
   16e9a:	4b5e      	ldr	r3, [pc, #376]	; (17014 <ll_adv_params_set+0x1c0>)
   16e9c:	f89d 2068 	ldrb.w	r2, [sp, #104]	; 0x68
   16ea0:	731a      	strb	r2, [r3, #12]
	
	u8_t adv_type;
	ll_adv.phy_p = BIT(0);
   16ea2:	7a1a      	ldrb	r2, [r3, #8]
		adv_type = 0x05;
	}			
	/* extended */
	//if (adv_type > 0x04) {
		/* legacy */
		if (evt_prop & BIT(4)) {
   16ea4:	f019 0f10 	tst.w	r9, #16
	ll_adv.phy_p = BIT(0);
   16ea8:	f366 0202 	bfi	r2, r6, #0, #3
   16eac:	721a      	strb	r2, [r3, #8]
		if (evt_prop & BIT(4)) {
   16eae:	f000 809f 	beq.w	16ff0 <ll_adv_params_set+0x19c>
			u8_t const leg_adv_type[] = { 0x03, 0x04, 0x02, 0x00};
   16eb2:	2203      	movs	r2, #3
   16eb4:	f88d 201c 	strb.w	r2, [sp, #28]

			adv_type = leg_adv_type[evt_prop & 0x03];

			/* high duty cycle directed */
			if (evt_prop & BIT(3)) {
   16eb8:	f019 0f08 	tst.w	r9, #8
			u8_t const leg_adv_type[] = { 0x03, 0x04, 0x02, 0x00};
   16ebc:	f04f 0204 	mov.w	r2, #4
   16ec0:	f88d 201d 	strb.w	r2, [sp, #29]
   16ec4:	f88d 501e 	strb.w	r5, [sp, #30]
   16ec8:	f88d 001f 	strb.w	r0, [sp, #31]
			if (evt_prop & BIT(3)) {
   16ecc:	d108      	bne.n	16ee0 <ll_adv_params_set+0x8c>
			adv_type = leg_adv_type[evt_prop & 0x03];
   16ece:	a90a      	add	r1, sp, #40	; 0x28
   16ed0:	f009 0203 	and.w	r2, r9, #3
   16ed4:	440a      	add	r2, r1
   16ed6:	f812 1c0c 	ldrb.w	r1, [r2, #-12]
	/* remember params so that set adv/scan data and adv enable
	 * interface can correctly update adv/scan data in the
	 * double buffer between caller and controller context.
	 */
	/* Set interval for Undirected or Low Duty Cycle Directed Advertising */
	if (adv_type == 0x01) {
   16eda:	42b1      	cmp	r1, r6
   16edc:	f040 8098 	bne.w	17010 <ll_adv_params_set+0x1bc>
		ll_adv.interval = 0;  				//interval = 0 for ADV_DIRECT_IND
   16ee0:	2200      	movs	r2, #0
   16ee2:	815a      	strh	r2, [r3, #10]
   16ee4:	2101      	movs	r1, #1
	} else {
		ll_adv.interval = interval;
	}
	ll_adv.chan_map = chan_map;  			
   16ee6:	781a      	ldrb	r2, [r3, #0]
   16ee8:	f89d 0058 	ldrb.w	r0, [sp, #88]	; 0x58
   16eec:	9105      	str	r1, [sp, #20]
   16eee:	f360 0202 	bfi	r2, r0, #0, #3
	ll_adv.filter_policy = filter_policy;
   16ef2:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
   16ef6:	f360 02c4 	bfi	r2, r0, #3, #2
   16efa:	701a      	strb	r2, [r3, #0]
	
	/* update the "current" primary adv data and Aux packet */
	radio_adv_data = radio_adv_data_get();
   16efc:	f7fe fc3e 	bl	1577c <radio_adv_data_get>
   16f00:	4606      	mov	r6, r0
	radio_aux_adv_data = radio_aux_adv_data_get();
   16f02:	f7fe fc3f 	bl	15784 <radio_aux_adv_data_get>

	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
	aux_pdu = (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0];

	pdu->type = pdu_adv_type[adv_type];
   16f06:	9905      	ldr	r1, [sp, #20]
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   16f08:	f896 5203 	ldrb.w	r5, [r6, #515]	; 0x203
	aux_pdu = (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0];
   16f0c:	f890 7203 	ldrb.w	r7, [r0, #515]	; 0x203
	pdu->type = pdu_adv_type[adv_type];
   16f10:	aa0a      	add	r2, sp, #40	; 0x28
   16f12:	4411      	add	r1, r2
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   16f14:	eb05 2505 	add.w	r5, r5, r5, lsl #8
	pdu->type = pdu_adv_type[adv_type];
   16f18:	f811 2c08 	ldrb.w	r2, [r1, #-8]
   16f1c:	5d71      	ldrb	r1, [r6, r5]
   16f1e:	f002 020f 	and.w	r2, r2, #15
   16f22:	f362 0103 	bfi	r1, r2, #0, #4
   16f26:	5571      	strb	r1, [r6, r5]
	aux_pdu = (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0];
   16f28:	eb07 2707 	add.w	r7, r7, r7, lsl #8
	radio_aux_adv_data = radio_aux_adv_data_get();
   16f2c:	4603      	mov	r3, r0
	aux_pdu->type = pdu->type;
   16f2e:	5dc1      	ldrb	r1, [r0, r7]
   16f30:	f362 0103 	bfi	r1, r2, #0, #4
   16f34:	55c1      	strb	r1, [r0, r7]
	
	pdu->rfu = 0;
   16f36:	5d72      	ldrb	r2, [r6, r5]
   16f38:	f36f 1204 	bfc	r2, #4, #1
   16f3c:	5572      	strb	r2, [r6, r5]
	aux_pdu->rfu = pdu->rfu;
   16f3e:	5dc2      	ldrb	r2, [r0, r7]
   16f40:	f36f 1204 	bfc	r2, #4, #1
   16f44:	55c2      	strb	r2, [r0, r7]

	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) && 
   16f46:	5d72      	ldrb	r2, [r6, r5]
   16f48:	f002 010f 	and.w	r1, r2, #15
   16f4c:	2901      	cmp	r1, #1
	    ((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
	     (pdu->type == PDU_ADV_TYPE_DIRECT_IND))) {
		pdu->chan_sel = 1;           // could be same for ext adv  LE Channel Selection Algorithm #2 feature 
   16f4e:	bf95      	itete	ls
   16f50:	f042 0220 	orrls.w	r2, r2, #32
		aux_pdu->chan_sel = pdu->chan_sel;
	} else {
		pdu->chan_sel = 0;
   16f54:	f36f 1245 	bfchi	r2, #5, #1
		pdu->chan_sel = 1;           // could be same for ext adv  LE Channel Selection Algorithm #2 feature 
   16f58:	5572      	strbls	r2, [r6, r5]
		pdu->chan_sel = 0;
   16f5a:	5572      	strbhi	r2, [r6, r5]
		aux_pdu->chan_sel = pdu->chan_sel;
   16f5c:	bf95      	itete	ls
   16f5e:	5dc2      	ldrbls	r2, [r0, r7]
		aux_pdu->chan_sel = pdu->chan_sel;
   16f60:	5dc2      	ldrbhi	r2, [r0, r7]
		aux_pdu->chan_sel = pdu->chan_sel;
   16f62:	f042 0220 	orrls.w	r2, r2, #32
		aux_pdu->chan_sel = pdu->chan_sel;
   16f66:	f36f 1245 	bfchi	r2, #5, #1
   16f6a:	55c2      	strb	r2, [r0, r7]
	aux_pdu = (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0];
   16f6c:	eb00 0807 	add.w	r8, r0, r7
	}

#if defined(CONFIG_BT_CTLR_PRIVACY)
	ll_adv.own_addr_type = own_addr_type;
   16f70:	4828      	ldr	r0, [pc, #160]	; (17014 <ll_adv_params_set+0x1c0>)
   16f72:	7802      	ldrb	r2, [r0, #0]
   16f74:	f36b 1246 	bfi	r2, fp, #5, #2
   16f78:	7002      	strb	r2, [r0, #0]
	if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   16f7a:	b2d2      	uxtb	r2, r2
   16f7c:	0651      	lsls	r1, r2, #25
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   16f7e:	eb06 0405 	add.w	r4, r6, r5
	if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   16f82:	d50a      	bpl.n	16f9a <ll_adv_params_set+0x146>
   16f84:	9305      	str	r3, [sp, #20]
	    ll_adv.own_addr_type == BT_ADDR_LE_RANDOM_ID) {
		ll_adv.id_addr_type = direct_addr_type;
   16f86:	9b03      	ldr	r3, [sp, #12]
		memcpy(&ll_adv.id_addr, direct_addr, BDADDR_SIZE);
   16f88:	9915      	ldr	r1, [sp, #84]	; 0x54
		ll_adv.id_addr_type = direct_addr_type;
   16f8a:	f363 12c7 	bfi	r2, r3, #7, #1
   16f8e:	f800 2b02 	strb.w	r2, [r0], #2
		memcpy(&ll_adv.id_addr, direct_addr, BDADDR_SIZE);
   16f92:	2206      	movs	r2, #6
   16f94:	f7e9 fbfd 	bl	792 <memcpy>
   16f98:	9b05      	ldr	r3, [sp, #20]
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */
	pdu->tx_addr =  own_addr_type & 0x1;
   16f9a:	5d72      	ldrb	r2, [r6, r5]
   16f9c:	f00b 0b01 	and.w	fp, fp, #1
   16fa0:	f36b 1286 	bfi	r2, fp, #6, #1
   16fa4:	5572      	strb	r2, [r6, r5]
	aux_pdu->tx_addr = 0;						//not sending transmitting address in aux packet
   16fa6:	5dda      	ldrb	r2, [r3, r7]
   16fa8:	f36f 1286 	bfc	r2, #6, #1
   16fac:	55da      	strb	r2, [r3, r7]
	pdu->rx_addr = 0;  							
   16fae:	5d72      	ldrb	r2, [r6, r5]
   16fb0:	f36f 12c7 	bfc	r2, #7, #1
   16fb4:	5572      	strb	r2, [r6, r5]
	aux_pdu->rx_addr = pdu->rx_addr;
   16fb6:	5dda      	ldrb	r2, [r3, r7]
   16fb8:	f36f 12c7 	bfc	r2, #7, #1
   16fbc:	55da      	strb	r2, [r3, r7]
	if(evt_prop & BIT(2)){							// for directed ADV wuth public address
   16fbe:	f019 0204 	ands.w	r2, r9, #4
		pdu->rx_addr = 0;//direct_addr_type;
   16fc2:	bf1e      	ittt	ne
   16fc4:	5d73      	ldrbne	r3, [r6, r5]
   16fc6:	f36f 13c7 	bfcne	r3, #7, #1
   16fca:	5573      	strbne	r3, [r6, r5]
	}

	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   16fcc:	5d73      	ldrb	r3, [r6, r5]
   16fce:	f003 010f 	and.w	r1, r3, #15
   16fd2:	2901      	cmp	r1, #1
   16fd4:	d120      	bne.n	17018 <ll_adv_params_set+0x1c4>
		pdu->rx_addr = direct_addr_type;
   16fd6:	9a03      	ldr	r2, [sp, #12]
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
   16fd8:	9915      	ldr	r1, [sp, #84]	; 0x54
		pdu->rx_addr = direct_addr_type;
   16fda:	f362 13c7 	bfi	r3, r2, #7, #1
   16fde:	5573      	strb	r3, [r6, r5]
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
   16fe0:	2206      	movs	r2, #6
   16fe2:	f104 0008 	add.w	r0, r4, #8
   16fe6:	f7e9 fbd4 	bl	792 <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
   16fea:	230c      	movs	r3, #12
		/* NOTE: AdvA, filled at enable and RPA timeout */
		
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	} else if (pdu->len == 0) {
		pdu->len = BDADDR_SIZE;
   16fec:	7063      	strb	r3, [r4, #1]
   16fee:	e0d2      	b.n	17196 <ll_adv_params_set+0x342>
			if (((evt_prop & 0x03) == 0x03) ||
   16ff0:	f009 0203 	and.w	r2, r9, #3
   16ff4:	2a03      	cmp	r2, #3
   16ff6:	f000 80f6 	beq.w	171e6 <ll_adv_params_set+0x392>
   16ffa:	f009 020c 	and.w	r2, r9, #12
   16ffe:	2a0c      	cmp	r2, #12
   17000:	f000 80f1 	beq.w	171e6 <ll_adv_params_set+0x392>
			ll_adv.phy_p = phy_p;
   17004:	7a1a      	ldrb	r2, [r3, #8]
   17006:	9904      	ldr	r1, [sp, #16]
   17008:	f361 0202 	bfi	r2, r1, #0, #3
   1700c:	721a      	strb	r2, [r3, #8]
			adv_type = 0x05; /* PDU_ADV_TYPE_EXT_IND */
   1700e:	2105      	movs	r1, #5
		ll_adv.interval = interval;
   17010:	815c      	strh	r4, [r3, #10]
   17012:	e768      	b.n	16ee6 <ll_adv_params_set+0x92>
   17014:	20001eca 	.word	0x20001eca
	} else if (pdu->type == PDU_ADV_TYPE_EXT_IND) {
   17018:	2907      	cmp	r1, #7
   1701a:	f040 80dc 	bne.w	171d6 <ll_adv_params_set+0x382>
		p->ext_hdr_len = 0;
   1701e:	78a3      	ldrb	r3, [r4, #2]
		p->adv_mode = 0x00;//evt_prop & 0x03;
   17020:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   17024:	f36f 1387 	bfc	r3, #6, #2
   17028:	70a3      	strb	r3, [r4, #2]
		aux_p->ext_hdr_len = p->ext_hdr_len;
   1702a:	f898 3002 	ldrb.w	r3, [r8, #2]
		aux_p->adv_mode = p->adv_mode;
   1702e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   17032:	f36f 1387 	bfc	r3, #6, #2
   17036:	f888 3002 	strb.w	r3, [r8, #2]
		if (!((evt_prop & BIT(5)) && !p->adv_mode && (phy_p != BIT(2)))) {
   1703a:	f019 0f20 	tst.w	r9, #32
		*(u8_t *)h = 0;
   1703e:	f04f 0300 	mov.w	r3, #0
   17042:	70e3      	strb	r3, [r4, #3]
		p = (void *)&pdu->adv_ext_ind;
   17044:	f104 0002 	add.w	r0, r4, #2
		ptr = (u8_t *)h + sizeof(*h);
   17048:	f104 0504 	add.w	r5, r4, #4
		aux_p = (void *)&aux_pdu->adv_ext_ind;
   1704c:	f108 0102 	add.w	r1, r8, #2
		aux_ptr = (u8_t *)aux_h + sizeof(*aux_h);
   17050:	f108 0604 	add.w	r6, r8, #4
		*(u8_t *)aux_h = 0;
   17054:	f888 3003 	strb.w	r3, [r8, #3]
		if (!((evt_prop & BIT(5)) && !p->adv_mode && (phy_p != BIT(2)))) {
   17058:	d007      	beq.n	1706a <ll_adv_params_set+0x216>
   1705a:	78a3      	ldrb	r3, [r4, #2]
   1705c:	f013 0fc0 	tst.w	r3, #192	; 0xc0
   17060:	d103      	bne.n	1706a <ll_adv_params_set+0x216>
   17062:	9b04      	ldr	r3, [sp, #16]
   17064:	2b04      	cmp	r3, #4
   17066:	f040 80b0 	bne.w	171ca <ll_adv_params_set+0x376>
			h->adv_addr = 1;
   1706a:	78e3      	ldrb	r3, [r4, #3]
   1706c:	f043 0301 	orr.w	r3, r3, #1
   17070:	70e3      	strb	r3, [r4, #3]
			ptr += BDADDR_SIZE;
   17072:	f104 030a 	add.w	r3, r4, #10
		if(evt_prop & BIT(2)){
   17076:	b122      	cbz	r2, 17082 <ll_adv_params_set+0x22e>
			h->tgt_addr = 1;
   17078:	78e2      	ldrb	r2, [r4, #3]
   1707a:	f042 0202 	orr.w	r2, r2, #2
   1707e:	70e2      	strb	r2, [r4, #3]
			ptr += BDADDR_SIZE;
   17080:	3306      	adds	r3, #6
		if(evt_prop & BIT(6)){
   17082:	f019 0f40 	tst.w	r9, #64	; 0x40
   17086:	f000 80a2 	beq.w	171ce <ll_adv_params_set+0x37a>
			h->adi = 1;
   1708a:	78e2      	ldrb	r2, [r4, #3]
			adi_ptr = ptr;
   1708c:	9301      	str	r3, [sp, #4]
			h->adi = 1;
   1708e:	f042 0208 	orr.w	r2, r2, #8
   17092:	70e2      	strb	r2, [r4, #3]
			aux_h->adi = h->adi;
   17094:	f898 2003 	ldrb.w	r2, [r8, #3]
			aux_adi_ptr = aux_ptr;
   17098:	9602      	str	r6, [sp, #8]
			aux_h->adi = h->adi;
   1709a:	f042 0208 	orr.w	r2, r2, #8
   1709e:	f888 2003 	strb.w	r2, [r8, #3]
			h->aux_ptr = 1;
   170a2:	78e2      	ldrb	r2, [r4, #3]
			h->tx_pwr = 1;
   170a4:	f042 0250 	orr.w	r2, r2, #80	; 0x50
   170a8:	70e2      	strb	r2, [r4, #3]
			aux_h->tx_pwr = h->tx_pwr;
   170aa:	f898 2003 	ldrb.w	r2, [r8, #3]
			ptr += sizeof(*adi_ptr);
   170ae:	1c9f      	adds	r7, r3, #2
			aux_h->tx_pwr = h->tx_pwr;
   170b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   170b4:	f888 2003 	strb.w	r2, [r8, #3]
			ptr += sizeof(*adi_ptr);
   170b8:	9700      	str	r7, [sp, #0]
			aux_ptr ++;
   170ba:	f108 0207 	add.w	r2, r8, #7
			ptr ++;
   170be:	3306      	adds	r3, #6
		len = ptr - (u8_t *)p;
   170c0:	1a1b      	subs	r3, r3, r0
   170c2:	b2db      	uxtb	r3, r3
		if (len > (offsetof(struct pdu_adv_com_ext_adv,
   170c4:	2b02      	cmp	r3, #2
			p->ext_hdr_len = (len -
   170c6:	bf8c      	ite	hi
   170c8:	78a0      	ldrbhi	r0, [r4, #2]
			pdu->len = offsetof(struct pdu_adv_com_ext_adv,
   170ca:	2301      	movls	r3, #1
   170cc:	7063      	strb	r3, [r4, #1]
			p->ext_hdr_len = (len -
   170ce:	bf88      	it	hi
   170d0:	f103 37ff 	addhi.w	r7, r3, #4294967295	; 0xffffffff
		aux_len = aux_ptr - (u8_t *)aux_p;
   170d4:	eba2 0301 	sub.w	r3, r2, r1
			p->ext_hdr_len = (len -
   170d8:	bf88      	it	hi
   170da:	f367 0005 	bfihi	r0, r7, #0, #6
		aux_len = aux_ptr - (u8_t *)aux_p;
   170de:	b2db      	uxtb	r3, r3
			p->ext_hdr_len = (len -
   170e0:	bf88      	it	hi
   170e2:	70a0      	strbhi	r0, [r4, #2]
   170e4:	4a41      	ldr	r2, [pc, #260]	; (171ec <ll_adv_params_set+0x398>)
		if (aux_len > (offsetof(struct pdu_adv_com_ext_adv,
   170e6:	2b02      	cmp	r3, #2
			aux_p->ext_hdr_len = (aux_len -
   170e8:	bf82      	ittt	hi
   170ea:	f898 1002 	ldrbhi.w	r1, [r8, #2]
			aux_pdu->len = aux_len;
   170ee:	f888 3001 	strbhi.w	r3, [r8, #1]
			aux_p->ext_hdr_len = (aux_len -
   170f2:	f103 30ff 	addhi.w	r0, r3, #4294967295	; 0xffffffff
			aux_ptr_len = aux_len;
   170f6:	7013      	strb	r3, [r2, #0]
		if(h->adv_addr){
   170f8:	78e3      	ldrb	r3, [r4, #3]
			aux_p->ext_hdr_len = (aux_len -
   170fa:	bf8b      	itete	hi
   170fc:	f360 0105 	bfihi	r1, r0, #0, #6
			aux_pdu->len = offsetof(struct pdu_adv_com_ext_adv,
   17100:	2101      	movls	r1, #1
			aux_p->ext_hdr_len = (aux_len -
   17102:	f888 1002 	strbhi.w	r1, [r8, #2]
			aux_pdu->len = offsetof(struct pdu_adv_com_ext_adv,
   17106:	f888 1001 	strbls.w	r1, [r8, #1]
		if(h->adv_addr){
   1710a:	07da      	lsls	r2, r3, #31
			ptr += BDADDR_SIZE;
   1710c:	bf48      	it	mi
   1710e:	f104 050a 	addmi.w	r5, r4, #10
		if(h->tgt_addr){
   17112:	079f      	lsls	r7, r3, #30
   17114:	d505      	bpl.n	17122 <ll_adv_params_set+0x2ce>
			memcpy(ptr, direct_addr, BDADDR_SIZE);
   17116:	4628      	mov	r0, r5
   17118:	2206      	movs	r2, #6
   1711a:	9915      	ldr	r1, [sp, #84]	; 0x54
   1711c:	f7e9 fb39 	bl	792 <memcpy>
			ptr += BDADDR_SIZE;
   17120:	3506      	adds	r5, #6
		if(h->adi){
   17122:	78e2      	ldrb	r2, [r4, #3]
   17124:	0710      	lsls	r0, r2, #28
   17126:	d517      	bpl.n	17158 <ll_adv_params_set+0x304>
			adi_ptr->did = 0x00;
   17128:	9b01      	ldr	r3, [sp, #4]
   1712a:	2100      	movs	r1, #0
   1712c:	7019      	strb	r1, [r3, #0]
   1712e:	785b      	ldrb	r3, [r3, #1]
			adi_ptr->sid = 0x03;//sid & 0x0f;
   17130:	2003      	movs	r0, #3
   17132:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   17136:	f360 1307 	bfi	r3, r0, #4, #4
   1713a:	9801      	ldr	r0, [sp, #4]
   1713c:	7043      	strb	r3, [r0, #1]
			aux_adi_ptr->did = adi_ptr->did;
   1713e:	9b02      	ldr	r3, [sp, #8]
   17140:	7019      	strb	r1, [r3, #0]
   17142:	785b      	ldrb	r3, [r3, #1]
			aux_adi_ptr->sid = 0x02;//adi_ptr->sid;
   17144:	2102      	movs	r1, #2
   17146:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   1714a:	f361 1307 	bfi	r3, r1, #4, #4
   1714e:	9902      	ldr	r1, [sp, #8]
			ptr += sizeof(*adi_ptr);
   17150:	3502      	adds	r5, #2
			aux_adi_ptr->sid = 0x02;//adi_ptr->sid;
   17152:	704b      	strb	r3, [r1, #1]
			aux_ptr += sizeof(*aux_adi_ptr);
   17154:	f108 0606 	add.w	r6, r8, #6
		if(h->aux_ptr){
   17158:	06d1      	lsls	r1, r2, #27
   1715a:	d50d      	bpl.n	17178 <ll_adv_params_set+0x324>
			ap->offs_units = 0;
   1715c:	9900      	ldr	r1, [sp, #0]
   1715e:	2303      	movs	r3, #3
   17160:	700b      	strb	r3, [r1, #0]
			ap->offs = 00;
   17162:	9b00      	ldr	r3, [sp, #0]
   17164:	2100      	movs	r1, #0
   17166:	7059      	strb	r1, [r3, #1]
   17168:	789b      	ldrb	r3, [r3, #2]
			ap->phy = 0;
   1716a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
   1716e:	f361 1347 	bfi	r3, r1, #5, #3
   17172:	9900      	ldr	r1, [sp, #0]
			ptr += sizeof(*ap);
   17174:	3503      	adds	r5, #3
			ap->phy = 0;
   17176:	708b      	strb	r3, [r1, #2]
		if (h->tx_pwr) {
   17178:	0653      	lsls	r3, r2, #25
   1717a:	d50a      	bpl.n	17192 <ll_adv_params_set+0x33e>
			if (tx_pwr) {
   1717c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1717e:	b343      	cbz	r3, 171d2 <ll_adv_params_set+0x37e>
				if (*tx_pwr != 0x7F) {
   17180:	781b      	ldrb	r3, [r3, #0]
   17182:	2b7f      	cmp	r3, #127	; 0x7f
   17184:	d102      	bne.n	1718c <ll_adv_params_set+0x338>
					*tx_pwr = _tx_pwr;
   17186:	9a18      	ldr	r2, [sp, #96]	; 0x60
   17188:	2300      	movs	r3, #0
   1718a:	7013      	strb	r3, [r2, #0]
			*ptr = _tx_pwr;
   1718c:	702b      	strb	r3, [r5, #0]
			*aux_ptr = _tx_pwr;
   1718e:	f806 3b01 	strb.w	r3, [r6], #1
		set_data_ptr = aux_ptr; 
   17192:	4b17      	ldr	r3, [pc, #92]	; (171f0 <ll_adv_params_set+0x39c>)
   17194:	601e      	str	r6, [r3, #0]
	}

	/* update the current scan data */
	radio_adv_data = radio_scan_data_get();
   17196:	f7fe faf9 	bl	1578c <radio_scan_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   1719a:	f890 2203 	ldrb.w	r2, [r0, #515]	; 0x203
   1719e:	eb02 2202 	add.w	r2, r2, r2, lsl #8
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   171a2:	2404      	movs	r4, #4
   171a4:	5c83      	ldrb	r3, [r0, r2]
   171a6:	f364 0303 	bfi	r3, r4, #0, #4
	pdu->rfu = 0;
	pdu->chan_sel = 0;
	pdu->tx_addr = own_addr_type & 0x1;
   171aa:	f003 03cf 	and.w	r3, r3, #207	; 0xcf
   171ae:	f36b 1386 	bfi	r3, fp, #6, #1
	pdu->rx_addr = 0;
   171b2:	f36f 13c7 	bfc	r3, #7, #1
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   171b6:	1881      	adds	r1, r0, r2
	pdu->rx_addr = 0;
   171b8:	5483      	strb	r3, [r0, r2]
	if (pdu->len == 0) {
   171ba:	784b      	ldrb	r3, [r1, #1]
   171bc:	b90b      	cbnz	r3, 171c2 <ll_adv_params_set+0x36e>
		pdu->len = BDADDR_SIZE;
   171be:	2306      	movs	r3, #6
   171c0:	704b      	strb	r3, [r1, #1]
	}

	return 0;
}
   171c2:	4650      	mov	r0, sl
   171c4:	b00b      	add	sp, #44	; 0x2c
   171c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ptr = (u8_t *)h + sizeof(*h);
   171ca:	462b      	mov	r3, r5
   171cc:	e753      	b.n	17076 <ll_adv_params_set+0x222>
		aux_ptr = (u8_t *)aux_h + sizeof(*aux_h);
   171ce:	4632      	mov	r2, r6
   171d0:	e776      	b.n	170c0 <ll_adv_params_set+0x26c>
			_tx_pwr = 0;
   171d2:	9b18      	ldr	r3, [sp, #96]	; 0x60
   171d4:	e7da      	b.n	1718c <ll_adv_params_set+0x338>
	} else if (pdu->len == 0) {
   171d6:	7863      	ldrb	r3, [r4, #1]
   171d8:	2b00      	cmp	r3, #0
   171da:	d1dc      	bne.n	17196 <ll_adv_params_set+0x342>
		pdu->len = BDADDR_SIZE;
   171dc:	2306      	movs	r3, #6
   171de:	e705      	b.n	16fec <ll_adv_params_set+0x198>
		return BT_HCI_ERR_CMD_DISALLOWED;
   171e0:	f04f 0a0c 	mov.w	sl, #12
   171e4:	e7ed      	b.n	171c2 <ll_adv_params_set+0x36e>
				return 0x12; /* invalid HCI cmd param */
   171e6:	f04f 0a12 	mov.w	sl, #18
   171ea:	e7ea      	b.n	171c2 <ll_adv_params_set+0x36e>
   171ec:	20001ec8 	.word	0x20001ec8
   171f0:	20001ed8 	.word	0x20001ed8

000171f4 <ll_adv_data_set>:

void ll_adv_data_set(u8_t len, u8_t const *const data)
{
   171f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   171f8:	4688      	mov	r8, r1
   171fa:	4606      	mov	r6, r0
	struct pdu_adv *pdu;
	u8_t last;


	/* Dont update data if directed or extended advertising. */
	radio_adv_data = radio_adv_data_get();
   171fc:	f7fe fabe 	bl	1577c <radio_adv_data_get>
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   17200:	f890 5203 	ldrb.w	r5, [r0, #515]	; 0x203
   17204:	eb05 2205 	add.w	r2, r5, r5, lsl #8
	radio_adv_data = radio_adv_data_get();
   17208:	4604      	mov	r4, r0
	if(prev->type == PDU_ADV_TYPE_EXT_IND){
   1720a:	f810 e002 	ldrb.w	lr, [r0, r2]
   1720e:	f00e 030f 	and.w	r3, lr, #15
   17212:	2b07      	cmp	r3, #7
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   17214:	eb00 0102 	add.w	r1, r0, r2
	if(prev->type == PDU_ADV_TYPE_EXT_IND){
   17218:	d115      	bne.n	17246 <ll_adv_data_set+0x52>
	
		struct radio_adv_data *radio_aux_adv_data;
		struct pdu_adv *aux_pdu;
		u8_t last;

		radio_aux_adv_data = radio_aux_adv_data_get();
   1721a:	f7fe fab3 	bl	15784 <radio_aux_adv_data_get>
		aux_pdu =  (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0]; 			//cofused about data[radio_aux_adv_data->last][0] name
   1721e:	f890 5203 	ldrb.w	r5, [r0, #515]	; 0x203

		memcpy(set_data_ptr, data, len);
   17222:	4b28      	ldr	r3, [pc, #160]	; (172c4 <ll_adv_data_set+0xd0>)
		aux_pdu =  (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0]; 			//cofused about data[radio_aux_adv_data->last][0] name
   17224:	eb05 2505 	add.w	r5, r5, r5, lsl #8
   17228:	4405      	add	r5, r0
		memcpy(set_data_ptr, data, len);
   1722a:	4632      	mov	r2, r6
   1722c:	6818      	ldr	r0, [r3, #0]
   1722e:	4641      	mov	r1, r8
   17230:	f7e9 faaf 	bl	792 <memcpy>
		aux_pdu->len = aux_ptr_len + len;
   17234:	4b24      	ldr	r3, [pc, #144]	; (172c8 <ll_adv_data_set+0xd4>)
   17236:	781b      	ldrb	r3, [r3, #0]
   17238:	441e      	add	r6, r3
		radio_adv_data->last = last;
   1723a:	2300      	movs	r3, #0
		aux_pdu->len = aux_ptr_len + len;
   1723c:	706e      	strb	r6, [r5, #1]
		radio_adv_data->last = last;
   1723e:	f884 3203 	strb.w	r3, [r4, #515]	; 0x203
   17242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}else{
		if ((prev->type == PDU_ADV_TYPE_DIRECT_IND)) {
   17246:	2b01      	cmp	r3, #1
   17248:	d039      	beq.n	172be <ll_adv_data_set+0xca>
		
		return;
		}

		/* use the last index in double buffer, */
		if (radio_adv_data->first == radio_adv_data->last) {
   1724a:	f890 3202 	ldrb.w	r3, [r0, #514]	; 0x202
   1724e:	42ab      	cmp	r3, r5
   17250:	d104      	bne.n	1725c <ll_adv_data_set+0x68>
			last = radio_adv_data->last + 1;
   17252:	3501      	adds	r5, #1
   17254:	b2ed      	uxtb	r5, r5
			if (last == DOUBLE_BUFFER_SIZE) {
				last = 0;
   17256:	2d02      	cmp	r5, #2
   17258:	bf08      	it	eq
   1725a:	2500      	moveq	r5, #0
		} else {
			last = radio_adv_data->last;
		}

		/* update adv pdu fields. */
		pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
   1725c:	eb05 2305 	add.w	r3, r5, r5, lsl #8
   17260:	18e7      	adds	r7, r4, r3
		pdu->type = prev->type;
   17262:	5ce0      	ldrb	r0, [r4, r3]
   17264:	f36e 0003 	bfi	r0, lr, #0, #4
		pdu->rfu = 0;
   17268:	f36f 1004 	bfc	r0, #4, #1
   1726c:	54e0      	strb	r0, [r4, r3]

		if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2)) {
			pdu->chan_sel = prev->chan_sel;
   1726e:	5ca0      	ldrb	r0, [r4, r2]
   17270:	f814 e003 	ldrb.w	lr, [r4, r3]
   17274:	f3c0 1040 	ubfx	r0, r0, #5, #1
   17278:	f360 1e45 	bfi	lr, r0, #5, #1
   1727c:	f804 e003 	strb.w	lr, [r4, r3]
		} else {
			pdu->chan_sel = 0;
		}

		pdu->tx_addr = prev->tx_addr;
   17280:	5ca0      	ldrb	r0, [r4, r2]
   17282:	fa5f fe8e 	uxtb.w	lr, lr
   17286:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1728a:	f360 1e86 	bfi	lr, r0, #6, #1
   1728e:	f804 e003 	strb.w	lr, [r4, r3]
		pdu->rx_addr = prev->rx_addr;
   17292:	5ca2      	ldrb	r2, [r4, r2]
   17294:	fa5f f08e 	uxtb.w	r0, lr
   17298:	09d2      	lsrs	r2, r2, #7
   1729a:	f362 10c7 	bfi	r0, r2, #7, #1
   1729e:	54e0      	strb	r0, [r4, r3]
		
		
		memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
   172a0:	2206      	movs	r2, #6
   172a2:	3102      	adds	r1, #2
   172a4:	1cb8      	adds	r0, r7, #2
   172a6:	f7e9 fa74 	bl	792 <memcpy>
		memcpy(&pdu->adv_ind.data[0], data, len);
   172aa:	4632      	mov	r2, r6
   172ac:	4641      	mov	r1, r8
   172ae:	f107 0008 	add.w	r0, r7, #8
		pdu->len = BDADDR_SIZE + len;
   172b2:	3606      	adds	r6, #6
		memcpy(&pdu->adv_ind.data[0], data, len);
   172b4:	f7e9 fa6d 	bl	792 <memcpy>
		pdu->len = BDADDR_SIZE + len;
   172b8:	707e      	strb	r6, [r7, #1]
		
		/* commit the update so controller picks it. */
		radio_adv_data->last = last;
   172ba:	f884 5203 	strb.w	r5, [r4, #515]	; 0x203
   172be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   172c2:	bf00      	nop
   172c4:	20001ed8 	.word	0x20001ed8
   172c8:	20001ec8 	.word	0x20001ec8

000172cc <ll_scan_data_set>:
	
//#endif	/* CONFIG_BT_CTLR_ADV_EXT */
}

void ll_scan_data_set(u8_t len, u8_t const *const data)
{
   172cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   172d0:	4606      	mov	r6, r0
   172d2:	460f      	mov	r7, r1
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* use the last index in double buffer, */
	radio_scan_data = radio_scan_data_get();
   172d4:	f7fe fa5a 	bl	1578c <radio_scan_data_get>
	if (radio_scan_data->first == radio_scan_data->last) {
   172d8:	f890 3203 	ldrb.w	r3, [r0, #515]	; 0x203
   172dc:	f890 2202 	ldrb.w	r2, [r0, #514]	; 0x202
   172e0:	429a      	cmp	r2, r3
	radio_scan_data = radio_scan_data_get();
   172e2:	4604      	mov	r4, r0
	if (radio_scan_data->first == radio_scan_data->last) {
   172e4:	d131      	bne.n	1734a <ll_scan_data_set+0x7e>
		last = radio_scan_data->last + 1;
   172e6:	1c5d      	adds	r5, r3, #1
   172e8:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
   172ea:	2d02      	cmp	r5, #2
			last = 0;
   172ec:	bf08      	it	eq
   172ee:	2500      	moveq	r5, #0
	}

	/* update scan pdu fields. */
	prev = (struct pdu_adv *)
	       &radio_scan_data->data[radio_scan_data->last][0];
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
   172f0:	eb05 2205 	add.w	r2, r5, r5, lsl #8
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   172f4:	f04f 0e04 	mov.w	lr, #4
   172f8:	5ca0      	ldrb	r0, [r4, r2]
   172fa:	f36e 0003 	bfi	r0, lr, #0, #4
	pdu->rfu = 0;
	pdu->chan_sel = 0;
   172fe:	f000 00ef 	and.w	r0, r0, #239	; 0xef
   17302:	f36f 1045 	bfc	r0, #5, #1
   17306:	54a0      	strb	r0, [r4, r2]
	prev = (struct pdu_adv *)
   17308:	eb03 2303 	add.w	r3, r3, r3, lsl #8
   1730c:	18e1      	adds	r1, r4, r3
	pdu->tx_addr = prev->tx_addr;
   1730e:	5ce0      	ldrb	r0, [r4, r3]
   17310:	5ca3      	ldrb	r3, [r4, r2]
   17312:	f3c0 1080 	ubfx	r0, r0, #6, #1
   17316:	f360 1386 	bfi	r3, r0, #6, #1
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
   1731a:	eb04 0802 	add.w	r8, r4, r2
	pdu->rx_addr = 0;
   1731e:	f36f 13c7 	bfc	r3, #7, #1
   17322:	54a3      	strb	r3, [r4, r2]
	pdu->len = BDADDR_SIZE + len;
   17324:	1db3      	adds	r3, r6, #6
   17326:	f888 3001 	strb.w	r3, [r8, #1]
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
   1732a:	2206      	movs	r2, #6
   1732c:	3102      	adds	r1, #2
   1732e:	f108 0002 	add.w	r0, r8, #2
   17332:	f7e9 fa2e 	bl	792 <memcpy>
	memcpy(&pdu->scan_rsp.data[0], data, len);
   17336:	4632      	mov	r2, r6
   17338:	4639      	mov	r1, r7
   1733a:	f108 0008 	add.w	r0, r8, #8
   1733e:	f7e9 fa28 	bl	792 <memcpy>

	/* commit the update so controller picks it. */
	radio_scan_data->last = last;
   17342:	f884 5203 	strb.w	r5, [r4, #515]	; 0x203
   17346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1734a:	461d      	mov	r5, r3
   1734c:	e7d0      	b.n	172f0 <ll_scan_data_set+0x24>
	...

00017350 <ll_adv_enable>:
}

u32_t ll_adv_enable(u8_t enable)
{
   17350:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	struct pdu_adv *pdu_scan;
	struct pdu_adv *pdu_adv;
	//struct pdu_adv *aux_pdu_adv;
	u32_t status;

	if (!enable) {
   17354:	b920      	cbnz	r0, 17360 <ll_adv_enable+0x10>
	status = radio_adv_enable(ll_adv.interval, ll_adv.chan_map,
				  ll_adv.filter_policy, rl_idx);
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	return status;
}
   17356:	b002      	add	sp, #8
   17358:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return radio_adv_disable();
   1735c:	f7ff ba8c 	b.w	16878 <radio_adv_disable>
	} else if (ll_adv_is_enabled()) {
   17360:	f7fe fa18 	bl	15794 <ll_adv_is_enabled>
   17364:	4681      	mov	r9, r0
   17366:	2800      	cmp	r0, #0
   17368:	d153      	bne.n	17412 <ll_adv_enable+0xc2>
	radio_adv_data = radio_adv_data_get();
   1736a:	f7fe fa07 	bl	1577c <radio_adv_data_get>
   1736e:	4607      	mov	r7, r0
	radio_scan_data = radio_scan_data_get();
   17370:	f7fe fa0c 	bl	1578c <radio_scan_data_get>
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
   17374:	f897 4203 	ldrb.w	r4, [r7, #515]	; 0x203
   17378:	4d32      	ldr	r5, [pc, #200]	; (17444 <ll_adv_enable+0xf4>)
   1737a:	eb04 2404 	add.w	r4, r4, r4, lsl #8
   1737e:	eb07 0804 	add.w	r8, r7, r4
	} else if (pdu_adv->type == PDU_ADV_TYPE_EXT_IND) {
   17382:	5d3b      	ldrb	r3, [r7, r4]
   17384:	f003 020f 	and.w	r2, r3, #15
   17388:	2a07      	cmp	r2, #7
   1738a:	d110      	bne.n	173ae <ll_adv_enable+0x5e>
		if (h->adv_addr) {
   1738c:	f898 2003 	ldrb.w	r2, [r8, #3]
   17390:	07d2      	lsls	r2, r2, #31
   17392:	d50a      	bpl.n	173aa <ll_adv_enable+0x5a>
			memcpy(ptr, ll_addr_get(pdu_adv->tx_addr, NULL),
   17394:	4649      	mov	r1, r9
   17396:	f3c3 1080 	ubfx	r0, r3, #6, #1
   1739a:	f7f5 fa1d 	bl	c7d8 <ll_addr_get>
   1739e:	2206      	movs	r2, #6
   173a0:	4601      	mov	r1, r0
   173a2:	f108 0004 	add.w	r0, r8, #4
			memcpy(&pdu_scan->scan_rsp.addr[0],
   173a6:	f7e9 f9f4 	bl	792 <memcpy>
	u8_t   rl_idx = FILTER_IDX_NONE;
   173aa:	24ff      	movs	r4, #255	; 0xff
   173ac:	e020      	b.n	173f0 <ll_adv_enable+0xa0>
	pdu_scan = (struct pdu_adv *)&radio_scan_data->data
   173ae:	f890 3203 	ldrb.w	r3, [r0, #515]	; 0x203
   173b2:	eb03 2303 	add.w	r3, r3, r3, lsl #8
   173b6:	18c6      	adds	r6, r0, r3
		ll_filters_adv_update(ll_adv.filter_policy);
   173b8:	7828      	ldrb	r0, [r5, #0]
   173ba:	f3c0 00c1 	ubfx	r0, r0, #3, #2
   173be:	f000 fae3 	bl	17988 <ll_filters_adv_update>
		if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   173c2:	7828      	ldrb	r0, [r5, #0]
   173c4:	f010 0a40 	ands.w	sl, r0, #64	; 0x40
   173c8:	d025      	beq.n	17416 <ll_adv_enable+0xc6>
			rl_idx = ll_rl_find(ll_adv.id_addr_type,
   173ca:	464a      	mov	r2, r9
   173cc:	1ca9      	adds	r1, r5, #2
   173ce:	09c0      	lsrs	r0, r0, #7
   173d0:	f000 fb06 	bl	179e0 <ll_rl_find>
			if (rl_idx != FILTER_IDX_NONE) {
   173d4:	28ff      	cmp	r0, #255	; 0xff
			rl_idx = ll_rl_find(ll_adv.id_addr_type,
   173d6:	4604      	mov	r4, r0
			if (rl_idx != FILTER_IDX_NONE) {
   173d8:	d002      	beq.n	173e0 <ll_adv_enable+0x90>
				ll_rl_rpa_update(false);
   173da:	4648      	mov	r0, r9
   173dc:	f000 fcce 	bl	17d7c <ll_rl_rpa_update>
			ll_rl_pdu_adv_update(rl_idx, pdu_adv);
   173e0:	4641      	mov	r1, r8
   173e2:	4620      	mov	r0, r4
   173e4:	f000 fc5e 	bl	17ca4 <ll_rl_pdu_adv_update>
			ll_rl_pdu_adv_update(rl_idx, pdu_scan);
   173e8:	4631      	mov	r1, r6
   173ea:	4620      	mov	r0, r4
   173ec:	f000 fc5a 	bl	17ca4 <ll_rl_pdu_adv_update>
				  ll_adv.chan_map, ll_adv.filter_policy,
   173f0:	782a      	ldrb	r2, [r5, #0]
	status = radio_adv_enable(ll_adv.phy_p, ll_adv.interval,
   173f2:	7a28      	ldrb	r0, [r5, #8]
   173f4:	7b2b      	ldrb	r3, [r5, #12]
   173f6:	9301      	str	r3, [sp, #4]
   173f8:	8969      	ldrh	r1, [r5, #10]
   173fa:	9400      	str	r4, [sp, #0]
   173fc:	f3c2 03c1 	ubfx	r3, r2, #3, #2
   17400:	f000 0007 	and.w	r0, r0, #7
   17404:	f002 0207 	and.w	r2, r2, #7
   17408:	f7fe ffa6 	bl	16358 <radio_adv_enable>
}
   1740c:	b002      	add	sp, #8
   1740e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return 0;
   17412:	2000      	movs	r0, #0
   17414:	e7fa      	b.n	1740c <ll_adv_enable+0xbc>
			       ll_addr_get(pdu_adv->tx_addr, NULL),
   17416:	5d38      	ldrb	r0, [r7, r4]
   17418:	4651      	mov	r1, sl
   1741a:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1741e:	f7f5 f9db 	bl	c7d8 <ll_addr_get>
			memcpy(&pdu_adv->adv_ind.addr[0],
   17422:	2206      	movs	r2, #6
   17424:	4601      	mov	r1, r0
   17426:	f108 0002 	add.w	r0, r8, #2
   1742a:	f7e9 f9b2 	bl	792 <memcpy>
			       ll_addr_get(pdu_adv->tx_addr, NULL),
   1742e:	5d38      	ldrb	r0, [r7, r4]
   17430:	4651      	mov	r1, sl
   17432:	f3c0 1080 	ubfx	r0, r0, #6, #1
   17436:	f7f5 f9cf 	bl	c7d8 <ll_addr_get>
			memcpy(&pdu_scan->scan_rsp.addr[0],
   1743a:	2206      	movs	r2, #6
   1743c:	4601      	mov	r1, r0
   1743e:	1cb0      	adds	r0, r6, #2
   17440:	e7b1      	b.n	173a6 <ll_adv_enable+0x56>
   17442:	bf00      	nop
   17444:	20001eca 	.word	0x20001eca

00017448 <ll_scan_params_set>:
	u8_t  filter_policy:2;
} ll_scan;

u32_t ll_scan_params_set(u8_t type, u16_t interval, u16_t window,
			 u8_t own_addr_type, u8_t filter_policy)
{
   17448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1744c:	4606      	mov	r6, r0
   1744e:	4689      	mov	r9, r1
   17450:	4690      	mov	r8, r2
   17452:	461f      	mov	r7, r3
	if (ll_scan_is_enabled()) {
   17454:	f7fe f9b4 	bl	157c0 <ll_scan_is_enabled>
   17458:	b9a0      	cbnz	r0, 17484 <ll_scan_params_set+0x3c>
	 * 1001b - Ext. Coded active
	 */


	/* for ext adv 0010 type */
	ll_scan.type = type | 0x02;  			//for time being just to test
   1745a:	4d0c      	ldr	r5, [pc, #48]	; (1748c <ll_scan_params_set+0x44>)
   1745c:	792c      	ldrb	r4, [r5, #4]
	ll_scan.interval = interval;
   1745e:	f8a5 9000 	strh.w	r9, [r5]
	ll_scan.type = type | 0x02;  			//for time being just to test
   17462:	f046 0602 	orr.w	r6, r6, #2
   17466:	f366 0403 	bfi	r4, r6, #0, #4
	ll_scan.window = window;
	ll_scan.own_addr_type = own_addr_type;
   1746a:	4622      	mov	r2, r4
   1746c:	f367 1205 	bfi	r2, r7, #4, #2
	ll_scan.filter_policy = filter_policy;
   17470:	4613      	mov	r3, r2
   17472:	f89d 2020 	ldrb.w	r2, [sp, #32]
	ll_scan.window = window;
   17476:	f8a5 8002 	strh.w	r8, [r5, #2]
	ll_scan.filter_policy = filter_policy;
   1747a:	f362 1387 	bfi	r3, r2, #6, #2
   1747e:	712b      	strb	r3, [r5, #4]

	return 0;
   17480:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   17484:	200c      	movs	r0, #12
}
   17486:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1748a:	bf00      	nop
   1748c:	20001edc 	.word	0x20001edc

00017490 <ll_scan_enable>:

u32_t ll_scan_enable(u8_t enable)
{
   17490:	b5f0      	push	{r4, r5, r6, r7, lr}
   17492:	b085      	sub	sp, #20
	u32_t status;
	u8_t  rpa_gen = 0;

	if (!enable) {
   17494:	b920      	cbnz	r0, 174a0 <ll_scan_enable+0x10>
				   ll_scan.interval, ll_scan.window,
				   ll_scan.filter_policy, rpa_gen,
				   FILTER_IDX_NONE);

	return status;
}
   17496:	b005      	add	sp, #20
   17498:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return radio_scan_disable();
   1749c:	f7ff bb1a 	b.w	16ad4 <radio_scan_disable>
	} else if (ll_scan_is_enabled()) {
   174a0:	f7fe f98e 	bl	157c0 <ll_scan_is_enabled>
   174a4:	4606      	mov	r6, r0
   174a6:	bb40      	cbnz	r0, 174fa <ll_scan_enable+0x6a>
	ll_filters_scan_update(ll_scan.filter_policy);
   174a8:	4c15      	ldr	r4, [pc, #84]	; (17500 <ll_scan_enable+0x70>)
   174aa:	7920      	ldrb	r0, [r4, #4]
   174ac:	0980      	lsrs	r0, r0, #6
   174ae:	f000 fa81 	bl	179b4 <ll_filters_scan_update>
	if ((ll_scan.type & 0x1) &&
   174b2:	7923      	ldrb	r3, [r4, #4]
   174b4:	f013 0501 	ands.w	r5, r3, #1
   174b8:	d006      	beq.n	174c8 <ll_scan_enable+0x38>
   174ba:	f013 0520 	ands.w	r5, r3, #32
   174be:	d003      	beq.n	174c8 <ll_scan_enable+0x38>
		ll_rl_rpa_update(false);
   174c0:	4630      	mov	r0, r6
   174c2:	f000 fc5b 	bl	17d7c <ll_rl_rpa_update>
		rpa_gen = 1;
   174c6:	2501      	movs	r5, #1
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
   174c8:	7926      	ldrb	r6, [r4, #4]
   174ca:	f006 070f 	and.w	r7, r6, #15
   174ce:	f3c6 1600 	ubfx	r6, r6, #4, #1
   174d2:	2100      	movs	r1, #0
   174d4:	4630      	mov	r0, r6
   174d6:	f7f5 f97f 	bl	c7d8 <ll_addr_get>
   174da:	22ff      	movs	r2, #255	; 0xff
   174dc:	9203      	str	r2, [sp, #12]
				   ll_scan.filter_policy, rpa_gen,
   174de:	7922      	ldrb	r2, [r4, #4]
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
   174e0:	8823      	ldrh	r3, [r4, #0]
   174e2:	9502      	str	r5, [sp, #8]
   174e4:	0992      	lsrs	r2, r2, #6
   174e6:	9201      	str	r2, [sp, #4]
   174e8:	8862      	ldrh	r2, [r4, #2]
   174ea:	9200      	str	r2, [sp, #0]
   174ec:	4631      	mov	r1, r6
   174ee:	4602      	mov	r2, r0
   174f0:	4638      	mov	r0, r7
   174f2:	f7ff f9f1 	bl	168d8 <radio_scan_enable>
}
   174f6:	b005      	add	sp, #20
   174f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return 0;
   174fa:	2000      	movs	r0, #0
   174fc:	e7fb      	b.n	174f6 <ll_scan_enable+0x66>
   174fe:	bf00      	nop
   17500:	20001edc 	.word	0x20001edc

00017504 <ll_create_connection>:
u32_t ll_create_connection(u16_t scan_interval, u16_t scan_window,
			   u8_t filter_policy, u8_t peer_addr_type,
			   u8_t *peer_addr, u8_t own_addr_type,
			   u16_t interval, u16_t latency,
			   u16_t timeout)
{
   17504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17508:	b085      	sub	sp, #20
   1750a:	461e      	mov	r6, r3
   1750c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   17510:	9303      	str	r3, [sp, #12]
   17512:	4680      	mov	r8, r0
   17514:	4689      	mov	r9, r1
   17516:	4615      	mov	r5, r2
   17518:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   1751a:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
   1751e:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
   17522:	f8bd b044 	ldrh.w	fp, [sp, #68]	; 0x44
	u32_t status;
	u8_t  rpa_gen = 0;
	u8_t  rl_idx = FILTER_IDX_NONE;

	if (ll_scan_is_enabled()) {
   17526:	f7fe f94b 	bl	157c0 <ll_scan_is_enabled>
   1752a:	9b03      	ldr	r3, [sp, #12]
   1752c:	bba0      	cbnz	r0, 17598 <ll_create_connection+0x94>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	status = radio_connect_enable(peer_addr_type, peer_addr, interval,
   1752e:	9300      	str	r3, [sp, #0]
   17530:	4652      	mov	r2, sl
   17532:	465b      	mov	r3, fp
   17534:	4639      	mov	r1, r7
   17536:	4630      	mov	r0, r6
   17538:	f7fe f966 	bl	15808 <radio_connect_enable>
				      latency, timeout);

	if (status) {
   1753c:	bb68      	cbnz	r0, 1759a <ll_create_connection+0x96>
		return status;
	}

#if defined(CONFIG_BT_CTLR_PRIVACY)
	ll_filters_scan_update(filter_policy);
   1753e:	4628      	mov	r0, r5
   17540:	f000 fa38 	bl	179b4 <ll_filters_scan_update>

	if (!filter_policy && ctrl_rl_enabled()) {
   17544:	b1dd      	cbz	r5, 1757e <ll_create_connection+0x7a>
	u8_t  rl_idx = FILTER_IDX_NONE;
   17546:	27ff      	movs	r7, #255	; 0xff
		/* Look up the resolving list */
		rl_idx = ll_rl_find(peer_addr_type, peer_addr, NULL);
	}

	if (own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   17548:	1ea3      	subs	r3, r4, #2
   1754a:	2b01      	cmp	r3, #1
   1754c:	d822      	bhi.n	17594 <ll_create_connection+0x90>
	    own_addr_type == BT_ADDR_LE_RANDOM_ID) {

		/* Generate RPAs if required */
		ll_rl_rpa_update(false);
   1754e:	2000      	movs	r0, #0
   17550:	f000 fc14 	bl	17d7c <ll_rl_rpa_update>
		own_addr_type &= 0x1;
   17554:	f004 0401 	and.w	r4, r4, #1
		rpa_gen = 1;
   17558:	2601      	movs	r6, #1
	}
#endif
	return radio_scan_enable(0, own_addr_type,
   1755a:	2100      	movs	r1, #0
   1755c:	4620      	mov	r0, r4
   1755e:	f7f5 f93b 	bl	c7d8 <ll_addr_get>
   17562:	4643      	mov	r3, r8
   17564:	4602      	mov	r2, r0
   17566:	4621      	mov	r1, r4
   17568:	2000      	movs	r0, #0
   1756a:	9711      	str	r7, [sp, #68]	; 0x44
   1756c:	9610      	str	r6, [sp, #64]	; 0x40
   1756e:	950f      	str	r5, [sp, #60]	; 0x3c
   17570:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
				 ll_addr_get(own_addr_type, NULL),
				 scan_interval, scan_window,
				 filter_policy, rpa_gen, rl_idx);
}
   17574:	b005      	add	sp, #20
   17576:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return radio_scan_enable(0, own_addr_type,
   1757a:	f7ff b9ad 	b.w	168d8 <radio_scan_enable>
	if (!filter_policy && ctrl_rl_enabled()) {
   1757e:	f000 fb89 	bl	17c94 <ctrl_rl_enabled>
   17582:	2800      	cmp	r0, #0
   17584:	d0df      	beq.n	17546 <ll_create_connection+0x42>
		rl_idx = ll_rl_find(peer_addr_type, peer_addr, NULL);
   17586:	4639      	mov	r1, r7
   17588:	462a      	mov	r2, r5
   1758a:	4630      	mov	r0, r6
   1758c:	f000 fa28 	bl	179e0 <ll_rl_find>
   17590:	4607      	mov	r7, r0
   17592:	e7d9      	b.n	17548 <ll_create_connection+0x44>
	u8_t  rpa_gen = 0;
   17594:	2600      	movs	r6, #0
   17596:	e7e0      	b.n	1755a <ll_create_connection+0x56>
		return BT_HCI_ERR_CMD_DISALLOWED;
   17598:	200c      	movs	r0, #12
}
   1759a:	b005      	add	sp, #20
   1759c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000175a0 <wl_find>:
		wl[i].taken = 0;
	}
}

static u8_t wl_find(u8_t addr_type, u8_t *addr, u8_t *free)
{
   175a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   175a4:	4688      	mov	r8, r1
	int i;

	if (free) {
   175a6:	4615      	mov	r5, r2
   175a8:	b10a      	cbz	r2, 175ae <wl_find+0xe>
		*free = FILTER_IDX_NONE;
   175aa:	23ff      	movs	r3, #255	; 0xff
   175ac:	7013      	strb	r3, [r2, #0]
	}

	for (i = 0; i < WL_SIZE; i++) {
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   175ae:	4e14      	ldr	r6, [pc, #80]	; (17600 <wl_find+0x60>)
{
   175b0:	2400      	movs	r4, #0
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   175b2:	f000 0701 	and.w	r7, r0, #1
   175b6:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   175ba:	07da      	lsls	r2, r3, #31
   175bc:	d51d      	bpl.n	175fa <wl_find+0x5a>
   175be:	f3c3 0340 	ubfx	r3, r3, #1, #1
   175c2:	42bb      	cmp	r3, r7
   175c4:	d113      	bne.n	175ee <wl_find+0x4e>
   175c6:	eb06 00c4 	add.w	r0, r6, r4, lsl #3
   175ca:	2206      	movs	r2, #6
   175cc:	4641      	mov	r1, r8
   175ce:	3002      	adds	r0, #2
   175d0:	f7e9 f8b2 	bl	738 <memcmp>
   175d4:	b910      	cbnz	r0, 175dc <wl_find+0x3c>
			return i;
   175d6:	b2e0      	uxtb	r0, r4
   175d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   175dc:	b13d      	cbz	r5, 175ee <wl_find+0x4e>
   175de:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   175e2:	07db      	lsls	r3, r3, #31
   175e4:	d403      	bmi.n	175ee <wl_find+0x4e>
   175e6:	782b      	ldrb	r3, [r5, #0]
   175e8:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   175ea:	bf08      	it	eq
   175ec:	702c      	strbeq	r4, [r5, #0]
	for (i = 0; i < WL_SIZE; i++) {
   175ee:	3401      	adds	r4, #1
   175f0:	2c08      	cmp	r4, #8
   175f2:	d1e0      	bne.n	175b6 <wl_find+0x16>
		}
	}

	return FILTER_IDX_NONE;
   175f4:	20ff      	movs	r0, #255	; 0xff
   175f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   175fa:	2d00      	cmp	r5, #0
   175fc:	d1f3      	bne.n	175e6 <wl_find+0x46>
   175fe:	e7f6      	b.n	175ee <wl_find+0x4e>
   17600:	2000210f 	.word	0x2000210f

00017604 <filter_rl_update>:
		}
	}
}

static void filter_rl_update(void)
{
   17604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	filter->enable_bitmask = 0;
   17608:	4d12      	ldr	r5, [pc, #72]	; (17654 <filter_rl_update+0x50>)

	/* No whitelist: populate filter from rl peers */
	filter_clear(&rl_filter);

	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
		if (rl[i].taken) {
   1760a:	4e13      	ldr	r6, [pc, #76]	; (17658 <filter_rl_update+0x54>)
	filter->enable_bitmask = 0;
   1760c:	2400      	movs	r4, #0
   1760e:	702c      	strb	r4, [r5, #0]
	filter->addr_type_bitmask = 0;
   17610:	706c      	strb	r4, [r5, #1]
		if (rl[i].taken) {
   17612:	2728      	movs	r7, #40	; 0x28
	filter->enable_bitmask |= BIT(index);
   17614:	f04f 0801 	mov.w	r8, #1
		if (rl[i].taken) {
   17618:	fb07 f104 	mul.w	r1, r7, r4
   1761c:	5c73      	ldrb	r3, [r6, r1]
   1761e:	07da      	lsls	r2, r3, #31
   17620:	d512      	bpl.n	17648 <filter_rl_update+0x44>
	filter->enable_bitmask |= BIT(index);
   17622:	7828      	ldrb	r0, [r5, #0]
   17624:	fa08 f204 	lsl.w	r2, r8, r4
   17628:	4302      	orrs	r2, r0
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   1762a:	f3c3 1380 	ubfx	r3, r3, #6, #1
	filter->enable_bitmask |= BIT(index);
   1762e:	702a      	strb	r2, [r5, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   17630:	786a      	ldrb	r2, [r5, #1]
   17632:	40a3      	lsls	r3, r4
   17634:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   17636:	2206      	movs	r2, #6
   17638:	3101      	adds	r1, #1
   1763a:	fb02 5004 	mla	r0, r2, r4, r5
   1763e:	4431      	add	r1, r6
   17640:	3002      	adds	r0, #2
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   17642:	706b      	strb	r3, [r5, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   17644:	f7e9 f8a5 	bl	792 <memcpy>
   17648:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1764a:	2c08      	cmp	r4, #8
   1764c:	d1e4      	bne.n	17618 <filter_rl_update+0x14>
				      rl[i].id_addr.val);
		}
	}
}
   1764e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17652:	bf00      	nop
   17654:	200020dd 	.word	0x200020dd
   17658:	20001f9c 	.word	0x20001f9c

0001765c <rl_access_check.constprop.1>:
	}

	peer_irk_count = 0;
}

static int rl_access_check(bool check_ar)
   1765c:	b508      	push	{r3, lr}
		if (!rl_enable) {
			return -1;
		}
	}

	return (ll_adv_is_enabled() || ll_scan_is_enabled()) ? 0 : 1;
   1765e:	f7fe f899 	bl	15794 <ll_adv_is_enabled>
   17662:	b928      	cbnz	r0, 17670 <rl_access_check.constprop.1+0x14>
   17664:	f7fe f8ac 	bl	157c0 <ll_scan_is_enabled>
   17668:	fab0 f080 	clz	r0, r0
   1766c:	0940      	lsrs	r0, r0, #5
   1766e:	bd08      	pop	{r3, pc}
   17670:	2000      	movs	r0, #0
}
   17672:	bd08      	pop	{r3, pc}

00017674 <filter_wl_update>:
{
   17674:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   17678:	4e1b      	ldr	r6, [pc, #108]	; (176e8 <filter_wl_update+0x74>)
	filter->enable_bitmask = 0;
   1767a:	4d1c      	ldr	r5, [pc, #112]	; (176ec <filter_wl_update+0x78>)
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   1767c:	f8df 9074 	ldr.w	r9, [pc, #116]	; 176f4 <filter_wl_update+0x80>
	filter->enable_bitmask = 0;
   17680:	2400      	movs	r4, #0
		if (!wl[i].taken) {
   17682:	1eb7      	subs	r7, r6, #2
	filter->enable_bitmask = 0;
   17684:	702c      	strb	r4, [r5, #0]
	filter->addr_type_bitmask = 0;
   17686:	706c      	strb	r4, [r5, #1]
   17688:	46b8      	mov	r8, r7
		if (!wl[i].taken) {
   1768a:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   1768e:	07d9      	lsls	r1, r3, #31
   17690:	d523      	bpl.n	176da <filter_wl_update+0x66>
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   17692:	f899 3000 	ldrb.w	r3, [r9]
   17696:	b15b      	cbz	r3, 176b0 <filter_wl_update+0x3c>
		j = wl[i].rl_idx;
   17698:	f816 2c01 	ldrb.w	r2, [r6, #-1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   1769c:	2a07      	cmp	r2, #7
   1769e:	d807      	bhi.n	176b0 <filter_wl_update+0x3c>
   176a0:	2328      	movs	r3, #40	; 0x28
   176a2:	4353      	muls	r3, r2
   176a4:	4a12      	ldr	r2, [pc, #72]	; (176f0 <filter_wl_update+0x7c>)
   176a6:	5cd3      	ldrb	r3, [r2, r3]
   176a8:	075a      	lsls	r2, r3, #29
   176aa:	d501      	bpl.n	176b0 <filter_wl_update+0x3c>
   176ac:	06db      	lsls	r3, r3, #27
   176ae:	d514      	bpl.n	176da <filter_wl_update+0x66>
	filter->enable_bitmask |= BIT(index);
   176b0:	2201      	movs	r2, #1
   176b2:	fa02 f104 	lsl.w	r1, r2, r4
   176b6:	782a      	ldrb	r2, [r5, #0]
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   176b8:	f818 3034 	ldrb.w	r3, [r8, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   176bc:	430a      	orrs	r2, r1
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   176be:	f3c3 0340 	ubfx	r3, r3, #1, #1
	filter->enable_bitmask |= BIT(index);
   176c2:	702a      	strb	r2, [r5, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   176c4:	786a      	ldrb	r2, [r5, #1]
   176c6:	40a3      	lsls	r3, r4
   176c8:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   176ca:	2206      	movs	r2, #6
   176cc:	fb02 5004 	mla	r0, r2, r4, r5
   176d0:	4631      	mov	r1, r6
   176d2:	3002      	adds	r0, #2
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   176d4:	706b      	strb	r3, [r5, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   176d6:	f7e9 f85c 	bl	792 <memcpy>
   176da:	3401      	adds	r4, #1
	for (i = 0; i < WL_SIZE; i++) {
   176dc:	2c08      	cmp	r4, #8
   176de:	f106 0608 	add.w	r6, r6, #8
   176e2:	d1d2      	bne.n	1768a <filter_wl_update+0x16>
}
   176e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   176e8:	20002111 	.word	0x20002111
   176ec:	2000214f 	.word	0x2000214f
   176f0:	20001f9c 	.word	0x20001f9c
   176f4:	200020dc 	.word	0x200020dc

000176f8 <ctrl_lrpa_get>:
	if ((rl_idx >= ARRAY_SIZE(rl)) || !rl[rl_idx].lirk ||
   176f8:	2807      	cmp	r0, #7
   176fa:	d80c      	bhi.n	17716 <ctrl_lrpa_get+0x1e>
   176fc:	2328      	movs	r3, #40	; 0x28
   176fe:	4358      	muls	r0, r3
   17700:	4a06      	ldr	r2, [pc, #24]	; (1771c <ctrl_lrpa_get+0x24>)
   17702:	5c13      	ldrb	r3, [r2, r0]
   17704:	1811      	adds	r1, r2, r0
   17706:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   1770a:	b128      	cbz	r0, 17718 <ctrl_lrpa_get+0x20>
   1770c:	f3c3 0040 	ubfx	r0, r3, #1, #1
   17710:	b110      	cbz	r0, 17718 <ctrl_lrpa_get+0x20>
	return rl[rl_idx].local_rpa;
   17712:	6a48      	ldr	r0, [r1, #36]	; 0x24
   17714:	4770      	bx	lr
		return NULL;
   17716:	2000      	movs	r0, #0
}
   17718:	4770      	bx	lr
   1771a:	bf00      	nop
   1771c:	20001f9c 	.word	0x20001f9c

00017720 <ctrl_irks_get>:
	*count = peer_irk_count;
   17720:	4b02      	ldr	r3, [pc, #8]	; (1772c <ctrl_irks_get+0xc>)
   17722:	781b      	ldrb	r3, [r3, #0]
   17724:	7003      	strb	r3, [r0, #0]
}
   17726:	4802      	ldr	r0, [pc, #8]	; (17730 <ctrl_irks_get+0x10>)
   17728:	4770      	bx	lr
   1772a:	bf00      	nop
   1772c:	20001f12 	.word	0x20001f12
   17730:	20001f1b 	.word	0x20001f1b

00017734 <ctrl_rl_idx>:
{
   17734:	b507      	push	{r0, r1, r2, lr}
	if (whitelist) {
   17736:	b320      	cbz	r0, 17782 <ctrl_rl_idx+0x4e>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(wl));
   17738:	2907      	cmp	r1, #7
   1773a:	d90e      	bls.n	1775a <ctrl_rl_idx+0x26>
		LL_ASSERT(wl[devmatch_id].taken);
   1773c:	4b1d      	ldr	r3, [pc, #116]	; (177b4 <ctrl_rl_idx+0x80>)
   1773e:	9301      	str	r3, [sp, #4]
   17740:	9300      	str	r3, [sp, #0]
   17742:	4a1d      	ldr	r2, [pc, #116]	; (177b8 <ctrl_rl_idx+0x84>)
   17744:	4b1d      	ldr	r3, [pc, #116]	; (177bc <ctrl_rl_idx+0x88>)
   17746:	491e      	ldr	r1, [pc, #120]	; (177c0 <ctrl_rl_idx+0x8c>)
   17748:	481e      	ldr	r0, [pc, #120]	; (177c4 <ctrl_rl_idx+0x90>)
   1774a:	f7ea fda3 	bl	2294 <printk>
   1774e:	4040      	eors	r0, r0
   17750:	f380 8811 	msr	BASEPRI, r0
   17754:	f04f 0004 	mov.w	r0, #4
   17758:	df02      	svc	2
   1775a:	4b1b      	ldr	r3, [pc, #108]	; (177c8 <ctrl_rl_idx+0x94>)
   1775c:	f813 2031 	ldrb.w	r2, [r3, r1, lsl #3]
   17760:	07d2      	lsls	r2, r2, #31
   17762:	d407      	bmi.n	17774 <ctrl_rl_idx+0x40>
   17764:	4b13      	ldr	r3, [pc, #76]	; (177b4 <ctrl_rl_idx+0x80>)
   17766:	9301      	str	r3, [sp, #4]
   17768:	9300      	str	r3, [sp, #0]
   1776a:	4a13      	ldr	r2, [pc, #76]	; (177b8 <ctrl_rl_idx+0x84>)
   1776c:	4b13      	ldr	r3, [pc, #76]	; (177bc <ctrl_rl_idx+0x88>)
   1776e:	4914      	ldr	r1, [pc, #80]	; (177c0 <ctrl_rl_idx+0x8c>)
   17770:	4816      	ldr	r0, [pc, #88]	; (177cc <ctrl_rl_idx+0x98>)
   17772:	e7ea      	b.n	1774a <ctrl_rl_idx+0x16>
		i = wl[devmatch_id].rl_idx;
   17774:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   17778:	7849      	ldrb	r1, [r1, #1]
}
   1777a:	4608      	mov	r0, r1
   1777c:	b003      	add	sp, #12
   1777e:	f85d fb04 	ldr.w	pc, [sp], #4
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   17782:	2907      	cmp	r1, #7
   17784:	d907      	bls.n	17796 <ctrl_rl_idx+0x62>
   17786:	4b0b      	ldr	r3, [pc, #44]	; (177b4 <ctrl_rl_idx+0x80>)
   17788:	9301      	str	r3, [sp, #4]
   1778a:	9300      	str	r3, [sp, #0]
   1778c:	4a0a      	ldr	r2, [pc, #40]	; (177b8 <ctrl_rl_idx+0x84>)
   1778e:	4b0b      	ldr	r3, [pc, #44]	; (177bc <ctrl_rl_idx+0x88>)
   17790:	490b      	ldr	r1, [pc, #44]	; (177c0 <ctrl_rl_idx+0x8c>)
   17792:	480f      	ldr	r0, [pc, #60]	; (177d0 <ctrl_rl_idx+0x9c>)
   17794:	e7d9      	b.n	1774a <ctrl_rl_idx+0x16>
		LL_ASSERT(rl[i].taken);
   17796:	2328      	movs	r3, #40	; 0x28
   17798:	434b      	muls	r3, r1
   1779a:	4a0e      	ldr	r2, [pc, #56]	; (177d4 <ctrl_rl_idx+0xa0>)
   1779c:	5cd3      	ldrb	r3, [r2, r3]
   1779e:	07db      	lsls	r3, r3, #31
   177a0:	d4eb      	bmi.n	1777a <ctrl_rl_idx+0x46>
   177a2:	4b04      	ldr	r3, [pc, #16]	; (177b4 <ctrl_rl_idx+0x80>)
   177a4:	9301      	str	r3, [sp, #4]
   177a6:	9300      	str	r3, [sp, #0]
   177a8:	4a03      	ldr	r2, [pc, #12]	; (177b8 <ctrl_rl_idx+0x84>)
   177aa:	4b04      	ldr	r3, [pc, #16]	; (177bc <ctrl_rl_idx+0x88>)
   177ac:	4904      	ldr	r1, [pc, #16]	; (177c0 <ctrl_rl_idx+0x8c>)
   177ae:	480a      	ldr	r0, [pc, #40]	; (177d8 <ctrl_rl_idx+0xa4>)
   177b0:	e7cb      	b.n	1774a <ctrl_rl_idx+0x16>
   177b2:	bf00      	nop
   177b4:	00023dae 	.word	0x00023dae
   177b8:	00022d76 	.word	0x00022d76
   177bc:	00026ceb 	.word	0x00026ceb
   177c0:	000272d8 	.word	0x000272d8
   177c4:	00026daa 	.word	0x00026daa
   177c8:	2000210f 	.word	0x2000210f
   177cc:	00026e77 	.word	0x00026e77
   177d0:	00026eae 	.word	0x00026eae
   177d4:	20001f9c 	.word	0x20001f9c
   177d8:	00026f7b 	.word	0x00026f7b

000177dc <ctrl_rl_irk_idx>:
{
   177dc:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   177de:	4b18      	ldr	r3, [pc, #96]	; (17840 <ctrl_rl_irk_idx+0x64>)
   177e0:	781b      	ldrb	r3, [r3, #0]
   177e2:	4283      	cmp	r3, r0
   177e4:	d80e      	bhi.n	17804 <ctrl_rl_irk_idx+0x28>
   177e6:	4b17      	ldr	r3, [pc, #92]	; (17844 <ctrl_rl_irk_idx+0x68>)
   177e8:	9301      	str	r3, [sp, #4]
   177ea:	9300      	str	r3, [sp, #0]
   177ec:	4a16      	ldr	r2, [pc, #88]	; (17848 <ctrl_rl_irk_idx+0x6c>)
   177ee:	4b17      	ldr	r3, [pc, #92]	; (1784c <ctrl_rl_irk_idx+0x70>)
   177f0:	4917      	ldr	r1, [pc, #92]	; (17850 <ctrl_rl_irk_idx+0x74>)
   177f2:	4818      	ldr	r0, [pc, #96]	; (17854 <ctrl_rl_irk_idx+0x78>)
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   177f4:	f7ea fd4e 	bl	2294 <printk>
   177f8:	4040      	eors	r0, r0
   177fa:	f380 8811 	msr	BASEPRI, r0
   177fe:	f04f 0004 	mov.w	r0, #4
   17802:	df02      	svc	2
	i = peer_irk_rl_ids[irkmatch_id];
   17804:	4b14      	ldr	r3, [pc, #80]	; (17858 <ctrl_rl_irk_idx+0x7c>)
   17806:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   17808:	2807      	cmp	r0, #7
   1780a:	d907      	bls.n	1781c <ctrl_rl_irk_idx+0x40>
   1780c:	4b0d      	ldr	r3, [pc, #52]	; (17844 <ctrl_rl_irk_idx+0x68>)
   1780e:	9301      	str	r3, [sp, #4]
   17810:	9300      	str	r3, [sp, #0]
   17812:	4a0d      	ldr	r2, [pc, #52]	; (17848 <ctrl_rl_irk_idx+0x6c>)
   17814:	4b0d      	ldr	r3, [pc, #52]	; (1784c <ctrl_rl_irk_idx+0x70>)
   17816:	490e      	ldr	r1, [pc, #56]	; (17850 <ctrl_rl_irk_idx+0x74>)
   17818:	4810      	ldr	r0, [pc, #64]	; (1785c <ctrl_rl_irk_idx+0x80>)
   1781a:	e7eb      	b.n	177f4 <ctrl_rl_irk_idx+0x18>
	LL_ASSERT(rl[i].taken);
   1781c:	2328      	movs	r3, #40	; 0x28
   1781e:	4343      	muls	r3, r0
   17820:	4a0f      	ldr	r2, [pc, #60]	; (17860 <ctrl_rl_irk_idx+0x84>)
   17822:	5cd3      	ldrb	r3, [r2, r3]
   17824:	07db      	lsls	r3, r3, #31
   17826:	d407      	bmi.n	17838 <ctrl_rl_irk_idx+0x5c>
   17828:	4b06      	ldr	r3, [pc, #24]	; (17844 <ctrl_rl_irk_idx+0x68>)
   1782a:	9301      	str	r3, [sp, #4]
   1782c:	9300      	str	r3, [sp, #0]
   1782e:	4a06      	ldr	r2, [pc, #24]	; (17848 <ctrl_rl_irk_idx+0x6c>)
   17830:	4b06      	ldr	r3, [pc, #24]	; (1784c <ctrl_rl_irk_idx+0x70>)
   17832:	4907      	ldr	r1, [pc, #28]	; (17850 <ctrl_rl_irk_idx+0x74>)
   17834:	480b      	ldr	r0, [pc, #44]	; (17864 <ctrl_rl_irk_idx+0x88>)
   17836:	e7dd      	b.n	177f4 <ctrl_rl_irk_idx+0x18>
}
   17838:	b003      	add	sp, #12
   1783a:	f85d fb04 	ldr.w	pc, [sp], #4
   1783e:	bf00      	nop
   17840:	20001f12 	.word	0x20001f12
   17844:	00023dae 	.word	0x00023dae
   17848:	00022d76 	.word	0x00022d76
   1784c:	00026cf7 	.word	0x00026cf7
   17850:	000272d8 	.word	0x000272d8
   17854:	00026fa8 	.word	0x00026fa8
   17858:	20001f13 	.word	0x20001f13
   1785c:	00026fe6 	.word	0x00026fe6
   17860:	20001f9c 	.word	0x20001f9c
   17864:	00026f7b 	.word	0x00026f7b

00017868 <ctrl_irk_whitelisted>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   17868:	2807      	cmp	r0, #7
{
   1786a:	b507      	push	{r0, r1, r2, lr}
	if (rl_idx >= ARRAY_SIZE(rl)) {
   1786c:	d819      	bhi.n	178a2 <ctrl_irk_whitelisted+0x3a>
	LL_ASSERT(rl[rl_idx].taken);
   1786e:	2328      	movs	r3, #40	; 0x28
   17870:	4358      	muls	r0, r3
   17872:	4b0d      	ldr	r3, [pc, #52]	; (178a8 <ctrl_irk_whitelisted+0x40>)
   17874:	5c18      	ldrb	r0, [r3, r0]
   17876:	07c3      	lsls	r3, r0, #31
   17878:	d40e      	bmi.n	17898 <ctrl_irk_whitelisted+0x30>
   1787a:	4b0c      	ldr	r3, [pc, #48]	; (178ac <ctrl_irk_whitelisted+0x44>)
   1787c:	9301      	str	r3, [sp, #4]
   1787e:	9300      	str	r3, [sp, #0]
   17880:	4a0b      	ldr	r2, [pc, #44]	; (178b0 <ctrl_irk_whitelisted+0x48>)
   17882:	4b0c      	ldr	r3, [pc, #48]	; (178b4 <ctrl_irk_whitelisted+0x4c>)
   17884:	490c      	ldr	r1, [pc, #48]	; (178b8 <ctrl_irk_whitelisted+0x50>)
   17886:	480d      	ldr	r0, [pc, #52]	; (178bc <ctrl_irk_whitelisted+0x54>)
   17888:	f7ea fd04 	bl	2294 <printk>
   1788c:	4040      	eors	r0, r0
   1788e:	f380 8811 	msr	BASEPRI, r0
   17892:	f04f 0004 	mov.w	r0, #4
   17896:	df02      	svc	2
	return rl[rl_idx].wl;
   17898:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   1789c:	b003      	add	sp, #12
   1789e:	f85d fb04 	ldr.w	pc, [sp], #4
		return false;
   178a2:	2000      	movs	r0, #0
   178a4:	e7fa      	b.n	1789c <ctrl_irk_whitelisted+0x34>
   178a6:	bf00      	nop
   178a8:	20001f9c 	.word	0x20001f9c
   178ac:	00023dae 	.word	0x00023dae
   178b0:	00022d76 	.word	0x00022d76
   178b4:	00026d07 	.word	0x00026d07
   178b8:	000272d8 	.word	0x000272d8
   178bc:	00026d78 	.word	0x00026d78

000178c0 <ctrl_filter_get>:
}
   178c0:	4b03      	ldr	r3, [pc, #12]	; (178d0 <ctrl_filter_get+0x10>)
   178c2:	4a04      	ldr	r2, [pc, #16]	; (178d4 <ctrl_filter_get+0x14>)
   178c4:	2800      	cmp	r0, #0
   178c6:	bf14      	ite	ne
   178c8:	4610      	movne	r0, r2
   178ca:	4618      	moveq	r0, r3
   178cc:	4770      	bx	lr
   178ce:	bf00      	nop
   178d0:	200020dd 	.word	0x200020dd
   178d4:	2000214f 	.word	0x2000214f

000178d8 <ll_wl_size_get>:
   178d8:	2008      	movs	r0, #8
   178da:	4770      	bx	lr

000178dc <ll_wl_clear>:
{
   178dc:	b510      	push	{r4, lr}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   178de:	f7fd ff61 	bl	157a4 <radio_adv_filter_pol_get>
   178e2:	4604      	mov	r4, r0
   178e4:	b110      	cbz	r0, 178ec <ll_wl_clear+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
   178e6:	240c      	movs	r4, #12
}
   178e8:	4620      	mov	r0, r4
   178ea:	bd10      	pop	{r4, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   178ec:	f7fd ff7e 	bl	157ec <radio_scan_filter_pol_get>
   178f0:	07c3      	lsls	r3, r0, #31
   178f2:	d4f8      	bmi.n	178e6 <ll_wl_clear+0xa>
		wl[i].taken = 0;
   178f4:	4a07      	ldr	r2, [pc, #28]	; (17914 <ll_wl_clear+0x38>)
   178f6:	4623      	mov	r3, r4
   178f8:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   178fc:	f36f 0100 	bfc	r1, #0, #1
   17900:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   17904:	3301      	adds	r3, #1
   17906:	2b08      	cmp	r3, #8
   17908:	d1f6      	bne.n	178f8 <ll_wl_clear+0x1c>
	wl_anon = 0;
   1790a:	4b03      	ldr	r3, [pc, #12]	; (17918 <ll_wl_clear+0x3c>)
   1790c:	2200      	movs	r2, #0
   1790e:	701a      	strb	r2, [r3, #0]
	return 0;
   17910:	e7ea      	b.n	178e8 <ll_wl_clear+0xc>
   17912:	bf00      	nop
   17914:	2000210f 	.word	0x2000210f
   17918:	20003300 	.word	0x20003300

0001791c <ll_wl_remove>:
{
   1791c:	b538      	push	{r3, r4, r5, lr}
   1791e:	4605      	mov	r5, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   17920:	f7fd ff40 	bl	157a4 <radio_adv_filter_pol_get>
   17924:	4604      	mov	r4, r0
   17926:	b110      	cbz	r0, 1792e <ll_wl_remove+0x12>
		return BT_HCI_ERR_CMD_DISALLOWED;
   17928:	240c      	movs	r4, #12
}
   1792a:	4620      	mov	r0, r4
   1792c:	bd38      	pop	{r3, r4, r5, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   1792e:	f7fd ff5d 	bl	157ec <radio_scan_filter_pol_get>
   17932:	07c3      	lsls	r3, r0, #31
   17934:	d4f8      	bmi.n	17928 <ll_wl_remove+0xc>
	if (addr->type == ADDR_TYPE_ANON) {
   17936:	7828      	ldrb	r0, [r5, #0]
   17938:	28ff      	cmp	r0, #255	; 0xff
   1793a:	d102      	bne.n	17942 <ll_wl_remove+0x26>
		wl_anon = 0;
   1793c:	4b0f      	ldr	r3, [pc, #60]	; (1797c <ll_wl_remove+0x60>)
   1793e:	701c      	strb	r4, [r3, #0]
		return 0;
   17940:	e7f3      	b.n	1792a <ll_wl_remove+0xe>
	u8_t i = wl_find(id_addr->type, id_addr->a.val, NULL);
   17942:	4622      	mov	r2, r4
   17944:	1c69      	adds	r1, r5, #1
   17946:	f7ff fe2b 	bl	175a0 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   1794a:	2807      	cmp	r0, #7
   1794c:	d813      	bhi.n	17976 <ll_wl_remove+0x5a>
		u8_t j = wl[i].rl_idx;
   1794e:	4b0c      	ldr	r3, [pc, #48]	; (17980 <ll_wl_remove+0x64>)
   17950:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
   17954:	7855      	ldrb	r5, [r2, #1]
		if (j < ARRAY_SIZE(rl)) {
   17956:	2d07      	cmp	r5, #7
   17958:	d806      	bhi.n	17968 <ll_wl_remove+0x4c>
			rl[j].wl = 0;
   1795a:	2228      	movs	r2, #40	; 0x28
   1795c:	4909      	ldr	r1, [pc, #36]	; (17984 <ll_wl_remove+0x68>)
   1795e:	436a      	muls	r2, r5
   17960:	5c8d      	ldrb	r5, [r1, r2]
   17962:	f364 1545 	bfi	r5, r4, #5, #1
   17966:	548d      	strb	r5, [r1, r2]
		wl[i].taken = 0;
   17968:	f813 2030 	ldrb.w	r2, [r3, r0, lsl #3]
   1796c:	f36f 0200 	bfc	r2, #0, #1
   17970:	f803 2030 	strb.w	r2, [r3, r0, lsl #3]
   17974:	e7d9      	b.n	1792a <ll_wl_remove+0xe>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   17976:	2402      	movs	r4, #2
   17978:	e7d7      	b.n	1792a <ll_wl_remove+0xe>
   1797a:	bf00      	nop
   1797c:	20003300 	.word	0x20003300
   17980:	2000210f 	.word	0x2000210f
   17984:	20001f9c 	.word	0x20001f9c

00017988 <ll_filters_adv_update>:
{
   17988:	b508      	push	{r3, lr}
	if (adv_fp && !(radio_scan_filter_pol_get() & 0x1)) {
   1798a:	b128      	cbz	r0, 17998 <ll_filters_adv_update+0x10>
   1798c:	f7fd ff2e 	bl	157ec <radio_scan_filter_pol_get>
   17990:	07c3      	lsls	r3, r0, #31
   17992:	d401      	bmi.n	17998 <ll_filters_adv_update+0x10>
		filter_wl_update();
   17994:	f7ff fe6e 	bl	17674 <filter_wl_update>
	if (rl_enable && !ll_scan_is_enabled()) {
   17998:	4b05      	ldr	r3, [pc, #20]	; (179b0 <ll_filters_adv_update+0x28>)
   1799a:	781b      	ldrb	r3, [r3, #0]
   1799c:	b133      	cbz	r3, 179ac <ll_filters_adv_update+0x24>
   1799e:	f7fd ff0f 	bl	157c0 <ll_scan_is_enabled>
   179a2:	b918      	cbnz	r0, 179ac <ll_filters_adv_update+0x24>
}
   179a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		filter_rl_update();
   179a8:	f7ff be2c 	b.w	17604 <filter_rl_update>
   179ac:	bd08      	pop	{r3, pc}
   179ae:	bf00      	nop
   179b0:	200020dc 	.word	0x200020dc

000179b4 <ll_filters_scan_update>:
{
   179b4:	b508      	push	{r3, lr}
	if ((scan_fp & 0x1) && !radio_adv_filter_pol_get()) {
   179b6:	07c3      	lsls	r3, r0, #31
   179b8:	d504      	bpl.n	179c4 <ll_filters_scan_update+0x10>
   179ba:	f7fd fef3 	bl	157a4 <radio_adv_filter_pol_get>
   179be:	b908      	cbnz	r0, 179c4 <ll_filters_scan_update+0x10>
		filter_wl_update();
   179c0:	f7ff fe58 	bl	17674 <filter_wl_update>
	if (rl_enable && !ll_adv_is_enabled()) {
   179c4:	4b05      	ldr	r3, [pc, #20]	; (179dc <ll_filters_scan_update+0x28>)
   179c6:	781b      	ldrb	r3, [r3, #0]
   179c8:	b133      	cbz	r3, 179d8 <ll_filters_scan_update+0x24>
   179ca:	f7fd fee3 	bl	15794 <ll_adv_is_enabled>
   179ce:	b918      	cbnz	r0, 179d8 <ll_filters_scan_update+0x24>
}
   179d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		filter_rl_update();
   179d4:	f7ff be16 	b.w	17604 <filter_rl_update>
   179d8:	bd08      	pop	{r3, pc}
   179da:	bf00      	nop
   179dc:	200020dc 	.word	0x200020dc

000179e0 <ll_rl_find>:
{
   179e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   179e4:	468a      	mov	sl, r1
	if (free) {
   179e6:	4614      	mov	r4, r2
   179e8:	b10a      	cbz	r2, 179ee <ll_rl_find+0xe>
		*free = FILTER_IDX_NONE;
   179ea:	23ff      	movs	r3, #255	; 0xff
   179ec:	7013      	strb	r3, [r2, #0]
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   179ee:	f8df 8054 	ldr.w	r8, [pc, #84]	; 17a44 <ll_rl_find+0x64>
{
   179f2:	2500      	movs	r5, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   179f4:	f000 0901 	and.w	r9, r0, #1
   179f8:	2628      	movs	r6, #40	; 0x28
   179fa:	436e      	muls	r6, r5
   179fc:	b2ef      	uxtb	r7, r5
   179fe:	f818 3006 	ldrb.w	r3, [r8, r6]
   17a02:	07da      	lsls	r2, r3, #31
   17a04:	d51a      	bpl.n	17a3c <ll_rl_find+0x5c>
   17a06:	f3c3 1380 	ubfx	r3, r3, #6, #1
   17a0a:	454b      	cmp	r3, r9
   17a0c:	d10f      	bne.n	17a2e <ll_rl_find+0x4e>
   17a0e:	1c70      	adds	r0, r6, #1
   17a10:	2206      	movs	r2, #6
   17a12:	4651      	mov	r1, sl
   17a14:	4440      	add	r0, r8
   17a16:	f7e8 fe8f 	bl	738 <memcmp>
   17a1a:	b160      	cbz	r0, 17a36 <ll_rl_find+0x56>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   17a1c:	b13c      	cbz	r4, 17a2e <ll_rl_find+0x4e>
   17a1e:	f818 3006 	ldrb.w	r3, [r8, r6]
   17a22:	07db      	lsls	r3, r3, #31
   17a24:	d403      	bmi.n	17a2e <ll_rl_find+0x4e>
   17a26:	7823      	ldrb	r3, [r4, #0]
   17a28:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   17a2a:	bf08      	it	eq
   17a2c:	7027      	strbeq	r7, [r4, #0]
   17a2e:	3501      	adds	r5, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   17a30:	2d08      	cmp	r5, #8
   17a32:	d1e1      	bne.n	179f8 <ll_rl_find+0x18>
	return FILTER_IDX_NONE;
   17a34:	27ff      	movs	r7, #255	; 0xff
}
   17a36:	4638      	mov	r0, r7
   17a38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   17a3c:	2c00      	cmp	r4, #0
   17a3e:	d1f2      	bne.n	17a26 <ll_rl_find+0x46>
   17a40:	e7f5      	b.n	17a2e <ll_rl_find+0x4e>
   17a42:	bf00      	nop
   17a44:	20001f9c 	.word	0x20001f9c

00017a48 <ll_wl_add>:
{
   17a48:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   17a4c:	4607      	mov	r7, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   17a4e:	f7fd fea9 	bl	157a4 <radio_adv_filter_pol_get>
   17a52:	4605      	mov	r5, r0
   17a54:	b120      	cbz	r0, 17a60 <ll_wl_add+0x18>
		return BT_HCI_ERR_CMD_DISALLOWED;
   17a56:	250c      	movs	r5, #12
}
   17a58:	4628      	mov	r0, r5
   17a5a:	b002      	add	sp, #8
   17a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   17a60:	f7fd fec4 	bl	157ec <radio_scan_filter_pol_get>
   17a64:	07c3      	lsls	r3, r0, #31
   17a66:	d4f6      	bmi.n	17a56 <ll_wl_add+0xe>
	if (addr->type == ADDR_TYPE_ANON) {
   17a68:	7838      	ldrb	r0, [r7, #0]
   17a6a:	28ff      	cmp	r0, #255	; 0xff
   17a6c:	d103      	bne.n	17a76 <ll_wl_add+0x2e>
		wl_anon = 1;
   17a6e:	4b1f      	ldr	r3, [pc, #124]	; (17aec <ll_wl_add+0xa4>)
   17a70:	2201      	movs	r2, #1
   17a72:	701a      	strb	r2, [r3, #0]
		return 0;
   17a74:	e7f0      	b.n	17a58 <ll_wl_add+0x10>
	i = wl_find(id_addr->type, id_addr->a.val, &j);
   17a76:	f107 0801 	add.w	r8, r7, #1
   17a7a:	f10d 0207 	add.w	r2, sp, #7
   17a7e:	4641      	mov	r1, r8
   17a80:	f7ff fd8e 	bl	175a0 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   17a84:	2807      	cmp	r0, #7
   17a86:	d92d      	bls.n	17ae4 <ll_wl_add+0x9c>
	} else if (j >= ARRAY_SIZE(wl)) {
   17a88:	f89d 6007 	ldrb.w	r6, [sp, #7]
   17a8c:	2e07      	cmp	r6, #7
   17a8e:	d82b      	bhi.n	17ae8 <ll_wl_add+0xa0>
	wl[i].id_addr_type = id_addr->type & 0x1;
   17a90:	4c17      	ldr	r4, [pc, #92]	; (17af0 <ll_wl_add+0xa8>)
   17a92:	783a      	ldrb	r2, [r7, #0]
   17a94:	f814 3036 	ldrb.w	r3, [r4, r6, lsl #3]
	bt_addr_copy(&wl[i].id_addr, &id_addr->a);
   17a98:	eb04 00c6 	add.w	r0, r4, r6, lsl #3
	wl[i].id_addr_type = id_addr->type & 0x1;
   17a9c:	f362 0341 	bfi	r3, r2, #1, #1
	memcpy(dst, src, sizeof(*dst));
   17aa0:	4641      	mov	r1, r8
   17aa2:	2206      	movs	r2, #6
   17aa4:	3002      	adds	r0, #2
   17aa6:	f804 3036 	strb.w	r3, [r4, r6, lsl #3]
   17aaa:	f7e8 fe72 	bl	792 <memcpy>
	j = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   17aae:	462a      	mov	r2, r5
   17ab0:	4641      	mov	r1, r8
   17ab2:	7838      	ldrb	r0, [r7, #0]
   17ab4:	f7ff ff94 	bl	179e0 <ll_rl_find>
   17ab8:	00f3      	lsls	r3, r6, #3
	if (j < ARRAY_SIZE(rl)) {
   17aba:	2807      	cmp	r0, #7
		wl[i].rl_idx = j;
   17abc:	4423      	add	r3, r4
	if (j < ARRAY_SIZE(rl)) {
   17abe:	d80e      	bhi.n	17ade <ll_wl_add+0x96>
		wl[i].rl_idx = j;
   17ac0:	7058      	strb	r0, [r3, #1]
		rl[j].wl = 1;
   17ac2:	2328      	movs	r3, #40	; 0x28
   17ac4:	4a0b      	ldr	r2, [pc, #44]	; (17af4 <ll_wl_add+0xac>)
   17ac6:	4358      	muls	r0, r3
   17ac8:	5c13      	ldrb	r3, [r2, r0]
   17aca:	f043 0320 	orr.w	r3, r3, #32
   17ace:	5413      	strb	r3, [r2, r0]
	wl[i].taken = 1;
   17ad0:	f814 3036 	ldrb.w	r3, [r4, r6, lsl #3]
   17ad4:	f043 0301 	orr.w	r3, r3, #1
   17ad8:	f804 3036 	strb.w	r3, [r4, r6, lsl #3]
   17adc:	e7bc      	b.n	17a58 <ll_wl_add+0x10>
		wl[i].rl_idx = FILTER_IDX_NONE;
   17ade:	22ff      	movs	r2, #255	; 0xff
   17ae0:	705a      	strb	r2, [r3, #1]
   17ae2:	e7f5      	b.n	17ad0 <ll_wl_add+0x88>
		return BT_HCI_ERR_INVALID_PARAM;
   17ae4:	2512      	movs	r5, #18
   17ae6:	e7b7      	b.n	17a58 <ll_wl_add+0x10>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   17ae8:	2507      	movs	r5, #7
	return wl_add(addr);
   17aea:	e7b5      	b.n	17a58 <ll_wl_add+0x10>
   17aec:	20003300 	.word	0x20003300
   17af0:	2000210f 	.word	0x2000210f
   17af4:	20001f9c 	.word	0x20001f9c

00017af8 <ctrl_rl_idx_allowed>:
{
   17af8:	b507      	push	{r0, r1, r2, lr}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
   17afa:	4b12      	ldr	r3, [pc, #72]	; (17b44 <ctrl_rl_idx_allowed+0x4c>)
   17afc:	781b      	ldrb	r3, [r3, #0]
   17afe:	b1f3      	cbz	r3, 17b3e <ctrl_rl_idx_allowed+0x46>
   17b00:	2907      	cmp	r1, #7
   17b02:	d81c      	bhi.n	17b3e <ctrl_rl_idx_allowed+0x46>
   17b04:	b9d8      	cbnz	r0, 17b3e <ctrl_rl_idx_allowed+0x46>
	LL_ASSERT(rl[rl_idx].taken);
   17b06:	2328      	movs	r3, #40	; 0x28
   17b08:	4359      	muls	r1, r3
   17b0a:	4b0f      	ldr	r3, [pc, #60]	; (17b48 <ctrl_rl_idx_allowed+0x50>)
   17b0c:	5c58      	ldrb	r0, [r3, r1]
   17b0e:	07c2      	lsls	r2, r0, #31
   17b10:	d40e      	bmi.n	17b30 <ctrl_rl_idx_allowed+0x38>
   17b12:	4b0e      	ldr	r3, [pc, #56]	; (17b4c <ctrl_rl_idx_allowed+0x54>)
   17b14:	9301      	str	r3, [sp, #4]
   17b16:	9300      	str	r3, [sp, #0]
   17b18:	4a0d      	ldr	r2, [pc, #52]	; (17b50 <ctrl_rl_idx_allowed+0x58>)
   17b1a:	4b0e      	ldr	r3, [pc, #56]	; (17b54 <ctrl_rl_idx_allowed+0x5c>)
   17b1c:	490e      	ldr	r1, [pc, #56]	; (17b58 <ctrl_rl_idx_allowed+0x60>)
   17b1e:	480f      	ldr	r0, [pc, #60]	; (17b5c <ctrl_rl_idx_allowed+0x64>)
   17b20:	f7ea fbb8 	bl	2294 <printk>
   17b24:	4040      	eors	r0, r0
   17b26:	f380 8811 	msr	BASEPRI, r0
   17b2a:	f04f 0004 	mov.w	r0, #4
   17b2e:	df02      	svc	2
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   17b30:	0743      	lsls	r3, r0, #29
   17b32:	d504      	bpl.n	17b3e <ctrl_rl_idx_allowed+0x46>
   17b34:	f3c0 1000 	ubfx	r0, r0, #4, #1
}
   17b38:	b003      	add	sp, #12
   17b3a:	f85d fb04 	ldr.w	pc, [sp], #4
		return true;
   17b3e:	2001      	movs	r0, #1
   17b40:	e7fa      	b.n	17b38 <ctrl_rl_idx_allowed+0x40>
   17b42:	bf00      	nop
   17b44:	200020dc 	.word	0x200020dc
   17b48:	20001f9c 	.word	0x20001f9c
   17b4c:	00023dae 	.word	0x00023dae
   17b50:	00022d76 	.word	0x00022d76
   17b54:	00026d1c 	.word	0x00026d1c
   17b58:	000272d8 	.word	0x000272d8
   17b5c:	00026d78 	.word	0x00026d78

00017b60 <ll_rl_id_addr_get>:
{
   17b60:	4603      	mov	r3, r0
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   17b62:	2b07      	cmp	r3, #7
{
   17b64:	b537      	push	{r0, r1, r2, r4, r5, lr}
   17b66:	4610      	mov	r0, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   17b68:	d90e      	bls.n	17b88 <ll_rl_id_addr_get+0x28>
   17b6a:	4b15      	ldr	r3, [pc, #84]	; (17bc0 <ll_rl_id_addr_get+0x60>)
   17b6c:	9301      	str	r3, [sp, #4]
   17b6e:	9300      	str	r3, [sp, #0]
   17b70:	4a14      	ldr	r2, [pc, #80]	; (17bc4 <ll_rl_id_addr_get+0x64>)
   17b72:	4b15      	ldr	r3, [pc, #84]	; (17bc8 <ll_rl_id_addr_get+0x68>)
   17b74:	4915      	ldr	r1, [pc, #84]	; (17bcc <ll_rl_id_addr_get+0x6c>)
   17b76:	4816      	ldr	r0, [pc, #88]	; (17bd0 <ll_rl_id_addr_get+0x70>)
	LL_ASSERT(rl[rl_idx].taken);
   17b78:	f7ea fb8c 	bl	2294 <printk>
   17b7c:	4040      	eors	r0, r0
   17b7e:	f380 8811 	msr	BASEPRI, r0
   17b82:	f04f 0004 	mov.w	r0, #4
   17b86:	df02      	svc	2
   17b88:	2528      	movs	r5, #40	; 0x28
   17b8a:	4c12      	ldr	r4, [pc, #72]	; (17bd4 <ll_rl_id_addr_get+0x74>)
   17b8c:	fb05 f203 	mul.w	r2, r5, r3
   17b90:	5ca2      	ldrb	r2, [r4, r2]
   17b92:	f012 0f01 	tst.w	r2, #1
   17b96:	d107      	bne.n	17ba8 <ll_rl_id_addr_get+0x48>
   17b98:	4b09      	ldr	r3, [pc, #36]	; (17bc0 <ll_rl_id_addr_get+0x60>)
   17b9a:	9301      	str	r3, [sp, #4]
   17b9c:	9300      	str	r3, [sp, #0]
   17b9e:	4a09      	ldr	r2, [pc, #36]	; (17bc4 <ll_rl_id_addr_get+0x64>)
   17ba0:	4b09      	ldr	r3, [pc, #36]	; (17bc8 <ll_rl_id_addr_get+0x68>)
   17ba2:	490a      	ldr	r1, [pc, #40]	; (17bcc <ll_rl_id_addr_get+0x6c>)
   17ba4:	480c      	ldr	r0, [pc, #48]	; (17bd8 <ll_rl_id_addr_get+0x78>)
   17ba6:	e7e7      	b.n	17b78 <ll_rl_id_addr_get+0x18>
	*id_addr_type = rl[rl_idx].id_addr_type;
   17ba8:	f3c2 1280 	ubfx	r2, r2, #6, #1
   17bac:	700a      	strb	r2, [r1, #0]
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   17bae:	fb05 4103 	mla	r1, r5, r3, r4
   17bb2:	2206      	movs	r2, #6
   17bb4:	3101      	adds	r1, #1
}
   17bb6:	b003      	add	sp, #12
   17bb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   17bbc:	f7e8 bde9 	b.w	792 <memcpy>
   17bc0:	00023dae 	.word	0x00023dae
   17bc4:	00022d76 	.word	0x00022d76
   17bc8:	00026d30 	.word	0x00026d30
   17bcc:	000272d8 	.word	0x000272d8
   17bd0:	0002700d 	.word	0x0002700d
   17bd4:	20001f9c 	.word	0x20001f9c
   17bd8:	00026d78 	.word	0x00026d78

00017bdc <ctrl_rl_addr_allowed>:
{
   17bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!rl_enable || *rl_idx != FILTER_IDX_NONE) {
   17be0:	4b1a      	ldr	r3, [pc, #104]	; (17c4c <ctrl_rl_addr_allowed+0x70>)
   17be2:	781b      	ldrb	r3, [r3, #0]
   17be4:	b37b      	cbz	r3, 17c46 <ctrl_rl_addr_allowed+0x6a>
   17be6:	7813      	ldrb	r3, [r2, #0]
   17be8:	2bff      	cmp	r3, #255	; 0xff
   17bea:	d12c      	bne.n	17c46 <ctrl_rl_addr_allowed+0x6a>
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   17bec:	4e18      	ldr	r6, [pc, #96]	; (17c50 <ctrl_rl_addr_allowed+0x74>)
   17bee:	2400      	movs	r4, #0
   17bf0:	f04f 0828 	mov.w	r8, #40	; 0x28
   17bf4:	46b6      	mov	lr, r6
   17bf6:	fb08 f304 	mul.w	r3, r8, r4
   17bfa:	fa5f fc84 	uxtb.w	ip, r4
   17bfe:	5cf7      	ldrb	r7, [r6, r3]
   17c00:	f017 0f01 	tst.w	r7, #1
   17c04:	eb06 0503 	add.w	r5, r6, r3
   17c08:	d01a      	beq.n	17c40 <ctrl_rl_addr_allowed+0x64>
   17c0a:	f3c7 1780 	ubfx	r7, r7, #6, #1
   17c0e:	4287      	cmp	r7, r0
   17c10:	d116      	bne.n	17c40 <ctrl_rl_addr_allowed+0x64>
   17c12:	3306      	adds	r3, #6
   17c14:	1e4f      	subs	r7, r1, #1
   17c16:	4433      	add	r3, r6
				if (addr[j] != id_addr[j]) {
   17c18:	f815 af01 	ldrb.w	sl, [r5, #1]!
   17c1c:	f817 9f01 	ldrb.w	r9, [r7, #1]!
   17c20:	45ca      	cmp	sl, r9
   17c22:	d10d      	bne.n	17c40 <ctrl_rl_addr_allowed+0x64>
			for (j = 0; j < BDADDR_SIZE; j++) {
   17c24:	429d      	cmp	r5, r3
   17c26:	d1f7      	bne.n	17c18 <ctrl_rl_addr_allowed+0x3c>
				return !rl[i].pirk || rl[i].dev;
   17c28:	2328      	movs	r3, #40	; 0x28
   17c2a:	435c      	muls	r4, r3
				*rl_idx = i;
   17c2c:	f882 c000 	strb.w	ip, [r2]
				return !rl[i].pirk || rl[i].dev;
   17c30:	f81e 0004 	ldrb.w	r0, [lr, r4]
   17c34:	0743      	lsls	r3, r0, #29
   17c36:	d506      	bpl.n	17c46 <ctrl_rl_addr_allowed+0x6a>
   17c38:	f3c0 1000 	ubfx	r0, r0, #4, #1
   17c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17c40:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   17c42:	2c08      	cmp	r4, #8
   17c44:	d1d7      	bne.n	17bf6 <ctrl_rl_addr_allowed+0x1a>
   17c46:	2001      	movs	r0, #1
}
   17c48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17c4c:	200020dc 	.word	0x200020dc
   17c50:	20001f9c 	.word	0x20001f9c

00017c54 <ctrl_rl_addr_resolve>:
{
   17c54:	b470      	push	{r4, r5, r6}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || !rl[rl_idx].lirk) {
   17c56:	4c0d      	ldr	r4, [pc, #52]	; (17c8c <ctrl_rl_addr_resolve+0x38>)
   17c58:	7824      	ldrb	r4, [r4, #0]
   17c5a:	b1a4      	cbz	r4, 17c86 <ctrl_rl_addr_resolve+0x32>
   17c5c:	2a07      	cmp	r2, #7
   17c5e:	d812      	bhi.n	17c86 <ctrl_rl_addr_resolve+0x32>
   17c60:	2528      	movs	r5, #40	; 0x28
   17c62:	4c0b      	ldr	r4, [pc, #44]	; (17c90 <ctrl_rl_addr_resolve+0x3c>)
   17c64:	fb05 f602 	mul.w	r6, r5, r2
   17c68:	5da6      	ldrb	r6, [r4, r6]
   17c6a:	0736      	lsls	r6, r6, #28
   17c6c:	d50b      	bpl.n	17c86 <ctrl_rl_addr_resolve+0x32>
	if ((id_addr_type != 0) && ((id_addr[5] & 0xc0) == 0x40)) {
   17c6e:	b150      	cbz	r0, 17c86 <ctrl_rl_addr_resolve+0x32>
   17c70:	794b      	ldrb	r3, [r1, #5]
   17c72:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   17c76:	2b40      	cmp	r3, #64	; 0x40
   17c78:	d105      	bne.n	17c86 <ctrl_rl_addr_resolve+0x32>
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   17c7a:	fb05 4202 	mla	r2, r5, r2, r4
   17c7e:	1dd0      	adds	r0, r2, #7
}
   17c80:	bc70      	pop	{r4, r5, r6}
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   17c82:	f7eb bbae 	b.w	33e2 <bt_rpa_irk_matches>
}
   17c86:	2000      	movs	r0, #0
   17c88:	bc70      	pop	{r4, r5, r6}
   17c8a:	4770      	bx	lr
   17c8c:	200020dc 	.word	0x200020dc
   17c90:	20001f9c 	.word	0x20001f9c

00017c94 <ctrl_rl_enabled>:
	return rl_enable;
   17c94:	4b02      	ldr	r3, [pc, #8]	; (17ca0 <ctrl_rl_enabled+0xc>)
   17c96:	7818      	ldrb	r0, [r3, #0]
}
   17c98:	3000      	adds	r0, #0
   17c9a:	bf18      	it	ne
   17c9c:	2001      	movne	r0, #1
   17c9e:	4770      	bx	lr
   17ca0:	200020dc 	.word	0x200020dc

00017ca4 <ll_rl_pdu_adv_update>:
{
   17ca4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   17ca6:	4605      	mov	r5, r0
   17ca8:	460c      	mov	r4, r1
				  &pdu->scan_rsp.addr[0] :
   17caa:	1c8f      	adds	r7, r1, #2
	struct ll_adv_set *ll_adv = ll_adv_set_get();
   17cac:	f7ff f8ce 	bl	16e4c <ll_adv_set_get>
	if (idx < ARRAY_SIZE(rl) && rl[idx].lirk) {
   17cb0:	2d07      	cmp	r5, #7
	struct ll_adv_set *ll_adv = ll_adv_set_get();
   17cb2:	4606      	mov	r6, r0
	if (idx < ARRAY_SIZE(rl) && rl[idx].lirk) {
   17cb4:	d83c      	bhi.n	17d30 <ll_rl_pdu_adv_update+0x8c>
   17cb6:	2328      	movs	r3, #40	; 0x28
   17cb8:	4a2a      	ldr	r2, [pc, #168]	; (17d64 <ll_rl_pdu_adv_update+0xc0>)
   17cba:	436b      	muls	r3, r5
   17cbc:	18d1      	adds	r1, r2, r3
   17cbe:	5cd3      	ldrb	r3, [r2, r3]
   17cc0:	071a      	lsls	r2, r3, #28
   17cc2:	d535      	bpl.n	17d30 <ll_rl_pdu_adv_update+0x8c>
		LL_ASSERT(rl[idx].rpas_ready);
   17cc4:	079b      	lsls	r3, r3, #30
   17cc6:	d40e      	bmi.n	17ce6 <ll_rl_pdu_adv_update+0x42>
   17cc8:	4b27      	ldr	r3, [pc, #156]	; (17d68 <ll_rl_pdu_adv_update+0xc4>)
   17cca:	9301      	str	r3, [sp, #4]
   17ccc:	9300      	str	r3, [sp, #0]
   17cce:	4a27      	ldr	r2, [pc, #156]	; (17d6c <ll_rl_pdu_adv_update+0xc8>)
   17cd0:	4b27      	ldr	r3, [pc, #156]	; (17d70 <ll_rl_pdu_adv_update+0xcc>)
   17cd2:	4928      	ldr	r1, [pc, #160]	; (17d74 <ll_rl_pdu_adv_update+0xd0>)
   17cd4:	4828      	ldr	r0, [pc, #160]	; (17d78 <ll_rl_pdu_adv_update+0xd4>)
   17cd6:	f7ea fadd 	bl	2294 <printk>
   17cda:	4040      	eors	r0, r0
   17cdc:	f380 8811 	msr	BASEPRI, r0
   17ce0:	f04f 0004 	mov.w	r0, #4
   17ce4:	df02      	svc	2
		pdu->tx_addr = 1;
   17ce6:	7823      	ldrb	r3, [r4, #0]
		memcpy(adva, rl[idx].local_rpa->val, BDADDR_SIZE);
   17ce8:	6a49      	ldr	r1, [r1, #36]	; 0x24
		pdu->tx_addr = 1;
   17cea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   17cee:	7023      	strb	r3, [r4, #0]
		memcpy(adva, rl[idx].local_rpa->val, BDADDR_SIZE);
   17cf0:	2206      	movs	r2, #6
   17cf2:	4638      	mov	r0, r7
   17cf4:	f7e8 fd4d 	bl	792 <memcpy>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   17cf8:	7823      	ldrb	r3, [r4, #0]
   17cfa:	f003 020f 	and.w	r2, r3, #15
   17cfe:	2a01      	cmp	r2, #1
   17d00:	d12d      	bne.n	17d5e <ll_rl_pdu_adv_update+0xba>
		if (idx < ARRAY_SIZE(rl) && rl[idx].pirk) {
   17d02:	2d07      	cmp	r5, #7
   17d04:	f104 0008 	add.w	r0, r4, #8
   17d08:	d81f      	bhi.n	17d4a <ll_rl_pdu_adv_update+0xa6>
   17d0a:	2228      	movs	r2, #40	; 0x28
   17d0c:	4915      	ldr	r1, [pc, #84]	; (17d64 <ll_rl_pdu_adv_update+0xc0>)
   17d0e:	fb02 f705 	mul.w	r7, r2, r5
   17d12:	5dcf      	ldrb	r7, [r1, r7]
   17d14:	077f      	lsls	r7, r7, #29
   17d16:	d518      	bpl.n	17d4a <ll_rl_pdu_adv_update+0xa6>
			       rl[idx].peer_rpa.val, BDADDR_SIZE);
   17d18:	fb02 1105 	mla	r1, r2, r5, r1
			pdu->rx_addr = 1;
   17d1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   17d20:	7023      	strb	r3, [r4, #0]
			memcpy(&pdu->direct_ind.tgt_addr[0],
   17d22:	2206      	movs	r2, #6
   17d24:	311e      	adds	r1, #30
}
   17d26:	b003      	add	sp, #12
   17d28:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			memcpy(&pdu->direct_ind.tgt_addr[0],
   17d2c:	f7e8 bd31 	b.w	792 <memcpy>
		pdu->tx_addr = ll_adv->own_addr_type & 0x1;
   17d30:	7830      	ldrb	r0, [r6, #0]
   17d32:	7823      	ldrb	r3, [r4, #0]
   17d34:	f3c0 1041 	ubfx	r0, r0, #5, #2
   17d38:	f360 1386 	bfi	r3, r0, #6, #1
   17d3c:	7023      	strb	r3, [r4, #0]
		ll_addr_get(ll_adv->own_addr_type & 0x1, adva);
   17d3e:	4639      	mov	r1, r7
   17d40:	f000 0001 	and.w	r0, r0, #1
   17d44:	f7f4 fd48 	bl	c7d8 <ll_addr_get>
   17d48:	e7d6      	b.n	17cf8 <ll_rl_pdu_adv_update+0x54>
			pdu->rx_addr = ll_adv->id_addr_type;
   17d4a:	4631      	mov	r1, r6
   17d4c:	7822      	ldrb	r2, [r4, #0]
   17d4e:	f811 3b02 	ldrb.w	r3, [r1], #2
   17d52:	09db      	lsrs	r3, r3, #7
   17d54:	f363 12c7 	bfi	r2, r3, #7, #1
   17d58:	7022      	strb	r2, [r4, #0]
			memcpy(&pdu->direct_ind.tgt_addr[0],
   17d5a:	2206      	movs	r2, #6
   17d5c:	e7e3      	b.n	17d26 <ll_rl_pdu_adv_update+0x82>
}
   17d5e:	b003      	add	sp, #12
   17d60:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17d62:	bf00      	nop
   17d64:	20001f9c 	.word	0x20001f9c
   17d68:	00023dae 	.word	0x00023dae
   17d6c:	00022d76 	.word	0x00022d76
   17d70:	00026d42 	.word	0x00026d42
   17d74:	000272d8 	.word	0x000272d8
   17d78:	00027039 	.word	0x00027039

00017d7c <ll_rl_rpa_update>:

void ll_rl_rpa_update(bool timeout)
{
   17d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17d80:	b08b      	sub	sp, #44	; 0x2c
   17d82:	4681      	mov	r9, r0
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t);
   17d84:	f009 ffa8 	bl	21cd8 <_impl_k_uptime_get>
   17d88:	e9cd 0102 	strd	r0, r1, [sp, #8]
	u8_t i;
	int err;
	s64_t now = k_uptime_get();
	bool all = timeout || (rpa_last_ms == -1) ||
   17d8c:	f1b9 0f00 	cmp.w	r9, #0
   17d90:	d14e      	bne.n	17e30 <ll_rl_rpa_update+0xb4>
   17d92:	4b68      	ldr	r3, [pc, #416]	; (17f34 <ll_rl_rpa_update+0x1b8>)
   17d94:	e9d3 0100 	ldrd	r0, r1, [r3]
   17d98:	1c4c      	adds	r4, r1, #1
   17d9a:	bf08      	it	eq
   17d9c:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
   17da0:	d046      	beq.n	17e30 <ll_rl_rpa_update+0xb4>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   17da2:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   17da6:	1a1b      	subs	r3, r3, r0
   17da8:	4618      	mov	r0, r3
   17daa:	4b63      	ldr	r3, [pc, #396]	; (17f38 <ll_rl_rpa_update+0x1bc>)
   17dac:	681a      	ldr	r2, [r3, #0]
   17dae:	eb64 0401 	sbc.w	r4, r4, r1
   17db2:	2300      	movs	r3, #0
	bool all = timeout || (rpa_last_ms == -1) ||
   17db4:	4290      	cmp	r0, r2
   17db6:	eb74 0303 	sbcs.w	r3, r4, r3
   17dba:	bfac      	ite	ge
   17dbc:	2601      	movge	r6, #1
   17dbe:	2600      	movlt	r6, #0
   17dc0:	4d5e      	ldr	r5, [pc, #376]	; (17f3c <ll_rl_rpa_update+0x1c0>)
   17dc2:	f8df b19c 	ldr.w	fp, [pc, #412]	; 17f60 <ll_rl_rpa_update+0x1e4>
	BT_DBG("");

	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   17dc6:	f1a5 0a07 	sub.w	sl, r5, #7
	bool all = timeout || (rpa_last_ms == -1) ||
   17dca:	2400      	movs	r4, #0
   17dcc:	4657      	mov	r7, sl
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   17dce:	2328      	movs	r3, #40	; 0x28
   17dd0:	4363      	muls	r3, r4
   17dd2:	f81a 3003 	ldrb.w	r3, [sl, r3]
   17dd6:	07da      	lsls	r2, r3, #31
   17dd8:	d54c      	bpl.n	17e74 <ll_rl_rpa_update+0xf8>
   17dda:	b90e      	cbnz	r6, 17de0 <ll_rl_rpa_update+0x64>
   17ddc:	0798      	lsls	r0, r3, #30
   17dde:	d449      	bmi.n	17e74 <ll_rl_rpa_update+0xf8>

			if (rl[i].pirk) {
   17de0:	2328      	movs	r3, #40	; 0x28
   17de2:	4363      	muls	r3, r4
   17de4:	5cfb      	ldrb	r3, [r7, r3]
   17de6:	0759      	lsls	r1, r3, #29
   17de8:	d524      	bpl.n	17e34 <ll_rl_rpa_update+0xb8>
				u8_t irk[16];

				/* TODO: move this swap to the driver level */
				sys_memcpy_swap(irk, peer_irks[rl[i].pirk_idx],
   17dea:	7c2a      	ldrb	r2, [r5, #16]
   17dec:	4b54      	ldr	r3, [pc, #336]	; (17f40 <ll_rl_rpa_update+0x1c4>)
   17dee:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   17df2:	f103 0210 	add.w	r2, r3, #16
   17df6:	f10d 0117 	add.w	r1, sp, #23
		*((u8_t *)dst++) = *((u8_t *)src--);
   17dfa:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   17dfe:	f801 0f01 	strb.w	r0, [r1, #1]!
	for (; length > 0; length--) {
   17e02:	429a      	cmp	r2, r3
   17e04:	d1f9      	bne.n	17dfa <ll_rl_rpa_update+0x7e>
						16);
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   17e06:	f105 0117 	add.w	r1, r5, #23
   17e0a:	a806      	add	r0, sp, #24
   17e0c:	f7eb fafc 	bl	3408 <bt_rpa_create>
				LL_ASSERT(!err);
   17e10:	b180      	cbz	r0, 17e34 <ll_rl_rpa_update+0xb8>

			if (rl[i].lirk) {
				bt_addr_t rpa;

				err = bt_rpa_create(rl[i].local_irk, &rpa);
				LL_ASSERT(!err);
   17e12:	4b4c      	ldr	r3, [pc, #304]	; (17f44 <ll_rl_rpa_update+0x1c8>)
   17e14:	9301      	str	r3, [sp, #4]
   17e16:	9300      	str	r3, [sp, #0]
   17e18:	4a4b      	ldr	r2, [pc, #300]	; (17f48 <ll_rl_rpa_update+0x1cc>)
   17e1a:	4b4c      	ldr	r3, [pc, #304]	; (17f4c <ll_rl_rpa_update+0x1d0>)
   17e1c:	494c      	ldr	r1, [pc, #304]	; (17f50 <ll_rl_rpa_update+0x1d4>)
   17e1e:	484d      	ldr	r0, [pc, #308]	; (17f54 <ll_rl_rpa_update+0x1d8>)
	ll_rl_pdu_adv_update(idx, pdu);
   17e20:	f7ea fa38 	bl	2294 <printk>
	memcpy(&pdu->adv_ind.data[0], &prev->adv_ind.data[0],
   17e24:	4040      	eors	r0, r0
   17e26:	f380 8811 	msr	BASEPRI, r0
   17e2a:	f04f 0004 	mov.w	r0, #4
   17e2e:	df02      	svc	2
	bool all = timeout || (rpa_last_ms == -1) ||
   17e30:	2601      	movs	r6, #1
   17e32:	e7c5      	b.n	17dc0 <ll_rl_rpa_update+0x44>
			if (rl[i].lirk) {
   17e34:	2328      	movs	r3, #40	; 0x28
   17e36:	4363      	muls	r3, r4
   17e38:	5cfb      	ldrb	r3, [r7, r3]
   17e3a:	071a      	lsls	r2, r3, #28
   17e3c:	d514      	bpl.n	17e68 <ll_rl_rpa_update+0xec>
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   17e3e:	f10d 0818 	add.w	r8, sp, #24
   17e42:	4641      	mov	r1, r8
   17e44:	4628      	mov	r0, r5
   17e46:	f7eb fadf 	bl	3408 <bt_rpa_create>
				LL_ASSERT(!err);
   17e4a:	2800      	cmp	r0, #0
   17e4c:	d1e1      	bne.n	17e12 <ll_rl_rpa_update+0x96>
   17e4e:	2206      	movs	r2, #6
   17e50:	fb02 b304 	mla	r3, r2, r4, fp
   17e54:	4618      	mov	r0, r3
				/* pointer read/write assumed to be atomic
				 * so that if ISR fires the local_rpa pointer
				 * will always point to a valid full RPA
				 */
				rl[i].local_rpa = &rpa;
   17e56:	f8c5 801d 	str.w	r8, [r5, #29]
   17e5a:	4641      	mov	r1, r8
   17e5c:	9305      	str	r3, [sp, #20]
   17e5e:	f7e8 fc98 	bl	792 <memcpy>
				bt_addr_copy(&local_rpas[i], &rpa);
				rl[i].local_rpa = &local_rpas[i];
   17e62:	9b05      	ldr	r3, [sp, #20]
   17e64:	f8c5 301d 	str.w	r3, [r5, #29]
			}

			rl[i].rpas_ready = 1;
   17e68:	2328      	movs	r3, #40	; 0x28
   17e6a:	4363      	muls	r3, r4
   17e6c:	5cfa      	ldrb	r2, [r7, r3]
   17e6e:	f042 0202 	orr.w	r2, r2, #2
   17e72:	54fa      	strb	r2, [r7, r3]
   17e74:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   17e76:	2c08      	cmp	r4, #8
   17e78:	f105 0528 	add.w	r5, r5, #40	; 0x28
   17e7c:	d1a7      	bne.n	17dce <ll_rl_rpa_update+0x52>
		}
	}

	if (all) {
   17e7e:	b126      	cbz	r6, 17e8a <ll_rl_rpa_update+0x10e>
		rpa_last_ms = now;
   17e80:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   17e84:	4b2b      	ldr	r3, [pc, #172]	; (17f34 <ll_rl_rpa_update+0x1b8>)
   17e86:	e9c3 1200 	strd	r1, r2, [r3]
	}

	if (timeout) {
   17e8a:	f1b9 0f00 	cmp.w	r9, #0
   17e8e:	d04d      	beq.n	17f2c <ll_rl_rpa_update+0x1b0>
#if defined(CONFIG_BT_BROADCASTER)
		if (ll_adv_is_enabled()) {
   17e90:	f7fd fc80 	bl	15794 <ll_adv_is_enabled>
   17e94:	2800      	cmp	r0, #0
   17e96:	d049      	beq.n	17f2c <ll_rl_rpa_update+0x1b0>
	ll_adv = ll_adv_set_get();
   17e98:	f7fe ffd8 	bl	16e4c <ll_adv_set_get>
	if (ll_adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
   17e9c:	7803      	ldrb	r3, [r0, #0]
   17e9e:	065b      	lsls	r3, r3, #25
	ll_adv = ll_adv_set_get();
   17ea0:	4680      	mov	r8, r0
	if (ll_adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
   17ea2:	d543      	bpl.n	17f2c <ll_rl_rpa_update+0x1b0>
	radio_adv_data = radio_adv_data_get();
   17ea4:	f7fd fc6a 	bl	1577c <radio_adv_data_get>
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   17ea8:	f890 4203 	ldrb.w	r4, [r0, #515]	; 0x203
	if (radio_adv_data->first == radio_adv_data->last) {
   17eac:	f890 3202 	ldrb.w	r3, [r0, #514]	; 0x202
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   17eb0:	eb04 2104 	add.w	r1, r4, r4, lsl #8
	if (radio_adv_data->first == radio_adv_data->last) {
   17eb4:	42a3      	cmp	r3, r4
	radio_adv_data = radio_adv_data_get();
   17eb6:	4605      	mov	r5, r0
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   17eb8:	eb00 0701 	add.w	r7, r0, r1
	if (radio_adv_data->first == radio_adv_data->last) {
   17ebc:	d104      	bne.n	17ec8 <ll_rl_rpa_update+0x14c>
		last = radio_adv_data->last + 1;
   17ebe:	3401      	adds	r4, #1
   17ec0:	b2e4      	uxtb	r4, r4
			last = 0;
   17ec2:	2c02      	cmp	r4, #2
   17ec4:	bf08      	it	eq
   17ec6:	2400      	moveq	r4, #0
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
   17ec8:	eb04 2304 	add.w	r3, r4, r4, lsl #8
	pdu->type = prev->type;
   17ecc:	5c68      	ldrb	r0, [r5, r1]
   17ece:	5cea      	ldrb	r2, [r5, r3]
   17ed0:	f360 0203 	bfi	r2, r0, #0, #4
	pdu->rfu = 0;
   17ed4:	f36f 1204 	bfc	r2, #4, #1
   17ed8:	54ea      	strb	r2, [r5, r3]
		pdu->chan_sel = prev->chan_sel;
   17eda:	5c6a      	ldrb	r2, [r5, r1]
   17edc:	5ce9      	ldrb	r1, [r5, r3]
	idx = ll_rl_find(ll_adv->id_addr_type, ll_adv->id_addr, NULL);
   17ede:	f898 0000 	ldrb.w	r0, [r8]
		pdu->chan_sel = prev->chan_sel;
   17ee2:	f3c2 1240 	ubfx	r2, r2, #5, #1
   17ee6:	f362 1145 	bfi	r1, r2, #5, #1
   17eea:	54e9      	strb	r1, [r5, r3]
	idx = ll_rl_find(ll_adv->id_addr_type, ll_adv->id_addr, NULL);
   17eec:	2200      	movs	r2, #0
   17eee:	f108 0102 	add.w	r1, r8, #2
   17ef2:	09c0      	lsrs	r0, r0, #7
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
   17ef4:	18ee      	adds	r6, r5, r3
	idx = ll_rl_find(ll_adv->id_addr_type, ll_adv->id_addr, NULL);
   17ef6:	f7ff fd73 	bl	179e0 <ll_rl_find>
	LL_ASSERT(idx < ARRAY_SIZE(rl));
   17efa:	2807      	cmp	r0, #7
   17efc:	d907      	bls.n	17f0e <ll_rl_rpa_update+0x192>
	ll_rl_pdu_adv_update(idx, pdu);
   17efe:	4b11      	ldr	r3, [pc, #68]	; (17f44 <ll_rl_rpa_update+0x1c8>)
   17f00:	9301      	str	r3, [sp, #4]
   17f02:	9300      	str	r3, [sp, #0]
   17f04:	4a10      	ldr	r2, [pc, #64]	; (17f48 <ll_rl_rpa_update+0x1cc>)
   17f06:	4b14      	ldr	r3, [pc, #80]	; (17f58 <ll_rl_rpa_update+0x1dc>)
   17f08:	4911      	ldr	r1, [pc, #68]	; (17f50 <ll_rl_rpa_update+0x1d4>)
   17f0a:	4814      	ldr	r0, [pc, #80]	; (17f5c <ll_rl_rpa_update+0x1e0>)
   17f0c:	e788      	b.n	17e20 <ll_rl_rpa_update+0xa4>
   17f0e:	4631      	mov	r1, r6
   17f10:	f7ff fec8 	bl	17ca4 <ll_rl_pdu_adv_update>
	       prev->len - BDADDR_SIZE);
   17f14:	787a      	ldrb	r2, [r7, #1]
	memcpy(&pdu->adv_ind.data[0], &prev->adv_ind.data[0],
   17f16:	f107 0108 	add.w	r1, r7, #8
   17f1a:	3a06      	subs	r2, #6
   17f1c:	f106 0008 	add.w	r0, r6, #8
   17f20:	f7e8 fc37 	bl	792 <memcpy>
	pdu->len = prev->len;
   17f24:	787b      	ldrb	r3, [r7, #1]
   17f26:	7073      	strb	r3, [r6, #1]
	radio_adv_data->last = last;
   17f28:	f885 4203 	strb.w	r4, [r5, #515]	; 0x203
			rpa_adv_refresh();
		}
#endif
	}
}
   17f2c:	b00b      	add	sp, #44	; 0x2c
   17f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17f32:	bf00      	nop
   17f34:	200032f8 	.word	0x200032f8
   17f38:	2000332c 	.word	0x2000332c
   17f3c:	20001fa3 	.word	0x20001fa3
   17f40:	20001f1b 	.word	0x20001f1b
   17f44:	00023dae 	.word	0x00023dae
   17f48:	00022d76 	.word	0x00022d76
   17f4c:	00026d67 	.word	0x00026d67
   17f50:	000272d8 	.word	0x000272d8
   17f54:	00026c90 	.word	0x00026c90
   17f58:	00026d57 	.word	0x00026d57
   17f5c:	0002706d 	.word	0x0002706d
   17f60:	20001ee2 	.word	0x20001ee2

00017f64 <rpa_timeout>:

static void rpa_timeout(struct k_work *work)
{
   17f64:	b508      	push	{r3, lr}
	ll_rl_rpa_update(true);
   17f66:	2001      	movs	r0, #1
   17f68:	f7ff ff08 	bl	17d7c <ll_rl_rpa_update>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   17f6c:	4b03      	ldr	r3, [pc, #12]	; (17f7c <rpa_timeout+0x18>)
   17f6e:	4904      	ldr	r1, [pc, #16]	; (17f80 <rpa_timeout+0x1c>)
   17f70:	681a      	ldr	r2, [r3, #0]
   17f72:	4804      	ldr	r0, [pc, #16]	; (17f84 <rpa_timeout+0x20>)
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
}
   17f74:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   17f78:	f00a b9bc 	b.w	222f4 <k_delayed_work_submit_to_queue>
   17f7c:	2000332c 	.word	0x2000332c
   17f80:	20003304 	.word	0x20003304
   17f84:	20003340 	.word	0x20003340

00017f88 <ll_adv_scan_state_cb>:

	k_delayed_work_cancel(&rpa_work);
}

void ll_adv_scan_state_cb(u8_t bm)
{
   17f88:	4b07      	ldr	r3, [pc, #28]	; (17fa8 <ll_adv_scan_state_cb+0x20>)
	if (!rl_enable) {
   17f8a:	781b      	ldrb	r3, [r3, #0]
	if (bm) {
   17f8c:	b130      	cbz	r0, 17f9c <ll_adv_scan_state_cb+0x14>
	if (!rl_enable) {
   17f8e:	b14b      	cbz	r3, 17fa4 <ll_adv_scan_state_cb+0x1c>
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
   17f90:	4b06      	ldr	r3, [pc, #24]	; (17fac <ll_adv_scan_state_cb+0x24>)
   17f92:	4907      	ldr	r1, [pc, #28]	; (17fb0 <ll_adv_scan_state_cb+0x28>)
   17f94:	681a      	ldr	r2, [r3, #0]
   17f96:	4807      	ldr	r0, [pc, #28]	; (17fb4 <ll_adv_scan_state_cb+0x2c>)
   17f98:	f00a b9ac 	b.w	222f4 <k_delayed_work_submit_to_queue>
	if (!rl_enable) {
   17f9c:	b113      	cbz	r3, 17fa4 <ll_adv_scan_state_cb+0x1c>
	k_delayed_work_cancel(&rpa_work);
   17f9e:	4804      	ldr	r0, [pc, #16]	; (17fb0 <ll_adv_scan_state_cb+0x28>)
   17fa0:	f00a b94e 	b.w	22240 <k_delayed_work_cancel>
   17fa4:	4770      	bx	lr
   17fa6:	bf00      	nop
   17fa8:	200020dc 	.word	0x200020dc
   17fac:	2000332c 	.word	0x2000332c
   17fb0:	20003304 	.word	0x20003304
   17fb4:	20003340 	.word	0x20003340

00017fb8 <ll_rl_size_get>:
}

u32_t ll_rl_size_get(void)
{
	return CONFIG_BT_CTLR_RL_SIZE;
}
   17fb8:	2008      	movs	r0, #8
   17fba:	4770      	bx	lr

00017fbc <ll_rl_clear>:

u32_t ll_rl_clear(void)
{
   17fbc:	b510      	push	{r4, lr}
	if (!rl_access_check(false)) {
   17fbe:	f7ff fb4d 	bl	1765c <rl_access_check.constprop.1>
   17fc2:	b178      	cbz	r0, 17fe4 <ll_rl_clear+0x28>
		rl[i].taken = 0;
   17fc4:	4908      	ldr	r1, [pc, #32]	; (17fe8 <ll_rl_clear+0x2c>)
   17fc6:	2300      	movs	r3, #0
   17fc8:	2428      	movs	r4, #40	; 0x28
   17fca:	fb04 f203 	mul.w	r2, r4, r3
   17fce:	3301      	adds	r3, #1
   17fd0:	5c88      	ldrb	r0, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   17fd2:	2b08      	cmp	r3, #8
		rl[i].taken = 0;
   17fd4:	f36f 0000 	bfc	r0, #0, #1
   17fd8:	5488      	strb	r0, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   17fda:	d1f6      	bne.n	17fca <ll_rl_clear+0xe>
	peer_irk_count = 0;
   17fdc:	4b03      	ldr	r3, [pc, #12]	; (17fec <ll_rl_clear+0x30>)
   17fde:	2000      	movs	r0, #0
   17fe0:	7018      	strb	r0, [r3, #0]
   17fe2:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   17fe4:	200c      	movs	r0, #12
	}

	rl_clear();

	return 0;
}
   17fe6:	bd10      	pop	{r4, pc}
   17fe8:	20001f9c 	.word	0x20001f9c
   17fec:	20001f12 	.word	0x20001f12

00017ff0 <ll_rl_add>:

u32_t ll_rl_add(bt_addr_le_t *id_addr, const u8_t pirk[16],
		const u8_t lirk[16])
{
   17ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17ff4:	b085      	sub	sp, #20
   17ff6:	4607      	mov	r7, r0
   17ff8:	4689      	mov	r9, r1
   17ffa:	4692      	mov	sl, r2
	u8_t i, j;

	if (!rl_access_check(false)) {
   17ffc:	f7ff fb2e 	bl	1765c <rl_access_check.constprop.1>
   18000:	2800      	cmp	r0, #0
   18002:	f000 8086 	beq.w	18112 <ll_rl_add+0x122>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	i = ll_rl_find(id_addr->type, id_addr->a.val, &j);
   18006:	f107 0801 	add.w	r8, r7, #1
   1800a:	f10d 020f 	add.w	r2, sp, #15
   1800e:	4641      	mov	r1, r8
   18010:	7838      	ldrb	r0, [r7, #0]
   18012:	f7ff fce5 	bl	179e0 <ll_rl_find>

	/* Duplicate check */
	if (i < ARRAY_SIZE(rl)) {
   18016:	2807      	cmp	r0, #7
   18018:	d97d      	bls.n	18116 <ll_rl_add+0x126>
		return BT_HCI_ERR_INVALID_PARAM;
	} else if (j >= ARRAY_SIZE(rl)) {
   1801a:	f89d 500f 	ldrb.w	r5, [sp, #15]
   1801e:	2d07      	cmp	r5, #7
   18020:	d87b      	bhi.n	1811a <ll_rl_add+0x12a>
   18022:	eb05 0b85 	add.w	fp, r5, r5, lsl #2
	}

	/* Device not found but empty slot found */
	i = j;

	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   18026:	4c3e      	ldr	r4, [pc, #248]	; (18120 <ll_rl_add+0x130>)
   18028:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
	rl[i].id_addr_type = id_addr->type & 0x1;
   1802c:	2628      	movs	r6, #40	; 0x28
   1802e:	436e      	muls	r6, r5
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   18030:	f10b 0001 	add.w	r0, fp, #1
   18034:	2206      	movs	r2, #6
   18036:	4641      	mov	r1, r8
   18038:	4420      	add	r0, r4
   1803a:	f7e8 fbaa 	bl	792 <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
   1803e:	7839      	ldrb	r1, [r7, #0]
   18040:	5da3      	ldrb	r3, [r4, r6]
   18042:	19a2      	adds	r2, r4, r6
   18044:	f361 1386 	bfi	r3, r1, #6, #1
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   18048:	4648      	mov	r0, r9
   1804a:	2110      	movs	r1, #16
	rl[i].id_addr_type = id_addr->type & 0x1;
   1804c:	9201      	str	r2, [sp, #4]
   1804e:	55a3      	strb	r3, [r4, r6]
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   18050:	f7f3 fc11 	bl	b876 <mem_nz>
   18054:	5da3      	ldrb	r3, [r4, r6]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   18056:	2110      	movs	r1, #16
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   18058:	f360 0382 	bfi	r3, r0, #2, #1
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   1805c:	4650      	mov	r0, sl
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   1805e:	55a3      	strb	r3, [r4, r6]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   18060:	f7f3 fc09 	bl	b876 <mem_nz>
   18064:	5da3      	ldrb	r3, [r4, r6]
	if (rl[i].pirk) {
   18066:	9a01      	ldr	r2, [sp, #4]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   18068:	f000 0001 	and.w	r0, r0, #1
   1806c:	f360 03c3 	bfi	r3, r0, #3, #1
	if (rl[i].pirk) {
   18070:	f013 0f04 	tst.w	r3, #4
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   18074:	55a3      	strb	r3, [r4, r6]
	if (rl[i].pirk) {
   18076:	d138      	bne.n	180ea <ll_rl_add+0xfa>
		rl[i].pirk_idx = peer_irk_count;
		peer_irk_rl_ids[peer_irk_count] = i;
		/* AAR requires big-endian IRKs */
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, 16);
	}
	if (rl[i].lirk) {
   18078:	b158      	cbz	r0, 18092 <ll_rl_add+0xa2>
		memcpy(rl[i].local_irk, lirk, 16);
   1807a:	f10b 0007 	add.w	r0, fp, #7
   1807e:	2210      	movs	r2, #16
   18080:	4651      	mov	r1, sl
   18082:	4420      	add	r0, r4
   18084:	f7e8 fb85 	bl	792 <memcpy>
		rl[i].local_rpa = NULL;
   18088:	2328      	movs	r3, #40	; 0x28
   1808a:	fb03 4305 	mla	r3, r3, r5, r4
   1808e:	2200      	movs	r2, #0
   18090:	625a      	str	r2, [r3, #36]	; 0x24
	}
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
	rl[i].rpas_ready = 0;
   18092:	2628      	movs	r6, #40	; 0x28
   18094:	436e      	muls	r6, r5
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   18096:	f10b 0018 	add.w	r0, fp, #24
   1809a:	2206      	movs	r2, #6
   1809c:	2100      	movs	r1, #0
   1809e:	4420      	add	r0, r4
   180a0:	f7e8 fba3 	bl	7ea <memset>
	rl[i].rpas_ready = 0;
   180a4:	5da3      	ldrb	r3, [r4, r6]
	/* Default to Network Privacy */
	rl[i].dev = 0;
   180a6:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   180aa:	f36f 1304 	bfc	r3, #4, #1
   180ae:	55a3      	strb	r3, [r4, r6]
	/* Add reference to  a whitelist entry */
	j = wl_find(id_addr->type, id_addr->a.val, NULL);
   180b0:	2200      	movs	r2, #0
   180b2:	4641      	mov	r1, r8
   180b4:	7838      	ldrb	r0, [r7, #0]
   180b6:	f7ff fa73 	bl	175a0 <wl_find>
	if (j < ARRAY_SIZE(wl)) {
   180ba:	2807      	cmp	r0, #7
   180bc:	5da3      	ldrb	r3, [r4, r6]
		wl[j].rl_idx = i;
   180be:	bf9d      	ittte	ls
   180c0:	4a18      	ldrls	r2, [pc, #96]	; (18124 <ll_rl_add+0x134>)
		rl[i].wl = 1;
   180c2:	f043 0320 	orrls.w	r3, r3, #32
		wl[j].rl_idx = i;
   180c6:	eb02 00c0 	addls.w	r0, r2, r0, lsl #3
	} else {
		rl[i].wl = 0;
   180ca:	f36f 1345 	bfchi	r3, #5, #1
   180ce:	55a3      	strb	r3, [r4, r6]
	}
	rl[i].taken = 1;
   180d0:	f04f 0328 	mov.w	r3, #40	; 0x28
		wl[j].rl_idx = i;
   180d4:	bf98      	it	ls
   180d6:	7045      	strbls	r5, [r0, #1]
	rl[i].taken = 1;
   180d8:	435d      	muls	r5, r3

	return 0;
   180da:	2000      	movs	r0, #0
	rl[i].taken = 1;
   180dc:	5d63      	ldrb	r3, [r4, r5]
   180de:	f043 0301 	orr.w	r3, r3, #1
   180e2:	5563      	strb	r3, [r4, r5]
}
   180e4:	b005      	add	sp, #20
   180e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rl[i].pirk_idx = peer_irk_count;
   180ea:	4b0f      	ldr	r3, [pc, #60]	; (18128 <ll_rl_add+0x138>)
   180ec:	7819      	ldrb	r1, [r3, #0]
   180ee:	75d1      	strb	r1, [r2, #23]
		peer_irk_rl_ids[peer_irk_count] = i;
   180f0:	4a0e      	ldr	r2, [pc, #56]	; (1812c <ll_rl_add+0x13c>)
   180f2:	5455      	strb	r5, [r2, r1]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, 16);
   180f4:	1c4a      	adds	r2, r1, #1
   180f6:	701a      	strb	r2, [r3, #0]
   180f8:	4b0d      	ldr	r3, [pc, #52]	; (18130 <ll_rl_add+0x140>)
   180fa:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   180fe:	f109 0210 	add.w	r2, r9, #16
   18102:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
   18104:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
   18108:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   1810c:	454a      	cmp	r2, r9
   1810e:	d1f9      	bne.n	18104 <ll_rl_add+0x114>
   18110:	e7b2      	b.n	18078 <ll_rl_add+0x88>
		return BT_HCI_ERR_CMD_DISALLOWED;
   18112:	200c      	movs	r0, #12
   18114:	e7e6      	b.n	180e4 <ll_rl_add+0xf4>
		return BT_HCI_ERR_INVALID_PARAM;
   18116:	2012      	movs	r0, #18
   18118:	e7e4      	b.n	180e4 <ll_rl_add+0xf4>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   1811a:	2007      	movs	r0, #7
   1811c:	e7e2      	b.n	180e4 <ll_rl_add+0xf4>
   1811e:	bf00      	nop
   18120:	20001f9c 	.word	0x20001f9c
   18124:	2000210f 	.word	0x2000210f
   18128:	20001f12 	.word	0x20001f12
   1812c:	20001f13 	.word	0x20001f13
   18130:	20001f1b 	.word	0x20001f1b

00018134 <ll_rl_remove>:

u32_t ll_rl_remove(bt_addr_le_t *id_addr)
{
   18134:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18138:	4681      	mov	r9, r0
	u8_t i;

	if (!rl_access_check(false)) {
   1813a:	f7ff fa8f 	bl	1765c <rl_access_check.constprop.1>
   1813e:	2800      	cmp	r0, #0
   18140:	d053      	beq.n	181ea <ll_rl_remove+0xb6>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   18142:	f109 0a01 	add.w	sl, r9, #1
   18146:	2200      	movs	r2, #0
   18148:	4651      	mov	r1, sl
   1814a:	f899 0000 	ldrb.w	r0, [r9]
   1814e:	f7ff fc47 	bl	179e0 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   18152:	2807      	cmp	r0, #7
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   18154:	4680      	mov	r8, r0
	if (i < ARRAY_SIZE(rl)) {
   18156:	d84b      	bhi.n	181f0 <ll_rl_remove+0xbc>
		u8_t j, k;

		if (rl[i].pirk) {
   18158:	f04f 0b28 	mov.w	fp, #40	; 0x28
   1815c:	4c26      	ldr	r4, [pc, #152]	; (181f8 <ll_rl_remove+0xc4>)
   1815e:	fb0b f300 	mul.w	r3, fp, r0
   18162:	18e2      	adds	r2, r4, r3
   18164:	5ce3      	ldrb	r3, [r4, r3]
   18166:	075b      	lsls	r3, r3, #29
   18168:	d524      	bpl.n	181b4 <ll_rl_remove+0x80>
			/* Swap with last item */
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   1816a:	4e24      	ldr	r6, [pc, #144]	; (181fc <ll_rl_remove+0xc8>)
   1816c:	7835      	ldrb	r5, [r6, #0]
   1816e:	3d01      	subs	r5, #1

			if (pj && pi != pj) {
   18170:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   18174:	d01b      	beq.n	181ae <ll_rl_remove+0x7a>
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   18176:	7dd7      	ldrb	r7, [r2, #23]
			if (pj && pi != pj) {
   18178:	42af      	cmp	r7, r5
   1817a:	d018      	beq.n	181ae <ll_rl_remove+0x7a>
				memcpy(peer_irks[pi], peer_irks[pj], 16);
   1817c:	4820      	ldr	r0, [pc, #128]	; (18200 <ll_rl_remove+0xcc>)
   1817e:	2210      	movs	r2, #16
   18180:	eb00 1105 	add.w	r1, r0, r5, lsl #4
   18184:	eb00 1007 	add.w	r0, r0, r7, lsl #4
   18188:	f7e8 fb03 	bl	792 <memcpy>
   1818c:	2300      	movs	r3, #0
				for (k = 0;
				     k < CONFIG_BT_CTLR_RL_SIZE;
				     k++) {

					if (rl[k].taken && rl[k].pirk &&
   1818e:	fb0b f103 	mul.w	r1, fp, r3
   18192:	1862      	adds	r2, r4, r1
   18194:	5c61      	ldrb	r1, [r4, r1]
   18196:	f011 0f01 	tst.w	r1, #1
   1819a:	b2d8      	uxtb	r0, r3
   1819c:	d021      	beq.n	181e2 <ll_rl_remove+0xae>
   1819e:	0749      	lsls	r1, r1, #29
   181a0:	d51f      	bpl.n	181e2 <ll_rl_remove+0xae>
   181a2:	7dd1      	ldrb	r1, [r2, #23]
   181a4:	42a9      	cmp	r1, r5
   181a6:	d11c      	bne.n	181e2 <ll_rl_remove+0xae>
					    rl[k].pirk_idx == pj) {
						rl[k].pirk_idx = pi;
						peer_irk_rl_ids[pi] = k;
   181a8:	4b16      	ldr	r3, [pc, #88]	; (18204 <ll_rl_remove+0xd0>)
						rl[k].pirk_idx = pi;
   181aa:	75d7      	strb	r7, [r2, #23]
						peer_irk_rl_ids[pi] = k;
   181ac:	55d8      	strb	r0, [r3, r7]
						break;
					}
				}
			}
			peer_irk_count--;
   181ae:	7833      	ldrb	r3, [r6, #0]
   181b0:	3b01      	subs	r3, #1
   181b2:	7033      	strb	r3, [r6, #0]
		}

		/* Check if referenced by a whitelist entry */
		j = wl_find(id_addr->type, id_addr->a.val, NULL);
   181b4:	2200      	movs	r2, #0
   181b6:	4651      	mov	r1, sl
   181b8:	f899 0000 	ldrb.w	r0, [r9]
   181bc:	f7ff f9f0 	bl	175a0 <wl_find>
		if (j < ARRAY_SIZE(wl)) {
   181c0:	2807      	cmp	r0, #7
			wl[j].rl_idx = FILTER_IDX_NONE;
   181c2:	bf9f      	itttt	ls
   181c4:	4b10      	ldrls	r3, [pc, #64]	; (18208 <ll_rl_remove+0xd4>)
   181c6:	eb03 00c0 	addls.w	r0, r3, r0, lsl #3
   181ca:	23ff      	movls	r3, #255	; 0xff
   181cc:	7043      	strbls	r3, [r0, #1]
		}
		rl[i].taken = 0;
   181ce:	2028      	movs	r0, #40	; 0x28
   181d0:	fb00 f008 	mul.w	r0, r0, r8
   181d4:	5c23      	ldrb	r3, [r4, r0]
   181d6:	f36f 0300 	bfc	r3, #0, #1
   181da:	5423      	strb	r3, [r4, r0]
		return 0;
   181dc:	2000      	movs	r0, #0
   181de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   181e2:	3301      	adds	r3, #1
				for (k = 0;
   181e4:	2b08      	cmp	r3, #8
   181e6:	d1d2      	bne.n	1818e <ll_rl_remove+0x5a>
   181e8:	e7e1      	b.n	181ae <ll_rl_remove+0x7a>
		return BT_HCI_ERR_CMD_DISALLOWED;
   181ea:	200c      	movs	r0, #12
   181ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   181f0:	2002      	movs	r0, #2
}
   181f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   181f6:	bf00      	nop
   181f8:	20001f9c 	.word	0x20001f9c
   181fc:	20001f12 	.word	0x20001f12
   18200:	20001f1b 	.word	0x20001f1b
   18204:	20001f13 	.word	0x20001f13
   18208:	2000210f 	.word	0x2000210f

0001820c <ll_rl_crpa_set>:

void ll_rl_crpa_set(u8_t id_addr_type, u8_t *id_addr, u8_t rl_idx, u8_t *crpa)
{
   1820c:	b570      	push	{r4, r5, r6, lr}
	if ((crpa[5] & 0xc0) == 0x40) {
   1820e:	795c      	ldrb	r4, [r3, #5]
   18210:	f004 04c0 	and.w	r4, r4, #192	; 0xc0
   18214:	2c40      	cmp	r4, #64	; 0x40
{
   18216:	461d      	mov	r5, r3
	if ((crpa[5] & 0xc0) == 0x40) {
   18218:	d117      	bne.n	1824a <ll_rl_crpa_set+0x3e>

		if (id_addr) {
   1821a:	b119      	cbz	r1, 18224 <ll_rl_crpa_set+0x18>
			/* find the device and return its RPA */
			rl_idx = ll_rl_find(id_addr_type, id_addr, NULL);
   1821c:	2200      	movs	r2, #0
   1821e:	f7ff fbdf 	bl	179e0 <ll_rl_find>
   18222:	4602      	mov	r2, r0
		}

		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   18224:	2a07      	cmp	r2, #7
   18226:	d810      	bhi.n	1824a <ll_rl_crpa_set+0x3e>
   18228:	2128      	movs	r1, #40	; 0x28
   1822a:	4c08      	ldr	r4, [pc, #32]	; (1824c <ll_rl_crpa_set+0x40>)
   1822c:	fb01 f302 	mul.w	r3, r1, r2
   18230:	5ce3      	ldrb	r3, [r4, r3]
   18232:	07db      	lsls	r3, r3, #31
   18234:	d509      	bpl.n	1824a <ll_rl_crpa_set+0x3e>
				memcpy(rl[rl_idx].curr_rpa.val, crpa,
   18236:	2018      	movs	r0, #24
   18238:	fb11 0002 	smlabb	r0, r1, r2, r0
   1823c:	4420      	add	r0, r4
   1823e:	4629      	mov	r1, r5
   18240:	2206      	movs	r2, #6
				       sizeof(bt_addr_t));
		}
	}
}
   18242:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				memcpy(rl[rl_idx].curr_rpa.val, crpa,
   18246:	f7e8 baa4 	b.w	792 <memcpy>
   1824a:	bd70      	pop	{r4, r5, r6, pc}
   1824c:	20001f9c 	.word	0x20001f9c

00018250 <ll_rl_crpa_get>:

u32_t ll_rl_crpa_get(bt_addr_le_t *id_addr, bt_addr_t *crpa)
{
   18250:	b538      	push	{r3, r4, r5, lr}
	u8_t i;

	/* find the device and return its RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   18252:	2200      	movs	r2, #0
{
   18254:	460d      	mov	r5, r1
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   18256:	1c41      	adds	r1, r0, #1
   18258:	7800      	ldrb	r0, [r0, #0]
   1825a:	f7ff fbc1 	bl	179e0 <ll_rl_find>
	if (i < ARRAY_SIZE(rl) &&
   1825e:	2807      	cmp	r0, #7
   18260:	d901      	bls.n	18266 <ll_rl_crpa_get+0x16>
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
			bt_addr_copy(crpa, &rl[i].curr_rpa);
			return 0;
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   18262:	2002      	movs	r0, #2
   18264:	bd38      	pop	{r3, r4, r5, pc}
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   18266:	2428      	movs	r4, #40	; 0x28
   18268:	2318      	movs	r3, #24
   1826a:	fb14 3000 	smlabb	r0, r4, r0, r3
   1826e:	4c07      	ldr	r4, [pc, #28]	; (1828c <ll_rl_crpa_get+0x3c>)
   18270:	4404      	add	r4, r0
   18272:	2106      	movs	r1, #6
   18274:	4620      	mov	r0, r4
   18276:	f7f3 fafe 	bl	b876 <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   1827a:	2800      	cmp	r0, #0
   1827c:	d0f1      	beq.n	18262 <ll_rl_crpa_get+0x12>
   1827e:	2206      	movs	r2, #6
   18280:	4621      	mov	r1, r4
   18282:	4628      	mov	r0, r5
   18284:	f7e8 fa85 	bl	792 <memcpy>
			return 0;
   18288:	2000      	movs	r0, #0
}
   1828a:	bd38      	pop	{r3, r4, r5, pc}
   1828c:	20001f9c 	.word	0x20001f9c

00018290 <ll_rl_lrpa_get>:

u32_t ll_rl_lrpa_get(bt_addr_le_t *id_addr, bt_addr_t *lrpa)
{
   18290:	b510      	push	{r4, lr}
	u8_t i;

	/* find the device and return the local RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   18292:	2200      	movs	r2, #0
{
   18294:	460c      	mov	r4, r1
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   18296:	1c41      	adds	r1, r0, #1
   18298:	7800      	ldrb	r0, [r0, #0]
   1829a:	f7ff fba1 	bl	179e0 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   1829e:	2807      	cmp	r0, #7
   182a0:	d80a      	bhi.n	182b8 <ll_rl_lrpa_get+0x28>
		bt_addr_copy(lrpa, rl[i].local_rpa);
   182a2:	4b06      	ldr	r3, [pc, #24]	; (182bc <ll_rl_lrpa_get+0x2c>)
   182a4:	2228      	movs	r2, #40	; 0x28
   182a6:	fb02 3000 	mla	r0, r2, r0, r3
   182aa:	2206      	movs	r2, #6
   182ac:	6a41      	ldr	r1, [r0, #36]	; 0x24
   182ae:	4620      	mov	r0, r4
   182b0:	f7e8 fa6f 	bl	792 <memcpy>
		return 0;
   182b4:	2000      	movs	r0, #0
   182b6:	bd10      	pop	{r4, pc}
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   182b8:	2002      	movs	r0, #2
}
   182ba:	bd10      	pop	{r4, pc}
   182bc:	20001f9c 	.word	0x20001f9c

000182c0 <ll_rl_enable>:

u32_t ll_rl_enable(u8_t enable)
{
   182c0:	b510      	push	{r4, lr}
   182c2:	4604      	mov	r4, r0
	if (!rl_access_check(false)) {
   182c4:	f7ff f9ca 	bl	1765c <rl_access_check.constprop.1>
   182c8:	b140      	cbz	r0, 182dc <ll_rl_enable+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	switch (enable) {
   182ca:	b11c      	cbz	r4, 182d4 <ll_rl_enable+0x14>
   182cc:	2c01      	cmp	r4, #1
   182ce:	d001      	beq.n	182d4 <ll_rl_enable+0x14>
		break;
	case BT_HCI_ADDR_RES_ENABLE:
		rl_enable = 1;
		break;
	default:
		return BT_HCI_ERR_INVALID_PARAM;
   182d0:	2012      	movs	r0, #18
	}

	return 0;
}
   182d2:	bd10      	pop	{r4, pc}
		rl_enable = 1;
   182d4:	4b02      	ldr	r3, [pc, #8]	; (182e0 <ll_rl_enable+0x20>)
   182d6:	701c      	strb	r4, [r3, #0]
	return 0;
   182d8:	2000      	movs	r0, #0
		break;
   182da:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   182dc:	200c      	movs	r0, #12
   182de:	bd10      	pop	{r4, pc}
   182e0:	200020dc 	.word	0x200020dc

000182e4 <ll_rl_timeout_set>:

void ll_rl_timeout_set(u16_t timeout)
{
	rpa_timeout_ms = timeout * 1000;
   182e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   182e8:	4358      	muls	r0, r3
   182ea:	4b01      	ldr	r3, [pc, #4]	; (182f0 <ll_rl_timeout_set+0xc>)
   182ec:	6018      	str	r0, [r3, #0]
   182ee:	4770      	bx	lr
   182f0:	2000332c 	.word	0x2000332c

000182f4 <ll_priv_mode_set>:
}

u32_t ll_priv_mode_set(bt_addr_le_t *id_addr, u8_t mode)
{
   182f4:	b538      	push	{r3, r4, r5, lr}
   182f6:	4605      	mov	r5, r0
   182f8:	460c      	mov	r4, r1
	u8_t i;

	if (!rl_access_check(false)) {
   182fa:	f7ff f9af 	bl	1765c <rl_access_check.constprop.1>
   182fe:	b1d8      	cbz	r0, 18338 <ll_priv_mode_set+0x44>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   18300:	2200      	movs	r2, #0
   18302:	1c69      	adds	r1, r5, #1
   18304:	7828      	ldrb	r0, [r5, #0]
   18306:	f7ff fb6b 	bl	179e0 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   1830a:	2807      	cmp	r0, #7
   1830c:	d816      	bhi.n	1833c <ll_priv_mode_set+0x48>
		switch (mode) {
   1830e:	b11c      	cbz	r4, 18318 <ll_priv_mode_set+0x24>
   18310:	2c01      	cmp	r4, #1
   18312:	d00a      	beq.n	1832a <ll_priv_mode_set+0x36>
			break;
		case BT_HCI_LE_PRIVACY_MODE_DEVICE:
			rl[i].dev = 1;
			break;
		default:
			return BT_HCI_ERR_INVALID_PARAM;
   18314:	2012      	movs	r0, #18
	} else {
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
	}

	return 0;
}
   18316:	bd38      	pop	{r3, r4, r5, pc}
			rl[i].dev = 0;
   18318:	2328      	movs	r3, #40	; 0x28
   1831a:	4a09      	ldr	r2, [pc, #36]	; (18340 <ll_priv_mode_set+0x4c>)
   1831c:	4358      	muls	r0, r3
   1831e:	5c13      	ldrb	r3, [r2, r0]
   18320:	f364 1304 	bfi	r3, r4, #4, #1
			rl[i].dev = 1;
   18324:	5413      	strb	r3, [r2, r0]
	return 0;
   18326:	2000      	movs	r0, #0
			break;
   18328:	bd38      	pop	{r3, r4, r5, pc}
			rl[i].dev = 1;
   1832a:	2328      	movs	r3, #40	; 0x28
   1832c:	4a04      	ldr	r2, [pc, #16]	; (18340 <ll_priv_mode_set+0x4c>)
   1832e:	4358      	muls	r0, r3
   18330:	5c13      	ldrb	r3, [r2, r0]
   18332:	f043 0310 	orr.w	r3, r3, #16
   18336:	e7f5      	b.n	18324 <ll_priv_mode_set+0x30>
		return BT_HCI_ERR_CMD_DISALLOWED;
   18338:	200c      	movs	r0, #12
   1833a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1833c:	2002      	movs	r0, #2
   1833e:	bd38      	pop	{r3, r4, r5, pc}
   18340:	20001f9c 	.word	0x20001f9c

00018344 <ll_filter_reset>:

#endif /* CONFIG_BT_CTLR_PRIVACY */

void ll_filter_reset(bool init)
{
	wl_anon = 0;
   18344:	4a19      	ldr	r2, [pc, #100]	; (183ac <ll_filter_reset+0x68>)
   18346:	2300      	movs	r3, #0
{
   18348:	b430      	push	{r4, r5}
	wl_anon = 0;
   1834a:	7013      	strb	r3, [r2, #0]
		wl[i].taken = 0;
   1834c:	4a18      	ldr	r2, [pc, #96]	; (183b0 <ll_filter_reset+0x6c>)
   1834e:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   18352:	f36f 0100 	bfc	r1, #0, #1
   18356:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   1835a:	3301      	adds	r3, #1
   1835c:	2b08      	cmp	r3, #8
   1835e:	d1f6      	bne.n	1834e <ll_filter_reset+0xa>

#if defined(CONFIG_BT_CTLR_PRIVACY)
	wl_clear();

	rl_enable = 0;
   18360:	4a14      	ldr	r2, [pc, #80]	; (183b4 <ll_filter_reset+0x70>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   18362:	4915      	ldr	r1, [pc, #84]	; (183b8 <ll_filter_reset+0x74>)
	rl_enable = 0;
   18364:	2300      	movs	r3, #0
   18366:	7013      	strb	r3, [r2, #0]
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   18368:	4a14      	ldr	r2, [pc, #80]	; (183bc <ll_filter_reset+0x78>)
   1836a:	6011      	str	r1, [r2, #0]
	rpa_last_ms = -1;
   1836c:	4a14      	ldr	r2, [pc, #80]	; (183c0 <ll_filter_reset+0x7c>)
		rl[i].taken = 0;
   1836e:	4915      	ldr	r1, [pc, #84]	; (183c4 <ll_filter_reset+0x80>)
	rpa_last_ms = -1;
   18370:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   18374:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   18378:	e9c2 4500 	strd	r4, r5, [r2]
		rl[i].taken = 0;
   1837c:	2528      	movs	r5, #40	; 0x28
   1837e:	fb05 f203 	mul.w	r2, r5, r3
   18382:	3301      	adds	r3, #1
   18384:	5c8c      	ldrb	r4, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   18386:	2b08      	cmp	r3, #8
		rl[i].taken = 0;
   18388:	f36f 0400 	bfc	r4, #0, #1
   1838c:	548c      	strb	r4, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1838e:	d1f6      	bne.n	1837e <ll_filter_reset+0x3a>
	peer_irk_count = 0;
   18390:	4b0d      	ldr	r3, [pc, #52]	; (183c8 <ll_filter_reset+0x84>)
   18392:	2200      	movs	r2, #0
   18394:	701a      	strb	r2, [r3, #0]
	rl_clear();
	if (init) {
   18396:	b120      	cbz	r0, 183a2 <ll_filter_reset+0x5e>
		k_delayed_work_init(&rpa_work, rpa_timeout);
   18398:	490c      	ldr	r1, [pc, #48]	; (183cc <ll_filter_reset+0x88>)
   1839a:	480d      	ldr	r0, [pc, #52]	; (183d0 <ll_filter_reset+0x8c>)
	}
#else
	filter_clear(&wl_filter);
#endif /* CONFIG_BT_CTLR_PRIVACY */

}
   1839c:	bc30      	pop	{r4, r5}
		k_delayed_work_init(&rpa_work, rpa_timeout);
   1839e:	f009 bf31 	b.w	22204 <k_delayed_work_init>
		k_delayed_work_cancel(&rpa_work);
   183a2:	480b      	ldr	r0, [pc, #44]	; (183d0 <ll_filter_reset+0x8c>)
}
   183a4:	bc30      	pop	{r4, r5}
		k_delayed_work_cancel(&rpa_work);
   183a6:	f009 bf4b 	b.w	22240 <k_delayed_work_cancel>
   183aa:	bf00      	nop
   183ac:	20003300 	.word	0x20003300
   183b0:	2000210f 	.word	0x2000210f
   183b4:	200020dc 	.word	0x200020dc
   183b8:	000dbba0 	.word	0x000dbba0
   183bc:	2000332c 	.word	0x2000332c
   183c0:	200032f8 	.word	0x200032f8
   183c4:	20001f9c 	.word	0x20001f9c
   183c8:	20001f12 	.word	0x20001f12
   183cc:	00017f65 	.word	0x00017f65
   183d0:	20003304 	.word	0x20003304

000183d4 <cntr_init>:

static u8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   183d4:	4b05      	ldr	r3, [pc, #20]	; (183ec <cntr_init+0x18>)
   183d6:	2200      	movs	r2, #0
   183d8:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	NRF_RTC->EVTENSET = (RTC_EVTENSET_COMPARE0_Msk |
   183dc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
   183e0:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
			     RTC_EVTENSET_COMPARE1_Msk);
	NRF_RTC->INTENSET = (RTC_INTENSET_COMPARE0_Msk |
   183e4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
   183e8:	4770      	bx	lr
   183ea:	bf00      	nop
   183ec:	4000b000 	.word	0x4000b000

000183f0 <cntr_start>:
#endif
}

u32_t cntr_start(void)
{
	if (_refcount++) {
   183f0:	4a04      	ldr	r2, [pc, #16]	; (18404 <cntr_start+0x14>)
   183f2:	7813      	ldrb	r3, [r2, #0]
   183f4:	1c59      	adds	r1, r3, #1
   183f6:	7011      	strb	r1, [r2, #0]
   183f8:	2001      	movs	r0, #1
   183fa:	b913      	cbnz	r3, 18402 <cntr_start+0x12>
		return 1;
	}

	NRF_RTC->TASKS_START = 1;
   183fc:	4a02      	ldr	r2, [pc, #8]	; (18408 <cntr_start+0x18>)
   183fe:	6010      	str	r0, [r2, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
   18400:	4618      	mov	r0, r3
}
   18402:	4770      	bx	lr
   18404:	20002181 	.word	0x20002181
   18408:	4000b000 	.word	0x4000b000

0001840c <cntr_stop>:

u32_t cntr_stop(void)
{
   1840c:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(_refcount);
   1840e:	4b0f      	ldr	r3, [pc, #60]	; (1844c <cntr_stop+0x40>)
   18410:	7818      	ldrb	r0, [r3, #0]
   18412:	b970      	cbnz	r0, 18432 <cntr_stop+0x26>
   18414:	4b0e      	ldr	r3, [pc, #56]	; (18450 <cntr_stop+0x44>)
   18416:	9301      	str	r3, [sp, #4]
   18418:	9300      	str	r3, [sp, #0]
   1841a:	4a0e      	ldr	r2, [pc, #56]	; (18454 <cntr_stop+0x48>)
   1841c:	4b0e      	ldr	r3, [pc, #56]	; (18458 <cntr_stop+0x4c>)
   1841e:	490f      	ldr	r1, [pc, #60]	; (1845c <cntr_stop+0x50>)
   18420:	480f      	ldr	r0, [pc, #60]	; (18460 <cntr_stop+0x54>)
   18422:	f7e9 ff37 	bl	2294 <printk>
   18426:	4040      	eors	r0, r0
   18428:	f380 8811 	msr	BASEPRI, r0
   1842c:	f04f 0004 	mov.w	r0, #4
   18430:	df02      	svc	2

	if (--_refcount) {
   18432:	3801      	subs	r0, #1
   18434:	b2c0      	uxtb	r0, r0
   18436:	7018      	strb	r0, [r3, #0]
   18438:	2301      	movs	r3, #1
   1843a:	b920      	cbnz	r0, 18446 <cntr_stop+0x3a>
		return 1;
	}

	NRF_RTC->TASKS_STOP = 1;
   1843c:	4a09      	ldr	r2, [pc, #36]	; (18464 <cntr_stop+0x58>)
   1843e:	6053      	str	r3, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
}
   18440:	b003      	add	sp, #12
   18442:	f85d fb04 	ldr.w	pc, [sp], #4
		return 1;
   18446:	4618      	mov	r0, r3
   18448:	e7fa      	b.n	18440 <cntr_stop+0x34>
   1844a:	bf00      	nop
   1844c:	20002181 	.word	0x20002181
   18450:	00023dae 	.word	0x00023dae
   18454:	00022d76 	.word	0x00022d76
   18458:	00027132 	.word	0x00027132
   1845c:	000272d8 	.word	0x000272d8
   18460:	0002713c 	.word	0x0002713c
   18464:	4000b000 	.word	0x4000b000

00018468 <cntr_cnt_get>:

u32_t cntr_cnt_get(void)
{
	return NRF_RTC->COUNTER;
   18468:	4b01      	ldr	r3, [pc, #4]	; (18470 <cntr_cnt_get+0x8>)
   1846a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
}
   1846e:	4770      	bx	lr
   18470:	4000b000 	.word	0x4000b000

00018474 <cntr_cmp_set>:

void cntr_cmp_set(u8_t cmp, u32_t value)
{
	NRF_RTC->CC[cmp] = value;
   18474:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   18478:	4b01      	ldr	r3, [pc, #4]	; (18480 <cntr_cmp_set+0xc>)
   1847a:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
   1847e:	4770      	bx	lr
   18480:	4000b000 	.word	0x4000b000

00018484 <do_ecb>:
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
	do {
		NRF_ECB->TASKS_STOPECB = 1;
   18484:	4b11      	ldr	r3, [pc, #68]	; (184cc <do_ecb+0x48>)
{
   18486:	b570      	push	{r4, r5, r6, lr}
		NRF_ECB->TASKS_STOPECB = 1;
   18488:	2101      	movs	r1, #1
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
   1848a:	2500      	movs	r5, #0
   1848c:	461a      	mov	r2, r3
		NRF_ECB->TASKS_STOPECB = 1;
   1848e:	6059      	str	r1, [r3, #4]
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
   18490:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   18494:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   18498:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
		NRF_ECB->TASKS_STARTECB = 1;
   1849c:	6019      	str	r1, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
		NRF_ECB_regw_sideeffects_TASKS_STARTECB();
#endif
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   1849e:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
   184a2:	b934      	cbnz	r4, 184b2 <do_ecb+0x2e>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   184a4:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   184a8:	b91c      	cbnz	r4, 184b2 <do_ecb+0x2e>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   184aa:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   184ae:	2c00      	cmp	r4, #0
   184b0:	d1f5      	bne.n	1849e <do_ecb+0x1a>
			__WFE();
#else
			/*__WFE();*/
#endif
		}
		NRF_ECB->TASKS_STOPECB = 1;
   184b2:	6051      	str	r1, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
#endif
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   184b4:	f8d2 4104 	ldr.w	r4, [r2, #260]	; 0x104
   184b8:	2c00      	cmp	r4, #0
   184ba:	d1e8      	bne.n	1848e <do_ecb+0xa>
   184bc:	f8d2 6504 	ldr.w	r6, [r2, #1284]	; 0x504
   184c0:	2e00      	cmp	r6, #0
   184c2:	d0e4      	beq.n	1848e <do_ecb+0xa>

	NRF_ECB->ECBDATAPTR = 0;
   184c4:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
   184c8:	bd70      	pop	{r4, r5, r6, pc}
   184ca:	bf00      	nop
   184cc:	4000e000 	.word	0x4000e000

000184d0 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
   184d0:	b570      	push	{r4, r5, r6, lr}
   184d2:	b08c      	sub	sp, #48	; 0x30
   184d4:	460e      	mov	r6, r1
   184d6:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   184d8:	4601      	mov	r1, r0
   184da:	2210      	movs	r2, #16
   184dc:	4668      	mov	r0, sp
{
   184de:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   184e0:	f7f3 f9ba 	bl	b858 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   184e4:	2210      	movs	r2, #16
   184e6:	eb0d 0002 	add.w	r0, sp, r2
   184ea:	4631      	mov	r1, r6
   184ec:	f7f3 f9b4 	bl	b858 <mem_rcopy>

	do_ecb(&ecb);
   184f0:	4668      	mov	r0, sp
   184f2:	f7ff ffc7 	bl	18484 <do_ecb>

	if (cipher_text_le) {
   184f6:	b125      	cbz	r5, 18502 <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   184f8:	2210      	movs	r2, #16
   184fa:	a908      	add	r1, sp, #32
   184fc:	4628      	mov	r0, r5
   184fe:	f7f3 f9ab 	bl	b858 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   18502:	b124      	cbz	r4, 1850e <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   18504:	2210      	movs	r2, #16
   18506:	a908      	add	r1, sp, #32
   18508:	4620      	mov	r0, r4
   1850a:	f7e8 f942 	bl	792 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   1850e:	b00c      	add	sp, #48	; 0x30
   18510:	bd70      	pop	{r4, r5, r6, pc}
	...

00018514 <hal_radio_enable_on_tick_ppi_config_and_enable>:
#define HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX \
	((u32_t)&(NRF_RADIO->TASKS_RXEN))

static inline void hal_radio_enable_on_tick_ppi_config_and_enable(u8_t trx)
{
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_EVT =
   18514:	4b07      	ldr	r3, [pc, #28]	; (18534 <hal_radio_enable_on_tick_ppi_config_and_enable+0x20>)
   18516:	4a08      	ldr	r2, [pc, #32]	; (18538 <hal_radio_enable_on_tick_ppi_config_and_enable+0x24>)
   18518:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
		HAL_RADIO_ENABLE_ON_TICK_PPI_EVT;
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
		(trx) ? HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_TX :
   1851c:	4907      	ldr	r1, [pc, #28]	; (1853c <hal_radio_enable_on_tick_ppi_config_and_enable+0x28>)
   1851e:	4a08      	ldr	r2, [pc, #32]	; (18540 <hal_radio_enable_on_tick_ppi_config_and_enable+0x2c>)
   18520:	2800      	cmp	r0, #0
   18522:	bf14      	ite	ne
   18524:	4610      	movne	r0, r2
   18526:	4608      	moveq	r0, r1
			HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX;
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
   18528:	2201      	movs	r2, #1
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
   1852a:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
   1852e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   18532:	4770      	bx	lr
   18534:	4001f000 	.word	0x4001f000
   18538:	40008140 	.word	0x40008140
   1853c:	40001004 	.word	0x40001004
   18540:	40001000 	.word	0x40001000

00018544 <sw_switch.isra.6>:
}

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
static u8_t sw_tifs_toggle;

static void sw_switch(u8_t dir, u8_t phy_curr, u8_t flags_curr, u8_t phy_next,
   18544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		      u8_t flags_next)
{
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   18548:	4d75      	ldr	r5, [pc, #468]	; (18720 <sw_switch.isra.6+0x1dc>)
	u8_t cc = SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle);
	u32_t delay;

	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_EVT =
   1854a:	4c76      	ldr	r4, [pc, #472]	; (18724 <sw_switch.isra.6+0x1e0>)
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1854c:	782e      	ldrb	r6, [r5, #0]
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_EVT =
   1854e:	4b76      	ldr	r3, [pc, #472]	; (18728 <sw_switch.isra.6+0x1e4>)
   18550:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_EVT;
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_TASK =
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(sw_tifs_toggle);
   18554:	b233      	sxth	r3, r6
   18556:	ea4f 0ec3 	mov.w	lr, r3, lsl #3
static void sw_switch(u8_t dir, u8_t phy_curr, u8_t flags_curr, u8_t phy_next,
   1855a:	4688      	mov	r8, r1
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(sw_tifs_toggle);
   1855c:	f10e 4180 	add.w	r1, lr, #1073741824	; 0x40000000
   18560:	f501 31f8 	add.w	r1, r1, #126976	; 0x1f000
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_TASK =
   18564:	f8c4 1564 	str.w	r1, [r4, #1380]	; 0x564
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   18568:	f106 040b 	add.w	r4, r6, #11
   1856c:	b2e4      	uxtb	r4, r4
   1856e:	00e4      	lsls	r4, r4, #3

	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi) =
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(cc);
   18570:	496e      	ldr	r1, [pc, #440]	; (1872c <sw_switch.isra.6+0x1e8>)
   18572:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   18576:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   1857a:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
   1857e:	4461      	add	r1, ip
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi) =
   18580:	f8c4 1510 	str.w	r1, [r4, #1296]	; 0x510
   18584:	f106 0708 	add.w	r7, r6, #8
   18588:	f10e 0e04 	add.w	lr, lr, #4

	if (dir) {
   1858c:	2800      	cmp	r0, #0
   1858e:	f000 80aa 	beq.w	186e6 <sw_switch.isra.6+0x1a2>
	}
}

static inline u32_t hal_radio_tx_ready_delay_ns_get(u8_t phy, u8_t flags)
{
	switch (phy) {
   18592:	2a02      	cmp	r2, #2
   18594:	f000 8087 	beq.w	186a6 <sw_switch.isra.6+0x162>
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_1M_NS;
   18598:	f649 70c4 	movw	r0, #40900	; 0x9fc4
   1859c:	f64a 095c 	movw	r9, #43100	; 0xa85c
   185a0:	2a04      	cmp	r2, #4
   185a2:	bf18      	it	ne
   185a4:	4681      	movne	r9, r0
	}
}

static inline u32_t hal_radio_rx_chain_delay_ns_get(u8_t phy, u8_t flags)
{
	switch (phy) {
   185a6:	f1b8 0f02 	cmp.w	r8, #2
   185aa:	d07f      	beq.n	186ac <sw_switch.isra.6+0x168>
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_NS;
   185ac:	f242 42b8 	movw	r2, #9400	; 0x24b8
   185b0:	f247 2074 	movw	r0, #29300	; 0x7274
   185b4:	f1b8 0f04 	cmp.w	r8, #4
   185b8:	bf18      	it	ne
   185ba:	4610      	movne	r0, r2
   185bc:	f509 79fa 	add.w	r9, r9, #500	; 0x1f4
	((u32_t)&(NRF_RADIO->TASKS_RXEN))


static inline void hal_radio_txen_on_sw_switch(u8_t ppi)
{
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi) =
   185c0:	4a5b      	ldr	r2, [pc, #364]	; (18730 <sw_switch.isra.6+0x1ec>)
   185c2:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514

		hal_radio_txen_on_sw_switch(ppi);

#if defined(CONFIG_BT_CTLR_PHY_CODED)
#if defined(CONFIG_SOC_NRF52840)
		if (phy_curr & BIT(2)) {
   185c6:	f018 0f04 	tst.w	r8, #4
		delay = HAL_RADIO_NS2US_ROUND(
   185ca:	4448      	add	r0, r9
   185cc:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
   185d0:	fbb0 f0fa 	udiv	r0, r0, sl
		if (phy_curr & BIT(2)) {
   185d4:	d06d      	beq.n	186b2 <sw_switch.isra.6+0x16e>
   185d6:	f242 44b8 	movw	r4, #9400	; 0x24b8
   185da:	f644 4190 	movw	r1, #19600	; 0x4c90
   185de:	f1b8 0f04 	cmp.w	r8, #4
   185e2:	bf18      	it	ne
   185e4:	4621      	movne	r1, r4
   185e6:	009c      	lsls	r4, r3, #2
   185e8:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000

			u8_t ppi_en =
			    HAL_SW_SWITCH_RADIO_ENABLE_S2_PPI;
			u8_t cc_s2 =
			    SW_SWITCH_TIMER_EVTS_COMP_S2_BASE;
			u8_t ppi_dis =
   185ec:	b2fa      	uxtb	r2, r7
   185ee:	f504 4710 	add.w	r7, r4, #36864	; 0x9000
				HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(
				    sw_tifs_toggle);
			u32_t delay_s2;

			/* Calculate assuming reception on S2 coding scheme. */
			delay_s2 = HAL_RADIO_NS2US_ROUND(
   185f2:	4449      	add	r1, r9
				hal_radio_tx_ready_delay_ns_get(
					phy_next, flags_next) +
				hal_radio_rx_chain_delay_ns_get(phy_curr, 0));

			SW_SWITCH_TIMER->CC[cc_s2] =
				SW_SWITCH_TIMER->CC[cc];
   185f4:	f8d7 8540 	ldr.w	r8, [r7, #1344]	; 0x540
			SW_SWITCH_TIMER->CC[cc_s2] =
   185f8:	4f4e      	ldr	r7, [pc, #312]	; (18734 <sw_switch.isra.6+0x1f0>)
			delay_s2 = HAL_RADIO_NS2US_ROUND(
   185fa:	fbb1 f1fa 	udiv	r1, r1, sl
			SW_SWITCH_TIMER->CC[cc_s2] =
   185fe:	f8c7 8548 	str.w	r8, [r7, #1352]	; 0x548

			if (delay_s2 < SW_SWITCH_TIMER->CC[cc_s2]) {
   18602:	f8d7 8548 	ldr.w	r8, [r7, #1352]	; 0x548
   18606:	4541      	cmp	r1, r8
				SW_SWITCH_TIMER->CC[cc_s2] -= delay_s2;
   18608:	bf36      	itet	cc
   1860a:	f8d7 8548 	ldrcc.w	r8, [r7, #1352]	; 0x548
			} else {
				SW_SWITCH_TIMER->CC[cc_s2] = 1;
   1860e:	2101      	movcs	r1, #1
				SW_SWITCH_TIMER->CC[cc_s2] -= delay_s2;
   18610:	eba8 0101 	subcc.w	r1, r8, r1
				SW_SWITCH_TIMER->CC[cc_s2] = 1;
   18614:	f8c7 1548 	str.w	r1, [r7, #1352]	; 0x548
			}

			HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi_en) =
   18618:	4f42      	ldr	r7, [pc, #264]	; (18724 <sw_switch.isra.6+0x1e0>)
   1861a:	f8df 8124 	ldr.w	r8, [pc, #292]	; 18740 <sw_switch.isra.6+0x1fc>
				HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(cc_s2);
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi_en) =
   1861e:	4944      	ldr	r1, [pc, #272]	; (18730 <sw_switch.isra.6+0x1ec>)
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi_en) =
   18620:	f8c7 8590 	str.w	r8, [r7, #1424]	; 0x590
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi_en) =
   18624:	f8c7 1594 	str.w	r1, [r7, #1428]	; 0x594
   18628:	f504 31f8 	add.w	r1, r4, #126976	; 0x1f000
				HAL_SW_SWITCH_RADIO_ENABLE_PPI_TASK_TX;

			/* Include PPI for S2 timing in the active group */
			NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(
				sw_tifs_toggle)] |=
   1862c:	f8d1 4800 	ldr.w	r4, [r1, #2048]	; 0x800
   18630:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
   18634:	f8c1 4800 	str.w	r4, [r1, #2048]	; 0x800
   18638:	00d1      	lsls	r1, r2, #3
   1863a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1863e:	f501 31f8 	add.w	r1, r1, #126976	; 0x1f000
			    ppi_dis)	=
			    HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(cc_s2);

			HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
			    ppi_dis) =
			    HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(
   18642:	f10e 4280 	add.w	r2, lr, #1073741824	; 0x40000000
   18646:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
			    ppi_dis)	=
   1864a:	f8c1 8510 	str.w	r8, [r1, #1296]	; 0x510
			    ppi_dis) =
   1864e:	f8c1 2514 	str.w	r2, [r1, #1300]	; 0x514
			    sw_tifs_toggle);

			/* Capture CC to cancel the timer that has assumed
			 * S8 reception, if packet will be received in S2.
			 */
			HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_REGISTER_EVT =
   18652:	4a39      	ldr	r2, [pc, #228]	; (18738 <sw_switch.isra.6+0x1f4>)
   18654:	f8c7 2598 	str.w	r2, [r7, #1432]	; 0x598
				HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_EVT;
			HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_REGISTER_TASK =
				HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_TASK(
   18658:	f502 42fd 	add.w	r2, r2, #32384	; 0x7e80
   1865c:	3270      	adds	r2, #112	; 0x70
   1865e:	4462      	add	r2, ip
			HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_REGISTER_TASK =
   18660:	f8c7 259c 	str.w	r2, [r7, #1436]	; 0x59c
				    sw_tifs_toggle);

			NRF_PPI->CHENSET =
   18664:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   18668:	f8c7 2504 	str.w	r2, [r7, #1284]	; 0x504
   1866c:	009b      	lsls	r3, r3, #2
   1866e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   18672:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay <
		SW_SWITCH_TIMER->CC[cc]) {
   18676:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
	if (delay <
   1867a:	4282      	cmp	r2, r0
		SW_SWITCH_TIMER->CC[cc] -= delay;
   1867c:	bf8b      	itete	hi
   1867e:	f8d3 2540 	ldrhi.w	r2, [r3, #1344]	; 0x540
	} else {
		SW_SWITCH_TIMER->CC[cc] = 1;
   18682:	2201      	movls	r2, #1
		SW_SWITCH_TIMER->CC[cc] -= delay;
   18684:	1a10      	subhi	r0, r2, r0
		SW_SWITCH_TIMER->CC[cc] = 1;
   18686:	f8c3 2540 	strls.w	r2, [r3, #1344]	; 0x540
		SW_SWITCH_TIMER->CC[cc] -= delay;
   1868a:	bf88      	it	hi
   1868c:	f8c3 0540 	strhi.w	r0, [r3, #1344]	; 0x540
	}

	NRF_PPI->CHENSET =
   18690:	4b24      	ldr	r3, [pc, #144]	; (18724 <sw_switch.isra.6+0x1e0>)
   18692:	f44f 6290 	mov.w	r2, #1152	; 0x480
   18696:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	 * always need to capture the PDU END time-stamp.
	 */
	radio_tmr_end_capture();
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	sw_tifs_toggle += 1;
   1869a:	1c73      	adds	r3, r6, #1
	sw_tifs_toggle &= 1;
   1869c:	f003 0301 	and.w	r3, r3, #1
   186a0:	702b      	strb	r3, [r5, #0]
   186a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_2M_NS;
   186a6:	f649 4940 	movw	r9, #40000	; 0x9c40
   186aa:	e77c      	b.n	185a6 <sw_switch.isra.6+0x62>
	case BIT(1):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_2M_NS;
   186ac:	f241 3088 	movw	r0, #5000	; 0x1388
   186b0:	e784      	b.n	185bc <sw_switch.isra.6+0x78>
   186b2:	009a      	lsls	r2, r3, #2
   186b4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   186b8:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
				sw_tifs_toggle)] &=
   186bc:	f8d2 4800 	ldr.w	r4, [r2, #2048]	; 0x800
   186c0:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
   186c4:	f8c2 4800 	str.w	r4, [r2, #2048]	; 0x800
   186c8:	b2fa      	uxtb	r2, r7
   186ca:	00d2      	lsls	r2, r2, #3
   186cc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   186d0:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
			    ppi_dis) =
   186d4:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
			    HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(
   186d8:	f10e 4180 	add.w	r1, lr, #1073741824	; 0x40000000
   186dc:	f501 31f8 	add.w	r1, r1, #126976	; 0x1f000
			    ppi_dis) =
   186e0:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
   186e4:	e7c2      	b.n	1866c <sw_switch.isra.6+0x128>
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_TASK_TX;
}

static inline void hal_radio_rxen_on_sw_switch(u8_t ppi)
{
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi) =
   186e6:	4a15      	ldr	r2, [pc, #84]	; (1873c <sw_switch.isra.6+0x1f8>)
   186e8:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
   186ec:	b2fa      	uxtb	r2, r7
   186ee:	00d2      	lsls	r2, r2, #3
   186f0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   186f4:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
		delay = HAL_RADIO_NS2US_CEIL(
   186f8:	202c      	movs	r0, #44	; 0x2c
				ppi_dis) =
   186fa:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
				HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(
   186fe:	f10e 4180 	add.w	r1, lr, #1073741824	; 0x40000000
   18702:	f501 31f8 	add.w	r1, r1, #126976	; 0x1f000
				ppi_dis) =
   18706:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
   1870a:	f10c 4280 	add.w	r2, ip, #1073741824	; 0x40000000
   1870e:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
				sw_tifs_toggle)] &=
   18712:	f8d2 1800 	ldr.w	r1, [r2, #2048]	; 0x800
   18716:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
   1871a:	f8c2 1800 	str.w	r1, [r2, #2048]	; 0x800
   1871e:	e7a5      	b.n	1866c <sw_switch.isra.6+0x128>
   18720:	200023a4 	.word	0x200023a4
   18724:	4001f000 	.word	0x4001f000
   18728:	4000110c 	.word	0x4000110c
   1872c:	40009140 	.word	0x40009140
   18730:	40001000 	.word	0x40001000
   18734:	40009000 	.word	0x40009000
   18738:	40001150 	.word	0x40001150
   1873c:	40001004 	.word	0x40001004
   18740:	40009148 	.word	0x40009148

00018744 <isr_radio>:
	if (sfp_radio_isr) {
   18744:	4b02      	ldr	r3, [pc, #8]	; (18750 <isr_radio+0xc>)
   18746:	681b      	ldr	r3, [r3, #0]
   18748:	b103      	cbz	r3, 1874c <isr_radio+0x8>
		sfp_radio_isr();
   1874a:	4718      	bx	r3
   1874c:	4770      	bx	lr
   1874e:	bf00      	nop
   18750:	200023a0 	.word	0x200023a0

00018754 <radio_isr_set>:
	sfp_radio_isr = fp_radio_isr;	/* atomic assignment of 32-bit word */
   18754:	4b06      	ldr	r3, [pc, #24]	; (18770 <radio_isr_set+0x1c>)
   18756:	6018      	str	r0, [r3, #0]
	NRF_RADIO->INTENSET = (0 |
   18758:	4b06      	ldr	r3, [pc, #24]	; (18774 <radio_isr_set+0x20>)
   1875a:	2210      	movs	r2, #16
   1875c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
   18760:	4b05      	ldr	r3, [pc, #20]	; (18778 <radio_isr_set+0x24>)
   18762:	2202      	movs	r2, #2
   18764:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
   18768:	2001      	movs	r0, #1
   1876a:	f7e9 ba2f 	b.w	1bcc <_arch_irq_enable>
   1876e:	bf00      	nop
   18770:	200023a0 	.word	0x200023a0
   18774:	40001000 	.word	0x40001000
   18778:	e000e100 	.word	0xe000e100

0001877c <radio_setup>:
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   1877c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   18780:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   18784:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   18786:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   1878a:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   1878e:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   18792:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   18796:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   1879a:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   1879e:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   187a2:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   187a6:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   187aa:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   187ae:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   187b2:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   187b6:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   187ba:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
   187be:	4770      	bx	lr

000187c0 <radio_reset>:
{
   187c0:	b508      	push	{r3, lr}
	irq_disable(RADIO_IRQn);
   187c2:	2001      	movs	r0, #1
   187c4:	f7e9 fa12 	bl	1bec <_arch_irq_disable>
	NRF_RADIO->POWER =
   187c8:	4b08      	ldr	r3, [pc, #32]	; (187ec <radio_reset+0x2c>)
   187ca:	2200      	movs	r2, #0
   187cc:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	NRF_RADIO->POWER =
   187d0:	2201      	movs	r2, #1
   187d2:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
   187d6:	4a06      	ldr	r2, [pc, #24]	; (187f0 <radio_reset+0x30>)
   187d8:	6813      	ldr	r3, [r2, #0]
					 0xfffffffe) | 0x01000000;
   187da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   187de:	f023 0301 	bic.w	r3, r3, #1
   187e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
   187e6:	6013      	str	r3, [r2, #0]
   187e8:	bd08      	pop	{r3, pc}
   187ea:	bf00      	nop
   187ec:	40001000 	.word	0x40001000
   187f0:	40001774 	.word	0x40001774

000187f4 <radio_phy_set>:
	switch (phy) {
   187f4:	2802      	cmp	r0, #2
   187f6:	4b14      	ldr	r3, [pc, #80]	; (18848 <radio_phy_set+0x54>)
   187f8:	d010      	beq.n	1881c <radio_phy_set+0x28>
   187fa:	2804      	cmp	r0, #4
   187fc:	d014      	beq.n	18828 <radio_phy_set+0x34>
		*(volatile u32_t *)0x4000173c &= ~0x80000000;
   187fe:	681a      	ldr	r2, [r3, #0]
   18800:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
   18804:	601a      	str	r2, [r3, #0]
		mode = RADIO_MODE_MODE_Ble_1Mbit;
   18806:	2103      	movs	r1, #3
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   18808:	4b10      	ldr	r3, [pc, #64]	; (1884c <radio_phy_set+0x58>)
   1880a:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   1880e:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   18812:	f042 0201 	orr.w	r2, r2, #1
   18816:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
   1881a:	4770      	bx	lr
		*(volatile u32_t *)0x4000173c &= ~0x80000000;
   1881c:	681a      	ldr	r2, [r3, #0]
   1881e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
   18822:	601a      	str	r2, [r3, #0]
		mode = RADIO_MODE_MODE_Ble_2Mbit;
   18824:	2104      	movs	r1, #4
   18826:	e7ef      	b.n	18808 <radio_phy_set+0x14>
		*(volatile u32_t *)0x4000173c |= 0x80000000;
   18828:	681a      	ldr	r2, [r3, #0]
   1882a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
   1882e:	601a      	str	r2, [r3, #0]
				((*(volatile u32_t *)0x4000173c) & 0xFFFFFF00) |
   18830:	681a      	ldr	r2, [r3, #0]
   18832:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
		if (flags & 0x01) {
   18836:	f011 0f01 	tst.w	r1, #1
				((*(volatile u32_t *)0x4000173c) & 0xFFFFFF00) |
   1883a:	f042 025c 	orr.w	r2, r2, #92	; 0x5c
			mode = RADIO_MODE_MODE_Ble_LR500Kbit;
   1883e:	bf14      	ite	ne
   18840:	2105      	movne	r1, #5
   18842:	2106      	moveq	r1, #6
		*(volatile u32_t *)0x4000173c =
   18844:	601a      	str	r2, [r3, #0]
   18846:	e7df      	b.n	18808 <radio_phy_set+0x14>
   18848:	4000173c 	.word	0x4000173c
   1884c:	40001000 	.word	0x40001000

00018850 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = power;
   18850:	4b01      	ldr	r3, [pc, #4]	; (18858 <radio_tx_power_set+0x8>)
   18852:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
   18856:	4770      	bx	lr
   18858:	40001000 	.word	0x40001000

0001885c <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   1885c:	4b01      	ldr	r3, [pc, #4]	; (18864 <radio_freq_chan_set+0x8>)
   1885e:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
   18862:	4770      	bx	lr
   18864:	40001000 	.word	0x40001000

00018868 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   18868:	4b07      	ldr	r3, [pc, #28]	; (18888 <radio_whiten_iv_set+0x20>)
   1886a:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   1886e:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   18872:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   18876:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   1887a:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1887e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   18882:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
   18886:	4770      	bx	lr
   18888:	40001000 	.word	0x40001000

0001888c <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   1888c:	4a0a      	ldr	r2, [pc, #40]	; (188b8 <radio_aa_set+0x2c>)
   1888e:	2300      	movs	r3, #0
   18890:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   18894:	2301      	movs	r3, #1
   18896:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   1889a:	78c3      	ldrb	r3, [r0, #3]
   1889c:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   188a0:	7843      	ldrb	r3, [r0, #1]
   188a2:	7881      	ldrb	r1, [r0, #2]
   188a4:	041b      	lsls	r3, r3, #16
   188a6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   188aa:	7801      	ldrb	r1, [r0, #0]
   188ac:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   188b0:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
   188b4:	4770      	bx	lr
   188b6:	bf00      	nop
   188b8:	40001000 	.word	0x40001000

000188bc <radio_pkt_configure>:
	u8_t dc = flags & 0x01; /* Adv or Data channel */
   188bc:	f002 0301 	and.w	r3, r2, #1
	switch (phy) {
   188c0:	f3c2 0242 	ubfx	r2, r2, #1, #3
   188c4:	2a02      	cmp	r2, #2
   188c6:	d023      	beq.n	18910 <radio_pkt_configure+0x54>
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
   188c8:	2a04      	cmp	r2, #4
   188ca:	bf0c      	ite	eq
   188cc:	f04f 42c7 	moveq.w	r2, #1669332992	; 0x63800000
   188d0:	2200      	movne	r2, #0
	if (dc) {
   188d2:	b10b      	cbz	r3, 188d8 <radio_pkt_configure+0x1c>
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   188d4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   188d8:	f1c0 0308 	rsb	r3, r0, #8
   188dc:	041b      	lsls	r3, r3, #16
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
   188de:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
   188e2:	f440 7080 	orr.w	r0, r0, #256	; 0x100
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   188e6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
			    RADIO_PCNF0_S1LEN_Msk) |
   188ea:	4303      	orrs	r3, r0
   188ec:	4313      	orrs	r3, r2
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   188ee:	4a0a      	ldr	r2, [pc, #40]	; (18918 <radio_pkt_configure+0x5c>)
   188f0:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   188f4:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
   188f8:	4b08      	ldr	r3, [pc, #32]	; (1891c <radio_pkt_configure+0x60>)
   188fa:	4003      	ands	r3, r0
   188fc:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((u32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
   18900:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   18904:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
   18908:	4319      	orrs	r1, r3
   1890a:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
   1890e:	4770      	bx	lr
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   18910:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   18914:	e7dd      	b.n	188d2 <radio_pkt_configure+0x16>
   18916:	bf00      	nop
   18918:	40001000 	.word	0x40001000
   1891c:	fef80000 	.word	0xfef80000

00018920 <radio_pkt_rx_set>:
   18920:	4b01      	ldr	r3, [pc, #4]	; (18928 <radio_pkt_rx_set+0x8>)
   18922:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   18926:	4770      	bx	lr
   18928:	40001000 	.word	0x40001000

0001892c <radio_pkt_tx_set>:
	NRF_RADIO->PACKETPTR = (u32_t)tx_packet;
   1892c:	4b01      	ldr	r3, [pc, #4]	; (18934 <radio_pkt_tx_set+0x8>)
   1892e:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   18932:	4770      	bx	lr
   18934:	40001000 	.word	0x40001000

00018938 <radio_tx_ready_delay_get>:
	switch (phy) {
   18938:	2802      	cmp	r0, #2
   1893a:	d004      	beq.n	18946 <radio_tx_ready_delay_get+0xe>
   1893c:	2804      	cmp	r0, #4
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_1M_US;
   1893e:	bf0c      	ite	eq
   18940:	202b      	moveq	r0, #43	; 0x2b
   18942:	2029      	movne	r0, #41	; 0x29
   18944:	4770      	bx	lr
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_2M_US;
   18946:	2028      	movs	r0, #40	; 0x28
}
   18948:	4770      	bx	lr

0001894a <radio_tx_chain_delay_get>:
}
   1894a:	2001      	movs	r0, #1
   1894c:	4770      	bx	lr

0001894e <radio_rx_ready_delay_get>:
}
   1894e:	2029      	movs	r0, #41	; 0x29
   18950:	4770      	bx	lr

00018952 <radio_rx_chain_delay_get>:
	switch (phy) {
   18952:	2802      	cmp	r0, #2
   18954:	d003      	beq.n	1895e <radio_rx_chain_delay_get+0xc>
   18956:	2804      	cmp	r0, #4
   18958:	d003      	beq.n	18962 <radio_rx_chain_delay_get+0x10>
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_US;
   1895a:	200a      	movs	r0, #10
}
   1895c:	4770      	bx	lr
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_2M_US;
   1895e:	2005      	movs	r0, #5
   18960:	4770      	bx	lr
		if (flags & 0x01) {
   18962:	f011 0f01 	tst.w	r1, #1
			return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_S2_US;
   18966:	bf14      	ite	ne
   18968:	201e      	movne	r0, #30
   1896a:	2014      	moveq	r0, #20
   1896c:	4770      	bx	lr
	...

00018970 <radio_rx_enable>:
	NRF_RADIO->TASKS_RXEN = 1;
   18970:	4b01      	ldr	r3, [pc, #4]	; (18978 <radio_rx_enable+0x8>)
   18972:	2201      	movs	r2, #1
   18974:	605a      	str	r2, [r3, #4]
   18976:	4770      	bx	lr
   18978:	40001000 	.word	0x40001000

0001897c <radio_tx_enable>:
	NRF_RADIO->TASKS_TXEN = 1;
   1897c:	4b01      	ldr	r3, [pc, #4]	; (18984 <radio_tx_enable+0x8>)
   1897e:	2201      	movs	r2, #1
   18980:	601a      	str	r2, [r3, #0]
   18982:	4770      	bx	lr
   18984:	40001000 	.word	0x40001000

00018988 <radio_disable>:
	NRF_PPI->CHENCLR = HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
   18988:	4a07      	ldr	r2, [pc, #28]	; (189a8 <radio_disable+0x20>)
   1898a:	f44f 6390 	mov.w	r3, #1152	; 0x480
   1898e:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	NRF_PPI->TASKS_CHG[SW_SWITCH_TIMER_TASK_GROUP(0)].DIS = 1;
   18992:	2301      	movs	r3, #1
   18994:	6053      	str	r3, [r2, #4]
	NRF_PPI->TASKS_CHG[SW_SWITCH_TIMER_TASK_GROUP(1)].DIS = 1;
   18996:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
   18998:	f5a2 32f0 	sub.w	r2, r2, #122880	; 0x1e000
   1899c:	2100      	movs	r1, #0
   1899e:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
	NRF_RADIO->TASKS_DISABLE = 1;
   189a2:	6113      	str	r3, [r2, #16]
   189a4:	4770      	bx	lr
   189a6:	bf00      	nop
   189a8:	4001f000 	.word	0x4001f000

000189ac <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   189ac:	4b04      	ldr	r3, [pc, #16]	; (189c0 <radio_status_reset+0x14>)
   189ae:	2200      	movs	r2, #0
   189b0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   189b4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   189b8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   189bc:	4770      	bx	lr
   189be:	bf00      	nop
   189c0:	40001000 	.word	0x40001000

000189c4 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   189c4:	4b03      	ldr	r3, [pc, #12]	; (189d4 <radio_is_ready+0x10>)
   189c6:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   189ca:	3000      	adds	r0, #0
   189cc:	bf18      	it	ne
   189ce:	2001      	movne	r0, #1
   189d0:	4770      	bx	lr
   189d2:	bf00      	nop
   189d4:	40001000 	.word	0x40001000

000189d8 <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
   189d8:	4b03      	ldr	r3, [pc, #12]	; (189e8 <radio_is_done+0x10>)
   189da:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   189de:	3000      	adds	r0, #0
   189e0:	bf18      	it	ne
   189e2:	2001      	movne	r0, #1
   189e4:	4770      	bx	lr
   189e6:	bf00      	nop
   189e8:	40001000 	.word	0x40001000

000189ec <radio_is_idle>:
	return (NRF_RADIO->STATE == 0);
   189ec:	4b03      	ldr	r3, [pc, #12]	; (189fc <radio_is_idle+0x10>)
   189ee:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   189f2:	fab0 f080 	clz	r0, r0
   189f6:	0940      	lsrs	r0, r0, #5
   189f8:	4770      	bx	lr
   189fa:	bf00      	nop
   189fc:	40001000 	.word	0x40001000

00018a00 <radio_crc_configure>:
	NRF_RADIO->CRCCNF =
   18a00:	4b04      	ldr	r3, [pc, #16]	; (18a14 <radio_crc_configure+0x14>)
   18a02:	f240 1203 	movw	r2, #259	; 0x103
   18a06:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_RADIO->CRCPOLY = polynomial;
   18a0a:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   18a0e:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
   18a12:	4770      	bx	lr
   18a14:	40001000 	.word	0x40001000

00018a18 <radio_crc_is_valid>:
	return (NRF_RADIO->CRCSTATUS != 0);
   18a18:	4b03      	ldr	r3, [pc, #12]	; (18a28 <radio_crc_is_valid+0x10>)
   18a1a:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   18a1e:	3000      	adds	r0, #0
   18a20:	bf18      	it	ne
   18a22:	2001      	movne	r0, #1
   18a24:	4770      	bx	lr
   18a26:	bf00      	nop
   18a28:	40001000 	.word	0x40001000

00018a2c <radio_pkt_empty_get>:
}
   18a2c:	4800      	ldr	r0, [pc, #0]	; (18a30 <radio_pkt_empty_get+0x4>)
   18a2e:	4770      	bx	lr
   18a30:	20002294 	.word	0x20002294

00018a34 <radio_pkt_scratch_get>:
}
   18a34:	4800      	ldr	r0, [pc, #0]	; (18a38 <radio_pkt_scratch_get+0x4>)
   18a36:	4770      	bx	lr
   18a38:	20002298 	.word	0x20002298

00018a3c <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   18a3c:	4b04      	ldr	r3, [pc, #16]	; (18a50 <radio_switch_complete_and_rx+0x14>)
   18a3e:	2203      	movs	r2, #3
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
   18a40:	2100      	movs	r1, #0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   18a42:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	sw_switch(0, 0, 0, phy_rx, 0);
   18a46:	4602      	mov	r2, r0
   18a48:	4608      	mov	r0, r1
   18a4a:	f7ff bd7b 	b.w	18544 <sw_switch.isra.6>
   18a4e:	bf00      	nop
   18a50:	40001000 	.word	0x40001000

00018a54 <radio_switch_complete_and_tx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   18a54:	4b03      	ldr	r3, [pc, #12]	; (18a64 <radio_switch_complete_and_tx+0x10>)
   18a56:	2103      	movs	r1, #3
   18a58:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
   18a5c:	4601      	mov	r1, r0
   18a5e:	2001      	movs	r0, #1
   18a60:	f7ff bd70 	b.w	18544 <sw_switch.isra.6>
   18a64:	40001000 	.word	0x40001000

00018a68 <radio_switch_complete_and_disable>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
   18a68:	4b05      	ldr	r3, [pc, #20]	; (18a80 <radio_switch_complete_and_disable+0x18>)
   18a6a:	2203      	movs	r2, #3
   18a6c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_PPI->CHENCLR = HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
   18a70:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
   18a74:	f44f 6290 	mov.w	r2, #1152	; 0x480
   18a78:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   18a7c:	4770      	bx	lr
   18a7e:	bf00      	nop
   18a80:	40001000 	.word	0x40001000

00018a84 <radio_rssi_measure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
   18a84:	4a03      	ldr	r2, [pc, #12]	; (18a94 <radio_rssi_measure+0x10>)
   18a86:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   18a8a:	f443 7388 	orr.w	r3, r3, #272	; 0x110
   18a8e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
   18a92:	4770      	bx	lr
   18a94:	40001000 	.word	0x40001000

00018a98 <radio_rssi_get>:
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}

u32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
   18a98:	4b01      	ldr	r3, [pc, #4]	; (18aa0 <radio_rssi_get+0x8>)
   18a9a:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
   18a9e:	4770      	bx	lr
   18aa0:	40001000 	.word	0x40001000

00018aa4 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   18aa4:	4b02      	ldr	r3, [pc, #8]	; (18ab0 <radio_rssi_status_reset+0xc>)
   18aa6:	2200      	movs	r2, #0
   18aa8:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
   18aac:	4770      	bx	lr
   18aae:	bf00      	nop
   18ab0:	40001000 	.word	0x40001000

00018ab4 <radio_rssi_is_ready>:
}

u32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   18ab4:	4b03      	ldr	r3, [pc, #12]	; (18ac4 <radio_rssi_is_ready+0x10>)
   18ab6:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   18aba:	3000      	adds	r0, #0
   18abc:	bf18      	it	ne
   18abe:	2001      	movne	r0, #1
   18ac0:	4770      	bx	lr
   18ac2:	bf00      	nop
   18ac4:	40001000 	.word	0x40001000

00018ac8 <radio_filter_configure>:

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
   18ac8:	b530      	push	{r4, r5, lr}
   18aca:	2400      	movs	r4, #0
   18acc:	00a3      	lsls	r3, r4, #2
   18ace:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   18ad2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
	u8_t index;

	for (index = 0; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
   18ad6:	6815      	ldr	r5, [r2, #0]
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
   18ad8:	f8c3 5600 	str.w	r5, [r3, #1536]	; 0x600
   18adc:	3401      	adds	r4, #1
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
   18ade:	8895      	ldrh	r5, [r2, #4]
   18ae0:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	for (index = 0; index < 8; index++) {
   18ae4:	2c08      	cmp	r4, #8
		bdaddr += 6;
   18ae6:	f102 0206 	add.w	r2, r2, #6
	for (index = 0; index < 8; index++) {
   18aea:	d1ef      	bne.n	18acc <radio_filter_configure+0x4>
	}

	NRF_RADIO->DACNF = ((u32_t)bitmask_addr_type << 8) | bitmask_enable;
   18aec:	4b02      	ldr	r3, [pc, #8]	; (18af8 <radio_filter_configure+0x30>)
   18aee:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
   18af2:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
   18af6:	bd30      	pop	{r4, r5, pc}
   18af8:	40001000 	.word	0x40001000

00018afc <radio_filter_disable>:
}

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   18afc:	4a03      	ldr	r2, [pc, #12]	; (18b0c <radio_filter_disable+0x10>)
   18afe:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   18b02:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   18b06:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
   18b0a:	4770      	bx	lr
   18b0c:	40001000 	.word	0x40001000

00018b10 <radio_filter_status_reset>:
}

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   18b10:	4b02      	ldr	r3, [pc, #8]	; (18b1c <radio_filter_status_reset+0xc>)
   18b12:	2200      	movs	r2, #0
   18b14:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   18b18:	4770      	bx	lr
   18b1a:	bf00      	nop
   18b1c:	40001000 	.word	0x40001000

00018b20 <radio_filter_has_match>:
}

u32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   18b20:	4b03      	ldr	r3, [pc, #12]	; (18b30 <radio_filter_has_match+0x10>)
   18b22:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   18b26:	3000      	adds	r0, #0
   18b28:	bf18      	it	ne
   18b2a:	2001      	movne	r0, #1
   18b2c:	4770      	bx	lr
   18b2e:	bf00      	nop
   18b30:	40001000 	.word	0x40001000

00018b34 <radio_filter_match_get>:

u32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   18b34:	4b01      	ldr	r3, [pc, #4]	; (18b3c <radio_filter_match_get+0x8>)
   18b36:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   18b3a:	4770      	bx	lr
   18b3c:	40001000 	.word	0x40001000

00018b40 <radio_bc_configure>:

void radio_bc_configure(u32_t n)
{
	NRF_RADIO->BCC = n;
   18b40:	4b04      	ldr	r3, [pc, #16]	; (18b54 <radio_bc_configure+0x14>)
   18b42:	f8c3 0560 	str.w	r0, [r3, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   18b46:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   18b4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   18b4e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
   18b52:	4770      	bx	lr
   18b54:	40001000 	.word	0x40001000

00018b58 <radio_tmr_status_reset>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
}

void radio_tmr_status_reset(void)
{
	NRF_RTC0->EVTENCLR = RTC_EVTENCLR_COMPARE2_Msk;
   18b58:	4b05      	ldr	r3, [pc, #20]	; (18b70 <radio_tmr_status_reset+0x18>)
   18b5a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   18b5e:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	NRF_PPI->CHENCLR =
   18b62:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
   18b66:	4a03      	ldr	r2, [pc, #12]	; (18b74 <radio_tmr_status_reset+0x1c>)
   18b68:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   18b6c:	4770      	bx	lr
   18b6e:	bf00      	nop
   18b70:	4000b000 	.word	0x4000b000
   18b74:	0004207f 	.word	0x0004207f

00018b78 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(u32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	SW_SWITCH_TIMER->CC[SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle)] = tifs;
   18b78:	4b03      	ldr	r3, [pc, #12]	; (18b88 <radio_tmr_tifs_set+0x10>)
   18b7a:	4a04      	ldr	r2, [pc, #16]	; (18b8c <radio_tmr_tifs_set+0x14>)
   18b7c:	781b      	ldrb	r3, [r3, #0]
   18b7e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   18b82:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
   18b86:	4770      	bx	lr
   18b88:	200023a4 	.word	0x200023a4
   18b8c:	40009000 	.word	0x40009000

00018b90 <radio_tmr_start>:
#endif
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
   18b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   18b94:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   18b98:	4c27      	ldr	r4, [pc, #156]	; (18c38 <radio_tmr_start+0xa8>)

#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(EVENT_TIMER_NBR);
#endif

	NRF_RTC0->CC[2] = ticks_start;
   18b9a:	4d28      	ldr	r5, [pc, #160]	; (18c3c <radio_tmr_start+0xac>)
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   18b9c:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   18ba0:	42a3      	cmp	r3, r4
		remainder += 30517578UL;
   18ba2:	bf88      	it	hi
   18ba4:	f102 72e8 	addhi.w	r2, r2, #30408704	; 0x1d00000
	EVENT_TIMER->TASKS_CLEAR = 1;
   18ba8:	4b25      	ldr	r3, [pc, #148]	; (18c40 <radio_tmr_start+0xb0>)
	remainder /= 1000000UL;
   18baa:	4c26      	ldr	r4, [pc, #152]	; (18c44 <radio_tmr_start+0xb4>)
		remainder += 30517578UL;
   18bac:	bf82      	ittt	hi
   18bae:	f502 32d4 	addhi.w	r2, r2, #108544	; 0x1a800
		ticks_start--;
   18bb2:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
		remainder += 30517578UL;
   18bb6:	f502 72a5 	addhi.w	r2, r2, #330	; 0x14a
	EVENT_TIMER->TASKS_CLEAR = 1;
   18bba:	2601      	movs	r6, #1
	remainder /= 1000000UL;
   18bbc:	fbb2 f4f4 	udiv	r4, r2, r4
	EVENT_TIMER->MODE = 0;
   18bc0:	2700      	movs	r7, #0
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   18bc2:	2202      	movs	r2, #2
	EVENT_TIMER->PRESCALER = 4;
   18bc4:	f04f 0804 	mov.w	r8, #4
	EVENT_TIMER->TASKS_CLEAR = 1;
   18bc8:	60de      	str	r6, [r3, #12]
	EVENT_TIMER->MODE = 0;
   18bca:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	EVENT_TIMER->PRESCALER = 4;
   18bce:	f8c3 8510 	str.w	r8, [r3, #1296]	; 0x510
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   18bd2:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	EVENT_TIMER->CC[0] = remainder;
   18bd6:	f8c3 4540 	str.w	r4, [r3, #1344]	; 0x540
	NRF_RTC0->CC[2] = ticks_start;
   18bda:	f8c5 1548 	str.w	r1, [r5, #1352]	; 0x548
	NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE2_Msk;
   18bde:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   18be2:	f8c5 1344 	str.w	r1, [r5, #836]	; 0x344

	HAL_EVENT_TIMER_START_PPI_REGISTER_EVT = HAL_EVENT_TIMER_START_EVT;
   18be6:	f505 35a0 	add.w	r5, r5, #81920	; 0x14000
   18bea:	4917      	ldr	r1, [pc, #92]	; (18c48 <radio_tmr_start+0xb8>)
   18bec:	f8c5 1518 	str.w	r1, [r5, #1304]	; 0x518
	HAL_EVENT_TIMER_START_PPI_REGISTER_TASK = HAL_EVENT_TIMER_START_TASK;
   18bf0:	f8c5 351c 	str.w	r3, [r5, #1308]	; 0x51c
	NRF_PPI->CHENSET = HAL_EVENT_TIMER_START_PPI_ENABLE;
   18bf4:	f8c5 2504 	str.w	r2, [r5, #1284]	; 0x504
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects_CHEN();
#endif

	hal_radio_enable_on_tick_ppi_config_and_enable(trx);
   18bf8:	f7ff fc8c 	bl	18514 <hal_radio_enable_on_tick_ppi_config_and_enable>
#if !defined(CONFIG_BT_CTLR_TIFS_HW)
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	SW_SWITCH_TIMER->TASKS_CLEAR = 1;
   18bfc:	4b13      	ldr	r3, [pc, #76]	; (18c4c <radio_tmr_start+0xbc>)
   18bfe:	60de      	str	r6, [r3, #12]
	SW_SWITCH_TIMER->MODE = 0;
   18c00:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   18c04:	f8c3 8510 	str.w	r8, [r3, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   18c08:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
	SW_SWITCH_TIMER->TASKS_START = 1;
   18c0c:	601e      	str	r6, [r3, #0]
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(SW_SWITCH_TIMER_NBR);
	NRF_TIMER_regw_sideeffects_TASKS_START(SW_SWITCH_TIMER_NBR);
#endif
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	HAL_SW_SWITCH_TIMER_CLEAR_PPI_REGISTER_EVT =
   18c0e:	f5a3 43fd 	sub.w	r3, r3, #32384	; 0x7e80
   18c12:	3b74      	subs	r3, #116	; 0x74
   18c14:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
		HAL_SW_SWITCH_TIMER_CLEAR_PPI_EVT;
	HAL_SW_SWITCH_TIMER_CLEAR_PPI_REGISTER_TASK =
   18c18:	f503 43fe 	add.w	r3, r3, #32512	; 0x7f00
   18c1c:	f8c5 354c 	str.w	r3, [r5, #1356]	; 0x54c
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(1)) =
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(1);
#endif /* !CONFIG_BT_CTLR_PHY_CODED || !CONFIG_SOC_NRF52840 */

	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   18c20:	f44f 6310 	mov.w	r3, #2304	; 0x900
   18c24:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_0_INCLUDE |
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_0_INCLUDE;
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   18c28:	f44f 5390 	mov.w	r3, #4608	; 0x1200
   18c2c:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
	NRF_PPI_regw_sideeffects();
#endif
	return remainder;
}
   18c30:	4620      	mov	r0, r4
   18c32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18c36:	bf00      	nop
   18c38:	7ff0bdbf 	.word	0x7ff0bdbf
   18c3c:	4000b000 	.word	0x4000b000
   18c40:	40008000 	.word	0x40008000
   18c44:	000f4240 	.word	0x000f4240
   18c48:	4000b148 	.word	0x4000b148
   18c4c:	40009000 	.word	0x40009000

00018c50 <radio_tmr_stop>:
	return start;
}

void radio_tmr_stop(void)
{
	EVENT_TIMER->TASKS_STOP = 1;
   18c50:	4a04      	ldr	r2, [pc, #16]	; (18c64 <radio_tmr_stop+0x14>)
   18c52:	2301      	movs	r3, #1
   18c54:	6053      	str	r3, [r2, #4]
	EVENT_TIMER->TASKS_SHUTDOWN = 1;
   18c56:	6113      	str	r3, [r2, #16]
	NRF_TIMER_regw_sideeffects_TASKS_STOP(EVENT_TIMER_NBR);
	/* Shutdown not modelled (deprecated) */
#endif

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	SW_SWITCH_TIMER->TASKS_STOP = 1;
   18c58:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   18c5c:	6053      	str	r3, [r2, #4]
	SW_SWITCH_TIMER->TASKS_SHUTDOWN = 1;
   18c5e:	6113      	str	r3, [r2, #16]
   18c60:	4770      	bx	lr
   18c62:	bf00      	nop
   18c64:	40008000 	.word	0x40008000

00018c68 <radio_tmr_hcto_configure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_tmr_hcto_configure(u32_t hcto)
{
	EVENT_TIMER->CC[1] = hcto;
   18c68:	4b0c      	ldr	r3, [pc, #48]	; (18c9c <radio_tmr_hcto_configure+0x34>)
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_CC(EVENT_TIMER_NBR, 1);
#endif

	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
   18c6a:	4a0d      	ldr	r2, [pc, #52]	; (18ca0 <radio_tmr_hcto_configure+0x38>)
	EVENT_TIMER->CC[1] = hcto;
   18c6c:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
   18c70:	f503 33b8 	add.w	r3, r3, #94208	; 0x17000
   18c74:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
   18c78:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   18c7c:	3240      	adds	r2, #64	; 0x40
   18c7e:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_EVT =
   18c82:	f502 7280 	add.w	r2, r2, #256	; 0x100
   18c86:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
		HAL_RADIO_DISABLE_ON_HCTO_PPI_EVT;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_TASK =
   18c8a:	f5a2 42e2 	sub.w	r2, r2, #28928	; 0x7100
   18c8e:	3a34      	subs	r2, #52	; 0x34
   18c90:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
		HAL_RADIO_DISABLE_ON_HCTO_PPI_TASK;
	NRF_PPI->CHENSET =
   18c94:	2218      	movs	r2, #24
   18c96:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   18c9a:	4770      	bx	lr
   18c9c:	40008000 	.word	0x40008000
   18ca0:	40001104 	.word	0x40001104

00018ca4 <radio_tmr_aa_capture>:
#endif
}

void radio_tmr_aa_capture(void)
{
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_EVT =
   18ca4:	4b0b      	ldr	r3, [pc, #44]	; (18cd4 <radio_tmr_aa_capture+0x30>)
   18ca6:	4a0c      	ldr	r2, [pc, #48]	; (18cd8 <radio_tmr_aa_capture+0x34>)
   18ca8:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
		HAL_RADIO_READY_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_TASK =
   18cac:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   18cb0:	3240      	adds	r2, #64	; 0x40
   18cb2:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
		HAL_RADIO_READY_TIME_CAPTURE_PPI_TASK;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
   18cb6:	f5a2 42de 	sub.w	r2, r2, #28416	; 0x6f00
   18cba:	3a3c      	subs	r2, #60	; 0x3c
   18cbc:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
   18cc0:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   18cc4:	3240      	adds	r2, #64	; 0x40
   18cc6:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	NRF_PPI->CHENSET =
   18cca:	220c      	movs	r2, #12
   18ccc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   18cd0:	4770      	bx	lr
   18cd2:	bf00      	nop
   18cd4:	4001f000 	.word	0x4001f000
   18cd8:	40001100 	.word	0x40001100

00018cdc <radio_tmr_aa_get>:
#endif
}

u32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   18cdc:	4b01      	ldr	r3, [pc, #4]	; (18ce4 <radio_tmr_aa_get+0x8>)
   18cde:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   18ce2:	4770      	bx	lr
   18ce4:	40008000 	.word	0x40008000

00018ce8 <radio_tmr_aa_save>:

static u32_t radio_tmr_aa;

void radio_tmr_aa_save(u32_t aa)
{
	radio_tmr_aa = aa;
   18ce8:	4b01      	ldr	r3, [pc, #4]	; (18cf0 <radio_tmr_aa_save+0x8>)
   18cea:	6018      	str	r0, [r3, #0]
   18cec:	4770      	bx	lr
   18cee:	bf00      	nop
   18cf0:	2000239c 	.word	0x2000239c

00018cf4 <radio_tmr_aa_restore>:

u32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
}
   18cf4:	4b01      	ldr	r3, [pc, #4]	; (18cfc <radio_tmr_aa_restore+0x8>)
   18cf6:	6818      	ldr	r0, [r3, #0]
   18cf8:	4770      	bx	lr
   18cfa:	bf00      	nop
   18cfc:	2000239c 	.word	0x2000239c

00018d00 <radio_tmr_ready_get>:

u32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   18d00:	4b01      	ldr	r3, [pc, #4]	; (18d08 <radio_tmr_ready_get+0x8>)
   18d02:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   18d06:	4770      	bx	lr
   18d08:	40008000 	.word	0x40008000

00018d0c <radio_tmr_end_capture>:

void radio_tmr_end_capture(void)
{
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_EVT =
   18d0c:	4b06      	ldr	r3, [pc, #24]	; (18d28 <radio_tmr_end_capture+0x1c>)
   18d0e:	4a07      	ldr	r2, [pc, #28]	; (18d2c <radio_tmr_end_capture+0x20>)
   18d10:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
		HAL_RADIO_END_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_TASK =
   18d14:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   18d18:	323c      	adds	r2, #60	; 0x3c
   18d1a:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
		HAL_RADIO_END_TIME_CAPTURE_PPI_TASK;
	NRF_PPI->CHENSET = HAL_RADIO_END_TIME_CAPTURE_PPI_ENABLE;
   18d1e:	2220      	movs	r2, #32
   18d20:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   18d24:	4770      	bx	lr
   18d26:	bf00      	nop
   18d28:	4001f000 	.word	0x4001f000
   18d2c:	4000110c 	.word	0x4000110c

00018d30 <radio_tmr_end_get>:
   18d30:	4b01      	ldr	r3, [pc, #4]	; (18d38 <radio_tmr_end_get+0x8>)
   18d32:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   18d36:	4770      	bx	lr
   18d38:	40008000 	.word	0x40008000

00018d3c <radio_tmr_tifs_base_get>:
u32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   18d3c:	4b01      	ldr	r3, [pc, #4]	; (18d44 <radio_tmr_tifs_base_get+0x8>)
   18d3e:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

u32_t radio_tmr_tifs_base_get(void)
{
	return radio_tmr_end_get();
}
   18d42:	4770      	bx	lr
   18d44:	40008000 	.word	0x40008000

00018d48 <radio_ccm_rx_pkt_set>:
void *radio_ccm_rx_pkt_set(struct ccm *ccm, u8_t phy, void *pkt)
{

	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   18d48:	4b21      	ldr	r3, [pc, #132]	; (18dd0 <radio_ccm_rx_pkt_set+0x88>)
{
   18d4a:	b510      	push	{r4, lr}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   18d4c:	2400      	movs	r4, #0
   18d4e:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   18d52:	2402      	movs	r4, #2
	/* Enable CCM support for 8-bit length field PDUs. */
	mode |= (CCM_MODE_LENGTH_Extended << CCM_MODE_LENGTH_Pos) &
		CCM_MODE_LENGTH_Msk;

	/* Select CCM data rate based on current PHY in use. */
	switch (phy) {
   18d54:	42a1      	cmp	r1, r4
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   18d56:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	switch (phy) {
   18d5a:	d003      	beq.n	18d64 <radio_ccm_rx_pkt_set+0x1c>
   18d5c:	2904      	cmp	r1, #4
   18d5e:	d024      	beq.n	18daa <radio_ccm_rx_pkt_set+0x62>
	default:
	case BIT(0):
		mode |= (CCM_MODE_DATARATE_1Mbit <<
   18d60:	491c      	ldr	r1, [pc, #112]	; (18dd4 <radio_ccm_rx_pkt_set+0x8c>)
   18d62:	e000      	b.n	18d66 <radio_ccm_rx_pkt_set+0x1e>
			 CCM_MODE_DATARATE_Pos) &
			CCM_MODE_DATARATE_Msk;
		break;

	case BIT(1):
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   18d64:	491c      	ldr	r1, [pc, #112]	; (18dd8 <radio_ccm_rx_pkt_set+0x90>)
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}
#endif /* CONFIG_SOC_SERIES_NRF52X */

	NRF_CCM->MODE = mode;
   18d66:	4b1a      	ldr	r3, [pc, #104]	; (18dd0 <radio_ccm_rx_pkt_set+0x88>)
   18d68:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
   18d6c:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)_pkt_scratch;
   18d70:	481a      	ldr	r0, [pc, #104]	; (18ddc <radio_ccm_rx_pkt_set+0x94>)
   18d72:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)pkt;
   18d76:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   18d7a:	4a19      	ldr	r2, [pc, #100]	; (18de0 <radio_ccm_rx_pkt_set+0x98>)
   18d7c:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = 0;
   18d80:	2200      	movs	r2, #0
   18d82:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
	NRF_CCM->EVENTS_ERROR = 0;

	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
   18d86:	4917      	ldr	r1, [pc, #92]	; (18de4 <radio_ccm_rx_pkt_set+0x9c>)
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   18d88:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   18d8c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
   18d90:	4a15      	ldr	r2, [pc, #84]	; (18de8 <radio_ccm_rx_pkt_set+0xa0>)
   18d92:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	HAL_TRIGGER_CRYPT_PPI_REGISTER_TASK = HAL_TRIGGER_CRYPT_PPI_TASK;
   18d96:	f501 415f 	add.w	r1, r1, #57088	; 0xdf00
   18d9a:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
	NRF_PPI->CHENSET = HAL_TRIGGER_CRYPT_PPI_ENABLE;
   18d9e:	2140      	movs	r1, #64	; 0x40
   18da0:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects();
#endif

	NRF_CCM->TASKS_KSGEN = 1;
   18da4:	2201      	movs	r2, #1
   18da6:	601a      	str	r2, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
   18da8:	bd10      	pop	{r4, pc}
		NRF_CCM->RATEOVERRIDE =
   18daa:	2103      	movs	r1, #3
   18dac:	f8c3 151c 	str.w	r1, [r3, #1308]	; 0x51c
		HAL_TRIGGER_RATEOVERRIDE_PPI_REGISTER_EVT =
   18db0:	4b0d      	ldr	r3, [pc, #52]	; (18de8 <radio_ccm_rx_pkt_set+0xa0>)
   18db2:	490e      	ldr	r1, [pc, #56]	; (18dec <radio_ccm_rx_pkt_set+0xa4>)
   18db4:	f8c3 1578 	str.w	r1, [r3, #1400]	; 0x578
		HAL_TRIGGER_RATEOVERRIDE_PPI_REGISTER_TASK =
   18db8:	f501 415e 	add.w	r1, r1, #56832	; 0xde00
   18dbc:	31bc      	adds	r1, #188	; 0xbc
   18dbe:	f8c3 157c 	str.w	r1, [r3, #1404]	; 0x57c
		NRF_PPI->CHENSET = HAL_TRIGGER_RATEOVERRIDE_PPI_ENABLE;
   18dc2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   18dc6:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
		mode |= (CCM_MODE_DATARATE_125Kbps <<
   18dca:	4909      	ldr	r1, [pc, #36]	; (18df0 <radio_ccm_rx_pkt_set+0xa8>)
		break;
   18dcc:	e7cb      	b.n	18d66 <radio_ccm_rx_pkt_set+0x1e>
   18dce:	bf00      	nop
   18dd0:	4000f000 	.word	0x4000f000
   18dd4:	01000001 	.word	0x01000001
   18dd8:	01010001 	.word	0x01010001
   18ddc:	20002298 	.word	0x20002298
   18de0:	20002188 	.word	0x20002188
   18de4:	40001104 	.word	0x40001104
   18de8:	4001f000 	.word	0x4001f000
   18dec:	40001150 	.word	0x40001150
   18df0:	01020001 	.word	0x01020001

00018df4 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
   18df4:	b510      	push	{r4, lr}
	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   18df6:	4b0e      	ldr	r3, [pc, #56]	; (18e30 <radio_ccm_tx_pkt_set+0x3c>)
   18df8:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   18dfa:	2402      	movs	r4, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   18dfc:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   18e00:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
   18e04:	4c0b      	ldr	r4, [pc, #44]	; (18e34 <radio_ccm_tx_pkt_set+0x40>)
   18e06:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
   18e0a:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)pkt;
   18e0e:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
   18e12:	4809      	ldr	r0, [pc, #36]	; (18e38 <radio_ccm_tx_pkt_set+0x44>)
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   18e14:	4909      	ldr	r1, [pc, #36]	; (18e3c <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
   18e16:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   18e1a:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   18e1e:	2101      	movs	r1, #1
   18e20:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   18e24:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   18e28:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	NRF_CCM->TASKS_KSGEN = 1;
   18e2c:	6019      	str	r1, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
   18e2e:	bd10      	pop	{r4, pc}
   18e30:	4000f000 	.word	0x4000f000
   18e34:	01010000 	.word	0x01010000
   18e38:	20002298 	.word	0x20002298
   18e3c:	20002188 	.word	0x20002188

00018e40 <radio_ccm_is_done>:

u32_t radio_ccm_is_done(void)
{
	NRF_CCM->INTENSET = CCM_INTENSET_ENDCRYPT_Msk;
   18e40:	4b0c      	ldr	r3, [pc, #48]	; (18e74 <radio_ccm_is_done+0x34>)
   18e42:	2202      	movs	r2, #2
   18e44:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENSET();
#endif
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   18e48:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   18e4c:	b16a      	cbz	r2, 18e6a <radio_ccm_is_done+0x2a>
		__WFE();
		__SEV();
		__WFE();
	}
	NRF_CCM->INTENCLR = CCM_INTENCLR_ENDCRYPT_Msk;
   18e4e:	2202      	movs	r2, #2
   18e50:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   18e54:	4a08      	ldr	r2, [pc, #32]	; (18e78 <radio_ccm_is_done+0x38>)
   18e56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   18e5a:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENCLR();
#endif
	NVIC_ClearPendingIRQ(CCM_AAR_IRQn);

	return (NRF_CCM->EVENTS_ERROR == 0);
   18e5e:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   18e62:	fab0 f080 	clz	r0, r0
   18e66:	0940      	lsrs	r0, r0, #5
   18e68:	4770      	bx	lr
		__WFE();
   18e6a:	bf20      	wfe
		__SEV();
   18e6c:	bf40      	sev
		__WFE();
   18e6e:	bf20      	wfe
   18e70:	e7ea      	b.n	18e48 <radio_ccm_is_done+0x8>
   18e72:	bf00      	nop
   18e74:	4000f000 	.word	0x4000f000
   18e78:	e000e100 	.word	0xe000e100

00018e7c <radio_ccm_mic_is_valid>:

u32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   18e7c:	4b03      	ldr	r3, [pc, #12]	; (18e8c <radio_ccm_mic_is_valid+0x10>)
   18e7e:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   18e82:	3000      	adds	r0, #0
   18e84:	bf18      	it	ne
   18e86:	2001      	movne	r0, #1
   18e88:	4770      	bx	lr
   18e8a:	bf00      	nop
   18e8c:	4000f000 	.word	0x4000f000

00018e90 <radio_ar_configure>:

static u8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(u32_t nirk, void *irk)
{
   18e90:	b538      	push	{r3, r4, r5, lr}
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   18e92:	4c13      	ldr	r4, [pc, #76]	; (18ee0 <radio_ar_configure+0x50>)
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (u32_t)irk;
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
   18e94:	4d13      	ldr	r5, [pc, #76]	; (18ee4 <radio_ar_configure+0x54>)
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   18e96:	2303      	movs	r3, #3
   18e98:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	NRF_AAR->NIRK = nirk;
   18e9c:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
	NRF_AAR->IRKPTR = (u32_t)irk;
   18ea0:	f8c4 1508 	str.w	r1, [r4, #1288]	; 0x508
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
   18ea4:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504
   18ea8:	3b01      	subs	r3, #1
   18eaa:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];

	NRF_AAR->EVENTS_END = 0;
   18eae:	2100      	movs	r1, #0
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];
   18eb0:	4b0d      	ldr	r3, [pc, #52]	; (18ee8 <radio_ar_configure+0x58>)
   18eb2:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
	NRF_AAR->EVENTS_RESOLVED = 0;
	NRF_AAR->EVENTS_NOTRESOLVED = 0;

	radio_bc_configure(64);
   18eb6:	2040      	movs	r0, #64	; 0x40
	NRF_AAR->EVENTS_END = 0;
   18eb8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   18ebc:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   18ec0:	f8c4 1108 	str.w	r1, [r4, #264]	; 0x108
	radio_bc_configure(64);
   18ec4:	f7ff fe3c 	bl	18b40 <radio_bc_configure>
	radio_bc_status_reset();

	HAL_TRIGGER_AAR_PPI_REGISTER_EVT = HAL_TRIGGER_AAR_PPI_EVT;
   18ec8:	4b08      	ldr	r3, [pc, #32]	; (18eec <radio_ar_configure+0x5c>)
   18eca:	4a09      	ldr	r2, [pc, #36]	; (18ef0 <radio_ar_configure+0x60>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
   18ecc:	f8c5 1128 	str.w	r1, [r5, #296]	; 0x128
	HAL_TRIGGER_AAR_PPI_REGISTER_EVT = HAL_TRIGGER_AAR_PPI_EVT;
   18ed0:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	HAL_TRIGGER_AAR_PPI_REGISTER_TASK = HAL_TRIGGER_AAR_PPI_TASK;
	NRF_PPI->CHENSET = HAL_TRIGGER_AAR_PPI_ENABLE;
   18ed4:	2240      	movs	r2, #64	; 0x40
	HAL_TRIGGER_AAR_PPI_REGISTER_TASK = HAL_TRIGGER_AAR_PPI_TASK;
   18ed6:	f8c3 4544 	str.w	r4, [r3, #1348]	; 0x544
	NRF_PPI->CHENSET = HAL_TRIGGER_AAR_PPI_ENABLE;
   18eda:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   18ede:	bd38      	pop	{r3, r4, r5, pc}
   18ee0:	4000f000 	.word	0x4000f000
   18ee4:	40001000 	.word	0x40001000
   18ee8:	20002184 	.word	0x20002184
   18eec:	4001f000 	.word	0x4001f000
   18ef0:	40001128 	.word	0x40001128

00018ef4 <radio_ar_match_get>:
#endif
}

u32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   18ef4:	4b01      	ldr	r3, [pc, #4]	; (18efc <radio_ar_match_get+0x8>)
   18ef6:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   18efa:	4770      	bx	lr
   18efc:	4000f000 	.word	0x4000f000

00018f00 <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
   18f00:	4a04      	ldr	r2, [pc, #16]	; (18f14 <radio_ar_status_reset+0x14>)
   18f02:	2300      	movs	r3, #0
   18f04:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

void radio_ar_status_reset(void)
{
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   18f08:	f502 4260 	add.w	r2, r2, #57344	; 0xe000
   18f0c:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   18f10:	4770      	bx	lr
   18f12:	bf00      	nop
   18f14:	40001000 	.word	0x40001000

00018f18 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   18f18:	4b08      	ldr	r3, [pc, #32]	; (18f3c <radio_ar_has_match+0x24>)
   18f1a:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   18f1e:	b160      	cbz	r0, 18f3a <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   18f20:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   18f24:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   18f28:	b138      	cbz	r0, 18f3a <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   18f2a:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   18f2e:	b120      	cbz	r0, 18f3a <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   18f30:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   18f34:	fab0 f080 	clz	r0, r0
   18f38:	0940      	lsrs	r0, r0, #5
}
   18f3a:	4770      	bx	lr
   18f3c:	40001000 	.word	0x40001000

00018f40 <mayfly_enable_cb>:

void mayfly_enable_cb(u8_t caller_id, u8_t callee_id, u8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   18f40:	2901      	cmp	r1, #1
{
   18f42:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   18f44:	d00e      	beq.n	18f64 <mayfly_enable_cb+0x24>
   18f46:	4b0d      	ldr	r3, [pc, #52]	; (18f7c <mayfly_enable_cb+0x3c>)
   18f48:	9301      	str	r3, [sp, #4]
   18f4a:	9300      	str	r3, [sp, #0]
   18f4c:	4a0c      	ldr	r2, [pc, #48]	; (18f80 <mayfly_enable_cb+0x40>)
   18f4e:	4b0d      	ldr	r3, [pc, #52]	; (18f84 <mayfly_enable_cb+0x44>)
   18f50:	490d      	ldr	r1, [pc, #52]	; (18f88 <mayfly_enable_cb+0x48>)
   18f52:	480e      	ldr	r0, [pc, #56]	; (18f8c <mayfly_enable_cb+0x4c>)
   18f54:	f7e9 f99e 	bl	2294 <printk>
   18f58:	4040      	eors	r0, r0
   18f5a:	f380 8811 	msr	BASEPRI, r0
   18f5e:	f04f 0004 	mov.w	r0, #4
   18f62:	df02      	svc	2

	if (enable) {
		irq_enable(SWI4_IRQn);
   18f64:	2018      	movs	r0, #24
	if (enable) {
   18f66:	b122      	cbz	r2, 18f72 <mayfly_enable_cb+0x32>
	} else {
		irq_disable(SWI4_IRQn);
	}
}
   18f68:	b003      	add	sp, #12
   18f6a:	f85d eb04 	ldr.w	lr, [sp], #4
		irq_enable(SWI4_IRQn);
   18f6e:	f7e8 be2d 	b.w	1bcc <_arch_irq_enable>
}
   18f72:	b003      	add	sp, #12
   18f74:	f85d eb04 	ldr.w	lr, [sp], #4
		irq_disable(SWI4_IRQn);
   18f78:	f7e8 be38 	b.w	1bec <_arch_irq_disable>
   18f7c:	00023dae 	.word	0x00023dae
   18f80:	00022d76 	.word	0x00022d76
   18f84:	00027167 	.word	0x00027167
   18f88:	000272d8 	.word	0x000272d8
   18f8c:	00027196 	.word	0x00027196

00018f90 <mayfly_is_enabled>:

u32_t mayfly_is_enabled(u8_t caller_id, u8_t callee_id)
{
   18f90:	b507      	push	{r0, r1, r2, lr}
	(void)caller_id;

	switch (callee_id) {
   18f92:	b181      	cbz	r1, 18fb6 <mayfly_is_enabled+0x26>
   18f94:	2901      	cmp	r1, #1
   18f96:	d014      	beq.n	18fc2 <mayfly_is_enabled+0x32>

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(SWI4_IRQn);

	default:
		LL_ASSERT(0);
   18f98:	4b0b      	ldr	r3, [pc, #44]	; (18fc8 <mayfly_is_enabled+0x38>)
   18f9a:	9301      	str	r3, [sp, #4]
   18f9c:	9300      	str	r3, [sp, #0]
   18f9e:	4a0b      	ldr	r2, [pc, #44]	; (18fcc <mayfly_is_enabled+0x3c>)
   18fa0:	4b0b      	ldr	r3, [pc, #44]	; (18fd0 <mayfly_is_enabled+0x40>)
   18fa2:	490c      	ldr	r1, [pc, #48]	; (18fd4 <mayfly_is_enabled+0x44>)
   18fa4:	480c      	ldr	r0, [pc, #48]	; (18fd8 <mayfly_is_enabled+0x48>)
   18fa6:	f7e9 f975 	bl	2294 <printk>
   18faa:	4040      	eors	r0, r0
   18fac:	f380 8811 	msr	BASEPRI, r0
   18fb0:	f04f 0004 	mov.w	r0, #4
   18fb4:	df02      	svc	2
		return irq_is_enabled(RTC0_IRQn);
   18fb6:	200b      	movs	r0, #11
		break;
	}

	return 0;
}
   18fb8:	b003      	add	sp, #12
   18fba:	f85d eb04 	ldr.w	lr, [sp], #4
		return irq_is_enabled(SWI4_IRQn);
   18fbe:	f7e8 be29 	b.w	1c14 <_arch_irq_is_enabled>
   18fc2:	2018      	movs	r0, #24
   18fc4:	e7f8      	b.n	18fb8 <mayfly_is_enabled+0x28>
   18fc6:	bf00      	nop
   18fc8:	00023dae 	.word	0x00023dae
   18fcc:	00022d76 	.word	0x00022d76
   18fd0:	00027178 	.word	0x00027178
   18fd4:	000272d8 	.word	0x000272d8
   18fd8:	00023fa5 	.word	0x00023fa5

00018fdc <mayfly_prio_is_equal>:
u32_t mayfly_prio_is_equal(u8_t caller_id, u8_t callee_id)
{
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
	return (caller_id == callee_id) ||
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   18fdc:	4288      	cmp	r0, r1
   18fde:	d00a      	beq.n	18ff6 <mayfly_prio_is_equal+0x1a>
	return (caller_id == callee_id) ||
   18fe0:	b918      	cbnz	r0, 18fea <mayfly_prio_is_equal+0xe>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   18fe2:	1e4b      	subs	r3, r1, #1
   18fe4:	4258      	negs	r0, r3
   18fe6:	4158      	adcs	r0, r3
   18fe8:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   18fea:	2801      	cmp	r0, #1
   18fec:	d105      	bne.n	18ffa <mayfly_prio_is_equal+0x1e>
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   18fee:	fab1 f081 	clz	r0, r1
   18ff2:	0940      	lsrs	r0, r0, #5
   18ff4:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   18ff6:	2001      	movs	r0, #1
   18ff8:	4770      	bx	lr
   18ffa:	2000      	movs	r0, #0
		(callee_id == MAYFLY_CALL_ID_WORKER));
#else
	/* TODO: check Kconfig set priorities */
	return caller_id == callee_id;
#endif
}
   18ffc:	4770      	bx	lr
	...

00019000 <mayfly_pend>:

void mayfly_pend(u8_t caller_id, u8_t callee_id)
{
   19000:	b507      	push	{r0, r1, r2, lr}
   19002:	4b0e      	ldr	r3, [pc, #56]	; (1903c <mayfly_pend+0x3c>)
	(void)caller_id;

	switch (callee_id) {
   19004:	b181      	cbz	r1, 19028 <mayfly_pend+0x28>
   19006:	2901      	cmp	r1, #1
   19008:	d015      	beq.n	19036 <mayfly_pend+0x36>
	case MAYFLY_CALL_ID_JOB:
		NVIC_SetPendingIRQ(SWI4_IRQn);
		break;

	default:
		LL_ASSERT(0);
   1900a:	4b0d      	ldr	r3, [pc, #52]	; (19040 <mayfly_pend+0x40>)
   1900c:	9301      	str	r3, [sp, #4]
   1900e:	9300      	str	r3, [sp, #0]
   19010:	4a0c      	ldr	r2, [pc, #48]	; (19044 <mayfly_pend+0x44>)
   19012:	4b0d      	ldr	r3, [pc, #52]	; (19048 <mayfly_pend+0x48>)
   19014:	490d      	ldr	r1, [pc, #52]	; (1904c <mayfly_pend+0x4c>)
   19016:	480e      	ldr	r0, [pc, #56]	; (19050 <mayfly_pend+0x50>)
   19018:	f7e9 f93c 	bl	2294 <printk>
   1901c:	4040      	eors	r0, r0
   1901e:	f380 8811 	msr	BASEPRI, r0
   19022:	f04f 0004 	mov.w	r0, #4
   19026:	df02      	svc	2
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   19028:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1902c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		break;
	}
}
   19030:	b003      	add	sp, #12
   19032:	f85d fb04 	ldr.w	pc, [sp], #4
   19036:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   1903a:	e7f7      	b.n	1902c <mayfly_pend+0x2c>
   1903c:	e000e100 	.word	0xe000e100
   19040:	00023dae 	.word	0x00023dae
   19044:	00022d76 	.word	0x00022d76
   19048:	0002718a 	.word	0x0002718a
   1904c:	000272d8 	.word	0x000272d8
   19050:	00023fa5 	.word	0x00023fa5

00019054 <hal_ticker_instance0_caller_id_get>:

u8_t hal_ticker_instance0_caller_id_get(u8_t user_id)
{
	u8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   19054:	2803      	cmp	r0, #3
{
   19056:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   19058:	d90e      	bls.n	19078 <hal_ticker_instance0_caller_id_get+0x24>
   1905a:	4b0e      	ldr	r3, [pc, #56]	; (19094 <hal_ticker_instance0_caller_id_get+0x40>)
   1905c:	9301      	str	r3, [sp, #4]
   1905e:	9300      	str	r3, [sp, #0]
   19060:	4a0d      	ldr	r2, [pc, #52]	; (19098 <hal_ticker_instance0_caller_id_get+0x44>)
   19062:	4b0e      	ldr	r3, [pc, #56]	; (1909c <hal_ticker_instance0_caller_id_get+0x48>)
   19064:	490e      	ldr	r1, [pc, #56]	; (190a0 <hal_ticker_instance0_caller_id_get+0x4c>)
   19066:	480f      	ldr	r0, [pc, #60]	; (190a4 <hal_ticker_instance0_caller_id_get+0x50>)

	caller_id = caller_id_lut[user_id];
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   19068:	f7e9 f914 	bl	2294 <printk>
   1906c:	4040      	eors	r0, r0
   1906e:	f380 8811 	msr	BASEPRI, r0
   19072:	f04f 0004 	mov.w	r0, #4
   19076:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   19078:	4b0b      	ldr	r3, [pc, #44]	; (190a8 <hal_ticker_instance0_caller_id_get+0x54>)
   1907a:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   1907c:	b938      	cbnz	r0, 1908e <hal_ticker_instance0_caller_id_get+0x3a>
   1907e:	4b05      	ldr	r3, [pc, #20]	; (19094 <hal_ticker_instance0_caller_id_get+0x40>)
   19080:	9301      	str	r3, [sp, #4]
   19082:	9300      	str	r3, [sp, #0]
   19084:	4a04      	ldr	r2, [pc, #16]	; (19098 <hal_ticker_instance0_caller_id_get+0x44>)
   19086:	4b05      	ldr	r3, [pc, #20]	; (1909c <hal_ticker_instance0_caller_id_get+0x48>)
   19088:	4905      	ldr	r1, [pc, #20]	; (190a0 <hal_ticker_instance0_caller_id_get+0x4c>)
   1908a:	4808      	ldr	r0, [pc, #32]	; (190ac <hal_ticker_instance0_caller_id_get+0x58>)
   1908c:	e7ec      	b.n	19068 <hal_ticker_instance0_caller_id_get+0x14>

	return caller_id;
}
   1908e:	b003      	add	sp, #12
   19090:	f85d fb04 	ldr.w	pc, [sp], #4
   19094:	00023dae 	.word	0x00023dae
   19098:	00022d76 	.word	0x00022d76
   1909c:	000271c6 	.word	0x000271c6
   190a0:	000272d8 	.word	0x000272d8
   190a4:	00027208 	.word	0x00027208
   190a8:	00027204 	.word	0x00027204
   190ac:	00027249 	.word	0x00027249

000190b0 <hal_ticker_instance0_sched>:

void hal_ticker_instance0_sched(u8_t caller_id, u8_t callee_id, u8_t chain,
				void *instance)
{
   190b0:	b513      	push	{r0, r1, r4, lr}
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   190b2:	3802      	subs	r0, #2
{
   190b4:	461c      	mov	r4, r3
	switch (caller_id) {
   190b6:	2803      	cmp	r0, #3
   190b8:	d818      	bhi.n	190ec <hal_ticker_instance0_sched+0x3c>
   190ba:	e8df f000 	tbb	[pc, r0]
   190be:	0d02      	.short	0x0d02
   190c0:	2f13      	.short	0x2f13
	case TICKER_CALL_ID_TRIGGER:
		switch (callee_id) {
   190c2:	2903      	cmp	r1, #3
   190c4:	d112      	bne.n	190ec <hal_ticker_instance0_sched+0x3c>
		{
			static memq_link_t link;
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_worker};

			m.param = instance;
   190c6:	4b19      	ldr	r3, [pc, #100]	; (1912c <hal_ticker_instance0_sched+0x7c>)

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   190c8:	2100      	movs	r1, #0
			m.param = instance;
   190ca:	609c      	str	r4, [r3, #8]
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_job};

			m.param = instance;

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   190cc:	2000      	movs	r0, #0

	default:
		LL_ASSERT(0);
		break;
	}
}
   190ce:	b002      	add	sp, #8
   190d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   190d4:	f7f2 bc4e 	b.w	b974 <mayfly_enqueue>
		switch (callee_id) {
   190d8:	2904      	cmp	r1, #4
   190da:	d107      	bne.n	190ec <hal_ticker_instance0_sched+0x3c>
			m.param = instance;
   190dc:	4b14      	ldr	r3, [pc, #80]	; (19130 <hal_ticker_instance0_sched+0x80>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   190de:	2101      	movs	r1, #1
			m.param = instance;
   190e0:	609c      	str	r4, [r3, #8]
   190e2:	e7f3      	b.n	190cc <hal_ticker_instance0_sched+0x1c>
		switch (callee_id) {
   190e4:	2903      	cmp	r1, #3
   190e6:	d010      	beq.n	1910a <hal_ticker_instance0_sched+0x5a>
   190e8:	2904      	cmp	r1, #4
   190ea:	d013      	beq.n	19114 <hal_ticker_instance0_sched+0x64>
		LL_ASSERT(0);
   190ec:	4b11      	ldr	r3, [pc, #68]	; (19134 <hal_ticker_instance0_sched+0x84>)
   190ee:	9301      	str	r3, [sp, #4]
   190f0:	9300      	str	r3, [sp, #0]
   190f2:	4a11      	ldr	r2, [pc, #68]	; (19138 <hal_ticker_instance0_sched+0x88>)
   190f4:	4b11      	ldr	r3, [pc, #68]	; (1913c <hal_ticker_instance0_sched+0x8c>)
   190f6:	4912      	ldr	r1, [pc, #72]	; (19140 <hal_ticker_instance0_sched+0x90>)
   190f8:	4812      	ldr	r0, [pc, #72]	; (19144 <hal_ticker_instance0_sched+0x94>)
   190fa:	f7e9 f8cb 	bl	2294 <printk>
   190fe:	4040      	eors	r0, r0
   19100:	f380 8811 	msr	BASEPRI, r0
   19104:	f04f 0004 	mov.w	r0, #4
   19108:	df02      	svc	2
			m.param = instance;
   1910a:	4b0f      	ldr	r3, [pc, #60]	; (19148 <hal_ticker_instance0_sched+0x98>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1910c:	2100      	movs	r1, #0
			m.param = instance;
   1910e:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   19110:	2001      	movs	r0, #1
   19112:	e7dc      	b.n	190ce <hal_ticker_instance0_sched+0x1e>
			m.param = instance;
   19114:	4b0d      	ldr	r3, [pc, #52]	; (1914c <hal_ticker_instance0_sched+0x9c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   19116:	2101      	movs	r1, #1
			m.param = instance;
   19118:	609c      	str	r4, [r3, #8]
   1911a:	e7f9      	b.n	19110 <hal_ticker_instance0_sched+0x60>
		switch (callee_id) {
   1911c:	2904      	cmp	r1, #4
   1911e:	d1e5      	bne.n	190ec <hal_ticker_instance0_sched+0x3c>
			m.param = instance;
   19120:	4b0b      	ldr	r3, [pc, #44]	; (19150 <hal_ticker_instance0_sched+0xa0>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   19122:	2101      	movs	r1, #1
			m.param = instance;
   19124:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   19126:	2003      	movs	r0, #3
   19128:	e7d1      	b.n	190ce <hal_ticker_instance0_sched+0x1e>
   1912a:	bf00      	nop
   1912c:	2000a0e8 	.word	0x2000a0e8
   19130:	2000a0f8 	.word	0x2000a0f8
   19134:	00023dae 	.word	0x00023dae
   19138:	00022d76 	.word	0x00022d76
   1913c:	000271e9 	.word	0x000271e9
   19140:	000272d8 	.word	0x000272d8
   19144:	00023fa5 	.word	0x00023fa5
   19148:	2000a108 	.word	0x2000a108
   1914c:	2000a118 	.word	0x2000a118
   19150:	2000a128 	.word	0x2000a128

00019154 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(u32_t value)
{
	cntr_cmp_set(0, value);
   19154:	4601      	mov	r1, r0
   19156:	2000      	movs	r0, #0
   19158:	f7ff b98c 	b.w	18474 <cntr_cmp_set>

0001915c <fixed_data_unref>:

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
}

static void fixed_data_unref(struct net_buf *buf, u8_t *data)
{
   1915c:	4770      	bx	lr
	...

00019160 <net_buf_pool_get>:
}
   19160:	4b01      	ldr	r3, [pc, #4]	; (19168 <net_buf_pool_get+0x8>)
   19162:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   19166:	4770      	bx	lr
   19168:	2000aa3c 	.word	0x2000aa3c

0001916c <net_buf_id>:
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1916c:	7982      	ldrb	r2, [r0, #6]
	return buf - pool->__bufs;
   1916e:	4b04      	ldr	r3, [pc, #16]	; (19180 <net_buf_id+0x14>)
   19170:	eb03 1342 	add.w	r3, r3, r2, lsl #5
   19174:	69db      	ldr	r3, [r3, #28]
   19176:	1ac0      	subs	r0, r0, r3
}
   19178:	4b02      	ldr	r3, [pc, #8]	; (19184 <net_buf_id+0x18>)
	return buf - pool->__bufs;
   1917a:	10c0      	asrs	r0, r0, #3
}
   1917c:	4358      	muls	r0, r3
   1917e:	4770      	bx	lr
   19180:	2000aa3c 	.word	0x2000aa3c
   19184:	aaaaaaab 	.word	0xaaaaaaab

00019188 <fixed_data_alloc>:
{
   19188:	b510      	push	{r4, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1918a:	4b09      	ldr	r3, [pc, #36]	; (191b0 <fixed_data_alloc+0x28>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1918c:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1918e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
	*size = min(fixed->data_size, *size);
   19192:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   19194:	699b      	ldr	r3, [r3, #24]
   19196:	685c      	ldr	r4, [r3, #4]
	*size = min(fixed->data_size, *size);
   19198:	6823      	ldr	r3, [r4, #0]
   1919a:	429a      	cmp	r2, r3
   1919c:	bf94      	ite	ls
   1919e:	600a      	strls	r2, [r1, #0]
   191a0:	600b      	strhi	r3, [r1, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   191a2:	f7ff ffe3 	bl	1916c <net_buf_id>
   191a6:	e894 000c 	ldmia.w	r4, {r2, r3}
}
   191aa:	fb02 3000 	mla	r0, r2, r0, r3
   191ae:	bd10      	pop	{r4, pc}
   191b0:	2000aa3c 	.word	0x2000aa3c

000191b4 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  s32_t timeout)
#endif
{
   191b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   191b8:	4605      	mov	r5, r0
   191ba:	9101      	str	r1, [sp, #4]
   191bc:	4616      	mov	r6, r2
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   191be:	f008 fd73 	bl	21ca8 <_impl_k_uptime_get_32>
   191c2:	4607      	mov	r7, r0
	__asm__ volatile(
   191c4:	f04f 0320 	mov.w	r3, #32
   191c8:	f3ef 8811 	mrs	r8, BASEPRI
   191cc:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   191d0:	8a6b      	ldrh	r3, [r5, #18]
   191d2:	2b00      	cmp	r3, #0
   191d4:	d03d      	beq.n	19252 <net_buf_alloc_len+0x9e>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   191d6:	8a2a      	ldrh	r2, [r5, #16]
   191d8:	429a      	cmp	r2, r3
   191da:	d92a      	bls.n	19232 <net_buf_alloc_len+0x7e>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
   191dc:	2100      	movs	r1, #0
   191de:	4628      	mov	r0, r5
   191e0:	f008 fabd 	bl	2175e <k_queue_get>
			if (buf) {
   191e4:	4604      	mov	r4, r0
   191e6:	b320      	cbz	r0, 19232 <net_buf_alloc_len+0x7e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   191e8:	f388 8811 	msr	BASEPRI, r8
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   191ec:	9b01      	ldr	r3, [sp, #4]
   191ee:	2b00      	cmp	r3, #0
   191f0:	d03c      	beq.n	1926c <net_buf_alloc_len+0xb8>
		if (timeout != K_NO_WAIT && timeout != K_FOREVER) {
   191f2:	1c73      	adds	r3, r6, #1
   191f4:	2b01      	cmp	r3, #1
   191f6:	d906      	bls.n	19206 <net_buf_alloc_len+0x52>
   191f8:	f008 fd56 	bl	21ca8 <_impl_k_uptime_get_32>
			u32_t diff = k_uptime_get_32() - alloc_start;
   191fc:	1bc0      	subs	r0, r0, r7

			timeout -= min(timeout, diff);
   191fe:	42b0      	cmp	r0, r6
   19200:	bf94      	ite	ls
   19202:	1a36      	subls	r6, r6, r0
   19204:	1bb6      	subhi	r6, r6, r6
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   19206:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   19208:	4f1e      	ldr	r7, [pc, #120]	; (19284 <net_buf_alloc_len+0xd0>)
   1920a:	eb07 1343 	add.w	r3, r7, r3, lsl #5
   1920e:	4632      	mov	r2, r6
   19210:	699b      	ldr	r3, [r3, #24]
   19212:	681b      	ldr	r3, [r3, #0]
   19214:	a901      	add	r1, sp, #4
   19216:	681b      	ldr	r3, [r3, #0]
   19218:	4620      	mov	r0, r4
   1921a:	4798      	blx	r3
   1921c:	4605      	mov	r5, r0
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1921e:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   19220:	bb28      	cbnz	r0, 1926e <net_buf_alloc_len+0xba>
	k_lifo_put(&pool->free, buf);
   19222:	79a0      	ldrb	r0, [r4, #6]
   19224:	4621      	mov	r1, r4
   19226:	eb07 1040 	add.w	r0, r7, r0, lsl #5
   1922a:	f008 fa78 	bl	2171e <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   1922e:	462c      	mov	r4, r5
   19230:	e018      	b.n	19264 <net_buf_alloc_len+0xb0>
		uninit_count = pool->uninit_count--;
   19232:	8a6b      	ldrh	r3, [r5, #18]
   19234:	1e5a      	subs	r2, r3, #1
   19236:	826a      	strh	r2, [r5, #18]
   19238:	f388 8811 	msr	BASEPRI, r8
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   1923c:	8a2c      	ldrh	r4, [r5, #16]
   1923e:	1ae4      	subs	r4, r4, r3
   19240:	69eb      	ldr	r3, [r5, #28]
   19242:	2218      	movs	r2, #24
   19244:	fb02 3404 	mla	r4, r2, r4, r3
	return pool - _net_buf_pool_list;
   19248:	4b0e      	ldr	r3, [pc, #56]	; (19284 <net_buf_alloc_len+0xd0>)
   1924a:	1aed      	subs	r5, r5, r3
   1924c:	116d      	asrs	r5, r5, #5
	buf->pool_id = pool_id(pool);
   1924e:	71a5      	strb	r5, [r4, #6]
		goto success;
   19250:	e7cc      	b.n	191ec <net_buf_alloc_len+0x38>
   19252:	f388 8811 	msr	BASEPRI, r8
	buf = k_lifo_get(&pool->free, timeout);
   19256:	4631      	mov	r1, r6
   19258:	4628      	mov	r0, r5
   1925a:	f008 fa80 	bl	2175e <k_queue_get>
	if (!buf) {
   1925e:	4604      	mov	r4, r0
   19260:	2800      	cmp	r0, #0
   19262:	d1c3      	bne.n	191ec <net_buf_alloc_len+0x38>
	pool->avail_count--;
	NET_BUF_ASSERT(pool->avail_count >= 0);
#endif

	return buf;
}
   19264:	4620      	mov	r0, r4
   19266:	b002      	add	sp, #8
   19268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		buf->__buf = NULL;
   1926c:	6123      	str	r3, [r4, #16]
	buf->ref   = 1;
   1926e:	2301      	movs	r3, #1
   19270:	7123      	strb	r3, [r4, #4]
	buf->flags = 0;
   19272:	2300      	movs	r3, #0
	buf->frags = NULL;
   19274:	6023      	str	r3, [r4, #0]
	buf->flags = 0;
   19276:	7163      	strb	r3, [r4, #5]
	buf->size  = size;
   19278:	9a01      	ldr	r2, [sp, #4]
	buf->len  = 0;
   1927a:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
   1927c:	6923      	ldr	r3, [r4, #16]
   1927e:	81e2      	strh	r2, [r4, #14]
   19280:	60a3      	str	r3, [r4, #8]
	return buf;
   19282:	e7ef      	b.n	19264 <net_buf_alloc_len+0xb0>
   19284:	2000aa3c 	.word	0x2000aa3c

00019288 <net_buf_alloc_fixed>:
				       line);
}
#else
struct net_buf *net_buf_alloc_fixed(struct net_buf_pool *pool, s32_t timeout)
{
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   19288:	6983      	ldr	r3, [r0, #24]

	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   1928a:	685b      	ldr	r3, [r3, #4]
   1928c:	460a      	mov	r2, r1
   1928e:	6819      	ldr	r1, [r3, #0]
   19290:	f7ff bf90 	b.w	191b4 <net_buf_alloc_len>

00019294 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, s32_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, s32_t timeout)
#endif
{
   19294:	b570      	push	{r4, r5, r6, lr}
   19296:	4606      	mov	r6, r0
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p timeout %d", func, line, fifo, timeout);

	buf = k_fifo_get(fifo, timeout);
   19298:	f008 fa61 	bl	2175e <k_queue_get>
	if (!buf) {
   1929c:	4605      	mov	r5, r0
   1929e:	b128      	cbz	r0, 192ac <net_buf_get+0x18>
   192a0:	4604      	mov	r4, r0
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   192a2:	7963      	ldrb	r3, [r4, #5]
   192a4:	f013 0301 	ands.w	r3, r3, #1
   192a8:	d102      	bne.n	192b0 <net_buf_get+0x1c>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   192aa:	6023      	str	r3, [r4, #0]

	return buf;
}
   192ac:	4628      	mov	r0, r5
   192ae:	bd70      	pop	{r4, r5, r6, pc}
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   192b0:	2100      	movs	r1, #0
   192b2:	4630      	mov	r0, r6
   192b4:	f008 fa53 	bl	2175e <k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   192b8:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   192ba:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   192bc:	f023 0301 	bic.w	r3, r3, #1
   192c0:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   192c2:	4604      	mov	r4, r0
   192c4:	e7ed      	b.n	192a2 <net_buf_get+0xe>

000192c6 <net_buf_simple_reserve>:
{
	NET_BUF_ASSERT(buf);
	NET_BUF_ASSERT(buf->len == 0);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   192c6:	6883      	ldr	r3, [r0, #8]
   192c8:	4419      	add	r1, r3
   192ca:	6001      	str	r1, [r0, #0]
   192cc:	4770      	bx	lr

000192ce <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   192ce:	b410      	push	{r4}
	struct net_buf *tail;

	NET_BUF_ASSERT(fifo);
	NET_BUF_ASSERT(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
   192d0:	460a      	mov	r2, r1
   192d2:	6814      	ldr	r4, [r2, #0]
   192d4:	b914      	cbnz	r4, 192dc <net_buf_put+0xe>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
}
   192d6:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   192d8:	f008 ba25 	b.w	21726 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   192dc:	7953      	ldrb	r3, [r2, #5]
   192de:	f043 0301 	orr.w	r3, r3, #1
   192e2:	7153      	strb	r3, [r2, #5]
   192e4:	4622      	mov	r2, r4
   192e6:	e7f4      	b.n	192d2 <net_buf_put+0x4>

000192e8 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   192e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   192ea:	4d15      	ldr	r5, [pc, #84]	; (19340 <net_buf_unref+0x58>)
   192ec:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   192ee:	2600      	movs	r6, #0
	while (buf) {
   192f0:	b904      	cbnz	r4, 192f4 <net_buf_unref+0xc>
   192f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (--buf->ref > 0) {
   192f4:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   192f6:	6827      	ldr	r7, [r4, #0]
		if (--buf->ref > 0) {
   192f8:	3b01      	subs	r3, #1
   192fa:	b2db      	uxtb	r3, r3
   192fc:	7123      	strb	r3, [r4, #4]
   192fe:	2b00      	cmp	r3, #0
   19300:	d1f7      	bne.n	192f2 <net_buf_unref+0xa>
		if (buf->__buf) {
   19302:	6921      	ldr	r1, [r4, #16]
   19304:	b159      	cbz	r1, 1931e <net_buf_unref+0x36>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   19306:	7963      	ldrb	r3, [r4, #5]
   19308:	079b      	lsls	r3, r3, #30
   1930a:	d407      	bmi.n	1931c <net_buf_unref+0x34>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1930c:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   1930e:	eb05 1343 	add.w	r3, r5, r3, lsl #5
   19312:	4620      	mov	r0, r4
   19314:	699b      	ldr	r3, [r3, #24]
   19316:	681b      	ldr	r3, [r3, #0]
   19318:	689b      	ldr	r3, [r3, #8]
   1931a:	4798      	blx	r3
			buf->__buf = NULL;
   1931c:	6126      	str	r6, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   1931e:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   19320:	60a6      	str	r6, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		pool->avail_count++;
		NET_BUF_ASSERT(pool->avail_count <= pool->buf_count);
#endif

		if (pool->destroy) {
   19322:	eb05 1340 	add.w	r3, r5, r0, lsl #5
		buf->frags = NULL;
   19326:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   19328:	695b      	ldr	r3, [r3, #20]
   1932a:	b11b      	cbz	r3, 19334 <net_buf_unref+0x4c>
			pool->destroy(buf);
   1932c:	4620      	mov	r0, r4
   1932e:	4798      	blx	r3
{
   19330:	463c      	mov	r4, r7
   19332:	e7dd      	b.n	192f0 <net_buf_unref+0x8>
	k_lifo_put(&pool->free, buf);
   19334:	4621      	mov	r1, r4
   19336:	eb05 1040 	add.w	r0, r5, r0, lsl #5
   1933a:	f008 f9f0 	bl	2171e <k_queue_prepend>
   1933e:	e7f7      	b.n	19330 <net_buf_unref+0x48>
   19340:	2000aa3c 	.word	0x2000aa3c

00019344 <net_buf_ref>:
{
	NET_BUF_ASSERT(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   19344:	7903      	ldrb	r3, [r0, #4]
   19346:	3301      	adds	r3, #1
   19348:	7103      	strb	r3, [r0, #4]
	return buf;
}
   1934a:	4770      	bx	lr

0001934c <net_buf_frag_last>:

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
	NET_BUF_ASSERT(buf);

	while (buf->frags) {
   1934c:	6803      	ldr	r3, [r0, #0]
   1934e:	b903      	cbnz	r3, 19352 <net_buf_frag_last+0x6>
		buf = buf->frags;
	}

	return buf;
}
   19350:	4770      	bx	lr
   19352:	4618      	mov	r0, r3
   19354:	e7fa      	b.n	1934c <net_buf_frag_last>

00019356 <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	NET_BUF_ASSERT(parent);
	NET_BUF_ASSERT(frag);

	if (parent->frags) {
   19356:	6802      	ldr	r2, [r0, #0]
{
   19358:	b510      	push	{r4, lr}
	if (parent->frags) {
   1935a:	b11a      	cbz	r2, 19364 <net_buf_frag_insert+0xe>
   1935c:	460b      	mov	r3, r1
	while (buf->frags) {
   1935e:	681c      	ldr	r4, [r3, #0]
   19360:	b914      	cbnz	r4, 19368 <net_buf_frag_insert+0x12>
		net_buf_frag_last(frag)->frags = parent->frags;
   19362:	601a      	str	r2, [r3, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   19364:	6001      	str	r1, [r0, #0]
   19366:	bd10      	pop	{r4, pc}
	while (buf->frags) {
   19368:	4623      	mov	r3, r4
   1936a:	e7f8      	b.n	1935e <net_buf_frag_insert+0x8>

0001936c <net_buf_frag_add>:
}

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1936c:	b510      	push	{r4, lr}
	NET_BUF_ASSERT(frag);

	if (!head) {
   1936e:	4604      	mov	r4, r0
   19370:	b928      	cbnz	r0, 1937e <net_buf_frag_add+0x12>
	buf->ref++;
   19372:	790b      	ldrb	r3, [r1, #4]
   19374:	3301      	adds	r3, #1
   19376:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   19378:	4608      	mov	r0, r1
   1937a:	bd10      	pop	{r4, pc}
	while (buf->frags) {
   1937c:	4618      	mov	r0, r3
   1937e:	6803      	ldr	r3, [r0, #0]
   19380:	2b00      	cmp	r3, #0
   19382:	d1fb      	bne.n	1937c <net_buf_frag_add+0x10>
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);
   19384:	f7ff ffe7 	bl	19356 <net_buf_frag_insert>

	return head;
   19388:	4620      	mov	r0, r4
}
   1938a:	bd10      	pop	{r4, pc}

0001938c <net_buf_frag_del>:
				       struct net_buf *frag,
				       const char *func, int line)
#else
struct net_buf *net_buf_frag_del(struct net_buf *parent, struct net_buf *frag)
#endif
{
   1938c:	b510      	push	{r4, lr}
	struct net_buf *next_frag;

	NET_BUF_ASSERT(frag);

	if (parent) {
   1938e:	b108      	cbz	r0, 19394 <net_buf_frag_del+0x8>
		NET_BUF_ASSERT(parent->frags);
		NET_BUF_ASSERT(parent->frags == frag);
		parent->frags = frag->frags;
   19390:	680b      	ldr	r3, [r1, #0]
   19392:	6003      	str	r3, [r0, #0]
	}

	next_frag = frag->frags;
   19394:	680c      	ldr	r4, [r1, #0]

	frag->frags = NULL;
   19396:	2300      	movs	r3, #0

#if defined(CONFIG_NET_BUF_LOG)
	net_buf_unref_debug(frag, func, line);
#else
	net_buf_unref(frag);
   19398:	4608      	mov	r0, r1
	frag->frags = NULL;
   1939a:	600b      	str	r3, [r1, #0]
	net_buf_unref(frag);
   1939c:	f7ff ffa4 	bl	192e8 <net_buf_unref>
#endif

	return next_frag;
}
   193a0:	4620      	mov	r0, r4
   193a2:	bd10      	pop	{r4, pc}

000193a4 <net_buf_simple_add>:
	return buf->data + buf->len;
   193a4:	8883      	ldrh	r3, [r0, #4]
   193a6:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   193a8:	4419      	add	r1, r3
   193aa:	8081      	strh	r1, [r0, #4]
	return tail;
}
   193ac:	18d0      	adds	r0, r2, r3
   193ae:	4770      	bx	lr

000193b0 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   193b0:	b430      	push	{r4, r5}
   193b2:	8883      	ldrh	r3, [r0, #4]
   193b4:	6804      	ldr	r4, [r0, #0]
	buf->len += len;
   193b6:	189d      	adds	r5, r3, r2
   193b8:	8085      	strh	r5, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   193ba:	18e0      	adds	r0, r4, r3
}
   193bc:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   193be:	f7e7 b9e8 	b.w	792 <memcpy>

000193c2 <net_buf_simple_add_u8>:
   193c2:	8883      	ldrh	r3, [r0, #4]
   193c4:	6802      	ldr	r2, [r0, #0]

u8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, u8_t val)
{
   193c6:	b510      	push	{r4, lr}
	buf->len += len;
   193c8:	1c5c      	adds	r4, r3, #1
   193ca:	8084      	strh	r4, [r0, #4]
	u8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   193cc:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   193ce:	18d0      	adds	r0, r2, r3
   193d0:	bd10      	pop	{r4, pc}

000193d2 <net_buf_simple_add_le16>:

void net_buf_simple_add_le16(struct net_buf_simple *buf, u16_t val)
{
   193d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   193d4:	ab02      	add	r3, sp, #8
   193d6:	8884      	ldrh	r4, [r0, #4]
   193d8:	f823 1d02 	strh.w	r1, [r3, #-2]!
   193dc:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   193de:	1ca2      	adds	r2, r4, #2
   193e0:	8082      	strh	r2, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_le16(val);
	memcpy(net_buf_simple_add(buf, sizeof(val)), &val, sizeof(val));
   193e2:	4619      	mov	r1, r3
   193e4:	2202      	movs	r2, #2
   193e6:	1928      	adds	r0, r5, r4
   193e8:	f7e7 f9d3 	bl	792 <memcpy>
}
   193ec:	b003      	add	sp, #12
   193ee:	bd30      	pop	{r4, r5, pc}

000193f0 <net_buf_simple_add_be16>:

void net_buf_simple_add_be16(struct net_buf_simple *buf, u16_t val)
{
   193f0:	b513      	push	{r0, r1, r4, lr}
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_be16(val);
   193f2:	020b      	lsls	r3, r1, #8
   193f4:	ea43 2311 	orr.w	r3, r3, r1, lsr #8
   193f8:	a902      	add	r1, sp, #8
   193fa:	6804      	ldr	r4, [r0, #0]
   193fc:	f821 3d02 	strh.w	r3, [r1, #-2]!
   19400:	8883      	ldrh	r3, [r0, #4]
	buf->len += len;
   19402:	1c9a      	adds	r2, r3, #2
   19404:	8082      	strh	r2, [r0, #4]
	memcpy(net_buf_simple_add(buf, sizeof(val)), &val, sizeof(val));
   19406:	2202      	movs	r2, #2
   19408:	18e0      	adds	r0, r4, r3
   1940a:	f7e7 f9c2 	bl	792 <memcpy>
}
   1940e:	b002      	add	sp, #8
   19410:	bd10      	pop	{r4, pc}

00019412 <net_buf_simple_push>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   19412:	6803      	ldr	r3, [r0, #0]
	buf->len += len;
   19414:	8882      	ldrh	r2, [r0, #4]
	buf->data -= len;
   19416:	1a5b      	subs	r3, r3, r1
	buf->len += len;
   19418:	4411      	add	r1, r2
	buf->data -= len;
   1941a:	6003      	str	r3, [r0, #0]
	buf->len += len;
   1941c:	8081      	strh	r1, [r0, #4]
	return buf->data;
}
   1941e:	4618      	mov	r0, r3
   19420:	4770      	bx	lr

00019422 <net_buf_simple_push_le16>:

void net_buf_simple_push_le16(struct net_buf_simple *buf, u16_t val)
{
   19422:	b513      	push	{r0, r1, r4, lr}
   19424:	ac02      	add	r4, sp, #8
	buf->data -= len;
   19426:	6803      	ldr	r3, [r0, #0]
	buf->len += len;
   19428:	8882      	ldrh	r2, [r0, #4]
{
   1942a:	f824 1d02 	strh.w	r1, [r4, #-2]!
	buf->data -= len;
   1942e:	3b02      	subs	r3, #2
	buf->len += len;
   19430:	3202      	adds	r2, #2
	buf->data -= len;
   19432:	6003      	str	r3, [r0, #0]
	buf->len += len;
   19434:	8082      	strh	r2, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_le16(val);
	memcpy(net_buf_simple_push(buf, sizeof(val)), &val, sizeof(val));
   19436:	4621      	mov	r1, r4
   19438:	2202      	movs	r2, #2
   1943a:	4618      	mov	r0, r3
   1943c:	f7e7 f9a9 	bl	792 <memcpy>
}
   19440:	b002      	add	sp, #8
   19442:	bd10      	pop	{r4, pc}

00019444 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
   19444:	8883      	ldrh	r3, [r0, #4]
   19446:	1a5b      	subs	r3, r3, r1
   19448:	8083      	strh	r3, [r0, #4]
	return buf->data += len;
   1944a:	6803      	ldr	r3, [r0, #0]
   1944c:	4419      	add	r1, r3
   1944e:	6001      	str	r1, [r0, #0]
}
   19450:	4608      	mov	r0, r1
   19452:	4770      	bx	lr

00019454 <net_buf_simple_pull_u8>:

u8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   19454:	b508      	push	{r3, lr}
	u8_t val;

	val = buf->data[0];
   19456:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
   19458:	2101      	movs	r1, #1
	val = buf->data[0];
   1945a:	781a      	ldrb	r2, [r3, #0]
	net_buf_simple_pull(buf, 1);
   1945c:	f7ff fff2 	bl	19444 <net_buf_simple_pull>

	return val;
}
   19460:	4610      	mov	r0, r2
   19462:	bd08      	pop	{r3, pc}

00019464 <net_buf_simple_pull_le16>:

u16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   19464:	b508      	push	{r3, lr}
	u16_t val;

	val = UNALIGNED_GET((u16_t *)buf->data);
   19466:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   19468:	2102      	movs	r1, #2
	val = UNALIGNED_GET((u16_t *)buf->data);
   1946a:	881a      	ldrh	r2, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1946c:	f7ff ffea 	bl	19444 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   19470:	4610      	mov	r0, r2
   19472:	bd08      	pop	{r3, pc}

00019474 <net_buf_simple_headroom>:
	return sys_be32_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   19474:	6802      	ldr	r2, [r0, #0]
   19476:	6880      	ldr	r0, [r0, #8]
}
   19478:	1a10      	subs	r0, r2, r0
   1947a:	4770      	bx	lr

0001947c <net_buf_simple_tailroom>:
	return buf->data - buf->__buf;
   1947c:	6802      	ldr	r2, [r0, #0]
   1947e:	6881      	ldr	r1, [r0, #8]

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   19480:	88c3      	ldrh	r3, [r0, #6]
   19482:	8880      	ldrh	r0, [r0, #4]
	return buf->data - buf->__buf;
   19484:	1a52      	subs	r2, r2, r1
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   19486:	1a9b      	subs	r3, r3, r2
}
   19488:	1a18      	subs	r0, r3, r0
   1948a:	4770      	bx	lr

0001948c <sys_get_be32>:
	return ((u16_t)src[0] << 8) | src[1];
   1948c:	7803      	ldrb	r3, [r0, #0]
   1948e:	7842      	ldrb	r2, [r0, #1]
   19490:	7881      	ldrb	r1, [r0, #2]
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   19492:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	return ((u16_t)src[0] << 8) | src[1];
   19496:	78c3      	ldrb	r3, [r0, #3]
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   19498:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
}
   1949c:	ea43 4002 	orr.w	r0, r3, r2, lsl #16
   194a0:	4770      	bx	lr

000194a2 <net_is_ipv6_addr_unspecified>:
 *
 *  @return True if the address is unspecified, false otherwise.
 */
static inline bool net_is_ipv6_addr_unspecified(const struct in6_addr *addr)
{
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   194a2:	6802      	ldr	r2, [r0, #0]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   194a4:	b942      	cbnz	r2, 194b8 <net_is_ipv6_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   194a6:	6843      	ldr	r3, [r0, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   194a8:	b933      	cbnz	r3, 194b8 <net_is_ipv6_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   194aa:	6882      	ldr	r2, [r0, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   194ac:	b922      	cbnz	r2, 194b8 <net_is_ipv6_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   194ae:	68c0      	ldr	r0, [r0, #12]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   194b0:	fab0 f080 	clz	r0, r0
   194b4:	0940      	lsrs	r0, r0, #5
   194b6:	4770      	bx	lr
   194b8:	2000      	movs	r0, #0
   194ba:	4770      	bx	lr

000194bc <check_used_port>:

static int check_used_port(enum net_ip_protocol ip_proto,
			   u16_t local_port,
			   const struct sockaddr *local_addr)

{
   194bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   194c0:	4c17      	ldr	r4, [pc, #92]	; (19520 <check_used_port+0x64>)
   194c2:	4607      	mov	r7, r0
   194c4:	4688      	mov	r8, r1
   194c6:	4615      	mov	r5, r2
   194c8:	f504 761c 	add.w	r6, r4, #624	; 0x270

		if (local_addr->sa_family == AF_INET6) {
			if (net_ipv6_addr_cmp(
				    net_sin6_ptr(&contexts[i].local)->
							     sin6_addr,
				    &((struct sockaddr_in6 *)
   194cc:	f102 0904 	add.w	r9, r2, #4
   194d0:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
		if (!net_context_is_used(&contexts[i])) {
   194d4:	07da      	lsls	r2, r3, #31
   194d6:	d405      	bmi.n	194e4 <check_used_port+0x28>
   194d8:	3468      	adds	r4, #104	; 0x68
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   194da:	42a6      	cmp	r6, r4
   194dc:	d1f8      	bne.n	194d0 <check_used_port+0x14>
				return -EEXIST;
			}
		}
	}

	return 0;
   194de:	2000      	movs	r0, #0
   194e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
enum net_ip_protocol net_context_get_ip_proto(struct net_context *context)
{
	NET_ASSERT(context);

	if (context->flags & NET_CONTEXT_PROTO) {
		return IPPROTO_TCP;
   194e4:	f013 0f40 	tst.w	r3, #64	; 0x40
   194e8:	bf0c      	ite	eq
   194ea:	2311      	moveq	r3, #17
   194ec:	2306      	movne	r3, #6
		if (!(net_context_get_ip_proto(&contexts[i]) == ip_proto &&
   194ee:	42bb      	cmp	r3, r7
   194f0:	d1f2      	bne.n	194d8 <check_used_port+0x1c>
   194f2:	8963      	ldrh	r3, [r4, #10]
   194f4:	4543      	cmp	r3, r8
   194f6:	d1ef      	bne.n	194d8 <check_used_port+0x1c>
		if (local_addr->sa_family == AF_INET6) {
   194f8:	882b      	ldrh	r3, [r5, #0]
   194fa:	2b0a      	cmp	r3, #10
   194fc:	d10a      	bne.n	19514 <check_used_port+0x58>
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   194fe:	2210      	movs	r2, #16
   19500:	4649      	mov	r1, r9
   19502:	68e0      	ldr	r0, [r4, #12]
   19504:	f7e7 f918 	bl	738 <memcmp>
			if (net_ipv6_addr_cmp(
   19508:	2800      	cmp	r0, #0
   1950a:	d1e5      	bne.n	194d8 <check_used_port+0x1c>
				return -EEXIST;
   1950c:	f06f 0010 	mvn.w	r0, #16
   19510:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
   19514:	68e3      	ldr	r3, [r4, #12]
   19516:	681a      	ldr	r2, [r3, #0]
   19518:	686b      	ldr	r3, [r5, #4]
			if (net_ipv4_addr_cmp(
   1951a:	429a      	cmp	r2, r3
   1951c:	d1dc      	bne.n	194d8 <check_used_port+0x1c>
   1951e:	e7f5      	b.n	1950c <check_used_port+0x50>
   19520:	200023d0 	.word	0x200023d0

00019524 <find_available_port>:
}

static u16_t find_available_port(struct net_context *context,
				    const struct sockaddr *addr)
{
   19524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u16_t local_port;

	do {
		local_port = sys_rand32_get() | 0x8000;
   19526:	4f0c      	ldr	r7, [pc, #48]	; (19558 <find_available_port+0x34>)
{
   19528:	4606      	mov	r6, r0
   1952a:	460d      	mov	r5, r1
		local_port = sys_rand32_get() | 0x8000;
   1952c:	f7e9 f970 	bl	2810 <sys_rand32_get>
	if (context->flags & NET_CONTEXT_PROTO) {
   19530:	f896 305d 	ldrb.w	r3, [r6, #93]	; 0x5d
   19534:	ea40 0407 	orr.w	r4, r0, r7
   19538:	ba64      	rev16	r4, r4
		return IPPROTO_TCP;
   1953a:	f013 0f40 	tst.w	r3, #64	; 0x40
   1953e:	b2a4      	uxth	r4, r4
		if (local_port <= 1023) {
			/* 0 - 1023 ports are reserved */
			continue;
		}
	} while (check_used_port(
   19540:	bf0c      	ite	eq
   19542:	2011      	moveq	r0, #17
   19544:	2006      	movne	r0, #6
   19546:	462a      	mov	r2, r5
   19548:	4621      	mov	r1, r4
   1954a:	f7ff ffb7 	bl	194bc <check_used_port>
				net_context_get_ip_proto(context),
				htons(local_port), addr) == -EEXIST);
   1954e:	3011      	adds	r0, #17
   19550:	d0ec      	beq.n	1952c <find_available_port+0x8>

	return htons(local_port);
}
   19552:	4620      	mov	r0, r4
   19554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19556:	bf00      	nop
   19558:	ffff8000 	.word	0xffff8000

0001955c <tcp_backlog_find>:
{
   1955c:	b570      	push	{r4, r5, r6, lr}
		if (tcp_backlog[i].tcp == NULL && empty < 0) {
   1955e:	4c19      	ldr	r4, [pc, #100]	; (195c4 <tcp_backlog_find+0x68>)
   19560:	6823      	ldr	r3, [r4, #0]
{
   19562:	b086      	sub	sp, #24
   19564:	4605      	mov	r5, r0
   19566:	460e      	mov	r6, r1
		if (tcp_backlog[i].tcp == NULL && empty < 0) {
   19568:	b143      	cbz	r3, 1957c <tcp_backlog_find+0x20>
#endif
}

static inline u8_t net_pkt_family(struct net_pkt *pkt)
{
	return pkt->family;
   1956a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
		if (net_pkt_family(pkt) != tcp_backlog[i].remote.sa_family) {
   1956e:	88a2      	ldrh	r2, [r4, #4]
   19570:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   19574:	4293      	cmp	r3, r2
   19576:	d006      	beq.n	19586 <tcp_backlog_find+0x2a>
	int i, empty = -1;
   19578:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	if (empty_slot) {
   1957c:	b106      	cbz	r6, 19580 <tcp_backlog_find+0x24>
		*empty_slot = empty;
   1957e:	6033      	str	r3, [r6, #0]
	return -EADDRNOTAVAIL;
   19580:	f06f 0030 	mvn.w	r0, #48	; 0x30
   19584:	e017      	b.n	195b6 <tcp_backlog_find+0x5a>
		tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   19586:	a901      	add	r1, sp, #4
   19588:	f006 fee4 	bl	20354 <net_tcp_get_hdr>
		if (!tcp_hdr) {
   1958c:	b1a8      	cbz	r0, 195ba <tcp_backlog_find+0x5e>
   1958e:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
		switch (net_pkt_family(pkt)) {
   19592:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   19596:	2b0a      	cmp	r3, #10
   19598:	d112      	bne.n	195c0 <tcp_backlog_find+0x64>
			if (net_sin6(&tcp_backlog[i].remote)->sin6_port !=
   1959a:	88e2      	ldrh	r2, [r4, #6]
   1959c:	8803      	ldrh	r3, [r0, #0]
   1959e:	429a      	cmp	r2, r3
   195a0:	d1ea      	bne.n	19578 <tcp_backlog_find+0x1c>
	return net_buf_frags_len(pkt->frags);
}

static inline u8_t *net_pkt_ip_data(struct net_pkt *pkt)
{
	return pkt->frags->data;
   195a2:	68ab      	ldr	r3, [r5, #8]
				   &NET_IPV6_HDR(pkt)->src,
   195a4:	6899      	ldr	r1, [r3, #8]
			if (memcmp(&net_sin6(&tcp_backlog[i].remote)->sin6_addr,
   195a6:	2210      	movs	r2, #16
   195a8:	3108      	adds	r1, #8
   195aa:	f104 0008 	add.w	r0, r4, #8
   195ae:	f7e7 f8c3 	bl	738 <memcmp>
   195b2:	2800      	cmp	r0, #0
   195b4:	d1e0      	bne.n	19578 <tcp_backlog_find+0x1c>
}
   195b6:	b006      	add	sp, #24
   195b8:	bd70      	pop	{r4, r5, r6, pc}
			return -EINVAL;
   195ba:	f06f 0015 	mvn.w	r0, #21
   195be:	e7fa      	b.n	195b6 <tcp_backlog_find+0x5a>
	for (i = 0; i < CONFIG_NET_TCP_BACKLOG_SIZE; i++) {
   195c0:	2000      	movs	r0, #0
   195c2:	e7f8      	b.n	195b6 <tcp_backlog_find+0x5a>
   195c4:	20002658 	.word	0x20002658

000195c8 <send_reset.isra.25>:
	}

	return ret;
}

static int send_reset(struct net_context *context,
   195c8:	b513      	push	{r0, r1, r4, lr}
		      struct sockaddr *local,
		      struct sockaddr *remote)
{
	struct net_pkt *pkt = NULL;
   195ca:	ab02      	add	r3, sp, #8
   195cc:	2400      	movs	r4, #0
   195ce:	f843 4d04 	str.w	r4, [r3, #-4]!
	int ret;

	ret = net_tcp_prepare_reset(context->tcp, local, remote, &pkt);
   195d2:	f006 fcf0 	bl	1ffb6 <net_tcp_prepare_reset>
	if (ret || !pkt) {
   195d6:	4604      	mov	r4, r0
   195d8:	b940      	cbnz	r0, 195ec <send_reset.isra.25+0x24>
   195da:	9801      	ldr	r0, [sp, #4]
   195dc:	b130      	cbz	r0, 195ec <send_reset.isra.25+0x24>
		return ret;
	}

	print_send_info(pkt, "RST");

	ret = net_send_data(pkt);
   195de:	f000 ffe9 	bl	1a5b4 <net_send_data>
	if (ret < 0) {
   195e2:	1e04      	subs	r4, r0, #0
   195e4:	da02      	bge.n	195ec <send_reset.isra.25+0x24>
		net_pkt_unref(pkt);
   195e6:	9801      	ldr	r0, [sp, #4]
   195e8:	f002 f94d 	bl	1b886 <net_pkt_unref>
	}

	return ret;
}
   195ec:	4620      	mov	r0, r4
   195ee:	b002      	add	sp, #8
   195f0:	bd10      	pop	{r4, pc}

000195f2 <backlog_ack_timeout>:
{
   195f2:	b510      	push	{r4, lr}
	send_reset(backlog->tcp->context, NULL, &backlog->remote);
   195f4:	f850 3c28 	ldr.w	r3, [r0, #-40]
   195f8:	681b      	ldr	r3, [r3, #0]
   195fa:	f1a0 0428 	sub.w	r4, r0, #40	; 0x28
   195fe:	f1a0 0224 	sub.w	r2, r0, #36	; 0x24
   19602:	2100      	movs	r1, #0
   19604:	6e18      	ldr	r0, [r3, #96]	; 0x60
   19606:	f7ff ffdf 	bl	195c8 <send_reset.isra.25>
	memset(backlog, 0, sizeof(struct tcp_backlog_entry));
   1960a:	4620      	mov	r0, r4
   1960c:	2250      	movs	r2, #80	; 0x50
   1960e:	2100      	movs	r1, #0
}
   19610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	memset(backlog, 0, sizeof(struct tcp_backlog_entry));
   19614:	f7e7 b8e9 	b.w	7ea <memset>

00019618 <send_syn_segment.isra.26>:
static inline int send_syn_segment(struct net_context *context,
   19618:	b570      	push	{r4, r5, r6, lr}
   1961a:	b086      	sub	sp, #24
   1961c:	4605      	mov	r5, r0
	struct net_pkt *pkt = NULL;
   1961e:	a806      	add	r0, sp, #24
   19620:	2400      	movs	r4, #0
   19622:	f840 4d04 	str.w	r4, [r0, #-4]!
	ret = net_tcp_prepare_segment(context->tcp, flags, NULL, 0,
   19626:	b2de      	uxtb	r6, r3
   19628:	e88d 0006 	stmia.w	sp, {r1, r2}
   1962c:	9002      	str	r0, [sp, #8]
   1962e:	4623      	mov	r3, r4
   19630:	4622      	mov	r2, r4
   19632:	4631      	mov	r1, r6
   19634:	6828      	ldr	r0, [r5, #0]
   19636:	f006 fd8d 	bl	20154 <net_tcp_prepare_segment>
	if (ret) {
   1963a:	4604      	mov	r4, r0
   1963c:	b938      	cbnz	r0, 1964e <send_syn_segment.isra.26+0x36>
	ret = net_send_data(pkt);
   1963e:	9805      	ldr	r0, [sp, #20]
   19640:	f000 ffb8 	bl	1a5b4 <net_send_data>
	if (ret < 0) {
   19644:	1e04      	subs	r4, r0, #0
   19646:	da05      	bge.n	19654 <send_syn_segment.isra.26+0x3c>
		net_pkt_unref(pkt);
   19648:	9805      	ldr	r0, [sp, #20]
   1964a:	f002 f91c 	bl	1b886 <net_pkt_unref>
}
   1964e:	4620      	mov	r0, r4
   19650:	b006      	add	sp, #24
   19652:	bd70      	pop	{r4, r5, r6, pc}
	context->tcp->send_seq++;
   19654:	682a      	ldr	r2, [r5, #0]
   19656:	f8d2 30b0 	ldr.w	r3, [r2, #176]	; 0xb0
   1965a:	3301      	adds	r3, #1
   1965c:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
   19660:	e7f5      	b.n	1964e <send_syn_segment.isra.26+0x36>

00019662 <send_ack.isra.27>:
static int send_ack(struct net_context *context,
   19662:	b513      	push	{r0, r1, r4, lr}
	struct net_pkt *pkt = NULL;
   19664:	2300      	movs	r3, #0
   19666:	9301      	str	r3, [sp, #4]
	if (!force && context->tcp->send_ack == context->tcp->sent_ack) {
   19668:	b92a      	cbnz	r2, 19676 <send_ack.isra.27+0x14>
   1966a:	f8d0 40b4 	ldr.w	r4, [r0, #180]	; 0xb4
   1966e:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   19672:	429c      	cmp	r4, r3
   19674:	d00f      	beq.n	19696 <send_ack.isra.27+0x34>
	ret = net_tcp_prepare_ack(context->tcp, remote, &pkt);
   19676:	aa01      	add	r2, sp, #4
   19678:	f006 fdd8 	bl	2022c <net_tcp_prepare_ack>
	if (ret) {
   1967c:	4604      	mov	r4, r0
   1967e:	b938      	cbnz	r0, 19690 <send_ack.isra.27+0x2e>
	ret = net_tcp_send_pkt(pkt);
   19680:	9801      	ldr	r0, [sp, #4]
   19682:	f007 f872 	bl	2076a <net_tcp_send_pkt>
	if (ret < 0) {
   19686:	1e04      	subs	r4, r0, #0
   19688:	da02      	bge.n	19690 <send_ack.isra.27+0x2e>
		net_pkt_unref(pkt);
   1968a:	9801      	ldr	r0, [sp, #4]
   1968c:	f002 f8fb 	bl	1b886 <net_pkt_unref>
}
   19690:	4620      	mov	r0, r4
   19692:	b002      	add	sp, #8
   19694:	bd10      	pop	{r4, pc}
		return 0;
   19696:	4614      	mov	r4, r2
   19698:	e7fa      	b.n	19690 <send_ack.isra.27+0x2e>

0001969a <set_appdata_values>:

	return sendto(pkt, dst_addr, addrlen, cb, timeout, token, user_data);
}

static void set_appdata_values(struct net_pkt *pkt, enum net_ip_protocol proto)
{
   1969a:	b570      	push	{r4, r5, r6, lr}
   1969c:	6884      	ldr	r4, [r0, #8]
   1969e:	b086      	sub	sp, #24
   196a0:	4605      	mov	r5, r0
	size_t bytes = 0;
   196a2:	2600      	movs	r6, #0
	while (buf) {
   196a4:	bb3c      	cbnz	r4, 196f6 <set_appdata_values+0x5c>
	u16_t proto_len = 0;
	struct net_buf *frag;
	u16_t offset;

#if defined(CONFIG_NET_UDP)
	if (proto == IPPROTO_UDP) {
   196a6:	2911      	cmp	r1, #17
   196a8:	d029      	beq.n	196fe <set_appdata_values+0x64>
		proto_len = sizeof(struct net_udp_hdr);
	}
#endif /* CONFIG_NET_UDP */

#if defined(CONFIG_NET_TCP)
	if (proto == IPPROTO_TCP) {
   196aa:	2906      	cmp	r1, #6
   196ac:	d108      	bne.n	196c0 <set_appdata_values+0x26>
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   196ae:	a901      	add	r1, sp, #4
   196b0:	4628      	mov	r0, r5
   196b2:	f006 fe4f 	bl	20354 <net_tcp_get_hdr>
	if (tcp_hdr) {
   196b6:	b110      	cbz	r0, 196be <set_appdata_values+0x24>
		return NET_TCP_HDR_LEN(tcp_hdr);
   196b8:	7b04      	ldrb	r4, [r0, #12]
   196ba:	0924      	lsrs	r4, r4, #4
   196bc:	00a4      	lsls	r4, r4, #2
		proto_len = tcp_hdr_len(pkt);
   196be:	b2a4      	uxth	r4, r4
	}
#endif /* CONFIG_NET_TCP */

	frag = net_frag_get_pos(pkt, net_pkt_ip_hdr_len(pkt) +
   196c0:	f895 1035 	ldrb.w	r1, [r5, #53]	; 0x35
				net_pkt_ipv6_ext_len(pkt) +
   196c4:	f895 303f 	ldrb.w	r3, [r5, #63]	; 0x3f
	frag = net_frag_get_pos(pkt, net_pkt_ip_hdr_len(pkt) +
   196c8:	4419      	add	r1, r3
   196ca:	4421      	add	r1, r4
   196cc:	aa01      	add	r2, sp, #4
   196ce:	b289      	uxth	r1, r1
   196d0:	4628      	mov	r0, r5
   196d2:	f002 fb1a 	bl	1bd0a <net_frag_get_pos>
				proto_len,
				&offset);
	if (frag) {
   196d6:	b120      	cbz	r0, 196e2 <set_appdata_values+0x48>
		net_pkt_set_appdata(pkt, frag->data + offset);
   196d8:	6883      	ldr	r3, [r0, #8]
   196da:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   196de:	4413      	add	r3, r2
	return pkt->appdata;
}

static inline void net_pkt_set_appdata(struct net_pkt *pkt, u8_t *data)
{
	pkt->appdata = data;
   196e0:	61ab      	str	r3, [r5, #24]
	}

	net_pkt_set_appdatalen(pkt, total_len - net_pkt_ip_hdr_len(pkt) -
   196e2:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
   196e6:	1af6      	subs	r6, r6, r3
			       net_pkt_ipv6_ext_len(pkt) - proto_len);
   196e8:	f895 303f 	ldrb.w	r3, [r5, #63]	; 0x3f
	net_pkt_set_appdatalen(pkt, total_len - net_pkt_ip_hdr_len(pkt) -
   196ec:	1af6      	subs	r6, r6, r3
   196ee:	1b34      	subs	r4, r6, r4
	return pkt->appdatalen;
}

static inline void net_pkt_set_appdatalen(struct net_pkt *pkt, u16_t len)
{
	pkt->appdatalen = len;
   196f0:	866c      	strh	r4, [r5, #50]	; 0x32

	NET_ASSERT_INFO(net_pkt_appdatalen(pkt) < total_len,
			"Wrong appdatalen %u, total %zu",
			net_pkt_appdatalen(pkt), total_len);
}
   196f2:	b006      	add	sp, #24
   196f4:	bd70      	pop	{r4, r5, r6, pc}
		bytes += buf->len;
   196f6:	89a3      	ldrh	r3, [r4, #12]
		buf = buf->frags;
   196f8:	6824      	ldr	r4, [r4, #0]
		bytes += buf->len;
   196fa:	441e      	add	r6, r3
   196fc:	e7d2      	b.n	196a4 <set_appdata_values+0xa>
		proto_len = sizeof(struct net_udp_hdr);
   196fe:	2408      	movs	r4, #8
   19700:	e7de      	b.n	196c0 <set_appdata_values+0x26>
	...

00019704 <packet_received>:

static enum net_verdict packet_received(struct net_conn *conn,
					struct net_pkt *pkt,
					void *user_data)
{
   19704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19708:	4c20      	ldr	r4, [pc, #128]	; (1978c <packet_received+0x88>)
   1970a:	460d      	mov	r5, r1
   1970c:	4691      	mov	r9, r2
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1970e:	2600      	movs	r6, #0
   19710:	46a0      	mov	r8, r4
   19712:	2368      	movs	r3, #104	; 0x68
		if (!net_context_is_used(&contexts[i])) {
   19714:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
   19718:	07d2      	lsls	r2, r2, #31
   1971a:	fb03 f706 	mul.w	r7, r3, r6
   1971e:	d502      	bpl.n	19726 <packet_received+0x22>
		if (contexts[i].conn_handler == conn_handler) {
   19720:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   19722:	4290      	cmp	r0, r2
   19724:	d00b      	beq.n	1973e <packet_received+0x3a>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   19726:	3601      	adds	r6, #1
   19728:	2e06      	cmp	r6, #6
   1972a:	f104 0468 	add.w	r4, r4, #104	; 0x68
   1972e:	d1f1      	bne.n	19714 <packet_received+0x10>
static inline void net_context_set_iface(struct net_context *context,
					 struct net_if *iface)
{
	NET_ASSERT(iface);

	context->iface = net_if_get_by_iface(iface);
   19730:	6968      	ldr	r0, [r5, #20]
   19732:	f001 fe83 	bl	1b43c <net_if_get_by_iface>
   19736:	2300      	movs	r3, #0
   19738:	f883 305c 	strb.w	r3, [r3, #92]	; 0x5c
   1973c:	deff      	udf	#255	; 0xff
   1973e:	6968      	ldr	r0, [r5, #20]
   19740:	f001 fe7c 	bl	1b43c <net_if_get_by_iface>

	/* If there is no callback registered, then we can only drop
	 * the packet.
	 */

	if (!context->recv_cb) {
   19744:	eb08 0307 	add.w	r3, r8, r7
   19748:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
	pkt->context = ctx;
   1974c:	60ec      	str	r4, [r5, #12]
   1974e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   19750:	b1a3      	cbz	r3, 1977c <packet_received+0x78>
	if (context->flags & NET_CONTEXT_PROTO) {
   19752:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   19756:	065b      	lsls	r3, r3, #25
   19758:	d513      	bpl.n	19782 <packet_received+0x7e>
		net_pkt_appdata(pkt), net_pkt_appdatalen(pkt),
		net_pkt_get_len(pkt));

	net_stats_update_tcp_recv(net_pkt_appdatalen(pkt));

	context->recv_cb(context, pkt, 0, user_data);
   1975a:	2368      	movs	r3, #104	; 0x68
   1975c:	fb03 8606 	mla	r6, r3, r6, r8
   19760:	2200      	movs	r2, #0
   19762:	464b      	mov	r3, r9
   19764:	4629      	mov	r1, r5
   19766:	4620      	mov	r0, r4
   19768:	6b36      	ldr	r6, [r6, #48]	; 0x30
   1976a:	47b0      	blx	r6

#if defined(CONFIG_NET_CONTEXT_SYNC_RECV)
	k_sem_give(&context->recv_data_wait);
   1976c:	f107 0044 	add.w	r0, r7, #68	; 0x44
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   19770:	4440      	add	r0, r8
   19772:	f008 fa1b 	bl	21bac <_impl_k_sem_give>
#endif /* CONFIG_NET_CONTEXT_SYNC_RECV */

	return NET_OK;
   19776:	2000      	movs	r0, #0
   19778:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return NET_DROP;
   1977c:	2002      	movs	r0, #2
   1977e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		set_appdata_values(pkt, IPPROTO_UDP);
   19782:	2111      	movs	r1, #17
   19784:	4628      	mov	r0, r5
   19786:	f7ff ff88 	bl	1969a <set_appdata_values>
   1978a:	e7e6      	b.n	1975a <packet_received+0x56>
   1978c:	200023d0 	.word	0x200023d0

00019790 <net_context_get>:
	if (family == AF_INET) {
   19790:	2802      	cmp	r0, #2
{
   19792:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19796:	468a      	mov	sl, r1
   19798:	4691      	mov	r9, r2
   1979a:	4698      	mov	r8, r3
	if (family == AF_INET) {
   1979c:	f000 808e 	beq.w	198bc <net_context_get+0x12c>
	if (family != AF_INET && family != AF_INET6) {
   197a0:	280a      	cmp	r0, #10
   197a2:	f040 808e 	bne.w	198c2 <net_context_get+0x132>
	if (type != SOCK_DGRAM && type != SOCK_STREAM) {
   197a6:	1e4b      	subs	r3, r1, #1
   197a8:	2b01      	cmp	r3, #1
   197aa:	f200 808d 	bhi.w	198c8 <net_context_get+0x138>
	if (ip_proto != IPPROTO_UDP && ip_proto != IPPROTO_TCP) {
   197ae:	2a11      	cmp	r2, #17
   197b0:	f000 8090 	beq.w	198d4 <net_context_get+0x144>
   197b4:	2a06      	cmp	r2, #6
   197b6:	f000 8092 	beq.w	198de <net_context_get+0x14e>
		return -EPROTONOSUPPORT;
   197ba:	f06f 042a 	mvn.w	r4, #42	; 0x2a
   197be:	e0ad      	b.n	1991c <net_context_get+0x18c>
		if (ip_proto == IPPROTO_TCP) {
   197c0:	f1b9 0f06 	cmp.w	r9, #6
   197c4:	d118      	bne.n	197f8 <net_context_get+0x68>
			contexts[i].tcp = net_tcp_alloc(&contexts[i]);
   197c6:	4620      	mov	r0, r4
   197c8:	f006 fb7a 	bl	1fec0 <net_tcp_alloc>
   197cc:	eb06 0b07 	add.w	fp, r6, r7
   197d0:	f8cb 0060 	str.w	r0, [fp, #96]	; 0x60
			if (!contexts[i].tcp) {
   197d4:	2800      	cmp	r0, #0
   197d6:	d06b      	beq.n	198b0 <net_context_get+0x120>
			k_delayed_work_init(&contexts[i].tcp->ack_timer,
   197d8:	4952      	ldr	r1, [pc, #328]	; (19924 <net_context_get+0x194>)
   197da:	3008      	adds	r0, #8
   197dc:	f008 fd12 	bl	22204 <k_delayed_work_init>
			k_delayed_work_init(&contexts[i].tcp->fin_timer,
   197e0:	f8db 0060 	ldr.w	r0, [fp, #96]	; 0x60
   197e4:	4950      	ldr	r1, [pc, #320]	; (19928 <net_context_get+0x198>)
   197e6:	3030      	adds	r0, #48	; 0x30
   197e8:	f008 fd0c 	bl	22204 <k_delayed_work_init>
			k_delayed_work_init(&contexts[i].tcp->timewait_timer,
   197ec:	f8db 0060 	ldr.w	r0, [fp, #96]	; 0x60
   197f0:	494e      	ldr	r1, [pc, #312]	; (1992c <net_context_get+0x19c>)
   197f2:	3080      	adds	r0, #128	; 0x80
   197f4:	f008 fd06 	bl	22204 <k_delayed_work_init>
		contexts[i].iface = 0;
   197f8:	2368      	movs	r3, #104	; 0x68
   197fa:	fb03 6305 	mla	r3, r3, r5, r6
   197fe:	2200      	movs	r2, #0
   19800:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
		contexts[i].flags = 0;
   19804:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   19808:	19f3      	adds	r3, r6, r7
   1980a:	3304      	adds	r3, #4
   1980c:	2201      	movs	r2, #1
   1980e:	f3bf 8f5b 	dmb	ish
   19812:	e853 1f00 	ldrex	r1, [r3]
   19816:	e843 2000 	strex	r0, r2, [r3]
   1981a:	2800      	cmp	r0, #0
   1981c:	d1f9      	bne.n	19812 <net_context_get+0x82>
   1981e:	f3bf 8f5b 	dmb	ish
		context->flags |= NET_CONTEXT_FAMILY;
   19822:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
	if (type == SOCK_STREAM) {
   19826:	f1ba 0f01 	cmp.w	sl, #1
		context->flags |= NET_CONTEXT_FAMILY;
   1982a:	f043 0210 	orr.w	r2, r3, #16
	context->flags &= ~NET_CONTEXT_TYPE;
   1982e:	bf16      	itet	ne
   19830:	f023 0320 	bicne.w	r3, r3, #32
		context->flags |= NET_CONTEXT_TYPE;
   19834:	f043 0330 	orreq.w	r3, r3, #48	; 0x30
	context->flags &= ~NET_CONTEXT_TYPE;
   19838:	f043 0310 	orrne.w	r3, r3, #16
		context->flags |= NET_CONTEXT_FAMILY;
   1983c:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
	context->flags &= ~NET_CONTEXT_TYPE;
   19840:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
   19844:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
	if (ip_proto == IPPROTO_TCP) {
   19848:	f1b9 0f06 	cmp.w	r9, #6
		context->flags |= NET_CONTEXT_PROTO;
   1984c:	bf0c      	ite	eq
   1984e:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
	context->flags &= ~NET_CONTEXT_PROTO;
   19852:	f023 0340 	bicne.w	r3, r3, #64	; 0x40
		memset(&contexts[i].remote, 0, sizeof(struct sockaddr));
   19856:	f107 0014 	add.w	r0, r7, #20
		memset(&contexts[i].local, 0, sizeof(struct sockaddr_ptr));
   1985a:	f107 0908 	add.w	r9, r7, #8
   1985e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
   19862:	44b1      	add	r9, r6
		memset(&contexts[i].remote, 0, sizeof(struct sockaddr));
   19864:	2218      	movs	r2, #24
   19866:	2100      	movs	r1, #0
   19868:	4430      	add	r0, r6
   1986a:	f7e6 ffbe 	bl	7ea <memset>
		memset(&contexts[i].local, 0, sizeof(struct sockaddr_ptr));
   1986e:	220c      	movs	r2, #12
   19870:	2100      	movs	r1, #0
   19872:	4648      	mov	r0, r9
   19874:	f7e6 ffb9 	bl	7ea <memset>
			addr6->sin6_port = find_available_port(&contexts[i],
   19878:	4649      	mov	r1, r9
   1987a:	4620      	mov	r0, r4
   1987c:	f7ff fe52 	bl	19524 <find_available_port>
   19880:	f8a9 0002 	strh.w	r0, [r9, #2]
			if (!addr6->sin6_port) {
   19884:	b1b8      	cbz	r0, 198b6 <net_context_get+0x126>
		k_sem_init(&contexts[i].recv_data_wait, 1, UINT_MAX);
   19886:	f107 0044 	add.w	r0, r7, #68	; 0x44
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   1988a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1988e:	2101      	movs	r1, #1
   19890:	4430      	add	r0, r6
   19892:	f008 f981 	bl	21b98 <_impl_k_sem_init>
		contexts[i].flags |= NET_CONTEXT_IN_USE;
   19896:	2368      	movs	r3, #104	; 0x68
   19898:	fb03 6505 	mla	r5, r3, r5, r6
   1989c:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
   198a0:	f043 0301 	orr.w	r3, r3, #1
   198a4:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
		*context = &contexts[i];
   198a8:	f8c8 4000 	str.w	r4, [r8]
		ret = 0;
   198ac:	2400      	movs	r4, #0
   198ae:	e032      	b.n	19916 <net_context_get+0x186>
				ret = -ENOBUFS;
   198b0:	f06f 0436 	mvn.w	r4, #54	; 0x36
   198b4:	e02f      	b.n	19916 <net_context_get+0x186>
				ret = -EADDRINUSE;
   198b6:	f06f 042f 	mvn.w	r4, #47	; 0x2f
   198ba:	e02c      	b.n	19916 <net_context_get+0x186>
		return -EPFNOSUPPORT;
   198bc:	f06f 042d 	mvn.w	r4, #45	; 0x2d
   198c0:	e02c      	b.n	1991c <net_context_get+0x18c>
		return -EAFNOSUPPORT;
   198c2:	f06f 042e 	mvn.w	r4, #46	; 0x2e
   198c6:	e029      	b.n	1991c <net_context_get+0x18c>
		return -EPROTOTYPE;
   198c8:	f06f 0428 	mvn.w	r4, #40	; 0x28
   198cc:	e026      	b.n	1991c <net_context_get+0x18c>
		return -EINVAL;
   198ce:	f06f 0415 	mvn.w	r4, #21
   198d2:	e023      	b.n	1991c <net_context_get+0x18c>
	if ((type == SOCK_STREAM && ip_proto == IPPROTO_UDP) ||
   198d4:	2901      	cmp	r1, #1
   198d6:	d104      	bne.n	198e2 <net_context_get+0x152>
		return -EOPNOTSUPP;
   198d8:	f06f 042c 	mvn.w	r4, #44	; 0x2c
   198dc:	e01e      	b.n	1991c <net_context_get+0x18c>
	if ((type == SOCK_STREAM && ip_proto == IPPROTO_UDP) ||
   198de:	2901      	cmp	r1, #1
   198e0:	d1fa      	bne.n	198d8 <net_context_get+0x148>
	if (!context) {
   198e2:	f1b8 0f00 	cmp.w	r8, #0
   198e6:	d0f2      	beq.n	198ce <net_context_get+0x13e>
   198e8:	4c11      	ldr	r4, [pc, #68]	; (19930 <net_context_get+0x1a0>)
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   198ea:	4812      	ldr	r0, [pc, #72]	; (19934 <net_context_get+0x1a4>)
   198ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   198f0:	f008 f9bc 	bl	21c6c <_impl_k_sem_take>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   198f4:	2500      	movs	r5, #0
   198f6:	4626      	mov	r6, r4
   198f8:	2368      	movs	r3, #104	; 0x68
		if (net_context_is_used(&contexts[i])) {
   198fa:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
   198fe:	07d2      	lsls	r2, r2, #31
   19900:	fb03 f705 	mul.w	r7, r3, r5
   19904:	f57f af5c 	bpl.w	197c0 <net_context_get+0x30>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   19908:	3501      	adds	r5, #1
   1990a:	2d06      	cmp	r5, #6
   1990c:	f104 0468 	add.w	r4, r4, #104	; 0x68
   19910:	d1f3      	bne.n	198fa <net_context_get+0x16a>
	int i, ret = -ENOENT;
   19912:	f06f 0401 	mvn.w	r4, #1
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   19916:	4807      	ldr	r0, [pc, #28]	; (19934 <net_context_get+0x1a4>)
   19918:	f008 f948 	bl	21bac <_impl_k_sem_give>
}
   1991c:	4620      	mov	r0, r4
   1991e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19922:	bf00      	nop
   19924:	00019a13 	.word	0x00019a13
   19928:	00019a0b 	.word	0x00019a0b
   1992c:	000199d5 	.word	0x000199d5
   19930:	200023d0 	.word	0x200023d0
   19934:	20002640 	.word	0x20002640

00019938 <net_context_ref>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   19938:	1d03      	adds	r3, r0, #4
   1993a:	f3bf 8f5b 	dmb	ish
   1993e:	e853 0f00 	ldrex	r0, [r3]
   19942:	1c42      	adds	r2, r0, #1
   19944:	e843 2100 	strex	r1, r2, [r3]
   19948:	2900      	cmp	r1, #0
   1994a:	d1f8      	bne.n	1993e <net_context_ref+0x6>
   1994c:	f3bf 8f5b 	dmb	ish
}
   19950:	3001      	adds	r0, #1
   19952:	4770      	bx	lr

00019954 <net_context_unref>:
{
   19954:	b538      	push	{r3, r4, r5, lr}
   19956:	4604      	mov	r4, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   19958:	1d03      	adds	r3, r0, #4
   1995a:	f3bf 8f5b 	dmb	ish
   1995e:	e853 0f00 	ldrex	r0, [r3]
   19962:	1e42      	subs	r2, r0, #1
   19964:	e843 2100 	strex	r1, r2, [r3]
   19968:	2900      	cmp	r1, #0
   1996a:	d1f8      	bne.n	1995e <net_context_unref+0xa>
   1996c:	f3bf 8f5b 	dmb	ish
	if (old_rc != 1) {
   19970:	2801      	cmp	r0, #1
   19972:	d001      	beq.n	19978 <net_context_unref+0x24>
		return old_rc - 1;
   19974:	3801      	subs	r0, #1
   19976:	bd38      	pop	{r3, r4, r5, pc}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   19978:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1997c:	4813      	ldr	r0, [pc, #76]	; (199cc <net_context_unref+0x78>)
   1997e:	f008 f975 	bl	21c6c <_impl_k_sem_take>
	if (context->tcp) {
   19982:	6e23      	ldr	r3, [r4, #96]	; 0x60
   19984:	b18b      	cbz	r3, 199aa <net_context_unref+0x56>
			if (tcp_backlog[i].tcp != context->tcp) {
   19986:	4d12      	ldr	r5, [pc, #72]	; (199d0 <net_context_unref+0x7c>)
   19988:	682a      	ldr	r2, [r5, #0]
   1998a:	429a      	cmp	r2, r3
   1998c:	d108      	bne.n	199a0 <net_context_unref+0x4c>
			k_delayed_work_cancel(&tcp_backlog[i].ack_timer);
   1998e:	f105 0028 	add.w	r0, r5, #40	; 0x28
   19992:	f008 fc55 	bl	22240 <k_delayed_work_cancel>
			memset(&tcp_backlog[i], 0, sizeof(tcp_backlog[i]));
   19996:	2250      	movs	r2, #80	; 0x50
   19998:	2100      	movs	r1, #0
   1999a:	4628      	mov	r0, r5
   1999c:	f7e6 ff25 	bl	7ea <memset>
		net_tcp_release(context->tcp);
   199a0:	6e20      	ldr	r0, [r4, #96]	; 0x60
   199a2:	f006 fb7b 	bl	2009c <net_tcp_release>
		context->tcp = NULL;
   199a6:	2300      	movs	r3, #0
   199a8:	6623      	str	r3, [r4, #96]	; 0x60
	if (context->conn_handler) {
   199aa:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   199ac:	b118      	cbz	r0, 199b6 <net_context_unref+0x62>
		net_conn_unregister(context->conn_handler);
   199ae:	f006 f813 	bl	1f9d8 <net_conn_unregister>
		context->conn_handler = NULL;
   199b2:	2300      	movs	r3, #0
   199b4:	62e3      	str	r3, [r4, #44]	; 0x2c
	context->flags &= ~NET_CONTEXT_IN_USE;
   199b6:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   199ba:	4804      	ldr	r0, [pc, #16]	; (199cc <net_context_unref+0x78>)
   199bc:	f023 0307 	bic.w	r3, r3, #7
   199c0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
   199c4:	f008 f8f2 	bl	21bac <_impl_k_sem_give>
   199c8:	2000      	movs	r0, #0
}
   199ca:	bd38      	pop	{r3, r4, r5, pc}
   199cc:	20002640 	.word	0x20002640
   199d0:	20002658 	.word	0x20002658

000199d4 <handle_timewait_timeout>:
{
   199d4:	b538      	push	{r3, r4, r5, lr}
 *
 * @param tcp TCP context
 */
static inline enum net_tcp_state net_tcp_get_state(const struct net_tcp *tcp)
{
	return (enum net_tcp_state)tcp->state;
   199d6:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
	if (net_tcp_get_state(tcp) == NET_TCP_TIME_WAIT) {
   199d8:	f3c3 3343 	ubfx	r3, r3, #13, #4
   199dc:	2b09      	cmp	r3, #9
{
   199de:	4604      	mov	r4, r0
	if (net_tcp_get_state(tcp) == NET_TCP_TIME_WAIT) {
   199e0:	d112      	bne.n	19a08 <handle_timewait_timeout+0x34>
		net_tcp_change_state(tcp, NET_TCP_CLOSED);
   199e2:	3880      	subs	r0, #128	; 0x80
   199e4:	2100      	movs	r1, #0
   199e6:	f006 fb33 	bl	20050 <net_tcp_change_state>
		if (tcp->context->recv_cb) {
   199ea:	f854 0c80 	ldr.w	r0, [r4, #-128]
   199ee:	6b05      	ldr	r5, [r0, #48]	; 0x30
   199f0:	b125      	cbz	r5, 199fc <handle_timewait_timeout+0x28>
			tcp->context->recv_cb(tcp->context, NULL, 0,
   199f2:	2200      	movs	r2, #0
   199f4:	f854 3c7c 	ldr.w	r3, [r4, #-124]
   199f8:	4611      	mov	r1, r2
   199fa:	47a8      	blx	r5
		net_context_unref(tcp->context);
   199fc:	f854 0c80 	ldr.w	r0, [r4, #-128]
}
   19a00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_context_unref(tcp->context);
   19a04:	f7ff bfa6 	b.w	19954 <net_context_unref>
   19a08:	bd38      	pop	{r3, r4, r5, pc}

00019a0a <handle_fin_timeout>:
	net_context_unref(tcp->context);
   19a0a:	f850 0c30 	ldr.w	r0, [r0, #-48]
   19a0e:	f7ff bfa1 	b.w	19954 <net_context_unref>

00019a12 <handle_ack_timeout>:
   19a12:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
	if (net_tcp_get_state(tcp) == NET_TCP_LAST_ACK) {
   19a16:	f3c3 3343 	ubfx	r3, r3, #13, #4
   19a1a:	2b06      	cmp	r3, #6
{
   19a1c:	b510      	push	{r4, lr}
   19a1e:	4604      	mov	r4, r0
	if (net_tcp_get_state(tcp) == NET_TCP_LAST_ACK) {
   19a20:	d109      	bne.n	19a36 <handle_ack_timeout+0x24>
		net_tcp_change_state(tcp, NET_TCP_CLOSED);
   19a22:	3808      	subs	r0, #8
   19a24:	2100      	movs	r1, #0
   19a26:	f006 fb13 	bl	20050 <net_tcp_change_state>
		net_context_unref(tcp->context);
   19a2a:	f854 0c08 	ldr.w	r0, [r4, #-8]
}
   19a2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		net_context_unref(tcp->context);
   19a32:	f7ff bf8f 	b.w	19954 <net_context_unref>
   19a36:	bd10      	pop	{r4, pc}

00019a38 <tcp_established>:
NET_CONN_CB(tcp_established)
   19a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19a3c:	460f      	mov	r7, r1
   19a3e:	b087      	sub	sp, #28
   19a40:	4680      	mov	r8, r0
   19a42:	4610      	mov	r0, r2
   19a44:	4614      	mov	r4, r2
   19a46:	f7ff ff77 	bl	19938 <net_context_ref>
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   19a4a:	a901      	add	r1, sp, #4
   19a4c:	4638      	mov	r0, r7
   19a4e:	f006 fc81 	bl	20354 <net_tcp_get_hdr>
	if (!tcp_hdr) {
   19a52:	4605      	mov	r5, r0
   19a54:	b938      	cbnz	r0, 19a66 <tcp_established+0x2e>
		return NET_DROP;
   19a56:	2502      	movs	r5, #2
NET_CONN_CB(tcp_established)
   19a58:	4620      	mov	r0, r4
   19a5a:	f7ff ff7b 	bl	19954 <net_context_unref>
   19a5e:	4628      	mov	r0, r5
   19a60:	b007      	add	sp, #28
   19a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (net_tcp_get_state(context->tcp) < NET_TCP_ESTABLISHED) {
   19a66:	f8d4 b060 	ldr.w	fp, [r4, #96]	; 0x60
   19a6a:	f8db 30bc 	ldr.w	r3, [fp, #188]	; 0xbc
   19a6e:	f3c3 3343 	ubfx	r3, r3, #13, #4
   19a72:	2b03      	cmp	r3, #3
   19a74:	d9ef      	bls.n	19a56 <tcp_established+0x1e>
	if (net_tcp_seq_cmp(sys_get_be32(tcp_hdr->seq),
   19a76:	3004      	adds	r0, #4
   19a78:	f7ff fd08 	bl	1948c <sys_get_be32>
 *
 * @return < 0 if seq1 < seq2, 0 if seq1 == seq2, > 0 if seq > seq2
 */
static inline s32_t net_tcp_seq_cmp(u32_t seq1, u32_t seq2)
{
	return (s32_t)(seq1 - seq2);
   19a7c:	f8db 30b4 	ldr.w	r3, [fp, #180]	; 0xb4
   19a80:	eba0 0a03 	sub.w	sl, r0, r3
   19a84:	f1ba 0f00 	cmp.w	sl, #0
   19a88:	da05      	bge.n	19a96 <tcp_established+0x5e>
		send_ack(context, &conn->remote_addr, true);
   19a8a:	2201      	movs	r2, #1
   19a8c:	4641      	mov	r1, r8
   19a8e:	4658      	mov	r0, fp
   19a90:	f7ff fde7 	bl	19662 <send_ack.isra.27>
   19a94:	e7df      	b.n	19a56 <tcp_established+0x1e>
	if (net_tcp_seq_cmp(sys_get_be32(tcp_hdr->seq),
   19a96:	d1de      	bne.n	19a56 <tcp_established+0x1e>
	tcp_flags = NET_TCP_FLAGS(tcp_hdr);
   19a98:	7b6e      	ldrb	r6, [r5, #13]
	if (tcp_flags & NET_TCP_RST) {
   19a9a:	f016 0904 	ands.w	r9, r6, #4
   19a9e:	d012      	beq.n	19ac6 <tcp_established+0x8e>
		if (!net_tcp_validate_seq(context->tcp, pkt)) {
   19aa0:	4639      	mov	r1, r7
   19aa2:	4658      	mov	r0, fp
   19aa4:	f006 fd50 	bl	20548 <net_tcp_validate_seq>
   19aa8:	2800      	cmp	r0, #0
   19aaa:	d0d4      	beq.n	19a56 <tcp_established+0x1e>
		if (context->recv_cb) {
   19aac:	6b25      	ldr	r5, [r4, #48]	; 0x30
   19aae:	b135      	cbz	r5, 19abe <tcp_established+0x86>
			context->recv_cb(context, NULL, -ECONNRESET,
   19ab0:	6e23      	ldr	r3, [r4, #96]	; 0x60
   19ab2:	f06f 0235 	mvn.w	r2, #53	; 0x35
   19ab6:	685b      	ldr	r3, [r3, #4]
   19ab8:	4651      	mov	r1, sl
   19aba:	4620      	mov	r0, r4
   19abc:	47a8      	blx	r5
		net_context_unref(context);
   19abe:	4620      	mov	r0, r4
   19ac0:	f7ff ff48 	bl	19954 <net_context_unref>
   19ac4:	e7c7      	b.n	19a56 <tcp_established+0x1e>
	if (tcp_flags & NET_TCP_ACK) {
   19ac6:	06f3      	lsls	r3, r6, #27
   19ac8:	d517      	bpl.n	19afa <tcp_established+0xc2>
		if (!net_tcp_ack_received(context,
   19aca:	f105 0008 	add.w	r0, r5, #8
   19ace:	f7ff fcdd 	bl	1948c <sys_get_be32>
   19ad2:	4601      	mov	r1, r0
   19ad4:	4620      	mov	r0, r4
   19ad6:	f006 fcaf 	bl	20438 <net_tcp_ack_received>
   19ada:	2800      	cmp	r0, #0
   19adc:	d0bb      	beq.n	19a56 <tcp_established+0x1e>
		if (net_tcp_get_state(context->tcp)
   19ade:	6e20      	ldr	r0, [r4, #96]	; 0x60
   19ae0:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   19ae4:	f3c3 3343 	ubfx	r3, r3, #13, #4
   19ae8:	2b07      	cmp	r3, #7
   19aea:	d142      	bne.n	19b72 <tcp_established+0x13a>
			k_delayed_work_cancel(&context->tcp->fin_timer);
   19aec:	3030      	adds	r0, #48	; 0x30
   19aee:	f008 fba7 	bl	22240 <k_delayed_work_cancel>
			net_tcp_change_state(context->tcp, NET_TCP_FIN_WAIT_2);
   19af2:	2108      	movs	r1, #8
   19af4:	6e20      	ldr	r0, [r4, #96]	; 0x60
   19af6:	f006 faab 	bl	20050 <net_tcp_change_state>
	if (tcp_flags & NET_TCP_FIN) {
   19afa:	f016 0901 	ands.w	r9, r6, #1
   19afe:	d017      	beq.n	19b30 <tcp_established+0xf8>
		if (net_tcp_get_state(context->tcp) == NET_TCP_ESTABLISHED) {
   19b00:	6e20      	ldr	r0, [r4, #96]	; 0x60
   19b02:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   19b06:	f3c3 3343 	ubfx	r3, r3, #13, #4
   19b0a:	2b04      	cmp	r3, #4
   19b0c:	d158      	bne.n	19bc0 <tcp_established+0x188>
			net_tcp_change_state(context->tcp, NET_TCP_CLOSE_WAIT);
   19b0e:	2105      	movs	r1, #5
   19b10:	f006 fa9e 	bl	20050 <net_tcp_change_state>
			k_delayed_work_submit(&context->tcp->ack_timer, ACK_TIMEOUT);
   19b14:	6e21      	ldr	r1, [r4, #96]	; 0x60
   19b16:	4831      	ldr	r0, [pc, #196]	; (19bdc <tcp_established+0x1a4>)
   19b18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   19b1c:	3108      	adds	r1, #8
   19b1e:	f008 fbe9 	bl	222f4 <k_delayed_work_submit_to_queue>
		context->tcp->fin_rcvd = 1;
   19b22:	6e22      	ldr	r2, [r4, #96]	; 0x60
   19b24:	f892 30be 	ldrb.w	r3, [r2, #190]	; 0xbe
   19b28:	f043 0304 	orr.w	r3, r3, #4
   19b2c:	f882 30be 	strb.w	r3, [r2, #190]	; 0xbe
	set_appdata_values(pkt, IPPROTO_TCP);
   19b30:	2106      	movs	r1, #6
   19b32:	4638      	mov	r0, r7
   19b34:	f7ff fdb1 	bl	1969a <set_appdata_values>
	if (data_len > net_tcp_get_recv_wnd(context->tcp)) {
   19b38:	6e20      	ldr	r0, [r4, #96]	; 0x60
   19b3a:	8e7e      	ldrh	r6, [r7, #50]	; 0x32
   19b3c:	f006 fa1e 	bl	1ff7c <net_tcp_get_recv_wnd>
   19b40:	4286      	cmp	r6, r0
   19b42:	d888      	bhi.n	19a56 <tcp_established+0x1e>
	if (data_len > 0) {
   19b44:	2e00      	cmp	r6, #0
   19b46:	d041      	beq.n	19bcc <tcp_established+0x194>
		ret = packet_received(conn, pkt, context->tcp->recv_user_data);
   19b48:	6e23      	ldr	r3, [r4, #96]	; 0x60
   19b4a:	4639      	mov	r1, r7
   19b4c:	685a      	ldr	r2, [r3, #4]
   19b4e:	4640      	mov	r0, r8
   19b50:	f7ff fdd8 	bl	19704 <packet_received>
   19b54:	4605      	mov	r5, r0
	context->tcp->send_ack += data_len;
   19b56:	6e20      	ldr	r0, [r4, #96]	; 0x60
   19b58:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
   19b5c:	441e      	add	r6, r3
	if (tcp_flags & NET_TCP_FIN) {
   19b5e:	f1b9 0f00 	cmp.w	r9, #0
   19b62:	d138      	bne.n	19bd6 <tcp_established+0x19e>
		context->tcp->send_ack += 1;
   19b64:	f8c0 60b4 	str.w	r6, [r0, #180]	; 0xb4
	send_ack(context, &conn->remote_addr, false);
   19b68:	2200      	movs	r2, #0
   19b6a:	4641      	mov	r1, r8
   19b6c:	f7ff fd79 	bl	19662 <send_ack.isra.27>
   19b70:	e008      	b.n	19b84 <tcp_established+0x14c>
		} else if (net_tcp_get_state(context->tcp)
   19b72:	2b06      	cmp	r3, #6
   19b74:	d1c1      	bne.n	19afa <tcp_established+0xc2>
			net_tcp_change_state(context->tcp, NET_TCP_CLOSED);
   19b76:	4649      	mov	r1, r9
   19b78:	f006 fa6a 	bl	20050 <net_tcp_change_state>
			net_pkt_unref(pkt);
   19b7c:	4638      	mov	r0, r7
   19b7e:	f001 fe82 	bl	1b886 <net_pkt_unref>
	enum net_verdict ret = NET_OK;
   19b82:	464d      	mov	r5, r9
	if (net_tcp_get_state(context->tcp) == NET_TCP_TIME_WAIT) {
   19b84:	6e21      	ldr	r1, [r4, #96]	; 0x60
   19b86:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
   19b8a:	f3c3 3343 	ubfx	r3, r3, #13, #4
   19b8e:	2b09      	cmp	r3, #9
   19b90:	d104      	bne.n	19b9c <tcp_established+0x164>
   19b92:	2219      	movs	r2, #25
   19b94:	3180      	adds	r1, #128	; 0x80
   19b96:	4811      	ldr	r0, [pc, #68]	; (19bdc <tcp_established+0x1a4>)
   19b98:	f008 fbac 	bl	222f4 <k_delayed_work_submit_to_queue>
	if (net_tcp_get_state(context->tcp) == NET_TCP_CLOSED) {
   19b9c:	6e23      	ldr	r3, [r4, #96]	; 0x60
   19b9e:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
   19ba2:	f3c2 3243 	ubfx	r2, r2, #13, #4
   19ba6:	2a00      	cmp	r2, #0
   19ba8:	f47f af56 	bne.w	19a58 <tcp_established+0x20>
		if (context->recv_cb) {
   19bac:	6b26      	ldr	r6, [r4, #48]	; 0x30
   19bae:	b11e      	cbz	r6, 19bb8 <tcp_established+0x180>
			context->recv_cb(context, NULL, 0,
   19bb0:	685b      	ldr	r3, [r3, #4]
   19bb2:	4611      	mov	r1, r2
   19bb4:	4620      	mov	r0, r4
   19bb6:	47b0      	blx	r6
		net_context_unref(context);
   19bb8:	4620      	mov	r0, r4
   19bba:	f7ff fecb 	bl	19954 <net_context_unref>
   19bbe:	e74b      	b.n	19a58 <tcp_established+0x20>
		} else if (net_tcp_get_state(context->tcp)
   19bc0:	2b08      	cmp	r3, #8
   19bc2:	d1ae      	bne.n	19b22 <tcp_established+0xea>
			net_tcp_change_state(context->tcp, NET_TCP_TIME_WAIT);
   19bc4:	2109      	movs	r1, #9
   19bc6:	f006 fa43 	bl	20050 <net_tcp_change_state>
   19bca:	e7aa      	b.n	19b22 <tcp_established+0xea>
		net_pkt_unref(pkt);
   19bcc:	4638      	mov	r0, r7
   19bce:	f001 fe5a 	bl	1b886 <net_pkt_unref>
	enum net_verdict ret = NET_OK;
   19bd2:	4635      	mov	r5, r6
   19bd4:	e7bf      	b.n	19b56 <tcp_established+0x11e>
		context->tcp->send_ack += 1;
   19bd6:	3601      	adds	r6, #1
   19bd8:	e7c4      	b.n	19b64 <tcp_established+0x12c>
   19bda:	bf00      	nop
   19bdc:	20003340 	.word	0x20003340

00019be0 <net_context_put>:
{
   19be0:	b530      	push	{r4, r5, lr}
	if (!PART_OF_ARRAY(contexts, context)) {
   19be2:	4604      	mov	r4, r0
{
   19be4:	b087      	sub	sp, #28
	if (!PART_OF_ARRAY(contexts, context)) {
   19be6:	b190      	cbz	r0, 19c0e <net_context_put+0x2e>
   19be8:	4b20      	ldr	r3, [pc, #128]	; (19c6c <net_context_put+0x8c>)
   19bea:	4298      	cmp	r0, r3
   19bec:	d30f      	bcc.n	19c0e <net_context_put+0x2e>
   19bee:	f503 731c 	add.w	r3, r3, #624	; 0x270
   19bf2:	4298      	cmp	r0, r3
   19bf4:	d20b      	bcs.n	19c0e <net_context_put+0x2e>
	context->connect_cb = NULL;
   19bf6:	2300      	movs	r3, #0
   19bf8:	6383      	str	r3, [r0, #56]	; 0x38
	context->recv_cb = NULL;
   19bfa:	6303      	str	r3, [r0, #48]	; 0x30
	context->send_cb = NULL;
   19bfc:	6343      	str	r3, [r0, #52]	; 0x34
   19bfe:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
	if (context->flags & NET_CONTEXT_PROTO) {
   19c02:	065a      	lsls	r2, r3, #25
   19c04:	d406      	bmi.n	19c14 <net_context_put+0x34>
	net_context_unref(context);
   19c06:	4620      	mov	r0, r4
   19c08:	f7ff fea4 	bl	19954 <net_context_unref>
   19c0c:	e02b      	b.n	19c66 <net_context_put+0x86>
		return -EINVAL;
   19c0e:	f06f 0015 	mvn.w	r0, #21
   19c12:	e029      	b.n	19c68 <net_context_put+0x88>
	return (context->flags >> NET_CONTEXT_STATE_SHIFT) &
   19c14:	f3c3 0341 	ubfx	r3, r3, #1, #2
		if ((net_context_get_state(context) == NET_CONTEXT_CONNECTED ||
   19c18:	3b02      	subs	r3, #2
   19c1a:	2b01      	cmp	r3, #1
   19c1c:	d8f3      	bhi.n	19c06 <net_context_put+0x26>
		    && !context->tcp->fin_rcvd) {
   19c1e:	6e21      	ldr	r1, [r4, #96]	; 0x60
   19c20:	f891 50be 	ldrb.w	r5, [r1, #190]	; 0xbe
   19c24:	f015 0504 	ands.w	r5, r5, #4
   19c28:	d1ed      	bne.n	19c06 <net_context_put+0x26>
   19c2a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   19c2e:	3130      	adds	r1, #48	; 0x30
   19c30:	480f      	ldr	r0, [pc, #60]	; (19c70 <net_context_put+0x90>)
   19c32:	f008 fb5f 	bl	222f4 <k_delayed_work_submit_to_queue>
	struct net_pkt *pkt = NULL;
   19c36:	ab06      	add	r3, sp, #24
	ret = net_tcp_prepare_segment(ctx->tcp, NET_TCP_FIN, NULL, 0,
   19c38:	462a      	mov	r2, r5
	struct net_pkt *pkt = NULL;
   19c3a:	f843 5d04 	str.w	r5, [r3, #-4]!
	ret = net_tcp_prepare_segment(ctx->tcp, NET_TCP_FIN, NULL, 0,
   19c3e:	9302      	str	r3, [sp, #8]
				      NULL, &ctx->remote, &pkt);
   19c40:	f104 0314 	add.w	r3, r4, #20
	ret = net_tcp_prepare_segment(ctx->tcp, NET_TCP_FIN, NULL, 0,
   19c44:	9301      	str	r3, [sp, #4]
   19c46:	9500      	str	r5, [sp, #0]
   19c48:	462b      	mov	r3, r5
   19c4a:	2101      	movs	r1, #1
   19c4c:	6e20      	ldr	r0, [r4, #96]	; 0x60
   19c4e:	f006 fa81 	bl	20154 <net_tcp_prepare_segment>
	if (ret || !pkt) {
   19c52:	b940      	cbnz	r0, 19c66 <net_context_put+0x86>
   19c54:	9805      	ldr	r0, [sp, #20]
   19c56:	b130      	cbz	r0, 19c66 <net_context_put+0x86>
	ret = net_tcp_send_pkt(pkt);
   19c58:	f006 fd87 	bl	2076a <net_tcp_send_pkt>
	if (ret < 0) {
   19c5c:	2800      	cmp	r0, #0
   19c5e:	da02      	bge.n	19c66 <net_context_put+0x86>
		net_pkt_unref(pkt);
   19c60:	9805      	ldr	r0, [sp, #20]
   19c62:	f001 fe10 	bl	1b886 <net_pkt_unref>
	return 0;
   19c66:	2000      	movs	r0, #0
}
   19c68:	b007      	add	sp, #28
   19c6a:	bd30      	pop	{r4, r5, pc}
   19c6c:	200023d0 	.word	0x200023d0
   19c70:	20003340 	.word	0x20003340

00019c74 <net_context_bind>:
	if (context->conn_handler) {
   19c74:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
   19c76:	b573      	push	{r0, r1, r4, r5, r6, lr}
   19c78:	4606      	mov	r6, r0
   19c7a:	460d      	mov	r5, r1
	if (context->conn_handler) {
   19c7c:	2b00      	cmp	r3, #0
   19c7e:	d142      	bne.n	19d06 <net_context_bind+0x92>
	if (addr->sa_family == AF_INET6) {
   19c80:	8809      	ldrh	r1, [r1, #0]
   19c82:	290a      	cmp	r1, #10
   19c84:	d142      	bne.n	19d0c <net_context_bind+0x98>
		if (addrlen < sizeof(struct sockaddr_in6)) {
   19c86:	2a17      	cmp	r2, #23
		struct net_if *iface = NULL;
   19c88:	9301      	str	r3, [sp, #4]
		if (addrlen < sizeof(struct sockaddr_in6)) {
   19c8a:	d93f      	bls.n	19d0c <net_context_bind+0x98>
		if (net_is_ipv6_addr_mcast(&addr6->sin6_addr)) {
   19c8c:	462c      	mov	r4, r5
   19c8e:	f814 3f04 	ldrb.w	r3, [r4, #4]!
   19c92:	2bff      	cmp	r3, #255	; 0xff
   19c94:	d11d      	bne.n	19cd2 <net_context_bind+0x5e>
			maddr = net_if_ipv6_maddr_lookup(&addr6->sin6_addr,
   19c96:	a901      	add	r1, sp, #4
   19c98:	4620      	mov	r0, r4
   19c9a:	f001 f865 	bl	1ad68 <net_if_ipv6_maddr_lookup>
			if (!maddr) {
   19c9e:	b918      	cbnz	r0, 19ca8 <net_context_bind+0x34>
				return -ENOENT;
   19ca0:	f06f 0001 	mvn.w	r0, #1
}
   19ca4:	b002      	add	sp, #8
   19ca6:	bd70      	pop	{r4, r5, r6, pc}
			ptr = &maddr->address.in6_addr;
   19ca8:	f100 0408 	add.w	r4, r0, #8
		if (!iface) {
   19cac:	9801      	ldr	r0, [sp, #4]
   19cae:	b338      	cbz	r0, 19d00 <net_context_bind+0x8c>
	context->iface = net_if_get_by_iface(iface);
   19cb0:	f001 fbc4 	bl	1b43c <net_if_get_by_iface>
   19cb4:	f886 005c 	strb.w	r0, [r6, #92]	; 0x5c
		if (addr6->sin6_port) {
   19cb8:	8869      	ldrh	r1, [r5, #2]
		net_sin6_ptr(&context->local)->sin6_addr = ptr;
   19cba:	60f4      	str	r4, [r6, #12]
		net_sin6_ptr(&context->local)->sin6_family = AF_INET6;
   19cbc:	200a      	movs	r0, #10
   19cbe:	8130      	strh	r0, [r6, #8]
		if (addr6->sin6_port) {
   19cc0:	b1d1      	cbz	r1, 19cf8 <net_context_bind+0x84>
			ret = check_used_port(AF_INET6, addr6->sin6_port,
   19cc2:	462a      	mov	r2, r5
   19cc4:	f7ff fbfa 	bl	194bc <check_used_port>
			if (!ret) {
   19cc8:	2800      	cmp	r0, #0
   19cca:	d1eb      	bne.n	19ca4 <net_context_bind+0x30>
				net_sin6_ptr(&context->local)->sin6_port =
   19ccc:	886b      	ldrh	r3, [r5, #2]
   19cce:	8173      	strh	r3, [r6, #10]
   19cd0:	e7e8      	b.n	19ca4 <net_context_bind+0x30>
		} else if (net_is_ipv6_addr_unspecified(&addr6->sin6_addr)) {
   19cd2:	4620      	mov	r0, r4
   19cd4:	f7ff fbe5 	bl	194a2 <net_is_ipv6_addr_unspecified>
   19cd8:	b130      	cbz	r0, 19ce8 <net_context_bind+0x74>
			iface = net_if_get_default();
   19cda:	f000 fdd3 	bl	1a884 <net_if_get_default>
   19cde:	9001      	str	r0, [sp, #4]
			ptr = (struct in6_addr *)net_ipv6_unspecified_address();
   19ce0:	f003 fe5c 	bl	1d99c <net_ipv6_unspecified_address>
   19ce4:	4604      	mov	r4, r0
   19ce6:	e7e1      	b.n	19cac <net_context_bind+0x38>
			ifaddr = net_if_ipv6_addr_lookup(&addr6->sin6_addr,
   19ce8:	a901      	add	r1, sp, #4
   19cea:	4620      	mov	r0, r4
   19cec:	f000 fdf0 	bl	1a8d0 <net_if_ipv6_addr_lookup>
			if (!ifaddr) {
   19cf0:	2800      	cmp	r0, #0
   19cf2:	d0d5      	beq.n	19ca0 <net_context_bind+0x2c>
			ptr = &ifaddr->address.in6_addr;
   19cf4:	1d04      	adds	r4, r0, #4
   19cf6:	e7d9      	b.n	19cac <net_context_bind+0x38>
			addr6->sin6_port =
   19cf8:	8973      	ldrh	r3, [r6, #10]
   19cfa:	806b      	strh	r3, [r5, #2]
		return 0;
   19cfc:	4608      	mov	r0, r1
   19cfe:	e7d1      	b.n	19ca4 <net_context_bind+0x30>
			return -EADDRNOTAVAIL;
   19d00:	f06f 0030 	mvn.w	r0, #48	; 0x30
   19d04:	e7ce      	b.n	19ca4 <net_context_bind+0x30>
		return -EISCONN;
   19d06:	f06f 0037 	mvn.w	r0, #55	; 0x37
   19d0a:	e7cb      	b.n	19ca4 <net_context_bind+0x30>
	return -EINVAL;
   19d0c:	f06f 0015 	mvn.w	r0, #21
   19d10:	e7c8      	b.n	19ca4 <net_context_bind+0x30>

00019d12 <bind_default>:
{
   19d12:	b530      	push	{r4, r5, lr}
	if (context->flags & NET_CONTEXT_FAMILY) {
   19d14:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
   19d18:	06db      	lsls	r3, r3, #27
   19d1a:	b087      	sub	sp, #28
   19d1c:	4604      	mov	r4, r0
   19d1e:	d405      	bmi.n	19d2c <bind_default+0x1a>
	return -EINVAL;
   19d20:	f06f 0015 	mvn.w	r0, #21
}
   19d24:	b007      	add	sp, #28
   19d26:	bd30      	pop	{r4, r5, pc}
			return 0;
   19d28:	2000      	movs	r0, #0
   19d2a:	e7fb      	b.n	19d24 <bind_default+0x12>
		if (net_sin6_ptr(&context->local)->sin6_addr) {
   19d2c:	68c3      	ldr	r3, [r0, #12]
   19d2e:	2b00      	cmp	r3, #0
   19d30:	d1fa      	bne.n	19d28 <bind_default+0x16>
		addr6.sin6_family = AF_INET6;
   19d32:	ad06      	add	r5, sp, #24
   19d34:	230a      	movs	r3, #10
   19d36:	f825 3d18 	strh.w	r3, [r5, #-24]!
		memcpy(&addr6.sin6_addr, net_ipv6_unspecified_address(),
   19d3a:	f003 fe2f 	bl	1d99c <net_ipv6_unspecified_address>
   19d3e:	2210      	movs	r2, #16
   19d40:	4601      	mov	r1, r0
   19d42:	a801      	add	r0, sp, #4
   19d44:	f7e6 fd25 	bl	792 <memcpy>
			find_available_port(context,
   19d48:	4629      	mov	r1, r5
   19d4a:	4620      	mov	r0, r4
   19d4c:	f7ff fbea 	bl	19524 <find_available_port>
		return net_context_bind(context, (struct sockaddr *)&addr6,
   19d50:	2218      	movs	r2, #24
		addr6.sin6_port =
   19d52:	f8ad 0002 	strh.w	r0, [sp, #2]
		return net_context_bind(context, (struct sockaddr *)&addr6,
   19d56:	4629      	mov	r1, r5
   19d58:	4620      	mov	r0, r4
   19d5a:	f7ff ff8b 	bl	19c74 <net_context_bind>
   19d5e:	e7e1      	b.n	19d24 <bind_default+0x12>

00019d60 <sendto.isra.33>:
static int sendto(struct net_pkt *pkt,
   19d60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19d64:	68c5      	ldr	r5, [r0, #12]
   19d66:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   19d6a:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   19d6e:	461f      	mov	r7, r3
   19d70:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
   19d74:	4606      	mov	r6, r0
	if (!net_context_is_used(context)) {
   19d76:	07d8      	lsls	r0, r3, #31
static int sendto(struct net_pkt *pkt,
   19d78:	468a      	mov	sl, r1
   19d7a:	4693      	mov	fp, r2
	if (!net_context_is_used(context)) {
   19d7c:	d566      	bpl.n	19e4c <sendto.isra.33+0xec>
	if (context->flags & NET_CONTEXT_PROTO) {
   19d7e:	0659      	lsls	r1, r3, #25
   19d80:	d46d      	bmi.n	19e5e <sendto.isra.33+0xfe>
		ret = bind_default(context);
   19d82:	4628      	mov	r0, r5
   19d84:	f7ff ffc5 	bl	19d12 <bind_default>
		if (ret) {
   19d88:	4604      	mov	r4, r0
   19d8a:	b138      	cbz	r0, 19d9c <sendto.isra.33+0x3c>
}
   19d8c:	4620      	mov	r0, r4
   19d8e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (context->tcp->flags & NET_TCP_IS_SHUTDOWN) {
   19d92:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   19d94:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
   19d98:	05da      	lsls	r2, r3, #23
   19d9a:	d45a      	bmi.n	19e52 <sendto.isra.33+0xf2>
	if (!dst_addr) {
   19d9c:	f1ba 0f00 	cmp.w	sl, #0
   19da0:	d102      	bne.n	19da8 <sendto.isra.33+0x48>
		return -EDESTADDRREQ;
   19da2:	f06f 0427 	mvn.w	r4, #39	; 0x27
   19da6:	e7f1      	b.n	19d8c <sendto.isra.33+0x2c>
	return pkt->family;
   19da8:	f896 303c 	ldrb.w	r3, [r6, #60]	; 0x3c
	if (net_pkt_family(pkt) == AF_INET6) {
   19dac:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   19db0:	2b0a      	cmp	r3, #10
   19db2:	d151      	bne.n	19e58 <sendto.isra.33+0xf8>
		if (addrlen < sizeof(struct sockaddr_in6)) {
   19db4:	f1bb 0f17 	cmp.w	fp, #23
   19db8:	d94e      	bls.n	19e58 <sendto.isra.33+0xf8>
		if (net_is_ipv6_addr_unspecified(&addr6->sin6_addr)) {
   19dba:	f10a 0104 	add.w	r1, sl, #4
   19dbe:	4608      	mov	r0, r1
   19dc0:	f7ff fb6f 	bl	194a2 <net_is_ipv6_addr_unspecified>
   19dc4:	2800      	cmp	r0, #0
   19dc6:	d1ec      	bne.n	19da2 <sendto.isra.33+0x42>
   19dc8:	f895 205d 	ldrb.w	r2, [r5, #93]	; 0x5d
   19dcc:	f012 0240 	ands.w	r2, r2, #64	; 0x40
   19dd0:	d130      	bne.n	19e34 <sendto.isra.33+0xd4>
		pkt = net_ipv6_create(context, pkt, NULL, &addr6->sin6_addr);
   19dd2:	460b      	mov	r3, r1
   19dd4:	4628      	mov	r0, r5
   19dd6:	4631      	mov	r1, r6
   19dd8:	f003 fe54 	bl	1da84 <net_ipv6_create>
   19ddc:	4601      	mov	r1, r0
				     net_pkt_ip_hdr_len(pkt) +
   19dde:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
				     net_pkt_ipv6_ext_len(pkt),
   19de2:	f891 203f 	ldrb.w	r2, [r1, #63]	; 0x3f
		tmp = net_udp_insert(context, pkt,
   19de6:	f8ba 3002 	ldrh.w	r3, [sl, #2]
   19dea:	4402      	add	r2, r0
   19dec:	4628      	mov	r0, r5
   19dee:	f006 ff75 	bl	20cdc <net_udp_insert>
		if (!tmp) {
   19df2:	4606      	mov	r6, r0
   19df4:	b910      	cbnz	r0, 19dfc <sendto.isra.33+0x9c>
			return -ENOMEM;
   19df6:	f06f 040b 	mvn.w	r4, #11
   19dfa:	e7c7      	b.n	19d8c <sendto.isra.33+0x2c>
		r = net_ipv6_finalize(context, pkt);
   19dfc:	4631      	mov	r1, r6
   19dfe:	4628      	mov	r0, r5
   19e00:	f004 f81e 	bl	1de40 <net_ipv6_finalize>
	if (ret < 0) {
   19e04:	2800      	cmp	r0, #0
		ret = net_tcp_queue_data(context, pkt);
   19e06:	4604      	mov	r4, r0
	if (ret < 0) {
   19e08:	dbc0      	blt.n	19d8c <sendto.isra.33+0x2c>
	context->send_cb = cb;
   19e0a:	636f      	str	r7, [r5, #52]	; 0x34
	context->user_data = user_data;
   19e0c:	f8c5 9000 	str.w	r9, [r5]
	pkt->token = token;
   19e10:	f8c6 8010 	str.w	r8, [r6, #16]
   19e14:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
   19e18:	065b      	lsls	r3, r3, #25
   19e1a:	d527      	bpl.n	19e6c <sendto.isra.33+0x10c>
		int ret = net_tcp_send_data(context);
   19e1c:	4628      	mov	r0, r5
   19e1e:	f006 fd79 	bl	20914 <net_tcp_send_data>
   19e22:	4604      	mov	r4, r0
		if (cb) {
   19e24:	2f00      	cmp	r7, #0
   19e26:	d0b1      	beq.n	19d8c <sendto.isra.33+0x2c>
			cb(context, ret, token, user_data);
   19e28:	4601      	mov	r1, r0
   19e2a:	464b      	mov	r3, r9
   19e2c:	4642      	mov	r2, r8
   19e2e:	4628      	mov	r0, r5
   19e30:	47b8      	blx	r7
   19e32:	e7ab      	b.n	19d8c <sendto.isra.33+0x2c>
   19e34:	68b3      	ldr	r3, [r6, #8]
	while (buf) {
   19e36:	b92b      	cbnz	r3, 19e44 <sendto.isra.33+0xe4>
		net_pkt_set_appdatalen(pkt, net_pkt_get_len(pkt));
   19e38:	8670      	strh	r0, [r6, #50]	; 0x32
		ret = net_tcp_queue_data(context, pkt);
   19e3a:	4631      	mov	r1, r6
   19e3c:	4628      	mov	r0, r5
   19e3e:	f006 fa39 	bl	202b4 <net_tcp_queue_data>
   19e42:	e7df      	b.n	19e04 <sendto.isra.33+0xa4>
		bytes += buf->len;
   19e44:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   19e46:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   19e48:	4410      	add	r0, r2
   19e4a:	e7f4      	b.n	19e36 <sendto.isra.33+0xd6>
		return -EBADF;
   19e4c:	f06f 0408 	mvn.w	r4, #8
   19e50:	e79c      	b.n	19d8c <sendto.isra.33+0x2c>
			return -ESHUTDOWN;
   19e52:	f06f 0439 	mvn.w	r4, #57	; 0x39
   19e56:	e799      	b.n	19d8c <sendto.isra.33+0x2c>
		return -EINVAL;
   19e58:	f06f 0415 	mvn.w	r4, #21
   19e5c:	e796      	b.n	19d8c <sendto.isra.33+0x2c>
		if (net_context_get_state(context) != NET_CONTEXT_CONNECTED) {
   19e5e:	f3c3 0341 	ubfx	r3, r3, #1, #2
   19e62:	2b02      	cmp	r3, #2
   19e64:	d095      	beq.n	19d92 <sendto.isra.33+0x32>
			return -ENOTCONN;
   19e66:	f06f 0438 	mvn.w	r4, #56	; 0x38
   19e6a:	e78f      	b.n	19d8c <sendto.isra.33+0x2c>
		return net_send_data(pkt);
   19e6c:	4630      	mov	r0, r6
}
   19e6e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		return net_send_data(pkt);
   19e72:	f000 bb9f 	b.w	1a5b4 <net_send_data>
	...

00019e78 <tcp_syn_rcvd>:
NET_CONN_CB(tcp_syn_rcvd)
   19e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19e7c:	4614      	mov	r4, r2
   19e7e:	b09e      	sub	sp, #120	; 0x78
   19e80:	4610      	mov	r0, r2
   19e82:	460d      	mov	r5, r1
   19e84:	f7ff fd58 	bl	19938 <net_context_ref>
	tcp = context->tcp;
   19e88:	6e26      	ldr	r6, [r4, #96]	; 0x60
   19e8a:	f8d6 30bc 	ldr.w	r3, [r6, #188]	; 0xbc
	switch (net_tcp_get_state(tcp)) {
   19e8e:	f3c3 3343 	ubfx	r3, r3, #13, #4
   19e92:	2b01      	cmp	r3, #1
   19e94:	d008      	beq.n	19ea8 <tcp_syn_rcvd+0x30>
   19e96:	2b03      	cmp	r3, #3
   19e98:	d06c      	beq.n	19f74 <tcp_syn_rcvd+0xfc>
NET_CONN_CB(tcp_syn_rcvd)
   19e9a:	4620      	mov	r0, r4
   19e9c:	f7ff fd5a 	bl	19954 <net_context_unref>
   19ea0:	2002      	movs	r0, #2
   19ea2:	b01e      	add	sp, #120	; 0x78
   19ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	context->iface = net_if_get_by_iface(iface);
   19ea8:	6968      	ldr	r0, [r5, #20]
   19eaa:	f001 fac7 	bl	1b43c <net_if_get_by_iface>
   19eae:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
	pkt->context = ctx;
   19eb2:	60ec      	str	r4, [r5, #12]
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   19eb4:	a908      	add	r1, sp, #32
   19eb6:	4628      	mov	r0, r5
   19eb8:	f006 fa4c 	bl	20354 <net_tcp_get_hdr>
	if (!tcp_hdr) {
   19ebc:	4607      	mov	r7, r0
   19ebe:	2800      	cmp	r0, #0
   19ec0:	d0eb      	beq.n	19e9a <tcp_syn_rcvd+0x22>
	if (net_pkt_get_src_addr(pkt, &remote_addr, sizeof(remote_addr)) < 0) {
   19ec2:	2218      	movs	r2, #24
   19ec4:	a918      	add	r1, sp, #96	; 0x60
   19ec6:	4628      	mov	r0, r5
   19ec8:	f001 ff15 	bl	1bcf6 <net_pkt_get_src_addr>
   19ecc:	2800      	cmp	r0, #0
   19ece:	dbe4      	blt.n	19e9a <tcp_syn_rcvd+0x22>
	if (net_pkt_get_dst_addr(pkt, &local_addr, sizeof(local_addr)) < 0) {
   19ed0:	2218      	movs	r2, #24
   19ed2:	a912      	add	r1, sp, #72	; 0x48
   19ed4:	4628      	mov	r0, r5
   19ed6:	f001 ff13 	bl	1bd00 <net_pkt_get_dst_addr>
   19eda:	2800      	cmp	r0, #0
   19edc:	dbdd      	blt.n	19e9a <tcp_syn_rcvd+0x22>
   19ede:	7b7b      	ldrb	r3, [r7, #13]
   19ee0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if (NET_TCP_FLAGS(tcp_hdr) == NET_TCP_SYN) {
   19ee4:	2b02      	cmp	r3, #2
   19ee6:	f040 8092 	bne.w	1a00e <tcp_syn_rcvd+0x196>
		struct net_tcp_options tcp_opts = {
   19eea:	aa1e      	add	r2, sp, #120	; 0x78
   19eec:	f44f 7306 	mov.w	r3, #536	; 0x218
   19ef0:	f822 3d68 	strh.w	r3, [r2, #-104]!
		opt_totlen = NET_TCP_HDR_LEN(tcp_hdr)
   19ef4:	7b3b      	ldrb	r3, [r7, #12]
		if (net_tcp_parse_opts(pkt, opt_totlen, &tcp_opts) < 0) {
   19ef6:	f06f 0113 	mvn.w	r1, #19
			     - sizeof(struct net_tcp_hdr);
   19efa:	091b      	lsrs	r3, r3, #4
		if (net_tcp_parse_opts(pkt, opt_totlen, &tcp_opts) < 0) {
   19efc:	eb01 0183 	add.w	r1, r1, r3, lsl #2
   19f00:	4628      	mov	r0, r5
   19f02:	f006 fd30 	bl	20966 <net_tcp_parse_opts>
   19f06:	2800      	cmp	r0, #0
   19f08:	dbc7      	blt.n	19e9a <tcp_syn_rcvd+0x22>
		net_tcp_change_state(tcp, NET_TCP_SYN_RCVD);
   19f0a:	2103      	movs	r1, #3
   19f0c:	4630      	mov	r0, r6
   19f0e:	f006 f89f 	bl	20050 <net_tcp_change_state>
		context->tcp->send_seq = tcp_init_isn();
   19f12:	6e26      	ldr	r6, [r4, #96]	; 0x60
	return sys_rand32_get();
   19f14:	f7e8 fc7c 	bl	2810 <sys_rand32_get>
   19f18:	f8c6 00b0 	str.w	r0, [r6, #176]	; 0xb0
			sys_get_be32(tcp_hdr->seq) + 1;
   19f1c:	1d38      	adds	r0, r7, #4
   19f1e:	f7ff fab5 	bl	1948c <sys_get_be32>
		context->tcp->send_ack =
   19f22:	6e23      	ldr	r3, [r4, #96]	; 0x60
		r = tcp_backlog_syn(pkt, context, tcp_opts.mss);
   19f24:	f8bd 9010 	ldrh.w	r9, [sp, #16]
			sys_get_be32(tcp_hdr->seq) + 1;
   19f28:	3001      	adds	r0, #1
	int empty_slot = -1;
   19f2a:	af1e      	add	r7, sp, #120	; 0x78
		context->tcp->send_ack =
   19f2c:	f8c3 00b4 	str.w	r0, [r3, #180]	; 0xb4
	int empty_slot = -1;
   19f30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19f34:	f847 3d44 	str.w	r3, [r7, #-68]!
	if (tcp_backlog_find(pkt, &empty_slot) >= 0) {
   19f38:	4628      	mov	r0, r5
   19f3a:	4639      	mov	r1, r7
   19f3c:	f7ff fb0e 	bl	1955c <tcp_backlog_find>
   19f40:	2800      	cmp	r0, #0
   19f42:	daaa      	bge.n	19e9a <tcp_syn_rcvd+0x22>
	if (empty_slot < 0) {
   19f44:	990d      	ldr	r1, [sp, #52]	; 0x34
   19f46:	2900      	cmp	r1, #0
   19f48:	dba7      	blt.n	19e9a <tcp_syn_rcvd+0x22>
	tcp_backlog[empty_slot].tcp = context->tcp;
   19f4a:	f04f 0850 	mov.w	r8, #80	; 0x50
   19f4e:	4e9f      	ldr	r6, [pc, #636]	; (1a1cc <tcp_syn_rcvd+0x354>)
   19f50:	6e23      	ldr	r3, [r4, #96]	; 0x60
   19f52:	fb08 f101 	mul.w	r1, r8, r1
	ret = net_pkt_get_src_addr(pkt, &tcp_backlog[empty_slot].remote,
   19f56:	2218      	movs	r2, #24
	tcp_backlog[empty_slot].tcp = context->tcp;
   19f58:	5073      	str	r3, [r6, r1]
	ret = net_pkt_get_src_addr(pkt, &tcp_backlog[empty_slot].remote,
   19f5a:	3104      	adds	r1, #4
   19f5c:	4431      	add	r1, r6
   19f5e:	4628      	mov	r0, r5
   19f60:	f001 fec9 	bl	1bcf6 <net_pkt_get_src_addr>
	if (ret < 0) {
   19f64:	2800      	cmp	r0, #0
   19f66:	980d      	ldr	r0, [sp, #52]	; 0x34
   19f68:	da0c      	bge.n	19f84 <tcp_syn_rcvd+0x10c>
		tcp_backlog[empty_slot].tcp = NULL;
   19f6a:	fb08 f000 	mul.w	r0, r8, r0
   19f6e:	2300      	movs	r3, #0
   19f70:	5033      	str	r3, [r6, r0]
   19f72:	e792      	b.n	19e9a <tcp_syn_rcvd+0x22>
	return net_if_get_by_index(context->iface);
   19f74:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
   19f78:	696f      	ldr	r7, [r5, #20]
   19f7a:	f001 fa51 	bl	1b420 <net_if_get_by_index>
		if (net_pkt_iface(pkt) != net_context_get_iface(context)) {
   19f7e:	4287      	cmp	r7, r0
   19f80:	d18b      	bne.n	19e9a <tcp_syn_rcvd+0x22>
   19f82:	e796      	b.n	19eb2 <tcp_syn_rcvd+0x3a>
	tcp_backlog[empty_slot].send_seq = context->tcp->send_seq;
   19f84:	6e21      	ldr	r1, [r4, #96]	; 0x60
   19f86:	fb08 f000 	mul.w	r0, r8, r0
   19f8a:	1833      	adds	r3, r6, r0
   19f8c:	f8d1 20b0 	ldr.w	r2, [r1, #176]	; 0xb0
   19f90:	61da      	str	r2, [r3, #28]
	k_delayed_work_init(&tcp_backlog[empty_slot].ack_timer,
   19f92:	3028      	adds	r0, #40	; 0x28
	tcp_backlog[empty_slot].send_ack = context->tcp->send_ack;
   19f94:	f8d1 20b4 	ldr.w	r2, [r1, #180]	; 0xb4
   19f98:	621a      	str	r2, [r3, #32]
	tcp_backlog[empty_slot].send_mss = send_mss;
   19f9a:	f8a3 9024 	strh.w	r9, [r3, #36]	; 0x24
	k_delayed_work_init(&tcp_backlog[empty_slot].ack_timer,
   19f9e:	4430      	add	r0, r6
   19fa0:	498b      	ldr	r1, [pc, #556]	; (1a1d0 <tcp_syn_rcvd+0x358>)
   19fa2:	f008 f92f 	bl	22204 <k_delayed_work_init>
	k_delayed_work_submit(&tcp_backlog[empty_slot].ack_timer, ACK_TIMEOUT);
   19fa6:	990d      	ldr	r1, [sp, #52]	; 0x34
   19fa8:	488a      	ldr	r0, [pc, #552]	; (1a1d4 <tcp_syn_rcvd+0x35c>)
   19faa:	fb08 6101 	mla	r1, r8, r1, r6
   19fae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   19fb2:	3128      	adds	r1, #40	; 0x28
   19fb4:	f008 f99e 	bl	222f4 <k_delayed_work_submit_to_queue>
	if (context->flags & NET_CONTEXT_FAMILY) {
   19fb8:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   19fbc:	4639      	mov	r1, r7
		return AF_INET6;
   19fbe:	f013 0f10 	tst.w	r3, #16
   19fc2:	4628      	mov	r0, r5
   19fc4:	bf0c      	ite	eq
   19fc6:	f04f 0802 	moveq.w	r8, #2
   19fca:	f04f 080a 	movne.w	r8, #10
   19fce:	f006 f9c1 	bl	20354 <net_tcp_get_hdr>
	if (!tcp_hdr) {
   19fd2:	4606      	mov	r6, r0
   19fd4:	b198      	cbz	r0, 19ffe <tcp_syn_rcvd+0x186>
	memset(addr, 0, sizeof(*addr));
   19fd6:	220c      	movs	r2, #12
   19fd8:	2100      	movs	r1, #0
   19fda:	a805      	add	r0, sp, #20
   19fdc:	f7e6 fc05 	bl	7ea <memset>
	if (family == AF_INET6) {
   19fe0:	f1b8 0f0a 	cmp.w	r8, #10
   19fe4:	d10b      	bne.n	19ffe <tcp_syn_rcvd+0x186>
		addr6->sin6_family = AF_INET6;
   19fe6:	f8ad 8014 	strh.w	r8, [sp, #20]
		addr6->sin6_port = tcp_hdr->dst_port;
   19fea:	78b3      	ldrb	r3, [r6, #2]
   19fec:	78f2      	ldrb	r2, [r6, #3]
   19fee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   19ff2:	f8ad 3016 	strh.w	r3, [sp, #22]
	return pkt->frags->data;
   19ff6:	68ab      	ldr	r3, [r5, #8]
		addr6->sin6_addr = &NET_IPV6_HDR(pkt)->dst;
   19ff8:	689b      	ldr	r3, [r3, #8]
   19ffa:	3318      	adds	r3, #24
   19ffc:	9306      	str	r3, [sp, #24]
	return send_syn_segment(context, local, remote,
   19ffe:	2312      	movs	r3, #18
   1a000:	aa18      	add	r2, sp, #96	; 0x60
   1a002:	a905      	add	r1, sp, #20
   1a004:	f104 0060 	add.w	r0, r4, #96	; 0x60
   1a008:	f7ff fb06 	bl	19618 <send_syn_segment.isra.26>
   1a00c:	e745      	b.n	19e9a <tcp_syn_rcvd+0x22>
	if (NET_TCP_FLAGS(tcp_hdr) == NET_TCP_RST) {
   1a00e:	2b04      	cmp	r3, #4
   1a010:	d124      	bne.n	1a05c <tcp_syn_rcvd+0x1e4>
	r = tcp_backlog_find(pkt, NULL);
   1a012:	2100      	movs	r1, #0
   1a014:	4628      	mov	r0, r5
   1a016:	f7ff faa1 	bl	1955c <tcp_backlog_find>
	if (r < 0) {
   1a01a:	1e06      	subs	r6, r0, #0
   1a01c:	f6ff af3d 	blt.w	19e9a <tcp_syn_rcvd+0x22>
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   1a020:	a90d      	add	r1, sp, #52	; 0x34
   1a022:	4628      	mov	r0, r5
   1a024:	f006 f996 	bl	20354 <net_tcp_get_hdr>
	if (!tcp_hdr) {
   1a028:	2800      	cmp	r0, #0
   1a02a:	f43f af36 	beq.w	19e9a <tcp_syn_rcvd+0x22>
	if (tcp_backlog[r].send_ack != sys_get_be32(tcp_hdr->seq)) {
   1a02e:	3004      	adds	r0, #4
   1a030:	f7ff fa2c 	bl	1948c <sys_get_be32>
   1a034:	2750      	movs	r7, #80	; 0x50
   1a036:	4a65      	ldr	r2, [pc, #404]	; (1a1cc <tcp_syn_rcvd+0x354>)
   1a038:	fb07 f306 	mul.w	r3, r7, r6
   1a03c:	18d5      	adds	r5, r2, r3
   1a03e:	6a29      	ldr	r1, [r5, #32]
   1a040:	4281      	cmp	r1, r0
   1a042:	f47f af2a 	bne.w	19e9a <tcp_syn_rcvd+0x22>
	k_delayed_work_cancel(&tcp_backlog[r].ack_timer);
   1a046:	f103 0028 	add.w	r0, r3, #40	; 0x28
   1a04a:	4410      	add	r0, r2
   1a04c:	f008 f8f8 	bl	22240 <k_delayed_work_cancel>
	memset(&tcp_backlog[r], 0, sizeof(struct tcp_backlog_entry));
   1a050:	463a      	mov	r2, r7
   1a052:	2100      	movs	r1, #0
   1a054:	4628      	mov	r0, r5
   1a056:	f7e6 fbc8 	bl	7ea <memset>
   1a05a:	e71e      	b.n	19e9a <tcp_syn_rcvd+0x22>
	if (NET_TCP_FLAGS(tcp_hdr) == NET_TCP_ACK) {
   1a05c:	2b10      	cmp	r3, #16
   1a05e:	f47f af1c 	bne.w	19e9a <tcp_syn_rcvd+0x22>
		if (!context->tcp->accept_cb) {
   1a062:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1a064:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
   1a068:	2b00      	cmp	r3, #0
   1a06a:	d04e      	beq.n	1a10a <tcp_syn_rcvd+0x292>
	return pkt->family;
   1a06c:	f895 003c 	ldrb.w	r0, [r5, #60]	; 0x3c
		ret = net_context_get(net_pkt_family(pkt),
   1a070:	ab05      	add	r3, sp, #20
   1a072:	2206      	movs	r2, #6
   1a074:	2101      	movs	r1, #1
   1a076:	f3c0 00c3 	ubfx	r0, r0, #3, #4
   1a07a:	f7ff fb89 	bl	19790 <net_context_get>
		if (ret < 0) {
   1a07e:	2800      	cmp	r0, #0
   1a080:	db43      	blt.n	1a10a <tcp_syn_rcvd+0x292>
	r = tcp_backlog_find(pkt, NULL);
   1a082:	2100      	movs	r1, #0
   1a084:	4628      	mov	r0, r5
		ret = tcp_backlog_ack(pkt, new_context);
   1a086:	f8dd a014 	ldr.w	sl, [sp, #20]
	r = tcp_backlog_find(pkt, NULL);
   1a08a:	f7ff fa67 	bl	1955c <tcp_backlog_find>
	if (r < 0) {
   1a08e:	1e07      	subs	r7, r0, #0
   1a090:	db67      	blt.n	1a162 <tcp_syn_rcvd+0x2ea>
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   1a092:	a90d      	add	r1, sp, #52	; 0x34
   1a094:	4628      	mov	r0, r5
   1a096:	f006 f95d 	bl	20354 <net_tcp_get_hdr>
	if (!tcp_hdr) {
   1a09a:	2800      	cmp	r0, #0
   1a09c:	d061      	beq.n	1a162 <tcp_syn_rcvd+0x2ea>
	if (tcp_backlog[r].send_seq + 1 != sys_get_be32(tcp_hdr->ack)) {
   1a09e:	f8df 812c 	ldr.w	r8, [pc, #300]	; 1a1cc <tcp_syn_rcvd+0x354>
   1a0a2:	f04f 0950 	mov.w	r9, #80	; 0x50
   1a0a6:	fb09 f507 	mul.w	r5, r9, r7
   1a0aa:	eb08 0705 	add.w	r7, r8, r5
   1a0ae:	3008      	adds	r0, #8
   1a0b0:	f7ff f9ec 	bl	1948c <sys_get_be32>
   1a0b4:	69fb      	ldr	r3, [r7, #28]
   1a0b6:	3301      	adds	r3, #1
   1a0b8:	4283      	cmp	r3, r0
   1a0ba:	d152      	bne.n	1a162 <tcp_syn_rcvd+0x2ea>
	memcpy(&context->remote, &tcp_backlog[r].remote,
   1a0bc:	1d29      	adds	r1, r5, #4
   1a0be:	4441      	add	r1, r8
   1a0c0:	2218      	movs	r2, #24
   1a0c2:	f10a 0014 	add.w	r0, sl, #20
   1a0c6:	f7e6 fb64 	bl	792 <memcpy>
	context->tcp->send_seq = tcp_backlog[r].send_seq + 1;
   1a0ca:	69fa      	ldr	r2, [r7, #28]
   1a0cc:	f8da 3060 	ldr.w	r3, [sl, #96]	; 0x60
   1a0d0:	3201      	adds	r2, #1
   1a0d2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	context->tcp->send_ack = tcp_backlog[r].send_ack;
   1a0d6:	6a3a      	ldr	r2, [r7, #32]
   1a0d8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	k_delayed_work_cancel(&tcp_backlog[r].ack_timer);
   1a0dc:	f105 0028 	add.w	r0, r5, #40	; 0x28
	context->tcp->send_mss = tcp_backlog[r].send_mss;
   1a0e0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
   1a0e2:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
	k_delayed_work_cancel(&tcp_backlog[r].ack_timer);
   1a0e6:	4440      	add	r0, r8
   1a0e8:	f008 f8aa 	bl	22240 <k_delayed_work_cancel>
	memset(&tcp_backlog[r], 0, sizeof(struct tcp_backlog_entry));
   1a0ec:	464a      	mov	r2, r9
   1a0ee:	2100      	movs	r1, #0
   1a0f0:	4638      	mov	r0, r7
   1a0f2:	f7e6 fb7a 	bl	7ea <memset>
		ret = net_context_bind(new_context, &local_addr,
   1a0f6:	2218      	movs	r2, #24
   1a0f8:	a912      	add	r1, sp, #72	; 0x48
   1a0fa:	9805      	ldr	r0, [sp, #20]
   1a0fc:	f7ff fdba 	bl	19c74 <net_context_bind>
		if (ret < 0) {
   1a100:	2800      	cmp	r0, #0
			net_context_unref(new_context);
   1a102:	9805      	ldr	r0, [sp, #20]
		if (ret < 0) {
   1a104:	da08      	bge.n	1a118 <tcp_syn_rcvd+0x2a0>
			net_context_unref(new_context);
   1a106:	f7ff fc25 	bl	19954 <net_context_unref>
	send_reset(tcp->context, &local_addr, &remote_addr);
   1a10a:	6833      	ldr	r3, [r6, #0]
   1a10c:	aa18      	add	r2, sp, #96	; 0x60
   1a10e:	a912      	add	r1, sp, #72	; 0x48
   1a110:	6e18      	ldr	r0, [r3, #96]	; 0x60
   1a112:	f7ff fa59 	bl	195c8 <send_reset.isra.25>
   1a116:	e6c0      	b.n	19e9a <tcp_syn_rcvd+0x22>
		new_context->flags |= NET_CONTEXT_REMOTE_ADDR_SET;
   1a118:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
   1a11c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1a120:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
		memcpy(&new_context->remote, &remote_addr,
   1a124:	2218      	movs	r2, #24
   1a126:	a918      	add	r1, sp, #96	; 0x60
   1a128:	3014      	adds	r0, #20
   1a12a:	f7e6 fb32 	bl	792 <memcpy>
		ret = net_tcp_register(&new_context->remote,
   1a12e:	9905      	ldr	r1, [sp, #20]
			       ntohs(net_sin(&local_addr)->sin_port),
   1a130:	f8bd 004a 	ldrh.w	r0, [sp, #74]	; 0x4a
			       ntohs(net_sin(&new_context->remote)->sin_port),
   1a134:	8aca      	ldrh	r2, [r1, #22]
	return net_conn_register(IPPROTO_TCP, remote_addr, local_addr,
   1a136:	9102      	str	r1, [sp, #8]
   1a138:	0a13      	lsrs	r3, r2, #8
   1a13a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		ret = net_tcp_register(&new_context->remote,
   1a13e:	f101 022c 	add.w	r2, r1, #44	; 0x2c
   1a142:	9203      	str	r2, [sp, #12]
   1a144:	4a24      	ldr	r2, [pc, #144]	; (1a1d8 <tcp_syn_rcvd+0x360>)
   1a146:	9201      	str	r2, [sp, #4]
			       ntohs(net_sin(&local_addr)->sin_port),
   1a148:	0a02      	lsrs	r2, r0, #8
   1a14a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
   1a14e:	b292      	uxth	r2, r2
   1a150:	9200      	str	r2, [sp, #0]
   1a152:	b29b      	uxth	r3, r3
   1a154:	aa12      	add	r2, sp, #72	; 0x48
   1a156:	3114      	adds	r1, #20
   1a158:	2006      	movs	r0, #6
   1a15a:	f005 fc57 	bl	1fa0c <net_conn_register>
		if (ret < 0) {
   1a15e:	2800      	cmp	r0, #0
   1a160:	da01      	bge.n	1a166 <tcp_syn_rcvd+0x2ee>
			net_context_unref(new_context);
   1a162:	9805      	ldr	r0, [sp, #20]
   1a164:	e7cf      	b.n	1a106 <tcp_syn_rcvd+0x28e>
		new_tcp = new_context->tcp;
   1a166:	9b05      	ldr	r3, [sp, #20]
		new_tcp->accept_cb = NULL;
   1a168:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   1a16a:	2100      	movs	r1, #0
   1a16c:	f8c2 10c0 	str.w	r1, [r2, #192]	; 0xc0
	new_context->tx_slab = listen_context->tx_slab;
   1a170:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   1a172:	63da      	str	r2, [r3, #60]	; 0x3c
	new_context->data_pool = listen_context->data_pool;
   1a174:	6c22      	ldr	r2, [r4, #64]	; 0x40
   1a176:	641a      	str	r2, [r3, #64]	; 0x40
		net_tcp_change_state(tcp, NET_TCP_LISTEN);
   1a178:	2101      	movs	r1, #1
   1a17a:	4630      	mov	r0, r6
   1a17c:	f005 ff68 	bl	20050 <net_tcp_change_state>
		new_context->tcp->state = NET_TCP_ESTABLISHED;
   1a180:	9805      	ldr	r0, [sp, #20]
   1a182:	6e03      	ldr	r3, [r0, #96]	; 0x60
   1a184:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
   1a188:	2104      	movs	r1, #4
   1a18a:	f361 3250 	bfi	r2, r1, #13, #4
   1a18e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	context->flags &= ~(NET_CONTEXT_STATE_MASK << NET_CONTEXT_STATE_SHIFT);
   1a192:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
   1a196:	f023 0306 	bic.w	r3, r3, #6
	context->flags |= ((state & NET_CONTEXT_STATE_MASK) <<
   1a19a:	430b      	orrs	r3, r1
   1a19c:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
		if (new_context->remote.sa_family == AF_INET) {
   1a1a0:	8a83      	ldrh	r3, [r0, #20]
   1a1a2:	2b02      	cmp	r3, #2
   1a1a4:	d004      	beq.n	1a1b0 <tcp_syn_rcvd+0x338>
		} else if (new_context->remote.sa_family == AF_INET6) {
   1a1a6:	2b0a      	cmp	r3, #10
   1a1a8:	d00d      	beq.n	1a1c6 <tcp_syn_rcvd+0x34e>
			net_context_unref(new_context);
   1a1aa:	f7ff fbd3 	bl	19954 <net_context_unref>
   1a1ae:	e674      	b.n	19e9a <tcp_syn_rcvd+0x22>
			addrlen = sizeof(struct sockaddr_in);
   1a1b0:	2208      	movs	r2, #8
		context->tcp->accept_cb(new_context,
   1a1b2:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1a1b4:	6821      	ldr	r1, [r4, #0]
   1a1b6:	9100      	str	r1, [sp, #0]
   1a1b8:	f8d3 50c0 	ldr.w	r5, [r3, #192]	; 0xc0
   1a1bc:	f100 0114 	add.w	r1, r0, #20
   1a1c0:	2300      	movs	r3, #0
   1a1c2:	47a8      	blx	r5
   1a1c4:	e669      	b.n	19e9a <tcp_syn_rcvd+0x22>
			addrlen = sizeof(struct sockaddr_in6);
   1a1c6:	2218      	movs	r2, #24
   1a1c8:	e7f3      	b.n	1a1b2 <tcp_syn_rcvd+0x33a>
   1a1ca:	bf00      	nop
   1a1cc:	20002658 	.word	0x20002658
   1a1d0:	000195f3 	.word	0x000195f3
   1a1d4:	20003340 	.word	0x20003340
   1a1d8:	00019a39 	.word	0x00019a39

0001a1dc <net_context_listen>:
{
   1a1dc:	b510      	push	{r4, lr}
   1a1de:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
	if (!net_context_is_used(context)) {
   1a1e2:	07da      	lsls	r2, r3, #31
{
   1a1e4:	4604      	mov	r4, r0
	if (!net_context_is_used(context)) {
   1a1e6:	d504      	bpl.n	1a1f2 <net_context_listen+0x16>
	if (context->flags & NET_CONTEXT_PROTO) {
   1a1e8:	065b      	lsls	r3, r3, #25
   1a1ea:	d405      	bmi.n	1a1f8 <net_context_listen+0x1c>
	return -EOPNOTSUPP;
   1a1ec:	f06f 002c 	mvn.w	r0, #44	; 0x2c
   1a1f0:	bd10      	pop	{r4, pc}
		return -EBADF;
   1a1f2:	f06f 0008 	mvn.w	r0, #8
   1a1f6:	bd10      	pop	{r4, pc}
		net_tcp_change_state(context->tcp, NET_TCP_LISTEN);
   1a1f8:	2101      	movs	r1, #1
   1a1fa:	6e00      	ldr	r0, [r0, #96]	; 0x60
   1a1fc:	f005 ff28 	bl	20050 <net_tcp_change_state>
	context->flags &= ~(NET_CONTEXT_STATE_MASK << NET_CONTEXT_STATE_SHIFT);
   1a200:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1a204:	f023 0306 	bic.w	r3, r3, #6
	context->flags |= ((state & NET_CONTEXT_STATE_MASK) <<
   1a208:	f043 0306 	orr.w	r3, r3, #6
   1a20c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		return 0;
   1a210:	2000      	movs	r0, #0
}
   1a212:	bd10      	pop	{r4, pc}

0001a214 <net_context_accept>:
{
   1a214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a218:	f890 705d 	ldrb.w	r7, [r0, #93]	; 0x5d
   1a21c:	4604      	mov	r4, r0
	if (!net_context_is_used(context)) {
   1a21e:	07f8      	lsls	r0, r7, #31
{
   1a220:	b08e      	sub	sp, #56	; 0x38
   1a222:	460d      	mov	r5, r1
   1a224:	461e      	mov	r6, r3
	if (!net_context_is_used(context)) {
   1a226:	d54e      	bpl.n	1a2c6 <net_context_accept+0xb2>
	if ((net_context_get_state(context) != NET_CONTEXT_LISTENING) &&
   1a228:	f3c7 0341 	ubfx	r3, r7, #1, #2
   1a22c:	2b03      	cmp	r3, #3
   1a22e:	d001      	beq.n	1a234 <net_context_accept+0x20>
	if (context->flags & NET_CONTEXT_TYPE) {
   1a230:	06b9      	lsls	r1, r7, #26
   1a232:	d552      	bpl.n	1a2da <net_context_accept+0xc6>
	if (context->flags & NET_CONTEXT_PROTO) {
   1a234:	067a      	lsls	r2, r7, #25
   1a236:	d449      	bmi.n	1a2cc <net_context_accept+0xb8>
		return AF_INET6;
   1a238:	f017 0f10 	tst.w	r7, #16
   1a23c:	bf0c      	ite	eq
   1a23e:	2302      	moveq	r3, #2
   1a240:	230a      	movne	r3, #10
	if (net_context_get_family(context) == AF_INET6) {
   1a242:	2b0a      	cmp	r3, #10
	local_addr.sa_family = net_context_get_family(context);
   1a244:	f8ad 3020 	strh.w	r3, [sp, #32]
	if (net_context_get_family(context) == AF_INET6) {
   1a248:	d13a      	bne.n	1a2c0 <net_context_accept+0xac>
		if (net_sin6_ptr(&context->local)->sin6_addr) {
   1a24a:	68e2      	ldr	r2, [r4, #12]
   1a24c:	b19a      	cbz	r2, 1a276 <net_context_accept+0x62>
			net_ipaddr_copy(&net_sin6(&local_addr)->sin6_addr,
   1a24e:	f10d 0e10 	add.w	lr, sp, #16
   1a252:	f102 0810 	add.w	r8, r2, #16
   1a256:	4673      	mov	r3, lr
   1a258:	6810      	ldr	r0, [r2, #0]
   1a25a:	6851      	ldr	r1, [r2, #4]
   1a25c:	46f4      	mov	ip, lr
   1a25e:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   1a262:	3208      	adds	r2, #8
   1a264:	4542      	cmp	r2, r8
   1a266:	46e6      	mov	lr, ip
   1a268:	d1f6      	bne.n	1a258 <net_context_accept+0x44>
   1a26a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1a26c:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
   1a270:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
			laddr = &local_addr;
   1a274:	aa08      	add	r2, sp, #32
		net_sin6(&local_addr)->sin6_port = lport =
   1a276:	8960      	ldrh	r0, [r4, #10]
   1a278:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
	ret = net_tcp_register(context->flags & NET_CONTEXT_REMOTE_ADDR_SET ?
   1a27c:	063b      	lsls	r3, r7, #24
			       ntohs(net_sin(&context->remote)->sin_port),
   1a27e:	8ae7      	ldrh	r7, [r4, #22]
   1a280:	9402      	str	r4, [sp, #8]
   1a282:	ea4f 2317 	mov.w	r3, r7, lsr #8
   1a286:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
   1a28a:	ba40      	rev16	r0, r0
	ret = net_tcp_register(context->flags & NET_CONTEXT_REMOTE_ADDR_SET ?
   1a28c:	f104 072c 	add.w	r7, r4, #44	; 0x2c
   1a290:	9703      	str	r7, [sp, #12]
   1a292:	b280      	uxth	r0, r0
   1a294:	4f15      	ldr	r7, [pc, #84]	; (1a2ec <net_context_accept+0xd8>)
   1a296:	9000      	str	r0, [sp, #0]
   1a298:	bf4c      	ite	mi
   1a29a:	f104 0114 	addmi.w	r1, r4, #20
   1a29e:	2100      	movpl	r1, #0
   1a2a0:	9701      	str	r7, [sp, #4]
   1a2a2:	b29b      	uxth	r3, r3
   1a2a4:	2006      	movs	r0, #6
   1a2a6:	f005 fbb1 	bl	1fa0c <net_conn_register>
	if (ret < 0) {
   1a2aa:	2800      	cmp	r0, #0
   1a2ac:	db05      	blt.n	1a2ba <net_context_accept+0xa6>
	if (context->flags & NET_CONTEXT_PROTO) {
   1a2ae:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
	context->user_data = user_data;
   1a2b2:	6026      	str	r6, [r4, #0]
   1a2b4:	f010 0040 	ands.w	r0, r0, #64	; 0x40
   1a2b8:	d112      	bne.n	1a2e0 <net_context_accept+0xcc>
}
   1a2ba:	b00e      	add	sp, #56	; 0x38
   1a2bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	u16_t lport = 0;
   1a2c0:	2000      	movs	r0, #0
	struct sockaddr *laddr = NULL;
   1a2c2:	4602      	mov	r2, r0
   1a2c4:	e7da      	b.n	1a27c <net_context_accept+0x68>
		return -EBADF;
   1a2c6:	f06f 0008 	mvn.w	r0, #8
   1a2ca:	e7f6      	b.n	1a2ba <net_context_accept+0xa6>
	return (enum net_tcp_state)tcp->state;
   1a2cc:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1a2ce:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
		if (net_tcp_get_state(context->tcp) != NET_TCP_LISTEN) {
   1a2d2:	f3c3 3343 	ubfx	r3, r3, #13, #4
   1a2d6:	2b01      	cmp	r3, #1
   1a2d8:	d0ae      	beq.n	1a238 <net_context_accept+0x24>
		return -EINVAL;
   1a2da:	f06f 0015 	mvn.w	r0, #21
   1a2de:	e7ec      	b.n	1a2ba <net_context_accept+0xa6>
		context->tcp->accept_cb = cb;
   1a2e0:	6e23      	ldr	r3, [r4, #96]	; 0x60
	return 0;
   1a2e2:	2000      	movs	r0, #0
		context->tcp->accept_cb = cb;
   1a2e4:	f8c3 50c0 	str.w	r5, [r3, #192]	; 0xc0
   1a2e8:	e7e7      	b.n	1a2ba <net_context_accept+0xa6>
   1a2ea:	bf00      	nop
   1a2ec:	00019e79 	.word	0x00019e79

0001a2f0 <net_context_send>:
{
   1a2f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1a2f2:	68c4      	ldr	r4, [r0, #12]
	if (!(context->flags & NET_CONTEXT_REMOTE_ADDR_SET) ||
   1a2f4:	f994 505d 	ldrsb.w	r5, [r4, #93]	; 0x5d
   1a2f8:	2d00      	cmp	r5, #0
   1a2fa:	da13      	bge.n	1a324 <net_context_send+0x34>
   1a2fc:	8ae5      	ldrh	r5, [r4, #22]
   1a2fe:	b18d      	cbz	r5, 1a324 <net_context_send+0x34>
   1a300:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
	return sendto(pkt, &context->remote, addrlen, cb, timeout, token,
   1a304:	9300      	str	r3, [sp, #0]
	if (net_pkt_family(pkt) == AF_INET6) {
   1a306:	f3c2 02c3 	ubfx	r2, r2, #3, #4
   1a30a:	2a0a      	cmp	r2, #10
	return sendto(pkt, &context->remote, addrlen, cb, timeout, token,
   1a30c:	9a06      	ldr	r2, [sp, #24]
   1a30e:	9201      	str	r2, [sp, #4]
   1a310:	460b      	mov	r3, r1
   1a312:	bf0c      	ite	eq
   1a314:	2218      	moveq	r2, #24
   1a316:	2200      	movne	r2, #0
   1a318:	f104 0114 	add.w	r1, r4, #20
   1a31c:	f7ff fd20 	bl	19d60 <sendto.isra.33>
}
   1a320:	b003      	add	sp, #12
   1a322:	bd30      	pop	{r4, r5, pc}
		return -EDESTADDRREQ;
   1a324:	f06f 0027 	mvn.w	r0, #39	; 0x27
   1a328:	e7fa      	b.n	1a320 <net_context_send+0x30>

0001a32a <net_context_sendto>:
{
   1a32a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a32c:	68c7      	ldr	r7, [r0, #12]
   1a32e:	f8dd e014 	ldr.w	lr, [sp, #20]
   1a332:	f897 705d 	ldrb.w	r7, [r7, #93]	; 0x5d
   1a336:	9c06      	ldr	r4, [sp, #24]
   1a338:	9d07      	ldr	r5, [sp, #28]
   1a33a:	067f      	lsls	r7, r7, #25
   1a33c:	461e      	mov	r6, r3
   1a33e:	d507      	bpl.n	1a350 <net_context_sendto+0x26>
		return net_context_send(pkt, cb, timeout, token, user_data);
   1a340:	9505      	str	r5, [sp, #20]
   1a342:	4623      	mov	r3, r4
   1a344:	4672      	mov	r2, lr
   1a346:	4631      	mov	r1, r6
}
   1a348:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return net_context_send(pkt, cb, timeout, token, user_data);
   1a34c:	f7ff bfd0 	b.w	1a2f0 <net_context_send>
	return sendto(pkt, dst_addr, addrlen, cb, timeout, token, user_data);
   1a350:	9506      	str	r5, [sp, #24]
   1a352:	9405      	str	r4, [sp, #20]
}
   1a354:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return sendto(pkt, dst_addr, addrlen, cb, timeout, token, user_data);
   1a358:	f7ff bd02 	b.w	19d60 <sendto.isra.33>

0001a35c <net_context_recv>:

int net_context_recv(struct net_context *context,
		     net_context_recv_cb_t cb,
		     s32_t timeout,
		     void *user_data)
{
   1a35c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a360:	f890 505d 	ldrb.w	r5, [r0, #93]	; 0x5d
   1a364:	460f      	mov	r7, r1
	NET_ASSERT(context);

	if (!net_context_is_used(context)) {
   1a366:	07e9      	lsls	r1, r5, #31
{
   1a368:	b08f      	sub	sp, #60	; 0x3c
   1a36a:	4604      	mov	r4, r0
   1a36c:	4616      	mov	r6, r2
   1a36e:	4698      	mov	r8, r3
	if (!net_context_is_used(context)) {
   1a370:	d558      	bpl.n	1a424 <net_context_recv+0xc8>
   1a372:	f015 0940 	ands.w	r9, r5, #64	; 0x40
   1a376:	d13d      	bne.n	1a3f4 <net_context_recv+0x98>
	struct sockaddr local_addr = {
   1a378:	2218      	movs	r2, #24
   1a37a:	4649      	mov	r1, r9
   1a37c:	a808      	add	r0, sp, #32
   1a37e:	f7e6 fa34 	bl	7ea <memset>
		return AF_INET6;
   1a382:	f015 0f10 	tst.w	r5, #16
	if (context->conn_handler) {
   1a386:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1a388:	bf0c      	ite	eq
   1a38a:	2302      	moveq	r3, #2
   1a38c:	230a      	movne	r3, #10
	struct sockaddr local_addr = {
   1a38e:	f8ad 3020 	strh.w	r3, [sp, #32]
	if (context->conn_handler) {
   1a392:	b118      	cbz	r0, 1a39c <net_context_recv+0x40>
		net_conn_unregister(context->conn_handler);
   1a394:	f005 fb20 	bl	1f9d8 <net_conn_unregister>
		context->conn_handler = NULL;
   1a398:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
	ret = bind_default(context);
   1a39c:	4620      	mov	r0, r4
   1a39e:	f7ff fcb8 	bl	19d12 <bind_default>
	if (ret) {
   1a3a2:	bb10      	cbnz	r0, 1a3ea <net_context_recv+0x8e>
   1a3a4:	f894 e05d 	ldrb.w	lr, [r4, #93]	; 0x5d
	if (context->flags & NET_CONTEXT_FAMILY) {
   1a3a8:	f01e 0510 	ands.w	r5, lr, #16
   1a3ac:	d146      	bne.n	1a43c <net_context_recv+0xe0>
	struct sockaddr *laddr = NULL;
   1a3ae:	462a      	mov	r2, r5
	context->recv_cb = cb;
   1a3b0:	6327      	str	r7, [r4, #48]	; 0x30
				ntohs(net_sin(&context->remote)->sin_port),
   1a3b2:	8ae7      	ldrh	r7, [r4, #22]
	ret = net_conn_register(net_context_get_ip_proto(context),
   1a3b4:	f8cd 8008 	str.w	r8, [sp, #8]
				ntohs(net_sin(&context->remote)->sin_port),
   1a3b8:	0a3b      	lsrs	r3, r7, #8
		return IPPROTO_TCP;
   1a3ba:	f01e 0f40 	tst.w	lr, #64	; 0x40
   1a3be:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
	ret = net_conn_register(net_context_get_ip_proto(context),
   1a3c2:	ba6d      	rev16	r5, r5
   1a3c4:	f104 072c 	add.w	r7, r4, #44	; 0x2c
   1a3c8:	bf0c      	ite	eq
   1a3ca:	2011      	moveq	r0, #17
   1a3cc:	2006      	movne	r0, #6
   1a3ce:	9703      	str	r7, [sp, #12]
   1a3d0:	f01e 0f80 	tst.w	lr, #128	; 0x80
   1a3d4:	4f25      	ldr	r7, [pc, #148]	; (1a46c <net_context_recv+0x110>)
   1a3d6:	9701      	str	r7, [sp, #4]
   1a3d8:	b2ad      	uxth	r5, r5
   1a3da:	bf14      	ite	ne
   1a3dc:	f104 0114 	addne.w	r1, r4, #20
   1a3e0:	2100      	moveq	r1, #0
   1a3e2:	9500      	str	r5, [sp, #0]
   1a3e4:	b29b      	uxth	r3, r3
   1a3e6:	f005 fb11 	bl	1fa0c <net_conn_register>
#endif /* CONFIG_NET_OFFLOAD */

#if defined(CONFIG_NET_UDP)
	if (net_context_get_ip_proto(context) == IPPROTO_UDP) {
		int ret = recv_udp(context, cb, timeout, user_data);
		if (ret < 0) {
   1a3ea:	2800      	cmp	r0, #0
   1a3ec:	da0e      	bge.n	1a40c <net_context_recv+0xb0>
		}
	}
#endif /* CONFIG_NET_CONTEXT_SYNC_RECV */

	return 0;
}
   1a3ee:	b00f      	add	sp, #60	; 0x3c
   1a3f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (context->tcp->flags & NET_TCP_IS_SHUTDOWN) {
   1a3f4:	6e03      	ldr	r3, [r0, #96]	; 0x60
   1a3f6:	f8b3 20bc 	ldrh.w	r2, [r3, #188]	; 0xbc
   1a3fa:	05d2      	lsls	r2, r2, #23
   1a3fc:	d415      	bmi.n	1a42a <net_context_recv+0xce>
		} else if (net_context_get_state(context)
   1a3fe:	f3c5 0541 	ubfx	r5, r5, #1, #2
   1a402:	2d02      	cmp	r5, #2
   1a404:	d114      	bne.n	1a430 <net_context_recv+0xd4>
		context->recv_cb = cb;
   1a406:	6307      	str	r7, [r0, #48]	; 0x30
		context->tcp->recv_user_data = user_data;
   1a408:	f8c3 8004 	str.w	r8, [r3, #4]
	if (timeout) {
   1a40c:	b146      	cbz	r6, 1a420 <net_context_recv+0xc4>
 */
__syscall void k_sem_reset(struct k_sem *sem);

static inline void _impl_k_sem_reset(struct k_sem *sem)
{
	sem->count = 0;
   1a40e:	2300      	movs	r3, #0
   1a410:	64e3      	str	r3, [r4, #76]	; 0x4c
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   1a412:	4631      	mov	r1, r6
   1a414:	f104 0044 	add.w	r0, r4, #68	; 0x44
   1a418:	f007 fc28 	bl	21c6c <_impl_k_sem_take>
		if (ret == -EAGAIN) {
   1a41c:	300b      	adds	r0, #11
   1a41e:	d00a      	beq.n	1a436 <net_context_recv+0xda>
	return 0;
   1a420:	2000      	movs	r0, #0
   1a422:	e7e4      	b.n	1a3ee <net_context_recv+0x92>
		return -EBADF;
   1a424:	f06f 0008 	mvn.w	r0, #8
   1a428:	e7e1      	b.n	1a3ee <net_context_recv+0x92>
			return -ESHUTDOWN;
   1a42a:	f06f 0039 	mvn.w	r0, #57	; 0x39
   1a42e:	e7de      	b.n	1a3ee <net_context_recv+0x92>
			return -ENOTCONN;
   1a430:	f06f 0038 	mvn.w	r0, #56	; 0x38
   1a434:	e7db      	b.n	1a3ee <net_context_recv+0x92>
			return -ETIMEDOUT;
   1a436:	f06f 003b 	mvn.w	r0, #59	; 0x3b
   1a43a:	e7d8      	b.n	1a3ee <net_context_recv+0x92>
		if (net_sin6_ptr(&context->local)->sin6_addr) {
   1a43c:	68e2      	ldr	r2, [r4, #12]
   1a43e:	b18a      	cbz	r2, 1a464 <net_context_recv+0x108>
			net_ipaddr_copy(&net_sin6(&local_addr)->sin6_addr,
   1a440:	ad04      	add	r5, sp, #16
   1a442:	f102 0910 	add.w	r9, r2, #16
   1a446:	462b      	mov	r3, r5
   1a448:	6810      	ldr	r0, [r2, #0]
   1a44a:	6851      	ldr	r1, [r2, #4]
   1a44c:	46ac      	mov	ip, r5
   1a44e:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   1a452:	3208      	adds	r2, #8
   1a454:	454a      	cmp	r2, r9
   1a456:	4665      	mov	r5, ip
   1a458:	d1f6      	bne.n	1a448 <net_context_recv+0xec>
   1a45a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1a45c:	ad09      	add	r5, sp, #36	; 0x24
   1a45e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
			laddr = &local_addr;
   1a462:	aa08      	add	r2, sp, #32
			net_sin6((struct sockaddr *)&context->local)->sin6_port;
   1a464:	8965      	ldrh	r5, [r4, #10]
		net_sin6(&local_addr)->sin6_port =
   1a466:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
   1a46a:	e7a1      	b.n	1a3b0 <net_context_recv+0x54>
   1a46c:	00019705 	.word	0x00019705

0001a470 <net_context_init>:
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   1a470:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1a474:	2101      	movs	r1, #1
   1a476:	4801      	ldr	r0, [pc, #4]	; (1a47c <net_context_init+0xc>)
   1a478:	f007 bb8e 	b.w	21b98 <_impl_k_sem_init>
   1a47c:	20002640 	.word	0x20002640

0001a480 <net_is_ipv6_addr_loopback>:
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1a480:	6802      	ldr	r2, [r0, #0]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1a482:	b99a      	cbnz	r2, 1a4ac <net_is_ipv6_addr_loopback+0x2c>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1a484:	6843      	ldr	r3, [r0, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1a486:	b98b      	cbnz	r3, 1a4ac <net_is_ipv6_addr_loopback+0x2c>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1a488:	6882      	ldr	r2, [r0, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1a48a:	b97a      	cbnz	r2, 1a4ac <net_is_ipv6_addr_loopback+0x2c>
		ntohl(UNALIGNED_GET(&addr->s6_addr32[3])) == 1;
   1a48c:	68c3      	ldr	r3, [r0, #12]
 *
   1a48e:	0618      	lsls	r0, r3, #24

   1a490:	0a1a      	lsrs	r2, r3, #8
 * @brief Check if the IPv6 address is a multicast address.
   1a492:	ea40 6013 	orr.w	r0, r0, r3, lsr #24

   1a496:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 * @brief Check if the IPv6 address is a multicast address.
   1a49a:	021b      	lsls	r3, r3, #8
   1a49c:	4310      	orrs	r0, r2
   1a49e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   1a4a2:	4318      	orrs	r0, r3
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1a4a4:	1e43      	subs	r3, r0, #1
   1a4a6:	4258      	negs	r0, r3
   1a4a8:	4158      	adcs	r0, r3
   1a4aa:	4770      	bx	lr
   1a4ac:	2000      	movs	r0, #0
   1a4ae:	4770      	bx	lr

0001a4b0 <processing_data>:
		locally_routed = true;
	}
#endif

	/* If there is no data, then drop the packet. */
	if (!pkt->frags) {
   1a4b0:	6883      	ldr	r3, [r0, #8]

	return NET_DROP;
}

static void processing_data(struct net_pkt *pkt, bool is_loopback)
{
   1a4b2:	b510      	push	{r4, lr}
   1a4b4:	4604      	mov	r4, r0
	if (!pkt->frags) {
   1a4b6:	b1d3      	cbz	r3, 1a4ee <processing_data+0x3e>
	if (!is_loopback && !locally_routed) {
   1a4b8:	b189      	cbz	r1, 1a4de <processing_data+0x2e>
	return pkt->frags->data;
   1a4ba:	68a3      	ldr	r3, [r4, #8]
	switch (NET_IPV6_HDR(pkt)->vtc & 0xf0) {
   1a4bc:	689b      	ldr	r3, [r3, #8]
   1a4be:	781b      	ldrb	r3, [r3, #0]
   1a4c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   1a4c4:	2b60      	cmp	r3, #96	; 0x60
   1a4c6:	d112      	bne.n	1a4ee <processing_data+0x3e>
	pkt->family = family;
   1a4c8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   1a4cc:	220a      	movs	r2, #10
   1a4ce:	f362 03c6 	bfi	r3, r2, #3, #4
   1a4d2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		return net_ipv6_process_pkt(pkt);
   1a4d6:	4620      	mov	r0, r4
   1a4d8:	f004 fe74 	bl	1f1c4 <net_ipv6_process_pkt>
   1a4dc:	e006      	b.n	1a4ec <processing_data+0x3c>
   1a4de:	6940      	ldr	r0, [r0, #20]
 * @return verdict about the packet
 */
static inline enum net_verdict net_if_recv_data(struct net_if *iface,
						struct net_pkt *pkt)
{
	return iface->l2->recv(iface, pkt);
   1a4e0:	6843      	ldr	r3, [r0, #4]
   1a4e2:	4621      	mov	r1, r4
   1a4e4:	681b      	ldr	r3, [r3, #0]
   1a4e6:	4798      	blx	r3
		if (ret != NET_CONTINUE) {
   1a4e8:	2801      	cmp	r0, #1
   1a4ea:	d0e6      	beq.n	1a4ba <processing_data+0xa>
	switch (process_data(pkt, is_loopback)) {
   1a4ec:	b120      	cbz	r0, 1a4f8 <processing_data+0x48>
		NET_DBG("Consumed pkt %p", pkt);
		break;
	case NET_DROP:
	default:
		NET_DBG("Dropping pkt %p", pkt);
		net_pkt_unref(pkt);
   1a4ee:	4620      	mov	r0, r4
		break;
	}
}
   1a4f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		net_pkt_unref(pkt);
   1a4f4:	f001 b9c7 	b.w	1b886 <net_pkt_unref>
   1a4f8:	bd10      	pop	{r4, pc}
	...

0001a4fc <net_init>:

	NET_DBG("Network L2 init done");
}

static int net_init(struct device *unused)
{
   1a4fc:	b510      	push	{r4, lr}
   1a4fe:	b086      	sub	sp, #24

	net_hostname_init();

	NET_DBG("Priority %d", CONFIG_NET_INIT_PRIO);

	net_pkt_init();
   1a500:	f001 fcbf 	bl	1be82 <net_pkt_init>

	net_context_init();
   1a504:	f7ff ffb4 	bl	1a470 <net_context_init>
	net_icmpv6_init();
   1a508:	f002 ffb0 	bl	1d46c <net_icmpv6_init>
	net_ipv6_init();
   1a50c:	f004 ffaa 	bl	1f464 <net_ipv6_init>
	net_conn_init();
   1a510:	f005 fc04 	bl	1fd1c <net_conn_init>
	net_udp_init();
   1a514:	f006 fbea 	bl	20cec <net_udp_init>
	net_tcp_init();
   1a518:	f005 fd99 	bl	2004e <net_tcp_init>
	net_route_init();
   1a51c:	f005 fa29 	bl	1f972 <net_route_init>

	l2_init();
	l3_init();

	net_mgmt_event_init();
   1a520:	f005 f8a2 	bl	1f668 <net_mgmt_event_init>
	k_fifo_init(&rx_queue);
   1a524:	480b      	ldr	r0, [pc, #44]	; (1a554 <net_init+0x58>)
   1a526:	f007 f8c5 	bl	216b4 <k_queue_init>

   1a52a:	2301      	movs	r3, #1
   1a52c:	2400      	movs	r4, #0
   1a52e:	9304      	str	r3, [sp, #16]
   1a530:	f06f 0307 	mvn.w	r3, #7
   1a534:	9303      	str	r3, [sp, #12]
   1a536:	9405      	str	r4, [sp, #20]
   1a538:	9402      	str	r4, [sp, #8]
   1a53a:	9401      	str	r4, [sp, #4]
   1a53c:	9400      	str	r4, [sp, #0]
   1a53e:	4b06      	ldr	r3, [pc, #24]	; (1a558 <net_init+0x5c>)
   1a540:	4906      	ldr	r1, [pc, #24]	; (1a55c <net_init+0x60>)
   1a542:	4807      	ldr	r0, [pc, #28]	; (1a560 <net_init+0x64>)
   1a544:	f240 52dc 	movw	r2, #1500	; 0x5dc
   1a548:	f007 fd6c 	bl	22024 <_impl_k_thread_create>
		return status;
	}
#endif

	return status;
}
   1a54c:	4620      	mov	r0, r4
   1a54e:	b006      	add	sp, #24
   1a550:	bd10      	pop	{r4, pc}
   1a552:	bf00      	nop
   1a554:	200026a8 	.word	0x200026a8
   1a558:	0001a565 	.word	0x0001a565
   1a55c:	20006138 	.word	0x20006138
   1a560:	200026b8 	.word	0x200026b8

0001a564 <net_rx_thread>:
{
   1a564:	b538      	push	{r3, r4, r5, lr}
	net_if_init(&startup_sync);
   1a566:	4810      	ldr	r0, [pc, #64]	; (1a5a8 <net_rx_thread+0x44>)
		pkt = k_fifo_get(&rx_queue, K_FOREVER);
   1a568:	4d10      	ldr	r5, [pc, #64]	; (1a5ac <net_rx_thread+0x48>)
		if ((unsigned char)stack[i] == 0xaa) {
   1a56a:	4c11      	ldr	r4, [pc, #68]	; (1a5b0 <net_rx_thread+0x4c>)
	net_if_init(&startup_sync);
   1a56c:	f000 ffb8 	bl	1b4e0 <net_if_init>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   1a570:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a574:	480c      	ldr	r0, [pc, #48]	; (1a5a8 <net_rx_thread+0x44>)
   1a576:	f007 fb79 	bl	21c6c <_impl_k_sem_take>
	net_if_post_init();
   1a57a:	f000 ffff 	bl	1b57c <net_if_post_init>
		pkt = k_fifo_get(&rx_queue, K_FOREVER);
   1a57e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a582:	4628      	mov	r0, r5
   1a584:	f007 f8eb 	bl	2175e <k_queue_get>
	for (i = 0; i < size; i++) {
   1a588:	2300      	movs	r3, #0
   1a58a:	f240 52dc 	movw	r2, #1500	; 0x5dc
		if ((unsigned char)stack[i] == 0xaa) {
   1a58e:	5d19      	ldrb	r1, [r3, r4]
   1a590:	29aa      	cmp	r1, #170	; 0xaa
   1a592:	d102      	bne.n	1a59a <net_rx_thread+0x36>
	for (i = 0; i < size; i++) {
   1a594:	3301      	adds	r3, #1
   1a596:	4293      	cmp	r3, r2
   1a598:	d1f9      	bne.n	1a58e <net_rx_thread+0x2a>
		processing_data(pkt, false);
   1a59a:	2100      	movs	r1, #0
   1a59c:	f7ff ff88 	bl	1a4b0 <processing_data>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   1a5a0:	f007 fa88 	bl	21ab4 <_impl_k_yield>
   1a5a4:	e7eb      	b.n	1a57e <net_rx_thread+0x1a>
   1a5a6:	bf00      	nop
   1a5a8:	2000a9fc 	.word	0x2000a9fc
   1a5ac:	200026a8 	.word	0x200026a8
   1a5b0:	20006138 	.word	0x20006138

0001a5b4 <net_send_data>:
{
   1a5b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (!pkt || !pkt->frags) {
   1a5b8:	4604      	mov	r4, r0
{
   1a5ba:	b091      	sub	sp, #68	; 0x44
	if (!pkt || !pkt->frags) {
   1a5bc:	2800      	cmp	r0, #0
   1a5be:	d07f      	beq.n	1a6c0 <net_send_data+0x10c>
   1a5c0:	6882      	ldr	r2, [r0, #8]
   1a5c2:	2a00      	cmp	r2, #0
   1a5c4:	d07c      	beq.n	1a6c0 <net_send_data+0x10c>
	if (!net_pkt_iface(pkt)) {
   1a5c6:	6943      	ldr	r3, [r0, #20]
   1a5c8:	2b00      	cmp	r3, #0
   1a5ca:	d07c      	beq.n	1a6c6 <net_send_data+0x112>
	return pkt->family;
   1a5cc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
	if (net_pkt_family(pkt) == AF_INET6) {
   1a5d0:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   1a5d4:	2b0a      	cmp	r3, #10
   1a5d6:	d169      	bne.n	1a6ac <net_send_data+0xf8>
		if (net_ipv6_addr_cmp(&NET_IPV6_HDR(pkt)->dst,
   1a5d8:	6895      	ldr	r5, [r2, #8]
   1a5da:	f003 f9df 	bl	1d99c <net_ipv6_unspecified_address>
   1a5de:	3518      	adds	r5, #24
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1a5e0:	4601      	mov	r1, r0
   1a5e2:	2210      	movs	r2, #16
   1a5e4:	4628      	mov	r0, r5
   1a5e6:	f7e6 f8a7 	bl	738 <memcmp>
   1a5ea:	b920      	cbnz	r0, 1a5f6 <net_send_data+0x42>
		return -EINVAL;
   1a5ec:	f06f 0030 	mvn.w	r0, #48	; 0x30
}
   1a5f0:	b011      	add	sp, #68	; 0x44
   1a5f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return pkt->frags->data;
   1a5f6:	68a3      	ldr	r3, [r4, #8]
		if (net_is_ipv6_addr_loopback(&NET_IPV6_HDR(pkt)->dst) ||
   1a5f8:	689d      	ldr	r5, [r3, #8]
   1a5fa:	3518      	adds	r5, #24
   1a5fc:	4628      	mov	r0, r5
   1a5fe:	f7ff ff3f 	bl	1a480 <net_is_ipv6_addr_loopback>
   1a602:	4601      	mov	r1, r0
   1a604:	2800      	cmp	r0, #0
   1a606:	d045      	beq.n	1a694 <net_send_data+0xe0>
   1a608:	68a3      	ldr	r3, [r4, #8]
   1a60a:	f8d3 e008 	ldr.w	lr, [r3, #8]
			net_ipaddr_copy(&addr, &NET_IPV6_HDR(pkt)->src);
   1a60e:	aa0c      	add	r2, sp, #48	; 0x30
   1a610:	f10e 0308 	add.w	r3, lr, #8
   1a614:	f10e 0618 	add.w	r6, lr, #24
   1a618:	461d      	mov	r5, r3
   1a61a:	4694      	mov	ip, r2
   1a61c:	6818      	ldr	r0, [r3, #0]
   1a61e:	6859      	ldr	r1, [r3, #4]
   1a620:	4617      	mov	r7, r2
   1a622:	c703      	stmia	r7!, {r0, r1}
   1a624:	3308      	adds	r3, #8
   1a626:	42b3      	cmp	r3, r6
   1a628:	463a      	mov	r2, r7
   1a62a:	d1f7      	bne.n	1a61c <net_send_data+0x68>
   1a62c:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1a630:	f10d 0820 	add.w	r8, sp, #32
			net_ipaddr_copy(&addr, &NET_IPV6_HDR(pkt)->src);
   1a634:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   1a638:	466f      	mov	r7, sp
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1a63a:	f10e 0328 	add.w	r3, lr, #40	; 0x28
   1a63e:	4632      	mov	r2, r6
   1a640:	46c6      	mov	lr, r8
   1a642:	6810      	ldr	r0, [r2, #0]
   1a644:	6851      	ldr	r1, [r2, #4]
   1a646:	46c1      	mov	r9, r8
   1a648:	e8a9 0003 	stmia.w	r9!, {r0, r1}
   1a64c:	3208      	adds	r2, #8
   1a64e:	429a      	cmp	r2, r3
   1a650:	46c8      	mov	r8, r9
   1a652:	d1f6      	bne.n	1a642 <net_send_data+0x8e>
   1a654:	46f0      	mov	r8, lr
   1a656:	462b      	mov	r3, r5
   1a658:	4642      	mov	r2, r8
   1a65a:	ca03      	ldmia	r2!, {r0, r1}
   1a65c:	4562      	cmp	r2, ip
   1a65e:	6018      	str	r0, [r3, #0]
   1a660:	6059      	str	r1, [r3, #4]
   1a662:	4690      	mov	r8, r2
   1a664:	f103 0308 	add.w	r3, r3, #8
   1a668:	d1f6      	bne.n	1a658 <net_send_data+0xa4>
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, &addr);
   1a66a:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
   1a66e:	ad04      	add	r5, sp, #16
   1a670:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   1a674:	4633      	mov	r3, r6
   1a676:	462a      	mov	r2, r5
   1a678:	ca03      	ldmia	r2!, {r0, r1}
   1a67a:	4572      	cmp	r2, lr
   1a67c:	6018      	str	r0, [r3, #0]
   1a67e:	6059      	str	r1, [r3, #4]
   1a680:	4615      	mov	r5, r2
   1a682:	f103 0308 	add.w	r3, r3, #8
   1a686:	d1f6      	bne.n	1a676 <net_send_data+0xc2>
		processing_data(pkt, true);
   1a688:	4620      	mov	r0, r4
   1a68a:	2101      	movs	r1, #1
   1a68c:	f7ff ff10 	bl	1a4b0 <processing_data>
		return 0;
   1a690:	2000      	movs	r0, #0
   1a692:	e7ad      	b.n	1a5f0 <net_send_data+0x3c>
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
   1a694:	4628      	mov	r0, r5
   1a696:	f000 f91b 	bl	1a8d0 <net_if_ipv6_addr_lookup>
		if (net_is_ipv6_addr_loopback(&NET_IPV6_HDR(pkt)->dst) ||
   1a69a:	2800      	cmp	r0, #0
   1a69c:	d1b4      	bne.n	1a608 <net_send_data+0x54>
   1a69e:	68a3      	ldr	r3, [r4, #8]
		if (net_is_ipv6_addr_loopback(&NET_IPV6_HDR(pkt)->src)) {
   1a6a0:	6898      	ldr	r0, [r3, #8]
   1a6a2:	3008      	adds	r0, #8
   1a6a4:	f7ff feec 	bl	1a480 <net_is_ipv6_addr_loopback>
   1a6a8:	2800      	cmp	r0, #0
   1a6aa:	d19f      	bne.n	1a5ec <net_send_data+0x38>
	if (net_if_send_data(net_pkt_iface(pkt), pkt) == NET_DROP) {
   1a6ac:	4621      	mov	r1, r4
   1a6ae:	6960      	ldr	r0, [r4, #20]
   1a6b0:	f000 fdd8 	bl	1b264 <net_if_send_data>
	return 0;
   1a6b4:	2802      	cmp	r0, #2
   1a6b6:	bf0c      	ite	eq
   1a6b8:	f06f 0004 	mvneq.w	r0, #4
   1a6bc:	2000      	movne	r0, #0
   1a6be:	e797      	b.n	1a5f0 <net_send_data+0x3c>
		return -ENODATA;
   1a6c0:	f06f 004d 	mvn.w	r0, #77	; 0x4d
   1a6c4:	e794      	b.n	1a5f0 <net_send_data+0x3c>
		return -EINVAL;
   1a6c6:	f06f 0015 	mvn.w	r0, #21
   1a6ca:	e791      	b.n	1a5f0 <net_send_data+0x3c>

0001a6cc <net_recv_data>:
	if (!pkt->frags) {
   1a6cc:	688a      	ldr	r2, [r1, #8]
{
   1a6ce:	b508      	push	{r3, lr}
	if (!pkt->frags) {
   1a6d0:	b18a      	cbz	r2, 1a6f6 <net_recv_data+0x2a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1a6d2:	f3bf 8f5b 	dmb	ish
   1a6d6:	68c2      	ldr	r2, [r0, #12]
   1a6d8:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(iface->flags, NET_IF_UP)) {
   1a6dc:	07d2      	lsls	r2, r2, #31
   1a6de:	d50d      	bpl.n	1a6fc <net_recv_data+0x30>
	pkt->iface = iface;
   1a6e0:	6148      	str	r0, [r1, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1a6e2:	7d42      	ldrb	r2, [r0, #21]
   1a6e4:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1a6e8:	f881 202d 	strb.w	r2, [r1, #45]	; 0x2d
	k_fifo_put(&rx_queue, pkt);
   1a6ec:	4805      	ldr	r0, [pc, #20]	; (1a704 <net_recv_data+0x38>)
   1a6ee:	f007 f812 	bl	21716 <k_queue_append>
	return 0;
   1a6f2:	2000      	movs	r0, #0
   1a6f4:	bd08      	pop	{r3, pc}
		return -ENODATA;
   1a6f6:	f06f 004d 	mvn.w	r0, #77	; 0x4d
   1a6fa:	bd08      	pop	{r3, pc}
		return -ENETDOWN;
   1a6fc:	f06f 003d 	mvn.w	r0, #61	; 0x3d
}
   1a700:	bd08      	pop	{r3, pc}
   1a702:	bf00      	nop
   1a704:	200026a8 	.word	0x200026a8

0001a708 <ipv6_addr_expired>:
						  lifetime);

	NET_DBG("IPv6 address %s is deprecated",
		net_sprint_ipv6_addr(&ifaddr->address.in6_addr));

	ifaddr->addr_state = NET_ADDR_DEPRECATED;
   1a708:	2302      	movs	r3, #2
   1a70a:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
   1a70e:	4770      	bx	lr

0001a710 <prefix_lf_timeout>:
		CONTAINER_OF(work, struct net_if_ipv6_prefix, lifetime);

	NET_DBG("Prefix %s/%d expired",
		net_sprint_ipv6_addr(&prefix->prefix), prefix->len);

	prefix->is_used = false;
   1a710:	2300      	movs	r3, #0
   1a712:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
   1a716:	4770      	bx	lr

0001a718 <ipv6_router_expired>:
						    lifetime);

	NET_DBG("IPv6 router %s is expired",
		net_sprint_ipv6_addr(&router->address.in6_addr));

	router->is_used = false;
   1a718:	2300      	movs	r3, #0
   1a71a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
   1a71e:	4770      	bx	lr

0001a720 <net_if_ipv6_get_best_match>:
}

static inline struct in6_addr *net_if_ipv6_get_best_match(struct net_if *iface,
							  struct in6_addr *dst,
							  u8_t *best_so_far)
{
   1a720:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a724:	f100 0430 	add.w	r4, r0, #48	; 0x30
   1a728:	f500 76ba 	add.w	r6, r0, #372	; 0x174
	    addr->address.family == AF_INET6 &&
   1a72c:	f248 08fe 	movw	r8, #33022	; 0x80fe
	struct in6_addr *src = NULL;
   1a730:	2000      	movs	r0, #0
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
   1a732:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
   1a736:	b153      	cbz	r3, 1a74e <net_if_ipv6_get_best_match+0x2e>
   1a738:	f994 3061 	ldrsb.w	r3, [r4, #97]	; 0x61
   1a73c:	2b01      	cmp	r3, #1
   1a73e:	d106      	bne.n	1a74e <net_if_ipv6_get_best_match+0x2e>
   1a740:	f834 3c04 	ldrh.w	r3, [r4, #-4]
   1a744:	2b0a      	cmp	r3, #10
   1a746:	d102      	bne.n	1a74e <net_if_ipv6_get_best_match+0x2e>
	    addr->address.family == AF_INET6 &&
   1a748:	8823      	ldrh	r3, [r4, #0]
   1a74a:	4543      	cmp	r3, r8
   1a74c:	d111      	bne.n	1a772 <net_if_ipv6_get_best_match+0x52>
   1a74e:	346c      	adds	r4, #108	; 0x6c
	u8_t i, len;

	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1a750:	42b4      	cmp	r4, r6
   1a752:	d1ee      	bne.n	1a732 <net_if_ipv6_get_best_match+0x12>
   1a754:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xor = src->s6_addr[j] ^ dst->s6_addr[j];
   1a758:	ea85 0509 	eor.w	r5, r5, r9
   1a75c:	b2ff      	uxtb	r7, r7
				if (!(xor & 0x80)) {
   1a75e:	f015 0f80 	tst.w	r5, #128	; 0x80
   1a762:	d116      	bne.n	1a792 <net_if_ipv6_get_best_match+0x72>
					len++;
   1a764:	3301      	adds	r3, #1
   1a766:	b2db      	uxtb	r3, r3
					xor <<= 1;
   1a768:	006d      	lsls	r5, r5, #1
			for (k = 0; k < 8; k++) {
   1a76a:	42bb      	cmp	r3, r7
					xor <<= 1;
   1a76c:	b2ed      	uxtb	r5, r5
			for (k = 0; k < 8; k++) {
   1a76e:	d1f6      	bne.n	1a75e <net_if_ipv6_get_best_match+0x3e>
   1a770:	e00f      	b.n	1a792 <net_if_ipv6_get_best_match+0x72>
   1a772:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
   1a776:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
	u8_t len = 0;
   1a77a:	2300      	movs	r3, #0
		if (src->s6_addr[j] == dst->s6_addr[j]) {
   1a77c:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
   1a780:	f81e 9f01 	ldrb.w	r9, [lr, #1]!
   1a784:	454d      	cmp	r5, r9
   1a786:	f103 0708 	add.w	r7, r3, #8
   1a78a:	d1e5      	bne.n	1a758 <net_if_ipv6_get_best_match+0x38>
			len += 8;
   1a78c:	b2fb      	uxtb	r3, r7
	for (j = 0; j < 16; j++) {
   1a78e:	2b80      	cmp	r3, #128	; 0x80
   1a790:	d1f4      	bne.n	1a77c <net_if_ipv6_get_best_match+0x5c>
			continue;
		}

		len = get_length(dst,
				 &iface->ipv6.unicast[i].address.in6_addr);
		if (len >= *best_so_far) {
   1a792:	7815      	ldrb	r5, [r2, #0]
   1a794:	429d      	cmp	r5, r3
			*best_so_far = len;
   1a796:	bf9c      	itt	ls
   1a798:	7013      	strbls	r3, [r2, #0]
   1a79a:	4620      	movls	r0, r4
   1a79c:	e7d7      	b.n	1a74e <net_if_ipv6_get_best_match+0x2e>

0001a79e <atomic_test_bit>:
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1a79e:	094b      	lsrs	r3, r1, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1a7a0:	f3bf 8f5b 	dmb	ish
   1a7a4:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
   1a7a8:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
   1a7ac:	f001 011f 	and.w	r1, r1, #31
   1a7b0:	4108      	asrs	r0, r1
}
   1a7b2:	f000 0001 	and.w	r0, r0, #1
   1a7b6:	4770      	bx	lr

0001a7b8 <net_is_ipv6_prefix>:
	if (length > 128) {
   1a7b8:	2a80      	cmp	r2, #128	; 0x80
{
   1a7ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a7bc:	4607      	mov	r7, r0
   1a7be:	460e      	mov	r6, r1
   1a7c0:	4614      	mov	r4, r2
	if (length > 128) {
   1a7c2:	d901      	bls.n	1a7c8 <net_is_ipv6_prefix+0x10>
		return false;
   1a7c4:	2000      	movs	r0, #0
   1a7c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (memcmp(addr1, addr2, bytes)) {
   1a7c8:	08d5      	lsrs	r5, r2, #3
   1a7ca:	462a      	mov	r2, r5
   1a7cc:	f7e5 ffb4 	bl	738 <memcmp>
   1a7d0:	2800      	cmp	r0, #0
   1a7d2:	d1f7      	bne.n	1a7c4 <net_is_ipv6_prefix+0xc>
	u8_t bits = 128 - length;
   1a7d4:	f1c4 0480 	rsb	r4, r4, #128	; 0x80
	if (!remain) {
   1a7d8:	f014 0407 	ands.w	r4, r4, #7
   1a7dc:	d00f      	beq.n	1a7fe <net_is_ipv6_prefix+0x46>
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
   1a7de:	5d73      	ldrb	r3, [r6, r5]
   1a7e0:	5d7a      	ldrb	r2, [r7, r5]
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
   1a7e2:	f1c4 0108 	rsb	r1, r4, #8
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
   1a7e6:	405a      	eors	r2, r3
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
   1a7e8:	23ff      	movs	r3, #255	; 0xff
   1a7ea:	408b      	lsls	r3, r1
   1a7ec:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
   1a7f0:	fa03 f404 	lsl.w	r4, r3, r4
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
   1a7f4:	4222      	tst	r2, r4
   1a7f6:	bf0c      	ite	eq
   1a7f8:	2001      	moveq	r0, #1
   1a7fa:	2000      	movne	r0, #0
   1a7fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return true;
   1a7fe:	2001      	movs	r0, #1
}
   1a800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001a802 <net_ipv6_addr_cmp>:
{
   1a802:	b508      	push	{r3, lr}
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1a804:	2210      	movs	r2, #16
   1a806:	f7e5 ff97 	bl	738 <memcmp>
}
   1a80a:	fab0 f080 	clz	r0, r0
   1a80e:	0940      	lsrs	r0, r0, #5
   1a810:	bd08      	pop	{r3, pc}
	...

0001a814 <k_delayed_work_submit>:
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   1a814:	460a      	mov	r2, r1
   1a816:	4601      	mov	r1, r0
   1a818:	4801      	ldr	r0, [pc, #4]	; (1a820 <k_delayed_work_submit+0xc>)
   1a81a:	f007 bd6b 	b.w	222f4 <k_delayed_work_submit_to_queue>
   1a81e:	bf00      	nop
   1a820:	20003340 	.word	0x20003340

0001a824 <net_mgmt_event_notify>:
void net_mgmt_event_notify_with_info(u32_t mgmt_event, struct net_if *iface,
				     void *info, size_t length);

static inline void net_mgmt_event_notify(u32_t mgmt_event, struct net_if *iface)
{
	net_mgmt_event_notify_with_info(mgmt_event, iface, NULL, 0);
   1a824:	2300      	movs	r3, #0
   1a826:	461a      	mov	r2, r3
   1a828:	f004 bee0 	b.w	1f5ec <net_mgmt_event_notify_with_info>

0001a82c <net_if_ipv6_start_dad>:
{
   1a82c:	b510      	push	{r4, lr}
   1a82e:	460c      	mov	r4, r1
	ifaddr->addr_state = NET_ADDR_TENTATIVE;
   1a830:	2100      	movs	r1, #0
{
   1a832:	4602      	mov	r2, r0
	ifaddr->addr_state = NET_ADDR_TENTATIVE;
   1a834:	f884 1065 	strb.w	r1, [r4, #101]	; 0x65
 */
static inline bool net_if_is_up(struct net_if *iface)
{
	NET_ASSERT(iface);

	return atomic_test_bit(iface->flags, NET_IF_UP);
   1a838:	300c      	adds	r0, #12
   1a83a:	f7ff ffb0 	bl	1a79e <atomic_test_bit>
	if (net_if_is_up(iface)) {
   1a83e:	b170      	cbz	r0, 1a85e <net_if_ipv6_start_dad+0x32>
		ifaddr->dad_count = 1;
   1a840:	2301      	movs	r3, #1
   1a842:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
		if (!net_ipv6_start_dad(iface, ifaddr)) {
   1a846:	4621      	mov	r1, r4
   1a848:	4610      	mov	r0, r2
   1a84a:	f004 fb37 	bl	1eebc <net_ipv6_start_dad>
   1a84e:	b930      	cbnz	r0, 1a85e <net_if_ipv6_start_dad+0x32>
			k_delayed_work_submit(&ifaddr->dad_timer, DAD_TIMEOUT);
   1a850:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   1a854:	2164      	movs	r1, #100	; 0x64
}
   1a856:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			k_delayed_work_submit(&ifaddr->dad_timer, DAD_TIMEOUT);
   1a85a:	f7ff bfdb 	b.w	1a814 <k_delayed_work_submit>
   1a85e:	bd10      	pop	{r4, pc}

0001a860 <net_if_lookup_by_dev>:
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1a860:	4b06      	ldr	r3, [pc, #24]	; (1a87c <net_if_lookup_by_dev+0x1c>)
   1a862:	4a07      	ldr	r2, [pc, #28]	; (1a880 <net_if_lookup_by_dev+0x20>)
   1a864:	4293      	cmp	r3, r2
   1a866:	d102      	bne.n	1a86e <net_if_lookup_by_dev+0xe>
	return NULL;
   1a868:	2300      	movs	r3, #0
}
   1a86a:	4618      	mov	r0, r3
   1a86c:	4770      	bx	lr
		if (iface->dev == dev) {
   1a86e:	6819      	ldr	r1, [r3, #0]
   1a870:	4281      	cmp	r1, r0
   1a872:	d0fa      	beq.n	1a86a <net_if_lookup_by_dev+0xa>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1a874:	f503 7318 	add.w	r3, r3, #608	; 0x260
   1a878:	e7f4      	b.n	1a864 <net_if_lookup_by_dev+0x4>
   1a87a:	bf00      	nop
   1a87c:	2000ab20 	.word	0x2000ab20
   1a880:	2000ad80 	.word	0x2000ad80

0001a884 <net_if_get_default>:
}
   1a884:	4b02      	ldr	r3, [pc, #8]	; (1a890 <net_if_get_default+0xc>)
	if (__net_if_start == __net_if_end) {
   1a886:	4803      	ldr	r0, [pc, #12]	; (1a894 <net_if_get_default+0x10>)
}
   1a888:	4298      	cmp	r0, r3
   1a88a:	bf08      	it	eq
   1a88c:	2000      	moveq	r0, #0
   1a88e:	4770      	bx	lr
   1a890:	2000ad80 	.word	0x2000ad80
   1a894:	2000ab20 	.word	0x2000ab20

0001a898 <net_if_start_rs>:
{
   1a898:	b510      	push	{r4, lr}
   1a89a:	4604      	mov	r4, r0
	if (!net_ipv6_start_rs(iface)) {
   1a89c:	f004 fc5a 	bl	1f154 <net_ipv6_start_rs>
   1a8a0:	b938      	cbnz	r0, 1a8b2 <net_if_start_rs+0x1a>
		k_delayed_work_submit(&iface->ipv6.rs_timer, RS_TIMEOUT);
   1a8a2:	f504 7006 	add.w	r0, r4, #536	; 0x218
   1a8a6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
}
   1a8aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_delayed_work_submit(&iface->ipv6.rs_timer, RS_TIMEOUT);
   1a8ae:	f7ff bfb1 	b.w	1a814 <k_delayed_work_submit>
   1a8b2:	bd10      	pop	{r4, pc}

0001a8b4 <rs_timeout>:
	iface->ipv6.rs_count++;
   1a8b4:	f5a0 7006 	sub.w	r0, r0, #536	; 0x218
   1a8b8:	f890 324e 	ldrb.w	r3, [r0, #590]	; 0x24e
   1a8bc:	3301      	adds	r3, #1
   1a8be:	b2db      	uxtb	r3, r3
	if (iface->ipv6.rs_count < RS_COUNT) {
   1a8c0:	2b02      	cmp	r3, #2
	iface->ipv6.rs_count++;
   1a8c2:	f880 324e 	strb.w	r3, [r0, #590]	; 0x24e
	if (iface->ipv6.rs_count < RS_COUNT) {
   1a8c6:	d801      	bhi.n	1a8cc <rs_timeout+0x18>
		net_if_start_rs(iface);
   1a8c8:	f7ff bfe6 	b.w	1a898 <net_if_start_rs>
   1a8cc:	4770      	bx	lr
	...

0001a8d0 <net_if_ipv6_addr_lookup>:
{
   1a8d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1a8d4:	4c14      	ldr	r4, [pc, #80]	; (1a928 <net_if_ipv6_addr_lookup+0x58>)
   1a8d6:	f8df 8054 	ldr.w	r8, [pc, #84]	; 1a92c <net_if_ipv6_addr_lookup+0x5c>
{
   1a8da:	4681      	mov	r9, r0
   1a8dc:	460f      	mov	r7, r1
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1a8de:	4544      	cmp	r4, r8
   1a8e0:	d102      	bne.n	1a8e8 <net_if_ipv6_addr_lookup+0x18>
	return NULL;
   1a8e2:	2000      	movs	r0, #0
}
   1a8e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1a8e8:	f104 0630 	add.w	r6, r4, #48	; 0x30
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1a8ec:	2500      	movs	r5, #0
			if (!iface->ipv6.unicast[i].is_used ||
   1a8ee:	f896 3064 	ldrb.w	r3, [r6, #100]	; 0x64
   1a8f2:	b183      	cbz	r3, 1a916 <net_if_ipv6_addr_lookup+0x46>
   1a8f4:	f836 3c04 	ldrh.w	r3, [r6, #-4]
   1a8f8:	2b0a      	cmp	r3, #10
   1a8fa:	d10c      	bne.n	1a916 <net_if_ipv6_addr_lookup+0x46>
			if (net_is_ipv6_prefix(addr->s6_addr,
   1a8fc:	2280      	movs	r2, #128	; 0x80
   1a8fe:	4631      	mov	r1, r6
   1a900:	4648      	mov	r0, r9
   1a902:	f7ff ff59 	bl	1a7b8 <net_is_ipv6_prefix>
   1a906:	b130      	cbz	r0, 1a916 <net_if_ipv6_addr_lookup+0x46>
				if (ret) {
   1a908:	b107      	cbz	r7, 1a90c <net_if_ipv6_addr_lookup+0x3c>
					*ret = iface;
   1a90a:	603c      	str	r4, [r7, #0]
				return &iface->ipv6.unicast[i];
   1a90c:	f105 002c 	add.w	r0, r5, #44	; 0x2c
   1a910:	4420      	add	r0, r4
   1a912:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1a916:	356c      	adds	r5, #108	; 0x6c
		for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1a918:	f5b5 7fa2 	cmp.w	r5, #324	; 0x144
   1a91c:	f106 066c 	add.w	r6, r6, #108	; 0x6c
   1a920:	d1e5      	bne.n	1a8ee <net_if_ipv6_addr_lookup+0x1e>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1a922:	f504 7418 	add.w	r4, r4, #608	; 0x260
   1a926:	e7da      	b.n	1a8de <net_if_ipv6_addr_lookup+0xe>
   1a928:	2000ab20 	.word	0x2000ab20
   1a92c:	2000ad80 	.word	0x2000ad80

0001a930 <dad_timeout>:
{
   1a930:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct net_if *iface = NULL;
   1a932:	a902      	add	r1, sp, #8
   1a934:	2300      	movs	r3, #0
   1a936:	f841 3d04 	str.w	r3, [r1, #-4]!
	tmp = net_if_ipv6_addr_lookup(&ifaddr->address.in6_addr, &iface);
   1a93a:	f1a0 0438 	sub.w	r4, r0, #56	; 0x38
	ifaddr->addr_state = NET_ADDR_PREFERRED;
   1a93e:	2301      	movs	r3, #1
   1a940:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
	tmp = net_if_ipv6_addr_lookup(&ifaddr->address.in6_addr, &iface);
   1a944:	f1a0 053c 	sub.w	r5, r0, #60	; 0x3c
   1a948:	4620      	mov	r0, r4
   1a94a:	f7ff ffc1 	bl	1a8d0 <net_if_ipv6_addr_lookup>
	if (tmp == ifaddr) {
   1a94e:	4285      	cmp	r5, r0
   1a950:	d107      	bne.n	1a962 <dad_timeout+0x32>
		net_mgmt_event_notify(NET_EVENT_IPV6_DAD_SUCCEED, iface);
   1a952:	9901      	ldr	r1, [sp, #4]
   1a954:	4804      	ldr	r0, [pc, #16]	; (1a968 <dad_timeout+0x38>)
   1a956:	f7ff ff65 	bl	1a824 <net_mgmt_event_notify>
		net_ipv6_nbr_rm(iface, &ifaddr->address.in6_addr);
   1a95a:	4621      	mov	r1, r4
   1a95c:	9801      	ldr	r0, [sp, #4]
   1a95e:	f003 f803 	bl	1d968 <net_ipv6_nbr_rm>
}
   1a962:	b003      	add	sp, #12
   1a964:	bd30      	pop	{r4, r5, pc}
   1a966:	bf00      	nop
   1a968:	f060000d 	.word	0xf060000d

0001a96c <net_if_ipv6_addr_update_lifetime>:
	k_delayed_work_submit(&ifaddr->lifetime,
   1a96c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1a970:	4359      	muls	r1, r3
   1a972:	3014      	adds	r0, #20
   1a974:	f7ff bf4e 	b.w	1a814 <k_delayed_work_submit>

0001a978 <net_if_ipv6_addr_add>:
{
   1a978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a97c:	4604      	mov	r4, r0
   1a97e:	b089      	sub	sp, #36	; 0x24
   1a980:	460f      	mov	r7, r1
   1a982:	4693      	mov	fp, r2
   1a984:	469a      	mov	sl, r3
   1a986:	f100 0630 	add.w	r6, r0, #48	; 0x30
   1a98a:	2500      	movs	r5, #0
		if (!iface->ipv6.unicast[i].is_used) {
   1a98c:	f896 3064 	ldrb.w	r3, [r6, #100]	; 0x64
   1a990:	b153      	cbz	r3, 1a9a8 <net_if_ipv6_addr_add+0x30>
		if (net_ipv6_addr_cmp(addr,
   1a992:	4631      	mov	r1, r6
   1a994:	4638      	mov	r0, r7
   1a996:	f7ff ff34 	bl	1a802 <net_ipv6_addr_cmp>
   1a99a:	b128      	cbz	r0, 1a9a8 <net_if_ipv6_addr_add+0x30>
			return &iface->ipv6.unicast[i];
   1a99c:	352c      	adds	r5, #44	; 0x2c
   1a99e:	4425      	add	r5, r4
}
   1a9a0:	4628      	mov	r0, r5
   1a9a2:	b009      	add	sp, #36	; 0x24
   1a9a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a9a8:	356c      	adds	r5, #108	; 0x6c
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1a9aa:	f5b5 7fa2 	cmp.w	r5, #324	; 0x144
   1a9ae:	f106 066c 	add.w	r6, r6, #108	; 0x6c
   1a9b2:	d1eb      	bne.n	1a98c <net_if_ipv6_addr_add+0x14>
		if (iface->ipv6.unicast[i].is_used) {
   1a9b4:	f894 6094 	ldrb.w	r6, [r4, #148]	; 0x94
   1a9b8:	b156      	cbz	r6, 1a9d0 <net_if_ipv6_addr_add+0x58>
   1a9ba:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
   1a9be:	2b00      	cmp	r3, #0
   1a9c0:	f000 8094 	beq.w	1aaec <net_if_ipv6_addr_add+0x174>
   1a9c4:	f894 316c 	ldrb.w	r3, [r4, #364]	; 0x16c
   1a9c8:	2b00      	cmp	r3, #0
   1a9ca:	f040 8095 	bne.w	1aaf8 <net_if_ipv6_addr_add+0x180>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1a9ce:	2602      	movs	r6, #2
   1a9d0:	f04f 086c 	mov.w	r8, #108	; 0x6c
   1a9d4:	fb08 f806 	mul.w	r8, r8, r6
	ifaddr->is_used = true;
   1a9d8:	eb04 0908 	add.w	r9, r4, r8
   1a9dc:	2301      	movs	r3, #1
   1a9de:	f889 3094 	strb.w	r3, [r9, #148]	; 0x94
	ifaddr->address.family = AF_INET6;
   1a9e2:	230a      	movs	r3, #10
		net_if_addr_init(&iface->ipv6.unicast[i], addr, addr_type,
   1a9e4:	f108 052c 	add.w	r5, r8, #44	; 0x2c
	ifaddr->address.family = AF_INET6;
   1a9e8:	f8a9 302c 	strh.w	r3, [r9, #44]	; 0x2c
	net_ipaddr_copy(&ifaddr->address.in6_addr, addr);
   1a9ec:	463b      	mov	r3, r7
   1a9ee:	af04      	add	r7, sp, #16
		net_if_addr_init(&iface->ipv6.unicast[i], addr, addr_type,
   1a9f0:	4425      	add	r5, r4
	ifaddr->addr_type = addr_type;
   1a9f2:	f889 b090 	strb.w	fp, [r9, #144]	; 0x90
	net_ipaddr_copy(&ifaddr->address.in6_addr, addr);
   1a9f6:	f103 0c10 	add.w	ip, r3, #16
   1a9fa:	463a      	mov	r2, r7
   1a9fc:	6818      	ldr	r0, [r3, #0]
   1a9fe:	6859      	ldr	r1, [r3, #4]
   1aa00:	46be      	mov	lr, r7
   1aa02:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   1aa06:	3308      	adds	r3, #8
   1aa08:	4563      	cmp	r3, ip
   1aa0a:	4677      	mov	r7, lr
   1aa0c:	d1f6      	bne.n	1a9fc <net_if_ipv6_addr_add+0x84>
   1aa0e:	1d2f      	adds	r7, r5, #4
   1aa10:	f10d 0e20 	add.w	lr, sp, #32
   1aa14:	4613      	mov	r3, r2
   1aa16:	cb03      	ldmia	r3!, {r0, r1}
   1aa18:	4573      	cmp	r3, lr
   1aa1a:	6038      	str	r0, [r7, #0]
   1aa1c:	6079      	str	r1, [r7, #4]
   1aa1e:	461a      	mov	r2, r3
   1aa20:	f107 0708 	add.w	r7, r7, #8
   1aa24:	d1f6      	bne.n	1aa14 <net_if_ipv6_addr_add+0x9c>
	k_delayed_work_init(&ifaddr->dad_timer, dad_timeout);
   1aa26:	f108 0068 	add.w	r0, r8, #104	; 0x68
   1aa2a:	4934      	ldr	r1, [pc, #208]	; (1aafc <net_if_ipv6_addr_add+0x184>)
   1aa2c:	4420      	add	r0, r4
   1aa2e:	f007 fbe9 	bl	22204 <k_delayed_work_init>
   1aa32:	236c      	movs	r3, #108	; 0x6c
		ifaddr->is_infinite = false;
   1aa34:	fb03 4306 	mla	r3, r3, r6, r4
	if (vlifetime) {
   1aa38:	f1ba 0f00 	cmp.w	sl, #0
   1aa3c:	d058      	beq.n	1aaf0 <net_if_ipv6_addr_add+0x178>
		ifaddr->is_infinite = false;
   1aa3e:	2200      	movs	r2, #0
		k_delayed_work_init(&ifaddr->lifetime, ipv6_addr_expired);
   1aa40:	f108 0040 	add.w	r0, r8, #64	; 0x40
   1aa44:	492e      	ldr	r1, [pc, #184]	; (1ab00 <net_if_ipv6_addr_add+0x188>)
		ifaddr->is_infinite = false;
   1aa46:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
		k_delayed_work_init(&ifaddr->lifetime, ipv6_addr_expired);
   1aa4a:	4420      	add	r0, r4
   1aa4c:	f007 fbda 	bl	22204 <k_delayed_work_init>
		net_if_ipv6_addr_update_lifetime(ifaddr, vlifetime);
   1aa50:	4651      	mov	r1, sl
   1aa52:	4628      	mov	r0, r5
   1aa54:	f7ff ff8a 	bl	1a96c <net_if_ipv6_addr_update_lifetime>
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   1aa58:	f240 23ff 	movw	r3, #767	; 0x2ff
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   1aa5c:	2700      	movs	r7, #0
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   1aa5e:	f8ad 3000 	strh.w	r3, [sp]
	ret = net_ipv6_mld_join(iface, &addr);
   1aa62:	4669      	mov	r1, sp
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   1aa64:	f44f 7380 	mov.w	r3, #256	; 0x100
   1aa68:	4620      	mov	r0, r4
   1aa6a:	f8ad 300e 	strh.w	r3, [sp, #14]
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   1aa6e:	f8ad 7002 	strh.w	r7, [sp, #2]
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   1aa72:	f8ad 7004 	strh.w	r7, [sp, #4]
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   1aa76:	f8ad 7006 	strh.w	r7, [sp, #6]
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   1aa7a:	f8ad 7008 	strh.w	r7, [sp, #8]
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   1aa7e:	f8ad 700a 	strh.w	r7, [sp, #10]
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   1aa82:	f8ad 700c 	strh.w	r7, [sp, #12]
   1aa86:	f004 fb67 	bl	1f158 <net_ipv6_mld_join>
	dst->s6_addr[0]   = 0xFF;
   1aa8a:	23ff      	movs	r3, #255	; 0xff
   1aa8c:	f88d 3000 	strb.w	r3, [sp]
	dst->s6_addr[12]  = 0xFF;
   1aa90:	f88d 300c 	strb.w	r3, [sp, #12]
	dst->s6_addr[13]  = src->s6_addr[13];
   1aa94:	236c      	movs	r3, #108	; 0x6c
   1aa96:	fb03 4606 	mla	r6, r3, r6, r4
	dst->s6_addr[1]   = 0x02;
   1aa9a:	2202      	movs	r2, #2
	dst->s6_addr[13]  = src->s6_addr[13];
   1aa9c:	f896 303d 	ldrb.w	r3, [r6, #61]	; 0x3d
	dst->s6_addr[1]   = 0x02;
   1aaa0:	f88d 2001 	strb.w	r2, [sp, #1]
	dst->s6_addr[11]  = 0x01;
   1aaa4:	2201      	movs	r2, #1
   1aaa6:	f88d 200b 	strb.w	r2, [sp, #11]
	dst->s6_addr[13]  = src->s6_addr[13];
   1aaaa:	f88d 300d 	strb.w	r3, [sp, #13]
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   1aaae:	f899 203f 	ldrb.w	r2, [r9, #63]	; 0x3f
   1aab2:	f899 303e 	ldrb.w	r3, [r9, #62]	; 0x3e
	UNALIGNED_PUT(0, &dst->s6_addr16[1]);
   1aab6:	f8ad 7002 	strh.w	r7, [sp, #2]
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   1aaba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	ret = net_ipv6_mld_join(iface, &addr);
   1aabe:	4669      	mov	r1, sp
   1aac0:	4620      	mov	r0, r4
   1aac2:	f8ad 300e 	strh.w	r3, [sp, #14]
	UNALIGNED_PUT(0, &dst->s6_addr16[2]);
   1aac6:	f8ad 7004 	strh.w	r7, [sp, #4]
	UNALIGNED_PUT(0, &dst->s6_addr16[3]);
   1aaca:	f8ad 7006 	strh.w	r7, [sp, #6]
	UNALIGNED_PUT(0, &dst->s6_addr16[4]);
   1aace:	f8ad 7008 	strh.w	r7, [sp, #8]
	dst->s6_addr[10]  = 0;
   1aad2:	f88d 700a 	strb.w	r7, [sp, #10]
   1aad6:	f004 fb3f 	bl	1f158 <net_ipv6_mld_join>
		net_if_ipv6_start_dad(iface, &iface->ipv6.unicast[i]);
   1aada:	4629      	mov	r1, r5
   1aadc:	4620      	mov	r0, r4
   1aade:	f7ff fea5 	bl	1a82c <net_if_ipv6_start_dad>
		net_mgmt_event_notify(NET_EVENT_IPV6_ADDR_ADD, iface);
   1aae2:	4621      	mov	r1, r4
   1aae4:	4807      	ldr	r0, [pc, #28]	; (1ab04 <net_if_ipv6_addr_add+0x18c>)
   1aae6:	f7ff fe9d 	bl	1a824 <net_mgmt_event_notify>
   1aaea:	e759      	b.n	1a9a0 <net_if_ipv6_addr_add+0x28>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1aaec:	2601      	movs	r6, #1
   1aaee:	e76f      	b.n	1a9d0 <net_if_ipv6_addr_add+0x58>
		ifaddr->is_infinite = true;
   1aaf0:	2201      	movs	r2, #1
   1aaf2:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
   1aaf6:	e7af      	b.n	1aa58 <net_if_ipv6_addr_add+0xe0>
	return NULL;
   1aaf8:	2500      	movs	r5, #0
   1aafa:	e751      	b.n	1a9a0 <net_if_ipv6_addr_add+0x28>
   1aafc:	0001a931 	.word	0x0001a931
   1ab00:	0001a709 	.word	0x0001a709
   1ab04:	f0600001 	.word	0xf0600001

0001ab08 <net_if_start_dad>:
{
   1ab08:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ab0a:	4604      	mov	r4, r0
   1ab0c:	b085      	sub	sp, #20
	struct in6_addr addr = { };
   1ab0e:	2210      	movs	r2, #16
   1ab10:	2100      	movs	r1, #0
   1ab12:	4668      	mov	r0, sp
   1ab14:	f7e5 fe69 	bl	7ea <memset>
	switch (lladdr->len) {
   1ab18:	7d22      	ldrb	r2, [r4, #20]
	addr->s6_addr[0] = 0xfe;
   1ab1a:	25fe      	movs	r5, #254	; 0xfe
	addr->s6_addr[1] = 0x80;
   1ab1c:	2380      	movs	r3, #128	; 0x80
	switch (lladdr->len) {
   1ab1e:	2a06      	cmp	r2, #6
	addr->s6_addr[0] = 0xfe;
   1ab20:	f88d 5000 	strb.w	r5, [sp]
	addr->s6_addr[1] = 0x80;
   1ab24:	f88d 3001 	strb.w	r3, [sp, #1]
	switch (lladdr->len) {
   1ab28:	d02e      	beq.n	1ab88 <net_if_start_dad+0x80>
   1ab2a:	2a08      	cmp	r2, #8
   1ab2c:	d047      	beq.n	1abbe <net_if_start_dad+0xb6>
   1ab2e:	2a02      	cmp	r2, #2
   1ab30:	d10e      	bne.n	1ab50 <net_if_start_dad+0x48>
		if (lladdr->type == NET_LINK_IEEE802154) {
   1ab32:	7d63      	ldrb	r3, [r4, #21]
   1ab34:	2b01      	cmp	r3, #1
   1ab36:	d10b      	bne.n	1ab50 <net_if_start_dad+0x48>
			addr->s6_addr[11] = 0xff;
   1ab38:	23ff      	movs	r3, #255	; 0xff
   1ab3a:	f88d 300b 	strb.w	r3, [sp, #11]
			addr->s6_addr[14] = lladdr->addr[0];
   1ab3e:	6923      	ldr	r3, [r4, #16]
			addr->s6_addr[12] = 0xfe;
   1ab40:	f88d 500c 	strb.w	r5, [sp, #12]
			addr->s6_addr[14] = lladdr->addr[0];
   1ab44:	781a      	ldrb	r2, [r3, #0]
   1ab46:	f88d 200e 	strb.w	r2, [sp, #14]
			addr->s6_addr[15] = lladdr->addr[1];
   1ab4a:	785b      	ldrb	r3, [r3, #1]
   1ab4c:	f88d 300f 	strb.w	r3, [sp, #15]
	ifaddr = net_if_ipv6_addr_add(iface, &addr, NET_ADDR_AUTOCONF, 0);
   1ab50:	2300      	movs	r3, #0
   1ab52:	2201      	movs	r2, #1
   1ab54:	4669      	mov	r1, sp
   1ab56:	4620      	mov	r0, r4
   1ab58:	f7ff ff0e 	bl	1a978 <net_if_ipv6_addr_add>
   1ab5c:	f104 052c 	add.w	r5, r4, #44	; 0x2c
   1ab60:	4607      	mov	r7, r0
   1ab62:	f504 76b8 	add.w	r6, r4, #368	; 0x170
		if (!iface->ipv6.unicast[i].is_used ||
   1ab66:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
   1ab6a:	b143      	cbz	r3, 1ab7e <net_if_start_dad+0x76>
   1ab6c:	882b      	ldrh	r3, [r5, #0]
   1ab6e:	2b0a      	cmp	r3, #10
   1ab70:	d105      	bne.n	1ab7e <net_if_start_dad+0x76>
		    iface->ipv6.unicast[i].address.family != AF_INET6 ||
   1ab72:	42af      	cmp	r7, r5
   1ab74:	d003      	beq.n	1ab7e <net_if_start_dad+0x76>
		net_if_ipv6_start_dad(iface, &iface->ipv6.unicast[i]);
   1ab76:	4629      	mov	r1, r5
   1ab78:	4620      	mov	r0, r4
   1ab7a:	f7ff fe57 	bl	1a82c <net_if_ipv6_start_dad>
   1ab7e:	356c      	adds	r5, #108	; 0x6c
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1ab80:	42b5      	cmp	r5, r6
   1ab82:	d1f0      	bne.n	1ab66 <net_if_start_dad+0x5e>
}
   1ab84:	b005      	add	sp, #20
   1ab86:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   1ab88:	2203      	movs	r2, #3
   1ab8a:	6921      	ldr	r1, [r4, #16]
   1ab8c:	a802      	add	r0, sp, #8
   1ab8e:	f7e5 fe00 	bl	792 <memcpy>
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   1ab92:	6921      	ldr	r1, [r4, #16]
		addr->s6_addr[12] = 0xfe;
   1ab94:	f88d 500c 	strb.w	r5, [sp, #12]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   1ab98:	2203      	movs	r2, #3
		addr->s6_addr[11] = 0xff;
   1ab9a:	23ff      	movs	r3, #255	; 0xff
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   1ab9c:	4411      	add	r1, r2
   1ab9e:	f10d 000d 	add.w	r0, sp, #13
		addr->s6_addr[11] = 0xff;
   1aba2:	f88d 300b 	strb.w	r3, [sp, #11]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   1aba6:	f7e5 fdf4 	bl	792 <memcpy>
		if (lladdr->type == NET_LINK_ETHERNET) {
   1abaa:	7d63      	ldrb	r3, [r4, #21]
   1abac:	2b03      	cmp	r3, #3
   1abae:	d1cf      	bne.n	1ab50 <net_if_start_dad+0x48>
		addr->s6_addr[8] ^= 0x02;
   1abb0:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1abb4:	f083 0302 	eor.w	r3, r3, #2
   1abb8:	f88d 3008 	strb.w	r3, [sp, #8]
   1abbc:	e7c8      	b.n	1ab50 <net_if_start_dad+0x48>
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
   1abbe:	6921      	ldr	r1, [r4, #16]
   1abc0:	a802      	add	r0, sp, #8
   1abc2:	f7e5 fde6 	bl	792 <memcpy>
   1abc6:	e7f3      	b.n	1abb0 <net_if_start_dad+0xa8>

0001abc8 <net_if_ipv6_maddr_add>:
{
   1abc8:	b538      	push	{r3, r4, r5, lr}
	if (!net_is_ipv6_addr_mcast(addr)) {
   1abca:	780b      	ldrb	r3, [r1, #0]
   1abcc:	2bff      	cmp	r3, #255	; 0xff
{
   1abce:	4604      	mov	r4, r0
	if (!net_is_ipv6_addr_mcast(addr)) {
   1abd0:	d125      	bne.n	1ac1e <net_if_ipv6_maddr_add+0x56>
		if (iface->ipv6.mcast[i].is_used) {
   1abd2:	f890 5170 	ldrb.w	r5, [r0, #368]	; 0x170
   1abd6:	f015 0501 	ands.w	r5, r5, #1
   1abda:	d01e      	beq.n	1ac1a <net_if_ipv6_maddr_add+0x52>
   1abdc:	f890 3188 	ldrb.w	r3, [r0, #392]	; 0x188
   1abe0:	07db      	lsls	r3, r3, #31
   1abe2:	d41c      	bmi.n	1ac1e <net_if_ipv6_maddr_add+0x56>
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1abe4:	2001      	movs	r0, #1
		iface->ipv6.mcast[i].is_used = true;
   1abe6:	2518      	movs	r5, #24
   1abe8:	4345      	muls	r5, r0
   1abea:	1962      	adds	r2, r4, r5
		memcpy(&iface->ipv6.mcast[i].address.in6_addr, addr, 16);
   1abec:	f505 70bc 	add.w	r0, r5, #376	; 0x178
		iface->ipv6.mcast[i].is_used = true;
   1abf0:	f892 3170 	ldrb.w	r3, [r2, #368]	; 0x170
   1abf4:	f043 0301 	orr.w	r3, r3, #1
   1abf8:	f882 3170 	strb.w	r3, [r2, #368]	; 0x170
		iface->ipv6.mcast[i].address.family = AF_INET6;
   1abfc:	230a      	movs	r3, #10
   1abfe:	f8a2 3174 	strh.w	r3, [r2, #372]	; 0x174
		memcpy(&iface->ipv6.mcast[i].address.in6_addr, addr, 16);
   1ac02:	4420      	add	r0, r4
   1ac04:	2210      	movs	r2, #16
   1ac06:	f7e5 fdc4 	bl	792 <memcpy>
		net_mgmt_event_notify(NET_EVENT_IPV6_MADDR_ADD, iface);
   1ac0a:	4621      	mov	r1, r4
   1ac0c:	4805      	ldr	r0, [pc, #20]	; (1ac24 <net_if_ipv6_maddr_add+0x5c>)
   1ac0e:	f7ff fe09 	bl	1a824 <net_mgmt_event_notify>
		return &iface->ipv6.mcast[i];
   1ac12:	f505 70b8 	add.w	r0, r5, #368	; 0x170
   1ac16:	4420      	add	r0, r4
   1ac18:	bd38      	pop	{r3, r4, r5, pc}
		if (iface->ipv6.mcast[i].is_used) {
   1ac1a:	4628      	mov	r0, r5
   1ac1c:	e7e3      	b.n	1abe6 <net_if_ipv6_maddr_add+0x1e>
		return NULL;
   1ac1e:	2000      	movs	r0, #0
}
   1ac20:	bd38      	pop	{r3, r4, r5, pc}
   1ac22:	bf00      	nop
   1ac24:	f0600003 	.word	0xf0600003

0001ac28 <net_if_ipv6_maddr_rm>:
{
   1ac28:	b538      	push	{r3, r4, r5, lr}
		if (!iface->ipv6.mcast[i].is_used) {
   1ac2a:	f890 3170 	ldrb.w	r3, [r0, #368]	; 0x170
   1ac2e:	07da      	lsls	r2, r3, #31
{
   1ac30:	4604      	mov	r4, r0
   1ac32:	460d      	mov	r5, r1
		if (!iface->ipv6.mcast[i].is_used) {
   1ac34:	d504      	bpl.n	1ac40 <net_if_ipv6_maddr_rm+0x18>
		if (!net_ipv6_addr_cmp(
   1ac36:	f500 70bc 	add.w	r0, r0, #376	; 0x178
   1ac3a:	f7ff fde2 	bl	1a802 <net_ipv6_addr_cmp>
   1ac3e:	b9c8      	cbnz	r0, 1ac74 <net_if_ipv6_maddr_rm+0x4c>
		if (!iface->ipv6.mcast[i].is_used) {
   1ac40:	f894 3188 	ldrb.w	r3, [r4, #392]	; 0x188
   1ac44:	07db      	lsls	r3, r3, #31
   1ac46:	d517      	bpl.n	1ac78 <net_if_ipv6_maddr_rm+0x50>
		if (!net_ipv6_addr_cmp(
   1ac48:	4629      	mov	r1, r5
   1ac4a:	f504 70c8 	add.w	r0, r4, #400	; 0x190
   1ac4e:	f7ff fdd8 	bl	1a802 <net_ipv6_addr_cmp>
   1ac52:	b188      	cbz	r0, 1ac78 <net_if_ipv6_maddr_rm+0x50>
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1ac54:	2301      	movs	r3, #1
		iface->ipv6.mcast[i].is_used = false;
   1ac56:	2218      	movs	r2, #24
   1ac58:	fb02 4303 	mla	r3, r2, r3, r4
		net_mgmt_event_notify(NET_EVENT_IPV6_MADDR_DEL, iface);
   1ac5c:	4621      	mov	r1, r4
		iface->ipv6.mcast[i].is_used = false;
   1ac5e:	f893 2170 	ldrb.w	r2, [r3, #368]	; 0x170
		net_mgmt_event_notify(NET_EVENT_IPV6_MADDR_DEL, iface);
   1ac62:	4806      	ldr	r0, [pc, #24]	; (1ac7c <net_if_ipv6_maddr_rm+0x54>)
		iface->ipv6.mcast[i].is_used = false;
   1ac64:	f36f 0200 	bfc	r2, #0, #1
   1ac68:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
		net_mgmt_event_notify(NET_EVENT_IPV6_MADDR_DEL, iface);
   1ac6c:	f7ff fdda 	bl	1a824 <net_mgmt_event_notify>
		return true;
   1ac70:	2001      	movs	r0, #1
   1ac72:	bd38      	pop	{r3, r4, r5, pc}
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1ac74:	2300      	movs	r3, #0
   1ac76:	e7ee      	b.n	1ac56 <net_if_ipv6_maddr_rm+0x2e>
	return false;
   1ac78:	2000      	movs	r0, #0
}
   1ac7a:	bd38      	pop	{r3, r4, r5, pc}
   1ac7c:	f0600004 	.word	0xf0600004

0001ac80 <net_if_ipv6_addr_rm>:
{
   1ac80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   1ac84:	4604      	mov	r4, r0
   1ac86:	460f      	mov	r7, r1
   1ac88:	f100 0630 	add.w	r6, r0, #48	; 0x30
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1ac8c:	2500      	movs	r5, #0
   1ac8e:	f04f 0a6c 	mov.w	sl, #108	; 0x6c
		if (!iface->ipv6.unicast[i].is_used) {
   1ac92:	f896 3064 	ldrb.w	r3, [r6, #100]	; 0x64
   1ac96:	2b00      	cmp	r3, #0
   1ac98:	d041      	beq.n	1ad1e <net_if_ipv6_addr_rm+0x9e>
		if (!net_ipv6_addr_cmp(
   1ac9a:	4639      	mov	r1, r7
   1ac9c:	4630      	mov	r0, r6
   1ac9e:	f7ff fdb0 	bl	1a802 <net_ipv6_addr_cmp>
   1aca2:	fb0a f805 	mul.w	r8, sl, r5
   1aca6:	4681      	mov	r9, r0
   1aca8:	b3c8      	cbz	r0, 1ad1e <net_if_ipv6_addr_rm+0x9e>
		if (!iface->ipv6.unicast[i].is_infinite) {
   1acaa:	eb04 0308 	add.w	r3, r4, r8
   1acae:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
   1acb2:	b923      	cbnz	r3, 1acbe <net_if_ipv6_addr_rm+0x3e>
			k_delayed_work_cancel(&iface->ipv6.unicast[i].lifetime);
   1acb4:	f108 0040 	add.w	r0, r8, #64	; 0x40
   1acb8:	4420      	add	r0, r4
   1acba:	f007 fac1 	bl	22240 <k_delayed_work_cancel>
		iface->ipv6.unicast[i].is_used = false;
   1acbe:	236c      	movs	r3, #108	; 0x6c
   1acc0:	fb03 4505 	mla	r5, r3, r5, r4
   1acc4:	2300      	movs	r3, #0
   1acc6:	f885 3094 	strb.w	r3, [r5, #148]	; 0x94
	UNALIGNED_PUT(0, &dst->s6_addr16[1]);
   1acca:	f8ad 3002 	strh.w	r3, [sp, #2]
	UNALIGNED_PUT(0, &dst->s6_addr16[2]);
   1acce:	f8ad 3004 	strh.w	r3, [sp, #4]
	UNALIGNED_PUT(0, &dst->s6_addr16[3]);
   1acd2:	f8ad 3006 	strh.w	r3, [sp, #6]
	UNALIGNED_PUT(0, &dst->s6_addr16[4]);
   1acd6:	f8ad 3008 	strh.w	r3, [sp, #8]
	dst->s6_addr[10]  = 0;
   1acda:	f88d 300a 	strb.w	r3, [sp, #10]
	dst->s6_addr[11]  = 0x01;
   1acde:	2301      	movs	r3, #1
	dst->s6_addr[0]   = 0xFF;
   1ace0:	22ff      	movs	r2, #255	; 0xff
	dst->s6_addr[11]  = 0x01;
   1ace2:	f88d 300b 	strb.w	r3, [sp, #11]
	dst->s6_addr[13]  = src->s6_addr[13];
   1ace6:	7b7b      	ldrb	r3, [r7, #13]
	dst->s6_addr[0]   = 0xFF;
   1ace8:	f88d 2000 	strb.w	r2, [sp]
	dst->s6_addr[12]  = 0xFF;
   1acec:	f88d 200c 	strb.w	r2, [sp, #12]
	dst->s6_addr[13]  = src->s6_addr[13];
   1acf0:	f88d 300d 	strb.w	r3, [sp, #13]
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   1acf4:	7bfa      	ldrb	r2, [r7, #15]
   1acf6:	7bbb      	ldrb	r3, [r7, #14]
	dst->s6_addr[1]   = 0x02;
   1acf8:	2102      	movs	r1, #2
   1acfa:	f88d 1001 	strb.w	r1, [sp, #1]
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   1acfe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		net_if_ipv6_maddr_rm(iface, &maddr);
   1ad02:	4669      	mov	r1, sp
   1ad04:	4620      	mov	r0, r4
   1ad06:	f8ad 300e 	strh.w	r3, [sp, #14]
   1ad0a:	f7ff ff8d 	bl	1ac28 <net_if_ipv6_maddr_rm>
		net_mgmt_event_notify(NET_EVENT_IPV6_ADDR_DEL, iface);
   1ad0e:	4621      	mov	r1, r4
   1ad10:	4807      	ldr	r0, [pc, #28]	; (1ad30 <net_if_ipv6_addr_rm+0xb0>)
   1ad12:	f7ff fd87 	bl	1a824 <net_mgmt_event_notify>
}
   1ad16:	4648      	mov	r0, r9
   1ad18:	b004      	add	sp, #16
   1ad1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1ad1e:	3501      	adds	r5, #1
   1ad20:	2d03      	cmp	r5, #3
   1ad22:	f106 066c 	add.w	r6, r6, #108	; 0x6c
   1ad26:	d1b4      	bne.n	1ac92 <net_if_ipv6_addr_rm+0x12>
	return false;
   1ad28:	f04f 0900 	mov.w	r9, #0
   1ad2c:	e7f3      	b.n	1ad16 <net_if_ipv6_addr_rm+0x96>
   1ad2e:	bf00      	nop
   1ad30:	f0600002 	.word	0xf0600002

0001ad34 <net_if_ipv6_dad_failed>:
{
   1ad34:	b513      	push	{r0, r1, r4, lr}
   1ad36:	ab02      	add	r3, sp, #8
   1ad38:	460c      	mov	r4, r1
   1ad3a:	f843 0d04 	str.w	r0, [r3, #-4]!
	ifaddr = net_if_ipv6_addr_lookup(addr, &iface);
   1ad3e:	4620      	mov	r0, r4
   1ad40:	4619      	mov	r1, r3
   1ad42:	f7ff fdc5 	bl	1a8d0 <net_if_ipv6_addr_lookup>
	if (!ifaddr) {
   1ad46:	b150      	cbz	r0, 1ad5e <net_if_ipv6_dad_failed+0x2a>
	k_delayed_work_cancel(&ifaddr->dad_timer);
   1ad48:	303c      	adds	r0, #60	; 0x3c
   1ad4a:	f007 fa79 	bl	22240 <k_delayed_work_cancel>
	net_mgmt_event_notify(NET_EVENT_IPV6_DAD_FAILED, iface);
   1ad4e:	9901      	ldr	r1, [sp, #4]
   1ad50:	4804      	ldr	r0, [pc, #16]	; (1ad64 <net_if_ipv6_dad_failed+0x30>)
   1ad52:	f7ff fd67 	bl	1a824 <net_mgmt_event_notify>
	net_if_ipv6_addr_rm(iface, addr);
   1ad56:	4621      	mov	r1, r4
   1ad58:	9801      	ldr	r0, [sp, #4]
   1ad5a:	f7ff ff91 	bl	1ac80 <net_if_ipv6_addr_rm>
}
   1ad5e:	b002      	add	sp, #8
   1ad60:	bd10      	pop	{r4, pc}
   1ad62:	bf00      	nop
   1ad64:	f060000e 	.word	0xf060000e

0001ad68 <net_if_ipv6_maddr_lookup>:
{
   1ad68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1ad6a:	4c1c      	ldr	r4, [pc, #112]	; (1addc <net_if_ipv6_maddr_lookup+0x74>)
   1ad6c:	4f1c      	ldr	r7, [pc, #112]	; (1ade0 <net_if_ipv6_maddr_lookup+0x78>)
{
   1ad6e:	4606      	mov	r6, r0
   1ad70:	460d      	mov	r5, r1
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1ad72:	42bc      	cmp	r4, r7
   1ad74:	d101      	bne.n	1ad7a <net_if_ipv6_maddr_lookup+0x12>
	return NULL;
   1ad76:	2000      	movs	r0, #0
}
   1ad78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (ret && *ret && iface != *ret) {
   1ad7a:	b10d      	cbz	r5, 1ad80 <net_if_ipv6_maddr_lookup+0x18>
   1ad7c:	682b      	ldr	r3, [r5, #0]
   1ad7e:	b9ab      	cbnz	r3, 1adac <net_if_ipv6_maddr_lookup+0x44>
			if (!iface->ipv6.mcast[i].is_used ||
   1ad80:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
   1ad84:	07da      	lsls	r2, r3, #31
   1ad86:	d50a      	bpl.n	1ad9e <net_if_ipv6_maddr_lookup+0x36>
   1ad88:	f8b4 3174 	ldrh.w	r3, [r4, #372]	; 0x174
   1ad8c:	2b0a      	cmp	r3, #10
   1ad8e:	d106      	bne.n	1ad9e <net_if_ipv6_maddr_lookup+0x36>
			if (net_is_ipv6_prefix(maddr->s6_addr,
   1ad90:	2280      	movs	r2, #128	; 0x80
   1ad92:	f504 71bc 	add.w	r1, r4, #376	; 0x178
   1ad96:	4630      	mov	r0, r6
   1ad98:	f7ff fd0e 	bl	1a7b8 <net_is_ipv6_prefix>
   1ad9c:	b9e0      	cbnz	r0, 1add8 <net_if_ipv6_maddr_lookup+0x70>
			if (!iface->ipv6.mcast[i].is_used ||
   1ad9e:	f894 3188 	ldrb.w	r3, [r4, #392]	; 0x188
   1ada2:	07db      	lsls	r3, r3, #31
   1ada4:	d405      	bmi.n	1adb2 <net_if_ipv6_maddr_lookup+0x4a>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1ada6:	f504 7418 	add.w	r4, r4, #608	; 0x260
   1adaa:	e7e2      	b.n	1ad72 <net_if_ipv6_maddr_lookup+0xa>
		if (ret && *ret && iface != *ret) {
   1adac:	429c      	cmp	r4, r3
   1adae:	d1fa      	bne.n	1ada6 <net_if_ipv6_maddr_lookup+0x3e>
   1adb0:	e7e6      	b.n	1ad80 <net_if_ipv6_maddr_lookup+0x18>
			if (!iface->ipv6.mcast[i].is_used ||
   1adb2:	f8b4 318c 	ldrh.w	r3, [r4, #396]	; 0x18c
   1adb6:	2b0a      	cmp	r3, #10
   1adb8:	d1f5      	bne.n	1ada6 <net_if_ipv6_maddr_lookup+0x3e>
			if (net_is_ipv6_prefix(maddr->s6_addr,
   1adba:	2280      	movs	r2, #128	; 0x80
   1adbc:	f504 71c8 	add.w	r1, r4, #400	; 0x190
   1adc0:	4630      	mov	r0, r6
   1adc2:	f7ff fcf9 	bl	1a7b8 <net_is_ipv6_prefix>
   1adc6:	2800      	cmp	r0, #0
   1adc8:	d0ed      	beq.n	1ada6 <net_if_ipv6_maddr_lookup+0x3e>
   1adca:	2018      	movs	r0, #24
				if (ret) {
   1adcc:	b105      	cbz	r5, 1add0 <net_if_ipv6_maddr_lookup+0x68>
					*ret = iface;
   1adce:	602c      	str	r4, [r5, #0]
				return &iface->ipv6.mcast[i];
   1add0:	f500 70b8 	add.w	r0, r0, #368	; 0x170
   1add4:	4420      	add	r0, r4
   1add6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (net_is_ipv6_prefix(maddr->s6_addr,
   1add8:	2000      	movs	r0, #0
   1adda:	e7f7      	b.n	1adcc <net_if_ipv6_maddr_lookup+0x64>
   1addc:	2000ab20 	.word	0x2000ab20
   1ade0:	2000ad80 	.word	0x2000ad80

0001ade4 <net_if_mcast_monitor>:
{
   1ade4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ade6:	4b0a      	ldr	r3, [pc, #40]	; (1ae10 <net_if_mcast_monitor+0x2c>)
   1ade8:	681b      	ldr	r3, [r3, #0]
   1adea:	4605      	mov	r5, r0
   1adec:	460e      	mov	r6, r1
   1adee:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&mcast_monitor_callbacks,
   1adf0:	b903      	cbnz	r3, 1adf4 <net_if_mcast_monitor+0x10>
   1adf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1adf4:	681c      	ldr	r4, [r3, #0]
		if (iface == mon->iface) {
   1adf6:	685a      	ldr	r2, [r3, #4]
   1adf8:	42aa      	cmp	r2, r5
   1adfa:	d104      	bne.n	1ae06 <net_if_mcast_monitor+0x22>
			mon->cb(iface, addr, is_joined);
   1adfc:	689b      	ldr	r3, [r3, #8]
   1adfe:	463a      	mov	r2, r7
   1ae00:	4631      	mov	r1, r6
   1ae02:	4628      	mov	r0, r5
   1ae04:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&mcast_monitor_callbacks,
   1ae06:	b904      	cbnz	r4, 1ae0a <net_if_mcast_monitor+0x26>
   1ae08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ae0a:	4623      	mov	r3, r4
   1ae0c:	6824      	ldr	r4, [r4, #0]
   1ae0e:	e7f2      	b.n	1adf6 <net_if_mcast_monitor+0x12>
   1ae10:	20002728 	.word	0x20002728

0001ae14 <net_if_ipv6_prefix_add>:
{
   1ae14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ae18:	4698      	mov	r8, r3
		if (!iface->ipv6.unicast[i].is_used) {
   1ae1a:	f890 3094 	ldrb.w	r3, [r0, #148]	; 0x94
{
   1ae1e:	b085      	sub	sp, #20
   1ae20:	4604      	mov	r4, r0
   1ae22:	460e      	mov	r6, r1
   1ae24:	4691      	mov	r9, r2
		if (!iface->ipv6.unicast[i].is_used) {
   1ae26:	b14b      	cbz	r3, 1ae3c <net_if_ipv6_prefix_add+0x28>
		if (net_ipv6_addr_cmp(prefix, &iface->ipv6.prefix[i].prefix) &&
   1ae28:	f500 71e4 	add.w	r1, r0, #456	; 0x1c8
   1ae2c:	4630      	mov	r0, r6
   1ae2e:	f7ff fce8 	bl	1a802 <net_ipv6_addr_cmp>
   1ae32:	b118      	cbz	r0, 1ae3c <net_if_ipv6_prefix_add+0x28>
   1ae34:	f894 31d8 	ldrb.w	r3, [r4, #472]	; 0x1d8
   1ae38:	454b      	cmp	r3, r9
   1ae3a:	d014      	beq.n	1ae66 <net_if_ipv6_prefix_add+0x52>
		if (!iface->ipv6.unicast[i].is_used) {
   1ae3c:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
   1ae40:	b19b      	cbz	r3, 1ae6a <net_if_ipv6_prefix_add+0x56>
		if (net_ipv6_addr_cmp(prefix, &iface->ipv6.prefix[i].prefix) &&
   1ae42:	f504 7101 	add.w	r1, r4, #516	; 0x204
   1ae46:	4630      	mov	r0, r6
   1ae48:	f7ff fcdb 	bl	1a802 <net_ipv6_addr_cmp>
   1ae4c:	b168      	cbz	r0, 1ae6a <net_if_ipv6_prefix_add+0x56>
   1ae4e:	f894 3214 	ldrb.w	r3, [r4, #532]	; 0x214
   1ae52:	454b      	cmp	r3, r9
   1ae54:	d109      	bne.n	1ae6a <net_if_ipv6_prefix_add+0x56>
   1ae56:	253c      	movs	r5, #60	; 0x3c
			return &iface->ipv6.prefix[i];
   1ae58:	f505 75d0 	add.w	r5, r5, #416	; 0x1a0
   1ae5c:	4425      	add	r5, r4
}
   1ae5e:	4628      	mov	r0, r5
   1ae60:	b005      	add	sp, #20
   1ae62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (net_ipv6_addr_cmp(prefix, &iface->ipv6.prefix[i].prefix) &&
   1ae66:	2500      	movs	r5, #0
   1ae68:	e7f6      	b.n	1ae58 <net_if_ipv6_prefix_add+0x44>
		if (iface->ipv6.prefix[i].is_used) {
   1ae6a:	f894 71da 	ldrb.w	r7, [r4, #474]	; 0x1da
   1ae6e:	b11f      	cbz	r7, 1ae78 <net_if_ipv6_prefix_add+0x64>
   1ae70:	f894 3216 	ldrb.w	r3, [r4, #534]	; 0x216
   1ae74:	bbcb      	cbnz	r3, 1aeea <net_if_ipv6_prefix_add+0xd6>
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1ae76:	2701      	movs	r7, #1
		net_if_ipv6_prefix_init(&iface->ipv6.prefix[i], prefix, len,
   1ae78:	233c      	movs	r3, #60	; 0x3c
   1ae7a:	437b      	muls	r3, r7
   1ae7c:	f503 75d0 	add.w	r5, r3, #416	; 0x1a0
	prefix->is_used = true;
   1ae80:	4423      	add	r3, r4
   1ae82:	2201      	movs	r2, #1
   1ae84:	f883 21da 	strb.w	r2, [r3, #474]	; 0x1da
	prefix->len = len;
   1ae88:	f883 91d8 	strb.w	r9, [r3, #472]	; 0x1d8
	net_ipaddr_copy(&prefix->prefix, addr);
   1ae8c:	4633      	mov	r3, r6
		net_if_ipv6_prefix_init(&iface->ipv6.prefix[i], prefix, len,
   1ae8e:	4425      	add	r5, r4
	net_ipaddr_copy(&prefix->prefix, addr);
   1ae90:	466e      	mov	r6, sp
   1ae92:	f103 0c10 	add.w	ip, r3, #16
   1ae96:	466a      	mov	r2, sp
   1ae98:	6818      	ldr	r0, [r3, #0]
   1ae9a:	6859      	ldr	r1, [r3, #4]
   1ae9c:	46b6      	mov	lr, r6
   1ae9e:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   1aea2:	3308      	adds	r3, #8
   1aea4:	4563      	cmp	r3, ip
   1aea6:	4676      	mov	r6, lr
   1aea8:	d1f6      	bne.n	1ae98 <net_if_ipv6_prefix_add+0x84>
   1aeaa:	f105 0628 	add.w	r6, r5, #40	; 0x28
   1aeae:	f10d 0e10 	add.w	lr, sp, #16
   1aeb2:	4613      	mov	r3, r2
   1aeb4:	cb03      	ldmia	r3!, {r0, r1}
   1aeb6:	4573      	cmp	r3, lr
   1aeb8:	6030      	str	r0, [r6, #0]
   1aeba:	6071      	str	r1, [r6, #4]
   1aebc:	461a      	mov	r2, r3
   1aebe:	f106 0608 	add.w	r6, r6, #8
   1aec2:	d1f6      	bne.n	1aeb2 <net_if_ipv6_prefix_add+0x9e>
	k_delayed_work_init(&prefix->lifetime, prefix_lf_timeout);
   1aec4:	4628      	mov	r0, r5
   1aec6:	490a      	ldr	r1, [pc, #40]	; (1aef0 <net_if_ipv6_prefix_add+0xdc>)
   1aec8:	f007 f99c 	bl	22204 <k_delayed_work_init>
   1aecc:	233c      	movs	r3, #60	; 0x3c
		prefix->is_infinite = true;
   1aece:	fb03 4707 	mla	r7, r3, r7, r4
	if (lifetime == NET_IPV6_ND_INFINITE_LIFETIME) {
   1aed2:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
		prefix->is_infinite = true;
   1aed6:	bf0c      	ite	eq
   1aed8:	2301      	moveq	r3, #1
		prefix->is_infinite = false;
   1aeda:	2300      	movne	r3, #0
   1aedc:	f887 31d9 	strb.w	r3, [r7, #473]	; 0x1d9
		net_mgmt_event_notify(NET_EVENT_IPV6_PREFIX_ADD, iface);
   1aee0:	4621      	mov	r1, r4
   1aee2:	4804      	ldr	r0, [pc, #16]	; (1aef4 <net_if_ipv6_prefix_add+0xe0>)
   1aee4:	f7ff fc9e 	bl	1a824 <net_mgmt_event_notify>
		return &iface->ipv6.prefix[i];
   1aee8:	e7b9      	b.n	1ae5e <net_if_ipv6_prefix_add+0x4a>
	return NULL;
   1aeea:	2500      	movs	r5, #0
   1aeec:	e7b7      	b.n	1ae5e <net_if_ipv6_prefix_add+0x4a>
   1aeee:	bf00      	nop
   1aef0:	0001a711 	.word	0x0001a711
   1aef4:	f0600005 	.word	0xf0600005

0001aef8 <net_if_ipv6_prefix_lookup>:
		if (!iface->ipv6.prefix[i].is_used) {
   1aef8:	f890 31da 	ldrb.w	r3, [r0, #474]	; 0x1da
{
   1aefc:	b570      	push	{r4, r5, r6, lr}
   1aefe:	4604      	mov	r4, r0
   1af00:	460d      	mov	r5, r1
   1af02:	4616      	mov	r6, r2
		if (!iface->ipv6.prefix[i].is_used) {
   1af04:	b123      	cbz	r3, 1af10 <net_if_ipv6_prefix_lookup+0x18>
		if (net_is_ipv6_prefix(iface->ipv6.prefix[i].prefix.s6_addr,
   1af06:	f500 70e4 	add.w	r0, r0, #456	; 0x1c8
   1af0a:	f7ff fc55 	bl	1a7b8 <net_is_ipv6_prefix>
   1af0e:	b970      	cbnz	r0, 1af2e <net_if_ipv6_prefix_lookup+0x36>
		if (!iface->ipv6.prefix[i].is_used) {
   1af10:	f894 3216 	ldrb.w	r3, [r4, #534]	; 0x216
   1af14:	b16b      	cbz	r3, 1af32 <net_if_ipv6_prefix_lookup+0x3a>
		if (net_is_ipv6_prefix(iface->ipv6.prefix[i].prefix.s6_addr,
   1af16:	4632      	mov	r2, r6
   1af18:	4629      	mov	r1, r5
   1af1a:	f504 7001 	add.w	r0, r4, #516	; 0x204
   1af1e:	f7ff fc4b 	bl	1a7b8 <net_is_ipv6_prefix>
   1af22:	b130      	cbz	r0, 1af32 <net_if_ipv6_prefix_lookup+0x3a>
   1af24:	203c      	movs	r0, #60	; 0x3c
			return &iface->ipv6.prefix[i];
   1af26:	f500 70d0 	add.w	r0, r0, #416	; 0x1a0
   1af2a:	4420      	add	r0, r4
   1af2c:	bd70      	pop	{r4, r5, r6, pc}
		if (net_is_ipv6_prefix(iface->ipv6.prefix[i].prefix.s6_addr,
   1af2e:	2000      	movs	r0, #0
   1af30:	e7f9      	b.n	1af26 <net_if_ipv6_prefix_lookup+0x2e>
	return NULL;
   1af32:	2000      	movs	r0, #0
}
   1af34:	bd70      	pop	{r4, r5, r6, pc}
	...

0001af38 <net_if_ipv6_addr_onlink>:
{
   1af38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (tmp = __net_if_start; tmp != __net_if_end; tmp++) {
   1af3a:	4c15      	ldr	r4, [pc, #84]	; (1af90 <net_if_ipv6_addr_onlink+0x58>)
   1af3c:	4f15      	ldr	r7, [pc, #84]	; (1af94 <net_if_ipv6_addr_onlink+0x5c>)
{
   1af3e:	4605      	mov	r5, r0
   1af40:	460e      	mov	r6, r1
	for (tmp = __net_if_start; tmp != __net_if_end; tmp++) {
   1af42:	42bc      	cmp	r4, r7
   1af44:	d101      	bne.n	1af4a <net_if_ipv6_addr_onlink+0x12>
	return false;
   1af46:	2000      	movs	r0, #0
   1af48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (iface && *iface && *iface != tmp) {
   1af4a:	b10d      	cbz	r5, 1af50 <net_if_ipv6_addr_onlink+0x18>
   1af4c:	682b      	ldr	r3, [r5, #0]
   1af4e:	b9cb      	cbnz	r3, 1af84 <net_if_ipv6_addr_onlink+0x4c>
			if (tmp->ipv6.prefix[i].is_used &&
   1af50:	f894 31da 	ldrb.w	r3, [r4, #474]	; 0x1da
   1af54:	b13b      	cbz	r3, 1af66 <net_if_ipv6_addr_onlink+0x2e>
			    net_is_ipv6_prefix(tmp->ipv6.prefix[i].prefix.
   1af56:	f894 21d8 	ldrb.w	r2, [r4, #472]	; 0x1d8
   1af5a:	4631      	mov	r1, r6
   1af5c:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   1af60:	f7ff fc2a 	bl	1a7b8 <net_is_ipv6_prefix>
			if (tmp->ipv6.prefix[i].is_used &&
   1af64:	b950      	cbnz	r0, 1af7c <net_if_ipv6_addr_onlink+0x44>
   1af66:	f894 3216 	ldrb.w	r3, [r4, #534]	; 0x216
   1af6a:	b16b      	cbz	r3, 1af88 <net_if_ipv6_addr_onlink+0x50>
			    net_is_ipv6_prefix(tmp->ipv6.prefix[i].prefix.
   1af6c:	f894 2214 	ldrb.w	r2, [r4, #532]	; 0x214
   1af70:	4631      	mov	r1, r6
   1af72:	f504 7001 	add.w	r0, r4, #516	; 0x204
   1af76:	f7ff fc1f 	bl	1a7b8 <net_is_ipv6_prefix>
			if (tmp->ipv6.prefix[i].is_used &&
   1af7a:	b128      	cbz	r0, 1af88 <net_if_ipv6_addr_onlink+0x50>
				if (iface) {
   1af7c:	b105      	cbz	r5, 1af80 <net_if_ipv6_addr_onlink+0x48>
					*iface = tmp;
   1af7e:	602c      	str	r4, [r5, #0]
				return true;
   1af80:	2001      	movs	r0, #1
}
   1af82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (iface && *iface && *iface != tmp) {
   1af84:	429c      	cmp	r4, r3
   1af86:	d0e3      	beq.n	1af50 <net_if_ipv6_addr_onlink+0x18>
	for (tmp = __net_if_start; tmp != __net_if_end; tmp++) {
   1af88:	f504 7418 	add.w	r4, r4, #608	; 0x260
   1af8c:	e7d9      	b.n	1af42 <net_if_ipv6_addr_onlink+0xa>
   1af8e:	bf00      	nop
   1af90:	2000ab20 	.word	0x2000ab20
   1af94:	2000ad80 	.word	0x2000ad80

0001af98 <net_if_ipv6_prefix_set_timer>:
	if (lifetime > (0xfffffffe / MSEC_PER_SEC)) {
   1af98:	4b04      	ldr	r3, [pc, #16]	; (1afac <net_if_ipv6_prefix_set_timer+0x14>)
   1af9a:	4299      	cmp	r1, r3
	u32_t timeout = lifetime * MSEC_PER_SEC;
   1af9c:	bf9a      	itte	ls
   1af9e:	f44f 737a 	movls.w	r3, #1000	; 0x3e8
   1afa2:	4359      	mulls	r1, r3
		timeout = 0xfffffffe;
   1afa4:	f06f 0101 	mvnhi.w	r1, #1
	k_delayed_work_submit(&prefix->lifetime, timeout);
   1afa8:	f7ff bc34 	b.w	1a814 <k_delayed_work_submit>
   1afac:	00418937 	.word	0x00418937

0001afb0 <net_if_ipv6_prefix_unset_timer>:
	if (!prefix->is_used) {
   1afb0:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
   1afb4:	b10b      	cbz	r3, 1afba <net_if_ipv6_prefix_unset_timer+0xa>
	k_delayed_work_cancel(&prefix->lifetime);
   1afb6:	f007 b943 	b.w	22240 <k_delayed_work_cancel>
   1afba:	4770      	bx	lr

0001afbc <net_if_ipv6_prefix_rm>:
		if (!iface->ipv6.prefix[i].is_used) {
   1afbc:	f890 31da 	ldrb.w	r3, [r0, #474]	; 0x1da
{
   1afc0:	b570      	push	{r4, r5, r6, lr}
   1afc2:	4604      	mov	r4, r0
   1afc4:	460e      	mov	r6, r1
   1afc6:	4615      	mov	r5, r2
		if (!iface->ipv6.prefix[i].is_used) {
   1afc8:	b143      	cbz	r3, 1afdc <net_if_ipv6_prefix_rm+0x20>
		if (!net_ipv6_addr_cmp(&iface->ipv6.prefix[i].prefix, addr) ||
   1afca:	f500 70e4 	add.w	r0, r0, #456	; 0x1c8
   1afce:	f7ff fc18 	bl	1a802 <net_ipv6_addr_cmp>
   1afd2:	b118      	cbz	r0, 1afdc <net_if_ipv6_prefix_rm+0x20>
   1afd4:	f894 31d8 	ldrb.w	r3, [r4, #472]	; 0x1d8
   1afd8:	42ab      	cmp	r3, r5
   1afda:	d01f      	beq.n	1b01c <net_if_ipv6_prefix_rm+0x60>
		if (!iface->ipv6.prefix[i].is_used) {
   1afdc:	f894 3216 	ldrb.w	r3, [r4, #534]	; 0x216
   1afe0:	b1fb      	cbz	r3, 1b022 <net_if_ipv6_prefix_rm+0x66>
		if (!net_ipv6_addr_cmp(&iface->ipv6.prefix[i].prefix, addr) ||
   1afe2:	4631      	mov	r1, r6
   1afe4:	f504 7001 	add.w	r0, r4, #516	; 0x204
   1afe8:	f7ff fc0b 	bl	1a802 <net_ipv6_addr_cmp>
   1afec:	b1c8      	cbz	r0, 1b022 <net_if_ipv6_prefix_rm+0x66>
   1afee:	f894 3214 	ldrb.w	r3, [r4, #532]	; 0x214
   1aff2:	42ab      	cmp	r3, r5
   1aff4:	d115      	bne.n	1b022 <net_if_ipv6_prefix_rm+0x66>
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1aff6:	2501      	movs	r5, #1
   1aff8:	203c      	movs	r0, #60	; 0x3c
		net_if_ipv6_prefix_unset_timer(&iface->ipv6.prefix[i]);
   1affa:	f500 70d0 	add.w	r0, r0, #416	; 0x1a0
   1affe:	4420      	add	r0, r4
   1b000:	f7ff ffd6 	bl	1afb0 <net_if_ipv6_prefix_unset_timer>
		iface->ipv6.prefix[i].is_used = false;
   1b004:	233c      	movs	r3, #60	; 0x3c
   1b006:	fb03 4505 	mla	r5, r3, r5, r4
   1b00a:	2300      	movs	r3, #0
   1b00c:	f885 31da 	strb.w	r3, [r5, #474]	; 0x1da
		net_mgmt_event_notify(NET_EVENT_IPV6_PREFIX_DEL, iface);
   1b010:	4621      	mov	r1, r4
   1b012:	4805      	ldr	r0, [pc, #20]	; (1b028 <net_if_ipv6_prefix_rm+0x6c>)
   1b014:	f7ff fc06 	bl	1a824 <net_mgmt_event_notify>
		return true;
   1b018:	2001      	movs	r0, #1
   1b01a:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1b01c:	2500      	movs	r5, #0
		if (!net_ipv6_addr_cmp(&iface->ipv6.prefix[i].prefix, addr) ||
   1b01e:	4628      	mov	r0, r5
   1b020:	e7eb      	b.n	1affa <net_if_ipv6_prefix_rm+0x3e>
	return false;
   1b022:	2000      	movs	r0, #0
}
   1b024:	bd70      	pop	{r4, r5, r6, pc}
   1b026:	bf00      	nop
   1b028:	f0600006 	.word	0xf0600006

0001b02c <net_if_ipv6_router_lookup>:
{
   1b02c:	b510      	push	{r4, lr}
		if (!routers[i].is_used ||
   1b02e:	4c09      	ldr	r4, [pc, #36]	; (1b054 <net_if_ipv6_router_lookup+0x28>)
   1b030:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   1b034:	b153      	cbz	r3, 1b04c <net_if_ipv6_router_lookup+0x20>
   1b036:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   1b038:	2b0a      	cmp	r3, #10
   1b03a:	d107      	bne.n	1b04c <net_if_ipv6_router_lookup+0x20>
		    routers[i].address.family != AF_INET6 ||
   1b03c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1b03e:	4298      	cmp	r0, r3
   1b040:	d104      	bne.n	1b04c <net_if_ipv6_router_lookup+0x20>
		if (net_ipv6_addr_cmp(&routers[i].address.in6_addr, addr)) {
   1b042:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   1b046:	f7ff fbdc 	bl	1a802 <net_ipv6_addr_cmp>
   1b04a:	b908      	cbnz	r0, 1b050 <net_if_ipv6_router_lookup+0x24>
	return NULL;
   1b04c:	2000      	movs	r0, #0
   1b04e:	bd10      	pop	{r4, pc}
			return &routers[i];
   1b050:	4620      	mov	r0, r4
}
   1b052:	bd10      	pop	{r4, pc}
   1b054:	20002730 	.word	0x20002730

0001b058 <net_if_ipv6_router_find_default>:
		if (!routers[i].is_used ||
   1b058:	4b0a      	ldr	r3, [pc, #40]	; (1b084 <net_if_ipv6_router_find_default+0x2c>)
   1b05a:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
   1b05e:	b162      	cbz	r2, 1b07a <net_if_ipv6_router_find_default+0x22>
   1b060:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
   1b064:	b14a      	cbz	r2, 1b07a <net_if_ipv6_router_find_default+0x22>
		    !routers[i].is_default ||
   1b066:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
   1b068:	2a0a      	cmp	r2, #10
   1b06a:	d106      	bne.n	1b07a <net_if_ipv6_router_find_default+0x22>
		if (iface && iface != routers[i].iface) {
   1b06c:	b138      	cbz	r0, 1b07e <net_if_ipv6_router_find_default+0x26>
   1b06e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	return NULL;
   1b070:	4290      	cmp	r0, r2
   1b072:	bf0c      	ite	eq
   1b074:	4618      	moveq	r0, r3
   1b076:	2000      	movne	r0, #0
   1b078:	4770      	bx	lr
   1b07a:	2000      	movs	r0, #0
   1b07c:	4770      	bx	lr
		return &routers[i];
   1b07e:	4618      	mov	r0, r3
}
   1b080:	4770      	bx	lr
   1b082:	bf00      	nop
   1b084:	20002730 	.word	0x20002730

0001b088 <net_if_ipv6_router_update_lifetime>:
	k_delayed_work_submit(&router->lifetime,
   1b088:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1b08c:	4359      	muls	r1, r3
   1b08e:	f7ff bbc1 	b.w	1a814 <k_delayed_work_submit>
	...

0001b094 <net_if_ipv6_router_add>:
{
   1b094:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (routers[i].is_used) {
   1b096:	4c20      	ldr	r4, [pc, #128]	; (1b118 <net_if_ipv6_router_add+0x84>)
   1b098:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
{
   1b09c:	b085      	sub	sp, #20
   1b09e:	4607      	mov	r7, r0
   1b0a0:	4616      	mov	r6, r2
		if (routers[i].is_used) {
   1b0a2:	bbb3      	cbnz	r3, 1b112 <net_if_ipv6_router_add+0x7e>
	router->is_used = true;
   1b0a4:	2301      	movs	r3, #1
   1b0a6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
	router->address.family = AF_INET6;
   1b0aa:	230a      	movs	r3, #10
   1b0ac:	8523      	strh	r3, [r4, #40]	; 0x28
	router->iface = iface;
   1b0ae:	63e0      	str	r0, [r4, #60]	; 0x3c
	net_ipaddr_copy(&router->address.in6_addr, addr);
   1b0b0:	460b      	mov	r3, r1
   1b0b2:	466d      	mov	r5, sp
   1b0b4:	f101 0c10 	add.w	ip, r1, #16
   1b0b8:	466a      	mov	r2, sp
   1b0ba:	6818      	ldr	r0, [r3, #0]
   1b0bc:	6859      	ldr	r1, [r3, #4]
   1b0be:	46ae      	mov	lr, r5
   1b0c0:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   1b0c4:	3308      	adds	r3, #8
   1b0c6:	4563      	cmp	r3, ip
   1b0c8:	4675      	mov	r5, lr
   1b0ca:	d1f6      	bne.n	1b0ba <net_if_ipv6_router_add+0x26>
   1b0cc:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
   1b0ce:	4d13      	ldr	r5, [pc, #76]	; (1b11c <net_if_ipv6_router_add+0x88>)
   1b0d0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   1b0d4:	2301      	movs	r3, #1
	if (lifetime) {
   1b0d6:	b1be      	cbz	r6, 1b108 <net_if_ipv6_router_add+0x74>
		router->is_default = true;
   1b0d8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
		k_delayed_work_init(&router->lifetime, ipv6_router_expired);
   1b0dc:	4910      	ldr	r1, [pc, #64]	; (1b120 <net_if_ipv6_router_add+0x8c>)
		router->is_infinite = false;
   1b0de:	2300      	movs	r3, #0
		k_delayed_work_init(&router->lifetime, ipv6_router_expired);
   1b0e0:	f1a5 002c 	sub.w	r0, r5, #44	; 0x2c
		router->is_infinite = false;
   1b0e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
		k_delayed_work_init(&router->lifetime, ipv6_router_expired);
   1b0e8:	f007 f88c 	bl	22204 <k_delayed_work_init>
		k_delayed_work_submit(&router->lifetime,
   1b0ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1b0f0:	4371      	muls	r1, r6
   1b0f2:	f1a5 002c 	sub.w	r0, r5, #44	; 0x2c
   1b0f6:	f7ff fb8d 	bl	1a814 <k_delayed_work_submit>
		net_mgmt_event_notify(NET_EVENT_IPV6_ROUTER_ADD, iface);
   1b0fa:	480a      	ldr	r0, [pc, #40]	; (1b124 <net_if_ipv6_router_add+0x90>)
   1b0fc:	4639      	mov	r1, r7
   1b0fe:	f7ff fb91 	bl	1a824 <net_mgmt_event_notify>
		return &routers[i];
   1b102:	4805      	ldr	r0, [pc, #20]	; (1b118 <net_if_ipv6_router_add+0x84>)
}
   1b104:	b005      	add	sp, #20
   1b106:	bdf0      	pop	{r4, r5, r6, r7, pc}
		router->is_default = false;
   1b108:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
		router->is_infinite = true;
   1b10c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   1b110:	e7f3      	b.n	1b0fa <net_if_ipv6_router_add+0x66>
	return NULL;
   1b112:	2000      	movs	r0, #0
   1b114:	e7f6      	b.n	1b104 <net_if_ipv6_router_add+0x70>
   1b116:	bf00      	nop
   1b118:	20002730 	.word	0x20002730
   1b11c:	2000275c 	.word	0x2000275c
   1b120:	0001a719 	.word	0x0001a719
   1b124:	f0600009 	.word	0xf0600009

0001b128 <net_if_ipv6_router_rm>:
		if (!routers[i].is_used) {
   1b128:	4b0a      	ldr	r3, [pc, #40]	; (1b154 <net_if_ipv6_router_rm+0x2c>)
{
   1b12a:	b570      	push	{r4, r5, r6, lr}
		if (!routers[i].is_used) {
   1b12c:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
{
   1b130:	4605      	mov	r5, r0
		if (!routers[i].is_used) {
   1b132:	b15c      	cbz	r4, 1b14c <net_if_ipv6_router_rm+0x24>
		if (&routers[i] != router) {
   1b134:	4298      	cmp	r0, r3
   1b136:	f04f 0600 	mov.w	r6, #0
   1b13a:	d109      	bne.n	1b150 <net_if_ipv6_router_rm+0x28>
		k_delayed_work_cancel(&routers[i].lifetime);
   1b13c:	f007 f880 	bl	22240 <k_delayed_work_cancel>
		routers[i].is_used = false;
   1b140:	f885 6040 	strb.w	r6, [r5, #64]	; 0x40
		net_mgmt_event_notify(NET_EVENT_IPV6_ROUTER_DEL,
   1b144:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   1b146:	4804      	ldr	r0, [pc, #16]	; (1b158 <net_if_ipv6_router_rm+0x30>)
   1b148:	f7ff fb6c 	bl	1a824 <net_mgmt_event_notify>
}
   1b14c:	4620      	mov	r0, r4
   1b14e:	bd70      	pop	{r4, r5, r6, pc}
	return false;
   1b150:	4634      	mov	r4, r6
   1b152:	e7fb      	b.n	1b14c <net_if_ipv6_router_rm+0x24>
   1b154:	20002730 	.word	0x20002730
   1b158:	f060000a 	.word	0xf060000a

0001b15c <net_if_ipv6_get_ll>:
{
   1b15c:	b510      	push	{r4, lr}
   1b15e:	f100 0330 	add.w	r3, r0, #48	; 0x30
		if (net_is_ipv6_ll_addr(&iface->ipv6.unicast[i].address.in6_addr)) {
   1b162:	f248 02fe 	movw	r2, #33022	; 0x80fe
   1b166:	f500 70ba 	add.w	r0, r0, #372	; 0x174
		if (!iface->ipv6.unicast[i].is_used ||
   1b16a:	f893 4064 	ldrb.w	r4, [r3, #100]	; 0x64
   1b16e:	b164      	cbz	r4, 1b18a <net_if_ipv6_get_ll+0x2e>
   1b170:	1c4c      	adds	r4, r1, #1
   1b172:	d003      	beq.n	1b17c <net_if_ipv6_get_ll+0x20>
		    (addr_state != NET_ADDR_ANY_STATE &&
   1b174:	f993 4061 	ldrsb.w	r4, [r3, #97]	; 0x61
   1b178:	428c      	cmp	r4, r1
   1b17a:	d106      	bne.n	1b18a <net_if_ipv6_get_ll+0x2e>
		     iface->ipv6.unicast[i].addr_state != addr_state) ||
   1b17c:	f833 4c04 	ldrh.w	r4, [r3, #-4]
   1b180:	2c0a      	cmp	r4, #10
   1b182:	d102      	bne.n	1b18a <net_if_ipv6_get_ll+0x2e>
		if (net_is_ipv6_ll_addr(&iface->ipv6.unicast[i].address.in6_addr)) {
   1b184:	881c      	ldrh	r4, [r3, #0]
   1b186:	4294      	cmp	r4, r2
   1b188:	d004      	beq.n	1b194 <net_if_ipv6_get_ll+0x38>
   1b18a:	336c      	adds	r3, #108	; 0x6c
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1b18c:	4283      	cmp	r3, r0
   1b18e:	d1ec      	bne.n	1b16a <net_if_ipv6_get_ll+0xe>
	return NULL;
   1b190:	2000      	movs	r0, #0
   1b192:	bd10      	pop	{r4, pc}
   1b194:	4618      	mov	r0, r3
}
   1b196:	bd10      	pop	{r4, pc}

0001b198 <net_if_ipv6_select_src_addr>:
	return src;
}

const struct in6_addr *net_if_ipv6_select_src_addr(struct net_if *dst_iface,
						   struct in6_addr *dst)
{
   1b198:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct in6_addr *src = NULL;
	u8_t best_match = 0;
	struct net_if *iface;

	if (!net_is_ipv6_ll_addr(dst) && !net_is_ipv6_addr_mcast(dst)) {
   1b19a:	880d      	ldrh	r5, [r1, #0]
   1b19c:	f248 02fe 	movw	r2, #33022	; 0x80fe
	u8_t best_match = 0;
   1b1a0:	2400      	movs	r4, #0
	if (!net_is_ipv6_ll_addr(dst) && !net_is_ipv6_addr_mcast(dst)) {
   1b1a2:	4295      	cmp	r5, r2
{
   1b1a4:	4603      	mov	r3, r0
   1b1a6:	460e      	mov	r6, r1
	u8_t best_match = 0;
   1b1a8:	f88d 4007 	strb.w	r4, [sp, #7]
	if (!net_is_ipv6_ll_addr(dst) && !net_is_ipv6_addr_mcast(dst)) {
   1b1ac:	d002      	beq.n	1b1b4 <net_if_ipv6_select_src_addr+0x1c>
   1b1ae:	780a      	ldrb	r2, [r1, #0]
   1b1b0:	2aff      	cmp	r2, #255	; 0xff
   1b1b2:	d107      	bne.n	1b1c4 <net_if_ipv6_select_src_addr+0x2c>
   1b1b4:	4c16      	ldr	r4, [pc, #88]	; (1b210 <net_if_ipv6_select_src_addr+0x78>)
							 &best_match);
		}

	} else {
		for (iface = __net_if_start;
		     !dst_iface && iface != __net_if_end;
   1b1b6:	4d17      	ldr	r5, [pc, #92]	; (1b214 <net_if_ipv6_select_src_addr+0x7c>)
		for (iface = __net_if_start;
   1b1b8:	b323      	cbz	r3, 1b204 <net_if_ipv6_select_src_addr+0x6c>
				break;
			}
		}

		if (dst_iface) {
			src = net_if_ipv6_get_ll(dst_iface, NET_ADDR_PREFERRED);
   1b1ba:	2101      	movs	r1, #1
   1b1bc:	4618      	mov	r0, r3
   1b1be:	f7ff ffcd 	bl	1b15c <net_if_ipv6_get_ll>
   1b1c2:	e006      	b.n	1b1d2 <net_if_ipv6_select_src_addr+0x3a>
   1b1c4:	4d12      	ldr	r5, [pc, #72]	; (1b210 <net_if_ipv6_select_src_addr+0x78>)
		     !dst_iface && iface != __net_if_end;
   1b1c6:	4f13      	ldr	r7, [pc, #76]	; (1b214 <net_if_ipv6_select_src_addr+0x7c>)
		for (iface = __net_if_start;
   1b1c8:	b180      	cbz	r0, 1b1ec <net_if_ipv6_select_src_addr+0x54>
			src = net_if_ipv6_get_best_match(dst_iface, dst,
   1b1ca:	f10d 0207 	add.w	r2, sp, #7
   1b1ce:	f7ff faa7 	bl	1a720 <net_if_ipv6_get_best_match>
			src = net_if_ipv6_get_ll(dst_iface, NET_ADDR_PREFERRED);
   1b1d2:	4604      	mov	r4, r0
   1b1d4:	e00c      	b.n	1b1f0 <net_if_ipv6_select_src_addr+0x58>
			addr = net_if_ipv6_get_best_match(iface, dst,
   1b1d6:	4628      	mov	r0, r5
   1b1d8:	f10d 0207 	add.w	r2, sp, #7
   1b1dc:	4631      	mov	r1, r6
   1b1de:	f7ff fa9f 	bl	1a720 <net_if_ipv6_get_best_match>
		     iface++) {
   1b1e2:	f505 7518 	add.w	r5, r5, #608	; 0x260
   1b1e6:	2800      	cmp	r0, #0
   1b1e8:	bf18      	it	ne
   1b1ea:	4604      	movne	r4, r0
		     !dst_iface && iface != __net_if_end;
   1b1ec:	42bd      	cmp	r5, r7
   1b1ee:	d1f2      	bne.n	1b1d6 <net_if_ipv6_select_src_addr+0x3e>
		}
	}

	if (!src) {
   1b1f0:	b154      	cbz	r4, 1b208 <net_if_ipv6_select_src_addr+0x70>
   1b1f2:	4620      	mov	r0, r4
   1b1f4:	e00a      	b.n	1b20c <net_if_ipv6_select_src_addr+0x74>
			addr = net_if_ipv6_get_ll(iface, NET_ADDR_PREFERRED);
   1b1f6:	2101      	movs	r1, #1
   1b1f8:	4620      	mov	r0, r4
   1b1fa:	f7ff ffaf 	bl	1b15c <net_if_ipv6_get_ll>
			if (addr) {
   1b1fe:	b928      	cbnz	r0, 1b20c <net_if_ipv6_select_src_addr+0x74>
		     iface++) {
   1b200:	f504 7418 	add.w	r4, r4, #608	; 0x260
		     !dst_iface && iface != __net_if_end;
   1b204:	42ac      	cmp	r4, r5
   1b206:	d1f6      	bne.n	1b1f6 <net_if_ipv6_select_src_addr+0x5e>
		return net_ipv6_unspecified_address();
   1b208:	f002 fbc8 	bl	1d99c <net_ipv6_unspecified_address>
	}

	return src;
}
   1b20c:	b003      	add	sp, #12
   1b20e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b210:	2000ab20 	.word	0x2000ab20
   1b214:	2000ad80 	.word	0x2000ad80

0001b218 <net_if_ipv6_calc_reachable_time>:

u32_t net_if_ipv6_calc_reachable_time(struct net_if *iface)
{
   1b218:	b538      	push	{r3, r4, r5, lr}
	u32_t min_reachable, max_reachable;

	min_reachable = (MIN_RANDOM_NUMER * iface->ipv6.base_reachable_time)
   1b21a:	f8d0 4240 	ldr.w	r4, [r0, #576]	; 0x240

	NET_DBG("min_reachable:%u max_reachable:%u", min_reachable,
		max_reachable);

	return min_reachable +
	       sys_rand32_get() % (max_reachable - min_reachable);
   1b21e:	f7e7 faf7 	bl	2810 <sys_rand32_get>
	min_reachable = (MIN_RANDOM_NUMER * iface->ipv6.base_reachable_time)
   1b222:	0865      	lsrs	r5, r4, #1
	max_reachable = (MAX_RANDOM_NUMER * iface->ipv6.base_reachable_time)
   1b224:	eb04 0444 	add.w	r4, r4, r4, lsl #1
	       sys_rand32_get() % (max_reachable - min_reachable);
   1b228:	ebc5 0454 	rsb	r4, r5, r4, lsr #1
   1b22c:	fbb0 f3f4 	udiv	r3, r0, r4
   1b230:	fb03 0014 	mls	r0, r3, r4, r0
}
   1b234:	4428      	add	r0, r5
   1b236:	bd38      	pop	{r3, r4, r5, pc}

0001b238 <net_if_call_link_cb>:
	sys_slist_find_and_remove(&link_callbacks, &link->node);
}

void net_if_call_link_cb(struct net_if *iface, struct net_linkaddr *lladdr,
			 int status)
{
   1b238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b23a:	4b09      	ldr	r3, [pc, #36]	; (1b260 <net_if_call_link_cb+0x28>)
   1b23c:	681b      	ldr	r3, [r3, #0]
   1b23e:	4605      	mov	r5, r0
   1b240:	460e      	mov	r6, r1
   1b242:	4617      	mov	r7, r2
	struct net_if_link_cb *link, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
   1b244:	b903      	cbnz	r3, 1b248 <net_if_call_link_cb+0x10>
   1b246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b248:	681c      	ldr	r4, [r3, #0]
		link->cb(iface, lladdr, status);
   1b24a:	685b      	ldr	r3, [r3, #4]
   1b24c:	463a      	mov	r2, r7
   1b24e:	4631      	mov	r1, r6
   1b250:	4628      	mov	r0, r5
   1b252:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
   1b254:	b114      	cbz	r4, 1b25c <net_if_call_link_cb+0x24>
   1b256:	4623      	mov	r3, r4
   1b258:	6824      	ldr	r4, [r4, #0]
   1b25a:	e7f6      	b.n	1b24a <net_if_call_link_cb+0x12>
   1b25c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b25e:	bf00      	nop
   1b260:	20002720 	.word	0x20002720

0001b264 <net_if_send_data>:
	if (!atomic_test_bit(iface->flags, NET_IF_UP)) {
   1b264:	f100 020c 	add.w	r2, r0, #12
{
   1b268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b26c:	4607      	mov	r7, r0
   1b26e:	460c      	mov	r4, r1
   1b270:	68ce      	ldr	r6, [r1, #12]
   1b272:	f8d1 8010 	ldr.w	r8, [r1, #16]
	if (!atomic_test_bit(iface->flags, NET_IF_UP)) {
   1b276:	4610      	mov	r0, r2
   1b278:	2100      	movs	r1, #0
   1b27a:	f7ff fa90 	bl	1a79e <atomic_test_bit>
   1b27e:	2800      	cmp	r0, #0
   1b280:	d03f      	beq.n	1b302 <net_if_send_data+0x9e>
	if (!atomic_test_bit(iface->flags, NET_IF_POINTOPOINT) &&
   1b282:	2101      	movs	r1, #1
   1b284:	4610      	mov	r0, r2
   1b286:	f7ff fa8a 	bl	1a79e <atomic_test_bit>
   1b28a:	b938      	cbnz	r0, 1b29c <net_if_send_data+0x38>
   1b28c:	6a23      	ldr	r3, [r4, #32]
   1b28e:	b92b      	cbnz	r3, 1b29c <net_if_send_data+0x38>
   1b290:	6963      	ldr	r3, [r4, #20]
		net_pkt_ll_src(pkt)->addr = net_pkt_ll_if(pkt)->addr;
   1b292:	691a      	ldr	r2, [r3, #16]
   1b294:	6222      	str	r2, [r4, #32]
		net_pkt_ll_src(pkt)->len = net_pkt_ll_if(pkt)->len;
   1b296:	7d1b      	ldrb	r3, [r3, #20]
   1b298:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	return pkt->family;
   1b29c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
	if (net_pkt_family(pkt) == AF_INET6) {
   1b2a0:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   1b2a4:	2b0a      	cmp	r3, #10
   1b2a6:	d108      	bne.n	1b2ba <net_if_send_data+0x56>
		pkt = net_ipv6_prepare_for_send(pkt);
   1b2a8:	4620      	mov	r0, r4
   1b2aa:	f003 fe15 	bl	1eed8 <net_ipv6_prepare_for_send>
		if (!pkt) {
   1b2ae:	4601      	mov	r1, r0
   1b2b0:	b920      	cbnz	r0, 1b2bc <net_if_send_data+0x58>
			verdict = NET_CONTINUE;
   1b2b2:	2301      	movs	r3, #1
}
   1b2b4:	4618      	mov	r0, r3
   1b2b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1b2ba:	4621      	mov	r1, r4
	verdict = iface->l2->send(iface, pkt);
   1b2bc:	687b      	ldr	r3, [r7, #4]
   1b2be:	4638      	mov	r0, r7
   1b2c0:	685b      	ldr	r3, [r3, #4]
   1b2c2:	4798      	blx	r3
   1b2c4:	4603      	mov	r3, r0
	if (context && verdict == NET_DROP) {
   1b2c6:	b1be      	cbz	r6, 1b2f8 <net_if_send_data+0x94>
   1b2c8:	2802      	cmp	r0, #2
   1b2ca:	d1f3      	bne.n	1b2b4 <net_if_send_data+0x50>
	int status = -EIO;
   1b2cc:	f06f 0504 	mvn.w	r5, #4
	if (context->send_cb) {
   1b2d0:	f8d6 9034 	ldr.w	r9, [r6, #52]	; 0x34
   1b2d4:	f1b9 0f00 	cmp.w	r9, #0
   1b2d8:	d004      	beq.n	1b2e4 <net_if_send_data+0x80>
		context->send_cb(context, status, token, context->user_data);
   1b2da:	6833      	ldr	r3, [r6, #0]
   1b2dc:	4642      	mov	r2, r8
   1b2de:	4629      	mov	r1, r5
   1b2e0:	4630      	mov	r0, r6
   1b2e2:	47c8      	blx	r9
	if (verdict == NET_DROP && dst->addr) {
   1b2e4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1b2e6:	b12b      	cbz	r3, 1b2f4 <net_if_send_data+0x90>
		net_if_call_link_cb(iface, dst, status);
   1b2e8:	462a      	mov	r2, r5
   1b2ea:	f104 0128 	add.w	r1, r4, #40	; 0x28
   1b2ee:	4638      	mov	r0, r7
   1b2f0:	f7ff ffa2 	bl	1b238 <net_if_call_link_cb>
   1b2f4:	2302      	movs	r3, #2
	return verdict;
   1b2f6:	e7dd      	b.n	1b2b4 <net_if_send_data+0x50>
	if (verdict == NET_DROP && dst->addr) {
   1b2f8:	2802      	cmp	r0, #2
   1b2fa:	d1db      	bne.n	1b2b4 <net_if_send_data+0x50>
	int status = -EIO;
   1b2fc:	f06f 0504 	mvn.w	r5, #4
   1b300:	e7f0      	b.n	1b2e4 <net_if_send_data+0x80>
		status = -ENETDOWN;
   1b302:	f06f 053d 	mvn.w	r5, #61	; 0x3d
	if (context && verdict == NET_DROP) {
   1b306:	2e00      	cmp	r6, #0
   1b308:	d0ec      	beq.n	1b2e4 <net_if_send_data+0x80>
   1b30a:	e7e1      	b.n	1b2d0 <net_if_send_data+0x6c>

0001b30c <net_if_tx>:
{
   1b30c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b310:	4605      	mov	r5, r0
	const struct net_if_api *api = iface->dev->driver_api;
   1b312:	f850 3b18 	ldr.w	r3, [r0], #24
	pkt = k_fifo_get(&iface->tx_queue, K_NO_WAIT);
   1b316:	2100      	movs	r1, #0
	const struct net_if_api *api = iface->dev->driver_api;
   1b318:	685f      	ldr	r7, [r3, #4]
	pkt = k_fifo_get(&iface->tx_queue, K_NO_WAIT);
   1b31a:	f006 fa20 	bl	2175e <k_queue_get>
	if (!pkt) {
   1b31e:	4604      	mov	r4, r0
   1b320:	2800      	cmp	r0, #0
   1b322:	d039      	beq.n	1b398 <net_if_tx+0x8c>
	return &pkt->lladdr_src;
}

static inline struct net_linkaddr *net_pkt_ll_dst(struct net_pkt *pkt)
{
	return &pkt->lladdr_dst;
   1b324:	f100 0828 	add.w	r8, r0, #40	; 0x28
   1b328:	68c6      	ldr	r6, [r0, #12]
   1b32a:	f8d0 9010 	ldr.w	r9, [r0, #16]
	if (atomic_test_bit(iface->flags, NET_IF_UP)) {
   1b32e:	2100      	movs	r1, #0
   1b330:	f105 000c 	add.w	r0, r5, #12
   1b334:	f7ff fa33 	bl	1a79e <atomic_test_bit>
   1b338:	b358      	cbz	r0, 1b392 <net_if_tx+0x86>
	pkt->sent_or_eof = sent;
   1b33a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
	pkt->pkt_queued = send;
   1b33e:	f043 0301 	orr.w	r3, r3, #1
   1b342:	f36f 0341 	bfc	r3, #1, #1
   1b346:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		status = api->send(iface, pkt);
   1b34a:	687b      	ldr	r3, [r7, #4]
   1b34c:	4621      	mov	r1, r4
   1b34e:	4628      	mov	r0, r5
   1b350:	4798      	blx	r3
	if (status < 0) {
   1b352:	1e07      	subs	r7, r0, #0
   1b354:	da08      	bge.n	1b368 <net_if_tx+0x5c>
	pkt->sent_or_eof = sent;
   1b356:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   1b35a:	f36f 0300 	bfc	r3, #0, #1
   1b35e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		net_pkt_unref(pkt);
   1b362:	4620      	mov	r0, r4
   1b364:	f000 fa8f 	bl	1b886 <net_pkt_unref>
	if (context) {
   1b368:	b14e      	cbz	r6, 1b37e <net_if_tx+0x72>
	if (context->send_cb) {
   1b36a:	f8d6 a034 	ldr.w	sl, [r6, #52]	; 0x34
   1b36e:	f1ba 0f00 	cmp.w	sl, #0
   1b372:	d004      	beq.n	1b37e <net_if_tx+0x72>
		context->send_cb(context, status, token, context->user_data);
   1b374:	6833      	ldr	r3, [r6, #0]
   1b376:	464a      	mov	r2, r9
   1b378:	4639      	mov	r1, r7
   1b37a:	4630      	mov	r0, r6
   1b37c:	47d0      	blx	sl
	if (dst->addr) {
   1b37e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1b380:	b123      	cbz	r3, 1b38c <net_if_tx+0x80>
		net_if_call_link_cb(iface, dst, status);
   1b382:	463a      	mov	r2, r7
   1b384:	4641      	mov	r1, r8
   1b386:	4628      	mov	r0, r5
   1b388:	f7ff ff56 	bl	1b238 <net_if_call_link_cb>
	return true;
   1b38c:	2001      	movs	r0, #1
}
   1b38e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		status = -ENETDOWN;
   1b392:	f06f 073d 	mvn.w	r7, #61	; 0x3d
   1b396:	e7de      	b.n	1b356 <net_if_tx+0x4a>
   1b398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001b39c <net_if_flush_tx>:
	if (k_fifo_is_empty(&iface->tx_queue)) {
   1b39c:	6983      	ldr	r3, [r0, #24]
{
   1b39e:	b510      	push	{r4, lr}
   1b3a0:	4604      	mov	r4, r0
	if (k_fifo_is_empty(&iface->tx_queue)) {
   1b3a2:	b133      	cbz	r3, 1b3b2 <net_if_flush_tx+0x16>
   1b3a4:	f006 fb86 	bl	21ab4 <_impl_k_yield>
		if (!net_if_tx(iface)) {
   1b3a8:	4620      	mov	r0, r4
   1b3aa:	f7ff ffaf 	bl	1b30c <net_if_tx>
   1b3ae:	2800      	cmp	r0, #0
   1b3b0:	d1fa      	bne.n	1b3a8 <net_if_flush_tx+0xc>
   1b3b2:	bd10      	pop	{r4, pc}

0001b3b4 <net_if_tx_thread>:
{
   1b3b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1b3b8:	f006 fbf8 	bl	21bac <_impl_k_sem_give>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1b3bc:	4e15      	ldr	r6, [pc, #84]	; (1b414 <net_if_tx_thread+0x60>)
   1b3be:	f8df 805c 	ldr.w	r8, [pc, #92]	; 1b41c <net_if_tx_thread+0x68>
   1b3c2:	4f15      	ldr	r7, [pc, #84]	; (1b418 <net_if_tx_thread+0x64>)
	int ev_count = 0;
   1b3c4:	2400      	movs	r4, #0
   1b3c6:	f44f 7318 	mov.w	r3, #608	; 0x260
   1b3ca:	4363      	muls	r3, r4
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1b3cc:	199a      	adds	r2, r3, r6
   1b3ce:	4542      	cmp	r2, r8
   1b3d0:	d10a      	bne.n	1b3e8 <net_if_tx_thread+0x34>
		ret = k_poll(__net_if_event_start, ev_count, K_FOREVER);
   1b3d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1b3d6:	4621      	mov	r1, r4
   1b3d8:	4638      	mov	r0, r7
   1b3da:	f007 f95b 	bl	22694 <k_poll>
   1b3de:	4d0e      	ldr	r5, [pc, #56]	; (1b418 <net_if_tx_thread+0x64>)
	for (; ev_count; event++, ev_count--) {
   1b3e0:	b96c      	cbnz	r4, 1b3fe <net_if_tx_thread+0x4a>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   1b3e2:	f006 fb67 	bl	21ab4 <_impl_k_yield>
   1b3e6:	e7ed      	b.n	1b3c4 <net_if_tx_thread+0x10>
		k_poll_event_init(&__net_if_event_start[ev_count],
   1b3e8:	3318      	adds	r3, #24
   1b3ea:	2014      	movs	r0, #20
   1b3ec:	fb00 7004 	mla	r0, r0, r4, r7
   1b3f0:	4433      	add	r3, r6
   1b3f2:	2200      	movs	r2, #0
   1b3f4:	2104      	movs	r1, #4
   1b3f6:	f007 f939 	bl	2266c <k_poll_event_init>
		ev_count++;
   1b3fa:	3401      	adds	r4, #1
   1b3fc:	e7e3      	b.n	1b3c6 <net_if_tx_thread+0x12>
		switch (event->state) {
   1b3fe:	7b6b      	ldrb	r3, [r5, #13]
   1b400:	091b      	lsrs	r3, r3, #4
   1b402:	2b04      	cmp	r3, #4
   1b404:	d103      	bne.n	1b40e <net_if_tx_thread+0x5a>
			iface = CONTAINER_OF(event->fifo, struct net_if,
   1b406:	6928      	ldr	r0, [r5, #16]
			net_if_tx(iface);
   1b408:	3818      	subs	r0, #24
   1b40a:	f7ff ff7f 	bl	1b30c <net_if_tx>
	for (; ev_count; event++, ev_count--) {
   1b40e:	3514      	adds	r5, #20
   1b410:	3c01      	subs	r4, #1
   1b412:	e7e5      	b.n	1b3e0 <net_if_tx_thread+0x2c>
   1b414:	2000ab20 	.word	0x2000ab20
   1b418:	2000ad80 	.word	0x2000ad80
   1b41c:	2000ad80 	.word	0x2000ad80

0001b420 <net_if_get_by_index>:
	}
}

struct net_if *net_if_get_by_index(u8_t index)
{
	if (&__net_if_start[index] >= __net_if_end) {
   1b420:	4a04      	ldr	r2, [pc, #16]	; (1b434 <net_if_get_by_index+0x14>)
   1b422:	f44f 7318 	mov.w	r3, #608	; 0x260
   1b426:	fb03 2000 	mla	r0, r3, r0, r2
		NET_DBG("Index %d is too large", index);
		return NULL;
	}

	return &__net_if_start[index];
}
   1b42a:	4b03      	ldr	r3, [pc, #12]	; (1b438 <net_if_get_by_index+0x18>)
   1b42c:	4298      	cmp	r0, r3
   1b42e:	bf28      	it	cs
   1b430:	2000      	movcs	r0, #0
   1b432:	4770      	bx	lr
   1b434:	2000ab20 	.word	0x2000ab20
   1b438:	2000ad80 	.word	0x2000ad80

0001b43c <net_if_get_by_iface>:

u8_t net_if_get_by_iface(struct net_if *iface)
{
	NET_ASSERT(iface >= __net_if_start && iface < __net_if_end);

	return iface - __net_if_start;
   1b43c:	4b03      	ldr	r3, [pc, #12]	; (1b44c <net_if_get_by_iface+0x10>)
   1b43e:	1ac0      	subs	r0, r0, r3
   1b440:	4b03      	ldr	r3, [pc, #12]	; (1b450 <net_if_get_by_iface+0x14>)
   1b442:	1140      	asrs	r0, r0, #5
   1b444:	4358      	muls	r0, r3
}
   1b446:	b2c0      	uxtb	r0, r0
   1b448:	4770      	bx	lr
   1b44a:	bf00      	nop
   1b44c:	2000ab20 	.word	0x2000ab20
   1b450:	286bca1b 	.word	0x286bca1b

0001b454 <net_if_up>:
		cb(iface, user_data);
	}
}

int net_if_up(struct net_if *iface)
{
   1b454:	b538      	push	{r3, r4, r5, lr}
	int status;

	NET_DBG("iface %p", iface);

	if (atomic_test_bit(iface->flags, NET_IF_UP)) {
   1b456:	f100 050c 	add.w	r5, r0, #12
{
   1b45a:	4604      	mov	r4, r0
	if (atomic_test_bit(iface->flags, NET_IF_UP)) {
   1b45c:	2100      	movs	r1, #0
   1b45e:	4628      	mov	r0, r5
   1b460:	f7ff f99d 	bl	1a79e <atomic_test_bit>
   1b464:	b9c0      	cbnz	r0, 1b498 <net_if_up+0x44>
		return 0;
	}

	/* If the L2 does not support enable just set the flag */
	if (!iface->l2->enable) {
   1b466:	6863      	ldr	r3, [r4, #4]
   1b468:	68db      	ldr	r3, [r3, #12]
   1b46a:	b9bb      	cbnz	r3, 1b49c <net_if_up+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1b46c:	f3bf 8f5b 	dmb	ish
   1b470:	e855 3f00 	ldrex	r3, [r5]
   1b474:	f043 0301 	orr.w	r3, r3, #1
   1b478:	e845 3200 	strex	r2, r3, [r5]
   1b47c:	2a00      	cmp	r2, #0
   1b47e:	d1f7      	bne.n	1b470 <net_if_up+0x1c>
   1b480:	f3bf 8f5b 	dmb	ish
done:
	atomic_set_bit(iface->flags, NET_IF_UP);

#if defined(CONFIG_NET_IPV6_DAD)
	NET_DBG("Starting DAD for iface %p", iface);
	net_if_start_dad(iface);
   1b484:	4620      	mov	r0, r4
   1b486:	f7ff fb3f 	bl	1ab08 <net_if_start_dad>
	join_mcast_solicit_node(iface, &iface->ipv6.mcast[0].address.in6_addr);
#endif

#if defined(CONFIG_NET_IPV6_ND)
	NET_DBG("Starting ND/RS for iface %p", iface);
	net_if_start_rs(iface);
   1b48a:	4620      	mov	r0, r4
   1b48c:	f7ff fa04 	bl	1a898 <net_if_start_rs>
#endif

	net_mgmt_event_notify(NET_EVENT_IF_UP, iface);
   1b490:	4621      	mov	r1, r4
   1b492:	4805      	ldr	r0, [pc, #20]	; (1b4a8 <net_if_up+0x54>)
   1b494:	f7ff f9c6 	bl	1a824 <net_mgmt_event_notify>
		return 0;
   1b498:	2000      	movs	r0, #0

	return 0;
}
   1b49a:	bd38      	pop	{r3, r4, r5, pc}
	status = iface->l2->enable(iface, true);
   1b49c:	2101      	movs	r1, #1
   1b49e:	4620      	mov	r0, r4
   1b4a0:	4798      	blx	r3
	if (status < 0) {
   1b4a2:	2800      	cmp	r0, #0
   1b4a4:	dae2      	bge.n	1b46c <net_if_up+0x18>
   1b4a6:	bd38      	pop	{r3, r4, r5, pc}
   1b4a8:	d0010002 	.word	0xd0010002

0001b4ac <net_if_carrier_down>:

void net_if_carrier_down(struct net_if *iface)
{
   1b4ac:	b510      	push	{r4, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1b4ae:	f100 030c 	add.w	r3, r0, #12
   1b4b2:	4604      	mov	r4, r0
   1b4b4:	f3bf 8f5b 	dmb	ish
   1b4b8:	e853 2f00 	ldrex	r2, [r3]
   1b4bc:	f022 0201 	bic.w	r2, r2, #1
   1b4c0:	e843 2100 	strex	r1, r2, [r3]
   1b4c4:	2900      	cmp	r1, #0
   1b4c6:	d1f7      	bne.n	1b4b8 <net_if_carrier_down+0xc>
   1b4c8:	f3bf 8f5b 	dmb	ish
	NET_DBG("iface %p", iface);

	atomic_clear_bit(iface->flags, NET_IF_UP);

	net_if_flush_tx(iface);
   1b4cc:	f7ff ff66 	bl	1b39c <net_if_flush_tx>

	net_mgmt_event_notify(NET_EVENT_IF_DOWN, iface);
   1b4d0:	4621      	mov	r1, r4
   1b4d2:	4802      	ldr	r0, [pc, #8]	; (1b4dc <net_if_carrier_down+0x30>)
}
   1b4d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	net_mgmt_event_notify(NET_EVENT_IF_DOWN, iface);
   1b4d8:	f7ff b9a4 	b.w	1a824 <net_mgmt_event_notify>
   1b4dc:	d0010001 	.word	0xd0010001

0001b4e0 <net_if_init>:

	return 0;
}

void net_if_init(struct k_sem *startup_sync)
{
   1b4e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct net_if *iface;

	NET_DBG("");

	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1b4e4:	4c1f      	ldr	r4, [pc, #124]	; (1b564 <net_if_init+0x84>)
   1b4e6:	4f20      	ldr	r7, [pc, #128]	; (1b568 <net_if_init+0x88>)
		iface->ipv6.base_reachable_time = REACHABLE_TIME;

		net_if_ipv6_set_reachable_time(iface);

#if defined(CONFIG_NET_IPV6_ND)
		k_delayed_work_init(&iface->ipv6.rs_timer, rs_timeout);
   1b4e8:	f8df 908c 	ldr.w	r9, [pc, #140]	; 1b578 <net_if_init+0x98>
{
   1b4ec:	b086      	sub	sp, #24
   1b4ee:	4605      	mov	r5, r0
   1b4f0:	4626      	mov	r6, r4
		iface->ipv6.hop_limit = CONFIG_NET_INITIAL_HOP_LIMIT;
   1b4f2:	f04f 0840 	mov.w	r8, #64	; 0x40
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1b4f6:	42bc      	cmp	r4, r7
   1b4f8:	d115      	bne.n	1b526 <net_if_init+0x46>
#endif
#endif
	}

	if (iface == __net_if_start) {
   1b4fa:	42b4      	cmp	r4, r6
   1b4fc:	d010      	beq.n	1b520 <net_if_init+0x40>

   1b4fe:	2201      	movs	r2, #1
   1b500:	2300      	movs	r3, #0
   1b502:	9204      	str	r2, [sp, #16]
   1b504:	f06f 0208 	mvn.w	r2, #8
   1b508:	9305      	str	r3, [sp, #20]
   1b50a:	9203      	str	r2, [sp, #12]
   1b50c:	9302      	str	r3, [sp, #8]
   1b50e:	9301      	str	r3, [sp, #4]
   1b510:	9500      	str	r5, [sp, #0]
   1b512:	4b16      	ldr	r3, [pc, #88]	; (1b56c <net_if_init+0x8c>)
   1b514:	4916      	ldr	r1, [pc, #88]	; (1b570 <net_if_init+0x90>)
   1b516:	4817      	ldr	r0, [pc, #92]	; (1b574 <net_if_init+0x94>)
   1b518:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
   1b51c:	f006 fd82 	bl	22024 <_impl_k_thread_create>
	k_thread_create(&tx_thread_data, tx_stack,
			K_THREAD_STACK_SIZEOF(tx_stack),
			(k_thread_entry_t)net_if_tx_thread,
			startup_sync, NULL, NULL, K_PRIO_COOP(7),
			K_ESSENTIAL, K_NO_WAIT);
}
   1b520:	b006      	add	sp, #24
   1b522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	const struct net_if_api *api = iface->dev->driver_api;
   1b526:	4620      	mov	r0, r4
   1b528:	f850 3b18 	ldr.w	r3, [r0], #24
   1b52c:	f8d3 a004 	ldr.w	sl, [r3, #4]
	k_fifo_init(&iface->tx_queue);
   1b530:	f006 f8c0 	bl	216b4 <k_queue_init>
	api->init(iface);
   1b534:	4620      	mov	r0, r4
   1b536:	f8da 3000 	ldr.w	r3, [sl]
   1b53a:	4798      	blx	r3
		iface->ipv6.base_reachable_time = REACHABLE_TIME;
   1b53c:	f247 5330 	movw	r3, #30000	; 0x7530
	iface->ipv6.reachable_time = net_if_ipv6_calc_reachable_time(iface);
   1b540:	4620      	mov	r0, r4
   1b542:	f8c4 3240 	str.w	r3, [r4, #576]	; 0x240
		iface->ipv6.hop_limit = CONFIG_NET_INITIAL_HOP_LIMIT;
   1b546:	f884 824c 	strb.w	r8, [r4, #588]	; 0x24c
   1b54a:	f7ff fe65 	bl	1b218 <net_if_ipv6_calc_reachable_time>
		k_delayed_work_init(&iface->ipv6.rs_timer, rs_timeout);
   1b54e:	4649      	mov	r1, r9
   1b550:	f8c4 0244 	str.w	r0, [r4, #580]	; 0x244
   1b554:	f504 7006 	add.w	r0, r4, #536	; 0x218
   1b558:	f006 fe54 	bl	22204 <k_delayed_work_init>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1b55c:	f504 7418 	add.w	r4, r4, #608	; 0x260
   1b560:	e7c9      	b.n	1b4f6 <net_if_init+0x16>
   1b562:	bf00      	nop
   1b564:	2000ab20 	.word	0x2000ab20
   1b568:	2000ad80 	.word	0x2000ad80
   1b56c:	0001b3b5 	.word	0x0001b3b5
   1b570:	20006718 	.word	0x20006718
   1b574:	20002774 	.word	0x20002774
   1b578:	0001a8b5 	.word	0x0001a8b5

0001b57c <net_if_post_init>:

void net_if_post_init(void)
{
   1b57c:	b538      	push	{r3, r4, r5, lr}
	struct net_if *iface;

	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1b57e:	4c05      	ldr	r4, [pc, #20]	; (1b594 <net_if_post_init+0x18>)
   1b580:	4d05      	ldr	r5, [pc, #20]	; (1b598 <net_if_post_init+0x1c>)
   1b582:	42ac      	cmp	r4, r5
   1b584:	d100      	bne.n	1b588 <net_if_post_init+0xc>

	/* RPL init must be done after the network interface is up
	 * as the RPL code wants to add multicast address to interface.
	 */
	net_rpl_init();
}
   1b586:	bd38      	pop	{r3, r4, r5, pc}
		net_if_up(iface);
   1b588:	4620      	mov	r0, r4
   1b58a:	f7ff ff63 	bl	1b454 <net_if_up>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1b58e:	f504 7418 	add.w	r4, r4, #608	; 0x260
   1b592:	e7f6      	b.n	1b582 <net_if_post_init+0x6>
   1b594:	2000ab20 	.word	0x2000ab20
   1b598:	2000ad80 	.word	0x2000ad80

0001b59c <net_pkt_get_addr>:
	}
}

static int net_pkt_get_addr(struct net_pkt *pkt, bool is_src,
			    struct sockaddr *addr, socklen_t addrlen)
{
   1b59c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b5a0:	4606      	mov	r6, r0
   1b5a2:	b08a      	sub	sp, #40	; 0x28
   1b5a4:	460f      	mov	r7, r1
   1b5a6:	4698      	mov	r8, r3
	enum net_ip_protocol proto;
	sa_family_t family;
	u16_t port;

	if (!addr || !pkt) {
   1b5a8:	4614      	mov	r4, r2
   1b5aa:	b922      	cbnz	r2, 1b5b6 <net_pkt_get_addr+0x1a>
	} else if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
		struct net_udp_hdr hdr, *udp_hdr;

		udp_hdr = net_udp_get_hdr(pkt, &hdr);
		if (!udp_hdr) {
			return -EINVAL;
   1b5ac:	f06f 0015 	mvn.w	r0, #21
	} else {
		return -ENOTSUP;
	}

	return 0;
}
   1b5b0:	b00a      	add	sp, #40	; 0x28
   1b5b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!addr || !pkt) {
   1b5b6:	2800      	cmp	r0, #0
   1b5b8:	d0f8      	beq.n	1b5ac <net_pkt_get_addr+0x10>
	return pkt->family;
   1b5ba:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
	family = net_pkt_family(pkt);
   1b5be:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (IS_ENABLED(CONFIG_NET_IPV6) && family == AF_INET6) {
   1b5c2:	2b0a      	cmp	r3, #10
	addr->sa_family = family;
   1b5c4:	8013      	strh	r3, [r2, #0]
	if (IS_ENABLED(CONFIG_NET_IPV6) && family == AF_INET6) {
   1b5c6:	d14f      	bne.n	1b668 <net_pkt_get_addr+0xcc>
	return pkt->frags->data;
   1b5c8:	6883      	ldr	r3, [r0, #8]
		proto = NET_IPV6_HDR(pkt)->nexthdr;
   1b5ca:	689b      	ldr	r3, [r3, #8]
   1b5cc:	799b      	ldrb	r3, [r3, #6]
	if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
   1b5ce:	2b06      	cmp	r3, #6
   1b5d0:	d128      	bne.n	1b624 <net_pkt_get_addr+0x88>
		tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   1b5d2:	a905      	add	r1, sp, #20
   1b5d4:	f004 febe 	bl	20354 <net_tcp_get_hdr>
		if (!udp_hdr) {
   1b5d8:	2800      	cmp	r0, #0
   1b5da:	d0e7      	beq.n	1b5ac <net_pkt_get_addr+0x10>
		if (is_src) {
   1b5dc:	b347      	cbz	r7, 1b630 <net_pkt_get_addr+0x94>
			port = udp_hdr->src_port;
   1b5de:	8805      	ldrh	r5, [r0, #0]
		if (addrlen < sizeof(struct sockaddr_in6)) {
   1b5e0:	f1b8 0f17 	cmp.w	r8, #23
   1b5e4:	d9e2      	bls.n	1b5ac <net_pkt_get_addr+0x10>
   1b5e6:	68b3      	ldr	r3, [r6, #8]
			net_ipaddr_copy(&addr6->sin6_addr,
   1b5e8:	689e      	ldr	r6, [r3, #8]
		if (is_src) {
   1b5ea:	b31f      	cbz	r7, 1b634 <net_pkt_get_addr+0x98>
			net_ipaddr_copy(&addr6->sin6_addr,
   1b5ec:	af01      	add	r7, sp, #4
   1b5ee:	f106 0308 	add.w	r3, r6, #8
   1b5f2:	463a      	mov	r2, r7
   1b5f4:	3618      	adds	r6, #24
   1b5f6:	6818      	ldr	r0, [r3, #0]
   1b5f8:	6859      	ldr	r1, [r3, #4]
   1b5fa:	46be      	mov	lr, r7
   1b5fc:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   1b600:	3308      	adds	r3, #8
   1b602:	42b3      	cmp	r3, r6
   1b604:	4677      	mov	r7, lr
   1b606:	d1f6      	bne.n	1b5f6 <net_pkt_get_addr+0x5a>
   1b608:	1d26      	adds	r6, r4, #4
   1b60a:	af05      	add	r7, sp, #20
   1b60c:	4613      	mov	r3, r2
   1b60e:	cb03      	ldmia	r3!, {r0, r1}
   1b610:	42bb      	cmp	r3, r7
   1b612:	6030      	str	r0, [r6, #0]
   1b614:	6071      	str	r1, [r6, #4]
   1b616:	461a      	mov	r2, r3
   1b618:	f106 0608 	add.w	r6, r6, #8
   1b61c:	d1f6      	bne.n	1b60c <net_pkt_get_addr+0x70>
		addr6->sin6_port = port;
   1b61e:	8065      	strh	r5, [r4, #2]
	return 0;
   1b620:	2000      	movs	r0, #0
   1b622:	e7c5      	b.n	1b5b0 <net_pkt_get_addr+0x14>
	} else if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   1b624:	2b11      	cmp	r3, #17
   1b626:	d11f      	bne.n	1b668 <net_pkt_get_addr+0xcc>
		udp_hdr = net_udp_get_hdr(pkt, &hdr);
   1b628:	a905      	add	r1, sp, #20
   1b62a:	f005 fad9 	bl	20be0 <net_udp_get_hdr>
   1b62e:	e7d3      	b.n	1b5d8 <net_pkt_get_addr+0x3c>
			port = udp_hdr->dst_port;
   1b630:	8845      	ldrh	r5, [r0, #2]
   1b632:	e7d5      	b.n	1b5e0 <net_pkt_get_addr+0x44>
			net_ipaddr_copy(&addr6->sin6_addr,
   1b634:	af05      	add	r7, sp, #20
   1b636:	f106 0318 	add.w	r3, r6, #24
   1b63a:	463a      	mov	r2, r7
   1b63c:	3628      	adds	r6, #40	; 0x28
   1b63e:	6818      	ldr	r0, [r3, #0]
   1b640:	6859      	ldr	r1, [r3, #4]
   1b642:	46be      	mov	lr, r7
   1b644:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   1b648:	3308      	adds	r3, #8
   1b64a:	42b3      	cmp	r3, r6
   1b64c:	4677      	mov	r7, lr
   1b64e:	d1f6      	bne.n	1b63e <net_pkt_get_addr+0xa2>
   1b650:	1d26      	adds	r6, r4, #4
   1b652:	af09      	add	r7, sp, #36	; 0x24
   1b654:	4613      	mov	r3, r2
   1b656:	cb03      	ldmia	r3!, {r0, r1}
   1b658:	42bb      	cmp	r3, r7
   1b65a:	6030      	str	r0, [r6, #0]
   1b65c:	6071      	str	r1, [r6, #4]
   1b65e:	461a      	mov	r2, r3
   1b660:	f106 0608 	add.w	r6, r6, #8
   1b664:	d1f6      	bne.n	1b654 <net_pkt_get_addr+0xb8>
   1b666:	e7da      	b.n	1b61e <net_pkt_get_addr+0x82>
		return -ENOTSUP;
   1b668:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1b66c:	e7a0      	b.n	1b5b0 <net_pkt_get_addr+0x14>

0001b66e <net_pkt_get_reserve>:
{
   1b66e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1b670:	4604      	mov	r4, r0
   1b672:	460d      	mov	r5, r1
   1b674:	4616      	mov	r6, r2
	if (k_is_in_isr()) {
   1b676:	f006 fc85 	bl	21f84 <k_is_in_isr>
   1b67a:	b198      	cbz	r0, 1b6a4 <net_pkt_get_reserve+0x36>
		ret = k_mem_slab_alloc(slab, (void **)&pkt, K_NO_WAIT);
   1b67c:	2200      	movs	r2, #0
		ret = k_mem_slab_alloc(slab, (void **)&pkt, timeout);
   1b67e:	a901      	add	r1, sp, #4
   1b680:	4620      	mov	r0, r4
   1b682:	f005 fef9 	bl	21478 <k_mem_slab_alloc>
	if (ret) {
   1b686:	b978      	cbnz	r0, 1b6a8 <net_pkt_get_reserve+0x3a>
	memset(pkt, 0, sizeof(struct net_pkt));
   1b688:	4601      	mov	r1, r0
   1b68a:	2248      	movs	r2, #72	; 0x48
   1b68c:	9801      	ldr	r0, [sp, #4]
   1b68e:	f7e5 f8ac 	bl	7ea <memset>
	net_pkt_set_ll_reserve(pkt, reserve_head);
   1b692:	9801      	ldr	r0, [sp, #4]
	pkt->ref = 1;
   1b694:	2301      	movs	r3, #1
	net_pkt_set_ll_reserve(pkt, reserve_head);
   1b696:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
	pkt->ref = 1;
   1b69a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
	pkt->slab = slab;
   1b69e:	6044      	str	r4, [r0, #4]
}
   1b6a0:	b002      	add	sp, #8
   1b6a2:	bd70      	pop	{r4, r5, r6, pc}
		ret = k_mem_slab_alloc(slab, (void **)&pkt, timeout);
   1b6a4:	4632      	mov	r2, r6
   1b6a6:	e7ea      	b.n	1b67e <net_pkt_get_reserve+0x10>
		return NULL;
   1b6a8:	2000      	movs	r0, #0
   1b6aa:	e7f9      	b.n	1b6a0 <net_pkt_get_reserve+0x32>

0001b6ac <net_pkt_get>:
{
   1b6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b6ae:	4606      	mov	r6, r0
   1b6b0:	4617      	mov	r7, r2
	if (!context) {
   1b6b2:	460c      	mov	r4, r1
   1b6b4:	b909      	cbnz	r1, 1b6ba <net_pkt_get+0xe>
		return NULL;
   1b6b6:	2000      	movs	r0, #0
   1b6b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_if_get_by_index(context->iface);
   1b6ba:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
   1b6be:	f7ff feaf 	bl	1b420 <net_if_get_by_index>
	if (!iface) {
   1b6c2:	4605      	mov	r5, r0
   1b6c4:	2800      	cmp	r0, #0
   1b6c6:	d0f6      	beq.n	1b6b6 <net_pkt_get+0xa>
	if (context->flags & NET_CONTEXT_FAMILY) {
   1b6c8:	f894 105d 	ldrb.w	r1, [r4, #93]	; 0x5d
   1b6cc:	f011 0110 	ands.w	r1, r1, #16
   1b6d0:	d135      	bne.n	1b73e <net_pkt_get+0x92>
	return iface->l2->reserve(iface, (void *)dst_ip6);
   1b6d2:	686b      	ldr	r3, [r5, #4]
   1b6d4:	4628      	mov	r0, r5
   1b6d6:	689b      	ldr	r3, [r3, #8]
   1b6d8:	4798      	blx	r3
	pkt = net_pkt_get_reserve(slab, net_if_get_ll_reserve(iface, addr6),
   1b6da:	463a      	mov	r2, r7
   1b6dc:	4601      	mov	r1, r0
   1b6de:	4630      	mov	r0, r6
   1b6e0:	f7ff ffc5 	bl	1b66e <net_pkt_get_reserve>
	if (!pkt) {
   1b6e4:	2800      	cmp	r0, #0
   1b6e6:	d0e6      	beq.n	1b6b6 <net_pkt_get+0xa>
	pkt->context = ctx;
   1b6e8:	60c4      	str	r4, [r0, #12]
	pkt->iface = iface;
   1b6ea:	6145      	str	r5, [r0, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1b6ec:	7d6b      	ldrb	r3, [r5, #21]
   1b6ee:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1b6f2:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
   1b6f6:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
	return AF_INET;
   1b6fa:	f013 0f10 	tst.w	r3, #16
	pkt->family = family;
   1b6fe:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   1b702:	bf14      	ite	ne
   1b704:	220a      	movne	r2, #10
   1b706:	2202      	moveq	r2, #2
   1b708:	f362 03c6 	bfi	r3, r2, #3, #4
   1b70c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
	if (slab != &rx_pkts) {
   1b710:	4b0e      	ldr	r3, [pc, #56]	; (1b74c <net_pkt_get+0xa0>)
   1b712:	429e      	cmp	r6, r3
   1b714:	d018      	beq.n	1b748 <net_pkt_get+0x9c>
		if (IS_ENABLED(CONFIG_NET_IPV6) && family == AF_INET6) {
   1b716:	2a0a      	cmp	r2, #10
   1b718:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
   1b71a:	d10e      	bne.n	1b73a <net_pkt_get+0x8e>
			data_len = max(iface_len, NET_IPV6_MTU);
   1b71c:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
   1b720:	bf38      	it	cc
   1b722:	f44f 63a0 	movcc.w	r3, #1280	; 0x500
			data_len -= NET_IPV6H_LEN;
   1b726:	3b28      	subs	r3, #40	; 0x28
   1b728:	b29b      	uxth	r3, r3
	if (context->flags & NET_CONTEXT_PROTO) {
   1b72a:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
   1b72e:	0652      	lsls	r2, r2, #25
   1b730:	d408      	bmi.n	1b744 <net_pkt_get+0x98>
			data_len -= NET_UDPH_LEN;
   1b732:	3b08      	subs	r3, #8
   1b734:	b29b      	uxth	r3, r3
		pkt->data_len = data_len;
   1b736:	8603      	strh	r3, [r0, #48]	; 0x30
   1b738:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint16_t iface_len, data_len = 0;
   1b73a:	2300      	movs	r3, #0
   1b73c:	e7f5      	b.n	1b72a <net_pkt_get+0x7e>
		addr6 = &((struct sockaddr_in6 *) &context->remote)->sin6_addr;
   1b73e:	f104 0118 	add.w	r1, r4, #24
   1b742:	e7c6      	b.n	1b6d2 <net_pkt_get+0x26>
			data_len -= NET_TCP_MAX_OPT_SIZE;
   1b744:	3b1c      	subs	r3, #28
   1b746:	e7f5      	b.n	1b734 <net_pkt_get+0x88>
}
   1b748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b74a:	bf00      	nop
   1b74c:	2000a97c 	.word	0x2000a97c

0001b750 <net_pkt_get_reserve_data>:
{
   1b750:	b570      	push	{r4, r5, r6, lr}
   1b752:	4604      	mov	r4, r0
   1b754:	460d      	mov	r5, r1
   1b756:	4616      	mov	r6, r2
	if (k_is_in_isr()) {
   1b758:	f006 fc14 	bl	21f84 <k_is_in_isr>
   1b75c:	b158      	cbz	r0, 1b776 <net_pkt_get_reserve_data+0x26>
		frag = net_buf_alloc(pool, K_NO_WAIT);
   1b75e:	2100      	movs	r1, #0
		frag = net_buf_alloc(pool, timeout);
   1b760:	4620      	mov	r0, r4
   1b762:	f7fd fd91 	bl	19288 <net_buf_alloc_fixed>
   1b766:	4604      	mov	r4, r0
	if (!frag) {
   1b768:	b118      	cbz	r0, 1b772 <net_pkt_get_reserve_data+0x22>
	net_buf_reserve(frag, reserve_head);
   1b76a:	4629      	mov	r1, r5
   1b76c:	3008      	adds	r0, #8
   1b76e:	f7fd fdaa 	bl	192c6 <net_buf_simple_reserve>
}
   1b772:	4620      	mov	r0, r4
   1b774:	bd70      	pop	{r4, r5, r6, pc}
		frag = net_buf_alloc(pool, timeout);
   1b776:	4631      	mov	r1, r6
   1b778:	e7f2      	b.n	1b760 <net_pkt_get_reserve_data+0x10>
	...

0001b77c <net_pkt_get_reserve_rx>:
	return net_pkt_get_reserve(&rx_pkts, reserve_head, timeout);
   1b77c:	460a      	mov	r2, r1
   1b77e:	4601      	mov	r1, r0
   1b780:	4801      	ldr	r0, [pc, #4]	; (1b788 <net_pkt_get_reserve_rx+0xc>)
   1b782:	f7ff bf74 	b.w	1b66e <net_pkt_get_reserve>
   1b786:	bf00      	nop
   1b788:	2000a97c 	.word	0x2000a97c

0001b78c <net_pkt_get_reserve_tx>:
	return net_pkt_get_reserve(&tx_pkts, reserve_head, timeout);
   1b78c:	460a      	mov	r2, r1
   1b78e:	4601      	mov	r1, r0
   1b790:	4801      	ldr	r0, [pc, #4]	; (1b798 <net_pkt_get_reserve_tx+0xc>)
   1b792:	f7ff bf6c 	b.w	1b66e <net_pkt_get_reserve>
   1b796:	bf00      	nop
   1b798:	2000a998 	.word	0x2000a998

0001b79c <net_pkt_get_reserve_rx_data>:
	return net_pkt_get_reserve_data(&rx_bufs, reserve_head, timeout);
   1b79c:	460a      	mov	r2, r1
   1b79e:	4601      	mov	r1, r0
   1b7a0:	4801      	ldr	r0, [pc, #4]	; (1b7a8 <net_pkt_get_reserve_rx_data+0xc>)
   1b7a2:	f7ff bfd5 	b.w	1b750 <net_pkt_get_reserve_data>
   1b7a6:	bf00      	nop
   1b7a8:	2000aadc 	.word	0x2000aadc

0001b7ac <net_pkt_get_reserve_tx_data>:
	return net_pkt_get_reserve_data(&tx_bufs, reserve_head, timeout);
   1b7ac:	460a      	mov	r2, r1
   1b7ae:	4601      	mov	r1, r0
   1b7b0:	4801      	ldr	r0, [pc, #4]	; (1b7b8 <net_pkt_get_reserve_tx_data+0xc>)
   1b7b2:	f7ff bfcd 	b.w	1b750 <net_pkt_get_reserve_data>
   1b7b6:	bf00      	nop
   1b7b8:	2000aafc 	.word	0x2000aafc

0001b7bc <net_pkt_get_frag>:
{
   1b7bc:	b538      	push	{r3, r4, r5, lr}
   1b7be:	68c3      	ldr	r3, [r0, #12]
   1b7c0:	4604      	mov	r4, r0
   1b7c2:	460d      	mov	r5, r1
	if (context && context->data_pool) {
   1b7c4:	b14b      	cbz	r3, 1b7da <net_pkt_get_frag+0x1e>
   1b7c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b7c8:	b13b      	cbz	r3, 1b7da <net_pkt_get_frag+0x1e>
		return net_pkt_get_reserve_data(context->data_pool(),
   1b7ca:	4798      	blx	r3
   1b7cc:	462a      	mov	r2, r5
   1b7ce:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
}
   1b7d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return net_pkt_get_reserve_data(context->data_pool(),
   1b7d6:	f7ff bfbb 	b.w	1b750 <net_pkt_get_reserve_data>
	if (pkt->slab == &rx_pkts) {
   1b7da:	6862      	ldr	r2, [r4, #4]
   1b7dc:	4b06      	ldr	r3, [pc, #24]	; (1b7f8 <net_pkt_get_frag+0x3c>)
   1b7de:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
   1b7e2:	429a      	cmp	r2, r3
		return net_pkt_get_reserve_rx_data(net_pkt_ll_reserve(pkt),
   1b7e4:	4629      	mov	r1, r5
	if (pkt->slab == &rx_pkts) {
   1b7e6:	d103      	bne.n	1b7f0 <net_pkt_get_frag+0x34>
}
   1b7e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return net_pkt_get_reserve_rx_data(net_pkt_ll_reserve(pkt),
   1b7ec:	f7ff bfd6 	b.w	1b79c <net_pkt_get_reserve_rx_data>
}
   1b7f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_pkt_get_reserve_tx_data(net_pkt_ll_reserve(pkt),
   1b7f4:	f7ff bfda 	b.w	1b7ac <net_pkt_get_reserve_tx_data>
   1b7f8:	2000a97c 	.word	0x2000a97c

0001b7fc <net_pkt_get_tx>:
{
   1b7fc:	b538      	push	{r3, r4, r5, lr}
   1b7fe:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   1b800:	4604      	mov	r4, r0
   1b802:	460d      	mov	r5, r1
	if (context->tx_slab) {
   1b804:	b933      	cbnz	r3, 1b814 <net_pkt_get_tx+0x18>
	return net_pkt_get(slab ? slab : &tx_pkts, context, timeout);
   1b806:	4805      	ldr	r0, [pc, #20]	; (1b81c <net_pkt_get_tx+0x20>)
   1b808:	462a      	mov	r2, r5
   1b80a:	4621      	mov	r1, r4
}
   1b80c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_pkt_get(slab ? slab : &tx_pkts, context, timeout);
   1b810:	f7ff bf4c 	b.w	1b6ac <net_pkt_get>
		return context->tx_slab();
   1b814:	4798      	blx	r3
	return net_pkt_get(slab ? slab : &tx_pkts, context, timeout);
   1b816:	2800      	cmp	r0, #0
   1b818:	d1f6      	bne.n	1b808 <net_pkt_get_tx+0xc>
   1b81a:	e7f4      	b.n	1b806 <net_pkt_get_tx+0xa>
   1b81c:	2000a998 	.word	0x2000a998

0001b820 <net_pkt_get_data>:
{
   1b820:	6c03      	ldr	r3, [r0, #64]	; 0x40
   1b822:	b570      	push	{r4, r5, r6, lr}
   1b824:	4604      	mov	r4, r0
   1b826:	460e      	mov	r6, r1
	if (context->data_pool) {
   1b828:	b9b3      	cbnz	r3, 1b858 <net_pkt_get_data+0x38>
	return _pkt_get_data(pool ? pool : &tx_bufs, context, timeout);
   1b82a:	4d10      	ldr	r5, [pc, #64]	; (1b86c <net_pkt_get_data+0x4c>)
	return net_if_get_by_index(context->iface);
   1b82c:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
   1b830:	f7ff fdf6 	bl	1b420 <net_if_get_by_index>
	if (!iface) {
   1b834:	4603      	mov	r3, r0
   1b836:	b1b8      	cbz	r0, 1b868 <net_pkt_get_data+0x48>
	if (context->flags & NET_CONTEXT_FAMILY) {
   1b838:	f894 105d 	ldrb.w	r1, [r4, #93]	; 0x5d
   1b83c:	f011 0110 	ands.w	r1, r1, #16
   1b840:	d10f      	bne.n	1b862 <net_pkt_get_data+0x42>
   1b842:	685a      	ldr	r2, [r3, #4]
   1b844:	4618      	mov	r0, r3
   1b846:	6892      	ldr	r2, [r2, #8]
   1b848:	4790      	blx	r2
	frag = net_pkt_get_reserve_data(pool,
   1b84a:	4632      	mov	r2, r6
   1b84c:	4601      	mov	r1, r0
   1b84e:	4628      	mov	r0, r5
}
   1b850:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	frag = net_pkt_get_reserve_data(pool,
   1b854:	f7ff bf7c 	b.w	1b750 <net_pkt_get_reserve_data>
		return context->data_pool();
   1b858:	4798      	blx	r3
	return _pkt_get_data(pool ? pool : &tx_bufs, context, timeout);
   1b85a:	4605      	mov	r5, r0
   1b85c:	2800      	cmp	r0, #0
   1b85e:	d1e5      	bne.n	1b82c <net_pkt_get_data+0xc>
   1b860:	e7e3      	b.n	1b82a <net_pkt_get_data+0xa>
		addr6 = &((struct sockaddr_in6 *) &context->remote)->sin6_addr;
   1b862:	f104 0118 	add.w	r1, r4, #24
   1b866:	e7ec      	b.n	1b842 <net_pkt_get_data+0x22>
}
   1b868:	bd70      	pop	{r4, r5, r6, pc}
   1b86a:	bf00      	nop
   1b86c:	2000aafc 	.word	0x2000aafc

0001b870 <net_pkt_ref>:
	if (!pkt) {
   1b870:	b120      	cbz	r0, 1b87c <net_pkt_ref+0xc>
	pkt->ref++;
   1b872:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
   1b876:	3301      	adds	r3, #1
   1b878:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
}
   1b87c:	4770      	bx	lr

0001b87e <net_pkt_frag_unref>:
	if (!frag) {
   1b87e:	b108      	cbz	r0, 1b884 <net_pkt_frag_unref+0x6>
	net_buf_unref(frag);
   1b880:	f7fd bd32 	b.w	192e8 <net_buf_unref>
   1b884:	4770      	bx	lr

0001b886 <net_pkt_unref>:
{
   1b886:	b507      	push	{r0, r1, r2, lr}
   1b888:	9001      	str	r0, [sp, #4]
	if (!pkt) {
   1b88a:	b180      	cbz	r0, 1b8ae <net_pkt_unref+0x28>
	if (!pkt->ref) {
   1b88c:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
   1b890:	b16b      	cbz	r3, 1b8ae <net_pkt_unref+0x28>
	if (--pkt->ref > 0) {
   1b892:	3b01      	subs	r3, #1
   1b894:	b2db      	uxtb	r3, r3
   1b896:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
   1b89a:	b943      	cbnz	r3, 1b8ae <net_pkt_unref+0x28>
	if (pkt->frags) {
   1b89c:	6880      	ldr	r0, [r0, #8]
   1b89e:	b108      	cbz	r0, 1b8a4 <net_pkt_unref+0x1e>
		net_pkt_frag_unref(pkt->frags);
   1b8a0:	f7ff ffed 	bl	1b87e <net_pkt_frag_unref>
	k_mem_slab_free(pkt->slab, (void **)&pkt);
   1b8a4:	9b01      	ldr	r3, [sp, #4]
   1b8a6:	a901      	add	r1, sp, #4
   1b8a8:	6858      	ldr	r0, [r3, #4]
   1b8aa:	f005 fe11 	bl	214d0 <k_mem_slab_free>
}
   1b8ae:	b003      	add	sp, #12
   1b8b0:	f85d fb04 	ldr.w	pc, [sp], #4

0001b8b4 <net_pkt_frag_del>:
{
   1b8b4:	b510      	push	{r4, lr}
   1b8b6:	4604      	mov	r4, r0
   1b8b8:	4608      	mov	r0, r1
	if (pkt->frags == frag && !parent) {
   1b8ba:	68a1      	ldr	r1, [r4, #8]
   1b8bc:	4291      	cmp	r1, r2
   1b8be:	d104      	bne.n	1b8ca <net_pkt_frag_del+0x16>
   1b8c0:	b918      	cbnz	r0, 1b8ca <net_pkt_frag_del+0x16>
		tmp = net_buf_frag_del(NULL, frag);
   1b8c2:	f7fd fd63 	bl	1938c <net_buf_frag_del>
		pkt->frags = tmp;
   1b8c6:	60a0      	str	r0, [r4, #8]
   1b8c8:	bd10      	pop	{r4, pc}
	return net_buf_frag_del(parent, frag);
   1b8ca:	4611      	mov	r1, r2
}
   1b8cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return net_buf_frag_del(parent, frag);
   1b8d0:	f7fd bd5c 	b.w	1938c <net_buf_frag_del>

0001b8d4 <net_pkt_frag_add>:
	if (!pkt->frags) {
   1b8d4:	6883      	ldr	r3, [r0, #8]
{
   1b8d6:	b510      	push	{r4, lr}
   1b8d8:	460c      	mov	r4, r1
	if (!pkt->frags) {
   1b8da:	b90b      	cbnz	r3, 1b8e0 <net_pkt_frag_add+0xc>
		pkt->frags = frag;
   1b8dc:	6081      	str	r1, [r0, #8]
		return;
   1b8de:	bd10      	pop	{r4, pc}
	net_buf_frag_insert(net_buf_frag_last(pkt->frags), frag);
   1b8e0:	4618      	mov	r0, r3
   1b8e2:	f7fd fd33 	bl	1934c <net_buf_frag_last>
   1b8e6:	4621      	mov	r1, r4
}
   1b8e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	net_buf_frag_insert(net_buf_frag_last(pkt->frags), frag);
   1b8ec:	f7fd bd33 	b.w	19356 <net_buf_frag_insert>

0001b8f0 <check_and_create_data.part.20>:
static inline struct net_buf *check_and_create_data(struct net_pkt *pkt,
   1b8f0:	b538      	push	{r3, r4, r5, lr}
   1b8f2:	4605      	mov	r5, r0
	frag = net_pkt_get_frag(pkt, timeout);
   1b8f4:	f7ff ff62 	bl	1b7bc <net_pkt_get_frag>
	if (!frag) {
   1b8f8:	4604      	mov	r4, r0
   1b8fa:	b118      	cbz	r0, 1b904 <check_and_create_data.part.20+0x14>
	net_pkt_frag_add(pkt, frag);
   1b8fc:	4601      	mov	r1, r0
   1b8fe:	4628      	mov	r0, r5
   1b900:	f7ff ffe8 	bl	1b8d4 <net_pkt_frag_add>
}
   1b904:	4620      	mov	r0, r4
   1b906:	bd38      	pop	{r3, r4, r5, pc}

0001b908 <net_pkt_frag_insert>:
{
   1b908:	b538      	push	{r3, r4, r5, lr}
   1b90a:	4604      	mov	r4, r0
	net_buf_frag_last(frag)->frags = pkt->frags;
   1b90c:	4608      	mov	r0, r1
{
   1b90e:	460d      	mov	r5, r1
	net_buf_frag_last(frag)->frags = pkt->frags;
   1b910:	f7fd fd1c 	bl	1934c <net_buf_frag_last>
   1b914:	68a3      	ldr	r3, [r4, #8]
   1b916:	6003      	str	r3, [r0, #0]
	pkt->frags = frag;
   1b918:	60a5      	str	r5, [r4, #8]
   1b91a:	bd38      	pop	{r3, r4, r5, pc}

0001b91c <net_pkt_copy>:
{
   1b91c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b920:	b085      	sub	sp, #20
   1b922:	460f      	mov	r7, r1
   1b924:	9302      	str	r3, [sp, #8]
	frag = net_pkt_get_frag(pkt, timeout);
   1b926:	9902      	ldr	r1, [sp, #8]
{
   1b928:	9001      	str	r0, [sp, #4]
   1b92a:	4690      	mov	r8, r2
	orig = pkt->frags;
   1b92c:	6885      	ldr	r5, [r0, #8]
	frag = net_pkt_get_frag(pkt, timeout);
   1b92e:	f7ff ff45 	bl	1b7bc <net_pkt_get_frag>
	if (!frag) {
   1b932:	4604      	mov	r4, r0
   1b934:	b150      	cbz	r0, 1b94c <net_pkt_copy+0x30>
	if (reserve > net_buf_tailroom(frag)) {
   1b936:	f100 0608 	add.w	r6, r0, #8
   1b93a:	4630      	mov	r0, r6
   1b93c:	f7fd fd9e 	bl	1947c <net_buf_simple_tailroom>
   1b940:	4540      	cmp	r0, r8
   1b942:	d207      	bcs.n	1b954 <net_pkt_copy+0x38>
		net_pkt_frag_unref(frag);
   1b944:	4620      	mov	r0, r4
   1b946:	f7ff ff9a 	bl	1b87e <net_pkt_frag_unref>
		return NULL;
   1b94a:	2400      	movs	r4, #0
}
   1b94c:	4620      	mov	r0, r4
   1b94e:	b005      	add	sp, #20
   1b950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	net_buf_add(frag, reserve);
   1b954:	4630      	mov	r0, r6
   1b956:	4641      	mov	r1, r8
   1b958:	f7fd fd24 	bl	193a4 <net_buf_simple_add>
	if (!orig->len) {
   1b95c:	89ae      	ldrh	r6, [r5, #12]
   1b95e:	2e00      	cmp	r6, #0
   1b960:	d0f4      	beq.n	1b94c <net_pkt_copy+0x30>
	orig_data = orig->data;
   1b962:	f8d5 9008 	ldr.w	r9, [r5, #8]
   1b966:	46a2      	mov	sl, r4
	while (orig && amount) {
   1b968:	2f00      	cmp	r7, #0
   1b96a:	d0ef      	beq.n	1b94c <net_pkt_copy+0x30>
		int left_len = net_buf_tailroom(frag);
   1b96c:	f10a 0b08 	add.w	fp, sl, #8
   1b970:	4658      	mov	r0, fp
   1b972:	f7fd fd83 	bl	1947c <net_buf_simple_tailroom>
			copy_len = orig_len;
   1b976:	42be      	cmp	r6, r7
   1b978:	4632      	mov	r2, r6
   1b97a:	bf28      	it	cs
   1b97c:	463a      	movcs	r2, r7
		if ((copy_len - left_len) >= 0) {
   1b97e:	1a11      	subs	r1, r2, r0
   1b980:	2900      	cmp	r1, #0
		int left_len = net_buf_tailroom(frag);
   1b982:	4680      	mov	r8, r0
		if ((copy_len - left_len) >= 0) {
   1b984:	db1c      	blt.n	1b9c0 <net_pkt_copy+0xa4>
			memcpy(net_buf_add(frag, left_len), orig_data,
   1b986:	4601      	mov	r1, r0
			amount -= left_len;
   1b988:	1a3f      	subs	r7, r7, r0
			memcpy(net_buf_add(frag, left_len), orig_data,
   1b98a:	4658      	mov	r0, fp
   1b98c:	f7fd fd0a 	bl	193a4 <net_buf_simple_add>
   1b990:	4642      	mov	r2, r8
   1b992:	4649      	mov	r1, r9
   1b994:	f7e4 fefd 	bl	792 <memcpy>
			if (!net_buf_tailroom(frag)) {
   1b998:	4658      	mov	r0, fp
   1b99a:	f7fd fd6f 	bl	1947c <net_buf_simple_tailroom>
   1b99e:	b958      	cbnz	r0, 1b9b8 <net_pkt_copy+0x9c>
				struct net_buf *new_frag =
   1b9a0:	9902      	ldr	r1, [sp, #8]
   1b9a2:	9801      	ldr	r0, [sp, #4]
   1b9a4:	f7ff ff0a 	bl	1b7bc <net_pkt_get_frag>
				if (!new_frag) {
   1b9a8:	4683      	mov	fp, r0
   1b9aa:	2800      	cmp	r0, #0
   1b9ac:	d0ca      	beq.n	1b944 <net_pkt_copy+0x28>
				net_buf_frag_add(frag, new_frag);
   1b9ae:	4601      	mov	r1, r0
   1b9b0:	4650      	mov	r0, sl
   1b9b2:	f7fd fcdb 	bl	1936c <net_buf_frag_add>
   1b9b6:	46da      	mov	sl, fp
			orig_len -= left_len;
   1b9b8:	eba6 0608 	sub.w	r6, r6, r8
			orig_data += left_len;
   1b9bc:	44c1      	add	r9, r8
   1b9be:	e7d3      	b.n	1b968 <net_pkt_copy+0x4c>
			memcpy(net_buf_add(frag, copy_len), orig_data,
   1b9c0:	4611      	mov	r1, r2
   1b9c2:	4658      	mov	r0, fp
			amount -= copy_len;
   1b9c4:	1abf      	subs	r7, r7, r2
			memcpy(net_buf_add(frag, copy_len), orig_data,
   1b9c6:	9203      	str	r2, [sp, #12]
   1b9c8:	f7fd fcec 	bl	193a4 <net_buf_simple_add>
   1b9cc:	9a03      	ldr	r2, [sp, #12]
   1b9ce:	4649      	mov	r1, r9
   1b9d0:	f7e4 fedf 	bl	792 <memcpy>
		orig = orig->frags;
   1b9d4:	682d      	ldr	r5, [r5, #0]
		if (orig) {
   1b9d6:	2d00      	cmp	r5, #0
   1b9d8:	d0b8      	beq.n	1b94c <net_pkt_copy+0x30>
			orig_len = orig->len;
   1b9da:	89ae      	ldrh	r6, [r5, #12]
			orig_data = orig->data;
   1b9dc:	f8d5 9008 	ldr.w	r9, [r5, #8]
   1b9e0:	e7c2      	b.n	1b968 <net_pkt_copy+0x4c>

0001b9e2 <net_pkt_compact>:
{
   1b9e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	frag = pkt->frags;
   1b9e6:	6884      	ldr	r4, [r0, #8]
{
   1b9e8:	4607      	mov	r7, r0
	prev = NULL;
   1b9ea:	f04f 0800 	mov.w	r8, #0
	while (frag) {
   1b9ee:	2c00      	cmp	r4, #0
   1b9f0:	d035      	beq.n	1ba5e <net_pkt_compact+0x7c>
		if (frag->frags) {
   1b9f2:	6823      	ldr	r3, [r4, #0]
   1b9f4:	b363      	cbz	r3, 1ba50 <net_pkt_compact+0x6e>
			if (copy_len > net_buf_tailroom(frag)) {
   1b9f6:	f104 0608 	add.w	r6, r4, #8
   1b9fa:	4630      	mov	r0, r6
			copy_len = frag->frags->len;
   1b9fc:	899d      	ldrh	r5, [r3, #12]
			if (copy_len > net_buf_tailroom(frag)) {
   1b9fe:	f7fd fd3d 	bl	1947c <net_buf_simple_tailroom>
   1ba02:	4285      	cmp	r5, r0
   1ba04:	d903      	bls.n	1ba0e <net_pkt_compact+0x2c>
				copy_len = net_buf_tailroom(frag);
   1ba06:	4630      	mov	r0, r6
   1ba08:	f7fd fd38 	bl	1947c <net_buf_simple_tailroom>
   1ba0c:	4605      	mov	r5, r0
	return buf->data + buf->len;
   1ba0e:	68a3      	ldr	r3, [r4, #8]
			memcpy(net_buf_tail(frag), frag->frags->data, copy_len);
   1ba10:	6821      	ldr	r1, [r4, #0]
   1ba12:	89a0      	ldrh	r0, [r4, #12]
   1ba14:	6889      	ldr	r1, [r1, #8]
   1ba16:	462a      	mov	r2, r5
   1ba18:	4418      	add	r0, r3
   1ba1a:	f7e4 feba 	bl	792 <memcpy>
			net_buf_add(frag, copy_len);
   1ba1e:	4629      	mov	r1, r5
   1ba20:	4630      	mov	r0, r6
   1ba22:	f7fd fcbf 	bl	193a4 <net_buf_simple_add>
			memmove(frag->frags->data,
   1ba26:	6823      	ldr	r3, [r4, #0]
   1ba28:	6898      	ldr	r0, [r3, #8]
				frag->frags->len - copy_len);
   1ba2a:	899a      	ldrh	r2, [r3, #12]
			memmove(frag->frags->data,
   1ba2c:	1941      	adds	r1, r0, r5
   1ba2e:	1b52      	subs	r2, r2, r5
   1ba30:	f7e4 fe97 	bl	762 <memmove>
			frag->frags->len -= copy_len;
   1ba34:	6822      	ldr	r2, [r4, #0]
   1ba36:	8993      	ldrh	r3, [r2, #12]
   1ba38:	1b5d      	subs	r5, r3, r5
   1ba3a:	8195      	strh	r5, [r2, #12]
			if (net_buf_tailroom(frag)) {
   1ba3c:	4630      	mov	r0, r6
   1ba3e:	f7fd fd1d 	bl	1947c <net_buf_simple_tailroom>
   1ba42:	b178      	cbz	r0, 1ba64 <net_pkt_compact+0x82>
				net_pkt_frag_del(pkt, frag, frag->frags);
   1ba44:	6822      	ldr	r2, [r4, #0]
   1ba46:	4621      	mov	r1, r4
   1ba48:	4638      	mov	r0, r7
   1ba4a:	f7ff ff33 	bl	1b8b4 <net_pkt_frag_del>
				continue;
   1ba4e:	e7ce      	b.n	1b9ee <net_pkt_compact+0xc>
			if (!frag->len) {
   1ba50:	89a3      	ldrh	r3, [r4, #12]
   1ba52:	b93b      	cbnz	r3, 1ba64 <net_pkt_compact+0x82>
				net_pkt_frag_del(pkt, prev, frag);
   1ba54:	4622      	mov	r2, r4
   1ba56:	4641      	mov	r1, r8
   1ba58:	4638      	mov	r0, r7
   1ba5a:	f7ff ff2b 	bl	1b8b4 <net_pkt_frag_del>
}
   1ba5e:	2001      	movs	r0, #1
   1ba60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		frag = frag->frags;
   1ba64:	46a0      	mov	r8, r4
   1ba66:	6824      	ldr	r4, [r4, #0]
   1ba68:	e7c1      	b.n	1b9ee <net_pkt_compact+0xc>
	...

0001ba6c <net_pkt_append>:
{
   1ba6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ba70:	460d      	mov	r5, r1
   1ba72:	4691      	mov	r9, r2
   1ba74:	469a      	mov	sl, r3
	if (!pkt || !data || !len) {
   1ba76:	4604      	mov	r4, r0
   1ba78:	b918      	cbnz	r0, 1ba82 <net_pkt_append+0x16>
		return 0;
   1ba7a:	2700      	movs	r7, #0
}
   1ba7c:	4638      	mov	r0, r7
   1ba7e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!pkt || !data || !len) {
   1ba82:	2a00      	cmp	r2, #0
   1ba84:	d0f9      	beq.n	1ba7a <net_pkt_append+0xe>
   1ba86:	2900      	cmp	r1, #0
   1ba88:	d0f7      	beq.n	1ba7a <net_pkt_append+0xe>
	if (!pkt->frags) {
   1ba8a:	6883      	ldr	r3, [r0, #8]
   1ba8c:	b943      	cbnz	r3, 1baa0 <net_pkt_append+0x34>
		frag = net_pkt_get_frag(pkt, timeout);
   1ba8e:	4651      	mov	r1, sl
   1ba90:	f7ff fe94 	bl	1b7bc <net_pkt_get_frag>
		if (!frag) {
   1ba94:	4601      	mov	r1, r0
   1ba96:	2800      	cmp	r0, #0
   1ba98:	d0ef      	beq.n	1ba7a <net_pkt_append+0xe>
		net_pkt_frag_add(pkt, frag);
   1ba9a:	4620      	mov	r0, r4
   1ba9c:	f7ff ff1a 	bl	1b8d4 <net_pkt_frag_add>
	if (pkt->slab != &rx_pkts) {
   1baa0:	6862      	ldr	r2, [r4, #4]
   1baa2:	4b25      	ldr	r3, [pc, #148]	; (1bb38 <net_pkt_append+0xcc>)
   1baa4:	429a      	cmp	r2, r3
   1baa6:	d03a      	beq.n	1bb1e <net_pkt_append+0xb2>
   1baa8:	f8d4 800c 	ldr.w	r8, [r4, #12]
	if (ctx) {
   1baac:	f1b8 0f00 	cmp.w	r8, #0
   1bab0:	d00b      	beq.n	1baca <net_pkt_append+0x5e>
		if (ctx->tcp && (ctx->tcp->send_mss < max_len)) {
   1bab2:	f8d8 2060 	ldr.w	r2, [r8, #96]	; 0x60
		max_len = pkt->data_len;
   1bab6:	8e23      	ldrh	r3, [r4, #48]	; 0x30
		if (ctx->tcp && (ctx->tcp->send_mss < max_len)) {
   1bab8:	b122      	cbz	r2, 1bac4 <net_pkt_append+0x58>
   1baba:	f8b2 20de 	ldrh.w	r2, [r2, #222]	; 0xde
   1babe:	4293      	cmp	r3, r2
   1bac0:	bf28      	it	cs
   1bac2:	4613      	movcs	r3, r2
   1bac4:	429d      	cmp	r5, r3
   1bac6:	bf28      	it	cs
   1bac8:	461d      	movcs	r5, r3
	struct net_buf *frag = net_buf_frag_last(pkt->frags);
   1baca:	68a0      	ldr	r0, [r4, #8]
   1bacc:	f7fd fc3e 	bl	1934c <net_buf_frag_last>
	u16_t added_len = 0;
   1bad0:	2700      	movs	r7, #0
	struct net_buf *frag = net_buf_frag_last(pkt->frags);
   1bad2:	4606      	mov	r6, r0
		u16_t count = min(len, net_buf_tailroom(frag));
   1bad4:	3608      	adds	r6, #8
   1bad6:	4630      	mov	r0, r6
   1bad8:	f7fd fcd0 	bl	1947c <net_buf_simple_tailroom>
   1badc:	4285      	cmp	r5, r0
   1bade:	d321      	bcc.n	1bb24 <net_pkt_append+0xb8>
   1bae0:	4630      	mov	r0, r6
   1bae2:	f7fd fccb 	bl	1947c <net_buf_simple_tailroom>
   1bae6:	fa1f fb80 	uxth.w	fp, r0
		void *data = net_buf_add(frag, count);
   1baea:	4659      	mov	r1, fp
   1baec:	4630      	mov	r0, r6
		len -= count;
   1baee:	eba5 050b 	sub.w	r5, r5, fp
		void *data = net_buf_add(frag, count);
   1baf2:	f7fd fc57 	bl	193a4 <net_buf_simple_add>
		added_len += count;
   1baf6:	445f      	add	r7, fp
		memcpy(data, value, count);
   1baf8:	4649      	mov	r1, r9
   1bafa:	465a      	mov	r2, fp
		len -= count;
   1bafc:	b2ad      	uxth	r5, r5
		memcpy(data, value, count);
   1bafe:	f7e4 fe48 	bl	792 <memcpy>
		added_len += count;
   1bb02:	b2bf      	uxth	r7, r7
		value += count;
   1bb04:	44d9      	add	r9, fp
		if (len == 0) {
   1bb06:	b17d      	cbz	r5, 1bb28 <net_pkt_append+0xbc>
		frag = net_pkt_get_frag(pkt, timeout);
   1bb08:	4651      	mov	r1, sl
   1bb0a:	4620      	mov	r0, r4
   1bb0c:	f7ff fe56 	bl	1b7bc <net_pkt_get_frag>
		if (!frag) {
   1bb10:	4606      	mov	r6, r0
   1bb12:	b148      	cbz	r0, 1bb28 <net_pkt_append+0xbc>
		net_pkt_frag_add(pkt, frag);
   1bb14:	4601      	mov	r1, r0
   1bb16:	4620      	mov	r0, r4
   1bb18:	f7ff fedc 	bl	1b8d4 <net_pkt_frag_add>
   1bb1c:	e7da      	b.n	1bad4 <net_pkt_append+0x68>
	struct net_context *ctx = NULL;
   1bb1e:	f04f 0800 	mov.w	r8, #0
   1bb22:	e7d2      	b.n	1baca <net_pkt_append+0x5e>
		u16_t count = min(len, net_buf_tailroom(frag));
   1bb24:	46ab      	mov	fp, r5
   1bb26:	e7e0      	b.n	1baea <net_pkt_append+0x7e>
	if (ctx) {
   1bb28:	f1b8 0f00 	cmp.w	r8, #0
   1bb2c:	d0a6      	beq.n	1ba7c <net_pkt_append+0x10>
		pkt->data_len -= appended;
   1bb2e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   1bb30:	1bdb      	subs	r3, r3, r7
   1bb32:	8623      	strh	r3, [r4, #48]	; 0x30
   1bb34:	e7a2      	b.n	1ba7c <net_pkt_append+0x10>
   1bb36:	bf00      	nop
   1bb38:	2000a97c 	.word	0x2000a97c

0001bb3c <net_frag_read>:
{
   1bb3c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bb3e:	9d05      	ldr	r5, [sp, #20]
	if (!frag) {
   1bb40:	b318      	cbz	r0, 1bb8a <net_frag_read+0x4e>
		if (offset < frag->len) {
   1bb42:	8984      	ldrh	r4, [r0, #12]
   1bb44:	428c      	cmp	r4, r1
   1bb46:	d907      	bls.n	1bb58 <net_frag_read+0x1c>
			*pos = offset;
   1bb48:	8011      	strh	r1, [r2, #0]
   1bb4a:	2100      	movs	r1, #0
		*pos = 0;
   1bb4c:	468e      	mov	lr, r1
	while (len-- > 0 && frag) {
   1bb4e:	1e5c      	subs	r4, r3, #1
   1bb50:	b2a4      	uxth	r4, r4
   1bb52:	b1f3      	cbz	r3, 1bb92 <net_frag_read+0x56>
   1bb54:	b920      	cbnz	r0, 1bb60 <net_frag_read+0x24>
   1bb56:	bdf0      	pop	{r4, r5, r6, r7, pc}
		offset -= frag->len;
   1bb58:	1b09      	subs	r1, r1, r4
   1bb5a:	b289      	uxth	r1, r1
		frag = frag->frags;
   1bb5c:	6800      	ldr	r0, [r0, #0]
   1bb5e:	e7ef      	b.n	1bb40 <net_frag_read+0x4>
			frag = net_frag_read_byte(frag, *pos,
   1bb60:	8813      	ldrh	r3, [r2, #0]
		if (data) {
   1bb62:	b1bd      	cbz	r5, 1bb94 <net_frag_read+0x58>
	if (data) {
   1bb64:	42cd      	cmn	r5, r1
		*data = frag->data[offset];
   1bb66:	bf1e      	ittt	ne
   1bb68:	6887      	ldrne	r7, [r0, #8]
   1bb6a:	5cff      	ldrbne	r7, [r7, r3]
   1bb6c:	546f      	strbne	r7, [r5, r1]
	*pos = offset + 1;
   1bb6e:	3301      	adds	r3, #1
   1bb70:	b29b      	uxth	r3, r3
   1bb72:	8013      	strh	r3, [r2, #0]
						  pos, data + copy++);
   1bb74:	1c4e      	adds	r6, r1, #1
	if (*pos >= frag->len) {
   1bb76:	8981      	ldrh	r1, [r0, #12]
   1bb78:	4299      	cmp	r1, r3
						  pos, data + copy++);
   1bb7a:	b2b6      	uxth	r6, r6
	if (*pos >= frag->len) {
   1bb7c:	d813      	bhi.n	1bba6 <net_frag_read+0x6a>
		*pos = 0;
   1bb7e:	f8a2 e000 	strh.w	lr, [r2]
		return frag->frags;
   1bb82:	6800      	ldr	r0, [r0, #0]
						  pos, data + copy++);
   1bb84:	4631      	mov	r1, r6
		if (!frag && len) {
   1bb86:	b978      	cbnz	r0, 1bba8 <net_frag_read+0x6c>
   1bb88:	b174      	cbz	r4, 1bba8 <net_frag_read+0x6c>
	*pos = 0xffff;
   1bb8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1bb8e:	8013      	strh	r3, [r2, #0]
	return NULL;
   1bb90:	2000      	movs	r0, #0
}
   1bb92:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*pos = offset + 1;
   1bb94:	3301      	adds	r3, #1
   1bb96:	b29b      	uxth	r3, r3
   1bb98:	8013      	strh	r3, [r2, #0]
	if (*pos >= frag->len) {
   1bb9a:	8986      	ldrh	r6, [r0, #12]
   1bb9c:	429e      	cmp	r6, r3
   1bb9e:	d803      	bhi.n	1bba8 <net_frag_read+0x6c>
		*pos = 0;
   1bba0:	8015      	strh	r5, [r2, #0]
		return frag->frags;
   1bba2:	6800      	ldr	r0, [r0, #0]
   1bba4:	e7ef      	b.n	1bb86 <net_frag_read+0x4a>
						  pos, data + copy++);
   1bba6:	4631      	mov	r1, r6
   1bba8:	4623      	mov	r3, r4
   1bbaa:	e7d0      	b.n	1bb4e <net_frag_read+0x12>

0001bbac <net_frag_read_be16>:
{
   1bbac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1bbae:	461c      	mov	r4, r3
	ret_frag = net_frag_read(frag, offset, pos, sizeof(u16_t), v16);
   1bbb0:	ab03      	add	r3, sp, #12
   1bbb2:	9300      	str	r3, [sp, #0]
   1bbb4:	2302      	movs	r3, #2
   1bbb6:	f7ff ffc1 	bl	1bb3c <net_frag_read>
	*value = v16[0] << 8 | v16[1];
   1bbba:	f89d 200c 	ldrb.w	r2, [sp, #12]
   1bbbe:	f89d 300d 	ldrb.w	r3, [sp, #13]
   1bbc2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1bbc6:	8023      	strh	r3, [r4, #0]
}
   1bbc8:	b004      	add	sp, #16
   1bbca:	bd10      	pop	{r4, pc}

0001bbcc <net_frag_read_be32>:
{
   1bbcc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1bbce:	461c      	mov	r4, r3
	ret_frag = net_frag_read(frag, offset, pos, sizeof(u32_t), v32);
   1bbd0:	ab03      	add	r3, sp, #12
   1bbd2:	9300      	str	r3, [sp, #0]
   1bbd4:	2304      	movs	r3, #4
   1bbd6:	f7ff ffb1 	bl	1bb3c <net_frag_read>
   1bbda:	9b03      	ldr	r3, [sp, #12]
   1bbdc:	ba1b      	rev	r3, r3
	*value = v32[0] << 24 | v32[1] << 16 | v32[2] << 8 | v32[3];
   1bbde:	6023      	str	r3, [r4, #0]
}
   1bbe0:	b004      	add	sp, #16
   1bbe2:	bd10      	pop	{r4, pc}

0001bbe4 <net_pkt_write>:
{
   1bbe4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bbe8:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   1bbec:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
   1bbf0:	4615      	mov	r5, r2
   1bbf2:	469a      	mov	sl, r3
	if (!pkt) {
   1bbf4:	4607      	mov	r7, r0
   1bbf6:	2800      	cmp	r0, #0
   1bbf8:	d077      	beq.n	1bcea <net_pkt_write+0x106>
   1bbfa:	460c      	mov	r4, r1
	if (data) {
   1bbfc:	b934      	cbnz	r4, 1bc0c <net_pkt_write+0x28>
   1bbfe:	990c      	ldr	r1, [sp, #48]	; 0x30
   1bc00:	4638      	mov	r0, r7
   1bc02:	f7ff fe75 	bl	1b8f0 <check_and_create_data.part.20>
		if (!frag) {
   1bc06:	4604      	mov	r4, r0
   1bc08:	2800      	cmp	r0, #0
   1bc0a:	d06e      	beq.n	1bcea <net_pkt_write+0x106>
		if (offset < frag->len) {
   1bc0c:	89a3      	ldrh	r3, [r4, #12]
   1bc0e:	42ab      	cmp	r3, r5
   1bc10:	d820      	bhi.n	1bc54 <net_pkt_write+0x70>
		if (offset == frag->len) {
   1bc12:	d10f      	bne.n	1bc34 <net_pkt_write+0x50>
			if (net_buf_tailroom(frag)) {
   1bc14:	f104 0008 	add.w	r0, r4, #8
   1bc18:	f7fd fc30 	bl	1947c <net_buf_simple_tailroom>
   1bc1c:	b9d0      	cbnz	r0, 1bc54 <net_pkt_write+0x70>
				return check_and_create_data(pkt,
   1bc1e:	6824      	ldr	r4, [r4, #0]
	if (data) {
   1bc20:	b934      	cbnz	r4, 1bc30 <net_pkt_write+0x4c>
   1bc22:	990c      	ldr	r1, [sp, #48]	; 0x30
   1bc24:	4638      	mov	r0, r7
   1bc26:	f7ff fe63 	bl	1b8f0 <check_and_create_data.part.20>
   1bc2a:	4604      	mov	r4, r0
	if (!frag) {
   1bc2c:	2800      	cmp	r0, #0
   1bc2e:	d05c      	beq.n	1bcea <net_pkt_write+0x106>
   1bc30:	2500      	movs	r5, #0
   1bc32:	e00f      	b.n	1bc54 <net_pkt_write+0x70>
		if (offset > frag->len) {
   1bc34:	d2e2      	bcs.n	1bbfc <net_pkt_write+0x18>
			tailroom = net_buf_tailroom(frag);
   1bc36:	f104 0b08 	add.w	fp, r4, #8
   1bc3a:	4658      	mov	r0, fp
			offset -= frag->len;
   1bc3c:	1aed      	subs	r5, r5, r3
			tailroom = net_buf_tailroom(frag);
   1bc3e:	f7fd fc1d 	bl	1947c <net_buf_simple_tailroom>
			offset -= frag->len;
   1bc42:	b2ad      	uxth	r5, r5
			tailroom = net_buf_tailroom(frag);
   1bc44:	b286      	uxth	r6, r0
			if (offset < tailroom) {
   1bc46:	42b5      	cmp	r5, r6
   1bc48:	d22a      	bcs.n	1bca0 <net_pkt_write+0xbc>
				net_buf_add(frag, offset);
   1bc4a:	4629      	mov	r1, r5
   1bc4c:	4658      	mov	r0, fp
   1bc4e:	f7fd fba9 	bl	193a4 <net_buf_simple_add>
				*pos = frag->len;
   1bc52:	89a5      	ldrh	r5, [r4, #12]
		u16_t space = frag->size - net_buf_headroom(frag) - offset;
   1bc54:	89e6      	ldrh	r6, [r4, #14]
   1bc56:	f104 0b08 	add.w	fp, r4, #8
   1bc5a:	4658      	mov	r0, fp
   1bc5c:	f7fd fc0a 	bl	19474 <net_buf_simple_headroom>
   1bc60:	1a36      	subs	r6, r6, r0
   1bc62:	1b76      	subs	r6, r6, r5
		u16_t count = min(len, space);
   1bc64:	b2b6      	uxth	r6, r6
   1bc66:	4546      	cmp	r6, r8
		memcpy(frag->data + offset, data, count);
   1bc68:	68a0      	ldr	r0, [r4, #8]
		u16_t count = min(len, space);
   1bc6a:	bf28      	it	cs
   1bc6c:	4646      	movcs	r6, r8
		memcpy(frag->data + offset, data, count);
   1bc6e:	4649      	mov	r1, r9
   1bc70:	4428      	add	r0, r5
   1bc72:	4632      	mov	r2, r6
   1bc74:	f7e4 fd8d 	bl	792 <memcpy>
		size_to_add = offset + count - frag->len;
   1bc78:	89a1      	ldrh	r1, [r4, #12]
   1bc7a:	4435      	add	r5, r6
   1bc7c:	1a69      	subs	r1, r5, r1
		if (size_to_add > 0) {
   1bc7e:	2900      	cmp	r1, #0
   1bc80:	dd02      	ble.n	1bc88 <net_pkt_write+0xa4>
			net_buf_add(frag, size_to_add);
   1bc82:	4658      	mov	r0, fp
   1bc84:	f7fd fb8e 	bl	193a4 <net_buf_simple_add>
		len -= count;
   1bc88:	eba8 0806 	sub.w	r8, r8, r6
   1bc8c:	fa1f f888 	uxth.w	r8, r8
		if (len == 0) {
   1bc90:	f1b8 0f00 	cmp.w	r8, #0
   1bc94:	d11a      	bne.n	1bccc <net_pkt_write+0xe8>
			*pos = offset + count;
   1bc96:	f8aa 5000 	strh.w	r5, [sl]
}
   1bc9a:	4620      	mov	r0, r4
   1bc9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (offset == tailroom) {
   1bca0:	d104      	bne.n	1bcac <net_pkt_write+0xc8>
				net_buf_add(frag, tailroom);
   1bca2:	b281      	uxth	r1, r0
   1bca4:	4658      	mov	r0, fp
   1bca6:	f7fd fb7d 	bl	193a4 <net_buf_simple_add>
   1bcaa:	e7b8      	b.n	1bc1e <net_pkt_write+0x3a>
			if (offset > tailroom) {
   1bcac:	d9a6      	bls.n	1bbfc <net_pkt_write+0x18>
				net_buf_add(frag, tailroom);
   1bcae:	b281      	uxth	r1, r0
   1bcb0:	4658      	mov	r0, fp
   1bcb2:	f7fd fb77 	bl	193a4 <net_buf_simple_add>
				frag = check_and_create_data(pkt,
   1bcb6:	6824      	ldr	r4, [r4, #0]
				offset -= tailroom;
   1bcb8:	1bad      	subs	r5, r5, r6
   1bcba:	b2ad      	uxth	r5, r5
	if (data) {
   1bcbc:	2c00      	cmp	r4, #0
   1bcbe:	d19d      	bne.n	1bbfc <net_pkt_write+0x18>
   1bcc0:	990c      	ldr	r1, [sp, #48]	; 0x30
   1bcc2:	4638      	mov	r0, r7
   1bcc4:	f7ff fe14 	bl	1b8f0 <check_and_create_data.part.20>
   1bcc8:	4604      	mov	r4, r0
   1bcca:	e797      	b.n	1bbfc <net_pkt_write+0x18>
		frag = frag->frags;
   1bccc:	6824      	ldr	r4, [r4, #0]
		data += count;
   1bcce:	44b1      	add	r9, r6
		if (!frag) {
   1bcd0:	2c00      	cmp	r4, #0
   1bcd2:	d1ad      	bne.n	1bc30 <net_pkt_write+0x4c>
			frag = net_pkt_get_frag(pkt, timeout);
   1bcd4:	990c      	ldr	r1, [sp, #48]	; 0x30
   1bcd6:	4638      	mov	r0, r7
   1bcd8:	f7ff fd70 	bl	1b7bc <net_pkt_get_frag>
			if (!frag) {
   1bcdc:	4604      	mov	r4, r0
   1bcde:	b120      	cbz	r0, 1bcea <net_pkt_write+0x106>
			net_pkt_frag_add(pkt, frag);
   1bce0:	4601      	mov	r1, r0
   1bce2:	4638      	mov	r0, r7
   1bce4:	f7ff fdf6 	bl	1b8d4 <net_pkt_frag_add>
   1bce8:	e7a2      	b.n	1bc30 <net_pkt_write+0x4c>
	*pos = 0xffff;
   1bcea:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1bcee:	f8aa 3000 	strh.w	r3, [sl]
	return NULL;
   1bcf2:	2400      	movs	r4, #0
   1bcf4:	e7d1      	b.n	1bc9a <net_pkt_write+0xb6>

0001bcf6 <net_pkt_get_src_addr>:

int net_pkt_get_src_addr(struct net_pkt *pkt, struct sockaddr *addr,
			 socklen_t addrlen)
{
	return net_pkt_get_addr(pkt, true, addr, addrlen);
   1bcf6:	4613      	mov	r3, r2
   1bcf8:	460a      	mov	r2, r1
   1bcfa:	2101      	movs	r1, #1
   1bcfc:	f7ff bc4e 	b.w	1b59c <net_pkt_get_addr>

0001bd00 <net_pkt_get_dst_addr>:
}

int net_pkt_get_dst_addr(struct net_pkt *pkt, struct sockaddr *addr,
			 socklen_t addrlen)
{
	return net_pkt_get_addr(pkt, false, addr, addrlen);
   1bd00:	4613      	mov	r3, r2
   1bd02:	460a      	mov	r2, r1
   1bd04:	2100      	movs	r1, #0
   1bd06:	f7ff bc49 	b.w	1b59c <net_pkt_get_addr>

0001bd0a <net_frag_get_pos>:
#endif /* CONFIG_NET_DEBUG_NET_PKT */

struct net_buf *net_frag_get_pos(struct net_pkt *pkt,
				 u16_t offset,
				 u16_t *pos)
{
   1bd0a:	b507      	push	{r0, r1, r2, lr}
 */
static inline struct net_buf *net_frag_skip(struct net_buf *frag,
					    u16_t offset,
					    u16_t *pos, u16_t len)
{
	return net_frag_read(frag, offset, pos, len, NULL);
   1bd0c:	2300      	movs	r3, #0
   1bd0e:	9300      	str	r3, [sp, #0]
   1bd10:	6880      	ldr	r0, [r0, #8]
   1bd12:	f7ff ff13 	bl	1bb3c <net_frag_read>
	if (!frag) {
		return NULL;
	}

	return frag;
}
   1bd16:	b003      	add	sp, #12
   1bd18:	f85d fb04 	ldr.w	pc, [sp], #4

0001bd1c <net_pkt_icmp_data>:
#else
#define too_short_msg(...)
#endif

struct net_icmp_hdr *net_pkt_icmp_data(struct net_pkt *pkt)
{
   1bd1c:	b507      	push	{r0, r1, r2, lr}
	struct net_buf *frag;
	u16_t offset;

	frag = net_frag_get_pos(pkt,
				net_pkt_ip_hdr_len(pkt) +
   1bd1e:	f890 1035 	ldrb.w	r1, [r0, #53]	; 0x35
				net_pkt_ipv6_ext_len(pkt),
   1bd22:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
	frag = net_frag_get_pos(pkt,
   1bd26:	f10d 0206 	add.w	r2, sp, #6
   1bd2a:	4419      	add	r1, r3
   1bd2c:	f7ff ffed 	bl	1bd0a <net_frag_get_pos>
				&offset);
	if (!frag) {
   1bd30:	b118      	cbz	r0, 1bd3a <net_pkt_icmp_data+0x1e>
		/* We tried to read past the end of the data */
		too_short_msg("icmp data", pkt, offset, 0);
		return NULL;
	}

	return (struct net_icmp_hdr *)(frag->data + offset);
   1bd32:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1bd36:	6880      	ldr	r0, [r0, #8]
   1bd38:	4418      	add	r0, r3
}
   1bd3a:	b003      	add	sp, #12
   1bd3c:	f85d fb04 	ldr.w	pc, [sp], #4

0001bd40 <net_pkt_icmp_opt_data>:

u8_t *net_pkt_icmp_opt_data(struct net_pkt *pkt, size_t opt_len)
{
   1bd40:	b507      	push	{r0, r1, r2, lr}
	struct net_buf *frag;
	u16_t offset;

	frag = net_frag_get_pos(pkt,
				net_pkt_ip_hdr_len(pkt) +
				net_pkt_ipv6_ext_len(pkt) + opt_len,
   1bd42:	f890 203f 	ldrb.w	r2, [r0, #63]	; 0x3f
				net_pkt_ip_hdr_len(pkt) +
   1bd46:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
   1bd4a:	4413      	add	r3, r2
	frag = net_frag_get_pos(pkt,
   1bd4c:	4419      	add	r1, r3
   1bd4e:	f10d 0206 	add.w	r2, sp, #6
   1bd52:	b289      	uxth	r1, r1
   1bd54:	f7ff ffd9 	bl	1bd0a <net_frag_get_pos>
				&offset);
	if (!frag) {
   1bd58:	b118      	cbz	r0, 1bd62 <net_pkt_icmp_opt_data+0x22>
		/* We tried to read past the end of the data */
		too_short_msg("icmp opt data", pkt, offset, opt_len);
		return NULL;
	}

	return frag->data + offset;
   1bd5a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1bd5e:	6880      	ldr	r0, [r0, #8]
   1bd60:	4418      	add	r0, r3
}
   1bd62:	b003      	add	sp, #12
   1bd64:	f85d fb04 	ldr.w	pc, [sp], #4

0001bd68 <net_pkt_udp_data>:

struct net_udp_hdr *net_pkt_udp_data(struct net_pkt *pkt)
{
   1bd68:	b507      	push	{r0, r1, r2, lr}
	struct net_buf *frag;
	u16_t offset;

	frag = net_frag_get_pos(pkt,
				net_pkt_ip_hdr_len(pkt) +
   1bd6a:	f890 1035 	ldrb.w	r1, [r0, #53]	; 0x35
				net_pkt_ipv6_ext_len(pkt),
   1bd6e:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
	frag = net_frag_get_pos(pkt,
   1bd72:	f10d 0206 	add.w	r2, sp, #6
   1bd76:	4419      	add	r1, r3
   1bd78:	f7ff ffc7 	bl	1bd0a <net_frag_get_pos>
				&offset);
	if (!frag) {
   1bd7c:	b118      	cbz	r0, 1bd86 <net_pkt_udp_data+0x1e>
		/* We tried to read past the end of the data */
		too_short_msg("udp data", pkt, offset, 0);
		return NULL;
	}

	return (struct net_udp_hdr *)(frag->data + offset);
   1bd7e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1bd82:	6880      	ldr	r0, [r0, #8]
   1bd84:	4418      	add	r0, r3
}
   1bd86:	b003      	add	sp, #12
   1bd88:	f85d fb04 	ldr.w	pc, [sp], #4

0001bd8c <net_pkt_tcp_data>:

struct net_tcp_hdr *net_pkt_tcp_data(struct net_pkt *pkt)
{
   1bd8c:	b507      	push	{r0, r1, r2, lr}
	struct net_buf *frag;
	u16_t offset;

	frag = net_frag_get_pos(pkt,
				net_pkt_ip_hdr_len(pkt) +
   1bd8e:	f890 1035 	ldrb.w	r1, [r0, #53]	; 0x35
				net_pkt_ipv6_ext_len(pkt),
   1bd92:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
	frag = net_frag_get_pos(pkt,
   1bd96:	f10d 0206 	add.w	r2, sp, #6
   1bd9a:	4419      	add	r1, r3
   1bd9c:	f7ff ffb5 	bl	1bd0a <net_frag_get_pos>
				&offset);
	if (!frag) {
   1bda0:	b118      	cbz	r0, 1bdaa <net_pkt_tcp_data+0x1e>
		/* We tried to read past the end of the data */
		too_short_msg("tcp data", pkt, offset, 0);
		return NULL;
	}

	return (struct net_tcp_hdr *)(frag->data + offset);
   1bda2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1bda6:	6880      	ldr	r0, [r0, #8]
   1bda8:	4418      	add	r0, r3
}
   1bdaa:	b003      	add	sp, #12
   1bdac:	f85d fb04 	ldr.w	pc, [sp], #4

0001bdb0 <net_pkt_clone>:

struct net_pkt *net_pkt_clone(struct net_pkt *pkt, s32_t timeout)
{
   1bdb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1bdb2:	460f      	mov	r7, r1
	struct net_pkt *clone;
	struct net_buf *frag;
	u16_t pos;

	if (!pkt) {
   1bdb4:	4605      	mov	r5, r0
   1bdb6:	b918      	cbnz	r0, 1bdc0 <net_pkt_clone+0x10>
		return NULL;
   1bdb8:	2400      	movs	r4, #0
#endif

	NET_DBG("Cloned %p to %p", pkt, clone);

	return clone;
}
   1bdba:	4620      	mov	r0, r4
   1bdbc:	b003      	add	sp, #12
   1bdbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	clone = net_pkt_get_reserve(pkt->slab, 0, timeout);
   1bdc0:	460a      	mov	r2, r1
   1bdc2:	6840      	ldr	r0, [r0, #4]
   1bdc4:	2100      	movs	r1, #0
   1bdc6:	f7ff fc52 	bl	1b66e <net_pkt_get_reserve>
	if (!clone) {
   1bdca:	4604      	mov	r4, r0
   1bdcc:	2800      	cmp	r0, #0
   1bdce:	d0f3      	beq.n	1bdb8 <net_pkt_clone+0x8>
	clone->frags = NULL;
   1bdd0:	2100      	movs	r1, #0
   1bdd2:	6081      	str	r1, [r0, #8]
	if (pkt->frags) {
   1bdd4:	68ae      	ldr	r6, [r5, #8]
   1bdd6:	b17e      	cbz	r6, 1bdf8 <net_pkt_clone+0x48>
		bytes += buf->len;
   1bdd8:	89b3      	ldrh	r3, [r6, #12]
		buf = buf->frags;
   1bdda:	6836      	ldr	r6, [r6, #0]
		bytes += buf->len;
   1bddc:	4419      	add	r1, r3
	while (buf) {
   1bdde:	2e00      	cmp	r6, #0
   1bde0:	d1fa      	bne.n	1bdd8 <net_pkt_clone+0x28>
	return net_pkt_copy(pkt, net_buf_frags_len(pkt->frags),
   1bde2:	463b      	mov	r3, r7
   1bde4:	4632      	mov	r2, r6
   1bde6:	4628      	mov	r0, r5
   1bde8:	f7ff fd98 	bl	1b91c <net_pkt_copy>
		clone->frags = net_pkt_copy_all(pkt, 0, timeout);
   1bdec:	60a0      	str	r0, [r4, #8]
		if (!clone->frags) {
   1bdee:	b918      	cbnz	r0, 1bdf8 <net_pkt_clone+0x48>
			net_pkt_unref(clone);
   1bdf0:	4620      	mov	r0, r4
   1bdf2:	f7ff fd48 	bl	1b886 <net_pkt_unref>
   1bdf6:	e7df      	b.n	1bdb8 <net_pkt_clone+0x8>
	clone->context = pkt->context;
   1bdf8:	68eb      	ldr	r3, [r5, #12]
   1bdfa:	60e3      	str	r3, [r4, #12]
	clone->token = pkt->token;
   1bdfc:	692b      	ldr	r3, [r5, #16]
   1bdfe:	6123      	str	r3, [r4, #16]
	clone->iface = pkt->iface;
   1be00:	696b      	ldr	r3, [r5, #20]
   1be02:	6163      	str	r3, [r4, #20]
	if (clone->frags) {
   1be04:	68a3      	ldr	r3, [r4, #8]
   1be06:	b1db      	cbz	r3, 1be40 <net_pkt_clone+0x90>
		frag = net_frag_get_pos(clone, net_pkt_ip_hdr_len(pkt), &pos);
   1be08:	f10d 0206 	add.w	r2, sp, #6
   1be0c:	f895 1035 	ldrb.w	r1, [r5, #53]	; 0x35
   1be10:	4620      	mov	r0, r4
   1be12:	f7ff ff7a 	bl	1bd0a <net_frag_get_pos>
		net_pkt_set_appdata(clone, frag->data + pos);
   1be16:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1be1a:	6883      	ldr	r3, [r0, #8]
   1be1c:	4413      	add	r3, r2
	pkt->appdata = data;
   1be1e:	61a3      	str	r3, [r4, #24]
   1be20:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
	pkt->appdatalen = len;
   1be22:	8663      	strh	r3, [r4, #50]	; 0x32
		memcpy(&clone->lladdr_src, &pkt->lladdr_src,
   1be24:	2208      	movs	r2, #8
   1be26:	f105 0120 	add.w	r1, r5, #32
   1be2a:	f104 0020 	add.w	r0, r4, #32
   1be2e:	f7e4 fcb0 	bl	792 <memcpy>
		memcpy(&clone->lladdr_dst, &pkt->lladdr_dst,
   1be32:	2208      	movs	r2, #8
   1be34:	f105 0128 	add.w	r1, r5, #40	; 0x28
   1be38:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1be3c:	f7e4 fca9 	bl	792 <memcpy>
	pkt->next_hdr = hdr;
   1be40:	2300      	movs	r3, #0
   1be42:	61e3      	str	r3, [r4, #28]
   1be44:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
	pkt->ip_hdr_len = len;
   1be48:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	return pkt->family;
   1be4c:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
	pkt->family = family;
   1be50:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
	return pkt->family;
   1be54:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	pkt->family = family;
   1be58:	f363 02c6 	bfi	r2, r3, #3, #4
   1be5c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
	clone->ipv6_hop_limit = pkt->ipv6_hop_limit;
   1be60:	f895 303e 	ldrb.w	r3, [r5, #62]	; 0x3e
   1be64:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
	clone->ipv6_ext_len = pkt->ipv6_ext_len;
   1be68:	f895 303f 	ldrb.w	r3, [r5, #63]	; 0x3f
   1be6c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
	clone->ipv6_ext_opt_len = pkt->ipv6_ext_opt_len;
   1be70:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
   1be74:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
	clone->ipv6_prev_hdr_start = pkt->ipv6_prev_hdr_start;
   1be78:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
   1be7c:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
	return clone;
   1be80:	e79b      	b.n	1bdba <net_pkt_clone+0xa>

0001be82 <net_pkt_init>:

void net_pkt_init(void)
{
   1be82:	4770      	bx	lr

0001be84 <calc_chksum>:

	return 0;
}

static u16_t calc_chksum(u16_t sum, const u8_t *ptr, u16_t len)
{
   1be84:	b510      	push	{r4, lr}
	u16_t tmp;
	const u8_t *end;

	end = ptr + len - 1;
   1be86:	3a01      	subs	r2, #1
   1be88:	440a      	add	r2, r1

	while (ptr < end) {
   1be8a:	4291      	cmp	r1, r2
   1be8c:	d309      	bcc.n	1bea2 <calc_chksum+0x1e>
			sum++;
		}
		ptr += 2;
	}

	if (ptr == end) {
   1be8e:	d107      	bne.n	1bea0 <calc_chksum+0x1c>
		tmp = ptr[0] << 8;
   1be90:	780b      	ldrb	r3, [r1, #0]
   1be92:	021b      	lsls	r3, r3, #8
		sum += tmp;
   1be94:	4418      	add	r0, r3
   1be96:	b280      	uxth	r0, r0
		if (sum < tmp) {
   1be98:	4283      	cmp	r3, r0
			sum++;
   1be9a:	bf84      	itt	hi
   1be9c:	3001      	addhi	r0, #1
   1be9e:	b280      	uxthhi	r0, r0
		}
	}

	return sum;
}
   1bea0:	bd10      	pop	{r4, pc}
		tmp = (ptr[0] << 8) + ptr[1];
   1bea2:	780c      	ldrb	r4, [r1, #0]
   1bea4:	784b      	ldrb	r3, [r1, #1]
   1bea6:	eb03 2304 	add.w	r3, r3, r4, lsl #8
   1beaa:	b29b      	uxth	r3, r3
		sum += tmp;
   1beac:	4418      	add	r0, r3
   1beae:	b280      	uxth	r0, r0
		if (sum < tmp) {
   1beb0:	4283      	cmp	r3, r0
			sum++;
   1beb2:	bf84      	itt	hi
   1beb4:	3001      	addhi	r0, #1
   1beb6:	b280      	uxthhi	r0, r0
		ptr += 2;
   1beb8:	3102      	adds	r1, #2
   1beba:	e7e6      	b.n	1be8a <calc_chksum+0x6>

0001bebc <net_addr_pton.part.4>:
int net_addr_pton(sa_family_t family, const char *src,
   1bebc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1bec0:	460f      	mov	r7, r1
		int expected_groups = strchr(src, '.') ? 6 : 8;
   1bec2:	212e      	movs	r1, #46	; 0x2e
int net_addr_pton(sa_family_t family, const char *src,
   1bec4:	4604      	mov	r4, r0
		int expected_groups = strchr(src, '.') ? 6 : 8;
   1bec6:	f7e4 fc06 	bl	6d6 <strchr>
		if (*src == ':') {
   1beca:	7823      	ldrb	r3, [r4, #0]
		int expected_groups = strchr(src, '.') ? 6 : 8;
   1becc:	2800      	cmp	r0, #0
   1bece:	bf14      	ite	ne
   1bed0:	2606      	movne	r6, #6
   1bed2:	2608      	moveq	r6, #8
		if (*src == ':') {
   1bed4:	2b3a      	cmp	r3, #58	; 0x3a
			src++;
   1bed6:	bf08      	it	eq
   1bed8:	3401      	addeq	r4, #1
		len = strlen(src);
   1beda:	4620      	mov	r0, r4
   1bedc:	f7e4 fc17 	bl	70e <strlen>
   1bee0:	4623      	mov	r3, r4
		for (i = 0; i < len; i++) {
   1bee2:	1b1a      	subs	r2, r3, r4
   1bee4:	4290      	cmp	r0, r2
   1bee6:	dc19      	bgt.n	1bf1c <net_addr_pton.part.4+0x60>
   1bee8:	2500      	movs	r5, #0
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
   1beea:	46a8      	mov	r8, r5
			if (!src || *src == '\0') {
   1beec:	b31c      	cbz	r4, 1bf36 <net_addr_pton.part.4+0x7a>
   1beee:	7823      	ldrb	r3, [r4, #0]
   1bef0:	b30b      	cbz	r3, 1bf36 <net_addr_pton.part.4+0x7a>
			if (*src != ':') {
   1bef2:	2b3a      	cmp	r3, #58	; 0x3a
   1bef4:	ea4f 0345 	mov.w	r3, r5, lsl #1
   1bef8:	d121      	bne.n	1bf3e <net_addr_pton.part.4+0x82>
   1befa:	443b      	add	r3, r7
			for (; i < expected_groups; i++) {
   1befc:	42ae      	cmp	r6, r5
   1befe:	dc3c      	bgt.n	1bf7a <net_addr_pton.part.4+0xbe>
			tmp = strrchr(src, ':');
   1bf00:	213a      	movs	r1, #58	; 0x3a
   1bf02:	4620      	mov	r0, r4
   1bf04:	f7e4 fbf6 	bl	6f4 <strrchr>
			if (src == tmp && (expected_groups == 6 || !src[1])) {
   1bf08:	42a0      	cmp	r0, r4
   1bf0a:	d14c      	bne.n	1bfa6 <net_addr_pton.part.4+0xea>
   1bf0c:	2e06      	cmp	r6, #6
   1bf0e:	d13b      	bne.n	1bf88 <net_addr_pton.part.4+0xcc>
				src++;
   1bf10:	1c44      	adds	r4, r0, #1
		if (expected_groups == 6) {
   1bf12:	2e06      	cmp	r6, #6
   1bf14:	d04c      	beq.n	1bfb0 <net_addr_pton.part.4+0xf4>
	return 0;
   1bf16:	2000      	movs	r0, #0
   1bf18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (!(src[i] >= '0' && src[i] <= '9') &&
   1bf1c:	f813 2b01 	ldrb.w	r2, [r3], #1
   1bf20:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   1bf24:	290a      	cmp	r1, #10
   1bf26:	d9dc      	bls.n	1bee2 <net_addr_pton.part.4+0x26>
   1bf28:	f022 0120 	bic.w	r1, r2, #32
   1bf2c:	3941      	subs	r1, #65	; 0x41
   1bf2e:	2905      	cmp	r1, #5
   1bf30:	d9d7      	bls.n	1bee2 <net_addr_pton.part.4+0x26>
			    !(src[i] >= 'a' && src[i] <= 'f') &&
   1bf32:	2a2e      	cmp	r2, #46	; 0x2e
   1bf34:	d0d5      	beq.n	1bee2 <net_addr_pton.part.4+0x26>
				return -EINVAL;
   1bf36:	f06f 0015 	mvn.w	r0, #21
   1bf3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
   1bf3e:	2210      	movs	r2, #16
   1bf40:	2100      	movs	r1, #0
   1bf42:	4620      	mov	r0, r4
   1bf44:	f7e4 fb44 	bl	5d0 <strtol>
   1bf48:	2100      	movs	r1, #0
   1bf4a:	4681      	mov	r9, r0
   1bf4c:	2210      	movs	r2, #16
   1bf4e:	4620      	mov	r0, r4
   1bf50:	f7e4 fb3e 	bl	5d0 <strtol>
   1bf54:	f3c9 2907 	ubfx	r9, r9, #8, #8
   1bf58:	ea49 2900 	orr.w	r9, r9, r0, lsl #8
   1bf5c:	f827 9015 	strh.w	r9, [r7, r5, lsl #1]
				src = strchr(src, ':');
   1bf60:	213a      	movs	r1, #58	; 0x3a
   1bf62:	4620      	mov	r0, r4
   1bf64:	f7e4 fbb7 	bl	6d6 <strchr>
				if (!src && i < expected_groups - 1) {
   1bf68:	b910      	cbnz	r0, 1bf70 <net_addr_pton.part.4+0xb4>
   1bf6a:	1e73      	subs	r3, r6, #1
   1bf6c:	42ab      	cmp	r3, r5
   1bf6e:	dce2      	bgt.n	1bf36 <net_addr_pton.part.4+0x7a>
				src++;
   1bf70:	1c44      	adds	r4, r0, #1
		for (i = 0; i < expected_groups; i++) {
   1bf72:	3501      	adds	r5, #1
   1bf74:	42ae      	cmp	r6, r5
   1bf76:	dcb9      	bgt.n	1beec <net_addr_pton.part.4+0x30>
   1bf78:	e7cb      	b.n	1bf12 <net_addr_pton.part.4+0x56>
				UNALIGNED_PUT(0, &addr->s6_addr16[i]);
   1bf7a:	f883 8000 	strb.w	r8, [r3]
   1bf7e:	f883 8001 	strb.w	r8, [r3, #1]
			for (; i < expected_groups; i++) {
   1bf82:	3501      	adds	r5, #1
   1bf84:	3302      	adds	r3, #2
   1bf86:	e7b9      	b.n	1befc <net_addr_pton.part.4+0x40>
			if (src == tmp && (expected_groups == 6 || !src[1])) {
   1bf88:	7863      	ldrb	r3, [r4, #1]
   1bf8a:	2b00      	cmp	r3, #0
   1bf8c:	d0c0      	beq.n	1bf10 <net_addr_pton.part.4+0x54>
			i = expected_groups - 1;
   1bf8e:	1e75      	subs	r5, r6, #1
   1bf90:	3001      	adds	r0, #1
				if (*tmp == ':') {
   1bf92:	f810 3d01 	ldrb.w	r3, [r0, #-1]!
   1bf96:	2b3a      	cmp	r3, #58	; 0x3a
					i--;
   1bf98:	bf08      	it	eq
   1bf9a:	f105 35ff 	addeq.w	r5, r5, #4294967295	; 0xffffffff
			} while (tmp-- != src);
   1bf9e:	42a0      	cmp	r0, r4
   1bfa0:	d1f7      	bne.n	1bf92 <net_addr_pton.part.4+0xd6>
			src++;
   1bfa2:	3401      	adds	r4, #1
   1bfa4:	e7e5      	b.n	1bf72 <net_addr_pton.part.4+0xb6>
			if (expected_groups == 6) {
   1bfa6:	2e06      	cmp	r6, #6
				tmp--;
   1bfa8:	bf08      	it	eq
   1bfaa:	f100 30ff 	addeq.w	r0, r0, #4294967295	; 0xffffffff
   1bfae:	e7ee      	b.n	1bf8e <net_addr_pton.part.4+0xd2>
   1bfb0:	370c      	adds	r7, #12
		if (expected_groups == 6) {
   1bfb2:	2500      	movs	r5, #0
				if (!src || !*src) {
   1bfb4:	2c00      	cmp	r4, #0
   1bfb6:	d0be      	beq.n	1bf36 <net_addr_pton.part.4+0x7a>
   1bfb8:	7823      	ldrb	r3, [r4, #0]
   1bfba:	2b00      	cmp	r3, #0
   1bfbc:	d0bb      	beq.n	1bf36 <net_addr_pton.part.4+0x7a>
				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
   1bfbe:	2100      	movs	r1, #0
   1bfc0:	220a      	movs	r2, #10
   1bfc2:	4620      	mov	r0, r4
   1bfc4:	f7e4 fb04 	bl	5d0 <strtol>
				src = strchr(src, '.');
   1bfc8:	212e      	movs	r1, #46	; 0x2e
				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
   1bfca:	f807 0b01 	strb.w	r0, [r7], #1
				src = strchr(src, '.');
   1bfce:	4620      	mov	r0, r4
   1bfd0:	f7e4 fb81 	bl	6d6 <strchr>
				if (!src && i < 3) {
   1bfd4:	b908      	cbnz	r0, 1bfda <net_addr_pton.part.4+0x11e>
   1bfd6:	2d03      	cmp	r5, #3
   1bfd8:	d1ad      	bne.n	1bf36 <net_addr_pton.part.4+0x7a>
			for (i = 0; i < 4; i++) {
   1bfda:	3501      	adds	r5, #1
   1bfdc:	2d04      	cmp	r5, #4
				src++;
   1bfde:	f100 0401 	add.w	r4, r0, #1
			for (i = 0; i < 4; i++) {
   1bfe2:	d1e7      	bne.n	1bfb4 <net_addr_pton.part.4+0xf8>
   1bfe4:	e797      	b.n	1bf16 <net_addr_pton.part.4+0x5a>

0001bfe6 <net_addr_pton>:
	if (family == AF_INET) {
   1bfe6:	2802      	cmp	r0, #2
{
   1bfe8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1bfea:	460c      	mov	r4, r1
   1bfec:	4615      	mov	r5, r2
	if (family == AF_INET) {
   1bfee:	d127      	bne.n	1c040 <net_addr_pton+0x5a>
		len = strlen(src);
   1bff0:	4608      	mov	r0, r1
   1bff2:	f7e4 fb8c 	bl	70e <strlen>
   1bff6:	4623      	mov	r3, r4
   1bff8:	4420      	add	r0, r4
		for (i = 0; i < len; i++) {
   1bffa:	4283      	cmp	r3, r0
   1bffc:	d114      	bne.n	1c028 <net_addr_pton+0x42>
		memset(addr, 0, sizeof(struct in_addr));
   1bffe:	4628      	mov	r0, r5
   1c000:	2204      	movs	r2, #4
   1c002:	2100      	movs	r1, #0
   1c004:	f7e4 fbf1 	bl	7ea <memset>
   1c008:	1e6e      	subs	r6, r5, #1
   1c00a:	3503      	adds	r5, #3
			addr->s4_addr[i] = strtol(src, &endptr, 10);
   1c00c:	4620      	mov	r0, r4
   1c00e:	220a      	movs	r2, #10
   1c010:	a901      	add	r1, sp, #4
   1c012:	f7e4 fadd 	bl	5d0 <strtol>
   1c016:	f806 0f01 	strb.w	r0, [r6, #1]!
			src = ++endptr;
   1c01a:	9c01      	ldr	r4, [sp, #4]
		for (i = 0; i < sizeof(struct in_addr); i++) {
   1c01c:	42b5      	cmp	r5, r6
			src = ++endptr;
   1c01e:	f104 0401 	add.w	r4, r4, #1
		for (i = 0; i < sizeof(struct in_addr); i++) {
   1c022:	d1f3      	bne.n	1c00c <net_addr_pton+0x26>
	return 0;
   1c024:	2000      	movs	r0, #0
   1c026:	e009      	b.n	1c03c <net_addr_pton+0x56>
			if (!(src[i] >= '0' && src[i] <= '9') &&
   1c028:	f813 2b01 	ldrb.w	r2, [r3], #1
   1c02c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   1c030:	2909      	cmp	r1, #9
   1c032:	d9e2      	bls.n	1bffa <net_addr_pton+0x14>
   1c034:	2a2e      	cmp	r2, #46	; 0x2e
   1c036:	d0e0      	beq.n	1bffa <net_addr_pton+0x14>
				return -EINVAL;
   1c038:	f06f 0015 	mvn.w	r0, #21
}
   1c03c:	b002      	add	sp, #8
   1c03e:	bd70      	pop	{r4, r5, r6, pc}
	} else if (family == AF_INET6) {
   1c040:	280a      	cmp	r0, #10
   1c042:	d1f9      	bne.n	1c038 <net_addr_pton+0x52>
   1c044:	4611      	mov	r1, r2
   1c046:	4620      	mov	r0, r4
   1c048:	f7ff ff38 	bl	1bebc <net_addr_pton.part.4>
   1c04c:	e7f6      	b.n	1c03c <net_addr_pton+0x56>

0001c04e <net_calc_chksum>:

	return sum;
}

u16_t net_calc_chksum(struct net_pkt *pkt, u8_t proto)
{
   1c04e:	b5f0      	push	{r4, r5, r6, r7, lr}
	return pkt->family;
   1c050:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
	u16_t upper_layer_len;
	u16_t sum = 0;

	switch (net_pkt_family(pkt)) {
   1c054:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   1c058:	2b0a      	cmp	r3, #10
{
   1c05a:	b085      	sub	sp, #20
   1c05c:	4605      	mov	r5, r0
	switch (net_pkt_family(pkt)) {
   1c05e:	d144      	bne.n	1c0ea <net_calc_chksum+0x9c>
   1c060:	6886      	ldr	r6, [r0, #8]
		break;
#endif
#if defined(CONFIG_NET_IPV6)
	case AF_INET6:
		upper_layer_len = (NET_IPV6_HDR(pkt)->len[0] << 8) +
			NET_IPV6_HDR(pkt)->len[1] - net_pkt_ipv6_ext_len(pkt);
   1c062:	f890 703f 	ldrb.w	r7, [r0, #63]	; 0x3f
	return pkt->frags->data;
   1c066:	68b3      	ldr	r3, [r6, #8]
   1c068:	7958      	ldrb	r0, [r3, #5]
		sum = calc_chksum(upper_layer_len + proto,
   1c06a:	1bc9      	subs	r1, r1, r7
   1c06c:	4408      	add	r0, r1
		upper_layer_len = (NET_IPV6_HDR(pkt)->len[0] << 8) +
   1c06e:	7919      	ldrb	r1, [r3, #4]
		sum = calc_chksum(upper_layer_len + proto,
   1c070:	eb00 2001 	add.w	r0, r0, r1, lsl #8
   1c074:	2220      	movs	r2, #32
   1c076:	f103 0108 	add.w	r1, r3, #8
   1c07a:	b280      	uxth	r0, r0
   1c07c:	f7ff ff02 	bl	1be84 <calc_chksum>
	u16_t proto_len = net_pkt_ip_hdr_len(pkt) +
   1c080:	f895 1035 	ldrb.w	r1, [r5, #53]	; 0x35
	return net_frag_read(frag, offset, pos, len, NULL);
   1c084:	2300      	movs	r3, #0
		sum = calc_chksum(upper_layer_len + proto,
   1c086:	4604      	mov	r4, r0
   1c088:	9300      	str	r3, [sp, #0]
   1c08a:	4630      	mov	r0, r6
   1c08c:	f10d 020e 	add.w	r2, sp, #14
   1c090:	4439      	add	r1, r7
   1c092:	f7ff fd53 	bl	1bb3c <net_frag_read>
	if (!frag) {
   1c096:	4606      	mov	r6, r0
   1c098:	b348      	cbz	r0, 1c0ee <net_calc_chksum+0xa0>
	ptr = frag->data + offset;
   1c09a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
	len = frag->len - offset;
   1c09e:	8982      	ldrh	r2, [r0, #12]
	ptr = frag->data + offset;
   1c0a0:	6881      	ldr	r1, [r0, #8]
	len = frag->len - offset;
   1c0a2:	1ad2      	subs	r2, r2, r3
	ptr = frag->data + offset;
   1c0a4:	4419      	add	r1, r3
	len = frag->len - offset;
   1c0a6:	b212      	sxth	r2, r2
		sum = calc_chksum(sum, ptr, len);
   1c0a8:	b295      	uxth	r5, r2
   1c0aa:	4620      	mov	r0, r4
   1c0ac:	462a      	mov	r2, r5
   1c0ae:	f7ff fee9 	bl	1be84 <calc_chksum>
		frag = frag->frags;
   1c0b2:	6836      	ldr	r6, [r6, #0]
		sum = calc_chksum(sum, ptr, len);
   1c0b4:	4604      	mov	r4, r0
		if (!frag) {
   1c0b6:	b926      	cbnz	r6, 1c0c2 <net_calc_chksum+0x74>
		return 0;
	}

	sum = calc_chksum_pkt(sum, pkt, upper_layer_len);

	sum = (sum == 0) ? 0xffff : htons(sum);
   1c0b8:	b1c8      	cbz	r0, 1c0ee <net_calc_chksum+0xa0>
   1c0ba:	ba40      	rev16	r0, r0
   1c0bc:	b280      	uxth	r0, r0

	return sum;
}
   1c0be:	b005      	add	sp, #20
   1c0c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (len % 2) {
   1c0c2:	07eb      	lsls	r3, r5, #31
		ptr = frag->data;
   1c0c4:	68b1      	ldr	r1, [r6, #8]
		if (len % 2) {
   1c0c6:	d50d      	bpl.n	1c0e4 <net_calc_chksum+0x96>
			u16_t tmp = *ptr;
   1c0c8:	780b      	ldrb	r3, [r1, #0]
			len = frag->len - 1;
   1c0ca:	89b2      	ldrh	r2, [r6, #12]
			sum += tmp;
   1c0cc:	441c      	add	r4, r3
   1c0ce:	b2a4      	uxth	r4, r4
			if (sum < tmp) {
   1c0d0:	42a3      	cmp	r3, r4
				sum++;
   1c0d2:	bf88      	it	hi
   1c0d4:	3401      	addhi	r4, #1
			len = frag->len - 1;
   1c0d6:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
				sum++;
   1c0da:	bf88      	it	hi
   1c0dc:	b2a4      	uxthhi	r4, r4
			len = frag->len - 1;
   1c0de:	b212      	sxth	r2, r2
			ptr++;
   1c0e0:	3101      	adds	r1, #1
   1c0e2:	e7e1      	b.n	1c0a8 <net_calc_chksum+0x5a>
			len = frag->len;
   1c0e4:	f9b6 200c 	ldrsh.w	r2, [r6, #12]
   1c0e8:	e7de      	b.n	1c0a8 <net_calc_chksum+0x5a>
		return 0;
   1c0ea:	2000      	movs	r0, #0
   1c0ec:	e7e7      	b.n	1c0be <net_calc_chksum+0x70>
	sum = (sum == 0) ? 0xffff : htons(sum);
   1c0ee:	f64f 70ff 	movw	r0, #65535	; 0xffff
   1c0f2:	e7e4      	b.n	1c0be <net_calc_chksum+0x70>

0001c0f4 <net_header_fits>:
 * memory area. The start of the said area must be inside the first
 * fragment. This helper is used when checking whether various protocol
 * headers are split between two fragments.
 */
bool net_header_fits(struct net_pkt *pkt, u8_t *hdr, size_t hdr_size)
{
   1c0f4:	b510      	push	{r4, lr}
	if (hdr && hdr > pkt->frags->data &&
   1c0f6:	b159      	cbz	r1, 1c110 <net_header_fits+0x1c>
   1c0f8:	6884      	ldr	r4, [r0, #8]
   1c0fa:	68a3      	ldr	r3, [r4, #8]
   1c0fc:	4299      	cmp	r1, r3
   1c0fe:	d907      	bls.n	1c110 <net_header_fits+0x1c>
	    (hdr + hdr_size) <= (pkt->frags->data + pkt->frags->len)) {
   1c100:	89a0      	ldrh	r0, [r4, #12]
   1c102:	4411      	add	r1, r2
   1c104:	4418      	add	r0, r3
	if (hdr && hdr > pkt->frags->data &&
   1c106:	4281      	cmp	r1, r0
   1c108:	bf8c      	ite	hi
   1c10a:	2000      	movhi	r0, #0
   1c10c:	2001      	movls	r0, #1
   1c10e:	bd10      	pop	{r4, pc}
		return true;
	}

	return false;
   1c110:	2000      	movs	r0, #0
}
   1c112:	bd10      	pop	{r4, pc}

0001c114 <net_ipv6_addr_create_iid>:
{
   1c114:	b570      	push	{r4, r5, r6, lr}
	addr->s6_addr[1] = 0x80;
   1c116:	2380      	movs	r3, #128	; 0x80
   1c118:	7043      	strb	r3, [r0, #1]
	addr->s6_addr[0] = 0xfe;
   1c11a:	26fe      	movs	r6, #254	; 0xfe
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
   1c11c:	2300      	movs	r3, #0
	addr->s6_addr[0] = 0xfe;
   1c11e:	7006      	strb	r6, [r0, #0]
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
   1c120:	7083      	strb	r3, [r0, #2]
   1c122:	70c3      	strb	r3, [r0, #3]
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
   1c124:	7103      	strb	r3, [r0, #4]
   1c126:	7143      	strb	r3, [r0, #5]
   1c128:	7183      	strb	r3, [r0, #6]
   1c12a:	71c3      	strb	r3, [r0, #7]
	switch (lladdr->len) {
   1c12c:	790a      	ldrb	r2, [r1, #4]
   1c12e:	2a06      	cmp	r2, #6
{
   1c130:	4604      	mov	r4, r0
   1c132:	460d      	mov	r5, r1
	switch (lladdr->len) {
   1c134:	d013      	beq.n	1c15e <net_ipv6_addr_create_iid+0x4a>
   1c136:	2a08      	cmp	r2, #8
   1c138:	d028      	beq.n	1c18c <net_ipv6_addr_create_iid+0x78>
   1c13a:	2a02      	cmp	r2, #2
   1c13c:	d125      	bne.n	1c18a <net_ipv6_addr_create_iid+0x76>
		if (lladdr->type == NET_LINK_IEEE802154) {
   1c13e:	794a      	ldrb	r2, [r1, #5]
   1c140:	2a01      	cmp	r2, #1
   1c142:	d122      	bne.n	1c18a <net_ipv6_addr_create_iid+0x76>
			addr->s6_addr[11] = 0xff;
   1c144:	22ff      	movs	r2, #255	; 0xff
   1c146:	72c2      	strb	r2, [r0, #11]
			addr->s6_addr[12] = 0xfe;
   1c148:	7306      	strb	r6, [r0, #12]
			addr->s6_addr[13] = 0;
   1c14a:	7343      	strb	r3, [r0, #13]
			UNALIGNED_PUT(0, &addr->s6_addr32[2]);
   1c14c:	7203      	strb	r3, [r0, #8]
   1c14e:	7243      	strb	r3, [r0, #9]
   1c150:	7283      	strb	r3, [r0, #10]
			addr->s6_addr[14] = lladdr->addr[0];
   1c152:	680b      	ldr	r3, [r1, #0]
   1c154:	781a      	ldrb	r2, [r3, #0]
   1c156:	7382      	strb	r2, [r0, #14]
			addr->s6_addr[15] = lladdr->addr[1];
   1c158:	785b      	ldrb	r3, [r3, #1]
   1c15a:	73c3      	strb	r3, [r0, #15]
   1c15c:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   1c15e:	2203      	movs	r2, #3
   1c160:	6809      	ldr	r1, [r1, #0]
   1c162:	3008      	adds	r0, #8
   1c164:	f7e4 fb15 	bl	792 <memcpy>
		addr->s6_addr[11] = 0xff;
   1c168:	23ff      	movs	r3, #255	; 0xff
   1c16a:	72e3      	strb	r3, [r4, #11]
		addr->s6_addr[12] = 0xfe;
   1c16c:	7326      	strb	r6, [r4, #12]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   1c16e:	6829      	ldr	r1, [r5, #0]
   1c170:	2203      	movs	r2, #3
   1c172:	4411      	add	r1, r2
   1c174:	f104 000d 	add.w	r0, r4, #13
   1c178:	f7e4 fb0b 	bl	792 <memcpy>
		if (lladdr->type == NET_LINK_ETHERNET) {
   1c17c:	796b      	ldrb	r3, [r5, #5]
   1c17e:	2b03      	cmp	r3, #3
   1c180:	d103      	bne.n	1c18a <net_ipv6_addr_create_iid+0x76>
		addr->s6_addr[8] ^= 0x02;
   1c182:	7a23      	ldrb	r3, [r4, #8]
   1c184:	f083 0302 	eor.w	r3, r3, #2
   1c188:	7223      	strb	r3, [r4, #8]
   1c18a:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
   1c18c:	6809      	ldr	r1, [r1, #0]
   1c18e:	3008      	adds	r0, #8
   1c190:	f7e4 faff 	bl	792 <memcpy>
   1c194:	e7f5      	b.n	1c182 <net_ipv6_addr_create_iid+0x6e>

0001c196 <net_ipv6_addr_based_on_ll>:
{
   1c196:	b570      	push	{r4, r5, r6, lr}
   1c198:	460d      	mov	r5, r1
	if (!addr || !lladdr) {
   1c19a:	4604      	mov	r4, r0
   1c19c:	b908      	cbnz	r0, 1c1a2 <net_ipv6_addr_based_on_ll+0xc>
	return false;
   1c19e:	2000      	movs	r0, #0
}
   1c1a0:	bd70      	pop	{r4, r5, r6, pc}
	if (!addr || !lladdr) {
   1c1a2:	2900      	cmp	r1, #0
   1c1a4:	d0fb      	beq.n	1c19e <net_ipv6_addr_based_on_ll+0x8>
	switch (lladdr->len) {
   1c1a6:	790a      	ldrb	r2, [r1, #4]
   1c1a8:	2a06      	cmp	r2, #6
   1c1aa:	d013      	beq.n	1c1d4 <net_ipv6_addr_based_on_ll+0x3e>
   1c1ac:	2a08      	cmp	r2, #8
   1c1ae:	d048      	beq.n	1c242 <net_ipv6_addr_based_on_ll+0xac>
   1c1b0:	2a02      	cmp	r2, #2
   1c1b2:	d1f4      	bne.n	1c19e <net_ipv6_addr_based_on_ll+0x8>
		if (!memcmp(&addr->s6_addr[14], lladdr->addr, lladdr->len) &&
   1c1b4:	6809      	ldr	r1, [r1, #0]
   1c1b6:	300e      	adds	r0, #14
   1c1b8:	f7e4 fabe 	bl	738 <memcmp>
   1c1bc:	2800      	cmp	r0, #0
   1c1be:	d1ee      	bne.n	1c19e <net_ipv6_addr_based_on_ll+0x8>
		    addr->s6_addr[10] == 0 &&
   1c1c0:	68a3      	ldr	r3, [r4, #8]
   1c1c2:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   1c1c6:	d1ea      	bne.n	1c19e <net_ipv6_addr_based_on_ll+0x8>
			    addr->s6_addr[11] == 0xff &&
   1c1c8:	7b20      	ldrb	r0, [r4, #12]
   1c1ca:	28fe      	cmp	r0, #254	; 0xfe
			    lladdr->len - 1) &&
   1c1cc:	bf14      	ite	ne
   1c1ce:	2000      	movne	r0, #0
   1c1d0:	2001      	moveq	r0, #1
   1c1d2:	bd70      	pop	{r4, r5, r6, pc}
		if (lladdr->type == NET_LINK_ETHERNET) {
   1c1d4:	794e      	ldrb	r6, [r1, #5]
   1c1d6:	2e03      	cmp	r6, #3
   1c1d8:	d11d      	bne.n	1c216 <net_ipv6_addr_based_on_ll+0x80>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   1c1da:	6809      	ldr	r1, [r1, #0]
   1c1dc:	2202      	movs	r2, #2
   1c1de:	3101      	adds	r1, #1
   1c1e0:	3009      	adds	r0, #9
   1c1e2:	f7e4 faa9 	bl	738 <memcmp>
   1c1e6:	2800      	cmp	r0, #0
   1c1e8:	d1d9      	bne.n	1c19e <net_ipv6_addr_based_on_ll+0x8>
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   1c1ea:	6829      	ldr	r1, [r5, #0]
   1c1ec:	4632      	mov	r2, r6
   1c1ee:	3103      	adds	r1, #3
   1c1f0:	f104 000d 	add.w	r0, r4, #13
   1c1f4:	f7e4 faa0 	bl	738 <memcmp>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   1c1f8:	2800      	cmp	r0, #0
   1c1fa:	d1d0      	bne.n	1c19e <net_ipv6_addr_based_on_ll+0x8>
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   1c1fc:	7ae3      	ldrb	r3, [r4, #11]
   1c1fe:	2bff      	cmp	r3, #255	; 0xff
   1c200:	d1cd      	bne.n	1c19e <net_ipv6_addr_based_on_ll+0x8>
			    addr->s6_addr[11] == 0xff &&
   1c202:	7b23      	ldrb	r3, [r4, #12]
   1c204:	2bfe      	cmp	r3, #254	; 0xfe
   1c206:	d1ca      	bne.n	1c19e <net_ipv6_addr_based_on_ll+0x8>
		    (addr->s6_addr[8] ^ 0x02) == lladdr->addr[0]) {
   1c208:	682a      	ldr	r2, [r5, #0]
   1c20a:	7a23      	ldrb	r3, [r4, #8]
			    lladdr->len - 1) &&
   1c20c:	7810      	ldrb	r0, [r2, #0]
   1c20e:	f083 0302 	eor.w	r3, r3, #2
   1c212:	4298      	cmp	r0, r3
   1c214:	e7da      	b.n	1c1cc <net_ipv6_addr_based_on_ll+0x36>
		} else if (lladdr->type == NET_LINK_BLUETOOTH) {
   1c216:	2e02      	cmp	r6, #2
   1c218:	d1c1      	bne.n	1c19e <net_ipv6_addr_based_on_ll+0x8>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   1c21a:	6809      	ldr	r1, [r1, #0]
   1c21c:	4632      	mov	r2, r6
   1c21e:	3101      	adds	r1, #1
   1c220:	3009      	adds	r0, #9
   1c222:	f7e4 fa89 	bl	738 <memcmp>
   1c226:	2800      	cmp	r0, #0
   1c228:	d1b9      	bne.n	1c19e <net_ipv6_addr_based_on_ll+0x8>
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   1c22a:	6829      	ldr	r1, [r5, #0]
   1c22c:	2203      	movs	r2, #3
   1c22e:	4411      	add	r1, r2
   1c230:	f104 000d 	add.w	r0, r4, #13
   1c234:	f7e4 fa80 	bl	738 <memcmp>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   1c238:	2800      	cmp	r0, #0
   1c23a:	d1b0      	bne.n	1c19e <net_ipv6_addr_based_on_ll+0x8>
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   1c23c:	7ae3      	ldrb	r3, [r4, #11]
   1c23e:	2bff      	cmp	r3, #255	; 0xff
   1c240:	e7c1      	b.n	1c1c6 <net_ipv6_addr_based_on_ll+0x30>
		if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1],
   1c242:	6809      	ldr	r1, [r1, #0]
   1c244:	2207      	movs	r2, #7
   1c246:	3101      	adds	r1, #1
   1c248:	3009      	adds	r0, #9
   1c24a:	f7e4 fa75 	bl	738 <memcmp>
   1c24e:	2800      	cmp	r0, #0
   1c250:	d0da      	beq.n	1c208 <net_ipv6_addr_based_on_ll+0x72>
   1c252:	e7a4      	b.n	1c19e <net_ipv6_addr_based_on_ll+0x8>

0001c254 <net_6lo_compress>:
	return true;
}

bool net_6lo_compress(struct net_pkt *pkt, bool iphc,
		      fragment_handler_t fragment)
{
   1c254:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1c258:	4607      	mov	r7, r0
   1c25a:	4691      	mov	r9, r2
	if (iphc) {
   1c25c:	2900      	cmp	r1, #0
   1c25e:	f000 81d2 	beq.w	1c606 <net_6lo_compress+0x3b2>
   1c262:	6882      	ldr	r2, [r0, #8]
	if (pkt->frags->len < NET_IPV6H_LEN) {
   1c264:	8993      	ldrh	r3, [r2, #12]
   1c266:	2b27      	cmp	r3, #39	; 0x27
   1c268:	d803      	bhi.n	1c272 <net_6lo_compress+0x1e>
		return false;
   1c26a:	2000      	movs	r0, #0
		return compress_IPHC_header(pkt, fragment);
	} else {
		return compress_ipv6_header(pkt, fragment);
	}
}
   1c26c:	b003      	add	sp, #12
   1c26e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return pkt->frags->data;
   1c272:	6895      	ldr	r5, [r2, #8]
	if (ipv6->nexthdr == IPPROTO_UDP &&
   1c274:	79aa      	ldrb	r2, [r5, #6]
   1c276:	2a11      	cmp	r2, #17
   1c278:	d101      	bne.n	1c27e <net_6lo_compress+0x2a>
   1c27a:	2b2f      	cmp	r3, #47	; 0x2f
   1c27c:	d9f5      	bls.n	1c26a <net_6lo_compress+0x16>
	frag = net_pkt_get_frag(pkt, K_FOREVER);
   1c27e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1c282:	4638      	mov	r0, r7
   1c284:	f7ff fa9a 	bl	1b7bc <net_pkt_get_frag>
	if (!frag) {
   1c288:	4606      	mov	r6, r0
   1c28a:	2800      	cmp	r0, #0
   1c28c:	d0ed      	beq.n	1c26a <net_6lo_compress+0x16>
	IPHC[offset++] = NET_6LO_DISPATCH_IPHC;
   1c28e:	6883      	ldr	r3, [r0, #8]
   1c290:	2260      	movs	r2, #96	; 0x60
   1c292:	701a      	strb	r2, [r3, #0]
	IPHC[offset++] = 0;
   1c294:	6883      	ldr	r3, [r0, #8]
   1c296:	2200      	movs	r2, #0
   1c298:	705a      	strb	r2, [r3, #1]
	tcl = ((ipv6->vtc & 0x0F) << 4) | ((ipv6->tcflow & 0xF0) >> 4);
   1c29a:	786c      	ldrb	r4, [r5, #1]
   1c29c:	782a      	ldrb	r2, [r5, #0]
   1c29e:	0923      	lsrs	r3, r4, #4
   1c2a0:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
   1c2a4:	b2db      	uxtb	r3, r3
	tcl = (tcl << 6) | (tcl >> 2);   /* ECN(2), DSCP(6) */
   1c2a6:	0898      	lsrs	r0, r3, #2
   1c2a8:	ea40 1083 	orr.w	r0, r0, r3, lsl #6
   1c2ac:	b240      	sxtb	r0, r0
	if (((ipv6->tcflow & 0x0F) == 0) && (ipv6->flow == 0)) {
   1c2ae:	f014 0f0f 	tst.w	r4, #15
	tcl = (tcl << 6) | (tcl >> 2);   /* ECN(2), DSCP(6) */
   1c2b2:	fa5f fe80 	uxtb.w	lr, r0
   1c2b6:	f002 020f 	and.w	r2, r2, #15
   1c2ba:	68b3      	ldr	r3, [r6, #8]
	if (((ipv6->tcflow & 0x0F) == 0) && (ipv6->flow == 0)) {
   1c2bc:	d145      	bne.n	1c34a <net_6lo_compress+0xf6>
   1c2be:	8869      	ldrh	r1, [r5, #2]
   1c2c0:	2900      	cmp	r1, #0
   1c2c2:	d142      	bne.n	1c34a <net_6lo_compress+0xf6>
		if (((ipv6->vtc & 0x0F) == 0) && ((ipv6->tcflow & 0xF0) == 0)) {
   1c2c4:	2a00      	cmp	r2, #0
   1c2c6:	d137      	bne.n	1c338 <net_6lo_compress+0xe4>
   1c2c8:	f014 0ff0 	tst.w	r4, #240	; 0xf0
   1c2cc:	d134      	bne.n	1c338 <net_6lo_compress+0xe4>
			IPHC[0] |= NET_6LO_IPHC_TF_11;
   1c2ce:	781a      	ldrb	r2, [r3, #0]
   1c2d0:	f042 0218 	orr.w	r2, r2, #24
   1c2d4:	701a      	strb	r2, [r3, #0]
   1c2d6:	2402      	movs	r4, #2
   1c2d8:	79aa      	ldrb	r2, [r5, #6]
   1c2da:	68b3      	ldr	r3, [r6, #8]
	if (ipv6->nexthdr == IPPROTO_UDP) {
   1c2dc:	2a11      	cmp	r2, #17
		IPHC[0] |= NET_6LO_IPHC_NH_1;
   1c2de:	bf09      	itett	eq
   1c2e0:	781a      	ldrbeq	r2, [r3, #0]
		IPHC[offset++] = ipv6->nexthdr;
   1c2e2:	551a      	strbne	r2, [r3, r4]
		IPHC[0] |= NET_6LO_IPHC_NH_1;
   1c2e4:	f042 0204 	orreq.w	r2, r2, #4
   1c2e8:	701a      	strbeq	r2, [r3, #0]
   1c2ea:	79ea      	ldrb	r2, [r5, #7]
   1c2ec:	68b3      	ldr	r3, [r6, #8]
		IPHC[offset++] = ipv6->nexthdr;
   1c2ee:	bf1c      	itt	ne
   1c2f0:	1c61      	addne	r1, r4, #1
   1c2f2:	b2cc      	uxtbne	r4, r1
	switch (ipv6->hop_limit) {
   1c2f4:	2a40      	cmp	r2, #64	; 0x40
   1c2f6:	d04e      	beq.n	1c396 <net_6lo_compress+0x142>
   1c2f8:	2aff      	cmp	r2, #255	; 0xff
   1c2fa:	d050      	beq.n	1c39e <net_6lo_compress+0x14a>
   1c2fc:	2a01      	cmp	r2, #1
   1c2fe:	d152      	bne.n	1c3a6 <net_6lo_compress+0x152>
		IPHC[0] |= NET_6LO_IPHC_HLIM1;
   1c300:	781a      	ldrb	r2, [r3, #0]
   1c302:	f042 0201 	orr.w	r2, r2, #1
		IPHC[0] |= NET_6LO_IPHC_HLIM64;
   1c306:	701a      	strb	r2, [r3, #0]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1c308:	68ab      	ldr	r3, [r5, #8]
	if (net_is_ipv6_addr_unspecified(&ipv6->src)) {
   1c30a:	f105 0008 	add.w	r0, r5, #8
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1c30e:	2b00      	cmp	r3, #0
   1c310:	f040 8195 	bne.w	1c63e <net_6lo_compress+0x3ea>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1c314:	68eb      	ldr	r3, [r5, #12]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1c316:	2b00      	cmp	r3, #0
   1c318:	f040 8191 	bne.w	1c63e <net_6lo_compress+0x3ea>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1c31c:	692b      	ldr	r3, [r5, #16]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1c31e:	2b00      	cmp	r3, #0
   1c320:	f040 818d 	bne.w	1c63e <net_6lo_compress+0x3ea>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   1c324:	696b      	ldr	r3, [r5, #20]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1c326:	2b00      	cmp	r3, #0
   1c328:	f040 8189 	bne.w	1c63e <net_6lo_compress+0x3ea>
		IPHC[1] |= NET_6LO_IPHC_SAC_1;
   1c32c:	68b2      	ldr	r2, [r6, #8]
   1c32e:	7853      	ldrb	r3, [r2, #1]
   1c330:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1c334:	7053      	strb	r3, [r2, #1]
   1c336:	e050      	b.n	1c3da <net_6lo_compress+0x186>
			IPHC[0] |= NET_6LO_IPHC_TF_10;
   1c338:	781a      	ldrb	r2, [r3, #0]
   1c33a:	f042 0210 	orr.w	r2, r2, #16
   1c33e:	701a      	strb	r2, [r3, #0]
			IPHC[offset++] = tcl;
   1c340:	68b3      	ldr	r3, [r6, #8]
   1c342:	2403      	movs	r4, #3
   1c344:	f883 e002 	strb.w	lr, [r3, #2]
   1c348:	e7c6      	b.n	1c2d8 <net_6lo_compress+0x84>
   1c34a:	1ca9      	adds	r1, r5, #2
		if (((ipv6->vtc & 0x0F) == 0) && (ipv6->tcflow & 0x30)) {
   1c34c:	b9aa      	cbnz	r2, 1c37a <net_6lo_compress+0x126>
   1c34e:	f014 0f30 	tst.w	r4, #48	; 0x30
   1c352:	d012      	beq.n	1c37a <net_6lo_compress+0x126>
			IPHC[0] |= NET_6LO_IPHC_TF_01;
   1c354:	781a      	ldrb	r2, [r3, #0]
   1c356:	f042 0208 	orr.w	r2, r2, #8
   1c35a:	701a      	strb	r2, [r3, #0]
			IPHC[offset++] = (tcl & 0xC0) | (ipv6->tcflow & 0x0F);
   1c35c:	786b      	ldrb	r3, [r5, #1]
   1c35e:	68b2      	ldr	r2, [r6, #8]
   1c360:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
   1c364:	f003 030f 	and.w	r3, r3, #15
   1c368:	4303      	orrs	r3, r0
   1c36a:	7093      	strb	r3, [r2, #2]
			memcpy(&IPHC[offset], &ipv6->flow, 2);
   1c36c:	68b0      	ldr	r0, [r6, #8]
   1c36e:	2202      	movs	r2, #2
   1c370:	3003      	adds	r0, #3
   1c372:	f7e4 fa0e 	bl	792 <memcpy>
			offset += 2;
   1c376:	2405      	movs	r4, #5
   1c378:	e7ae      	b.n	1c2d8 <net_6lo_compress+0x84>
			IPHC[offset++] = tcl;
   1c37a:	f883 e002 	strb.w	lr, [r3, #2]
			IPHC[offset++] = ipv6->tcflow & 0x0F;
   1c37e:	786b      	ldrb	r3, [r5, #1]
   1c380:	68b2      	ldr	r2, [r6, #8]
   1c382:	f003 030f 	and.w	r3, r3, #15
   1c386:	70d3      	strb	r3, [r2, #3]
			memcpy(&IPHC[offset], &ipv6->flow, 2);
   1c388:	68b0      	ldr	r0, [r6, #8]
   1c38a:	2202      	movs	r2, #2
   1c38c:	3004      	adds	r0, #4
   1c38e:	f7e4 fa00 	bl	792 <memcpy>
			offset += 2;
   1c392:	2406      	movs	r4, #6
   1c394:	e7a0      	b.n	1c2d8 <net_6lo_compress+0x84>
		IPHC[0] |= NET_6LO_IPHC_HLIM64;
   1c396:	781a      	ldrb	r2, [r3, #0]
   1c398:	f042 0202 	orr.w	r2, r2, #2
   1c39c:	e7b3      	b.n	1c306 <net_6lo_compress+0xb2>
		IPHC[0] |= NET_6LO_IPHC_HLIM255;
   1c39e:	781a      	ldrb	r2, [r3, #0]
   1c3a0:	f042 0203 	orr.w	r2, r2, #3
   1c3a4:	e7af      	b.n	1c306 <net_6lo_compress+0xb2>
		IPHC[offset++] = ipv6->hop_limit;
   1c3a6:	1c61      	adds	r1, r4, #1
   1c3a8:	551a      	strb	r2, [r3, r4]
   1c3aa:	b2cc      	uxtb	r4, r1
   1c3ac:	e7ac      	b.n	1c308 <net_6lo_compress+0xb4>
	return ((UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0xFF)) &&
   1c3ae:	8aab      	ldrh	r3, [r5, #20]
   1c3b0:	2bfe      	cmp	r3, #254	; 0xfe
   1c3b2:	f040 8157 	bne.w	1c664 <net_6lo_compress+0x410>
			IPHC[1] |= NET_6LO_IPHC_SAM_10;
   1c3b6:	68b2      	ldr	r2, [r6, #8]
   1c3b8:	7853      	ldrb	r3, [r2, #1]
   1c3ba:	f043 0320 	orr.w	r3, r3, #32
   1c3be:	7053      	strb	r3, [r2, #1]
			memcpy(&IPHC[offset], &ipv6->src.s6_addr[14], 2);
   1c3c0:	68b0      	ldr	r0, [r6, #8]
   1c3c2:	2202      	movs	r2, #2
   1c3c4:	4420      	add	r0, r4
   1c3c6:	f105 0116 	add.w	r1, r5, #22
   1c3ca:	f7e4 f9e2 	bl	792 <memcpy>
			offset += 2;
   1c3ce:	3402      	adds	r4, #2
   1c3d0:	e15c      	b.n	1c68c <net_6lo_compress+0x438>
				IPHC[1] |= NET_6LO_IPHC_SAM_11;
   1c3d2:	785a      	ldrb	r2, [r3, #1]
   1c3d4:	f042 0230 	orr.w	r2, r2, #48	; 0x30
   1c3d8:	705a      	strb	r2, [r3, #1]
	if (net_is_ipv6_addr_mcast(&ipv6->dst)) {
   1c3da:	7e2b      	ldrb	r3, [r5, #24]
   1c3dc:	2bff      	cmp	r3, #255	; 0xff
   1c3de:	d12f      	bne.n	1c440 <net_6lo_compress+0x1ec>
	IPHC[1] |= NET_6LO_IPHC_M_1;
   1c3e0:	68b2      	ldr	r2, [r6, #8]
   1c3e2:	7853      	ldrb	r3, [r2, #1]
   1c3e4:	f043 0308 	orr.w	r3, r3, #8
   1c3e8:	7053      	strb	r3, [r2, #1]
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   1c3ea:	7e6b      	ldrb	r3, [r5, #25]
   1c3ec:	68b0      	ldr	r0, [r6, #8]
   1c3ee:	2b02      	cmp	r3, #2
   1c3f0:	f040 8154 	bne.w	1c69c <net_6lo_compress+0x448>
	return ((addr->s6_addr[1] == 0x02) &&
   1c3f4:	8b6b      	ldrh	r3, [r5, #26]
   1c3f6:	2b00      	cmp	r3, #0
   1c3f8:	f040 8150 	bne.w	1c69c <net_6lo_compress+0x448>
		 (UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   1c3fc:	69eb      	ldr	r3, [r5, #28]
		 (UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   1c3fe:	2b00      	cmp	r3, #0
   1c400:	f040 814c 	bne.w	1c69c <net_6lo_compress+0x448>
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   1c404:	6a2b      	ldr	r3, [r5, #32]
		 (UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   1c406:	2b00      	cmp	r3, #0
   1c408:	f040 8148 	bne.w	1c69c <net_6lo_compress+0x448>
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   1c40c:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
   1c410:	2b00      	cmp	r3, #0
   1c412:	f040 8143 	bne.w	1c69c <net_6lo_compress+0x448>
		IPHC[1] |= NET_6LO_IPHC_DAM_11;
   1c416:	7843      	ldrb	r3, [r0, #1]
   1c418:	f043 0303 	orr.w	r3, r3, #3
   1c41c:	7043      	strb	r3, [r0, #1]
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[15], 1);
   1c41e:	68b0      	ldr	r0, [r6, #8]
   1c420:	2201      	movs	r2, #1
   1c422:	4420      	add	r0, r4
   1c424:	f105 0127 	add.w	r1, r5, #39	; 0x27
   1c428:	f7e4 f9b3 	bl	792 <memcpy>
		offset++;
   1c42c:	3401      	adds	r4, #1
   1c42e:	e189      	b.n	1c744 <net_6lo_compress+0x4f0>
		memcpy(&IPHC[offset], ipv6->src.s6_addr,
   1c430:	68b3      	ldr	r3, [r6, #8]
   1c432:	4601      	mov	r1, r0
   1c434:	2210      	movs	r2, #16
   1c436:	1918      	adds	r0, r3, r4
   1c438:	f7e4 f9ab 	bl	792 <memcpy>
		offset += sizeof(struct in6_addr);
   1c43c:	3410      	adds	r4, #16
   1c43e:	e125      	b.n	1c68c <net_6lo_compress+0x438>
	if (net_is_ipv6_ll_addr(&ipv6->dst) &&
   1c440:	8b2a      	ldrh	r2, [r5, #24]
   1c442:	f248 03fe 	movw	r3, #33022	; 0x80fe
   1c446:	429a      	cmp	r2, r3
   1c448:	f040 8090 	bne.w	1c56c <net_6lo_compress+0x318>
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   1c44c:	8b6b      	ldrh	r3, [r5, #26]
   1c44e:	2b00      	cmp	r3, #0
   1c450:	f040 808c 	bne.w	1c56c <net_6lo_compress+0x318>
		 (UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00));
   1c454:	69eb      	ldr	r3, [r5, #28]
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   1c456:	2b00      	cmp	r3, #0
   1c458:	f040 8088 	bne.w	1c56c <net_6lo_compress+0x318>
	return ((UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0xFF)) &&
   1c45c:	6a2b      	ldr	r3, [r5, #32]
   1c45e:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   1c462:	f040 8159 	bne.w	1c718 <net_6lo_compress+0x4c4>
   1c466:	8cab      	ldrh	r3, [r5, #36]	; 0x24
   1c468:	2bfe      	cmp	r3, #254	; 0xfe
   1c46a:	f040 8155 	bne.w	1c718 <net_6lo_compress+0x4c4>
			IPHC[1] |= NET_6LO_IPHC_DAM_10;
   1c46e:	68b2      	ldr	r2, [r6, #8]
   1c470:	7853      	ldrb	r3, [r2, #1]
   1c472:	f043 0302 	orr.w	r3, r3, #2
   1c476:	7053      	strb	r3, [r2, #1]
			memcpy(&IPHC[offset], &ipv6->dst.s6_addr[14], 2);
   1c478:	68b0      	ldr	r0, [r6, #8]
   1c47a:	2202      	movs	r2, #2
   1c47c:	4420      	add	r0, r4
   1c47e:	f105 0126 	add.w	r1, r5, #38	; 0x26
   1c482:	f7e4 f986 	bl	792 <memcpy>
			offset += 2;
   1c486:	3402      	adds	r4, #2
   1c488:	e15c      	b.n	1c744 <net_6lo_compress+0x4f0>
				IPHC[1] |= NET_6LO_IPHC_DAM_11;
   1c48a:	785a      	ldrb	r2, [r3, #1]
   1c48c:	f042 0203 	orr.w	r2, r2, #3
   1c490:	705a      	strb	r2, [r3, #1]
	if (ipv6->nexthdr != IPPROTO_UDP) {
   1c492:	79ab      	ldrb	r3, [r5, #6]
   1c494:	2b11      	cmp	r3, #17
   1c496:	f040 80b0 	bne.w	1c5fa <net_6lo_compress+0x3a6>
		udp = net_udp_get_hdr(pkt, &hdr);
   1c49a:	4669      	mov	r1, sp
   1c49c:	4638      	mov	r0, r7
   1c49e:	f004 fb9f 	bl	20be0 <net_udp_get_hdr>
		if (!udp) {
   1c4a2:	4605      	mov	r5, r0
   1c4a4:	2800      	cmp	r0, #0
   1c4a6:	f43f aee0 	beq.w	1c26a <net_6lo_compress+0x16>
		IPHC[offset] = NET_6LO_NHC_UDP_BARE;
   1c4aa:	68b3      	ldr	r3, [r6, #8]
   1c4ac:	22f0      	movs	r2, #240	; 0xf0
   1c4ae:	551a      	strb	r2, [r3, r4]
	if ((((htons(udp->src_port) >> 4) & 0xFFF) ==
   1c4b0:	8802      	ldrh	r2, [r0, #0]
   1c4b2:	f8d6 e008 	ldr.w	lr, [r6, #8]
   1c4b6:	0213      	lsls	r3, r2, #8
   1c4b8:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   1c4bc:	b29b      	uxth	r3, r3
   1c4be:	f640 720b 	movw	r2, #3851	; 0xf0b
   1c4c2:	ea4f 1c13 	mov.w	ip, r3, lsr #4
   1c4c6:	4594      	cmp	ip, r2
   1c4c8:	f104 0001 	add.w	r0, r4, #1
   1c4cc:	886a      	ldrh	r2, [r5, #2]
   1c4ce:	d156      	bne.n	1c57e <net_6lo_compress+0x32a>
	    (((htons(udp->dst_port) >> 4) & 0xFFF) ==
   1c4d0:	0211      	lsls	r1, r2, #8
   1c4d2:	ea41 2112 	orr.w	r1, r1, r2, lsr #8
	    NET_6LO_NHC_UDP_4_BIT_PORT) &&
   1c4d6:	f3c1 110b 	ubfx	r1, r1, #4, #12
   1c4da:	4561      	cmp	r1, ip
   1c4dc:	d14f      	bne.n	1c57e <net_6lo_compress+0x32a>
		IPHC[offset] |= NET_6LO_NHC_UDP_PORT_11;
   1c4de:	f81e 3004 	ldrb.w	r3, [lr, r4]
   1c4e2:	f043 0303 	orr.w	r3, r3, #3
   1c4e6:	f80e 3004 	strb.w	r3, [lr, r4]
		tmp = (u8_t)(htons(udp->src_port));
   1c4ea:	882b      	ldrh	r3, [r5, #0]
   1c4ec:	0a1a      	lsrs	r2, r3, #8
		tmp |= (((u8_t)(htons(udp->dst_port))) & 0x0F);
   1c4ee:	886b      	ldrh	r3, [r5, #2]
   1c4f0:	f3c3 2303 	ubfx	r3, r3, #8, #4
   1c4f4:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
		IPHC[offset++] = tmp;
   1c4f8:	b2c0      	uxtb	r0, r0
   1c4fa:	68b2      	ldr	r2, [r6, #8]
   1c4fc:	3402      	adds	r4, #2
   1c4fe:	5413      	strb	r3, [r2, r0]
   1c500:	fa5f f884 	uxtb.w	r8, r4
	memcpy(&IPHC[offset], &udp->chksum, 2);
   1c504:	68b0      	ldr	r0, [r6, #8]
   1c506:	1da9      	adds	r1, r5, #6
   1c508:	2202      	movs	r2, #2
   1c50a:	4440      	add	r0, r8
   1c50c:	f7e4 f941 	bl	792 <memcpy>
		net_udp_set_hdr(pkt, udp);
   1c510:	4629      	mov	r1, r5
   1c512:	4638      	mov	r0, r7
   1c514:	f004 fb9d 	bl	20c52 <net_udp_set_hdr>
	offset += 2;
   1c518:	f108 0402 	add.w	r4, r8, #2
   1c51c:	b2e4      	uxtb	r4, r4
		compressed += NET_UDPH_LEN;
   1c51e:	2530      	movs	r5, #48	; 0x30
	net_buf_add(frag, offset);
   1c520:	f106 0808 	add.w	r8, r6, #8
   1c524:	4621      	mov	r1, r4
   1c526:	4640      	mov	r0, r8
   1c528:	f7fc ff3c 	bl	193a4 <net_buf_simple_add>
	memcpy(&IPHC[offset], pkt->frags->data + compressed,
   1c52c:	68bb      	ldr	r3, [r7, #8]
   1c52e:	68b0      	ldr	r0, [r6, #8]
	       pkt->frags->len - compressed);
   1c530:	899a      	ldrh	r2, [r3, #12]
	memcpy(&IPHC[offset], pkt->frags->data + compressed,
   1c532:	6899      	ldr	r1, [r3, #8]
   1c534:	1b52      	subs	r2, r2, r5
   1c536:	4429      	add	r1, r5
   1c538:	4420      	add	r0, r4
   1c53a:	f7e4 f92a 	bl	792 <memcpy>
	net_buf_add(frag, pkt->frags->len - compressed);
   1c53e:	68bb      	ldr	r3, [r7, #8]
   1c540:	8999      	ldrh	r1, [r3, #12]
   1c542:	4640      	mov	r0, r8
   1c544:	1b49      	subs	r1, r1, r5
   1c546:	f7fc ff2d 	bl	193a4 <net_buf_simple_add>
	net_pkt_frag_del(pkt, NULL, pkt->frags);
   1c54a:	68ba      	ldr	r2, [r7, #8]
   1c54c:	2100      	movs	r1, #0
   1c54e:	4638      	mov	r0, r7
   1c550:	f7ff f9b0 	bl	1b8b4 <net_pkt_frag_del>
	net_pkt_frag_insert(pkt, frag);
   1c554:	4638      	mov	r0, r7
   1c556:	4631      	mov	r1, r6
   1c558:	f7ff f9d6 	bl	1b908 <net_pkt_frag_insert>
	net_pkt_compact(pkt);
   1c55c:	4638      	mov	r0, r7
   1c55e:	f7ff fa40 	bl	1b9e2 <net_pkt_compact>
	if (fragment) {
   1c562:	f1b9 0f00 	cmp.w	r9, #0
   1c566:	d14a      	bne.n	1c5fe <net_6lo_compress+0x3aa>
	return true;
   1c568:	2001      	movs	r0, #1
   1c56a:	e67f      	b.n	1c26c <net_6lo_compress+0x18>
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[0], 16);
   1c56c:	68b0      	ldr	r0, [r6, #8]
   1c56e:	4420      	add	r0, r4
   1c570:	2210      	movs	r2, #16
   1c572:	f105 0118 	add.w	r1, r5, #24
   1c576:	f7e4 f90c 	bl	792 <memcpy>
		offset += 16;
   1c57a:	3410      	adds	r4, #16
   1c57c:	e0e2      	b.n	1c744 <net_6lo_compress+0x4f0>
	} else if (((htons(udp->dst_port) >> 8) & 0xFF) ==
   1c57e:	b2d2      	uxtb	r2, r2
   1c580:	2af0      	cmp	r2, #240	; 0xf0
   1c582:	d117      	bne.n	1c5b4 <net_6lo_compress+0x360>
		IPHC[offset] |= NET_6LO_NHC_UDP_PORT_01;
   1c584:	f81e 3004 	ldrb.w	r3, [lr, r4]
   1c588:	f043 0301 	orr.w	r3, r3, #1
   1c58c:	f80e 3004 	strb.w	r3, [lr, r4]
		memcpy(&IPHC[offset], &udp->src_port, 2);
   1c590:	68b3      	ldr	r3, [r6, #8]
   1c592:	2202      	movs	r2, #2
   1c594:	fa53 f080 	uxtab	r0, r3, r0
   1c598:	4629      	mov	r1, r5
   1c59a:	f7e4 f8fa 	bl	792 <memcpy>
		IPHC[offset++] = (u8_t)(htons(udp->dst_port));
   1c59e:	f104 0804 	add.w	r8, r4, #4
   1c5a2:	886b      	ldrh	r3, [r5, #2]
   1c5a4:	68b2      	ldr	r2, [r6, #8]
		offset += 2;
   1c5a6:	3403      	adds	r4, #3
		IPHC[offset++] = (u8_t)(htons(udp->dst_port));
   1c5a8:	b2e4      	uxtb	r4, r4
   1c5aa:	0a1b      	lsrs	r3, r3, #8
   1c5ac:	fa5f f888 	uxtb.w	r8, r8
   1c5b0:	5513      	strb	r3, [r2, r4]
   1c5b2:	e7a7      	b.n	1c504 <net_6lo_compress+0x2b0>
	} else if (((htons(udp->src_port) >> 8) & 0xFF) ==
   1c5b4:	0a1b      	lsrs	r3, r3, #8
   1c5b6:	2bf0      	cmp	r3, #240	; 0xf0
   1c5b8:	d117      	bne.n	1c5ea <net_6lo_compress+0x396>
		IPHC[offset] |= NET_6LO_NHC_UDP_PORT_10;
   1c5ba:	f81e 3004 	ldrb.w	r3, [lr, r4]
   1c5be:	f043 0302 	orr.w	r3, r3, #2
   1c5c2:	f80e 3004 	strb.w	r3, [lr, r4]
		IPHC[offset++] = (u8_t)(htons(udp->src_port));
   1c5c6:	4629      	mov	r1, r5
   1c5c8:	68b2      	ldr	r2, [r6, #8]
   1c5ca:	f831 3b02 	ldrh.w	r3, [r1], #2
   1c5ce:	b2c0      	uxtb	r0, r0
   1c5d0:	0a1b      	lsrs	r3, r3, #8
   1c5d2:	5413      	strb	r3, [r2, r0]
		memcpy(&IPHC[offset], &udp->dst_port, 2);
   1c5d4:	68b3      	ldr	r3, [r6, #8]
		IPHC[offset++] = (u8_t)(htons(udp->src_port));
   1c5d6:	1ca0      	adds	r0, r4, #2
		memcpy(&IPHC[offset], &udp->dst_port, 2);
   1c5d8:	2202      	movs	r2, #2
   1c5da:	fa53 f080 	uxtab	r0, r3, r0
   1c5de:	f7e4 f8d8 	bl	792 <memcpy>
		offset += 2;
   1c5e2:	3404      	adds	r4, #4
		offset += 4;
   1c5e4:	fa5f f884 	uxtb.w	r8, r4
   1c5e8:	e78c      	b.n	1c504 <net_6lo_compress+0x2b0>
		memcpy(&IPHC[offset], &udp->src_port, 4);
   1c5ea:	2204      	movs	r2, #4
   1c5ec:	4629      	mov	r1, r5
   1c5ee:	fa5e f080 	uxtab	r0, lr, r0
   1c5f2:	f7e4 f8ce 	bl	792 <memcpy>
		offset += 4;
   1c5f6:	3405      	adds	r4, #5
   1c5f8:	e7f4      	b.n	1c5e4 <net_6lo_compress+0x390>
	compressed = NET_IPV6H_LEN;
   1c5fa:	2528      	movs	r5, #40	; 0x28
   1c5fc:	e790      	b.n	1c520 <net_6lo_compress+0x2cc>
		return fragment(pkt, compressed - offset);
   1c5fe:	1b29      	subs	r1, r5, r4
		return fragment(pkt, -1);
   1c600:	4638      	mov	r0, r7
   1c602:	47c8      	blx	r9
   1c604:	e632      	b.n	1c26c <net_6lo_compress+0x18>
	frag = net_pkt_get_frag(pkt, K_FOREVER);
   1c606:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1c60a:	f7ff f8d7 	bl	1b7bc <net_pkt_get_frag>
	if (!frag) {
   1c60e:	4604      	mov	r4, r0
   1c610:	2800      	cmp	r0, #0
   1c612:	f43f ae2a 	beq.w	1c26a <net_6lo_compress+0x16>
	frag->data[0] = NET_6LO_DISPATCH_IPV6;
   1c616:	f850 3f08 	ldr.w	r3, [r0, #8]!
   1c61a:	2241      	movs	r2, #65	; 0x41
   1c61c:	701a      	strb	r2, [r3, #0]
	net_buf_add(frag, 1);
   1c61e:	2101      	movs	r1, #1
   1c620:	f7fc fec0 	bl	193a4 <net_buf_simple_add>
	net_pkt_frag_insert(pkt, frag);
   1c624:	4638      	mov	r0, r7
   1c626:	4621      	mov	r1, r4
   1c628:	f7ff f96e 	bl	1b908 <net_pkt_frag_insert>
	net_pkt_compact(pkt);
   1c62c:	4638      	mov	r0, r7
   1c62e:	f7ff f9d8 	bl	1b9e2 <net_pkt_compact>
	if (fragment) {
   1c632:	f1b9 0f00 	cmp.w	r9, #0
   1c636:	d097      	beq.n	1c568 <net_6lo_compress+0x314>
		return fragment(pkt, -1);
   1c638:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1c63c:	e7e0      	b.n	1c600 <net_6lo_compress+0x3ac>
	if (net_is_ipv6_ll_addr(&ipv6->src) &&
   1c63e:	892a      	ldrh	r2, [r5, #8]
   1c640:	f248 03fe 	movw	r3, #33022	; 0x80fe
   1c644:	429a      	cmp	r2, r3
   1c646:	f47f aef3 	bne.w	1c430 <net_6lo_compress+0x1dc>
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   1c64a:	896b      	ldrh	r3, [r5, #10]
   1c64c:	2b00      	cmp	r3, #0
   1c64e:	f47f aeef 	bne.w	1c430 <net_6lo_compress+0x1dc>
		 (UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00));
   1c652:	68eb      	ldr	r3, [r5, #12]
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   1c654:	2b00      	cmp	r3, #0
   1c656:	f47f aeeb 	bne.w	1c430 <net_6lo_compress+0x1dc>
	return ((UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0xFF)) &&
   1c65a:	692b      	ldr	r3, [r5, #16]
   1c65c:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   1c660:	f43f aea5 	beq.w	1c3ae <net_6lo_compress+0x15a>
			if (net_ipv6_addr_based_on_ll(&ipv6->src,
   1c664:	f107 0120 	add.w	r1, r7, #32
   1c668:	f7ff fd95 	bl	1c196 <net_ipv6_addr_based_on_ll>
   1c66c:	68b3      	ldr	r3, [r6, #8]
   1c66e:	2800      	cmp	r0, #0
   1c670:	f47f aeaf 	bne.w	1c3d2 <net_6lo_compress+0x17e>
				IPHC[1] |= NET_6LO_IPHC_SAM_01;
   1c674:	785a      	ldrb	r2, [r3, #1]
   1c676:	f042 0210 	orr.w	r2, r2, #16
   1c67a:	705a      	strb	r2, [r3, #1]
				memcpy(&IPHC[offset], &ipv6->src.s6_addr[8], 8);
   1c67c:	68b0      	ldr	r0, [r6, #8]
   1c67e:	2208      	movs	r2, #8
   1c680:	4420      	add	r0, r4
   1c682:	f105 0110 	add.w	r1, r5, #16
   1c686:	f7e4 f884 	bl	792 <memcpy>
				offset += 8;
   1c68a:	3408      	adds	r4, #8
		offset += sizeof(struct in6_addr);
   1c68c:	b2e4      	uxtb	r4, r4
	if (!offset) {
   1c68e:	2c00      	cmp	r4, #0
   1c690:	f47f aea3 	bne.w	1c3da <net_6lo_compress+0x186>
		net_pkt_frag_unref(frag);
   1c694:	4630      	mov	r0, r6
   1c696:	f7ff f8f2 	bl	1b87e <net_pkt_frag_unref>
   1c69a:	e5e6      	b.n	1c26a <net_6lo_compress+0x16>
	return ((UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   1c69c:	69eb      	ldr	r3, [r5, #28]
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   1c69e:	2b00      	cmp	r3, #0
   1c6a0:	f47f af65 	bne.w	1c56e <net_6lo_compress+0x31a>
   1c6a4:	6a2b      	ldr	r3, [r5, #32]
	return ((UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   1c6a6:	b913      	cbnz	r3, 1c6ae <net_6lo_compress+0x45a>
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   1c6a8:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   1c6ac:	b1f3      	cbz	r3, 1c6ec <net_6lo_compress+0x498>
	return ((UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   1c6ae:	8c2b      	ldrh	r3, [r5, #32]
   1c6b0:	2b00      	cmp	r3, #0
   1c6b2:	f47f af5c 	bne.w	1c56e <net_6lo_compress+0x31a>
		 (UNALIGNED_GET(&addr->s6_addr16[4]) == 0x00) &&
   1c6b6:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
   1c6ba:	2b00      	cmp	r3, #0
   1c6bc:	f47f af57 	bne.w	1c56e <net_6lo_compress+0x31a>
		IPHC[1] |= NET_6LO_IPHC_DAM_01;
   1c6c0:	7843      	ldrb	r3, [r0, #1]
   1c6c2:	f043 0301 	orr.w	r3, r3, #1
   1c6c6:	7043      	strb	r3, [r0, #1]
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[1], 1);
   1c6c8:	68b0      	ldr	r0, [r6, #8]
   1c6ca:	2201      	movs	r2, #1
   1c6cc:	f105 0119 	add.w	r1, r5, #25
   1c6d0:	4420      	add	r0, r4
   1c6d2:	f7e4 f85e 	bl	792 <memcpy>
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[11], 5);
   1c6d6:	68b3      	ldr	r3, [r6, #8]
		offset++;
   1c6d8:	1c60      	adds	r0, r4, #1
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[11], 5);
   1c6da:	2205      	movs	r2, #5
   1c6dc:	f105 0123 	add.w	r1, r5, #35	; 0x23
   1c6e0:	fa53 f080 	uxtab	r0, r3, r0
   1c6e4:	f7e4 f855 	bl	792 <memcpy>
		offset += 5;
   1c6e8:	3406      	adds	r4, #6
   1c6ea:	e02b      	b.n	1c744 <net_6lo_compress+0x4f0>
		IPHC[1] |= NET_6LO_IPHC_DAM_10;
   1c6ec:	7843      	ldrb	r3, [r0, #1]
   1c6ee:	f043 0302 	orr.w	r3, r3, #2
   1c6f2:	7043      	strb	r3, [r0, #1]
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[1], 1);
   1c6f4:	68b0      	ldr	r0, [r6, #8]
   1c6f6:	2201      	movs	r2, #1
   1c6f8:	f105 0119 	add.w	r1, r5, #25
   1c6fc:	4420      	add	r0, r4
   1c6fe:	f7e4 f848 	bl	792 <memcpy>
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[13], 3);
   1c702:	68b3      	ldr	r3, [r6, #8]
		offset++;
   1c704:	1c60      	adds	r0, r4, #1
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[13], 3);
   1c706:	2203      	movs	r2, #3
   1c708:	f105 0125 	add.w	r1, r5, #37	; 0x25
   1c70c:	fa53 f080 	uxtab	r0, r3, r0
   1c710:	f7e4 f83f 	bl	792 <memcpy>
		offset += 3;
   1c714:	3404      	adds	r4, #4
   1c716:	e015      	b.n	1c744 <net_6lo_compress+0x4f0>
			if (net_ipv6_addr_based_on_ll(&ipv6->dst,
   1c718:	f107 0128 	add.w	r1, r7, #40	; 0x28
   1c71c:	f105 0018 	add.w	r0, r5, #24
   1c720:	f7ff fd39 	bl	1c196 <net_ipv6_addr_based_on_ll>
   1c724:	68b3      	ldr	r3, [r6, #8]
   1c726:	2800      	cmp	r0, #0
   1c728:	f47f aeaf 	bne.w	1c48a <net_6lo_compress+0x236>
				IPHC[1] |= NET_6LO_IPHC_DAM_01;
   1c72c:	785a      	ldrb	r2, [r3, #1]
   1c72e:	f042 0201 	orr.w	r2, r2, #1
   1c732:	705a      	strb	r2, [r3, #1]
				memcpy(&IPHC[offset], &ipv6->dst.s6_addr[8], 8);
   1c734:	68b0      	ldr	r0, [r6, #8]
   1c736:	2208      	movs	r2, #8
   1c738:	4420      	add	r0, r4
   1c73a:	f105 0120 	add.w	r1, r5, #32
   1c73e:	f7e4 f828 	bl	792 <memcpy>
				offset += 8;
   1c742:	3408      	adds	r4, #8
		offset += 16;
   1c744:	b2e4      	uxtb	r4, r4
	if (!offset) {
   1c746:	2c00      	cmp	r4, #0
   1c748:	f47f aea3 	bne.w	1c492 <net_6lo_compress+0x23e>
   1c74c:	e7a2      	b.n	1c694 <net_6lo_compress+0x440>

0001c74e <net_6lo_uncompress>:

bool net_6lo_uncompress(struct net_pkt *pkt)
{
   1c74e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NET_ASSERT(pkt && pkt->frags);

	if ((pkt->frags->data[0] & NET_6LO_DISPATCH_IPHC) ==
   1c752:	6884      	ldr	r4, [r0, #8]
   1c754:	68a3      	ldr	r3, [r4, #8]
   1c756:	781a      	ldrb	r2, [r3, #0]
   1c758:	f002 0860 	and.w	r8, r2, #96	; 0x60
   1c75c:	f1b8 0f60 	cmp.w	r8, #96	; 0x60
{
   1c760:	4606      	mov	r6, r0
	if ((pkt->frags->data[0] & NET_6LO_DISPATCH_IPHC) ==
   1c762:	f040 81f8 	bne.w	1cb56 <net_6lo_uncompress+0x408>
	if (CIPHC[1] & NET_6LO_IPHC_CID_1) {
   1c766:	f993 3001 	ldrsb.w	r3, [r3, #1]
   1c76a:	2b00      	cmp	r3, #0
   1c76c:	da03      	bge.n	1c776 <net_6lo_uncompress+0x28>
	return false;
   1c76e:	2000      	movs	r0, #0
	}

	NET_DBG("pkt %p is not compressed", pkt);

	return true;
}
   1c770:	b003      	add	sp, #12
   1c772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_pkt_get_frag(pkt, NET_6LO_RX_PKT_TIMEOUT);
   1c776:	2164      	movs	r1, #100	; 0x64
   1c778:	f7ff f820 	bl	1b7bc <net_pkt_get_frag>
	if (!frag) {
   1c77c:	4607      	mov	r7, r0
   1c77e:	2800      	cmp	r0, #0
   1c780:	d0f5      	beq.n	1c76e <net_6lo_uncompress+0x20>
	ipv6 = (struct net_ipv6_hdr *)(frag->data);
   1c782:	6885      	ldr	r5, [r0, #8]
	pkt->ip_hdr_len = len;
   1c784:	2328      	movs	r3, #40	; 0x28
	ipv6->vtc = 0x60;
   1c786:	f885 8000 	strb.w	r8, [r5]
   1c78a:	f886 3035 	strb.w	r3, [r6, #53]	; 0x35
	switch (CIPHC[0] & NET_6LO_IPHC_TF_11) {
   1c78e:	68b3      	ldr	r3, [r6, #8]
   1c790:	6899      	ldr	r1, [r3, #8]
   1c792:	780b      	ldrb	r3, [r1, #0]
   1c794:	f003 0318 	and.w	r3, r3, #24
   1c798:	2b08      	cmp	r3, #8
   1c79a:	d054      	beq.n	1c846 <net_6lo_uncompress+0xf8>
   1c79c:	d802      	bhi.n	1c7a4 <net_6lo_uncompress+0x56>
   1c79e:	b153      	cbz	r3, 1c7b6 <net_6lo_uncompress+0x68>
   1c7a0:	2402      	movs	r4, #2
   1c7a2:	e01d      	b.n	1c7e0 <net_6lo_uncompress+0x92>
   1c7a4:	2b10      	cmp	r3, #16
   1c7a6:	d05c      	beq.n	1c862 <net_6lo_uncompress+0x114>
   1c7a8:	2b18      	cmp	r3, #24
   1c7aa:	d1f9      	bne.n	1c7a0 <net_6lo_uncompress+0x52>
		ipv6->tcflow = 0;
   1c7ac:	2300      	movs	r3, #0
   1c7ae:	706b      	strb	r3, [r5, #1]
		ipv6->flow = 0;
   1c7b0:	70ab      	strb	r3, [r5, #2]
   1c7b2:	70eb      	strb	r3, [r5, #3]
   1c7b4:	e7f4      	b.n	1c7a0 <net_6lo_uncompress+0x52>
		tcl = CIPHC[offset++];
   1c7b6:	788a      	ldrb	r2, [r1, #2]
		tcl = (tcl >> 6) | (tcl << 2);
   1c7b8:	0093      	lsls	r3, r2, #2
   1c7ba:	ea43 1392 	orr.w	r3, r3, r2, lsr #6
		ipv6->vtc |= ((tcl & 0xF0) >> 4);
   1c7be:	782a      	ldrb	r2, [r5, #0]
		tcl = (tcl >> 6) | (tcl << 2);
   1c7c0:	b2db      	uxtb	r3, r3
		ipv6->vtc |= ((tcl & 0xF0) >> 4);
   1c7c2:	ea42 1213 	orr.w	r2, r2, r3, lsr #4
   1c7c6:	702a      	strb	r2, [r5, #0]
		ipv6->tcflow = ((tcl & 0x0F) << 4) | (CIPHC[offset++] & 0x0F);
   1c7c8:	78ca      	ldrb	r2, [r1, #3]
   1c7ca:	f002 020f 	and.w	r2, r2, #15
   1c7ce:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
		memcpy(&ipv6->flow, &CIPHC[offset], 2);
   1c7d2:	2202      	movs	r2, #2
		ipv6->tcflow = ((tcl & 0x0F) << 4) | (CIPHC[offset++] & 0x0F);
   1c7d4:	706b      	strb	r3, [r5, #1]
		memcpy(&ipv6->flow, &CIPHC[offset], 2);
   1c7d6:	3104      	adds	r1, #4
   1c7d8:	18a8      	adds	r0, r5, r2
   1c7da:	f7e3 ffda 	bl	792 <memcpy>
		offset += 2;
   1c7de:	2406      	movs	r4, #6
	if (!(CIPHC[0] & NET_6LO_IPHC_NH_1)) {
   1c7e0:	68b3      	ldr	r3, [r6, #8]
   1c7e2:	689a      	ldr	r2, [r3, #8]
   1c7e4:	7813      	ldrb	r3, [r2, #0]
   1c7e6:	075b      	lsls	r3, r3, #29
		ipv6->nexthdr = CIPHC[offset];
   1c7e8:	bf5c      	itt	pl
   1c7ea:	5d13      	ldrbpl	r3, [r2, r4]
   1c7ec:	71ab      	strbpl	r3, [r5, #6]
	switch (CIPHC[0] & NET_6LO_IPHC_HLIM255) {
   1c7ee:	7813      	ldrb	r3, [r2, #0]
		offset++;
   1c7f0:	bf58      	it	pl
   1c7f2:	3401      	addpl	r4, #1
	switch (CIPHC[0] & NET_6LO_IPHC_HLIM255) {
   1c7f4:	f003 0303 	and.w	r3, r3, #3
		offset++;
   1c7f8:	bf58      	it	pl
   1c7fa:	b2e4      	uxtbpl	r4, r4
	switch (CIPHC[0] & NET_6LO_IPHC_HLIM255) {
   1c7fc:	2b02      	cmp	r3, #2
   1c7fe:	d040      	beq.n	1c882 <net_6lo_uncompress+0x134>
   1c800:	2b03      	cmp	r3, #3
   1c802:	d041      	beq.n	1c888 <net_6lo_uncompress+0x13a>
   1c804:	2b01      	cmp	r3, #1
   1c806:	d03d      	beq.n	1c884 <net_6lo_uncompress+0x136>
		ipv6->hop_limit = CIPHC[offset++];
   1c808:	5d12      	ldrb	r2, [r2, r4]
   1c80a:	71ea      	strb	r2, [r5, #7]
   1c80c:	1c63      	adds	r3, r4, #1
   1c80e:	b2dc      	uxtb	r4, r3
	memset(&ipv6->src.s6_addr[0], 0, 16);
   1c810:	f105 0908 	add.w	r9, r5, #8
   1c814:	2210      	movs	r2, #16
   1c816:	2100      	movs	r1, #0
   1c818:	4648      	mov	r0, r9
	memset(&ipv6->dst.s6_addr[0], 0, 16);
   1c81a:	f105 0818 	add.w	r8, r5, #24
	memset(&ipv6->src.s6_addr[0], 0, 16);
   1c81e:	f7e3 ffe4 	bl	7ea <memset>
	memset(&ipv6->dst.s6_addr[0], 0, 16);
   1c822:	2100      	movs	r1, #0
   1c824:	2210      	movs	r2, #16
   1c826:	4640      	mov	r0, r8
   1c828:	f7e3 ffdf 	bl	7ea <memset>
	if (CIPHC[1] & NET_6LO_IPHC_SAC_1) {
   1c82c:	68b3      	ldr	r3, [r6, #8]
   1c82e:	6899      	ldr	r1, [r3, #8]
   1c830:	784b      	ldrb	r3, [r1, #1]
   1c832:	f013 0f40 	tst.w	r3, #64	; 0x40
   1c836:	f003 0330 	and.w	r3, r3, #48	; 0x30
   1c83a:	d027      	beq.n	1c88c <net_6lo_uncompress+0x13e>
		if ((CIPHC[1] & NET_6LO_IPHC_SAM_11) == NET_6LO_IPHC_SAM_00) {
   1c83c:	b35b      	cbz	r3, 1c896 <net_6lo_uncompress+0x148>
	net_pkt_frag_unref(frag);
   1c83e:	4638      	mov	r0, r7
   1c840:	f7ff f81d 	bl	1b87e <net_pkt_frag_unref>
   1c844:	e793      	b.n	1c76e <net_6lo_uncompress+0x20>
		tcl = ((CIPHC[offset] & 0xF0) >> 6);
   1c846:	788b      	ldrb	r3, [r1, #2]
		ipv6->tcflow = ((tcl & 0x0F) << 4) | (CIPHC[offset++] & 0x0F);
   1c848:	099a      	lsrs	r2, r3, #6
   1c84a:	f003 030f 	and.w	r3, r3, #15
   1c84e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
		memcpy(&ipv6->flow, &CIPHC[offset], 2);
   1c852:	2202      	movs	r2, #2
		ipv6->tcflow = ((tcl & 0x0F) << 4) | (CIPHC[offset++] & 0x0F);
   1c854:	706b      	strb	r3, [r5, #1]
		memcpy(&ipv6->flow, &CIPHC[offset], 2);
   1c856:	3103      	adds	r1, #3
   1c858:	18a8      	adds	r0, r5, r2
   1c85a:	f7e3 ff9a 	bl	792 <memcpy>
		offset += 2;
   1c85e:	2405      	movs	r4, #5
   1c860:	e7be      	b.n	1c7e0 <net_6lo_uncompress+0x92>
		tcl = CIPHC[offset];
   1c862:	788a      	ldrb	r2, [r1, #2]
		tcl = (tcl >> 6) | (tcl << 2);
   1c864:	0093      	lsls	r3, r2, #2
   1c866:	ea43 1392 	orr.w	r3, r3, r2, lsr #6
		ipv6->vtc |= ((tcl & 0xF0) >> 4);
   1c86a:	782a      	ldrb	r2, [r5, #0]
		tcl = (tcl >> 6) | (tcl << 2);
   1c86c:	b2db      	uxtb	r3, r3
		ipv6->vtc |= ((tcl & 0xF0) >> 4);
   1c86e:	ea42 1213 	orr.w	r2, r2, r3, lsr #4
		ipv6->tcflow = (tcl & 0x0F) << 4;
   1c872:	011b      	lsls	r3, r3, #4
   1c874:	706b      	strb	r3, [r5, #1]
		ipv6->flow = 0;
   1c876:	2300      	movs	r3, #0
		ipv6->vtc |= ((tcl & 0xF0) >> 4);
   1c878:	702a      	strb	r2, [r5, #0]
		ipv6->flow = 0;
   1c87a:	70ab      	strb	r3, [r5, #2]
   1c87c:	70eb      	strb	r3, [r5, #3]
		offset++;
   1c87e:	2403      	movs	r4, #3
   1c880:	e7ae      	b.n	1c7e0 <net_6lo_uncompress+0x92>
		ipv6->hop_limit = 64;
   1c882:	2340      	movs	r3, #64	; 0x40
		ipv6->hop_limit = 255;
   1c884:	71eb      	strb	r3, [r5, #7]
   1c886:	e7c3      	b.n	1c810 <net_6lo_uncompress+0xc2>
   1c888:	23ff      	movs	r3, #255	; 0xff
   1c88a:	e7fb      	b.n	1c884 <net_6lo_uncompress+0x136>
	switch (CIPHC[1] & NET_6LO_IPHC_SAM_11) {
   1c88c:	b2db      	uxtb	r3, r3
   1c88e:	2b10      	cmp	r3, #16
   1c890:	d02b      	beq.n	1c8ea <net_6lo_uncompress+0x19c>
   1c892:	d818      	bhi.n	1c8c6 <net_6lo_uncompress+0x178>
   1c894:	b30b      	cbz	r3, 1c8da <net_6lo_uncompress+0x18c>
	if (CIPHC[1] & NET_6LO_IPHC_M_1) {
   1c896:	68b3      	ldr	r3, [r6, #8]
   1c898:	6899      	ldr	r1, [r3, #8]
   1c89a:	784a      	ldrb	r2, [r1, #1]
   1c89c:	0710      	lsls	r0, r2, #28
   1c89e:	f140 80e4 	bpl.w	1ca6a <net_6lo_uncompress+0x31c>
	if (CIPHC[1] & NET_6LO_IPHC_DAC_1) {
   1c8a2:	0753      	lsls	r3, r2, #29
   1c8a4:	f100 810d 	bmi.w	1cac2 <net_6lo_uncompress+0x374>
	switch (CIPHC[1] & NET_6LO_IPHC_DAM_11) {
   1c8a8:	f002 0203 	and.w	r2, r2, #3
   1c8ac:	2a02      	cmp	r2, #2
   1c8ae:	d046      	beq.n	1c93e <net_6lo_uncompress+0x1f0>
   1c8b0:	2a03      	cmp	r2, #3
   1c8b2:	d052      	beq.n	1c95a <net_6lo_uncompress+0x20c>
   1c8b4:	2a01      	cmp	r2, #1
   1c8b6:	d033      	beq.n	1c920 <net_6lo_uncompress+0x1d2>
		memcpy(&ipv6->dst.s6_addr[0], &CIPHC[offset], 16);
   1c8b8:	2210      	movs	r2, #16
   1c8ba:	4421      	add	r1, r4
		memcpy(&ipv6->dst.s6_addr[0], &CIPHC[offset], 16);
   1c8bc:	4640      	mov	r0, r8
   1c8be:	f7e3 ff68 	bl	792 <memcpy>
		offset += 16;
   1c8c2:	3410      	adds	r4, #16
   1c8c4:	e039      	b.n	1c93a <net_6lo_uncompress+0x1ec>
	switch (CIPHC[1] & NET_6LO_IPHC_SAM_11) {
   1c8c6:	2b20      	cmp	r3, #32
   1c8c8:	d01b      	beq.n	1c902 <net_6lo_uncompress+0x1b4>
   1c8ca:	2b30      	cmp	r3, #48	; 0x30
   1c8cc:	d1e3      	bne.n	1c896 <net_6lo_uncompress+0x148>
		net_ipv6_addr_create_iid(&ipv6->src, net_pkt_ll_src(pkt));
   1c8ce:	f106 0120 	add.w	r1, r6, #32
   1c8d2:	4648      	mov	r0, r9
   1c8d4:	f7ff fc1e 	bl	1c114 <net_ipv6_addr_create_iid>
   1c8d8:	e7dd      	b.n	1c896 <net_6lo_uncompress+0x148>
		memcpy(ipv6->src.s6_addr, &CIPHC[offset], 16);
   1c8da:	4421      	add	r1, r4
   1c8dc:	2210      	movs	r2, #16
   1c8de:	4648      	mov	r0, r9
   1c8e0:	f7e3 ff57 	bl	792 <memcpy>
		offset += 16;
   1c8e4:	3410      	adds	r4, #16
		offset += 2;
   1c8e6:	b2e4      	uxtb	r4, r4
   1c8e8:	e7d5      	b.n	1c896 <net_6lo_uncompress+0x148>
		ipv6->src.s6_addr[0] = 0xFE;
   1c8ea:	23fe      	movs	r3, #254	; 0xfe
   1c8ec:	722b      	strb	r3, [r5, #8]
		ipv6->src.s6_addr[1] = 0x80;
   1c8ee:	2380      	movs	r3, #128	; 0x80
		memcpy(&ipv6->src.s6_addr[8], &CIPHC[offset], 8);
   1c8f0:	4421      	add	r1, r4
		ipv6->src.s6_addr[1] = 0x80;
   1c8f2:	726b      	strb	r3, [r5, #9]
		memcpy(&ipv6->src.s6_addr[8], &CIPHC[offset], 8);
   1c8f4:	2208      	movs	r2, #8
   1c8f6:	f105 0010 	add.w	r0, r5, #16
   1c8fa:	f7e3 ff4a 	bl	792 <memcpy>
		offset += 8;
   1c8fe:	3408      	adds	r4, #8
   1c900:	e7f1      	b.n	1c8e6 <net_6lo_uncompress+0x198>
		ipv6->src.s6_addr[1] = 0x80;
   1c902:	2280      	movs	r2, #128	; 0x80
		ipv6->src.s6_addr[0] = 0xFE;
   1c904:	23fe      	movs	r3, #254	; 0xfe
		ipv6->src.s6_addr[1] = 0x80;
   1c906:	726a      	strb	r2, [r5, #9]
		ipv6->src.s6_addr[11] = 0xFF;
   1c908:	22ff      	movs	r2, #255	; 0xff
   1c90a:	74ea      	strb	r2, [r5, #19]
		memcpy(&ipv6->src.s6_addr[14], &CIPHC[offset], 2);
   1c90c:	4421      	add	r1, r4
		ipv6->src.s6_addr[0] = 0xFE;
   1c90e:	722b      	strb	r3, [r5, #8]
		ipv6->src.s6_addr[12] = 0xFE;
   1c910:	752b      	strb	r3, [r5, #20]
		memcpy(&ipv6->src.s6_addr[14], &CIPHC[offset], 2);
   1c912:	2202      	movs	r2, #2
   1c914:	f105 0016 	add.w	r0, r5, #22
   1c918:	f7e3 ff3b 	bl	792 <memcpy>
		offset += 2;
   1c91c:	3402      	adds	r4, #2
   1c91e:	e7e2      	b.n	1c8e6 <net_6lo_uncompress+0x198>
		ipv6->dst.s6_addr[0] = 0xFF;
   1c920:	23ff      	movs	r3, #255	; 0xff
   1c922:	762b      	strb	r3, [r5, #24]
		ipv6->dst.s6_addr[1] = CIPHC[offset++];
   1c924:	5d0b      	ldrb	r3, [r1, r4]
   1c926:	766b      	strb	r3, [r5, #25]
   1c928:	1c63      	adds	r3, r4, #1
		memcpy(&ipv6->dst.s6_addr[11], &CIPHC[offset], 5);
   1c92a:	2205      	movs	r2, #5
   1c92c:	fa51 f183 	uxtab	r1, r1, r3
   1c930:	f105 0023 	add.w	r0, r5, #35	; 0x23
   1c934:	f7e3 ff2d 	bl	792 <memcpy>
		offset += 5;
   1c938:	3406      	adds	r4, #6
		offset += 2;
   1c93a:	b2e4      	uxtb	r4, r4
   1c93c:	e016      	b.n	1c96c <net_6lo_uncompress+0x21e>
		ipv6->dst.s6_addr[0] = 0xFF;
   1c93e:	23ff      	movs	r3, #255	; 0xff
   1c940:	762b      	strb	r3, [r5, #24]
		ipv6->dst.s6_addr[1] = CIPHC[offset++];
   1c942:	5d0b      	ldrb	r3, [r1, r4]
   1c944:	766b      	strb	r3, [r5, #25]
   1c946:	1c63      	adds	r3, r4, #1
		memcpy(&ipv6->dst.s6_addr[13], &CIPHC[offset], 3);
   1c948:	2203      	movs	r2, #3
   1c94a:	fa51 f183 	uxtab	r1, r1, r3
   1c94e:	f105 0025 	add.w	r0, r5, #37	; 0x25
   1c952:	f7e3 ff1e 	bl	792 <memcpy>
		offset += 3;
   1c956:	3404      	adds	r4, #4
   1c958:	e7ef      	b.n	1c93a <net_6lo_uncompress+0x1ec>
		ipv6->dst.s6_addr[0] = 0xFF;
   1c95a:	23ff      	movs	r3, #255	; 0xff
   1c95c:	762b      	strb	r3, [r5, #24]
		ipv6->dst.s6_addr[1] = 0x02;
   1c95e:	2302      	movs	r3, #2
   1c960:	766b      	strb	r3, [r5, #25]
		ipv6->dst.s6_addr[15] = CIPHC[offset++];
   1c962:	5d0a      	ldrb	r2, [r1, r4]
   1c964:	f885 2027 	strb.w	r2, [r5, #39]	; 0x27
   1c968:	1c63      	adds	r3, r4, #1
   1c96a:	b2dc      	uxtb	r4, r3
	net_buf_add(frag, NET_IPV6H_LEN);
   1c96c:	f107 0308 	add.w	r3, r7, #8
   1c970:	2128      	movs	r1, #40	; 0x28
   1c972:	4618      	mov	r0, r3
   1c974:	9301      	str	r3, [sp, #4]
   1c976:	f7fc fd15 	bl	193a4 <net_buf_simple_add>
	if (!(CIPHC[0] & NET_6LO_IPHC_NH_1)) {
   1c97a:	68b3      	ldr	r3, [r6, #8]
   1c97c:	6899      	ldr	r1, [r3, #8]
   1c97e:	f891 8000 	ldrb.w	r8, [r1]
   1c982:	f018 0804 	ands.w	r8, r8, #4
   1c986:	f000 80d0 	beq.w	1cb2a <net_6lo_uncompress+0x3dc>
	if ((CIPHC[offset] & 0xF0) != NET_6LO_NHC_UDP_BARE) {
   1c98a:	5d0b      	ldrb	r3, [r1, r4]
   1c98c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   1c990:	2bf0      	cmp	r3, #240	; 0xf0
   1c992:	f47f af54 	bne.w	1c83e <net_6lo_uncompress+0xf0>
	ipv6->nexthdr = IPPROTO_UDP;
   1c996:	2311      	movs	r3, #17
   1c998:	71ab      	strb	r3, [r5, #6]
	chksum = CIPHC[offset] & NET_6LO_NHC_UDP_CHKSUM_1;
   1c99a:	5d0a      	ldrb	r2, [r1, r4]
	udp = (struct net_udp_hdr *)(frag->data + NET_IPV6H_LEN);
   1c99c:	f8d7 b008 	ldr.w	fp, [r7, #8]
	chksum = CIPHC[offset] & NET_6LO_NHC_UDP_CHKSUM_1;
   1c9a0:	f002 0808 	and.w	r8, r2, #8
	switch (CIPHC[offset++] & NET_6LO_NHC_UDP_PORT_11) {
   1c9a4:	f002 0203 	and.w	r2, r2, #3
   1c9a8:	1c60      	adds	r0, r4, #1
   1c9aa:	2a02      	cmp	r2, #2
	udp = (struct net_udp_hdr *)(frag->data + NET_IPV6H_LEN);
   1c9ac:	f10b 0928 	add.w	r9, fp, #40	; 0x28
	switch (CIPHC[offset++] & NET_6LO_NHC_UDP_PORT_11) {
   1c9b0:	b2c0      	uxtb	r0, r0
   1c9b2:	f000 8097 	beq.w	1cae4 <net_6lo_uncompress+0x396>
   1c9b6:	2a03      	cmp	r2, #3
   1c9b8:	f000 80a2 	beq.w	1cb00 <net_6lo_uncompress+0x3b2>
   1c9bc:	2a01      	cmp	r2, #1
   1c9be:	4401      	add	r1, r0
   1c9c0:	f104 0a03 	add.w	sl, r4, #3
		memcpy(&udp->src_port, &CIPHC[offset], 2);
   1c9c4:	f04f 0202 	mov.w	r2, #2
   1c9c8:	4648      	mov	r0, r9
	switch (CIPHC[offset++] & NET_6LO_NHC_UDP_PORT_11) {
   1c9ca:	d07c      	beq.n	1cac6 <net_6lo_uncompress+0x378>
		memcpy(&udp->src_port, &CIPHC[offset], 2);
   1c9cc:	f7e3 fee1 	bl	792 <memcpy>
		memcpy(&udp->dst_port, &CIPHC[offset], 2);
   1c9d0:	68b2      	ldr	r2, [r6, #8]
   1c9d2:	6891      	ldr	r1, [r2, #8]
   1c9d4:	f10b 002a 	add.w	r0, fp, #42	; 0x2a
   1c9d8:	2202      	movs	r2, #2
   1c9da:	fa51 f18a 	uxtab	r1, r1, sl
   1c9de:	f7e3 fed8 	bl	792 <memcpy>
		offset += 2;
   1c9e2:	3405      	adds	r4, #5
		offset++;
   1c9e4:	b2e4      	uxtb	r4, r4
	if (!chksum) {
   1c9e6:	f1b8 0f00 	cmp.w	r8, #0
   1c9ea:	d109      	bne.n	1ca00 <net_6lo_uncompress+0x2b2>
		memcpy(&udp->chksum, &CIPHC[offset], 2);
   1c9ec:	68b2      	ldr	r2, [r6, #8]
   1c9ee:	6891      	ldr	r1, [r2, #8]
   1c9f0:	f10b 002e 	add.w	r0, fp, #46	; 0x2e
   1c9f4:	4421      	add	r1, r4
   1c9f6:	2202      	movs	r2, #2
   1c9f8:	f7e3 fecb 	bl	792 <memcpy>
		offset += 2;
   1c9fc:	3402      	adds	r4, #2
   1c9fe:	b2e4      	uxtb	r4, r4
	net_buf_add(frag, NET_UDPH_LEN);
   1ca00:	2108      	movs	r1, #8
   1ca02:	9801      	ldr	r0, [sp, #4]
   1ca04:	f7fc fcce 	bl	193a4 <net_buf_simple_add>
	if (pkt->frags->len < offset) {
   1ca08:	68b3      	ldr	r3, [r6, #8]
   1ca0a:	899a      	ldrh	r2, [r3, #12]
   1ca0c:	fa1f fa84 	uxth.w	sl, r4
   1ca10:	4552      	cmp	r2, sl
   1ca12:	f4ff af14 	bcc.w	1c83e <net_6lo_uncompress+0xf0>
	memmove(pkt->frags->data, pkt->frags->data + offset,
   1ca16:	6898      	ldr	r0, [r3, #8]
   1ca18:	1b12      	subs	r2, r2, r4
   1ca1a:	1901      	adds	r1, r0, r4
   1ca1c:	f7e3 fea1 	bl	762 <memmove>
	pkt->frags->len -= offset;
   1ca20:	68b2      	ldr	r2, [r6, #8]
   1ca22:	8993      	ldrh	r3, [r2, #12]
   1ca24:	eba3 030a 	sub.w	r3, r3, sl
   1ca28:	8193      	strh	r3, [r2, #12]
   1ca2a:	f896 2034 	ldrb.w	r2, [r6, #52]	; 0x34
	if (net_pkt_ll_reserve(pkt)) {
   1ca2e:	b13a      	cbz	r2, 1ca40 <net_6lo_uncompress+0x2f2>
	return pkt->frags->data;
   1ca30:	68b3      	ldr	r3, [r6, #8]
	return net_pkt_ip_data(pkt) - net_pkt_ll_reserve(pkt);
   1ca32:	6899      	ldr	r1, [r3, #8]
		memcpy(frag->data - net_pkt_ll_reserve(pkt),
   1ca34:	68bb      	ldr	r3, [r7, #8]
   1ca36:	4250      	negs	r0, r2
   1ca38:	4401      	add	r1, r0
   1ca3a:	4418      	add	r0, r3
   1ca3c:	f7e3 fea9 	bl	792 <memcpy>
	net_pkt_frag_insert(pkt, frag);
   1ca40:	4639      	mov	r1, r7
   1ca42:	4630      	mov	r0, r6
   1ca44:	f7fe ff60 	bl	1b908 <net_pkt_frag_insert>
	net_pkt_compact(pkt);
   1ca48:	4630      	mov	r0, r6
   1ca4a:	f7fe ffca 	bl	1b9e2 <net_pkt_compact>
   1ca4e:	68b2      	ldr	r2, [r6, #8]
	size_t bytes = 0;
   1ca50:	2300      	movs	r3, #0
	while (buf) {
   1ca52:	2a00      	cmp	r2, #0
   1ca54:	d16b      	bne.n	1cb2e <net_6lo_uncompress+0x3e0>
	len = net_pkt_get_len(pkt) - NET_IPV6H_LEN;
   1ca56:	3b28      	subs	r3, #40	; 0x28
	if (ipv6->nexthdr == IPPROTO_UDP && udp) {
   1ca58:	79a9      	ldrb	r1, [r5, #6]
	len = net_pkt_get_len(pkt) - NET_IPV6H_LEN;
   1ca5a:	b29b      	uxth	r3, r3
	ipv6->len[0] = len >> 8;
   1ca5c:	0a1a      	lsrs	r2, r3, #8
	if (ipv6->nexthdr == IPPROTO_UDP && udp) {
   1ca5e:	2911      	cmp	r1, #17
	ipv6->len[0] = len >> 8;
   1ca60:	712a      	strb	r2, [r5, #4]
	ipv6->len[1] = (u8_t)len;
   1ca62:	716b      	strb	r3, [r5, #5]
	if (ipv6->nexthdr == IPPROTO_UDP && udp) {
   1ca64:	d067      	beq.n	1cb36 <net_6lo_uncompress+0x3e8>
		return uncompress_ipv6_header(pkt);
   1ca66:	2001      	movs	r0, #1
   1ca68:	e682      	b.n	1c770 <net_6lo_uncompress+0x22>
	switch (CIPHC[1] & NET_6LO_IPHC_DAM_11) {
   1ca6a:	f002 0203 	and.w	r2, r2, #3
   1ca6e:	2a02      	cmp	r2, #2
   1ca70:	d011      	beq.n	1ca96 <net_6lo_uncompress+0x348>
   1ca72:	2a03      	cmp	r2, #3
   1ca74:	d01f      	beq.n	1cab6 <net_6lo_uncompress+0x368>
   1ca76:	2a01      	cmp	r2, #1
   1ca78:	4421      	add	r1, r4
   1ca7a:	d001      	beq.n	1ca80 <net_6lo_uncompress+0x332>
		memcpy(&ipv6->dst.s6_addr[0], &CIPHC[offset], 16);
   1ca7c:	2210      	movs	r2, #16
   1ca7e:	e71d      	b.n	1c8bc <net_6lo_uncompress+0x16e>
		ipv6->dst.s6_addr[0] = 0xFE;
   1ca80:	23fe      	movs	r3, #254	; 0xfe
   1ca82:	762b      	strb	r3, [r5, #24]
		ipv6->dst.s6_addr[1] = 0x80;
   1ca84:	2380      	movs	r3, #128	; 0x80
   1ca86:	766b      	strb	r3, [r5, #25]
		memcpy(&ipv6->dst.s6_addr[8], &CIPHC[offset], 8);
   1ca88:	2208      	movs	r2, #8
   1ca8a:	f105 0020 	add.w	r0, r5, #32
   1ca8e:	f7e3 fe80 	bl	792 <memcpy>
		offset += 8;
   1ca92:	3408      	adds	r4, #8
   1ca94:	e751      	b.n	1c93a <net_6lo_uncompress+0x1ec>
		ipv6->dst.s6_addr[1] = 0x80;
   1ca96:	2080      	movs	r0, #128	; 0x80
		ipv6->dst.s6_addr[0] = 0xFE;
   1ca98:	23fe      	movs	r3, #254	; 0xfe
		ipv6->dst.s6_addr[1] = 0x80;
   1ca9a:	7668      	strb	r0, [r5, #25]
		ipv6->dst.s6_addr[11] = 0xFF;
   1ca9c:	20ff      	movs	r0, #255	; 0xff
   1ca9e:	f885 0023 	strb.w	r0, [r5, #35]	; 0x23
		memcpy(&ipv6->dst.s6_addr[14], &CIPHC[offset], 2);
   1caa2:	4421      	add	r1, r4
		ipv6->dst.s6_addr[0] = 0xFE;
   1caa4:	762b      	strb	r3, [r5, #24]
		ipv6->dst.s6_addr[12] = 0xFE;
   1caa6:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
		memcpy(&ipv6->dst.s6_addr[14], &CIPHC[offset], 2);
   1caaa:	f105 0026 	add.w	r0, r5, #38	; 0x26
   1caae:	f7e3 fe70 	bl	792 <memcpy>
		offset += 2;
   1cab2:	3402      	adds	r4, #2
   1cab4:	e741      	b.n	1c93a <net_6lo_uncompress+0x1ec>
		net_ipv6_addr_create_iid(&ipv6->dst, net_pkt_ll_dst(pkt));
   1cab6:	f106 0128 	add.w	r1, r6, #40	; 0x28
   1caba:	4640      	mov	r0, r8
   1cabc:	f7ff fb2a 	bl	1c114 <net_ipv6_addr_create_iid>
   1cac0:	e754      	b.n	1c96c <net_6lo_uncompress+0x21e>
		return 0;
   1cac2:	2400      	movs	r4, #0
   1cac4:	e752      	b.n	1c96c <net_6lo_uncompress+0x21e>
		memcpy(&udp->src_port, &CIPHC[offset], 2);
   1cac6:	f7e3 fe64 	bl	792 <memcpy>
		udp->dst_port = htons(((u16_t)NET_6LO_NHC_UDP_8_BIT_PORT
   1caca:	68b2      	ldr	r2, [r6, #8]
   1cacc:	fa5f fa8a 	uxtb.w	sl, sl
   1cad0:	6892      	ldr	r2, [r2, #8]
   1cad2:	f812 200a 	ldrb.w	r2, [r2, sl]
   1cad6:	0212      	lsls	r2, r2, #8
   1cad8:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
   1cadc:	f8ab 202a 	strh.w	r2, [fp, #42]	; 0x2a
		offset += 2;
   1cae0:	3404      	adds	r4, #4
   1cae2:	e77f      	b.n	1c9e4 <net_6lo_uncompress+0x296>
		udp->src_port = htons(((u16_t)NET_6LO_NHC_UDP_8_BIT_PORT
   1cae4:	5c08      	ldrb	r0, [r1, r0]
   1cae6:	0200      	lsls	r0, r0, #8
   1cae8:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
   1caec:	f8ab 0028 	strh.w	r0, [fp, #40]	; 0x28
		offset++;
   1caf0:	1ca0      	adds	r0, r4, #2
		memcpy(&udp->dst_port, &CIPHC[offset], 2);
   1caf2:	fa51 f180 	uxtab	r1, r1, r0
   1caf6:	f10b 002a 	add.w	r0, fp, #42	; 0x2a
   1cafa:	f7e3 fe4a 	bl	792 <memcpy>
   1cafe:	e7ef      	b.n	1cae0 <net_6lo_uncompress+0x392>
		udp->src_port = htons((NET_6LO_NHC_UDP_4_BIT_PORT << 4) |
   1cb00:	5c0a      	ldrb	r2, [r1, r0]
   1cb02:	0912      	lsrs	r2, r2, #4
   1cb04:	0212      	lsls	r2, r2, #8
   1cb06:	f442 4230 	orr.w	r2, r2, #45056	; 0xb000
   1cb0a:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
   1cb0e:	f8ab 2028 	strh.w	r2, [fp, #40]	; 0x28
		udp->dst_port = htons((NET_6LO_NHC_UDP_4_BIT_PORT << 4) |
   1cb12:	5c0a      	ldrb	r2, [r1, r0]
   1cb14:	0212      	lsls	r2, r2, #8
   1cb16:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
   1cb1a:	f442 4230 	orr.w	r2, r2, #45056	; 0xb000
   1cb1e:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
   1cb22:	f8ab 202a 	strh.w	r2, [fp, #42]	; 0x2a
		offset++;
   1cb26:	3402      	adds	r4, #2
   1cb28:	e75c      	b.n	1c9e4 <net_6lo_uncompress+0x296>
	struct net_udp_hdr *udp = NULL;
   1cb2a:	46c1      	mov	r9, r8
   1cb2c:	e76c      	b.n	1ca08 <net_6lo_uncompress+0x2ba>
		bytes += buf->len;
   1cb2e:	8991      	ldrh	r1, [r2, #12]
		buf = buf->frags;
   1cb30:	6812      	ldr	r2, [r2, #0]
		bytes += buf->len;
   1cb32:	440b      	add	r3, r1
   1cb34:	e78d      	b.n	1ca52 <net_6lo_uncompress+0x304>
	if (ipv6->nexthdr == IPPROTO_UDP && udp) {
   1cb36:	f1b9 0f00 	cmp.w	r9, #0
   1cb3a:	d094      	beq.n	1ca66 <net_6lo_uncompress+0x318>
		udp->len = htons(len);
   1cb3c:	ba5b      	rev16	r3, r3
   1cb3e:	f8a9 3004 	strh.w	r3, [r9, #4]
		if (chksum) {
   1cb42:	f1b8 0f00 	cmp.w	r8, #0
   1cb46:	d08e      	beq.n	1ca66 <net_6lo_uncompress+0x318>
	return net_calc_chksum(pkt, IPPROTO_ICMP);
}

static inline u16_t net_calc_chksum_udp(struct net_pkt *pkt)
{
	return net_calc_chksum(pkt, IPPROTO_UDP);
   1cb48:	4630      	mov	r0, r6
   1cb4a:	f7ff fa80 	bl	1c04e <net_calc_chksum>
			udp->chksum = ~net_calc_chksum_udp(pkt);
   1cb4e:	43c0      	mvns	r0, r0
   1cb50:	f8a9 0006 	strh.w	r0, [r9, #6]
   1cb54:	e787      	b.n	1ca66 <net_6lo_uncompress+0x318>
	} else if ((pkt->frags->data[0] & NET_6LO_DISPATCH_IPV6) ==
   1cb56:	f002 0241 	and.w	r2, r2, #65	; 0x41
   1cb5a:	2a41      	cmp	r2, #65	; 0x41
   1cb5c:	d183      	bne.n	1ca66 <net_6lo_uncompress+0x318>
	memmove(frag->data, frag->data + 1, frag->len - 1);
   1cb5e:	89a2      	ldrh	r2, [r4, #12]
   1cb60:	1c59      	adds	r1, r3, #1
   1cb62:	4618      	mov	r0, r3
   1cb64:	3a01      	subs	r2, #1
   1cb66:	f7e3 fdfc 	bl	762 <memmove>
	frag->len -= 1;
   1cb6a:	89a3      	ldrh	r3, [r4, #12]
   1cb6c:	3b01      	subs	r3, #1
   1cb6e:	81a3      	strh	r3, [r4, #12]
   1cb70:	e779      	b.n	1ca66 <net_6lo_uncompress+0x318>
	...

0001cb74 <net_icmpv6_register_handler>:
	node->next = list->head;
   1cb74:	4b03      	ldr	r3, [pc, #12]	; (1cb84 <net_icmpv6_register_handler+0x10>)
   1cb76:	681a      	ldr	r2, [r3, #0]
   1cb78:	6002      	str	r2, [r0, #0]
	if (!list->tail) {
   1cb7a:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   1cb7c:	6018      	str	r0, [r3, #0]
	if (!list->tail) {
   1cb7e:	b902      	cbnz	r2, 1cb82 <net_icmpv6_register_handler+0xe>
		list->tail = list->head;
   1cb80:	6058      	str	r0, [r3, #4]
   1cb82:	4770      	bx	lr
   1cb84:	200027dc 	.word	0x200027dc

0001cb88 <net_icmpv6_set_chksum>:
#define echo_reply_debug(pkt)
#endif /* CONFIG_NET_DEBUG_ICMPV6 */

struct net_buf *net_icmpv6_set_chksum(struct net_pkt *pkt,
				      struct net_buf *frag)
{
   1cb88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cb8c:	b086      	sub	sp, #24
	struct net_icmp_hdr *icmp_hdr;
	u16_t chksum = 0;
   1cb8e:	2700      	movs	r7, #0
{
   1cb90:	4604      	mov	r4, r0
   1cb92:	460e      	mov	r6, r1
	u16_t chksum = 0;
   1cb94:	f8ad 7014 	strh.w	r7, [sp, #20]
	u16_t pos;

	icmp_hdr = net_pkt_icmp_data(pkt);
   1cb98:	f7ff f8c0 	bl	1bd1c <net_pkt_icmp_data>
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   1cb9c:	2204      	movs	r2, #4
   1cb9e:	4605      	mov	r5, r0
   1cba0:	4601      	mov	r1, r0
   1cba2:	4620      	mov	r0, r4
   1cba4:	f7ff faa6 	bl	1c0f4 <net_header_fits>
   1cba8:	b160      	cbz	r0, 1cbc4 <net_icmpv6_set_chksum+0x3c>
	if (net_icmp_header_fits(pkt, icmp_hdr)) {
   1cbaa:	b15d      	cbz	r5, 1cbc4 <net_icmpv6_set_chksum+0x3c>
		icmp_hdr->chksum = 0;
   1cbac:	70af      	strb	r7, [r5, #2]
   1cbae:	70ef      	strb	r7, [r5, #3]
	return net_calc_chksum(pkt, IPPROTO_ICMPV6);
   1cbb0:	213a      	movs	r1, #58	; 0x3a
   1cbb2:	4620      	mov	r0, r4
   1cbb4:	f7ff fa4b 	bl	1c04e <net_calc_chksum>
		icmp_hdr->chksum = ~net_calc_chksum_icmpv6(pkt);
   1cbb8:	43c0      	mvns	r0, r0
   1cbba:	8068      	strh	r0, [r5, #2]
			     (u8_t *)&chksum, PKT_WAIT_TIME);

	NET_ASSERT(frag);

	return frag;
}
   1cbbc:	4630      	mov	r0, r6
   1cbbe:	b006      	add	sp, #24
   1cbc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			     net_pkt_ipv6_ext_len(pkt) +
   1cbc4:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
	frag = net_pkt_write(pkt, frag, net_pkt_ip_hdr_len(pkt) +
   1cbc8:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
   1cbcc:	2702      	movs	r7, #2
   1cbce:	441a      	add	r2, r3
   1cbd0:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   1cbd4:	ad05      	add	r5, sp, #20
   1cbd6:	f10d 0316 	add.w	r3, sp, #22
   1cbda:	443a      	add	r2, r7
   1cbdc:	4631      	mov	r1, r6
   1cbde:	f8cd 8008 	str.w	r8, [sp, #8]
   1cbe2:	9501      	str	r5, [sp, #4]
   1cbe4:	9700      	str	r7, [sp, #0]
   1cbe6:	4620      	mov	r0, r4
   1cbe8:	f7fe fffc 	bl	1bbe4 <net_pkt_write>
   1cbec:	213a      	movs	r1, #58	; 0x3a
   1cbee:	4606      	mov	r6, r0
   1cbf0:	4620      	mov	r0, r4
   1cbf2:	f7ff fa2c 	bl	1c04e <net_calc_chksum>
	frag = net_pkt_write(pkt, frag, pos - 2, &pos, sizeof(chksum),
   1cbf6:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1cbfa:	f8cd 8008 	str.w	r8, [sp, #8]
	chksum = ~net_calc_chksum_icmpv6(pkt);
   1cbfe:	43c0      	mvns	r0, r0
	frag = net_pkt_write(pkt, frag, pos - 2, &pos, sizeof(chksum),
   1cc00:	3a02      	subs	r2, #2
	chksum = ~net_calc_chksum_icmpv6(pkt);
   1cc02:	f8ad 0014 	strh.w	r0, [sp, #20]
	frag = net_pkt_write(pkt, frag, pos - 2, &pos, sizeof(chksum),
   1cc06:	4631      	mov	r1, r6
   1cc08:	9501      	str	r5, [sp, #4]
   1cc0a:	9700      	str	r7, [sp, #0]
   1cc0c:	f10d 0316 	add.w	r3, sp, #22
   1cc10:	b292      	uxth	r2, r2
   1cc12:	4620      	mov	r0, r4
   1cc14:	f7fe ffe6 	bl	1bbe4 <net_pkt_write>
   1cc18:	4606      	mov	r6, r0
	return frag;
   1cc1a:	e7cf      	b.n	1cbbc <net_icmpv6_set_chksum+0x34>

0001cc1c <net_icmpv6_get_hdr>:

struct net_icmp_hdr *net_icmpv6_get_hdr(struct net_pkt *pkt,
					struct net_icmp_hdr *hdr)
{
   1cc1c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1cc1e:	4606      	mov	r6, r0
   1cc20:	460d      	mov	r5, r1
	/* If the ICMP header can fit the first fragment, then access it
	 * directly (fast path), otherwise read the values one by one
	 * using net_frag_read*() functions (slow path).
	 */

	icmp_hdr = net_pkt_icmp_data(pkt);
   1cc22:	f7ff f87b 	bl	1bd1c <net_pkt_icmp_data>
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   1cc26:	2204      	movs	r2, #4
   1cc28:	4604      	mov	r4, r0
   1cc2a:	4601      	mov	r1, r0
   1cc2c:	4630      	mov	r0, r6
   1cc2e:	f7ff fa61 	bl	1c0f4 <net_header_fits>
   1cc32:	b100      	cbz	r0, 1cc36 <net_icmpv6_get_hdr+0x1a>
	if (net_icmp_header_fits(pkt, icmp_hdr)) {
   1cc34:	bb0c      	cbnz	r4, 1cc7a <net_icmpv6_get_hdr+0x5e>
		return icmp_hdr;
	}

	frag = net_frag_read_u8(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1cc36:	f896 0035 	ldrb.w	r0, [r6, #53]	; 0x35
				net_pkt_ipv6_ext_len(pkt), &pos, &hdr->type);
   1cc3a:	f896 103f 	ldrb.w	r1, [r6, #63]	; 0x3f
static inline struct net_buf *net_frag_read_u8(struct net_buf *frag,
					      u16_t offset,
					      u16_t *pos,
					      u8_t *value)
{
	return net_frag_read(frag, offset, pos, 1, value);
   1cc3e:	9500      	str	r5, [sp, #0]
   1cc40:	4401      	add	r1, r0
   1cc42:	2301      	movs	r3, #1
   1cc44:	f10d 020e 	add.w	r2, sp, #14
   1cc48:	68b0      	ldr	r0, [r6, #8]
   1cc4a:	f7fe ff77 	bl	1bb3c <net_frag_read>
	frag = net_frag_read_u8(frag, pos, &pos, &hdr->code);
   1cc4e:	1c6b      	adds	r3, r5, #1
   1cc50:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1cc54:	9300      	str	r3, [sp, #0]
   1cc56:	f10d 020e 	add.w	r2, sp, #14
   1cc5a:	2301      	movs	r3, #1
   1cc5c:	f7fe ff6e 	bl	1bb3c <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
			     (u8_t *)&hdr->chksum);
   1cc60:	1cab      	adds	r3, r5, #2
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   1cc62:	9300      	str	r3, [sp, #0]
   1cc64:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1cc68:	2302      	movs	r3, #2
   1cc6a:	f10d 020e 	add.w	r2, sp, #14
   1cc6e:	f7fe ff65 	bl	1bb3c <net_frag_read>
	if (!frag) {
		NET_ASSERT(frag);
		return NULL;
   1cc72:	2800      	cmp	r0, #0
   1cc74:	bf14      	ite	ne
   1cc76:	462c      	movne	r4, r5
   1cc78:	2400      	moveq	r4, #0
	}

	return hdr;
}
   1cc7a:	4620      	mov	r0, r4
   1cc7c:	b004      	add	sp, #16
   1cc7e:	bd70      	pop	{r4, r5, r6, pc}

0001cc80 <net_icmpv6_set_hdr>:

struct net_icmp_hdr *net_icmpv6_set_hdr(struct net_pkt *pkt,
					struct net_icmp_hdr *hdr)
{
   1cc80:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cc82:	2204      	movs	r2, #4
   1cc84:	b087      	sub	sp, #28
   1cc86:	4605      	mov	r5, r0
   1cc88:	460c      	mov	r4, r1
   1cc8a:	f7ff fa33 	bl	1c0f4 <net_header_fits>
   1cc8e:	b100      	cbz	r0, 1cc92 <net_icmpv6_set_hdr+0x12>
	struct net_buf *frag;
	u16_t pos;

	if (net_icmp_header_fits(pkt, hdr)) {
   1cc90:	bb64      	cbnz	r4, 1ccec <net_icmpv6_set_hdr+0x6c>
		return hdr;
	}

	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1cc92:	f895 1035 	ldrb.w	r1, [r5, #53]	; 0x35
			     net_pkt_ipv6_ext_len(pkt), &pos,
   1cc96:	f895 203f 	ldrb.w	r2, [r5, #63]	; 0x3f
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1cc9a:	9401      	str	r4, [sp, #4]
   1cc9c:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
   1cca0:	2701      	movs	r7, #1
   1cca2:	440a      	add	r2, r1
   1cca4:	f10d 0316 	add.w	r3, sp, #22
   1cca8:	68a9      	ldr	r1, [r5, #8]
   1ccaa:	9602      	str	r6, [sp, #8]
   1ccac:	9700      	str	r7, [sp, #0]
   1ccae:	4628      	mov	r0, r5
   1ccb0:	f7fe ff98 	bl	1bbe4 <net_pkt_write>
			     sizeof(hdr->type), &hdr->type, PKT_WAIT_TIME);
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->code),
   1ccb4:	19e3      	adds	r3, r4, r7
   1ccb6:	4601      	mov	r1, r0
   1ccb8:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1ccbc:	9301      	str	r3, [sp, #4]
   1ccbe:	9602      	str	r6, [sp, #8]
   1ccc0:	f10d 0316 	add.w	r3, sp, #22
   1ccc4:	9700      	str	r7, [sp, #0]
   1ccc6:	4628      	mov	r0, r5
   1ccc8:	f7fe ff8c 	bl	1bbe4 <net_pkt_write>
			     &hdr->code, PKT_WAIT_TIME);
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
			     (u8_t *)&hdr->chksum, PKT_WAIT_TIME);
   1cccc:	1ca3      	adds	r3, r4, #2
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   1ccce:	9301      	str	r3, [sp, #4]
   1ccd0:	2302      	movs	r3, #2
   1ccd2:	9300      	str	r3, [sp, #0]
   1ccd4:	4601      	mov	r1, r0
   1ccd6:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1ccda:	9602      	str	r6, [sp, #8]
   1ccdc:	f10d 0316 	add.w	r3, sp, #22
   1cce0:	4628      	mov	r0, r5
   1cce2:	f7fe ff7f 	bl	1bbe4 <net_pkt_write>
	if (!frag) {
		NET_ASSERT(frag);
		return NULL;
   1cce6:	2800      	cmp	r0, #0
   1cce8:	bf08      	it	eq
   1ccea:	2400      	moveq	r4, #0
	}

	return hdr;
}
   1ccec:	4620      	mov	r0, r4
   1ccee:	b007      	add	sp, #28
   1ccf0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001ccf2 <handle_echo_request>:

	return hdr;
}

static enum net_verdict handle_echo_request(struct net_pkt *orig)
{
   1ccf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	echo_request_debug(orig);

	iface = net_pkt_iface(orig);

	pkt = net_pkt_get_reserve_tx(0, PKT_WAIT_TIME);
   1ccf6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1ccfa:	f8d0 8014 	ldr.w	r8, [r0, #20]
{
   1ccfe:	b096      	sub	sp, #88	; 0x58
   1cd00:	4607      	mov	r7, r0
	pkt = net_pkt_get_reserve_tx(0, PKT_WAIT_TIME);
   1cd02:	2000      	movs	r0, #0
   1cd04:	f7fe fd42 	bl	1b78c <net_pkt_get_reserve_tx>
	if (!pkt) {
   1cd08:	4604      	mov	r4, r0
   1cd0a:	2800      	cmp	r0, #0
   1cd0c:	f000 80e8 	beq.w	1cee0 <handle_echo_request+0x1ee>
	return net_pkt_copy(pkt, net_buf_frags_len(pkt->frags),
   1cd10:	68bd      	ldr	r5, [r7, #8]
	size_t bytes = 0;
   1cd12:	2100      	movs	r1, #0
	while (buf) {
   1cd14:	2d00      	cmp	r5, #0
   1cd16:	f040 8098 	bne.w	1ce4a <handle_echo_request+0x158>
   1cd1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1cd1e:	462a      	mov	r2, r5
   1cd20:	4638      	mov	r0, r7
   1cd22:	f7fe fdfb 	bl	1b91c <net_pkt_copy>

	payload_len = sys_get_be16(NET_IPV6_HDR(orig)->len) -
		sizeof(NET_ICMPH_LEN) - NET_ICMPV6_UNUSED_LEN;

	frag = net_pkt_copy_all(orig, 0, PKT_WAIT_TIME);
	if (!frag) {
   1cd26:	4606      	mov	r6, r0
   1cd28:	2800      	cmp	r0, #0
   1cd2a:	f000 80d6 	beq.w	1ceda <handle_echo_request+0x1e8>
		goto drop;
	}

	net_pkt_frag_add(pkt, frag);
   1cd2e:	4601      	mov	r1, r0
   1cd30:	4620      	mov	r0, r4
   1cd32:	f7fe fdcf 	bl	1b8d4 <net_pkt_frag_add>
	pkt->family = family;
   1cd36:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
	pkt->iface = iface;
   1cd3a:	f8c4 8014 	str.w	r8, [r4, #20]
	pkt->family = family;
   1cd3e:	220a      	movs	r2, #10
   1cd40:	f362 03c6 	bfi	r3, r2, #3, #4
   1cd44:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	pkt->lladdr_src.type = iface->link_addr.type;
   1cd48:	f898 3015 	ldrb.w	r3, [r8, #21]
   1cd4c:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1cd50:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	net_pkt_set_family(pkt, AF_INET6);
	net_pkt_set_iface(pkt, iface);
	net_pkt_set_ll_reserve(pkt, net_buf_headroom(frag));
   1cd54:	f106 0008 	add.w	r0, r6, #8
   1cd58:	f7fc fb8c 	bl	19474 <net_buf_simple_headroom>
	pkt->ip_hdr_len = len;
   1cd5c:	2328      	movs	r3, #40	; 0x28
   1cd5e:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
   1cd62:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
   1cd66:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
	net_pkt_set_ip_hdr_len(pkt, sizeof(struct net_ipv6_hdr));

	if (net_pkt_ipv6_ext_len(orig)) {
   1cd6a:	2b00      	cmp	r3, #0
   1cd6c:	d071      	beq.n	1ce52 <handle_echo_request+0x160>
	pkt->ipv6_ext_len = len;
   1cd6e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
	return pkt->frags->data;
   1cd72:	68a3      	ldr	r3, [r4, #8]
   1cd74:	689d      	ldr	r5, [r3, #8]
	} else {
		net_pkt_set_ipv6_ext_len(pkt, 0);
	}

	/* Set up IPv6 Header fields */
	NET_IPV6_HDR(pkt)->vtc = 0x60;
   1cd76:	2360      	movs	r3, #96	; 0x60
   1cd78:	702b      	strb	r3, [r5, #0]
	NET_IPV6_HDR(pkt)->tcflow = 0;
   1cd7a:	2300      	movs	r3, #0
   1cd7c:	706b      	strb	r3, [r5, #1]
	NET_IPV6_HDR(pkt)->flow = 0;
   1cd7e:	70ab      	strb	r3, [r5, #2]
   1cd80:	70eb      	strb	r3, [r5, #3]
   1cd82:	f898 324c 	ldrb.w	r3, [r8, #588]	; 0x24c
	NET_IPV6_HDR(pkt)->hop_limit = net_if_ipv6_get_hop_limit(iface);
   1cd86:	71eb      	strb	r3, [r5, #7]

	if (net_is_ipv6_addr_mcast(&NET_IPV6_HDR(pkt)->dst)) {
   1cd88:	7e2b      	ldrb	r3, [r5, #24]
   1cd8a:	2bff      	cmp	r3, #255	; 0xff
   1cd8c:	68bb      	ldr	r3, [r7, #8]
   1cd8e:	d163      	bne.n	1ce58 <handle_echo_request+0x166>
   1cd90:	689b      	ldr	r3, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst,
   1cd92:	ae02      	add	r6, sp, #8
   1cd94:	f103 0208 	add.w	r2, r3, #8
   1cd98:	46b6      	mov	lr, r6
   1cd9a:	3318      	adds	r3, #24
   1cd9c:	6810      	ldr	r0, [r2, #0]
   1cd9e:	6851      	ldr	r1, [r2, #4]
   1cda0:	46b4      	mov	ip, r6
   1cda2:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   1cda6:	3208      	adds	r2, #8
   1cda8:	429a      	cmp	r2, r3
   1cdaa:	4666      	mov	r6, ip
   1cdac:	d1f6      	bne.n	1cd9c <handle_echo_request+0xaa>
   1cdae:	f105 0c18 	add.w	ip, r5, #24
   1cdb2:	ae06      	add	r6, sp, #24
   1cdb4:	4672      	mov	r2, lr
   1cdb6:	ca03      	ldmia	r2!, {r0, r1}
   1cdb8:	42b2      	cmp	r2, r6
   1cdba:	f8cc 0000 	str.w	r0, [ip]
   1cdbe:	f8cc 1004 	str.w	r1, [ip, #4]
   1cdc2:	4696      	mov	lr, r2
   1cdc4:	f10c 0c08 	add.w	ip, ip, #8
   1cdc8:	d1f4      	bne.n	1cdb4 <handle_echo_request+0xc2>
				&NET_IPV6_HDR(orig)->src);

		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1cdca:	4619      	mov	r1, r3
   1cdcc:	4640      	mov	r0, r8
   1cdce:	f7fe f9e3 	bl	1b198 <net_if_ipv6_select_src_addr>
   1cdd2:	46b6      	mov	lr, r6
   1cdd4:	4603      	mov	r3, r0
   1cdd6:	f100 0c10 	add.w	ip, r0, #16
   1cdda:	6818      	ldr	r0, [r3, #0]
   1cddc:	6859      	ldr	r1, [r3, #4]
   1cdde:	4672      	mov	r2, lr
   1cde0:	c203      	stmia	r2!, {r0, r1}
   1cde2:	3308      	adds	r3, #8
   1cde4:	4563      	cmp	r3, ip
   1cde6:	4696      	mov	lr, r2
   1cde8:	d1f7      	bne.n	1cdda <handle_echo_request+0xe8>
   1cdea:	3508      	adds	r5, #8
   1cdec:	aa0a      	add	r2, sp, #40	; 0x28
   1cdee:	4633      	mov	r3, r6
   1cdf0:	cb03      	ldmia	r3!, {r0, r1}
   1cdf2:	4293      	cmp	r3, r2
   1cdf4:	6028      	str	r0, [r5, #0]
   1cdf6:	6069      	str	r1, [r5, #4]
   1cdf8:	461e      	mov	r6, r3
   1cdfa:	f105 0508 	add.w	r5, r5, #8
   1cdfe:	d1f6      	bne.n	1cdee <handle_echo_request+0xfc>
			goto drop;
		}
#endif
	}

	net_pkt_ll_src(pkt)->addr = net_pkt_ll_dst(orig)->addr;
   1ce00:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ce02:	6223      	str	r3, [r4, #32]
	net_pkt_ll_src(pkt)->len = net_pkt_ll_dst(orig)->len;

	/* We must not set the destination ll address here but trust
	 * that it is set properly using a value from neighbor cache.
	 */
	net_pkt_ll_dst(pkt)->addr = NULL;
   1ce04:	2500      	movs	r5, #0
	net_pkt_ll_src(pkt)->len = net_pkt_ll_dst(orig)->len;
   1ce06:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   1ce0a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24

	/* ICMPv6 fields */
	icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   1ce0e:	a901      	add	r1, sp, #4
	net_pkt_ll_dst(pkt)->addr = NULL;
   1ce10:	62a5      	str	r5, [r4, #40]	; 0x28
	icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   1ce12:	4620      	mov	r0, r4
   1ce14:	f7ff ff02 	bl	1cc1c <net_icmpv6_get_hdr>
	icmp_hdr->type = NET_ICMPV6_ECHO_REPLY;
   1ce18:	2381      	movs	r3, #129	; 0x81
   1ce1a:	7003      	strb	r3, [r0, #0]
	icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   1ce1c:	4601      	mov	r1, r0
	icmp_hdr->code = 0;
   1ce1e:	7045      	strb	r5, [r0, #1]
	icmp_hdr->chksum = 0;
   1ce20:	7085      	strb	r5, [r0, #2]
   1ce22:	70c5      	strb	r5, [r0, #3]
	net_icmpv6_set_hdr(pkt, icmp_hdr);
   1ce24:	4620      	mov	r0, r4
   1ce26:	f7ff ff2b 	bl	1cc80 <net_icmpv6_set_hdr>
	net_icmpv6_set_chksum(pkt, pkt->frags);
   1ce2a:	68a1      	ldr	r1, [r4, #8]
   1ce2c:	4620      	mov	r0, r4
   1ce2e:	f7ff feab 	bl	1cb88 <net_icmpv6_set_chksum>

	echo_reply_debug(pkt);

	if (net_send_data(pkt) < 0) {
   1ce32:	4620      	mov	r0, r4
   1ce34:	f7fd fbbe 	bl	1a5b4 <net_send_data>
   1ce38:	42a8      	cmp	r0, r5
   1ce3a:	db4e      	blt.n	1ceda <handle_echo_request+0x1e8>
		goto drop;
	}

	net_pkt_unref(orig);
   1ce3c:	4638      	mov	r0, r7
   1ce3e:	f7fe fd22 	bl	1b886 <net_pkt_unref>
	net_stats_update_icmp_sent();

	return NET_OK;
   1ce42:	4628      	mov	r0, r5

drop_no_pkt:
	net_stats_update_icmp_drop();

	return NET_DROP;
}
   1ce44:	b016      	add	sp, #88	; 0x58
   1ce46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes += buf->len;
   1ce4a:	89ab      	ldrh	r3, [r5, #12]
		buf = buf->frags;
   1ce4c:	682d      	ldr	r5, [r5, #0]
		bytes += buf->len;
   1ce4e:	4419      	add	r1, r3
   1ce50:	e760      	b.n	1cd14 <handle_echo_request+0x22>
	pkt->ipv6_ext_len = len;
   1ce52:	f884 503f 	strb.w	r5, [r4, #63]	; 0x3f
   1ce56:	e78c      	b.n	1cd72 <handle_echo_request+0x80>
	return pkt->frags->data;
   1ce58:	f8d3 c008 	ldr.w	ip, [r3, #8]
		net_ipaddr_copy(&addr, &NET_IPV6_HDR(orig)->src);
   1ce5c:	aa0a      	add	r2, sp, #40	; 0x28
   1ce5e:	f10c 0608 	add.w	r6, ip, #8
   1ce62:	f10c 0818 	add.w	r8, ip, #24
   1ce66:	4613      	mov	r3, r2
   1ce68:	6830      	ldr	r0, [r6, #0]
   1ce6a:	6871      	ldr	r1, [r6, #4]
   1ce6c:	4696      	mov	lr, r2
   1ce6e:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   1ce72:	3608      	adds	r6, #8
   1ce74:	4546      	cmp	r6, r8
   1ce76:	4672      	mov	r2, lr
   1ce78:	d1f6      	bne.n	1ce68 <handle_echo_request+0x176>
   1ce7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1ce7c:	f10d 0e18 	add.w	lr, sp, #24
   1ce80:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1ce84:	ab0e      	add	r3, sp, #56	; 0x38
   1ce86:	f10c 0c28 	add.w	ip, ip, #40	; 0x28
   1ce8a:	461a      	mov	r2, r3
   1ce8c:	6830      	ldr	r0, [r6, #0]
   1ce8e:	6871      	ldr	r1, [r6, #4]
   1ce90:	4698      	mov	r8, r3
   1ce92:	e8a8 0003 	stmia.w	r8!, {r0, r1}
   1ce96:	3608      	adds	r6, #8
   1ce98:	4566      	cmp	r6, ip
   1ce9a:	4643      	mov	r3, r8
   1ce9c:	d1f6      	bne.n	1ce8c <handle_echo_request+0x19a>
   1ce9e:	f105 0c08 	add.w	ip, r5, #8
   1cea2:	ae12      	add	r6, sp, #72	; 0x48
   1cea4:	4613      	mov	r3, r2
   1cea6:	cb03      	ldmia	r3!, {r0, r1}
   1cea8:	42b3      	cmp	r3, r6
   1ceaa:	f8cc 0000 	str.w	r0, [ip]
   1ceae:	f8cc 1004 	str.w	r1, [ip, #4]
   1ceb2:	461a      	mov	r2, r3
   1ceb4:	f10c 0c08 	add.w	ip, ip, #8
   1ceb8:	d1f4      	bne.n	1cea4 <handle_echo_request+0x1b2>
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, &addr);
   1ceba:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
   1cebe:	3518      	adds	r5, #24
   1cec0:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   1cec4:	aa16      	add	r2, sp, #88	; 0x58
   1cec6:	4633      	mov	r3, r6
   1cec8:	cb03      	ldmia	r3!, {r0, r1}
   1ceca:	4293      	cmp	r3, r2
   1cecc:	6028      	str	r0, [r5, #0]
   1cece:	6069      	str	r1, [r5, #4]
   1ced0:	461e      	mov	r6, r3
   1ced2:	f105 0508 	add.w	r5, r5, #8
   1ced6:	d1f6      	bne.n	1cec6 <handle_echo_request+0x1d4>
   1ced8:	e792      	b.n	1ce00 <handle_echo_request+0x10e>
	net_pkt_unref(pkt);
   1ceda:	4620      	mov	r0, r4
   1cedc:	f7fe fcd3 	bl	1b886 <net_pkt_unref>
	return NET_DROP;
   1cee0:	2002      	movs	r0, #2
   1cee2:	e7af      	b.n	1ce44 <handle_echo_request+0x152>

0001cee4 <net_icmpv6_get_ns_hdr>:
{
   1cee4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1cee6:	460c      	mov	r4, r1
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1cee8:	2104      	movs	r1, #4
{
   1ceea:	4605      	mov	r5, r0
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1ceec:	f7fe ff28 	bl	1bd40 <net_pkt_icmp_opt_data>
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1cef0:	2214      	movs	r2, #20
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1cef2:	4606      	mov	r6, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1cef4:	4601      	mov	r1, r0
   1cef6:	4628      	mov	r0, r5
   1cef8:	f7ff f8fc 	bl	1c0f4 <net_header_fits>
   1cefc:	b998      	cbnz	r0, 1cf26 <net_icmpv6_get_ns_hdr+0x42>
			     net_pkt_ipv6_ext_len(pkt) +
   1cefe:	f895 303f 	ldrb.w	r3, [r5, #63]	; 0x3f
			     net_pkt_ip_hdr_len(pkt) +
   1cf02:	f895 1035 	ldrb.w	r1, [r5, #53]	; 0x35
	frag = net_frag_read(pkt->frags,
   1cf06:	68a8      	ldr	r0, [r5, #8]
   1cf08:	4419      	add	r1, r3
			     &pos, sizeof(struct in6_addr), (u8_t *)&hdr->tgt);
   1cf0a:	1d23      	adds	r3, r4, #4
	frag = net_frag_read(pkt->frags,
   1cf0c:	9300      	str	r3, [sp, #0]
   1cf0e:	f10d 020e 	add.w	r2, sp, #14
   1cf12:	2310      	movs	r3, #16
   1cf14:	3108      	adds	r1, #8
   1cf16:	f7fe fe11 	bl	1bb3c <net_frag_read>
	if (!frag) {
   1cf1a:	2800      	cmp	r0, #0
		return NULL;
   1cf1c:	bf08      	it	eq
   1cf1e:	2400      	moveq	r4, #0
}
   1cf20:	4620      	mov	r0, r4
   1cf22:	b004      	add	sp, #16
   1cf24:	bd70      	pop	{r4, r5, r6, pc}
		return (struct net_icmpv6_ns_hdr *)opt_data;
   1cf26:	4634      	mov	r4, r6
   1cf28:	e7fa      	b.n	1cf20 <net_icmpv6_get_ns_hdr+0x3c>

0001cf2a <net_icmpv6_set_ns_hdr>:
{
   1cf2a:	b570      	push	{r4, r5, r6, lr}
   1cf2c:	b086      	sub	sp, #24
	const u32_t reserved = 0;
   1cf2e:	2300      	movs	r3, #0
{
   1cf30:	460d      	mov	r5, r1
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1cf32:	2104      	movs	r1, #4
{
   1cf34:	4604      	mov	r4, r0
	const u32_t reserved = 0;
   1cf36:	9305      	str	r3, [sp, #20]
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1cf38:	f7fe ff02 	bl	1bd40 <net_pkt_icmp_opt_data>
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1cf3c:	2214      	movs	r2, #20
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1cf3e:	4606      	mov	r6, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1cf40:	4601      	mov	r1, r0
   1cf42:	4620      	mov	r0, r4
   1cf44:	f7ff f8d6 	bl	1c0f4 <net_header_fits>
   1cf48:	bb28      	cbnz	r0, 1cf96 <net_icmpv6_set_ns_hdr+0x6c>
			     net_pkt_ipv6_ext_len(pkt) +
   1cf4a:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1cf4e:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
   1cf52:	68a1      	ldr	r1, [r4, #8]
   1cf54:	441a      	add	r2, r3
   1cf56:	ab05      	add	r3, sp, #20
   1cf58:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
   1cf5c:	9301      	str	r3, [sp, #4]
   1cf5e:	2304      	movs	r3, #4
   1cf60:	9300      	str	r3, [sp, #0]
   1cf62:	3204      	adds	r2, #4
   1cf64:	f10d 0312 	add.w	r3, sp, #18
   1cf68:	9602      	str	r6, [sp, #8]
   1cf6a:	4620      	mov	r0, r4
   1cf6c:	f7fe fe3a 	bl	1bbe4 <net_pkt_write>
			     (u8_t *)&hdr->tgt, PKT_WAIT_TIME);
   1cf70:	1d2b      	adds	r3, r5, #4
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(struct in6_addr),
   1cf72:	9301      	str	r3, [sp, #4]
   1cf74:	2310      	movs	r3, #16
   1cf76:	9300      	str	r3, [sp, #0]
   1cf78:	4601      	mov	r1, r0
   1cf7a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   1cf7e:	9602      	str	r6, [sp, #8]
   1cf80:	f10d 0312 	add.w	r3, sp, #18
   1cf84:	4620      	mov	r0, r4
   1cf86:	f7fe fe2d 	bl	1bbe4 <net_pkt_write>
	if (!frag) {
   1cf8a:	2800      	cmp	r0, #0
		return NULL;
   1cf8c:	bf08      	it	eq
   1cf8e:	2500      	moveq	r5, #0
}
   1cf90:	4628      	mov	r0, r5
   1cf92:	b006      	add	sp, #24
   1cf94:	bd70      	pop	{r4, r5, r6, pc}
		return (struct net_icmpv6_ns_hdr *)opt_data;
   1cf96:	4635      	mov	r5, r6
   1cf98:	e7fa      	b.n	1cf90 <net_icmpv6_set_ns_hdr+0x66>

0001cf9a <net_icmpv6_get_nd_opt_hdr>:
{
   1cf9a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1cf9c:	460c      	mov	r4, r1
					 net_pkt_ipv6_ext_opt_len(pkt));
   1cf9e:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr) +
   1cfa2:	3104      	adds	r1, #4
{
   1cfa4:	4605      	mov	r5, r0
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr) +
   1cfa6:	f7fe fecb 	bl	1bd40 <net_pkt_icmp_opt_data>
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1cfaa:	2202      	movs	r2, #2
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr) +
   1cfac:	4606      	mov	r6, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1cfae:	4601      	mov	r1, r0
   1cfb0:	4628      	mov	r0, r5
   1cfb2:	f7ff f89f 	bl	1c0f4 <net_header_fits>
   1cfb6:	b9f8      	cbnz	r0, 1cff8 <net_icmpv6_get_nd_opt_hdr+0x5e>
				net_pkt_ipv6_ext_len(pkt) +
   1cfb8:	f895 303f 	ldrb.w	r3, [r5, #63]	; 0x3f
				net_pkt_ip_hdr_len(pkt) +
   1cfbc:	f895 1035 	ldrb.w	r1, [r5, #53]	; 0x35
	return net_frag_read(frag, offset, pos, 1, value);
   1cfc0:	9400      	str	r4, [sp, #0]
   1cfc2:	4419      	add	r1, r3
				net_pkt_ipv6_ext_opt_len(pkt),
   1cfc4:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
   1cfc8:	68a8      	ldr	r0, [r5, #8]
	frag = net_frag_read_u8(pkt->frags,
   1cfca:	3104      	adds	r1, #4
   1cfcc:	4419      	add	r1, r3
   1cfce:	f10d 020e 	add.w	r2, sp, #14
   1cfd2:	2301      	movs	r3, #1
   1cfd4:	b289      	uxth	r1, r1
   1cfd6:	f7fe fdb1 	bl	1bb3c <net_frag_read>
	frag = net_frag_read_u8(frag, pos, &pos, &hdr->len);
   1cfda:	1c63      	adds	r3, r4, #1
   1cfdc:	9300      	str	r3, [sp, #0]
   1cfde:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1cfe2:	2301      	movs	r3, #1
   1cfe4:	f10d 020e 	add.w	r2, sp, #14
   1cfe8:	f7fe fda8 	bl	1bb3c <net_frag_read>
	if (!frag) {
   1cfec:	2800      	cmp	r0, #0
		return NULL;
   1cfee:	bf08      	it	eq
   1cff0:	2400      	moveq	r4, #0
}
   1cff2:	4620      	mov	r0, r4
   1cff4:	b004      	add	sp, #16
   1cff6:	bd70      	pop	{r4, r5, r6, pc}
		return (struct net_icmpv6_nd_opt_hdr *)opt_data;
   1cff8:	4634      	mov	r4, r6
   1cffa:	e7fa      	b.n	1cff2 <net_icmpv6_get_nd_opt_hdr+0x58>

0001cffc <net_icmpv6_get_na_hdr>:
{
   1cffc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cffe:	460c      	mov	r4, r1
   1d000:	b085      	sub	sp, #20
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1d002:	2104      	movs	r1, #4
{
   1d004:	4605      	mov	r5, r0
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1d006:	f7fe fe9b 	bl	1bd40 <net_pkt_icmp_opt_data>
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1d00a:	2214      	movs	r2, #20
   1d00c:	4601      	mov	r1, r0
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1d00e:	4606      	mov	r6, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1d010:	4628      	mov	r0, r5
   1d012:	f7ff f86f 	bl	1c0f4 <net_header_fits>
   1d016:	4607      	mov	r7, r0
   1d018:	bb18      	cbnz	r0, 1d062 <net_icmpv6_get_na_hdr+0x66>
				net_pkt_ipv6_ext_len(pkt) +
   1d01a:	f895 303f 	ldrb.w	r3, [r5, #63]	; 0x3f
	frag = net_frag_read_u8(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1d01e:	f895 1035 	ldrb.w	r1, [r5, #53]	; 0x35
   1d022:	9400      	str	r4, [sp, #0]
   1d024:	4419      	add	r1, r3
   1d026:	f10d 020e 	add.w	r2, sp, #14
   1d02a:	2301      	movs	r3, #1
   1d02c:	3104      	adds	r1, #4
   1d02e:	68a8      	ldr	r0, [r5, #8]
   1d030:	f7fe fd84 	bl	1bb3c <net_frag_read>
	return net_frag_read(frag, offset, pos, len, NULL);
   1d034:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1d038:	9700      	str	r7, [sp, #0]
   1d03a:	2303      	movs	r3, #3
   1d03c:	f10d 020e 	add.w	r2, sp, #14
   1d040:	f7fe fd7c 	bl	1bb3c <net_frag_read>
			     (u8_t *)&hdr->tgt);
   1d044:	1d23      	adds	r3, r4, #4
	frag = net_frag_read(frag, pos, &pos, sizeof(struct in6_addr),
   1d046:	9300      	str	r3, [sp, #0]
   1d048:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1d04c:	2310      	movs	r3, #16
   1d04e:	f10d 020e 	add.w	r2, sp, #14
   1d052:	f7fe fd73 	bl	1bb3c <net_frag_read>
	if (!frag) {
   1d056:	2800      	cmp	r0, #0
		return NULL;
   1d058:	bf08      	it	eq
   1d05a:	2400      	moveq	r4, #0
}
   1d05c:	4620      	mov	r0, r4
   1d05e:	b005      	add	sp, #20
   1d060:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return (struct net_icmpv6_na_hdr *)opt_data;
   1d062:	4634      	mov	r4, r6
   1d064:	e7fa      	b.n	1d05c <net_icmpv6_get_na_hdr+0x60>

0001d066 <net_icmpv6_set_na_hdr>:
{
   1d066:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d068:	b087      	sub	sp, #28
	const u8_t reserved[3] = { 0 };
   1d06a:	2300      	movs	r3, #0
{
   1d06c:	460d      	mov	r5, r1
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1d06e:	2104      	movs	r1, #4
{
   1d070:	4604      	mov	r4, r0
	const u8_t reserved[3] = { 0 };
   1d072:	f8ad 3014 	strh.w	r3, [sp, #20]
   1d076:	f88d 3016 	strb.w	r3, [sp, #22]
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1d07a:	f7fe fe61 	bl	1bd40 <net_pkt_icmp_opt_data>
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1d07e:	2214      	movs	r2, #20
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1d080:	4606      	mov	r6, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1d082:	4601      	mov	r1, r0
   1d084:	4620      	mov	r0, r4
	const u8_t reserved[3] = { 0 };
   1d086:	af05      	add	r7, sp, #20
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1d088:	f7ff f834 	bl	1c0f4 <net_header_fits>
   1d08c:	bb80      	cbnz	r0, 1d0f0 <net_icmpv6_set_na_hdr+0x8a>
			     net_pkt_ipv6_ext_len(pkt) +
   1d08e:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
			     net_pkt_ip_hdr_len(pkt) +
   1d092:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
	frag = net_pkt_write(pkt, pkt->frags,
   1d096:	9501      	str	r5, [sp, #4]
   1d098:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
   1d09c:	441a      	add	r2, r3
   1d09e:	2301      	movs	r3, #1
   1d0a0:	9300      	str	r3, [sp, #0]
   1d0a2:	3204      	adds	r2, #4
   1d0a4:	f10d 0312 	add.w	r3, sp, #18
   1d0a8:	68a1      	ldr	r1, [r4, #8]
   1d0aa:	9602      	str	r6, [sp, #8]
   1d0ac:	4620      	mov	r0, r4
   1d0ae:	f7fe fd99 	bl	1bbe4 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(reserved),
   1d0b2:	2303      	movs	r3, #3
   1d0b4:	4601      	mov	r1, r0
   1d0b6:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   1d0ba:	9300      	str	r3, [sp, #0]
   1d0bc:	9602      	str	r6, [sp, #8]
   1d0be:	f10d 0312 	add.w	r3, sp, #18
   1d0c2:	9701      	str	r7, [sp, #4]
   1d0c4:	4620      	mov	r0, r4
   1d0c6:	f7fe fd8d 	bl	1bbe4 <net_pkt_write>
			     (u8_t *)&hdr->tgt, PKT_WAIT_TIME);
   1d0ca:	1d2b      	adds	r3, r5, #4
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(struct in6_addr),
   1d0cc:	9301      	str	r3, [sp, #4]
   1d0ce:	2310      	movs	r3, #16
   1d0d0:	9300      	str	r3, [sp, #0]
   1d0d2:	4601      	mov	r1, r0
   1d0d4:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   1d0d8:	9602      	str	r6, [sp, #8]
   1d0da:	f10d 0312 	add.w	r3, sp, #18
   1d0de:	4620      	mov	r0, r4
   1d0e0:	f7fe fd80 	bl	1bbe4 <net_pkt_write>
	if (!frag) {
   1d0e4:	2800      	cmp	r0, #0
		return NULL;
   1d0e6:	bf08      	it	eq
   1d0e8:	2500      	moveq	r5, #0
}
   1d0ea:	4628      	mov	r0, r5
   1d0ec:	b007      	add	sp, #28
   1d0ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return (struct net_icmpv6_na_hdr *)opt_data;
   1d0f0:	4635      	mov	r5, r6
   1d0f2:	e7fa      	b.n	1d0ea <net_icmpv6_set_na_hdr+0x84>

0001d0f4 <net_icmpv6_get_ra_hdr>:
{
   1d0f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1d0f6:	460c      	mov	r4, r1
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1d0f8:	2104      	movs	r1, #4
{
   1d0fa:	4605      	mov	r5, r0
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1d0fc:	f7fe fe20 	bl	1bd40 <net_pkt_icmp_opt_data>
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1d100:	220c      	movs	r2, #12
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1d102:	4606      	mov	r6, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1d104:	4601      	mov	r1, r0
   1d106:	4628      	mov	r0, r5
   1d108:	f7fe fff4 	bl	1c0f4 <net_header_fits>
   1d10c:	2800      	cmp	r0, #0
   1d10e:	d137      	bne.n	1d180 <net_icmpv6_get_ra_hdr+0x8c>
				net_pkt_ipv6_ext_len(pkt) +
   1d110:	f895 303f 	ldrb.w	r3, [r5, #63]	; 0x3f
	frag = net_frag_read_u8(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1d114:	f895 1035 	ldrb.w	r1, [r5, #53]	; 0x35
	return net_frag_read(frag, offset, pos, 1, value);
   1d118:	9400      	str	r4, [sp, #0]
   1d11a:	4419      	add	r1, r3
   1d11c:	f10d 020e 	add.w	r2, sp, #14
   1d120:	2301      	movs	r3, #1
   1d122:	3104      	adds	r1, #4
   1d124:	68a8      	ldr	r0, [r5, #8]
   1d126:	f7fe fd09 	bl	1bb3c <net_frag_read>
	frag = net_frag_read_u8(frag, pos, &pos, &hdr->flags);
   1d12a:	1c63      	adds	r3, r4, #1
   1d12c:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1d130:	9300      	str	r3, [sp, #0]
   1d132:	f10d 020e 	add.w	r2, sp, #14
   1d136:	2301      	movs	r3, #1
   1d138:	f7fe fd00 	bl	1bb3c <net_frag_read>
			     (u8_t *)&hdr->router_lifetime);
   1d13c:	1ca3      	adds	r3, r4, #2
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->router_lifetime),
   1d13e:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1d142:	9300      	str	r3, [sp, #0]
   1d144:	f10d 020e 	add.w	r2, sp, #14
   1d148:	2302      	movs	r3, #2
   1d14a:	f7fe fcf7 	bl	1bb3c <net_frag_read>
			     (u8_t *)&hdr->reachable_time);
   1d14e:	1d23      	adds	r3, r4, #4
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->reachable_time),
   1d150:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1d154:	9300      	str	r3, [sp, #0]
   1d156:	f10d 020e 	add.w	r2, sp, #14
   1d15a:	2304      	movs	r3, #4
   1d15c:	f7fe fcee 	bl	1bb3c <net_frag_read>
			     (u8_t *)&hdr->retrans_timer);
   1d160:	f104 0308 	add.w	r3, r4, #8
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->retrans_timer),
   1d164:	9300      	str	r3, [sp, #0]
   1d166:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1d16a:	2304      	movs	r3, #4
   1d16c:	f10d 020e 	add.w	r2, sp, #14
   1d170:	f7fe fce4 	bl	1bb3c <net_frag_read>
	if (!frag) {
   1d174:	2800      	cmp	r0, #0
		return NULL;
   1d176:	bf08      	it	eq
   1d178:	2400      	moveq	r4, #0
}
   1d17a:	4620      	mov	r0, r4
   1d17c:	b004      	add	sp, #16
   1d17e:	bd70      	pop	{r4, r5, r6, pc}
		return (struct net_icmpv6_ra_hdr *)opt_data;
   1d180:	4634      	mov	r4, r6
   1d182:	e7fa      	b.n	1d17a <net_icmpv6_get_ra_hdr+0x86>

0001d184 <net_icmpv6_send_error>:

int net_icmpv6_send_error(struct net_pkt *orig, u8_t type, u8_t code,
			  u32_t param)
{
   1d184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d188:	4698      	mov	r8, r3
	return pkt->frags->data;
   1d18a:	6883      	ldr	r3, [r0, #8]
	struct net_buf *frag;
	struct net_if *iface;
	size_t extra_len, reserve;
	int err = -EIO;

	if (NET_IPV6_HDR(orig)->nexthdr == IPPROTO_ICMPV6) {
   1d18c:	689b      	ldr	r3, [r3, #8]
   1d18e:	799b      	ldrb	r3, [r3, #6]
   1d190:	2b3a      	cmp	r3, #58	; 0x3a
{
   1d192:	b09b      	sub	sp, #108	; 0x6c
   1d194:	4606      	mov	r6, r0
   1d196:	4689      	mov	r9, r1
   1d198:	4692      	mov	sl, r2
	if (NET_IPV6_HDR(orig)->nexthdr == IPPROTO_ICMPV6) {
   1d19a:	d10d      	bne.n	1d1b8 <net_icmpv6_send_error+0x34>
		struct net_icmp_hdr icmp_hdr[1];

		if (!net_icmpv6_get_hdr(orig, icmp_hdr) ||
   1d19c:	a916      	add	r1, sp, #88	; 0x58
   1d19e:	f7ff fd3d 	bl	1cc1c <net_icmpv6_get_hdr>
   1d1a2:	b118      	cbz	r0, 1d1ac <net_icmpv6_send_error+0x28>
   1d1a4:	f99d 3059 	ldrsb.w	r3, [sp, #89]	; 0x59
   1d1a8:	2b00      	cmp	r3, #0
   1d1aa:	db05      	blt.n	1d1b8 <net_icmpv6_send_error+0x34>
		    icmp_hdr->code < 128) {
			/* We must not send ICMP errors back */
			err = -EINVAL;
   1d1ac:	f06f 0515 	mvn.w	r5, #21

drop_no_pkt:
	net_stats_update_icmp_drop();

	return err;
}
   1d1b0:	4628      	mov	r0, r5
   1d1b2:	b01b      	add	sp, #108	; 0x6c
   1d1b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	pkt = net_pkt_get_reserve_tx(0, PKT_WAIT_TIME);
   1d1b8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1d1bc:	2000      	movs	r0, #0
   1d1be:	6977      	ldr	r7, [r6, #20]
   1d1c0:	f7fe fae4 	bl	1b78c <net_pkt_get_reserve_tx>
	if (!pkt) {
   1d1c4:	4604      	mov	r4, r0
   1d1c6:	2800      	cmp	r0, #0
   1d1c8:	f000 8132 	beq.w	1d430 <net_icmpv6_send_error+0x2ac>
   1d1cc:	68b3      	ldr	r3, [r6, #8]
   1d1ce:	6899      	ldr	r1, [r3, #8]
	if (NET_IPV6_HDR(orig)->nexthdr == IPPROTO_UDP) {
   1d1d0:	798b      	ldrb	r3, [r1, #6]
   1d1d2:	2b11      	cmp	r3, #17
   1d1d4:	f000 80e8 	beq.w	1d3a8 <net_icmpv6_send_error+0x224>
	} else if (NET_IPV6_HDR(orig)->nexthdr == IPPROTO_TCP) {
   1d1d8:	2b06      	cmp	r3, #6
   1d1da:	f000 80e7 	beq.w	1d3ac <net_icmpv6_send_error+0x228>
   1d1de:	687b      	ldr	r3, [r7, #4]
   1d1e0:	3118      	adds	r1, #24
   1d1e2:	689b      	ldr	r3, [r3, #8]
   1d1e4:	4638      	mov	r0, r7
   1d1e6:	4798      	blx	r3
		size_t space = CONFIG_NET_BUF_DATA_SIZE -
   1d1e8:	f1c0 0080 	rsb	r0, r0, #128	; 0x80
		if (reserve > space) {
   1d1ec:	282f      	cmp	r0, #47	; 0x2f
   1d1ee:	f240 80df 	bls.w	1d3b0 <net_icmpv6_send_error+0x22c>
			extra_len = space - reserve;
   1d1f2:	f1a0 0530 	sub.w	r5, r0, #48	; 0x30
	frag = net_pkt_copy(orig, extra_len, reserve, PKT_WAIT_TIME);
   1d1f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1d1fa:	2230      	movs	r2, #48	; 0x30
   1d1fc:	4629      	mov	r1, r5
   1d1fe:	4630      	mov	r0, r6
   1d200:	f7fe fb8c 	bl	1b91c <net_pkt_copy>
	if (!frag) {
   1d204:	4683      	mov	fp, r0
   1d206:	2800      	cmp	r0, #0
   1d208:	f000 810f 	beq.w	1d42a <net_icmpv6_send_error+0x2a6>
	net_pkt_frag_add(pkt, frag);
   1d20c:	4601      	mov	r1, r0
   1d20e:	4620      	mov	r0, r4
   1d210:	f7fe fb60 	bl	1b8d4 <net_pkt_frag_add>
	pkt->family = family;
   1d214:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
	pkt->iface = iface;
   1d218:	6167      	str	r7, [r4, #20]
	pkt->family = family;
   1d21a:	220a      	movs	r2, #10
   1d21c:	f362 03c6 	bfi	r3, r2, #3, #4
   1d220:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	pkt->lladdr_src.type = iface->link_addr.type;
   1d224:	7d7b      	ldrb	r3, [r7, #21]
   1d226:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1d22a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	net_pkt_set_ll_reserve(pkt, net_buf_headroom(frag));
   1d22e:	f10b 0008 	add.w	r0, fp, #8
   1d232:	f7fc f91f 	bl	19474 <net_buf_simple_headroom>
	pkt->ipv6_ext_len = len;
   1d236:	2200      	movs	r2, #0
   1d238:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
   1d23c:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
	struct net_buf *frag = pkt->frags;
   1d240:	68a1      	ldr	r1, [r4, #8]
   1d242:	f897 024c 	ldrb.w	r0, [r7, #588]	; 0x24c
	const u32_t unused = 0;
   1d246:	9216      	str	r2, [sp, #88]	; 0x58
	return pkt->frags->data;
   1d248:	688b      	ldr	r3, [r1, #8]
   1d24a:	f88d a017 	strb.w	sl, [sp, #23]
	sys_put_be16(NET_ICMPH_LEN + extra_len + NET_ICMPV6_UNUSED_LEN,
   1d24e:	3508      	adds	r5, #8
   1d250:	b2ad      	uxth	r5, r5
	NET_IPV6_HDR(pkt)->tcflow = 0;
   1d252:	705a      	strb	r2, [r3, #1]
	NET_IPV6_HDR(pkt)->flow = 0;
   1d254:	709a      	strb	r2, [r3, #2]
   1d256:	70da      	strb	r2, [r3, #3]
	NET_IPV6_HDR(pkt)->vtc = 0x60;
   1d258:	f04f 0e60 	mov.w	lr, #96	; 0x60
	dst[0] = val >> 8;
   1d25c:	0a2a      	lsrs	r2, r5, #8
   1d25e:	711a      	strb	r2, [r3, #4]
	dst[1] = val;
   1d260:	715d      	strb	r5, [r3, #5]
   1d262:	f88d 9016 	strb.w	r9, [sp, #22]
   1d266:	f883 e000 	strb.w	lr, [r3]
   1d26a:	68a3      	ldr	r3, [r4, #8]
   1d26c:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->nexthdr = IPPROTO_ICMPV6;
   1d26e:	223a      	movs	r2, #58	; 0x3a
   1d270:	719a      	strb	r2, [r3, #6]
	NET_IPV6_HDR(pkt)->hop_limit = hop_limit;
   1d272:	71d8      	strb	r0, [r3, #7]
	pkt->ip_hdr_len = len;
   1d274:	2228      	movs	r2, #40	; 0x28
	frag = net_pkt_write(pkt, frag, net_pkt_ip_hdr_len(pkt), &pos,
   1d276:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   1d27a:	f04f 0a01 	mov.w	sl, #1
   1d27e:	f10d 0316 	add.w	r3, sp, #22
   1d282:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
   1d286:	4620      	mov	r0, r4
   1d288:	9301      	str	r3, [sp, #4]
   1d28a:	f8cd a000 	str.w	sl, [sp]
   1d28e:	ab12      	add	r3, sp, #72	; 0x48
   1d290:	9502      	str	r5, [sp, #8]
   1d292:	f7fe fca7 	bl	1bbe4 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(icmp_code),
   1d296:	f10d 0317 	add.w	r3, sp, #23
   1d29a:	4601      	mov	r1, r0
   1d29c:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
   1d2a0:	9301      	str	r3, [sp, #4]
   1d2a2:	f8cd a000 	str.w	sl, [sp]
   1d2a6:	ab12      	add	r3, sp, #72	; 0x48
   1d2a8:	9502      	str	r5, [sp, #8]
   1d2aa:	4620      	mov	r0, r4
   1d2ac:	f7fe fc9a 	bl	1bbe4 <net_pkt_write>
	net_pkt_write(pkt, frag, pos, &pos, 4, (u8_t *)&unused, PKT_WAIT_TIME);
   1d2b0:	f10d 0a58 	add.w	sl, sp, #88	; 0x58
   1d2b4:	2304      	movs	r3, #4
   1d2b6:	9300      	str	r3, [sp, #0]
   1d2b8:	4601      	mov	r1, r0
   1d2ba:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
   1d2be:	9502      	str	r5, [sp, #8]
   1d2c0:	f8cd a004 	str.w	sl, [sp, #4]
   1d2c4:	ab12      	add	r3, sp, #72	; 0x48
   1d2c6:	4620      	mov	r0, r4
   1d2c8:	f7fe fc8c 	bl	1bbe4 <net_pkt_write>
	if (type == NET_ICMPV6_PARAM_PROBLEM) {
   1d2cc:	f1b9 0f04 	cmp.w	r9, #4
   1d2d0:	d10c      	bne.n	1d2ec <net_icmpv6_send_error+0x168>
		sys_put_be32(param, (u8_t *)net_pkt_icmp_data(pkt) +
   1d2d2:	4620      	mov	r0, r4
   1d2d4:	f7fe fd22 	bl	1bd1c <net_pkt_icmp_data>
	sys_put_be16(val >> 16, dst);
   1d2d8:	ea4f 4318 	mov.w	r3, r8, lsr #16
	dst[0] = val >> 8;
   1d2dc:	0a1a      	lsrs	r2, r3, #8
	dst[1] = val;
   1d2de:	7143      	strb	r3, [r0, #5]
	dst[0] = val >> 8;
   1d2e0:	f3c8 2307 	ubfx	r3, r8, #8, #8
   1d2e4:	7102      	strb	r2, [r0, #4]
   1d2e6:	7183      	strb	r3, [r0, #6]
	dst[1] = val;
   1d2e8:	f880 8007 	strb.w	r8, [r0, #7]
	return pkt->frags->data;
   1d2ec:	68b3      	ldr	r3, [r6, #8]
   1d2ee:	f8d3 c008 	ldr.w	ip, [r3, #8]
	if (net_is_ipv6_addr_mcast(&NET_IPV6_HDR(orig)->dst)) {
   1d2f2:	f89c 3018 	ldrb.w	r3, [ip, #24]
   1d2f6:	2bff      	cmp	r3, #255	; 0xff
   1d2f8:	f10c 0508 	add.w	r5, ip, #8
   1d2fc:	f10c 0218 	add.w	r2, ip, #24
   1d300:	d158      	bne.n	1d3b4 <net_icmpv6_send_error+0x230>
   1d302:	68a3      	ldr	r3, [r4, #8]
   1d304:	f8d3 8008 	ldr.w	r8, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst,
   1d308:	ab06      	add	r3, sp, #24
   1d30a:	469e      	mov	lr, r3
   1d30c:	6828      	ldr	r0, [r5, #0]
   1d30e:	6869      	ldr	r1, [r5, #4]
   1d310:	469c      	mov	ip, r3
   1d312:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   1d316:	3508      	adds	r5, #8
   1d318:	4295      	cmp	r5, r2
   1d31a:	4663      	mov	r3, ip
   1d31c:	d1f6      	bne.n	1d30c <net_icmpv6_send_error+0x188>
   1d31e:	f108 0c18 	add.w	ip, r8, #24
   1d322:	ad0a      	add	r5, sp, #40	; 0x28
   1d324:	4673      	mov	r3, lr
   1d326:	cb03      	ldmia	r3!, {r0, r1}
   1d328:	42ab      	cmp	r3, r5
   1d32a:	f8cc 0000 	str.w	r0, [ip]
   1d32e:	f8cc 1004 	str.w	r1, [ip, #4]
   1d332:	469e      	mov	lr, r3
   1d334:	f10c 0c08 	add.w	ip, ip, #8
   1d338:	d1f4      	bne.n	1d324 <net_icmpv6_send_error+0x1a0>
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1d33a:	4638      	mov	r0, r7
   1d33c:	4611      	mov	r1, r2
   1d33e:	f7fd ff2b 	bl	1b198 <net_if_ipv6_select_src_addr>
   1d342:	462f      	mov	r7, r5
   1d344:	4603      	mov	r3, r0
   1d346:	f100 0e10 	add.w	lr, r0, #16
   1d34a:	6818      	ldr	r0, [r3, #0]
   1d34c:	6859      	ldr	r1, [r3, #4]
   1d34e:	463a      	mov	r2, r7
   1d350:	c203      	stmia	r2!, {r0, r1}
   1d352:	3308      	adds	r3, #8
   1d354:	4573      	cmp	r3, lr
   1d356:	4617      	mov	r7, r2
   1d358:	d1f7      	bne.n	1d34a <net_icmpv6_send_error+0x1c6>
   1d35a:	f108 0308 	add.w	r3, r8, #8
   1d35e:	af0e      	add	r7, sp, #56	; 0x38
   1d360:	462a      	mov	r2, r5
   1d362:	ca03      	ldmia	r2!, {r0, r1}
   1d364:	42ba      	cmp	r2, r7
   1d366:	6018      	str	r0, [r3, #0]
   1d368:	6059      	str	r1, [r3, #4]
   1d36a:	4615      	mov	r5, r2
   1d36c:	f103 0308 	add.w	r3, r3, #8
   1d370:	d1f6      	bne.n	1d360 <net_icmpv6_send_error+0x1dc>
	net_pkt_ll_src(pkt)->addr = net_pkt_ll_dst(orig)->addr;
   1d372:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   1d374:	6223      	str	r3, [r4, #32]
	net_pkt_ll_src(pkt)->len = net_pkt_ll_dst(orig)->len;
   1d376:	f896 302c 	ldrb.w	r3, [r6, #44]	; 0x2c
   1d37a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	net_pkt_ll_dst(pkt)->addr = net_pkt_ll_src(orig)->addr;
   1d37e:	6a33      	ldr	r3, [r6, #32]
   1d380:	62a3      	str	r3, [r4, #40]	; 0x28
	net_pkt_ll_dst(pkt)->len = net_pkt_ll_src(orig)->len;
   1d382:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
   1d386:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	frag = net_icmpv6_set_chksum(pkt, pkt->frags);
   1d38a:	68a1      	ldr	r1, [r4, #8]
   1d38c:	4620      	mov	r0, r4
   1d38e:	f7ff fbfb 	bl	1cb88 <net_icmpv6_set_chksum>
	if (net_send_data(pkt) >= 0) {
   1d392:	4620      	mov	r0, r4
   1d394:	f7fd f90e 	bl	1a5b4 <net_send_data>
   1d398:	2800      	cmp	r0, #0
   1d39a:	da4c      	bge.n	1d436 <net_icmpv6_send_error+0x2b2>
	int err = -EIO;
   1d39c:	f06f 0504 	mvn.w	r5, #4
	net_pkt_unref(pkt);
   1d3a0:	4620      	mov	r0, r4
   1d3a2:	f7fe fa70 	bl	1b886 <net_pkt_unref>
   1d3a6:	e703      	b.n	1d1b0 <net_icmpv6_send_error+0x2c>
		extra_len = sizeof(struct net_ipv6_hdr) +
   1d3a8:	2530      	movs	r5, #48	; 0x30
   1d3aa:	e724      	b.n	1d1f6 <net_icmpv6_send_error+0x72>
		extra_len = sizeof(struct net_ipv6_hdr) +
   1d3ac:	253c      	movs	r5, #60	; 0x3c
   1d3ae:	e722      	b.n	1d1f6 <net_icmpv6_send_error+0x72>
			extra_len = 0;
   1d3b0:	2500      	movs	r5, #0
   1d3b2:	e720      	b.n	1d1f6 <net_icmpv6_send_error+0x72>
		net_ipaddr_copy(&addr, &NET_IPV6_HDR(orig)->src);
   1d3b4:	af0e      	add	r7, sp, #56	; 0x38
   1d3b6:	463b      	mov	r3, r7
   1d3b8:	6828      	ldr	r0, [r5, #0]
   1d3ba:	6869      	ldr	r1, [r5, #4]
   1d3bc:	46be      	mov	lr, r7
   1d3be:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   1d3c2:	3508      	adds	r5, #8
   1d3c4:	4295      	cmp	r5, r2
   1d3c6:	4677      	mov	r7, lr
   1d3c8:	d1f6      	bne.n	1d3b8 <net_icmpv6_send_error+0x234>
   1d3ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1d3cc:	af0a      	add	r7, sp, #40	; 0x28
   1d3ce:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   1d3d2:	68a3      	ldr	r3, [r4, #8]
   1d3d4:	f8d3 e008 	ldr.w	lr, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1d3d8:	aa12      	add	r2, sp, #72	; 0x48
   1d3da:	f10c 0c28 	add.w	ip, ip, #40	; 0x28
   1d3de:	6828      	ldr	r0, [r5, #0]
   1d3e0:	6869      	ldr	r1, [r5, #4]
   1d3e2:	4613      	mov	r3, r2
   1d3e4:	c303      	stmia	r3!, {r0, r1}
   1d3e6:	3508      	adds	r5, #8
   1d3e8:	4565      	cmp	r5, ip
   1d3ea:	461a      	mov	r2, r3
   1d3ec:	d1f7      	bne.n	1d3de <net_icmpv6_send_error+0x25a>
   1d3ee:	ab12      	add	r3, sp, #72	; 0x48
   1d3f0:	f10e 0508 	add.w	r5, lr, #8
   1d3f4:	461a      	mov	r2, r3
   1d3f6:	ca03      	ldmia	r2!, {r0, r1}
   1d3f8:	4552      	cmp	r2, sl
   1d3fa:	6028      	str	r0, [r5, #0]
   1d3fc:	6069      	str	r1, [r5, #4]
   1d3fe:	4613      	mov	r3, r2
   1d400:	f105 0508 	add.w	r5, r5, #8
   1d404:	d1f6      	bne.n	1d3f4 <net_icmpv6_send_error+0x270>
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, &addr);
   1d406:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
   1d40a:	af1a      	add	r7, sp, #104	; 0x68
   1d40c:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}
   1d410:	4653      	mov	r3, sl
   1d412:	f10e 0218 	add.w	r2, lr, #24
   1d416:	461d      	mov	r5, r3
   1d418:	cd03      	ldmia	r5!, {r0, r1}
   1d41a:	42bd      	cmp	r5, r7
   1d41c:	6010      	str	r0, [r2, #0]
   1d41e:	6051      	str	r1, [r2, #4]
   1d420:	462b      	mov	r3, r5
   1d422:	f102 0208 	add.w	r2, r2, #8
   1d426:	d1f6      	bne.n	1d416 <net_icmpv6_send_error+0x292>
   1d428:	e7a3      	b.n	1d372 <net_icmpv6_send_error+0x1ee>
		err = -ENOMEM;
   1d42a:	f06f 050b 	mvn.w	r5, #11
   1d42e:	e7b7      	b.n	1d3a0 <net_icmpv6_send_error+0x21c>
		err = -ENOMEM;
   1d430:	f06f 050b 	mvn.w	r5, #11
   1d434:	e6bc      	b.n	1d1b0 <net_icmpv6_send_error+0x2c>
		return 0;
   1d436:	2500      	movs	r5, #0
   1d438:	e6ba      	b.n	1d1b0 <net_icmpv6_send_error+0x2c>
	...

0001d43c <net_icmpv6_input>:
	return -EIO;
}

enum net_verdict net_icmpv6_input(struct net_pkt *pkt,
				  u8_t type, u8_t code)
{
   1d43c:	b410      	push	{r4}
   1d43e:	4b0a      	ldr	r3, [pc, #40]	; (1d468 <net_icmpv6_input+0x2c>)
   1d440:	681b      	ldr	r3, [r3, #0]
	struct net_icmpv6_handler *cb;

	net_stats_update_icmp_recv();

	SYS_SLIST_FOR_EACH_CONTAINER(&handlers, cb, node) {
   1d442:	461c      	mov	r4, r3
   1d444:	b16b      	cbz	r3, 1d462 <net_icmpv6_input+0x26>
		if (cb->type == type && (cb->code == code || cb->code == 0)) {
   1d446:	791b      	ldrb	r3, [r3, #4]
   1d448:	428b      	cmp	r3, r1
   1d44a:	d107      	bne.n	1d45c <net_icmpv6_input+0x20>
   1d44c:	7963      	ldrb	r3, [r4, #5]
   1d44e:	4293      	cmp	r3, r2
   1d450:	d102      	bne.n	1d458 <net_icmpv6_input+0x1c>
			return cb->handler(pkt);
   1d452:	68a3      	ldr	r3, [r4, #8]
	}

	net_stats_update_icmp_drop();

	return NET_DROP;
}
   1d454:	bc10      	pop	{r4}
			return cb->handler(pkt);
   1d456:	4718      	bx	r3
		if (cb->type == type && (cb->code == code || cb->code == 0)) {
   1d458:	2b00      	cmp	r3, #0
   1d45a:	d0fa      	beq.n	1d452 <net_icmpv6_input+0x16>
	return node->next;
   1d45c:	6823      	ldr	r3, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&handlers, cb, node) {
   1d45e:	2b00      	cmp	r3, #0
   1d460:	d1ef      	bne.n	1d442 <net_icmpv6_input+0x6>
}
   1d462:	2002      	movs	r0, #2
   1d464:	bc10      	pop	{r4}
   1d466:	4770      	bx	lr
   1d468:	200027dc 	.word	0x200027dc

0001d46c <net_icmpv6_init>:
	.handler = handle_echo_request,
};

void net_icmpv6_init(void)
{
	net_icmpv6_register_handler(&echo_request_handler);
   1d46c:	4801      	ldr	r0, [pc, #4]	; (1d474 <net_icmpv6_init+0x8>)
   1d46e:	f7ff bb81 	b.w	1cb74 <net_icmpv6_register_handler>
   1d472:	bf00      	nop
   1d474:	2000a138 	.word	0x2000a138

0001d478 <net_nbr_unref>:
#if defined(CONFIG_NET_DEBUG_IPV6_NBR_CACHE)
	NET_DBG("nbr %p ref %u (%s():%d)", nbr, nbr->ref - 1, caller, line);
#else
	NET_DBG("nbr %p ref %u", nbr, nbr->ref - 1);
#endif
	if (--nbr->ref) {
   1d478:	7803      	ldrb	r3, [r0, #0]
   1d47a:	3b01      	subs	r3, #1
   1d47c:	b2db      	uxtb	r3, r3
   1d47e:	7003      	strb	r3, [r0, #0]
   1d480:	b913      	cbnz	r3, 1d488 <net_nbr_unref+0x10>
		return;
	}

	if (nbr->remove) {
   1d482:	6903      	ldr	r3, [r0, #16]
   1d484:	b103      	cbz	r3, 1d488 <net_nbr_unref+0x10>
		nbr->remove(nbr);
   1d486:	4718      	bx	r3
   1d488:	4770      	bx	lr

0001d48a <net_nbr_get>:
			((sizeof(struct net_nbr) +
			  start->size + start->extra_data_size) * idx));
}

struct net_nbr *net_nbr_get(struct net_nbr_table *table)
{
   1d48a:	b530      	push	{r4, r5, lr}
	int i;

	for (i = 0; i < table->nbr_count; i++) {
   1d48c:	8905      	ldrh	r5, [r0, #8]
   1d48e:	2100      	movs	r1, #0
   1d490:	42a9      	cmp	r1, r5
   1d492:	db01      	blt.n	1d498 <net_nbr_get+0xe>

			return net_nbr_ref(nbr);
		}
	}

	return NULL;
   1d494:	2200      	movs	r2, #0
   1d496:	e00d      	b.n	1d4b4 <net_nbr_get+0x2a>
		struct net_nbr *nbr = get_nbr(table->nbr, i);
   1d498:	6804      	ldr	r4, [r0, #0]
			  start->size + start->extra_data_size) * idx));
   1d49a:	88a2      	ldrh	r2, [r4, #4]
   1d49c:	8863      	ldrh	r3, [r4, #2]
   1d49e:	4413      	add	r3, r2
   1d4a0:	3314      	adds	r3, #20
   1d4a2:	434b      	muls	r3, r1
	return (struct net_nbr *)((void *)start +
   1d4a4:	18e2      	adds	r2, r4, r3
		if (!nbr->ref) {
   1d4a6:	5ce3      	ldrb	r3, [r4, r3]
   1d4a8:	b933      	cbnz	r3, 1d4b8 <net_nbr_get+0x2e>
			nbr->data = nbr->__nbr;
   1d4aa:	f102 0314 	add.w	r3, r2, #20
   1d4ae:	60d3      	str	r3, [r2, #12]
	nbr->ref++;
   1d4b0:	2301      	movs	r3, #1
   1d4b2:	7013      	strb	r3, [r2, #0]
}
   1d4b4:	4610      	mov	r0, r2
   1d4b6:	bd30      	pop	{r4, r5, pc}
	for (i = 0; i < table->nbr_count; i++) {
   1d4b8:	3101      	adds	r1, #1
   1d4ba:	e7e9      	b.n	1d490 <net_nbr_get+0x6>

0001d4bc <net_nbr_link>:

int net_nbr_link(struct net_nbr *nbr, struct net_if *iface,
		 struct net_linkaddr *lladdr)
{
   1d4bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int i, avail = -1;

	if (nbr->idx != NET_NBR_LLADDR_UNKNOWN) {
   1d4c0:	7843      	ldrb	r3, [r0, #1]
   1d4c2:	2bff      	cmp	r3, #255	; 0xff
{
   1d4c4:	4607      	mov	r7, r0
   1d4c6:	4688      	mov	r8, r1
   1d4c8:	4691      	mov	r9, r2
	if (nbr->idx != NET_NBR_LLADDR_UNKNOWN) {
   1d4ca:	d144      	bne.n	1d556 <net_nbr_link+0x9a>
   1d4cc:	4e26      	ldr	r6, [pc, #152]	; (1d568 <net_nbr_link+0xac>)
   1d4ce:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1d4d2:	2500      	movs	r5, #0
		return -EALREADY;
	}

	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
		if (avail < 0 && !net_neighbor_lladdr[i].ref) {
   1d4d4:	1c62      	adds	r2, r4, #1
   1d4d6:	d103      	bne.n	1d4e0 <net_nbr_link+0x24>
   1d4d8:	79b3      	ldrb	r3, [r6, #6]
   1d4da:	2b00      	cmp	r3, #0
   1d4dc:	bf08      	it	eq
   1d4de:	462c      	moveq	r4, r5
			avail = i;
		}

		if (net_neighbor_lladdr[i].ref &&
   1d4e0:	79b3      	ldrb	r3, [r6, #6]
   1d4e2:	b19b      	cbz	r3, 1d50c <net_nbr_link+0x50>
		    !memcmp(lladdr->addr,
   1d4e4:	f899 2004 	ldrb.w	r2, [r9, #4]
   1d4e8:	f8d9 0000 	ldr.w	r0, [r9]
   1d4ec:	4631      	mov	r1, r6
   1d4ee:	f7e3 f923 	bl	738 <memcmp>
		if (net_neighbor_lladdr[i].ref &&
   1d4f2:	b958      	cbnz	r0, 1d50c <net_nbr_link+0x50>
			    net_neighbor_lladdr[i].lladdr.addr,
			    lladdr->len)) {
			/* We found same lladdr in nbr cache so just
			 * increase the ref count.
			 */
			net_neighbor_lladdr[i].ref++;
   1d4f4:	4b1d      	ldr	r3, [pc, #116]	; (1d56c <net_nbr_link+0xb0>)
   1d4f6:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
   1d4fa:	4413      	add	r3, r2
   1d4fc:	7a1a      	ldrb	r2, [r3, #8]
   1d4fe:	3201      	adds	r2, #1
   1d500:	721a      	strb	r2, [r3, #8]

			nbr->idx = i;
   1d502:	707d      	strb	r5, [r7, #1]
			nbr->iface = iface;
   1d504:	f8c7 8008 	str.w	r8, [r7, #8]

			return 0;
   1d508:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1d50c:	3501      	adds	r5, #1
   1d50e:	2d08      	cmp	r5, #8
   1d510:	f106 0609 	add.w	r6, r6, #9
   1d514:	d1de      	bne.n	1d4d4 <net_nbr_link+0x18>
		}
	}

	if (avail < 0) {
   1d516:	1c63      	adds	r3, r4, #1
   1d518:	d021      	beq.n	1d55e <net_nbr_link+0xa2>
	}

	/* There was no existing entry in the lladdr cache,
	 * so allocate one for this lladdr.
	 */
	net_neighbor_lladdr[avail].ref++;
   1d51a:	4d14      	ldr	r5, [pc, #80]	; (1d56c <net_nbr_link+0xb0>)
   1d51c:	00e6      	lsls	r6, r4, #3
   1d51e:	1930      	adds	r0, r6, r4
   1d520:	182b      	adds	r3, r5, r0
   1d522:	7a1a      	ldrb	r2, [r3, #8]
   1d524:	3201      	adds	r2, #1
   1d526:	721a      	strb	r2, [r3, #8]
	nbr->idx = avail;
   1d528:	707c      	strb	r4, [r7, #1]

	net_linkaddr_set(&net_neighbor_lladdr[avail].lladdr, lladdr->addr,
   1d52a:	f8d9 1000 	ldr.w	r1, [r9]
   1d52e:	f899 2004 	ldrb.w	r2, [r9, #4]
 * This value should always be <= NET_LINK_ADDR_MAX_LENGTH.
 */
static inline int net_linkaddr_set(struct net_linkaddr_storage *lladdr_store,
				   u8_t *new_addr, u8_t new_len)
{
	if (!lladdr_store || !new_addr) {
   1d532:	b131      	cbz	r1, 1d542 <net_nbr_link+0x86>
		return -EINVAL;
	}

	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
   1d534:	2a06      	cmp	r2, #6
   1d536:	d804      	bhi.n	1d542 <net_nbr_link+0x86>
		return -EMSGSIZE;
	}

	lladdr_store->len = new_len;
	memcpy(lladdr_store->addr, new_addr, new_len);
   1d538:	3002      	adds	r0, #2
	lladdr_store->len = new_len;
   1d53a:	705a      	strb	r2, [r3, #1]
	memcpy(lladdr_store->addr, new_addr, new_len);
   1d53c:	4428      	add	r0, r5
   1d53e:	f7e3 f928 	bl	792 <memcpy>
			 lladdr->len);
	net_neighbor_lladdr[avail].lladdr.len = lladdr->len;
   1d542:	4434      	add	r4, r6
   1d544:	4425      	add	r5, r4
   1d546:	f899 3004 	ldrb.w	r3, [r9, #4]
   1d54a:	706b      	strb	r3, [r5, #1]

	nbr->iface = iface;

	return 0;
   1d54c:	2000      	movs	r0, #0
	nbr->iface = iface;
   1d54e:	f8c7 8008 	str.w	r8, [r7, #8]
	return 0;
   1d552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EALREADY;
   1d556:	f06f 0044 	mvn.w	r0, #68	; 0x44
   1d55a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -ENOENT;
   1d55e:	f06f 0001 	mvn.w	r0, #1
}
   1d562:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1d566:	bf00      	nop
   1d568:	200027e6 	.word	0x200027e6
   1d56c:	200027e4 	.word	0x200027e4

0001d570 <net_nbr_unlink>:

int net_nbr_unlink(struct net_nbr *nbr, struct net_linkaddr *lladdr)
{
   1d570:	b510      	push	{r4, lr}
   1d572:	4604      	mov	r4, r0
	ARG_UNUSED(lladdr);

	if (nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
   1d574:	7840      	ldrb	r0, [r0, #1]
   1d576:	28ff      	cmp	r0, #255	; 0xff
   1d578:	d014      	beq.n	1d5a4 <net_nbr_unlink+0x34>
	}

	NET_ASSERT(nbr->idx < CONFIG_NET_IPV6_MAX_NEIGHBORS);
	NET_ASSERT(net_neighbor_lladdr[nbr->idx].ref > 0);

	net_neighbor_lladdr[nbr->idx].ref--;
   1d57a:	4a0c      	ldr	r2, [pc, #48]	; (1d5ac <net_nbr_unlink+0x3c>)
   1d57c:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
   1d580:	4413      	add	r3, r2
   1d582:	7a19      	ldrb	r1, [r3, #8]
   1d584:	3901      	subs	r1, #1
   1d586:	b2c9      	uxtb	r1, r1
   1d588:	7219      	strb	r1, [r3, #8]

	if (!net_neighbor_lladdr[nbr->idx].ref) {
   1d58a:	b931      	cbnz	r1, 1d59a <net_nbr_unlink+0x2a>
		memset(net_neighbor_lladdr[nbr->idx].lladdr.addr, 0,
   1d58c:	2309      	movs	r3, #9
   1d58e:	fb03 2000 	mla	r0, r3, r0, r2
   1d592:	3002      	adds	r0, #2
   1d594:	2206      	movs	r2, #6
   1d596:	f7e3 f928 	bl	7ea <memset>
		       sizeof(net_neighbor_lladdr[nbr->idx].lladdr.addr));
	}

	nbr->idx = NET_NBR_LLADDR_UNKNOWN;
   1d59a:	23ff      	movs	r3, #255	; 0xff
	nbr->iface = NULL;
   1d59c:	2000      	movs	r0, #0
	nbr->idx = NET_NBR_LLADDR_UNKNOWN;
   1d59e:	7063      	strb	r3, [r4, #1]
	nbr->iface = NULL;
   1d5a0:	60a0      	str	r0, [r4, #8]

	return 0;
   1d5a2:	bd10      	pop	{r4, pc}
		return -EALREADY;
   1d5a4:	f06f 0044 	mvn.w	r0, #68	; 0x44
}
   1d5a8:	bd10      	pop	{r4, pc}
   1d5aa:	bf00      	nop
   1d5ac:	200027e4 	.word	0x200027e4

0001d5b0 <net_nbr_get_lladdr>:
	NET_ASSERT_INFO(idx < CONFIG_NET_IPV6_MAX_NEIGHBORS,
			"idx %d >= max %d", idx,
			CONFIG_NET_IPV6_MAX_NEIGHBORS);

	return &net_neighbor_lladdr[idx].lladdr;
}
   1d5b0:	4b02      	ldr	r3, [pc, #8]	; (1d5bc <net_nbr_get_lladdr+0xc>)
	return &net_neighbor_lladdr[idx].lladdr;
   1d5b2:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
}
   1d5b6:	4418      	add	r0, r3
   1d5b8:	4770      	bx	lr
   1d5ba:	bf00      	nop
   1d5bc:	200027e4 	.word	0x200027e4

0001d5c0 <net_buf_frags_len>:
{
   1d5c0:	4603      	mov	r3, r0
	size_t bytes = 0;
   1d5c2:	2000      	movs	r0, #0
	while (buf) {
   1d5c4:	b903      	cbnz	r3, 1d5c8 <net_buf_frags_len+0x8>
}
   1d5c6:	4770      	bx	lr
		bytes += buf->len;
   1d5c8:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   1d5ca:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   1d5cc:	4410      	add	r0, r2
   1d5ce:	e7f9      	b.n	1d5c4 <net_buf_frags_len+0x4>

0001d5d0 <net_is_ipv6_addr_unspecified>:
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1d5d0:	6802      	ldr	r2, [r0, #0]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1d5d2:	b942      	cbnz	r2, 1d5e6 <net_is_ipv6_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1d5d4:	6843      	ldr	r3, [r0, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1d5d6:	b933      	cbnz	r3, 1d5e6 <net_is_ipv6_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1d5d8:	6882      	ldr	r2, [r0, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1d5da:	b922      	cbnz	r2, 1d5e6 <net_is_ipv6_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   1d5dc:	68c0      	ldr	r0, [r0, #12]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1d5de:	fab0 f080 	clz	r0, r0
   1d5e2:	0940      	lsrs	r0, r0, #5
   1d5e4:	4770      	bx	lr
   1d5e6:	2000      	movs	r0, #0
   1d5e8:	4770      	bx	lr

0001d5ea <net_if_get_ll_reserve>:
   1d5ea:	6843      	ldr	r3, [r0, #4]
   1d5ec:	689b      	ldr	r3, [r3, #8]
   1d5ee:	4718      	bx	r3

0001d5f0 <ipv6_nbr_set_state>:
	return "<invalid state>";
}

static void ipv6_nbr_set_state(struct net_nbr *nbr,
			       enum net_ipv6_nbr_state new_state)
{
   1d5f0:	68c3      	ldr	r3, [r0, #12]
	if (new_state == net_ipv6_nbr_data(nbr)->state ||
   1d5f2:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
   1d5f6:	428a      	cmp	r2, r1
   1d5f8:	d003      	beq.n	1d602 <ipv6_nbr_set_state+0x12>
   1d5fa:	2a05      	cmp	r2, #5

	NET_DBG("nbr %p %s -> %s", nbr,
		net_ipv6_nbr_state2str(net_ipv6_nbr_data(nbr)->state),
		net_ipv6_nbr_state2str(new_state));

	net_ipv6_nbr_data(nbr)->state = new_state;
   1d5fc:	bf18      	it	ne
   1d5fe:	f883 1064 	strbne.w	r1, [r3, #100]	; 0x64
   1d602:	4770      	bx	lr

0001d604 <net_neighbor_table_clear>:

	return;
}

void net_neighbor_table_clear(struct net_nbr_table *table)
{
   1d604:	4770      	bx	lr

0001d606 <nbr_clear_ns_pending>:
{
   1d606:	b510      	push	{r4, lr}
   1d608:	4604      	mov	r4, r0
	k_delayed_work_cancel(&data->send_ns);
   1d60a:	303c      	adds	r0, #60	; 0x3c
   1d60c:	f004 fe18 	bl	22240 <k_delayed_work_cancel>
	if (data->pending) {
   1d610:	6820      	ldr	r0, [r4, #0]
   1d612:	b118      	cbz	r0, 1d61c <nbr_clear_ns_pending+0x16>
		net_pkt_unref(data->pending);
   1d614:	f7fe f937 	bl	1b886 <net_pkt_unref>
		data->pending = NULL;
   1d618:	2300      	movs	r3, #0
   1d61a:	6023      	str	r3, [r4, #0]
   1d61c:	bd10      	pop	{r4, pc}

0001d61e <nbr_free>:
{
   1d61e:	b510      	push	{r4, lr}
   1d620:	4604      	mov	r4, r0
	nbr_clear_ns_pending(net_ipv6_nbr_data(nbr));
   1d622:	68c0      	ldr	r0, [r0, #12]
   1d624:	f7ff ffef 	bl	1d606 <nbr_clear_ns_pending>
	k_delayed_work_cancel(&net_ipv6_nbr_data(nbr)->reachable);
   1d628:	68e0      	ldr	r0, [r4, #12]
   1d62a:	3014      	adds	r0, #20
   1d62c:	f004 fe08 	bl	22240 <k_delayed_work_cancel>
	net_nbr_unref(nbr);
   1d630:	4620      	mov	r0, r4
   1d632:	f7ff ff21 	bl	1d478 <net_nbr_unref>
	net_nbr_unlink(nbr, NULL);
   1d636:	4620      	mov	r0, r4
   1d638:	2100      	movs	r1, #0
}
   1d63a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	net_nbr_unlink(nbr, NULL);
   1d63e:	f7ff bf97 	b.w	1d570 <net_nbr_unlink>

0001d642 <net_linkaddr_set>:
{
   1d642:	b510      	push	{r4, lr}
	if (!lladdr_store || !new_addr) {
   1d644:	b140      	cbz	r0, 1d658 <net_linkaddr_set+0x16>
   1d646:	b139      	cbz	r1, 1d658 <net_linkaddr_set+0x16>
	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
   1d648:	2a06      	cmp	r2, #6
   1d64a:	d808      	bhi.n	1d65e <net_linkaddr_set+0x1c>
	lladdr_store->len = new_len;
   1d64c:	7042      	strb	r2, [r0, #1]
	memcpy(lladdr_store->addr, new_addr, new_len);
   1d64e:	3002      	adds	r0, #2
   1d650:	f7e3 f89f 	bl	792 <memcpy>

	return 0;
   1d654:	2000      	movs	r0, #0
   1d656:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1d658:	f06f 0015 	mvn.w	r0, #21
   1d65c:	bd10      	pop	{r4, pc}
		return -EMSGSIZE;
   1d65e:	f06f 0023 	mvn.w	r0, #35	; 0x23
}
   1d662:	bd10      	pop	{r4, pc}

0001d664 <net_is_solicited>:
{
   1d664:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   1d666:	a901      	add	r1, sp, #4
   1d668:	f7ff fcc8 	bl	1cffc <net_icmpv6_get_na_hdr>
	if (!na_hdr) {
   1d66c:	b110      	cbz	r0, 1d674 <net_is_solicited+0x10>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_SOLICITED;
   1d66e:	7800      	ldrb	r0, [r0, #0]
   1d670:	f3c0 1080 	ubfx	r0, r0, #6, #1
}
   1d674:	b007      	add	sp, #28
   1d676:	f85d fb04 	ldr.w	pc, [sp], #4

0001d67a <net_is_override>:
{
   1d67a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   1d67c:	a901      	add	r1, sp, #4
   1d67e:	f7ff fcbd 	bl	1cffc <net_icmpv6_get_na_hdr>
	if (!na_hdr) {
   1d682:	b110      	cbz	r0, 1d68a <net_is_override+0x10>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_OVERRIDE;
   1d684:	7800      	ldrb	r0, [r0, #0]
   1d686:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   1d68a:	b007      	add	sp, #28
   1d68c:	f85d fb04 	ldr.w	pc, [sp], #4

0001d690 <net_is_router>:
{
   1d690:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   1d692:	a901      	add	r1, sp, #4
   1d694:	f7ff fcb2 	bl	1cffc <net_icmpv6_get_na_hdr>
	if (!na_hdr) {
   1d698:	b108      	cbz	r0, 1d69e <net_is_router+0xe>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_ROUTER;
   1d69a:	7800      	ldrb	r0, [r0, #0]
   1d69c:	09c0      	lsrs	r0, r0, #7
}
   1d69e:	b007      	add	sp, #28
   1d6a0:	f85d fb04 	ldr.w	pc, [sp], #4

0001d6a4 <setup_headers>:
	       llao_len - lladdr->len - 2);
}

static void setup_headers(struct net_pkt *pkt, u8_t nd6_len,
			  u8_t icmp_type)
{
   1d6a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d6a6:	4605      	mov	r5, r0
	net_buf_add(pkt->frags,
   1d6a8:	6880      	ldr	r0, [r0, #8]
{
   1d6aa:	460e      	mov	r6, r1
	net_buf_add(pkt->frags,
   1d6ac:	3008      	adds	r0, #8
   1d6ae:	212c      	movs	r1, #44	; 0x2c
{
   1d6b0:	4617      	mov	r7, r2
	net_buf_add(pkt->frags,
   1d6b2:	f7fb fe77 	bl	193a4 <net_buf_simple_add>
   1d6b6:	68ab      	ldr	r3, [r5, #8]
   1d6b8:	689b      	ldr	r3, [r3, #8]
		    sizeof(struct net_ipv6_hdr) +
		    sizeof(struct net_icmp_hdr));

	NET_IPV6_HDR(pkt)->vtc = 0x60;
   1d6ba:	2260      	movs	r2, #96	; 0x60
   1d6bc:	701a      	strb	r2, [r3, #0]
	NET_IPV6_HDR(pkt)->tcflow = 0;
	NET_IPV6_HDR(pkt)->flow = 0;
	NET_IPV6_HDR(pkt)->len[0] = 0;
	NET_IPV6_HDR(pkt)->len[1] = NET_ICMPH_LEN + nd6_len;

	NET_IPV6_HDR(pkt)->nexthdr = IPPROTO_ICMPV6;
   1d6be:	223a      	movs	r2, #58	; 0x3a
	NET_IPV6_HDR(pkt)->tcflow = 0;
   1d6c0:	2400      	movs	r4, #0
	NET_IPV6_HDR(pkt)->nexthdr = IPPROTO_ICMPV6;
   1d6c2:	719a      	strb	r2, [r3, #6]
	NET_IPV6_HDR(pkt)->len[1] = NET_ICMPH_LEN + nd6_len;
   1d6c4:	3604      	adds	r6, #4
	NET_IPV6_HDR(pkt)->hop_limit = NET_IPV6_ND_HOP_LIMIT;
   1d6c6:	22ff      	movs	r2, #255	; 0xff
	NET_IPV6_HDR(pkt)->tcflow = 0;
   1d6c8:	705c      	strb	r4, [r3, #1]
	NET_IPV6_HDR(pkt)->flow = 0;
   1d6ca:	709c      	strb	r4, [r3, #2]
   1d6cc:	70dc      	strb	r4, [r3, #3]
	NET_IPV6_HDR(pkt)->len[0] = 0;
   1d6ce:	711c      	strb	r4, [r3, #4]
	NET_IPV6_HDR(pkt)->len[1] = NET_ICMPH_LEN + nd6_len;
   1d6d0:	715e      	strb	r6, [r3, #5]
	NET_IPV6_HDR(pkt)->hop_limit = NET_IPV6_ND_HOP_LIMIT;
   1d6d2:	71da      	strb	r2, [r3, #7]

	/* In this special case where we know there are no long extension
	 * headers, so we can use this header cast.
	 */
	net_pkt_icmp_data(pkt)->type = icmp_type;
   1d6d4:	4628      	mov	r0, r5
   1d6d6:	f7fe fb21 	bl	1bd1c <net_pkt_icmp_data>
   1d6da:	7007      	strb	r7, [r0, #0]
	net_pkt_icmp_data(pkt)->code = 0;
   1d6dc:	4628      	mov	r0, r5
   1d6de:	f7fe fb1d 	bl	1bd1c <net_pkt_icmp_data>
   1d6e2:	7044      	strb	r4, [r0, #1]
   1d6e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001d6e6 <net_pkt_ll_clear>:
{
   1d6e6:	b510      	push	{r4, lr}
	return pkt->frags->data;
   1d6e8:	6883      	ldr	r3, [r0, #8]
	return net_pkt_ip_data(pkt) - net_pkt_ll_reserve(pkt);
   1d6ea:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
{
   1d6ee:	4604      	mov	r4, r0
	return net_pkt_ip_data(pkt) - net_pkt_ll_reserve(pkt);
   1d6f0:	6898      	ldr	r0, [r3, #8]
	memset(net_pkt_ll(pkt), 0, net_pkt_ll_reserve(pkt));
   1d6f2:	2100      	movs	r1, #0
   1d6f4:	1a80      	subs	r0, r0, r2
   1d6f6:	f7e3 f878 	bl	7ea <memset>
	net_pkt_ll_src(pkt)->addr = NULL;
   1d6fa:	2300      	movs	r3, #0
	net_pkt_ll_src(pkt)->len = 0;
   1d6fc:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	net_pkt_ll_src(pkt)->addr = NULL;
   1d700:	6223      	str	r3, [r4, #32]
	net_pkt_ll_src(pkt)->len = 0;
   1d702:	bd10      	pop	{r4, pc}

0001d704 <set_llao>:
{
   1d704:	b570      	push	{r4, r5, r6, lr}
	llao[NET_ICMPV6_OPT_TYPE_OFFSET] = type;
   1d706:	700b      	strb	r3, [r1, #0]
	llao[NET_ICMPV6_OPT_LEN_OFFSET] = llao_len >> 3;
   1d708:	08d3      	lsrs	r3, r2, #3
{
   1d70a:	460c      	mov	r4, r1
   1d70c:	4606      	mov	r6, r0
	llao[NET_ICMPV6_OPT_LEN_OFFSET] = llao_len >> 3;
   1d70e:	704b      	strb	r3, [r1, #1]
{
   1d710:	4615      	mov	r5, r2
	memcpy(&llao[NET_ICMPV6_OPT_DATA_OFFSET], lladdr->addr, lladdr->len);
   1d712:	6801      	ldr	r1, [r0, #0]
   1d714:	7902      	ldrb	r2, [r0, #4]
   1d716:	1ca0      	adds	r0, r4, #2
   1d718:	f7e3 f83b 	bl	792 <memcpy>
	memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   1d71c:	7930      	ldrb	r0, [r6, #4]
	       llao_len - lladdr->len - 2);
   1d71e:	1a2a      	subs	r2, r5, r0
	memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   1d720:	3002      	adds	r0, #2
   1d722:	4420      	add	r0, r4
   1d724:	3a02      	subs	r2, #2
   1d726:	2100      	movs	r1, #0
}
   1d728:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   1d72c:	f7e3 b85d 	b.w	7ea <memset>

0001d730 <update_ll_reserve.part.32>:
static struct net_pkt *update_ll_reserve(struct net_pkt *pkt,
   1d730:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d734:	4680      	mov	r8, r0
	reserve = net_if_get_ll_reserve(net_pkt_iface(pkt), addr);
   1d736:	6940      	ldr	r0, [r0, #20]
   1d738:	f7ff ff57 	bl	1d5ea <net_if_get_ll_reserve>
	if (reserve == net_pkt_ll_reserve(pkt)) {
   1d73c:	f898 3034 	ldrb.w	r3, [r8, #52]	; 0x34
   1d740:	4283      	cmp	r3, r0
   1d742:	d04a      	beq.n	1d7da <update_ll_reserve.part.32+0xaa>
	orig_frag = pkt->frags;
   1d744:	f8d8 7008 	ldr.w	r7, [r8, #8]
	net_pkt_set_ll_reserve(pkt, reserve);
   1d748:	f888 0034 	strb.w	r0, [r8, #52]	; 0x34
	pkt->frags = NULL;
   1d74c:	2500      	movs	r5, #0
	copy_len = orig_frag->len;
   1d74e:	89be      	ldrh	r6, [r7, #12]
	pkt->frags = NULL;
   1d750:	f8c8 5008 	str.w	r5, [r8, #8]
	pos = 0;
   1d754:	46a9      	mov	r9, r5
	room_len = 0;
   1d756:	462c      	mov	r4, r5
			room_len = 0;
   1d758:	46ab      	mov	fp, r5
		if (!room_len) {
   1d75a:	b974      	cbnz	r4, 1d77a <update_ll_reserve.part.32+0x4a>
			frag = net_pkt_get_frag(pkt, K_FOREVER);
   1d75c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1d760:	4640      	mov	r0, r8
   1d762:	f7fe f82b 	bl	1b7bc <net_pkt_get_frag>
			net_pkt_frag_add(pkt, frag);
   1d766:	4601      	mov	r1, r0
			frag = net_pkt_get_frag(pkt, K_FOREVER);
   1d768:	4605      	mov	r5, r0
			net_pkt_frag_add(pkt, frag);
   1d76a:	4640      	mov	r0, r8
   1d76c:	f7fe f8b2 	bl	1b8d4 <net_pkt_frag_add>
			room_len = net_buf_tailroom(frag);
   1d770:	f105 0008 	add.w	r0, r5, #8
   1d774:	f7fb fe82 	bl	1947c <net_buf_simple_tailroom>
   1d778:	b284      	uxth	r4, r0
		if (room_len >= copy_len) {
   1d77a:	42b4      	cmp	r4, r6
   1d77c:	f105 0008 	add.w	r0, r5, #8
   1d780:	d313      	bcc.n	1d7aa <update_ll_reserve.part.32+0x7a>
			memcpy(net_buf_add(frag, copy_len),
   1d782:	4631      	mov	r1, r6
   1d784:	f7fb fe0e 	bl	193a4 <net_buf_simple_add>
			       orig_frag->data + pos, copy_len);
   1d788:	68b9      	ldr	r1, [r7, #8]
			memcpy(net_buf_add(frag, copy_len),
   1d78a:	4632      	mov	r2, r6
   1d78c:	4449      	add	r1, r9
   1d78e:	f7e3 f800 	bl	792 <memcpy>
			orig_frag = orig_frag->frags;
   1d792:	f8d7 a000 	ldr.w	sl, [r7]
			tmp->frags = NULL;
   1d796:	f8c7 b000 	str.w	fp, [r7]
			net_pkt_frag_unref(tmp);
   1d79a:	4638      	mov	r0, r7
   1d79c:	f7fe f86f 	bl	1b87e <net_pkt_frag_unref>
			if (!orig_frag) {
   1d7a0:	f1ba 0f00 	cmp.w	sl, #0
   1d7a4:	d112      	bne.n	1d7cc <update_ll_reserve.part.32+0x9c>
   1d7a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memcpy(net_buf_add(frag, room_len),
   1d7aa:	4621      	mov	r1, r4
   1d7ac:	f7fb fdfa 	bl	193a4 <net_buf_simple_add>
			       orig_frag->data + pos, room_len);
   1d7b0:	68b9      	ldr	r1, [r7, #8]
			memcpy(net_buf_add(frag, room_len),
   1d7b2:	4622      	mov	r2, r4
   1d7b4:	4449      	add	r1, r9
   1d7b6:	f7e2 ffec 	bl	792 <memcpy>
			copy_len -= room_len;
   1d7ba:	1b36      	subs	r6, r6, r4
			pos += room_len;
   1d7bc:	44a1      	add	r9, r4
			copy_len -= room_len;
   1d7be:	b2b6      	uxth	r6, r6
			pos += room_len;
   1d7c0:	fa1f f989 	uxth.w	r9, r9
   1d7c4:	46ba      	mov	sl, r7
			room_len = 0;
   1d7c6:	2400      	movs	r4, #0
   1d7c8:	4657      	mov	r7, sl
   1d7ca:	e7c6      	b.n	1d75a <update_ll_reserve.part.32+0x2a>
			room_len -= copy_len;
   1d7cc:	1ba4      	subs	r4, r4, r6
   1d7ce:	b2a4      	uxth	r4, r4
			copy_len = orig_frag->len;
   1d7d0:	f8ba 600c 	ldrh.w	r6, [sl, #12]
			pos = 0;
   1d7d4:	f04f 0900 	mov.w	r9, #0
   1d7d8:	e7f6      	b.n	1d7c8 <update_ll_reserve.part.32+0x98>
   1d7da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001d7de <net_if_ipv6_addr_lookup_by_iface>:
{
   1d7de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d7e0:	4605      	mov	r5, r0
   1d7e2:	460f      	mov	r7, r1
   1d7e4:	f100 0630 	add.w	r6, r0, #48	; 0x30
   1d7e8:	2400      	movs	r4, #0
		if (!iface->ipv6.unicast[i].is_used ||
   1d7ea:	f896 3064 	ldrb.w	r3, [r6, #100]	; 0x64
   1d7ee:	b93b      	cbnz	r3, 1d800 <net_if_ipv6_addr_lookup_by_iface+0x22>
   1d7f0:	346c      	adds	r4, #108	; 0x6c
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1d7f2:	f5b4 7fa2 	cmp.w	r4, #324	; 0x144
   1d7f6:	f106 066c 	add.w	r6, r6, #108	; 0x6c
   1d7fa:	d1f6      	bne.n	1d7ea <net_if_ipv6_addr_lookup_by_iface+0xc>
	return NULL;
   1d7fc:	2000      	movs	r0, #0
   1d7fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!iface->ipv6.unicast[i].is_used ||
   1d800:	f836 3c04 	ldrh.w	r3, [r6, #-4]
   1d804:	2b0a      	cmp	r3, #10
   1d806:	d1f3      	bne.n	1d7f0 <net_if_ipv6_addr_lookup_by_iface+0x12>
	if (memcmp(addr1, addr2, bytes)) {
   1d808:	2210      	movs	r2, #16
   1d80a:	4631      	mov	r1, r6
   1d80c:	4638      	mov	r0, r7
   1d80e:	f7e2 ff93 	bl	738 <memcmp>
   1d812:	2800      	cmp	r0, #0
   1d814:	d1ec      	bne.n	1d7f0 <net_if_ipv6_addr_lookup_by_iface+0x12>
			return &iface->ipv6.unicast[i];
   1d816:	342c      	adds	r4, #44	; 0x2c
   1d818:	1928      	adds	r0, r5, r4
}
   1d81a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001d81c <nbr_new.isra.30>:
static struct net_nbr *nbr_new(struct net_if *iface,
   1d81c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1d820:	4606      	mov	r6, r0
	struct net_nbr *nbr = net_nbr_get(&net_neighbor.table);
   1d822:	481d      	ldr	r0, [pc, #116]	; (1d898 <nbr_new.isra.30+0x7c>)
static struct net_nbr *nbr_new(struct net_if *iface,
   1d824:	460d      	mov	r5, r1
   1d826:	4690      	mov	r8, r2
	struct net_nbr *nbr = net_nbr_get(&net_neighbor.table);
   1d828:	f7ff fe2f 	bl	1d48a <net_nbr_get>
	if (!nbr) {
   1d82c:	4604      	mov	r4, r0
   1d82e:	b370      	cbz	r0, 1d88e <nbr_new.isra.30+0x72>
	nbr->idx = NET_NBR_LLADDR_UNKNOWN;
   1d830:	23ff      	movs	r3, #255	; 0xff
   1d832:	7043      	strb	r3, [r0, #1]
	nbr->iface = iface;
   1d834:	6086      	str	r6, [r0, #8]
	net_ipaddr_copy(&net_ipv6_nbr_data(nbr)->addr, addr);
   1d836:	462b      	mov	r3, r5
   1d838:	68c6      	ldr	r6, [r0, #12]
   1d83a:	466d      	mov	r5, sp
   1d83c:	f103 0e10 	add.w	lr, r3, #16
   1d840:	466f      	mov	r7, sp
   1d842:	6818      	ldr	r0, [r3, #0]
   1d844:	6859      	ldr	r1, [r3, #4]
   1d846:	462a      	mov	r2, r5
   1d848:	c203      	stmia	r2!, {r0, r1}
   1d84a:	3308      	adds	r3, #8
   1d84c:	4573      	cmp	r3, lr
   1d84e:	4615      	mov	r5, r2
   1d850:	d1f7      	bne.n	1d842 <nbr_new.isra.30+0x26>
   1d852:	1d33      	adds	r3, r6, #4
   1d854:	aa04      	add	r2, sp, #16
   1d856:	463d      	mov	r5, r7
   1d858:	cd03      	ldmia	r5!, {r0, r1}
   1d85a:	4295      	cmp	r5, r2
   1d85c:	6018      	str	r0, [r3, #0]
   1d85e:	6059      	str	r1, [r3, #4]
   1d860:	462f      	mov	r7, r5
   1d862:	f103 0308 	add.w	r3, r3, #8
   1d866:	d1f6      	bne.n	1d856 <nbr_new.isra.30+0x3a>
	ipv6_nbr_set_state(nbr, state);
   1d868:	4641      	mov	r1, r8
   1d86a:	4620      	mov	r0, r4
   1d86c:	f7ff fec0 	bl	1d5f0 <ipv6_nbr_set_state>
   1d870:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_init(&net_ipv6_nbr_data(nbr)->reachable,
   1d872:	490a      	ldr	r1, [pc, #40]	; (1d89c <nbr_new.isra.30+0x80>)
	net_ipv6_nbr_data(nbr)->is_router = is_router;
   1d874:	2301      	movs	r3, #1
   1d876:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
	net_ipv6_nbr_data(nbr)->pending = NULL;
   1d87a:	2300      	movs	r3, #0
   1d87c:	f840 3b14 	str.w	r3, [r0], #20
	k_delayed_work_init(&net_ipv6_nbr_data(nbr)->reachable,
   1d880:	f004 fcc0 	bl	22204 <k_delayed_work_init>
	k_delayed_work_init(&net_ipv6_nbr_data(nbr)->send_ns,
   1d884:	68e0      	ldr	r0, [r4, #12]
   1d886:	4906      	ldr	r1, [pc, #24]	; (1d8a0 <nbr_new.isra.30+0x84>)
   1d888:	303c      	adds	r0, #60	; 0x3c
   1d88a:	f004 fcbb 	bl	22204 <k_delayed_work_init>
}
   1d88e:	4620      	mov	r0, r4
   1d890:	b004      	add	sp, #16
   1d892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d896:	bf00      	nop
   1d898:	2000a15c 	.word	0x2000a15c
   1d89c:	0001edd9 	.word	0x0001edd9
   1d8a0:	0001d921 	.word	0x0001d921

0001d8a4 <net_neighbor_data_remove>:
   1d8a4:	4770      	bx	lr

0001d8a6 <net_pkt_append_u8>:
{
   1d8a6:	b507      	push	{r0, r1, r2, lr}
   1d8a8:	aa02      	add	r2, sp, #8
	return net_pkt_append(pkt, len, data, timeout) == len;
   1d8aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
{
   1d8ae:	f802 1d01 	strb.w	r1, [r2, #-1]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   1d8b2:	2101      	movs	r1, #1
   1d8b4:	f7fe f8da 	bl	1ba6c <net_pkt_append>
}
   1d8b8:	1e43      	subs	r3, r0, #1
   1d8ba:	4258      	negs	r0, r3
   1d8bc:	4158      	adcs	r0, r3
   1d8be:	b003      	add	sp, #12
   1d8c0:	f85d fb04 	ldr.w	pc, [sp], #4

0001d8c4 <net_pkt_append_be16>:
{
   1d8c4:	b507      	push	{r0, r1, r2, lr}
	u16_t value = sys_cpu_to_be16(data);
   1d8c6:	aa02      	add	r2, sp, #8
   1d8c8:	ba49      	rev16	r1, r1
   1d8ca:	f822 1d02 	strh.w	r1, [r2, #-2]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   1d8ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d8d2:	2102      	movs	r1, #2
   1d8d4:	f7fe f8ca 	bl	1ba6c <net_pkt_append>
}
   1d8d8:	1e83      	subs	r3, r0, #2
   1d8da:	4258      	negs	r0, r3
   1d8dc:	4158      	adcs	r0, r3
   1d8de:	b003      	add	sp, #12
   1d8e0:	f85d fb04 	ldr.w	pc, [sp], #4

0001d8e4 <nbr_lookup.isra.29>:
static struct net_nbr *nbr_lookup(struct net_nbr_table *table,
   1d8e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d8e6:	4c0d      	ldr	r4, [pc, #52]	; (1d91c <nbr_lookup.isra.29+0x38>)
   1d8e8:	4605      	mov	r5, r0
   1d8ea:	460e      	mov	r6, r1
   1d8ec:	f504 6780 	add.w	r7, r4, #1024	; 0x400
		if (!nbr->ref) {
   1d8f0:	7823      	ldrb	r3, [r4, #0]
   1d8f2:	b923      	cbnz	r3, 1d8fe <nbr_lookup.isra.29+0x1a>
   1d8f4:	3480      	adds	r4, #128	; 0x80
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1d8f6:	42bc      	cmp	r4, r7
   1d8f8:	d1fa      	bne.n	1d8f0 <nbr_lookup.isra.29+0xc>
	return NULL;
   1d8fa:	2000      	movs	r0, #0
   1d8fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (iface && nbr->iface != iface) {
   1d8fe:	b115      	cbz	r5, 1d906 <nbr_lookup.isra.29+0x22>
   1d900:	68a3      	ldr	r3, [r4, #8]
   1d902:	429d      	cmp	r5, r3
   1d904:	d1f6      	bne.n	1d8f4 <nbr_lookup.isra.29+0x10>
		if (net_ipv6_addr_cmp(&net_ipv6_nbr_data(nbr)->addr, addr)) {
   1d906:	68e0      	ldr	r0, [r4, #12]
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1d908:	2210      	movs	r2, #16
   1d90a:	4631      	mov	r1, r6
   1d90c:	3004      	adds	r0, #4
   1d90e:	f7e2 ff13 	bl	738 <memcmp>
   1d912:	2800      	cmp	r0, #0
   1d914:	d1ee      	bne.n	1d8f4 <nbr_lookup.isra.29+0x10>
   1d916:	4620      	mov	r0, r4
}
   1d918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d91a:	bf00      	nop
   1d91c:	2000a168 	.word	0x2000a168

0001d920 <ns_reply_timeout>:
{
   1d920:	4910      	ldr	r1, [pc, #64]	; (1d964 <ns_reply_timeout+0x44>)
   1d922:	b538      	push	{r3, r4, r5, lr}
	struct net_ipv6_nbr_data *data = CONTAINER_OF(work,
   1d924:	f1a0 023c 	sub.w	r2, r0, #60	; 0x3c
{
   1d928:	4604      	mov	r4, r0
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1d92a:	2300      	movs	r3, #0
   1d92c:	eb01 15c3 	add.w	r5, r1, r3, lsl #7
		if (nbr->data == (u8_t *)data) {
   1d930:	68e8      	ldr	r0, [r5, #12]
   1d932:	4282      	cmp	r2, r0
   1d934:	d011      	beq.n	1d95a <ns_reply_timeout+0x3a>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1d936:	3301      	adds	r3, #1
   1d938:	2b08      	cmp	r3, #8
   1d93a:	d1f7      	bne.n	1d92c <ns_reply_timeout+0xc>
   1d93c:	bd38      	pop	{r3, r4, r5, pc}
	net_pkt_unref(data->pending);
   1d93e:	f7fd ffa2 	bl	1b886 <net_pkt_unref>
	net_pkt_unref(data->pending);
   1d942:	f854 0c3c 	ldr.w	r0, [r4, #-60]
   1d946:	f7fd ff9e 	bl	1b886 <net_pkt_unref>
	data->pending = NULL;
   1d94a:	2300      	movs	r3, #0
   1d94c:	f844 3c3c 	str.w	r3, [r4, #-60]
	net_nbr_unref(nbr);
   1d950:	4628      	mov	r0, r5
}
   1d952:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_nbr_unref(nbr);
   1d956:	f7ff bd8f 	b.w	1d478 <net_nbr_unref>
	if (!data->pending) {
   1d95a:	f854 0c3c 	ldr.w	r0, [r4, #-60]
   1d95e:	2800      	cmp	r0, #0
   1d960:	d1ed      	bne.n	1d93e <ns_reply_timeout+0x1e>
   1d962:	bd38      	pop	{r3, r4, r5, pc}
   1d964:	2000a168 	.word	0x2000a168

0001d968 <net_ipv6_nbr_rm>:
{
   1d968:	b570      	push	{r4, r5, r6, lr}
   1d96a:	4605      	mov	r5, r0
   1d96c:	460e      	mov	r6, r1
	nbr = nbr_lookup(&net_neighbor.table, iface, addr);
   1d96e:	f7ff ffb9 	bl	1d8e4 <nbr_lookup.isra.29>
	if (!nbr) {
   1d972:	4604      	mov	r4, r0
   1d974:	b170      	cbz	r0, 1d994 <net_ipv6_nbr_rm+0x2c>
	net_route_del_by_nexthop(iface, addr);
   1d976:	4631      	mov	r1, r6
   1d978:	4628      	mov	r0, r5
   1d97a:	f001 ff5f 	bl	1f83c <net_route_del_by_nexthop>
	nbr_free(nbr);
   1d97e:	4620      	mov	r0, r4
   1d980:	f7ff fe4d 	bl	1d61e <nbr_free>
   1d984:	2300      	movs	r3, #0
   1d986:	461a      	mov	r2, r3
   1d988:	4629      	mov	r1, r5
   1d98a:	4803      	ldr	r0, [pc, #12]	; (1d998 <net_ipv6_nbr_rm+0x30>)
   1d98c:	f001 fe2e 	bl	1f5ec <net_mgmt_event_notify_with_info>
	return true;
   1d990:	2001      	movs	r0, #1
   1d992:	bd70      	pop	{r4, r5, r6, pc}
}
   1d994:	bd70      	pop	{r4, r5, r6, pc}
   1d996:	bf00      	nop
   1d998:	f0600010 	.word	0xf0600010

0001d99c <net_ipv6_unspecified_address>:
}
   1d99c:	4800      	ldr	r0, [pc, #0]	; (1d9a0 <net_ipv6_unspecified_address+0x4>)
   1d99e:	4770      	bx	lr
   1d9a0:	000272a8 	.word	0x000272a8

0001d9a4 <net_ipv6_create_raw>:
{
   1d9a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d9a8:	460e      	mov	r6, r1
   1d9aa:	b089      	sub	sp, #36	; 0x24
	header = net_pkt_get_frag(pkt, K_FOREVER);
   1d9ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
{
   1d9b0:	4605      	mov	r5, r0
   1d9b2:	4617      	mov	r7, r2
   1d9b4:	4699      	mov	r9, r3
	header = net_pkt_get_frag(pkt, K_FOREVER);
   1d9b6:	f7fd ff01 	bl	1b7bc <net_pkt_get_frag>
	net_pkt_frag_insert(pkt, header);
   1d9ba:	4601      	mov	r1, r0
	header = net_pkt_get_frag(pkt, K_FOREVER);
   1d9bc:	4680      	mov	r8, r0
	net_pkt_frag_insert(pkt, header);
   1d9be:	4628      	mov	r0, r5
   1d9c0:	f7fd ffa2 	bl	1b908 <net_pkt_frag_insert>
   1d9c4:	f8d5 e008 	ldr.w	lr, [r5, #8]
	return pkt->frags->data;
   1d9c8:	f8de 4008 	ldr.w	r4, [lr, #8]
	NET_IPV6_HDR(pkt)->tcflow = 0;
   1d9cc:	2200      	movs	r2, #0
	NET_IPV6_HDR(pkt)->vtc = 0x60;
   1d9ce:	2360      	movs	r3, #96	; 0x60
   1d9d0:	7023      	strb	r3, [r4, #0]
	NET_IPV6_HDR(pkt)->tcflow = 0;
   1d9d2:	7062      	strb	r2, [r4, #1]
	NET_IPV6_HDR(pkt)->flow = 0;
   1d9d4:	70a2      	strb	r2, [r4, #2]
   1d9d6:	70e2      	strb	r2, [r4, #3]
	NET_IPV6_HDR(pkt)->nexthdr = 0;
   1d9d8:	71a2      	strb	r2, [r4, #6]
   1d9da:	f895 203e 	ldrb.w	r2, [r5, #62]	; 0x3e
	NET_IPV6_HDR(pkt)->hop_limit = net_pkt_ipv6_hop_limit(pkt);
   1d9de:	71e2      	strb	r2, [r4, #7]
	if (NET_IPV6_HDR(pkt)->hop_limit == 0) {
   1d9e0:	b912      	cbnz	r2, 1d9e8 <net_ipv6_create_raw+0x44>
   1d9e2:	f899 324c 	ldrb.w	r3, [r9, #588]	; 0x24c
		NET_IPV6_HDR(pkt)->hop_limit =
   1d9e6:	71e3      	strb	r3, [r4, #7]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, dst);
   1d9e8:	463a      	mov	r2, r7
   1d9ea:	f107 0910 	add.w	r9, r7, #16
   1d9ee:	466b      	mov	r3, sp
   1d9f0:	466f      	mov	r7, sp
   1d9f2:	6810      	ldr	r0, [r2, #0]
   1d9f4:	6851      	ldr	r1, [r2, #4]
   1d9f6:	469c      	mov	ip, r3
   1d9f8:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   1d9fc:	3208      	adds	r2, #8
   1d9fe:	454a      	cmp	r2, r9
   1da00:	4663      	mov	r3, ip
   1da02:	d1f6      	bne.n	1d9f2 <net_ipv6_create_raw+0x4e>
   1da04:	f104 0c18 	add.w	ip, r4, #24
   1da08:	aa04      	add	r2, sp, #16
   1da0a:	463b      	mov	r3, r7
   1da0c:	cb03      	ldmia	r3!, {r0, r1}
   1da0e:	4293      	cmp	r3, r2
   1da10:	f8cc 0000 	str.w	r0, [ip]
   1da14:	f8cc 1004 	str.w	r1, [ip, #4]
   1da18:	461f      	mov	r7, r3
   1da1a:	f10c 0c08 	add.w	ip, ip, #8
   1da1e:	d1f4      	bne.n	1da0a <net_ipv6_create_raw+0x66>
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, src);
   1da20:	4633      	mov	r3, r6
   1da22:	4617      	mov	r7, r2
   1da24:	f106 0c10 	add.w	ip, r6, #16
   1da28:	6818      	ldr	r0, [r3, #0]
   1da2a:	6859      	ldr	r1, [r3, #4]
   1da2c:	463e      	mov	r6, r7
   1da2e:	c603      	stmia	r6!, {r0, r1}
   1da30:	3308      	adds	r3, #8
   1da32:	4563      	cmp	r3, ip
   1da34:	4637      	mov	r7, r6
   1da36:	d1f7      	bne.n	1da28 <net_ipv6_create_raw+0x84>
   1da38:	4613      	mov	r3, r2
   1da3a:	3408      	adds	r4, #8
   1da3c:	ae08      	add	r6, sp, #32
   1da3e:	461a      	mov	r2, r3
   1da40:	ca03      	ldmia	r2!, {r0, r1}
   1da42:	42b2      	cmp	r2, r6
   1da44:	6020      	str	r0, [r4, #0]
   1da46:	6061      	str	r1, [r4, #4]
   1da48:	4613      	mov	r3, r2
   1da4a:	f104 0408 	add.w	r4, r4, #8
   1da4e:	d1f6      	bne.n	1da3e <net_ipv6_create_raw+0x9a>
	pkt->ipv6_ext_len = len;
   1da50:	2300      	movs	r3, #0
   1da52:	f885 303f 	strb.w	r3, [r5, #63]	; 0x3f
	NET_IPV6_HDR(pkt)->nexthdr = next_header;
   1da56:	f8de 3008 	ldr.w	r3, [lr, #8]
   1da5a:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   1da5e:	719a      	strb	r2, [r3, #6]
	pkt->family = family;
   1da60:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
   1da64:	220a      	movs	r2, #10
	pkt->ip_hdr_len = len;
   1da66:	2128      	movs	r1, #40	; 0x28
	pkt->family = family;
   1da68:	f362 03c6 	bfi	r3, r2, #3, #4
	pkt->ip_hdr_len = len;
   1da6c:	f885 1035 	strb.w	r1, [r5, #53]	; 0x35
	pkt->family = family;
   1da70:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
	net_buf_add(header, sizeof(struct net_ipv6_hdr));
   1da74:	f108 0008 	add.w	r0, r8, #8
   1da78:	f7fb fc94 	bl	193a4 <net_buf_simple_add>
}
   1da7c:	4628      	mov	r0, r5
   1da7e:	b009      	add	sp, #36	; 0x24
   1da80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001da84 <net_ipv6_create>:
{
   1da84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1da86:	4605      	mov	r5, r0
   1da88:	460e      	mov	r6, r1
   1da8a:	461f      	mov	r7, r3
	if (!src) {
   1da8c:	4614      	mov	r4, r2
   1da8e:	b902      	cbnz	r2, 1da92 <net_ipv6_create+0xe>
		src = ((struct sockaddr_in6_ptr *)&context->local)->sin6_addr;
   1da90:	68c4      	ldr	r4, [r0, #12]
	if (net_is_ipv6_addr_unspecified(src)
   1da92:	4620      	mov	r0, r4
   1da94:	f7ff fd9c 	bl	1d5d0 <net_is_ipv6_addr_unspecified>
   1da98:	b910      	cbnz	r0, 1daa0 <net_ipv6_create+0x1c>
	    || net_is_ipv6_addr_mcast(src)) {
   1da9a:	7823      	ldrb	r3, [r4, #0]
   1da9c:	2bff      	cmp	r3, #255	; 0xff
   1da9e:	d104      	bne.n	1daaa <net_ipv6_create+0x26>
		src = net_if_ipv6_select_src_addr(net_pkt_iface(pkt),
   1daa0:	4639      	mov	r1, r7
   1daa2:	6970      	ldr	r0, [r6, #20]
   1daa4:	f7fd fb78 	bl	1b198 <net_if_ipv6_select_src_addr>
   1daa8:	4604      	mov	r4, r0
	return net_if_get_by_index(context->iface);
   1daaa:	f895 005c 	ldrb.w	r0, [r5, #92]	; 0x5c
   1daae:	f7fd fcb7 	bl	1b420 <net_if_get_by_index>
	if (context->flags & NET_CONTEXT_PROTO) {
   1dab2:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
	return IPPROTO_UDP;
   1dab6:	f013 0f40 	tst.w	r3, #64	; 0x40
   1daba:	bf14      	ite	ne
   1dabc:	2306      	movne	r3, #6
   1dabe:	2311      	moveq	r3, #17
	return net_ipv6_create_raw(pkt,
   1dac0:	9300      	str	r3, [sp, #0]
   1dac2:	463a      	mov	r2, r7
   1dac4:	4603      	mov	r3, r0
   1dac6:	4621      	mov	r1, r4
   1dac8:	4630      	mov	r0, r6
   1daca:	f7ff ff6b 	bl	1d9a4 <net_ipv6_create_raw>
}
   1dace:	b003      	add	sp, #12
   1dad0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001dad2 <net_ipv6_finalize_raw>:
{
   1dad2:	b538      	push	{r3, r4, r5, lr}
   1dad4:	4604      	mov	r4, r0
   1dad6:	460d      	mov	r5, r1
	net_pkt_compact(pkt);
   1dad8:	f7fd ff83 	bl	1b9e2 <net_pkt_compact>
   1dadc:	68a1      	ldr	r1, [r4, #8]
	return net_buf_frags_len(pkt->frags);
   1dade:	4608      	mov	r0, r1
   1dae0:	f7ff fd6e 	bl	1d5c0 <net_buf_frags_len>
	total_len -= sizeof(struct net_ipv6_hdr);
   1dae4:	3828      	subs	r0, #40	; 0x28
	return pkt->frags->data;
   1dae6:	688b      	ldr	r3, [r1, #8]
	NET_IPV6_HDR(pkt)->len[0] = total_len >> 8;
   1dae8:	0a02      	lsrs	r2, r0, #8
	if (next_header == IPPROTO_UDP) {
   1daea:	2d11      	cmp	r5, #17
	NET_IPV6_HDR(pkt)->len[0] = total_len >> 8;
   1daec:	711a      	strb	r2, [r3, #4]
	NET_IPV6_HDR(pkt)->len[1] = total_len & 0xff;
   1daee:	7158      	strb	r0, [r3, #5]
	if (next_header == IPPROTO_UDP) {
   1daf0:	d104      	bne.n	1dafc <net_ipv6_finalize_raw+0x2a>
		net_udp_set_chksum(pkt, pkt->frags);
   1daf2:	4620      	mov	r0, r4
   1daf4:	f003 f80d 	bl	20b12 <net_udp_set_chksum>
}
   1daf8:	2000      	movs	r0, #0
   1dafa:	bd38      	pop	{r3, r4, r5, pc}
	if (next_header == IPPROTO_TCP) {
   1dafc:	2d06      	cmp	r5, #6
   1dafe:	d103      	bne.n	1db08 <net_ipv6_finalize_raw+0x36>
		net_tcp_set_chksum(pkt, pkt->frags);
   1db00:	4620      	mov	r0, r4
   1db02:	f002 fdea 	bl	206da <net_tcp_set_chksum>
   1db06:	e7f7      	b.n	1daf8 <net_ipv6_finalize_raw+0x26>
	if (next_header == IPPROTO_ICMPV6) {
   1db08:	2d3a      	cmp	r5, #58	; 0x3a
   1db0a:	d1f5      	bne.n	1daf8 <net_ipv6_finalize_raw+0x26>
		net_icmpv6_set_chksum(pkt, pkt->frags);
   1db0c:	4620      	mov	r0, r4
   1db0e:	f7ff f83b 	bl	1cb88 <net_icmpv6_set_chksum>
   1db12:	e7f1      	b.n	1daf8 <net_ipv6_finalize_raw+0x26>

0001db14 <send_mldv2_raw>:

	return pkt;
}

static int send_mldv2_raw(struct net_if *iface, struct net_buf *frags)
{
   1db14:	b5f0      	push	{r4, r5, r6, r7, lr}
   1db16:	b08b      	sub	sp, #44	; 0x2c
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   1db18:	f240 23ff 	movw	r3, #767	; 0x2ff
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   1db1c:	2500      	movs	r5, #0
   1db1e:	460f      	mov	r7, r1
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   1db20:	f8ad 3018 	strh.w	r3, [sp, #24]
	int ret;

	/* Sent to all MLDv2-capable routers */
	net_ipv6_addr_create(&dst, 0xff02, 0, 0, 0, 0, 0, 0, 0x0016);

	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, &dst),
   1db24:	a906      	add	r1, sp, #24
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   1db26:	f44f 53b0 	mov.w	r3, #5632	; 0x1600
{
   1db2a:	4606      	mov	r6, r0
   1db2c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   1db30:	f8ad 501a 	strh.w	r5, [sp, #26]
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   1db34:	f8ad 501c 	strh.w	r5, [sp, #28]
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   1db38:	f8ad 501e 	strh.w	r5, [sp, #30]
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   1db3c:	f8ad 5020 	strh.w	r5, [sp, #32]
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   1db40:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   1db44:	f8ad 5024 	strh.w	r5, [sp, #36]	; 0x24
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, &dst),
   1db48:	f7ff fd4f 	bl	1d5ea <net_if_get_ll_reserve>
   1db4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1db50:	f7fd fe1c 	bl	1b78c <net_pkt_get_reserve_tx>
				     K_FOREVER);

	pkt = net_ipv6_create_raw(pkt,
   1db54:	a906      	add	r1, sp, #24
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, &dst),
   1db56:	4604      	mov	r4, r0
	pkt = net_ipv6_create_raw(pkt,
   1db58:	4630      	mov	r0, r6
   1db5a:	f7fd fb1d 	bl	1b198 <net_if_ipv6_select_src_addr>
   1db5e:	4633      	mov	r3, r6
   1db60:	4601      	mov	r1, r0
   1db62:	aa06      	add	r2, sp, #24
   1db64:	4620      	mov	r0, r4
   1db66:	9500      	str	r5, [sp, #0]
   1db68:	f7ff ff1c 	bl	1d9a4 <net_ipv6_create_raw>
   1db6c:	6883      	ldr	r3, [r0, #8]
				  net_if_ipv6_select_src_addr(iface, &dst),
				  &dst,
				  iface,
				  NET_IPV6_NEXTHDR_HBHO);

	NET_IPV6_HDR(pkt)->hop_limit = 1; /* RFC 3810 ch 7.4 */
   1db6e:	689a      	ldr	r2, [r3, #8]
   1db70:	2101      	movs	r1, #1
   1db72:	71d1      	strb	r1, [r2, #7]

	net_pkt_set_ipv6_hdr_prev(pkt, pkt->frags->len);
   1db74:	899b      	ldrh	r3, [r3, #12]
	pkt->ipv6_prev_hdr_start = offset;
   1db76:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
	pkt = net_ipv6_create_raw(pkt,
   1db7a:	4604      	mov	r4, r0

	/* Add hop-by-hop option and router alert option, RFC 3810 ch 5. */
	net_pkt_append_u8(pkt, IPPROTO_ICMPV6);
   1db7c:	213a      	movs	r1, #58	; 0x3a
   1db7e:	f7ff fe92 	bl	1d8a6 <net_pkt_append_u8>
	net_pkt_append_u8(pkt, 0); /* length (0 means 8 bytes) */
   1db82:	4629      	mov	r1, r5
   1db84:	4620      	mov	r0, r4
   1db86:	f7ff fe8e 	bl	1d8a6 <net_pkt_append_u8>

#define ROUTER_ALERT_LEN 8

	/* IPv6 router alert option is described in RFC 2711. */
	net_pkt_append_be16(pkt, 0x0502); /* RFC 2711 ch 2.1 */
   1db8a:	f240 5102 	movw	r1, #1282	; 0x502
   1db8e:	4620      	mov	r0, r4
   1db90:	f7ff fe98 	bl	1d8c4 <net_pkt_append_be16>
	net_pkt_append_be16(pkt, 0); /* pkt contains MLD msg */
   1db94:	4629      	mov	r1, r5
   1db96:	4620      	mov	r0, r4
   1db98:	f7ff fe94 	bl	1d8c4 <net_pkt_append_be16>

	net_pkt_append_u8(pkt, 0); /* padding */
   1db9c:	4629      	mov	r1, r5
   1db9e:	4620      	mov	r0, r4
   1dba0:	f7ff fe81 	bl	1d8a6 <net_pkt_append_u8>
	net_pkt_append_u8(pkt, 0); /* padding */
   1dba4:	4629      	mov	r1, r5
   1dba6:	4620      	mov	r0, r4
   1dba8:	f7ff fe7d 	bl	1d8a6 <net_pkt_append_u8>

	/* ICMPv6 header */
	net_pkt_append_u8(pkt, NET_ICMPV6_MLDv2); /* type */
   1dbac:	218f      	movs	r1, #143	; 0x8f
   1dbae:	4620      	mov	r0, r4
   1dbb0:	f7ff fe79 	bl	1d8a6 <net_pkt_append_u8>
	net_pkt_append_u8(pkt, 0); /* code */
   1dbb4:	4629      	mov	r1, r5
   1dbb6:	4620      	mov	r0, r4
   1dbb8:	f7ff fe75 	bl	1d8a6 <net_pkt_append_u8>
	net_pkt_append_be16(pkt, 0); /* chksum */
   1dbbc:	4629      	mov	r1, r5
   1dbbe:	4620      	mov	r0, r4
   1dbc0:	f7ff fe80 	bl	1d8c4 <net_pkt_append_be16>

	pkt->frags->len = NET_IPV6ICMPH_LEN + ROUTER_ALERT_LEN;
   1dbc4:	68a3      	ldr	r3, [r4, #8]
   1dbc6:	2234      	movs	r2, #52	; 0x34
   1dbc8:	819a      	strh	r2, [r3, #12]
	pkt->iface = iface;
   1dbca:	6166      	str	r6, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1dbcc:	7d73      	ldrb	r3, [r6, #21]
   1dbce:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1dbd2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	net_pkt_set_iface(pkt, iface);

	net_pkt_append_be16(pkt, 0); /* reserved field */
   1dbd6:	4629      	mov	r1, r5
   1dbd8:	4620      	mov	r0, r4
   1dbda:	f7ff fe73 	bl	1d8c4 <net_pkt_append_be16>

	/* Insert the actual multicast record(s) here */
	net_pkt_frag_add(pkt, frags);
   1dbde:	4639      	mov	r1, r7
   1dbe0:	4620      	mov	r0, r4
   1dbe2:	f7fd fe77 	bl	1b8d4 <net_pkt_frag_add>

	ret = net_ipv6_finalize_raw(pkt, NET_IPV6_NEXTHDR_HBHO);
   1dbe6:	4629      	mov	r1, r5
   1dbe8:	4620      	mov	r0, r4
   1dbea:	f7ff ff72 	bl	1dad2 <net_ipv6_finalize_raw>
	if (ret < 0) {
   1dbee:	1e06      	subs	r6, r0, #0
   1dbf0:	db2b      	blt.n	1dc4a <send_mldv2_raw+0x136>
	pkt->ipv6_ext_len = len;
   1dbf2:	2308      	movs	r3, #8
   1dbf4:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
	return net_calc_chksum(pkt, IPPROTO_ICMPV6);
   1dbf8:	213a      	movs	r1, #58	; 0x3a
   1dbfa:	4620      	mov	r0, r4
		goto drop;
	}

	net_pkt_set_ipv6_ext_len(pkt, ROUTER_ALERT_LEN);

	net_pkt_write_be16(pkt, pkt->frags,
   1dbfc:	68a7      	ldr	r7, [r4, #8]
   1dbfe:	f7fe fa26 	bl	1c04e <net_calc_chksum>
   1dc02:	213a      	movs	r1, #58	; 0x3a
   1dc04:	4606      	mov	r6, r0
   1dc06:	4620      	mov	r0, r4
   1dc08:	f7fe fa21 	bl	1c04e <net_calc_chksum>
			   NET_IPV6H_LEN + ROUTER_ALERT_LEN + 2,
			   &pos, ntohs(~net_calc_chksum_icmpv6(pkt)));
   1dc0c:	ea6f 2626 	mvn.w	r6, r6, asr #8
   1dc10:	b2f6      	uxtb	r6, r6
   1dc12:	43c0      	mvns	r0, r0
   1dc14:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
	net_pkt_write_be16(pkt, pkt->frags,
   1dc18:	b280      	uxth	r0, r0
						 struct net_buf *frag,
						 u16_t offset,
						 u16_t *pos,
						 u16_t data)
{
	u16_t value = htons(data);
   1dc1a:	0203      	lsls	r3, r0, #8
   1dc1c:	ea43 2010 	orr.w	r0, r3, r0, lsr #8

	return net_pkt_write(pkt, frag, offset, pos, sizeof(u16_t),
   1dc20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1dc24:	9302      	str	r3, [sp, #8]
   1dc26:	f10d 0316 	add.w	r3, sp, #22
   1dc2a:	9301      	str	r3, [sp, #4]
   1dc2c:	2302      	movs	r3, #2
	u16_t value = htons(data);
   1dc2e:	f8ad 0016 	strh.w	r0, [sp, #22]
	return net_pkt_write(pkt, frag, offset, pos, sizeof(u16_t),
   1dc32:	9300      	str	r3, [sp, #0]
   1dc34:	2232      	movs	r2, #50	; 0x32
   1dc36:	ab05      	add	r3, sp, #20
   1dc38:	4639      	mov	r1, r7
   1dc3a:	4620      	mov	r0, r4
   1dc3c:	f7fd ffd2 	bl	1bbe4 <net_pkt_write>

	ret = net_send_data(pkt);
   1dc40:	4620      	mov	r0, r4
   1dc42:	f7fc fcb7 	bl	1a5b4 <net_send_data>
	if (ret < 0) {
   1dc46:	1e06      	subs	r6, r0, #0
   1dc48:	da05      	bge.n	1dc56 <send_mldv2_raw+0x142>
	net_stats_update_ipv6_mld_sent();

	return 0;

drop:
	net_pkt_unref(pkt);
   1dc4a:	4620      	mov	r0, r4
   1dc4c:	f7fd fe1b 	bl	1b886 <net_pkt_unref>
	net_stats_update_icmp_drop();
	net_stats_update_ipv6_mld_drop();

	return ret;
}
   1dc50:	4630      	mov	r0, r6
   1dc52:	b00b      	add	sp, #44	; 0x2c
   1dc54:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return 0;
   1dc56:	462e      	mov	r6, r5
   1dc58:	e7fa      	b.n	1dc50 <send_mldv2_raw+0x13c>
	...

0001dc5c <send_mldv2>:

static int send_mldv2(struct net_if *iface, const struct in6_addr *addr,
		      u8_t mode)
{
   1dc5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1dc5e:	460e      	mov	r6, r1
	struct net_pkt *pkt;
	int ret;

	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, NULL),
   1dc60:	2100      	movs	r1, #0
{
   1dc62:	4617      	mov	r7, r2
   1dc64:	4605      	mov	r5, r0
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, NULL),
   1dc66:	f7ff fcc0 	bl	1d5ea <net_if_get_ll_reserve>
   1dc6a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1dc6e:	f7fd fd8d 	bl	1b78c <net_pkt_get_reserve_tx>
				     K_FOREVER);

	net_pkt_append_be16(pkt, 1); /* number of records */
   1dc72:	2101      	movs	r1, #1
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, NULL),
   1dc74:	4604      	mov	r4, r0
	net_pkt_append_be16(pkt, 1); /* number of records */
   1dc76:	f7ff fe25 	bl	1d8c4 <net_pkt_append_be16>
	net_pkt_append_u8(pkt, record_type);
   1dc7a:	4639      	mov	r1, r7
   1dc7c:	4620      	mov	r0, r4
   1dc7e:	f7ff fe12 	bl	1d8a6 <net_pkt_append_u8>
	net_pkt_append_u8(pkt, 0); /* aux data len */
   1dc82:	2100      	movs	r1, #0
   1dc84:	4620      	mov	r0, r4
   1dc86:	f7ff fe0e 	bl	1d8a6 <net_pkt_append_u8>
	net_pkt_append_be16(pkt, num_sources); /* number of addresses */
   1dc8a:	2101      	movs	r1, #1
   1dc8c:	4620      	mov	r0, r4
   1dc8e:	f7ff fe19 	bl	1d8c4 <net_pkt_append_be16>
	return net_pkt_append(pkt, len, data, timeout) == len;
   1dc92:	4632      	mov	r2, r6
   1dc94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1dc98:	2110      	movs	r1, #16
   1dc9a:	4620      	mov	r0, r4
   1dc9c:	f7fd fee6 	bl	1ba6c <net_pkt_append>
   1dca0:	4a09      	ldr	r2, [pc, #36]	; (1dcc8 <send_mldv2+0x6c>)
   1dca2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1dca6:	2110      	movs	r1, #16
   1dca8:	4620      	mov	r0, r4
   1dcaa:	f7fd fedf 	bl	1ba6c <net_pkt_append>

	pkt = create_mldv2(pkt, addr, mode, 1);

	ret = send_mldv2_raw(iface, pkt->frags);
   1dcae:	68a1      	ldr	r1, [r4, #8]
   1dcb0:	4628      	mov	r0, r5
   1dcb2:	f7ff ff2f 	bl	1db14 <send_mldv2_raw>

	pkt->frags = NULL;
   1dcb6:	2300      	movs	r3, #0
	ret = send_mldv2_raw(iface, pkt->frags);
   1dcb8:	4605      	mov	r5, r0
	pkt->frags = NULL;
   1dcba:	60a3      	str	r3, [r4, #8]

	net_pkt_unref(pkt);
   1dcbc:	4620      	mov	r0, r4
   1dcbe:	f7fd fde2 	bl	1b886 <net_pkt_unref>

	return ret;
}
   1dcc2:	4628      	mov	r0, r5
   1dcc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1dcc6:	bf00      	nop
   1dcc8:	000272a8 	.word	0x000272a8

0001dccc <handle_mld_query>:

	net_pkt_unref(pkt);
}

static enum net_verdict handle_mld_query(struct net_pkt *pkt)
{
   1dccc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1dcd0:	4604      	mov	r4, r0
   1dcd2:	b08d      	sub	sp, #52	; 0x34
	return net_buf_frags_len(pkt->frags);
   1dcd4:	6880      	ldr	r0, [r0, #8]
   1dcd6:	f7ff fc73 	bl	1d5c0 <net_buf_frags_len>
	net_stats_update_ipv6_mld_recv();

	/* offset tells now where the ICMPv6 header is starting */
	frag = net_frag_get_pos(pkt,
				net_pkt_ip_hdr_len(pkt) +
				net_pkt_ipv6_ext_len(pkt) +
   1dcda:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
				net_pkt_ip_hdr_len(pkt) +
   1dcde:	f894 1035 	ldrb.w	r1, [r4, #53]	; 0x35
	frag = net_frag_get_pos(pkt,
   1dce2:	4419      	add	r1, r3
   1dce4:	aa06      	add	r2, sp, #24
   1dce6:	3104      	adds	r1, #4
	u16_t total_len = net_pkt_get_len(pkt);
   1dce8:	b286      	uxth	r6, r0
	frag = net_frag_get_pos(pkt,
   1dcea:	4620      	mov	r0, r4
   1dcec:	f7fe f80d 	bl	1bd0a <net_frag_get_pos>
	return net_frag_read(frag, offset, pos, len, NULL);
   1dcf0:	2700      	movs	r7, #0
				sizeof(struct net_icmp_hdr),
				&offset);

	frag = net_frag_read_be16(frag, offset, &pos, &max_rsp_code);
   1dcf2:	ab05      	add	r3, sp, #20
   1dcf4:	f10d 021a 	add.w	r2, sp, #26
   1dcf8:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   1dcfc:	f7fd ff56 	bl	1bbac <net_frag_read_be16>
	frag = net_frag_skip(frag, pos, &pos, 2); /* two reserved bytes */
	frag = net_frag_read(frag, pos, &pos, sizeof(mcast), mcast.s6_addr);
   1dd00:	ad08      	add	r5, sp, #32
   1dd02:	f8bd 101a 	ldrh.w	r1, [sp, #26]
   1dd06:	9700      	str	r7, [sp, #0]
   1dd08:	2302      	movs	r3, #2
   1dd0a:	f10d 021a 	add.w	r2, sp, #26
   1dd0e:	f7fd ff15 	bl	1bb3c <net_frag_read>
   1dd12:	f8bd 101a 	ldrh.w	r1, [sp, #26]
   1dd16:	9500      	str	r5, [sp, #0]
   1dd18:	2310      	movs	r3, #16
   1dd1a:	f10d 021a 	add.w	r2, sp, #26
   1dd1e:	f7fd ff0d 	bl	1bb3c <net_frag_read>
   1dd22:	f8bd 101a 	ldrh.w	r1, [sp, #26]
   1dd26:	9700      	str	r7, [sp, #0]
   1dd28:	2302      	movs	r3, #2
   1dd2a:	f10d 021a 	add.w	r2, sp, #26
   1dd2e:	f7fd ff05 	bl	1bb3c <net_frag_read>
	frag = net_frag_skip(frag, pos, &pos, 2); /* skip S, QRV & QQIC */
	frag = net_frag_read_be16(pkt->frags, pos, &pos, &num_src);
   1dd32:	f10d 0316 	add.w	r3, sp, #22
   1dd36:	f10d 021a 	add.w	r2, sp, #26
   1dd3a:	f8bd 101a 	ldrh.w	r1, [sp, #26]
   1dd3e:	68a0      	ldr	r0, [r4, #8]
   1dd40:	f7fd ff34 	bl	1bbac <net_frag_read_be16>
	if (!frag && pos == 0xffff) {
   1dd44:	b928      	cbnz	r0, 1dd52 <handle_mld_query+0x86>
   1dd46:	f8bd 201a 	ldrh.w	r2, [sp, #26]
   1dd4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1dd4e:	429a      	cmp	r2, r3
   1dd50:	d070      	beq.n	1de34 <handle_mld_query+0x168>
		goto drop;
	}

	pkt_len = sizeof(struct net_ipv6_hdr) +	net_pkt_ipv6_ext_len(pkt) +
		sizeof(struct net_icmp_hdr) + (2 + 2 + 16 + 2 + 2) +
		sizeof(struct in6_addr) * num_src;
   1dd52:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   1dd56:	011b      	lsls	r3, r3, #4
	pkt_len = sizeof(struct net_ipv6_hdr) +	net_pkt_ipv6_ext_len(pkt) +
   1dd58:	f103 0244 	add.w	r2, r3, #68	; 0x44
   1dd5c:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
   1dd60:	4413      	add	r3, r2
   1dd62:	b29b      	uxth	r3, r3

	if ((total_len < pkt_len || pkt_len > NET_IPV6_MTU ||
   1dd64:	429e      	cmp	r6, r3
   1dd66:	d307      	bcc.n	1dd78 <handle_mld_query+0xac>
   1dd68:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
   1dd6c:	d804      	bhi.n	1dd78 <handle_mld_query+0xac>
	return pkt->frags->data;
   1dd6e:	68a3      	ldr	r3, [r4, #8]
	     (NET_IPV6_HDR(pkt)->hop_limit != 1))) {
   1dd70:	689b      	ldr	r3, [r3, #8]
	if ((total_len < pkt_len || pkt_len > NET_IPV6_MTU ||
   1dd72:	79db      	ldrb	r3, [r3, #7]
   1dd74:	2b01      	cmp	r3, #1
   1dd76:	d008      	beq.n	1dd8a <handle_mld_query+0xbe>
		struct net_icmp_hdr hdr, *icmp_hdr;

		icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   1dd78:	a907      	add	r1, sp, #28
   1dd7a:	4620      	mov	r0, r4
   1dd7c:	f7fe ff4e 	bl	1cc1c <net_icmpv6_get_hdr>
		if (!icmp_hdr || icmp_hdr->code != 0) {
   1dd80:	2800      	cmp	r0, #0
   1dd82:	d057      	beq.n	1de34 <handle_mld_query+0x168>
   1dd84:	7843      	ldrb	r3, [r0, #1]
   1dd86:	2b00      	cmp	r3, #0
   1dd88:	d154      	bne.n	1de34 <handle_mld_query+0x168>
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1dd8a:	4628      	mov	r0, r5
   1dd8c:	2210      	movs	r2, #16
   1dd8e:	492b      	ldr	r1, [pc, #172]	; (1de3c <handle_mld_query+0x170>)
   1dd90:	f7e2 fcd2 	bl	738 <memcmp>
			goto drop;
		}
	}

	/* Currently we only support a unspecified address query. */
	if (!net_ipv6_addr_cmp(&mcast, net_ipv6_unspecified_address())) {
   1dd94:	4605      	mov	r5, r0
   1dd96:	2800      	cmp	r0, #0
   1dd98:	d14c      	bne.n	1de34 <handle_mld_query+0x168>
   1dd9a:	6966      	ldr	r6, [r4, #20]
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, NULL),
   1dd9c:	4601      	mov	r1, r0
   1dd9e:	4630      	mov	r0, r6
   1dda0:	f7ff fc23 	bl	1d5ea <net_if_get_ll_reserve>
   1dda4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1dda8:	f7fd fcf0 	bl	1b78c <net_pkt_get_reserve_tx>
	net_pkt_append_u8(pkt, 0); /* This will be the record count */
   1ddac:	4629      	mov	r1, r5
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, NULL),
   1ddae:	4604      	mov	r4, r0
	net_pkt_append_u8(pkt, 0); /* This will be the record count */
   1ddb0:	f7ff fd79 	bl	1d8a6 <net_pkt_append_u8>
   1ddb4:	f506 78bc 	add.w	r8, r6, #376	; 0x178
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1ddb8:	462f      	mov	r7, r5
		if (!iface->ipv6.mcast[i].is_used ||
   1ddba:	f04f 0918 	mov.w	r9, #24
   1ddbe:	fb09 6307 	mla	r3, r9, r7, r6
   1ddc2:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   1ddc6:	07da      	lsls	r2, r3, #31
   1ddc8:	d515      	bpl.n	1ddf6 <handle_mld_query+0x12a>
   1ddca:	079b      	lsls	r3, r3, #30
   1ddcc:	d513      	bpl.n	1ddf6 <handle_mld_query+0x12a>
	net_pkt_append_u8(pkt, record_type);
   1ddce:	2102      	movs	r1, #2
   1ddd0:	4620      	mov	r0, r4
   1ddd2:	f7ff fd68 	bl	1d8a6 <net_pkt_append_u8>
	net_pkt_append_u8(pkt, 0); /* aux data len */
   1ddd6:	2100      	movs	r1, #0
   1ddd8:	4620      	mov	r0, r4
   1ddda:	f7ff fd64 	bl	1d8a6 <net_pkt_append_u8>
	net_pkt_append_be16(pkt, num_sources); /* number of addresses */
   1ddde:	2100      	movs	r1, #0
   1dde0:	4620      	mov	r0, r4
   1dde2:	f7ff fd6f 	bl	1d8c4 <net_pkt_append_be16>
	return net_pkt_append(pkt, len, data, timeout) == len;
   1dde6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ddea:	4642      	mov	r2, r8
   1ddec:	2110      	movs	r1, #16
   1ddee:	4620      	mov	r0, r4
   1ddf0:	f7fd fe3c 	bl	1ba6c <net_pkt_append>
		count++;
   1ddf4:	3501      	adds	r5, #1
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1ddf6:	3701      	adds	r7, #1
   1ddf8:	2f02      	cmp	r7, #2
   1ddfa:	f108 0818 	add.w	r8, r8, #24
   1ddfe:	d1de      	bne.n	1ddbe <handle_mld_query+0xf2>
	if (count > 0) {
   1de00:	b1ad      	cbz	r5, 1de2e <handle_mld_query+0x162>
	return net_pkt_write(pkt, frag, offset, pos, sizeof(u8_t),
   1de02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		net_pkt_write_u8(pkt, pkt->frags, 0, &pos, count);
   1de06:	68a1      	ldr	r1, [r4, #8]
   1de08:	9302      	str	r3, [sp, #8]
   1de0a:	f10d 0313 	add.w	r3, sp, #19
   1de0e:	9301      	str	r3, [sp, #4]
   1de10:	2301      	movs	r3, #1
   1de12:	9300      	str	r3, [sp, #0]
   1de14:	2200      	movs	r2, #0
   1de16:	ab07      	add	r3, sp, #28
   1de18:	4620      	mov	r0, r4
   1de1a:	f88d 5013 	strb.w	r5, [sp, #19]
   1de1e:	f7fd fee1 	bl	1bbe4 <net_pkt_write>
		send_mldv2_raw(iface, pkt->frags);
   1de22:	68a1      	ldr	r1, [r4, #8]
   1de24:	4630      	mov	r0, r6
   1de26:	f7ff fe75 	bl	1db14 <send_mldv2_raw>
		pkt->frags = NULL;
   1de2a:	2300      	movs	r3, #0
   1de2c:	60a3      	str	r3, [r4, #8]
	net_pkt_unref(pkt);
   1de2e:	4620      	mov	r0, r4
   1de30:	f7fd fd29 	bl	1b886 <net_pkt_unref>

drop:
	net_stats_update_ipv6_mld_drop();

	return NET_DROP;
}
   1de34:	2002      	movs	r0, #2
   1de36:	b00d      	add	sp, #52	; 0x34
   1de38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1de3c:	000272a8 	.word	0x000272a8

0001de40 <net_ipv6_finalize>:
	if (context->flags & NET_CONTEXT_PROTO) {
   1de40:	f890 205d 	ldrb.w	r2, [r0, #93]	; 0x5d
{
   1de44:	460b      	mov	r3, r1
   1de46:	f012 0f40 	tst.w	r2, #64	; 0x40
	return net_ipv6_finalize_raw(pkt, net_context_get_ip_proto(context));
   1de4a:	bf14      	ite	ne
   1de4c:	2106      	movne	r1, #6
   1de4e:	2111      	moveq	r1, #17
   1de50:	4618      	mov	r0, r3
   1de52:	f7ff be3e 	b.w	1dad2 <net_ipv6_finalize_raw>

0001de56 <net_ipv6_nbr_lookup>:
	return nbr_lookup(&net_neighbor.table, iface, addr);
   1de56:	f7ff bd45 	b.w	1d8e4 <nbr_lookup.isra.29>

0001de5a <net_ipv6_send_na>:
{
   1de5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1de5e:	4689      	mov	r9, r1
   1de60:	b092      	sub	sp, #72	; 0x48
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, dst),
   1de62:	4611      	mov	r1, r2
{
   1de64:	4615      	mov	r5, r2
   1de66:	461e      	mov	r6, r3
   1de68:	4607      	mov	r7, r0
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, dst),
   1de6a:	f7ff fbbe 	bl	1d5ea <net_if_get_ll_reserve>
   1de6e:	210a      	movs	r1, #10
   1de70:	f7fd fc8c 	bl	1b78c <net_pkt_get_reserve_tx>
	if (!pkt) {
   1de74:	4604      	mov	r4, r0
   1de76:	b138      	cbz	r0, 1de88 <net_ipv6_send_na+0x2e>
	frag = net_pkt_get_frag(pkt, ND_NET_BUF_TIMEOUT);
   1de78:	210a      	movs	r1, #10
   1de7a:	f7fd fc9f 	bl	1b7bc <net_pkt_get_frag>
	if (!frag) {
   1de7e:	4682      	mov	sl, r0
   1de80:	b928      	cbnz	r0, 1de8e <net_ipv6_send_na+0x34>
		net_pkt_unref(pkt);
   1de82:	4620      	mov	r0, r4
   1de84:	f7fd fcff 	bl	1b886 <net_pkt_unref>
		return -ENOMEM;
   1de88:	f06f 000b 	mvn.w	r0, #11
   1de8c:	e03a      	b.n	1df04 <net_ipv6_send_na+0xaa>
	net_pkt_frag_add(pkt, frag);
   1de8e:	4601      	mov	r1, r0
   1de90:	4620      	mov	r0, r4
   1de92:	f7fd fd1f 	bl	1b8d4 <net_pkt_frag_add>
	pkt->iface = iface;
   1de96:	6167      	str	r7, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1de98:	7d7b      	ldrb	r3, [r7, #21]
   1de9a:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1de9e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	pkt->family = family;
   1dea2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   1dea6:	220a      	movs	r2, #10
   1dea8:	f362 03c6 	bfi	r3, r2, #3, #4
   1deac:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	pkt->ip_hdr_len = len;
   1deb0:	2328      	movs	r3, #40	; 0x28
   1deb2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	net_pkt_ll_clear(pkt);
   1deb6:	4620      	mov	r0, r4
   1deb8:	f7ff fc15 	bl	1d6e6 <net_pkt_ll_clear>
   1debc:	7d3b      	ldrb	r3, [r7, #20]
	if (iface->link_addr.len == 6) {
   1debe:	2b06      	cmp	r3, #6
   1dec0:	d023      	beq.n	1df0a <net_ipv6_send_na+0xb0>
	return 0;
   1dec2:	2b08      	cmp	r3, #8
   1dec4:	bf0c      	ite	eq
   1dec6:	2710      	moveq	r7, #16
   1dec8:	2700      	movne	r7, #0
	pkt->ipv6_ext_len = len;
   1deca:	2300      	movs	r3, #0
	setup_headers(pkt, sizeof(struct net_icmpv6_na_hdr) + llao_len,
   1decc:	f107 0814 	add.w	r8, r7, #20
   1ded0:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
   1ded4:	2288      	movs	r2, #136	; 0x88
   1ded6:	f008 01fc 	and.w	r1, r8, #252	; 0xfc
   1deda:	4620      	mov	r0, r4
   1dedc:	f7ff fbe2 	bl	1d6a4 <setup_headers>
	net_buf_add(frag, sizeof(struct net_icmpv6_na_hdr) + llao_len);
   1dee0:	4641      	mov	r1, r8
   1dee2:	f10a 0008 	add.w	r0, sl, #8
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   1dee6:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
	net_buf_add(frag, sizeof(struct net_icmpv6_na_hdr) + llao_len);
   1deea:	f7fb fa5b 	bl	193a4 <net_buf_simple_add>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   1deee:	4651      	mov	r1, sl
   1def0:	4620      	mov	r0, r4
   1def2:	f7ff f883 	bl	1cffc <net_icmpv6_get_na_hdr>
	if (!na_hdr) {
   1def6:	4680      	mov	r8, r0
   1def8:	b948      	cbnz	r0, 1df0e <net_ipv6_send_na+0xb4>
	net_pkt_unref(pkt);
   1defa:	4620      	mov	r0, r4
   1defc:	f7fd fcc3 	bl	1b886 <net_pkt_unref>
	return -EINVAL;
   1df00:	f06f 0015 	mvn.w	r0, #21
}
   1df04:	b012      	add	sp, #72	; 0x48
   1df06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return 8;
   1df0a:	2708      	movs	r7, #8
   1df0c:	e7dd      	b.n	1deca <net_ipv6_send_na+0x70>
	return pkt->frags->data;
   1df0e:	68a3      	ldr	r3, [r4, #8]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, src);
   1df10:	f10d 0c04 	add.w	ip, sp, #4
   1df14:	f8d3 e008 	ldr.w	lr, [r3, #8]
   1df18:	464b      	mov	r3, r9
   1df1a:	f109 0910 	add.w	r9, r9, #16
   1df1e:	6818      	ldr	r0, [r3, #0]
   1df20:	6859      	ldr	r1, [r3, #4]
   1df22:	4662      	mov	r2, ip
   1df24:	c203      	stmia	r2!, {r0, r1}
   1df26:	3308      	adds	r3, #8
   1df28:	454b      	cmp	r3, r9
   1df2a:	4694      	mov	ip, r2
   1df2c:	d1f7      	bne.n	1df1e <net_ipv6_send_na+0xc4>
   1df2e:	f10d 0c04 	add.w	ip, sp, #4
   1df32:	f10e 0208 	add.w	r2, lr, #8
   1df36:	f10d 0914 	add.w	r9, sp, #20
   1df3a:	4663      	mov	r3, ip
   1df3c:	cb03      	ldmia	r3!, {r0, r1}
   1df3e:	454b      	cmp	r3, r9
   1df40:	6010      	str	r0, [r2, #0]
   1df42:	6051      	str	r1, [r2, #4]
   1df44:	469c      	mov	ip, r3
   1df46:	f102 0208 	add.w	r2, r2, #8
   1df4a:	d1f6      	bne.n	1df3a <net_ipv6_send_na+0xe0>
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, dst);
   1df4c:	ab05      	add	r3, sp, #20
   1df4e:	462a      	mov	r2, r5
   1df50:	f105 0910 	add.w	r9, r5, #16
   1df54:	469c      	mov	ip, r3
   1df56:	6810      	ldr	r0, [r2, #0]
   1df58:	6851      	ldr	r1, [r2, #4]
   1df5a:	461d      	mov	r5, r3
   1df5c:	c503      	stmia	r5!, {r0, r1}
   1df5e:	3208      	adds	r2, #8
   1df60:	454a      	cmp	r2, r9
   1df62:	462b      	mov	r3, r5
   1df64:	d1f7      	bne.n	1df56 <net_ipv6_send_na+0xfc>
   1df66:	f10e 0318 	add.w	r3, lr, #24
   1df6a:	aa09      	add	r2, sp, #36	; 0x24
   1df6c:	4665      	mov	r5, ip
   1df6e:	cd03      	ldmia	r5!, {r0, r1}
   1df70:	4295      	cmp	r5, r2
   1df72:	6018      	str	r0, [r3, #0]
   1df74:	6059      	str	r1, [r3, #4]
   1df76:	46ac      	mov	ip, r5
   1df78:	f103 0308 	add.w	r3, r3, #8
   1df7c:	d1f6      	bne.n	1df6c <net_ipv6_send_na+0x112>
	net_ipaddr_copy(&na_hdr->tgt, tgt);
   1df7e:	4633      	mov	r3, r6
   1df80:	f103 0e10 	add.w	lr, r3, #16
   1df84:	4616      	mov	r6, r2
   1df86:	6818      	ldr	r0, [r3, #0]
   1df88:	6859      	ldr	r1, [r3, #4]
   1df8a:	4635      	mov	r5, r6
   1df8c:	c503      	stmia	r5!, {r0, r1}
   1df8e:	3308      	adds	r3, #8
   1df90:	4573      	cmp	r3, lr
   1df92:	462e      	mov	r6, r5
   1df94:	d1f7      	bne.n	1df86 <net_ipv6_send_na+0x12c>
   1df96:	4613      	mov	r3, r2
   1df98:	f108 0504 	add.w	r5, r8, #4
   1df9c:	461a      	mov	r2, r3
   1df9e:	ca03      	ldmia	r2!, {r0, r1}
   1dfa0:	4552      	cmp	r2, sl
   1dfa2:	6028      	str	r0, [r5, #0]
   1dfa4:	6069      	str	r1, [r5, #4]
   1dfa6:	4613      	mov	r3, r2
   1dfa8:	f105 0508 	add.w	r5, r5, #8
   1dfac:	d1f6      	bne.n	1df9c <net_ipv6_send_na+0x142>
		 (u8_t *)net_pkt_icmp_data(pkt) + sizeof(struct net_icmp_hdr) +
   1dfae:	4620      	mov	r0, r4
	set_llao(&net_pkt_iface(pkt)->link_addr,
   1dfb0:	6965      	ldr	r5, [r4, #20]
		 (u8_t *)net_pkt_icmp_data(pkt) + sizeof(struct net_icmp_hdr) +
   1dfb2:	f7fd feb3 	bl	1bd1c <net_pkt_icmp_data>
	set_llao(&net_pkt_iface(pkt)->link_addr,
   1dfb6:	3510      	adds	r5, #16
   1dfb8:	463a      	mov	r2, r7
   1dfba:	f100 0118 	add.w	r1, r0, #24
   1dfbe:	2302      	movs	r3, #2
   1dfc0:	4628      	mov	r0, r5
   1dfc2:	f7ff fb9f 	bl	1d704 <set_llao>
	na_hdr->flags = flags;
   1dfc6:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
   1dfca:	f888 3000 	strb.w	r3, [r8]
	net_icmpv6_set_na_hdr(pkt, na_hdr);
   1dfce:	4641      	mov	r1, r8
   1dfd0:	4620      	mov	r0, r4
   1dfd2:	f7ff f848 	bl	1d066 <net_icmpv6_set_na_hdr>
	pkt->frags->len = NET_IPV6ICMPH_LEN +
   1dfd6:	68a1      	ldr	r1, [r4, #8]
		sizeof(struct net_icmpv6_na_hdr) + llao_len;
   1dfd8:	3740      	adds	r7, #64	; 0x40
	pkt->frags->len = NET_IPV6ICMPH_LEN +
   1dfda:	818f      	strh	r7, [r1, #12]
	net_icmpv6_set_chksum(pkt, pkt->frags);
   1dfdc:	4620      	mov	r0, r4
   1dfde:	f7fe fdd3 	bl	1cb88 <net_icmpv6_set_chksum>
	if (net_send_data(pkt) < 0) {
   1dfe2:	4620      	mov	r0, r4
   1dfe4:	f7fc fae6 	bl	1a5b4 <net_send_data>
   1dfe8:	2800      	cmp	r0, #0
   1dfea:	db86      	blt.n	1defa <net_ipv6_send_na+0xa0>
	return 0;
   1dfec:	2000      	movs	r0, #0
   1dfee:	e789      	b.n	1df04 <net_ipv6_send_na+0xaa>

0001dff0 <net_ipv6_nbr_set_reachable_timer>:
	k_delayed_work_submit(&net_ipv6_nbr_data(nbr)->reachable, time);
   1dff0:	68c9      	ldr	r1, [r1, #12]
   1dff2:	f8d0 2244 	ldr.w	r2, [r0, #580]	; 0x244
   1dff6:	4802      	ldr	r0, [pc, #8]	; (1e000 <net_ipv6_nbr_set_reachable_timer+0x10>)
   1dff8:	3114      	adds	r1, #20
   1dffa:	f004 b97b 	b.w	222f4 <k_delayed_work_submit_to_queue>
   1dffe:	bf00      	nop
   1e000:	20003340 	.word	0x20003340

0001e004 <handle_na_input>:
{
   1e004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e008:	4604      	mov	r4, r0
   1e00a:	b08c      	sub	sp, #48	; 0x30
	return net_buf_frags_len(pkt->frags);
   1e00c:	6880      	ldr	r0, [r0, #8]
   1e00e:	f7ff fad7 	bl	1d5c0 <net_buf_frags_len>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &nahdr);
   1e012:	a907      	add	r1, sp, #28
   1e014:	4606      	mov	r6, r0
   1e016:	4620      	mov	r0, r4
   1e018:	f7fe fff0 	bl	1cffc <net_icmpv6_get_na_hdr>
	if (!na_hdr) {
   1e01c:	4605      	mov	r5, r0
   1e01e:	b140      	cbz	r0, 1e032 <handle_na_input+0x2e>
	if ((total_len < (sizeof(struct net_ipv6_hdr) +
   1e020:	b2b6      	uxth	r6, r6
   1e022:	2e41      	cmp	r6, #65	; 0x41
   1e024:	d809      	bhi.n	1e03a <handle_na_input+0x36>
		icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   1e026:	a905      	add	r1, sp, #20
   1e028:	4620      	mov	r0, r4
   1e02a:	f7fe fdf7 	bl	1cc1c <net_icmpv6_get_hdr>
		if (!icmp_hdr || icmp_hdr->code != 0) {
   1e02e:	2800      	cmp	r0, #0
   1e030:	d154      	bne.n	1e0dc <handle_na_input+0xd8>
	return NET_DROP;
   1e032:	2002      	movs	r0, #2
}
   1e034:	b00c      	add	sp, #48	; 0x30
   1e036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return pkt->frags->data;
   1e03a:	68a3      	ldr	r3, [r4, #8]
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT) ||
   1e03c:	689b      	ldr	r3, [r3, #8]
			  sizeof(struct net_icmpv6_nd_opt_hdr))) ||
   1e03e:	79db      	ldrb	r3, [r3, #7]
   1e040:	2bff      	cmp	r3, #255	; 0xff
   1e042:	d1f0      	bne.n	1e026 <handle_na_input+0x22>
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT) ||
   1e044:	7903      	ldrb	r3, [r0, #4]
   1e046:	2bff      	cmp	r3, #255	; 0xff
   1e048:	d0ed      	beq.n	1e026 <handle_na_input+0x22>
	    (net_is_solicited(pkt) &&
   1e04a:	4620      	mov	r0, r4
   1e04c:	f7ff fb0a 	bl	1d664 <net_is_solicited>
	    net_is_ipv6_addr_mcast(&na_hdr->tgt) ||
   1e050:	b120      	cbz	r0, 1e05c <handle_na_input+0x58>
   1e052:	68a3      	ldr	r3, [r4, #8]
	    (net_is_solicited(pkt) &&
   1e054:	689b      	ldr	r3, [r3, #8]
   1e056:	7e1b      	ldrb	r3, [r3, #24]
   1e058:	2bff      	cmp	r3, #255	; 0xff
   1e05a:	d0e4      	beq.n	1e026 <handle_na_input+0x22>
	pkt->ipv6_ext_opt_len = len;
   1e05c:	2314      	movs	r3, #20
   1e05e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
	nd_opt_hdr = net_icmpv6_get_nd_opt_hdr(pkt, &ndopthdr);
   1e062:	a902      	add	r1, sp, #8
   1e064:	4620      	mov	r0, r4
   1e066:	f7fe ff98 	bl	1cf9a <net_icmpv6_get_nd_opt_hdr>
   1e06a:	4601      	mov	r1, r0
	return net_buf_frags_len(pkt->frags);
   1e06c:	68a0      	ldr	r0, [r4, #8]
   1e06e:	f7ff faa7 	bl	1d5c0 <net_buf_frags_len>
	u16_t tllao_offset = 0;
   1e072:	2600      	movs	r6, #0
	left_len = net_pkt_get_len(pkt) - (sizeof(struct net_ipv6_hdr) +
   1e074:	f1a0 072c 	sub.w	r7, r0, #44	; 0x2c
	while (nd_opt_hdr && net_pkt_ipv6_ext_opt_len(pkt) < left_len) {
   1e078:	b131      	cbz	r1, 1e088 <handle_na_input+0x84>
   1e07a:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
   1e07e:	4297      	cmp	r7, r2
   1e080:	d902      	bls.n	1e088 <handle_na_input+0x84>
		if (!nd_opt_hdr->len) {
   1e082:	784b      	ldrb	r3, [r1, #1]
   1e084:	2b00      	cmp	r3, #0
   1e086:	d12d      	bne.n	1e0e4 <handle_na_input+0xe0>
	ifaddr = net_if_ipv6_addr_lookup_by_iface(net_pkt_iface(pkt),
   1e088:	1d2f      	adds	r7, r5, #4
   1e08a:	4639      	mov	r1, r7
   1e08c:	6960      	ldr	r0, [r4, #20]
   1e08e:	f7ff fba6 	bl	1d7de <net_if_ipv6_addr_lookup_by_iface>
	if (ifaddr) {
   1e092:	2800      	cmp	r0, #0
   1e094:	d13e      	bne.n	1e114 <handle_na_input+0x110>
	struct net_linkaddr_storage lladdr = { 0 };
   1e096:	9003      	str	r0, [sp, #12]
   1e098:	9004      	str	r0, [sp, #16]
	nbr = nbr_lookup(&net_neighbor.table, net_pkt_iface(pkt),
   1e09a:	4639      	mov	r1, r7
   1e09c:	6960      	ldr	r0, [r4, #20]
   1e09e:	f7ff fc21 	bl	1d8e4 <nbr_lookup.isra.29>
	if (!nbr) {
   1e0a2:	4605      	mov	r5, r0
   1e0a4:	2800      	cmp	r0, #0
   1e0a6:	d0c4      	beq.n	1e032 <handle_na_input+0x2e>
	if (tllao_offset) {
   1e0a8:	2e00      	cmp	r6, #0
   1e0aa:	d141      	bne.n	1e130 <handle_na_input+0x12c>
	if (nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
   1e0ac:	786b      	ldrb	r3, [r5, #1]
   1e0ae:	2bff      	cmp	r3, #255	; 0xff
   1e0b0:	d154      	bne.n	1e15c <handle_na_input+0x158>
		if (!tllao_offset) {
   1e0b2:	2e00      	cmp	r6, #0
   1e0b4:	d0bd      	beq.n	1e032 <handle_na_input+0x2e>
		nbr_lladdr.len = lladdr.len;
   1e0b6:	f89d 300d 	ldrb.w	r3, [sp, #13]
   1e0ba:	f88d 3018 	strb.w	r3, [sp, #24]
		nbr_lladdr.addr = lladdr.addr;
   1e0be:	aa0c      	add	r2, sp, #48	; 0x30
   1e0c0:	f10d 030e 	add.w	r3, sp, #14
   1e0c4:	f842 3d1c 	str.w	r3, [r2, #-28]!
		if (net_nbr_link(nbr, net_pkt_iface(pkt), &nbr_lladdr)) {
   1e0c8:	6961      	ldr	r1, [r4, #20]
   1e0ca:	4628      	mov	r0, r5
   1e0cc:	f7ff f9f6 	bl	1d4bc <net_nbr_link>
   1e0d0:	2800      	cmp	r0, #0
   1e0d2:	d043      	beq.n	1e15c <handle_na_input+0x158>
			nbr_free(nbr);
   1e0d4:	4628      	mov	r0, r5
   1e0d6:	f7ff faa2 	bl	1d61e <nbr_free>
   1e0da:	e7aa      	b.n	1e032 <handle_na_input+0x2e>
		if (!icmp_hdr || icmp_hdr->code != 0) {
   1e0dc:	7843      	ldrb	r3, [r0, #1]
   1e0de:	2b00      	cmp	r3, #0
   1e0e0:	d1a7      	bne.n	1e032 <handle_na_input+0x2e>
   1e0e2:	e7bb      	b.n	1e05c <handle_na_input+0x58>
		switch (nd_opt_hdr->type) {
   1e0e4:	7809      	ldrb	r1, [r1, #0]
   1e0e6:	2902      	cmp	r1, #2
   1e0e8:	d107      	bne.n	1e0fa <handle_na_input+0xf6>
			tllao_offset = net_pkt_ip_hdr_len(pkt) +
   1e0ea:	f894 6035 	ldrb.w	r6, [r4, #53]	; 0x35
				net_pkt_ipv6_ext_len(pkt) +
   1e0ee:	f894 103f 	ldrb.w	r1, [r4, #63]	; 0x3f
			tllao_offset = net_pkt_ip_hdr_len(pkt) +
   1e0f2:	440e      	add	r6, r1
   1e0f4:	3606      	adds	r6, #6
   1e0f6:	4416      	add	r6, r2
   1e0f8:	b2b6      	uxth	r6, r6
		net_pkt_set_ipv6_ext_opt_len(pkt,
   1e0fa:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1e0fe:	b2db      	uxtb	r3, r3
		if (prev_opt_len >= net_pkt_ipv6_ext_opt_len(pkt)) {
   1e100:	4293      	cmp	r3, r2
	pkt->ipv6_ext_opt_len = len;
   1e102:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
   1e106:	d994      	bls.n	1e032 <handle_na_input+0x2e>
		nd_opt_hdr = net_icmpv6_get_nd_opt_hdr(pkt, &ndopthdr);
   1e108:	a902      	add	r1, sp, #8
   1e10a:	4620      	mov	r0, r4
   1e10c:	f7fe ff45 	bl	1cf9a <net_icmpv6_get_nd_opt_hdr>
   1e110:	4601      	mov	r1, r0
   1e112:	e7b1      	b.n	1e078 <handle_na_input+0x74>
		if (ifaddr->addr_state == NET_ADDR_TENTATIVE) {
   1e114:	f990 3065 	ldrsb.w	r3, [r0, #101]	; 0x65
   1e118:	2b00      	cmp	r3, #0
   1e11a:	d18a      	bne.n	1e032 <handle_na_input+0x2e>
	if (net_is_ipv6_ll_addr(addr)) {
   1e11c:	88aa      	ldrh	r2, [r5, #4]
   1e11e:	f248 03fe 	movw	r3, #33022	; 0x80fe
   1e122:	429a      	cmp	r2, r3
   1e124:	d085      	beq.n	1e032 <handle_na_input+0x2e>
	net_if_ipv6_dad_failed(iface, addr);
   1e126:	4639      	mov	r1, r7
   1e128:	6960      	ldr	r0, [r4, #20]
   1e12a:	f7fc fe03 	bl	1ad34 <net_if_ipv6_dad_failed>
   1e12e:	e780      	b.n	1e032 <handle_na_input+0x2e>
		lladdr.len = net_pkt_iface(pkt)->link_addr.len;
   1e130:	6963      	ldr	r3, [r4, #20]
		frag = net_frag_read(pkt->frags, tllao_offset,
   1e132:	68a0      	ldr	r0, [r4, #8]
		lladdr.len = net_pkt_iface(pkt)->link_addr.len;
   1e134:	7d1b      	ldrb	r3, [r3, #20]
   1e136:	f88d 300d 	strb.w	r3, [sp, #13]
		frag = net_frag_read(pkt->frags, tllao_offset,
   1e13a:	f10d 020e 	add.w	r2, sp, #14
   1e13e:	9200      	str	r2, [sp, #0]
   1e140:	4631      	mov	r1, r6
   1e142:	f10d 020a 	add.w	r2, sp, #10
   1e146:	f7fd fcf9 	bl	1bb3c <net_frag_read>
		if (!frag && pos == 0xffff) {
   1e14a:	2800      	cmp	r0, #0
   1e14c:	d1ae      	bne.n	1e0ac <handle_na_input+0xa8>
   1e14e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   1e152:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1e156:	429a      	cmp	r2, r3
   1e158:	d1a8      	bne.n	1e0ac <handle_na_input+0xa8>
   1e15a:	e76a      	b.n	1e032 <handle_na_input+0x2e>
	cached_lladdr = net_nbr_get_lladdr(nbr->idx);
   1e15c:	7868      	ldrb	r0, [r5, #1]
   1e15e:	f7ff fa27 	bl	1d5b0 <net_nbr_get_lladdr>
	if (!cached_lladdr) {
   1e162:	4607      	mov	r7, r0
   1e164:	2800      	cmp	r0, #0
   1e166:	f43f af64 	beq.w	1e032 <handle_na_input+0x2e>
	if (tllao_offset) {
   1e16a:	2e00      	cmp	r6, #0
   1e16c:	d048      	beq.n	1e200 <handle_na_input+0x1fc>
		lladdr_changed = memcmp(lladdr.addr,
   1e16e:	7842      	ldrb	r2, [r0, #1]
   1e170:	1c81      	adds	r1, r0, #2
   1e172:	f10d 000e 	add.w	r0, sp, #14
   1e176:	f7e2 fadf 	bl	738 <memcmp>
   1e17a:	f110 0800 	adds.w	r8, r0, #0
   1e17e:	bf18      	it	ne
   1e180:	f04f 0801 	movne.w	r8, #1
	if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_INCOMPLETE) {
   1e184:	68eb      	ldr	r3, [r5, #12]
   1e186:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   1e18a:	2b00      	cmp	r3, #0
   1e18c:	d13f      	bne.n	1e20e <handle_na_input+0x20a>
		if (!tllao_offset) {
   1e18e:	2e00      	cmp	r6, #0
   1e190:	f43f af4f 	beq.w	1e032 <handle_na_input+0x2e>
		if (lladdr_changed) {
   1e194:	f1b8 0f00 	cmp.w	r8, #0
   1e198:	d005      	beq.n	1e1a6 <handle_na_input+0x1a2>
			net_linkaddr_set(cached_lladdr, lladdr.addr,
   1e19a:	787a      	ldrb	r2, [r7, #1]
   1e19c:	f10d 010e 	add.w	r1, sp, #14
   1e1a0:	4638      	mov	r0, r7
   1e1a2:	f7ff fa4e 	bl	1d642 <net_linkaddr_set>
		if (net_is_solicited(pkt)) {
   1e1a6:	4620      	mov	r0, r4
   1e1a8:	f7ff fa5c 	bl	1d664 <net_is_solicited>
   1e1ac:	b350      	cbz	r0, 1e204 <handle_na_input+0x200>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_REACHABLE);
   1e1ae:	2101      	movs	r1, #1
   1e1b0:	4628      	mov	r0, r5
   1e1b2:	f7ff fa1d 	bl	1d5f0 <ipv6_nbr_set_state>
   1e1b6:	68eb      	ldr	r3, [r5, #12]
			net_ipv6_nbr_data(nbr)->ns_count = 0;
   1e1b8:	2200      	movs	r2, #0
   1e1ba:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			k_delayed_work_cancel(
   1e1be:	68e8      	ldr	r0, [r5, #12]
   1e1c0:	3014      	adds	r0, #20
   1e1c2:	f004 f83d 	bl	22240 <k_delayed_work_cancel>
			net_ipv6_nbr_set_reachable_timer(net_pkt_iface(pkt),
   1e1c6:	4629      	mov	r1, r5
   1e1c8:	6960      	ldr	r0, [r4, #20]
   1e1ca:	f7ff ff11 	bl	1dff0 <net_ipv6_nbr_set_reachable_timer>
	net_ipv6_nbr_data(nbr)->is_router = net_is_router(pkt);
   1e1ce:	4620      	mov	r0, r4
   1e1d0:	68ee      	ldr	r6, [r5, #12]
   1e1d2:	f7ff fa5d 	bl	1d690 <net_is_router>
	pending = net_ipv6_nbr_data(nbr)->pending;
   1e1d6:	68eb      	ldr	r3, [r5, #12]
	net_ipv6_nbr_data(nbr)->is_router = net_is_router(pkt);
   1e1d8:	f886 0069 	strb.w	r0, [r6, #105]	; 0x69
	pending = net_ipv6_nbr_data(nbr)->pending;
   1e1dc:	681e      	ldr	r6, [r3, #0]
	if (pending) {
   1e1de:	b156      	cbz	r6, 1e1f6 <handle_na_input+0x1f2>
		if (net_send_data(pending) < 0) {
   1e1e0:	4630      	mov	r0, r6
   1e1e2:	f7fc f9e7 	bl	1a5b4 <net_send_data>
   1e1e6:	2800      	cmp	r0, #0
   1e1e8:	da5a      	bge.n	1e2a0 <handle_na_input+0x29c>
			nbr_clear_ns_pending(net_ipv6_nbr_data(nbr));
   1e1ea:	68e8      	ldr	r0, [r5, #12]
   1e1ec:	f7ff fa0b 	bl	1d606 <nbr_clear_ns_pending>
		net_pkt_unref(pending);
   1e1f0:	4630      	mov	r0, r6
   1e1f2:	f7fd fb48 	bl	1b886 <net_pkt_unref>
	net_pkt_unref(pkt);
   1e1f6:	4620      	mov	r0, r4
   1e1f8:	f7fd fb45 	bl	1b886 <net_pkt_unref>
	return NET_OK;
   1e1fc:	2000      	movs	r0, #0
   1e1fe:	e719      	b.n	1e034 <handle_na_input+0x30>
	bool lladdr_changed = false;
   1e200:	46b0      	mov	r8, r6
   1e202:	e7bf      	b.n	1e184 <handle_na_input+0x180>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_STALE);
   1e204:	2102      	movs	r1, #2
   1e206:	4628      	mov	r0, r5
   1e208:	f7ff f9f2 	bl	1d5f0 <ipv6_nbr_set_state>
   1e20c:	e7df      	b.n	1e1ce <handle_na_input+0x1ca>
	if (!net_is_override(pkt) && lladdr_changed) {
   1e20e:	4620      	mov	r0, r4
   1e210:	f7ff fa33 	bl	1d67a <net_is_override>
   1e214:	b968      	cbnz	r0, 1e232 <handle_na_input+0x22e>
   1e216:	f1b8 0f00 	cmp.w	r8, #0
   1e21a:	d00a      	beq.n	1e232 <handle_na_input+0x22e>
		if (net_ipv6_nbr_data(nbr)->state ==
   1e21c:	68eb      	ldr	r3, [r5, #12]
   1e21e:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   1e222:	2b01      	cmp	r3, #1
   1e224:	f47f af05 	bne.w	1e032 <handle_na_input+0x2e>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_STALE);
   1e228:	2102      	movs	r1, #2
   1e22a:	4628      	mov	r0, r5
   1e22c:	f7ff f9e0 	bl	1d5f0 <ipv6_nbr_set_state>
   1e230:	e6ff      	b.n	1e032 <handle_na_input+0x2e>
	if (net_is_override(pkt) ||
   1e232:	4620      	mov	r0, r4
   1e234:	f7ff fa21 	bl	1d67a <net_is_override>
   1e238:	bb00      	cbnz	r0, 1e27c <handle_na_input+0x278>
	    (!net_is_override(pkt) && tllao_offset && !lladdr_changed)) {
   1e23a:	4620      	mov	r0, r4
   1e23c:	f7ff fa1d 	bl	1d67a <net_is_override>
	if (net_is_override(pkt) ||
   1e240:	b998      	cbnz	r0, 1e26a <handle_na_input+0x266>
	    (!net_is_override(pkt) && tllao_offset && !lladdr_changed)) {
   1e242:	b196      	cbz	r6, 1e26a <handle_na_input+0x266>
   1e244:	f1b8 0f00 	cmp.w	r8, #0
   1e248:	d10f      	bne.n	1e26a <handle_na_input+0x266>
		if (net_is_solicited(pkt)) {
   1e24a:	4620      	mov	r0, r4
   1e24c:	f7ff fa0a 	bl	1d664 <net_is_solicited>
   1e250:	b1f0      	cbz	r0, 1e290 <handle_na_input+0x28c>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_REACHABLE);
   1e252:	2101      	movs	r1, #1
   1e254:	4628      	mov	r0, r5
   1e256:	f7ff f9cb 	bl	1d5f0 <ipv6_nbr_set_state>
			k_delayed_work_cancel(
   1e25a:	68e8      	ldr	r0, [r5, #12]
   1e25c:	3014      	adds	r0, #20
   1e25e:	f003 ffef 	bl	22240 <k_delayed_work_cancel>
			net_ipv6_nbr_set_reachable_timer(net_pkt_iface(pkt),
   1e262:	4629      	mov	r1, r5
   1e264:	6960      	ldr	r0, [r4, #20]
   1e266:	f7ff fec3 	bl	1dff0 <net_ipv6_nbr_set_reachable_timer>
	if (net_ipv6_nbr_data(nbr)->is_router && !net_is_router(pkt)) {
   1e26a:	68eb      	ldr	r3, [r5, #12]
   1e26c:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
   1e270:	2b00      	cmp	r3, #0
   1e272:	d0ac      	beq.n	1e1ce <handle_na_input+0x1ca>
   1e274:	4620      	mov	r0, r4
   1e276:	f7ff fa0b 	bl	1d690 <net_is_router>
   1e27a:	e7a8      	b.n	1e1ce <handle_na_input+0x1ca>
		if (lladdr_changed) {
   1e27c:	f1b8 0f00 	cmp.w	r8, #0
   1e280:	d0e3      	beq.n	1e24a <handle_na_input+0x246>
			net_linkaddr_set(cached_lladdr, lladdr.addr,
   1e282:	787a      	ldrb	r2, [r7, #1]
   1e284:	f10d 010e 	add.w	r1, sp, #14
   1e288:	4638      	mov	r0, r7
   1e28a:	f7ff f9da 	bl	1d642 <net_linkaddr_set>
   1e28e:	e7dc      	b.n	1e24a <handle_na_input+0x246>
			if (lladdr_changed) {
   1e290:	f1b8 0f00 	cmp.w	r8, #0
   1e294:	d0e9      	beq.n	1e26a <handle_na_input+0x266>
				ipv6_nbr_set_state(nbr,
   1e296:	2102      	movs	r1, #2
   1e298:	4628      	mov	r0, r5
   1e29a:	f7ff f9a9 	bl	1d5f0 <ipv6_nbr_set_state>
   1e29e:	e7e4      	b.n	1e26a <handle_na_input+0x266>
			net_ipv6_nbr_data(nbr)->pending = NULL;
   1e2a0:	68eb      	ldr	r3, [r5, #12]
   1e2a2:	2200      	movs	r2, #0
   1e2a4:	601a      	str	r2, [r3, #0]
   1e2a6:	e7a3      	b.n	1e1f0 <handle_na_input+0x1ec>

0001e2a8 <net_ipv6_send_ns>:
{
   1e2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e2ac:	b09d      	sub	sp, #116	; 0x74
   1e2ae:	461d      	mov	r5, r3
   1e2b0:	4689      	mov	r9, r1
   1e2b2:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
   1e2b6:	9301      	str	r3, [sp, #4]
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, dst),
   1e2b8:	4629      	mov	r1, r5
{
   1e2ba:	4616      	mov	r6, r2
   1e2bc:	4680      	mov	r8, r0
   1e2be:	f8dd a098 	ldr.w	sl, [sp, #152]	; 0x98
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, dst),
   1e2c2:	f7ff f992 	bl	1d5ea <net_if_get_ll_reserve>
   1e2c6:	210a      	movs	r1, #10
   1e2c8:	f7fd fa60 	bl	1b78c <net_pkt_get_reserve_tx>
	if (!pkt) {
   1e2cc:	4604      	mov	r4, r0
   1e2ce:	b138      	cbz	r0, 1e2e0 <net_ipv6_send_ns+0x38>
	frag = net_pkt_get_frag(pkt, ND_NET_BUF_TIMEOUT);
   1e2d0:	210a      	movs	r1, #10
   1e2d2:	f7fd fa73 	bl	1b7bc <net_pkt_get_frag>
	if (!frag) {
   1e2d6:	4607      	mov	r7, r0
   1e2d8:	b928      	cbnz	r0, 1e2e6 <net_ipv6_send_ns+0x3e>
		net_pkt_unref(pkt);
   1e2da:	4620      	mov	r0, r4
   1e2dc:	f7fd fad3 	bl	1b886 <net_pkt_unref>
		return -ENOMEM;
   1e2e0:	f06f 000b 	mvn.w	r0, #11
   1e2e4:	e03b      	b.n	1e35e <net_ipv6_send_ns+0xb6>
	net_pkt_frag_add(pkt, frag);
   1e2e6:	4601      	mov	r1, r0
   1e2e8:	4620      	mov	r0, r4
   1e2ea:	f7fd faf3 	bl	1b8d4 <net_pkt_frag_add>
	pkt->iface = iface;
   1e2ee:	f8c4 8014 	str.w	r8, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1e2f2:	f898 3015 	ldrb.w	r3, [r8, #21]
   1e2f6:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1e2fa:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	pkt->family = family;
   1e2fe:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   1e302:	220a      	movs	r2, #10
   1e304:	f362 03c6 	bfi	r3, r2, #3, #4
   1e308:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	pkt->ip_hdr_len = len;
   1e30c:	2328      	movs	r3, #40	; 0x28
   1e30e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	pkt->ipv6_ext_len = len;
   1e312:	2300      	movs	r3, #0
   1e314:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
	net_pkt_ll_clear(pkt);
   1e318:	4620      	mov	r0, r4
   1e31a:	f7ff f9e4 	bl	1d6e6 <net_pkt_ll_clear>
   1e31e:	6963      	ldr	r3, [r4, #20]
   1e320:	7d1b      	ldrb	r3, [r3, #20]
	if (iface->link_addr.len == 6) {
   1e322:	2b06      	cmp	r3, #6
   1e324:	d01e      	beq.n	1e364 <net_ipv6_send_ns+0xbc>
	return 0;
   1e326:	2b08      	cmp	r3, #8
   1e328:	bf0c      	ite	eq
   1e32a:	f04f 0810 	moveq.w	r8, #16
   1e32e:	f04f 0800 	movne.w	r8, #0
	setup_headers(pkt, sizeof(struct net_icmpv6_ns_hdr) + llao_len,
   1e332:	2287      	movs	r2, #135	; 0x87
   1e334:	f108 0114 	add.w	r1, r8, #20
   1e338:	4620      	mov	r0, r4
	net_buf_add(frag, sizeof(struct net_icmpv6_ns_hdr));
   1e33a:	3708      	adds	r7, #8
	setup_headers(pkt, sizeof(struct net_icmpv6_ns_hdr) + llao_len,
   1e33c:	f7ff f9b2 	bl	1d6a4 <setup_headers>
	net_buf_add(frag, sizeof(struct net_icmpv6_ns_hdr));
   1e340:	2114      	movs	r1, #20
   1e342:	4638      	mov	r0, r7
   1e344:	f7fb f82e 	bl	193a4 <net_buf_simple_add>
	ns_hdr = net_icmpv6_get_ns_hdr(pkt, &hdr);
   1e348:	a917      	add	r1, sp, #92	; 0x5c
   1e34a:	4620      	mov	r0, r4
   1e34c:	f7fe fdca 	bl	1cee4 <net_icmpv6_get_ns_hdr>
	if (!ns_hdr) {
   1e350:	4686      	mov	lr, r0
   1e352:	b950      	cbnz	r0, 1e36a <net_ipv6_send_ns+0xc2>
	net_pkt_unref(pkt);
   1e354:	4620      	mov	r0, r4
   1e356:	f7fd fa96 	bl	1b886 <net_pkt_unref>
	return -EINVAL;
   1e35a:	f06f 0015 	mvn.w	r0, #21
}
   1e35e:	b01d      	add	sp, #116	; 0x74
   1e360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 8;
   1e364:	f04f 0808 	mov.w	r8, #8
   1e368:	e7e3      	b.n	1e332 <net_ipv6_send_ns+0x8a>
   1e36a:	68a3      	ldr	r3, [r4, #8]
	return pkt->frags->data;
   1e36c:	689b      	ldr	r3, [r3, #8]
	if (!dst) {
   1e36e:	2d00      	cmp	r5, #0
   1e370:	f040 8088 	bne.w	1e484 <net_ipv6_send_ns+0x1dc>
	dst->s6_addr[1]   = 0x02;
   1e374:	2102      	movs	r1, #2
	dst->s6_addr[0]   = 0xFF;
   1e376:	22ff      	movs	r2, #255	; 0xff
	dst->s6_addr[1]   = 0x02;
   1e378:	7659      	strb	r1, [r3, #25]
	dst->s6_addr[11]  = 0x01;
   1e37a:	2101      	movs	r1, #1
	dst->s6_addr[0]   = 0xFF;
   1e37c:	761a      	strb	r2, [r3, #24]
	dst->s6_addr[10]  = 0;
   1e37e:	f883 5022 	strb.w	r5, [r3, #34]	; 0x22
	dst->s6_addr[11]  = 0x01;
   1e382:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
	dst->s6_addr[12]  = 0xFF;
   1e386:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	UNALIGNED_PUT(0, &dst->s6_addr16[1]);
   1e38a:	769d      	strb	r5, [r3, #26]
   1e38c:	76dd      	strb	r5, [r3, #27]
	UNALIGNED_PUT(0, &dst->s6_addr16[2]);
   1e38e:	771d      	strb	r5, [r3, #28]
   1e390:	775d      	strb	r5, [r3, #29]
	UNALIGNED_PUT(0, &dst->s6_addr16[3]);
   1e392:	779d      	strb	r5, [r3, #30]
   1e394:	77dd      	strb	r5, [r3, #31]
	UNALIGNED_PUT(0, &dst->s6_addr16[4]);
   1e396:	f883 5020 	strb.w	r5, [r3, #32]
   1e39a:	f883 5021 	strb.w	r5, [r3, #33]	; 0x21
	dst->s6_addr[13]  = src->s6_addr[13];
   1e39e:	f89a 200d 	ldrb.w	r2, [sl, #13]
   1e3a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   1e3a6:	f8ba 200e 	ldrh.w	r2, [sl, #14]
   1e3aa:	84da      	strh	r2, [r3, #38]	; 0x26
	net_ipaddr_copy(&ns_hdr->tgt, tgt);
   1e3ac:	ab07      	add	r3, sp, #28
   1e3ae:	f10a 0510 	add.w	r5, sl, #16
   1e3b2:	469c      	mov	ip, r3
   1e3b4:	f8da 0000 	ldr.w	r0, [sl]
   1e3b8:	f8da 1004 	ldr.w	r1, [sl, #4]
   1e3bc:	461a      	mov	r2, r3
   1e3be:	c203      	stmia	r2!, {r0, r1}
   1e3c0:	f10a 0a08 	add.w	sl, sl, #8
   1e3c4:	45aa      	cmp	sl, r5
   1e3c6:	4613      	mov	r3, r2
   1e3c8:	d1f4      	bne.n	1e3b4 <net_ipv6_send_ns+0x10c>
   1e3ca:	f10e 0204 	add.w	r2, lr, #4
   1e3ce:	ad0b      	add	r5, sp, #44	; 0x2c
   1e3d0:	4692      	mov	sl, r2
   1e3d2:	4663      	mov	r3, ip
   1e3d4:	cb03      	ldmia	r3!, {r0, r1}
   1e3d6:	42ab      	cmp	r3, r5
   1e3d8:	6010      	str	r0, [r2, #0]
   1e3da:	6051      	str	r1, [r2, #4]
   1e3dc:	469c      	mov	ip, r3
   1e3de:	f102 0208 	add.w	r2, r2, #8
   1e3e2:	d1f6      	bne.n	1e3d2 <net_ipv6_send_ns+0x12a>
	net_icmpv6_set_ns_hdr(pkt, ns_hdr);
   1e3e4:	4671      	mov	r1, lr
   1e3e6:	4620      	mov	r0, r4
   1e3e8:	f7fe fd9f 	bl	1cf2a <net_icmpv6_set_ns_hdr>
	if (is_my_address) {
   1e3ec:	9a01      	ldr	r2, [sp, #4]
   1e3ee:	68a3      	ldr	r3, [r4, #8]
   1e3f0:	2a00      	cmp	r2, #0
   1e3f2:	d061      	beq.n	1e4b8 <net_ipv6_send_ns+0x210>
   1e3f4:	689e      	ldr	r6, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1e3f6:	4b5d      	ldr	r3, [pc, #372]	; (1e56c <net_ipv6_send_ns+0x2c4>)
   1e3f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1e3fa:	af0f      	add	r7, sp, #60	; 0x3c
   1e3fc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   1e400:	f106 0208 	add.w	r2, r6, #8
   1e404:	462b      	mov	r3, r5
   1e406:	cb03      	ldmia	r3!, {r0, r1}
   1e408:	42bb      	cmp	r3, r7
   1e40a:	6010      	str	r0, [r2, #0]
   1e40c:	6051      	str	r1, [r2, #4]
   1e40e:	461d      	mov	r5, r3
   1e410:	f102 0208 	add.w	r2, r2, #8
   1e414:	d1f6      	bne.n	1e404 <net_ipv6_send_ns+0x15c>
		NET_IPV6_HDR(pkt)->len[1] -= llao_len;
   1e416:	7973      	ldrb	r3, [r6, #5]
   1e418:	eba3 0808 	sub.w	r8, r3, r8
   1e41c:	f886 8005 	strb.w	r8, [r6, #5]
	net_icmpv6_set_chksum(pkt, pkt->frags);
   1e420:	68a1      	ldr	r1, [r4, #8]
   1e422:	4620      	mov	r0, r4
   1e424:	f7fe fbb0 	bl	1cb88 <net_icmpv6_set_chksum>
	nbr = nbr_lookup(&net_neighbor.table, net_pkt_iface(pkt), &ns_hdr->tgt);
   1e428:	4651      	mov	r1, sl
   1e42a:	6960      	ldr	r0, [r4, #20]
   1e42c:	f7ff fa5a 	bl	1d8e4 <nbr_lookup.isra.29>
	if (!nbr) {
   1e430:	4605      	mov	r5, r0
   1e432:	b938      	cbnz	r0, 1e444 <net_ipv6_send_ns+0x19c>
		nbr = nbr_new(net_pkt_iface(pkt), &ns_hdr->tgt, false,
   1e434:	4602      	mov	r2, r0
   1e436:	4651      	mov	r1, sl
   1e438:	6960      	ldr	r0, [r4, #20]
   1e43a:	f7ff f9ef 	bl	1d81c <nbr_new.isra.30>
		if (!nbr) {
   1e43e:	4605      	mov	r5, r0
   1e440:	2800      	cmp	r0, #0
   1e442:	d087      	beq.n	1e354 <net_ipv6_send_ns+0xac>
	if (pending) {
   1e444:	f1b9 0f00 	cmp.w	r9, #0
   1e448:	d00f      	beq.n	1e46a <net_ipv6_send_ns+0x1c2>
   1e44a:	68ee      	ldr	r6, [r5, #12]
		if (!net_ipv6_nbr_data(nbr)->pending) {
   1e44c:	6833      	ldr	r3, [r6, #0]
			net_ipv6_nbr_data(nbr)->pending = net_pkt_ref(pending);
   1e44e:	4648      	mov	r0, r9
		if (!net_ipv6_nbr_data(nbr)->pending) {
   1e450:	2b00      	cmp	r3, #0
   1e452:	f040 8085 	bne.w	1e560 <net_ipv6_send_ns+0x2b8>
			net_ipv6_nbr_data(nbr)->pending = net_pkt_ref(pending);
   1e456:	f7fd fa0b 	bl	1b870 <net_pkt_ref>
		k_delayed_work_submit(&net_ipv6_nbr_data(nbr)->send_ns,
   1e45a:	68e9      	ldr	r1, [r5, #12]
			net_ipv6_nbr_data(nbr)->pending = net_pkt_ref(pending);
   1e45c:	6030      	str	r0, [r6, #0]
   1e45e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1e462:	313c      	adds	r1, #60	; 0x3c
   1e464:	4842      	ldr	r0, [pc, #264]	; (1e570 <net_ipv6_send_ns+0x2c8>)
   1e466:	f003 ff45 	bl	222f4 <k_delayed_work_submit_to_queue>
	if (net_send_data(pkt) < 0) {
   1e46a:	4620      	mov	r0, r4
   1e46c:	f7fc f8a2 	bl	1a5b4 <net_send_data>
   1e470:	2800      	cmp	r0, #0
   1e472:	da78      	bge.n	1e566 <net_ipv6_send_ns+0x2be>
		if (pending) {
   1e474:	f1b9 0f00 	cmp.w	r9, #0
   1e478:	f43f af6c 	beq.w	1e354 <net_ipv6_send_ns+0xac>
			nbr_clear_ns_pending(net_ipv6_nbr_data(nbr));
   1e47c:	68e8      	ldr	r0, [r5, #12]
   1e47e:	f7ff f8c2 	bl	1d606 <nbr_clear_ns_pending>
   1e482:	e767      	b.n	1e354 <net_ipv6_send_ns+0xac>
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, dst);
   1e484:	f10d 0c0c 	add.w	ip, sp, #12
   1e488:	f105 0b10 	add.w	fp, r5, #16
   1e48c:	6828      	ldr	r0, [r5, #0]
   1e48e:	6869      	ldr	r1, [r5, #4]
   1e490:	4662      	mov	r2, ip
   1e492:	c203      	stmia	r2!, {r0, r1}
   1e494:	3508      	adds	r5, #8
   1e496:	455d      	cmp	r5, fp
   1e498:	4694      	mov	ip, r2
   1e49a:	d1f7      	bne.n	1e48c <net_ipv6_send_ns+0x1e4>
   1e49c:	ad03      	add	r5, sp, #12
   1e49e:	3318      	adds	r3, #24
   1e4a0:	f10d 0c1c 	add.w	ip, sp, #28
   1e4a4:	462a      	mov	r2, r5
   1e4a6:	ca03      	ldmia	r2!, {r0, r1}
   1e4a8:	4562      	cmp	r2, ip
   1e4aa:	6018      	str	r0, [r3, #0]
   1e4ac:	6059      	str	r1, [r3, #4]
   1e4ae:	4615      	mov	r5, r2
   1e4b0:	f103 0308 	add.w	r3, r3, #8
   1e4b4:	d1f6      	bne.n	1e4a4 <net_ipv6_send_ns+0x1fc>
   1e4b6:	e779      	b.n	1e3ac <net_ipv6_send_ns+0x104>
		if (src) {
   1e4b8:	b38e      	cbz	r6, 1e51e <net_ipv6_send_ns+0x276>
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, src);
   1e4ba:	aa0f      	add	r2, sp, #60	; 0x3c
   1e4bc:	689b      	ldr	r3, [r3, #8]
   1e4be:	f106 0c10 	add.w	ip, r6, #16
   1e4c2:	4615      	mov	r5, r2
   1e4c4:	6830      	ldr	r0, [r6, #0]
   1e4c6:	6871      	ldr	r1, [r6, #4]
   1e4c8:	4696      	mov	lr, r2
   1e4ca:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   1e4ce:	3608      	adds	r6, #8
   1e4d0:	4566      	cmp	r6, ip
   1e4d2:	4672      	mov	r2, lr
   1e4d4:	d1f6      	bne.n	1e4c4 <net_ipv6_send_ns+0x21c>
   1e4d6:	3308      	adds	r3, #8
   1e4d8:	ae13      	add	r6, sp, #76	; 0x4c
   1e4da:	462a      	mov	r2, r5
   1e4dc:	ca03      	ldmia	r2!, {r0, r1}
   1e4de:	42b2      	cmp	r2, r6
   1e4e0:	6018      	str	r0, [r3, #0]
   1e4e2:	6059      	str	r1, [r3, #4]
   1e4e4:	4615      	mov	r5, r2
   1e4e6:	f103 0308 	add.w	r3, r3, #8
   1e4ea:	d1f6      	bne.n	1e4da <net_ipv6_send_ns+0x232>
   1e4ec:	68a3      	ldr	r3, [r4, #8]
		if (net_is_ipv6_addr_unspecified(&NET_IPV6_HDR(pkt)->src)) {
   1e4ee:	6898      	ldr	r0, [r3, #8]
   1e4f0:	3008      	adds	r0, #8
   1e4f2:	f7ff f86d 	bl	1d5d0 <net_is_ipv6_addr_unspecified>
   1e4f6:	2800      	cmp	r0, #0
   1e4f8:	f47f af2c 	bne.w	1e354 <net_ipv6_send_ns+0xac>
		net_buf_add(frag, llao_len);
   1e4fc:	4641      	mov	r1, r8
   1e4fe:	4638      	mov	r0, r7
   1e500:	f7fa ff50 	bl	193a4 <net_buf_simple_add>
			 (u8_t *)net_pkt_icmp_data(pkt) +
   1e504:	4620      	mov	r0, r4
		set_llao(&net_pkt_iface(pkt)->link_addr,
   1e506:	6965      	ldr	r5, [r4, #20]
			 (u8_t *)net_pkt_icmp_data(pkt) +
   1e508:	f7fd fc08 	bl	1bd1c <net_pkt_icmp_data>
		set_llao(&net_pkt_iface(pkt)->link_addr,
   1e50c:	3510      	adds	r5, #16
   1e50e:	f100 0118 	add.w	r1, r0, #24
   1e512:	2301      	movs	r3, #1
   1e514:	4642      	mov	r2, r8
   1e516:	4628      	mov	r0, r5
   1e518:	f7ff f8f4 	bl	1d704 <set_llao>
   1e51c:	e780      	b.n	1e420 <net_ipv6_send_ns+0x178>
   1e51e:	689d      	ldr	r5, [r3, #8]
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1e520:	6960      	ldr	r0, [r4, #20]
   1e522:	f105 0118 	add.w	r1, r5, #24
   1e526:	f7fc fe37 	bl	1b198 <net_if_ipv6_select_src_addr>
		}
   1e52a:	aa13      	add	r2, sp, #76	; 0x4c
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1e52c:	4603      	mov	r3, r0
		}
   1e52e:	f100 0c10 	add.w	ip, r0, #16
   1e532:	4616      	mov	r6, r2
   1e534:	6818      	ldr	r0, [r3, #0]
   1e536:	6859      	ldr	r1, [r3, #4]
   1e538:	4696      	mov	lr, r2
   1e53a:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   1e53e:	3308      	adds	r3, #8
   1e540:	4563      	cmp	r3, ip
   1e542:	4672      	mov	r2, lr
   1e544:	d1f6      	bne.n	1e534 <net_ipv6_send_ns+0x28c>
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1e546:	f105 0308 	add.w	r3, r5, #8
   1e54a:	ad17      	add	r5, sp, #92	; 0x5c
   1e54c:	4632      	mov	r2, r6
   1e54e:	ca03      	ldmia	r2!, {r0, r1}
   1e550:	42aa      	cmp	r2, r5
   1e552:	6018      	str	r0, [r3, #0]
   1e554:	6059      	str	r1, [r3, #4]
   1e556:	4616      	mov	r6, r2
   1e558:	f103 0308 	add.w	r3, r3, #8
   1e55c:	d1f6      	bne.n	1e54c <net_ipv6_send_ns+0x2a4>
   1e55e:	e7c5      	b.n	1e4ec <net_ipv6_send_ns+0x244>
			net_pkt_unref(pending);
   1e560:	f7fd f991 	bl	1b886 <net_pkt_unref>
			goto drop;
   1e564:	e6f6      	b.n	1e354 <net_ipv6_send_ns+0xac>
	return 0;
   1e566:	2000      	movs	r0, #0
   1e568:	e6f9      	b.n	1e35e <net_ipv6_send_ns+0xb6>
   1e56a:	bf00      	nop
   1e56c:	000272a8 	.word	0x000272a8
   1e570:	20003340 	.word	0x20003340

0001e574 <net_ipv6_nbr_add>:
{
   1e574:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1e578:	4606      	mov	r6, r0
   1e57a:	460f      	mov	r7, r1
   1e57c:	4615      	mov	r5, r2
	nbr = nbr_lookup(&net_neighbor.table, iface, addr);
   1e57e:	f7ff f9b1 	bl	1d8e4 <nbr_lookup.isra.29>
	if (!nbr) {
   1e582:	4604      	mov	r4, r0
   1e584:	b940      	cbnz	r0, 1e598 <net_ipv6_nbr_add+0x24>
		nbr = nbr_new(iface, addr, is_router, state);
   1e586:	f89d 2020 	ldrb.w	r2, [sp, #32]
   1e58a:	4639      	mov	r1, r7
   1e58c:	4630      	mov	r0, r6
   1e58e:	f7ff f945 	bl	1d81c <nbr_new.isra.30>
		if (!nbr) {
   1e592:	4604      	mov	r4, r0
   1e594:	2800      	cmp	r0, #0
   1e596:	d035      	beq.n	1e604 <net_ipv6_nbr_add+0x90>
	if (net_nbr_link(nbr, iface, lladdr) == -EALREADY &&
   1e598:	462a      	mov	r2, r5
   1e59a:	4631      	mov	r1, r6
   1e59c:	4620      	mov	r0, r4
   1e59e:	f7fe ff8d 	bl	1d4bc <net_nbr_link>
   1e5a2:	3045      	adds	r0, #69	; 0x45
   1e5a4:	d117      	bne.n	1e5d6 <net_ipv6_nbr_add+0x62>
	    net_ipv6_nbr_data(nbr)->state != NET_IPV6_NBR_STATE_STATIC) {
   1e5a6:	68e3      	ldr	r3, [r4, #12]
	if (net_nbr_link(nbr, iface, lladdr) == -EALREADY &&
   1e5a8:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   1e5ac:	2b05      	cmp	r3, #5
   1e5ae:	d023      	beq.n	1e5f8 <net_ipv6_nbr_add+0x84>
		cached_lladdr = net_nbr_get_lladdr(nbr->idx);
   1e5b0:	7860      	ldrb	r0, [r4, #1]
   1e5b2:	f7fe fffd 	bl	1d5b0 <net_nbr_get_lladdr>
		if (memcmp(cached_lladdr->addr, lladdr->addr, lladdr->len)) {
   1e5b6:	792a      	ldrb	r2, [r5, #4]
   1e5b8:	6829      	ldr	r1, [r5, #0]
		cached_lladdr = net_nbr_get_lladdr(nbr->idx);
   1e5ba:	4680      	mov	r8, r0
		if (memcmp(cached_lladdr->addr, lladdr->addr, lladdr->len)) {
   1e5bc:	3002      	adds	r0, #2
   1e5be:	f7e2 f8bb 	bl	738 <memcmp>
   1e5c2:	b1a0      	cbz	r0, 1e5ee <net_ipv6_nbr_add+0x7a>
			net_linkaddr_set(cached_lladdr, lladdr->addr,
   1e5c4:	792a      	ldrb	r2, [r5, #4]
   1e5c6:	6829      	ldr	r1, [r5, #0]
   1e5c8:	4640      	mov	r0, r8
   1e5ca:	f7ff f83a 	bl	1d642 <net_linkaddr_set>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_STALE);
   1e5ce:	2102      	movs	r1, #2
   1e5d0:	4620      	mov	r0, r4
   1e5d2:	f7ff f80d 	bl	1d5f0 <ipv6_nbr_set_state>
	if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_INCOMPLETE) {
   1e5d6:	68e3      	ldr	r3, [r4, #12]
   1e5d8:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   1e5dc:	b963      	cbnz	r3, 1e5f8 <net_ipv6_nbr_add+0x84>
		ret = net_ipv6_send_ns(iface, NULL, NULL, NULL, addr, false);
   1e5de:	9301      	str	r3, [sp, #4]
   1e5e0:	9700      	str	r7, [sp, #0]
   1e5e2:	461a      	mov	r2, r3
   1e5e4:	4619      	mov	r1, r3
   1e5e6:	4630      	mov	r0, r6
   1e5e8:	f7ff fe5e 	bl	1e2a8 <net_ipv6_send_ns>
   1e5ec:	e004      	b.n	1e5f8 <net_ipv6_nbr_add+0x84>
		} else if (net_ipv6_nbr_data(nbr)->state ==
   1e5ee:	68e3      	ldr	r3, [r4, #12]
   1e5f0:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   1e5f4:	2b00      	cmp	r3, #0
   1e5f6:	d0ea      	beq.n	1e5ce <net_ipv6_nbr_add+0x5a>
   1e5f8:	2300      	movs	r3, #0
   1e5fa:	461a      	mov	r2, r3
   1e5fc:	4631      	mov	r1, r6
   1e5fe:	4803      	ldr	r0, [pc, #12]	; (1e60c <net_ipv6_nbr_add+0x98>)
   1e600:	f000 fff4 	bl	1f5ec <net_mgmt_event_notify_with_info>
}
   1e604:	4620      	mov	r0, r4
   1e606:	b002      	add	sp, #8
   1e608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e60c:	f060000f 	.word	0xf060000f

0001e610 <handle_ra_input>:
{
   1e610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e614:	6885      	ldr	r5, [r0, #8]
   1e616:	b097      	sub	sp, #92	; 0x5c
   1e618:	4604      	mov	r4, r0
	return net_buf_frags_len(pkt->frags);
   1e61a:	4628      	mov	r0, r5
   1e61c:	f7fe ffd0 	bl	1d5c0 <net_buf_frags_len>
	if ((total_len < (sizeof(struct net_ipv6_hdr) +
   1e620:	b280      	uxth	r0, r0
   1e622:	2839      	cmp	r0, #57	; 0x39
   1e624:	d908      	bls.n	1e638 <handle_ra_input+0x28>
	return pkt->frags->data;
   1e626:	68ab      	ldr	r3, [r5, #8]
			  sizeof(struct net_icmpv6_nd_opt_hdr))) ||
   1e628:	79da      	ldrb	r2, [r3, #7]
   1e62a:	2aff      	cmp	r2, #255	; 0xff
   1e62c:	d104      	bne.n	1e638 <handle_ra_input+0x28>
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT) ||
   1e62e:	891a      	ldrh	r2, [r3, #8]
   1e630:	f248 03fe 	movw	r3, #33022	; 0x80fe
   1e634:	429a      	cmp	r2, r3
   1e636:	d00a      	beq.n	1e64e <handle_ra_input+0x3e>
		icmp_hdr = net_icmpv6_get_hdr(pkt, &icmphdr);
   1e638:	a90e      	add	r1, sp, #56	; 0x38
   1e63a:	4620      	mov	r0, r4
   1e63c:	f7fe faee 	bl	1cc1c <net_icmpv6_get_hdr>
		if (!icmp_hdr || icmp_hdr->code != 0) {
   1e640:	b108      	cbz	r0, 1e646 <handle_ra_input+0x36>
   1e642:	7843      	ldrb	r3, [r0, #1]
   1e644:	b11b      	cbz	r3, 1e64e <handle_ra_input+0x3e>
	return NET_DROP;
   1e646:	2002      	movs	r0, #2
}
   1e648:	b017      	add	sp, #92	; 0x5c
   1e64a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	offset = sizeof(struct net_ipv6_hdr) + net_pkt_ipv6_ext_len(pkt) +
   1e64e:	f894 103f 	ldrb.w	r1, [r4, #63]	; 0x3f
	return net_frag_read(frag, offset, pos, 1, value);
   1e652:	68a0      	ldr	r0, [r4, #8]
   1e654:	ad16      	add	r5, sp, #88	; 0x58
   1e656:	312c      	adds	r1, #44	; 0x2c
   1e658:	f825 1d4a 	strh.w	r1, [r5, #-74]!
   1e65c:	f10d 0309 	add.w	r3, sp, #9
   1e660:	9300      	str	r3, [sp, #0]
   1e662:	462a      	mov	r2, r5
   1e664:	2301      	movs	r3, #1
   1e666:	f7fd fa69 	bl	1bb3c <net_frag_read>
	return net_frag_read(frag, offset, pos, len, NULL);
   1e66a:	2300      	movs	r3, #0
   1e66c:	9300      	str	r3, [sp, #0]
   1e66e:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1e672:	2301      	movs	r3, #1
   1e674:	462a      	mov	r2, r5
   1e676:	f7fd fa61 	bl	1bb3c <net_frag_read>
	if (!frag) {
   1e67a:	2800      	cmp	r0, #0
   1e67c:	d0e3      	beq.n	1e646 <handle_ra_input+0x36>
	if (hop_limit) {
   1e67e:	f89d 3009 	ldrb.w	r3, [sp, #9]
   1e682:	b113      	cbz	r3, 1e68a <handle_ra_input+0x7a>
   1e684:	6962      	ldr	r2, [r4, #20]
	iface->ipv6.hop_limit = hop_limit;
   1e686:	f882 324c 	strb.w	r3, [r2, #588]	; 0x24c
	frag = net_frag_read_be16(frag, offset, &offset, &router_lifetime);
   1e68a:	ab03      	add	r3, sp, #12
   1e68c:	462a      	mov	r2, r5
   1e68e:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1e692:	f7fd fa8b 	bl	1bbac <net_frag_read_be16>
	frag = net_frag_read_be32(frag, offset, &offset, &reachable_time);
   1e696:	ab04      	add	r3, sp, #16
   1e698:	462a      	mov	r2, r5
   1e69a:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1e69e:	f7fd fa95 	bl	1bbcc <net_frag_read_be32>
	frag = net_frag_read_be32(frag, offset, &offset, &retrans_timer);
   1e6a2:	ab05      	add	r3, sp, #20
   1e6a4:	462a      	mov	r2, r5
   1e6a6:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1e6aa:	f7fd fa8f 	bl	1bbcc <net_frag_read_be32>
	if (!frag) {
   1e6ae:	4606      	mov	r6, r0
   1e6b0:	2800      	cmp	r0, #0
   1e6b2:	d0c8      	beq.n	1e646 <handle_ra_input+0x36>
	ra_hdr = net_icmpv6_get_ra_hdr(pkt, &hdr);
   1e6b4:	a907      	add	r1, sp, #28
   1e6b6:	4620      	mov	r0, r4
   1e6b8:	f7fe fd1c 	bl	1d0f4 <net_icmpv6_get_ra_hdr>
	if (!ra_hdr) {
   1e6bc:	2800      	cmp	r0, #0
   1e6be:	d0c2      	beq.n	1e646 <handle_ra_input+0x36>
	if (reachable_time && reachable_time <= MAX_REACHABLE_TIME &&
   1e6c0:	9b04      	ldr	r3, [sp, #16]
   1e6c2:	4ac3      	ldr	r2, [pc, #780]	; (1e9d0 <handle_ra_input+0x3c0>)
   1e6c4:	1e59      	subs	r1, r3, #1
   1e6c6:	4291      	cmp	r1, r2
   1e6c8:	d80c      	bhi.n	1e6e4 <handle_ra_input+0xd4>
   1e6ca:	6967      	ldr	r7, [r4, #20]
	     ra_hdr->reachable_time)) {
   1e6cc:	6841      	ldr	r1, [r0, #4]
	if (reachable_time && reachable_time <= MAX_REACHABLE_TIME &&
   1e6ce:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
   1e6d2:	4291      	cmp	r1, r2
   1e6d4:	d006      	beq.n	1e6e4 <handle_ra_input+0xd4>
	iface->ipv6.base_reachable_time = reachable_time;
   1e6d6:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
	iface->ipv6.reachable_time = net_if_ipv6_calc_reachable_time(iface);
   1e6da:	4638      	mov	r0, r7
   1e6dc:	f7fc fd9c 	bl	1b218 <net_if_ipv6_calc_reachable_time>
   1e6e0:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
	if (retrans_timer) {
   1e6e4:	9b05      	ldr	r3, [sp, #20]
   1e6e6:	b113      	cbz	r3, 1e6ee <handle_ra_input+0xde>
	iface->ipv6.retrans_timer = retrans_timer;
   1e6e8:	6962      	ldr	r2, [r4, #20]
   1e6ea:	f8c2 3248 	str.w	r3, [r2, #584]	; 0x248
{
   1e6ee:	f04f 0800 	mov.w	r8, #0
		frag = net_frag_read(frag, offset, &offset, 1, &type);
   1e6f2:	f04f 0a01 	mov.w	sl, #1
   1e6f6:	f10d 030b 	add.w	r3, sp, #11
   1e6fa:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1e6fe:	9300      	str	r3, [sp, #0]
   1e700:	462a      	mov	r2, r5
   1e702:	2301      	movs	r3, #1
   1e704:	4630      	mov	r0, r6
   1e706:	f7fd fa19 	bl	1bb3c <net_frag_read>
		frag = net_frag_read(frag, offset, &offset, 1, &length);
   1e70a:	f10d 030a 	add.w	r3, sp, #10
   1e70e:	9300      	str	r3, [sp, #0]
   1e710:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1e714:	2301      	movs	r3, #1
   1e716:	462a      	mov	r2, r5
   1e718:	f7fd fa10 	bl	1bb3c <net_frag_read>
		if (!frag) {
   1e71c:	2800      	cmp	r0, #0
   1e71e:	d092      	beq.n	1e646 <handle_ra_input+0x36>
		switch (type) {
   1e720:	f89d 200b 	ldrb.w	r2, [sp, #11]
   1e724:	f8bd b00e 	ldrh.w	fp, [sp, #14]
   1e728:	2a03      	cmp	r2, #3
   1e72a:	f000 8096 	beq.w	1e85a <handle_ra_input+0x24a>
   1e72e:	2a05      	cmp	r2, #5
   1e730:	d044      	beq.n	1e7bc <handle_ra_input+0x1ac>
   1e732:	2a01      	cmp	r2, #1
   1e734:	f89d 700a 	ldrb.w	r7, [sp, #10]
   1e738:	f040 818c 	bne.w	1ea54 <handle_ra_input+0x444>
	llstorage.len = NET_LINK_ADDR_MAX_LENGTH;
   1e73c:	2306      	movs	r3, #6
	lladdr.len = NET_LINK_ADDR_MAX_LENGTH;
   1e73e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	llstorage.len = NET_LINK_ADDR_MAX_LENGTH;
   1e742:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
	if (net_pkt_ll_src(pkt)->len < lladdr.len) {
   1e746:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   1e74a:	2b05      	cmp	r3, #5
	lladdr.addr = llstorage.addr;
   1e74c:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
		lladdr.len = net_pkt_ll_src(pkt)->len;
   1e750:	bf98      	it	ls
   1e752:	f88d 302c 	strbls.w	r3, [sp, #44]	; 0x2c
	lladdr.addr = llstorage.addr;
   1e756:	920a      	str	r2, [sp, #40]	; 0x28
	frag = net_frag_read(frag, offset, pos, lladdr.len, lladdr.addr);
   1e758:	9200      	str	r2, [sp, #0]
   1e75a:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   1e75e:	462a      	mov	r2, r5
   1e760:	4659      	mov	r1, fp
   1e762:	f7fd f9eb 	bl	1bb3c <net_frag_read>
	if (!frag && offset) {
   1e766:	4606      	mov	r6, r0
   1e768:	b910      	cbnz	r0, 1e770 <handle_ra_input+0x160>
   1e76a:	f1bb 0f00 	cmp.w	fp, #0
   1e76e:	d121      	bne.n	1e7b4 <handle_ra_input+0x1a4>
	padding = len * 8 - 2 - lladdr.len;
   1e770:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   1e774:	ebc3 03c7 	rsb	r3, r3, r7, lsl #3
   1e778:	3b02      	subs	r3, #2
	if (padding) {
   1e77a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   1e77e:	d00c      	beq.n	1e79a <handle_ra_input+0x18a>
		frag = net_frag_read(frag, *pos, pos, padding, NULL);
   1e780:	2200      	movs	r2, #0
   1e782:	9200      	str	r2, [sp, #0]
   1e784:	4630      	mov	r0, r6
   1e786:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1e78a:	462a      	mov	r2, r5
   1e78c:	f7fd f9d6 	bl	1bb3c <net_frag_read>
		if (!frag && *pos) {
   1e790:	4606      	mov	r6, r0
   1e792:	b910      	cbnz	r0, 1e79a <handle_ra_input+0x18a>
   1e794:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1e798:	b963      	cbnz	r3, 1e7b4 <handle_ra_input+0x1a4>
	return pkt->frags->data;
   1e79a:	68a3      	ldr	r3, [r4, #8]
	return net_ipv6_nbr_add(net_pkt_iface(pkt), &NET_IPV6_HDR(pkt)->src,
   1e79c:	6960      	ldr	r0, [r4, #20]
   1e79e:	6899      	ldr	r1, [r3, #8]
   1e7a0:	2302      	movs	r3, #2
   1e7a2:	9300      	str	r3, [sp, #0]
   1e7a4:	aa0a      	add	r2, sp, #40	; 0x28
   1e7a6:	2301      	movs	r3, #1
   1e7a8:	3108      	adds	r1, #8
   1e7aa:	f7ff fee3 	bl	1e574 <net_ipv6_nbr_add>
   1e7ae:	4680      	mov	r8, r0
			if (!frag && offset) {
   1e7b0:	2e00      	cmp	r6, #0
   1e7b2:	d1a0      	bne.n	1e6f6 <handle_ra_input+0xe6>
   1e7b4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1e7b8:	b303      	cbz	r3, 1e7fc <handle_ra_input+0x1ec>
   1e7ba:	e744      	b.n	1e646 <handle_ra_input+0x36>
	return net_frag_read(frag, offset, pos, len, NULL);
   1e7bc:	2300      	movs	r3, #0
   1e7be:	9300      	str	r3, [sp, #0]
   1e7c0:	462a      	mov	r2, r5
   1e7c2:	2302      	movs	r3, #2
   1e7c4:	4659      	mov	r1, fp
   1e7c6:	f7fd f9b9 	bl	1bb3c <net_frag_read>
			frag = net_frag_read_be32(frag, offset, &offset, &mtu);
   1e7ca:	ab06      	add	r3, sp, #24
   1e7cc:	462a      	mov	r2, r5
   1e7ce:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1e7d2:	f7fd f9fb 	bl	1bbcc <net_frag_read_be32>
			if (!frag && offset) {
   1e7d6:	4606      	mov	r6, r0
   1e7d8:	b920      	cbnz	r0, 1e7e4 <handle_ra_input+0x1d4>
   1e7da:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1e7de:	2b00      	cmp	r3, #0
   1e7e0:	f47f af31 	bne.w	1e646 <handle_ra_input+0x36>
			if (mtu < MIN_IPV6_MTU || mtu > MAX_IPV6_MTU) {
   1e7e4:	9b06      	ldr	r3, [sp, #24]
   1e7e6:	f5a3 62a0 	sub.w	r2, r3, #1280	; 0x500
   1e7ea:	f5b2 4f7b 	cmp.w	r2, #64256	; 0xfb00
   1e7ee:	f4bf af2a 	bcs.w	1e646 <handle_ra_input+0x36>
	iface->mtu = mtu;
   1e7f2:	6962      	ldr	r2, [r4, #20]
			net_if_set_mtu(net_pkt_iface(pkt), mtu);
   1e7f4:	8513      	strh	r3, [r2, #40]	; 0x28
	while (frag) {
   1e7f6:	2e00      	cmp	r6, #0
   1e7f8:	f47f af7d 	bne.w	1e6f6 <handle_ra_input+0xe6>
	return pkt->frags->data;
   1e7fc:	68a3      	ldr	r3, [r4, #8]
	router = net_if_ipv6_router_lookup(net_pkt_iface(pkt),
   1e7fe:	6960      	ldr	r0, [r4, #20]
   1e800:	6899      	ldr	r1, [r3, #8]
   1e802:	3108      	adds	r1, #8
   1e804:	f7fc fc12 	bl	1b02c <net_if_ipv6_router_lookup>
   1e808:	f8bd 200c 	ldrh.w	r2, [sp, #12]
	if (router) {
   1e80c:	4603      	mov	r3, r0
   1e80e:	2800      	cmp	r0, #0
   1e810:	f000 8138 	beq.w	1ea84 <handle_ra_input+0x474>
		if (!router_lifetime) {
   1e814:	2a00      	cmp	r2, #0
   1e816:	f040 8128 	bne.w	1ea6a <handle_ra_input+0x45a>
			net_if_ipv6_router_rm(router);
   1e81a:	f7fc fc85 	bl	1b128 <net_if_ipv6_router_rm>
	if (nbr && net_ipv6_nbr_data(nbr)->pending) {
   1e81e:	f1b8 0f00 	cmp.w	r8, #0
   1e822:	d010      	beq.n	1e846 <handle_ra_input+0x236>
   1e824:	f8d8 300c 	ldr.w	r3, [r8, #12]
   1e828:	6818      	ldr	r0, [r3, #0]
   1e82a:	b160      	cbz	r0, 1e846 <handle_ra_input+0x236>
		if (net_send_data(net_ipv6_nbr_data(nbr)->pending) < 0) {
   1e82c:	f7fb fec2 	bl	1a5b4 <net_send_data>
   1e830:	2800      	cmp	r0, #0
   1e832:	da04      	bge.n	1e83e <handle_ra_input+0x22e>
			net_pkt_unref(net_ipv6_nbr_data(nbr)->pending);
   1e834:	f8d8 300c 	ldr.w	r3, [r8, #12]
   1e838:	6818      	ldr	r0, [r3, #0]
   1e83a:	f7fd f824 	bl	1b886 <net_pkt_unref>
		nbr_clear_ns_pending(net_ipv6_nbr_data(nbr));
   1e83e:	f8d8 000c 	ldr.w	r0, [r8, #12]
   1e842:	f7fe fee0 	bl	1d606 <nbr_clear_ns_pending>
	k_delayed_work_cancel(&net_pkt_iface(pkt)->ipv6.rs_timer);
   1e846:	6960      	ldr	r0, [r4, #20]
   1e848:	f500 7006 	add.w	r0, r0, #536	; 0x218
   1e84c:	f003 fcf8 	bl	22240 <k_delayed_work_cancel>
	net_pkt_unref(pkt);
   1e850:	4620      	mov	r0, r4
   1e852:	f7fd f818 	bl	1b886 <net_pkt_unref>
	return NET_OK;
   1e856:	2000      	movs	r0, #0
   1e858:	e6f6      	b.n	1e648 <handle_ra_input+0x38>
			frag = handle_ra_prefix(pkt, frag, length, offset,
   1e85a:	f89d 300a 	ldrb.w	r3, [sp, #10]
	prefix_info.type = NET_ICMPV6_ND_OPT_PREFIX_INFO;
   1e85e:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	prefix_info.len = len * 8 - 2;
   1e862:	00db      	lsls	r3, r3, #3
   1e864:	3b02      	subs	r3, #2
   1e866:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
	frag = net_frag_read(frag, offset, pos, 1, &prefix_info.prefix_len);
   1e86a:	f10d 033a 	add.w	r3, sp, #58	; 0x3a
   1e86e:	4659      	mov	r1, fp
   1e870:	9300      	str	r3, [sp, #0]
   1e872:	462a      	mov	r2, r5
   1e874:	2301      	movs	r3, #1
   1e876:	f7fd f961 	bl	1bb3c <net_frag_read>
	frag = net_frag_read(frag, *pos, pos, 1, &prefix_info.flags);
   1e87a:	f10d 033b 	add.w	r3, sp, #59	; 0x3b
   1e87e:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1e882:	9300      	str	r3, [sp, #0]
   1e884:	462a      	mov	r2, r5
   1e886:	2301      	movs	r3, #1
   1e888:	f7fd f958 	bl	1bb3c <net_frag_read>
	frag = net_frag_read_be32(frag, *pos, pos, &prefix_info.valid_lifetime);
   1e88c:	ab0f      	add	r3, sp, #60	; 0x3c
   1e88e:	462a      	mov	r2, r5
   1e890:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1e894:	f7fd f99a 	bl	1bbcc <net_frag_read_be32>
	frag = net_frag_read_be32(frag, *pos, pos,
   1e898:	ab10      	add	r3, sp, #64	; 0x40
   1e89a:	462a      	mov	r2, r5
   1e89c:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1e8a0:	f7fd f994 	bl	1bbcc <net_frag_read_be32>
	return net_frag_read(frag, offset, pos, len, NULL);
   1e8a4:	2300      	movs	r3, #0
   1e8a6:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1e8aa:	9300      	str	r3, [sp, #0]
   1e8ac:	462a      	mov	r2, r5
   1e8ae:	2304      	movs	r3, #4
	frag = net_frag_read(frag, *pos, pos, sizeof(struct in6_addr),
   1e8b0:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   1e8b4:	f7fd f942 	bl	1bb3c <net_frag_read>
   1e8b8:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1e8bc:	f8cd b000 	str.w	fp, [sp]
   1e8c0:	2310      	movs	r3, #16
   1e8c2:	462a      	mov	r2, r5
   1e8c4:	f7fd f93a 	bl	1bb3c <net_frag_read>
	if (!frag && *pos) {
   1e8c8:	4606      	mov	r6, r0
   1e8ca:	b920      	cbnz	r0, 1e8d6 <handle_ra_input+0x2c6>
   1e8cc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1e8d0:	2b00      	cmp	r3, #0
   1e8d2:	f47f af6f 	bne.w	1e7b4 <handle_ra_input+0x1a4>
	if (prefix_info.valid_lifetime >= prefix_info.preferred_lifetime &&
   1e8d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1e8d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1e8da:	429a      	cmp	r2, r3
   1e8dc:	f4ff af68 	bcc.w	1e7b0 <handle_ra_input+0x1a0>
   1e8e0:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
   1e8e4:	f248 03fe 	movw	r3, #33022	; 0x80fe
   1e8e8:	429a      	cmp	r2, r3
   1e8ea:	f43f af61 	beq.w	1e7b0 <handle_ra_input+0x1a0>
		if (prefix_info.flags & NET_ICMPV6_RA_FLAG_ONLINK) {
   1e8ee:	f99d 303b 	ldrsb.w	r3, [sp, #59]	; 0x3b
   1e8f2:	2b00      	cmp	r3, #0
   1e8f4:	da20      	bge.n	1e938 <handle_ra_input+0x328>
	prefix = net_if_ipv6_prefix_lookup(net_pkt_iface(pkt),
   1e8f6:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
   1e8fa:	6960      	ldr	r0, [r4, #20]
   1e8fc:	4659      	mov	r1, fp
   1e8fe:	f7fc fafb 	bl	1aef8 <net_if_ipv6_prefix_lookup>
	if (!prefix) {
   1e902:	b940      	cbnz	r0, 1e916 <handle_ra_input+0x306>
		if (!prefix_info->valid_lifetime) {
   1e904:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1e906:	b1bb      	cbz	r3, 1e938 <handle_ra_input+0x328>
		prefix = net_if_ipv6_prefix_add(net_pkt_iface(pkt),
   1e908:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
   1e90c:	6960      	ldr	r0, [r4, #20]
   1e90e:	4659      	mov	r1, fp
   1e910:	f7fc fa80 	bl	1ae14 <net_if_ipv6_prefix_add>
		if (prefix) {
   1e914:	b180      	cbz	r0, 1e938 <handle_ra_input+0x328>
	switch (prefix_info->valid_lifetime) {
   1e916:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1e918:	b139      	cbz	r1, 1e92a <handle_ra_input+0x31a>
   1e91a:	1c4a      	adds	r2, r1, #1
   1e91c:	d055      	beq.n	1e9ca <handle_ra_input+0x3ba>
	prefix->is_infinite = is_infinite;
   1e91e:	2300      	movs	r3, #0
   1e920:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
		net_if_ipv6_prefix_set_timer(prefix,
   1e924:	f7fc fb38 	bl	1af98 <net_if_ipv6_prefix_set_timer>
   1e928:	e006      	b.n	1e938 <handle_ra_input+0x328>
		net_if_ipv6_prefix_rm(net_pkt_iface(pkt),
   1e92a:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
   1e92e:	f100 0128 	add.w	r1, r0, #40	; 0x28
   1e932:	6960      	ldr	r0, [r4, #20]
   1e934:	f7fc fb42 	bl	1afbc <net_if_ipv6_prefix_rm>
		if ((prefix_info.flags & NET_ICMPV6_RA_FLAG_AUTONOMOUS) &&
   1e938:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   1e93c:	065b      	lsls	r3, r3, #25
   1e93e:	f57f af37 	bpl.w	1e7b0 <handle_ra_input+0x1a0>
   1e942:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1e944:	2b00      	cmp	r3, #0
   1e946:	f43f af33 	beq.w	1e7b0 <handle_ra_input+0x1a0>
		    prefix_info.valid_lifetime &&
   1e94a:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   1e94e:	2b40      	cmp	r3, #64	; 0x40
   1e950:	f47f af2e 	bne.w	1e7b0 <handle_ra_input+0x1a0>
	struct in6_addr addr = { };
   1e954:	2210      	movs	r2, #16
   1e956:	2100      	movs	r1, #0
   1e958:	a80a      	add	r0, sp, #40	; 0x28
   1e95a:	f7e1 ff46 	bl	7ea <memset>
	addr->s6_addr[0] = 0xfe;
   1e95e:	f04f 09fe 	mov.w	r9, #254	; 0xfe
	addr->s6_addr[1] = 0x80;
   1e962:	2280      	movs	r2, #128	; 0x80
   1e964:	6967      	ldr	r7, [r4, #20]
	addr->s6_addr[0] = 0xfe;
   1e966:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
	addr->s6_addr[1] = 0x80;
   1e96a:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
	switch (lladdr->len) {
   1e96e:	7d3a      	ldrb	r2, [r7, #20]
   1e970:	2a06      	cmp	r2, #6
   1e972:	d02f      	beq.n	1e9d4 <handle_ra_input+0x3c4>
   1e974:	2a08      	cmp	r2, #8
   1e976:	d048      	beq.n	1ea0a <handle_ra_input+0x3fa>
   1e978:	2a02      	cmp	r2, #2
   1e97a:	d10e      	bne.n	1e99a <handle_ra_input+0x38a>
		if (lladdr->type == NET_LINK_IEEE802154) {
   1e97c:	7d7a      	ldrb	r2, [r7, #21]
   1e97e:	2a01      	cmp	r2, #1
   1e980:	d10b      	bne.n	1e99a <handle_ra_input+0x38a>
			addr->s6_addr[11] = 0xff;
   1e982:	22ff      	movs	r2, #255	; 0xff
   1e984:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
			addr->s6_addr[12] = 0xfe;
   1e988:	f88d 9034 	strb.w	r9, [sp, #52]	; 0x34
			addr->s6_addr[14] = lladdr->addr[0];
   1e98c:	693b      	ldr	r3, [r7, #16]
   1e98e:	781a      	ldrb	r2, [r3, #0]
   1e990:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
			addr->s6_addr[15] = lladdr->addr[1];
   1e994:	785b      	ldrb	r3, [r3, #1]
   1e996:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
	memcpy(&addr, &prefix_info->prefix, sizeof(struct in6_addr) / 2);
   1e99a:	4659      	mov	r1, fp
   1e99c:	2208      	movs	r2, #8
   1e99e:	a80a      	add	r0, sp, #40	; 0x28
   1e9a0:	f7e1 fef7 	bl	792 <memcpy>
	ifaddr = net_if_ipv6_addr_lookup(&addr, NULL);
   1e9a4:	2100      	movs	r1, #0
   1e9a6:	a80a      	add	r0, sp, #40	; 0x28
   1e9a8:	f7fb ff92 	bl	1a8d0 <net_if_ipv6_addr_lookup>
   1e9ac:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
	if (ifaddr && ifaddr->addr_type == NET_ADDR_AUTOCONF) {
   1e9b0:	4607      	mov	r7, r0
   1e9b2:	2800      	cmp	r0, #0
   1e9b4:	d043      	beq.n	1ea3e <handle_ra_input+0x42e>
   1e9b6:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
   1e9ba:	2b01      	cmp	r3, #1
   1e9bc:	d13f      	bne.n	1ea3e <handle_ra_input+0x42e>
		if (prefix_info->valid_lifetime ==
   1e9be:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
   1e9c2:	d127      	bne.n	1ea14 <handle_ra_input+0x404>
	ifaddr->is_infinite = is_infinite;
   1e9c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
   1e9c8:	e6f2      	b.n	1e7b0 <handle_ra_input+0x1a0>
	prefix->is_infinite = is_infinite;
   1e9ca:	f880 a039 	strb.w	sl, [r0, #57]	; 0x39
   1e9ce:	e7b3      	b.n	1e938 <handle_ra_input+0x328>
   1e9d0:	0036ee7f 	.word	0x0036ee7f
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   1e9d4:	2203      	movs	r2, #3
   1e9d6:	6939      	ldr	r1, [r7, #16]
   1e9d8:	a80c      	add	r0, sp, #48	; 0x30
   1e9da:	f7e1 feda 	bl	792 <memcpy>
		addr->s6_addr[11] = 0xff;
   1e9de:	22ff      	movs	r2, #255	; 0xff
   1e9e0:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
		addr->s6_addr[12] = 0xfe;
   1e9e4:	f88d 9034 	strb.w	r9, [sp, #52]	; 0x34
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   1e9e8:	6939      	ldr	r1, [r7, #16]
   1e9ea:	2203      	movs	r2, #3
   1e9ec:	4411      	add	r1, r2
   1e9ee:	f10d 0035 	add.w	r0, sp, #53	; 0x35
   1e9f2:	f7e1 fece 	bl	792 <memcpy>
		if (lladdr->type == NET_LINK_ETHERNET) {
   1e9f6:	7d7b      	ldrb	r3, [r7, #21]
   1e9f8:	2b03      	cmp	r3, #3
   1e9fa:	d1ce      	bne.n	1e99a <handle_ra_input+0x38a>
		addr->s6_addr[8] ^= 0x02;
   1e9fc:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   1ea00:	f083 0302 	eor.w	r3, r3, #2
   1ea04:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
   1ea08:	e7c7      	b.n	1e99a <handle_ra_input+0x38a>
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
   1ea0a:	6939      	ldr	r1, [r7, #16]
   1ea0c:	a80c      	add	r0, sp, #48	; 0x30
   1ea0e:	f7e1 fec0 	bl	792 <memcpy>
   1ea12:	e7f3      	b.n	1e9fc <handle_ra_input+0x3ec>
		if ((prefix_info->valid_lifetime > TWO_HOURS) ||
   1ea14:	f5bb 5fe1 	cmp.w	fp, #7200	; 0x1c20
   1ea18:	d905      	bls.n	1ea26 <handle_ra_input+0x416>
			net_if_ipv6_addr_update_lifetime(ifaddr,
   1ea1a:	990f      	ldr	r1, [sp, #60]	; 0x3c
			net_if_ipv6_addr_update_lifetime(ifaddr, TWO_HOURS);
   1ea1c:	4638      	mov	r0, r7
   1ea1e:	f7fb ffa5 	bl	1a96c <net_if_ipv6_addr_update_lifetime>
	ifaddr->is_infinite = is_infinite;
   1ea22:	2300      	movs	r3, #0
   1ea24:	e7ce      	b.n	1e9c4 <handle_ra_input+0x3b4>
	return _timeout_remaining_get(&work->timeout);
   1ea26:	3020      	adds	r0, #32
   1ea28:	f003 fd3e 	bl	224a8 <_timeout_remaining_get>
	return k_delayed_work_remaining_get(work) / MSEC_PER_SEC;
   1ea2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1ea30:	fb90 f0f3 	sdiv	r0, r0, r3
		if ((prefix_info->valid_lifetime > TWO_HOURS) ||
   1ea34:	4583      	cmp	fp, r0
   1ea36:	d8f0      	bhi.n	1ea1a <handle_ra_input+0x40a>
			net_if_ipv6_addr_update_lifetime(ifaddr, TWO_HOURS);
   1ea38:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
   1ea3c:	e7ee      	b.n	1ea1c <handle_ra_input+0x40c>
		if (prefix_info->valid_lifetime ==
   1ea3e:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
			net_if_ipv6_addr_add(net_pkt_iface(pkt),
   1ea42:	bf0c      	ite	eq
   1ea44:	2300      	moveq	r3, #0
			net_if_ipv6_addr_add(net_pkt_iface(pkt),
   1ea46:	465b      	movne	r3, fp
   1ea48:	2201      	movs	r2, #1
   1ea4a:	a90a      	add	r1, sp, #40	; 0x28
   1ea4c:	6960      	ldr	r0, [r4, #20]
   1ea4e:	f7fb ff93 	bl	1a978 <net_if_ipv6_addr_add>
   1ea52:	e6ad      	b.n	1e7b0 <handle_ra_input+0x1a0>
					     length * 8 - 2);
   1ea54:	00fb      	lsls	r3, r7, #3
   1ea56:	2200      	movs	r2, #0
			frag = net_frag_skip(frag, offset, &offset,
   1ea58:	3b02      	subs	r3, #2
   1ea5a:	9200      	str	r2, [sp, #0]
   1ea5c:	b29b      	uxth	r3, r3
   1ea5e:	462a      	mov	r2, r5
   1ea60:	4659      	mov	r1, fp
   1ea62:	f7fd f86b 	bl	1bb3c <net_frag_read>
			if (!frag && offset) {
   1ea66:	4606      	mov	r6, r0
   1ea68:	e6a2      	b.n	1e7b0 <handle_ra_input+0x1a0>
			if (nbr) {
   1ea6a:	f1b8 0f00 	cmp.w	r8, #0
   1ea6e:	d004      	beq.n	1ea7a <handle_ra_input+0x46a>
				net_ipv6_nbr_data(nbr)->is_router = true;
   1ea70:	f8d8 100c 	ldr.w	r1, [r8, #12]
   1ea74:	2001      	movs	r0, #1
   1ea76:	f881 0069 	strb.w	r0, [r1, #105]	; 0x69
			net_if_ipv6_router_update_lifetime(router,
   1ea7a:	4611      	mov	r1, r2
   1ea7c:	4618      	mov	r0, r3
   1ea7e:	f7fc fb03 	bl	1b088 <net_if_ipv6_router_update_lifetime>
   1ea82:	e6cc      	b.n	1e81e <handle_ra_input+0x20e>
	return pkt->frags->data;
   1ea84:	68a3      	ldr	r3, [r4, #8]
		net_if_ipv6_router_add(net_pkt_iface(pkt),
   1ea86:	6960      	ldr	r0, [r4, #20]
   1ea88:	6899      	ldr	r1, [r3, #8]
   1ea8a:	3108      	adds	r1, #8
   1ea8c:	f7fc fb02 	bl	1b094 <net_if_ipv6_router_add>
   1ea90:	e6c5      	b.n	1e81e <handle_ra_input+0x20e>
   1ea92:	bf00      	nop

0001ea94 <handle_ns_input>:
{
   1ea94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ea98:	4604      	mov	r4, r0
   1ea9a:	b09f      	sub	sp, #124	; 0x7c
	return net_buf_frags_len(pkt->frags);
   1ea9c:	6880      	ldr	r0, [r0, #8]
   1ea9e:	f7fe fd8f 	bl	1d5c0 <net_buf_frags_len>
	ns_hdr = net_icmpv6_get_ns_hdr(pkt, &nshdr);
   1eaa2:	f10d 0a64 	add.w	sl, sp, #100	; 0x64
   1eaa6:	4605      	mov	r5, r0
   1eaa8:	4651      	mov	r1, sl
   1eaaa:	4620      	mov	r0, r4
   1eaac:	f7fe fa1a 	bl	1cee4 <net_icmpv6_get_ns_hdr>
	if (!ns_hdr) {
   1eab0:	4681      	mov	r9, r0
   1eab2:	b908      	cbnz	r0, 1eab8 <handle_ns_input+0x24>
	return NET_DROP;
   1eab4:	2002      	movs	r0, #2
   1eab6:	e09e      	b.n	1ebf6 <handle_ns_input+0x162>
	if ((total_len < (sizeof(struct net_ipv6_hdr) +
   1eab8:	b2ad      	uxth	r5, r5
   1eaba:	2d3f      	cmp	r5, #63	; 0x3f
   1eabc:	d904      	bls.n	1eac8 <handle_ns_input+0x34>
	return pkt->frags->data;
   1eabe:	68a3      	ldr	r3, [r4, #8]
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT)) {
   1eac0:	689b      	ldr	r3, [r3, #8]
			  sizeof(struct net_icmpv6_ns_hdr))) ||
   1eac2:	79db      	ldrb	r3, [r3, #7]
   1eac4:	2bff      	cmp	r3, #255	; 0xff
   1eac6:	d00c      	beq.n	1eae2 <handle_ns_input+0x4e>
		if (net_is_ipv6_addr_mcast(&ns_hdr->tgt)) {
   1eac8:	f899 3004 	ldrb.w	r3, [r9, #4]
   1eacc:	2bff      	cmp	r3, #255	; 0xff
   1eace:	d108      	bne.n	1eae2 <handle_ns_input+0x4e>
			icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   1ead0:	a915      	add	r1, sp, #84	; 0x54
   1ead2:	4620      	mov	r0, r4
   1ead4:	f7fe f8a2 	bl	1cc1c <net_icmpv6_get_hdr>
			if (!icmp_hdr || icmp_hdr->code != 0) {
   1ead8:	2800      	cmp	r0, #0
   1eada:	d0eb      	beq.n	1eab4 <handle_ns_input+0x20>
   1eadc:	7843      	ldrb	r3, [r0, #1]
   1eade:	2b00      	cmp	r3, #0
   1eae0:	d1e8      	bne.n	1eab4 <handle_ns_input+0x20>
	pkt->ipv6_ext_opt_len = len;
   1eae2:	2314      	movs	r3, #20
   1eae4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
	nd_opt_hdr = net_icmpv6_get_nd_opt_hdr(pkt, &ndopthdr);
   1eae8:	a904      	add	r1, sp, #16
   1eaea:	4620      	mov	r0, r4
   1eaec:	f7fe fa55 	bl	1cf9a <net_icmpv6_get_nd_opt_hdr>
   1eaf0:	4607      	mov	r7, r0
	return net_buf_frags_len(pkt->frags);
   1eaf2:	68a0      	ldr	r0, [r4, #8]
   1eaf4:	f7fe fd64 	bl	1d5c0 <net_buf_frags_len>
	frag = net_frag_read(pkt->frags, sllao_offset,
   1eaf8:	f10d 0546 	add.w	r5, sp, #70	; 0x46
	left_len = net_pkt_get_len(pkt) - (sizeof(struct net_ipv6_hdr) +
   1eafc:	f1a0 0b2c 	sub.w	fp, r0, #44	; 0x2c
	while (nd_opt_hdr && net_pkt_ipv6_ext_opt_len(pkt) < left_len) {
   1eb00:	b11f      	cbz	r7, 1eb0a <handle_ns_input+0x76>
   1eb02:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   1eb06:	459b      	cmp	fp, r3
   1eb08:	d878      	bhi.n	1ebfc <handle_ns_input+0x168>
		ifaddr = net_if_ipv6_addr_lookup_by_iface(net_pkt_iface(pkt),
   1eb0a:	f109 0604 	add.w	r6, r9, #4
   1eb0e:	4631      	mov	r1, r6
   1eb10:	6960      	ldr	r0, [r4, #20]
   1eb12:	f7fe fe64 	bl	1d7de <net_if_ipv6_addr_lookup_by_iface>
	if (!ifaddr) {
   1eb16:	4683      	mov	fp, r0
   1eb18:	2800      	cmp	r0, #0
   1eb1a:	d0cb      	beq.n	1eab4 <handle_ns_input+0x20>
	return pkt->frags->data;
   1eb1c:	68a3      	ldr	r3, [r4, #8]
   1eb1e:	689d      	ldr	r5, [r3, #8]
		src = &NET_IPV6_HDR(pkt)->src;
   1eb20:	f105 0708 	add.w	r7, r5, #8
		tgt = &ifaddr->address.in6_addr;
   1eb24:	f100 0804 	add.w	r8, r0, #4
	if (net_is_ipv6_addr_unspecified(&NET_IPV6_HDR(pkt)->src)) {
   1eb28:	4638      	mov	r0, r7
   1eb2a:	f7fe fd51 	bl	1d5d0 <net_is_ipv6_addr_unspecified>
   1eb2e:	4601      	mov	r1, r0
   1eb30:	2800      	cmp	r0, #0
   1eb32:	f000 80c6 	beq.w	1ecc2 <handle_ns_input+0x22e>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   1eb36:	69aa      	ldr	r2, [r5, #24]
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   1eb38:	f240 23ff 	movw	r3, #767	; 0x2ff
   1eb3c:	429a      	cmp	r2, r3
   1eb3e:	d1b9      	bne.n	1eab4 <handle_ns_input+0x20>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   1eb40:	69eb      	ldr	r3, [r5, #28]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   1eb42:	2b00      	cmp	r3, #0
   1eb44:	d1b6      	bne.n	1eab4 <handle_ns_input+0x20>
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   1eb46:	6a2a      	ldr	r2, [r5, #32]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   1eb48:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
   1eb4c:	d1b2      	bne.n	1eab4 <handle_ns_input+0x20>
		((UNALIGNED_GET(&addr->s6_addr32[3]) & htonl(0xff000000)) ==
   1eb4e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   1eb50:	b2d2      	uxtb	r2, r2
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   1eb52:	2aff      	cmp	r2, #255	; 0xff
   1eb54:	d1ae      	bne.n	1eab4 <handle_ns_input+0x20>
		if (ifaddr->addr_state == NET_ADDR_TENTATIVE) {
   1eb56:	f99b 2065 	ldrsb.w	r2, [fp, #101]	; 0x65
   1eb5a:	2a00      	cmp	r2, #0
   1eb5c:	f000 80a5 	beq.w	1ecaa <handle_ns_input+0x216>
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   1eb60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1eb64:	762a      	strb	r2, [r5, #24]
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   1eb66:	76ab      	strb	r3, [r5, #26]
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   1eb68:	2202      	movs	r2, #2
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   1eb6a:	76eb      	strb	r3, [r5, #27]
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   1eb6c:	772b      	strb	r3, [r5, #28]
   1eb6e:	776b      	strb	r3, [r5, #29]
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   1eb70:	77ab      	strb	r3, [r5, #30]
   1eb72:	77eb      	strb	r3, [r5, #31]
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   1eb74:	f885 3020 	strb.w	r3, [r5, #32]
   1eb78:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   1eb7c:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1eb80:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   1eb84:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
   1eb88:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   1eb8c:	f885 3026 	strb.w	r3, [r5, #38]	; 0x26
   1eb90:	2301      	movs	r3, #1
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   1eb92:	766a      	strb	r2, [r5, #25]
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   1eb94:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
		flags = NET_ICMPV6_NA_FLAG_OVERRIDE;
   1eb98:	f105 0118 	add.w	r1, r5, #24
   1eb9c:	6960      	ldr	r0, [r4, #20]
   1eb9e:	f7fc fafb 	bl	1b198 <net_if_ipv6_select_src_addr>
		goto send_na;
   1eba2:	ad05      	add	r5, sp, #20
		flags = NET_ICMPV6_NA_FLAG_OVERRIDE;
   1eba4:	4603      	mov	r3, r0
		goto send_na;
   1eba6:	f100 0e10 	add.w	lr, r0, #16
   1ebaa:	462a      	mov	r2, r5
   1ebac:	6818      	ldr	r0, [r3, #0]
   1ebae:	6859      	ldr	r1, [r3, #4]
   1ebb0:	462e      	mov	r6, r5
   1ebb2:	c603      	stmia	r6!, {r0, r1}
   1ebb4:	3308      	adds	r3, #8
   1ebb6:	4573      	cmp	r3, lr
   1ebb8:	4635      	mov	r5, r6
   1ebba:	d1f7      	bne.n	1ebac <handle_ns_input+0x118>
				net_if_ipv6_select_src_addr(net_pkt_iface(pkt),
   1ebbc:	463d      	mov	r5, r7
   1ebbe:	ae09      	add	r6, sp, #36	; 0x24
   1ebc0:	4613      	mov	r3, r2
   1ebc2:	cb03      	ldmia	r3!, {r0, r1}
   1ebc4:	42b3      	cmp	r3, r6
   1ebc6:	6028      	str	r0, [r5, #0]
   1ebc8:	6069      	str	r1, [r5, #4]
   1ebca:	461a      	mov	r2, r3
   1ebcc:	f105 0508 	add.w	r5, r5, #8
   1ebd0:	d1f6      	bne.n	1ebc0 <handle_ns_input+0x12c>
		flags = NET_ICMPV6_NA_FLAG_OVERRIDE;
   1ebd2:	2320      	movs	r3, #32
   1ebd4:	68a2      	ldr	r2, [r4, #8]
	ret = net_ipv6_send_na(net_pkt_iface(pkt),
   1ebd6:	6960      	ldr	r0, [r4, #20]
			       &NET_IPV6_HDR(pkt)->dst,
   1ebd8:	6892      	ldr	r2, [r2, #8]
	ret = net_ipv6_send_na(net_pkt_iface(pkt),
   1ebda:	9300      	str	r3, [sp, #0]
   1ebdc:	3218      	adds	r2, #24
   1ebde:	4643      	mov	r3, r8
   1ebe0:	4639      	mov	r1, r7
   1ebe2:	f7ff f93a 	bl	1de5a <net_ipv6_send_na>
	if (!ret) {
   1ebe6:	4605      	mov	r5, r0
   1ebe8:	2800      	cmp	r0, #0
   1ebea:	f47f af63 	bne.w	1eab4 <handle_ns_input+0x20>
		net_pkt_unref(pkt);
   1ebee:	4620      	mov	r0, r4
   1ebf0:	f7fc fe49 	bl	1b886 <net_pkt_unref>
		return NET_OK;
   1ebf4:	4628      	mov	r0, r5
}
   1ebf6:	b01f      	add	sp, #124	; 0x7c
   1ebf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!nd_opt_hdr->len) {
   1ebfc:	787e      	ldrb	r6, [r7, #1]
   1ebfe:	9303      	str	r3, [sp, #12]
   1ec00:	2e00      	cmp	r6, #0
   1ec02:	d082      	beq.n	1eb0a <handle_ns_input+0x76>
		switch (nd_opt_hdr->type) {
   1ec04:	783a      	ldrb	r2, [r7, #0]
   1ec06:	2a01      	cmp	r2, #1
   1ec08:	d13e      	bne.n	1ec88 <handle_ns_input+0x1f4>
   1ec0a:	f8d4 8008 	ldr.w	r8, [r4, #8]
				    &NET_IPV6_HDR(pkt)->src)) {
   1ec0e:	f8d8 0008 	ldr.w	r0, [r8, #8]
			if (net_is_ipv6_addr_unspecified(
   1ec12:	3008      	adds	r0, #8
   1ec14:	f7fe fcdc 	bl	1d5d0 <net_is_ipv6_addr_unspecified>
   1ec18:	2800      	cmp	r0, #0
   1ec1a:	f47f af4b 	bne.w	1eab4 <handle_ns_input+0x20>
			if (nd_opt_hdr->len > 2) {
   1ec1e:	2e02      	cmp	r6, #2
   1ec20:	f63f af48 	bhi.w	1eab4 <handle_ns_input+0x20>
						net_pkt_ipv6_ext_len(pkt) +
   1ec24:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
						net_pkt_ip_hdr_len(pkt) +
   1ec28:	f894 1035 	ldrb.w	r1, [r4, #53]	; 0x35
			if (!handle_ns_neighbor(pkt, nd_opt_hdr->len,
   1ec2c:	9b03      	ldr	r3, [sp, #12]
	frag = net_frag_read(pkt->frags, sllao_offset,
   1ec2e:	9500      	str	r5, [sp, #0]
						net_pkt_ip_hdr_len(pkt) +
   1ec30:	4411      	add	r1, r2
			if (!handle_ns_neighbor(pkt, nd_opt_hdr->len,
   1ec32:	3106      	adds	r1, #6
   1ec34:	4419      	add	r1, r3
	lladdr.len = 8 * ll_len - 2;
   1ec36:	00f3      	lsls	r3, r6, #3
   1ec38:	3b02      	subs	r3, #2
   1ec3a:	b2db      	uxtb	r3, r3
	frag = net_frag_read(pkt->frags, sllao_offset,
   1ec3c:	aa0d      	add	r2, sp, #52	; 0x34
   1ec3e:	b289      	uxth	r1, r1
   1ec40:	4640      	mov	r0, r8
	lladdr.len = 8 * ll_len - 2;
   1ec42:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
	frag = net_frag_read(pkt->frags, sllao_offset,
   1ec46:	f7fc ff79 	bl	1bb3c <net_frag_read>
	if (!frag && pos == 0xffff) {
   1ec4a:	b930      	cbnz	r0, 1ec5a <handle_ns_input+0x1c6>
   1ec4c:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
   1ec50:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1ec54:	429a      	cmp	r2, r3
   1ec56:	f43f af2d 	beq.w	1eab4 <handle_ns_input+0x20>
	nbr_lladdr.len = lladdr.len;
   1ec5a:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
	if (net_pkt_ll_src(pkt)->len < nbr_lladdr.len) {
   1ec5e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	nbr_lladdr.len = lladdr.len;
   1ec62:	f88d 2058 	strb.w	r2, [sp, #88]	; 0x58
	if (net_pkt_ll_src(pkt)->len < nbr_lladdr.len) {
   1ec66:	429a      	cmp	r2, r3
		nbr_lladdr.len = net_pkt_ll_src(pkt)->len;
   1ec68:	bf88      	it	hi
   1ec6a:	f88d 3058 	strbhi.w	r3, [sp, #88]	; 0x58
   1ec6e:	68a3      	ldr	r3, [r4, #8]
	nbr_lladdr.addr = lladdr.addr;
   1ec70:	9515      	str	r5, [sp, #84]	; 0x54
	return net_ipv6_nbr_add(net_pkt_iface(pkt), &NET_IPV6_HDR(pkt)->src,
   1ec72:	6899      	ldr	r1, [r3, #8]
   1ec74:	6960      	ldr	r0, [r4, #20]
   1ec76:	2300      	movs	r3, #0
   1ec78:	9300      	str	r3, [sp, #0]
   1ec7a:	aa15      	add	r2, sp, #84	; 0x54
   1ec7c:	3108      	adds	r1, #8
   1ec7e:	f7ff fc79 	bl	1e574 <net_ipv6_nbr_add>
			if (!handle_ns_neighbor(pkt, nd_opt_hdr->len,
   1ec82:	2800      	cmp	r0, #0
   1ec84:	f43f af16 	beq.w	1eab4 <handle_ns_input+0x20>
   1ec88:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
					     (nd_opt_hdr->len << 3));
   1ec8c:	787b      	ldrb	r3, [r7, #1]
		net_pkt_set_ipv6_ext_opt_len(pkt,
   1ec8e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1ec92:	b2db      	uxtb	r3, r3
		if (prev_opt_len >= net_pkt_ipv6_ext_opt_len(pkt)) {
   1ec94:	4293      	cmp	r3, r2
	pkt->ipv6_ext_opt_len = len;
   1ec96:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
   1ec9a:	f67f af0b 	bls.w	1eab4 <handle_ns_input+0x20>
		nd_opt_hdr = net_icmpv6_get_nd_opt_hdr(pkt, &ndopthdr);
   1ec9e:	a904      	add	r1, sp, #16
   1eca0:	4620      	mov	r0, r4
   1eca2:	f7fe f97a 	bl	1cf9a <net_icmpv6_get_nd_opt_hdr>
   1eca6:	4607      	mov	r7, r0
   1eca8:	e72a      	b.n	1eb00 <handle_ns_input+0x6c>
	if (net_is_ipv6_ll_addr(addr)) {
   1ecaa:	f8bb 2004 	ldrh.w	r2, [fp, #4]
   1ecae:	f248 03fe 	movw	r3, #33022	; 0x80fe
   1ecb2:	429a      	cmp	r2, r3
   1ecb4:	f43f aefe 	beq.w	1eab4 <handle_ns_input+0x20>
	net_if_ipv6_dad_failed(iface, addr);
   1ecb8:	4641      	mov	r1, r8
   1ecba:	6960      	ldr	r0, [r4, #20]
   1ecbc:	f7fc f83a 	bl	1ad34 <net_if_ipv6_dad_failed>
   1ecc0:	e6f8      	b.n	1eab4 <handle_ns_input+0x20>
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
   1ecc2:	4638      	mov	r0, r7
   1ecc4:	f7fb fe04 	bl	1a8d0 <net_if_ipv6_addr_lookup>
	if (net_is_my_ipv6_addr(&NET_IPV6_HDR(pkt)->src)) {
   1ecc8:	2800      	cmp	r0, #0
   1ecca:	f47f aef3 	bne.w	1eab4 <handle_ns_input+0x20>
	return pkt->frags->data;
   1ecce:	68a3      	ldr	r3, [r4, #8]
   1ecd0:	689b      	ldr	r3, [r3, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   1ecd2:	6999      	ldr	r1, [r3, #24]
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   1ecd4:	f240 22ff 	movw	r2, #767	; 0x2ff
   1ecd8:	4291      	cmp	r1, r2
	if (net_is_ipv6_addr_solicited_node(&NET_IPV6_HDR(pkt)->dst)) {
   1ecda:	f103 0b18 	add.w	fp, r3, #24
   1ecde:	d139      	bne.n	1ed54 <handle_ns_input+0x2c0>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   1ece0:	69da      	ldr	r2, [r3, #28]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   1ece2:	bbba      	cbnz	r2, 1ed54 <handle_ns_input+0x2c0>
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   1ece4:	6a1a      	ldr	r2, [r3, #32]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   1ece6:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
   1ecea:	d133      	bne.n	1ed54 <handle_ns_input+0x2c0>
		((UNALIGNED_GET(&addr->s6_addr32[3]) & htonl(0xff000000)) ==
   1ecec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1ecee:	b2d2      	uxtb	r2, r2
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   1ecf0:	2aff      	cmp	r2, #255	; 0xff
   1ecf2:	d12f      	bne.n	1ed54 <handle_ns_input+0x2c0>
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst,
   1ecf4:	ad09      	add	r5, sp, #36	; 0x24
   1ecf6:	f103 0208 	add.w	r2, r3, #8
   1ecfa:	46ac      	mov	ip, r5
   1ecfc:	6810      	ldr	r0, [r2, #0]
   1ecfe:	6851      	ldr	r1, [r2, #4]
   1ed00:	46ae      	mov	lr, r5
   1ed02:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   1ed06:	3208      	adds	r2, #8
   1ed08:	455a      	cmp	r2, fp
   1ed0a:	4675      	mov	r5, lr
   1ed0c:	d1f6      	bne.n	1ecfc <handle_ns_input+0x268>
   1ed0e:	ad0d      	add	r5, sp, #52	; 0x34
   1ed10:	46e6      	mov	lr, ip
   1ed12:	e8be 0003 	ldmia.w	lr!, {r0, r1}
   1ed16:	45ae      	cmp	lr, r5
   1ed18:	6010      	str	r0, [r2, #0]
   1ed1a:	6051      	str	r1, [r2, #4]
   1ed1c:	46f4      	mov	ip, lr
   1ed1e:	f102 0208 	add.w	r2, r2, #8
   1ed22:	d1f5      	bne.n	1ed10 <handle_ns_input+0x27c>
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, &ns_hdr->tgt);
   1ed24:	46ae      	mov	lr, r5
   1ed26:	f109 0914 	add.w	r9, r9, #20
   1ed2a:	6830      	ldr	r0, [r6, #0]
   1ed2c:	6871      	ldr	r1, [r6, #4]
   1ed2e:	4672      	mov	r2, lr
   1ed30:	c203      	stmia	r2!, {r0, r1}
   1ed32:	3608      	adds	r6, #8
   1ed34:	454e      	cmp	r6, r9
   1ed36:	4696      	mov	lr, r2
   1ed38:	d1f7      	bne.n	1ed2a <handle_ns_input+0x296>
   1ed3a:	462a      	mov	r2, r5
   1ed3c:	3308      	adds	r3, #8
   1ed3e:	ae11      	add	r6, sp, #68	; 0x44
   1ed40:	4615      	mov	r5, r2
   1ed42:	cd03      	ldmia	r5!, {r0, r1}
   1ed44:	42b5      	cmp	r5, r6
   1ed46:	6018      	str	r0, [r3, #0]
   1ed48:	6059      	str	r1, [r3, #4]
   1ed4a:	462a      	mov	r2, r5
   1ed4c:	f103 0308 	add.w	r3, r3, #8
   1ed50:	d1f6      	bne.n	1ed40 <handle_ns_input+0x2ac>
   1ed52:	e03e      	b.n	1edd2 <handle_ns_input+0x33e>
		ifaddr = net_if_ipv6_addr_lookup_by_iface(net_pkt_iface(pkt),
   1ed54:	4659      	mov	r1, fp
   1ed56:	6960      	ldr	r0, [r4, #20]
   1ed58:	f7fe fd41 	bl	1d7de <net_if_ipv6_addr_lookup_by_iface>
	if (ifaddr) {
   1ed5c:	4605      	mov	r5, r0
   1ed5e:	2800      	cmp	r0, #0
   1ed60:	f43f aea8 	beq.w	1eab4 <handle_ns_input+0x20>
   1ed64:	68a3      	ldr	r3, [r4, #8]
   1ed66:	689b      	ldr	r3, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst,
   1ed68:	f10d 0e44 	add.w	lr, sp, #68	; 0x44
   1ed6c:	f103 0208 	add.w	r2, r3, #8
   1ed70:	f103 0b18 	add.w	fp, r3, #24
   1ed74:	4617      	mov	r7, r2
   1ed76:	46f4      	mov	ip, lr
   1ed78:	6810      	ldr	r0, [r2, #0]
   1ed7a:	6851      	ldr	r1, [r2, #4]
   1ed7c:	46f0      	mov	r8, lr
   1ed7e:	e8a8 0003 	stmia.w	r8!, {r0, r1}
   1ed82:	3208      	adds	r2, #8
   1ed84:	455a      	cmp	r2, fp
   1ed86:	46c6      	mov	lr, r8
   1ed88:	d1f6      	bne.n	1ed78 <handle_ns_input+0x2e4>
   1ed8a:	3318      	adds	r3, #24
   1ed8c:	aa15      	add	r2, sp, #84	; 0x54
   1ed8e:	46e6      	mov	lr, ip
   1ed90:	e8be 0003 	ldmia.w	lr!, {r0, r1}
   1ed94:	4596      	cmp	lr, r2
   1ed96:	6018      	str	r0, [r3, #0]
   1ed98:	6059      	str	r1, [r3, #4]
   1ed9a:	46f4      	mov	ip, lr
   1ed9c:	f103 0308 	add.w	r3, r3, #8
   1eda0:	d1f5      	bne.n	1ed8e <handle_ns_input+0x2fa>
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, &ns_hdr->tgt);
   1eda2:	4696      	mov	lr, r2
   1eda4:	f109 0914 	add.w	r9, r9, #20
   1eda8:	6830      	ldr	r0, [r6, #0]
   1edaa:	6871      	ldr	r1, [r6, #4]
   1edac:	4673      	mov	r3, lr
   1edae:	c303      	stmia	r3!, {r0, r1}
   1edb0:	3608      	adds	r6, #8
   1edb2:	454e      	cmp	r6, r9
   1edb4:	469e      	mov	lr, r3
   1edb6:	d1f7      	bne.n	1eda8 <handle_ns_input+0x314>
   1edb8:	4613      	mov	r3, r2
   1edba:	463e      	mov	r6, r7
   1edbc:	461a      	mov	r2, r3
   1edbe:	ca03      	ldmia	r2!, {r0, r1}
   1edc0:	4552      	cmp	r2, sl
   1edc2:	6030      	str	r0, [r6, #0]
   1edc4:	6071      	str	r1, [r6, #4]
   1edc6:	4613      	mov	r3, r2
   1edc8:	f106 0608 	add.w	r6, r6, #8
   1edcc:	d1f6      	bne.n	1edbc <handle_ns_input+0x328>
		tgt = &ifaddr->address.in6_addr;
   1edce:	f105 0804 	add.w	r8, r5, #4
		flags = NET_ICMPV6_NA_FLAG_SOLICITED |
   1edd2:	2360      	movs	r3, #96	; 0x60
		goto send_na;
   1edd4:	e6fe      	b.n	1ebd4 <handle_ns_input+0x140>
	...

0001edd8 <nd_reachable_timeout>:
{
   1edd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1edda:	4d36      	ldr	r5, [pc, #216]	; (1eeb4 <nd_reachable_timeout+0xdc>)
	struct net_ipv6_nbr_data *data = CONTAINER_OF(work,
   1eddc:	f1a0 0114 	sub.w	r1, r0, #20
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1ede0:	2200      	movs	r2, #0
   1ede2:	462e      	mov	r6, r5
   1ede4:	01d3      	lsls	r3, r2, #7
   1ede6:	18ec      	adds	r4, r5, r3
		if (nbr->data == (u8_t *)data) {
   1ede8:	68e7      	ldr	r7, [r4, #12]
   1edea:	42b9      	cmp	r1, r7
   1edec:	d04f      	beq.n	1ee8e <nd_reachable_timeout+0xb6>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1edee:	3201      	adds	r2, #1
   1edf0:	2a08      	cmp	r2, #8
   1edf2:	d1f7      	bne.n	1ede4 <nd_reachable_timeout+0xc>
}
   1edf4:	b003      	add	sp, #12
   1edf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (data->ns_count >= MAX_MULTICAST_SOLICIT) {
   1edf8:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
   1edfc:	2a02      	cmp	r2, #2
   1edfe:	d905      	bls.n	1ee0c <nd_reachable_timeout+0x34>
				nbr_free(nbr);
   1ee00:	4620      	mov	r0, r4
}
   1ee02:	b003      	add	sp, #12
   1ee04:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
				nbr_free(nbr);
   1ee08:	f7fe bc09 	b.w	1d61e <nbr_free>
			data->ns_count++;
   1ee0c:	3201      	adds	r2, #1
   1ee0e:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
			ret = net_ipv6_send_ns(nbr->iface, NULL, NULL, NULL,
   1ee12:	441e      	add	r6, r3
   1ee14:	3810      	subs	r0, #16
   1ee16:	2300      	movs	r3, #0
   1ee18:	9301      	str	r3, [sp, #4]
   1ee1a:	9000      	str	r0, [sp, #0]
   1ee1c:	461a      	mov	r2, r3
   1ee1e:	4619      	mov	r1, r3
   1ee20:	68b0      	ldr	r0, [r6, #8]
   1ee22:	f7ff fa41 	bl	1e2a8 <net_ipv6_send_ns>
   1ee26:	e7e5      	b.n	1edf4 <nd_reachable_timeout+0x1c>
		data->state = NET_IPV6_NBR_STATE_STALE;
   1ee28:	2302      	movs	r3, #2
   1ee2a:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
		break;
   1ee2e:	e7e1      	b.n	1edf4 <nd_reachable_timeout+0x1c>
		data->state = NET_IPV6_NBR_STATE_PROBE;
   1ee30:	2204      	movs	r2, #4
   1ee32:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
		data->ns_count = 0;
   1ee36:	2200      	movs	r2, #0
   1ee38:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
		if (data->ns_count >= MAX_UNICAST_SOLICIT) {
   1ee3c:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
   1ee40:	2a02      	cmp	r2, #2
   1ee42:	f1a0 0110 	sub.w	r1, r0, #16
   1ee46:	d90c      	bls.n	1ee62 <nd_reachable_timeout+0x8a>
			router = net_if_ipv6_router_lookup(nbr->iface,
   1ee48:	4433      	add	r3, r6
   1ee4a:	6898      	ldr	r0, [r3, #8]
   1ee4c:	f7fc f8ee 	bl	1b02c <net_if_ipv6_router_lookup>
			if (router && !router->is_infinite) {
   1ee50:	2800      	cmp	r0, #0
   1ee52:	d0cf      	beq.n	1edf4 <nd_reachable_timeout+0x1c>
   1ee54:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
   1ee58:	2b00      	cmp	r3, #0
   1ee5a:	d1cb      	bne.n	1edf4 <nd_reachable_timeout+0x1c>
				net_if_ipv6_router_rm(router);
   1ee5c:	f7fc f964 	bl	1b128 <net_if_ipv6_router_rm>
   1ee60:	e7ce      	b.n	1ee00 <nd_reachable_timeout+0x28>
			data->ns_count++;
   1ee62:	3201      	adds	r2, #1
   1ee64:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
			ret = net_ipv6_send_ns(nbr->iface, NULL, NULL, NULL,
   1ee68:	18f0      	adds	r0, r6, r3
   1ee6a:	2300      	movs	r3, #0
   1ee6c:	e88d 000a 	stmia.w	sp, {r1, r3}
   1ee70:	461a      	mov	r2, r3
   1ee72:	4619      	mov	r1, r3
   1ee74:	6880      	ldr	r0, [r0, #8]
   1ee76:	f7ff fa17 	bl	1e2a8 <net_ipv6_send_ns>
			k_delayed_work_submit(
   1ee7a:	68e1      	ldr	r1, [r4, #12]
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   1ee7c:	480e      	ldr	r0, [pc, #56]	; (1eeb8 <nd_reachable_timeout+0xe0>)
   1ee7e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1ee82:	3114      	adds	r1, #20
}
   1ee84:	b003      	add	sp, #12
   1ee86:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1ee8a:	f003 ba33 	b.w	222f4 <k_delayed_work_submit_to_queue>
	if (!data || !nbr) {
   1ee8e:	2900      	cmp	r1, #0
   1ee90:	d0b0      	beq.n	1edf4 <nd_reachable_timeout+0x1c>
	switch (data->state) {
   1ee92:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
   1ee96:	2a04      	cmp	r2, #4
   1ee98:	d8ac      	bhi.n	1edf4 <nd_reachable_timeout+0x1c>
   1ee9a:	a101      	add	r1, pc, #4	; (adr r1, 1eea0 <nd_reachable_timeout+0xc8>)
   1ee9c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   1eea0:	0001edf9 	.word	0x0001edf9
   1eea4:	0001ee29 	.word	0x0001ee29
   1eea8:	0001ee01 	.word	0x0001ee01
   1eeac:	0001ee31 	.word	0x0001ee31
   1eeb0:	0001ee3d 	.word	0x0001ee3d
   1eeb4:	2000a168 	.word	0x2000a168
   1eeb8:	20003340 	.word	0x20003340

0001eebc <net_ipv6_start_dad>:
{
   1eebc:	b507      	push	{r0, r1, r2, lr}
	return net_ipv6_send_ns(iface, NULL, NULL, NULL,
   1eebe:	2301      	movs	r3, #1
   1eec0:	9301      	str	r3, [sp, #4]
   1eec2:	3104      	adds	r1, #4
   1eec4:	2300      	movs	r3, #0
   1eec6:	9100      	str	r1, [sp, #0]
   1eec8:	461a      	mov	r2, r3
   1eeca:	4619      	mov	r1, r3
   1eecc:	f7ff f9ec 	bl	1e2a8 <net_ipv6_send_ns>
}
   1eed0:	b003      	add	sp, #12
   1eed2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0001eed8 <net_ipv6_prepare_for_send>:
{
   1eed8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct net_if *iface = NULL;
   1eeda:	2300      	movs	r3, #0
   1eedc:	9303      	str	r3, [sp, #12]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1eede:	6943      	ldr	r3, [r0, #20]
   1eee0:	f3bf 8f5b 	dmb	ish
   1eee4:	68db      	ldr	r3, [r3, #12]
   1eee6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(net_pkt_iface(pkt)->flags, NET_IF_POINTOPOINT)) {
   1eeea:	0799      	lsls	r1, r3, #30
{
   1eeec:	4604      	mov	r4, r0
	if (atomic_test_bit(net_pkt_iface(pkt)->flags, NET_IF_POINTOPOINT)) {
   1eeee:	d468      	bmi.n	1efc2 <net_ipv6_prepare_for_send+0xea>
	if ((net_pkt_ll_dst(pkt)->addr &&
   1eef0:	6a83      	ldr	r3, [r0, #40]	; 0x28
   1eef2:	b923      	cbnz	r3, 1eefe <net_ipv6_prepare_for_send+0x26>
   1eef4:	6883      	ldr	r3, [r0, #8]
   1eef6:	6899      	ldr	r1, [r3, #8]
	      !IS_ENABLED(CONFIG_NET_ROUTING))) ||
   1eef8:	7e0b      	ldrb	r3, [r1, #24]
   1eefa:	2bff      	cmp	r3, #255	; 0xff
   1eefc:	d10a      	bne.n	1ef14 <net_ipv6_prepare_for_send+0x3c>
	return pkt->forwarding;
   1eefe:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
	if (net_pkt_forwarding(pkt) &&
   1ef02:	075a      	lsls	r2, r3, #29
   1ef04:	d45d      	bmi.n	1efc2 <net_ipv6_prepare_for_send+0xea>
	return pkt->frags->data;
   1ef06:	68a3      	ldr	r3, [r4, #8]
		return update_ll_reserve(pkt, &NET_IPV6_HDR(pkt)->dst);
   1ef08:	6899      	ldr	r1, [r3, #8]
   1ef0a:	3118      	adds	r1, #24
   1ef0c:	4620      	mov	r0, r4
   1ef0e:	f7fe fc0f 	bl	1d730 <update_ll_reserve.part.32>
   1ef12:	e056      	b.n	1efc2 <net_ipv6_prepare_for_send+0xea>
	if (net_if_ipv6_addr_onlink(&iface,
   1ef14:	3118      	adds	r1, #24
   1ef16:	a803      	add	r0, sp, #12
   1ef18:	f7fc f80e 	bl	1af38 <net_if_ipv6_addr_onlink>
   1ef1c:	68a3      	ldr	r3, [r4, #8]
		nexthop = &NET_IPV6_HDR(pkt)->dst;
   1ef1e:	689d      	ldr	r5, [r3, #8]
   1ef20:	3518      	adds	r5, #24
	if (net_if_ipv6_addr_onlink(&iface,
   1ef22:	2800      	cmp	r0, #0
   1ef24:	d03c      	beq.n	1efa0 <net_ipv6_prepare_for_send+0xc8>
		net_pkt_set_iface(pkt, iface);
   1ef26:	9b03      	ldr	r3, [sp, #12]
	pkt->iface = iface;
   1ef28:	6163      	str	r3, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1ef2a:	7d5b      	ldrb	r3, [r3, #21]
   1ef2c:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1ef30:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	if (!iface) {
   1ef34:	9b03      	ldr	r3, [sp, #12]
   1ef36:	b963      	cbnz	r3, 1ef52 <net_ipv6_prepare_for_send+0x7a>
		if (net_if_ipv6_addr_onlink(&iface, nexthop)) {
   1ef38:	4629      	mov	r1, r5
   1ef3a:	a803      	add	r0, sp, #12
   1ef3c:	f7fb fffc 	bl	1af38 <net_if_ipv6_addr_onlink>
   1ef40:	2800      	cmp	r0, #0
   1ef42:	d048      	beq.n	1efd6 <net_ipv6_prepare_for_send+0xfe>
			net_pkt_set_iface(pkt, iface);
   1ef44:	9b03      	ldr	r3, [sp, #12]
	pkt->iface = iface;
   1ef46:	6163      	str	r3, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1ef48:	7d5b      	ldrb	r3, [r3, #21]
   1ef4a:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1ef4e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	nbr = nbr_lookup(&net_neighbor.table, iface, nexthop);
   1ef52:	4629      	mov	r1, r5
   1ef54:	9803      	ldr	r0, [sp, #12]
   1ef56:	f7fe fcc5 	bl	1d8e4 <nbr_lookup.isra.29>
	if (nbr && nbr->idx != NET_NBR_LLADDR_UNKNOWN) {
   1ef5a:	4606      	mov	r6, r0
   1ef5c:	2800      	cmp	r0, #0
   1ef5e:	d03d      	beq.n	1efdc <net_ipv6_prepare_for_send+0x104>
   1ef60:	7840      	ldrb	r0, [r0, #1]
   1ef62:	28ff      	cmp	r0, #255	; 0xff
   1ef64:	d03a      	beq.n	1efdc <net_ipv6_prepare_for_send+0x104>
		lladdr = net_nbr_get_lladdr(nbr->idx);
   1ef66:	f7fe fb23 	bl	1d5b0 <net_nbr_get_lladdr>
		net_pkt_ll_dst(pkt)->addr = lladdr->addr;
   1ef6a:	1c83      	adds	r3, r0, #2
   1ef6c:	62a3      	str	r3, [r4, #40]	; 0x28
		net_pkt_ll_dst(pkt)->len = lladdr->len;
   1ef6e:	7843      	ldrb	r3, [r0, #1]
   1ef70:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_STALE) {
   1ef74:	68f3      	ldr	r3, [r6, #12]
   1ef76:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   1ef7a:	2b02      	cmp	r3, #2
   1ef7c:	d10a      	bne.n	1ef94 <net_ipv6_prepare_for_send+0xbc>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_DELAY);
   1ef7e:	2103      	movs	r1, #3
   1ef80:	4630      	mov	r0, r6
   1ef82:	f7fe fb35 	bl	1d5f0 <ipv6_nbr_set_state>
			k_delayed_work_submit(
   1ef86:	68f1      	ldr	r1, [r6, #12]
   1ef88:	481c      	ldr	r0, [pc, #112]	; (1effc <net_ipv6_prepare_for_send+0x124>)
   1ef8a:	f241 3288 	movw	r2, #5000	; 0x1388
   1ef8e:	3114      	adds	r1, #20
   1ef90:	f003 f9b0 	bl	222f4 <k_delayed_work_submit_to_queue>
	return pkt->forwarding;
   1ef94:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
	if (net_pkt_forwarding(pkt) &&
   1ef98:	075b      	lsls	r3, r3, #29
   1ef9a:	d412      	bmi.n	1efc2 <net_ipv6_prepare_for_send+0xea>
   1ef9c:	4629      	mov	r1, r5
   1ef9e:	e7b5      	b.n	1ef0c <net_ipv6_prepare_for_send+0x34>
	route = net_route_lookup(iface, dst);
   1efa0:	4629      	mov	r1, r5
   1efa2:	f000 fbcb 	bl	1f73c <net_route_lookup>
	if (route) {
   1efa6:	4606      	mov	r6, r0
   1efa8:	b170      	cbz	r0, 1efc8 <net_ipv6_prepare_for_send+0xf0>
		nexthop = net_route_get_nexthop(route);
   1efaa:	f000 fc6d 	bl	1f888 <net_route_get_nexthop>
		if (!nexthop) {
   1efae:	4605      	mov	r5, r0
   1efb0:	2800      	cmp	r0, #0
   1efb2:	d1bf      	bne.n	1ef34 <net_ipv6_prepare_for_send+0x5c>
			net_route_del(route);
   1efb4:	4630      	mov	r0, r6
   1efb6:	f000 fc1b 	bl	1f7f0 <net_route_del>
			net_pkt_unref(pkt);
   1efba:	4620      	mov	r0, r4
   1efbc:	f7fc fc63 	bl	1b886 <net_pkt_unref>
			return NULL;
   1efc0:	2400      	movs	r4, #0
}
   1efc2:	4620      	mov	r0, r4
   1efc4:	b004      	add	sp, #16
   1efc6:	bd70      	pop	{r4, r5, r6, pc}
		router = net_if_ipv6_router_find_default(NULL, dst);
   1efc8:	4629      	mov	r1, r5
   1efca:	f7fc f845 	bl	1b058 <net_if_ipv6_router_find_default>
		if (!router) {
   1efce:	b188      	cbz	r0, 1eff4 <net_ipv6_prepare_for_send+0x11c>
		nexthop = &router->address.in6_addr;
   1efd0:	f100 052c 	add.w	r5, r0, #44	; 0x2c
   1efd4:	e7ae      	b.n	1ef34 <net_ipv6_prepare_for_send+0x5c>
			iface = net_pkt_iface(pkt);
   1efd6:	6963      	ldr	r3, [r4, #20]
   1efd8:	9303      	str	r3, [sp, #12]
   1efda:	e7ba      	b.n	1ef52 <net_ipv6_prepare_for_send+0x7a>
	return pkt->frags->data;
   1efdc:	68a3      	ldr	r3, [r4, #8]
	ret = net_ipv6_send_ns(net_pkt_iface(pkt), pkt,
   1efde:	2600      	movs	r6, #0
   1efe0:	689a      	ldr	r2, [r3, #8]
   1efe2:	e88d 0060 	stmia.w	sp, {r5, r6}
   1efe6:	4633      	mov	r3, r6
   1efe8:	3208      	adds	r2, #8
   1efea:	4621      	mov	r1, r4
   1efec:	6960      	ldr	r0, [r4, #20]
   1efee:	f7ff f95b 	bl	1e2a8 <net_ipv6_send_ns>
   1eff2:	e7e5      	b.n	1efc0 <net_ipv6_prepare_for_send+0xe8>
		if (!nexthop) {
   1eff4:	2d00      	cmp	r5, #0
   1eff6:	d1ac      	bne.n	1ef52 <net_ipv6_prepare_for_send+0x7a>
   1eff8:	e7df      	b.n	1efba <net_ipv6_prepare_for_send+0xe2>
   1effa:	bf00      	nop
   1effc:	20003340 	.word	0x20003340

0001f000 <net_ipv6_send_rs>:
{
   1f000:	b5f0      	push	{r4, r5, r6, r7, lr}
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, NULL),
   1f002:	2100      	movs	r1, #0
{
   1f004:	b085      	sub	sp, #20
   1f006:	4607      	mov	r7, r0
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, NULL),
   1f008:	f7fe faef 	bl	1d5ea <net_if_get_ll_reserve>
   1f00c:	210a      	movs	r1, #10
   1f00e:	f7fc fbbd 	bl	1b78c <net_pkt_get_reserve_tx>
	if (!pkt) {
   1f012:	4605      	mov	r5, r0
   1f014:	b138      	cbz	r0, 1f026 <net_ipv6_send_rs+0x26>
	frag = net_pkt_get_frag(pkt, ND_NET_BUF_TIMEOUT);
   1f016:	210a      	movs	r1, #10
   1f018:	f7fc fbd0 	bl	1b7bc <net_pkt_get_frag>
	if (!frag) {
   1f01c:	4606      	mov	r6, r0
   1f01e:	b928      	cbnz	r0, 1f02c <net_ipv6_send_rs+0x2c>
		net_pkt_unref(pkt);
   1f020:	4628      	mov	r0, r5
   1f022:	f7fc fc30 	bl	1b886 <net_pkt_unref>
		return -ENOMEM;
   1f026:	f06f 000b 	mvn.w	r0, #11
   1f02a:	e08b      	b.n	1f144 <net_ipv6_send_rs+0x144>
	net_pkt_frag_add(pkt, frag);
   1f02c:	4601      	mov	r1, r0
   1f02e:	4628      	mov	r0, r5
   1f030:	f7fc fc50 	bl	1b8d4 <net_pkt_frag_add>
	pkt->iface = iface;
   1f034:	616f      	str	r7, [r5, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1f036:	7d7b      	ldrb	r3, [r7, #21]
   1f038:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1f03c:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
	pkt->family = family;
   1f040:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
   1f044:	220a      	movs	r2, #10
   1f046:	f362 03c6 	bfi	r3, r2, #3, #4
   1f04a:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
	pkt->ip_hdr_len = len;
   1f04e:	2328      	movs	r3, #40	; 0x28
   1f050:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
	net_pkt_ll_clear(pkt);
   1f054:	4628      	mov	r0, r5
   1f056:	f7fe fb46 	bl	1d6e6 <net_pkt_ll_clear>
	return pkt->frags->data;
   1f05a:	68ab      	ldr	r3, [r5, #8]
   1f05c:	689c      	ldr	r4, [r3, #8]
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   1f05e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f062:	7623      	strb	r3, [r4, #24]
   1f064:	2300      	movs	r3, #0
   1f066:	2202      	movs	r2, #2
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   1f068:	76a3      	strb	r3, [r4, #26]
   1f06a:	76e3      	strb	r3, [r4, #27]
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   1f06c:	7723      	strb	r3, [r4, #28]
   1f06e:	7763      	strb	r3, [r4, #29]
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   1f070:	77a3      	strb	r3, [r4, #30]
   1f072:	77e3      	strb	r3, [r4, #31]
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   1f074:	f884 3020 	strb.w	r3, [r4, #32]
   1f078:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   1f07c:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
   1f080:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   1f084:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   1f088:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   1f08c:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
   1f090:	2301      	movs	r3, #1
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   1f092:	7662      	strb	r2, [r4, #25]
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   1f094:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
						    &NET_IPV6_HDR(pkt)->dst));
   1f098:	4638      	mov	r0, r7
   1f09a:	f104 0118 	add.w	r1, r4, #24
   1f09e:	f7fc f87b 	bl	1b198 <net_if_ipv6_select_src_addr>

   1f0a2:	466f      	mov	r7, sp
						    &NET_IPV6_HDR(pkt)->dst));
   1f0a4:	4603      	mov	r3, r0

   1f0a6:	f100 0c10 	add.w	ip, r0, #16
   1f0aa:	466a      	mov	r2, sp
   1f0ac:	6818      	ldr	r0, [r3, #0]
   1f0ae:	6859      	ldr	r1, [r3, #4]
   1f0b0:	46be      	mov	lr, r7
   1f0b2:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   1f0b6:	3308      	adds	r3, #8
   1f0b8:	4563      	cmp	r3, ip
   1f0ba:	4677      	mov	r7, lr
   1f0bc:	d1f6      	bne.n	1f0ac <net_ipv6_send_rs+0xac>
			net_if_ipv6_select_src_addr(iface,
   1f0be:	3408      	adds	r4, #8
   1f0c0:	af04      	add	r7, sp, #16
   1f0c2:	4613      	mov	r3, r2
   1f0c4:	cb03      	ldmia	r3!, {r0, r1}
   1f0c6:	42bb      	cmp	r3, r7
   1f0c8:	6020      	str	r0, [r4, #0]
   1f0ca:	6061      	str	r1, [r4, #4]
   1f0cc:	461a      	mov	r2, r3
   1f0ce:	f104 0408 	add.w	r4, r4, #8
   1f0d2:	d1f6      	bne.n	1f0c2 <net_ipv6_send_rs+0xc2>
   1f0d4:	68ab      	ldr	r3, [r5, #8]
	unspec_src = net_is_ipv6_addr_unspecified(&NET_IPV6_HDR(pkt)->src);
   1f0d6:	6898      	ldr	r0, [r3, #8]
   1f0d8:	3008      	adds	r0, #8
   1f0da:	f7fe fa79 	bl	1d5d0 <net_is_ipv6_addr_unspecified>
	if (!unspec_src) {
   1f0de:	4607      	mov	r7, r0
   1f0e0:	bb90      	cbnz	r0, 1f148 <net_ipv6_send_rs+0x148>
   1f0e2:	696b      	ldr	r3, [r5, #20]
   1f0e4:	7d1b      	ldrb	r3, [r3, #20]
	if (iface->link_addr.len == 6) {
   1f0e6:	2b06      	cmp	r3, #6
   1f0e8:	d030      	beq.n	1f14c <net_ipv6_send_rs+0x14c>
		return 16;
   1f0ea:	2b08      	cmp	r3, #8
   1f0ec:	bf14      	ite	ne
   1f0ee:	2400      	movne	r4, #0
   1f0f0:	2410      	moveq	r4, #16
	setup_headers(pkt, sizeof(struct net_icmpv6_rs_hdr) + llao_len,
   1f0f2:	1d21      	adds	r1, r4, #4
   1f0f4:	4628      	mov	r0, r5
   1f0f6:	2285      	movs	r2, #133	; 0x85
	net_buf_add(frag, sizeof(struct net_icmpv6_rs_hdr));
   1f0f8:	3608      	adds	r6, #8
	setup_headers(pkt, sizeof(struct net_icmpv6_rs_hdr) + llao_len,
   1f0fa:	f7fe fad3 	bl	1d6a4 <setup_headers>
	net_buf_add(frag, sizeof(struct net_icmpv6_rs_hdr));
   1f0fe:	2104      	movs	r1, #4
   1f100:	4630      	mov	r0, r6
   1f102:	f7fa f94f 	bl	193a4 <net_buf_simple_add>
	if (!unspec_src) {
   1f106:	b97f      	cbnz	r7, 1f128 <net_ipv6_send_rs+0x128>
		net_buf_add(frag, llao_len);
   1f108:	4621      	mov	r1, r4
   1f10a:	4630      	mov	r0, r6
   1f10c:	f7fa f94a 	bl	193a4 <net_buf_simple_add>
			 (u8_t *)net_pkt_icmp_data(pkt) +
   1f110:	4628      	mov	r0, r5
		set_llao(&net_pkt_iface(pkt)->link_addr,
   1f112:	696e      	ldr	r6, [r5, #20]
			 (u8_t *)net_pkt_icmp_data(pkt) +
   1f114:	f7fc fe02 	bl	1bd1c <net_pkt_icmp_data>
		set_llao(&net_pkt_iface(pkt)->link_addr,
   1f118:	3610      	adds	r6, #16
   1f11a:	f100 0108 	add.w	r1, r0, #8
   1f11e:	2301      	movs	r3, #1
   1f120:	4622      	mov	r2, r4
   1f122:	4630      	mov	r0, r6
   1f124:	f7fe faee 	bl	1d704 <set_llao>
	net_icmpv6_set_chksum(pkt, pkt->frags);
   1f128:	68a9      	ldr	r1, [r5, #8]
   1f12a:	4628      	mov	r0, r5
   1f12c:	f7fd fd2c 	bl	1cb88 <net_icmpv6_set_chksum>
	if (net_send_data(pkt) < 0) {
   1f130:	4628      	mov	r0, r5
   1f132:	f7fb fa3f 	bl	1a5b4 <net_send_data>
   1f136:	2800      	cmp	r0, #0
   1f138:	da0a      	bge.n	1f150 <net_ipv6_send_rs+0x150>
	net_pkt_unref(pkt);
   1f13a:	4628      	mov	r0, r5
   1f13c:	f7fc fba3 	bl	1b886 <net_pkt_unref>
	return -EINVAL;
   1f140:	f06f 0015 	mvn.w	r0, #21
}
   1f144:	b005      	add	sp, #20
   1f146:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return 0;
   1f148:	2400      	movs	r4, #0
   1f14a:	e7d2      	b.n	1f0f2 <net_ipv6_send_rs+0xf2>
		return 8;
   1f14c:	2408      	movs	r4, #8
   1f14e:	e7d0      	b.n	1f0f2 <net_ipv6_send_rs+0xf2>
	return 0;
   1f150:	2000      	movs	r0, #0
   1f152:	e7f7      	b.n	1f144 <net_ipv6_send_rs+0x144>

0001f154 <net_ipv6_start_rs>:
	return net_ipv6_send_rs(iface);
   1f154:	f7ff bf54 	b.w	1f000 <net_ipv6_send_rs>

0001f158 <net_ipv6_mld_join>:
{
   1f158:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1f15a:	ab02      	add	r3, sp, #8
   1f15c:	460d      	mov	r5, r1
   1f15e:	f843 0d04 	str.w	r0, [r3, #-4]!
	maddr = net_if_ipv6_maddr_lookup(addr, &iface);
   1f162:	4628      	mov	r0, r5
   1f164:	4619      	mov	r1, r3
   1f166:	f7fb fdff 	bl	1ad68 <net_if_ipv6_maddr_lookup>
	if (maddr && net_if_ipv6_maddr_is_joined(maddr)) {
   1f16a:	4604      	mov	r4, r0
   1f16c:	b128      	cbz	r0, 1f17a <net_ipv6_mld_join+0x22>
	return addr->is_joined;
   1f16e:	7803      	ldrb	r3, [r0, #0]
   1f170:	079b      	lsls	r3, r3, #30
   1f172:	d508      	bpl.n	1f186 <net_ipv6_mld_join+0x2e>
		return -EALREADY;
   1f174:	f06f 0644 	mvn.w	r6, #68	; 0x44
   1f178:	e01b      	b.n	1f1b2 <net_ipv6_mld_join+0x5a>
		maddr = net_if_ipv6_maddr_add(iface, addr);
   1f17a:	4629      	mov	r1, r5
   1f17c:	9801      	ldr	r0, [sp, #4]
   1f17e:	f7fb fd23 	bl	1abc8 <net_if_ipv6_maddr_add>
		if (!maddr) {
   1f182:	4604      	mov	r4, r0
   1f184:	b1c0      	cbz	r0, 1f1b8 <net_ipv6_mld_join+0x60>
	ret = send_mldv2(iface, addr, NET_IPV6_MLDv2_MODE_IS_EXCLUDE);
   1f186:	2202      	movs	r2, #2
   1f188:	4629      	mov	r1, r5
   1f18a:	9801      	ldr	r0, [sp, #4]
   1f18c:	f7fe fd66 	bl	1dc5c <send_mldv2>
	if (ret < 0) {
   1f190:	1e06      	subs	r6, r0, #0
   1f192:	db0e      	blt.n	1f1b2 <net_ipv6_mld_join+0x5a>
	addr->is_joined = true;
   1f194:	7823      	ldrb	r3, [r4, #0]
	net_if_mcast_monitor(iface, addr, true);
   1f196:	9801      	ldr	r0, [sp, #4]
   1f198:	f043 0302 	orr.w	r3, r3, #2
   1f19c:	7023      	strb	r3, [r4, #0]
   1f19e:	2201      	movs	r2, #1
   1f1a0:	4629      	mov	r1, r5
   1f1a2:	f7fb fe1f 	bl	1ade4 <net_if_mcast_monitor>
   1f1a6:	2300      	movs	r3, #0
   1f1a8:	461a      	mov	r2, r3
   1f1aa:	9901      	ldr	r1, [sp, #4]
   1f1ac:	4804      	ldr	r0, [pc, #16]	; (1f1c0 <net_ipv6_mld_join+0x68>)
   1f1ae:	f000 fa1d 	bl	1f5ec <net_mgmt_event_notify_with_info>
}
   1f1b2:	4630      	mov	r0, r6
   1f1b4:	b002      	add	sp, #8
   1f1b6:	bd70      	pop	{r4, r5, r6, pc}
			return -ENOMEM;
   1f1b8:	f06f 060b 	mvn.w	r6, #11
   1f1bc:	e7f9      	b.n	1f1b2 <net_ipv6_mld_join+0x5a>
   1f1be:	bf00      	nop
   1f1c0:	f0600007 	.word	0xf0600007

0001f1c4 <net_ipv6_process_pkt>:
	return NET_DROP;
}
#endif /* CONFIG_NET_ROUTE */

enum net_verdict net_ipv6_process_pkt(struct net_pkt *pkt)
{
   1f1c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f1c8:	4604      	mov	r4, r0
   1f1ca:	6880      	ldr	r0, [r0, #8]
   1f1cc:	6885      	ldr	r5, [r0, #8]
   1f1ce:	b087      	sub	sp, #28
	return net_buf_frags_len(pkt->frags);
   1f1d0:	f7fe f9f6 	bl	1d5c0 <net_buf_frags_len>
	struct net_ipv6_hdr *hdr = NET_IPV6_HDR(pkt);
	int real_len = net_pkt_get_len(pkt);
	int pkt_len = (hdr->len[0] << 8) + hdr->len[1] + sizeof(*hdr);
   1f1d4:	792a      	ldrb	r2, [r5, #4]
   1f1d6:	796b      	ldrb	r3, [r5, #5]
   1f1d8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   1f1dc:	3328      	adds	r3, #40	; 0x28
	u8_t next, next_hdr, length;
	u8_t first_option;
	u16_t offset, total_len = 0;
	u8_t ext_bitmap;

	if (real_len != pkt_len) {
   1f1de:	4298      	cmp	r0, r3
   1f1e0:	4683      	mov	fp, r0
   1f1e2:	d001      	beq.n	1f1e8 <net_ipv6_process_pkt+0x24>
		return NET_DROP;
#endif
	}

drop:
	return NET_DROP;
   1f1e4:	2002      	movs	r0, #2
   1f1e6:	e11a      	b.n	1f41e <net_ipv6_process_pkt+0x25a>
	if (net_is_ipv6_addr_mcast(&hdr->src)) {
   1f1e8:	7a2b      	ldrb	r3, [r5, #8]
   1f1ea:	2bff      	cmp	r3, #255	; 0xff
   1f1ec:	d0fa      	beq.n	1f1e4 <net_ipv6_process_pkt+0x20>
	if (!net_is_my_ipv6_addr(&hdr->dst) &&
   1f1ee:	f105 0618 	add.w	r6, r5, #24
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
   1f1f2:	2100      	movs	r1, #0
   1f1f4:	4630      	mov	r0, r6
   1f1f6:	f7fb fb6b 	bl	1a8d0 <net_if_ipv6_addr_lookup>
   1f1fa:	4601      	mov	r1, r0
   1f1fc:	bb08      	cbnz	r0, 1f242 <net_ipv6_process_pkt+0x7e>
	return net_if_ipv6_maddr_lookup(maddr, NULL) != NULL;
   1f1fe:	4630      	mov	r0, r6
   1f200:	f7fb fdb2 	bl	1ad68 <net_if_ipv6_maddr_lookup>
   1f204:	b9e8      	cbnz	r0, 1f242 <net_ipv6_process_pkt+0x7e>
	    !net_is_my_ipv6_maddr(&hdr->dst) &&
   1f206:	7e2b      	ldrb	r3, [r5, #24]
   1f208:	2bff      	cmp	r3, #255	; 0xff
   1f20a:	d01a      	beq.n	1f242 <net_ipv6_process_pkt+0x7e>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1f20c:	69ab      	ldr	r3, [r5, #24]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1f20e:	2b00      	cmp	r3, #0
   1f210:	f040 810d 	bne.w	1f42e <net_ipv6_process_pkt+0x26a>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1f214:	69eb      	ldr	r3, [r5, #28]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1f216:	2b00      	cmp	r3, #0
   1f218:	f040 8109 	bne.w	1f42e <net_ipv6_process_pkt+0x26a>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1f21c:	6a2b      	ldr	r3, [r5, #32]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1f21e:	2b00      	cmp	r3, #0
   1f220:	f040 8105 	bne.w	1f42e <net_ipv6_process_pkt+0x26a>
		ntohl(UNALIGNED_GET(&addr->s6_addr32[3])) == 1;
   1f224:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 *
   1f226:	061a      	lsls	r2, r3, #24

   1f228:	0a19      	lsrs	r1, r3, #8
 * @brief Check if the IPv6 address is a multicast address.
   1f22a:	ea42 6213 	orr.w	r2, r2, r3, lsr #24

   1f22e:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 * @brief Check if the IPv6 address is a multicast address.
   1f232:	021b      	lsls	r3, r3, #8
   1f234:	430a      	orrs	r2, r1
   1f236:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   1f23a:	4313      	orrs	r3, r2
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1f23c:	2b01      	cmp	r3, #1
   1f23e:	f040 80f6 	bne.w	1f42e <net_ipv6_process_pkt+0x26a>
	net_pkt_set_next_hdr(pkt, &hdr->nexthdr);
   1f242:	1dab      	adds	r3, r5, #6
	pkt->next_hdr = hdr;
   1f244:	61e3      	str	r3, [r4, #28]
	pkt->ipv6_ext_len = len;
   1f246:	2700      	movs	r7, #0
	pkt->ip_hdr_len = len;
   1f248:	2328      	movs	r3, #40	; 0x28
	pkt->ipv6_ext_len = len;
   1f24a:	f884 703f 	strb.w	r7, [r4, #63]	; 0x3f
	pkt->ip_hdr_len = len;
   1f24e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	next = *(net_pkt_next_hdr(pkt));
   1f252:	f895 9006 	ldrb.w	r9, [r5, #6]
	return (proto == IPPROTO_ICMPV6 || proto == IPPROTO_UDP ||
   1f256:	f1b9 0f3a 	cmp.w	r9, #58	; 0x3a
   1f25a:	f000 80d4 	beq.w	1f406 <net_ipv6_process_pkt+0x242>
   1f25e:	f1b9 0f11 	cmp.w	r9, #17
   1f262:	f000 80df 	beq.w	1f424 <net_ipv6_process_pkt+0x260>
	if (is_upper_layer_protocol_header(next)) {
   1f266:	f1b9 0f06 	cmp.w	r9, #6
   1f26a:	d01b      	beq.n	1f2a4 <net_ipv6_process_pkt+0xe0>
	offset = sizeof(struct net_ipv6_hdr);
   1f26c:	f10d 0a18 	add.w	sl, sp, #24
	frag = pkt->frags;
   1f270:	68a0      	ldr	r0, [r4, #8]
	offset = sizeof(struct net_ipv6_hdr);
   1f272:	f82a 3d08 	strh.w	r3, [sl, #-8]!
	while (frag) {
   1f276:	464e      	mov	r6, r9
	u16_t offset, total_len = 0;
   1f278:	46b8      	mov	r8, r7
	while (frag) {
   1f27a:	b130      	cbz	r0, 1f28a <net_ipv6_process_pkt+0xc6>
	return (proto == IPPROTO_ICMPV6 || proto == IPPROTO_UDP ||
   1f27c:	2e3a      	cmp	r6, #58	; 0x3a
   1f27e:	d114      	bne.n	1f2aa <net_ipv6_process_pkt+0xe6>
			net_pkt_set_ipv6_ext_len(pkt, offset -
   1f280:	f89d 3010 	ldrb.w	r3, [sp, #16]
   1f284:	3b28      	subs	r3, #40	; 0x28
	pkt->ipv6_ext_len = len;
   1f286:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
	if (total_len > 0) {
   1f28a:	f1b8 0f00 	cmp.w	r8, #0
   1f28e:	d001      	beq.n	1f294 <net_ipv6_process_pkt+0xd0>
		net_pkt_set_ipv6_ext_len(pkt, total_len);
   1f290:	f884 803f 	strb.w	r8, [r4, #63]	; 0x3f
	switch (next) {
   1f294:	2e11      	cmp	r6, #17
   1f296:	f000 80c5 	beq.w	1f424 <net_ipv6_process_pkt+0x260>
   1f29a:	2e3a      	cmp	r6, #58	; 0x3a
   1f29c:	f000 80b3 	beq.w	1f406 <net_ipv6_process_pkt+0x242>
   1f2a0:	2e06      	cmp	r6, #6
   1f2a2:	d19f      	bne.n	1f1e4 <net_ipv6_process_pkt+0x20>
		return net_conn_input(IPPROTO_TCP, pkt);
   1f2a4:	4621      	mov	r1, r4
   1f2a6:	2006      	movs	r0, #6
   1f2a8:	e0be      	b.n	1f428 <net_ipv6_process_pkt+0x264>
	return (proto == IPPROTO_ICMPV6 || proto == IPPROTO_UDP ||
   1f2aa:	2e11      	cmp	r6, #17
   1f2ac:	d0e8      	beq.n	1f280 <net_ipv6_process_pkt+0xbc>
		if (is_upper_layer_protocol_header(next)) {
   1f2ae:	2e06      	cmp	r6, #6
   1f2b0:	d0e6      	beq.n	1f280 <net_ipv6_process_pkt+0xbc>
	return net_frag_read(frag, offset, pos, 1, value);
   1f2b2:	ab03      	add	r3, sp, #12
   1f2b4:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1f2b8:	9300      	str	r3, [sp, #0]
   1f2ba:	4652      	mov	r2, sl
   1f2bc:	2301      	movs	r3, #1
   1f2be:	f7fc fc3d 	bl	1bb3c <net_frag_read>
   1f2c2:	f10d 030d 	add.w	r3, sp, #13
   1f2c6:	9300      	str	r3, [sp, #0]
   1f2c8:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1f2cc:	2301      	movs	r3, #1
   1f2ce:	4652      	mov	r2, sl
   1f2d0:	f7fc fc34 	bl	1bb3c <net_frag_read>
		if (!frag && offset == 0xffff) {
   1f2d4:	b928      	cbnz	r0, 1f2e2 <net_ipv6_process_pkt+0x11e>
   1f2d6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
   1f2da:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1f2de:	429a      	cmp	r2, r3
   1f2e0:	d080      	beq.n	1f1e4 <net_ipv6_process_pkt+0x20>
		length = length * 8 + 8;
   1f2e2:	f89d 500d 	ldrb.w	r5, [sp, #13]
   1f2e6:	3501      	adds	r5, #1
   1f2e8:	00ed      	lsls	r5, r5, #3
   1f2ea:	b2ed      	uxtb	r5, r5
   1f2ec:	f88d 500d 	strb.w	r5, [sp, #13]
		switch (next) {
   1f2f0:	b13e      	cbz	r6, 1f302 <net_ipv6_process_pkt+0x13e>
   1f2f2:	2e3b      	cmp	r6, #59	; 0x3b
   1f2f4:	f43f af76 	beq.w	1f1e4 <net_ipv6_process_pkt+0x20>
bad_hdr:
	/* Send error message about parameter problem (RFC 2460)
	 */
	net_icmpv6_send_error(pkt, NET_ICMPV6_PARAM_PROBLEM,
			      NET_ICMPV6_PARAM_PROB_NEXTHEADER,
			      offset - 1);
   1f2f8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
	net_icmpv6_send_error(pkt, NET_ICMPV6_PARAM_PROBLEM,
   1f2fc:	2201      	movs	r2, #1
   1f2fe:	3b01      	subs	r3, #1
   1f300:	e07a      	b.n	1f3f8 <net_ipv6_process_pkt+0x234>
			if (first_option != NET_IPV6_NEXTHDR_HBHO) {
   1f302:	f1b9 0f00 	cmp.w	r9, #0
   1f306:	d1f7      	bne.n	1f2f8 <net_ipv6_process_pkt+0x134>
			if (ext_bitmap & NET_IPV6_EXT_HDR_BITMAP_HBHO) {
   1f308:	2f00      	cmp	r7, #0
   1f30a:	d1f5      	bne.n	1f2f8 <net_ipv6_process_pkt+0x134>
	if (len > total_len) {
   1f30c:	45ab      	cmp	fp, r5
   1f30e:	f6ff af69 	blt.w	1f1e4 <net_ipv6_process_pkt+0x20>
   1f312:	f10d 030e 	add.w	r3, sp, #14
   1f316:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1f31a:	9300      	str	r3, [sp, #0]
   1f31c:	aa05      	add	r2, sp, #20
   1f31e:	2301      	movs	r3, #1
   1f320:	f10d 070f 	add.w	r7, sp, #15
   1f324:	f7fc fc0a 	bl	1bb3c <net_frag_read>
   1f328:	f8bd 1014 	ldrh.w	r1, [sp, #20]
   1f32c:	9700      	str	r7, [sp, #0]
   1f32e:	2301      	movs	r3, #1
   1f330:	aa05      	add	r2, sp, #20
		total_len += length;
   1f332:	b2ad      	uxth	r5, r5
   1f334:	f7fc fc02 	bl	1bb3c <net_frag_read>
	if (!frag && loc == 0xffff) {
   1f338:	2800      	cmp	r0, #0
   1f33a:	d162      	bne.n	1f402 <net_ipv6_process_pkt+0x23e>
   1f33c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   1f340:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1f344:	429a      	cmp	r2, r3
   1f346:	f43f af4d 	beq.w	1f1e4 <net_ipv6_process_pkt+0x20>
   1f34a:	2602      	movs	r6, #2
	if (length != len) {
   1f34c:	42b5      	cmp	r5, r6
   1f34e:	f47f af49 	bne.w	1f1e4 <net_ipv6_process_pkt+0x20>
	*pos += length;
   1f352:	f8bd 3010 	ldrh.w	r3, [sp, #16]
		next = next_hdr;
   1f356:	f89d 600c 	ldrb.w	r6, [sp, #12]
		total_len += length;
   1f35a:	44a8      	add	r8, r5
	*pos += length;
   1f35c:	441d      	add	r5, r3
		total_len += length;
   1f35e:	fa1f f888 	uxth.w	r8, r8
	*pos += length;
   1f362:	f8ad 5010 	strh.w	r5, [sp, #16]
			ext_bitmap |= NET_IPV6_EXT_HDR_BITMAP_HBHO;
   1f366:	2701      	movs	r7, #1
   1f368:	e787      	b.n	1f27a <net_ipv6_process_pkt+0xb6>
			loc--;
   1f36a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
			length++;
   1f36e:	3601      	adds	r6, #1
   1f370:	b2b6      	uxth	r6, r6
			loc--;
   1f372:	3b01      	subs	r3, #1
		if (length >= len) {
   1f374:	42b5      	cmp	r5, r6
			loc += opt_len;
   1f376:	f8ad 3014 	strh.w	r3, [sp, #20]
		if (length >= len) {
   1f37a:	d9e7      	bls.n	1f34c <net_ipv6_process_pkt+0x188>
   1f37c:	f10d 030e 	add.w	r3, sp, #14
   1f380:	f8bd 1014 	ldrh.w	r1, [sp, #20]
   1f384:	9300      	str	r3, [sp, #0]
   1f386:	aa05      	add	r2, sp, #20
   1f388:	2301      	movs	r3, #1
   1f38a:	f7fc fbd7 	bl	1bb3c <net_frag_read>
   1f38e:	f8bd 1014 	ldrh.w	r1, [sp, #20]
   1f392:	9700      	str	r7, [sp, #0]
   1f394:	2301      	movs	r3, #1
   1f396:	aa05      	add	r2, sp, #20
   1f398:	f7fc fbd0 	bl	1bb3c <net_frag_read>
		if (!frag && loc == 0xffff) {
   1f39c:	2800      	cmp	r0, #0
   1f39e:	f43f af21 	beq.w	1f1e4 <net_ipv6_process_pkt+0x20>
	while (frag && (length < len)) {
   1f3a2:	42b5      	cmp	r5, r6
   1f3a4:	d9d2      	bls.n	1f34c <net_ipv6_process_pkt+0x188>
		switch (opt_type) {
   1f3a6:	f89d 300e 	ldrb.w	r3, [sp, #14]
   1f3aa:	2b00      	cmp	r3, #0
   1f3ac:	d0dd      	beq.n	1f36a <net_ipv6_process_pkt+0x1a6>
   1f3ae:	2b01      	cmp	r3, #1
   1f3b0:	d010      	beq.n	1f3d4 <net_ipv6_process_pkt+0x210>
	switch (opt_type & 0xc0) {
   1f3b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1f3b6:	2b80      	cmp	r3, #128	; 0x80
   1f3b8:	d01c      	beq.n	1f3f4 <net_ipv6_process_pkt+0x230>
   1f3ba:	2bc0      	cmp	r3, #192	; 0xc0
   1f3bc:	d014      	beq.n	1f3e8 <net_ipv6_process_pkt+0x224>
   1f3be:	2b40      	cmp	r3, #64	; 0x40
   1f3c0:	f43f af10 	beq.w	1f1e4 <net_ipv6_process_pkt+0x20>
			length += opt_len + 2;
   1f3c4:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1f3c8:	1c9a      	adds	r2, r3, #2
   1f3ca:	4416      	add	r6, r2
   1f3cc:	b2b6      	uxth	r6, r6
			loc += opt_len;
   1f3ce:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   1f3d2:	e007      	b.n	1f3e4 <net_ipv6_process_pkt+0x220>
			length += opt_len + 2;
   1f3d4:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1f3d8:	1c9a      	adds	r2, r3, #2
   1f3da:	4416      	add	r6, r2
			loc += opt_len + 2;
   1f3dc:	f8bd 2014 	ldrh.w	r2, [sp, #20]
			length += opt_len + 2;
   1f3e0:	b2b6      	uxth	r6, r6
			loc += opt_len + 2;
   1f3e2:	3202      	adds	r2, #2
			loc += opt_len;
   1f3e4:	4413      	add	r3, r2
   1f3e6:	e7c5      	b.n	1f374 <net_ipv6_process_pkt+0x1b0>
	return pkt->frags->data;
   1f3e8:	68a3      	ldr	r3, [r4, #8]
		if (net_is_ipv6_addr_mcast(&NET_IPV6_HDR(pkt)->dst)) {
   1f3ea:	689b      	ldr	r3, [r3, #8]
   1f3ec:	7e1b      	ldrb	r3, [r3, #24]
   1f3ee:	2bff      	cmp	r3, #255	; 0xff
   1f3f0:	f43f aef8 	beq.w	1f1e4 <net_ipv6_process_pkt+0x20>
		net_icmpv6_send_error(pkt, NET_ICMPV6_PARAM_PROBLEM,
   1f3f4:	4633      	mov	r3, r6
   1f3f6:	2202      	movs	r2, #2
	net_icmpv6_send_error(pkt, NET_ICMPV6_PARAM_PROBLEM,
   1f3f8:	2104      	movs	r1, #4
   1f3fa:	4620      	mov	r0, r4
   1f3fc:	f7fd fec2 	bl	1d184 <net_icmpv6_send_error>
   1f400:	e6f0      	b.n	1f1e4 <net_ipv6_process_pkt+0x20>
	if (!frag && loc == 0xffff) {
   1f402:	2602      	movs	r6, #2
   1f404:	e7cd      	b.n	1f3a2 <net_ipv6_process_pkt+0x1de>
	icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   1f406:	a905      	add	r1, sp, #20
   1f408:	4620      	mov	r0, r4
   1f40a:	f7fd fc07 	bl	1cc1c <net_icmpv6_get_hdr>
	if (!icmp_hdr) {
   1f40e:	2800      	cmp	r0, #0
   1f410:	f43f aee8 	beq.w	1f1e4 <net_ipv6_process_pkt+0x20>
	return net_icmpv6_input(pkt, icmp_hdr->type, icmp_hdr->code);
   1f414:	7842      	ldrb	r2, [r0, #1]
   1f416:	7801      	ldrb	r1, [r0, #0]
   1f418:	4620      	mov	r0, r4
   1f41a:	f7fe f80f 	bl	1d43c <net_icmpv6_input>

	NET_DBG("Unknown next header type");
	net_stats_update_ip_errors_protoerr();

	return NET_DROP;
}
   1f41e:	b007      	add	sp, #28
   1f420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return net_conn_input(IPPROTO_UDP, pkt);
   1f424:	4621      	mov	r1, r4
   1f426:	2011      	movs	r0, #17
		return net_conn_input(IPPROTO_TCP, pkt);
   1f428:	f000 fbd2 	bl	1fbd0 <net_conn_input>
   1f42c:	e7f7      	b.n	1f41e <net_ipv6_process_pkt+0x25a>
		found = net_route_get_info(net_pkt_iface(pkt),
   1f42e:	ab05      	add	r3, sp, #20
   1f430:	aa04      	add	r2, sp, #16
   1f432:	4631      	mov	r1, r6
   1f434:	6960      	ldr	r0, [r4, #20]
   1f436:	f000 fa38 	bl	1f8aa <net_route_get_info>
	if (found) {
   1f43a:	2800      	cmp	r0, #0
   1f43c:	f43f aed2 	beq.w	1f1e4 <net_ipv6_process_pkt+0x20>
		if (route) {
   1f440:	9b04      	ldr	r3, [sp, #16]
   1f442:	b133      	cbz	r3, 1f452 <net_ipv6_process_pkt+0x28e>
			net_pkt_set_iface(pkt, route->iface);
   1f444:	68db      	ldr	r3, [r3, #12]
	pkt->iface = iface;
   1f446:	6163      	str	r3, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1f448:	7d5b      	ldrb	r3, [r3, #21]
   1f44a:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1f44e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
		ret = net_route_packet(pkt, nexthop);
   1f452:	9905      	ldr	r1, [sp, #20]
   1f454:	4620      	mov	r0, r4
   1f456:	f000 fa4a 	bl	1f8ee <net_route_packet>
		if (ret < 0) {
   1f45a:	2800      	cmp	r0, #0
   1f45c:	f6ff aec2 	blt.w	1f1e4 <net_ipv6_process_pkt+0x20>
			return NET_OK;
   1f460:	2000      	movs	r0, #0
   1f462:	e7dc      	b.n	1f41e <net_ipv6_process_pkt+0x25a>

0001f464 <net_ipv6_init>:

void net_ipv6_init(void)
{
   1f464:	b508      	push	{r3, lr}
#if defined(CONFIG_NET_IPV6_NBR_CACHE)
	net_icmpv6_register_handler(&ns_input_handler);
   1f466:	4807      	ldr	r0, [pc, #28]	; (1f484 <net_ipv6_init+0x20>)
   1f468:	f7fd fb84 	bl	1cb74 <net_icmpv6_register_handler>
	net_icmpv6_register_handler(&na_input_handler);
   1f46c:	4806      	ldr	r0, [pc, #24]	; (1f488 <net_ipv6_init+0x24>)
   1f46e:	f7fd fb81 	bl	1cb74 <net_icmpv6_register_handler>
#endif
#if defined(CONFIG_NET_IPV6_ND)
	net_icmpv6_register_handler(&ra_input_handler);
   1f472:	4806      	ldr	r0, [pc, #24]	; (1f48c <net_ipv6_init+0x28>)
   1f474:	f7fd fb7e 	bl	1cb74 <net_icmpv6_register_handler>
#endif
#if defined(CONFIG_NET_IPV6_MLD)
	net_icmpv6_register_handler(&mld_query_input_handler);
   1f478:	4805      	ldr	r0, [pc, #20]	; (1f490 <net_ipv6_init+0x2c>)
#endif
}
   1f47a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	net_icmpv6_register_handler(&mld_query_input_handler);
   1f47e:	f7fd bb79 	b.w	1cb74 <net_icmpv6_register_handler>
   1f482:	bf00      	nop
   1f484:	2000a568 	.word	0x2000a568
   1f488:	2000a150 	.word	0x2000a150
   1f48c:	2000a574 	.word	0x2000a574
   1f490:	2000a144 	.word	0x2000a144

0001f494 <mgmt_thread>:
			  K_THREAD_STACK_SIZEOF(mgmt_stack));
#endif
}

static void mgmt_thread(void)
{
   1f494:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!events[out_event].event) {
   1f498:	f8df 9110 	ldr.w	r9, [pc, #272]	; 1f5ac <mgmt_thread+0x118>
   1f49c:	464f      	mov	r7, r9
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   1f49e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f4a2:	483e      	ldr	r0, [pc, #248]	; (1f59c <mgmt_thread+0x108>)
   1f4a4:	f002 fbe2 	bl	21c6c <_impl_k_sem_take>
   1f4a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f4ac:	483c      	ldr	r0, [pc, #240]	; (1f5a0 <mgmt_thread+0x10c>)
   1f4ae:	f002 fbdd 	bl	21c6c <_impl_k_sem_take>
   1f4b2:	4a3c      	ldr	r2, [pc, #240]	; (1f5a4 <mgmt_thread+0x110>)
   1f4b4:	8815      	ldrh	r5, [r2, #0]
   1f4b6:	f859 4035 	ldr.w	r4, [r9, r5, lsl #3]
   1f4ba:	b964      	cbnz	r4, 1f4d6 <mgmt_thread+0x42>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1f4bc:	4838      	ldr	r0, [pc, #224]	; (1f5a0 <mgmt_thread+0x10c>)
   1f4be:	f002 fb75 	bl	21bac <_impl_k_sem_give>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   1f4c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1f4c6:	4621      	mov	r1, r4
   1f4c8:	4834      	ldr	r0, [pc, #208]	; (1f59c <mgmt_thread+0x108>)
   1f4ca:	f002 fb65 	bl	21b98 <_impl_k_sem_init>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1f4ce:	4834      	ldr	r0, [pc, #208]	; (1f5a0 <mgmt_thread+0x10c>)
   1f4d0:	f002 fb6c 	bl	21bac <_impl_k_sem_give>
				k_sem_count_get(&network_event));

			k_sem_init(&network_event, 0, UINT_MAX);
			k_sem_give(&net_mgmt_lock);

			continue;
   1f4d4:	e7e3      	b.n	1f49e <mgmt_thread+0xa>
	out_event++;
   1f4d6:	1c6b      	adds	r3, r5, #1
   1f4d8:	4e33      	ldr	r6, [pc, #204]	; (1f5a8 <mgmt_thread+0x114>)
   1f4da:	b29b      	uxth	r3, r3
	if (out_event == CONFIG_NET_MGMT_EVENT_QUEUE_SIZE) {
   1f4dc:	2b02      	cmp	r3, #2
   1f4de:	6834      	ldr	r4, [r6, #0]
		out_event = 0;
   1f4e0:	bf08      	it	eq
   1f4e2:	2300      	moveq	r3, #0
   1f4e4:	8013      	strh	r3, [r2, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
   1f4e6:	b9c4      	cbnz	r4, 1f51a <mgmt_thread+0x86>
	mgmt_event->event = 0;
   1f4e8:	2300      	movs	r3, #0
   1f4ea:	f847 3035 	str.w	r3, [r7, r5, lsl #3]
	mgmt_event->iface = NULL;
   1f4ee:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
   1f4f2:	482b      	ldr	r0, [pc, #172]	; (1f5a0 <mgmt_thread+0x10c>)
   1f4f4:	606b      	str	r3, [r5, #4]
   1f4f6:	f002 fb59 	bl	21bac <_impl_k_sem_give>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   1f4fa:	f002 fadb 	bl	21ab4 <_impl_k_yield>
   1f4fe:	e7ce      	b.n	1f49e <mgmt_thread+0xa>
		prev_node->next = node->next;
   1f500:	601a      	str	r2, [r3, #0]
		if (list->tail == node) {
   1f502:	6872      	ldr	r2, [r6, #4]
   1f504:	4294      	cmp	r4, r2
			list->tail = prev_node;
   1f506:	bf08      	it	eq
   1f508:	6073      	streq	r3, [r6, #4]
   1f50a:	e038      	b.n	1f57e <mgmt_thread+0xea>
			cb->handler(cb, mgmt_event->event, mgmt_event->iface);
   1f50c:	6863      	ldr	r3, [r4, #4]
   1f50e:	f8db 2004 	ldr.w	r2, [fp, #4]
   1f512:	4620      	mov	r0, r4
   1f514:	4798      	blx	r3
			prev = &cb->node;
   1f516:	4623      	mov	r3, r4
   1f518:	e038      	b.n	1f58c <mgmt_thread+0xf8>
	return node->next;
   1f51a:	2300      	movs	r3, #0
   1f51c:	f8d4 8000 	ldr.w	r8, [r4]
			cb->handler(cb, mgmt_event->event, mgmt_event->iface);
   1f520:	eb07 0bc5 	add.w	fp, r7, r5, lsl #3
	node->next = NULL;
   1f524:	469a      	mov	sl, r3
		if (!(NET_MGMT_GET_LAYER(mgmt_event->event) ==
   1f526:	f857 1035 	ldr.w	r1, [r7, r5, lsl #3]
		      NET_MGMT_GET_LAYER(cb->event_mask)) ||
   1f52a:	68a2      	ldr	r2, [r4, #8]
		if (!(NET_MGMT_GET_LAYER(mgmt_event->event) ==
   1f52c:	ea81 0002 	eor.w	r0, r1, r2
   1f530:	f010 5f40 	tst.w	r0, #805306368	; 0x30000000
   1f534:	d12a      	bne.n	1f58c <mgmt_thread+0xf8>
		    !(NET_MGMT_GET_LAYER_CODE(mgmt_event->event) ==
   1f536:	f3c0 400a 	ubfx	r0, r0, #16, #11
		      NET_MGMT_GET_LAYER(cb->event_mask)) ||
   1f53a:	bb38      	cbnz	r0, 1f58c <mgmt_thread+0xf8>
		    (NET_MGMT_GET_COMMAND(mgmt_event->event) &&
   1f53c:	b288      	uxth	r0, r1
		      NET_MGMT_GET_LAYER_CODE(cb->event_mask)) ||
   1f53e:	b130      	cbz	r0, 1f54e <mgmt_thread+0xba>
		     NET_MGMT_GET_COMMAND(cb->event_mask) &&
   1f540:	fa1f fe82 	uxth.w	lr, r2
		    (NET_MGMT_GET_COMMAND(mgmt_event->event) &&
   1f544:	f1be 0f00 	cmp.w	lr, #0
   1f548:	d001      	beq.n	1f54e <mgmt_thread+0xba>
		     NET_MGMT_GET_COMMAND(cb->event_mask) &&
   1f54a:	4202      	tst	r2, r0
   1f54c:	d01e      	beq.n	1f58c <mgmt_thread+0xf8>
		if (NET_MGMT_EVENT_SYNCHRONOUS(cb->event_mask)) {
   1f54e:	0112      	lsls	r2, r2, #4
   1f550:	d5dc      	bpl.n	1f50c <mgmt_thread+0x78>
			struct mgmt_event_wait *sync_data =
   1f552:	6860      	ldr	r0, [r4, #4]
			if (sync_data->iface &&
   1f554:	f8d0 e018 	ldr.w	lr, [r0, #24]
   1f558:	f1be 0f00 	cmp.w	lr, #0
   1f55c:	d003      	beq.n	1f566 <mgmt_thread+0xd2>
   1f55e:	f8db 2004 	ldr.w	r2, [fp, #4]
   1f562:	4596      	cmp	lr, r2
   1f564:	d112      	bne.n	1f58c <mgmt_thread+0xf8>
			cb->raised_event = mgmt_event->event;
   1f566:	60a1      	str	r1, [r4, #8]
			sync_data->iface = mgmt_event->iface;
   1f568:	f8db 2004 	ldr.w	r2, [fp, #4]
   1f56c:	6182      	str	r2, [r0, #24]
   1f56e:	6822      	ldr	r2, [r4, #0]
	if (!prev_node) {
   1f570:	2b00      	cmp	r3, #0
   1f572:	d1c5      	bne.n	1f500 <mgmt_thread+0x6c>
		if (list->tail == node) {
   1f574:	6871      	ldr	r1, [r6, #4]
		list->head = node->next;
   1f576:	6032      	str	r2, [r6, #0]
		if (list->tail == node) {
   1f578:	428c      	cmp	r4, r1
   1f57a:	d100      	bne.n	1f57e <mgmt_thread+0xea>
			list->tail = list->head;
   1f57c:	6072      	str	r2, [r6, #4]
	node->next = NULL;
   1f57e:	f8c4 a000 	str.w	sl, [r4]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1f582:	6860      	ldr	r0, [r4, #4]
   1f584:	9301      	str	r3, [sp, #4]
   1f586:	f002 fb11 	bl	21bac <_impl_k_sem_give>
   1f58a:	9b01      	ldr	r3, [sp, #4]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
   1f58c:	f1b8 0f00 	cmp.w	r8, #0
   1f590:	d0aa      	beq.n	1f4e8 <mgmt_thread+0x54>
   1f592:	4644      	mov	r4, r8
   1f594:	f8d8 8000 	ldr.w	r8, [r8]
   1f598:	e7c5      	b.n	1f526 <mgmt_thread+0x92>
   1f59a:	bf00      	nop
   1f59c:	2000a9cc 	.word	0x2000a9cc
   1f5a0:	2000a9b4 	.word	0x2000a9b4
   1f5a4:	200028b4 	.word	0x200028b4
   1f5a8:	2000282c 	.word	0x2000282c
   1f5ac:	20002834 	.word	0x20002834

0001f5b0 <net_mgmt_add_event_callback>:

	return ret;
}

void net_mgmt_add_event_callback(struct net_mgmt_event_callback *cb)
{
   1f5b0:	b510      	push	{r4, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   1f5b2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f5b6:	4604      	mov	r4, r0
   1f5b8:	4809      	ldr	r0, [pc, #36]	; (1f5e0 <net_mgmt_add_event_callback+0x30>)
   1f5ba:	f002 fb57 	bl	21c6c <_impl_k_sem_take>
	node->next = list->head;
   1f5be:	4b09      	ldr	r3, [pc, #36]	; (1f5e4 <net_mgmt_add_event_callback+0x34>)
   1f5c0:	681a      	ldr	r2, [r3, #0]
   1f5c2:	6022      	str	r2, [r4, #0]
	if (!list->tail) {
   1f5c4:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   1f5c6:	601c      	str	r4, [r3, #0]
	if (!list->tail) {
   1f5c8:	b902      	cbnz	r2, 1f5cc <net_mgmt_add_event_callback+0x1c>
		list->tail = list->head;
   1f5ca:	605c      	str	r4, [r3, #4]
	global_event_mask |= event_mask;
   1f5cc:	4a06      	ldr	r2, [pc, #24]	; (1f5e8 <net_mgmt_add_event_callback+0x38>)
   1f5ce:	68a3      	ldr	r3, [r4, #8]
   1f5d0:	6811      	ldr	r1, [r2, #0]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1f5d2:	4803      	ldr	r0, [pc, #12]	; (1f5e0 <net_mgmt_add_event_callback+0x30>)
   1f5d4:	430b      	orrs	r3, r1
	sys_slist_prepend(&event_callbacks, &cb->node);

	mgmt_add_event_mask(cb->event_mask);

	k_sem_give(&net_mgmt_lock);
}
   1f5d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	global_event_mask |= event_mask;
   1f5da:	6013      	str	r3, [r2, #0]
   1f5dc:	f002 bae6 	b.w	21bac <_impl_k_sem_give>
   1f5e0:	2000a9b4 	.word	0x2000a9b4
   1f5e4:	2000282c 	.word	0x2000282c
   1f5e8:	20002844 	.word	0x20002844

0001f5ec <net_mgmt_event_notify_with_info>:
	k_sem_give(&net_mgmt_lock);
}

void net_mgmt_event_notify_with_info(u32_t mgmt_event, struct net_if *iface,
				     void *info, size_t length)
{
   1f5ec:	b538      	push	{r3, r4, r5, lr}
	return ((mgmt_event & global_event_mask) == mgmt_event);
   1f5ee:	4b18      	ldr	r3, [pc, #96]	; (1f650 <net_mgmt_event_notify_with_info+0x64>)
   1f5f0:	681b      	ldr	r3, [r3, #0]
	if (mgmt_is_event_handled(mgmt_event)) {
   1f5f2:	ea30 0303 	bics.w	r3, r0, r3
{
   1f5f6:	4604      	mov	r4, r0
   1f5f8:	460d      	mov	r5, r1
	if (mgmt_is_event_handled(mgmt_event)) {
   1f5fa:	d128      	bne.n	1f64e <net_mgmt_event_notify_with_info+0x62>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   1f5fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f600:	4814      	ldr	r0, [pc, #80]	; (1f654 <net_mgmt_event_notify_with_info+0x68>)
   1f602:	f002 fb33 	bl	21c6c <_impl_k_sem_take>
	events[in_event].event = mgmt_event;
   1f606:	4a14      	ldr	r2, [pc, #80]	; (1f658 <net_mgmt_event_notify_with_info+0x6c>)
   1f608:	4914      	ldr	r1, [pc, #80]	; (1f65c <net_mgmt_event_notify_with_info+0x70>)
   1f60a:	8813      	ldrh	r3, [r2, #0]
	events[in_event].iface = iface;
   1f60c:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
	events[in_event].event = mgmt_event;
   1f610:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
	in_event++;
   1f614:	3301      	adds	r3, #1
   1f616:	b29b      	uxth	r3, r3
	if (in_event == CONFIG_NET_MGMT_EVENT_QUEUE_SIZE) {
   1f618:	2b02      	cmp	r3, #2
		in_event = 0;
   1f61a:	bf08      	it	eq
   1f61c:	2300      	moveq	r3, #0
   1f61e:	8013      	strh	r3, [r2, #0]
	events[in_event].iface = iface;
   1f620:	6045      	str	r5, [r0, #4]
	if (in_event == out_event) {
   1f622:	8810      	ldrh	r0, [r2, #0]
   1f624:	4a0e      	ldr	r2, [pc, #56]	; (1f660 <net_mgmt_event_notify_with_info+0x74>)
   1f626:	8813      	ldrh	r3, [r2, #0]
   1f628:	4283      	cmp	r3, r0
   1f62a:	d108      	bne.n	1f63e <net_mgmt_event_notify_with_info+0x52>
		u16_t o_idx = out_event + 1;
   1f62c:	3301      	adds	r3, #1
   1f62e:	b29b      	uxth	r3, r3
			o_idx = 0;
   1f630:	2b02      	cmp	r3, #2
   1f632:	bf08      	it	eq
   1f634:	2300      	moveq	r3, #0
		if (events[o_idx].event) {
   1f636:	f851 1033 	ldr.w	r1, [r1, r3, lsl #3]
   1f63a:	b101      	cbz	r1, 1f63e <net_mgmt_event_notify_with_info+0x52>
			out_event = o_idx;
   1f63c:	8013      	strh	r3, [r2, #0]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1f63e:	4805      	ldr	r0, [pc, #20]	; (1f654 <net_mgmt_event_notify_with_info+0x68>)
   1f640:	f002 fab4 	bl	21bac <_impl_k_sem_give>
   1f644:	4807      	ldr	r0, [pc, #28]	; (1f664 <net_mgmt_event_notify_with_info+0x78>)
			NET_MGMT_GET_COMMAND(mgmt_event));

		mgmt_push_event(mgmt_event, iface, info, length);
		k_sem_give(&network_event);
	}
}
   1f646:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1f64a:	f002 baaf 	b.w	21bac <_impl_k_sem_give>
   1f64e:	bd38      	pop	{r3, r4, r5, pc}
   1f650:	20002844 	.word	0x20002844
   1f654:	2000a9b4 	.word	0x2000a9b4
   1f658:	20002848 	.word	0x20002848
   1f65c:	20002834 	.word	0x20002834
   1f660:	200028b4 	.word	0x200028b4
   1f664:	2000a9cc 	.word	0x2000a9cc

0001f668 <net_mgmt_event_init>:
	list->head = NULL;
   1f668:	4b10      	ldr	r3, [pc, #64]	; (1f6ac <net_mgmt_event_init+0x44>)
	global_event_mask = 0;

	in_event = 0;
	out_event = 0;

	memset(events, 0,
   1f66a:	4811      	ldr	r0, [pc, #68]	; (1f6b0 <net_mgmt_event_init+0x48>)
{
   1f66c:	b510      	push	{r4, lr}
   1f66e:	2400      	movs	r4, #0
   1f670:	601c      	str	r4, [r3, #0]
	list->tail = NULL;
   1f672:	605c      	str	r4, [r3, #4]
	global_event_mask = 0;
   1f674:	4b0f      	ldr	r3, [pc, #60]	; (1f6b4 <net_mgmt_event_init+0x4c>)
   1f676:	601c      	str	r4, [r3, #0]
	in_event = 0;
   1f678:	4b0f      	ldr	r3, [pc, #60]	; (1f6b8 <net_mgmt_event_init+0x50>)
   1f67a:	801c      	strh	r4, [r3, #0]
	out_event = 0;
   1f67c:	4b0f      	ldr	r3, [pc, #60]	; (1f6bc <net_mgmt_event_init+0x54>)
{
   1f67e:	b086      	sub	sp, #24
	memset(events, 0,
   1f680:	4621      	mov	r1, r4
   1f682:	2210      	movs	r2, #16
	out_event = 0;
   1f684:	801c      	strh	r4, [r3, #0]
	memset(events, 0,
   1f686:	f7e1 f8b0 	bl	7ea <memset>

   1f68a:	f06f 0308 	mvn.w	r3, #8
   1f68e:	9303      	str	r3, [sp, #12]
   1f690:	9405      	str	r4, [sp, #20]
   1f692:	9404      	str	r4, [sp, #16]
   1f694:	9402      	str	r4, [sp, #8]
   1f696:	9401      	str	r4, [sp, #4]
   1f698:	9400      	str	r4, [sp, #0]
   1f69a:	4b09      	ldr	r3, [pc, #36]	; (1f6c0 <net_mgmt_event_init+0x58>)
   1f69c:	4909      	ldr	r1, [pc, #36]	; (1f6c4 <net_mgmt_event_init+0x5c>)
   1f69e:	480a      	ldr	r0, [pc, #40]	; (1f6c8 <net_mgmt_event_init+0x60>)
   1f6a0:	f44f 7200 	mov.w	r2, #512	; 0x200
   1f6a4:	f002 fcbe 	bl	22024 <_impl_k_thread_create>
			K_PRIO_COOP(CONFIG_NET_MGMT_EVENT_THREAD_PRIO), 0, 0);

	NET_DBG("Net MGMT initialized: queue of %u entries, stack size of %u",
		CONFIG_NET_MGMT_EVENT_QUEUE_SIZE,
		CONFIG_NET_MGMT_EVENT_STACK_SIZE);
}
   1f6a8:	b006      	add	sp, #24
   1f6aa:	bd10      	pop	{r4, pc}
   1f6ac:	2000282c 	.word	0x2000282c
   1f6b0:	20002834 	.word	0x20002834
   1f6b4:	20002844 	.word	0x20002844
   1f6b8:	20002848 	.word	0x20002848
   1f6bc:	200028b4 	.word	0x200028b4
   1f6c0:	0001f495 	.word	0x0001f495
   1f6c4:	20008928 	.word	0x20008928
   1f6c8:	2000284c 	.word	0x2000284c

0001f6cc <sys_slist_find_and_remove.constprop.6>:
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
   1f6cc:	b510      	push	{r4, lr}
   1f6ce:	4a0e      	ldr	r2, [pc, #56]	; (1f708 <sys_slist_find_and_remove.constprop.6+0x3c>)
   1f6d0:	6813      	ldr	r3, [r2, #0]
	sys_snode_t *prev = NULL;
   1f6d2:	2100      	movs	r1, #0
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   1f6d4:	b90b      	cbnz	r3, 1f6da <sys_slist_find_and_remove.constprop.6+0xe>
		}

		prev = test;
	}

	return false;
   1f6d6:	4618      	mov	r0, r3
}
   1f6d8:	bd10      	pop	{r4, pc}
		if (test == node) {
   1f6da:	4283      	cmp	r3, r0
   1f6dc:	681c      	ldr	r4, [r3, #0]
   1f6de:	d10f      	bne.n	1f700 <sys_slist_find_and_remove.constprop.6+0x34>
	if (!prev_node) {
   1f6e0:	b941      	cbnz	r1, 1f6f4 <sys_slist_find_and_remove.constprop.6+0x28>
		if (list->tail == node) {
   1f6e2:	6851      	ldr	r1, [r2, #4]
		list->head = node->next;
   1f6e4:	6014      	str	r4, [r2, #0]
		if (list->tail == node) {
   1f6e6:	428b      	cmp	r3, r1
   1f6e8:	d100      	bne.n	1f6ec <sys_slist_find_and_remove.constprop.6+0x20>
			list->tail = list->head;
   1f6ea:	6054      	str	r4, [r2, #4]
	node->next = NULL;
   1f6ec:	2200      	movs	r2, #0
   1f6ee:	601a      	str	r2, [r3, #0]
			return true;
   1f6f0:	2001      	movs	r0, #1
   1f6f2:	bd10      	pop	{r4, pc}
		if (list->tail == node) {
   1f6f4:	6850      	ldr	r0, [r2, #4]
		prev_node->next = node->next;
   1f6f6:	600c      	str	r4, [r1, #0]
		if (list->tail == node) {
   1f6f8:	4283      	cmp	r3, r0
			list->tail = prev_node;
   1f6fa:	bf08      	it	eq
   1f6fc:	6051      	streq	r1, [r2, #4]
   1f6fe:	e7f5      	b.n	1f6ec <sys_slist_find_and_remove.constprop.6+0x20>
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   1f700:	4619      	mov	r1, r3
   1f702:	4623      	mov	r3, r4
   1f704:	e7e6      	b.n	1f6d4 <sys_slist_find_and_remove.constprop.6+0x8>
   1f706:	bf00      	nop
   1f708:	200028b8 	.word	0x200028b8

0001f70c <net_route_entry_remove>:
   1f70c:	4770      	bx	lr
	...

0001f710 <net_route_get_nbr>:
	NET_ASSERT(route);

	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
		struct net_nbr *nbr = get_nbr(i);

		if (!nbr->ref) {
   1f710:	4909      	ldr	r1, [pc, #36]	; (1f738 <net_route_get_nbr+0x28>)
{
   1f712:	b530      	push	{r4, r5, lr}
	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
   1f714:	2200      	movs	r2, #0
   1f716:	2438      	movs	r4, #56	; 0x38
   1f718:	fb04 f302 	mul.w	r3, r4, r2
		if (!nbr->ref) {
   1f71c:	5c5d      	ldrb	r5, [r3, r1]
   1f71e:	b11d      	cbz	r5, 1f728 <net_route_get_nbr+0x18>
   1f720:	440b      	add	r3, r1
			continue;
		}

		if (nbr->data == (u8_t *)route) {
   1f722:	68dd      	ldr	r5, [r3, #12]
   1f724:	4285      	cmp	r5, r0
   1f726:	d004      	beq.n	1f732 <net_route_get_nbr+0x22>
	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
   1f728:	3201      	adds	r2, #1
   1f72a:	2a08      	cmp	r2, #8
   1f72c:	d1f4      	bne.n	1f718 <net_route_get_nbr+0x8>

			return nbr;
		}
	}

	return NULL;
   1f72e:	2000      	movs	r0, #0
   1f730:	bd30      	pop	{r4, r5, pc}
   1f732:	4618      	mov	r0, r3
}
   1f734:	bd30      	pop	{r4, r5, pc}
   1f736:	bf00      	nop
   1f738:	2000a580 	.word	0x2000a580

0001f73c <net_route_lookup>:
	sys_slist_prepend(&routes, &route->node);
}

struct net_route_entry *net_route_lookup(struct net_if *iface,
					 struct in6_addr *dst)
{
   1f73c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		if (route->prefix_len >= longest_match &&
		    net_is_ipv6_prefix((u8_t *)dst,
				       (u8_t *)&route->addr,
				       route->prefix_len)) {
			found = route;
			longest_match = route->prefix_len;
   1f740:	2500      	movs	r5, #0
		if (!nbr->ref) {
   1f742:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 1f7ec <net_route_lookup+0xb0>
{
   1f746:	9000      	str	r0, [sp, #0]
   1f748:	460b      	mov	r3, r1
	u8_t longest_match = 0;
   1f74a:	46a8      	mov	r8, r5
	struct net_route_entry *route, *found = NULL;
   1f74c:	462e      	mov	r6, r5
	for (i = 0; i < CONFIG_NET_MAX_ROUTES && longest_match < 128; i++) {
   1f74e:	f018 0f80 	tst.w	r8, #128	; 0x80
   1f752:	d13a      	bne.n	1f7ca <net_route_lookup+0x8e>
		if (!nbr->ref) {
   1f754:	f815 2009 	ldrb.w	r2, [r5, r9]
   1f758:	b39a      	cbz	r2, 1f7c2 <net_route_lookup+0x86>
		if (iface && nbr->iface != iface) {
   1f75a:	9a00      	ldr	r2, [sp, #0]
   1f75c:	b12a      	cbz	r2, 1f76a <net_route_lookup+0x2e>
   1f75e:	eb09 0205 	add.w	r2, r9, r5
   1f762:	9900      	ldr	r1, [sp, #0]
   1f764:	6892      	ldr	r2, [r2, #8]
   1f766:	4291      	cmp	r1, r2
   1f768:	d12b      	bne.n	1f7c2 <net_route_lookup+0x86>
   1f76a:	eb09 0205 	add.w	r2, r9, r5
   1f76e:	68d7      	ldr	r7, [r2, #12]
		if (route->prefix_len >= longest_match &&
   1f770:	f897 4020 	ldrb.w	r4, [r7, #32]
   1f774:	4544      	cmp	r4, r8
   1f776:	d324      	bcc.n	1f7c2 <net_route_lookup+0x86>
	if (length > 128) {
   1f778:	2c80      	cmp	r4, #128	; 0x80
   1f77a:	d822      	bhi.n	1f7c2 <net_route_lookup+0x86>
				       (u8_t *)&route->addr,
   1f77c:	f107 0b10 	add.w	fp, r7, #16
	if (memcmp(addr1, addr2, bytes)) {
   1f780:	ea4f 0ad4 	mov.w	sl, r4, lsr #3
   1f784:	4618      	mov	r0, r3
   1f786:	4652      	mov	r2, sl
   1f788:	4659      	mov	r1, fp
   1f78a:	9301      	str	r3, [sp, #4]
   1f78c:	f7e0 ffd4 	bl	738 <memcmp>
   1f790:	9b01      	ldr	r3, [sp, #4]
   1f792:	b9b0      	cbnz	r0, 1f7c2 <net_route_lookup+0x86>
	u8_t bits = 128 - length;
   1f794:	f1c4 0480 	rsb	r4, r4, #128	; 0x80
	if (!remain) {
   1f798:	f014 0407 	ands.w	r4, r4, #7
   1f79c:	d00e      	beq.n	1f7bc <net_route_lookup+0x80>
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
   1f79e:	f81b 200a 	ldrb.w	r2, [fp, sl]
   1f7a2:	f813 100a 	ldrb.w	r1, [r3, sl]
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
   1f7a6:	20ff      	movs	r0, #255	; 0xff
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
   1f7a8:	4051      	eors	r1, r2
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
   1f7aa:	f1c4 0208 	rsb	r2, r4, #8
   1f7ae:	fa00 f202 	lsl.w	r2, r0, r2
   1f7b2:	4042      	eors	r2, r0
   1f7b4:	fa02 f404 	lsl.w	r4, r2, r4
		if (route->prefix_len >= longest_match &&
   1f7b8:	4221      	tst	r1, r4
   1f7ba:	d102      	bne.n	1f7c2 <net_route_lookup+0x86>
			longest_match = route->prefix_len;
   1f7bc:	f897 8020 	ldrb.w	r8, [r7, #32]
   1f7c0:	463e      	mov	r6, r7
   1f7c2:	3538      	adds	r5, #56	; 0x38
	for (i = 0; i < CONFIG_NET_MAX_ROUTES && longest_match < 128; i++) {
   1f7c4:	f5b5 7fe0 	cmp.w	r5, #448	; 0x1c0
   1f7c8:	d1c1      	bne.n	1f74e <net_route_lookup+0x12>
		}
	}

	if (found) {
   1f7ca:	b14e      	cbz	r6, 1f7e0 <net_route_lookup+0xa4>
	sys_slist_find_and_remove(&routes, &route->node);
   1f7cc:	4630      	mov	r0, r6
   1f7ce:	f7ff ff7d 	bl	1f6cc <sys_slist_find_and_remove.constprop.6>
	node->next = list->head;
   1f7d2:	4b05      	ldr	r3, [pc, #20]	; (1f7e8 <net_route_lookup+0xac>)
   1f7d4:	681a      	ldr	r2, [r3, #0]
   1f7d6:	6032      	str	r2, [r6, #0]
	if (!list->tail) {
   1f7d8:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   1f7da:	601e      	str	r6, [r3, #0]
	if (!list->tail) {
   1f7dc:	b902      	cbnz	r2, 1f7e0 <net_route_lookup+0xa4>
		list->tail = list->head;
   1f7de:	605e      	str	r6, [r3, #4]

		update_route_access(found);
	}

	return found;
}
   1f7e0:	4630      	mov	r0, r6
   1f7e2:	b003      	add	sp, #12
   1f7e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f7e8:	200028b8 	.word	0x200028b8
   1f7ec:	2000a580 	.word	0x2000a580

0001f7f0 <net_route_del>:

	return route;
}

int net_route_del(struct net_route_entry *route)
{
   1f7f0:	b538      	push	{r3, r4, r5, lr}
	struct net_route_nexthop *nexthop_route;
#if defined(CONFIG_NET_MGMT_EVENT_INFO)
       struct net_event_ipv6_route info;
#endif

	if (!route) {
   1f7f2:	4604      	mov	r4, r0
   1f7f4:	b1d0      	cbz	r0, 1f82c <net_route_del+0x3c>
   1f7f6:	2300      	movs	r3, #0
   1f7f8:	68c1      	ldr	r1, [r0, #12]
   1f7fa:	480f      	ldr	r0, [pc, #60]	; (1f838 <net_route_del+0x48>)
   1f7fc:	461a      	mov	r2, r3
   1f7fe:	f7ff fef5 	bl	1f5ec <net_mgmt_event_notify_with_info>
					sizeof(struct net_event_ipv6_route));
#else
	net_mgmt_event_notify(NET_EVENT_IPV6_ROUTE_DEL, route->iface);
#endif

	sys_slist_find_and_remove(&routes, &route->node);
   1f802:	4620      	mov	r0, r4
   1f804:	f7ff ff62 	bl	1f6cc <sys_slist_find_and_remove.constprop.6>

	nbr = net_route_get_nbr(route);
   1f808:	4620      	mov	r0, r4
   1f80a:	f7ff ff81 	bl	1f710 <net_route_get_nbr>
	if (!nbr) {
   1f80e:	4605      	mov	r5, r0
   1f810:	b178      	cbz	r0, 1f832 <net_route_del+0x42>
   1f812:	6864      	ldr	r4, [r4, #4]
		return -ENOENT;
	}

	net_route_info("Deleted", route, &route->addr);

	SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route, node) {
   1f814:	b924      	cbnz	r4, 1f820 <net_route_del+0x30>
	net_nbr_unref(nbr);
   1f816:	4628      	mov	r0, r5
   1f818:	f7fd fe2e 	bl	1d478 <net_nbr_unref>
		nbr_nexthop_put(nexthop_route->nbr);
	}

	nbr_free(nbr);

	return 0;
   1f81c:	2000      	movs	r0, #0
   1f81e:	bd38      	pop	{r3, r4, r5, pc}
		if (!nexthop_route->nbr) {
   1f820:	6860      	ldr	r0, [r4, #4]
   1f822:	b108      	cbz	r0, 1f828 <net_route_del+0x38>
	net_nbr_unref(nbr);
   1f824:	f7fd fe28 	bl	1d478 <net_nbr_unref>
	return node->next;
   1f828:	6824      	ldr	r4, [r4, #0]
   1f82a:	e7f3      	b.n	1f814 <net_route_del+0x24>
		return -EINVAL;
   1f82c:	f06f 0015 	mvn.w	r0, #21
   1f830:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOENT;
   1f832:	f06f 0001 	mvn.w	r0, #1
}
   1f836:	bd38      	pop	{r3, r4, r5, pc}
   1f838:	f060000c 	.word	0xf060000c

0001f83c <net_route_del_by_nexthop>:

int net_route_del_by_nexthop(struct net_if *iface, struct in6_addr *nexthop)
{
   1f83c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i, ret;

	NET_ASSERT(iface);
	NET_ASSERT(nexthop);

	nbr_nexthop = net_ipv6_nbr_lookup(iface, nexthop);
   1f83e:	f7fe fb0a 	bl	1de56 <net_ipv6_nbr_lookup>
   1f842:	2400      	movs	r4, #0
   1f844:	4607      	mov	r7, r0
	int count = 0, status = 0;
   1f846:	4626      	mov	r6, r4
   1f848:	4625      	mov	r5, r4
   1f84a:	4b0e      	ldr	r3, [pc, #56]	; (1f884 <net_route_del_by_nexthop+0x48>)
   1f84c:	4423      	add	r3, r4
   1f84e:	68d8      	ldr	r0, [r3, #12]

	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
		struct net_nbr *nbr = get_nbr(i);
		struct net_route_entry *route = net_route_data(nbr);

		if (!route) {
   1f850:	b140      	cbz	r0, 1f864 <net_route_del_by_nexthop+0x28>
   1f852:	6843      	ldr	r3, [r0, #4]
			continue;
		}

		SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route,
   1f854:	b133      	cbz	r3, 1f864 <net_route_del_by_nexthop+0x28>
					     node) {
			if (nexthop_route->nbr == nbr_nexthop) {
   1f856:	685a      	ldr	r2, [r3, #4]
   1f858:	4297      	cmp	r7, r2
   1f85a:	d10c      	bne.n	1f876 <net_route_del_by_nexthop+0x3a>
				/* This route contains this nexthop */
				ret = net_route_del(route);
   1f85c:	f7ff ffc8 	bl	1f7f0 <net_route_del>
				if (!ret) {
   1f860:	b968      	cbnz	r0, 1f87e <net_route_del_by_nexthop+0x42>
					count++;
   1f862:	3501      	adds	r5, #1
   1f864:	3438      	adds	r4, #56	; 0x38
	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
   1f866:	f5b4 7fe0 	cmp.w	r4, #448	; 0x1c0
   1f86a:	d1ee      	bne.n	1f84a <net_route_del_by_nexthop+0xe>
				break;
			}
		}
	}

	if (count) {
   1f86c:	b90d      	cbnz	r5, 1f872 <net_route_del_by_nexthop+0x36>
   1f86e:	ea06 75e6 	and.w	r5, r6, r6, asr #31
	} else if (status < 0) {
		return status;
	}

	return 0;
}
   1f872:	4628      	mov	r0, r5
   1f874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f876:	681b      	ldr	r3, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route,
   1f878:	2b00      	cmp	r3, #0
   1f87a:	d1eb      	bne.n	1f854 <net_route_del_by_nexthop+0x18>
   1f87c:	e7f2      	b.n	1f864 <net_route_del_by_nexthop+0x28>
   1f87e:	4606      	mov	r6, r0
   1f880:	e7f0      	b.n	1f864 <net_route_del_by_nexthop+0x28>
   1f882:	bf00      	nop
   1f884:	2000a580 	.word	0x2000a580

0001f888 <net_route_get_nexthop>:
struct in6_addr *net_route_get_nexthop(struct net_route_entry *route)
{
	struct net_route_nexthop *nexthop_route;
	struct net_ipv6_nbr_data *ipv6_nbr_data;

	if (!route) {
   1f888:	b170      	cbz	r0, 1f8a8 <net_route_get_nexthop+0x20>
   1f88a:	6843      	ldr	r3, [r0, #4]
   1f88c:	461a      	mov	r2, r3
		return NULL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route, node) {
   1f88e:	b153      	cbz	r3, 1f8a6 <net_route_get_nexthop+0x1e>
		struct in6_addr *addr;

		NET_ASSERT(nexthop_route->nbr->idx != NET_NBR_LLADDR_UNKNOWN);

		if (nexthop_route->nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
   1f890:	685b      	ldr	r3, [r3, #4]
   1f892:	7859      	ldrb	r1, [r3, #1]
   1f894:	29ff      	cmp	r1, #255	; 0xff
   1f896:	d003      	beq.n	1f8a0 <net_route_get_nexthop+0x18>
   1f898:	68d8      	ldr	r0, [r3, #12]
			continue;
		}

		ipv6_nbr_data = net_ipv6_nbr_data(nexthop_route->nbr);
		if (ipv6_nbr_data) {
   1f89a:	b108      	cbz	r0, 1f8a0 <net_route_get_nexthop+0x18>
			addr = &ipv6_nbr_data->addr;
   1f89c:	3004      	adds	r0, #4
			NET_ASSERT(addr);

			return addr;
   1f89e:	4770      	bx	lr
   1f8a0:	6813      	ldr	r3, [r2, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route, node) {
   1f8a2:	2b00      	cmp	r3, #0
   1f8a4:	d1f2      	bne.n	1f88c <net_route_get_nexthop+0x4>
		return NULL;
   1f8a6:	2000      	movs	r0, #0
			NET_ERR("could not get neighbor data from next hop");
		}
	}

	return NULL;
}
   1f8a8:	4770      	bx	lr

0001f8aa <net_route_get_info>:

bool net_route_get_info(struct net_if *iface,
			struct in6_addr *dst,
			struct net_route_entry **route,
			struct in6_addr **nexthop)
{
   1f8aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f8ac:	4607      	mov	r7, r0
   1f8ae:	460d      	mov	r5, r1
   1f8b0:	4616      	mov	r6, r2
   1f8b2:	461c      	mov	r4, r3
	struct net_if_router *router;

	/* Search in neighbor table first, if not search in routing table. */
	if (net_ipv6_nbr_lookup(iface, dst)) {
   1f8b4:	f7fe facf 	bl	1de56 <net_ipv6_nbr_lookup>
   1f8b8:	b120      	cbz	r0, 1f8c4 <net_route_get_info+0x1a>
		/* Found nexthop, no need to look into routing table. */
		*route = NULL;
   1f8ba:	2300      	movs	r3, #0
   1f8bc:	6033      	str	r3, [r6, #0]
		*nexthop = dst;
   1f8be:	6025      	str	r5, [r4, #0]
			return false;
		}

		*nexthop = &router->address.in6_addr;

		return true;
   1f8c0:	2001      	movs	r0, #1
	}

	return false;
}
   1f8c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	*route = net_route_lookup(iface, dst);
   1f8c4:	4629      	mov	r1, r5
   1f8c6:	4638      	mov	r0, r7
   1f8c8:	f7ff ff38 	bl	1f73c <net_route_lookup>
   1f8cc:	6030      	str	r0, [r6, #0]
	if (*route) {
   1f8ce:	b130      	cbz	r0, 1f8de <net_route_get_info+0x34>
		*nexthop = net_route_get_nexthop(*route);
   1f8d0:	f7ff ffda 	bl	1f888 <net_route_get_nexthop>
   1f8d4:	6020      	str	r0, [r4, #0]
		if (!*nexthop) {
   1f8d6:	3000      	adds	r0, #0
   1f8d8:	bf18      	it	ne
   1f8da:	2001      	movne	r0, #1
   1f8dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		router = net_if_ipv6_router_find_default(NULL, dst);
   1f8de:	4629      	mov	r1, r5
   1f8e0:	f7fb fbba 	bl	1b058 <net_if_ipv6_router_find_default>
		if (!router) {
   1f8e4:	2800      	cmp	r0, #0
   1f8e6:	d0ec      	beq.n	1f8c2 <net_route_get_info+0x18>
		*nexthop = &router->address.in6_addr;
   1f8e8:	302c      	adds	r0, #44	; 0x2c
   1f8ea:	6020      	str	r0, [r4, #0]
   1f8ec:	e7e8      	b.n	1f8c0 <net_route_get_info+0x16>

0001f8ee <net_route_packet>:

int net_route_packet(struct net_pkt *pkt, struct in6_addr *nexthop)
{
   1f8ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f8f0:	4604      	mov	r4, r0
	struct net_linkaddr_storage *lladdr;
	struct net_nbr *nbr;

	nbr = net_ipv6_nbr_lookup(NULL, nexthop);
   1f8f2:	2000      	movs	r0, #0
   1f8f4:	f7fe faaf 	bl	1de56 <net_ipv6_nbr_lookup>
	if (!nbr) {
   1f8f8:	4606      	mov	r6, r0
   1f8fa:	2800      	cmp	r0, #0
   1f8fc:	d033      	beq.n	1f966 <net_route_packet+0x78>
		NET_DBG("Cannot find %s neighbor",
			net_sprint_ipv6_addr(nexthop));
		return -ENOENT;
	}

	lladdr = net_nbr_get_lladdr(nbr->idx);
   1f8fe:	7840      	ldrb	r0, [r0, #1]
   1f900:	f7fd fe56 	bl	1d5b0 <net_nbr_get_lladdr>
	if (!lladdr) {
   1f904:	4605      	mov	r5, r0
   1f906:	2800      	cmp	r0, #0
   1f908:	d030      	beq.n	1f96c <net_route_packet+0x7e>
		NET_DBG("Cannot find %s neighbor link layer address.",
			net_sprint_ipv6_addr(nexthop));
		return -ESRCH;
	}

	if (!net_pkt_ll_src(pkt)->addr) {
   1f90a:	6a20      	ldr	r0, [r4, #32]
   1f90c:	b910      	cbnz	r0, 1f914 <net_route_packet+0x26>
		NET_DBG("Link layer source address not set");
		return -EINVAL;
   1f90e:	f06f 0015 	mvn.w	r0, #21
   1f912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	/* Sanitycheck: If src and dst ll addresses are going to be same,
	 * then something went wrong in route lookup.
	 */
	if (!memcmp(net_pkt_ll_src(pkt)->addr, lladdr->addr, lladdr->len)) {
   1f914:	1caf      	adds	r7, r5, #2
   1f916:	786a      	ldrb	r2, [r5, #1]
   1f918:	4639      	mov	r1, r7
   1f91a:	f7e0 ff0d 	bl	738 <memcmp>
   1f91e:	2800      	cmp	r0, #0
   1f920:	d0f5      	beq.n	1f90e <net_route_packet+0x20>
	pkt->forwarding = forward;
   1f922:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   1f926:	f043 0304 	orr.w	r3, r3, #4
   1f92a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   1f92e:	6963      	ldr	r3, [r4, #20]
	net_pkt_set_forwarding(pkt, true);

	/* Set the destination and source ll address in the packet.
	 * We set the destination address to be the nexthop recipient.
	 */
	net_pkt_ll_src(pkt)->addr = net_pkt_ll_if(pkt)->addr;
   1f930:	691a      	ldr	r2, [r3, #16]
   1f932:	6222      	str	r2, [r4, #32]
	net_pkt_ll_src(pkt)->type = net_pkt_ll_if(pkt)->type;
   1f934:	7d5a      	ldrb	r2, [r3, #21]
   1f936:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
	net_pkt_ll_src(pkt)->len = net_pkt_ll_if(pkt)->len;
   1f93a:	7d1b      	ldrb	r3, [r3, #20]
   1f93c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24

	net_pkt_ll_dst(pkt)->addr = lladdr->addr;
   1f940:	62a7      	str	r7, [r4, #40]	; 0x28
	net_pkt_ll_dst(pkt)->type = lladdr->type;
   1f942:	782b      	ldrb	r3, [r5, #0]
   1f944:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	net_pkt_ll_dst(pkt)->len = lladdr->len;
   1f948:	786b      	ldrb	r3, [r5, #1]
   1f94a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

	net_pkt_set_iface(pkt, nbr->iface);
   1f94e:	68b3      	ldr	r3, [r6, #8]
	pkt->iface = iface;
   1f950:	6163      	str	r3, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1f952:	7d5b      	ldrb	r3, [r3, #21]
   1f954:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1f958:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d

	return net_send_data(pkt);
   1f95c:	4620      	mov	r0, r4
}
   1f95e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return net_send_data(pkt);
   1f962:	f7fa be27 	b.w	1a5b4 <net_send_data>
		return -ENOENT;
   1f966:	f06f 0001 	mvn.w	r0, #1
   1f96a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ESRCH;
   1f96c:	f06f 0002 	mvn.w	r0, #2
}
   1f970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001f972 <net_route_init>:

void net_route_init(void)
{
   1f972:	4770      	bx	lr

0001f974 <net_is_ipv6_addr_unspecified>:
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1f974:	6802      	ldr	r2, [r0, #0]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1f976:	b942      	cbnz	r2, 1f98a <net_is_ipv6_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1f978:	6843      	ldr	r3, [r0, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1f97a:	b933      	cbnz	r3, 1f98a <net_is_ipv6_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1f97c:	6882      	ldr	r2, [r0, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1f97e:	b922      	cbnz	r2, 1f98a <net_is_ipv6_addr_unspecified+0x16>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   1f980:	68c0      	ldr	r0, [r0, #12]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1f982:	fab0 f080 	clz	r0, r0
   1f986:	0940      	lsrs	r0, r0, #5
   1f988:	4770      	bx	lr
   1f98a:	2000      	movs	r0, #0
   1f98c:	4770      	bx	lr

0001f98e <check_addr>:
}

static bool check_addr(struct net_pkt *pkt,
		       struct sockaddr *addr,
		       bool is_remote)
{
   1f98e:	b538      	push	{r3, r4, r5, lr}
	return pkt->family;
   1f990:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
	if (addr->sa_family != net_pkt_family(pkt)) {
   1f994:	880c      	ldrh	r4, [r1, #0]
   1f996:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   1f99a:	429c      	cmp	r4, r3
   1f99c:	d117      	bne.n	1f9ce <check_addr+0x40>
		return false;
	}

#if defined(CONFIG_NET_IPV6)
	if (net_pkt_family(pkt) == AF_INET6 && addr->sa_family == AF_INET6) {
   1f99e:	2b0a      	cmp	r3, #10
   1f9a0:	d117      	bne.n	1f9d2 <check_addr+0x44>
   1f9a2:	2c0a      	cmp	r4, #10
   1f9a4:	d115      	bne.n	1f9d2 <check_addr+0x44>
   1f9a6:	6883      	ldr	r3, [r0, #8]
		struct in6_addr *addr6;

		if (is_remote) {
			addr6 = &NET_IPV6_HDR(pkt)->src;
   1f9a8:	689c      	ldr	r4, [r3, #8]
		if (is_remote) {
   1f9aa:	b172      	cbz	r2, 1f9ca <check_addr+0x3c>
			addr6 = &NET_IPV6_HDR(pkt)->src;
   1f9ac:	3408      	adds	r4, #8
		} else {
			addr6 = &NET_IPV6_HDR(pkt)->dst;
		}

		if (!net_is_ipv6_addr_unspecified(
			    &net_sin6(addr)->sin6_addr)) {
   1f9ae:	1d0d      	adds	r5, r1, #4
		if (!net_is_ipv6_addr_unspecified(
   1f9b0:	4628      	mov	r0, r5
   1f9b2:	f7ff ffdf 	bl	1f974 <net_is_ipv6_addr_unspecified>
   1f9b6:	b968      	cbnz	r0, 1f9d4 <check_addr+0x46>
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1f9b8:	2210      	movs	r2, #16
   1f9ba:	4621      	mov	r1, r4
   1f9bc:	4628      	mov	r0, r5
   1f9be:	f7e0 febb 	bl	738 <memcmp>
			if (!net_ipv6_addr_cmp(&net_sin6(addr)->sin6_addr,
   1f9c2:	fab0 f080 	clz	r0, r0
   1f9c6:	0940      	lsrs	r0, r0, #5
   1f9c8:	bd38      	pop	{r3, r4, r5, pc}
			addr6 = &NET_IPV6_HDR(pkt)->dst;
   1f9ca:	3418      	adds	r4, #24
   1f9cc:	e7ef      	b.n	1f9ae <check_addr+0x20>
		return false;
   1f9ce:	2000      	movs	r0, #0
   1f9d0:	bd38      	pop	{r3, r4, r5, pc}
			}
		}
	}
#endif /* CONFIG_NET_IPV4 */

	return true;
   1f9d2:	2001      	movs	r0, #1
}
   1f9d4:	bd38      	pop	{r3, r4, r5, pc}
	...

0001f9d8 <net_conn_unregister>:
{
   1f9d8:	b508      	push	{r3, lr}
	if (conn < &conns[0] || conn > &conns[CONFIG_NET_MAX_CONN]) {
   1f9da:	4b0b      	ldr	r3, [pc, #44]	; (1fa08 <net_conn_unregister+0x30>)
   1f9dc:	4298      	cmp	r0, r3
   1f9de:	d30c      	bcc.n	1f9fa <net_conn_unregister+0x22>
   1f9e0:	33f0      	adds	r3, #240	; 0xf0
   1f9e2:	4298      	cmp	r0, r3
   1f9e4:	d809      	bhi.n	1f9fa <net_conn_unregister+0x22>
	if (!(conn->flags & NET_CONN_IN_USE)) {
   1f9e6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
   1f9ea:	07db      	lsls	r3, r3, #31
   1f9ec:	d508      	bpl.n	1fa00 <net_conn_unregister+0x28>
	memset(conn, 0, sizeof(*conn));
   1f9ee:	223c      	movs	r2, #60	; 0x3c
   1f9f0:	2100      	movs	r1, #0
   1f9f2:	f7e0 fefa 	bl	7ea <memset>
	return 0;
   1f9f6:	2000      	movs	r0, #0
   1f9f8:	bd08      	pop	{r3, pc}
		return -EINVAL;
   1f9fa:	f06f 0015 	mvn.w	r0, #21
   1f9fe:	bd08      	pop	{r3, pc}
		return -ENOENT;
   1fa00:	f06f 0001 	mvn.w	r0, #1
}
   1fa04:	bd08      	pop	{r3, pc}
   1fa06:	bf00      	nop
   1fa08:	200028c0 	.word	0x200028c0

0001fa0c <net_conn_register>:
{
   1fa0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fa10:	b087      	sub	sp, #28
   1fa12:	4c6d      	ldr	r4, [pc, #436]	; (1fbc8 <net_conn_register+0x1bc>)
   1fa14:	9301      	str	r3, [sp, #4]
   1fa16:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   1fa1a:	9302      	str	r3, [sp, #8]
   1fa1c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1fa20:	ba5b      	rev16	r3, r3
   1fa22:	f8ad 300e 	strh.w	r3, [sp, #14]
   1fa26:	fa1f f983 	uxth.w	r9, r3
   1fa2a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   1fa2e:	fa93 fb93 	rev16.w	fp, r3
   1fa32:	fa1f f38b 	uxth.w	r3, fp
   1fa36:	9304      	str	r3, [sp, #16]
					    &net_sin6(remote_addr)->sin6_addr,
   1fa38:	1d0b      	adds	r3, r1, #4
{
   1fa3a:	4682      	mov	sl, r0
   1fa3c:	460e      	mov	r6, r1
   1fa3e:	4617      	mov	r7, r2
   1fa40:	f104 08f0 	add.w	r8, r4, #240	; 0xf0
					    &net_sin6(local_addr)->sin6_addr,
   1fa44:	1d15      	adds	r5, r2, #4
					    &net_sin6(remote_addr)->sin6_addr,
   1fa46:	9305      	str	r3, [sp, #20]
		if (!(conns[i].flags & NET_CONN_IN_USE)) {
   1fa48:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
   1fa4c:	07d1      	lsls	r1, r2, #31
   1fa4e:	d413      	bmi.n	1fa78 <net_conn_register+0x6c>
   1fa50:	343c      	adds	r4, #60	; 0x3c
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   1fa52:	45a0      	cmp	r8, r4
   1fa54:	d1f8      	bne.n	1fa48 <net_conn_register+0x3c>
   1fa56:	4a5d      	ldr	r2, [pc, #372]	; (1fbcc <net_conn_register+0x1c0>)
   1fa58:	2400      	movs	r4, #0
   1fa5a:	233c      	movs	r3, #60	; 0x3c
   1fa5c:	fb03 f904 	mul.w	r9, r3, r4
   1fa60:	eb02 0809 	add.w	r8, r2, r9
		if (conns[i].flags & NET_CONN_IN_USE) {
   1fa64:	f898 1039 	ldrb.w	r1, [r8, #57]	; 0x39
   1fa68:	07c9      	lsls	r1, r1, #31
   1fa6a:	d542      	bpl.n	1faf2 <net_conn_register+0xe6>
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   1fa6c:	3401      	adds	r4, #1
   1fa6e:	2c04      	cmp	r4, #4
   1fa70:	d1f4      	bne.n	1fa5c <net_conn_register+0x50>
	return -ENOENT;
   1fa72:	f06f 0001 	mvn.w	r0, #1
   1fa76:	e039      	b.n	1faec <net_conn_register+0xe0>
		if (conns[i].proto != proto) {
   1fa78:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
   1fa7c:	4551      	cmp	r1, sl
   1fa7e:	d1e7      	bne.n	1fa50 <net_conn_register+0x44>
   1fa80:	f002 0202 	and.w	r2, r2, #2
		if (remote_addr) {
   1fa84:	b1ae      	cbz	r6, 1fab2 <net_conn_register+0xa6>
			if (!(conns[i].flags & NET_CONN_REMOTE_ADDR_SET)) {
   1fa86:	2a00      	cmp	r2, #0
   1fa88:	d0e2      	beq.n	1fa50 <net_conn_register+0x44>
			if (remote_addr->sa_family == AF_INET6 &&
   1fa8a:	8832      	ldrh	r2, [r6, #0]
   1fa8c:	2a0a      	cmp	r2, #10
   1fa8e:	d1df      	bne.n	1fa50 <net_conn_register+0x44>
   1fa90:	f834 2c04 	ldrh.w	r2, [r4, #-4]
   1fa94:	2a0a      	cmp	r2, #10
   1fa96:	d1db      	bne.n	1fa50 <net_conn_register+0x44>
   1fa98:	2210      	movs	r2, #16
   1fa9a:	4621      	mov	r1, r4
   1fa9c:	9805      	ldr	r0, [sp, #20]
   1fa9e:	f7e0 fe4b 	bl	738 <memcmp>
				if (!net_ipv6_addr_cmp(
   1faa2:	2800      	cmp	r0, #0
   1faa4:	d1d4      	bne.n	1fa50 <net_conn_register+0x44>
   1faa6:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
		if (local_addr) {
   1faaa:	b92f      	cbnz	r7, 1fab8 <net_conn_register+0xac>
			if (conns[i].flags & NET_CONN_LOCAL_ADDR_SET) {
   1faac:	0750      	lsls	r0, r2, #29
   1faae:	d4cf      	bmi.n	1fa50 <net_conn_register+0x44>
   1fab0:	e012      	b.n	1fad8 <net_conn_register+0xcc>
			if (conns[i].flags & NET_CONN_REMOTE_ADDR_SET) {
   1fab2:	2a00      	cmp	r2, #0
   1fab4:	d1cc      	bne.n	1fa50 <net_conn_register+0x44>
   1fab6:	e7f6      	b.n	1faa6 <net_conn_register+0x9a>
			if (!(conns[i].flags & NET_CONN_LOCAL_ADDR_SET)) {
   1fab8:	0753      	lsls	r3, r2, #29
   1faba:	d5c9      	bpl.n	1fa50 <net_conn_register+0x44>
			if (local_addr->sa_family == AF_INET6 &&
   1fabc:	883a      	ldrh	r2, [r7, #0]
   1fabe:	2a0a      	cmp	r2, #10
   1fac0:	d1c6      	bne.n	1fa50 <net_conn_register+0x44>
   1fac2:	8aa2      	ldrh	r2, [r4, #20]
   1fac4:	2a0a      	cmp	r2, #10
   1fac6:	d1c3      	bne.n	1fa50 <net_conn_register+0x44>
   1fac8:	2210      	movs	r2, #16
   1faca:	f104 0118 	add.w	r1, r4, #24
   1face:	4628      	mov	r0, r5
   1fad0:	f7e0 fe32 	bl	738 <memcmp>
				if (!net_ipv6_addr_cmp(
   1fad4:	2800      	cmp	r0, #0
   1fad6:	d1bb      	bne.n	1fa50 <net_conn_register+0x44>
		if (net_sin(&conns[i].remote_addr)->sin_port !=
   1fad8:	f834 2c02 	ldrh.w	r2, [r4, #-2]
   1fadc:	454a      	cmp	r2, r9
   1fade:	d1b7      	bne.n	1fa50 <net_conn_register+0x44>
		if (net_sin(&conns[i].local_addr)->sin_port !=
   1fae0:	8ae2      	ldrh	r2, [r4, #22]
   1fae2:	9b04      	ldr	r3, [sp, #16]
   1fae4:	429a      	cmp	r2, r3
   1fae6:	d1b3      	bne.n	1fa50 <net_conn_register+0x44>
		return -EALREADY;
   1fae8:	f06f 0044 	mvn.w	r0, #68	; 0x44
}
   1faec:	b007      	add	sp, #28
   1faee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (remote_addr) {
   1faf2:	2e00      	cmp	r6, #0
   1faf4:	d061      	beq.n	1fbba <net_conn_register+0x1ae>
			if (remote_addr->sa_family == AF_INET6) {
   1faf6:	8833      	ldrh	r3, [r6, #0]
   1faf8:	2b0a      	cmp	r3, #10
   1fafa:	d002      	beq.n	1fb02 <net_conn_register+0xf6>
				return -EINVAL;
   1fafc:	f06f 0015 	mvn.w	r0, #21
   1fb00:	e7f4      	b.n	1faec <net_conn_register+0xe0>
				memcpy(&conns[i].remote_addr, remote_addr,
   1fb02:	2218      	movs	r2, #24
   1fb04:	4631      	mov	r1, r6
   1fb06:	4640      	mov	r0, r8
   1fb08:	f7e0 fe43 	bl	792 <memcpy>
				if (net_is_ipv6_addr_unspecified(
   1fb0c:	1d30      	adds	r0, r6, #4
   1fb0e:	f7ff ff31 	bl	1f974 <net_is_ipv6_addr_unspecified>
			conns[i].flags |= NET_CONN_REMOTE_ADDR_SET;
   1fb12:	f898 3039 	ldrb.w	r3, [r8, #57]	; 0x39
					rank |= NET_RANK_REMOTE_UNSPEC_ADDR;
   1fb16:	2800      	cmp	r0, #0
			conns[i].flags |= NET_CONN_REMOTE_ADDR_SET;
   1fb18:	f043 0302 	orr.w	r3, r3, #2
					rank |= NET_RANK_REMOTE_UNSPEC_ADDR;
   1fb1c:	bf0c      	ite	eq
   1fb1e:	2520      	moveq	r5, #32
   1fb20:	2508      	movne	r5, #8
			conns[i].flags |= NET_CONN_REMOTE_ADDR_SET;
   1fb22:	f888 3039 	strb.w	r3, [r8, #57]	; 0x39
		if (local_addr) {
   1fb26:	b30f      	cbz	r7, 1fb6c <net_conn_register+0x160>
			if (local_addr->sa_family == AF_INET6) {
   1fb28:	883b      	ldrh	r3, [r7, #0]
   1fb2a:	2b0a      	cmp	r3, #10
   1fb2c:	d1e6      	bne.n	1fafc <net_conn_register+0xf0>
				memcpy(&conns[i].local_addr, local_addr,
   1fb2e:	4b27      	ldr	r3, [pc, #156]	; (1fbcc <net_conn_register+0x1c0>)
   1fb30:	9304      	str	r3, [sp, #16]
   1fb32:	f109 0018 	add.w	r0, r9, #24
   1fb36:	4418      	add	r0, r3
   1fb38:	2218      	movs	r2, #24
   1fb3a:	4639      	mov	r1, r7
   1fb3c:	f7e0 fe29 	bl	792 <memcpy>
				if (net_is_ipv6_addr_unspecified(
   1fb40:	1d38      	adds	r0, r7, #4
   1fb42:	f7ff ff17 	bl	1f974 <net_is_ipv6_addr_unspecified>
   1fb46:	9b04      	ldr	r3, [sp, #16]
   1fb48:	2800      	cmp	r0, #0
   1fb4a:	d038      	beq.n	1fbbe <net_conn_register+0x1b2>
					rank |= NET_RANK_LOCAL_UNSPEC_ADDR;
   1fb4c:	f045 0504 	orr.w	r5, r5, #4
			conns[i].flags |= NET_CONN_LOCAL_ADDR_SET;
   1fb50:	223c      	movs	r2, #60	; 0x3c
   1fb52:	fb02 3304 	mla	r3, r2, r4, r3
   1fb56:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
   1fb5a:	f042 0204 	orr.w	r2, r2, #4
   1fb5e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		if (remote_addr && local_addr) {
   1fb62:	b11e      	cbz	r6, 1fb6c <net_conn_register+0x160>
			if (remote_addr->sa_family != local_addr->sa_family) {
   1fb64:	8832      	ldrh	r2, [r6, #0]
   1fb66:	883b      	ldrh	r3, [r7, #0]
   1fb68:	429a      	cmp	r2, r3
   1fb6a:	d1c7      	bne.n	1fafc <net_conn_register+0xf0>
		if (remote_port) {
   1fb6c:	9b01      	ldr	r3, [sp, #4]
   1fb6e:	b12b      	cbz	r3, 1fb7c <net_conn_register+0x170>
			net_sin(&conns[i].remote_addr)->sin_port =
   1fb70:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1fb74:	f8a8 3002 	strh.w	r3, [r8, #2]
			rank |= NET_RANK_REMOTE_PORT;
   1fb78:	f045 0502 	orr.w	r5, r5, #2
		if (local_port) {
   1fb7c:	9a02      	ldr	r2, [sp, #8]
   1fb7e:	4b13      	ldr	r3, [pc, #76]	; (1fbcc <net_conn_register+0x1c0>)
   1fb80:	b122      	cbz	r2, 1fb8c <net_conn_register+0x180>
			net_sin(&conns[i].local_addr)->sin_port =
   1fb82:	4499      	add	r9, r3
			rank |= NET_RANK_LOCAL_PORT;
   1fb84:	f045 0501 	orr.w	r5, r5, #1
			net_sin(&conns[i].local_addr)->sin_port =
   1fb88:	f8a9 b01a 	strh.w	fp, [r9, #26]
		conns[i].flags |= NET_CONN_IN_USE;
   1fb8c:	223c      	movs	r2, #60	; 0x3c
   1fb8e:	fb02 3404 	mla	r4, r2, r4, r3
   1fb92:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
		conns[i].rank = rank;
   1fb96:	f884 503a 	strb.w	r5, [r4, #58]	; 0x3a
		conns[i].flags |= NET_CONN_IN_USE;
   1fb9a:	f043 0301 	orr.w	r3, r3, #1
   1fb9e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		conns[i].cb = cb;
   1fba2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1fba4:	6323      	str	r3, [r4, #48]	; 0x30
		conns[i].user_data = user_data;
   1fba6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1fba8:	6363      	str	r3, [r4, #52]	; 0x34
		if (handle) {
   1fbaa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
		conns[i].proto = proto;
   1fbac:	f884 a038 	strb.w	sl, [r4, #56]	; 0x38
		if (handle) {
   1fbb0:	b143      	cbz	r3, 1fbc4 <net_conn_register+0x1b8>
			*handle = (struct net_conn_handle *)&conns[i];
   1fbb2:	f8c3 8000 	str.w	r8, [r3]
		return 0;
   1fbb6:	2000      	movs	r0, #0
   1fbb8:	e798      	b.n	1faec <net_conn_register+0xe0>
	u8_t rank = 0;
   1fbba:	4635      	mov	r5, r6
   1fbbc:	e7b3      	b.n	1fb26 <net_conn_register+0x11a>
					rank |= NET_RANK_LOCAL_SPEC_ADDR;
   1fbbe:	f045 0510 	orr.w	r5, r5, #16
   1fbc2:	e7c5      	b.n	1fb50 <net_conn_register+0x144>
		return 0;
   1fbc4:	9813      	ldr	r0, [sp, #76]	; 0x4c
   1fbc6:	e791      	b.n	1faec <net_conn_register+0xe0>
   1fbc8:	200028c4 	.word	0x200028c4
   1fbcc:	200028c0 	.word	0x200028c0

0001fbd0 <net_conn_input>:
#endif /* CONFIG_NET_IPV4 */
	}
}

enum net_verdict net_conn_input(enum net_ip_protocol proto, struct net_pkt *pkt)
{
   1fbd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* This is only used for getting source and destination ports.
	 * Because both TCP and UDP header have these in the same
	 * location, we can check them both using the UDP struct.
	 */
	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   1fbd4:	2811      	cmp	r0, #17
{
   1fbd6:	b089      	sub	sp, #36	; 0x24
   1fbd8:	4680      	mov	r8, r0
   1fbda:	460c      	mov	r4, r1
	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   1fbdc:	d13b      	bne.n	1fc56 <net_conn_input+0x86>
		struct net_udp_hdr hdr, *udp_hdr;

		ARG_UNUSED(hdr);

		udp_hdr = net_udp_get_hdr(pkt, &hdr);
   1fbde:	a903      	add	r1, sp, #12
   1fbe0:	4620      	mov	r0, r4
   1fbe2:	f000 fffd 	bl	20be0 <net_udp_get_hdr>
		if (!udp_hdr) {
   1fbe6:	b908      	cbnz	r0, 1fbec <net_conn_input+0x1c>
	}

drop:
	net_stats_update_per_proto_drop(proto);

	return NET_DROP;
   1fbe8:	2002      	movs	r0, #2
   1fbea:	e068      	b.n	1fcbe <net_conn_input+0xee>
		src_port = udp_hdr->src_port;
   1fbec:	8803      	ldrh	r3, [r0, #0]
   1fbee:	9301      	str	r3, [sp, #4]
		dst_port = udp_hdr->dst_port;
   1fbf0:	f8b0 b002 	ldrh.w	fp, [r0, #2]
		chksum = udp_hdr->chksum;
   1fbf4:	f8b0 9006 	ldrh.w	r9, [r0, #6]
   1fbf8:	4d46      	ldr	r5, [pc, #280]	; (1fd14 <net_conn_input+0x144>)
	s16_t best_rank = -1;
   1fbfa:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
	int i, best_match = -1;
   1fbfe:	4657      	mov	r7, sl
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   1fc00:	2600      	movs	r6, #0
		if (!(conns[i].flags & NET_CONN_IN_USE)) {
   1fc02:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
   1fc06:	07d3      	lsls	r3, r2, #31
   1fc08:	d53a      	bpl.n	1fc80 <net_conn_input+0xb0>
		if (conns[i].proto != proto) {
   1fc0a:	f895 1020 	ldrb.w	r1, [r5, #32]
   1fc0e:	4541      	cmp	r1, r8
   1fc10:	d136      	bne.n	1fc80 <net_conn_input+0xb0>
		if (net_sin(&conns[i].remote_addr)->sin_port) {
   1fc12:	f835 0c16 	ldrh.w	r0, [r5, #-22]
   1fc16:	f1a5 0118 	sub.w	r1, r5, #24
   1fc1a:	b110      	cbz	r0, 1fc22 <net_conn_input+0x52>
			if (net_sin(&conns[i].remote_addr)->sin_port !=
   1fc1c:	9b01      	ldr	r3, [sp, #4]
   1fc1e:	4283      	cmp	r3, r0
   1fc20:	d12e      	bne.n	1fc80 <net_conn_input+0xb0>
		if (net_sin(&conns[i].local_addr)->sin_port) {
   1fc22:	8868      	ldrh	r0, [r5, #2]
   1fc24:	b108      	cbz	r0, 1fc2a <net_conn_input+0x5a>
			if (net_sin(&conns[i].local_addr)->sin_port !=
   1fc26:	4583      	cmp	fp, r0
   1fc28:	d12a      	bne.n	1fc80 <net_conn_input+0xb0>
		if (conns[i].flags & NET_CONN_REMOTE_ADDR_SET) {
   1fc2a:	0790      	lsls	r0, r2, #30
   1fc2c:	d422      	bmi.n	1fc74 <net_conn_input+0xa4>
		if (conns[i].flags & NET_CONN_LOCAL_ADDR_SET) {
   1fc2e:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
   1fc32:	0751      	lsls	r1, r2, #29
   1fc34:	d505      	bpl.n	1fc42 <net_conn_input+0x72>
			if (!check_addr(pkt, &conns[i].local_addr, false)) {
   1fc36:	2200      	movs	r2, #0
   1fc38:	4629      	mov	r1, r5
   1fc3a:	4620      	mov	r0, r4
   1fc3c:	f7ff fea7 	bl	1f98e <check_addr>
   1fc40:	b1f0      	cbz	r0, 1fc80 <net_conn_input+0xb0>
		if (best_match >= 0 &&
   1fc42:	1c7a      	adds	r2, r7, #1
   1fc44:	d13e      	bne.n	1fcc4 <net_conn_input+0xf4>
		if (best_rank < conns[i].rank) {
   1fc46:	f895 2022 	ldrb.w	r2, [r5, #34]	; 0x22
   1fc4a:	4592      	cmp	sl, r2
			best_rank = conns[i].rank;
   1fc4c:	bfbc      	itt	lt
   1fc4e:	fa0f fa82 	sxthlt.w	sl, r2
   1fc52:	4637      	movlt	r7, r6
   1fc54:	e014      	b.n	1fc80 <net_conn_input+0xb0>
	} else if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
   1fc56:	2806      	cmp	r0, #6
   1fc58:	d1c6      	bne.n	1fbe8 <net_conn_input+0x18>
		tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   1fc5a:	a903      	add	r1, sp, #12
   1fc5c:	4620      	mov	r0, r4
   1fc5e:	f000 fb79 	bl	20354 <net_tcp_get_hdr>
		if (!tcp_hdr) {
   1fc62:	2800      	cmp	r0, #0
   1fc64:	d0c0      	beq.n	1fbe8 <net_conn_input+0x18>
		src_port = tcp_hdr->src_port;
   1fc66:	8803      	ldrh	r3, [r0, #0]
   1fc68:	9301      	str	r3, [sp, #4]
		dst_port = tcp_hdr->dst_port;
   1fc6a:	f8b0 b002 	ldrh.w	fp, [r0, #2]
		chksum = tcp_hdr->chksum;
   1fc6e:	f8b0 9010 	ldrh.w	r9, [r0, #16]
   1fc72:	e7c1      	b.n	1fbf8 <net_conn_input+0x28>
			if (!check_addr(pkt, &conns[i].remote_addr, true)) {
   1fc74:	2201      	movs	r2, #1
   1fc76:	4620      	mov	r0, r4
   1fc78:	f7ff fe89 	bl	1f98e <check_addr>
   1fc7c:	2800      	cmp	r0, #0
   1fc7e:	d1d6      	bne.n	1fc2e <net_conn_input+0x5e>
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   1fc80:	3601      	adds	r6, #1
   1fc82:	2e04      	cmp	r6, #4
   1fc84:	f105 053c 	add.w	r5, r5, #60	; 0x3c
   1fc88:	d1bb      	bne.n	1fc02 <net_conn_input+0x32>
	if (best_match >= 0) {
   1fc8a:	1c7b      	adds	r3, r7, #1
   1fc8c:	d02e      	beq.n	1fcec <net_conn_input+0x11c>
		if (IS_ENABLED(CONFIG_NET_UDP_CHECKSUM) &&
   1fc8e:	f1b8 0f11 	cmp.w	r8, #17
   1fc92:	d11f      	bne.n	1fcd4 <net_conn_input+0x104>
			net_udp_set_chksum(pkt, pkt->frags);
   1fc94:	68a1      	ldr	r1, [r4, #8]
   1fc96:	4620      	mov	r0, r4
   1fc98:	f000 ff3b 	bl	20b12 <net_udp_set_chksum>
			chksum_calc = net_udp_get_chksum(pkt, pkt->frags);
   1fc9c:	68a1      	ldr	r1, [r4, #8]
   1fc9e:	4620      	mov	r0, r4
   1fca0:	f000 ff7f 	bl	20ba2 <net_udp_get_chksum>
			if (chksum != chksum_calc) {
   1fca4:	4581      	cmp	r9, r0
   1fca6:	d19f      	bne.n	1fbe8 <net_conn_input+0x18>
		if (conns[best_match].cb(&conns[best_match], pkt,
   1fca8:	4b1b      	ldr	r3, [pc, #108]	; (1fd18 <net_conn_input+0x148>)
   1fcaa:	203c      	movs	r0, #60	; 0x3c
   1fcac:	fb00 3007 	mla	r0, r0, r7, r3
   1fcb0:	4621      	mov	r1, r4
   1fcb2:	6b03      	ldr	r3, [r0, #48]	; 0x30
   1fcb4:	6b42      	ldr	r2, [r0, #52]	; 0x34
   1fcb6:	4798      	blx	r3
   1fcb8:	2802      	cmp	r0, #2
   1fcba:	d095      	beq.n	1fbe8 <net_conn_input+0x18>
		return NET_OK;
   1fcbc:	2000      	movs	r0, #0
}
   1fcbe:	b009      	add	sp, #36	; 0x24
   1fcc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    net_sin(&conns[best_match].remote_addr)->sin_port) {
   1fcc4:	4b14      	ldr	r3, [pc, #80]	; (1fd18 <net_conn_input+0x148>)
   1fcc6:	223c      	movs	r2, #60	; 0x3c
   1fcc8:	fb02 3207 	mla	r2, r2, r7, r3
		if (best_match >= 0 &&
   1fccc:	8852      	ldrh	r2, [r2, #2]
   1fcce:	2a00      	cmp	r2, #0
   1fcd0:	d1d6      	bne.n	1fc80 <net_conn_input+0xb0>
   1fcd2:	e7b8      	b.n	1fc46 <net_conn_input+0x76>
		} else if (IS_ENABLED(CONFIG_NET_TCP_CHECKSUM) &&
   1fcd4:	f1b8 0f06 	cmp.w	r8, #6
   1fcd8:	d1e6      	bne.n	1fca8 <net_conn_input+0xd8>
			net_tcp_set_chksum(pkt, pkt->frags);
   1fcda:	68a1      	ldr	r1, [r4, #8]
   1fcdc:	4620      	mov	r0, r4
   1fcde:	f000 fcfc 	bl	206da <net_tcp_set_chksum>
			chksum_calc = net_tcp_get_chksum(pkt, pkt->frags);
   1fce2:	68a1      	ldr	r1, [r4, #8]
   1fce4:	4620      	mov	r0, r4
   1fce6:	f000 fcd9 	bl	2069c <net_tcp_get_chksum>
   1fcea:	e7db      	b.n	1fca4 <net_conn_input+0xd4>
   1fcec:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
	if (net_pkt_family(pkt) == AF_INET6 &&
   1fcf0:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   1fcf4:	2b0a      	cmp	r3, #10
   1fcf6:	f47f af77 	bne.w	1fbe8 <net_conn_input+0x18>
	return pkt->frags->data;
   1fcfa:	68a3      	ldr	r3, [r4, #8]
   1fcfc:	689b      	ldr	r3, [r3, #8]
   1fcfe:	7e1b      	ldrb	r3, [r3, #24]
   1fd00:	2bff      	cmp	r3, #255	; 0xff
   1fd02:	f43f af71 	beq.w	1fbe8 <net_conn_input+0x18>
		net_icmpv6_send_error(pkt, NET_ICMPV6_DST_UNREACH,
   1fd06:	2300      	movs	r3, #0
   1fd08:	4632      	mov	r2, r6
   1fd0a:	2101      	movs	r1, #1
   1fd0c:	4620      	mov	r0, r4
   1fd0e:	f7fd fa39 	bl	1d184 <net_icmpv6_send_error>
   1fd12:	e769      	b.n	1fbe8 <net_conn_input+0x18>
   1fd14:	200028d8 	.word	0x200028d8
   1fd18:	200028c0 	.word	0x200028c0

0001fd1c <net_conn_init>:
		cb(&conns[i], user_data);
	}
}

void net_conn_init(void)
{
   1fd1c:	4770      	bx	lr

0001fd1e <sys_get_be32>:
	return ((u16_t)src[0] << 8) | src[1];
   1fd1e:	7803      	ldrb	r3, [r0, #0]
   1fd20:	7842      	ldrb	r2, [r0, #1]
   1fd22:	7881      	ldrb	r1, [r0, #2]
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   1fd24:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	return ((u16_t)src[0] << 8) | src[1];
   1fd28:	78c3      	ldrb	r3, [r0, #3]
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   1fd2a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
}
   1fd2e:	ea43 4002 	orr.w	r0, r3, r2, lsl #16
   1fd32:	4770      	bx	lr

0001fd34 <net_tcp_header_fits>:
{
   1fd34:	b510      	push	{r4, lr}
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   1fd36:	2214      	movs	r2, #20
{
   1fd38:	460c      	mov	r4, r1
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   1fd3a:	f7fc f9db 	bl	1c0f4 <net_header_fits>
   1fd3e:	2800      	cmp	r0, #0
}
   1fd40:	bf14      	ite	ne
   1fd42:	4620      	movne	r0, r4
   1fd44:	2000      	moveq	r0, #0
   1fd46:	bd10      	pop	{r4, pc}

0001fd48 <prepare_segment.isra.12>:
	}

	return 0;
}

static int prepare_segment(struct net_tcp *tcp,
   1fd48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fd4c:	4605      	mov	r5, r0
   1fd4e:	b085      	sub	sp, #20
   1fd50:	460f      	mov	r7, r1
   1fd52:	469b      	mov	fp, r3
			   struct tcp_segment *segment,
			   struct net_pkt *pkt,
			   struct net_pkt **out_pkt)
{
	struct net_buf *header, *tail = NULL;
	struct net_context *context = tcp->context;
   1fd54:	f8d0 a000 	ldr.w	sl, [r0]
	u8_t optlen = 0;
	int status;

	NET_ASSERT(context);

	if (pkt) {
   1fd58:	4614      	mov	r4, r2
   1fd5a:	b362      	cbz	r2, 1fdb6 <prepare_segment.isra.12+0x6e>
		 * net_pkt at the head (so that net_context_send can find
		 * the context), and the data after.  Rejigger so we
		 * can insert a TCP header cleanly
		 */
		tail = pkt->frags;
		pkt->frags = NULL;
   1fd5c:	2300      	movs	r3, #0
		tail = pkt->frags;
   1fd5e:	f8d2 9008 	ldr.w	r9, [r2, #8]
		pkt->frags = NULL;
   1fd62:	6093      	str	r3, [r2, #8]
		pkt_allocated = false;
   1fd64:	4698      	mov	r8, r3
	return pkt->family;
   1fd66:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
								sin_port;
		NET_IPV4_HDR(pkt)->proto = IPPROTO_TCP;
	} else
#endif
#if defined(CONFIG_NET_IPV6)
	if (net_pkt_family(pkt) == AF_INET6) {
   1fd6a:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   1fd6e:	2b0a      	cmp	r3, #10
   1fd70:	d12e      	bne.n	1fdd0 <prepare_segment.isra.12+0x88>
		net_ipv6_create(tcp->context, pkt,
				net_sin6_ptr(segment->src_addr)->sin6_addr,
				&(net_sin6(segment->dst_addr)->sin6_addr));
   1fd72:	697b      	ldr	r3, [r7, #20]
				net_sin6_ptr(segment->src_addr)->sin6_addr,
   1fd74:	693a      	ldr	r2, [r7, #16]
		net_ipv6_create(tcp->context, pkt,
   1fd76:	6828      	ldr	r0, [r5, #0]
   1fd78:	6852      	ldr	r2, [r2, #4]
   1fd7a:	3304      	adds	r3, #4
   1fd7c:	4621      	mov	r1, r4
   1fd7e:	f7fd fe81 	bl	1da84 <net_ipv6_create>
		dst_port = net_sin6(segment->dst_addr)->sin6_port;
   1fd82:	697b      	ldr	r3, [r7, #20]
   1fd84:	885b      	ldrh	r3, [r3, #2]
   1fd86:	9301      	str	r3, [sp, #4]
		src_port = ((struct sockaddr_in6_ptr *)&context->local)->
   1fd88:	f8ba 300a 	ldrh.w	r3, [sl, #10]
   1fd8c:	9302      	str	r3, [sp, #8]
	return pkt->frags->data;
   1fd8e:	68a3      	ldr	r3, [r4, #8]
								sin6_port;
		NET_IPV6_HDR(pkt)->nexthdr = IPPROTO_TCP;
   1fd90:	689b      	ldr	r3, [r3, #8]
   1fd92:	2206      	movs	r2, #6
   1fd94:	719a      	strb	r2, [r3, #6]
		}

		return -EINVAL;
	}

	header = net_pkt_get_data(context, ALLOC_TIMEOUT);
   1fd96:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   1fd9a:	4650      	mov	r0, sl
   1fd9c:	f7fb fd40 	bl	1b820 <net_pkt_get_data>
	if (!header) {
   1fda0:	4605      	mov	r5, r0
   1fda2:	bb38      	cbnz	r0, 1fdf4 <prepare_segment.isra.12+0xac>
		NET_WARN("[%p] Unable to alloc TCP header", tcp);
		if (pkt_allocated) {
   1fda4:	f1b8 0f00 	cmp.w	r8, #0
   1fda8:	d021      	beq.n	1fdee <prepare_segment.isra.12+0xa6>
			net_pkt_unref(pkt);
   1fdaa:	4620      	mov	r0, r4
   1fdac:	f7fb fd6b 	bl	1b886 <net_pkt_unref>
			return -ENOMEM;
   1fdb0:	f06f 050b 	mvn.w	r5, #11
   1fdb4:	e014      	b.n	1fde0 <prepare_segment.isra.12+0x98>
		pkt = net_pkt_get_tx(context, ALLOC_TIMEOUT);
   1fdb6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   1fdba:	4650      	mov	r0, sl
   1fdbc:	f7fb fd1e 	bl	1b7fc <net_pkt_get_tx>
		if (!pkt) {
   1fdc0:	4604      	mov	r4, r0
   1fdc2:	2800      	cmp	r0, #0
   1fdc4:	d0f4      	beq.n	1fdb0 <prepare_segment.isra.12+0x68>
		pkt_allocated = true;
   1fdc6:	f04f 0801 	mov.w	r8, #1
	struct net_buf *header, *tail = NULL;
   1fdca:	f04f 0900 	mov.w	r9, #0
   1fdce:	e7ca      	b.n	1fd66 <prepare_segment.isra.12+0x1e>
		if (pkt_allocated) {
   1fdd0:	f1b8 0f00 	cmp.w	r8, #0
   1fdd4:	d008      	beq.n	1fde8 <prepare_segment.isra.12+0xa0>
			net_pkt_unref(pkt);
   1fdd6:	4620      	mov	r0, r4
   1fdd8:	f7fb fd55 	bl	1b886 <net_pkt_unref>
		return -EINVAL;
   1fddc:	f06f 0515 	mvn.w	r5, #21
	net_tcp_trace(pkt, tcp);

	*out_pkt = pkt;

	return 0;
}
   1fde0:	4628      	mov	r0, r5
   1fde2:	b005      	add	sp, #20
   1fde4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			pkt->frags = tail;
   1fde8:	f8c4 9008 	str.w	r9, [r4, #8]
   1fdec:	e7f6      	b.n	1fddc <prepare_segment.isra.12+0x94>
			pkt->frags = tail;
   1fdee:	f8c4 9008 	str.w	r9, [r4, #8]
   1fdf2:	e7dd      	b.n	1fdb0 <prepare_segment.isra.12+0x68>
	net_pkt_frag_add(pkt, header);
   1fdf4:	4601      	mov	r1, r0
   1fdf6:	4620      	mov	r0, r4
   1fdf8:	f7fb fd6c 	bl	1b8d4 <net_pkt_frag_add>
	tcp_hdr = (struct net_tcp_hdr *)net_buf_add(header, NET_TCPH_LEN);
   1fdfc:	f105 0208 	add.w	r2, r5, #8
   1fe00:	2114      	movs	r1, #20
   1fe02:	4610      	mov	r0, r2
   1fe04:	9203      	str	r2, [sp, #12]
   1fe06:	f7f9 facd 	bl	193a4 <net_buf_simple_add>
	if (segment->options && segment->optlen) {
   1fe0a:	68fb      	ldr	r3, [r7, #12]
	tcp_hdr = (struct net_tcp_hdr *)net_buf_add(header, NET_TCPH_LEN);
   1fe0c:	4605      	mov	r5, r0
	if (segment->options && segment->optlen) {
   1fe0e:	2b00      	cmp	r3, #0
   1fe10:	d050      	beq.n	1feb4 <prepare_segment.isra.12+0x16c>
   1fe12:	7afe      	ldrb	r6, [r7, #11]
   1fe14:	9a03      	ldr	r2, [sp, #12]
   1fe16:	b17e      	cbz	r6, 1fe38 <prepare_segment.isra.12+0xf0>
	memcpy(net_buf_add(header, len), data, len);
   1fe18:	4631      	mov	r1, r6
   1fe1a:	4610      	mov	r0, r2
   1fe1c:	9303      	str	r3, [sp, #12]
   1fe1e:	f7f9 fac1 	bl	193a4 <net_buf_simple_add>
   1fe22:	9b03      	ldr	r3, [sp, #12]
   1fe24:	4632      	mov	r2, r6
   1fe26:	4619      	mov	r1, r3
   1fe28:	f7e0 fcb3 	bl	792 <memcpy>
	if ((len & 0x3u) != 0u) {
   1fe2c:	07b3      	lsls	r3, r6, #30
   1fe2e:	d003      	beq.n	1fe38 <prepare_segment.isra.12+0xf0>
		optlen = (len & 0xfffCu) + 4u;
   1fe30:	f026 0603 	bic.w	r6, r6, #3
   1fe34:	3604      	adds	r6, #4
   1fe36:	b2f6      	uxtb	r6, r6
	tcp_hdr->offset = (NET_TCPH_LEN + optlen) << 2;
   1fe38:	3614      	adds	r6, #20
	tcp_hdr->src_port = src_port;
   1fe3a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   1fe3e:	802b      	strh	r3, [r5, #0]
	tcp_hdr->offset = (NET_TCPH_LEN + optlen) << 2;
   1fe40:	00b6      	lsls	r6, r6, #2
   1fe42:	732e      	strb	r6, [r5, #12]
	tcp_hdr->dst_port = dst_port;
   1fe44:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1fe48:	806b      	strh	r3, [r5, #2]
	sys_put_be32(segment->seq, tcp_hdr->seq);
   1fe4a:	683b      	ldr	r3, [r7, #0]
	dst[1] = val;
   1fe4c:	71eb      	strb	r3, [r5, #7]
	sys_put_be16(val >> 16, dst);
   1fe4e:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val;
   1fe50:	716a      	strb	r2, [r5, #5]
	dst[0] = val >> 8;
   1fe52:	0a11      	lsrs	r1, r2, #8
   1fe54:	f3c3 2207 	ubfx	r2, r3, #8, #8
   1fe58:	7129      	strb	r1, [r5, #4]
   1fe5a:	71aa      	strb	r2, [r5, #6]
	sys_put_be32(segment->ack, tcp_hdr->ack);
   1fe5c:	687b      	ldr	r3, [r7, #4]
	dst[1] = val;
   1fe5e:	72eb      	strb	r3, [r5, #11]
	sys_put_be16(val >> 16, dst);
   1fe60:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val;
   1fe62:	726a      	strb	r2, [r5, #9]
	dst[0] = val >> 8;
   1fe64:	0a11      	lsrs	r1, r2, #8
   1fe66:	f3c3 2207 	ubfx	r2, r3, #8, #8
   1fe6a:	72aa      	strb	r2, [r5, #10]
   1fe6c:	7229      	strb	r1, [r5, #8]
	tcp_hdr->flags = segment->flags;
   1fe6e:	7abb      	ldrb	r3, [r7, #10]
   1fe70:	736b      	strb	r3, [r5, #13]
	sys_put_be16(segment->wnd, tcp_hdr->wnd);
   1fe72:	893b      	ldrh	r3, [r7, #8]
	dst[1] = val;
   1fe74:	73eb      	strb	r3, [r5, #15]
	dst[0] = val >> 8;
   1fe76:	0a1a      	lsrs	r2, r3, #8
	tcp_hdr->urg[0] = 0;
   1fe78:	2300      	movs	r3, #0
   1fe7a:	73aa      	strb	r2, [r5, #14]
   1fe7c:	74ab      	strb	r3, [r5, #18]
	tcp_hdr->urg[1] = 0;
   1fe7e:	74eb      	strb	r3, [r5, #19]
	if (tail) {
   1fe80:	f1b9 0f00 	cmp.w	r9, #0
   1fe84:	d003      	beq.n	1fe8e <prepare_segment.isra.12+0x146>
		net_pkt_frag_add(pkt, tail);
   1fe86:	4649      	mov	r1, r9
   1fe88:	4620      	mov	r0, r4
   1fe8a:	f7fb fd23 	bl	1b8d4 <net_pkt_frag_add>
	return pkt->family;
   1fe8e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
	if (net_pkt_family(pkt) == AF_INET6) {
   1fe92:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   1fe96:	2b0a      	cmp	r3, #10
   1fe98:	d10e      	bne.n	1feb8 <prepare_segment.isra.12+0x170>
		return net_ipv6_finalize(context, pkt);
   1fe9a:	4621      	mov	r1, r4
   1fe9c:	4650      	mov	r0, sl
   1fe9e:	f7fd ffcf 	bl	1de40 <net_ipv6_finalize>
	if (status < 0) {
   1fea2:	1e05      	subs	r5, r0, #0
   1fea4:	da08      	bge.n	1feb8 <prepare_segment.isra.12+0x170>
		if (pkt_allocated) {
   1fea6:	f1b8 0f00 	cmp.w	r8, #0
   1feaa:	d099      	beq.n	1fde0 <prepare_segment.isra.12+0x98>
			net_pkt_unref(pkt);
   1feac:	4620      	mov	r0, r4
   1feae:	f7fb fcea 	bl	1b886 <net_pkt_unref>
   1feb2:	e795      	b.n	1fde0 <prepare_segment.isra.12+0x98>
	u8_t optlen = 0;
   1feb4:	461e      	mov	r6, r3
   1feb6:	e7bf      	b.n	1fe38 <prepare_segment.isra.12+0xf0>
	*out_pkt = pkt;
   1feb8:	f8cb 4000 	str.w	r4, [fp]
	return 0;
   1febc:	2500      	movs	r5, #0
   1febe:	e78f      	b.n	1fde0 <prepare_segment.isra.12+0x98>

0001fec0 <net_tcp_alloc>:
{
   1fec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fec2:	4607      	mov	r7, r0
	__asm__ volatile(
   1fec4:	f04f 0320 	mov.w	r3, #32
   1fec8:	f3ef 8511 	mrs	r5, BASEPRI
   1fecc:	f383 8811 	msr	BASEPRI, r3
	return tcp->flags & NET_TCP_IN_USE;
   1fed0:	4c28      	ldr	r4, [pc, #160]	; (1ff74 <net_tcp_alloc+0xb4>)
	for (i = 0; i < NET_MAX_TCP_CONTEXT; i++) {
   1fed2:	2000      	movs	r0, #0
   1fed4:	f04f 0ee0 	mov.w	lr, #224	; 0xe0
   1fed8:	4626      	mov	r6, r4
   1feda:	fb0e 4200 	mla	r2, lr, r0, r4
   1fede:	32b8      	adds	r2, #184	; 0xb8
   1fee0:	8893      	ldrh	r3, [r2, #4]
   1fee2:	f3c3 1147 	ubfx	r1, r3, #5, #8
		if (!net_tcp_is_used(&tcp_context[i])) {
   1fee6:	f011 0f01 	tst.w	r1, #1
   1feea:	d13d      	bne.n	1ff68 <net_tcp_alloc+0xa8>
			tcp_context[i].flags |= NET_TCP_IN_USE;
   1feec:	f041 0101 	orr.w	r1, r1, #1
   1fef0:	f361 134c 	bfi	r3, r1, #5, #8
   1fef4:	8093      	strh	r3, [r2, #4]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1fef6:	f385 8811 	msr	BASEPRI, r5
	if (i >= NET_MAX_TCP_CONTEXT) {
   1fefa:	2806      	cmp	r0, #6
   1fefc:	d038      	beq.n	1ff70 <net_tcp_alloc+0xb0>
   1fefe:	22e0      	movs	r2, #224	; 0xe0
   1ff00:	fb02 f500 	mul.w	r5, r2, r0
	memset(&tcp_context[i], 0, sizeof(struct net_tcp));
   1ff04:	1974      	adds	r4, r6, r5
   1ff06:	2100      	movs	r1, #0
   1ff08:	4620      	mov	r0, r4
   1ff0a:	f7e0 fc6e 	bl	7ea <memset>
	tcp_context[i].flags = NET_TCP_IN_USE;
   1ff0e:	f8b4 20bc 	ldrh.w	r2, [r4, #188]	; 0xbc
   1ff12:	2101      	movs	r1, #1
   1ff14:	f361 124c 	bfi	r2, r1, #5, #8
   1ff18:	f8a4 20bc 	strh.w	r2, [r4, #188]	; 0xbc
	tcp_context[i].state = NET_TCP_CLOSED;
   1ff1c:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
   1ff20:	f36f 3250 	bfc	r2, #13, #4
   1ff24:	f8c4 20bc 	str.w	r2, [r4, #188]	; 0xbc
	tcp_context[i].context = context;
   1ff28:	5177      	str	r7, [r6, r5]
	return sys_rand32_get();
   1ff2a:	f7e2 fc71 	bl	2810 <sys_rand32_get>
	tcp_context[i].recv_wnd = min(NET_TCP_MAX_WIN, NET_TCP_BUF_MAX_LEN);
   1ff2e:	f44f 63a0 	mov.w	r3, #1280	; 0x500
	tcp_context[i].send_seq = tcp_init_isn();
   1ff32:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0
	tcp_context[i].recv_wnd = min(NET_TCP_MAX_WIN, NET_TCP_BUF_MAX_LEN);
   1ff36:	f8a4 30dc 	strh.w	r3, [r4, #220]	; 0xdc
	tcp_context[i].accept_cb = NULL;
   1ff3a:	2700      	movs	r7, #0
	tcp_context[i].send_mss = NET_TCP_DEFAULT_MSS;
   1ff3c:	f44f 7306 	mov.w	r3, #536	; 0x218
	k_delayed_work_init(&tcp_context[i].retry_timer, tcp_retry_expired);
   1ff40:	f105 0058 	add.w	r0, r5, #88	; 0x58
   1ff44:	490c      	ldr	r1, [pc, #48]	; (1ff78 <net_tcp_alloc+0xb8>)
	tcp_context[i].send_mss = NET_TCP_DEFAULT_MSS;
   1ff46:	f8a4 30de 	strh.w	r3, [r4, #222]	; 0xde
	k_delayed_work_init(&tcp_context[i].retry_timer, tcp_retry_expired);
   1ff4a:	4430      	add	r0, r6
	tcp_context[i].accept_cb = NULL;
   1ff4c:	f8c4 70c0 	str.w	r7, [r4, #192]	; 0xc0
	k_delayed_work_init(&tcp_context[i].retry_timer, tcp_retry_expired);
   1ff50:	f002 f958 	bl	22204 <k_delayed_work_init>
	k_sem_init(&tcp_context[i].connect_wait, 0, UINT_MAX);
   1ff54:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   1ff58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1ff5c:	4639      	mov	r1, r7
   1ff5e:	4430      	add	r0, r6
   1ff60:	f001 fe1a 	bl	21b98 <_impl_k_sem_init>
}
   1ff64:	4620      	mov	r0, r4
   1ff66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (i = 0; i < NET_MAX_TCP_CONTEXT; i++) {
   1ff68:	3001      	adds	r0, #1
   1ff6a:	2806      	cmp	r0, #6
   1ff6c:	d1b5      	bne.n	1feda <net_tcp_alloc+0x1a>
   1ff6e:	e7c2      	b.n	1fef6 <net_tcp_alloc+0x36>
		return NULL;
   1ff70:	2400      	movs	r4, #0
   1ff72:	e7f7      	b.n	1ff64 <net_tcp_alloc+0xa4>
   1ff74:	200029b0 	.word	0x200029b0
   1ff78:	0002085d 	.word	0x0002085d

0001ff7c <net_tcp_get_recv_wnd>:

u32_t net_tcp_get_recv_wnd(const struct net_tcp *tcp)
{
	return tcp->recv_wnd;
}
   1ff7c:	f8b0 00dc 	ldrh.w	r0, [r0, #220]	; 0xdc
   1ff80:	4770      	bx	lr

0001ff82 <net_tcp_get_recv_mss>:
#else /* CONFIG_NET_IPV4 */
#define ip_max_packet_len(...) 0
#endif /* CONFIG_NET_IPV4 */

u16_t net_tcp_get_recv_mss(const struct net_tcp *tcp)
{
   1ff82:	b508      	push	{r3, lr}
	sa_family_t family = net_context_get_family(tcp->context);
   1ff84:	6803      	ldr	r3, [r0, #0]
	if (context->flags & NET_CONTEXT_FAMILY) {
   1ff86:	f893 005d 	ldrb.w	r0, [r3, #93]	; 0x5d
   1ff8a:	f010 0010 	ands.w	r0, r0, #16
   1ff8e:	d00e      	beq.n	1ffae <net_tcp_get_recv_mss+0x2c>
	return net_if_get_by_index(context->iface);
   1ff90:	f893 005c 	ldrb.w	r0, [r3, #92]	; 0x5c
   1ff94:	f7fb fa44 	bl	1b420 <net_if_get_by_index>
#if defined(CONFIG_NET_IPV6)
	else if (family == AF_INET6) {
		struct net_if *iface = net_context_get_iface(tcp->context);
		int mss = 0;

		if (iface && iface->mtu >= NET_IPV6TCPH_LEN) {
   1ff98:	b150      	cbz	r0, 1ffb0 <net_tcp_get_recv_mss+0x2e>
   1ff9a:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   1ff9c:	283b      	cmp	r0, #59	; 0x3b
   1ff9e:	d907      	bls.n	1ffb0 <net_tcp_get_recv_mss+0x2e>
			/* Detect MSS based on interface MTU minus "TCP,IP
			 * header size"
			 */
			mss = iface->mtu - NET_IPV6TCPH_LEN;
   1ffa0:	383c      	subs	r0, #60	; 0x3c
   1ffa2:	f5b0 6fa0 	cmp.w	r0, #1280	; 0x500
   1ffa6:	bfb8      	it	lt
   1ffa8:	f44f 60a0 	movlt.w	r0, #1280	; 0x500

		if (mss < NET_IPV6_MTU) {
			mss = NET_IPV6_MTU;
		}

		return mss;
   1ffac:	b280      	uxth	r0, r0
	}
#endif /* CONFIG_NET_IPV6 */

	return 0;
}
   1ffae:	bd08      	pop	{r3, pc}
			mss = NET_IPV6_MTU;
   1ffb0:	f44f 60a0 	mov.w	r0, #1280	; 0x500
   1ffb4:	e7fa      	b.n	1ffac <net_tcp_get_recv_mss+0x2a>

0001ffb6 <net_tcp_prepare_reset>:

int net_tcp_prepare_reset(struct net_tcp *tcp,
			  const struct sockaddr *local,
			  const struct sockaddr *remote,
			  struct net_pkt **pkt)
{
   1ffb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ffba:	4605      	mov	r5, r0
   1ffbc:	b08a      	sub	sp, #40	; 0x28
   1ffbe:	460c      	mov	r4, r1
   1ffc0:	4617      	mov	r7, r2
	struct tcp_segment segment = { 0 };
   1ffc2:	2100      	movs	r1, #0
   1ffc4:	2218      	movs	r2, #24
   1ffc6:	a804      	add	r0, sp, #16
{
   1ffc8:	461e      	mov	r6, r3
	struct tcp_segment segment = { 0 };
   1ffca:	f7e0 fc0e 	bl	7ea <memset>
	int status = 0;
	struct sockaddr_ptr src_addr_ptr;

	if ((net_context_get_state(tcp->context) != NET_CONTEXT_UNCONNECTED) &&
   1ffce:	682b      	ldr	r3, [r5, #0]
	return (context->flags >> NET_CONTEXT_STATE_SHIFT) &
   1ffd0:	f893 005d 	ldrb.w	r0, [r3, #93]	; 0x5d
   1ffd4:	f3c0 0041 	ubfx	r0, r0, #1, #2
   1ffd8:	b1f8      	cbz	r0, 2001a <net_tcp_prepare_reset+0x64>
	return (enum net_tcp_state)tcp->state;
   1ffda:	f8d5 20bc 	ldr.w	r2, [r5, #188]	; 0xbc
   1ffde:	f3c2 3243 	ubfx	r2, r2, #13, #4
   1ffe2:	2a02      	cmp	r2, #2
   1ffe4:	d031      	beq.n	2004a <net_tcp_prepare_reset+0x94>
	    (net_tcp_get_state(tcp) != NET_TCP_SYN_SENT) &&
   1ffe6:	2a09      	cmp	r2, #9
   1ffe8:	d02f      	beq.n	2004a <net_tcp_prepare_reset+0x94>
	    (net_tcp_get_state(tcp) != NET_TCP_TIME_WAIT)) {
		/* Send the reset segment always with acknowledgment. */
		segment.ack = tcp->send_ack;
   1ffea:	f8d5 20b4 	ldr.w	r2, [r5, #180]	; 0xb4
   1ffee:	9205      	str	r2, [sp, #20]
		segment.flags = NET_TCP_RST | NET_TCP_ACK;
   1fff0:	2214      	movs	r2, #20
   1fff2:	f88d 201a 	strb.w	r2, [sp, #26]
		segment.seq = tcp->send_seq;
   1fff6:	f8d5 20b0 	ldr.w	r2, [r5, #176]	; 0xb0
   1fffa:	9204      	str	r2, [sp, #16]

		if (!local) {
   1fffc:	b984      	cbnz	r4, 20020 <net_tcp_prepare_reset+0x6a>
			segment.src_addr = &tcp->context->local;
   1fffe:	3308      	adds	r3, #8
   20000:	9308      	str	r3, [sp, #32]
						      &src_addr_ptr);
			segment.src_addr = &src_addr_ptr;
		}

		segment.dst_addr = remote;
		segment.wnd = 0;
   20002:	2200      	movs	r2, #0
		segment.options = NULL;
		segment.optlen = 0;

		status = prepare_segment(tcp, &segment, NULL, pkt);
   20004:	4633      	mov	r3, r6
   20006:	a904      	add	r1, sp, #16
   20008:	4628      	mov	r0, r5
		segment.dst_addr = remote;
   2000a:	9709      	str	r7, [sp, #36]	; 0x24
		segment.wnd = 0;
   2000c:	f8ad 2018 	strh.w	r2, [sp, #24]
		segment.options = NULL;
   20010:	9207      	str	r2, [sp, #28]
		segment.optlen = 0;
   20012:	f88d 201b 	strb.w	r2, [sp, #27]
		status = prepare_segment(tcp, &segment, NULL, pkt);
   20016:	f7ff fe97 	bl	1fd48 <prepare_segment.isra.12>
	}

	return status;
}
   2001a:	b00a      	add	sp, #40	; 0x28
   2001c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	memset(addr, 0, sizeof(struct sockaddr_ptr));
   20020:	f10d 0804 	add.w	r8, sp, #4
   20024:	220c      	movs	r2, #12
   20026:	2100      	movs	r1, #0
   20028:	4640      	mov	r0, r8
   2002a:	f7e0 fbde 	bl	7ea <memset>
	if (local->sa_family == AF_INET6) {
   2002e:	8823      	ldrh	r3, [r4, #0]
   20030:	2b0a      	cmp	r3, #10
   20032:	d107      	bne.n	20044 <net_tcp_prepare_reset+0x8e>
		net_sin6_ptr(addr)->sin6_family = AF_INET6;
   20034:	f8ad 3004 	strh.w	r3, [sp, #4]
		net_sin6_ptr(addr)->sin6_addr = &net_sin6(local)->sin6_addr;
   20038:	3404      	adds	r4, #4
		net_sin6_ptr(addr)->sin6_port = net_sin6(local)->sin6_port;
   2003a:	f834 3c02 	ldrh.w	r3, [r4, #-2]
   2003e:	f8ad 3006 	strh.w	r3, [sp, #6]
		net_sin6_ptr(addr)->sin6_addr = &net_sin6(local)->sin6_addr;
   20042:	9402      	str	r4, [sp, #8]
			segment.src_addr = &src_addr_ptr;
   20044:	f8cd 8020 	str.w	r8, [sp, #32]
   20048:	e7db      	b.n	20002 <net_tcp_prepare_reset+0x4c>
	int status = 0;
   2004a:	2000      	movs	r0, #0
	return status;
   2004c:	e7e5      	b.n	2001a <net_tcp_prepare_reset+0x64>

0002004e <net_tcp_init>:

	return true;
}

void net_tcp_init(void)
{
   2004e:	4770      	bx	lr

00020050 <net_tcp_change_state>:
   20050:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
}
#endif /* CONFIG_NET_DEBUG_TCP */

void net_tcp_change_state(struct net_tcp *tcp,
			  enum net_tcp_state new_state)
{
   20054:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NET_ASSERT(tcp);

	if (net_tcp_get_state(tcp) == new_state) {
   20056:	f3c3 3243 	ubfx	r2, r3, #13, #4
   2005a:	428a      	cmp	r2, r1
{
   2005c:	4604      	mov	r4, r0
	if (net_tcp_get_state(tcp) == new_state) {
   2005e:	d01a      	beq.n	20096 <net_tcp_change_state+0x46>

#if defined(CONFIG_NET_DEBUG_TCP)
	validate_state_transition(tcp->state, new_state);
#endif /* CONFIG_NET_DEBUG_TCP */

	tcp->state = new_state;
   20060:	f361 3350 	bfi	r3, r1, #13, #4

	if (net_tcp_get_state(tcp) != NET_TCP_CLOSED) {
   20064:	f011 050f 	ands.w	r5, r1, #15
	tcp->state = new_state;
   20068:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
	if (net_tcp_get_state(tcp) != NET_TCP_CLOSED) {
   2006c:	d113      	bne.n	20096 <net_tcp_change_state+0x46>
		return;
	}

	if (!tcp->context) {
   2006e:	6803      	ldr	r3, [r0, #0]
   20070:	b18b      	cbz	r3, 20096 <net_tcp_change_state+0x46>
		return;
	}

	/* Remove any port handlers if we are closing */
	if (tcp->context->conn_handler) {
   20072:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   20074:	b118      	cbz	r0, 2007e <net_tcp_change_state+0x2e>
	return net_conn_unregister(handle);
   20076:	f7ff fcaf 	bl	1f9d8 <net_conn_unregister>
		net_tcp_unregister(tcp->context->conn_handler);
		tcp->context->conn_handler = NULL;
   2007a:	6823      	ldr	r3, [r4, #0]
   2007c:	62dd      	str	r5, [r3, #44]	; 0x2c
	}

	if (tcp->accept_cb) {
   2007e:	f8d4 50c0 	ldr.w	r5, [r4, #192]	; 0xc0
   20082:	b145      	cbz	r5, 20096 <net_tcp_change_state+0x46>
		tcp->accept_cb(tcp->context,
   20084:	6820      	ldr	r0, [r4, #0]
   20086:	6803      	ldr	r3, [r0, #0]
   20088:	9300      	str	r3, [sp, #0]
   2008a:	2218      	movs	r2, #24
   2008c:	f06f 0333 	mvn.w	r3, #51	; 0x33
   20090:	f100 0114 	add.w	r1, r0, #20
   20094:	47a8      	blx	r5
			       &tcp->context->remote,
			       sizeof(struct sockaddr),
			       -ENETRESET,
			       tcp->context->user_data);
	}
}
   20096:	b003      	add	sp, #12
   20098:	bd30      	pop	{r4, r5, pc}
	...

0002009c <net_tcp_release>:
{
   2009c:	b570      	push	{r4, r5, r6, lr}
	if (!PART_OF_ARRAY(tcp_context, tcp)) {
   2009e:	4604      	mov	r4, r0
   200a0:	2800      	cmp	r0, #0
   200a2:	d052      	beq.n	2014a <net_tcp_release+0xae>
   200a4:	4b2a      	ldr	r3, [pc, #168]	; (20150 <net_tcp_release+0xb4>)
   200a6:	4298      	cmp	r0, r3
   200a8:	d34f      	bcc.n	2014a <net_tcp_release+0xae>
   200aa:	f503 63a8 	add.w	r3, r3, #1344	; 0x540
   200ae:	4298      	cmp	r0, r3
   200b0:	d24b      	bcs.n	2014a <net_tcp_release+0xae>
   200b2:	f8d0 30a8 	ldr.w	r3, [r0, #168]	; 0xa8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&tcp->sent_list, pkt, tmp,
   200b6:	bb5b      	cbnz	r3, 20110 <net_tcp_release+0x74>
	sem->count = 0;
   200b8:	2500      	movs	r5, #0
	k_delayed_work_cancel(&tcp->retry_timer);
   200ba:	f104 0058 	add.w	r0, r4, #88	; 0x58
   200be:	f002 f8bf 	bl	22240 <k_delayed_work_cancel>
   200c2:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
	k_delayed_work_cancel(&tcp->ack_timer);
   200c6:	f104 0008 	add.w	r0, r4, #8
   200ca:	f002 f8b9 	bl	22240 <k_delayed_work_cancel>
	k_delayed_work_cancel(&tcp->fin_timer);
   200ce:	f104 0030 	add.w	r0, r4, #48	; 0x30
   200d2:	f002 f8b5 	bl	22240 <k_delayed_work_cancel>
	k_delayed_work_cancel(&tcp->timewait_timer);
   200d6:	f104 0080 	add.w	r0, r4, #128	; 0x80
   200da:	f002 f8b1 	bl	22240 <k_delayed_work_cancel>
	net_tcp_change_state(tcp, NET_TCP_CLOSED);
   200de:	4629      	mov	r1, r5
   200e0:	4620      	mov	r0, r4
   200e2:	f7ff ffb5 	bl	20050 <net_tcp_change_state>
	tcp->context = NULL;
   200e6:	6025      	str	r5, [r4, #0]
	__asm__ volatile(
   200e8:	f04f 0320 	mov.w	r3, #32
   200ec:	f3ef 8111 	mrs	r1, BASEPRI
   200f0:	f383 8811 	msr	BASEPRI, r3
	tcp->flags &= ~(NET_TCP_IN_USE | NET_TCP_RECV_MSS_SET);
   200f4:	f8b4 30bc 	ldrh.w	r3, [r4, #188]	; 0xbc
   200f8:	f3c3 1247 	ubfx	r2, r3, #5, #8
   200fc:	f022 0221 	bic.w	r2, r2, #33	; 0x21
   20100:	f362 134c 	bfi	r3, r2, #5, #8
   20104:	f8a4 30bc 	strh.w	r3, [r4, #188]	; 0xbc
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   20108:	f381 8811 	msr	BASEPRI, r1
	return 0;
   2010c:	4628      	mov	r0, r5
   2010e:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&tcp->sent_list, pkt, tmp,
   20110:	f1b3 0038 	subs.w	r0, r3, #56	; 0x38
   20114:	d0d0      	beq.n	200b8 <net_tcp_release+0x1c>
   20116:	681d      	ldr	r5, [r3, #0]
   20118:	b105      	cbz	r5, 2011c <net_tcp_release+0x80>
   2011a:	3d38      	subs	r5, #56	; 0x38
	node->next = NULL;
   2011c:	2600      	movs	r6, #0
		list->head = node->next;
   2011e:	4603      	mov	r3, r0
		if (list->tail == node) {
   20120:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
		list->head = node->next;
   20124:	f853 2f38 	ldr.w	r2, [r3, #56]!
   20128:	f8c4 20a8 	str.w	r2, [r4, #168]	; 0xa8
		if (list->tail == node) {
   2012c:	4299      	cmp	r1, r3
			list->tail = list->head;
   2012e:	bf08      	it	eq
   20130:	f8c4 20ac 	streq.w	r2, [r4, #172]	; 0xac
	node->next = NULL;
   20134:	6386      	str	r6, [r0, #56]	; 0x38
		net_pkt_unref(pkt);
   20136:	f7fb fba6 	bl	1b886 <net_pkt_unref>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&tcp->sent_list, pkt, tmp,
   2013a:	2d00      	cmp	r5, #0
   2013c:	d0bc      	beq.n	200b8 <net_tcp_release+0x1c>
	return node->next;
   2013e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   20140:	b103      	cbz	r3, 20144 <net_tcp_release+0xa8>
   20142:	3b38      	subs	r3, #56	; 0x38
   20144:	4628      	mov	r0, r5
   20146:	461d      	mov	r5, r3
   20148:	e7e9      	b.n	2011e <net_tcp_release+0x82>
		return -EINVAL;
   2014a:	f06f 0015 	mvn.w	r0, #21
   2014e:	bd70      	pop	{r4, r5, r6, pc}
   20150:	200029b0 	.word	0x200029b0

00020154 <net_tcp_prepare_segment>:
{
   20154:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20158:	b087      	sub	sp, #28
   2015a:	4604      	mov	r4, r0
   2015c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   2015e:	460d      	mov	r5, r1
   20160:	4691      	mov	r9, r2
	struct tcp_segment segment = { 0 };
   20162:	2100      	movs	r1, #0
   20164:	2218      	movs	r2, #24
   20166:	4668      	mov	r0, sp
{
   20168:	4698      	mov	r8, r3
	struct tcp_segment segment = { 0 };
   2016a:	f7e0 fb3e 	bl	7ea <memset>
	if (!local) {
   2016e:	b90e      	cbnz	r6, 20174 <net_tcp_prepare_segment+0x20>
		local = &tcp->context->local;
   20170:	6826      	ldr	r6, [r4, #0]
   20172:	3608      	adds	r6, #8
	if (flags & NET_TCP_ACK) {
   20174:	06e9      	lsls	r1, r5, #27
	seq = tcp->send_seq;
   20176:	f8d4 70b0 	ldr.w	r7, [r4, #176]	; 0xb0
	if (flags & NET_TCP_ACK) {
   2017a:	d50f      	bpl.n	2019c <net_tcp_prepare_segment+0x48>
	return (enum net_tcp_state)tcp->state;
   2017c:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   20180:	f3c3 3343 	ubfx	r3, r3, #13, #4
		if (net_tcp_get_state(tcp) == NET_TCP_FIN_WAIT_1) {
   20184:	2b07      	cmp	r3, #7
   20186:	d143      	bne.n	20210 <net_tcp_prepare_segment+0xbc>
			if (flags & NET_TCP_FIN) {
   20188:	07ea      	lsls	r2, r5, #31
   2018a:	d503      	bpl.n	20194 <net_tcp_prepare_segment+0x40>
				flags &= ~NET_TCP_FIN;
   2018c:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
			net_tcp_change_state(tcp, NET_TCP_TIME_WAIT);
   20190:	2109      	movs	r1, #9
   20192:	e000      	b.n	20196 <net_tcp_prepare_segment+0x42>
				net_tcp_change_state(tcp, NET_TCP_CLOSING);
   20194:	210a      	movs	r1, #10
			net_tcp_change_state(tcp, NET_TCP_LAST_ACK);
   20196:	4620      	mov	r0, r4
   20198:	f7ff ff5a 	bl	20050 <net_tcp_change_state>
	if (flags & NET_TCP_FIN) {
   2019c:	07eb      	lsls	r3, r5, #31
   2019e:	d516      	bpl.n	201ce <net_tcp_prepare_segment+0x7a>
		tcp->flags |= NET_TCP_FINAL_SENT;
   201a0:	f8b4 30bc 	ldrh.w	r3, [r4, #188]	; 0xbc
   201a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   201a8:	f8a4 30bc 	strh.w	r3, [r4, #188]	; 0xbc
   201ac:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   201b0:	f3c3 3343 	ubfx	r3, r3, #13, #4
		if (net_tcp_get_state(tcp) == NET_TCP_ESTABLISHED ||
   201b4:	330d      	adds	r3, #13
   201b6:	f003 030f 	and.w	r3, r3, #15
   201ba:	2b01      	cmp	r3, #1
		flags |= NET_TCP_ACK;
   201bc:	f045 0510 	orr.w	r5, r5, #16
		seq++;
   201c0:	f107 0701 	add.w	r7, r7, #1
		if (net_tcp_get_state(tcp) == NET_TCP_ESTABLISHED ||
   201c4:	d803      	bhi.n	201ce <net_tcp_prepare_segment+0x7a>
			net_tcp_change_state(tcp, NET_TCP_FIN_WAIT_1);
   201c6:	2107      	movs	r1, #7
   201c8:	4620      	mov	r0, r4
   201ca:	f7ff ff41 	bl	20050 <net_tcp_change_state>
	return tcp->recv_wnd;
   201ce:	f8b4 30dc 	ldrh.w	r3, [r4, #220]	; 0xdc
	segment.dst_addr = remote;
   201d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   201d4:	9205      	str	r2, [sp, #20]
	segment.wnd = wnd;
   201d6:	f8ad 3008 	strh.w	r3, [sp, #8]
	segment.seq = tcp->send_seq;
   201da:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
	status = prepare_segment(tcp, &segment, *send_pkt, send_pkt);
   201de:	9b10      	ldr	r3, [sp, #64]	; 0x40
	segment.seq = tcp->send_seq;
   201e0:	9200      	str	r2, [sp, #0]
	segment.ack = tcp->send_ack;
   201e2:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   201e6:	9201      	str	r2, [sp, #4]
	status = prepare_segment(tcp, &segment, *send_pkt, send_pkt);
   201e8:	4669      	mov	r1, sp
   201ea:	681a      	ldr	r2, [r3, #0]
	segment.src_addr = (struct sockaddr_ptr *)local;
   201ec:	9604      	str	r6, [sp, #16]
	status = prepare_segment(tcp, &segment, *send_pkt, send_pkt);
   201ee:	4620      	mov	r0, r4
	segment.flags = flags;
   201f0:	f88d 500a 	strb.w	r5, [sp, #10]
	segment.options = options;
   201f4:	f8cd 900c 	str.w	r9, [sp, #12]
	segment.optlen = optlen;
   201f8:	f88d 800b 	strb.w	r8, [sp, #11]
	status = prepare_segment(tcp, &segment, *send_pkt, send_pkt);
   201fc:	f7ff fda4 	bl	1fd48 <prepare_segment.isra.12>
	if (status < 0) {
   20200:	2800      	cmp	r0, #0
	return 0;
   20202:	bfa4      	itt	ge
   20204:	2000      	movge	r0, #0
	tcp->send_seq = seq;
   20206:	f8c4 70b0 	strge.w	r7, [r4, #176]	; 0xb0
}
   2020a:	b007      	add	sp, #28
   2020c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if (net_tcp_get_state(tcp) == NET_TCP_FIN_WAIT_2) {
   20210:	2b08      	cmp	r3, #8
   20212:	d0bd      	beq.n	20190 <net_tcp_prepare_segment+0x3c>
		} else if (net_tcp_get_state(tcp) == NET_TCP_CLOSE_WAIT) {
   20214:	2b05      	cmp	r3, #5
   20216:	d1c1      	bne.n	2019c <net_tcp_prepare_segment+0x48>
			tcp->flags |= NET_TCP_IS_SHUTDOWN;
   20218:	f8b4 30bc 	ldrh.w	r3, [r4, #188]	; 0xbc
   2021c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   20220:	f8a4 30bc 	strh.w	r3, [r4, #188]	; 0xbc
			flags |= NET_TCP_FIN;
   20224:	f045 0501 	orr.w	r5, r5, #1
			net_tcp_change_state(tcp, NET_TCP_LAST_ACK);
   20228:	2106      	movs	r1, #6
   2022a:	e7b4      	b.n	20196 <net_tcp_prepare_segment+0x42>

0002022c <net_tcp_prepare_ack>:
{
   2022c:	b570      	push	{r4, r5, r6, lr}
   2022e:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
	switch (net_tcp_get_state(tcp)) {
   20232:	f3c3 3343 	ubfx	r3, r3, #13, #4
   20236:	2b03      	cmp	r3, #3
{
   20238:	b086      	sub	sp, #24
   2023a:	4604      	mov	r4, r0
   2023c:	460d      	mov	r5, r1
   2023e:	4616      	mov	r6, r2
	switch (net_tcp_get_state(tcp)) {
   20240:	d00a      	beq.n	20258 <net_tcp_prepare_ack+0x2c>
   20242:	d302      	bcc.n	2024a <net_tcp_prepare_ack+0x1e>
   20244:	3b06      	subs	r3, #6
   20246:	2b01      	cmp	r3, #1
   20248:	d929      	bls.n	2029e <net_tcp_prepare_ack+0x72>
		return net_tcp_prepare_segment(tcp, NET_TCP_ACK, 0, 0, NULL,
   2024a:	2300      	movs	r3, #0
   2024c:	9602      	str	r6, [sp, #8]
   2024e:	9501      	str	r5, [sp, #4]
   20250:	9300      	str	r3, [sp, #0]
   20252:	461a      	mov	r2, r3
   20254:	2110      	movs	r1, #16
   20256:	e01e      	b.n	20296 <net_tcp_prepare_ack+0x6a>
	if (!(tcp->flags & NET_TCP_RECV_MSS_SET)) {
   20258:	f8b0 30bc 	ldrh.w	r3, [r0, #188]	; 0xbc
   2025c:	055b      	lsls	r3, r3, #21
   2025e:	d41c      	bmi.n	2029a <net_tcp_prepare_ack+0x6e>
		recv_mss = net_tcp_get_recv_mss(tcp);
   20260:	f7ff fe8f 	bl	1ff82 <net_tcp_get_recv_mss>
		tcp->flags |= NET_TCP_RECV_MSS_SET;
   20264:	f8b4 30bc 	ldrh.w	r3, [r4, #188]	; 0xbc
   20268:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   2026c:	f8a4 30bc 	strh.w	r3, [r4, #188]	; 0xbc
	recv_mss |= (NET_TCP_MSS_OPT << 24) | (NET_TCP_MSS_SIZE << 16);
   20270:	f040 7301 	orr.w	r3, r0, #33816576	; 0x2040000
	UNALIGNED_PUT(htonl(recv_mss),
   20274:	0218      	lsls	r0, r3, #8
   20276:	f240 4202 	movw	r2, #1026	; 0x402
   2027a:	ea42 6303 	orr.w	r3, r2, r3, lsl #24
   2027e:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
   20282:	aa06      	add	r2, sp, #24
   20284:	4318      	orrs	r0, r3
		return net_tcp_prepare_segment(tcp, NET_TCP_SYN | NET_TCP_ACK,
   20286:	2300      	movs	r3, #0
	UNALIGNED_PUT(htonl(recv_mss),
   20288:	f842 0d08 	str.w	r0, [r2, #-8]!
		return net_tcp_prepare_segment(tcp, NET_TCP_SYN | NET_TCP_ACK,
   2028c:	2112      	movs	r1, #18
   2028e:	9300      	str	r3, [sp, #0]
   20290:	9602      	str	r6, [sp, #8]
   20292:	9501      	str	r5, [sp, #4]
   20294:	2304      	movs	r3, #4
		return net_tcp_prepare_segment(tcp, NET_TCP_ACK, 0, 0, NULL,
   20296:	4620      	mov	r0, r4
   20298:	e007      	b.n	202aa <net_tcp_prepare_ack+0x7e>
		recv_mss = 0;
   2029a:	2000      	movs	r0, #0
   2029c:	e7e8      	b.n	20270 <net_tcp_prepare_ack+0x44>
		return net_tcp_prepare_segment(tcp, NET_TCP_FIN | NET_TCP_ACK,
   2029e:	2300      	movs	r3, #0
   202a0:	9202      	str	r2, [sp, #8]
   202a2:	9101      	str	r1, [sp, #4]
   202a4:	9300      	str	r3, [sp, #0]
   202a6:	461a      	mov	r2, r3
   202a8:	2111      	movs	r1, #17
		return net_tcp_prepare_segment(tcp, NET_TCP_ACK, 0, 0, NULL,
   202aa:	f7ff ff53 	bl	20154 <net_tcp_prepare_segment>
}
   202ae:	b006      	add	sp, #24
   202b0:	bd70      	pop	{r4, r5, r6, pc}
	...

000202b4 <net_tcp_queue_data>:
{
   202b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   202b6:	b087      	sub	sp, #28
	struct net_conn *conn = (struct net_conn *)context->conn_handler;
   202b8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   202ba:	688c      	ldr	r4, [r1, #8]
{
   202bc:	9105      	str	r1, [sp, #20]
   202be:	4605      	mov	r5, r0
	size_t bytes = 0;
   202c0:	2700      	movs	r7, #0
	while (buf) {
   202c2:	2c00      	cmp	r4, #0
   202c4:	d13b      	bne.n	2033e <net_tcp_queue_data+0x8a>
	ret = net_tcp_prepare_segment(context->tcp, NET_TCP_PSH | NET_TCP_ACK,
   202c6:	aa05      	add	r2, sp, #20
   202c8:	9202      	str	r2, [sp, #8]
   202ca:	9301      	str	r3, [sp, #4]
   202cc:	9400      	str	r4, [sp, #0]
   202ce:	4623      	mov	r3, r4
   202d0:	4622      	mov	r2, r4
   202d2:	2118      	movs	r1, #24
   202d4:	6e28      	ldr	r0, [r5, #96]	; 0x60
   202d6:	f7ff ff3d 	bl	20154 <net_tcp_prepare_segment>
	if (ret) {
   202da:	4606      	mov	r6, r0
   202dc:	bb60      	cbnz	r0, 20338 <net_tcp_queue_data+0x84>
	context->tcp->send_seq += data_len;
   202de:	6e28      	ldr	r0, [r5, #96]	; 0x60
	sys_slist_append(&context->tcp->sent_list, &pkt->sent_list);
   202e0:	9a05      	ldr	r2, [sp, #20]
	context->tcp->send_seq += data_len;
   202e2:	f8d0 30b0 	ldr.w	r3, [r0, #176]	; 0xb0
   202e6:	443b      	add	r3, r7
   202e8:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	sys_slist_append(&context->tcp->sent_list, &pkt->sent_list);
   202ec:	f102 0338 	add.w	r3, r2, #56	; 0x38
	node->next = NULL;
   202f0:	6394      	str	r4, [r2, #56]	; 0x38
	if (!list->tail) {
   202f2:	f8d0 20ac 	ldr.w	r2, [r0, #172]	; 0xac
   202f6:	bb32      	cbnz	r2, 20346 <net_tcp_queue_data+0x92>
		list->tail = node;
   202f8:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
		list->head = node;
   202fc:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
	return _timeout_remaining_get(&work->timeout);
   20300:	3064      	adds	r0, #100	; 0x64
   20302:	f002 f8d1 	bl	224a8 <_timeout_remaining_get>
	if (k_delayed_work_remaining_get(&context->tcp->retry_timer) == 0) {
   20306:	b950      	cbnz	r0, 2031e <net_tcp_queue_data+0x6a>
		k_delayed_work_submit(&context->tcp->retry_timer,
   20308:	6e29      	ldr	r1, [r5, #96]	; 0x60
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   2030a:	4811      	ldr	r0, [pc, #68]	; (20350 <net_tcp_queue_data+0x9c>)
	return ((u32_t)1 << tcp->retry_timeout_shift) *
   2030c:	f891 30bc 	ldrb.w	r3, [r1, #188]	; 0xbc
   20310:	22c8      	movs	r2, #200	; 0xc8
   20312:	f003 031f 	and.w	r3, r3, #31
   20316:	409a      	lsls	r2, r3
   20318:	3158      	adds	r1, #88	; 0x58
   2031a:	f001 ffeb 	bl	222f4 <k_delayed_work_submit_to_queue>
	do_ref_if_needed(context->tcp, pkt);
   2031e:	9805      	ldr	r0, [sp, #20]
   20320:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   20324:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   20328:	2b0a      	cmp	r3, #10
   2032a:	d103      	bne.n	20334 <net_tcp_queue_data+0x80>
   2032c:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   20330:	2b02      	cmp	r3, #2
   20332:	d001      	beq.n	20338 <net_tcp_queue_data+0x84>
   20334:	f7fb fa9c 	bl	1b870 <net_pkt_ref>
}
   20338:	4630      	mov	r0, r6
   2033a:	b007      	add	sp, #28
   2033c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		bytes += buf->len;
   2033e:	89a2      	ldrh	r2, [r4, #12]
		buf = buf->frags;
   20340:	6824      	ldr	r4, [r4, #0]
		bytes += buf->len;
   20342:	4417      	add	r7, r2
   20344:	e7bd      	b.n	202c2 <net_tcp_queue_data+0xe>
		list->tail->next = node;
   20346:	6013      	str	r3, [r2, #0]
		list->tail = node;
   20348:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
   2034c:	e7d8      	b.n	20300 <net_tcp_queue_data+0x4c>
   2034e:	bf00      	nop
   20350:	20003340 	.word	0x20003340

00020354 <net_tcp_get_hdr>:
					+ net_tcp_get_recv_wnd(tcp)) < 0);
}

struct net_tcp_hdr *net_tcp_get_hdr(struct net_pkt *pkt,
				    struct net_tcp_hdr *hdr)
{
   20354:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   20356:	4605      	mov	r5, r0
   20358:	460c      	mov	r4, r1
	struct net_tcp_hdr *tcp_hdr;
	struct net_buf *frag;
	u16_t pos;

	tcp_hdr = net_pkt_tcp_data(pkt);
   2035a:	f7fb fd17 	bl	1bd8c <net_pkt_tcp_data>
   2035e:	4606      	mov	r6, r0
	if (net_tcp_header_fits(pkt, tcp_hdr)) {
   20360:	4601      	mov	r1, r0
   20362:	4628      	mov	r0, r5
   20364:	f7ff fce6 	bl	1fd34 <net_tcp_header_fits>
   20368:	2800      	cmp	r0, #0
   2036a:	d162      	bne.n	20432 <net_tcp_get_hdr+0xde>
		return tcp_hdr;
	}

	frag = net_frag_read(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   2036c:	f895 0035 	ldrb.w	r0, [r5, #53]	; 0x35
			     net_pkt_ipv6_ext_len(pkt),
   20370:	f895 103f 	ldrb.w	r1, [r5, #63]	; 0x3f
	frag = net_frag_read(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   20374:	9400      	str	r4, [sp, #0]
   20376:	4401      	add	r1, r0
   20378:	2302      	movs	r3, #2
   2037a:	f10d 020e 	add.w	r2, sp, #14
   2037e:	68a8      	ldr	r0, [r5, #8]
   20380:	f7fb fbdc 	bl	1bb3c <net_frag_read>
			     &pos, sizeof(hdr->src_port),
			     (u8_t *)&hdr->src_port);
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->dst_port),
			     (u8_t *)&hdr->dst_port);
   20384:	1ca3      	adds	r3, r4, #2
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->dst_port),
   20386:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   2038a:	9300      	str	r3, [sp, #0]
   2038c:	f10d 020e 	add.w	r2, sp, #14
   20390:	2302      	movs	r3, #2
   20392:	f7fb fbd3 	bl	1bb3c <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->seq), hdr->seq);
   20396:	1d23      	adds	r3, r4, #4
   20398:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   2039c:	9300      	str	r3, [sp, #0]
   2039e:	f10d 020e 	add.w	r2, sp, #14
   203a2:	2304      	movs	r3, #4
   203a4:	f7fb fbca 	bl	1bb3c <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->ack), hdr->ack);
   203a8:	f104 0308 	add.w	r3, r4, #8
   203ac:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   203b0:	9300      	str	r3, [sp, #0]
   203b2:	f10d 020e 	add.w	r2, sp, #14
   203b6:	2304      	movs	r3, #4
   203b8:	f7fb fbc0 	bl	1bb3c <net_frag_read>
	frag = net_frag_read_u8(frag, pos, &pos, &hdr->offset);
   203bc:	f104 030c 	add.w	r3, r4, #12
	return net_frag_read(frag, offset, pos, 1, value);
   203c0:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   203c4:	9300      	str	r3, [sp, #0]
   203c6:	f10d 020e 	add.w	r2, sp, #14
   203ca:	2301      	movs	r3, #1
   203cc:	f7fb fbb6 	bl	1bb3c <net_frag_read>
	frag = net_frag_read_u8(frag, pos, &pos, &hdr->flags);
   203d0:	f104 030d 	add.w	r3, r4, #13
   203d4:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   203d8:	9300      	str	r3, [sp, #0]
   203da:	f10d 020e 	add.w	r2, sp, #14
   203de:	2301      	movs	r3, #1
   203e0:	f7fb fbac 	bl	1bb3c <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->wnd), hdr->wnd);
   203e4:	f104 030e 	add.w	r3, r4, #14
   203e8:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   203ec:	9300      	str	r3, [sp, #0]
   203ee:	f10d 020e 	add.w	r2, sp, #14
   203f2:	2302      	movs	r3, #2
   203f4:	f7fb fba2 	bl	1bb3c <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
			     (u8_t *)&hdr->chksum);
   203f8:	f104 0310 	add.w	r3, r4, #16
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   203fc:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   20400:	9300      	str	r3, [sp, #0]
   20402:	f10d 020e 	add.w	r2, sp, #14
   20406:	2302      	movs	r3, #2
   20408:	f7fb fb98 	bl	1bb3c <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->urg), hdr->urg);
   2040c:	f104 0312 	add.w	r3, r4, #18
   20410:	9300      	str	r3, [sp, #0]
   20412:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   20416:	2302      	movs	r3, #2
   20418:	f10d 020e 	add.w	r2, sp, #14
   2041c:	f7fb fb8e 	bl	1bb3c <net_frag_read>

	if (!frag && pos == 0xffff) {
   20420:	b930      	cbnz	r0, 20430 <net_tcp_get_hdr+0xdc>
   20422:	f8bd 200e 	ldrh.w	r2, [sp, #14]
		if (IS_ENABLED(CONFIG_NET_DEBUG_TCP) &&
		    !is_6lo_technology(pkt)) {
			NET_ASSERT(frag);
		}

		return NULL;
   20426:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2042a:	429a      	cmp	r2, r3
   2042c:	bf08      	it	eq
   2042e:	2400      	moveq	r4, #0
   20430:	4626      	mov	r6, r4
	}

	return hdr;
}
   20432:	4630      	mov	r0, r6
   20434:	b004      	add	sp, #16
   20436:	bd70      	pop	{r4, r5, r6, pc}

00020438 <net_tcp_ack_received>:
{
   20438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct net_tcp *tcp = ctx->tcp;
   2043c:	6e04      	ldr	r4, [r0, #96]	; 0x60
	return (s32_t)(seq1 - seq2);
   2043e:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   20442:	1acb      	subs	r3, r1, r3
	if (net_tcp_seq_greater(ack, ctx->tcp->send_seq)) {
   20444:	2b00      	cmp	r3, #0
{
   20446:	b087      	sub	sp, #28
   20448:	4681      	mov	r9, r0
		return false;
   2044a:	f04f 0600 	mov.w	r6, #0
	if (net_tcp_seq_greater(ack, ctx->tcp->send_seq)) {
   2044e:	dc22      	bgt.n	20496 <net_tcp_ack_received+0x5e>
   20450:	1c4f      	adds	r7, r1, #1
	node->next = NULL;
   20452:	46b2      	mov	sl, r6
   20454:	f8d4 50a8 	ldr.w	r5, [r4, #168]	; 0xa8
	while (!sys_slist_is_empty(list)) {
   20458:	bb0d      	cbnz	r5, 2049e <net_tcp_ack_received+0x66>
	if (valid_ack && net_tcp_get_state(tcp) == NET_TCP_ESTABLISHED) {
   2045a:	2e00      	cmp	r6, #0
   2045c:	d06f      	beq.n	2053e <net_tcp_ack_received+0x106>
   2045e:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   20462:	f3c3 3343 	ubfx	r3, r3, #13, #4
   20466:	2b04      	cmp	r3, #4
   20468:	d115      	bne.n	20496 <net_tcp_ack_received+0x5e>
		restart_timer(ctx->tcp);
   2046a:	f8d9 4060 	ldr.w	r4, [r9, #96]	; 0x60
	if (!sys_slist_is_empty(&tcp->sent_list)) {
   2046e:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   20472:	f104 0158 	add.w	r1, r4, #88	; 0x58
   20476:	2b00      	cmp	r3, #0
   20478:	d053      	beq.n	20522 <net_tcp_ack_received+0xea>
		tcp->flags |= NET_TCP_RETRYING;
   2047a:	f8b4 30bc 	ldrh.w	r3, [r4, #188]	; 0xbc
   2047e:	4831      	ldr	r0, [pc, #196]	; (20544 <net_tcp_ack_received+0x10c>)
   20480:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   20484:	f8a4 30bc 	strh.w	r3, [r4, #188]	; 0xbc
		tcp->retry_timeout_shift = 0;
   20488:	f36f 0304 	bfc	r3, #0, #5
   2048c:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
   20490:	22c8      	movs	r2, #200	; 0xc8
   20492:	f001 ff2f 	bl	222f4 <k_delayed_work_submit_to_queue>
}
   20496:	4630      	mov	r0, r6
   20498:	b007      	add	sp, #28
   2049a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		pkt = CONTAINER_OF(head, struct net_pkt, sent_list);
   2049e:	f1a5 0838 	sub.w	r8, r5, #56	; 0x38
		tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   204a2:	a901      	add	r1, sp, #4
   204a4:	4640      	mov	r0, r8
   204a6:	f7ff ff55 	bl	20354 <net_tcp_get_hdr>
		if (!tcp_hdr) {
   204aa:	4683      	mov	fp, r0
   204ac:	b970      	cbnz	r0, 204cc <net_tcp_ack_received+0x94>
		if (list->tail == node) {
   204ae:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
		list->head = node->next;
   204b2:	682b      	ldr	r3, [r5, #0]
   204b4:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
		if (list->tail == node) {
   204b8:	4295      	cmp	r5, r2
			list->tail = list->head;
   204ba:	bf08      	it	eq
   204bc:	f8c4 30ac 	streq.w	r3, [r4, #172]	; 0xac
			net_pkt_unref(pkt);
   204c0:	4640      	mov	r0, r8
	node->next = NULL;
   204c2:	f8c5 a000 	str.w	sl, [r5]
   204c6:	f7fb f9de 	bl	1b886 <net_pkt_unref>
   204ca:	e7c3      	b.n	20454 <net_tcp_ack_received+0x1c>
		seq = sys_get_be32(tcp_hdr->seq) + net_pkt_appdatalen(pkt) - 1;
   204cc:	3004      	adds	r0, #4
   204ce:	f7ff fc26 	bl	1fd1e <sys_get_be32>
   204d2:	f835 3c06 	ldrh.w	r3, [r5, #-6]
   204d6:	1afb      	subs	r3, r7, r3
   204d8:	1a18      	subs	r0, r3, r0
		if (!net_tcp_seq_greater(ack, seq)) {
   204da:	2800      	cmp	r0, #0
   204dc:	ddbd      	ble.n	2045a <net_tcp_ack_received+0x22>
		if (tcp_hdr->flags & NET_TCP_FIN) {
   204de:	f89b 300d 	ldrb.w	r3, [fp, #13]
   204e2:	07db      	lsls	r3, r3, #31
   204e4:	d509      	bpl.n	204fa <net_tcp_ack_received+0xc2>
   204e6:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   204ea:	f3c3 3343 	ubfx	r3, r3, #13, #4
			if (s == NET_TCP_FIN_WAIT_1) {
   204ee:	2b07      	cmp	r3, #7
   204f0:	d113      	bne.n	2051a <net_tcp_ack_received+0xe2>
				net_tcp_change_state(tcp, NET_TCP_FIN_WAIT_2);
   204f2:	2108      	movs	r1, #8
				net_tcp_change_state(tcp, NET_TCP_TIME_WAIT);
   204f4:	4620      	mov	r0, r4
   204f6:	f7ff fdab 	bl	20050 <net_tcp_change_state>
		if (list->tail == node) {
   204fa:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
		list->head = node->next;
   204fe:	682b      	ldr	r3, [r5, #0]
   20500:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
		if (list->tail == node) {
   20504:	4295      	cmp	r5, r2
			list->tail = list->head;
   20506:	bf08      	it	eq
   20508:	f8c4 30ac 	streq.w	r3, [r4, #172]	; 0xac
		net_pkt_unref(pkt);
   2050c:	4640      	mov	r0, r8
	node->next = NULL;
   2050e:	f8c5 a000 	str.w	sl, [r5]
   20512:	f7fb f9b8 	bl	1b886 <net_pkt_unref>
		valid_ack = true;
   20516:	2601      	movs	r6, #1
   20518:	e79c      	b.n	20454 <net_tcp_ack_received+0x1c>
			} else if (s == NET_TCP_CLOSING) {
   2051a:	2b0a      	cmp	r3, #10
   2051c:	d1ed      	bne.n	204fa <net_tcp_ack_received+0xc2>
				net_tcp_change_state(tcp, NET_TCP_TIME_WAIT);
   2051e:	2109      	movs	r1, #9
   20520:	e7e8      	b.n	204f4 <net_tcp_ack_received+0xbc>
		k_delayed_work_cancel(&tcp->retry_timer);
   20522:	4608      	mov	r0, r1
   20524:	f001 fe8c 	bl	22240 <k_delayed_work_cancel>
		tcp->flags &= ~NET_TCP_RETRYING;
   20528:	f8b4 30bc 	ldrh.w	r3, [r4, #188]	; 0xbc
   2052c:	f3c3 1247 	ubfx	r2, r3, #5, #8
   20530:	f022 0210 	bic.w	r2, r2, #16
   20534:	f362 134c 	bfi	r3, r2, #5, #8
   20538:	f8a4 30bc 	strh.w	r3, [r4, #188]	; 0xbc
   2053c:	e7ab      	b.n	20496 <net_tcp_ack_received+0x5e>
	return true;
   2053e:	2601      	movs	r6, #1
   20540:	e7a9      	b.n	20496 <net_tcp_ack_received+0x5e>
   20542:	bf00      	nop
   20544:	20003340 	.word	0x20003340

00020548 <net_tcp_validate_seq>:
{
   20548:	b510      	push	{r4, lr}
   2054a:	b086      	sub	sp, #24
   2054c:	4604      	mov	r4, r0
   2054e:	4608      	mov	r0, r1
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   20550:	a901      	add	r1, sp, #4
   20552:	f7ff feff 	bl	20354 <net_tcp_get_hdr>
	if (!tcp_hdr) {
   20556:	b170      	cbz	r0, 20576 <net_tcp_validate_seq+0x2e>
	return (net_tcp_seq_cmp(sys_get_be32(tcp_hdr->seq),
   20558:	3004      	adds	r0, #4
   2055a:	f7ff fbe0 	bl	1fd1e <sys_get_be32>
   2055e:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   20562:	1a83      	subs	r3, r0, r2
				tcp->send_ack) >= 0) &&
   20564:	2b00      	cmp	r3, #0
	return tcp->recv_wnd;
   20566:	bfa1      	itttt	ge
   20568:	f8b4 30dc 	ldrhge.w	r3, [r4, #220]	; 0xdc
   2056c:	189b      	addge	r3, r3, r2
   2056e:	1ac0      	subge	r0, r0, r3
				tcp->send_ack) >= 0) &&
   20570:	0fc0      	lsrge	r0, r0, #31
   20572:	bfb8      	it	lt
   20574:	2000      	movlt	r0, #0
}
   20576:	b006      	add	sp, #24
   20578:	bd10      	pop	{r4, pc}

0002057a <net_tcp_set_hdr>:

struct net_tcp_hdr *net_tcp_set_hdr(struct net_pkt *pkt,
				    struct net_tcp_hdr *hdr)
{
   2057a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2057e:	b087      	sub	sp, #28
   20580:	4605      	mov	r5, r0
   20582:	460c      	mov	r4, r1
	struct net_buf *frag;
	u16_t pos;

	if (net_tcp_header_fits(pkt, hdr)) {
   20584:	f7ff fbd6 	bl	1fd34 <net_tcp_header_fits>
   20588:	4680      	mov	r8, r0
   2058a:	2800      	cmp	r0, #0
   2058c:	f040 8082 	bne.w	20694 <net_tcp_set_hdr+0x11a>
		return hdr;
	}

	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   20590:	f895 1035 	ldrb.w	r1, [r5, #53]	; 0x35
			     net_pkt_ipv6_ext_len(pkt),
   20594:	f895 203f 	ldrb.w	r2, [r5, #63]	; 0x3f
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   20598:	9401      	str	r4, [sp, #4]
   2059a:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
   2059e:	2702      	movs	r7, #2
   205a0:	440a      	add	r2, r1
   205a2:	f10d 0316 	add.w	r3, sp, #22
   205a6:	68a9      	ldr	r1, [r5, #8]
   205a8:	9602      	str	r6, [sp, #8]
   205aa:	9700      	str	r7, [sp, #0]
   205ac:	4628      	mov	r0, r5
   205ae:	f7fb fb19 	bl	1bbe4 <net_pkt_write>
			     &pos, sizeof(hdr->src_port),
			     (u8_t *)&hdr->src_port, ALLOC_TIMEOUT);
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->dst_port),
			     (u8_t *)&hdr->dst_port, ALLOC_TIMEOUT);
   205b2:	19e3      	adds	r3, r4, r7
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->dst_port),
   205b4:	4601      	mov	r1, r0
   205b6:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   205ba:	9301      	str	r3, [sp, #4]
   205bc:	9602      	str	r6, [sp, #8]
   205be:	f10d 0316 	add.w	r3, sp, #22
   205c2:	9700      	str	r7, [sp, #0]
   205c4:	4628      	mov	r0, r5
   205c6:	f7fb fb0d 	bl	1bbe4 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->seq), hdr->seq,
   205ca:	f04f 0904 	mov.w	r9, #4
   205ce:	1d23      	adds	r3, r4, #4
   205d0:	4601      	mov	r1, r0
   205d2:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   205d6:	9301      	str	r3, [sp, #4]
   205d8:	f8cd 9000 	str.w	r9, [sp]
   205dc:	f10d 0316 	add.w	r3, sp, #22
   205e0:	9602      	str	r6, [sp, #8]
   205e2:	4628      	mov	r0, r5
   205e4:	f7fb fafe 	bl	1bbe4 <net_pkt_write>
			     ALLOC_TIMEOUT);
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->ack), hdr->ack,
   205e8:	f104 0308 	add.w	r3, r4, #8
   205ec:	4601      	mov	r1, r0
   205ee:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   205f2:	9301      	str	r3, [sp, #4]
   205f4:	f8cd 9000 	str.w	r9, [sp]
   205f8:	f10d 0316 	add.w	r3, sp, #22
   205fc:	9602      	str	r6, [sp, #8]
   205fe:	4628      	mov	r0, r5
   20600:	f7fb faf0 	bl	1bbe4 <net_pkt_write>
			     ALLOC_TIMEOUT);
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->offset),
   20604:	f04f 0901 	mov.w	r9, #1
   20608:	f104 030c 	add.w	r3, r4, #12
   2060c:	4601      	mov	r1, r0
   2060e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   20612:	9301      	str	r3, [sp, #4]
   20614:	9602      	str	r6, [sp, #8]
   20616:	f10d 0316 	add.w	r3, sp, #22
   2061a:	f8cd 9000 	str.w	r9, [sp]
   2061e:	4628      	mov	r0, r5
   20620:	f7fb fae0 	bl	1bbe4 <net_pkt_write>
			     &hdr->offset, ALLOC_TIMEOUT);
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->flags),
   20624:	f104 030d 	add.w	r3, r4, #13
   20628:	4601      	mov	r1, r0
   2062a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   2062e:	9301      	str	r3, [sp, #4]
   20630:	9602      	str	r6, [sp, #8]
   20632:	f10d 0316 	add.w	r3, sp, #22
   20636:	f8cd 9000 	str.w	r9, [sp]
   2063a:	4628      	mov	r0, r5
   2063c:	f7fb fad2 	bl	1bbe4 <net_pkt_write>
			     &hdr->flags, ALLOC_TIMEOUT);
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->wnd), hdr->wnd,
   20640:	f104 030e 	add.w	r3, r4, #14
   20644:	4601      	mov	r1, r0
   20646:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   2064a:	9301      	str	r3, [sp, #4]
   2064c:	9602      	str	r6, [sp, #8]
   2064e:	f10d 0316 	add.w	r3, sp, #22
   20652:	9700      	str	r7, [sp, #0]
   20654:	4628      	mov	r0, r5
   20656:	f7fb fac5 	bl	1bbe4 <net_pkt_write>
			     ALLOC_TIMEOUT);
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
			     (u8_t *)&hdr->chksum, ALLOC_TIMEOUT);
   2065a:	f104 0310 	add.w	r3, r4, #16
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   2065e:	4601      	mov	r1, r0
   20660:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   20664:	9301      	str	r3, [sp, #4]
   20666:	9602      	str	r6, [sp, #8]
   20668:	f10d 0316 	add.w	r3, sp, #22
   2066c:	9700      	str	r7, [sp, #0]
   2066e:	4628      	mov	r0, r5
   20670:	f7fb fab8 	bl	1bbe4 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->urg), hdr->urg,
   20674:	f104 0312 	add.w	r3, r4, #18
   20678:	9301      	str	r3, [sp, #4]
   2067a:	4601      	mov	r1, r0
   2067c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   20680:	9602      	str	r6, [sp, #8]
   20682:	9700      	str	r7, [sp, #0]
   20684:	f10d 0316 	add.w	r3, sp, #22
   20688:	4628      	mov	r0, r5
   2068a:	f7fb faab 	bl	1bbe4 <net_pkt_write>
	if (!frag) {
		NET_ASSERT(frag);
		return NULL;
	}

	return hdr;
   2068e:	2800      	cmp	r0, #0
   20690:	bf08      	it	eq
   20692:	4644      	moveq	r4, r8
}
   20694:	4620      	mov	r0, r4
   20696:	b007      	add	sp, #28
   20698:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0002069c <net_tcp_get_chksum>:

u16_t net_tcp_get_chksum(struct net_pkt *pkt, struct net_buf *frag)
{
   2069c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2069e:	4604      	mov	r4, r0
   206a0:	460e      	mov	r6, r1
	struct net_tcp_hdr *hdr;
	u16_t chksum;
	u16_t pos;

	hdr = net_pkt_tcp_data(pkt);
   206a2:	f7fb fb73 	bl	1bd8c <net_pkt_tcp_data>
   206a6:	4605      	mov	r5, r0
	if (net_tcp_header_fits(pkt, hdr)) {
   206a8:	4601      	mov	r1, r0
   206aa:	4620      	mov	r0, r4
   206ac:	f7ff fb42 	bl	1fd34 <net_tcp_header_fits>
   206b0:	b110      	cbz	r0, 206b8 <net_tcp_get_chksum+0x1c>
		return hdr->chksum;
   206b2:	8a28      	ldrh	r0, [r5, #16]
			     1 + 1 + 2 /* offset + flags + wnd */,
			     &pos, sizeof(chksum), (u8_t *)&chksum);
	NET_ASSERT(frag);

	return chksum;
}
   206b4:	b004      	add	sp, #16
   206b6:	bd70      	pop	{r4, r5, r6, pc}
			     net_pkt_ipv6_ext_len(pkt) +
   206b8:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
			     net_pkt_ip_hdr_len(pkt) +
   206bc:	f894 1035 	ldrb.w	r1, [r4, #53]	; 0x35
	frag = net_frag_read(frag,
   206c0:	4419      	add	r1, r3
   206c2:	ab03      	add	r3, sp, #12
   206c4:	9300      	str	r3, [sp, #0]
   206c6:	f10d 020e 	add.w	r2, sp, #14
   206ca:	2302      	movs	r3, #2
   206cc:	3110      	adds	r1, #16
   206ce:	4630      	mov	r0, r6
   206d0:	f7fb fa34 	bl	1bb3c <net_frag_read>
	return chksum;
   206d4:	f8bd 000c 	ldrh.w	r0, [sp, #12]
   206d8:	e7ec      	b.n	206b4 <net_tcp_get_chksum+0x18>

000206da <net_tcp_set_chksum>:

struct net_buf *net_tcp_set_chksum(struct net_pkt *pkt, struct net_buf *frag)
{
   206da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   206de:	b086      	sub	sp, #24
	struct net_tcp_hdr *hdr;
	u16_t chksum = 0;
   206e0:	2700      	movs	r7, #0
{
   206e2:	4604      	mov	r4, r0
   206e4:	460e      	mov	r6, r1
	u16_t chksum = 0;
   206e6:	f8ad 7014 	strh.w	r7, [sp, #20]
	u16_t pos;

	hdr = net_pkt_tcp_data(pkt);
   206ea:	f7fb fb4f 	bl	1bd8c <net_pkt_tcp_data>
   206ee:	4605      	mov	r5, r0
	if (net_tcp_header_fits(pkt, hdr)) {
   206f0:	4601      	mov	r1, r0
   206f2:	4620      	mov	r0, r4
   206f4:	f7ff fb1e 	bl	1fd34 <net_tcp_header_fits>
   206f8:	b158      	cbz	r0, 20712 <net_tcp_set_chksum+0x38>
		hdr->chksum = 0;
   206fa:	742f      	strb	r7, [r5, #16]
   206fc:	746f      	strb	r7, [r5, #17]
}

static inline u16_t net_calc_chksum_tcp(struct net_pkt *pkt)
{
	return net_calc_chksum(pkt, IPPROTO_TCP);
   206fe:	2106      	movs	r1, #6
   20700:	4620      	mov	r0, r4
   20702:	f7fb fca4 	bl	1c04e <net_calc_chksum>
		hdr->chksum = ~net_calc_chksum_tcp(pkt);
   20706:	43c0      	mvns	r0, r0
   20708:	8228      	strh	r0, [r5, #16]
			     (u8_t *)&chksum, ALLOC_TIMEOUT);

	NET_ASSERT(frag);

	return frag;
}
   2070a:	4630      	mov	r0, r6
   2070c:	b006      	add	sp, #24
   2070e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			     net_pkt_ipv6_ext_len(pkt) +
   20712:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
			     net_pkt_ip_hdr_len(pkt) +
   20716:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
	frag = net_pkt_write(pkt, frag,
   2071a:	f44f 78fa 	mov.w	r8, #500	; 0x1f4
   2071e:	441a      	add	r2, r3
   20720:	ad05      	add	r5, sp, #20
   20722:	2702      	movs	r7, #2
   20724:	f10d 0316 	add.w	r3, sp, #22
   20728:	3210      	adds	r2, #16
   2072a:	4631      	mov	r1, r6
   2072c:	f8cd 8008 	str.w	r8, [sp, #8]
   20730:	9501      	str	r5, [sp, #4]
   20732:	9700      	str	r7, [sp, #0]
   20734:	4620      	mov	r0, r4
   20736:	f7fb fa55 	bl	1bbe4 <net_pkt_write>
   2073a:	2106      	movs	r1, #6
   2073c:	4606      	mov	r6, r0
   2073e:	4620      	mov	r0, r4
   20740:	f7fb fc85 	bl	1c04e <net_calc_chksum>
	frag = net_pkt_write(pkt, frag, pos - 2, &pos, sizeof(chksum),
   20744:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   20748:	f8cd 8008 	str.w	r8, [sp, #8]
	chksum = ~net_calc_chksum_tcp(pkt);
   2074c:	43c0      	mvns	r0, r0
	frag = net_pkt_write(pkt, frag, pos - 2, &pos, sizeof(chksum),
   2074e:	3a02      	subs	r2, #2
	chksum = ~net_calc_chksum_tcp(pkt);
   20750:	f8ad 0014 	strh.w	r0, [sp, #20]
	frag = net_pkt_write(pkt, frag, pos - 2, &pos, sizeof(chksum),
   20754:	4631      	mov	r1, r6
   20756:	9501      	str	r5, [sp, #4]
   20758:	9700      	str	r7, [sp, #0]
   2075a:	f10d 0316 	add.w	r3, sp, #22
   2075e:	b292      	uxth	r2, r2
   20760:	4620      	mov	r0, r4
   20762:	f7fb fa3f 	bl	1bbe4 <net_pkt_write>
   20766:	4606      	mov	r6, r0
	return frag;
   20768:	e7cf      	b.n	2070a <net_tcp_set_chksum+0x30>

0002076a <net_tcp_send_pkt>:
{
   2076a:	b570      	push	{r4, r5, r6, lr}
   2076c:	b086      	sub	sp, #24
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   2076e:	a901      	add	r1, sp, #4
{
   20770:	4605      	mov	r5, r0
   20772:	68c6      	ldr	r6, [r0, #12]
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   20774:	f7ff fdee 	bl	20354 <net_tcp_get_hdr>
	if (!tcp_hdr) {
   20778:	4604      	mov	r4, r0
   2077a:	2800      	cmp	r0, #0
   2077c:	d060      	beq.n	20840 <net_tcp_send_pkt+0xd6>
	if (sys_get_be32(tcp_hdr->ack) != ctx->tcp->send_ack) {
   2077e:	3008      	adds	r0, #8
   20780:	f7ff facd 	bl	1fd1e <sys_get_be32>
   20784:	6e33      	ldr	r3, [r6, #96]	; 0x60
   20786:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   2078a:	4298      	cmp	r0, r3
   2078c:	d01a      	beq.n	207c4 <net_tcp_send_pkt+0x5a>
	sys_put_be16(val >> 16, dst);
   2078e:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val >> 8;
   20790:	0a11      	lsrs	r1, r2, #8
	dst[1] = val;
   20792:	7262      	strb	r2, [r4, #9]
	dst[0] = val >> 8;
   20794:	f3c3 2207 	ubfx	r2, r3, #8, #8
   20798:	72a2      	strb	r2, [r4, #10]
   2079a:	7221      	strb	r1, [r4, #8]
	dst[1] = val;
   2079c:	72e3      	strb	r3, [r4, #11]
		calc_chksum = true;
   2079e:	2201      	movs	r2, #1
	if (ctx->tcp->sent_ack != ctx->tcp->send_ack &&
   207a0:	6e33      	ldr	r3, [r6, #96]	; 0x60
   207a2:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
   207a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   207aa:	4299      	cmp	r1, r3
   207ac:	d00c      	beq.n	207c8 <net_tcp_send_pkt+0x5e>
		(tcp_hdr->flags & NET_TCP_ACK) == 0) {
   207ae:	7b63      	ldrb	r3, [r4, #13]
	if (ctx->tcp->sent_ack != ctx->tcp->send_ack &&
   207b0:	06d9      	lsls	r1, r3, #27
   207b2:	d409      	bmi.n	207c8 <net_tcp_send_pkt+0x5e>
		tcp_hdr->flags |= NET_TCP_ACK;
   207b4:	f043 0310 	orr.w	r3, r3, #16
   207b8:	7363      	strb	r3, [r4, #13]
		net_tcp_set_chksum(pkt, pkt->frags);
   207ba:	68a9      	ldr	r1, [r5, #8]
   207bc:	4628      	mov	r0, r5
   207be:	f7ff ff8c 	bl	206da <net_tcp_set_chksum>
   207c2:	e003      	b.n	207cc <net_tcp_send_pkt+0x62>
	bool calc_chksum = false;
   207c4:	2200      	movs	r2, #0
   207c6:	e7eb      	b.n	207a0 <net_tcp_send_pkt+0x36>
	if (calc_chksum) {
   207c8:	2a00      	cmp	r2, #0
   207ca:	d1f6      	bne.n	207ba <net_tcp_send_pkt+0x50>
	if (tcp_hdr->flags & NET_TCP_FIN) {
   207cc:	7b63      	ldrb	r3, [r4, #13]
   207ce:	07db      	lsls	r3, r3, #31
		ctx->tcp->fin_sent = 1;
   207d0:	bf41      	itttt	mi
   207d2:	6e32      	ldrmi	r2, [r6, #96]	; 0x60
   207d4:	f892 30be 	ldrbmi.w	r3, [r2, #190]	; 0xbe
   207d8:	f043 0302 	orrmi.w	r3, r3, #2
   207dc:	f882 30be 	strbmi.w	r3, [r2, #190]	; 0xbe
	ctx->tcp->sent_ack = ctx->tcp->send_ack;
   207e0:	6e33      	ldr	r3, [r6, #96]	; 0x60
   207e2:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
   207e6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	net_tcp_set_hdr(pkt, tcp_hdr);
   207ea:	4621      	mov	r1, r4
   207ec:	4628      	mov	r0, r5
   207ee:	f7ff fec4 	bl	2057a <net_tcp_set_hdr>
	return pkt->family;
   207f2:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
	if (is_6lo_technology(pkt)) {
   207f6:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   207fa:	2b0a      	cmp	r3, #10
   207fc:	d111      	bne.n	20822 <net_tcp_send_pkt+0xb8>
   207fe:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
   20802:	2b02      	cmp	r3, #2
   20804:	d10d      	bne.n	20822 <net_tcp_send_pkt+0xb8>
   20806:	6e33      	ldr	r3, [r6, #96]	; 0x60
   20808:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
		SYS_SLIST_FOR_EACH_CONTAINER(&ctx->tcp->sent_list,
   2080c:	b100      	cbz	r0, 20810 <net_tcp_send_pkt+0xa6>
   2080e:	3838      	subs	r0, #56	; 0x38
   20810:	b138      	cbz	r0, 20822 <net_tcp_send_pkt+0xb8>
			if (check_pkt == pkt) {
   20812:	42a8      	cmp	r0, r5
   20814:	d017      	beq.n	20846 <net_tcp_send_pkt+0xdc>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   20816:	f110 0f38 	cmn.w	r0, #56	; 0x38
   2081a:	d002      	beq.n	20822 <net_tcp_send_pkt+0xb8>
	return node->next;
   2081c:	6b80      	ldr	r0, [r0, #56]	; 0x38
		SYS_SLIST_FOR_EACH_CONTAINER(&ctx->tcp->sent_list,
   2081e:	2800      	cmp	r0, #0
   20820:	d1f5      	bne.n	2080e <net_tcp_send_pkt+0xa4>
	return net_send_data(pkt);
   20822:	4628      	mov	r0, r5
   20824:	f7f9 fec6 	bl	1a5b4 <net_send_data>
   20828:	4604      	mov	r4, r0
   2082a:	e006      	b.n	2083a <net_tcp_send_pkt+0xd0>
			ret = net_send_data(new_pkt);
   2082c:	f7f9 fec2 	bl	1a5b4 <net_send_data>
			if (ret < 0) {
   20830:	1e04      	subs	r4, r0, #0
   20832:	da02      	bge.n	2083a <net_tcp_send_pkt+0xd0>
				net_pkt_unref(new_pkt);
   20834:	4628      	mov	r0, r5
   20836:	f7fb f826 	bl	1b886 <net_pkt_unref>
}
   2083a:	4620      	mov	r0, r4
   2083c:	b006      	add	sp, #24
   2083e:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   20840:	f06f 0423 	mvn.w	r4, #35	; 0x23
   20844:	e7f9      	b.n	2083a <net_tcp_send_pkt+0xd0>
			new_pkt = net_pkt_clone(pkt, ALLOC_TIMEOUT);
   20846:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   2084a:	f7fb fab1 	bl	1bdb0 <net_pkt_clone>
			if (!new_pkt) {
   2084e:	4605      	mov	r5, r0
   20850:	2800      	cmp	r0, #0
   20852:	d1eb      	bne.n	2082c <net_tcp_send_pkt+0xc2>
				return -ENOMEM;
   20854:	f06f 040b 	mvn.w	r4, #11
   20858:	e7ef      	b.n	2083a <net_tcp_send_pkt+0xd0>
	...

0002085c <tcp_retry_expired>:
	if (!sys_slist_is_empty(&tcp->sent_list)) {
   2085c:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   2085e:	b570      	push	{r4, r5, r6, lr}
   20860:	4604      	mov	r4, r0
	if (!sys_slist_is_empty(&tcp->sent_list)) {
   20862:	2b00      	cmp	r3, #0
   20864:	d052      	beq.n	2090c <tcp_retry_expired+0xb0>
		tcp->retry_timeout_shift++;
   20866:	f890 2064 	ldrb.w	r2, [r0, #100]	; 0x64
   2086a:	1c53      	adds	r3, r2, #1
   2086c:	f003 031f 	and.w	r3, r3, #31
   20870:	f363 0204 	bfi	r2, r3, #0, #5
		if (tcp->retry_timeout_shift > CONFIG_NET_TCP_RETRY_COUNT) {
   20874:	2b09      	cmp	r3, #9
		tcp->retry_timeout_shift++;
   20876:	f880 2064 	strb.w	r2, [r0, #100]	; 0x64
		if (tcp->retry_timeout_shift > CONFIG_NET_TCP_RETRY_COUNT) {
   2087a:	d90f      	bls.n	2089c <tcp_retry_expired+0x40>
	struct net_context *ctx = tcp->context;
   2087c:	f850 5c58 	ldr.w	r5, [r0, #-88]
	if (ctx->recv_cb) {
   20880:	6b2e      	ldr	r6, [r5, #48]	; 0x30
   20882:	b136      	cbz	r6, 20892 <tcp_retry_expired+0x36>
		ctx->recv_cb(ctx, NULL, -ECONNRESET, tcp->recv_user_data);
   20884:	f850 3c54 	ldr.w	r3, [r0, #-84]
   20888:	f06f 0235 	mvn.w	r2, #53	; 0x35
   2088c:	2100      	movs	r1, #0
   2088e:	4628      	mov	r0, r5
   20890:	47b0      	blx	r6
	net_context_unref(ctx);
   20892:	4628      	mov	r0, r5
}
   20894:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	net_context_unref(ctx);
   20898:	f7f9 b85c 	b.w	19954 <net_context_unref>
   2089c:	22c8      	movs	r2, #200	; 0xc8
   2089e:	409a      	lsls	r2, r3
   208a0:	4601      	mov	r1, r0
   208a2:	481b      	ldr	r0, [pc, #108]	; (20910 <tcp_retry_expired+0xb4>)
   208a4:	f001 fd26 	bl	222f4 <k_delayed_work_submit_to_queue>
   208a8:	6d22      	ldr	r2, [r4, #80]	; 0x50
	return pkt->sent_or_eof;
   208aa:	7913      	ldrb	r3, [r2, #4]
		if (net_pkt_sent(pkt)) {
   208ac:	07d9      	lsls	r1, r3, #31
		pkt = CONTAINER_OF(sys_slist_peek_head(&tcp->sent_list),
   208ae:	f1a2 0438 	sub.w	r4, r2, #56	; 0x38
		if (net_pkt_sent(pkt)) {
   208b2:	d511      	bpl.n	208d8 <tcp_retry_expired+0x7c>
			do_ref_if_needed(tcp, pkt);
   208b4:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   208b8:	2b0a      	cmp	r3, #10
   208ba:	d103      	bne.n	208c4 <tcp_retry_expired+0x68>
   208bc:	f812 3c0b 	ldrb.w	r3, [r2, #-11]
   208c0:	2b02      	cmp	r3, #2
   208c2:	d003      	beq.n	208cc <tcp_retry_expired+0x70>
   208c4:	4620      	mov	r0, r4
   208c6:	f7fa ffd3 	bl	1b870 <net_pkt_ref>
   208ca:	4604      	mov	r4, r0
	pkt->sent_or_eof = sent;
   208cc:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   208d0:	f36f 0300 	bfc	r3, #0, #1
   208d4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	pkt->pkt_queued = send;
   208d8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   208dc:	f043 0302 	orr.w	r3, r3, #2
   208e0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		if (net_tcp_send_pkt(pkt) < 0 && !is_6lo_technology(pkt)) {
   208e4:	4620      	mov	r0, r4
   208e6:	f7ff ff40 	bl	2076a <net_tcp_send_pkt>
   208ea:	2800      	cmp	r0, #0
   208ec:	da0e      	bge.n	2090c <tcp_retry_expired+0xb0>
	return pkt->family;
   208ee:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   208f2:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   208f6:	2b0a      	cmp	r3, #10
   208f8:	d103      	bne.n	20902 <tcp_retry_expired+0xa6>
   208fa:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   208fe:	2b02      	cmp	r3, #2
   20900:	d004      	beq.n	2090c <tcp_retry_expired+0xb0>
			net_pkt_unref(pkt);
   20902:	4620      	mov	r0, r4
}
   20904:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_pkt_unref(pkt);
   20908:	f7fa bfbd 	b.w	1b886 <net_pkt_unref>
   2090c:	bd70      	pop	{r4, r5, r6, pc}
   2090e:	bf00      	nop
   20910:	20003340 	.word	0x20003340

00020914 <net_tcp_send_data>:
{
   20914:	6e03      	ldr	r3, [r0, #96]	; 0x60
   20916:	b510      	push	{r4, lr}
   20918:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
	SYS_SLIST_FOR_EACH_CONTAINER(&context->tcp->sent_list, pkt, sent_list) {
   2091c:	b10c      	cbz	r4, 20922 <net_tcp_send_data+0xe>
   2091e:	3c38      	subs	r4, #56	; 0x38
   20920:	b90c      	cbnz	r4, 20926 <net_tcp_send_data+0x12>
}
   20922:	2000      	movs	r0, #0
   20924:	bd10      	pop	{r4, pc}
	return pkt->pkt_queued;
   20926:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
		if (net_pkt_queued(pkt)) {
   2092a:	079a      	lsls	r2, r3, #30
   2092c:	d419      	bmi.n	20962 <net_tcp_send_data+0x4e>
		if (!net_pkt_sent(pkt)) {
   2092e:	07db      	lsls	r3, r3, #31
   20930:	d417      	bmi.n	20962 <net_tcp_send_data+0x4e>
			ret = net_tcp_send_pkt(pkt);
   20932:	4620      	mov	r0, r4
   20934:	f7ff ff19 	bl	2076a <net_tcp_send_pkt>
			if (ret < 0 && !is_6lo_technology(pkt)) {
   20938:	2800      	cmp	r0, #0
   2093a:	da0c      	bge.n	20956 <net_tcp_send_data+0x42>
	return pkt->family;
   2093c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   20940:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   20944:	2b0a      	cmp	r3, #10
   20946:	d103      	bne.n	20950 <net_tcp_send_data+0x3c>
   20948:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   2094c:	2b02      	cmp	r3, #2
   2094e:	d002      	beq.n	20956 <net_tcp_send_data+0x42>
				net_pkt_unref(pkt);
   20950:	4620      	mov	r0, r4
   20952:	f7fa ff98 	bl	1b886 <net_pkt_unref>
	pkt->pkt_queued = send;
   20956:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   2095a:	f043 0302 	orr.w	r3, r3, #2
   2095e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   20962:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   20964:	e7da      	b.n	2091c <net_tcp_send_data+0x8>

00020966 <net_tcp_parse_opts>:

int net_tcp_parse_opts(struct net_pkt *pkt, int opt_totlen,
		       struct net_tcp_options *opts)
{
   20966:	b5f0      	push	{r4, r5, r6, r7, lr}
   20968:	4615      	mov	r5, r2
	struct net_buf *frag = pkt->frags;
	u16_t pos = net_pkt_ip_hdr_len(pkt)
   2096a:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
		  + net_pkt_ipv6_ext_len(pkt)
   2096e:	f890 203f 	ldrb.w	r2, [r0, #63]	; 0x3f
	struct net_buf *frag = pkt->frags;
   20972:	6886      	ldr	r6, [r0, #8]
		  + sizeof(struct net_tcp_hdr);
   20974:	4413      	add	r3, r2
{
   20976:	b085      	sub	sp, #20
		  + sizeof(struct net_tcp_hdr);
   20978:	3314      	adds	r3, #20
{
   2097a:	460c      	mov	r4, r1
	u16_t pos = net_pkt_ip_hdr_len(pkt)
   2097c:	f8ad 300e 	strh.w	r3, [sp, #14]
	u8_t opt, optlen;

	/* TODO: this should be done for each TCP pkt, on reception */
	if (pos + opt_totlen > net_pkt_get_len(pkt)) {
   20980:	4632      	mov	r2, r6
   20982:	440b      	add	r3, r1
	size_t bytes = 0;
   20984:	2100      	movs	r1, #0
	while (buf) {
   20986:	b99a      	cbnz	r2, 209b0 <net_tcp_parse_opts+0x4a>
   20988:	428b      	cmp	r3, r1
   2098a:	d815      	bhi.n	209b8 <net_tcp_parse_opts+0x52>
			(int)net_pkt_get_len(pkt), pos + opt_totlen);
		return -EINVAL;
	}

	while (opt_totlen) {
		frag = net_frag_read(frag, pos, &pos, sizeof(opt), &opt);
   2098c:	af03      	add	r7, sp, #12
	while (opt_totlen) {
   2098e:	b16c      	cbz	r4, 209ac <net_tcp_parse_opts+0x46>
		frag = net_frag_read(frag, pos, &pos, sizeof(opt), &opt);
   20990:	2301      	movs	r3, #1
   20992:	f10d 020e 	add.w	r2, sp, #14
   20996:	4630      	mov	r0, r6
   20998:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   2099c:	9700      	str	r7, [sp, #0]
   2099e:	f7fb f8cd 	bl	1bb3c <net_frag_read>
		/* "Options 0 and 1 are exactly one octet which is their
		 * kind field.  All other options have their one octet
		 * kind field, followed by a one octet length field,
		 * followed by length-2 octets of option data."
		 */
		if (opt == NET_TCP_END_OPT) {
   209a2:	f89d 200c 	ldrb.w	r2, [sp, #12]
		frag = net_frag_read(frag, pos, &pos, sizeof(opt), &opt);
   209a6:	4606      	mov	r6, r0
		opt_totlen--;
   209a8:	1e63      	subs	r3, r4, #1
		if (opt == NET_TCP_END_OPT) {
   209aa:	b94a      	cbnz	r2, 209c0 <net_tcp_parse_opts+0x5a>
		}

		opt_totlen -= optlen;
	}

	return 0;
   209ac:	2000      	movs	r0, #0
   209ae:	e005      	b.n	209bc <net_tcp_parse_opts+0x56>
		bytes += buf->len;
   209b0:	8990      	ldrh	r0, [r2, #12]
		buf = buf->frags;
   209b2:	6812      	ldr	r2, [r2, #0]
		bytes += buf->len;
   209b4:	4401      	add	r1, r0
   209b6:	e7e6      	b.n	20986 <net_tcp_parse_opts+0x20>
		return -EINVAL;
   209b8:	f06f 0015 	mvn.w	r0, #21

error:
	NET_ERR("Invalid TCP opt: %d len: %d", opt, optlen);
	return -EINVAL;
}
   209bc:	b005      	add	sp, #20
   209be:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (opt == NET_TCP_NOP_OPT) {
   209c0:	2a01      	cmp	r2, #1
   209c2:	d032      	beq.n	20a2a <net_tcp_parse_opts+0xc4>
		if (!opt_totlen) {
   209c4:	2b00      	cmp	r3, #0
   209c6:	d0f7      	beq.n	209b8 <net_tcp_parse_opts+0x52>
		frag = net_frag_read(frag, pos, &pos, sizeof(optlen), &optlen);
   209c8:	f10d 030d 	add.w	r3, sp, #13
   209cc:	9300      	str	r3, [sp, #0]
   209ce:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   209d2:	2301      	movs	r3, #1
   209d4:	f10d 020e 	add.w	r2, sp, #14
   209d8:	f7fb f8b0 	bl	1bb3c <net_frag_read>
		if (optlen < 2) {
   209dc:	f89d 300d 	ldrb.w	r3, [sp, #13]
   209e0:	2b01      	cmp	r3, #1
		opt_totlen--;
   209e2:	f1a4 0402 	sub.w	r4, r4, #2
		if (optlen < 2) {
   209e6:	d9e7      	bls.n	209b8 <net_tcp_parse_opts+0x52>
		optlen -= 2;
   209e8:	3b02      	subs	r3, #2
   209ea:	b2db      	uxtb	r3, r3
		if (opt_totlen < optlen) {
   209ec:	429c      	cmp	r4, r3
		optlen -= 2;
   209ee:	f88d 300d 	strb.w	r3, [sp, #13]
		if (opt_totlen < optlen) {
   209f2:	dbe1      	blt.n	209b8 <net_tcp_parse_opts+0x52>
		switch (opt) {
   209f4:	f89d 200c 	ldrb.w	r2, [sp, #12]
   209f8:	2a02      	cmp	r2, #2
   209fa:	d10d      	bne.n	20a18 <net_tcp_parse_opts+0xb2>
			if (optlen != 2) {
   209fc:	2b02      	cmp	r3, #2
   209fe:	d1db      	bne.n	209b8 <net_tcp_parse_opts+0x52>
			frag = net_frag_read_be16(frag, pos, &pos,
   20a00:	462b      	mov	r3, r5
   20a02:	f10d 020e 	add.w	r2, sp, #14
   20a06:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   20a0a:	f7fb f8cf 	bl	1bbac <net_frag_read_be16>
		opt_totlen -= optlen;
   20a0e:	f89d 300d 	ldrb.w	r3, [sp, #13]
	return net_frag_read(frag, offset, pos, len, NULL);
   20a12:	4606      	mov	r6, r0
   20a14:	1ae4      	subs	r4, r4, r3
   20a16:	e7ba      	b.n	2098e <net_tcp_parse_opts+0x28>
   20a18:	2200      	movs	r2, #0
   20a1a:	9200      	str	r2, [sp, #0]
   20a1c:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   20a20:	f10d 020e 	add.w	r2, sp, #14
   20a24:	f7fb f88a 	bl	1bb3c <net_frag_read>
   20a28:	e7f1      	b.n	20a0e <net_tcp_parse_opts+0xa8>
		opt_totlen--;
   20a2a:	461c      	mov	r4, r3
   20a2c:	e7af      	b.n	2098e <net_tcp_parse_opts+0x28>

00020a2e <net_udp_header_fits>:
{
   20a2e:	b510      	push	{r4, lr}
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   20a30:	2208      	movs	r2, #8
{
   20a32:	460c      	mov	r4, r1
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   20a34:	f7fb fb5e 	bl	1c0f4 <net_header_fits>
   20a38:	2800      	cmp	r0, #0
}
   20a3a:	bf14      	ite	ne
   20a3c:	4620      	movne	r0, r4
   20a3e:	2000      	moveq	r0, #0
   20a40:	bd10      	pop	{r4, pc}

00020a42 <net_udp_insert_raw>:

struct net_pkt *net_udp_insert_raw(struct net_pkt *pkt,
				   u16_t offset,
				   u16_t src_port,
				   u16_t dst_port)
{
   20a42:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   20a46:	f8ad 2006 	strh.w	r2, [sp, #6]
	struct net_buf *frag, *prev, *udp;
	u16_t pos;

	frag = net_frag_get_pos(pkt, offset, &pos);
   20a4a:	f10d 020e 	add.w	r2, sp, #14
{
   20a4e:	f8ad 3004 	strh.w	r3, [sp, #4]
   20a52:	4604      	mov	r4, r0
	frag = net_frag_get_pos(pkt, offset, &pos);
   20a54:	f7fb f959 	bl	1bd0a <net_frag_get_pos>
   20a58:	f8bd 300e 	ldrh.w	r3, [sp, #14]
	if (!frag && pos == 0xffff) {
   20a5c:	b940      	cbnz	r0, 20a70 <net_udp_insert_raw+0x2e>
   20a5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   20a62:	4293      	cmp	r3, r2
   20a64:	d106      	bne.n	20a74 <net_udp_insert_raw+0x32>
		NET_DBG("Offset %d out of pkt len %zd",
			offset, net_pkt_get_len(pkt));
		return NULL;
   20a66:	2400      	movs	r4, #0
	return pkt;

fail:
	NET_DBG("Cannot insert UDP header into %p", pkt);
	return NULL;
}
   20a68:	4620      	mov	r0, r4
   20a6a:	b004      	add	sp, #16
   20a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (frag && pos != 0) {
   20a70:	2b00      	cmp	r3, #0
   20a72:	d1f8      	bne.n	20a66 <net_udp_insert_raw+0x24>
	if (pkt->frags != frag) {
   20a74:	68a5      	ldr	r5, [r4, #8]
   20a76:	42a8      	cmp	r0, r5
   20a78:	d143      	bne.n	20b02 <net_udp_insert_raw+0xc0>
	if (!prev) {
   20a7a:	2d00      	cmp	r5, #0
   20a7c:	d0f3      	beq.n	20a66 <net_udp_insert_raw+0x24>
	udp = net_pkt_get_frag(pkt, PKT_WAIT_TIME);
   20a7e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   20a82:	4620      	mov	r0, r4
   20a84:	f7fa fe9a 	bl	1b7bc <net_pkt_get_frag>
	if (!udp) {
   20a88:	4680      	mov	r8, r0
   20a8a:	2800      	cmp	r0, #0
   20a8c:	d0eb      	beq.n	20a66 <net_udp_insert_raw+0x24>
	net_buf_add_mem(udp, &src_port, sizeof(src_port));
   20a8e:	f100 0708 	add.w	r7, r0, #8
   20a92:	2202      	movs	r2, #2
   20a94:	f10d 0106 	add.w	r1, sp, #6
   20a98:	4638      	mov	r0, r7
   20a9a:	f7f8 fc89 	bl	193b0 <net_buf_simple_add_mem>
	net_buf_add_mem(udp, &dst_port, sizeof(dst_port));
   20a9e:	2202      	movs	r2, #2
   20aa0:	a901      	add	r1, sp, #4
   20aa2:	4638      	mov	r0, r7
   20aa4:	f7f8 fc84 	bl	193b0 <net_buf_simple_add_mem>
   20aa8:	68a6      	ldr	r6, [r4, #8]
	size_t bytes = 0;
   20aaa:	2300      	movs	r3, #0
	while (buf) {
   20aac:	bb6e      	cbnz	r6, 20b0a <net_udp_insert_raw+0xc8>
	net_buf_add_be16(udp, net_pkt_get_len(pkt) -
   20aae:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
   20ab2:	f894 1035 	ldrb.w	r1, [r4, #53]	; 0x35
   20ab6:	4411      	add	r1, r2
   20ab8:	f1c1 0108 	rsb	r1, r1, #8
   20abc:	4419      	add	r1, r3
   20abe:	b289      	uxth	r1, r1
   20ac0:	4638      	mov	r0, r7
   20ac2:	f7f8 fc95 	bl	193f0 <net_buf_simple_add_be16>
	net_buf_add_be16(udp, 0); /* chksum */
   20ac6:	4631      	mov	r1, r6
   20ac8:	4638      	mov	r0, r7
   20aca:	f7f8 fc91 	bl	193f0 <net_buf_simple_add_be16>
	net_buf_frag_insert(prev, udp);
   20ace:	4641      	mov	r1, r8
   20ad0:	4628      	mov	r0, r5
   20ad2:	f7f8 fc40 	bl	19356 <net_buf_frag_insert>
	frag = net_frag_get_pos(pkt, net_pkt_ip_hdr_len(pkt) +
   20ad6:	f894 1035 	ldrb.w	r1, [r4, #53]	; 0x35
				net_pkt_ipv6_ext_len(pkt) +
   20ada:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
	frag = net_frag_get_pos(pkt, net_pkt_ip_hdr_len(pkt) +
   20ade:	4419      	add	r1, r3
   20ae0:	f10d 020e 	add.w	r2, sp, #14
   20ae4:	3108      	adds	r1, #8
   20ae6:	4620      	mov	r0, r4
   20ae8:	f7fb f90f 	bl	1bd0a <net_frag_get_pos>
	if (frag) {
   20aec:	2800      	cmp	r0, #0
   20aee:	d0bb      	beq.n	20a68 <net_udp_insert_raw+0x26>
		net_pkt_set_appdata(pkt, frag->data + pos);
   20af0:	6883      	ldr	r3, [r0, #8]
   20af2:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   20af6:	4413      	add	r3, r2
	pkt->appdata = data;
   20af8:	61a3      	str	r3, [r4, #24]
   20afa:	e7b5      	b.n	20a68 <net_udp_insert_raw+0x26>
			if (tmp->frags == frag) {
   20afc:	4298      	cmp	r0, r3
   20afe:	d0be      	beq.n	20a7e <net_udp_insert_raw+0x3c>
   20b00:	461d      	mov	r5, r3
		while (tmp->frags) {
   20b02:	682b      	ldr	r3, [r5, #0]
   20b04:	2b00      	cmp	r3, #0
   20b06:	d1f9      	bne.n	20afc <net_udp_insert_raw+0xba>
   20b08:	e7ad      	b.n	20a66 <net_udp_insert_raw+0x24>
		bytes += buf->len;
   20b0a:	89b2      	ldrh	r2, [r6, #12]
		buf = buf->frags;
   20b0c:	6836      	ldr	r6, [r6, #0]
		bytes += buf->len;
   20b0e:	4413      	add	r3, r2
   20b10:	e7cc      	b.n	20aac <net_udp_insert_raw+0x6a>

00020b12 <net_udp_set_chksum>:

struct net_buf *net_udp_set_chksum(struct net_pkt *pkt, struct net_buf *frag)
{
   20b12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20b16:	b086      	sub	sp, #24
	struct net_udp_hdr *hdr;
	u16_t chksum = 0;
   20b18:	2700      	movs	r7, #0
{
   20b1a:	4604      	mov	r4, r0
   20b1c:	460e      	mov	r6, r1
	u16_t chksum = 0;
   20b1e:	f8ad 7014 	strh.w	r7, [sp, #20]
	u16_t pos;

	hdr = net_pkt_udp_data(pkt);
   20b22:	f7fb f921 	bl	1bd68 <net_pkt_udp_data>
   20b26:	4605      	mov	r5, r0
	if (net_udp_header_fits(pkt, hdr)) {
   20b28:	4601      	mov	r1, r0
   20b2a:	4620      	mov	r0, r4
   20b2c:	f7ff ff7f 	bl	20a2e <net_udp_header_fits>
   20b30:	b158      	cbz	r0, 20b4a <net_udp_set_chksum+0x38>
		hdr->chksum = 0;
   20b32:	71af      	strb	r7, [r5, #6]
   20b34:	71ef      	strb	r7, [r5, #7]
	return net_calc_chksum(pkt, IPPROTO_UDP);
   20b36:	2111      	movs	r1, #17
   20b38:	4620      	mov	r0, r4
   20b3a:	f7fb fa88 	bl	1c04e <net_calc_chksum>
		hdr->chksum = ~net_calc_chksum_udp(pkt);
   20b3e:	43c0      	mvns	r0, r0
   20b40:	80e8      	strh	r0, [r5, #6]
			     (u8_t *)&chksum, PKT_WAIT_TIME);

	NET_ASSERT(frag);

	return frag;
}
   20b42:	4630      	mov	r0, r6
   20b44:	b006      	add	sp, #24
   20b46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			     net_pkt_ipv6_ext_len(pkt) +
   20b4a:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
			     net_pkt_ip_hdr_len(pkt) +
   20b4e:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
	frag = net_pkt_write(pkt, frag,
   20b52:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   20b56:	441a      	add	r2, r3
   20b58:	ad05      	add	r5, sp, #20
   20b5a:	2702      	movs	r7, #2
   20b5c:	f10d 0316 	add.w	r3, sp, #22
   20b60:	3206      	adds	r2, #6
   20b62:	4631      	mov	r1, r6
   20b64:	f8cd 8008 	str.w	r8, [sp, #8]
   20b68:	9501      	str	r5, [sp, #4]
   20b6a:	9700      	str	r7, [sp, #0]
   20b6c:	4620      	mov	r0, r4
   20b6e:	f7fb f839 	bl	1bbe4 <net_pkt_write>
   20b72:	2111      	movs	r1, #17
   20b74:	4606      	mov	r6, r0
   20b76:	4620      	mov	r0, r4
   20b78:	f7fb fa69 	bl	1c04e <net_calc_chksum>
	frag = net_pkt_write(pkt, frag, pos - 2, &pos, sizeof(chksum),
   20b7c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   20b80:	f8cd 8008 	str.w	r8, [sp, #8]
	chksum = ~net_calc_chksum_udp(pkt);
   20b84:	43c0      	mvns	r0, r0
	frag = net_pkt_write(pkt, frag, pos - 2, &pos, sizeof(chksum),
   20b86:	3a02      	subs	r2, #2
	chksum = ~net_calc_chksum_udp(pkt);
   20b88:	f8ad 0014 	strh.w	r0, [sp, #20]
	frag = net_pkt_write(pkt, frag, pos - 2, &pos, sizeof(chksum),
   20b8c:	4631      	mov	r1, r6
   20b8e:	9501      	str	r5, [sp, #4]
   20b90:	9700      	str	r7, [sp, #0]
   20b92:	f10d 0316 	add.w	r3, sp, #22
   20b96:	b292      	uxth	r2, r2
   20b98:	4620      	mov	r0, r4
   20b9a:	f7fb f823 	bl	1bbe4 <net_pkt_write>
   20b9e:	4606      	mov	r6, r0
	return frag;
   20ba0:	e7cf      	b.n	20b42 <net_udp_set_chksum+0x30>

00020ba2 <net_udp_get_chksum>:

u16_t net_udp_get_chksum(struct net_pkt *pkt, struct net_buf *frag)
{
   20ba2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   20ba4:	4604      	mov	r4, r0
   20ba6:	460e      	mov	r6, r1
	struct net_udp_hdr *hdr;
	u16_t chksum;
	u16_t pos;

	hdr = net_pkt_udp_data(pkt);
   20ba8:	f7fb f8de 	bl	1bd68 <net_pkt_udp_data>
   20bac:	4605      	mov	r5, r0
	if (net_udp_header_fits(pkt, hdr)) {
   20bae:	4601      	mov	r1, r0
   20bb0:	4620      	mov	r0, r4
   20bb2:	f7ff ff3c 	bl	20a2e <net_udp_header_fits>
   20bb6:	b110      	cbz	r0, 20bbe <net_udp_get_chksum+0x1c>
		return hdr->chksum;
   20bb8:	88e8      	ldrh	r0, [r5, #6]
			     2 + 2 + 2 /* src + dst + len */,
			     &pos, sizeof(chksum), (u8_t *)&chksum);
	NET_ASSERT(frag);

	return chksum;
}
   20bba:	b004      	add	sp, #16
   20bbc:	bd70      	pop	{r4, r5, r6, pc}
			     net_pkt_ipv6_ext_len(pkt) +
   20bbe:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
			     net_pkt_ip_hdr_len(pkt) +
   20bc2:	f894 1035 	ldrb.w	r1, [r4, #53]	; 0x35
	frag = net_frag_read(frag,
   20bc6:	4419      	add	r1, r3
   20bc8:	ab03      	add	r3, sp, #12
   20bca:	9300      	str	r3, [sp, #0]
   20bcc:	f10d 020e 	add.w	r2, sp, #14
   20bd0:	2302      	movs	r3, #2
   20bd2:	3106      	adds	r1, #6
   20bd4:	4630      	mov	r0, r6
   20bd6:	f7fa ffb1 	bl	1bb3c <net_frag_read>
	return chksum;
   20bda:	f8bd 000c 	ldrh.w	r0, [sp, #12]
   20bde:	e7ec      	b.n	20bba <net_udp_get_chksum+0x18>

00020be0 <net_udp_get_hdr>:

struct net_udp_hdr *net_udp_get_hdr(struct net_pkt *pkt,
				    struct net_udp_hdr *hdr)
{
   20be0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   20be2:	4605      	mov	r5, r0
   20be4:	460c      	mov	r4, r1
	struct net_udp_hdr *udp_hdr;
	struct net_buf *frag;
	u16_t pos;

	udp_hdr = net_pkt_udp_data(pkt);
   20be6:	f7fb f8bf 	bl	1bd68 <net_pkt_udp_data>
   20bea:	4606      	mov	r6, r0
	if (net_udp_header_fits(pkt, udp_hdr)) {
   20bec:	4601      	mov	r1, r0
   20bee:	4628      	mov	r0, r5
   20bf0:	f7ff ff1d 	bl	20a2e <net_udp_header_fits>
   20bf4:	bb50      	cbnz	r0, 20c4c <net_udp_get_hdr+0x6c>
		return udp_hdr;
	}

	frag = net_frag_read(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   20bf6:	f895 0035 	ldrb.w	r0, [r5, #53]	; 0x35
			     net_pkt_ipv6_ext_len(pkt),
   20bfa:	f895 103f 	ldrb.w	r1, [r5, #63]	; 0x3f
	frag = net_frag_read(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   20bfe:	9400      	str	r4, [sp, #0]
   20c00:	4401      	add	r1, r0
   20c02:	2302      	movs	r3, #2
   20c04:	f10d 020e 	add.w	r2, sp, #14
   20c08:	68a8      	ldr	r0, [r5, #8]
   20c0a:	f7fa ff97 	bl	1bb3c <net_frag_read>
			     &pos, sizeof(hdr->src_port),
			     (u8_t *)&hdr->src_port);
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->dst_port),
			     (u8_t *)&hdr->dst_port);
   20c0e:	1ca3      	adds	r3, r4, #2
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->dst_port),
   20c10:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   20c14:	9300      	str	r3, [sp, #0]
   20c16:	f10d 020e 	add.w	r2, sp, #14
   20c1a:	2302      	movs	r3, #2
   20c1c:	f7fa ff8e 	bl	1bb3c <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->len),
			     (u8_t *)&hdr->len);
   20c20:	1d23      	adds	r3, r4, #4
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->len),
   20c22:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   20c26:	9300      	str	r3, [sp, #0]
   20c28:	f10d 020e 	add.w	r2, sp, #14
   20c2c:	2302      	movs	r3, #2
   20c2e:	f7fa ff85 	bl	1bb3c <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
			     (u8_t *)&hdr->chksum);
   20c32:	1da3      	adds	r3, r4, #6
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   20c34:	9300      	str	r3, [sp, #0]
   20c36:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   20c3a:	2302      	movs	r3, #2
   20c3c:	f10d 020e 	add.w	r2, sp, #14
   20c40:	f7fa ff7c 	bl	1bb3c <net_frag_read>
	if (!frag) {
   20c44:	2800      	cmp	r0, #0
		NET_ASSERT(frag);
		return NULL;
	}

	return hdr;
   20c46:	bf14      	ite	ne
   20c48:	4626      	movne	r6, r4
   20c4a:	2600      	moveq	r6, #0
}
   20c4c:	4630      	mov	r0, r6
   20c4e:	b004      	add	sp, #16
   20c50:	bd70      	pop	{r4, r5, r6, pc}

00020c52 <net_udp_set_hdr>:

struct net_udp_hdr *net_udp_set_hdr(struct net_pkt *pkt,
				    struct net_udp_hdr *hdr)
{
   20c52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20c56:	b086      	sub	sp, #24
   20c58:	4604      	mov	r4, r0
   20c5a:	460d      	mov	r5, r1
	struct net_buf *frag;
	u16_t pos;

	if (net_udp_header_fits(pkt, hdr)) {
   20c5c:	f7ff fee7 	bl	20a2e <net_udp_header_fits>
   20c60:	4680      	mov	r8, r0
   20c62:	2800      	cmp	r0, #0
   20c64:	d135      	bne.n	20cd2 <net_udp_set_hdr+0x80>
		return hdr;
	}

	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   20c66:	f894 1035 	ldrb.w	r1, [r4, #53]	; 0x35
			     net_pkt_ipv6_ext_len(pkt),
   20c6a:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   20c6e:	9501      	str	r5, [sp, #4]
   20c70:	2602      	movs	r6, #2
   20c72:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
   20c76:	440a      	add	r2, r1
   20c78:	f10d 0316 	add.w	r3, sp, #22
   20c7c:	68a1      	ldr	r1, [r4, #8]
   20c7e:	9702      	str	r7, [sp, #8]
   20c80:	9600      	str	r6, [sp, #0]
   20c82:	4620      	mov	r0, r4
   20c84:	f7fa ffae 	bl	1bbe4 <net_pkt_write>
			     &pos, sizeof(hdr->src_port),
			     (u8_t *)&hdr->src_port, PKT_WAIT_TIME);
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->dst_port),
			     (u8_t *)&hdr->dst_port, PKT_WAIT_TIME);
   20c88:	19ab      	adds	r3, r5, r6
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->dst_port),
   20c8a:	4601      	mov	r1, r0
   20c8c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   20c90:	9301      	str	r3, [sp, #4]
   20c92:	9702      	str	r7, [sp, #8]
   20c94:	f10d 0316 	add.w	r3, sp, #22
   20c98:	9600      	str	r6, [sp, #0]
   20c9a:	4620      	mov	r0, r4
   20c9c:	f7fa ffa2 	bl	1bbe4 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->len),
			     (u8_t *)&hdr->len, PKT_WAIT_TIME);
   20ca0:	1d2b      	adds	r3, r5, #4
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->len),
   20ca2:	4601      	mov	r1, r0
   20ca4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   20ca8:	9301      	str	r3, [sp, #4]
   20caa:	9702      	str	r7, [sp, #8]
   20cac:	f10d 0316 	add.w	r3, sp, #22
   20cb0:	9600      	str	r6, [sp, #0]
   20cb2:	4620      	mov	r0, r4
   20cb4:	f7fa ff96 	bl	1bbe4 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
			     (u8_t *)&hdr->chksum, PKT_WAIT_TIME);
   20cb8:	1dab      	adds	r3, r5, #6
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   20cba:	9301      	str	r3, [sp, #4]
   20cbc:	4601      	mov	r1, r0
   20cbe:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   20cc2:	9702      	str	r7, [sp, #8]
   20cc4:	9600      	str	r6, [sp, #0]
   20cc6:	f10d 0316 	add.w	r3, sp, #22
   20cca:	4620      	mov	r0, r4
   20ccc:	f7fa ff8a 	bl	1bbe4 <net_pkt_write>

	if (!frag) {
   20cd0:	b100      	cbz	r0, 20cd4 <net_udp_set_hdr+0x82>
		NET_ASSERT(frag);
		return NULL;
	}

	return hdr;
   20cd2:	46a8      	mov	r8, r5
}
   20cd4:	4640      	mov	r0, r8
   20cd6:	b006      	add	sp, #24
   20cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00020cdc <net_udp_insert>:

struct net_pkt *net_udp_insert(struct net_context *context,
			       struct net_pkt *pkt,
			       u16_t offset,
			       u16_t port)
{
   20cdc:	b410      	push	{r4}
   20cde:	460c      	mov	r4, r1
   20ce0:	4611      	mov	r1, r2
	return net_udp_insert_raw(pkt,
   20ce2:	8942      	ldrh	r2, [r0, #10]
   20ce4:	4620      	mov	r0, r4
				  offset,
				  net_sin((struct sockaddr *)
					  &context->local)->sin_port,
				  port);
}
   20ce6:	bc10      	pop	{r4}
	return net_udp_insert_raw(pkt,
   20ce8:	f7ff beab 	b.w	20a42 <net_udp_insert_raw>

00020cec <net_udp_init>:
{
	return net_conn_unregister(handle);
}

void net_udp_init(void)
{
   20cec:	4770      	bx	lr

00020cee <net_bt_reserve>:
{
	ARG_UNUSED(iface);
	ARG_UNUSED(unused);

	return 0;
}
   20cee:	2000      	movs	r0, #0
   20cf0:	4770      	bx	lr

00020cf2 <net_bt_enable>:
{
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;

	NET_DBG("iface %p %s", iface, state ? "up" : "down");

	if (state && ctxt->ipsp_chan.chan.state != BT_L2CAP_CONNECTED) {
   20cf2:	b149      	cbz	r1, 20d08 <net_bt_enable+0x16>
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   20cf4:	6803      	ldr	r3, [r0, #0]
	if (state && ctxt->ipsp_chan.chan.state != BT_L2CAP_CONNECTED) {
   20cf6:	689b      	ldr	r3, [r3, #8]
   20cf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
   20cfc:	2b03      	cmp	r3, #3
		return -ENETDOWN;
   20cfe:	bf0c      	ite	eq
   20d00:	2000      	moveq	r0, #0
   20d02:	f06f 003d 	mvnne.w	r0, #61	; 0x3d
   20d06:	4770      	bx	lr
	}

	return 0;
   20d08:	4608      	mov	r0, r1
}
   20d0a:	4770      	bx	lr

00020d0c <bt_iface_init>:
	return ret;
}

static void bt_iface_init(struct net_if *iface)
{
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   20d0c:	6803      	ldr	r3, [r0, #0]

	NET_DBG("iface %p", iface);

	ctxt->iface = iface;
   20d0e:	689b      	ldr	r3, [r3, #8]
   20d10:	6018      	str	r0, [r3, #0]
   20d12:	4770      	bx	lr

00020d14 <ipsp_accept>:

static int ipsp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
	NET_DBG("Incoming conn %p", conn);

	if (bt_context_data.ipsp_chan.chan.conn) {
   20d14:	4b04      	ldr	r3, [pc, #16]	; (20d28 <ipsp_accept+0x14>)
   20d16:	6858      	ldr	r0, [r3, #4]
   20d18:	b910      	cbnz	r0, 20d20 <ipsp_accept+0xc>
		NET_ERR("No channels available");
		return -ENOMEM;
	}

	*chan = &bt_context_data.ipsp_chan.chan;
   20d1a:	3304      	adds	r3, #4
   20d1c:	600b      	str	r3, [r1, #0]

	return 0;
   20d1e:	4770      	bx	lr
		return -ENOMEM;
   20d20:	f06f 000b 	mvn.w	r0, #11
}
   20d24:	4770      	bx	lr
   20d26:	bf00      	nop
   20d28:	2000a744 	.word	0x2000a744

00020d2c <net_bt_send>:
{
   20d2c:	b538      	push	{r3, r4, r5, lr}
	return pkt->family;
   20d2e:	f891 303c 	ldrb.w	r3, [r1, #60]	; 0x3c
	if (net_pkt_family(pkt) != AF_INET6) {
   20d32:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   20d36:	2b0a      	cmp	r3, #10
{
   20d38:	460c      	mov	r4, r1
	if (net_pkt_family(pkt) != AF_INET6) {
   20d3a:	d001      	beq.n	20d40 <net_bt_send+0x14>
		return NET_DROP;
   20d3c:	2002      	movs	r0, #2
   20d3e:	bd38      	pop	{r3, r4, r5, pc}
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   20d40:	6803      	ldr	r3, [r0, #0]
	if (!net_6lo_compress(pkt, true, NULL)) {
   20d42:	2200      	movs	r2, #0
   20d44:	2101      	movs	r1, #1
   20d46:	4620      	mov	r0, r4
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   20d48:	689d      	ldr	r5, [r3, #8]
	if (!net_6lo_compress(pkt, true, NULL)) {
   20d4a:	f7fb fa83 	bl	1c254 <net_6lo_compress>
   20d4e:	2800      	cmp	r0, #0
   20d50:	d0f4      	beq.n	20d3c <net_bt_send+0x10>
	k_fifo_put(&iface->tx_queue, pkt);
   20d52:	6828      	ldr	r0, [r5, #0]
   20d54:	4621      	mov	r1, r4
   20d56:	3018      	adds	r0, #24
   20d58:	f000 fcdd 	bl	21716 <k_queue_append>
	return NET_OK;
   20d5c:	2000      	movs	r0, #0
}
   20d5e:	bd38      	pop	{r3, r4, r5, pc}

00020d60 <net_bt_recv>:
{
   20d60:	b508      	push	{r3, lr}
	if (!net_6lo_uncompress(pkt)) {
   20d62:	4608      	mov	r0, r1
   20d64:	f7fb fcf3 	bl	1c74e <net_6lo_uncompress>
   20d68:	2800      	cmp	r0, #0
}
   20d6a:	bf0c      	ite	eq
   20d6c:	2002      	moveq	r0, #2
   20d6e:	2001      	movne	r0, #1
   20d70:	bd08      	pop	{r3, pc}

00020d72 <ipsp_recv>:
{
   20d72:	b570      	push	{r4, r5, r6, lr}
   20d74:	4605      	mov	r5, r0
   20d76:	460e      	mov	r6, r1
	pkt = net_pkt_get_reserve_rx(0, K_FOREVER);
   20d78:	2000      	movs	r0, #0
   20d7a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   20d7e:	f7fa fcfd 	bl	1b77c <net_pkt_get_reserve_rx>
	net_pkt_ll_dst(pkt)->addr = ctxt->src.val;
   20d82:	f105 039c 	add.w	r3, r5, #156	; 0x9c
	net_pkt_ll_dst(pkt)->len = sizeof(ctxt->src);
   20d86:	2206      	movs	r2, #6
	net_pkt_ll_dst(pkt)->addr = ctxt->src.val;
   20d88:	6283      	str	r3, [r0, #40]	; 0x28
	net_pkt_ll_src(pkt)->addr = ctxt->dst.val;
   20d8a:	f105 01a2 	add.w	r1, r5, #162	; 0xa2
	net_pkt_ll_dst(pkt)->type = NET_LINK_BLUETOOTH;
   20d8e:	2302      	movs	r3, #2
	net_pkt_ll_dst(pkt)->len = sizeof(ctxt->src);
   20d90:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
	net_pkt_ll_dst(pkt)->type = NET_LINK_BLUETOOTH;
   20d94:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
	net_pkt_ll_src(pkt)->len = sizeof(ctxt->dst);
   20d98:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
	net_pkt_ll_src(pkt)->type = NET_LINK_BLUETOOTH;
   20d9c:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	pkt = net_pkt_get_reserve_rx(0, K_FOREVER);
   20da0:	4604      	mov	r4, r0
	net_pkt_ll_src(pkt)->addr = ctxt->dst.val;
   20da2:	6201      	str	r1, [r0, #32]
	net_pkt_frag_add(pkt, net_buf_ref(buf));
   20da4:	4630      	mov	r0, r6
   20da6:	f7f8 facd 	bl	19344 <net_buf_ref>
   20daa:	4601      	mov	r1, r0
   20dac:	4620      	mov	r0, r4
   20dae:	f7fa fd91 	bl	1b8d4 <net_pkt_frag_add>
	if (net_recv_data(ctxt->iface, pkt) < 0) {
   20db2:	4621      	mov	r1, r4
   20db4:	f855 0c04 	ldr.w	r0, [r5, #-4]
   20db8:	f7f9 fc88 	bl	1a6cc <net_recv_data>
   20dbc:	2800      	cmp	r0, #0
   20dbe:	da04      	bge.n	20dca <ipsp_recv+0x58>
		net_pkt_unref(pkt);
   20dc0:	4620      	mov	r0, r4
}
   20dc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_pkt_unref(pkt);
   20dc6:	f7fa bd5e 	b.w	1b886 <net_pkt_unref>
   20dca:	bd70      	pop	{r4, r5, r6, pc}

00020dcc <ipsp_alloc_buf>:
	return net_pkt_get_reserve_rx_data(0, K_FOREVER);
   20dcc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   20dd0:	2000      	movs	r0, #0
   20dd2:	f7fa bce3 	b.w	1b79c <net_pkt_get_reserve_rx_data>
	...

00020dd8 <ipsp_disconnected>:
{
   20dd8:	b510      	push	{r4, lr}
   20dda:	4604      	mov	r4, r0
	net_if_carrier_down(ctxt->iface);
   20ddc:	f850 0c04 	ldr.w	r0, [r0, #-4]
   20de0:	f7fa fb64 	bl	1b4ac <net_if_carrier_down>
	if (chan->conn != default_conn) {
   20de4:	6820      	ldr	r0, [r4, #0]
   20de6:	4c04      	ldr	r4, [pc, #16]	; (20df8 <ipsp_disconnected+0x20>)
   20de8:	6823      	ldr	r3, [r4, #0]
   20dea:	4298      	cmp	r0, r3
   20dec:	d103      	bne.n	20df6 <ipsp_disconnected+0x1e>
	bt_conn_unref(default_conn);
   20dee:	f7e5 fb73 	bl	64d8 <bt_conn_unref>
	default_conn = NULL;
   20df2:	2300      	movs	r3, #0
   20df4:	6023      	str	r3, [r4, #0]
   20df6:	bd10      	pop	{r4, pc}
   20df8:	20002ef0 	.word	0x20002ef0

00020dfc <disconnected>:
	bt_l2cap_chan_connect(conn, &bt_context_data.ipsp_chan.chan,
			      L2CAP_IPSP_PSM);
}

static void disconnected(struct bt_conn *conn, u8_t reason)
{
   20dfc:	b510      	push	{r4, lr}
#if defined(CONFIG_NET_DEBUG_L2_BT)
	char addr[BT_ADDR_LE_STR_LEN];
#endif

	if (conn != default_conn) {
   20dfe:	4c04      	ldr	r4, [pc, #16]	; (20e10 <disconnected+0x14>)
   20e00:	6823      	ldr	r3, [r4, #0]
   20e02:	4283      	cmp	r3, r0
   20e04:	d103      	bne.n	20e0e <disconnected+0x12>
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));

	NET_DBG("Disconnected: %s (reason %u)\n", addr, reason);
#endif

	bt_conn_unref(default_conn);
   20e06:	f7e5 fb67 	bl	64d8 <bt_conn_unref>
	default_conn = NULL;
   20e0a:	2300      	movs	r3, #0
   20e0c:	6023      	str	r3, [r4, #0]
   20e0e:	bd10      	pop	{r4, pc}
   20e10:	20002ef0 	.word	0x20002ef0

00020e14 <net_bt_init>:
	.disconnected = disconnected,
};
#endif /* CONFIG_NET_L2_BT_MGMT */

static int net_bt_init(struct device *dev)
{
   20e14:	b508      	push	{r3, lr}
	NET_DBG("dev %p driver_data %p", dev, dev->driver_data);

#if defined(CONFIG_NET_L2_BT_MGMT)
	bt_conn_cb_register(&conn_callbacks);
   20e16:	4804      	ldr	r0, [pc, #16]	; (20e28 <net_bt_init+0x14>)
   20e18:	f7e4 fff6 	bl	5e08 <bt_conn_cb_register>
#endif
	bt_l2cap_server_register(&server);
   20e1c:	4803      	ldr	r0, [pc, #12]	; (20e2c <net_bt_init+0x18>)
   20e1e:	f7e6 f929 	bl	7074 <bt_l2cap_server_register>

	return 0;
}
   20e22:	2000      	movs	r0, #0
   20e24:	bd08      	pop	{r3, pc}
   20e26:	bf00      	nop
   20e28:	2000a7f8 	.word	0x2000a7f8
   20e2c:	2000a828 	.word	0x2000a828

00020e30 <bt_iface_send>:
{
   20e30:	b538      	push	{r3, r4, r5, lr}
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   20e32:	6802      	ldr	r2, [r0, #0]
	frags = pkt->frags;
   20e34:	688d      	ldr	r5, [r1, #8]
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   20e36:	6894      	ldr	r4, [r2, #8]
	pkt->frags = NULL;
   20e38:	2200      	movs	r2, #0
	net_pkt_unref(pkt);
   20e3a:	4608      	mov	r0, r1
	pkt->frags = NULL;
   20e3c:	608a      	str	r2, [r1, #8]
	net_pkt_unref(pkt);
   20e3e:	f7fa fd22 	bl	1b886 <net_pkt_unref>
	ret = bt_l2cap_chan_send(&ctxt->ipsp_chan.chan, frags);
   20e42:	4629      	mov	r1, r5
   20e44:	1d20      	adds	r0, r4, #4
}
   20e46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = bt_l2cap_chan_send(&ctxt->ipsp_chan.chan, frags);
   20e4a:	f7e6 bd91 	b.w	7970 <bt_l2cap_chan_send>
	...

00020e50 <connected>:
	if (err) {
   20e50:	b939      	cbnz	r1, 20e62 <connected+0x12>
	if (conn != default_conn) {
   20e52:	4a04      	ldr	r2, [pc, #16]	; (20e64 <connected+0x14>)
   20e54:	6812      	ldr	r2, [r2, #0]
   20e56:	4282      	cmp	r2, r0
   20e58:	d103      	bne.n	20e62 <connected+0x12>
	bt_l2cap_chan_connect(conn, &bt_context_data.ipsp_chan.chan,
   20e5a:	2223      	movs	r2, #35	; 0x23
   20e5c:	4902      	ldr	r1, [pc, #8]	; (20e68 <connected+0x18>)
   20e5e:	f7e6 b94f 	b.w	7100 <bt_l2cap_chan_connect>
   20e62:	4770      	bx	lr
   20e64:	20002ef0 	.word	0x20002ef0
   20e68:	2000a748 	.word	0x2000a748

00020e6c <ipsp_connected>:
{
   20e6c:	b570      	push	{r4, r5, r6, lr}
   20e6e:	b08e      	sub	sp, #56	; 0x38
   20e70:	4604      	mov	r4, r0
	if (bt_conn_get_info(chan->conn, &info) < 0) {
   20e72:	a909      	add	r1, sp, #36	; 0x24
   20e74:	6800      	ldr	r0, [r0, #0]
   20e76:	f7e5 fb32 	bl	64de <bt_conn_get_info>
   20e7a:	2800      	cmp	r0, #0
   20e7c:	da04      	bge.n	20e88 <ipsp_connected+0x1c>
		bt_l2cap_chan_disconnect(chan);
   20e7e:	4620      	mov	r0, r4
   20e80:	f7e6 f970 	bl	7164 <bt_l2cap_chan_disconnect>
}
   20e84:	b00e      	add	sp, #56	; 0x38
   20e86:	bd70      	pop	{r4, r5, r6, pc}
	sys_memcpy_swap(ctxt->src.val, info.le.src->a.val, sizeof(ctxt->src));
   20e88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   20e8a:	f104 059c 	add.w	r5, r4, #156	; 0x9c
	src += length - 1;
   20e8e:	1d93      	adds	r3, r2, #6
   20e90:	f104 019b 	add.w	r1, r4, #155	; 0x9b
		*((u8_t *)dst++) = *((u8_t *)src--);
   20e94:	f813 0901 	ldrb.w	r0, [r3], #-1
   20e98:	f801 0f01 	strb.w	r0, [r1, #1]!
	for (; length > 0; length--) {
   20e9c:	429a      	cmp	r2, r3
   20e9e:	d1f9      	bne.n	20e94 <ipsp_connected+0x28>
	sys_memcpy_swap(ctxt->dst.val, info.le.dst->a.val, sizeof(ctxt->dst));
   20ea0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   20ea2:	f104 01a2 	add.w	r1, r4, #162	; 0xa2
	src += length - 1;
   20ea6:	1d93      	adds	r3, r2, #6
   20ea8:	f104 00a1 	add.w	r0, r4, #161	; 0xa1
		*((u8_t *)dst++) = *((u8_t *)src--);
   20eac:	f813 6901 	ldrb.w	r6, [r3], #-1
   20eb0:	f800 6f01 	strb.w	r6, [r0, #1]!
	for (; length > 0; length--) {
   20eb4:	429a      	cmp	r2, r3
   20eb6:	d1f9      	bne.n	20eac <ipsp_connected+0x40>
	net_if_set_link_addr(ctxt->iface, ctxt->src.val, sizeof(ctxt->src.val),
   20eb8:	f854 3c04 	ldr.w	r3, [r4, #-4]
   20ebc:	f3bf 8f5b 	dmb	ish
   20ec0:	68da      	ldr	r2, [r3, #12]
   20ec2:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(iface->flags, NET_IF_UP)) {
   20ec6:	07d2      	lsls	r2, r2, #31
   20ec8:	d404      	bmi.n	20ed4 <ipsp_connected+0x68>
	iface->link_addr.len = len;
   20eca:	2206      	movs	r2, #6
   20ecc:	751a      	strb	r2, [r3, #20]
	iface->link_addr.type = type;
   20ece:	2202      	movs	r2, #2
	iface->link_addr.addr = addr;
   20ed0:	611d      	str	r5, [r3, #16]
	iface->link_addr.type = type;
   20ed2:	755a      	strb	r2, [r3, #21]
	ll.len = sizeof(ctxt->dst.val);
   20ed4:	2306      	movs	r3, #6
   20ed6:	f88d 3010 	strb.w	r3, [sp, #16]
	ll.type = NET_LINK_BLUETOOTH;
   20eda:	2302      	movs	r3, #2
   20edc:	f88d 3011 	strb.w	r3, [sp, #17]
	addr->s6_addr[1] = 0x80;
   20ee0:	2380      	movs	r3, #128	; 0x80
	addr->s6_addr[0] = 0xfe;
   20ee2:	25fe      	movs	r5, #254	; 0xfe
	addr->s6_addr[1] = 0x80;
   20ee4:	f88d 3015 	strb.w	r3, [sp, #21]
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   20ee8:	2203      	movs	r2, #3
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
   20eea:	2300      	movs	r3, #0
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   20eec:	a807      	add	r0, sp, #28
	ll.addr = ctxt->dst.val;
   20eee:	9103      	str	r1, [sp, #12]
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
   20ef0:	f8ad 3016 	strh.w	r3, [sp, #22]
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
   20ef4:	9306      	str	r3, [sp, #24]
	addr->s6_addr[0] = 0xfe;
   20ef6:	f88d 5014 	strb.w	r5, [sp, #20]
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   20efa:	f7df fc4a 	bl	792 <memcpy>
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   20efe:	9903      	ldr	r1, [sp, #12]
		addr->s6_addr[12] = 0xfe;
   20f00:	f88d 5020 	strb.w	r5, [sp, #32]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   20f04:	2203      	movs	r2, #3
		addr->s6_addr[11] = 0xff;
   20f06:	23ff      	movs	r3, #255	; 0xff
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   20f08:	4411      	add	r1, r2
   20f0a:	f10d 0021 	add.w	r0, sp, #33	; 0x21
		addr->s6_addr[11] = 0xff;
   20f0e:	f88d 301f 	strb.w	r3, [sp, #31]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   20f12:	f7df fc3e 	bl	792 <memcpy>
		if (lladdr->type == NET_LINK_ETHERNET) {
   20f16:	f89d 3011 	ldrb.w	r3, [sp, #17]
	net_ipv6_nbr_add(ctxt->iface, &in6, &ll, false,
   20f1a:	f854 0c04 	ldr.w	r0, [r4, #-4]
   20f1e:	2b03      	cmp	r3, #3
			addr->s6_addr[8] ^= 0x02;
   20f20:	bf02      	ittt	eq
   20f22:	f89d 301c 	ldrbeq.w	r3, [sp, #28]
   20f26:	f083 0302 	eoreq.w	r3, r3, #2
   20f2a:	f88d 301c 	strbeq.w	r3, [sp, #28]
   20f2e:	2305      	movs	r3, #5
   20f30:	9300      	str	r3, [sp, #0]
   20f32:	aa03      	add	r2, sp, #12
   20f34:	2300      	movs	r3, #0
   20f36:	a905      	add	r1, sp, #20
   20f38:	f7fd fb1c 	bl	1e574 <net_ipv6_nbr_add>
	net_if_up(ctxt->iface);
   20f3c:	f854 0c04 	ldr.w	r0, [r4, #-4]
   20f40:	f7fa fa88 	bl	1b454 <net_if_up>
   20f44:	e79e      	b.n	20e84 <ipsp_connected+0x18>
	...

00020f48 <net_mgmt_NET_REQUEST_BT_ADVERTISE>:
{
   20f48:	b510      	push	{r4, lr}
	if (!strcmp(data, "on")) {
   20f4a:	4913      	ldr	r1, [pc, #76]	; (20f98 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x50>)
{
   20f4c:	b086      	sub	sp, #24
	if (!strcmp(data, "on")) {
   20f4e:	4610      	mov	r0, r2
{
   20f50:	4614      	mov	r4, r2
	if (!strcmp(data, "on")) {
   20f52:	f7df fbe4 	bl	71e <strcmp>
   20f56:	b9a0      	cbnz	r0, 20f82 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x3a>
		return bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad),
   20f58:	22a0      	movs	r2, #160	; 0xa0
   20f5a:	9003      	str	r0, [sp, #12]
   20f5c:	2301      	movs	r3, #1
   20f5e:	f8ad 200e 	strh.w	r2, [sp, #14]
   20f62:	22f0      	movs	r2, #240	; 0xf0
   20f64:	9004      	str	r0, [sp, #16]
   20f66:	9005      	str	r0, [sp, #20]
   20f68:	f88d 300c 	strb.w	r3, [sp, #12]
   20f6c:	f8ad 2010 	strh.w	r2, [sp, #16]
   20f70:	9300      	str	r3, [sp, #0]
   20f72:	2202      	movs	r2, #2
   20f74:	4b09      	ldr	r3, [pc, #36]	; (20f9c <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x54>)
   20f76:	490a      	ldr	r1, [pc, #40]	; (20fa0 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x58>)
   20f78:	a803      	add	r0, sp, #12
   20f7a:	f7e4 fc85 	bl	5888 <bt_le_adv_start>
}
   20f7e:	b006      	add	sp, #24
   20f80:	bd10      	pop	{r4, pc}
	} else if (!strcmp(data, "off")) {
   20f82:	4908      	ldr	r1, [pc, #32]	; (20fa4 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x5c>)
   20f84:	4620      	mov	r0, r4
   20f86:	f7df fbca 	bl	71e <strcmp>
   20f8a:	b910      	cbnz	r0, 20f92 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x4a>
		return bt_le_adv_stop();
   20f8c:	f7e4 fd0c 	bl	59a8 <bt_le_adv_stop>
   20f90:	e7f5      	b.n	20f7e <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x36>
		return -EINVAL;
   20f92:	f06f 0015 	mvn.w	r0, #21
   20f96:	e7f2      	b.n	20f7e <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x36>
   20f98:	00024259 	.word	0x00024259
   20f9c:	000272cc 	.word	0x000272cc
   20fa0:	000272b8 	.word	0x000272b8
   20fa4:	000272c8 	.word	0x000272c8

00020fa8 <ipv6_event_handler>:
static struct net_mgmt_event_callback mgmt6_cb;
static struct in6_addr laddr;

static void ipv6_event_handler(struct net_mgmt_event_callback *cb,
			       u32_t mgmt_event, struct net_if *iface)
{
   20fa8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int i;

	if (mgmt_event == NET_EVENT_IPV6_ADDR_ADD) {
   20faa:	4b1c      	ldr	r3, [pc, #112]	; (2101c <ipv6_event_handler+0x74>)
{
   20fac:	9201      	str	r2, [sp, #4]
	if (mgmt_event == NET_EVENT_IPV6_ADDR_ADD) {
   20fae:	4299      	cmp	r1, r3
   20fb0:	d114      	bne.n	20fdc <ipv6_event_handler+0x34>
		/* save the last added IP address for this interface */
		for (i = NET_IF_MAX_IPV6_ADDR - 1; i >= 0; i--) {
			if (iface->ipv6.unicast[i].is_used) {
				memcpy(&laddr,
   20fb2:	4e1b      	ldr	r6, [pc, #108]	; (21020 <ipv6_event_handler+0x78>)
   20fb4:	2402      	movs	r4, #2
			if (iface->ipv6.unicast[i].is_used) {
   20fb6:	256c      	movs	r5, #108	; 0x6c
   20fb8:	9901      	ldr	r1, [sp, #4]
   20fba:	fb05 f304 	mul.w	r3, r5, r4
   20fbe:	18ca      	adds	r2, r1, r3
   20fc0:	f892 2094 	ldrb.w	r2, [r2, #148]	; 0x94
   20fc4:	b12a      	cbz	r2, 20fd2 <ipv6_event_handler+0x2a>
				       &iface->ipv6.unicast[i].address.in6_addr,
   20fc6:	3330      	adds	r3, #48	; 0x30
				memcpy(&laddr,
   20fc8:	2210      	movs	r2, #16
   20fca:	4419      	add	r1, r3
   20fcc:	4630      	mov	r0, r6
   20fce:	f7df fbe0 	bl	792 <memcpy>
		for (i = NET_IF_MAX_IPV6_ADDR - 1; i >= 0; i--) {
   20fd2:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
   20fd6:	d2ef      	bcs.n	20fb8 <ipv6_event_handler+0x10>

	if (mgmt_event == NET_EVENT_IPV6_ROUTER_ADD) {
		k_sem_take(&counter, K_NO_WAIT);
		k_sem_give(&waiter);
	}
}
   20fd8:	b002      	add	sp, #8
   20fda:	bd70      	pop	{r4, r5, r6, pc}
	if (mgmt_event == NET_EVENT_IPV6_DAD_SUCCEED) {
   20fdc:	4b11      	ldr	r3, [pc, #68]	; (21024 <ipv6_event_handler+0x7c>)
   20fde:	4299      	cmp	r1, r3
   20fe0:	d119      	bne.n	21016 <ipv6_event_handler+0x6e>
		ifaddr = net_if_ipv6_addr_lookup(&laddr, &iface);
   20fe2:	a901      	add	r1, sp, #4
   20fe4:	480e      	ldr	r0, [pc, #56]	; (21020 <ipv6_event_handler+0x78>)
   20fe6:	f7f9 fc73 	bl	1a8d0 <net_if_ipv6_addr_lookup>
		if (!ifaddr ||
   20fea:	4604      	mov	r4, r0
   20fec:	2800      	cmp	r0, #0
   20fee:	d0f3      	beq.n	20fd8 <ipv6_event_handler+0x30>
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   20ff0:	2210      	movs	r2, #16
   20ff2:	490b      	ldr	r1, [pc, #44]	; (21020 <ipv6_event_handler+0x78>)
   20ff4:	3004      	adds	r0, #4
   20ff6:	f7df fb9f 	bl	738 <memcmp>
   20ffa:	2800      	cmp	r0, #0
   20ffc:	d1ec      	bne.n	20fd8 <ipv6_event_handler+0x30>
		    !(net_ipv6_addr_cmp(&ifaddr->address.in6_addr, &laddr) &&
   20ffe:	f994 3065 	ldrsb.w	r3, [r4, #101]	; 0x65
   21002:	2b01      	cmp	r3, #1
   21004:	d1e8      	bne.n	20fd8 <ipv6_event_handler+0x30>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   21006:	2100      	movs	r1, #0
   21008:	4807      	ldr	r0, [pc, #28]	; (21028 <ipv6_event_handler+0x80>)
   2100a:	f000 fe2f 	bl	21c6c <_impl_k_sem_take>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   2100e:	4807      	ldr	r0, [pc, #28]	; (2102c <ipv6_event_handler+0x84>)
   21010:	f000 fdcc 	bl	21bac <_impl_k_sem_give>
   21014:	e7e0      	b.n	20fd8 <ipv6_event_handler+0x30>
	if (mgmt_event == NET_EVENT_IPV6_ROUTER_ADD) {
   21016:	4b06      	ldr	r3, [pc, #24]	; (21030 <ipv6_event_handler+0x88>)
   21018:	4299      	cmp	r1, r3
   2101a:	e7f3      	b.n	21004 <ipv6_event_handler+0x5c>
   2101c:	f0600001 	.word	0xf0600001
   21020:	20002f0c 	.word	0x20002f0c
   21024:	f060000d 	.word	0xf060000d
   21028:	20002ef4 	.word	0x20002ef4
   2102c:	2000aa14 	.word	0x2000aa14
   21030:	f0600009 	.word	0xf0600009

00021034 <net_app_init>:
#else
#define setup_ipv6(...)
#endif /* CONFIG_NET_IPV6 */

int net_app_init(const char *app_info, u32_t flags, s32_t timeout)
{
   21034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21038:	460e      	mov	r6, r1
   2103a:	4615      	mov	r5, r2
#define LOOP_DIVIDER 10
	struct net_if *iface = net_if_get_default();
   2103c:	f7f9 fc22 	bl	1a884 <net_if_get_default>

	if (app_info) {
		NET_INFO("%s", app_info);
	}

	if (!iface) {
   21040:	4604      	mov	r4, r0
   21042:	2800      	cmp	r0, #0
   21044:	d044      	beq.n	210d0 <net_app_init+0x9c>

	if (flags & NET_APP_NEED_IPV6) {
		count++;
	}

	if (flags & NET_APP_NEED_IPV4) {
   21046:	0772      	lsls	r2, r6, #29
	if (flags & NET_APP_NEED_IPV6) {
   21048:	f3c6 0140 	ubfx	r1, r6, #1, #1
		count++;
   2104c:	bf48      	it	mi
   2104e:	3101      	addmi	r1, #1
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   21050:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   21054:	4820      	ldr	r0, [pc, #128]	; (210d8 <net_app_init+0xa4>)
   21056:	f000 fd9f 	bl	21b98 <_impl_k_sem_init>
	if (net_addr_pton(AF_INET6, CONFIG_NET_APP_MY_IPV6_ADDR, &laddr)) {
   2105a:	4a20      	ldr	r2, [pc, #128]	; (210dc <net_app_init+0xa8>)
   2105c:	4920      	ldr	r1, [pc, #128]	; (210e0 <net_app_init+0xac>)
   2105e:	200a      	movs	r0, #10
   21060:	f7fa ffc1 	bl	1bfe6 <net_addr_pton>
	cb->handler = handler;
   21064:	481f      	ldr	r0, [pc, #124]	; (210e4 <net_app_init+0xb0>)
   21066:	4b20      	ldr	r3, [pc, #128]	; (210e8 <net_app_init+0xb4>)
   21068:	6043      	str	r3, [r0, #4]
	cb->event_mask = mgmt_event_mask;
   2106a:	4b20      	ldr	r3, [pc, #128]	; (210ec <net_app_init+0xb8>)
   2106c:	6083      	str	r3, [r0, #8]
	net_mgmt_add_event_callback(&mgmt6_cb);
   2106e:	f7fe fa9f 	bl	1f5b0 <net_mgmt_add_event_callback>
		ifaddr = net_if_ipv6_addr_add(iface, &laddr,
   21072:	2300      	movs	r3, #0
   21074:	2203      	movs	r2, #3
   21076:	4919      	ldr	r1, [pc, #100]	; (210dc <net_app_init+0xa8>)
   21078:	4620      	mov	r0, r4
   2107a:	f7f9 fc7d 	bl	1a978 <net_if_ipv6_addr_add>

	setup_dhcpv4(iface);

	setup_ipv6(iface, flags);

	if (timeout < 0) {
   2107e:	2d00      	cmp	r5, #0
   21080:	db11      	blt.n	210a6 <net_app_init+0x72>
		count = -1;
	} else if (timeout == 0) {
   21082:	d00d      	beq.n	210a0 <net_app_init+0x6c>
		count = 0;
	} else {
		count = timeout / 1000 + 1;
   21084:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   21088:	fb95 f4f4 	sdiv	r4, r5, r4
   2108c:	3401      	adds	r4, #1
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   2108e:	4f18      	ldr	r7, [pc, #96]	; (210f0 <net_app_init+0xbc>)
	/* Loop here until we are ready to continue. As we might need
	 * to wait multiple events, sleep smaller amounts of data.
	 */
	while (count--) {
		if (k_sem_take(&waiter, loop)) {
			if (!k_sem_count_get(&counter)) {
   21090:	f8df 8044 	ldr.w	r8, [pc, #68]	; 210d8 <net_app_init+0xa4>
   21094:	3c01      	subs	r4, #1
	int loop = timeout / LOOP_DIVIDER;
   21096:	260a      	movs	r6, #10
   21098:	fb95 f6f6 	sdiv	r6, r5, r6
	while (count--) {
   2109c:	1c63      	adds	r3, r4, #1
   2109e:	d105      	bne.n	210ac <net_app_init+0x78>
	if (!count && timeout) {
		NET_ERR("Timeout while waiting setup");
		return -ETIMEDOUT;
	}

	return 0;
   210a0:	2000      	movs	r0, #0
   210a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		count = -1;
   210a6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   210aa:	e7f0      	b.n	2108e <net_app_init+0x5a>
   210ac:	4631      	mov	r1, r6
   210ae:	4638      	mov	r0, r7
   210b0:	f000 fddc 	bl	21c6c <_impl_k_sem_take>
		if (k_sem_take(&waiter, loop)) {
   210b4:	b110      	cbz	r0, 210bc <net_app_init+0x88>
			if (!k_sem_count_get(&counter)) {
   210b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
   210ba:	b10b      	cbz	r3, 210c0 <net_app_init+0x8c>
   210bc:	3c01      	subs	r4, #1
   210be:	e7ed      	b.n	2109c <net_app_init+0x68>
	if (!count && timeout) {
   210c0:	2c00      	cmp	r4, #0
   210c2:	d1ed      	bne.n	210a0 <net_app_init+0x6c>
   210c4:	2d00      	cmp	r5, #0
   210c6:	d0eb      	beq.n	210a0 <net_app_init+0x6c>
		return -ETIMEDOUT;
   210c8:	f06f 003b 	mvn.w	r0, #59	; 0x3b
}
   210cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENODEV;
   210d0:	f06f 0012 	mvn.w	r0, #18
   210d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   210d8:	20002ef4 	.word	0x20002ef4
   210dc:	20002f0c 	.word	0x20002f0c
   210e0:	00022d06 	.word	0x00022d06
   210e4:	20002f1c 	.word	0x20002f1c
   210e8:	00020fa9 	.word	0x00020fa9
   210ec:	f060000d 	.word	0xf060000d
   210f0:	2000aa14 	.word	0x2000aa14

000210f4 <init_net_app>:

#if defined(CONFIG_NET_APP_AUTO_INIT)
static int init_net_app(struct device *device)
{
   210f4:	b508      	push	{r3, lr}
	ret = _net_app_ieee802154_setup();
	if (ret < 0) {
		NET_ERR("Cannot setup IEEE 802.15.4 interface (%d)", ret);
	}

	ret = _net_app_bt_setup();
   210f6:	f000 f80b 	bl	21110 <_net_app_bt_setup>
	if (IS_ENABLED(CONFIG_NET_APP_NEED_IPV4)) {
		flags |= NET_APP_NEED_IPV4;
	}

	/* Initialize the application automatically if needed */
	ret = net_app_init("Initializing network", flags,
   210fa:	f247 5230 	movw	r2, #30000	; 0x7530
   210fe:	2100      	movs	r1, #0
   21100:	4802      	ldr	r0, [pc, #8]	; (2110c <init_net_app+0x18>)
	if (ret < 0) {
		NET_ERR("Network initialization failed (%d)", ret);
	}

	return ret;
}
   21102:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	ret = net_app_init("Initializing network", flags,
   21106:	f7ff bf95 	b.w	21034 <net_app_init>
   2110a:	bf00      	nop
   2110c:	000272db 	.word	0x000272db

00021110 <_net_app_bt_setup>:

static struct bt_gatt_service ipss_svc = BT_GATT_SERVICE(attrs);
#endif

int _net_app_bt_setup(void)
{
   21110:	b510      	push	{r4, lr}
	struct net_if *iface;
	struct device *dev;
	int err;

	err = bt_enable(NULL);
   21112:	2000      	movs	r0, #0
   21114:	f7e4 fb40 	bl	5798 <bt_enable>
	if (err < 0 && err != -EALREADY) {
   21118:	2800      	cmp	r0, #0
   2111a:	da02      	bge.n	21122 <_net_app_bt_setup+0x12>
   2111c:	f110 0f45 	cmn.w	r0, #69	; 0x45
   21120:	d115      	bne.n	2114e <_net_app_bt_setup+0x3e>
		return err;
	}

	dev = device_get_binding("net_bt");
   21122:	480d      	ldr	r0, [pc, #52]	; (21158 <_net_app_bt_setup+0x48>)
   21124:	f000 f834 	bl	21190 <device_get_binding>
	if (!dev) {
   21128:	b190      	cbz	r0, 21150 <_net_app_bt_setup+0x40>
		return -ENODEV;
	}

	iface = net_if_lookup_by_dev(dev);
   2112a:	f7f9 fb99 	bl	1a860 <net_if_lookup_by_dev>
	if (!iface) {
   2112e:	4604      	mov	r4, r0
   21130:	b910      	cbnz	r0, 21138 <_net_app_bt_setup+0x28>
		return -EINVAL;
   21132:	f06f 0015 	mvn.w	r0, #21
   21136:	bd10      	pop	{r4, pc}
	}

#if defined(CONFIG_NET_APP_BT_NODE)
	bt_gatt_service_register(&ipss_svc);
   21138:	4808      	ldr	r0, [pc, #32]	; (2115c <_net_app_bt_setup+0x4c>)
   2113a:	f7e8 f959 	bl	93f0 <bt_gatt_service_register>

	if (net_mgmt(NET_REQUEST_BT_ADVERTISE, iface, ADV_STR,
   2113e:	2303      	movs	r3, #3
   21140:	4a07      	ldr	r2, [pc, #28]	; (21160 <_net_app_bt_setup+0x50>)
   21142:	4808      	ldr	r0, [pc, #32]	; (21164 <_net_app_bt_setup+0x54>)
   21144:	4621      	mov	r1, r4
   21146:	f7ff feff 	bl	20f48 <net_mgmt_NET_REQUEST_BT_ADVERTISE>
   2114a:	2800      	cmp	r0, #0
   2114c:	d1f1      	bne.n	21132 <_net_app_bt_setup+0x22>
		return -EINVAL;
	}
#endif

	return 0;
}
   2114e:	bd10      	pop	{r4, pc}
		return -ENODEV;
   21150:	f06f 0012 	mvn.w	r0, #18
   21154:	e7fb      	b.n	2114e <_net_app_bt_setup+0x3e>
   21156:	bf00      	nop
   21158:	000272d4 	.word	0x000272d4
   2115c:	2000a850 	.word	0x2000a850
   21160:	00024259 	.word	0x00024259
   21164:	61550001 	.word	0x61550001

00021168 <_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void _sys_device_do_config_level(int level)
{
   21168:	b538      	push	{r3, r4, r5, lr}
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1];
   2116a:	4b08      	ldr	r3, [pc, #32]	; (2118c <_sys_device_do_config_level+0x24>)
   2116c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   21170:	3001      	adds	r0, #1
   21172:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   21176:	4620      	mov	r0, r4
   21178:	42a8      	cmp	r0, r5
   2117a:	f104 040c 	add.w	r4, r4, #12
   2117e:	d300      	bcc.n	21182 <_sys_device_do_config_level+0x1a>
		struct device_config *device = info->config;

		device->init(info);
		_k_object_init(info);
	}
}
   21180:	bd38      	pop	{r3, r4, r5, pc}
		device->init(info);
   21182:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   21186:	685b      	ldr	r3, [r3, #4]
   21188:	4798      	blx	r3
   2118a:	e7f4      	b.n	21176 <_sys_device_do_config_level+0xe>
   2118c:	000272f0 	.word	0x000272f0

00021190 <device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
   21190:	4b10      	ldr	r3, [pc, #64]	; (211d4 <device_get_binding+0x44>)
{
   21192:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
   21194:	4c10      	ldr	r4, [pc, #64]	; (211d8 <device_get_binding+0x48>)
{
   21196:	4605      	mov	r5, r0
   21198:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
   2119a:	429c      	cmp	r4, r3
   2119c:	d104      	bne.n	211a8 <device_get_binding+0x18>
   2119e:	4c0e      	ldr	r4, [pc, #56]	; (211d8 <device_get_binding+0x48>)
		if (info->driver_api != NULL && info->config->name == name) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
   211a0:	42b4      	cmp	r4, r6
   211a2:	d109      	bne.n	211b8 <device_get_binding+0x28>
		if (!strcmp(name, info->config->name)) {
			return info;
		}
	}

	return NULL;
   211a4:	2400      	movs	r4, #0
   211a6:	e012      	b.n	211ce <device_get_binding+0x3e>
		if (info->driver_api != NULL && info->config->name == name) {
   211a8:	6862      	ldr	r2, [r4, #4]
   211aa:	b11a      	cbz	r2, 211b4 <device_get_binding+0x24>
   211ac:	6822      	ldr	r2, [r4, #0]
   211ae:	6812      	ldr	r2, [r2, #0]
   211b0:	42aa      	cmp	r2, r5
   211b2:	d00c      	beq.n	211ce <device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
   211b4:	340c      	adds	r4, #12
   211b6:	e7f0      	b.n	2119a <device_get_binding+0xa>
		if (!info->driver_api) {
   211b8:	6863      	ldr	r3, [r4, #4]
   211ba:	b90b      	cbnz	r3, 211c0 <device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
   211bc:	340c      	adds	r4, #12
   211be:	e7ef      	b.n	211a0 <device_get_binding+0x10>
		if (!strcmp(name, info->config->name)) {
   211c0:	6823      	ldr	r3, [r4, #0]
   211c2:	4628      	mov	r0, r5
   211c4:	6819      	ldr	r1, [r3, #0]
   211c6:	f7df faaa 	bl	71e <strcmp>
   211ca:	2800      	cmp	r0, #0
   211cc:	d1f6      	bne.n	211bc <device_get_binding+0x2c>
}
   211ce:	4620      	mov	r0, r4
   211d0:	bd70      	pop	{r4, r5, r6, pc}
   211d2:	bf00      	nop
   211d4:	2000a92c 	.word	0x2000a92c
   211d8:	2000a86c 	.word	0x2000a86c

000211dc <__errno>:
const int _k_neg_eagain = -EAGAIN;

#ifdef CONFIG_ERRNO
int *__errno(void)
{
	return &_current->errno_var;
   211dc:	4b01      	ldr	r3, [pc, #4]	; (211e4 <__errno+0x8>)
   211de:	6898      	ldr	r0, [r3, #8]
}
   211e0:	3054      	adds	r0, #84	; 0x54
   211e2:	4770      	bx	lr
   211e4:	20002ff8 	.word	0x20002ff8

000211e8 <_sys_power_save_idle_exit>:
	if (_sys_pm_idle_exit_notify) {
		_sys_soc_resume();
	}
#endif

	if (_must_enter_tickless_idle(ticks)) {
   211e8:	1c43      	adds	r3, r0, #1
   211ea:	d003      	beq.n	211f4 <_sys_power_save_idle_exit+0xc>
   211ec:	4b03      	ldr	r3, [pc, #12]	; (211fc <_sys_power_save_idle_exit+0x14>)
   211ee:	681b      	ldr	r3, [r3, #0]
   211f0:	4298      	cmp	r0, r3
   211f2:	db01      	blt.n	211f8 <_sys_power_save_idle_exit+0x10>
		/* Resume normal periodic system timer interrupts */
		_timer_idle_exit();
   211f4:	f7e1 bfe6 	b.w	31c4 <_timer_idle_exit>
   211f8:	4770      	bx	lr
   211fa:	bf00      	nop
   211fc:	2000a85c 	.word	0x2000a85c

00021200 <idle>:
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   21200:	4d0f      	ldr	r5, [pc, #60]	; (21240 <idle+0x40>)
#else
#define IDLE_YIELD_IF_COOP() do { } while ((0))
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   21202:	b580      	push	{r7, lr}
	if (_must_enter_tickless_idle(ticks)) {
   21204:	4f0f      	ldr	r7, [pc, #60]	; (21244 <idle+0x44>)
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21206:	f105 0610 	add.w	r6, r5, #16
	__asm__ volatile(
   2120a:	f04f 0220 	mov.w	r2, #32
   2120e:	f3ef 8311 	mrs	r3, BASEPRI
   21212:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
   21216:	692b      	ldr	r3, [r5, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21218:	42b3      	cmp	r3, r6
   2121a:	d00a      	beq.n	21232 <idle+0x32>
static inline s32_t _get_next_timeout_expiry(void)
{
	struct _timeout *t = (struct _timeout *)
			     sys_dlist_peek_head(&_timeout_q);

	return t ? t->delta_ticks_from_prev : K_FOREVER;
   2121c:	b14b      	cbz	r3, 21232 <idle+0x32>
   2121e:	691c      	ldr	r4, [r3, #16]
   21220:	1c63      	adds	r3, r4, #1
   21222:	d008      	beq.n	21236 <idle+0x36>
   21224:	683b      	ldr	r3, [r7, #0]
   21226:	42a3      	cmp	r3, r4
   21228:	dd05      	ble.n	21236 <idle+0x36>
	_kernel.idle = ticks;
   2122a:	61ac      	str	r4, [r5, #24]
	k_cpu_idle();
   2122c:	f7e0 fd5a 	bl	1ce4 <k_cpu_idle>
   21230:	e7eb      	b.n	2120a <idle+0xa>
   21232:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		_timer_idle_enter(ticks);
   21236:	4620      	mov	r0, r4
   21238:	f7e1 ffb0 	bl	319c <_timer_idle_enter>
   2123c:	e7f5      	b.n	2122a <idle+0x2a>
   2123e:	bf00      	nop
   21240:	20002ff8 	.word	0x20002ff8
   21244:	2000a85c 	.word	0x2000a85c

00021248 <stack_analyze>:
{
   21248:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	size_t unused = 0;
   2124a:	2300      	movs	r3, #0
	for (i = 0; i < size; i++) {
   2124c:	429a      	cmp	r2, r3
   2124e:	d002      	beq.n	21256 <stack_analyze+0xe>
		if ((unsigned char)stack[i] == 0xaa) {
   21250:	5ccc      	ldrb	r4, [r1, r3]
   21252:	2caa      	cmp	r4, #170	; 0xaa
   21254:	d00d      	beq.n	21272 <stack_analyze+0x2a>
	pcnt = ((size - unused) * 100) / size;
   21256:	1ad4      	subs	r4, r2, r3
   21258:	2164      	movs	r1, #100	; 0x64
   2125a:	4361      	muls	r1, r4
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
   2125c:	9201      	str	r2, [sp, #4]
	pcnt = ((size - unused) * 100) / size;
   2125e:	fbb1 f1f2 	udiv	r1, r1, r2
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
   21262:	9400      	str	r4, [sp, #0]
   21264:	9102      	str	r1, [sp, #8]
   21266:	4601      	mov	r1, r0
   21268:	4803      	ldr	r0, [pc, #12]	; (21278 <stack_analyze+0x30>)
   2126a:	f7e1 f813 	bl	2294 <printk>
}
   2126e:	b004      	add	sp, #16
   21270:	bd10      	pop	{r4, pc}
			unused++;
   21272:	3301      	adds	r3, #1
   21274:	e7ea      	b.n	2124c <stack_analyze+0x4>
   21276:	bf00      	nop
   21278:	00023d7b 	.word	0x00023d7b

0002127c <k_call_stacks_analyze>:
extern K_THREAD_STACK_DEFINE(sys_work_q_stack,
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);


void k_call_stacks_analyze(void)
{
   2127c:	b508      	push	{r3, lr}
	printk("Kernel stacks:\n");
   2127e:	480e      	ldr	r0, [pc, #56]	; (212b8 <k_call_stacks_analyze+0x3c>)
   21280:	f7e1 f808 	bl	2294 <printk>
	STACK_ANALYZE("main     ", _main_stack);
   21284:	f44f 6280 	mov.w	r2, #1024	; 0x400
   21288:	490c      	ldr	r1, [pc, #48]	; (212bc <k_call_stacks_analyze+0x40>)
   2128a:	480d      	ldr	r0, [pc, #52]	; (212c0 <k_call_stacks_analyze+0x44>)
   2128c:	f7ff ffdc 	bl	21248 <stack_analyze>
	STACK_ANALYZE("idle     ", _idle_stack);
   21290:	f44f 72a0 	mov.w	r2, #320	; 0x140
   21294:	490b      	ldr	r1, [pc, #44]	; (212c4 <k_call_stacks_analyze+0x48>)
   21296:	480c      	ldr	r0, [pc, #48]	; (212c8 <k_call_stacks_analyze+0x4c>)
   21298:	f7ff ffd6 	bl	21248 <stack_analyze>
	STACK_ANALYZE("interrupt", _interrupt_stack);
   2129c:	f44f 6200 	mov.w	r2, #2048	; 0x800
   212a0:	490a      	ldr	r1, [pc, #40]	; (212cc <k_call_stacks_analyze+0x50>)
   212a2:	480b      	ldr	r0, [pc, #44]	; (212d0 <k_call_stacks_analyze+0x54>)
   212a4:	f7ff ffd0 	bl	21248 <stack_analyze>
	STACK_ANALYZE("workqueue", sys_work_q_stack);
   212a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
   212ac:	4909      	ldr	r1, [pc, #36]	; (212d4 <k_call_stacks_analyze+0x58>)
   212ae:	480a      	ldr	r0, [pc, #40]	; (212d8 <k_call_stacks_analyze+0x5c>)
}
   212b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	STACK_ANALYZE("workqueue", sys_work_q_stack);
   212b4:	f7ff bfc8 	b.w	21248 <stack_analyze>
   212b8:	00027355 	.word	0x00027355
   212bc:	20008b28 	.word	0x20008b28
   212c0:	00027365 	.word	0x00027365
   212c4:	20008f28 	.word	0x20008f28
   212c8:	0002736f 	.word	0x0002736f
   212cc:	20009068 	.word	0x20009068
   212d0:	00027379 	.word	0x00027379
   212d4:	20009868 	.word	0x20009868
   212d8:	00027383 	.word	0x00027383

000212dc <_bss_zero>:
 *
 * @return N/A
 */
void _bss_zero(void)
{
	memset(&__bss_start, 0,
   212dc:	4802      	ldr	r0, [pc, #8]	; (212e8 <_bss_zero+0xc>)
   212de:	4a03      	ldr	r2, [pc, #12]	; (212ec <_bss_zero+0x10>)
   212e0:	2100      	movs	r1, #0
   212e2:	1a12      	subs	r2, r2, r0
   212e4:	f7df ba81 	b.w	7ea <memset>
   212e8:	20000000 	.word	0x20000000
   212ec:	200033b8 	.word	0x200033b8

000212f0 <_data_copy>:
 *
 * @return N/A
 */
void _data_copy(void)
{
	memcpy(&__data_ram_start, &__data_rom_start,
   212f0:	4802      	ldr	r0, [pc, #8]	; (212fc <_data_copy+0xc>)
   212f2:	4a03      	ldr	r2, [pc, #12]	; (21300 <_data_copy+0x10>)
   212f4:	4903      	ldr	r1, [pc, #12]	; (21304 <_data_copy+0x14>)
   212f6:	1a12      	subs	r2, r2, r0
   212f8:	f7df ba4b 	b.w	792 <memcpy>
   212fc:	20009c68 	.word	0x20009c68
   21300:	2000ad98 	.word	0x2000ad98
   21304:	00027390 	.word	0x00027390

00021308 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   21308:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   2130a:	2002      	movs	r0, #2
   2130c:	f7ff ff2c 	bl	21168 <_sys_device_do_config_level>
	if (boot_delay > 0) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
   21310:	4908      	ldr	r1, [pc, #32]	; (21334 <bg_thread_main+0x2c>)
   21312:	4809      	ldr	r0, [pc, #36]	; (21338 <bg_thread_main+0x30>)
   21314:	f7e0 ffbe 	bl	2294 <printk>

	/* Final init level before app starts */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   21318:	2003      	movs	r0, #3
   2131a:	f7ff ff25 	bl	21168 <_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	_init_static_threads();
   2131e:	f000 fec5 	bl	220ac <_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
   21322:	f7e0 f975 	bl	1610 <main>

	/* Terminate thread normally since it has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
   21326:	4a05      	ldr	r2, [pc, #20]	; (2133c <bg_thread_main+0x34>)
   21328:	7a13      	ldrb	r3, [r2, #8]
   2132a:	f023 0301 	bic.w	r3, r3, #1
   2132e:	7213      	strb	r3, [r2, #8]
   21330:	bd08      	pop	{r3, pc}
   21332:	bf00      	nop
   21334:	0002730c 	.word	0x0002730c
   21338:	00027328 	.word	0x00027328
   2133c:	20002f90 	.word	0x20002f90

00021340 <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
   21340:	b580      	push	{r7, lr}
   21342:	b086      	sub	sp, #24
   21344:	4e32      	ldr	r6, [pc, #200]	; (21410 <_Cstart+0xd0>)
   21346:	af06      	add	r7, sp, #24
	_IntLibInit();
   21348:	f7e0 fa82 	bl	1850 <_IntLibInit>
   2134c:	2324      	movs	r3, #36	; 0x24
   2134e:	199a      	adds	r2, r3, r6
	list->head = (sys_dnode_t *)list;
   21350:	519a      	str	r2, [r3, r6]
   21352:	3308      	adds	r3, #8
	for (int ii = 0; ii < K_NUM_PRIORITIES; ii++) {
   21354:	f5b3 7f92 	cmp.w	r3, #292	; 0x124
	list->tail = (sys_dnode_t *)list;
   21358:	6052      	str	r2, [r2, #4]
   2135a:	d1f8      	bne.n	2134e <_Cstart+0xe>
	_ready_q.cache = _main_thread;
   2135c:	4d2d      	ldr	r5, [pc, #180]	; (21414 <_Cstart+0xd4>)
	_setup_new_thread(_main_thread, _main_stack,
   2135e:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 2143c <_Cstart+0xfc>
	_ready_q.cache = _main_thread;
   21362:	61f5      	str	r5, [r6, #28]
	_setup_new_thread(_main_thread, _main_stack,
   21364:	2400      	movs	r4, #0
   21366:	f04f 0901 	mov.w	r9, #1
   2136a:	4643      	mov	r3, r8
   2136c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   21370:	4929      	ldr	r1, [pc, #164]	; (21418 <_Cstart+0xd8>)
   21372:	f8cd 9010 	str.w	r9, [sp, #16]
   21376:	4628      	mov	r0, r5
   21378:	9403      	str	r4, [sp, #12]
   2137a:	9402      	str	r4, [sp, #8]
   2137c:	9401      	str	r4, [sp, #4]
   2137e:	9400      	str	r4, [sp, #0]
   21380:	f000 fe4c 	bl	2201c <_setup_new_thread>
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   21384:	7a6b      	ldrb	r3, [r5, #9]
	_add_thread_to_ready_q(_main_thread);
   21386:	4628      	mov	r0, r5
   21388:	f023 0304 	bic.w	r3, r3, #4
   2138c:	726b      	strb	r3, [r5, #9]
   2138e:	f000 fa2d 	bl	217ec <_add_thread_to_ready_q>
	_setup_new_thread(thr, stack,
   21392:	230f      	movs	r3, #15
   21394:	9303      	str	r3, [sp, #12]
   21396:	4921      	ldr	r1, [pc, #132]	; (2141c <_Cstart+0xdc>)
   21398:	f8cd 9010 	str.w	r9, [sp, #16]
   2139c:	9402      	str	r4, [sp, #8]
   2139e:	9401      	str	r4, [sp, #4]
   213a0:	9400      	str	r4, [sp, #0]
   213a2:	4b1f      	ldr	r3, [pc, #124]	; (21420 <_Cstart+0xe0>)
   213a4:	481f      	ldr	r0, [pc, #124]	; (21424 <_Cstart+0xe4>)
   213a6:	f44f 72a0 	mov.w	r2, #320	; 0x140
   213aa:	f000 fe37 	bl	2201c <_setup_new_thread>
   213ae:	4b1d      	ldr	r3, [pc, #116]	; (21424 <_Cstart+0xe4>)
   213b0:	4a1c      	ldr	r2, [pc, #112]	; (21424 <_Cstart+0xe4>)
   213b2:	7a5b      	ldrb	r3, [r3, #9]
   213b4:	f023 0304 	bic.w	r3, r3, #4
   213b8:	7253      	strb	r3, [r2, #9]
	_add_thread_to_ready_q(thr);
   213ba:	4610      	mov	r0, r2
   213bc:	f000 fa16 	bl	217ec <_add_thread_to_ready_q>
	list->head = (sys_dnode_t *)list;
   213c0:	4b19      	ldr	r3, [pc, #100]	; (21428 <_Cstart+0xe8>)
   213c2:	6133      	str	r3, [r6, #16]
	list->tail = (sys_dnode_t *)list;
   213c4:	6173      	str	r3, [r6, #20]
 * @return N/A
 */
static ALWAYS_INLINE void _InterruptStackSetup(void)
{
#ifdef CONFIG_MPU_REQUIRES_POWER_OF_TWO_ALIGNMENT
	u32_t msp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
   213c6:	4b19      	ldr	r3, [pc, #100]	; (2142c <_Cstart+0xec>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   213c8:	f383 8808 	msr	MSP, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   213cc:	4b18      	ldr	r3, [pc, #96]	; (21430 <_Cstart+0xf0>)
   213ce:	22e0      	movs	r2, #224	; 0xe0
   213d0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
   213d4:	77dc      	strb	r4, [r3, #31]
   213d6:	761c      	strb	r4, [r3, #24]
   213d8:	765c      	strb	r4, [r3, #25]
   213da:	769c      	strb	r4, [r3, #26]
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   213dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   213de:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
   213e2:	625a      	str	r2, [r3, #36]	; 0x24
extern void _CpuIdleInit(void);
static ALWAYS_INLINE void kernel_arch_init(void)
{
	_InterruptStackSetup();
	_ExcSetup();
	_FaultInit();
   213e4:	f7e0 fbea 	bl	1bbc <_FaultInit>
	_CpuIdleInit();
   213e8:	f7e0 fc76 	bl	1cd8 <_CpuIdleInit>
	 */

	prepare_multithreading(dummy_thread);

	/* perform basic hardware initialization */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   213ec:	4620      	mov	r0, r4
   213ee:	f7ff febb 	bl	21168 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   213f2:	4648      	mov	r0, r9
   213f4:	f7ff feb8 	bl	21168 <_sys_device_do_config_level>
		MPU_GUARD_ALIGN_AND_SIZE;
#else
	start_of_main_stack =
		K_THREAD_STACK_BUFFER(main_stack) + main_stack_size;
#endif
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
   213f8:	4b0e      	ldr	r3, [pc, #56]	; (21434 <_Cstart+0xf4>)

	_current = main_thread;
   213fa:	60b5      	str	r5, [r6, #8]
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
   213fc:	f023 0307 	bic.w	r3, r3, #7

	/* the ready queue cache already contains the main thread */

	__asm__ __volatile__(
   21400:	4a0d      	ldr	r2, [pc, #52]	; (21438 <_Cstart+0xf8>)
   21402:	f383 8809 	msr	PSP, r3
   21406:	2100      	movs	r1, #0
   21408:	f381 8811 	msr	BASEPRI, r1
   2140c:	4640      	mov	r0, r8
   2140e:	4710      	bx	r2
   21410:	20002ff8 	.word	0x20002ff8
   21414:	20002f90 	.word	0x20002f90
   21418:	20008b28 	.word	0x20008b28
   2141c:	20008f28 	.word	0x20008f28
   21420:	00021201 	.word	0x00021201
   21424:	20002f28 	.word	0x20002f28
   21428:	20003008 	.word	0x20003008
   2142c:	20009868 	.word	0x20009868
   21430:	e000ed00 	.word	0xe000ed00
   21434:	20008f28 	.word	0x20008f28
   21438:	00021fb5 	.word	0x00021fb5
   2143c:	00021309 	.word	0x00021309

00021440 <init_mem_slab_module>:
{
	ARG_UNUSED(dev);

	struct k_mem_slab *slab;

	for (slab = _k_mem_slab_list_start;
   21440:	4b0b      	ldr	r3, [pc, #44]	; (21470 <init_mem_slab_module+0x30>)
   21442:	480c      	ldr	r0, [pc, #48]	; (21474 <init_mem_slab_module+0x34>)
{
   21444:	b570      	push	{r4, r5, r6, lr}
	slab->free_list = NULL;
   21446:	2400      	movs	r4, #0
	for (slab = _k_mem_slab_list_start;
   21448:	4283      	cmp	r3, r0
   2144a:	d301      	bcc.n	21450 <init_mem_slab_module+0x10>
	     slab++) {
		create_free_list(slab);
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
	}
	return 0;
}
   2144c:	2000      	movs	r0, #0
   2144e:	bd70      	pop	{r4, r5, r6, pc}
	p = slab->buffer;
   21450:	691a      	ldr	r2, [r3, #16]
	for (j = 0; j < slab->num_blocks; j++) {
   21452:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   21454:	615c      	str	r4, [r3, #20]
	for (j = 0; j < slab->num_blocks; j++) {
   21456:	2100      	movs	r1, #0
   21458:	42a9      	cmp	r1, r5
   2145a:	d101      	bne.n	21460 <init_mem_slab_module+0x20>
	     slab++) {
   2145c:	331c      	adds	r3, #28
   2145e:	e7f3      	b.n	21448 <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
   21460:	695e      	ldr	r6, [r3, #20]
   21462:	6016      	str	r6, [r2, #0]
		p += slab->block_size;
   21464:	68de      	ldr	r6, [r3, #12]
		slab->free_list = p;
   21466:	615a      	str	r2, [r3, #20]
	for (j = 0; j < slab->num_blocks; j++) {
   21468:	3101      	adds	r1, #1
		p += slab->block_size;
   2146a:	4432      	add	r2, r6
   2146c:	e7f4      	b.n	21458 <init_mem_slab_module+0x18>
   2146e:	bf00      	nop
   21470:	2000a960 	.word	0x2000a960
   21474:	2000a9b4 	.word	0x2000a9b4

00021478 <k_mem_slab_alloc>:

	_k_object_init(slab);
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, s32_t timeout)
{
   21478:	b538      	push	{r3, r4, r5, lr}
   2147a:	460c      	mov	r4, r1
   2147c:	f04f 0120 	mov.w	r1, #32
   21480:	f3ef 8511 	mrs	r5, BASEPRI
   21484:	f381 8811 	msr	BASEPRI, r1
	unsigned int key = irq_lock();
	int result;

	if (slab->free_list != NULL) {
   21488:	6941      	ldr	r1, [r0, #20]
   2148a:	b151      	cbz	r1, 214a2 <k_mem_slab_alloc+0x2a>
		/* take a free block */
		*mem = slab->free_list;
   2148c:	6021      	str	r1, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   2148e:	6942      	ldr	r2, [r0, #20]
   21490:	6812      	ldr	r2, [r2, #0]
   21492:	6142      	str	r2, [r0, #20]
		slab->num_used++;
   21494:	6982      	ldr	r2, [r0, #24]
   21496:	3201      	adds	r2, #1
   21498:	6182      	str	r2, [r0, #24]
		result = 0;
   2149a:	2000      	movs	r0, #0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2149c:	f385 8811 	msr	BASEPRI, r5
	}

	irq_unlock(key);

	return result;
}
   214a0:	bd38      	pop	{r3, r4, r5, pc}
	} else if (timeout == K_NO_WAIT) {
   214a2:	b91a      	cbnz	r2, 214ac <k_mem_slab_alloc+0x34>
		*mem = NULL;
   214a4:	6022      	str	r2, [r4, #0]
		result = -ENOMEM;
   214a6:	f06f 000b 	mvn.w	r0, #11
   214aa:	e7f7      	b.n	2149c <k_mem_slab_alloc+0x24>
		_pend_current_thread(&slab->wait_q, timeout);
   214ac:	4611      	mov	r1, r2
   214ae:	f000 fa87 	bl	219c0 <_pend_current_thread>
	_update_time_slice_before_swap();
   214b2:	f000 fb47 	bl	21b44 <_update_time_slice_before_swap>
	return __swap(key);
   214b6:	4628      	mov	r0, r5
   214b8:	f7e0 f9d6 	bl	1868 <__swap>
		if (result == 0) {
   214bc:	2800      	cmp	r0, #0
   214be:	d1ef      	bne.n	214a0 <k_mem_slab_alloc+0x28>
			*mem = _current->base.swap_data;
   214c0:	4b02      	ldr	r3, [pc, #8]	; (214cc <k_mem_slab_alloc+0x54>)
   214c2:	689b      	ldr	r3, [r3, #8]
   214c4:	68db      	ldr	r3, [r3, #12]
   214c6:	6023      	str	r3, [r4, #0]
   214c8:	bd38      	pop	{r3, r4, r5, pc}
   214ca:	bf00      	nop
   214cc:	20002ff8 	.word	0x20002ff8

000214d0 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   214d0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   214d2:	f04f 0320 	mov.w	r3, #32
   214d6:	f3ef 8411 	mrs	r4, BASEPRI
   214da:	f383 8811 	msr	BASEPRI, r3
_find_first_thread_to_unpend(_wait_q_t *wait_q, struct k_thread *from)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	extern volatile int _handling_timeouts;

	if (_handling_timeouts) {
   214de:	4b2e      	ldr	r3, [pc, #184]	; (21598 <k_mem_slab_free+0xc8>)
   214e0:	681a      	ldr	r2, [r3, #0]
   214e2:	6803      	ldr	r3, [r0, #0]
   214e4:	b1a2      	cbz	r2, 21510 <k_mem_slab_free+0x40>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   214e6:	4298      	cmp	r0, r3
   214e8:	bf08      	it	eq
   214ea:	2300      	moveq	r3, #0
		sys_dlist_t *q = (sys_dlist_t *)wait_q;
		sys_dnode_t *cur = from ? &from->base.k_q_node : NULL;

		/* skip threads that have an expired timeout */
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
   214ec:	b943      	cbnz	r3, 21500 <k_mem_slab_free+0x30>
		if (_must_switch_threads()) {
			_Swap(key);
			return;
		}
	} else {
		**(char ***)mem = slab->free_list;
   214ee:	680b      	ldr	r3, [r1, #0]
   214f0:	6942      	ldr	r2, [r0, #20]
   214f2:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   214f4:	680b      	ldr	r3, [r1, #0]
   214f6:	6143      	str	r3, [r0, #20]
		slab->num_used--;
   214f8:	6983      	ldr	r3, [r0, #24]
   214fa:	3b01      	subs	r3, #1
   214fc:	6183      	str	r3, [r0, #24]
   214fe:	e03e      	b.n	2157e <k_mem_slab_free+0xae>
			struct k_thread *thread = (struct k_thread *)cur;

			if (_is_thread_timeout_expired(thread)) {
   21500:	6a1a      	ldr	r2, [r3, #32]
   21502:	3202      	adds	r2, #2
   21504:	d108      	bne.n	21518 <k_mem_slab_free+0x48>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   21506:	6842      	ldr	r2, [r0, #4]
   21508:	4293      	cmp	r3, r2
   2150a:	d0f0      	beq.n	214ee <k_mem_slab_free+0x1e>
   2150c:	681b      	ldr	r3, [r3, #0]
   2150e:	e7ed      	b.n	214ec <k_mem_slab_free+0x1c>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21510:	4298      	cmp	r0, r3
   21512:	d0ec      	beq.n	214ee <k_mem_slab_free+0x1e>
/* must be called with interrupts locked */
static inline struct k_thread *_unpend_first_thread(_wait_q_t *wait_q)
{
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);

	if (thread) {
   21514:	2b00      	cmp	r3, #0
   21516:	d0ea      	beq.n	214ee <k_mem_slab_free+0x1e>
			if (_is_thread_timeout_expired(thread)) {
   21518:	4618      	mov	r0, r3
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   2151a:	cb0c      	ldmia	r3, {r2, r3}
   2151c:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   2151e:	6802      	ldr	r2, [r0, #0]
   21520:	4d1e      	ldr	r5, [pc, #120]	; (2159c <k_mem_slab_free+0xcc>)
   21522:	6053      	str	r3, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   21524:	7a43      	ldrb	r3, [r0, #9]
   21526:	f023 0302 	bic.w	r3, r3, #2
   2152a:	7243      	strb	r3, [r0, #9]
		_set_thread_return_value_with_data(pending_thread, 0, *mem);
   2152c:	680b      	ldr	r3, [r1, #0]
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   2152e:	6a01      	ldr	r1, [r0, #32]
	thread->base.swap_data = data;
   21530:	60c3      	str	r3, [r0, #12]
}

static ALWAYS_INLINE void
_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   21532:	2200      	movs	r2, #0
   21534:	1c4b      	adds	r3, r1, #1
   21536:	6642      	str	r2, [r0, #100]	; 0x64
	return _abort_timeout(&thread->base.timeout);
   21538:	f100 0210 	add.w	r2, r0, #16
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   2153c:	d00e      	beq.n	2155c <k_mem_slab_free+0x8c>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   2153e:	696b      	ldr	r3, [r5, #20]
   21540:	429a      	cmp	r2, r3
	return (node == list->tail) ? NULL : node->next;
   21542:	bf1f      	itttt	ne
   21544:	6902      	ldrne	r2, [r0, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   21546:	6913      	ldrne	r3, [r2, #16]
   21548:	185b      	addne	r3, r3, r1
   2154a:	6113      	strne	r3, [r2, #16]
	node->prev->next = node->next;
   2154c:	6943      	ldr	r3, [r0, #20]
   2154e:	6902      	ldr	r2, [r0, #16]
   21550:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   21552:	6902      	ldr	r2, [r0, #16]
   21554:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   21556:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2155a:	6203      	str	r3, [r0, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2155c:	7a43      	ldrb	r3, [r0, #9]
   2155e:	f023 0204 	bic.w	r2, r3, #4
	return !(_is_thread_prevented_from_running(thread) ||
   21562:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   21566:	7242      	strb	r2, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   21568:	d102      	bne.n	21570 <k_mem_slab_free+0xa0>
   2156a:	6a03      	ldr	r3, [r0, #32]
   2156c:	3301      	adds	r3, #1
   2156e:	d009      	beq.n	21584 <k_mem_slab_free+0xb4>
	return _is_preempt(_current) && __must_switch_threads();
   21570:	68ab      	ldr	r3, [r5, #8]
   21572:	895b      	ldrh	r3, [r3, #10]
   21574:	2b7f      	cmp	r3, #127	; 0x7f
   21576:	d802      	bhi.n	2157e <k_mem_slab_free+0xae>
   21578:	f000 fa32 	bl	219e0 <__must_switch_threads>
   2157c:	b928      	cbnz	r0, 2158a <k_mem_slab_free+0xba>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2157e:	f384 8811 	msr	BASEPRI, r4
   21582:	bd38      	pop	{r3, r4, r5, pc}
		_add_thread_to_ready_q(thread);
   21584:	f000 f932 	bl	217ec <_add_thread_to_ready_q>
   21588:	e7f2      	b.n	21570 <k_mem_slab_free+0xa0>
	_update_time_slice_before_swap();
   2158a:	f000 fadb 	bl	21b44 <_update_time_slice_before_swap>
	return __swap(key);
   2158e:	4620      	mov	r0, r4
	}

	irq_unlock(key);
}
   21590:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   21594:	f7e0 b968 	b.w	1868 <__swap>
   21598:	20003330 	.word	0x20003330
   2159c:	20002ff8 	.word	0x20002ff8

000215a0 <get_bit_ptr>:

/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct k_mem_pool *p, int level, int bn, u32_t **word)
{
   215a0:	b510      	push	{r4, lr}
	u32_t *bitarray = level <= p->max_inline_level ?
   215a2:	7ac4      	ldrb	r4, [r0, #11]
   215a4:	68c0      	ldr	r0, [r0, #12]
		&p->levels[level].bits : p->levels[level].bits_p;
   215a6:	428c      	cmp	r4, r1
   215a8:	f04f 040c 	mov.w	r4, #12
   215ac:	bfb6      	itet	lt
   215ae:	4361      	mullt	r1, r4
   215b0:	fb04 0101 	mlage	r1, r4, r1, r0
   215b4:	5841      	ldrlt	r1, [r0, r1]

	*word = &bitarray[bn / 32];
   215b6:	2420      	movs	r4, #32
   215b8:	fb92 f4f4 	sdiv	r4, r2, r4
   215bc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   215c0:	6019      	str	r1, [r3, #0]

	return bn & 0x1f;
}
   215c2:	f002 001f 	and.w	r0, r2, #31
   215c6:	bd10      	pop	{r4, pc}

000215c8 <set_free_bit>:

static void set_free_bit(struct k_mem_pool *p, int level, int bn)
{
   215c8:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
   215ca:	ab01      	add	r3, sp, #4
   215cc:	f7ff ffe8 	bl	215a0 <get_bit_ptr>

	*word |= (1<<bit);
   215d0:	9a01      	ldr	r2, [sp, #4]
   215d2:	2301      	movs	r3, #1
   215d4:	fa03 f000 	lsl.w	r0, r3, r0
   215d8:	6813      	ldr	r3, [r2, #0]
   215da:	4303      	orrs	r3, r0
   215dc:	6013      	str	r3, [r2, #0]
}
   215de:	b003      	add	sp, #12
   215e0:	f85d fb04 	ldr.w	pc, [sp], #4

000215e4 <init_static_pools>:
		set_free_bit(p, 0, i);
	}
}

int init_static_pools(struct device *unused)
{
   215e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   215e8:	4c30      	ldr	r4, [pc, #192]	; (216ac <init_static_pools+0xc8>)
	ARG_UNUSED(unused);
	struct k_mem_pool *p;

	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
   215ea:	4e31      	ldr	r6, [pc, #196]	; (216b0 <init_static_pools+0xcc>)
		sys_dlist_init(&p->levels[i].free_list);
   215ec:	270c      	movs	r7, #12
   215ee:	f1a4 0510 	sub.w	r5, r4, #16
	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
   215f2:	42b5      	cmp	r5, r6
   215f4:	d302      	bcc.n	215fc <init_static_pools+0x18>
		init_mem_pool(p);
	}

	return 0;
}
   215f6:	2000      	movs	r0, #0
   215f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   215fc:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   21600:	f834 ec08 	ldrh.w	lr, [r4, #-8]
	u32_t *bits = p->buf + buflen;
   21604:	f854 0c10 	ldr.w	r0, [r4, #-16]
	list->head = (sys_dnode_t *)list;
   21608:	6024      	str	r4, [r4, #0]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   2160a:	fb03 fe0e 	mul.w	lr, r3, lr
	u32_t *bits = p->buf + buflen;
   2160e:	4470      	add	r0, lr
	list->tail = (sys_dnode_t *)list;
   21610:	6064      	str	r4, [r4, #4]
	for (i = 0; i < p->n_levels; i++) {
   21612:	2100      	movs	r1, #0
			bits += (nblocks + 31)/32;
   21614:	f04f 0c20 	mov.w	ip, #32
	for (i = 0; i < p->n_levels; i++) {
   21618:	f814 2c06 	ldrb.w	r2, [r4, #-6]
   2161c:	4291      	cmp	r1, r2
   2161e:	db07      	blt.n	21630 <init_static_pools+0x4c>
   21620:	f04f 0800 	mov.w	r8, #0
	for (i = 0; i < p->n_max; i++) {
   21624:	f834 3c08 	ldrh.w	r3, [r4, #-8]
   21628:	4598      	cmp	r8, r3
   2162a:	db24      	blt.n	21676 <init_static_pools+0x92>
   2162c:	3418      	adds	r4, #24
   2162e:	e7de      	b.n	215ee <init_static_pools+0xa>
		sys_dlist_init(&p->levels[i].free_list);
   21630:	f854 ac04 	ldr.w	sl, [r4, #-4]
		int nblocks = buflen / sz;
   21634:	fbbe f2f3 	udiv	r2, lr, r3
		sys_dlist_init(&p->levels[i].free_list);
   21638:	fb07 f901 	mul.w	r9, r7, r1
		if (nblocks < 32) {
   2163c:	2a1f      	cmp	r2, #31
		sys_dlist_init(&p->levels[i].free_list);
   2163e:	eb0a 0809 	add.w	r8, sl, r9
		sz = _ALIGN4(sz / 4);
   21642:	ea4f 0393 	mov.w	r3, r3, lsr #2
		sys_dlist_init(&p->levels[i].free_list);
   21646:	f108 0b04 	add.w	fp, r8, #4
			bits += (nblocks + 31)/32;
   2164a:	bfc8      	it	gt
   2164c:	321f      	addgt	r2, #31
		sz = _ALIGN4(sz / 4);
   2164e:	f103 0303 	add.w	r3, r3, #3
	list->head = (sys_dnode_t *)list;
   21652:	f8c8 b004 	str.w	fp, [r8, #4]
	list->tail = (sys_dnode_t *)list;
   21656:	f8c8 b008 	str.w	fp, [r8, #8]
			bits += (nblocks + 31)/32;
   2165a:	bfca      	itet	gt
   2165c:	fb92 f2fc 	sdivgt	r2, r2, ip
			p->max_inline_level = i;
   21660:	f804 1c05 	strble.w	r1, [r4, #-5]
			p->levels[i].bits_p = bits;
   21664:	f84a 0009 	strgt.w	r0, [sl, r9]
		sz = _ALIGN4(sz / 4);
   21668:	f023 0303 	bic.w	r3, r3, #3
			bits += (nblocks + 31)/32;
   2166c:	bfc8      	it	gt
   2166e:	eb00 0082 	addgt.w	r0, r0, r2, lsl #2
	for (i = 0; i < p->n_levels; i++) {
   21672:	3101      	adds	r1, #1
   21674:	e7d0      	b.n	21618 <init_static_pools+0x34>
	return p->buf + lsz * block;
   21676:	f854 2c0c 	ldr.w	r2, [r4, #-12]
		sys_dlist_append(&p->levels[0].free_list, block);
   2167a:	f854 3c04 	ldr.w	r3, [r4, #-4]
	return p->buf + lsz * block;
   2167e:	f854 0c10 	ldr.w	r0, [r4, #-16]
   21682:	fb02 f208 	mul.w	r2, r2, r8
		sys_dlist_append(&p->levels[0].free_list, block);
   21686:	f103 0e04 	add.w	lr, r3, #4
	node->next = list;
   2168a:	f840 e002 	str.w	lr, [r0, r2]
	return p->buf + lsz * block;
   2168e:	1881      	adds	r1, r0, r2
	node->prev = list->tail;
   21690:	689a      	ldr	r2, [r3, #8]
   21692:	604a      	str	r2, [r1, #4]
	list->tail->next = node;
   21694:	689a      	ldr	r2, [r3, #8]
		set_free_bit(p, 0, i);
   21696:	4628      	mov	r0, r5
   21698:	6011      	str	r1, [r2, #0]
	list->tail = node;
   2169a:	6099      	str	r1, [r3, #8]
   2169c:	4642      	mov	r2, r8
   2169e:	2100      	movs	r1, #0
   216a0:	f7ff ff92 	bl	215c8 <set_free_bit>
	for (i = 0; i < p->n_max; i++) {
   216a4:	f108 0801 	add.w	r8, r8, #1
   216a8:	e7bc      	b.n	21624 <init_static_pools+0x40>
   216aa:	bf00      	nop
   216ac:	2000a9c4 	.word	0x2000a9c4
   216b0:	2000a9b4 	.word	0x2000a9b4

000216b4 <k_queue_init>:
	list->head = NULL;
   216b4:	2300      	movs	r3, #0
   216b6:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
   216b8:	6043      	str	r3, [r0, #4]
void k_queue_init(struct k_queue *queue)
{
	sys_slist_init(&queue->data_q);
	sys_dlist_init(&queue->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&queue->poll_events);
   216ba:	f100 0308 	add.w	r3, r0, #8
	list->head = (sys_dnode_t *)list;
   216be:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   216c0:	60c3      	str	r3, [r0, #12]
   216c2:	4770      	bx	lr

000216c4 <k_queue_insert>:

	irq_unlock(key);
}

void k_queue_insert(struct k_queue *queue, void *prev, void *data)
{
   216c4:	b510      	push	{r4, lr}
	__asm__ volatile(
   216c6:	f04f 0320 	mov.w	r3, #32
   216ca:	f3ef 8411 	mrs	r4, BASEPRI
   216ce:	f383 8811 	msr	BASEPRI, r3
	if (!prev) {
   216d2:	b931      	cbnz	r1, 216e2 <k_queue_insert+0x1e>
	node->next = list->head;
   216d4:	6803      	ldr	r3, [r0, #0]
   216d6:	6013      	str	r3, [r2, #0]
	if (!list->tail) {
   216d8:	6843      	ldr	r3, [r0, #4]
	list->head = node;
   216da:	6002      	str	r2, [r0, #0]
	if (!list->tail) {
   216dc:	b943      	cbnz	r3, 216f0 <k_queue_insert+0x2c>
		list->tail = node;
   216de:	6042      	str	r2, [r0, #4]
   216e0:	e006      	b.n	216f0 <k_queue_insert+0x2c>
	} else if (!prev->next) {
   216e2:	680b      	ldr	r3, [r1, #0]
	node->next = NULL;
   216e4:	6013      	str	r3, [r2, #0]
	} else if (!prev->next) {
   216e6:	b98b      	cbnz	r3, 2170c <k_queue_insert+0x48>
	if (!list->tail) {
   216e8:	6843      	ldr	r3, [r0, #4]
   216ea:	b96b      	cbnz	r3, 21708 <k_queue_insert+0x44>
		list->tail = node;
   216ec:	6042      	str	r2, [r0, #4]
		list->head = node;
   216ee:	6002      	str	r2, [r0, #0]
	return _handle_obj_poll_events(&queue->poll_events, state);
   216f0:	2104      	movs	r1, #4
   216f2:	3008      	adds	r0, #8
   216f4:	f001 f872 	bl	227dc <_handle_obj_poll_events>
#endif /* !CONFIG_POLL */

	sys_slist_insert(&queue->data_q, prev, data);

#if defined(CONFIG_POLL)
	if (handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE)) {
   216f8:	b150      	cbz	r0, 21710 <k_queue_insert+0x4c>
	_update_time_slice_before_swap();
   216fa:	f000 fa23 	bl	21b44 <_update_time_slice_before_swap>
	return __swap(key);
   216fe:	4620      	mov	r0, r4
		return;
	}
#endif /* CONFIG_POLL */

	irq_unlock(key);
}
   21700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   21704:	f7e0 b8b0 	b.w	1868 <__swap>
		list->tail->next = node;
   21708:	601a      	str	r2, [r3, #0]
   2170a:	e7e8      	b.n	216de <k_queue_insert+0x1a>
		prev->next = node;
   2170c:	600a      	str	r2, [r1, #0]
   2170e:	e7ef      	b.n	216f0 <k_queue_insert+0x2c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   21710:	f384 8811 	msr	BASEPRI, r4
   21714:	bd10      	pop	{r4, pc}

00021716 <k_queue_append>:

void k_queue_append(struct k_queue *queue, void *data)
{
	return k_queue_insert(queue, queue->data_q.tail, data);
   21716:	460a      	mov	r2, r1
   21718:	6841      	ldr	r1, [r0, #4]
   2171a:	f7ff bfd3 	b.w	216c4 <k_queue_insert>

0002171e <k_queue_prepend>:
}

void k_queue_prepend(struct k_queue *queue, void *data)
{
	return k_queue_insert(queue, NULL, data);
   2171e:	460a      	mov	r2, r1
   21720:	2100      	movs	r1, #0
   21722:	f7ff bfcf 	b.w	216c4 <k_queue_insert>

00021726 <k_queue_append_list>:
}

void k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   21726:	b510      	push	{r4, lr}
	__asm__ volatile(
   21728:	f04f 0320 	mov.w	r3, #32
   2172c:	f3ef 8411 	mrs	r4, BASEPRI
   21730:	f383 8811 	msr	BASEPRI, r3
	if (!list->tail) {
   21734:	6843      	ldr	r3, [r0, #4]
   21736:	b96b      	cbnz	r3, 21754 <k_queue_append_list+0x2e>
		list->head = (sys_snode_t *)head;
   21738:	6001      	str	r1, [r0, #0]
		list->tail = (sys_snode_t *)tail;
   2173a:	6042      	str	r2, [r0, #4]
	return _handle_obj_poll_events(&queue->poll_events, state);
   2173c:	2104      	movs	r1, #4
   2173e:	3008      	adds	r0, #8
   21740:	f001 f84c 	bl	227dc <_handle_obj_poll_events>
			return;
		}
	}
#else
	sys_slist_append_list(&queue->data_q, head, tail);
	if (handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE)) {
   21744:	b140      	cbz	r0, 21758 <k_queue_append_list+0x32>
	_update_time_slice_before_swap();
   21746:	f000 f9fd 	bl	21b44 <_update_time_slice_before_swap>
	return __swap(key);
   2174a:	4620      	mov	r0, r4
		return;
	}
#endif /* !CONFIG_POLL */

	irq_unlock(key);
}
   2174c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   21750:	f7e0 b88a 	b.w	1868 <__swap>
		list->tail->next = (sys_snode_t *)head;
   21754:	6019      	str	r1, [r3, #0]
   21756:	e7f0      	b.n	2173a <k_queue_append_list+0x14>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   21758:	f384 8811 	msr	BASEPRI, r4
   2175c:	bd10      	pop	{r4, pc}

0002175e <k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *k_queue_get(struct k_queue *queue, s32_t timeout)
{
   2175e:	b530      	push	{r4, r5, lr}
   21760:	4604      	mov	r4, r0
   21762:	b087      	sub	sp, #28
   21764:	460d      	mov	r5, r1
	__asm__ volatile(
   21766:	f04f 0220 	mov.w	r2, #32
   2176a:	f3ef 8311 	mrs	r3, BASEPRI
   2176e:	f382 8811 	msr	BASEPRI, r2
   21772:	6802      	ldr	r2, [r0, #0]
	unsigned int key;
	void *data;

	key = irq_lock();

	if (likely(!sys_slist_is_empty(&queue->data_q))) {
   21774:	b152      	cbz	r2, 2178c <k_queue_get+0x2e>
	list->head = node->next;
   21776:	6811      	ldr	r1, [r2, #0]
   21778:	6001      	str	r1, [r0, #0]
	if (list->tail == node) {
   2177a:	6840      	ldr	r0, [r0, #4]
   2177c:	4282      	cmp	r2, r0
		list->tail = list->head;
   2177e:	bf08      	it	eq
   21780:	6061      	streq	r1, [r4, #4]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   21782:	f383 8811 	msr	BASEPRI, r3
#else
	_pend_current_thread(&queue->wait_q, timeout);

	return _Swap(key) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
   21786:	4610      	mov	r0, r2
   21788:	b007      	add	sp, #28
   2178a:	bd30      	pop	{r4, r5, pc}
	if (timeout == K_NO_WAIT) {
   2178c:	b919      	cbnz	r1, 21796 <k_queue_get+0x38>
   2178e:	f383 8811 	msr	BASEPRI, r3
			return NULL;
   21792:	2200      	movs	r2, #0
   21794:	e7f7      	b.n	21786 <k_queue_get+0x28>
   21796:	f383 8811 	msr	BASEPRI, r3
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   2179a:	2104      	movs	r1, #4
   2179c:	4603      	mov	r3, r0
   2179e:	eb0d 0001 	add.w	r0, sp, r1
   217a2:	f000 ff63 	bl	2266c <k_poll_event_init>
		event.state = K_POLL_STATE_NOT_READY;
   217a6:	f89d 3011 	ldrb.w	r3, [sp, #17]
		err = k_poll(&event, 1, timeout);
   217aa:	462a      	mov	r2, r5
		event.state = K_POLL_STATE_NOT_READY;
   217ac:	f36f 1307 	bfc	r3, #4, #4
		err = k_poll(&event, 1, timeout);
   217b0:	2101      	movs	r1, #1
   217b2:	a801      	add	r0, sp, #4
		event.state = K_POLL_STATE_NOT_READY;
   217b4:	f88d 3011 	strb.w	r3, [sp, #17]
		err = k_poll(&event, 1, timeout);
   217b8:	f000 ff6c 	bl	22694 <k_poll>
		if (err) {
   217bc:	2800      	cmp	r0, #0
   217be:	d1e8      	bne.n	21792 <k_queue_get+0x34>
	__asm__ volatile(
   217c0:	f04f 0320 	mov.w	r3, #32
   217c4:	f3ef 8111 	mrs	r1, BASEPRI
   217c8:	f383 8811 	msr	BASEPRI, r3
   217cc:	6822      	ldr	r2, [r4, #0]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
   217ce:	b12a      	cbz	r2, 217dc <k_queue_get+0x7e>
	if (list->tail == node) {
   217d0:	6860      	ldr	r0, [r4, #4]
	list->head = node->next;
   217d2:	6813      	ldr	r3, [r2, #0]
   217d4:	6023      	str	r3, [r4, #0]
	if (list->tail == node) {
   217d6:	4282      	cmp	r2, r0
		list->tail = list->head;
   217d8:	bf08      	it	eq
   217da:	6063      	streq	r3, [r4, #4]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   217dc:	f381 8811 	msr	BASEPRI, r1
	} while (!val && timeout == K_FOREVER);
   217e0:	2a00      	cmp	r2, #0
   217e2:	d1d0      	bne.n	21786 <k_queue_get+0x28>
   217e4:	1c6b      	adds	r3, r5, #1
   217e6:	d0de      	beq.n	217a6 <k_queue_get+0x48>
   217e8:	e7d3      	b.n	21792 <k_queue_get+0x34>
	...

000217ec <_add_thread_to_ready_q>:
 *
 * Interrupts must be locked when calling this function.
 */

void _add_thread_to_ready_q(struct k_thread *thread)
{
   217ec:	b530      	push	{r4, r5, lr}
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
   217ee:	f990 300a 	ldrsb.w	r3, [r0, #10]
	*bmap |= _get_ready_q_prio_bit(prio);
   217f2:	4911      	ldr	r1, [pc, #68]	; (21838 <_add_thread_to_ready_q+0x4c>)
	return prio + _NUM_COOP_PRIO;
   217f4:	f103 0410 	add.w	r4, r3, #16
	return (prio + _NUM_COOP_PRIO) >> 5;
   217f8:	1162      	asrs	r2, r4, #5
   217fa:	3206      	adds	r2, #6
   217fc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
   21800:	f004 051f 	and.w	r5, r4, #31
   21804:	2401      	movs	r4, #1
   21806:	40ac      	lsls	r4, r5
   21808:	6895      	ldr	r5, [r2, #8]
	sys_dlist_t *q = &_ready_q.q[q_index];
   2180a:	3314      	adds	r3, #20
	*bmap |= _get_ready_q_prio_bit(prio);
   2180c:	432c      	orrs	r4, r5
	sys_dlist_t *q = &_ready_q.q[q_index];
   2180e:	00db      	lsls	r3, r3, #3
	*bmap |= _get_ready_q_prio_bit(prio);
   21810:	6094      	str	r4, [r2, #8]
	sys_dlist_t *q = &_ready_q.q[q_index];
   21812:	1d1a      	adds	r2, r3, #4
   21814:	440a      	add	r2, r1
	node->prev = list->tail;
   21816:	440b      	add	r3, r1
	node->next = list;
   21818:	6002      	str	r2, [r0, #0]
	node->prev = list->tail;
   2181a:	689a      	ldr	r2, [r3, #8]
   2181c:	6042      	str	r2, [r0, #4]
	list->tail->next = node;
   2181e:	689a      	ldr	r2, [r3, #8]
   21820:	6010      	str	r0, [r2, #0]
	list->tail = node;
   21822:	6098      	str	r0, [r3, #8]
	sys_dlist_append(q, &thread->base.k_q_node);

# ifndef CONFIG_SMP
	struct k_thread **cache = &_ready_q.cache;

	*cache = _is_t1_higher_prio_than_t2(thread, *cache) ? thread : *cache;
   21824:	69cb      	ldr	r3, [r1, #28]
   21826:	f990 400a 	ldrsb.w	r4, [r0, #10]
   2182a:	f993 200a 	ldrsb.w	r2, [r3, #10]
   2182e:	4294      	cmp	r4, r2
   21830:	bfa8      	it	ge
   21832:	4618      	movge	r0, r3
   21834:	61c8      	str	r0, [r1, #28]
   21836:	bd30      	pop	{r4, r5, pc}
   21838:	20002ff8 	.word	0x20002ff8

0002183c <_ready_thread>:
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2183c:	7a42      	ldrb	r2, [r0, #9]
   2183e:	f022 0104 	bic.w	r1, r2, #4
	return !(_is_thread_prevented_from_running(thread) ||
   21842:	f012 0f1b 	tst.w	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   21846:	7241      	strb	r1, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   21848:	d104      	bne.n	21854 <_ready_thread+0x18>
   2184a:	6a03      	ldr	r3, [r0, #32]
   2184c:	3301      	adds	r3, #1
   2184e:	d101      	bne.n	21854 <_ready_thread+0x18>
		_add_thread_to_ready_q(thread);
   21850:	f7ff bfcc 	b.w	217ec <_add_thread_to_ready_q>
   21854:	4770      	bx	lr
	...

00021858 <_add_timeout>:
{
   21858:	b570      	push	{r4, r5, r6, lr}
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   2185a:	610b      	str	r3, [r1, #16]
	timeout->thread = thread;
   2185c:	6088      	str	r0, [r1, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   2185e:	60ca      	str	r2, [r1, #12]
	if (!timeout_in_ticks) {
   21860:	bb13      	cbnz	r3, 218a8 <_add_timeout+0x50>
	__asm__ volatile(
   21862:	f04f 0220 	mov.w	r2, #32
   21866:	f3ef 8411 	mrs	r4, BASEPRI
   2186a:	f382 8811 	msr	BASEPRI, r2
	timeout->delta_ticks_from_prev = _INACTIVE;
   2186e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   21872:	610a      	str	r2, [r1, #16]
	if (thread) {
   21874:	b180      	cbz	r0, 21898 <_add_timeout+0x40>
	if (timeout_obj->wait_q) {
   21876:	68ca      	ldr	r2, [r1, #12]
   21878:	b14a      	cbz	r2, 2188e <_add_timeout+0x36>
	node->prev->next = node->next;
   2187a:	e890 0006 	ldmia.w	r0, {r1, r2}
   2187e:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   21880:	6801      	ldr	r1, [r0, #0]
   21882:	604a      	str	r2, [r1, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   21884:	7a42      	ldrb	r2, [r0, #9]
		thread->base.timeout.wait_q = NULL;
   21886:	61c3      	str	r3, [r0, #28]
   21888:	f022 0202 	bic.w	r2, r2, #2
   2188c:	7242      	strb	r2, [r0, #9]
		_ready_thread(thread);
   2188e:	f7ff ffd5 	bl	2183c <_ready_thread>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   21892:	f384 8811 	msr	BASEPRI, r4
   21896:	bd70      	pop	{r4, r5, r6, pc}
   21898:	f384 8811 	msr	BASEPRI, r4
		if (timeout->func) {
   2189c:	694b      	ldr	r3, [r1, #20]
   2189e:	b32b      	cbz	r3, 218ec <_add_timeout+0x94>
			timeout->func(timeout);
   218a0:	4608      	mov	r0, r1
}
   218a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			timeout->func(timeout);
   218a6:	4718      	bx	r3
	return list->head == list;
   218a8:	4a11      	ldr	r2, [pc, #68]	; (218f0 <_add_timeout+0x98>)
   218aa:	4610      	mov	r0, r2
   218ac:	f850 3f10 	ldr.w	r3, [r0, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   218b0:	4283      	cmp	r3, r0
   218b2:	d10c      	bne.n	218ce <_add_timeout+0x76>
	node->next = list;
   218b4:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
   218b6:	6953      	ldr	r3, [r2, #20]
   218b8:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
   218ba:	6953      	ldr	r3, [r2, #20]
   218bc:	6019      	str	r1, [r3, #0]
	list->tail = node;
   218be:	6151      	str	r1, [r2, #20]
   218c0:	bd70      	pop	{r4, r5, r6, pc}
		*delta -= in_q->delta_ticks_from_prev;
   218c2:	1b64      	subs	r4, r4, r5
   218c4:	610c      	str	r4, [r1, #16]
	return (node == list->tail) ? NULL : node->next;
   218c6:	6954      	ldr	r4, [r2, #20]
   218c8:	42a3      	cmp	r3, r4
   218ca:	d0f3      	beq.n	218b4 <_add_timeout+0x5c>
   218cc:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   218ce:	2b00      	cmp	r3, #0
   218d0:	d0f0      	beq.n	218b4 <_add_timeout+0x5c>
		if (*delta <= in_q->delta_ticks_from_prev) {
   218d2:	690c      	ldr	r4, [r1, #16]
   218d4:	691d      	ldr	r5, [r3, #16]
   218d6:	42ac      	cmp	r4, r5
   218d8:	dcf3      	bgt.n	218c2 <_add_timeout+0x6a>
		node->prev = insert_point->prev;
   218da:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   218dc:	1b2c      	subs	r4, r5, r4
   218de:	611c      	str	r4, [r3, #16]
   218e0:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
   218e2:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
   218e4:	685a      	ldr	r2, [r3, #4]
   218e6:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
   218e8:	6059      	str	r1, [r3, #4]
   218ea:	bd70      	pop	{r4, r5, r6, pc}
   218ec:	bd70      	pop	{r4, r5, r6, pc}
   218ee:	bf00      	nop
   218f0:	20002ff8 	.word	0x20002ff8

000218f4 <_remove_thread_from_ready_q>:
	node->prev->next = node->next;
   218f4:	e890 000a 	ldmia.w	r0, {r1, r3}
 *
 * Interrupts must be locked when calling this function.
 */

void _remove_thread_from_ready_q(struct k_thread *thread)
{
   218f8:	b510      	push	{r4, lr}
#if defined(CONFIG_MULTITHREADING) && !defined(CONFIG_SMP)
	int q_index = _get_ready_q_q_index(thread->base.prio);
   218fa:	f990 200a 	ldrsb.w	r2, [r0, #10]
   218fe:	6019      	str	r1, [r3, #0]
	node->next->prev = node->prev;
   21900:	6801      	ldr	r1, [r0, #0]
	sys_dlist_t *q = &_ready_q.q[q_index];
   21902:	3214      	adds	r2, #20
   21904:	604b      	str	r3, [r1, #4]
   21906:	4b14      	ldr	r3, [pc, #80]	; (21958 <_remove_thread_from_ready_q+0x64>)
   21908:	00d2      	lsls	r2, r2, #3
   2190a:	1d11      	adds	r1, r2, #4
	return list->head == list;
   2190c:	441a      	add	r2, r3
   2190e:	4419      	add	r1, r3

	sys_dlist_remove(&thread->base.k_q_node);
	if (sys_dlist_is_empty(q)) {
   21910:	6852      	ldr	r2, [r2, #4]
   21912:	428a      	cmp	r2, r1
   21914:	d10f      	bne.n	21936 <_remove_thread_from_ready_q+0x42>
		clear_ready_q_prio_bit(thread->base.prio);
   21916:	f990 100a 	ldrsb.w	r1, [r0, #10]
	return (prio + _NUM_COOP_PRIO) >> 5;
   2191a:	3110      	adds	r1, #16
   2191c:	114a      	asrs	r2, r1, #5
	*bmap &= ~_get_ready_q_prio_bit(prio);
   2191e:	3206      	adds	r2, #6
   21920:	eb03 0282 	add.w	r2, r3, r2, lsl #2
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
   21924:	2401      	movs	r4, #1
   21926:	f001 011f 	and.w	r1, r1, #31
   2192a:	fa04 f101 	lsl.w	r1, r4, r1
   2192e:	6894      	ldr	r4, [r2, #8]
   21930:	ea24 0401 	bic.w	r4, r4, r1
   21934:	6094      	str	r4, [r2, #8]
	}

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? get_ready_q_head() : *cache;
   21936:	69da      	ldr	r2, [r3, #28]
   21938:	4290      	cmp	r0, r2
   2193a:	d10b      	bne.n	21954 <_remove_thread_from_ready_q+0x60>
	return __builtin_ffs(op);
   2193c:	6a19      	ldr	r1, [r3, #32]
   2193e:	fa91 f2a1 	rbit	r2, r1
   21942:	2900      	cmp	r1, #0
   21944:	fab2 f282 	clz	r2, r2
   21948:	bf08      	it	eq
   2194a:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   2194e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   21952:	6a52      	ldr	r2, [r2, #36]	; 0x24
   21954:	61da      	str	r2, [r3, #28]
   21956:	bd10      	pop	{r4, pc}
   21958:	20002ff8 	.word	0x20002ff8

0002195c <_pend_thread>:
#endif

/* pend the specified thread: it must *not* be in the ready queue */
/* must be called with interrupts locked */
void _pend_thread(struct k_thread *thread, _wait_q_t *wait_q, s32_t timeout)
{
   2195c:	b430      	push	{r4, r5}
   2195e:	680c      	ldr	r4, [r1, #0]
#ifdef CONFIG_MULTITHREADING
	sys_dlist_t *wait_q_list = (sys_dlist_t *)wait_q;
	struct k_thread *pending;

	SYS_DLIST_FOR_EACH_CONTAINER(wait_q_list, pending, base.k_q_node) {
   21960:	42a1      	cmp	r1, r4
   21962:	bf08      	it	eq
   21964:	2400      	moveq	r4, #0
   21966:	b314      	cbz	r4, 219ae <_pend_thread+0x52>
		if (_is_t1_higher_prio_than_t2(thread, pending)) {
   21968:	f990 500a 	ldrsb.w	r5, [r0, #10]
   2196c:	f994 300a 	ldrsb.w	r3, [r4, #10]
   21970:	429d      	cmp	r5, r3
   21972:	da16      	bge.n	219a2 <_pend_thread+0x46>
		node->prev = insert_point->prev;
   21974:	6863      	ldr	r3, [r4, #4]
   21976:	6043      	str	r3, [r0, #4]
		node->next = insert_point;
   21978:	6004      	str	r4, [r0, #0]
		insert_point->prev->next = node;
   2197a:	6863      	ldr	r3, [r4, #4]
   2197c:	6018      	str	r0, [r3, #0]
		insert_point->prev = node;
   2197e:	6060      	str	r0, [r4, #4]
	thread->base.thread_state |= _THREAD_PENDING;
   21980:	7a43      	ldrb	r3, [r0, #9]
   21982:	f043 0302 	orr.w	r3, r3, #2
   21986:	7243      	strb	r3, [r0, #9]
	sys_dlist_append(wait_q_list, &thread->base.k_q_node);

inserted:
	_mark_thread_as_pending(thread);

	if (timeout != K_FOREVER) {
   21988:	1c53      	adds	r3, r2, #1
   2198a:	d017      	beq.n	219bc <_pend_thread+0x60>
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   2198c:	3209      	adds	r2, #9
   2198e:	230a      	movs	r3, #10
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(timeout);

		_add_thread_timeout(thread, wait_q, ticks);
	}
#endif
}
   21990:	bc30      	pop	{r4, r5}
   21992:	fbb2 f3f3 	udiv	r3, r2, r3
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   21996:	460a      	mov	r2, r1
   21998:	3301      	adds	r3, #1
   2199a:	f100 0110 	add.w	r1, r0, #16
   2199e:	f7ff bf5b 	b.w	21858 <_add_timeout>
	return (node == list->tail) ? NULL : node->next;
   219a2:	684b      	ldr	r3, [r1, #4]
   219a4:	429c      	cmp	r4, r3
   219a6:	d002      	beq.n	219ae <_pend_thread+0x52>
   219a8:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(wait_q_list, pending, base.k_q_node) {
   219aa:	2c00      	cmp	r4, #0
   219ac:	d1db      	bne.n	21966 <_pend_thread+0xa>
	node->next = list;
   219ae:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
   219b0:	684b      	ldr	r3, [r1, #4]
   219b2:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
   219b4:	684b      	ldr	r3, [r1, #4]
   219b6:	6018      	str	r0, [r3, #0]
	list->tail = node;
   219b8:	6048      	str	r0, [r1, #4]
   219ba:	e7e1      	b.n	21980 <_pend_thread+0x24>
}
   219bc:	bc30      	pop	{r4, r5}
   219be:	4770      	bx	lr

000219c0 <_pend_current_thread>:

/* pend the current thread */
/* must be called with interrupts locked */
void _pend_current_thread(_wait_q_t *wait_q, s32_t timeout)
{
   219c0:	b570      	push	{r4, r5, r6, lr}
	_remove_thread_from_ready_q(_current);
   219c2:	4c06      	ldr	r4, [pc, #24]	; (219dc <_pend_current_thread+0x1c>)
{
   219c4:	460e      	mov	r6, r1
   219c6:	4605      	mov	r5, r0
	_remove_thread_from_ready_q(_current);
   219c8:	68a0      	ldr	r0, [r4, #8]
   219ca:	f7ff ff93 	bl	218f4 <_remove_thread_from_ready_q>
	_pend_thread(_current, wait_q, timeout);
   219ce:	4632      	mov	r2, r6
   219d0:	4629      	mov	r1, r5
   219d2:	68a0      	ldr	r0, [r4, #8]
}
   219d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	_pend_thread(_current, wait_q, timeout);
   219d8:	f7ff bfc0 	b.w	2195c <_pend_thread>
   219dc:	20002ff8 	.word	0x20002ff8

000219e0 <__must_switch_threads>:
	ready_range = _ready_q.prio_bmap[0];
   219e0:	4a09      	ldr	r2, [pc, #36]	; (21a08 <__must_switch_threads+0x28>)
   219e2:	6a11      	ldr	r1, [r2, #32]

#ifdef CONFIG_KERNEL_DEBUG
	dump_ready_q();
#endif  /* CONFIG_KERNEL_DEBUG */

	return _is_prio_higher(_get_highest_ready_prio(), _current->base.prio);
   219e4:	6892      	ldr	r2, [r2, #8]
   219e6:	2900      	cmp	r1, #0
   219e8:	fa91 f3a1 	rbit	r3, r1
   219ec:	f992 000a 	ldrsb.w	r0, [r2, #10]
   219f0:	fab3 f383 	clz	r3, r3
   219f4:	bf08      	it	eq
   219f6:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
	return abs_prio - _NUM_COOP_PRIO;
   219fa:	3b10      	subs	r3, #16
#else
	return 0;
#endif
}
   219fc:	4298      	cmp	r0, r3
   219fe:	bfd4      	ite	le
   21a00:	2000      	movle	r0, #0
   21a02:	2001      	movgt	r0, #1
   21a04:	4770      	bx	lr
   21a06:	bf00      	nop
   21a08:	20002ff8 	.word	0x20002ff8

00021a0c <_reschedule_threads>:
{
   21a0c:	b510      	push	{r4, lr}
	return _is_preempt(_current) && __must_switch_threads();
   21a0e:	4b0a      	ldr	r3, [pc, #40]	; (21a38 <_reschedule_threads+0x2c>)
   21a10:	689b      	ldr	r3, [r3, #8]
   21a12:	895b      	ldrh	r3, [r3, #10]
   21a14:	2b7f      	cmp	r3, #127	; 0x7f
   21a16:	4604      	mov	r4, r0
   21a18:	d802      	bhi.n	21a20 <_reschedule_threads+0x14>
   21a1a:	f7ff ffe1 	bl	219e0 <__must_switch_threads>
   21a1e:	b910      	cbnz	r0, 21a26 <_reschedule_threads+0x1a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   21a20:	f384 8811 	msr	BASEPRI, r4
   21a24:	bd10      	pop	{r4, pc}
		_set_time(remaining);
	}

#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
   21a26:	4b05      	ldr	r3, [pc, #20]	; (21a3c <_reschedule_threads+0x30>)
   21a28:	2200      	movs	r2, #0
   21a2a:	4620      	mov	r0, r4
}
   21a2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_time_slice_elapsed = 0;
   21a30:	601a      	str	r2, [r3, #0]
   21a32:	f7df bf19 	b.w	1868 <__swap>
   21a36:	bf00      	nop
   21a38:	20002ff8 	.word	0x20002ff8
   21a3c:	20003334 	.word	0x20003334

00021a40 <k_sched_unlock>:
	__asm__ volatile(
   21a40:	f04f 0320 	mov.w	r3, #32
   21a44:	f3ef 8011 	mrs	r0, BASEPRI
   21a48:	f383 8811 	msr	BASEPRI, r3
	++_current->base.sched_locked;
   21a4c:	4b03      	ldr	r3, [pc, #12]	; (21a5c <k_sched_unlock+0x1c>)
   21a4e:	689a      	ldr	r2, [r3, #8]
   21a50:	7ad3      	ldrb	r3, [r2, #11]
   21a52:	3301      	adds	r3, #1
   21a54:	72d3      	strb	r3, [r2, #11]
	_reschedule_threads(key);
   21a56:	f7ff bfd9 	b.w	21a0c <_reschedule_threads>
   21a5a:	bf00      	nop
   21a5c:	20002ff8 	.word	0x20002ff8

00021a60 <_move_thread_to_end_of_prio_q>:
	int q_index = _get_ready_q_q_index(thread->base.prio);
   21a60:	f990 300a 	ldrsb.w	r3, [r0, #10]
	sys_dlist_t *q = &_ready_q.q[q_index];
   21a64:	4a12      	ldr	r2, [pc, #72]	; (21ab0 <_move_thread_to_end_of_prio_q+0x50>)
{
   21a66:	b530      	push	{r4, r5, lr}
	sys_dlist_t *q = &_ready_q.q[q_index];
   21a68:	3314      	adds	r3, #20
   21a6a:	00db      	lsls	r3, r3, #3
   21a6c:	1d19      	adds	r1, r3, #4
   21a6e:	4411      	add	r1, r2
	if (sys_dlist_is_tail(q, &thread->base.k_q_node)) {
   21a70:	684c      	ldr	r4, [r1, #4]
   21a72:	42a0      	cmp	r0, r4
   21a74:	d01b      	beq.n	21aae <_move_thread_to_end_of_prio_q+0x4e>
	node->prev->next = node->next;
   21a76:	6844      	ldr	r4, [r0, #4]
   21a78:	6805      	ldr	r5, [r0, #0]
   21a7a:	6025      	str	r5, [r4, #0]
	node->next->prev = node->prev;
   21a7c:	6805      	ldr	r5, [r0, #0]
	node->prev = list->tail;
   21a7e:	4413      	add	r3, r2
	node->next->prev = node->prev;
   21a80:	606c      	str	r4, [r5, #4]
	node->next = list;
   21a82:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
   21a84:	6899      	ldr	r1, [r3, #8]
   21a86:	6041      	str	r1, [r0, #4]
	list->tail->next = node;
   21a88:	6899      	ldr	r1, [r3, #8]
   21a8a:	6008      	str	r0, [r1, #0]
	list->tail = node;
   21a8c:	6098      	str	r0, [r3, #8]
	*cache = *cache == thread ? get_ready_q_head() : *cache;
   21a8e:	69d3      	ldr	r3, [r2, #28]
   21a90:	4298      	cmp	r0, r3
   21a92:	d10b      	bne.n	21aac <_move_thread_to_end_of_prio_q+0x4c>
	return __builtin_ffs(op);
   21a94:	6a11      	ldr	r1, [r2, #32]
   21a96:	fa91 f3a1 	rbit	r3, r1
   21a9a:	2900      	cmp	r1, #0
   21a9c:	fab3 f383 	clz	r3, r3
   21aa0:	bf08      	it	eq
   21aa2:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   21aa6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   21aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   21aac:	61d3      	str	r3, [r2, #28]
   21aae:	bd30      	pop	{r4, r5, pc}
   21ab0:	20002ff8 	.word	0x20002ff8

00021ab4 <_impl_k_yield>:
{
   21ab4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   21ab6:	f04f 0320 	mov.w	r3, #32
   21aba:	f3ef 8511 	mrs	r5, BASEPRI
   21abe:	f383 8811 	msr	BASEPRI, r3
	_move_thread_to_end_of_prio_q(_current);
   21ac2:	4c09      	ldr	r4, [pc, #36]	; (21ae8 <_impl_k_yield+0x34>)
   21ac4:	68a0      	ldr	r0, [r4, #8]
   21ac6:	f7ff ffcb 	bl	21a60 <_move_thread_to_end_of_prio_q>
	if (_current == _get_next_ready_thread()) {
   21aca:	68a2      	ldr	r2, [r4, #8]
   21acc:	69e3      	ldr	r3, [r4, #28]
   21ace:	429a      	cmp	r2, r3
   21ad0:	d102      	bne.n	21ad8 <_impl_k_yield+0x24>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   21ad2:	f385 8811 	msr	BASEPRI, r5
   21ad6:	bd38      	pop	{r3, r4, r5, pc}
	_time_slice_elapsed = 0;
   21ad8:	4b04      	ldr	r3, [pc, #16]	; (21aec <_impl_k_yield+0x38>)
   21ada:	2200      	movs	r2, #0
   21adc:	601a      	str	r2, [r3, #0]
   21ade:	4628      	mov	r0, r5
}
   21ae0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   21ae4:	f7df bec0 	b.w	1868 <__swap>
   21ae8:	20002ff8 	.word	0x20002ff8
   21aec:	20003334 	.word	0x20003334

00021af0 <_impl_k_current_get>:
}
   21af0:	4b01      	ldr	r3, [pc, #4]	; (21af8 <_impl_k_current_get+0x8>)
   21af2:	6898      	ldr	r0, [r3, #8]
   21af4:	4770      	bx	lr
   21af6:	bf00      	nop
   21af8:	20002ff8 	.word	0x20002ff8

00021afc <_is_thread_time_slicing>:
	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
   21afc:	4b0d      	ldr	r3, [pc, #52]	; (21b34 <_is_thread_time_slicing+0x38>)
   21afe:	681b      	ldr	r3, [r3, #0]
   21b00:	2b00      	cmp	r3, #0
   21b02:	dd14      	ble.n	21b2e <_is_thread_time_slicing+0x32>
	return thread == _idle_thread;
   21b04:	4b0c      	ldr	r3, [pc, #48]	; (21b38 <_is_thread_time_slicing+0x3c>)
   21b06:	681b      	ldr	r3, [r3, #0]
   21b08:	4298      	cmp	r0, r3
   21b0a:	d010      	beq.n	21b2e <_is_thread_time_slicing+0x32>
	    || _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
   21b0c:	4a0b      	ldr	r2, [pc, #44]	; (21b3c <_is_thread_time_slicing+0x40>)
   21b0e:	f990 300a 	ldrsb.w	r3, [r0, #10]
   21b12:	6812      	ldr	r2, [r2, #0]
   21b14:	4293      	cmp	r3, r2
   21b16:	db0a      	blt.n	21b2e <_is_thread_time_slicing+0x32>
	return list->head != list->tail;
   21b18:	f103 0214 	add.w	r2, r3, #20
   21b1c:	4b08      	ldr	r3, [pc, #32]	; (21b40 <_is_thread_time_slicing+0x44>)
   21b1e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   21b22:	6858      	ldr	r0, [r3, #4]
   21b24:	689b      	ldr	r3, [r3, #8]
   21b26:	1ac0      	subs	r0, r0, r3
   21b28:	bf18      	it	ne
   21b2a:	2001      	movne	r0, #1
	return sys_dlist_has_multiple_nodes(q);
   21b2c:	4770      	bx	lr
		return 0;
   21b2e:	2000      	movs	r0, #0
}
   21b30:	4770      	bx	lr
   21b32:	bf00      	nop
   21b34:	2000311c 	.word	0x2000311c
   21b38:	00027308 	.word	0x00027308
   21b3c:	20003120 	.word	0x20003120
   21b40:	20002ff8 	.word	0x20002ff8

00021b44 <_update_time_slice_before_swap>:
	_time_slice_elapsed = 0;
   21b44:	4b01      	ldr	r3, [pc, #4]	; (21b4c <_update_time_slice_before_swap+0x8>)
   21b46:	2200      	movs	r2, #0
   21b48:	601a      	str	r2, [r3, #0]
   21b4a:	4770      	bx	lr
   21b4c:	20003334 	.word	0x20003334

00021b50 <_unpend_first_thread>:
	if (_handling_timeouts) {
   21b50:	4a10      	ldr	r2, [pc, #64]	; (21b94 <_unpend_first_thread+0x44>)
   21b52:	6812      	ldr	r2, [r2, #0]
{
   21b54:	4603      	mov	r3, r0
   21b56:	6800      	ldr	r0, [r0, #0]
	if (_handling_timeouts) {
   21b58:	b16a      	cbz	r2, 21b76 <_unpend_first_thread+0x26>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21b5a:	4283      	cmp	r3, r0
   21b5c:	bf08      	it	eq
   21b5e:	2000      	moveq	r0, #0
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
   21b60:	b908      	cbnz	r0, 21b66 <_unpend_first_thread+0x16>
   21b62:	2000      	movs	r0, #0
   21b64:	4770      	bx	lr
			if (_is_thread_timeout_expired(thread)) {
   21b66:	6a02      	ldr	r2, [r0, #32]
   21b68:	3202      	adds	r2, #2
   21b6a:	d107      	bne.n	21b7c <_unpend_first_thread+0x2c>
	return (node == list->tail) ? NULL : node->next;
   21b6c:	685a      	ldr	r2, [r3, #4]
   21b6e:	4290      	cmp	r0, r2
   21b70:	d0f7      	beq.n	21b62 <_unpend_first_thread+0x12>
   21b72:	6800      	ldr	r0, [r0, #0]
   21b74:	e7f4      	b.n	21b60 <_unpend_first_thread+0x10>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21b76:	4283      	cmp	r3, r0
   21b78:	d00a      	beq.n	21b90 <_unpend_first_thread+0x40>
	if (thread) {
   21b7a:	b150      	cbz	r0, 21b92 <_unpend_first_thread+0x42>
	node->prev->next = node->next;
   21b7c:	e890 000c 	ldmia.w	r0, {r2, r3}
   21b80:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   21b82:	6802      	ldr	r2, [r0, #0]
   21b84:	6053      	str	r3, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   21b86:	7a43      	ldrb	r3, [r0, #9]
   21b88:	f023 0302 	bic.w	r3, r3, #2
   21b8c:	7243      	strb	r3, [r0, #9]
   21b8e:	4770      	bx	lr
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21b90:	4610      	mov	r0, r2
		_unpend_thread(thread);
	}

	return thread;
}
   21b92:	4770      	bx	lr
   21b94:	20003330 	.word	0x20003330

00021b98 <_impl_k_sem_init>:

	sem->count = initial_count;
	sem->limit = limit;
	sys_dlist_init(&sem->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&sem->poll_events);
   21b98:	f100 0310 	add.w	r3, r0, #16
	sem->count = initial_count;
   21b9c:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   21b9e:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   21ba0:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   21ba2:	6040      	str	r0, [r0, #4]
	list->head = (sys_dnode_t *)list;
   21ba4:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   21ba6:	6143      	str	r3, [r0, #20]
   21ba8:	4770      	bx	lr
	...

00021bac <_impl_k_sem_give>:

	_set_thread_return_value(thread, 0);
}

void _impl_k_sem_give(struct k_sem *sem)
{
   21bac:	b570      	push	{r4, r5, r6, lr}
   21bae:	4605      	mov	r5, r0
	__asm__ volatile(
   21bb0:	f04f 0320 	mov.w	r3, #32
   21bb4:	f3ef 8611 	mrs	r6, BASEPRI
   21bb8:	f383 8811 	msr	BASEPRI, r3
	struct k_thread *thread = _unpend_first_thread(&sem->wait_q);
   21bbc:	f7ff ffc8 	bl	21b50 <_unpend_first_thread>
	if (!thread) {
   21bc0:	4604      	mov	r4, r0
   21bc2:	b998      	cbnz	r0, 21bec <_impl_k_sem_give+0x40>
	sem->count += (sem->count != sem->limit);
   21bc4:	68ab      	ldr	r3, [r5, #8]
   21bc6:	68ea      	ldr	r2, [r5, #12]
   21bc8:	429a      	cmp	r2, r3
   21bca:	bf18      	it	ne
   21bcc:	3301      	addne	r3, #1
   21bce:	60ab      	str	r3, [r5, #8]
	return _handle_obj_poll_events(&sem->poll_events, state);
   21bd0:	2102      	movs	r1, #2
   21bd2:	f105 0010 	add.w	r0, r5, #16
   21bd6:	f000 fe01 	bl	227dc <_handle_obj_poll_events>
	unsigned int key;

	key = irq_lock();

	if (do_sem_give(sem)) {
   21bda:	2800      	cmp	r0, #0
   21bdc:	d03b      	beq.n	21c56 <_impl_k_sem_give+0xaa>
	_update_time_slice_before_swap();
   21bde:	f7ff ffb1 	bl	21b44 <_update_time_slice_before_swap>
	return __swap(key);
   21be2:	4630      	mov	r0, r6
		_Swap(key);
	} else {
		irq_unlock(key);
	}
}
   21be4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   21be8:	f7df be3e 	b.w	1868 <__swap>
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   21bec:	6a01      	ldr	r1, [r0, #32]
	return _abort_timeout(&thread->base.timeout);
   21bee:	f100 0210 	add.w	r2, r0, #16
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   21bf2:	1c48      	adds	r0, r1, #1
   21bf4:	d00f      	beq.n	21c16 <_impl_k_sem_give+0x6a>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   21bf6:	4b1b      	ldr	r3, [pc, #108]	; (21c64 <_impl_k_sem_give+0xb8>)
   21bf8:	695b      	ldr	r3, [r3, #20]
   21bfa:	429a      	cmp	r2, r3
	return (node == list->tail) ? NULL : node->next;
   21bfc:	bf1f      	itttt	ne
   21bfe:	6922      	ldrne	r2, [r4, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   21c00:	6913      	ldrne	r3, [r2, #16]
   21c02:	185b      	addne	r3, r3, r1
   21c04:	6113      	strne	r3, [r2, #16]
	node->prev->next = node->next;
   21c06:	6963      	ldr	r3, [r4, #20]
   21c08:	6922      	ldr	r2, [r4, #16]
   21c0a:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   21c0c:	6922      	ldr	r2, [r4, #16]
   21c0e:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   21c10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21c14:	6223      	str	r3, [r4, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   21c16:	7a63      	ldrb	r3, [r4, #9]
   21c18:	f023 0204 	bic.w	r2, r3, #4
	return !(_is_thread_prevented_from_running(thread) ||
   21c1c:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   21c20:	7262      	strb	r2, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   21c22:	d102      	bne.n	21c2a <_impl_k_sem_give+0x7e>
   21c24:	6a23      	ldr	r3, [r4, #32]
   21c26:	3301      	adds	r3, #1
   21c28:	d018      	beq.n	21c5c <_impl_k_sem_give+0xb0>
   21c2a:	2300      	movs	r3, #0
   21c2c:	6663      	str	r3, [r4, #100]	; 0x64
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   21c2e:	f3ef 8305 	mrs	r3, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
   21c32:	2b0d      	cmp	r3, #13
   21c34:	d80f      	bhi.n	21c56 <_impl_k_sem_give+0xaa>
   21c36:	b11b      	cbz	r3, 21c40 <_impl_k_sem_give+0x94>
   21c38:	4b0b      	ldr	r3, [pc, #44]	; (21c68 <_impl_k_sem_give+0xbc>)
   21c3a:	685b      	ldr	r3, [r3, #4]
   21c3c:	051b      	lsls	r3, r3, #20
   21c3e:	d50a      	bpl.n	21c56 <_impl_k_sem_give+0xaa>
	return _is_preempt(_current) && __must_switch_threads();
   21c40:	4b08      	ldr	r3, [pc, #32]	; (21c64 <_impl_k_sem_give+0xb8>)
   21c42:	689b      	ldr	r3, [r3, #8]
   21c44:	895b      	ldrh	r3, [r3, #10]
   21c46:	2b7f      	cmp	r3, #127	; 0x7f
   21c48:	d805      	bhi.n	21c56 <_impl_k_sem_give+0xaa>
   21c4a:	f7ff fec9 	bl	219e0 <__must_switch_threads>
   21c4e:	3000      	adds	r0, #0
   21c50:	bf18      	it	ne
   21c52:	2001      	movne	r0, #1
   21c54:	e7c1      	b.n	21bda <_impl_k_sem_give+0x2e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   21c56:	f386 8811 	msr	BASEPRI, r6
   21c5a:	bd70      	pop	{r4, r5, r6, pc}
		_add_thread_to_ready_q(thread);
   21c5c:	4620      	mov	r0, r4
   21c5e:	f7ff fdc5 	bl	217ec <_add_thread_to_ready_q>
   21c62:	e7e2      	b.n	21c2a <_impl_k_sem_give+0x7e>
   21c64:	20002ff8 	.word	0x20002ff8
   21c68:	e000ed00 	.word	0xe000ed00

00021c6c <_impl_k_sem_take>:
#ifdef CONFIG_USERSPACE
_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
#endif

int _impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   21c6c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   21c6e:	f04f 0320 	mov.w	r3, #32
   21c72:	f3ef 8411 	mrs	r4, BASEPRI
   21c76:	f383 8811 	msr	BASEPRI, r3
	__ASSERT(!_is_in_isr() || timeout == K_NO_WAIT, "");

	unsigned int key = irq_lock();

	if (likely(sem->count > 0)) {
   21c7a:	6883      	ldr	r3, [r0, #8]
   21c7c:	b12b      	cbz	r3, 21c8a <_impl_k_sem_take+0x1e>
		sem->count--;
   21c7e:	3b01      	subs	r3, #1
   21c80:	6083      	str	r3, [r0, #8]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   21c82:	f384 8811 	msr	BASEPRI, r4
		irq_unlock(key);
		return 0;
   21c86:	2000      	movs	r0, #0
   21c88:	bd38      	pop	{r3, r4, r5, pc}
	}

	if (timeout == K_NO_WAIT) {
   21c8a:	b921      	cbnz	r1, 21c96 <_impl_k_sem_take+0x2a>
   21c8c:	f384 8811 	msr	BASEPRI, r4
		irq_unlock(key);
		return -EBUSY;
   21c90:	f06f 000f 	mvn.w	r0, #15
   21c94:	bd38      	pop	{r3, r4, r5, pc}
	}

	_pend_current_thread(&sem->wait_q, timeout);
   21c96:	f7ff fe93 	bl	219c0 <_pend_current_thread>
	_update_time_slice_before_swap();
   21c9a:	f7ff ff53 	bl	21b44 <_update_time_slice_before_swap>
	return __swap(key);
   21c9e:	4620      	mov	r0, r4

	return _Swap(key);
}
   21ca0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   21ca4:	f7df bde0 	b.w	1868 <__swap>

00021ca8 <_impl_k_uptime_get_32>:
u32_t _tick_get_32(void)
{
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)_get_elapsed_clock_time();
#else
	return (u32_t)_sys_clock_tick_count;
   21ca8:	4b03      	ldr	r3, [pc, #12]	; (21cb8 <_impl_k_uptime_get_32+0x10>)
   21caa:	e9d3 0100 	ldrd	r0, r1, [r3]
	return (u64_t)ticks * _ms_per_tick;
   21cae:	230a      	movs	r3, #10
   21cb0:	fba0 0103 	umull	r0, r1, r0, r3
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get_32());
}
   21cb4:	4770      	bx	lr
   21cb6:	bf00      	nop
   21cb8:	20003338 	.word	0x20003338

00021cbc <_tick_get>:
	__asm__ volatile(
   21cbc:	f04f 0220 	mov.w	r2, #32
   21cc0:	f3ef 8311 	mrs	r3, BASEPRI
   21cc4:	f382 8811 	msr	BASEPRI, r2
	unsigned int imask = irq_lock();

#ifdef CONFIG_TICKLESS_KERNEL
	tmp_sys_clock_tick_count = _get_elapsed_clock_time();
#else
	tmp_sys_clock_tick_count = _sys_clock_tick_count;
   21cc8:	4a02      	ldr	r2, [pc, #8]	; (21cd4 <_tick_get+0x18>)
   21cca:	e9d2 0100 	ldrd	r0, r1, [r2]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   21cce:	f383 8811 	msr	BASEPRI, r3
#endif
	irq_unlock(imask);
	return tmp_sys_clock_tick_count;
}
   21cd2:	4770      	bx	lr
   21cd4:	20003338 	.word	0x20003338

00021cd8 <_impl_k_uptime_get>:
FUNC_ALIAS(_tick_get, sys_tick_get, s64_t);

s64_t _impl_k_uptime_get(void)
{
   21cd8:	b510      	push	{r4, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get());
   21cda:	f7ff ffef 	bl	21cbc <_tick_get>
   21cde:	240a      	movs	r4, #10
   21ce0:	fba0 2304 	umull	r2, r3, r0, r4
   21ce4:	fb04 3301 	mla	r3, r4, r1, r3
}
   21ce8:	4610      	mov	r0, r2
   21cea:	4619      	mov	r1, r3
   21cec:	bd10      	pop	{r4, pc}
	...

00021cf0 <_nano_sys_clock_tick_announce>:
 * timers that have expired and wake up the threads pending on them.
 *
 * @return N/A
 */
void _nano_sys_clock_tick_announce(s32_t ticks)
{
   21cf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21cf4:	4607      	mov	r7, r0
	__asm__ volatile(
   21cf6:	f04f 0320 	mov.w	r3, #32
   21cfa:	f3ef 8011 	mrs	r0, BASEPRI
   21cfe:	f383 8811 	msr	BASEPRI, r3

	K_DEBUG("ticks: %d\n", ticks);

	/* 64-bit value, ensure atomic access with irq lock */
	key = irq_lock();
	_sys_clock_tick_count += ticks;
   21d02:	4963      	ldr	r1, [pc, #396]	; (21e90 <_nano_sys_clock_tick_announce+0x1a0>)
   21d04:	e9d1 4500 	ldrd	r4, r5, [r1]
   21d08:	19e2      	adds	r2, r4, r7
   21d0a:	eb45 73e7 	adc.w	r3, r5, r7, asr #31
   21d0e:	e9c1 2300 	strd	r2, r3, [r1]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   21d12:	f380 8811 	msr	BASEPRI, r0
	list->head = (sys_dnode_t *)list;
   21d16:	466e      	mov	r6, sp
   21d18:	f8cd d000 	str.w	sp, [sp]
	list->tail = (sys_dnode_t *)list;
   21d1c:	f8cd d004 	str.w	sp, [sp, #4]
	__asm__ volatile(
   21d20:	f04f 0320 	mov.w	r3, #32
   21d24:	f3ef 8011 	mrs	r0, BASEPRI
   21d28:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   21d2c:	4c59      	ldr	r4, [pc, #356]	; (21e94 <_nano_sys_clock_tick_announce+0x1a4>)
   21d2e:	4621      	mov	r1, r4
   21d30:	4602      	mov	r2, r0
   21d32:	f851 3f10 	ldr.w	r3, [r1, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21d36:	428b      	cmp	r3, r1
   21d38:	d000      	beq.n	21d3c <_nano_sys_clock_tick_announce+0x4c>
	if (!next) {
   21d3a:	b9fb      	cbnz	r3, 21d7c <_nano_sys_clock_tick_announce+0x8c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   21d3c:	f380 8811 	msr	BASEPRI, r0
	if (!_is_thread_time_slicing(_current)) {
   21d40:	68a0      	ldr	r0, [r4, #8]
   21d42:	f7ff fedb 	bl	21afc <_is_thread_time_slicing>
   21d46:	b1b0      	cbz	r0, 21d76 <_nano_sys_clock_tick_announce+0x86>
	_time_slice_elapsed += __ticks_to_ms(ticks);
   21d48:	4a53      	ldr	r2, [pc, #332]	; (21e98 <_nano_sys_clock_tick_announce+0x1a8>)
   21d4a:	6811      	ldr	r1, [r2, #0]
   21d4c:	230a      	movs	r3, #10
   21d4e:	fb07 1703 	mla	r7, r7, r3, r1
	if (_time_slice_elapsed >= _time_slice_duration) {
   21d52:	4b52      	ldr	r3, [pc, #328]	; (21e9c <_nano_sys_clock_tick_announce+0x1ac>)
	_time_slice_elapsed += __ticks_to_ms(ticks);
   21d54:	6017      	str	r7, [r2, #0]
	if (_time_slice_elapsed >= _time_slice_duration) {
   21d56:	681b      	ldr	r3, [r3, #0]
   21d58:	429f      	cmp	r7, r3
   21d5a:	db0c      	blt.n	21d76 <_nano_sys_clock_tick_announce+0x86>
		_time_slice_elapsed = 0;
   21d5c:	2300      	movs	r3, #0
   21d5e:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   21d60:	f04f 0320 	mov.w	r3, #32
   21d64:	f3ef 8511 	mrs	r5, BASEPRI
   21d68:	f383 8811 	msr	BASEPRI, r3
		_move_thread_to_end_of_prio_q(_current);
   21d6c:	68a0      	ldr	r0, [r4, #8]
   21d6e:	f7ff fe77 	bl	21a60 <_move_thread_to_end_of_prio_q>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   21d72:	f385 8811 	msr	BASEPRI, r5
	if ((!remaining && next_to) || (next_to < remaining)) {
		/* Clears current program if next_to = 0 and remaining > 0 */
		_set_time(next_to);
	}
#endif
}
   21d76:	b003      	add	sp, #12
   21d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_handling_timeouts = 1;
   21d7c:	4d48      	ldr	r5, [pc, #288]	; (21ea0 <_nano_sys_clock_tick_announce+0x1b0>)
   21d7e:	2101      	movs	r1, #1
   21d80:	6029      	str	r1, [r5, #0]
   21d82:	46ab      	mov	fp, r5
   21d84:	4639      	mov	r1, r7
			timeout->delta_ticks_from_prev = 0;
   21d86:	f04f 0e00 	mov.w	lr, #0
			timeout->delta_ticks_from_prev = _EXPIRED;
   21d8a:	f06f 0c01 	mvn.w	ip, #1
		s32_t tmp = timeout->delta_ticks_from_prev;
   21d8e:	6918      	ldr	r0, [r3, #16]
		if (timeout->delta_ticks_from_prev < ticks) {
   21d90:	4288      	cmp	r0, r1
			timeout->delta_ticks_from_prev -= ticks;
   21d92:	bfaa      	itet	ge
   21d94:	eba0 0801 	subge.w	r8, r0, r1
			timeout->delta_ticks_from_prev = 0;
   21d98:	f8c3 e010 	strlt.w	lr, [r3, #16]
			timeout->delta_ticks_from_prev -= ticks;
   21d9c:	f8c3 8010 	strge.w	r8, [r3, #16]
		ticks -= tmp;
   21da0:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   21da2:	6960      	ldr	r0, [r4, #20]
		if (timeout->delta_ticks_from_prev == 0) {
   21da4:	691d      	ldr	r5, [r3, #16]
   21da6:	4298      	cmp	r0, r3
   21da8:	bf14      	ite	ne
   21daa:	6818      	ldrne	r0, [r3, #0]
   21dac:	2000      	moveq	r0, #0
   21dae:	b9d5      	cbnz	r5, 21de6 <_nano_sys_clock_tick_announce+0xf6>
	node->prev->next = node->next;
   21db0:	e893 0220 	ldmia.w	r3, {r5, r9}
   21db4:	f8c9 5000 	str.w	r5, [r9]
	node->next->prev = node->prev;
   21db8:	681d      	ldr	r5, [r3, #0]
   21dba:	f8c5 9004 	str.w	r9, [r5, #4]
	node->next = list->head;
   21dbe:	9d00      	ldr	r5, [sp, #0]
	node->prev = list;
   21dc0:	e883 0060 	stmia.w	r3, {r5, r6}
	list->head->prev = node;
   21dc4:	9d00      	ldr	r5, [sp, #0]
	list->head = node;
   21dc6:	9300      	str	r3, [sp, #0]
	list->head->prev = node;
   21dc8:	606b      	str	r3, [r5, #4]
			timeout->delta_ticks_from_prev = _EXPIRED;
   21dca:	f8c3 c010 	str.w	ip, [r3, #16]
   21dce:	f382 8811 	msr	BASEPRI, r2
	__asm__ volatile(
   21dd2:	f04f 0320 	mov.w	r3, #32
   21dd6:	f3ef 8211 	mrs	r2, BASEPRI
   21dda:	f383 8811 	msr	BASEPRI, r3
	while (next) {
   21dde:	4603      	mov	r3, r0
   21de0:	2800      	cmp	r0, #0
   21de2:	d1d4      	bne.n	21d8e <_nano_sys_clock_tick_announce+0x9e>
   21de4:	e001      	b.n	21dea <_nano_sys_clock_tick_announce+0xfa>
		} else if (ticks <= 0) {
   21de6:	2900      	cmp	r1, #0
   21de8:	dcf1      	bgt.n	21dce <_nano_sys_clock_tick_announce+0xde>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   21dea:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
   21dee:	9800      	ldr	r0, [sp, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21df0:	42b0      	cmp	r0, r6
   21df2:	d103      	bne.n	21dfc <_nano_sys_clock_tick_announce+0x10c>
	_handling_timeouts = 0;
   21df4:	2300      	movs	r3, #0
   21df6:	f8cb 3000 	str.w	r3, [fp]
   21dfa:	e7a1      	b.n	21d40 <_nano_sys_clock_tick_announce+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   21dfc:	2800      	cmp	r0, #0
   21dfe:	d0f9      	beq.n	21df4 <_nano_sys_clock_tick_announce+0x104>
	return (node == list->tail) ? NULL : node->next;
   21e00:	9b01      	ldr	r3, [sp, #4]
   21e02:	4298      	cmp	r0, r3
   21e04:	d101      	bne.n	21e0a <_nano_sys_clock_tick_announce+0x11a>
   21e06:	2600      	movs	r6, #0
   21e08:	e000      	b.n	21e0c <_nano_sys_clock_tick_announce+0x11c>
   21e0a:	6806      	ldr	r6, [r0, #0]
	timeout->delta_ticks_from_prev = _INACTIVE;
   21e0c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
		thread->base.timeout.wait_q = NULL;
   21e10:	f04f 0900 	mov.w	r9, #0
	node->prev->next = node->next;
   21e14:	e890 000c 	ldmia.w	r0, {r2, r3}
   21e18:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   21e1a:	6802      	ldr	r2, [r0, #0]
   21e1c:	6053      	str	r3, [r2, #4]
	struct k_thread *thread = timeout->thread;
   21e1e:	6883      	ldr	r3, [r0, #8]
	__asm__ volatile(
   21e20:	f04f 0220 	mov.w	r2, #32
   21e24:	f3ef 8a11 	mrs	sl, BASEPRI
   21e28:	f382 8811 	msr	BASEPRI, r2
	timeout->delta_ticks_from_prev = _INACTIVE;
   21e2c:	f8c0 8010 	str.w	r8, [r0, #16]
	if (thread) {
   21e30:	b1fb      	cbz	r3, 21e72 <_nano_sys_clock_tick_announce+0x182>
	if (timeout_obj->wait_q) {
   21e32:	68c2      	ldr	r2, [r0, #12]
   21e34:	b152      	cbz	r2, 21e4c <_nano_sys_clock_tick_announce+0x15c>
	node->prev->next = node->next;
   21e36:	6859      	ldr	r1, [r3, #4]
   21e38:	681a      	ldr	r2, [r3, #0]
   21e3a:	600a      	str	r2, [r1, #0]
	node->next->prev = node->prev;
   21e3c:	681a      	ldr	r2, [r3, #0]
   21e3e:	6051      	str	r1, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   21e40:	7a5a      	ldrb	r2, [r3, #9]
		thread->base.timeout.wait_q = NULL;
   21e42:	f8c3 901c 	str.w	r9, [r3, #28]
   21e46:	f022 0202 	bic.w	r2, r2, #2
   21e4a:	725a      	strb	r2, [r3, #9]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   21e4c:	7a5a      	ldrb	r2, [r3, #9]
   21e4e:	f022 0104 	bic.w	r1, r2, #4
	return !(_is_thread_prevented_from_running(thread) ||
   21e52:	f012 0f1b 	tst.w	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   21e56:	7259      	strb	r1, [r3, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   21e58:	d102      	bne.n	21e60 <_nano_sys_clock_tick_announce+0x170>
   21e5a:	6a1a      	ldr	r2, [r3, #32]
   21e5c:	3201      	adds	r2, #1
   21e5e:	d013      	beq.n	21e88 <_nano_sys_clock_tick_announce+0x198>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   21e60:	f38a 8811 	msr	BASEPRI, sl
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   21e64:	2e00      	cmp	r6, #0
   21e66:	d0c5      	beq.n	21df4 <_nano_sys_clock_tick_announce+0x104>
	return (node == list->tail) ? NULL : node->next;
   21e68:	9b01      	ldr	r3, [sp, #4]
   21e6a:	42b3      	cmp	r3, r6
   21e6c:	d108      	bne.n	21e80 <_nano_sys_clock_tick_announce+0x190>
   21e6e:	2300      	movs	r3, #0
   21e70:	e007      	b.n	21e82 <_nano_sys_clock_tick_announce+0x192>
   21e72:	f38a 8811 	msr	BASEPRI, sl
		if (timeout->func) {
   21e76:	6943      	ldr	r3, [r0, #20]
   21e78:	2b00      	cmp	r3, #0
   21e7a:	d0f3      	beq.n	21e64 <_nano_sys_clock_tick_announce+0x174>
			timeout->func(timeout);
   21e7c:	4798      	blx	r3
   21e7e:	e7f1      	b.n	21e64 <_nano_sys_clock_tick_announce+0x174>
   21e80:	6833      	ldr	r3, [r6, #0]
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   21e82:	4630      	mov	r0, r6
   21e84:	461e      	mov	r6, r3
   21e86:	e7c5      	b.n	21e14 <_nano_sys_clock_tick_announce+0x124>
		_add_thread_to_ready_q(thread);
   21e88:	4618      	mov	r0, r3
   21e8a:	f7ff fcaf 	bl	217ec <_add_thread_to_ready_q>
   21e8e:	e7e7      	b.n	21e60 <_nano_sys_clock_tick_announce+0x170>
   21e90:	20003338 	.word	0x20003338
   21e94:	20002ff8 	.word	0x20002ff8
   21e98:	20003334 	.word	0x20003334
   21e9c:	2000311c 	.word	0x2000311c
   21ea0:	20003330 	.word	0x20003330

00021ea4 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   21ea4:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   21ea6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   21eaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21eae:	4903      	ldr	r1, [pc, #12]	; (21ebc <k_sys_work_q_init+0x18>)
   21eb0:	4803      	ldr	r0, [pc, #12]	; (21ec0 <k_sys_work_q_init+0x1c>)
   21eb2:	f000 f98d 	bl	221d0 <k_work_q_start>
		       sys_work_q_stack,
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);

	return 0;
}
   21eb6:	2000      	movs	r0, #0
   21eb8:	bd08      	pop	{r3, pc}
   21eba:	bf00      	nop
   21ebc:	20009868 	.word	0x20009868
   21ec0:	20003340 	.word	0x20003340

00021ec4 <_is_thread_ready>:
	return !(_is_thread_prevented_from_running(thread) ||
   21ec4:	7a43      	ldrb	r3, [r0, #9]
   21ec6:	06da      	lsls	r2, r3, #27
   21ec8:	d104      	bne.n	21ed4 <_is_thread_ready+0x10>
   21eca:	6a00      	ldr	r0, [r0, #32]
   21ecc:	1c43      	adds	r3, r0, #1
   21ece:	4258      	negs	r0, r3
   21ed0:	4158      	adcs	r0, r3
   21ed2:	4770      	bx	lr
   21ed4:	2000      	movs	r0, #0
}
   21ed6:	4770      	bx	lr

00021ed8 <_abort_timeout>:
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   21ed8:	6903      	ldr	r3, [r0, #16]
   21eda:	1c5a      	adds	r2, r3, #1
   21edc:	d011      	beq.n	21f02 <_abort_timeout+0x2a>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   21ede:	4a0a      	ldr	r2, [pc, #40]	; (21f08 <_abort_timeout+0x30>)
   21ee0:	6952      	ldr	r2, [r2, #20]
   21ee2:	4290      	cmp	r0, r2
   21ee4:	bf1f      	itttt	ne
   21ee6:	6801      	ldrne	r1, [r0, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   21ee8:	690a      	ldrne	r2, [r1, #16]
   21eea:	189b      	addne	r3, r3, r2
   21eec:	610b      	strne	r3, [r1, #16]
	node->prev->next = node->next;
   21eee:	e890 000c 	ldmia.w	r0, {r2, r3}
   21ef2:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   21ef4:	6802      	ldr	r2, [r0, #0]
   21ef6:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   21ef8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21efc:	6103      	str	r3, [r0, #16]
	return 0;
   21efe:	2000      	movs	r0, #0
   21f00:	4770      	bx	lr
		return _INACTIVE;
   21f02:	4618      	mov	r0, r3
}
   21f04:	4770      	bx	lr
   21f06:	bf00      	nop
   21f08:	20002ff8 	.word	0x20002ff8

00021f0c <schedule_new_thread.part.13>:
_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_start, K_OBJ_THREAD, struct k_thread *);
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
   21f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
	__asm__ volatile(
   21f0e:	f04f 0320 	mov.w	r3, #32
   21f12:	f3ef 8611 	mrs	r6, BASEPRI
   21f16:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   21f1a:	4a19      	ldr	r2, [pc, #100]	; (21f80 <schedule_new_thread.part.13+0x74>)
	timeout->thread = thread;
   21f1c:	6180      	str	r0, [r0, #24]
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   21f1e:	230a      	movs	r3, #10
   21f20:	3109      	adds	r1, #9
   21f22:	fbb1 f1f3 	udiv	r1, r1, r3
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (delay == 0) {
		k_thread_start(thread);
	} else {
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(delay);
   21f26:	3101      	adds	r1, #1
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   21f28:	6201      	str	r1, [r0, #32]
   21f2a:	4611      	mov	r1, r2
	timeout->wait_q = (sys_dlist_t *)wait_q;
   21f2c:	2300      	movs	r3, #0
   21f2e:	61c3      	str	r3, [r0, #28]
   21f30:	f851 3f10 	ldr.w	r3, [r1, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21f34:	428b      	cmp	r3, r1
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   21f36:	f100 0510 	add.w	r5, r0, #16
   21f3a:	d108      	bne.n	21f4e <schedule_new_thread.part.13+0x42>
	node->next = list;
   21f3c:	6101      	str	r1, [r0, #16]
	node->prev = list->tail;
   21f3e:	6953      	ldr	r3, [r2, #20]
   21f40:	6143      	str	r3, [r0, #20]
	list->tail->next = node;
   21f42:	6953      	ldr	r3, [r2, #20]
   21f44:	601d      	str	r5, [r3, #0]
	list->tail = node;
   21f46:	6155      	str	r5, [r2, #20]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   21f48:	f386 8811 	msr	BASEPRI, r6
   21f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   21f4e:	2b00      	cmp	r3, #0
   21f50:	d0f4      	beq.n	21f3c <schedule_new_thread.part.13+0x30>
   21f52:	f8d2 e014 	ldr.w	lr, [r2, #20]
		if (*delta <= in_q->delta_ticks_from_prev) {
   21f56:	6a04      	ldr	r4, [r0, #32]
   21f58:	691f      	ldr	r7, [r3, #16]
   21f5a:	42bc      	cmp	r4, r7
   21f5c:	dc08      	bgt.n	21f70 <schedule_new_thread.part.13+0x64>
		node->prev = insert_point->prev;
   21f5e:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   21f60:	1b3c      	subs	r4, r7, r4
   21f62:	611c      	str	r4, [r3, #16]
   21f64:	6142      	str	r2, [r0, #20]
		node->next = insert_point;
   21f66:	6103      	str	r3, [r0, #16]
		insert_point->prev->next = node;
   21f68:	685a      	ldr	r2, [r3, #4]
   21f6a:	6015      	str	r5, [r2, #0]
		insert_point->prev = node;
   21f6c:	605d      	str	r5, [r3, #4]
   21f6e:	e7eb      	b.n	21f48 <schedule_new_thread.part.13+0x3c>
		*delta -= in_q->delta_ticks_from_prev;
   21f70:	1be4      	subs	r4, r4, r7
	return (node == list->tail) ? NULL : node->next;
   21f72:	4573      	cmp	r3, lr
   21f74:	6204      	str	r4, [r0, #32]
   21f76:	d0e1      	beq.n	21f3c <schedule_new_thread.part.13+0x30>
   21f78:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   21f7a:	2b00      	cmp	r3, #0
   21f7c:	d1eb      	bne.n	21f56 <schedule_new_thread.part.13+0x4a>
   21f7e:	e7dd      	b.n	21f3c <schedule_new_thread.part.13+0x30>
   21f80:	20002ff8 	.word	0x20002ff8

00021f84 <k_is_in_isr>:
   21f84:	f3ef 8005 	mrs	r0, IPSR
   21f88:	280d      	cmp	r0, #13
   21f8a:	d807      	bhi.n	21f9c <k_is_in_isr+0x18>
   21f8c:	b138      	cbz	r0, 21f9e <k_is_in_isr+0x1a>
   21f8e:	4b04      	ldr	r3, [pc, #16]	; (21fa0 <k_is_in_isr+0x1c>)
   21f90:	6858      	ldr	r0, [r3, #4]
   21f92:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
   21f96:	f3c0 20c0 	ubfx	r0, r0, #11, #1
   21f9a:	4770      	bx	lr
   21f9c:	2001      	movs	r0, #1
}
   21f9e:	4770      	bx	lr
   21fa0:	e000ed00 	.word	0xe000ed00

00021fa4 <_is_thread_essential>:
	return _current->base.user_options & K_ESSENTIAL;
   21fa4:	4b02      	ldr	r3, [pc, #8]	; (21fb0 <_is_thread_essential+0xc>)
   21fa6:	689b      	ldr	r3, [r3, #8]
   21fa8:	7a18      	ldrb	r0, [r3, #8]
}
   21faa:	f000 0001 	and.w	r0, r0, #1
   21fae:	4770      	bx	lr
   21fb0:	20002ff8 	.word	0x20002ff8

00021fb4 <_thread_entry>:
{
   21fb4:	b508      	push	{r3, lr}
   21fb6:	4604      	mov	r4, r0
   21fb8:	4608      	mov	r0, r1
   21fba:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   21fbc:	461a      	mov	r2, r3
   21fbe:	47a0      	blx	r4
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
   21fc0:	f7ff fd96 	bl	21af0 <_impl_k_current_get>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
   21fc4:	f7df ff04 	bl	1dd0 <_impl_k_thread_abort>

00021fc8 <_impl_k_thread_start>:
{
   21fc8:	b510      	push	{r4, lr}
   21fca:	4601      	mov	r1, r0
	__asm__ volatile(
   21fcc:	f04f 0320 	mov.w	r3, #32
   21fd0:	f3ef 8411 	mrs	r4, BASEPRI
   21fd4:	f383 8811 	msr	BASEPRI, r3
   21fd8:	7a43      	ldrb	r3, [r0, #9]
	if (_has_thread_started(thread)) {
   21fda:	075a      	lsls	r2, r3, #29
   21fdc:	d402      	bmi.n	21fe4 <_impl_k_thread_start+0x1c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   21fde:	f384 8811 	msr	BASEPRI, r4
   21fe2:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   21fe4:	f023 0304 	bic.w	r3, r3, #4
   21fe8:	7243      	strb	r3, [r0, #9]
	if (_is_thread_ready(thread)) {
   21fea:	f7ff ff6b 	bl	21ec4 <_is_thread_ready>
   21fee:	2800      	cmp	r0, #0
   21ff0:	d0f5      	beq.n	21fde <_impl_k_thread_start+0x16>
		_add_thread_to_ready_q(thread);
   21ff2:	4608      	mov	r0, r1
   21ff4:	f7ff fbfa 	bl	217ec <_add_thread_to_ready_q>
	return _is_preempt(_current) && __must_switch_threads();
   21ff8:	4b07      	ldr	r3, [pc, #28]	; (22018 <_impl_k_thread_start+0x50>)
   21ffa:	689b      	ldr	r3, [r3, #8]
   21ffc:	895b      	ldrh	r3, [r3, #10]
   21ffe:	2b7f      	cmp	r3, #127	; 0x7f
   22000:	d8ed      	bhi.n	21fde <_impl_k_thread_start+0x16>
   22002:	f7ff fced 	bl	219e0 <__must_switch_threads>
   22006:	2800      	cmp	r0, #0
   22008:	d0e9      	beq.n	21fde <_impl_k_thread_start+0x16>
	_update_time_slice_before_swap();
   2200a:	f7ff fd9b 	bl	21b44 <_update_time_slice_before_swap>
	return __swap(key);
   2200e:	4620      	mov	r0, r4
}
   22010:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   22014:	f7df bc28 	b.w	1868 <__swap>
   22018:	20002ff8 	.word	0x20002ff8

0002201c <_setup_new_thread>:
void _setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options)
{
   2201c:	b410      	push	{r4}

	if (options & K_INHERIT_PERMS) {
		_thread_perms_inherit(_current, new_thread);
	}
#endif
}
   2201e:	bc10      	pop	{r4}
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   22020:	f7df be2e 	b.w	1c80 <_new_thread>

00022024 <_impl_k_thread_create>:
k_tid_t _impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
   22024:	b570      	push	{r4, r5, r6, lr}
   22026:	b086      	sub	sp, #24
   22028:	4604      	mov	r4, r0
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2202a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   2202c:	9604      	str	r6, [sp, #16]
   2202e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   22030:	9603      	str	r6, [sp, #12]
   22032:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   22034:	9602      	str	r6, [sp, #8]
   22036:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
{
   22038:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2203a:	9601      	str	r6, [sp, #4]
   2203c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   2203e:	9600      	str	r6, [sp, #0]
   22040:	f7df fe1e 	bl	1c80 <_new_thread>
	__ASSERT(!_is_in_isr(), "Threads may not be created in ISRs");
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
			  prio, options);

	if (delay != K_FOREVER) {
   22044:	1c6b      	adds	r3, r5, #1
   22046:	d003      	beq.n	22050 <_impl_k_thread_create+0x2c>
	if (delay == 0) {
   22048:	b92d      	cbnz	r5, 22056 <_impl_k_thread_create+0x32>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread);
   2204a:	4620      	mov	r0, r4
   2204c:	f7ff ffbc 	bl	21fc8 <_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}
	return new_thread;
}
   22050:	4620      	mov	r0, r4
   22052:	b006      	add	sp, #24
   22054:	bd70      	pop	{r4, r5, r6, pc}
   22056:	4629      	mov	r1, r5
   22058:	4620      	mov	r0, r4
   2205a:	f7ff ff57 	bl	21f0c <schedule_new_thread.part.13>
   2205e:	e7f7      	b.n	22050 <_impl_k_thread_create+0x2c>

00022060 <_k_thread_single_abort>:
_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_resume, K_OBJ_THREAD, k_tid_t);
#endif

void _k_thread_single_abort(struct k_thread *thread)
{
	if (thread->fn_abort != NULL) {
   22060:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   22062:	b510      	push	{r4, lr}
   22064:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   22066:	b103      	cbz	r3, 2206a <_k_thread_single_abort+0xa>
		thread->fn_abort();
   22068:	4798      	blx	r3
	}

	if (_is_thread_ready(thread)) {
   2206a:	4620      	mov	r0, r4
   2206c:	f7ff ff2a 	bl	21ec4 <_is_thread_ready>
   22070:	b138      	cbz	r0, 22082 <_k_thread_single_abort+0x22>
		_remove_thread_from_ready_q(thread);
   22072:	4620      	mov	r0, r4
   22074:	f7ff fc3e 	bl	218f4 <_remove_thread_from_ready_q>
		if (_is_thread_timeout_active(thread)) {
			_abort_thread_timeout(thread);
		}
	}

	thread->base.thread_state |= _THREAD_DEAD;
   22078:	7a63      	ldrb	r3, [r4, #9]
   2207a:	f043 0308 	orr.w	r3, r3, #8
   2207e:	7263      	strb	r3, [r4, #9]
   22080:	bd10      	pop	{r4, pc}
		if (_is_thread_pending(thread)) {
   22082:	7a63      	ldrb	r3, [r4, #9]
   22084:	079b      	lsls	r3, r3, #30
   22086:	d508      	bpl.n	2209a <_k_thread_single_abort+0x3a>
	node->prev->next = node->next;
   22088:	e894 000c 	ldmia.w	r4, {r2, r3}
   2208c:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   2208e:	6822      	ldr	r2, [r4, #0]
   22090:	6053      	str	r3, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   22092:	7a63      	ldrb	r3, [r4, #9]
   22094:	f023 0302 	bic.w	r3, r3, #2
   22098:	7263      	strb	r3, [r4, #9]
		if (_is_thread_timeout_active(thread)) {
   2209a:	6a23      	ldr	r3, [r4, #32]
   2209c:	3301      	adds	r3, #1
   2209e:	d0eb      	beq.n	22078 <_k_thread_single_abort+0x18>
	return _abort_timeout(&thread->base.timeout);
   220a0:	f104 0010 	add.w	r0, r4, #16
   220a4:	f7ff ff18 	bl	21ed8 <_abort_timeout>
   220a8:	e7e6      	b.n	22078 <_k_thread_single_abort+0x18>
	...

000220ac <_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void _init_static_threads(void)
{
   220ac:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
   220ae:	4f21      	ldr	r7, [pc, #132]	; (22134 <_init_static_threads+0x88>)
   220b0:	4d21      	ldr	r5, [pc, #132]	; (22138 <_init_static_threads+0x8c>)
{
   220b2:	b087      	sub	sp, #28
   220b4:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
   220b6:	42bd      	cmp	r5, r7
   220b8:	f105 042c 	add.w	r4, r5, #44	; 0x2c
   220bc:	d314      	bcc.n	220e8 <_init_static_threads+0x3c>
	--_current->base.sched_locked;
   220be:	4b1f      	ldr	r3, [pc, #124]	; (2213c <_init_static_threads+0x90>)
   220c0:	689a      	ldr	r2, [r3, #8]
   220c2:	7ad3      	ldrb	r3, [r2, #11]
   220c4:	3b01      	subs	r3, #1
   220c6:	72d3      	strb	r3, [r2, #11]
	__asm__ volatile(
   220c8:	f04f 0320 	mov.w	r3, #32
   220cc:	f3ef 8511 	mrs	r5, BASEPRI
   220d0:	f383 8811 	msr	BASEPRI, r3
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
   220d4:	4c18      	ldr	r4, [pc, #96]	; (22138 <_init_static_threads+0x8c>)
   220d6:	42b4      	cmp	r4, r6
   220d8:	d31f      	bcc.n	2211a <_init_static_threads+0x6e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   220da:	f385 8811 	msr	BASEPRI, r5
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
}
   220de:	b007      	add	sp, #28
   220e0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
   220e4:	f7ff bcac 	b.w	21a40 <k_sched_unlock>
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   220e8:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   220ec:	9304      	str	r3, [sp, #16]
   220ee:	f854 3c10 	ldr.w	r3, [r4, #-16]
   220f2:	9303      	str	r3, [sp, #12]
   220f4:	f854 3c14 	ldr.w	r3, [r4, #-20]
   220f8:	9302      	str	r3, [sp, #8]
   220fa:	f854 3c18 	ldr.w	r3, [r4, #-24]
   220fe:	9301      	str	r3, [sp, #4]
   22100:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   22104:	9300      	str	r3, [sp, #0]
   22106:	f1a4 002c 	sub.w	r0, r4, #44	; 0x2c
   2210a:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   2210c:	f7df fdb8 	bl	1c80 <_new_thread>
		thread_data->init_thread->init_data = thread_data;
   22110:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   22114:	64dd      	str	r5, [r3, #76]	; 0x4c
   22116:	4625      	mov	r5, r4
   22118:	e7cd      	b.n	220b6 <_init_static_threads+0xa>
		if (thread_data->init_delay != K_FOREVER) {
   2211a:	6a61      	ldr	r1, [r4, #36]	; 0x24
   2211c:	1c4b      	adds	r3, r1, #1
   2211e:	d003      	beq.n	22128 <_init_static_threads+0x7c>
			schedule_new_thread(thread_data->init_thread,
   22120:	6820      	ldr	r0, [r4, #0]
	if (delay == 0) {
   22122:	b919      	cbnz	r1, 2212c <_init_static_threads+0x80>
   22124:	f7ff ff50 	bl	21fc8 <_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   22128:	342c      	adds	r4, #44	; 0x2c
   2212a:	e7d4      	b.n	220d6 <_init_static_threads+0x2a>
   2212c:	f7ff feee 	bl	21f0c <schedule_new_thread.part.13>
   22130:	e7fa      	b.n	22128 <_init_static_threads+0x7c>
   22132:	bf00      	nop
   22134:	2000a92c 	.word	0x2000a92c
   22138:	2000a92c 	.word	0x2000a92c
   2213c:	20002ff8 	.word	0x20002ff8

00022140 <_init_thread_base>:
void _init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
   22140:	7203      	strb	r3, [r0, #8]
	thread_base->thread_state = (u8_t)initial_state;
   22142:	7242      	strb	r2, [r0, #9]

	thread_base->prio = priority;

	thread_base->sched_locked = 0;
   22144:	2300      	movs	r3, #0
	t->delta_ticks_from_prev = _INACTIVE;
   22146:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	thread_base->prio = priority;
   2214a:	7281      	strb	r1, [r0, #10]
	thread_base->sched_locked = 0;
   2214c:	72c3      	strb	r3, [r0, #11]
   2214e:	6202      	str	r2, [r0, #32]
	t->wait_q = NULL;
   22150:	61c3      	str	r3, [r0, #28]
	t->thread = NULL;
   22152:	6183      	str	r3, [r0, #24]
	t->func = func;
   22154:	6243      	str	r3, [r0, #36]	; 0x24
   22156:	4770      	bx	lr

00022158 <k_work_submit_to_queue>:
{
   22158:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2215a:	f101 0308 	add.w	r3, r1, #8
   2215e:	f3bf 8f5b 	dmb	ish
   22162:	e853 2f00 	ldrex	r2, [r3]
   22166:	f042 0e01 	orr.w	lr, r2, #1
   2216a:	e843 ec00 	strex	ip, lr, [r3]
   2216e:	f1bc 0f00 	cmp.w	ip, #0
   22172:	d1f6      	bne.n	22162 <k_work_submit_to_queue+0xa>
   22174:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   22178:	07d3      	lsls	r3, r2, #31
   2217a:	d403      	bmi.n	22184 <k_work_submit_to_queue+0x2c>
}
   2217c:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   22180:	f7ff bac9 	b.w	21716 <k_queue_append>
   22184:	f85d fb04 	ldr.w	pc, [sp], #4

00022188 <work_timeout>:
{
	struct k_delayed_work *w = CONTAINER_OF(t, struct k_delayed_work,
						   timeout);

	/* submit work to workqueue */
	k_work_submit_to_queue(w->work_q, &w->work);
   22188:	f1a0 010c 	sub.w	r1, r0, #12
   2218c:	6980      	ldr	r0, [r0, #24]
   2218e:	f7ff bfe3 	b.w	22158 <k_work_submit_to_queue>

00022192 <work_q_main>:
{
   22192:	b510      	push	{r4, lr}
   22194:	4604      	mov	r4, r0
		work = k_queue_get(&work_q->queue, K_FOREVER);
   22196:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2219a:	4620      	mov	r0, r4
   2219c:	f7ff fadf 	bl	2175e <k_queue_get>
		if (!work) {
   221a0:	4603      	mov	r3, r0
   221a2:	2800      	cmp	r0, #0
   221a4:	d0f7      	beq.n	22196 <work_q_main+0x4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   221a6:	3308      	adds	r3, #8
		handler = work->handler;
   221a8:	6842      	ldr	r2, [r0, #4]
   221aa:	f3bf 8f5b 	dmb	ish
   221ae:	e853 1f00 	ldrex	r1, [r3]
   221b2:	f021 0e01 	bic.w	lr, r1, #1
   221b6:	e843 ec00 	strex	ip, lr, [r3]
   221ba:	f1bc 0f00 	cmp.w	ip, #0
   221be:	d1f6      	bne.n	221ae <work_q_main+0x1c>
   221c0:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(work->flags,
   221c4:	07cb      	lsls	r3, r1, #31
   221c6:	d500      	bpl.n	221ca <work_q_main+0x38>
			handler(work);
   221c8:	4790      	blx	r2
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   221ca:	f7ff fc73 	bl	21ab4 <_impl_k_yield>
   221ce:	e7e2      	b.n	22196 <work_q_main+0x4>

000221d0 <k_work_q_start>:
{
   221d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   221d2:	b087      	sub	sp, #28
   221d4:	4604      	mov	r4, r0
   221d6:	461f      	mov	r7, r3
   221d8:	460d      	mov	r5, r1
   221da:	4616      	mov	r6, r2
	k_queue_init(&work_q->queue);
   221dc:	f7ff fa6a 	bl	216b4 <k_queue_init>

   221e0:	2000      	movs	r0, #0
   221e2:	9005      	str	r0, [sp, #20]
   221e4:	9004      	str	r0, [sp, #16]
   221e6:	9002      	str	r0, [sp, #8]
   221e8:	9001      	str	r0, [sp, #4]
   221ea:	9703      	str	r7, [sp, #12]
   221ec:	9400      	str	r4, [sp, #0]
   221ee:	4b04      	ldr	r3, [pc, #16]	; (22200 <k_work_q_start+0x30>)
   221f0:	4632      	mov	r2, r6
   221f2:	4629      	mov	r1, r5
   221f4:	f104 0010 	add.w	r0, r4, #16
   221f8:	f7ff ff14 	bl	22024 <_impl_k_thread_create>
}
   221fc:	b007      	add	sp, #28
   221fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22200:	00022193 	.word	0x00022193

00022204 <k_delayed_work_init>:
}

void k_delayed_work_init(struct k_delayed_work *work, k_work_handler_t handler)
{
   22204:	b500      	push	{lr}
   22206:	f100 0308 	add.w	r3, r0, #8
   2220a:	f3bf 8f5b 	dmb	ish
   2220e:	e853 2f00 	ldrex	r2, [r3]
   22212:	f022 0201 	bic.w	r2, r2, #1
   22216:	e843 2e00 	strex	lr, r2, [r3]
   2221a:	f1be 0f00 	cmp.w	lr, #0
   2221e:	d1f6      	bne.n	2220e <k_delayed_work_init+0xa>
   22220:	f3bf 8f5b 	dmb	ish
	t->delta_ticks_from_prev = _INACTIVE;
   22224:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   22228:	61c3      	str	r3, [r0, #28]
	t->func = func;
   2222a:	4a04      	ldr	r2, [pc, #16]	; (2223c <k_delayed_work_init+0x38>)
	work->handler = handler;
   2222c:	6041      	str	r1, [r0, #4]
	t->wait_q = NULL;
   2222e:	2300      	movs	r3, #0
   22230:	6183      	str	r3, [r0, #24]
	t->thread = NULL;
   22232:	6143      	str	r3, [r0, #20]
	t->func = func;
   22234:	6202      	str	r2, [r0, #32]
	k_work_init(&work->work, handler);
	_init_timeout(&work->timeout, work_timeout);
	work->work_q = NULL;
   22236:	6243      	str	r3, [r0, #36]	; 0x24
   22238:	f85d fb04 	ldr.w	pc, [sp], #4
   2223c:	00022189 	.word	0x00022189

00022240 <k_delayed_work_cancel>:

	return err;
}

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   22240:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
   22242:	f04f 0320 	mov.w	r3, #32
   22246:	f3ef 8411 	mrs	r4, BASEPRI
   2224a:	f383 8811 	msr	BASEPRI, r3
	int key = irq_lock();

	if (!work->work_q) {
   2224e:	6a43      	ldr	r3, [r0, #36]	; 0x24
   22250:	b923      	cbnz	r3, 2225c <k_delayed_work_cancel+0x1c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   22252:	f384 8811 	msr	BASEPRI, r4

	if (k_work_pending(&work->work)) {
		/* Remove from the queue if already submitted */
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
			irq_unlock(key);
			return -EINVAL;
   22256:	f06f 0015 	mvn.w	r0, #21

	atomic_clear_bit(work->work.flags, K_WORK_STATE_PENDING);
	irq_unlock(key);

	return 0;
}
   2225a:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2225c:	f3bf 8f5b 	dmb	ish
   22260:	6883      	ldr	r3, [r0, #8]
   22262:	f3bf 8f5b 	dmb	ish
	if (k_work_pending(&work->work)) {
   22266:	07da      	lsls	r2, r3, #31
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   22268:	f100 0508 	add.w	r5, r0, #8
   2226c:	d529      	bpl.n	222c2 <k_delayed_work_cancel+0x82>
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   2226e:	6a42      	ldr	r2, [r0, #36]	; 0x24
   22270:	6813      	ldr	r3, [r2, #0]
	sys_snode_t *prev = NULL;
   22272:	2100      	movs	r1, #0
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   22274:	2b00      	cmp	r3, #0
   22276:	d0ec      	beq.n	22252 <k_delayed_work_cancel+0x12>
		if (test == node) {
   22278:	4298      	cmp	r0, r3
   2227a:	d11f      	bne.n	222bc <k_delayed_work_cancel+0x7c>
   2227c:	6803      	ldr	r3, [r0, #0]
   2227e:	6856      	ldr	r6, [r2, #4]
	if (!prev_node) {
   22280:	b9b9      	cbnz	r1, 222b2 <k_delayed_work_cancel+0x72>
		if (list->tail == node) {
   22282:	42b0      	cmp	r0, r6
		list->head = node->next;
   22284:	6013      	str	r3, [r2, #0]
		if (list->tail == node) {
   22286:	d100      	bne.n	2228a <k_delayed_work_cancel+0x4a>
			list->tail = list->head;
   22288:	6053      	str	r3, [r2, #4]
	node->next = NULL;
   2228a:	2300      	movs	r3, #0
   2228c:	6003      	str	r3, [r0, #0]
	work->work_q = NULL;
   2228e:	2300      	movs	r3, #0
   22290:	6243      	str	r3, [r0, #36]	; 0x24
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   22292:	f3bf 8f5b 	dmb	ish
   22296:	e855 2f00 	ldrex	r2, [r5]
   2229a:	f022 0201 	bic.w	r2, r2, #1
   2229e:	e845 2100 	strex	r1, r2, [r5]
   222a2:	2900      	cmp	r1, #0
   222a4:	d1f7      	bne.n	22296 <k_delayed_work_cancel+0x56>
   222a6:	f3bf 8f5b 	dmb	ish
   222aa:	f384 8811 	msr	BASEPRI, r4
	return 0;
   222ae:	4618      	mov	r0, r3
   222b0:	bd70      	pop	{r4, r5, r6, pc}
		if (list->tail == node) {
   222b2:	42b0      	cmp	r0, r6
		prev_node->next = node->next;
   222b4:	600b      	str	r3, [r1, #0]
			list->tail = prev_node;
   222b6:	bf08      	it	eq
   222b8:	6051      	streq	r1, [r2, #4]
   222ba:	e7e6      	b.n	2228a <k_delayed_work_cancel+0x4a>
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   222bc:	4619      	mov	r1, r3
   222be:	681b      	ldr	r3, [r3, #0]
   222c0:	e7d8      	b.n	22274 <k_delayed_work_cancel+0x34>
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   222c2:	69c1      	ldr	r1, [r0, #28]
   222c4:	1c4b      	adds	r3, r1, #1
		_abort_timeout(&work->timeout);
   222c6:	f100 020c 	add.w	r2, r0, #12
   222ca:	d0e0      	beq.n	2228e <k_delayed_work_cancel+0x4e>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   222cc:	4b08      	ldr	r3, [pc, #32]	; (222f0 <k_delayed_work_cancel+0xb0>)
   222ce:	695b      	ldr	r3, [r3, #20]
   222d0:	429a      	cmp	r2, r3
	return (node == list->tail) ? NULL : node->next;
   222d2:	bf1f      	itttt	ne
   222d4:	68c2      	ldrne	r2, [r0, #12]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   222d6:	6913      	ldrne	r3, [r2, #16]
   222d8:	185b      	addne	r3, r3, r1
   222da:	6113      	strne	r3, [r2, #16]
	node->prev->next = node->next;
   222dc:	6903      	ldr	r3, [r0, #16]
   222de:	68c2      	ldr	r2, [r0, #12]
   222e0:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   222e2:	68c2      	ldr	r2, [r0, #12]
   222e4:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   222e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   222ea:	61c3      	str	r3, [r0, #28]
   222ec:	e7cf      	b.n	2228e <k_delayed_work_cancel+0x4e>
   222ee:	bf00      	nop
   222f0:	20002ff8 	.word	0x20002ff8

000222f4 <k_delayed_work_submit_to_queue>:
{
   222f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   222f6:	4607      	mov	r7, r0
   222f8:	460c      	mov	r4, r1
   222fa:	4615      	mov	r5, r2
	__asm__ volatile(
   222fc:	f04f 0320 	mov.w	r3, #32
   22300:	f3ef 8611 	mrs	r6, BASEPRI
   22304:	f383 8811 	msr	BASEPRI, r3
	if (work->work_q && work->work_q != work_q) {
   22308:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   2230a:	b123      	cbz	r3, 22316 <k_delayed_work_submit_to_queue+0x22>
   2230c:	4283      	cmp	r3, r0
   2230e:	d00b      	beq.n	22328 <k_delayed_work_submit_to_queue+0x34>
		err = -EADDRINUSE;
   22310:	f06f 002f 	mvn.w	r0, #47	; 0x2f
   22314:	e00d      	b.n	22332 <k_delayed_work_submit_to_queue+0x3e>
	if (work->work_q == work_q) {
   22316:	b138      	cbz	r0, 22328 <k_delayed_work_submit_to_queue+0x34>
	work->work_q = work_q;
   22318:	6267      	str	r7, [r4, #36]	; 0x24
	if (!delay) {
   2231a:	b96d      	cbnz	r5, 22338 <k_delayed_work_submit_to_queue+0x44>
		k_work_submit_to_queue(work_q, &work->work);
   2231c:	4621      	mov	r1, r4
   2231e:	4638      	mov	r0, r7
   22320:	f7ff ff1a 	bl	22158 <k_work_submit_to_queue>
	err = 0;
   22324:	2000      	movs	r0, #0
   22326:	e004      	b.n	22332 <k_delayed_work_submit_to_queue+0x3e>
		err = k_delayed_work_cancel(work);
   22328:	4620      	mov	r0, r4
   2232a:	f7ff ff89 	bl	22240 <k_delayed_work_cancel>
		if (err < 0) {
   2232e:	2800      	cmp	r0, #0
   22330:	daf2      	bge.n	22318 <k_delayed_work_submit_to_queue+0x24>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   22332:	f386 8811 	msr	BASEPRI, r6
}
   22336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   22338:	220a      	movs	r2, #10
   2233a:	3509      	adds	r5, #9
   2233c:	fbb5 f5f2 	udiv	r5, r5, r2
	return list->head == list;
   22340:	4a16      	ldr	r2, [pc, #88]	; (2239c <k_delayed_work_submit_to_queue+0xa8>)
   22342:	4611      	mov	r1, r2
	timeout->thread = thread;
   22344:	2300      	movs	r3, #0
   22346:	6163      	str	r3, [r4, #20]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   22348:	61a3      	str	r3, [r4, #24]
   2234a:	f851 3f10 	ldr.w	r3, [r1, #16]!
		_add_timeout(NULL, &work->timeout, NULL,
   2234e:	3501      	adds	r5, #1
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22350:	428b      	cmp	r3, r1
   22352:	f104 070c 	add.w	r7, r4, #12
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   22356:	61e5      	str	r5, [r4, #28]
   22358:	d106      	bne.n	22368 <k_delayed_work_submit_to_queue+0x74>
	node->next = list;
   2235a:	60e1      	str	r1, [r4, #12]
	node->prev = list->tail;
   2235c:	6953      	ldr	r3, [r2, #20]
   2235e:	6123      	str	r3, [r4, #16]
	list->tail->next = node;
   22360:	6953      	ldr	r3, [r2, #20]
   22362:	601f      	str	r7, [r3, #0]
	list->tail = node;
   22364:	6157      	str	r7, [r2, #20]
   22366:	e7dd      	b.n	22324 <k_delayed_work_submit_to_queue+0x30>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   22368:	2b00      	cmp	r3, #0
   2236a:	d0f6      	beq.n	2235a <k_delayed_work_submit_to_queue+0x66>
   2236c:	f8d2 e014 	ldr.w	lr, [r2, #20]
		if (*delta <= in_q->delta_ticks_from_prev) {
   22370:	69e0      	ldr	r0, [r4, #28]
   22372:	691d      	ldr	r5, [r3, #16]
   22374:	42a8      	cmp	r0, r5
   22376:	dc08      	bgt.n	2238a <k_delayed_work_submit_to_queue+0x96>
		node->prev = insert_point->prev;
   22378:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   2237a:	1a28      	subs	r0, r5, r0
   2237c:	6118      	str	r0, [r3, #16]
   2237e:	6122      	str	r2, [r4, #16]
		node->next = insert_point;
   22380:	60e3      	str	r3, [r4, #12]
		insert_point->prev->next = node;
   22382:	685a      	ldr	r2, [r3, #4]
   22384:	6017      	str	r7, [r2, #0]
		insert_point->prev = node;
   22386:	605f      	str	r7, [r3, #4]
   22388:	e7cc      	b.n	22324 <k_delayed_work_submit_to_queue+0x30>
		*delta -= in_q->delta_ticks_from_prev;
   2238a:	1b40      	subs	r0, r0, r5
	return (node == list->tail) ? NULL : node->next;
   2238c:	4573      	cmp	r3, lr
   2238e:	61e0      	str	r0, [r4, #28]
   22390:	d0e3      	beq.n	2235a <k_delayed_work_submit_to_queue+0x66>
   22392:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   22394:	2b00      	cmp	r3, #0
   22396:	d1eb      	bne.n	22370 <k_delayed_work_submit_to_queue+0x7c>
   22398:	e7df      	b.n	2235a <k_delayed_work_submit_to_queue+0x66>
   2239a:	bf00      	nop
   2239c:	20002ff8 	.word	0x20002ff8

000223a0 <_ready_thread>:
	thread->base.thread_state &= ~_THREAD_PRESTART;
   223a0:	7a42      	ldrb	r2, [r0, #9]
   223a2:	f022 0104 	bic.w	r1, r2, #4
	return !(_is_thread_prevented_from_running(thread) ||
   223a6:	f012 0f1b 	tst.w	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   223aa:	7241      	strb	r1, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   223ac:	d104      	bne.n	223b8 <_ready_thread+0x18>
   223ae:	6a03      	ldr	r3, [r0, #32]
   223b0:	3301      	adds	r3, #1
   223b2:	d101      	bne.n	223b8 <_ready_thread+0x18>
		_add_thread_to_ready_q(thread);
   223b4:	f7ff ba1a 	b.w	217ec <_add_thread_to_ready_q>
   223b8:	4770      	bx	lr

000223ba <_unpend_thread>:
	node->prev->next = node->next;
   223ba:	e890 000c 	ldmia.w	r0, {r2, r3}
   223be:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   223c0:	6802      	ldr	r2, [r0, #0]
   223c2:	6053      	str	r3, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   223c4:	7a43      	ldrb	r3, [r0, #9]
   223c6:	f023 0302 	bic.w	r3, r3, #2
   223ca:	7243      	strb	r3, [r0, #9]
   223cc:	4770      	bx	lr
	...

000223d0 <_add_timeout.constprop.9>:
static inline void _add_timeout(struct k_thread *thread,
   223d0:	b430      	push	{r4, r5}
	timeout->thread = thread;
   223d2:	2400      	movs	r4, #0
static inline void _add_timeout(struct k_thread *thread,
   223d4:	4603      	mov	r3, r0
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   223d6:	6102      	str	r2, [r0, #16]
	timeout->thread = thread;
   223d8:	6084      	str	r4, [r0, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   223da:	60c1      	str	r1, [r0, #12]
	if (!timeout_in_ticks) {
   223dc:	b972      	cbnz	r2, 223fc <_add_timeout.constprop.9+0x2c>
	__asm__ volatile(
   223de:	f04f 0120 	mov.w	r1, #32
   223e2:	f3ef 8211 	mrs	r2, BASEPRI
   223e6:	f381 8811 	msr	BASEPRI, r1
	timeout->delta_ticks_from_prev = _INACTIVE;
   223ea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   223ee:	6101      	str	r1, [r0, #16]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   223f0:	f382 8811 	msr	BASEPRI, r2
		if (timeout->func) {
   223f4:	6943      	ldr	r3, [r0, #20]
   223f6:	b16b      	cbz	r3, 22414 <_add_timeout.constprop.9+0x44>
}
   223f8:	bc30      	pop	{r4, r5}
			timeout->func(timeout);
   223fa:	4718      	bx	r3
	return list->head == list;
   223fc:	4911      	ldr	r1, [pc, #68]	; (22444 <_add_timeout.constprop.9+0x74>)
   223fe:	4608      	mov	r0, r1
   22400:	f850 2f10 	ldr.w	r2, [r0, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22404:	4282      	cmp	r2, r0
   22406:	d10d      	bne.n	22424 <_add_timeout.constprop.9+0x54>
	node->next = list;
   22408:	6018      	str	r0, [r3, #0]
	node->prev = list->tail;
   2240a:	694a      	ldr	r2, [r1, #20]
   2240c:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
   2240e:	694a      	ldr	r2, [r1, #20]
   22410:	6013      	str	r3, [r2, #0]
	list->tail = node;
   22412:	614b      	str	r3, [r1, #20]
}
   22414:	bc30      	pop	{r4, r5}
   22416:	4770      	bx	lr
		*delta -= in_q->delta_ticks_from_prev;
   22418:	1b64      	subs	r4, r4, r5
   2241a:	611c      	str	r4, [r3, #16]
	return (node == list->tail) ? NULL : node->next;
   2241c:	694c      	ldr	r4, [r1, #20]
   2241e:	42a2      	cmp	r2, r4
   22420:	d0f2      	beq.n	22408 <_add_timeout.constprop.9+0x38>
   22422:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   22424:	2a00      	cmp	r2, #0
   22426:	d0ef      	beq.n	22408 <_add_timeout.constprop.9+0x38>
		if (*delta <= in_q->delta_ticks_from_prev) {
   22428:	691c      	ldr	r4, [r3, #16]
   2242a:	6915      	ldr	r5, [r2, #16]
   2242c:	42ac      	cmp	r4, r5
   2242e:	dcf3      	bgt.n	22418 <_add_timeout.constprop.9+0x48>
		node->prev = insert_point->prev;
   22430:	6851      	ldr	r1, [r2, #4]
			in_q->delta_ticks_from_prev -= *delta;
   22432:	1b2c      	subs	r4, r5, r4
   22434:	6114      	str	r4, [r2, #16]
   22436:	6059      	str	r1, [r3, #4]
		node->next = insert_point;
   22438:	601a      	str	r2, [r3, #0]
		insert_point->prev->next = node;
   2243a:	6851      	ldr	r1, [r2, #4]
   2243c:	600b      	str	r3, [r1, #0]
		insert_point->prev = node;
   2243e:	6053      	str	r3, [r2, #4]
   22440:	e7e8      	b.n	22414 <_add_timeout.constprop.9+0x44>
   22442:	bf00      	nop
   22444:	20002ff8 	.word	0x20002ff8

00022448 <_timer_expiration_handler>:

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (timer->period > 0) {
   22448:	6a83      	ldr	r3, [r0, #40]	; 0x28
   2244a:	2b00      	cmp	r3, #0
{
   2244c:	b570      	push	{r4, r5, r6, lr}
   2244e:	4604      	mov	r4, r0
   22450:	f100 0518 	add.w	r5, r0, #24
	if (timer->period > 0) {
   22454:	dd0b      	ble.n	2246e <_timer_expiration_handler+0x26>
	__asm__ volatile(
   22456:	f04f 0320 	mov.w	r3, #32
   2245a:	f3ef 8611 	mrs	r6, BASEPRI
   2245e:	f383 8811 	msr	BASEPRI, r3
		key = irq_lock();
		_add_timeout(NULL, &timer->timeout, &timer->wait_q,
   22462:	6a82      	ldr	r2, [r0, #40]	; 0x28
   22464:	4629      	mov	r1, r5
   22466:	f7ff ffb3 	bl	223d0 <_add_timeout.constprop.9>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2246a:	f386 8811 	msr	BASEPRI, r6
				timer->period);
		irq_unlock(key);
	}

	/* update timer's status */
	timer->status += 1;
   2246e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   22470:	3301      	adds	r3, #1
   22472:	62e3      	str	r3, [r4, #44]	; 0x2c

	/* invoke timer expiry function */
	if (timer->expiry_fn) {
   22474:	6a23      	ldr	r3, [r4, #32]
   22476:	b10b      	cbz	r3, 2247c <_timer_expiration_handler+0x34>
		timer->expiry_fn(timer);
   22478:	4620      	mov	r0, r4
   2247a:	4798      	blx	r3
	return list->head == list;
   2247c:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2247e:	42ac      	cmp	r4, r5
   22480:	d010      	beq.n	224a4 <_timer_expiration_handler+0x5c>
	}

	thread = (struct k_thread *)sys_dlist_peek_head(&timer->wait_q);

	if (!thread) {
   22482:	b17c      	cbz	r4, 224a4 <_timer_expiration_handler+0x5c>
	 * calling _unpend_thread() because a) this is the only place a thread
	 * can be taken off this pend queue, and b) the only place a thread
	 * can be put on the pend queue is at thread level, which of course
	 * cannot interrupt the current context.
	 */
	_unpend_thread(thread);
   22484:	4620      	mov	r0, r4
   22486:	f7ff ff98 	bl	223ba <_unpend_thread>
	__asm__ volatile(
   2248a:	f04f 0320 	mov.w	r3, #32
   2248e:	f3ef 8511 	mrs	r5, BASEPRI
   22492:	f383 8811 	msr	BASEPRI, r3

	key = irq_lock();
	_ready_thread(thread);
   22496:	4620      	mov	r0, r4
   22498:	f7ff ff82 	bl	223a0 <_ready_thread>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2249c:	f385 8811 	msr	BASEPRI, r5
   224a0:	2300      	movs	r3, #0
   224a2:	6663      	str	r3, [r4, #100]	; 0x64
   224a4:	bd70      	pop	{r4, r5, r6, pc}
	...

000224a8 <_timeout_remaining_get>:
#ifdef CONFIG_USERSPACE
_SYSCALL_HANDLER1_SIMPLE(k_timer_status_sync, K_OBJ_TIMER, struct k_timer *);
#endif

s32_t _timeout_remaining_get(struct _timeout *timeout)
{
   224a8:	b530      	push	{r4, r5, lr}
	__asm__ volatile(
   224aa:	f04f 0320 	mov.w	r3, #32
   224ae:	f3ef 8411 	mrs	r4, BASEPRI
   224b2:	f383 8811 	msr	BASEPRI, r3
	unsigned int key = irq_lock();
	s32_t remaining_ticks;

	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   224b6:	6903      	ldr	r3, [r0, #16]
   224b8:	3301      	adds	r3, #1
   224ba:	d016      	beq.n	224ea <_timeout_remaining_get+0x42>
	return list->head == list;
   224bc:	490d      	ldr	r1, [pc, #52]	; (224f4 <_timeout_remaining_get+0x4c>)
   224be:	460a      	mov	r2, r1
   224c0:	f852 3f10 	ldr.w	r3, [r2, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   224c4:	4293      	cmp	r3, r2
   224c6:	d012      	beq.n	224ee <_timeout_remaining_get+0x46>
		 * and summing up the various tick deltas involved
		 */
		struct _timeout *t =
			(struct _timeout *)sys_dlist_peek_head(&_timeout_q);

		remaining_ticks = t->delta_ticks_from_prev;
   224c8:	691a      	ldr	r2, [r3, #16]
   224ca:	6949      	ldr	r1, [r1, #20]
		while (t != timeout) {
   224cc:	4283      	cmp	r3, r0
   224ce:	d105      	bne.n	224dc <_timeout_remaining_get+0x34>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   224d0:	f384 8811 	msr	BASEPRI, r4
	return (u64_t)ticks * _ms_per_tick;
   224d4:	200a      	movs	r0, #10
   224d6:	fb82 0100 	smull	r0, r1, r2, r0
		}
	}

	irq_unlock(key);
	return __ticks_to_ms(remaining_ticks);
}
   224da:	bd30      	pop	{r4, r5, pc}
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   224dc:	b13b      	cbz	r3, 224ee <_timeout_remaining_get+0x46>
	return (node == list->tail) ? NULL : node->next;
   224de:	428b      	cmp	r3, r1
   224e0:	d005      	beq.n	224ee <_timeout_remaining_get+0x46>
   224e2:	681b      	ldr	r3, [r3, #0]
			remaining_ticks += t->delta_ticks_from_prev;
   224e4:	691d      	ldr	r5, [r3, #16]
   224e6:	442a      	add	r2, r5
   224e8:	e7f0      	b.n	224cc <_timeout_remaining_get+0x24>
		remaining_ticks = 0;
   224ea:	2200      	movs	r2, #0
   224ec:	e7f0      	b.n	224d0 <_timeout_remaining_get+0x28>
			remaining_ticks += t->delta_ticks_from_prev;
   224ee:	2300      	movs	r3, #0
   224f0:	691b      	ldr	r3, [r3, #16]
   224f2:	deff      	udf	#255	; 0xff
   224f4:	20002ff8 	.word	0x20002ff8

000224f8 <sys_dlist_remove>:
	node->prev->next = node->next;
   224f8:	e890 000c 	ldmia.w	r0, {r2, r3}
   224fc:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   224fe:	6802      	ldr	r2, [r0, #0]
   22500:	6053      	str	r3, [r2, #4]
   22502:	4770      	bx	lr

00022504 <clear_event_registrations>:

/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int last_registered,
					      unsigned int key)
{
   22504:	b570      	push	{r4, r5, r6, lr}
   22506:	2414      	movs	r4, #20
   22508:	4615      	mov	r5, r2
   2250a:	fb04 0401 	mla	r4, r4, r1, r0
	event->poller = NULL;
   2250e:	2600      	movs	r6, #0
	for (; last_registered >= 0; last_registered--) {
   22510:	2900      	cmp	r1, #0
   22512:	da00      	bge.n	22516 <clear_event_registrations+0x12>
		clear_event_registration(&events[last_registered]);
		irq_unlock(key);
		key = irq_lock();
	}
}
   22514:	bd70      	pop	{r4, r5, r6, pc}
	switch (event->type) {
   22516:	7b63      	ldrb	r3, [r4, #13]
	event->poller = NULL;
   22518:	60a6      	str	r6, [r4, #8]
	switch (event->type) {
   2251a:	f003 030f 	and.w	r3, r3, #15
   2251e:	2b02      	cmp	r3, #2
   22520:	d003      	beq.n	2252a <clear_event_registrations+0x26>
   22522:	2b04      	cmp	r3, #4
   22524:	d001      	beq.n	2252a <clear_event_registrations+0x26>
   22526:	2b01      	cmp	r3, #1
   22528:	d102      	bne.n	22530 <clear_event_registrations+0x2c>
		sys_dlist_remove(&event->_node);
   2252a:	4620      	mov	r0, r4
   2252c:	f7ff ffe4 	bl	224f8 <sys_dlist_remove>
   22530:	f385 8811 	msr	BASEPRI, r5
	__asm__ volatile(
   22534:	f04f 0320 	mov.w	r3, #32
   22538:	f3ef 8511 	mrs	r5, BASEPRI
   2253c:	f383 8811 	msr	BASEPRI, r3
	for (; last_registered >= 0; last_registered--) {
   22540:	3901      	subs	r1, #1
   22542:	3c14      	subs	r4, #20
   22544:	e7e4      	b.n	22510 <clear_event_registrations+0xc>
	...

00022548 <signal_poll_event>:
}

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state,
			      int *must_reschedule)
{
   22548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	*must_reschedule = 0;
   2254a:	2300      	movs	r3, #0
   2254c:	6013      	str	r3, [r2, #0]

	if (!event->poller) {
   2254e:	6883      	ldr	r3, [r0, #8]
{
   22550:	4605      	mov	r5, r0
   22552:	460e      	mov	r6, r1
   22554:	4617      	mov	r7, r2
	if (!event->poller) {
   22556:	2b00      	cmp	r3, #0
   22558:	d049      	beq.n	225ee <signal_poll_event+0xa6>
		goto ready_event;
	}

	struct k_thread *thread = event->poller->thread;
   2255a:	6819      	ldr	r1, [r3, #0]
	thread->base.thread_state &= ~states;
   2255c:	7a4b      	ldrb	r3, [r1, #9]
   2255e:	f023 0220 	bic.w	r2, r3, #32

	__ASSERT(event->poller->thread, "poller should have a thread\n");

	clear_polling_state(thread);

	if (!_is_thread_pending(thread)) {
   22562:	0798      	lsls	r0, r3, #30
   22564:	724a      	strb	r2, [r1, #9]
   22566:	d542      	bpl.n	225ee <signal_poll_event+0xa6>
		goto ready_event;
	}

	if (_is_thread_timeout_expired(thread)) {
   22568:	6a0b      	ldr	r3, [r1, #32]
   2256a:	3302      	adds	r3, #2
   2256c:	d04a      	beq.n	22604 <signal_poll_event+0xbc>
	sys_dlist_remove(&thread->base.k_q_node);
   2256e:	4608      	mov	r0, r1
   22570:	f7ff ffc2 	bl	224f8 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   22574:	7a4b      	ldrb	r3, [r1, #9]
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   22576:	6a0c      	ldr	r4, [r1, #32]
   22578:	f023 0302 	bic.w	r3, r3, #2
   2257c:	1c62      	adds	r2, r4, #1
   2257e:	724b      	strb	r3, [r1, #9]
	return _abort_timeout(&thread->base.timeout);
   22580:	f101 0010 	add.w	r0, r1, #16
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   22584:	d00c      	beq.n	225a0 <signal_poll_event+0x58>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   22586:	4b21      	ldr	r3, [pc, #132]	; (2260c <signal_poll_event+0xc4>)
   22588:	695b      	ldr	r3, [r3, #20]
   2258a:	4298      	cmp	r0, r3
	return (node == list->tail) ? NULL : node->next;
   2258c:	bf1f      	itttt	ne
   2258e:	690a      	ldrne	r2, [r1, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   22590:	6913      	ldrne	r3, [r2, #16]
   22592:	191b      	addne	r3, r3, r4
   22594:	6113      	strne	r3, [r2, #16]
	sys_dlist_remove(&timeout->node);
   22596:	f7ff ffaf 	bl	224f8 <sys_dlist_remove>
	timeout->delta_ticks_from_prev = _INACTIVE;
   2259a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2259e:	620b      	str	r3, [r1, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   225a0:	7a48      	ldrb	r0, [r1, #9]
		return -EAGAIN;
	}

	_unpend_thread(thread);
	_abort_thread_timeout(thread);
	_set_thread_return_value(thread,
   225a2:	2e00      	cmp	r6, #0
   225a4:	bf0c      	ite	eq
   225a6:	f06f 0303 	mvneq.w	r3, #3
   225aa:	2300      	movne	r3, #0
   225ac:	f010 041f 	ands.w	r4, r0, #31
   225b0:	664b      	str	r3, [r1, #100]	; 0x64
   225b2:	d11c      	bne.n	225ee <signal_poll_event+0xa6>
   225b4:	6a0b      	ldr	r3, [r1, #32]
   225b6:	3301      	adds	r3, #1
   225b8:	d119      	bne.n	225ee <signal_poll_event+0xa6>

	if (!_is_thread_ready(thread)) {
		goto ready_event;
	}

	_add_thread_to_ready_q(thread);
   225ba:	4608      	mov	r0, r1
   225bc:	f7ff f916 	bl	217ec <_add_thread_to_ready_q>
   225c0:	f3ef 8305 	mrs	r3, IPSR
   225c4:	2b0d      	cmp	r3, #13
   225c6:	d81b      	bhi.n	22600 <signal_poll_event+0xb8>
   225c8:	b123      	cbz	r3, 225d4 <signal_poll_event+0x8c>
   225ca:	4b11      	ldr	r3, [pc, #68]	; (22610 <signal_poll_event+0xc8>)
   225cc:	6858      	ldr	r0, [r3, #4]
   225ce:	f410 6000 	ands.w	r0, r0, #2048	; 0x800
   225d2:	d00b      	beq.n	225ec <signal_poll_event+0xa4>
	return _is_preempt(_current) && __must_switch_threads();
   225d4:	4b0d      	ldr	r3, [pc, #52]	; (2260c <signal_poll_event+0xc4>)
   225d6:	689b      	ldr	r3, [r3, #8]
   225d8:	895b      	ldrh	r3, [r3, #10]
   225da:	2b7f      	cmp	r3, #127	; 0x7f
   225dc:	d901      	bls.n	225e2 <signal_poll_event+0x9a>
	*must_reschedule = !_is_in_isr() && _must_switch_threads();
   225de:	2000      	movs	r0, #0
   225e0:	e004      	b.n	225ec <signal_poll_event+0xa4>
   225e2:	f7ff f9fd 	bl	219e0 <__must_switch_threads>
   225e6:	3000      	adds	r0, #0
   225e8:	bf18      	it	ne
   225ea:	2001      	movne	r0, #1
   225ec:	6038      	str	r0, [r7, #0]
	event->state |= state;
   225ee:	7b6b      	ldrb	r3, [r5, #13]
   225f0:	ea46 1613 	orr.w	r6, r6, r3, lsr #4
   225f4:	f366 1307 	bfi	r3, r6, #4, #4
	event->poller = NULL;
   225f8:	2000      	movs	r0, #0
	event->state |= state;
   225fa:	736b      	strb	r3, [r5, #13]
	event->poller = NULL;
   225fc:	60a8      	str	r0, [r5, #8]

ready_event:
	set_event_ready(event, state);
	return 0;
   225fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	*must_reschedule = !_is_in_isr() && _must_switch_threads();
   22600:	4620      	mov	r0, r4
   22602:	e7f3      	b.n	225ec <signal_poll_event+0xa4>
		return -EAGAIN;
   22604:	f06f 000a 	mvn.w	r0, #10
   22608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2260a:	bf00      	nop
   2260c:	20002ff8 	.word	0x20002ff8
   22610:	e000ed00 	.word	0xe000ed00

00022614 <add_event>:
	return list->head == list;
   22614:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   22616:	4298      	cmp	r0, r3
{
   22618:	b530      	push	{r4, r5, lr}
   2261a:	d00a      	beq.n	22632 <add_event+0x1e>
   2261c:	6844      	ldr	r4, [r0, #4]
	if (!pending || _is_t1_higher_prio_than_t2(pending->poller->thread,
   2261e:	b144      	cbz	r4, 22632 <add_event+0x1e>
   22620:	68a5      	ldr	r5, [r4, #8]
   22622:	6812      	ldr	r2, [r2, #0]
   22624:	682d      	ldr	r5, [r5, #0]
   22626:	f992 200a 	ldrsb.w	r2, [r2, #10]
   2262a:	f995 500a 	ldrsb.w	r5, [r5, #10]
   2262e:	4295      	cmp	r5, r2
   22630:	da17      	bge.n	22662 <add_event+0x4e>
	node->next = list;
   22632:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
   22634:	6843      	ldr	r3, [r0, #4]
   22636:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
   22638:	6843      	ldr	r3, [r0, #4]
   2263a:	6019      	str	r1, [r3, #0]
	list->tail = node;
   2263c:	6041      	str	r1, [r0, #4]
   2263e:	bd30      	pop	{r4, r5, pc}
		if (_is_t1_higher_prio_than_t2(poller->thread,
   22640:	689d      	ldr	r5, [r3, #8]
   22642:	682d      	ldr	r5, [r5, #0]
   22644:	f995 500a 	ldrsb.w	r5, [r5, #10]
   22648:	4295      	cmp	r5, r2
   2264a:	dd06      	ble.n	2265a <add_event+0x46>
		node->prev = insert_point->prev;
   2264c:	685a      	ldr	r2, [r3, #4]
   2264e:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
   22650:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
   22652:	685a      	ldr	r2, [r3, #4]
   22654:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
   22656:	6059      	str	r1, [r3, #4]
   22658:	bd30      	pop	{r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   2265a:	42a3      	cmp	r3, r4
   2265c:	d003      	beq.n	22666 <add_event+0x52>
   2265e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   22660:	b10b      	cbz	r3, 22666 <add_event+0x52>
   22662:	2b00      	cmp	r3, #0
   22664:	d1ec      	bne.n	22640 <add_event+0x2c>
	node->prev = list->tail;
   22666:	e881 0011 	stmia.w	r1, {r0, r4}
   2266a:	e7e5      	b.n	22638 <add_event+0x24>

0002266c <k_poll_event_init>:
{
   2266c:	b530      	push	{r4, r5, lr}
	event->type = type;
   2266e:	7b44      	ldrb	r4, [r0, #13]
	event->obj = obj;
   22670:	6103      	str	r3, [r0, #16]
	event->type = type;
   22672:	f361 0403 	bfi	r4, r1, #0, #4
	event->mode = mode;
   22676:	7b81      	ldrb	r1, [r0, #14]
   22678:	f362 0100 	bfi	r1, r2, #0, #1
   2267c:	7381      	strb	r1, [r0, #14]
	event->unused = 0;
   2267e:	89c2      	ldrh	r2, [r0, #14]
	event->poller = NULL;
   22680:	2500      	movs	r5, #0
	event->state = K_POLL_STATE_NOT_READY;
   22682:	f365 1407 	bfi	r4, r5, #4, #4
	event->unused = 0;
   22686:	f365 024f 	bfi	r2, r5, #1, #15
	event->poller = NULL;
   2268a:	6085      	str	r5, [r0, #8]
	event->state = K_POLL_STATE_NOT_READY;
   2268c:	7344      	strb	r4, [r0, #13]
	event->unused = 0;
   2268e:	81c2      	strh	r2, [r0, #14]
	event->obj = obj;
   22690:	bd30      	pop	{r4, r5, pc}
	...

00022694 <k_poll>:
{
   22694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22698:	b087      	sub	sp, #28
   2269a:	4680      	mov	r8, r0
   2269c:	9101      	str	r1, [sp, #4]
   2269e:	4691      	mov	r9, r2
   226a0:	f04f 0320 	mov.w	r3, #32
   226a4:	f3ef 8111 	mrs	r1, BASEPRI
   226a8:	f383 8811 	msr	BASEPRI, r3
	set_polling_state(_current);
   226ac:	4d4a      	ldr	r5, [pc, #296]	; (227d8 <k_poll+0x144>)
   226ae:	68aa      	ldr	r2, [r5, #8]
	thread->base.thread_state |= states;
   226b0:	7a53      	ldrb	r3, [r2, #9]
   226b2:	f043 0320 	orr.w	r3, r3, #32
   226b6:	7253      	strb	r3, [r2, #9]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   226b8:	f381 8811 	msr	BASEPRI, r1
	struct _poller poller = { .thread = _current };
   226bc:	f10d 0a18 	add.w	sl, sp, #24
   226c0:	68aa      	ldr	r2, [r5, #8]
   226c2:	f84a 2d0c 	str.w	r2, [sl, #-12]!
   226c6:	4604      	mov	r4, r0
	for (int ii = 0; ii < num_events; ii++) {
   226c8:	2700      	movs	r7, #0
	int last_registered = -1, rc;
   226ca:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
	for (int ii = 0; ii < num_events; ii++) {
   226ce:	9b01      	ldr	r3, [sp, #4]
   226d0:	429f      	cmp	r7, r3
   226d2:	db15      	blt.n	22700 <k_poll+0x6c>
	__asm__ volatile(
   226d4:	f04f 0320 	mov.w	r3, #32
   226d8:	f3ef 8711 	mrs	r7, BASEPRI
   226dc:	f383 8811 	msr	BASEPRI, r3
	return _is_thread_polling(_current);
   226e0:	68aa      	ldr	r2, [r5, #8]
   226e2:	7a53      	ldrb	r3, [r2, #9]
	if (!is_polling()) {
   226e4:	f013 0420 	ands.w	r4, r3, #32
   226e8:	d144      	bne.n	22774 <k_poll+0xe0>
		clear_event_registrations(events, last_registered, key);
   226ea:	463a      	mov	r2, r7
   226ec:	4631      	mov	r1, r6
   226ee:	4640      	mov	r0, r8
   226f0:	f7ff ff08 	bl	22504 <clear_event_registrations>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   226f4:	f387 8811 	msr	BASEPRI, r7
}
   226f8:	4620      	mov	r0, r4
   226fa:	b007      	add	sp, #28
   226fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   22700:	f04f 0220 	mov.w	r2, #32
   22704:	f3ef 8b11 	mrs	fp, BASEPRI
   22708:	f382 8811 	msr	BASEPRI, r2
	switch (event->type) {
   2270c:	7b61      	ldrb	r1, [r4, #13]
   2270e:	f001 020f 	and.w	r2, r1, #15
   22712:	2a02      	cmp	r2, #2
   22714:	d003      	beq.n	2271e <k_poll+0x8a>
   22716:	2a04      	cmp	r2, #4
   22718:	d004      	beq.n	22724 <k_poll+0x90>
   2271a:	2a01      	cmp	r2, #1
   2271c:	d106      	bne.n	2272c <k_poll+0x98>
		if (event->signal->signaled) {
   2271e:	6920      	ldr	r0, [r4, #16]
   22720:	6880      	ldr	r0, [r0, #8]
   22722:	e001      	b.n	22728 <k_poll+0x94>
		if (!k_queue_is_empty(event->queue)) {
   22724:	6920      	ldr	r0, [r4, #16]
   22726:	6800      	ldr	r0, [r0, #0]
		if (event->signal->signaled) {
   22728:	2800      	cmp	r0, #0
   2272a:	d148      	bne.n	227be <k_poll+0x12a>
		} else if (timeout != K_NO_WAIT && is_polling()) {
   2272c:	f1b9 0f00 	cmp.w	r9, #0
   22730:	d016      	beq.n	22760 <k_poll+0xcc>
   22732:	68a9      	ldr	r1, [r5, #8]
   22734:	7a49      	ldrb	r1, [r1, #9]
   22736:	068b      	lsls	r3, r1, #26
   22738:	d512      	bpl.n	22760 <k_poll+0xcc>
	switch (event->type) {
   2273a:	2a02      	cmp	r2, #2
   2273c:	d007      	beq.n	2274e <k_poll+0xba>
   2273e:	2a04      	cmp	r2, #4
   22740:	d013      	beq.n	2276a <k_poll+0xd6>
   22742:	2a01      	cmp	r2, #1
   22744:	d109      	bne.n	2275a <k_poll+0xc6>
		add_event(&event->signal->poll_events, event, poller);
   22746:	4652      	mov	r2, sl
   22748:	4621      	mov	r1, r4
   2274a:	6920      	ldr	r0, [r4, #16]
   2274c:	e003      	b.n	22756 <k_poll+0xc2>
		add_event(&event->sem->poll_events, event, poller);
   2274e:	6920      	ldr	r0, [r4, #16]
   22750:	4652      	mov	r2, sl
   22752:	4621      	mov	r1, r4
   22754:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   22756:	f7ff ff5d 	bl	22614 <add_event>
	event->poller = poller;
   2275a:	f8c4 a008 	str.w	sl, [r4, #8]
				++last_registered;
   2275e:	3601      	adds	r6, #1
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   22760:	f38b 8811 	msr	BASEPRI, fp
	for (int ii = 0; ii < num_events; ii++) {
   22764:	3701      	adds	r7, #1
   22766:	3414      	adds	r4, #20
   22768:	e7b1      	b.n	226ce <k_poll+0x3a>
		add_event(&event->queue->poll_events, event, poller);
   2276a:	6920      	ldr	r0, [r4, #16]
   2276c:	4652      	mov	r2, sl
   2276e:	4621      	mov	r1, r4
   22770:	3008      	adds	r0, #8
   22772:	e7f0      	b.n	22756 <k_poll+0xc2>
	thread->base.thread_state &= ~states;
   22774:	f023 0320 	bic.w	r3, r3, #32
   22778:	7253      	strb	r3, [r2, #9]
	if (timeout == K_NO_WAIT) {
   2277a:	f1b9 0f00 	cmp.w	r9, #0
   2277e:	d104      	bne.n	2278a <k_poll+0xf6>
   22780:	f387 8811 	msr	BASEPRI, r7
		return -EAGAIN;
   22784:	f06f 040a 	mvn.w	r4, #10
   22788:	e7b6      	b.n	226f8 <k_poll+0x64>
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
   2278a:	a804      	add	r0, sp, #16
	_pend_current_thread(&wait_q, timeout);
   2278c:	4649      	mov	r1, r9
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
   2278e:	9004      	str	r0, [sp, #16]
   22790:	9005      	str	r0, [sp, #20]
	_pend_current_thread(&wait_q, timeout);
   22792:	f7ff f915 	bl	219c0 <_pend_current_thread>
	_update_time_slice_before_swap();
   22796:	f7ff f9d5 	bl	21b44 <_update_time_slice_before_swap>
	return __swap(key);
   2279a:	4638      	mov	r0, r7
   2279c:	f7df f864 	bl	1868 <__swap>
   227a0:	4604      	mov	r4, r0
	__asm__ volatile(
   227a2:	f04f 0320 	mov.w	r3, #32
   227a6:	f3ef 8511 	mrs	r5, BASEPRI
   227aa:	f383 8811 	msr	BASEPRI, r3
	clear_event_registrations(events, last_registered, key);
   227ae:	462a      	mov	r2, r5
   227b0:	4631      	mov	r1, r6
   227b2:	4640      	mov	r0, r8
   227b4:	f7ff fea6 	bl	22504 <clear_event_registrations>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   227b8:	f385 8811 	msr	BASEPRI, r5
	return swap_rc;
   227bc:	e79c      	b.n	226f8 <k_poll+0x64>
	event->state |= state;
   227be:	ea42 1211 	orr.w	r2, r2, r1, lsr #4
   227c2:	f362 1107 	bfi	r1, r2, #4, #4
	event->poller = NULL;
   227c6:	2300      	movs	r3, #0
   227c8:	60a3      	str	r3, [r4, #8]
	event->state |= state;
   227ca:	7361      	strb	r1, [r4, #13]
			clear_polling_state(_current);
   227cc:	68a9      	ldr	r1, [r5, #8]
   227ce:	7a4a      	ldrb	r2, [r1, #9]
   227d0:	f022 0220 	bic.w	r2, r2, #32
   227d4:	724a      	strb	r2, [r1, #9]
   227d6:	e7c3      	b.n	22760 <k_poll+0xcc>
   227d8:	20002ff8 	.word	0x20002ff8

000227dc <_handle_obj_poll_events>:
}

/* returns 1 if a reschedule must take place, 0 otherwise */
int _handle_obj_poll_events(sys_dlist_t *events, u32_t state)
{
   227dc:	b513      	push	{r0, r1, r4, lr}
	return list->head == list;
   227de:	6804      	ldr	r4, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node;

	if (sys_dlist_is_empty(list)) {
   227e0:	42a0      	cmp	r0, r4
   227e2:	d102      	bne.n	227ea <_handle_obj_poll_events+0xe>
	struct k_poll_event *poll_event;
	int must_reschedule;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (!poll_event) {
		return 0;
   227e4:	2000      	movs	r0, #0
	}

	(void) signal_poll_event(poll_event, state, &must_reschedule);
	return must_reschedule;
}
   227e6:	b002      	add	sp, #8
   227e8:	bd10      	pop	{r4, pc}
		return NULL;
	}

	node = list->head;
	sys_dlist_remove(node);
   227ea:	4620      	mov	r0, r4
   227ec:	f7ff fe84 	bl	224f8 <sys_dlist_remove>
	if (!poll_event) {
   227f0:	2c00      	cmp	r4, #0
   227f2:	d0f7      	beq.n	227e4 <_handle_obj_poll_events+0x8>
	(void) signal_poll_event(poll_event, state, &must_reschedule);
   227f4:	aa01      	add	r2, sp, #4
   227f6:	4620      	mov	r0, r4
   227f8:	f7ff fea6 	bl	22548 <signal_poll_event>
	return must_reschedule;
   227fc:	9801      	ldr	r0, [sp, #4]
   227fe:	e7f2      	b.n	227e6 <_handle_obj_poll_events+0xa>

00022800 <k_poll_signal>:
	signal->signaled = 0;
	/* signal->result is left unitialized */
}

int k_poll_signal(struct k_poll_signal *signal, int result)
{
   22800:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__asm__ volatile(
   22802:	f04f 0320 	mov.w	r3, #32
   22806:	f3ef 8511 	mrs	r5, BASEPRI
   2280a:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   2280e:	6804      	ldr	r4, [r0, #0]
	unsigned int key = irq_lock();
	struct k_poll_event *poll_event;
	int must_reschedule;

	signal->result = result;
   22810:	60c1      	str	r1, [r0, #12]
	if (sys_dlist_is_empty(list)) {
   22812:	42a0      	cmp	r0, r4
	signal->signaled = 1;
   22814:	f04f 0101 	mov.w	r1, #1
   22818:	6081      	str	r1, [r0, #8]
   2281a:	d105      	bne.n	22828 <k_poll_signal+0x28>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2281c:	f385 8811 	msr	BASEPRI, r5

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (!poll_event) {
		irq_unlock(key);
		return 0;
   22820:	2400      	movs	r4, #0
	} else {
		irq_unlock(key);
	}

	return rc;
}
   22822:	4620      	mov	r0, r4
   22824:	b003      	add	sp, #12
   22826:	bd30      	pop	{r4, r5, pc}
	sys_dlist_remove(node);
   22828:	4620      	mov	r0, r4
   2282a:	f7ff fe65 	bl	224f8 <sys_dlist_remove>
	if (!poll_event) {
   2282e:	2c00      	cmp	r4, #0
   22830:	d0f4      	beq.n	2281c <k_poll_signal+0x1c>
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED,
   22832:	4620      	mov	r0, r4
   22834:	aa01      	add	r2, sp, #4
   22836:	f7ff fe87 	bl	22548 <signal_poll_event>
	if (must_reschedule) {
   2283a:	9b01      	ldr	r3, [sp, #4]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED,
   2283c:	4604      	mov	r4, r0
	if (must_reschedule) {
   2283e:	b12b      	cbz	r3, 2284c <k_poll_signal+0x4c>
	_update_time_slice_before_swap();
   22840:	f7ff f980 	bl	21b44 <_update_time_slice_before_swap>
	return __swap(key);
   22844:	4628      	mov	r0, r5
   22846:	f7df f80f 	bl	1868 <__swap>
   2284a:	e7ea      	b.n	22822 <k_poll_signal+0x22>
   2284c:	f385 8811 	msr	BASEPRI, r5
   22850:	e7e7      	b.n	22822 <k_poll_signal+0x22>

00022852 <_OffsetAbsSyms>:

#ifdef CONFIG_FLOAT
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread) -
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
   22852:	4770      	bx	lr
