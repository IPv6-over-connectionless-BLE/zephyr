
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:
};
#endif

/* Linker needs this */
GEN_ABS_SYM_BEGIN(isr_tables_syms)
GEN_ABSOLUTE_SYM(__ISR_LIST_SIZEOF, sizeof(struct _isr_list));
       0:	20003e78 	.word	0x20003e78

#ifdef CONFIG_ERRNO
int *__errno(void)
{
	return &_current->errno_var;
}
       4:	00000ee5 	.word	0x00000ee5
       8:	00000f35 	.word	0x00000f35
       c:	00000d7d 	.word	0x00000d7d
      10:	00000d7d 	.word	0x00000d7d
      14:	00000d7d 	.word	0x00000d7d
      18:	00000d7d 	.word	0x00000d7d
      1c:	00000d7d 	.word	0x00000d7d
      20:	00000d7d 	.word	0x00000d7d
      24:	00000d7d 	.word	0x00000d7d
      28:	00000d7d 	.word	0x00000d7d
      2c:	00000971 	.word	0x00000971
      30:	00000d7d 	.word	0x00000d7d
      34:	00000d7d 	.word	0x00000d7d
      38:	0000092d 	.word	0x0000092d
      3c:	00000d7d 	.word	0x00000d7d

00000040 <_irq_vector_table>:
      40:	00000ea9 0000a41b 00000ea9 00000ea9     ................
      50:	00000ea9 00000ea9 00000ea9 00000ea9     ................
      60:	00000ea9 00000ea9 00000ea9 00000ea9     ................
      70:	00000ea9 00000ea9 00000ea9 00000ea9     ................
      80:	00000ea9 00000ea9 00000ea9 00000ea9     ................
      90:	00000ea9 00000ea9 00000ea9 00000ea9     ................
      a0:	00000ea9 00000ea9 00000ea9 00000ea9     ................
      b0:	00000ea9 00000ea9 00000ea9 00000ea9     ................
      c0:	00000ea9 00000ea9 00000ea9 00000ea9     ................
      d0:	00000ea9 00000ea9 00000ea9 00000ea9     ................
      e0:	00000ea9 00000ea9 00000ea9 00000ea9     ................
      f0:	00000ea9 00000ea9                       ........

000000f8 <_sw_isr_table>:
      f8:	00000000 0000178d 00000000 00000cf5     ................
     108:	00000000 00000cf5 00000000 00000cf5     ................
     118:	00000000 00000cf5 00000000 00000cf5     ................
     128:	20004ee8 00001971 00000000 00000cf5     .N. q...........
     138:	00000000 00000cf5 00000000 00000cf5     ................
     148:	00000000 00000cf5 00000000 0000a3e1     ................
     158:	00000000 00000cf5 20004ec4 00001d39     .........N. 9...
     168:	00000000 00000cf5 00000000 00000cf5     ................
     178:	00000000 00000cf5 00000000 00001e79     ............y...
     188:	00000000 00000cf5 00000000 00000cf5     ................
     198:	00000000 00000cf5 00000000 00000cf5     ................
     1a8:	00000000 00000cf5 00000000 00000cf5     ................
     1b8:	00000000 0000a415 00000000 00000cf5     ................
     1c8:	00000000 00000cf5 00000000 00000cf5     ................
     1d8:	00000000 00000cf5 00000000 00000cf5     ................
     1e8:	00000000 00000cf5 00000000 00000cf5     ................
     1f8:	00000000 00000cf5 00000000 00000cf5     ................
     208:	00000000 00000cf5 00000000 00000cf5     ................
     218:	00000000 00000cf5 00000000 00000cf5     ................
     228:	00000000 00000cf5 00000000 00000cf5     ................
     238:	00000000 00000cf5 00000000 00000cf5     ................
     248:	00000000 00000cf5 00000000 00000cf5     ................
     258:	00000000 00000cf5 00000000 00000cf5     ................

00000268 <__aeabi_uldivmod>:
     268:	b953      	cbnz	r3, 280 <CONFIG_BT_HCI_TX_STACK_SIZE>
     26a:	b94a      	cbnz	r2, 280 <CONFIG_BT_HCI_TX_STACK_SIZE>
     26c:	2900      	cmp	r1, #0
     26e:	bf08      	it	eq
     270:	2800      	cmpeq	r0, #0
     272:	bf1c      	itt	ne
     274:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     278:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     27c:	f000 b98e 	b.w	59c <__aeabi_idiv0>
     280:	f1ad 0c08 	sub.w	ip, sp, #8
     284:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     288:	f000 f81a 	bl	2c0 <__udivmoddi4>
     28c:	f8dd e004 	ldr.w	lr, [sp, #4]
     290:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     294:	b004      	add	sp, #16
     296:	4770      	bx	lr

00000298 <__popcountsi2>:
     298:	0843      	lsrs	r3, r0, #1
     29a:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
     29e:	1ac0      	subs	r0, r0, r3
     2a0:	0883      	lsrs	r3, r0, #2
     2a2:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
     2a6:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
     2aa:	4418      	add	r0, r3
     2ac:	eb00 1010 	add.w	r0, r0, r0, lsr #4
     2b0:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
     2b4:	eb00 2000 	add.w	r0, r0, r0, lsl #8
     2b8:	eb00 4000 	add.w	r0, r0, r0, lsl #16
     2bc:	0e00      	lsrs	r0, r0, #24
     2be:	4770      	bx	lr

000002c0 <__udivmoddi4>:
     2c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     2c4:	468c      	mov	ip, r1
     2c6:	460d      	mov	r5, r1
     2c8:	4604      	mov	r4, r0
     2ca:	9e08      	ldr	r6, [sp, #32]
     2cc:	2b00      	cmp	r3, #0
     2ce:	d151      	bne.n	374 <__udivmoddi4+0xb4>
     2d0:	428a      	cmp	r2, r1
     2d2:	4617      	mov	r7, r2
     2d4:	d96d      	bls.n	3b2 <__udivmoddi4+0xf2>
     2d6:	fab2 fe82 	clz	lr, r2
     2da:	f1be 0f00 	cmp.w	lr, #0
     2de:	d00b      	beq.n	2f8 <__udivmoddi4+0x38>
     2e0:	f1ce 0c20 	rsb	ip, lr, #32
     2e4:	fa01 f50e 	lsl.w	r5, r1, lr
     2e8:	fa20 fc0c 	lsr.w	ip, r0, ip
     2ec:	fa02 f70e 	lsl.w	r7, r2, lr
     2f0:	ea4c 0c05 	orr.w	ip, ip, r5
     2f4:	fa00 f40e 	lsl.w	r4, r0, lr
     2f8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
     2fc:	0c25      	lsrs	r5, r4, #16
     2fe:	fbbc f8fa 	udiv	r8, ip, sl
     302:	fa1f f987 	uxth.w	r9, r7
     306:	fb0a cc18 	mls	ip, sl, r8, ip
     30a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     30e:	fb08 f309 	mul.w	r3, r8, r9
     312:	42ab      	cmp	r3, r5
     314:	d90a      	bls.n	32c <__udivmoddi4+0x6c>
     316:	19ed      	adds	r5, r5, r7
     318:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
     31c:	f080 8123 	bcs.w	566 <CONFIG_BT_RX_STACK_SIZE+0x166>
     320:	42ab      	cmp	r3, r5
     322:	f240 8120 	bls.w	566 <CONFIG_BT_RX_STACK_SIZE+0x166>
     326:	f1a8 0802 	sub.w	r8, r8, #2
     32a:	443d      	add	r5, r7
     32c:	1aed      	subs	r5, r5, r3
     32e:	b2a4      	uxth	r4, r4
     330:	fbb5 f0fa 	udiv	r0, r5, sl
     334:	fb0a 5510 	mls	r5, sl, r0, r5
     338:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     33c:	fb00 f909 	mul.w	r9, r0, r9
     340:	45a1      	cmp	r9, r4
     342:	d909      	bls.n	358 <__udivmoddi4+0x98>
     344:	19e4      	adds	r4, r4, r7
     346:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     34a:	f080 810a 	bcs.w	562 <CONFIG_BT_RX_STACK_SIZE+0x162>
     34e:	45a1      	cmp	r9, r4
     350:	f240 8107 	bls.w	562 <CONFIG_BT_RX_STACK_SIZE+0x162>
     354:	3802      	subs	r0, #2
     356:	443c      	add	r4, r7
     358:	eba4 0409 	sub.w	r4, r4, r9
     35c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     360:	2100      	movs	r1, #0
     362:	2e00      	cmp	r6, #0
     364:	d061      	beq.n	42a <CONFIG_BT_RX_STACK_SIZE+0x2a>
     366:	fa24 f40e 	lsr.w	r4, r4, lr
     36a:	2300      	movs	r3, #0
     36c:	6034      	str	r4, [r6, #0]
     36e:	6073      	str	r3, [r6, #4]
     370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     374:	428b      	cmp	r3, r1
     376:	d907      	bls.n	388 <__udivmoddi4+0xc8>
     378:	2e00      	cmp	r6, #0
     37a:	d054      	beq.n	426 <CONFIG_BT_RX_STACK_SIZE+0x26>
     37c:	2100      	movs	r1, #0
     37e:	e886 0021 	stmia.w	r6, {r0, r5}
     382:	4608      	mov	r0, r1
     384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     388:	fab3 f183 	clz	r1, r3
     38c:	2900      	cmp	r1, #0
     38e:	f040 808e 	bne.w	4ae <CONFIG_BT_RX_STACK_SIZE+0xae>
     392:	42ab      	cmp	r3, r5
     394:	d302      	bcc.n	39c <__udivmoddi4+0xdc>
     396:	4282      	cmp	r2, r0
     398:	f200 80fa 	bhi.w	590 <CONFIG_BT_RX_STACK_SIZE+0x190>
     39c:	1a84      	subs	r4, r0, r2
     39e:	eb65 0503 	sbc.w	r5, r5, r3
     3a2:	2001      	movs	r0, #1
     3a4:	46ac      	mov	ip, r5
     3a6:	2e00      	cmp	r6, #0
     3a8:	d03f      	beq.n	42a <CONFIG_BT_RX_STACK_SIZE+0x2a>
     3aa:	e886 1010 	stmia.w	r6, {r4, ip}
     3ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3b2:	b912      	cbnz	r2, 3ba <__udivmoddi4+0xfa>
     3b4:	2701      	movs	r7, #1
     3b6:	fbb7 f7f2 	udiv	r7, r7, r2
     3ba:	fab7 fe87 	clz	lr, r7
     3be:	f1be 0f00 	cmp.w	lr, #0
     3c2:	d134      	bne.n	42e <CONFIG_BT_RX_STACK_SIZE+0x2e>
     3c4:	1beb      	subs	r3, r5, r7
     3c6:	0c3a      	lsrs	r2, r7, #16
     3c8:	fa1f fc87 	uxth.w	ip, r7
     3cc:	2101      	movs	r1, #1
     3ce:	fbb3 f8f2 	udiv	r8, r3, r2
     3d2:	0c25      	lsrs	r5, r4, #16
     3d4:	fb02 3318 	mls	r3, r2, r8, r3
     3d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     3dc:	fb0c f308 	mul.w	r3, ip, r8
     3e0:	42ab      	cmp	r3, r5
     3e2:	d907      	bls.n	3f4 <__udivmoddi4+0x134>
     3e4:	19ed      	adds	r5, r5, r7
     3e6:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     3ea:	d202      	bcs.n	3f2 <__udivmoddi4+0x132>
     3ec:	42ab      	cmp	r3, r5
     3ee:	f200 80d1 	bhi.w	594 <CONFIG_BT_RX_STACK_SIZE+0x194>
     3f2:	4680      	mov	r8, r0
     3f4:	1aed      	subs	r5, r5, r3
     3f6:	b2a3      	uxth	r3, r4
     3f8:	fbb5 f0f2 	udiv	r0, r5, r2
     3fc:	fb02 5510 	mls	r5, r2, r0, r5
     400:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     404:	fb0c fc00 	mul.w	ip, ip, r0
     408:	45a4      	cmp	ip, r4
     40a:	d907      	bls.n	41c <CONFIG_BT_RX_STACK_SIZE+0x1c>
     40c:	19e4      	adds	r4, r4, r7
     40e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     412:	d202      	bcs.n	41a <CONFIG_BT_RX_STACK_SIZE+0x1a>
     414:	45a4      	cmp	ip, r4
     416:	f200 80b8 	bhi.w	58a <CONFIG_BT_RX_STACK_SIZE+0x18a>
     41a:	4618      	mov	r0, r3
     41c:	eba4 040c 	sub.w	r4, r4, ip
     420:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     424:	e79d      	b.n	362 <__udivmoddi4+0xa2>
     426:	4631      	mov	r1, r6
     428:	4630      	mov	r0, r6
     42a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     42e:	f1ce 0420 	rsb	r4, lr, #32
     432:	fa05 f30e 	lsl.w	r3, r5, lr
     436:	fa07 f70e 	lsl.w	r7, r7, lr
     43a:	fa20 f804 	lsr.w	r8, r0, r4
     43e:	0c3a      	lsrs	r2, r7, #16
     440:	fa25 f404 	lsr.w	r4, r5, r4
     444:	ea48 0803 	orr.w	r8, r8, r3
     448:	fbb4 f1f2 	udiv	r1, r4, r2
     44c:	ea4f 4518 	mov.w	r5, r8, lsr #16
     450:	fb02 4411 	mls	r4, r2, r1, r4
     454:	fa1f fc87 	uxth.w	ip, r7
     458:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
     45c:	fb01 f30c 	mul.w	r3, r1, ip
     460:	42ab      	cmp	r3, r5
     462:	fa00 f40e 	lsl.w	r4, r0, lr
     466:	d909      	bls.n	47c <CONFIG_BT_RX_STACK_SIZE+0x7c>
     468:	19ed      	adds	r5, r5, r7
     46a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
     46e:	f080 808a 	bcs.w	586 <CONFIG_BT_RX_STACK_SIZE+0x186>
     472:	42ab      	cmp	r3, r5
     474:	f240 8087 	bls.w	586 <CONFIG_BT_RX_STACK_SIZE+0x186>
     478:	3902      	subs	r1, #2
     47a:	443d      	add	r5, r7
     47c:	1aeb      	subs	r3, r5, r3
     47e:	fa1f f588 	uxth.w	r5, r8
     482:	fbb3 f0f2 	udiv	r0, r3, r2
     486:	fb02 3310 	mls	r3, r2, r0, r3
     48a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     48e:	fb00 f30c 	mul.w	r3, r0, ip
     492:	42ab      	cmp	r3, r5
     494:	d907      	bls.n	4a6 <CONFIG_BT_RX_STACK_SIZE+0xa6>
     496:	19ed      	adds	r5, r5, r7
     498:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
     49c:	d26f      	bcs.n	57e <CONFIG_BT_RX_STACK_SIZE+0x17e>
     49e:	42ab      	cmp	r3, r5
     4a0:	d96d      	bls.n	57e <CONFIG_BT_RX_STACK_SIZE+0x17e>
     4a2:	3802      	subs	r0, #2
     4a4:	443d      	add	r5, r7
     4a6:	1aeb      	subs	r3, r5, r3
     4a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     4ac:	e78f      	b.n	3ce <__udivmoddi4+0x10e>
     4ae:	f1c1 0720 	rsb	r7, r1, #32
     4b2:	fa22 f807 	lsr.w	r8, r2, r7
     4b6:	408b      	lsls	r3, r1
     4b8:	fa05 f401 	lsl.w	r4, r5, r1
     4bc:	ea48 0303 	orr.w	r3, r8, r3
     4c0:	fa20 fe07 	lsr.w	lr, r0, r7
     4c4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
     4c8:	40fd      	lsrs	r5, r7
     4ca:	ea4e 0e04 	orr.w	lr, lr, r4
     4ce:	fbb5 f9fc 	udiv	r9, r5, ip
     4d2:	ea4f 441e 	mov.w	r4, lr, lsr #16
     4d6:	fb0c 5519 	mls	r5, ip, r9, r5
     4da:	fa1f f883 	uxth.w	r8, r3
     4de:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
     4e2:	fb09 f408 	mul.w	r4, r9, r8
     4e6:	42ac      	cmp	r4, r5
     4e8:	fa02 f201 	lsl.w	r2, r2, r1
     4ec:	fa00 fa01 	lsl.w	sl, r0, r1
     4f0:	d908      	bls.n	504 <CONFIG_BT_RX_STACK_SIZE+0x104>
     4f2:	18ed      	adds	r5, r5, r3
     4f4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     4f8:	d243      	bcs.n	582 <CONFIG_BT_RX_STACK_SIZE+0x182>
     4fa:	42ac      	cmp	r4, r5
     4fc:	d941      	bls.n	582 <CONFIG_BT_RX_STACK_SIZE+0x182>
     4fe:	f1a9 0902 	sub.w	r9, r9, #2
     502:	441d      	add	r5, r3
     504:	1b2d      	subs	r5, r5, r4
     506:	fa1f fe8e 	uxth.w	lr, lr
     50a:	fbb5 f0fc 	udiv	r0, r5, ip
     50e:	fb0c 5510 	mls	r5, ip, r0, r5
     512:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
     516:	fb00 f808 	mul.w	r8, r0, r8
     51a:	45a0      	cmp	r8, r4
     51c:	d907      	bls.n	52e <CONFIG_BT_RX_STACK_SIZE+0x12e>
     51e:	18e4      	adds	r4, r4, r3
     520:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
     524:	d229      	bcs.n	57a <CONFIG_BT_RX_STACK_SIZE+0x17a>
     526:	45a0      	cmp	r8, r4
     528:	d927      	bls.n	57a <CONFIG_BT_RX_STACK_SIZE+0x17a>
     52a:	3802      	subs	r0, #2
     52c:	441c      	add	r4, r3
     52e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     532:	eba4 0408 	sub.w	r4, r4, r8
     536:	fba0 8902 	umull	r8, r9, r0, r2
     53a:	454c      	cmp	r4, r9
     53c:	46c6      	mov	lr, r8
     53e:	464d      	mov	r5, r9
     540:	d315      	bcc.n	56e <CONFIG_BT_RX_STACK_SIZE+0x16e>
     542:	d012      	beq.n	56a <CONFIG_BT_RX_STACK_SIZE+0x16a>
     544:	b156      	cbz	r6, 55c <CONFIG_BT_RX_STACK_SIZE+0x15c>
     546:	ebba 030e 	subs.w	r3, sl, lr
     54a:	eb64 0405 	sbc.w	r4, r4, r5
     54e:	fa04 f707 	lsl.w	r7, r4, r7
     552:	40cb      	lsrs	r3, r1
     554:	431f      	orrs	r7, r3
     556:	40cc      	lsrs	r4, r1
     558:	6037      	str	r7, [r6, #0]
     55a:	6074      	str	r4, [r6, #4]
     55c:	2100      	movs	r1, #0
     55e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     562:	4618      	mov	r0, r3
     564:	e6f8      	b.n	358 <__udivmoddi4+0x98>
     566:	4690      	mov	r8, r2
     568:	e6e0      	b.n	32c <__udivmoddi4+0x6c>
     56a:	45c2      	cmp	sl, r8
     56c:	d2ea      	bcs.n	544 <CONFIG_BT_RX_STACK_SIZE+0x144>
     56e:	ebb8 0e02 	subs.w	lr, r8, r2
     572:	eb69 0503 	sbc.w	r5, r9, r3
     576:	3801      	subs	r0, #1
     578:	e7e4      	b.n	544 <CONFIG_BT_RX_STACK_SIZE+0x144>
     57a:	4628      	mov	r0, r5
     57c:	e7d7      	b.n	52e <CONFIG_BT_RX_STACK_SIZE+0x12e>
     57e:	4640      	mov	r0, r8
     580:	e791      	b.n	4a6 <CONFIG_BT_RX_STACK_SIZE+0xa6>
     582:	4681      	mov	r9, r0
     584:	e7be      	b.n	504 <CONFIG_BT_RX_STACK_SIZE+0x104>
     586:	4601      	mov	r1, r0
     588:	e778      	b.n	47c <CONFIG_BT_RX_STACK_SIZE+0x7c>
     58a:	3802      	subs	r0, #2
     58c:	443c      	add	r4, r7
     58e:	e745      	b.n	41c <CONFIG_BT_RX_STACK_SIZE+0x1c>
     590:	4608      	mov	r0, r1
     592:	e708      	b.n	3a6 <__udivmoddi4+0xe6>
     594:	f1a8 0802 	sub.w	r8, r8, #2
     598:	443d      	add	r5, r7
     59a:	e72b      	b.n	3f4 <__udivmoddi4+0x134>

0000059c <__aeabi_idiv0>:
     59c:	4770      	bx	lr
     59e:	bf00      	nop

000005a0 <strcpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
     5a0:	3901      	subs	r1, #1
	char *dest = d;

	while (*s != '\0') {
     5a2:	4603      	mov	r3, r0
     5a4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
     5a8:	b90a      	cbnz	r2, 5ae <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
     5aa:	701a      	strb	r2, [r3, #0]

	return dest;
}
     5ac:	4770      	bx	lr
		*d = *s;
     5ae:	f803 2b01 	strb.w	r2, [r3], #1
     5b2:	e7f7      	b.n	5a4 <strcpy+0x4>

000005b4 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
     5b4:	b510      	push	{r4, lr}
     5b6:	3901      	subs	r1, #1
	char *dest = d;

	while ((n > 0) && *s != '\0') {
     5b8:	4603      	mov	r3, r0
     5ba:	b13a      	cbz	r2, 5cc <strncpy+0x18>
     5bc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
     5c0:	b92c      	cbnz	r4, 5ce <strncpy+0x1a>
     5c2:	441a      	add	r2, r3
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
     5c4:	f803 4b01 	strb.w	r4, [r3], #1
	while (n > 0) {
     5c8:	4293      	cmp	r3, r2
     5ca:	d1fb      	bne.n	5c4 <strncpy+0x10>
		d++;
		n--;
	}

	return dest;
}
     5cc:	bd10      	pop	{r4, pc}
		*d = *s;
     5ce:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
     5d2:	3a01      	subs	r2, #1
     5d4:	e7f1      	b.n	5ba <strncpy+0x6>

000005d6 <strcmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
     5d6:	3801      	subs	r0, #1
     5d8:	3901      	subs	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
     5da:	f810 3f01 	ldrb.w	r3, [r0, #1]!
     5de:	f811 2f01 	ldrb.w	r2, [r1, #1]!
     5e2:	4293      	cmp	r3, r2
     5e4:	d102      	bne.n	5ec <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x10>
     5e6:	2b00      	cmp	r3, #0
     5e8:	d1f7      	bne.n	5da <strcmp+0x4>
     5ea:	461a      	mov	r2, r3
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
     5ec:	1a98      	subs	r0, r3, r2
     5ee:	4770      	bx	lr

000005f0 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
     5f0:	b570      	push	{r4, r5, r6, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n)
     5f2:	b182      	cbz	r2, 616 <CONFIG_BT_CTLR_COMPANY_ID+0x25>
		return 0;

	while ((--n > 0) && (*c1 == *c2)) {
     5f4:	3a01      	subs	r2, #1
     5f6:	460c      	mov	r4, r1
     5f8:	4603      	mov	r3, r0
     5fa:	d103      	bne.n	604 <CONFIG_BT_CTLR_COMPANY_ID+0x13>
		c1++;
		c2++;
	}

	return *c1 - *c2;
     5fc:	781a      	ldrb	r2, [r3, #0]
     5fe:	7820      	ldrb	r0, [r4, #0]
     600:	1a10      	subs	r0, r2, r0
     602:	bd70      	pop	{r4, r5, r6, pc}
	while ((--n > 0) && (*c1 == *c2)) {
     604:	781e      	ldrb	r6, [r3, #0]
     606:	7825      	ldrb	r5, [r4, #0]
     608:	42ae      	cmp	r6, r5
     60a:	f100 0001 	add.w	r0, r0, #1
     60e:	f101 0101 	add.w	r1, r1, #1
     612:	d0ef      	beq.n	5f4 <CONFIG_BT_CTLR_COMPANY_ID+0x3>
     614:	e7f2      	b.n	5fc <CONFIG_BT_CTLR_COMPANY_ID+0xb>
		return 0;
     616:	4610      	mov	r0, r2
}
     618:	bd70      	pop	{r4, r5, r6, pc}

0000061a <memcpy>:
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
     61a:	ea81 0300 	eor.w	r3, r1, r0
     61e:	f013 0f03 	tst.w	r3, #3
{
     622:	b570      	push	{r4, r5, r6, lr}
     624:	4603      	mov	r3, r0
	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
     626:	d00b      	beq.n	640 <memcpy+0x26>
     628:	3b01      	subs	r3, #1
     62a:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
     62c:	4291      	cmp	r1, r2
     62e:	d11b      	bne.n	668 <memcpy+0x4e>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
     630:	bd70      	pop	{r4, r5, r6, pc}
			if (n == 0) {
     632:	2a00      	cmp	r2, #0
     634:	d0fc      	beq.n	630 <memcpy+0x16>
			*(d_byte++) = *(s_byte++);
     636:	f811 4b01 	ldrb.w	r4, [r1], #1
     63a:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
     63e:	3a01      	subs	r2, #1
		while (((unsigned int)d_byte) & 0x3) {
     640:	079c      	lsls	r4, r3, #30
     642:	d1f6      	bne.n	632 <memcpy+0x18>
     644:	1f1e      	subs	r6, r3, #4
     646:	460d      	mov	r5, r1
     648:	1b54      	subs	r4, r2, r5
     64a:	440c      	add	r4, r1
		while (n >= sizeof(unsigned int)) {
     64c:	2c03      	cmp	r4, #3
     64e:	d806      	bhi.n	65e <memcpy+0x44>
     650:	f022 0403 	bic.w	r4, r2, #3
     654:	4421      	add	r1, r4
     656:	4423      	add	r3, r4
     658:	f002 0203 	and.w	r2, r2, #3
     65c:	e7e4      	b.n	628 <memcpy+0xe>
			*(d_word++) = *(s_word++);
     65e:	f855 4b04 	ldr.w	r4, [r5], #4
     662:	f846 4f04 	str.w	r4, [r6, #4]!
     666:	e7ef      	b.n	648 <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
     668:	f811 4b01 	ldrb.w	r4, [r1], #1
     66c:	f803 4f01 	strb.w	r4, [r3, #1]!
     670:	e7dc      	b.n	62c <memcpy+0x12>

00000672 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
     672:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
     674:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
     676:	4603      	mov	r3, r0

	while (((unsigned int)d_byte) & 0x3) {
     678:	079c      	lsls	r4, r3, #30
     67a:	d111      	bne.n	6a0 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	unsigned int *d_word = (unsigned int *)d_byte;
	unsigned int c_word = (unsigned int)(unsigned char)c;

	c_word |= c_word << 8;
     67c:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
     680:	ea44 4404 	orr.w	r4, r4, r4, lsl #16

	while (n >= sizeof(unsigned int)) {
     684:	461e      	mov	r6, r3
     686:	1b95      	subs	r5, r2, r6
     688:	441d      	add	r5, r3
     68a:	2d03      	cmp	r5, #3
     68c:	d80e      	bhi.n	6ac <memset+0x3a>
     68e:	f022 0403 	bic.w	r4, r2, #3
     692:	4423      	add	r3, r4
     694:	f002 0203 	and.w	r2, r2, #3
     698:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
     69a:	4293      	cmp	r3, r2
     69c:	d109      	bne.n	6b2 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
     69e:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
     6a0:	2a00      	cmp	r2, #0
     6a2:	d0fc      	beq.n	69e <memset+0x2c>
		*(d_byte++) = c_byte;
     6a4:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
     6a8:	3a01      	subs	r2, #1
     6aa:	e7e5      	b.n	678 <memset+0x6>
		*(d_word++) = c_word;
     6ac:	f846 4b04 	str.w	r4, [r6], #4
     6b0:	e7e9      	b.n	686 <memset+0x14>
		*(d_byte++) = c_byte;
     6b2:	f803 1b01 	strb.w	r1, [r3], #1
     6b6:	e7f0      	b.n	69a <memset+0x28>

000006b8 <_stdout_hook_default>:
static int _stdout_hook_default(int c)
{
	(void)(c);  /* Prevent warning about unused argument */

	return EOF;
}
     6b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     6bc:	4770      	bx	lr
	...

000006c0 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
     6c0:	4b01      	ldr	r3, [pc, #4]	; (6c8 <__stdout_hook_install+0x8>)
     6c2:	6018      	str	r0, [r3, #0]
     6c4:	4770      	bx	lr
     6c6:	bf00      	nop
     6c8:	20004bb8 	.word	0x20004bb8

000006cc <bt_ext_ready>:

	printk("Beacon started\n");
}

static void bt_ext_ready(int err)
{
     6cc:	b510      	push	{r4, lr}
	if (err) {
     6ce:	4604      	mov	r4, r0
{
     6d0:	b086      	sub	sp, #24
	if (err) {
     6d2:	b128      	cbz	r0, 6e0 <bt_ext_ready+0x14>
		printk("Bluetooth init failed (err %d)\n", err);
     6d4:	4601      	mov	r1, r0
     6d6:	4810      	ldr	r0, [pc, #64]	; (718 <bt_ext_ready+0x4c>)

	/* Start advertising */
	err = bt_le_ext_adv_start(BT_LE_ADV_NCONN, ad, ARRAY_SIZE(ad),
			      sd, ARRAY_SIZE(sd));
	if (err) {
		printk("Advertising failed to start (err %d)\n", err);
     6d8:	f000 fe1c 	bl	1314 <printk>
		return;
	}

	printk("Beacon started\n");
}
     6dc:	b006      	add	sp, #24
     6de:	bd10      	pop	{r4, pc}
	printk("Bluetooth initialized\n");
     6e0:	480e      	ldr	r0, [pc, #56]	; (71c <bt_ext_ready+0x50>)
     6e2:	f000 fe17 	bl	1314 <printk>
	err = bt_le_ext_adv_start(BT_LE_ADV_NCONN, ad, ARRAY_SIZE(ad),
     6e6:	23a0      	movs	r3, #160	; 0xa0
     6e8:	9403      	str	r4, [sp, #12]
     6ea:	2201      	movs	r2, #1
     6ec:	f8ad 300e 	strh.w	r3, [sp, #14]
     6f0:	23f0      	movs	r3, #240	; 0xf0
     6f2:	9404      	str	r4, [sp, #16]
     6f4:	490a      	ldr	r1, [pc, #40]	; (720 <bt_ext_ready+0x54>)
     6f6:	f8ad 3010 	strh.w	r3, [sp, #16]
     6fa:	9200      	str	r2, [sp, #0]
     6fc:	4b09      	ldr	r3, [pc, #36]	; (724 <bt_ext_ready+0x58>)
     6fe:	9405      	str	r4, [sp, #20]
     700:	a803      	add	r0, sp, #12
     702:	f003 f83f 	bl	3784 <bt_le_ext_adv_start>
	if (err) {
     706:	4601      	mov	r1, r0
     708:	b108      	cbz	r0, 70e <bt_ext_ready+0x42>
		printk("Advertising failed to start (err %d)\n", err);
     70a:	4807      	ldr	r0, [pc, #28]	; (728 <bt_ext_ready+0x5c>)
     70c:	e7e4      	b.n	6d8 <bt_ext_ready+0xc>
	printk("Beacon started\n");
     70e:	4807      	ldr	r0, [pc, #28]	; (72c <bt_ext_ready+0x60>)
     710:	f000 fe00 	bl	1314 <printk>
     714:	e7e2      	b.n	6dc <bt_ext_ready+0x10>
     716:	bf00      	nop
     718:	0000cd10 	.word	0x0000cd10
     71c:	0000cd30 	.word	0x0000cd30
     720:	0000cd08 	.word	0x0000cd08
     724:	0000cd94 	.word	0x0000cd94
     728:	0000cd47 	.word	0x0000cd47
     72c:	0000cd6d 	.word	0x0000cd6d

00000730 <main>:

void main(void)
{
     730:	b508      	push	{r3, lr}
	int err;

	printk("Starting Beacon Demo\n");
     732:	4807      	ldr	r0, [pc, #28]	; (750 <main+0x20>)
     734:	f000 fdee 	bl	1314 <printk>

	/* Initialize the Bluetooth Subsystem */
	err = bt_enable(bt_ext_ready);
     738:	4806      	ldr	r0, [pc, #24]	; (754 <main+0x24>)
     73a:	f002 ffbf 	bl	36bc <bt_enable>
	if (err) {
     73e:	4601      	mov	r1, r0
     740:	b120      	cbz	r0, 74c <main+0x1c>
		printk("Bluetooth init failed (err %d)\n", err);
     742:	4805      	ldr	r0, [pc, #20]	; (758 <main+0x28>)
	}
}
     744:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		printk("Bluetooth init failed (err %d)\n", err);
     748:	f000 bde4 	b.w	1314 <printk>
     74c:	bd08      	pop	{r3, pc}
     74e:	bf00      	nop
     750:	0000cd7d 	.word	0x0000cd7d
     754:	000006cd 	.word	0x000006cd
     758:	0000cd10 	.word	0x0000cd10

0000075c <errata_103>:
	return false;
}

static bool errata_136_nrf52840(void)
{
	if ((*(u32_t *)0x10000130ul == 0x8ul) &&
     75c:	4b05      	ldr	r3, [pc, #20]	; (774 <errata_103+0x18>)
     75e:	681b      	ldr	r3, [r3, #0]
     760:	2b08      	cmp	r3, #8
	    (*(u32_t *)0x10000134ul == 0x0ul)) {
     762:	bf01      	itttt	eq
     764:	4b04      	ldreq	r3, [pc, #16]	; (778 <errata_103+0x1c>)
	if ((*(u32_t *)0x10000130ul == 0x8ul) &&
     766:	6818      	ldreq	r0, [r3, #0]
     768:	fab0 f080 	clzeq	r0, r0
     76c:	0940      	lsreq	r0, r0, #5
		return true;
	}

	return false;
     76e:	bf18      	it	ne
     770:	2000      	movne	r0, #0
}
     772:	4770      	bx	lr
     774:	10000130 	.word	0x10000130
     778:	10000134 	.word	0x10000134

0000077c <nordicsemi_nrf52_init>:
{
	SystemCoreClock = __SYSTEM_CLOCK_64M;
}

static int nordicsemi_nrf52_init(struct device *arg)
{
     77c:	b508      	push	{r3, lr}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     77e:	f04f 0320 	mov.w	r3, #32
     782:	f3ef 8111 	mrs	r1, BASEPRI
     786:	f383 8811 	msr	BASEPRI, r3
	if (errata_36()) {
     78a:	f7ff ffe7 	bl	75c <errata_103>
     78e:	b140      	cbz	r0, 7a2 <nordicsemi_nrf52_init+0x26>
		NRF_CLOCK->EVENTS_DONE = 0;
     790:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     794:	2200      	movs	r2, #0
     796:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		NRF_CLOCK->EVENTS_CTTO = 0;
     79a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
		NRF_CLOCK->CTIV = 0;
     79e:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
	if (errata_98()) {
     7a2:	f7ff ffdb 	bl	75c <errata_103>
     7a6:	b110      	cbz	r0, 7ae <nordicsemi_nrf52_init+0x32>
		*(volatile u32_t *)0x4000568Cul = 0x00038148ul;
     7a8:	4b38      	ldr	r3, [pc, #224]	; (88c <CONFIG_ISR_STACK_SIZE+0x8c>)
     7aa:	4a39      	ldr	r2, [pc, #228]	; (890 <CONFIG_ISR_STACK_SIZE+0x90>)
     7ac:	601a      	str	r2, [r3, #0]
	if (errata_103()) {
     7ae:	f7ff ffd5 	bl	75c <errata_103>
     7b2:	b118      	cbz	r0, 7bc <nordicsemi_nrf52_init+0x40>
		NRF_CCM->MAXPACKETSIZE = 0xFBul;
     7b4:	4b37      	ldr	r3, [pc, #220]	; (894 <CONFIG_ISR_STACK_SIZE+0x94>)
     7b6:	22fb      	movs	r2, #251	; 0xfb
     7b8:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	if (errata_115()) {
     7bc:	f7ff ffce 	bl	75c <errata_103>
     7c0:	b148      	cbz	r0, 7d6 <nordicsemi_nrf52_init+0x5a>
			(*(volatile u32_t *) 0x40000EE4 & 0xFFFFFFF0) |
     7c2:	4835      	ldr	r0, [pc, #212]	; (898 <CONFIG_ISR_STACK_SIZE+0x98>)
			(*(u32_t *)0x10000258 & 0x0000000F);
     7c4:	4b35      	ldr	r3, [pc, #212]	; (89c <CONFIG_ISR_STACK_SIZE+0x9c>)
			(*(volatile u32_t *) 0x40000EE4 & 0xFFFFFFF0) |
     7c6:	6802      	ldr	r2, [r0, #0]
			(*(u32_t *)0x10000258 & 0x0000000F);
     7c8:	681b      	ldr	r3, [r3, #0]
			(*(volatile u32_t *) 0x40000EE4 & 0xFFFFFFF0) |
     7ca:	f022 020f 	bic.w	r2, r2, #15
			(*(u32_t *)0x10000258 & 0x0000000F);
     7ce:	f003 030f 	and.w	r3, r3, #15
			(*(volatile u32_t *) 0x40000EE4 & 0xFFFFFFF0) |
     7d2:	4313      	orrs	r3, r2
		*(volatile u32_t *)0x40000EE4 =
     7d4:	6003      	str	r3, [r0, #0]
	if (errata_120()) {
     7d6:	f7ff ffc1 	bl	75c <errata_103>
     7da:	b118      	cbz	r0, 7e4 <nordicsemi_nrf52_init+0x68>
		*(volatile u32_t *)0x40029640ul = 0x200ul;
     7dc:	4b30      	ldr	r3, [pc, #192]	; (8a0 <CONFIG_ISR_STACK_SIZE+0xa0>)
     7de:	f44f 7200 	mov.w	r2, #512	; 0x200
     7e2:	601a      	str	r2, [r3, #0]
	if (errata_136_nrf52840()) {
     7e4:	f7ff ffba 	bl	75c <errata_103>
     7e8:	b148      	cbz	r0, 7fe <nordicsemi_nrf52_init+0x82>
		if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk) {
     7ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     7ee:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     7f2:	07d2      	lsls	r2, r2, #31
			NRF_POWER->RESETREAS = ~POWER_RESETREAS_RESETPIN_Msk;
     7f4:	bf44      	itt	mi
     7f6:	f06f 0201 	mvnmi.w	r2, #1
     7fa:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
	if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
     7fe:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     802:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
     806:	2a00      	cmp	r2, #0
     808:	db03      	blt.n	812 <CONFIG_ISR_STACK_SIZE+0x12>
	    ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) !=
     80a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
	     (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
     80e:	2b00      	cmp	r3, #0
     810:	da2f      	bge.n	872 <CONFIG_ISR_STACK_SIZE+0x72>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
     812:	4b24      	ldr	r3, [pc, #144]	; (8a4 <CONFIG_ISR_STACK_SIZE+0xa4>)
     814:	2201      	movs	r2, #1
     816:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     81a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     81e:	2a00      	cmp	r2, #0
     820:	d0fb      	beq.n	81a <CONFIG_ISR_STACK_SIZE+0x1a>
		NRF_UICR->PSELRESET[0] = 18;
     822:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
     826:	2112      	movs	r1, #18
     828:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     82c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     830:	2a00      	cmp	r2, #0
     832:	d0fb      	beq.n	82c <CONFIG_ISR_STACK_SIZE+0x2c>
		NRF_UICR->PSELRESET[1] = 18;
     834:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     838:	2212      	movs	r2, #18
     83a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     83e:	4b19      	ldr	r3, [pc, #100]	; (8a4 <CONFIG_ISR_STACK_SIZE+0xa4>)
     840:	461a      	mov	r2, r3
     842:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
     846:	2900      	cmp	r1, #0
     848:	d0fb      	beq.n	842 <CONFIG_ISR_STACK_SIZE+0x42>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
     84a:	2100      	movs	r1, #0
     84c:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     850:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
     854:	2b00      	cmp	r3, #0
     856:	d0fb      	beq.n	850 <CONFIG_ISR_STACK_SIZE+0x50>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     858:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     85c:	4912      	ldr	r1, [pc, #72]	; (8a8 <CONFIG_ISR_STACK_SIZE+0xa8>)
     85e:	4b13      	ldr	r3, [pc, #76]	; (8ac <CONFIG_ISR_STACK_SIZE+0xac>)
     860:	68ca      	ldr	r2, [r1, #12]
     862:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
     866:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     868:	60cb      	str	r3, [r1, #12]
     86a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     86e:	bf00      	nop
     870:	e7fd      	b.n	86e <CONFIG_ISR_STACK_SIZE+0x6e>
static ALWAYS_INLINE void _ClearFaults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
     872:	4b0d      	ldr	r3, [pc, #52]	; (8a8 <CONFIG_ISR_STACK_SIZE+0xa8>)
     874:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     878:	629a      	str	r2, [r3, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
     87a:	62da      	str	r2, [r3, #44]	; 0x2c
	SystemCoreClock = __SYSTEM_CLOCK_64M;
     87c:	4b0c      	ldr	r3, [pc, #48]	; (8b0 <CONFIG_ISR_STACK_SIZE+0xb0>)
     87e:	4a0d      	ldr	r2, [pc, #52]	; (8b4 <CONFIG_ISR_STACK_SIZE+0xb4>)
     880:	601a      	str	r2, [r3, #0]
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
     882:	f381 8811 	msr	BASEPRI, r1
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     886:	2000      	movs	r0, #0
     888:	bd08      	pop	{r3, pc}
     88a:	bf00      	nop
     88c:	4000568c 	.word	0x4000568c
     890:	00038148 	.word	0x00038148
     894:	4000f000 	.word	0x4000f000
     898:	40000ee4 	.word	0x40000ee4
     89c:	10000258 	.word	0x10000258
     8a0:	40029640 	.word	0x40029640
     8a4:	4001e000 	.word	0x4001e000
     8a8:	e000ed00 	.word	0xe000ed00
     8ac:	05fa0004 	.word	0x05fa0004
     8b0:	20004c14 	.word	0x20004c14
     8b4:	03d09000 	.word	0x03d09000

000008b8 <_ExcExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
     8b8:	4808      	ldr	r0, [pc, #32]	; (8dc <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
     8ba:	6881      	ldr	r1, [r0, #8]

    /*
     * Non-preemptible thread ? Do not schedule (see explanation of
     * preempt field in kernel_struct.h).
     */
    ldrh r2, [r1, #_thread_offset_to_preempt]
     8bc:	894a      	ldrh	r2, [r1, #10]
    cmp r2, #_PREEMPT_THRESHOLD
     8be:	2a7f      	cmp	r2, #127	; 0x7f
    bhi _EXIT_EXC
     8c0:	d80b      	bhi.n	8da <_EXIT_EXC>

    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
     8c2:	69c0      	ldr	r0, [r0, #28]
    cmp r0, r1
     8c4:	4288      	cmp	r0, r1
    beq _EXIT_EXC
     8c6:	d008      	beq.n	8da <_EXIT_EXC>

#ifdef CONFIG_TIMESLICING
    push {lr}
     8c8:	b500      	push	{lr}
    bl _update_time_slice_before_swap
     8ca:	f00b fc57 	bl	c17c <_update_time_slice_before_swap>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    pop {r0}
    mov lr, r0
#else
    pop {lr}
     8ce:	f85d eb04 	ldr.w	lr, [sp], #4
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TIMESLICING */

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
     8d2:	4903      	ldr	r1, [pc, #12]	; (8e0 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
     8d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
     8d8:	600a      	str	r2, [r1, #0]

000008da <_EXIT_EXC>:
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

    bx lr
     8da:	4770      	bx	lr
    ldr r0, =_kernel
     8dc:	20002940 	.word	0x20002940
    ldr r1, =_SCS_ICSR
     8e0:	e000ed04 	.word	0xe000ed04

000008e4 <_IntLibInit>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     8e4:	4804      	ldr	r0, [pc, #16]	; (8f8 <_IntLibInit+0x14>)
 * @return N/A
 */

void _IntLibInit(void)
{
	int irq = 0;
     8e6:	2300      	movs	r3, #0
     8e8:	2120      	movs	r1, #32
     8ea:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
     8ec:	3301      	adds	r3, #1
     8ee:	2b2e      	cmp	r3, #46	; 0x2e
     8f0:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
     8f4:	d1f9      	bne.n	8ea <_IntLibInit+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
     8f6:	4770      	bx	lr
     8f8:	e000e100 	.word	0xe000e100

000008fc <__swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
     8fc:	4a08      	ldr	r2, [pc, #32]	; (920 <__swap+0x24>)
	_current->arch.swap_return_value = _k_neg_eagain;
     8fe:	4909      	ldr	r1, [pc, #36]	; (924 <__swap+0x28>)
	_current->arch.basepri = key;
     900:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
     902:	6809      	ldr	r1, [r1, #0]
     904:	6659      	str	r1, [r3, #100]	; 0x64

	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
     906:	4908      	ldr	r1, [pc, #32]	; (928 <__swap+0x2c>)
	_current->arch.basepri = key;
     908:	6618      	str	r0, [r3, #96]	; 0x60
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
     90a:	684b      	ldr	r3, [r1, #4]
     90c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
     910:	604b      	str	r3, [r1, #4]
     912:	2300      	movs	r3, #0
     914:	f383 8811 	msr	BASEPRI, r3

	/* clear mask or enable all irqs to take a pendsv */
	irq_unlock(0);

	return _current->arch.swap_return_value;
     918:	6893      	ldr	r3, [r2, #8]
}
     91a:	6e58      	ldr	r0, [r3, #100]	; 0x64
     91c:	4770      	bx	lr
     91e:	bf00      	nop
     920:	20002940 	.word	0x20002940
     924:	0000f154 	.word	0x0000f154
     928:	e000ed00 	.word	0xe000ed00

0000092c <__pendsv>:
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_KERNEL_EVENT_LOGGER_CONTEXT_SWITCH  */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
     92c:	490e      	ldr	r1, [pc, #56]	; (968 <__pendsv+0x3c>)
    ldr r2, [r1, #_kernel_offset_to_current]
     92e:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
     930:	2028      	movs	r0, #40	; 0x28
    add r0, r2
     932:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
     934:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
     938:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
     93c:	4f0b      	ldr	r7, [pc, #44]	; (96c <__pendsv+0x40>)
    ldr v3, =_SCS_ICSR_UNPENDSV
     93e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
     942:	2020      	movs	r0, #32
    msr BASEPRI, r0
     944:	f380 8811 	msr	BASEPRI, r0
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, _kernel_offset_to_ready_q_cache]
     948:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
     94a:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
     94c:	603e      	str	r6, [r7, #0]

    /* Restore previous interrupt disable state (irq_lock key) */
    ldr r0, [r2, #_thread_offset_to_basepri]
     94e:	6e10      	ldr	r0, [r2, #96]	; 0x60
    movs.n r3, #0
     950:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
     952:	6613      	str	r3, [r2, #96]	; 0x60
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
     954:	f380 8811 	msr	BASEPRI, r0
    blx configure_mpu_user_context
    pop {r2, lr}
#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
     958:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
     95c:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    msr PSP, ip
     960:	f38c 8809 	msr	PSP, ip
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
    ldm sp!,{r0-r3} /* Load back regs ro to r4 */
#endif /* CONFIG_EXECUTION_BENCHMARKING */

    /* exc return */
    bx lr
     964:	4770      	bx	lr
     966:	0000      	.short	0x0000
    ldr r1, =_kernel
     968:	20002940 	.word	0x20002940
    ldr v4, =_SCS_ICSR
     96c:	e000ed04 	.word	0xe000ed04

00000970 <__svc>:
 *
 * @return N/A
 */

SECTION_FUNC(TEXT, __svc)
    tst lr, #0x4    /* did we come from thread mode ? */
     970:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
     974:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
     976:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
     97a:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
     97e:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read  encoding */
    ldrh r1, [r1, #-2]
     980:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 2: kernel panic or oops (software generated fatal exception)
    * 3: System call
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
     984:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    tst r2, #0x1
    bne _oops

    cmp r1, #0
#endif
    beq _context_switch
     988:	d001      	beq.n	98e <_context_switch>

    cmp r1, #2
     98a:	2902      	cmp	r1, #2
    beq _oops
     98c:	d007      	beq.n	99e <_oops>

0000098e <_context_switch>:
    /*
     * Unlock interrupts:
     * - in a SVC call, so protected against context switches
     * - allow PendSV, since it's running at prio 0xff
     */
    eors.n r0, r0
     98e:	4040      	eors	r0, r0
    msr BASEPRI, r0
     990:	f380 8811 	msr	BASEPRI, r0

     /* set PENDSV bit, pending the PendSV exception */
    ldr r1, =_SCS_ICSR
     994:	4904      	ldr	r1, [pc, #16]	; (9a8 <_oops+0xa>)
    ldr r2, =_SCS_ICSR_PENDSV
     996:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1, #0]
     99a:	600a      	str	r2, [r1, #0]

    /* handler mode exit, to PendSV */
    bx lr
     99c:	4770      	bx	lr

0000099e <_oops>:

_oops:
    push {lr}
     99e:	b500      	push	{lr}
    blx _do_kernel_oops
     9a0:	f000 fa2c 	bl	dfc <_do_kernel_oops>
    pop {pc}
     9a4:	bd00      	pop	{pc}
     9a6:	0000      	.short	0x0000
    ldr r1, =_SCS_ICSR
     9a8:	e000ed04 	.word	0xe000ed04

000009ac <_FaultThreadShow.isra.2>:
 *
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _FaultThreadShow(const NANO_ESF *esf)
     9ac:	b510      	push	{r4, lr}
     9ae:	4604      	mov	r4, r0

K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_WAKEUP, k_wakeup, k_tid_t, thread);

K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
     9b0:	f00b fbba 	bl	c128 <_impl_k_current_get>
{
	PR_EXC("  Executing thread ID (thread): %p\n"
     9b4:	6822      	ldr	r2, [r4, #0]
     9b6:	4601      	mov	r1, r0
	       "  Faulting instruction address:  0x%x\n",
	       k_current_get(), esf->pc);
}
     9b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PR_EXC("  Executing thread ID (thread): %p\n"
     9bc:	4801      	ldr	r0, [pc, #4]	; (9c4 <_FaultThreadShow.isra.2+0x18>)
     9be:	f000 bca9 	b.w	1314 <printk>
     9c2:	bf00      	nop
     9c4:	0000cf0d 	.word	0x0000cf0d

000009c8 <_UsageFault>:
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _UsageFault(const NANO_ESF *esf)
{
     9c8:	b510      	push	{r4, lr}
     9ca:	4604      	mov	r4, r0
	PR_EXC("***** USAGE FAULT *****\n");
     9cc:	481a      	ldr	r0, [pc, #104]	; (a38 <_UsageFault+0x70>)
     9ce:	f000 fca1 	bl	1314 <printk>

	_FaultThreadShow(esf);
     9d2:	f104 0018 	add.w	r0, r4, #24

	/* bits are sticky: they stack and must be reset */
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
     9d6:	4c19      	ldr	r4, [pc, #100]	; (a3c <_UsageFault+0x74>)
	_FaultThreadShow(esf);
     9d8:	f7ff ffe8 	bl	9ac <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
     9dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     9de:	019a      	lsls	r2, r3, #6
     9e0:	d502      	bpl.n	9e8 <_UsageFault+0x20>
		PR_EXC("  Division by zero\n");
     9e2:	4817      	ldr	r0, [pc, #92]	; (a40 <_UsageFault+0x78>)
     9e4:	f000 fc96 	bl	1314 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) {
     9e8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     9ea:	01db      	lsls	r3, r3, #7
     9ec:	d502      	bpl.n	9f4 <_UsageFault+0x2c>
		PR_EXC("  Unaligned memory access\n");
     9ee:	4815      	ldr	r0, [pc, #84]	; (a44 <_UsageFault+0x7c>)
     9f0:	f000 fc90 	bl	1314 <printk>
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if (SCB->CFSR & SCB_CFSR_STKOF_Msk) {
		PR_EXC("  Stack overflow\n");
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if (SCB->CFSR & SCB_CFSR_NOCP_Msk) {
     9f4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     9f6:	0318      	lsls	r0, r3, #12
     9f8:	d502      	bpl.n	a00 <_UsageFault+0x38>
		PR_EXC("  No coprocessor instructions\n");
     9fa:	4813      	ldr	r0, [pc, #76]	; (a48 <_UsageFault+0x80>)
     9fc:	f000 fc8a 	bl	1314 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVPC_Msk) {
     a00:	4c0e      	ldr	r4, [pc, #56]	; (a3c <_UsageFault+0x74>)
     a02:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     a04:	0359      	lsls	r1, r3, #13
     a06:	d502      	bpl.n	a0e <_UsageFault+0x46>
		PR_EXC("  Illegal load of EXC_RETURN into PC\n");
     a08:	4810      	ldr	r0, [pc, #64]	; (a4c <_UsageFault+0x84>)
     a0a:	f000 fc83 	bl	1314 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVSTATE_Msk) {
     a0e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     a10:	039a      	lsls	r2, r3, #14
     a12:	d502      	bpl.n	a1a <_UsageFault+0x52>
		PR_EXC("  Illegal use of the EPSR\n");
     a14:	480e      	ldr	r0, [pc, #56]	; (a50 <_UsageFault+0x88>)
     a16:	f000 fc7d 	bl	1314 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) {
     a1a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     a1c:	03db      	lsls	r3, r3, #15
     a1e:	d502      	bpl.n	a26 <_UsageFault+0x5e>
		PR_EXC("  Attempt to execute undefined instruction\n");
     a20:	480c      	ldr	r0, [pc, #48]	; (a54 <_UsageFault+0x8c>)
     a22:	f000 fc77 	bl	1314 <printk>
	}

	/* clear USFR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
     a26:	4a05      	ldr	r2, [pc, #20]	; (a3c <_UsageFault+0x74>)
     a28:	6a93      	ldr	r3, [r2, #40]	; 0x28
     a2a:	ea6f 4303 	mvn.w	r3, r3, lsl #16
     a2e:	ea6f 4313 	mvn.w	r3, r3, lsr #16
     a32:	6293      	str	r3, [r2, #40]	; 0x28
     a34:	bd10      	pop	{r4, pc}
     a36:	bf00      	nop
     a38:	0000d00e 	.word	0x0000d00e
     a3c:	e000ed00 	.word	0xe000ed00
     a40:	0000d027 	.word	0x0000d027
     a44:	0000d03b 	.word	0x0000d03b
     a48:	0000d056 	.word	0x0000d056
     a4c:	0000d075 	.word	0x0000d075
     a50:	0000d09b 	.word	0x0000d09b
     a54:	0000d0b6 	.word	0x0000d0b6

00000a58 <_MpuFault>:
{
     a58:	b538      	push	{r3, r4, r5, lr}
     a5a:	4604      	mov	r4, r0
	PR_EXC("***** MPU FAULT *****\n");
     a5c:	4819      	ldr	r0, [pc, #100]	; (ac4 <_MpuFault+0x6c>)
{
     a5e:	460d      	mov	r5, r1
	PR_EXC("***** MPU FAULT *****\n");
     a60:	f000 fc58 	bl	1314 <printk>
	_FaultThreadShow(esf);
     a64:	f104 0018 	add.w	r0, r4, #24
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
     a68:	4c17      	ldr	r4, [pc, #92]	; (ac8 <_MpuFault+0x70>)
	_FaultThreadShow(esf);
     a6a:	f7ff ff9f 	bl	9ac <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
     a6e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     a70:	06d9      	lsls	r1, r3, #27
     a72:	d504      	bpl.n	a7e <_MpuFault+0x26>
		PR_EXC("  Stacking error\n");
     a74:	4815      	ldr	r0, [pc, #84]	; (acc <_MpuFault+0x74>)
}
     a76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		PR_EXC("  Floating-point lazy state preservation error\n");
     a7a:	f000 bc4b 	b.w	1314 <printk>
	} else if (SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) {
     a7e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     a80:	071a      	lsls	r2, r3, #28
     a82:	d501      	bpl.n	a88 <_MpuFault+0x30>
		PR_EXC("  Unstacking error\n");
     a84:	4812      	ldr	r0, [pc, #72]	; (ad0 <_MpuFault+0x78>)
     a86:	e7f6      	b.n	a76 <_MpuFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) {
     a88:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     a8a:	079b      	lsls	r3, r3, #30
     a8c:	d50f      	bpl.n	aae <_MpuFault+0x56>
		PR_EXC("  Data Access Violation\n");
     a8e:	4811      	ldr	r0, [pc, #68]	; (ad4 <_MpuFault+0x7c>)
     a90:	f000 fc40 	bl	1314 <printk>
		STORE_xFAR(mmfar, SCB->MMFAR);
     a94:	6b61      	ldr	r1, [r4, #52]	; 0x34
		if (SCB->CFSR & SCB_CFSR_MMARVALID_Msk) {
     a96:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     a98:	0618      	lsls	r0, r3, #24
     a9a:	d512      	bpl.n	ac2 <_MpuFault+0x6a>
			PR_EXC("  Address: 0x%x\n", mmfar);
     a9c:	480e      	ldr	r0, [pc, #56]	; (ad8 <_MpuFault+0x80>)
     a9e:	f000 fc39 	bl	1314 <printk>
			if (fromHardFault) {
     aa2:	b175      	cbz	r5, ac2 <_MpuFault+0x6a>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
     aa4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     aa6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
     aaa:	62a3      	str	r3, [r4, #40]	; 0x28
     aac:	bd38      	pop	{r3, r4, r5, pc}
	} else if (SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) {
     aae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     ab0:	07da      	lsls	r2, r3, #31
     ab2:	d501      	bpl.n	ab8 <_MpuFault+0x60>
		PR_EXC("  Instruction Access Violation\n");
     ab4:	4809      	ldr	r0, [pc, #36]	; (adc <_MpuFault+0x84>)
     ab6:	e7de      	b.n	a76 <_MpuFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_MLSPERR_Msk) {
     ab8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     aba:	069b      	lsls	r3, r3, #26
     abc:	d501      	bpl.n	ac2 <_MpuFault+0x6a>
		PR_EXC("  Floating-point lazy state preservation error\n");
     abe:	4808      	ldr	r0, [pc, #32]	; (ae0 <_MpuFault+0x88>)
     ac0:	e7d9      	b.n	a76 <_MpuFault+0x1e>
     ac2:	bd38      	pop	{r3, r4, r5, pc}
     ac4:	0000cf57 	.word	0x0000cf57
     ac8:	e000ed00 	.word	0xe000ed00
     acc:	0000cf6e 	.word	0x0000cf6e
     ad0:	0000cf80 	.word	0x0000cf80
     ad4:	0000cf94 	.word	0x0000cf94
     ad8:	0000cfad 	.word	0x0000cfad
     adc:	0000cfbe 	.word	0x0000cfbe
     ae0:	0000cfde 	.word	0x0000cfde

00000ae4 <_BusFault>:
{
     ae4:	b538      	push	{r3, r4, r5, lr}
     ae6:	4604      	mov	r4, r0
	PR_EXC("***** BUS FAULT *****\n");
     ae8:	481d      	ldr	r0, [pc, #116]	; (b60 <_BusFault+0x7c>)
{
     aea:	460d      	mov	r5, r1
	PR_EXC("***** BUS FAULT *****\n");
     aec:	f000 fc12 	bl	1314 <printk>
	_FaultThreadShow(esf);
     af0:	f104 0018 	add.w	r0, r4, #24
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
     af4:	4c1b      	ldr	r4, [pc, #108]	; (b64 <_BusFault+0x80>)
	_FaultThreadShow(esf);
     af6:	f7ff ff59 	bl	9ac <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
     afa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     afc:	04d8      	lsls	r0, r3, #19
     afe:	d504      	bpl.n	b0a <_BusFault+0x26>
		PR_EXC("  Stacking error\n");
     b00:	4819      	ldr	r0, [pc, #100]	; (b68 <_BusFault+0x84>)
}
     b02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		PR_EXC("  Floating-point lazy state preservation error\n");
     b06:	f000 bc05 	b.w	1314 <printk>
	} else if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
     b0a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     b0c:	0519      	lsls	r1, r3, #20
     b0e:	d501      	bpl.n	b14 <_BusFault+0x30>
		PR_EXC("  Unstacking error\n");
     b10:	4816      	ldr	r0, [pc, #88]	; (b6c <_BusFault+0x88>)
     b12:	e7f6      	b.n	b02 <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
     b14:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     b16:	059a      	lsls	r2, r3, #22
     b18:	d514      	bpl.n	b44 <_BusFault+0x60>
		PR_EXC("  Precise data bus error\n");
     b1a:	4815      	ldr	r0, [pc, #84]	; (b70 <_BusFault+0x8c>)
     b1c:	f000 fbfa 	bl	1314 <printk>
		STORE_xFAR(bfar, SCB->BFAR);
     b20:	6ba1      	ldr	r1, [r4, #56]	; 0x38
		if (SCB->CFSR & SCB_CFSR_BFARVALID_Msk) {
     b22:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     b24:	041b      	lsls	r3, r3, #16
     b26:	d507      	bpl.n	b38 <_BusFault+0x54>
			PR_EXC("  Address: 0x%x\n", bfar);
     b28:	4812      	ldr	r0, [pc, #72]	; (b74 <_BusFault+0x90>)
     b2a:	f000 fbf3 	bl	1314 <printk>
			if (fromHardFault) {
     b2e:	b11d      	cbz	r5, b38 <_BusFault+0x54>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
     b30:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     b32:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
     b36:	62a3      	str	r3, [r4, #40]	; 0x28
		if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
     b38:	4b0a      	ldr	r3, [pc, #40]	; (b64 <_BusFault+0x80>)
     b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     b3c:	0558      	lsls	r0, r3, #21
     b3e:	d50e      	bpl.n	b5e <_BusFault+0x7a>
			PR_EXC("  Imprecise data bus error\n");
     b40:	480d      	ldr	r0, [pc, #52]	; (b78 <_BusFault+0x94>)
     b42:	e7de      	b.n	b02 <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
     b44:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     b46:	0559      	lsls	r1, r3, #21
     b48:	d4fa      	bmi.n	b40 <_BusFault+0x5c>
	} else if (SCB->CFSR & SCB_CFSR_IBUSERR_Msk) {
     b4a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     b4c:	05da      	lsls	r2, r3, #23
     b4e:	d501      	bpl.n	b54 <_BusFault+0x70>
		PR_EXC("  Instruction bus error\n");
     b50:	480a      	ldr	r0, [pc, #40]	; (b7c <_BusFault+0x98>)
     b52:	e7d6      	b.n	b02 <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
     b54:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     b56:	049b      	lsls	r3, r3, #18
     b58:	d501      	bpl.n	b5e <_BusFault+0x7a>
		PR_EXC("  Floating-point lazy state preservation error\n");
     b5a:	4809      	ldr	r0, [pc, #36]	; (b80 <_BusFault+0x9c>)
     b5c:	e7d1      	b.n	b02 <_BusFault+0x1e>
     b5e:	bd38      	pop	{r3, r4, r5, pc}
     b60:	0000cdd4 	.word	0x0000cdd4
     b64:	e000ed00 	.word	0xe000ed00
     b68:	0000cf6e 	.word	0x0000cf6e
     b6c:	0000cf80 	.word	0x0000cf80
     b70:	0000cdeb 	.word	0x0000cdeb
     b74:	0000cfad 	.word	0x0000cfad
     b78:	0000ce05 	.word	0x0000ce05
     b7c:	0000ce21 	.word	0x0000ce21
     b80:	0000cfde 	.word	0x0000cfde

00000b84 <_Fault>:
 *
 * @param esf ESF on the stack, either MSP or PSP depending at what processor
 *            state the exception was taken.
 */
void _Fault(const NANO_ESF *esf)
{
     b84:	b538      	push	{r3, r4, r5, lr}
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
     b86:	4d27      	ldr	r5, [pc, #156]	; (c24 <_Fault+0xa0>)
     b88:	686b      	ldr	r3, [r5, #4]
     b8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
	switch (fault) {
     b8e:	1eda      	subs	r2, r3, #3
{
     b90:	4604      	mov	r4, r0
	switch (fault) {
     b92:	2a09      	cmp	r2, #9
     b94:	d83a      	bhi.n	c0c <_Fault+0x88>
     b96:	e8df f002 	tbb	[pc, r2]
     b9a:	3305      	.short	0x3305
     b9c:	39392f35 	.word	0x39392f35
     ba0:	37393939 	.word	0x37393939
	PR_EXC("***** HARD FAULT *****\n");
     ba4:	4820      	ldr	r0, [pc, #128]	; (c28 <_Fault+0xa4>)
     ba6:	f000 fbb5 	bl	1314 <printk>
	if (SCB->HFSR & SCB_HFSR_VECTTBL_Msk) {
     baa:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
     bac:	079a      	lsls	r2, r3, #30
     bae:	d503      	bpl.n	bb8 <_Fault+0x34>
		PR_EXC("  Bus fault on vector table read\n");
     bb0:	481e      	ldr	r0, [pc, #120]	; (c2c <_Fault+0xa8>)
	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
     bb2:	f000 fbaf 	bl	1314 <printk>
     bb6:	e00c      	b.n	bd2 <_Fault+0x4e>
	} else if (SCB->HFSR & SCB_HFSR_FORCED_Msk) {
     bb8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
     bba:	005b      	lsls	r3, r3, #1
     bbc:	d509      	bpl.n	bd2 <_Fault+0x4e>
		PR_EXC("  Fault escalation (see below)\n");
     bbe:	481c      	ldr	r0, [pc, #112]	; (c30 <_Fault+0xac>)
     bc0:	f000 fba8 	bl	1314 <printk>
		if (SCB_MMFSR) {
     bc4:	4b1b      	ldr	r3, [pc, #108]	; (c34 <_Fault+0xb0>)
     bc6:	781b      	ldrb	r3, [r3, #0]
     bc8:	b14b      	cbz	r3, bde <_Fault+0x5a>
			_MpuFault(esf, 1);
     bca:	2101      	movs	r1, #1
		_MpuFault(esf, 0);
     bcc:	4620      	mov	r0, r4
     bce:	f7ff ff43 	bl	a58 <_MpuFault>

	FAULT_DUMP(esf, fault);

	_SysFatalErrorHandler(_NANO_ERR_HW_EXCEPTION, esf);
     bd2:	4621      	mov	r1, r4
     bd4:	2000      	movs	r0, #0
}
     bd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(_NANO_ERR_HW_EXCEPTION, esf);
     bda:	f000 b913 	b.w	e04 <_SysFatalErrorHandler>
		} else if (SCB_BFSR) {
     bde:	4b16      	ldr	r3, [pc, #88]	; (c38 <_Fault+0xb4>)
     be0:	781b      	ldrb	r3, [r3, #0]
     be2:	b123      	cbz	r3, bee <_Fault+0x6a>
			_BusFault(esf, 1);
     be4:	2101      	movs	r1, #1
		_BusFault(esf, 0);
     be6:	4620      	mov	r0, r4
     be8:	f7ff ff7c 	bl	ae4 <_BusFault>
     bec:	e7f1      	b.n	bd2 <_Fault+0x4e>
		} else if (SCB_UFSR) {
     bee:	4b13      	ldr	r3, [pc, #76]	; (c3c <_Fault+0xb8>)
     bf0:	881b      	ldrh	r3, [r3, #0]
     bf2:	b29b      	uxth	r3, r3
     bf4:	2b00      	cmp	r3, #0
     bf6:	d0ec      	beq.n	bd2 <_Fault+0x4e>
		_UsageFault(esf);
     bf8:	4620      	mov	r0, r4
     bfa:	f7ff fee5 	bl	9c8 <_UsageFault>
     bfe:	e7e8      	b.n	bd2 <_Fault+0x4e>
		_MpuFault(esf, 0);
     c00:	2100      	movs	r1, #0
     c02:	e7e3      	b.n	bcc <_Fault+0x48>
		_BusFault(esf, 0);
     c04:	2100      	movs	r1, #0
     c06:	e7ee      	b.n	be6 <_Fault+0x62>
	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
     c08:	480d      	ldr	r0, [pc, #52]	; (c40 <_Fault+0xbc>)
     c0a:	e7d2      	b.n	bb2 <_Fault+0x2e>
	PR_EXC("***** %s %d) *****\n",
     c0c:	480d      	ldr	r0, [pc, #52]	; (c44 <_Fault+0xc0>)
     c0e:	490e      	ldr	r1, [pc, #56]	; (c48 <_Fault+0xc4>)
     c10:	f1a3 0210 	sub.w	r2, r3, #16
     c14:	2b0f      	cmp	r3, #15
     c16:	bfd8      	it	le
     c18:	4601      	movle	r1, r0
     c1a:	480c      	ldr	r0, [pc, #48]	; (c4c <_Fault+0xc8>)
     c1c:	f000 fb7a 	bl	1314 <printk>
     c20:	e7d7      	b.n	bd2 <_Fault+0x4e>
     c22:	bf00      	nop
     c24:	e000ed00 	.word	0xe000ed00
     c28:	0000ce68 	.word	0x0000ce68
     c2c:	0000ce80 	.word	0x0000ce80
     c30:	0000cea2 	.word	0x0000cea2
     c34:	e000ed28 	.word	0xe000ed28
     c38:	e000ed29 	.word	0xe000ed29
     c3c:	e000ed2a 	.word	0xe000ed2a
     c40:	0000cec2 	.word	0x0000cec2
     c44:	0000ce3a 	.word	0x0000ce3a
     c48:	0000ce4f 	.word	0x0000ce4f
     c4c:	0000cef9 	.word	0x0000cef9

00000c50 <_FaultInit>:
 */
void _FaultInit(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
     c50:	4a02      	ldr	r2, [pc, #8]	; (c5c <_FaultInit+0xc>)
     c52:	6953      	ldr	r3, [r2, #20]
     c54:	f043 0310 	orr.w	r3, r3, #16
     c58:	6153      	str	r3, [r2, #20]
     c5a:	4770      	bx	lr
     c5c:	e000ed00 	.word	0xe000ed00

00000c60 <_arch_irq_enable>:
 *
 * @return N/A
 */
void _arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
     c60:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
     c62:	2b00      	cmp	r3, #0
     c64:	db08      	blt.n	c78 <_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     c66:	2201      	movs	r2, #1
     c68:	f000 001f 	and.w	r0, r0, #31
     c6c:	fa02 f000 	lsl.w	r0, r2, r0
     c70:	095b      	lsrs	r3, r3, #5
     c72:	4a02      	ldr	r2, [pc, #8]	; (c7c <_arch_irq_enable+0x1c>)
     c74:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
     c78:	4770      	bx	lr
     c7a:	bf00      	nop
     c7c:	e000e100 	.word	0xe000e100

00000c80 <_arch_irq_disable>:
 *
 * @return N/A
 */
void _arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
     c80:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
     c82:	2b00      	cmp	r3, #0
     c84:	db0d      	blt.n	ca2 <_arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     c86:	2201      	movs	r2, #1
     c88:	095b      	lsrs	r3, r3, #5
     c8a:	f000 001f 	and.w	r0, r0, #31
     c8e:	fa02 f000 	lsl.w	r0, r2, r0
     c92:	3320      	adds	r3, #32
     c94:	4a03      	ldr	r2, [pc, #12]	; (ca4 <_arch_irq_disable+0x24>)
     c96:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
     c9a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     c9e:	f3bf 8f6f 	isb	sy
     ca2:	4770      	bx	lr
     ca4:	e000e100 	.word	0xe000e100

00000ca8 <_arch_irq_is_enabled>:
 * @param irq IRQ line
 * @return interrupt enable state, true or false
 */
int _arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & (1 << BIT_FROM_IRQ(irq));
     ca8:	0942      	lsrs	r2, r0, #5
     caa:	4b05      	ldr	r3, [pc, #20]	; (cc0 <_arch_irq_is_enabled+0x18>)
     cac:	f000 001f 	and.w	r0, r0, #31
     cb0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
     cb4:	2301      	movs	r3, #1
     cb6:	fa03 f000 	lsl.w	r0, r3, r0
}
     cba:	4010      	ands	r0, r2
     cbc:	4770      	bx	lr
     cbe:	bf00      	nop
     cc0:	e000e100 	.word	0xe000e100

00000cc4 <_irq_priority_set>:
	 */
	__ASSERT(prio <= ((1 << CONFIG_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << CONFIG_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
     cc4:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
     cc6:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     cc8:	bfa8      	it	ge
     cca:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
     cce:	f101 0101 	add.w	r1, r1, #1
     cd2:	ea4f 1141 	mov.w	r1, r1, lsl #5
     cd6:	bfad      	iteet	ge
     cd8:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     cdc:	f000 000f 	andlt.w	r0, r0, #15
     ce0:	4b03      	ldrlt	r3, [pc, #12]	; (cf0 <_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     ce2:	b2c9      	uxtbge	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     ce4:	bfb6      	itet	lt
     ce6:	b2c9      	uxtblt	r1, r1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     ce8:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     cec:	5419      	strblt	r1, [r3, r0]
     cee:	4770      	bx	lr
     cf0:	e000ed14 	.word	0xe000ed14

00000cf4 <_irq_spurious>:
 * @return N/A
 */
void _irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	__reserved();
     cf4:	f000 b842 	b.w	d7c <__bus_fault>

00000cf8 <_arch_isr_direct_pm>:
 * See https://jira.zephyrproject.org/browse/ZEP-1595
 */

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
     cf8:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
     cfa:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
     cfc:	4b04      	ldr	r3, [pc, #16]	; (d10 <_arch_isr_direct_pm+0x18>)
     cfe:	6998      	ldr	r0, [r3, #24]
     d00:	b118      	cbz	r0, d0a <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
     d02:	2200      	movs	r2, #0
     d04:	619a      	str	r2, [r3, #24]
		_sys_power_save_idle_exit(idle_val);
     d06:	f00a fe85 	bl	ba14 <_sys_power_save_idle_exit>
	}

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
     d0a:	b662      	cpsie	i
     d0c:	bd08      	pop	{r3, pc}
     d0e:	bf00      	nop
     d10:	20002940 	.word	0x20002940

00000d14 <_new_thread>:

void _new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
     d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     d16:	460c      	mov	r4, r1
     d18:	4616      	mov	r6, r2
     d1a:	461f      	mov	r7, r3
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
     d1c:	2204      	movs	r2, #4
     d1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     d20:	9909      	ldr	r1, [sp, #36]	; 0x24
     d22:	4605      	mov	r5, r0
     d24:	f00b fd28 	bl	c778 <_init_thread_base>

	_new_thread_init(thread, pStackMem, stackEnd - pStackMem, priority,
			 options);

	/* carve the thread entry struct from the "base" of the stack */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
     d28:	f1a6 0120 	sub.w	r1, r6, #32
     d2c:	4421      	add	r1, r4
#else
	pInitCtx->pc = (u32_t)_thread_entry;
#endif

	/* force ARM mode by clearing LSB of address */
	pInitCtx->pc &= 0xfffffffe;
     d2e:	4a0c      	ldr	r2, [pc, #48]	; (d60 <_new_thread+0x4c>)
#if defined(CONFIG_USERSPACE)
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (u32_t)pStack;
     d30:	65ac      	str	r4, [r5, #88]	; 0x58
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
     d32:	f021 0107 	bic.w	r1, r1, #7
	thread->init_data = NULL;
     d36:	2300      	movs	r3, #0
	pInitCtx->pc &= 0xfffffffe;
     d38:	f022 0201 	bic.w	r2, r2, #1
     d3c:	64eb      	str	r3, [r5, #76]	; 0x4c
	thread->fn_abort = NULL;
     d3e:	652b      	str	r3, [r5, #80]	; 0x50
	thread->stack_info.size = (u32_t)stackSize;
     d40:	65ee      	str	r6, [r5, #92]	; 0x5c
     d42:	618a      	str	r2, [r1, #24]

	pInitCtx->a1 = (u32_t)pEntry;
	pInitCtx->a2 = (u32_t)parameter1;
     d44:	9a06      	ldr	r2, [sp, #24]
     d46:	604a      	str	r2, [r1, #4]
	pInitCtx->a3 = (u32_t)parameter2;
     d48:	9a07      	ldr	r2, [sp, #28]
     d4a:	608a      	str	r2, [r1, #8]
	pInitCtx->a4 = (u32_t)parameter3;
     d4c:	9a08      	ldr	r2, [sp, #32]
     d4e:	60ca      	str	r2, [r1, #12]
	pInitCtx->a1 = (u32_t)pEntry;
     d50:	600f      	str	r7, [r1, #0]
	pInitCtx->xpsr =
     d52:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     d56:	61ca      	str	r2, [r1, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
     d58:	64a9      	str	r1, [r5, #72]	; 0x48
	thread->arch.basepri = 0;
     d5a:	662b      	str	r3, [r5, #96]	; 0x60
     d5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     d5e:	bf00      	nop
     d60:	0000c5ed 	.word	0x0000c5ed

00000d64 <_CpuIdleInit>:
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
     d64:	4901      	ldr	r1, [pc, #4]	; (d6c <_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
     d66:	2210      	movs	r2, #16
	str r2, [r1]
     d68:	600a      	str	r2, [r1, #0]
	bx lr
     d6a:	4770      	bx	lr
	ldr r1, =_SCB_SCR
     d6c:	e000ed10 	.word	0xe000ed10

00000d70 <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
     d70:	4040      	eors	r0, r0
	msr BASEPRI, r0
     d72:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
     d76:	bf30      	wfi

	bx lr
     d78:	4770      	bx	lr
     d7a:	bf00      	nop

00000d7c <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
     d7c:	4040      	eors	r0, r0
	msr BASEPRI, r0
     d7e:	f380 8811 	msr	BASEPRI, r0

	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
     d82:	f8df c01c 	ldr.w	ip, [pc, #28]	; da0 <__bus_fault+0x24>
	ldr ip, [ip]
     d86:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
     d8a:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
     d8e:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
     d90:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
     d94:	f3ef 8009 	mrsne	r0, PSP
				 * frame is on the PSP */
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	push {lr}
     d98:	b500      	push	{lr}
	bl _Fault
     d9a:	f7ff fef3 	bl	b84 <_Fault>

	pop {pc}
     d9e:	bd00      	pop	{pc}
	ldr ip, =_SCS_ICSR
     da0:	e000ed04 	.word	0xe000ed04

00000da4 <_NanoFatalErrorHandler>:
 * @param pEsf pointer to the exception stack frame
 */
void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
	switch (reason) {
     da4:	2804      	cmp	r0, #4
{
     da6:	b538      	push	{r3, r4, r5, lr}
     da8:	4604      	mov	r4, r0
     daa:	460d      	mov	r5, r1
	switch (reason) {
     dac:	d013      	beq.n	dd6 <_NanoFatalErrorHandler+0x32>
     dae:	2805      	cmp	r0, #5
     db0:	d013      	beq.n	dda <_NanoFatalErrorHandler+0x36>
     db2:	2803      	cmp	r0, #3
     db4:	d113      	bne.n	dde <_NanoFatalErrorHandler+0x3a>
		printk("***** Stack Check Fail! *****\n");
		break;
#endif /* CONFIG_STACK_CANARIES */

	case _NANO_ERR_ALLOCATION_FAIL:
		printk("**** Kernel Allocation Failure! ****\n");
     db6:	480c      	ldr	r0, [pc, #48]	; (de8 <_NanoFatalErrorHandler+0x44>)
		break;

	case _NANO_ERR_KERNEL_OOPS:
		printk("***** Kernel OOPS! *****\n");
     db8:	f000 faac 	bl	1314 <printk>
     dbc:	f00b f9b4 	bl	c128 <_impl_k_current_get>

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
		break;
	}
	printk("Current thread ID = %p\n"
     dc0:	69aa      	ldr	r2, [r5, #24]
     dc2:	4601      	mov	r1, r0
     dc4:	4809      	ldr	r0, [pc, #36]	; (dec <_NanoFatalErrorHandler+0x48>)
     dc6:	f000 faa5 	bl	1314 <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	_SysFatalErrorHandler(reason, pEsf);
     dca:	4629      	mov	r1, r5
     dcc:	4620      	mov	r0, r4
}
     dce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(reason, pEsf);
     dd2:	f000 b817 	b.w	e04 <_SysFatalErrorHandler>
		printk("***** Kernel OOPS! *****\n");
     dd6:	4806      	ldr	r0, [pc, #24]	; (df0 <_NanoFatalErrorHandler+0x4c>)
     dd8:	e7ee      	b.n	db8 <_NanoFatalErrorHandler+0x14>
		printk("***** Kernel Panic! *****\n");
     dda:	4806      	ldr	r0, [pc, #24]	; (df4 <_NanoFatalErrorHandler+0x50>)
     ddc:	e7ec      	b.n	db8 <_NanoFatalErrorHandler+0x14>
		printk("**** Unknown Fatal Error %d! ****\n", reason);
     dde:	4601      	mov	r1, r0
     de0:	4805      	ldr	r0, [pc, #20]	; (df8 <_NanoFatalErrorHandler+0x54>)
     de2:	f000 fa97 	bl	1314 <printk>
		break;
     de6:	e7e9      	b.n	dbc <_NanoFatalErrorHandler+0x18>
     de8:	0000d0e2 	.word	0x0000d0e2
     dec:	0000d160 	.word	0x0000d160
     df0:	0000d108 	.word	0x0000d108
     df4:	0000d122 	.word	0x0000d122
     df8:	0000d13d 	.word	0x0000d13d

00000dfc <_do_kernel_oops>:

void _do_kernel_oops(const NANO_ESF *esf)
{
     dfc:	4601      	mov	r1, r0
	_NanoFatalErrorHandler(esf->r0, esf);
     dfe:	6800      	ldr	r0, [r0, #0]
     e00:	f7ff bfd0 	b.w	da4 <_NanoFatalErrorHandler>

00000e04 <_SysFatalErrorHandler>:
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
     e04:	2805      	cmp	r0, #5
{
     e06:	b510      	push	{r4, lr}
	if (reason == _NANO_ERR_KERNEL_PANIC) {
     e08:	d00c      	beq.n	e24 <_SysFatalErrorHandler+0x20>
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
     e0a:	f00b fbd7 	bl	c5bc <k_is_in_isr>
     e0e:	b160      	cbz	r0, e2a <_SysFatalErrorHandler+0x26>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
     e10:	f00b fbd4 	bl	c5bc <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
     e14:	4b0c      	ldr	r3, [pc, #48]	; (e48 <_SysFatalErrorHandler+0x44>)
     e16:	490d      	ldr	r1, [pc, #52]	; (e4c <_SysFatalErrorHandler+0x48>)
     e18:	2800      	cmp	r0, #0
     e1a:	bf08      	it	eq
     e1c:	4619      	moveq	r1, r3
     e1e:	480c      	ldr	r0, [pc, #48]	; (e50 <_SysFatalErrorHandler+0x4c>)
     e20:	f000 fa78 	bl	1314 <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
     e24:	f7ff ffa4 	bl	d70 <k_cpu_idle>
     e28:	e7fc      	b.n	e24 <_SysFatalErrorHandler+0x20>
	if (k_is_in_isr() || _is_thread_essential()) {
     e2a:	f00b fbd7 	bl	c5dc <_is_thread_essential>
     e2e:	2800      	cmp	r0, #0
     e30:	d1ee      	bne.n	e10 <_SysFatalErrorHandler+0xc>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
     e32:	4c08      	ldr	r4, [pc, #32]	; (e54 <_SysFatalErrorHandler+0x50>)
     e34:	4808      	ldr	r0, [pc, #32]	; (e58 <_SysFatalErrorHandler+0x54>)
     e36:	68a1      	ldr	r1, [r4, #8]
     e38:	f000 fa6c 	bl	1314 <printk>

K_SYSCALL_DECLARE1(K_SYSCALL_K_THREAD_CANCEL, k_thread_cancel, int, k_tid_t, thread);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
     e3c:	68a0      	ldr	r0, [r4, #8]
	}
	CODE_UNREACHABLE;
}
     e3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     e42:	f000 b80b 	b.w	e5c <_impl_k_thread_abort>
     e46:	bf00      	nop
     e48:	0000d1a0 	.word	0x0000d1a0
     e4c:	0000d19c 	.word	0x0000d19c
     e50:	0000d1b1 	.word	0x0000d1b1
     e54:	20002940 	.word	0x20002940
     e58:	0000d1d1 	.word	0x0000d1d1

00000e5c <_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void _k_thread_single_abort(struct k_thread *thread);

void _impl_k_thread_abort(k_tid_t thread)
{
     e5c:	b538      	push	{r3, r4, r5, lr}
     e5e:	4605      	mov	r5, r0
	__asm__ volatile(
     e60:	f04f 0320 	mov.w	r3, #32
     e64:	f3ef 8411 	mrs	r4, BASEPRI
     e68:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	_k_thread_single_abort(thread);
     e6c:	f00b fc14 	bl	c698 <_k_thread_single_abort>
	_thread_monitor_exit(thread);

	if (_current == thread) {
     e70:	4b0b      	ldr	r3, [pc, #44]	; (ea0 <_impl_k_thread_abort+0x44>)
     e72:	689b      	ldr	r3, [r3, #8]
     e74:	429d      	cmp	r5, r3
     e76:	d10d      	bne.n	e94 <_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
     e78:	4b0a      	ldr	r3, [pc, #40]	; (ea4 <_impl_k_thread_abort+0x48>)
     e7a:	685a      	ldr	r2, [r3, #4]
     e7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
     e80:	b922      	cbnz	r2, e8c <_impl_k_thread_abort+0x30>
extern unsigned int __swap(unsigned int key);

static inline unsigned int _Swap(unsigned int key)
{
	_check_stack_sentinel();
	_update_time_slice_before_swap();
     e82:	f00b f97b 	bl	c17c <_update_time_slice_before_swap>

	return __swap(key);
     e86:	4620      	mov	r0, r4
     e88:	f7ff fd38 	bl	8fc <__swap>
			_Swap(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
     e8c:	685a      	ldr	r2, [r3, #4]
     e8e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
     e92:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule_threads(key);
     e94:	4620      	mov	r0, r4
}
     e96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_reschedule_threads(key);
     e9a:	f00b b8d3 	b.w	c044 <_reschedule_threads>
     e9e:	bf00      	nop
     ea0:	20002940 	.word	0x20002940
     ea4:	e000ed00 	.word	0xe000ed00

00000ea8 <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {lr}		/* lr is now the first item on the stack */
     ea8:	b500      	push	{lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, _sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
     eaa:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
     eac:	4a0b      	ldr	r2, [pc, #44]	; (edc <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
     eae:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
     eb0:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	blx _sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
     eb2:	bf1e      	ittt	ne
	movne	r1, #0
     eb4:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
     eb6:	6191      	strne	r1, [r2, #24]
		blxne	_sys_power_save_idle_exit
     eb8:	f00a fdac 	blne	ba14 <_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
     ebc:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
     ebe:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
     ec2:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
     ec6:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
     eca:	4905      	ldr	r1, [pc, #20]	; (ee0 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
     ecc:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
     ece:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r4 regs */
#endif
	blx r3		/* call ISR */
     ed0:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {lr}
     ed2:	f85d eb04 	ldr.w	lr, [sp], #4
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* exception return is done in _IntExit() */
	b _IntExit
     ed6:	f7ff bcef 	b.w	8b8 <_ExcExit>
     eda:	0000      	.short	0x0000
	ldr r2, =_kernel
     edc:	20002940 	.word	0x20002940
	ldr r1, =_sw_isr_table
     ee0:	000000f8 	.word	0x000000f8

00000ee4 <__reset>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
     ee4:	2020      	movs	r0, #32
    msr BASEPRI, r0
     ee6:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialisation.
     */
    ldr r0, =_interrupt_stack
     eea:	4805      	ldr	r0, [pc, #20]	; (f00 <__reset+0x1c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
     eec:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
     ef0:	1840      	adds	r0, r0, r1
    msr PSP, r0
     ef2:	f380 8809 	msr	PSP, r0
    movs.n r0, #2	/* switch to using PSP (bit1 of CONTROL reg) */
     ef6:	2002      	movs	r0, #2
    msr CONTROL, r0
     ef8:	f380 8814 	msr	CONTROL, r0

    b _PrepC
     efc:	f000 b806 	b.w	f0c <_PrepC>
    ldr r0, =_interrupt_stack
     f00:	20003fb8 	.word	0x20003fb8

00000f04 <_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(_SysNmiOnReset)

SECTION_FUNC(TEXT, _SysNmiOnReset)
    wfi
     f04:	bf30      	wfi
    b _SysNmiOnReset
     f06:	f7ff bffd 	b.w	f04 <_SysNmiOnReset>
     f0a:	bf00      	nop

00000f0c <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
     f0c:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
     f0e:	4b07      	ldr	r3, [pc, #28]	; (f2c <_PrepC+0x20>)
     f10:	4a07      	ldr	r2, [pc, #28]	; (f30 <_PrepC+0x24>)
     f12:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     f16:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
     f18:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     f1c:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	_bss_zero();
     f20:	f00a fda8 	bl	ba74 <_bss_zero>
	_data_copy();
     f24:	f00a fdb0 	bl	ba88 <_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0;
#endif
	_Cstart();
     f28:	f00a fdd6 	bl	bad8 <_Cstart>
     f2c:	00000000 	.word	0x00000000
     f30:	e000ed00 	.word	0xe000ed00

00000f34 <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
     f34:	b508      	push	{r3, lr}
	handler();
     f36:	f7ff ffe5 	bl	f04 <_SysNmiOnReset>
	_ExcExit();
}
     f3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	_ExcExit();
     f3e:	f7ff bcbb 	b.w	8b8 <_ExcExit>
	...

00000f44 <arm_mpu_init>:
	}
}

static inline u8_t _get_num_regions(void)
{
	u32_t type = ARM_MPU_DEV->type;
     f44:	4b15      	ldr	r3, [pc, #84]	; (f9c <arm_mpu_init+0x58>)
static void _arm_mpu_config(void)
{
	u32_t r_index;

	/* ARM MPU supports up to 16 Regions */
	if (mpu_config.num_regions > _get_num_regions()) {
     f46:	4916      	ldr	r1, [pc, #88]	; (fa0 <arm_mpu_init+0x5c>)
	u32_t type = ARM_MPU_DEV->type;
     f48:	681a      	ldr	r2, [r3, #0]
	__DSB();
	__ISB();
}

static int arm_mpu_init(struct device *arg)
{
     f4a:	b530      	push	{r4, r5, lr}
	if (mpu_config.num_regions > _get_num_regions()) {
     f4c:	680d      	ldr	r5, [r1, #0]
     f4e:	f3c2 2207 	ubfx	r2, r2, #8, #8
     f52:	4295      	cmp	r5, r2
     f54:	d80f      	bhi.n	f76 <arm_mpu_init+0x32>
	ARM_MPU_DEV->ctrl = 0;
     f56:	2200      	movs	r2, #0
     f58:	6848      	ldr	r0, [r1, #4]
     f5a:	605a      	str	r2, [r3, #4]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
     f5c:	4295      	cmp	r5, r2
     f5e:	f100 000c 	add.w	r0, r0, #12
     f62:	d10a      	bne.n	f7a <arm_mpu_init+0x36>
	ARM_MPU_DEV->ctrl = ARM_MPU_ENABLE | ARM_MPU_PRIVDEFENA;
     f64:	2205      	movs	r2, #5
     f66:	605a      	str	r2, [r3, #4]
	arm_mpu_enabled = 1;
     f68:	4b0e      	ldr	r3, [pc, #56]	; (fa4 <arm_mpu_init+0x60>)
     f6a:	2201      	movs	r2, #1
     f6c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
     f6e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     f72:	f3bf 8f6f 	isb	sy
	ARG_UNUSED(arg);

	_arm_mpu_config();

	return 0;
}
     f76:	2000      	movs	r0, #0
     f78:	bd30      	pop	{r4, r5, pc}
		_region_init(r_index,
     f7a:	f850 1c0c 	ldr.w	r1, [r0, #-12]
     f7e:	f850 4c04 	ldr.w	r4, [r0, #-4]
	ARM_MPU_DEV->rnr = index;
     f82:	609a      	str	r2, [r3, #8]
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
     f84:	f021 011f 	bic.w	r1, r1, #31
				| REGION_VALID | index;
     f88:	f041 0110 	orr.w	r1, r1, #16
     f8c:	4311      	orrs	r1, r2
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
     f8e:	f044 0401 	orr.w	r4, r4, #1
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
     f92:	60d9      	str	r1, [r3, #12]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
     f94:	3201      	adds	r2, #1
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
     f96:	611c      	str	r4, [r3, #16]
     f98:	e7e0      	b.n	f5c <arm_mpu_init+0x18>
     f9a:	bf00      	nop
     f9c:	e000ed90 	.word	0xe000ed90
     fa0:	20004bd0 	.word	0x20004bd0
     fa4:	20000000 	.word	0x20000000

00000fa8 <_nop_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
     fa8:	2000      	movs	r0, #0
     faa:	4770      	bx	lr

00000fac <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     fac:	680b      	ldr	r3, [r1, #0]
     fae:	3301      	adds	r3, #1
     fb0:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     fb2:	4b01      	ldr	r3, [pc, #4]	; (fb8 <char_out+0xc>)
     fb4:	681b      	ldr	r3, [r3, #0]
     fb6:	4718      	bx	r3
     fb8:	20004c18 	.word	0x20004c18

00000fbc <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
     fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     fc0:	b085      	sub	sp, #20
     fc2:	469b      	mov	fp, r3
     fc4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
     fc6:	f8df a090 	ldr.w	sl, [pc, #144]	; 1058 <_printk_dec_ulong+0x9c>
     fca:	2c01      	cmp	r4, #1
     fcc:	bfb8      	it	lt
     fce:	2401      	movlt	r4, #1
     fd0:	2b01      	cmp	r3, #1
     fd2:	bf0c      	ite	eq
     fd4:	2330      	moveq	r3, #48	; 0x30
     fd6:	2320      	movne	r3, #32
     fd8:	4615      	mov	r5, r2
     fda:	4680      	mov	r8, r0
     fdc:	4689      	mov	r9, r1
     fde:	9401      	str	r4, [sp, #4]
     fe0:	9302      	str	r3, [sp, #8]
     fe2:	2601      	movs	r6, #1
     fe4:	270a      	movs	r7, #10
     fe6:	2200      	movs	r2, #0
     fe8:	f10a 0401 	add.w	r4, sl, #1
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
     fec:	b90a      	cbnz	r2, ff2 <_printk_dec_ulong+0x36>
     fee:	45aa      	cmp	sl, r5
     ff0:	d21f      	bcs.n	1032 <_printk_dec_ulong+0x76>
			found_largest_digit = 1;
			out((int)((remainder / (pos + 1)) + 48), ctx);
     ff2:	fbb5 f0f4 	udiv	r0, r5, r4
     ff6:	4649      	mov	r1, r9
     ff8:	3030      	adds	r0, #48	; 0x30
     ffa:	47c0      	blx	r8
			digits++;
     ffc:	3601      	adds	r6, #1
			found_largest_digit = 1;
     ffe:	2201      	movs	r2, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
    1000:	3f01      	subs	r7, #1
	while (pos >= 9) {
    1002:	2f01      	cmp	r7, #1
		remainder %= (pos + 1);
    1004:	fbb5 f1f4 	udiv	r1, r5, r4
		pos /= 10;
    1008:	f04f 030a 	mov.w	r3, #10
		remainder %= (pos + 1);
    100c:	fb04 5511 	mls	r5, r4, r1, r5
		pos /= 10;
    1010:	fbba faf3 	udiv	sl, sl, r3
	while (pos >= 9) {
    1014:	d1e8      	bne.n	fe8 <_printk_dec_ulong+0x2c>
	}
	out((int)(remainder + 48), ctx);
    1016:	4649      	mov	r1, r9
    1018:	f105 0030 	add.w	r0, r5, #48	; 0x30
    101c:	47c0      	blx	r8

	if (padding == PAD_SPACE_AFTER) {
    101e:	f1bb 0f03 	cmp.w	fp, #3
    1022:	d103      	bne.n	102c <_printk_dec_ulong+0x70>
		remaining = min_width - digits;
    1024:	9b01      	ldr	r3, [sp, #4]
    1026:	1b9c      	subs	r4, r3, r6
		while (remaining-- > 0) {
    1028:	2c00      	cmp	r4, #0
    102a:	dc0f      	bgt.n	104c <_printk_dec_ulong+0x90>
			out(' ', ctx);
		}
	}
}
    102c:	b005      	add	sp, #20
    102e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
    1032:	9b01      	ldr	r3, [sp, #4]
    1034:	42bb      	cmp	r3, r7
    1036:	dbe3      	blt.n	1000 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
    1038:	f1bb 0f02 	cmp.w	fp, #2
    103c:	d8e0      	bhi.n	1000 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    103e:	4649      	mov	r1, r9
    1040:	9802      	ldr	r0, [sp, #8]
    1042:	9203      	str	r2, [sp, #12]
			digits++;
    1044:	3601      	adds	r6, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    1046:	47c0      	blx	r8
			digits++;
    1048:	9a03      	ldr	r2, [sp, #12]
    104a:	e7d9      	b.n	1000 <_printk_dec_ulong+0x44>
			out(' ', ctx);
    104c:	4649      	mov	r1, r9
    104e:	2020      	movs	r0, #32
    1050:	47c0      	blx	r8
    1052:	3c01      	subs	r4, #1
    1054:	e7e8      	b.n	1028 <_printk_dec_ulong+0x6c>
    1056:	bf00      	nop
    1058:	3b9ac9ff 	.word	0x3b9ac9ff

0000105c <str_out>:
	int count;
};

static int str_out(int c, struct str_context *ctx)
{
	if (!ctx->str || ctx->count >= ctx->max) {
    105c:	680a      	ldr	r2, [r1, #0]
    105e:	688b      	ldr	r3, [r1, #8]
{
    1060:	b530      	push	{r4, r5, lr}
	if (!ctx->str || ctx->count >= ctx->max) {
    1062:	b112      	cbz	r2, 106a <str_out+0xe>
    1064:	684c      	ldr	r4, [r1, #4]
    1066:	42a3      	cmp	r3, r4
    1068:	db02      	blt.n	1070 <str_out+0x14>
		ctx->count++;
    106a:	3301      	adds	r3, #1
    106c:	608b      	str	r3, [r1, #8]
		return c;
    106e:	bd30      	pop	{r4, r5, pc}
	}

	if (ctx->count == ctx->max - 1) {
    1070:	1e65      	subs	r5, r4, #1
    1072:	42ab      	cmp	r3, r5
		ctx->str[ctx->count++] = '\0';
    1074:	bf0b      	itete	eq
    1076:	608c      	streq	r4, [r1, #8]
	} else {
		ctx->str[ctx->count++] = c;
    1078:	1c5c      	addne	r4, r3, #1
		ctx->str[ctx->count++] = '\0';
    107a:	2100      	moveq	r1, #0
		ctx->str[ctx->count++] = c;
    107c:	608c      	strne	r4, [r1, #8]
		ctx->str[ctx->count++] = '\0';
    107e:	bf0c      	ite	eq
    1080:	54d1      	strbeq	r1, [r2, r3]
		ctx->str[ctx->count++] = c;
    1082:	54d0      	strbne	r0, [r2, r3]
	}

	return c;
}
    1084:	bd30      	pop	{r4, r5, pc}
	...

00001088 <__printk_hook_install>:
	_char_out = fn;
    1088:	4b01      	ldr	r3, [pc, #4]	; (1090 <__printk_hook_install+0x8>)
    108a:	6018      	str	r0, [r3, #0]
    108c:	4770      	bx	lr
    108e:	bf00      	nop
    1090:	20004c18 	.word	0x20004c18

00001094 <_vprintk>:
{
    1094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1098:	b089      	sub	sp, #36	; 0x24
	int long_ctr = 0;
    109a:	f04f 0a00 	mov.w	sl, #0
{
    109e:	4606      	mov	r6, r0
    10a0:	460f      	mov	r7, r1
    10a2:	9204      	str	r2, [sp, #16]
    10a4:	461c      	mov	r4, r3
	int min_width = -1;
    10a6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
    10aa:	46d0      	mov	r8, sl
	int might_format = 0; /* 1 if encountered a '%' */
    10ac:	4655      	mov	r5, sl
	while (*fmt) {
    10ae:	9b04      	ldr	r3, [sp, #16]
    10b0:	7818      	ldrb	r0, [r3, #0]
    10b2:	b910      	cbnz	r0, 10ba <_vprintk+0x26>
}
    10b4:	b009      	add	sp, #36	; 0x24
    10b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!might_format) {
    10ba:	b945      	cbnz	r5, 10ce <_vprintk+0x3a>
			if (*fmt != '%') {
    10bc:	2825      	cmp	r0, #37	; 0x25
    10be:	f000 810c 	beq.w	12da <_vprintk+0x246>
				out((int)*fmt, ctx);
    10c2:	4639      	mov	r1, r7
    10c4:	47b0      	blx	r6
		++fmt;
    10c6:	9b04      	ldr	r3, [sp, #16]
    10c8:	3301      	adds	r3, #1
    10ca:	9304      	str	r3, [sp, #16]
    10cc:	e7ef      	b.n	10ae <_vprintk+0x1a>
			switch (*fmt) {
    10ce:	2864      	cmp	r0, #100	; 0x64
    10d0:	d061      	beq.n	1196 <_vprintk+0x102>
    10d2:	d819      	bhi.n	1108 <_vprintk+0x74>
    10d4:	2839      	cmp	r0, #57	; 0x39
    10d6:	d80a      	bhi.n	10ee <_vprintk+0x5a>
    10d8:	2831      	cmp	r0, #49	; 0x31
    10da:	d250      	bcs.n	117e <_vprintk+0xea>
    10dc:	282d      	cmp	r0, #45	; 0x2d
    10de:	d03c      	beq.n	115a <_vprintk+0xc6>
    10e0:	2830      	cmp	r0, #48	; 0x30
    10e2:	d03d      	beq.n	1160 <_vprintk+0xcc>
    10e4:	2825      	cmp	r0, #37	; 0x25
    10e6:	d108      	bne.n	10fa <_vprintk+0x66>
				out((int)'%', ctx);
    10e8:	4639      	mov	r1, r7
				out((int)*fmt, ctx);
    10ea:	47b0      	blx	r6
    10ec:	e06f      	b.n	11ce <_vprintk+0x13a>
			switch (*fmt) {
    10ee:	2858      	cmp	r0, #88	; 0x58
    10f0:	f000 8089 	beq.w	1206 <_vprintk+0x172>
    10f4:	2863      	cmp	r0, #99	; 0x63
    10f6:	f000 80ea 	beq.w	12ce <_vprintk+0x23a>
				out((int)'%', ctx);
    10fa:	4639      	mov	r1, r7
    10fc:	2025      	movs	r0, #37	; 0x25
    10fe:	47b0      	blx	r6
				out((int)*fmt, ctx);
    1100:	9b04      	ldr	r3, [sp, #16]
    1102:	4639      	mov	r1, r7
    1104:	7818      	ldrb	r0, [r3, #0]
    1106:	e7f0      	b.n	10ea <_vprintk+0x56>
			switch (*fmt) {
    1108:	2870      	cmp	r0, #112	; 0x70
    110a:	d072      	beq.n	11f2 <_vprintk+0x15e>
    110c:	d806      	bhi.n	111c <_vprintk+0x88>
    110e:	2869      	cmp	r0, #105	; 0x69
    1110:	d041      	beq.n	1196 <_vprintk+0x102>
    1112:	286c      	cmp	r0, #108	; 0x6c
    1114:	d03c      	beq.n	1190 <_vprintk+0xfc>
    1116:	2868      	cmp	r0, #104	; 0x68
    1118:	d0d5      	beq.n	10c6 <_vprintk+0x32>
    111a:	e7ee      	b.n	10fa <_vprintk+0x66>
    111c:	2875      	cmp	r0, #117	; 0x75
    111e:	d058      	beq.n	11d2 <_vprintk+0x13e>
    1120:	d817      	bhi.n	1152 <_vprintk+0xbe>
    1122:	2873      	cmp	r0, #115	; 0x73
    1124:	d1e9      	bne.n	10fa <_vprintk+0x66>
				char *s = va_arg(ap, char *);
    1126:	6823      	ldr	r3, [r4, #0]
    1128:	f104 0b04 	add.w	fp, r4, #4
    112c:	461c      	mov	r4, r3
				while (*s)
    112e:	4625      	mov	r5, r4
    1130:	f815 0b01 	ldrb.w	r0, [r5], #1
    1134:	2800      	cmp	r0, #0
    1136:	f040 80bf 	bne.w	12b8 <_vprintk+0x224>
				if (padding == PAD_SPACE_AFTER) {
    113a:	f1b8 0f03 	cmp.w	r8, #3
    113e:	f040 80d5 	bne.w	12ec <_vprintk+0x258>
					int remaining = min_width - (s - start);
    1142:	1ae4      	subs	r4, r4, r3
    1144:	eba9 0404 	sub.w	r4, r9, r4
					while (remaining-- > 0) {
    1148:	2c00      	cmp	r4, #0
    114a:	f300 80bb 	bgt.w	12c4 <_vprintk+0x230>
				char *s = va_arg(ap, char *);
    114e:	465c      	mov	r4, fp
    1150:	e03d      	b.n	11ce <_vprintk+0x13a>
			switch (*fmt) {
    1152:	2878      	cmp	r0, #120	; 0x78
    1154:	d057      	beq.n	1206 <_vprintk+0x172>
    1156:	287a      	cmp	r0, #122	; 0x7a
    1158:	e7de      	b.n	1118 <_vprintk+0x84>
				padding = PAD_SPACE_AFTER;
    115a:	f04f 0803 	mov.w	r8, #3
    115e:	e7b2      	b.n	10c6 <_vprintk+0x32>
				if (min_width < 0 && padding == PAD_NONE) {
    1160:	f1b9 0f00 	cmp.w	r9, #0
    1164:	da0e      	bge.n	1184 <_vprintk+0xf0>
    1166:	f1b8 0f00 	cmp.w	r8, #0
    116a:	f000 80bc 	beq.w	12e6 <_vprintk+0x252>
					min_width = *fmt - '0';
    116e:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
    1172:	f1b8 0f00 	cmp.w	r8, #0
    1176:	bf08      	it	eq
    1178:	f04f 0802 	moveq.w	r8, #2
    117c:	e7a3      	b.n	10c6 <_vprintk+0x32>
				if (min_width < 0) {
    117e:	f1b9 0f00 	cmp.w	r9, #0
    1182:	dbf4      	blt.n	116e <_vprintk+0xda>
					min_width = 10 * min_width + *fmt - '0';
    1184:	230a      	movs	r3, #10
    1186:	fb03 0909 	mla	r9, r3, r9, r0
    118a:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
    118e:	e7f0      	b.n	1172 <_vprintk+0xde>
				long_ctr++;
    1190:	f10a 0a01 	add.w	sl, sl, #1
    1194:	e797      	b.n	10c6 <_vprintk+0x32>
				if (long_ctr < 2) {
    1196:	f1ba 0f01 	cmp.w	sl, #1
					d = (long)va_arg(ap, long long);
    119a:	bfc5      	ittet	gt
    119c:	3407      	addgt	r4, #7
    119e:	f024 0307 	bicgt.w	r3, r4, #7
					d = va_arg(ap, long);
    11a2:	6825      	ldrle	r5, [r4, #0]
					d = (long)va_arg(ap, long long);
    11a4:	681d      	ldrgt	r5, [r3, #0]
					d = va_arg(ap, long);
    11a6:	bfd4      	ite	le
    11a8:	3404      	addle	r4, #4
					d = (long)va_arg(ap, long long);
    11aa:	f103 0408 	addgt.w	r4, r3, #8
				if (d < 0) {
    11ae:	2d00      	cmp	r5, #0
    11b0:	da05      	bge.n	11be <_vprintk+0x12a>
					out((int)'-', ctx);
    11b2:	4639      	mov	r1, r7
    11b4:	202d      	movs	r0, #45	; 0x2d
    11b6:	47b0      	blx	r6
					d = -d;
    11b8:	426d      	negs	r5, r5
					min_width--;
    11ba:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
    11be:	f8cd 9000 	str.w	r9, [sp]
    11c2:	4643      	mov	r3, r8
    11c4:	462a      	mov	r2, r5
				_printk_dec_ulong(out, ctx, u, padding,
    11c6:	4639      	mov	r1, r7
    11c8:	4630      	mov	r0, r6
    11ca:	f7ff fef7 	bl	fbc <_printk_dec_ulong>
			might_format = 0;
    11ce:	2500      	movs	r5, #0
				break;
    11d0:	e779      	b.n	10c6 <_vprintk+0x32>
				if (long_ctr < 2) {
    11d2:	f1ba 0f01 	cmp.w	sl, #1
					u = (unsigned long)va_arg(ap,
    11d6:	bfc5      	ittet	gt
    11d8:	3407      	addgt	r4, #7
    11da:	f024 0307 	bicgt.w	r3, r4, #7
					u = va_arg(ap, unsigned long);
    11de:	6822      	ldrle	r2, [r4, #0]
					u = (unsigned long)va_arg(ap,
    11e0:	681a      	ldrgt	r2, [r3, #0]
				_printk_dec_ulong(out, ctx, u, padding,
    11e2:	f8cd 9000 	str.w	r9, [sp]
					u = (unsigned long)va_arg(ap,
    11e6:	bfcc      	ite	gt
    11e8:	f103 0408 	addgt.w	r4, r3, #8
					u = va_arg(ap, unsigned long);
    11ec:	3404      	addle	r4, #4
				_printk_dec_ulong(out, ctx, u, padding,
    11ee:	4643      	mov	r3, r8
    11f0:	e7e9      	b.n	11c6 <_vprintk+0x132>
				  out('0', ctx);
    11f2:	4639      	mov	r1, r7
    11f4:	2030      	movs	r0, #48	; 0x30
    11f6:	47b0      	blx	r6
				  out('x', ctx);
    11f8:	4639      	mov	r1, r7
    11fa:	2078      	movs	r0, #120	; 0x78
    11fc:	47b0      	blx	r6
				  min_width = 8;
    11fe:	f04f 0908 	mov.w	r9, #8
				  padding = PAD_ZERO_BEFORE;
    1202:	f04f 0801 	mov.w	r8, #1
				if (long_ctr < 2) {
    1206:	f1ba 0f01 	cmp.w	sl, #1
					x = (unsigned long)va_arg(ap,
    120a:	bfc7      	ittee	gt
    120c:	3407      	addgt	r4, #7
    120e:	f024 0307 	bicgt.w	r3, r4, #7
					x = va_arg(ap, unsigned long);
    1212:	6823      	ldrle	r3, [r4, #0]
    1214:	9305      	strle	r3, [sp, #20]
					x = (unsigned long)va_arg(ap,
    1216:	bfc2      	ittt	gt
    1218:	f103 0408 	addgt.w	r4, r3, #8
    121c:	681b      	ldrgt	r3, [r3, #0]
    121e:	9305      	strgt	r3, [sp, #20]
	int remaining = 8; /* 8 digits max */
    1220:	f04f 0208 	mov.w	r2, #8
	int digits = 0;
    1224:	f04f 0300 	mov.w	r3, #0
					x = va_arg(ap, unsigned long);
    1228:	bfd8      	it	le
    122a:	3404      	addle	r4, #4
	int digits = 0;
    122c:	9303      	str	r3, [sp, #12]
	int found_largest_digit = 0;
    122e:	9307      	str	r3, [sp, #28]
	int size = sizeof(num) * 2;
    1230:	4693      	mov	fp, r2
		char nibble = (num >> ((size - 1) << 2) & 0xf);
    1232:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    1236:	9b05      	ldr	r3, [sp, #20]
    1238:	ea4f 008b 	mov.w	r0, fp, lsl #2
    123c:	fa23 f000 	lsr.w	r0, r3, r0
		if (nibble || found_largest_digit || size == 1) {
    1240:	f010 000f 	ands.w	r0, r0, #15
    1244:	d109      	bne.n	125a <_vprintk+0x1c6>
    1246:	9b07      	ldr	r3, [sp, #28]
    1248:	b913      	cbnz	r3, 1250 <_vprintk+0x1bc>
    124a:	f1bb 0f00 	cmp.w	fp, #0
    124e:	d122      	bne.n	1296 <_vprintk+0x202>
			nibble += nibble > 9 ? 87 : 48;
    1250:	f04f 0e30 	mov.w	lr, #48	; 0x30
    1254:	e007      	b.n	1266 <_vprintk+0x1d2>
	for (; size; size--) {
    1256:	9a06      	ldr	r2, [sp, #24]
    1258:	e7eb      	b.n	1232 <_vprintk+0x19e>
			nibble += nibble > 9 ? 87 : 48;
    125a:	2809      	cmp	r0, #9
    125c:	bf8c      	ite	hi
    125e:	f04f 0e57 	movhi.w	lr, #87	; 0x57
    1262:	f04f 0e30 	movls.w	lr, #48	; 0x30
			out((int)nibble, ctx);
    1266:	4639      	mov	r1, r7
    1268:	4470      	add	r0, lr
    126a:	9206      	str	r2, [sp, #24]
    126c:	47b0      	blx	r6
			digits++;
    126e:	9b03      	ldr	r3, [sp, #12]
			found_largest_digit = 1;
    1270:	9507      	str	r5, [sp, #28]
			digits++;
    1272:	3301      	adds	r3, #1
    1274:	9303      	str	r3, [sp, #12]
	for (; size; size--) {
    1276:	f1bb 0f00 	cmp.w	fp, #0
    127a:	d1ec      	bne.n	1256 <_vprintk+0x1c2>
	if (padding == PAD_SPACE_AFTER) {
    127c:	f1b8 0f03 	cmp.w	r8, #3
    1280:	d1a5      	bne.n	11ce <_vprintk+0x13a>
		remaining = min_width * 2 - digits;
    1282:	9b03      	ldr	r3, [sp, #12]
    1284:	ebc3 0549 	rsb	r5, r3, r9, lsl #1
		while (remaining-- > 0) {
    1288:	2d00      	cmp	r5, #0
    128a:	dda0      	ble.n	11ce <_vprintk+0x13a>
			out(' ', ctx);
    128c:	4639      	mov	r1, r7
    128e:	2020      	movs	r0, #32
    1290:	47b0      	blx	r6
    1292:	3d01      	subs	r5, #1
    1294:	e7f8      	b.n	1288 <_vprintk+0x1f4>
		if (remaining-- <= min_width) {
    1296:	1e53      	subs	r3, r2, #1
    1298:	4591      	cmp	r9, r2
    129a:	9306      	str	r3, [sp, #24]
    129c:	dbeb      	blt.n	1276 <_vprintk+0x1e2>
			if (padding == PAD_ZERO_BEFORE) {
    129e:	f1b8 0f01 	cmp.w	r8, #1
    12a2:	d103      	bne.n	12ac <_vprintk+0x218>
				out('0', ctx);
    12a4:	4639      	mov	r1, r7
    12a6:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
    12a8:	47b0      	blx	r6
    12aa:	e7e4      	b.n	1276 <_vprintk+0x1e2>
			} else if (padding == PAD_SPACE_BEFORE) {
    12ac:	f1b8 0f02 	cmp.w	r8, #2
    12b0:	d1e1      	bne.n	1276 <_vprintk+0x1e2>
				out(' ', ctx);
    12b2:	4639      	mov	r1, r7
    12b4:	2020      	movs	r0, #32
    12b6:	e7f7      	b.n	12a8 <_vprintk+0x214>
					out((int)(*s++), ctx);
    12b8:	4639      	mov	r1, r7
    12ba:	9303      	str	r3, [sp, #12]
    12bc:	462c      	mov	r4, r5
    12be:	47b0      	blx	r6
    12c0:	9b03      	ldr	r3, [sp, #12]
    12c2:	e734      	b.n	112e <_vprintk+0x9a>
						out(' ', ctx);
    12c4:	4639      	mov	r1, r7
    12c6:	2020      	movs	r0, #32
    12c8:	47b0      	blx	r6
    12ca:	3c01      	subs	r4, #1
    12cc:	e73c      	b.n	1148 <_vprintk+0xb4>
				out(c, ctx);
    12ce:	6820      	ldr	r0, [r4, #0]
				int c = va_arg(ap, int);
    12d0:	1d25      	adds	r5, r4, #4
				out(c, ctx);
    12d2:	4639      	mov	r1, r7
    12d4:	47b0      	blx	r6
				int c = va_arg(ap, int);
    12d6:	462c      	mov	r4, r5
    12d8:	e779      	b.n	11ce <_vprintk+0x13a>
				long_ctr = 0;
    12da:	46aa      	mov	sl, r5
				padding = PAD_NONE;
    12dc:	46a8      	mov	r8, r5
				min_width = -1;
    12de:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
				might_format = 1;
    12e2:	2501      	movs	r5, #1
    12e4:	e6ef      	b.n	10c6 <_vprintk+0x32>
					padding = PAD_ZERO_BEFORE;
    12e6:	f04f 0801 	mov.w	r8, #1
    12ea:	e6ec      	b.n	10c6 <_vprintk+0x32>
				char *s = va_arg(ap, char *);
    12ec:	465c      	mov	r4, fp
			might_format = 0;
    12ee:	4605      	mov	r5, r0
    12f0:	e6e9      	b.n	10c6 <_vprintk+0x32>
	...

000012f4 <vprintk>:
{
    12f4:	b513      	push	{r0, r1, r4, lr}
	struct out_context ctx = { 0 };
    12f6:	ac02      	add	r4, sp, #8
    12f8:	2300      	movs	r3, #0
    12fa:	f844 3d04 	str.w	r3, [r4, #-4]!
	_vprintk(char_out, &ctx, fmt, ap);
    12fe:	4602      	mov	r2, r0
    1300:	460b      	mov	r3, r1
    1302:	4803      	ldr	r0, [pc, #12]	; (1310 <vprintk+0x1c>)
    1304:	4621      	mov	r1, r4
    1306:	f7ff fec5 	bl	1094 <_vprintk>
}
    130a:	9801      	ldr	r0, [sp, #4]
    130c:	b002      	add	sp, #8
    130e:	bd10      	pop	{r4, pc}
    1310:	00000fad 	.word	0x00000fad

00001314 <printk>:
{
    1314:	b40f      	push	{r0, r1, r2, r3}
    1316:	b507      	push	{r0, r1, r2, lr}
    1318:	a904      	add	r1, sp, #16
    131a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    131e:	9101      	str	r1, [sp, #4]
	ret = vprintk(fmt, ap);
    1320:	f7ff ffe8 	bl	12f4 <vprintk>
}
    1324:	b003      	add	sp, #12
    1326:	f85d eb04 	ldr.w	lr, [sp], #4
    132a:	b004      	add	sp, #16
    132c:	4770      	bx	lr
	...

00001330 <snprintk>:

int snprintk(char *str, size_t size, const char *fmt, ...)
{
    1330:	b40c      	push	{r2, r3}
    1332:	b530      	push	{r4, r5, lr}
    1334:	b085      	sub	sp, #20
    1336:	ab08      	add	r3, sp, #32
    1338:	4604      	mov	r4, r0
    133a:	f853 2b04 	ldr.w	r2, [r3], #4
	struct str_context ctx = { str, size, 0 };
    133e:	9001      	str	r0, [sp, #4]
    1340:	9102      	str	r1, [sp, #8]
    1342:	2500      	movs	r5, #0
	va_list ap;

	va_start(ap, fmt);
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    1344:	a901      	add	r1, sp, #4
    1346:	4807      	ldr	r0, [pc, #28]	; (1364 <snprintk+0x34>)
	va_start(ap, fmt);
    1348:	9300      	str	r3, [sp, #0]
	struct str_context ctx = { str, size, 0 };
    134a:	9503      	str	r5, [sp, #12]
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    134c:	f7ff fea2 	bl	1094 <_vprintk>
	va_end(ap);

	if (ctx.count < ctx.max) {
    1350:	9803      	ldr	r0, [sp, #12]
    1352:	9b02      	ldr	r3, [sp, #8]
    1354:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    1356:	bfb8      	it	lt
    1358:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    135a:	b005      	add	sp, #20
    135c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    1360:	b002      	add	sp, #8
    1362:	4770      	bx	lr
    1364:	0000105d 	.word	0x0000105d

00001368 <vsnprintk>:

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    1368:	b530      	push	{r4, r5, lr}
    136a:	b085      	sub	sp, #20
    136c:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    136e:	9001      	str	r0, [sp, #4]
    1370:	9102      	str	r1, [sp, #8]
    1372:	2500      	movs	r5, #0

	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    1374:	a901      	add	r1, sp, #4
    1376:	4805      	ldr	r0, [pc, #20]	; (138c <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    1378:	9503      	str	r5, [sp, #12]
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    137a:	f7ff fe8b 	bl	1094 <_vprintk>

	if (ctx.count < ctx.max) {
    137e:	9803      	ldr	r0, [sp, #12]
    1380:	9b02      	ldr	r3, [sp, #8]
    1382:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    1384:	bfb8      	it	lt
    1386:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    1388:	b005      	add	sp, #20
    138a:	bd30      	pop	{r4, r5, pc}
    138c:	0000105d 	.word	0x0000105d

00001390 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_ENTROPY_DEVICE_RANDOM_GENERATOR, 1);
GEN_ABSOLUTE_SYM(CONFIG_HAS_CMSIS, 1);
GEN_ABSOLUTE_SYM(CONFIG_HAS_NRFX, 1);
GEN_ABSOLUTE_SYM(CONFIG_HAS_SEGGER_RTT, 1);
GEN_ABSOLUTE_SYM(CONFIG_TEST_EXTRA_STACKSIZE, 0);
GEN_ABSOLUTE_SYM(CONFIG_NUM_IRQS, 46);
    1390:	4770      	bx	lr

00001392 <_GetAvailWriteSpace>:
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
    1392:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
    1394:	68c1      	ldr	r1, [r0, #12]
  if (RdOff <= WrOff) {
    1396:	428b      	cmp	r3, r1
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
    1398:	bf9d      	ittte	ls
    139a:	6882      	ldrls	r2, [r0, #8]
    139c:	18d2      	addls	r2, r2, r3
    139e:	f102 32ff 	addls.w	r2, r2, #4294967295	; 0xffffffff
  } else {
    r = RdOff - WrOff - 1u;
    13a2:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
    13a6:	bf94      	ite	ls
    13a8:	1a50      	subls	r0, r2, r1
    r = RdOff - WrOff - 1u;
    13aa:	1a58      	subhi	r0, r3, r1
  }
  return r;
}
    13ac:	4770      	bx	lr

000013ae <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    13ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  WrOff = pRing->WrOff;
    13b2:	68c7      	ldr	r7, [r0, #12]
  Rem = pRing->SizeOfBuffer - WrOff;
    13b4:	6886      	ldr	r6, [r0, #8]
    13b6:	1bf6      	subs	r6, r6, r7
  if (Rem > NumBytes) {
    13b8:	4296      	cmp	r6, r2
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    13ba:	4604      	mov	r4, r0
    13bc:	4688      	mov	r8, r1
    13be:	4615      	mov	r5, r2
    13c0:	6840      	ldr	r0, [r0, #4]
  if (Rem > NumBytes) {
    13c2:	d906      	bls.n	13d2 <_WriteNoCheck+0x24>
    memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
    13c4:	4438      	add	r0, r7
    13c6:	f7ff f928 	bl	61a <memcpy>
    pRing->WrOff = WrOff + NumBytes;
    13ca:	443d      	add	r5, r7
    pRing->WrOff = NumBytesAtOnce;
    13cc:	60e5      	str	r5, [r4, #12]
    13ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    memcpy(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
    13d2:	4632      	mov	r2, r6
    13d4:	4438      	add	r0, r7
    NumBytesAtOnce = NumBytes - Rem;
    13d6:	1bad      	subs	r5, r5, r6
    memcpy(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
    13d8:	f7ff f91f 	bl	61a <memcpy>
    memcpy(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
    13dc:	462a      	mov	r2, r5
    13de:	eb08 0106 	add.w	r1, r8, r6
    13e2:	6860      	ldr	r0, [r4, #4]
    13e4:	f7ff f919 	bl	61a <memcpy>
    13e8:	e7f0      	b.n	13cc <_WriteNoCheck+0x1e>

000013ea <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    13ea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  WrOff = pRing->WrOff;
    13ee:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    13f0:	4606      	mov	r6, r0
    13f2:	4689      	mov	r9, r1
    13f4:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
    13f6:	f04f 0800 	mov.w	r8, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
    13fa:	6934      	ldr	r4, [r6, #16]
    13fc:	68b3      	ldr	r3, [r6, #8]
    memcpy(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
    13fe:	6870      	ldr	r0, [r6, #4]
    if (RdOff > WrOff) {
    1400:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    1402:	bf28      	it	cs
    1404:	18e4      	addcs	r4, r4, r3
    1406:	3c01      	subs	r4, #1
    1408:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
    140a:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    140c:	42bc      	cmp	r4, r7
    140e:	bf28      	it	cs
    1410:	463c      	movcs	r4, r7
    1412:	4294      	cmp	r4, r2
    1414:	bf28      	it	cs
    1416:	4614      	movcs	r4, r2
    memcpy(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
    1418:	4649      	mov	r1, r9
    141a:	4428      	add	r0, r5
    141c:	4622      	mov	r2, r4
    141e:	f7ff f8fc 	bl	61a <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
    1422:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
    1424:	4425      	add	r5, r4
      WrOff = 0u;
    1426:	429d      	cmp	r5, r3
    1428:	bf08      	it	eq
    142a:	2500      	moveq	r5, #0
  } while (NumBytes);
    142c:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
    142e:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
    1430:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
    1432:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
    1434:	d1e1      	bne.n	13fa <_WriteBlocking+0x10>
}
    1436:	4640      	mov	r0, r8
    1438:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000143c <_DoInit>:
static void _DoInit(void) {
    143c:	b510      	push	{r4, lr}
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    143e:	4c11      	ldr	r4, [pc, #68]	; (1484 <_DoInit+0x48>)
  p->aUp[0].sName         = "Terminal";
    1440:	4a11      	ldr	r2, [pc, #68]	; (1488 <_DoInit+0x4c>)
    1442:	61a2      	str	r2, [r4, #24]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    1444:	2303      	movs	r3, #3
    1446:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    1448:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    144a:	4b10      	ldr	r3, [pc, #64]	; (148c <_DoInit+0x50>)
    144c:	61e3      	str	r3, [r4, #28]
  p->aDown[0].sName         = "Terminal";
    144e:	6622      	str	r2, [r4, #96]	; 0x60
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    1450:	f44f 6380 	mov.w	r3, #1024	; 0x400
  p->aDown[0].pBuffer       = _acDownBuffer;
    1454:	4a0e      	ldr	r2, [pc, #56]	; (1490 <_DoInit+0x54>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    1456:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
    1458:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
    145a:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    145c:	2210      	movs	r2, #16
  p->aUp[0].RdOff         = 0u;
    145e:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    1460:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    1462:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
    1464:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    1466:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    1468:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    146a:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
    146c:	4909      	ldr	r1, [pc, #36]	; (1494 <_DoInit+0x58>)
    146e:	1de0      	adds	r0, r4, #7
    1470:	f7ff f896 	bl	5a0 <strcpy>
  strcpy(&p->acID[0], "SEGGER");
    1474:	4908      	ldr	r1, [pc, #32]	; (1498 <_DoInit+0x5c>)
    1476:	4620      	mov	r0, r4
    1478:	f7ff f892 	bl	5a0 <strcpy>
  p->acID[6] = ' ';
    147c:	2320      	movs	r3, #32
    147e:	71a3      	strb	r3, [r4, #6]
    1480:	bd10      	pop	{r4, pc}
    1482:	bf00      	nop
    1484:	20002a6c 	.word	0x20002a6c
    1488:	0000d1f6 	.word	0x0000d1f6
    148c:	20000011 	.word	0x20000011
    1490:	20000001 	.word	0x20000001
    1494:	0000d1ff 	.word	0x0000d1ff
    1498:	0000d203 	.word	0x0000d203

0000149c <SEGGER_RTT_WriteNoLock>:
*    (1) If there is not enough space in the "Up"-buffer, remaining characters of pBuffer are dropped.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    149c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  pData = (const char *)pBuffer;
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
    149e:	4c18      	ldr	r4, [pc, #96]	; (1500 <SEGGER_RTT_WriteNoLock+0x64>)
    14a0:	2318      	movs	r3, #24
    14a2:	fb00 3503 	mla	r5, r0, r3, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    14a6:	fb03 4000 	mla	r0, r3, r0, r4
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
    14aa:	4425      	add	r5, r4
  switch (pRing->Flags) {
    14ac:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    14ae:	2c01      	cmp	r4, #1
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    14b0:	460f      	mov	r7, r1
    14b2:	4616      	mov	r6, r2
  switch (pRing->Flags) {
    14b4:	d011      	beq.n	14da <SEGGER_RTT_WriteNoLock+0x3e>
    14b6:	d303      	bcc.n	14c0 <SEGGER_RTT_WriteNoLock+0x24>
    14b8:	2c02      	cmp	r4, #2
    14ba:	d01b      	beq.n	14f4 <SEGGER_RTT_WriteNoLock+0x58>
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
    break;
  default:
    Status = 0u;
    14bc:	2400      	movs	r4, #0
    break;
  }
  //
  // Finish up.
  //
  return Status;
    14be:	e00a      	b.n	14d6 <SEGGER_RTT_WriteNoLock+0x3a>
    Avail = _GetAvailWriteSpace(pRing);
    14c0:	4628      	mov	r0, r5
    14c2:	f7ff ff66 	bl	1392 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
    14c6:	42b0      	cmp	r0, r6
    14c8:	d305      	bcc.n	14d6 <SEGGER_RTT_WriteNoLock+0x3a>
      _WriteNoCheck(pRing, pData, NumBytes);
    14ca:	4632      	mov	r2, r6
    14cc:	4639      	mov	r1, r7
    14ce:	4628      	mov	r0, r5
    14d0:	f7ff ff6d 	bl	13ae <_WriteNoCheck>
    14d4:	4634      	mov	r4, r6
}
    14d6:	4620      	mov	r0, r4
    14d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
    14da:	4628      	mov	r0, r5
    14dc:	f7ff ff59 	bl	1392 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
    14e0:	4286      	cmp	r6, r0
    14e2:	4634      	mov	r4, r6
    14e4:	bf28      	it	cs
    14e6:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
    14e8:	4622      	mov	r2, r4
    14ea:	4639      	mov	r1, r7
    14ec:	4628      	mov	r0, r5
    14ee:	f7ff ff5e 	bl	13ae <_WriteNoCheck>
    break;
    14f2:	e7f0      	b.n	14d6 <SEGGER_RTT_WriteNoLock+0x3a>
    Status = _WriteBlocking(pRing, pData, NumBytes);
    14f4:	4628      	mov	r0, r5
}
    14f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
    14fa:	f7ff bf76 	b.w	13ea <_WriteBlocking>
    14fe:	bf00      	nop
    1500:	20002a6c 	.word	0x20002a6c

00001504 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    1504:	f7ff bf9a 	b.w	143c <_DoInit>

00001508 <sys_rand32_get>:
#include <entropy.h>

static atomic_t entropy_driver;

u32_t sys_rand32_get(void)
{
    1508:	b513      	push	{r0, r1, r4, lr}
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    150a:	4c11      	ldr	r4, [pc, #68]	; (1550 <sys_rand32_get+0x48>)
    150c:	f3bf 8f5b 	dmb	ish
    1510:	6820      	ldr	r0, [r4, #0]
    1512:	f3bf 8f5b 	dmb	ish
	struct device *dev = (struct device *)atomic_get(&entropy_driver);
	u32_t random_num;
	int ret;

	if (unlikely(!dev)) {
    1516:	b960      	cbnz	r0, 1532 <sys_rand32_get+0x2a>
		/* Only one entropy device exists, so this is safe even
		 * if the whole operation isn't atomic.
		 */
		dev = device_get_binding(CONFIG_ENTROPY_NAME);
    1518:	480e      	ldr	r0, [pc, #56]	; (1554 <sys_rand32_get+0x4c>)
    151a:	f00a fa55 	bl	b9c8 <device_get_binding>
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    151e:	f3bf 8f5b 	dmb	ish
    1522:	e854 3f00 	ldrex	r3, [r4]
    1526:	e844 0200 	strex	r2, r0, [r4]
    152a:	2a00      	cmp	r2, #0
    152c:	d1f9      	bne.n	1522 <sys_rand32_get+0x1a>
    152e:	f3bf 8f5b 	dmb	ish
					    u16_t length)
{
	const struct entropy_driver_api *api = dev->driver_api;

	__ASSERT(api->get_entropy, "Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
    1532:	6843      	ldr	r3, [r0, #4]
    1534:	2204      	movs	r2, #4
    1536:	681b      	ldr	r3, [r3, #0]
    1538:	eb0d 0102 	add.w	r1, sp, r2
    153c:	4798      	blx	r3
		atomic_set(&entropy_driver, (atomic_t)(uintptr_t)dev);
	}

	ret = entropy_get_entropy(dev, (u8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
    153e:	2800      	cmp	r0, #0
    1540:	da02      	bge.n	1548 <sys_rand32_get+0x40>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
    1542:	f000 fd07 	bl	1f54 <_timer_cycle_get_32>
    1546:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
    1548:	9801      	ldr	r0, [sp, #4]
    154a:	b002      	add	sp, #8
    154c:	bd10      	pop	{r4, pc}
    154e:	bf00      	nop
    1550:	20000414 	.word	0x20000414
    1554:	0000d20a 	.word	0x0000d20a

00001558 <rtt_console_init>:

	return character;
}

static int rtt_console_init(struct device *d)
{
    1558:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	SEGGER_RTT_Init();

	__printk_hook_install(rtt_console_out);
    155a:	4c05      	ldr	r4, [pc, #20]	; (1570 <rtt_console_init+0x18>)
	SEGGER_RTT_Init();
    155c:	f7ff ffd2 	bl	1504 <SEGGER_RTT_Init>
	__printk_hook_install(rtt_console_out);
    1560:	4620      	mov	r0, r4
    1562:	f7ff fd91 	bl	1088 <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
    1566:	4620      	mov	r0, r4
    1568:	f7ff f8aa 	bl	6c0 <__stdout_hook_install>

	return 0;
}
    156c:	2000      	movs	r0, #0
    156e:	bd10      	pop	{r4, pc}
    1570:	00001575 	.word	0x00001575

00001574 <rtt_console_out>:
{
    1574:	b537      	push	{r0, r1, r2, r4, r5, lr}
	char c = (char)character;
    1576:	a902      	add	r1, sp, #8
{
    1578:	4604      	mov	r4, r0
	char c = (char)character;
    157a:	f801 0d01 	strb.w	r0, [r1, #-1]!
    157e:	f04f 0320 	mov.w	r3, #32
    1582:	f3ef 8511 	mrs	r5, BASEPRI
    1586:	f383 8811 	msr	BASEPRI, r3
	SEGGER_RTT_WriteNoLock(0, &c, 1);
    158a:	2201      	movs	r2, #1
    158c:	2000      	movs	r0, #0
    158e:	f7ff ff85 	bl	149c <SEGGER_RTT_WriteNoLock>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1592:	f385 8811 	msr	BASEPRI, r5
}
    1596:	4620      	mov	r0, r4
    1598:	b003      	add	sp, #12
    159a:	bd30      	pop	{r4, r5, pc}

0000159c <_m16src_stop>:
		return -EINPROGRESS;
	}
}

static int _m16src_stop(struct device *dev, clock_control_subsys_t sub_system)
{
    159c:	b510      	push	{r4, lr}
	__asm__ volatile(
    159e:	f04f 0320 	mov.w	r3, #32
    15a2:	f3ef 8211 	mrs	r2, BASEPRI
    15a6:	f383 8811 	msr	BASEPRI, r3
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
    15aa:	4c11      	ldr	r4, [pc, #68]	; (15f0 <_m16src_stop+0x54>)
    15ac:	7823      	ldrb	r3, [r4, #0]
    15ae:	b923      	cbnz	r3, 15ba <_m16src_stop+0x1e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    15b0:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EALREADY;
    15b4:	f06f 0044 	mvn.w	r0, #68	; 0x44
    15b8:	bd10      	pop	{r4, pc}
	}

	if (--m16src_ref) {
    15ba:	3b01      	subs	r3, #1
    15bc:	b2db      	uxtb	r3, r3
    15be:	7023      	strb	r3, [r4, #0]
    15c0:	b123      	cbz	r3, 15cc <_m16src_stop+0x30>
    15c2:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EBUSY;
    15c6:	f06f 000f 	mvn.w	r0, #15
    15ca:	bd10      	pop	{r4, pc}
	}

	if (m16src_grd) {
    15cc:	4b09      	ldr	r3, [pc, #36]	; (15f4 <_m16src_stop+0x58>)
    15ce:	7818      	ldrb	r0, [r3, #0]
    15d0:	2101      	movs	r1, #1
    15d2:	b128      	cbz	r0, 15e0 <_m16src_stop+0x44>
		m16src_ref++;
    15d4:	7021      	strb	r1, [r4, #0]
    15d6:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EAGAIN;
    15da:	f06f 000a 	mvn.w	r0, #10
    15de:	bd10      	pop	{r4, pc}
	}

	m16src_grd = 1;
    15e0:	7019      	strb	r1, [r3, #0]
    15e2:	f382 8811 	msr	BASEPRI, r2

	irq_unlock(imask);

	/* re-entrancy and mult-context safe, and reference count is zero, */

	NRF_CLOCK->TASKS_HFCLKSTOP = 1;
    15e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    15ea:	6051      	str	r1, [r2, #4]

	/* release resource guard */
	m16src_grd = 0;
    15ec:	7018      	strb	r0, [r3, #0]

	return 0;
}
    15ee:	bd10      	pop	{r4, pc}
    15f0:	2000041a 	.word	0x2000041a
    15f4:	20000419 	.word	0x20000419

000015f8 <_clock_control_init>:
		}
	}
}

static int _clock_control_init(struct device *dev)
{
    15f8:	b508      	push	{r3, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(NRF5_IRQ_POWER_CLOCK_IRQn,
    15fa:	2200      	movs	r2, #0
    15fc:	4610      	mov	r0, r2
    15fe:	2101      	movs	r1, #1
    1600:	f7ff fb60 	bl	cc4 <_irq_priority_set>
		    CONFIG_CLOCK_CONTROL_NRF5_IRQ_PRIORITY,
		    _power_clock_isr, 0, 0);

	irq_enable(POWER_CLOCK_IRQn);
    1604:	2000      	movs	r0, #0
    1606:	f7ff fb2b 	bl	c60 <_arch_irq_enable>

	return 0;
}
    160a:	2000      	movs	r0, #0
    160c:	bd08      	pop	{r3, pc}
	...

00001610 <_m16src_start>:
{
    1610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    1612:	f04f 0220 	mov.w	r2, #32
    1616:	f3ef 8311 	mrs	r3, BASEPRI
    161a:	f382 8811 	msr	BASEPRI, r2
	if (m16src_ref++) {
    161e:	4a25      	ldr	r2, [pc, #148]	; (16b4 <_m16src_start+0xa4>)
    1620:	7810      	ldrb	r0, [r2, #0]
    1622:	1c44      	adds	r4, r0, #1
    1624:	7014      	strb	r4, [r2, #0]
    1626:	b160      	cbz	r0, 1642 <_m16src_start+0x32>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1628:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) {
    162c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1630:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		return -EINPROGRESS;
    1634:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1638:	bf14      	ite	ne
    163a:	2000      	movne	r0, #0
    163c:	f06f 0043 	mvneq.w	r0, #67	; 0x43
}
    1640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (m16src_grd) {
    1642:	4d1d      	ldr	r5, [pc, #116]	; (16b8 <_m16src_start+0xa8>)
    1644:	782f      	ldrb	r7, [r5, #0]
    1646:	b12f      	cbz	r7, 1654 <_m16src_start+0x44>
		m16src_ref--;
    1648:	7010      	strb	r0, [r2, #0]
    164a:	f383 8811 	msr	BASEPRI, r3
		return -EAGAIN;
    164e:	f06f 000a 	mvn.w	r0, #10
    1652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	m16src_grd = 1;
    1654:	2601      	movs	r6, #1
    1656:	702e      	strb	r6, [r5, #0]
    1658:	f383 8811 	msr	BASEPRI, r3
    165c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
	if (blocking) {
    1660:	b319      	cbz	r1, 16aa <_m16src_start+0x9a>
		irq_disable(POWER_CLOCK_IRQn);
    1662:	4638      	mov	r0, r7
    1664:	f7ff fb0c 	bl	c80 <_arch_irq_disable>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1668:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
		intenset = NRF_CLOCK->INTENSET;
    166c:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    1670:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    1674:	6026      	str	r6, [r4, #0]
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    1676:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    167a:	b192      	cbz	r2, 16a2 <_m16src_start+0x92>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    167c:	2200      	movs	r2, #0
    167e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1682:	4a0e      	ldr	r2, [pc, #56]	; (16bc <_m16src_start+0xac>)
		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
    1684:	f013 0f01 	tst.w	r3, #1
    1688:	f04f 0301 	mov.w	r3, #1
			NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    168c:	bf08      	it	eq
    168e:	f8c4 3308 	streq.w	r3, [r4, #776]	; 0x308
		irq_enable(POWER_CLOCK_IRQn);
    1692:	2000      	movs	r0, #0
    1694:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    1698:	f7ff fae2 	bl	c60 <_arch_irq_enable>
	m16src_grd = 0;
    169c:	2300      	movs	r3, #0
    169e:	702b      	strb	r3, [r5, #0]
    16a0:	e7c4      	b.n	162c <_m16src_start+0x1c>
			__WFE();
    16a2:	bf20      	wfe
			__SEV();
    16a4:	bf40      	sev
			__WFE();
    16a6:	bf20      	wfe
    16a8:	e7e5      	b.n	1676 <_m16src_start+0x66>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    16aa:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    16ae:	6026      	str	r6, [r4, #0]
    16b0:	e7f4      	b.n	169c <_m16src_start+0x8c>
    16b2:	bf00      	nop
    16b4:	2000041a 	.word	0x2000041a
    16b8:	20000419 	.word	0x20000419
    16bc:	e000e100 	.word	0xe000e100

000016c0 <_k32src_start>:
{
    16c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    16c2:	4606      	mov	r6, r0
    16c4:	460c      	mov	r4, r1
	__asm__ volatile(
    16c6:	f04f 0220 	mov.w	r2, #32
    16ca:	f3ef 8311 	mrs	r3, BASEPRI
    16ce:	f382 8811 	msr	BASEPRI, r2
	if (k32src_initialized) {
    16d2:	4a2c      	ldr	r2, [pc, #176]	; (1784 <_k32src_start+0xc4>)
    16d4:	7815      	ldrb	r5, [r2, #0]
    16d6:	b165      	cbz	r5, 16f2 <_k32src_start+0x32>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    16d8:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) {
    16dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    16e0:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
		return -EINPROGRESS;
    16e4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
}
    16e8:	bf0c      	ite	eq
    16ea:	f06f 0043 	mvneq.w	r0, #67	; 0x43
    16ee:	2000      	movne	r0, #0
    16f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	k32src_initialized = 1;
    16f2:	2701      	movs	r7, #1
    16f4:	7017      	strb	r7, [r2, #0]
    16f6:	f383 8811 	msr	BASEPRI, r3
	irq_disable(POWER_CLOCK_IRQn);
    16fa:	4628      	mov	r0, r5
    16fc:	f7ff fac0 	bl	c80 <_arch_irq_disable>
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    1700:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    1704:	2102      	movs	r1, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    1706:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
	intenset = NRF_CLOCK->INTENSET;
    170a:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    170e:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
    1712:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
	NRF_CLOCK->TASKS_LFCLKSTART = 1;
    1716:	609f      	str	r7, [r3, #8]
	while (NRF_CLOCK->EVENTS_LFCLKSTARTED == 0) {
    1718:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    171c:	b371      	cbz	r1, 177c <_k32src_start+0xbc>
	if (!(intenset & CLOCK_INTENSET_LFCLKSTARTED_Msk)) {
    171e:	0792      	lsls	r2, r2, #30
    1720:	4f19      	ldr	r7, [pc, #100]	; (1788 <_k32src_start+0xc8>)
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    1722:	bf58      	it	pl
    1724:	2202      	movpl	r2, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    1726:	f04f 0100 	mov.w	r1, #0
    172a:	f04f 0501 	mov.w	r5, #1
    172e:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	irq_enable(POWER_CLOCK_IRQn);
    1732:	f04f 0000 	mov.w	r0, #0
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    1736:	bf58      	it	pl
    1738:	f8c3 2308 	strpl.w	r2, [r3, #776]	; 0x308
    173c:	f8c7 5180 	str.w	r5, [r7, #384]	; 0x180
	irq_enable(POWER_CLOCK_IRQn);
    1740:	f7ff fa8e 	bl	c60 <_arch_irq_enable>
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    1744:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	NRF_CLOCK->EVENTS_DONE = 0;
    1748:	2100      	movs	r1, #0
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    174a:	2218      	movs	r2, #24
    174c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	NRF_CLOCK->EVENTS_DONE = 0;
    1750:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
	NRF_CLOCK->EVENTS_CTTO = 0;
    1754:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    1758:	f014 0103 	ands.w	r1, r4, #3
    175c:	d1be      	bne.n	16dc <_k32src_start+0x1c>
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
    175e:	2010      	movs	r0, #16
    1760:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
		NRF_CLOCK->INTENSET =
    1764:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    1768:	4630      	mov	r0, r6
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    176a:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    176e:	f7ff ff4f 	bl	1610 <_m16src_start>
		if (!err) {
    1772:	2800      	cmp	r0, #0
    1774:	d1b2      	bne.n	16dc <_k32src_start+0x1c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1776:	f8c7 5100 	str.w	r5, [r7, #256]	; 0x100
    177a:	e7af      	b.n	16dc <_k32src_start+0x1c>
		__WFE();
    177c:	bf20      	wfe
		__SEV();
    177e:	bf40      	sev
		__WFE();
    1780:	bf20      	wfe
    1782:	e7c9      	b.n	1718 <_k32src_start+0x58>
    1784:	20000418 	.word	0x20000418
    1788:	e000e100 	.word	0xe000e100

0000178c <_power_clock_isr>:
{
    178c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    178e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
{
    1792:	4605      	mov	r5, r0
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    1794:	f8d3 e108 	ldr.w	lr, [r3, #264]	; 0x108
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    1798:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
    179c:	f8d3 440c 	ldr.w	r4, [r3, #1036]	; 0x40c
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
    17a0:	f8d3 7100 	ldr.w	r7, [r3, #256]	; 0x100
	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
    17a4:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
	done = (NRF_CLOCK->EVENTS_DONE != 0);
    17a8:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    17ac:	f8d3 6110 	ldr.w	r6, [r3, #272]	; 0x110
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    17b0:	f002 0201 	and.w	r2, r2, #1
	if (pof) {
    17b4:	f1be 0f00 	cmp.w	lr, #0
    17b8:	d003      	beq.n	17c2 <_power_clock_isr+0x36>
		NRF_POWER->EVENTS_POFWARN = 0;
    17ba:	f04f 0e00 	mov.w	lr, #0
    17be:	f8c3 e108 	str.w	lr, [r3, #264]	; 0x108
	if (hf) {
    17c2:	b127      	cbz	r7, 17ce <_power_clock_isr+0x42>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    17c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    17c8:	2700      	movs	r7, #0
    17ca:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
	if (hf_intenset && hf_stat) {
    17ce:	b13a      	cbz	r2, 17e0 <_power_clock_isr+0x54>
    17d0:	03e3      	lsls	r3, r4, #15
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    17d2:	bf41      	itttt	mi
    17d4:	f04f 4380 	movmi.w	r3, #1073741824	; 0x40000000
    17d8:	2201      	movmi	r2, #1
    17da:	f8c3 2308 	strmi.w	r2, [r3, #776]	; 0x308
		NRF_CLOCK->TASKS_CAL = 1;
    17de:	611a      	strmi	r2, [r3, #16]
	if (lf) {
    17e0:	b120      	cbz	r0, 17ec <_power_clock_isr+0x60>
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    17e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    17e6:	2200      	movs	r2, #0
    17e8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (done) {
    17ec:	b149      	cbz	r1, 1802 <_power_clock_isr+0x76>
		NRF_CLOCK->EVENTS_DONE = 0;
    17ee:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    17f2:	2100      	movs	r1, #0
    17f4:	f8c4 110c 	str.w	r1, [r4, #268]	; 0x10c
		err = _m16src_stop(dev, NULL);
    17f8:	4628      	mov	r0, r5
    17fa:	f7ff fecf 	bl	159c <_m16src_stop>
		NRF_CLOCK->TASKS_CTSTART = 1;
    17fe:	2301      	movs	r3, #1
    1800:	6163      	str	r3, [r4, #20]
	if (ctto) {
    1802:	b176      	cbz	r6, 1822 <_power_clock_isr+0x96>
		NRF_CLOCK->EVENTS_CTTO = 0;
    1804:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1808:	2100      	movs	r1, #0
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    180a:	2401      	movs	r4, #1
		NRF_CLOCK->EVENTS_CTTO = 0;
    180c:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
		err = _m16src_start(dev, false);
    1810:	4628      	mov	r0, r5
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    1812:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    1816:	f7ff fefb 	bl	1610 <_m16src_start>
		if (!err) {
    181a:	b910      	cbnz	r0, 1822 <_power_clock_isr+0x96>
    181c:	4b01      	ldr	r3, [pc, #4]	; (1824 <_power_clock_isr+0x98>)
    181e:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
    1822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1824:	e000e100 	.word	0xe000e100

00001828 <gpiote_find_channel>:
#define GPIOTE_CFG_PIN_GET(config) ((config & GPIOTE_CONFIG_PSEL_Msk) >> \
				GPIOTE_CONFIG_PSEL_Pos)

static int gpiote_find_channel(struct device *dev, u32_t pin)
{
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1828:	6803      	ldr	r3, [r0, #0]
    182a:	689b      	ldr	r3, [r3, #8]
    182c:	689a      	ldr	r2, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
		if ((data->gpiote_chan_mask & BIT(i)) &&
    182e:	6883      	ldr	r3, [r0, #8]
{
    1830:	b510      	push	{r4, lr}
		if ((data->gpiote_chan_mask & BIT(i)) &&
    1832:	68dc      	ldr	r4, [r3, #12]
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    1834:	2000      	movs	r0, #0
		if ((data->gpiote_chan_mask & BIT(i)) &&
    1836:	fa24 f300 	lsr.w	r3, r4, r0
    183a:	07db      	lsls	r3, r3, #31
    183c:	d507      	bpl.n	184e <gpiote_find_channel+0x26>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin)) {
    183e:	f500 73a2 	add.w	r3, r0, #324	; 0x144
    1842:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1846:	f3c3 2304 	ubfx	r3, r3, #8, #5
		if ((data->gpiote_chan_mask & BIT(i)) &&
    184a:	428b      	cmp	r3, r1
    184c:	d004      	beq.n	1858 <gpiote_find_channel+0x30>
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    184e:	3001      	adds	r0, #1
    1850:	2808      	cmp	r0, #8
    1852:	d1f0      	bne.n	1836 <gpiote_find_channel+0xe>
			return i;
		}
	}

	return -ENODEV;
    1854:	f06f 0012 	mvn.w	r0, #18
}
    1858:	bd10      	pop	{r4, pc}

0000185a <gpio_nrf5_read>:
}

static int gpio_nrf5_read(struct device *dev,
			  int access_op, u32_t pin, u32_t *value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    185a:	6800      	ldr	r0, [r0, #0]
    185c:	6880      	ldr	r0, [r0, #8]
    185e:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
    1860:	b941      	cbnz	r1, 1874 <gpio_nrf5_read+0x1a>
		*value = (gpio->IN >> pin) & 0x1;
    1862:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    1866:	fa21 f202 	lsr.w	r2, r1, r2
    186a:	f002 0201 	and.w	r2, r2, #1
	} else {
		*value = gpio->IN;
    186e:	601a      	str	r2, [r3, #0]
	}
	return 0;
}
    1870:	2000      	movs	r0, #0
    1872:	4770      	bx	lr
		*value = gpio->IN;
    1874:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
    1878:	e7f9      	b.n	186e <gpio_nrf5_read+0x14>

0000187a <gpio_nrf5_write>:

static int gpio_nrf5_write(struct device *dev,
			   int access_op, u32_t pin, u32_t value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    187a:	6800      	ldr	r0, [r0, #0]
    187c:	6880      	ldr	r0, [r0, #8]
    187e:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
    1880:	b949      	cbnz	r1, 1896 <gpio_nrf5_write+0x1c>
    1882:	2101      	movs	r1, #1
		if (value) { /* 1 */
			gpio->OUTSET = BIT(pin);
    1884:	4091      	lsls	r1, r2
		if (value) { /* 1 */
    1886:	b11b      	cbz	r3, 1890 <gpio_nrf5_write+0x16>
			gpio->OUTSET = BIT(pin);
    1888:	f8c0 1508 	str.w	r1, [r0, #1288]	; 0x508
		}
	} else {
		gpio->OUT = value;
	}
	return 0;
}
    188c:	2000      	movs	r0, #0
    188e:	4770      	bx	lr
			gpio->OUTCLR = BIT(pin);
    1890:	f8c0 150c 	str.w	r1, [r0, #1292]	; 0x50c
    1894:	e7fa      	b.n	188c <gpio_nrf5_write+0x12>
		gpio->OUT = value;
    1896:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
    189a:	e7f7      	b.n	188c <gpio_nrf5_write+0x12>

0000189c <gpio_nrf5_manage_callback>:

static int gpio_nrf5_manage_callback(struct device *dev,
				    struct gpio_callback *callback, bool set)
{
    189c:	b510      	push	{r4, lr}
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    189e:	6883      	ldr	r3, [r0, #8]
					 bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (set) {
    18a0:	b13a      	cbz	r2, 18b2 <gpio_nrf5_manage_callback+0x16>
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
    18a2:	681a      	ldr	r2, [r3, #0]
    18a4:	600a      	str	r2, [r1, #0]
	list->head = node;

	if (!list->tail) {
    18a6:	685a      	ldr	r2, [r3, #4]
	list->head = node;
    18a8:	6019      	str	r1, [r3, #0]
	if (!list->tail) {
    18aa:	b902      	cbnz	r2, 18ae <gpio_nrf5_manage_callback+0x12>
		list->tail = list->head;
    18ac:	6059      	str	r1, [r3, #4]

	_gpio_manage_callback(&data->callbacks, callback, set);

	return 0;
}
    18ae:	2000      	movs	r0, #0
    18b0:	bd10      	pop	{r4, pc}
    18b2:	6818      	ldr	r0, [r3, #0]
					     sys_snode_t *node)
{
	sys_snode_t *prev = NULL;
	sys_snode_t *test;

	SYS_SLIST_FOR_EACH_NODE(list, test) {
    18b4:	2800      	cmp	r0, #0
    18b6:	d0fa      	beq.n	18ae <gpio_nrf5_manage_callback+0x12>
		if (test == node) {
    18b8:	4281      	cmp	r1, r0
    18ba:	d10e      	bne.n	18da <gpio_nrf5_manage_callback+0x3e>
    18bc:	685c      	ldr	r4, [r3, #4]
    18be:	6808      	ldr	r0, [r1, #0]
	if (!prev_node) {
    18c0:	b932      	cbnz	r2, 18d0 <gpio_nrf5_manage_callback+0x34>
		if (list->tail == node) {
    18c2:	42a1      	cmp	r1, r4
		list->head = node->next;
    18c4:	6018      	str	r0, [r3, #0]
		if (list->tail == node) {
    18c6:	d100      	bne.n	18ca <gpio_nrf5_manage_callback+0x2e>
			list->tail = list->head;
    18c8:	6058      	str	r0, [r3, #4]
	node->next = NULL;
    18ca:	2300      	movs	r3, #0
    18cc:	600b      	str	r3, [r1, #0]
    18ce:	e7ee      	b.n	18ae <gpio_nrf5_manage_callback+0x12>
		if (list->tail == node) {
    18d0:	42a1      	cmp	r1, r4
		prev_node->next = node->next;
    18d2:	6010      	str	r0, [r2, #0]
			list->tail = prev_node;
    18d4:	bf08      	it	eq
    18d6:	605a      	streq	r2, [r3, #4]
    18d8:	e7f7      	b.n	18ca <gpio_nrf5_manage_callback+0x2e>
	SYS_SLIST_FOR_EACH_NODE(list, test) {
    18da:	4602      	mov	r2, r0
    18dc:	6800      	ldr	r0, [r0, #0]
    18de:	e7e9      	b.n	18b4 <gpio_nrf5_manage_callback+0x18>

000018e0 <gpio_nrf5_enable_callback>:


static int gpio_nrf5_enable_callback(struct device *dev,
				    int access_op, u32_t pin)
{
    18e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    18e2:	4614      	mov	r4, r2
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    18e4:	6802      	ldr	r2, [r0, #0]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    18e6:	6887      	ldr	r7, [r0, #8]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    18e8:	6892      	ldr	r2, [r2, #8]
	int i;

	if (access_op == GPIO_ACCESS_BY_PIN) {
    18ea:	460d      	mov	r5, r1
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    18ec:	6896      	ldr	r6, [r2, #8]
	if (access_op == GPIO_ACCESS_BY_PIN) {
    18ee:	b9a1      	cbnz	r1, 191a <gpio_nrf5_enable_callback+0x3a>

		i = gpiote_find_channel(dev, pin);
    18f0:	4621      	mov	r1, r4
    18f2:	f7ff ff99 	bl	1828 <gpiote_find_channel>
		if (i < 0) {
    18f6:	2800      	cmp	r0, #0
    18f8:	db11      	blt.n	191e <gpio_nrf5_enable_callback+0x3e>
			return i;
		}

		data->pin_callback_enables |= BIT(pin);
    18fa:	68ba      	ldr	r2, [r7, #8]
    18fc:	2301      	movs	r3, #1
    18fe:	fa03 f404 	lsl.w	r4, r3, r4
    1902:	4314      	orrs	r4, r2
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
    1904:	f100 0240 	add.w	r2, r0, #64	; 0x40
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
    1908:	fa03 f000 	lsl.w	r0, r3, r0
		data->pin_callback_enables |= BIT(pin);
    190c:	60bc      	str	r4, [r7, #8]
		gpiote->EVENTS_IN[i] = 0;
    190e:	f846 5022 	str.w	r5, [r6, r2, lsl #2]
		gpiote->INTENSET = BIT(i);
    1912:	f8c6 0304 	str.w	r0, [r6, #772]	; 0x304
	} else {
		return -ENOTSUP;
	}

	return 0;
    1916:	4628      	mov	r0, r5
    1918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOTSUP;
    191a:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
    191e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00001920 <gpio_nrf5_disable_callback>:


static int gpio_nrf5_disable_callback(struct device *dev,
				     int access_op, u32_t pin)
{
    1920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1922:	4614      	mov	r4, r2
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1924:	6802      	ldr	r2, [r0, #0]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    1926:	6886      	ldr	r6, [r0, #8]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1928:	6892      	ldr	r2, [r2, #8]
	int i;

	if (access_op == GPIO_ACCESS_BY_PIN) {
    192a:	460d      	mov	r5, r1
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    192c:	6897      	ldr	r7, [r2, #8]
	if (access_op == GPIO_ACCESS_BY_PIN) {
    192e:	b989      	cbnz	r1, 1954 <gpio_nrf5_disable_callback+0x34>
		i = gpiote_find_channel(dev, pin);
    1930:	4621      	mov	r1, r4
    1932:	f7ff ff79 	bl	1828 <gpiote_find_channel>
		if (i < 0) {
    1936:	2800      	cmp	r0, #0
    1938:	db0e      	blt.n	1958 <gpio_nrf5_disable_callback+0x38>
			return i;
		}

		data->pin_callback_enables &= ~(BIT(pin));
    193a:	68b2      	ldr	r2, [r6, #8]
    193c:	2301      	movs	r3, #1
    193e:	fa03 f404 	lsl.w	r4, r3, r4
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR = BIT(i);
    1942:	fa03 f000 	lsl.w	r0, r3, r0
		data->pin_callback_enables &= ~(BIT(pin));
    1946:	ea22 0404 	bic.w	r4, r2, r4
    194a:	60b4      	str	r4, [r6, #8]
		gpiote->INTENCLR = BIT(i);
    194c:	f8c7 0308 	str.w	r0, [r7, #776]	; 0x308
	} else {
		return -ENOTSUP;
	}

	return 0;
    1950:	4628      	mov	r0, r5
    1952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOTSUP;
    1954:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
    1958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000195a <gpio_nrf5_P0_init>:
		    &gpio_data_P0, &gpio_nrf5_P0_cfg,
		    POST_KERNEL, CONFIG_KERNEL_INIT_PRIORITY_DEFAULT,
		    &gpio_nrf5_drv_api_funcs);

static int gpio_nrf5_P0_init(struct device *dev)
{
    195a:	b508      	push	{r3, lr}
	IRQ_CONNECT(NRF5_IRQ_GPIOTE_IRQn, CONFIG_GPIO_NRF5_PORT_P0_PRI,
    195c:	2200      	movs	r2, #0
    195e:	2101      	movs	r1, #1
    1960:	2006      	movs	r0, #6
    1962:	f7ff f9af 	bl	cc4 <_irq_priority_set>
		    gpio_nrf5_port_isr, DEVICE_GET(gpio_nrf5_P0), 0);

	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    1966:	2006      	movs	r0, #6
    1968:	f7ff f97a 	bl	c60 <_arch_irq_enable>

	return 0;
}
    196c:	2000      	movs	r0, #0
    196e:	bd08      	pop	{r3, pc}

00001970 <gpio_nrf5_port_isr>:
{
    1970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1972:	6803      	ldr	r3, [r0, #0]
{
    1974:	4606      	mov	r6, r0
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1976:	689b      	ldr	r3, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    1978:	68b4      	ldr	r4, [r6, #8]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    197a:	6898      	ldr	r0, [r3, #8]
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    197c:	2200      	movs	r2, #0
	u32_t enabled_int, int_status = 0;
    197e:	4613      	mov	r3, r2
			gpiote->EVENTS_IN[i] = 0;
    1980:	4615      	mov	r5, r2
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
    1982:	2701      	movs	r7, #1
    1984:	eb00 0182 	add.w	r1, r0, r2, lsl #2
		if (gpiote->EVENTS_IN[i]) {
    1988:	f8d1 e100 	ldr.w	lr, [r1, #256]	; 0x100
    198c:	f1be 0f00 	cmp.w	lr, #0
    1990:	d008      	beq.n	19a4 <gpio_nrf5_port_isr+0x34>
			gpiote->EVENTS_IN[i] = 0;
    1992:	f8c1 5100 	str.w	r5, [r1, #256]	; 0x100
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
    1996:	f8d1 1510 	ldr.w	r1, [r1, #1296]	; 0x510
    199a:	f3c1 2104 	ubfx	r1, r1, #8, #5
    199e:	fa07 f101 	lsl.w	r1, r7, r1
    19a2:	430b      	orrs	r3, r1
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    19a4:	3201      	adds	r2, #1
    19a6:	2a08      	cmp	r2, #8
    19a8:	d1ec      	bne.n	1984 <gpio_nrf5_port_isr+0x14>
	enabled_int = int_status & data->pin_callback_enables;
    19aa:	68a5      	ldr	r5, [r4, #8]
	irq_disable(NRF5_IRQ_GPIOTE_IRQn);
    19ac:	2006      	movs	r0, #6
	enabled_int = int_status & data->pin_callback_enables;
    19ae:	401d      	ands	r5, r3
	irq_disable(NRF5_IRQ_GPIOTE_IRQn);
    19b0:	f7ff f966 	bl	c80 <_arch_irq_disable>
    19b4:	6824      	ldr	r4, [r4, #0]
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
    19b6:	b924      	cbnz	r4, 19c2 <gpio_nrf5_port_isr+0x52>
	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    19b8:	2006      	movs	r0, #6
}
    19ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    19be:	f7ff b94f 	b.w	c60 <_arch_irq_enable>
		if (cb->pin_mask & pins) {
    19c2:	68a3      	ldr	r3, [r4, #8]
    19c4:	421d      	tst	r5, r3
    19c6:	d0f5      	beq.n	19b4 <gpio_nrf5_port_isr+0x44>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
    19c8:	6863      	ldr	r3, [r4, #4]
    19ca:	462a      	mov	r2, r5
    19cc:	4621      	mov	r1, r4
    19ce:	4630      	mov	r0, r6
    19d0:	4798      	blx	r3
    19d2:	e7ef      	b.n	19b4 <gpio_nrf5_port_isr+0x44>

000019d4 <gpio_nrf5_config>:
{
    19d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    19d8:	4614      	mov	r4, r2
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    19da:	6802      	ldr	r2, [r0, #0]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    19dc:	6887      	ldr	r7, [r0, #8]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    19de:	6892      	ldr	r2, [r2, #8]
{
    19e0:	4680      	mov	r8, r0
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    19e2:	6895      	ldr	r5, [r2, #8]
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    19e4:	6810      	ldr	r0, [r2, #0]
	if (access_op == GPIO_ACCESS_BY_PIN) {
    19e6:	b119      	cbz	r1, 19f0 <gpio_nrf5_config+0x1c>
		return -ENOTSUP;
    19e8:	f06f 0022 	mvn.w	r0, #34	; 0x22
    19ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    19f0:	f403 7240 	and.w	r2, r3, #768	; 0x300
    19f4:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
		int ds_low = (flags & GPIO_DS_LOW_MASK) >> GPIO_DS_LOW_POS;
    19f8:	f3c3 3101 	ubfx	r1, r3, #12, #2
		int ds_high = (flags & GPIO_DS_HIGH_MASK) >> GPIO_DS_HIGH_POS;
    19fc:	f3c3 3981 	ubfx	r9, r3, #14, #2
		unsigned int sense = (flags & GPIO_PIN_CNF_SENSE_Msk);
    1a00:	f403 3e40 	and.w	lr, r3, #196608	; 0x30000
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    1a04:	d056      	beq.n	1ab4 <gpio_nrf5_config+0xe0>
		u8_t pull = GPIO_PULL_DISABLE;
    1a06:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    1a0a:	bf0c      	ite	eq
    1a0c:	2204      	moveq	r2, #4
    1a0e:	2200      	movne	r2, #0
			sense = GPIO_SENSE_DISABLE;
    1a10:	f5be 3f80 	cmp.w	lr, #65536	; 0x10000
    1a14:	bf08      	it	eq
    1a16:	f04f 0e00 	moveq.w	lr, #0
		if ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT) {
    1a1a:	f013 0f01 	tst.w	r3, #1
    1a1e:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 1ae8 <gpio_nrf5_config+0x114>
    1a22:	ea4f 0181 	mov.w	r1, r1, lsl #2
    1a26:	f504 76e0 	add.w	r6, r4, #448	; 0x1c0
    1a2a:	d04e      	beq.n	1aca <gpio_nrf5_config+0xf6>
			if (pull == GPIO_PULL_UP) {
    1a2c:	2a0c      	cmp	r2, #12
    1a2e:	d143      	bne.n	1ab8 <gpio_nrf5_config+0xe4>
				gpio->OUTSET = BIT(pin);
    1a30:	f04f 0e01 	mov.w	lr, #1
    1a34:	fa0e fe04 	lsl.w	lr, lr, r4
    1a38:	f8c0 e508 	str.w	lr, [r0, #1288]	; 0x508
					      drive_strength[ds_low][ds_high] |
    1a3c:	4449      	add	r1, r9
					      GPIO_INPUT_DISCONNECT |
    1a3e:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
    1a42:	f041 0103 	orr.w	r1, r1, #3
    1a46:	430a      	orrs	r2, r1
			gpio->PIN_CNF[pin] = (sense |
    1a48:	f840 2026 	str.w	r2, [r0, r6, lsl #2]
	if (flags & GPIO_INT) {
    1a4c:	f013 0002 	ands.w	r0, r3, #2
    1a50:	d047      	beq.n	1ae2 <gpio_nrf5_config+0x10e>
		if (flags & GPIO_INT_EDGE) {
    1a52:	0699      	lsls	r1, r3, #26
    1a54:	d5c8      	bpl.n	19e8 <gpio_nrf5_config+0x14>
			if (flags & GPIO_INT_DOUBLE_EDGE) {
    1a56:	065a      	lsls	r2, r3, #25
    1a58:	d43e      	bmi.n	1ad8 <gpio_nrf5_config+0x104>
				config |= GPIOTE_CFG_POL_H2L;
    1a5a:	f013 0f04 	tst.w	r3, #4
    1a5e:	bf14      	ite	ne
    1a60:	f44f 3680 	movne.w	r6, #65536	; 0x10000
    1a64:	f44f 3600 	moveq.w	r6, #131072	; 0x20000
		if (__builtin_popcount(data->gpiote_chan_mask) ==
    1a68:	68f8      	ldr	r0, [r7, #12]
    1a6a:	f7fe fc15 	bl	298 <__popcountsi2>
    1a6e:	2808      	cmp	r0, #8
    1a70:	d035      	beq.n	1ade <gpio_nrf5_config+0x10a>
		int i = gpiote_find_channel(dev, pin);
    1a72:	4621      	mov	r1, r4
    1a74:	4640      	mov	r0, r8
    1a76:	f7ff fed7 	bl	1828 <gpiote_find_channel>
		if (i < 0) {
    1a7a:	2800      	cmp	r0, #0
    1a7c:	68fb      	ldr	r3, [r7, #12]
    1a7e:	da08      	bge.n	1a92 <gpio_nrf5_config+0xbe>
			i = __builtin_ffs(~(data->gpiote_chan_mask)) - 1;
    1a80:	43da      	mvns	r2, r3
    1a82:	fa92 f0a2 	rbit	r0, r2
    1a86:	2a00      	cmp	r2, #0
    1a88:	fab0 f080 	clz	r0, r0
    1a8c:	bf08      	it	eq
    1a8e:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
		config |= GPIOTE_CFG_PIN(pin);
    1a92:	0224      	lsls	r4, r4, #8
		data->gpiote_chan_mask |= BIT(i);
    1a94:	2201      	movs	r2, #1
		config |= GPIOTE_CFG_PIN(pin);
    1a96:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
		data->gpiote_chan_mask |= BIT(i);
    1a9a:	4082      	lsls	r2, r0
		config |= GPIOTE_CFG_PIN(pin);
    1a9c:	f044 0401 	orr.w	r4, r4, #1
		gpiote->CONFIG[i] = config;
    1aa0:	f500 70a2 	add.w	r0, r0, #324	; 0x144
		data->gpiote_chan_mask |= BIT(i);
    1aa4:	4313      	orrs	r3, r2
		config |= GPIOTE_CFG_PIN(pin);
    1aa6:	4334      	orrs	r4, r6
		data->gpiote_chan_mask |= BIT(i);
    1aa8:	60fb      	str	r3, [r7, #12]
		gpiote->CONFIG[i] = config;
    1aaa:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
	return 0;
    1aae:	2000      	movs	r0, #0
    1ab0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			pull = GPIO_PULL_UP;
    1ab4:	220c      	movs	r2, #12
    1ab6:	e7ab      	b.n	1a10 <gpio_nrf5_config+0x3c>
			} else if (pull == GPIO_PULL_DOWN) {
    1ab8:	2a04      	cmp	r2, #4
				gpio->OUTCLR = BIT(pin);
    1aba:	bf02      	ittt	eq
    1abc:	f04f 0e01 	moveq.w	lr, #1
    1ac0:	fa0e fe04 	lsleq.w	lr, lr, r4
    1ac4:	f8c0 e50c 	streq.w	lr, [r0, #1292]	; 0x50c
    1ac8:	e7b8      	b.n	1a3c <gpio_nrf5_config+0x68>
					      drive_strength[ds_low][ds_high] |
    1aca:	4449      	add	r1, r9
    1acc:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
    1ad0:	430a      	orrs	r2, r1
    1ad2:	ea42 020e 	orr.w	r2, r2, lr
    1ad6:	e7b7      	b.n	1a48 <gpio_nrf5_config+0x74>
				config |= GPIOTE_CFG_POL_TOGG;
    1ad8:	f44f 3640 	mov.w	r6, #196608	; 0x30000
    1adc:	e7c4      	b.n	1a68 <gpio_nrf5_config+0x94>
			return -EIO;
    1ade:	f06f 0004 	mvn.w	r0, #4
}
    1ae2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1ae6:	bf00      	nop
    1ae8:	0000d244 	.word	0x0000d244

00001aec <uart_nrf5_poll_in>:
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */

static int uart_nrf5_poll_in(struct device *dev, unsigned char *c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    1aec:	6803      	ldr	r3, [r0, #0]
    1aee:	689b      	ldr	r3, [r3, #8]
    1af0:	681b      	ldr	r3, [r3, #0]

	if (!uart->EVENTS_RXDRDY) {
    1af2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
    1af6:	b132      	cbz	r2, 1b06 <uart_nrf5_poll_in+0x1a>
		return -1;
	}

	/* Clear the interrupt */
	uart->EVENTS_RXDRDY = 0;
    1af8:	2000      	movs	r0, #0
    1afa:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108

	/* got a character */
	*c = (unsigned char)uart->RXD;
    1afe:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    1b02:	700b      	strb	r3, [r1, #0]

	return 0;
    1b04:	4770      	bx	lr
		return -1;
    1b06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    1b0a:	4770      	bx	lr

00001b0c <uart_nrf5_poll_out>:
 * @return Sent character
 */
static unsigned char uart_nrf5_poll_out(struct device *dev,
					unsigned char c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    1b0c:	6803      	ldr	r3, [r0, #0]
    1b0e:	689b      	ldr	r3, [r3, #8]
    1b10:	681b      	ldr	r3, [r3, #0]

	/* send a character */
	uart->TXD = (u8_t)c;
    1b12:	f8c3 151c 	str.w	r1, [r3, #1308]	; 0x51c

	/* Wait for transmitter to be ready */
	while (!uart->EVENTS_TXDRDY) {
    1b16:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
    1b1a:	2a00      	cmp	r2, #0
    1b1c:	d0fb      	beq.n	1b16 <uart_nrf5_poll_out+0xa>
	}

	uart->EVENTS_TXDRDY = 0;
    1b1e:	2200      	movs	r2, #0
    1b20:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

	return c;
}
    1b24:	4608      	mov	r0, r1
    1b26:	4770      	bx	lr

00001b28 <uart_nrf5_err_check>:

/** Console I/O function */
static int uart_nrf5_err_check(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    1b28:	6803      	ldr	r3, [r0, #0]
    1b2a:	689b      	ldr	r3, [r3, #8]
    1b2c:	681b      	ldr	r3, [r3, #0]
	u32_t error = 0;

	if (uart->EVENTS_ERROR) {
    1b2e:	f8d3 0124 	ldr.w	r0, [r3, #292]	; 0x124
    1b32:	b118      	cbz	r0, 1b3c <uart_nrf5_err_check+0x14>
		/* register bitfields maps to the defines in uart.h */
		error = uart->ERRORSRC;
    1b34:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480

		/* Clear the register */
		uart->ERRORSRC = error;
    1b38:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
	}

	error = error & 0x0F;

	return error;
}
    1b3c:	f000 000f 	and.w	r0, r0, #15
    1b40:	4770      	bx	lr
	...

00001b44 <uart_nrf5_init>:
{
    1b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _uart *uart = UART_STRUCT(dev);
    1b46:	6803      	ldr	r3, [r0, #0]
    1b48:	689b      	ldr	r3, [r3, #8]
{
    1b4a:	4605      	mov	r5, r0
	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
    1b4c:	4818      	ldr	r0, [pc, #96]	; (1bb0 <uart_nrf5_init+0x6c>)
	volatile struct _uart *uart = UART_STRUCT(dev);
    1b4e:	681c      	ldr	r4, [r3, #0]
	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
    1b50:	f009 ff3a 	bl	b9c8 <device_get_binding>
static inline int _impl_gpio_config(struct device *port, int access_op,
				    u32_t pin, int flags)
{
	const struct gpio_driver_api *api = port->driver_api;

	return api->config(port, access_op, pin, flags);
    1b54:	6843      	ldr	r3, [r0, #4]
    1b56:	4606      	mov	r6, r0
    1b58:	681f      	ldr	r7, [r3, #0]
    1b5a:	2206      	movs	r2, #6
    1b5c:	f240 1301 	movw	r3, #257	; 0x101
    1b60:	2100      	movs	r1, #0
    1b62:	47b8      	blx	r7
    1b64:	6873      	ldr	r3, [r6, #4]
    1b66:	681f      	ldr	r7, [r3, #0]
    1b68:	2300      	movs	r3, #0
    1b6a:	4619      	mov	r1, r3
    1b6c:	2208      	movs	r2, #8
    1b6e:	4630      	mov	r0, r6
    1b70:	47b8      	blx	r7
	uart->PSELTXD = CONFIG_UART_NRF5_GPIO_TX_PIN;
    1b72:	2306      	movs	r3, #6
    1b74:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
	uart->PSELRXD = CONFIG_UART_NRF5_GPIO_RX_PIN;
    1b78:	2308      	movs	r3, #8
    1b7a:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
	DEV_DATA(dev)->baud_rate = CONFIG_UART_NRF5_BAUD_RATE;
    1b7e:	68ab      	ldr	r3, [r5, #8]
    1b80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
    1b84:	601a      	str	r2, [r3, #0]
	volatile struct _uart *uart = UART_STRUCT(dev);
    1b86:	682b      	ldr	r3, [r5, #0]
    1b88:	689b      	ldr	r3, [r3, #8]
    1b8a:	681b      	ldr	r3, [r3, #0]
	uart->BAUDRATE = divisor << UART_BAUDRATE_BAUDRATE_Pos;
    1b8c:	f04f 72eb 	mov.w	r2, #30801920	; 0x1d60000
    1b90:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	uart->ENABLE = (UART_ENABLE_ENABLE_Enabled << UART_ENABLE_ENABLE_Pos);
    1b94:	2304      	movs	r3, #4
    1b96:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	uart->EVENTS_TXDRDY = 0;
    1b9a:	2000      	movs	r0, #0
	uart->TASKS_STARTTX = 1;
    1b9c:	2301      	movs	r3, #1
	uart->EVENTS_TXDRDY = 0;
    1b9e:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
	uart->EVENTS_RXDRDY = 0;
    1ba2:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
	uart->TASKS_STARTTX = 1;
    1ba6:	60a3      	str	r3, [r4, #8]
	uart->TASKS_STARTRX = 1;
    1ba8:	6023      	str	r3, [r4, #0]
	dev->driver_api = &uart_nrf5_driver_api;
    1baa:	4b02      	ldr	r3, [pc, #8]	; (1bb4 <uart_nrf5_init+0x70>)
    1bac:	606b      	str	r3, [r5, #4]
}
    1bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1bb0:	0000d2ac 	.word	0x0000d2ac
    1bb4:	0000d2c4 	.word	0x0000d2c4

00001bb8 <get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static inline u8_t get(struct rand *rng, u8_t octets, u8_t *rand)
{
    1bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u8_t first, last, avail, remaining, *d, *s;

	__ASSERT_NO_MSG(rng);

	first = rng->first;
    1bbc:	7883      	ldrb	r3, [r0, #2]
	last = rng->last;
    1bbe:	78c4      	ldrb	r4, [r0, #3]

	d = &rand[octets];
	s = &rng->rand[first];
    1bc0:	1d1e      	adds	r6, r3, #4

	if (first <= last) {
    1bc2:	42a3      	cmp	r3, r4
	d = &rand[octets];
    1bc4:	440a      	add	r2, r1
	s = &rng->rand[first];
    1bc6:	4406      	add	r6, r0
	if (first <= last) {
    1bc8:	d81f      	bhi.n	1c0a <get+0x52>
		/* copy octets from contiguous memory */
		avail = last - first;
    1bca:	1ae4      	subs	r4, r4, r3
    1bcc:	b2e4      	uxtb	r4, r4
		if (octets < avail) {
    1bce:	42a1      	cmp	r1, r4
			remaining = avail - octets;
    1bd0:	bf3e      	ittt	cc
    1bd2:	1a64      	subcc	r4, r4, r1
    1bd4:	b2e7      	uxtbcc	r7, r4
    1bd6:	460c      	movcc	r4, r1
			avail = octets;
		} else {
			remaining = 0;
		}

		first += avail;
    1bd8:	4423      	add	r3, r4
		octets -= avail;
    1bda:	eba1 0104 	sub.w	r1, r1, r4
			remaining = 0;
    1bde:	bf28      	it	cs
    1be0:	2700      	movcs	r7, #0
		first += avail;
    1be2:	b2db      	uxtb	r3, r3
		octets -= avail;
    1be4:	b2c9      	uxtb	r1, r1
    1be6:	4434      	add	r4, r6

		while (avail--) {
    1be8:	42a6      	cmp	r6, r4
    1bea:	d109      	bne.n	1c00 <get+0x48>
			while (last--) {
				*(--d) = *s++;
			}
		}

		rng->first = first;
    1bec:	7083      	strb	r3, [r0, #2]
	}

	if (remaining < rng->threshold) {
    1bee:	7843      	ldrb	r3, [r0, #1]
    1bf0:	42bb      	cmp	r3, r7
		NRF_RNG->TASKS_START = 1;
    1bf2:	bf82      	ittt	hi
    1bf4:	4b20      	ldrhi	r3, [pc, #128]	; (1c78 <get+0xc0>)
    1bf6:	2201      	movhi	r2, #1
    1bf8:	601a      	strhi	r2, [r3, #0]
		NRF_RNG_regw_sideeffects();
#endif
	}

	return octets;
}
    1bfa:	4608      	mov	r0, r1
    1bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			*(--d) = *s++;
    1c00:	f816 5b01 	ldrb.w	r5, [r6], #1
    1c04:	f802 5d01 	strb.w	r5, [r2, #-1]!
    1c08:	e7ee      	b.n	1be8 <get+0x30>
		avail = rng->count - first;
    1c0a:	7805      	ldrb	r5, [r0, #0]
    1c0c:	1aed      	subs	r5, r5, r3
    1c0e:	b2ed      	uxtb	r5, r5
		if (octets < avail) {
    1c10:	42a9      	cmp	r1, r5
			remaining = avail + last - octets;
    1c12:	bf3f      	itttt	cc
    1c14:	1a67      	subcc	r7, r4, r1
    1c16:	19ed      	addcc	r5, r5, r7
    1c18:	b2ef      	uxtbcc	r7, r5
    1c1a:	460d      	movcc	r5, r1
			first += avail;
    1c1c:	bf38      	it	cc
    1c1e:	185b      	addcc	r3, r3, r1
		octets -= avail;
    1c20:	eba1 0105 	sub.w	r1, r1, r5
			first += avail;
    1c24:	bf32      	itee	cc
    1c26:	b2db      	uxtbcc	r3, r3
    1c28:	4627      	movcs	r7, r4
			first = 0;
    1c2a:	2300      	movcs	r3, #0
		octets -= avail;
    1c2c:	b2c9      	uxtb	r1, r1
    1c2e:	4696      	mov	lr, r2
    1c30:	eb06 0c05 	add.w	ip, r6, r5
		while (avail--) {
    1c34:	4566      	cmp	r6, ip
    1c36:	d119      	bne.n	1c6c <get+0xb4>
    1c38:	1b52      	subs	r2, r2, r5
		if (octets && last) {
    1c3a:	2900      	cmp	r1, #0
    1c3c:	d0d6      	beq.n	1bec <get+0x34>
    1c3e:	2c00      	cmp	r4, #0
    1c40:	d0d4      	beq.n	1bec <get+0x34>
			if (octets < last) {
    1c42:	428c      	cmp	r4, r1
    1c44:	bf8a      	itet	hi
    1c46:	460b      	movhi	r3, r1
    1c48:	4623      	movls	r3, r4
				remaining = last - octets;
    1c4a:	1a64      	subhi	r4, r4, r1
			s = &rng->rand[0];
    1c4c:	f100 0604 	add.w	r6, r0, #4
			octets -= last;
    1c50:	eba1 0103 	sub.w	r1, r1, r3
				remaining = last - octets;
    1c54:	bf8c      	ite	hi
    1c56:	b2e7      	uxtbhi	r7, r4
				remaining = 0;
    1c58:	2700      	movls	r7, #0
			octets -= last;
    1c5a:	b2c9      	uxtb	r1, r1
    1c5c:	18f4      	adds	r4, r6, r3
			while (last--) {
    1c5e:	42a6      	cmp	r6, r4
    1c60:	d0c4      	beq.n	1bec <get+0x34>
				*(--d) = *s++;
    1c62:	f816 5b01 	ldrb.w	r5, [r6], #1
    1c66:	f802 5d01 	strb.w	r5, [r2, #-1]!
    1c6a:	e7f8      	b.n	1c5e <get+0xa6>
			*(--d) = *s++;
    1c6c:	f816 8b01 	ldrb.w	r8, [r6], #1
    1c70:	f80e 8d01 	strb.w	r8, [lr, #-1]!
    1c74:	e7de      	b.n	1c34 <get+0x7c>
    1c76:	bf00      	nop
    1c78:	4000d000 	.word	0x4000d000

00001c7c <isr>:
#pragma GCC pop_options

static int isr(struct rand *rng, bool store)
{
    1c7c:	b530      	push	{r4, r5, lr}
	u8_t last;

	if (!rng) {
    1c7e:	b1d0      	cbz	r0, 1cb6 <isr+0x3a>
		return -ENOBUFS;
	}

	last = rng->last + 1;
    1c80:	78c2      	ldrb	r2, [r0, #3]
	if (last == rng->count) {
    1c82:	7805      	ldrb	r5, [r0, #0]
		last = 0;
	}

	if (last == rng->first) {
    1c84:	7884      	ldrb	r4, [r0, #2]
	last = rng->last + 1;
    1c86:	1c53      	adds	r3, r2, #1
    1c88:	b2db      	uxtb	r3, r3
		last = 0;
    1c8a:	42ab      	cmp	r3, r5
    1c8c:	bf08      	it	eq
    1c8e:	2300      	moveq	r3, #0
	if (last == rng->first) {
    1c90:	42a3      	cmp	r3, r4
    1c92:	d010      	beq.n	1cb6 <isr+0x3a>
		 * new value could be generated before NRF_RNG task is stopped.
		 */
		return -ENOBUFS;
	}

	if (!store) {
    1c94:	b161      	cbz	r1, 1cb0 <isr+0x34>
		return -EBUSY;
	}

	rng->rand[rng->last] = NRF_RNG->VALUE;
    1c96:	490a      	ldr	r1, [pc, #40]	; (1cc0 <isr+0x44>)
    1c98:	4402      	add	r2, r0
    1c9a:	f8d1 1508 	ldr.w	r1, [r1, #1288]	; 0x508
    1c9e:	7111      	strb	r1, [r2, #4]
	rng->last = last;
    1ca0:	70c3      	strb	r3, [r0, #3]

	last = rng->last + 1;
    1ca2:	3301      	adds	r3, #1
    1ca4:	b2db      	uxtb	r3, r3
	if (last == rng->count) {
		last = 0;
    1ca6:	429d      	cmp	r5, r3
    1ca8:	bf08      	it	eq
    1caa:	2300      	moveq	r3, #0
	}

	if (last == rng->first) {
    1cac:	42a3      	cmp	r3, r4
    1cae:	d005      	beq.n	1cbc <isr+0x40>
		return 0;
	}

	return -EBUSY;
    1cb0:	f06f 000f 	mvn.w	r0, #15
    1cb4:	bd30      	pop	{r4, r5, pc}
		return -ENOBUFS;
    1cb6:	f06f 0036 	mvn.w	r0, #54	; 0x36
    1cba:	bd30      	pop	{r4, r5, pc}
		return 0;
    1cbc:	2000      	movs	r0, #0
}
    1cbe:	bd30      	pop	{r4, r5, pc}
    1cc0:	4000d000 	.word	0x4000d000

00001cc4 <entropy_nrf5_init>:
		    entropy_nrf5_init, &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(struct device *device)
{
    1cc4:	b570      	push	{r4, r5, r6, lr}
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
    1cc6:	6884      	ldr	r4, [r0, #8]

K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex);

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    1cc8:	2201      	movs	r2, #1
    1cca:	4611      	mov	r1, r2
    1ccc:	4620      	mov	r0, r4
    1cce:	f00a fa7f 	bl	c1d0 <_impl_k_sem_init>
    1cd2:	f104 0018 	add.w	r0, r4, #24
    1cd6:	2201      	movs	r2, #1
    1cd8:	2100      	movs	r1, #0
    1cda:	f00a fa79 	bl	c1d0 <_impl_k_sem_init>
	rng->threshold = threshold;
    1cde:	2304      	movs	r3, #4
    1ce0:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
    1ce4:	230c      	movs	r3, #12
	rng->first = rng->last = 0;
    1ce6:	2500      	movs	r5, #0
	rng->threshold = threshold;
    1ce8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	rng->count = len;
    1cec:	2105      	movs	r1, #5
	init((struct rand *)dev_data->isr, RAND_ISR_LEN,
	     CONFIG_ENTROPY_NRF5_ISR_THRESHOLD);

	/* Enable or disable bias correction */
	if (IS_ENABLED(CONFIG_ENTROPY_NRF5_BIAS_CORRECTION)) {
		NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
    1cee:	4b11      	ldr	r3, [pc, #68]	; (1d34 <entropy_nrf5_init+0x70>)
	rng->count = len;
    1cf0:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
    1cf4:	260d      	movs	r6, #13
	rng->first = rng->last = 0;
    1cf6:	f884 5033 	strb.w	r5, [r4, #51]	; 0x33
    1cfa:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
	rng->count = len;
    1cfe:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
	rng->first = rng->last = 0;
    1d02:	f884 503f 	strb.w	r5, [r4, #63]	; 0x3f
    1d06:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
		NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
    1d0a:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
    1d0e:	f042 0201 	orr.w	r2, r2, #1
    1d12:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	} else {
		NRF_RNG->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
	}

	NRF_RNG->EVENTS_VALRDY = 0;
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
    1d16:	2201      	movs	r2, #1
	NRF_RNG->EVENTS_VALRDY = 0;
    1d18:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
	NRF_RNG->TASKS_START = 1;
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RNG_regw_sideeffects();
#endif

	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr_rand,
    1d1c:	4630      	mov	r0, r6
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
    1d1e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	NRF_RNG->TASKS_START = 1;
    1d22:	601a      	str	r2, [r3, #0]
	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr_rand,
    1d24:	462a      	mov	r2, r5
    1d26:	f7fe ffcd 	bl	cc4 <_irq_priority_set>
		    DEVICE_GET(entropy_nrf5), 0);
	irq_enable(NRF5_IRQ_RNG_IRQn);
    1d2a:	4630      	mov	r0, r6
    1d2c:	f7fe ff98 	bl	c60 <_arch_irq_enable>

	return 0;
}
    1d30:	4628      	mov	r0, r5
    1d32:	bd70      	pop	{r4, r5, r6, pc}
    1d34:	4000d000 	.word	0x4000d000

00001d38 <isr_rand>:
{
    1d38:	b538      	push	{r3, r4, r5, lr}
	if (NRF_RNG->EVENTS_VALRDY) {
    1d3a:	4b12      	ldr	r3, [pc, #72]	; (1d84 <isr_rand+0x4c>)
    1d3c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    1d40:	b1fb      	cbz	r3, 1d82 <isr_rand+0x4a>
		struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
    1d42:	6885      	ldr	r5, [r0, #8]
		ret = isr((struct rand *)dev_data->isr, true);
    1d44:	2101      	movs	r1, #1
    1d46:	f105 003c 	add.w	r0, r5, #60	; 0x3c
    1d4a:	f7ff ff97 	bl	1c7c <isr>
		if (ret != -EBUSY) {
    1d4e:	f110 0f10 	cmn.w	r0, #16
		ret = isr((struct rand *)dev_data->isr, true);
    1d52:	4604      	mov	r4, r0
		if (ret != -EBUSY) {
    1d54:	d00d      	beq.n	1d72 <isr_rand+0x3a>
			ret = isr((struct rand *)dev_data->thr,
    1d56:	f110 0437 	adds.w	r4, r0, #55	; 0x37
    1d5a:	bf14      	ite	ne
    1d5c:	2100      	movne	r1, #0
    1d5e:	2101      	moveq	r1, #1
    1d60:	f105 0030 	add.w	r0, r5, #48	; 0x30
    1d64:	f7ff ff8a 	bl	1c7c <isr>
    1d68:	4604      	mov	r4, r0

K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    1d6a:	f105 0018 	add.w	r0, r5, #24
    1d6e:	f00a fa39 	bl	c1e4 <_impl_k_sem_give>
		NRF_RNG->EVENTS_VALRDY = 0;
    1d72:	4b04      	ldr	r3, [pc, #16]	; (1d84 <isr_rand+0x4c>)
    1d74:	2200      	movs	r2, #0
		if (ret != -EBUSY) {
    1d76:	3410      	adds	r4, #16
		NRF_RNG->EVENTS_VALRDY = 0;
    1d78:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
			NRF_RNG->TASKS_STOP = 1;
    1d7c:	bf1c      	itt	ne
    1d7e:	2201      	movne	r2, #1
    1d80:	605a      	strne	r2, [r3, #4]
    1d82:	bd38      	pop	{r3, r4, r5, pc}
    1d84:	4000d000 	.word	0x4000d000

00001d88 <entropy_nrf5_get_entropy>:
{
    1d88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
    1d8c:	6885      	ldr	r5, [r0, #8]
{
    1d8e:	460f      	mov	r7, r1
    1d90:	4614      	mov	r4, r2
				k_sem_take(&dev_data->sem_sync, K_FOREVER);
    1d92:	f105 0818 	add.w	r8, r5, #24
	while (len) {
    1d96:	b914      	cbnz	r4, 1d9e <entropy_nrf5_get_entropy+0x16>
}
    1d98:	4620      	mov	r0, r4
    1d9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1d9e:	2cff      	cmp	r4, #255	; 0xff
    1da0:	4623      	mov	r3, r4
    1da2:	bf28      	it	cs
    1da4:	23ff      	movcs	r3, #255	; 0xff
		len -= len8;
    1da6:	1ae4      	subs	r4, r4, r3
    1da8:	b2de      	uxtb	r6, r3
    1daa:	b2a4      	uxth	r4, r4
			len8 = get((struct rand *)dev_data->thr, len8, buf);
    1dac:	f105 0930 	add.w	r9, r5, #48	; 0x30
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    1db0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    1db4:	4628      	mov	r0, r5
    1db6:	f00a fa75 	bl	c2a4 <_impl_k_sem_take>
    1dba:	4631      	mov	r1, r6
    1dbc:	463a      	mov	r2, r7
    1dbe:	4648      	mov	r0, r9
    1dc0:	f7ff fefa 	bl	1bb8 <get>
    1dc4:	4606      	mov	r6, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    1dc6:	4628      	mov	r0, r5
    1dc8:	f00a fa0c 	bl	c1e4 <_impl_k_sem_give>
			if (len8) {
    1dcc:	2e00      	cmp	r6, #0
    1dce:	d0e2      	beq.n	1d96 <entropy_nrf5_get_entropy+0xe>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    1dd0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    1dd4:	4640      	mov	r0, r8
    1dd6:	f00a fa65 	bl	c2a4 <_impl_k_sem_take>
    1dda:	e7e9      	b.n	1db0 <entropy_nrf5_get_entropy+0x28>

00001ddc <entropy_get_entropy_isr>:

u8_t entropy_get_entropy_isr(struct device *dev, u8_t *buf, u8_t len)
{
    1ddc:	4613      	mov	r3, r2
	ARG_UNUSED(dev);
	return get((struct rand *)entropy_nrf5_data.isr, len, buf);
    1dde:	4802      	ldr	r0, [pc, #8]	; (1de8 <entropy_get_entropy_isr+0xc>)
    1de0:	460a      	mov	r2, r1
    1de2:	4619      	mov	r1, r3
    1de4:	f7ff bee8 	b.w	1bb8 <get>
    1de8:	20000468 	.word	0x20000468

00001dec <rtc_compare_set>:
static void rtc_compare_set(u32_t rtc_ticks)
{
	u32_t rtc_now;

	/* Try to set CC value. We assume the procedure is always successful. */
	RTC_CC_VALUE = rtc_ticks;
    1dec:	4b08      	ldr	r3, [pc, #32]	; (1e10 <rtc_compare_set+0x24>)
    1dee:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
	rtc_now = RTC_COUNTER;
    1df2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	 * by checking if the unsigned subtraction wraps around.
	 * If either of the above are true then instead of waiting for the CC
	 * event to trigger in the form of an interrupt, trigger it directly
	 * using the NVIC.
	 */
	if ((((rtc_ticks - rtc_now) & RTC_MASK) < RTC_MIN_DELTA) ||
    1df6:	1ac0      	subs	r0, r0, r3
    1df8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1dfc:	4b05      	ldr	r3, [pc, #20]	; (1e14 <rtc_compare_set+0x28>)
    1dfe:	3802      	subs	r0, #2
    1e00:	4298      	cmp	r0, r3
    1e02:	bf82      	ittt	hi
    1e04:	4b04      	ldrhi	r3, [pc, #16]	; (1e18 <rtc_compare_set+0x2c>)
    1e06:	f44f 3200 	movhi.w	r2, #131072	; 0x20000
    1e0a:	f8c3 2100 	strhi.w	r2, [r3, #256]	; 0x100
    1e0e:	4770      	bx	lr
    1e10:	40011000 	.word	0x40011000
    1e14:	007ffffd 	.word	0x007ffffd
    1e18:	e000e100 	.word	0xe000e100

00001e1c <rtc_announce_set_next>:
 * Since this function can be preempted, we need to take some provisions to
 * announce all expected sys ticks that have passed.
 *
 */
static void rtc_announce_set_next(void)
{
    1e1c:	b510      	push	{r4, lr}

	/* Read the RTC counter one single time in the beginning, so that an
	 * increase in the counter during this procedure leads to no race
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;
    1e1e:	4b12      	ldr	r3, [pc, #72]	; (1e68 <rtc_announce_set_next+0x4c>)

	/* Calculate how many RTC ticks elapsed since the last sys tick. */
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    1e20:	4c12      	ldr	r4, [pc, #72]	; (1e6c <rtc_announce_set_next+0x50>)
	rtc_now = RTC_COUNTER;
    1e22:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    1e26:	6822      	ldr	r2, [r4, #0]
    1e28:	1a80      	subs	r0, r0, r2
    1e2a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	/* If no sys ticks have elapsed, there is no point in incrementing the
	 * counters or announcing it.
	 */
	if (rtc_elapsed >= RTC_TICKS_PER_SYS_TICK) {
    1e2e:	f5b0 7fa3 	cmp.w	r0, #326	; 0x146
    1e32:	d911      	bls.n	1e58 <rtc_announce_set_next+0x3c>
		/* Calculate how many sys ticks elapsed since the last sys tick
		 * and notify the kernel if necessary.
		 */
		sys_elapsed = rtc_elapsed / RTC_TICKS_PER_SYS_TICK;

		if (sys_elapsed > expected_sys_ticks) {
    1e34:	490e      	ldr	r1, [pc, #56]	; (1e70 <rtc_announce_set_next+0x54>)
    1e36:	6809      	ldr	r1, [r1, #0]
		sys_elapsed = rtc_elapsed / RTC_TICKS_PER_SYS_TICK;
    1e38:	f240 1347 	movw	r3, #327	; 0x147
    1e3c:	fbb0 f0f3 	udiv	r0, r0, r3
    1e40:	4288      	cmp	r0, r1
    1e42:	bf28      	it	cs
    1e44:	4608      	movcs	r0, r1

		/* Store RTC_COUNTER floored to the last sys tick. This is
		 * done, so that ISR can properly calculate that 1 sys tick
		 * has passed.
		 */
		rtc_past = (rtc_past +
    1e46:	fb03 2300 	mla	r3, r3, r0, r2
				(sys_elapsed * RTC_TICKS_PER_SYS_TICK)
			   ) & RTC_MASK;
    1e4a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		rtc_past = (rtc_past +
    1e4e:	6023      	str	r3, [r4, #0]

		_sys_idle_elapsed_ticks = sys_elapsed;
    1e50:	4b08      	ldr	r3, [pc, #32]	; (1e74 <rtc_announce_set_next+0x58>)
    1e52:	6018      	str	r0, [r3, #0]
		_sys_clock_tick_announce();
    1e54:	f00a fa68 	bl	c328 <_nano_sys_clock_tick_announce>
	}

	/* Set the RTC to the next sys tick */
	rtc_compare_set(rtc_past + RTC_TICKS_PER_SYS_TICK);
    1e58:	6820      	ldr	r0, [r4, #0]
}
    1e5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rtc_compare_set(rtc_past + RTC_TICKS_PER_SYS_TICK);
    1e5e:	f200 1047 	addw	r0, r0, #327	; 0x147
    1e62:	f7ff bfc3 	b.w	1dec <rtc_compare_set>
    1e66:	bf00      	nop
    1e68:	40011000 	.word	0x40011000
    1e6c:	20000480 	.word	0x20000480
    1e70:	2000047c 	.word	0x2000047c
    1e74:	20004e64 	.word	0x20004e64

00001e78 <rtc1_nrf5_isr>:
 */
static void rtc1_nrf5_isr(void *arg)
{

	ARG_UNUSED(arg);
	RTC_CC_EVENT = 0;
    1e78:	4b02      	ldr	r3, [pc, #8]	; (1e84 <rtc1_nrf5_isr+0xc>)
    1e7a:	2200      	movs	r2, #0
    1e7c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	 */
	expected_sys_ticks = 0;
	/* Anounce elapsed of _sys_idle_elapsed_ticks systicks*/
	_sys_clock_tick_announce();
#else
	rtc_announce_set_next();
    1e80:	f7ff bfcc 	b.w	1e1c <rtc_announce_set_next>
    1e84:	40011000 	.word	0x40011000

00001e88 <_timer_idle_enter>:
	if ((sys_ticks < 0) ||
    1e88:	f246 4335 	movw	r3, #25653	; 0x6435
		sys_ticks = RTC_HALF / RTC_TICKS_PER_SYS_TICK;
    1e8c:	4298      	cmp	r0, r3
    1e8e:	bf28      	it	cs
    1e90:	4618      	movcs	r0, r3
	expected_sys_ticks = sys_ticks;
    1e92:	4b05      	ldr	r3, [pc, #20]	; (1ea8 <_timer_idle_enter+0x20>)
    1e94:	6018      	str	r0, [r3, #0]
	rtc_compare_set(rtc_past + (sys_ticks * RTC_TICKS_PER_SYS_TICK));
    1e96:	4b05      	ldr	r3, [pc, #20]	; (1eac <_timer_idle_enter+0x24>)
    1e98:	681b      	ldr	r3, [r3, #0]
    1e9a:	f240 1247 	movw	r2, #327	; 0x147
    1e9e:	fb02 3000 	mla	r0, r2, r0, r3
    1ea2:	f7ff bfa3 	b.w	1dec <rtc_compare_set>
    1ea6:	bf00      	nop
    1ea8:	2000047c 	.word	0x2000047c
    1eac:	20000480 	.word	0x20000480

00001eb0 <_timer_idle_exit>:
{
    1eb0:	b508      	push	{r3, lr}
	RTC_CC_EVENT = 0;
    1eb2:	4b07      	ldr	r3, [pc, #28]	; (1ed0 <_timer_idle_exit+0x20>)
    1eb4:	2200      	movs	r2, #0
    1eb6:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1eba:	4b06      	ldr	r3, [pc, #24]	; (1ed4 <_timer_idle_exit+0x24>)
    1ebc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1ec0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	rtc_announce_set_next();
    1ec4:	f7ff ffaa 	bl	1e1c <rtc_announce_set_next>
	expected_sys_ticks = 1;
    1ec8:	4b03      	ldr	r3, [pc, #12]	; (1ed8 <_timer_idle_exit+0x28>)
    1eca:	2201      	movs	r2, #1
    1ecc:	601a      	str	r2, [r3, #0]
    1ece:	bd08      	pop	{r3, pc}
    1ed0:	40011000 	.word	0x40011000
    1ed4:	e000e100 	.word	0xe000e100
    1ed8:	2000047c 	.word	0x2000047c

00001edc <_sys_clock_driver_init>:
#endif

}

int _sys_clock_driver_init(struct device *device)
{
    1edc:	b570      	push	{r4, r5, r6, lr}
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    1ede:	4818      	ldr	r0, [pc, #96]	; (1f40 <_sys_clock_driver_init+0x64>)
    1ee0:	f009 fd72 	bl	b9c8 <device_get_binding>
	if (!clock) {
    1ee4:	b348      	cbz	r0, 1f3a <_sys_clock_driver_init+0x5e>
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->on(dev, sys);
    1ee6:	6843      	ldr	r3, [r0, #4]
#ifdef CONFIG_TICKLESS_IDLE
	expected_sys_ticks = 1;
#endif /* CONFIG_TICKLESS_IDLE */

	/* TODO: replace with counter driver to access RTC */
	SYS_CLOCK_RTC->PRESCALER = 0;
    1ee8:	4d16      	ldr	r5, [pc, #88]	; (1f44 <_sys_clock_driver_init+0x68>)
    1eea:	681b      	ldr	r3, [r3, #0]
    1eec:	2101      	movs	r1, #1
    1eee:	4798      	blx	r3
	rtc_past = 0;
    1ef0:	4b15      	ldr	r3, [pc, #84]	; (1f48 <_sys_clock_driver_init+0x6c>)
    1ef2:	2400      	movs	r4, #0
    1ef4:	601c      	str	r4, [r3, #0]
	expected_sys_ticks = 1;
    1ef6:	4b15      	ldr	r3, [pc, #84]	; (1f4c <_sys_clock_driver_init+0x70>)
    1ef8:	2601      	movs	r6, #1
    1efa:	601e      	str	r6, [r3, #0]
	SYS_CLOCK_RTC->CC[0] = RTC_TICKS_PER_SYS_TICK;
    1efc:	f240 1347 	movw	r3, #327	; 0x147
	SYS_CLOCK_RTC->PRESCALER = 0;
    1f00:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
	SYS_CLOCK_RTC->CC[0] = RTC_TICKS_PER_SYS_TICK;
    1f04:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
	SYS_CLOCK_RTC->EVTENSET = RTC_EVTENSET_COMPARE0_Msk;
    1f08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    1f0c:	f8c5 3344 	str.w	r3, [r5, #836]	; 0x344
	SYS_CLOCK_RTC->INTENSET = RTC_INTENSET_COMPARE0_Msk;
    1f10:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    1f14:	4b0e      	ldr	r3, [pc, #56]	; (1f50 <_sys_clock_driver_init+0x74>)

	/* Clear the event flag and possible pending interrupt */
	RTC_CC_EVENT = 0;
    1f16:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    1f1a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1f1e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ClearPendingIRQ(NRF5_IRQ_RTC1_IRQn);

	IRQ_CONNECT(NRF5_IRQ_RTC1_IRQn, 1, rtc1_nrf5_isr, 0, 0);
    1f22:	4631      	mov	r1, r6
    1f24:	4622      	mov	r2, r4
    1f26:	2011      	movs	r0, #17
    1f28:	f7fe fecc 	bl	cc4 <_irq_priority_set>
	irq_enable(NRF5_IRQ_RTC1_IRQn);
    1f2c:	2011      	movs	r0, #17
    1f2e:	f7fe fe97 	bl	c60 <_arch_irq_enable>

	SYS_CLOCK_RTC->TASKS_CLEAR = 1;
    1f32:	60ae      	str	r6, [r5, #8]
	SYS_CLOCK_RTC->TASKS_START = 1;

	return 0;
    1f34:	4620      	mov	r0, r4
	SYS_CLOCK_RTC->TASKS_START = 1;
    1f36:	602e      	str	r6, [r5, #0]
	return 0;
    1f38:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    1f3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    1f3e:	bd70      	pop	{r4, r5, r6, pc}
    1f40:	0000d22c 	.word	0x0000d22c
    1f44:	40011000 	.word	0x40011000
    1f48:	20000480 	.word	0x20000480
    1f4c:	2000047c 	.word	0x2000047c
    1f50:	e000e100 	.word	0xe000e100

00001f54 <_timer_cycle_get_32>:

u32_t _timer_cycle_get_32(void)
{
    1f54:	b530      	push	{r4, r5, lr}
	u32_t elapsed_cycles;
	u32_t sys_clock_tick_count;
	u32_t rtc_prev;
	u32_t rtc_now;

	rtc_now = RTC_COUNTER;
    1f56:	4a0b      	ldr	r2, [pc, #44]	; (1f84 <_timer_cycle_get_32+0x30>)
	/* Discard value of  RTC_COUNTER read at LFCLK transition */
	do {
		sys_clock_tick_count = _sys_clock_tick_count;
    1f58:	480b      	ldr	r0, [pc, #44]	; (1f88 <_timer_cycle_get_32+0x34>)
	rtc_now = RTC_COUNTER;
    1f5a:	f8d2 1504 	ldr.w	r1, [r2, #1284]	; 0x504
		sys_clock_tick_count = _sys_clock_tick_count;
    1f5e:	e9d0 4500 	ldrd	r4, r5, [r0]
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
					     RTC_TICKS_PER_SYS_TICK)) &
				 RTC_MASK;
		rtc_prev = rtc_now;
		rtc_now = RTC_COUNTER;
    1f62:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	} while (rtc_now != rtc_prev);
    1f66:	4299      	cmp	r1, r3
    1f68:	d10a      	bne.n	1f80 <_timer_cycle_get_32+0x2c>

	return (sys_clock_tick_count * sys_clock_hw_cycles_per_tick) +
    1f6a:	4a08      	ldr	r2, [pc, #32]	; (1f8c <_timer_cycle_get_32+0x38>)
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
    1f6c:	f240 1347 	movw	r3, #327	; 0x147
    1f70:	fb03 1314 	mls	r3, r3, r4, r1
	return (sys_clock_tick_count * sys_clock_hw_cycles_per_tick) +
    1f74:	6810      	ldr	r0, [r2, #0]
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
    1f76:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	       elapsed_cycles;
}
    1f7a:	fb00 3004 	mla	r0, r0, r4, r3
    1f7e:	bd30      	pop	{r4, r5, pc}
    1f80:	4619      	mov	r1, r3
    1f82:	e7ec      	b.n	1f5e <_timer_cycle_get_32+0xa>
    1f84:	40011000 	.word	0x40011000
    1f88:	20002c38 	.word	0x20002c38
    1f8c:	20004e68 	.word	0x20004e68

00001f90 <bt_hex>:
#include <misc/util.h>
#include <bluetooth/bluetooth.h>
#include <bluetooth/hci.h>

const char *bt_hex(const void *buf, size_t len)
{
    1f90:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
    1f92:	f04f 0320 	mov.w	r3, #32
    1f96:	f3ef 8511 	mrs	r5, BASEPRI
    1f9a:	f383 8811 	msr	BASEPRI, r3
	unsigned int mask;
	char *str;
	int i;

	mask = irq_lock();
	str = hexbufs[curbuf++];
    1f9e:	4c14      	ldr	r4, [pc, #80]	; (1ff0 <bt_hex+0x60>)
    1fa0:	4e14      	ldr	r6, [pc, #80]	; (1ff4 <bt_hex+0x64>)
    1fa2:	7823      	ldrb	r3, [r4, #0]
    1fa4:	eb03 12c3 	add.w	r2, r3, r3, lsl #7
    1fa8:	3301      	adds	r3, #1
	curbuf %= ARRAY_SIZE(hexbufs);
    1faa:	f003 0303 	and.w	r3, r3, #3
	str = hexbufs[curbuf++];
    1fae:	4432      	add	r2, r6
	curbuf %= ARRAY_SIZE(hexbufs);
    1fb0:	7023      	strb	r3, [r4, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1fb2:	f385 8811 	msr	BASEPRI, r5
	irq_unlock(mask);

	len = min(len, (sizeof(hexbufs[0]) - 1) / 2);
    1fb6:	2940      	cmp	r1, #64	; 0x40
    1fb8:	bf28      	it	cs
    1fba:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    1fbc:	4d0e      	ldr	r5, [pc, #56]	; (1ff8 <bt_hex+0x68>)
    1fbe:	3801      	subs	r0, #1
    1fc0:	4613      	mov	r3, r2
    1fc2:	eb02 0641 	add.w	r6, r2, r1, lsl #1
	for (i = 0; i < len; i++) {
    1fc6:	42b3      	cmp	r3, r6
    1fc8:	d104      	bne.n	1fd4 <bt_hex+0x44>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    1fca:	2300      	movs	r3, #0
    1fcc:	f802 3011 	strb.w	r3, [r2, r1, lsl #1]

	return str;
}
    1fd0:	4610      	mov	r0, r2
    1fd2:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    1fd4:	7844      	ldrb	r4, [r0, #1]
    1fd6:	0924      	lsrs	r4, r4, #4
    1fd8:	3302      	adds	r3, #2
    1fda:	5d2c      	ldrb	r4, [r5, r4]
    1fdc:	f803 4c02 	strb.w	r4, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    1fe0:	f810 4f01 	ldrb.w	r4, [r0, #1]!
    1fe4:	f004 040f 	and.w	r4, r4, #15
    1fe8:	5d2c      	ldrb	r4, [r5, r4]
    1fea:	f803 4c01 	strb.w	r4, [r3, #-1]
    1fee:	e7ea      	b.n	1fc6 <bt_hex+0x36>
    1ff0:	200004e0 	.word	0x200004e0
    1ff4:	200004e1 	.word	0x200004e1
    1ff8:	0000d341 	.word	0x0000d341

00001ffc <bt_addr_str>:

#if defined(CONFIG_BT_DEBUG)
const char *bt_addr_str(const bt_addr_t *addr)
{
    1ffc:	b510      	push	{r4, lr}
	static char bufs[2][BT_ADDR_STR_LEN];
	static u8_t cur;
	char *str;

	str = bufs[cur++];
    1ffe:	4a0f      	ldr	r2, [pc, #60]	; (203c <bt_addr_str+0x40>)
    2000:	4c0f      	ldr	r4, [pc, #60]	; (2040 <bt_addr_str+0x44>)
    2002:	7813      	ldrb	r3, [r2, #0]
    2004:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
    2008:	3301      	adds	r3, #1
{
    200a:	b086      	sub	sp, #24
	cur %= ARRAY_SIZE(bufs);
    200c:	f003 0301 	and.w	r3, r3, #1
    2010:	7013      	strb	r3, [r2, #0]
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_to_str(const bt_addr_t *addr, char *str, size_t len)
{
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X",
    2012:	7802      	ldrb	r2, [r0, #0]
    2014:	7943      	ldrb	r3, [r0, #5]
    2016:	9204      	str	r2, [sp, #16]
    2018:	7842      	ldrb	r2, [r0, #1]
    201a:	9203      	str	r2, [sp, #12]
    201c:	7882      	ldrb	r2, [r0, #2]
    201e:	9202      	str	r2, [sp, #8]
    2020:	78c2      	ldrb	r2, [r0, #3]
    2022:	9201      	str	r2, [sp, #4]
	str = bufs[cur++];
    2024:	eb04 0441 	add.w	r4, r4, r1, lsl #1
    2028:	7902      	ldrb	r2, [r0, #4]
    202a:	9200      	str	r2, [sp, #0]
    202c:	2112      	movs	r1, #18
    202e:	4a05      	ldr	r2, [pc, #20]	; (2044 <bt_addr_str+0x48>)
    2030:	4620      	mov	r0, r4
    2032:	f7ff f97d 	bl	1330 <snprintk>
	bt_addr_to_str(addr, str, sizeof(bufs[cur]));

	return str;
}
    2036:	4620      	mov	r0, r4
    2038:	b006      	add	sp, #24
    203a:	bd10      	pop	{r4, pc}
    203c:	200004de 	.word	0x200004de
    2040:	20000484 	.word	0x20000484
    2044:	0000d323 	.word	0x0000d323

00002048 <bt_addr_le_str>:

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
    2048:	b570      	push	{r4, r5, r6, lr}
	static char bufs[2][BT_ADDR_LE_STR_LEN];
	static u8_t cur;
	char *str;

	str = bufs[cur++];
    204a:	4a1d      	ldr	r2, [pc, #116]	; (20c0 <bt_addr_le_str+0x78>)
    204c:	491d      	ldr	r1, [pc, #116]	; (20c4 <bt_addr_le_str+0x7c>)
    204e:	7813      	ldrb	r3, [r2, #0]
    2050:	eb03 0643 	add.w	r6, r3, r3, lsl #1
    2054:	3301      	adds	r3, #1
	cur %= ARRAY_SIZE(bufs);
    2056:	f003 0301 	and.w	r3, r3, #1
    205a:	7013      	strb	r3, [r2, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    205c:	7803      	ldrb	r3, [r0, #0]
{
    205e:	b08a      	sub	sp, #40	; 0x28
	str = bufs[cur++];
    2060:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
{
    2064:	4604      	mov	r4, r0
	str = bufs[cur++];
    2066:	440e      	add	r6, r1
    2068:	ad07      	add	r5, sp, #28
    206a:	2b03      	cmp	r3, #3
    206c:	d821      	bhi.n	20b2 <bt_addr_le_str+0x6a>
    206e:	e8df f003 	tbb	[pc, r3]
    2072:	1a02      	.short	0x1a02
    2074:	1e1c      	.short	0x1e1c
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    2076:	4914      	ldr	r1, [pc, #80]	; (20c8 <bt_addr_le_str+0x80>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    2078:	4628      	mov	r0, r5
    207a:	f7fe fa91 	bl	5a0 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    207e:	7862      	ldrb	r2, [r4, #1]
    2080:	9204      	str	r2, [sp, #16]
    2082:	78a2      	ldrb	r2, [r4, #2]
    2084:	9203      	str	r2, [sp, #12]
    2086:	78e2      	ldrb	r2, [r4, #3]
    2088:	9202      	str	r2, [sp, #8]
    208a:	7922      	ldrb	r2, [r4, #4]
    208c:	9201      	str	r2, [sp, #4]
    208e:	7962      	ldrb	r2, [r4, #5]
    2090:	9200      	str	r2, [sp, #0]
    2092:	79a3      	ldrb	r3, [r4, #6]
    2094:	9505      	str	r5, [sp, #20]
    2096:	4a0d      	ldr	r2, [pc, #52]	; (20cc <bt_addr_le_str+0x84>)
    2098:	211b      	movs	r1, #27
    209a:	4630      	mov	r0, r6
    209c:	f7ff f948 	bl	1330 <snprintk>
	bt_addr_le_to_str(addr, str, sizeof(bufs[cur]));

	return str;
}
    20a0:	4630      	mov	r0, r6
    20a2:	b00a      	add	sp, #40	; 0x28
    20a4:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    20a6:	490a      	ldr	r1, [pc, #40]	; (20d0 <bt_addr_le_str+0x88>)
    20a8:	e7e6      	b.n	2078 <bt_addr_le_str+0x30>
		strcpy(type, "public id");
    20aa:	490a      	ldr	r1, [pc, #40]	; (20d4 <bt_addr_le_str+0x8c>)
    20ac:	e7e4      	b.n	2078 <bt_addr_le_str+0x30>
		strcpy(type, "random id");
    20ae:	490a      	ldr	r1, [pc, #40]	; (20d8 <bt_addr_le_str+0x90>)
    20b0:	e7e2      	b.n	2078 <bt_addr_le_str+0x30>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    20b2:	4a0a      	ldr	r2, [pc, #40]	; (20dc <bt_addr_le_str+0x94>)
    20b4:	210a      	movs	r1, #10
    20b6:	4628      	mov	r0, r5
    20b8:	f7ff f93a 	bl	1330 <snprintk>
    20bc:	e7df      	b.n	207e <bt_addr_le_str+0x36>
    20be:	bf00      	nop
    20c0:	200004df 	.word	0x200004df
    20c4:	200004a8 	.word	0x200004a8
    20c8:	0000d2de 	.word	0x0000d2de
    20cc:	0000d300 	.word	0x0000d300
    20d0:	0000d2e5 	.word	0x0000d2e5
    20d4:	0000d2ec 	.word	0x0000d2ec
    20d8:	0000d2f6 	.word	0x0000d2f6
    20dc:	0000e227 	.word	0x0000e227

000020e0 <bt_monitor_init>:
#if defined(CONFIG_HAS_DTS) && !defined(CONFIG_BT_MONITOR_ON_DEV_NAME)
#define CONFIG_BT_MONITOR_ON_DEV_NAME CONFIG_UART_CONSOLE_ON_DEV_NAME
#endif

static int bt_monitor_init(struct device *d)
{
    20e0:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	monitor_dev = device_get_binding(CONFIG_BT_MONITOR_ON_DEV_NAME);
    20e2:	4807      	ldr	r0, [pc, #28]	; (2100 <bt_monitor_init+0x20>)
	uart_irq_rx_disable(monitor_dev);
	uart_irq_tx_disable(monitor_dev);
#endif

#if !defined(CONFIG_UART_CONSOLE)
	__printk_hook_install(monitor_console_out);
    20e4:	4c07      	ldr	r4, [pc, #28]	; (2104 <bt_monitor_init+0x24>)
	monitor_dev = device_get_binding(CONFIG_BT_MONITOR_ON_DEV_NAME);
    20e6:	f009 fc6f 	bl	b9c8 <device_get_binding>
    20ea:	4b07      	ldr	r3, [pc, #28]	; (2108 <bt_monitor_init+0x28>)
    20ec:	6018      	str	r0, [r3, #0]
	__printk_hook_install(monitor_console_out);
    20ee:	4620      	mov	r0, r4
    20f0:	f7fe ffca 	bl	1088 <__printk_hook_install>
	__stdout_hook_install(monitor_console_out);
    20f4:	4620      	mov	r0, r4
    20f6:	f7fe fae3 	bl	6c0 <__stdout_hook_install>
#endif

	return 0;
}
    20fa:	2000      	movs	r0, #0
    20fc:	bd10      	pop	{r4, pc}
    20fe:	bf00      	nop
    2100:	0000d2b3 	.word	0x0000d2b3
    2104:	0000237d 	.word	0x0000237d
    2108:	20000784 	.word	0x20000784

0000210c <atomic_inc>:
}
    210c:	f3bf 8f5b 	dmb	ish
    2110:	e850 3f00 	ldrex	r3, [r0]
    2114:	1c5a      	adds	r2, r3, #1
    2116:	e840 2100 	strex	r1, r2, [r0]
    211a:	2900      	cmp	r1, #0
    211c:	d1f8      	bne.n	2110 <atomic_inc+0x4>
    211e:	f3bf 8f5b 	dmb	ish
    2122:	4618      	mov	r0, r3
    2124:	4770      	bx	lr

00002126 <encode_drops>:
{
    2126:	b510      	push	{r4, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2128:	2300      	movs	r3, #0
    212a:	f3bf 8f5b 	dmb	ish
    212e:	e852 4f00 	ldrex	r4, [r2]
    2132:	e842 3e00 	strex	lr, r3, [r2]
    2136:	f1be 0f00 	cmp.w	lr, #0
    213a:	d1f8      	bne.n	212e <encode_drops+0x8>
    213c:	f3bf 8f5b 	dmb	ish
	if (count) {
    2140:	b16c      	cbz	r4, 215e <encode_drops+0x38>
		hdr->ext[hdr->hdr_len++] = type;
    2142:	7943      	ldrb	r3, [r0, #5]
    2144:	18c2      	adds	r2, r0, r3
		hdr->ext[hdr->hdr_len++] = min(count, 255);
    2146:	2cff      	cmp	r4, #255	; 0xff
		hdr->ext[hdr->hdr_len++] = type;
    2148:	7191      	strb	r1, [r2, #6]
		hdr->ext[hdr->hdr_len++] = min(count, 255);
    214a:	f103 0202 	add.w	r2, r3, #2
		hdr->ext[hdr->hdr_len++] = type;
    214e:	f103 0301 	add.w	r3, r3, #1
		hdr->ext[hdr->hdr_len++] = min(count, 255);
    2152:	7142      	strb	r2, [r0, #5]
    2154:	fa50 f083 	uxtab	r0, r0, r3
    2158:	bfa8      	it	ge
    215a:	24ff      	movge	r4, #255	; 0xff
    215c:	7184      	strb	r4, [r0, #6]
    215e:	bd10      	pop	{r4, pc}

00002160 <encode_hdr>:
	hdr->flags    = 0;
    2160:	2300      	movs	r3, #0
{
    2162:	b570      	push	{r4, r5, r6, lr}
	hdr->flags    = 0;
    2164:	7103      	strb	r3, [r0, #4]
	ts->type = BT_MONITOR_TS32;
    2166:	2308      	movs	r3, #8
    2168:	7183      	strb	r3, [r0, #6]
	hdr->opcode   = sys_cpu_to_le16(opcode);
    216a:	8041      	strh	r1, [r0, #2]
{
    216c:	4604      	mov	r4, r0
    216e:	4616      	mov	r6, r2
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t);
    2170:	f00a f8ce 	bl	c310 <_impl_k_uptime_get>
	encode_drops(hdr, BT_MONITOR_COMMAND_DROPS, &drops.cmd);
    2174:	4d13      	ldr	r5, [pc, #76]	; (21c4 <encode_hdr+0x64>)
	ts->ts32 = sys_cpu_to_le32(k_uptime_get() * 10);
    2176:	230a      	movs	r3, #10
    2178:	4358      	muls	r0, r3
	hdr->hdr_len = sizeof(*ts);
    217a:	2305      	movs	r3, #5
    217c:	7163      	strb	r3, [r4, #5]
	ts->ts32 = sys_cpu_to_le32(k_uptime_get() * 10);
    217e:	f8c4 0007 	str.w	r0, [r4, #7]
	encode_drops(hdr, BT_MONITOR_COMMAND_DROPS, &drops.cmd);
    2182:	462a      	mov	r2, r5
    2184:	2101      	movs	r1, #1
    2186:	4620      	mov	r0, r4
    2188:	f7ff ffcd 	bl	2126 <encode_drops>
	encode_drops(hdr, BT_MONITOR_EVENT_DROPS, &drops.evt);
    218c:	1d2a      	adds	r2, r5, #4
    218e:	2102      	movs	r1, #2
    2190:	4620      	mov	r0, r4
    2192:	f7ff ffc8 	bl	2126 <encode_drops>
	encode_drops(hdr, BT_MONITOR_ACL_TX_DROPS, &drops.acl_tx);
    2196:	f105 0208 	add.w	r2, r5, #8
    219a:	2104      	movs	r1, #4
    219c:	4620      	mov	r0, r4
    219e:	f7ff ffc2 	bl	2126 <encode_drops>
	encode_drops(hdr, BT_MONITOR_ACL_RX_DROPS, &drops.acl_rx);
    21a2:	f105 020c 	add.w	r2, r5, #12
    21a6:	2103      	movs	r1, #3
    21a8:	4620      	mov	r0, r4
    21aa:	f7ff ffbc 	bl	2126 <encode_drops>
	encode_drops(hdr, BT_MONITOR_OTHER_DROPS, &drops.other);
    21ae:	f105 0210 	add.w	r2, r5, #16
    21b2:	2107      	movs	r1, #7
    21b4:	4620      	mov	r0, r4
    21b6:	f7ff ffb6 	bl	2126 <encode_drops>
	hdr->data_len = sys_cpu_to_le16(4 + hdr->hdr_len + len);
    21ba:	7962      	ldrb	r2, [r4, #5]
    21bc:	3604      	adds	r6, #4
    21be:	4432      	add	r2, r6
    21c0:	8022      	strh	r2, [r4, #0]
    21c2:	bd70      	pop	{r4, r5, r6, pc}
    21c4:	20000768 	.word	0x20000768

000021c8 <monitor_send>:
{
    21c8:	b570      	push	{r4, r5, r6, lr}
		uart_poll_out(monitor_dev, *buf++);
    21ca:	4e06      	ldr	r6, [pc, #24]	; (21e4 <monitor_send+0x1c>)
    21cc:	1845      	adds	r5, r0, r1
	const u8_t *buf = data;
    21ce:	4604      	mov	r4, r0
	while (len--) {
    21d0:	42ac      	cmp	r4, r5
    21d2:	d100      	bne.n	21d6 <monitor_send+0xe>
}
    21d4:	bd70      	pop	{r4, r5, r6, pc}
		uart_poll_out(monitor_dev, *buf++);
    21d6:	6830      	ldr	r0, [r6, #0]
static inline unsigned char _impl_uart_poll_out(struct device *dev,
						unsigned char out_char)
{
	const struct uart_driver_api *api = dev->driver_api;

	return api->poll_out(dev, out_char);
    21d8:	f814 1b01 	ldrb.w	r1, [r4], #1
    21dc:	6843      	ldr	r3, [r0, #4]
    21de:	685b      	ldr	r3, [r3, #4]
    21e0:	4798      	blx	r3
    21e2:	e7f5      	b.n	21d0 <monitor_send+0x8>
    21e4:	20000784 	.word	0x20000784

000021e8 <log_out>:
{
    21e8:	b508      	push	{r3, lr}
	uart_poll_out(monitor_dev, c);
    21ea:	4b04      	ldr	r3, [pc, #16]	; (21fc <log_out+0x14>)
    21ec:	681b      	ldr	r3, [r3, #0]
    21ee:	685a      	ldr	r2, [r3, #4]
    21f0:	b2c1      	uxtb	r1, r0
    21f2:	6852      	ldr	r2, [r2, #4]
    21f4:	4618      	mov	r0, r3
    21f6:	4790      	blx	r2
}
    21f8:	2000      	movs	r0, #0
    21fa:	bd08      	pop	{r3, pc}
    21fc:	20000784 	.word	0x20000784

00002200 <bt_log>:
{
    2200:	b40e      	push	{r1, r2, r3}
    2202:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2206:	b08b      	sub	sp, #44	; 0x2c
    2208:	ac11      	add	r4, sp, #68	; 0x44
	const char id[] = "bt";
    220a:	4b2f      	ldr	r3, [pc, #188]	; (22c8 <bt_log+0xc8>)
{
    220c:	f854 8b04 	ldr.w	r8, [r4], #4
	const char id[] = "bt";
    2210:	881a      	ldrh	r2, [r3, #0]
    2212:	789b      	ldrb	r3, [r3, #2]
    2214:	f8ad 2008 	strh.w	r2, [sp, #8]
	len = vsnprintk(NULL, 0, fmt, ap);
    2218:	2100      	movs	r1, #0
	const char id[] = "bt";
    221a:	f88d 300a 	strb.w	r3, [sp, #10]
	len = vsnprintk(NULL, 0, fmt, ap);
    221e:	4642      	mov	r2, r8
{
    2220:	4605      	mov	r5, r0
	len = vsnprintk(NULL, 0, fmt, ap);
    2222:	4623      	mov	r3, r4
    2224:	4608      	mov	r0, r1
	va_start(ap, fmt);
    2226:	9403      	str	r4, [sp, #12]
	len = vsnprintk(NULL, 0, fmt, ap);
    2228:	f7ff f89e 	bl	1368 <vsnprintk>
	if (len < 0) {
    222c:	1e02      	subs	r2, r0, #0
    222e:	db17      	blt.n	2260 <bt_log+0x60>
	log.priority = prio;
    2230:	f88d 5004 	strb.w	r5, [sp, #4]
	log.ident_len = sizeof(id);
    2234:	2703      	movs	r7, #3
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2236:	4d25      	ldr	r5, [pc, #148]	; (22cc <bt_log+0xcc>)
    2238:	f88d 7005 	strb.w	r7, [sp, #5]
    223c:	f3bf 8f5b 	dmb	ish
    2240:	e855 6f00 	ldrex	r6, [r5]
    2244:	f046 0301 	orr.w	r3, r6, #1
    2248:	e845 3100 	strex	r1, r3, [r5]
    224c:	2900      	cmp	r1, #0
    224e:	d1f7      	bne.n	2240 <bt_log+0x40>
    2250:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(&flags, BT_LOG_BUSY)) {
    2254:	f016 0601 	ands.w	r6, r6, #1
    2258:	d007      	beq.n	226a <bt_log+0x6a>
		atomic_inc(&drops.other);
    225a:	481d      	ldr	r0, [pc, #116]	; (22d0 <bt_log+0xd0>)
    225c:	f7ff ff56 	bl	210c <atomic_inc>
}
    2260:	b00b      	add	sp, #44	; 0x2c
    2262:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2266:	b003      	add	sp, #12
    2268:	4770      	bx	lr
	encode_hdr(&hdr, BT_MONITOR_USER_LOGGING,
    226a:	3206      	adds	r2, #6
    226c:	b292      	uxth	r2, r2
    226e:	210d      	movs	r1, #13
    2270:	a804      	add	r0, sp, #16
    2272:	f7ff ff75 	bl	2160 <encode_hdr>
	monitor_send(&hdr, BT_MONITOR_BASE_HDR_LEN + hdr.hdr_len);
    2276:	f89d 1015 	ldrb.w	r1, [sp, #21]
    227a:	a804      	add	r0, sp, #16
    227c:	3106      	adds	r1, #6
    227e:	f7ff ffa3 	bl	21c8 <monitor_send>
	monitor_send(&log, sizeof(log));
    2282:	2102      	movs	r1, #2
    2284:	a801      	add	r0, sp, #4
    2286:	f7ff ff9f 	bl	21c8 <monitor_send>
	monitor_send(id, sizeof(id));
    228a:	4639      	mov	r1, r7
    228c:	a802      	add	r0, sp, #8
    228e:	f7ff ff9b 	bl	21c8 <monitor_send>
	_vprintk(log_out, NULL, fmt, ap);
    2292:	4623      	mov	r3, r4
    2294:	4642      	mov	r2, r8
    2296:	4631      	mov	r1, r6
    2298:	480e      	ldr	r0, [pc, #56]	; (22d4 <bt_log+0xd4>)
	va_start(ap, fmt);
    229a:	9403      	str	r4, [sp, #12]
	_vprintk(log_out, NULL, fmt, ap);
    229c:	f7fe fefa 	bl	1094 <_vprintk>
	uart_poll_out(monitor_dev, '\0');
    22a0:	4b0d      	ldr	r3, [pc, #52]	; (22d8 <bt_log+0xd8>)
    22a2:	6818      	ldr	r0, [r3, #0]
    22a4:	6843      	ldr	r3, [r0, #4]
    22a6:	4631      	mov	r1, r6
    22a8:	685b      	ldr	r3, [r3, #4]
    22aa:	4798      	blx	r3
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    22ac:	f3bf 8f5b 	dmb	ish
    22b0:	e855 3f00 	ldrex	r3, [r5]
    22b4:	f023 0301 	bic.w	r3, r3, #1
    22b8:	e845 3200 	strex	r2, r3, [r5]
    22bc:	2a00      	cmp	r2, #0
    22be:	d1f7      	bne.n	22b0 <bt_log+0xb0>
    22c0:	f3bf 8f5b 	dmb	ish
    22c4:	e7cc      	b.n	2260 <bt_log+0x60>
    22c6:	bf00      	nop
    22c8:	0000d352 	.word	0x0000d352
    22cc:	2000077c 	.word	0x2000077c
    22d0:	20000778 	.word	0x20000778
    22d4:	000021e9 	.word	0x000021e9
    22d8:	20000784 	.word	0x20000784

000022dc <bt_monitor_send>:
{
    22dc:	b570      	push	{r4, r5, r6, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    22de:	4c21      	ldr	r4, [pc, #132]	; (2364 <bt_monitor_send+0x88>)
    22e0:	f3bf 8f5b 	dmb	ish
    22e4:	b086      	sub	sp, #24
    22e6:	460e      	mov	r6, r1
    22e8:	4615      	mov	r5, r2
    22ea:	e854 3f00 	ldrex	r3, [r4]
    22ee:	f043 0201 	orr.w	r2, r3, #1
    22f2:	e844 2100 	strex	r1, r2, [r4]
    22f6:	2900      	cmp	r1, #0
    22f8:	d1f7      	bne.n	22ea <bt_monitor_send+0xe>
    22fa:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(&flags, BT_LOG_BUSY)) {
    22fe:	07db      	lsls	r3, r3, #31
    2300:	d513      	bpl.n	232a <bt_monitor_send+0x4e>
	switch (opcode) {
    2302:	3802      	subs	r0, #2
    2304:	2803      	cmp	r0, #3
    2306:	d80e      	bhi.n	2326 <bt_monitor_send+0x4a>
    2308:	e8df f000 	tbb	[pc, r0]
    230c:	0b090702 	.word	0x0b090702
		atomic_inc(&drops.cmd);
    2310:	4815      	ldr	r0, [pc, #84]	; (2368 <bt_monitor_send+0x8c>)
		atomic_inc(&drops.other);
    2312:	f7ff fefb 	bl	210c <atomic_inc>
}
    2316:	b006      	add	sp, #24
    2318:	bd70      	pop	{r4, r5, r6, pc}
		atomic_inc(&drops.evt);
    231a:	4814      	ldr	r0, [pc, #80]	; (236c <bt_monitor_send+0x90>)
    231c:	e7f9      	b.n	2312 <bt_monitor_send+0x36>
		atomic_inc(&drops.acl_tx);
    231e:	4814      	ldr	r0, [pc, #80]	; (2370 <bt_monitor_send+0x94>)
    2320:	e7f7      	b.n	2312 <bt_monitor_send+0x36>
		atomic_inc(&drops.acl_rx);
    2322:	4814      	ldr	r0, [pc, #80]	; (2374 <bt_monitor_send+0x98>)
    2324:	e7f5      	b.n	2312 <bt_monitor_send+0x36>
		atomic_inc(&drops.other);
    2326:	4814      	ldr	r0, [pc, #80]	; (2378 <bt_monitor_send+0x9c>)
    2328:	e7f3      	b.n	2312 <bt_monitor_send+0x36>
	encode_hdr(&hdr, opcode, len);
    232a:	b2aa      	uxth	r2, r5
    232c:	4601      	mov	r1, r0
    232e:	4668      	mov	r0, sp
    2330:	f7ff ff16 	bl	2160 <encode_hdr>
	monitor_send(&hdr, BT_MONITOR_BASE_HDR_LEN + hdr.hdr_len);
    2334:	f89d 1005 	ldrb.w	r1, [sp, #5]
    2338:	4668      	mov	r0, sp
    233a:	3106      	adds	r1, #6
    233c:	f7ff ff44 	bl	21c8 <monitor_send>
	monitor_send(data, len);
    2340:	4629      	mov	r1, r5
    2342:	4630      	mov	r0, r6
    2344:	f7ff ff40 	bl	21c8 <monitor_send>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2348:	f3bf 8f5b 	dmb	ish
    234c:	e854 3f00 	ldrex	r3, [r4]
    2350:	f023 0301 	bic.w	r3, r3, #1
    2354:	e844 3200 	strex	r2, r3, [r4]
    2358:	2a00      	cmp	r2, #0
    235a:	d1f7      	bne.n	234c <bt_monitor_send+0x70>
    235c:	f3bf 8f5b 	dmb	ish
    2360:	e7d9      	b.n	2316 <bt_monitor_send+0x3a>
    2362:	bf00      	nop
    2364:	2000077c 	.word	0x2000077c
    2368:	20000768 	.word	0x20000768
    236c:	2000076c 	.word	0x2000076c
    2370:	20000770 	.word	0x20000770
    2374:	20000774 	.word	0x20000774
    2378:	20000778 	.word	0x20000778

0000237c <monitor_console_out>:
{
    237c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    237e:	4b1f      	ldr	r3, [pc, #124]	; (23fc <monitor_console_out+0x80>)
    2380:	f3bf 8f5b 	dmb	ish
    2384:	4605      	mov	r5, r0
    2386:	e853 2f00 	ldrex	r2, [r3]
    238a:	f042 0102 	orr.w	r1, r2, #2
    238e:	e843 1000 	strex	r0, r1, [r3]
    2392:	2800      	cmp	r0, #0
    2394:	d1f7      	bne.n	2386 <monitor_console_out+0xa>
    2396:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(&flags, BT_CONSOLE_BUSY)) {
    239a:	f012 0f02 	tst.w	r2, #2
    239e:	461e      	mov	r6, r3
    23a0:	d115      	bne.n	23ce <monitor_console_out+0x52>
	if (c != '\n' && len < sizeof(buf) - 1) {
    23a2:	2d0a      	cmp	r5, #10
    23a4:	4c16      	ldr	r4, [pc, #88]	; (2400 <monitor_console_out+0x84>)
    23a6:	4917      	ldr	r1, [pc, #92]	; (2404 <monitor_console_out+0x88>)
    23a8:	d013      	beq.n	23d2 <monitor_console_out+0x56>
    23aa:	6822      	ldr	r2, [r4, #0]
    23ac:	2a7e      	cmp	r2, #126	; 0x7e
    23ae:	d810      	bhi.n	23d2 <monitor_console_out+0x56>
		buf[len++] = c;
    23b0:	1c50      	adds	r0, r2, #1
    23b2:	548d      	strb	r5, [r1, r2]
    23b4:	6020      	str	r0, [r4, #0]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    23b6:	f3bf 8f5b 	dmb	ish
    23ba:	e853 2f00 	ldrex	r2, [r3]
    23be:	f022 0202 	bic.w	r2, r2, #2
    23c2:	e843 2100 	strex	r1, r2, [r3]
    23c6:	2900      	cmp	r1, #0
    23c8:	d1f7      	bne.n	23ba <monitor_console_out+0x3e>
    23ca:	f3bf 8f5b 	dmb	ish
}
    23ce:	4628      	mov	r0, r5
    23d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	buf[len++] = '\0';
    23d2:	6823      	ldr	r3, [r4, #0]
    23d4:	2700      	movs	r7, #0
    23d6:	1c5a      	adds	r2, r3, #1
    23d8:	54cf      	strb	r7, [r1, r3]
	bt_monitor_send(BT_MONITOR_SYSTEM_NOTE, buf, len);
    23da:	200c      	movs	r0, #12
    23dc:	4909      	ldr	r1, [pc, #36]	; (2404 <monitor_console_out+0x88>)
	buf[len++] = '\0';
    23de:	6022      	str	r2, [r4, #0]
	bt_monitor_send(BT_MONITOR_SYSTEM_NOTE, buf, len);
    23e0:	f7ff ff7c 	bl	22dc <bt_monitor_send>
	len = 0;
    23e4:	6027      	str	r7, [r4, #0]
    23e6:	f3bf 8f5b 	dmb	ish
    23ea:	e856 3f00 	ldrex	r3, [r6]
    23ee:	f023 0302 	bic.w	r3, r3, #2
    23f2:	e846 3200 	strex	r2, r3, [r6]
    23f6:	2a00      	cmp	r2, #0
    23f8:	d0e7      	beq.n	23ca <monitor_console_out+0x4e>
    23fa:	e7f6      	b.n	23ea <monitor_console_out+0x6e>
    23fc:	2000077c 	.word	0x2000077c
    2400:	20000780 	.word	0x20000780
    2404:	200006e5 	.word	0x200006e5

00002408 <bt_monitor_new_index>:
{
    2408:	b530      	push	{r4, r5, lr}
    240a:	b085      	sub	sp, #20
    240c:	4615      	mov	r5, r2
    240e:	461c      	mov	r4, r3
	pkt.type = type;
    2410:	f88d 0000 	strb.w	r0, [sp]
	pkt.bus = bus;
    2414:	f88d 1001 	strb.w	r1, [sp, #1]
	memcpy(pkt.bdaddr, addr, 6);
    2418:	2206      	movs	r2, #6
    241a:	4629      	mov	r1, r5
    241c:	f10d 0002 	add.w	r0, sp, #2
    2420:	f7fe f8fb 	bl	61a <memcpy>
	strncpy(pkt.name, name, sizeof(pkt.name) - 1);
    2424:	4621      	mov	r1, r4
    2426:	2207      	movs	r2, #7
    2428:	a802      	add	r0, sp, #8
    242a:	f7fe f8c3 	bl	5b4 <strncpy>
	pkt.name[sizeof(pkt.name) - 1] = '\0';
    242e:	2000      	movs	r0, #0
	bt_monitor_send(BT_MONITOR_NEW_INDEX, &pkt, sizeof(pkt));
    2430:	2210      	movs	r2, #16
    2432:	4669      	mov	r1, sp
	pkt.name[sizeof(pkt.name) - 1] = '\0';
    2434:	f88d 000f 	strb.w	r0, [sp, #15]
	bt_monitor_send(BT_MONITOR_NEW_INDEX, &pkt, sizeof(pkt));
    2438:	f7ff ff50 	bl	22dc <bt_monitor_send>
}
    243c:	b005      	add	sp, #20
    243e:	bd30      	pop	{r4, r5, pc}

00002440 <ver_str>:
	return 0;
}

#if defined(CONFIG_BT_DEBUG)
static const char *ver_str(u8_t ver)
{
    2440:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
    2442:	4d0b      	ldr	r5, [pc, #44]	; (2470 <ver_str+0x30>)
{
    2444:	4606      	mov	r6, r0
	const char * const str[] = {
    2446:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    2448:	b08a      	sub	sp, #40	; 0x28
	const char * const str[] = {
    244a:	466c      	mov	r4, sp
    244c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    244e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2450:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2452:	e895 0003 	ldmia.w	r5, {r0, r1}
		"1.0b", "1.1", "1.2", "2.0", "2.1", "3.0", "4.0", "4.1", "4.2",
		"5.0",
	};

	if (ver < ARRAY_SIZE(str)) {
    2456:	2e09      	cmp	r6, #9
	const char * const str[] = {
    2458:	e884 0003 	stmia.w	r4, {r0, r1}
		return str[ver];
    245c:	bf9b      	ittet	ls
    245e:	ab0a      	addls	r3, sp, #40	; 0x28
    2460:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	}

	return "unknown";
    2464:	4803      	ldrhi	r0, [pc, #12]	; (2474 <ver_str+0x34>)
		return str[ver];
    2466:	f856 0c28 	ldrls.w	r0, [r6, #-40]
}
    246a:	b00a      	add	sp, #40	; 0x28
    246c:	bd70      	pop	{r4, r5, r6, pc}
    246e:	bf00      	nop
    2470:	0000ccb8 	.word	0x0000ccb8
    2474:	0000defc 	.word	0x0000defc

00002478 <valid_adv_param>:



static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    2478:	7803      	ldrb	r3, [r0, #0]
    247a:	8842      	ldrh	r2, [r0, #2]
    247c:	f013 0301 	ands.w	r3, r3, #1
    2480:	d105      	bne.n	248e <valid_adv_param+0x16>
		 * BT Core 4.2 [Vol 2, Part E, 7.8.5]
		 * The Advertising_Interval_Min and Advertising_Interval_Max
		 * shall not be set to less than 0x00A0 (100 ms) if the
		 * Advertising_Type is set to ADV_SCAN_IND or ADV_NONCONN_IND.
		 */
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    2482:	4909      	ldr	r1, [pc, #36]	; (24a8 <valid_adv_param+0x30>)
    2484:	7b89      	ldrb	r1, [r1, #14]
    2486:	2908      	cmp	r1, #8
    2488:	d801      	bhi.n	248e <valid_adv_param+0x16>
    248a:	2a9f      	cmp	r2, #159	; 0x9f
    248c:	d90a      	bls.n	24a4 <valid_adv_param+0x2c>
		    param->interval_min < 0x00a0) {
			return false;
		}
	}

	if (param->interval_min > param->interval_max ||
    248e:	8880      	ldrh	r0, [r0, #4]
    2490:	4282      	cmp	r2, r0
    2492:	d807      	bhi.n	24a4 <valid_adv_param+0x2c>
    2494:	2a1f      	cmp	r2, #31
    2496:	d905      	bls.n	24a4 <valid_adv_param+0x2c>
	    param->interval_min < 0x0020 || param->interval_max > 0x4000) {
    2498:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    249c:	bf8c      	ite	hi
    249e:	2000      	movhi	r0, #0
    24a0:	2001      	movls	r0, #1
    24a2:	4770      	bx	lr
			return false;
    24a4:	2000      	movs	r0, #0
		return false;
	}

	return true;
}
    24a6:	4770      	bx	lr
    24a8:	20004c20 	.word	0x20004c20

000024ac <atomic_or>:
{
    24ac:	b500      	push	{lr}
}
    24ae:	f3bf 8f5b 	dmb	ish
    24b2:	e850 3f00 	ldrex	r3, [r0]
    24b6:	ea43 0201 	orr.w	r2, r3, r1
    24ba:	e840 2e00 	strex	lr, r2, [r0]
    24be:	f1be 0f00 	cmp.w	lr, #0
    24c2:	d1f6      	bne.n	24b2 <atomic_or+0x6>
    24c4:	f3bf 8f5b 	dmb	ish
    24c8:	4618      	mov	r0, r3
    24ca:	f85d fb04 	ldr.w	pc, [sp], #4

000024ce <atomic_and>:
{
    24ce:	b500      	push	{lr}
}
    24d0:	f3bf 8f5b 	dmb	ish
    24d4:	e850 3f00 	ldrex	r3, [r0]
    24d8:	ea03 0201 	and.w	r2, r3, r1
    24dc:	e840 2e00 	strex	lr, r2, [r0]
    24e0:	f1be 0f00 	cmp.w	lr, #0
    24e4:	d1f6      	bne.n	24d4 <atomic_and+0x6>
    24e6:	f3bf 8f5b 	dmb	ish
    24ea:	4618      	mov	r0, r3
    24ec:	f85d fb04 	ldr.w	pc, [sp], #4

000024f0 <hci_cmd_done>:
{
    24f0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    24f4:	4615      	mov	r5, r2
    24f6:	460f      	mov	r7, r1
    24f8:	4606      	mov	r6, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    24fa:	f009 fe15 	bl	c128 <_impl_k_current_get>
	BT_DBG("opcode 0x%04x status 0x%02x buf %p", opcode, status, buf);
    24fe:	4a27      	ldr	r2, [pc, #156]	; (259c <hci_cmd_done+0xac>)
    2500:	4927      	ldr	r1, [pc, #156]	; (25a0 <hci_cmd_done+0xb0>)
    2502:	9502      	str	r5, [sp, #8]
    2504:	4603      	mov	r3, r0
    2506:	e88d 00c0 	stmia.w	sp, {r6, r7}
    250a:	2007      	movs	r0, #7
    250c:	f7ff fe78 	bl	2200 <bt_log>
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    2510:	79a8      	ldrb	r0, [r5, #6]
    2512:	f8df 809c 	ldr.w	r8, [pc, #156]	; 25b0 <hci_cmd_done+0xc0>
    2516:	f009 f921 	bl	b75c <net_buf_pool_get>
    251a:	4580      	cmp	r8, r0
    251c:	d010      	beq.n	2540 <hci_cmd_done+0x50>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    251e:	79ac      	ldrb	r4, [r5, #6]
    2520:	4620      	mov	r0, r4
    2522:	f009 f91b 	bl	b75c <net_buf_pool_get>
    2526:	f8cd 8008 	str.w	r8, [sp, #8]
    252a:	9001      	str	r0, [sp, #4]
    252c:	9400      	str	r4, [sp, #0]
    252e:	4633      	mov	r3, r6
    2530:	4a1a      	ldr	r2, [pc, #104]	; (259c <hci_cmd_done+0xac>)
    2532:	491c      	ldr	r1, [pc, #112]	; (25a4 <hci_cmd_done+0xb4>)
    2534:	2004      	movs	r0, #4
    2536:	f7ff fe63 	bl	2200 <bt_log>
}
    253a:	b004      	add	sp, #16
    253c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cmd(buf)->opcode != opcode) {
    2540:	4628      	mov	r0, r5
    2542:	f009 f911 	bl	b768 <net_buf_id>
    2546:	4c18      	ldr	r4, [pc, #96]	; (25a8 <hci_cmd_done+0xb8>)
    2548:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    254c:	8843      	ldrh	r3, [r0, #2]
    254e:	42b3      	cmp	r3, r6
    2550:	d00c      	beq.n	256c <hci_cmd_done+0x7c>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    2552:	4628      	mov	r0, r5
    2554:	f009 f908 	bl	b768 <net_buf_id>
    2558:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    255c:	4a0f      	ldr	r2, [pc, #60]	; (259c <hci_cmd_done+0xac>)
    255e:	8843      	ldrh	r3, [r0, #2]
    2560:	9300      	str	r3, [sp, #0]
    2562:	4912      	ldr	r1, [pc, #72]	; (25ac <hci_cmd_done+0xbc>)
    2564:	4633      	mov	r3, r6
    2566:	2004      	movs	r0, #4
    2568:	f7ff fe4a 	bl	2200 <bt_log>
	if (cmd(buf)->sync) {
    256c:	4628      	mov	r0, r5
    256e:	f009 f8fb 	bl	b768 <net_buf_id>
    2572:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    2576:	6843      	ldr	r3, [r0, #4]
    2578:	2b00      	cmp	r3, #0
    257a:	d0de      	beq.n	253a <hci_cmd_done+0x4a>
		cmd(buf)->status = status;
    257c:	4628      	mov	r0, r5
    257e:	f009 f8f3 	bl	b768 <net_buf_id>
    2582:	f804 7030 	strb.w	r7, [r4, r0, lsl #3]
		k_sem_give(cmd(buf)->sync);
    2586:	4628      	mov	r0, r5
    2588:	f009 f8ee 	bl	b768 <net_buf_id>
    258c:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    2590:	6840      	ldr	r0, [r0, #4]
}
    2592:	b004      	add	sp, #16
    2594:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2598:	f009 be24 	b.w	c1e4 <_impl_k_sem_give>
    259c:	0000d3c9 	.word	0x0000d3c9
    25a0:	0000d8d3 	.word	0x0000d8d3
    25a4:	0000d8ff 	.word	0x0000d8ff
    25a8:	20000788 	.word	0x20000788
    25ac:	0000d938 	.word	0x0000d938
    25b0:	20004f68 	.word	0x20004f68

000025b4 <atomic_test_bit.constprop.23>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    25b4:	4b07      	ldr	r3, [pc, #28]	; (25d4 <atomic_test_bit.constprop.23+0x20>)
    25b6:	f3bf 8f5b 	dmb	ish
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    25ba:	0942      	lsrs	r2, r0, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    25bc:	eb03 0382 	add.w	r3, r3, r2, lsl #2

	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    25c0:	f000 001f 	and.w	r0, r0, #31
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    25c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    25c6:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    25ca:	fa43 f000 	asr.w	r0, r3, r0
}
    25ce:	f000 0001 	and.w	r0, r0, #1
    25d2:	4770      	bx	lr
    25d4:	20004c20 	.word	0x20004c20

000025d8 <bt_hci_cmd_create>:
{
    25d8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    25dc:	4606      	mov	r6, r0
    25de:	460f      	mov	r7, r1
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    25e0:	f009 fda2 	bl	c128 <_impl_k_current_get>
	BT_DBG("opcode 0x%04x param_len %u", opcode, param_len);
    25e4:	4d1c      	ldr	r5, [pc, #112]	; (2658 <bt_hci_cmd_create+0x80>)
    25e6:	491d      	ldr	r1, [pc, #116]	; (265c <bt_hci_cmd_create+0x84>)
    25e8:	4603      	mov	r3, r0
    25ea:	462a      	mov	r2, r5
    25ec:	e88d 00c0 	stmia.w	sp, {r6, r7}
    25f0:	2007      	movs	r0, #7
    25f2:	f7ff fe05 	bl	2200 <bt_log>
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    25f6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    25fa:	4819      	ldr	r0, [pc, #100]	; (2660 <bt_hci_cmd_create+0x88>)
    25fc:	f009 f942 	bl	b884 <net_buf_alloc_fixed>
    2600:	4604      	mov	r4, r0
    2602:	f009 fd91 	bl	c128 <_impl_k_current_get>
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    2606:	f104 0808 	add.w	r8, r4, #8
	BT_DBG("buf %p", buf);
    260a:	4603      	mov	r3, r0
    260c:	462a      	mov	r2, r5
    260e:	9400      	str	r4, [sp, #0]
    2610:	4914      	ldr	r1, [pc, #80]	; (2664 <bt_hci_cmd_create+0x8c>)
	cmd(buf)->opcode = opcode;
    2612:	4d15      	ldr	r5, [pc, #84]	; (2668 <bt_hci_cmd_create+0x90>)
	BT_DBG("buf %p", buf);
    2614:	2007      	movs	r0, #7
    2616:	f7ff fdf3 	bl	2200 <bt_log>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	*(u8_t *)net_buf_user_data(buf) = type;
    261a:	f04f 0900 	mov.w	r9, #0
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    261e:	2100      	movs	r1, #0
    2620:	4640      	mov	r0, r8
    2622:	f009 f94e 	bl	b8c2 <net_buf_simple_reserve>
    2626:	f884 9014 	strb.w	r9, [r4, #20]
	cmd(buf)->opcode = opcode;
    262a:	4620      	mov	r0, r4
    262c:	f009 f89c 	bl	b768 <net_buf_id>
    2630:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    2634:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
    2636:	4620      	mov	r0, r4
    2638:	f009 f896 	bl	b768 <net_buf_id>
    263c:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
	hdr = net_buf_add(buf, sizeof(*hdr));
    2640:	2103      	movs	r1, #3
	cmd(buf)->sync = NULL;
    2642:	f8c0 9004 	str.w	r9, [r0, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    2646:	4640      	mov	r0, r8
    2648:	f009 f97e 	bl	b948 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
    264c:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
    264e:	7087      	strb	r7, [r0, #2]
}
    2650:	4620      	mov	r0, r4
    2652:	b002      	add	sp, #8
    2654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2658:	0000d359 	.word	0x0000d359
    265c:	0000d5cf 	.word	0x0000d5cf
    2660:	20004f68 	.word	0x20004f68
    2664:	0000d5f3 	.word	0x0000d5f3
    2668:	20000788 	.word	0x20000788

0000266c <bt_hci_cmd_send_sync>:
{
    266c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2670:	4680      	mov	r8, r0
    2672:	b08a      	sub	sp, #40	; 0x28
    2674:	4615      	mov	r5, r2
	if (!buf) {
    2676:	460c      	mov	r4, r1
    2678:	b921      	cbnz	r1, 2684 <bt_hci_cmd_send_sync+0x18>
		buf = bt_hci_cmd_create(opcode, 0);
    267a:	f7ff ffad 	bl	25d8 <bt_hci_cmd_create>
		if (!buf) {
    267e:	4604      	mov	r4, r0
    2680:	2800      	cmp	r0, #0
    2682:	d04b      	beq.n	271c <bt_hci_cmd_send_sync+0xb0>
    2684:	f009 fd50 	bl	c128 <_impl_k_current_get>
	BT_DBG("buf %p opcode 0x%04x len %u", buf, opcode, buf->len);
    2688:	89a3      	ldrh	r3, [r4, #12]
    268a:	9302      	str	r3, [sp, #8]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    268c:	af04      	add	r7, sp, #16
    268e:	4603      	mov	r3, r0
    2690:	4a24      	ldr	r2, [pc, #144]	; (2724 <bt_hci_cmd_send_sync+0xb8>)
    2692:	4925      	ldr	r1, [pc, #148]	; (2728 <bt_hci_cmd_send_sync+0xbc>)
	cmd(buf)->sync = &sync_sem;
    2694:	4e25      	ldr	r6, [pc, #148]	; (272c <bt_hci_cmd_send_sync+0xc0>)
	BT_DBG("buf %p opcode 0x%04x len %u", buf, opcode, buf->len);
    2696:	2007      	movs	r0, #7
    2698:	e88d 0110 	stmia.w	sp, {r4, r8}
    269c:	f7ff fdb0 	bl	2200 <bt_log>
    26a0:	2201      	movs	r2, #1
    26a2:	2100      	movs	r1, #0
    26a4:	4638      	mov	r0, r7
    26a6:	f009 fd93 	bl	c1d0 <_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    26aa:	4620      	mov	r0, r4
    26ac:	f009 f85c 	bl	b768 <net_buf_id>
    26b0:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
    26b4:	6047      	str	r7, [r0, #4]
	net_buf_ref(buf);
    26b6:	4620      	mov	r0, r4
    26b8:	f009 f942 	bl	b940 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    26bc:	4621      	mov	r1, r4
    26be:	481c      	ldr	r0, [pc, #112]	; (2730 <bt_hci_cmd_send_sync+0xc4>)
    26c0:	f009 f903 	bl	b8ca <net_buf_put>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    26c4:	f242 7110 	movw	r1, #10000	; 0x2710
    26c8:	4638      	mov	r0, r7
    26ca:	f009 fdeb 	bl	c2a4 <_impl_k_sem_take>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    26ce:	f009 fd2b 	bl	c128 <_impl_k_current_get>
    26d2:	4607      	mov	r7, r0
	BT_DBG("opcode 0x%04x status 0x%02x", opcode, cmd(buf)->status);
    26d4:	4620      	mov	r0, r4
    26d6:	f009 f847 	bl	b768 <net_buf_id>
    26da:	f816 3030 	ldrb.w	r3, [r6, r0, lsl #3]
    26de:	9301      	str	r3, [sp, #4]
    26e0:	4a10      	ldr	r2, [pc, #64]	; (2724 <bt_hci_cmd_send_sync+0xb8>)
    26e2:	4914      	ldr	r1, [pc, #80]	; (2734 <bt_hci_cmd_send_sync+0xc8>)
    26e4:	f8cd 8000 	str.w	r8, [sp]
    26e8:	463b      	mov	r3, r7
    26ea:	2007      	movs	r0, #7
    26ec:	f7ff fd88 	bl	2200 <bt_log>
	if (cmd(buf)->status) {
    26f0:	4620      	mov	r0, r4
    26f2:	f009 f839 	bl	b768 <net_buf_id>
    26f6:	f816 0030 	ldrb.w	r0, [r6, r0, lsl #3]
    26fa:	b138      	cbz	r0, 270c <bt_hci_cmd_send_sync+0xa0>
		net_buf_unref(buf);
    26fc:	4620      	mov	r0, r4
    26fe:	f009 f8f1 	bl	b8e4 <net_buf_unref>
		err = -EIO;
    2702:	f06f 0004 	mvn.w	r0, #4
}
    2706:	b00a      	add	sp, #40	; 0x28
    2708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (rsp) {
    270c:	b10d      	cbz	r5, 2712 <bt_hci_cmd_send_sync+0xa6>
			*rsp = buf;
    270e:	602c      	str	r4, [r5, #0]
    2710:	e7f9      	b.n	2706 <bt_hci_cmd_send_sync+0x9a>
			net_buf_unref(buf);
    2712:	4620      	mov	r0, r4
    2714:	f009 f8e6 	bl	b8e4 <net_buf_unref>
		err = 0;
    2718:	4628      	mov	r0, r5
    271a:	e7f4      	b.n	2706 <bt_hci_cmd_send_sync+0x9a>
			return -ENOBUFS;
    271c:	f06f 0036 	mvn.w	r0, #54	; 0x36
    2720:	e7f1      	b.n	2706 <bt_hci_cmd_send_sync+0x9a>
    2722:	bf00      	nop
    2724:	0000d36b 	.word	0x0000d36b
    2728:	0000d647 	.word	0x0000d647
    272c:	20000788 	.word	0x20000788
    2730:	20004cd4 	.word	0x20004cd4
    2734:	0000d66c 	.word	0x0000d66c

00002738 <set_random_address>:
{
    2738:	b573      	push	{r0, r1, r4, r5, r6, lr}
    273a:	4605      	mov	r5, r0
    273c:	f009 fcf4 	bl	c128 <_impl_k_current_get>
    2740:	4604      	mov	r4, r0
	BT_DBG("%s", bt_addr_str(addr));
    2742:	4628      	mov	r0, r5
    2744:	f7ff fc5a 	bl	1ffc <bt_addr_str>
#define BT_ADDR_LE_NONE (&(bt_addr_le_t) { 0, \
			 { { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff } } })

static inline int bt_addr_cmp(const bt_addr_t *a, const bt_addr_t *b)
{
	return memcmp(a, b, sizeof(*a));
    2748:	4e18      	ldr	r6, [pc, #96]	; (27ac <set_random_address+0x74>)
    274a:	9000      	str	r0, [sp, #0]
    274c:	4623      	mov	r3, r4
    274e:	4a18      	ldr	r2, [pc, #96]	; (27b0 <set_random_address+0x78>)
    2750:	4918      	ldr	r1, [pc, #96]	; (27b4 <set_random_address+0x7c>)
    2752:	2007      	movs	r0, #7
    2754:	f7ff fd54 	bl	2200 <bt_log>
    2758:	2206      	movs	r2, #6
    275a:	f106 0108 	add.w	r1, r6, #8
    275e:	4628      	mov	r0, r5
    2760:	f7fd ff46 	bl	5f0 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    2764:	4604      	mov	r4, r0
    2766:	b1d8      	cbz	r0, 27a0 <set_random_address+0x68>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    2768:	2106      	movs	r1, #6
    276a:	f242 0005 	movw	r0, #8197	; 0x2005
    276e:	f7ff ff33 	bl	25d8 <bt_hci_cmd_create>
	if (!buf) {
    2772:	4604      	mov	r4, r0
    2774:	b1b8      	cbz	r0, 27a6 <set_random_address+0x6e>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    2776:	2206      	movs	r2, #6
    2778:	4629      	mov	r1, r5
    277a:	3008      	adds	r0, #8
    277c:	f009 f8ea 	bl	b954 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    2780:	4621      	mov	r1, r4
    2782:	2200      	movs	r2, #0
    2784:	f242 0005 	movw	r0, #8197	; 0x2005
    2788:	f7ff ff70 	bl	266c <bt_hci_cmd_send_sync>
	if (err) {
    278c:	4604      	mov	r4, r0
    278e:	b938      	cbnz	r0, 27a0 <set_random_address+0x68>
	return memcmp(a, b, sizeof(*a));
}

static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    2790:	2206      	movs	r2, #6
    2792:	4629      	mov	r1, r5
    2794:	f106 0008 	add.w	r0, r6, #8
    2798:	f7fd ff3f 	bl	61a <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    279c:	2301      	movs	r3, #1
    279e:	71f3      	strb	r3, [r6, #7]
}
    27a0:	4620      	mov	r0, r4
    27a2:	b002      	add	sp, #8
    27a4:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    27a6:	f06f 0436 	mvn.w	r4, #54	; 0x36
    27aa:	e7f9      	b.n	27a0 <set_random_address+0x68>
    27ac:	20004c20 	.word	0x20004c20
    27b0:	0000d380 	.word	0x0000d380
    27b4:	0000de10 	.word	0x0000de10

000027b8 <le_set_private_addr>:
{
    27b8:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
    27ba:	2106      	movs	r1, #6
    27bc:	4668      	mov	r0, sp
    27be:	f002 f92b 	bl	4a18 <bt_rand>
	if (err) {
    27c2:	b940      	cbnz	r0, 27d6 <le_set_private_addr+0x1e>
	nrpa.val[5] &= 0x3f;
    27c4:	f89d 3005 	ldrb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
    27c8:	4668      	mov	r0, sp
	nrpa.val[5] &= 0x3f;
    27ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    27ce:	f88d 3005 	strb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
    27d2:	f7ff ffb1 	bl	2738 <set_random_address>
}
    27d6:	b003      	add	sp, #12
    27d8:	f85d fb04 	ldr.w	pc, [sp], #4

000027dc <set_le_scan_enable>:
{
    27dc:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    27de:	2102      	movs	r1, #2
{
    27e0:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    27e2:	f242 000c 	movw	r0, #8204	; 0x200c
    27e6:	f7ff fef7 	bl	25d8 <bt_hci_cmd_create>
	if (!buf) {
    27ea:	4604      	mov	r4, r0
    27ec:	b320      	cbz	r0, 2838 <set_le_scan_enable+0x5c>
	cp = net_buf_add(buf, sizeof(*cp));
    27ee:	2102      	movs	r1, #2
    27f0:	3008      	adds	r0, #8
    27f2:	f009 f8a9 	bl	b948 <net_buf_simple_add>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    27f6:	2d01      	cmp	r5, #1
	cp = net_buf_add(buf, sizeof(*cp));
    27f8:	4601      	mov	r1, r0
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    27fa:	d114      	bne.n	2826 <set_le_scan_enable+0x4a>
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
    27fc:	200a      	movs	r0, #10
    27fe:	f7ff fed9 	bl	25b4 <atomic_test_bit.constprop.23>
    2802:	7048      	strb	r0, [r1, #1]
	cp->enable = enable;
    2804:	700d      	strb	r5, [r1, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    2806:	2200      	movs	r2, #0
    2808:	4621      	mov	r1, r4
    280a:	f242 000c 	movw	r0, #8204	; 0x200c
    280e:	f7ff ff2d 	bl	266c <bt_hci_cmd_send_sync>
	if (err) {
    2812:	4604      	mov	r4, r0
    2814:	b928      	cbnz	r0, 2822 <set_le_scan_enable+0x46>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    2816:	2d01      	cmp	r5, #1
    2818:	d108      	bne.n	282c <set_le_scan_enable+0x50>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    281a:	2180      	movs	r1, #128	; 0x80
    281c:	4808      	ldr	r0, [pc, #32]	; (2840 <set_le_scan_enable+0x64>)
    281e:	f7ff fe45 	bl	24ac <atomic_or>
}
    2822:	4620      	mov	r0, r4
    2824:	bd38      	pop	{r3, r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    2826:	2300      	movs	r3, #0
    2828:	7043      	strb	r3, [r0, #1]
    282a:	e7eb      	b.n	2804 <set_le_scan_enable+0x28>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    282c:	f06f 0180 	mvn.w	r1, #128	; 0x80
    2830:	4803      	ldr	r0, [pc, #12]	; (2840 <set_le_scan_enable+0x64>)
    2832:	f7ff fe4c 	bl	24ce <atomic_and>
    2836:	e7f4      	b.n	2822 <set_le_scan_enable+0x46>
		return -ENOBUFS;
    2838:	f06f 0436 	mvn.w	r4, #54	; 0x36
    283c:	e7f1      	b.n	2822 <set_le_scan_enable+0x46>
    283e:	bf00      	nop
    2840:	20004c90 	.word	0x20004c90

00002844 <set_ext_ad>:
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
}

//#if defined(CONFIG_EXT_ADV)
static int set_ext_ad(u16_t hci_op, const struct bt_data *ad, size_t ad_len)
{
    2844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2848:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_ext_adv_data *set_data;
	struct net_buf *buf;
	int i;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    284a:	21fc      	movs	r1, #252	; 0xfc
{
    284c:	4607      	mov	r7, r0
    284e:	4690      	mov	r8, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    2850:	f7ff fec2 	bl	25d8 <bt_hci_cmd_create>
	if (!buf) {
    2854:	4606      	mov	r6, r0
    2856:	2800      	cmp	r0, #0
    2858:	d03c      	beq.n	28d4 <set_ext_ad+0x90>
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
    285a:	21fc      	movs	r1, #252	; 0xfc
    285c:	3008      	adds	r0, #8
    285e:	f009 f873 	bl	b948 <net_buf_simple_add>

	memset(set_data, 0, sizeof(*set_data));
    2862:	22fc      	movs	r2, #252	; 0xfc
    2864:	2100      	movs	r1, #0
	set_data = net_buf_add(buf, sizeof(*set_data));
    2866:	4605      	mov	r5, r0
	memset(set_data, 0, sizeof(*set_data));
    2868:	f7fd ff03 	bl	672 <memset>

	for (i = 0; i < ad_len; i++) {
    286c:	f04f 0900 	mov.w	r9, #0
    2870:	45c1      	cmp	r9, r8
    2872:	d106      	bne.n	2882 <set_ext_ad+0x3e>
		memcpy(&set_data->data[set_data->len], ad[i].data,
		       ad[i].data_len);
		set_data->len += ad[i].data_len;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    2874:	4631      	mov	r1, r6
    2876:	4638      	mov	r0, r7
    2878:	2200      	movs	r2, #0
}
    287a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    287e:	f7ff bef5 	b.w	266c <bt_hci_cmd_send_sync>
		if (set_data->len + ad[i].data_len + 2 > 251) {
    2882:	7862      	ldrb	r2, [r4, #1]
    2884:	782b      	ldrb	r3, [r5, #0]
    2886:	18d1      	adds	r1, r2, r3
    2888:	3102      	adds	r1, #2
    288a:	29fb      	cmp	r1, #251	; 0xfb
    288c:	f104 0408 	add.w	r4, r4, #8
    2890:	dd06      	ble.n	28a0 <set_ext_ad+0x5c>
			net_buf_unref(buf);
    2892:	4630      	mov	r0, r6
    2894:	f009 f826 	bl	b8e4 <net_buf_unref>
			return -EINVAL;
    2898:	f06f 0015 	mvn.w	r0, #21
    289c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		set_data->data[set_data->len++] = ad[i].data_len + 1;
    28a0:	18e9      	adds	r1, r5, r3
    28a2:	1c50      	adds	r0, r2, #1
    28a4:	7048      	strb	r0, [r1, #1]
		set_data->data[set_data->len++] = ad[i].type;
    28a6:	1c98      	adds	r0, r3, #2
    28a8:	b2c0      	uxtb	r0, r0
		set_data->data[set_data->len++] = ad[i].data_len + 1;
    28aa:	3301      	adds	r3, #1
		set_data->data[set_data->len++] = ad[i].type;
    28ac:	7028      	strb	r0, [r5, #0]
    28ae:	fa55 f383 	uxtab	r3, r5, r3
    28b2:	f814 1c08 	ldrb.w	r1, [r4, #-8]
    28b6:	7059      	strb	r1, [r3, #1]
		memcpy(&set_data->data[set_data->len], ad[i].data,
    28b8:	3001      	adds	r0, #1
    28ba:	f854 1c04 	ldr.w	r1, [r4, #-4]
    28be:	4428      	add	r0, r5
    28c0:	f7fd feab 	bl	61a <memcpy>
		set_data->len += ad[i].data_len;
    28c4:	782b      	ldrb	r3, [r5, #0]
    28c6:	f814 2c07 	ldrb.w	r2, [r4, #-7]
    28ca:	4413      	add	r3, r2
    28cc:	702b      	strb	r3, [r5, #0]
	for (i = 0; i < ad_len; i++) {
    28ce:	f109 0901 	add.w	r9, r9, #1
    28d2:	e7cd      	b.n	2870 <set_ext_ad+0x2c>
		return -ENOBUFS;
    28d4:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    28d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000028dc <bt_le_scan_update>:
{
    28dc:	b508      	push	{r3, lr}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    28de:	2008      	movs	r0, #8
    28e0:	f7ff fe68 	bl	25b4 <atomic_test_bit.constprop.23>
    28e4:	4601      	mov	r1, r0
    28e6:	b940      	cbnz	r0, 28fa <bt_le_scan_update+0x1e>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    28e8:	2007      	movs	r0, #7
    28ea:	f7ff fe63 	bl	25b4 <atomic_test_bit.constprop.23>
    28ee:	b120      	cbz	r0, 28fa <bt_le_scan_update+0x1e>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    28f0:	4608      	mov	r0, r1
}
    28f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    28f6:	f7ff bf71 	b.w	27dc <set_le_scan_enable>
}
    28fa:	2000      	movs	r0, #0
    28fc:	bd08      	pop	{r3, pc}
	...

00002900 <bt_init.part.13>:
static int bt_init(void)
    2900:	b508      	push	{r3, lr}
	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);
    2902:	2200      	movs	r2, #0
    2904:	4611      	mov	r1, r2
    2906:	2008      	movs	r0, #8
    2908:	f7ff fce8 	bl	22dc <bt_monitor_send>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    290c:	2102      	movs	r1, #2
    290e:	4804      	ldr	r0, [pc, #16]	; (2920 <bt_init.part.13+0x20>)
    2910:	f7ff fdcc 	bl	24ac <atomic_or>
	bt_le_scan_update(false);
    2914:	2000      	movs	r0, #0
    2916:	f7ff ffe1 	bl	28dc <bt_le_scan_update>
}
    291a:	2000      	movs	r0, #0
    291c:	bd08      	pop	{r3, pc}
    291e:	bf00      	nop
    2920:	20004c90 	.word	0x20004c90

00002924 <bt_addr_le_create_static>:
	addr->type = BT_ADDR_LE_RANDOM;
    2924:	2301      	movs	r3, #1
{
    2926:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
    2928:	2106      	movs	r1, #6
{
    292a:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
    292c:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
    2930:	f002 f872 	bl	4a18 <bt_rand>
	if (err) {
    2934:	b918      	cbnz	r0, 293e <bt_addr_le_create_static+0x1a>
	BT_ADDR_SET_STATIC(&addr->a);
    2936:	79a3      	ldrb	r3, [r4, #6]
    2938:	f063 033f 	orn	r3, r3, #63	; 0x3f
    293c:	71a3      	strb	r3, [r4, #6]
}
    293e:	bd10      	pop	{r4, pc}

00002940 <hci_init>:
{
    2940:	b5f0      	push	{r4, r5, r6, r7, lr}
    2942:	b08b      	sub	sp, #44	; 0x2c
	err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    2944:	aa08      	add	r2, sp, #32
    2946:	2100      	movs	r1, #0
    2948:	f640 4003 	movw	r0, #3075	; 0xc03
    294c:	f7ff fe8e 	bl	266c <bt_hci_cmd_send_sync>
	if (err) {
    2950:	4604      	mov	r4, r0
    2952:	2800      	cmp	r0, #0
    2954:	f040 80b2 	bne.w	2abc <hci_init+0x17c>
	u8_t status = buf->data[0];
    2958:	9b08      	ldr	r3, [sp, #32]
    295a:	689b      	ldr	r3, [r3, #8]
    295c:	781c      	ldrb	r4, [r3, #0]
    295e:	f009 fbe3 	bl	c128 <_impl_k_current_get>
	BT_DBG("status %u", status);
    2962:	9400      	str	r4, [sp, #0]
    2964:	4603      	mov	r3, r0
    2966:	4ab3      	ldr	r2, [pc, #716]	; (2c34 <hci_init+0x2f4>)
    2968:	49b3      	ldr	r1, [pc, #716]	; (2c38 <hci_init+0x2f8>)
    296a:	2007      	movs	r0, #7
    296c:	f7ff fc48 	bl	2200 <bt_log>
	if (status) {
    2970:	b96c      	cbnz	r4, 298e <hci_init+0x4e>
	scan_dev_found_cb = NULL;
    2972:	4bb2      	ldr	r3, [pc, #712]	; (2c3c <hci_init+0x2fc>)
    2974:	601c      	str	r4, [r3, #0]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2976:	4bb2      	ldr	r3, [pc, #712]	; (2c40 <hci_init+0x300>)
    2978:	f3bf 8f5b 	dmb	ish
    297c:	2201      	movs	r2, #1
    297e:	e853 1f00 	ldrex	r1, [r3]
    2982:	e843 2000 	strex	r0, r2, [r3]
    2986:	2800      	cmp	r0, #0
    2988:	d1f9      	bne.n	297e <hci_init+0x3e>
    298a:	f3bf 8f5b 	dmb	ish
	net_buf_unref(rsp);
    298e:	9808      	ldr	r0, [sp, #32]
    2990:	f008 ffa8 	bl	b8e4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    2994:	aa08      	add	r2, sp, #32
    2996:	2100      	movs	r1, #0
    2998:	f241 0003 	movw	r0, #4099	; 0x1003
    299c:	f7ff fe66 	bl	266c <bt_hci_cmd_send_sync>
	if (err) {
    29a0:	4604      	mov	r4, r0
    29a2:	2800      	cmp	r0, #0
    29a4:	f040 808a 	bne.w	2abc <hci_init+0x17c>
    29a8:	9b08      	ldr	r3, [sp, #32]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    29aa:	4ea6      	ldr	r6, [pc, #664]	; (2c44 <hci_init+0x304>)
    29ac:	689d      	ldr	r5, [r3, #8]
    29ae:	f009 fbbb 	bl	c128 <_impl_k_current_get>
	BT_DBG("status %u", rp->status);
    29b2:	f815 3b01 	ldrb.w	r3, [r5], #1
    29b6:	9300      	str	r3, [sp, #0]
    29b8:	4aa3      	ldr	r2, [pc, #652]	; (2c48 <hci_init+0x308>)
    29ba:	499f      	ldr	r1, [pc, #636]	; (2c38 <hci_init+0x2f8>)
    29bc:	4603      	mov	r3, r0
    29be:	2007      	movs	r0, #7
    29c0:	f7ff fc1e 	bl	2200 <bt_log>
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    29c4:	4629      	mov	r1, r5
    29c6:	2208      	movs	r2, #8
    29c8:	f106 0016 	add.w	r0, r6, #22
    29cc:	f7fd fe25 	bl	61a <memcpy>
	net_buf_unref(rsp);
    29d0:	9808      	ldr	r0, [sp, #32]
    29d2:	f008 ff87 	bl	b8e4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    29d6:	4621      	mov	r1, r4
    29d8:	aa08      	add	r2, sp, #32
    29da:	f241 0001 	movw	r0, #4097	; 0x1001
    29de:	f7ff fe45 	bl	266c <bt_hci_cmd_send_sync>
    29e2:	4635      	mov	r5, r6
	if (err) {
    29e4:	4604      	mov	r4, r0
    29e6:	2800      	cmp	r0, #0
    29e8:	d168      	bne.n	2abc <hci_init+0x17c>
    29ea:	9b08      	ldr	r3, [sp, #32]
    29ec:	689f      	ldr	r7, [r3, #8]
    29ee:	f009 fb9b 	bl	c128 <_impl_k_current_get>
	BT_DBG("status %u", rp->status);
    29f2:	783b      	ldrb	r3, [r7, #0]
    29f4:	4990      	ldr	r1, [pc, #576]	; (2c38 <hci_init+0x2f8>)
    29f6:	9300      	str	r3, [sp, #0]
    29f8:	4a94      	ldr	r2, [pc, #592]	; (2c4c <hci_init+0x30c>)
    29fa:	4603      	mov	r3, r0
    29fc:	2007      	movs	r0, #7
    29fe:	f7ff fbff 	bl	2200 <bt_log>
	bt_dev.hci_version = rp->hci_version;
    2a02:	787b      	ldrb	r3, [r7, #1]
    2a04:	73b3      	strb	r3, [r6, #14]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    2a06:	78fa      	ldrb	r2, [r7, #3]
    2a08:	78bb      	ldrb	r3, [r7, #2]
	net_buf_unref(rsp);
    2a0a:	9808      	ldr	r0, [sp, #32]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    2a0c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2a10:	8233      	strh	r3, [r6, #16]
	bt_dev.lmp_version = rp->lmp_version;
    2a12:	793b      	ldrb	r3, [r7, #4]
    2a14:	73f3      	strb	r3, [r6, #15]
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    2a16:	7a3a      	ldrb	r2, [r7, #8]
    2a18:	79fb      	ldrb	r3, [r7, #7]
    2a1a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2a1e:	8273      	strh	r3, [r6, #18]
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    2a20:	79ba      	ldrb	r2, [r7, #6]
    2a22:	797b      	ldrb	r3, [r7, #5]
    2a24:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2a28:	82b3      	strh	r3, [r6, #20]
	net_buf_unref(rsp);
    2a2a:	f008 ff5b 	bl	b8e4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    2a2e:	4621      	mov	r1, r4
    2a30:	aa08      	add	r2, sp, #32
    2a32:	f241 0009 	movw	r0, #4105	; 0x1009
    2a36:	f7ff fe19 	bl	266c <bt_hci_cmd_send_sync>
	if (err) {
    2a3a:	4604      	mov	r4, r0
    2a3c:	2800      	cmp	r0, #0
    2a3e:	d13d      	bne.n	2abc <hci_init+0x17c>
    2a40:	9b08      	ldr	r3, [sp, #32]
    2a42:	689f      	ldr	r7, [r3, #8]
    2a44:	f009 fb70 	bl	c128 <_impl_k_current_get>
	BT_DBG("status %u", rp->status);
    2a48:	f817 3b01 	ldrb.w	r3, [r7], #1
    2a4c:	9300      	str	r3, [sp, #0]
    2a4e:	4a80      	ldr	r2, [pc, #512]	; (2c50 <hci_init+0x310>)
    2a50:	4979      	ldr	r1, [pc, #484]	; (2c38 <hci_init+0x2f8>)
    2a52:	4603      	mov	r3, r0
    2a54:	2007      	movs	r0, #7
    2a56:	f7ff fbd3 	bl	2200 <bt_log>
    2a5a:	2206      	movs	r2, #6
    2a5c:	4639      	mov	r1, r7
    2a5e:	1c70      	adds	r0, r6, #1
    2a60:	f7fd fddb 	bl	61a <memcpy>
	net_buf_unref(rsp);
    2a64:	9808      	ldr	r0, [sp, #32]
	bt_dev.id_addr.type = BT_ADDR_LE_PUBLIC;
    2a66:	7034      	strb	r4, [r6, #0]
	net_buf_unref(rsp);
    2a68:	f008 ff3c 	bl	b8e4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    2a6c:	4621      	mov	r1, r4
    2a6e:	aa08      	add	r2, sp, #32
    2a70:	f241 0002 	movw	r0, #4098	; 0x1002
    2a74:	f7ff fdfa 	bl	266c <bt_hci_cmd_send_sync>
	if (err) {
    2a78:	4604      	mov	r4, r0
    2a7a:	b9f8      	cbnz	r0, 2abc <hci_init+0x17c>
    2a7c:	9b08      	ldr	r3, [sp, #32]
    2a7e:	689f      	ldr	r7, [r3, #8]
    2a80:	f009 fb52 	bl	c128 <_impl_k_current_get>
	BT_DBG("status %u", rp->status);
    2a84:	f817 3b01 	ldrb.w	r3, [r7], #1
    2a88:	9300      	str	r3, [sp, #0]
    2a8a:	4a72      	ldr	r2, [pc, #456]	; (2c54 <hci_init+0x314>)
    2a8c:	496a      	ldr	r1, [pc, #424]	; (2c38 <hci_init+0x2f8>)
    2a8e:	4603      	mov	r3, r0
    2a90:	2007      	movs	r0, #7
    2a92:	f7ff fbb5 	bl	2200 <bt_log>
	memcpy(bt_dev.supported_commands, rp->commands,
    2a96:	2240      	movs	r2, #64	; 0x40
    2a98:	4639      	mov	r1, r7
    2a9a:	f106 001e 	add.w	r0, r6, #30
    2a9e:	f7fd fdbc 	bl	61a <memcpy>
	net_buf_unref(rsp);
    2aa2:	9808      	ldr	r0, [sp, #32]
    2aa4:	f008 ff1e 	bl	b8e4 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    2aa8:	7eb3      	ldrb	r3, [r6, #26]
    2aaa:	0658      	lsls	r0, r3, #25
    2aac:	d409      	bmi.n	2ac2 <hci_init+0x182>
		BT_ERR("Non-LE capable controller detected!");
    2aae:	4a6a      	ldr	r2, [pc, #424]	; (2c58 <hci_init+0x318>)
    2ab0:	496a      	ldr	r1, [pc, #424]	; (2c5c <hci_init+0x31c>)
    2ab2:	2003      	movs	r0, #3
    2ab4:	f7ff fba4 	bl	2200 <bt_log>
		return -ENODEV;
    2ab8:	f06f 0412 	mvn.w	r4, #18
}
    2abc:	4620      	mov	r0, r4
    2abe:	b00b      	add	sp, #44	; 0x2c
    2ac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    2ac2:	4621      	mov	r1, r4
    2ac4:	aa08      	add	r2, sp, #32
    2ac6:	f242 0003 	movw	r0, #8195	; 0x2003
    2aca:	f7ff fdcf 	bl	266c <bt_hci_cmd_send_sync>
	if (err) {
    2ace:	4604      	mov	r4, r0
    2ad0:	2800      	cmp	r0, #0
    2ad2:	d1f3      	bne.n	2abc <hci_init+0x17c>
    2ad4:	9b08      	ldr	r3, [sp, #32]
    2ad6:	689e      	ldr	r6, [r3, #8]
    2ad8:	f009 fb26 	bl	c128 <_impl_k_current_get>
	BT_DBG("status %u", rp->status);
    2adc:	f816 3b01 	ldrb.w	r3, [r6], #1
    2ae0:	9300      	str	r3, [sp, #0]
    2ae2:	4a5f      	ldr	r2, [pc, #380]	; (2c60 <hci_init+0x320>)
    2ae4:	4954      	ldr	r1, [pc, #336]	; (2c38 <hci_init+0x2f8>)
    2ae6:	4603      	mov	r3, r0
    2ae8:	2007      	movs	r0, #7
    2aea:	f7ff fb89 	bl	2200 <bt_log>
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    2aee:	4631      	mov	r1, r6
    2af0:	2208      	movs	r2, #8
    2af2:	f105 0078 	add.w	r0, r5, #120	; 0x78
    2af6:	f7fd fd90 	bl	61a <memcpy>
	net_buf_unref(rsp);
    2afa:	9808      	ldr	r0, [sp, #32]
    2afc:	f008 fef2 	bl	b8e4 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    2b00:	7eab      	ldrb	r3, [r5, #26]
    2b02:	0699      	lsls	r1, r3, #26
    2b04:	d57a      	bpl.n	2bfc <hci_init+0x2bc>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    2b06:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
    2b0a:	071a      	lsls	r2, r3, #28
    2b0c:	f100 80b8 	bmi.w	2c80 <hci_init+0x340>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    2b10:	2108      	movs	r1, #8
    2b12:	f242 0001 	movw	r0, #8193	; 0x2001
    2b16:	f7ff fd5f 	bl	25d8 <bt_hci_cmd_create>
	if (!buf) {
    2b1a:	4604      	mov	r4, r0
    2b1c:	2800      	cmp	r0, #0
    2b1e:	d074      	beq.n	2c0a <hci_init+0x2ca>
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    2b20:	2108      	movs	r1, #8
    2b22:	4408      	add	r0, r1
    2b24:	f008 ff10 	bl	b948 <net_buf_simple_add>
	if ((bt_dev.supported_commands[34] & 0x02) &&
    2b28:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    2b2c:	f003 0306 	and.w	r3, r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    2b30:	2b06      	cmp	r3, #6
    2b32:	bf14      	ite	ne
    2b34:	2302      	movne	r3, #2
    2b36:	f44f 73c1 	moveq.w	r3, #386	; 0x182
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    2b3a:	2200      	movs	r2, #0
    2b3c:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    2b3e:	0a1b      	lsrs	r3, r3, #8
    2b40:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
    2b42:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    2b44:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    2b46:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    2b48:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    2b4a:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    2b4c:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    2b4e:	4621      	mov	r1, r4
    2b50:	f242 0001 	movw	r0, #8193	; 0x2001
    2b54:	f7ff fd8a 	bl	266c <bt_hci_cmd_send_sync>
	if (err) {
    2b58:	4604      	mov	r4, r0
    2b5a:	2800      	cmp	r0, #0
    2b5c:	d1ae      	bne.n	2abc <hci_init+0x17c>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    2b5e:	2108      	movs	r1, #8
    2b60:	f640 4001 	movw	r0, #3073	; 0xc01
    2b64:	f7ff fd38 	bl	25d8 <bt_hci_cmd_create>
	if (!buf) {
    2b68:	4606      	mov	r6, r0
    2b6a:	2800      	cmp	r0, #0
    2b6c:	d04d      	beq.n	2c0a <hci_init+0x2ca>
	ev = net_buf_add(buf, sizeof(*ev));
    2b6e:	2108      	movs	r1, #8
    2b70:	4408      	add	r0, r1
    2b72:	f008 fee9 	bl	b948 <net_buf_simple_add>
    2b76:	2380      	movs	r3, #128	; 0x80
    2b78:	7043      	strb	r3, [r0, #1]
    2b7a:	2302      	movs	r3, #2
    2b7c:	70c3      	strb	r3, [r0, #3]
    2b7e:	2320      	movs	r3, #32
	dst[0] = val;
    2b80:	7004      	strb	r4, [r0, #0]
    2b82:	7084      	strb	r4, [r0, #2]
    2b84:	7104      	strb	r4, [r0, #4]
	dst[1] = val >> 8;
    2b86:	7144      	strb	r4, [r0, #5]
	dst[0] = val;
    2b88:	7184      	strb	r4, [r0, #6]
	dst[1] = val >> 8;
    2b8a:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    2b8c:	4622      	mov	r2, r4
    2b8e:	4631      	mov	r1, r6
    2b90:	f640 4001 	movw	r0, #3073	; 0xc01
    2b94:	f7ff fd6a 	bl	266c <bt_hci_cmd_send_sync>
	if (err) {
    2b98:	4604      	mov	r4, r0
    2b9a:	2800      	cmp	r0, #0
    2b9c:	d18e      	bne.n	2abc <hci_init+0x17c>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    2b9e:	4601      	mov	r1, r0
    2ba0:	aa08      	add	r2, sp, #32
    2ba2:	f64f 4001 	movw	r0, #64513	; 0xfc01
    2ba6:	f7ff fd61 	bl	266c <bt_hci_cmd_send_sync>
	if (err) {
    2baa:	2800      	cmp	r0, #0
    2bac:	f000 808a 	beq.w	2cc4 <hci_init+0x384>
		BT_WARN("Vendor HCI extensions not available");
    2bb0:	4a2c      	ldr	r2, [pc, #176]	; (2c64 <hci_init+0x324>)
    2bb2:	492d      	ldr	r1, [pc, #180]	; (2c68 <hci_init+0x328>)
		BT_WARN("Failed to read supported vendor commands");
    2bb4:	2004      	movs	r0, #4
    2bb6:	f7ff fb23 	bl	2200 <bt_log>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    2bba:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    2bbc:	2207      	movs	r2, #7
    2bbe:	a906      	add	r1, sp, #24
    2bc0:	4820      	ldr	r0, [pc, #128]	; (2c44 <hci_init+0x304>)
    2bc2:	9306      	str	r3, [sp, #24]
    2bc4:	f8cd 301b 	str.w	r3, [sp, #27]
    2bc8:	f7fd fd12 	bl	5f0 <memcmp>
    2bcc:	2800      	cmp	r0, #0
    2bce:	f040 80d9 	bne.w	2d84 <hci_init+0x444>
    2bd2:	f009 faa9 	bl	c128 <_impl_k_current_get>
	if (bt_storage) {
    2bd6:	4f25      	ldr	r7, [pc, #148]	; (2c6c <hci_init+0x32c>)
		BT_DBG("No public address. Trying to set static random.");
    2bd8:	4a25      	ldr	r2, [pc, #148]	; (2c70 <hci_init+0x330>)
    2bda:	4926      	ldr	r1, [pc, #152]	; (2c74 <hci_init+0x334>)
    2bdc:	4603      	mov	r3, r0
    2bde:	2007      	movs	r0, #7
    2be0:	f7ff fb0e 	bl	2200 <bt_log>
	if (bt_storage) {
    2be4:	683b      	ldr	r3, [r7, #0]
    2be6:	2b00      	cmp	r3, #0
    2be8:	f040 8100 	bne.w	2dec <hci_init+0x4ac>
	if (bt_dev.vs_commands[1] & BIT(0)) {
    2bec:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
    2bf0:	07db      	lsls	r3, r3, #31
    2bf2:	f100 811a 	bmi.w	2e2a <hci_init+0x4ea>
		BT_WARN("Read Static Addresses command not available");
    2bf6:	4a20      	ldr	r2, [pc, #128]	; (2c78 <hci_init+0x338>)
    2bf8:	4920      	ldr	r1, [pc, #128]	; (2c7c <hci_init+0x33c>)
    2bfa:	e11f      	b.n	2e3c <hci_init+0x4fc>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    2bfc:	2102      	movs	r1, #2
    2bfe:	f640 406d 	movw	r0, #3181	; 0xc6d
    2c02:	f7ff fce9 	bl	25d8 <bt_hci_cmd_create>
		if (!buf) {
    2c06:	4606      	mov	r6, r0
    2c08:	b910      	cbnz	r0, 2c10 <hci_init+0x2d0>
		return -ENOBUFS;
    2c0a:	f06f 0436 	mvn.w	r4, #54	; 0x36
    2c0e:	e755      	b.n	2abc <hci_init+0x17c>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
    2c10:	2102      	movs	r1, #2
    2c12:	3008      	adds	r0, #8
    2c14:	f008 fe98 	bl	b948 <net_buf_simple_add>
		cp_le->le = 0x01;
    2c18:	2301      	movs	r3, #1
		cp_le->simul = 0x00;
    2c1a:	7044      	strb	r4, [r0, #1]
		cp_le->le = 0x01;
    2c1c:	7003      	strb	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    2c1e:	4622      	mov	r2, r4
    2c20:	4631      	mov	r1, r6
    2c22:	f640 406d 	movw	r0, #3181	; 0xc6d
    2c26:	f7ff fd21 	bl	266c <bt_hci_cmd_send_sync>
		if (err) {
    2c2a:	4604      	mov	r4, r0
    2c2c:	2800      	cmp	r0, #0
    2c2e:	f43f af6a 	beq.w	2b06 <hci_init+0x1c6>
    2c32:	e743      	b.n	2abc <hci_init+0x17c>
    2c34:	0000d3b6 	.word	0x0000d3b6
    2c38:	0000d96f 	.word	0x0000d96f
    2c3c:	200007e4 	.word	0x200007e4
    2c40:	20004c90 	.word	0x20004c90
    2c44:	20004c20 	.word	0x20004c20
    2c48:	0000d4c0 	.word	0x0000d4c0
    2c4c:	0000d458 	.word	0x0000d458
    2c50:	0000d470 	.word	0x0000d470
    2c54:	0000d49f 	.word	0x0000d49f
    2c58:	0000d4fa 	.word	0x0000d4fa
    2c5c:	0000d982 	.word	0x0000d982
    2c60:	0000d485 	.word	0x0000d485
    2c64:	0000d512 	.word	0x0000d512
    2c68:	0000d9aa 	.word	0x0000d9aa
    2c6c:	20002b14 	.word	0x20002b14
    2c70:	0000d51e 	.word	0x0000d51e
    2c74:	0000da8a 	.word	0x0000da8a
    2c78:	0000d502 	.word	0x0000d502
    2c7c:	0000db14 	.word	0x0000db14
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    2c80:	aa08      	add	r2, sp, #32
    2c82:	2100      	movs	r1, #0
    2c84:	f242 001c 	movw	r0, #8220	; 0x201c
    2c88:	f7ff fcf0 	bl	266c <bt_hci_cmd_send_sync>
		if (err) {
    2c8c:	4604      	mov	r4, r0
    2c8e:	2800      	cmp	r0, #0
    2c90:	f47f af14 	bne.w	2abc <hci_init+0x17c>
    2c94:	9b08      	ldr	r3, [sp, #32]
    2c96:	689c      	ldr	r4, [r3, #8]
    2c98:	f009 fa46 	bl	c128 <_impl_k_current_get>
	BT_DBG("status %u", rp->status);
    2c9c:	7823      	ldrb	r3, [r4, #0]
    2c9e:	9300      	str	r3, [sp, #0]
    2ca0:	4a8a      	ldr	r2, [pc, #552]	; (2ecc <hci_init+0x58c>)
    2ca2:	498b      	ldr	r1, [pc, #556]	; (2ed0 <hci_init+0x590>)
    2ca4:	4603      	mov	r3, r0
    2ca6:	2007      	movs	r0, #7
    2ca8:	f7ff faaa 	bl	2200 <bt_log>
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    2cac:	4623      	mov	r3, r4
		net_buf_unref(rsp);
    2cae:	9808      	ldr	r0, [sp, #32]
    2cb0:	f853 2f01 	ldr.w	r2, [r3, #1]!
    2cb4:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    2cb6:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    2cba:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
		net_buf_unref(rsp);
    2cbe:	f008 fe11 	bl	b8e4 <net_buf_unref>
    2cc2:	e725      	b.n	2b10 <hci_init+0x1d0>
	rp.info = (void *)rsp->data;
    2cc4:	9b08      	ldr	r3, [sp, #32]
	BT_INFO("HW Platform: %s (0x%04x)",
    2cc6:	4983      	ldr	r1, [pc, #524]	; (2ed4 <hci_init+0x594>)
	rp.info = (void *)rsp->data;
    2cc8:	689e      	ldr	r6, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
    2cca:	f8b6 3001 	ldrh.w	r3, [r6, #1]
	if (platform < ARRAY_SIZE(plat_str)) {
    2cce:	2b03      	cmp	r3, #3
		return plat_str[platform];
    2cd0:	bf96      	itet	ls
    2cd2:	4a81      	ldrls	r2, [pc, #516]	; (2ed8 <hci_init+0x598>)
	return "unknown";
    2cd4:	4a81      	ldrhi	r2, [pc, #516]	; (2edc <hci_init+0x59c>)
		return plat_str[platform];
    2cd6:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
    2cda:	2006      	movs	r0, #6
    2cdc:	f7ff fa90 	bl	2200 <bt_log>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    2ce0:	f8b6 2001 	ldrh.w	r2, [r6, #1]
	BT_INFO("HW Variant: %s (0x%04x)",
    2ce4:	f8b6 3003 	ldrh.w	r3, [r6, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    2ce8:	2a02      	cmp	r2, #2
    2cea:	d12a      	bne.n	2d42 <hci_init+0x402>
	if (variant < ARRAY_SIZE(nordic_str)) {
    2cec:	2b02      	cmp	r3, #2
    2cee:	d828      	bhi.n	2d42 <hci_init+0x402>
		return nordic_str[variant];
    2cf0:	4a7b      	ldr	r2, [pc, #492]	; (2ee0 <hci_init+0x5a0>)
    2cf2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
    2cf6:	497b      	ldr	r1, [pc, #492]	; (2ee4 <hci_init+0x5a4>)
    2cf8:	2006      	movs	r0, #6
    2cfa:	f7ff fa81 	bl	2200 <bt_log>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    2cfe:	7973      	ldrb	r3, [r6, #5]
    2d00:	f8d6 1009 	ldr.w	r1, [r6, #9]
    2d04:	9102      	str	r1, [sp, #8]
	if (variant < ARRAY_SIZE(var_str)) {
    2d06:	2b03      	cmp	r3, #3
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    2d08:	f8b6 1007 	ldrh.w	r1, [r6, #7]
		return var_str[variant];
    2d0c:	bf98      	it	ls
    2d0e:	4a76      	ldrls	r2, [pc, #472]	; (2ee8 <hci_init+0x5a8>)
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    2d10:	9101      	str	r1, [sp, #4]
    2d12:	79b1      	ldrb	r1, [r6, #6]
		return var_str[variant];
    2d14:	bf94      	ite	ls
    2d16:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
	return "unknown";
    2d1a:	4a70      	ldrhi	r2, [pc, #448]	; (2edc <hci_init+0x59c>)
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    2d1c:	9100      	str	r1, [sp, #0]
    2d1e:	2006      	movs	r0, #6
    2d20:	4972      	ldr	r1, [pc, #456]	; (2eec <hci_init+0x5ac>)
    2d22:	f7ff fa6d 	bl	2200 <bt_log>
	net_buf_unref(rsp);
    2d26:	9808      	ldr	r0, [sp, #32]
    2d28:	f008 fddc 	bl	b8e4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    2d2c:	aa08      	add	r2, sp, #32
    2d2e:	2100      	movs	r1, #0
    2d30:	f64f 4002 	movw	r0, #64514	; 0xfc02
    2d34:	f7ff fc9a 	bl	266c <bt_hci_cmd_send_sync>
	if (err) {
    2d38:	4606      	mov	r6, r0
    2d3a:	b120      	cbz	r0, 2d46 <hci_init+0x406>
		BT_WARN("Failed to read supported vendor features");
    2d3c:	4a6c      	ldr	r2, [pc, #432]	; (2ef0 <hci_init+0x5b0>)
    2d3e:	496d      	ldr	r1, [pc, #436]	; (2ef4 <hci_init+0x5b4>)
    2d40:	e738      	b.n	2bb4 <hci_init+0x274>
		return "unknown";
    2d42:	4a66      	ldr	r2, [pc, #408]	; (2edc <hci_init+0x59c>)
    2d44:	e7d7      	b.n	2cf6 <hci_init+0x3b6>
	rp.cmds = (void *)rsp->data;
    2d46:	9b08      	ldr	r3, [sp, #32]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    2d48:	486b      	ldr	r0, [pc, #428]	; (2ef8 <hci_init+0x5b8>)
    2d4a:	6899      	ldr	r1, [r3, #8]
    2d4c:	2202      	movs	r2, #2
    2d4e:	3101      	adds	r1, #1
    2d50:	f7fd fc63 	bl	61a <memcpy>
	net_buf_unref(rsp);
    2d54:	9808      	ldr	r0, [sp, #32]
    2d56:	f008 fdc5 	bl	b8e4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    2d5a:	aa08      	add	r2, sp, #32
    2d5c:	4631      	mov	r1, r6
    2d5e:	f64f 4003 	movw	r0, #64515	; 0xfc03
    2d62:	f7ff fc83 	bl	266c <bt_hci_cmd_send_sync>
	if (err) {
    2d66:	b110      	cbz	r0, 2d6e <hci_init+0x42e>
		BT_WARN("Failed to read supported vendor commands");
    2d68:	4a61      	ldr	r2, [pc, #388]	; (2ef0 <hci_init+0x5b0>)
    2d6a:	4964      	ldr	r1, [pc, #400]	; (2efc <hci_init+0x5bc>)
    2d6c:	e722      	b.n	2bb4 <hci_init+0x274>
	rp.feat = (void *)rsp->data;
    2d6e:	9b08      	ldr	r3, [sp, #32]
	memcpy(bt_dev.vs_features, rp.feat->features, BT_DEV_VS_FEAT_MAX);
    2d70:	4863      	ldr	r0, [pc, #396]	; (2f00 <hci_init+0x5c0>)
    2d72:	6899      	ldr	r1, [r3, #8]
    2d74:	2201      	movs	r2, #1
    2d76:	4411      	add	r1, r2
    2d78:	f7fd fc4f 	bl	61a <memcpy>
	net_buf_unref(rsp);
    2d7c:	9808      	ldr	r0, [sp, #32]
    2d7e:	f008 fdb1 	bl	b8e4 <net_buf_unref>
    2d82:	e71a      	b.n	2bba <hci_init+0x27a>
	    !bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_NONE)) {
    2d84:	4b5f      	ldr	r3, [pc, #380]	; (2f04 <hci_init+0x5c4>)
    2d86:	6818      	ldr	r0, [r3, #0]
    2d88:	889a      	ldrh	r2, [r3, #4]
    2d8a:	9008      	str	r0, [sp, #32]
    2d8c:	799b      	ldrb	r3, [r3, #6]
    2d8e:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
    2d92:	a908      	add	r1, sp, #32
    2d94:	2207      	movs	r2, #7
    2d96:	485c      	ldr	r0, [pc, #368]	; (2f08 <hci_init+0x5c8>)
    2d98:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    2d9c:	f7fd fc28 	bl	5f0 <memcmp>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    2da0:	2800      	cmp	r0, #0
    2da2:	f43f af16 	beq.w	2bd2 <hci_init+0x292>
	BT_INFO("Identity: %s", bt_addr_le_str(&bt_dev.id_addr));
    2da6:	4858      	ldr	r0, [pc, #352]	; (2f08 <hci_init+0x5c8>)
    2da8:	f7ff f94e 	bl	2048 <bt_addr_le_str>
    2dac:	4957      	ldr	r1, [pc, #348]	; (2f0c <hci_init+0x5cc>)
    2dae:	4602      	mov	r2, r0
    2db0:	2006      	movs	r0, #6
    2db2:	f7ff fa25 	bl	2200 <bt_log>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    2db6:	7bae      	ldrb	r6, [r5, #14]
    2db8:	4630      	mov	r0, r6
    2dba:	f7ff fb41 	bl	2440 <ver_str>
    2dbe:	8aab      	ldrh	r3, [r5, #20]
    2dc0:	9301      	str	r3, [sp, #4]
    2dc2:	8a2b      	ldrh	r3, [r5, #16]
    2dc4:	9300      	str	r3, [sp, #0]
    2dc6:	4602      	mov	r2, r0
    2dc8:	4633      	mov	r3, r6
    2dca:	4951      	ldr	r1, [pc, #324]	; (2f10 <hci_init+0x5d0>)
    2dcc:	2006      	movs	r0, #6
    2dce:	f7ff fa17 	bl	2200 <bt_log>
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
    2dd2:	7bee      	ldrb	r6, [r5, #15]
    2dd4:	4630      	mov	r0, r6
    2dd6:	f7ff fb33 	bl	2440 <ver_str>
    2dda:	8a6b      	ldrh	r3, [r5, #18]
    2ddc:	9300      	str	r3, [sp, #0]
    2dde:	4602      	mov	r2, r0
    2de0:	4633      	mov	r3, r6
    2de2:	494c      	ldr	r1, [pc, #304]	; (2f14 <hci_init+0x5d4>)
    2de4:	2006      	movs	r0, #6
    2de6:	f7ff fa0b 	bl	2200 <bt_log>
    2dea:	e667      	b.n	2abc <hci_init+0x17c>
		ret = bt_storage->read(NULL, BT_STORAGE_ID_ADDR,
    2dec:	2100      	movs	r1, #0
    2dee:	681e      	ldr	r6, [r3, #0]
    2df0:	4a45      	ldr	r2, [pc, #276]	; (2f08 <hci_init+0x5c8>)
    2df2:	2307      	movs	r3, #7
    2df4:	4608      	mov	r0, r1
    2df6:	47b0      	blx	r6
		if (ret == sizeof(bt_dev.id_addr)) {
    2df8:	2807      	cmp	r0, #7
    2dfa:	f47f aef7 	bne.w	2bec <hci_init+0x2ac>
	if (bt_dev.id_addr.type != BT_ADDR_LE_RANDOM ||
    2dfe:	782b      	ldrb	r3, [r5, #0]
    2e00:	2b01      	cmp	r3, #1
    2e02:	d104      	bne.n	2e0e <hci_init+0x4ce>
    2e04:	79ab      	ldrb	r3, [r5, #6]
    2e06:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    2e0a:	2bc0      	cmp	r3, #192	; 0xc0
    2e0c:	d052      	beq.n	2eb4 <hci_init+0x574>
		BT_ERR("Only static random address supported as identity");
    2e0e:	4a42      	ldr	r2, [pc, #264]	; (2f18 <hci_init+0x5d8>)
    2e10:	4942      	ldr	r1, [pc, #264]	; (2f1c <hci_init+0x5dc>)
    2e12:	2003      	movs	r0, #3
    2e14:	f7ff f9f4 	bl	2200 <bt_log>
		return -EINVAL;
    2e18:	f06f 0615 	mvn.w	r6, #21
			BT_ERR("Unable to set identity address");
    2e1c:	4a40      	ldr	r2, [pc, #256]	; (2f20 <hci_init+0x5e0>)
    2e1e:	4941      	ldr	r1, [pc, #260]	; (2f24 <hci_init+0x5e4>)
    2e20:	2003      	movs	r0, #3
    2e22:	f7ff f9ed 	bl	2200 <bt_log>
			return err;
    2e26:	4634      	mov	r4, r6
    2e28:	e648      	b.n	2abc <hci_init+0x17c>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS,
    2e2a:	aa05      	add	r2, sp, #20
    2e2c:	2100      	movs	r1, #0
    2e2e:	f64f 4009 	movw	r0, #64521	; 0xfc09
    2e32:	f7ff fc1b 	bl	266c <bt_hci_cmd_send_sync>
		if (err) {
    2e36:	b128      	cbz	r0, 2e44 <hci_init+0x504>
			BT_WARN("Failed to read static addresses");
    2e38:	4a37      	ldr	r2, [pc, #220]	; (2f18 <hci_init+0x5d8>)
    2e3a:	493b      	ldr	r1, [pc, #236]	; (2f28 <hci_init+0x5e8>)
		BT_WARN("Read Static Addresses command not available");
    2e3c:	2004      	movs	r0, #4
    2e3e:	f7ff f9df 	bl	2200 <bt_log>
    2e42:	e016      	b.n	2e72 <hci_init+0x532>
		rp = (void *)rsp->data;
    2e44:	9b05      	ldr	r3, [sp, #20]
    2e46:	6899      	ldr	r1, [r3, #8]
		if (rp->num_addrs) {
    2e48:	784b      	ldrb	r3, [r1, #1]
    2e4a:	b153      	cbz	r3, 2e62 <hci_init+0x522>
			bt_dev.id_addr.type = BT_ADDR_LE_RANDOM;
    2e4c:	2301      	movs	r3, #1
	memcpy(dst, src, sizeof(*dst));
    2e4e:	2206      	movs	r2, #6
    2e50:	3102      	adds	r1, #2
    2e52:	4836      	ldr	r0, [pc, #216]	; (2f2c <hci_init+0x5ec>)
    2e54:	702b      	strb	r3, [r5, #0]
    2e56:	f7fd fbe0 	bl	61a <memcpy>
			net_buf_unref(rsp);
    2e5a:	9805      	ldr	r0, [sp, #20]
    2e5c:	f008 fd42 	bl	b8e4 <net_buf_unref>
    2e60:	e7cd      	b.n	2dfe <hci_init+0x4be>
		BT_WARN("No static addresses stored in controller");
    2e62:	2004      	movs	r0, #4
    2e64:	4a2c      	ldr	r2, [pc, #176]	; (2f18 <hci_init+0x5d8>)
    2e66:	4932      	ldr	r1, [pc, #200]	; (2f30 <hci_init+0x5f0>)
    2e68:	f7ff f9ca 	bl	2200 <bt_log>
		net_buf_unref(rsp);
    2e6c:	9805      	ldr	r0, [sp, #20]
    2e6e:	f008 fd39 	bl	b8e4 <net_buf_unref>
    2e72:	f009 f959 	bl	c128 <_impl_k_current_get>
	BT_DBG("Generating new static random address");
    2e76:	4a28      	ldr	r2, [pc, #160]	; (2f18 <hci_init+0x5d8>)
    2e78:	492e      	ldr	r1, [pc, #184]	; (2f34 <hci_init+0x5f4>)
    2e7a:	4603      	mov	r3, r0
    2e7c:	2007      	movs	r0, #7
    2e7e:	f7ff f9bf 	bl	2200 <bt_log>
	err = bt_addr_le_create_static(&bt_dev.id_addr);
    2e82:	4821      	ldr	r0, [pc, #132]	; (2f08 <hci_init+0x5c8>)
    2e84:	f7ff fd4e 	bl	2924 <bt_addr_le_create_static>
	if (err) {
    2e88:	4606      	mov	r6, r0
    2e8a:	2800      	cmp	r0, #0
    2e8c:	d1c6      	bne.n	2e1c <hci_init+0x4dc>
	if (bt_storage) {
    2e8e:	683b      	ldr	r3, [r7, #0]
    2e90:	b163      	cbz	r3, 2eac <hci_init+0x56c>
		ret = bt_storage->write(NULL, BT_STORAGE_ID_ADDR,
    2e92:	685f      	ldr	r7, [r3, #4]
    2e94:	4a1c      	ldr	r2, [pc, #112]	; (2f08 <hci_init+0x5c8>)
    2e96:	2307      	movs	r3, #7
    2e98:	4601      	mov	r1, r0
    2e9a:	47b8      	blx	r7
		if (ret != sizeof(bt_dev.id_addr)) {
    2e9c:	2807      	cmp	r0, #7
    2e9e:	d0ae      	beq.n	2dfe <hci_init+0x4be>
			BT_ERR("Unable to store static address");
    2ea0:	4a1d      	ldr	r2, [pc, #116]	; (2f18 <hci_init+0x5d8>)
    2ea2:	4925      	ldr	r1, [pc, #148]	; (2f38 <hci_init+0x5f8>)
    2ea4:	2003      	movs	r0, #3
		BT_WARN("Using temporary static random address");
    2ea6:	f7ff f9ab 	bl	2200 <bt_log>
    2eaa:	e7a8      	b.n	2dfe <hci_init+0x4be>
    2eac:	4a1a      	ldr	r2, [pc, #104]	; (2f18 <hci_init+0x5d8>)
    2eae:	4923      	ldr	r1, [pc, #140]	; (2f3c <hci_init+0x5fc>)
    2eb0:	2004      	movs	r0, #4
    2eb2:	e7f8      	b.n	2ea6 <hci_init+0x566>
	err = set_random_address(&bt_dev.id_addr.a);
    2eb4:	481d      	ldr	r0, [pc, #116]	; (2f2c <hci_init+0x5ec>)
    2eb6:	f7ff fc3f 	bl	2738 <set_random_address>
	if (err) {
    2eba:	4606      	mov	r6, r0
    2ebc:	2800      	cmp	r0, #0
    2ebe:	d1ad      	bne.n	2e1c <hci_init+0x4dc>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2ec0:	2104      	movs	r1, #4
    2ec2:	481f      	ldr	r0, [pc, #124]	; (2f40 <hci_init+0x600>)
    2ec4:	f7ff faf2 	bl	24ac <atomic_or>
    2ec8:	e76d      	b.n	2da6 <hci_init+0x466>
    2eca:	bf00      	nop
    2ecc:	0000d4dd 	.word	0x0000d4dd
    2ed0:	0000d96f 	.word	0x0000d96f
    2ed4:	0000d9d2 	.word	0x0000d9d2
    2ed8:	0000de00 	.word	0x0000de00
    2edc:	0000defc 	.word	0x0000defc
    2ee0:	0000ddf4 	.word	0x0000ddf4
    2ee4:	0000d9eb 	.word	0x0000d9eb
    2ee8:	0000deec 	.word	0x0000deec
    2eec:	0000da03 	.word	0x0000da03
    2ef0:	0000d512 	.word	0x0000d512
    2ef4:	0000da30 	.word	0x0000da30
    2ef8:	20004c7f 	.word	0x20004c7f
    2efc:	0000da5d 	.word	0x0000da5d
    2f00:	20004c7e 	.word	0x20004c7e
    2f04:	0000cce0 	.word	0x0000cce0
    2f08:	20004c20 	.word	0x20004c20
    2f0c:	0000dbf4 	.word	0x0000dbf4
    2f10:	0000dc01 	.word	0x0000dc01
    2f14:	0000dc3f 	.word	0x0000dc3f
    2f18:	0000d502 	.word	0x0000d502
    2f1c:	0000dbbf 	.word	0x0000dbbf
    2f20:	0000d51e 	.word	0x0000d51e
    2f24:	0000dc66 	.word	0x0000dc66
    2f28:	0000dac3 	.word	0x0000dac3
    2f2c:	20004c21 	.word	0x20004c21
    2f30:	0000dae7 	.word	0x0000dae7
    2f34:	0000db44 	.word	0x0000db44
    2f38:	0000db72 	.word	0x0000db72
    2f3c:	0000db95 	.word	0x0000db95
    2f40:	20004c90 	.word	0x20004c90

00002f44 <init_work>:
{
    2f44:	b510      	push	{r4, lr}
	err = hci_init();
    2f46:	f7ff fcfb 	bl	2940 <hci_init>
	if (err) {
    2f4a:	b908      	cbnz	r0, 2f50 <init_work+0xc>
    2f4c:	f7ff fcd8 	bl	2900 <bt_init.part.13>
	if (ready_cb) {
    2f50:	4b03      	ldr	r3, [pc, #12]	; (2f60 <init_work+0x1c>)
    2f52:	681b      	ldr	r3, [r3, #0]
    2f54:	b113      	cbz	r3, 2f5c <init_work+0x18>
}
    2f56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    2f5a:	4718      	bx	r3
    2f5c:	bd10      	pop	{r4, pc}
    2f5e:	bf00      	nop
    2f60:	200007e0 	.word	0x200007e0

00002f64 <bt_send>:
{
    2f64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    2f66:	4604      	mov	r4, r0
    2f68:	f009 f8de 	bl	c128 <_impl_k_current_get>
	BT_DBG("buf %p len %u type %u", buf, buf->len, bt_buf_get_type(buf));
    2f6c:	7d23      	ldrb	r3, [r4, #20]
    2f6e:	9302      	str	r3, [sp, #8]
    2f70:	89a3      	ldrh	r3, [r4, #12]
    2f72:	4a0d      	ldr	r2, [pc, #52]	; (2fa8 <bt_send+0x44>)
    2f74:	9301      	str	r3, [sp, #4]
    2f76:	9400      	str	r4, [sp, #0]
    2f78:	4603      	mov	r3, r0
    2f7a:	490c      	ldr	r1, [pc, #48]	; (2fac <bt_send+0x48>)
    2f7c:	2007      	movs	r0, #7
    2f7e:	f7ff f93f 	bl	2200 <bt_log>
	 * pointer to an enum causes issues on qemu_x86 because the true
	 * size is 8-bit, but the enum is 32-bit on qemu_x86. So we put in
	 * a temporary cast to 8-bit to ensure only 8 bits are read from
	 * the pointer.
	 */
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    2f82:	7d23      	ldrb	r3, [r4, #20]
	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);
    2f84:	68a1      	ldr	r1, [r4, #8]
    2f86:	2b03      	cmp	r3, #3
    2f88:	bf96      	itet	ls
    2f8a:	4a09      	ldrls	r2, [pc, #36]	; (2fb0 <bt_send+0x4c>)
    2f8c:	20ff      	movhi	r0, #255	; 0xff
    2f8e:	5cd0      	ldrbls	r0, [r2, r3]
    2f90:	89a2      	ldrh	r2, [r4, #12]
    2f92:	f7ff f9a3 	bl	22dc <bt_monitor_send>
	return bt_dev.drv->send(buf);
    2f96:	4b07      	ldr	r3, [pc, #28]	; (2fb4 <bt_send+0x50>)
    2f98:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    2f9c:	68db      	ldr	r3, [r3, #12]
    2f9e:	4620      	mov	r0, r4
}
    2fa0:	b004      	add	sp, #16
    2fa2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_dev.drv->send(buf);
    2fa6:	4718      	bx	r3
    2fa8:	0000d527 	.word	0x0000d527
    2fac:	0000d8b4 	.word	0x0000d8b4
    2fb0:	0000d355 	.word	0x0000d355
    2fb4:	20004c20 	.word	0x20004c20

00002fb8 <hci_tx_thread>:
{
    2fb8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    2fbc:	f009 f8b4 	bl	c128 <_impl_k_current_get>
	BT_DBG("Started");
    2fc0:	4a5b      	ldr	r2, [pc, #364]	; (3130 <hci_tx_thread+0x178>)
    2fc2:	495c      	ldr	r1, [pc, #368]	; (3134 <hci_tx_thread+0x17c>)
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    2fc4:	4c5c      	ldr	r4, [pc, #368]	; (3138 <hci_tx_thread+0x180>)
		events[0].state = K_POLL_STATE_NOT_READY;
    2fc6:	4e5d      	ldr	r6, [pc, #372]	; (313c <hci_tx_thread+0x184>)
	BT_DBG("Started");
    2fc8:	4603      	mov	r3, r0
    2fca:	2007      	movs	r0, #7
    2fcc:	f7ff f918 	bl	2200 <bt_log>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    2fd0:	f104 08b4 	add.w	r8, r4, #180	; 0xb4
		events[0].state = K_POLL_STATE_NOT_READY;
    2fd4:	7b73      	ldrb	r3, [r6, #13]
    2fd6:	f36f 1307 	bfc	r3, #4, #4
    2fda:	7373      	strb	r3, [r6, #13]
    2fdc:	f009 f8a4 	bl	c128 <_impl_k_current_get>
		BT_DBG("Calling k_poll with %d events", ev_count);
    2fe0:	2501      	movs	r5, #1
    2fe2:	4603      	mov	r3, r0
    2fe4:	4a52      	ldr	r2, [pc, #328]	; (3130 <hci_tx_thread+0x178>)
    2fe6:	4956      	ldr	r1, [pc, #344]	; (3140 <hci_tx_thread+0x188>)
    2fe8:	9500      	str	r5, [sp, #0]
    2fea:	2007      	movs	r0, #7
    2fec:	f7ff f908 	bl	2200 <bt_log>
		err = k_poll(events, ev_count, K_FOREVER);
    2ff0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2ff4:	4629      	mov	r1, r5
    2ff6:	4851      	ldr	r0, [pc, #324]	; (313c <hci_tx_thread+0x184>)
    2ff8:	f009 fd54 	bl	caa4 <k_poll>
		BT_ASSERT(err == 0);
    2ffc:	b150      	cbz	r0, 3014 <hci_tx_thread+0x5c>
    2ffe:	4a4c      	ldr	r2, [pc, #304]	; (3130 <hci_tx_thread+0x178>)
    3000:	4950      	ldr	r1, [pc, #320]	; (3144 <hci_tx_thread+0x18c>)
	BT_ASSERT(buf);
    3002:	2003      	movs	r0, #3
    3004:	f7ff f8fc 	bl	2200 <bt_log>
    3008:	4040      	eors	r0, r0
    300a:	f380 8811 	msr	BASEPRI, r0
    300e:	f04f 0004 	mov.w	r0, #4
    3012:	df02      	svc	2
    3014:	f009 f888 	bl	c128 <_impl_k_current_get>
	BT_DBG("count %d", count);
    3018:	4a4b      	ldr	r2, [pc, #300]	; (3148 <hci_tx_thread+0x190>)
    301a:	494c      	ldr	r1, [pc, #304]	; (314c <hci_tx_thread+0x194>)
    301c:	9500      	str	r5, [sp, #0]
    301e:	4603      	mov	r3, r0
    3020:	2007      	movs	r0, #7
    3022:	f7ff f8ed 	bl	2200 <bt_log>
    3026:	f009 f87f 	bl	c128 <_impl_k_current_get>
		BT_DBG("ev->state %u", ev->state);
    302a:	7b73      	ldrb	r3, [r6, #13]
    302c:	4a46      	ldr	r2, [pc, #280]	; (3148 <hci_tx_thread+0x190>)
    302e:	4948      	ldr	r1, [pc, #288]	; (3150 <hci_tx_thread+0x198>)
    3030:	091b      	lsrs	r3, r3, #4
    3032:	9300      	str	r3, [sp, #0]
    3034:	4603      	mov	r3, r0
    3036:	2007      	movs	r0, #7
    3038:	f7ff f8e2 	bl	2200 <bt_log>
		switch (ev->state) {
    303c:	7b73      	ldrb	r3, [r6, #13]
    303e:	091b      	lsrs	r3, r3, #4
    3040:	2b01      	cmp	r3, #1
    3042:	d906      	bls.n	3052 <hci_tx_thread+0x9a>
    3044:	2b04      	cmp	r3, #4
    3046:	d007      	beq.n	3058 <hci_tx_thread+0xa0>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    3048:	4a3f      	ldr	r2, [pc, #252]	; (3148 <hci_tx_thread+0x190>)
    304a:	4942      	ldr	r1, [pc, #264]	; (3154 <hci_tx_thread+0x19c>)
    304c:	2004      	movs	r0, #4
    304e:	f7ff f8d7 	bl	2200 <bt_log>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    3052:	f009 f84b 	bl	c0ec <_impl_k_yield>
    3056:	e7bd      	b.n	2fd4 <hci_tx_thread+0x1c>
			if (ev->tag == BT_EVENT_CMD_TX) {
    3058:	7b37      	ldrb	r7, [r6, #12]
    305a:	2f00      	cmp	r7, #0
    305c:	d1f9      	bne.n	3052 <hci_tx_thread+0x9a>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    305e:	f009 f863 	bl	c128 <_impl_k_current_get>
	BT_DBG("calling net_buf_get");
    3062:	4a3d      	ldr	r2, [pc, #244]	; (3158 <hci_tx_thread+0x1a0>)
    3064:	493d      	ldr	r1, [pc, #244]	; (315c <hci_tx_thread+0x1a4>)
    3066:	4603      	mov	r3, r0
    3068:	2007      	movs	r0, #7
    306a:	f7ff f8c9 	bl	2200 <bt_log>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    306e:	4639      	mov	r1, r7
    3070:	4640      	mov	r0, r8
    3072:	f008 fc0d 	bl	b890 <net_buf_get>
	BT_ASSERT(buf);
    3076:	4605      	mov	r5, r0
    3078:	2800      	cmp	r0, #0
    307a:	d056      	beq.n	312a <hci_tx_thread+0x172>
    307c:	f009 f854 	bl	c128 <_impl_k_current_get>
	BT_DBG("calling sem_take_wait");
    3080:	4a35      	ldr	r2, [pc, #212]	; (3158 <hci_tx_thread+0x1a0>)
    3082:	4937      	ldr	r1, [pc, #220]	; (3160 <hci_tx_thread+0x1a8>)
    3084:	4603      	mov	r3, r0
    3086:	2007      	movs	r0, #7
    3088:	f7ff f8ba 	bl	2200 <bt_log>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    308c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3090:	4834      	ldr	r0, [pc, #208]	; (3164 <hci_tx_thread+0x1ac>)
    3092:	f009 f907 	bl	c2a4 <_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    3096:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    309a:	2b00      	cmp	r3, #0
    309c:	d139      	bne.n	3112 <hci_tx_thread+0x15a>
	bt_dev.sent_cmd = net_buf_ref(buf);
    309e:	4628      	mov	r0, r5
    30a0:	f008 fc4e 	bl	b940 <net_buf_ref>
    30a4:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    30a8:	f009 f83e 	bl	c128 <_impl_k_current_get>
    30ac:	4681      	mov	r9, r0
	BT_DBG("Sending command 0x%04x (buf %p) to driver",
    30ae:	4628      	mov	r0, r5
    30b0:	f008 fb5a 	bl	b768 <net_buf_id>
    30b4:	4f2c      	ldr	r7, [pc, #176]	; (3168 <hci_tx_thread+0x1b0>)
    30b6:	9501      	str	r5, [sp, #4]
    30b8:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
    30bc:	4a26      	ldr	r2, [pc, #152]	; (3158 <hci_tx_thread+0x1a0>)
    30be:	8843      	ldrh	r3, [r0, #2]
    30c0:	9300      	str	r3, [sp, #0]
    30c2:	492a      	ldr	r1, [pc, #168]	; (316c <hci_tx_thread+0x1b4>)
    30c4:	464b      	mov	r3, r9
    30c6:	2007      	movs	r0, #7
    30c8:	f7ff f89a 	bl	2200 <bt_log>
	err = bt_send(buf);
    30cc:	4628      	mov	r0, r5
    30ce:	f7ff ff49 	bl	2f64 <bt_send>
	if (err) {
    30d2:	4603      	mov	r3, r0
    30d4:	2800      	cmp	r0, #0
    30d6:	d0bc      	beq.n	3052 <hci_tx_thread+0x9a>
		BT_ERR("Unable to send to driver (err %d)", err);
    30d8:	4a1f      	ldr	r2, [pc, #124]	; (3158 <hci_tx_thread+0x1a0>)
    30da:	4925      	ldr	r1, [pc, #148]	; (3170 <hci_tx_thread+0x1b8>)
    30dc:	2003      	movs	r0, #3
    30de:	f7ff f88f 	bl	2200 <bt_log>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    30e2:	4820      	ldr	r0, [pc, #128]	; (3164 <hci_tx_thread+0x1ac>)
    30e4:	f009 f87e 	bl	c1e4 <_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED,
    30e8:	4628      	mov	r0, r5
    30ea:	f008 fb3d 	bl	b768 <net_buf_id>
    30ee:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
    30f2:	2200      	movs	r2, #0
    30f4:	211f      	movs	r1, #31
    30f6:	8840      	ldrh	r0, [r0, #2]
    30f8:	f7ff f9fa 	bl	24f0 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    30fc:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    3100:	f008 fbf0 	bl	b8e4 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    3104:	2300      	movs	r3, #0
		net_buf_unref(buf);
    3106:	4628      	mov	r0, r5
		bt_dev.sent_cmd = NULL;
    3108:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		net_buf_unref(buf);
    310c:	f008 fbea 	bl	b8e4 <net_buf_unref>
    3110:	e79f      	b.n	3052 <hci_tx_thread+0x9a>
		BT_ERR("Uncleared pending sent_cmd");
    3112:	4a11      	ldr	r2, [pc, #68]	; (3158 <hci_tx_thread+0x1a0>)
    3114:	4917      	ldr	r1, [pc, #92]	; (3174 <hci_tx_thread+0x1bc>)
    3116:	2003      	movs	r0, #3
    3118:	f7ff f872 	bl	2200 <bt_log>
		net_buf_unref(bt_dev.sent_cmd);
    311c:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    3120:	f008 fbe0 	bl	b8e4 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    3124:	f8c4 70a0 	str.w	r7, [r4, #160]	; 0xa0
    3128:	e7b9      	b.n	309e <hci_tx_thread+0xe6>
	BT_ASSERT(buf);
    312a:	4a0b      	ldr	r2, [pc, #44]	; (3158 <hci_tx_thread+0x1a0>)
    312c:	4912      	ldr	r1, [pc, #72]	; (3178 <hci_tx_thread+0x1c0>)
    312e:	e768      	b.n	3002 <hci_tx_thread+0x4a>
    3130:	0000d44a 	.word	0x0000d44a
    3134:	0000dc89 	.word	0x0000dc89
    3138:	20004c20 	.word	0x20004c20
    313c:	20004ce8 	.word	0x20004ce8
    3140:	0000dc9a 	.word	0x0000dc9a
    3144:	0000dcc1 	.word	0x0000dcc1
    3148:	0000d43b 	.word	0x0000d43b
    314c:	0000dcdf 	.word	0x0000dcdf
    3150:	0000dcf1 	.word	0x0000dcf1
    3154:	0000dd07 	.word	0x0000dd07
    3158:	0000d432 	.word	0x0000d432
    315c:	0000dd2c 	.word	0x0000dd2c
    3160:	0000dd49 	.word	0x0000dd49
    3164:	20004ca8 	.word	0x20004ca8
    3168:	20000788 	.word	0x20000788
    316c:	0000dd68 	.word	0x0000dd68
    3170:	0000d621 	.word	0x0000d621
    3174:	0000dd9b 	.word	0x0000dd9b
    3178:	0000ddba 	.word	0x0000ddba

0000317c <bt_recv>:
{
    317c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3180:	7d03      	ldrb	r3, [r0, #20]
    3182:	2b03      	cmp	r3, #3
    3184:	4604      	mov	r4, r0
    3186:	bf98      	it	ls
    3188:	4ab5      	ldrls	r2, [pc, #724]	; (3460 <bt_recv+0x2e4>)
	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);
    318a:	68a1      	ldr	r1, [r4, #8]
    318c:	bf98      	it	ls
    318e:	5cd0      	ldrbls	r0, [r2, r3]
    3190:	89a2      	ldrh	r2, [r4, #12]
{
    3192:	b089      	sub	sp, #36	; 0x24
    3194:	bf88      	it	hi
    3196:	20ff      	movhi	r0, #255	; 0xff
	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);
    3198:	f7ff f8a0 	bl	22dc <bt_monitor_send>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    319c:	f008 ffc4 	bl	c128 <_impl_k_current_get>
	BT_DBG("buf %p len %u", buf, buf->len);
    31a0:	89a3      	ldrh	r3, [r4, #12]
    31a2:	9301      	str	r3, [sp, #4]
    31a4:	9400      	str	r4, [sp, #0]
    31a6:	4603      	mov	r3, r0
    31a8:	4aae      	ldr	r2, [pc, #696]	; (3464 <bt_recv+0x2e8>)
    31aa:	49af      	ldr	r1, [pc, #700]	; (3468 <bt_recv+0x2ec>)
    31ac:	2007      	movs	r0, #7
    31ae:	f7ff f827 	bl	2200 <bt_log>
    31b2:	7d26      	ldrb	r6, [r4, #20]
	switch (bt_buf_get_type(buf)) {
    31b4:	2e01      	cmp	r6, #1
    31b6:	f040 8146 	bne.w	3446 <bt_recv+0x2ca>
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    31ba:	68a7      	ldr	r7, [r4, #8]
    31bc:	f008 ffb4 	bl	c128 <_impl_k_current_get>
	BT_DBG("event 0x%02x", hdr->evt);
    31c0:	783b      	ldrb	r3, [r7, #0]
    31c2:	9300      	str	r3, [sp, #0]
    31c4:	4aa9      	ldr	r2, [pc, #676]	; (346c <bt_recv+0x2f0>)
    31c6:	49aa      	ldr	r1, [pc, #680]	; (3470 <bt_recv+0x2f4>)
    31c8:	4603      	mov	r3, r0
    31ca:	2007      	movs	r0, #7
    31cc:	f7ff f818 	bl	2200 <bt_log>
 * @return true if the event can be processed in the RX thread, false
 *         if it cannot.
 */
static inline bool bt_hci_evt_is_prio(u8_t evt)
{
	switch (evt) {
    31d0:	783b      	ldrb	r3, [r7, #0]
    31d2:	3b0e      	subs	r3, #14
    31d4:	2b01      	cmp	r3, #1
    31d6:	f200 816f 	bhi.w	34b8 <bt_recv+0x33c>
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    31da:	4aa4      	ldr	r2, [pc, #656]	; (346c <bt_recv+0x2f0>)
    31dc:	49a5      	ldr	r1, [pc, #660]	; (3474 <bt_recv+0x2f8>)
    31de:	2003      	movs	r0, #3
    31e0:	f7ff f80e 	bl	2200 <bt_log>
    31e4:	4040      	eors	r0, r0
    31e6:	f380 8811 	msr	BASEPRI, r0
    31ea:	f04f 0004 	mov.w	r0, #4
    31ee:	df02      	svc	2
    31f0:	68a5      	ldr	r5, [r4, #8]
    31f2:	f008 ff99 	bl	c128 <_impl_k_current_get>
	BT_DBG("status: 0x%x", evt->status);
    31f6:	782b      	ldrb	r3, [r5, #0]
    31f8:	9300      	str	r3, [sp, #0]
    31fa:	4a9f      	ldr	r2, [pc, #636]	; (3478 <bt_recv+0x2fc>)
    31fc:	499f      	ldr	r1, [pc, #636]	; (347c <bt_recv+0x300>)
    31fe:	4603      	mov	r3, r0
    3200:	2007      	movs	r0, #7
    3202:	f7fe fffd 	bl	2200 <bt_log>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3206:	f06f 0110 	mvn.w	r1, #16
    320a:	489d      	ldr	r0, [pc, #628]	; (3480 <bt_recv+0x304>)
    320c:	f7ff f95f 	bl	24ce <atomic_and>
	if (!evt->status) {
    3210:	782b      	ldrb	r3, [r5, #0]
    3212:	b943      	cbnz	r3, 3226 <bt_recv+0xaa>
		memcpy(pub_key, evt->key, 64);
    3214:	1c69      	adds	r1, r5, #1
    3216:	2240      	movs	r2, #64	; 0x40
    3218:	489a      	ldr	r0, [pc, #616]	; (3484 <bt_recv+0x308>)
    321a:	f7fd f9fe 	bl	61a <memcpy>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    321e:	2108      	movs	r1, #8
    3220:	4897      	ldr	r0, [pc, #604]	; (3480 <bt_recv+0x304>)
    3222:	f7ff f943 	bl	24ac <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    3226:	4b98      	ldr	r3, [pc, #608]	; (3488 <bt_recv+0x30c>)
    3228:	681e      	ldr	r6, [r3, #0]
		cb->func(evt->status ? NULL : evt->key);
    322a:	1c6f      	adds	r7, r5, #1
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    322c:	b936      	cbnz	r6, 323c <bt_recv+0xc0>
	net_buf_unref(buf);
    322e:	4620      	mov	r0, r4
    3230:	f008 fb58 	bl	b8e4 <net_buf_unref>
		return 0;
    3234:	2000      	movs	r0, #0
}
    3236:	b009      	add	sp, #36	; 0x24
    3238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		cb->func(evt->status ? NULL : evt->key);
    323c:	782a      	ldrb	r2, [r5, #0]
    323e:	6833      	ldr	r3, [r6, #0]
    3240:	2a00      	cmp	r2, #0
    3242:	bf0c      	ite	eq
    3244:	4638      	moveq	r0, r7
    3246:	2000      	movne	r0, #0
    3248:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    324a:	6876      	ldr	r6, [r6, #4]
    324c:	e7ee      	b.n	322c <bt_recv+0xb0>
    324e:	68a5      	ldr	r5, [r4, #8]
	if (dh_key_cb) {
    3250:	4e8e      	ldr	r6, [pc, #568]	; (348c <bt_recv+0x310>)
    3252:	f008 ff69 	bl	c128 <_impl_k_current_get>
	BT_DBG("status: 0x%x", evt->status);
    3256:	782b      	ldrb	r3, [r5, #0]
    3258:	9300      	str	r3, [sp, #0]
    325a:	4a8d      	ldr	r2, [pc, #564]	; (3490 <bt_recv+0x314>)
    325c:	4987      	ldr	r1, [pc, #540]	; (347c <bt_recv+0x300>)
    325e:	4603      	mov	r3, r0
    3260:	2007      	movs	r0, #7
    3262:	f7fe ffcd 	bl	2200 <bt_log>
	if (dh_key_cb) {
    3266:	6832      	ldr	r2, [r6, #0]
    3268:	2a00      	cmp	r2, #0
    326a:	d0e0      	beq.n	322e <bt_recv+0xb2>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    326c:	782b      	ldrb	r3, [r5, #0]
    326e:	b923      	cbnz	r3, 327a <bt_recv+0xfe>
    3270:	1c68      	adds	r0, r5, #1
    3272:	4790      	blx	r2
		dh_key_cb = NULL;
    3274:	2300      	movs	r3, #0
    3276:	6033      	str	r3, [r6, #0]
    3278:	e7d9      	b.n	322e <bt_recv+0xb2>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    327a:	2000      	movs	r0, #0
    327c:	e7f9      	b.n	3272 <bt_recv+0xf6>
	u8_t num_reports = net_buf_pull_u8(buf);
    327e:	4628      	mov	r0, r5
    3280:	f008 fb81 	bl	b986 <net_buf_simple_pull_u8>
    3284:	4680      	mov	r8, r0
    3286:	f008 ff4f 	bl	c128 <_impl_k_current_get>
	BT_DBG("Adv number of reports %u",  num_reports);
    328a:	f8cd 8000 	str.w	r8, [sp]
    328e:	4603      	mov	r3, r0
    3290:	4a80      	ldr	r2, [pc, #512]	; (3494 <bt_recv+0x318>)
    3292:	4981      	ldr	r1, [pc, #516]	; (3498 <bt_recv+0x31c>)
		if (scan_dev_found_cb) {
    3294:	f8df a21c 	ldr.w	sl, [pc, #540]	; 34b4 <bt_recv+0x338>
	BT_DBG("Adv number of reports %u",  num_reports);
    3298:	2007      	movs	r0, #7
    329a:	f7fe ffb1 	bl	2200 <bt_log>
	while (num_reports--) {
    329e:	f1b8 0f00 	cmp.w	r8, #0
    32a2:	d0c4      	beq.n	322e <bt_recv+0xb2>
		info = (void *)buf->data;
    32a4:	68a6      	ldr	r6, [r4, #8]
		net_buf_pull(buf, sizeof(*info));
    32a6:	2109      	movs	r1, #9
    32a8:	4628      	mov	r0, r5
    32aa:	f008 fb64 	bl	b976 <net_buf_simple_pull>
		rssi = info->data[info->length];
    32ae:	7a33      	ldrb	r3, [r6, #8]
    32b0:	4433      	add	r3, r6
		BT_DBG("%s event %u, len %u, rssi %d dBm",
    32b2:	1c77      	adds	r7, r6, #1
		rssi = info->data[info->length];
    32b4:	f993 b009 	ldrsb.w	fp, [r3, #9]
    32b8:	f008 ff36 	bl	c128 <_impl_k_current_get>
    32bc:	4681      	mov	r9, r0
		BT_DBG("%s event %u, len %u, rssi %d dBm",
    32be:	4638      	mov	r0, r7
    32c0:	f7fe fec2 	bl	2048 <bt_addr_le_str>
    32c4:	f8cd b00c 	str.w	fp, [sp, #12]
    32c8:	7a33      	ldrb	r3, [r6, #8]
    32ca:	9302      	str	r3, [sp, #8]
    32cc:	7833      	ldrb	r3, [r6, #0]
    32ce:	4a71      	ldr	r2, [pc, #452]	; (3494 <bt_recv+0x318>)
    32d0:	4972      	ldr	r1, [pc, #456]	; (349c <bt_recv+0x320>)
    32d2:	e88d 0009 	stmia.w	sp, {r0, r3}
    32d6:	464b      	mov	r3, r9
    32d8:	2007      	movs	r0, #7
    32da:	f7fe ff91 	bl	2200 <bt_log>
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    32de:	7873      	ldrb	r3, [r6, #1]
    32e0:	3b02      	subs	r3, #2
    32e2:	2b01      	cmp	r3, #1
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    32e4:	f04f 0207 	mov.w	r2, #7
    32e8:	4639      	mov	r1, r7
    32ea:	a806      	add	r0, sp, #24
    32ec:	d829      	bhi.n	3342 <bt_recv+0x1c6>
    32ee:	f7fd f994 	bl	61a <memcpy>
			id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    32f2:	f89d 3018 	ldrb.w	r3, [sp, #24]
    32f6:	3b02      	subs	r3, #2
    32f8:	f88d 3018 	strb.w	r3, [sp, #24]
		if (scan_dev_found_cb) {
    32fc:	f8da 3000 	ldr.w	r3, [sl]
    3300:	b1ab      	cbz	r3, 332e <bt_recv+0x1b2>
 *  @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    3302:	4628      	mov	r0, r5
    3304:	f008 fb47 	bl	b996 <net_buf_simple_headroom>
	state->len = buf->len;
    3308:	89a3      	ldrh	r3, [r4, #12]
    330a:	9305      	str	r3, [sp, #20]
			buf->len = info->length;
    330c:	7a33      	ldrb	r3, [r6, #8]
    330e:	81a3      	strh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    3310:	4681      	mov	r9, r0
			scan_dev_found_cb(&id_addr, rssi, info->evt_type,
    3312:	462b      	mov	r3, r5
    3314:	7832      	ldrb	r2, [r6, #0]
    3316:	f8da 7000 	ldr.w	r7, [sl]
    331a:	4659      	mov	r1, fp
    331c:	a806      	add	r0, sp, #24
    331e:	47b8      	blx	r7
 *  @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
    3320:	6923      	ldr	r3, [r4, #16]
    3322:	fa13 f389 	uxtah	r3, r3, r9
    3326:	60a3      	str	r3, [r4, #8]
	buf->len = state->len;
    3328:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    332c:	81a3      	strh	r3, [r4, #12]
		net_buf_pull(buf, info->length + sizeof(rssi));
    332e:	7a31      	ldrb	r1, [r6, #8]
    3330:	4628      	mov	r0, r5
    3332:	3101      	adds	r1, #1
    3334:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    3338:	f008 fb1d 	bl	b976 <net_buf_simple_pull>
    333c:	fa5f f888 	uxtb.w	r8, r8
    3340:	e7ad      	b.n	329e <bt_recv+0x122>
    3342:	f7fd f96a 	bl	61a <memcpy>
    3346:	e7d9      	b.n	32fc <bt_recv+0x180>
	u8_t num_reports = net_buf_pull_u8(buf);
    3348:	4628      	mov	r0, r5
    334a:	f008 fb1c 	bl	b986 <net_buf_simple_pull_u8>
    334e:	4680      	mov	r8, r0
    3350:	f008 feea 	bl	c128 <_impl_k_current_get>
	BT_DBG("Adv number of reports %u",  num_reports);
    3354:	f8cd 8000 	str.w	r8, [sp]
    3358:	4603      	mov	r3, r0
    335a:	4a51      	ldr	r2, [pc, #324]	; (34a0 <bt_recv+0x324>)
    335c:	494e      	ldr	r1, [pc, #312]	; (3498 <bt_recv+0x31c>)
		if (scan_dev_found_cb) {
    335e:	f8df a154 	ldr.w	sl, [pc, #340]	; 34b4 <bt_recv+0x338>
	BT_DBG("Adv number of reports %u",  num_reports);
    3362:	2007      	movs	r0, #7
    3364:	f7fe ff4c 	bl	2200 <bt_log>
	while (num_reports--) {
    3368:	f1b8 0f00 	cmp.w	r8, #0
    336c:	f43f af5f 	beq.w	322e <bt_recv+0xb2>
		info = (void *)buf->data;
    3370:	68a6      	ldr	r6, [r4, #8]
		net_buf_pull(buf, sizeof(*info));
    3372:	2117      	movs	r1, #23
    3374:	4628      	mov	r0, r5
    3376:	f008 fafe 	bl	b976 <net_buf_simple_pull>
		rssi = info->data[info->length];
    337a:	7db3      	ldrb	r3, [r6, #22]
    337c:	4433      	add	r3, r6
		BT_DBG("%s event %u, len %u, rssi %d dBm",
    337e:	1c77      	adds	r7, r6, #1
		rssi = info->data[info->length];
    3380:	f993 b017 	ldrsb.w	fp, [r3, #23]
    3384:	f008 fed0 	bl	c128 <_impl_k_current_get>
    3388:	4681      	mov	r9, r0
		BT_DBG("%s event %u, len %u, rssi %d dBm",
    338a:	4638      	mov	r0, r7
    338c:	f7fe fe5c 	bl	2048 <bt_addr_le_str>
    3390:	f8cd b00c 	str.w	fp, [sp, #12]
    3394:	7db3      	ldrb	r3, [r6, #22]
    3396:	9302      	str	r3, [sp, #8]
    3398:	7833      	ldrb	r3, [r6, #0]
    339a:	4a41      	ldr	r2, [pc, #260]	; (34a0 <bt_recv+0x324>)
    339c:	493f      	ldr	r1, [pc, #252]	; (349c <bt_recv+0x320>)
    339e:	e88d 0009 	stmia.w	sp, {r0, r3}
    33a2:	464b      	mov	r3, r9
    33a4:	2007      	movs	r0, #7
    33a6:	f7fe ff2b 	bl	2200 <bt_log>
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    33aa:	7873      	ldrb	r3, [r6, #1]
    33ac:	3b02      	subs	r3, #2
    33ae:	2b01      	cmp	r3, #1
    33b0:	f04f 0207 	mov.w	r2, #7
    33b4:	4639      	mov	r1, r7
    33b6:	a806      	add	r0, sp, #24
    33b8:	d829      	bhi.n	340e <bt_recv+0x292>
    33ba:	f7fd f92e 	bl	61a <memcpy>
			id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    33be:	f89d 3018 	ldrb.w	r3, [sp, #24]
    33c2:	3b02      	subs	r3, #2
    33c4:	f88d 3018 	strb.w	r3, [sp, #24]
		if (scan_dev_found_cb) {
    33c8:	f8da 3000 	ldr.w	r3, [sl]
    33cc:	b1ab      	cbz	r3, 33fa <bt_recv+0x27e>
	state->offset = net_buf_simple_headroom(buf);
    33ce:	4628      	mov	r0, r5
    33d0:	f008 fae1 	bl	b996 <net_buf_simple_headroom>
	state->len = buf->len;
    33d4:	89a3      	ldrh	r3, [r4, #12]
    33d6:	9305      	str	r3, [sp, #20]
			buf->len = info->length;
    33d8:	7db3      	ldrb	r3, [r6, #22]
    33da:	81a3      	strh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    33dc:	4681      	mov	r9, r0
			scan_dev_found_cb(&id_addr, rssi, info->evt_type,
    33de:	462b      	mov	r3, r5
    33e0:	7832      	ldrb	r2, [r6, #0]
    33e2:	f8da 7000 	ldr.w	r7, [sl]
    33e6:	4659      	mov	r1, fp
    33e8:	a806      	add	r0, sp, #24
    33ea:	47b8      	blx	r7
	buf->data = buf->__buf + state->offset;
    33ec:	6923      	ldr	r3, [r4, #16]
    33ee:	fa13 f389 	uxtah	r3, r3, r9
    33f2:	60a3      	str	r3, [r4, #8]
	buf->len = state->len;
    33f4:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    33f8:	81a3      	strh	r3, [r4, #12]
		net_buf_pull(buf, info->length + sizeof(rssi));
    33fa:	7db1      	ldrb	r1, [r6, #22]
    33fc:	4628      	mov	r0, r5
    33fe:	3101      	adds	r1, #1
    3400:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    3404:	f008 fab7 	bl	b976 <net_buf_simple_pull>
    3408:	fa5f f888 	uxtb.w	r8, r8
    340c:	e7ac      	b.n	3368 <bt_recv+0x1ec>
    340e:	f7fd f904 	bl	61a <memcpy>
    3412:	e7d9      	b.n	33c8 <bt_recv+0x24c>
		BT_WARN("Unhandled LE event 0x%02x len %u: %s",
    3414:	89a5      	ldrh	r5, [r4, #12]
    3416:	68a0      	ldr	r0, [r4, #8]
    3418:	4629      	mov	r1, r5
    341a:	f7fe fdb9 	bl	1f90 <bt_hex>
    341e:	4a21      	ldr	r2, [pc, #132]	; (34a4 <bt_recv+0x328>)
    3420:	4921      	ldr	r1, [pc, #132]	; (34a8 <bt_recv+0x32c>)
    3422:	9001      	str	r0, [sp, #4]
    3424:	9500      	str	r5, [sp, #0]
    3426:	4633      	mov	r3, r6
		BT_WARN("Unhandled event 0x%02x len %u: %s", hdr->evt,
    3428:	2004      	movs	r0, #4
    342a:	f7fe fee9 	bl	2200 <bt_log>
    342e:	e6fe      	b.n	322e <bt_recv+0xb2>
    3430:	89a5      	ldrh	r5, [r4, #12]
    3432:	68a0      	ldr	r0, [r4, #8]
    3434:	4629      	mov	r1, r5
    3436:	f7fe fdab 	bl	1f90 <bt_hex>
    343a:	9500      	str	r5, [sp, #0]
    343c:	9001      	str	r0, [sp, #4]
    343e:	463b      	mov	r3, r7
    3440:	4a0a      	ldr	r2, [pc, #40]	; (346c <bt_recv+0x2f0>)
    3442:	491a      	ldr	r1, [pc, #104]	; (34ac <bt_recv+0x330>)
    3444:	e7f0      	b.n	3428 <bt_recv+0x2ac>
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    3446:	4633      	mov	r3, r6
    3448:	4a06      	ldr	r2, [pc, #24]	; (3464 <bt_recv+0x2e8>)
    344a:	4919      	ldr	r1, [pc, #100]	; (34b0 <bt_recv+0x334>)
    344c:	2003      	movs	r0, #3
    344e:	f7fe fed7 	bl	2200 <bt_log>
		net_buf_unref(buf);
    3452:	4620      	mov	r0, r4
    3454:	f008 fa46 	bl	b8e4 <net_buf_unref>
		return -EINVAL;
    3458:	f06f 0015 	mvn.w	r0, #21
    345c:	e6eb      	b.n	3236 <bt_recv+0xba>
    345e:	bf00      	nop
    3460:	0000d355 	.word	0x0000d355
    3464:	0000d52f 	.word	0x0000d52f
    3468:	0000d6ac 	.word	0x0000d6ac
    346c:	0000d428 	.word	0x0000d428
    3470:	0000d6c3 	.word	0x0000d6c3
    3474:	0000d7bb 	.word	0x0000d7bb
    3478:	0000d393 	.word	0x0000d393
    347c:	0000d6f2 	.word	0x0000d6f2
    3480:	20004c90 	.word	0x20004c90
    3484:	2000079c 	.word	0x2000079c
    3488:	200007dc 	.word	0x200007dc
    348c:	20000798 	.word	0x20000798
    3490:	0000d3a4 	.word	0x0000d3a4
    3494:	0000d408 	.word	0x0000d408
    3498:	0000d708 	.word	0x0000d708
    349c:	0000d72a 	.word	0x0000d72a
    34a0:	0000d3f6 	.word	0x0000d3f6
    34a4:	0000d416 	.word	0x0000d416
    34a8:	0000d754 	.word	0x0000d754
    34ac:	0000d77d 	.word	0x0000d77d
    34b0:	0000d7a3 	.word	0x0000d7a3
    34b4:	200007e4 	.word	0x200007e4
	net_buf_pull(buf, sizeof(*hdr));
    34b8:	f104 0508 	add.w	r5, r4, #8
    34bc:	2102      	movs	r1, #2
    34be:	4628      	mov	r0, r5
    34c0:	f008 fa59 	bl	b976 <net_buf_simple_pull>
	switch (hdr->evt) {
    34c4:	783f      	ldrb	r7, [r7, #0]
    34c6:	2f3e      	cmp	r7, #62	; 0x3e
    34c8:	d1b2      	bne.n	3430 <bt_recv+0x2b4>
	struct bt_hci_evt_le_meta_event *evt = (void *)buf->data;
    34ca:	68a7      	ldr	r7, [r4, #8]
    34cc:	f008 fe2c 	bl	c128 <_impl_k_current_get>
	BT_DBG("subevent 0x%02x", evt->subevent);
    34d0:	783b      	ldrb	r3, [r7, #0]
    34d2:	9300      	str	r3, [sp, #0]
    34d4:	4a14      	ldr	r2, [pc, #80]	; (3528 <bt_recv+0x3ac>)
    34d6:	4915      	ldr	r1, [pc, #84]	; (352c <bt_recv+0x3b0>)
    34d8:	4603      	mov	r3, r0
    34da:	2007      	movs	r0, #7
    34dc:	f7fe fe90 	bl	2200 <bt_log>
	net_buf_pull(buf, sizeof(*evt));
    34e0:	4631      	mov	r1, r6
    34e2:	4628      	mov	r0, r5
    34e4:	f008 fa47 	bl	b976 <net_buf_simple_pull>
	switch (evt->subevent) {
    34e8:	783e      	ldrb	r6, [r7, #0]
    34ea:	1eb3      	subs	r3, r6, #2
    34ec:	2b0b      	cmp	r3, #11
    34ee:	d891      	bhi.n	3414 <bt_recv+0x298>
    34f0:	a201      	add	r2, pc, #4	; (adr r2, 34f8 <bt_recv+0x37c>)
    34f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    34f6:	bf00      	nop
    34f8:	0000327f 	.word	0x0000327f
    34fc:	00003415 	.word	0x00003415
    3500:	00003415 	.word	0x00003415
    3504:	00003415 	.word	0x00003415
    3508:	00003415 	.word	0x00003415
    350c:	00003415 	.word	0x00003415
    3510:	000031f1 	.word	0x000031f1
    3514:	0000324f 	.word	0x0000324f
    3518:	00003415 	.word	0x00003415
    351c:	00003415 	.word	0x00003415
    3520:	00003415 	.word	0x00003415
    3524:	00003349 	.word	0x00003349
    3528:	0000d416 	.word	0x0000d416
    352c:	0000d6d9 	.word	0x0000d6d9

00003530 <bt_recv_prio>:
{
    3530:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    3534:	7d03      	ldrb	r3, [r0, #20]
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    3536:	6886      	ldr	r6, [r0, #8]
    3538:	2b03      	cmp	r3, #3
{
    353a:	4604      	mov	r4, r0
    353c:	bf96      	itet	ls
    353e:	4a37      	ldrls	r2, [pc, #220]	; (361c <bt_recv_prio+0xec>)
    3540:	20ff      	movhi	r0, #255	; 0xff
    3542:	5cd0      	ldrbls	r0, [r2, r3]
	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);
    3544:	89a2      	ldrh	r2, [r4, #12]
    3546:	4631      	mov	r1, r6
    3548:	f7fe fec8 	bl	22dc <bt_monitor_send>
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    354c:	7d23      	ldrb	r3, [r4, #20]
    354e:	2b01      	cmp	r3, #1
    3550:	d00a      	beq.n	3568 <bt_recv_prio+0x38>
    3552:	4a33      	ldr	r2, [pc, #204]	; (3620 <bt_recv_prio+0xf0>)
    3554:	4933      	ldr	r1, [pc, #204]	; (3624 <bt_recv_prio+0xf4>)
	BT_ASSERT(buf->len >= sizeof(*hdr));
    3556:	2003      	movs	r0, #3
    3558:	f7fe fe52 	bl	2200 <bt_log>
    355c:	4040      	eors	r0, r0
    355e:	f380 8811 	msr	BASEPRI, r0
    3562:	f04f 0004 	mov.w	r0, #4
    3566:	df02      	svc	2
    3568:	89a3      	ldrh	r3, [r4, #12]
    356a:	2b01      	cmp	r3, #1
    356c:	d802      	bhi.n	3574 <bt_recv_prio+0x44>
    356e:	4a2c      	ldr	r2, [pc, #176]	; (3620 <bt_recv_prio+0xf0>)
    3570:	492d      	ldr	r1, [pc, #180]	; (3628 <bt_recv_prio+0xf8>)
    3572:	e7f0      	b.n	3556 <bt_recv_prio+0x26>
    3574:	7833      	ldrb	r3, [r6, #0]
    3576:	3b0e      	subs	r3, #14
    3578:	2b01      	cmp	r3, #1
    357a:	d84c      	bhi.n	3616 <bt_recv_prio+0xe6>
	net_buf_pull(buf, sizeof(*hdr));
    357c:	f104 0508 	add.w	r5, r4, #8
    3580:	2102      	movs	r1, #2
    3582:	4628      	mov	r0, r5
    3584:	f008 f9f7 	bl	b976 <net_buf_simple_pull>
	switch (hdr->evt) {
    3588:	7833      	ldrb	r3, [r6, #0]
    358a:	2b0e      	cmp	r3, #14
    358c:	d007      	beq.n	359e <bt_recv_prio+0x6e>
    358e:	2b0f      	cmp	r3, #15
    3590:	d027      	beq.n	35e2 <bt_recv_prio+0xb2>
		net_buf_unref(buf);
    3592:	4620      	mov	r0, r4
    3594:	f008 f9a6 	bl	b8e4 <net_buf_unref>
		BT_ASSERT(0);
    3598:	4a21      	ldr	r2, [pc, #132]	; (3620 <bt_recv_prio+0xf0>)
    359a:	4924      	ldr	r1, [pc, #144]	; (362c <bt_recv_prio+0xfc>)
    359c:	e7db      	b.n	3556 <bt_recv_prio+0x26>
	struct bt_hci_evt_cmd_complete *evt = (void *)buf->data;
    359e:	68a3      	ldr	r3, [r4, #8]
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    35a0:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	u8_t status, ncmd = evt->ncmd;
    35a4:	781f      	ldrb	r7, [r3, #0]
    35a6:	f008 fdbf 	bl	c128 <_impl_k_current_get>
	BT_DBG("opcode 0x%04x", opcode);
    35aa:	4a21      	ldr	r2, [pc, #132]	; (3630 <bt_recv_prio+0x100>)
    35ac:	4921      	ldr	r1, [pc, #132]	; (3634 <bt_recv_prio+0x104>)
    35ae:	9600      	str	r6, [sp, #0]
    35b0:	4603      	mov	r3, r0
    35b2:	2007      	movs	r0, #7
    35b4:	f7fe fe24 	bl	2200 <bt_log>
	net_buf_pull(buf, sizeof(*evt));
    35b8:	2103      	movs	r1, #3
    35ba:	4628      	mov	r0, r5
    35bc:	f008 f9db 	bl	b976 <net_buf_simple_pull>
	status = buf->data[0];
    35c0:	68a3      	ldr	r3, [r4, #8]
	hci_cmd_done(opcode, status, buf);
    35c2:	4622      	mov	r2, r4
    35c4:	7819      	ldrb	r1, [r3, #0]
    35c6:	4630      	mov	r0, r6
    35c8:	f7fe ff92 	bl	24f0 <hci_cmd_done>
	if (ncmd) {
    35cc:	b117      	cbz	r7, 35d4 <bt_recv_prio+0xa4>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    35ce:	481a      	ldr	r0, [pc, #104]	; (3638 <bt_recv_prio+0x108>)
    35d0:	f008 fe08 	bl	c1e4 <_impl_k_sem_give>
	net_buf_unref(buf);
    35d4:	4620      	mov	r0, r4
    35d6:	f008 f985 	bl	b8e4 <net_buf_unref>
}
    35da:	2000      	movs	r0, #0
    35dc:	b002      	add	sp, #8
    35de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	struct bt_hci_evt_cmd_status *evt = (void *)buf->data;
    35e2:	68a6      	ldr	r6, [r4, #8]
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    35e4:	8877      	ldrh	r7, [r6, #2]
	u8_t ncmd = evt->ncmd;
    35e6:	f896 8001 	ldrb.w	r8, [r6, #1]
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    35ea:	f008 fd9d 	bl	c128 <_impl_k_current_get>
	BT_DBG("opcode 0x%04x", opcode);
    35ee:	4a13      	ldr	r2, [pc, #76]	; (363c <bt_recv_prio+0x10c>)
    35f0:	4910      	ldr	r1, [pc, #64]	; (3634 <bt_recv_prio+0x104>)
    35f2:	9700      	str	r7, [sp, #0]
    35f4:	4603      	mov	r3, r0
    35f6:	2007      	movs	r0, #7
    35f8:	f7fe fe02 	bl	2200 <bt_log>
	net_buf_pull(buf, sizeof(*evt));
    35fc:	2104      	movs	r1, #4
    35fe:	4628      	mov	r0, r5
    3600:	f008 f9b9 	bl	b976 <net_buf_simple_pull>
	hci_cmd_done(opcode, evt->status, buf);
    3604:	4622      	mov	r2, r4
    3606:	7831      	ldrb	r1, [r6, #0]
    3608:	4638      	mov	r0, r7
    360a:	f7fe ff71 	bl	24f0 <hci_cmd_done>
	if (ncmd) {
    360e:	f1b8 0f00 	cmp.w	r8, #0
    3612:	d0df      	beq.n	35d4 <bt_recv_prio+0xa4>
    3614:	e7db      	b.n	35ce <bt_recv_prio+0x9e>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    3616:	4a02      	ldr	r2, [pc, #8]	; (3620 <bt_recv_prio+0xf0>)
    3618:	4909      	ldr	r1, [pc, #36]	; (3640 <bt_recv_prio+0x110>)
    361a:	e79c      	b.n	3556 <bt_recv_prio+0x26>
    361c:	0000d355 	.word	0x0000d355
    3620:	0000d537 	.word	0x0000d537
    3624:	0000d7ee 	.word	0x0000d7ee
    3628:	0000d826 	.word	0x0000d826
    362c:	0000d86b 	.word	0x0000d86b
    3630:	0000d3d6 	.word	0x0000d3d6
    3634:	0000d854 	.word	0x0000d854
    3638:	20004ca8 	.word	0x20004ca8
    363c:	0000d3e7 	.word	0x0000d3e7
    3640:	0000d882 	.word	0x0000d882

00003644 <bt_hci_driver_register>:
{
    3644:	b530      	push	{r4, r5, lr}
	if (bt_dev.drv) {
    3646:	4b18      	ldr	r3, [pc, #96]	; (36a8 <bt_hci_driver_register+0x64>)
    3648:	f8d3 40c4 	ldr.w	r4, [r3, #196]	; 0xc4
{
    364c:	b085      	sub	sp, #20
    364e:	4605      	mov	r5, r0
	if (bt_dev.drv) {
    3650:	bb1c      	cbnz	r4, 369a <bt_hci_driver_register+0x56>
	if (!drv->open || !drv->send) {
    3652:	6882      	ldr	r2, [r0, #8]
    3654:	b322      	cbz	r2, 36a0 <bt_hci_driver_register+0x5c>
    3656:	68c2      	ldr	r2, [r0, #12]
    3658:	b312      	cbz	r2, 36a0 <bt_hci_driver_register+0x5c>
	bt_dev.drv = drv;
    365a:	f8c3 00c4 	str.w	r0, [r3, #196]	; 0xc4
    365e:	f008 fd63 	bl	c128 <_impl_k_current_get>
	BT_DBG("Registered %s", drv->name ? drv->name : "");
    3662:	682b      	ldr	r3, [r5, #0]
    3664:	4a11      	ldr	r2, [pc, #68]	; (36ac <bt_hci_driver_register+0x68>)
    3666:	4912      	ldr	r1, [pc, #72]	; (36b0 <bt_hci_driver_register+0x6c>)
    3668:	2b00      	cmp	r3, #0
    366a:	bf08      	it	eq
    366c:	4613      	moveq	r3, r2
    366e:	9300      	str	r3, [sp, #0]
    3670:	4a10      	ldr	r2, [pc, #64]	; (36b4 <bt_hci_driver_register+0x70>)
    3672:	4603      	mov	r3, r0
    3674:	2007      	movs	r0, #7
    3676:	f7fe fdc3 	bl	2200 <bt_log>
			     BT_ADDR_ANY, drv->name ? drv->name : "bt0");
    367a:	682b      	ldr	r3, [r5, #0]
	bt_monitor_new_index(BT_MONITOR_TYPE_PRIMARY, drv->bus,
    367c:	4a0e      	ldr	r2, [pc, #56]	; (36b8 <bt_hci_driver_register+0x74>)
    367e:	7929      	ldrb	r1, [r5, #4]
			     BT_ADDR_ANY, drv->name ? drv->name : "bt0");
    3680:	9402      	str	r4, [sp, #8]
	bt_monitor_new_index(BT_MONITOR_TYPE_PRIMARY, drv->bus,
    3682:	2b00      	cmp	r3, #0
    3684:	bf08      	it	eq
    3686:	4613      	moveq	r3, r2
    3688:	4620      	mov	r0, r4
    368a:	aa02      	add	r2, sp, #8
			     BT_ADDR_ANY, drv->name ? drv->name : "bt0");
    368c:	f8ad 400c 	strh.w	r4, [sp, #12]
	bt_monitor_new_index(BT_MONITOR_TYPE_PRIMARY, drv->bus,
    3690:	f7fe feba 	bl	2408 <bt_monitor_new_index>
	return 0;
    3694:	4620      	mov	r0, r4
}
    3696:	b005      	add	sp, #20
    3698:	bd30      	pop	{r4, r5, pc}
		return -EALREADY;
    369a:	f06f 0044 	mvn.w	r0, #68	; 0x44
    369e:	e7fa      	b.n	3696 <bt_hci_driver_register+0x52>
		return -EINVAL;
    36a0:	f06f 0015 	mvn.w	r0, #21
    36a4:	e7f7      	b.n	3696 <bt_hci_driver_register+0x52>
    36a6:	bf00      	nop
    36a8:	20004c20 	.word	0x20004c20
    36ac:	0000cd2f 	.word	0x0000cd2f
    36b0:	0000d695 	.word	0x0000d695
    36b4:	0000d544 	.word	0x0000d544
    36b8:	0000d691 	.word	0x0000d691

000036bc <bt_enable>:
{
    36bc:	b570      	push	{r4, r5, r6, lr}
	if (!bt_dev.drv) {
    36be:	4d28      	ldr	r5, [pc, #160]	; (3760 <bt_enable+0xa4>)
    36c0:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
{
    36c4:	b086      	sub	sp, #24
    36c6:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    36c8:	b94b      	cbnz	r3, 36de <bt_enable+0x22>
		BT_ERR("No HCI driver registered");
    36ca:	4a26      	ldr	r2, [pc, #152]	; (3764 <bt_enable+0xa8>)
    36cc:	4926      	ldr	r1, [pc, #152]	; (3768 <bt_enable+0xac>)
    36ce:	2003      	movs	r0, #3
    36d0:	f7fe fd96 	bl	2200 <bt_log>
		return -ENODEV;
    36d4:	f06f 0412 	mvn.w	r4, #18
}
    36d8:	4620      	mov	r0, r4
    36da:	b006      	add	sp, #24
    36dc:	bd70      	pop	{r4, r5, r6, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    36de:	2101      	movs	r1, #1
    36e0:	f105 0070 	add.w	r0, r5, #112	; 0x70
    36e4:	f7fe fee2 	bl	24ac <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    36e8:	f010 0001 	ands.w	r0, r0, #1
    36ec:	d135      	bne.n	375a <bt_enable+0x9e>
	ready_cb = cb;
    36ee:	4b1f      	ldr	r3, [pc, #124]	; (376c <bt_enable+0xb0>)

    36f0:	491f      	ldr	r1, [pc, #124]	; (3770 <bt_enable+0xb4>)
    36f2:	601e      	str	r6, [r3, #0]
    36f4:	f06f 0308 	mvn.w	r3, #8
    36f8:	9005      	str	r0, [sp, #20]
    36fa:	9004      	str	r0, [sp, #16]
    36fc:	9303      	str	r3, [sp, #12]
    36fe:	9002      	str	r0, [sp, #8]
    3700:	9001      	str	r0, [sp, #4]
    3702:	9000      	str	r0, [sp, #0]
    3704:	4b1b      	ldr	r3, [pc, #108]	; (3774 <bt_enable+0xb8>)
    3706:	481c      	ldr	r0, [pc, #112]	; (3778 <bt_enable+0xbc>)
    3708:	f44f 726b 	mov.w	r2, #940	; 0x3ac
    370c:	f008 ffa6 	bl	c65c <_impl_k_thread_create>
	err = bt_dev.drv->open();
    3710:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
    3714:	689b      	ldr	r3, [r3, #8]
    3716:	4798      	blx	r3
	if (err) {
    3718:	4604      	mov	r4, r0
    371a:	b130      	cbz	r0, 372a <bt_enable+0x6e>
		BT_ERR("HCI driver open failed (%d)", err);
    371c:	4603      	mov	r3, r0
    371e:	4a11      	ldr	r2, [pc, #68]	; (3764 <bt_enable+0xa8>)
    3720:	4916      	ldr	r1, [pc, #88]	; (377c <bt_enable+0xc0>)
    3722:	2003      	movs	r0, #3
    3724:	f7fe fd6c 	bl	2200 <bt_log>
		return err;
    3728:	e7d6      	b.n	36d8 <bt_enable+0x1c>
	if (!cb) {
    372a:	b94e      	cbnz	r6, 3740 <bt_enable+0x84>
	err = hci_init();
    372c:	f7ff f908 	bl	2940 <hci_init>
	if (err) {
    3730:	4604      	mov	r4, r0
    3732:	2800      	cmp	r0, #0
    3734:	d1d0      	bne.n	36d8 <bt_enable+0x1c>
}
    3736:	b006      	add	sp, #24
    3738:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    373c:	f7ff b8e0 	b.w	2900 <bt_init.part.13>
    3740:	2101      	movs	r1, #1
    3742:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    3746:	f7fe feb1 	bl	24ac <atomic_or>
 * @return N/A
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    374a:	07c3      	lsls	r3, r0, #31
    374c:	d4c4      	bmi.n	36d8 <bt_enable+0x1c>
		k_queue_append(&work_q->queue, work);
    374e:	f105 0164 	add.w	r1, r5, #100	; 0x64
    3752:	480b      	ldr	r0, [pc, #44]	; (3780 <bt_enable+0xc4>)
    3754:	f008 fafb 	bl	bd4e <k_queue_append>
    3758:	e7be      	b.n	36d8 <bt_enable+0x1c>
		return -EALREADY;
    375a:	f06f 0444 	mvn.w	r4, #68	; 0x44
    375e:	e7bb      	b.n	36d8 <bt_enable+0x1c>
    3760:	20004c20 	.word	0x20004c20
    3764:	0000d55b 	.word	0x0000d55b
    3768:	0000d592 	.word	0x0000d592
    376c:	200007e0 	.word	0x200007e0
    3770:	20002cb8 	.word	0x20002cb8
    3774:	00002fb9 	.word	0x00002fb9
    3778:	200007e8 	.word	0x200007e8
    377c:	0000d5af 	.word	0x0000d5af
    3780:	20002c40 	.word	0x20002c40

00003784 <bt_le_ext_adv_start>:


int bt_le_ext_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    3784:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3788:	b089      	sub	sp, #36	; 0x24
    378a:	4605      	mov	r5, r0
    378c:	460f      	mov	r7, r1
    378e:	4690      	mov	r8, r2
    3790:	461e      	mov	r6, r3
	struct bt_hci_cp_le_set_ext_adv_param set_param;
	struct net_buf *buf;
	int err;

	if (!valid_adv_param(param)) {
    3792:	f7fe fe71 	bl	2478 <valid_adv_param>
    3796:	b928      	cbnz	r0, 37a4 <bt_le_ext_adv_start+0x20>
		return -EINVAL;
    3798:	f06f 0415 	mvn.w	r4, #21
	if (!(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING);
	}

	return 0;
}
    379c:	4620      	mov	r0, r4
    379e:	b009      	add	sp, #36	; 0x24
    37a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    37a4:	2005      	movs	r0, #5
    37a6:	f7fe ff05 	bl	25b4 <atomic_test_bit.constprop.23>
    37aa:	4604      	mov	r4, r0
    37ac:	2800      	cmp	r0, #0
    37ae:	f040 80a4 	bne.w	38fa <bt_le_ext_adv_start+0x176>
	memset(&set_param, 0, sizeof(set_param));
    37b2:	4601      	mov	r1, r0
    37b4:	2217      	movs	r2, #23
    37b6:	a802      	add	r0, sp, #8
    37b8:	f7fc ff5b 	bl	672 <memset>
	set_param.prim_min_interval = sys_cpu_to_le16(param->interval_min);
    37bc:	886b      	ldrh	r3, [r5, #2]
    37be:	f8ad 300b 	strh.w	r3, [sp, #11]
	set_param.prim_max_interval = sys_cpu_to_le16(param->interval_max);
    37c2:	88ab      	ldrh	r3, [r5, #4]
    37c4:	f8ad 300d 	strh.w	r3, [sp, #13]
	set_param.prim_channel_map  = 0x07;
    37c8:	2307      	movs	r3, #7
    37ca:	f88d 300f 	strb.w	r3, [sp, #15]
	set_param.prim_adv_phy  	= 0x01;
    37ce:	2301      	movs	r3, #1
    37d0:	f88d 301a 	strb.w	r3, [sp, #26]
	set_param.sec_adv_max_skip  = 0x01;                                   //0x01
    37d4:	f88d 301b 	strb.w	r3, [sp, #27]
	u8_t direct_address[]		= {0x06,0x05,0x04,0x03,0x02,0x01};			//write address in reverse order
    37d8:	4b49      	ldr	r3, [pc, #292]	; (3900 <bt_le_ext_adv_start+0x17c>)
	set_param.handle			= 0x00;
    37da:	f88d 4008 	strb.w	r4, [sp, #8]
	u8_t direct_address[]		= {0x06,0x05,0x04,0x03,0x02,0x01};			//write address in reverse order
    37de:	6818      	ldr	r0, [r3, #0]
    37e0:	9000      	str	r0, [sp, #0]
    37e2:	889b      	ldrh	r3, [r3, #4]
    37e4:	f8ad 3004 	strh.w	r3, [sp, #4]
	memcpy(&set_param.direct_addr.a.val, direct_address, sizeof(direct_address));
    37e8:	4669      	mov	r1, sp
	set_param.sid 				= 0x02;
    37ea:	f04f 0902 	mov.w	r9, #2
	memcpy(&set_param.direct_addr.a.val, direct_address, sizeof(direct_address));
    37ee:	2206      	movs	r2, #6
    37f0:	f10d 0012 	add.w	r0, sp, #18
	set_param.sid 				= 0x02;
    37f4:	f88d 901d 	strb.w	r9, [sp, #29]
	set_param.sec_adv_phy		= 0x00;  
    37f8:	f88d 401c 	strb.w	r4, [sp, #28]
	memcpy(&set_param.direct_addr.a.val, direct_address, sizeof(direct_address));
    37fc:	f7fc ff0d 	bl	61a <memcpy>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    3800:	782b      	ldrb	r3, [r5, #0]
    3802:	07d9      	lsls	r1, r3, #31
    3804:	d51a      	bpl.n	383c <bt_le_ext_adv_start+0xb8>
			if (atomic_test_bit(bt_dev.flags,
    3806:	4648      	mov	r0, r9
    3808:	f7fe fed4 	bl	25b4 <atomic_test_bit.constprop.23>
    380c:	b110      	cbz	r0, 3814 <bt_le_ext_adv_start+0x90>
				set_random_address(&bt_dev.id_addr.a);
    380e:	483d      	ldr	r0, [pc, #244]	; (3904 <bt_le_ext_adv_start+0x180>)
    3810:	f7fe ff92 	bl	2738 <set_random_address>
			set_param.own_addr_type = bt_dev.id_addr.type;
    3814:	4b3c      	ldr	r3, [pc, #240]	; (3908 <bt_le_ext_adv_start+0x184>)
    3816:	781b      	ldrb	r3, [r3, #0]
    3818:	f88d 3010 	strb.w	r3, [sp, #16]
		set_param.props = BT_HCI_LE_ADV_PROP_CONN | BT_HCI_LE_ADV_PROP_SCAN;				// BT_LE_ADV_IND;
    381c:	2303      	movs	r3, #3
    381e:	f88d 3009 	strb.w	r3, [sp, #9]
    3822:	2300      	movs	r3, #0
    3824:	f88d 300a 	strb.w	r3, [sp, #10]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EXT_ADV_PARAM, sizeof(set_param));
    3828:	2117      	movs	r1, #23
    382a:	f242 0036 	movw	r0, #8246	; 0x2036
    382e:	f7fe fed3 	bl	25d8 <bt_hci_cmd_create>
	if (!buf) {
    3832:	4604      	mov	r4, r0
    3834:	b9c8      	cbnz	r0, 386a <bt_le_ext_adv_start+0xe6>
		return -ENOBUFS;
    3836:	f06f 0436 	mvn.w	r4, #54	; 0x36
    383a:	e7af      	b.n	379c <bt_le_ext_adv_start+0x18>
		if (param->own_addr) {
    383c:	68a8      	ldr	r0, [r5, #8]
    383e:	b188      	cbz	r0, 3864 <bt_le_ext_adv_start+0xe0>
			if (!BT_ADDR_IS_NRPA(param->own_addr)) {
    3840:	7943      	ldrb	r3, [r0, #5]
    3842:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    3846:	d1a7      	bne.n	3798 <bt_le_ext_adv_start+0x14>
			err = set_random_address(param->own_addr);
    3848:	f7fe ff76 	bl	2738 <set_random_address>
			err = le_set_private_addr();
    384c:	4604      	mov	r4, r0
		if (err) {
    384e:	2800      	cmp	r0, #0
    3850:	d1a4      	bne.n	379c <bt_le_ext_adv_start+0x18>
		set_param.own_addr_type = BT_ADDR_LE_RANDOM;									//own_addr_type
    3852:	2301      	movs	r3, #1
    3854:	f88d 3010 	strb.w	r3, [sp, #16]
			set_param.props =  BT_HCI_LE_ADV_PROP_TX_POWER  ; //|BT_HCI_LE_ADV_PROP_DIRECT |BT_HCI_LE_ADV_PROP_SCAN |;		//BT_LE_ADV_SCAN_IND and trx pwr
    3858:	2340      	movs	r3, #64	; 0x40
    385a:	f88d 3009 	strb.w	r3, [sp, #9]
    385e:	f88d 000a 	strb.w	r0, [sp, #10]
    3862:	e7e1      	b.n	3828 <bt_le_ext_adv_start+0xa4>
			err = le_set_private_addr();
    3864:	f7fe ffa8 	bl	27b8 <le_set_private_addr>
    3868:	e7f0      	b.n	384c <bt_le_ext_adv_start+0xc8>
	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    386a:	2217      	movs	r2, #23
    386c:	a902      	add	r1, sp, #8
    386e:	3008      	adds	r0, #8
    3870:	f008 f870 	bl	b954 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EXT_ADV_PARAM, buf, NULL);
    3874:	4621      	mov	r1, r4
    3876:	2200      	movs	r2, #0
    3878:	f242 0036 	movw	r0, #8246	; 0x2036
    387c:	f7fe fef6 	bl	266c <bt_hci_cmd_send_sync>
	if (err) {
    3880:	4604      	mov	r4, r0
    3882:	2800      	cmp	r0, #0
    3884:	d18a      	bne.n	379c <bt_le_ext_adv_start+0x18>
	err = set_ext_ad(BT_HCI_OP_LE_SET_EXT_ADV_DATA, ad, ad_len);
    3886:	4642      	mov	r2, r8
    3888:	4639      	mov	r1, r7
    388a:	f242 0037 	movw	r0, #8247	; 0x2037
    388e:	f7fe ffd9 	bl	2844 <set_ext_ad>
	if (err) {
    3892:	4604      	mov	r4, r0
    3894:	2800      	cmp	r0, #0
    3896:	d181      	bne.n	379c <bt_le_ext_adv_start+0x18>
	if (sd || (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    3898:	bb2e      	cbnz	r6, 38e6 <bt_le_ext_adv_start+0x162>
    389a:	782b      	ldrb	r3, [r5, #0]
    389c:	07da      	lsls	r2, r3, #31
    389e:	d422      	bmi.n	38e6 <bt_le_ext_adv_start+0x162>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EXT_ADV_ENABLE, 1);
    38a0:	2101      	movs	r1, #1
    38a2:	f242 0039 	movw	r0, #8249	; 0x2039
    38a6:	f7fe fe97 	bl	25d8 <bt_hci_cmd_create>
	if (!buf) {
    38aa:	4604      	mov	r4, r0
    38ac:	2800      	cmp	r0, #0
    38ae:	d0c2      	beq.n	3836 <bt_le_ext_adv_start+0xb2>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    38b0:	2101      	movs	r1, #1
    38b2:	3008      	adds	r0, #8
    38b4:	f008 f857 	bl	b966 <net_buf_simple_add_u8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EXT_ADV_ENABLE, buf, NULL);
    38b8:	4621      	mov	r1, r4
    38ba:	2200      	movs	r2, #0
    38bc:	f242 0039 	movw	r0, #8249	; 0x2039
    38c0:	f7fe fed4 	bl	266c <bt_hci_cmd_send_sync>
	if (err) {
    38c4:	4604      	mov	r4, r0
    38c6:	2800      	cmp	r0, #0
    38c8:	f47f af68 	bne.w	379c <bt_le_ext_adv_start+0x18>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    38cc:	2120      	movs	r1, #32
    38ce:	480f      	ldr	r0, [pc, #60]	; (390c <bt_le_ext_adv_start+0x188>)
    38d0:	f7fe fdec 	bl	24ac <atomic_or>
	if (!(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    38d4:	782b      	ldrb	r3, [r5, #0]
    38d6:	079b      	lsls	r3, r3, #30
    38d8:	f53f af60 	bmi.w	379c <bt_le_ext_adv_start+0x18>
    38dc:	2140      	movs	r1, #64	; 0x40
    38de:	480b      	ldr	r0, [pc, #44]	; (390c <bt_le_ext_adv_start+0x188>)
    38e0:	f7fe fde4 	bl	24ac <atomic_or>
    38e4:	e75a      	b.n	379c <bt_le_ext_adv_start+0x18>
		err = set_ext_ad(BT_HCI_OP_LE_SET_EXT_SCAN_RSP_DATA, sd, sd_len);
    38e6:	9a10      	ldr	r2, [sp, #64]	; 0x40
    38e8:	4631      	mov	r1, r6
    38ea:	f242 0038 	movw	r0, #8248	; 0x2038
    38ee:	f7fe ffa9 	bl	2844 <set_ext_ad>
		if (err) {
    38f2:	4604      	mov	r4, r0
    38f4:	2800      	cmp	r0, #0
    38f6:	d0d3      	beq.n	38a0 <bt_le_ext_adv_start+0x11c>
    38f8:	e750      	b.n	379c <bt_le_ext_adv_start+0x18>
		return -EALREADY;
    38fa:	f06f 0444 	mvn.w	r4, #68	; 0x44
    38fe:	e74d      	b.n	379c <bt_le_ext_adv_start+0x18>
    3900:	0000cce7 	.word	0x0000cce7
    3904:	20004c21 	.word	0x20004c21
    3908:	20004c20 	.word	0x20004c20
    390c:	20004c90 	.word	0x20004c90

00003910 <bt_buf_get_rx>:

	return bt_le_scan_update(false);
}

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, s32_t timeout)
{
    3910:	b538      	push	{r3, r4, r5, lr}
    3912:	4605      	mov	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    3914:	4805      	ldr	r0, [pc, #20]	; (392c <bt_buf_get_rx+0x1c>)
    3916:	f007 ffb5 	bl	b884 <net_buf_alloc_fixed>
#endif

	if (buf) {
    391a:	4604      	mov	r4, r0
    391c:	b120      	cbz	r0, 3928 <bt_buf_get_rx+0x18>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    391e:	2100      	movs	r1, #0
    3920:	3008      	adds	r0, #8
    3922:	f007 ffce 	bl	b8c2 <net_buf_simple_reserve>
	*(u8_t *)net_buf_user_data(buf) = type;
    3926:	7525      	strb	r5, [r4, #20]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    3928:	4620      	mov	r0, r4
    392a:	bd38      	pop	{r3, r4, r5, pc}
    392c:	20004f88 	.word	0x20004f88

00003930 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(s32_t timeout)
{
    3930:	b573      	push	{r0, r1, r4, r5, r6, lr}
    3932:	4606      	mov	r6, r0
	__asm__ volatile(
    3934:	f04f 0320 	mov.w	r3, #32
    3938:	f3ef 8211 	mrs	r2, BASEPRI
    393c:	f383 8811 	msr	BASEPRI, r3
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    3940:	4b11      	ldr	r3, [pc, #68]	; (3988 <bt_buf_get_cmd_complete+0x58>)
	bt_dev.sent_cmd = NULL;
    3942:	2500      	movs	r5, #0
	buf = bt_dev.sent_cmd;
    3944:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
	bt_dev.sent_cmd = NULL;
    3948:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    394c:	f382 8811 	msr	BASEPRI, r2
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    3950:	f008 fbea 	bl	c128 <_impl_k_current_get>
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);
    3954:	9400      	str	r4, [sp, #0]
    3956:	4603      	mov	r3, r0
    3958:	4a0c      	ldr	r2, [pc, #48]	; (398c <bt_buf_get_cmd_complete+0x5c>)
    395a:	490d      	ldr	r1, [pc, #52]	; (3990 <bt_buf_get_cmd_complete+0x60>)
    395c:	2007      	movs	r0, #7
    395e:	f7fe fc4f 	bl	2200 <bt_log>

	if (buf) {
    3962:	b934      	cbnz	r4, 3972 <bt_buf_get_cmd_complete+0x42>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    3964:	4631      	mov	r1, r6
    3966:	2001      	movs	r0, #1
}
    3968:	b002      	add	sp, #8
    396a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    396e:	f7ff bfcf 	b.w	3910 <bt_buf_get_rx>
    3972:	2301      	movs	r3, #1
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    3974:	f104 0008 	add.w	r0, r4, #8
    3978:	7523      	strb	r3, [r4, #20]
		buf->len = 0;
    397a:	81a5      	strh	r5, [r4, #12]
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    397c:	4629      	mov	r1, r5
    397e:	f007 ffa0 	bl	b8c2 <net_buf_simple_reserve>
}
    3982:	4620      	mov	r0, r4
    3984:	b002      	add	sp, #8
    3986:	bd70      	pop	{r4, r5, r6, pc}
    3988:	20004c20 	.word	0x20004c20
    398c:	0000d565 	.word	0x0000d565
    3990:	0000d57d 	.word	0x0000d57d

00003994 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
    3994:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	*mem_head = mem_pool;
    3996:	6018      	str	r0, [r3, #0]

	/* Store free mem_count after the list's next pointer at an aligned
	 * memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    3998:	1dc3      	adds	r3, r0, #7
{
    399a:	4605      	mov	r5, r0
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    399c:	f023 0303 	bic.w	r3, r3, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    39a0:	1e50      	subs	r0, r2, #1
{
    39a2:	460e      	mov	r6, r1
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    39a4:	b280      	uxth	r0, r0
{
    39a6:	4614      	mov	r4, r2
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    39a8:	801a      	strh	r2, [r3, #0]
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    39aa:	2100      	movs	r1, #0
    39ac:	2204      	movs	r2, #4
    39ae:	fb06 5000 	mla	r0, r6, r0, r5
    39b2:	f7fc fe5e 	bl	672 <memset>
    39b6:	3c02      	subs	r4, #2
    39b8:	b2a4      	uxth	r4, r4
	       sizeof(mem_pool));
	while (mem_count--) {
    39ba:	f64f 77ff 	movw	r7, #65535	; 0xffff
    39be:	42bc      	cmp	r4, r7
    39c0:	d101      	bne.n	39c6 <mem_init+0x32>
		next = (u32_t)((u8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
		       (void *)&next, sizeof(next));
	}
}
    39c2:	b003      	add	sp, #12
    39c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			       (mem_size * (mem_count + 1)));
    39c6:	fb04 6006 	mla	r0, r4, r6, r6
		next = (u32_t)((u8_t *) mem_pool +
    39ca:	182b      	adds	r3, r5, r0
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    39cc:	2204      	movs	r2, #4
    39ce:	1b80      	subs	r0, r0, r6
    39d0:	eb0d 0102 	add.w	r1, sp, r2
    39d4:	4428      	add	r0, r5
    39d6:	3c01      	subs	r4, #1
		next = (u32_t)((u8_t *) mem_pool +
    39d8:	9301      	str	r3, [sp, #4]
    39da:	b2a4      	uxth	r4, r4
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    39dc:	f7fc fe1d 	bl	61a <memcpy>
    39e0:	e7ed      	b.n	39be <mem_init+0x2a>

000039e2 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    39e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (*mem_head) {
    39e4:	6805      	ldr	r5, [r0, #0]
{
    39e6:	4606      	mov	r6, r0
	if (*mem_head) {
    39e8:	b195      	cbz	r5, 3a10 <mem_acquire+0x2e>
		u16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    39ea:	1deb      	adds	r3, r5, #7
    39ec:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    39f0:	2204      	movs	r2, #4
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    39f2:	881c      	ldrh	r4, [r3, #0]
		memcpy(&head, mem, sizeof(head));
    39f4:	4629      	mov	r1, r5
    39f6:	eb0d 0002 	add.w	r0, sp, r2
    39fa:	f7fc fe0e 	bl	61a <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    39fe:	9b01      	ldr	r3, [sp, #4]
		free_count--;
    3a00:	3c01      	subs	r4, #1
    3a02:	b2a4      	uxth	r4, r4
		if (head) {
    3a04:	b11b      	cbz	r3, 3a0e <mem_acquire+0x2c>
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
    3a06:	1dda      	adds	r2, r3, #7
    3a08:	f022 0203 	bic.w	r2, r2, #3
    3a0c:	8014      	strh	r4, [r2, #0]
				free_count;
		}

		*mem_head = head;
    3a0e:	6033      	str	r3, [r6, #0]
		return mem;
	}

	return NULL;
}
    3a10:	4628      	mov	r0, r5
    3a12:	b002      	add	sp, #8
    3a14:	bd70      	pop	{r4, r5, r6, pc}

00003a16 <mem_release>:

void mem_release(void *mem, void **mem_head)
{
    3a16:	b570      	push	{r4, r5, r6, lr}
	u16_t free_count = 0;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    3a18:	680c      	ldr	r4, [r1, #0]
{
    3a1a:	4606      	mov	r6, r0
    3a1c:	460d      	mov	r5, r1
	if (*mem_head) {
    3a1e:	b11c      	cbz	r4, 3a28 <mem_release+0x12>
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    3a20:	1de3      	adds	r3, r4, #7
    3a22:	f023 0303 	bic.w	r3, r3, #3
    3a26:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
    3a28:	2204      	movs	r2, #4
    3a2a:	4629      	mov	r1, r5
    3a2c:	4630      	mov	r0, r6
    3a2e:	f7fc fdf4 	bl	61a <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    3a32:	1df2      	adds	r2, r6, #7
    3a34:	f022 0203 	bic.w	r2, r2, #3
	free_count++;
    3a38:	1c63      	adds	r3, r4, #1
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    3a3a:	8013      	strh	r3, [r2, #0]

	*mem_head = mem;
    3a3c:	602e      	str	r6, [r5, #0]
    3a3e:	bd70      	pop	{r4, r5, r6, pc}

00003a40 <mem_get>:
}

void *mem_get(void *mem_pool, u16_t mem_size, u16_t index)
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
}
    3a40:	fb02 0001 	mla	r0, r2, r1, r0
    3a44:	4770      	bx	lr

00003a46 <mem_index_get>:

u16_t mem_index_get(void *mem, void *mem_pool, u16_t mem_size)
{
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
    3a46:	1a40      	subs	r0, r0, r1
    3a48:	b280      	uxth	r0, r0
}
    3a4a:	fbb0 f0f2 	udiv	r0, r0, r2
    3a4e:	4770      	bx	lr

00003a50 <mem_rcopy>:

void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
    3a50:	b510      	push	{r4, lr}
	src += len;
    3a52:	4411      	add	r1, r2
    3a54:	3801      	subs	r0, #1
	while (len--) {
    3a56:	f64f 73ff 	movw	r3, #65535	; 0xffff
    3a5a:	3a01      	subs	r2, #1
    3a5c:	b292      	uxth	r2, r2
    3a5e:	429a      	cmp	r2, r3
    3a60:	d100      	bne.n	3a64 <mem_rcopy+0x14>
		*dst++ = *--src;
	}
}
    3a62:	bd10      	pop	{r4, pc}
		*dst++ = *--src;
    3a64:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
    3a68:	f800 4f01 	strb.w	r4, [r0, #1]!
    3a6c:	e7f5      	b.n	3a5a <mem_rcopy+0xa>

00003a6e <memq_init>:
inline memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem);

memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* head and tail pointer to the initial link */
	*head = *tail = link;
    3a6e:	6010      	str	r0, [r2, #0]
    3a70:	6008      	str	r0, [r1, #0]

	return link;
}
    3a72:	4770      	bx	lr

00003a74 <memq_enqueue>:

memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
    3a74:	b510      	push	{r4, lr}
	/* make the current tail link's next point to new link */
	(*tail)->next = link;
    3a76:	6814      	ldr	r4, [r2, #0]
    3a78:	6020      	str	r0, [r4, #0]

	/* assign mem to current tail link's mem */
	(*tail)->mem = mem;
    3a7a:	6814      	ldr	r4, [r2, #0]
    3a7c:	6061      	str	r1, [r4, #4]

	/* increment the tail! */
	*tail = link;
    3a7e:	6010      	str	r0, [r2, #0]

	return link;
}
    3a80:	bd10      	pop	{r4, pc}

00003a82 <memq_peek>:

memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* if head and tail are equal, then queue empty */
	if (head == tail) {
    3a82:	4288      	cmp	r0, r1
    3a84:	d003      	beq.n	3a8e <memq_peek+0xc>
		return NULL;
	}

	/* extract the link's mem */
	if (mem) {
    3a86:	b11a      	cbz	r2, 3a90 <memq_peek+0xe>
		*mem = head->mem;
    3a88:	6843      	ldr	r3, [r0, #4]
    3a8a:	6013      	str	r3, [r2, #0]
    3a8c:	4770      	bx	lr
		return NULL;
    3a8e:	2000      	movs	r0, #0
	}

	return head;
}
    3a90:	4770      	bx	lr

00003a92 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *link;

	/* use memq peek to get the link and mem */
	link = memq_peek(*head, tail, mem);
    3a92:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    3a94:	4283      	cmp	r3, r0
    3a96:	d009      	beq.n	3aac <memq_dequeue+0x1a>
	if (mem) {
    3a98:	b122      	cbz	r2, 3aa4 <memq_dequeue+0x12>
		*mem = head->mem;
    3a9a:	6858      	ldr	r0, [r3, #4]
    3a9c:	6010      	str	r0, [r2, #0]
	if (!link) {
		return link;
	}

	/* increment the head to next link node */
	*head = link->next;
    3a9e:	681a      	ldr	r2, [r3, #0]
    3aa0:	600a      	str	r2, [r1, #0]

	return link;
    3aa2:	e001      	b.n	3aa8 <memq_dequeue+0x16>
	if (!link) {
    3aa4:	2b00      	cmp	r3, #0
    3aa6:	d1fa      	bne.n	3a9e <memq_dequeue+0xc>
}
    3aa8:	4618      	mov	r0, r3
    3aaa:	4770      	bx	lr
		return NULL;
    3aac:	2300      	movs	r3, #0
    3aae:	e7fb      	b.n	3aa8 <memq_dequeue+0x16>

00003ab0 <mayfly_init>:
} mft[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

static memq_link_t mfl[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

void mayfly_init(void)
{
    3ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (callee_id--) {
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(&mfl[callee_id][caller_id],
    3ab4:	4f11      	ldr	r7, [pc, #68]	; (3afc <mayfly_init+0x4c>)
    3ab6:	f8df 9048 	ldr.w	r9, [pc, #72]	; 3b00 <mayfly_init+0x50>
	callee_id = MAYFLY_CALLEE_COUNT;
    3aba:	2604      	movs	r6, #4
	while (callee_id--) {
    3abc:	3e01      	subs	r6, #1
    3abe:	b2f6      	uxtb	r6, r6
    3ac0:	2eff      	cmp	r6, #255	; 0xff
    3ac2:	d019      	beq.n	3af8 <mayfly_init+0x48>
    3ac4:	b233      	sxth	r3, r6
    3ac6:	ea4f 0883 	mov.w	r8, r3, lsl #2
    3aca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3ace:	011d      	lsls	r5, r3, #4
    3ad0:	2404      	movs	r4, #4
    3ad2:	f04f 0a0c 	mov.w	sl, #12
    3ad6:	e00a      	b.n	3aee <mayfly_init+0x3e>
    3ad8:	fb1a 5104 	smlabb	r1, sl, r4, r5
			memq_init(&mfl[callee_id][caller_id],
    3adc:	1d0a      	adds	r2, r1, #4
    3ade:	eb04 0008 	add.w	r0, r4, r8
    3ae2:	443a      	add	r2, r7
    3ae4:	4439      	add	r1, r7
    3ae6:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
    3aea:	f7ff ffc0 	bl	3a6e <memq_init>
		while (caller_id--) {
    3aee:	3c01      	subs	r4, #1
    3af0:	b2e4      	uxtb	r4, r4
    3af2:	2cff      	cmp	r4, #255	; 0xff
    3af4:	d1f0      	bne.n	3ad8 <mayfly_init+0x28>
    3af6:	e7e1      	b.n	3abc <mayfly_init+0xc>
    3af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3afc:	200008d0 	.word	0x200008d0
    3b00:	20000850 	.word	0x20000850

00003b04 <mayfly_enable>:
		}
	}
}

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
    3b04:	b4f0      	push	{r4, r5, r6, r7}
    3b06:	4b12      	ldr	r3, [pc, #72]	; (3b50 <mayfly_enable+0x4c>)
    3b08:	4605      	mov	r5, r0
    3b0a:	460f      	mov	r7, r1
    3b0c:	260c      	movs	r6, #12
    3b0e:	2430      	movs	r4, #48	; 0x30
	if (enable) {
    3b10:	b172      	cbz	r2, 3b30 <mayfly_enable+0x2c>
		if (mft[callee_id][caller_id].enable_req ==
    3b12:	4361      	muls	r1, r4
    3b14:	fb06 1400 	mla	r4, r6, r0, r1
    3b18:	4423      	add	r3, r4
    3b1a:	7a59      	ldrb	r1, [r3, #9]
    3b1c:	7a18      	ldrb	r0, [r3, #8]
    3b1e:	4281      	cmp	r1, r0
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    3b20:	bf04      	itt	eq
    3b22:	3101      	addeq	r1, #1
    3b24:	7219      	strbeq	r1, [r3, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    3b26:	4628      	mov	r0, r5
    3b28:	4639      	mov	r1, r7
			mft[callee_id][caller_id].disable_req++;

			mayfly_pend(caller_id, callee_id);
		}
	}
}
    3b2a:	bcf0      	pop	{r4, r5, r6, r7}
		mayfly_enable_cb(caller_id, callee_id, enable);
    3b2c:	f007 bd46 	b.w	b5bc <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
    3b30:	434c      	muls	r4, r1
    3b32:	fb06 4400 	mla	r4, r6, r0, r4
    3b36:	4423      	add	r3, r4
    3b38:	7a9c      	ldrb	r4, [r3, #10]
    3b3a:	7ada      	ldrb	r2, [r3, #11]
    3b3c:	42a2      	cmp	r2, r4
    3b3e:	d104      	bne.n	3b4a <mayfly_enable+0x46>
			mft[callee_id][caller_id].disable_req++;
    3b40:	3201      	adds	r2, #1
    3b42:	729a      	strb	r2, [r3, #10]
}
    3b44:	bcf0      	pop	{r4, r5, r6, r7}
			mayfly_pend(caller_id, callee_id);
    3b46:	f007 bd81 	b.w	b64c <mayfly_pend>
}
    3b4a:	bcf0      	pop	{r4, r5, r6, r7}
    3b4c:	4770      	bx	lr
    3b4e:	bf00      	nop
    3b50:	200008d0 	.word	0x200008d0

00003b54 <mayfly_enqueue>:

u32_t mayfly_enqueue(u8_t caller_id, u8_t callee_id, u8_t chain,
			struct mayfly *m)
{
    3b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3b56:	4605      	mov	r5, r0
    3b58:	460e      	mov	r6, r1
    3b5a:	461c      	mov	r4, r3
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    3b5c:	b18a      	cbz	r2, 3b82 <mayfly_enqueue+0x2e>
    3b5e:	2301      	movs	r3, #1
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
    3b60:	7862      	ldrb	r2, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    3b62:	7820      	ldrb	r0, [r4, #0]
    3b64:	1a80      	subs	r0, r0, r2
	if (state != 0) {
    3b66:	f010 0703 	ands.w	r7, r0, #3
    3b6a:	d029      	beq.n	3bc0 <mayfly_enqueue+0x6c>
		if (chain) {
    3b6c:	b303      	cbz	r3, 3bb0 <mayfly_enqueue+0x5c>
			if (state != 1) {
    3b6e:	2f01      	cmp	r7, #1
    3b70:	d039      	beq.n	3be6 <mayfly_enqueue+0x92>
				/* mark as ready in queue */
				m->_req = ack + 1;
    3b72:	3201      	adds	r2, #1
    3b74:	b2d2      	uxtb	r2, r2
    3b76:	7022      	strb	r2, [r4, #0]
	/* new, add as ready in the queue */
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    3b78:	4631      	mov	r1, r6
    3b7a:	4628      	mov	r0, r5
    3b7c:	f007 fd66 	bl	b64c <mayfly_pend>
    3b80:	e01c      	b.n	3bbc <mayfly_enqueue+0x68>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    3b82:	f007 fd51 	bl	b628 <mayfly_prio_is_equal>
    3b86:	2800      	cmp	r0, #0
    3b88:	d0e9      	beq.n	3b5e <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
    3b8a:	4631      	mov	r1, r6
    3b8c:	4628      	mov	r0, r5
    3b8e:	f007 fd31 	bl	b5f4 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    3b92:	2800      	cmp	r0, #0
    3b94:	d0e3      	beq.n	3b5e <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
    3b96:	2330      	movs	r3, #48	; 0x30
    3b98:	220c      	movs	r2, #12
    3b9a:	4373      	muls	r3, r6
    3b9c:	fb02 3305 	mla	r3, r2, r5, r3
    3ba0:	4a12      	ldr	r2, [pc, #72]	; (3bec <mayfly_enqueue+0x98>)
    3ba2:	441a      	add	r2, r3
		!mayfly_is_enabled(caller_id, callee_id) ||
    3ba4:	7a93      	ldrb	r3, [r2, #10]
    3ba6:	7ad2      	ldrb	r2, [r2, #11]
    3ba8:	1a9b      	subs	r3, r3, r2
    3baa:	bf18      	it	ne
    3bac:	2301      	movne	r3, #1
    3bae:	e7d7      	b.n	3b60 <mayfly_enqueue+0xc>
		m->_req = ack + 2;
    3bb0:	3202      	adds	r2, #2
    3bb2:	b2d2      	uxtb	r2, r2
    3bb4:	7022      	strb	r2, [r4, #0]
		m->fp(m->param);
    3bb6:	68e3      	ldr	r3, [r4, #12]
    3bb8:	68a0      	ldr	r0, [r4, #8]
    3bba:	4798      	blx	r3
		return 0;
    3bbc:	2000      	movs	r0, #0
    3bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!chain) {
    3bc0:	2b00      	cmp	r3, #0
    3bc2:	d0f8      	beq.n	3bb6 <mayfly_enqueue+0x62>
	m->_req = ack + 1;
    3bc4:	3201      	adds	r2, #1
    3bc6:	b2d2      	uxtb	r2, r2
    3bc8:	7022      	strb	r2, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    3bca:	2304      	movs	r3, #4
    3bcc:	2230      	movs	r2, #48	; 0x30
    3bce:	fb12 3206 	smlabb	r2, r2, r6, r3
    3bd2:	230c      	movs	r3, #12
    3bd4:	fb13 2305 	smlabb	r3, r3, r5, r2
    3bd8:	4a04      	ldr	r2, [pc, #16]	; (3bec <mayfly_enqueue+0x98>)
    3bda:	6860      	ldr	r0, [r4, #4]
    3bdc:	441a      	add	r2, r3
    3bde:	4621      	mov	r1, r4
    3be0:	f7ff ff48 	bl	3a74 <memq_enqueue>
    3be4:	e7c8      	b.n	3b78 <mayfly_enqueue+0x24>
			return 1;
    3be6:	4638      	mov	r0, r7

	return 0;
}
    3be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3bea:	bf00      	nop
    3bec:	200008d0 	.word	0x200008d0

00003bf0 <mayfly_run>:

void mayfly_run(u8_t callee_id)
{
    3bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3bf4:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    3bf8:	b089      	sub	sp, #36	; 0x24
    3bfa:	011b      	lsls	r3, r3, #4
	u8_t disable = 0;
	u8_t enable = 0;
    3bfc:	f04f 0800 	mov.w	r8, #0
	while (caller_id--) {
		memq_link_t *link;
		struct mayfly *m = 0;

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
    3c00:	4e43      	ldr	r6, [pc, #268]	; (3d10 <mayfly_run+0x120>)
    3c02:	9304      	str	r3, [sp, #16]
{
    3c04:	4605      	mov	r5, r0
	caller_id = MAYFLY_CALLER_COUNT;
    3c06:	2404      	movs	r4, #4
	u8_t disable = 0;
    3c08:	f8cd 8004 	str.w	r8, [sp, #4]
	while (caller_id--) {
    3c0c:	3c01      	subs	r4, #1
    3c0e:	b2e4      	uxtb	r4, r4
    3c10:	2cff      	cmp	r4, #255	; 0xff
    3c12:	d10b      	bne.n	3c2c <mayfly_run+0x3c>
			mft[callee_id][caller_id].enable_ack =
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    3c14:	9b01      	ldr	r3, [sp, #4]
    3c16:	2b00      	cmp	r3, #0
    3c18:	d076      	beq.n	3d08 <mayfly_run+0x118>
    3c1a:	f1b8 0f00 	cmp.w	r8, #0
    3c1e:	d173      	bne.n	3d08 <mayfly_run+0x118>
		mayfly_enable_cb(callee_id, callee_id, 0);
    3c20:	4642      	mov	r2, r8
    3c22:	4629      	mov	r1, r5
    3c24:	4628      	mov	r0, r5
    3c26:	f007 fcc9 	bl	b5bc <mayfly_enable_cb>
    3c2a:	e06d      	b.n	3d08 <mayfly_run+0x118>
		struct mayfly *m = 0;
    3c2c:	f10d 0b20 	add.w	fp, sp, #32
    3c30:	2300      	movs	r3, #0
		link = memq_peek(mft[callee_id][caller_id].head,
    3c32:	270c      	movs	r7, #12
		struct mayfly *m = 0;
    3c34:	f84b 3d04 	str.w	r3, [fp, #-4]!
		link = memq_peek(mft[callee_id][caller_id].head,
    3c38:	f04f 0930 	mov.w	r9, #48	; 0x30
    3c3c:	fb07 f304 	mul.w	r3, r7, r4
    3c40:	fb09 3005 	mla	r0, r9, r5, r3
    3c44:	1831      	adds	r1, r6, r0
    3c46:	465a      	mov	r2, fp
    3c48:	6849      	ldr	r1, [r1, #4]
    3c4a:	5830      	ldr	r0, [r6, r0]
    3c4c:	9302      	str	r3, [sp, #8]
    3c4e:	f7ff ff18 	bl	3a82 <memq_peek>
				memq_dequeue(mft[callee_id][caller_id].tail,
    3c52:	9b04      	ldr	r3, [sp, #16]
    3c54:	fb17 3704 	smlabb	r7, r7, r4, r3
    3c58:	19f3      	adds	r3, r6, r7
		link = memq_peek(mft[callee_id][caller_id].head,
    3c5a:	4682      	mov	sl, r0
				memq_dequeue(mft[callee_id][caller_id].tail,
    3c5c:	9303      	str	r3, [sp, #12]
		while (link) {
    3c5e:	f1ba 0f00 	cmp.w	sl, #0
    3c62:	d119      	bne.n	3c98 <mayfly_run+0xa8>
		if (mft[callee_id][caller_id].disable_req !=
    3c64:	2230      	movs	r2, #48	; 0x30
    3c66:	230c      	movs	r3, #12
    3c68:	436a      	muls	r2, r5
    3c6a:	fb03 2204 	mla	r2, r3, r4, r2
    3c6e:	4432      	add	r2, r6
    3c70:	7a91      	ldrb	r1, [r2, #10]
    3c72:	7ad0      	ldrb	r0, [r2, #11]
    3c74:	4288      	cmp	r0, r1
			mft[callee_id][caller_id].disable_ack =
    3c76:	bf1e      	ittt	ne
    3c78:	72d1      	strbne	r1, [r2, #11]
			disable = 1;
    3c7a:	2201      	movne	r2, #1
    3c7c:	9201      	strne	r2, [sp, #4]
		if (mft[callee_id][caller_id].enable_req !=
    3c7e:	2230      	movs	r2, #48	; 0x30
    3c80:	436a      	muls	r2, r5
    3c82:	fb03 2304 	mla	r3, r3, r4, r2
    3c86:	4433      	add	r3, r6
    3c88:	7a1a      	ldrb	r2, [r3, #8]
    3c8a:	7a59      	ldrb	r1, [r3, #9]
    3c8c:	4291      	cmp	r1, r2
			mft[callee_id][caller_id].enable_ack =
    3c8e:	bf1c      	itt	ne
    3c90:	725a      	strbne	r2, [r3, #9]
			enable = 1;
    3c92:	f04f 0801 	movne.w	r8, #1
    3c96:	e7b9      	b.n	3c0c <mayfly_run+0x1c>
			req = m->_req;
    3c98:	9b07      	ldr	r3, [sp, #28]
    3c9a:	781f      	ldrb	r7, [r3, #0]
			state = (req - m->_ack) & 0x03;
    3c9c:	785a      	ldrb	r2, [r3, #1]
    3c9e:	1abf      	subs	r7, r7, r2
    3ca0:	f007 0703 	and.w	r7, r7, #3
			if (state == 1) {
    3ca4:	2f01      	cmp	r7, #1
    3ca6:	d104      	bne.n	3cb2 <mayfly_run+0xc2>
				m->_ack--;
    3ca8:	3a01      	subs	r2, #1
    3caa:	705a      	strb	r2, [r3, #1]
				m->fp(m->param);
    3cac:	6898      	ldr	r0, [r3, #8]
    3cae:	68da      	ldr	r2, [r3, #12]
    3cb0:	4790      	blx	r2
			req = m->_req;
    3cb2:	9a07      	ldr	r2, [sp, #28]
    3cb4:	7813      	ldrb	r3, [r2, #0]
			if (((req - m->_ack) & 0x03) != 1) {
    3cb6:	7852      	ldrb	r2, [r2, #1]
			req = m->_req;
    3cb8:	b2db      	uxtb	r3, r3
			if (((req - m->_ack) & 0x03) != 1) {
    3cba:	1a9a      	subs	r2, r3, r2
    3cbc:	f002 0203 	and.w	r2, r2, #3
    3cc0:	2a01      	cmp	r2, #1
    3cc2:	9305      	str	r3, [sp, #20]
    3cc4:	d00d      	beq.n	3ce2 <mayfly_run+0xf2>
				memq_dequeue(mft[callee_id][caller_id].tail,
    3cc6:	9b02      	ldr	r3, [sp, #8]
    3cc8:	9903      	ldr	r1, [sp, #12]
    3cca:	fb09 3005 	mla	r0, r9, r5, r3
    3cce:	4430      	add	r0, r6
    3cd0:	2200      	movs	r2, #0
    3cd2:	6840      	ldr	r0, [r0, #4]
    3cd4:	f7ff fedd 	bl	3a92 <memq_dequeue>
				m->_link = link;
    3cd8:	9a07      	ldr	r2, [sp, #28]
				m->_ack = req;
    3cda:	9b05      	ldr	r3, [sp, #20]
				m->_link = link;
    3cdc:	f8c2 a004 	str.w	sl, [r2, #4]
				m->_ack = req;
    3ce0:	7053      	strb	r3, [r2, #1]
			link = memq_peek(mft[callee_id][caller_id].head,
    3ce2:	9b02      	ldr	r3, [sp, #8]
    3ce4:	fb09 3305 	mla	r3, r9, r5, r3
    3ce8:	18f1      	adds	r1, r6, r3
    3cea:	465a      	mov	r2, fp
    3cec:	6849      	ldr	r1, [r1, #4]
    3cee:	58f0      	ldr	r0, [r6, r3]
    3cf0:	f7ff fec7 	bl	3a82 <memq_peek>
			if (state == 1) {
    3cf4:	2f01      	cmp	r7, #1
			link = memq_peek(mft[callee_id][caller_id].head,
    3cf6:	4682      	mov	sl, r0
			if (state == 1) {
    3cf8:	d1b1      	bne.n	3c5e <mayfly_run+0x6e>
				if (caller_id || link) {
    3cfa:	b90c      	cbnz	r4, 3d00 <mayfly_run+0x110>
    3cfc:	2800      	cmp	r0, #0
    3cfe:	d0b1      	beq.n	3c64 <mayfly_run+0x74>
					mayfly_pend(callee_id, callee_id);
    3d00:	4629      	mov	r1, r5
    3d02:	4628      	mov	r0, r5
    3d04:	f007 fca2 	bl	b64c <mayfly_pend>
	}
}
    3d08:	b009      	add	sp, #36	; 0x24
    3d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3d0e:	bf00      	nop
    3d10:	200008d0 	.word	0x200008d0

00003d14 <util_ones_count_get>:

#include <zephyr/types.h>
#include "util.h"

u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
    3d14:	b510      	push	{r4, lr}
    3d16:	1e42      	subs	r2, r0, #1
	u8_t one_count = 0;
    3d18:	2000      	movs	r0, #0

	while (octets_len--) {
    3d1a:	3901      	subs	r1, #1
    3d1c:	b2c9      	uxtb	r1, r1
    3d1e:	29ff      	cmp	r1, #255	; 0xff
    3d20:	d100      	bne.n	3d24 <util_ones_count_get+0x10>
		}
		octets++;
	}

	return one_count;
}
    3d22:	bd10      	pop	{r4, pc}
		bite = *octets;
    3d24:	f812 3f01 	ldrb.w	r3, [r2, #1]!
		while (bite) {
    3d28:	2b00      	cmp	r3, #0
    3d2a:	d0f6      	beq.n	3d1a <util_ones_count_get+0x6>
			bite &= (bite - 1);
    3d2c:	1e5c      	subs	r4, r3, #1
			one_count++;
    3d2e:	3001      	adds	r0, #1
			bite &= (bite - 1);
    3d30:	4023      	ands	r3, r4
			one_count++;
    3d32:	b2c0      	uxtb	r0, r0
    3d34:	e7f8      	b.n	3d28 <util_ones_count_get+0x14>

00003d36 <ticker_dequeue>:

	return id;
}

static u32_t ticker_dequeue(struct ticker_instance *instance, u8_t id)
{
    3d36:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t current;
	u32_t total;

	/* find the ticker's position in ticker list */
	node = &instance->node[0];
	previous = instance->ticker_id_head;
    3d38:	7f43      	ldrb	r3, [r0, #29]
	node = &instance->node[0];
    3d3a:	6805      	ldr	r5, [r0, #0]
	current = previous;
    3d3c:	461a      	mov	r2, r3
	total = 0;
    3d3e:	2400      	movs	r4, #0
	ticker_current = 0;
	while (current != TICKER_NULL) {
    3d40:	2aff      	cmp	r2, #255	; 0xff
    3d42:	d101      	bne.n	3d48 <ticker_dequeue+0x12>
		current = ticker_current->next;
	}

	/* ticker not in active list */
	if (current == TICKER_NULL) {
		return 0;
    3d44:	2000      	movs	r0, #0
    3d46:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ticker_current = &node[current];
    3d48:	eb02 0782 	add.w	r7, r2, r2, lsl #2
		if (current == id) {
    3d4c:	428a      	cmp	r2, r1
		ticker_current = &node[current];
    3d4e:	eb05 06c7 	add.w	r6, r5, r7, lsl #3
    3d52:	f815 7037 	ldrb.w	r7, [r5, r7, lsl #3]
		if (current == id) {
    3d56:	d004      	beq.n	3d62 <ticker_dequeue+0x2c>
		total += ticker_current->ticks_to_expire;
    3d58:	68b3      	ldr	r3, [r6, #8]
    3d5a:	441c      	add	r4, r3
		current = ticker_current->next;
    3d5c:	4613      	mov	r3, r2
    3d5e:	463a      	mov	r2, r7
    3d60:	e7ee      	b.n	3d40 <ticker_dequeue+0xa>
	}

	/* ticker is the first in the list */
	if (previous == current) {
    3d62:	4293      	cmp	r3, r2
    3d64:	d100      	bne.n	3d68 <ticker_dequeue+0x32>
		instance->ticker_id_head = ticker_current->next;
    3d66:	7747      	strb	r7, [r0, #29]
	timeout = ticker_current->ticks_to_expire;

	/* link previous ticker with next of this ticker
	 * i.e. removing the ticker from list
	 */
	node[previous].next = ticker_current->next;
    3d68:	b21b      	sxth	r3, r3
    3d6a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3d6e:	7832      	ldrb	r2, [r6, #0]
	timeout = ticker_current->ticks_to_expire;
    3d70:	68b0      	ldr	r0, [r6, #8]
	node[previous].next = ticker_current->next;
    3d72:	f805 2033 	strb.w	r2, [r5, r3, lsl #3]

	/* if this is not the last ticker, increment the
	 * next ticker by this ticker timeout
	 */
	if (ticker_current->next != TICKER_NULL) {
    3d76:	7833      	ldrb	r3, [r6, #0]
    3d78:	2bff      	cmp	r3, #255	; 0xff
    3d7a:	d006      	beq.n	3d8a <ticker_dequeue+0x54>
		node[ticker_current->next].ticks_to_expire += timeout;
    3d7c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3d80:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    3d84:	689a      	ldr	r2, [r3, #8]
    3d86:	4402      	add	r2, r0
    3d88:	609a      	str	r2, [r3, #8]
	}

	return (total + timeout);
    3d8a:	4420      	add	r0, r4
    3d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003d8e <ticks_to_expire_prep>:
			   instance);
}

static void ticks_to_expire_prep(struct ticker_node *ticker,
				 u32_t ticks_current, u32_t ticks_at_start)
{
    3d8e:	b530      	push	{r4, r5, lr}
	u32_t ticks_to_expire = ticker->ticks_to_expire;
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    3d90:	1a55      	subs	r5, r2, r1
    3d92:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
	u32_t ticks_to_expire = ticker->ticks_to_expire;
    3d96:	6883      	ldr	r3, [r0, #8]
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
    3d98:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    3d9a:	d109      	bne.n	3db0 <ticks_to_expire_prep+0x22>
	return cntr_cnt_get();
}

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    3d9c:	f025 427f 	bic.w	r2, r5, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    3da0:	441a      	add	r2, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
    3da2:	42a2      	cmp	r2, r4
    3da4:	d90e      	bls.n	3dc4 <ticks_to_expire_prep+0x36>
		ticks_to_expire -= ticks_to_expire_minus;
    3da6:	1b12      	subs	r2, r2, r4
		ticks_to_expire_minus = 0;
    3da8:	2400      	movs	r4, #0
	ticker->ticks_to_expire = ticks_to_expire;
    3daa:	6082      	str	r2, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    3dac:	6144      	str	r4, [r0, #20]
    3dae:	bd30      	pop	{r4, r5, pc}
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    3db0:	1a8a      	subs	r2, r1, r2
    3db2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    3db6:	4293      	cmp	r3, r2
    3db8:	d901      	bls.n	3dbe <ticks_to_expire_prep+0x30>
			ticks_to_expire -= delta_current_start;
    3dba:	1a9a      	subs	r2, r3, r2
    3dbc:	e7f1      	b.n	3da2 <ticks_to_expire_prep+0x14>
    3dbe:	4422      	add	r2, r4
			ticks_to_expire_minus +=
    3dc0:	1ad4      	subs	r4, r2, r3
			ticks_to_expire = 0;
    3dc2:	2200      	movs	r2, #0
		ticks_to_expire_minus -= ticks_to_expire;
    3dc4:	1aa4      	subs	r4, r4, r2
		ticks_to_expire = 0;
    3dc6:	2200      	movs	r2, #0
    3dc8:	e7ef      	b.n	3daa <ticks_to_expire_prep+0x1c>

00003dca <ticker_job_op_cb>:
{
    3dca:	4603      	mov	r3, r0
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    3dcc:	2200      	movs	r2, #0
    3dce:	701a      	strb	r2, [r3, #0]
	if (user_op->fp_op_func) {
    3dd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	user_op->status = status;
    3dd2:	6259      	str	r1, [r3, #36]	; 0x24
{
    3dd4:	4608      	mov	r0, r1
	if (user_op->fp_op_func) {
    3dd6:	b10a      	cbz	r2, 3ddc <ticker_job_op_cb+0x12>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    3dd8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    3dda:	4710      	bx	r2
    3ddc:	4770      	bx	lr

00003dde <ticker_worker>:
{
    3dde:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (instance->job_guard) {
    3de2:	7f85      	ldrb	r5, [r0, #30]
	instance->worker_trigger = 1;
    3de4:	2301      	movs	r3, #1
{
    3de6:	4604      	mov	r4, r0
	instance->worker_trigger = 1;
    3de8:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
    3dea:	2d00      	cmp	r5, #0
    3dec:	d14c      	bne.n	3e88 <ticker_worker+0xaa>
	if (instance->ticker_id_head == TICKER_NULL) {
    3dee:	7f43      	ldrb	r3, [r0, #29]
    3df0:	2bff      	cmp	r3, #255	; 0xff
    3df2:	d102      	bne.n	3dfa <ticker_worker+0x1c>
		instance->worker_trigger = 0;
    3df4:	77c5      	strb	r5, [r0, #31]
		return;
    3df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
    3dfa:	f006 ff87 	bl	ad0c <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    3dfe:	6967      	ldr	r7, [r4, #20]
	ticker_id_head = instance->ticker_id_head;
    3e00:	7f66      	ldrb	r6, [r4, #29]
	node = &instance->node[0];
    3e02:	f8d4 8000 	ldr.w	r8, [r4]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    3e06:	1bc7      	subs	r7, r0, r7
    3e08:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
	while (ticker_id_head != TICKER_NULL) {
    3e0c:	2eff      	cmp	r6, #255	; 0xff
    3e0e:	d006      	beq.n	3e1e <ticker_worker+0x40>
		ticker = &node[ticker_id_head];
    3e10:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    3e14:	eb08 01c6 	add.w	r1, r8, r6, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    3e18:	688b      	ldr	r3, [r1, #8]
		if (ticks_elapsed < ticks_to_expire) {
    3e1a:	429f      	cmp	r7, r3
    3e1c:	d218      	bcs.n	3e50 <ticker_worker+0x72>
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
    3e1e:	7aa2      	ldrb	r2, [r4, #10]
    3e20:	7ae3      	ldrb	r3, [r4, #11]
    3e22:	4293      	cmp	r3, r2
    3e24:	d105      	bne.n	3e32 <ticker_worker+0x54>
		last = instance->ticks_elapsed_last + 1;
    3e26:	3301      	adds	r3, #1
    3e28:	b2db      	uxtb	r3, r3
			last = 0;
    3e2a:	2b02      	cmp	r3, #2
    3e2c:	bf08      	it	eq
    3e2e:	2300      	moveq	r3, #0
		instance->ticks_elapsed_last = last;
    3e30:	72e3      	strb	r3, [r4, #11]
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    3e32:	7ae3      	ldrb	r3, [r4, #11]
    3e34:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    3e38:	2201      	movs	r2, #1
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    3e3a:	60dd      	str	r5, [r3, #12]
	instance->worker_trigger = 0;
    3e3c:	2300      	movs	r3, #0
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    3e3e:	6a65      	ldr	r5, [r4, #36]	; 0x24
	instance->worker_trigger = 0;
    3e40:	77e3      	strb	r3, [r4, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    3e42:	46ac      	mov	ip, r5
    3e44:	4623      	mov	r3, r4
    3e46:	2104      	movs	r1, #4
    3e48:	2003      	movs	r0, #3
}
    3e4a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    3e4e:	4760      	bx	ip
		ticks_elapsed -= ticks_to_expire;
    3e50:	1aff      	subs	r7, r7, r3
		ticks_expired += ticks_to_expire;
    3e52:	441d      	add	r5, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    3e54:	788a      	ldrb	r2, [r1, #2]
    3e56:	784b      	ldrb	r3, [r1, #1]
		ticker_id_head = ticker->next;
    3e58:	f818 6036 	ldrb.w	r6, [r8, r6, lsl #3]
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    3e5c:	1a9b      	subs	r3, r3, r2
    3e5e:	b2db      	uxtb	r3, r3
    3e60:	2b01      	cmp	r3, #1
    3e62:	d1d3      	bne.n	3e0c <ticker_worker+0x2e>
		if (ticker->timeout_func) {
    3e64:	f8d1 900c 	ldr.w	r9, [r1, #12]
		ticker->ack--;
    3e68:	3a01      	subs	r2, #1
    3e6a:	708a      	strb	r2, [r1, #2]
		if (ticker->timeout_func) {
    3e6c:	f1b9 0f00 	cmp.w	r9, #0
    3e70:	d0cc      	beq.n	3e0c <ticker_worker+0x2e>
					   ticks_expired -
    3e72:	6948      	ldr	r0, [r1, #20]
    3e74:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
    3e76:	8bca      	ldrh	r2, [r1, #30]
					   ticks_expired -
    3e78:	1a28      	subs	r0, r5, r0
    3e7a:	4418      	add	r0, r3
			ticker->timeout_func(ticks_at_expire,
    3e7c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3e80:	690b      	ldr	r3, [r1, #16]
    3e82:	6a49      	ldr	r1, [r1, #36]	; 0x24
    3e84:	47c8      	blx	r9
    3e86:	e7c1      	b.n	3e0c <ticker_worker+0x2e>
    3e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00003e8c <ticker_job>:
{
    3e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->worker_trigger) {
    3e90:	7fc2      	ldrb	r2, [r0, #31]
{
    3e92:	b093      	sub	sp, #76	; 0x4c
    3e94:	4683      	mov	fp, r0
	if (instance->worker_trigger) {
    3e96:	2a00      	cmp	r2, #0
    3e98:	f040 83ba 	bne.w	4610 <ticker_job+0x784>
	ticks_previous = instance->ticks_current;
    3e9c:	6943      	ldr	r3, [r0, #20]
    3e9e:	9305      	str	r3, [sp, #20]
	instance->job_guard = 1;
    3ea0:	2101      	movs	r1, #1
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    3ea2:	7a83      	ldrb	r3, [r0, #10]
	instance->job_guard = 1;
    3ea4:	7781      	strb	r1, [r0, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    3ea6:	7ac0      	ldrb	r0, [r0, #11]
    3ea8:	4298      	cmp	r0, r3
    3eaa:	f000 808f 	beq.w	3fcc <ticker_job+0x140>
		first = instance->ticks_elapsed_first + 1;
    3eae:	440b      	add	r3, r1
    3eb0:	b2db      	uxtb	r3, r3
			first = 0;
    3eb2:	2b02      	cmp	r3, #2
    3eb4:	bf08      	it	eq
    3eb6:	2300      	moveq	r3, #0
		instance->ticks_elapsed_first = first;
    3eb8:	f88b 300a 	strb.w	r3, [fp, #10]
		ticks_elapsed =
    3ebc:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
		flag_elapsed = 1;
    3ec0:	9101      	str	r1, [sp, #4]
		ticks_elapsed =
    3ec2:	f8d3 800c 	ldr.w	r8, [r3, #12]
		instance->ticks_current += ticks_elapsed;
    3ec6:	9b05      	ldr	r3, [sp, #20]
    3ec8:	4443      	add	r3, r8
		instance->ticks_current &= 0x00FFFFFF;
    3eca:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    3ece:	f8cb 3014 	str.w	r3, [fp, #20]
	ticker_id_old_head = instance->ticker_id_head;
    3ed2:	f89b 301d 	ldrb.w	r3, [fp, #29]
    3ed6:	9303      	str	r3, [sp, #12]
	node = &instance->node[0];
    3ed8:	f8db 3000 	ldr.w	r3, [fp]
    3edc:	9304      	str	r3, [sp, #16]
	users = &instance->user[0];
    3ede:	f8db 3004 	ldr.w	r3, [fp, #4]
    3ee2:	930b      	str	r3, [sp, #44]	; 0x2c
    3ee4:	f89b 3009 	ldrb.w	r3, [fp, #9]
    3ee8:	3b01      	subs	r3, #1
    3eea:	b2db      	uxtb	r3, r3
    3eec:	9302      	str	r3, [sp, #8]
	pending = 0;
    3eee:	2300      	movs	r3, #0
    3ef0:	9307      	str	r3, [sp, #28]
	insert_head = TICKER_NULL;
    3ef2:	f04f 0aff 	mov.w	sl, #255	; 0xff
	while (count_user--) {
    3ef6:	9b02      	ldr	r3, [sp, #8]
    3ef8:	2bff      	cmp	r3, #255	; 0xff
    3efa:	d16a      	bne.n	3fd2 <ticker_job+0x146>
	if (instance->ticker_id_head != ticker_id_old_head) {
    3efc:	f89b 301d 	ldrb.w	r3, [fp, #29]
	flag_compare_update = 0;
    3f00:	9a03      	ldr	r2, [sp, #12]
    3f02:	1a9b      	subs	r3, r3, r2
    3f04:	bf18      	it	ne
    3f06:	2301      	movne	r3, #1
    3f08:	9302      	str	r3, [sp, #8]
	if (flag_elapsed) {
    3f0a:	9b01      	ldr	r3, [sp, #4]
    3f0c:	b1e3      	cbz	r3, 3f48 <ticker_job+0xbc>
	node = &instance->node[0];
    3f0e:	f8db 3000 	ldr.w	r3, [fp]
    3f12:	9304      	str	r3, [sp, #16]
	ticks_expired = 0;
    3f14:	f04f 0900 	mov.w	r9, #0
	while (instance->ticker_id_head != TICKER_NULL) {
    3f18:	f89b 601d 	ldrb.w	r6, [fp, #29]
    3f1c:	2eff      	cmp	r6, #255	; 0xff
    3f1e:	d00c      	beq.n	3f3a <ticker_job+0xae>
		ticker = &node[id_expired];
    3f20:	b237      	sxth	r7, r6
    3f22:	9b04      	ldr	r3, [sp, #16]
    3f24:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    3f28:	eb03 04c7 	add.w	r4, r3, r7, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    3f2c:	68a5      	ldr	r5, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    3f2e:	4545      	cmp	r5, r8
    3f30:	f240 8136 	bls.w	41a0 <ticker_job+0x314>
			ticker->ticks_to_expire -= ticks_elapsed;
    3f34:	eba5 0508 	sub.w	r5, r5, r8
    3f38:	60a5      	str	r5, [r4, #8]
			flag_compare_update = 1;
    3f3a:	9b02      	ldr	r3, [sp, #8]
    3f3c:	9a01      	ldr	r2, [sp, #4]
    3f3e:	9903      	ldr	r1, [sp, #12]
    3f40:	42b1      	cmp	r1, r6
    3f42:	bf18      	it	ne
    3f44:	4613      	movne	r3, r2
    3f46:	9302      	str	r3, [sp, #8]
	node = &instance->node[0];
    3f48:	f8db 3000 	ldr.w	r3, [fp]
    3f4c:	9308      	str	r3, [sp, #32]
	users = &instance->user[0];
    3f4e:	f8db 3004 	ldr.w	r3, [fp, #4]
    3f52:	9310      	str	r3, [sp, #64]	; 0x40
    3f54:	f89b 3009 	ldrb.w	r3, [fp, #9]
    3f58:	3b01      	subs	r3, #1
    3f5a:	b2db      	uxtb	r3, r3
    3f5c:	9301      	str	r3, [sp, #4]
	while (count_user--) {
    3f5e:	9b01      	ldr	r3, [sp, #4]
    3f60:	2bff      	cmp	r3, #255	; 0xff
    3f62:	f040 8170 	bne.w	4246 <ticker_job+0x3ba>
	if (instance->ticker_id_head != ticker_id_old_head) {
    3f66:	f89b 301d 	ldrb.w	r3, [fp, #29]
    3f6a:	9a03      	ldr	r2, [sp, #12]
    3f6c:	4293      	cmp	r3, r2
	if (!pending) {
    3f6e:	9b07      	ldr	r3, [sp, #28]
	if (instance->ticker_id_head != ticker_id_old_head) {
    3f70:	f040 8345 	bne.w	45fe <ticker_job+0x772>
	if (!pending) {
    3f74:	b95b      	cbnz	r3, 3f8e <ticker_job+0x102>
    3f76:	f89b 4009 	ldrb.w	r4, [fp, #9]
	users = &instance->user[0];
    3f7a:	f8db 3004 	ldr.w	r3, [fp, #4]
    3f7e:	9301      	str	r3, [sp, #4]
    3f80:	3c01      	subs	r4, #1
    3f82:	b2e4      	uxtb	r4, r4
		uop->status = TICKER_STATUS_SUCCESS;
    3f84:	f04f 0800 	mov.w	r8, #0
	while (count_user--) {
    3f88:	2cff      	cmp	r4, #255	; 0xff
    3f8a:	f040 82a0 	bne.w	44ce <ticker_job+0x642>
	instance->job_guard = 0;
    3f8e:	2300      	movs	r3, #0
    3f90:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
    3f94:	9b02      	ldr	r3, [sp, #8]
    3f96:	b14b      	cbz	r3, 3fac <ticker_job+0x120>
	if (instance->ticker_id_head == TICKER_NULL) {
    3f98:	f89b 301d 	ldrb.w	r3, [fp, #29]
    3f9c:	2bff      	cmp	r3, #255	; 0xff
    3f9e:	f040 82e9 	bne.w	4574 <ticker_job+0x6e8>
		if (cntr_stop() == 0) {
    3fa2:	f006 fe91 	bl	acc8 <cntr_stop>
    3fa6:	b908      	cbnz	r0, 3fac <ticker_job+0x120>
			instance->ticks_slot_previous = 0;
    3fa8:	f8cb 0018 	str.w	r0, [fp, #24]
	if (instance->worker_trigger) {
    3fac:	f89b 301f 	ldrb.w	r3, [fp, #31]
    3fb0:	2b00      	cmp	r3, #0
    3fb2:	f000 832d 	beq.w	4610 <ticker_job+0x784>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    3fb6:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    3fba:	465b      	mov	r3, fp
    3fbc:	2201      	movs	r2, #1
    3fbe:	2103      	movs	r1, #3
    3fc0:	2004      	movs	r0, #4
    3fc2:	46a4      	mov	ip, r4
}
    3fc4:	b013      	add	sp, #76	; 0x4c
    3fc6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    3fca:	4760      	bx	ip
		flag_elapsed = 0;
    3fcc:	9201      	str	r2, [sp, #4]
		ticks_elapsed = 0;
    3fce:	4690      	mov	r8, r2
    3fd0:	e77f      	b.n	3ed2 <ticker_job+0x46>
		user = &users[count_user];
    3fd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3fd4:	9a02      	ldr	r2, [sp, #8]
    3fd6:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
		user_ops = &user->user_op[0];
    3fda:	687b      	ldr	r3, [r7, #4]
    3fdc:	9306      	str	r3, [sp, #24]
		while (user->middle != user->last) {
    3fde:	78f9      	ldrb	r1, [r7, #3]
    3fe0:	78be      	ldrb	r6, [r7, #2]
    3fe2:	428e      	cmp	r6, r1
    3fe4:	f000 80d7 	beq.w	4196 <ticker_job+0x30a>
			user_op = &user_ops[user->middle];
    3fe8:	9b06      	ldr	r3, [sp, #24]
			if (middle == user->count_user_op) {
    3fea:	7838      	ldrb	r0, [r7, #0]
			user_op = &user_ops[user->middle];
    3fec:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    3ff0:	0112      	lsls	r2, r2, #4
    3ff2:	189d      	adds	r5, r3, r2
			middle = user->middle + 1;
    3ff4:	1c73      	adds	r3, r6, #1
    3ff6:	b2db      	uxtb	r3, r3
				middle = 0;
    3ff8:	4298      	cmp	r0, r3
    3ffa:	bf08      	it	eq
    3ffc:	2300      	moveq	r3, #0
			user->middle = middle;
    3ffe:	70bb      	strb	r3, [r7, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    4000:	9b06      	ldr	r3, [sp, #24]
    4002:	5c9a      	ldrb	r2, [r3, r2]
    4004:	2a03      	cmp	r2, #3
    4006:	d9eb      	bls.n	3fe0 <ticker_job+0x154>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    4008:	2a05      	cmp	r2, #5
    400a:	d817      	bhi.n	403c <ticker_job+0x1b0>
			ticker = &node[user_op->id];
    400c:	7869      	ldrb	r1, [r5, #1]
    400e:	eb01 0381 	add.w	r3, r1, r1, lsl #2
    4012:	930a      	str	r3, [sp, #40]	; 0x28
    4014:	980a      	ldr	r0, [sp, #40]	; 0x28
    4016:	9b04      	ldr	r3, [sp, #16]
    4018:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
			state = (ticker->req - ticker->ack) & 0xff;
    401c:	7863      	ldrb	r3, [r4, #1]
    401e:	78a0      	ldrb	r0, [r4, #2]
    4020:	1a1b      	subs	r3, r3, r0
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    4022:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    4026:	d009      	beq.n	403c <ticker_job+0x1b0>
			    (state == 0) ||
    4028:	2a04      	cmp	r2, #4
    402a:	d10c      	bne.n	4046 <ticker_job+0x1ba>
			     (user_op->params.update.ticks_drift_plus == 0) &&
    402c:	686a      	ldr	r2, [r5, #4]
    402e:	b952      	cbnz	r2, 4046 <ticker_job+0x1ba>
			     (user_op->params.update.ticks_slot_plus == 0) &&
    4030:	68aa      	ldr	r2, [r5, #8]
    4032:	b942      	cbnz	r2, 4046 <ticker_job+0x1ba>
			     (user_op->params.update.lazy == 0) &&
    4034:	68ea      	ldr	r2, [r5, #12]
    4036:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    403a:	d104      	bne.n	4046 <ticker_job+0x1ba>
				ticker_job_op_cb(user_op,
    403c:	2101      	movs	r1, #1
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    403e:	4628      	mov	r0, r5
    4040:	f7ff fec3 	bl	3dca <ticker_job_op_cb>
    4044:	e7cb      	b.n	3fde <ticker_job+0x152>
			if (state == 1) {
    4046:	2b01      	cmp	r3, #1
    4048:	f040 809b 	bne.w	4182 <ticker_job+0x2f6>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    404c:	4658      	mov	r0, fp
    404e:	f7ff fe72 	bl	3d36 <ticker_dequeue>
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    4052:	782b      	ldrb	r3, [r5, #0]
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    4054:	60a0      	str	r0, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    4056:	2b04      	cmp	r3, #4
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    4058:	4606      	mov	r6, r0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    405a:	f040 8084 	bne.w	4166 <ticker_job+0x2da>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    405e:	f8db 3014 	ldr.w	r3, [fp, #20]
    4062:	9308      	str	r3, [sp, #32]
	ticks_now = cntr_cnt_get();
    4064:	f006 fe52 	bl	ad0c <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    4068:	9b08      	ldr	r3, [sp, #32]
	ticks_now = cntr_cnt_get();
    406a:	9009      	str	r0, [sp, #36]	; 0x24
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    406c:	1ac3      	subs	r3, r0, r3
    406e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    4072:	4443      	add	r3, r8
	if (ticks_to_expire > ticks_elapsed) {
    4074:	429e      	cmp	r6, r3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    4076:	4602      	mov	r2, r0
		ticker->ticks_to_expire_minus += ticks_elapsed -
    4078:	bf9e      	ittt	ls
    407a:	6962      	ldrls	r2, [r4, #20]
    407c:	1b92      	subls	r2, r2, r6
    407e:	189b      	addls	r3, r3, r2
	if ((ticker->ticks_periodic != 0) &&
    4080:	6862      	ldr	r2, [r4, #4]
		ticker->ticks_to_expire_minus += ticks_elapsed -
    4082:	bf96      	itet	ls
    4084:	6163      	strls	r3, [r4, #20]
		ticks_to_expire -= ticks_elapsed;
    4086:	1af3      	subhi	r3, r6, r3
		ticks_to_expire = 0;
    4088:	2300      	movls	r3, #0
	if ((ticker->ticks_periodic != 0) &&
    408a:	b18a      	cbz	r2, 40b0 <ticker_job+0x224>
	    (user_op->params.update.lazy != 0)) {
    408c:	89a9      	ldrh	r1, [r5, #12]
	if ((ticker->ticks_periodic != 0) &&
    408e:	b179      	cbz	r1, 40b0 <ticker_job+0x224>
		user_op->params.update.lazy--;
    4090:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
    4094:	fa1f fe8e 	uxth.w	lr, lr
    4098:	f8a5 e00c 	strh.w	lr, [r5, #12]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    409c:	429a      	cmp	r2, r3
    409e:	d32b      	bcc.n	40f8 <ticker_job+0x26c>
		ticker->remainder_current -= 30517578UL;
    40a0:	f8df 9324 	ldr.w	r9, [pc, #804]	; 43c8 <ticker_job+0x53c>
		while (ticker->lazy_current < user_op->params.update.lazy) {
    40a4:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    40a8:	45e6      	cmp	lr, ip
    40aa:	d847      	bhi.n	413c <ticker_job+0x2b0>
		ticker->lazy_periodic = user_op->params.update.lazy;
    40ac:	f8a4 e01c 	strh.w	lr, [r4, #28]
				  user_op->params.update.ticks_drift_plus;
    40b0:	88aa      	ldrh	r2, [r5, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    40b2:	9908      	ldr	r1, [sp, #32]
	ticker->ticks_to_expire = ticks_to_expire +
    40b4:	4413      	add	r3, r2
    40b6:	60a3      	str	r3, [r4, #8]
				user_op->params.update.ticks_drift_minus;
    40b8:	88ea      	ldrh	r2, [r5, #6]
	ticker->ticks_to_expire_minus +=
    40ba:	6963      	ldr	r3, [r4, #20]
    40bc:	4413      	add	r3, r2
    40be:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    40c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    40c2:	4620      	mov	r0, r4
    40c4:	f7ff fe63 	bl	3d8e <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    40c8:	69a2      	ldr	r2, [r4, #24]
    40ca:	892b      	ldrh	r3, [r5, #8]
    40cc:	4413      	add	r3, r2
    40ce:	61a3      	str	r3, [r4, #24]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    40d0:	896a      	ldrh	r2, [r5, #10]
    40d2:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
    40d4:	bf8c      	ite	hi
    40d6:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0;
    40d8:	2300      	movls	r3, #0
    40da:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0) {
    40dc:	7bab      	ldrb	r3, [r5, #14]
    40de:	b103      	cbz	r3, 40e2 <ticker_job+0x256>
		ticker->force = user_op->params.update.force;
    40e0:	70e3      	strb	r3, [r4, #3]
	ticker->next = *insert_head;
    40e2:	9b04      	ldr	r3, [sp, #16]
    40e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    40e6:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
		ticker->req++;
    40ea:	7863      	ldrb	r3, [r4, #1]
	*insert_head = user_op->id;
    40ec:	f895 a001 	ldrb.w	sl, [r5, #1]
		ticker->req++;
    40f0:	3301      	adds	r3, #1
    40f2:	7063      	strb	r3, [r4, #1]
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    40f4:	2100      	movs	r1, #0
    40f6:	e7a2      	b.n	403e <ticker_job+0x1b2>
		       (ticker->lazy_current > user_op->params.update.lazy)) {
    40f8:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    40fc:	45e6      	cmp	lr, ip
    40fe:	d2cf      	bcs.n	40a0 <ticker_job+0x214>
	if ((ticker->remainder_current >= BIT(31)) ||
    4100:	6a61      	ldr	r1, [r4, #36]	; 0x24
    4102:	4eaf      	ldr	r6, [pc, #700]	; (43c0 <ticker_job+0x534>)
    4104:	48af      	ldr	r0, [pc, #700]	; (43c4 <ticker_job+0x538>)
    4106:	198e      	adds	r6, r1, r6
    4108:	4286      	cmp	r6, r0
		ticker->remainder_current += 30517578UL;
    410a:	bf81      	itttt	hi
    410c:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
    4110:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
    4114:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
    4118:	6261      	strhi	r1, [r4, #36]	; 0x24
	ticker->remainder_current -= ticker->remainder_periodic;
    411a:	6a66      	ldr	r6, [r4, #36]	; 0x24
    411c:	6a21      	ldr	r1, [r4, #32]
		decrement++;
    411e:	bf8c      	ite	hi
    4120:	f04f 0901 	movhi.w	r9, #1
	u8_t decrement = 0;
    4124:	f04f 0900 	movls.w	r9, #0
	ticker->remainder_current -= ticker->remainder_periodic;
    4128:	1a76      	subs	r6, r6, r1
			ticks_to_expire -= ticker->ticks_periodic +
    412a:	4491      	add	r9, r2
			ticker->lazy_current--;
    412c:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
	ticker->remainder_current -= ticker->remainder_periodic;
    4130:	6266      	str	r6, [r4, #36]	; 0x24
			ticks_to_expire -= ticker->ticks_periodic +
    4132:	eba3 0309 	sub.w	r3, r3, r9
			ticker->lazy_current--;
    4136:	f8a4 c01e 	strh.w	ip, [r4, #30]
    413a:	e7af      	b.n	409c <ticker_job+0x210>
	ticker->remainder_current += ticker->remainder_periodic;
    413c:	6a66      	ldr	r6, [r4, #36]	; 0x24
    413e:	6a21      	ldr	r1, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    4140:	48a0      	ldr	r0, [pc, #640]	; (43c4 <ticker_job+0x538>)
	ticker->remainder_current += ticker->remainder_periodic;
    4142:	440e      	add	r6, r1
	if ((ticker->remainder_current < BIT(31)) &&
    4144:	499e      	ldr	r1, [pc, #632]	; (43c0 <ticker_job+0x534>)
    4146:	1871      	adds	r1, r6, r1
    4148:	4281      	cmp	r1, r0
	return 0;
    414a:	bf8e      	itee	hi
    414c:	2100      	movhi	r1, #0
		return 1;
    414e:	2101      	movls	r1, #1
		ticker->remainder_current -= 30517578UL;
    4150:	444e      	addls	r6, r9
			ticks_to_expire += ticker->ticks_periodic +
    4152:	4411      	add	r1, r2
			ticker->lazy_current++;
    4154:	f10c 0c01 	add.w	ip, ip, #1
	ticker->remainder_current += ticker->remainder_periodic;
    4158:	bf8c      	ite	hi
    415a:	6266      	strhi	r6, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
    415c:	6266      	strls	r6, [r4, #36]	; 0x24
			ticks_to_expire += ticker->ticks_periodic +
    415e:	440b      	add	r3, r1
			ticker->lazy_current++;
    4160:	f8a4 c01e 	strh.w	ip, [r4, #30]
    4164:	e79e      	b.n	40a4 <ticker_job+0x218>
		ticker->req = ticker->ack;
    4166:	78a3      	ldrb	r3, [r4, #2]
    4168:	7063      	strb	r3, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
    416a:	786b      	ldrb	r3, [r5, #1]
    416c:	f89b 201c 	ldrb.w	r2, [fp, #28]
    4170:	429a      	cmp	r2, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    4172:	bf01      	itttt	eq
    4174:	23ff      	moveq	r3, #255	; 0xff
    4176:	f88b 301c 	strbeq.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
    417a:	2300      	moveq	r3, #0
    417c:	f8cb 3018 	streq.w	r3, [fp, #24]
    4180:	e7b8      	b.n	40f4 <ticker_job+0x268>
				instance->sched_cb(TICKER_CALL_ID_JOB,
    4182:	2104      	movs	r1, #4
    4184:	465b      	mov	r3, fp
    4186:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    418a:	2201      	movs	r2, #1
    418c:	4608      	mov	r0, r1
    418e:	47a0      	blx	r4
				pending = 1;
    4190:	2301      	movs	r3, #1
				user->middle = prev;
    4192:	70be      	strb	r6, [r7, #2]
				pending = 1;
    4194:	9307      	str	r3, [sp, #28]
    4196:	9b02      	ldr	r3, [sp, #8]
    4198:	3b01      	subs	r3, #1
    419a:	b2db      	uxtb	r3, r3
    419c:	9302      	str	r3, [sp, #8]
    419e:	e6aa      	b.n	3ef6 <ticker_job+0x6a>
		if (instance->ticks_slot_previous > ticks_to_expire) {
    41a0:	f8db 3018 	ldr.w	r3, [fp, #24]
    41a4:	429d      	cmp	r5, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    41a6:	bf29      	itett	cs
    41a8:	23ff      	movcs	r3, #255	; 0xff
			instance->ticks_slot_previous -= ticks_to_expire;
    41aa:	1b5b      	subcc	r3, r3, r5
			instance->ticker_id_slot_previous = TICKER_NULL;
    41ac:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
    41b0:	2300      	movcs	r3, #0
    41b2:	f8cb 3018 	str.w	r3, [fp, #24]
		if (ticker->ticks_slot != 0) {
    41b6:	69a3      	ldr	r3, [r4, #24]
		ticks_expired += ticks_to_expire;
    41b8:	44a9      	add	r9, r5
		if (ticker->ticks_slot != 0) {
    41ba:	b11b      	cbz	r3, 41c4 <ticker_job+0x338>
			instance->ticker_id_slot_previous = id_expired;
    41bc:	f88b 601c 	strb.w	r6, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
    41c0:	f8cb 3018 	str.w	r3, [fp, #24]
		ticker->ticks_to_expire = 0;
    41c4:	2200      	movs	r2, #0
		instance->ticker_id_head = ticker->next;
    41c6:	9b04      	ldr	r3, [sp, #16]
		ticker->ticks_to_expire = 0;
    41c8:	60a2      	str	r2, [r4, #8]
		instance->ticker_id_head = ticker->next;
    41ca:	f813 3037 	ldrb.w	r3, [r3, r7, lsl #3]
    41ce:	f88b 301d 	strb.w	r3, [fp, #29]
		if (ticker->ticks_periodic != 0) {
    41d2:	f8d4 e004 	ldr.w	lr, [r4, #4]
    41d6:	f1be 0f00 	cmp.w	lr, #0
    41da:	d030      	beq.n	423e <ticker_job+0x3b2>
    41dc:	8ba0      	ldrh	r0, [r4, #28]
	if ((ticker->remainder_current < BIT(31)) &&
    41de:	f8df c1e4 	ldr.w	ip, [pc, #484]	; 43c4 <ticker_job+0x538>
	ticker->remainder_current += ticker->remainder_periodic;
    41e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    41e4:	6a21      	ldr	r1, [r4, #32]
    41e6:	440b      	add	r3, r1
	if ((ticker->remainder_current < BIT(31)) &&
    41e8:	4975      	ldr	r1, [pc, #468]	; (43c0 <ticker_job+0x534>)
    41ea:	1859      	adds	r1, r3, r1
    41ec:	4561      	cmp	r1, ip
		ticker->remainder_current -= 30517578UL;
    41ee:	bf9f      	itttt	ls
    41f0:	f1a3 73e8 	subls.w	r3, r3, #30408704	; 0x1d00000
    41f4:	f5a3 33d4 	subls.w	r3, r3, #108544	; 0x1a800
    41f8:	f5a3 73a5 	subls.w	r3, r3, #330	; 0x14a
    41fc:	6263      	strls	r3, [r4, #36]	; 0x24
		return 1;
    41fe:	bf92      	itee	ls
    4200:	9b01      	ldrls	r3, [sp, #4]
	ticker->remainder_current += ticker->remainder_periodic;
    4202:	6263      	strhi	r3, [r4, #36]	; 0x24
	return 0;
    4204:	2300      	movhi	r3, #0
				ticks_to_expire += ticker_remainder_inc(ticker);
    4206:	4473      	add	r3, lr
			while (count--) {
    4208:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
				ticks_to_expire += ticker_remainder_inc(ticker);
    420c:	441a      	add	r2, r3
			while (count--) {
    420e:	d2e8      	bcs.n	41e2 <ticker_job+0x356>
			ticks_to_expire_prep(ticker, instance->ticks_current,
    4210:	9b05      	ldr	r3, [sp, #20]
			ticker->ticks_to_expire = ticks_to_expire;
    4212:	60a2      	str	r2, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
    4214:	f8db 1014 	ldr.w	r1, [fp, #20]
    4218:	eb03 0209 	add.w	r2, r3, r9
    421c:	4620      	mov	r0, r4
    421e:	f7ff fdb6 	bl	3d8e <ticks_to_expire_prep>
			ticker->lazy_current = ticker->lazy_periodic;
    4222:	8ba3      	ldrh	r3, [r4, #28]
    4224:	83e3      	strh	r3, [r4, #30]
			ticker->force = 0;
    4226:	2300      	movs	r3, #0
    4228:	70e3      	strb	r3, [r4, #3]
			ticker->next = *insert_head;
    422a:	9b04      	ldr	r3, [sp, #16]
    422c:	f803 a037 	strb.w	sl, [r3, r7, lsl #3]
			ticker->req++;
    4230:	7863      	ldrb	r3, [r4, #1]
    4232:	3301      	adds	r3, #1
    4234:	7063      	strb	r3, [r4, #1]
		ticks_elapsed -= ticks_to_expire;
    4236:	eba8 0805 	sub.w	r8, r8, r5
    423a:	46b2      	mov	sl, r6
    423c:	e66c      	b.n	3f18 <ticker_job+0x8c>
			ticker->req = ticker->ack;
    423e:	78a3      	ldrb	r3, [r4, #2]
    4240:	7063      	strb	r3, [r4, #1]
    4242:	4656      	mov	r6, sl
    4244:	e7f7      	b.n	4236 <ticker_job+0x3aa>
		user = &users[count_user];
    4246:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4248:	9a01      	ldr	r2, [sp, #4]
    424a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    424e:	9304      	str	r3, [sp, #16]
		user_ops = (void *)&user->user_op[0];
    4250:	685b      	ldr	r3, [r3, #4]
    4252:	930a      	str	r3, [sp, #40]	; 0x28
		user_ops_first = user->first;
    4254:	9b04      	ldr	r3, [sp, #16]
    4256:	f893 9001 	ldrb.w	r9, [r3, #1]
		while ((insert_head != TICKER_NULL) ||
    425a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    425e:	f000 808e 	beq.w	437e <ticker_job+0x4f2>
				ticker = &node[id_insert];
    4262:	fa0f f38a 	sxth.w	r3, sl
    4266:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    426a:	9a08      	ldr	r2, [sp, #32]
				insert_head = ticker->next;
    426c:	46d0      	mov	r8, sl
    426e:	f812 a033 	ldrb.w	sl, [r2, r3, lsl #3]
				ticker = &node[id_insert];
    4272:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
				user_op = NULL;
    4276:	2500      	movs	r5, #0
	struct ticker_node *node = &instance->node[0];
    4278:	f8db 3000 	ldr.w	r3, [fp]
    427c:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker->next = TICKER_NULL;
    427e:	23ff      	movs	r3, #255	; 0xff
	if (ticker->lazy_current > ticker->lazy_periodic) {
    4280:	8ba2      	ldrh	r2, [r4, #28]
	ticker->next = TICKER_NULL;
    4282:	7023      	strb	r3, [r4, #0]
	if (ticker->lazy_current > ticker->lazy_periodic) {
    4284:	8be3      	ldrh	r3, [r4, #30]
    4286:	4293      	cmp	r3, r2
		skip = ticker->lazy_current -
    4288:	bf86      	itte	hi
    428a:	1a9b      	subhi	r3, r3, r2
    428c:	b29b      	uxthhi	r3, r3
		skip = 0;
    428e:	2300      	movls	r3, #0
    4290:	930c      	str	r3, [sp, #48]	; 0x30
	ticker_new = &node[id];
    4292:	fa0f f388 	sxth.w	r3, r8
    4296:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    429a:	00db      	lsls	r3, r3, #3
    429c:	9311      	str	r3, [sp, #68]	; 0x44
    429e:	9b11      	ldr	r3, [sp, #68]	; 0x44
	node = &instance->node[0];
    42a0:	f8db 2000 	ldr.w	r2, [fp]
	ticks_slot_previous = instance->ticks_slot_previous;
    42a4:	f8db 0018 	ldr.w	r0, [fp, #24]
    42a8:	9005      	str	r0, [sp, #20]
	ticker_new = &node[id];
    42aa:	eb02 0e03 	add.w	lr, r2, r3
	collide = ticker_id_slot_previous = TICKER_NULL;
    42ae:	20ff      	movs	r0, #255	; 0xff
	current = instance->ticker_id_head;
    42b0:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker_new->ticks_to_expire;
    42b4:	f8de 1008 	ldr.w	r1, [lr, #8]
	previous = current;
    42b8:	9309      	str	r3, [sp, #36]	; 0x24
	collide = ticker_id_slot_previous = TICKER_NULL;
    42ba:	9006      	str	r0, [sp, #24]
	while ((current != TICKER_NULL) &&
    42bc:	2bff      	cmp	r3, #255	; 0xff
    42be:	d007      	beq.n	42d0 <ticker_job+0x444>
		 (ticker_current = &node[current])->ticks_to_expire))) {
    42c0:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
    42c4:	eb02 06cc 	add.w	r6, r2, ip, lsl #3
		(ticks_to_expire_current =
    42c8:	68b0      	ldr	r0, [r6, #8]
	while ((current != TICKER_NULL) &&
    42ca:	4281      	cmp	r1, r0
    42cc:	f200 80a9 	bhi.w	4422 <ticker_job+0x596>
				     ticks_to_expire + ticker_new->ticks_slot);
    42d0:	f8de 0018 	ldr.w	r0, [lr, #24]
    42d4:	900d      	str	r0, [sp, #52]	; 0x34
	collide = ticker_by_slot_get(&node[0], current,
    42d6:	eb01 0c00 	add.w	ip, r1, r0
    42da:	461e      	mov	r6, r3
	while (ticker_id_head != TICKER_NULL) {
    42dc:	2eff      	cmp	r6, #255	; 0xff
    42de:	f040 80ae 	bne.w	443e <ticker_job+0x5b2>
	if ((ticker_new->ticks_slot == 0) ||
    42e2:	980d      	ldr	r0, [sp, #52]	; 0x34
    42e4:	b130      	cbz	r0, 42f4 <ticker_job+0x468>
    42e6:	9805      	ldr	r0, [sp, #20]
    42e8:	4281      	cmp	r1, r0
    42ea:	f0c0 80bf 	bcc.w	446c <ticker_job+0x5e0>
	    ((ticks_slot_previous <= ticks_to_expire) &&
    42ee:	2eff      	cmp	r6, #255	; 0xff
    42f0:	f040 818a 	bne.w	4608 <ticker_job+0x77c>
		if (previous == current) {
    42f4:	9809      	ldr	r0, [sp, #36]	; 0x24
		ticker_new->ticks_to_expire = ticks_to_expire;
    42f6:	f8ce 1008 	str.w	r1, [lr, #8]
		if (previous == current) {
    42fa:	4283      	cmp	r3, r0
			node[previous].next = id;
    42fc:	bf18      	it	ne
    42fe:	f9bd 0024 	ldrshne.w	r0, [sp, #36]	; 0x24
		ticker_new->next = current;
    4302:	f88e 3000 	strb.w	r3, [lr]
			node[previous].next = id;
    4306:	bf16      	itet	ne
    4308:	eb00 0080 	addne.w	r0, r0, r0, lsl #2
			instance->ticker_id_head = id;
    430c:	f88b 801d 	strbeq.w	r8, [fp, #29]
			node[previous].next = id;
    4310:	f802 8030 	strbne.w	r8, [r2, r0, lsl #3]
		if (current != TICKER_NULL) {
    4314:	2bff      	cmp	r3, #255	; 0xff
    4316:	d006      	beq.n	4326 <ticker_job+0x49a>
			node[current].ticks_to_expire -= ticks_to_expire;
    4318:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    431c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    4320:	689a      	ldr	r2, [r3, #8]
    4322:	1a51      	subs	r1, r2, r1
    4324:	6099      	str	r1, [r3, #8]
	ticker->req = ticker->ack + 1;
    4326:	78a3      	ldrb	r3, [r4, #2]
    4328:	3301      	adds	r3, #1
    432a:	7063      	strb	r3, [r4, #1]
	return TICKER_STATUS_SUCCESS;
    432c:	2100      	movs	r1, #0
			if (user_op) {
    432e:	2d00      	cmp	r5, #0
    4330:	d093      	beq.n	425a <ticker_job+0x3ce>
				ticker_job_op_cb(user_op, status);
    4332:	4628      	mov	r0, r5
    4334:	f7ff fd49 	bl	3dca <ticker_job_op_cb>
    4338:	e78f      	b.n	425a <ticker_job+0x3ce>
				user_op = &user_ops[user_ops_first];
    433a:	eb09 0349 	add.w	r3, r9, r9, lsl #1
    433e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4340:	011b      	lsls	r3, r3, #4
    4342:	18d5      	adds	r5, r2, r3
				first = user_ops_first + 1;
    4344:	f109 0201 	add.w	r2, r9, #1
    4348:	fa5f f982 	uxtb.w	r9, r2
				if (first == user->count_user_op) {
    434c:	9a04      	ldr	r2, [sp, #16]
    434e:	7812      	ldrb	r2, [r2, #0]
					first = 0;
    4350:	454a      	cmp	r2, r9
    4352:	bf08      	it	eq
    4354:	f04f 0900 	moveq.w	r9, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    4358:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    435a:	5cd3      	ldrb	r3, [r2, r3]
    435c:	2b03      	cmp	r3, #3
    435e:	d10e      	bne.n	437e <ticker_job+0x4f2>
				id_insert = user_op->id;
    4360:	f895 8001 	ldrb.w	r8, [r5, #1]
				ticker = &node[id_insert];
    4364:	9b08      	ldr	r3, [sp, #32]
    4366:	eb08 0488 	add.w	r4, r8, r8, lsl #2
    436a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
				if (((ticker->req - ticker->ack) & 0xff) != 0) {
    436e:	7862      	ldrb	r2, [r4, #1]
    4370:	78a3      	ldrb	r3, [r4, #2]
    4372:	429a      	cmp	r2, r3
    4374:	d009      	beq.n	438a <ticker_job+0x4fe>
					ticker_job_op_cb(user_op,
    4376:	2101      	movs	r1, #1
    4378:	4628      	mov	r0, r5
    437a:	f7ff fd26 	bl	3dca <ticker_job_op_cb>
		while ((insert_head != TICKER_NULL) ||
    437e:	9b04      	ldr	r3, [sp, #16]
    4380:	789b      	ldrb	r3, [r3, #2]
    4382:	454b      	cmp	r3, r9
    4384:	d1d9      	bne.n	433a <ticker_job+0x4ae>
    4386:	9b01      	ldr	r3, [sp, #4]
    4388:	e5e6      	b.n	3f58 <ticker_job+0xcc>
	ticker->ticks_periodic = start->ticks_periodic;
    438a:	68eb      	ldr	r3, [r5, #12]
				ticker_job_op_start(ticker, user_op,
    438c:	f8db 1014 	ldr.w	r1, [fp, #20]
	ticker->ticks_periodic = start->ticks_periodic;
    4390:	6063      	str	r3, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    4392:	692b      	ldr	r3, [r5, #16]
    4394:	6223      	str	r3, [r4, #32]
	ticker->lazy_periodic = start->lazy;
    4396:	8aab      	ldrh	r3, [r5, #20]
    4398:	83a3      	strh	r3, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
    439a:	69ab      	ldr	r3, [r5, #24]
    439c:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
    439e:	69eb      	ldr	r3, [r5, #28]
    43a0:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
    43a2:	6a2b      	ldr	r3, [r5, #32]
    43a4:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire_minus = 0;
    43a6:	2600      	movs	r6, #0
	ticker->ticks_to_expire = start->ticks_first;
    43a8:	68ab      	ldr	r3, [r5, #8]
    43aa:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0;
    43ac:	6166      	str	r6, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    43ae:	686a      	ldr	r2, [r5, #4]
    43b0:	4620      	mov	r0, r4
    43b2:	f7ff fcec 	bl	3d8e <ticks_to_expire_prep>
	ticker->force = 1;
    43b6:	2301      	movs	r3, #1
	ticker->remainder_current = 0;
    43b8:	6266      	str	r6, [r4, #36]	; 0x24
	ticker->lazy_current = 0;
    43ba:	83e6      	strh	r6, [r4, #30]
	ticker->force = 1;
    43bc:	70e3      	strb	r3, [r4, #3]
    43be:	e75b      	b.n	4278 <ticker_job+0x3ec>
    43c0:	ff172b5a 	.word	0xff172b5a
    43c4:	7f172b59 	.word	0x7f172b59
    43c8:	fe2e56b6 	.word	0xfe2e56b6
		if (ticker->ticks_periodic != 0) {
    43cc:	6860      	ldr	r0, [r4, #4]
    43ce:	2800      	cmp	r0, #0
    43d0:	d07b      	beq.n	44ca <ticker_job+0x63e>
	ticker->remainder_current += ticker->remainder_periodic;
    43d2:	6a62      	ldr	r2, [r4, #36]	; 0x24
    43d4:	6a21      	ldr	r1, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    43d6:	4b90      	ldr	r3, [pc, #576]	; (4618 <ticker_job+0x78c>)
	ticker->remainder_current += ticker->remainder_periodic;
    43d8:	440a      	add	r2, r1
	if ((ticker->remainder_current < BIT(31)) &&
    43da:	4990      	ldr	r1, [pc, #576]	; (461c <ticker_job+0x790>)
    43dc:	18d3      	adds	r3, r2, r3
    43de:	428b      	cmp	r3, r1
		ticker->remainder_current -= 30517578UL;
    43e0:	bf9c      	itt	ls
    43e2:	f1a2 72e8 	subls.w	r2, r2, #30408704	; 0x1d00000
    43e6:	f5a2 32d4 	subls.w	r2, r2, #108544	; 0x1a800
			ticker->ticks_to_expire += ticker->ticks_periodic +
    43ea:	68a3      	ldr	r3, [r4, #8]
	ticker->remainder_current += ticker->remainder_periodic;
    43ec:	bf8b      	itete	hi
    43ee:	6262      	strhi	r2, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
    43f0:	f5a2 72a5 	subls.w	r2, r2, #330	; 0x14a
	return 0;
    43f4:	2200      	movhi	r2, #0
		ticker->remainder_current -= 30517578UL;
    43f6:	6262      	strls	r2, [r4, #36]	; 0x24
			ticker->ticks_to_expire += ticker->ticks_periodic +
    43f8:	4403      	add	r3, r0
		return 1;
    43fa:	bf98      	it	ls
    43fc:	2201      	movls	r2, #1
			ticker->ticks_to_expire += ticker->ticks_periodic +
    43fe:	4413      	add	r3, r2
			ticker->lazy_current++;
    4400:	8be2      	ldrh	r2, [r4, #30]
			ticker->ticks_to_expire += ticker->ticks_periodic +
    4402:	60a3      	str	r3, [r4, #8]
			ticker->lazy_current++;
    4404:	3201      	adds	r2, #1
    4406:	83e2      	strh	r2, [r4, #30]
			    ticker->ticks_to_expire_minus) {
    4408:	6962      	ldr	r2, [r4, #20]
			if (ticker->ticks_to_expire >
    440a:	4293      	cmp	r3, r2
    440c:	f04f 0100 	mov.w	r1, #0
				ticker->ticks_to_expire -=
    4410:	bf89      	itett	hi
    4412:	1a9b      	subhi	r3, r3, r2
				ticker->ticks_to_expire_minus -=
    4414:	1ad3      	subls	r3, r2, r3
				ticker->ticks_to_expire -=
    4416:	60a3      	strhi	r3, [r4, #8]
				ticker->ticks_to_expire_minus = 0;
    4418:	6161      	strhi	r1, [r4, #20]
				ticker->ticks_to_expire_minus -=
    441a:	bf9c      	itt	ls
    441c:	6163      	strls	r3, [r4, #20]
				ticker->ticks_to_expire = 0;
    441e:	60a1      	strls	r1, [r4, #8]
    4420:	e73d      	b.n	429e <ticker_job+0x412>
		if (ticker_current->ticks_slot != 0) {
    4422:	69b6      	ldr	r6, [r6, #24]
		ticks_to_expire -= ticks_to_expire_current;
    4424:	1a09      	subs	r1, r1, r0
		if (ticker_current->ticks_slot != 0) {
    4426:	b946      	cbnz	r6, 443a <ticker_job+0x5ae>
			if (ticks_slot_previous > ticks_to_expire_current) {
    4428:	9f05      	ldr	r7, [sp, #20]
    442a:	42b8      	cmp	r0, r7
    442c:	d200      	bcs.n	4430 <ticker_job+0x5a4>
				ticks_slot_previous -= ticks_to_expire_current;
    442e:	1a3e      	subs	r6, r7, r0
		current = ticker_current->next;
    4430:	9309      	str	r3, [sp, #36]	; 0x24
    4432:	9605      	str	r6, [sp, #20]
    4434:	f812 303c 	ldrb.w	r3, [r2, ip, lsl #3]
    4438:	e740      	b.n	42bc <ticker_job+0x430>
		if (ticker_current->ticks_slot != 0) {
    443a:	9306      	str	r3, [sp, #24]
    443c:	e7f8      	b.n	4430 <ticker_job+0x5a4>
		ticker = &node[ticker_id_head];
    443e:	b230      	sxth	r0, r6
    4440:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    4444:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
    4448:	970e      	str	r7, [sp, #56]	; 0x38
		ticks_to_expire = ticker->ticks_to_expire;
    444a:	68bf      	ldr	r7, [r7, #8]
    444c:	970f      	str	r7, [sp, #60]	; 0x3c
		if (ticks_slot <= ticks_to_expire) {
    444e:	4567      	cmp	r7, ip
    4450:	d20a      	bcs.n	4468 <ticker_job+0x5dc>
		if (ticker->ticks_slot) {
    4452:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    4454:	69bf      	ldr	r7, [r7, #24]
    4456:	2f00      	cmp	r7, #0
    4458:	f47f af43 	bne.w	42e2 <ticker_job+0x456>
		ticks_slot -= ticks_to_expire;
    445c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    445e:	ebac 0c06 	sub.w	ip, ip, r6
		ticker_id_head = ticker->next;
    4462:	f812 6030 	ldrb.w	r6, [r2, r0, lsl #3]
    4466:	e739      	b.n	42dc <ticker_job+0x450>
			return TICKER_NULL;
    4468:	26ff      	movs	r6, #255	; 0xff
    446a:	e73a      	b.n	42e2 <ticker_job+0x456>
	while (id_insert !=
    446c:	9b06      	ldr	r3, [sp, #24]
    446e:	4598      	cmp	r8, r3
    4470:	f43f af59 	beq.w	4326 <ticker_job+0x49a>
		if (id_collide != TICKER_NULL) {
    4474:	9b06      	ldr	r3, [sp, #24]
    4476:	2bff      	cmp	r3, #255	; 0xff
    4478:	d0a8      	beq.n	43cc <ticker_job+0x540>
    447a:	461e      	mov	r6, r3
			struct ticker_node *ticker_collide = &node[id_collide];
    447c:	b233      	sxth	r3, r6
    447e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    4482:	9305      	str	r3, [sp, #20]
    4484:	9a05      	ldr	r2, [sp, #20]
    4486:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4488:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
			if (ticker_collide->lazy_current >
    448c:	8bfb      	ldrh	r3, [r7, #30]
			    ticker_collide->lazy_periodic) {
    448e:	8bba      	ldrh	r2, [r7, #28]
			if (ticker_collide->lazy_current >
    4490:	4293      	cmp	r3, r2
				skip_collide = ticker_collide->lazy_current -
    4492:	bf88      	it	hi
    4494:	1a9b      	subhi	r3, r3, r2
			if (ticker_collide->ticks_periodic &&
    4496:	687a      	ldr	r2, [r7, #4]
				skip_collide = ticker_collide->lazy_current -
    4498:	bf8c      	ite	hi
    449a:	b29b      	uxthhi	r3, r3
				skip_collide = 0;
    449c:	2300      	movls	r3, #0
			if (ticker_collide->ticks_periodic &&
    449e:	2a00      	cmp	r2, #0
    44a0:	d094      	beq.n	43cc <ticker_job+0x540>
    44a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    44a4:	4293      	cmp	r3, r2
    44a6:	d891      	bhi.n	43cc <ticker_job+0x540>
			    skip_collide <= skip &&
    44a8:	78fa      	ldrb	r2, [r7, #3]
    44aa:	78e3      	ldrb	r3, [r4, #3]
    44ac:	429a      	cmp	r2, r3
    44ae:	d28d      	bcs.n	43cc <ticker_job+0x540>
					ticker_dequeue(instance, id_collide);
    44b0:	4631      	mov	r1, r6
    44b2:	4658      	mov	r0, fp
    44b4:	f7ff fc3f 	bl	3d36 <ticker_dequeue>
				ticker_collide->req = ticker_collide->ack;
    44b8:	78bb      	ldrb	r3, [r7, #2]
    44ba:	707b      	strb	r3, [r7, #1]
				ticker_collide->next = *insert_head;
    44bc:	9a05      	ldr	r2, [sp, #20]
    44be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
				ticker_collide->ticks_to_expire =
    44c0:	60b8      	str	r0, [r7, #8]
				ticker_collide->next = *insert_head;
    44c2:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
    44c6:	46b2      	mov	sl, r6
    44c8:	e6e9      	b.n	429e <ticker_job+0x412>
			return TICKER_STATUS_FAILURE;
    44ca:	2101      	movs	r1, #1
    44cc:	e72f      	b.n	432e <ticker_job+0x4a2>
		user = &users[count_user];
    44ce:	9b01      	ldr	r3, [sp, #4]
    44d0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
		user_op = &user->user_op[0];
    44d4:	686e      	ldr	r6, [r5, #4]
		while (user->first != user->last) {
    44d6:	786b      	ldrb	r3, [r5, #1]
    44d8:	78ea      	ldrb	r2, [r5, #3]
    44da:	429a      	cmp	r2, r3
    44dc:	d102      	bne.n	44e4 <ticker_job+0x658>
    44de:	3c01      	subs	r4, #1
    44e0:	b2e4      	uxtb	r4, r4
    44e2:	e551      	b.n	3f88 <ticker_job+0xfc>
			ticker_job_op_inquire(instance, &user_op[user->first]);
    44e4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    44e8:	011b      	lsls	r3, r3, #4
    44ea:	18f2      	adds	r2, r6, r3
	switch (uop->op) {
    44ec:	5cf3      	ldrb	r3, [r6, r3]
    44ee:	2b01      	cmp	r3, #1
    44f0:	d025      	beq.n	453e <ticker_job+0x6b2>
    44f2:	2b02      	cmp	r3, #2
    44f4:	d12a      	bne.n	454c <ticker_job+0x6c0>
		ticker_by_next_slot_get(instance,
    44f6:	f8d2 c004 	ldr.w	ip, [r2, #4]
    44fa:	6893      	ldr	r3, [r2, #8]
	_ticker_id_head = *ticker_id_head;
    44fc:	f89c 0000 	ldrb.w	r0, [ip]
		ticker_by_next_slot_get(instance,
    4500:	f8d2 900c 	ldr.w	r9, [r2, #12]
	node = instance->node;
    4504:	f8db e000 	ldr.w	lr, [fp]
	if ((_ticker_id_head == TICKER_NULL) ||
    4508:	28ff      	cmp	r0, #255	; 0xff
    450a:	d004      	beq.n	4516 <ticker_job+0x68a>
    450c:	6819      	ldr	r1, [r3, #0]
    450e:	f8db 7014 	ldr.w	r7, [fp, #20]
    4512:	42b9      	cmp	r1, r7
    4514:	d023      	beq.n	455e <ticker_job+0x6d2>
		*ticks_current = instance->ticks_current;
    4516:	f8db 0014 	ldr.w	r0, [fp, #20]
		_ticker_id_head = instance->ticker_id_head;
    451a:	f89b 101d 	ldrb.w	r1, [fp, #29]
		*ticks_current = instance->ticks_current;
    451e:	6018      	str	r0, [r3, #0]
		_ticks_to_expire = 0;
    4520:	2300      	movs	r3, #0
	while ((_ticker_id_head != TICKER_NULL) &&
    4522:	29ff      	cmp	r1, #255	; 0xff
    4524:	d007      	beq.n	4536 <ticker_job+0x6aa>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0)) {
    4526:	eb01 0a81 	add.w	sl, r1, r1, lsl #2
    452a:	eb0e 00ca 	add.w	r0, lr, sl, lsl #3
	while ((_ticker_id_head != TICKER_NULL) &&
    452e:	6987      	ldr	r7, [r0, #24]
    4530:	6880      	ldr	r0, [r0, #8]
    4532:	b1df      	cbz	r7, 456c <ticker_job+0x6e0>
		_ticks_to_expire += ticker->ticks_to_expire;
    4534:	4403      	add	r3, r0
	*ticker_id_head = _ticker_id_head;
    4536:	f88c 1000 	strb.w	r1, [ip]
	*ticks_to_expire = _ticks_to_expire;
    453a:	f8c9 3000 	str.w	r3, [r9]
		fp_op_func = uop->fp_op_func;
    453e:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uop->status = TICKER_STATUS_SUCCESS;
    4540:	f8c2 8024 	str.w	r8, [r2, #36]	; 0x24
	if (fp_op_func) {
    4544:	b113      	cbz	r3, 454c <ticker_job+0x6c0>
		fp_op_func(uop->status, uop->op_context);
    4546:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    4548:	2000      	movs	r0, #0
    454a:	4798      	blx	r3
			first = user->first + 1;
    454c:	786b      	ldrb	r3, [r5, #1]
			if (first == user->count_user_op) {
    454e:	782a      	ldrb	r2, [r5, #0]
			first = user->first + 1;
    4550:	3301      	adds	r3, #1
    4552:	b2db      	uxtb	r3, r3
				first = 0;
    4554:	429a      	cmp	r2, r3
    4556:	bf08      	it	eq
    4558:	2300      	moveq	r3, #0
			user->first = first;
    455a:	706b      	strb	r3, [r5, #1]
    455c:	e7bb      	b.n	44d6 <ticker_job+0x64a>
		ticker = &node[_ticker_id_head];
    455e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
	_ticks_to_expire = *ticks_to_expire;
    4562:	f8d9 3000 	ldr.w	r3, [r9]
		_ticker_id_head = ticker->next;
    4566:	f81e 1030 	ldrb.w	r1, [lr, r0, lsl #3]
    456a:	e7da      	b.n	4522 <ticker_job+0x696>
		_ticks_to_expire += ticker->ticks_to_expire;
    456c:	4403      	add	r3, r0
		_ticker_id_head = ticker->next;
    456e:	f81e 103a 	ldrb.w	r1, [lr, sl, lsl #3]
    4572:	e7d6      	b.n	4522 <ticker_job+0x696>
	if (ticker_id_old_head == TICKER_NULL) {
    4574:	9b03      	ldr	r3, [sp, #12]
    4576:	2bff      	cmp	r3, #255	; 0xff
    4578:	d107      	bne.n	458a <ticker_job+0x6fe>
		ticks_current = cntr_cnt_get();
    457a:	f006 fbc7 	bl	ad0c <cntr_cnt_get>
    457e:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
    4580:	f006 fb94 	bl	acac <cntr_start>
    4584:	b908      	cbnz	r0, 458a <ticker_job+0x6fe>
			instance->ticks_current = ticks_current;
    4586:	f8cb 4014 	str.w	r4, [fp, #20]
	ticker = &instance->node[instance->ticker_id_head];
    458a:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker->ticks_to_expire;
    458e:	f8db 2000 	ldr.w	r2, [fp]
	ticker = &instance->node[instance->ticker_id_head];
    4592:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	ticks_to_expire = ticker->ticks_to_expire;
    4596:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    459a:	260a      	movs	r6, #10
    459c:	689d      	ldr	r5, [r3, #8]
		ctr = cntr_cnt_get();
    459e:	f006 fbb5 	bl	ad0c <cntr_cnt_get>
		cc = instance->ticks_current;
    45a2:	f8db 4014 	ldr.w	r4, [fp, #20]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    45a6:	1b03      	subs	r3, r0, r4
    45a8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
    45ac:	3303      	adds	r3, #3
		cc += ((ticks_elapsed < ticks_to_expire) ?
    45ae:	42ab      	cmp	r3, r5
    45b0:	bf2c      	ite	cs
    45b2:	18e4      	addcs	r4, r4, r3
    45b4:	1964      	addcc	r4, r4, r5
		cc &= 0x00FFFFFF;
    45b6:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		ctr = cntr_cnt_get();
    45ba:	4607      	mov	r7, r0
		instance->trigger_set_cb(cc);
    45bc:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
    45c0:	4620      	mov	r0, r4
    45c2:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
    45c4:	f006 fba2 	bl	ad0c <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    45c8:	1bc0      	subs	r0, r0, r7
    45ca:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    45ce:	1be4      	subs	r4, r4, r7
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
    45d0:	3003      	adds	r0, #3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    45d2:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
    45d6:	42a0      	cmp	r0, r4
    45d8:	f67f ace8 	bls.w	3fac <ticker_job+0x120>
		LL_ASSERT(i);
    45dc:	3e01      	subs	r6, #1
    45de:	d1de      	bne.n	459e <ticker_job+0x712>
    45e0:	4a0f      	ldr	r2, [pc, #60]	; (4620 <ticker_job+0x794>)
    45e2:	4910      	ldr	r1, [pc, #64]	; (4624 <ticker_job+0x798>)
    45e4:	2003      	movs	r0, #3
    45e6:	f7fd fe0b 	bl	2200 <bt_log>
    45ea:	4040      	eors	r0, r0
    45ec:	f380 8811 	msr	BASEPRI, r0
    45f0:	f04f 0004 	mov.w	r0, #4
    45f4:	df02      	svc	2
	instance->job_guard = 0;
    45f6:	2300      	movs	r3, #0
    45f8:	f88b 301e 	strb.w	r3, [fp, #30]
    45fc:	e4cc      	b.n	3f98 <ticker_job+0x10c>
	if (!pending) {
    45fe:	2b00      	cmp	r3, #0
    4600:	d1f9      	bne.n	45f6 <ticker_job+0x76a>
		flag_compare_update = 1;
    4602:	2301      	movs	r3, #1
    4604:	9302      	str	r3, [sp, #8]
    4606:	e4b6      	b.n	3f76 <ticker_job+0xea>
	while (id_insert !=
    4608:	45b0      	cmp	r8, r6
    460a:	f47f af37 	bne.w	447c <ticker_job+0x5f0>
    460e:	e68a      	b.n	4326 <ticker_job+0x49a>
}
    4610:	b013      	add	sp, #76	; 0x4c
    4612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4616:	bf00      	nop
    4618:	ff172b5a 	.word	0xff172b5a
    461c:	7f172b59 	.word	0x7f172b59
    4620:	0000df04 	.word	0x0000df04
    4624:	0000df1e 	.word	0x0000df1e

00004628 <ticker_init>:
{
    4628:	b5f0      	push	{r4, r5, r6, r7, lr}
	instance->count_node = count_node;
    462a:	4d1a      	ldr	r5, [pc, #104]	; (4694 <ticker_init+0x6c>)
{
    462c:	9f05      	ldr	r7, [sp, #20]
    462e:	f89d 4018 	ldrb.w	r4, [sp, #24]
	instance->count_node = count_node;
    4632:	262c      	movs	r6, #44	; 0x2c
    4634:	4346      	muls	r6, r0
    4636:	eb05 0e06 	add.w	lr, r5, r6
	instance->node = node;
    463a:	51aa      	str	r2, [r5, r6]
	instance->count_node = count_node;
    463c:	f88e 1008 	strb.w	r1, [lr, #8]
	struct ticker_user_op *user_op_ = (void *)user_op;
    4640:	9907      	ldr	r1, [sp, #28]
	instance->count_user = count_user;
    4642:	f88e 3009 	strb.w	r3, [lr, #9]
	instance->user = user;
    4646:	f8ce 7004 	str.w	r7, [lr, #4]
	while (count_user--) {
    464a:	3b01      	subs	r3, #1
    464c:	b2db      	uxtb	r3, r3
    464e:	2bff      	cmp	r3, #255	; 0xff
    4650:	d111      	bne.n	4676 <ticker_init+0x4e>
	if (count_op) {
    4652:	b9ec      	cbnz	r4, 4690 <ticker_init+0x68>
	instance->caller_id_get_cb = caller_id_get_cb;
    4654:	222c      	movs	r2, #44	; 0x2c
    4656:	fb02 5200 	mla	r2, r2, r0, r5
    465a:	9908      	ldr	r1, [sp, #32]
    465c:	6211      	str	r1, [r2, #32]
	instance->sched_cb = sched_cb;
    465e:	9909      	ldr	r1, [sp, #36]	; 0x24
    4660:	6251      	str	r1, [r2, #36]	; 0x24
	instance->trigger_set_cb = trigger_set_cb;
    4662:	990a      	ldr	r1, [sp, #40]	; 0x28
    4664:	6291      	str	r1, [r2, #40]	; 0x28
	instance->ticker_id_head = TICKER_NULL;
    4666:	7753      	strb	r3, [r2, #29]
	instance->ticker_id_slot_previous = TICKER_NULL;
    4668:	7713      	strb	r3, [r2, #28]
	instance->ticks_slot_previous = 0;
    466a:	6194      	str	r4, [r2, #24]
	instance->ticks_current = 0;
    466c:	6154      	str	r4, [r2, #20]
	instance->ticks_elapsed_first = 0;
    466e:	7294      	strb	r4, [r2, #10]
	instance->ticks_elapsed_last = 0;
    4670:	72d4      	strb	r4, [r2, #11]
	return TICKER_STATUS_SUCCESS;
    4672:	4620      	mov	r0, r4
    4674:	bdf0      	pop	{r4, r5, r6, r7, pc}
		users[count_user].user_op = user_op_;
    4676:	b21a      	sxth	r2, r3
    4678:	eb07 06c2 	add.w	r6, r7, r2, lsl #3
    467c:	6071      	str	r1, [r6, #4]
		user_op_ += users[count_user].count_user_op;
    467e:	f817 2032 	ldrb.w	r2, [r7, r2, lsl #3]
    4682:	eb02 0642 	add.w	r6, r2, r2, lsl #1
		count_op -= users[count_user].count_user_op;
    4686:	1aa4      	subs	r4, r4, r2
		user_op_ += users[count_user].count_user_op;
    4688:	eb01 1106 	add.w	r1, r1, r6, lsl #4
		count_op -= users[count_user].count_user_op;
    468c:	b2e4      	uxtb	r4, r4
    468e:	e7dc      	b.n	464a <ticker_init+0x22>
		return TICKER_STATUS_FAILURE;
    4690:	2001      	movs	r0, #1
}
    4692:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4694:	20000990 	.word	0x20000990

00004698 <ticker_trigger>:
	instance = &_instance[instance_index];
    4698:	4a07      	ldr	r2, [pc, #28]	; (46b8 <ticker_trigger+0x20>)
    469a:	212c      	movs	r1, #44	; 0x2c
    469c:	fb00 2301 	mla	r3, r0, r1, r2
{
    46a0:	b410      	push	{r4}
	if (instance->sched_cb) {
    46a2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    46a4:	b12c      	cbz	r4, 46b2 <ticker_trigger+0x1a>
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    46a6:	46a4      	mov	ip, r4
    46a8:	2201      	movs	r2, #1
    46aa:	2103      	movs	r1, #3
    46ac:	2002      	movs	r0, #2
}
    46ae:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    46b0:	4760      	bx	ip
}
    46b2:	bc10      	pop	{r4}
    46b4:	4770      	bx	lr
    46b6:	bf00      	nop
    46b8:	20000990 	.word	0x20000990

000046bc <ticker_start>:
{
    46bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    46c0:	4f25      	ldr	r7, [pc, #148]	; (4758 <ticker_start+0x9c>)
    46c2:	f04f 082c 	mov.w	r8, #44	; 0x2c
{
    46c6:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    46c8:	fb08 7000 	mla	r0, r8, r0, r7
    46cc:	fa0f fc81 	sxth.w	ip, r1
    46d0:	f8d0 e004 	ldr.w	lr, [r0, #4]
    46d4:	eb0e 06cc 	add.w	r6, lr, ip, lsl #3
	if (last >= user->count_user_op) {
    46d8:	f81e e03c 	ldrb.w	lr, [lr, ip, lsl #3]
	last = user->last + 1;
    46dc:	78f4      	ldrb	r4, [r6, #3]
    46de:	1c65      	adds	r5, r4, #1
    46e0:	b2ed      	uxtb	r5, r5
		last = 0;
    46e2:	45ae      	cmp	lr, r5
    46e4:	bf98      	it	ls
    46e6:	2500      	movls	r5, #0
	if (last == user->first) {
    46e8:	f896 e001 	ldrb.w	lr, [r6, #1]
    46ec:	45ae      	cmp	lr, r5
    46ee:	d02f      	beq.n	4750 <ticker_start+0x94>
	user_op = &user->user_op[user->last];
    46f0:	f8d6 c004 	ldr.w	ip, [r6, #4]
    46f4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    46f8:	ea4f 1e04 	mov.w	lr, r4, lsl #4
    46fc:	eb0c 040e 	add.w	r4, ip, lr
	user_op->op = TICKER_USER_OP_TYPE_START;
    4700:	f04f 0a03 	mov.w	sl, #3
    4704:	f80c a00e 	strb.w	sl, [ip, lr]
	user_op->params.start.ticks_at_start = ticks_anchor;
    4708:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
    470a:	9b08      	ldr	r3, [sp, #32]
    470c:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    470e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4710:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    4712:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4714:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    4716:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4718:	61a3      	str	r3, [r4, #24]
	user_op->params.start.lazy = lazy;
    471a:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    471e:	82a3      	strh	r3, [r4, #20]
	user_op->params.start.fp_timeout_func = fp_timeout_func;
    4720:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4722:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
    4724:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4726:	6223      	str	r3, [r4, #32]
	user_op->status = TICKER_STATUS_BUSY;
    4728:	2302      	movs	r3, #2
    472a:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    472c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    472e:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    4730:	9b10      	ldr	r3, [sp, #64]	; 0x40
	user_op->id = ticker_id;
    4732:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    4734:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    4736:	70f5      	strb	r5, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    4738:	6a45      	ldr	r5, [r0, #36]	; 0x24
    473a:	6a03      	ldr	r3, [r0, #32]
    473c:	4608      	mov	r0, r1
    473e:	4798      	blx	r3
    4740:	fb09 7308 	mla	r3, r9, r8, r7
    4744:	2200      	movs	r2, #0
    4746:	2104      	movs	r1, #4
    4748:	47a8      	blx	r5
	return user_op->status;
    474a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    474c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    4750:	2001      	movs	r0, #1
}
    4752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4756:	bf00      	nop
    4758:	20000990 	.word	0x20000990

0000475c <ticker_update>:
{
    475c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    4760:	f8df 8090 	ldr.w	r8, [pc, #144]	; 47f4 <ticker_update+0x98>
    4764:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    4768:	fb0a 8e00 	mla	lr, sl, r0, r8
    476c:	b20f      	sxth	r7, r1
    476e:	f8de 5004 	ldr.w	r5, [lr, #4]
{
    4772:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    4774:	eb05 00c7 	add.w	r0, r5, r7, lsl #3
	if (last >= user->count_user_op) {
    4778:	f815 5037 	ldrb.w	r5, [r5, r7, lsl #3]
	last = user->last + 1;
    477c:	78c4      	ldrb	r4, [r0, #3]
    477e:	1c66      	adds	r6, r4, #1
    4780:	b2f6      	uxtb	r6, r6
		last = 0;
    4782:	42b5      	cmp	r5, r6
    4784:	bf98      	it	ls
    4786:	2600      	movls	r6, #0
	if (last == user->first) {
    4788:	7845      	ldrb	r5, [r0, #1]
    478a:	42b5      	cmp	r5, r6
    478c:	d02f      	beq.n	47ee <ticker_update+0x92>
	user_op = &user->user_op[user->last];
    478e:	f8d0 c004 	ldr.w	ip, [r0, #4]
    4792:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    4796:	0125      	lsls	r5, r4, #4
    4798:	eb0c 0405 	add.w	r4, ip, r5
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    479c:	2704      	movs	r7, #4
    479e:	f80c 7005 	strb.w	r7, [ip, r5]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    47a2:	80a3      	strh	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    47a4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    47a8:	80e3      	strh	r3, [r4, #6]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    47aa:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    47ae:	8123      	strh	r3, [r4, #8]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    47b0:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    47b4:	8163      	strh	r3, [r4, #10]
	user_op->params.update.lazy = lazy;
    47b6:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    47ba:	81a3      	strh	r3, [r4, #12]
	user_op->params.update.force = force;
    47bc:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    47c0:	73a3      	strb	r3, [r4, #14]
	user_op->status = TICKER_STATUS_BUSY;
    47c2:	2302      	movs	r3, #2
    47c4:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    47c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    47c8:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    47ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	user_op->id = ticker_id;
    47cc:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    47ce:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    47d0:	70c6      	strb	r6, [r0, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    47d2:	f8de 3020 	ldr.w	r3, [lr, #32]
    47d6:	f8de 5024 	ldr.w	r5, [lr, #36]	; 0x24
    47da:	4608      	mov	r0, r1
    47dc:	4798      	blx	r3
    47de:	fb09 830a 	mla	r3, r9, sl, r8
    47e2:	2200      	movs	r2, #0
    47e4:	4639      	mov	r1, r7
    47e6:	47a8      	blx	r5
	return user_op->status;
    47e8:	6a60      	ldr	r0, [r4, #36]	; 0x24
    47ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    47ee:	2001      	movs	r0, #1
}
    47f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    47f4:	20000990 	.word	0x20000990

000047f8 <ticker_stop>:
{
    47f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    47fc:	f8df 906c 	ldr.w	r9, [pc, #108]	; 486c <ticker_stop+0x74>
    4800:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    4804:	fb0a 9e00 	mla	lr, sl, r0, r9
{
    4808:	4680      	mov	r8, r0
	user = &instance->user[user_id];
    480a:	f8de 0004 	ldr.w	r0, [lr, #4]
    480e:	b20e      	sxth	r6, r1
    4810:	eb00 07c6 	add.w	r7, r0, r6, lsl #3
	if (last >= user->count_user_op) {
    4814:	f810 0036 	ldrb.w	r0, [r0, r6, lsl #3]
	last = user->last + 1;
    4818:	78fc      	ldrb	r4, [r7, #3]
    481a:	1c65      	adds	r5, r4, #1
    481c:	b2ed      	uxtb	r5, r5
		last = 0;
    481e:	42a8      	cmp	r0, r5
    4820:	bf98      	it	ls
    4822:	2500      	movls	r5, #0
	if (last == user->first) {
    4824:	7878      	ldrb	r0, [r7, #1]
    4826:	42a8      	cmp	r0, r5
    4828:	d01d      	beq.n	4866 <ticker_stop+0x6e>
	user_op = &user->user_op[user->last];
    482a:	6878      	ldr	r0, [r7, #4]
    482c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    4830:	0124      	lsls	r4, r4, #4
    4832:	1906      	adds	r6, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    4834:	f04f 0c05 	mov.w	ip, #5
    4838:	f800 c004 	strb.w	ip, [r0, r4]
	user_op->id = ticker_id;
    483c:	7072      	strb	r2, [r6, #1]
	user_op->fp_op_func = fp_op_func;
    483e:	62b3      	str	r3, [r6, #40]	; 0x28
	user_op->status = TICKER_STATUS_BUSY;
    4840:	2202      	movs	r2, #2
	user_op->op_context = op_context;
    4842:	9b08      	ldr	r3, [sp, #32]
	user_op->status = TICKER_STATUS_BUSY;
    4844:	6272      	str	r2, [r6, #36]	; 0x24
	user_op->op_context = op_context;
    4846:	62f3      	str	r3, [r6, #44]	; 0x2c
	user->last = last;
    4848:	70fd      	strb	r5, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    484a:	f8de 3020 	ldr.w	r3, [lr, #32]
    484e:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
    4852:	4608      	mov	r0, r1
    4854:	4798      	blx	r3
    4856:	fb08 930a 	mla	r3, r8, sl, r9
    485a:	2200      	movs	r2, #0
    485c:	2104      	movs	r1, #4
    485e:	47a0      	blx	r4
	return user_op->status;
    4860:	6a70      	ldr	r0, [r6, #36]	; 0x24
    4862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    4866:	2001      	movs	r0, #1
}
    4868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    486c:	20000990 	.word	0x20000990

00004870 <ticker_next_slot_get>:
{
    4870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    4874:	f8df 8078 	ldr.w	r8, [pc, #120]	; 48f0 <ticker_next_slot_get+0x80>
    4878:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
{
    487c:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    487e:	fb0a 8000 	mla	r0, sl, r0, r8
    4882:	fa0f fe81 	sxth.w	lr, r1
    4886:	6845      	ldr	r5, [r0, #4]
    4888:	eb05 07ce 	add.w	r7, r5, lr, lsl #3
	if (last >= user->count_user_op) {
    488c:	f815 503e 	ldrb.w	r5, [r5, lr, lsl #3]
	last = user->last + 1;
    4890:	78fc      	ldrb	r4, [r7, #3]
    4892:	1c66      	adds	r6, r4, #1
    4894:	b2f6      	uxtb	r6, r6
		last = 0;
    4896:	42b5      	cmp	r5, r6
    4898:	bf98      	it	ls
    489a:	2600      	movls	r6, #0
	if (last == user->first) {
    489c:	787d      	ldrb	r5, [r7, #1]
    489e:	42b5      	cmp	r5, r6
    48a0:	d023      	beq.n	48ea <ticker_next_slot_get+0x7a>
	user_op = &user->user_op[user->last];
    48a2:	f8d7 c004 	ldr.w	ip, [r7, #4]
    48a6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    48aa:	0125      	lsls	r5, r4, #4
    48ac:	eb0c 0405 	add.w	r4, ip, r5
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
    48b0:	f04f 0e02 	mov.w	lr, #2
    48b4:	f80c e005 	strb.w	lr, [ip, r5]
	user_op->params.slot_get.ticks_current = ticks_current;
    48b8:	60a3      	str	r3, [r4, #8]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
    48ba:	9b08      	ldr	r3, [sp, #32]
    48bc:	60e3      	str	r3, [r4, #12]
	user_op->fp_op_func = fp_op_func;
    48be:	9b09      	ldr	r3, [sp, #36]	; 0x24
    48c0:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->id = TICKER_NULL;
    48c2:	25ff      	movs	r5, #255	; 0xff
	user_op->op_context = op_context;
    48c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	user_op->params.slot_get.ticker_id = ticker_id;
    48c6:	6062      	str	r2, [r4, #4]
	user_op->id = TICKER_NULL;
    48c8:	7065      	strb	r5, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
    48ca:	f8c4 e024 	str.w	lr, [r4, #36]	; 0x24
	user_op->op_context = op_context;
    48ce:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    48d0:	70fe      	strb	r6, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    48d2:	6a45      	ldr	r5, [r0, #36]	; 0x24
    48d4:	6a03      	ldr	r3, [r0, #32]
    48d6:	4608      	mov	r0, r1
    48d8:	4798      	blx	r3
    48da:	fb09 830a 	mla	r3, r9, sl, r8
    48de:	2200      	movs	r2, #0
    48e0:	2104      	movs	r1, #4
    48e2:	47a8      	blx	r5
	return user_op->status;
    48e4:	6a60      	ldr	r0, [r4, #36]	; 0x24
    48e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    48ea:	2001      	movs	r0, #1
}
    48ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    48f0:	20000990 	.word	0x20000990

000048f4 <ticker_job_idle_get>:
{
    48f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    48f8:	f8df 906c 	ldr.w	r9, [pc, #108]	; 4968 <ticker_job_idle_get+0x74>
    48fc:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    4900:	fb0a 9e00 	mla	lr, sl, r0, r9
{
    4904:	4680      	mov	r8, r0
	user = &instance->user[user_id];
    4906:	f8de 0004 	ldr.w	r0, [lr, #4]
    490a:	b20e      	sxth	r6, r1
    490c:	eb00 07c6 	add.w	r7, r0, r6, lsl #3
	if (last >= user->count_user_op) {
    4910:	f810 0036 	ldrb.w	r0, [r0, r6, lsl #3]
	last = user->last + 1;
    4914:	78fc      	ldrb	r4, [r7, #3]
    4916:	1c65      	adds	r5, r4, #1
    4918:	b2ed      	uxtb	r5, r5
		last = 0;
    491a:	42a8      	cmp	r0, r5
    491c:	bf98      	it	ls
    491e:	2500      	movls	r5, #0
	if (last == user->first) {
    4920:	7878      	ldrb	r0, [r7, #1]
    4922:	42a8      	cmp	r0, r5
    4924:	d01d      	beq.n	4962 <ticker_job_idle_get+0x6e>
	user_op = &user->user_op[user->last];
    4926:	6878      	ldr	r0, [r7, #4]
    4928:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    492c:	0124      	lsls	r4, r4, #4
    492e:	1906      	adds	r6, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
    4930:	f04f 0c01 	mov.w	ip, #1
    4934:	f800 c004 	strb.w	ip, [r0, r4]
	user_op->id = TICKER_NULL;
    4938:	20ff      	movs	r0, #255	; 0xff
    493a:	7070      	strb	r0, [r6, #1]
	user_op->status = TICKER_STATUS_BUSY;
    493c:	2002      	movs	r0, #2
    493e:	6270      	str	r0, [r6, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    4940:	62b2      	str	r2, [r6, #40]	; 0x28
	user_op->op_context = op_context;
    4942:	62f3      	str	r3, [r6, #44]	; 0x2c
	user->last = last;
    4944:	70fd      	strb	r5, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    4946:	f8de 3020 	ldr.w	r3, [lr, #32]
    494a:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
    494e:	4608      	mov	r0, r1
    4950:	4798      	blx	r3
    4952:	fb08 930a 	mla	r3, r8, sl, r9
    4956:	2200      	movs	r2, #0
    4958:	2104      	movs	r1, #4
    495a:	47a0      	blx	r4
	return user_op->status;
    495c:	6a70      	ldr	r0, [r6, #36]	; 0x24
    495e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    4962:	2001      	movs	r0, #1
}
    4964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4968:	20000990 	.word	0x20000990

0000496c <ticker_job_sched>:
{
    496c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    4970:	4c08      	ldr	r4, [pc, #32]	; (4994 <ticker_job_sched+0x28>)
    4972:	252c      	movs	r5, #44	; 0x2c
    4974:	fb05 4300 	mla	r3, r5, r0, r4
{
    4978:	4606      	mov	r6, r0
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    497a:	6a5f      	ldr	r7, [r3, #36]	; 0x24
    497c:	6a1b      	ldr	r3, [r3, #32]
    497e:	4608      	mov	r0, r1
    4980:	4798      	blx	r3
    4982:	fb06 4305 	mla	r3, r6, r5, r4
    4986:	46bc      	mov	ip, r7
    4988:	2200      	movs	r2, #0
    498a:	2104      	movs	r1, #4
}
    498c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    4990:	4760      	bx	ip
    4992:	bf00      	nop
    4994:	20000990 	.word	0x20000990

00004998 <ticker_ticks_now_get>:
	return cntr_cnt_get();
    4998:	f006 b9b8 	b.w	ad0c <cntr_cnt_get>

0000499c <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    499c:	1a40      	subs	r0, r0, r1
}
    499e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    49a2:	4770      	bx	lr

000049a4 <ll_addr_get>:

static u8_t pub_addr[BDADDR_SIZE];
static u8_t rnd_addr[BDADDR_SIZE];

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
    49a4:	b508      	push	{r3, lr}
    49a6:	4603      	mov	r3, r0
	if (addr_type > 1) {
    49a8:	2b01      	cmp	r3, #1
{
    49aa:	4608      	mov	r0, r1
	if (addr_type > 1) {
    49ac:	d80e      	bhi.n	49cc <ll_addr_get+0x28>
		return NULL;
	}

	if (addr_type) {
    49ae:	b133      	cbz	r3, 49be <ll_addr_get+0x1a>
		if (bdaddr) {
    49b0:	b119      	cbz	r1, 49ba <ll_addr_get+0x16>
			memcpy(bdaddr, rnd_addr, BDADDR_SIZE);
    49b2:	2206      	movs	r2, #6
    49b4:	4906      	ldr	r1, [pc, #24]	; (49d0 <ll_addr_get+0x2c>)
    49b6:	f7fb fe30 	bl	61a <memcpy>
		}

		return rnd_addr;
    49ba:	4805      	ldr	r0, [pc, #20]	; (49d0 <ll_addr_get+0x2c>)
    49bc:	bd08      	pop	{r3, pc}
	}

	if (bdaddr) {
    49be:	b119      	cbz	r1, 49c8 <ll_addr_get+0x24>
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
    49c0:	2206      	movs	r2, #6
    49c2:	4904      	ldr	r1, [pc, #16]	; (49d4 <ll_addr_get+0x30>)
    49c4:	f7fb fe29 	bl	61a <memcpy>
	}

	return pub_addr;
    49c8:	4802      	ldr	r0, [pc, #8]	; (49d4 <ll_addr_get+0x30>)
}
    49ca:	bd08      	pop	{r3, pc}
		return NULL;
    49cc:	2000      	movs	r0, #0
    49ce:	bd08      	pop	{r3, pc}
    49d0:	200009ee 	.word	0x200009ee
    49d4:	200009e8 	.word	0x200009e8

000049d8 <ll_addr_set>:

u32_t ll_addr_set(u8_t addr_type, u8_t const *const bdaddr)
{
    49d8:	b570      	push	{r4, r5, r6, lr}
    49da:	4606      	mov	r6, r0
    49dc:	460d      	mov	r5, r1
	if (ll_adv_is_enabled() ||
    49de:	f005 f921 	bl	9c24 <ll_adv_is_enabled>
    49e2:	4604      	mov	r4, r0
    49e4:	b110      	cbz	r0, 49ec <ll_addr_set+0x14>
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
    49e6:	240c      	movs	r4, #12
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
}
    49e8:	4620      	mov	r0, r4
    49ea:	bd70      	pop	{r4, r5, r6, pc}
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
    49ec:	f005 f930 	bl	9c50 <ll_scan_is_enabled>
	if (ll_adv_is_enabled() ||
    49f0:	f010 0f06 	tst.w	r0, #6
    49f4:	d1f7      	bne.n	49e6 <ll_addr_set+0xe>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    49f6:	2206      	movs	r2, #6
    49f8:	4629      	mov	r1, r5
	if (addr_type) {
    49fa:	b11e      	cbz	r6, 4a04 <ll_addr_set+0x2c>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    49fc:	4802      	ldr	r0, [pc, #8]	; (4a08 <ll_addr_set+0x30>)
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    49fe:	f7fb fe0c 	bl	61a <memcpy>
    4a02:	e7f1      	b.n	49e8 <ll_addr_set+0x10>
    4a04:	4801      	ldr	r0, [pc, #4]	; (4a0c <ll_addr_set+0x34>)
    4a06:	e7fa      	b.n	49fe <ll_addr_set+0x26>
    4a08:	200009ee 	.word	0x200009ee
    4a0c:	200009e8 	.word	0x200009e8

00004a10 <ll_tx_pwr_get>:
}

void ll_tx_pwr_get(s8_t *min, s8_t *max)
{
	/* TODO: Support TX Power Level other than 0dBm */
	*min = 0;
    4a10:	2300      	movs	r3, #0
    4a12:	7003      	strb	r3, [r0, #0]
	*max = 0;
    4a14:	700b      	strb	r3, [r1, #0]
    4a16:	4770      	bx	lr

00004a18 <bt_rand>:
#include "common/log.h"

#include "hal/ecb.h"

int bt_rand(void *buf, size_t len)
{
    4a18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4a1a:	4607      	mov	r7, r0
    4a1c:	460e      	mov	r6, r1
	while (len) {
    4a1e:	460c      	mov	r4, r1
    4a20:	1b35      	subs	r5, r6, r4
    4a22:	443d      	add	r5, r7
    4a24:	b18c      	cbz	r4, 4a4a <bt_rand+0x32>
		u32_t v = sys_rand32_get();
    4a26:	f7fc fd6f 	bl	1508 <sys_rand32_get>

		if (len >= sizeof(v)) {
    4a2a:	2c03      	cmp	r4, #3
		u32_t v = sys_rand32_get();
    4a2c:	9001      	str	r0, [sp, #4]
		if (len >= sizeof(v)) {
    4a2e:	d907      	bls.n	4a40 <bt_rand+0x28>
			memcpy(buf, &v, sizeof(v));
    4a30:	2204      	movs	r2, #4
    4a32:	eb0d 0102 	add.w	r1, sp, r2
    4a36:	4628      	mov	r0, r5
    4a38:	f7fb fdef 	bl	61a <memcpy>

			buf += sizeof(v);
			len -= sizeof(v);
    4a3c:	3c04      	subs	r4, #4
    4a3e:	e7ef      	b.n	4a20 <bt_rand+0x8>
		} else {
			memcpy(buf, &v, len);
    4a40:	4622      	mov	r2, r4
    4a42:	a901      	add	r1, sp, #4
    4a44:	4628      	mov	r0, r5
    4a46:	f7fb fde8 	bl	61a <memcpy>
			break;
		}
	}

	return 0;
}
    4a4a:	2000      	movs	r0, #0
    4a4c:	b003      	add	sp, #12
    4a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004a50 <_hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int _hci_driver_init(struct device *unused)
{
    4a50:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    4a52:	4802      	ldr	r0, [pc, #8]	; (4a5c <_hci_driver_init+0xc>)
    4a54:	f7fe fdf6 	bl	3644 <bt_hci_driver_register>

	return 0;
}
    4a58:	2000      	movs	r0, #0
    4a5a:	bd08      	pop	{r3, pc}
    4a5c:	0000df8c 	.word	0x0000df8c

00004a60 <recv_thread>:
{
    4a60:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		BT_DBG("blocking");
    4a62:	4d2f      	ldr	r5, [pc, #188]	; (4b20 <recv_thread+0xc0>)
    4a64:	4e2f      	ldr	r6, [pc, #188]	; (4b24 <recv_thread+0xc4>)
    4a66:	f007 fb5f 	bl	c128 <_impl_k_current_get>
    4a6a:	462a      	mov	r2, r5
    4a6c:	4603      	mov	r3, r0
    4a6e:	4631      	mov	r1, r6
    4a70:	2007      	movs	r0, #7
    4a72:	f7fd fbc5 	bl	2200 <bt_log>
		node_rx = k_fifo_get(&recv_fifo, K_FOREVER);
    4a76:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    4a7a:	482b      	ldr	r0, [pc, #172]	; (4b28 <recv_thread+0xc8>)
    4a7c:	f007 f98b 	bl	bd96 <k_queue_get>
    4a80:	4604      	mov	r4, r0
    4a82:	f007 fb51 	bl	c128 <_impl_k_current_get>
		BT_DBG("unblocked");
    4a86:	462a      	mov	r2, r5
    4a88:	4603      	mov	r3, r0
    4a8a:	4928      	ldr	r1, [pc, #160]	; (4b2c <recv_thread+0xcc>)
    4a8c:	2007      	movs	r0, #7
    4a8e:	f7fd fbb7 	bl	2200 <bt_log>
		if (node_rx && !buf) {
    4a92:	2c00      	cmp	r4, #0
    4a94:	d031      	beq.n	4afa <recv_thread+0x9a>
	s8_t class = hci_get_class(node_rx);
    4a96:	4620      	mov	r0, r4
    4a98:	f000 fede 	bl	5858 <hci_get_class>
	switch (class) {
    4a9c:	2802      	cmp	r0, #2
    4a9e:	9403      	str	r4, [sp, #12]
    4aa0:	d82e      	bhi.n	4b00 <recv_thread+0xa0>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    4aa2:	2801      	cmp	r0, #1
			buf = bt_buf_get_rx(BT_BUF_EVT, K_NO_WAIT);
    4aa4:	bf0e      	itee	eq
    4aa6:	2100      	moveq	r1, #0
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    4aa8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    4aac:	2001      	movne	r0, #1
    4aae:	f7fe ff2f 	bl	3910 <bt_buf_get_rx>
    4ab2:	4604      	mov	r4, r0
		if (buf) {
    4ab4:	b118      	cbz	r0, 4abe <recv_thread+0x5e>
			hci_evt_encode(node_rx, buf);
    4ab6:	4601      	mov	r1, r0
    4ab8:	9803      	ldr	r0, [sp, #12]
    4aba:	f000 fe13 	bl	56e4 <hci_evt_encode>
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    4abe:	9b03      	ldr	r3, [sp, #12]
    4ac0:	2100      	movs	r1, #0
    4ac2:	88d8      	ldrh	r0, [r3, #6]
    4ac4:	f005 f994 	bl	9df0 <radio_rx_fc_set>
	node_rx->hdr.onion.next = 0;
    4ac8:	a804      	add	r0, sp, #16
    4aca:	2200      	movs	r2, #0
    4acc:	f850 3d04 	ldr.w	r3, [r0, #-4]!
    4ad0:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    4ad2:	f005 f923 	bl	9d1c <ll_rx_mem_release>
		if (buf) {
    4ad6:	b184      	cbz	r4, 4afa <recv_thread+0x9a>
			if (buf->len) {
    4ad8:	89a3      	ldrh	r3, [r4, #12]
    4ada:	b1e3      	cbz	r3, 4b16 <recv_thread+0xb6>
    4adc:	f007 fb24 	bl	c128 <_impl_k_current_get>
				BT_DBG("Packet in: type:%u len:%u",
    4ae0:	89a3      	ldrh	r3, [r4, #12]
    4ae2:	9301      	str	r3, [sp, #4]
    4ae4:	7d23      	ldrb	r3, [r4, #20]
    4ae6:	9300      	str	r3, [sp, #0]
    4ae8:	462a      	mov	r2, r5
    4aea:	4603      	mov	r3, r0
    4aec:	4910      	ldr	r1, [pc, #64]	; (4b30 <recv_thread+0xd0>)
    4aee:	2007      	movs	r0, #7
    4af0:	f7fd fb86 	bl	2200 <bt_log>
				bt_recv(buf);
    4af4:	4620      	mov	r0, r4
    4af6:	f7fe fb41 	bl	317c <bt_recv>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    4afa:	f007 faf7 	bl	c0ec <_impl_k_yield>
    4afe:	e7b2      	b.n	4a66 <recv_thread+0x6>
		LL_ASSERT(0);
    4b00:	4a0c      	ldr	r2, [pc, #48]	; (4b34 <recv_thread+0xd4>)
    4b02:	490d      	ldr	r1, [pc, #52]	; (4b38 <recv_thread+0xd8>)
    4b04:	2003      	movs	r0, #3
    4b06:	f7fd fb7b 	bl	2200 <bt_log>
    4b0a:	4040      	eors	r0, r0
    4b0c:	f380 8811 	msr	BASEPRI, r0
    4b10:	f04f 0004 	mov.w	r0, #4
    4b14:	df02      	svc	2
				net_buf_unref(buf);
    4b16:	4620      	mov	r0, r4
    4b18:	f006 fee4 	bl	b8e4 <net_buf_unref>
    4b1c:	e7ed      	b.n	4afa <recv_thread+0x9a>
    4b1e:	bf00      	nop
    4b20:	0000df52 	.word	0x0000df52
    4b24:	0000e087 	.word	0x0000e087
    4b28:	20004f58 	.word	0x20004f58
    4b2c:	0000e099 	.word	0x0000e099
    4b30:	0000e0ac 	.word	0x0000e0ac
    4b34:	0000df46 	.word	0x0000df46
    4b38:	0000d86b 	.word	0x0000d86b

00004b3c <hci_driver_send>:
{
    4b3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    4b3e:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    4b40:	f007 faf2 	bl	c128 <_impl_k_current_get>
	BT_DBG("enter");
    4b44:	4a1c      	ldr	r2, [pc, #112]	; (4bb8 <hci_driver_send+0x7c>)
    4b46:	491d      	ldr	r1, [pc, #116]	; (4bbc <hci_driver_send+0x80>)
    4b48:	4603      	mov	r3, r0
    4b4a:	2007      	movs	r0, #7
    4b4c:	f7fd fb58 	bl	2200 <bt_log>
	if (!buf->len) {
    4b50:	89a3      	ldrh	r3, [r4, #12]
    4b52:	b93b      	cbnz	r3, 4b64 <hci_driver_send+0x28>
		BT_ERR("Empty HCI packet");
    4b54:	4a18      	ldr	r2, [pc, #96]	; (4bb8 <hci_driver_send+0x7c>)
    4b56:	491a      	ldr	r1, [pc, #104]	; (4bc0 <hci_driver_send+0x84>)
    4b58:	2003      	movs	r0, #3
    4b5a:	f7fd fb51 	bl	2200 <bt_log>
		return -EINVAL;
    4b5e:	f06f 0015 	mvn.w	r0, #21
    4b62:	e021      	b.n	4ba8 <hci_driver_send+0x6c>
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    4b64:	7d23      	ldrb	r3, [r4, #20]
	switch (type) {
    4b66:	bb0b      	cbnz	r3, 4bac <hci_driver_send+0x70>
	evt = hci_cmd_handle(buf);
    4b68:	4620      	mov	r0, r4
    4b6a:	f000 faad 	bl	50c8 <hci_cmd_handle>
	if (evt) {
    4b6e:	4605      	mov	r5, r0
    4b70:	b160      	cbz	r0, 4b8c <hci_driver_send+0x50>
    4b72:	f007 fad9 	bl	c128 <_impl_k_current_get>
		BT_DBG("Replying with event of %u bytes", evt->len);
    4b76:	89ab      	ldrh	r3, [r5, #12]
    4b78:	9300      	str	r3, [sp, #0]
    4b7a:	4a12      	ldr	r2, [pc, #72]	; (4bc4 <hci_driver_send+0x88>)
    4b7c:	4912      	ldr	r1, [pc, #72]	; (4bc8 <hci_driver_send+0x8c>)
    4b7e:	4603      	mov	r3, r0
    4b80:	2007      	movs	r0, #7
    4b82:	f7fd fb3d 	bl	2200 <bt_log>
		bt_recv_prio(evt);
    4b86:	4628      	mov	r0, r5
    4b88:	f7fe fcd2 	bl	3530 <bt_recv_prio>
		net_buf_unref(buf);
    4b8c:	4620      	mov	r0, r4
    4b8e:	f006 fea9 	bl	b8e4 <net_buf_unref>
    4b92:	f007 fac9 	bl	c128 <_impl_k_current_get>
	BT_DBG("exit: %d", err);
    4b96:	2400      	movs	r4, #0
    4b98:	4603      	mov	r3, r0
    4b9a:	9400      	str	r4, [sp, #0]
    4b9c:	2007      	movs	r0, #7
    4b9e:	4a06      	ldr	r2, [pc, #24]	; (4bb8 <hci_driver_send+0x7c>)
    4ba0:	490a      	ldr	r1, [pc, #40]	; (4bcc <hci_driver_send+0x90>)
    4ba2:	f7fd fb2d 	bl	2200 <bt_log>
	return err;
    4ba6:	4620      	mov	r0, r4
}
    4ba8:	b003      	add	sp, #12
    4baa:	bd30      	pop	{r4, r5, pc}
		BT_ERR("Unknown HCI type %u", type);
    4bac:	4a02      	ldr	r2, [pc, #8]	; (4bb8 <hci_driver_send+0x7c>)
    4bae:	4908      	ldr	r1, [pc, #32]	; (4bd0 <hci_driver_send+0x94>)
    4bb0:	2003      	movs	r0, #3
    4bb2:	f7fd fb25 	bl	2200 <bt_log>
    4bb6:	e7d2      	b.n	4b5e <hci_driver_send+0x22>
    4bb8:	0000df69 	.word	0x0000df69
    4bbc:	0000dfcf 	.word	0x0000dfcf
    4bc0:	0000dfde 	.word	0x0000dfde
    4bc4:	0000df5e 	.word	0x0000df5e
    4bc8:	0000dff3 	.word	0x0000dff3
    4bcc:	0000e01c 	.word	0x0000e01c
    4bd0:	0000e02e 	.word	0x0000e02e

00004bd4 <prio_recv_thread>:
{
    4bd4:	b573      	push	{r0, r1, r4, r5, r6, lr}
		BT_DBG("sem take...");
    4bd6:	4c18      	ldr	r4, [pc, #96]	; (4c38 <prio_recv_thread+0x64>)
    4bd8:	4e18      	ldr	r6, [pc, #96]	; (4c3c <prio_recv_thread+0x68>)
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    4bda:	4d19      	ldr	r5, [pc, #100]	; (4c40 <prio_recv_thread+0x6c>)
		while ((num_cmplt = ll_rx_get(&node_rx, &handle))) {
    4bdc:	f10d 0102 	add.w	r1, sp, #2
    4be0:	a801      	add	r0, sp, #4
    4be2:	f005 f863 	bl	9cac <ll_rx_get>
    4be6:	2800      	cmp	r0, #0
    4be8:	d1f8      	bne.n	4bdc <prio_recv_thread+0x8>
		if (node_rx) {
    4bea:	9b01      	ldr	r3, [sp, #4]
    4bec:	b173      	cbz	r3, 4c0c <prio_recv_thread+0x38>
			ll_rx_dequeue();
    4bee:	f005 fb6b 	bl	a2c8 <ll_rx_dequeue>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    4bf2:	f007 fa99 	bl	c128 <_impl_k_current_get>
			BT_DBG("RX node enqueue");
    4bf6:	4622      	mov	r2, r4
    4bf8:	4603      	mov	r3, r0
    4bfa:	4912      	ldr	r1, [pc, #72]	; (4c44 <prio_recv_thread+0x70>)
    4bfc:	2007      	movs	r0, #7
    4bfe:	f7fd faff 	bl	2200 <bt_log>
			k_fifo_put(&recv_fifo, node_rx);
    4c02:	9901      	ldr	r1, [sp, #4]
    4c04:	4810      	ldr	r0, [pc, #64]	; (4c48 <prio_recv_thread+0x74>)
    4c06:	f007 f8a2 	bl	bd4e <k_queue_append>
    4c0a:	e7e7      	b.n	4bdc <prio_recv_thread+0x8>
    4c0c:	f007 fa8c 	bl	c128 <_impl_k_current_get>
		BT_DBG("sem take...");
    4c10:	4622      	mov	r2, r4
    4c12:	4603      	mov	r3, r0
    4c14:	4631      	mov	r1, r6
    4c16:	2007      	movs	r0, #7
    4c18:	f7fd faf2 	bl	2200 <bt_log>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    4c1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    4c20:	4628      	mov	r0, r5
    4c22:	f007 fb3f 	bl	c2a4 <_impl_k_sem_take>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    4c26:	f007 fa7f 	bl	c128 <_impl_k_current_get>
		BT_DBG("sem taken");
    4c2a:	4622      	mov	r2, r4
    4c2c:	4603      	mov	r3, r0
    4c2e:	4907      	ldr	r1, [pc, #28]	; (4c4c <prio_recv_thread+0x78>)
    4c30:	2007      	movs	r0, #7
    4c32:	f7fd fae5 	bl	2200 <bt_log>
    4c36:	e7d1      	b.n	4bdc <prio_recv_thread+0x8>
    4c38:	0000df35 	.word	0x0000df35
    4c3c:	0000e05f 	.word	0x0000e05f
    4c40:	20004f40 	.word	0x20004f40
    4c44:	0000e046 	.word	0x0000e046
    4c48:	20004f58 	.word	0x20004f58
    4c4c:	0000e074 	.word	0x0000e074

00004c50 <hci_driver_open>:
{
    4c50:	b510      	push	{r4, lr}
	err = ll_init(&sem_prio_recv);
    4c52:	481b      	ldr	r0, [pc, #108]	; (4cc0 <hci_driver_open+0x70>)
{
    4c54:	b086      	sub	sp, #24
	err = ll_init(&sem_prio_recv);
    4c56:	f005 fbf7 	bl	a448 <ll_init>
	if (err) {
    4c5a:	4604      	mov	r4, r0
    4c5c:	b140      	cbz	r0, 4c70 <hci_driver_open+0x20>
		BT_ERR("LL initialization failed: %u", err);
    4c5e:	4a19      	ldr	r2, [pc, #100]	; (4cc4 <hci_driver_open+0x74>)
    4c60:	4919      	ldr	r1, [pc, #100]	; (4cc8 <hci_driver_open+0x78>)
    4c62:	4603      	mov	r3, r0
    4c64:	2003      	movs	r0, #3
	BT_DBG("Success.");
    4c66:	f7fd facb 	bl	2200 <bt_log>
}
    4c6a:	4620      	mov	r0, r4
    4c6c:	b006      	add	sp, #24
    4c6e:	bd10      	pop	{r4, pc}
	hci_init(NULL);
    4c70:	f000 fe12 	bl	5898 <hci_init>

    4c74:	f06f 0309 	mvn.w	r3, #9
    4c78:	9303      	str	r3, [sp, #12]
    4c7a:	f44f 723b 	mov.w	r2, #748	; 0x2ec
    4c7e:	4b13      	ldr	r3, [pc, #76]	; (4ccc <hci_driver_open+0x7c>)
    4c80:	4913      	ldr	r1, [pc, #76]	; (4cd0 <hci_driver_open+0x80>)
    4c82:	9405      	str	r4, [sp, #20]
    4c84:	9404      	str	r4, [sp, #16]
    4c86:	9402      	str	r4, [sp, #8]
    4c88:	9401      	str	r4, [sp, #4]
    4c8a:	9400      	str	r4, [sp, #0]
    4c8c:	4811      	ldr	r0, [pc, #68]	; (4cd4 <hci_driver_open+0x84>)
    4c8e:	f007 fce5 	bl	c65c <_impl_k_thread_create>
    4c92:	f06f 0307 	mvn.w	r3, #7
    4c96:	f240 522c 	movw	r2, #1324	; 0x52c
    4c9a:	490f      	ldr	r1, [pc, #60]	; (4cd8 <hci_driver_open+0x88>)
    4c9c:	9303      	str	r3, [sp, #12]
    4c9e:	9405      	str	r4, [sp, #20]
    4ca0:	4b0e      	ldr	r3, [pc, #56]	; (4cdc <hci_driver_open+0x8c>)
    4ca2:	9404      	str	r4, [sp, #16]
    4ca4:	9402      	str	r4, [sp, #8]
    4ca6:	9401      	str	r4, [sp, #4]
    4ca8:	9400      	str	r4, [sp, #0]
    4caa:	480d      	ldr	r0, [pc, #52]	; (4ce0 <hci_driver_open+0x90>)
    4cac:	f007 fcd6 	bl	c65c <_impl_k_thread_create>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    4cb0:	f007 fa3a 	bl	c128 <_impl_k_current_get>
	BT_DBG("Success.");
    4cb4:	4a03      	ldr	r2, [pc, #12]	; (4cc4 <hci_driver_open+0x74>)
    4cb6:	490b      	ldr	r1, [pc, #44]	; (4ce4 <hci_driver_open+0x94>)
    4cb8:	4603      	mov	r3, r0
    4cba:	2007      	movs	r0, #7
    4cbc:	e7d3      	b.n	4c66 <hci_driver_open+0x16>
    4cbe:	bf00      	nop
    4cc0:	20004f40 	.word	0x20004f40
    4cc4:	0000df79 	.word	0x0000df79
    4cc8:	0000df9c 	.word	0x0000df9c
    4ccc:	00004bd5 	.word	0x00004bd5
    4cd0:	20003258 	.word	0x20003258
    4cd4:	20002b80 	.word	0x20002b80
    4cd8:	20003548 	.word	0x20003548
    4cdc:	00004a61 	.word	0x00004a61
    4ce0:	20002b18 	.word	0x20002b18
    4ce4:	0000dfbd 	.word	0x0000dfbd

00004ce8 <sys_put_le32>:
	dst[1] = val >> 8;
    4ce8:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
    4cec:	7008      	strb	r0, [r1, #0]
	sys_put_le16(val >> 16, &dst[2]);
    4cee:	0c00      	lsrs	r0, r0, #16
	dst[0] = val;
    4cf0:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
    4cf2:	0a00      	lsrs	r0, r0, #8
    4cf4:	704b      	strb	r3, [r1, #1]
    4cf6:	70c8      	strb	r0, [r1, #3]
    4cf8:	4770      	bx	lr

00004cfa <evt_create>:
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
			     u16_t handle, struct net_buf *buf);
#endif /* CONFIG_BT_CONN */

static void evt_create(struct net_buf *buf, u8_t evt, u8_t len)
{
    4cfa:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_hdr *hdr;

	hdr = net_buf_add(buf, sizeof(*hdr));
    4cfc:	3008      	adds	r0, #8
{
    4cfe:	460d      	mov	r5, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
    4d00:	2102      	movs	r1, #2
{
    4d02:	4614      	mov	r4, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
    4d04:	f006 fe20 	bl	b948 <net_buf_simple_add>
	hdr->evt = evt;
    4d08:	7005      	strb	r5, [r0, #0]
	hdr->len = len;
    4d0a:	7044      	strb	r4, [r0, #1]
    4d0c:	bd38      	pop	{r3, r4, r5, pc}
	...

00004d10 <cmd_complete>:
}

static void *cmd_complete(struct net_buf **buf, u8_t plen)
{
    4d10:	b538      	push	{r3, r4, r5, lr}
    4d12:	4604      	mov	r4, r0
	struct bt_hci_evt_cmd_complete *cc;

	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    4d14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
{
    4d18:	460d      	mov	r5, r1
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    4d1a:	f7fe fe09 	bl	3930 <bt_buf_get_cmd_complete>

	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    4d1e:	1cea      	adds	r2, r5, #3
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    4d20:	6020      	str	r0, [r4, #0]
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    4d22:	b2d2      	uxtb	r2, r2
    4d24:	210e      	movs	r1, #14
    4d26:	f7ff ffe8 	bl	4cfa <evt_create>

	cc = net_buf_add(*buf, sizeof(*cc));
    4d2a:	6820      	ldr	r0, [r4, #0]
    4d2c:	2103      	movs	r1, #3
    4d2e:	3008      	adds	r0, #8
    4d30:	f006 fe0a 	bl	b948 <net_buf_simple_add>
	cc->ncmd = 1;
    4d34:	2301      	movs	r3, #1
    4d36:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(_opcode);
    4d38:	4b05      	ldr	r3, [pc, #20]	; (4d50 <cmd_complete+0x40>)
    4d3a:	881b      	ldrh	r3, [r3, #0]
    4d3c:	f8a0 3001 	strh.w	r3, [r0, #1]

	return net_buf_add(*buf, plen);
    4d40:	6820      	ldr	r0, [r4, #0]
    4d42:	4629      	mov	r1, r5
    4d44:	3008      	adds	r0, #8
}
    4d46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_buf_add(*buf, plen);
    4d4a:	f006 bdfd 	b.w	b948 <net_buf_simple_add>
    4d4e:	bf00      	nop
    4d50:	200009f4 	.word	0x200009f4

00004d54 <meta_evt>:
	return buf;
}
#endif

static void *meta_evt(struct net_buf *buf, u8_t subevt, u8_t melen)
{
    4d54:	b570      	push	{r4, r5, r6, lr}
    4d56:	4604      	mov	r4, r0
    4d58:	4615      	mov	r5, r2
	struct bt_hci_evt_le_meta_event *me;

	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    4d5a:	3201      	adds	r2, #1
{
    4d5c:	460e      	mov	r6, r1
	me = net_buf_add(buf, sizeof(*me));
    4d5e:	3408      	adds	r4, #8
	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    4d60:	b2d2      	uxtb	r2, r2
    4d62:	213e      	movs	r1, #62	; 0x3e
    4d64:	f7ff ffc9 	bl	4cfa <evt_create>
	me = net_buf_add(buf, sizeof(*me));
    4d68:	2101      	movs	r1, #1
    4d6a:	4620      	mov	r0, r4
    4d6c:	f006 fdec 	bl	b948 <net_buf_simple_add>
	me->subevent = subevt;
    4d70:	7006      	strb	r6, [r0, #0]

	return net_buf_add(buf, melen);
    4d72:	4629      	mov	r1, r5
    4d74:	4620      	mov	r0, r4
}
    4d76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return net_buf_add(buf, melen);
    4d7a:	f006 bde5 	b.w	b948 <net_buf_simple_add>
	...

00004d80 <le_advertising_report>:
}
#endif /* CONFIG_BT_CTLR_DUP_FILTER_LEN > 0 */

static void le_advertising_report(struct pdu_data *pdu_data, u8_t *b,
				  struct net_buf *buf)
{
    4d80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    4d82:	2301      	movs	r3, #1
    4d84:	f88d 3001 	strb.w	r3, [sp, #1]
    4d88:	2303      	movs	r3, #3
    4d8a:	f88d 3002 	strb.w	r3, [sp, #2]
    4d8e:	23ff      	movs	r3, #255	; 0xff
    4d90:	f88d 3003 	strb.w	r3, [sp, #3]
    4d94:	f88d 3005 	strb.w	r3, [sp, #5]
    4d98:	2302      	movs	r3, #2
    4d9a:	f88d 3006 	strb.w	r3, [sp, #6]
	if (adv->tx_addr) {
		ll_rl_crpa_set(0x00, NULL, rl_idx, &adv->adv_ind.addr[0]);
	}
#endif

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    4d9e:	4b25      	ldr	r3, [pc, #148]	; (4e34 <le_advertising_report+0xb4>)
{
    4da0:	4607      	mov	r7, r0
    4da2:	4610      	mov	r0, r2
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    4da4:	2204      	movs	r2, #4
    4da6:	f88d 2004 	strb.w	r2, [sp, #4]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    4daa:	e9d3 2300 	ldrd	r2, r3, [r3]
    4dae:	2200      	movs	r2, #0
    4db0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    4db4:	2400      	movs	r4, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    4db6:	4313      	orrs	r3, r2
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    4db8:	f88d 4000 	strb.w	r4, [sp]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    4dbc:	d038      	beq.n	4e30 <le_advertising_report+0xb0>
	if ((!direct && !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) ||
	    (direct && !(le_event_mask & BT_HCI_EVT_LE_DIRECT_ADV_REPORT))) {
		return;
	}
#else
	if (!(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) {
    4dbe:	4b1e      	ldr	r3, [pc, #120]	; (4e38 <le_advertising_report+0xb8>)
    4dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
    4dc4:	2300      	movs	r3, #0
    4dc6:	f002 0202 	and.w	r2, r2, #2
    4dca:	4313      	orrs	r3, r2
    4dcc:	d030      	beq.n	4e30 <le_advertising_report+0xb0>
	if (dup_found(adv)) {
		return;
	}
#endif /* CONFIG_BT_CTLR_DUP_FILTER_LEN > 0 */

	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    4dce:	783b      	ldrb	r3, [r7, #0]
    4dd0:	f003 030f 	and.w	r3, r3, #15
    4dd4:	2b01      	cmp	r3, #1
    4dd6:	787b      	ldrb	r3, [r7, #1]
		data_len = (adv->len - BDADDR_SIZE);
    4dd8:	bf1c      	itt	ne
    4dda:	1f9c      	subne	r4, r3, #6
    4ddc:	b2e4      	uxtbne	r4, r4
	} else {
		data_len = 0;
	}

	/* The Link Layer currently returns RSSI as an absolute value */
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    4dde:	4419      	add	r1, r3
	}
#endif /* CONFIG_BT_CTLR_EXT_SCAN_FP */

	info_len = sizeof(struct bt_hci_evt_le_advertising_info) + data_len +
		   sizeof(*prssi);
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    4de0:	f104 020b 	add.w	r2, r4, #11
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    4de4:	7a8e      	ldrb	r6, [r1, #10]
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    4de6:	b2d2      	uxtb	r2, r2
    4de8:	2102      	movs	r1, #2
    4dea:	f7ff ffb3 	bl	4d54 <meta_evt>
		       sizeof(*sep) + info_len);

	sep->num_reports = 1;
    4dee:	2301      	movs	r3, #1
    4df0:	7003      	strb	r3, [r0, #0]
	adv_info = (void *)(((u8_t *)sep) + sizeof(*sep));

	adv_info->evt_type = c_adv_type[adv->type];
    4df2:	783b      	ldrb	r3, [r7, #0]
    4df4:	aa02      	add	r2, sp, #8
    4df6:	f003 030f 	and.w	r3, r3, #15
    4dfa:	4413      	add	r3, r2
	} else {
#else
	if (1) {
#endif /* CONFIG_BT_CTLR_PRIVACY */

		adv_info->addr.type = adv->tx_addr;
    4dfc:	4639      	mov	r1, r7
	adv_info->evt_type = c_adv_type[adv->type];
    4dfe:	f813 3c08 	ldrb.w	r3, [r3, #-8]
    4e02:	7043      	strb	r3, [r0, #1]
		adv_info->addr.type = adv->tx_addr;
    4e04:	f811 3b02 	ldrb.w	r3, [r1], #2
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    4e08:	4605      	mov	r5, r0
		adv_info->addr.type = adv->tx_addr;
    4e0a:	f3c3 1380 	ubfx	r3, r3, #6, #1
    4e0e:	7083      	strb	r3, [r0, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
    4e10:	2206      	movs	r2, #6
    4e12:	3003      	adds	r0, #3
    4e14:	f7fb fc01 	bl	61a <memcpy>
		       sizeof(bt_addr_t));
	}

	adv_info->length = data_len;
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    4e18:	350a      	adds	r5, #10
	adv_info->length = data_len;
    4e1a:	f805 4c01 	strb.w	r4, [r5, #-1]
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    4e1e:	4276      	negs	r6, r6
    4e20:	b276      	sxtb	r6, r6
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    4e22:	4622      	mov	r2, r4
    4e24:	f107 0108 	add.w	r1, r7, #8
    4e28:	4628      	mov	r0, r5
    4e2a:	f7fb fbf6 	bl	61a <memcpy>
	/* RSSI */
	prssi = &adv_info->data[0] + data_len;
	*prssi = rssi;
    4e2e:	552e      	strb	r6, [r5, r4]
}
    4e30:	b003      	add	sp, #12
    4e32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4e34:	20004d00 	.word	0x20004d00
    4e38:	20004d08 	.word	0x20004d08

00004e3c <le_set_adv_param.isra.21>:
static void le_set_adv_param(struct net_buf *buf, struct net_buf **evt)
    4e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e3e:	b08b      	sub	sp, #44	; 0x2c
	status = ll_adv_params_set(cmd->handle, cmd->props, min_interval,
    4e40:	2400      	movs	r4, #0
    4e42:	7a03      	ldrb	r3, [r0, #8]
    4e44:	f8b0 2003 	ldrh.w	r2, [r0, #3]
    4e48:	7806      	ldrb	r6, [r0, #0]
static void le_set_adv_param(struct net_buf *buf, struct net_buf **evt)
    4e4a:	460d      	mov	r5, r1
	status = ll_adv_params_set(cmd->handle, cmd->props, min_interval,
    4e4c:	f8b0 1001 	ldrh.w	r1, [r0, #1]
    4e50:	9409      	str	r4, [sp, #36]	; 0x24
    4e52:	7d47      	ldrb	r7, [r0, #21]
    4e54:	9708      	str	r7, [sp, #32]
    4e56:	7d07      	ldrb	r7, [r0, #20]
    4e58:	9707      	str	r7, [sp, #28]
    4e5a:	7cc7      	ldrb	r7, [r0, #19]
    4e5c:	9706      	str	r7, [sp, #24]
    4e5e:	7c87      	ldrb	r7, [r0, #18]
    4e60:	9705      	str	r7, [sp, #20]
    4e62:	9404      	str	r4, [sp, #16]
    4e64:	7c04      	ldrb	r4, [r0, #16]
    4e66:	9403      	str	r4, [sp, #12]
    4e68:	79c4      	ldrb	r4, [r0, #7]
    4e6a:	9402      	str	r4, [sp, #8]
				   &cmd->direct_addr.a.val[0], cmd->prim_channel_map,
    4e6c:	f100 040a 	add.w	r4, r0, #10
	status = ll_adv_params_set(cmd->handle, cmd->props, min_interval,
    4e70:	9401      	str	r4, [sp, #4]
    4e72:	7a40      	ldrb	r0, [r0, #9]
    4e74:	9000      	str	r0, [sp, #0]
    4e76:	4630      	mov	r0, r6
    4e78:	f005 fb84 	bl	a584 <ll_adv_params_set>
	ccst = cmd_complete(evt, sizeof(*ccst));
    4e7c:	2102      	movs	r1, #2
	status = ll_adv_params_set(cmd->handle, cmd->props, min_interval,
    4e7e:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    4e80:	4628      	mov	r0, r5
    4e82:	f7ff ff45 	bl	4d10 <cmd_complete>
	status = ll_adv_params_set(cmd->handle, cmd->props, min_interval,
    4e86:	7004      	strb	r4, [r0, #0]
}
    4e88:	b00b      	add	sp, #44	; 0x2c
    4e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004e8c <le_set_adv_enable.isra.25>:
static void le_set_adv_enable(struct net_buf *buf, struct net_buf **evt)
    4e8c:	b538      	push	{r3, r4, r5, lr}
	status = ll_adv_enable(cmd->enable);
    4e8e:	7800      	ldrb	r0, [r0, #0]
static void le_set_adv_enable(struct net_buf *buf, struct net_buf **evt)
    4e90:	460d      	mov	r5, r1
	status = ll_adv_enable(cmd->enable);
    4e92:	f005 fde7 	bl	aa64 <ll_adv_enable>
	ccst = cmd_complete(evt, sizeof(*ccst));
    4e96:	2101      	movs	r1, #1
	status = ll_adv_enable(cmd->enable);
    4e98:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    4e9a:	4628      	mov	r0, r5
    4e9c:	f7ff ff38 	bl	4d10 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    4ea0:	2c00      	cmp	r4, #0
    4ea2:	bf0c      	ite	eq
    4ea4:	2300      	moveq	r3, #0
    4ea6:	230c      	movne	r3, #12
    4ea8:	7003      	strb	r3, [r0, #0]
    4eaa:	bd38      	pop	{r3, r4, r5, pc}

00004eac <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
    4eac:	b570      	push	{r4, r5, r6, lr}
    4eae:	4604      	mov	r4, r0
    4eb0:	4618      	mov	r0, r3
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    4eb2:	4b13      	ldr	r3, [pc, #76]	; (4f00 <le_remote_feat_complete+0x54>)
{
    4eb4:	4616      	mov	r6, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    4eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
    4eba:	2200      	movs	r2, #0
    4ebc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    4ec0:	4313      	orrs	r3, r2
{
    4ec2:	460d      	mov	r5, r1
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    4ec4:	d01b      	beq.n	4efe <le_remote_feat_complete+0x52>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    4ec6:	4b0f      	ldr	r3, [pc, #60]	; (4f04 <le_remote_feat_complete+0x58>)
    4ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
    4ecc:	2300      	movs	r3, #0
    4ece:	f002 0208 	and.w	r2, r2, #8
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    4ed2:	4313      	orrs	r3, r2
    4ed4:	d013      	beq.n	4efe <le_remote_feat_complete+0x52>
		return;
	}

	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
    4ed6:	220b      	movs	r2, #11
    4ed8:	2104      	movs	r1, #4
    4eda:	f7ff ff3b 	bl	4d54 <meta_evt>

	sep->status = status;
	sep->handle = sys_cpu_to_le16(handle);
	if (!status) {
		memcpy(&sep->features[0],
    4ede:	2208      	movs	r2, #8
	sep->status = status;
    4ee0:	7004      	strb	r4, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    4ee2:	f8a0 6001 	strh.w	r6, [r0, #1]
    4ee6:	3003      	adds	r0, #3
	if (!status) {
    4ee8:	b924      	cbnz	r4, 4ef4 <le_remote_feat_complete+0x48>
		memcpy(&sep->features[0],
    4eea:	1d29      	adds	r1, r5, #4
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
    4eec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(&sep->features[0],
    4ef0:	f7fb bb93 	b.w	61a <memcpy>
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    4ef4:	2100      	movs	r1, #0
}
    4ef6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    4efa:	f7fb bbba 	b.w	672 <memset>
    4efe:	bd70      	pop	{r4, r5, r6, pc}
    4f00:	20004d00 	.word	0x20004d00
    4f04:	20004d08 	.word	0x20004d08

00004f08 <bt_addr_le_to_str.constprop.37>:
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    4f08:	b570      	push	{r4, r5, r6, lr}
	switch (addr->type) {
    4f0a:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    4f0c:	b08a      	sub	sp, #40	; 0x28
    4f0e:	4604      	mov	r4, r0
    4f10:	460e      	mov	r6, r1
    4f12:	ad07      	add	r5, sp, #28
	switch (addr->type) {
    4f14:	2b03      	cmp	r3, #3
    4f16:	d820      	bhi.n	4f5a <bt_addr_le_to_str.constprop.37+0x52>
    4f18:	e8df f003 	tbb	[pc, r3]
    4f1c:	1d1b1902 	.word	0x1d1b1902
		strcpy(type, "public");
    4f20:	4911      	ldr	r1, [pc, #68]	; (4f68 <bt_addr_le_to_str.constprop.37+0x60>)
		strcpy(type, "random");
    4f22:	4628      	mov	r0, r5
    4f24:	f7fb fb3c 	bl	5a0 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    4f28:	7862      	ldrb	r2, [r4, #1]
    4f2a:	9204      	str	r2, [sp, #16]
    4f2c:	78a2      	ldrb	r2, [r4, #2]
    4f2e:	9203      	str	r2, [sp, #12]
    4f30:	78e2      	ldrb	r2, [r4, #3]
    4f32:	9202      	str	r2, [sp, #8]
    4f34:	7922      	ldrb	r2, [r4, #4]
    4f36:	9201      	str	r2, [sp, #4]
    4f38:	7962      	ldrb	r2, [r4, #5]
    4f3a:	9200      	str	r2, [sp, #0]
    4f3c:	79a3      	ldrb	r3, [r4, #6]
    4f3e:	9505      	str	r5, [sp, #20]
    4f40:	4a0a      	ldr	r2, [pc, #40]	; (4f6c <bt_addr_le_to_str.constprop.37+0x64>)
    4f42:	211b      	movs	r1, #27
    4f44:	4630      	mov	r0, r6
    4f46:	f7fc f9f3 	bl	1330 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    4f4a:	b00a      	add	sp, #40	; 0x28
    4f4c:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    4f4e:	4908      	ldr	r1, [pc, #32]	; (4f70 <bt_addr_le_to_str.constprop.37+0x68>)
    4f50:	e7e7      	b.n	4f22 <bt_addr_le_to_str.constprop.37+0x1a>
		strcpy(type, "public id");
    4f52:	4908      	ldr	r1, [pc, #32]	; (4f74 <bt_addr_le_to_str.constprop.37+0x6c>)
    4f54:	e7e5      	b.n	4f22 <bt_addr_le_to_str.constprop.37+0x1a>
		strcpy(type, "random id");
    4f56:	4908      	ldr	r1, [pc, #32]	; (4f78 <bt_addr_le_to_str.constprop.37+0x70>)
    4f58:	e7e3      	b.n	4f22 <bt_addr_le_to_str.constprop.37+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    4f5a:	4a08      	ldr	r2, [pc, #32]	; (4f7c <bt_addr_le_to_str.constprop.37+0x74>)
    4f5c:	210a      	movs	r1, #10
    4f5e:	4628      	mov	r0, r5
    4f60:	f7fc f9e6 	bl	1330 <snprintk>
    4f64:	e7e0      	b.n	4f28 <bt_addr_le_to_str.constprop.37+0x20>
    4f66:	bf00      	nop
    4f68:	0000d2de 	.word	0x0000d2de
    4f6c:	0000d300 	.word	0x0000d300
    4f70:	0000d2e5 	.word	0x0000d2e5
    4f74:	0000d2ec 	.word	0x0000d2ec
    4f78:	0000d2f6 	.word	0x0000d2f6
    4f7c:	0000e227 	.word	0x0000e227

00004f80 <le_adv_ext_report>:
{
    4f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4f84:	460d      	mov	r5, r1
		  offsetof(struct pdu_adv, payload) + adv->len];
    4f86:	7841      	ldrb	r1, [r0, #1]
{
    4f88:	4616      	mov	r6, r2
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    4f8a:	186a      	adds	r2, r5, r1
{
    4f8c:	b090      	sub	sp, #64	; 0x40
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    4f8e:	7a97      	ldrb	r7, [r2, #10]
    4f90:	427f      	negs	r7, r7
    4f92:	b27f      	sxtb	r7, r7
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    4f94:	9704      	str	r7, [sp, #16]
    4f96:	7802      	ldrb	r2, [r0, #0]
    4f98:	9101      	str	r1, [sp, #4]
{
    4f9a:	4604      	mov	r4, r0
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    4f9c:	09d0      	lsrs	r0, r2, #7
    4f9e:	9003      	str	r0, [sp, #12]
    4fa0:	f3c2 1080 	ubfx	r0, r2, #6, #1
    4fa4:	f002 020f 	and.w	r2, r2, #15
    4fa8:	9002      	str	r0, [sp, #8]
    4faa:	9200      	str	r2, [sp, #0]
    4fac:	493f      	ldr	r1, [pc, #252]	; (50ac <le_adv_ext_report+0x12c>)
    4fae:	4a40      	ldr	r2, [pc, #256]	; (50b0 <le_adv_ext_report+0x130>)
    4fb0:	2004      	movs	r0, #4
    4fb2:	f7fd f925 	bl	2200 <bt_log>
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    4fb6:	7823      	ldrb	r3, [r4, #0]
    4fb8:	f003 030f 	and.w	r3, r3, #15
    4fbc:	2b07      	cmp	r3, #7
    4fbe:	d16e      	bne.n	509e <le_adv_ext_report+0x11e>
    4fc0:	7863      	ldrb	r3, [r4, #1]
    4fc2:	2b00      	cmp	r3, #0
    4fc4:	d06b      	beq.n	509e <le_adv_ext_report+0x11e>
		BT_WARN("Ext. adv mode= 0x%x, hdr len= %u", p->adv_mode,
    4fc6:	78a3      	ldrb	r3, [r4, #2]
    4fc8:	493a      	ldr	r1, [pc, #232]	; (50b4 <le_adv_ext_report+0x134>)
    4fca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    4fce:	9200      	str	r2, [sp, #0]
    4fd0:	099b      	lsrs	r3, r3, #6
    4fd2:	2004      	movs	r0, #4
    4fd4:	4a36      	ldr	r2, [pc, #216]	; (50b0 <le_adv_ext_report+0x130>)
    4fd6:	f7fd f913 	bl	2200 <bt_log>
		if (!p->ext_hdr_len) {
    4fda:	78a3      	ldrb	r3, [r4, #2]
    4fdc:	0698      	lsls	r0, r3, #26
    4fde:	d05b      	beq.n	5098 <le_adv_ext_report+0x118>
		if (h->adv_addr) {
    4fe0:	78e3      	ldrb	r3, [r4, #3]
    4fe2:	07d9      	lsls	r1, r3, #31
		ptr = (u8_t *)h + sizeof(*h);
    4fe4:	f104 0504 	add.w	r5, r4, #4
		if (h->adv_addr) {
    4fe8:	d518      	bpl.n	501c <le_adv_ext_report+0x9c>
			addr.type = adv->tx_addr;
    4fea:	7823      	ldrb	r3, [r4, #0]
    4fec:	f10d 0840 	add.w	r8, sp, #64	; 0x40
    4ff0:	f3c3 1380 	ubfx	r3, r3, #6, #1
    4ff4:	f808 3d24 	strb.w	r3, [r8, #-36]!
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    4ff8:	2206      	movs	r2, #6
    4ffa:	4629      	mov	r1, r5
    4ffc:	f10d 001d 	add.w	r0, sp, #29
    5000:	f7fb fb0b 	bl	61a <memcpy>
			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    5004:	a909      	add	r1, sp, #36	; 0x24
    5006:	4640      	mov	r0, r8
    5008:	f7ff ff7e 	bl	4f08 <bt_addr_le_to_str.constprop.37>
			BT_WARN("AdvA: %s", addr_str);
    500c:	ab09      	add	r3, sp, #36	; 0x24
    500e:	4a28      	ldr	r2, [pc, #160]	; (50b0 <le_adv_ext_report+0x130>)
    5010:	4929      	ldr	r1, [pc, #164]	; (50b8 <le_adv_ext_report+0x138>)
    5012:	2004      	movs	r0, #4
			ptr += BDADDR_SIZE;
    5014:	f104 050a 	add.w	r5, r4, #10
			BT_WARN("AdvA: %s", addr_str);
    5018:	f7fd f8f2 	bl	2200 <bt_log>
		if(h->tgt_addr){
    501c:	78e3      	ldrb	r3, [r4, #3]
    501e:	079a      	lsls	r2, r3, #30
			ptr += BDADDR_SIZE;
    5020:	bf48      	it	mi
    5022:	3506      	addmi	r5, #6
		if(h->adi){
    5024:	0718      	lsls	r0, r3, #28
			ptr += sizeof(*adi_ptr);
    5026:	bf48      	it	mi
    5028:	3502      	addmi	r5, #2
		if(h->aux_ptr){
    502a:	06d9      	lsls	r1, r3, #27
			ptr += sizeof(*ap);
    502c:	bf48      	it	mi
    502e:	3503      	addmi	r5, #3
		if (h->tx_pwr) {
    5030:	065a      	lsls	r2, r3, #25
    5032:	d506      	bpl.n	5042 <le_adv_ext_report+0xc2>
			BT_WARN("Tx pwr= %d dB", tx_pwr);
    5034:	f915 3b01 	ldrsb.w	r3, [r5], #1
    5038:	4a1d      	ldr	r2, [pc, #116]	; (50b0 <le_adv_ext_report+0x130>)
    503a:	4920      	ldr	r1, [pc, #128]	; (50bc <le_adv_ext_report+0x13c>)
    503c:	2004      	movs	r0, #4
    503e:	f7fd f8df 	bl	2200 <bt_log>
		data_len = adv->len -(p->ext_hdr_len + offsetof(struct pdu_adv_com_ext_adv,
    5042:	78a2      	ldrb	r2, [r4, #2]
    5044:	f3c2 0305 	ubfx	r3, r2, #0, #6
    5048:	7862      	ldrb	r2, [r4, #1]
    504a:	1ad2      	subs	r2, r2, r3
    504c:	b2d2      	uxtb	r2, r2
    504e:	f102 38ff 	add.w	r8, r2, #4294967295	; 0xffffffff
		sep = meta_evt(buf, BT_HCI_EVT_LE_EXT_ADVERTISING_REPORT,
    5052:	3218      	adds	r2, #24
    5054:	4630      	mov	r0, r6
    5056:	b2d2      	uxtb	r2, r2
    5058:	210d      	movs	r1, #13
    505a:	f7ff fe7b 	bl	4d54 <meta_evt>
		sep->num_reports = 1;
    505e:	2301      	movs	r3, #1
    5060:	7003      	strb	r3, [r0, #0]
		if(h->adv_addr){
    5062:	78e3      	ldrb	r3, [r4, #3]
    5064:	07db      	lsls	r3, r3, #31
		data_len = adv->len -(p->ext_hdr_len + offsetof(struct pdu_adv_com_ext_adv,
    5066:	fa5f f888 	uxtb.w	r8, r8
		sep = meta_evt(buf, BT_HCI_EVT_LE_EXT_ADVERTISING_REPORT,
    506a:	4606      	mov	r6, r0
		if(h->adv_addr){
    506c:	d508      	bpl.n	5080 <le_adv_ext_report+0x100>
			adv_info->addr.type = addr.type;
    506e:	f89d 301c 	ldrb.w	r3, [sp, #28]
    5072:	7083      	strb	r3, [r0, #2]
			memcpy(&adv_info->addr.a.val[0], &addr.a.val[0],
    5074:	2206      	movs	r2, #6
    5076:	f10d 011d 	add.w	r1, sp, #29
    507a:	3003      	adds	r0, #3
    507c:	f7fb facd 	bl	61a <memcpy>
		adv_info->evt_type = 0x07;
    5080:	2307      	movs	r3, #7
    5082:	7073      	strb	r3, [r6, #1]
		adv_info->length = data_len;
    5084:	f886 8017 	strb.w	r8, [r6, #23]
		memcpy(&adv_info->data[0], ptr, data_len);
    5088:	3618      	adds	r6, #24
    508a:	4642      	mov	r2, r8
    508c:	4629      	mov	r1, r5
    508e:	4630      	mov	r0, r6
    5090:	f7fb fac3 	bl	61a <memcpy>
		*prssi = rssi;
    5094:	f806 7008 	strb.w	r7, [r6, r8]
}
    5098:	b010      	add	sp, #64	; 0x40
    509a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		le_advertising_report(pdu_data, b, buf);
    509e:	4632      	mov	r2, r6
    50a0:	4629      	mov	r1, r5
    50a2:	4620      	mov	r0, r4
    50a4:	f7ff fe6c 	bl	4d80 <le_advertising_report>
	return;
    50a8:	e7f6      	b.n	5098 <le_adv_ext_report+0x118>
    50aa:	bf00      	nop
    50ac:	0000e22e 	.word	0x0000e22e
    50b0:	0000e0fd 	.word	0x0000e0fd
    50b4:	0000e26f 	.word	0x0000e26f
    50b8:	0000e294 	.word	0x0000e294
    50bc:	0000e2a1 	.word	0x0000e2a1

000050c0 <sys_get_le64>:
{
    50c0:	4603      	mov	r3, r0
}
    50c2:	6800      	ldr	r0, [r0, #0]
    50c4:	6859      	ldr	r1, [r3, #4]
    50c6:	4770      	bx	lr

000050c8 <hci_cmd_handle>:
{
    50c8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
    50ca:	8981      	ldrh	r1, [r0, #12]
{
    50cc:	b08f      	sub	sp, #60	; 0x3c
	struct net_buf *evt = NULL;
    50ce:	2500      	movs	r5, #0
	if (cmd->len < sizeof(*chdr)) {
    50d0:	2902      	cmp	r1, #2
{
    50d2:	4604      	mov	r4, r0
	struct net_buf *evt = NULL;
    50d4:	9503      	str	r5, [sp, #12]
	if (cmd->len < sizeof(*chdr)) {
    50d6:	d807      	bhi.n	50e8 <hci_cmd_handle+0x20>
		BT_ERR("No HCI Command header");
    50d8:	4ac1      	ldr	r2, [pc, #772]	; (53e0 <hci_cmd_handle+0x318>)
    50da:	49c2      	ldr	r1, [pc, #776]	; (53e4 <hci_cmd_handle+0x31c>)
		BT_ERR("Invalid HCI CMD packet length");
    50dc:	2003      	movs	r0, #3
    50de:	f7fd f88f 	bl	2200 <bt_log>
		return NULL;
    50e2:	4628      	mov	r0, r5
}
    50e4:	b00f      	add	sp, #60	; 0x3c
    50e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chdr = (void *)cmd->data;
    50e8:	6883      	ldr	r3, [r0, #8]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    50ea:	4ebf      	ldr	r6, [pc, #764]	; (53e8 <hci_cmd_handle+0x320>)
    50ec:	781a      	ldrb	r2, [r3, #0]
    50ee:	7858      	ldrb	r0, [r3, #1]
	if (cmd->len < chdr->param_len) {
    50f0:	789b      	ldrb	r3, [r3, #2]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    50f2:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	if (cmd->len < chdr->param_len) {
    50f6:	428b      	cmp	r3, r1
	_opcode = sys_le16_to_cpu(chdr->opcode);
    50f8:	8032      	strh	r2, [r6, #0]
	if (cmd->len < chdr->param_len) {
    50fa:	d902      	bls.n	5102 <hci_cmd_handle+0x3a>
		BT_ERR("Invalid HCI CMD packet length");
    50fc:	4ab8      	ldr	r2, [pc, #736]	; (53e0 <hci_cmd_handle+0x318>)
    50fe:	49bb      	ldr	r1, [pc, #748]	; (53ec <hci_cmd_handle+0x324>)
    5100:	e7ec      	b.n	50dc <hci_cmd_handle+0x14>
	net_buf_pull(cmd, sizeof(*chdr));
    5102:	2103      	movs	r1, #3
    5104:	f104 0008 	add.w	r0, r4, #8
    5108:	f006 fc35 	bl	b976 <net_buf_simple_pull>
	ocf = BT_OCF(_opcode);
    510c:	8833      	ldrh	r3, [r6, #0]
    510e:	f3c3 0209 	ubfx	r2, r3, #0, #10
	switch (BT_OGF(_opcode)) {
    5112:	0a9b      	lsrs	r3, r3, #10
    5114:	2b04      	cmp	r3, #4
    5116:	d06b      	beq.n	51f0 <hci_cmd_handle+0x128>
    5118:	d80e      	bhi.n	5138 <hci_cmd_handle+0x70>
    511a:	2b03      	cmp	r3, #3
    511c:	d02c      	beq.n	5178 <hci_cmd_handle+0xb0>
		ccst = cmd_complete(&evt, sizeof(*ccst));
    511e:	2101      	movs	r1, #1
    5120:	a803      	add	r0, sp, #12
    5122:	f7ff fdf5 	bl	4d10 <cmd_complete>
		BT_ERR("Invalid BT_HCI_ERR_UNKNOWN_CMD");
    5126:	4aae      	ldr	r2, [pc, #696]	; (53e0 <hci_cmd_handle+0x318>)
    5128:	49b1      	ldr	r1, [pc, #708]	; (53f0 <hci_cmd_handle+0x328>)
		ccst = cmd_complete(&evt, sizeof(*ccst));
    512a:	4604      	mov	r4, r0
		BT_ERR("Invalid BT_HCI_ERR_UNKNOWN_CMD");
    512c:	2003      	movs	r0, #3
    512e:	f7fd f867 	bl	2200 <bt_log>
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    5132:	2301      	movs	r3, #1
    5134:	7023      	strb	r3, [r4, #0]
    5136:	e034      	b.n	51a2 <hci_cmd_handle+0xda>
	switch (BT_OGF(_opcode)) {
    5138:	2b08      	cmp	r3, #8
    513a:	f000 80e6 	beq.w	530a <hci_cmd_handle+0x242>
    513e:	2b3f      	cmp	r3, #63	; 0x3f
    5140:	d1ed      	bne.n	511e <hci_cmd_handle+0x56>
	switch (ocf) {
    5142:	3a01      	subs	r2, #1
    5144:	2a09      	cmp	r2, #9
    5146:	d8ea      	bhi.n	511e <hci_cmd_handle+0x56>
    5148:	a301      	add	r3, pc, #4	; (adr r3, 5150 <hci_cmd_handle+0x88>)
    514a:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    514e:	bf00      	nop
    5150:	000054ff 	.word	0x000054ff
    5154:	0000552d 	.word	0x0000552d
    5158:	00005555 	.word	0x00005555
    515c:	0000511f 	.word	0x0000511f
    5160:	0000511f 	.word	0x0000511f
    5164:	00005599 	.word	0x00005599
    5168:	0000511f 	.word	0x0000511f
    516c:	0000556b 	.word	0x0000556b
    5170:	000055a3 	.word	0x000055a3
    5174:	0000560f 	.word	0x0000560f
	switch (ocf) {
    5178:	2a03      	cmp	r2, #3
    517a:	d014      	beq.n	51a6 <hci_cmd_handle+0xde>
    517c:	d808      	bhi.n	5190 <hci_cmd_handle+0xc8>
    517e:	2a01      	cmp	r2, #1
    5180:	d1cd      	bne.n	511e <hci_cmd_handle+0x56>
	event_mask = sys_get_le64(cmd->events);
    5182:	68a0      	ldr	r0, [r4, #8]
    5184:	f7ff ff9c 	bl	50c0 <sys_get_le64>
    5188:	4b9a      	ldr	r3, [pc, #616]	; (53f4 <hci_cmd_handle+0x32c>)
    518a:	e9c3 0100 	strd	r0, r1, [r3]
    518e:	e003      	b.n	5198 <hci_cmd_handle+0xd0>
	switch (ocf) {
    5190:	2a2d      	cmp	r2, #45	; 0x2d
    5192:	d017      	beq.n	51c4 <hci_cmd_handle+0xfc>
    5194:	2a63      	cmp	r2, #99	; 0x63
    5196:	d1c2      	bne.n	511e <hci_cmd_handle+0x56>
	ccst = cmd_complete(evt, sizeof(*ccst));
    5198:	2101      	movs	r1, #1
    519a:	a803      	add	r0, sp, #12
    519c:	f7ff fdb8 	bl	4d10 <cmd_complete>
	ccst->status = 0x00;
    51a0:	7005      	strb	r5, [r0, #0]
	return evt;
    51a2:	9803      	ldr	r0, [sp, #12]
    51a4:	e79e      	b.n	50e4 <hci_cmd_handle+0x1c>
	event_mask = DEFAULT_EVENT_MASK;
    51a6:	4b93      	ldr	r3, [pc, #588]	; (53f4 <hci_cmd_handle+0x32c>)
    51a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    51ac:	f641 71ff 	movw	r1, #8191	; 0x1fff
    51b0:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    51b4:	4b90      	ldr	r3, [pc, #576]	; (53f8 <hci_cmd_handle+0x330>)
    51b6:	201f      	movs	r0, #31
    51b8:	2100      	movs	r1, #0
    51ba:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
    51be:	f004 fcd5 	bl	9b6c <ll_reset>
    51c2:	e7e9      	b.n	5198 <hci_cmd_handle+0xd0>
    51c4:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    51c6:	2104      	movs	r1, #4
    51c8:	a803      	add	r0, sp, #12
	handle = sys_le16_to_cpu(cmd->handle);
    51ca:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
    51cc:	789f      	ldrb	r7, [r3, #2]
	rp = cmd_complete(evt, sizeof(*rp));
    51ce:	f7ff fd9f 	bl	4d10 <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    51d2:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    51d4:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(handle, type, &rp->tx_power_level);
    51d6:	1cc2      	adds	r2, r0, #3
    51d8:	4639      	mov	r1, r7
    51da:	4630      	mov	r0, r6
    51dc:	f004 fd5c 	bl	9c98 <ll_tx_pwr_lvl_get>
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    51e0:	2800      	cmp	r0, #0
    51e2:	bf0c      	ite	eq
    51e4:	2300      	moveq	r3, #0
    51e6:	2302      	movne	r3, #2
    51e8:	7023      	strb	r3, [r4, #0]
	rp->handle = sys_cpu_to_le16(handle);
    51ea:	f8a4 5001 	strh.w	r5, [r4, #1]
    51ee:	e7d8      	b.n	51a2 <hci_cmd_handle+0xda>
	switch (ocf) {
    51f0:	3a01      	subs	r2, #1
    51f2:	2a08      	cmp	r2, #8
    51f4:	d893      	bhi.n	511e <hci_cmd_handle+0x56>
    51f6:	a301      	add	r3, pc, #4	; (adr r3, 51fc <hci_cmd_handle+0x134>)
    51f8:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    51fc:	00005221 	.word	0x00005221
    5200:	0000524b 	.word	0x0000524b
    5204:	000052d7 	.word	0x000052d7
    5208:	0000511f 	.word	0x0000511f
    520c:	0000511f 	.word	0x0000511f
    5210:	0000511f 	.word	0x0000511f
    5214:	0000511f 	.word	0x0000511f
    5218:	0000511f 	.word	0x0000511f
    521c:	000052f3 	.word	0x000052f3
	rp = cmd_complete(evt, sizeof(*rp));
    5220:	2109      	movs	r1, #9
    5222:	a803      	add	r0, sp, #12
    5224:	f7ff fd74 	bl	4d10 <cmd_complete>
	rp->status = 0x00;
    5228:	2300      	movs	r3, #0
    522a:	7003      	strb	r3, [r0, #0]
	rp->hci_revision = sys_cpu_to_le16(0);
    522c:	7083      	strb	r3, [r0, #2]
    522e:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    5230:	f06f 030e 	mvn.w	r3, #14
    5234:	7143      	strb	r3, [r0, #5]
    5236:	2305      	movs	r3, #5
	rp->hci_version = BT_HCI_VERSION_5_0;
    5238:	2209      	movs	r2, #9
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    523a:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    523c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	rp->hci_version = BT_HCI_VERSION_5_0;
    5240:	7042      	strb	r2, [r0, #1]
	rp->lmp_version = RADIO_BLE_VERSION_NUMBER;
    5242:	7102      	strb	r2, [r0, #4]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    5244:	71c3      	strb	r3, [r0, #7]
    5246:	7203      	strb	r3, [r0, #8]
    5248:	e7ab      	b.n	51a2 <hci_cmd_handle+0xda>
	rp = cmd_complete(evt, sizeof(*rp));
    524a:	2141      	movs	r1, #65	; 0x41
    524c:	a803      	add	r0, sp, #12
    524e:	f7ff fd5f 	bl	4d10 <cmd_complete>
	rp->status = 0x00;
    5252:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    5254:	4604      	mov	r4, r0
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    5256:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    5258:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    525c:	f7fb fa09 	bl	672 <memset>
	rp->commands[2] |= BIT(7);
    5260:	78e3      	ldrb	r3, [r4, #3]
	rp->commands[27] |= BIT(6) | BIT(7);
    5262:	7f20      	ldrb	r0, [r4, #28]
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
    5264:	7ea1      	ldrb	r1, [r4, #26]
	rp->commands[26] |= BIT(6) | BIT(7);
    5266:	7ee2      	ldrb	r2, [r4, #27]
	rp->commands[2] |= BIT(7);
    5268:	f063 037f 	orn	r3, r3, #127	; 0x7f
    526c:	70e3      	strb	r3, [r4, #3]
	rp->commands[5] |= BIT(6) | BIT(7);
    526e:	79a3      	ldrb	r3, [r4, #6]
    5270:	f063 033f 	orn	r3, r3, #63	; 0x3f
    5274:	71a3      	strb	r3, [r4, #6]
	rp->commands[10] |= BIT(2);
    5276:	7ae3      	ldrb	r3, [r4, #11]
    5278:	f043 0304 	orr.w	r3, r3, #4
    527c:	72e3      	strb	r3, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
    527e:	7be3      	ldrb	r3, [r4, #15]
    5280:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    5284:	73e3      	strb	r3, [r4, #15]
	rp->commands[15] |= BIT(1);
    5286:	7c23      	ldrb	r3, [r4, #16]
    5288:	f043 0302 	orr.w	r3, r3, #2
    528c:	7423      	strb	r3, [r4, #16]
	rp->commands[22] |= BIT(2);
    528e:	7de3      	ldrb	r3, [r4, #23]
    5290:	f043 0304 	orr.w	r3, r3, #4
    5294:	75e3      	strb	r3, [r4, #23]
	rp->commands[36] |= BIT(1);
    5296:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
	rp->commands[36] |= BIT(2) | BIT(3) | BIT(5) | BIT(7) | BIT(6) ;
    529a:	f063 0311 	orn	r3, r3, #17
    529e:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	rp->commands[37] |= BIT(5);
    52a2:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
	rp->commands[27] |= BIT(6) | BIT(7);
    52a6:	f060 003c 	orn	r0, r0, #60	; 0x3c
	rp->commands[37] |= BIT(5);
    52aa:	f043 0320 	orr.w	r3, r3, #32
	rp->commands[27] |= BIT(6) | BIT(7);
    52ae:	7720      	strb	r0, [r4, #28]
	rp->commands[37] |= BIT(5);
    52b0:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	rp->commands[28] |= BIT(3);
    52b4:	7f60      	ldrb	r0, [r4, #29]
	rp->commands[38] |= BIT(7);
    52b6:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	rp->commands[28] |= BIT(3);
    52ba:	f040 0008 	orr.w	r0, r0, #8
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    52be:	f061 0108 	orn	r1, r1, #8
	rp->commands[26] |= BIT(0) | BIT(1);
    52c2:	f062 023c 	orn	r2, r2, #60	; 0x3c
	rp->commands[38] |= BIT(7);
    52c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[28] |= BIT(3);
    52ca:	7760      	strb	r0, [r4, #29]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    52cc:	76a1      	strb	r1, [r4, #26]
	rp->commands[26] |= BIT(0) | BIT(1);
    52ce:	76e2      	strb	r2, [r4, #27]
	rp->commands[38] |= BIT(7);
    52d0:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
    52d4:	e765      	b.n	51a2 <hci_cmd_handle+0xda>
	rp = cmd_complete(evt, sizeof(*rp));
    52d6:	2109      	movs	r1, #9
    52d8:	a803      	add	r0, sp, #12
    52da:	f7ff fd19 	bl	4d10 <cmd_complete>
	rp->status = 0x00;
    52de:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    52e0:	4604      	mov	r4, r0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    52e2:	2208      	movs	r2, #8
	rp->status = 0x00;
    52e4:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    52e8:	f7fb f9c3 	bl	672 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
    52ec:	2360      	movs	r3, #96	; 0x60
    52ee:	7163      	strb	r3, [r4, #5]
    52f0:	e757      	b.n	51a2 <hci_cmd_handle+0xda>
	rp = cmd_complete(evt, sizeof(*rp));
    52f2:	2107      	movs	r1, #7
    52f4:	a803      	add	r0, sp, #12
    52f6:	f7ff fd0b 	bl	4d10 <cmd_complete>
	rp->status = 0x00;
    52fa:	4601      	mov	r1, r0
    52fc:	2300      	movs	r3, #0
    52fe:	f801 3b01 	strb.w	r3, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
    5302:	4618      	mov	r0, r3
    5304:	f7ff fb4e 	bl	49a4 <ll_addr_get>
    5308:	e74b      	b.n	51a2 <hci_cmd_handle+0xda>
	switch (ocf) {
    530a:	2a10      	cmp	r2, #16
    530c:	f000 80a6 	beq.w	545c <hci_cmd_handle+0x394>
    5310:	d847      	bhi.n	53a2 <hci_cmd_handle+0x2da>
    5312:	2a06      	cmp	r2, #6
    5314:	f000 80e3 	beq.w	54de <hci_cmd_handle+0x416>
    5318:	d822      	bhi.n	5360 <hci_cmd_handle+0x298>
    531a:	2a02      	cmp	r2, #2
    531c:	d07f      	beq.n	541e <hci_cmd_handle+0x356>
    531e:	d80f      	bhi.n	5340 <hci_cmd_handle+0x278>
    5320:	2a01      	cmp	r2, #1
    5322:	f47f aefc 	bne.w	511e <hci_cmd_handle+0x56>
	le_event_mask = sys_get_le64(cmd->events);
    5326:	68a0      	ldr	r0, [r4, #8]
    5328:	f7ff feca 	bl	50c0 <sys_get_le64>
    532c:	4b32      	ldr	r3, [pc, #200]	; (53f8 <hci_cmd_handle+0x330>)
    532e:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
    5332:	2101      	movs	r1, #1
    5334:	a803      	add	r0, sp, #12
    5336:	f7ff fceb 	bl	4d10 <cmd_complete>
	ccst->status = 0x00;
    533a:	2300      	movs	r3, #0
    533c:	7003      	strb	r3, [r0, #0]
    533e:	e730      	b.n	51a2 <hci_cmd_handle+0xda>
	switch (ocf) {
    5340:	2a03      	cmp	r2, #3
    5342:	d079      	beq.n	5438 <hci_cmd_handle+0x370>
    5344:	2a05      	cmp	r2, #5
    5346:	f47f aeea 	bne.w	511e <hci_cmd_handle+0x56>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
    534a:	68a1      	ldr	r1, [r4, #8]
    534c:	2001      	movs	r0, #1
    534e:	f7ff fb43 	bl	49d8 <ll_addr_set>
	status = ll_wl_remove(&cmd->addr);
    5352:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    5354:	2101      	movs	r1, #1
    5356:	a803      	add	r0, sp, #12
    5358:	f7ff fcda 	bl	4d10 <cmd_complete>
	ccst->status = status;
    535c:	7004      	strb	r4, [r0, #0]
    535e:	e720      	b.n	51a2 <hci_cmd_handle+0xda>
	switch (ocf) {
    5360:	2a09      	cmp	r2, #9
    5362:	f000 80c1 	beq.w	54e8 <hci_cmd_handle+0x420>
    5366:	d80b      	bhi.n	5380 <hci_cmd_handle+0x2b8>
    5368:	2a07      	cmp	r2, #7
    536a:	f000 8148 	beq.w	55fe <hci_cmd_handle+0x536>
    536e:	2a08      	cmp	r2, #8
    5370:	f47f aed5 	bne.w	511e <hci_cmd_handle+0x56>
    5374:	68a3      	ldr	r3, [r4, #8]
	ll_adv_data_set(cmd->len, &cmd->data[0]);
    5376:	1c59      	adds	r1, r3, #1
    5378:	7818      	ldrb	r0, [r3, #0]
    537a:	f005 facb 	bl	a914 <ll_adv_data_set>
    537e:	e7d8      	b.n	5332 <hci_cmd_handle+0x26a>
	switch (ocf) {
    5380:	2a0a      	cmp	r2, #10
    5382:	f000 80b7 	beq.w	54f4 <hci_cmd_handle+0x42c>
    5386:	2a0f      	cmp	r2, #15
    5388:	f47f aec9 	bne.w	511e <hci_cmd_handle+0x56>
	rp = cmd_complete(evt, sizeof(*rp));
    538c:	2102      	movs	r1, #2
    538e:	a803      	add	r0, sp, #12
    5390:	f7ff fcbe 	bl	4d10 <cmd_complete>
	rp->status = 0x00;
    5394:	2300      	movs	r3, #0
    5396:	7003      	strb	r3, [r0, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    5398:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
    539a:	f005 fbd7 	bl	ab4c <ll_wl_size_get>
    539e:	7060      	strb	r0, [r4, #1]
    53a0:	e6ff      	b.n	51a2 <hci_cmd_handle+0xda>
	switch (ocf) {
    53a2:	2a1c      	cmp	r2, #28
    53a4:	d07f      	beq.n	54a6 <hci_cmd_handle+0x3de>
    53a6:	d812      	bhi.n	53ce <hci_cmd_handle+0x306>
    53a8:	2a12      	cmp	r2, #18
    53aa:	d064      	beq.n	5476 <hci_cmd_handle+0x3ae>
    53ac:	d35f      	bcc.n	546e <hci_cmd_handle+0x3a6>
    53ae:	2a17      	cmp	r2, #23
    53b0:	d065      	beq.n	547e <hci_cmd_handle+0x3b6>
    53b2:	2a18      	cmp	r2, #24
    53b4:	f47f aeb3 	bne.w	511e <hci_cmd_handle+0x56>
	rp = cmd_complete(evt, sizeof(*rp));
    53b8:	2109      	movs	r1, #9
    53ba:	a803      	add	r0, sp, #12
    53bc:	f7ff fca8 	bl	4d10 <cmd_complete>
	rp->status = 0x00;
    53c0:	2300      	movs	r3, #0
    53c2:	f800 3b01 	strb.w	r3, [r0], #1
	bt_rand(rp->rand, count);
    53c6:	2108      	movs	r1, #8
    53c8:	f7ff fb26 	bl	4a18 <bt_rand>
    53cc:	e6e9      	b.n	51a2 <hci_cmd_handle+0xda>
	switch (ocf) {
    53ce:	2a38      	cmp	r2, #56	; 0x38
    53d0:	f000 808a 	beq.w	54e8 <hci_cmd_handle+0x420>
    53d4:	d812      	bhi.n	53fc <hci_cmd_handle+0x334>
    53d6:	2a36      	cmp	r2, #54	; 0x36
    53d8:	f000 8081 	beq.w	54de <hci_cmd_handle+0x416>
    53dc:	2a37      	cmp	r2, #55	; 0x37
    53de:	e7c7      	b.n	5370 <hci_cmd_handle+0x2a8>
    53e0:	0000e0ee 	.word	0x0000e0ee
    53e4:	0000e153 	.word	0x0000e153
    53e8:	200009f4 	.word	0x200009f4
    53ec:	0000e16d 	.word	0x0000e16d
    53f0:	0000e1ab 	.word	0x0000e1ab
    53f4:	20004d00 	.word	0x20004d00
    53f8:	20004d08 	.word	0x20004d08
    53fc:	2a39      	cmp	r2, #57	; 0x39
    53fe:	d079      	beq.n	54f4 <hci_cmd_handle+0x42c>
    5400:	2a4b      	cmp	r2, #75	; 0x4b
    5402:	f47f ae8c 	bne.w	511e <hci_cmd_handle+0x56>
	rp = cmd_complete(evt, sizeof(*rp));
    5406:	2103      	movs	r1, #3
    5408:	a803      	add	r0, sp, #12
    540a:	f7ff fc81 	bl	4d10 <cmd_complete>
	rp->status = 0x00;
    540e:	4601      	mov	r1, r0
    5410:	2300      	movs	r3, #0
    5412:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    5416:	3001      	adds	r0, #1
    5418:	f7ff fafa 	bl	4a10 <ll_tx_pwr_get>
    541c:	e6c1      	b.n	51a2 <hci_cmd_handle+0xda>
	rp = cmd_complete(evt, sizeof(*rp));
    541e:	2104      	movs	r1, #4
    5420:	a803      	add	r0, sp, #12
    5422:	f7ff fc75 	bl	4d10 <cmd_complete>
	rp->status = 0x00;
    5426:	2300      	movs	r3, #0
    5428:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    542a:	f06f 0204 	mvn.w	r2, #4
    542e:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    5430:	230a      	movs	r3, #10
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    5432:	7042      	strb	r2, [r0, #1]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    5434:	70c3      	strb	r3, [r0, #3]
    5436:	e6b4      	b.n	51a2 <hci_cmd_handle+0xda>
	rp = cmd_complete(evt, sizeof(*rp));
    5438:	2109      	movs	r1, #9
    543a:	a803      	add	r0, sp, #12
    543c:	f7ff fc68 	bl	4d10 <cmd_complete>
	rp->status = 0x00;
    5440:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    5442:	4604      	mov	r4, r0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    5444:	2208      	movs	r2, #8
	rp->status = 0x00;
    5446:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    544a:	f7fb f912 	bl	672 <memset>
	rp->features[0] = RADIO_BLE_FEAT & 0xFF;
    544e:	230c      	movs	r3, #12
    5450:	7063      	strb	r3, [r4, #1]
	rp->features[1] = (RADIO_BLE_FEAT >> 8)  & 0xFF;
    5452:	2340      	movs	r3, #64	; 0x40
    5454:	70a3      	strb	r3, [r4, #2]
	rp->features[2] = (RADIO_BLE_FEAT >> 16)  & 0xFF;
    5456:	2301      	movs	r3, #1
    5458:	70e3      	strb	r3, [r4, #3]
    545a:	e6a2      	b.n	51a2 <hci_cmd_handle+0xda>
	ccst = cmd_complete(evt, sizeof(*ccst));
    545c:	2101      	movs	r1, #1
    545e:	a803      	add	r0, sp, #12
    5460:	f7ff fc56 	bl	4d10 <cmd_complete>
    5464:	4604      	mov	r4, r0
	ccst->status = ll_wl_clear();
    5466:	f005 fb73 	bl	ab50 <ll_wl_clear>
    546a:	7020      	strb	r0, [r4, #0]
    546c:	e699      	b.n	51a2 <hci_cmd_handle+0xda>
	status = ll_wl_add(&cmd->addr);
    546e:	68a0      	ldr	r0, [r4, #8]
    5470:	f005 fb84 	bl	ab7c <ll_wl_add>
    5474:	e76d      	b.n	5352 <hci_cmd_handle+0x28a>
	status = ll_wl_remove(&cmd->addr);
    5476:	68a0      	ldr	r0, [r4, #8]
    5478:	f005 fbb8 	bl	abec <ll_wl_remove>
    547c:	e769      	b.n	5352 <hci_cmd_handle+0x28a>
    547e:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    5480:	2300      	movs	r3, #0
    5482:	aa04      	add	r2, sp, #16
    5484:	f100 0110 	add.w	r1, r0, #16
    5488:	f005 fc74 	bl	ad74 <ecb_encrypt>
	rp = cmd_complete(evt, sizeof(*rp));
    548c:	2111      	movs	r1, #17
    548e:	a803      	add	r0, sp, #12
    5490:	f7ff fc3e 	bl	4d10 <cmd_complete>
	rp->status = 0x00;
    5494:	2300      	movs	r3, #0
	memcpy(rp->enc_data, enc_data, 16);
    5496:	2210      	movs	r2, #16
	rp->status = 0x00;
    5498:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
    549c:	eb0d 0102 	add.w	r1, sp, r2
	memcpy(rp->info, build_info, sizeof(build_info));
    54a0:	f7fb f8bb 	bl	61a <memcpy>
    54a4:	e67d      	b.n	51a2 <hci_cmd_handle+0xda>
	rp = cmd_complete(evt, sizeof(*rp));
    54a6:	2109      	movs	r1, #9
    54a8:	a803      	add	r0, sp, #12
    54aa:	f7ff fc31 	bl	4d10 <cmd_complete>
	rp->status = 0x00;
    54ae:	4604      	mov	r4, r0
	rp = cmd_complete(evt, sizeof(*rp));
    54b0:	4606      	mov	r6, r0
	rp->status = 0x00;
    54b2:	f804 5b01 	strb.w	r5, [r4], #1
    54b6:	f006 fe37 	bl	c128 <_impl_k_current_get>
	BT_DBG("states: 0x%08x%08x", (u32_t)(states >> 32),
    54ba:	2703      	movs	r7, #3
    54bc:	4603      	mov	r3, r0
    54be:	4a86      	ldr	r2, [pc, #536]	; (56d8 <hci_cmd_handle+0x610>)
    54c0:	4986      	ldr	r1, [pc, #536]	; (56dc <hci_cmd_handle+0x614>)
    54c2:	2007      	movs	r0, #7
    54c4:	e88d 00a0 	stmia.w	sp, {r5, r7}
    54c8:	f7fc fe9a 	bl	2200 <bt_log>
	sys_put_le32(val, dst);
    54cc:	4621      	mov	r1, r4
    54ce:	4638      	mov	r0, r7
    54d0:	f7ff fc0a 	bl	4ce8 <sys_put_le32>
	sys_put_le32(val >> 32, &dst[4]);
    54d4:	1d71      	adds	r1, r6, #5
    54d6:	4628      	mov	r0, r5
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    54d8:	f7ff fc06 	bl	4ce8 <sys_put_le32>
    54dc:	e661      	b.n	51a2 <hci_cmd_handle+0xda>
		le_set_adv_param(cmd, evt);
    54de:	a903      	add	r1, sp, #12
    54e0:	68a0      	ldr	r0, [r4, #8]
    54e2:	f7ff fcab 	bl	4e3c <le_set_adv_param.isra.21>
    54e6:	e65c      	b.n	51a2 <hci_cmd_handle+0xda>
    54e8:	68a3      	ldr	r3, [r4, #8]
	ll_scan_data_set(cmd->len, &cmd->data[0]);
    54ea:	1c59      	adds	r1, r3, #1
    54ec:	7818      	ldrb	r0, [r3, #0]
    54ee:	f005 fa77 	bl	a9e0 <ll_scan_data_set>
    54f2:	e71e      	b.n	5332 <hci_cmd_handle+0x26a>
		le_set_adv_enable(cmd, evt);
    54f4:	a903      	add	r1, sp, #12
    54f6:	68a0      	ldr	r0, [r4, #8]
    54f8:	f7ff fcc8 	bl	4e8c <le_set_adv_enable.isra.25>
    54fc:	e651      	b.n	51a2 <hci_cmd_handle+0xda>
	rp = cmd_complete(evt, sizeof(*rp));
    54fe:	210d      	movs	r1, #13
    5500:	a803      	add	r0, sp, #12
    5502:	f7ff fc05 	bl	4d10 <cmd_complete>
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    5506:	2202      	movs	r2, #2
    5508:	7042      	strb	r2, [r0, #1]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    550a:	70c2      	strb	r2, [r0, #3]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    550c:	2201      	movs	r2, #1
    550e:	7182      	strb	r2, [r0, #6]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    5510:	220b      	movs	r2, #11
	rp->status = 0x00;
    5512:	2300      	movs	r3, #0
	rp->fw_revision = KERNEL_VERSION_MINOR;
    5514:	71c2      	strb	r2, [r0, #7]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    5516:	2263      	movs	r2, #99	; 0x63
	rp->status = 0x00;
    5518:	7003      	strb	r3, [r0, #0]
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    551a:	7083      	strb	r3, [r0, #2]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    551c:	7103      	strb	r3, [r0, #4]
	rp->fw_variant = 0;
    551e:	7143      	strb	r3, [r0, #5]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    5520:	7203      	strb	r3, [r0, #8]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    5522:	7242      	strb	r2, [r0, #9]
    5524:	7283      	strb	r3, [r0, #10]
    5526:	72c3      	strb	r3, [r0, #11]
    5528:	7303      	strb	r3, [r0, #12]
    552a:	e63a      	b.n	51a2 <hci_cmd_handle+0xda>
	rp = cmd_complete(evt, sizeof(*rp));
    552c:	2141      	movs	r1, #65	; 0x41
    552e:	a803      	add	r0, sp, #12
    5530:	f7ff fbee 	bl	4d10 <cmd_complete>
	rp->status = 0x00;
    5534:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    5536:	4604      	mov	r4, r0
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    5538:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    553a:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    553e:	f7fb f898 	bl	672 <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
    5542:	7863      	ldrb	r3, [r4, #1]
    5544:	f063 0358 	orn	r3, r3, #88	; 0x58
    5548:	7063      	strb	r3, [r4, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    554a:	78a3      	ldrb	r3, [r4, #2]
    554c:	f043 0303 	orr.w	r3, r3, #3
    5550:	70a3      	strb	r3, [r4, #2]
    5552:	e626      	b.n	51a2 <hci_cmd_handle+0xda>
	rp = cmd_complete(evt, sizeof(*rp));
    5554:	2109      	movs	r1, #9
    5556:	a803      	add	r0, sp, #12
    5558:	f7ff fbda 	bl	4d10 <cmd_complete>
	rp->status = 0x00;
    555c:	2100      	movs	r1, #0
    555e:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    5562:	2208      	movs	r2, #8
		memset(rp->er, 0x00, sizeof(rp->er));
    5564:	f7fb f885 	bl	672 <memset>
    5568:	e61b      	b.n	51a2 <hci_cmd_handle+0xda>
	const char build_info[] = HCI_VS_BUILD_INFO;
    556a:	4b5d      	ldr	r3, [pc, #372]	; (56e0 <hci_cmd_handle+0x618>)
    556c:	aa04      	add	r2, sp, #16
    556e:	f103 0628 	add.w	r6, r3, #40	; 0x28
    5572:	4615      	mov	r5, r2
    5574:	6818      	ldr	r0, [r3, #0]
    5576:	6859      	ldr	r1, [r3, #4]
    5578:	4614      	mov	r4, r2
    557a:	c403      	stmia	r4!, {r0, r1}
    557c:	3308      	adds	r3, #8
    557e:	42b3      	cmp	r3, r6
    5580:	4622      	mov	r2, r4
    5582:	d1f7      	bne.n	5574 <hci_cmd_handle+0x4ac>
	rp = cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
    5584:	2129      	movs	r1, #41	; 0x29
    5586:	a803      	add	r0, sp, #12
    5588:	f7ff fbc2 	bl	4d10 <cmd_complete>
	rp->status = 0x00;
    558c:	2300      	movs	r3, #0
    558e:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
    5592:	2228      	movs	r2, #40	; 0x28
    5594:	4629      	mov	r1, r5
    5596:	e783      	b.n	54a0 <hci_cmd_handle+0x3d8>
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    5598:	68a1      	ldr	r1, [r4, #8]
    559a:	2000      	movs	r0, #0
    559c:	f7ff fa1c 	bl	49d8 <ll_addr_set>
    55a0:	e6c7      	b.n	5332 <hci_cmd_handle+0x26a>
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    55a2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    55a6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
    55aa:	3201      	adds	r2, #1
    55ac:	d106      	bne.n	55bc <hci_cmd_handle+0x4f4>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    55ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    55b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    55b6:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    55b8:	4293      	cmp	r3, r2
    55ba:	d020      	beq.n	55fe <hci_cmd_handle+0x536>
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
    55bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    55c0:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    55c4:	07db      	lsls	r3, r3, #31
    55c6:	d51a      	bpl.n	55fe <hci_cmd_handle+0x536>
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    55c8:	2118      	movs	r1, #24
    55ca:	a803      	add	r0, sp, #12
    55cc:	f7ff fba0 	bl	4d10 <cmd_complete>
		rp->status = 0x00;
    55d0:	2600      	movs	r6, #0
		rp->num_addrs = 1;
    55d2:	2301      	movs	r3, #1
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    55d4:	4604      	mov	r4, r0
		rp->num_addrs = 1;
    55d6:	7043      	strb	r3, [r0, #1]
		rp->status = 0x00;
    55d8:	7006      	strb	r6, [r0, #0]
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addr->bdaddr.val[0]);
    55da:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    55de:	1ca1      	adds	r1, r4, #2
    55e0:	f7ff fb82 	bl	4ce8 <sys_put_le32>
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addr->bdaddr.val[4]);
    55e4:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
	dst[0] = val;
    55e8:	71a3      	strb	r3, [r4, #6]
	dst[1] = val >> 8;
    55ea:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addr->bdaddr);
    55ee:	f063 033f 	orn	r3, r3, #63	; 0x3f
    55f2:	71e3      	strb	r3, [r4, #7]
		memset(addr->ir, 0x00, sizeof(addr->ir));
    55f4:	2210      	movs	r2, #16
    55f6:	4631      	mov	r1, r6
    55f8:	f104 0008 	add.w	r0, r4, #8
    55fc:	e7b2      	b.n	5564 <hci_cmd_handle+0x49c>
	rp = cmd_complete(evt, sizeof(*rp));
    55fe:	2102      	movs	r1, #2
    5600:	a803      	add	r0, sp, #12
    5602:	f7ff fb85 	bl	4d10 <cmd_complete>
	rp->status = 0x00;
    5606:	2300      	movs	r3, #0
    5608:	7003      	strb	r3, [r0, #0]
	rp->num_addrs = 0;
    560a:	7043      	strb	r3, [r0, #1]
    560c:	e5c9      	b.n	51a2 <hci_cmd_handle+0xda>
	rp = cmd_complete(evt, sizeof(*rp));
    560e:	2121      	movs	r1, #33	; 0x21
    5610:	a803      	add	r0, sp, #12
    5612:	f7ff fb7d 	bl	4d10 <cmd_complete>
	rp->status = 0x00;
    5616:	4603      	mov	r3, r0
    5618:	2200      	movs	r2, #0
    561a:	f803 2b01 	strb.w	r2, [r3], #1
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    561e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	rp = cmd_complete(evt, sizeof(*rp));
    5622:	4604      	mov	r4, r0
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    5624:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
    5628:	3101      	adds	r1, #1
    562a:	d04b      	beq.n	56c4 <hci_cmd_handle+0x5fc>
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    562c:	f8d2 1094 	ldr.w	r1, [r2, #148]	; 0x94
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    5630:	3101      	adds	r1, #1
    5632:	d047      	beq.n	56c4 <hci_cmd_handle+0x5fc>
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    5634:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    5638:	3101      	adds	r1, #1
    563a:	d043      	beq.n	56c4 <hci_cmd_handle+0x5fc>
	    (NRF_FICR->IR[3] != UINT32_MAX)) {
    563c:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    5640:	3101      	adds	r1, #1
    5642:	d03f      	beq.n	56c4 <hci_cmd_handle+0x5fc>
		sys_put_le32(NRF_FICR->IR[0], &rp->ir[0]);
    5644:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
    5648:	4619      	mov	r1, r3
    564a:	f7ff fb4d 	bl	4ce8 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[1], &rp->ir[4]);
    564e:	1d61      	adds	r1, r4, #5
    5650:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
    5654:	f7ff fb48 	bl	4ce8 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[2], &rp->ir[8]);
    5658:	f104 0109 	add.w	r1, r4, #9
    565c:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    5660:	f7ff fb42 	bl	4ce8 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[3], &rp->ir[12]);
    5664:	f104 010d 	add.w	r1, r4, #13
    5668:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
    566c:	f7ff fb3c 	bl	4ce8 <sys_put_le32>
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    5670:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5674:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    5678:	3301      	adds	r3, #1
    567a:	f104 0311 	add.w	r3, r4, #17
    567e:	d027      	beq.n	56d0 <hci_cmd_handle+0x608>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    5680:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    5684:	3101      	adds	r1, #1
    5686:	d023      	beq.n	56d0 <hci_cmd_handle+0x608>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    5688:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    568c:	3101      	adds	r1, #1
    568e:	d01f      	beq.n	56d0 <hci_cmd_handle+0x608>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
    5690:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    5694:	3101      	adds	r1, #1
    5696:	d01b      	beq.n	56d0 <hci_cmd_handle+0x608>
		sys_put_le32(NRF_FICR->ER[0], &rp->er[0]);
    5698:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
    569c:	4619      	mov	r1, r3
    569e:	f7ff fb23 	bl	4ce8 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[1], &rp->er[4]);
    56a2:	f104 0115 	add.w	r1, r4, #21
    56a6:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    56aa:	f7ff fb1d 	bl	4ce8 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[2], &rp->er[8]);
    56ae:	f104 0119 	add.w	r1, r4, #25
    56b2:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
    56b6:	f7ff fb17 	bl	4ce8 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    56ba:	f104 011d 	add.w	r1, r4, #29
    56be:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
    56c2:	e709      	b.n	54d8 <hci_cmd_handle+0x410>
		memset(rp->ir, 0x00, sizeof(rp->ir));
    56c4:	2210      	movs	r2, #16
    56c6:	2100      	movs	r1, #0
    56c8:	4618      	mov	r0, r3
    56ca:	f7fa ffd2 	bl	672 <memset>
    56ce:	e7cf      	b.n	5670 <hci_cmd_handle+0x5a8>
		memset(rp->er, 0x00, sizeof(rp->er));
    56d0:	2210      	movs	r2, #16
    56d2:	2100      	movs	r1, #0
    56d4:	4618      	mov	r0, r3
    56d6:	e745      	b.n	5564 <hci_cmd_handle+0x49c>
    56d8:	0000e0da 	.word	0x0000e0da
    56dc:	0000e18f 	.word	0x0000e18f
    56e0:	0000e1ce 	.word	0x0000e1ce

000056e4 <hci_evt_encode>:

}
#endif

void hci_evt_encode(struct radio_pdu_node_rx *node_rx, struct net_buf *buf)
{
    56e4:	b570      	push	{r4, r5, r6, lr}
    56e6:	4604      	mov	r4, r0
    56e8:	b08c      	sub	sp, #48	; 0x30
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    56ea:	7923      	ldrb	r3, [r4, #4]
    56ec:	2b01      	cmp	r3, #1
{
    56ee:	460d      	mov	r5, r1
	pdu_data = (void *)node_rx->pdu_data;
    56f0:	f100 0008 	add.w	r0, r0, #8
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    56f4:	d061      	beq.n	57ba <hci_evt_encode+0xd6>
	switch (node_rx->hdr.type) {
    56f6:	3b02      	subs	r3, #2
    56f8:	2b03      	cmp	r3, #3
    56fa:	d853      	bhi.n	57a4 <hci_evt_encode+0xc0>
    56fc:	e8df f003 	tbb	[pc, r3]
    5700:	100e0802 	.word	0x100e0802
		le_advertising_report(pdu_data, b, buf);
    5704:	460a      	mov	r2, r1
    5706:	4621      	mov	r1, r4
    5708:	f7ff fb3a 	bl	4d80 <le_advertising_report>
		encode_control(node_rx, pdu_data, buf);
	} else {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
    570c:	b00c      	add	sp, #48	; 0x30
    570e:	bd70      	pop	{r4, r5, r6, pc}
	le_adv_ext_report(pdu_data, b, buf, BIT(0));
    5710:	2301      	movs	r3, #1
	le_adv_ext_report(pdu_data, b, buf, BIT(2));
    5712:	462a      	mov	r2, r5
    5714:	4621      	mov	r1, r4
    5716:	f7ff fc33 	bl	4f80 <le_adv_ext_report>
    571a:	e7f7      	b.n	570c <hci_evt_encode+0x28>
    571c:	2304      	movs	r3, #4
    571e:	e7f8      	b.n	5712 <hci_evt_encode+0x2e>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    5720:	4b44      	ldr	r3, [pc, #272]	; (5834 <hci_evt_encode+0x150>)
    5722:	e9d3 2300 	ldrd	r2, r3, [r3]
    5726:	2200      	movs	r2, #0
    5728:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    572c:	4313      	orrs	r3, r2
    572e:	f104 060a 	add.w	r6, r4, #10
    5732:	d007      	beq.n	5744 <hci_evt_encode+0x60>
	    !(le_event_mask & BT_EVT_MASK_LE_SCAN_REQ_RECEIVED)) {
    5734:	4b40      	ldr	r3, [pc, #256]	; (5838 <hci_evt_encode+0x154>)
    5736:	e9d3 2300 	ldrd	r2, r3, [r3]
    573a:	2300      	movs	r3, #0
    573c:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    5740:	4313      	orrs	r3, r2
    5742:	d11e      	bne.n	5782 <hci_evt_encode+0x9e>
		addr.type = adv->tx_addr;
    5744:	7a23      	ldrb	r3, [r4, #8]
    5746:	ad0c      	add	r5, sp, #48	; 0x30
    5748:	f3c3 1380 	ubfx	r3, r3, #6, #1
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    574c:	2206      	movs	r2, #6
    574e:	4631      	mov	r1, r6
    5750:	f10d 000d 	add.w	r0, sp, #13
		addr.type = adv->tx_addr;
    5754:	f805 3d24 	strb.w	r3, [r5, #-36]!
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    5758:	f7fa ff5f 	bl	61a <memcpy>
			  offsetof(struct pdu_adv, payload) + adv->len];
    575c:	7a63      	ldrb	r3, [r4, #9]
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    575e:	441c      	add	r4, r3
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    5760:	ae05      	add	r6, sp, #20
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    5762:	7aa4      	ldrb	r4, [r4, #10]
    5764:	4264      	negs	r4, r4
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    5766:	4631      	mov	r1, r6
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    5768:	b264      	sxtb	r4, r4
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    576a:	4628      	mov	r0, r5
    576c:	f7ff fbcc 	bl	4f08 <bt_addr_le_to_str.constprop.37>
		BT_WARN("handle: %d, addr: %s, rssi: %d dB.",
    5770:	9401      	str	r4, [sp, #4]
    5772:	9600      	str	r6, [sp, #0]
    5774:	2300      	movs	r3, #0
    5776:	4a31      	ldr	r2, [pc, #196]	; (583c <hci_evt_encode+0x158>)
    5778:	4931      	ldr	r1, [pc, #196]	; (5840 <hci_evt_encode+0x15c>)
    577a:	2004      	movs	r0, #4
    577c:	f7fc fd40 	bl	2200 <bt_log>
    5780:	e7c4      	b.n	570c <hci_evt_encode+0x28>
	sep = meta_evt(buf, BT_HCI_EVT_LE_SCAN_REQ_RECEIVED, sizeof(*sep));
    5782:	2208      	movs	r2, #8
    5784:	2113      	movs	r1, #19
    5786:	4628      	mov	r0, r5
    5788:	f7ff fae4 	bl	4d54 <meta_evt>
	sep->handle = 0;
    578c:	2300      	movs	r3, #0
    578e:	7003      	strb	r3, [r0, #0]
	sep->addr.type = adv->tx_addr;
    5790:	7a23      	ldrb	r3, [r4, #8]
    5792:	f3c3 1380 	ubfx	r3, r3, #6, #1
    5796:	7043      	strb	r3, [r0, #1]
	memcpy(&sep->addr.a.val[0], &adv->scan_req.scan_addr[0],
    5798:	2206      	movs	r2, #6
    579a:	4631      	mov	r1, r6
    579c:	3002      	adds	r0, #2
    579e:	f7fa ff3c 	bl	61a <memcpy>
    57a2:	e7b3      	b.n	570c <hci_evt_encode+0x28>
		LL_ASSERT(0);
    57a4:	4a27      	ldr	r2, [pc, #156]	; (5844 <hci_evt_encode+0x160>)
		LL_ASSERT(0);
    57a6:	4928      	ldr	r1, [pc, #160]	; (5848 <hci_evt_encode+0x164>)
    57a8:	2003      	movs	r0, #3
    57aa:	f7fc fd29 	bl	2200 <bt_log>
    57ae:	4040      	eors	r0, r0
    57b0:	f380 8811 	msr	BASEPRI, r0
    57b4:	f04f 0004 	mov.w	r0, #4
    57b8:	df02      	svc	2
	switch (pdu_data->llctrl.opcode) {
    57ba:	7ae1      	ldrb	r1, [r4, #11]
    57bc:	88e6      	ldrh	r6, [r4, #6]
    57be:	2909      	cmp	r1, #9
    57c0:	d00b      	beq.n	57da <hci_evt_encode+0xf6>
    57c2:	290c      	cmp	r1, #12
    57c4:	d010      	beq.n	57e8 <hci_evt_encode+0x104>
    57c6:	2907      	cmp	r1, #7
    57c8:	d131      	bne.n	582e <hci_evt_encode+0x14a>
    57ca:	7b23      	ldrb	r3, [r4, #12]
	switch (pdu_data->llctrl.unknown_rsp.type) {
    57cc:	2b0e      	cmp	r3, #14
    57ce:	d128      	bne.n	5822 <hci_evt_encode+0x13e>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    57d0:	462b      	mov	r3, r5
    57d2:	4632      	mov	r2, r6
    57d4:	2100      	movs	r1, #0
    57d6:	201a      	movs	r0, #26
    57d8:	e003      	b.n	57e2 <hci_evt_encode+0xfe>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    57da:	4601      	mov	r1, r0
    57dc:	462b      	mov	r3, r5
    57de:	4632      	mov	r2, r6
    57e0:	2000      	movs	r0, #0
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    57e2:	f7ff fb63 	bl	4eac <le_remote_feat_complete>
    57e6:	e791      	b.n	570c <hci_evt_encode+0x28>
	if (!(event_mask & BT_EVT_MASK_REMOTE_VERSION_INFO)) {
    57e8:	4b12      	ldr	r3, [pc, #72]	; (5834 <hci_evt_encode+0x150>)
    57ea:	e9d3 2300 	ldrd	r2, r3, [r3]
    57ee:	2300      	movs	r3, #0
    57f0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
    57f4:	4313      	orrs	r3, r2
    57f6:	d089      	beq.n	570c <hci_evt_encode+0x28>
	evt_create(buf, BT_HCI_EVT_REMOTE_VERSION_INFO, sizeof(*ep));
    57f8:	2208      	movs	r2, #8
    57fa:	4628      	mov	r0, r5
    57fc:	f7ff fa7d 	bl	4cfa <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    5800:	2108      	movs	r1, #8
    5802:	1868      	adds	r0, r5, r1
    5804:	f006 f8a0 	bl	b948 <net_buf_simple_add>
	ep->status = 0x00;
    5808:	2300      	movs	r3, #0
    580a:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    580c:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->version = ver_ind->version_number;
    5810:	7b23      	ldrb	r3, [r4, #12]
    5812:	70c3      	strb	r3, [r0, #3]
	ep->manufacturer = sys_cpu_to_le16(ver_ind->company_id);
    5814:	f8b4 300d 	ldrh.w	r3, [r4, #13]
    5818:	8083      	strh	r3, [r0, #4]
	ep->subversion = sys_cpu_to_le16(ver_ind->sub_version_number);
    581a:	f8b4 300f 	ldrh.w	r3, [r4, #15]
    581e:	80c3      	strh	r3, [r0, #6]
    5820:	e774      	b.n	570c <hci_evt_encode+0x28>
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
    5822:	4a0a      	ldr	r2, [pc, #40]	; (584c <hci_evt_encode+0x168>)
    5824:	490a      	ldr	r1, [pc, #40]	; (5850 <hci_evt_encode+0x16c>)
    5826:	2004      	movs	r0, #4
    5828:	f7fc fcea 	bl	2200 <bt_log>
    582c:	e76e      	b.n	570c <hci_evt_encode+0x28>
		LL_ASSERT(0);
    582e:	4a09      	ldr	r2, [pc, #36]	; (5854 <hci_evt_encode+0x170>)
    5830:	e7b9      	b.n	57a6 <hci_evt_encode+0xc2>
    5832:	bf00      	nop
    5834:	20004d00 	.word	0x20004d00
    5838:	20004d08 	.word	0x20004d08
    583c:	0000e10f 	.word	0x0000e10f
    5840:	0000e1f6 	.word	0x0000e1f6
    5844:	0000e124 	.word	0x0000e124
    5848:	0000d86b 	.word	0x0000d86b
    584c:	0000e133 	.word	0x0000e133
    5850:	0000e21d 	.word	0x0000e21d
    5854:	0000e142 	.word	0x0000e142

00005858 <hci_get_class>:
{
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    5858:	7903      	ldrb	r3, [r0, #4]
    585a:	2b01      	cmp	r3, #1
    585c:	d00f      	beq.n	587e <hci_get_class+0x26>
    585e:	2b0a      	cmp	r3, #10
    5860:	d815      	bhi.n	588e <hci_get_class+0x36>
    5862:	2001      	movs	r0, #1
    5864:	fa00 f303 	lsl.w	r3, r0, r3
    5868:	f413 6fb0 	tst.w	r3, #1408	; 0x580
    586c:	d112      	bne.n	5894 <hci_get_class+0x3c>
    586e:	f013 0f3c 	tst.w	r3, #60	; 0x3c
    5872:	d110      	bne.n	5896 <hci_get_class+0x3e>
    5874:	f083 0340 	eor.w	r3, r3, #64	; 0x40
    5878:	f343 1080 	sbfx	r0, r3, #6, #1
    587c:	4770      	bx	lr
			return HCI_CLASS_EVT_CONNECTION;
		default:
			return -1;
		}

	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    587e:	7a03      	ldrb	r3, [r0, #8]
    5880:	f003 0303 	and.w	r3, r3, #3
    5884:	2b03      	cmp	r3, #3
		return HCI_CLASS_EVT_CONNECTION;
	} else {
		return HCI_CLASS_ACL_DATA;
    5886:	bf0c      	ite	eq
    5888:	2002      	moveq	r0, #2
    588a:	2003      	movne	r0, #3
    588c:	4770      	bx	lr
			return -1;
    588e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5892:	4770      	bx	lr
			return HCI_CLASS_EVT_CONNECTION;
    5894:	2002      	movs	r0, #2
	}
}
    5896:	4770      	bx	lr

00005898 <hci_init>:
	event_mask = DEFAULT_EVENT_MASK;
    5898:	4b06      	ldr	r3, [pc, #24]	; (58b4 <hci_init+0x1c>)
    589a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    589e:	f641 71ff 	movw	r1, #8191	; 0x1fff
    58a2:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    58a6:	4b04      	ldr	r3, [pc, #16]	; (58b8 <hci_init+0x20>)
    58a8:	201f      	movs	r0, #31
    58aa:	2100      	movs	r1, #0
    58ac:	e9c3 0100 	strd	r0, r1, [r3]
    58b0:	4770      	bx	lr
    58b2:	bf00      	nop
    58b4:	20004d00 	.word	0x20004d00
    58b8:	20004d08 	.word	0x20004d08

000058bc <cpu_sleep>:
#ifndef _CPU_H_
#define _CPU_H_

static inline void cpu_sleep(void)
{
	__WFE();
    58bc:	bf20      	wfe
	__SEV();
    58be:	bf40      	sev
	__WFE();
    58c0:	bf20      	wfe
    58c2:	4770      	bx	lr

000058c4 <pdu_len_cmp>:
	return nack;
}
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

static inline bool pdu_len_cmp(u8_t opcode, u8_t len)
{
    58c4:	b5f0      	push	{r4, r5, r6, r7, lr}
	const u8_t ctrl_len_lut[] = {
    58c6:	4b0d      	ldr	r3, [pc, #52]	; (58fc <pdu_len_cmp+0x38>)
{
    58c8:	b089      	sub	sp, #36	; 0x24
    58ca:	4605      	mov	r5, r0
    58cc:	460e      	mov	r6, r1
	const u8_t ctrl_len_lut[] = {
    58ce:	aa01      	add	r2, sp, #4
    58d0:	f103 0718 	add.w	r7, r3, #24
    58d4:	6818      	ldr	r0, [r3, #0]
    58d6:	6859      	ldr	r1, [r3, #4]
    58d8:	4614      	mov	r4, r2
    58da:	c403      	stmia	r4!, {r0, r1}
    58dc:	3308      	adds	r3, #8
    58de:	42bb      	cmp	r3, r7
    58e0:	4622      	mov	r2, r4
    58e2:	d1f7      	bne.n	58d4 <pdu_len_cmp+0x10>
    58e4:	881b      	ldrh	r3, [r3, #0]
    58e6:	8023      	strh	r3, [r4, #0]
		 sizeof(struct pdu_data_llctrl_phy_upd_ind)),
		(offsetof(struct pdu_data_llctrl, min_used_chans_ind) +
		 sizeof(struct pdu_data_llctrl_min_used_chans_ind)),
	};

	return ctrl_len_lut[opcode] == len;
    58e8:	ab08      	add	r3, sp, #32
    58ea:	441d      	add	r5, r3
    58ec:	f815 0c1c 	ldrb.w	r0, [r5, #-28]
}
    58f0:	1b83      	subs	r3, r0, r6
    58f2:	4258      	negs	r0, r3
    58f4:	4158      	adcs	r0, r3
    58f6:	b009      	add	sp, #36	; 0x24
    58f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    58fa:	bf00      	nop
    58fc:	0000cced 	.word	0x0000cced

00005900 <ticker_if_done>:
}
#endif

static void ticker_if_done(u32_t status, void *ops_context)
{
	*((u32_t volatile *)ops_context) = status;
    5900:	6008      	str	r0, [r1, #0]
    5902:	4770      	bx	lr

00005904 <prepare_reduced>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    5904:	b918      	cbnz	r0, 590e <prepare_reduced+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start |= XON_BITMASK;
    5906:	680b      	ldr	r3, [r1, #0]
    5908:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    590c:	600b      	str	r3, [r1, #0]
    590e:	4770      	bx	lr

00005910 <prepare_normal>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    5910:	b918      	cbnz	r0, 591a <prepare_normal+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start &= ~XON_BITMASK;
    5912:	680b      	ldr	r3, [r1, #0]
    5914:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    5918:	600b      	str	r3, [r1, #0]
    591a:	4770      	bx	lr

0000591c <chan_sel_remap>:
	}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */
}

static u8_t chan_sel_remap(u8_t *chan_map, u8_t chan_index)
{
    591c:	b570      	push	{r4, r5, r6, lr}
    591e:	1d03      	adds	r3, r0, #4
    5920:	1e45      	subs	r5, r0, #1
	u8_t chan_next;
	u8_t byte_count;

	chan_next = 0;
    5922:	2400      	movs	r4, #0
	byte_count = 5;
	while (byte_count--) {
    5924:	429d      	cmp	r5, r3
    5926:	d101      	bne.n	592c <chan_sel_remap+0x10>
    5928:	4620      	mov	r0, r4

		chan_map++;
	}

	return chan_next;
}
    592a:	bd70      	pop	{r4, r5, r6, pc}
		bite = *chan_map;
    592c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
		while (bit_count--) {
    5930:	2200      	movs	r2, #0
    5932:	18a0      	adds	r0, r4, r2
    5934:	2a08      	cmp	r2, #8
    5936:	b2c0      	uxtb	r0, r0
    5938:	d101      	bne.n	593e <chan_sel_remap+0x22>
    593a:	4604      	mov	r4, r0
    593c:	e7f2      	b.n	5924 <chan_sel_remap+0x8>
			if (bite & 0x01) {
    593e:	f016 0f01 	tst.w	r6, #1
    5942:	d003      	beq.n	594c <chan_sel_remap+0x30>
				if (chan_index == 0) {
    5944:	2900      	cmp	r1, #0
    5946:	d0f0      	beq.n	592a <chan_sel_remap+0xe>
				chan_index--;
    5948:	3901      	subs	r1, #1
    594a:	b2c9      	uxtb	r1, r1
			bite >>= 1;
    594c:	0876      	lsrs	r6, r6, #1
    594e:	3201      	adds	r2, #1
    5950:	e7ef      	b.n	5932 <chan_sel_remap+0x16>
	...

00005954 <packet_rx_reserve_get>:
			_radio.packet_rx_acquire);
	}
}

static inline struct radio_pdu_node_rx *packet_rx_reserve_get(u8_t count)
{
    5954:	b510      	push	{r4, lr}
	if (_radio.packet_rx_acquire >=
    5956:	4a0c      	ldr	r2, [pc, #48]	; (5988 <packet_rx_reserve_get+0x34>)
    5958:	f892 36ce 	ldrb.w	r3, [r2, #1742]	; 0x6ce
	    _radio.packet_rx_last) {
    595c:	f892 16cd 	ldrb.w	r1, [r2, #1741]	; 0x6cd
	if (_radio.packet_rx_acquire >=
    5960:	428b      	cmp	r3, r1
			_radio.packet_rx_last +
    5962:	bf38      	it	cc
    5964:	f892 46cc 	ldrbcc.w	r4, [r2, #1740]	; 0x6cc
			_radio.packet_rx_last);
    5968:	f892 16cd 	ldrb.w	r1, [r2, #1741]	; 0x6cd
			_radio.packet_rx_last +
    596c:	bf38      	it	cc
    596e:	191b      	addcc	r3, r3, r4
    5970:	1a5b      	subs	r3, r3, r1
    5972:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
    5974:	4298      	cmp	r0, r3
		return 0;
	}

	return _radio.packet_rx[_radio.packet_rx_last];
    5976:	bf9d      	ittte	ls
    5978:	f892 16cd 	ldrbls.w	r1, [r2, #1741]	; 0x6cd
    597c:	f8d2 36c8 	ldrls.w	r3, [r2, #1736]	; 0x6c8
    5980:	f853 0021 	ldrls.w	r0, [r3, r1, lsl #2]
		return 0;
    5984:	2000      	movhi	r0, #0
}
    5986:	bd10      	pop	{r4, pc}
    5988:	200009f8 	.word	0x200009f8

0000598c <conn_update_req>:
}

#if defined (CONFIG_BT_CTLR_XTAL_ADVANCED) && \
    defined(CONFIG_BT_CTLR_SCHED_ADVANCED)
static u32_t conn_update_req(struct connection *conn)
{
    598c:	b530      	push	{r4, r5, lr}
	if (conn->llcp_req != conn->llcp_ack) {
    598e:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
    5992:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
    5996:	4299      	cmp	r1, r3
    5998:	d128      	bne.n	59ec <conn_update_req+0x60>
	if (conn->llcp_conn_param.req != conn->llcp_conn_param.ack) {
		return 1;
	}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	if (!conn->role) {
    599a:	f990 301d 	ldrsb.w	r3, [r0, #29]
    599e:	2b00      	cmp	r3, #0
    59a0:	db26      	blt.n	59f0 <conn_update_req+0x64>
		conn->llcp.conn_upd.win_size = 1;
		conn->llcp.conn_upd.win_offset_us = 0;
		conn->llcp.conn_upd.interval = conn->conn_interval;
		conn->llcp.conn_upd.latency = conn->latency;
    59a2:	8cc4      	ldrh	r4, [r0, #38]	; 0x26
		conn->llcp.conn_upd.interval = conn->conn_interval;
    59a4:	8c82      	ldrh	r2, [r0, #36]	; 0x24
		conn->llcp.conn_upd.latency = conn->latency;
    59a6:	f8a0 4064 	strh.w	r4, [r0, #100]	; 0x64
		conn->llcp.conn_upd.timeout = conn->conn_interval *
					      conn->supervision_reload *
    59aa:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
		conn->llcp.conn_upd.interval = conn->conn_interval;
    59ac:	f8a0 2062 	strh.w	r2, [r0, #98]	; 0x62
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    59b0:	4354      	muls	r4, r2
					      conn->supervision_reload *
    59b2:	227d      	movs	r2, #125	; 0x7d
    59b4:	4362      	muls	r2, r4
					      125 / 1000;
    59b6:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    59ba:	fb92 f2f4 	sdiv	r2, r2, r4
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    59be:	f8a0 2066 	strh.w	r2, [r0, #102]	; 0x66
		/* conn->llcp.conn_upd.instant     = 0; */
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    59c2:	f890 2060 	ldrb.w	r2, [r0, #96]	; 0x60
		conn->llcp.conn_upd.win_size = 1;
    59c6:	2501      	movs	r5, #1
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    59c8:	f365 0201 	bfi	r2, r5, #0, #2
		conn->llcp.conn_upd.is_internal = 1;
    59cc:	b2d2      	uxtb	r2, r2
		conn->llcp.conn_upd.win_offset_us = 0;
    59ce:	2300      	movs	r3, #0
		conn->llcp.conn_upd.is_internal = 1;
    59d0:	f042 0204 	orr.w	r2, r2, #4

		conn->llcp_type = LLCP_CONN_UPD;
		conn->llcp_ack--;
    59d4:	3901      	subs	r1, #1
		conn->llcp.conn_upd.win_size = 1;
    59d6:	f880 5070 	strb.w	r5, [r0, #112]	; 0x70
		conn->llcp.conn_upd.win_offset_us = 0;
    59da:	66c3      	str	r3, [r0, #108]	; 0x6c
		conn->llcp.conn_upd.is_internal = 1;
    59dc:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
		conn->llcp_ack--;
    59e0:	f880 105d 	strb.w	r1, [r0, #93]	; 0x5d
		conn->llcp_type = LLCP_CONN_UPD;
    59e4:	f880 505e 	strb.w	r5, [r0, #94]	; 0x5e

		return 0;
    59e8:	4618      	mov	r0, r3
    59ea:	bd30      	pop	{r4, r5, pc}
		return 1;
    59ec:	2001      	movs	r0, #1
    59ee:	bd30      	pop	{r4, r5, pc}
		return 0;
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	}

	return 2;
    59f0:	2002      	movs	r0, #2
}
    59f2:	bd30      	pop	{r4, r5, pc}

000059f4 <tx_cmplt_get>:
	return 0;
}
#endif /* CONFIG_BT_CTLR_PHY */

static u8_t tx_cmplt_get(u16_t *handle, u8_t *first, u8_t last)
{
    59f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t _first;
	u8_t cmplt;

	_first = *first;
    59f8:	780c      	ldrb	r4, [r1, #0]
	if (_first == last) {
    59fa:	4294      	cmp	r4, r2
{
    59fc:	4681      	mov	r9, r0
    59fe:	460f      	mov	r7, r1
    5a00:	4690      	mov	r8, r2
	if (_first == last) {
    5a02:	d03d      	beq.n	5a80 <tx_cmplt_get+0x8c>
		return 0;
	}

	cmplt = 0;
	*handle = _radio.pkt_release[_first].handle;
    5a04:	4e1f      	ldr	r6, [pc, #124]	; (5a84 <tx_cmplt_get+0x90>)
    5a06:	f8d6 36fc 	ldr.w	r3, [r6, #1788]	; 0x6fc
    5a0a:	f833 3034 	ldrh.w	r3, [r3, r4, lsl #3]
    5a0e:	8003      	strh	r3, [r0, #0]
	cmplt = 0;
    5a10:	2500      	movs	r5, #0
			_radio.pkt_release[_first].node_tx = (void *)1;

			cmplt++;
		} else {
			/* ctrl packet, hence not num cmplt */
			_radio.pkt_release[_first].node_tx = (void *)2;
    5a12:	f04f 0b02 	mov.w	fp, #2
		}

		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    5a16:	f506 6ade 	add.w	sl, r6, #1776	; 0x6f0
		if (*handle != _radio.pkt_release[_first].handle) {
    5a1a:	b222      	sxth	r2, r4
    5a1c:	f8d6 06fc 	ldr.w	r0, [r6, #1788]	; 0x6fc
    5a20:	f8b9 e000 	ldrh.w	lr, [r9]
    5a24:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    5a28:	f830 2032 	ldrh.w	r2, [r0, r2, lsl #3]
    5a2c:	4596      	cmp	lr, r2
    5a2e:	d120      	bne.n	5a72 <tx_cmplt_get+0x7e>
		node_tx = _radio.pkt_release[_first].node_tx;
    5a30:	6848      	ldr	r0, [r1, #4]
		if ((!node_tx) || (node_tx == (void *)1) ||
    5a32:	2801      	cmp	r0, #1
    5a34:	f020 0303 	bic.w	r3, r0, #3
    5a38:	d90a      	bls.n	5a50 <tx_cmplt_get+0x5c>
    5a3a:	b1f3      	cbz	r3, 5a7a <tx_cmplt_get+0x86>
		    ((((u32_t)node_tx & ~(0x00000003)) != 0) &&
    5a3c:	1d02      	adds	r2, r0, #4
    5a3e:	d01c      	beq.n	5a7a <tx_cmplt_get+0x86>
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    5a40:	7942      	ldrb	r2, [r0, #5]
    5a42:	b1d2      	cbz	r2, 5a7a <tx_cmplt_get+0x86>
		     ((pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_START) ||
    5a44:	7902      	ldrb	r2, [r0, #4]
    5a46:	f002 0203 	and.w	r2, r2, #3
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    5a4a:	3a01      	subs	r2, #1
    5a4c:	2a01      	cmp	r2, #1
    5a4e:	d814      	bhi.n	5a7a <tx_cmplt_get+0x86>
			_radio.pkt_release[_first].node_tx = (void *)1;
    5a50:	2201      	movs	r2, #1
			cmplt++;
    5a52:	4415      	add	r5, r2
			_radio.pkt_release[_first].node_tx = (void *)1;
    5a54:	604a      	str	r2, [r1, #4]
			cmplt++;
    5a56:	b2ed      	uxtb	r5, r5
		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
    5a58:	b113      	cbz	r3, 5a60 <tx_cmplt_get+0x6c>
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    5a5a:	4651      	mov	r1, sl
    5a5c:	f7fd ffdb 	bl	3a16 <mem_release>
		}

		_first = _first + 1;
    5a60:	3401      	adds	r4, #1
		if (_first == _radio.packet_tx_count) {
    5a62:	f896 2700 	ldrb.w	r2, [r6, #1792]	; 0x700
		_first = _first + 1;
    5a66:	b2e4      	uxtb	r4, r4
			_first = 0;
    5a68:	42a2      	cmp	r2, r4
    5a6a:	bf08      	it	eq
    5a6c:	2400      	moveq	r4, #0
		}

	} while (_first != last);
    5a6e:	4544      	cmp	r4, r8
    5a70:	d1d3      	bne.n	5a1a <tx_cmplt_get+0x26>

	*first = _first;
    5a72:	703c      	strb	r4, [r7, #0]

	return cmplt;
}
    5a74:	4628      	mov	r0, r5
    5a76:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			_radio.pkt_release[_first].node_tx = (void *)2;
    5a7a:	f8c1 b004 	str.w	fp, [r1, #4]
    5a7e:	e7eb      	b.n	5a58 <tx_cmplt_get+0x64>
		return 0;
    5a80:	2500      	movs	r5, #0
    5a82:	e7f7      	b.n	5a74 <tx_cmplt_get+0x80>
    5a84:	200009f8 	.word	0x200009f8

00005a88 <connection_get>:
{
    5a88:	b510      	push	{r4, lr}
	if (handle < _radio.connection_count) {
    5a8a:	4b09      	ldr	r3, [pc, #36]	; (5ab0 <connection_get+0x28>)
    5a8c:	f893 26a4 	ldrb.w	r2, [r3, #1700]	; 0x6a4
    5a90:	4282      	cmp	r2, r0
{
    5a92:	4604      	mov	r4, r0
	if (handle < _radio.connection_count) {
    5a94:	d90a      	bls.n	5aac <connection_get+0x24>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE, handle);
    5a96:	4602      	mov	r2, r0
    5a98:	f44f 7182 	mov.w	r1, #260	; 0x104
    5a9c:	f8d3 069c 	ldr.w	r0, [r3, #1692]	; 0x69c
    5aa0:	f7fd ffce 	bl	3a40 <mem_get>
		if ((conn) && (conn->handle == handle)) {
    5aa4:	b110      	cbz	r0, 5aac <connection_get+0x24>
    5aa6:	8c03      	ldrh	r3, [r0, #32]
    5aa8:	42a3      	cmp	r3, r4
    5aaa:	d000      	beq.n	5aae <connection_get+0x26>
	return 0;
    5aac:	2000      	movs	r0, #0
}
    5aae:	bd10      	pop	{r4, pc}
    5ab0:	200009f8 	.word	0x200009f8

00005ab4 <role_disable>:
{
    5ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5ab8:	b086      	sub	sp, #24
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    5aba:	2302      	movs	r3, #2
	switch (ticker_id_primary) {
    5abc:	2805      	cmp	r0, #5
{
    5abe:	4605      	mov	r5, r0
    5ac0:	460f      	mov	r7, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    5ac2:	9302      	str	r3, [sp, #8]
	switch (ticker_id_primary) {
    5ac4:	d00c      	beq.n	5ae0 <role_disable+0x2c>
    5ac6:	2806      	cmp	r0, #6
    5ac8:	d036      	beq.n	5b38 <role_disable+0x84>
		if (ticker_id_primary >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    5aca:	d93b      	bls.n	5b44 <role_disable+0x90>
			conn_handle = ticker_id_primary -
    5acc:	3807      	subs	r0, #7
			conn = connection_get(conn_handle);
    5ace:	b280      	uxth	r0, r0
    5ad0:	f7ff ffda 	bl	5a88 <connection_get>
			if (!conn) {
    5ad4:	2800      	cmp	r0, #0
    5ad6:	f000 80f3 	beq.w	5cc0 <role_disable+0x20c>
			ticks_active_to_start =
    5ada:	e890 0140 	ldmia.w	r0, {r6, r8}
		break;
    5ade:	e00f      	b.n	5b00 <role_disable+0x4c>
		ticks_xtal_to_start =
    5ae0:	4b78      	ldr	r3, [pc, #480]	; (5cc4 <role_disable+0x210>)
    5ae2:	699e      	ldr	r6, [r3, #24]
		ticks_active_to_start =
    5ae4:	f8d3 801c 	ldr.w	r8, [r3, #28]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    5ae8:	ab02      	add	r3, sp, #8
    5aea:	9300      	str	r3, [sp, #0]
    5aec:	460a      	mov	r2, r1
    5aee:	4b76      	ldr	r3, [pc, #472]	; (5cc8 <role_disable+0x214>)
    5af0:	2103      	movs	r1, #3
    5af2:	2000      	movs	r0, #0
    5af4:	f7fe fe80 	bl	47f8 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    5af8:	2802      	cmp	r0, #2
    5afa:	d00b      	beq.n	5b14 <role_disable+0x60>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    5afc:	9b02      	ldr	r3, [sp, #8]
    5afe:	b96b      	cbnz	r3, 5b1c <role_disable+0x68>
	LL_ASSERT(!_radio.ticker_id_stop);
    5b00:	4c70      	ldr	r4, [pc, #448]	; (5cc4 <role_disable+0x210>)
    5b02:	7ca3      	ldrb	r3, [r4, #18]
    5b04:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    5b08:	b1fb      	cbz	r3, 5b4a <role_disable+0x96>
    5b0a:	4a70      	ldr	r2, [pc, #448]	; (5ccc <role_disable+0x218>)
    5b0c:	4970      	ldr	r1, [pc, #448]	; (5cd0 <role_disable+0x21c>)
    5b0e:	e00a      	b.n	5b26 <role_disable+0x72>
				cpu_sleep();
    5b10:	f7ff fed4 	bl	58bc <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
    5b14:	9b02      	ldr	r3, [sp, #8]
    5b16:	2b02      	cmp	r3, #2
    5b18:	d0fa      	beq.n	5b10 <role_disable+0x5c>
    5b1a:	e7ef      	b.n	5afc <role_disable+0x48>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    5b1c:	9b02      	ldr	r3, [sp, #8]
    5b1e:	2b01      	cmp	r3, #1
    5b20:	d0ee      	beq.n	5b00 <role_disable+0x4c>
    5b22:	4a6a      	ldr	r2, [pc, #424]	; (5ccc <role_disable+0x218>)
    5b24:	496b      	ldr	r1, [pc, #428]	; (5cd4 <role_disable+0x220>)
			LL_ASSERT(0);
    5b26:	2003      	movs	r0, #3
    5b28:	f7fc fb6a 	bl	2200 <bt_log>
    5b2c:	4040      	eors	r0, r0
    5b2e:	f380 8811 	msr	BASEPRI, r0
    5b32:	f04f 0004 	mov.w	r0, #4
    5b36:	df02      	svc	2
		ticks_xtal_to_start =
    5b38:	4b62      	ldr	r3, [pc, #392]	; (5cc4 <role_disable+0x210>)
    5b3a:	f8d3 663c 	ldr.w	r6, [r3, #1596]	; 0x63c
		ticks_active_to_start =
    5b3e:	f8d3 8640 	ldr.w	r8, [r3, #1600]	; 0x640
		break;
    5b42:	e7dd      	b.n	5b00 <role_disable+0x4c>
			LL_ASSERT(0);
    5b44:	4a61      	ldr	r2, [pc, #388]	; (5ccc <role_disable+0x218>)
    5b46:	4964      	ldr	r1, [pc, #400]	; (5cd8 <role_disable+0x224>)
    5b48:	e7ed      	b.n	5b26 <role_disable+0x72>
	ret_cb = TICKER_STATUS_BUSY;
    5b4a:	ab06      	add	r3, sp, #24
    5b4c:	2202      	movs	r2, #2
	_radio.ticker_id_stop = ticker_id_primary;
    5b4e:	74a5      	strb	r5, [r4, #18]
	ret_cb = TICKER_STATUS_BUSY;
    5b50:	f843 2d10 	str.w	r2, [r3, #-16]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    5b54:	2103      	movs	r1, #3
    5b56:	9300      	str	r3, [sp, #0]
    5b58:	462a      	mov	r2, r5
    5b5a:	4b5b      	ldr	r3, [pc, #364]	; (5cc8 <role_disable+0x214>)
    5b5c:	f7fe fe4c 	bl	47f8 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    5b60:	2802      	cmp	r0, #2
    5b62:	d020      	beq.n	5ba6 <role_disable+0xf2>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
    5b64:	9b02      	ldr	r3, [sp, #8]
    5b66:	2b00      	cmp	r3, #0
    5b68:	d15a      	bne.n	5c20 <role_disable+0x16c>
	if ((_radio.ticker_id_prepare == ticker_id_primary)
    5b6a:	7c23      	ldrb	r3, [r4, #16]
    5b6c:	429d      	cmp	r5, r3
    5b6e:	d002      	beq.n	5b76 <role_disable+0xc2>
	    || (_radio.ticker_id_event == ticker_id_primary)) {
    5b70:	7c63      	ldrb	r3, [r4, #17]
    5b72:	429d      	cmp	r5, r3
    5b74:	d150      	bne.n	5c18 <role_disable+0x164>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
    5b76:	ab06      	add	r3, sp, #24
    5b78:	2202      	movs	r2, #2
    5b7a:	f843 2d0c 	str.w	r2, [r3, #-12]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    5b7e:	2200      	movs	r2, #0
    5b80:	9300      	str	r3, [sp, #0]
    5b82:	2103      	movs	r1, #3
    5b84:	4b50      	ldr	r3, [pc, #320]	; (5cc8 <role_disable+0x214>)
    5b86:	4610      	mov	r0, r2
    5b88:	f7fe fe36 	bl	47f8 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    5b8c:	2802      	cmp	r0, #2
    5b8e:	d118      	bne.n	5bc2 <role_disable+0x10e>
		mayfly_enable(RADIO_TICKER_USER_ID_APP,
    5b90:	2201      	movs	r2, #1
    5b92:	4611      	mov	r1, r2
    5b94:	2003      	movs	r0, #3
    5b96:	f7fd ffb5 	bl	3b04 <mayfly_enable>
		LL_ASSERT(ret_cb_evt != TICKER_STATUS_BUSY);
    5b9a:	9b03      	ldr	r3, [sp, #12]
    5b9c:	2b02      	cmp	r3, #2
    5b9e:	d110      	bne.n	5bc2 <role_disable+0x10e>
    5ba0:	4a4e      	ldr	r2, [pc, #312]	; (5cdc <role_disable+0x228>)
    5ba2:	494f      	ldr	r1, [pc, #316]	; (5ce0 <role_disable+0x22c>)
    5ba4:	e7bf      	b.n	5b26 <role_disable+0x72>
		if (_radio.ticker_id_event == ticker_id_primary) {
    5ba6:	7c63      	ldrb	r3, [r4, #17]
    5ba8:	429d      	cmp	r5, r3
    5baa:	d104      	bne.n	5bb6 <role_disable+0x102>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    5bac:	2201      	movs	r2, #1
    5bae:	4611      	mov	r1, r2
    5bb0:	2003      	movs	r0, #3
    5bb2:	f7fd ffa7 	bl	3b04 <mayfly_enable>
		while (ret_cb == TICKER_STATUS_BUSY) {
    5bb6:	9b02      	ldr	r3, [sp, #8]
    5bb8:	2b02      	cmp	r3, #2
    5bba:	d1d3      	bne.n	5b64 <role_disable+0xb0>
			cpu_sleep();
    5bbc:	f7ff fe7e 	bl	58bc <cpu_sleep>
    5bc0:	e7f9      	b.n	5bb6 <role_disable+0x102>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
    5bc2:	9803      	ldr	r0, [sp, #12]
    5bc4:	2800      	cmp	r0, #0
    5bc6:	d141      	bne.n	5c4c <role_disable+0x198>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
    5bc8:	2302      	movs	r3, #2
    5bca:	9304      	str	r3, [sp, #16]
		LL_ASSERT(_radio.ticker_id_prepare);
    5bcc:	7c23      	ldrb	r3, [r4, #16]
    5bce:	b913      	cbnz	r3, 5bd6 <role_disable+0x122>
    5bd0:	4a42      	ldr	r2, [pc, #264]	; (5cdc <role_disable+0x228>)
    5bd2:	4944      	ldr	r1, [pc, #272]	; (5ce4 <role_disable+0x230>)
    5bd4:	e7a7      	b.n	5b26 <role_disable+0x72>
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    5bd6:	ab04      	add	r3, sp, #16
    5bd8:	9300      	str	r3, [sp, #0]
    5bda:	2201      	movs	r2, #1
    5bdc:	4b3a      	ldr	r3, [pc, #232]	; (5cc8 <role_disable+0x214>)
		_radio.ticker_id_prepare = 0;
    5bde:	7420      	strb	r0, [r4, #16]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    5be0:	2103      	movs	r1, #3
    5be2:	f7fe fe09 	bl	47f8 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    5be6:	2802      	cmp	r0, #2
    5be8:	d10a      	bne.n	5c00 <role_disable+0x14c>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    5bea:	2201      	movs	r2, #1
    5bec:	4611      	mov	r1, r2
    5bee:	2003      	movs	r0, #3
    5bf0:	f7fd ff88 	bl	3b04 <mayfly_enable>
			LL_ASSERT(ret_cb_m0 != TICKER_STATUS_BUSY);
    5bf4:	9b04      	ldr	r3, [sp, #16]
    5bf6:	2b02      	cmp	r3, #2
    5bf8:	d102      	bne.n	5c00 <role_disable+0x14c>
    5bfa:	4a38      	ldr	r2, [pc, #224]	; (5cdc <role_disable+0x228>)
    5bfc:	493a      	ldr	r1, [pc, #232]	; (5ce8 <role_disable+0x234>)
    5bfe:	e792      	b.n	5b26 <role_disable+0x72>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
    5c00:	9a04      	ldr	r2, [sp, #16]
    5c02:	b99a      	cbnz	r2, 5c2c <role_disable+0x178>
			ticks_xtal_to_start &= ~XON_BITMASK;
    5c04:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
			if (ticks_active_to_start > ticks_xtal_to_start) {
    5c08:	45b0      	cmp	r8, r6
    5c0a:	d91d      	bls.n	5c48 <role_disable+0x194>
				ret = mayfly_enqueue(
    5c0c:	4b37      	ldr	r3, [pc, #220]	; (5cec <role_disable+0x238>)
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    5c0e:	4611      	mov	r1, r2
    5c10:	2003      	movs	r0, #3
    5c12:	f7fd ff9f 	bl	3b54 <mayfly_enqueue>
			LL_ASSERT(!ret);
    5c16:	b9a0      	cbnz	r0, 5c42 <role_disable+0x18e>
	if (!_radio.ticker_id_stop) {
    5c18:	7ca3      	ldrb	r3, [r4, #18]
    5c1a:	b90b      	cbnz	r3, 5c20 <role_disable+0x16c>
		ret_cb = TICKER_STATUS_FAILURE;
    5c1c:	2301      	movs	r3, #1
    5c1e:	9302      	str	r3, [sp, #8]
	_radio.ticker_id_stop = 0;
    5c20:	2300      	movs	r3, #0
    5c22:	74a3      	strb	r3, [r4, #18]
	return ret_cb;
    5c24:	9802      	ldr	r0, [sp, #8]
}
    5c26:	b006      	add	sp, #24
    5c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
    5c2c:	9b04      	ldr	r3, [sp, #16]
    5c2e:	2b01      	cmp	r3, #1
    5c30:	d144      	bne.n	5cbc <role_disable+0x208>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    5c32:	2200      	movs	r2, #0
    5c34:	4611      	mov	r1, r2
    5c36:	4b2d      	ldr	r3, [pc, #180]	; (5cec <role_disable+0x238>)
    5c38:	2003      	movs	r0, #3
    5c3a:	f7fd ff8b 	bl	3b54 <mayfly_enqueue>
			LL_ASSERT(!ret);
    5c3e:	4602      	mov	r2, r0
    5c40:	b110      	cbz	r0, 5c48 <role_disable+0x194>
			LL_ASSERT(!ret);
    5c42:	4a26      	ldr	r2, [pc, #152]	; (5cdc <role_disable+0x228>)
    5c44:	492a      	ldr	r1, [pc, #168]	; (5cf0 <role_disable+0x23c>)
    5c46:	e76e      	b.n	5b26 <role_disable+0x72>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    5c48:	4b2a      	ldr	r3, [pc, #168]	; (5cf4 <role_disable+0x240>)
    5c4a:	e7e0      	b.n	5c0e <role_disable+0x15a>
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
    5c4c:	9d03      	ldr	r5, [sp, #12]
    5c4e:	2d01      	cmp	r5, #1
    5c50:	d134      	bne.n	5cbc <role_disable+0x208>
		if (ticker_id_stop != TICKER_NULL) {
    5c52:	2fff      	cmp	r7, #255	; 0xff
    5c54:	d01f      	beq.n	5c96 <role_disable+0x1e2>
			u32_t volatile ret_cb_stop = TICKER_STATUS_BUSY;
    5c56:	ab06      	add	r3, sp, #24
    5c58:	2202      	movs	r2, #2
    5c5a:	f843 2d04 	str.w	r2, [r3, #-4]!
			ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    5c5e:	2103      	movs	r1, #3
    5c60:	9300      	str	r3, [sp, #0]
    5c62:	463a      	mov	r2, r7
    5c64:	4b18      	ldr	r3, [pc, #96]	; (5cc8 <role_disable+0x214>)
    5c66:	2000      	movs	r0, #0
    5c68:	f7fe fdc6 	bl	47f8 <ticker_stop>
			if (ret == TICKER_STATUS_BUSY) {
    5c6c:	2802      	cmp	r0, #2
    5c6e:	d10a      	bne.n	5c86 <role_disable+0x1d2>
				mayfly_enable(RADIO_TICKER_USER_ID_APP,
    5c70:	462a      	mov	r2, r5
    5c72:	4629      	mov	r1, r5
    5c74:	2003      	movs	r0, #3
    5c76:	f7fd ff45 	bl	3b04 <mayfly_enable>
				LL_ASSERT(ret_cb_stop != TICKER_STATUS_BUSY);
    5c7a:	9b05      	ldr	r3, [sp, #20]
    5c7c:	2b02      	cmp	r3, #2
    5c7e:	d102      	bne.n	5c86 <role_disable+0x1d2>
    5c80:	4a16      	ldr	r2, [pc, #88]	; (5cdc <role_disable+0x228>)
    5c82:	491d      	ldr	r1, [pc, #116]	; (5cf8 <role_disable+0x244>)
    5c84:	e74f      	b.n	5b26 <role_disable+0x72>
			LL_ASSERT((ret_cb_stop == TICKER_STATUS_SUCCESS) ||
    5c86:	9b05      	ldr	r3, [sp, #20]
    5c88:	b12b      	cbz	r3, 5c96 <role_disable+0x1e2>
    5c8a:	9b05      	ldr	r3, [sp, #20]
    5c8c:	2b01      	cmp	r3, #1
    5c8e:	d002      	beq.n	5c96 <role_disable+0x1e2>
    5c90:	4a12      	ldr	r2, [pc, #72]	; (5cdc <role_disable+0x228>)
    5c92:	491a      	ldr	r1, [pc, #104]	; (5cfc <role_disable+0x248>)
    5c94:	e747      	b.n	5b26 <role_disable+0x72>
		if (_radio.role != ROLE_NONE) {
    5c96:	7ce3      	ldrb	r3, [r4, #19]
    5c98:	2b00      	cmp	r3, #0
    5c9a:	d0bd      	beq.n	5c18 <role_disable+0x164>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    5c9c:	4b18      	ldr	r3, [pc, #96]	; (5d00 <role_disable+0x24c>)
    5c9e:	2204      	movs	r2, #4
    5ca0:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    5ca2:	2200      	movs	r2, #0
    5ca4:	4611      	mov	r1, r2
    5ca6:	2003      	movs	r0, #3
    5ca8:	f7fd ff54 	bl	3b54 <mayfly_enqueue>
			LL_ASSERT(!ret);
    5cac:	2800      	cmp	r0, #0
    5cae:	d1c8      	bne.n	5c42 <role_disable+0x18e>
			while (_radio.role != ROLE_NONE) {
    5cb0:	7ce3      	ldrb	r3, [r4, #19]
    5cb2:	2b00      	cmp	r3, #0
    5cb4:	d0b0      	beq.n	5c18 <role_disable+0x164>
				cpu_sleep();
    5cb6:	f7ff fe01 	bl	58bc <cpu_sleep>
    5cba:	e7f9      	b.n	5cb0 <role_disable+0x1fc>
		LL_ASSERT(0);
    5cbc:	4a07      	ldr	r2, [pc, #28]	; (5cdc <role_disable+0x228>)
    5cbe:	e742      	b.n	5b46 <role_disable+0x92>
				return 1;
    5cc0:	2001      	movs	r0, #1
    5cc2:	e7b0      	b.n	5c26 <role_disable+0x172>
    5cc4:	200009f8 	.word	0x200009f8
    5cc8:	00005901 	.word	0x00005901
    5ccc:	0000e668 	.word	0x0000e668
    5cd0:	0000eca0 	.word	0x0000eca0
    5cd4:	0000ec6c 	.word	0x0000ec6c
    5cd8:	0000d86b 	.word	0x0000d86b
    5cdc:	0000e654 	.word	0x0000e654
    5ce0:	0000eccc 	.word	0x0000eccc
    5ce4:	0000ecf1 	.word	0x0000ecf1
    5ce8:	0000ed1f 	.word	0x0000ed1f
    5cec:	20004d50 	.word	0x20004d50
    5cf0:	0000ed43 	.word	0x0000ed43
    5cf4:	20004df0 	.word	0x20004df0
    5cf8:	0000ed5d 	.word	0x0000ed5d
    5cfc:	0000ed83 	.word	0x0000ed83
    5d00:	20004d80 	.word	0x20004d80

00005d04 <chan_set>:
{
    5d04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	pdu = (void *)_radio.advertiser.adv_data.data
    5d08:	4b68      	ldr	r3, [pc, #416]	; (5eac <chan_set+0x1a8>)
    5d0a:	f893 222d 	ldrb.w	r2, [r3, #557]	; 0x22d
	if(pdu->type == PDU_ADV_TYPE_EXT_IND){
    5d0e:	eb02 2202 	add.w	r2, r2, r2, lsl #8
    5d12:	4413      	add	r3, r2
{
    5d14:	4604      	mov	r4, r0
	if(pdu->type == PDU_ADV_TYPE_EXT_IND){
    5d16:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
    5d1a:	f003 030f 	and.w	r3, r3, #15
    5d1e:	2b07      	cmp	r3, #7
    5d20:	f040 80b1 	bne.w	5e86 <chan_set+0x182>
		switch (chan) {
    5d24:	2826      	cmp	r0, #38	; 0x26
    5d26:	f8df b1c0 	ldr.w	fp, [pc, #448]	; 5ee8 <chan_set+0x1e4>
    5d2a:	d02f      	beq.n	5d8c <chan_set+0x88>
    5d2c:	2827      	cmp	r0, #39	; 0x27
    5d2e:	4f60      	ldr	r7, [pc, #384]	; (5eb0 <chan_set+0x1ac>)
    5d30:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 5eec <chan_set+0x1e8>
    5d34:	d034      	beq.n	5da0 <chan_set+0x9c>
    5d36:	2825      	cmp	r0, #37	; 0x25
    5d38:	d154      	bne.n	5de4 <chan_set+0xe0>
			stop_time_37 = k_cycle_get_32();
    5d3a:	f7fc f90b 	bl	1f54 <_timer_cycle_get_32>
    5d3e:	4b5d      	ldr	r3, [pc, #372]	; (5eb4 <chan_set+0x1b0>)
			cycles_spent_37 = stop_time_37 - start_time;
    5d40:	f8db 6000 	ldr.w	r6, [fp]
			stop_time_37 = k_cycle_get_32();
    5d44:	6018      	str	r0, [r3, #0]
			us_spent_37 = SYS_CLOCK_HW_CYCLES_TO_NS(cycles_spent_37)/1000;
    5d46:	683a      	ldr	r2, [r7, #0]
			cycles_spent_37 = stop_time_37 - start_time;
    5d48:	4b5b      	ldr	r3, [pc, #364]	; (5eb8 <chan_set+0x1b4>)
    5d4a:	1b86      	subs	r6, r0, r6
			us_spent_37 = SYS_CLOCK_HW_CYCLES_TO_NS(cycles_spent_37)/1000;
    5d4c:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
			cycles_spent_37 = stop_time_37 - start_time;
    5d50:	601e      	str	r6, [r3, #0]
			us_spent_37 = SYS_CLOCK_HW_CYCLES_TO_NS(cycles_spent_37)/1000;
    5d52:	fb82 2305 	smull	r2, r3, r2, r5
    5d56:	fba2 0106 	umull	r0, r1, r2, r6
    5d5a:	f8d8 2000 	ldr.w	r2, [r8]
    5d5e:	fb06 1103 	mla	r1, r6, r3, r1
    5d62:	17d3      	asrs	r3, r2, #31
    5d64:	f7fa fa80 	bl	268 <__aeabi_uldivmod>
    5d68:	4b54      	ldr	r3, [pc, #336]	; (5ebc <chan_set+0x1b8>)
    5d6a:	fbb0 f0f5 	udiv	r0, r0, r5
    5d6e:	6018      	str	r0, [r3, #0]
			start_time = k_cycle_get_32();
    5d70:	f7fc f8f0 	bl	1f54 <_timer_cycle_get_32>
    5d74:	f8cb 0000 	str.w	r0, [fp]
			start_time37= k_cycle_get_32();
    5d78:	f7fc f8ec 	bl	1f54 <_timer_cycle_get_32>
    5d7c:	4b50      	ldr	r3, [pc, #320]	; (5ec0 <chan_set+0x1bc>)
			pckt_send++;
    5d7e:	4a51      	ldr	r2, [pc, #324]	; (5ec4 <chan_set+0x1c0>)
			start_time37= k_cycle_get_32();
    5d80:	6018      	str	r0, [r3, #0]
			pckt_send++;
    5d82:	7813      	ldrb	r3, [r2, #0]
    5d84:	3301      	adds	r3, #1
    5d86:	7013      	strb	r3, [r2, #0]
			radio_freq_chan_set(2);
    5d88:	2002      	movs	r0, #2
    5d8a:	e071      	b.n	5e70 <chan_set+0x16c>
			start_time = k_cycle_get_32();
    5d8c:	f7fc f8e2 	bl	1f54 <_timer_cycle_get_32>
			pckt_send++;
    5d90:	4a4c      	ldr	r2, [pc, #304]	; (5ec4 <chan_set+0x1c0>)
			start_time = k_cycle_get_32();
    5d92:	f8cb 0000 	str.w	r0, [fp]
			pckt_send++;
    5d96:	7813      	ldrb	r3, [r2, #0]
    5d98:	3301      	adds	r3, #1
    5d9a:	7013      	strb	r3, [r2, #0]
			radio_freq_chan_set(26);
    5d9c:	201a      	movs	r0, #26
    5d9e:	e067      	b.n	5e70 <chan_set+0x16c>
			stop_time_39 = k_cycle_get_32();
    5da0:	f7fc f8d8 	bl	1f54 <_timer_cycle_get_32>
    5da4:	4b48      	ldr	r3, [pc, #288]	; (5ec8 <chan_set+0x1c4>)
			Time_difference = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_39 - start_time)/1000;
    5da6:	f8db 6000 	ldr.w	r6, [fp]
    5daa:	683a      	ldr	r2, [r7, #0]
			stop_time_39 = k_cycle_get_32();
    5dac:	6018      	str	r0, [r3, #0]
			Time_difference = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_39 - start_time)/1000;
    5dae:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    5db2:	fb82 2305 	smull	r2, r3, r2, r5
    5db6:	1b86      	subs	r6, r0, r6
    5db8:	fba6 0102 	umull	r0, r1, r6, r2
    5dbc:	f8d8 2000 	ldr.w	r2, [r8]
    5dc0:	fb06 1103 	mla	r1, r6, r3, r1
    5dc4:	17d3      	asrs	r3, r2, #31
    5dc6:	f7fa fa4f 	bl	268 <__aeabi_uldivmod>
    5dca:	4b40      	ldr	r3, [pc, #256]	; (5ecc <chan_set+0x1c8>)
    5dcc:	fbb0 f0f5 	udiv	r0, r0, r5
    5dd0:	6018      	str	r0, [r3, #0]
			pckt_send = 0;
    5dd2:	4b3c      	ldr	r3, [pc, #240]	; (5ec4 <chan_set+0x1c0>)
    5dd4:	2200      	movs	r2, #0
    5dd6:	701a      	strb	r2, [r3, #0]
			start_time = k_cycle_get_32();
    5dd8:	f7fc f8bc 	bl	1f54 <_timer_cycle_get_32>
    5ddc:	f8cb 0000 	str.w	r0, [fp]
			radio_freq_chan_set(80);
    5de0:	2050      	movs	r0, #80	; 0x50
    5de2:	e045      	b.n	5e70 <chan_set+0x16c>
			stop_time_aux1 = k_cycle_get_32();
    5de4:	f7fc f8b6 	bl	1f54 <_timer_cycle_get_32>
    5de8:	4b39      	ldr	r3, [pc, #228]	; (5ed0 <chan_set+0x1cc>)
    5dea:	683e      	ldr	r6, [r7, #0]
    5dec:	6018      	str	r0, [r3, #0]
			us_spent_aux1 = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_aux1 - start_time)/1000;
    5dee:	f8d8 3000 	ldr.w	r3, [r8]
    5df2:	4698      	mov	r8, r3
    5df4:	ea4f 79e3 	mov.w	r9, r3, asr #31
    5df8:	f8db 3000 	ldr.w	r3, [fp]
			us_spent_5 = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_aux1 - start_time_5)/1000;
    5dfc:	f8df b0f0 	ldr.w	fp, [pc, #240]	; 5ef0 <chan_set+0x1ec>
    5e00:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
    5e04:	fb86 670a 	smull	r6, r7, r6, sl
			us_spent_aux1 = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_aux1 - start_time)/1000;
    5e08:	1ac3      	subs	r3, r0, r3
			stop_time_aux1 = k_cycle_get_32();
    5e0a:	4605      	mov	r5, r0
			us_spent_aux1 = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_aux1 - start_time)/1000;
    5e0c:	fba3 0106 	umull	r0, r1, r3, r6
    5e10:	fb03 1107 	mla	r1, r3, r7, r1
    5e14:	4642      	mov	r2, r8
    5e16:	464b      	mov	r3, r9
    5e18:	f7fa fa26 	bl	268 <__aeabi_uldivmod>
    5e1c:	4b2d      	ldr	r3, [pc, #180]	; (5ed4 <chan_set+0x1d0>)
    5e1e:	fbb0 f0fa 	udiv	r0, r0, sl
    5e22:	6018      	str	r0, [r3, #0]
			us_spent_aux = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_aux1 - start_time37)/1000;
    5e24:	4b26      	ldr	r3, [pc, #152]	; (5ec0 <chan_set+0x1bc>)
    5e26:	681b      	ldr	r3, [r3, #0]
    5e28:	1aeb      	subs	r3, r5, r3
    5e2a:	fba3 0106 	umull	r0, r1, r3, r6
    5e2e:	fb03 1107 	mla	r1, r3, r7, r1
    5e32:	4642      	mov	r2, r8
    5e34:	464b      	mov	r3, r9
    5e36:	f7fa fa17 	bl	268 <__aeabi_uldivmod>
    5e3a:	4b27      	ldr	r3, [pc, #156]	; (5ed8 <chan_set+0x1d4>)
    5e3c:	fbb0 f0fa 	udiv	r0, r0, sl
    5e40:	6018      	str	r0, [r3, #0]
			us_spent_5 = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_aux1 - start_time_5)/1000;
    5e42:	f8db 3000 	ldr.w	r3, [fp]
    5e46:	1aed      	subs	r5, r5, r3
    5e48:	fba5 0106 	umull	r0, r1, r5, r6
    5e4c:	4642      	mov	r2, r8
    5e4e:	464b      	mov	r3, r9
    5e50:	fb05 1107 	mla	r1, r5, r7, r1
    5e54:	f7fa fa08 	bl	268 <__aeabi_uldivmod>
    5e58:	4b20      	ldr	r3, [pc, #128]	; (5edc <chan_set+0x1d8>)
    5e5a:	fbb0 f0fa 	udiv	r0, r0, sl
    5e5e:	6018      	str	r0, [r3, #0]
			start_time_5 = k_cycle_get_32();
    5e60:	f7fc f878 	bl	1f54 <_timer_cycle_get_32>
    5e64:	f8cb 0000 	str.w	r0, [fp]
			if (chan < 11) {
    5e68:	2c0a      	cmp	r4, #10
    5e6a:	d808      	bhi.n	5e7e <chan_set+0x17a>
				radio_freq_chan_set(4 + (2 * chan));
    5e6c:	1ca0      	adds	r0, r4, #2
				radio_freq_chan_set(28 + (2 * (chan - 11)));
    5e6e:	0040      	lsls	r0, r0, #1
    5e70:	f005 f88c 	bl	af8c <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
    5e74:	4620      	mov	r0, r4
}
    5e76:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	radio_whiten_iv_set(chan);
    5e7a:	f005 b88d 	b.w	af98 <radio_whiten_iv_set>
			} else if (chan < 40) {
    5e7e:	2c27      	cmp	r4, #39	; 0x27
    5e80:	d808      	bhi.n	5e94 <chan_set+0x190>
				radio_freq_chan_set(28 + (2 * (chan - 11)));
    5e82:	1ce0      	adds	r0, r4, #3
    5e84:	e7f3      	b.n	5e6e <chan_set+0x16a>
		switch (chan) {
    5e86:	2826      	cmp	r0, #38	; 0x26
    5e88:	d088      	beq.n	5d9c <chan_set+0x98>
    5e8a:	2827      	cmp	r0, #39	; 0x27
    5e8c:	d0a8      	beq.n	5de0 <chan_set+0xdc>
    5e8e:	2825      	cmp	r0, #37	; 0x25
    5e90:	d1ea      	bne.n	5e68 <chan_set+0x164>
    5e92:	e779      	b.n	5d88 <chan_set+0x84>
				LL_ASSERT(0);
    5e94:	4a12      	ldr	r2, [pc, #72]	; (5ee0 <chan_set+0x1dc>)
    5e96:	4913      	ldr	r1, [pc, #76]	; (5ee4 <chan_set+0x1e0>)
    5e98:	2003      	movs	r0, #3
    5e9a:	f7fc f9b1 	bl	2200 <bt_log>
    5e9e:	4040      	eors	r0, r0
    5ea0:	f380 8811 	msr	BASEPRI, r0
    5ea4:	f04f 0004 	mov.w	r0, #4
    5ea8:	df02      	svc	2
    5eaa:	bf00      	nop
    5eac:	200009f8 	.word	0x200009f8
    5eb0:	20004e6c 	.word	0x20004e6c
    5eb4:	20002bf0 	.word	0x20002bf0
    5eb8:	20002c10 	.word	0x20002c10
    5ebc:	20002c24 	.word	0x20002c24
    5ec0:	20002bec 	.word	0x20002bec
    5ec4:	20001144 	.word	0x20001144
    5ec8:	20002bf4 	.word	0x20002bf4
    5ecc:	20002c14 	.word	0x20002c14
    5ed0:	20002c1c 	.word	0x20002c1c
    5ed4:	20002bfc 	.word	0x20002bfc
    5ed8:	20002be8 	.word	0x20002be8
    5edc:	20002c20 	.word	0x20002c20
    5ee0:	0000e4d8 	.word	0x0000e4d8
    5ee4:	0000d86b 	.word	0x0000d86b
    5ee8:	20002bf8 	.word	0x20002bf8
    5eec:	20004e68 	.word	0x20004e68
    5ef0:	20002c08 	.word	0x20002c08

00005ef4 <adv_setup>:
{
    5ef4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (_radio.advertiser.adv_data.first !=
    5ef8:	4c7c      	ldr	r4, [pc, #496]	; (60ec <adv_setup+0x1f8>)
    5efa:	f894 322d 	ldrb.w	r3, [r4, #557]	; 0x22d
    5efe:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    5f02:	429a      	cmp	r2, r3
    5f04:	d006      	beq.n	5f14 <adv_setup+0x20>
		first = _radio.advertiser.adv_data.first + 1;
    5f06:	3301      	adds	r3, #1
    5f08:	b2db      	uxtb	r3, r3
			first = 0;
    5f0a:	2b02      	cmp	r3, #2
    5f0c:	bf08      	it	eq
    5f0e:	2300      	moveq	r3, #0
		_radio.advertiser.adv_data.first = first;
    5f10:	f884 322d 	strb.w	r3, [r4, #557]	; 0x22d
	if (_radio.advertiser.scan_data.first != _radio.
    5f14:	f894 3635 	ldrb.w	r3, [r4, #1589]	; 0x635
    5f18:	f894 2636 	ldrb.w	r2, [r4, #1590]	; 0x636
    5f1c:	429a      	cmp	r2, r3
    5f1e:	d006      	beq.n	5f2e <adv_setup+0x3a>
		first = _radio.advertiser.scan_data.first + 1;
    5f20:	3301      	adds	r3, #1
    5f22:	b2db      	uxtb	r3, r3
			first = 0;
    5f24:	2b02      	cmp	r3, #2
    5f26:	bf08      	it	eq
    5f28:	2300      	moveq	r3, #0
		_radio.advertiser.scan_data.first = first;
    5f2a:	f884 3635 	strb.w	r3, [r4, #1589]	; 0x635
	pdu = (void *)_radio.advertiser.adv_data.data
    5f2e:	f894 722d 	ldrb.w	r7, [r4, #557]	; 0x22d
    5f32:	eb07 2707 	add.w	r7, r7, r7, lsl #8
    5f36:	372b      	adds	r7, #43	; 0x2b
    5f38:	eb04 0907 	add.w	r9, r4, r7
	if(pdu->type == PDU_ADV_TYPE_EXT_IND){
    5f3c:	5de3      	ldrb	r3, [r4, r7]
    5f3e:	f003 030f 	and.w	r3, r3, #15
    5f42:	2b07      	cmp	r3, #7
    5f44:	d13a      	bne.n	5fbc <adv_setup+0xc8>
			if(h->adv_addr){
    5f46:	f899 2003 	ldrb.w	r2, [r9, #3]
		_radio.ext_advertiser.slot =  _radio.ext_advertiser.prim_interval;
    5f4a:	f8d4 3678 	ldr.w	r3, [r4, #1656]	; 0x678
    5f4e:	f8c4 3684 	str.w	r3, [r4, #1668]	; 0x684
			if(h->adv_addr){
    5f52:	07d5      	lsls	r5, r2, #31
				ptr += BDADDR_SIZE;
    5f54:	bf4c      	ite	mi
    5f56:	f109 050a 	addmi.w	r5, r9, #10
		ptr = (u8_t *)h + sizeof(*h);
    5f5a:	f109 0504 	addpl.w	r5, r9, #4
			if(h->tgt_addr){
    5f5e:	0796      	lsls	r6, r2, #30
				ptr += BDADDR_SIZE;
    5f60:	bf48      	it	mi
    5f62:	3506      	addmi	r5, #6
			if(h->adi){
    5f64:	0716      	lsls	r6, r2, #28
				ptr += sizeof(*adi_ptr);
    5f66:	bf48      	it	mi
    5f68:	3502      	addmi	r5, #2
			if(h->aux_ptr){
    5f6a:	06d2      	lsls	r2, r2, #27
    5f6c:	d526      	bpl.n	5fbc <adv_setup+0xc8>
				if((_radio.advertiser.chan_map & 0x07)== 0x07) {
    5f6e:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
    5f72:	f3c2 1202 	ubfx	r2, r2, #4, #3
    5f76:	2a07      	cmp	r2, #7
    5f78:	d177      	bne.n	606a <adv_setup+0x176>
					switch(chan_case){
    5f7a:	4a5d      	ldr	r2, [pc, #372]	; (60f0 <adv_setup+0x1fc>)
    5f7c:	7812      	ldrb	r2, [r2, #0]
    5f7e:	2a01      	cmp	r2, #1
    5f80:	d061      	beq.n	6046 <adv_setup+0x152>
    5f82:	d354      	bcc.n	602e <adv_setup+0x13a>
    5f84:	2a02      	cmp	r2, #2
    5f86:	d067      	beq.n	6058 <adv_setup+0x164>
				if(offset > 245700){
    5f88:	4a5a      	ldr	r2, [pc, #360]	; (60f4 <adv_setup+0x200>)
    5f8a:	78ae      	ldrb	r6, [r5, #2]
    5f8c:	f895 8000 	ldrb.w	r8, [r5]
    5f90:	2300      	movs	r3, #0
    5f92:	428b      	cmp	r3, r1
    5f94:	bf08      	it	eq
    5f96:	4282      	cmpeq	r2, r0
    5f98:	f080 8085 	bcs.w	60a6 <adv_setup+0x1b2>
					ap->offs = offset/300;
    5f9c:	f44f 7296 	mov.w	r2, #300	; 0x12c
    5fa0:	2300      	movs	r3, #0
    5fa2:	f7fa f961 	bl	268 <__aeabi_uldivmod>
    5fa6:	f026 061f 	bic.w	r6, r6, #31
    5faa:	7068      	strb	r0, [r5, #1]
    5fac:	f3c0 2004 	ubfx	r0, r0, #8, #5
    5fb0:	4330      	orrs	r0, r6
    5fb2:	70a8      	strb	r0, [r5, #2]
					ap->offs_units = EXT_ADV_AUX_PTR_OFFS_UNITS_300;
    5fb4:	f048 0880 	orr.w	r8, r8, #128	; 0x80
					ap->offs_units = EXT_ADV_AUX_PTR_OFFS_UNITS_30;
    5fb8:	f885 8000 	strb.w	r8, [r5]
		radio_pkt_tx_set(pdu);
    5fbc:	4648      	mov	r0, r9
    5fbe:	f005 f849 	bl	b054 <radio_pkt_tx_set>
		if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
    5fc2:	5de3      	ldrb	r3, [r4, r7]
    5fc4:	f003 030f 	and.w	r3, r3, #15
    5fc8:	2b02      	cmp	r3, #2
    5fca:	d07a      	beq.n	60c2 <adv_setup+0x1ce>
    5fcc:	2b07      	cmp	r3, #7
    5fce:	d078      	beq.n	60c2 <adv_setup+0x1ce>
			_radio.state = STATE_TX;
    5fd0:	2302      	movs	r3, #2
			radio_tmr_tifs_set(RADIO_TIFS);
    5fd2:	2096      	movs	r0, #150	; 0x96
			_radio.state = STATE_TX;
    5fd4:	7523      	strb	r3, [r4, #20]
			radio_tmr_tifs_set(RADIO_TIFS);
    5fd6:	f005 f947 	bl	b268 <radio_tmr_tifs_set>
			radio_switch_complete_and_rx(0);
    5fda:	2000      	movs	r0, #0
    5fdc:	f005 f8b4 	bl	b148 <radio_switch_complete_and_rx>
		bitmap = _radio.advertiser.chan_map_current;
    5fe0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    5fe4:	f3c3 0102 	ubfx	r1, r3, #0, #3
    5fe8:	b2cb      	uxtb	r3, r1
    5fea:	461d      	mov	r5, r3
		while ((bitmap & 0x01) == 0) {
    5fec:	2200      	movs	r2, #0
    5fee:	07ee      	lsls	r6, r5, #31
    5ff0:	b2d0      	uxtb	r0, r2
    5ff2:	f102 0201 	add.w	r2, r2, #1
    5ff6:	d569      	bpl.n	60cc <adv_setup+0x1d8>
		count++;
    5ff8:	4d3f      	ldr	r5, [pc, #252]	; (60f8 <adv_setup+0x204>)
    5ffa:	782a      	ldrb	r2, [r5, #0]
    5ffc:	3201      	adds	r2, #1
    5ffe:	702a      	strb	r2, [r5, #0]
			(_radio.advertiser.chan_map_current - 1);
    6000:	3b01      	subs	r3, #1
			_radio.advertiser.chan_map_current &=
    6002:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    6006:	400b      	ands	r3, r1
    6008:	f363 0202 	bfi	r2, r3, #0, #3
		if(chan == 0x02){
    600c:	2802      	cmp	r0, #2
			_radio.advertiser.chan_map_current &=
    600e:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
		if(chan == 0x02){
    6012:	d15d      	bne.n	60d0 <adv_setup+0x1dc>
			_radio.ext_advertiser.current_slot++;
    6014:	f894 3681 	ldrb.w	r3, [r4, #1665]	; 0x681
    6018:	3301      	adds	r3, #1
    601a:	f884 3681 	strb.w	r3, [r4, #1665]	; 0x681
			chan_case = 0;
    601e:	4b34      	ldr	r3, [pc, #208]	; (60f0 <adv_setup+0x1fc>)
    6020:	2200      	movs	r2, #0
    6022:	701a      	strb	r2, [r3, #0]
*/			chan_set(37 + chan);
    6024:	3025      	adds	r0, #37	; 0x25
}
    6026:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
*/			chan_set(37 + chan);
    602a:	f7ff be6b 	b.w	5d04 <chan_set>
						offset = (_radio.ext_advertiser.chan_37 - ( _radio.ext_advertiser.slot *_radio.ext_advertiser.max_skip *_radio.ext_advertiser.current_slot ));  
    602e:	f894 2681 	ldrb.w	r2, [r4, #1665]	; 0x681
    6032:	f894 0680 	ldrb.w	r0, [r4, #1664]	; 0x680
    6036:	fb10 f002 	smulbb	r0, r0, r2
    603a:	f8d4 2688 	ldr.w	r2, [r4, #1672]	; 0x688
						offset = (_radio.ext_advertiser.chan_39 -( _radio.ext_advertiser.slot *_radio.ext_advertiser.max_skip *_radio.ext_advertiser.current_slot ));		
    603e:	fb03 2010 	mls	r0, r3, r0, r2
						offset = (_radio.ext_advertiser.chan_37 - (_radio.ext_advertiser.slot << 2));
    6042:	2100      	movs	r1, #0
						break;
    6044:	e7a0      	b.n	5f88 <adv_setup+0x94>
						offset = (_radio.ext_advertiser.chan_38 -( _radio.ext_advertiser.slot *_radio.ext_advertiser.max_skip *_radio.ext_advertiser.current_slot ));		
    6046:	f894 2681 	ldrb.w	r2, [r4, #1665]	; 0x681
    604a:	f894 0680 	ldrb.w	r0, [r4, #1664]	; 0x680
    604e:	fb10 f002 	smulbb	r0, r0, r2
    6052:	f8d4 268c 	ldr.w	r2, [r4, #1676]	; 0x68c
    6056:	e7f2      	b.n	603e <adv_setup+0x14a>
						offset = (_radio.ext_advertiser.chan_39 -( _radio.ext_advertiser.slot *_radio.ext_advertiser.max_skip *_radio.ext_advertiser.current_slot ));		
    6058:	f894 2681 	ldrb.w	r2, [r4, #1665]	; 0x681
    605c:	f894 0680 	ldrb.w	r0, [r4, #1664]	; 0x680
    6060:	fb10 f002 	smulbb	r0, r0, r2
    6064:	f8d4 2690 	ldr.w	r2, [r4, #1680]	; 0x690
    6068:	e7e9      	b.n	603e <adv_setup+0x14a>
			switch(_radio.ext_advertiser.current_slot){
    606a:	f894 2681 	ldrb.w	r2, [r4, #1665]	; 0x681
    606e:	2a04      	cmp	r2, #4
    6070:	d88a      	bhi.n	5f88 <adv_setup+0x94>
    6072:	e8df f002 	tbb	[pc, r2]
    6076:	0603      	.short	0x0603
    6078:	0f0a      	.short	0x0f0a
    607a:	13          	.byte	0x13
    607b:	00          	.byte	0x00
						offset = (_radio.ext_advertiser.chan_37) ;
    607c:	f8d4 0688 	ldr.w	r0, [r4, #1672]	; 0x688
    6080:	e7df      	b.n	6042 <adv_setup+0x14e>
						offset = (_radio.ext_advertiser.chan_37 -_radio.ext_advertiser.slot );
    6082:	f8d4 0688 	ldr.w	r0, [r4, #1672]	; 0x688
    6086:	1ac0      	subs	r0, r0, r3
    6088:	e7db      	b.n	6042 <adv_setup+0x14e>
						offset = (_radio.ext_advertiser.chan_37 - (_radio.ext_advertiser.slot << 1));
    608a:	f8d4 0688 	ldr.w	r0, [r4, #1672]	; 0x688
						offset = (_radio.ext_advertiser.chan_37 - ((_radio.ext_advertiser.slot << 1) + (_radio.ext_advertiser.slot << 0)));
    608e:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
    6092:	e7d6      	b.n	6042 <adv_setup+0x14e>
    6094:	f8d4 0688 	ldr.w	r0, [r4, #1672]	; 0x688
    6098:	1ac0      	subs	r0, r0, r3
    609a:	e7f8      	b.n	608e <adv_setup+0x19a>
						offset = (_radio.ext_advertiser.chan_37 - (_radio.ext_advertiser.slot << 2));
    609c:	f8d4 0688 	ldr.w	r0, [r4, #1672]	; 0x688
    60a0:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
    60a4:	e7cd      	b.n	6042 <adv_setup+0x14e>
					ap->offs = offset /30;
    60a6:	221e      	movs	r2, #30
    60a8:	2300      	movs	r3, #0
    60aa:	f7fa f8dd 	bl	268 <__aeabi_uldivmod>
    60ae:	f026 061f 	bic.w	r6, r6, #31
    60b2:	7068      	strb	r0, [r5, #1]
    60b4:	f3c0 2004 	ubfx	r0, r0, #8, #5
    60b8:	4306      	orrs	r6, r0
    60ba:	70ae      	strb	r6, [r5, #2]
					ap->offs_units = EXT_ADV_AUX_PTR_OFFS_UNITS_30;
    60bc:	f36f 18c7 	bfc	r8, #7, #1
    60c0:	e77a      	b.n	5fb8 <adv_setup+0xc4>
			_radio.state = STATE_CLOSE;
    60c2:	2303      	movs	r3, #3
    60c4:	7523      	strb	r3, [r4, #20]
			radio_switch_complete_and_disable();
    60c6:	f005 f855 	bl	b174 <radio_switch_complete_and_disable>
    60ca:	e789      	b.n	5fe0 <adv_setup+0xec>
			bitmap >>= 1;
    60cc:	086d      	lsrs	r5, r5, #1
    60ce:	e78e      	b.n	5fee <adv_setup+0xfa>
		}else if(! _radio.advertiser.chan_map_current){
    60d0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    60d4:	075b      	lsls	r3, r3, #29
    60d6:	d1a5      	bne.n	6024 <adv_setup+0x130>
			_radio.ext_advertiser.current_slot++;
    60d8:	f894 3681 	ldrb.w	r3, [r4, #1665]	; 0x681
			chan_case++;
    60dc:	4a04      	ldr	r2, [pc, #16]	; (60f0 <adv_setup+0x1fc>)
			_radio.ext_advertiser.current_slot++;
    60de:	3301      	adds	r3, #1
    60e0:	f884 3681 	strb.w	r3, [r4, #1665]	; 0x681
			chan_case++;
    60e4:	7813      	ldrb	r3, [r2, #0]
    60e6:	3301      	adds	r3, #1
    60e8:	7013      	strb	r3, [r2, #0]
    60ea:	e79b      	b.n	6024 <adv_setup+0x130>
    60ec:	200009f8 	.word	0x200009f8
    60f0:	20001110 	.word	0x20001110
    60f4:	0003bfc4 	.word	0x0003bfc4
    60f8:	20001111 	.word	0x20001111
    60fc:	00000000 	.word	0x00000000

00006100 <sched_after_mstr_free_slot_get>:
{
    6100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6104:	b08b      	sub	sp, #44	; 0x2c
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    6106:	2400      	movs	r4, #0
	ticker_id = ticker_id_prev = 0xff;
    6108:	25ff      	movs	r5, #255	; 0xff
				  _radio.connection_count)) {
    610a:	f8df 912c 	ldr.w	r9, [pc, #300]	; 6238 <sched_after_mstr_free_slot_get+0x138>
	ticker_id = ticker_id_prev = 0xff;
    610e:	f88d 501f 	strb.w	r5, [sp, #31]
{
    6112:	4680      	mov	r8, r0
    6114:	4693      	mov	fp, r2
    6116:	461f      	mov	r7, r3
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(RADIO_TICKER_JITTER_US << 3);
    6118:	f101 0a04 	add.w	sl, r1, #4
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    611c:	601c      	str	r4, [r3, #0]
    611e:	9408      	str	r4, [sp, #32]
    6120:	4626      	mov	r6, r4
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    6122:	2302      	movs	r3, #2
    6124:	9309      	str	r3, [sp, #36]	; 0x24
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    6126:	ab09      	add	r3, sp, #36	; 0x24
    6128:	9302      	str	r3, [sp, #8]
    612a:	4b3f      	ldr	r3, [pc, #252]	; (6228 <sched_after_mstr_free_slot_get+0x128>)
    612c:	9301      	str	r3, [sp, #4]
    612e:	ab08      	add	r3, sp, #32
    6130:	9300      	str	r3, [sp, #0]
    6132:	f10d 021f 	add.w	r2, sp, #31
    6136:	465b      	mov	r3, fp
    6138:	4641      	mov	r1, r8
    613a:	2000      	movs	r0, #0
    613c:	f7fe fb98 	bl	4870 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    6140:	2802      	cmp	r0, #2
    6142:	d010      	beq.n	6166 <sched_after_mstr_free_slot_get+0x66>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    6144:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6146:	b193      	cbz	r3, 616e <sched_after_mstr_free_slot_get+0x6e>
    6148:	4a38      	ldr	r2, [pc, #224]	; (622c <sched_after_mstr_free_slot_get+0x12c>)
    614a:	4939      	ldr	r1, [pc, #228]	; (6230 <sched_after_mstr_free_slot_get+0x130>)
    614c:	2003      	movs	r0, #3
    614e:	f7fc f857 	bl	2200 <bt_log>
    6152:	4040      	eors	r0, r0
    6154:	f380 8811 	msr	BASEPRI, r0
    6158:	f04f 0004 	mov.w	r0, #4
    615c:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    615e:	4641      	mov	r1, r8
    6160:	2000      	movs	r0, #0
    6162:	f7fe fc03 	bl	496c <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    6166:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6168:	2b02      	cmp	r3, #2
    616a:	d0f8      	beq.n	615e <sched_after_mstr_free_slot_get+0x5e>
    616c:	e7ea      	b.n	6144 <sched_after_mstr_free_slot_get+0x44>
		if (ticker_id == 0xff) {
    616e:	f89d 201f 	ldrb.w	r2, [sp, #31]
    6172:	2aff      	cmp	r2, #255	; 0xff
    6174:	d04e      	beq.n	6214 <sched_after_mstr_free_slot_get+0x114>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    6176:	2a06      	cmp	r2, #6
    6178:	d9d3      	bls.n	6122 <sched_after_mstr_free_slot_get+0x22>
				  _radio.connection_count)) {
    617a:	f899 36a4 	ldrb.w	r3, [r9, #1700]	; 0x6a4
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    617e:	3307      	adds	r3, #7
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    6180:	429a      	cmp	r2, r3
    6182:	dace      	bge.n	6122 <sched_after_mstr_free_slot_get+0x22>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    6184:	3a07      	subs	r2, #7
    6186:	b292      	uxth	r2, r2
    6188:	f44f 7182 	mov.w	r1, #260	; 0x104
    618c:	f8d9 069c 	ldr.w	r0, [r9, #1692]	; 0x69c
    6190:	f7fd fc56 	bl	3a40 <mem_get>
		if (conn && !conn->role) {
    6194:	2800      	cmp	r0, #0
    6196:	d0c4      	beq.n	6122 <sched_after_mstr_free_slot_get+0x22>
    6198:	f990 301d 	ldrsb.w	r3, [r0, #29]
    619c:	2b00      	cmp	r3, #0
    619e:	dbc0      	blt.n	6122 <sched_after_mstr_free_slot_get+0x22>
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    61a0:	6803      	ldr	r3, [r0, #0]
			u32_t ticks_to_expire_normal = ticks_to_expire;
    61a2:	9a08      	ldr	r2, [sp, #32]
    61a4:	f8d0 e004 	ldr.w	lr, [r0, #4]
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    61a8:	2b00      	cmp	r3, #0
    61aa:	da12      	bge.n	61d2 <sched_after_mstr_free_slot_get+0xd2>
    61ac:	6881      	ldr	r1, [r0, #8]
				ticks_slot_abs_curr =
    61ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    61b2:	4571      	cmp	r1, lr
    61b4:	bf2c      	ite	cs
    61b6:	1852      	addcs	r2, r2, r1
    61b8:	4472      	addcc	r2, lr
				ticks_to_expire_normal -=
    61ba:	1ad2      	subs	r2, r2, r3
			ticks_slot_abs_curr +=
    61bc:	68c1      	ldr	r1, [r0, #12]
			if ((ticker_id_prev != 0xFF) &&
    61be:	2dff      	cmp	r5, #255	; 0xff
			ticks_slot_abs_curr +=
    61c0:	f101 0104 	add.w	r1, r1, #4
    61c4:	440b      	add	r3, r1
			if ((ticker_id_prev != 0xFF) &&
    61c6:	d108      	bne.n	61da <sched_after_mstr_free_slot_get+0xda>
			ticker_id_prev = ticker_id;
    61c8:	f89d 501f 	ldrb.w	r5, [sp, #31]
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    61cc:	461c      	mov	r4, r3
			ticks_to_expire_prev = ticks_to_expire_normal;
    61ce:	4616      	mov	r6, r2
    61d0:	e7a7      	b.n	6122 <sched_after_mstr_free_slot_get+0x22>
				u32_t ticks_prepare_to_start =
    61d2:	4573      	cmp	r3, lr
    61d4:	bf38      	it	cc
    61d6:	4673      	movcc	r3, lr
    61d8:	e7f0      	b.n	61bc <sched_after_mstr_free_slot_get+0xbc>
			    (ticker_ticks_diff_get(ticks_to_expire_normal,
    61da:	4631      	mov	r1, r6
    61dc:	4610      	mov	r0, r2
    61de:	9305      	str	r3, [sp, #20]
    61e0:	9204      	str	r2, [sp, #16]
    61e2:	f7fe fbdb 	bl	499c <ticker_ticks_diff_get>
			     (ticks_slot_abs_prev + ticks_slot_abs))) {
    61e6:	eb04 010a 	add.w	r1, r4, sl
			if ((ticker_id_prev != 0xFF) &&
    61ea:	4288      	cmp	r0, r1
    61ec:	9a04      	ldr	r2, [sp, #16]
    61ee:	9b05      	ldr	r3, [sp, #20]
    61f0:	d9ea      	bls.n	61c8 <sched_after_mstr_free_slot_get+0xc8>
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    61f2:	4810      	ldr	r0, [pc, #64]	; (6234 <sched_after_mstr_free_slot_get+0x134>)
    61f4:	4434      	add	r4, r6
    61f6:	fba4 0100 	umull	r0, r1, r4, r0
    61fa:	2307      	movs	r3, #7
    61fc:	fb03 1104 	mla	r1, r3, r4, r1
    6200:	a307      	add	r3, pc, #28	; (adr r3, 6220 <sched_after_mstr_free_slot_get+0x120>)
    6202:	e9d3 2300 	ldrd	r2, r3, [r3]
    6206:	f7fa f82f 	bl	268 <__aeabi_uldivmod>
						    ticks_slot_abs_prev) +
    620a:	3080      	adds	r0, #128	; 0x80
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    620c:	6038      	str	r0, [r7, #0]
}
    620e:	b00b      	add	sp, #44	; 0x2c
    6210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (ticker_id_prev != 0xff) {
    6214:	2dff      	cmp	r5, #255	; 0xff
    6216:	d1ec      	bne.n	61f2 <sched_after_mstr_free_slot_get+0xf2>
    6218:	e7f9      	b.n	620e <sched_after_mstr_free_slot_get+0x10e>
    621a:	bf00      	nop
    621c:	f3af 8000 	nop.w
    6220:	3b9aca00 	.word	0x3b9aca00
    6224:	00000000 	.word	0x00000000
    6228:	00005901 	.word	0x00005901
    622c:	0000e466 	.word	0x0000e466
    6230:	0000ee0e 	.word	0x0000ee0e
    6234:	1afd498d 	.word	0x1afd498d
    6238:	200009f8 	.word	0x200009f8

0000623c <isr_adv_ci_adva_check>:
{
    623c:	b570      	push	{r4, r5, r6, lr}
	return (adv->tx_addr == ci->rx_addr) &&
    623e:	7804      	ldrb	r4, [r0, #0]
    6240:	780a      	ldrb	r2, [r1, #0]
    6242:	f3c4 1380 	ubfx	r3, r4, #6, #1
    6246:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    624a:	d119      	bne.n	6280 <isr_adv_ci_adva_check+0x44>
    624c:	f004 040f 	and.w	r4, r4, #15
    6250:	2c01      	cmp	r4, #1
    6252:	f101 0608 	add.w	r6, r1, #8
    6256:	f100 0502 	add.w	r5, r0, #2
    625a:	d008      	beq.n	626e <isr_adv_ci_adva_check+0x32>
		 (!memcmp(adv->adv_ind.addr, ci->connect_ind.adv_addr,
    625c:	2206      	movs	r2, #6
    625e:	4631      	mov	r1, r6
    6260:	4628      	mov	r0, r5
    6262:	f7fa f9c5 	bl	5f0 <memcmp>
			 BDADDR_SIZE)) ||
    6266:	fab0 f080 	clz	r0, r0
    626a:	0940      	lsrs	r0, r0, #5
    626c:	bd70      	pop	{r4, r5, r6, pc}
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
    626e:	2206      	movs	r2, #6
    6270:	4631      	mov	r1, r6
    6272:	4628      	mov	r0, r5
    6274:	f7fa f9bc 	bl	5f0 <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
    6278:	2800      	cmp	r0, #0
    627a:	d1ef      	bne.n	625c <isr_adv_ci_adva_check+0x20>
	return (adv->tx_addr == ci->rx_addr) &&
    627c:	4620      	mov	r0, r4
    627e:	bd70      	pop	{r4, r5, r6, pc}
    6280:	2000      	movs	r0, #0
}
    6282:	bd70      	pop	{r4, r5, r6, pc}

00006284 <rx_fc_lock>:
	packet_rx_allocate(0xff);
}

static void rx_fc_lock(u16_t handle)
{
	if (_radio.fc_req == _radio.fc_ack) {
    6284:	4a0b      	ldr	r2, [pc, #44]	; (62b4 <rx_fc_lock+0x30>)
    6286:	f892 370c 	ldrb.w	r3, [r2, #1804]	; 0x70c
    628a:	f892 170d 	ldrb.w	r1, [r2, #1805]	; 0x70d
    628e:	4299      	cmp	r1, r3
    6290:	d10e      	bne.n	62b0 <rx_fc_lock+0x2c>
		u8_t req;

		_radio.fc_handle[_radio.fc_req] = handle;
    6292:	f892 370c 	ldrb.w	r3, [r2, #1804]	; 0x70c
    6296:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    629a:	f8a3 0706 	strh.w	r0, [r3, #1798]	; 0x706
		req = _radio.fc_req + 1;
    629e:	f892 370c 	ldrb.w	r3, [r2, #1804]	; 0x70c
    62a2:	3301      	adds	r3, #1
    62a4:	b2db      	uxtb	r3, r3
		if (req == TRIPLE_BUFFER_SIZE) {
			req = 0;
    62a6:	2b03      	cmp	r3, #3
    62a8:	bf08      	it	eq
    62aa:	2300      	moveq	r3, #0
		}
		_radio.fc_req = req;
    62ac:	f882 370c 	strb.w	r3, [r2, #1804]	; 0x70c
    62b0:	4770      	bx	lr
    62b2:	bf00      	nop
    62b4:	200009f8 	.word	0x200009f8

000062b8 <ticker_success_assert>:
{
    62b8:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    62ba:	b150      	cbz	r0, 62d2 <ticker_success_assert+0x1a>
    62bc:	4a05      	ldr	r2, [pc, #20]	; (62d4 <ticker_success_assert+0x1c>)
    62be:	4906      	ldr	r1, [pc, #24]	; (62d8 <ticker_success_assert+0x20>)
    62c0:	2003      	movs	r0, #3
    62c2:	f7fb ff9d 	bl	2200 <bt_log>
    62c6:	4040      	eors	r0, r0
    62c8:	f380 8811 	msr	BASEPRI, r0
    62cc:	f04f 0004 	mov.w	r0, #4
    62d0:	df02      	svc	2
    62d2:	bd08      	pop	{r3, pc}
    62d4:	0000e376 	.word	0x0000e376
    62d8:	0000eef2 	.word	0x0000eef2

000062dc <ticker_stop_adv_assert>:
	if (status == TICKER_STATUS_FAILURE) {
    62dc:	2801      	cmp	r0, #1
{
    62de:	b508      	push	{r3, lr}
    62e0:	4b0c      	ldr	r3, [pc, #48]	; (6314 <ticker_stop_adv_assert+0x38>)
	if (status == TICKER_STATUS_FAILURE) {
    62e2:	d110      	bne.n	6306 <ticker_stop_adv_assert+0x2a>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_ADV) {
    62e4:	7c9a      	ldrb	r2, [r3, #18]
    62e6:	2a05      	cmp	r2, #5
    62e8:	d102      	bne.n	62f0 <ticker_stop_adv_assert+0x14>
			_radio.ticker_id_stop = 0;
    62ea:	2200      	movs	r2, #0
    62ec:	749a      	strb	r2, [r3, #18]
    62ee:	bd08      	pop	{r3, pc}
			LL_ASSERT(0);
    62f0:	4a09      	ldr	r2, [pc, #36]	; (6318 <ticker_stop_adv_assert+0x3c>)
    62f2:	490a      	ldr	r1, [pc, #40]	; (631c <ticker_stop_adv_assert+0x40>)
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_ADV);
    62f4:	2003      	movs	r0, #3
    62f6:	f7fb ff83 	bl	2200 <bt_log>
    62fa:	4040      	eors	r0, r0
    62fc:	f380 8811 	msr	BASEPRI, r0
    6300:	f04f 0004 	mov.w	r0, #4
    6304:	df02      	svc	2
    6306:	7c1b      	ldrb	r3, [r3, #16]
    6308:	2b05      	cmp	r3, #5
    630a:	d102      	bne.n	6312 <ticker_stop_adv_assert+0x36>
    630c:	4a02      	ldr	r2, [pc, #8]	; (6318 <ticker_stop_adv_assert+0x3c>)
    630e:	4904      	ldr	r1, [pc, #16]	; (6320 <ticker_stop_adv_assert+0x44>)
    6310:	e7f0      	b.n	62f4 <ticker_stop_adv_assert+0x18>
    6312:	bd08      	pop	{r3, pc}
    6314:	200009f8 	.word	0x200009f8
    6318:	0000e38c 	.word	0x0000e38c
    631c:	0000d86b 	.word	0x0000d86b
    6320:	0000ee5c 	.word	0x0000ee5c

00006324 <ticker_stop_scan_assert>:
	if (status == TICKER_STATUS_FAILURE) {
    6324:	2801      	cmp	r0, #1
{
    6326:	b508      	push	{r3, lr}
    6328:	4b0c      	ldr	r3, [pc, #48]	; (635c <ticker_stop_scan_assert+0x38>)
	if (status == TICKER_STATUS_FAILURE) {
    632a:	d110      	bne.n	634e <ticker_stop_scan_assert+0x2a>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_SCAN) {
    632c:	7c9a      	ldrb	r2, [r3, #18]
    632e:	2a06      	cmp	r2, #6
    6330:	d102      	bne.n	6338 <ticker_stop_scan_assert+0x14>
			_radio.ticker_id_stop = 0;
    6332:	2200      	movs	r2, #0
    6334:	749a      	strb	r2, [r3, #18]
    6336:	bd08      	pop	{r3, pc}
			LL_ASSERT(0);
    6338:	4a09      	ldr	r2, [pc, #36]	; (6360 <ticker_stop_scan_assert+0x3c>)
    633a:	490a      	ldr	r1, [pc, #40]	; (6364 <ticker_stop_scan_assert+0x40>)
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_SCAN);
    633c:	2003      	movs	r0, #3
    633e:	f7fb ff5f 	bl	2200 <bt_log>
    6342:	4040      	eors	r0, r0
    6344:	f380 8811 	msr	BASEPRI, r0
    6348:	f04f 0004 	mov.w	r0, #4
    634c:	df02      	svc	2
    634e:	7c1b      	ldrb	r3, [r3, #16]
    6350:	2b06      	cmp	r3, #6
    6352:	d102      	bne.n	635a <ticker_stop_scan_assert+0x36>
    6354:	4a02      	ldr	r2, [pc, #8]	; (6360 <ticker_stop_scan_assert+0x3c>)
    6356:	4904      	ldr	r1, [pc, #16]	; (6368 <ticker_stop_scan_assert+0x44>)
    6358:	e7f0      	b.n	633c <ticker_stop_scan_assert+0x18>
    635a:	bd08      	pop	{r3, pc}
    635c:	200009f8 	.word	0x200009f8
    6360:	0000e3a3 	.word	0x0000e3a3
    6364:	0000d86b 	.word	0x0000d86b
    6368:	0000eebf 	.word	0x0000eebf

0000636c <ticker_update_adv_assert>:
{
    636c:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    636e:	b170      	cbz	r0, 638e <ticker_update_adv_assert+0x22>
    6370:	4b07      	ldr	r3, [pc, #28]	; (6390 <ticker_update_adv_assert+0x24>)
    6372:	7c9b      	ldrb	r3, [r3, #18]
    6374:	2b05      	cmp	r3, #5
    6376:	d00a      	beq.n	638e <ticker_update_adv_assert+0x22>
    6378:	4a06      	ldr	r2, [pc, #24]	; (6394 <ticker_update_adv_assert+0x28>)
    637a:	4907      	ldr	r1, [pc, #28]	; (6398 <ticker_update_adv_assert+0x2c>)
    637c:	2003      	movs	r0, #3
    637e:	f7fb ff3f 	bl	2200 <bt_log>
    6382:	4040      	eors	r0, r0
    6384:	f380 8811 	msr	BASEPRI, r0
    6388:	f04f 0004 	mov.w	r0, #4
    638c:	df02      	svc	2
    638e:	bd08      	pop	{r3, pc}
    6390:	200009f8 	.word	0x200009f8
    6394:	0000e3bb 	.word	0x0000e3bb
    6398:	0000ef13 	.word	0x0000ef13

0000639c <ticker_update_slave_assert>:
{
    639c:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    639e:	b178      	cbz	r0, 63c0 <ticker_update_slave_assert+0x24>
    63a0:	4b08      	ldr	r3, [pc, #32]	; (63c4 <ticker_update_slave_assert+0x28>)
    63a2:	7c9b      	ldrb	r3, [r3, #18]
    63a4:	b2c9      	uxtb	r1, r1
    63a6:	4299      	cmp	r1, r3
    63a8:	d00a      	beq.n	63c0 <ticker_update_slave_assert+0x24>
    63aa:	4a07      	ldr	r2, [pc, #28]	; (63c8 <ticker_update_slave_assert+0x2c>)
    63ac:	4907      	ldr	r1, [pc, #28]	; (63cc <ticker_update_slave_assert+0x30>)
    63ae:	2003      	movs	r0, #3
    63b0:	f7fb ff26 	bl	2200 <bt_log>
    63b4:	4040      	eors	r0, r0
    63b6:	f380 8811 	msr	BASEPRI, r0
    63ba:	f04f 0004 	mov.w	r0, #4
    63be:	df02      	svc	2
    63c0:	bd08      	pop	{r3, pc}
    63c2:	bf00      	nop
    63c4:	200009f8 	.word	0x200009f8
    63c8:	0000e3d4 	.word	0x0000e3d4
    63cc:	0000ef56 	.word	0x0000ef56

000063d0 <ticker_job_disable>:
	if (_radio.state != STATE_NONE) {
    63d0:	4b04      	ldr	r3, [pc, #16]	; (63e4 <ticker_job_disable+0x14>)
    63d2:	7d1b      	ldrb	r3, [r3, #20]
    63d4:	b123      	cbz	r3, 63e0 <ticker_job_disable+0x10>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    63d6:	2101      	movs	r1, #1
    63d8:	2200      	movs	r2, #0
    63da:	4608      	mov	r0, r1
    63dc:	f7fd bb92 	b.w	3b04 <mayfly_enable>
    63e0:	4770      	bx	lr
    63e2:	bf00      	nop
    63e4:	200009f8 	.word	0x200009f8

000063e8 <hdr_conn_get>:
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    63e8:	2806      	cmp	r0, #6
{
    63ea:	b510      	push	{r4, lr}
    63ec:	460c      	mov	r4, r1
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    63ee:	d90a      	bls.n	6406 <hdr_conn_get+0x1e>
		*conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    63f0:	4b09      	ldr	r3, [pc, #36]	; (6418 <hdr_conn_get+0x30>)
    63f2:	1fc2      	subs	r2, r0, #7
    63f4:	b292      	uxth	r2, r2
    63f6:	f44f 7182 	mov.w	r1, #260	; 0x104
    63fa:	f8d3 069c 	ldr.w	r0, [r3, #1692]	; 0x69c
    63fe:	f7fd fb1f 	bl	3a40 <mem_get>
    6402:	6020      	str	r0, [r4, #0]
    6404:	bd10      	pop	{r4, pc}
	} else if (ticker_id == RADIO_TICKER_ID_ADV) {
    6406:	2805      	cmp	r0, #5
    6408:	d004      	beq.n	6414 <hdr_conn_get+0x2c>
	} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
    640a:	2806      	cmp	r0, #6
	return NULL;
    640c:	4803      	ldr	r0, [pc, #12]	; (641c <hdr_conn_get+0x34>)
    640e:	bf18      	it	ne
    6410:	2000      	movne	r0, #0
    6412:	bd10      	pop	{r4, pc}
		return &_radio.advertiser.hdr;
    6414:	4802      	ldr	r0, [pc, #8]	; (6420 <hdr_conn_get+0x38>)
}
    6416:	bd10      	pop	{r4, pc}
    6418:	200009f8 	.word	0x200009f8
    641c:	20001034 	.word	0x20001034
    6420:	20000a10 	.word	0x20000a10

00006424 <event_stop.part.12>:
static void event_stop(u32_t ticks_at_expire, u32_t remainder,
    6424:	b508      	push	{r3, lr}
	LL_ASSERT(!retval);
    6426:	4a05      	ldr	r2, [pc, #20]	; (643c <event_stop.part.12+0x18>)
    6428:	4905      	ldr	r1, [pc, #20]	; (6440 <event_stop.part.12+0x1c>)
    642a:	2003      	movs	r0, #3
    642c:	f7fb fee8 	bl	2200 <bt_log>
    6430:	4040      	eors	r0, r0
    6432:	f380 8811 	msr	BASEPRI, r0
    6436:	f04f 0004 	mov.w	r0, #4
    643a:	df02      	svc	2
    643c:	0000e4b8 	.word	0x0000e4b8
    6440:	0000e810 	.word	0x0000e810

00006444 <event_stop>:
	s_mfy_radio_stop.param = context;
    6444:	4a06      	ldr	r2, [pc, #24]	; (6460 <event_stop+0x1c>)
{
    6446:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
    6448:	6093      	str	r3, [r2, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    644a:	4613      	mov	r3, r2
    644c:	2200      	movs	r2, #0
    644e:	4611      	mov	r1, r2
    6450:	4610      	mov	r0, r2
    6452:	f7fd fb7f 	bl	3b54 <mayfly_enqueue>
	LL_ASSERT(!retval);
    6456:	b108      	cbz	r0, 645c <event_stop+0x18>
    6458:	f7ff ffe4 	bl	6424 <event_stop.part.12>
    645c:	bd08      	pop	{r3, pc}
    645e:	bf00      	nop
    6460:	20004d60 	.word	0x20004d60

00006464 <mayfly_xtal_retain.part.15>:
static void mayfly_xtal_retain(u8_t caller_id, u8_t retain)
    6464:	b508      	push	{r3, lr}
		if (s_xtal_retained) {
    6466:	4b0f      	ldr	r3, [pc, #60]	; (64a4 <mayfly_xtal_retain.part.15+0x40>)
    6468:	781a      	ldrb	r2, [r3, #0]
    646a:	b1d2      	cbz	r2, 64a2 <mayfly_xtal_retain.part.15+0x3e>
			s_xtal_retained = 0;
    646c:	2200      	movs	r2, #0
    646e:	701a      	strb	r2, [r3, #0]
			switch (caller_id) {
    6470:	b1a8      	cbz	r0, 649e <mayfly_xtal_retain.part.15+0x3a>
    6472:	2801      	cmp	r0, #1
    6474:	d108      	bne.n	6488 <mayfly_xtal_retain.part.15+0x24>
				p_mfy_xtal_stop = &s_mfy_xtal_stop[1];
    6476:	4b0c      	ldr	r3, [pc, #48]	; (64a8 <mayfly_xtal_retain.part.15+0x44>)
			retval = mayfly_enqueue(caller_id,
    6478:	2200      	movs	r2, #0
    647a:	4611      	mov	r1, r2
    647c:	f7fd fb6a 	bl	3b54 <mayfly_enqueue>
			LL_ASSERT(!retval);
    6480:	b178      	cbz	r0, 64a2 <mayfly_xtal_retain.part.15+0x3e>
    6482:	4a0a      	ldr	r2, [pc, #40]	; (64ac <mayfly_xtal_retain.part.15+0x48>)
    6484:	490a      	ldr	r1, [pc, #40]	; (64b0 <mayfly_xtal_retain.part.15+0x4c>)
    6486:	e001      	b.n	648c <mayfly_xtal_retain.part.15+0x28>
				LL_ASSERT(0);
    6488:	4a08      	ldr	r2, [pc, #32]	; (64ac <mayfly_xtal_retain.part.15+0x48>)
    648a:	490a      	ldr	r1, [pc, #40]	; (64b4 <mayfly_xtal_retain.part.15+0x50>)
			LL_ASSERT(!retval);
    648c:	2003      	movs	r0, #3
    648e:	f7fb feb7 	bl	2200 <bt_log>
    6492:	4040      	eors	r0, r0
    6494:	f380 8811 	msr	BASEPRI, r0
    6498:	f04f 0004 	mov.w	r0, #4
    649c:	df02      	svc	2
				p_mfy_xtal_stop = &s_mfy_xtal_stop[0];
    649e:	4b06      	ldr	r3, [pc, #24]	; (64b8 <mayfly_xtal_retain.part.15+0x54>)
    64a0:	e7ea      	b.n	6478 <mayfly_xtal_retain.part.15+0x14>
    64a2:	bd08      	pop	{r3, pc}
    64a4:	20001198 	.word	0x20001198
    64a8:	20004dd0 	.word	0x20004dd0
    64ac:	0000e42a 	.word	0x0000e42a
    64b0:	0000e810 	.word	0x0000e810
    64b4:	0000d86b 	.word	0x0000d86b
    64b8:	20004dc0 	.word	0x20004dc0

000064bc <event_active>:
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    64bc:	2200      	movs	r2, #0
{
    64be:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    64c0:	4611      	mov	r1, r2
    64c2:	4b08      	ldr	r3, [pc, #32]	; (64e4 <event_active+0x28>)
    64c4:	4610      	mov	r0, r2
    64c6:	f7fd fb45 	bl	3b54 <mayfly_enqueue>
	LL_ASSERT(!retval);
    64ca:	b150      	cbz	r0, 64e2 <event_active+0x26>
    64cc:	4a06      	ldr	r2, [pc, #24]	; (64e8 <event_active+0x2c>)
    64ce:	4907      	ldr	r1, [pc, #28]	; (64ec <event_active+0x30>)
    64d0:	2003      	movs	r0, #3
    64d2:	f7fb fe95 	bl	2200 <bt_log>
    64d6:	4040      	eors	r0, r0
    64d8:	f380 8811 	msr	BASEPRI, r0
    64dc:	f04f 0004 	mov.w	r0, #4
    64e0:	df02      	svc	2
    64e2:	bd08      	pop	{r3, pc}
    64e4:	20004d20 	.word	0x20004d20
    64e8:	0000e403 	.word	0x0000e403
    64ec:	0000e810 	.word	0x0000e810

000064f0 <event_xtal>:
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    64f0:	2200      	movs	r2, #0
{
    64f2:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    64f4:	4611      	mov	r1, r2
    64f6:	4b08      	ldr	r3, [pc, #32]	; (6518 <event_xtal+0x28>)
    64f8:	4610      	mov	r0, r2
    64fa:	f7fd fb2b 	bl	3b54 <mayfly_enqueue>
	LL_ASSERT(!retval);
    64fe:	b150      	cbz	r0, 6516 <event_xtal+0x26>
    6500:	4a06      	ldr	r2, [pc, #24]	; (651c <event_xtal+0x2c>)
    6502:	4907      	ldr	r1, [pc, #28]	; (6520 <event_xtal+0x30>)
    6504:	2003      	movs	r0, #3
    6506:	f7fb fe7b 	bl	2200 <bt_log>
    650a:	4040      	eors	r0, r0
    650c:	f380 8811 	msr	BASEPRI, r0
    6510:	f04f 0004 	mov.w	r0, #4
    6514:	df02      	svc	2
    6516:	bd08      	pop	{r3, pc}
    6518:	20004da0 	.word	0x20004da0
    651c:	0000e41f 	.word	0x0000e41f
    6520:	0000e810 	.word	0x0000e810

00006524 <mayfly_radio_active>:
{
    6524:	b508      	push	{r3, lr}
    6526:	4a0e      	ldr	r2, [pc, #56]	; (6560 <mayfly_radio_active+0x3c>)
		if (s_active++) {
    6528:	7813      	ldrb	r3, [r2, #0]
	if ((u32_t)params) {
    652a:	b138      	cbz	r0, 653c <mayfly_radio_active+0x18>
		if (s_active++) {
    652c:	1c59      	adds	r1, r3, #1
    652e:	7011      	strb	r1, [r2, #0]
    6530:	b9ab      	cbnz	r3, 655e <mayfly_radio_active+0x3a>
		radio_active_callback(1);
    6532:	2001      	movs	r0, #1
}
    6534:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		radio_active_callback(0);
    6538:	f003 bf7e 	b.w	a438 <radio_active_callback>
		LL_ASSERT(s_active);
    653c:	b953      	cbnz	r3, 6554 <mayfly_radio_active+0x30>
    653e:	4a09      	ldr	r2, [pc, #36]	; (6564 <mayfly_radio_active+0x40>)
    6540:	4909      	ldr	r1, [pc, #36]	; (6568 <mayfly_radio_active+0x44>)
    6542:	2003      	movs	r0, #3
    6544:	f7fb fe5c 	bl	2200 <bt_log>
    6548:	4040      	eors	r0, r0
    654a:	f380 8811 	msr	BASEPRI, r0
    654e:	f04f 0004 	mov.w	r0, #4
    6552:	df02      	svc	2
		if (--s_active) {
    6554:	3b01      	subs	r3, #1
    6556:	b2db      	uxtb	r3, r3
    6558:	7013      	strb	r3, [r2, #0]
    655a:	2b00      	cmp	r3, #0
    655c:	d0ea      	beq.n	6534 <mayfly_radio_active+0x10>
    655e:	bd08      	pop	{r3, pc}
    6560:	20001145 	.word	0x20001145
    6564:	0000e3ef 	.word	0x0000e3ef
    6568:	0000eb04 	.word	0x0000eb04

0000656c <mayfly_radio_inactive>:
	mayfly_radio_active(0);
    656c:	2000      	movs	r0, #0
    656e:	f7ff bfd9 	b.w	6524 <mayfly_radio_active>
	...

00006574 <mayfly_radio_stop>:
	enum state state = (enum state)((u32_t)params & 0xff);
    6574:	b2c0      	uxtb	r0, r0
{
    6576:	b508      	push	{r3, lr}
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
    6578:	1f03      	subs	r3, r0, #4
    657a:	2b01      	cmp	r3, #1
    657c:	d90a      	bls.n	6594 <mayfly_radio_stop+0x20>
    657e:	4a0d      	ldr	r2, [pc, #52]	; (65b4 <mayfly_radio_stop+0x40>)
    6580:	490d      	ldr	r1, [pc, #52]	; (65b8 <mayfly_radio_stop+0x44>)
    6582:	2003      	movs	r0, #3
    6584:	f7fb fe3c 	bl	2200 <bt_log>
    6588:	4040      	eors	r0, r0
    658a:	f380 8811 	msr	BASEPRI, r0
    658e:	f04f 0004 	mov.w	r0, #4
    6592:	df02      	svc	2
	radio_used = ((_radio.state != STATE_NONE) &&
    6594:	4a09      	ldr	r2, [pc, #36]	; (65bc <mayfly_radio_stop+0x48>)
    6596:	7d13      	ldrb	r3, [r2, #20]
		      (_radio.state != STATE_STOP) &&
    6598:	b13b      	cbz	r3, 65aa <mayfly_radio_stop+0x36>
	radio_used = ((_radio.state != STATE_NONE) &&
    659a:	3b04      	subs	r3, #4
    659c:	2b01      	cmp	r3, #1
    659e:	d904      	bls.n	65aa <mayfly_radio_stop+0x36>
			_radio.state = state;
    65a0:	7510      	strb	r0, [r2, #20]
}
    65a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		radio_disable();
    65a6:	f004 bd75 	b.w	b094 <radio_disable>
	if (radio_used || !radio_is_idle()) {
    65aa:	f004 fda5 	bl	b0f8 <radio_is_idle>
    65ae:	2800      	cmp	r0, #0
    65b0:	d0f7      	beq.n	65a2 <mayfly_radio_stop+0x2e>
}
    65b2:	bd08      	pop	{r3, pc}
    65b4:	0000e4a6 	.word	0x0000e4a6
    65b8:	0000eb22 	.word	0x0000eb22
    65bc:	200009f8 	.word	0x200009f8

000065c0 <rx_packet_set>:
{
    65c0:	b538      	push	{r3, r4, r5, lr}
    65c2:	4605      	mov	r5, r0
    65c4:	460c      	mov	r4, r1
	radio_phy_set(phy, 0);
    65c6:	2100      	movs	r1, #0
    65c8:	4608      	mov	r0, r1
    65ca:	f004 fcc9 	bl	af60 <radio_phy_set>
	if (conn->enc_rx) {
    65ce:	f895 30a8 	ldrb.w	r3, [r5, #168]	; 0xa8
    65d2:	06db      	lsls	r3, r3, #27
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
    65d4:	f04f 0201 	mov.w	r2, #1
	if (conn->enc_rx) {
    65d8:	d50d      	bpl.n	65f6 <rx_packet_set+0x36>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
    65da:	211f      	movs	r1, #31
    65dc:	2008      	movs	r0, #8
    65de:	f004 fd05 	bl	afec <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&conn->ccm_rx, phy,
    65e2:	4622      	mov	r2, r4
    65e4:	2100      	movs	r1, #0
    65e6:	f105 00a9 	add.w	r0, r5, #169	; 0xa9
    65ea:	f004 ff37 	bl	b45c <radio_ccm_rx_pkt_set>
}
    65ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		radio_pkt_rx_set(pdu_data_rx);
    65f2:	f004 bd29 	b.w	b048 <radio_pkt_rx_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
    65f6:	2008      	movs	r0, #8
    65f8:	211b      	movs	r1, #27
    65fa:	f004 fcf7 	bl	afec <radio_pkt_configure>
		radio_pkt_rx_set(pdu_data_rx);
    65fe:	4620      	mov	r0, r4
    6600:	e7f5      	b.n	65ee <rx_packet_set+0x2e>
	...

00006604 <pdu_node_tx_release>:
{
    6604:	b538      	push	{r3, r4, r5, lr}
	last = _radio.packet_release_last + 1;
    6606:	4a15      	ldr	r2, [pc, #84]	; (665c <pdu_node_tx_release+0x58>)
    6608:	f892 3704 	ldrb.w	r3, [r2, #1796]	; 0x704
	if (last == _radio.packet_tx_count) {
    660c:	f892 4700 	ldrb.w	r4, [r2, #1792]	; 0x700
	last = _radio.packet_release_last + 1;
    6610:	3301      	adds	r3, #1
    6612:	b2db      	uxtb	r3, r3
		last = 0;
    6614:	429c      	cmp	r4, r3
    6616:	bf08      	it	eq
    6618:	2300      	moveq	r3, #0
	LL_ASSERT(last != _radio.packet_release_first);
    661a:	f892 4703 	ldrb.w	r4, [r2, #1795]	; 0x703
    661e:	429c      	cmp	r4, r3
    6620:	d10a      	bne.n	6638 <pdu_node_tx_release+0x34>
    6622:	4a0f      	ldr	r2, [pc, #60]	; (6660 <pdu_node_tx_release+0x5c>)
    6624:	490f      	ldr	r1, [pc, #60]	; (6664 <pdu_node_tx_release+0x60>)
    6626:	2003      	movs	r0, #3
    6628:	f7fb fdea 	bl	2200 <bt_log>
    662c:	4040      	eors	r0, r0
    662e:	f380 8811 	msr	BASEPRI, r0
    6632:	f04f 0004 	mov.w	r0, #4
    6636:	df02      	svc	2
	_radio.pkt_release[_radio.packet_release_last].handle = handle;
    6638:	f892 5704 	ldrb.w	r5, [r2, #1796]	; 0x704
    663c:	f8d2 46fc 	ldr.w	r4, [r2, #1788]	; 0x6fc
    6640:	f824 0035 	strh.w	r0, [r4, r5, lsl #3]
	_radio.pkt_release[_radio.packet_release_last].node_tx = node_tx;
    6644:	f892 0704 	ldrb.w	r0, [r2, #1796]	; 0x704
    6648:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
    664c:	6061      	str	r1, [r4, #4]
	_radio.packet_release_last = last;
    664e:	f882 3704 	strb.w	r3, [r2, #1796]	; 0x704
}
    6652:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_event_callback();
    6656:	f003 bef1 	b.w	a43c <radio_event_callback>
    665a:	bf00      	nop
    665c:	200009f8 	.word	0x200009f8
    6660:	0000e5f8 	.word	0x0000e5f8
    6664:	0000ec04 	.word	0x0000ec04

00006668 <packet_tx_enqueue>:
{
    6668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    666c:	4c24      	ldr	r4, [pc, #144]	; (6700 <packet_tx_enqueue+0x98>)
{
    666e:	4606      	mov	r6, r0
		node_tx_new->next = NULL;
    6670:	2700      	movs	r7, #0
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    6672:	b12e      	cbz	r6, 6680 <packet_tx_enqueue+0x18>
    6674:	f894 3701 	ldrb.w	r3, [r4, #1793]	; 0x701
    6678:	f894 2702 	ldrb.w	r2, [r4, #1794]	; 0x702
    667c:	429a      	cmp	r2, r3
    667e:	d101      	bne.n	6684 <packet_tx_enqueue+0x1c>
    6680:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    6684:	f894 8701 	ldrb.w	r8, [r4, #1793]	; 0x701
    6688:	f8d4 96f8 	ldr.w	r9, [r4, #1784]	; 0x6f8
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    668c:	f8d4 069c 	ldr.w	r0, [r4, #1692]	; 0x69c
    6690:	f839 2038 	ldrh.w	r2, [r9, r8, lsl #3]
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    6694:	eb09 03c8 	add.w	r3, r9, r8, lsl #3
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    6698:	f44f 7182 	mov.w	r1, #260	; 0x104
		node_tx_new = pdu_data_q_tx->node_tx;
    669c:	685d      	ldr	r5, [r3, #4]
		node_tx_new->next = NULL;
    669e:	602f      	str	r7, [r5, #0]
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    66a0:	f7fd f9ce 	bl	3a40 <mem_get>
    66a4:	4603      	mov	r3, r0
		if (conn->handle == pdu_data_q_tx->handle) {
    66a6:	f839 0038 	ldrh.w	r0, [r9, r8, lsl #3]
    66aa:	8c1a      	ldrh	r2, [r3, #32]
    66ac:	4282      	cmp	r2, r0
    66ae:	d11f      	bne.n	66f0 <packet_tx_enqueue+0x88>
			if (conn->pkt_tx_data == 0) {
    66b0:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
    66b4:	b942      	cbnz	r2, 66c8 <packet_tx_enqueue+0x60>
				if (conn->pkt_tx_head == 0) {
    66b6:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
				conn->pkt_tx_data = node_tx_new;
    66ba:	f8c3 50f8 	str.w	r5, [r3, #248]	; 0xf8
				if (conn->pkt_tx_head == 0) {
    66be:	b91a      	cbnz	r2, 66c8 <packet_tx_enqueue+0x60>
					conn->pkt_tx_head = node_tx_new;
    66c0:	f8c3 50ec 	str.w	r5, [r3, #236]	; 0xec
					conn->pkt_tx_last = NULL;
    66c4:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
			if (conn->pkt_tx_last) {
    66c8:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
    66cc:	b102      	cbz	r2, 66d0 <packet_tx_enqueue+0x68>
				conn->pkt_tx_last->next = node_tx_new;
    66ce:	6015      	str	r5, [r2, #0]
			conn->pkt_tx_last = node_tx_new;
    66d0:	f8c3 50fc 	str.w	r5, [r3, #252]	; 0xfc
		first = _radio.packet_tx_first + 1;
    66d4:	f894 3701 	ldrb.w	r3, [r4, #1793]	; 0x701
		if (first == _radio.packet_tx_count) {
    66d8:	f894 2700 	ldrb.w	r2, [r4, #1792]	; 0x700
		first = _radio.packet_tx_first + 1;
    66dc:	3301      	adds	r3, #1
    66de:	b2db      	uxtb	r3, r3
			first = 0;
    66e0:	429a      	cmp	r2, r3
    66e2:	bf08      	it	eq
    66e4:	2300      	moveq	r3, #0
    66e6:	3e01      	subs	r6, #1
		_radio.packet_tx_first = first;
    66e8:	f884 3701 	strb.w	r3, [r4, #1793]	; 0x701
    66ec:	b2f6      	uxtb	r6, r6
    66ee:	e7c0      	b.n	6672 <packet_tx_enqueue+0xa>
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    66f0:	792b      	ldrb	r3, [r5, #4]
    66f2:	f367 0301 	bfi	r3, r7, #0, #2
    66f6:	712b      	strb	r3, [r5, #4]
			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
    66f8:	4629      	mov	r1, r5
    66fa:	f7ff ff83 	bl	6604 <pdu_node_tx_release>
    66fe:	e7e9      	b.n	66d4 <packet_tx_enqueue+0x6c>
    6700:	200009f8 	.word	0x200009f8

00006704 <connection_release>:
{
    6704:	b573      	push	{r0, r1, r4, r5, r6, lr}
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    6706:	2201      	movs	r2, #1
{
    6708:	4604      	mov	r4, r0
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    670a:	4611      	mov	r1, r2
    670c:	2000      	movs	r0, #0
    670e:	f7fd f9f9 	bl	3b04 <mayfly_enable>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    6712:	f894 2020 	ldrb.w	r2, [r4, #32]
	ticker_status =
    6716:	2100      	movs	r1, #0
    6718:	f242 6312 	movw	r3, #9746	; 0x2612
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    671c:	3207      	adds	r2, #7
	ticker_status =
    671e:	9300      	str	r3, [sp, #0]
    6720:	4608      	mov	r0, r1
    6722:	4b3c      	ldr	r3, [pc, #240]	; (6814 <connection_release+0x110>)
    6724:	b2d2      	uxtb	r2, r2
    6726:	f7fe f867 	bl	47f8 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    672a:	f030 0102 	bics.w	r1, r0, #2
    672e:	d00a      	beq.n	6746 <connection_release+0x42>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    6730:	4a39      	ldr	r2, [pc, #228]	; (6818 <connection_release+0x114>)
    6732:	493a      	ldr	r1, [pc, #232]	; (681c <connection_release+0x118>)
    6734:	2003      	movs	r0, #3
    6736:	f7fb fd63 	bl	2200 <bt_log>
    673a:	4040      	eors	r0, r0
    673c:	f380 8811 	msr	BASEPRI, r0
    6740:	f04f 0004 	mov.w	r0, #4
    6744:	df02      	svc	2
	if ((_radio.state == STATE_ABORT) &&
    6746:	4b36      	ldr	r3, [pc, #216]	; (6820 <connection_release+0x11c>)
    6748:	7d1a      	ldrb	r2, [r3, #20]
    674a:	2a05      	cmp	r2, #5
    674c:	461d      	mov	r5, r3
    674e:	d11b      	bne.n	6788 <connection_release+0x84>
					  conn->handle))) {
    6750:	8c22      	ldrh	r2, [r4, #32]
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
    6752:	7c18      	ldrb	r0, [r3, #16]
    6754:	3207      	adds	r2, #7
	if ((_radio.state == STATE_ABORT) &&
    6756:	4290      	cmp	r0, r2
    6758:	d116      	bne.n	6788 <connection_release+0x84>
		_radio.ticker_id_prepare = 0;
    675a:	7419      	strb	r1, [r3, #16]
		ticker_status =
    675c:	f242 6323 	movw	r3, #9763	; 0x2623
    6760:	9300      	str	r3, [sp, #0]
    6762:	2201      	movs	r2, #1
    6764:	4b2b      	ldr	r3, [pc, #172]	; (6814 <connection_release+0x110>)
    6766:	4608      	mov	r0, r1
    6768:	f7fe f846 	bl	47f8 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    676c:	f030 0202 	bics.w	r2, r0, #2
    6770:	d1de      	bne.n	6730 <connection_release+0x2c>
		ticker_status =
    6772:	f242 632a 	movw	r3, #9770	; 0x262a
    6776:	9300      	str	r3, [sp, #0]
    6778:	4611      	mov	r1, r2
    677a:	4b26      	ldr	r3, [pc, #152]	; (6814 <connection_release+0x110>)
    677c:	4610      	mov	r0, r2
    677e:	f7fe f83b 	bl	47f8 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    6782:	f030 0302 	bics.w	r3, r0, #2
    6786:	d1d3      	bne.n	6730 <connection_release+0x2c>
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
    6788:	f8d4 10ec 	ldr.w	r1, [r4, #236]	; 0xec
    678c:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
    6790:	4299      	cmp	r1, r3
    6792:	d003      	beq.n	679c <connection_release+0x98>
    6794:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
    6798:	4299      	cmp	r1, r3
    679a:	d101      	bne.n	67a0 <connection_release+0x9c>
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    679c:	4e21      	ldr	r6, [pc, #132]	; (6824 <connection_release+0x120>)
    679e:	e012      	b.n	67c6 <connection_release+0xc2>
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    67a0:	790b      	ldrb	r3, [r1, #4]
    67a2:	f36f 0301 	bfc	r3, #0, #2
    67a6:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    67a8:	680b      	ldr	r3, [r1, #0]
    67aa:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
		pdu_node_tx_release(conn->handle, node_tx);
    67ae:	8c20      	ldrh	r0, [r4, #32]
    67b0:	f7ff ff28 	bl	6604 <pdu_node_tx_release>
    67b4:	e7e8      	b.n	6788 <connection_release+0x84>
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    67b6:	6803      	ldr	r3, [r0, #0]
    67b8:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
		conn->pkt_tx_ctrl = conn->pkt_tx_head;
    67bc:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    67c0:	4631      	mov	r1, r6
    67c2:	f7fd f928 	bl	3a16 <mem_release>
	while ((conn->pkt_tx_head) &&
    67c6:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
    67ca:	b118      	cbz	r0, 67d4 <connection_release+0xd0>
    67cc:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
    67d0:	4298      	cmp	r0, r3
    67d2:	d1f0      	bne.n	67b6 <connection_release+0xb2>
	conn->pkt_tx_ctrl = NULL;
    67d4:	2300      	movs	r3, #0
    67d6:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
	conn->pkt_tx_ctrl_last = NULL;
    67da:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
	while (conn->pkt_tx_head) {
    67de:	f8d4 10ec 	ldr.w	r1, [r4, #236]	; 0xec
    67e2:	b951      	cbnz	r1, 67fa <connection_release+0xf6>
	conn->handle = 0xffff;
    67e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    67e8:	8423      	strh	r3, [r4, #32]
	if (_radio.conn_upd == conn) {
    67ea:	f8d5 3714 	ldr.w	r3, [r5, #1812]	; 0x714
    67ee:	429c      	cmp	r4, r3
		_radio.conn_upd = NULL;
    67f0:	bf08      	it	eq
    67f2:	f8c5 1714 	streq.w	r1, [r5, #1812]	; 0x714
}
    67f6:	b002      	add	sp, #8
    67f8:	bd70      	pop	{r4, r5, r6, pc}
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    67fa:	790b      	ldrb	r3, [r1, #4]
    67fc:	f36f 0301 	bfc	r3, #0, #2
    6800:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    6802:	680b      	ldr	r3, [r1, #0]
    6804:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
		conn->pkt_tx_data = conn->pkt_tx_head;
    6808:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
		pdu_node_tx_release(conn->handle, node_tx);
    680c:	8c20      	ldrh	r0, [r4, #32]
    680e:	f7ff fef9 	bl	6604 <pdu_node_tx_release>
    6812:	e7e4      	b.n	67de <connection_release+0xda>
    6814:	000062b9 	.word	0x000062b9
    6818:	0000e60c 	.word	0x0000e60c
    681c:	0000e695 	.word	0x0000e695
    6820:	200009f8 	.word	0x200009f8
    6824:	200010e0 	.word	0x200010e0

00006828 <tx_packet_set>:
{
    6828:	b538      	push	{r3, r4, r5, lr}
    682a:	4605      	mov	r5, r0
    682c:	460c      	mov	r4, r1
	radio_phy_set(phy, flags);
    682e:	2100      	movs	r1, #0
    6830:	4608      	mov	r0, r1
    6832:	f004 fb95 	bl	af60 <radio_phy_set>
	if (conn->enc_tx) {
    6836:	f895 30a8 	ldrb.w	r3, [r5, #168]	; 0xa8
    683a:	069b      	lsls	r3, r3, #26
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
    683c:	f04f 0201 	mov.w	r2, #1
	if (conn->enc_tx) {
    6840:	d50c      	bpl.n	685c <tx_packet_set+0x34>
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
    6842:	211f      	movs	r1, #31
    6844:	2008      	movs	r0, #8
    6846:	f004 fbd1 	bl	afec <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&conn->ccm_tx,
    684a:	4621      	mov	r1, r4
    684c:	f105 00ca 	add.w	r0, r5, #202	; 0xca
    6850:	f004 fe40 	bl	b4d4 <radio_ccm_tx_pkt_set>
}
    6854:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		radio_pkt_tx_set(pdu_data_tx);
    6858:	f004 bbfc 	b.w	b054 <radio_pkt_tx_set>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
    685c:	2008      	movs	r0, #8
    685e:	211b      	movs	r1, #27
    6860:	f004 fbc4 	bl	afec <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
    6864:	4620      	mov	r0, r4
    6866:	e7f5      	b.n	6854 <tx_packet_set+0x2c>

00006868 <sched_after_mstr_free_offset_get>:
{
    6868:	b573      	push	{r0, r1, r4, r5, r6, lr}
    686a:	4616      	mov	r6, r2
	u32_t ticks_anchor_offset = ticks_anchor;
    686c:	aa02      	add	r2, sp, #8
{
    686e:	461c      	mov	r4, r3
    6870:	4605      	mov	r5, r0
	u32_t ticks_anchor_offset = ticks_anchor;
    6872:	f842 6d04 	str.w	r6, [r2, #-4]!
	sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_JOB,
    6876:	3127      	adds	r1, #39	; 0x27
    6878:	2001      	movs	r0, #1
    687a:	f7ff fc41 	bl	6100 <sched_after_mstr_free_slot_get>
	if (!*win_offset_us) {
    687e:	6823      	ldr	r3, [r4, #0]
    6880:	b343      	cbz	r3, 68d4 <sched_after_mstr_free_offset_get+0x6c>
	LL_ASSERT(!((ticks_anchor_offset - ticks_anchor) &
    6882:	9801      	ldr	r0, [sp, #4]
    6884:	1b83      	subs	r3, r0, r6
    6886:	021b      	lsls	r3, r3, #8
    6888:	d50a      	bpl.n	68a0 <sched_after_mstr_free_offset_get+0x38>
    688a:	4a17      	ldr	r2, [pc, #92]	; (68e8 <sched_after_mstr_free_offset_get+0x80>)
    688c:	4917      	ldr	r1, [pc, #92]	; (68ec <sched_after_mstr_free_offset_get+0x84>)
    688e:	2003      	movs	r0, #3
    6890:	f7fb fcb6 	bl	2200 <bt_log>
    6894:	4040      	eors	r0, r0
    6896:	f380 8811 	msr	BASEPRI, r0
    689a:	f04f 0004 	mov.w	r0, #4
    689e:	df02      	svc	2
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
    68a0:	4631      	mov	r1, r6
    68a2:	f7fe f87b 	bl	499c <ticker_ticks_diff_get>
    68a6:	4602      	mov	r2, r0
    68a8:	4811      	ldr	r0, [pc, #68]	; (68f0 <sched_after_mstr_free_offset_get+0x88>)
    68aa:	2307      	movs	r3, #7
    68ac:	fba2 0100 	umull	r0, r1, r2, r0
    68b0:	fb03 1102 	mla	r1, r3, r2, r1
    68b4:	a30a      	add	r3, pc, #40	; (adr r3, 68e0 <sched_after_mstr_free_offset_get+0x78>)
    68b6:	e9d3 2300 	ldrd	r2, r3, [r3]
    68ba:	f7f9 fcd5 	bl	268 <__aeabi_uldivmod>
    68be:	6823      	ldr	r3, [r4, #0]
    68c0:	4418      	add	r0, r3
	if ((*win_offset_us & BIT(31)) == 0) {
    68c2:	2800      	cmp	r0, #0
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
    68c4:	6020      	str	r0, [r4, #0]
	if ((*win_offset_us & BIT(31)) == 0) {
    68c6:	db05      	blt.n	68d4 <sched_after_mstr_free_offset_get+0x6c>
		u32_t conn_interval_us = conn_interval * 1250;
    68c8:	f240 40e2 	movw	r0, #1250	; 0x4e2
    68cc:	4368      	muls	r0, r5
		while (*win_offset_us > conn_interval_us) {
    68ce:	6823      	ldr	r3, [r4, #0]
    68d0:	4298      	cmp	r0, r3
    68d2:	d301      	bcc.n	68d8 <sched_after_mstr_free_offset_get+0x70>
}
    68d4:	b002      	add	sp, #8
    68d6:	bd70      	pop	{r4, r5, r6, pc}
			*win_offset_us -= conn_interval_us;
    68d8:	1a1b      	subs	r3, r3, r0
    68da:	6023      	str	r3, [r4, #0]
    68dc:	e7f7      	b.n	68ce <sched_after_mstr_free_offset_get+0x66>
    68de:	bf00      	nop
    68e0:	3b9aca00 	.word	0x3b9aca00
    68e4:	00000000 	.word	0x00000000
    68e8:	0000e485 	.word	0x0000e485
    68ec:	0000edc1 	.word	0x0000edc1
    68f0:	1afd498d 	.word	0x1afd498d

000068f4 <mayfly_sched_win_offset_use>:
{
    68f4:	b513      	push	{r0, r1, r4, lr}
	sched_after_mstr_free_offset_get(conn->conn_interval,
    68f6:	f100 036c 	add.w	r3, r0, #108	; 0x6c
{
    68fa:	4604      	mov	r4, r0
	sched_after_mstr_free_offset_get(conn->conn_interval,
    68fc:	6f82      	ldr	r2, [r0, #120]	; 0x78
    68fe:	68c1      	ldr	r1, [r0, #12]
    6900:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    6902:	f7ff ffb1 	bl	6868 <sched_after_mstr_free_offset_get>
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    6906:	a902      	add	r1, sp, #8
    6908:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    690a:	6f60      	ldr	r0, [r4, #116]	; 0x74
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    690c:	f240 42e2 	movw	r2, #1250	; 0x4e2
    6910:	fbb3 f3f2 	udiv	r3, r3, r2
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    6914:	2202      	movs	r2, #2
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    6916:	f821 3d02 	strh.w	r3, [r1, #-2]!
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    691a:	f7f9 fe7e 	bl	61a <memcpy>
}
    691e:	b002      	add	sp, #8
    6920:	bd10      	pop	{r4, pc}
	...

00006924 <ticker_stop_adv_stop>:
{
    6924:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    6926:	4c45      	ldr	r4, [pc, #276]	; (6a3c <ticker_stop_adv_stop+0x118>)
	if (status != TICKER_STATUS_SUCCESS) {
    6928:	b170      	cbz	r0, 6948 <ticker_stop_adv_stop+0x24>
		LL_ASSERT(_radio.ticker_id_stop == RADIO_TICKER_ID_ADV);
    692a:	7ca3      	ldrb	r3, [r4, #18]
    692c:	2b05      	cmp	r3, #5
    692e:	f000 8083 	beq.w	6a38 <ticker_stop_adv_stop+0x114>
    6932:	4a43      	ldr	r2, [pc, #268]	; (6a40 <ticker_stop_adv_stop+0x11c>)
    6934:	4943      	ldr	r1, [pc, #268]	; (6a44 <ticker_stop_adv_stop+0x120>)
		LL_ASSERT(_radio.ticker_id_prepare);
    6936:	2003      	movs	r0, #3
    6938:	f7fb fc62 	bl	2200 <bt_log>
    693c:	4040      	eors	r0, r0
    693e:	f380 8811 	msr	BASEPRI, r0
    6942:	f04f 0004 	mov.w	r0, #4
    6946:	df02      	svc	2
	if ((_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV) ||
    6948:	7c23      	ldrb	r3, [r4, #16]
    694a:	2b05      	cmp	r3, #5
    694c:	d002      	beq.n	6954 <ticker_stop_adv_stop+0x30>
	    (_radio.ticker_id_event == RADIO_TICKER_ID_ADV)) {
    694e:	7c63      	ldrb	r3, [r4, #17]
	if ((_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV) ||
    6950:	2b05      	cmp	r3, #5
    6952:	d162      	bne.n	6a1a <ticker_stop_adv_stop+0xf6>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
    6954:	ab04      	add	r3, sp, #16
    6956:	2202      	movs	r2, #2
    6958:	f843 2d08 	str.w	r2, [r3, #-8]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    695c:	2200      	movs	r2, #0
    695e:	9300      	str	r3, [sp, #0]
    6960:	2101      	movs	r1, #1
    6962:	4b39      	ldr	r3, [pc, #228]	; (6a48 <ticker_stop_adv_stop+0x124>)
    6964:	4610      	mov	r0, r2
    6966:	f7fd ff47 	bl	47f8 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    696a:	2802      	cmp	r0, #2
    696c:	d00d      	beq.n	698a <ticker_stop_adv_stop+0x66>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
    696e:	9802      	ldr	r0, [sp, #8]
    6970:	b1c0      	cbz	r0, 69a4 <ticker_stop_adv_stop+0x80>
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
    6972:	9802      	ldr	r0, [sp, #8]
    6974:	2801      	cmp	r0, #1
    6976:	d15c      	bne.n	6a32 <ticker_stop_adv_stop+0x10e>
		if (_radio.role != ROLE_NONE) {
    6978:	7ce3      	ldrb	r3, [r4, #19]
    697a:	2b00      	cmp	r3, #0
    697c:	d04d      	beq.n	6a1a <ticker_stop_adv_stop+0xf6>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    697e:	4b33      	ldr	r3, [pc, #204]	; (6a4c <ticker_stop_adv_stop+0x128>)
    6980:	2204      	movs	r2, #4
    6982:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    6984:	2200      	movs	r2, #0
    6986:	4611      	mov	r1, r2
    6988:	e043      	b.n	6a12 <ticker_stop_adv_stop+0xee>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    698a:	2201      	movs	r2, #1
    698c:	4611      	mov	r1, r2
    698e:	4610      	mov	r0, r2
    6990:	f7fd f8b8 	bl	3b04 <mayfly_enable>
		while (ret_cb_evt == TICKER_STATUS_BUSY) {
    6994:	9b02      	ldr	r3, [sp, #8]
    6996:	2b02      	cmp	r3, #2
    6998:	d1e9      	bne.n	696e <ticker_stop_adv_stop+0x4a>
			ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    699a:	2101      	movs	r1, #1
    699c:	2000      	movs	r0, #0
    699e:	f7fd ffe5 	bl	496c <ticker_job_sched>
    69a2:	e7f7      	b.n	6994 <ticker_stop_adv_stop+0x70>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
    69a4:	2302      	movs	r3, #2
    69a6:	9303      	str	r3, [sp, #12]
		LL_ASSERT(_radio.ticker_id_prepare);
    69a8:	7c23      	ldrb	r3, [r4, #16]
    69aa:	b913      	cbnz	r3, 69b2 <ticker_stop_adv_stop+0x8e>
    69ac:	4a28      	ldr	r2, [pc, #160]	; (6a50 <ticker_stop_adv_stop+0x12c>)
    69ae:	4929      	ldr	r1, [pc, #164]	; (6a54 <ticker_stop_adv_stop+0x130>)
    69b0:	e7c1      	b.n	6936 <ticker_stop_adv_stop+0x12>
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    69b2:	ab03      	add	r3, sp, #12
    69b4:	2201      	movs	r2, #1
		_radio.ticker_id_prepare = 0;
    69b6:	7420      	strb	r0, [r4, #16]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    69b8:	4611      	mov	r1, r2
    69ba:	9300      	str	r3, [sp, #0]
    69bc:	4b22      	ldr	r3, [pc, #136]	; (6a48 <ticker_stop_adv_stop+0x124>)
    69be:	f7fd ff1b 	bl	47f8 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    69c2:	2802      	cmp	r0, #2
    69c4:	d00f      	beq.n	69e6 <ticker_stop_adv_stop+0xc2>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
    69c6:	9a03      	ldr	r2, [sp, #12]
    69c8:	b1d2      	cbz	r2, 6a00 <ticker_stop_adv_stop+0xdc>
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
    69ca:	9c03      	ldr	r4, [sp, #12]
    69cc:	2c01      	cmp	r4, #1
    69ce:	d130      	bne.n	6a32 <ticker_stop_adv_stop+0x10e>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    69d0:	2200      	movs	r2, #0
    69d2:	4611      	mov	r1, r2
    69d4:	4b20      	ldr	r3, [pc, #128]	; (6a58 <ticker_stop_adv_stop+0x134>)
    69d6:	4620      	mov	r0, r4
    69d8:	f7fd f8bc 	bl	3b54 <mayfly_enqueue>
			LL_ASSERT(!ret);
    69dc:	4602      	mov	r2, r0
    69de:	b330      	cbz	r0, 6a2e <ticker_stop_adv_stop+0x10a>
			LL_ASSERT(!ret);
    69e0:	4a1b      	ldr	r2, [pc, #108]	; (6a50 <ticker_stop_adv_stop+0x12c>)
    69e2:	491e      	ldr	r1, [pc, #120]	; (6a5c <ticker_stop_adv_stop+0x138>)
    69e4:	e7a7      	b.n	6936 <ticker_stop_adv_stop+0x12>
			mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    69e6:	2201      	movs	r2, #1
    69e8:	4611      	mov	r1, r2
    69ea:	4610      	mov	r0, r2
    69ec:	f7fd f88a 	bl	3b04 <mayfly_enable>
			while (ret_cb_m0 == TICKER_STATUS_BUSY) {
    69f0:	9b03      	ldr	r3, [sp, #12]
    69f2:	2b02      	cmp	r3, #2
    69f4:	d1e7      	bne.n	69c6 <ticker_stop_adv_stop+0xa2>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    69f6:	2101      	movs	r1, #1
    69f8:	2000      	movs	r0, #0
    69fa:	f7fd ffb7 	bl	496c <ticker_job_sched>
    69fe:	e7f7      	b.n	69f0 <ticker_stop_adv_stop+0xcc>
			u32_t ticks_xtal_to_start =
    6a00:	69a3      	ldr	r3, [r4, #24]
			if (_radio.advertiser.hdr.ticks_active_to_start >
    6a02:	69e1      	ldr	r1, [r4, #28]
			ticks_xtal_to_start &= ~XON_BITMASK;
    6a04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			if (_radio.advertiser.hdr.ticks_active_to_start >
    6a08:	428b      	cmp	r3, r1
    6a0a:	d210      	bcs.n	6a2e <ticker_stop_adv_stop+0x10a>
				ret = mayfly_enqueue(
    6a0c:	4b12      	ldr	r3, [pc, #72]	; (6a58 <ticker_stop_adv_stop+0x134>)
				ret = mayfly_enqueue(
    6a0e:	4611      	mov	r1, r2
    6a10:	2001      	movs	r0, #1
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    6a12:	f7fd f89f 	bl	3b54 <mayfly_enqueue>
			LL_ASSERT(!ret);
    6a16:	2800      	cmp	r0, #0
    6a18:	d1e2      	bne.n	69e0 <ticker_stop_adv_stop+0xbc>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    6a1a:	2200      	movs	r2, #0
    6a1c:	4b10      	ldr	r3, [pc, #64]	; (6a60 <ticker_stop_adv_stop+0x13c>)
    6a1e:	4611      	mov	r1, r2
    6a20:	2001      	movs	r0, #1
    6a22:	f7fd f897 	bl	3b54 <mayfly_enqueue>
	LL_ASSERT(!retval);
    6a26:	b138      	cbz	r0, 6a38 <ticker_stop_adv_stop+0x114>
    6a28:	4a05      	ldr	r2, [pc, #20]	; (6a40 <ticker_stop_adv_stop+0x11c>)
    6a2a:	490e      	ldr	r1, [pc, #56]	; (6a64 <ticker_stop_adv_stop+0x140>)
    6a2c:	e783      	b.n	6936 <ticker_stop_adv_stop+0x12>
				ret = mayfly_enqueue(
    6a2e:	4b0e      	ldr	r3, [pc, #56]	; (6a68 <ticker_stop_adv_stop+0x144>)
    6a30:	e7ed      	b.n	6a0e <ticker_stop_adv_stop+0xea>
		LL_ASSERT(0);
    6a32:	4a07      	ldr	r2, [pc, #28]	; (6a50 <ticker_stop_adv_stop+0x12c>)
    6a34:	490d      	ldr	r1, [pc, #52]	; (6a6c <ticker_stop_adv_stop+0x148>)
    6a36:	e77e      	b.n	6936 <ticker_stop_adv_stop+0x12>
}
    6a38:	b004      	add	sp, #16
    6a3a:	bd10      	pop	{r4, pc}
    6a3c:	200009f8 	.word	0x200009f8
    6a40:	0000e559 	.word	0x0000e559
    6a44:	0000ee8f 	.word	0x0000ee8f
    6a48:	00005901 	.word	0x00005901
    6a4c:	20004d70 	.word	0x20004d70
    6a50:	0000e53d 	.word	0x0000e53d
    6a54:	0000ecf1 	.word	0x0000ecf1
    6a58:	20004d40 	.word	0x20004d40
    6a5c:	0000ed43 	.word	0x0000ed43
    6a60:	20004d10 	.word	0x20004d10
    6a64:	0000e810 	.word	0x0000e810
    6a68:	20004de0 	.word	0x20004de0
    6a6c:	0000d86b 	.word	0x0000d86b

00006a70 <isr_scan_tgta_check.isra.29>:
static inline bool isr_scan_tgta_check(bool init, struct pdu_adv *pdu,
    6a70:	b570      	push	{r4, r5, r6, lr}
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    6a72:	4c16      	ldr	r4, [pc, #88]	; (6acc <isr_scan_tgta_check.isra.29+0x5c>)
    6a74:	7803      	ldrb	r3, [r0, #0]
    6a76:	f894 264d 	ldrb.w	r2, [r4, #1613]	; 0x64d
			BDADDR_SIZE) == 0))) ||
    6a7a:	09db      	lsrs	r3, r3, #7
    6a7c:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
static inline bool isr_scan_tgta_check(bool init, struct pdu_adv *pdu,
    6a80:	4605      	mov	r5, r0
    6a82:	460e      	mov	r6, r1
			BDADDR_SIZE) == 0))) ||
    6a84:	d007      	beq.n	6a96 <isr_scan_tgta_check.isra.29+0x26>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    6a86:	f894 064d 	ldrb.w	r0, [r4, #1613]	; 0x64d
    6a8a:	f3c0 1001 	ubfx	r0, r0, #4, #2
    6a8e:	f010 0002 	ands.w	r0, r0, #2
    6a92:	d10b      	bne.n	6aac <isr_scan_tgta_check.isra.29+0x3c>
    6a94:	bd70      	pop	{r4, r5, r6, pc}
		(memcmp(&_radio.scanner.init_addr[0],
    6a96:	f100 0108 	add.w	r1, r0, #8
    6a9a:	2206      	movs	r2, #6
    6a9c:	f204 604e 	addw	r0, r4, #1614	; 0x64e
    6aa0:	f7f9 fda6 	bl	5f0 <memcmp>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    6aa4:	2800      	cmp	r0, #0
    6aa6:	d1ee      	bne.n	6a86 <isr_scan_tgta_check.isra.29+0x16>
			BDADDR_SIZE) == 0))) ||
    6aa8:	2001      	movs	r0, #1
    6aaa:	bd70      	pop	{r4, r5, r6, pc}
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    6aac:	f995 3000 	ldrsb.w	r3, [r5]
    6ab0:	2b00      	cmp	r3, #0
    6ab2:	da09      	bge.n	6ac8 <isr_scan_tgta_check.isra.29+0x58>
	    (pdu->rx_addr != 0) &&
    6ab4:	7b6b      	ldrb	r3, [r5, #13]
    6ab6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    6aba:	2b40      	cmp	r3, #64	; 0x40
    6abc:	d104      	bne.n	6ac8 <isr_scan_tgta_check.isra.29+0x58>
		if (dir_report) {
    6abe:	2e00      	cmp	r6, #0
    6ac0:	d0f2      	beq.n	6aa8 <isr_scan_tgta_check.isra.29+0x38>
			*dir_report = true;
    6ac2:	2001      	movs	r0, #1
    6ac4:	7030      	strb	r0, [r6, #0]
    6ac6:	bd70      	pop	{r4, r5, r6, pc}
			BDADDR_SIZE) == 0))) ||
    6ac8:	2000      	movs	r0, #0
}
    6aca:	bd70      	pop	{r4, r5, r6, pc}
    6acc:	200009f8 	.word	0x200009f8

00006ad0 <packet_rx_enqueue>:
{
    6ad0:	b510      	push	{r4, lr}
	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
    6ad2:	4a19      	ldr	r2, [pc, #100]	; (6b38 <packet_rx_enqueue+0x68>)
    6ad4:	f892 36cd 	ldrb.w	r3, [r2, #1741]	; 0x6cd
    6ad8:	f892 16ce 	ldrb.w	r1, [r2, #1742]	; 0x6ce
    6adc:	4299      	cmp	r1, r3
    6ade:	d10a      	bne.n	6af6 <packet_rx_enqueue+0x26>
    6ae0:	4a16      	ldr	r2, [pc, #88]	; (6b3c <packet_rx_enqueue+0x6c>)
    6ae2:	4917      	ldr	r1, [pc, #92]	; (6b40 <packet_rx_enqueue+0x70>)
	LL_ASSERT(link);
    6ae4:	2003      	movs	r0, #3
    6ae6:	f7fb fb8b 	bl	2200 <bt_log>
    6aea:	4040      	eors	r0, r0
    6aec:	f380 8811 	msr	BASEPRI, r0
    6af0:	f04f 0004 	mov.w	r0, #4
    6af4:	df02      	svc	2
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    6af6:	f892 16cd 	ldrb.w	r1, [r2, #1741]	; 0x6cd
    6afa:	f8d2 36c8 	ldr.w	r3, [r2, #1736]	; 0x6c8
    6afe:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    6b02:	f892 3704 	ldrb.w	r3, [r2, #1796]	; 0x704
	link = node_rx->hdr.onion.link;
    6b06:	6808      	ldr	r0, [r1, #0]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    6b08:	700b      	strb	r3, [r1, #0]
	last = _radio.packet_rx_last + 1;
    6b0a:	f892 36cd 	ldrb.w	r3, [r2, #1741]	; 0x6cd
	if (last == _radio.packet_rx_count) {
    6b0e:	f892 46cc 	ldrb.w	r4, [r2, #1740]	; 0x6cc
	last = _radio.packet_rx_last + 1;
    6b12:	3301      	adds	r3, #1
    6b14:	b2db      	uxtb	r3, r3
		last = 0;
    6b16:	429c      	cmp	r4, r3
    6b18:	bf08      	it	eq
    6b1a:	2300      	moveq	r3, #0
	_radio.packet_rx_last = last;
    6b1c:	f882 36cd 	strb.w	r3, [r2, #1741]	; 0x6cd
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    6b20:	f202 62dc 	addw	r2, r2, #1756	; 0x6dc
    6b24:	f7fc ffa6 	bl	3a74 <memq_enqueue>
	LL_ASSERT(link);
    6b28:	b910      	cbnz	r0, 6b30 <packet_rx_enqueue+0x60>
    6b2a:	4a04      	ldr	r2, [pc, #16]	; (6b3c <packet_rx_enqueue+0x6c>)
    6b2c:	4905      	ldr	r1, [pc, #20]	; (6b44 <packet_rx_enqueue+0x74>)
    6b2e:	e7d9      	b.n	6ae4 <packet_rx_enqueue+0x14>
}
    6b30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
    6b34:	f003 bc82 	b.w	a43c <radio_event_callback>
    6b38:	200009f8 	.word	0x200009f8
    6b3c:	0000e5e6 	.word	0x0000e5e6
    6b40:	0000eba3 	.word	0x0000eba3
    6b44:	0000ebea 	.word	0x0000ebea

00006b48 <mayfly_adv_stop>:
{
    6b48:	b510      	push	{r4, lr}
	node_rx = packet_rx_reserve_get(1);
    6b4a:	2001      	movs	r0, #1
    6b4c:	f7fe ff02 	bl	5954 <packet_rx_reserve_get>
	LL_ASSERT(node_rx);
    6b50:	4604      	mov	r4, r0
    6b52:	b950      	cbnz	r0, 6b6a <mayfly_adv_stop+0x22>
    6b54:	4a0d      	ldr	r2, [pc, #52]	; (6b8c <mayfly_adv_stop+0x44>)
    6b56:	490e      	ldr	r1, [pc, #56]	; (6b90 <mayfly_adv_stop+0x48>)
    6b58:	2003      	movs	r0, #3
    6b5a:	f7fb fb51 	bl	2200 <bt_log>
    6b5e:	4040      	eors	r0, r0
    6b60:	f380 8811 	msr	BASEPRI, r0
    6b64:	f04f 0004 	mov.w	r0, #4
    6b68:	df02      	svc	2
	node_rx->hdr.handle = 0xffff;
    6b6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    6b6e:	80c3      	strh	r3, [r0, #6]
	node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    6b70:	2306      	movs	r3, #6
    6b72:	7103      	strb	r3, [r0, #4]
	memset(radio_le_conn_cmplt, 0x00, sizeof(struct radio_le_conn_cmplt));
    6b74:	2210      	movs	r2, #16
    6b76:	2100      	movs	r1, #0
    6b78:	300b      	adds	r0, #11
    6b7a:	f7f9 fd7a 	bl	672 <memset>
	radio_le_conn_cmplt->status = 0x3c;
    6b7e:	233c      	movs	r3, #60	; 0x3c
    6b80:	72e3      	strb	r3, [r4, #11]
}
    6b82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	packet_rx_enqueue();
    6b86:	f7ff bfa3 	b.w	6ad0 <packet_rx_enqueue>
    6b8a:	bf00      	nop
    6b8c:	0000e52d 	.word	0x0000e52d
    6b90:	0000eae7 	.word	0x0000eae7

00006b94 <terminate_ind_rx_enqueue>:
{
    6b94:	b510      	push	{r4, lr}
    6b96:	4603      	mov	r3, r0
    6b98:	460a      	mov	r2, r1
	node_rx = (void *)&conn->llcp_terminate.radio_pdu_node_rx;
    6b9a:	f100 019c 	add.w	r1, r0, #156	; 0x9c
	LL_ASSERT(node_rx->hdr.onion.link);
    6b9e:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
    6ba2:	b950      	cbnz	r0, 6bba <terminate_ind_rx_enqueue+0x26>
    6ba4:	4a11      	ldr	r2, [pc, #68]	; (6bec <terminate_ind_rx_enqueue+0x58>)
    6ba6:	4912      	ldr	r1, [pc, #72]	; (6bf0 <terminate_ind_rx_enqueue+0x5c>)
	LL_ASSERT(link);
    6ba8:	2003      	movs	r0, #3
    6baa:	f7fb fb29 	bl	2200 <bt_log>
    6bae:	4040      	eors	r0, r0
    6bb0:	f380 8811 	msr	BASEPRI, r0
    6bb4:	f04f 0004 	mov.w	r0, #4
    6bb8:	df02      	svc	2
	node_rx->hdr.handle = conn->handle;
    6bba:	8c1c      	ldrh	r4, [r3, #32]
    6bbc:	f8a3 40a2 	strh.w	r4, [r3, #162]	; 0xa2
	*((u8_t *)node_rx->pdu_data) = reason;
    6bc0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    6bc4:	2407      	movs	r4, #7
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    6bc6:	4a0b      	ldr	r2, [pc, #44]	; (6bf4 <terminate_ind_rx_enqueue+0x60>)
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    6bc8:	f883 40a0 	strb.w	r4, [r3, #160]	; 0xa0
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    6bcc:	f892 4704 	ldrb.w	r4, [r2, #1796]	; 0x704
    6bd0:	f883 409c 	strb.w	r4, [r3, #156]	; 0x9c
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    6bd4:	f202 62dc 	addw	r2, r2, #1756	; 0x6dc
    6bd8:	f7fc ff4c 	bl	3a74 <memq_enqueue>
	LL_ASSERT(link);
    6bdc:	b910      	cbnz	r0, 6be4 <terminate_ind_rx_enqueue+0x50>
    6bde:	4a03      	ldr	r2, [pc, #12]	; (6bec <terminate_ind_rx_enqueue+0x58>)
    6be0:	4905      	ldr	r1, [pc, #20]	; (6bf8 <terminate_ind_rx_enqueue+0x64>)
    6be2:	e7e1      	b.n	6ba8 <terminate_ind_rx_enqueue+0x14>
}
    6be4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
    6be8:	f003 bc28 	b.w	a43c <radio_event_callback>
    6bec:	0000e61f 	.word	0x0000e61f
    6bf0:	0000ee2f 	.word	0x0000ee2f
    6bf4:	200009f8 	.word	0x200009f8
    6bf8:	0000ebea 	.word	0x0000ebea

00006bfc <isr_rx_scan_report.isra.36>:
static u32_t isr_rx_scan_report(u8_t rssi_ready, u8_t rl_idx, bool dir_report)
    6bfc:	b570      	push	{r4, r5, r6, lr}
    6bfe:	4606      	mov	r6, r0
	node_rx = packet_rx_reserve_get(3);
    6c00:	2003      	movs	r0, #3
    6c02:	f7fe fea7 	bl	5954 <packet_rx_reserve_get>
	if (node_rx == 0) {
    6c06:	b368      	cbz	r0, 6c64 <isr_rx_scan_report.isra.36+0x68>
	node_rx->hdr.handle = 0xffff;
    6c08:	f64f 73ff 	movw	r3, #65535	; 0xffff
    6c0c:	80c3      	strh	r3, [r0, #6]
	} else if (_radio.scanner.phy) {
    6c0e:	4b16      	ldr	r3, [pc, #88]	; (6c68 <isr_rx_scan_report.isra.36+0x6c>)
    6c10:	f893 364d 	ldrb.w	r3, [r3, #1613]	; 0x64d
    6c14:	075a      	lsls	r2, r3, #29
    6c16:	d021      	beq.n	6c5c <isr_rx_scan_report.isra.36+0x60>
		switch (_radio.scanner.phy) {
    6c18:	f3c3 0302 	ubfx	r3, r3, #0, #3
    6c1c:	b2da      	uxtb	r2, r3
    6c1e:	2a01      	cmp	r2, #1
    6c20:	d00c      	beq.n	6c3c <isr_rx_scan_report.isra.36+0x40>
    6c22:	2a04      	cmp	r2, #4
    6c24:	d00b      	beq.n	6c3e <isr_rx_scan_report.isra.36+0x42>
			LL_ASSERT(0);
    6c26:	4a11      	ldr	r2, [pc, #68]	; (6c6c <isr_rx_scan_report.isra.36+0x70>)
    6c28:	4911      	ldr	r1, [pc, #68]	; (6c70 <isr_rx_scan_report.isra.36+0x74>)
    6c2a:	2003      	movs	r0, #3
    6c2c:	f7fb fae8 	bl	2200 <bt_log>
    6c30:	4040      	eors	r0, r0
    6c32:	f380 8811 	msr	BASEPRI, r0
    6c36:	f04f 0004 	mov.w	r0, #4
    6c3a:	df02      	svc	2
			node_rx->hdr.type = NODE_RX_TYPE_EXT_1M_REPORT;
    6c3c:	2303      	movs	r3, #3
			     pdu_adv_rx->len] =
    6c3e:	7a44      	ldrb	r4, [r0, #9]
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    6c40:	7103      	strb	r3, [r0, #4]
	pdu_adv_rx = (void *)node_rx->pdu_data;
    6c42:	f100 0508 	add.w	r5, r0, #8
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    6c46:	3402      	adds	r4, #2
			     pdu_adv_rx->len] =
    6c48:	b156      	cbz	r6, 6c60 <isr_rx_scan_report.isra.36+0x64>
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;
    6c4a:	f004 faab 	bl	b1a4 <radio_rssi_get>
			     pdu_adv_rx->len] =
    6c4e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    6c52:	5528      	strb	r0, [r5, r4]
	packet_rx_enqueue();
    6c54:	f7ff ff3c 	bl	6ad0 <packet_rx_enqueue>
	return 0;
    6c58:	2000      	movs	r0, #0
    6c5a:	bd70      	pop	{r4, r5, r6, pc}
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    6c5c:	2302      	movs	r3, #2
    6c5e:	e7ee      	b.n	6c3e <isr_rx_scan_report.isra.36+0x42>
			     pdu_adv_rx->len] =
    6c60:	207f      	movs	r0, #127	; 0x7f
    6c62:	e7f6      	b.n	6c52 <isr_rx_scan_report.isra.36+0x56>
		return 1;
    6c64:	2001      	movs	r0, #1
}
    6c66:	bd70      	pop	{r4, r5, r6, pc}
    6c68:	200009f8 	.word	0x200009f8
    6c6c:	0000e2dd 	.word	0x0000e2dd
    6c70:	0000d86b 	.word	0x0000d86b

00006c74 <prepare_normal_set>:
{
    6c74:	b530      	push	{r4, r5, lr}
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    6c76:	6804      	ldr	r4, [r0, #0]
    6c78:	2c00      	cmp	r4, #0
{
    6c7a:	b089      	sub	sp, #36	; 0x24
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    6c7c:	da22      	bge.n	6cc4 <prepare_normal_set+0x50>
		u32_t ticks_prepare_to_start =
    6c7e:	6843      	ldr	r3, [r0, #4]
    6c80:	6885      	ldr	r5, [r0, #8]
		ticker_status =
    6c82:	9006      	str	r0, [sp, #24]
		u32_t ticks_drift_minus = (hdr->ticks_xtal_to_start &
    6c84:	429d      	cmp	r5, r3
    6c86:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
    6c8a:	bf34      	ite	cc
    6c8c:	1ae4      	subcc	r4, r4, r3
    6c8e:	1b64      	subcs	r4, r4, r5
		ticker_status =
    6c90:	4b0d      	ldr	r3, [pc, #52]	; (6cc8 <prepare_normal_set+0x54>)
    6c92:	9305      	str	r3, [sp, #20]
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    6c94:	b2a4      	uxth	r4, r4
		ticker_status =
    6c96:	2300      	movs	r3, #0
    6c98:	9304      	str	r3, [sp, #16]
    6c9a:	9303      	str	r3, [sp, #12]
    6c9c:	9302      	str	r3, [sp, #8]
    6c9e:	4618      	mov	r0, r3
    6ca0:	9401      	str	r4, [sp, #4]
    6ca2:	9400      	str	r4, [sp, #0]
    6ca4:	f7fd fd5a 	bl	475c <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    6ca8:	f030 0302 	bics.w	r3, r0, #2
    6cac:	d00a      	beq.n	6cc4 <prepare_normal_set+0x50>
    6cae:	4a07      	ldr	r2, [pc, #28]	; (6ccc <prepare_normal_set+0x58>)
    6cb0:	4907      	ldr	r1, [pc, #28]	; (6cd0 <prepare_normal_set+0x5c>)
    6cb2:	2003      	movs	r0, #3
    6cb4:	f7fb faa4 	bl	2200 <bt_log>
    6cb8:	4040      	eors	r0, r0
    6cba:	f380 8811 	msr	BASEPRI, r0
    6cbe:	f04f 0004 	mov.w	r0, #4
    6cc2:	df02      	svc	2
}
    6cc4:	b009      	add	sp, #36	; 0x24
    6cc6:	bd30      	pop	{r4, r5, pc}
    6cc8:	00005911 	.word	0x00005911
    6ccc:	0000e43d 	.word	0x0000e43d
    6cd0:	0000e695 	.word	0x0000e695

00006cd4 <preempt_calc>:
{
    6cd4:	b570      	push	{r4, r5, r6, lr}
    6cd6:	4614      	mov	r4, r2
    6cd8:	460e      	mov	r6, r1
    6cda:	4605      	mov	r5, r0
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);
    6cdc:	f7fd fe5c 	bl	4998 <ticker_ticks_now_get>
	u32_t diff =
    6ce0:	4621      	mov	r1, r4
    6ce2:	f7fd fe5b 	bl	499c <ticker_ticks_diff_get>
	diff += 3;
    6ce6:	1cc4      	adds	r4, r0, #3
	if (diff > HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
    6ce8:	2c09      	cmp	r4, #9
    6cea:	f04f 0000 	mov.w	r0, #0
    6cee:	d90d      	bls.n	6d0c <preempt_calc+0x38>
    6cf0:	f7ff fbb8 	bl	6464 <mayfly_xtal_retain.part.15>
		prepare_normal_set(hdr, RADIO_TICKER_USER_ID_WORKER, ticker_id);
    6cf4:	4632      	mov	r2, r6
    6cf6:	2100      	movs	r1, #0
    6cf8:	4628      	mov	r0, r5
    6cfa:	f7ff ffbb 	bl	6c74 <prepare_normal_set>
		diff += hdr->ticks_preempt_to_start;
    6cfe:	68ab      	ldr	r3, [r5, #8]
    6d00:	441c      	add	r4, r3
		if (diff <
    6d02:	2c26      	cmp	r4, #38	; 0x26
    6d04:	d800      	bhi.n	6d08 <preempt_calc+0x34>
			hdr->ticks_preempt_to_start = diff;
    6d06:	60ac      	str	r4, [r5, #8]
		return 1;
    6d08:	2001      	movs	r0, #1
}
    6d0a:	bd70      	pop	{r4, r5, r6, pc}
    6d0c:	bd70      	pop	{r4, r5, r6, pc}
	...

00006d10 <event_ext_adv>:
	LL_ASSERT(_radio.role == ROLE_NONE);
    6d10:	4b49      	ldr	r3, [pc, #292]	; (6e38 <event_ext_adv+0x128>)
    6d12:	7cda      	ldrb	r2, [r3, #19]
{
    6d14:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
    6d16:	f002 01ff 	and.w	r1, r2, #255	; 0xff
{
    6d1a:	4605      	mov	r5, r0
    6d1c:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    6d1e:	b152      	cbz	r2, 6d36 <event_ext_adv+0x26>
    6d20:	4a46      	ldr	r2, [pc, #280]	; (6e3c <event_ext_adv+0x12c>)
    6d22:	4947      	ldr	r1, [pc, #284]	; (6e40 <event_ext_adv+0x130>)
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_EXT_ADV);
    6d24:	2003      	movs	r0, #3
    6d26:	f7fb fa6b 	bl	2200 <bt_log>
    6d2a:	4040      	eors	r0, r0
    6d2c:	f380 8811 	msr	BASEPRI, r0
    6d30:	f04f 0004 	mov.w	r0, #4
    6d34:	df02      	svc	2
    6d36:	7c1b      	ldrb	r3, [r3, #16]
    6d38:	b2db      	uxtb	r3, r3
    6d3a:	2b08      	cmp	r3, #8
    6d3c:	d002      	beq.n	6d44 <event_ext_adv+0x34>
    6d3e:	4a3f      	ldr	r2, [pc, #252]	; (6e3c <event_ext_adv+0x12c>)
    6d40:	4940      	ldr	r1, [pc, #256]	; (6e44 <event_ext_adv+0x134>)
    6d42:	e7ef      	b.n	6d24 <event_ext_adv+0x14>
	_radio.role = ROLE_ADV;
    6d44:	2201      	movs	r2, #1
    6d46:	74e2      	strb	r2, [r4, #19]
	_radio.ticker_id_prepare = 0;
    6d48:	7421      	strb	r1, [r4, #16]
	if (_radio.advertiser.adv_data.first !=
    6d4a:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
	_radio.ticker_id_event = RADIO_TICKER_ID_EXT_ADV;
    6d4e:	7463      	strb	r3, [r4, #17]
	if (_radio.advertiser.adv_data.first !=
    6d50:	f894 322d 	ldrb.w	r3, [r4, #557]	; 0x22d
	_radio.ticks_anchor = ticks_at_expire;
    6d54:	60a0      	str	r0, [r4, #8]
	if (_radio.advertiser.adv_data.first !=
    6d56:	429a      	cmp	r2, r3
    6d58:	d006      	beq.n	6d68 <event_ext_adv+0x58>
		first = _radio.advertiser.adv_data.first + 1;
    6d5a:	3301      	adds	r3, #1
    6d5c:	b2db      	uxtb	r3, r3
			first = 0;
    6d5e:	2b02      	cmp	r3, #2
    6d60:	bf08      	it	eq
    6d62:	2300      	moveq	r3, #0
		_radio.advertiser.adv_data.first = first;
    6d64:	f884 322d 	strb.w	r3, [r4, #557]	; 0x22d
	if (_radio.advertiser.scan_data.first != _radio.
    6d68:	f894 3635 	ldrb.w	r3, [r4, #1589]	; 0x635
    6d6c:	f894 2636 	ldrb.w	r2, [r4, #1590]	; 0x636
    6d70:	429a      	cmp	r2, r3
    6d72:	d006      	beq.n	6d82 <event_ext_adv+0x72>
		first = _radio.advertiser.scan_data.first + 1;
    6d74:	3301      	adds	r3, #1
    6d76:	b2db      	uxtb	r3, r3
			first = 0;
    6d78:	2b02      	cmp	r3, #2
    6d7a:	bf08      	it	eq
    6d7c:	2300      	moveq	r3, #0
		_radio.advertiser.scan_data.first = first;
    6d7e:	f884 3635 	strb.w	r3, [r4, #1589]	; 0x635
	pdu = (void *)_radio.advertiser.adv_data.data
    6d82:	f894 322d 	ldrb.w	r3, [r4, #557]	; 0x22d
	aux_pdu = (void *)_radio.advertiser.aux_adv_data.data
    6d86:	f894 0432 	ldrb.w	r0, [r4, #1074]	; 0x432
	pdu = (void *)_radio.advertiser.adv_data.data
    6d8a:	eb03 2303 	add.w	r3, r3, r3, lsl #8
	aux_pdu = (void *)_radio.advertiser.aux_adv_data.data
    6d8e:	eb00 2000 	add.w	r0, r0, r0, lsl #8
	pdu = (void *)_radio.advertiser.adv_data.data
    6d92:	f103 062b 	add.w	r6, r3, #43	; 0x2b
	aux_pdu = (void *)_radio.advertiser.aux_adv_data.data
    6d96:	f200 202f 	addw	r0, r0, #559	; 0x22f
			radio_pkt_tx_set(aux_pdu);
    6d9a:	4420      	add	r0, r4
    6d9c:	f004 f95a 	bl	b054 <radio_pkt_tx_set>
			if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
    6da0:	5da3      	ldrb	r3, [r4, r6]
    6da2:	f003 030f 	and.w	r3, r3, #15
    6da6:	2b02      	cmp	r3, #2
    6da8:	d030      	beq.n	6e0c <event_ext_adv+0xfc>
    6daa:	2b07      	cmp	r3, #7
    6dac:	d02e      	beq.n	6e0c <event_ext_adv+0xfc>
				_radio.state = STATE_TX;
    6dae:	2302      	movs	r3, #2
				radio_tmr_tifs_set(RADIO_TIFS);
    6db0:	2096      	movs	r0, #150	; 0x96
				_radio.state = STATE_TX;
    6db2:	7523      	strb	r3, [r4, #20]
				radio_tmr_tifs_set(RADIO_TIFS);
    6db4:	f004 fa58 	bl	b268 <radio_tmr_tifs_set>
				radio_switch_complete_and_rx(0);
    6db8:	2000      	movs	r0, #0
    6dba:	f004 f9c5 	bl	b148 <radio_switch_complete_and_rx>
			_radio.ext_advertiser.current_slot = 0;
    6dbe:	2300      	movs	r3, #0
				chan_set(3);
    6dc0:	2003      	movs	r0, #3
			_radio.ext_advertiser.current_slot = 0;
    6dc2:	f884 3681 	strb.w	r3, [r4, #1665]	; 0x681
				chan_set(3);
    6dc6:	f7fe ff9d 	bl	5d04 <chan_set>
	if (_radio.advertiser.filter_policy) {
    6dca:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    6dce:	079b      	lsls	r3, r3, #30
    6dd0:	d007      	beq.n	6de2 <event_ext_adv+0xd2>
		struct ll_filter *wl = ctrl_filter_get(true);
    6dd2:	2001      	movs	r0, #1
    6dd4:	f003 fea4 	bl	ab20 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
    6dd8:	1c82      	adds	r2, r0, #2
    6dda:	7841      	ldrb	r1, [r0, #1]
    6ddc:	7800      	ldrb	r0, [r0, #0]
    6dde:	f004 f9f9 	bl	b1d4 <radio_filter_configure>
	remainder_us = radio_tmr_start(1, ticks_at_expire +
    6de2:	68e2      	ldr	r2, [r4, #12]
    6de4:	f105 0109 	add.w	r1, r5, #9
    6de8:	2001      	movs	r0, #1
    6dea:	f004 fa49 	bl	b280 <radio_tmr_start>
	radio_tmr_end_capture();
    6dee:	f004 fb17 	bl	b420 <radio_tmr_end_capture>
	if (preempt_calc(&_radio.advertiser.hdr, RADIO_TICKER_ID_ADV,
    6df2:	462a      	mov	r2, r5
    6df4:	2105      	movs	r1, #5
    6df6:	4814      	ldr	r0, [pc, #80]	; (6e48 <event_ext_adv+0x138>)
    6df8:	f7ff ff6c 	bl	6cd4 <preempt_calc>
    6dfc:	4603      	mov	r3, r0
    6dfe:	b180      	cbz	r0, 6e22 <event_ext_adv+0x112>
		_radio.state = STATE_STOP;
    6e00:	2304      	movs	r3, #4
    6e02:	7523      	strb	r3, [r4, #20]
}
    6e04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		radio_disable();
    6e08:	f004 b944 	b.w	b094 <radio_disable>
				_radio.state = STATE_CLOSE;
    6e0c:	2303      	movs	r3, #3
    6e0e:	7523      	strb	r3, [r4, #20]
				_radio.advertiser.ext_adv = 1;
    6e10:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    6e14:	f043 0301 	orr.w	r3, r3, #1
    6e18:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
				radio_switch_complete_and_disable();
    6e1c:	f004 f9aa 	bl	b174 <radio_switch_complete_and_disable>
    6e20:	e7cd      	b.n	6dbe <event_ext_adv+0xae>
		ticker_status =
    6e22:	4a0a      	ldr	r2, [pc, #40]	; (6e4c <event_ext_adv+0x13c>)
    6e24:	4601      	mov	r1, r0
    6e26:	f7fd fd65 	bl	48f4 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    6e2a:	f030 0302 	bics.w	r3, r0, #2
    6e2e:	d002      	beq.n	6e36 <event_ext_adv+0x126>
    6e30:	4a02      	ldr	r2, [pc, #8]	; (6e3c <event_ext_adv+0x12c>)
    6e32:	4907      	ldr	r1, [pc, #28]	; (6e50 <event_ext_adv+0x140>)
    6e34:	e776      	b.n	6d24 <event_ext_adv+0x14>
    6e36:	bd70      	pop	{r4, r5, r6, pc}
    6e38:	200009f8 	.word	0x200009f8
    6e3c:	0000e51f 	.word	0x0000e51f
    6e40:	0000e70a 	.word	0x0000e70a
    6e44:	0000e738 	.word	0x0000e738
    6e48:	20000a10 	.word	0x20000a10
    6e4c:	000063d1 	.word	0x000063d1
    6e50:	0000e695 	.word	0x0000e695

00006e54 <adv_scan_configure.constprop.47>:
static void adv_scan_configure(u8_t phy, u8_t flags)
    6e54:	b537      	push	{r0, r1, r2, r4, r5, lr}
	u32_t aa = 0x8e89bed6;
    6e56:	ad02      	add	r5, sp, #8
    6e58:	4b10      	ldr	r3, [pc, #64]	; (6e9c <adv_scan_configure.constprop.47+0x48>)
    6e5a:	f845 3d04 	str.w	r3, [r5, #-4]!
static void adv_scan_configure(u8_t phy, u8_t flags)
    6e5e:	4604      	mov	r4, r0
	radio_reset();
    6e60:	f004 f864 	bl	af2c <radio_reset>
	radio_tx_power_set(0);
    6e64:	2000      	movs	r0, #0
    6e66:	f004 f88b 	bl	af80 <radio_tx_power_set>
	radio_isr_set(isr);
    6e6a:	480d      	ldr	r0, [pc, #52]	; (6ea0 <adv_scan_configure.constprop.47+0x4c>)
    6e6c:	f004 f828 	bl	aec0 <radio_isr_set>
	radio_phy_set(phy, flags);
    6e70:	2101      	movs	r1, #1
    6e72:	4620      	mov	r0, r4
    6e74:	f004 f874 	bl	af60 <radio_phy_set>
	radio_aa_set((u8_t *)&aa);
    6e78:	4628      	mov	r0, r5
    6e7a:	f004 f89f 	bl	afbc <radio_aa_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, (phy << 1));
    6e7e:	0062      	lsls	r2, r4, #1
    6e80:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    6e84:	21ff      	movs	r1, #255	; 0xff
    6e86:	2008      	movs	r0, #8
    6e88:	f004 f8b0 	bl	afec <radio_pkt_configure>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    6e8c:	4905      	ldr	r1, [pc, #20]	; (6ea4 <adv_scan_configure.constprop.47+0x50>)
    6e8e:	f240 605b 	movw	r0, #1627	; 0x65b
    6e92:	f004 f93b 	bl	b10c <radio_crc_configure>
}
    6e96:	b003      	add	sp, #12
    6e98:	bd30      	pop	{r4, r5, pc}
    6e9a:	bf00      	nop
    6e9c:	8e89bed6 	.word	0x8e89bed6
    6ea0:	00008181 	.word	0x00008181
    6ea4:	00555555 	.word	0x00555555

00006ea8 <event_adv>:
	LL_ASSERT(_radio.role == ROLE_NONE);
    6ea8:	4b2e      	ldr	r3, [pc, #184]	; (6f64 <event_adv+0xbc>)
    6eaa:	7cda      	ldrb	r2, [r3, #19]
{
    6eac:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
    6eae:	f002 01ff 	and.w	r1, r2, #255	; 0xff
{
    6eb2:	4605      	mov	r5, r0
    6eb4:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    6eb6:	b152      	cbz	r2, 6ece <event_adv+0x26>
    6eb8:	4a2b      	ldr	r2, [pc, #172]	; (6f68 <event_adv+0xc0>)
    6eba:	492c      	ldr	r1, [pc, #176]	; (6f6c <event_adv+0xc4>)
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV);
    6ebc:	2003      	movs	r0, #3
    6ebe:	f7fb f99f 	bl	2200 <bt_log>
    6ec2:	4040      	eors	r0, r0
    6ec4:	f380 8811 	msr	BASEPRI, r0
    6ec8:	f04f 0004 	mov.w	r0, #4
    6ecc:	df02      	svc	2
    6ece:	7c1b      	ldrb	r3, [r3, #16]
    6ed0:	b2db      	uxtb	r3, r3
    6ed2:	2b05      	cmp	r3, #5
    6ed4:	d002      	beq.n	6edc <event_adv+0x34>
    6ed6:	4a24      	ldr	r2, [pc, #144]	; (6f68 <event_adv+0xc0>)
    6ed8:	4925      	ldr	r1, [pc, #148]	; (6f70 <event_adv+0xc8>)
    6eda:	e7ef      	b.n	6ebc <event_adv+0x14>
	_radio.ticks_anchor = ticks_at_expire;
    6edc:	60a0      	str	r0, [r4, #8]
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    6ede:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
	_radio.role = ROLE_ADV;
    6ee2:	2601      	movs	r6, #1
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    6ee4:	f3c0 0042 	ubfx	r0, r0, #1, #3
	_radio.role = ROLE_ADV;
    6ee8:	74e6      	strb	r6, [r4, #19]
	_radio.ticker_id_prepare = 0;
    6eea:	7421      	strb	r1, [r4, #16]
	_radio.ticker_id_event = RADIO_TICKER_ID_ADV;
    6eec:	7463      	strb	r3, [r4, #17]
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    6eee:	f7ff ffb1 	bl	6e54 <adv_scan_configure.constprop.47>
	_radio.advertiser.chan_map_current = _radio.advertiser.chan_map;
    6ef2:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    6ef6:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    6efa:	f3c3 1302 	ubfx	r3, r3, #4, #3
    6efe:	f363 0202 	bfi	r2, r3, #0, #3
    6f02:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	adv_setup();
    6f06:	f7fe fff5 	bl	5ef4 <adv_setup>
	if (_radio.advertiser.filter_policy) {
    6f0a:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    6f0e:	079b      	lsls	r3, r3, #30
    6f10:	d007      	beq.n	6f22 <event_adv+0x7a>
		struct ll_filter *wl = ctrl_filter_get(true);
    6f12:	4630      	mov	r0, r6
    6f14:	f003 fe04 	bl	ab20 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
    6f18:	1c82      	adds	r2, r0, #2
    6f1a:	7841      	ldrb	r1, [r0, #1]
    6f1c:	7800      	ldrb	r0, [r0, #0]
    6f1e:	f004 f959 	bl	b1d4 <radio_filter_configure>
	remainder_us = radio_tmr_start(1, ticks_at_expire +
    6f22:	68e2      	ldr	r2, [r4, #12]
    6f24:	f105 0109 	add.w	r1, r5, #9
    6f28:	2001      	movs	r0, #1
    6f2a:	f004 f9a9 	bl	b280 <radio_tmr_start>
	radio_tmr_end_capture();
    6f2e:	f004 fa77 	bl	b420 <radio_tmr_end_capture>
	if (preempt_calc(&_radio.advertiser.hdr, RADIO_TICKER_ID_ADV,
    6f32:	462a      	mov	r2, r5
    6f34:	2105      	movs	r1, #5
    6f36:	480f      	ldr	r0, [pc, #60]	; (6f74 <event_adv+0xcc>)
    6f38:	f7ff fecc 	bl	6cd4 <preempt_calc>
    6f3c:	4603      	mov	r3, r0
    6f3e:	b128      	cbz	r0, 6f4c <event_adv+0xa4>
		_radio.state = STATE_STOP;
    6f40:	2304      	movs	r3, #4
    6f42:	7523      	strb	r3, [r4, #20]
}
    6f44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		radio_disable();
    6f48:	f004 b8a4 	b.w	b094 <radio_disable>
		ticker_status =
    6f4c:	4a0a      	ldr	r2, [pc, #40]	; (6f78 <event_adv+0xd0>)
    6f4e:	4601      	mov	r1, r0
    6f50:	f7fd fcd0 	bl	48f4 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    6f54:	f030 0302 	bics.w	r3, r0, #2
    6f58:	d002      	beq.n	6f60 <event_adv+0xb8>
    6f5a:	4a03      	ldr	r2, [pc, #12]	; (6f68 <event_adv+0xc0>)
    6f5c:	4907      	ldr	r1, [pc, #28]	; (6f7c <event_adv+0xd4>)
    6f5e:	e7ad      	b.n	6ebc <event_adv+0x14>
    6f60:	bd70      	pop	{r4, r5, r6, pc}
    6f62:	bf00      	nop
    6f64:	200009f8 	.word	0x200009f8
    6f68:	0000e515 	.word	0x0000e515
    6f6c:	0000e70a 	.word	0x0000e70a
    6f70:	0000e6d7 	.word	0x0000e6d7
    6f74:	20000a10 	.word	0x20000a10
    6f78:	000063d1 	.word	0x000063d1
    6f7c:	0000e695 	.word	0x0000e695

00006f80 <event_ext_scan>:
{
    6f80:	b538      	push	{r3, r4, r5, lr}
	_radio.role = ROLE_SCAN;
    6f82:	4c18      	ldr	r4, [pc, #96]	; (6fe4 <event_ext_scan+0x64>)
    6f84:	2302      	movs	r3, #2
    6f86:	74e3      	strb	r3, [r4, #19]
	_radio.state = STATE_RX;
    6f88:	2301      	movs	r3, #1
	_radio.ticker_id_prepare = 0;
    6f8a:	2500      	movs	r5, #0
	_radio.state = STATE_RX;
    6f8c:	7523      	strb	r3, [r4, #20]
	_radio.ticker_id_event = RADIO_TICKER_ID_SCAN;
    6f8e:	2306      	movs	r3, #6
	_radio.ticker_id_prepare = 0;
    6f90:	7425      	strb	r5, [r4, #16]
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    6f92:	f894 064d 	ldrb.w	r0, [r4, #1613]	; 0x64d
	_radio.ticker_id_event = RADIO_TICKER_ID_SCAN;
    6f96:	7463      	strb	r3, [r4, #17]
	_radio.scanner.state = 0;
    6f98:	f894 364c 	ldrb.w	r3, [r4, #1612]	; 0x64c
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    6f9c:	f000 0007 	and.w	r0, r0, #7
	_radio.scanner.state = 0;
    6fa0:	f365 0341 	bfi	r3, r5, #1, #1
    6fa4:	f884 364c 	strb.w	r3, [r4, #1612]	; 0x64c
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    6fa8:	f7ff ff54 	bl	6e54 <adv_scan_configure.constprop.47>
	chan_set(_radio.ext_scanner.chan_index);
    6fac:	f894 0694 	ldrb.w	r0, [r4, #1684]	; 0x694
    6fb0:	f7fe fea8 	bl	5d04 <chan_set>
	radio_tmr_tifs_set(RADIO_TIFS);
    6fb4:	2096      	movs	r0, #150	; 0x96
    6fb6:	f004 f957 	bl	b268 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
    6fba:	4629      	mov	r1, r5
    6fbc:	462b      	mov	r3, r5
    6fbe:	462a      	mov	r2, r5
    6fc0:	4628      	mov	r0, r5
    6fc2:	f004 f8cd 	bl	b160 <radio_switch_complete_and_tx>
	radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    6fc6:	f894 26cd 	ldrb.w	r2, [r4, #1741]	; 0x6cd
    6fca:	f8d4 36c8 	ldr.w	r3, [r4, #1736]	; 0x6c8
    6fce:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    6fd2:	3008      	adds	r0, #8
    6fd4:	f004 f838 	bl	b048 <radio_pkt_rx_set>
	radio_rssi_measure();
    6fd8:	f004 f8da 	bl	b190 <radio_rssi_measure>
}
    6fdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	pdu = (void *)radio_pkt_scratch_get();
    6fe0:	f004 b8ae 	b.w	b140 <radio_pkt_scratch_get>
    6fe4:	200009f8 	.word	0x200009f8

00006fe8 <event_stop.constprop.48>:
static void event_stop(u32_t ticks_at_expire, u32_t remainder,
    6fe8:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
    6fea:	4b05      	ldr	r3, [pc, #20]	; (7000 <event_stop.constprop.48+0x18>)
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    6fec:	2200      	movs	r2, #0
	s_mfy_radio_stop.param = context;
    6fee:	6098      	str	r0, [r3, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    6ff0:	4611      	mov	r1, r2
    6ff2:	4610      	mov	r0, r2
    6ff4:	f7fc fdae 	bl	3b54 <mayfly_enqueue>
	LL_ASSERT(!retval);
    6ff8:	b108      	cbz	r0, 6ffe <event_stop.constprop.48+0x16>
    6ffa:	f7ff fa13 	bl	6424 <event_stop.part.12>
    6ffe:	bd08      	pop	{r3, pc}
    7000:	20004d60 	.word	0x20004d60

00007004 <event_common_prepare>:
{
    7004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u32_t _ticks_xtal_to_start = *ticks_xtal_to_start;
    7008:	6814      	ldr	r4, [r2, #0]
	u32_t _ticks_active_to_start = *ticks_active_to_start;
    700a:	681d      	ldr	r5, [r3, #0]
{
    700c:	b08d      	sub	sp, #52	; 0x34
	if (_ticks_xtal_to_start & XON_BITMASK) {
    700e:	2c00      	cmp	r4, #0
{
    7010:	4681      	mov	r9, r0
    7012:	910b      	str	r1, [sp, #44]	; 0x2c
    7014:	4690      	mov	r8, r2
    7016:	469b      	mov	fp, r3
    7018:	f89d a05c 	ldrb.w	sl, [sp, #92]	; 0x5c
	if (_ticks_xtal_to_start & XON_BITMASK) {
    701c:	da03      	bge.n	7026 <event_common_prepare+0x22>
		_ticks_xtal_to_start =
    701e:	9c16      	ldr	r4, [sp, #88]	; 0x58
    7020:	42ac      	cmp	r4, r5
    7022:	bf38      	it	cc
    7024:	462c      	movcc	r4, r5
	if (_ticks_active_to_start < _ticks_xtal_to_start) {
    7026:	42ac      	cmp	r4, r5
    7028:	4f51      	ldr	r7, [pc, #324]	; (7170 <event_common_prepare+0x16c>)
    702a:	d920      	bls.n	706e <event_common_prepare+0x6a>
		ticker_status =
    702c:	f241 638b 	movw	r3, #5771	; 0x168b
    7030:	9308      	str	r3, [sp, #32]
    7032:	4b50      	ldr	r3, [pc, #320]	; (7174 <event_common_prepare+0x170>)
    7034:	9305      	str	r3, [sp, #20]
    7036:	2100      	movs	r1, #0
		ticks_to_active = _ticks_xtal_to_start - _ticks_active_to_start;
    7038:	1b63      	subs	r3, r4, r5
		ticker_status =
    703a:	9300      	str	r3, [sp, #0]
    703c:	9707      	str	r7, [sp, #28]
    703e:	464b      	mov	r3, r9
    7040:	9106      	str	r1, [sp, #24]
    7042:	9104      	str	r1, [sp, #16]
    7044:	9103      	str	r1, [sp, #12]
    7046:	9102      	str	r1, [sp, #8]
    7048:	9101      	str	r1, [sp, #4]
    704a:	2201      	movs	r2, #1
    704c:	4608      	mov	r0, r1
    704e:	f7fd fb35 	bl	46bc <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    7052:	f030 0302 	bics.w	r3, r0, #2
    7056:	d030      	beq.n	70ba <event_common_prepare+0xb6>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    7058:	4a47      	ldr	r2, [pc, #284]	; (7178 <event_common_prepare+0x174>)
    705a:	4948      	ldr	r1, [pc, #288]	; (717c <event_common_prepare+0x178>)
		LL_ASSERT(!retval);
    705c:	2003      	movs	r0, #3
    705e:	f7fb f8cf 	bl	2200 <bt_log>
    7062:	4040      	eors	r0, r0
    7064:	f380 8811 	msr	BASEPRI, r0
    7068:	f04f 0004 	mov.w	r0, #4
    706c:	df02      	svc	2
	} else if (_ticks_active_to_start > _ticks_xtal_to_start) {
    706e:	d21d      	bcs.n	70ac <event_common_prepare+0xa8>
		event_active(0, 0, 0, NULL);
    7070:	2300      	movs	r3, #0
    7072:	461a      	mov	r2, r3
    7074:	4619      	mov	r1, r3
    7076:	4618      	mov	r0, r3
    7078:	f7ff fa20 	bl	64bc <event_active>
		ticker_status =
    707c:	f44f 53b5 	mov.w	r3, #5792	; 0x16a0
    7080:	2100      	movs	r1, #0
    7082:	9308      	str	r3, [sp, #32]
		ticks_to_xtal = _ticks_active_to_start - _ticks_xtal_to_start;
    7084:	1b2c      	subs	r4, r5, r4
		ticker_status =
    7086:	4b3e      	ldr	r3, [pc, #248]	; (7180 <event_common_prepare+0x17c>)
    7088:	9305      	str	r3, [sp, #20]
    708a:	9707      	str	r7, [sp, #28]
    708c:	464b      	mov	r3, r9
    708e:	9106      	str	r1, [sp, #24]
    7090:	9104      	str	r1, [sp, #16]
    7092:	9103      	str	r1, [sp, #12]
    7094:	9102      	str	r1, [sp, #8]
    7096:	9101      	str	r1, [sp, #4]
    7098:	9400      	str	r4, [sp, #0]
    709a:	2201      	movs	r2, #1
    709c:	4608      	mov	r0, r1
    709e:	f7fd fb0d 	bl	46bc <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    70a2:	f030 0302 	bics.w	r3, r0, #2
    70a6:	d1d7      	bne.n	7058 <event_common_prepare+0x54>
    70a8:	462c      	mov	r4, r5
    70aa:	e00b      	b.n	70c4 <event_common_prepare+0xc0>
		event_active(0, 0, 0, NULL);
    70ac:	2300      	movs	r3, #0
    70ae:	461a      	mov	r2, r3
    70b0:	4619      	mov	r1, r3
    70b2:	4618      	mov	r0, r3
    70b4:	f7ff fa02 	bl	64bc <event_active>
		event_xtal(0, 0, 0, NULL);
    70b8:	2300      	movs	r3, #0
    70ba:	461a      	mov	r2, r3
    70bc:	4619      	mov	r1, r3
    70be:	4618      	mov	r0, r3
    70c0:	f7ff fa16 	bl	64f0 <event_xtal>
	_radio.remainder_anchor = remainder;
    70c4:	4e2f      	ldr	r6, [pc, #188]	; (7184 <event_common_prepare+0x180>)
    70c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    70c8:	60f3      	str	r3, [r6, #12]
	ticker_status =
    70ca:	f241 63b8 	movw	r3, #5816	; 0x16b8
    70ce:	9308      	str	r3, [sp, #32]
    70d0:	9b19      	ldr	r3, [sp, #100]	; 0x64
    70d2:	9306      	str	r3, [sp, #24]
    70d4:	2200      	movs	r2, #0
    70d6:	9b18      	ldr	r3, [sp, #96]	; 0x60
    70d8:	9305      	str	r3, [sp, #20]
    70da:	9707      	str	r7, [sp, #28]
    70dc:	464b      	mov	r3, r9
    70de:	9204      	str	r2, [sp, #16]
    70e0:	9203      	str	r2, [sp, #12]
    70e2:	9202      	str	r2, [sp, #8]
    70e4:	9201      	str	r2, [sp, #4]
    70e6:	9400      	str	r4, [sp, #0]
    70e8:	4611      	mov	r1, r2
    70ea:	4610      	mov	r0, r2
    70ec:	f7fd fae6 	bl	46bc <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    70f0:	f030 0302 	bics.w	r3, r0, #2
    70f4:	d1b0      	bne.n	7058 <event_common_prepare+0x54>
	event_stop(0, 0, 0, (void *)STATE_ABORT);
    70f6:	2005      	movs	r0, #5
    70f8:	f7ff ff76 	bl	6fe8 <event_stop.constprop.48>
	if (_radio.ticks_active_to_start != _ticks_active_to_start) {
    70fc:	f8d6 3710 	ldr.w	r3, [r6, #1808]	; 0x710
    7100:	429d      	cmp	r5, r3
    7102:	d023      	beq.n	714c <event_common_prepare+0x148>
		*ticks_active_to_start = _radio.ticks_active_to_start;
    7104:	f8cb 3000 	str.w	r3, [fp]
		if (*ticks_xtal_to_start & XON_BITMASK) {
    7108:	f8d8 3000 	ldr.w	r3, [r8]
		ticker_status =
    710c:	9705      	str	r7, [sp, #20]
		if (*ticks_xtal_to_start & XON_BITMASK) {
    710e:	2b00      	cmp	r3, #0
			*ticks_xtal_to_start &= ~XON_BITMASK;
    7110:	bfbc      	itt	lt
    7112:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    7116:	f8c8 3000 	strlt.w	r3, [r8]
		ticks_to_start_new = (_radio.ticks_active_to_start <
    711a:	f8d6 2710 	ldr.w	r2, [r6, #1808]	; 0x710
    711e:	f8d8 1000 	ldr.w	r1, [r8]
    7122:	428a      	cmp	r2, r1
    7124:	bf38      	it	cc
    7126:	460a      	movcc	r2, r1
		ticker_status =
    7128:	f241 61e8 	movw	r1, #5864	; 0x16e8
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    712c:	b2a3      	uxth	r3, r4
    712e:	b292      	uxth	r2, r2
		ticker_status =
    7130:	9106      	str	r1, [sp, #24]
    7132:	2100      	movs	r1, #0
    7134:	9302      	str	r3, [sp, #8]
    7136:	9201      	str	r2, [sp, #4]
    7138:	9200      	str	r2, [sp, #0]
    713a:	9104      	str	r1, [sp, #16]
    713c:	9103      	str	r1, [sp, #12]
    713e:	4652      	mov	r2, sl
    7140:	4608      	mov	r0, r1
    7142:	f7fd fb0b 	bl	475c <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    7146:	f030 0302 	bics.w	r3, r0, #2
    714a:	d185      	bne.n	7058 <event_common_prepare+0x54>
	packet_tx_enqueue(0xFF);
    714c:	20ff      	movs	r0, #255	; 0xff
    714e:	f7ff fa8b 	bl	6668 <packet_tx_enqueue>
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    7152:	4b0d      	ldr	r3, [pc, #52]	; (7188 <event_common_prepare+0x184>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    7154:	2201      	movs	r2, #1
    7156:	4611      	mov	r1, r2
    7158:	2000      	movs	r0, #0
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    715a:	f8c3 a008 	str.w	sl, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    715e:	f7fc fcf9 	bl	3b54 <mayfly_enqueue>
		LL_ASSERT(!retval);
    7162:	b110      	cbz	r0, 716a <event_common_prepare+0x166>
    7164:	4a04      	ldr	r2, [pc, #16]	; (7178 <event_common_prepare+0x174>)
    7166:	4909      	ldr	r1, [pc, #36]	; (718c <event_common_prepare+0x188>)
    7168:	e778      	b.n	705c <event_common_prepare+0x58>
}
    716a:	b00d      	add	sp, #52	; 0x34
    716c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7170:	000062b9 	.word	0x000062b9
    7174:	000064bd 	.word	0x000064bd
    7178:	0000e4c3 	.word	0x0000e4c3
    717c:	0000e695 	.word	0x0000e695
    7180:	000064f1 	.word	0x000064f1
    7184:	200009f8 	.word	0x200009f8
    7188:	20004e00 	.word	0x20004e00
    718c:	0000e810 	.word	0x0000e810

00007190 <radio_event_adv_prepare>:
{
    7190:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    7192:	4a0f      	ldr	r2, [pc, #60]	; (71d0 <radio_event_adv_prepare+0x40>)
    7194:	7c13      	ldrb	r3, [r2, #16]
    7196:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    719a:	b153      	cbz	r3, 71b2 <radio_event_adv_prepare+0x22>
    719c:	4a0d      	ldr	r2, [pc, #52]	; (71d4 <radio_event_adv_prepare+0x44>)
    719e:	490e      	ldr	r1, [pc, #56]	; (71d8 <radio_event_adv_prepare+0x48>)
    71a0:	2003      	movs	r0, #3
    71a2:	f7fb f82d 	bl	2200 <bt_log>
    71a6:	4040      	eors	r0, r0
    71a8:	f380 8811 	msr	BASEPRI, r0
    71ac:	f04f 0004 	mov.w	r0, #4
    71b0:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_ADV;
    71b2:	2305      	movs	r3, #5
    71b4:	7413      	strb	r3, [r2, #16]
	event_common_prepare(ticks_at_expire, remainder,
    71b6:	9403      	str	r4, [sp, #12]
    71b8:	4c08      	ldr	r4, [pc, #32]	; (71dc <radio_event_adv_prepare+0x4c>)
    71ba:	9402      	str	r4, [sp, #8]
    71bc:	9301      	str	r3, [sp, #4]
    71be:	6a13      	ldr	r3, [r2, #32]
    71c0:	9300      	str	r3, [sp, #0]
    71c2:	f102 031c 	add.w	r3, r2, #28
    71c6:	3218      	adds	r2, #24
    71c8:	f7ff ff1c 	bl	7004 <event_common_prepare>
}
    71cc:	b004      	add	sp, #16
    71ce:	bd10      	pop	{r4, pc}
    71d0:	200009f8 	.word	0x200009f8
    71d4:	0000e4e1 	.word	0x0000e4e1
    71d8:	0000ec3d 	.word	0x0000ec3d
    71dc:	00006ea9 	.word	0x00006ea9

000071e0 <event_ext_scan_prepare>:
{
    71e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	_radio.ticker_id_prepare = RADIO_TICKER_ID_SCAN_STOP;
    71e2:	4a09      	ldr	r2, [pc, #36]	; (7208 <event_ext_scan_prepare+0x28>)
    71e4:	2304      	movs	r3, #4
	event_common_prepare(ticks_at_expire, remainder,
    71e6:	2400      	movs	r4, #0
	_radio.ticker_id_prepare = RADIO_TICKER_ID_SCAN_STOP;
    71e8:	7413      	strb	r3, [r2, #16]
	event_common_prepare(ticks_at_expire, remainder,
    71ea:	9403      	str	r4, [sp, #12]
    71ec:	4c07      	ldr	r4, [pc, #28]	; (720c <event_ext_scan_prepare+0x2c>)
    71ee:	9402      	str	r4, [sp, #8]
    71f0:	9301      	str	r3, [sp, #4]
    71f2:	f8d2 3644 	ldr.w	r3, [r2, #1604]	; 0x644
    71f6:	9300      	str	r3, [sp, #0]
    71f8:	f502 63c8 	add.w	r3, r2, #1600	; 0x640
    71fc:	f202 623c 	addw	r2, r2, #1596	; 0x63c
    7200:	f7ff ff00 	bl	7004 <event_common_prepare>
}
    7204:	b004      	add	sp, #16
    7206:	bd10      	pop	{r4, pc}
    7208:	200009f8 	.word	0x200009f8
    720c:	00006f81 	.word	0x00006f81

00007210 <radio_event_ext_adv_prepare>:
{
    7210:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    7212:	4a0f      	ldr	r2, [pc, #60]	; (7250 <radio_event_ext_adv_prepare+0x40>)
    7214:	7c13      	ldrb	r3, [r2, #16]
    7216:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    721a:	b153      	cbz	r3, 7232 <radio_event_ext_adv_prepare+0x22>
    721c:	4a0d      	ldr	r2, [pc, #52]	; (7254 <radio_event_ext_adv_prepare+0x44>)
    721e:	490e      	ldr	r1, [pc, #56]	; (7258 <radio_event_ext_adv_prepare+0x48>)
    7220:	2003      	movs	r0, #3
    7222:	f7fa ffed 	bl	2200 <bt_log>
    7226:	4040      	eors	r0, r0
    7228:	f380 8811 	msr	BASEPRI, r0
    722c:	f04f 0004 	mov.w	r0, #4
    7230:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_EXT_ADV;
    7232:	2308      	movs	r3, #8
    7234:	7413      	strb	r3, [r2, #16]
	event_common_prepare(ticks_at_expire, remainder,
    7236:	9403      	str	r4, [sp, #12]
    7238:	4c08      	ldr	r4, [pc, #32]	; (725c <radio_event_ext_adv_prepare+0x4c>)
    723a:	9402      	str	r4, [sp, #8]
    723c:	9301      	str	r3, [sp, #4]
    723e:	6a13      	ldr	r3, [r2, #32]
    7240:	9300      	str	r3, [sp, #0]
    7242:	f102 031c 	add.w	r3, r2, #28
    7246:	3218      	adds	r2, #24
    7248:	f7ff fedc 	bl	7004 <event_common_prepare>
}
    724c:	b004      	add	sp, #16
    724e:	bd10      	pop	{r4, pc}
    7250:	200009f8 	.word	0x200009f8
    7254:	0000e4f9 	.word	0x0000e4f9
    7258:	0000ec3d 	.word	0x0000ec3d
    725c:	00006d11 	.word	0x00006d11

00007260 <event_adv_stop>:
{
    7260:	b507      	push	{r0, r1, r2, lr}
	event_stop(0, 0, 0, (void *)STATE_ABORT);
    7262:	2005      	movs	r0, #5
    7264:	f7ff fec0 	bl	6fe8 <event_stop.constprop.48>
	ticker_status =
    7268:	f641 3362 	movw	r3, #7010	; 0x1b62
    726c:	2100      	movs	r1, #0
    726e:	9300      	str	r3, [sp, #0]
    7270:	2205      	movs	r2, #5
    7272:	4b0a      	ldr	r3, [pc, #40]	; (729c <event_adv_stop+0x3c>)
    7274:	4608      	mov	r0, r1
    7276:	f7fd fabf 	bl	47f8 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    727a:	f030 0302 	bics.w	r3, r0, #2
    727e:	d00a      	beq.n	7296 <event_adv_stop+0x36>
    7280:	4a07      	ldr	r2, [pc, #28]	; (72a0 <event_adv_stop+0x40>)
    7282:	4908      	ldr	r1, [pc, #32]	; (72a4 <event_adv_stop+0x44>)
    7284:	2003      	movs	r0, #3
    7286:	f7fa ffbb 	bl	2200 <bt_log>
    728a:	4040      	eors	r0, r0
    728c:	f380 8811 	msr	BASEPRI, r0
    7290:	f04f 0004 	mov.w	r0, #4
    7294:	df02      	svc	2
}
    7296:	b003      	add	sp, #12
    7298:	f85d fb04 	ldr.w	pc, [sp], #4
    729c:	00006925 	.word	0x00006925
    72a0:	0000e56e 	.word	0x0000e56e
    72a4:	0000e695 	.word	0x0000e695

000072a8 <mayfly_xtal_stop_calc>:
{
    72a8:	b570      	push	{r4, r5, r6, lr}
    72aa:	b08e      	sub	sp, #56	; 0x38
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    72ac:	2302      	movs	r3, #2
    72ae:	9309      	str	r3, [sp, #36]	; 0x24
	ticker_id_next = 0xff;
    72b0:	22ff      	movs	r2, #255	; 0xff
	struct connection *conn_curr = NULL;
    72b2:	2300      	movs	r3, #0
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    72b4:	4e78      	ldr	r6, [pc, #480]	; (7498 <mayfly_xtal_stop_calc+0x1f0>)
				    _radio.connection_count));
    72b6:	4d79      	ldr	r5, [pc, #484]	; (749c <mayfly_xtal_stop_calc+0x1f4>)
	struct connection *conn_curr = NULL;
    72b8:	930a      	str	r3, [sp, #40]	; 0x28
{
    72ba:	4604      	mov	r4, r0
	struct connection *conn_next = NULL;
    72bc:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker_id_next = 0xff;
    72be:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
	ticks_to_expire = 0;
    72c2:	930c      	str	r3, [sp, #48]	; 0x30
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    72c4:	ab09      	add	r3, sp, #36	; 0x24
    72c6:	9302      	str	r3, [sp, #8]
    72c8:	ab0c      	add	r3, sp, #48	; 0x30
    72ca:	9300      	str	r3, [sp, #0]
    72cc:	9601      	str	r6, [sp, #4]
    72ce:	ab0d      	add	r3, sp, #52	; 0x34
    72d0:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    72d4:	2101      	movs	r1, #1
    72d6:	2000      	movs	r0, #0
    72d8:	f7fd faca 	bl	4870 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    72dc:	2802      	cmp	r0, #2
    72de:	d010      	beq.n	7302 <mayfly_xtal_stop_calc+0x5a>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    72e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    72e2:	b193      	cbz	r3, 730a <mayfly_xtal_stop_calc+0x62>
    72e4:	4a6e      	ldr	r2, [pc, #440]	; (74a0 <mayfly_xtal_stop_calc+0x1f8>)
    72e6:	496f      	ldr	r1, [pc, #444]	; (74a4 <mayfly_xtal_stop_calc+0x1fc>)
	LL_ASSERT(hdr_curr);
    72e8:	2003      	movs	r0, #3
    72ea:	f7fa ff89 	bl	2200 <bt_log>
    72ee:	4040      	eors	r0, r0
    72f0:	f380 8811 	msr	BASEPRI, r0
    72f4:	f04f 0004 	mov.w	r0, #4
    72f8:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    72fa:	2101      	movs	r1, #1
    72fc:	2000      	movs	r0, #0
    72fe:	f7fd fb35 	bl	496c <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    7302:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7304:	2b02      	cmp	r3, #2
    7306:	d0f8      	beq.n	72fa <mayfly_xtal_stop_calc+0x52>
    7308:	e7ea      	b.n	72e0 <mayfly_xtal_stop_calc+0x38>
	} while (ticker_id_next != TICKER_NULL &&
    730a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				    _radio.connection_count));
    730e:	2bff      	cmp	r3, #255	; 0xff
    7310:	d004      	beq.n	731c <mayfly_xtal_stop_calc+0x74>
    7312:	f895 26a4 	ldrb.w	r2, [r5, #1700]	; 0x6a4
		 ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    7316:	3207      	adds	r2, #7
	} while (ticker_id_next != TICKER_NULL &&
    7318:	4293      	cmp	r3, r2
    731a:	dad3      	bge.n	72c4 <mayfly_xtal_stop_calc+0x1c>
	if ((ticker_id_next == TICKER_NULL) ||
    731c:	1f5a      	subs	r2, r3, #5
    731e:	b2d2      	uxtb	r2, r2
    7320:	2af9      	cmp	r2, #249	; 0xf9
    7322:	d805      	bhi.n	7330 <mayfly_xtal_stop_calc+0x88>
				_radio.connection_count))) {
    7324:	4a5d      	ldr	r2, [pc, #372]	; (749c <mayfly_xtal_stop_calc+0x1f4>)
    7326:	f892 26a4 	ldrb.w	r2, [r2, #1700]	; 0x6a4
	    (ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    732a:	3207      	adds	r2, #7
	    (ticker_id_next < RADIO_TICKER_ID_ADV) ||
    732c:	4293      	cmp	r3, r2
    732e:	db04      	blt.n	733a <mayfly_xtal_stop_calc+0x92>
    7330:	2001      	movs	r0, #1
    7332:	f7ff f897 	bl	6464 <mayfly_xtal_retain.part.15>
}
    7336:	b00e      	add	sp, #56	; 0x38
    7338:	bd70      	pop	{r4, r5, r6, pc}
	hdr_curr = hdr_conn_get(ticker_id_curr, &conn_curr);
    733a:	a90a      	add	r1, sp, #40	; 0x28
    733c:	b2e0      	uxtb	r0, r4
    733e:	f7ff f853 	bl	63e8 <hdr_conn_get>
	LL_ASSERT(hdr_curr);
    7342:	b910      	cbnz	r0, 734a <mayfly_xtal_stop_calc+0xa2>
    7344:	4a56      	ldr	r2, [pc, #344]	; (74a0 <mayfly_xtal_stop_calc+0x1f8>)
    7346:	4958      	ldr	r1, [pc, #352]	; (74a8 <mayfly_xtal_stop_calc+0x200>)
    7348:	e7ce      	b.n	72e8 <mayfly_xtal_stop_calc+0x40>
	if (hdr_curr->ticks_xtal_to_start & XON_BITMASK) {
    734a:	6803      	ldr	r3, [r0, #0]
    734c:	6844      	ldr	r4, [r0, #4]
    734e:	2b00      	cmp	r3, #0
		ticks_slot_abs = (hdr_curr->ticks_active_to_start >
    7350:	bfb8      	it	lt
    7352:	6883      	ldrlt	r3, [r0, #8]
		ticks_slot_abs = (hdr_curr->ticks_active_to_start >
    7354:	429c      	cmp	r4, r3
    7356:	bf38      	it	cc
    7358:	461c      	movcc	r4, r3
	ticks_slot_abs += hdr_curr->ticks_slot;
    735a:	68c3      	ldr	r3, [r0, #12]
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    735c:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    7360:	a90b      	add	r1, sp, #44	; 0x2c
	ticks_slot_abs += hdr_curr->ticks_slot;
    7362:	441c      	add	r4, r3
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    7364:	f7ff f840 	bl	63e8 <hdr_conn_get>
	LL_ASSERT(hdr_next);
    7368:	4605      	mov	r5, r0
    736a:	b910      	cbnz	r0, 7372 <mayfly_xtal_stop_calc+0xca>
    736c:	4a4c      	ldr	r2, [pc, #304]	; (74a0 <mayfly_xtal_stop_calc+0x1f8>)
    736e:	494f      	ldr	r1, [pc, #316]	; (74ac <mayfly_xtal_stop_calc+0x204>)
    7370:	e7ba      	b.n	72e8 <mayfly_xtal_stop_calc+0x40>
	ticks_prepare_to_start_next = (hdr_next->ticks_active_to_start >
    7372:	6886      	ldr	r6, [r0, #8]
    7374:	6843      	ldr	r3, [r0, #4]
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
    7376:	6802      	ldr	r2, [r0, #0]
	ticks_prepare_to_start_next = (hdr_next->ticks_active_to_start >
    7378:	429e      	cmp	r6, r3
    737a:	bf38      	it	cc
    737c:	461e      	movcc	r6, r3
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
    737e:	2a00      	cmp	r2, #0
    7380:	da05      	bge.n	738e <mayfly_xtal_stop_calc+0xe6>
		ticks_to_expire -=
    7382:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			(hdr_next->ticks_xtal_to_start &
    7384:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
		ticks_to_expire -=
    7388:	4433      	add	r3, r6
    738a:	1a9b      	subs	r3, r3, r2
    738c:	930c      	str	r3, [sp, #48]	; 0x30
	if (ticks_to_expire >
    738e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	    (ticks_slot_abs +
    7390:	f104 0331 	add.w	r3, r4, #49	; 0x31
	if (ticks_to_expire >
    7394:	4293      	cmp	r3, r2
    7396:	d209      	bcs.n	73ac <mayfly_xtal_stop_calc+0x104>
    7398:	2001      	movs	r0, #1
    739a:	f7ff f863 	bl	6464 <mayfly_xtal_retain.part.15>
		prepare_normal_set(hdr_next, RADIO_TICKER_USER_ID_JOB,
    739e:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    73a2:	2101      	movs	r1, #1
    73a4:	4628      	mov	r0, r5
    73a6:	f7ff fc65 	bl	6c74 <prepare_normal_set>
    73aa:	e7c4      	b.n	7336 <mayfly_xtal_stop_calc+0x8e>
		if (!s_xtal_retained) {
    73ac:	4b40      	ldr	r3, [pc, #256]	; (74b0 <mayfly_xtal_stop_calc+0x208>)
    73ae:	781a      	ldrb	r2, [r3, #0]
    73b0:	b94a      	cbnz	r2, 73c6 <mayfly_xtal_stop_calc+0x11e>
			s_xtal_retained = 1;
    73b2:	2001      	movs	r0, #1
    73b4:	7018      	strb	r0, [r3, #0]
			retval = mayfly_enqueue(caller_id,
    73b6:	4611      	mov	r1, r2
    73b8:	4b3e      	ldr	r3, [pc, #248]	; (74b4 <mayfly_xtal_stop_calc+0x20c>)
    73ba:	f7fc fbcb 	bl	3b54 <mayfly_enqueue>
			LL_ASSERT(!retval);
    73be:	b110      	cbz	r0, 73c6 <mayfly_xtal_stop_calc+0x11e>
    73c0:	4a3d      	ldr	r2, [pc, #244]	; (74b8 <mayfly_xtal_stop_calc+0x210>)
    73c2:	493e      	ldr	r1, [pc, #248]	; (74bc <mayfly_xtal_stop_calc+0x214>)
    73c4:	e790      	b.n	72e8 <mayfly_xtal_stop_calc+0x40>
		if (!(hdr_next->ticks_xtal_to_start & XON_BITMASK) &&
    73c6:	682b      	ldr	r3, [r5, #0]
    73c8:	2b00      	cmp	r3, #0
    73ca:	db17      	blt.n	73fc <mayfly_xtal_stop_calc+0x154>
    73cc:	429e      	cmp	r6, r3
    73ce:	d215      	bcs.n	73fc <mayfly_xtal_stop_calc+0x154>
			u32_t ticks_drift_plus = hdr_next->ticks_xtal_to_start -
    73d0:	1b9b      	subs	r3, r3, r6
			ticker_status =
    73d2:	2000      	movs	r0, #0
				ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    73d4:	b29b      	uxth	r3, r3
			ticker_status =
    73d6:	493a      	ldr	r1, [pc, #232]	; (74c0 <mayfly_xtal_stop_calc+0x218>)
    73d8:	9105      	str	r1, [sp, #20]
    73da:	9302      	str	r3, [sp, #8]
    73dc:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    73e0:	9506      	str	r5, [sp, #24]
    73e2:	9004      	str	r0, [sp, #16]
    73e4:	9003      	str	r0, [sp, #12]
    73e6:	9001      	str	r0, [sp, #4]
    73e8:	9000      	str	r0, [sp, #0]
    73ea:	2101      	movs	r1, #1
    73ec:	f7fd f9b6 	bl	475c <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    73f0:	f030 0302 	bics.w	r3, r0, #2
    73f4:	d002      	beq.n	73fc <mayfly_xtal_stop_calc+0x154>
    73f6:	4a2a      	ldr	r2, [pc, #168]	; (74a0 <mayfly_xtal_stop_calc+0x1f8>)
    73f8:	4932      	ldr	r1, [pc, #200]	; (74c4 <mayfly_xtal_stop_calc+0x21c>)
    73fa:	e775      	b.n	72e8 <mayfly_xtal_stop_calc+0x40>
		if (!conn_curr || !conn_next) {
    73fc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    73fe:	2e00      	cmp	r6, #0
    7400:	d099      	beq.n	7336 <mayfly_xtal_stop_calc+0x8e>
    7402:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    7404:	2d00      	cmp	r5, #0
    7406:	d096      	beq.n	7336 <mayfly_xtal_stop_calc+0x8e>
		if (conn_curr->conn_interval == conn_next->conn_interval) {
    7408:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
    740a:	8caa      	ldrh	r2, [r5, #36]	; 0x24
    740c:	429a      	cmp	r2, r3
    740e:	d192      	bne.n	7336 <mayfly_xtal_stop_calc+0x8e>
			u32_t ticks_conn_interval = HAL_TICKER_US_TO_TICKS(
    7410:	482d      	ldr	r0, [pc, #180]	; (74c8 <mayfly_xtal_stop_calc+0x220>)
    7412:	b292      	uxth	r2, r2
    7414:	fba2 0100 	umull	r0, r1, r2, r0
    7418:	f240 1323 	movw	r3, #291	; 0x123
    741c:	fb03 1102 	mla	r1, r3, r2, r1
    7420:	a31b      	add	r3, pc, #108	; (adr r3, 7490 <mayfly_xtal_stop_calc+0x1e8>)
    7422:	e9d3 2300 	ldrd	r2, r3, [r3]
    7426:	f7f8 ff1f 	bl	268 <__aeabi_uldivmod>
    742a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    742c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			while (ticks_to_expire > ticks_conn_interval) {
    7430:	2200      	movs	r2, #0
    7432:	4298      	cmp	r0, r3
    7434:	d318      	bcc.n	7468 <mayfly_xtal_stop_calc+0x1c0>
    7436:	b102      	cbz	r2, 743a <mayfly_xtal_stop_calc+0x192>
    7438:	930c      	str	r3, [sp, #48]	; 0x30
			if (conn_curr->role && !conn_next->role &&
    743a:	f996 201d 	ldrsb.w	r2, [r6, #29]
    743e:	2a00      	cmp	r2, #0
    7440:	f995 201d 	ldrsb.w	r2, [r5, #29]
    7444:	da13      	bge.n	746e <mayfly_xtal_stop_calc+0x1c6>
    7446:	2a00      	cmp	r2, #0
    7448:	f6ff af75 	blt.w	7336 <mayfly_xtal_stop_calc+0x8e>
			     (ticks_slot_abs +
    744c:	3414      	adds	r4, #20
			if (conn_curr->role && !conn_next->role &&
    744e:	429c      	cmp	r4, r3
    7450:	f67f af71 	bls.w	7336 <mayfly_xtal_stop_calc+0x8e>
				status = conn_update_req(conn_curr);
    7454:	4630      	mov	r0, r6
    7456:	f7fe fa99 	bl	598c <conn_update_req>
				if (status == 2) {
    745a:	2802      	cmp	r0, #2
    745c:	f47f af6b 	bne.w	7336 <mayfly_xtal_stop_calc+0x8e>
					conn_update_req(conn_next);
    7460:	980b      	ldr	r0, [sp, #44]	; 0x2c
					conn_update_req(conn_curr);
    7462:	f7fe fa93 	bl	598c <conn_update_req>
    7466:	e766      	b.n	7336 <mayfly_xtal_stop_calc+0x8e>
				ticks_to_expire -= ticks_conn_interval;
    7468:	1a1b      	subs	r3, r3, r0
    746a:	2201      	movs	r2, #1
    746c:	e7e1      	b.n	7432 <mayfly_xtal_stop_calc+0x18a>
			} else if (!conn_curr->role && conn_next->role &&
    746e:	2a00      	cmp	r2, #0
    7470:	f6bf af61 	bge.w	7336 <mayfly_xtal_stop_calc+0x8e>
				    (ticks_slot_abs +
    7474:	3414      	adds	r4, #20
			} else if (!conn_curr->role && conn_next->role &&
    7476:	429c      	cmp	r4, r3
    7478:	f67f af5d 	bls.w	7336 <mayfly_xtal_stop_calc+0x8e>
				status = conn_update_req(conn_next);
    747c:	4628      	mov	r0, r5
    747e:	f7fe fa85 	bl	598c <conn_update_req>
				if (status == 2) {
    7482:	2802      	cmp	r0, #2
    7484:	f47f af57 	bne.w	7336 <mayfly_xtal_stop_calc+0x8e>
					conn_update_req(conn_curr);
    7488:	980a      	ldr	r0, [sp, #40]	; 0x28
    748a:	e7ea      	b.n	7462 <mayfly_xtal_stop_calc+0x1ba>
    748c:	f3af 8000 	nop.w
    7490:	1afd498d 	.word	0x1afd498d
    7494:	00000007 	.word	0x00000007
    7498:	00005901 	.word	0x00005901
    749c:	200009f8 	.word	0x200009f8
    74a0:	0000e450 	.word	0x0000e450
    74a4:	0000ee0e 	.word	0x0000ee0e
    74a8:	0000eb67 	.word	0x0000eb67
    74ac:	0000eb85 	.word	0x0000eb85
    74b0:	20001198 	.word	0x20001198
    74b4:	20004db0 	.word	0x20004db0
    74b8:	0000e42a 	.word	0x0000e42a
    74bc:	0000e810 	.word	0x0000e810
    74c0:	00005905 	.word	0x00005905
    74c4:	0000e695 	.word	0x0000e695
    74c8:	09ce5400 	.word	0x09ce5400

000074cc <packet_rx_allocate.constprop.50>:
static void packet_rx_allocate(u8_t max)
    74cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (max > _radio.link_rx_data_quota) {
    74d0:	4d21      	ldr	r5, [pc, #132]	; (7558 <packet_rx_allocate.constprop.50+0x8c>)
	acquire = _radio.packet_rx_acquire + 1;
    74d2:	f895 46ce 	ldrb.w	r4, [r5, #1742]	; 0x6ce
	if (acquire == _radio.packet_rx_count) {
    74d6:	f895 36cc 	ldrb.w	r3, [r5, #1740]	; 0x6cc
	if (max > _radio.link_rx_data_quota) {
    74da:	f895 96e0 	ldrb.w	r9, [r5, #1760]	; 0x6e0
	acquire = _radio.packet_rx_acquire + 1;
    74de:	3401      	adds	r4, #1
    74e0:	b2e4      	uxtb	r4, r4
		acquire = 0;
    74e2:	42a3      	cmp	r3, r4
    74e4:	bf08      	it	eq
    74e6:	2400      	moveq	r4, #0
		link = mem_acquire(&_radio.link_rx_free);
    74e8:	f205 67d4 	addw	r7, r5, #1748	; 0x6d4
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    74ec:	f205 68bc 	addw	r8, r5, #1724	; 0x6bc
	while ((max--) && (acquire != _radio.packet_rx_last)) {
    74f0:	f1b9 0f00 	cmp.w	r9, #0
    74f4:	d003      	beq.n	74fe <packet_rx_allocate.constprop.50+0x32>
    74f6:	f895 36cd 	ldrb.w	r3, [r5, #1741]	; 0x6cd
    74fa:	429c      	cmp	r4, r3
    74fc:	d101      	bne.n	7502 <packet_rx_allocate.constprop.50+0x36>
    74fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		link = mem_acquire(&_radio.link_rx_free);
    7502:	4638      	mov	r0, r7
    7504:	f7fc fa6d 	bl	39e2 <mem_acquire>
		if (!link) {
    7508:	4606      	mov	r6, r0
    750a:	2800      	cmp	r0, #0
    750c:	d0f7      	beq.n	74fe <packet_rx_allocate.constprop.50+0x32>
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    750e:	4640      	mov	r0, r8
    7510:	f7fc fa67 	bl	39e2 <mem_acquire>
		if (!node_rx) {
    7514:	b928      	cbnz	r0, 7522 <packet_rx_allocate.constprop.50+0x56>
			mem_release(link, &_radio.link_rx_free);
    7516:	4630      	mov	r0, r6
    7518:	4910      	ldr	r1, [pc, #64]	; (755c <packet_rx_allocate.constprop.50+0x90>)
}
    751a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			mem_release(link, &_radio.link_rx_free);
    751e:	f7fc ba7a 	b.w	3a16 <mem_release>
		node_rx->hdr.onion.link = link;
    7522:	6006      	str	r6, [r0, #0]
		_radio.packet_rx[_radio.packet_rx_acquire] = node_rx;
    7524:	f895 26ce 	ldrb.w	r2, [r5, #1742]	; 0x6ce
    7528:	f8d5 36c8 	ldr.w	r3, [r5, #1736]	; 0x6c8
    752c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
		_radio.packet_rx_acquire = acquire;
    7530:	f885 46ce 	strb.w	r4, [r5, #1742]	; 0x6ce
		if (acquire == _radio.packet_rx_count) {
    7534:	f895 36cc 	ldrb.w	r3, [r5, #1740]	; 0x6cc
		acquire = _radio.packet_rx_acquire + 1;
    7538:	3401      	adds	r4, #1
    753a:	b2e4      	uxtb	r4, r4
			acquire = 0;
    753c:	42a3      	cmp	r3, r4
    753e:	bf08      	it	eq
    7540:	2400      	moveq	r4, #0
		_radio.link_rx_data_quota--;
    7542:	f895 36e0 	ldrb.w	r3, [r5, #1760]	; 0x6e0
    7546:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    754a:	3b01      	subs	r3, #1
    754c:	f885 36e0 	strb.w	r3, [r5, #1760]	; 0x6e0
    7550:	fa5f f989 	uxtb.w	r9, r9
    7554:	e7cc      	b.n	74f0 <packet_rx_allocate.constprop.50+0x24>
    7556:	bf00      	nop
    7558:	200009f8 	.word	0x200009f8
    755c:	200010cc 	.word	0x200010cc

00007560 <common_init>:
{
    7560:	b510      	push	{r4, lr}
	if (_radio.connection_count) {
    7562:	4c31      	ldr	r4, [pc, #196]	; (7628 <common_init+0xc8>)
    7564:	f894 26a4 	ldrb.w	r2, [r4, #1700]	; 0x6a4
    7568:	2a00      	cmp	r2, #0
    756a:	d03c      	beq.n	75e6 <common_init+0x86>
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
    756c:	f504 63d4 	add.w	r3, r4, #1696	; 0x6a0
    7570:	f44f 7182 	mov.w	r1, #260	; 0x104
    7574:	f8d4 069c 	ldr.w	r0, [r4, #1692]	; 0x69c
    7578:	f7fc fa0c 	bl	3994 <mem_init>
	mem_init(_radio.pkt_rx_data_pool,
    757c:	4b2b      	ldr	r3, [pc, #172]	; (762c <common_init+0xcc>)
    757e:	f894 26c6 	ldrb.w	r2, [r4, #1734]	; 0x6c6
    7582:	f8b4 16c4 	ldrh.w	r1, [r4, #1732]	; 0x6c4
    7586:	f8d4 06b8 	ldr.w	r0, [r4, #1720]	; 0x6b8
    758a:	f7fc fa03 	bl	3994 <mem_init>
		 (_radio.packet_rx_count + _radio.connection_count),
    758e:	f894 16cc 	ldrb.w	r1, [r4, #1740]	; 0x6cc
    7592:	f894 26a4 	ldrb.w	r2, [r4, #1700]	; 0x6a4
	mem_init(_radio.link_rx_pool, (sizeof(memq_link_t)),
    7596:	4b26      	ldr	r3, [pc, #152]	; (7630 <common_init+0xd0>)
    7598:	f8d4 06d0 	ldr.w	r0, [r4, #1744]	; 0x6d0
    759c:	440a      	add	r2, r1
    759e:	2108      	movs	r1, #8
    75a0:	f7fc f9f8 	bl	3994 <mem_init>
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
    75a4:	4b23      	ldr	r3, [pc, #140]	; (7634 <common_init+0xd4>)
    75a6:	f8d4 06e4 	ldr.w	r0, [r4, #1764]	; 0x6e4
    75aa:	2202      	movs	r2, #2
    75ac:	2124      	movs	r1, #36	; 0x24
    75ae:	f7fc f9f1 	bl	3994 <mem_init>
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
    75b2:	f894 2700 	ldrb.w	r2, [r4, #1792]	; 0x700
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
    75b6:	f8d4 06ec 	ldr.w	r0, [r4, #1772]	; 0x6ec
    75ba:	4b1f      	ldr	r3, [pc, #124]	; (7638 <common_init+0xd8>)
    75bc:	f8b4 16f4 	ldrh.w	r1, [r4, #1780]	; 0x6f4
    75c0:	3a01      	subs	r2, #1
    75c2:	b292      	uxth	r2, r2
    75c4:	f7fc f9e6 	bl	3994 <mem_init>
	link = mem_acquire(&_radio.link_rx_free);
    75c8:	4819      	ldr	r0, [pc, #100]	; (7630 <common_init+0xd0>)
    75ca:	f7fc fa0a 	bl	39e2 <mem_acquire>
	LL_ASSERT(link);
    75ce:	b968      	cbnz	r0, 75ec <common_init+0x8c>
    75d0:	4a1a      	ldr	r2, [pc, #104]	; (763c <common_init+0xdc>)
    75d2:	491b      	ldr	r1, [pc, #108]	; (7640 <common_init+0xe0>)
    75d4:	2003      	movs	r0, #3
    75d6:	f7fa fe13 	bl	2200 <bt_log>
    75da:	4040      	eors	r0, r0
    75dc:	f380 8811 	msr	BASEPRI, r0
    75e0:	f04f 0004 	mov.w	r0, #4
    75e4:	df02      	svc	2
		_radio.conn_free = NULL;
    75e6:	f8c4 26a0 	str.w	r2, [r4, #1696]	; 0x6a0
    75ea:	e7c7      	b.n	757c <common_init+0x1c>
	memq_init(link, &_radio.link_rx_head, (void *)&_radio.link_rx_tail);
    75ec:	4a15      	ldr	r2, [pc, #84]	; (7644 <common_init+0xe4>)
    75ee:	1f11      	subs	r1, r2, #4
    75f0:	f7fc fa3d 	bl	3a6e <memq_init>
	_radio.advertiser.chan_map = 0x07;
    75f4:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    75f8:	f043 0370 	orr.w	r3, r3, #112	; 0x70
    75fc:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	_radio.data_chan_map[0] = 0xFF;
    7600:	23ff      	movs	r3, #255	; 0xff
    7602:	f884 36ae 	strb.w	r3, [r4, #1710]	; 0x6ae
	_radio.data_chan_map[1] = 0xFF;
    7606:	f884 36af 	strb.w	r3, [r4, #1711]	; 0x6af
	_radio.data_chan_map[2] = 0xFF;
    760a:	f884 36b0 	strb.w	r3, [r4, #1712]	; 0x6b0
	_radio.data_chan_map[3] = 0xFF;
    760e:	f884 36b1 	strb.w	r3, [r4, #1713]	; 0x6b1
	_radio.data_chan_map[4] = 0x1F;
    7612:	231f      	movs	r3, #31
    7614:	f884 36b2 	strb.w	r3, [r4, #1714]	; 0x6b2
	_radio.data_chan_count = 37;
    7618:	2325      	movs	r3, #37	; 0x25
    761a:	f884 36b3 	strb.w	r3, [r4, #1715]	; 0x6b3
}
    761e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	packet_rx_allocate(0xFF);
    7622:	f7ff bf53 	b.w	74cc <packet_rx_allocate.constprop.50>
    7626:	bf00      	nop
    7628:	200009f8 	.word	0x200009f8
    762c:	200010b4 	.word	0x200010b4
    7630:	200010cc 	.word	0x200010cc
    7634:	200010e0 	.word	0x200010e0
    7638:	200010e8 	.word	0x200010e8
    763c:	0000e2b3 	.word	0x0000e2b3
    7640:	0000ebea 	.word	0x0000ebea
    7644:	200010d4 	.word	0x200010d4

00007648 <mayfly_xtal_start>:
	clock_control_on(_radio.hf_clock, NULL);
    7648:	4b02      	ldr	r3, [pc, #8]	; (7654 <mayfly_xtal_start+0xc>)
    764a:	6818      	ldr	r0, [r3, #0]
    764c:	6843      	ldr	r3, [r0, #4]
    764e:	2100      	movs	r1, #0
    7650:	681b      	ldr	r3, [r3, #0]
    7652:	4718      	bx	r3
    7654:	200009f8 	.word	0x200009f8

00007658 <mayfly_xtal_stop>:
	clock_control_off(_radio.hf_clock, NULL);
    7658:	4b02      	ldr	r3, [pc, #8]	; (7664 <mayfly_xtal_stop+0xc>)
    765a:	6818      	ldr	r0, [r3, #0]
static inline int clock_control_off(struct device *dev,
				    clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->off(dev, sys);
    765c:	6843      	ldr	r3, [r0, #4]
    765e:	2100      	movs	r1, #0
    7660:	685b      	ldr	r3, [r3, #4]
    7662:	4718      	bx	r3
    7664:	200009f8 	.word	0x200009f8

00007668 <chan_sel_2>:
{
    7668:	b5f0      	push	{r4, r5, r6, r7, lr}
	prn_e = counter ^ chan_id;
    766a:	4048      	eors	r0, r1
    766c:	2703      	movs	r7, #3
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    766e:	ea4f 2e10 	mov.w	lr, r0, lsr #8
    7672:	2608      	movs	r6, #8
	o = 0;
    7674:	2400      	movs	r4, #0
		o |= (i & 1);
    7676:	f00e 0501 	and.w	r5, lr, #1
    767a:	3e01      	subs	r6, #1
    767c:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
	for (iterate = 0; iterate < 8; iterate++) {
    7680:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
		o |= (i & 1);
    7684:	b2ec      	uxtb	r4, r5
		i >>= 1;
    7686:	ea4f 0e5e 	mov.w	lr, lr, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
    768a:	d1f4      	bne.n	7676 <chan_sel_2+0xe>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    768c:	0225      	lsls	r5, r4, #8
    768e:	b22d      	sxth	r5, r5
    7690:	b2c0      	uxtb	r0, r0
    7692:	f04f 0e08 	mov.w	lr, #8
	o = 0;
    7696:	4634      	mov	r4, r6
		o |= (i & 1);
    7698:	f000 0601 	and.w	r6, r0, #1
    769c:	ea46 0444 	orr.w	r4, r6, r4, lsl #1
    76a0:	f10e 36ff 	add.w	r6, lr, #4294967295	; 0xffffffff
	for (iterate = 0; iterate < 8; iterate++) {
    76a4:	f016 0eff 	ands.w	lr, r6, #255	; 0xff
		o |= (i & 1);
    76a8:	b2e4      	uxtb	r4, r4
		i >>= 1;
    76aa:	ea4f 0050 	mov.w	r0, r0, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
    76ae:	d1f3      	bne.n	7698 <chan_sel_2+0x30>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    76b0:	432c      	orrs	r4, r5
	return ((u32_t)a * 17 + b) & 0xFFFF;
    76b2:	eb04 1404 	add.w	r4, r4, r4, lsl #4
    76b6:	3f01      	subs	r7, #1
    76b8:	440c      	add	r4, r1
	for (iterate = 0; iterate < 3; iterate++) {
    76ba:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
	return ((u32_t)a * 17 + b) & 0xFFFF;
    76be:	b2a0      	uxth	r0, r4
	for (iterate = 0; iterate < 3; iterate++) {
    76c0:	d1d5      	bne.n	766e <chan_sel_2+0x6>
	chan_next = prn_e % 37;
    76c2:	2425      	movs	r4, #37	; 0x25
	prn_e ^= chan_id;
    76c4:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
    76c6:	fbb1 f0f4 	udiv	r0, r1, r4
    76ca:	fb04 1010 	mls	r0, r4, r0, r1
    76ce:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    76d0:	08c4      	lsrs	r4, r0, #3
    76d2:	f000 0507 	and.w	r5, r0, #7
    76d6:	5d14      	ldrb	r4, [r2, r4]
    76d8:	412c      	asrs	r4, r5
    76da:	07e4      	lsls	r4, r4, #31
    76dc:	d407      	bmi.n	76ee <chan_sel_2+0x86>
		chan_index = ((u32_t)chan_count * prn_e) >> 16;
    76de:	4359      	muls	r1, r3
		chan_next = chan_sel_remap(chan_map, chan_index);
    76e0:	f3c1 4107 	ubfx	r1, r1, #16, #8
    76e4:	4610      	mov	r0, r2
}
    76e6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		chan_next = chan_sel_remap(chan_map, chan_index);
    76ea:	f7fe b917 	b.w	591c <chan_sel_remap>
}
    76ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

000076f0 <ctrl_tx_enqueue>:
{
    76f0:	b510      	push	{r4, lr}
	    !conn->empty &&
    76f2:	f890 40a8 	ldrb.w	r4, [r0, #168]	; 0xa8
    76f6:	f8d0 20f0 	ldr.w	r2, [r0, #240]	; 0xf0
	if (
    76fa:	f014 0f80 	tst.w	r4, #128	; 0x80
    76fe:	d118      	bne.n	7732 <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
    7700:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
	    !conn->empty &&
    7704:	b1ab      	cbz	r3, 7732 <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
    7706:	0724      	lsls	r4, r4, #28
    7708:	d413      	bmi.n	7732 <ctrl_tx_enqueue+0x42>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    770a:	f8d0 40f8 	ldr.w	r4, [r0, #248]	; 0xf8
    770e:	42a3      	cmp	r3, r4
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    7710:	bf04      	itt	eq
    7712:	681c      	ldreq	r4, [r3, #0]
    7714:	f8c0 40f8 	streq.w	r4, [r0, #248]	; 0xf8
		if (!conn->pkt_tx_ctrl) {
    7718:	b992      	cbnz	r2, 7740 <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head->next;
    771a:	681a      	ldr	r2, [r3, #0]
    771c:	600a      	str	r2, [r1, #0]
			conn->pkt_tx_head->next = node_tx;
    771e:	6019      	str	r1, [r3, #0]
			conn->pkt_tx_ctrl = node_tx;
    7720:	f8c0 10f0 	str.w	r1, [r0, #240]	; 0xf0
	conn->pkt_tx_ctrl_last = node_tx;
    7724:	f8c0 10f4 	str.w	r1, [r0, #244]	; 0xf4
	if (node_tx->next == 0) {
    7728:	680b      	ldr	r3, [r1, #0]
    772a:	b90b      	cbnz	r3, 7730 <ctrl_tx_enqueue+0x40>
		conn->pkt_tx_last = node_tx;
    772c:	f8c0 10fc 	str.w	r1, [r0, #252]	; 0xfc
    7730:	bd10      	pop	{r4, pc}
		if (!conn->pkt_tx_ctrl) {
    7732:	b92a      	cbnz	r2, 7740 <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head;
    7734:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
    7738:	600b      	str	r3, [r1, #0]
			conn->pkt_tx_head = node_tx;
    773a:	f8c0 10ec 	str.w	r1, [r0, #236]	; 0xec
    773e:	e7ef      	b.n	7720 <ctrl_tx_enqueue+0x30>
	node_tx->next = conn->pkt_tx_ctrl_last->next;
    7740:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
    7744:	681a      	ldr	r2, [r3, #0]
    7746:	600a      	str	r2, [r1, #0]
	conn->pkt_tx_ctrl_last->next = node_tx;
    7748:	6019      	str	r1, [r3, #0]
    774a:	e7eb      	b.n	7724 <ctrl_tx_enqueue+0x34>

0000774c <ctrl_tx_sec_enqueue>:
{
    774c:	b410      	push	{r4}
	if (conn->pause_tx) {
    774e:	f890 40a8 	ldrb.w	r4, [r0, #168]	; 0xa8
    7752:	0724      	lsls	r4, r4, #28
{
    7754:	460a      	mov	r2, r1
	if (conn->pause_tx) {
    7756:	d50f      	bpl.n	7778 <ctrl_tx_sec_enqueue+0x2c>
		if (!conn->pkt_tx_ctrl) {
    7758:	f8d0 10f0 	ldr.w	r1, [r0, #240]	; 0xf0
    775c:	b931      	cbnz	r1, 776c <ctrl_tx_sec_enqueue+0x20>
			node_tx->next = conn->pkt_tx_head;
    775e:	f8d0 10ec 	ldr.w	r1, [r0, #236]	; 0xec
    7762:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_head = node_tx;
    7764:	f8c0 20ec 	str.w	r2, [r0, #236]	; 0xec
}
    7768:	bc10      	pop	{r4}
    776a:	4770      	bx	lr
			node_tx->next = conn->pkt_tx_ctrl_last->next;
    776c:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
    7770:	6819      	ldr	r1, [r3, #0]
    7772:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_ctrl_last->next = node_tx;
    7774:	601a      	str	r2, [r3, #0]
    7776:	e7f7      	b.n	7768 <ctrl_tx_sec_enqueue+0x1c>
}
    7778:	bc10      	pop	{r4}
		ctrl_tx_enqueue(conn, node_tx);
    777a:	f7ff bfb9 	b.w	76f0 <ctrl_tx_enqueue>
	...

00007780 <feature_rsp_send>:
{
    7780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    7782:	4f21      	ldr	r7, [pc, #132]	; (7808 <feature_rsp_send+0x88>)
{
    7784:	4605      	mov	r5, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    7786:	f507 60dd 	add.w	r0, r7, #1768	; 0x6e8
{
    778a:	460e      	mov	r6, r1
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    778c:	f7fc f929 	bl	39e2 <mem_acquire>
	if (!node_tx) {
    7790:	4604      	mov	r4, r0
    7792:	b3b0      	cbz	r0, 7802 <feature_rsp_send+0x82>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    7794:	7933      	ldrb	r3, [r6, #4]
	       (features[1] << 8) | (features[2] << 16);
    7796:	7971      	ldrb	r1, [r6, #5]
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    7798:	f8d7 26a8 	ldr.w	r2, [r7, #1704]	; 0x6a8
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    779c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    77a0:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
    77a4:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
    77a8:	f043 0310 	orr.w	r3, r3, #16
    77ac:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	       (features[1] << 8) | (features[2] << 16);
    77b0:	79b1      	ldrb	r1, [r6, #6]
    77b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    77b6:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
    77ba:	f3c1 0110 	ubfx	r1, r1, #0, #17
    77be:	400b      	ands	r3, r1
    77c0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	_radio.conn_curr->common.fex_valid = 1;
    77c4:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
    77c8:	f043 0320 	orr.w	r3, r3, #32
    77cc:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    77d0:	7903      	ldrb	r3, [r0, #4]
    77d2:	f043 0303 	orr.w	r3, r3, #3
    77d6:	7103      	strb	r3, [r0, #4]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    77d8:	2208      	movs	r2, #8
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    77da:	2309      	movs	r3, #9
    77dc:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    77de:	71c3      	strb	r3, [r0, #7]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    77e0:	2100      	movs	r1, #0
    77e2:	4410      	add	r0, r2
    77e4:	f7f8 ff45 	bl	672 <memset>
		conn->llcp_features & 0xFF;
    77e8:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
	pdu_ctrl_tx->llctrl.feature_req.features[0] =
    77ec:	7223      	strb	r3, [r4, #8]
		(conn->llcp_features >> 8) & 0xFF;
    77ee:	0a1a      	lsrs	r2, r3, #8
		(conn->llcp_features >> 16) & 0xFF;
    77f0:	0c1b      	lsrs	r3, r3, #16
	ctrl_tx_sec_enqueue(conn, node_tx);
    77f2:	4628      	mov	r0, r5
	pdu_ctrl_tx->llctrl.feature_req.features[1] =
    77f4:	7262      	strb	r2, [r4, #9]
	pdu_ctrl_tx->llctrl.feature_req.features[2] =
    77f6:	72a3      	strb	r3, [r4, #10]
	ctrl_tx_sec_enqueue(conn, node_tx);
    77f8:	4621      	mov	r1, r4
    77fa:	f7ff ffa7 	bl	774c <ctrl_tx_sec_enqueue>
	return 0;
    77fe:	2000      	movs	r0, #0
    7800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
    7802:	2001      	movs	r0, #1
}
    7804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7806:	bf00      	nop
    7808:	200009f8 	.word	0x200009f8
    780c:	00000000 	.word	0x00000000

00007810 <event_connection_prepare>:
{
    7810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    7814:	4d6d      	ldr	r5, [pc, #436]	; (79cc <event_connection_prepare+0x1bc>)
{
    7816:	461c      	mov	r4, r3
	LL_ASSERT(!_radio.ticker_id_prepare);
    7818:	7c2b      	ldrb	r3, [r5, #16]
{
    781a:	b08f      	sub	sp, #60	; 0x3c
    781c:	4680      	mov	r8, r0
    781e:	4689      	mov	r9, r1
	LL_ASSERT(!_radio.ticker_id_prepare);
    7820:	b153      	cbz	r3, 7838 <event_connection_prepare+0x28>
    7822:	4a6b      	ldr	r2, [pc, #428]	; (79d0 <event_connection_prepare+0x1c0>)
    7824:	496b      	ldr	r1, [pc, #428]	; (79d4 <event_connection_prepare+0x1c4>)
		LL_ASSERT(!retval);
    7826:	2003      	movs	r0, #3
    7828:	f7fa fcea 	bl	2200 <bt_log>
    782c:	4040      	eors	r0, r0
    782e:	f380 8811 	msr	BASEPRI, r0
    7832:	f04f 0004 	mov.w	r0, #4
    7836:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_FIRST_CONNECTION +
    7838:	f894 3020 	ldrb.w	r3, [r4, #32]
    783c:	3307      	adds	r3, #7
    783e:	b2db      	uxtb	r3, r3
    7840:	742b      	strb	r3, [r5, #16]
	if (conn->role) {
    7842:	f994 301d 	ldrsb.w	r3, [r4, #29]
    7846:	2b00      	cmp	r3, #0
    7848:	da09      	bge.n	785e <event_connection_prepare+0x4e>
		    conn->slave.window_widening_periodic_us * (lazy + 1);
    784a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
		conn->slave.window_widening_prepare_us +=
    784c:	6c61      	ldr	r1, [r4, #68]	; 0x44
		    conn->slave.window_widening_periodic_us * (lazy + 1);
    784e:	fb02 3303 	mla	r3, r2, r3, r3
		conn->slave.window_widening_prepare_us +=
    7852:	440b      	add	r3, r1
		    conn->slave.window_widening_max_us) {
    7854:	6c21      	ldr	r1, [r4, #64]	; 0x40
		conn->slave.window_widening_prepare_us +=
    7856:	6463      	str	r3, [r4, #68]	; 0x44
		if (conn->slave.window_widening_prepare_us >
    7858:	428b      	cmp	r3, r1
			conn->slave.window_widening_prepare_us =
    785a:	bf88      	it	hi
    785c:	6461      	strhi	r1, [r4, #68]	; 0x44
	conn->latency_prepare += lazy;
    785e:	8d26      	ldrh	r6, [r4, #40]	; 0x28
	if (conn->llcp_ack != conn->llcp_req) {
    7860:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
	conn->latency_prepare += lazy;
    7864:	4432      	add	r2, r6
	event_counter = conn->event_counter + conn->latency_prepare;
    7866:	8c66      	ldrh	r6, [r4, #34]	; 0x22
	conn->latency_prepare += lazy;
    7868:	b292      	uxth	r2, r2
    786a:	8522      	strh	r2, [r4, #40]	; 0x28
	event_counter = conn->event_counter + conn->latency_prepare;
    786c:	4432      	add	r2, r6
    786e:	b296      	uxth	r6, r2
	if (conn->llcp_ack != conn->llcp_req) {
    7870:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
    7874:	429a      	cmp	r2, r3
    7876:	f000 8227 	beq.w	7cc8 <event_connection_prepare+0x4b8>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    787a:	2005      	movs	r0, #5
    787c:	f7ff fbb4 	bl	6fe8 <event_stop.constprop.48>
		switch (conn->llcp_type) {
    7880:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
    7884:	3b01      	subs	r3, #1
    7886:	2b03      	cmp	r3, #3
    7888:	f200 8319 	bhi.w	7ebe <event_connection_prepare+0x6ae>
    788c:	e8df f013 	tbh	[pc, r3, lsl #1]
    7890:	01f40004 	.word	0x01f40004
    7894:	02c60298 	.word	0x02c60298
	if (!conn_upd) {
    7898:	f8d5 3714 	ldr.w	r3, [r5, #1812]	; 0x714
    789c:	b90b      	cbnz	r3, 78a2 <event_connection_prepare+0x92>
		_radio.conn_upd = conn;
    789e:	f8c5 4714 	str.w	r4, [r5, #1812]	; 0x714
	if (conn->llcp.conn_upd.state != LLCP_CUI_STATE_INPROG) {
    78a2:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
    78a6:	f013 0303 	ands.w	r3, r3, #3
    78aa:	d05b      	beq.n	7964 <event_connection_prepare+0x154>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    78ac:	484a      	ldr	r0, [pc, #296]	; (79d8 <event_connection_prepare+0x1c8>)
    78ae:	f7fc f898 	bl	39e2 <mem_acquire>
		if (!node_tx) {
    78b2:	4605      	mov	r5, r0
    78b4:	2800      	cmp	r0, #0
    78b6:	f000 8207 	beq.w	7cc8 <event_connection_prepare+0x4b8>
		switch (conn->llcp.conn_upd.state) {
    78ba:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
    78be:	f003 0203 	and.w	r2, r3, #3
    78c2:	2a01      	cmp	r2, #1
    78c4:	d14b      	bne.n	795e <event_connection_prepare+0x14e>
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    78c6:	f36f 0301 	bfc	r3, #0, #2
    78ca:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
		event_counter + conn->latency + 6;
    78ce:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    78d0:	3306      	adds	r3, #6
    78d2:	4433      	add	r3, r6
    78d4:	b29b      	uxth	r3, r3
	conn->llcp.conn_upd.instant =
    78d6:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    78da:	7902      	ldrb	r2, [r0, #4]
    78dc:	f042 0203 	orr.w	r2, r2, #3
    78e0:	7102      	strb	r2, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    78e2:	220c      	movs	r2, #12
    78e4:	7142      	strb	r2, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    78e6:	2200      	movs	r2, #0
    78e8:	71c2      	strb	r2, [r0, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size =
    78ea:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
    78ee:	7202      	strb	r2, [r0, #8]
		win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    78f0:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
    78f2:	f240 41e2 	movw	r1, #1250	; 0x4e2
    78f6:	fbb2 f2f1 	udiv	r2, r2, r1
    78fa:	f8a0 2009 	strh.w	r2, [r0, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    78fe:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
    7902:	f8a0 200b 	strh.w	r2, [r0, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    7906:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
    790a:	f8a0 200d 	strh.w	r2, [r0, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    790e:	f8b4 2066 	ldrh.w	r2, [r4, #102]	; 0x66
    7912:	f8a0 200f 	strh.w	r2, [r0, #15]
	pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    7916:	f8a0 3011 	strh.w	r3, [r0, #17]
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    791a:	6822      	ldr	r2, [r4, #0]
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
    791c:	f8c4 8078 	str.w	r8, [r4, #120]	; 0x78
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    7920:	2a00      	cmp	r2, #0
    7922:	da0a      	bge.n	793a <event_connection_prepare+0x12a>
			u32_t ticks_prepare_to_start =
    7924:	68a3      	ldr	r3, [r4, #8]
    7926:	6861      	ldr	r1, [r4, #4]
				(conn->hdr.ticks_xtal_to_start &
    7928:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
			conn->llcp.conn_upd.ticks_anchor -=
    792c:	428b      	cmp	r3, r1
    792e:	bf2c      	ite	cs
    7930:	4443      	addcs	r3, r8
    7932:	eb08 0301 	addcc.w	r3, r8, r1
    7936:	1a9b      	subs	r3, r3, r2
    7938:	67a3      	str	r3, [r4, #120]	; 0x78
		conn->llcp.conn_upd.pdu_win_offset = (u16_t *)
    793a:	f105 0309 	add.w	r3, r5, #9
    793e:	6763      	str	r3, [r4, #116]	; 0x74
		mayfly_sched_offset->fp = fp_mayfly_select_or_use;
    7940:	4b26      	ldr	r3, [pc, #152]	; (79dc <event_connection_prepare+0x1cc>)
    7942:	4a27      	ldr	r2, [pc, #156]	; (79e0 <event_connection_prepare+0x1d0>)
    7944:	60da      	str	r2, [r3, #12]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    7946:	2201      	movs	r2, #1
    7948:	4611      	mov	r1, r2
    794a:	2000      	movs	r0, #0
		mayfly_sched_offset->param = (void *)conn;
    794c:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    794e:	f7fc f901 	bl	3b54 <mayfly_enqueue>
		LL_ASSERT(!retval);
    7952:	2800      	cmp	r0, #0
    7954:	f000 81b4 	beq.w	7cc0 <event_connection_prepare+0x4b0>
    7958:	4a22      	ldr	r2, [pc, #136]	; (79e4 <event_connection_prepare+0x1d4>)
    795a:	4923      	ldr	r1, [pc, #140]	; (79e8 <event_connection_prepare+0x1d8>)
    795c:	e763      	b.n	7826 <event_connection_prepare+0x16>
			LL_ASSERT(0);
    795e:	4a23      	ldr	r2, [pc, #140]	; (79ec <event_connection_prepare+0x1dc>)
			LL_ASSERT(0);
    7960:	4923      	ldr	r1, [pc, #140]	; (79f0 <event_connection_prepare+0x1e0>)
    7962:	e760      	b.n	7826 <event_connection_prepare+0x16>
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    7964:	f8b4 7068 	ldrh.w	r7, [r4, #104]	; 0x68
    7968:	1bf7      	subs	r7, r6, r7
    796a:	b2bf      	uxth	r7, r7
	} else if (instant_latency <= 0x7FFF) {
    796c:	0438      	lsls	r0, r7, #16
    796e:	f100 81ab 	bmi.w	7cc8 <event_connection_prepare+0x4b8>
		conn->llcp_ack = conn->llcp_req;
    7972:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
    7976:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
		if (_radio.conn_upd == conn) {
    797a:	f8d5 2714 	ldr.w	r2, [r5, #1812]	; 0x714
		_radio.ticker_id_prepare = 0;
    797e:	742b      	strb	r3, [r5, #16]
		if (_radio.conn_upd == conn) {
    7980:	4294      	cmp	r4, r2
			_radio.conn_upd = NULL;
    7982:	bf08      	it	eq
    7984:	f8c5 3714 	streq.w	r3, [r5, #1812]	; 0x714
		if ((conn->llcp.conn_upd.interval !=
    7988:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
    798c:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    798e:	429a      	cmp	r2, r3
    7990:	d114      	bne.n	79bc <event_connection_prepare+0x1ac>
		     conn->conn_interval) ||
    7992:	f8b4 1064 	ldrh.w	r1, [r4, #100]	; 0x64
    7996:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    7998:	4299      	cmp	r1, r3
    799a:	d10f      	bne.n	79bc <event_connection_prepare+0x1ac>
		    (RADIO_CONN_EVENTS(conn->llcp.conn_upd.timeout *
    799c:	f240 43e2 	movw	r3, #1250	; 0x4e2
    79a0:	435a      	muls	r2, r3
    79a2:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    79a6:	f242 7110 	movw	r1, #10000	; 0x2710
    79aa:	fb01 2303 	mla	r3, r1, r3, r2
    79ae:	3b01      	subs	r3, #1
    79b0:	fb93 f3f2 	sdiv	r3, r3, r2
		    (conn->llcp.conn_upd.latency != conn->latency) ||
    79b4:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
    79b6:	b29b      	uxth	r3, r3
    79b8:	429a      	cmp	r2, r3
    79ba:	d02e      	beq.n	7a1a <event_connection_prepare+0x20a>
			node_rx = packet_rx_reserve_get(2);
    79bc:	2002      	movs	r0, #2
    79be:	f7fd ffc9 	bl	5954 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    79c2:	b9c8      	cbnz	r0, 79f8 <event_connection_prepare+0x1e8>
    79c4:	4a09      	ldr	r2, [pc, #36]	; (79ec <event_connection_prepare+0x1dc>)
		LL_ASSERT(node_rx);
    79c6:	490b      	ldr	r1, [pc, #44]	; (79f4 <event_connection_prepare+0x1e4>)
    79c8:	e72d      	b.n	7826 <event_connection_prepare+0x16>
    79ca:	bf00      	nop
    79cc:	200009f8 	.word	0x200009f8
    79d0:	0000e5b4 	.word	0x0000e5b4
    79d4:	0000ec3d 	.word	0x0000ec3d
    79d8:	200010e0 	.word	0x200010e0
    79dc:	20004d90 	.word	0x20004d90
    79e0:	000068f5 	.word	0x000068f5
    79e4:	0000e57d 	.word	0x0000e57d
    79e8:	0000e810 	.word	0x0000e810
    79ec:	0000e591 	.word	0x0000e591
    79f0:	0000d86b 	.word	0x0000d86b
    79f4:	0000eae7 	.word	0x0000eae7
			node_rx->hdr.handle = conn->handle;
    79f8:	8c23      	ldrh	r3, [r4, #32]
    79fa:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    79fc:	2308      	movs	r3, #8
    79fe:	7103      	strb	r3, [r0, #4]
			radio_le_conn_update_cmplt->status =
    7a00:	2300      	movs	r3, #0
    7a02:	72c3      	strb	r3, [r0, #11]
			radio_le_conn_update_cmplt->interval =
    7a04:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
    7a08:	8183      	strh	r3, [r0, #12]
			radio_le_conn_update_cmplt->latency =
    7a0a:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
    7a0e:	81c3      	strh	r3, [r0, #14]
			radio_le_conn_update_cmplt->timeout =
    7a10:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    7a14:	8203      	strh	r3, [r0, #16]
			packet_rx_enqueue();
    7a16:	f7ff f85b 	bl	6ad0 <packet_rx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    7a1a:	6823      	ldr	r3, [r4, #0]
    7a1c:	6866      	ldr	r6, [r4, #4]
    7a1e:	2b00      	cmp	r3, #0
    7a20:	da09      	bge.n	7a36 <event_connection_prepare+0x226>
			u32_t ticks_prepare_to_start =
    7a22:	68a0      	ldr	r0, [r4, #8]
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    7a24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    7a28:	42b0      	cmp	r0, r6
    7a2a:	bf2c      	ite	cs
    7a2c:	4480      	addcs	r8, r0
    7a2e:	44b0      	addcc	r8, r6
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    7a30:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    7a32:	eba8 0803 	sub.w	r8, r8, r3
		conn_interval_old = instant_latency * conn->conn_interval;
    7a36:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
			conn->llcp.conn_upd.interval;
    7a38:	f8b4 a062 	ldrh.w	sl, [r4, #98]	; 0x62
    7a3c:	49c4      	ldr	r1, [pc, #784]	; (7d50 <event_connection_prepare+0x540>)
		conn_interval_old = instant_latency * conn->conn_interval;
    7a3e:	fb13 f307 	smulbb	r3, r3, r7
    7a42:	b29b      	uxth	r3, r3
		latency = conn_interval_old /
    7a44:	fbb3 f2fa 	udiv	r2, r3, sl
    7a48:	fa1f f982 	uxth.w	r9, r2
		conn_interval_new = latency *
    7a4c:	fb1a f009 	smulbb	r0, sl, r9
    7a50:	b280      	uxth	r0, r0
		if (conn_interval_new > conn_interval_old) {
    7a52:	4283      	cmp	r3, r0
    7a54:	f080 80a3 	bcs.w	7b9e <event_connection_prepare+0x38e>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    7a58:	1ac0      	subs	r0, r0, r3
    7a5a:	f240 1223 	movw	r2, #291	; 0x123
    7a5e:	4342      	muls	r2, r0
    7a60:	17c3      	asrs	r3, r0, #31
    7a62:	fb01 2303 	mla	r3, r1, r3, r2
    7a66:	fba0 0101 	umull	r0, r1, r0, r1
    7a6a:	4419      	add	r1, r3
    7a6c:	a3b6      	add	r3, pc, #728	; (adr r3, 7d48 <event_connection_prepare+0x538>)
    7a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
    7a72:	f7f8 fbf9 	bl	268 <__aeabi_uldivmod>
    7a76:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    7a7a:	eb00 0308 	add.w	r3, r0, r8
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    7a7e:	930b      	str	r3, [sp, #44]	; 0x2c
		conn->latency_prepare -= (instant_latency - latency);
    7a80:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    7a82:	f8df b300 	ldr.w	fp, [pc, #768]	; 7d84 <event_connection_prepare+0x574>
    7a86:	1bdb      	subs	r3, r3, r7
    7a88:	444b      	add	r3, r9
    7a8a:	8523      	strh	r3, [r4, #40]	; 0x28
		ticks_slot_offset =
    7a8c:	6823      	ldr	r3, [r4, #0]
    7a8e:	429e      	cmp	r6, r3
    7a90:	bf38      	it	cc
    7a92:	461e      	movcc	r6, r3
		if (conn->role) {
    7a94:	f994 301d 	ldrsb.w	r3, [r4, #29]
		ticks_slot_offset =
    7a98:	960d      	str	r6, [sp, #52]	; 0x34
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
    7a9a:	f240 48e2 	movw	r8, #1250	; 0x4e2
		if (conn->role) {
    7a9e:	2b00      	cmp	r3, #0
    7aa0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    7aa2:	930c      	str	r3, [sp, #48]	; 0x30
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
    7aa4:	fb08 f60a 	mul.w	r6, r8, sl
		if (conn->role) {
    7aa8:	f280 808a 	bge.w	7bc0 <event_connection_prepare+0x3b0>
				conn->slave.window_widening_periodic_us *
    7aac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
			conn->slave.window_widening_prepare_us -=
    7aae:	6c62      	ldr	r2, [r4, #68]	; 0x44
    7ab0:	fb03 2717 	mls	r7, r3, r7, r2
				(((gc_lookup_ppm[_radio.sca] +
    7ab4:	f895 36b4 	ldrb.w	r3, [r5, #1716]	; 0x6b4
    7ab8:	4aa6      	ldr	r2, [pc, #664]	; (7d54 <event_connection_prepare+0x544>)
    7aba:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
				   gc_lookup_ppm[conn->slave.sca]) *
    7abe:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    7ac2:	f3c3 0382 	ubfx	r3, r3, #2, #3
    7ac6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				conn->llcp.conn_upd.win_size * 1250;
    7aca:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
				(((gc_lookup_ppm[_radio.sca] +
    7ace:	441d      	add	r5, r3
				   gc_lookup_ppm[conn->slave.sca]) *
    7ad0:	4375      	muls	r5, r6
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    7ad2:	f505 2574 	add.w	r5, r5, #999424	; 0xf4000
    7ad6:	4ba0      	ldr	r3, [pc, #640]	; (7d58 <event_connection_prepare+0x548>)
				conn->llcp.conn_upd.win_size * 1250;
    7ad8:	fb08 f202 	mul.w	r2, r8, r2
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    7adc:	f205 253f 	addw	r5, r5, #575	; 0x23f
    7ae0:	fbb5 f5f3 	udiv	r5, r5, r3
				(conn_interval_us >> 1) - RADIO_TIFS;
    7ae4:	0873      	lsrs	r3, r6, #1
				conn->slave.window_widening_periodic_us *
    7ae6:	fb05 f009 	mul.w	r0, r5, r9
				(conn_interval_us >> 1) - RADIO_TIFS;
    7aea:	3b96      	subs	r3, #150	; 0x96
			conn->slave.window_widening_prepare_us +=
    7aec:	4407      	add	r7, r0
			conn->slave.window_size_prepare_us =
    7aee:	64e2      	str	r2, [r4, #76]	; 0x4c
			conn->slave.ticks_to_offset = 0;
    7af0:	2200      	movs	r2, #0
			conn->slave.window_widening_prepare_us +=
    7af2:	429f      	cmp	r7, r3
    7af4:	bf94      	ite	ls
    7af6:	6467      	strls	r7, [r4, #68]	; 0x44
    7af8:	6463      	strhi	r3, [r4, #68]	; 0x44
			conn->slave.window_widening_periodic_us =
    7afa:	63e5      	str	r5, [r4, #60]	; 0x3c
			conn->slave.window_widening_max_us =
    7afc:	6423      	str	r3, [r4, #64]	; 0x40
			conn->slave.ticks_to_offset = 0;
    7afe:	65a2      	str	r2, [r4, #88]	; 0x58
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    7b00:	fba0 010b 	umull	r0, r1, r0, fp
    7b04:	a390      	add	r3, pc, #576	; (adr r3, 7d48 <event_connection_prepare+0x538>)
    7b06:	e9d3 2300 	ldrd	r2, r3, [r3]
    7b0a:	f7f8 fbad 	bl	268 <__aeabi_uldivmod>
    7b0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7b10:	1a1b      	subs	r3, r3, r0
    7b12:	930b      	str	r3, [sp, #44]	; 0x2c
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    7b14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7b16:	fbb3 f0f8 	udiv	r0, r3, r8
    7b1a:	fb08 f000 	mul.w	r0, r8, r0
    7b1e:	a38a      	add	r3, pc, #552	; (adr r3, 7d48 <event_connection_prepare+0x538>)
    7b20:	e9d3 2300 	ldrd	r2, r3, [r3]
    7b24:	fba0 010b 	umull	r0, r1, r0, fp
    7b28:	f7f8 fb9e 	bl	268 <__aeabi_uldivmod>
			periodic_us -= conn->slave.window_widening_periodic_us;
    7b2c:	1b75      	subs	r5, r6, r5
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    7b2e:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
		conn->latency = conn->llcp.conn_upd.latency;
    7b32:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
    7b36:	84e3      	strh	r3, [r4, #38]	; 0x26
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    7b38:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
		conn->conn_interval = conn->llcp.conn_upd.interval;
    7b3c:	f8a4 a024 	strh.w	sl, [r4, #36]	; 0x24
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    7b40:	f242 7210 	movw	r2, #10000	; 0x2710
    7b44:	fb02 6303 	mla	r3, r2, r3, r6
    7b48:	3b01      	subs	r3, #1
    7b4a:	fbb3 f3f6 	udiv	r3, r3, r6
    7b4e:	85e3      	strh	r3, [r4, #46]	; 0x2e
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    7b50:	4b82      	ldr	r3, [pc, #520]	; (7d5c <event_connection_prepare+0x54c>)
    7b52:	4433      	add	r3, r6
    7b54:	fbb3 f6f6 	udiv	r6, r3, r6
		if (!conn->llcp.conn_upd.is_internal) {
    7b58:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    7b5c:	8666      	strh	r6, [r4, #50]	; 0x32
		if (!conn->llcp.conn_upd.is_internal) {
    7b5e:	f013 0304 	ands.w	r3, r3, #4
			conn->supervision_expire = 0;
    7b62:	bf08      	it	eq
    7b64:	8623      	strheq	r3, [r4, #48]	; 0x30
		mayfly_was_enabled =
    7b66:	2101      	movs	r1, #1
    7b68:	2000      	movs	r0, #0
    7b6a:	f003 fd43 	bl	b5f4 <mayfly_is_enabled>
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    7b6e:	2200      	movs	r2, #0
    7b70:	2101      	movs	r1, #1
		mayfly_was_enabled =
    7b72:	4681      	mov	r9, r0
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    7b74:	4610      	mov	r0, r2
    7b76:	f7fb ffc5 	bl	3b04 <mayfly_enable>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    7b7a:	f894 2020 	ldrb.w	r2, [r4, #32]
		ticker_status =
    7b7e:	f641 53ab 	movw	r3, #7595	; 0x1dab
    7b82:	2100      	movs	r1, #0
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    7b84:	3207      	adds	r2, #7
		ticker_status =
    7b86:	9300      	str	r3, [sp, #0]
    7b88:	b2d2      	uxtb	r2, r2
    7b8a:	4b75      	ldr	r3, [pc, #468]	; (7d60 <event_connection_prepare+0x550>)
    7b8c:	4608      	mov	r0, r1
    7b8e:	f7fc fe33 	bl	47f8 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    7b92:	f030 0802 	bics.w	r8, r0, #2
    7b96:	d020      	beq.n	7bda <event_connection_prepare+0x3ca>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    7b98:	4a72      	ldr	r2, [pc, #456]	; (7d64 <event_connection_prepare+0x554>)
    7b9a:	4973      	ldr	r1, [pc, #460]	; (7d68 <event_connection_prepare+0x558>)
    7b9c:	e643      	b.n	7826 <event_connection_prepare+0x16>
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    7b9e:	fb0a 3212 	mls	r2, sl, r2, r3
    7ba2:	b292      	uxth	r2, r2
    7ba4:	fba2 0101 	umull	r0, r1, r2, r1
    7ba8:	f240 1323 	movw	r3, #291	; 0x123
    7bac:	fb03 1102 	mla	r1, r3, r2, r1
    7bb0:	a365      	add	r3, pc, #404	; (adr r3, 7d48 <event_connection_prepare+0x538>)
    7bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
    7bb6:	f7f8 fb57 	bl	268 <__aeabi_uldivmod>
    7bba:	eba8 0300 	sub.w	r3, r8, r0
    7bbe:	e75e      	b.n	7a7e <event_connection_prepare+0x26e>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    7bc0:	990c      	ldr	r1, [sp, #48]	; 0x30
    7bc2:	a361      	add	r3, pc, #388	; (adr r3, 7d48 <event_connection_prepare+0x538>)
    7bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
    7bc8:	fba1 010b 	umull	r0, r1, r1, fp
    7bcc:	f7f8 fb4c 	bl	268 <__aeabi_uldivmod>
    7bd0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_win_offset += 1;
    7bd4:	1c47      	adds	r7, r0, #1
		periodic_us = conn_interval_us;
    7bd6:	4635      	mov	r5, r6
    7bd8:	e7ab      	b.n	7b32 <event_connection_prepare+0x322>
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    7bda:	fba5 ab0b 	umull	sl, fp, r5, fp
    7bde:	a35a      	add	r3, pc, #360	; (adr r3, 7d48 <event_connection_prepare+0x538>)
    7be0:	e9d3 2300 	ldrd	r2, r3, [r3]
    7be4:	4650      	mov	r0, sl
    7be6:	4659      	mov	r1, fp
    7be8:	f7f8 fb3e 	bl	268 <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(periodic_us),
    7bec:	4a5f      	ldr	r2, [pc, #380]	; (7d6c <event_connection_prepare+0x55c>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7bee:	f894 6020 	ldrb.w	r6, [r4, #32]
    7bf2:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
				     HAL_TICKER_REMAINDER(periodic_us),
    7bf6:	2307      	movs	r3, #7
    7bf8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    7bfc:	2100      	movs	r1, #0
    7bfe:	4343      	muls	r3, r0
    7c00:	fb02 3301 	mla	r3, r2, r1, r3
    7c04:	fba0 0102 	umull	r0, r1, r0, r2
    7c08:	ebba 0000 	subs.w	r0, sl, r0
    7c0c:	4419      	add	r1, r3
    7c0e:	eb6b 0101 	sbc.w	r1, fp, r1
    7c12:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    7c16:	2300      	movs	r3, #0
    7c18:	f7f8 fb26 	bl	268 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7c1c:	68e3      	ldr	r3, [r4, #12]
    7c1e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    7c20:	f994 e01d 	ldrsb.w	lr, [r4, #29]
    7c24:	4952      	ldr	r1, [pc, #328]	; (7d70 <event_connection_prepare+0x560>)
		ticker_status =
    7c26:	9002      	str	r0, [sp, #8]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7c28:	441a      	add	r2, r3
    7c2a:	4613      	mov	r3, r2
    7c2c:	4a51      	ldr	r2, [pc, #324]	; (7d74 <event_connection_prepare+0x564>)
		ticker_status =
    7c2e:	9304      	str	r3, [sp, #16]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7c30:	ea12 022e 	ands.w	r2, r2, lr, asr #32
    7c34:	bf38      	it	cc
    7c36:	460a      	movcc	r2, r1
    7c38:	3607      	adds	r6, #7
		ticker_status =
    7c3a:	f641 51bb 	movw	r1, #7611	; 0x1dbb
    7c3e:	9108      	str	r1, [sp, #32]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7c40:	b2f6      	uxtb	r6, r6
		ticker_status =
    7c42:	4947      	ldr	r1, [pc, #284]	; (7d60 <event_connection_prepare+0x550>)
    7c44:	9107      	str	r1, [sp, #28]
    7c46:	9205      	str	r2, [sp, #20]
    7c48:	9406      	str	r4, [sp, #24]
    7c4a:	f8cd 800c 	str.w	r8, [sp, #12]
    7c4e:	9501      	str	r5, [sp, #4]
    7c50:	9700      	str	r7, [sp, #0]
    7c52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7c54:	4632      	mov	r2, r6
    7c56:	4641      	mov	r1, r8
    7c58:	4640      	mov	r0, r8
    7c5a:	f7fc fd2f 	bl	46bc <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    7c5e:	f030 0002 	bics.w	r0, r0, #2
    7c62:	d199      	bne.n	7b98 <event_connection_prepare+0x388>
		if (mayfly_was_enabled) {
    7c64:	f1b9 0f00 	cmp.w	r9, #0
    7c68:	d06b      	beq.n	7d42 <event_connection_prepare+0x532>
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    7c6a:	2201      	movs	r2, #1
    7c6c:	4611      	mov	r1, r2
}
    7c6e:	b00f      	add	sp, #60	; 0x3c
    7c70:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    7c74:	f7fb bf46 	b.w	3b04 <mayfly_enable>
	if (conn->llcp.chan_map.initiate) {
    7c78:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
    7c7c:	2b00      	cmp	r3, #0
    7c7e:	f000 8083 	beq.w	7d88 <event_connection_prepare+0x578>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    7c82:	483d      	ldr	r0, [pc, #244]	; (7d78 <event_connection_prepare+0x568>)
    7c84:	f7fb fead 	bl	39e2 <mem_acquire>
		if (node_tx) {
    7c88:	4605      	mov	r5, r0
    7c8a:	b1e8      	cbz	r0, 7cc8 <event_connection_prepare+0x4b8>
			conn->llcp.chan_map.initiate = 0;
    7c8c:	2300      	movs	r3, #0
    7c8e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
				event_counter + conn->latency + 6;
    7c92:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    7c94:	3306      	adds	r3, #6
    7c96:	4433      	add	r3, r6
			conn->llcp.chan_map.instant =
    7c98:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    7c9c:	7903      	ldrb	r3, [r0, #4]
    7c9e:	f043 0303 	orr.w	r3, r3, #3
    7ca2:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    7ca4:	2308      	movs	r3, #8
    7ca6:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    7ca8:	2301      	movs	r3, #1
    7caa:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
    7cac:	2205      	movs	r2, #5
    7cae:	f104 0161 	add.w	r1, r4, #97	; 0x61
    7cb2:	3008      	adds	r0, #8
    7cb4:	f7f8 fcb1 	bl	61a <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
    7cb8:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    7cbc:	f8a5 300d 	strh.w	r3, [r5, #13]
			ctrl_tx_enqueue(conn, node_tx);
    7cc0:	4629      	mov	r1, r5
    7cc2:	4620      	mov	r0, r4
    7cc4:	f7ff fd14 	bl	76f0 <ctrl_tx_enqueue>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
    7cc8:	f894 2099 	ldrb.w	r2, [r4, #153]	; 0x99
    7ccc:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
    7cd0:	429a      	cmp	r2, r3
    7cd2:	d01d      	beq.n	7d10 <event_connection_prepare+0x500>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    7cd4:	2005      	movs	r0, #5
    7cd6:	f7ff f987 	bl	6fe8 <event_stop.constprop.48>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    7cda:	4827      	ldr	r0, [pc, #156]	; (7d78 <event_connection_prepare+0x568>)
    7cdc:	f7fb fe81 	bl	39e2 <mem_acquire>
		if (node_tx) {
    7ce0:	4601      	mov	r1, r0
    7ce2:	b1a8      	cbz	r0, 7d10 <event_connection_prepare+0x500>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
    7ce4:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
    7ce8:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    7cec:	7903      	ldrb	r3, [r0, #4]
    7cee:	f043 0303 	orr.w	r3, r3, #3
    7cf2:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    7cf4:	2302      	movs	r3, #2
    7cf6:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    7cf8:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.terminate_ind.error_code =
    7cfa:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
    7cfe:	7203      	strb	r3, [r0, #8]
			ctrl_tx_enqueue(conn, node_tx);
    7d00:	4620      	mov	r0, r4
    7d02:	f7ff fcf5 	bl	76f0 <ctrl_tx_enqueue>
			conn->procedure_expire = conn->supervision_reload;
    7d06:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
			if (conn->procedure_expire <= 1) {
    7d08:	2b01      	cmp	r3, #1
				conn->procedure_expire++;
    7d0a:	bf98      	it	ls
    7d0c:	3301      	addls	r3, #1
    7d0e:	86a3      	strh	r3, [r4, #52]	; 0x34
	event_common_prepare(ticks_at_expire, remainder,
    7d10:	f894 3020 	ldrb.w	r3, [r4, #32]
    7d14:	f994 501d 	ldrsb.w	r5, [r4, #29]
    7d18:	4818      	ldr	r0, [pc, #96]	; (7d7c <event_connection_prepare+0x56c>)
    7d1a:	4919      	ldr	r1, [pc, #100]	; (7d80 <event_connection_prepare+0x570>)
    7d1c:	68a2      	ldr	r2, [r4, #8]
    7d1e:	9403      	str	r4, [sp, #12]
    7d20:	3307      	adds	r3, #7
    7d22:	ea11 0125 	ands.w	r1, r1, r5, asr #32
    7d26:	bf38      	it	cc
    7d28:	4601      	movcc	r1, r0
    7d2a:	b2db      	uxtb	r3, r3
    7d2c:	e88d 000c 	stmia.w	sp, {r2, r3}
    7d30:	9102      	str	r1, [sp, #8]
    7d32:	1d23      	adds	r3, r4, #4
    7d34:	4622      	mov	r2, r4
    7d36:	4649      	mov	r1, r9
    7d38:	4640      	mov	r0, r8
	conn->event_counter = event_counter + 1;
    7d3a:	3601      	adds	r6, #1
	event_common_prepare(ticks_at_expire, remainder,
    7d3c:	f7ff f962 	bl	7004 <event_common_prepare>
	conn->event_counter = event_counter + 1;
    7d40:	8466      	strh	r6, [r4, #34]	; 0x22
}
    7d42:	b00f      	add	sp, #60	; 0x3c
    7d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7d48:	1afd498d 	.word	0x1afd498d
    7d4c:	00000007 	.word	0x00000007
    7d50:	09ce5400 	.word	0x09ce5400
    7d54:	0000e82e 	.word	0x0000e82e
    7d58:	000f4240 	.word	0x000f4240
    7d5c:	026259ff 	.word	0x026259ff
    7d60:	000062b9 	.word	0x000062b9
    7d64:	0000e591 	.word	0x0000e591
    7d68:	0000e695 	.word	0x0000e695
    7d6c:	1afd498d 	.word	0x1afd498d
    7d70:	00007ed5 	.word	0x00007ed5
    7d74:	00007ed9 	.word	0x00007ed9
    7d78:	200010e0 	.word	0x200010e0
    7d7c:	00009915 	.word	0x00009915
    7d80:	00007f19 	.word	0x00007f19
    7d84:	3b9aca00 	.word	0x3b9aca00
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    7d88:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    7d8c:	1af3      	subs	r3, r6, r3
    7d8e:	0419      	lsls	r1, r3, #16
    7d90:	d49a      	bmi.n	7cc8 <event_connection_prepare+0x4b8>
		conn->llcp_ack = conn->llcp_req;
    7d92:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    7d96:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		memcpy(&conn->data_chan_map[0],
    7d9a:	f104 0517 	add.w	r5, r4, #23
    7d9e:	2205      	movs	r2, #5
    7da0:	f104 0161 	add.w	r1, r4, #97	; 0x61
    7da4:	4628      	mov	r0, r5
    7da6:	f7f8 fc38 	bl	61a <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    7daa:	2105      	movs	r1, #5
    7dac:	4628      	mov	r0, r5
    7dae:	f7fb ffb1 	bl	3d14 <util_ones_count_get>
		conn->data_chan_count =
    7db2:	7f63      	ldrb	r3, [r4, #29]
    7db4:	f360 0305 	bfi	r3, r0, #0, #6
    7db8:	7763      	strb	r3, [r4, #29]
		conn->chm_update = 1;
    7dba:	2301      	movs	r3, #1
    7dbc:	7723      	strb	r3, [r4, #28]
    7dbe:	e783      	b.n	7cc8 <event_connection_prepare+0x4b8>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    7dc0:	4840      	ldr	r0, [pc, #256]	; (7ec4 <event_connection_prepare+0x6b4>)
    7dc2:	f7fb fe0e 	bl	39e2 <mem_acquire>
	if (node_tx) {
    7dc6:	4605      	mov	r5, r0
    7dc8:	2800      	cmp	r0, #0
    7dca:	f43f af7d 	beq.w	7cc8 <event_connection_prepare+0x4b8>
		conn->llcp_ack = conn->llcp_req;
    7dce:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    7dd2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		conn->llcp_features = RADIO_BLE_FEAT;
    7dd6:	4b3c      	ldr	r3, [pc, #240]	; (7ec8 <event_connection_prepare+0x6b8>)
    7dd8:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    7ddc:	7903      	ldrb	r3, [r0, #4]
    7dde:	f043 0303 	orr.w	r3, r3, #3
    7de2:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    7de4:	2309      	movs	r3, #9
    7de6:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode =
    7de8:	f994 301d 	ldrsb.w	r3, [r4, #29]
    7dec:	2b00      	cmp	r3, #0
    7dee:	bfac      	ite	ge
    7df0:	2308      	movge	r3, #8
    7df2:	230e      	movlt	r3, #14
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
    7df4:	2208      	movs	r2, #8
		pdu_ctrl_tx->llctrl.opcode =
    7df6:	71c3      	strb	r3, [r0, #7]
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
    7df8:	2100      	movs	r1, #0
    7dfa:	4410      	add	r0, r2
    7dfc:	f7f8 fc39 	bl	672 <memset>
			conn->llcp_features & 0xFF;
    7e00:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		pdu_ctrl_tx->llctrl.feature_req.features[0] =
    7e04:	722b      	strb	r3, [r5, #8]
			(conn->llcp_features >> 8) & 0xFF;
    7e06:	0a1a      	lsrs	r2, r3, #8
			(conn->llcp_features >> 16) & 0xFF;
    7e08:	0c1b      	lsrs	r3, r3, #16
		pdu_ctrl_tx->llctrl.feature_req.features[1] =
    7e0a:	726a      	strb	r2, [r5, #9]
		pdu_ctrl_tx->llctrl.feature_req.features[2] =
    7e0c:	72ab      	strb	r3, [r5, #10]
		ctrl_tx_enqueue(conn, node_tx);
    7e0e:	4629      	mov	r1, r5
			ctrl_tx_enqueue(conn, node_tx);
    7e10:	4620      	mov	r0, r4
    7e12:	f7ff fc6d 	bl	76f0 <ctrl_tx_enqueue>
			conn->procedure_expire = conn->procedure_reload;
    7e16:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    7e18:	86a3      	strh	r3, [r4, #52]	; 0x34
    7e1a:	e755      	b.n	7cc8 <event_connection_prepare+0x4b8>
	if (conn->llcp_version.tx == 0) {
    7e1c:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
    7e20:	07da      	lsls	r2, r3, #31
    7e22:	d424      	bmi.n	7e6e <event_connection_prepare+0x65e>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    7e24:	4827      	ldr	r0, [pc, #156]	; (7ec4 <event_connection_prepare+0x6b4>)
    7e26:	f7fb fddc 	bl	39e2 <mem_acquire>
		if (node_tx) {
    7e2a:	4601      	mov	r1, r0
    7e2c:	2800      	cmp	r0, #0
    7e2e:	f43f af4b 	beq.w	7cc8 <event_connection_prepare+0x4b8>
			conn->llcp_ack = conn->llcp_req;
    7e32:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    7e36:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			conn->llcp_version.tx = 1;
    7e3a:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
    7e3e:	f043 0301 	orr.w	r3, r3, #1
    7e42:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    7e46:	7903      	ldrb	r3, [r0, #4]
    7e48:	f043 0303 	orr.w	r3, r3, #3
    7e4c:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len =
    7e4e:	2306      	movs	r3, #6
    7e50:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    7e52:	230c      	movs	r3, #12
    7e54:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.version_ind.version_number =
    7e56:	2309      	movs	r3, #9
    7e58:	7203      	strb	r3, [r0, #8]
			pdu_ctrl_tx->llctrl.version_ind.company_id =
    7e5a:	f06f 030e 	mvn.w	r3, #14
    7e5e:	7243      	strb	r3, [r0, #9]
    7e60:	2305      	movs	r3, #5
    7e62:	7283      	strb	r3, [r0, #10]
			pdu_ctrl_tx->llctrl.version_ind.sub_version_number =
    7e64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7e68:	72c3      	strb	r3, [r0, #11]
    7e6a:	7303      	strb	r3, [r0, #12]
    7e6c:	e7d0      	b.n	7e10 <event_connection_prepare+0x600>
	} else if (conn->llcp_version.rx != 0) {
    7e6e:	079b      	lsls	r3, r3, #30
    7e70:	d523      	bpl.n	7eba <event_connection_prepare+0x6aa>
		conn->llcp_ack = conn->llcp_req;
    7e72:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    7e76:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		node_rx = packet_rx_reserve_get(2);
    7e7a:	2002      	movs	r0, #2
    7e7c:	f7fd fd6a 	bl	5954 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    7e80:	b908      	cbnz	r0, 7e86 <event_connection_prepare+0x676>
    7e82:	4a12      	ldr	r2, [pc, #72]	; (7ecc <event_connection_prepare+0x6bc>)
    7e84:	e59f      	b.n	79c6 <event_connection_prepare+0x1b6>
		node_rx->hdr.handle = conn->handle;
    7e86:	8c23      	ldrh	r3, [r4, #32]
    7e88:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    7e8a:	2301      	movs	r3, #1
    7e8c:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    7e8e:	7a03      	ldrb	r3, [r0, #8]
    7e90:	f043 0303 	orr.w	r3, r3, #3
    7e94:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len =
    7e96:	2306      	movs	r3, #6
    7e98:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode =
    7e9a:	230c      	movs	r3, #12
    7e9c:	72c3      	strb	r3, [r0, #11]
		pdu_ctrl_rx->llctrl.version_ind.version_number =
    7e9e:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
    7ea2:	7303      	strb	r3, [r0, #12]
		pdu_ctrl_rx->llctrl.version_ind.company_id =
    7ea4:	f8b4 3092 	ldrh.w	r3, [r4, #146]	; 0x92
    7ea8:	f8a0 300d 	strh.w	r3, [r0, #13]
		pdu_ctrl_rx->llctrl.version_ind.sub_version_number =
    7eac:	f8b4 3094 	ldrh.w	r3, [r4, #148]	; 0x94
    7eb0:	f8a0 300f 	strh.w	r3, [r0, #15]
		packet_rx_enqueue();
    7eb4:	f7fe fe0c 	bl	6ad0 <packet_rx_enqueue>
    7eb8:	e706      	b.n	7cc8 <event_connection_prepare+0x4b8>
		LL_ASSERT(0);
    7eba:	4a04      	ldr	r2, [pc, #16]	; (7ecc <event_connection_prepare+0x6bc>)
    7ebc:	e550      	b.n	7960 <event_connection_prepare+0x150>
			LL_ASSERT(0);
    7ebe:	4a04      	ldr	r2, [pc, #16]	; (7ed0 <event_connection_prepare+0x6c0>)
    7ec0:	e54e      	b.n	7960 <event_connection_prepare+0x150>
    7ec2:	bf00      	nop
    7ec4:	200010e0 	.word	0x200010e0
    7ec8:	0001400c 	.word	0x0001400c
    7ecc:	0000e5a5 	.word	0x0000e5a5
    7ed0:	0000e5b4 	.word	0x0000e5b4

00007ed4 <event_master_prepare>:
	event_connection_prepare(ticks_at_expire, remainder, lazy, context);
    7ed4:	f7ff bc9c 	b.w	7810 <event_connection_prepare>

00007ed8 <event_slave_prepare>:
    7ed8:	f7ff bc9a 	b.w	7810 <event_connection_prepare>

00007edc <connection_configure>:
{
    7edc:	b510      	push	{r4, lr}
    7ede:	4604      	mov	r4, r0
	radio_reset();
    7ee0:	f003 f824 	bl	af2c <radio_reset>
	radio_tx_power_set(0);
    7ee4:	2000      	movs	r0, #0
    7ee6:	f003 f84b 	bl	af80 <radio_tx_power_set>
	radio_isr_set(isr);
    7eea:	480a      	ldr	r0, [pc, #40]	; (7f14 <connection_configure+0x38>)
    7eec:	f002 ffe8 	bl	aec0 <radio_isr_set>
	radio_aa_set(conn->access_addr);
    7ef0:	f104 0010 	add.w	r0, r4, #16
    7ef4:	f003 f862 	bl	afbc <radio_aa_set>
			     ((u32_t)conn->crc_init[1] << 8) |
    7ef8:	7d63      	ldrb	r3, [r4, #21]
			    (((u32_t)conn->crc_init[2] << 16) |
    7efa:	7da1      	ldrb	r1, [r4, #22]
			     ((u32_t)conn->crc_init[1] << 8) |
    7efc:	021b      	lsls	r3, r3, #8
			    (((u32_t)conn->crc_init[2] << 16) |
    7efe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			     ((u32_t)conn->crc_init[0])));
    7f02:	7d21      	ldrb	r1, [r4, #20]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    7f04:	f240 605b 	movw	r0, #1627	; 0x65b
    7f08:	4319      	orrs	r1, r3
}
    7f0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    7f0e:	f003 b8fd 	b.w	b10c <radio_crc_configure>
    7f12:	bf00      	nop
    7f14:	00008181 	.word	0x00008181

00007f18 <event_slave>:
{
    7f18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7f1c:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    7f1e:	4b5e      	ldr	r3, [pc, #376]	; (8098 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x98>)
    7f20:	7cda      	ldrb	r2, [r3, #19]
{
    7f22:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    7f24:	f002 06ff 	and.w	r6, r2, #255	; 0xff
    7f28:	461d      	mov	r5, r3
    7f2a:	b152      	cbz	r2, 7f42 <event_slave+0x2a>
    7f2c:	4a5b      	ldr	r2, [pc, #364]	; (809c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9c>)
    7f2e:	495c      	ldr	r1, [pc, #368]	; (80a0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa0>)
	LL_ASSERT(_radio.ticker_id_prepare ==
    7f30:	2003      	movs	r0, #3
    7f32:	f7fa f965 	bl	2200 <bt_log>
    7f36:	4040      	eors	r0, r0
    7f38:	f380 8811 	msr	BASEPRI, r0
    7f3c:	f04f 0004 	mov.w	r0, #4
    7f40:	df02      	svc	2
    7f42:	7c1a      	ldrb	r2, [r3, #16]
    7f44:	8c23      	ldrh	r3, [r4, #32]
    7f46:	b2d2      	uxtb	r2, r2
    7f48:	3307      	adds	r3, #7
    7f4a:	429a      	cmp	r2, r3
    7f4c:	d002      	beq.n	7f54 <event_slave+0x3c>
    7f4e:	4a53      	ldr	r2, [pc, #332]	; (809c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9c>)
    7f50:	4954      	ldr	r1, [pc, #336]	; (80a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa4>)
    7f52:	e7ed      	b.n	7f30 <event_slave+0x18>
	_radio.role = ROLE_SLAVE;
    7f54:	2303      	movs	r3, #3
    7f56:	74eb      	strb	r3, [r5, #19]
	_radio.packet_counter = 0;
    7f58:	f885 66ac 	strb.w	r6, [r5, #1708]	; 0x6ac
	_radio.crc_expire = 0;
    7f5c:	f885 66ad 	strb.w	r6, [r5, #1709]	; 0x6ad
	_radio.state = STATE_RX;
    7f60:	2301      	movs	r3, #1
    7f62:	752b      	strb	r3, [r5, #20]
	conn->latency_event = conn->latency_prepare;
    7f64:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
    7f66:	f8c5 46a8 	str.w	r4, [r5, #1704]	; 0x6a8
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    7f6a:	b2d2      	uxtb	r2, r2
	conn->latency_event = conn->latency_prepare;
    7f6c:	8563      	strh	r3, [r4, #42]	; 0x2a
	_radio.ticks_anchor = ticks_at_expire;
    7f6e:	60a8      	str	r0, [r5, #8]
	conn->latency_prepare = 0;
    7f70:	8526      	strh	r6, [r4, #40]	; 0x28
	connection_configure(conn);
    7f72:	4620      	mov	r0, r4
	_radio.ticker_id_prepare = 0;
    7f74:	742e      	strb	r6, [r5, #16]
	_radio.ticker_id_event =
    7f76:	746a      	strb	r2, [r5, #17]
	connection_configure(conn);
    7f78:	f7ff ffb0 	bl	7edc <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
    7f7c:	2096      	movs	r0, #150	; 0x96
    7f7e:	f003 f973 	bl	b268 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
    7f82:	4633      	mov	r3, r6
    7f84:	4632      	mov	r2, r6
    7f86:	4631      	mov	r1, r6
    7f88:	4630      	mov	r0, r6
    7f8a:	f003 f8e9 	bl	b160 <radio_switch_complete_and_tx>
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    7f8e:	f895 26cd 	ldrb.w	r2, [r5, #1741]	; 0x6cd
    7f92:	f8d5 36c8 	ldr.w	r3, [r5, #1736]	; 0x6c8
    7f96:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
	rx_packet_set(conn, (void *)
    7f9a:	4620      	mov	r0, r4
    7f9c:	3108      	adds	r1, #8
    7f9e:	f7fe fb0f 	bl	65c0 <rx_packet_set>
	if (conn->data_chan_sel) {
    7fa2:	7f63      	ldrb	r3, [r4, #29]
    7fa4:	f013 0f40 	tst.w	r3, #64	; 0x40
    7fa8:	f104 0217 	add.w	r2, r4, #23
    7fac:	d04a      	beq.n	8044 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x44>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    7fae:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    7fb0:	8be1      	ldrh	r1, [r4, #30]
    7fb2:	3801      	subs	r0, #1
    7fb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7fb8:	b280      	uxth	r0, r0
    7fba:	f7ff fb55 	bl	7668 <chan_sel_2>
	chan_set(data_chan_use);
    7fbe:	f7fd fea1 	bl	5d04 <chan_set>
	conn->slave.window_widening_event_us +=
    7fc2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    7fc4:	6c62      	ldr	r2, [r4, #68]	; 0x44
    7fc6:	4413      	add	r3, r2
	conn->slave.window_widening_prepare_us = 0;
    7fc8:	2200      	movs	r2, #0
    7fca:	6462      	str	r2, [r4, #68]	; 0x44
	    conn->slave.window_widening_max_us) {
    7fcc:	6c22      	ldr	r2, [r4, #64]	; 0x40
	conn->slave.window_widening_event_us +=
    7fce:	64a3      	str	r3, [r4, #72]	; 0x48
	if (conn->slave.window_widening_event_us >
    7fd0:	4293      	cmp	r3, r2
		conn->slave.window_widening_event_us =
    7fd2:	bf88      	it	hi
    7fd4:	64a2      	strhi	r2, [r4, #72]	; 0x48
	conn->slave.window_size_event_us +=
    7fd6:	6d23      	ldr	r3, [r4, #80]	; 0x50
    7fd8:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
	conn->slave.window_size_prepare_us = 0;
    7fda:	2600      	movs	r6, #0
	conn->slave.window_size_event_us +=
    7fdc:	4413      	add	r3, r2
    7fde:	6523      	str	r3, [r4, #80]	; 0x50
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    7fe0:	68ea      	ldr	r2, [r5, #12]
	conn->slave.window_size_prepare_us = 0;
    7fe2:	64e6      	str	r6, [r4, #76]	; 0x4c
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    7fe4:	f107 0109 	add.w	r1, r7, #9
    7fe8:	4630      	mov	r0, r6
    7fea:	f003 f949 	bl	b280 <radio_tmr_start>
    7fee:	4680      	mov	r8, r0
	radio_tmr_aa_capture();
    7ff0:	f003 f9e2 	bl	b3b8 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
    7ff4:	4630      	mov	r0, r6
    7ff6:	f003 fa01 	bl	b3fc <radio_tmr_aa_save>
    7ffa:	6d23      	ldr	r3, [r4, #80]	; 0x50
	       (conn->slave.window_widening_event_us << 1) +
    7ffc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    7ffe:	3378      	adds	r3, #120	; 0x78
	hcto += radio_rx_ready_delay_get(0, 0);
    8000:	4631      	mov	r1, r6
    8002:	4630      	mov	r0, r6
    8004:	eb03 0942 	add.w	r9, r3, r2, lsl #1
    8008:	f003 f831 	bl	b06e <radio_rx_ready_delay_get>
	hcto += addr_us_get(0);
    800c:	44c8      	add	r8, r9
	hcto += radio_rx_chain_delay_get(0, 0);
    800e:	4631      	mov	r1, r6
	hcto += addr_us_get(0);
    8010:	4480      	add	r8, r0
	hcto += radio_rx_chain_delay_get(0, 0);
    8012:	4630      	mov	r0, r6
    8014:	f003 f82d 	bl	b072 <radio_rx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
    8018:	4440      	add	r0, r8
    801a:	f003 f9af 	bl	b37c <radio_tmr_hcto_configure>
	if (preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    801e:	f894 1020 	ldrb.w	r1, [r4, #32]
    8022:	3107      	adds	r1, #7
    8024:	463a      	mov	r2, r7
    8026:	b2c9      	uxtb	r1, r1
    8028:	4620      	mov	r0, r4
    802a:	f7fe fe53 	bl	6cd4 <preempt_calc>
    802e:	4603      	mov	r3, r0
    8030:	b340      	cbz	r0, 8084 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x84>
		_radio.state = STATE_STOP;
    8032:	2304      	movs	r3, #4
    8034:	752b      	strb	r3, [r5, #20]
		radio_disable();
    8036:	f003 f82d 	bl	b094 <radio_disable>
	packet_tx_enqueue(2);
    803a:	2002      	movs	r0, #2
}
    803c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	packet_tx_enqueue(2);
    8040:	f7fe bb12 	b.w	6668 <packet_tx_enqueue>
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    8044:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    8046:	7fa6      	ldrb	r6, [r4, #30]
    8048:	fb01 6606 	mla	r6, r1, r6, r6
    804c:	7fe1      	ldrb	r1, [r4, #31]
    804e:	2025      	movs	r0, #37	; 0x25
    8050:	440e      	add	r6, r1
    8052:	fb96 f1f0 	sdiv	r1, r6, r0
    8056:	fb00 6611 	mls	r6, r0, r1, r6
    805a:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    805c:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
    805e:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    8060:	5c51      	ldrb	r1, [r2, r1]
    8062:	f006 0607 	and.w	r6, r6, #7
    8066:	fa41 f606 	asr.w	r6, r1, r6
    806a:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
    806c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    8070:	d4a5      	bmi.n	7fbe <event_slave+0xa6>
		chan_index = chan_next % chan_count;
    8072:	fbb0 f1f3 	udiv	r1, r0, r3
    8076:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
    807a:	b2c9      	uxtb	r1, r1
    807c:	4610      	mov	r0, r2
    807e:	f7fd fc4d 	bl	591c <chan_sel_remap>
    8082:	e79c      	b.n	7fbe <event_slave+0xa6>
		ticker_status =
    8084:	4a08      	ldr	r2, [pc, #32]	; (80a8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa8>)
    8086:	4601      	mov	r1, r0
    8088:	f7fc fc34 	bl	48f4 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    808c:	f030 0302 	bics.w	r3, r0, #2
    8090:	d0d3      	beq.n	803a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3a>
    8092:	4a02      	ldr	r2, [pc, #8]	; (809c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9c>)
    8094:	4905      	ldr	r1, [pc, #20]	; (80ac <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xac>)
    8096:	e74b      	b.n	7f30 <event_slave+0x18>
    8098:	200009f8 	.word	0x200009f8
    809c:	0000e5cd 	.word	0x0000e5cd
    80a0:	0000e70a 	.word	0x0000e70a
    80a4:	0000e7cc 	.word	0x0000e7cc
    80a8:	000063d1 	.word	0x000063d1
    80ac:	0000e695 	.word	0x0000e695

000080b0 <prepare_pdu_data_tx>:
{
    80b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	    conn->empty ||
    80b2:	f890 30a8 	ldrb.w	r3, [r0, #168]	; 0xa8
	if (/* empty packet */
    80b6:	061a      	lsls	r2, r3, #24
{
    80b8:	4604      	mov	r4, r0
    80ba:	460f      	mov	r7, r1
	if (/* empty packet */
    80bc:	d409      	bmi.n	80d2 <prepare_pdu_data_tx+0x22>
	    !conn->pkt_tx_head ||
    80be:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
	    conn->empty ||
    80c2:	b135      	cbz	r5, 80d2 <prepare_pdu_data_tx+0x22>
	    !conn->pkt_tx_head ||
    80c4:	f013 0f08 	tst.w	r3, #8
    80c8:	f8d0 e0f0 	ldr.w	lr, [r0, #240]	; 0xf0
    80cc:	d022      	beq.n	8114 <prepare_pdu_data_tx+0x64>
	    (conn->pause_tx && (conn->pkt_tx_head != conn->pkt_tx_ctrl))) {
    80ce:	4575      	cmp	r5, lr
    80d0:	d020      	beq.n	8114 <prepare_pdu_data_tx+0x64>
	conn->empty = 1;
    80d2:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    80d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    80da:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
	pdu_data_tx = (void *)radio_pkt_empty_get();
    80de:	f003 f82b 	bl	b138 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    80e2:	7803      	ldrb	r3, [r0, #0]
    80e4:	2201      	movs	r2, #1
    80e6:	f362 0301 	bfi	r3, r2, #0, #2
	pdu_data_tx->len = 0;
    80ea:	2200      	movs	r2, #0
    80ec:	7042      	strb	r2, [r0, #1]
	if (conn->pkt_tx_head) {
    80ee:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    80f2:	7003      	strb	r3, [r0, #0]
    80f4:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
    80f6:	b152      	cbz	r2, 810e <prepare_pdu_data_tx+0x5e>
		pdu_data_tx->md = 1;
    80f8:	f043 0310 	orr.w	r3, r3, #16
		pdu_data_tx->md = 0;
    80fc:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->rfu = 0;
    80fe:	7803      	ldrb	r3, [r0, #0]
    8100:	f36f 1347 	bfc	r3, #5, #3
    8104:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->resv = 0;
    8106:	2300      	movs	r3, #0
    8108:	7083      	strb	r3, [r0, #2]
	*pdu_data_tx = _pdu_data_tx;
    810a:	6038      	str	r0, [r7, #0]
    810c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pdu_data_tx->md = 0;
    810e:	f362 1304 	bfi	r3, r2, #4, #1
    8112:	e7f3      	b.n	80fc <prepare_pdu_data_tx+0x4c>
					conn->packet_tx_head_offset);
    8114:	f894 3101 	ldrb.w	r3, [r4, #257]	; 0x101
		if (!conn->packet_tx_head_len) {
    8118:	f894 1100 	ldrb.w	r1, [r4, #256]	; 0x100
		_pdu_data_tx = (void *)(conn->pkt_tx_head->pdu_data +
    811c:	1d2a      	adds	r2, r5, #4
    811e:	18d0      	adds	r0, r2, r3
		if (!conn->packet_tx_head_len) {
    8120:	b911      	cbnz	r1, 8128 <prepare_pdu_data_tx+0x78>
			conn->packet_tx_head_len = _pdu_data_tx->len;
    8122:	7841      	ldrb	r1, [r0, #1]
    8124:	f884 1100 	strb.w	r1, [r4, #256]	; 0x100
		if (conn->packet_tx_head_offset) {
    8128:	b123      	cbz	r3, 8134 <prepare_pdu_data_tx+0x84>
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    812a:	5cd1      	ldrb	r1, [r2, r3]
    812c:	2601      	movs	r6, #1
    812e:	f366 0101 	bfi	r1, r6, #0, #2
    8132:	54d1      	strb	r1, [r2, r3]
		_pdu_data_tx->len = conn->packet_tx_head_len -
    8134:	f894 6100 	ldrb.w	r6, [r4, #256]	; 0x100
    8138:	1af6      	subs	r6, r6, r3
    813a:	b2f6      	uxtb	r6, r6
    813c:	7046      	strb	r6, [r0, #1]
		_pdu_data_tx->md = 0;
    813e:	5cd1      	ldrb	r1, [r2, r3]
		if (_pdu_data_tx->len > max_tx_octets) {
    8140:	2e1b      	cmp	r6, #27
		_pdu_data_tx->md = 0;
    8142:	f36f 1104 	bfc	r1, #4, #1
    8146:	54d1      	strb	r1, [r2, r3]
		if (_pdu_data_tx->len > max_tx_octets) {
    8148:	d905      	bls.n	8156 <prepare_pdu_data_tx+0xa6>
			_pdu_data_tx->len = max_tx_octets;
    814a:	211b      	movs	r1, #27
    814c:	7041      	strb	r1, [r0, #1]
			_pdu_data_tx->md = 1;
    814e:	5cd1      	ldrb	r1, [r2, r3]
    8150:	f041 0110 	orr.w	r1, r1, #16
    8154:	54d1      	strb	r1, [r2, r3]
		if (conn->pkt_tx_head->next) {
    8156:	6829      	ldr	r1, [r5, #0]
    8158:	b119      	cbz	r1, 8162 <prepare_pdu_data_tx+0xb2>
			_pdu_data_tx->md = 1;
    815a:	5cd1      	ldrb	r1, [r2, r3]
    815c:	f041 0110 	orr.w	r1, r1, #16
    8160:	54d1      	strb	r1, [r2, r3]
		if (!conn->pkt_tx_ctrl &&
    8162:	f1be 0f00 	cmp.w	lr, #0
    8166:	d1ca      	bne.n	80fe <prepare_pdu_data_tx+0x4e>
    8168:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
    816c:	429d      	cmp	r5, r3
			conn->pkt_tx_ctrl = conn->pkt_tx_ctrl_last =
    816e:	bf1c      	itt	ne
    8170:	f8c4 50f4 	strne.w	r5, [r4, #244]	; 0xf4
    8174:	f8c4 50f0 	strne.w	r5, [r4, #240]	; 0xf0
    8178:	e7c1      	b.n	80fe <prepare_pdu_data_tx+0x4e>
    817a:	0000      	movs	r0, r0
    817c:	0000      	movs	r0, r0
	...

00008180 <isr>:
{
    8180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8184:	b08f      	sub	sp, #60	; 0x3c
	trx_done = radio_is_done();
    8186:	f002 ffad 	bl	b0e4 <radio_is_done>
    818a:	b2c6      	uxtb	r6, r0
	if (trx_done) {
    818c:	b336      	cbz	r6, 81dc <isr+0x5c>
		crc_ok = radio_crc_is_valid();
    818e:	f002 ffc9 	bl	b124 <radio_crc_is_valid>
    8192:	b2c7      	uxtb	r7, r0
		devmatch_ok = radio_filter_has_match();
    8194:	f003 f84a 	bl	b22c <radio_filter_has_match>
    8198:	b2c4      	uxtb	r4, r0
		devmatch_id = radio_filter_match_get();
    819a:	f003 f851 	bl	b240 <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
    819e:	f003 f9f9 	bl	b594 <radio_ar_has_match>
		irkmatch_id = radio_ar_match_get();
    81a2:	f003 f9e5 	bl	b570 <radio_ar_match_get>
		rssi_ready = radio_rssi_is_ready();
    81a6:	f003 f80b 	bl	b1c0 <radio_rssi_is_ready>
    81aa:	b2c5      	uxtb	r5, r0
	radio_status_reset();
    81ac:	f002 ff84 	bl	b0b8 <radio_status_reset>
	radio_tmr_status_reset();
    81b0:	f003 f84c 	bl	b24c <radio_tmr_status_reset>
	radio_filter_status_reset();
    81b4:	f003 f832 	bl	b21c <radio_filter_status_reset>
	radio_ar_status_reset();
    81b8:	f003 f9e0 	bl	b57c <radio_ar_status_reset>
	radio_rssi_status_reset();
    81bc:	f002 fff8 	bl	b1b0 <radio_rssi_status_reset>
	switch (_radio.state) {
    81c0:	4a6f      	ldr	r2, [pc, #444]	; (8380 <isr+0x200>)
    81c2:	7d13      	ldrb	r3, [r2, #20]
    81c4:	4693      	mov	fp, r2
    81c6:	2b05      	cmp	r3, #5
    81c8:	f201 8386 	bhi.w	98d8 <isr+0x1758>
    81cc:	e8df f013 	tbh	[pc, r3, lsl #1]
    81d0:	0088005d 	.word	0x0088005d
    81d4:	097f000a 	.word	0x097f000a
    81d8:	097f097f 	.word	0x097f097f
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0;
    81dc:	4635      	mov	r5, r6
    81de:	4634      	mov	r4, r6
    81e0:	4637      	mov	r7, r6
    81e2:	e7e3      	b.n	81ac <isr+0x2c>
	_radio.state = STATE_RX;
    81e4:	2301      	movs	r3, #1
    81e6:	f88b 3014 	strb.w	r3, [fp, #20]
	hcto = radio_tmr_tifs_base_get()
    81ea:	f003 f931 	bl	b450 <radio_tmr_tifs_base_get>
    81ee:	4604      	mov	r4, r0
	radio_tmr_tifs_set(RADIO_TIFS);
    81f0:	2096      	movs	r0, #150	; 0x96
    81f2:	f003 f839 	bl	b268 <radio_tmr_tifs_set>
	switch (_radio.role) {
    81f6:	f89b 3013 	ldrb.w	r3, [fp, #19]
    81fa:	3b01      	subs	r3, #1
    81fc:	34c3      	adds	r4, #195	; 0xc3
    81fe:	2b03      	cmp	r3, #3
    8200:	d86b      	bhi.n	82da <isr+0x15a>
    8202:	e8df f003 	tbb	[pc, r3]
    8206:	2102      	.short	0x2102
    8208:	4545      	.short	0x4545
		radio_switch_complete_and_tx(0, 0, 0, 0);
    820a:	2300      	movs	r3, #0
    820c:	461a      	mov	r2, r3
    820e:	4619      	mov	r1, r3
    8210:	4618      	mov	r0, r3
    8212:	f002 ffa5 	bl	b160 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(radio_pkt_scratch_get());
    8216:	f002 ff93 	bl	b140 <radio_pkt_scratch_get>
    821a:	f002 ff15 	bl	b048 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    821e:	f002 ff57 	bl	b0d0 <radio_is_ready>
    8222:	4605      	mov	r5, r0
    8224:	b110      	cbz	r0, 822c <isr+0xac>
		LL_ASSERT(!radio_is_ready());
    8226:	4a57      	ldr	r2, [pc, #348]	; (8384 <isr+0x204>)
	LL_ASSERT(!radio_is_ready());
    8228:	4957      	ldr	r1, [pc, #348]	; (8388 <isr+0x208>)
    822a:	e2ec      	b.n	8806 <isr+0x686>
		hcto += radio_rx_chain_delay_get(0, 0);
    822c:	4601      	mov	r1, r0
    822e:	f002 ff20 	bl	b072 <radio_rx_chain_delay_get>
		hcto -= radio_tx_chain_delay_get(0, 0);
    8232:	4629      	mov	r1, r5
		hcto += addr_us_get(0);
    8234:	4404      	add	r4, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    8236:	4628      	mov	r0, r5
    8238:	f002 ff17 	bl	b06a <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    823c:	1a20      	subs	r0, r4, r0
    823e:	f003 f89d 	bl	b37c <radio_tmr_hcto_configure>
		radio_tmr_end_capture();
    8242:	f003 f8ed 	bl	b420 <radio_tmr_end_capture>
    8246:	e020      	b.n	828a <isr+0x10a>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    8248:	2300      	movs	r3, #0
    824a:	4619      	mov	r1, r3
    824c:	461a      	mov	r2, r3
    824e:	4618      	mov	r0, r3
    8250:	f002 ff86 	bl	b160 <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
    8254:	f89b 26cd 	ldrb.w	r2, [fp, #1741]	; 0x6cd
    8258:	f8db 36c8 	ldr.w	r3, [fp, #1736]	; 0x6c8
		radio_pkt_rx_set(_radio.packet_rx
    825c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    8260:	3008      	adds	r0, #8
    8262:	f002 fef1 	bl	b048 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    8266:	f002 ff33 	bl	b0d0 <radio_is_ready>
    826a:	4605      	mov	r5, r0
    826c:	2800      	cmp	r0, #0
    826e:	d1da      	bne.n	8226 <isr+0xa6>
		hcto += radio_rx_chain_delay_get(0, 0);
    8270:	4601      	mov	r1, r0
    8272:	f002 fefe 	bl	b072 <radio_rx_chain_delay_get>
		hcto -= radio_tx_chain_delay_get(0, 0);
    8276:	4629      	mov	r1, r5
		hcto += addr_us_get(0);
    8278:	4404      	add	r4, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    827a:	4628      	mov	r0, r5
    827c:	f002 fef5 	bl	b06a <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    8280:	1a20      	subs	r0, r4, r0
    8282:	f003 f87b 	bl	b37c <radio_tmr_hcto_configure>
		radio_rssi_measure();
    8286:	f002 ff83 	bl	b190 <radio_rssi_measure>
}
    828a:	b00f      	add	sp, #60	; 0x3c
    828c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		radio_switch_complete_and_tx(0, 0, 0, 0);
    8290:	2300      	movs	r3, #0
    8292:	461a      	mov	r2, r3
    8294:	4619      	mov	r1, r3
    8296:	4618      	mov	r0, r3
    8298:	f002 ff62 	bl	b160 <radio_switch_complete_and_tx>
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    829c:	f89b 26cd 	ldrb.w	r2, [fp, #1741]	; 0x6cd
    82a0:	f8db 36c8 	ldr.w	r3, [fp, #1736]	; 0x6c8
		rx_packet_set(_radio.conn_curr,	(void *)
    82a4:	f8db 06a8 	ldr.w	r0, [fp, #1704]	; 0x6a8
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    82a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		rx_packet_set(_radio.conn_curr,	(void *)
    82ac:	3108      	adds	r1, #8
    82ae:	f7fe f987 	bl	65c0 <rx_packet_set>
		LL_ASSERT(!radio_is_ready());
    82b2:	f002 ff0d 	bl	b0d0 <radio_is_ready>
    82b6:	4605      	mov	r5, r0
    82b8:	2800      	cmp	r0, #0
    82ba:	d1b4      	bne.n	8226 <isr+0xa6>
		hcto += radio_rx_chain_delay_get(0, 0);
    82bc:	4601      	mov	r1, r0
    82be:	f002 fed8 	bl	b072 <radio_rx_chain_delay_get>
		hcto -= radio_tx_chain_delay_get(0, 0);
    82c2:	4629      	mov	r1, r5
		hcto += addr_us_get(0);
    82c4:	4404      	add	r4, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    82c6:	4628      	mov	r0, r5
    82c8:	f002 fecf 	bl	b06a <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    82cc:	1a20      	subs	r0, r4, r0
    82ce:	f003 f855 	bl	b37c <radio_tmr_hcto_configure>
		packet_tx_enqueue(1);
    82d2:	2001      	movs	r0, #1
    82d4:	f7fe f9c8 	bl	6668 <packet_tx_enqueue>
    82d8:	e7d7      	b.n	828a <isr+0x10a>
		LL_ASSERT(0);
    82da:	4a2a      	ldr	r2, [pc, #168]	; (8384 <isr+0x204>)
		LL_ASSERT(0);
    82dc:	492b      	ldr	r1, [pc, #172]	; (838c <isr+0x20c>)
    82de:	e292      	b.n	8806 <isr+0x686>
	if (!((trx_done) || ((SILENT_CONNECTION) &&
    82e0:	b92e      	cbnz	r6, 82ee <isr+0x16e>
		_radio.state = STATE_CLOSE;
    82e2:	2303      	movs	r3, #3
    82e4:	f88b 3014 	strb.w	r3, [fp, #20]
		radio_disable();
    82e8:	f002 fed4 	bl	b094 <radio_disable>
    82ec:	e7cd      	b.n	828a <isr+0x10a>
	switch (_radio.role) {
    82ee:	f89b 3013 	ldrb.w	r3, [fp, #19]
    82f2:	3b01      	subs	r3, #1
    82f4:	2b03      	cmp	r3, #3
    82f6:	f201 80e7 	bhi.w	94c8 <isr+0x1348>
    82fa:	e8df f013 	tbh	[pc, r3, lsl #1]
    82fe:	0004      	.short	0x0004
    8300:	050f01ff 	.word	0x050f01ff
    8304:	050f      	.short	0x050f
		if (crc_ok) {
    8306:	2f00      	cmp	r7, #0
    8308:	d0eb      	beq.n	82e2 <isr+0x162>
	pdu_adv = (void *)radio_pkt_scratch_get();
    830a:	f002 ff19 	bl	b140 <radio_pkt_scratch_get>
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    830e:	f89b 922d 	ldrb.w	r9, [fp, #557]	; 0x22d
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    8312:	7802      	ldrb	r2, [r0, #0]
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    8314:	eb09 2909 	add.w	r9, r9, r9, lsl #8
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    8318:	f002 030f 	and.w	r3, r2, #15
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    831c:	f109 092b 	add.w	r9, r9, #43	; 0x2b
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    8320:	2b03      	cmp	r3, #3
	pdu_adv = (void *)radio_pkt_scratch_get();
    8322:	4607      	mov	r7, r0
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    8324:	eb0b 0509 	add.w	r5, fp, r9
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    8328:	d134      	bne.n	8394 <isr+0x214>
    832a:	7843      	ldrb	r3, [r0, #1]
    832c:	2b0c      	cmp	r3, #12
    832e:	d131      	bne.n	8394 <isr+0x214>
	return (((_radio.advertiser.filter_policy & 0x01) == 0) ||
    8330:	f89b 302a 	ldrb.w	r3, [fp, #42]	; 0x2a
		(devmatch_ok)) &&
    8334:	07d9      	lsls	r1, r3, #31
    8336:	d500      	bpl.n	833a <isr+0x1ba>
	return (((_radio.advertiser.filter_policy & 0x01) == 0) ||
    8338:	b364      	cbz	r4, 8394 <isr+0x214>
	return (adv->tx_addr == sr->rx_addr) &&
    833a:	f81b 3009 	ldrb.w	r3, [fp, r9]
    833e:	f3c3 1380 	ubfx	r3, r3, #6, #1
    8342:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    8346:	d125      	bne.n	8394 <isr+0x214>
		!memcmp(adv->adv_ind.addr, sr->scan_req.adv_addr, BDADDR_SIZE);
    8348:	2206      	movs	r2, #6
    834a:	f107 0108 	add.w	r1, r7, #8
    834e:	1ca8      	adds	r0, r5, #2
    8350:	f7f8 f94e 	bl	5f0 <memcmp>
	    (pdu_adv->len == sizeof(struct pdu_adv_scan_req)) &&
    8354:	b9f0      	cbnz	r0, 8394 <isr+0x214>
		_radio.state = STATE_CLOSE;
    8356:	2403      	movs	r4, #3
    8358:	f88b 4014 	strb.w	r4, [fp, #20]
		radio_switch_complete_and_disable();
    835c:	f002 ff0a 	bl	b174 <radio_switch_complete_and_disable>
		radio_pkt_tx_set(&_radio.advertiser.scan_data.data
    8360:	f89b 0635 	ldrb.w	r0, [fp, #1589]	; 0x635
    8364:	eb00 2000 	add.w	r0, r0, r0, lsl #8
    8368:	f200 4033 	addw	r0, r0, #1075	; 0x433
    836c:	4458      	add	r0, fp
    836e:	f002 fe71 	bl	b054 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    8372:	f002 fead 	bl	b0d0 <radio_is_ready>
    8376:	2800      	cmp	r0, #0
    8378:	d087      	beq.n	828a <isr+0x10a>
    837a:	4a05      	ldr	r2, [pc, #20]	; (8390 <isr+0x210>)
    837c:	e754      	b.n	8228 <isr+0xa8>
    837e:	bf00      	nop
    8380:	200009f8 	.word	0x200009f8
    8384:	0000e2bf 	.word	0x0000e2bf
    8388:	0000e83e 	.word	0x0000e83e
    838c:	0000d86b 	.word	0x0000d86b
    8390:	0000e2d2 	.word	0x0000e2d2
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
    8394:	783b      	ldrb	r3, [r7, #0]
    8396:	f003 030f 	and.w	r3, r3, #15
    839a:	2b05      	cmp	r3, #5
    839c:	d1a1      	bne.n	82e2 <isr+0x162>
    839e:	787b      	ldrb	r3, [r7, #1]
    83a0:	2b22      	cmp	r3, #34	; 0x22
    83a2:	d19e      	bne.n	82e2 <isr+0x162>
	if (adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    83a4:	f81b 3009 	ldrb.w	r3, [fp, r9]
    83a8:	f003 030f 	and.w	r3, r3, #15
    83ac:	2b01      	cmp	r3, #1
    83ae:	f040 80b5 	bne.w	851c <isr+0x39c>
		       isr_adv_ci_adva_check(adv, ci) &&
    83b2:	4639      	mov	r1, r7
    83b4:	4628      	mov	r0, r5
    83b6:	f7fd ff41 	bl	623c <isr_adv_ci_adva_check>
    83ba:	b188      	cbz	r0, 83e0 <isr+0x260>
	return (adv->rx_addr == ci->tx_addr) &&
    83bc:	783b      	ldrb	r3, [r7, #0]
    83be:	f81b 2009 	ldrb.w	r2, [fp, r9]
    83c2:	f3c3 1380 	ubfx	r3, r3, #6, #1
    83c6:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    83ca:	f040 80a5 	bne.w	8518 <isr+0x398>
	       !memcmp(adv->direct_ind.tgt_addr, ci->connect_ind.init_addr,
    83ce:	2206      	movs	r2, #6
    83d0:	1cb9      	adds	r1, r7, #2
    83d2:	f105 0008 	add.w	r0, r5, #8
    83d6:	f7f8 f90b 	bl	5f0 <memcmp>
	return (adv->rx_addr == ci->tx_addr) &&
    83da:	fab0 f080 	clz	r0, r0
    83de:	0940      	lsrs	r0, r0, #5
		   (pdu_adv->len == sizeof(struct pdu_adv_connect_ind)) &&
    83e0:	2800      	cmp	r0, #0
    83e2:	f43f af7e 	beq.w	82e2 <isr+0x162>
		   isr_adv_ci_check(_pdu_adv, pdu_adv, devmatch_ok, &rl_idx) &&
    83e6:	f89b 370e 	ldrb.w	r3, [fp, #1806]	; 0x70e
    83ea:	b133      	cbz	r3, 83fa <isr+0x27a>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
    83ec:	f89b 370c 	ldrb.w	r3, [fp, #1804]	; 0x70c
    83f0:	f89b 270d 	ldrb.w	r2, [fp, #1805]	; 0x70d
    83f4:	429a      	cmp	r2, r3
    83f6:	f47f af74 	bne.w	82e2 <isr+0x162>
    83fa:	f8db 3638 	ldr.w	r3, [fp, #1592]	; 0x638
    83fe:	2b00      	cmp	r3, #0
    8400:	f43f af6f 	beq.w	82e2 <isr+0x162>
			node_rx = packet_rx_reserve_get(4);
    8404:	2004      	movs	r0, #4
    8406:	f7fd faa5 	bl	5954 <packet_rx_reserve_get>
		if (!node_rx) {
    840a:	4605      	mov	r5, r0
    840c:	2800      	cmp	r0, #0
    840e:	f43f af68 	beq.w	82e2 <isr+0x162>
		_radio.state = STATE_STOP;
    8412:	f04f 0a04 	mov.w	sl, #4
    8416:	f88b a014 	strb.w	sl, [fp, #20]
		radio_disable();
    841a:	f002 fe3b 	bl	b094 <radio_disable>
		conn = _radio.advertiser.conn;
    841e:	f8db 4638 	ldr.w	r4, [fp, #1592]	; 0x638
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    8422:	f8db 169c 	ldr.w	r1, [fp, #1692]	; 0x69c
		_radio.advertiser.conn = NULL;
    8426:	f04f 0800 	mov.w	r8, #0
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    842a:	f44f 7282 	mov.w	r2, #260	; 0x104
    842e:	4620      	mov	r0, r4
		_radio.advertiser.conn = NULL;
    8430:	f8cb 8638 	str.w	r8, [fp, #1592]	; 0x638
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    8434:	f7fb fb07 	bl	3a46 <mem_index_get>
		memcpy(&conn->crc_init[0],
    8438:	2203      	movs	r2, #3
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    843a:	8420      	strh	r0, [r4, #32]
		memcpy(&conn->crc_init[0],
    843c:	f107 0112 	add.w	r1, r7, #18
    8440:	f104 0014 	add.w	r0, r4, #20
    8444:	f7f8 f8e9 	bl	61a <memcpy>
		memcpy(&conn->access_addr[0],
    8448:	f104 0310 	add.w	r3, r4, #16
    844c:	4618      	mov	r0, r3
		memcpy(&conn->data_chan_map[0],
    844e:	f104 0617 	add.w	r6, r4, #23
		memcpy(&conn->access_addr[0],
    8452:	4652      	mov	r2, sl
    8454:	f107 010e 	add.w	r1, r7, #14
    8458:	930a      	str	r3, [sp, #40]	; 0x28
    845a:	f7f8 f8de 	bl	61a <memcpy>
		memcpy(&conn->data_chan_map[0],
    845e:	2205      	movs	r2, #5
    8460:	f107 011e 	add.w	r1, r7, #30
    8464:	4630      	mov	r0, r6
    8466:	f7f8 f8d8 	bl	61a <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    846a:	2105      	movs	r1, #5
    846c:	4630      	mov	r0, r6
    846e:	f7fb fc51 	bl	3d14 <util_ones_count_get>
		conn->data_chan_count =
    8472:	7f62      	ldrb	r2, [r4, #29]
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    8474:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		conn->data_chan_count =
    8476:	f360 0205 	bfi	r2, r0, #0, #6
    847a:	7762      	strb	r2, [r4, #29]
		conn->data_chan_hop = pdu_adv->connect_ind.hop;
    847c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    8480:	f3c2 0204 	ubfx	r2, r2, #0, #5
    8484:	77a2      	strb	r2, [r4, #30]
			pdu_adv->connect_ind.interval;
    8486:	8b3a      	ldrh	r2, [r7, #24]
		conn->conn_interval =
    8488:	84a2      	strh	r2, [r4, #36]	; 0x24
			pdu_adv->connect_ind.interval * 1250;
    848a:	f240 46e2 	movw	r6, #1250	; 0x4e2
    848e:	4356      	muls	r6, r2
		conn->latency = pdu_adv->connect_ind.latency;
    8490:	7ef9      	ldrb	r1, [r7, #27]
    8492:	7eba      	ldrb	r2, [r7, #26]
    8494:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    8498:	84e2      	strh	r2, [r4, #38]	; 0x26
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    849a:	4619      	mov	r1, r3
    849c:	4652      	mov	r2, sl
    849e:	f104 0054 	add.w	r0, r4, #84	; 0x54
    84a2:	f7f8 f8ba 	bl	61a <memcpy>
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
    84a6:	8bbb      	ldrh	r3, [r7, #28]
    84a8:	f242 7210 	movw	r2, #10000	; 0x2710
    84ac:	fb02 6303 	mla	r3, r2, r3, r6
    84b0:	3b01      	subs	r3, #1
    84b2:	fbb3 f3f6 	udiv	r3, r3, r6
    84b6:	85e3      	strh	r3, [r4, #46]	; 0x2e
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
    84b8:	4bb9      	ldr	r3, [pc, #740]	; (87a0 <isr+0x620>)
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    84ba:	4639      	mov	r1, r7
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
    84bc:	4433      	add	r3, r6
    84be:	fbb3 f3f6 	udiv	r3, r3, r6
    84c2:	8663      	strh	r3, [r4, #50]	; 0x32
		node_rx->hdr.handle = conn->handle;
    84c4:	8c23      	ldrh	r3, [r4, #32]
		radio_le_conn_cmplt->status = 0x00;
    84c6:	f885 800b 	strb.w	r8, [r5, #11]
		radio_le_conn_cmplt->role = 0x01;
    84ca:	f04f 0801 	mov.w	r8, #1
    84ce:	f885 800c 	strb.w	r8, [r5, #12]
		node_rx->hdr.handle = conn->handle;
    84d2:	80eb      	strh	r3, [r5, #6]
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    84d4:	f811 3b02 	ldrb.w	r3, [r1], #2
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    84d8:	2206      	movs	r2, #6
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    84da:	f3c3 1380 	ubfx	r3, r3, #6, #1
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    84de:	712a      	strb	r2, [r5, #4]
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    84e0:	736b      	strb	r3, [r5, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    84e2:	f105 000e 	add.w	r0, r5, #14
    84e6:	f7f8 f898 	bl	61a <memcpy>
			pdu_adv->connect_ind.interval;
    84ea:	8b3b      	ldrh	r3, [r7, #24]
		radio_le_conn_cmplt->interval =
    84ec:	82ab      	strh	r3, [r5, #20]
			pdu_adv->connect_ind.latency;
    84ee:	8b7b      	ldrh	r3, [r7, #26]
		radio_le_conn_cmplt->latency =
    84f0:	82eb      	strh	r3, [r5, #22]
			pdu_adv->connect_ind.timeout;
    84f2:	8bbb      	ldrh	r3, [r7, #28]
		radio_le_conn_cmplt->timeout =
    84f4:	832b      	strh	r3, [r5, #24]
			pdu_adv->connect_ind.sca;
    84f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    84fa:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
    84fe:	76ab      	strb	r3, [r5, #26]
		rx_fc_lock(conn->handle);
    8500:	8c20      	ldrh	r0, [r4, #32]
    8502:	f7fd febf 	bl	6284 <rx_fc_lock>
		packet_rx_enqueue();
    8506:	f7fe fae3 	bl	6ad0 <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
    850a:	2003      	movs	r0, #3
    850c:	f7fd fa22 	bl	5954 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    8510:	b990      	cbnz	r0, 8538 <isr+0x3b8>
    8512:	4aa4      	ldr	r2, [pc, #656]	; (87a4 <isr+0x624>)
			LL_ASSERT(node_rx);
    8514:	49a4      	ldr	r1, [pc, #656]	; (87a8 <isr+0x628>)
    8516:	e176      	b.n	8806 <isr+0x686>
	return (adv->rx_addr == ci->tx_addr) &&
    8518:	2000      	movs	r0, #0
    851a:	e761      	b.n	83e0 <isr+0x260>
	return (((_radio.advertiser.filter_policy & 0x02) == 0) ||
    851c:	f89b 302a 	ldrb.w	r3, [fp, #42]	; 0x2a
		(devmatch_ok)) &&
    8520:	079b      	lsls	r3, r3, #30
    8522:	d500      	bpl.n	8526 <isr+0x3a6>
	return (((_radio.advertiser.filter_policy & 0x02) == 0) ||
    8524:	b134      	cbz	r4, 8534 <isr+0x3b4>
	       isr_adv_ci_adva_check(adv, ci);
    8526:	4639      	mov	r1, r7
    8528:	4628      	mov	r0, r5
    852a:	f7fd fe87 	bl	623c <isr_adv_ci_adva_check>
		(devmatch_ok)) &&
    852e:	f000 0001 	and.w	r0, r0, #1
    8532:	e755      	b.n	83e0 <isr+0x260>
    8534:	4620      	mov	r0, r4
    8536:	e7fa      	b.n	852e <isr+0x3ae>
			node_rx->hdr.handle = conn->handle;
    8538:	8c23      	ldrh	r3, [r4, #32]
    853a:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    853c:	230a      	movs	r3, #10
    853e:	7103      	strb	r3, [r0, #4]
			if (pdu_adv->chan_sel) {
    8540:	783b      	ldrb	r3, [r7, #0]
    8542:	f013 0320 	ands.w	r3, r3, #32
    8546:	f000 80d7 	beq.w	86f8 <isr+0x578>
					((u16_t)conn->access_addr[1] << 8) |
    854a:	7c62      	ldrb	r2, [r4, #17]
					conn->access_addr[0];
    854c:	7c23      	ldrb	r3, [r4, #16]
					((u16_t)conn->access_addr[3] << 8) |
    854e:	7ce1      	ldrb	r1, [r4, #19]
				u16_t aa_ls =
    8550:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
    8554:	7ca2      	ldrb	r2, [r4, #18]
				u16_t aa_ms =
    8556:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
    855a:	7f61      	ldrb	r1, [r4, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    855c:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
    855e:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    8562:	7761      	strb	r1, [r4, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    8564:	83e3      	strh	r3, [r4, #30]
				le_chan_sel_algo->chan_sel_algo = 0x01;
    8566:	f880 800b 	strb.w	r8, [r0, #11]
			packet_rx_enqueue();
    856a:	f7fe fab1 	bl	6ad0 <packet_rx_enqueue>
		conn->slave.sca = pdu_adv->connect_ind.sca;
    856e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    8572:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
			(((gc_lookup_ppm[_radio.sca] +
    8576:	498d      	ldr	r1, [pc, #564]	; (87ac <isr+0x62c>)
		conn->slave.sca = pdu_adv->connect_ind.sca;
    8578:	0952      	lsrs	r2, r2, #5
    857a:	f362 0384 	bfi	r3, r2, #2, #3
    857e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
			(((gc_lookup_ppm[_radio.sca] +
    8582:	f89b 36b4 	ldrb.w	r3, [fp, #1716]	; 0x6b4
			   gc_lookup_ppm[conn->slave.sca]) *
    8586:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
			(((gc_lookup_ppm[_radio.sca] +
    858a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    858e:	4413      	add	r3, r2
			   gc_lookup_ppm[conn->slave.sca]) *
    8590:	4373      	muls	r3, r6
			  conn_interval_us) + (1000000 - 1)) / 1000000;
    8592:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
    8596:	4a86      	ldr	r2, [pc, #536]	; (87b0 <isr+0x630>)
    8598:	f203 233f 	addw	r3, r3, #575	; 0x23f
    859c:	fbb3 f3f2 	udiv	r3, r3, r2
		conn->slave.window_widening_periodic_us =
    85a0:	63e3      	str	r3, [r4, #60]	; 0x3c
			(conn_interval_us >> 1) - RADIO_TIFS;
    85a2:	0873      	lsrs	r3, r6, #1
    85a4:	3b96      	subs	r3, #150	; 0x96
		conn->slave.window_widening_max_us =
    85a6:	6423      	str	r3, [r4, #64]	; 0x40
			pdu_adv->connect_ind.win_size * 1250;
    85a8:	7d7b      	ldrb	r3, [r7, #21]
    85aa:	f240 4ae2 	movw	sl, #1250	; 0x4e2
		conn->slave.window_size_prepare_us = 0;
    85ae:	f04f 0800 	mov.w	r8, #0
			pdu_adv->connect_ind.win_size * 1250;
    85b2:	fb0a f303 	mul.w	r3, sl, r3
		conn->slave.window_size_event_us =
    85b6:	6523      	str	r3, [r4, #80]	; 0x50
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    85b8:	4641      	mov	r1, r8
		conn->slave.window_size_prepare_us = 0;
    85ba:	f8c4 804c 	str.w	r8, [r4, #76]	; 0x4c
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    85be:	4640      	mov	r0, r8
    85c0:	f002 fd55 	bl	b06e <radio_rx_ready_delay_get>
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    85c4:	497b      	ldr	r1, [pc, #492]	; (87b4 <isr+0x634>)
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    85c6:	900a      	str	r0, [sp, #40]	; 0x28
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    85c8:	f200 4052 	addw	r0, r0, #1106	; 0x452
    85cc:	a372      	add	r3, pc, #456	; (adr r3, 8798 <isr+0x618>)
    85ce:	e9d3 2300 	ldrd	r2, r3, [r3]
    85d2:	fba0 0101 	umull	r0, r1, r0, r1
    85d6:	f7f7 fe47 	bl	268 <__aeabi_uldivmod>
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    85da:	f8db 5710 	ldr.w	r5, [fp, #1808]	; 0x710
    85de:	6065      	str	r5, [r4, #4]
		conn->hdr.ticks_xtal_to_start =
    85e0:	2327      	movs	r3, #39	; 0x27
		ticks_slot_offset =
    85e2:	429d      	cmp	r5, r3
    85e4:	bf38      	it	cc
    85e6:	461d      	movcc	r5, r3
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    85e8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		conn->hdr.ticks_xtal_to_start =
    85ec:	6023      	str	r3, [r4, #0]
		conn_interval_us -=
    85ee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
		conn->hdr.ticks_slot =
    85f0:	60e0      	str	r0, [r4, #12]
		conn->hdr.ticks_preempt_to_start =
    85f2:	f8c4 8008 	str.w	r8, [r4, #8]
		conn_interval_us -=
    85f6:	1af6      	subs	r6, r6, r3
		conn_offset_us = radio_tmr_end_get();
    85f8:	f002 ff24 	bl	b444 <radio_tmr_end_get>
    85fc:	900b      	str	r0, [sp, #44]	; 0x2c
			((u64_t)pdu_adv->connect_ind.win_offset +
    85fe:	8af8      	ldrh	r0, [r7, #22]
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    8600:	4641      	mov	r1, r8
		conn_offset_us +=
    8602:	fb00 aa0a 	mla	sl, r0, sl, sl
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    8606:	4640      	mov	r0, r8
    8608:	f002 fd2f 	bl	b06a <radio_tx_chain_delay_get>
    860c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    860e:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
    8612:	449a      	add	sl, r3
		conn_offset_us -= RADIO_TICKER_JITTER_US;
    8614:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8616:	ebaa 0a00 	sub.w	sl, sl, r0
    861a:	ebaa 0303 	sub.w	r3, sl, r3
    861e:	930a      	str	r3, [sp, #40]	; 0x28
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    8620:	f240 43ce 	movw	r3, #1230	; 0x4ce
    8624:	9300      	str	r3, [sp, #0]
    8626:	2205      	movs	r2, #5
    8628:	4b63      	ldr	r3, [pc, #396]	; (87b8 <isr+0x638>)
    862a:	f8df a188 	ldr.w	sl, [pc, #392]	; 87b4 <isr+0x634>
    862e:	4641      	mov	r1, r8
    8630:	4640      	mov	r0, r8
    8632:	f7fc f8e1 	bl	47f8 <ticker_stop>
		ticker_stop_adv_assert(ticker_status, (void *)__LINE__);
    8636:	f240 41cf 	movw	r1, #1231	; 0x4cf
    863a:	f7fd fe4f 	bl	62dc <ticker_stop_adv_assert>
		if (_pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    863e:	f81b 3009 	ldrb.w	r3, [fp, r9]
    8642:	f003 030f 	and.w	r3, r3, #15
    8646:	2b01      	cmp	r3, #1
    8648:	d107      	bne.n	865a <isr+0x4da>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    864a:	f8cd 8000 	str.w	r8, [sp]
    864e:	4643      	mov	r3, r8
    8650:	2203      	movs	r2, #3
    8652:	4641      	mov	r1, r8
    8654:	4640      	mov	r0, r8
    8656:	f7fc f8cf 	bl	47f8 <ticker_stop>
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    865a:	fba6 670a 	umull	r6, r7, r6, sl
    865e:	a34e      	add	r3, pc, #312	; (adr r3, 8798 <isr+0x618>)
    8660:	e9d3 2300 	ldrd	r2, r3, [r3]
    8664:	4630      	mov	r0, r6
    8666:	4639      	mov	r1, r7
    8668:	f7f7 fdfe 	bl	268 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    866c:	f8db 3008 	ldr.w	r3, [fp, #8]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    8670:	4a52      	ldr	r2, [pc, #328]	; (87bc <isr+0x63c>)
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    8672:	eba3 0b05 	sub.w	fp, r3, r5
    8676:	f894 3020 	ldrb.w	r3, [r4, #32]
    867a:	9406      	str	r4, [sp, #24]
    867c:	3307      	adds	r3, #7
    867e:	b2db      	uxtb	r3, r3
    8680:	930b      	str	r3, [sp, #44]	; 0x2c
    8682:	f240 43e6 	movw	r3, #1254	; 0x4e6
    8686:	9308      	str	r3, [sp, #32]
    8688:	4b4d      	ldr	r3, [pc, #308]	; (87c0 <isr+0x640>)
    868a:	9307      	str	r3, [sp, #28]
    868c:	4b4d      	ldr	r3, [pc, #308]	; (87c4 <isr+0x644>)
    868e:	9305      	str	r3, [sp, #20]
    8690:	68e3      	ldr	r3, [r4, #12]
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    8692:	4680      	mov	r8, r0
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    8694:	441d      	add	r5, r3
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    8696:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    869a:	2307      	movs	r3, #7
    869c:	2100      	movs	r1, #0
    869e:	4343      	muls	r3, r0
    86a0:	fb02 3301 	mla	r3, r2, r1, r3
    86a4:	fba0 0102 	umull	r0, r1, r0, r2
    86a8:	1a30      	subs	r0, r6, r0
    86aa:	4419      	add	r1, r3
    86ac:	eb67 0101 	sbc.w	r1, r7, r1
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    86b0:	2400      	movs	r4, #0
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    86b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    86b6:	2300      	movs	r3, #0
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    86b8:	9504      	str	r5, [sp, #16]
    86ba:	9403      	str	r4, [sp, #12]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    86bc:	f7f7 fdd4 	bl	268 <__aeabi_uldivmod>
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    86c0:	990a      	ldr	r1, [sp, #40]	; 0x28
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    86c2:	9002      	str	r0, [sp, #8]
    86c4:	f028 437f 	bic.w	r3, r8, #4278190080	; 0xff000000
    86c8:	9301      	str	r3, [sp, #4]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    86ca:	fba1 010a 	umull	r0, r1, r1, sl
    86ce:	a332      	add	r3, pc, #200	; (adr r3, 8798 <isr+0x618>)
    86d0:	e9d3 2300 	ldrd	r2, r3, [r3]
    86d4:	f7f7 fdc8 	bl	268 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    86d8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    86dc:	9000      	str	r0, [sp, #0]
    86de:	465b      	mov	r3, fp
    86e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    86e2:	4621      	mov	r1, r4
    86e4:	4620      	mov	r0, r4
    86e6:	f7fb ffe9 	bl	46bc <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    86ea:	f030 0302 	bics.w	r3, r0, #2
    86ee:	f43f adcc 	beq.w	828a <isr+0x10a>
    86f2:	4a2c      	ldr	r2, [pc, #176]	; (87a4 <isr+0x624>)
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    86f4:	4934      	ldr	r1, [pc, #208]	; (87c8 <isr+0x648>)
    86f6:	e086      	b.n	8806 <isr+0x686>
				le_chan_sel_algo->chan_sel_algo = 0x00;
    86f8:	72c3      	strb	r3, [r0, #11]
    86fa:	e736      	b.n	856a <isr+0x3ea>
		if (crc_ok &&
    86fc:	2f00      	cmp	r7, #0
    86fe:	f000 82c9 	beq.w	8c94 <isr+0xb14>
	return ((_radio.scanner.filter_policy & 0x01) == 0) ||
    8702:	f89b 364d 	ldrb.w	r3, [fp, #1613]	; 0x64d
    8706:	06df      	lsls	r7, r3, #27
    8708:	d502      	bpl.n	8710 <isr+0x590>
		if (crc_ok &&
    870a:	2c00      	cmp	r4, #0
    870c:	f000 82c2 	beq.w	8c94 <isr+0xb14>
	bool dir_report = false;
    8710:	2300      	movs	r3, #0
    8712:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    8716:	f89b 26cd 	ldrb.w	r2, [fp, #1741]	; 0x6cd
    871a:	f8db 36c8 	ldr.w	r3, [fp, #1736]	; 0x6c8
    871e:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
		if(pdu_adv_rx->type == 0x07){			//PDU_ADV_TYPE_EXT_IND
    8722:	7a3b      	ldrb	r3, [r7, #8]
    8724:	f003 030f 	and.w	r3, r3, #15
    8728:	2b07      	cmp	r3, #7
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    872a:	f107 0408 	add.w	r4, r7, #8
		if(pdu_adv_rx->type == 0x07){			//PDU_ADV_TYPE_EXT_IND
    872e:	f040 8095 	bne.w	885c <isr+0x6dc>
		if(h->adv_addr){
    8732:	7afa      	ldrb	r2, [r7, #11]
    8734:	f8df 8088 	ldr.w	r8, [pc, #136]	; 87c0 <isr+0x640>
    8738:	07d6      	lsls	r6, r2, #31
			ptr += BDADDR_SIZE;
    873a:	bf4c      	ite	mi
    873c:	f107 0312 	addmi.w	r3, r7, #18
		ptr = (u8_t *)h + sizeof(*h);
    8740:	f107 030c 	addpl.w	r3, r7, #12
		if(h->tgt_addr){
    8744:	0790      	lsls	r0, r2, #30
			ptr += BDADDR_SIZE;
    8746:	bf48      	it	mi
    8748:	3306      	addmi	r3, #6
		if(h->adi){
    874a:	0711      	lsls	r1, r2, #28
			ptr += sizeof(*adi_ptr);
    874c:	bf48      	it	mi
    874e:	3302      	addmi	r3, #2
		if(h->aux_ptr){
    8750:	f012 0f10 	tst.w	r2, #16
    8754:	d060      	beq.n	8818 <isr+0x698>
			_radio.ext_scanner.chan_index = ap->chan_idx;
    8756:	781a      	ldrb	r2, [r3, #0]
    8758:	f3c2 0205 	ubfx	r2, r2, #0, #6
    875c:	f88b 2694 	strb.w	r2, [fp, #1684]	; 0x694
			_radio.ext_scanner.chan_off	= ap->offs;
    8760:	785a      	ldrb	r2, [r3, #1]
    8762:	7899      	ldrb	r1, [r3, #2]
			_radio.ext_scanner.off_unit	= ap->offs_units;
    8764:	781b      	ldrb	r3, [r3, #0]
			_radio.ext_scanner.chan_off	= ap->offs;
    8766:	f001 011f 	and.w	r1, r1, #31
			_radio.ext_scanner.off_unit	= ap->offs_units;
    876a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
			_radio.ext_scanner.chan_off	= ap->offs;
    876e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
			_radio.ext_scanner.off_unit	= ap->offs_units;
    8772:	f88b 3698 	strb.w	r3, [fp, #1688]	; 0x698
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    8776:	2300      	movs	r3, #0
			_radio.ext_scanner.chan_off	= ap->offs;
    8778:	f8ab 2696 	strh.w	r2, [fp, #1686]	; 0x696
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    877c:	4619      	mov	r1, r3
    877e:	9300      	str	r3, [sp, #0]
    8780:	2204      	movs	r2, #4
    8782:	4618      	mov	r0, r3
    8784:	f7fc f838 	bl	47f8 <ticker_stop>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    8788:	f010 06fd 	ands.w	r6, r0, #253	; 0xfd
    878c:	d020      	beq.n	87d0 <isr+0x650>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    878e:	4a0f      	ldr	r2, [pc, #60]	; (87cc <isr+0x64c>)
    8790:	e7b0      	b.n	86f4 <isr+0x574>
    8792:	bf00      	nop
    8794:	f3af 8000 	nop.w
    8798:	1afd498d 	.word	0x1afd498d
    879c:	00000007 	.word	0x00000007
    87a0:	026259ff 	.word	0x026259ff
    87a4:	0000e2d2 	.word	0x0000e2d2
    87a8:	0000eae7 	.word	0x0000eae7
    87ac:	0000e82e 	.word	0x0000e82e
    87b0:	000f4240 	.word	0x000f4240
    87b4:	3b9aca00 	.word	0x3b9aca00
    87b8:	000062dd 	.word	0x000062dd
    87bc:	1afd498d 	.word	0x1afd498d
    87c0:	000062b9 	.word	0x000062b9
    87c4:	00007ed9 	.word	0x00007ed9
    87c8:	0000e695 	.word	0x0000e695
    87cc:	0000e2f0 	.word	0x0000e2f0
			ret = ticker_start(
    87d0:	f7fc f8e2 	bl	4998 <ticker_ticks_now_get>
    87d4:	f240 53bc 	movw	r3, #1468	; 0x5bc
    87d8:	9308      	str	r3, [sp, #32]
    87da:	4bc7      	ldr	r3, [pc, #796]	; (8af8 <isr+0x978>)
    87dc:	9305      	str	r3, [sp, #20]
    87de:	2204      	movs	r2, #4
    87e0:	2309      	movs	r3, #9
    87e2:	9304      	str	r3, [sp, #16]
    87e4:	f8cd 801c 	str.w	r8, [sp, #28]
    87e8:	4603      	mov	r3, r0
    87ea:	9206      	str	r2, [sp, #24]
    87ec:	9603      	str	r6, [sp, #12]
    87ee:	9602      	str	r6, [sp, #8]
    87f0:	9601      	str	r6, [sp, #4]
    87f2:	9600      	str	r6, [sp, #0]
    87f4:	4631      	mov	r1, r6
    87f6:	4630      	mov	r0, r6
    87f8:	f7fb ff60 	bl	46bc <ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    87fc:	f010 0ffd 	tst.w	r0, #253	; 0xfd
    8800:	d00a      	beq.n	8818 <isr+0x698>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    8802:	4abe      	ldr	r2, [pc, #760]	; (8afc <isr+0x97c>)
    8804:	49be      	ldr	r1, [pc, #760]	; (8b00 <isr+0x980>)
		LL_ASSERT(0);
    8806:	2003      	movs	r0, #3
    8808:	f7f9 fcfa 	bl	2200 <bt_log>
    880c:	4040      	eors	r0, r0
    880e:	f380 8811 	msr	BASEPRI, r0
    8812:	f04f 0004 	mov.w	r0, #4
    8816:	df02      	svc	2
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    8818:	2300      	movs	r3, #0
    881a:	9300      	str	r3, [sp, #0]
    881c:	2204      	movs	r2, #4
    881e:	4619      	mov	r1, r3
    8820:	4618      	mov	r0, r3
    8822:	f7fb ffe9 	bl	47f8 <ticker_stop>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    8826:	f010 06fd 	ands.w	r6, r0, #253	; 0xfd
    882a:	d1b0      	bne.n	878e <isr+0x60e>
			ret = ticker_start(
    882c:	f7fc f8b4 	bl	4998 <ticker_ticks_now_get>
    8830:	f240 53ff 	movw	r3, #1535	; 0x5ff
    8834:	9308      	str	r3, [sp, #32]
    8836:	2204      	movs	r2, #4
    8838:	4bb2      	ldr	r3, [pc, #712]	; (8b04 <isr+0x984>)
    883a:	9305      	str	r3, [sp, #20]
    883c:	f8cd 801c 	str.w	r8, [sp, #28]
    8840:	4603      	mov	r3, r0
    8842:	9206      	str	r2, [sp, #24]
    8844:	9604      	str	r6, [sp, #16]
    8846:	9603      	str	r6, [sp, #12]
    8848:	9602      	str	r6, [sp, #8]
    884a:	9601      	str	r6, [sp, #4]
    884c:	9600      	str	r6, [sp, #0]
    884e:	4631      	mov	r1, r6
    8850:	4630      	mov	r0, r6
    8852:	f7fb ff33 	bl	46bc <ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    8856:	f010 0ffd 	tst.w	r0, #253	; 0xfd
    885a:	d1d2      	bne.n	8802 <isr+0x682>
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    885c:	f8db 366c 	ldr.w	r3, [fp, #1644]	; 0x66c
    8860:	2b00      	cmp	r3, #0
    8862:	f000 80d0 	beq.w	8a06 <isr+0x886>
    8866:	f89b 370e 	ldrb.w	r3, [fp, #1806]	; 0x70e
    886a:	b133      	cbz	r3, 887a <isr+0x6fa>
				      (_radio.fc_req == _radio.fc_ack)) &&
    886c:	f89b 370c 	ldrb.w	r3, [fp, #1804]	; 0x70c
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    8870:	f89b 270d 	ldrb.w	r2, [fp, #1805]	; 0x70d
    8874:	429a      	cmp	r2, r3
    8876:	f040 80c6 	bne.w	8a06 <isr+0x886>
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
    887a:	f89b 364d 	ldrb.w	r3, [fp, #1613]	; 0x64d
		isr_scan_init_adva_check(pdu, rl_idx)) &&
    887e:	06da      	lsls	r2, r3, #27
    8880:	f140 80b1 	bpl.w	89e6 <isr+0x866>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
    8884:	7a3b      	ldrb	r3, [r7, #8]
		isr_scan_init_adva_check(pdu, rl_idx)) &&
    8886:	f013 030f 	ands.w	r3, r3, #15
    888a:	f040 8116 	bne.w	8aba <isr+0x93a>
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
    888e:	f002 fdd9 	bl	b444 <radio_tmr_end_get>
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
    8892:	f8db 3648 	ldr.w	r3, [fp, #1608]	; 0x648
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
    8896:	f200 2616 	addw	r6, r0, #534	; 0x216
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
    889a:	489b      	ldr	r0, [pc, #620]	; (8b08 <isr+0x988>)
    889c:	2207      	movs	r2, #7
    889e:	fba3 0100 	umull	r0, r1, r3, r0
    88a2:	fb02 1103 	mla	r1, r2, r3, r1
    88a6:	a392      	add	r3, pc, #584	; (adr r3, 8af0 <isr+0x970>)
    88a8:	e9d3 2300 	ldrd	r2, r3, [r3]
    88ac:	f7f7 fcdc 	bl	268 <__aeabi_uldivmod>
    88b0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
	    isr_scan_init_check(pdu_adv_rx, rl_idx) &&
    88b4:	4286      	cmp	r6, r0
    88b6:	f080 80a6 	bcs.w	8a06 <isr+0x886>
			node_rx = packet_rx_reserve_get(4);
    88ba:	2004      	movs	r0, #4
    88bc:	f7fd f84a 	bl	5954 <packet_rx_reserve_get>
		if (node_rx == 0) {
    88c0:	4682      	mov	sl, r0
    88c2:	2800      	cmp	r0, #0
    88c4:	f000 81e6 	beq.w	8c94 <isr+0xb14>
		_radio.state = STATE_STOP;
    88c8:	2604      	movs	r6, #4
		_radio.scanner.conn = NULL;
    88ca:	2300      	movs	r3, #0
		conn = _radio.scanner.conn;
    88cc:	f8db 466c 	ldr.w	r4, [fp, #1644]	; 0x66c
		_radio.state = STATE_STOP;
    88d0:	f88b 6014 	strb.w	r6, [fp, #20]
		_radio.scanner.conn = NULL;
    88d4:	f8cb 366c 	str.w	r3, [fp, #1644]	; 0x66c
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    88d8:	f002 fc32 	bl	b140 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_IND;
    88dc:	7803      	ldrb	r3, [r0, #0]
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    88de:	498b      	ldr	r1, [pc, #556]	; (8b0c <isr+0x98c>)
			pdu_adv_tx->chan_sel = 1;
    88e0:	f003 03d0 	and.w	r3, r3, #208	; 0xd0
    88e4:	f043 0325 	orr.w	r3, r3, #37	; 0x25
    88e8:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    88ea:	7a3a      	ldrb	r2, [r7, #8]
    88ec:	b2db      	uxtb	r3, r3
    88ee:	f3c2 1280 	ubfx	r2, r2, #6, #1
    88f2:	f362 13c7 	bfi	r3, r2, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_connect_ind);
    88f6:	2222      	movs	r2, #34	; 0x22
    88f8:	7042      	strb	r2, [r0, #1]
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    88fa:	f89b 264d 	ldrb.w	r2, [fp, #1613]	; 0x64d
    88fe:	09d2      	lsrs	r2, r2, #7
    8900:	f362 1386 	bfi	r3, r2, #6, #1
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    8904:	4605      	mov	r5, r0
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    8906:	2206      	movs	r2, #6
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    8908:	f800 3b02 	strb.w	r3, [r0], #2
		memcpy(&pdu_adv_tx->connect_ind.adv_addr[0],
    890c:	f105 0908 	add.w	r9, r5, #8
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    8910:	f7f7 fe83 	bl	61a <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.adv_addr[0],
    8914:	2206      	movs	r2, #6
    8916:	f107 010a 	add.w	r1, r7, #10
    891a:	4648      	mov	r0, r9
    891c:	f7f7 fe7d 	bl	61a <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.
    8920:	4632      	mov	r2, r6
    8922:	f104 0110 	add.w	r1, r4, #16
    8926:	f105 000e 	add.w	r0, r5, #14
    892a:	f7f7 fe76 	bl	61a <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.crc_init[0],
    892e:	2203      	movs	r2, #3
    8930:	f104 0114 	add.w	r1, r4, #20
    8934:	f105 0012 	add.w	r0, r5, #18
    8938:	f7f7 fe6f 	bl	61a <memcpy>
		pdu_adv_tx->connect_ind.win_size = 1;
    893c:	2301      	movs	r3, #1
    893e:	756b      	strb	r3, [r5, #21]
			(u32_t)_radio.scanner.conn_interval * 1250;
    8940:	f8bb 3660 	ldrh.w	r3, [fp, #1632]	; 0x660
		conn_interval_us =
    8944:	f240 46e2 	movw	r6, #1250	; 0x4e2
    8948:	435e      	muls	r6, r3
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    894a:	f002 fd7b 	bl	b444 <radio_tmr_end_get>
		if (!_radio.remainder_anchor ||
    894e:	f8db 300c 	ldr.w	r3, [fp, #12]
		if (_radio.scanner.win_offset_us == 0) {
    8952:	f8db 8670 	ldr.w	r8, [fp, #1648]	; 0x670
		if (!_radio.remainder_anchor ||
    8956:	2b00      	cmp	r3, #0
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    8958:	bfcc      	ite	gt
    895a:	f500 60db 	addgt.w	r0, r0, #1752	; 0x6d8
			conn_offset_us -= HAL_TICKER_TICKS_TO_US(1);
    895e:	f200 60ba 	addwle	r0, r0, #1722	; 0x6ba
		if (_radio.scanner.win_offset_us == 0) {
    8962:	f1b8 0f00 	cmp.w	r8, #0
    8966:	f040 80b2 	bne.w	8ace <isr+0x94e>
			pdu_adv_tx->connect_ind.win_offset = 0;
    896a:	f885 8016 	strb.w	r8, [r5, #22]
    896e:	f885 8017 	strb.w	r8, [r5, #23]
    8972:	4680      	mov	r8, r0
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
    8974:	2100      	movs	r1, #0
    8976:	4608      	mov	r0, r1
    8978:	f002 fb72 	bl	b060 <radio_tx_ready_delay_get>
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
    897c:	2100      	movs	r1, #0
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
    897e:	eba8 0800 	sub.w	r8, r8, r0
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
    8982:	4608      	mov	r0, r1
    8984:	f002 fb71 	bl	b06a <radio_tx_chain_delay_get>
    8988:	eba8 0000 	sub.w	r0, r8, r0
		conn_space_us += HAL_TICKER_TICKS_TO_US(1);
    898c:	f100 031e 	add.w	r3, r0, #30
    8990:	930a      	str	r3, [sp, #40]	; 0x28
		pdu_adv_tx->connect_ind.interval =
    8992:	f8bb 3660 	ldrh.w	r3, [fp, #1632]	; 0x660
    8996:	832b      	strh	r3, [r5, #24]
		pdu_adv_tx->connect_ind.latency =
    8998:	f8bb 3662 	ldrh.w	r3, [fp, #1634]	; 0x662
    899c:	836b      	strh	r3, [r5, #26]
		pdu_adv_tx->connect_ind.timeout =
    899e:	f8bb 3664 	ldrh.w	r3, [fp, #1636]	; 0x664
    89a2:	83ab      	strh	r3, [r5, #28]
		memcpy(&pdu_adv_tx->connect_ind.chan_map[0],
    89a4:	f104 0117 	add.w	r1, r4, #23
    89a8:	2205      	movs	r2, #5
    89aa:	f105 001e 	add.w	r0, r5, #30
    89ae:	f7f7 fe34 	bl	61a <memcpy>
		pdu_adv_tx->connect_ind.hop =
    89b2:	7fa2      	ldrb	r2, [r4, #30]
    89b4:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    89b8:	f362 0304 	bfi	r3, r2, #0, #5
    89bc:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		pdu_adv_tx->connect_ind.sca = _radio.sca;
    89c0:	f89b 26b4 	ldrb.w	r2, [fp, #1716]	; 0x6b4
    89c4:	f362 1347 	bfi	r3, r2, #5, #3
    89c8:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		radio_switch_complete_and_disable();
    89cc:	f002 fbd2 	bl	b174 <radio_switch_complete_and_disable>
		radio_pkt_tx_set(pdu_adv_tx);
    89d0:	4628      	mov	r0, r5
    89d2:	f002 fb3f 	bl	b054 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    89d6:	f002 fb7b 	bl	b0d0 <radio_is_ready>
    89da:	4680      	mov	r8, r0
    89dc:	2800      	cmp	r0, #0
    89de:	f000 8099 	beq.w	8b14 <isr+0x994>
		LL_ASSERT(!radio_is_ready());
    89e2:	4a46      	ldr	r2, [pc, #280]	; (8afc <isr+0x97c>)
    89e4:	e420      	b.n	8228 <isr+0xa8>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
    89e6:	7a3a      	ldrb	r2, [r7, #8]
    89e8:	f3c3 1380 	ubfx	r3, r3, #6, #1
    89ec:	f3c2 1280 	ubfx	r2, r2, #6, #1
    89f0:	4293      	cmp	r3, r2
    89f2:	d108      	bne.n	8a06 <isr+0x886>
		(memcmp(&_radio.scanner.adv_addr[0],
    89f4:	2206      	movs	r2, #6
    89f6:	f107 010a 	add.w	r1, r7, #10
    89fa:	4845      	ldr	r0, [pc, #276]	; (8b10 <isr+0x990>)
    89fc:	f7f7 fdf8 	bl	5f0 <memcmp>
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
    8a00:	2800      	cmp	r0, #0
    8a02:	f43f af3f 	beq.w	8884 <isr+0x704>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    8a06:	7a3b      	ldrb	r3, [r7, #8]
    8a08:	f013 030f 	ands.w	r3, r3, #15
    8a0c:	d002      	beq.n	8a14 <isr+0x894>
    8a0e:	2b06      	cmp	r3, #6
    8a10:	f040 814d 	bne.w	8cae <isr+0xb2e>
		 (_radio.scanner.type != 0) &&
    8a14:	f89b 264d 	ldrb.w	r2, [fp, #1613]	; 0x64d
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    8a18:	0716      	lsls	r6, r2, #28
    8a1a:	f140 8137 	bpl.w	8c8c <isr+0xb0c>
		 (_radio.scanner.type != 0) &&
    8a1e:	f8db 266c 	ldr.w	r2, [fp, #1644]	; 0x66c
    8a22:	2a00      	cmp	r2, #0
    8a24:	f040 8132 	bne.w	8c8c <isr+0xb0c>
		err = isr_rx_scan_report(rssi_ready,
    8a28:	4628      	mov	r0, r5
    8a2a:	f7fe f8e7 	bl	6bfc <isr_rx_scan_report.isra.36>
		if (err) {
    8a2e:	2800      	cmp	r0, #0
    8a30:	f040 8130 	bne.w	8c94 <isr+0xb14>
		if(pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND){
    8a34:	7a3b      	ldrb	r3, [r7, #8]
    8a36:	f003 030f 	and.w	r3, r3, #15
    8a3a:	2b07      	cmp	r3, #7
    8a3c:	d101      	bne.n	8a42 <isr+0x8c2>
			pdu_adv_tx = (void *)radio_pkt_scratch_get();
    8a3e:	f002 fb7f 	bl	b140 <radio_pkt_scratch_get>
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    8a42:	f002 fb7d 	bl	b140 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    8a46:	7803      	ldrb	r3, [r0, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    8a48:	4930      	ldr	r1, [pc, #192]	; (8b0c <isr+0x98c>)
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    8a4a:	2503      	movs	r5, #3
    8a4c:	f365 0303 	bfi	r3, r5, #0, #4
    8a50:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    8a52:	7a3a      	ldrb	r2, [r7, #8]
    8a54:	b2db      	uxtb	r3, r3
    8a56:	f3c2 1280 	ubfx	r2, r2, #6, #1
    8a5a:	f362 13c7 	bfi	r3, r2, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_scan_req);
    8a5e:	220c      	movs	r2, #12
    8a60:	7042      	strb	r2, [r0, #1]
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    8a62:	f89b 264d 	ldrb.w	r2, [fp, #1613]	; 0x64d
    8a66:	09d2      	lsrs	r2, r2, #7
    8a68:	f362 1386 	bfi	r3, r2, #6, #1
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    8a6c:	4604      	mov	r4, r0
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    8a6e:	2206      	movs	r2, #6
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    8a70:	f800 3b02 	strb.w	r3, [r0], #2
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    8a74:	f7f7 fdd1 	bl	61a <memcpy>
		memcpy(&pdu_adv_tx->scan_req.adv_addr[0],
    8a78:	2206      	movs	r2, #6
    8a7a:	f107 010a 	add.w	r1, r7, #10
    8a7e:	f104 0008 	add.w	r0, r4, #8
    8a82:	f7f7 fdca 	bl	61a <memcpy>
		_radio.scanner.state = 1;
    8a86:	f89b 364c 	ldrb.w	r3, [fp, #1612]	; 0x64c
    8a8a:	f043 0302 	orr.w	r3, r3, #2
    8a8e:	f88b 364c 	strb.w	r3, [fp, #1612]	; 0x64c
		radio_tmr_tifs_set(RADIO_TIFS);
    8a92:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
    8a94:	2302      	movs	r3, #2
    8a96:	f88b 3014 	strb.w	r3, [fp, #20]
		radio_tmr_tifs_set(RADIO_TIFS);
    8a9a:	f002 fbe5 	bl	b268 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    8a9e:	2000      	movs	r0, #0
    8aa0:	f002 fb52 	bl	b148 <radio_switch_complete_and_rx>
		radio_pkt_tx_set(pdu_adv_tx);
    8aa4:	4620      	mov	r0, r4
    8aa6:	f002 fad5 	bl	b054 <radio_pkt_tx_set>
		radio_tmr_end_capture();
    8aaa:	f002 fcb9 	bl	b420 <radio_tmr_end_capture>
		LL_ASSERT(!radio_is_ready());
    8aae:	f002 fb0f 	bl	b0d0 <radio_is_ready>
    8ab2:	2800      	cmp	r0, #0
    8ab4:	f43f abe9 	beq.w	828a <isr+0x10a>
    8ab8:	e793      	b.n	89e2 <isr+0x862>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
    8aba:	2b01      	cmp	r3, #1
    8abc:	d1a7      	bne.n	8a0e <isr+0x88e>
		  isr_scan_tgta_check(true, pdu, rl_idx, NULL)))));
    8abe:	2100      	movs	r1, #0
    8ac0:	4620      	mov	r0, r4
    8ac2:	f7fd ffd5 	bl	6a70 <isr_scan_tgta_check.isra.29>
				      (_radio.fc_req == _radio.fc_ack)) &&
    8ac6:	2800      	cmp	r0, #0
    8ac8:	d09d      	beq.n	8a06 <isr+0x886>
    8aca:	e6e0      	b.n	888e <isr+0x70e>
				conn_space_us += conn_interval_us;
    8acc:	44b0      	add	r8, r6
			while ((conn_space_us & ((u32_t)1 << 31)) ||
    8ace:	f1b8 0f00 	cmp.w	r8, #0
    8ad2:	dbfb      	blt.n	8acc <isr+0x94c>
    8ad4:	4580      	cmp	r8, r0
    8ad6:	d3f9      	bcc.n	8acc <isr+0x94c>
			pdu_adv_tx->connect_ind.win_offset =
    8ad8:	f240 43e2 	movw	r3, #1250	; 0x4e2
				(conn_space_us - conn_offset_us) / 1250;
    8adc:	eba8 0000 	sub.w	r0, r8, r0
			pdu_adv_tx->connect_ind.win_offset =
    8ae0:	fbb0 f0f3 	udiv	r0, r0, r3
			pdu_adv_tx->connect_ind.win_size++;
    8ae4:	7d6b      	ldrb	r3, [r5, #21]
			pdu_adv_tx->connect_ind.win_offset =
    8ae6:	82e8      	strh	r0, [r5, #22]
			pdu_adv_tx->connect_ind.win_size++;
    8ae8:	3301      	adds	r3, #1
    8aea:	756b      	strb	r3, [r5, #21]
    8aec:	e742      	b.n	8974 <isr+0x7f4>
    8aee:	bf00      	nop
    8af0:	3b9aca00 	.word	0x3b9aca00
    8af4:	00000000 	.word	0x00000000
    8af8:	00006445 	.word	0x00006445
    8afc:	0000e2f0 	.word	0x0000e2f0
    8b00:	0000e79e 	.word	0x0000e79e
    8b04:	000071e1 	.word	0x000071e1
    8b08:	1afd498d 	.word	0x1afd498d
    8b0c:	20001046 	.word	0x20001046
    8b10:	2000104c 	.word	0x2000104c
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    8b14:	f44f 7282 	mov.w	r2, #260	; 0x104
    8b18:	f8db 169c 	ldr.w	r1, [fp, #1692]	; 0x69c
    8b1c:	4620      	mov	r0, r4
    8b1e:	f7fa ff92 	bl	3a46 <mem_index_get>
    8b22:	8420      	strh	r0, [r4, #32]
		radio_le_conn_cmplt->status = 0x00;
    8b24:	f88a 800b 	strb.w	r8, [sl, #11]
		radio_le_conn_cmplt->role = 0x00;
    8b28:	f88a 800c 	strb.w	r8, [sl, #12]
				pdu_adv_tx->rx_addr;
    8b2c:	782b      	ldrb	r3, [r5, #0]
		node_rx->hdr.handle = conn->handle;
    8b2e:	f8aa 0006 	strh.w	r0, [sl, #6]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    8b32:	2206      	movs	r2, #6
				pdu_adv_tx->rx_addr;
    8b34:	f3c3 13c0 	ubfx	r3, r3, #7, #1
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    8b38:	f88a 2004 	strb.w	r2, [sl, #4]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    8b3c:	4649      	mov	r1, r9
			radio_le_conn_cmplt->peer_addr_type =
    8b3e:	f88a 300d 	strb.w	r3, [sl, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    8b42:	f10a 000e 	add.w	r0, sl, #14
    8b46:	f7f7 fd68 	bl	61a <memcpy>
		radio_le_conn_cmplt->interval = _radio.scanner.conn_interval;
    8b4a:	f8bb 3660 	ldrh.w	r3, [fp, #1632]	; 0x660
    8b4e:	f8aa 3014 	strh.w	r3, [sl, #20]
		radio_le_conn_cmplt->latency = _radio.scanner.conn_latency;
    8b52:	f8bb 3662 	ldrh.w	r3, [fp, #1634]	; 0x662
    8b56:	f8aa 3016 	strh.w	r3, [sl, #22]
		radio_le_conn_cmplt->timeout = _radio.scanner.conn_timeout;
    8b5a:	f8bb 3664 	ldrh.w	r3, [fp, #1636]	; 0x664
    8b5e:	f8aa 3018 	strh.w	r3, [sl, #24]
			pdu_adv_tx->connect_ind.sca;
    8b62:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    8b66:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
    8b6a:	f88a 301a 	strb.w	r3, [sl, #26]
		rx_fc_lock(conn->handle);
    8b6e:	8c20      	ldrh	r0, [r4, #32]
    8b70:	f7fd fb88 	bl	6284 <rx_fc_lock>
		packet_rx_enqueue();
    8b74:	f7fd ffac 	bl	6ad0 <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
    8b78:	2003      	movs	r0, #3
    8b7a:	f7fc feeb 	bl	5954 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    8b7e:	b908      	cbnz	r0, 8b84 <isr+0xa04>
    8b80:	4ab3      	ldr	r2, [pc, #716]	; (8e50 <isr+0xcd0>)
    8b82:	e4c7      	b.n	8514 <isr+0x394>
			node_rx->hdr.handle = conn->handle;
    8b84:	8c23      	ldrh	r3, [r4, #32]
    8b86:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    8b88:	230a      	movs	r3, #10
    8b8a:	7103      	strb	r3, [r0, #4]
			if (pdu_adv_rx->chan_sel) {
    8b8c:	7a3b      	ldrb	r3, [r7, #8]
    8b8e:	f013 0320 	ands.w	r3, r3, #32
    8b92:	d00e      	beq.n	8bb2 <isr+0xa32>
					((u16_t)conn->access_addr[1] << 8) |
    8b94:	7c62      	ldrb	r2, [r4, #17]
					conn->access_addr[0];
    8b96:	7c23      	ldrb	r3, [r4, #16]
					((u16_t)conn->access_addr[3] << 8) |
    8b98:	7ce1      	ldrb	r1, [r4, #19]
				u16_t aa_ls =
    8b9a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
    8b9e:	7ca2      	ldrb	r2, [r4, #18]
				u16_t aa_ms =
    8ba0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
    8ba4:	7f61      	ldrb	r1, [r4, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    8ba6:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
    8ba8:	f041 0140 	orr.w	r1, r1, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
    8bac:	83e3      	strh	r3, [r4, #30]
				conn->data_chan_sel = 1;
    8bae:	7761      	strb	r1, [r4, #29]
				le_chan_sel_algo->chan_sel_algo = 0x01;
    8bb0:	2301      	movs	r3, #1
				le_chan_sel_algo->chan_sel_algo = 0x00;
    8bb2:	72c3      	strb	r3, [r0, #11]
			packet_rx_enqueue();
    8bb4:	f7fd ff8c 	bl	6ad0 <packet_rx_enqueue>
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    8bb8:	f8db 3710 	ldr.w	r3, [fp, #1808]	; 0x710
    8bbc:	6063      	str	r3, [r4, #4]
		ticks_slot_offset = (conn->hdr.ticks_active_to_start <
    8bbe:	2b27      	cmp	r3, #39	; 0x27
    8bc0:	bf38      	it	cc
    8bc2:	2327      	movcc	r3, #39	; 0x27
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
    8bc4:	2227      	movs	r2, #39	; 0x27
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
    8bc6:	2500      	movs	r5, #0
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
    8bc8:	6022      	str	r2, [r4, #0]
		ticks_slot_offset = (conn->hdr.ticks_active_to_start <
    8bca:	4698      	mov	r8, r3
		conn->hdr.ticks_slot = _radio.scanner.ticks_conn_slot;
    8bcc:	f8db 2668 	ldr.w	r2, [fp, #1640]	; 0x668
    8bd0:	60e2      	str	r2, [r4, #12]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    8bd2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
    8bd6:	2206      	movs	r2, #6
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
    8bd8:	60a5      	str	r5, [r4, #8]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    8bda:	4629      	mov	r1, r5
    8bdc:	9300      	str	r3, [sp, #0]
    8bde:	4628      	mov	r0, r5
    8be0:	4b9c      	ldr	r3, [pc, #624]	; (8e54 <isr+0xcd4>)
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    8be2:	f8df a284 	ldr.w	sl, [pc, #644]	; 8e68 <isr+0xce8>
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    8be6:	f7fb fe07 	bl	47f8 <ticker_stop>
		ticker_stop_scan_assert(ticker_status, (void *)__LINE__);
    8bea:	f240 7101 	movw	r1, #1793	; 0x701
    8bee:	f7fd fb99 	bl	6324 <ticker_stop_scan_assert>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    8bf2:	462b      	mov	r3, r5
    8bf4:	2204      	movs	r2, #4
    8bf6:	4629      	mov	r1, r5
    8bf8:	9500      	str	r5, [sp, #0]
    8bfa:	4628      	mov	r0, r5
    8bfc:	f7fb fdfc 	bl	47f8 <ticker_stop>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    8c00:	f8db 3008 	ldr.w	r3, [fp, #8]
    8c04:	f894 9020 	ldrb.w	r9, [r4, #32]
		ticker_status =
    8c08:	9406      	str	r4, [sp, #24]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    8c0a:	eba3 0b08 	sub.w	fp, r3, r8
		ticker_status =
    8c0e:	f44f 63e3 	mov.w	r3, #1816	; 0x718
    8c12:	9308      	str	r3, [sp, #32]
    8c14:	4b90      	ldr	r3, [pc, #576]	; (8e58 <isr+0xcd8>)
    8c16:	9307      	str	r3, [sp, #28]
    8c18:	4b90      	ldr	r3, [pc, #576]	; (8e5c <isr+0xcdc>)
    8c1a:	9305      	str	r3, [sp, #20]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    8c1c:	68e3      	ldr	r3, [r4, #12]
		ticker_status =
    8c1e:	9503      	str	r5, [sp, #12]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    8c20:	fba6 670a 	umull	r6, r7, r6, sl
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    8c24:	4443      	add	r3, r8
		ticker_status =
    8c26:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    8c28:	4630      	mov	r0, r6
    8c2a:	a387      	add	r3, pc, #540	; (adr r3, 8e48 <isr+0xcc8>)
    8c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
    8c30:	4639      	mov	r1, r7
    8c32:	f7f7 fb19 	bl	268 <__aeabi_uldivmod>
    8c36:	4610      	mov	r0, r2
    8c38:	4619      	mov	r1, r3
    8c3a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8c3e:	2300      	movs	r3, #0
    8c40:	f7f7 fb12 	bl	268 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    8c44:	a380      	add	r3, pc, #512	; (adr r3, 8e48 <isr+0xcc8>)
    8c46:	e9d3 2300 	ldrd	r2, r3, [r3]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    8c4a:	9002      	str	r0, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    8c4c:	4639      	mov	r1, r7
    8c4e:	4630      	mov	r0, r6
    8c50:	f7f7 fb0a 	bl	268 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
    8c54:	990a      	ldr	r1, [sp, #40]	; 0x28
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    8c56:	9001      	str	r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
    8c58:	a37b      	add	r3, pc, #492	; (adr r3, 8e48 <isr+0xcc8>)
    8c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
    8c5e:	fba1 010a 	umull	r0, r1, r1, sl
    8c62:	f7f7 fb01 	bl	268 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    8c66:	f109 0907 	add.w	r9, r9, #7
    8c6a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticker_status =
    8c6e:	fa5f f989 	uxtb.w	r9, r9
    8c72:	9000      	str	r0, [sp, #0]
    8c74:	465b      	mov	r3, fp
    8c76:	464a      	mov	r2, r9
    8c78:	4629      	mov	r1, r5
    8c7a:	4628      	mov	r0, r5
    8c7c:	f7fb fd1e 	bl	46bc <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    8c80:	f030 0302 	bics.w	r3, r0, #2
    8c84:	f47f ad83 	bne.w	878e <isr+0x60e>
    8c88:	f7ff baff 	b.w	828a <isr+0x10a>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    8c8c:	b97b      	cbnz	r3, 8cae <isr+0xb2e>
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
    8c8e:	7a7b      	ldrb	r3, [r7, #9]
    8c90:	2b00      	cmp	r3, #0
    8c92:	d13b      	bne.n	8d0c <isr+0xb8c>
			_radio.state = STATE_CLOSE;
    8c94:	2303      	movs	r3, #3
    8c96:	f88b 3014 	strb.w	r3, [fp, #20]
			radio_disable();
    8c9a:	f002 f9fb 	bl	b094 <radio_disable>
			_radio.scanner.state = 0;
    8c9e:	f89b 364c 	ldrb.w	r3, [fp, #1612]	; 0x64c
    8ca2:	f36f 0341 	bfc	r3, #1, #1
    8ca6:	f88b 364c 	strb.w	r3, [fp, #1612]	; 0x64c
    8caa:	f7ff baee 	b.w	828a <isr+0x10a>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    8cae:	2b01      	cmp	r3, #1
    8cb0:	d00d      	beq.n	8cce <isr+0xb4e>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    8cb2:	7a3b      	ldrb	r3, [r7, #8]
					&dir_report))) ||
    8cb4:	f003 020b 	and.w	r2, r3, #11
    8cb8:	2a02      	cmp	r2, #2
    8cba:	d0e8      	beq.n	8c8e <isr+0xb0e>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    8cbc:	f003 030f 	and.w	r3, r3, #15
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND) ||
    8cc0:	2b07      	cmp	r3, #7
    8cc2:	d10b      	bne.n	8cdc <isr+0xb5c>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
    8cc4:	f89b 364d 	ldrb.w	r3, [fp, #1613]	; 0x64d
    8cc8:	075c      	lsls	r4, r3, #29
    8cca:	d1e0      	bne.n	8c8e <isr+0xb0e>
    8ccc:	e7e2      	b.n	8c94 <isr+0xb14>
		    isr_scan_tgta_check(false, pdu_adv_rx, rl_idx,
    8cce:	a90d      	add	r1, sp, #52	; 0x34
    8cd0:	4620      	mov	r0, r4
    8cd2:	f7fd fecd 	bl	6a70 <isr_scan_tgta_check.isra.29>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
    8cd6:	2800      	cmp	r0, #0
    8cd8:	d1d9      	bne.n	8c8e <isr+0xb0e>
    8cda:	e7ea      	b.n	8cb2 <isr+0xb32>
		   (_radio.scanner.phy)) ||
    8cdc:	2b04      	cmp	r3, #4
    8cde:	d1d9      	bne.n	8c94 <isr+0xb14>
		   (_radio.scanner.state != 0) &&
    8ce0:	f89b 364c 	ldrb.w	r3, [fp, #1612]	; 0x64c
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
    8ce4:	0798      	lsls	r0, r3, #30
    8ce6:	d5d5      	bpl.n	8c94 <isr+0xb14>
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
    8ce8:	f002 fa2a 	bl	b140 <radio_pkt_scratch_get>
	return ((sreq->rx_addr == srsp->tx_addr) &&
    8cec:	7a3b      	ldrb	r3, [r7, #8]
    8cee:	7802      	ldrb	r2, [r0, #0]
    8cf0:	f3c3 1380 	ubfx	r3, r3, #6, #1
    8cf4:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    8cf8:	d1cc      	bne.n	8c94 <isr+0xb14>
		(memcmp(&sreq->scan_req.adv_addr[0],
    8cfa:	2206      	movs	r2, #6
    8cfc:	f107 010a 	add.w	r1, r7, #10
    8d00:	3008      	adds	r0, #8
    8d02:	f7f7 fc75 	bl	5f0 <memcmp>
		   (_radio.scanner.state != 0) &&
    8d06:	2800      	cmp	r0, #0
    8d08:	d0c1      	beq.n	8c8e <isr+0xb0e>
    8d0a:	e7c3      	b.n	8c94 <isr+0xb14>
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
    8d0c:	f8db 366c 	ldr.w	r3, [fp, #1644]	; 0x66c
    8d10:	2b00      	cmp	r3, #0
    8d12:	d1bf      	bne.n	8c94 <isr+0xb14>
		err = isr_rx_scan_report(rssi_ready,
    8d14:	4628      	mov	r0, r5
    8d16:	f7fd ff71 	bl	6bfc <isr_rx_scan_report.isra.36>
    8d1a:	e7bb      	b.n	8c94 <isr+0xb14>
	_radio.packet_counter++;
    8d1c:	f89b 36ac 	ldrb.w	r3, [fp, #1708]	; 0x6ac
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    8d20:	f89b 26cd 	ldrb.w	r2, [fp, #1741]	; 0x6cd
	_radio.packet_counter++;
    8d24:	3301      	adds	r3, #1
    8d26:	f88b 36ac 	strb.w	r3, [fp, #1708]	; 0x6ac
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    8d2a:	f8db 36c8 	ldr.w	r3, [fp, #1736]	; 0x6c8
    8d2e:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    8d32:	2301      	movs	r3, #1
    8d34:	7133      	strb	r3, [r6, #4]
	if (crc_ok) {
    8d36:	2f00      	cmp	r7, #0
    8d38:	f000 8389 	beq.w	944e <isr+0x12ce>
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
    8d3c:	f8db 36a8 	ldr.w	r3, [fp, #1704]	; 0x6a8
    8d40:	7a30      	ldrb	r0, [r6, #8]
    8d42:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
    8d46:	f3c0 0080 	ubfx	r0, r0, #2, #1
    8d4a:	f002 0101 	and.w	r1, r2, #1
    8d4e:	4288      	cmp	r0, r1
    8d50:	f000 80c4 	beq.w	8edc <isr+0xd5c>
		_radio.conn_curr->sn++;
    8d54:	f081 0101 	eor.w	r1, r1, #1
    8d58:	f361 0200 	bfi	r2, r1, #0, #1
    8d5c:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
		if (_radio.role == ROLE_SLAVE) {
    8d60:	f89b 2013 	ldrb.w	r2, [fp, #19]
    8d64:	2a03      	cmp	r2, #3
			_radio.conn_curr->slave.latency_enabled = 1;
    8d66:	bf02      	ittt	eq
    8d68:	f893 2038 	ldrbeq.w	r2, [r3, #56]	; 0x38
    8d6c:	f042 0201 	orreq.w	r2, r2, #1
    8d70:	f883 2038 	strbeq.w	r2, [r3, #56]	; 0x38
		if (_radio.conn_curr->empty == 0) {
    8d74:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
    8d78:	0611      	lsls	r1, r2, #24
    8d7a:	f100 80ab 	bmi.w	8ed4 <isr+0xd54>
			node_tx = _radio.conn_curr->pkt_tx_head;
    8d7e:	f8d3 80ec 	ldr.w	r8, [r3, #236]	; 0xec
				_radio.conn_curr->packet_tx_head_offset);
    8d82:	f893 e101 	ldrb.w	lr, [r3, #257]	; 0x101
			pdu_data_tx = (void *)(node_tx->pdu_data +
    8d86:	f108 0c04 	add.w	ip, r8, #4
    8d8a:	eb0c 050e 	add.w	r5, ip, lr
			pdu_data_tx_len = pdu_data_tx->len;
    8d8e:	786c      	ldrb	r4, [r5, #1]
			if (pdu_data_tx_len != 0) {
    8d90:	b90c      	cbnz	r4, 8d96 <isr+0xc16>
	u8_t terminate = 0;
    8d92:	2500      	movs	r5, #0
    8d94:	e029      	b.n	8dea <isr+0xc6a>
				if (_radio.conn_curr->enc_tx) {
    8d96:	0692      	lsls	r2, r2, #26
    8d98:	d50a      	bpl.n	8db0 <isr+0xc30>
					_radio.conn_curr->ccm_tx.counter++;
    8d9a:	f8d3 00da 	ldr.w	r0, [r3, #218]	; 0xda
    8d9e:	f8d3 10de 	ldr.w	r1, [r3, #222]	; 0xde
    8da2:	3001      	adds	r0, #1
    8da4:	f141 0100 	adc.w	r1, r1, #0
    8da8:	f8c3 00da 	str.w	r0, [r3, #218]	; 0xda
    8dac:	f8c3 10de 	str.w	r1, [r3, #222]	; 0xde
				if (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) {
    8db0:	f81c 900e 	ldrb.w	r9, [ip, lr]
    8db4:	f009 0903 	and.w	r9, r9, #3
    8db8:	f1b9 0f03 	cmp.w	r9, #3
    8dbc:	d1e9      	bne.n	8d92 <isr+0xc12>
	switch (pdu_data_tx->llctrl.opcode) {
    8dbe:	78eb      	ldrb	r3, [r5, #3]
    8dc0:	2b02      	cmp	r3, #2
    8dc2:	d1e6      	bne.n	8d92 <isr+0xc12>
		_radio.state = STATE_CLOSE;
    8dc4:	f88b 9014 	strb.w	r9, [fp, #20]
		radio_disable();
    8dc8:	f002 f964 	bl	b094 <radio_disable>
		LL_ASSERT(!radio_is_ready());
    8dcc:	f002 f980 	bl	b0d0 <radio_is_ready>
    8dd0:	b110      	cbz	r0, 8dd8 <isr+0xc58>
    8dd2:	4a23      	ldr	r2, [pc, #140]	; (8e60 <isr+0xce0>)
    8dd4:	f7ff ba28 	b.w	8228 <isr+0xa8>
		     (pdu_data_tx->llctrl.terminate_ind.error_code == 0x13) ?
    8dd8:	7929      	ldrb	r1, [r5, #4]
		terminate_ind_rx_enqueue(_radio.conn_curr,
    8dda:	f8db 06a8 	ldr.w	r0, [fp, #1704]	; 0x6a8
    8dde:	2913      	cmp	r1, #19
    8de0:	bf08      	it	eq
    8de2:	2116      	moveq	r1, #22
    8de4:	f7fd fed6 	bl	6b94 <terminate_ind_rx_enqueue>
		terminate = 1;
    8de8:	2501      	movs	r5, #1
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    8dea:	f8db 36a8 	ldr.w	r3, [fp, #1704]	; 0x6a8
    8dee:	f893 2101 	ldrb.w	r2, [r3, #257]	; 0x101
			if (_radio.conn_curr->packet_tx_head_offset ==
    8df2:	f893 1100 	ldrb.w	r1, [r3, #256]	; 0x100
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    8df6:	4422      	add	r2, r4
    8df8:	b2d2      	uxtb	r2, r2
			if (_radio.conn_curr->packet_tx_head_offset ==
    8dfa:	4291      	cmp	r1, r2
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    8dfc:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
			if (_radio.conn_curr->packet_tx_head_offset ==
    8e00:	d11e      	bne.n	8e40 <isr+0xcc0>
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    8e02:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
    8e06:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
	conn->packet_tx_head_len = 0;
    8e0a:	2000      	movs	r0, #0
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    8e0c:	428a      	cmp	r2, r1
	conn->packet_tx_head_len = 0;
    8e0e:	f883 0100 	strb.w	r0, [r3, #256]	; 0x100
	conn->packet_tx_head_offset = 0;
    8e12:	f883 0101 	strb.w	r0, [r3, #257]	; 0x101
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    8e16:	d129      	bne.n	8e6c <isr+0xcec>
		if (node_tx) {
    8e18:	f1b8 0f00 	cmp.w	r8, #0
    8e1c:	d010      	beq.n	8e40 <isr+0xcc0>
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
    8e1e:	f8d3 10f4 	ldr.w	r1, [r3, #244]	; 0xf4
			conn->pkt_tx_head = conn->pkt_tx_head->next;
    8e22:	6814      	ldr	r4, [r2, #0]
    8e24:	f8c3 40ec 	str.w	r4, [r3, #236]	; 0xec
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
    8e28:	428a      	cmp	r2, r1
				conn->pkt_tx_ctrl = NULL;
    8e2a:	bf06      	itte	eq
    8e2c:	f8c3 00f0 	streq.w	r0, [r3, #240]	; 0xf0
				conn->pkt_tx_ctrl_last = NULL;
    8e30:	f8c3 00f4 	streq.w	r0, [r3, #244]	; 0xf4
				conn->pkt_tx_ctrl = conn->pkt_tx_head;
    8e34:	f8c3 40f0 	strne.w	r4, [r3, #240]	; 0xf0
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    8e38:	490a      	ldr	r1, [pc, #40]	; (8e64 <isr+0xce4>)
    8e3a:	4640      	mov	r0, r8
    8e3c:	f7fa fdeb 	bl	3a16 <mem_release>
	struct radio_pdu_node_tx *tx_release = NULL;
    8e40:	f04f 0800 	mov.w	r8, #0
    8e44:	e01b      	b.n	8e7e <isr+0xcfe>
    8e46:	bf00      	nop
    8e48:	1afd498d 	.word	0x1afd498d
    8e4c:	00000007 	.word	0x00000007
    8e50:	0000e2f0 	.word	0x0000e2f0
    8e54:	00006325 	.word	0x00006325
    8e58:	000062b9 	.word	0x000062b9
    8e5c:	00007ed5 	.word	0x00007ed5
    8e60:	0000e2fc 	.word	0x0000e2fc
    8e64:	200010e0 	.word	0x200010e0
    8e68:	3b9aca00 	.word	0x3b9aca00
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    8e6c:	f8d3 10f8 	ldr.w	r1, [r3, #248]	; 0xf8
    8e70:	428a      	cmp	r2, r1
    8e72:	6812      	ldr	r2, [r2, #0]
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    8e74:	bf08      	it	eq
    8e76:	f8c3 20f8 	streq.w	r2, [r3, #248]	; 0xf8
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    8e7a:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
	if (terminate) {
    8e7e:	b37d      	cbz	r5, 8ee0 <isr+0xd60>
		connection_release(_radio.conn_curr);
    8e80:	f8db 06a8 	ldr.w	r0, [fp, #1704]	; 0x6a8
    8e84:	f7fd fc3e 	bl	6704 <connection_release>
		_radio.conn_curr = NULL;
    8e88:	2500      	movs	r5, #0
				_radio.conn_curr = NULL;
    8e8a:	f8cb 56a8 	str.w	r5, [fp, #1704]	; 0x6a8
	if (!radio_tmr_aa_restore()) {
    8e8e:	f002 fabb 	bl	b408 <radio_tmr_aa_restore>
    8e92:	b918      	cbnz	r0, 8e9c <isr+0xd1c>
		radio_tmr_aa_save(radio_tmr_aa_get());
    8e94:	f002 faac 	bl	b3f0 <radio_tmr_aa_get>
    8e98:	f002 fab0 	bl	b3fc <radio_tmr_aa_save>
	if (!_radio.conn_curr) {
    8e9c:	f8db 36a8 	ldr.w	r3, [fp, #1704]	; 0x6a8
    8ea0:	2b00      	cmp	r3, #0
    8ea2:	f43f a9f2 	beq.w	828a <isr+0x10a>
	if (tx_release) {
    8ea6:	f1b8 0f00 	cmp.w	r8, #0
    8eaa:	d003      	beq.n	8eb4 <isr+0xd34>
		pdu_node_tx_release(_radio.conn_curr->handle, tx_release);
    8eac:	4641      	mov	r1, r8
    8eae:	8c18      	ldrh	r0, [r3, #32]
    8eb0:	f7fd fba8 	bl	6604 <pdu_node_tx_release>
	if (rx_enqueue) {
    8eb4:	2d00      	cmp	r5, #0
    8eb6:	f43f a9e8 	beq.w	828a <isr+0x10a>
		rx_fc_lock(_radio.conn_curr->handle);
    8eba:	f8db 36a8 	ldr.w	r3, [fp, #1704]	; 0x6a8
    8ebe:	8c18      	ldrh	r0, [r3, #32]
    8ec0:	f7fd f9e0 	bl	6284 <rx_fc_lock>
		node_rx->hdr.handle = _radio.conn_curr->handle;
    8ec4:	f8db 36a8 	ldr.w	r3, [fp, #1704]	; 0x6a8
    8ec8:	8c1b      	ldrh	r3, [r3, #32]
    8eca:	80f3      	strh	r3, [r6, #6]
		packet_rx_enqueue();
    8ecc:	f7fd fe00 	bl	6ad0 <packet_rx_enqueue>
    8ed0:	f7ff b9db 	b.w	828a <isr+0x10a>
			_radio.conn_curr->empty = 0;
    8ed4:	f36f 12c7 	bfc	r2, #7, #1
    8ed8:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
    8edc:	f04f 0800 	mov.w	r8, #0
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    8ee0:	f8db 36a8 	ldr.w	r3, [fp, #1704]	; 0x6a8
    8ee4:	7a32      	ldrb	r2, [r6, #8]
    8ee6:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
    8eea:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    8eee:	f3c3 0340 	ubfx	r3, r3, #1, #1
    8ef2:	429a      	cmp	r2, r3
    8ef4:	d03c      	beq.n	8f70 <isr+0xdf0>
	u8_t rx_enqueue = 0;
    8ef6:	2500      	movs	r5, #0
		_radio.conn_curr->supervision_expire = 0;
    8ef8:	f8db 36a8 	ldr.w	r3, [fp, #1704]	; 0x6a8
		_radio.crc_expire = 0;
    8efc:	2400      	movs	r4, #0
    8efe:	f88b 46ad 	strb.w	r4, [fp, #1709]	; 0x6ad
		_radio.conn_curr->supervision_expire = 0;
    8f02:	861c      	strh	r4, [r3, #48]	; 0x30
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    8f04:	f8db 06a8 	ldr.w	r0, [fp, #1704]	; 0x6a8
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
    8f08:	a90d      	add	r1, sp, #52	; 0x34
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    8f0a:	f890 90a8 	ldrb.w	r9, [r0, #168]	; 0xa8
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
    8f0e:	f7ff f8cf 	bl	80b0 <prepare_pdu_data_tx>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    8f12:	f89b 3014 	ldrb.w	r3, [fp, #20]
    8f16:	2b03      	cmp	r3, #3
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    8f18:	ea4f 19d9 	mov.w	r9, r9, lsr #7
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    8f1c:	d013      	beq.n	8f46 <isr+0xdc6>
    8f1e:	2c00      	cmp	r4, #0
    8f20:	f040 82ae 	bne.w	9480 <isr+0x1300>
    8f24:	b13f      	cbz	r7, 8f36 <isr+0xdb6>
			((crc_ok) && (pdu_data_rx->md == 0) &&
    8f26:	7a33      	ldrb	r3, [r6, #8]
    8f28:	06df      	lsls	r7, r3, #27
    8f2a:	d404      	bmi.n	8f36 <isr+0xdb6>
			 (pdu_data_tx->len == 0)) ||
    8f2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
			((crc_ok) && (pdu_data_rx->md == 0) &&
    8f2e:	785b      	ldrb	r3, [r3, #1]
    8f30:	2b00      	cmp	r3, #0
    8f32:	f000 82a5 	beq.w	9480 <isr+0x1300>
			_radio.conn_curr->llcp_terminate.reason_peer) ?
    8f36:	f8db 36a8 	ldr.w	r3, [fp, #1704]	; 0x6a8
			 (pdu_data_tx->len == 0)) ||
    8f3a:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    8f3e:	2b00      	cmp	r3, #0
    8f40:	bf0c      	ite	eq
    8f42:	2302      	moveq	r3, #2
    8f44:	2303      	movne	r3, #3
	if (_radio.state == STATE_CLOSE) {
    8f46:	2b03      	cmp	r3, #3
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    8f48:	f88b 3014 	strb.w	r3, [fp, #20]
	if (_radio.state == STATE_CLOSE) {
    8f4c:	f040 82b3 	bne.w	94b6 <isr+0x1336>
		if (_radio.role == ROLE_MASTER) {
    8f50:	f89b 3013 	ldrb.w	r3, [fp, #19]
    8f54:	2b04      	cmp	r3, #4
    8f56:	f040 8295 	bne.w	9484 <isr+0x1304>
			_radio.conn_curr->empty = is_empty_pdu_tx_retry;
    8f5a:	f8db 36a8 	ldr.w	r3, [fp, #1704]	; 0x6a8
    8f5e:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
    8f62:	f369 12c7 	bfi	r2, r9, #7, #1
    8f66:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
			radio_disable();
    8f6a:	f002 f893 	bl	b094 <radio_disable>
    8f6e:	e78e      	b.n	8e8e <isr+0xd0e>
	    (packet_rx_reserve_get(3) != 0) &&
    8f70:	2003      	movs	r0, #3
    8f72:	f7fc fcef 	bl	5954 <packet_rx_reserve_get>
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    8f76:	2800      	cmp	r0, #0
    8f78:	d0bd      	beq.n	8ef6 <isr+0xd76>
	    (packet_rx_reserve_get(3) != 0) &&
    8f7a:	f89b 370e 	ldrb.w	r3, [fp, #1806]	; 0x70e
    8f7e:	b373      	cbz	r3, 8fde <isr+0xe5e>
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    8f80:	f8db 36d8 	ldr.w	r3, [fp, #1752]	; 0x6d8
    8f84:	f8db 26dc 	ldr.w	r2, [fp, #1756]	; 0x6dc
	    ((_radio.fc_ena == 0) ||
    8f88:	4293      	cmp	r3, r2
    8f8a:	d105      	bne.n	8f98 <isr+0xe18>
	      (_radio.fc_req == _radio.fc_ack)) ||
    8f8c:	f89b 270c 	ldrb.w	r2, [fp, #1804]	; 0x70c
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    8f90:	f89b 170d 	ldrb.w	r1, [fp, #1805]	; 0x70d
    8f94:	4291      	cmp	r1, r2
    8f96:	d022      	beq.n	8fde <isr+0xe5e>
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    8f98:	f8db 26dc 	ldr.w	r2, [fp, #1756]	; 0x6dc
	      (_radio.fc_req == _radio.fc_ack)) ||
    8f9c:	4293      	cmp	r3, r2
    8f9e:	d0aa      	beq.n	8ef6 <isr+0xd76>
	      (_radio.fc_req != _radio.fc_ack) &&
    8fa0:	f89b 370c 	ldrb.w	r3, [fp, #1804]	; 0x70c
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    8fa4:	f89b 270d 	ldrb.w	r2, [fp, #1805]	; 0x70d
    8fa8:	429a      	cmp	r2, r3
    8faa:	d0a4      	beq.n	8ef6 <isr+0xd76>
		(((_radio.fc_req == 0) &&
    8fac:	f89b 370c 	ldrb.w	r3, [fp, #1804]	; 0x70c
	      (_radio.fc_req != _radio.fc_ack) &&
    8fb0:	b933      	cbnz	r3, 8fc0 <isr+0xe40>
		   _radio.conn_curr->handle)) ||
    8fb2:	f8db 36a8 	ldr.w	r3, [fp, #1704]	; 0x6a8
		(((_radio.fc_req == 0) &&
    8fb6:	f8bb 270a 	ldrh.w	r2, [fp, #1802]	; 0x70a
    8fba:	8c1b      	ldrh	r3, [r3, #32]
    8fbc:	429a      	cmp	r2, r3
    8fbe:	d00e      	beq.n	8fde <isr+0xe5e>
		 ((_radio.fc_req != 0) &&
    8fc0:	f89b 370c 	ldrb.w	r3, [fp, #1804]	; 0x70c
		   _radio.conn_curr->handle)) ||
    8fc4:	2b00      	cmp	r3, #0
    8fc6:	d096      	beq.n	8ef6 <isr+0xd76>
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    8fc8:	f89b 370c 	ldrb.w	r3, [fp, #1804]	; 0x70c
		   _radio.conn_curr->handle)))))) {
    8fcc:	f8db 16a8 	ldr.w	r1, [fp, #1704]	; 0x6a8
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    8fd0:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
		 ((_radio.fc_req != 0) &&
    8fd4:	f8b3 2704 	ldrh.w	r2, [r3, #1796]	; 0x704
    8fd8:	8c0b      	ldrh	r3, [r1, #32]
    8fda:	429a      	cmp	r2, r3
    8fdc:	d18b      	bne.n	8ef6 <isr+0xd76>
		if (pdu_data_rx->len != 0) {
    8fde:	f896 9009 	ldrb.w	r9, [r6, #9]
    8fe2:	f1b9 0f00 	cmp.w	r9, #0
    8fe6:	f000 81ee 	beq.w	93c6 <isr+0x1246>
			if (_radio.conn_curr->enc_rx) {
    8fea:	f8db 36a8 	ldr.w	r3, [fp, #1704]	; 0x6a8
    8fee:	f893 90a8 	ldrb.w	r9, [r3, #168]	; 0xa8
    8ff2:	f019 0910 	ands.w	r9, r9, #16
    8ff6:	d007      	beq.n	9008 <isr+0xe88>
				done = radio_ccm_is_done();
    8ff8:	f002 fa92 	bl	b520 <radio_ccm_is_done>
				LL_ASSERT(done);
    8ffc:	b910      	cbnz	r0, 9004 <isr+0xe84>
    8ffe:	4ab6      	ldr	r2, [pc, #728]	; (92d8 <isr+0x1158>)
    9000:	49b6      	ldr	r1, [pc, #728]	; (92dc <isr+0x115c>)
    9002:	e400      	b.n	8806 <isr+0x686>
				ccm_rx_increment = 1;
    9004:	f04f 0901 	mov.w	r9, #1
			if ((_radio.conn_curr->enc_rx &&
    9008:	f8db 36a8 	ldr.w	r3, [fp, #1704]	; 0x6a8
    900c:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
    9010:	06dc      	lsls	r4, r3, #27
    9012:	d40f      	bmi.n	9034 <isr+0xeb4>
			    (_radio.conn_curr->pause_rx &&
    9014:	f8db 46a8 	ldr.w	r4, [fp, #1704]	; 0x6a8
    9018:	7a33      	ldrb	r3, [r6, #8]
    901a:	f894 20a8 	ldrb.w	r2, [r4, #168]	; 0xa8
			     !radio_ccm_mic_is_valid()) ||
    901e:	f012 0f04 	tst.w	r2, #4
    9022:	d117      	bne.n	9054 <isr+0xed4>
			switch (pdu_data_rx->ll_id) {
    9024:	f013 0303 	ands.w	r3, r3, #3
    9028:	f000 81cd 	beq.w	93c6 <isr+0x1246>
    902c:	2b02      	cmp	r3, #2
    902e:	d848      	bhi.n	90c2 <isr+0xf42>
				*rx_enqueue = 1;
    9030:	2501      	movs	r5, #1
    9032:	e0b7      	b.n	91a4 <isr+0x1024>
			     !radio_ccm_mic_is_valid()) ||
    9034:	f002 fa92 	bl	b55c <radio_ccm_mic_is_valid>
			if ((_radio.conn_curr->enc_rx &&
    9038:	2800      	cmp	r0, #0
    903a:	d1eb      	bne.n	9014 <isr+0xe94>
				_radio.state = STATE_CLOSE;
    903c:	2403      	movs	r4, #3
    903e:	f88b 4014 	strb.w	r4, [fp, #20]
				radio_disable();
    9042:	f002 f827 	bl	b094 <radio_disable>
				LL_ASSERT(!radio_is_ready());
    9046:	f002 f843 	bl	b0d0 <radio_is_ready>
    904a:	4605      	mov	r5, r0
    904c:	b378      	cbz	r0, 90ae <isr+0xf2e>
    904e:	4aa2      	ldr	r2, [pc, #648]	; (92d8 <isr+0x1158>)
    9050:	f7ff b8ea 	b.w	8228 <isr+0xa8>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
    9054:	f003 0103 	and.w	r1, r3, #3
    9058:	2903      	cmp	r1, #3
    905a:	d1ef      	bne.n	903c <isr+0xebc>
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
    905c:	f994 001d 	ldrsb.w	r0, [r4, #29]
	u8_t opcode = pdu_data->llctrl.opcode;
    9060:	7af1      	ldrb	r1, [r6, #11]
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
    9062:	2800      	cmp	r0, #0
    9064:	f002 0240 	and.w	r2, r2, #64	; 0x40
    9068:	db15      	blt.n	9096 <isr+0xf16>
	       (!conn->role &&
    906a:	b922      	cbnz	r2, 9076 <isr+0xef6>
		((!conn->refresh &&
    906c:	2902      	cmp	r1, #2
    906e:	d0d9      	beq.n	9024 <isr+0xea4>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    9070:	2911      	cmp	r1, #17
    9072:	d8e3      	bhi.n	903c <isr+0xebc>
    9074:	e009      	b.n	908a <isr+0xf0a>
		 (conn->refresh &&
    9076:	1e8a      	subs	r2, r1, #2
    9078:	b2d2      	uxtb	r2, r2
    907a:	2a09      	cmp	r2, #9
    907c:	d8f8      	bhi.n	9070 <isr+0xef0>
    907e:	f240 2005 	movw	r0, #517	; 0x205
    9082:	fa20 f202 	lsr.w	r2, r0, r2
    9086:	07d0      	lsls	r0, r2, #31
    9088:	d4cc      	bmi.n	9024 <isr+0xea4>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    908a:	4a95      	ldr	r2, [pc, #596]	; (92e0 <isr+0x1160>)
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    908c:	fa22 f101 	lsr.w	r1, r2, r1
    9090:	07c9      	lsls	r1, r1, #31
    9092:	d5d3      	bpl.n	903c <isr+0xebc>
    9094:	e7c6      	b.n	9024 <isr+0xea4>
	       (conn->role &&
    9096:	b92a      	cbnz	r2, 90a4 <isr+0xf24>
		((!conn->refresh &&
    9098:	2902      	cmp	r1, #2
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    909a:	d0c3      	beq.n	9024 <isr+0xea4>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    909c:	2911      	cmp	r1, #17
    909e:	d8cd      	bhi.n	903c <isr+0xebc>
    90a0:	4a90      	ldr	r2, [pc, #576]	; (92e4 <isr+0x1164>)
    90a2:	e7f3      	b.n	908c <isr+0xf0c>
		 (conn->refresh &&
    90a4:	1e8a      	subs	r2, r1, #2
    90a6:	2a01      	cmp	r2, #1
    90a8:	d9bc      	bls.n	9024 <isr+0xea4>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    90aa:	290b      	cmp	r1, #11
    90ac:	e7f5      	b.n	909a <isr+0xf1a>
				terminate_ind_rx_enqueue(_radio.conn_curr,
    90ae:	f8db 06a8 	ldr.w	r0, [fp, #1704]	; 0x6a8
    90b2:	213d      	movs	r1, #61	; 0x3d
    90b4:	f7fd fd6e 	bl	6b94 <terminate_ind_rx_enqueue>
				connection_release(_radio.conn_curr);
    90b8:	f8db 06a8 	ldr.w	r0, [fp, #1704]	; 0x6a8
    90bc:	f7fd fb22 	bl	6704 <connection_release>
    90c0:	e6e3      	b.n	8e8a <isr+0xd0a>
	switch (pdu_data_rx->llctrl.opcode) {
    90c2:	7af5      	ldrb	r5, [r6, #11]
	pdu_data_rx = (void *)node_rx->pdu_data;
    90c4:	f106 0a08 	add.w	sl, r6, #8
	switch (pdu_data_rx->llctrl.opcode) {
    90c8:	2d19      	cmp	r5, #25
    90ca:	f200 8185 	bhi.w	93d8 <isr+0x1258>
    90ce:	e8df f015 	tbh	[pc, r5, lsl #1]
    90d2:	001a      	.short	0x001a
    90d4:	00b50081 	.word	0x00b50081
    90d8:	01830183 	.word	0x01830183
    90dc:	01830183 	.word	0x01830183
    90e0:	00c0017c 	.word	0x00c0017c
    90e4:	018300dd 	.word	0x018300dd
    90e8:	01110183 	.word	0x01110183
    90ec:	00d50183 	.word	0x00d50183
    90f0:	01830183 	.word	0x01830183
    90f4:	01830175 	.word	0x01830175
    90f8:	01830183 	.word	0x01830183
    90fc:	01830183 	.word	0x01830183
    9100:	01830183 	.word	0x01830183
    9104:	0197      	.short	0x0197
		if (!_radio.conn_curr->role ||
    9106:	f994 301d 	ldrsb.w	r3, [r4, #29]
    910a:	2b00      	cmp	r3, #0
    910c:	f280 8164 	bge.w	93d8 <isr+0x1258>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND,
    9110:	7a71      	ldrb	r1, [r6, #9]
    9112:	2000      	movs	r0, #0
    9114:	f7fc fbd6 	bl	58c4 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    9118:	2800      	cmp	r0, #0
    911a:	f000 815d 	beq.w	93d8 <isr+0x1258>
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    911e:	f8b6 1015 	ldrh.w	r1, [r6, #21]
	      conn->event_counter) & 0xFFFF) > 0x7FFF) {
    9122:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    9124:	1acb      	subs	r3, r1, r3
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    9126:	041a      	lsls	r2, r3, #16
    9128:	f100 83d9 	bmi.w	98de <isr+0x175e>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    912c:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    9130:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
    9134:	429a      	cmp	r2, r3
    9136:	d003      	beq.n	9140 <isr+0xfc0>
    9138:	4a6b      	ldr	r2, [pc, #428]	; (92e8 <isr+0x1168>)
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    913a:	496c      	ldr	r1, [pc, #432]	; (92ec <isr+0x116c>)
    913c:	f7ff bb63 	b.w	8806 <isr+0x686>
	if (_radio.conn_upd == 0) {
    9140:	f8db 2714 	ldr.w	r2, [fp, #1812]	; 0x714
    9144:	b90a      	cbnz	r2, 914a <isr+0xfca>
		_radio.conn_upd = conn;
    9146:	f8cb 4714 	str.w	r4, [fp, #1812]	; 0x714
	conn->llcp.conn_upd.win_size =
    914a:	7b32      	ldrb	r2, [r6, #12]
    914c:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
		pdu_data_rx->llctrl.conn_update_ind.win_offset * 1250;
    9150:	f8b6 000d 	ldrh.w	r0, [r6, #13]
    9154:	f240 42e2 	movw	r2, #1250	; 0x4e2
    9158:	4342      	muls	r2, r0
	conn->llcp.conn_upd.win_offset_us =
    915a:	66e2      	str	r2, [r4, #108]	; 0x6c
		pdu_data_rx->llctrl.conn_update_ind.interval;
    915c:	7c30      	ldrb	r0, [r6, #16]
    915e:	7bf2      	ldrb	r2, [r6, #15]
    9160:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.interval =
    9164:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
		pdu_data_rx->llctrl.conn_update_ind.latency;
    9168:	7cb0      	ldrb	r0, [r6, #18]
    916a:	7c72      	ldrb	r2, [r6, #17]
    916c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.latency =
    9170:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
		pdu_data_rx->llctrl.conn_update_ind.timeout;
    9174:	7cf2      	ldrb	r2, [r6, #19]
    9176:	7d30      	ldrb	r0, [r6, #20]
	conn->llcp.conn_upd.instant =
    9178:	f8a4 1068 	strh.w	r1, [r4, #104]	; 0x68
		pdu_data_rx->llctrl.conn_update_ind.timeout;
    917c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.timeout =
    9180:	f8a4 2066 	strh.w	r2, [r4, #102]	; 0x66
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    9184:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
	conn->llcp.conn_upd.is_internal = 0;
    9188:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    918c:	f36f 0282 	bfc	r2, #2, #1
    9190:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
	conn->llcp_ack--;
    9194:	3b01      	subs	r3, #1
	conn->llcp_type = LLCP_CONN_UPD;
    9196:	2201      	movs	r2, #1
			_radio.conn_curr->procedure_expire = 0;
    9198:	2500      	movs	r5, #0
	conn->llcp_type = LLCP_CONN_UPD;
    919a:	f884 205e 	strb.w	r2, [r4, #94]	; 0x5e
	conn->llcp_ack--;
    919e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			_radio.conn_curr->procedure_expire = 0;
    91a2:	86a5      	strh	r5, [r4, #52]	; 0x34
			_radio.conn_curr->nesn++;
    91a4:	f8db 16a8 	ldr.w	r1, [fp, #1704]	; 0x6a8
    91a8:	f891 30a8 	ldrb.w	r3, [r1, #168]	; 0xa8
    91ac:	f083 0302 	eor.w	r3, r3, #2
    91b0:	f881 30a8 	strb.w	r3, [r1, #168]	; 0xa8
			if (ccm_rx_increment) {
    91b4:	f1b9 0f00 	cmp.w	r9, #0
    91b8:	f43f ae9e 	beq.w	8ef8 <isr+0xd78>
				_radio.conn_curr->ccm_rx.counter++;
    91bc:	f8d1 20b9 	ldr.w	r2, [r1, #185]	; 0xb9
    91c0:	f8d1 30bd 	ldr.w	r3, [r1, #189]	; 0xbd
    91c4:	3201      	adds	r2, #1
    91c6:	f143 0300 	adc.w	r3, r3, #0
    91ca:	f8c1 20b9 	str.w	r2, [r1, #185]	; 0xb9
    91ce:	f8c1 30bd 	str.w	r3, [r1, #189]	; 0xbd
    91d2:	e691      	b.n	8ef8 <isr+0xd78>
		if (!_radio.conn_curr->role ||
    91d4:	f994 301d 	ldrsb.w	r3, [r4, #29]
    91d8:	2b00      	cmp	r3, #0
    91da:	f280 80fd 	bge.w	93d8 <isr+0x1258>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CHAN_MAP_IND,
    91de:	7a71      	ldrb	r1, [r6, #9]
    91e0:	2001      	movs	r0, #1
    91e2:	f7fc fb6f 	bl	58c4 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    91e6:	2800      	cmp	r0, #0
    91e8:	f000 80f6 	beq.w	93d8 <isr+0x1258>
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    91ec:	f8b6 3011 	ldrh.w	r3, [r6, #17]
	      conn->event_counter) & 0xffff) > 0x7fff) {
    91f0:	8c62      	ldrh	r2, [r4, #34]	; 0x22
    91f2:	1a9b      	subs	r3, r3, r2
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    91f4:	041b      	lsls	r3, r3, #16
    91f6:	f100 8372 	bmi.w	98de <isr+0x175e>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    91fa:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
    91fe:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
    9202:	429a      	cmp	r2, r3
    9204:	d001      	beq.n	920a <isr+0x108a>
    9206:	4a3a      	ldr	r2, [pc, #232]	; (92f0 <isr+0x1170>)
    9208:	e797      	b.n	913a <isr+0xfba>
	memcpy(&conn->llcp.chan_map.chm[0],
    920a:	2205      	movs	r2, #5
    920c:	f106 010c 	add.w	r1, r6, #12
    9210:	f104 0061 	add.w	r0, r4, #97	; 0x61
    9214:	f7f7 fa01 	bl	61a <memcpy>
		pdu_data_rx->llctrl.chan_map_ind.instant;
    9218:	7c73      	ldrb	r3, [r6, #17]
    921a:	7cb2      	ldrb	r2, [r6, #18]
    921c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp.chan_map.instant =
    9220:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
	conn->llcp_type = LLCP_CHAN_MAP;
    9224:	2302      	movs	r3, #2
    9226:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
	conn->llcp_ack--;
    922a:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
	conn->llcp.chan_map.initiate = 0;
    922e:	2500      	movs	r5, #0
	conn->llcp_ack--;
    9230:	3b01      	subs	r3, #1
	conn->llcp.chan_map.initiate = 0;
    9232:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
	conn->llcp_ack--;
    9236:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    923a:	e7b3      	b.n	91a4 <isr+0x1024>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_TERMINATE_IND,
    923c:	7a71      	ldrb	r1, [r6, #9]
    923e:	2002      	movs	r0, #2
    9240:	f7fc fb40 	bl	58c4 <pdu_len_cmp>
    9244:	2800      	cmp	r0, #0
    9246:	f000 80c7 	beq.w	93d8 <isr+0x1258>
		_radio.conn_curr->llcp_terminate.reason_peer =
    924a:	7b33      	ldrb	r3, [r6, #12]
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
    924c:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
    9250:	e0b9      	b.n	93c6 <isr+0x1246>
		if (!_radio.conn_curr->role ||
    9252:	f994 301d 	ldrsb.w	r3, [r4, #29]
    9256:	2b00      	cmp	r3, #0
    9258:	f280 80be 	bge.w	93d8 <isr+0x1258>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_REQ,
    925c:	7a71      	ldrb	r1, [r6, #9]
    925e:	2008      	movs	r0, #8
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    9260:	f7fc fb30 	bl	58c4 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    9264:	2800      	cmp	r0, #0
    9266:	f000 80b7 	beq.w	93d8 <isr+0x1258>
		nack = feature_rsp_send(_radio.conn_curr, pdu_data_rx);
    926a:	4651      	mov	r1, sl
    926c:	4620      	mov	r0, r4
    926e:	f7fe fa87 	bl	7780 <feature_rsp_send>
    9272:	4605      	mov	r5, r0
		if (!nack) {
    9274:	2800      	cmp	r0, #0
    9276:	f47f ae3e 	bne.w	8ef6 <isr+0xd76>
    927a:	e793      	b.n	91a4 <isr+0x1024>
		if (_radio.conn_curr->role ||
    927c:	f994 301d 	ldrsb.w	r3, [r4, #29]
    9280:	2b00      	cmp	r3, #0
    9282:	f2c0 80a9 	blt.w	93d8 <isr+0x1258>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    9286:	7a71      	ldrb	r1, [r6, #9]
    9288:	200e      	movs	r0, #14
    928a:	e7e9      	b.n	9260 <isr+0x10e0>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_RSP,
    928c:	7a71      	ldrb	r1, [r6, #9]
    928e:	2009      	movs	r0, #9
    9290:	f7fc fb18 	bl	58c4 <pdu_len_cmp>
    9294:	2800      	cmp	r0, #0
    9296:	f000 809f 	beq.w	93d8 <isr+0x1258>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    929a:	7b33      	ldrb	r3, [r6, #12]
	       (features[1] << 8) | (features[2] << 16);
    929c:	7b72      	ldrb	r2, [r6, #13]
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    929e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    92a2:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
    92a6:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
    92aa:	f043 0310 	orr.w	r3, r3, #16
    92ae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	       (features[1] << 8) | (features[2] << 16);
    92b2:	7bb2      	ldrb	r2, [r6, #14]
    92b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    92b8:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
    92bc:	f3c2 0210 	ubfx	r2, r2, #0, #17
    92c0:	4013      	ands	r3, r2
    92c2:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		_radio.conn_curr->common.fex_valid = 1;
    92c6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    92ca:	f043 0320 	orr.w	r3, r3, #32
    92ce:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		_radio.conn_curr->procedure_expire = 0;
    92d2:	2300      	movs	r3, #0
    92d4:	86a3      	strh	r3, [r4, #52]	; 0x34
    92d6:	e6ab      	b.n	9030 <isr+0xeb0>
    92d8:	0000e310 	.word	0x0000e310
    92dc:	0000e865 	.word	0x0000e865
    92e0:	00022060 	.word	0x00022060
    92e4:	00022040 	.word	0x00022040
    92e8:	0000e638 	.word	0x0000e638
    92ec:	0000e87f 	.word	0x0000e87f
    92f0:	0000e644 	.word	0x0000e644
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_VERSION_IND,
    92f4:	7a71      	ldrb	r1, [r6, #9]
    92f6:	200c      	movs	r0, #12
    92f8:	f7fc fae4 	bl	58c4 <pdu_len_cmp>
    92fc:	2800      	cmp	r0, #0
    92fe:	d06b      	beq.n	93d8 <isr+0x1258>
	if (!conn->llcp_version.tx) {
    9300:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
    9304:	f013 0501 	ands.w	r5, r3, #1
    9308:	d152      	bne.n	93b0 <isr+0x1230>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    930a:	48b7      	ldr	r0, [pc, #732]	; (95e8 <isr+0x1468>)
    930c:	f7fa fb69 	bl	39e2 <mem_acquire>
		if (!node_tx) {
    9310:	4601      	mov	r1, r0
    9312:	2800      	cmp	r0, #0
    9314:	f43f adef 	beq.w	8ef6 <isr+0xd76>
		conn->llcp_version.tx = 1;
    9318:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
    931c:	f043 0301 	orr.w	r3, r3, #1
    9320:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    9324:	7903      	ldrb	r3, [r0, #4]
    9326:	f043 0303 	orr.w	r3, r3, #3
    932a:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    932c:	2306      	movs	r3, #6
    932e:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    9330:	230c      	movs	r3, #12
    9332:	71c3      	strb	r3, [r0, #7]
		v->version_number = RADIO_BLE_VERSION_NUMBER;
    9334:	2309      	movs	r3, #9
    9336:	7203      	strb	r3, [r0, #8]
		v->company_id =	RADIO_BLE_COMPANY_ID;
    9338:	f06f 030e 	mvn.w	r3, #14
    933c:	7243      	strb	r3, [r0, #9]
    933e:	2305      	movs	r3, #5
    9340:	7283      	strb	r3, [r0, #10]
		v->sub_version_number =	RADIO_BLE_SUB_VERSION_NUMBER;
    9342:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9346:	72c3      	strb	r3, [r0, #11]
    9348:	7303      	strb	r3, [r0, #12]
		ctrl_tx_sec_enqueue(conn, node_tx);
    934a:	4620      	mov	r0, r4
    934c:	f7fe f9fe 	bl	774c <ctrl_tx_sec_enqueue>
	conn->empty = 1;
    9350:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    9354:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    9358:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
	pdu_data_tx = (void *)radio_pkt_empty_get();
    935c:	f001 feec 	bl	b138 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    9360:	7803      	ldrb	r3, [r0, #0]
	pdu_data_tx->len = 0;
    9362:	7045      	strb	r5, [r0, #1]
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    9364:	2201      	movs	r2, #1
    9366:	f362 0301 	bfi	r3, r2, #0, #2
	if (conn->pkt_tx_head) {
    936a:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    936e:	7003      	strb	r3, [r0, #0]
    9370:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
    9372:	b1c2      	cbz	r2, 93a6 <isr+0x1226>
		pdu_data_tx->md = 1;
    9374:	f043 0310 	orr.w	r3, r3, #16
    9378:	7003      	strb	r3, [r0, #0]
	conn->llcp_version.version_number = v->version_number;
    937a:	7b33      	ldrb	r3, [r6, #12]
    937c:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
	conn->llcp_version.company_id = v->company_id;
    9380:	7bb2      	ldrb	r2, [r6, #14]
    9382:	7b73      	ldrb	r3, [r6, #13]
    9384:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    9388:	f8a4 3092 	strh.w	r3, [r4, #146]	; 0x92
	conn->llcp_version.sub_version_number = v->sub_version_number;
    938c:	7bf3      	ldrb	r3, [r6, #15]
    938e:	7c32      	ldrb	r2, [r6, #16]
    9390:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    9394:	f8a4 3094 	strh.w	r3, [r4, #148]	; 0x94
	conn->llcp_version.rx = 1;
    9398:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
    939c:	f043 0302 	orr.w	r3, r3, #2
    93a0:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    93a4:	e6fe      	b.n	91a4 <isr+0x1024>
		pdu_data_tx->md = 0;
    93a6:	f362 1304 	bfi	r3, r2, #4, #1
    93aa:	7003      	strb	r3, [r0, #0]
	u8_t rx_enqueue = 0;
    93ac:	4615      	mov	r5, r2
    93ae:	e7e4      	b.n	937a <isr+0x11fa>
	} else if (!conn->llcp_version.rx) {
    93b0:	f013 0302 	ands.w	r3, r3, #2
    93b4:	d107      	bne.n	93c6 <isr+0x1246>
		conn->procedure_expire = 0;
    93b6:	86a3      	strh	r3, [r4, #52]	; 0x34
		*rx_enqueue = 1;
    93b8:	2501      	movs	r5, #1
    93ba:	e7de      	b.n	937a <isr+0x11fa>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND,
    93bc:	7a71      	ldrb	r1, [r6, #9]
    93be:	2011      	movs	r0, #17
    93c0:	f7fc fa80 	bl	58c4 <pdu_len_cmp>
    93c4:	b140      	cbz	r0, 93d8 <isr+0x1258>
	u8_t rx_enqueue = 0;
    93c6:	2500      	movs	r5, #0
    93c8:	e6ec      	b.n	91a4 <isr+0x1024>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP,
    93ca:	7a71      	ldrb	r1, [r6, #9]
    93cc:	2007      	movs	r0, #7
    93ce:	f7fc fa79 	bl	58c4 <pdu_len_cmp>
    93d2:	2800      	cmp	r0, #0
    93d4:	f47f af7d 	bne.w	92d2 <isr+0x1152>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    93d8:	4883      	ldr	r0, [pc, #524]	; (95e8 <isr+0x1468>)
    93da:	f7fa fb02 	bl	39e2 <mem_acquire>
	if (!node_tx) {
    93de:	4601      	mov	r1, r0
    93e0:	2800      	cmp	r0, #0
    93e2:	f43f ad88 	beq.w	8ef6 <isr+0xd76>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    93e6:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.unknown_rsp.type = type;
    93e8:	7205      	strb	r5, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    93ea:	f043 0303 	orr.w	r3, r3, #3
    93ee:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
    93f0:	2302      	movs	r3, #2
    93f2:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
    93f4:	2307      	movs	r3, #7
    93f6:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, node_tx);
    93f8:	4620      	mov	r0, r4
    93fa:	f7fe f979 	bl	76f0 <ctrl_tx_enqueue>
    93fe:	e7e2      	b.n	93c6 <isr+0x1246>
		if (_radio.conn_curr->role ||
    9400:	f994 301d 	ldrsb.w	r3, [r4, #29]
    9404:	2b00      	cmp	r3, #0
    9406:	dbe7      	blt.n	93d8 <isr+0x1258>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND,
    9408:	7a71      	ldrb	r1, [r6, #9]
    940a:	2019      	movs	r0, #25
    940c:	f7fc fa5a 	bl	58c4 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    9410:	2800      	cmp	r0, #0
    9412:	d0e1      	beq.n	93d8 <isr+0x1258>
			if (!(p->phys & 0x01)) {
    9414:	7b35      	ldrb	r5, [r6, #12]
    9416:	f015 0501 	ands.w	r5, r5, #1
    941a:	f43f aec3 	beq.w	91a4 <isr+0x1024>
			if (conn->llcp_req != conn->llcp_ack) {
    941e:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
    9422:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
    9426:	429a      	cmp	r2, r3
    9428:	d1cd      	bne.n	93c6 <isr+0x1246>
			memcpy(&conn->llcp.chan_map.chm[0],
    942a:	2205      	movs	r2, #5
    942c:	496f      	ldr	r1, [pc, #444]	; (95ec <isr+0x146c>)
    942e:	f104 0061 	add.w	r0, r4, #97	; 0x61
    9432:	f7f7 f8f2 	bl	61a <memcpy>
			conn->llcp.chan_map.initiate = 1;
    9436:	2301      	movs	r3, #1
    9438:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
			conn->llcp_type = LLCP_CHAN_MAP;
    943c:	2302      	movs	r3, #2
    943e:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
			conn->llcp_ack--;
    9442:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
    9446:	3b01      	subs	r3, #1
    9448:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    944c:	e7bb      	b.n	93c6 <isr+0x1246>
		if (_radio.crc_expire == 0) {
    944e:	f89b 36ad 	ldrb.w	r3, [fp, #1709]	; 0x6ad
    9452:	b913      	cbnz	r3, 945a <isr+0x12da>
			_radio.crc_expire = 2;
    9454:	2302      	movs	r3, #2
    9456:	f88b 36ad 	strb.w	r3, [fp, #1709]	; 0x6ad
		_radio.crc_expire--;
    945a:	f89b 46ad 	ldrb.w	r4, [fp, #1709]	; 0x6ad
		if (!_radio.conn_curr->supervision_expire) {
    945e:	f8db 36a8 	ldr.w	r3, [fp, #1704]	; 0x6a8
		_radio.crc_expire--;
    9462:	3c01      	subs	r4, #1
    9464:	b2e4      	uxtb	r4, r4
    9466:	f88b 46ad 	strb.w	r4, [fp, #1709]	; 0x6ad
		if (!_radio.conn_curr->supervision_expire) {
    946a:	8e1d      	ldrh	r5, [r3, #48]	; 0x30
		crc_close = (_radio.crc_expire == 0);
    946c:	fab4 f484 	clz	r4, r4
    9470:	0964      	lsrs	r4, r4, #5
		if (!_radio.conn_curr->supervision_expire) {
    9472:	b91d      	cbnz	r5, 947c <isr+0x12fc>
			_radio.conn_curr->supervision_expire =
    9474:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
    9476:	861a      	strh	r2, [r3, #48]	; 0x30
	struct radio_pdu_node_tx *tx_release = NULL;
    9478:	46a8      	mov	r8, r5
    947a:	e543      	b.n	8f04 <isr+0xd84>
	u8_t rx_enqueue = 0;
    947c:	2500      	movs	r5, #0
    947e:	e7fb      	b.n	9478 <isr+0x12f8>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    9480:	2303      	movs	r3, #3
    9482:	e560      	b.n	8f46 <isr+0xdc6>
			radio_switch_complete_and_disable();
    9484:	f001 fe76 	bl	b174 <radio_switch_complete_and_disable>
	pdu_data_tx->sn = _radio.conn_curr->sn;
    9488:	990d      	ldr	r1, [sp, #52]	; 0x34
    948a:	f8db 06a8 	ldr.w	r0, [fp, #1704]	; 0x6a8
    948e:	780b      	ldrb	r3, [r1, #0]
    9490:	f890 20a8 	ldrb.w	r2, [r0, #168]	; 0xa8
    9494:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
    9498:	f3c2 0240 	ubfx	r2, r2, #1, #1
    949c:	f362 0382 	bfi	r3, r2, #2, #1
    94a0:	700b      	strb	r3, [r1, #0]
	tx_packet_set(_radio.conn_curr, pdu_data_tx);
    94a2:	f7fd f9c1 	bl	6828 <tx_packet_set>
	LL_ASSERT(!radio_is_ready());
    94a6:	f001 fe13 	bl	b0d0 <radio_is_ready>
    94aa:	2800      	cmp	r0, #0
    94ac:	f43f acef 	beq.w	8e8e <isr+0xd0e>
    94b0:	4a4f      	ldr	r2, [pc, #316]	; (95f0 <isr+0x1470>)
    94b2:	f7fe beb9 	b.w	8228 <isr+0xa8>
		radio_tmr_tifs_set(RADIO_TIFS);
    94b6:	2096      	movs	r0, #150	; 0x96
    94b8:	f001 fed6 	bl	b268 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    94bc:	2000      	movs	r0, #0
    94be:	f001 fe43 	bl	b148 <radio_switch_complete_and_rx>
		radio_tmr_end_capture();
    94c2:	f001 ffad 	bl	b420 <radio_tmr_end_capture>
    94c6:	e7df      	b.n	9488 <isr+0x1308>
		LL_ASSERT(0);
    94c8:	4a4a      	ldr	r2, [pc, #296]	; (95f4 <isr+0x1474>)
    94ca:	f7fe bf07 	b.w	82dc <isr+0x15c>
	switch (_radio.role) {
    94ce:	f89b 2013 	ldrb.w	r2, [fp, #19]
    94d2:	2a04      	cmp	r2, #4
    94d4:	f200 81f0 	bhi.w	98b8 <isr+0x1738>
    94d8:	e8df f012 	tbh	[pc, r2, lsl #1]
    94dc:	000501e2 	.word	0x000501e2
    94e0:	00f000c4 	.word	0x00f000c4
    94e4:	00f0      	.short	0x00f0
	if ((_radio.state == STATE_CLOSE) &&
    94e6:	2b03      	cmp	r3, #3
    94e8:	d109      	bne.n	94fe <isr+0x137e>
	    (_radio.advertiser.chan_map_current != 0)) {
    94ea:	f89b 3028 	ldrb.w	r3, [fp, #40]	; 0x28
	if ((_radio.state == STATE_CLOSE) &&
    94ee:	075e      	lsls	r6, r3, #29
    94f0:	d005      	beq.n	94fe <isr+0x137e>
		adv_setup();
    94f2:	f7fc fcff 	bl	5ef4 <adv_setup>
		radio_tx_enable();
    94f6:	f001 fdc7 	bl	b088 <radio_tx_enable>
    94fa:	f7fe bea2 	b.w	8242 <isr+0xc2>
	}else if(_radio.advertiser.ext_adv == 1){
    94fe:	f89b 3029 	ldrb.w	r3, [fp, #41]	; 0x29
    9502:	07dd      	lsls	r5, r3, #31
    9504:	d51e      	bpl.n	9544 <isr+0x13c4>
		radio_filter_disable();
    9506:	f001 fe7f 	bl	b208 <radio_filter_disable>
		_radio.advertiser.ext_adv = 0;
    950a:	f89b 3029 	ldrb.w	r3, [fp, #41]	; 0x29
    950e:	f36f 0300 	bfc	r3, #0, #1
    9512:	f88b 3029 	strb.w	r3, [fp, #41]	; 0x29
	_radio.role = ROLE_NONE;
    9516:	2400      	movs	r4, #0
    9518:	f88b 4013 	strb.w	r4, [fp, #19]
	_radio.state = STATE_NONE;
    951c:	f88b 4014 	strb.w	r4, [fp, #20]
	_radio.ticker_id_event = 0;
    9520:	f88b 4011 	strb.w	r4, [fp, #17]
	radio_tmr_stop();
    9524:	f001 ff1e 	bl	b364 <radio_tmr_stop>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    9528:	4622      	mov	r2, r4
    952a:	4621      	mov	r1, r4
    952c:	4620      	mov	r0, r4
    952e:	4b32      	ldr	r3, [pc, #200]	; (95f8 <isr+0x1478>)
    9530:	f7fa fb10 	bl	3b54 <mayfly_enqueue>
	LL_ASSERT(!retval);
    9534:	4604      	mov	r4, r0
    9536:	2800      	cmp	r0, #0
    9538:	f000 81c1 	beq.w	98be <isr+0x173e>
    953c:	4a2f      	ldr	r2, [pc, #188]	; (95fc <isr+0x147c>)
    953e:	4930      	ldr	r1, [pc, #192]	; (9600 <isr+0x1480>)
    9540:	f7ff b961 	b.w	8806 <isr+0x686>
		radio_filter_disable();
    9544:	f001 fe60 	bl	b208 <radio_filter_disable>
		if ((_radio.state == STATE_CLOSE) &&
    9548:	f89b 5014 	ldrb.w	r5, [fp, #20]
    954c:	2d03      	cmp	r5, #3
    954e:	d1e2      	bne.n	9516 <isr+0x1396>
		    (!_radio.advertiser.is_hdcd)) {
    9550:	f89b 4028 	ldrb.w	r4, [fp, #40]	; 0x28
		if ((_radio.state == STATE_CLOSE) &&
    9554:	f014 0440 	ands.w	r4, r4, #64	; 0x40
    9558:	d1dd      	bne.n	9516 <isr+0x1396>
			entropy_get_entropy_isr(_radio.entropy, &random_delay,
    955a:	2202      	movs	r2, #2
    955c:	a90d      	add	r1, sp, #52	; 0x34
    955e:	f8db 0004 	ldr.w	r0, [fp, #4]
					HAL_TICKER_US_TO_TICKS(random_delay *
    9562:	4e28      	ldr	r6, [pc, #160]	; (9604 <isr+0x1484>)
			ticker_status =
    9564:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 9610 <isr+0x1490>
			entropy_get_entropy_isr(_radio.entropy, &random_delay,
    9568:	f7f8 fc38 	bl	1ddc <entropy_get_entropy_isr>
			random_delay %= 10;
    956c:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
    9570:	230a      	movs	r3, #10
    9572:	fbb1 f2f3 	udiv	r2, r1, r3
    9576:	fb03 1212 	mls	r2, r3, r2, r1
			random_delay += 1;
    957a:	3201      	adds	r2, #1
			_radio.ext_advertiser.slot =  _radio.ext_advertiser.prim_interval + random_delay* 1000;
    957c:	f8db 1678 	ldr.w	r1, [fp, #1656]	; 0x678
			random_delay += 1;
    9580:	b292      	uxth	r2, r2
			_radio.ext_advertiser.slot =  _radio.ext_advertiser.prim_interval + random_delay* 1000;
    9582:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    9586:	fb03 1302 	mla	r3, r3, r2, r1
			random_delay += 1;
    958a:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
					HAL_TICKER_US_TO_TICKS(random_delay *
    958e:	b292      	uxth	r2, r2
    9590:	fba2 0106 	umull	r0, r1, r2, r6
    9594:	27e8      	movs	r7, #232	; 0xe8
			_radio.ext_advertiser.slot =  _radio.ext_advertiser.prim_interval + random_delay* 1000;
    9596:	f8cb 3684 	str.w	r3, [fp, #1668]	; 0x684
					HAL_TICKER_US_TO_TICKS(random_delay *
    959a:	fb07 1102 	mla	r1, r7, r2, r1
    959e:	a310      	add	r3, pc, #64	; (adr r3, 95e0 <isr+0x1460>)
    95a0:	e9d3 2300 	ldrd	r2, r3, [r3]
    95a4:	f7f6 fe60 	bl	268 <__aeabi_uldivmod>
			ticker_status =
    95a8:	f241 0321 	movw	r3, #4129	; 0x1021
    95ac:	9306      	str	r3, [sp, #24]
    95ae:	9404      	str	r4, [sp, #16]
    95b0:	9403      	str	r4, [sp, #12]
    95b2:	9402      	str	r4, [sp, #8]
    95b4:	9401      	str	r4, [sp, #4]
    95b6:	9400      	str	r4, [sp, #0]
    95b8:	b283      	uxth	r3, r0
    95ba:	4621      	mov	r1, r4
    95bc:	4620      	mov	r0, r4
    95be:	f8cd 8014 	str.w	r8, [sp, #20]
    95c2:	2205      	movs	r2, #5
    95c4:	f7fb f8ca 	bl	475c <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    95c8:	4604      	mov	r4, r0
    95ca:	b318      	cbz	r0, 9614 <isr+0x1494>
    95cc:	2802      	cmp	r0, #2
    95ce:	d0a2      	beq.n	9516 <isr+0x1396>
    95d0:	f89b 3012 	ldrb.w	r3, [fp, #18]
    95d4:	2b05      	cmp	r3, #5
    95d6:	d09e      	beq.n	9516 <isr+0x1396>
    95d8:	4a0b      	ldr	r2, [pc, #44]	; (9608 <isr+0x1488>)
    95da:	490c      	ldr	r1, [pc, #48]	; (960c <isr+0x148c>)
    95dc:	f7ff b913 	b.w	8806 <isr+0x686>
    95e0:	1afd498d 	.word	0x1afd498d
    95e4:	00000007 	.word	0x00000007
    95e8:	200010e0 	.word	0x200010e0
    95ec:	200010a6 	.word	0x200010a6
    95f0:	0000e320 	.word	0x0000e320
    95f4:	0000e32c 	.word	0x0000e32c
    95f8:	20004d30 	.word	0x20004d30
    95fc:	0000e410 	.word	0x0000e410
    9600:	0000e810 	.word	0x0000e810
    9604:	d4a51000 	.word	0xd4a51000
    9608:	0000e33f 	.word	0x0000e33f
    960c:	0000e8b5 	.word	0x0000e8b5
    9610:	0000636d 	.word	0x0000636d
						HAL_TICKER_US_TO_TICKS(random_delay *
    9614:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
    9618:	fba2 0106 	umull	r0, r1, r2, r6
    961c:	fb07 1102 	mla	r1, r7, r2, r1
    9620:	a3b1      	add	r3, pc, #708	; (adr r3, 98e8 <isr+0x1768>)
    9622:	e9d3 2300 	ldrd	r2, r3, [r3]
    9626:	f7f6 fe1f 	bl	268 <__aeabi_uldivmod>
				ticker_status1 =
    962a:	f241 0330 	movw	r3, #4144	; 0x1030
    962e:	9306      	str	r3, [sp, #24]
    9630:	f8cd 8014 	str.w	r8, [sp, #20]
    9634:	b283      	uxth	r3, r0
    9636:	9404      	str	r4, [sp, #16]
    9638:	9403      	str	r4, [sp, #12]
    963a:	9402      	str	r4, [sp, #8]
    963c:	9401      	str	r4, [sp, #4]
    963e:	9400      	str	r4, [sp, #0]
    9640:	462a      	mov	r2, r5
    9642:	4621      	mov	r1, r4
    9644:	4620      	mov	r0, r4
    9646:	f7fb f889 	bl	475c <ticker_update>
				LL_ASSERT((ticker_status1 == TICKER_STATUS_SUCCESS) ||
    964a:	f030 0302 	bics.w	r3, r0, #2
    964e:	f43f af62 	beq.w	9516 <isr+0x1396>
    9652:	f89b 3012 	ldrb.w	r3, [fp, #18]
    9656:	2b03      	cmp	r3, #3
    9658:	f43f af5d 	beq.w	9516 <isr+0x1396>
    965c:	4aa4      	ldr	r2, [pc, #656]	; (98f0 <isr+0x1770>)
    965e:	49a5      	ldr	r1, [pc, #660]	; (98f4 <isr+0x1774>)
    9660:	f7ff b8d1 	b.w	8806 <isr+0x686>
	if (_radio.state == STATE_CLOSE) {
    9664:	2b03      	cmp	r3, #3
    9666:	d11a      	bne.n	969e <isr+0x151e>
		radio_tmr_tifs_set(RADIO_TIFS);
    9668:	2096      	movs	r0, #150	; 0x96
    966a:	f001 fdfd 	bl	b268 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    966e:	2300      	movs	r3, #0
    9670:	4619      	mov	r1, r3
    9672:	461a      	mov	r2, r3
    9674:	4618      	mov	r0, r3
    9676:	f001 fd73 	bl	b160 <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
    967a:	f8db 36c8 	ldr.w	r3, [fp, #1736]	; 0x6c8
    967e:	f89b 26cd 	ldrb.w	r2, [fp, #1741]	; 0x6cd
		radio_pkt_rx_set(_radio.packet_rx
    9682:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    9686:	3008      	adds	r0, #8
    9688:	f001 fcde 	bl	b048 <radio_pkt_rx_set>
		radio_rssi_measure();
    968c:	f001 fd80 	bl	b190 <radio_rssi_measure>
		_radio.state = STATE_RX;
    9690:	2301      	movs	r3, #1
    9692:	f88b 3014 	strb.w	r3, [fp, #20]
		radio_rx_enable();
    9696:	f001 fcf1 	bl	b07c <radio_rx_enable>
    969a:	f7fe bdd2 	b.w	8242 <isr+0xc2>
		radio_filter_disable();
    969e:	f001 fdb3 	bl	b208 <radio_filter_disable>
		if (_radio.state == STATE_ABORT) {
    96a2:	f89b 3014 	ldrb.w	r3, [fp, #20]
    96a6:	2b05      	cmp	r3, #5
    96a8:	f47f af35 	bne.w	9516 <isr+0x1396>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    96ac:	2300      	movs	r3, #0
    96ae:	9300      	str	r3, [sp, #0]
    96b0:	2204      	movs	r2, #4
    96b2:	4619      	mov	r1, r3
    96b4:	4618      	mov	r0, r3
    96b6:	f7fb f89f 	bl	47f8 <ticker_stop>
    96ba:	e72c      	b.n	9516 <isr+0x1396>
	if (_radio.conn_curr == 0) {
    96bc:	f8db 06a8 	ldr.w	r0, [fp, #1704]	; 0x6a8
    96c0:	2800      	cmp	r0, #0
    96c2:	f43f af28 	beq.w	9516 <isr+0x1396>
	reason_peer = _radio.conn_curr->llcp_terminate.reason_peer;
    96c6:	f890 109b 	ldrb.w	r1, [r0, #155]	; 0x9b
	if (reason_peer && ((_radio.role == ROLE_SLAVE) ||
    96ca:	b189      	cbz	r1, 96f0 <isr+0x1570>
    96cc:	f89b 3013 	ldrb.w	r3, [fp, #19]
    96d0:	2b03      	cmp	r3, #3
    96d2:	d003      	beq.n	96dc <isr+0x155c>
    96d4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    96d8:	07dc      	lsls	r4, r3, #31
    96da:	d509      	bpl.n	96f0 <isr+0x1570>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
    96dc:	f7fd fa5a 	bl	6b94 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    96e0:	f8db 06a8 	ldr.w	r0, [fp, #1704]	; 0x6a8
    96e4:	f7fd f80e 	bl	6704 <connection_release>
			_radio.conn_curr = NULL;
    96e8:	2300      	movs	r3, #0
    96ea:	f8cb 36a8 	str.w	r3, [fp, #1704]	; 0x6a8
    96ee:	e712      	b.n	9516 <isr+0x1396>
	latency_event = _radio.conn_curr->latency_event;
    96f0:	8d46      	ldrh	r6, [r0, #42]	; 0x2a
	if (_radio.packet_counter &&
    96f2:	f89b 76ac 	ldrb.w	r7, [fp, #1708]	; 0x6ac
	elapsed_event = latency_event + 1;
    96f6:	1c75      	adds	r5, r6, #1
    96f8:	b2ad      	uxth	r5, r5
	if (_radio.packet_counter &&
    96fa:	2f00      	cmp	r7, #0
    96fc:	d06c      	beq.n	97d8 <isr+0x1658>
		if (_radio.role == ROLE_SLAVE) {
    96fe:	f89b 3013 	ldrb.w	r3, [fp, #19]
    9702:	2b03      	cmp	r3, #3
    9704:	d15c      	bne.n	97c0 <isr+0x1640>
			start_to_address_actual_us = radio_tmr_aa_restore() -
    9706:	f001 fe7f 	bl	b408 <radio_tmr_aa_restore>
    970a:	4680      	mov	r8, r0
						     radio_tmr_ready_get();
    970c:	f001 fe82 	bl	b414 <radio_tmr_ready_get>
				_radio.conn_curr->slave.window_widening_event_us;
    9710:	f8db 76a8 	ldr.w	r7, [fp, #1704]	; 0x6a8
    9714:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 9910 <isr+0x1790>
			start_to_address_actual_us = radio_tmr_aa_restore() -
    9718:	eba8 0800 	sub.w	r8, r8, r0
			window_widening_event_us =
    971c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
    971e:	f100 0a58 	add.w	sl, r0, #88	; 0x58
			if (start_to_address_actual_us <=
    9722:	45d0      	cmp	r8, sl
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    9724:	a370      	add	r3, pc, #448	; (adr r3, 98e8 <isr+0x1768>)
    9726:	e9d3 2300 	ldrd	r2, r3, [r3]
			if (start_to_address_actual_us <=
    972a:	d83c      	bhi.n	97a6 <isr+0x1626>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    972c:	fba0 0109 	umull	r0, r1, r0, r9
    9730:	f7f6 fd9a 	bl	268 <__aeabi_uldivmod>
    9734:	b284      	uxth	r4, r0
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    9736:	ebaa 0008 	sub.w	r0, sl, r8
    973a:	a36b      	add	r3, pc, #428	; (adr r3, 98e8 <isr+0x1768>)
    973c:	e9d3 2300 	ldrd	r2, r3, [r3]
    9740:	fba0 0109 	umull	r0, r1, r0, r9
    9744:	f7f6 fd90 	bl	268 <__aeabi_uldivmod>
    9748:	b283      	uxth	r3, r0
			_radio.conn_curr->slave.window_widening_event_us = 0;
    974a:	2200      	movs	r2, #0
    974c:	64ba      	str	r2, [r7, #72]	; 0x48
			_radio.conn_curr->slave.window_size_event_us = 0;
    974e:	653a      	str	r2, [r7, #80]	; 0x50
			if (_radio.conn_curr->pkt_tx_head) {
    9750:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
    9754:	b372      	cbz	r2, 97b4 <isr+0x1634>
				if (pdu_data_tx->len ||
    9756:	7952      	ldrb	r2, [r2, #5]
    9758:	b912      	cbnz	r2, 9760 <isr+0x15e0>
    975a:	f897 2101 	ldrb.w	r2, [r7, #257]	; 0x101
    975e:	b10a      	cbz	r2, 9764 <isr+0x15e4>
					_radio.conn_curr->latency_event = 0;
    9760:	2200      	movs	r2, #0
				_radio.conn_curr->latency_event =
    9762:	857a      	strh	r2, [r7, #42]	; 0x2a
		_radio.conn_curr->connect_expire = 0;
    9764:	f8db 26a8 	ldr.w	r2, [fp, #1704]	; 0x6a8
    9768:	2100      	movs	r1, #0
    976a:	8591      	strh	r1, [r2, #44]	; 0x2c
	if (_radio.conn_curr->supervision_expire) {
    976c:	f8db 06a8 	ldr.w	r0, [fp, #1704]	; 0x6a8
    9770:	8e02      	ldrh	r2, [r0, #48]	; 0x30
    9772:	b1b2      	cbz	r2, 97a2 <isr+0x1622>
		if (_radio.conn_curr->supervision_expire > elapsed_event) {
    9774:	4295      	cmp	r5, r2
    9776:	f080 808b 	bcs.w	9890 <isr+0x1710>
			_radio.conn_curr->supervision_expire -= elapsed_event;
    977a:	1b52      	subs	r2, r2, r5
    977c:	b292      	uxth	r2, r2
			_radio.conn_curr->latency_event = 0;
    977e:	2100      	movs	r1, #0
			if (_radio.conn_curr->supervision_expire <= 6) {
    9780:	2a06      	cmp	r2, #6
			_radio.conn_curr->supervision_expire -= elapsed_event;
    9782:	8602      	strh	r2, [r0, #48]	; 0x30
			_radio.conn_curr->latency_event = 0;
    9784:	8541      	strh	r1, [r0, #42]	; 0x2a
			if (_radio.conn_curr->supervision_expire <= 6) {
    9786:	f240 8085 	bls.w	9894 <isr+0x1714>
			else if (_radio.role == ROLE_SLAVE) {
    978a:	f89b 2013 	ldrb.w	r2, [fp, #19]
    978e:	2a03      	cmp	r2, #3
    9790:	d107      	bne.n	97a2 <isr+0x1622>
				if (latency_event != 0) {
    9792:	2e00      	cmp	r6, #0
    9794:	d17e      	bne.n	9894 <isr+0x1714>
					force = _radio.conn_curr->slave.force & 0x01;
    9796:	6d47      	ldr	r7, [r0, #84]	; 0x54
					_radio.conn_curr->slave.force >>= 1;
    9798:	087a      	lsrs	r2, r7, #1
					if (force) {
    979a:	f017 0701 	ands.w	r7, r7, #1
    979e:	d135      	bne.n	980c <isr+0x168c>
					_radio.conn_curr->slave.force >>= 1;
    97a0:	6542      	str	r2, [r0, #84]	; 0x54
	force = 0;
    97a2:	2700      	movs	r7, #0
    97a4:	e035      	b.n	9812 <isr+0x1692>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    97a6:	fba8 0109 	umull	r0, r1, r8, r9
    97aa:	f7f6 fd5d 	bl	268 <__aeabi_uldivmod>
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    97ae:	2302      	movs	r3, #2
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    97b0:	b284      	uxth	r4, r0
    97b2:	e7ca      	b.n	974a <isr+0x15ca>
			} else if (_radio.conn_curr->slave.latency_enabled) {
    97b4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
    97b8:	07d2      	lsls	r2, r2, #31
    97ba:	d5d3      	bpl.n	9764 <isr+0x15e4>
				_radio.conn_curr->latency_event =
    97bc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    97be:	e7d0      	b.n	9762 <isr+0x15e2>
		} else if (reason_peer) {
    97c0:	b141      	cbz	r1, 97d4 <isr+0x1654>
			_radio.conn_curr->master.terminate_ack = 1;
    97c2:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    97c6:	f043 0301 	orr.w	r3, r3, #1
    97ca:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
	ticks_drift_minus = 0;
    97ce:	2300      	movs	r3, #0
	ticks_drift_plus = 0;
    97d0:	461c      	mov	r4, r3
    97d2:	e7c7      	b.n	9764 <isr+0x15e4>
	ticks_drift_minus = 0;
    97d4:	460b      	mov	r3, r1
    97d6:	e7fb      	b.n	97d0 <isr+0x1650>
	else if (_radio.conn_curr->connect_expire) {
    97d8:	8d84      	ldrh	r4, [r0, #44]	; 0x2c
    97da:	b184      	cbz	r4, 97fe <isr+0x167e>
		if (_radio.conn_curr->connect_expire > elapsed_event) {
    97dc:	42a5      	cmp	r5, r4
    97de:	d204      	bcs.n	97ea <isr+0x166a>
			_radio.conn_curr->connect_expire -= elapsed_event;
    97e0:	1b64      	subs	r4, r4, r5
    97e2:	8584      	strh	r4, [r0, #44]	; 0x2c
	ticks_drift_minus = 0;
    97e4:	463c      	mov	r4, r7
    97e6:	4623      	mov	r3, r4
    97e8:	e7c0      	b.n	976c <isr+0x15ec>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x3e);
    97ea:	213e      	movs	r1, #62	; 0x3e
    97ec:	f7fd f9d2 	bl	6b94 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    97f0:	f8db 06a8 	ldr.w	r0, [fp, #1704]	; 0x6a8
    97f4:	f7fc ff86 	bl	6704 <connection_release>
			_radio.conn_curr = NULL;
    97f8:	f8cb 76a8 	str.w	r7, [fp, #1704]	; 0x6a8
    97fc:	e68b      	b.n	9516 <isr+0x1396>
		if (!_radio.conn_curr->supervision_expire) {
    97fe:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    9800:	2b00      	cmp	r3, #0
    9802:	d1f0      	bne.n	97e6 <isr+0x1666>
			_radio.conn_curr->supervision_expire =
    9804:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    9806:	8602      	strh	r2, [r0, #48]	; 0x30
	ticks_drift_plus = 0;
    9808:	461c      	mov	r4, r3
    980a:	e7af      	b.n	976c <isr+0x15ec>
						_radio.conn_curr->slave.force |=
    980c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    9810:	6542      	str	r2, [r0, #84]	; 0x54
	if (_radio.conn_curr->procedure_expire != 0) {
    9812:	8e82      	ldrh	r2, [r0, #52]	; 0x34
    9814:	b11a      	cbz	r2, 981e <isr+0x169e>
		if (_radio.conn_curr->procedure_expire > elapsed_event) {
    9816:	4295      	cmp	r5, r2
    9818:	d23e      	bcs.n	9898 <isr+0x1718>
			_radio.conn_curr->procedure_expire -= elapsed_event;
    981a:	1b55      	subs	r5, r2, r5
    981c:	8685      	strh	r5, [r0, #52]	; 0x34
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    981e:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
    9822:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
    9826:	4291      	cmp	r1, r2
    9828:	d006      	beq.n	9838 <isr+0x16b8>
	    ((_radio.conn_curr->llcp_type == LLCP_CONN_UPD) ||
    982a:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    982e:	3a01      	subs	r2, #1
    9830:	2a01      	cmp	r2, #1
		_radio.conn_curr->latency_event = 0;
    9832:	bf9c      	itt	ls
    9834:	2200      	movls	r2, #0
    9836:	8542      	strhls	r2, [r0, #42]	; 0x2a
	if ((force) || (latency_event != _radio.conn_curr->latency_event)) {
    9838:	b917      	cbnz	r7, 9840 <isr+0x16c0>
    983a:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
    983c:	42b2      	cmp	r2, r6
    983e:	d02d      	beq.n	989c <isr+0x171c>
		lazy = _radio.conn_curr->latency_event + 1;
    9840:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
    9842:	3101      	adds	r1, #1
    9844:	b289      	uxth	r1, r1
	if ((ticks_drift_plus != 0) || (ticks_drift_minus != 0) ||
    9846:	b924      	cbnz	r4, 9852 <isr+0x16d2>
    9848:	b91b      	cbnz	r3, 9852 <isr+0x16d2>
    984a:	b911      	cbnz	r1, 9852 <isr+0x16d2>
	    (lazy != 0) || (force != 0)) {
    984c:	2f00      	cmp	r7, #0
    984e:	f43f ae62 	beq.w	9516 <isr+0x1396>
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    9852:	f890 5020 	ldrb.w	r5, [r0, #32]
		ticker_status =
    9856:	4a28      	ldr	r2, [pc, #160]	; (98f8 <isr+0x1778>)
    9858:	9103      	str	r1, [sp, #12]
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    985a:	3507      	adds	r5, #7
		ticker_status =
    985c:	2100      	movs	r1, #0
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    985e:	b2ed      	uxtb	r5, r5
		ticker_status =
    9860:	9205      	str	r2, [sp, #20]
    9862:	9300      	str	r3, [sp, #0]
				      (void *)(u32_t)ticker_id);
    9864:	9506      	str	r5, [sp, #24]
		ticker_status =
    9866:	4623      	mov	r3, r4
    9868:	9704      	str	r7, [sp, #16]
    986a:	9102      	str	r1, [sp, #8]
    986c:	9101      	str	r1, [sp, #4]
    986e:	462a      	mov	r2, r5
    9870:	4608      	mov	r0, r1
    9872:	f7fa ff73 	bl	475c <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    9876:	f030 0302 	bics.w	r3, r0, #2
    987a:	f43f ae4c 	beq.w	9516 <isr+0x1396>
    987e:	f89b 3012 	ldrb.w	r3, [fp, #18]
    9882:	429d      	cmp	r5, r3
    9884:	f43f ae47 	beq.w	9516 <isr+0x1396>
    9888:	4a1c      	ldr	r2, [pc, #112]	; (98fc <isr+0x177c>)
    988a:	491d      	ldr	r1, [pc, #116]	; (9900 <isr+0x1780>)
    988c:	f7fe bfbb 	b.w	8806 <isr+0x686>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
    9890:	2108      	movs	r1, #8
    9892:	e723      	b.n	96dc <isr+0x155c>
				force = 1;
    9894:	2701      	movs	r7, #1
    9896:	e7bc      	b.n	9812 <isr+0x1692>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x22);
    9898:	2122      	movs	r1, #34	; 0x22
    989a:	e71f      	b.n	96dc <isr+0x155c>
	lazy = 0;
    989c:	4639      	mov	r1, r7
    989e:	e7d2      	b.n	9846 <isr+0x16c6>
		LL_ASSERT((_radio.state == STATE_STOP) ||
    98a0:	3b04      	subs	r3, #4
    98a2:	2b01      	cmp	r3, #1
    98a4:	d903      	bls.n	98ae <isr+0x172e>
    98a6:	4a17      	ldr	r2, [pc, #92]	; (9904 <isr+0x1784>)
    98a8:	4917      	ldr	r1, [pc, #92]	; (9908 <isr+0x1788>)
    98aa:	f7fe bfac 	b.w	8806 <isr+0x686>
		_radio.state = STATE_NONE;
    98ae:	2300      	movs	r3, #0
    98b0:	f88b 3014 	strb.w	r3, [fp, #20]
    98b4:	f7fe bce9 	b.w	828a <isr+0x10a>
		LL_ASSERT(0);
    98b8:	4a12      	ldr	r2, [pc, #72]	; (9904 <isr+0x1784>)
    98ba:	f7fe bd0f 	b.w	82dc <isr+0x15c>
	clock_control_off(_radio.hf_clock, NULL);
    98be:	f8db 0000 	ldr.w	r0, [fp]
    98c2:	6843      	ldr	r3, [r0, #4]
    98c4:	4621      	mov	r1, r4
    98c6:	685b      	ldr	r3, [r3, #4]
    98c8:	4798      	blx	r3
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    98ca:	2201      	movs	r2, #1
    98cc:	4611      	mov	r1, r2
    98ce:	4620      	mov	r0, r4
    98d0:	f7fa f918 	bl	3b04 <mayfly_enable>
    98d4:	f7fe bcd9 	b.w	828a <isr+0x10a>
		LL_ASSERT(0);
    98d8:	4a0c      	ldr	r2, [pc, #48]	; (990c <isr+0x178c>)
    98da:	f7fe bcff 	b.w	82dc <isr+0x15c>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
    98de:	2328      	movs	r3, #40	; 0x28
    98e0:	e4b4      	b.n	924c <isr+0x10cc>
    98e2:	bf00      	nop
    98e4:	f3af 8000 	nop.w
    98e8:	1afd498d 	.word	0x1afd498d
    98ec:	00000007 	.word	0x00000007
    98f0:	0000e33f 	.word	0x0000e33f
    98f4:	0000e917 	.word	0x0000e917
    98f8:	0000639d 	.word	0x0000639d
    98fc:	0000e34d 	.word	0x0000e34d
    9900:	0000e97b 	.word	0x0000e97b
    9904:	0000e35c 	.word	0x0000e35c
    9908:	0000e9e5 	.word	0x0000e9e5
    990c:	0000e372 	.word	0x0000e372
    9910:	3b9aca00 	.word	0x3b9aca00

00009914 <event_master>:
{
    9914:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9916:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    9918:	4b4d      	ldr	r3, [pc, #308]	; (9a50 <event_master+0x13c>)
    991a:	7cda      	ldrb	r2, [r3, #19]
{
    991c:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    991e:	f002 06ff 	and.w	r6, r2, #255	; 0xff
    9922:	461d      	mov	r5, r3
    9924:	b152      	cbz	r2, 993c <event_master+0x28>
    9926:	4a4b      	ldr	r2, [pc, #300]	; (9a54 <event_master+0x140>)
    9928:	494b      	ldr	r1, [pc, #300]	; (9a58 <event_master+0x144>)
	LL_ASSERT(_radio.ticker_id_prepare ==
    992a:	2003      	movs	r0, #3
    992c:	f7f8 fc68 	bl	2200 <bt_log>
    9930:	4040      	eors	r0, r0
    9932:	f380 8811 	msr	BASEPRI, r0
    9936:	f04f 0004 	mov.w	r0, #4
    993a:	df02      	svc	2
    993c:	7c1b      	ldrb	r3, [r3, #16]
    993e:	8c22      	ldrh	r2, [r4, #32]
    9940:	b2db      	uxtb	r3, r3
    9942:	3207      	adds	r2, #7
    9944:	4293      	cmp	r3, r2
    9946:	d002      	beq.n	994e <event_master+0x3a>
    9948:	4a42      	ldr	r2, [pc, #264]	; (9a54 <event_master+0x140>)
    994a:	4944      	ldr	r1, [pc, #272]	; (9a5c <event_master+0x148>)
    994c:	e7ed      	b.n	992a <event_master+0x16>
	_radio.role = ROLE_MASTER;
    994e:	2204      	movs	r2, #4
	_radio.packet_counter = 0;
    9950:	f885 66ac 	strb.w	r6, [r5, #1708]	; 0x6ac
	_radio.crc_expire = 0;
    9954:	f885 66ad 	strb.w	r6, [r5, #1709]	; 0x6ad
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    9958:	b2db      	uxtb	r3, r3
	_radio.role = ROLE_MASTER;
    995a:	74ea      	strb	r2, [r5, #19]
	_radio.ticker_id_prepare = 0;
    995c:	742e      	strb	r6, [r5, #16]
	_radio.ticker_id_event =
    995e:	746b      	strb	r3, [r5, #17]
	conn->latency_event = conn->latency_prepare;
    9960:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
    9962:	f8c5 46a8 	str.w	r4, [r5, #1704]	; 0x6a8
	_radio.state = STATE_TX;
    9966:	2002      	movs	r0, #2
	conn->latency_event = conn->latency_prepare;
    9968:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;
    996a:	8526      	strh	r6, [r4, #40]	; 0x28
	_radio.state = STATE_TX;
    996c:	7528      	strb	r0, [r5, #20]
	_radio.ticks_anchor = ticks_at_expire;
    996e:	60af      	str	r7, [r5, #8]
	packet_tx_enqueue(2);
    9970:	f7fc fe7a 	bl	6668 <packet_tx_enqueue>
	prepare_pdu_data_tx(conn, &pdu_data_tx);
    9974:	a901      	add	r1, sp, #4
    9976:	4620      	mov	r0, r4
    9978:	f7fe fb9a 	bl	80b0 <prepare_pdu_data_tx>
	pdu_data_tx->sn = conn->sn;
    997c:	9901      	ldr	r1, [sp, #4]
    997e:	f894 20a8 	ldrb.w	r2, [r4, #168]	; 0xa8
    9982:	780b      	ldrb	r3, [r1, #0]
    9984:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = conn->nesn;
    9988:	f3c2 0240 	ubfx	r2, r2, #1, #1
    998c:	f362 0382 	bfi	r3, r2, #2, #1
    9990:	700b      	strb	r3, [r1, #0]
	connection_configure(conn);
    9992:	4620      	mov	r0, r4
    9994:	f7fe faa2 	bl	7edc <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
    9998:	2096      	movs	r0, #150	; 0x96
    999a:	f001 fc65 	bl	b268 <radio_tmr_tifs_set>
	radio_switch_complete_and_rx(0);
    999e:	4630      	mov	r0, r6
    99a0:	f001 fbd2 	bl	b148 <radio_switch_complete_and_rx>
	tx_packet_set(conn, pdu_data_tx);
    99a4:	9901      	ldr	r1, [sp, #4]
    99a6:	4620      	mov	r0, r4
    99a8:	f7fc ff3e 	bl	6828 <tx_packet_set>
	if (conn->data_chan_sel) {
    99ac:	7f63      	ldrb	r3, [r4, #29]
    99ae:	f013 0f40 	tst.w	r3, #64	; 0x40
    99b2:	f104 0217 	add.w	r2, r4, #23
    99b6:	d021      	beq.n	99fc <event_master+0xe8>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    99b8:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    99ba:	8be1      	ldrh	r1, [r4, #30]
    99bc:	3801      	subs	r0, #1
    99be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    99c2:	b280      	uxth	r0, r0
    99c4:	f7fd fe50 	bl	7668 <chan_sel_2>
	chan_set(data_chan_use);
    99c8:	f7fc f99c 	bl	5d04 <chan_set>
		remainder_us = radio_tmr_start(1,
    99cc:	68ea      	ldr	r2, [r5, #12]
    99ce:	f107 0109 	add.w	r1, r7, #9
    99d2:	2001      	movs	r0, #1
    99d4:	f001 fc54 	bl	b280 <radio_tmr_start>
		radio_tmr_end_capture();
    99d8:	f001 fd22 	bl	b420 <radio_tmr_end_capture>
	    preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    99dc:	f894 1020 	ldrb.w	r1, [r4, #32]
    99e0:	3107      	adds	r1, #7
    99e2:	463a      	mov	r2, r7
    99e4:	b2c9      	uxtb	r1, r1
    99e6:	4620      	mov	r0, r4
    99e8:	f7fd f974 	bl	6cd4 <preempt_calc>
	if (0 !=
    99ec:	4603      	mov	r3, r0
    99ee:	b328      	cbz	r0, 9a3c <event_master+0x128>
		_radio.state = STATE_STOP;
    99f0:	2304      	movs	r3, #4
    99f2:	752b      	strb	r3, [r5, #20]
		radio_disable();
    99f4:	f001 fb4e 	bl	b094 <radio_disable>
}
    99f8:	b003      	add	sp, #12
    99fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    99fc:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    99fe:	7fa6      	ldrb	r6, [r4, #30]
    9a00:	fb01 6606 	mla	r6, r1, r6, r6
    9a04:	7fe1      	ldrb	r1, [r4, #31]
    9a06:	2025      	movs	r0, #37	; 0x25
    9a08:	440e      	add	r6, r1
    9a0a:	fb96 f1f0 	sdiv	r1, r6, r0
    9a0e:	fb00 6611 	mls	r6, r0, r1, r6
    9a12:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    9a14:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
    9a16:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    9a18:	5c51      	ldrb	r1, [r2, r1]
    9a1a:	f006 0607 	and.w	r6, r6, #7
    9a1e:	fa41 f606 	asr.w	r6, r1, r6
    9a22:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
    9a24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    9a28:	d4ce      	bmi.n	99c8 <event_master+0xb4>
		chan_index = chan_next % chan_count;
    9a2a:	fbb0 f1f3 	udiv	r1, r0, r3
    9a2e:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
    9a32:	b2c9      	uxtb	r1, r1
    9a34:	4610      	mov	r0, r2
    9a36:	f7fb ff71 	bl	591c <chan_sel_remap>
    9a3a:	e7c5      	b.n	99c8 <event_master+0xb4>
		ticker_status =
    9a3c:	4a08      	ldr	r2, [pc, #32]	; (9a60 <event_master+0x14c>)
    9a3e:	4601      	mov	r1, r0
    9a40:	f7fa ff58 	bl	48f4 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    9a44:	f030 0302 	bics.w	r3, r0, #2
    9a48:	d0d6      	beq.n	99f8 <event_master+0xe4>
    9a4a:	4a02      	ldr	r2, [pc, #8]	; (9a54 <event_master+0x140>)
    9a4c:	4905      	ldr	r1, [pc, #20]	; (9a64 <event_master+0x150>)
    9a4e:	e76c      	b.n	992a <event_master+0x16>
    9a50:	200009f8 	.word	0x200009f8
    9a54:	0000e5d9 	.word	0x0000e5d9
    9a58:	0000e70a 	.word	0x0000e70a
    9a5c:	0000e7cc 	.word	0x0000e7cc
    9a60:	000063d1 	.word	0x000063d1
    9a64:	0000e695 	.word	0x0000e695

00009a68 <radio_init>:
{
    9a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	_radio.hf_clock = hf_clock;
    9a6c:	4e3e      	ldr	r6, [pc, #248]	; (9b68 <radio_init+0x100>)
{
    9a6e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    9a70:	f89d c01c 	ldrb.w	ip, [sp, #28]
    9a74:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
    9a78:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    9a7c:	f89d e018 	ldrb.w	lr, [sp, #24]
	_radio.hf_clock = hf_clock;
    9a80:	6030      	str	r0, [r6, #0]
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
    9a82:	f44f 7082 	mov.w	r0, #260	; 0x104
    9a86:	fb00 4003 	mla	r0, r0, r3, r4
	_radio.sca = sca;
    9a8a:	f886 16b4 	strb.w	r1, [r6, #1716]	; 0x6b4
	_radio.conn_pool = mem_radio;
    9a8e:	f8c6 469c 	str.w	r4, [r6, #1692]	; 0x69c
	mem_radio_end = mem_radio + mem_size;
    9a92:	1961      	adds	r1, r4, r5
	tx_count_max += 1;
    9a94:	f10c 0401 	add.w	r4, ip, #1
    9a98:	b2e7      	uxtb	r7, r4
	_radio.entropy = entropy;
    9a9a:	6072      	str	r2, [r6, #4]
	    (offsetof(struct pdu_data, lldata) +
    9a9c:	f108 0403 	add.w	r4, r8, #3
	rx_count_max += 3;
    9aa0:	f10e 0203 	add.w	r2, lr, #3
	if ((PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA) <
    9aa4:	f5b4 7f81 	cmp.w	r4, #258	; 0x102
	rx_count_max += 3;
    9aa8:	b2d2      	uxtb	r2, r2
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
    9aaa:	bf98      	it	ls
    9aac:	eb02 1442 	addls.w	r4, r2, r2, lsl #5
	_radio.packet_data_octets_max = packet_data_octets_max;
    9ab0:	f8a6 86c0 	strh.w	r8, [r6, #1728]	; 0x6c0
		    (MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
    9ab4:	bf88      	it	hi
    9ab6:	f108 080e 	addhi.w	r8, r8, #14
	_radio.link_rx_data_quota = rx_count_max;
    9aba:	f886 26e0 	strb.w	r2, [r6, #1760]	; 0x6e0
		_radio.packet_rx_data_pool_size =
    9abe:	bf8c      	ite	hi
    9ac0:	f028 0803 	bichi.w	r8, r8, #3
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
    9ac4:	eb02 0244 	addls.w	r2, r2, r4, lsl #1
	_radio.packet_rx_count = (rx_count_max + 1);
    9ac8:	f10e 0e04 	add.w	lr, lr, #4
	_radio.packet_tx_count = (tx_count_max + 1);
    9acc:	f10c 0c02 	add.w	ip, ip, #2
	_radio.packet_rx_count = (rx_count_max + 1);
    9ad0:	fa5f fe8e 	uxtb.w	lr, lr
		_radio.packet_rx_data_pool_size =
    9ad4:	bf8c      	ite	hi
    9ad6:	fb18 f202 	smulbbhi	r2, r8, r2
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
    9ada:	0092      	lslls	r2, r2, #2
	_radio.packet_tx_count = (tx_count_max + 1);
    9adc:	fa5f fc8c 	uxtb.w	ip, ip
		_radio.packet_rx_data_pool_size =
    9ae0:	f8a6 26c2 	strh.w	r2, [r6, #1730]	; 0x6c2
	_radio.packet_tx_count = (tx_count_max + 1);
    9ae4:	f886 c700 	strb.w	ip, [r6, #1792]	; 0x700
	_radio.packet_rx = (void *)mem_radio;
    9ae8:	f8c6 06c8 	str.w	r0, [r6, #1736]	; 0x6c8
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    9aec:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
	mem_radio +=
    9af0:	eb00 008e 	add.w	r0, r0, lr, lsl #2
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    9af4:	f8b6 46c2 	ldrh.w	r4, [r6, #1730]	; 0x6c2
	_radio.pkt_tx = (void *)mem_radio;
    9af8:	f8c6 06f8 	str.w	r0, [r6, #1784]	; 0x6f8
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    9afc:	4460      	add	r0, ip
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    9afe:	f44f 7286 	mov.w	r2, #268	; 0x10c
	_radio.pkt_release = (void *)mem_radio;
    9b02:	f8c6 06fc 	str.w	r0, [r6, #1788]	; 0x6fc
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    9b06:	4460      	add	r0, ip
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    9b08:	f8a6 26c4 	strh.w	r2, [r6, #1732]	; 0x6c4
	_radio.pkt_rx_data_pool = mem_radio;
    9b0c:	f8c6 06b8 	str.w	r0, [r6, #1720]	; 0x6b8
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    9b10:	fbb4 f2f2 	udiv	r2, r4, r2
	mem_radio += _radio.packet_rx_data_pool_size;
    9b14:	4420      	add	r0, r4
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
    9b16:	eb0e 0403 	add.w	r4, lr, r3
	_radio.link_rx_pool = mem_radio;
    9b1a:	f8c6 06d0 	str.w	r0, [r6, #1744]	; 0x6d0
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
    9b1e:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    9b22:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
	_radio.pkt_tx_ctrl_pool = mem_radio;
    9b26:	f8c6 06e4 	str.w	r0, [r6, #1764]	; 0x6e4
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    9b2a:	340a      	adds	r4, #10
    9b2c:	f024 0403 	bic.w	r4, r4, #3
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;
    9b30:	3048      	adds	r0, #72	; 0x48
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    9b32:	b2a4      	uxth	r4, r4
	_radio.packet_tx_data_size =
    9b34:	f8a6 46f4 	strh.w	r4, [r6, #1780]	; 0x6f4
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);
    9b38:	fb07 0404 	mla	r4, r7, r4, r0
	if (retcode) {
    9b3c:	1a64      	subs	r4, r4, r1
	_radio.connection_count = connection_count_max;
    9b3e:	f886 36a4 	strb.w	r3, [r6, #1700]	; 0x6a4
	_radio.packet_rx_count = (rx_count_max + 1);
    9b42:	f886 e6cc 	strb.w	lr, [r6, #1740]	; 0x6cc
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    9b46:	f886 26c6 	strb.w	r2, [r6, #1734]	; 0x6c6
	_radio.pkt_tx_data_pool = mem_radio;
    9b4a:	f8c6 06ec 	str.w	r0, [r6, #1772]	; 0x6ec
	if (retcode) {
    9b4e:	d003      	beq.n	9b58 <radio_init+0xf0>
		return (retcode + mem_size);
    9b50:	442c      	add	r4, r5
}
    9b52:	4620      	mov	r0, r4
    9b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_radio.fc_ena = 1;
    9b58:	2301      	movs	r3, #1
    9b5a:	f886 370e 	strb.w	r3, [r6, #1806]	; 0x70e
	common_init();
    9b5e:	f7fd fcff 	bl	7560 <common_init>
	radio_setup();
    9b62:	f001 f9c1 	bl	aee8 <radio_setup>
	return retcode;
    9b66:	e7f4      	b.n	9b52 <radio_init+0xea>
    9b68:	200009f8 	.word	0x200009f8

00009b6c <ll_reset>:
{
    9b6c:	b538      	push	{r3, r4, r5, lr}
	role_disable(RADIO_TICKER_ID_ADV, RADIO_TICKER_ID_ADV_STOP);
    9b6e:	2103      	movs	r1, #3
    9b70:	2005      	movs	r0, #5
    9b72:	f7fb ff9f 	bl	5ab4 <role_disable>
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);
    9b76:	2104      	movs	r1, #4
    9b78:	2006      	movs	r0, #6
    9b7a:	f7fb ff9b 	bl	5ab4 <role_disable>
	for (conn_handle = 0; conn_handle < _radio.connection_count;
    9b7e:	4c22      	ldr	r4, [pc, #136]	; (9c08 <ll_reset+0x9c>)
    9b80:	2500      	movs	r5, #0
    9b82:	f894 26a4 	ldrb.w	r2, [r4, #1700]	; 0x6a4
    9b86:	b2ab      	uxth	r3, r5
    9b88:	429a      	cmp	r2, r3
    9b8a:	f105 0501 	add.w	r5, r5, #1
    9b8e:	d835      	bhi.n	9bfc <ll_reset+0x90>
	_radio.advertiser.is_enabled = 0;
    9b90:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    9b94:	f36f 13c7 	bfc	r3, #7, #1
    9b98:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	_radio.scanner.is_enabled = 0;
    9b9c:	f894 364c 	ldrb.w	r3, [r4, #1612]	; 0x64c
	_radio.advertiser.conn = NULL;
    9ba0:	2000      	movs	r0, #0
	_radio.scanner.is_enabled = 0;
    9ba2:	f360 0300 	bfi	r3, r0, #0, #1
    9ba6:	f884 364c 	strb.w	r3, [r4, #1612]	; 0x64c
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    9baa:	f44f 7286 	mov.w	r2, #268	; 0x10c
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    9bae:	f8b4 36c2 	ldrh.w	r3, [r4, #1730]	; 0x6c2
    9bb2:	fbb3 f3f2 	udiv	r3, r3, r2
    9bb6:	f884 36c6 	strb.w	r3, [r4, #1734]	; 0x6c6
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    9bba:	f894 36cc 	ldrb.w	r3, [r4, #1740]	; 0x6cc
	_radio.packet_rx_last = 0;
    9bbe:	f884 06cd 	strb.w	r0, [r4, #1741]	; 0x6cd
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    9bc2:	3b01      	subs	r3, #1
	_radio.packet_tx_first = 0;
    9bc4:	f884 0701 	strb.w	r0, [r4, #1793]	; 0x701
	_radio.packet_release_last = 0;
    9bc8:	f884 0704 	strb.w	r0, [r4, #1796]	; 0x704
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    9bcc:	f884 36e0 	strb.w	r3, [r4, #1760]	; 0x6e0
	_radio.fc_ack = _radio.fc_req;
    9bd0:	f894 370c 	ldrb.w	r3, [r4, #1804]	; 0x70c
	_radio.advertiser.conn = NULL;
    9bd4:	f8c4 0638 	str.w	r0, [r4, #1592]	; 0x638
	_radio.scanner.conn = NULL;
    9bd8:	f8c4 066c 	str.w	r0, [r4, #1644]	; 0x66c
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    9bdc:	f8a4 26c4 	strh.w	r2, [r4, #1732]	; 0x6c4
	_radio.packet_rx_acquire = 0;
    9be0:	f884 06ce 	strb.w	r0, [r4, #1742]	; 0x6ce
	_radio.packet_tx_last = 0;
    9be4:	f884 0702 	strb.w	r0, [r4, #1794]	; 0x702
	_radio.packet_release_first = 0;
    9be8:	f884 0703 	strb.w	r0, [r4, #1795]	; 0x703
	_radio.fc_ack = _radio.fc_req;
    9bec:	f884 370d 	strb.w	r3, [r4, #1805]	; 0x70d
	ll_filter_reset(false);
    9bf0:	f001 f842 	bl	ac78 <ll_filter_reset>
}
    9bf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	common_init();
    9bf8:	f7fd bcb2 	b.w	7560 <common_init>
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
    9bfc:	1da8      	adds	r0, r5, #6
    9bfe:	21ff      	movs	r1, #255	; 0xff
    9c00:	b2c0      	uxtb	r0, r0
    9c02:	f7fb ff57 	bl	5ab4 <role_disable>
    9c06:	e7bc      	b.n	9b82 <ll_reset+0x16>
    9c08:	200009f8 	.word	0x200009f8

00009c0c <radio_adv_data_get>:
}
    9c0c:	4800      	ldr	r0, [pc, #0]	; (9c10 <radio_adv_data_get+0x4>)
    9c0e:	4770      	bx	lr
    9c10:	20000a23 	.word	0x20000a23

00009c14 <radio_aux_adv_data_get>:
}
    9c14:	4800      	ldr	r0, [pc, #0]	; (9c18 <radio_aux_adv_data_get+0x4>)
    9c16:	4770      	bx	lr
    9c18:	20000c27 	.word	0x20000c27

00009c1c <radio_scan_data_get>:
}
    9c1c:	4800      	ldr	r0, [pc, #0]	; (9c20 <radio_scan_data_get+0x4>)
    9c1e:	4770      	bx	lr
    9c20:	20000e2b 	.word	0x20000e2b

00009c24 <ll_adv_is_enabled>:
	return _radio.advertiser.is_enabled;
    9c24:	4b02      	ldr	r3, [pc, #8]	; (9c30 <ll_adv_is_enabled+0xc>)
    9c26:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
}
    9c2a:	09c0      	lsrs	r0, r0, #7
    9c2c:	4770      	bx	lr
    9c2e:	bf00      	nop
    9c30:	200009f8 	.word	0x200009f8

00009c34 <radio_adv_filter_pol_get>:
	if (_radio.advertiser.is_enabled) {
    9c34:	4b05      	ldr	r3, [pc, #20]	; (9c4c <radio_adv_filter_pol_get+0x18>)
    9c36:	f993 2028 	ldrsb.w	r2, [r3, #40]	; 0x28
    9c3a:	2a00      	cmp	r2, #0
		return _radio.advertiser.filter_policy;
    9c3c:	bfba      	itte	lt
    9c3e:	f893 002a 	ldrblt.w	r0, [r3, #42]	; 0x2a
    9c42:	f000 0003 	andlt.w	r0, r0, #3
    9c46:	2000      	movge	r0, #0
}
    9c48:	4770      	bx	lr
    9c4a:	bf00      	nop
    9c4c:	200009f8 	.word	0x200009f8

00009c50 <ll_scan_is_enabled>:
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    9c50:	4a09      	ldr	r2, [pc, #36]	; (9c78 <ll_scan_is_enabled+0x28>)
    9c52:	f892 364c 	ldrb.w	r3, [r2, #1612]	; 0x64c
    9c56:	f892 064d 	ldrb.w	r0, [r2, #1613]	; 0x64d
	       (_radio.scanner.conn ? BIT(2) : 0);
    9c5a:	f8d2 266c 	ldr.w	r2, [r2, #1644]	; 0x66c
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    9c5e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
	       (_radio.scanner.conn ? BIT(2) : 0);
    9c62:	2a00      	cmp	r2, #0
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    9c64:	f003 0301 	and.w	r3, r3, #1
    9c68:	fa03 f300 	lsl.w	r3, r3, r0
	       (_radio.scanner.conn ? BIT(2) : 0);
    9c6c:	bf14      	ite	ne
    9c6e:	2004      	movne	r0, #4
    9c70:	2000      	moveq	r0, #0
}
    9c72:	4318      	orrs	r0, r3
    9c74:	4770      	bx	lr
    9c76:	bf00      	nop
    9c78:	200009f8 	.word	0x200009f8

00009c7c <radio_scan_filter_pol_get>:
	if (_radio.scanner.is_enabled) {
    9c7c:	4b05      	ldr	r3, [pc, #20]	; (9c94 <radio_scan_filter_pol_get+0x18>)
    9c7e:	f893 064c 	ldrb.w	r0, [r3, #1612]	; 0x64c
    9c82:	f010 0001 	ands.w	r0, r0, #1
		return _radio.scanner.filter_policy;
    9c86:	bf1c      	itt	ne
    9c88:	f893 064d 	ldrbne.w	r0, [r3, #1613]	; 0x64d
    9c8c:	f3c0 1001 	ubfxne	r0, r0, #4, #2
}
    9c90:	4770      	bx	lr
    9c92:	bf00      	nop
    9c94:	200009f8 	.word	0x200009f8

00009c98 <ll_tx_pwr_lvl_get>:
{
    9c98:	b510      	push	{r4, lr}
    9c9a:	4614      	mov	r4, r2
	conn = connection_get(handle);
    9c9c:	f7fb fef4 	bl	5a88 <connection_get>
	if (!conn) {
    9ca0:	b110      	cbz	r0, 9ca8 <ll_tx_pwr_lvl_get+0x10>
	*tx_pwr_lvl = 0;
    9ca2:	2000      	movs	r0, #0
    9ca4:	7020      	strb	r0, [r4, #0]
	return 0;
    9ca6:	bd10      	pop	{r4, pc}
		return 1;
    9ca8:	2001      	movs	r0, #1
}
    9caa:	bd10      	pop	{r4, pc}

00009cac <ll_rx_get>:
{
    9cac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    9cb0:	4605      	mov	r5, r0
    9cb2:	4608      	mov	r0, r1
	if (_radio.link_rx_head != _radio.link_rx_tail) {
    9cb4:	4918      	ldr	r1, [pc, #96]	; (9d18 <ll_rx_get+0x6c>)
    9cb6:	f8d1 36d8 	ldr.w	r3, [r1, #1752]	; 0x6d8
    9cba:	f8d1 26dc 	ldr.w	r2, [r1, #1756]	; 0x6dc
    9cbe:	4293      	cmp	r3, r2
    9cc0:	460f      	mov	r7, r1
    9cc2:	d01f      	beq.n	9d04 <ll_rx_get+0x58>
		_node_rx = _radio.link_rx_head->mem;
    9cc4:	f8d3 8004 	ldr.w	r8, [r3, #4]
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
    9cc8:	f201 7103 	addw	r1, r1, #1795	; 0x703
    9ccc:	f898 2000 	ldrb.w	r2, [r8]
    9cd0:	f7fb fe90 	bl	59f4 <tx_cmplt_get>
		if (!cmplt) {
    9cd4:	4604      	mov	r4, r0
    9cd6:	b9e0      	cbnz	r0, 9d12 <ll_rx_get+0x66>
			first = _radio.packet_release_first;
    9cd8:	ae02      	add	r6, sp, #8
    9cda:	f897 3703 	ldrb.w	r3, [r7, #1795]	; 0x703
    9cde:	f806 3d03 	strb.w	r3, [r6, #-3]!
				cmplt_curr = tx_cmplt_get(&h, &first,
    9ce2:	f897 2704 	ldrb.w	r2, [r7, #1796]	; 0x704
    9ce6:	4631      	mov	r1, r6
    9ce8:	f10d 0006 	add.w	r0, sp, #6
    9cec:	f7fb fe82 	bl	59f4 <tx_cmplt_get>
				 (cmplt_prev != cmplt_curr));
    9cf0:	b934      	cbnz	r4, 9d00 <ll_rx_get+0x54>
			} while ((cmplt_prev != 0) ||
    9cf2:	b928      	cbnz	r0, 9d00 <ll_rx_get+0x54>
			*node_rx = _node_rx;
    9cf4:	f8c5 8000 	str.w	r8, [r5]
}
    9cf8:	4620      	mov	r0, r4
    9cfa:	b002      	add	sp, #8
    9cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
    9d00:	4604      	mov	r4, r0
    9d02:	e7ee      	b.n	9ce2 <ll_rx_get+0x36>
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
    9d04:	f891 2704 	ldrb.w	r2, [r1, #1796]	; 0x704
    9d08:	f201 7103 	addw	r1, r1, #1795	; 0x703
    9d0c:	f7fb fe72 	bl	59f4 <tx_cmplt_get>
    9d10:	4604      	mov	r4, r0
		*node_rx = NULL;
    9d12:	2300      	movs	r3, #0
    9d14:	602b      	str	r3, [r5, #0]
    9d16:	e7ef      	b.n	9cf8 <ll_rx_get+0x4c>
    9d18:	200009f8 	.word	0x200009f8

00009d1c <ll_rx_mem_release>:
{
    9d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			mem_release(_node_rx_free,
    9d20:	4c19      	ldr	r4, [pc, #100]	; (9d88 <ll_rx_mem_release+0x6c>)
{
    9d22:	4605      	mov	r5, r0
	_node_rx = *node_rx;
    9d24:	6800      	ldr	r0, [r0, #0]
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    9d26:	f2a4 66bc 	subw	r6, r4, #1724	; 0x6bc
			mem_release(conn, &_radio.conn_free);
    9d2a:	f1a4 071c 	sub.w	r7, r4, #28
	while (_node_rx) {
    9d2e:	b920      	cbnz	r0, 9d3a <ll_rx_mem_release+0x1e>
	*node_rx = _node_rx;
    9d30:	6028      	str	r0, [r5, #0]
}
    9d32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	packet_rx_allocate(0xff);
    9d36:	f7fd bbc9 	b.w	74cc <packet_rx_allocate.constprop.50>
		switch (_node_rx_free->hdr.type) {
    9d3a:	7902      	ldrb	r2, [r0, #4]
		_node_rx = _node_rx->hdr.onion.next;
    9d3c:	f8d0 8000 	ldr.w	r8, [r0]
    9d40:	2a0a      	cmp	r2, #10
    9d42:	d807      	bhi.n	9d54 <ll_rx_mem_release+0x38>
    9d44:	2301      	movs	r3, #1
    9d46:	4093      	lsls	r3, r2
    9d48:	f240 727e 	movw	r2, #1918	; 0x77e
    9d4c:	4213      	tst	r3, r2
    9d4e:	d10c      	bne.n	9d6a <ll_rx_mem_release+0x4e>
    9d50:	061b      	lsls	r3, r3, #24
    9d52:	d40f      	bmi.n	9d74 <ll_rx_mem_release+0x58>
			LL_ASSERT(0);
    9d54:	4a0d      	ldr	r2, [pc, #52]	; (9d8c <ll_rx_mem_release+0x70>)
    9d56:	490e      	ldr	r1, [pc, #56]	; (9d90 <ll_rx_mem_release+0x74>)
    9d58:	2003      	movs	r0, #3
    9d5a:	f7f8 fa51 	bl	2200 <bt_log>
    9d5e:	4040      	eors	r0, r0
    9d60:	f380 8811 	msr	BASEPRI, r0
    9d64:	f04f 0004 	mov.w	r0, #4
    9d68:	df02      	svc	2
			mem_release(_node_rx_free,
    9d6a:	4621      	mov	r1, r4
			mem_release(conn, &_radio.conn_free);
    9d6c:	f7f9 fe53 	bl	3a16 <mem_release>
{
    9d70:	4640      	mov	r0, r8
    9d72:	e7dc      	b.n	9d2e <ll_rx_mem_release+0x12>
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    9d74:	88c2      	ldrh	r2, [r0, #6]
    9d76:	f8d6 069c 	ldr.w	r0, [r6, #1692]	; 0x69c
    9d7a:	f44f 7182 	mov.w	r1, #260	; 0x104
    9d7e:	f7f9 fe5f 	bl	3a40 <mem_get>
			mem_release(conn, &_radio.conn_free);
    9d82:	4639      	mov	r1, r7
    9d84:	e7f2      	b.n	9d6c <ll_rx_mem_release+0x50>
    9d86:	bf00      	nop
    9d88:	200010b4 	.word	0x200010b4
    9d8c:	0000e683 	.word	0x0000e683
    9d90:	0000d86b 	.word	0x0000d86b

00009d94 <do_radio_rx_fc_set>:
	}
}

u8_t do_radio_rx_fc_set(u16_t handle, u8_t req, u8_t ack)
{
	if (req == ack) {
    9d94:	4291      	cmp	r1, r2
{
    9d96:	b510      	push	{r4, lr}
    9d98:	4b14      	ldr	r3, [pc, #80]	; (9dec <do_radio_rx_fc_set+0x58>)
	if (req == ack) {
    9d9a:	d119      	bne.n	9dd0 <do_radio_rx_fc_set+0x3c>
		if (_radio.link_rx_head == _radio.link_rx_tail) {
    9d9c:	f8d3 26dc 	ldr.w	r2, [r3, #1756]	; 0x6dc
    9da0:	f8d3 46d8 	ldr.w	r4, [r3, #1752]	; 0x6d8
    9da4:	4294      	cmp	r4, r2
    9da6:	d111      	bne.n	9dcc <do_radio_rx_fc_set+0x38>
			u8_t ack1 = ack;

			if (ack1 == 0) {
    9da8:	2900      	cmp	r1, #0
				ack1 = TRIPLE_BUFFER_SIZE;
    9daa:	bf14      	ite	ne
    9dac:	460a      	movne	r2, r1
    9dae:	2203      	moveq	r2, #3
			}
			_radio.fc_handle[--ack1] = handle;
    9db0:	3a01      	subs	r2, #1
    9db2:	b2d2      	uxtb	r2, r2
    9db4:	eb03 0442 	add.w	r4, r3, r2, lsl #1
			_radio.fc_ack = ack1;
    9db8:	f883 270d 	strb.w	r2, [r3, #1805]	; 0x70d

			/* check if ISR updated FC by changing fc_req */
			if (req != _radio.fc_req) {
    9dbc:	f893 270c 	ldrb.w	r2, [r3, #1804]	; 0x70c
			_radio.fc_handle[--ack1] = handle;
    9dc0:	f8a4 0706 	strh.w	r0, [r4, #1798]	; 0x706
			if (req != _radio.fc_req) {
    9dc4:	4291      	cmp	r1, r2
    9dc6:	d00f      	beq.n	9de8 <do_radio_rx_fc_set+0x54>
				_radio.fc_ack = ack;
    9dc8:	f883 170d 	strb.w	r1, [r3, #1805]	; 0x70d

				return 1;
			}
		} else {
			return 1;
    9dcc:	2001      	movs	r0, #1
    9dce:	bd10      	pop	{r4, pc}
		}
	} else if (((req == 0) &&
    9dd0:	b929      	cbnz	r1, 9dde <do_radio_rx_fc_set+0x4a>
    9dd2:	f8b3 370a 	ldrh.w	r3, [r3, #1802]	; 0x70a
				return 1;
    9dd6:	1a18      	subs	r0, r3, r0
    9dd8:	bf18      	it	ne
    9dda:	2001      	movne	r0, #1
    9ddc:	bd10      	pop	{r4, pc}
		    (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] != handle)) ||
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
    9dde:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    9de2:	f8b3 3704 	ldrh.w	r3, [r3, #1796]	; 0x704
    9de6:	e7f6      	b.n	9dd6 <do_radio_rx_fc_set+0x42>
		return 1;
	}

	return 0;
    9de8:	2000      	movs	r0, #0
}
    9dea:	bd10      	pop	{r4, pc}
    9dec:	200009f8 	.word	0x200009f8

00009df0 <radio_rx_fc_set>:

u8_t radio_rx_fc_set(u16_t handle, u8_t fc)
{
    9df0:	b430      	push	{r4, r5}
	if (_radio.fc_ena) {
    9df2:	4b14      	ldr	r3, [pc, #80]	; (9e44 <radio_rx_fc_set+0x54>)
    9df4:	f893 270e 	ldrb.w	r2, [r3, #1806]	; 0x70e
{
    9df8:	460d      	mov	r5, r1
	if (_radio.fc_ena) {
    9dfa:	b302      	cbz	r2, 9e3e <radio_rx_fc_set+0x4e>
		u8_t req = _radio.fc_req;
    9dfc:	f893 270c 	ldrb.w	r2, [r3, #1804]	; 0x70c
    9e00:	b2d1      	uxtb	r1, r2
		u8_t ack = _radio.fc_ack;
    9e02:	f893 270d 	ldrb.w	r2, [r3, #1805]	; 0x70d

		if (fc) {
    9e06:	b135      	cbz	r5, 9e16 <radio_rx_fc_set+0x26>
			if (handle != 0xffff) {
    9e08:	f64f 73ff 	movw	r3, #65535	; 0xffff
    9e0c:	4298      	cmp	r0, r3
    9e0e:	d016      	beq.n	9e3e <radio_rx_fc_set+0x4e>
			}
		}
	}

	return 0;
}
    9e10:	bc30      	pop	{r4, r5}
				return do_radio_rx_fc_set(handle, req, ack);
    9e12:	f7ff bfbf 	b.w	9d94 <do_radio_rx_fc_set>
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
    9e16:	f8d3 06d8 	ldr.w	r0, [r3, #1752]	; 0x6d8
    9e1a:	f8d3 46dc 	ldr.w	r4, [r3, #1756]	; 0x6dc
    9e1e:	42a0      	cmp	r0, r4
    9e20:	d10d      	bne.n	9e3e <radio_rx_fc_set+0x4e>
    9e22:	4291      	cmp	r1, r2
    9e24:	d00b      	beq.n	9e3e <radio_rx_fc_set+0x4e>
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    9e26:	f8d3 46dc 	ldr.w	r4, [r3, #1756]	; 0x6dc
			_radio.fc_ack = req;
    9e2a:	f883 170d 	strb.w	r1, [r3, #1805]	; 0x70d
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    9e2e:	42a0      	cmp	r0, r4
    9e30:	d005      	beq.n	9e3e <radio_rx_fc_set+0x4e>
			    (req == _radio.fc_req)) {
    9e32:	f893 070c 	ldrb.w	r0, [r3, #1804]	; 0x70c
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    9e36:	4281      	cmp	r1, r0
				_radio.fc_ack = ack;
    9e38:	bf08      	it	eq
    9e3a:	f883 270d 	strbeq.w	r2, [r3, #1805]	; 0x70d
}
    9e3e:	2000      	movs	r0, #0
    9e40:	bc30      	pop	{r4, r5}
    9e42:	4770      	bx	lr
    9e44:	200009f8 	.word	0x200009f8

00009e48 <ll_adv_scan_state_cb>:

	return 0;
}

void __weak ll_adv_scan_state_cb(u8_t bm)
{
    9e48:	4770      	bx	lr
    9e4a:	0000      	movs	r0, r0
    9e4c:	0000      	movs	r0, r0
	...

00009e50 <radio_adv_enable>:
{
    9e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9e54:	b091      	sub	sp, #68	; 0x44
	if (_radio.advertiser.is_enabled) {
    9e56:	f8df a3cc 	ldr.w	sl, [pc, #972]	; a224 <radio_adv_enable+0x3d4>
{
    9e5a:	930a      	str	r3, [sp, #40]	; 0x28
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    9e5c:	2302      	movs	r3, #2
    9e5e:	930f      	str	r3, [sp, #60]	; 0x3c
	if (_radio.advertiser.is_enabled) {
    9e60:	f99a 3028 	ldrsb.w	r3, [sl, #40]	; 0x28
{
    9e64:	f89d 706c 	ldrb.w	r7, [sp, #108]	; 0x6c
    9e68:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
	if (_radio.advertiser.is_enabled) {
    9e6c:	2b00      	cmp	r3, #0
{
    9e6e:	4683      	mov	fp, r0
    9e70:	460e      	mov	r6, r1
    9e72:	4655      	mov	r5, sl
	if (_radio.advertiser.is_enabled) {
    9e74:	da01      	bge.n	9e7a <radio_adv_enable+0x2a>
	return BT_HCI_ERR_CMD_DISALLOWED;
    9e76:	200c      	movs	r0, #12
    9e78:	e1f5      	b.n	a266 <radio_adv_enable+0x416>
	pdu_adv = (void *)&_radio.advertiser.adv_data.data
    9e7a:	f89a 922e 	ldrb.w	r9, [sl, #558]	; 0x22e
    9e7e:	eb09 2909 	add.w	r9, r9, r9, lsl #8
    9e82:	f109 092b 	add.w	r9, r9, #43	; 0x2b
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
    9e86:	f81a 3009 	ldrb.w	r3, [sl, r9]
    9e8a:	f003 030f 	and.w	r3, r3, #15
    9e8e:	2b01      	cmp	r3, #1
    9e90:	f200 810c 	bhi.w	a0ac <radio_adv_enable+0x25c>
		if (_radio.advertiser.conn) {
    9e94:	f8da 8638 	ldr.w	r8, [sl, #1592]	; 0x638
    9e98:	f1b8 0f00 	cmp.w	r8, #0
    9e9c:	d1eb      	bne.n	9e76 <radio_adv_enable+0x26>
		link = mem_acquire(&_radio.link_rx_free);
    9e9e:	f20a 60d4 	addw	r0, sl, #1748	; 0x6d4
    9ea2:	f7f9 fd9e 	bl	39e2 <mem_acquire>
		if (!link) {
    9ea6:	900b      	str	r0, [sp, #44]	; 0x2c
    9ea8:	b158      	cbz	r0, 9ec2 <radio_adv_enable+0x72>
		conn = mem_acquire(&_radio.conn_free);
    9eaa:	f50a 60d4 	add.w	r0, sl, #1696	; 0x6a0
    9eae:	f7f9 fd98 	bl	39e2 <mem_acquire>
		if (!conn) {
    9eb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9eb4:	4604      	mov	r4, r0
    9eb6:	b930      	cbnz	r0, 9ec6 <radio_adv_enable+0x76>
			mem_release(link, &_radio.link_rx_free);
    9eb8:	f20a 61d4 	addw	r1, sl, #1748	; 0x6d4
    9ebc:	4618      	mov	r0, r3
    9ebe:	f7f9 fdaa 	bl	3a16 <mem_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    9ec2:	2007      	movs	r0, #7
    9ec4:	e1cf      	b.n	a266 <radio_adv_enable+0x416>
		conn->handle = 0xFFFF;
    9ec6:	f64f 71ff 	movw	r1, #65535	; 0xffff
    9eca:	8401      	strh	r1, [r0, #32]
		conn->llcp_features = RADIO_BLE_FEAT;
    9ecc:	49ce      	ldr	r1, [pc, #824]	; (a208 <radio_adv_enable+0x3b8>)
    9ece:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
		conn->data_chan_sel = 0;
    9ed2:	7f41      	ldrb	r1, [r0, #29]
		conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
    9ed4:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
		conn->data_chan_sel = 0;
    9ed8:	f368 1186 	bfi	r1, r8, #6, #1
		conn->role = 1;
    9edc:	f061 017f 	orn	r1, r1, #127	; 0x7f
		conn->sn = 0;
    9ee0:	f890 30a8 	ldrb.w	r3, [r0, #168]	; 0xa8
		conn->role = 1;
    9ee4:	7741      	strb	r1, [r0, #29]
		conn->connect_expire = 6;
    9ee6:	2106      	movs	r1, #6
    9ee8:	8581      	strh	r1, [r0, #44]	; 0x2c
		conn->common.fex_valid = 0;
    9eea:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
		conn->data_chan_use = 0;
    9eee:	f880 801f 	strb.w	r8, [r0, #31]
		conn->sn = 0;
    9ef2:	f368 0300 	bfi	r3, r8, #0, #1
		conn->common.fex_valid = 0;
    9ef6:	f368 1145 	bfi	r1, r8, #5, #1
		conn->nesn = 0;
    9efa:	f368 0341 	bfi	r3, r8, #1, #1
		conn->slave.latency_enabled = 0;
    9efe:	f368 0100 	bfi	r1, r8, #0, #1
		conn->pause_rx = 0;
    9f02:	f368 0382 	bfi	r3, r8, #2, #1
		conn->slave.latency_cancel = 0;
    9f06:	f368 0141 	bfi	r1, r8, #1, #1
		conn->pause_tx = 0;
    9f0a:	f368 03c3 	bfi	r3, r8, #3, #1
		conn->slave.latency_cancel = 0;
    9f0e:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
		conn->enc_rx = 0;
    9f12:	f368 1304 	bfi	r3, r8, #4, #1
		conn->llcp_version.tx = 0;
    9f16:	f890 1090 	ldrb.w	r1, [r0, #144]	; 0x90
		conn->event_counter = 0;
    9f1a:	f8a0 8022 	strh.w	r8, [r0, #34]	; 0x22
		conn->enc_tx = 0;
    9f1e:	f368 1345 	bfi	r3, r8, #5, #1
		conn->llcp_version.tx = 0;
    9f22:	f368 0100 	bfi	r1, r8, #0, #1
		conn->refresh = 0;
    9f26:	f368 1386 	bfi	r3, r8, #6, #1
		conn->llcp_version.rx = 0;
    9f2a:	f368 0141 	bfi	r1, r8, #1, #1
		conn->empty = 0;
    9f2e:	f368 13c7 	bfi	r3, r8, #7, #1
		conn->latency_prepare = 0;
    9f32:	f8a0 8028 	strh.w	r8, [r0, #40]	; 0x28
		conn->latency_event = 0;
    9f36:	f8a0 802a 	strh.w	r8, [r0, #42]	; 0x2a
		conn->slave.window_widening_prepare_us = 0;
    9f3a:	f8c0 8044 	str.w	r8, [r0, #68]	; 0x44
		conn->slave.window_widening_event_us = 0;
    9f3e:	f8c0 8048 	str.w	r8, [r0, #72]	; 0x48
		conn->slave.ticks_to_offset = 0;
    9f42:	f8c0 8058 	str.w	r8, [r0, #88]	; 0x58
		conn->supervision_expire = 0;
    9f46:	f8a0 8030 	strh.w	r8, [r0, #48]	; 0x30
		conn->procedure_expire = 0;
    9f4a:	f8a0 8034 	strh.w	r8, [r0, #52]	; 0x34
		conn->llcp_req = 0;
    9f4e:	f880 805c 	strb.w	r8, [r0, #92]	; 0x5c
		conn->llcp_ack = 0;
    9f52:	f880 805d 	strb.w	r8, [r0, #93]	; 0x5d
		conn->llcp_version.rx = 0;
    9f56:	f880 1090 	strb.w	r1, [r0, #144]	; 0x90
		conn->llcp_terminate.req = 0;
    9f5a:	f880 8098 	strb.w	r8, [r0, #152]	; 0x98
		conn->llcp_terminate.ack = 0;
    9f5e:	f880 8099 	strb.w	r8, [r0, #153]	; 0x99
		conn->llcp_terminate.reason_peer = 0;
    9f62:	f880 809b 	strb.w	r8, [r0, #155]	; 0x9b
		conn->empty = 0;
    9f66:	f880 30a8 	strb.w	r3, [r0, #168]	; 0xa8
		conn->pkt_tx_head = NULL;
    9f6a:	f8c0 80ec 	str.w	r8, [r0, #236]	; 0xec
		conn->pkt_tx_ctrl = NULL;
    9f6e:	f8c0 80f0 	str.w	r8, [r0, #240]	; 0xf0
		conn->pkt_tx_ctrl_last = NULL;
    9f72:	f8c0 80f4 	str.w	r8, [r0, #244]	; 0xf4
		conn->pkt_tx_data = NULL;
    9f76:	f8c0 80f8 	str.w	r8, [r0, #248]	; 0xf8
		conn->pkt_tx_last = NULL;
    9f7a:	f8c0 80fc 	str.w	r8, [r0, #252]	; 0xfc
		conn->packet_tx_head_len = 0;
    9f7e:	f880 8100 	strb.w	r8, [r0, #256]	; 0x100
		conn->packet_tx_head_offset = 0;
    9f82:	f880 8101 	strb.w	r8, [r0, #257]	; 0x101
		_radio.advertiser.conn = conn;
    9f86:	f8ca 0638 	str.w	r0, [sl, #1592]	; 0x638
	_radio.advertiser.chan_map = chan_map;							//chan_map
    9f8a:	a810      	add	r0, sp, #64	; 0x40
	_radio.advertiser.phy_p = phy_p; 								//set phy_p
    9f8c:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
	_radio.advertiser.chan_map = chan_map;							//chan_map
    9f90:	f810 1d09 	ldrb.w	r1, [r0, #-9]!
	_radio.advertiser.phy_p = phy_p; 								//set phy_p
    9f94:	f36b 0343 	bfi	r3, fp, #1, #3
	_radio.advertiser.chan_map = chan_map;							//chan_map
    9f98:	f361 1306 	bfi	r3, r1, #4, #3
    9f9c:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
	_radio.advertiser.filter_policy = filter_policy;				//filter plicy
    9fa0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9fa2:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
    9fa6:	f362 0301 	bfi	r3, r2, #0, #2
    9faa:	f885 302a 	strb.w	r3, [r5, #42]	; 0x2a
	_radio.advertiser.hdr.ticks_active_to_start =
    9fae:	f8d5 3710 	ldr.w	r3, [r5, #1808]	; 0x710
    9fb2:	61eb      	str	r3, [r5, #28]
	_radio.advertiser.hdr.ticks_xtal_to_start =
    9fb4:	2327      	movs	r3, #39	; 0x27
    9fb6:	61ab      	str	r3, [r5, #24]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    9fb8:	2101      	movs	r1, #1
	_radio.advertiser.hdr.ticks_preempt_to_start =
    9fba:	2300      	movs	r3, #0
    9fbc:	622b      	str	r3, [r5, #32]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    9fbe:	f7f9 fea9 	bl	3d14 <util_ones_count_get>
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    9fc2:	f81a 8009 	ldrb.w	r8, [sl, r9]
    9fc6:	f008 080f 	and.w	r8, r8, #15
    9fca:	f1b8 0f01 	cmp.w	r8, #1
    9fce:	d16f      	bne.n	a0b0 <radio_adv_enable+0x260>
		slot_us = ((RADIO_TICKER_START_PART_US + 176 + 152 + 40) *
    9fd0:	f44f 7327 	mov.w	r3, #668	; 0x29c
    9fd4:	4358      	muls	r0, r3
			   chan_cnt) - 40 + 352;
    9fd6:	f500 709c 	add.w	r0, r0, #312	; 0x138
	_radio.advertiser.hdr.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    9fda:	f8df 924c 	ldr.w	r9, [pc, #588]	; a228 <radio_adv_enable+0x3d8>
    9fde:	a388      	add	r3, pc, #544	; (adr r3, a200 <radio_adv_enable+0x3b0>)
    9fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
    9fe4:	fba0 0109 	umull	r0, r1, r0, r9
    9fe8:	f7f6 f93e 	bl	268 <__aeabi_uldivmod>
	ticks_slot_offset =
    9fec:	69eb      	ldr	r3, [r5, #28]
	_radio.advertiser.hdr.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    9fee:	6268      	str	r0, [r5, #36]	; 0x24
	ticks_slot_offset =
    9ff0:	69a8      	ldr	r0, [r5, #24]
    9ff2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
    9ff6:	4283      	cmp	r3, r0
    9ff8:	bf38      	it	cc
    9ffa:	4603      	movcc	r3, r0
    9ffc:	469b      	mov	fp, r3
	_radio.advertiser.is_hdcd = !interval &&
    9ffe:	2e00      	cmp	r6, #0
    a000:	d163      	bne.n	a0ca <radio_adv_enable+0x27a>
    a002:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
    a006:	4253      	negs	r3, r2
    a008:	4153      	adcs	r3, r2
    a00a:	f895 8028 	ldrb.w	r8, [r5, #40]	; 0x28
    a00e:	f8df 921c 	ldr.w	r9, [pc, #540]	; a22c <radio_adv_enable+0x3dc>
    a012:	f363 1886 	bfi	r8, r3, #6, #1
    a016:	f885 8028 	strb.w	r8, [r5, #40]	; 0x28
	if (_radio.advertiser.is_hdcd) {
    a01a:	f018 0840 	ands.w	r8, r8, #64	; 0x40
    a01e:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
    a022:	d05a      	beq.n	a0da <radio_adv_enable+0x28a>
		u32_t ticks_now = ticker_ticks_now_get();
    a024:	f7fa fcb8 	bl	4998 <ticker_ticks_now_get>
		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    a028:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    a02a:	4a78      	ldr	r2, [pc, #480]	; (a20c <radio_adv_enable+0x3bc>)
    a02c:	9205      	str	r2, [sp, #20]
    a02e:	445b      	add	r3, fp
		u32_t ticks_now = ticker_ticks_now_get();
    a030:	4606      	mov	r6, r0
		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    a032:	2000      	movs	r0, #0
    a034:	9304      	str	r3, [sp, #16]
    a036:	e88d 0009 	stmia.w	sp, {r0, r3}
    a03a:	f8cd a020 	str.w	sl, [sp, #32]
    a03e:	f8cd 901c 	str.w	r9, [sp, #28]
    a042:	9006      	str	r0, [sp, #24]
    a044:	9003      	str	r0, [sp, #12]
    a046:	9002      	str	r0, [sp, #8]
    a048:	4633      	mov	r3, r6
    a04a:	2205      	movs	r2, #5
    a04c:	2103      	movs	r1, #3
    a04e:	f7fa fb35 	bl	46bc <ticker_start>
		if (ret == TICKER_STATUS_BUSY) {
    a052:	2802      	cmp	r0, #2
    a054:	d03d      	beq.n	a0d2 <radio_adv_enable+0x282>
		if (ret_cb != TICKER_STATUS_SUCCESS) {
    a056:	980f      	ldr	r0, [sp, #60]	; 0x3c
    a058:	b9d8      	cbnz	r0, a092 <radio_adv_enable+0x242>
		ret_cb = TICKER_STATUS_BUSY;
    a05a:	2302      	movs	r3, #2
    a05c:	930f      	str	r3, [sp, #60]	; 0x3c
		ret =
    a05e:	4b6c      	ldr	r3, [pc, #432]	; (a210 <radio_adv_enable+0x3c0>)
    a060:	9305      	str	r3, [sp, #20]
    a062:	2203      	movs	r2, #3
    a064:	f24a 33fe 	movw	r3, #41982	; 0xa3fe
    a068:	9300      	str	r3, [sp, #0]
    a06a:	f8cd a020 	str.w	sl, [sp, #32]
    a06e:	f8cd 901c 	str.w	r9, [sp, #28]
    a072:	9006      	str	r0, [sp, #24]
    a074:	9004      	str	r0, [sp, #16]
    a076:	9003      	str	r0, [sp, #12]
    a078:	9002      	str	r0, [sp, #8]
    a07a:	9001      	str	r0, [sp, #4]
    a07c:	4633      	mov	r3, r6
    a07e:	4611      	mov	r1, r2
		ret=	
    a080:	f7fa fb1c 	bl	46bc <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
    a084:	2802      	cmp	r0, #2
    a086:	f000 80db 	beq.w	a240 <radio_adv_enable+0x3f0>
	if (ret_cb == TICKER_STATUS_SUCCESS) {
    a08a:	980f      	ldr	r0, [sp, #60]	; 0x3c
    a08c:	2800      	cmp	r0, #0
    a08e:	f000 80db 	beq.w	a248 <radio_adv_enable+0x3f8>
	if (conn) {
    a092:	2c00      	cmp	r4, #0
    a094:	f43f aeef 	beq.w	9e76 <radio_adv_enable+0x26>
		mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.
    a098:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    a09c:	495d      	ldr	r1, [pc, #372]	; (a214 <radio_adv_enable+0x3c4>)
    a09e:	f7f9 fcba 	bl	3a16 <mem_release>
		mem_release(conn, &_radio.conn_free);
    a0a2:	495d      	ldr	r1, [pc, #372]	; (a218 <radio_adv_enable+0x3c8>)
    a0a4:	4620      	mov	r0, r4
    a0a6:	f7f9 fcb6 	bl	3a16 <mem_release>
    a0aa:	e6e4      	b.n	9e76 <radio_adv_enable+0x26>
		conn = NULL;
    a0ac:	2400      	movs	r4, #0
    a0ae:	e76c      	b.n	9f8a <radio_adv_enable+0x13a>
	} else if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
    a0b0:	f1b8 0f02 	cmp.w	r8, #2
    a0b4:	d103      	bne.n	a0be <radio_adv_enable+0x26e>
		slot_us = ((RADIO_TICKER_START_PART_US + 376) * chan_cnt) ;  // 265byte =2120us
    a0b6:	f44f 7329 	mov.w	r3, #676	; 0x2a4
			   152 + 376) * chan_cnt;
    a0ba:	4358      	muls	r0, r3
    a0bc:	e78d      	b.n	9fda <radio_adv_enable+0x18a>
	else if (pdu_adv->type == PDU_ADV_TYPE_EXT_IND) {
    a0be:	f1b8 0f07 	cmp.w	r8, #7
    a0c2:	d0f8      	beq.n	a0b6 <radio_adv_enable+0x266>
			   152 + 376) * chan_cnt;
    a0c4:	f240 53fc 	movw	r3, #1532	; 0x5fc
    a0c8:	e7f7      	b.n	a0ba <radio_adv_enable+0x26a>
    a0ca:	2300      	movs	r3, #0
    a0cc:	e79d      	b.n	a00a <radio_adv_enable+0x1ba>
				cpu_sleep();
    a0ce:	f7fb fbf5 	bl	58bc <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
    a0d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a0d4:	2b02      	cmp	r3, #2
    a0d6:	d0fa      	beq.n	a0ce <radio_adv_enable+0x27e>
    a0d8:	e7bd      	b.n	a056 <radio_adv_enable+0x206>
		u32_t ticks_now = ticker_ticks_now_get();
    a0da:	f7fa fc5d 	bl	4998 <ticker_ticks_now_get>
    a0de:	900a      	str	r0, [sp, #40]	; 0x28
		u8_t offset = skip + 1;
    a0e0:	1c78      	adds	r0, r7, #1
    a0e2:	b2c3      	uxtb	r3, r0
    a0e4:	930b      	str	r3, [sp, #44]	; 0x2c
		_radio.ext_advertiser.aux_pckt_time = (((u64_t)interval * 625) * skip) + (10005 * offset) ;
    a0e6:	f240 2371 	movw	r3, #625	; 0x271
		_radio.ext_advertiser.max_skip = skip;
    a0ea:	f885 7680 	strb.w	r7, [r5, #1664]	; 0x680
		_radio.ext_advertiser.aux_pckt_time = (((u64_t)interval * 625) * skip) + (10005 * offset) ;
    a0ee:	435f      	muls	r7, r3
		_radio.ext_advertiser.prim_interval = (u64_t)interval * 625;
    a0f0:	4373      	muls	r3, r6
    a0f2:	f8c5 3678 	str.w	r3, [r5, #1656]	; 0x678
		pdu = (void *)_radio.advertiser.adv_data.data
    a0f6:	f895 322d 	ldrb.w	r3, [r5, #557]	; 0x22d
		_radio.ext_advertiser.aux_pckt_time = (((u64_t)interval * 625) * skip) + (10005 * offset) ;
    a0fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
		size = pdu->len + 2;
    a0fc:	eb03 2303 	add.w	r3, r3, r3, lsl #8
    a100:	442b      	add	r3, r5
		_radio.ext_advertiser.aux_pckt_time = (((u64_t)interval * 625) * skip) + (10005 * offset) ;
    a102:	f242 7215 	movw	r2, #10005	; 0x2715
		size = pdu->len + 2;
    a106:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
		_radio.ext_advertiser.aux_pckt_time = (((u64_t)interval * 625) * skip) + (10005 * offset) ;
    a10a:	434a      	muls	r2, r1
    a10c:	fb06 2707 	mla	r7, r6, r7, r2
		final_pckt_size = (size + 1 + 4 + 3)*8 ; 
    a110:	00db      	lsls	r3, r3, #3
    a112:	3350      	adds	r3, #80	; 0x50
		_radio.ext_advertiser.chan_38 = (_radio.ext_advertiser.aux_pckt_time -((final_pckt_size + 50)));
    a114:	f1a7 0232 	sub.w	r2, r7, #50	; 0x32
    a118:	1ad2      	subs	r2, r2, r3
		_radio.ext_advertiser.chan_39 = (_radio.ext_advertiser.aux_pckt_time -(((final_pckt_size + 50)* 2))) ;
    a11a:	3332      	adds	r3, #50	; 0x32
    a11c:	eba7 0343 	sub.w	r3, r7, r3, lsl #1
    a120:	f8c5 3690 	str.w	r3, [r5, #1680]	; 0x690
		ret =
    a124:	4b39      	ldr	r3, [pc, #228]	; (a20c <radio_adv_enable+0x3bc>)
		_radio.ext_advertiser.aux_pckt_time = (((u64_t)interval * 625) * skip) + (10005 * offset) ;
    a126:	f8c5 7674 	str.w	r7, [r5, #1652]	; 0x674
		_radio.ext_advertiser.chan_37 = (_radio.ext_advertiser.aux_pckt_time );
    a12a:	f8c5 7688 	str.w	r7, [r5, #1672]	; 0x688
		_radio.ext_advertiser.chan_38 = (_radio.ext_advertiser.aux_pckt_time -((final_pckt_size + 50)));
    a12e:	f8c5 268c 	str.w	r2, [r5, #1676]	; 0x68c
		ret =
    a132:	f8cd 8018 	str.w	r8, [sp, #24]
    a136:	f8cd a020 	str.w	sl, [sp, #32]
    a13a:	f8cd 901c 	str.w	r9, [sp, #28]
    a13e:	9305      	str	r3, [sp, #20]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    a140:	6a6b      	ldr	r3, [r5, #36]	; 0x24
				     HAL_TICKER_US_TO_TICKS(((u64_t)interval *				//ticks periodic
    a142:	4f36      	ldr	r7, [pc, #216]	; (a21c <radio_adv_enable+0x3cc>)
		ret =
    a144:	f8cd 800c 	str.w	r8, [sp, #12]
		u64_t aux_pckt_interval = (((u64_t)interval * 625) * offset);
    a148:	b2b2      	uxth	r2, r6
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    a14a:	445b      	add	r3, fp
				     HAL_TICKER_US_TO_TICKS(((u64_t)interval *				//ticks periodic
    a14c:	fba2 0107 	umull	r0, r1, r2, r7
		ret =
    a150:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_US_TO_TICKS(((u64_t)interval *				//ticks periodic
    a152:	2391      	movs	r3, #145	; 0x91
    a154:	fb03 1102 	mla	r1, r3, r2, r1
    a158:	a329      	add	r3, pc, #164	; (adr r3, a200 <radio_adv_enable+0x3b0>)
    a15a:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret =
    a15e:	f8cd 8008 	str.w	r8, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(((u64_t)interval *				//ticks periodic
    a162:	f7f6 f881 	bl	268 <__aeabi_uldivmod>
		ret =
    a166:	f8cd 8000 	str.w	r8, [sp]
				     HAL_TICKER_US_TO_TICKS(((u64_t)interval *				//ticks periodic
    a16a:	9001      	str	r0, [sp, #4]
		ret =
    a16c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a16e:	4640      	mov	r0, r8
    a170:	2205      	movs	r2, #5
    a172:	2103      	movs	r1, #3
    a174:	f7fa faa2 	bl	46bc <ticker_start>
		if (ret == TICKER_STATUS_BUSY) {
    a178:	2802      	cmp	r0, #2
    a17a:	46b8      	mov	r8, r7
    a17c:	d05a      	beq.n	a234 <radio_adv_enable+0x3e4>
		if (ret_cb != TICKER_STATUS_SUCCESS) {
    a17e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    a180:	2f00      	cmp	r7, #0
    a182:	d186      	bne.n	a092 <radio_adv_enable+0x242>
		ret_cb = TICKER_STATUS_BUSY;
    a184:	2302      	movs	r3, #2
				    HAL_TICKER_US_TO_TICKS(	ticks_slot_offset +			
    a186:	990c      	ldr	r1, [sp, #48]	; 0x30
		ret_cb = TICKER_STATUS_BUSY;
    a188:	930f      	str	r3, [sp, #60]	; 0x3c
				    HAL_TICKER_US_TO_TICKS(	ticks_slot_offset +			
    a18a:	f50b 70bc 	add.w	r0, fp, #376	; 0x178
		ret=	
    a18e:	4b24      	ldr	r3, [pc, #144]	; (a220 <radio_adv_enable+0x3d0>)
    a190:	9305      	str	r3, [sp, #20]
				    HAL_TICKER_US_TO_TICKS(	ticks_slot_offset +			
    a192:	fba0 0101 	umull	r0, r1, r0, r1
    a196:	a31a      	add	r3, pc, #104	; (adr r3, a200 <radio_adv_enable+0x3b0>)
    a198:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret=	
    a19c:	f8cd a020 	str.w	sl, [sp, #32]
    a1a0:	f8cd 901c 	str.w	r9, [sp, #28]
    a1a4:	9706      	str	r7, [sp, #24]
				    HAL_TICKER_US_TO_TICKS(	ticks_slot_offset +			
    a1a6:	f7f6 f85f 	bl	268 <__aeabi_uldivmod>
				    HAL_TICKER_US_TO_TICKS( aux_pckt_interval  ),			
    a1aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		ret=	
    a1ac:	9703      	str	r7, [sp, #12]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    a1ae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ret=	
    a1b2:	9004      	str	r0, [sp, #16]
				    HAL_TICKER_US_TO_TICKS( aux_pckt_interval  ),			
    a1b4:	fba6 0103 	umull	r0, r1, r6, r3
    a1b8:	2391      	movs	r3, #145	; 0x91
    a1ba:	4343      	muls	r3, r0
    a1bc:	fb08 3301 	mla	r3, r8, r1, r3
    a1c0:	fba0 0108 	umull	r0, r1, r0, r8
    a1c4:	4419      	add	r1, r3
    a1c6:	a30e      	add	r3, pc, #56	; (adr r3, a200 <radio_adv_enable+0x3b0>)
    a1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret=	
    a1cc:	9702      	str	r7, [sp, #8]
				    HAL_TICKER_US_TO_TICKS( aux_pckt_interval  ),			
    a1ce:	f7f6 f84b 	bl	268 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    a1d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ret=	
    a1d6:	9001      	str	r0, [sp, #4]
					HAL_TICKER_US_TO_TICKS(	_radio.ext_advertiser.aux_pckt_time ),			//ticks periodic
    a1d8:	f8d5 0674 	ldr.w	r0, [r5, #1652]	; 0x674
    a1dc:	990c      	ldr	r1, [sp, #48]	; 0x30
    a1de:	a308      	add	r3, pc, #32	; (adr r3, a200 <radio_adv_enable+0x3b0>)
    a1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
    a1e4:	fba0 0101 	umull	r0, r1, r0, r1
    a1e8:	f7f6 f83e 	bl	268 <__aeabi_uldivmod>
		ret=	
    a1ec:	2203      	movs	r2, #3
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    a1ee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ret=	
    a1f2:	9000      	str	r0, [sp, #0]
    a1f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a1f6:	4611      	mov	r1, r2
    a1f8:	4638      	mov	r0, r7
    a1fa:	e741      	b.n	a080 <radio_adv_enable+0x230>
    a1fc:	f3af 8000 	nop.w
    a200:	1afd498d 	.word	0x1afd498d
    a204:	00000007 	.word	0x00000007
    a208:	0001400c 	.word	0x0001400c
    a20c:	00007191 	.word	0x00007191
    a210:	00007261 	.word	0x00007261
    a214:	200010cc 	.word	0x200010cc
    a218:	20001098 	.word	0x20001098
    a21c:	84e72a00 	.word	0x84e72a00
    a220:	00007211 	.word	0x00007211
    a224:	200009f8 	.word	0x200009f8
    a228:	3b9aca00 	.word	0x3b9aca00
    a22c:	00005901 	.word	0x00005901
				cpu_sleep();
    a230:	f7fb fb44 	bl	58bc <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
    a234:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a236:	2b02      	cmp	r3, #2
    a238:	d0fa      	beq.n	a230 <radio_adv_enable+0x3e0>
    a23a:	e7a0      	b.n	a17e <radio_adv_enable+0x32e>
			cpu_sleep();
    a23c:	f7fb fb3e 	bl	58bc <cpu_sleep>
		while (ret_cb == TICKER_STATUS_BUSY) {
    a240:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a242:	2b02      	cmp	r3, #2
    a244:	d0fa      	beq.n	a23c <radio_adv_enable+0x3ec>
    a246:	e720      	b.n	a08a <radio_adv_enable+0x23a>
		_radio.advertiser.is_enabled = 1;
    a248:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
    a24c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    a250:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
		if (!_radio.scanner.is_enabled) {
    a254:	f895 364c 	ldrb.w	r3, [r5, #1612]	; 0x64c
    a258:	f013 0401 	ands.w	r4, r3, #1
    a25c:	d103      	bne.n	a266 <radio_adv_enable+0x416>
			ll_adv_scan_state_cb(BIT(0));
    a25e:	2001      	movs	r0, #1
    a260:	f7ff fdf2 	bl	9e48 <ll_adv_scan_state_cb>
		return 0;
    a264:	4620      	mov	r0, r4
}
    a266:	b011      	add	sp, #68	; 0x44
    a268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000a26c <radio_adv_disable>:
{
    a26c:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_ADV,
    a26e:	2103      	movs	r1, #3
    a270:	2005      	movs	r0, #5
    a272:	f7fb fc1f 	bl	5ab4 <role_disable>
	if (!status) {
    a276:	4605      	mov	r5, r0
    a278:	b9e8      	cbnz	r0, a2b6 <radio_adv_disable+0x4a>
		_radio.advertiser.is_enabled = 0;
    a27a:	4c10      	ldr	r4, [pc, #64]	; (a2bc <radio_adv_disable+0x50>)
    a27c:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    a280:	f360 12c7 	bfi	r2, r0, #7, #1
    a284:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
		if (!_radio.scanner.is_enabled) {
    a288:	f894 264c 	ldrb.w	r2, [r4, #1612]	; 0x64c
    a28c:	07d3      	lsls	r3, r2, #31
    a28e:	d401      	bmi.n	a294 <radio_adv_disable+0x28>
			ll_adv_scan_state_cb(0);
    a290:	f7ff fdda 	bl	9e48 <ll_adv_scan_state_cb>
		conn = _radio.advertiser.conn;
    a294:	f8d4 6638 	ldr.w	r6, [r4, #1592]	; 0x638
		if (conn) {
    a298:	b15e      	cbz	r6, a2b2 <radio_adv_disable+0x46>
			_radio.advertiser.conn = NULL;
    a29a:	2300      	movs	r3, #0
    a29c:	f8c4 3638 	str.w	r3, [r4, #1592]	; 0x638
			mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link,
    a2a0:	4907      	ldr	r1, [pc, #28]	; (a2c0 <radio_adv_disable+0x54>)
    a2a2:	f8d6 009c 	ldr.w	r0, [r6, #156]	; 0x9c
    a2a6:	f7f9 fbb6 	bl	3a16 <mem_release>
			mem_release(conn, &_radio.conn_free);
    a2aa:	4906      	ldr	r1, [pc, #24]	; (a2c4 <radio_adv_disable+0x58>)
    a2ac:	4630      	mov	r0, r6
    a2ae:	f7f9 fbb2 	bl	3a16 <mem_release>
}
    a2b2:	4628      	mov	r0, r5
    a2b4:	bd70      	pop	{r4, r5, r6, pc}
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
    a2b6:	250c      	movs	r5, #12
    a2b8:	e7fb      	b.n	a2b2 <radio_adv_disable+0x46>
    a2ba:	bf00      	nop
    a2bc:	200009f8 	.word	0x200009f8
    a2c0:	200010cc 	.word	0x200010cc
    a2c4:	20001098 	.word	0x20001098

0000a2c8 <ll_rx_dequeue>:
{
    a2c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
    a2ca:	4d3c      	ldr	r5, [pc, #240]	; (a3bc <ll_rx_dequeue+0xf4>)
	struct radio_pdu_node_rx *node_rx = NULL;
    a2cc:	aa02      	add	r2, sp, #8
    a2ce:	2300      	movs	r3, #0
    a2d0:	f842 3d04 	str.w	r3, [r2, #-4]!
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
    a2d4:	f8d5 06dc 	ldr.w	r0, [r5, #1756]	; 0x6dc
    a2d8:	f505 61db 	add.w	r1, r5, #1752	; 0x6d8
    a2dc:	f7f9 fbd9 	bl	3a92 <memq_dequeue>
    a2e0:	462c      	mov	r4, r5
	LL_ASSERT(link);
    a2e2:	b950      	cbnz	r0, a2fa <ll_rx_dequeue+0x32>
    a2e4:	4a36      	ldr	r2, [pc, #216]	; (a3c0 <ll_rx_dequeue+0xf8>)
    a2e6:	4937      	ldr	r1, [pc, #220]	; (a3c4 <ll_rx_dequeue+0xfc>)
		LL_ASSERT(_radio.link_rx_data_quota <
    a2e8:	2003      	movs	r0, #3
    a2ea:	f7f7 ff89 	bl	2200 <bt_log>
    a2ee:	4040      	eors	r0, r0
    a2f0:	f380 8811 	msr	BASEPRI, r0
    a2f4:	f04f 0004 	mov.w	r0, #4
    a2f8:	df02      	svc	2
	mem_release(link, &_radio.link_rx_free);
    a2fa:	f205 61d4 	addw	r1, r5, #1748	; 0x6d4
    a2fe:	f7f9 fb8a 	bl	3a16 <mem_release>
	switch (node_rx->hdr.type) {
    a302:	9a01      	ldr	r2, [sp, #4]
    a304:	7911      	ldrb	r1, [r2, #4]
    a306:	290a      	cmp	r1, #10
    a308:	d807      	bhi.n	a31a <ll_rx_dequeue+0x52>
    a30a:	2301      	movs	r3, #1
    a30c:	408b      	lsls	r3, r1
    a30e:	f240 707e 	movw	r0, #1918	; 0x77e
    a312:	4203      	tst	r3, r0
    a314:	d104      	bne.n	a320 <ll_rx_dequeue+0x58>
    a316:	0618      	lsls	r0, r3, #24
    a318:	d40f      	bmi.n	a33a <ll_rx_dequeue+0x72>
		LL_ASSERT(0);
    a31a:	4a29      	ldr	r2, [pc, #164]	; (a3c0 <ll_rx_dequeue+0xf8>)
    a31c:	492a      	ldr	r1, [pc, #168]	; (a3c8 <ll_rx_dequeue+0x100>)
    a31e:	e7e3      	b.n	a2e8 <ll_rx_dequeue+0x20>
		LL_ASSERT(_radio.link_rx_data_quota <
    a320:	f895 06cc 	ldrb.w	r0, [r5, #1740]	; 0x6cc
    a324:	f895 36e0 	ldrb.w	r3, [r5, #1760]	; 0x6e0
    a328:	3801      	subs	r0, #1
    a32a:	4283      	cmp	r3, r0
    a32c:	db02      	blt.n	a334 <ll_rx_dequeue+0x6c>
    a32e:	4a24      	ldr	r2, [pc, #144]	; (a3c0 <ll_rx_dequeue+0xf8>)
    a330:	4926      	ldr	r1, [pc, #152]	; (a3cc <ll_rx_dequeue+0x104>)
    a332:	e7d9      	b.n	a2e8 <ll_rx_dequeue+0x20>
		_radio.link_rx_data_quota++;
    a334:	3301      	adds	r3, #1
    a336:	f885 36e0 	strb.w	r3, [r5, #1760]	; 0x6e0
	if (node_rx->hdr.type == NODE_RX_TYPE_CONNECTION) {
    a33a:	2906      	cmp	r1, #6
    a33c:	d12c      	bne.n	a398 <ll_rx_dequeue+0xd0>
		if ((radio_le_conn_cmplt->status == 0x3c) ||
    a33e:	7ad3      	ldrb	r3, [r2, #11]
    a340:	2b3c      	cmp	r3, #60	; 0x3c
    a342:	d008      	beq.n	a356 <ll_rx_dequeue+0x8e>
    a344:	7b12      	ldrb	r2, [r2, #12]
    a346:	b992      	cbnz	r2, a36e <ll_rx_dequeue+0xa6>
			LL_ASSERT(_radio.scanner.is_enabled);
    a348:	f894 364c 	ldrb.w	r3, [r4, #1612]	; 0x64c
    a34c:	07d9      	lsls	r1, r3, #31
    a34e:	d425      	bmi.n	a39c <ll_rx_dequeue+0xd4>
    a350:	4a1b      	ldr	r2, [pc, #108]	; (a3c0 <ll_rx_dequeue+0xf8>)
    a352:	491f      	ldr	r1, [pc, #124]	; (a3d0 <ll_rx_dequeue+0x108>)
    a354:	e7c8      	b.n	a2e8 <ll_rx_dequeue+0x20>
				_radio.advertiser.conn = NULL;
    a356:	2300      	movs	r3, #0
				conn = _radio.advertiser.conn;
    a358:	f8d4 5638 	ldr.w	r5, [r4, #1592]	; 0x638
				_radio.advertiser.conn = NULL;
    a35c:	f8c4 3638 	str.w	r3, [r4, #1592]	; 0x638
			LL_ASSERT(_radio.advertiser.is_enabled);
    a360:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
    a364:	2b00      	cmp	r3, #0
    a366:	db04      	blt.n	a372 <ll_rx_dequeue+0xaa>
    a368:	4a15      	ldr	r2, [pc, #84]	; (a3c0 <ll_rx_dequeue+0xf8>)
    a36a:	491a      	ldr	r1, [pc, #104]	; (a3d4 <ll_rx_dequeue+0x10c>)
    a36c:	e7bc      	b.n	a2e8 <ll_rx_dequeue+0x20>
		struct connection *conn = NULL;
    a36e:	2500      	movs	r5, #0
    a370:	e7f6      	b.n	a360 <ll_rx_dequeue+0x98>
			_radio.advertiser.is_enabled = 0;
    a372:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    a376:	f36f 13c7 	bfc	r3, #7, #1
    a37a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (conn) {
    a37e:	b995      	cbnz	r5, a3a6 <ll_rx_dequeue+0xde>
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
    a380:	f894 064c 	ldrb.w	r0, [r4, #1612]	; 0x64c
		     _radio.advertiser.is_enabled;
    a384:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
    a388:	f000 0001 	and.w	r0, r0, #1
    a38c:	0040      	lsls	r0, r0, #1
		if (!bm) {
    a38e:	ea50 10d3 	orrs.w	r0, r0, r3, lsr #7
    a392:	d101      	bne.n	a398 <ll_rx_dequeue+0xd0>
			ll_adv_scan_state_cb(0);
    a394:	f7ff fd58 	bl	9e48 <ll_adv_scan_state_cb>
}
    a398:	b003      	add	sp, #12
    a39a:	bd30      	pop	{r4, r5, pc}
			_radio.scanner.is_enabled = 0;
    a39c:	f362 0300 	bfi	r3, r2, #0, #1
    a3a0:	f884 364c 	strb.w	r3, [r4, #1612]	; 0x64c
    a3a4:	e7ec      	b.n	a380 <ll_rx_dequeue+0xb8>
			mem_release(node_rx->hdr.onion.link,
    a3a6:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    a3aa:	490b      	ldr	r1, [pc, #44]	; (a3d8 <ll_rx_dequeue+0x110>)
    a3ac:	f7f9 fb33 	bl	3a16 <mem_release>
			mem_release(conn, &_radio.conn_free);
    a3b0:	490a      	ldr	r1, [pc, #40]	; (a3dc <ll_rx_dequeue+0x114>)
    a3b2:	4628      	mov	r0, r5
    a3b4:	f7f9 fb2f 	bl	3a16 <mem_release>
    a3b8:	e7e2      	b.n	a380 <ll_rx_dequeue+0xb8>
    a3ba:	bf00      	nop
    a3bc:	200009f8 	.word	0x200009f8
    a3c0:	0000e675 	.word	0x0000e675
    a3c4:	0000ebea 	.word	0x0000ebea
    a3c8:	0000d86b 	.word	0x0000d86b
    a3cc:	0000ea38 	.word	0x0000ea38
    a3d0:	0000eab8 	.word	0x0000eab8
    a3d4:	0000ea86 	.word	0x0000ea86
    a3d8:	200010cc 	.word	0x200010cc
    a3dc:	20001098 	.word	0x20001098

0000a3e0 <rtc0_nrf5_isr>:
	ISR_DIRECT_PM();
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
    a3e0:	b538      	push	{r3, r4, r5, lr}
	u32_t compare0, compare1;

	/* store interested events */
	compare0 = NRF_RTC0->EVENTS_COMPARE[0];
    a3e2:	4c0b      	ldr	r4, [pc, #44]	; (a410 <rtc0_nrf5_isr+0x30>)
    a3e4:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
	compare1 = NRF_RTC0->EVENTS_COMPARE[1];
    a3e8:	f8d4 5144 	ldr.w	r5, [r4, #324]	; 0x144

	/* On compare0 run ticker worker instance0 */
	if (compare0) {
    a3ec:	b122      	cbz	r2, a3f8 <rtc0_nrf5_isr+0x18>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
    a3ee:	2000      	movs	r0, #0
    a3f0:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140

		ticker_trigger(0);
    a3f4:	f7fa f950 	bl	4698 <ticker_trigger>
	}

	/* On compare1 run ticker worker instance1 */
	if (compare1) {
    a3f8:	b12d      	cbz	r5, a406 <rtc0_nrf5_isr+0x26>
		NRF_RTC0->EVENTS_COMPARE[1] = 0;
    a3fa:	2300      	movs	r3, #0
    a3fc:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144

		ticker_trigger(1);
    a400:	2001      	movs	r0, #1
    a402:	f7fa f949 	bl	4698 <ticker_trigger>
	}

	mayfly_run(MAYFLY_CALL_ID_0);
    a406:	2000      	movs	r0, #0
}
    a408:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	mayfly_run(MAYFLY_CALL_ID_0);
    a40c:	f7f9 bbf0 	b.w	3bf0 <mayfly_run>
    a410:	4000b000 	.word	0x4000b000

0000a414 <swi4_nrf5_isr>:

static void swi4_nrf5_isr(void *arg)
{
	mayfly_run(MAYFLY_CALL_ID_1);
    a414:	2001      	movs	r0, #1
    a416:	f7f9 bbeb 	b.w	3bf0 <mayfly_run>

0000a41a <radio_nrf5_isr>:
ISR_DIRECT_DECLARE(radio_nrf5_isr)
    a41a:	4668      	mov	r0, sp
    a41c:	f020 0107 	bic.w	r1, r0, #7
    a420:	468d      	mov	sp, r1
    a422:	b501      	push	{r0, lr}
	isr_radio();
    a424:	f000 fd44 	bl	aeb0 <isr_radio>
	ISR_DIRECT_PM();
    a428:	f7f6 fc66 	bl	cf8 <_arch_isr_direct_pm>
extern void _IntExit(void);

static inline void _arch_isr_direct_footer(int maybe_swap)
{
	if (maybe_swap) {
		_IntExit();
    a42c:	f7f6 fa44 	bl	8b8 <_ExcExit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
    a430:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    a434:	4685      	mov	sp, r0
    a436:	4770      	bx	lr

0000a438 <radio_active_callback>:
{
    a438:	4770      	bx	lr
	...

0000a43c <radio_event_callback>:
	k_sem_give(sem_recv);
    a43c:	4b01      	ldr	r3, [pc, #4]	; (a444 <radio_event_callback+0x8>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    a43e:	6818      	ldr	r0, [r3, #0]
    a440:	f001 bed0 	b.w	c1e4 <_impl_k_sem_give>
    a444:	200025e4 	.word	0x200025e4

0000a448 <ll_init>:
}

int ll_init(struct k_sem *sem_rx)
{
    a448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct device *clk_k32;
	struct device *clk_m16;
	struct device *entropy;
	u32_t err;

	sem_recv = sem_rx;
    a44c:	4b3f      	ldr	r3, [pc, #252]	; (a54c <ll_init+0x104>)
{
    a44e:	b086      	sub	sp, #24
	sem_recv = sem_rx;
    a450:	6018      	str	r0, [r3, #0]

	clk_k32 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    a452:	483f      	ldr	r0, [pc, #252]	; (a550 <ll_init+0x108>)
    a454:	f001 fab8 	bl	b9c8 <device_get_binding>
	if (!clk_k32) {
    a458:	b920      	cbnz	r0, a464 <ll_init+0x1c>
		return -ENODEV;
    a45a:	f06f 0012 	mvn.w	r0, #18
	irq_enable(NRF5_IRQ_RADIO_IRQn);
	irq_enable(NRF5_IRQ_RTC0_IRQn);
	irq_enable(NRF5_IRQ_SWI4_IRQn);

	return 0;
}
    a45e:	b006      	add	sp, #24
    a460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return api->on(dev, sys);
    a464:	6843      	ldr	r3, [r0, #4]
    a466:	2101      	movs	r1, #1
    a468:	681b      	ldr	r3, [r3, #0]
    a46a:	4798      	blx	r3
	entropy = device_get_binding(CONFIG_ENTROPY_NAME);
    a46c:	4839      	ldr	r0, [pc, #228]	; (a554 <ll_init+0x10c>)
    a46e:	f001 faab 	bl	b9c8 <device_get_binding>
	if (!entropy) {
    a472:	4604      	mov	r4, r0
    a474:	2800      	cmp	r0, #0
    a476:	d0f0      	beq.n	a45a <ll_init+0x12>
	cntr_init();
    a478:	f000 fc0a 	bl	ac90 <cntr_init>
	mayfly_init();
    a47c:	f7f9 fb18 	bl	3ab0 <mayfly_init>
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
    a480:	4b35      	ldr	r3, [pc, #212]	; (a558 <ll_init+0x110>)
    a482:	2208      	movs	r2, #8
    a484:	701a      	strb	r2, [r3, #0]
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
    a486:	2202      	movs	r2, #2
    a488:	761a      	strb	r2, [r3, #24]
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
    a48a:	2000      	movs	r0, #0
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
    a48c:	4a33      	ldr	r2, [pc, #204]	; (a55c <ll_init+0x114>)
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
    a48e:	7418      	strb	r0, [r3, #16]
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
    a490:	2603      	movs	r6, #3
    a492:	721e      	strb	r6, [r3, #8]
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
    a494:	9205      	str	r2, [sp, #20]
    a496:	4a32      	ldr	r2, [pc, #200]	; (a560 <ll_init+0x118>)
    a498:	9204      	str	r2, [sp, #16]
    a49a:	4a32      	ldr	r2, [pc, #200]	; (a564 <ll_init+0x11c>)
    a49c:	9203      	str	r2, [sp, #12]
    a49e:	4a32      	ldr	r2, [pc, #200]	; (a568 <ll_init+0x120>)
    a4a0:	9202      	str	r2, [sp, #8]
    a4a2:	220d      	movs	r2, #13
    a4a4:	9201      	str	r2, [sp, #4]
    a4a6:	9300      	str	r3, [sp, #0]
    a4a8:	4a30      	ldr	r2, [pc, #192]	; (a56c <ll_init+0x124>)
    a4aa:	2304      	movs	r3, #4
    a4ac:	2107      	movs	r1, #7
    a4ae:	f7fa f8bb 	bl	4628 <ticker_init>
	LL_ASSERT(!err);
    a4b2:	4680      	mov	r8, r0
    a4b4:	b150      	cbz	r0, a4cc <ll_init+0x84>
    a4b6:	4a2e      	ldr	r2, [pc, #184]	; (a570 <ll_init+0x128>)
    a4b8:	492e      	ldr	r1, [pc, #184]	; (a574 <ll_init+0x12c>)
    a4ba:	4630      	mov	r0, r6
    a4bc:	f7f7 fea0 	bl	2200 <bt_log>
    a4c0:	4040      	eors	r0, r0
    a4c2:	f380 8811 	msr	BASEPRI, r0
    a4c6:	f04f 0004 	mov.w	r0, #4
    a4ca:	df02      	svc	2
	clk_m16 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_M16SRC_DRV_NAME);
    a4cc:	482a      	ldr	r0, [pc, #168]	; (a578 <ll_init+0x130>)
    a4ce:	f001 fa7b 	bl	b9c8 <device_get_binding>
	if (!clk_m16) {
    a4d2:	2800      	cmp	r0, #0
    a4d4:	d0c1      	beq.n	a45a <ll_init+0x12>
	err = radio_init(clk_m16, CLOCK_CONTROL_NRF5_K32SRC_ACCURACY, entropy,
    a4d6:	4b29      	ldr	r3, [pc, #164]	; (a57c <ll_init+0x134>)
    a4d8:	9304      	str	r3, [sp, #16]
    a4da:	23fb      	movs	r3, #251	; 0xfb
    a4dc:	9303      	str	r3, [sp, #12]
    a4de:	9302      	str	r3, [sp, #8]
    a4e0:	f44f 5785 	mov.w	r7, #4256	; 0x10a0
    a4e4:	230a      	movs	r3, #10
    a4e6:	2501      	movs	r5, #1
    a4e8:	9301      	str	r3, [sp, #4]
    a4ea:	4622      	mov	r2, r4
    a4ec:	9705      	str	r7, [sp, #20]
    a4ee:	9500      	str	r5, [sp, #0]
    a4f0:	4643      	mov	r3, r8
    a4f2:	2107      	movs	r1, #7
    a4f4:	f7ff fab8 	bl	9a68 <radio_init>
	if (err) {
    a4f8:	4604      	mov	r4, r0
    a4fa:	b148      	cbz	r0, a510 <ll_init+0xc8>
		BT_ERR("Required RAM size: %d, supplied: %u.", err,
    a4fc:	4603      	mov	r3, r0
    a4fe:	9700      	str	r7, [sp, #0]
    a500:	4630      	mov	r0, r6
    a502:	4a1b      	ldr	r2, [pc, #108]	; (a570 <ll_init+0x128>)
    a504:	491e      	ldr	r1, [pc, #120]	; (a580 <ll_init+0x138>)
    a506:	f7f7 fe7b 	bl	2200 <bt_log>
		return -ENOMEM;
    a50a:	f06f 000b 	mvn.w	r0, #11
    a50e:	e7a6      	b.n	a45e <ll_init+0x16>
	ll_filter_reset(true);
    a510:	4628      	mov	r0, r5
    a512:	f000 fbb1 	bl	ac78 <ll_filter_reset>
	IRQ_DIRECT_CONNECT(NRF5_IRQ_RADIO_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
    a516:	4622      	mov	r2, r4
    a518:	4621      	mov	r1, r4
    a51a:	4628      	mov	r0, r5
    a51c:	f7f6 fbd2 	bl	cc4 <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_RTC0_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
    a520:	4622      	mov	r2, r4
    a522:	4621      	mov	r1, r4
    a524:	200b      	movs	r0, #11
    a526:	f7f6 fbcd 	bl	cc4 <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_SWI4_IRQn, CONFIG_BT_CTLR_JOB_PRIO, swi4_nrf5_isr,
    a52a:	4622      	mov	r2, r4
    a52c:	4621      	mov	r1, r4
    a52e:	2018      	movs	r0, #24
    a530:	f7f6 fbc8 	bl	cc4 <_irq_priority_set>
	irq_enable(NRF5_IRQ_RADIO_IRQn);
    a534:	4628      	mov	r0, r5
    a536:	f7f6 fb93 	bl	c60 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RTC0_IRQn);
    a53a:	200b      	movs	r0, #11
    a53c:	f7f6 fb90 	bl	c60 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_SWI4_IRQn);
    a540:	2018      	movs	r0, #24
    a542:	f7f6 fb8d 	bl	c60 <_arch_irq_enable>
	return 0;
    a546:	4620      	mov	r0, r4
    a548:	e789      	b.n	a45e <ll_init+0x16>
    a54a:	bf00      	nop
    a54c:	200025e4 	.word	0x200025e4
    a550:	0000d22c 	.word	0x0000d22c
    a554:	0000d20a 	.word	0x0000d20a
    a558:	200025c4 	.word	0x200025c4
    a55c:	0000b751 	.word	0x0000b751
    a560:	0000b6c5 	.word	0x0000b6c5
    a564:	0000b689 	.word	0x0000b689
    a568:	20002354 	.word	0x20002354
    a56c:	2000223c 	.word	0x2000223c
    a570:	0000efa1 	.word	0x0000efa1
    a574:	0000efa9 	.word	0x0000efa9
    a578:	0000d237 	.word	0x0000d237
    a57c:	2000119c 	.word	0x2000119c
    a580:	0000efc3 	.word	0x0000efc3

0000a584 <ll_adv_params_set>:
u32_t ll_adv_params_set(u8_t Adv_handle, u16_t evt_prop, u16_t interval,
			u8_t own_addr_type,
			u8_t direct_addr_type, u8_t const *const direct_addr,
			u8_t chan_map, u8_t filter_policy, u8_t *tx_pwr,
			u8_t phy_p, u8_t skip, u8_t phy_s, u8_t sid, u8_t sreq)
{
    a584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a588:	b089      	sub	sp, #36	; 0x24
    a58a:	4699      	mov	r9, r3
    a58c:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
    a590:	9301      	str	r3, [sp, #4]
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    a592:	2300      	movs	r3, #0
    a594:	f88d 3018 	strb.w	r3, [sp, #24]
    a598:	2306      	movs	r3, #6
    a59a:	2601      	movs	r6, #1
    a59c:	f88d 301a 	strb.w	r3, [sp, #26]
    a5a0:	2502      	movs	r5, #2
    a5a2:	2307      	movs	r3, #7
{
    a5a4:	9102      	str	r1, [sp, #8]
    a5a6:	4614      	mov	r4, r2
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    a5a8:	f88d 6019 	strb.w	r6, [sp, #25]
    a5ac:	f88d 501b 	strb.w	r5, [sp, #27]
    a5b0:	f88d 601c 	strb.w	r6, [sp, #28]
    a5b4:	f88d 301d 	strb.w	r3, [sp, #29]
	struct radio_adv_data *radio_adv_data;
	struct radio_adv_data *radio_aux_adv_data;
	struct pdu_adv *pdu;
	struct pdu_adv *aux_pdu;
	
	if (ll_adv_is_enabled()) {
    a5b8:	f7ff fb34 	bl	9c24 <ll_adv_is_enabled>
    a5bc:	9902      	ldr	r1, [sp, #8]
    a5be:	4607      	mov	r7, r0
    a5c0:	2800      	cmp	r0, #0
    a5c2:	f040 81a2 	bne.w	a90a <ll_adv_params_set+0x386>

#if defined(CONFIG_BT_CTLR_ADV_EXT)
	/* TODO: check and fail (0x12, invalid HCI cmd param) if invalid
	 * evt_prop bits.
	 */
	ll_adv.max_skip = skip;
    a5c6:	4bcc      	ldr	r3, [pc, #816]	; (a8f8 <ll_adv_params_set+0x374>)
    a5c8:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
    a5cc:	711a      	strb	r2, [r3, #4]
	
	u8_t adv_type;
	ll_adv.phy_p = BIT(0);
    a5ce:	781a      	ldrb	r2, [r3, #0]
    a5d0:	f366 1247 	bfi	r2, r6, #5, #3
    a5d4:	701a      	strb	r2, [r3, #0]
		adv_type = 0x05;
	}			
	/* extended */
	//if (adv_type > 0x04) {
		/* legacy */
		if (evt_prop & BIT(4)) {
    a5d6:	06ca      	lsls	r2, r1, #27
    a5d8:	f140 809b 	bpl.w	a712 <ll_adv_params_set+0x18e>
			u8_t const leg_adv_type[] = { 0x03, 0x04, 0x02, 0x00};
    a5dc:	2203      	movs	r2, #3
    a5de:	f88d 2014 	strb.w	r2, [sp, #20]
    a5e2:	f88d 0017 	strb.w	r0, [sp, #23]
    a5e6:	2204      	movs	r2, #4

			adv_type = leg_adv_type[evt_prop & 0x03];

			/* high duty cycle directed */
			if (evt_prop & BIT(3)) {
    a5e8:	0708      	lsls	r0, r1, #28
			u8_t const leg_adv_type[] = { 0x03, 0x04, 0x02, 0x00};
    a5ea:	f88d 2015 	strb.w	r2, [sp, #21]
    a5ee:	f88d 5016 	strb.w	r5, [sp, #22]
			if (evt_prop & BIT(3)) {
    a5f2:	d408      	bmi.n	a606 <ll_adv_params_set+0x82>
			adv_type = leg_adv_type[evt_prop & 0x03];
    a5f4:	f001 0203 	and.w	r2, r1, #3
    a5f8:	a808      	add	r0, sp, #32
    a5fa:	4402      	add	r2, r0
    a5fc:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
	/* remember params so that set adv/scan data and adv enable
	 * interface can correctly update adv/scan data in the
	 * double buffer between caller and controller context.
	 */
	/* Set interval for Undirected or Low Duty Cycle Directed Advertising */
	if (adv_type == 0x01) {
    a600:	42b2      	cmp	r2, r6
    a602:	f040 8096 	bne.w	a732 <ll_adv_params_set+0x1ae>
		ll_adv.interval = 0;  				//interval = 0 for ADV_DIRECT_IND
    a606:	2200      	movs	r2, #0
    a608:	805a      	strh	r2, [r3, #2]
    a60a:	2201      	movs	r2, #1
	} else {
		ll_adv.interval = interval;
	}
	ll_adv.chan_map = chan_map;  			
    a60c:	7818      	ldrb	r0, [r3, #0]
    a60e:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
    a612:	9103      	str	r1, [sp, #12]
    a614:	f364 0002 	bfi	r0, r4, #0, #3
	ll_adv.filter_policy = filter_policy;
    a618:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
    a61c:	9202      	str	r2, [sp, #8]
    a61e:	f364 00c4 	bfi	r0, r4, #3, #2
    a622:	7018      	strb	r0, [r3, #0]
	
	/* update the "current" primary adv data and Aux packet */
	radio_adv_data = radio_adv_data_get();
    a624:	f7ff faf2 	bl	9c0c <radio_adv_data_get>
    a628:	4606      	mov	r6, r0
	radio_aux_adv_data = radio_aux_adv_data_get();
    a62a:	f7ff faf3 	bl	9c14 <radio_aux_adv_data_get>

	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
	aux_pdu = (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0];

	pdu->type = pdu_adv_type[adv_type];
    a62e:	9a02      	ldr	r2, [sp, #8]
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    a630:	f896 3203 	ldrb.w	r3, [r6, #515]	; 0x203
	aux_pdu = (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0];
    a634:	f890 e203 	ldrb.w	lr, [r0, #515]	; 0x203
	pdu->type = pdu_adv_type[adv_type];
    a638:	a908      	add	r1, sp, #32
    a63a:	440a      	add	r2, r1
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    a63c:	eb03 2303 	add.w	r3, r3, r3, lsl #8
	pdu->type = pdu_adv_type[adv_type];
    a640:	f812 2c08 	ldrb.w	r2, [r2, #-8]
    a644:	f816 c003 	ldrb.w	ip, [r6, r3]
	aux_pdu->type = pdu->type;
	
	pdu->rfu = 0;
	aux_pdu->rfu = pdu->rfu;

	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) && 
    a648:	9903      	ldr	r1, [sp, #12]
	pdu->type = pdu_adv_type[adv_type];
    a64a:	f002 020f 	and.w	r2, r2, #15
    a64e:	f362 0c03 	bfi	ip, r2, #0, #4
    a652:	f806 c003 	strb.w	ip, [r6, r3]
	aux_pdu = (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0];
    a656:	eb0e 2e0e 	add.w	lr, lr, lr, lsl #8
	    ll_adv.own_addr_type == BT_ADDR_LE_RANDOM_ID) {
		ll_adv.id_addr_type = direct_addr_type;
		memcpy(&ll_adv.id_addr, direct_addr, BDADDR_SIZE);
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */
	pdu->tx_addr =  own_addr_type & 0x1;
    a65a:	f009 0901 	and.w	r9, r9, #1
	aux_pdu->type = pdu->type;
    a65e:	f810 c00e 	ldrb.w	ip, [r0, lr]
    a662:	f362 0c03 	bfi	ip, r2, #0, #4
    a666:	f800 c00e 	strb.w	ip, [r0, lr]
	pdu->rfu = 0;
    a66a:	5cf2      	ldrb	r2, [r6, r3]
    a66c:	f36f 1204 	bfc	r2, #4, #1
    a670:	54f2      	strb	r2, [r6, r3]
	aux_pdu->rfu = pdu->rfu;
    a672:	f810 200e 	ldrb.w	r2, [r0, lr]
    a676:	f36f 1204 	bfc	r2, #4, #1
    a67a:	f800 200e 	strb.w	r2, [r0, lr]
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) && 
    a67e:	5cf2      	ldrb	r2, [r6, r3]
    a680:	f002 0c0f 	and.w	ip, r2, #15
    a684:	f1bc 0f01 	cmp.w	ip, #1
		pdu->chan_sel = 1;           // could be same for ext adv  LE Channel Selection Algorithm #2 feature 
    a688:	bf95      	itete	ls
    a68a:	f042 0220 	orrls.w	r2, r2, #32
		pdu->chan_sel = 0;
    a68e:	f36f 1245 	bfchi	r2, #5, #1
		pdu->chan_sel = 1;           // could be same for ext adv  LE Channel Selection Algorithm #2 feature 
    a692:	54f2      	strbls	r2, [r6, r3]
		pdu->chan_sel = 0;
    a694:	54f2      	strbhi	r2, [r6, r3]
		aux_pdu->chan_sel = pdu->chan_sel;
    a696:	bf95      	itete	ls
    a698:	f810 200e 	ldrbls.w	r2, [r0, lr]
		aux_pdu->chan_sel = pdu->chan_sel;
    a69c:	f810 200e 	ldrbhi.w	r2, [r0, lr]
		aux_pdu->chan_sel = pdu->chan_sel;
    a6a0:	f042 0220 	orrls.w	r2, r2, #32
		aux_pdu->chan_sel = pdu->chan_sel;
    a6a4:	f36f 1245 	bfchi	r2, #5, #1
    a6a8:	f800 200e 	strb.w	r2, [r0, lr]
	pdu->tx_addr =  own_addr_type & 0x1;
    a6ac:	5cf2      	ldrb	r2, [r6, r3]
    a6ae:	f369 1286 	bfi	r2, r9, #6, #1
    a6b2:	54f2      	strb	r2, [r6, r3]
	aux_pdu->tx_addr = 0;						//not sending transmitting address in aux packet
    a6b4:	f810 200e 	ldrb.w	r2, [r0, lr]
    a6b8:	f36f 1286 	bfc	r2, #6, #1
    a6bc:	f800 200e 	strb.w	r2, [r0, lr]
	pdu->rx_addr = 0;  							
    a6c0:	5cf2      	ldrb	r2, [r6, r3]
    a6c2:	f36f 12c7 	bfc	r2, #7, #1
    a6c6:	54f2      	strb	r2, [r6, r3]
	aux_pdu->rx_addr = pdu->rx_addr;
    a6c8:	f810 200e 	ldrb.w	r2, [r0, lr]
    a6cc:	f36f 12c7 	bfc	r2, #7, #1
    a6d0:	f800 200e 	strb.w	r2, [r0, lr]
	aux_pdu = (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0];
    a6d4:	eb00 050e 	add.w	r5, r0, lr
	if(evt_prop & BIT(2)){							// for directed ADV wuth public address
    a6d8:	f011 0004 	ands.w	r0, r1, #4
		pdu->rx_addr = 0;//direct_addr_type;
    a6dc:	bf1e      	ittt	ne
    a6de:	5cf2      	ldrbne	r2, [r6, r3]
    a6e0:	f36f 12c7 	bfcne	r2, #7, #1
    a6e4:	54f2      	strbne	r2, [r6, r3]
	}

	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    a6e6:	5cf2      	ldrb	r2, [r6, r3]
    a6e8:	f002 0e0f 	and.w	lr, r2, #15
    a6ec:	f1be 0f01 	cmp.w	lr, #1
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    a6f0:	eb06 0403 	add.w	r4, r6, r3
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    a6f4:	d11f      	bne.n	a736 <ll_adv_params_set+0x1b2>
		pdu->rx_addr = direct_addr_type;
    a6f6:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
    a6fa:	f361 12c7 	bfi	r2, r1, #7, #1
    a6fe:	54f2      	strb	r2, [r6, r3]
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
    a700:	9913      	ldr	r1, [sp, #76]	; 0x4c
    a702:	2206      	movs	r2, #6
    a704:	f104 0008 	add.w	r0, r4, #8
    a708:	f7f5 ff87 	bl	61a <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
    a70c:	230c      	movs	r3, #12
		/* NOTE: AdvA, filled at enable and RPA timeout */
		
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	} else if (pdu->len == 0) {
		pdu->len = BDADDR_SIZE;
    a70e:	7063      	strb	r3, [r4, #1]
    a710:	e0d2      	b.n	a8b8 <ll_adv_params_set+0x334>
			if (((evt_prop & 0x03) == 0x03) ||
    a712:	f001 0203 	and.w	r2, r1, #3
    a716:	2a03      	cmp	r2, #3
    a718:	f000 80f9 	beq.w	a90e <ll_adv_params_set+0x38a>
    a71c:	f001 020c 	and.w	r2, r1, #12
    a720:	2a0c      	cmp	r2, #12
    a722:	f000 80f4 	beq.w	a90e <ll_adv_params_set+0x38a>
			ll_adv.phy_p = phy_p;
    a726:	781a      	ldrb	r2, [r3, #0]
    a728:	9801      	ldr	r0, [sp, #4]
    a72a:	f360 1247 	bfi	r2, r0, #5, #3
    a72e:	701a      	strb	r2, [r3, #0]
			adv_type = 0x05; /* PDU_ADV_TYPE_EXT_IND */
    a730:	2205      	movs	r2, #5
		ll_adv.interval = interval;
    a732:	805c      	strh	r4, [r3, #2]
    a734:	e76a      	b.n	a60c <ll_adv_params_set+0x88>
	} else if (pdu->type == PDU_ADV_TYPE_EXT_IND) {
    a736:	f1be 0f07 	cmp.w	lr, #7
    a73a:	f040 80e1 	bne.w	a900 <ll_adv_params_set+0x37c>
		p->ext_hdr_len = 0;
    a73e:	78a2      	ldrb	r2, [r4, #2]
		p->adv_mode = 0x00;//evt_prop & 0x03;
    a740:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    a744:	f36f 1287 	bfc	r2, #6, #2
    a748:	70a2      	strb	r2, [r4, #2]
		aux_p->ext_hdr_len = p->ext_hdr_len;
    a74a:	78aa      	ldrb	r2, [r5, #2]
		aux_p->adv_mode = p->adv_mode;
    a74c:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    a750:	f36f 1287 	bfc	r2, #6, #2
    a754:	70aa      	strb	r2, [r5, #2]
		*(u8_t *)h = 0;
    a756:	2200      	movs	r2, #0
    a758:	70e2      	strb	r2, [r4, #3]
		*(u8_t *)aux_h = 0;
    a75a:	70ea      	strb	r2, [r5, #3]
		if (!((evt_prop & BIT(5)) && !p->adv_mode && (phy_p != BIT(2)))) {
    a75c:	068a      	lsls	r2, r1, #26
		p = (void *)&pdu->adv_ext_ind;
    a75e:	f104 0c02 	add.w	ip, r4, #2
		ptr = (u8_t *)h + sizeof(*h);
    a762:	f104 0604 	add.w	r6, r4, #4
		aux_p = (void *)&aux_pdu->adv_ext_ind;
    a766:	f105 0e02 	add.w	lr, r5, #2
		aux_ptr = (u8_t *)aux_h + sizeof(*aux_h);
    a76a:	f105 0304 	add.w	r3, r5, #4
		if (!((evt_prop & BIT(5)) && !p->adv_mode && (phy_p != BIT(2)))) {
    a76e:	d507      	bpl.n	a780 <ll_adv_params_set+0x1fc>
    a770:	78a2      	ldrb	r2, [r4, #2]
    a772:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    a776:	d103      	bne.n	a780 <ll_adv_params_set+0x1fc>
    a778:	9a01      	ldr	r2, [sp, #4]
    a77a:	2a04      	cmp	r2, #4
    a77c:	f040 80b6 	bne.w	a8ec <ll_adv_params_set+0x368>
			h->adv_addr = 1;
    a780:	78e2      	ldrb	r2, [r4, #3]
    a782:	f042 0201 	orr.w	r2, r2, #1
    a786:	70e2      	strb	r2, [r4, #3]
			ptr += BDADDR_SIZE;
    a788:	f104 020a 	add.w	r2, r4, #10
		if(evt_prop & BIT(2)){
    a78c:	b120      	cbz	r0, a798 <ll_adv_params_set+0x214>
			h->tgt_addr = 1;
    a78e:	78e0      	ldrb	r0, [r4, #3]
    a790:	f040 0002 	orr.w	r0, r0, #2
    a794:	70e0      	strb	r0, [r4, #3]
			ptr += BDADDR_SIZE;
    a796:	3206      	adds	r2, #6
		if(evt_prop & BIT(6)){
    a798:	0648      	lsls	r0, r1, #25
    a79a:	f140 80a9 	bpl.w	a8f0 <ll_adv_params_set+0x36c>
			h->adi = 1;
    a79e:	78e1      	ldrb	r1, [r4, #3]
    a7a0:	f041 0108 	orr.w	r1, r1, #8
    a7a4:	70e1      	strb	r1, [r4, #3]
			aux_h->adi = h->adi;
    a7a6:	78e9      	ldrb	r1, [r5, #3]
    a7a8:	f041 0108 	orr.w	r1, r1, #8
    a7ac:	70e9      	strb	r1, [r5, #3]
			h->aux_ptr = 1;
    a7ae:	78e1      	ldrb	r1, [r4, #3]
			h->tx_pwr = 1;
    a7b0:	f041 0150 	orr.w	r1, r1, #80	; 0x50
    a7b4:	70e1      	strb	r1, [r4, #3]
			aux_h->tx_pwr = h->tx_pwr;
    a7b6:	78e9      	ldrb	r1, [r5, #3]
    a7b8:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    a7bc:	70e9      	strb	r1, [r5, #3]
			ptr += sizeof(*adi_ptr);
    a7be:	f102 0802 	add.w	r8, r2, #2
			adi_ptr = ptr;
    a7c2:	4693      	mov	fp, r2
			aux_ptr ++;
    a7c4:	1de9      	adds	r1, r5, #7
			aux_adi_ptr = aux_ptr;
    a7c6:	469a      	mov	sl, r3
			ptr ++;
    a7c8:	3206      	adds	r2, #6
		len = ptr - (u8_t *)p;
    a7ca:	eba2 020c 	sub.w	r2, r2, ip
    a7ce:	b2d2      	uxtb	r2, r2
		if (len > (offsetof(struct pdu_adv_com_ext_adv,
    a7d0:	2a02      	cmp	r2, #2
			p->ext_hdr_len = (len -
    a7d2:	bf84      	itt	hi
    a7d4:	78a0      	ldrbhi	r0, [r4, #2]
    a7d6:	f102 3cff 	addhi.w	ip, r2, #4294967295	; 0xffffffff
		aux_len = aux_ptr - (u8_t *)aux_p;
    a7da:	eba1 0e0e 	sub.w	lr, r1, lr
			pdu->len = offsetof(struct pdu_adv_com_ext_adv,
    a7de:	bf98      	it	ls
    a7e0:	2201      	movls	r2, #1
		aux_len = aux_ptr - (u8_t *)aux_p;
    a7e2:	fa5f fe8e 	uxtb.w	lr, lr
			p->ext_hdr_len = (len -
    a7e6:	bf88      	it	hi
    a7e8:	f36c 0005 	bfihi	r0, ip, #0, #6
			pdu->len = offsetof(struct pdu_adv_com_ext_adv,
    a7ec:	7062      	strb	r2, [r4, #1]
			p->ext_hdr_len = (len -
    a7ee:	bf88      	it	hi
    a7f0:	70a0      	strbhi	r0, [r4, #2]
		if (aux_len > (offsetof(struct pdu_adv_com_ext_adv,
    a7f2:	f1be 0f02 	cmp.w	lr, #2
			aux_p->ext_hdr_len = (aux_len -
    a7f6:	bf81      	itttt	hi
    a7f8:	78aa      	ldrbhi	r2, [r5, #2]
			aux_pdu->len = aux_len;
    a7fa:	f885 e001 	strbhi.w	lr, [r5, #1]
			aux_p->ext_hdr_len = (aux_len -
    a7fe:	f10e 31ff 	addhi.w	r1, lr, #4294967295	; 0xffffffff
    a802:	f361 0205 	bfihi	r2, r1, #0, #6
			aux_pdu->len = offsetof(struct pdu_adv_com_ext_adv,
    a806:	bf96      	itet	ls
    a808:	2201      	movls	r2, #1
			aux_p->ext_hdr_len = (aux_len -
    a80a:	70aa      	strbhi	r2, [r5, #2]
			aux_pdu->len = offsetof(struct pdu_adv_com_ext_adv,
    a80c:	706a      	strbls	r2, [r5, #1]
		if(h->adv_addr){
    a80e:	78e2      	ldrb	r2, [r4, #3]
    a810:	07d1      	lsls	r1, r2, #31
			ptr += BDADDR_SIZE;
    a812:	bf48      	it	mi
    a814:	f104 060a 	addmi.w	r6, r4, #10
		if(h->tgt_addr){
    a818:	0792      	lsls	r2, r2, #30
    a81a:	d507      	bpl.n	a82c <ll_adv_params_set+0x2a8>
			memcpy(ptr, direct_addr, BDADDR_SIZE);
    a81c:	4630      	mov	r0, r6
    a81e:	2206      	movs	r2, #6
    a820:	9913      	ldr	r1, [sp, #76]	; 0x4c
    a822:	9301      	str	r3, [sp, #4]
    a824:	f7f5 fef9 	bl	61a <memcpy>
			ptr += BDADDR_SIZE;
    a828:	9b01      	ldr	r3, [sp, #4]
    a82a:	3606      	adds	r6, #6
		if(h->adi){
    a82c:	78e0      	ldrb	r0, [r4, #3]
    a82e:	0704      	lsls	r4, r0, #28
    a830:	d51a      	bpl.n	a868 <ll_adv_params_set+0x2e4>
			adi_ptr->did = 0x00;
    a832:	f89b 3001 	ldrb.w	r3, [fp, #1]
			adi_ptr->sid = sid & 0x0f;
    a836:	f89d 2068 	ldrb.w	r2, [sp, #104]	; 0x68
    a83a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    a83e:	f002 020f 	and.w	r2, r2, #15
			adi_ptr->did = 0x00;
    a842:	2100      	movs	r1, #0
			adi_ptr->sid = sid & 0x0f;
    a844:	f362 1307 	bfi	r3, r2, #4, #4
			adi_ptr->did = 0x00;
    a848:	f88b 1000 	strb.w	r1, [fp]
			adi_ptr->sid = sid & 0x0f;
    a84c:	f88b 3001 	strb.w	r3, [fp, #1]
			aux_adi_ptr->did = adi_ptr->did;
    a850:	f89a 3001 	ldrb.w	r3, [sl, #1]
    a854:	f88a 1000 	strb.w	r1, [sl]
			aux_adi_ptr->sid = adi_ptr->sid;
    a858:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    a85c:	f362 1307 	bfi	r3, r2, #4, #4
    a860:	f88a 3001 	strb.w	r3, [sl, #1]
			ptr += sizeof(*adi_ptr);
    a864:	3602      	adds	r6, #2
			aux_ptr += sizeof(*aux_adi_ptr);
    a866:	1dab      	adds	r3, r5, #6
		if(h->aux_ptr){
    a868:	06c1      	lsls	r1, r0, #27
    a86a:	d516      	bpl.n	a89a <ll_adv_params_set+0x316>
			ap->chan_idx = 0x03;
    a86c:	f898 2000 	ldrb.w	r2, [r8]
    a870:	2103      	movs	r1, #3
    a872:	f361 0205 	bfi	r2, r1, #0, #6
			ap->offs = 00;	
    a876:	2400      	movs	r4, #0
    a878:	f898 1002 	ldrb.w	r1, [r8, #2]
    a87c:	f888 4001 	strb.w	r4, [r8, #1]
			ap->offs_units = 0;
    a880:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    a884:	f364 12c7 	bfi	r2, r4, #7, #1
    a888:	f888 2000 	strb.w	r2, [r8]
			ap->phy = 0;
    a88c:	f001 02e0 	and.w	r2, r1, #224	; 0xe0
    a890:	f364 1247 	bfi	r2, r4, #5, #3
    a894:	f888 2002 	strb.w	r2, [r8, #2]
			ptr += sizeof(*ap);
    a898:	3603      	adds	r6, #3
		if (h->tx_pwr) {
    a89a:	0642      	lsls	r2, r0, #25
    a89c:	d50a      	bpl.n	a8b4 <ll_adv_params_set+0x330>
			if (tx_pwr) {
    a89e:	9a16      	ldr	r2, [sp, #88]	; 0x58
    a8a0:	b342      	cbz	r2, a8f4 <ll_adv_params_set+0x370>
				if (*tx_pwr != 0x7F) {
    a8a2:	7812      	ldrb	r2, [r2, #0]
    a8a4:	2a7f      	cmp	r2, #127	; 0x7f
    a8a6:	d102      	bne.n	a8ae <ll_adv_params_set+0x32a>
					*tx_pwr = _tx_pwr;
    a8a8:	9916      	ldr	r1, [sp, #88]	; 0x58
    a8aa:	2200      	movs	r2, #0
    a8ac:	700a      	strb	r2, [r1, #0]
			*ptr = _tx_pwr;
    a8ae:	7032      	strb	r2, [r6, #0]
			*aux_ptr = _tx_pwr;
    a8b0:	f803 2b01 	strb.w	r2, [r3], #1
		set_data_ptr = aux_ptr; 
    a8b4:	4a11      	ldr	r2, [pc, #68]	; (a8fc <ll_adv_params_set+0x378>)
    a8b6:	6013      	str	r3, [r2, #0]
	}

	/* update the current scan data */
	radio_adv_data = radio_scan_data_get();
    a8b8:	f7ff f9b0 	bl	9c1c <radio_scan_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    a8bc:	f890 2203 	ldrb.w	r2, [r0, #515]	; 0x203
    a8c0:	eb02 2202 	add.w	r2, r2, r2, lsl #8
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    a8c4:	2404      	movs	r4, #4
    a8c6:	5c83      	ldrb	r3, [r0, r2]
    a8c8:	f364 0303 	bfi	r3, r4, #0, #4
	pdu->rfu = 0;
	pdu->chan_sel = 0;
	pdu->tx_addr = own_addr_type & 0x1;
    a8cc:	f003 03cf 	and.w	r3, r3, #207	; 0xcf
    a8d0:	f369 1386 	bfi	r3, r9, #6, #1
	pdu->rx_addr = 0;
    a8d4:	f36f 13c7 	bfc	r3, #7, #1
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    a8d8:	1881      	adds	r1, r0, r2
	pdu->rx_addr = 0;
    a8da:	5483      	strb	r3, [r0, r2]
	if (pdu->len == 0) {
    a8dc:	784b      	ldrb	r3, [r1, #1]
    a8de:	b90b      	cbnz	r3, a8e4 <ll_adv_params_set+0x360>
		pdu->len = BDADDR_SIZE;
    a8e0:	2306      	movs	r3, #6
    a8e2:	704b      	strb	r3, [r1, #1]
	}

	return 0;
}
    a8e4:	4638      	mov	r0, r7
    a8e6:	b009      	add	sp, #36	; 0x24
    a8e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ptr = (u8_t *)h + sizeof(*h);
    a8ec:	4632      	mov	r2, r6
    a8ee:	e74d      	b.n	a78c <ll_adv_params_set+0x208>
		aux_ptr = (u8_t *)aux_h + sizeof(*aux_h);
    a8f0:	4619      	mov	r1, r3
    a8f2:	e76a      	b.n	a7ca <ll_adv_params_set+0x246>
			_tx_pwr = 0;
    a8f4:	9a16      	ldr	r2, [sp, #88]	; 0x58
    a8f6:	e7da      	b.n	a8ae <ll_adv_params_set+0x32a>
    a8f8:	200025e8 	.word	0x200025e8
    a8fc:	200025f0 	.word	0x200025f0
	} else if (pdu->len == 0) {
    a900:	7863      	ldrb	r3, [r4, #1]
    a902:	2b00      	cmp	r3, #0
    a904:	d1d8      	bne.n	a8b8 <ll_adv_params_set+0x334>
		pdu->len = BDADDR_SIZE;
    a906:	2306      	movs	r3, #6
    a908:	e701      	b.n	a70e <ll_adv_params_set+0x18a>
		return BT_HCI_ERR_CMD_DISALLOWED;
    a90a:	270c      	movs	r7, #12
    a90c:	e7ea      	b.n	a8e4 <ll_adv_params_set+0x360>
				return 0x12; /* invalid HCI cmd param */
    a90e:	2712      	movs	r7, #18
    a910:	e7e8      	b.n	a8e4 <ll_adv_params_set+0x360>
    a912:	bf00      	nop

0000a914 <ll_adv_data_set>:

void ll_adv_data_set(u8_t len, u8_t const *const data)
{
    a914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a918:	4688      	mov	r8, r1
    a91a:	4606      	mov	r6, r0
	struct pdu_adv *pdu;
	u8_t last;


	/* Dont update data if directed or extended advertising. */
	radio_adv_data = radio_adv_data_get();
    a91c:	f7ff f976 	bl	9c0c <radio_adv_data_get>
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    a920:	f890 5203 	ldrb.w	r5, [r0, #515]	; 0x203
    a924:	eb05 2205 	add.w	r2, r5, r5, lsl #8
	radio_adv_data = radio_adv_data_get();
    a928:	4604      	mov	r4, r0
	if(prev->type == PDU_ADV_TYPE_EXT_IND){
    a92a:	f810 e002 	ldrb.w	lr, [r0, r2]
    a92e:	f00e 030f 	and.w	r3, lr, #15
    a932:	2b07      	cmp	r3, #7
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    a934:	eb00 0102 	add.w	r1, r0, r2
	if(prev->type == PDU_ADV_TYPE_EXT_IND){
    a938:	d111      	bne.n	a95e <ll_adv_data_set+0x4a>
	
		struct radio_adv_data *radio_aux_adv_data;
		struct pdu_adv *aux_pdu;
		u8_t last;

		radio_aux_adv_data = radio_aux_adv_data_get();
    a93a:	f7ff f96b 	bl	9c14 <radio_aux_adv_data_get>
		aux_pdu =  (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0]; 			//cofused about data[radio_aux_adv_data->last][0] name
    a93e:	f890 4203 	ldrb.w	r4, [r0, #515]	; 0x203

		memcpy(set_data_ptr, data, len);
    a942:	4b26      	ldr	r3, [pc, #152]	; (a9dc <ll_adv_data_set+0xc8>)
		aux_pdu =  (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0]; 			//cofused about data[radio_aux_adv_data->last][0] name
    a944:	eb04 2404 	add.w	r4, r4, r4, lsl #8
    a948:	4404      	add	r4, r0
		memcpy(set_data_ptr, data, len);
    a94a:	4632      	mov	r2, r6
    a94c:	6818      	ldr	r0, [r3, #0]
    a94e:	4641      	mov	r1, r8
    a950:	f7f5 fe63 	bl	61a <memcpy>
		aux_pdu->len += len;
    a954:	7863      	ldrb	r3, [r4, #1]
    a956:	441e      	add	r6, r3
    a958:	7066      	strb	r6, [r4, #1]
    a95a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}else{
		if ((prev->type == PDU_ADV_TYPE_DIRECT_IND)) {
    a95e:	2b01      	cmp	r3, #1
    a960:	d039      	beq.n	a9d6 <ll_adv_data_set+0xc2>
		
		return;
		}

		/* use the last index in double buffer, */
		if (radio_adv_data->first == radio_adv_data->last) {
    a962:	f890 3202 	ldrb.w	r3, [r0, #514]	; 0x202
    a966:	42ab      	cmp	r3, r5
    a968:	d104      	bne.n	a974 <ll_adv_data_set+0x60>
			last = radio_adv_data->last + 1;
    a96a:	3501      	adds	r5, #1
    a96c:	b2ed      	uxtb	r5, r5
			if (last == DOUBLE_BUFFER_SIZE) {
				last = 0;
    a96e:	2d02      	cmp	r5, #2
    a970:	bf08      	it	eq
    a972:	2500      	moveq	r5, #0
		} else {
			last = radio_adv_data->last;
		}

		/* update adv pdu fields. */
		pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
    a974:	eb05 2305 	add.w	r3, r5, r5, lsl #8
    a978:	18e7      	adds	r7, r4, r3
		pdu->type = prev->type;
    a97a:	5ce0      	ldrb	r0, [r4, r3]
    a97c:	f36e 0003 	bfi	r0, lr, #0, #4
		pdu->rfu = 0;
    a980:	f36f 1004 	bfc	r0, #4, #1
    a984:	54e0      	strb	r0, [r4, r3]

		if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2)) {
			pdu->chan_sel = prev->chan_sel;
    a986:	5ca0      	ldrb	r0, [r4, r2]
    a988:	f814 e003 	ldrb.w	lr, [r4, r3]
    a98c:	f3c0 1040 	ubfx	r0, r0, #5, #1
    a990:	f360 1e45 	bfi	lr, r0, #5, #1
    a994:	f804 e003 	strb.w	lr, [r4, r3]
		} else {
			pdu->chan_sel = 0;
		}

		pdu->tx_addr = prev->tx_addr;
    a998:	5ca0      	ldrb	r0, [r4, r2]
    a99a:	fa5f fe8e 	uxtb.w	lr, lr
    a99e:	f3c0 1080 	ubfx	r0, r0, #6, #1
    a9a2:	f360 1e86 	bfi	lr, r0, #6, #1
    a9a6:	f804 e003 	strb.w	lr, [r4, r3]
		pdu->rx_addr = prev->rx_addr;
    a9aa:	5ca2      	ldrb	r2, [r4, r2]
    a9ac:	fa5f f08e 	uxtb.w	r0, lr
    a9b0:	09d2      	lsrs	r2, r2, #7
    a9b2:	f362 10c7 	bfi	r0, r2, #7, #1
    a9b6:	54e0      	strb	r0, [r4, r3]
		
		
		memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
    a9b8:	2206      	movs	r2, #6
    a9ba:	3102      	adds	r1, #2
    a9bc:	1cb8      	adds	r0, r7, #2
    a9be:	f7f5 fe2c 	bl	61a <memcpy>
		memcpy(&pdu->adv_ind.data[0], data, len);
    a9c2:	4632      	mov	r2, r6
    a9c4:	4641      	mov	r1, r8
    a9c6:	f107 0008 	add.w	r0, r7, #8
		pdu->len = BDADDR_SIZE + len;
    a9ca:	3606      	adds	r6, #6
		memcpy(&pdu->adv_ind.data[0], data, len);
    a9cc:	f7f5 fe25 	bl	61a <memcpy>
		pdu->len = BDADDR_SIZE + len;
    a9d0:	707e      	strb	r6, [r7, #1]
		
		/* commit the update so controller picks it. */
		radio_adv_data->last = last;
    a9d2:	f884 5203 	strb.w	r5, [r4, #515]	; 0x203
    a9d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a9da:	bf00      	nop
    a9dc:	200025f0 	.word	0x200025f0

0000a9e0 <ll_scan_data_set>:
	
//#endif	/* CONFIG_BT_CTLR_ADV_EXT */
}

void ll_scan_data_set(u8_t len, u8_t const *const data)
{
    a9e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a9e4:	4606      	mov	r6, r0
    a9e6:	460f      	mov	r7, r1
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* use the last index in double buffer, */
	radio_scan_data = radio_scan_data_get();
    a9e8:	f7ff f918 	bl	9c1c <radio_scan_data_get>
	if (radio_scan_data->first == radio_scan_data->last) {
    a9ec:	f890 3203 	ldrb.w	r3, [r0, #515]	; 0x203
    a9f0:	f890 2202 	ldrb.w	r2, [r0, #514]	; 0x202
    a9f4:	429a      	cmp	r2, r3
	radio_scan_data = radio_scan_data_get();
    a9f6:	4604      	mov	r4, r0
	if (radio_scan_data->first == radio_scan_data->last) {
    a9f8:	d131      	bne.n	aa5e <ll_scan_data_set+0x7e>
		last = radio_scan_data->last + 1;
    a9fa:	1c5d      	adds	r5, r3, #1
    a9fc:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
    a9fe:	2d02      	cmp	r5, #2
			last = 0;
    aa00:	bf08      	it	eq
    aa02:	2500      	moveq	r5, #0
	}

	/* update scan pdu fields. */
	prev = (struct pdu_adv *)
	       &radio_scan_data->data[radio_scan_data->last][0];
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
    aa04:	eb05 2205 	add.w	r2, r5, r5, lsl #8
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    aa08:	f04f 0e04 	mov.w	lr, #4
    aa0c:	5ca0      	ldrb	r0, [r4, r2]
    aa0e:	f36e 0003 	bfi	r0, lr, #0, #4
	pdu->rfu = 0;
	pdu->chan_sel = 0;
    aa12:	f000 00ef 	and.w	r0, r0, #239	; 0xef
    aa16:	f36f 1045 	bfc	r0, #5, #1
    aa1a:	54a0      	strb	r0, [r4, r2]
	prev = (struct pdu_adv *)
    aa1c:	eb03 2303 	add.w	r3, r3, r3, lsl #8
    aa20:	18e1      	adds	r1, r4, r3
	pdu->tx_addr = prev->tx_addr;
    aa22:	5ce0      	ldrb	r0, [r4, r3]
    aa24:	5ca3      	ldrb	r3, [r4, r2]
    aa26:	f3c0 1080 	ubfx	r0, r0, #6, #1
    aa2a:	f360 1386 	bfi	r3, r0, #6, #1
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
    aa2e:	eb04 0802 	add.w	r8, r4, r2
	pdu->rx_addr = 0;
    aa32:	f36f 13c7 	bfc	r3, #7, #1
    aa36:	54a3      	strb	r3, [r4, r2]
	pdu->len = BDADDR_SIZE + len;
    aa38:	1db3      	adds	r3, r6, #6
    aa3a:	f888 3001 	strb.w	r3, [r8, #1]
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
    aa3e:	2206      	movs	r2, #6
    aa40:	3102      	adds	r1, #2
    aa42:	f108 0002 	add.w	r0, r8, #2
    aa46:	f7f5 fde8 	bl	61a <memcpy>
	memcpy(&pdu->scan_rsp.data[0], data, len);
    aa4a:	4632      	mov	r2, r6
    aa4c:	4639      	mov	r1, r7
    aa4e:	f108 0008 	add.w	r0, r8, #8
    aa52:	f7f5 fde2 	bl	61a <memcpy>

	/* commit the update so controller picks it. */
	radio_scan_data->last = last;
    aa56:	f884 5203 	strb.w	r5, [r4, #515]	; 0x203
    aa5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    aa5e:	461d      	mov	r5, r3
    aa60:	e7d0      	b.n	aa04 <ll_scan_data_set+0x24>
	...

0000aa64 <ll_adv_enable>:
}

u32_t ll_adv_enable(u8_t enable)
{
    aa64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct pdu_adv *pdu_scan;
	struct pdu_adv *pdu_adv;
	//struct pdu_adv *aux_pdu_adv;
	u32_t status;

	if (!enable) {
    aa68:	b920      	cbnz	r0, aa74 <ll_adv_enable+0x10>
	status = radio_adv_enable(ll_adv.interval, ll_adv.chan_map,
				  ll_adv.filter_policy, rl_idx);
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	return status;
}
    aa6a:	b003      	add	sp, #12
    aa6c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		return radio_adv_disable();
    aa70:	f7ff bbfc 	b.w	a26c <radio_adv_disable>
	} else if (ll_adv_is_enabled()) {
    aa74:	f7ff f8d6 	bl	9c24 <ll_adv_is_enabled>
    aa78:	4607      	mov	r7, r0
    aa7a:	2800      	cmp	r0, #0
    aa7c:	d14c      	bne.n	ab18 <ll_adv_enable+0xb4>
	radio_adv_data = radio_adv_data_get();
    aa7e:	f7ff f8c5 	bl	9c0c <radio_adv_data_get>
    aa82:	4680      	mov	r8, r0
	radio_scan_data = radio_scan_data_get();
    aa84:	f7ff f8ca 	bl	9c1c <radio_scan_data_get>
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
    aa88:	f898 4203 	ldrb.w	r4, [r8, #515]	; 0x203
    aa8c:	eb04 2404 	add.w	r4, r4, r4, lsl #8
	radio_scan_data = radio_scan_data_get();
    aa90:	4605      	mov	r5, r0
	} else if (pdu_adv->type == PDU_ADV_TYPE_EXT_IND) {
    aa92:	f818 0004 	ldrb.w	r0, [r8, r4]
    aa96:	f000 030f 	and.w	r3, r0, #15
    aa9a:	2b07      	cmp	r3, #7
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
    aa9c:	eb08 0904 	add.w	r9, r8, r4
	} else if (pdu_adv->type == PDU_ADV_TYPE_EXT_IND) {
    aaa0:	d11f      	bne.n	aae2 <ll_adv_enable+0x7e>
		if (h->adv_addr) {
    aaa2:	f899 3003 	ldrb.w	r3, [r9, #3]
    aaa6:	07db      	lsls	r3, r3, #31
    aaa8:	d50a      	bpl.n	aac0 <ll_adv_enable+0x5c>
			memcpy(ptr, ll_addr_get(pdu_adv->tx_addr, NULL),
    aaaa:	4639      	mov	r1, r7
    aaac:	f3c0 1080 	ubfx	r0, r0, #6, #1
    aab0:	f7f9 ff78 	bl	49a4 <ll_addr_get>
    aab4:	2206      	movs	r2, #6
    aab6:	4601      	mov	r1, r0
    aab8:	f109 0004 	add.w	r0, r9, #4
			memcpy(&pdu_scan->scan_rsp.addr[0],
    aabc:	f7f5 fdad 	bl	61a <memcpy>
				  ll_adv.chan_map, ll_adv.filter_policy,
    aac0:	4b16      	ldr	r3, [pc, #88]	; (ab1c <ll_adv_enable+0xb8>)
    aac2:	7818      	ldrb	r0, [r3, #0]
	status = radio_adv_enable(ll_adv.phy_p, ll_adv.interval,
    aac4:	8859      	ldrh	r1, [r3, #2]
    aac6:	791b      	ldrb	r3, [r3, #4]
    aac8:	9301      	str	r3, [sp, #4]
    aaca:	23ff      	movs	r3, #255	; 0xff
    aacc:	9300      	str	r3, [sp, #0]
    aace:	f000 0207 	and.w	r2, r0, #7
    aad2:	f3c0 03c1 	ubfx	r3, r0, #3, #2
    aad6:	0940      	lsrs	r0, r0, #5
    aad8:	f7ff f9ba 	bl	9e50 <radio_adv_enable>
}
    aadc:	b003      	add	sp, #12
    aade:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			       ll_addr_get(pdu_adv->tx_addr, NULL),
    aae2:	4639      	mov	r1, r7
    aae4:	f3c0 1080 	ubfx	r0, r0, #6, #1
			[radio_scan_data->last][0];
    aae8:	f895 6203 	ldrb.w	r6, [r5, #515]	; 0x203
			       ll_addr_get(pdu_adv->tx_addr, NULL),
    aaec:	f7f9 ff5a 	bl	49a4 <ll_addr_get>
			memcpy(&pdu_adv->adv_ind.addr[0],
    aaf0:	2206      	movs	r2, #6
    aaf2:	4601      	mov	r1, r0
    aaf4:	f109 0002 	add.w	r0, r9, #2
    aaf8:	f7f5 fd8f 	bl	61a <memcpy>
			       ll_addr_get(pdu_adv->tx_addr, NULL),
    aafc:	f818 0004 	ldrb.w	r0, [r8, r4]
    ab00:	4639      	mov	r1, r7
    ab02:	f3c0 1080 	ubfx	r0, r0, #6, #1
    ab06:	f7f9 ff4d 	bl	49a4 <ll_addr_get>
	pdu_scan = (struct pdu_adv *)&radio_scan_data->data
    ab0a:	eb06 2606 	add.w	r6, r6, r6, lsl #8
    ab0e:	4435      	add	r5, r6
			memcpy(&pdu_scan->scan_rsp.addr[0],
    ab10:	4601      	mov	r1, r0
    ab12:	2206      	movs	r2, #6
    ab14:	1ca8      	adds	r0, r5, #2
    ab16:	e7d1      	b.n	aabc <ll_adv_enable+0x58>
		return 0;
    ab18:	2000      	movs	r0, #0
    ab1a:	e7df      	b.n	aadc <ll_adv_enable+0x78>
    ab1c:	200025e8 	.word	0x200025e8

0000ab20 <ctrl_filter_get>:
	return rl[rl_idx].wl;
}
#endif

struct ll_filter *ctrl_filter_get(bool whitelist)
{
    ab20:	b508      	push	{r3, lr}
	if (whitelist) {
		return &wl_filter;
	}
	return &rl_filter;
#else
	LL_ASSERT(whitelist);
    ab22:	b950      	cbnz	r0, ab3a <ctrl_filter_get+0x1a>
    ab24:	4a06      	ldr	r2, [pc, #24]	; (ab40 <ctrl_filter_get+0x20>)
    ab26:	4907      	ldr	r1, [pc, #28]	; (ab44 <ctrl_filter_get+0x24>)
    ab28:	2003      	movs	r0, #3
    ab2a:	f7f7 fb69 	bl	2200 <bt_log>
    ab2e:	4040      	eors	r0, r0
    ab30:	f380 8811 	msr	BASEPRI, r0
    ab34:	f04f 0004 	mov.w	r0, #4
    ab38:	df02      	svc	2
	return &wl_filter;
#endif
}
    ab3a:	4803      	ldr	r0, [pc, #12]	; (ab48 <ctrl_filter_get+0x28>)
    ab3c:	bd08      	pop	{r3, pc}
    ab3e:	bf00      	nop
    ab40:	0000efec 	.word	0x0000efec
    ab44:	0000effc 	.word	0x0000effc
    ab48:	200025f4 	.word	0x200025f4

0000ab4c <ll_wl_size_get>:

u32_t ll_wl_size_get(void)
{
	return WL_SIZE;
}
    ab4c:	2008      	movs	r0, #8
    ab4e:	4770      	bx	lr

0000ab50 <ll_wl_clear>:

u32_t ll_wl_clear(void)
{
    ab50:	b510      	push	{r4, lr}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    ab52:	f7ff f86f 	bl	9c34 <radio_adv_filter_pol_get>
    ab56:	4604      	mov	r4, r0
    ab58:	b110      	cbz	r0, ab60 <ll_wl_clear+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
    ab5a:	240c      	movs	r4, #12
	filter_clear(&wl_filter);
#endif /* CONFIG_BT_CTLR_PRIVACY */
	wl_anon = 0;

	return 0;
}
    ab5c:	4620      	mov	r0, r4
    ab5e:	bd10      	pop	{r4, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    ab60:	f7ff f88c 	bl	9c7c <radio_scan_filter_pol_get>
    ab64:	07c3      	lsls	r3, r0, #31
    ab66:	d4f8      	bmi.n	ab5a <ll_wl_clear+0xa>
	filter->enable_bitmask = 0;
    ab68:	4b02      	ldr	r3, [pc, #8]	; (ab74 <ll_wl_clear+0x24>)
    ab6a:	701c      	strb	r4, [r3, #0]
	filter->addr_type_bitmask = 0;
    ab6c:	705c      	strb	r4, [r3, #1]
	wl_anon = 0;
    ab6e:	4b02      	ldr	r3, [pc, #8]	; (ab78 <ll_wl_clear+0x28>)
    ab70:	701c      	strb	r4, [r3, #0]
	return 0;
    ab72:	e7f3      	b.n	ab5c <ll_wl_clear+0xc>
    ab74:	200025f4 	.word	0x200025f4
    ab78:	20002c28 	.word	0x20002c28

0000ab7c <ll_wl_add>:

u32_t ll_wl_add(bt_addr_le_t *addr)
{
    ab7c:	b570      	push	{r4, r5, r6, lr}
    ab7e:	4604      	mov	r4, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    ab80:	f7ff f858 	bl	9c34 <radio_adv_filter_pol_get>
    ab84:	4605      	mov	r5, r0
    ab86:	b110      	cbz	r0, ab8e <ll_wl_add+0x12>
		return BT_HCI_ERR_CMD_DISALLOWED;
    ab88:	250c      	movs	r5, #12
#if defined(CONFIG_BT_CTLR_PRIVACY)
	return wl_add(addr);
#else
	return filter_add(&wl_filter, addr->type, addr->a.val);
#endif /* CONFIG_BT_CTLR_PRIVACY */
}
    ab8a:	4628      	mov	r0, r5
    ab8c:	bd70      	pop	{r4, r5, r6, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    ab8e:	f7ff f875 	bl	9c7c <radio_scan_filter_pol_get>
    ab92:	07c3      	lsls	r3, r0, #31
    ab94:	d4f8      	bmi.n	ab88 <ll_wl_add+0xc>
	if (addr->type == ADDR_TYPE_ANON) {
    ab96:	7823      	ldrb	r3, [r4, #0]
    ab98:	2bff      	cmp	r3, #255	; 0xff
    ab9a:	d103      	bne.n	aba4 <ll_wl_add+0x28>
		wl_anon = 1;
    ab9c:	4b11      	ldr	r3, [pc, #68]	; (abe4 <ll_wl_add+0x68>)
    ab9e:	2201      	movs	r2, #1
    aba0:	701a      	strb	r2, [r3, #0]
		return 0;
    aba2:	e7f2      	b.n	ab8a <ll_wl_add+0xe>
	if (filter->enable_bitmask == 0xFF) {
    aba4:	4910      	ldr	r1, [pc, #64]	; (abe8 <ll_wl_add+0x6c>)
    aba6:	780a      	ldrb	r2, [r1, #0]
    aba8:	2aff      	cmp	r2, #255	; 0xff
    abaa:	d018      	beq.n	abde <ll_wl_add+0x62>
    abac:	4628      	mov	r0, r5
	     (filter->enable_bitmask & BIT(index));
    abae:	fa22 f600 	lsr.w	r6, r2, r0
	for (index = 0;
    abb2:	07f6      	lsls	r6, r6, #31
    abb4:	d411      	bmi.n	abda <ll_wl_add+0x5e>
	filter->enable_bitmask |= BIT(index);
    abb6:	2601      	movs	r6, #1
    abb8:	4086      	lsls	r6, r0
    abba:	4332      	orrs	r2, r6
    abbc:	700a      	strb	r2, [r1, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    abbe:	f003 0301 	and.w	r3, r3, #1
    abc2:	784a      	ldrb	r2, [r1, #1]
    abc4:	4083      	lsls	r3, r0
    abc6:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    abc8:	2206      	movs	r2, #6
    abca:	fb02 1000 	mla	r0, r2, r0, r1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    abce:	704b      	strb	r3, [r1, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    abd0:	3002      	adds	r0, #2
    abd2:	1c61      	adds	r1, r4, #1
    abd4:	f7f5 fd21 	bl	61a <memcpy>
    abd8:	e7d7      	b.n	ab8a <ll_wl_add+0xe>
	     index++) {
    abda:	3001      	adds	r0, #1
    abdc:	e7e7      	b.n	abae <ll_wl_add+0x32>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    abde:	2507      	movs	r5, #7
    abe0:	e7d3      	b.n	ab8a <ll_wl_add+0xe>
    abe2:	bf00      	nop
    abe4:	20002c28 	.word	0x20002c28
    abe8:	200025f4 	.word	0x200025f4

0000abec <ll_wl_remove>:

u32_t ll_wl_remove(bt_addr_le_t *addr)
{
    abec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    abf0:	4607      	mov	r7, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    abf2:	f7ff f81f 	bl	9c34 <radio_adv_filter_pol_get>
    abf6:	4606      	mov	r6, r0
    abf8:	b118      	cbz	r0, ac02 <ll_wl_remove+0x16>
		return BT_HCI_ERR_CMD_DISALLOWED;
    abfa:	260c      	movs	r6, #12
#if defined(CONFIG_BT_CTLR_PRIVACY)
	return wl_remove(addr);
#else
	return filter_remove(&wl_filter, addr->type, addr->a.val);
#endif /* CONFIG_BT_CTLR_PRIVACY */
}
    abfc:	4630      	mov	r0, r6
    abfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    ac02:	f7ff f83b 	bl	9c7c <radio_scan_filter_pol_get>
    ac06:	07c1      	lsls	r1, r0, #31
    ac08:	d4f7      	bmi.n	abfa <ll_wl_remove+0xe>
	if (addr->type == ADDR_TYPE_ANON) {
    ac0a:	f897 8000 	ldrb.w	r8, [r7]
    ac0e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    ac12:	d102      	bne.n	ac1a <ll_wl_remove+0x2e>
		wl_anon = 0;
    ac14:	4b16      	ldr	r3, [pc, #88]	; (ac70 <ll_wl_remove+0x84>)
    ac16:	701e      	strb	r6, [r3, #0]
		return 0;
    ac18:	e7f0      	b.n	abfc <ll_wl_remove+0x10>
	if (!filter->enable_bitmask) {
    ac1a:	4c16      	ldr	r4, [pc, #88]	; (ac74 <ll_wl_remove+0x88>)
    ac1c:	7823      	ldrb	r3, [r4, #0]
    ac1e:	b133      	cbz	r3, ac2e <ll_wl_remove+0x42>
    ac20:	2508      	movs	r5, #8
	return filter_remove(&wl_filter, addr->type, addr->a.val);
    ac22:	3701      	adds	r7, #1
		    !memcmp(filter->bdaddr[index], bdaddr, BDADDR_SIZE)) {
    ac24:	f04f 0906 	mov.w	r9, #6
	while (index--) {
    ac28:	f115 35ff 	adds.w	r5, r5, #4294967295	; 0xffffffff
    ac2c:	d201      	bcs.n	ac32 <ll_wl_remove+0x46>
		return BT_HCI_ERR_INVALID_PARAM;
    ac2e:	2612      	movs	r6, #18
    ac30:	e7e4      	b.n	abfc <ll_wl_remove+0x10>
		if ((filter->enable_bitmask & BIT(index)) &&
    ac32:	7823      	ldrb	r3, [r4, #0]
    ac34:	40eb      	lsrs	r3, r5
    ac36:	07da      	lsls	r2, r3, #31
    ac38:	d5f6      	bpl.n	ac28 <ll_wl_remove+0x3c>
		    (((filter->addr_type_bitmask >> index) & 0x01) ==
    ac3a:	7863      	ldrb	r3, [r4, #1]
    ac3c:	412b      	asrs	r3, r5
    ac3e:	ea83 0308 	eor.w	r3, r3, r8
		if ((filter->enable_bitmask & BIT(index)) &&
    ac42:	07db      	lsls	r3, r3, #31
    ac44:	d4f0      	bmi.n	ac28 <ll_wl_remove+0x3c>
		    !memcmp(filter->bdaddr[index], bdaddr, BDADDR_SIZE)) {
    ac46:	fb09 4005 	mla	r0, r9, r5, r4
    ac4a:	2206      	movs	r2, #6
    ac4c:	4639      	mov	r1, r7
    ac4e:	3002      	adds	r0, #2
    ac50:	f7f5 fcce 	bl	5f0 <memcmp>
		     (addr_type & 0x01)) &&
    ac54:	2800      	cmp	r0, #0
    ac56:	d1e7      	bne.n	ac28 <ll_wl_remove+0x3c>
			filter->enable_bitmask &= ~BIT(index);
    ac58:	2301      	movs	r3, #1
    ac5a:	40ab      	lsls	r3, r5
    ac5c:	7822      	ldrb	r2, [r4, #0]
    ac5e:	43db      	mvns	r3, r3
    ac60:	b2db      	uxtb	r3, r3
    ac62:	401a      	ands	r2, r3
    ac64:	7022      	strb	r2, [r4, #0]
			filter->addr_type_bitmask &= ~BIT(index);
    ac66:	7862      	ldrb	r2, [r4, #1]
    ac68:	4013      	ands	r3, r2
    ac6a:	7063      	strb	r3, [r4, #1]
    ac6c:	e7c6      	b.n	abfc <ll_wl_remove+0x10>
    ac6e:	bf00      	nop
    ac70:	20002c28 	.word	0x20002c28
    ac74:	200025f4 	.word	0x200025f4

0000ac78 <ll_filter_reset>:

#endif /* CONFIG_BT_CTLR_PRIVACY */

void ll_filter_reset(bool init)
{
	wl_anon = 0;
    ac78:	4a03      	ldr	r2, [pc, #12]	; (ac88 <ll_filter_reset+0x10>)
    ac7a:	2300      	movs	r3, #0
    ac7c:	7013      	strb	r3, [r2, #0]
	filter->enable_bitmask = 0;
    ac7e:	4a03      	ldr	r2, [pc, #12]	; (ac8c <ll_filter_reset+0x14>)
    ac80:	7013      	strb	r3, [r2, #0]
	filter->addr_type_bitmask = 0;
    ac82:	7053      	strb	r3, [r2, #1]
    ac84:	4770      	bx	lr
    ac86:	bf00      	nop
    ac88:	20002c28 	.word	0x20002c28
    ac8c:	200025f4 	.word	0x200025f4

0000ac90 <cntr_init>:

static u8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
    ac90:	4b05      	ldr	r3, [pc, #20]	; (aca8 <cntr_init+0x18>)
    ac92:	2200      	movs	r2, #0
    ac94:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	NRF_RTC->EVTENSET = (RTC_EVTENSET_COMPARE0_Msk |
    ac98:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    ac9c:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
			     RTC_EVTENSET_COMPARE1_Msk);
	NRF_RTC->INTENSET = (RTC_INTENSET_COMPARE0_Msk |
    aca0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    aca4:	4770      	bx	lr
    aca6:	bf00      	nop
    aca8:	4000b000 	.word	0x4000b000

0000acac <cntr_start>:
#endif
}

u32_t cntr_start(void)
{
	if (_refcount++) {
    acac:	4a04      	ldr	r2, [pc, #16]	; (acc0 <cntr_start+0x14>)
    acae:	7813      	ldrb	r3, [r2, #0]
    acb0:	1c59      	adds	r1, r3, #1
    acb2:	7011      	strb	r1, [r2, #0]
    acb4:	2001      	movs	r0, #1
    acb6:	b913      	cbnz	r3, acbe <cntr_start+0x12>
		return 1;
	}

	NRF_RTC->TASKS_START = 1;
    acb8:	4a02      	ldr	r2, [pc, #8]	; (acc4 <cntr_start+0x18>)
    acba:	6010      	str	r0, [r2, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
    acbc:	4618      	mov	r0, r3
}
    acbe:	4770      	bx	lr
    acc0:	20002626 	.word	0x20002626
    acc4:	4000b000 	.word	0x4000b000

0000acc8 <cntr_stop>:

u32_t cntr_stop(void)
{
    acc8:	b508      	push	{r3, lr}
	LL_ASSERT(_refcount);
    acca:	4b0c      	ldr	r3, [pc, #48]	; (acfc <cntr_stop+0x34>)
    accc:	7818      	ldrb	r0, [r3, #0]
    acce:	b950      	cbnz	r0, ace6 <cntr_stop+0x1e>
    acd0:	4a0b      	ldr	r2, [pc, #44]	; (ad00 <cntr_stop+0x38>)
    acd2:	490c      	ldr	r1, [pc, #48]	; (ad04 <cntr_stop+0x3c>)
    acd4:	2003      	movs	r0, #3
    acd6:	f7f7 fa93 	bl	2200 <bt_log>
    acda:	4040      	eors	r0, r0
    acdc:	f380 8811 	msr	BASEPRI, r0
    ace0:	f04f 0004 	mov.w	r0, #4
    ace4:	df02      	svc	2

	if (--_refcount) {
    ace6:	3801      	subs	r0, #1
    ace8:	b2c0      	uxtb	r0, r0
    acea:	7018      	strb	r0, [r3, #0]
    acec:	2301      	movs	r3, #1
    acee:	b910      	cbnz	r0, acf6 <cntr_stop+0x2e>
		return 1;
	}

	NRF_RTC->TASKS_STOP = 1;
    acf0:	4a05      	ldr	r2, [pc, #20]	; (ad08 <cntr_stop+0x40>)
    acf2:	6053      	str	r3, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
    acf4:	bd08      	pop	{r3, pc}
		return 1;
    acf6:	4618      	mov	r0, r3
}
    acf8:	bd08      	pop	{r3, pc}
    acfa:	bf00      	nop
    acfc:	20002626 	.word	0x20002626
    ad00:	0000f01b 	.word	0x0000f01b
    ad04:	0000f025 	.word	0x0000f025
    ad08:	4000b000 	.word	0x4000b000

0000ad0c <cntr_cnt_get>:

u32_t cntr_cnt_get(void)
{
	return NRF_RTC->COUNTER;
    ad0c:	4b01      	ldr	r3, [pc, #4]	; (ad14 <cntr_cnt_get+0x8>)
    ad0e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
}
    ad12:	4770      	bx	lr
    ad14:	4000b000 	.word	0x4000b000

0000ad18 <cntr_cmp_set>:

void cntr_cmp_set(u8_t cmp, u32_t value)
{
	NRF_RTC->CC[cmp] = value;
    ad18:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    ad1c:	4b01      	ldr	r3, [pc, #4]	; (ad24 <cntr_cmp_set+0xc>)
    ad1e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
    ad22:	4770      	bx	lr
    ad24:	4000b000 	.word	0x4000b000

0000ad28 <do_ecb>:
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
	do {
		NRF_ECB->TASKS_STOPECB = 1;
    ad28:	4b11      	ldr	r3, [pc, #68]	; (ad70 <do_ecb+0x48>)
{
    ad2a:	b570      	push	{r4, r5, r6, lr}
		NRF_ECB->TASKS_STOPECB = 1;
    ad2c:	2101      	movs	r1, #1
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
    ad2e:	2500      	movs	r5, #0
    ad30:	461a      	mov	r2, r3
		NRF_ECB->TASKS_STOPECB = 1;
    ad32:	6059      	str	r1, [r3, #4]
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
    ad34:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
    ad38:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
    ad3c:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
		NRF_ECB->TASKS_STARTECB = 1;
    ad40:	6019      	str	r1, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
		NRF_ECB_regw_sideeffects_TASKS_STARTECB();
#endif
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    ad42:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
    ad46:	b934      	cbnz	r4, ad56 <do_ecb+0x2e>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    ad48:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    ad4c:	b91c      	cbnz	r4, ad56 <do_ecb+0x2e>
		       (NRF_ECB->ECBDATAPTR != 0)) {
    ad4e:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    ad52:	2c00      	cmp	r4, #0
    ad54:	d1f5      	bne.n	ad42 <do_ecb+0x1a>
			__WFE();
#else
			/*__WFE();*/
#endif
		}
		NRF_ECB->TASKS_STOPECB = 1;
    ad56:	6051      	str	r1, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
#endif
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
    ad58:	f8d2 4104 	ldr.w	r4, [r2, #260]	; 0x104
    ad5c:	2c00      	cmp	r4, #0
    ad5e:	d1e8      	bne.n	ad32 <do_ecb+0xa>
    ad60:	f8d2 6504 	ldr.w	r6, [r2, #1284]	; 0x504
    ad64:	2e00      	cmp	r6, #0
    ad66:	d0e4      	beq.n	ad32 <do_ecb+0xa>

	NRF_ECB->ECBDATAPTR = 0;
    ad68:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
    ad6c:	bd70      	pop	{r4, r5, r6, pc}
    ad6e:	bf00      	nop
    ad70:	4000e000 	.word	0x4000e000

0000ad74 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
    ad74:	b570      	push	{r4, r5, r6, lr}
    ad76:	b08c      	sub	sp, #48	; 0x30
    ad78:	460e      	mov	r6, r1
    ad7a:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    ad7c:	4601      	mov	r1, r0
    ad7e:	2210      	movs	r2, #16
    ad80:	4668      	mov	r0, sp
{
    ad82:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    ad84:	f7f8 fe64 	bl	3a50 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
    ad88:	2210      	movs	r2, #16
    ad8a:	eb0d 0002 	add.w	r0, sp, r2
    ad8e:	4631      	mov	r1, r6
    ad90:	f7f8 fe5e 	bl	3a50 <mem_rcopy>

	do_ecb(&ecb);
    ad94:	4668      	mov	r0, sp
    ad96:	f7ff ffc7 	bl	ad28 <do_ecb>

	if (cipher_text_le) {
    ad9a:	b125      	cbz	r5, ada6 <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
    ad9c:	2210      	movs	r2, #16
    ad9e:	a908      	add	r1, sp, #32
    ada0:	4628      	mov	r0, r5
    ada2:	f7f8 fe55 	bl	3a50 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
    ada6:	b124      	cbz	r4, adb2 <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
    ada8:	2210      	movs	r2, #16
    adaa:	a908      	add	r1, sp, #32
    adac:	4620      	mov	r0, r4
    adae:	f7f5 fc34 	bl	61a <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
    adb2:	b00c      	add	sp, #48	; 0x30
    adb4:	bd70      	pop	{r4, r5, r6, pc}
	...

0000adb8 <hal_radio_enable_on_tick_ppi_config_and_enable>:
#define HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX \
	((u32_t)&(NRF_RADIO->TASKS_RXEN))

static inline void hal_radio_enable_on_tick_ppi_config_and_enable(u8_t trx)
{
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_EVT =
    adb8:	4b07      	ldr	r3, [pc, #28]	; (add8 <hal_radio_enable_on_tick_ppi_config_and_enable+0x20>)
    adba:	4a08      	ldr	r2, [pc, #32]	; (addc <hal_radio_enable_on_tick_ppi_config_and_enable+0x24>)
    adbc:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
		HAL_RADIO_ENABLE_ON_TICK_PPI_EVT;
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
		(trx) ? HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_TX :
    adc0:	4907      	ldr	r1, [pc, #28]	; (ade0 <hal_radio_enable_on_tick_ppi_config_and_enable+0x28>)
    adc2:	4a08      	ldr	r2, [pc, #32]	; (ade4 <hal_radio_enable_on_tick_ppi_config_and_enable+0x2c>)
    adc4:	2800      	cmp	r0, #0
    adc6:	bf14      	ite	ne
    adc8:	4610      	movne	r0, r2
    adca:	4608      	moveq	r0, r1
			HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX;
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
    adcc:	2201      	movs	r2, #1
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
    adce:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
    add2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    add6:	4770      	bx	lr
    add8:	4001f000 	.word	0x4001f000
    addc:	40008140 	.word	0x40008140
    ade0:	40001004 	.word	0x40001004
    ade4:	40001000 	.word	0x40001000

0000ade8 <sw_switch.isra.9>:
}

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
static u8_t sw_tifs_toggle;

static void sw_switch(u8_t dir, u8_t phy_curr, u8_t flags_curr, u8_t phy_next,
    ade8:	b5f0      	push	{r4, r5, r6, r7, lr}
		      u8_t flags_next)
{
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
    adea:	4e2c      	ldr	r6, [pc, #176]	; (ae9c <sw_switch.isra.9+0xb4>)
	u8_t cc = SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle);
	u32_t delay;

	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_EVT =
    adec:	4f2c      	ldr	r7, [pc, #176]	; (aea0 <sw_switch.isra.9+0xb8>)
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
    adee:	7835      	ldrb	r5, [r6, #0]
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_EVT =
    adf0:	4b2c      	ldr	r3, [pc, #176]	; (aea4 <sw_switch.isra.9+0xbc>)
    adf2:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_EVT;
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_TASK =
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(sw_tifs_toggle);
    adf6:	b22b      	sxth	r3, r5
    adf8:	00dc      	lsls	r4, r3, #3
    adfa:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    adfe:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_TASK =
    ae02:	f8c7 4564 	str.w	r4, [r7, #1380]	; 0x564
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
    ae06:	f105 040b 	add.w	r4, r5, #11
    ae0a:	b2e4      	uxtb	r4, r4
    ae0c:	00e4      	lsls	r4, r4, #3

	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi) =
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(cc);
    ae0e:	f5a7 37af 	sub.w	r7, r7, #89600	; 0x15e00
    ae12:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    ae16:	3fc0      	subs	r7, #192	; 0xc0
    ae18:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
    ae1c:	eb07 0783 	add.w	r7, r7, r3, lsl #2
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi) =
    ae20:	f8c4 7510 	str.w	r7, [r4, #1296]	; 0x510

	if (dir) {
    ae24:	2800      	cmp	r0, #0
    ae26:	d034      	beq.n	ae92 <sw_switch.isra.9+0xaa>
static inline u32_t hal_radio_tx_ready_delay_ns_get(u8_t phy, u8_t flags)
{
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_1M_NS;
    ae28:	f649 77c4 	movw	r7, #40900	; 0x9fc4
    ae2c:	f649 4040 	movw	r0, #40000	; 0x9c40
    ae30:	2a02      	cmp	r2, #2
    ae32:	bf0c      	ite	eq
    ae34:	4602      	moveq	r2, r0
    ae36:	463a      	movne	r2, r7
static inline u32_t hal_radio_rx_chain_delay_ns_get(u8_t phy, u8_t flags)
{
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_NS;
    ae38:	f242 47b8 	movw	r7, #9400	; 0x24b8
    ae3c:	f241 3088 	movw	r0, #5000	; 0x1388
    ae40:	2902      	cmp	r1, #2
    ae42:	bf18      	it	ne
    ae44:	4638      	movne	r0, r7
		/* TX */

		/* Calculate delay with respect to current (RX) and next
		 * (TX) PHY. If RX PHY is LE Coded, assume S8 coding scheme.
		 */
		delay = HAL_RADIO_NS2US_ROUND(
    ae46:	f502 71fa 	add.w	r1, r2, #500	; 0x1f4
    ae4a:	4401      	add	r1, r0
    ae4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ae50:	fbb1 f1f2 	udiv	r1, r1, r2
	((u32_t)&(NRF_RADIO->TASKS_RXEN))


static inline void hal_radio_txen_on_sw_switch(u8_t ppi)
{
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi) =
    ae54:	4a14      	ldr	r2, [pc, #80]	; (aea8 <sw_switch.isra.9+0xc0>)
    ae56:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    ae5a:	009b      	lsls	r3, r3, #2
    ae5c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    ae60:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay <
		SW_SWITCH_TIMER->CC[cc]) {
    ae64:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
	if (delay <
    ae68:	428a      	cmp	r2, r1
		SW_SWITCH_TIMER->CC[cc] -= delay;
    ae6a:	bf8b      	itete	hi
    ae6c:	f8d3 2540 	ldrhi.w	r2, [r3, #1344]	; 0x540
	} else {
		SW_SWITCH_TIMER->CC[cc] = 1;
    ae70:	2201      	movls	r2, #1
		SW_SWITCH_TIMER->CC[cc] -= delay;
    ae72:	1a51      	subhi	r1, r2, r1
		SW_SWITCH_TIMER->CC[cc] = 1;
    ae74:	f8c3 2540 	strls.w	r2, [r3, #1344]	; 0x540
		SW_SWITCH_TIMER->CC[cc] -= delay;
    ae78:	bf88      	it	hi
    ae7a:	f8c3 1540 	strhi.w	r1, [r3, #1344]	; 0x540
	}

	NRF_PPI->CHENSET =
    ae7e:	4b08      	ldr	r3, [pc, #32]	; (aea0 <sw_switch.isra.9+0xb8>)
    ae80:	f44f 6290 	mov.w	r2, #1152	; 0x480
    ae84:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	 * always need to capture the PDU END time-stamp.
	 */
	radio_tmr_end_capture();
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	sw_tifs_toggle += 1;
    ae88:	1c6b      	adds	r3, r5, #1
	sw_tifs_toggle &= 1;
    ae8a:	f003 0301 	and.w	r3, r3, #1
    ae8e:	7033      	strb	r3, [r6, #0]
    ae90:	bdf0      	pop	{r4, r5, r6, r7, pc}
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_TASK_TX;
}

static inline void hal_radio_rxen_on_sw_switch(u8_t ppi)
{
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi) =
    ae92:	4a06      	ldr	r2, [pc, #24]	; (aeac <sw_switch.isra.9+0xc4>)
    ae94:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
		delay = HAL_RADIO_NS2US_CEIL(
    ae98:	212c      	movs	r1, #44	; 0x2c
    ae9a:	e7de      	b.n	ae5a <sw_switch.isra.9+0x72>
    ae9c:	20002844 	.word	0x20002844
    aea0:	4001f000 	.word	0x4001f000
    aea4:	4000110c 	.word	0x4000110c
    aea8:	40001000 	.word	0x40001000
    aeac:	40001004 	.word	0x40001004

0000aeb0 <isr_radio>:
	if (sfp_radio_isr) {
    aeb0:	4b02      	ldr	r3, [pc, #8]	; (aebc <isr_radio+0xc>)
    aeb2:	681b      	ldr	r3, [r3, #0]
    aeb4:	b103      	cbz	r3, aeb8 <isr_radio+0x8>
		sfp_radio_isr();
    aeb6:	4718      	bx	r3
    aeb8:	4770      	bx	lr
    aeba:	bf00      	nop
    aebc:	20002840 	.word	0x20002840

0000aec0 <radio_isr_set>:
	sfp_radio_isr = fp_radio_isr;	/* atomic assignment of 32-bit word */
    aec0:	4b06      	ldr	r3, [pc, #24]	; (aedc <radio_isr_set+0x1c>)
    aec2:	6018      	str	r0, [r3, #0]
	NRF_RADIO->INTENSET = (0 |
    aec4:	4b06      	ldr	r3, [pc, #24]	; (aee0 <radio_isr_set+0x20>)
    aec6:	2210      	movs	r2, #16
    aec8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    aecc:	4b05      	ldr	r3, [pc, #20]	; (aee4 <radio_isr_set+0x24>)
    aece:	2202      	movs	r2, #2
    aed0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
    aed4:	2001      	movs	r0, #1
    aed6:	f7f5 bec3 	b.w	c60 <_arch_irq_enable>
    aeda:	bf00      	nop
    aedc:	20002840 	.word	0x20002840
    aee0:	40001000 	.word	0x40001000
    aee4:	e000e100 	.word	0xe000e100

0000aee8 <radio_setup>:
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
    aee8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    aeec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
    aef0:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
    aef2:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
    aef6:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
    aefa:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
    aefe:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
    af02:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
    af06:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
    af0a:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
    af0e:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
    af12:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
    af16:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
    af1a:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
    af1e:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
    af22:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
    af26:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
    af2a:	4770      	bx	lr

0000af2c <radio_reset>:
{
    af2c:	b508      	push	{r3, lr}
	irq_disable(RADIO_IRQn);
    af2e:	2001      	movs	r0, #1
    af30:	f7f5 fea6 	bl	c80 <_arch_irq_disable>
	NRF_RADIO->POWER =
    af34:	4b08      	ldr	r3, [pc, #32]	; (af58 <radio_reset+0x2c>)
    af36:	2200      	movs	r2, #0
    af38:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	NRF_RADIO->POWER =
    af3c:	2201      	movs	r2, #1
    af3e:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
    af42:	4a06      	ldr	r2, [pc, #24]	; (af5c <radio_reset+0x30>)
    af44:	6813      	ldr	r3, [r2, #0]
					 0xfffffffe) | 0x01000000;
    af46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    af4a:	f023 0301 	bic.w	r3, r3, #1
    af4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
    af52:	6013      	str	r3, [r2, #0]
    af54:	bd08      	pop	{r3, pc}
    af56:	bf00      	nop
    af58:	40001000 	.word	0x40001000
    af5c:	40001774 	.word	0x40001774

0000af60 <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
    af60:	4b06      	ldr	r3, [pc, #24]	; (af7c <radio_phy_set+0x1c>)
	switch (phy) {
    af62:	2802      	cmp	r0, #2
		mode = RADIO_MODE_MODE_Ble_1Mbit;
    af64:	bf0c      	ite	eq
    af66:	2204      	moveq	r2, #4
    af68:	2203      	movne	r2, #3
    af6a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
    af6e:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
    af72:	f042 0201 	orr.w	r2, r2, #1
    af76:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
    af7a:	4770      	bx	lr
    af7c:	40001000 	.word	0x40001000

0000af80 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = power;
    af80:	4b01      	ldr	r3, [pc, #4]	; (af88 <radio_tx_power_set+0x8>)
    af82:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    af86:	4770      	bx	lr
    af88:	40001000 	.word	0x40001000

0000af8c <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
    af8c:	4b01      	ldr	r3, [pc, #4]	; (af94 <radio_freq_chan_set+0x8>)
    af8e:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    af92:	4770      	bx	lr
    af94:	40001000 	.word	0x40001000

0000af98 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
    af98:	4b07      	ldr	r3, [pc, #28]	; (afb8 <radio_whiten_iv_set+0x20>)
    af9a:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
    af9e:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
    afa2:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
    afa6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
    afaa:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
    afae:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
    afb2:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    afb6:	4770      	bx	lr
    afb8:	40001000 	.word	0x40001000

0000afbc <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
    afbc:	4a0a      	ldr	r2, [pc, #40]	; (afe8 <radio_aa_set+0x2c>)
    afbe:	2300      	movs	r3, #0
    afc0:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
    afc4:	2301      	movs	r3, #1
    afc6:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
    afca:	78c3      	ldrb	r3, [r0, #3]
    afcc:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
    afd0:	7843      	ldrb	r3, [r0, #1]
    afd2:	7881      	ldrb	r1, [r0, #2]
    afd4:	041b      	lsls	r3, r3, #16
    afd6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    afda:	7801      	ldrb	r1, [r0, #0]
    afdc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    afe0:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
    afe4:	4770      	bx	lr
    afe6:	bf00      	nop
    afe8:	40001000 	.word	0x40001000

0000afec <radio_pkt_configure>:
	switch (phy) {
    afec:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
    aff0:	2b02      	cmp	r3, #2
{
    aff2:	b510      	push	{r4, lr}
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
    aff4:	bf0c      	ite	eq
    aff6:	f04f 7480 	moveq.w	r4, #16777216	; 0x1000000
    affa:	2400      	movne	r4, #0
	if (dc) {
    affc:	07d3      	lsls	r3, r2, #31
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
    affe:	f1c0 0308 	rsb	r3, r0, #8
    b002:	ea4f 4303 	mov.w	r3, r3, lsl #16
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
    b006:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
    b00a:	f440 7080 	orr.w	r0, r0, #256	; 0x100
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
    b00e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
    b012:	4a0b      	ldr	r2, [pc, #44]	; (b040 <radio_pkt_configure+0x54>)
			    RADIO_PCNF0_S1LEN_Msk) |
    b014:	ea43 0300 	orr.w	r3, r3, r0
		extra |= (RADIO_PCNF0_S1INCL_Include <<
    b018:	bf48      	it	mi
    b01a:	f444 1480 	orrmi.w	r4, r4, #1048576	; 0x100000
			    RADIO_PCNF0_S1LEN_Msk) |
    b01e:	4323      	orrs	r3, r4
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
    b020:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
    b024:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
    b028:	4b06      	ldr	r3, [pc, #24]	; (b044 <radio_pkt_configure+0x58>)
    b02a:	4003      	ands	r3, r0
    b02c:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((u32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
    b030:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
    b034:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    b038:	4319      	orrs	r1, r3
    b03a:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
    b03e:	bd10      	pop	{r4, pc}
    b040:	40001000 	.word	0x40001000
    b044:	fef80000 	.word	0xfef80000

0000b048 <radio_pkt_rx_set>:
    b048:	4b01      	ldr	r3, [pc, #4]	; (b050 <radio_pkt_rx_set+0x8>)
    b04a:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    b04e:	4770      	bx	lr
    b050:	40001000 	.word	0x40001000

0000b054 <radio_pkt_tx_set>:
	NRF_RADIO->PACKETPTR = (u32_t)tx_packet;
    b054:	4b01      	ldr	r3, [pc, #4]	; (b05c <radio_pkt_tx_set+0x8>)
    b056:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    b05a:	4770      	bx	lr
    b05c:	40001000 	.word	0x40001000

0000b060 <radio_tx_ready_delay_get>:
	switch (phy) {
    b060:	2802      	cmp	r0, #2
}
    b062:	bf0c      	ite	eq
    b064:	2028      	moveq	r0, #40	; 0x28
    b066:	2029      	movne	r0, #41	; 0x29
    b068:	4770      	bx	lr

0000b06a <radio_tx_chain_delay_get>:
}
    b06a:	2001      	movs	r0, #1
    b06c:	4770      	bx	lr

0000b06e <radio_rx_ready_delay_get>:
}
    b06e:	2029      	movs	r0, #41	; 0x29
    b070:	4770      	bx	lr

0000b072 <radio_rx_chain_delay_get>:
	switch (phy) {
    b072:	2802      	cmp	r0, #2
}
    b074:	bf0c      	ite	eq
    b076:	2005      	moveq	r0, #5
    b078:	200a      	movne	r0, #10
    b07a:	4770      	bx	lr

0000b07c <radio_rx_enable>:
	NRF_RADIO->TASKS_RXEN = 1;
    b07c:	4b01      	ldr	r3, [pc, #4]	; (b084 <radio_rx_enable+0x8>)
    b07e:	2201      	movs	r2, #1
    b080:	605a      	str	r2, [r3, #4]
    b082:	4770      	bx	lr
    b084:	40001000 	.word	0x40001000

0000b088 <radio_tx_enable>:
	NRF_RADIO->TASKS_TXEN = 1;
    b088:	4b01      	ldr	r3, [pc, #4]	; (b090 <radio_tx_enable+0x8>)
    b08a:	2201      	movs	r2, #1
    b08c:	601a      	str	r2, [r3, #0]
    b08e:	4770      	bx	lr
    b090:	40001000 	.word	0x40001000

0000b094 <radio_disable>:
	NRF_PPI->CHENCLR = HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
    b094:	4a07      	ldr	r2, [pc, #28]	; (b0b4 <radio_disable+0x20>)
    b096:	f44f 6390 	mov.w	r3, #1152	; 0x480
    b09a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	NRF_PPI->TASKS_CHG[SW_SWITCH_TIMER_TASK_GROUP(0)].DIS = 1;
    b09e:	2301      	movs	r3, #1
    b0a0:	6053      	str	r3, [r2, #4]
	NRF_PPI->TASKS_CHG[SW_SWITCH_TIMER_TASK_GROUP(1)].DIS = 1;
    b0a2:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
    b0a4:	f5a2 32f0 	sub.w	r2, r2, #122880	; 0x1e000
    b0a8:	2100      	movs	r1, #0
    b0aa:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
	NRF_RADIO->TASKS_DISABLE = 1;
    b0ae:	6113      	str	r3, [r2, #16]
    b0b0:	4770      	bx	lr
    b0b2:	bf00      	nop
    b0b4:	4001f000 	.word	0x4001f000

0000b0b8 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
    b0b8:	4b04      	ldr	r3, [pc, #16]	; (b0cc <radio_status_reset+0x14>)
    b0ba:	2200      	movs	r2, #0
    b0bc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
    b0c0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
    b0c4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    b0c8:	4770      	bx	lr
    b0ca:	bf00      	nop
    b0cc:	40001000 	.word	0x40001000

0000b0d0 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
    b0d0:	4b03      	ldr	r3, [pc, #12]	; (b0e0 <radio_is_ready+0x10>)
    b0d2:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
    b0d6:	3000      	adds	r0, #0
    b0d8:	bf18      	it	ne
    b0da:	2001      	movne	r0, #1
    b0dc:	4770      	bx	lr
    b0de:	bf00      	nop
    b0e0:	40001000 	.word	0x40001000

0000b0e4 <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
    b0e4:	4b03      	ldr	r3, [pc, #12]	; (b0f4 <radio_is_done+0x10>)
    b0e6:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
    b0ea:	3000      	adds	r0, #0
    b0ec:	bf18      	it	ne
    b0ee:	2001      	movne	r0, #1
    b0f0:	4770      	bx	lr
    b0f2:	bf00      	nop
    b0f4:	40001000 	.word	0x40001000

0000b0f8 <radio_is_idle>:
	return (NRF_RADIO->STATE == 0);
    b0f8:	4b03      	ldr	r3, [pc, #12]	; (b108 <radio_is_idle+0x10>)
    b0fa:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
    b0fe:	fab0 f080 	clz	r0, r0
    b102:	0940      	lsrs	r0, r0, #5
    b104:	4770      	bx	lr
    b106:	bf00      	nop
    b108:	40001000 	.word	0x40001000

0000b10c <radio_crc_configure>:
	NRF_RADIO->CRCCNF =
    b10c:	4b04      	ldr	r3, [pc, #16]	; (b120 <radio_crc_configure+0x14>)
    b10e:	f240 1203 	movw	r2, #259	; 0x103
    b112:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_RADIO->CRCPOLY = polynomial;
    b116:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
    b11a:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
    b11e:	4770      	bx	lr
    b120:	40001000 	.word	0x40001000

0000b124 <radio_crc_is_valid>:
	return (NRF_RADIO->CRCSTATUS != 0);
    b124:	4b03      	ldr	r3, [pc, #12]	; (b134 <radio_crc_is_valid+0x10>)
    b126:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    b12a:	3000      	adds	r0, #0
    b12c:	bf18      	it	ne
    b12e:	2001      	movne	r0, #1
    b130:	4770      	bx	lr
    b132:	bf00      	nop
    b134:	40001000 	.word	0x40001000

0000b138 <radio_pkt_empty_get>:
}
    b138:	4800      	ldr	r0, [pc, #0]	; (b13c <radio_pkt_empty_get+0x4>)
    b13a:	4770      	bx	lr
    b13c:	20002734 	.word	0x20002734

0000b140 <radio_pkt_scratch_get>:
}
    b140:	4800      	ldr	r0, [pc, #0]	; (b144 <radio_pkt_scratch_get+0x4>)
    b142:	4770      	bx	lr
    b144:	20002738 	.word	0x20002738

0000b148 <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    b148:	4b04      	ldr	r3, [pc, #16]	; (b15c <radio_switch_complete_and_rx+0x14>)
    b14a:	2203      	movs	r2, #3
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
    b14c:	2100      	movs	r1, #0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    b14e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	sw_switch(0, 0, 0, phy_rx, 0);
    b152:	4602      	mov	r2, r0
    b154:	4608      	mov	r0, r1
    b156:	f7ff be47 	b.w	ade8 <sw_switch.isra.9>
    b15a:	bf00      	nop
    b15c:	40001000 	.word	0x40001000

0000b160 <radio_switch_complete_and_tx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    b160:	4b03      	ldr	r3, [pc, #12]	; (b170 <radio_switch_complete_and_tx+0x10>)
    b162:	2103      	movs	r1, #3
    b164:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
    b168:	4601      	mov	r1, r0
    b16a:	2001      	movs	r0, #1
    b16c:	f7ff be3c 	b.w	ade8 <sw_switch.isra.9>
    b170:	40001000 	.word	0x40001000

0000b174 <radio_switch_complete_and_disable>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
    b174:	4b05      	ldr	r3, [pc, #20]	; (b18c <radio_switch_complete_and_disable+0x18>)
    b176:	2203      	movs	r2, #3
    b178:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_PPI->CHENCLR = HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
    b17c:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
    b180:	f44f 6290 	mov.w	r2, #1152	; 0x480
    b184:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    b188:	4770      	bx	lr
    b18a:	bf00      	nop
    b18c:	40001000 	.word	0x40001000

0000b190 <radio_rssi_measure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
    b190:	4a03      	ldr	r2, [pc, #12]	; (b1a0 <radio_rssi_measure+0x10>)
    b192:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    b196:	f443 7388 	orr.w	r3, r3, #272	; 0x110
    b19a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    b19e:	4770      	bx	lr
    b1a0:	40001000 	.word	0x40001000

0000b1a4 <radio_rssi_get>:
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}

u32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
    b1a4:	4b01      	ldr	r3, [pc, #4]	; (b1ac <radio_rssi_get+0x8>)
    b1a6:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
    b1aa:	4770      	bx	lr
    b1ac:	40001000 	.word	0x40001000

0000b1b0 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
    b1b0:	4b02      	ldr	r3, [pc, #8]	; (b1bc <radio_rssi_status_reset+0xc>)
    b1b2:	2200      	movs	r2, #0
    b1b4:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    b1b8:	4770      	bx	lr
    b1ba:	bf00      	nop
    b1bc:	40001000 	.word	0x40001000

0000b1c0 <radio_rssi_is_ready>:
}

u32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
    b1c0:	4b03      	ldr	r3, [pc, #12]	; (b1d0 <radio_rssi_is_ready+0x10>)
    b1c2:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
    b1c6:	3000      	adds	r0, #0
    b1c8:	bf18      	it	ne
    b1ca:	2001      	movne	r0, #1
    b1cc:	4770      	bx	lr
    b1ce:	bf00      	nop
    b1d0:	40001000 	.word	0x40001000

0000b1d4 <radio_filter_configure>:

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
    b1d4:	b530      	push	{r4, r5, lr}
    b1d6:	2400      	movs	r4, #0
    b1d8:	00a3      	lsls	r3, r4, #2
    b1da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    b1de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
	u8_t index;

	for (index = 0; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
    b1e2:	6815      	ldr	r5, [r2, #0]
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    b1e4:	f8c3 5600 	str.w	r5, [r3, #1536]	; 0x600
    b1e8:	3401      	adds	r4, #1
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
    b1ea:	8895      	ldrh	r5, [r2, #4]
    b1ec:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	for (index = 0; index < 8; index++) {
    b1f0:	2c08      	cmp	r4, #8
		bdaddr += 6;
    b1f2:	f102 0206 	add.w	r2, r2, #6
	for (index = 0; index < 8; index++) {
    b1f6:	d1ef      	bne.n	b1d8 <radio_filter_configure+0x4>
	}

	NRF_RADIO->DACNF = ((u32_t)bitmask_addr_type << 8) | bitmask_enable;
    b1f8:	4b02      	ldr	r3, [pc, #8]	; (b204 <radio_filter_configure+0x30>)
    b1fa:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
    b1fe:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
    b202:	bd30      	pop	{r4, r5, pc}
    b204:	40001000 	.word	0x40001000

0000b208 <radio_filter_disable>:
}

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
    b208:	4a03      	ldr	r2, [pc, #12]	; (b218 <radio_filter_disable+0x10>)
    b20a:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
    b20e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    b212:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
    b216:	4770      	bx	lr
    b218:	40001000 	.word	0x40001000

0000b21c <radio_filter_status_reset>:
}

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
    b21c:	4b02      	ldr	r3, [pc, #8]	; (b228 <radio_filter_status_reset+0xc>)
    b21e:	2200      	movs	r2, #0
    b220:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    b224:	4770      	bx	lr
    b226:	bf00      	nop
    b228:	40001000 	.word	0x40001000

0000b22c <radio_filter_has_match>:
}

u32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
    b22c:	4b03      	ldr	r3, [pc, #12]	; (b23c <radio_filter_has_match+0x10>)
    b22e:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
    b232:	3000      	adds	r0, #0
    b234:	bf18      	it	ne
    b236:	2001      	movne	r0, #1
    b238:	4770      	bx	lr
    b23a:	bf00      	nop
    b23c:	40001000 	.word	0x40001000

0000b240 <radio_filter_match_get>:

u32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
    b240:	4b01      	ldr	r3, [pc, #4]	; (b248 <radio_filter_match_get+0x8>)
    b242:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
    b246:	4770      	bx	lr
    b248:	40001000 	.word	0x40001000

0000b24c <radio_tmr_status_reset>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
}

void radio_tmr_status_reset(void)
{
	NRF_RTC0->EVTENCLR = RTC_EVTENCLR_COMPARE2_Msk;
    b24c:	4b05      	ldr	r3, [pc, #20]	; (b264 <radio_tmr_status_reset+0x18>)
    b24e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    b252:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	NRF_PPI->CHENCLR =
    b256:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
    b25a:	227f      	movs	r2, #127	; 0x7f
    b25c:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    b260:	4770      	bx	lr
    b262:	bf00      	nop
    b264:	4000b000 	.word	0x4000b000

0000b268 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(u32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	SW_SWITCH_TIMER->CC[SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle)] = tifs;
    b268:	4b03      	ldr	r3, [pc, #12]	; (b278 <radio_tmr_tifs_set+0x10>)
    b26a:	4a04      	ldr	r2, [pc, #16]	; (b27c <radio_tmr_tifs_set+0x14>)
    b26c:	781b      	ldrb	r3, [r3, #0]
    b26e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
    b272:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    b276:	4770      	bx	lr
    b278:	20002844 	.word	0x20002844
    b27c:	40009000 	.word	0x40009000

0000b280 <radio_tmr_start>:
#endif
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
    b280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
    b284:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
    b288:	4c30      	ldr	r4, [pc, #192]	; (b34c <radio_tmr_start+0xcc>)
		ticks_start--;
		remainder += 30517578UL;
	}
	remainder /= 1000000UL;
    b28a:	4d31      	ldr	r5, [pc, #196]	; (b350 <radio_tmr_start+0xd0>)
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
    b28c:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
    b290:	42a3      	cmp	r3, r4
		remainder += 30517578UL;
    b292:	bf88      	it	hi
    b294:	f102 72e8 	addhi.w	r2, r2, #30408704	; 0x1d00000

	EVENT_TIMER->TASKS_CLEAR = 1;
    b298:	4b2e      	ldr	r3, [pc, #184]	; (b354 <radio_tmr_start+0xd4>)

#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(EVENT_TIMER_NBR);
#endif

	NRF_RTC0->CC[2] = ticks_start;
    b29a:	4c2f      	ldr	r4, [pc, #188]	; (b358 <radio_tmr_start+0xd8>)
		remainder += 30517578UL;
    b29c:	bf82      	ittt	hi
    b29e:	f502 32d4 	addhi.w	r2, r2, #108544	; 0x1a800
		ticks_start--;
    b2a2:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
		remainder += 30517578UL;
    b2a6:	f502 72a5 	addhi.w	r2, r2, #330	; 0x14a
	EVENT_TIMER->TASKS_CLEAR = 1;
    b2aa:	2601      	movs	r6, #1
	remainder /= 1000000UL;
    b2ac:	fbb2 f5f5 	udiv	r5, r2, r5
	EVENT_TIMER->MODE = 0;
    b2b0:	2700      	movs	r7, #0
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
    b2b2:	2202      	movs	r2, #2
	EVENT_TIMER->PRESCALER = 4;
    b2b4:	f04f 0804 	mov.w	r8, #4
	EVENT_TIMER->TASKS_CLEAR = 1;
    b2b8:	60de      	str	r6, [r3, #12]
	EVENT_TIMER->MODE = 0;
    b2ba:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	EVENT_TIMER->PRESCALER = 4;
    b2be:	f8c3 8510 	str.w	r8, [r3, #1296]	; 0x510
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
    b2c2:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	EVENT_TIMER->CC[0] = remainder;
    b2c6:	f8c3 5540 	str.w	r5, [r3, #1344]	; 0x540
	NRF_RTC0->CC[2] = ticks_start;
    b2ca:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
	NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE2_Msk;
    b2ce:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    b2d2:	f8c4 1344 	str.w	r1, [r4, #836]	; 0x344

	HAL_EVENT_TIMER_START_PPI_REGISTER_EVT = HAL_EVENT_TIMER_START_EVT;
    b2d6:	f504 34a0 	add.w	r4, r4, #81920	; 0x14000
    b2da:	4920      	ldr	r1, [pc, #128]	; (b35c <radio_tmr_start+0xdc>)
    b2dc:	f8c4 1518 	str.w	r1, [r4, #1304]	; 0x518
	HAL_EVENT_TIMER_START_PPI_REGISTER_TASK = HAL_EVENT_TIMER_START_TASK;
    b2e0:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
	NRF_PPI->CHENSET = HAL_EVENT_TIMER_START_PPI_ENABLE;
    b2e4:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects_CHEN();
#endif

	hal_radio_enable_on_tick_ppi_config_and_enable(trx);
    b2e8:	f7ff fd66 	bl	adb8 <hal_radio_enable_on_tick_ppi_config_and_enable>
#if !defined(CONFIG_BT_CTLR_TIFS_HW)
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	SW_SWITCH_TIMER->TASKS_CLEAR = 1;
    b2ec:	4b1c      	ldr	r3, [pc, #112]	; (b360 <radio_tmr_start+0xe0>)
    b2ee:	60de      	str	r6, [r3, #12]
	SW_SWITCH_TIMER->MODE = 0;
    b2f0:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
    b2f4:	f8c3 8510 	str.w	r8, [r3, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
    b2f8:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
	SW_SWITCH_TIMER->TASKS_START = 1;
    b2fc:	601e      	str	r6, [r3, #0]
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(SW_SWITCH_TIMER_NBR);
	NRF_TIMER_regw_sideeffects_TASKS_START(SW_SWITCH_TIMER_NBR);
#endif
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	HAL_SW_SWITCH_TIMER_CLEAR_PPI_REGISTER_EVT =
    b2fe:	f5a3 43fd 	sub.w	r3, r3, #32384	; 0x7e80
    b302:	3b74      	subs	r3, #116	; 0x74
    b304:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
		HAL_SW_SWITCH_TIMER_CLEAR_PPI_EVT;
	HAL_SW_SWITCH_TIMER_CLEAR_PPI_REGISTER_TASK =
    b308:	f503 43fe 	add.w	r3, r3, #32512	; 0x7f00
    b30c:	f8c4 354c 	str.w	r3, [r4, #1356]	; 0x54c
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || !defined(CONFIG_SOC_NRF52840)
	/* NOTE: PPI channel group disable is setup explicitly in sw_switch
	 *       function when Coded PHY on nRF52840 is supported.
	 */
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_EVT(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) =
    b310:	f503 739a 	add.w	r3, r3, #308	; 0x134
    b314:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(
			SW_SWITCH_TIMER_EVTS_COMP(0));
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) =
    b318:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
    b31c:	33c4      	adds	r3, #196	; 0xc4
    b31e:	f8c4 3554 	str.w	r3, [r4, #1364]	; 0x554
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(0);

	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_EVT(
			HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(1)) =
    b322:	f5a3 33af 	sub.w	r3, r3, #89600	; 0x15e00
    b326:	3bc0      	subs	r3, #192	; 0xc0
    b328:	f8c4 3558 	str.w	r3, [r4, #1368]	; 0x558
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(
			SW_SWITCH_TIMER_EVTS_COMP(1));
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(1)) =
    b32c:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
    b330:	33c8      	adds	r3, #200	; 0xc8
    b332:	f8c4 355c 	str.w	r3, [r4, #1372]	; 0x55c
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(1);
#endif /* !CONFIG_BT_CTLR_PHY_CODED || !CONFIG_SOC_NRF52840 */

	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
    b336:	f44f 6310 	mov.w	r3, #2304	; 0x900
    b33a:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_0_INCLUDE |
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_0_INCLUDE;
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
    b33e:	f44f 5390 	mov.w	r3, #4608	; 0x1200
    b342:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
	NRF_PPI_regw_sideeffects();
#endif
	return remainder;
}
    b346:	4628      	mov	r0, r5
    b348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b34c:	7ff0bdbf 	.word	0x7ff0bdbf
    b350:	000f4240 	.word	0x000f4240
    b354:	40008000 	.word	0x40008000
    b358:	4000b000 	.word	0x4000b000
    b35c:	4000b148 	.word	0x4000b148
    b360:	40009000 	.word	0x40009000

0000b364 <radio_tmr_stop>:
	return start;
}

void radio_tmr_stop(void)
{
	EVENT_TIMER->TASKS_STOP = 1;
    b364:	4a04      	ldr	r2, [pc, #16]	; (b378 <radio_tmr_stop+0x14>)
    b366:	2301      	movs	r3, #1
    b368:	6053      	str	r3, [r2, #4]
	EVENT_TIMER->TASKS_SHUTDOWN = 1;
    b36a:	6113      	str	r3, [r2, #16]
	NRF_TIMER_regw_sideeffects_TASKS_STOP(EVENT_TIMER_NBR);
	/* Shutdown not modelled (deprecated) */
#endif

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	SW_SWITCH_TIMER->TASKS_STOP = 1;
    b36c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    b370:	6053      	str	r3, [r2, #4]
	SW_SWITCH_TIMER->TASKS_SHUTDOWN = 1;
    b372:	6113      	str	r3, [r2, #16]
    b374:	4770      	bx	lr
    b376:	bf00      	nop
    b378:	40008000 	.word	0x40008000

0000b37c <radio_tmr_hcto_configure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_tmr_hcto_configure(u32_t hcto)
{
	EVENT_TIMER->CC[1] = hcto;
    b37c:	4b0c      	ldr	r3, [pc, #48]	; (b3b0 <radio_tmr_hcto_configure+0x34>)
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_CC(EVENT_TIMER_NBR, 1);
#endif

	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
    b37e:	4a0d      	ldr	r2, [pc, #52]	; (b3b4 <radio_tmr_hcto_configure+0x38>)
	EVENT_TIMER->CC[1] = hcto;
    b380:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
    b384:	f503 33b8 	add.w	r3, r3, #94208	; 0x17000
    b388:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
    b38c:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    b390:	3240      	adds	r2, #64	; 0x40
    b392:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_EVT =
    b396:	f502 7280 	add.w	r2, r2, #256	; 0x100
    b39a:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
		HAL_RADIO_DISABLE_ON_HCTO_PPI_EVT;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_TASK =
    b39e:	f5a2 42e2 	sub.w	r2, r2, #28928	; 0x7100
    b3a2:	3a34      	subs	r2, #52	; 0x34
    b3a4:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
		HAL_RADIO_DISABLE_ON_HCTO_PPI_TASK;
	NRF_PPI->CHENSET =
    b3a8:	2218      	movs	r2, #24
    b3aa:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    b3ae:	4770      	bx	lr
    b3b0:	40008000 	.word	0x40008000
    b3b4:	40001104 	.word	0x40001104

0000b3b8 <radio_tmr_aa_capture>:
#endif
}

void radio_tmr_aa_capture(void)
{
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_EVT =
    b3b8:	4b0b      	ldr	r3, [pc, #44]	; (b3e8 <radio_tmr_aa_capture+0x30>)
    b3ba:	4a0c      	ldr	r2, [pc, #48]	; (b3ec <radio_tmr_aa_capture+0x34>)
    b3bc:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
		HAL_RADIO_READY_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_TASK =
    b3c0:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    b3c4:	3240      	adds	r2, #64	; 0x40
    b3c6:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
		HAL_RADIO_READY_TIME_CAPTURE_PPI_TASK;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
    b3ca:	f5a2 42de 	sub.w	r2, r2, #28416	; 0x6f00
    b3ce:	3a3c      	subs	r2, #60	; 0x3c
    b3d0:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
    b3d4:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    b3d8:	3240      	adds	r2, #64	; 0x40
    b3da:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	NRF_PPI->CHENSET =
    b3de:	220c      	movs	r2, #12
    b3e0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    b3e4:	4770      	bx	lr
    b3e6:	bf00      	nop
    b3e8:	4001f000 	.word	0x4001f000
    b3ec:	40001100 	.word	0x40001100

0000b3f0 <radio_tmr_aa_get>:
#endif
}

u32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
    b3f0:	4b01      	ldr	r3, [pc, #4]	; (b3f8 <radio_tmr_aa_get+0x8>)
    b3f2:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
    b3f6:	4770      	bx	lr
    b3f8:	40008000 	.word	0x40008000

0000b3fc <radio_tmr_aa_save>:

static u32_t radio_tmr_aa;

void radio_tmr_aa_save(u32_t aa)
{
	radio_tmr_aa = aa;
    b3fc:	4b01      	ldr	r3, [pc, #4]	; (b404 <radio_tmr_aa_save+0x8>)
    b3fe:	6018      	str	r0, [r3, #0]
    b400:	4770      	bx	lr
    b402:	bf00      	nop
    b404:	2000283c 	.word	0x2000283c

0000b408 <radio_tmr_aa_restore>:

u32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
}
    b408:	4b01      	ldr	r3, [pc, #4]	; (b410 <radio_tmr_aa_restore+0x8>)
    b40a:	6818      	ldr	r0, [r3, #0]
    b40c:	4770      	bx	lr
    b40e:	bf00      	nop
    b410:	2000283c 	.word	0x2000283c

0000b414 <radio_tmr_ready_get>:

u32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
    b414:	4b01      	ldr	r3, [pc, #4]	; (b41c <radio_tmr_ready_get+0x8>)
    b416:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
    b41a:	4770      	bx	lr
    b41c:	40008000 	.word	0x40008000

0000b420 <radio_tmr_end_capture>:

void radio_tmr_end_capture(void)
{
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_EVT =
    b420:	4b06      	ldr	r3, [pc, #24]	; (b43c <radio_tmr_end_capture+0x1c>)
    b422:	4a07      	ldr	r2, [pc, #28]	; (b440 <radio_tmr_end_capture+0x20>)
    b424:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
		HAL_RADIO_END_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_TASK =
    b428:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    b42c:	323c      	adds	r2, #60	; 0x3c
    b42e:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
		HAL_RADIO_END_TIME_CAPTURE_PPI_TASK;
	NRF_PPI->CHENSET = HAL_RADIO_END_TIME_CAPTURE_PPI_ENABLE;
    b432:	2220      	movs	r2, #32
    b434:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    b438:	4770      	bx	lr
    b43a:	bf00      	nop
    b43c:	4001f000 	.word	0x4001f000
    b440:	4000110c 	.word	0x4000110c

0000b444 <radio_tmr_end_get>:
    b444:	4b01      	ldr	r3, [pc, #4]	; (b44c <radio_tmr_end_get+0x8>)
    b446:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
    b44a:	4770      	bx	lr
    b44c:	40008000 	.word	0x40008000

0000b450 <radio_tmr_tifs_base_get>:
u32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
    b450:	4b01      	ldr	r3, [pc, #4]	; (b458 <radio_tmr_tifs_base_get+0x8>)
    b452:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

u32_t radio_tmr_tifs_base_get(void)
{
	return radio_tmr_end_get();
}
    b456:	4770      	bx	lr
    b458:	40008000 	.word	0x40008000

0000b45c <radio_ccm_rx_pkt_set>:
void *radio_ccm_rx_pkt_set(struct ccm *ccm, u8_t phy, void *pkt)
{

	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    b45c:	4b16      	ldr	r3, [pc, #88]	; (b4b8 <radio_ccm_rx_pkt_set+0x5c>)
{
    b45e:	b570      	push	{r4, r5, r6, lr}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    b460:	2400      	movs	r4, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    b462:	2502      	movs	r5, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    b464:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500

	/* Select CCM data rate based on current PHY in use. */
	switch (phy) {
	default:
	case BIT(0):
		mode |= (CCM_MODE_DATARATE_1Mbit <<
    b468:	4e14      	ldr	r6, [pc, #80]	; (b4bc <radio_ccm_rx_pkt_set+0x60>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    b46a:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
		mode |= (CCM_MODE_DATARATE_1Mbit <<
    b46e:	4d14      	ldr	r5, [pc, #80]	; (b4c0 <radio_ccm_rx_pkt_set+0x64>)
    b470:	2902      	cmp	r1, #2
    b472:	bf0c      	ite	eq
    b474:	4629      	moveq	r1, r5
    b476:	4631      	movne	r1, r6
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}
#endif /* CONFIG_SOC_SERIES_NRF52X */

	NRF_CCM->MODE = mode;
    b478:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
    b47c:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)_pkt_scratch;
    b480:	4810      	ldr	r0, [pc, #64]	; (b4c4 <radio_ccm_rx_pkt_set+0x68>)
    b482:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)pkt;
    b486:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    b48a:	4a0f      	ldr	r2, [pc, #60]	; (b4c8 <radio_ccm_rx_pkt_set+0x6c>)
    b48c:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = 0;
	NRF_CCM->EVENTS_ENDCRYPT = 0;
	NRF_CCM->EVENTS_ERROR = 0;

	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
    b490:	490e      	ldr	r1, [pc, #56]	; (b4cc <radio_ccm_rx_pkt_set+0x70>)
    b492:	4a0f      	ldr	r2, [pc, #60]	; (b4d0 <radio_ccm_rx_pkt_set+0x74>)
	NRF_CCM->SHORTS = 0;
    b494:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
    b498:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
    b49c:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
    b4a0:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	HAL_TRIGGER_CRYPT_PPI_REGISTER_TASK = HAL_TRIGGER_CRYPT_PPI_TASK;
    b4a4:	f501 415f 	add.w	r1, r1, #57088	; 0xdf00
    b4a8:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
	NRF_PPI->CHENSET = HAL_TRIGGER_CRYPT_PPI_ENABLE;
    b4ac:	2140      	movs	r1, #64	; 0x40
    b4ae:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects();
#endif

	NRF_CCM->TASKS_KSGEN = 1;
    b4b2:	2201      	movs	r2, #1
    b4b4:	601a      	str	r2, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
    b4b6:	bd70      	pop	{r4, r5, r6, pc}
    b4b8:	4000f000 	.word	0x4000f000
    b4bc:	01000001 	.word	0x01000001
    b4c0:	01010001 	.word	0x01010001
    b4c4:	20002738 	.word	0x20002738
    b4c8:	20002628 	.word	0x20002628
    b4cc:	40001104 	.word	0x40001104
    b4d0:	4001f000 	.word	0x4001f000

0000b4d4 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
    b4d4:	b510      	push	{r4, lr}
	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    b4d6:	4b0e      	ldr	r3, [pc, #56]	; (b510 <radio_ccm_tx_pkt_set+0x3c>)
    b4d8:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    b4da:	2402      	movs	r4, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    b4dc:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    b4e0:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
    b4e4:	4c0b      	ldr	r4, [pc, #44]	; (b514 <radio_ccm_tx_pkt_set+0x40>)
    b4e6:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
    b4ea:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)pkt;
    b4ee:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
    b4f2:	4809      	ldr	r0, [pc, #36]	; (b518 <radio_ccm_tx_pkt_set+0x44>)
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    b4f4:	4909      	ldr	r1, [pc, #36]	; (b51c <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
    b4f6:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    b4fa:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
    b4fe:	2101      	movs	r1, #1
    b500:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
    b504:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
    b508:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	NRF_CCM->TASKS_KSGEN = 1;
    b50c:	6019      	str	r1, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
    b50e:	bd10      	pop	{r4, pc}
    b510:	4000f000 	.word	0x4000f000
    b514:	01010000 	.word	0x01010000
    b518:	20002738 	.word	0x20002738
    b51c:	20002628 	.word	0x20002628

0000b520 <radio_ccm_is_done>:

u32_t radio_ccm_is_done(void)
{
	NRF_CCM->INTENSET = CCM_INTENSET_ENDCRYPT_Msk;
    b520:	4b0c      	ldr	r3, [pc, #48]	; (b554 <radio_ccm_is_done+0x34>)
    b522:	2202      	movs	r2, #2
    b524:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENSET();
#endif
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
    b528:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    b52c:	b16a      	cbz	r2, b54a <radio_ccm_is_done+0x2a>
		__WFE();
		__SEV();
		__WFE();
	}
	NRF_CCM->INTENCLR = CCM_INTENCLR_ENDCRYPT_Msk;
    b52e:	2202      	movs	r2, #2
    b530:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    b534:	4a08      	ldr	r2, [pc, #32]	; (b558 <radio_ccm_is_done+0x38>)
    b536:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    b53a:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENCLR();
#endif
	NVIC_ClearPendingIRQ(CCM_AAR_IRQn);

	return (NRF_CCM->EVENTS_ERROR == 0);
    b53e:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
    b542:	fab0 f080 	clz	r0, r0
    b546:	0940      	lsrs	r0, r0, #5
    b548:	4770      	bx	lr
		__WFE();
    b54a:	bf20      	wfe
		__SEV();
    b54c:	bf40      	sev
		__WFE();
    b54e:	bf20      	wfe
    b550:	e7ea      	b.n	b528 <radio_ccm_is_done+0x8>
    b552:	bf00      	nop
    b554:	4000f000 	.word	0x4000f000
    b558:	e000e100 	.word	0xe000e100

0000b55c <radio_ccm_mic_is_valid>:

u32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
    b55c:	4b03      	ldr	r3, [pc, #12]	; (b56c <radio_ccm_mic_is_valid+0x10>)
    b55e:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    b562:	3000      	adds	r0, #0
    b564:	bf18      	it	ne
    b566:	2001      	movne	r0, #1
    b568:	4770      	bx	lr
    b56a:	bf00      	nop
    b56c:	4000f000 	.word	0x4000f000

0000b570 <radio_ar_match_get>:
#endif
}

u32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
    b570:	4b01      	ldr	r3, [pc, #4]	; (b578 <radio_ar_match_get+0x8>)
    b572:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    b576:	4770      	bx	lr
    b578:	4000f000 	.word	0x4000f000

0000b57c <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
    b57c:	4a04      	ldr	r2, [pc, #16]	; (b590 <radio_ar_status_reset+0x14>)
    b57e:	2300      	movs	r3, #0
    b580:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

void radio_ar_status_reset(void)
{
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
    b584:	f502 4260 	add.w	r2, r2, #57344	; 0xe000
    b588:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    b58c:	4770      	bx	lr
    b58e:	bf00      	nop
    b590:	40001000 	.word	0x40001000

0000b594 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
    b594:	4b08      	ldr	r3, [pc, #32]	; (b5b8 <radio_ar_has_match+0x24>)
    b596:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
    b59a:	b160      	cbz	r0, b5b6 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
    b59c:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
    b5a0:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
    b5a4:	b138      	cbz	r0, b5b6 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
    b5a6:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
    b5aa:	b120      	cbz	r0, b5b6 <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
    b5ac:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
    b5b0:	fab0 f080 	clz	r0, r0
    b5b4:	0940      	lsrs	r0, r0, #5
}
    b5b6:	4770      	bx	lr
    b5b8:	40001000 	.word	0x40001000

0000b5bc <mayfly_enable_cb>:

void mayfly_enable_cb(u8_t caller_id, u8_t callee_id, u8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
    b5bc:	2901      	cmp	r1, #1
{
    b5be:	b508      	push	{r3, lr}
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
    b5c0:	d00a      	beq.n	b5d8 <mayfly_enable_cb+0x1c>
    b5c2:	4a0a      	ldr	r2, [pc, #40]	; (b5ec <mayfly_enable_cb+0x30>)
    b5c4:	490a      	ldr	r1, [pc, #40]	; (b5f0 <mayfly_enable_cb+0x34>)
    b5c6:	2003      	movs	r0, #3
    b5c8:	f7f6 fe1a 	bl	2200 <bt_log>
    b5cc:	4040      	eors	r0, r0
    b5ce:	f380 8811 	msr	BASEPRI, r0
    b5d2:	f04f 0004 	mov.w	r0, #4
    b5d6:	df02      	svc	2

	if (enable) {
		irq_enable(SWI4_IRQn);
    b5d8:	2018      	movs	r0, #24
	if (enable) {
    b5da:	b11a      	cbz	r2, b5e4 <mayfly_enable_cb+0x28>
	} else {
		irq_disable(SWI4_IRQn);
	}
}
    b5dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		irq_enable(SWI4_IRQn);
    b5e0:	f7f5 bb3e 	b.w	c60 <_arch_irq_enable>
}
    b5e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		irq_disable(SWI4_IRQn);
    b5e8:	f7f5 bb4a 	b.w	c80 <_arch_irq_disable>
    b5ec:	0000f044 	.word	0x0000f044
    b5f0:	0000f073 	.word	0x0000f073

0000b5f4 <mayfly_is_enabled>:

u32_t mayfly_is_enabled(u8_t caller_id, u8_t callee_id)
{
    b5f4:	b508      	push	{r3, lr}
	(void)caller_id;

	switch (callee_id) {
    b5f6:	b161      	cbz	r1, b612 <mayfly_is_enabled+0x1e>
    b5f8:	2901      	cmp	r1, #1
    b5fa:	d00f      	beq.n	b61c <mayfly_is_enabled+0x28>

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(SWI4_IRQn);

	default:
		LL_ASSERT(0);
    b5fc:	4a08      	ldr	r2, [pc, #32]	; (b620 <mayfly_is_enabled+0x2c>)
    b5fe:	4909      	ldr	r1, [pc, #36]	; (b624 <mayfly_is_enabled+0x30>)
    b600:	2003      	movs	r0, #3
    b602:	f7f6 fdfd 	bl	2200 <bt_log>
    b606:	4040      	eors	r0, r0
    b608:	f380 8811 	msr	BASEPRI, r0
    b60c:	f04f 0004 	mov.w	r0, #4
    b610:	df02      	svc	2
		return irq_is_enabled(RTC0_IRQn);
    b612:	200b      	movs	r0, #11
		break;
	}

	return 0;
}
    b614:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		return irq_is_enabled(SWI4_IRQn);
    b618:	f7f5 bb46 	b.w	ca8 <_arch_irq_is_enabled>
    b61c:	2018      	movs	r0, #24
    b61e:	e7f9      	b.n	b614 <mayfly_is_enabled+0x20>
    b620:	0000f055 	.word	0x0000f055
    b624:	0000d86b 	.word	0x0000d86b

0000b628 <mayfly_prio_is_equal>:
u32_t mayfly_prio_is_equal(u8_t caller_id, u8_t callee_id)
{
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
	return (caller_id == callee_id) ||
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
    b628:	4288      	cmp	r0, r1
    b62a:	d00a      	beq.n	b642 <mayfly_prio_is_equal+0x1a>
	return (caller_id == callee_id) ||
    b62c:	b918      	cbnz	r0, b636 <mayfly_prio_is_equal+0xe>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
    b62e:	1e4b      	subs	r3, r1, #1
    b630:	4258      	negs	r0, r3
    b632:	4158      	adcs	r0, r3
    b634:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
    b636:	2801      	cmp	r0, #1
    b638:	d105      	bne.n	b646 <mayfly_prio_is_equal+0x1e>
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
    b63a:	fab1 f081 	clz	r0, r1
    b63e:	0940      	lsrs	r0, r0, #5
    b640:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
    b642:	2001      	movs	r0, #1
    b644:	4770      	bx	lr
    b646:	2000      	movs	r0, #0
		(callee_id == MAYFLY_CALL_ID_WORKER));
#else
	/* TODO: check Kconfig set priorities */
	return caller_id == callee_id;
#endif
}
    b648:	4770      	bx	lr
	...

0000b64c <mayfly_pend>:

void mayfly_pend(u8_t caller_id, u8_t callee_id)
{
    b64c:	b508      	push	{r3, lr}
    b64e:	4b0b      	ldr	r3, [pc, #44]	; (b67c <mayfly_pend+0x30>)
	(void)caller_id;

	switch (callee_id) {
    b650:	b161      	cbz	r1, b66c <mayfly_pend+0x20>
    b652:	2901      	cmp	r1, #1
    b654:	d00f      	beq.n	b676 <mayfly_pend+0x2a>
	case MAYFLY_CALL_ID_JOB:
		NVIC_SetPendingIRQ(SWI4_IRQn);
		break;

	default:
		LL_ASSERT(0);
    b656:	4a0a      	ldr	r2, [pc, #40]	; (b680 <mayfly_pend+0x34>)
    b658:	490a      	ldr	r1, [pc, #40]	; (b684 <mayfly_pend+0x38>)
    b65a:	2003      	movs	r0, #3
    b65c:	f7f6 fdd0 	bl	2200 <bt_log>
    b660:	4040      	eors	r0, r0
    b662:	f380 8811 	msr	BASEPRI, r0
    b666:	f04f 0004 	mov.w	r0, #4
    b66a:	df02      	svc	2
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    b66c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    b670:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    b674:	bd08      	pop	{r3, pc}
    b676:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    b67a:	e7f9      	b.n	b670 <mayfly_pend+0x24>
    b67c:	e000e100 	.word	0xe000e100
    b680:	0000f067 	.word	0x0000f067
    b684:	0000d86b 	.word	0x0000d86b

0000b688 <hal_ticker_instance0_caller_id_get>:

u8_t hal_ticker_instance0_caller_id_get(u8_t user_id)
{
	u8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
    b688:	2803      	cmp	r0, #3
{
    b68a:	b508      	push	{r3, lr}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
    b68c:	d90a      	bls.n	b6a4 <hal_ticker_instance0_caller_id_get+0x1c>
    b68e:	4a09      	ldr	r2, [pc, #36]	; (b6b4 <hal_ticker_instance0_caller_id_get+0x2c>)
    b690:	4909      	ldr	r1, [pc, #36]	; (b6b8 <hal_ticker_instance0_caller_id_get+0x30>)

	caller_id = caller_id_lut[user_id];
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
    b692:	2003      	movs	r0, #3
    b694:	f7f6 fdb4 	bl	2200 <bt_log>
    b698:	4040      	eors	r0, r0
    b69a:	f380 8811 	msr	BASEPRI, r0
    b69e:	f04f 0004 	mov.w	r0, #4
    b6a2:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
    b6a4:	4b05      	ldr	r3, [pc, #20]	; (b6bc <hal_ticker_instance0_caller_id_get+0x34>)
    b6a6:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
    b6a8:	b910      	cbnz	r0, b6b0 <hal_ticker_instance0_caller_id_get+0x28>
    b6aa:	4a02      	ldr	r2, [pc, #8]	; (b6b4 <hal_ticker_instance0_caller_id_get+0x2c>)
    b6ac:	4904      	ldr	r1, [pc, #16]	; (b6c0 <hal_ticker_instance0_caller_id_get+0x38>)
    b6ae:	e7f0      	b.n	b692 <hal_ticker_instance0_caller_id_get+0xa>

	return caller_id;
}
    b6b0:	bd08      	pop	{r3, pc}
    b6b2:	bf00      	nop
    b6b4:	0000f097 	.word	0x0000f097
    b6b8:	0000f0d9 	.word	0x0000f0d9
    b6bc:	0000f0d5 	.word	0x0000f0d5
    b6c0:	0000f10e 	.word	0x0000f10e

0000b6c4 <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
    b6c4:	3802      	subs	r0, #2
{
    b6c6:	b510      	push	{r4, lr}
    b6c8:	461c      	mov	r4, r3
	switch (caller_id) {
    b6ca:	2803      	cmp	r0, #3
    b6cc:	d817      	bhi.n	b6fe <hal_ticker_instance0_sched+0x3a>
    b6ce:	e8df f000 	tbb	[pc, r0]
    b6d2:	0c02      	.short	0x0c02
    b6d4:	2a12      	.short	0x2a12
	case TICKER_CALL_ID_TRIGGER:
		switch (callee_id) {
    b6d6:	2903      	cmp	r1, #3
    b6d8:	d111      	bne.n	b6fe <hal_ticker_instance0_sched+0x3a>
		{
			static memq_link_t link;
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_worker};

			m.param = instance;
    b6da:	4b16      	ldr	r3, [pc, #88]	; (b734 <hal_ticker_instance0_sched+0x70>)

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
    b6dc:	2100      	movs	r1, #0
			m.param = instance;
    b6de:	609c      	str	r4, [r3, #8]
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_job};

			m.param = instance;

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
    b6e0:	2000      	movs	r0, #0

	default:
		LL_ASSERT(0);
		break;
	}
}
    b6e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
    b6e6:	f7f8 ba35 	b.w	3b54 <mayfly_enqueue>
		switch (callee_id) {
    b6ea:	2904      	cmp	r1, #4
    b6ec:	d107      	bne.n	b6fe <hal_ticker_instance0_sched+0x3a>
			m.param = instance;
    b6ee:	4b12      	ldr	r3, [pc, #72]	; (b738 <hal_ticker_instance0_sched+0x74>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
    b6f0:	2101      	movs	r1, #1
			m.param = instance;
    b6f2:	609c      	str	r4, [r3, #8]
    b6f4:	e7f4      	b.n	b6e0 <hal_ticker_instance0_sched+0x1c>
		switch (callee_id) {
    b6f6:	2903      	cmp	r1, #3
    b6f8:	d00c      	beq.n	b714 <hal_ticker_instance0_sched+0x50>
    b6fa:	2904      	cmp	r1, #4
    b6fc:	d00f      	beq.n	b71e <hal_ticker_instance0_sched+0x5a>
		LL_ASSERT(0);
    b6fe:	4a0f      	ldr	r2, [pc, #60]	; (b73c <hal_ticker_instance0_sched+0x78>)
    b700:	490f      	ldr	r1, [pc, #60]	; (b740 <hal_ticker_instance0_sched+0x7c>)
    b702:	2003      	movs	r0, #3
    b704:	f7f6 fd7c 	bl	2200 <bt_log>
    b708:	4040      	eors	r0, r0
    b70a:	f380 8811 	msr	BASEPRI, r0
    b70e:	f04f 0004 	mov.w	r0, #4
    b712:	df02      	svc	2
			m.param = instance;
    b714:	4b0b      	ldr	r3, [pc, #44]	; (b744 <hal_ticker_instance0_sched+0x80>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
    b716:	2100      	movs	r1, #0
			m.param = instance;
    b718:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
    b71a:	2001      	movs	r0, #1
    b71c:	e7e1      	b.n	b6e2 <hal_ticker_instance0_sched+0x1e>
			m.param = instance;
    b71e:	4b0a      	ldr	r3, [pc, #40]	; (b748 <hal_ticker_instance0_sched+0x84>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
    b720:	2101      	movs	r1, #1
			m.param = instance;
    b722:	609c      	str	r4, [r3, #8]
    b724:	e7f9      	b.n	b71a <hal_ticker_instance0_sched+0x56>
		switch (callee_id) {
    b726:	2904      	cmp	r1, #4
    b728:	d1e9      	bne.n	b6fe <hal_ticker_instance0_sched+0x3a>
			m.param = instance;
    b72a:	4b08      	ldr	r3, [pc, #32]	; (b74c <hal_ticker_instance0_sched+0x88>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
    b72c:	2101      	movs	r1, #1
			m.param = instance;
    b72e:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
    b730:	2003      	movs	r0, #3
    b732:	e7d6      	b.n	b6e2 <hal_ticker_instance0_sched+0x1e>
    b734:	20004e10 	.word	0x20004e10
    b738:	20004e20 	.word	0x20004e20
    b73c:	0000f0ba 	.word	0x0000f0ba
    b740:	0000d86b 	.word	0x0000d86b
    b744:	20004e30 	.word	0x20004e30
    b748:	20004e40 	.word	0x20004e40
    b74c:	20004e50 	.word	0x20004e50

0000b750 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(u32_t value)
{
	cntr_cmp_set(0, value);
    b750:	4601      	mov	r1, r0
    b752:	2000      	movs	r0, #0
    b754:	f7ff bae0 	b.w	ad18 <cntr_cmp_set>

0000b758 <fixed_data_unref>:

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
}

static void fixed_data_unref(struct net_buf *buf, u8_t *data)
{
    b758:	4770      	bx	lr
	...

0000b75c <net_buf_pool_get>:
}
    b75c:	4b01      	ldr	r3, [pc, #4]	; (b764 <net_buf_pool_get+0x8>)
    b75e:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    b762:	4770      	bx	lr
    b764:	20004f68 	.word	0x20004f68

0000b768 <net_buf_id>:
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    b768:	7982      	ldrb	r2, [r0, #6]
	return buf - pool->__bufs;
    b76a:	4b04      	ldr	r3, [pc, #16]	; (b77c <net_buf_id+0x14>)
    b76c:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    b770:	69db      	ldr	r3, [r3, #28]
    b772:	1ac0      	subs	r0, r0, r3
}
    b774:	4b02      	ldr	r3, [pc, #8]	; (b780 <net_buf_id+0x18>)
	return buf - pool->__bufs;
    b776:	10c0      	asrs	r0, r0, #3
}
    b778:	4358      	muls	r0, r3
    b77a:	4770      	bx	lr
    b77c:	20004f68 	.word	0x20004f68
    b780:	aaaaaaab 	.word	0xaaaaaaab

0000b784 <fixed_data_alloc>:
{
    b784:	b510      	push	{r4, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    b786:	4b09      	ldr	r3, [pc, #36]	; (b7ac <fixed_data_alloc+0x28>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    b788:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    b78a:	eb03 1342 	add.w	r3, r3, r2, lsl #5
	*size = min(fixed->data_size, *size);
    b78e:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    b790:	699b      	ldr	r3, [r3, #24]
    b792:	685c      	ldr	r4, [r3, #4]
	*size = min(fixed->data_size, *size);
    b794:	6823      	ldr	r3, [r4, #0]
    b796:	429a      	cmp	r2, r3
    b798:	bf94      	ite	ls
    b79a:	600a      	strls	r2, [r1, #0]
    b79c:	600b      	strhi	r3, [r1, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
    b79e:	f7ff ffe3 	bl	b768 <net_buf_id>
    b7a2:	e894 000c 	ldmia.w	r4, {r2, r3}
}
    b7a6:	fb02 3000 	mla	r0, r2, r0, r3
    b7aa:	bd10      	pop	{r4, pc}
    b7ac:	20004f68 	.word	0x20004f68

0000b7b0 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  s32_t timeout)
#endif
{
    b7b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    b7b4:	4605      	mov	r5, r0
    b7b6:	9101      	str	r1, [sp, #4]
    b7b8:	4616      	mov	r6, r2
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
    b7ba:	f000 fd91 	bl	c2e0 <_impl_k_uptime_get_32>
    b7be:	4607      	mov	r7, r0
	__asm__ volatile(
    b7c0:	f04f 0320 	mov.w	r3, #32
    b7c4:	f3ef 8811 	mrs	r8, BASEPRI
    b7c8:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
    b7cc:	8a6b      	ldrh	r3, [r5, #18]
    b7ce:	2b00      	cmp	r3, #0
    b7d0:	d03d      	beq.n	b84e <net_buf_alloc_len+0x9e>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
    b7d2:	8a2a      	ldrh	r2, [r5, #16]
    b7d4:	429a      	cmp	r2, r3
    b7d6:	d92a      	bls.n	b82e <net_buf_alloc_len+0x7e>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
    b7d8:	2100      	movs	r1, #0
    b7da:	4628      	mov	r0, r5
    b7dc:	f000 fadb 	bl	bd96 <k_queue_get>
			if (buf) {
    b7e0:	4604      	mov	r4, r0
    b7e2:	b320      	cbz	r0, b82e <net_buf_alloc_len+0x7e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    b7e4:	f388 8811 	msr	BASEPRI, r8
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
    b7e8:	9b01      	ldr	r3, [sp, #4]
    b7ea:	2b00      	cmp	r3, #0
    b7ec:	d03c      	beq.n	b868 <net_buf_alloc_len+0xb8>
		if (timeout != K_NO_WAIT && timeout != K_FOREVER) {
    b7ee:	1c73      	adds	r3, r6, #1
    b7f0:	2b01      	cmp	r3, #1
    b7f2:	d906      	bls.n	b802 <net_buf_alloc_len+0x52>
    b7f4:	f000 fd74 	bl	c2e0 <_impl_k_uptime_get_32>
			u32_t diff = k_uptime_get_32() - alloc_start;
    b7f8:	1bc0      	subs	r0, r0, r7

			timeout -= min(timeout, diff);
    b7fa:	42b0      	cmp	r0, r6
    b7fc:	bf94      	ite	ls
    b7fe:	1a36      	subls	r6, r6, r0
    b800:	1bb6      	subhi	r6, r6, r6
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    b802:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
    b804:	4f1e      	ldr	r7, [pc, #120]	; (b880 <net_buf_alloc_len+0xd0>)
    b806:	eb07 1343 	add.w	r3, r7, r3, lsl #5
    b80a:	4632      	mov	r2, r6
    b80c:	699b      	ldr	r3, [r3, #24]
    b80e:	681b      	ldr	r3, [r3, #0]
    b810:	a901      	add	r1, sp, #4
    b812:	681b      	ldr	r3, [r3, #0]
    b814:	4620      	mov	r0, r4
    b816:	4798      	blx	r3
    b818:	4605      	mov	r5, r0
		}

		buf->__buf = data_alloc(buf, &size, timeout);
    b81a:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
    b81c:	bb28      	cbnz	r0, b86a <net_buf_alloc_len+0xba>
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	k_lifo_put(&pool->free, buf);
    b81e:	79a0      	ldrb	r0, [r4, #6]
    b820:	4621      	mov	r1, r4
    b822:	eb07 1040 	add.w	r0, r7, r0, lsl #5
    b826:	f000 fa96 	bl	bd56 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
    b82a:	462c      	mov	r4, r5
    b82c:	e018      	b.n	b860 <net_buf_alloc_len+0xb0>
		uninit_count = pool->uninit_count--;
    b82e:	8a6b      	ldrh	r3, [r5, #18]
    b830:	1e5a      	subs	r2, r3, #1
    b832:	826a      	strh	r2, [r5, #18]
    b834:	f388 8811 	msr	BASEPRI, r8
	buf = &pool->__bufs[pool->buf_count - uninit_count];
    b838:	8a2c      	ldrh	r4, [r5, #16]
    b83a:	1ae4      	subs	r4, r4, r3
    b83c:	69eb      	ldr	r3, [r5, #28]
    b83e:	2218      	movs	r2, #24
    b840:	fb02 3404 	mla	r4, r2, r4, r3
	return pool - _net_buf_pool_list;
    b844:	4b0e      	ldr	r3, [pc, #56]	; (b880 <net_buf_alloc_len+0xd0>)
    b846:	1aed      	subs	r5, r5, r3
    b848:	116d      	asrs	r5, r5, #5
	buf->pool_id = pool_id(pool);
    b84a:	71a5      	strb	r5, [r4, #6]
		goto success;
    b84c:	e7cc      	b.n	b7e8 <net_buf_alloc_len+0x38>
    b84e:	f388 8811 	msr	BASEPRI, r8
	buf = k_lifo_get(&pool->free, timeout);
    b852:	4631      	mov	r1, r6
    b854:	4628      	mov	r0, r5
    b856:	f000 fa9e 	bl	bd96 <k_queue_get>
	if (!buf) {
    b85a:	4604      	mov	r4, r0
    b85c:	2800      	cmp	r0, #0
    b85e:	d1c3      	bne.n	b7e8 <net_buf_alloc_len+0x38>
	pool->avail_count--;
	NET_BUF_ASSERT(pool->avail_count >= 0);
#endif

	return buf;
}
    b860:	4620      	mov	r0, r4
    b862:	b002      	add	sp, #8
    b864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		buf->__buf = NULL;
    b868:	6123      	str	r3, [r4, #16]
	buf->ref   = 1;
    b86a:	2301      	movs	r3, #1
    b86c:	7123      	strb	r3, [r4, #4]
	buf->flags = 0;
    b86e:	2300      	movs	r3, #0
	buf->frags = NULL;
    b870:	6023      	str	r3, [r4, #0]
	buf->flags = 0;
    b872:	7163      	strb	r3, [r4, #5]
	buf->size  = size;
    b874:	9a01      	ldr	r2, [sp, #4]
	buf->len  = 0;
    b876:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
    b878:	6923      	ldr	r3, [r4, #16]
    b87a:	81e2      	strh	r2, [r4, #14]
    b87c:	60a3      	str	r3, [r4, #8]
	return buf;
    b87e:	e7ef      	b.n	b860 <net_buf_alloc_len+0xb0>
    b880:	20004f68 	.word	0x20004f68

0000b884 <net_buf_alloc_fixed>:
				       line);
}
#else
struct net_buf *net_buf_alloc_fixed(struct net_buf_pool *pool, s32_t timeout)
{
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    b884:	6983      	ldr	r3, [r0, #24]

	return net_buf_alloc_len(pool, fixed->data_size, timeout);
    b886:	685b      	ldr	r3, [r3, #4]
    b888:	460a      	mov	r2, r1
    b88a:	6819      	ldr	r1, [r3, #0]
    b88c:	f7ff bf90 	b.w	b7b0 <net_buf_alloc_len>

0000b890 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, s32_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, s32_t timeout)
#endif
{
    b890:	b570      	push	{r4, r5, r6, lr}
    b892:	4606      	mov	r6, r0
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p timeout %d", func, line, fifo, timeout);

	buf = k_fifo_get(fifo, timeout);
    b894:	f000 fa7f 	bl	bd96 <k_queue_get>
	if (!buf) {
    b898:	4605      	mov	r5, r0
    b89a:	b128      	cbz	r0, b8a8 <net_buf_get+0x18>
    b89c:	4604      	mov	r4, r0
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
    b89e:	7963      	ldrb	r3, [r4, #5]
    b8a0:	f013 0301 	ands.w	r3, r3, #1
    b8a4:	d102      	bne.n	b8ac <net_buf_get+0x1c>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
    b8a6:	6023      	str	r3, [r4, #0]

	return buf;
}
    b8a8:	4628      	mov	r0, r5
    b8aa:	bd70      	pop	{r4, r5, r6, pc}
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
    b8ac:	2100      	movs	r1, #0
    b8ae:	4630      	mov	r0, r6
    b8b0:	f000 fa71 	bl	bd96 <k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
    b8b4:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
    b8b6:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
    b8b8:	f023 0301 	bic.w	r3, r3, #1
    b8bc:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
    b8be:	4604      	mov	r4, r0
    b8c0:	e7ed      	b.n	b89e <net_buf_get+0xe>

0000b8c2 <net_buf_simple_reserve>:
{
	NET_BUF_ASSERT(buf);
	NET_BUF_ASSERT(buf->len == 0);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
    b8c2:	6883      	ldr	r3, [r0, #8]
    b8c4:	4419      	add	r1, r3
    b8c6:	6001      	str	r1, [r0, #0]
    b8c8:	4770      	bx	lr

0000b8ca <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
    b8ca:	b410      	push	{r4}
	struct net_buf *tail;

	NET_BUF_ASSERT(fifo);
	NET_BUF_ASSERT(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
    b8cc:	460a      	mov	r2, r1
    b8ce:	6814      	ldr	r4, [r2, #0]
    b8d0:	b914      	cbnz	r4, b8d8 <net_buf_put+0xe>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
}
    b8d2:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
    b8d4:	f000 ba43 	b.w	bd5e <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
    b8d8:	7953      	ldrb	r3, [r2, #5]
    b8da:	f043 0301 	orr.w	r3, r3, #1
    b8de:	7153      	strb	r3, [r2, #5]
    b8e0:	4622      	mov	r2, r4
    b8e2:	e7f4      	b.n	b8ce <net_buf_put+0x4>

0000b8e4 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
    b8e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b8e6:	4d15      	ldr	r5, [pc, #84]	; (b93c <net_buf_unref+0x58>)
    b8e8:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
    b8ea:	2600      	movs	r6, #0
	while (buf) {
    b8ec:	b904      	cbnz	r4, b8f0 <net_buf_unref+0xc>
    b8ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (--buf->ref > 0) {
    b8f0:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
    b8f2:	6827      	ldr	r7, [r4, #0]
		if (--buf->ref > 0) {
    b8f4:	3b01      	subs	r3, #1
    b8f6:	b2db      	uxtb	r3, r3
    b8f8:	7123      	strb	r3, [r4, #4]
    b8fa:	2b00      	cmp	r3, #0
    b8fc:	d1f7      	bne.n	b8ee <net_buf_unref+0xa>
		if (buf->__buf) {
    b8fe:	6921      	ldr	r1, [r4, #16]
    b900:	b159      	cbz	r1, b91a <net_buf_unref+0x36>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
    b902:	7963      	ldrb	r3, [r4, #5]
    b904:	079b      	lsls	r3, r3, #30
    b906:	d407      	bmi.n	b918 <net_buf_unref+0x34>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    b908:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
    b90a:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    b90e:	4620      	mov	r0, r4
    b910:	699b      	ldr	r3, [r3, #24]
    b912:	681b      	ldr	r3, [r3, #0]
    b914:	689b      	ldr	r3, [r3, #8]
    b916:	4798      	blx	r3
			buf->__buf = NULL;
    b918:	6126      	str	r6, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
    b91a:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
    b91c:	60a6      	str	r6, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		pool->avail_count++;
		NET_BUF_ASSERT(pool->avail_count <= pool->buf_count);
#endif

		if (pool->destroy) {
    b91e:	eb05 1340 	add.w	r3, r5, r0, lsl #5
		buf->frags = NULL;
    b922:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
    b924:	695b      	ldr	r3, [r3, #20]
    b926:	b11b      	cbz	r3, b930 <net_buf_unref+0x4c>
			pool->destroy(buf);
    b928:	4620      	mov	r0, r4
    b92a:	4798      	blx	r3
{
    b92c:	463c      	mov	r4, r7
    b92e:	e7dd      	b.n	b8ec <net_buf_unref+0x8>
	k_lifo_put(&pool->free, buf);
    b930:	4621      	mov	r1, r4
    b932:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    b936:	f000 fa0e 	bl	bd56 <k_queue_prepend>
    b93a:	e7f7      	b.n	b92c <net_buf_unref+0x48>
    b93c:	20004f68 	.word	0x20004f68

0000b940 <net_buf_ref>:
{
	NET_BUF_ASSERT(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
    b940:	7903      	ldrb	r3, [r0, #4]
    b942:	3301      	adds	r3, #1
    b944:	7103      	strb	r3, [r0, #4]
	return buf;
}
    b946:	4770      	bx	lr

0000b948 <net_buf_simple_add>:
	return buf->data + buf->len;
    b948:	8883      	ldrh	r3, [r0, #4]
    b94a:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
    b94c:	4419      	add	r1, r3
    b94e:	8081      	strh	r1, [r0, #4]
	return tail;
}
    b950:	18d0      	adds	r0, r2, r3
    b952:	4770      	bx	lr

0000b954 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
    b954:	b430      	push	{r4, r5}
    b956:	8883      	ldrh	r3, [r0, #4]
    b958:	6804      	ldr	r4, [r0, #0]
	buf->len += len;
    b95a:	189d      	adds	r5, r3, r2
    b95c:	8085      	strh	r5, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
    b95e:	18e0      	adds	r0, r4, r3
}
    b960:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
    b962:	f7f4 be5a 	b.w	61a <memcpy>

0000b966 <net_buf_simple_add_u8>:
    b966:	8883      	ldrh	r3, [r0, #4]
    b968:	6802      	ldr	r2, [r0, #0]

u8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, u8_t val)
{
    b96a:	b510      	push	{r4, lr}
	buf->len += len;
    b96c:	1c5c      	adds	r4, r3, #1
    b96e:	8084      	strh	r4, [r0, #4]
	u8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
    b970:	54d1      	strb	r1, [r2, r3]

	return u8;
}
    b972:	18d0      	adds	r0, r2, r3
    b974:	bd10      	pop	{r4, pc}

0000b976 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
    b976:	8883      	ldrh	r3, [r0, #4]
    b978:	1a5b      	subs	r3, r3, r1
    b97a:	8083      	strh	r3, [r0, #4]
	return buf->data += len;
    b97c:	6803      	ldr	r3, [r0, #0]
    b97e:	4419      	add	r1, r3
    b980:	6001      	str	r1, [r0, #0]
}
    b982:	4608      	mov	r0, r1
    b984:	4770      	bx	lr

0000b986 <net_buf_simple_pull_u8>:

u8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
    b986:	b508      	push	{r3, lr}
	u8_t val;

	val = buf->data[0];
    b988:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
    b98a:	2101      	movs	r1, #1
	val = buf->data[0];
    b98c:	781a      	ldrb	r2, [r3, #0]
	net_buf_simple_pull(buf, 1);
    b98e:	f7ff fff2 	bl	b976 <net_buf_simple_pull>

	return val;
}
    b992:	4610      	mov	r0, r2
    b994:	bd08      	pop	{r3, pc}

0000b996 <net_buf_simple_headroom>:
	return sys_be32_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
    b996:	6802      	ldr	r2, [r0, #0]
    b998:	6880      	ldr	r0, [r0, #8]
}
    b99a:	1a10      	subs	r0, r2, r0
    b99c:	4770      	bx	lr
	...

0000b9a0 <_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void _sys_device_do_config_level(int level)
{
    b9a0:	b538      	push	{r3, r4, r5, lr}
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1];
    b9a2:	4b08      	ldr	r3, [pc, #32]	; (b9c4 <_sys_device_do_config_level+0x24>)
    b9a4:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    b9a8:	3001      	adds	r0, #1
    b9aa:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    b9ae:	4620      	mov	r0, r4
    b9b0:	42a8      	cmp	r0, r5
    b9b2:	f104 040c 	add.w	r4, r4, #12
    b9b6:	d300      	bcc.n	b9ba <_sys_device_do_config_level+0x1a>
		struct device_config *device = info->config;

		device->init(info);
		_k_object_init(info);
	}
}
    b9b8:	bd38      	pop	{r3, r4, r5, pc}
		device->init(info);
    b9ba:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    b9be:	685b      	ldr	r3, [r3, #4]
    b9c0:	4798      	blx	r3
    b9c2:	e7f4      	b.n	b9ae <_sys_device_do_config_level+0xe>
    b9c4:	0000f140 	.word	0x0000f140

0000b9c8 <device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
    b9c8:	4b10      	ldr	r3, [pc, #64]	; (ba0c <device_get_binding+0x44>)
{
    b9ca:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
    b9cc:	4c10      	ldr	r4, [pc, #64]	; (ba10 <device_get_binding+0x48>)
{
    b9ce:	4605      	mov	r5, r0
    b9d0:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
    b9d2:	429c      	cmp	r4, r3
    b9d4:	d104      	bne.n	b9e0 <device_get_binding+0x18>
    b9d6:	4c0e      	ldr	r4, [pc, #56]	; (ba10 <device_get_binding+0x48>)
		if (info->driver_api != NULL && info->config->name == name) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
    b9d8:	42b4      	cmp	r4, r6
    b9da:	d109      	bne.n	b9f0 <device_get_binding+0x28>
		if (!strcmp(name, info->config->name)) {
			return info;
		}
	}

	return NULL;
    b9dc:	2400      	movs	r4, #0
    b9de:	e012      	b.n	ba06 <device_get_binding+0x3e>
		if (info->driver_api != NULL && info->config->name == name) {
    b9e0:	6862      	ldr	r2, [r4, #4]
    b9e2:	b11a      	cbz	r2, b9ec <device_get_binding+0x24>
    b9e4:	6822      	ldr	r2, [r4, #0]
    b9e6:	6812      	ldr	r2, [r2, #0]
    b9e8:	42aa      	cmp	r2, r5
    b9ea:	d00c      	beq.n	ba06 <device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
    b9ec:	340c      	adds	r4, #12
    b9ee:	e7f0      	b.n	b9d2 <device_get_binding+0xa>
		if (!info->driver_api) {
    b9f0:	6863      	ldr	r3, [r4, #4]
    b9f2:	b90b      	cbnz	r3, b9f8 <device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
    b9f4:	340c      	adds	r4, #12
    b9f6:	e7ef      	b.n	b9d8 <device_get_binding+0x10>
		if (!strcmp(name, info->config->name)) {
    b9f8:	6823      	ldr	r3, [r4, #0]
    b9fa:	4628      	mov	r0, r5
    b9fc:	6819      	ldr	r1, [r3, #0]
    b9fe:	f7f4 fdea 	bl	5d6 <strcmp>
    ba02:	2800      	cmp	r0, #0
    ba04:	d1f6      	bne.n	b9f4 <device_get_binding+0x2c>
}
    ba06:	4620      	mov	r0, r4
    ba08:	bd70      	pop	{r4, r5, r6, pc}
    ba0a:	bf00      	nop
    ba0c:	20004f0c 	.word	0x20004f0c
    ba10:	20004e70 	.word	0x20004e70

0000ba14 <_sys_power_save_idle_exit>:
	if (_sys_pm_idle_exit_notify) {
		_sys_soc_resume();
	}
#endif

	if (_must_enter_tickless_idle(ticks)) {
    ba14:	1c43      	adds	r3, r0, #1
    ba16:	d003      	beq.n	ba20 <_sys_power_save_idle_exit+0xc>
    ba18:	4b03      	ldr	r3, [pc, #12]	; (ba28 <_sys_power_save_idle_exit+0x14>)
    ba1a:	681b      	ldr	r3, [r3, #0]
    ba1c:	4298      	cmp	r0, r3
    ba1e:	db01      	blt.n	ba24 <_sys_power_save_idle_exit+0x10>
		/* Resume normal periodic system timer interrupts */
		_timer_idle_exit();
    ba20:	f7f6 ba46 	b.w	1eb0 <_timer_idle_exit>
    ba24:	4770      	bx	lr
    ba26:	bf00      	nop
    ba28:	20004e60 	.word	0x20004e60

0000ba2c <idle>:
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    ba2c:	4d0f      	ldr	r5, [pc, #60]	; (ba6c <idle+0x40>)
#else
#define IDLE_YIELD_IF_COOP() do { } while ((0))
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
    ba2e:	b580      	push	{r7, lr}
	if (_must_enter_tickless_idle(ticks)) {
    ba30:	4f0f      	ldr	r7, [pc, #60]	; (ba70 <idle+0x44>)
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ba32:	f105 0610 	add.w	r6, r5, #16
	__asm__ volatile(
    ba36:	f04f 0220 	mov.w	r2, #32
    ba3a:	f3ef 8311 	mrs	r3, BASEPRI
    ba3e:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
    ba42:	692b      	ldr	r3, [r5, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ba44:	42b3      	cmp	r3, r6
    ba46:	d00a      	beq.n	ba5e <idle+0x32>
static inline s32_t _get_next_timeout_expiry(void)
{
	struct _timeout *t = (struct _timeout *)
			     sys_dlist_peek_head(&_timeout_q);

	return t ? t->delta_ticks_from_prev : K_FOREVER;
    ba48:	b14b      	cbz	r3, ba5e <idle+0x32>
    ba4a:	691c      	ldr	r4, [r3, #16]
    ba4c:	1c63      	adds	r3, r4, #1
    ba4e:	d008      	beq.n	ba62 <idle+0x36>
    ba50:	683b      	ldr	r3, [r7, #0]
    ba52:	42a3      	cmp	r3, r4
    ba54:	dd05      	ble.n	ba62 <idle+0x36>
	_kernel.idle = ticks;
    ba56:	61ac      	str	r4, [r5, #24]
	k_cpu_idle();
    ba58:	f7f5 f98a 	bl	d70 <k_cpu_idle>
    ba5c:	e7eb      	b.n	ba36 <idle+0xa>
    ba5e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		_timer_idle_enter(ticks);
    ba62:	4620      	mov	r0, r4
    ba64:	f7f6 fa10 	bl	1e88 <_timer_idle_enter>
    ba68:	e7f5      	b.n	ba56 <idle+0x2a>
    ba6a:	bf00      	nop
    ba6c:	20002940 	.word	0x20002940
    ba70:	20004e60 	.word	0x20004e60

0000ba74 <_bss_zero>:
 *
 * @return N/A
 */
void _bss_zero(void)
{
	memset(&__bss_start, 0,
    ba74:	4802      	ldr	r0, [pc, #8]	; (ba80 <_bss_zero+0xc>)
    ba76:	4a03      	ldr	r2, [pc, #12]	; (ba84 <_bss_zero+0x10>)
    ba78:	2100      	movs	r1, #0
    ba7a:	1a12      	subs	r2, r2, r0
    ba7c:	f7f4 bdf9 	b.w	672 <memset>
    ba80:	20000000 	.word	0x20000000
    ba84:	20002cb8 	.word	0x20002cb8

0000ba88 <_data_copy>:
 *
 * @return N/A
 */
void _data_copy(void)
{
	memcpy(&__data_ram_start, &__data_rom_start,
    ba88:	4802      	ldr	r0, [pc, #8]	; (ba94 <_data_copy+0xc>)
    ba8a:	4a03      	ldr	r2, [pc, #12]	; (ba98 <_data_copy+0x10>)
    ba8c:	4903      	ldr	r1, [pc, #12]	; (ba9c <_data_copy+0x14>)
    ba8e:	1a12      	subs	r2, r2, r0
    ba90:	f7f4 bdc3 	b.w	61a <memcpy>
    ba94:	20004bb8 	.word	0x20004bb8
    ba98:	20004fa8 	.word	0x20004fa8
    ba9c:	0000f1a8 	.word	0x0000f1a8

0000baa0 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    baa0:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
    baa2:	2002      	movs	r0, #2
    baa4:	f7ff ff7c 	bl	b9a0 <_sys_device_do_config_level>
	if (boot_delay > 0) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
    baa8:	4908      	ldr	r1, [pc, #32]	; (bacc <bg_thread_main+0x2c>)
    baaa:	4809      	ldr	r0, [pc, #36]	; (bad0 <bg_thread_main+0x30>)
    baac:	f7f5 fc32 	bl	1314 <printk>

	/* Final init level before app starts */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
    bab0:	2003      	movs	r0, #3
    bab2:	f7ff ff75 	bl	b9a0 <_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	_init_static_threads();
    bab6:	f000 fe15 	bl	c6e4 <_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
    baba:	f7f4 fe39 	bl	730 <main>

	/* Terminate thread normally since it has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
    babe:	4a05      	ldr	r2, [pc, #20]	; (bad4 <bg_thread_main+0x34>)
    bac0:	7a13      	ldrb	r3, [r2, #8]
    bac2:	f023 0301 	bic.w	r3, r3, #1
    bac6:	7213      	strb	r3, [r2, #8]
    bac8:	bd08      	pop	{r3, pc}
    baca:	bf00      	nop
    bacc:	0000f15c 	.word	0x0000f15c
    bad0:	0000f178 	.word	0x0000f178
    bad4:	200028d8 	.word	0x200028d8

0000bad8 <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
    bad8:	b580      	push	{r7, lr}
    bada:	b086      	sub	sp, #24
    badc:	4e32      	ldr	r6, [pc, #200]	; (bba8 <_Cstart+0xd0>)
    bade:	af06      	add	r7, sp, #24
	_IntLibInit();
    bae0:	f7f4 ff00 	bl	8e4 <_IntLibInit>
    bae4:	2324      	movs	r3, #36	; 0x24
    bae6:	199a      	adds	r2, r3, r6
	list->head = (sys_dnode_t *)list;
    bae8:	519a      	str	r2, [r3, r6]
    baea:	3308      	adds	r3, #8
	for (int ii = 0; ii < K_NUM_PRIORITIES; ii++) {
    baec:	f5b3 7f92 	cmp.w	r3, #292	; 0x124
	list->tail = (sys_dnode_t *)list;
    baf0:	6052      	str	r2, [r2, #4]
    baf2:	d1f8      	bne.n	bae6 <_Cstart+0xe>
	_ready_q.cache = _main_thread;
    baf4:	4d2d      	ldr	r5, [pc, #180]	; (bbac <_Cstart+0xd4>)
	_setup_new_thread(_main_thread, _main_stack,
    baf6:	f8df 80dc 	ldr.w	r8, [pc, #220]	; bbd4 <_Cstart+0xfc>
	_ready_q.cache = _main_thread;
    bafa:	61f5      	str	r5, [r6, #28]
	_setup_new_thread(_main_thread, _main_stack,
    bafc:	2400      	movs	r4, #0
    bafe:	f04f 0901 	mov.w	r9, #1
    bb02:	4643      	mov	r3, r8
    bb04:	f44f 6280 	mov.w	r2, #1024	; 0x400
    bb08:	4929      	ldr	r1, [pc, #164]	; (bbb0 <_Cstart+0xd8>)
    bb0a:	f8cd 9010 	str.w	r9, [sp, #16]
    bb0e:	4628      	mov	r0, r5
    bb10:	9403      	str	r4, [sp, #12]
    bb12:	9402      	str	r4, [sp, #8]
    bb14:	9401      	str	r4, [sp, #4]
    bb16:	9400      	str	r4, [sp, #0]
    bb18:	f000 fd9c 	bl	c654 <_setup_new_thread>
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    bb1c:	7a6b      	ldrb	r3, [r5, #9]
	_add_thread_to_ready_q(_main_thread);
    bb1e:	4628      	mov	r0, r5
    bb20:	f023 0304 	bic.w	r3, r3, #4
    bb24:	726b      	strb	r3, [r5, #9]
    bb26:	f000 f97d 	bl	be24 <_add_thread_to_ready_q>
	_setup_new_thread(thr, stack,
    bb2a:	230f      	movs	r3, #15
    bb2c:	9303      	str	r3, [sp, #12]
    bb2e:	4921      	ldr	r1, [pc, #132]	; (bbb4 <_Cstart+0xdc>)
    bb30:	f8cd 9010 	str.w	r9, [sp, #16]
    bb34:	9402      	str	r4, [sp, #8]
    bb36:	9401      	str	r4, [sp, #4]
    bb38:	9400      	str	r4, [sp, #0]
    bb3a:	4b1f      	ldr	r3, [pc, #124]	; (bbb8 <_Cstart+0xe0>)
    bb3c:	481f      	ldr	r0, [pc, #124]	; (bbbc <_Cstart+0xe4>)
    bb3e:	f44f 72a0 	mov.w	r2, #320	; 0x140
    bb42:	f000 fd87 	bl	c654 <_setup_new_thread>
    bb46:	4b1d      	ldr	r3, [pc, #116]	; (bbbc <_Cstart+0xe4>)
    bb48:	4a1c      	ldr	r2, [pc, #112]	; (bbbc <_Cstart+0xe4>)
    bb4a:	7a5b      	ldrb	r3, [r3, #9]
    bb4c:	f023 0304 	bic.w	r3, r3, #4
    bb50:	7253      	strb	r3, [r2, #9]
	_add_thread_to_ready_q(thr);
    bb52:	4610      	mov	r0, r2
    bb54:	f000 f966 	bl	be24 <_add_thread_to_ready_q>
	list->head = (sys_dnode_t *)list;
    bb58:	4b19      	ldr	r3, [pc, #100]	; (bbc0 <_Cstart+0xe8>)
    bb5a:	6133      	str	r3, [r6, #16]
	list->tail = (sys_dnode_t *)list;
    bb5c:	6173      	str	r3, [r6, #20]
 * @return N/A
 */
static ALWAYS_INLINE void _InterruptStackSetup(void)
{
#ifdef CONFIG_MPU_REQUIRES_POWER_OF_TWO_ALIGNMENT
	u32_t msp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
    bb5e:	4b19      	ldr	r3, [pc, #100]	; (bbc4 <_Cstart+0xec>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    bb60:	f383 8808 	msr	MSP, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    bb64:	4b18      	ldr	r3, [pc, #96]	; (bbc8 <_Cstart+0xf0>)
    bb66:	22e0      	movs	r2, #224	; 0xe0
    bb68:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    bb6c:	77dc      	strb	r4, [r3, #31]
    bb6e:	761c      	strb	r4, [r3, #24]
    bb70:	765c      	strb	r4, [r3, #25]
    bb72:	769c      	strb	r4, [r3, #26]
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    bb74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    bb76:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
    bb7a:	625a      	str	r2, [r3, #36]	; 0x24
extern void _CpuIdleInit(void);
static ALWAYS_INLINE void kernel_arch_init(void)
{
	_InterruptStackSetup();
	_ExcSetup();
	_FaultInit();
    bb7c:	f7f5 f868 	bl	c50 <_FaultInit>
	_CpuIdleInit();
    bb80:	f7f5 f8f0 	bl	d64 <_CpuIdleInit>
	 */

	prepare_multithreading(dummy_thread);

	/* perform basic hardware initialization */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    bb84:	4620      	mov	r0, r4
    bb86:	f7ff ff0b 	bl	b9a0 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    bb8a:	4648      	mov	r0, r9
    bb8c:	f7ff ff08 	bl	b9a0 <_sys_device_do_config_level>
		MPU_GUARD_ALIGN_AND_SIZE;
#else
	start_of_main_stack =
		K_THREAD_STACK_BUFFER(main_stack) + main_stack_size;
#endif
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
    bb90:	4b0e      	ldr	r3, [pc, #56]	; (bbcc <_Cstart+0xf4>)

	_current = main_thread;
    bb92:	60b5      	str	r5, [r6, #8]
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
    bb94:	f023 0307 	bic.w	r3, r3, #7

	/* the ready queue cache already contains the main thread */

	__asm__ __volatile__(
    bb98:	4a0d      	ldr	r2, [pc, #52]	; (bbd0 <_Cstart+0xf8>)
    bb9a:	f383 8809 	msr	PSP, r3
    bb9e:	2100      	movs	r1, #0
    bba0:	f381 8811 	msr	BASEPRI, r1
    bba4:	4640      	mov	r0, r8
    bba6:	4710      	bx	r2
    bba8:	20002940 	.word	0x20002940
    bbac:	200028d8 	.word	0x200028d8
    bbb0:	20003a78 	.word	0x20003a78
    bbb4:	20003e78 	.word	0x20003e78
    bbb8:	0000ba2d 	.word	0x0000ba2d
    bbbc:	20002870 	.word	0x20002870
    bbc0:	20002950 	.word	0x20002950
    bbc4:	200047b8 	.word	0x200047b8
    bbc8:	e000ed00 	.word	0xe000ed00
    bbcc:	20003e78 	.word	0x20003e78
    bbd0:	0000c5ed 	.word	0x0000c5ed
    bbd4:	0000baa1 	.word	0x0000baa1

0000bbd8 <get_bit_ptr>:

/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct k_mem_pool *p, int level, int bn, u32_t **word)
{
    bbd8:	b510      	push	{r4, lr}
	u32_t *bitarray = level <= p->max_inline_level ?
    bbda:	7ac4      	ldrb	r4, [r0, #11]
    bbdc:	68c0      	ldr	r0, [r0, #12]
		&p->levels[level].bits : p->levels[level].bits_p;
    bbde:	428c      	cmp	r4, r1
    bbe0:	f04f 040c 	mov.w	r4, #12
    bbe4:	bfb6      	itet	lt
    bbe6:	4361      	mullt	r1, r4
    bbe8:	fb04 0101 	mlage	r1, r4, r1, r0
    bbec:	5841      	ldrlt	r1, [r0, r1]

	*word = &bitarray[bn / 32];
    bbee:	2420      	movs	r4, #32
    bbf0:	fb92 f4f4 	sdiv	r4, r2, r4
    bbf4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    bbf8:	6019      	str	r1, [r3, #0]

	return bn & 0x1f;
}
    bbfa:	f002 001f 	and.w	r0, r2, #31
    bbfe:	bd10      	pop	{r4, pc}

0000bc00 <set_free_bit>:

static void set_free_bit(struct k_mem_pool *p, int level, int bn)
{
    bc00:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
    bc02:	ab01      	add	r3, sp, #4
    bc04:	f7ff ffe8 	bl	bbd8 <get_bit_ptr>

	*word |= (1<<bit);
    bc08:	9a01      	ldr	r2, [sp, #4]
    bc0a:	2301      	movs	r3, #1
    bc0c:	fa03 f000 	lsl.w	r0, r3, r0
    bc10:	6813      	ldr	r3, [r2, #0]
    bc12:	4303      	orrs	r3, r0
    bc14:	6013      	str	r3, [r2, #0]
}
    bc16:	b003      	add	sp, #12
    bc18:	f85d fb04 	ldr.w	pc, [sp], #4

0000bc1c <init_static_pools>:
		set_free_bit(p, 0, i);
	}
}

int init_static_pools(struct device *unused)
{
    bc1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bc20:	4c30      	ldr	r4, [pc, #192]	; (bce4 <init_static_pools+0xc8>)
	ARG_UNUSED(unused);
	struct k_mem_pool *p;

	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
    bc22:	4e31      	ldr	r6, [pc, #196]	; (bce8 <init_static_pools+0xcc>)
		sys_dlist_init(&p->levels[i].free_list);
    bc24:	270c      	movs	r7, #12
    bc26:	f1a4 0510 	sub.w	r5, r4, #16
	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
    bc2a:	42b5      	cmp	r5, r6
    bc2c:	d302      	bcc.n	bc34 <init_static_pools+0x18>
		init_mem_pool(p);
	}

	return 0;
}
    bc2e:	2000      	movs	r0, #0
    bc30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    bc34:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    bc38:	f834 ec08 	ldrh.w	lr, [r4, #-8]
	u32_t *bits = p->buf + buflen;
    bc3c:	f854 0c10 	ldr.w	r0, [r4, #-16]
	list->head = (sys_dnode_t *)list;
    bc40:	6024      	str	r4, [r4, #0]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    bc42:	fb03 fe0e 	mul.w	lr, r3, lr
	u32_t *bits = p->buf + buflen;
    bc46:	4470      	add	r0, lr
	list->tail = (sys_dnode_t *)list;
    bc48:	6064      	str	r4, [r4, #4]
	for (i = 0; i < p->n_levels; i++) {
    bc4a:	2100      	movs	r1, #0
			bits += (nblocks + 31)/32;
    bc4c:	f04f 0c20 	mov.w	ip, #32
	for (i = 0; i < p->n_levels; i++) {
    bc50:	f814 2c06 	ldrb.w	r2, [r4, #-6]
    bc54:	4291      	cmp	r1, r2
    bc56:	db07      	blt.n	bc68 <init_static_pools+0x4c>
    bc58:	f04f 0800 	mov.w	r8, #0
	for (i = 0; i < p->n_max; i++) {
    bc5c:	f834 3c08 	ldrh.w	r3, [r4, #-8]
    bc60:	4598      	cmp	r8, r3
    bc62:	db24      	blt.n	bcae <init_static_pools+0x92>
    bc64:	3418      	adds	r4, #24
    bc66:	e7de      	b.n	bc26 <init_static_pools+0xa>
		sys_dlist_init(&p->levels[i].free_list);
    bc68:	f854 ac04 	ldr.w	sl, [r4, #-4]
		int nblocks = buflen / sz;
    bc6c:	fbbe f2f3 	udiv	r2, lr, r3
		sys_dlist_init(&p->levels[i].free_list);
    bc70:	fb07 f901 	mul.w	r9, r7, r1
		if (nblocks < 32) {
    bc74:	2a1f      	cmp	r2, #31
		sys_dlist_init(&p->levels[i].free_list);
    bc76:	eb0a 0809 	add.w	r8, sl, r9
		sz = _ALIGN4(sz / 4);
    bc7a:	ea4f 0393 	mov.w	r3, r3, lsr #2
		sys_dlist_init(&p->levels[i].free_list);
    bc7e:	f108 0b04 	add.w	fp, r8, #4
			bits += (nblocks + 31)/32;
    bc82:	bfc8      	it	gt
    bc84:	321f      	addgt	r2, #31
		sz = _ALIGN4(sz / 4);
    bc86:	f103 0303 	add.w	r3, r3, #3
	list->head = (sys_dnode_t *)list;
    bc8a:	f8c8 b004 	str.w	fp, [r8, #4]
	list->tail = (sys_dnode_t *)list;
    bc8e:	f8c8 b008 	str.w	fp, [r8, #8]
			bits += (nblocks + 31)/32;
    bc92:	bfca      	itet	gt
    bc94:	fb92 f2fc 	sdivgt	r2, r2, ip
			p->max_inline_level = i;
    bc98:	f804 1c05 	strble.w	r1, [r4, #-5]
			p->levels[i].bits_p = bits;
    bc9c:	f84a 0009 	strgt.w	r0, [sl, r9]
		sz = _ALIGN4(sz / 4);
    bca0:	f023 0303 	bic.w	r3, r3, #3
			bits += (nblocks + 31)/32;
    bca4:	bfc8      	it	gt
    bca6:	eb00 0082 	addgt.w	r0, r0, r2, lsl #2
	for (i = 0; i < p->n_levels; i++) {
    bcaa:	3101      	adds	r1, #1
    bcac:	e7d0      	b.n	bc50 <init_static_pools+0x34>
	return p->buf + lsz * block;
    bcae:	f854 2c0c 	ldr.w	r2, [r4, #-12]
		sys_dlist_append(&p->levels[0].free_list, block);
    bcb2:	f854 3c04 	ldr.w	r3, [r4, #-4]
	return p->buf + lsz * block;
    bcb6:	f854 0c10 	ldr.w	r0, [r4, #-16]
    bcba:	fb02 f208 	mul.w	r2, r2, r8
		sys_dlist_append(&p->levels[0].free_list, block);
    bcbe:	f103 0e04 	add.w	lr, r3, #4
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
    bcc2:	f840 e002 	str.w	lr, [r0, r2]
	return p->buf + lsz * block;
    bcc6:	1881      	adds	r1, r0, r2
	node->prev = list->tail;
    bcc8:	689a      	ldr	r2, [r3, #8]
    bcca:	604a      	str	r2, [r1, #4]

	list->tail->next = node;
    bccc:	689a      	ldr	r2, [r3, #8]
		set_free_bit(p, 0, i);
    bcce:	4628      	mov	r0, r5
    bcd0:	6011      	str	r1, [r2, #0]
	list->tail = node;
    bcd2:	6099      	str	r1, [r3, #8]
    bcd4:	4642      	mov	r2, r8
    bcd6:	2100      	movs	r1, #0
    bcd8:	f7ff ff92 	bl	bc00 <set_free_bit>
	for (i = 0; i < p->n_max; i++) {
    bcdc:	f108 0801 	add.w	r8, r8, #1
    bce0:	e7bc      	b.n	bc5c <init_static_pools+0x40>
    bce2:	bf00      	nop
    bce4:	20004f50 	.word	0x20004f50
    bce8:	20004f40 	.word	0x20004f40

0000bcec <k_queue_init>:
	list->head = NULL;
    bcec:	2300      	movs	r3, #0
    bcee:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
    bcf0:	6043      	str	r3, [r0, #4]
void k_queue_init(struct k_queue *queue)
{
	sys_slist_init(&queue->data_q);
	sys_dlist_init(&queue->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&queue->poll_events);
    bcf2:	f100 0308 	add.w	r3, r0, #8
	list->head = (sys_dnode_t *)list;
    bcf6:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
    bcf8:	60c3      	str	r3, [r0, #12]
    bcfa:	4770      	bx	lr

0000bcfc <k_queue_insert>:

	irq_unlock(key);
}

void k_queue_insert(struct k_queue *queue, void *prev, void *data)
{
    bcfc:	b510      	push	{r4, lr}
    bcfe:	f04f 0320 	mov.w	r3, #32
    bd02:	f3ef 8411 	mrs	r4, BASEPRI
    bd06:	f383 8811 	msr	BASEPRI, r3
	if (!prev) {
    bd0a:	b931      	cbnz	r1, bd1a <k_queue_insert+0x1e>
	node->next = list->head;
    bd0c:	6803      	ldr	r3, [r0, #0]
    bd0e:	6013      	str	r3, [r2, #0]
	if (!list->tail) {
    bd10:	6843      	ldr	r3, [r0, #4]
	list->head = node;
    bd12:	6002      	str	r2, [r0, #0]
	if (!list->tail) {
    bd14:	b943      	cbnz	r3, bd28 <k_queue_insert+0x2c>
		list->tail = node;
    bd16:	6042      	str	r2, [r0, #4]
    bd18:	e006      	b.n	bd28 <k_queue_insert+0x2c>
	} else if (!prev->next) {
    bd1a:	680b      	ldr	r3, [r1, #0]
	node->next = NULL;
    bd1c:	6013      	str	r3, [r2, #0]
	} else if (!prev->next) {
    bd1e:	b98b      	cbnz	r3, bd44 <k_queue_insert+0x48>
	if (!list->tail) {
    bd20:	6843      	ldr	r3, [r0, #4]
    bd22:	b96b      	cbnz	r3, bd40 <k_queue_insert+0x44>
		list->tail = node;
    bd24:	6042      	str	r2, [r0, #4]
		list->head = node;
    bd26:	6002      	str	r2, [r0, #0]
	return _handle_obj_poll_events(&queue->poll_events, state);
    bd28:	2104      	movs	r1, #4
    bd2a:	3008      	adds	r0, #8
    bd2c:	f000 ff5e 	bl	cbec <_handle_obj_poll_events>
#endif /* !CONFIG_POLL */

	sys_slist_insert(&queue->data_q, prev, data);

#if defined(CONFIG_POLL)
	if (handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE)) {
    bd30:	b150      	cbz	r0, bd48 <k_queue_insert+0x4c>
	_update_time_slice_before_swap();
    bd32:	f000 fa23 	bl	c17c <_update_time_slice_before_swap>
	return __swap(key);
    bd36:	4620      	mov	r0, r4
		return;
	}
#endif /* CONFIG_POLL */

	irq_unlock(key);
}
    bd38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bd3c:	f7f4 bdde 	b.w	8fc <__swap>
		list->tail->next = node;
    bd40:	601a      	str	r2, [r3, #0]
    bd42:	e7e8      	b.n	bd16 <k_queue_insert+0x1a>
		prev->next = node;
    bd44:	600a      	str	r2, [r1, #0]
    bd46:	e7ef      	b.n	bd28 <k_queue_insert+0x2c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    bd48:	f384 8811 	msr	BASEPRI, r4
    bd4c:	bd10      	pop	{r4, pc}

0000bd4e <k_queue_append>:

void k_queue_append(struct k_queue *queue, void *data)
{
	return k_queue_insert(queue, queue->data_q.tail, data);
    bd4e:	460a      	mov	r2, r1
    bd50:	6841      	ldr	r1, [r0, #4]
    bd52:	f7ff bfd3 	b.w	bcfc <k_queue_insert>

0000bd56 <k_queue_prepend>:
}

void k_queue_prepend(struct k_queue *queue, void *data)
{
	return k_queue_insert(queue, NULL, data);
    bd56:	460a      	mov	r2, r1
    bd58:	2100      	movs	r1, #0
    bd5a:	f7ff bfcf 	b.w	bcfc <k_queue_insert>

0000bd5e <k_queue_append_list>:
}

void k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
    bd5e:	b510      	push	{r4, lr}
	__asm__ volatile(
    bd60:	f04f 0320 	mov.w	r3, #32
    bd64:	f3ef 8411 	mrs	r4, BASEPRI
    bd68:	f383 8811 	msr	BASEPRI, r3
	if (!list->tail) {
    bd6c:	6843      	ldr	r3, [r0, #4]
    bd6e:	b96b      	cbnz	r3, bd8c <k_queue_append_list+0x2e>
		list->head = (sys_snode_t *)head;
    bd70:	6001      	str	r1, [r0, #0]
		list->tail = (sys_snode_t *)tail;
    bd72:	6042      	str	r2, [r0, #4]
	return _handle_obj_poll_events(&queue->poll_events, state);
    bd74:	2104      	movs	r1, #4
    bd76:	3008      	adds	r0, #8
    bd78:	f000 ff38 	bl	cbec <_handle_obj_poll_events>
			return;
		}
	}
#else
	sys_slist_append_list(&queue->data_q, head, tail);
	if (handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE)) {
    bd7c:	b140      	cbz	r0, bd90 <k_queue_append_list+0x32>
	_update_time_slice_before_swap();
    bd7e:	f000 f9fd 	bl	c17c <_update_time_slice_before_swap>
	return __swap(key);
    bd82:	4620      	mov	r0, r4
		return;
	}
#endif /* !CONFIG_POLL */

	irq_unlock(key);
}
    bd84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bd88:	f7f4 bdb8 	b.w	8fc <__swap>
		list->tail->next = (sys_snode_t *)head;
    bd8c:	6019      	str	r1, [r3, #0]
    bd8e:	e7f0      	b.n	bd72 <k_queue_append_list+0x14>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    bd90:	f384 8811 	msr	BASEPRI, r4
    bd94:	bd10      	pop	{r4, pc}

0000bd96 <k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *k_queue_get(struct k_queue *queue, s32_t timeout)
{
    bd96:	b530      	push	{r4, r5, lr}
    bd98:	4604      	mov	r4, r0
    bd9a:	b087      	sub	sp, #28
    bd9c:	460d      	mov	r5, r1
	__asm__ volatile(
    bd9e:	f04f 0220 	mov.w	r2, #32
    bda2:	f3ef 8311 	mrs	r3, BASEPRI
    bda6:	f382 8811 	msr	BASEPRI, r2
    bdaa:	6802      	ldr	r2, [r0, #0]
	unsigned int key;
	void *data;

	key = irq_lock();

	if (likely(!sys_slist_is_empty(&queue->data_q))) {
    bdac:	b152      	cbz	r2, bdc4 <k_queue_get+0x2e>
	list->head = node->next;
    bdae:	6811      	ldr	r1, [r2, #0]
    bdb0:	6001      	str	r1, [r0, #0]
	if (list->tail == node) {
    bdb2:	6840      	ldr	r0, [r0, #4]
    bdb4:	4282      	cmp	r2, r0
		list->tail = list->head;
    bdb6:	bf08      	it	eq
    bdb8:	6061      	streq	r1, [r4, #4]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    bdba:	f383 8811 	msr	BASEPRI, r3
#else
	_pend_current_thread(&queue->wait_q, timeout);

	return _Swap(key) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
    bdbe:	4610      	mov	r0, r2
    bdc0:	b007      	add	sp, #28
    bdc2:	bd30      	pop	{r4, r5, pc}
	if (timeout == K_NO_WAIT) {
    bdc4:	b919      	cbnz	r1, bdce <k_queue_get+0x38>
    bdc6:	f383 8811 	msr	BASEPRI, r3
			return NULL;
    bdca:	2200      	movs	r2, #0
    bdcc:	e7f7      	b.n	bdbe <k_queue_get+0x28>
    bdce:	f383 8811 	msr	BASEPRI, r3
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
    bdd2:	2104      	movs	r1, #4
    bdd4:	4603      	mov	r3, r0
    bdd6:	eb0d 0001 	add.w	r0, sp, r1
    bdda:	f000 fe4f 	bl	ca7c <k_poll_event_init>
		event.state = K_POLL_STATE_NOT_READY;
    bdde:	f89d 3011 	ldrb.w	r3, [sp, #17]
		err = k_poll(&event, 1, timeout);
    bde2:	462a      	mov	r2, r5
		event.state = K_POLL_STATE_NOT_READY;
    bde4:	f36f 1307 	bfc	r3, #4, #4
		err = k_poll(&event, 1, timeout);
    bde8:	2101      	movs	r1, #1
    bdea:	a801      	add	r0, sp, #4
		event.state = K_POLL_STATE_NOT_READY;
    bdec:	f88d 3011 	strb.w	r3, [sp, #17]
		err = k_poll(&event, 1, timeout);
    bdf0:	f000 fe58 	bl	caa4 <k_poll>
		if (err) {
    bdf4:	2800      	cmp	r0, #0
    bdf6:	d1e8      	bne.n	bdca <k_queue_get+0x34>
	__asm__ volatile(
    bdf8:	f04f 0320 	mov.w	r3, #32
    bdfc:	f3ef 8111 	mrs	r1, BASEPRI
    be00:	f383 8811 	msr	BASEPRI, r3
    be04:	6822      	ldr	r2, [r4, #0]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    be06:	b12a      	cbz	r2, be14 <k_queue_get+0x7e>
	if (list->tail == node) {
    be08:	6860      	ldr	r0, [r4, #4]
	list->head = node->next;
    be0a:	6813      	ldr	r3, [r2, #0]
    be0c:	6023      	str	r3, [r4, #0]
	if (list->tail == node) {
    be0e:	4282      	cmp	r2, r0
		list->tail = list->head;
    be10:	bf08      	it	eq
    be12:	6063      	streq	r3, [r4, #4]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    be14:	f381 8811 	msr	BASEPRI, r1
	} while (!val && timeout == K_FOREVER);
    be18:	2a00      	cmp	r2, #0
    be1a:	d1d0      	bne.n	bdbe <k_queue_get+0x28>
    be1c:	1c6b      	adds	r3, r5, #1
    be1e:	d0de      	beq.n	bdde <k_queue_get+0x48>
    be20:	e7d3      	b.n	bdca <k_queue_get+0x34>
	...

0000be24 <_add_thread_to_ready_q>:
 *
 * Interrupts must be locked when calling this function.
 */

void _add_thread_to_ready_q(struct k_thread *thread)
{
    be24:	b530      	push	{r4, r5, lr}
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
    be26:	f990 300a 	ldrsb.w	r3, [r0, #10]
	*bmap |= _get_ready_q_prio_bit(prio);
    be2a:	4911      	ldr	r1, [pc, #68]	; (be70 <_add_thread_to_ready_q+0x4c>)
	return prio + _NUM_COOP_PRIO;
    be2c:	f103 0410 	add.w	r4, r3, #16
	return (prio + _NUM_COOP_PRIO) >> 5;
    be30:	1162      	asrs	r2, r4, #5
    be32:	3206      	adds	r2, #6
    be34:	eb01 0282 	add.w	r2, r1, r2, lsl #2
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
    be38:	f004 051f 	and.w	r5, r4, #31
    be3c:	2401      	movs	r4, #1
    be3e:	40ac      	lsls	r4, r5
    be40:	6895      	ldr	r5, [r2, #8]
	sys_dlist_t *q = &_ready_q.q[q_index];
    be42:	3314      	adds	r3, #20
	*bmap |= _get_ready_q_prio_bit(prio);
    be44:	432c      	orrs	r4, r5
	sys_dlist_t *q = &_ready_q.q[q_index];
    be46:	00db      	lsls	r3, r3, #3
	*bmap |= _get_ready_q_prio_bit(prio);
    be48:	6094      	str	r4, [r2, #8]
	sys_dlist_t *q = &_ready_q.q[q_index];
    be4a:	1d1a      	adds	r2, r3, #4
    be4c:	440a      	add	r2, r1
	node->prev = list->tail;
    be4e:	440b      	add	r3, r1
	node->next = list;
    be50:	6002      	str	r2, [r0, #0]
	node->prev = list->tail;
    be52:	689a      	ldr	r2, [r3, #8]
    be54:	6042      	str	r2, [r0, #4]
	list->tail->next = node;
    be56:	689a      	ldr	r2, [r3, #8]
    be58:	6010      	str	r0, [r2, #0]
	list->tail = node;
    be5a:	6098      	str	r0, [r3, #8]
	sys_dlist_append(q, &thread->base.k_q_node);

# ifndef CONFIG_SMP
	struct k_thread **cache = &_ready_q.cache;

	*cache = _is_t1_higher_prio_than_t2(thread, *cache) ? thread : *cache;
    be5c:	69cb      	ldr	r3, [r1, #28]
    be5e:	f990 400a 	ldrsb.w	r4, [r0, #10]
    be62:	f993 200a 	ldrsb.w	r2, [r3, #10]
    be66:	4294      	cmp	r4, r2
    be68:	bfa8      	it	ge
    be6a:	4618      	movge	r0, r3
    be6c:	61c8      	str	r0, [r1, #28]
    be6e:	bd30      	pop	{r4, r5, pc}
    be70:	20002940 	.word	0x20002940

0000be74 <_ready_thread>:
	thread->base.thread_state &= ~_THREAD_PRESTART;
    be74:	7a42      	ldrb	r2, [r0, #9]
    be76:	f022 0104 	bic.w	r1, r2, #4
	return !(_is_thread_prevented_from_running(thread) ||
    be7a:	f012 0f1b 	tst.w	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    be7e:	7241      	strb	r1, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
    be80:	d104      	bne.n	be8c <_ready_thread+0x18>
    be82:	6a03      	ldr	r3, [r0, #32]
    be84:	3301      	adds	r3, #1
    be86:	d101      	bne.n	be8c <_ready_thread+0x18>

	/* needed to handle the start-with-delay case */
	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
		_add_thread_to_ready_q(thread);
    be88:	f7ff bfcc 	b.w	be24 <_add_thread_to_ready_q>
    be8c:	4770      	bx	lr
	...

0000be90 <_add_timeout>:
{
    be90:	b570      	push	{r4, r5, r6, lr}
	timeout->delta_ticks_from_prev = timeout_in_ticks;
    be92:	610b      	str	r3, [r1, #16]
	timeout->thread = thread;
    be94:	6088      	str	r0, [r1, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
    be96:	60ca      	str	r2, [r1, #12]
	if (!timeout_in_ticks) {
    be98:	bb13      	cbnz	r3, bee0 <_add_timeout+0x50>
	__asm__ volatile(
    be9a:	f04f 0220 	mov.w	r2, #32
    be9e:	f3ef 8411 	mrs	r4, BASEPRI
    bea2:	f382 8811 	msr	BASEPRI, r2
	timeout->delta_ticks_from_prev = _INACTIVE;
    bea6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    beaa:	610a      	str	r2, [r1, #16]
	if (thread) {
    beac:	b180      	cbz	r0, bed0 <_add_timeout+0x40>
	if (timeout_obj->wait_q) {
    beae:	68ca      	ldr	r2, [r1, #12]
    beb0:	b14a      	cbz	r2, bec6 <_add_timeout+0x36>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    beb2:	e890 0006 	ldmia.w	r0, {r1, r2}
    beb6:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
    beb8:	6801      	ldr	r1, [r0, #0]
    beba:	604a      	str	r2, [r1, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
    bebc:	7a42      	ldrb	r2, [r0, #9]
		thread->base.timeout.wait_q = NULL;
    bebe:	61c3      	str	r3, [r0, #28]
    bec0:	f022 0202 	bic.w	r2, r2, #2
    bec4:	7242      	strb	r2, [r0, #9]
		_ready_thread(thread);
    bec6:	f7ff ffd5 	bl	be74 <_ready_thread>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    beca:	f384 8811 	msr	BASEPRI, r4
    bece:	bd70      	pop	{r4, r5, r6, pc}
    bed0:	f384 8811 	msr	BASEPRI, r4
		if (timeout->func) {
    bed4:	694b      	ldr	r3, [r1, #20]
    bed6:	b32b      	cbz	r3, bf24 <_add_timeout+0x94>
			timeout->func(timeout);
    bed8:	4608      	mov	r0, r1
}
    beda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			timeout->func(timeout);
    bede:	4718      	bx	r3
	return list->head == list;
    bee0:	4a11      	ldr	r2, [pc, #68]	; (bf28 <_add_timeout+0x98>)
    bee2:	4610      	mov	r0, r2
    bee4:	f850 3f10 	ldr.w	r3, [r0, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    bee8:	4283      	cmp	r3, r0
    beea:	d10c      	bne.n	bf06 <_add_timeout+0x76>
	node->next = list;
    beec:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
    beee:	6953      	ldr	r3, [r2, #20]
    bef0:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
    bef2:	6953      	ldr	r3, [r2, #20]
    bef4:	6019      	str	r1, [r3, #0]
	list->tail = node;
    bef6:	6151      	str	r1, [r2, #20]
    bef8:	bd70      	pop	{r4, r5, r6, pc}
		*delta -= in_q->delta_ticks_from_prev;
    befa:	1b64      	subs	r4, r4, r5
    befc:	610c      	str	r4, [r1, #16]
	return (node == list->tail) ? NULL : node->next;
    befe:	6954      	ldr	r4, [r2, #20]
    bf00:	42a3      	cmp	r3, r4
    bf02:	d0f3      	beq.n	beec <_add_timeout+0x5c>
    bf04:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
    bf06:	2b00      	cmp	r3, #0
    bf08:	d0f0      	beq.n	beec <_add_timeout+0x5c>
		if (*delta <= in_q->delta_ticks_from_prev) {
    bf0a:	690c      	ldr	r4, [r1, #16]
    bf0c:	691d      	ldr	r5, [r3, #16]
    bf0e:	42ac      	cmp	r4, r5
    bf10:	dcf3      	bgt.n	befa <_add_timeout+0x6a>
		node->prev = insert_point->prev;
    bf12:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
    bf14:	1b2c      	subs	r4, r5, r4
    bf16:	611c      	str	r4, [r3, #16]
    bf18:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
    bf1a:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
    bf1c:	685a      	ldr	r2, [r3, #4]
    bf1e:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
    bf20:	6059      	str	r1, [r3, #4]
    bf22:	bd70      	pop	{r4, r5, r6, pc}
    bf24:	bd70      	pop	{r4, r5, r6, pc}
    bf26:	bf00      	nop
    bf28:	20002940 	.word	0x20002940

0000bf2c <_remove_thread_from_ready_q>:
	node->prev->next = node->next;
    bf2c:	e890 000a 	ldmia.w	r0, {r1, r3}
 *
 * Interrupts must be locked when calling this function.
 */

void _remove_thread_from_ready_q(struct k_thread *thread)
{
    bf30:	b510      	push	{r4, lr}
#if defined(CONFIG_MULTITHREADING) && !defined(CONFIG_SMP)
	int q_index = _get_ready_q_q_index(thread->base.prio);
    bf32:	f990 200a 	ldrsb.w	r2, [r0, #10]
    bf36:	6019      	str	r1, [r3, #0]
	node->next->prev = node->prev;
    bf38:	6801      	ldr	r1, [r0, #0]
	sys_dlist_t *q = &_ready_q.q[q_index];
    bf3a:	3214      	adds	r2, #20
    bf3c:	604b      	str	r3, [r1, #4]
    bf3e:	4b14      	ldr	r3, [pc, #80]	; (bf90 <_remove_thread_from_ready_q+0x64>)
    bf40:	00d2      	lsls	r2, r2, #3
    bf42:	1d11      	adds	r1, r2, #4
	return list->head == list;
    bf44:	441a      	add	r2, r3
    bf46:	4419      	add	r1, r3

	sys_dlist_remove(&thread->base.k_q_node);
	if (sys_dlist_is_empty(q)) {
    bf48:	6852      	ldr	r2, [r2, #4]
    bf4a:	428a      	cmp	r2, r1
    bf4c:	d10f      	bne.n	bf6e <_remove_thread_from_ready_q+0x42>
		clear_ready_q_prio_bit(thread->base.prio);
    bf4e:	f990 100a 	ldrsb.w	r1, [r0, #10]
	return (prio + _NUM_COOP_PRIO) >> 5;
    bf52:	3110      	adds	r1, #16
    bf54:	114a      	asrs	r2, r1, #5
	*bmap &= ~_get_ready_q_prio_bit(prio);
    bf56:	3206      	adds	r2, #6
    bf58:	eb03 0282 	add.w	r2, r3, r2, lsl #2
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
    bf5c:	2401      	movs	r4, #1
    bf5e:	f001 011f 	and.w	r1, r1, #31
    bf62:	fa04 f101 	lsl.w	r1, r4, r1
    bf66:	6894      	ldr	r4, [r2, #8]
    bf68:	ea24 0401 	bic.w	r4, r4, r1
    bf6c:	6094      	str	r4, [r2, #8]
	}

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? get_ready_q_head() : *cache;
    bf6e:	69da      	ldr	r2, [r3, #28]
    bf70:	4290      	cmp	r0, r2
    bf72:	d10b      	bne.n	bf8c <_remove_thread_from_ready_q+0x60>
	return __builtin_ffs(op);
    bf74:	6a19      	ldr	r1, [r3, #32]
    bf76:	fa91 f2a1 	rbit	r2, r1
    bf7a:	2900      	cmp	r1, #0
    bf7c:	fab2 f282 	clz	r2, r2
    bf80:	bf08      	it	eq
    bf82:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
    bf86:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    bf8a:	6a52      	ldr	r2, [r2, #36]	; 0x24
    bf8c:	61da      	str	r2, [r3, #28]
    bf8e:	bd10      	pop	{r4, pc}
    bf90:	20002940 	.word	0x20002940

0000bf94 <_pend_thread>:
#endif

/* pend the specified thread: it must *not* be in the ready queue */
/* must be called with interrupts locked */
void _pend_thread(struct k_thread *thread, _wait_q_t *wait_q, s32_t timeout)
{
    bf94:	b430      	push	{r4, r5}
    bf96:	680c      	ldr	r4, [r1, #0]
#ifdef CONFIG_MULTITHREADING
	sys_dlist_t *wait_q_list = (sys_dlist_t *)wait_q;
	struct k_thread *pending;

	SYS_DLIST_FOR_EACH_CONTAINER(wait_q_list, pending, base.k_q_node) {
    bf98:	42a1      	cmp	r1, r4
    bf9a:	bf08      	it	eq
    bf9c:	2400      	moveq	r4, #0
    bf9e:	b314      	cbz	r4, bfe6 <_pend_thread+0x52>
		if (_is_t1_higher_prio_than_t2(thread, pending)) {
    bfa0:	f990 500a 	ldrsb.w	r5, [r0, #10]
    bfa4:	f994 300a 	ldrsb.w	r3, [r4, #10]
    bfa8:	429d      	cmp	r5, r3
    bfaa:	da16      	bge.n	bfda <_pend_thread+0x46>
		node->prev = insert_point->prev;
    bfac:	6863      	ldr	r3, [r4, #4]
    bfae:	6043      	str	r3, [r0, #4]
		node->next = insert_point;
    bfb0:	6004      	str	r4, [r0, #0]
		insert_point->prev->next = node;
    bfb2:	6863      	ldr	r3, [r4, #4]
    bfb4:	6018      	str	r0, [r3, #0]
		insert_point->prev = node;
    bfb6:	6060      	str	r0, [r4, #4]
	thread->base.thread_state |= _THREAD_PENDING;
    bfb8:	7a43      	ldrb	r3, [r0, #9]
    bfba:	f043 0302 	orr.w	r3, r3, #2
    bfbe:	7243      	strb	r3, [r0, #9]
	sys_dlist_append(wait_q_list, &thread->base.k_q_node);

inserted:
	_mark_thread_as_pending(thread);

	if (timeout != K_FOREVER) {
    bfc0:	1c53      	adds	r3, r2, #1
    bfc2:	d017      	beq.n	bff4 <_pend_thread+0x60>
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
    bfc4:	3209      	adds	r2, #9
    bfc6:	230a      	movs	r3, #10
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(timeout);

		_add_thread_timeout(thread, wait_q, ticks);
	}
#endif
}
    bfc8:	bc30      	pop	{r4, r5}
    bfca:	fbb2 f3f3 	udiv	r3, r2, r3
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
    bfce:	460a      	mov	r2, r1
    bfd0:	3301      	adds	r3, #1
    bfd2:	f100 0110 	add.w	r1, r0, #16
    bfd6:	f7ff bf5b 	b.w	be90 <_add_timeout>
	return (node == list->tail) ? NULL : node->next;
    bfda:	684b      	ldr	r3, [r1, #4]
    bfdc:	429c      	cmp	r4, r3
    bfde:	d002      	beq.n	bfe6 <_pend_thread+0x52>
    bfe0:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(wait_q_list, pending, base.k_q_node) {
    bfe2:	2c00      	cmp	r4, #0
    bfe4:	d1db      	bne.n	bf9e <_pend_thread+0xa>
	node->next = list;
    bfe6:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
    bfe8:	684b      	ldr	r3, [r1, #4]
    bfea:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
    bfec:	684b      	ldr	r3, [r1, #4]
    bfee:	6018      	str	r0, [r3, #0]
	list->tail = node;
    bff0:	6048      	str	r0, [r1, #4]
    bff2:	e7e1      	b.n	bfb8 <_pend_thread+0x24>
}
    bff4:	bc30      	pop	{r4, r5}
    bff6:	4770      	bx	lr

0000bff8 <_pend_current_thread>:

/* pend the current thread */
/* must be called with interrupts locked */
void _pend_current_thread(_wait_q_t *wait_q, s32_t timeout)
{
    bff8:	b570      	push	{r4, r5, r6, lr}
	_remove_thread_from_ready_q(_current);
    bffa:	4c06      	ldr	r4, [pc, #24]	; (c014 <_pend_current_thread+0x1c>)
{
    bffc:	460e      	mov	r6, r1
    bffe:	4605      	mov	r5, r0
	_remove_thread_from_ready_q(_current);
    c000:	68a0      	ldr	r0, [r4, #8]
    c002:	f7ff ff93 	bl	bf2c <_remove_thread_from_ready_q>
	_pend_thread(_current, wait_q, timeout);
    c006:	4632      	mov	r2, r6
    c008:	4629      	mov	r1, r5
    c00a:	68a0      	ldr	r0, [r4, #8]
}
    c00c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	_pend_thread(_current, wait_q, timeout);
    c010:	f7ff bfc0 	b.w	bf94 <_pend_thread>
    c014:	20002940 	.word	0x20002940

0000c018 <__must_switch_threads>:
	ready_range = _ready_q.prio_bmap[0];
    c018:	4a09      	ldr	r2, [pc, #36]	; (c040 <__must_switch_threads+0x28>)
    c01a:	6a11      	ldr	r1, [r2, #32]

#ifdef CONFIG_KERNEL_DEBUG
	dump_ready_q();
#endif  /* CONFIG_KERNEL_DEBUG */

	return _is_prio_higher(_get_highest_ready_prio(), _current->base.prio);
    c01c:	6892      	ldr	r2, [r2, #8]
    c01e:	2900      	cmp	r1, #0
    c020:	fa91 f3a1 	rbit	r3, r1
    c024:	f992 000a 	ldrsb.w	r0, [r2, #10]
    c028:	fab3 f383 	clz	r3, r3
    c02c:	bf08      	it	eq
    c02e:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
	return abs_prio - _NUM_COOP_PRIO;
    c032:	3b10      	subs	r3, #16
#else
	return 0;
#endif
}
    c034:	4298      	cmp	r0, r3
    c036:	bfd4      	ite	le
    c038:	2000      	movle	r0, #0
    c03a:	2001      	movgt	r0, #1
    c03c:	4770      	bx	lr
    c03e:	bf00      	nop
    c040:	20002940 	.word	0x20002940

0000c044 <_reschedule_threads>:
{
    c044:	b510      	push	{r4, lr}
	return _is_preempt(_current) && __must_switch_threads();
    c046:	4b0a      	ldr	r3, [pc, #40]	; (c070 <_reschedule_threads+0x2c>)
    c048:	689b      	ldr	r3, [r3, #8]
    c04a:	895b      	ldrh	r3, [r3, #10]
    c04c:	2b7f      	cmp	r3, #127	; 0x7f
    c04e:	4604      	mov	r4, r0
    c050:	d802      	bhi.n	c058 <_reschedule_threads+0x14>
    c052:	f7ff ffe1 	bl	c018 <__must_switch_threads>
    c056:	b910      	cbnz	r0, c05e <_reschedule_threads+0x1a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c058:	f384 8811 	msr	BASEPRI, r4
    c05c:	bd10      	pop	{r4, pc}
		_set_time(remaining);
	}

#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
    c05e:	4b05      	ldr	r3, [pc, #20]	; (c074 <_reschedule_threads+0x30>)
    c060:	2200      	movs	r2, #0
    c062:	4620      	mov	r0, r4
}
    c064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_time_slice_elapsed = 0;
    c068:	601a      	str	r2, [r3, #0]
    c06a:	f7f4 bc47 	b.w	8fc <__swap>
    c06e:	bf00      	nop
    c070:	20002940 	.word	0x20002940
    c074:	20002c34 	.word	0x20002c34

0000c078 <k_sched_unlock>:
	__asm__ volatile(
    c078:	f04f 0320 	mov.w	r3, #32
    c07c:	f3ef 8011 	mrs	r0, BASEPRI
    c080:	f383 8811 	msr	BASEPRI, r3
	++_current->base.sched_locked;
    c084:	4b03      	ldr	r3, [pc, #12]	; (c094 <k_sched_unlock+0x1c>)
    c086:	689a      	ldr	r2, [r3, #8]
    c088:	7ad3      	ldrb	r3, [r2, #11]
    c08a:	3301      	adds	r3, #1
    c08c:	72d3      	strb	r3, [r2, #11]
	_reschedule_threads(key);
    c08e:	f7ff bfd9 	b.w	c044 <_reschedule_threads>
    c092:	bf00      	nop
    c094:	20002940 	.word	0x20002940

0000c098 <_move_thread_to_end_of_prio_q>:
	int q_index = _get_ready_q_q_index(thread->base.prio);
    c098:	f990 300a 	ldrsb.w	r3, [r0, #10]
	sys_dlist_t *q = &_ready_q.q[q_index];
    c09c:	4a12      	ldr	r2, [pc, #72]	; (c0e8 <_move_thread_to_end_of_prio_q+0x50>)
{
    c09e:	b530      	push	{r4, r5, lr}
	sys_dlist_t *q = &_ready_q.q[q_index];
    c0a0:	3314      	adds	r3, #20
    c0a2:	00db      	lsls	r3, r3, #3
    c0a4:	1d19      	adds	r1, r3, #4
    c0a6:	4411      	add	r1, r2
	if (sys_dlist_is_tail(q, &thread->base.k_q_node)) {
    c0a8:	684c      	ldr	r4, [r1, #4]
    c0aa:	42a0      	cmp	r0, r4
    c0ac:	d01b      	beq.n	c0e6 <_move_thread_to_end_of_prio_q+0x4e>
	node->prev->next = node->next;
    c0ae:	6844      	ldr	r4, [r0, #4]
    c0b0:	6805      	ldr	r5, [r0, #0]
    c0b2:	6025      	str	r5, [r4, #0]
	node->next->prev = node->prev;
    c0b4:	6805      	ldr	r5, [r0, #0]
	node->prev = list->tail;
    c0b6:	4413      	add	r3, r2
	node->next->prev = node->prev;
    c0b8:	606c      	str	r4, [r5, #4]
	node->next = list;
    c0ba:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
    c0bc:	6899      	ldr	r1, [r3, #8]
    c0be:	6041      	str	r1, [r0, #4]
	list->tail->next = node;
    c0c0:	6899      	ldr	r1, [r3, #8]
    c0c2:	6008      	str	r0, [r1, #0]
	list->tail = node;
    c0c4:	6098      	str	r0, [r3, #8]
	*cache = *cache == thread ? get_ready_q_head() : *cache;
    c0c6:	69d3      	ldr	r3, [r2, #28]
    c0c8:	4298      	cmp	r0, r3
    c0ca:	d10b      	bne.n	c0e4 <_move_thread_to_end_of_prio_q+0x4c>
	return __builtin_ffs(op);
    c0cc:	6a11      	ldr	r1, [r2, #32]
    c0ce:	fa91 f3a1 	rbit	r3, r1
    c0d2:	2900      	cmp	r1, #0
    c0d4:	fab3 f383 	clz	r3, r3
    c0d8:	bf08      	it	eq
    c0da:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    c0de:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    c0e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c0e4:	61d3      	str	r3, [r2, #28]
    c0e6:	bd30      	pop	{r4, r5, pc}
    c0e8:	20002940 	.word	0x20002940

0000c0ec <_impl_k_yield>:
{
    c0ec:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    c0ee:	f04f 0320 	mov.w	r3, #32
    c0f2:	f3ef 8511 	mrs	r5, BASEPRI
    c0f6:	f383 8811 	msr	BASEPRI, r3
	_move_thread_to_end_of_prio_q(_current);
    c0fa:	4c09      	ldr	r4, [pc, #36]	; (c120 <_impl_k_yield+0x34>)
    c0fc:	68a0      	ldr	r0, [r4, #8]
    c0fe:	f7ff ffcb 	bl	c098 <_move_thread_to_end_of_prio_q>
	if (_current == _get_next_ready_thread()) {
    c102:	68a2      	ldr	r2, [r4, #8]
    c104:	69e3      	ldr	r3, [r4, #28]
    c106:	429a      	cmp	r2, r3
    c108:	d102      	bne.n	c110 <_impl_k_yield+0x24>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c10a:	f385 8811 	msr	BASEPRI, r5
    c10e:	bd38      	pop	{r3, r4, r5, pc}
	_time_slice_elapsed = 0;
    c110:	4b04      	ldr	r3, [pc, #16]	; (c124 <_impl_k_yield+0x38>)
    c112:	2200      	movs	r2, #0
    c114:	601a      	str	r2, [r3, #0]
    c116:	4628      	mov	r0, r5
}
    c118:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    c11c:	f7f4 bbee 	b.w	8fc <__swap>
    c120:	20002940 	.word	0x20002940
    c124:	20002c34 	.word	0x20002c34

0000c128 <_impl_k_current_get>:
}
    c128:	4b01      	ldr	r3, [pc, #4]	; (c130 <_impl_k_current_get+0x8>)
    c12a:	6898      	ldr	r0, [r3, #8]
    c12c:	4770      	bx	lr
    c12e:	bf00      	nop
    c130:	20002940 	.word	0x20002940

0000c134 <_is_thread_time_slicing>:
	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
    c134:	4b0d      	ldr	r3, [pc, #52]	; (c16c <_is_thread_time_slicing+0x38>)
    c136:	681b      	ldr	r3, [r3, #0]
    c138:	2b00      	cmp	r3, #0
    c13a:	dd14      	ble.n	c166 <_is_thread_time_slicing+0x32>
	return thread == _idle_thread;
    c13c:	4b0c      	ldr	r3, [pc, #48]	; (c170 <_is_thread_time_slicing+0x3c>)
    c13e:	681b      	ldr	r3, [r3, #0]
    c140:	4298      	cmp	r0, r3
    c142:	d010      	beq.n	c166 <_is_thread_time_slicing+0x32>
	    || _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
    c144:	4a0b      	ldr	r2, [pc, #44]	; (c174 <_is_thread_time_slicing+0x40>)
    c146:	f990 300a 	ldrsb.w	r3, [r0, #10]
    c14a:	6812      	ldr	r2, [r2, #0]
    c14c:	4293      	cmp	r3, r2
    c14e:	db0a      	blt.n	c166 <_is_thread_time_slicing+0x32>
	return list->head != list->tail;
    c150:	f103 0214 	add.w	r2, r3, #20
    c154:	4b08      	ldr	r3, [pc, #32]	; (c178 <_is_thread_time_slicing+0x44>)
    c156:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    c15a:	6858      	ldr	r0, [r3, #4]
    c15c:	689b      	ldr	r3, [r3, #8]
    c15e:	1ac0      	subs	r0, r0, r3
    c160:	bf18      	it	ne
    c162:	2001      	movne	r0, #1
	return sys_dlist_has_multiple_nodes(q);
    c164:	4770      	bx	lr
		return 0;
    c166:	2000      	movs	r0, #0
}
    c168:	4770      	bx	lr
    c16a:	bf00      	nop
    c16c:	20002a64 	.word	0x20002a64
    c170:	0000f158 	.word	0x0000f158
    c174:	20002a68 	.word	0x20002a68
    c178:	20002940 	.word	0x20002940

0000c17c <_update_time_slice_before_swap>:
	_time_slice_elapsed = 0;
    c17c:	4b01      	ldr	r3, [pc, #4]	; (c184 <_update_time_slice_before_swap+0x8>)
    c17e:	2200      	movs	r2, #0
    c180:	601a      	str	r2, [r3, #0]
    c182:	4770      	bx	lr
    c184:	20002c34 	.word	0x20002c34

0000c188 <_unpend_first_thread>:
_find_first_thread_to_unpend(_wait_q_t *wait_q, struct k_thread *from)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	extern volatile int _handling_timeouts;

	if (_handling_timeouts) {
    c188:	4a10      	ldr	r2, [pc, #64]	; (c1cc <_unpend_first_thread+0x44>)
    c18a:	6812      	ldr	r2, [r2, #0]
}

/* unpend the first thread from a wait queue */
/* must be called with interrupts locked */
static inline struct k_thread *_unpend_first_thread(_wait_q_t *wait_q)
{
    c18c:	4603      	mov	r3, r0
    c18e:	6800      	ldr	r0, [r0, #0]
	if (_handling_timeouts) {
    c190:	b16a      	cbz	r2, c1ae <_unpend_first_thread+0x26>
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c192:	4283      	cmp	r3, r0
    c194:	bf08      	it	eq
    c196:	2000      	moveq	r0, #0
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
    c198:	b908      	cbnz	r0, c19e <_unpend_first_thread+0x16>
    c19a:	2000      	movs	r0, #0
    c19c:	4770      	bx	lr
			if (_is_thread_timeout_expired(thread)) {
    c19e:	6a02      	ldr	r2, [r0, #32]
    c1a0:	3202      	adds	r2, #2
    c1a2:	d107      	bne.n	c1b4 <_unpend_first_thread+0x2c>
	return (node == list->tail) ? NULL : node->next;
    c1a4:	685a      	ldr	r2, [r3, #4]
    c1a6:	4290      	cmp	r0, r2
    c1a8:	d0f7      	beq.n	c19a <_unpend_first_thread+0x12>
    c1aa:	6800      	ldr	r0, [r0, #0]
    c1ac:	e7f4      	b.n	c198 <_unpend_first_thread+0x10>
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c1ae:	4283      	cmp	r3, r0
    c1b0:	d00a      	beq.n	c1c8 <_unpend_first_thread+0x40>
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);

	if (thread) {
    c1b2:	b150      	cbz	r0, c1ca <_unpend_first_thread+0x42>
	node->prev->next = node->next;
    c1b4:	e890 000c 	ldmia.w	r0, {r2, r3}
    c1b8:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    c1ba:	6802      	ldr	r2, [r0, #0]
    c1bc:	6053      	str	r3, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
    c1be:	7a43      	ldrb	r3, [r0, #9]
    c1c0:	f023 0302 	bic.w	r3, r3, #2
    c1c4:	7243      	strb	r3, [r0, #9]
    c1c6:	4770      	bx	lr
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c1c8:	4610      	mov	r0, r2
		_unpend_thread(thread);
	}

	return thread;
}
    c1ca:	4770      	bx	lr
    c1cc:	20002c30 	.word	0x20002c30

0000c1d0 <_impl_k_sem_init>:

	sem->count = initial_count;
	sem->limit = limit;
	sys_dlist_init(&sem->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&sem->poll_events);
    c1d0:	f100 0310 	add.w	r3, r0, #16
	sem->count = initial_count;
    c1d4:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
    c1d6:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
    c1d8:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
    c1da:	6040      	str	r0, [r0, #4]
	list->head = (sys_dnode_t *)list;
    c1dc:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
    c1de:	6143      	str	r3, [r0, #20]
    c1e0:	4770      	bx	lr
	...

0000c1e4 <_impl_k_sem_give>:

	_set_thread_return_value(thread, 0);
}

void _impl_k_sem_give(struct k_sem *sem)
{
    c1e4:	b570      	push	{r4, r5, r6, lr}
    c1e6:	4605      	mov	r5, r0
	__asm__ volatile(
    c1e8:	f04f 0320 	mov.w	r3, #32
    c1ec:	f3ef 8611 	mrs	r6, BASEPRI
    c1f0:	f383 8811 	msr	BASEPRI, r3
	struct k_thread *thread = _unpend_first_thread(&sem->wait_q);
    c1f4:	f7ff ffc8 	bl	c188 <_unpend_first_thread>
	if (!thread) {
    c1f8:	4604      	mov	r4, r0
    c1fa:	b998      	cbnz	r0, c224 <_impl_k_sem_give+0x40>
	sem->count += (sem->count != sem->limit);
    c1fc:	68ab      	ldr	r3, [r5, #8]
    c1fe:	68ea      	ldr	r2, [r5, #12]
    c200:	429a      	cmp	r2, r3
    c202:	bf18      	it	ne
    c204:	3301      	addne	r3, #1
    c206:	60ab      	str	r3, [r5, #8]
	return _handle_obj_poll_events(&sem->poll_events, state);
    c208:	2102      	movs	r1, #2
    c20a:	f105 0010 	add.w	r0, r5, #16
    c20e:	f000 fced 	bl	cbec <_handle_obj_poll_events>
	unsigned int key;

	key = irq_lock();

	if (do_sem_give(sem)) {
    c212:	2800      	cmp	r0, #0
    c214:	d03b      	beq.n	c28e <_impl_k_sem_give+0xaa>
	_update_time_slice_before_swap();
    c216:	f7ff ffb1 	bl	c17c <_update_time_slice_before_swap>
	return __swap(key);
    c21a:	4630      	mov	r0, r6
		_Swap(key);
	} else {
		irq_unlock(key);
	}
}
    c21c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c220:	f7f4 bb6c 	b.w	8fc <__swap>
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    c224:	6a01      	ldr	r1, [r0, #32]
	return _abort_timeout(&thread->base.timeout);
    c226:	f100 0210 	add.w	r2, r0, #16
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    c22a:	1c48      	adds	r0, r1, #1
    c22c:	d00f      	beq.n	c24e <_impl_k_sem_give+0x6a>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
    c22e:	4b1b      	ldr	r3, [pc, #108]	; (c29c <_impl_k_sem_give+0xb8>)
    c230:	695b      	ldr	r3, [r3, #20]
    c232:	429a      	cmp	r2, r3
	return (node == list->tail) ? NULL : node->next;
    c234:	bf1f      	itttt	ne
    c236:	6922      	ldrne	r2, [r4, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
    c238:	6913      	ldrne	r3, [r2, #16]
    c23a:	185b      	addne	r3, r3, r1
    c23c:	6113      	strne	r3, [r2, #16]
	node->prev->next = node->next;
    c23e:	6963      	ldr	r3, [r4, #20]
    c240:	6922      	ldr	r2, [r4, #16]
    c242:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    c244:	6922      	ldr	r2, [r4, #16]
    c246:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
    c248:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c24c:	6223      	str	r3, [r4, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
    c24e:	7a63      	ldrb	r3, [r4, #9]
    c250:	f023 0204 	bic.w	r2, r3, #4
	return !(_is_thread_prevented_from_running(thread) ||
    c254:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    c258:	7262      	strb	r2, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
    c25a:	d102      	bne.n	c262 <_impl_k_sem_give+0x7e>
    c25c:	6a23      	ldr	r3, [r4, #32]
    c25e:	3301      	adds	r3, #1
    c260:	d018      	beq.n	c294 <_impl_k_sem_give+0xb0>
}

static ALWAYS_INLINE void
_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    c262:	2300      	movs	r3, #0
    c264:	6663      	str	r3, [r4, #100]	; 0x64
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    c266:	f3ef 8305 	mrs	r3, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
    c26a:	2b0d      	cmp	r3, #13
    c26c:	d80f      	bhi.n	c28e <_impl_k_sem_give+0xaa>
    c26e:	b11b      	cbz	r3, c278 <_impl_k_sem_give+0x94>
    c270:	4b0b      	ldr	r3, [pc, #44]	; (c2a0 <_impl_k_sem_give+0xbc>)
    c272:	685b      	ldr	r3, [r3, #4]
    c274:	051b      	lsls	r3, r3, #20
    c276:	d50a      	bpl.n	c28e <_impl_k_sem_give+0xaa>
	return _is_preempt(_current) && __must_switch_threads();
    c278:	4b08      	ldr	r3, [pc, #32]	; (c29c <_impl_k_sem_give+0xb8>)
    c27a:	689b      	ldr	r3, [r3, #8]
    c27c:	895b      	ldrh	r3, [r3, #10]
    c27e:	2b7f      	cmp	r3, #127	; 0x7f
    c280:	d805      	bhi.n	c28e <_impl_k_sem_give+0xaa>
    c282:	f7ff fec9 	bl	c018 <__must_switch_threads>
    c286:	3000      	adds	r0, #0
    c288:	bf18      	it	ne
    c28a:	2001      	movne	r0, #1
    c28c:	e7c1      	b.n	c212 <_impl_k_sem_give+0x2e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c28e:	f386 8811 	msr	BASEPRI, r6
    c292:	bd70      	pop	{r4, r5, r6, pc}
		_add_thread_to_ready_q(thread);
    c294:	4620      	mov	r0, r4
    c296:	f7ff fdc5 	bl	be24 <_add_thread_to_ready_q>
    c29a:	e7e2      	b.n	c262 <_impl_k_sem_give+0x7e>
    c29c:	20002940 	.word	0x20002940
    c2a0:	e000ed00 	.word	0xe000ed00

0000c2a4 <_impl_k_sem_take>:
#ifdef CONFIG_USERSPACE
_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
#endif

int _impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
    c2a4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    c2a6:	f04f 0320 	mov.w	r3, #32
    c2aa:	f3ef 8411 	mrs	r4, BASEPRI
    c2ae:	f383 8811 	msr	BASEPRI, r3
	__ASSERT(!_is_in_isr() || timeout == K_NO_WAIT, "");

	unsigned int key = irq_lock();

	if (likely(sem->count > 0)) {
    c2b2:	6883      	ldr	r3, [r0, #8]
    c2b4:	b12b      	cbz	r3, c2c2 <_impl_k_sem_take+0x1e>
		sem->count--;
    c2b6:	3b01      	subs	r3, #1
    c2b8:	6083      	str	r3, [r0, #8]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c2ba:	f384 8811 	msr	BASEPRI, r4
		irq_unlock(key);
		return 0;
    c2be:	2000      	movs	r0, #0
    c2c0:	bd38      	pop	{r3, r4, r5, pc}
	}

	if (timeout == K_NO_WAIT) {
    c2c2:	b921      	cbnz	r1, c2ce <_impl_k_sem_take+0x2a>
    c2c4:	f384 8811 	msr	BASEPRI, r4
		irq_unlock(key);
		return -EBUSY;
    c2c8:	f06f 000f 	mvn.w	r0, #15
    c2cc:	bd38      	pop	{r3, r4, r5, pc}
	}

	_pend_current_thread(&sem->wait_q, timeout);
    c2ce:	f7ff fe93 	bl	bff8 <_pend_current_thread>
	_update_time_slice_before_swap();
    c2d2:	f7ff ff53 	bl	c17c <_update_time_slice_before_swap>
	return __swap(key);
    c2d6:	4620      	mov	r0, r4

	return _Swap(key);
}
    c2d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    c2dc:	f7f4 bb0e 	b.w	8fc <__swap>

0000c2e0 <_impl_k_uptime_get_32>:
u32_t _tick_get_32(void)
{
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)_get_elapsed_clock_time();
#else
	return (u32_t)_sys_clock_tick_count;
    c2e0:	4b03      	ldr	r3, [pc, #12]	; (c2f0 <_impl_k_uptime_get_32+0x10>)
    c2e2:	e9d3 0100 	ldrd	r0, r1, [r3]
	return (u64_t)ticks * _ms_per_tick;
    c2e6:	230a      	movs	r3, #10
    c2e8:	fba0 0103 	umull	r0, r1, r0, r3
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get_32());
}
    c2ec:	4770      	bx	lr
    c2ee:	bf00      	nop
    c2f0:	20002c38 	.word	0x20002c38

0000c2f4 <_tick_get>:
	__asm__ volatile(
    c2f4:	f04f 0220 	mov.w	r2, #32
    c2f8:	f3ef 8311 	mrs	r3, BASEPRI
    c2fc:	f382 8811 	msr	BASEPRI, r2
	unsigned int imask = irq_lock();

#ifdef CONFIG_TICKLESS_KERNEL
	tmp_sys_clock_tick_count = _get_elapsed_clock_time();
#else
	tmp_sys_clock_tick_count = _sys_clock_tick_count;
    c300:	4a02      	ldr	r2, [pc, #8]	; (c30c <_tick_get+0x18>)
    c302:	e9d2 0100 	ldrd	r0, r1, [r2]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c306:	f383 8811 	msr	BASEPRI, r3
#endif
	irq_unlock(imask);
	return tmp_sys_clock_tick_count;
}
    c30a:	4770      	bx	lr
    c30c:	20002c38 	.word	0x20002c38

0000c310 <_impl_k_uptime_get>:
FUNC_ALIAS(_tick_get, sys_tick_get, s64_t);

s64_t _impl_k_uptime_get(void)
{
    c310:	b510      	push	{r4, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get());
    c312:	f7ff ffef 	bl	c2f4 <_tick_get>
    c316:	240a      	movs	r4, #10
    c318:	fba0 2304 	umull	r2, r3, r0, r4
    c31c:	fb04 3301 	mla	r3, r4, r1, r3
}
    c320:	4610      	mov	r0, r2
    c322:	4619      	mov	r1, r3
    c324:	bd10      	pop	{r4, pc}
	...

0000c328 <_nano_sys_clock_tick_announce>:
 * timers that have expired and wake up the threads pending on them.
 *
 * @return N/A
 */
void _nano_sys_clock_tick_announce(s32_t ticks)
{
    c328:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c32c:	4607      	mov	r7, r0
	__asm__ volatile(
    c32e:	f04f 0320 	mov.w	r3, #32
    c332:	f3ef 8011 	mrs	r0, BASEPRI
    c336:	f383 8811 	msr	BASEPRI, r3

	K_DEBUG("ticks: %d\n", ticks);

	/* 64-bit value, ensure atomic access with irq lock */
	key = irq_lock();
	_sys_clock_tick_count += ticks;
    c33a:	4963      	ldr	r1, [pc, #396]	; (c4c8 <_nano_sys_clock_tick_announce+0x1a0>)
    c33c:	e9d1 4500 	ldrd	r4, r5, [r1]
    c340:	19e2      	adds	r2, r4, r7
    c342:	eb45 73e7 	adc.w	r3, r5, r7, asr #31
    c346:	e9c1 2300 	strd	r2, r3, [r1]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c34a:	f380 8811 	msr	BASEPRI, r0
	list->head = (sys_dnode_t *)list;
    c34e:	466e      	mov	r6, sp
    c350:	f8cd d000 	str.w	sp, [sp]
	list->tail = (sys_dnode_t *)list;
    c354:	f8cd d004 	str.w	sp, [sp, #4]
	__asm__ volatile(
    c358:	f04f 0320 	mov.w	r3, #32
    c35c:	f3ef 8011 	mrs	r0, BASEPRI
    c360:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
    c364:	4c59      	ldr	r4, [pc, #356]	; (c4cc <_nano_sys_clock_tick_announce+0x1a4>)
    c366:	4621      	mov	r1, r4
    c368:	4602      	mov	r2, r0
    c36a:	f851 3f10 	ldr.w	r3, [r1, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c36e:	428b      	cmp	r3, r1
    c370:	d000      	beq.n	c374 <_nano_sys_clock_tick_announce+0x4c>
	if (!next) {
    c372:	b9fb      	cbnz	r3, c3b4 <_nano_sys_clock_tick_announce+0x8c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c374:	f380 8811 	msr	BASEPRI, r0
	if (!_is_thread_time_slicing(_current)) {
    c378:	68a0      	ldr	r0, [r4, #8]
    c37a:	f7ff fedb 	bl	c134 <_is_thread_time_slicing>
    c37e:	b1b0      	cbz	r0, c3ae <_nano_sys_clock_tick_announce+0x86>
	_time_slice_elapsed += __ticks_to_ms(ticks);
    c380:	4a53      	ldr	r2, [pc, #332]	; (c4d0 <_nano_sys_clock_tick_announce+0x1a8>)
    c382:	6811      	ldr	r1, [r2, #0]
    c384:	230a      	movs	r3, #10
    c386:	fb07 1703 	mla	r7, r7, r3, r1
	if (_time_slice_elapsed >= _time_slice_duration) {
    c38a:	4b52      	ldr	r3, [pc, #328]	; (c4d4 <_nano_sys_clock_tick_announce+0x1ac>)
	_time_slice_elapsed += __ticks_to_ms(ticks);
    c38c:	6017      	str	r7, [r2, #0]
	if (_time_slice_elapsed >= _time_slice_duration) {
    c38e:	681b      	ldr	r3, [r3, #0]
    c390:	429f      	cmp	r7, r3
    c392:	db0c      	blt.n	c3ae <_nano_sys_clock_tick_announce+0x86>
		_time_slice_elapsed = 0;
    c394:	2300      	movs	r3, #0
    c396:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    c398:	f04f 0320 	mov.w	r3, #32
    c39c:	f3ef 8511 	mrs	r5, BASEPRI
    c3a0:	f383 8811 	msr	BASEPRI, r3
		_move_thread_to_end_of_prio_q(_current);
    c3a4:	68a0      	ldr	r0, [r4, #8]
    c3a6:	f7ff fe77 	bl	c098 <_move_thread_to_end_of_prio_q>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c3aa:	f385 8811 	msr	BASEPRI, r5
	if ((!remaining && next_to) || (next_to < remaining)) {
		/* Clears current program if next_to = 0 and remaining > 0 */
		_set_time(next_to);
	}
#endif
}
    c3ae:	b003      	add	sp, #12
    c3b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_handling_timeouts = 1;
    c3b4:	4d48      	ldr	r5, [pc, #288]	; (c4d8 <_nano_sys_clock_tick_announce+0x1b0>)
    c3b6:	2101      	movs	r1, #1
    c3b8:	6029      	str	r1, [r5, #0]
    c3ba:	46ab      	mov	fp, r5
    c3bc:	4639      	mov	r1, r7
			timeout->delta_ticks_from_prev = 0;
    c3be:	f04f 0e00 	mov.w	lr, #0
			timeout->delta_ticks_from_prev = _EXPIRED;
    c3c2:	f06f 0c01 	mvn.w	ip, #1
		s32_t tmp = timeout->delta_ticks_from_prev;
    c3c6:	6918      	ldr	r0, [r3, #16]
		if (timeout->delta_ticks_from_prev < ticks) {
    c3c8:	4288      	cmp	r0, r1
			timeout->delta_ticks_from_prev -= ticks;
    c3ca:	bfaa      	itet	ge
    c3cc:	eba0 0801 	subge.w	r8, r0, r1
			timeout->delta_ticks_from_prev = 0;
    c3d0:	f8c3 e010 	strlt.w	lr, [r3, #16]
			timeout->delta_ticks_from_prev -= ticks;
    c3d4:	f8c3 8010 	strge.w	r8, [r3, #16]
		ticks -= tmp;
    c3d8:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    c3da:	6960      	ldr	r0, [r4, #20]
		if (timeout->delta_ticks_from_prev == 0) {
    c3dc:	691d      	ldr	r5, [r3, #16]
    c3de:	4298      	cmp	r0, r3
    c3e0:	bf14      	ite	ne
    c3e2:	6818      	ldrne	r0, [r3, #0]
    c3e4:	2000      	moveq	r0, #0
    c3e6:	b9d5      	cbnz	r5, c41e <_nano_sys_clock_tick_announce+0xf6>
	node->prev->next = node->next;
    c3e8:	e893 0220 	ldmia.w	r3, {r5, r9}
    c3ec:	f8c9 5000 	str.w	r5, [r9]
	node->next->prev = node->prev;
    c3f0:	681d      	ldr	r5, [r3, #0]
    c3f2:	f8c5 9004 	str.w	r9, [r5, #4]
	node->next = list->head;
    c3f6:	9d00      	ldr	r5, [sp, #0]
	node->prev = list;
    c3f8:	e883 0060 	stmia.w	r3, {r5, r6}
	list->head->prev = node;
    c3fc:	9d00      	ldr	r5, [sp, #0]
	list->head = node;
    c3fe:	9300      	str	r3, [sp, #0]
	list->head->prev = node;
    c400:	606b      	str	r3, [r5, #4]
			timeout->delta_ticks_from_prev = _EXPIRED;
    c402:	f8c3 c010 	str.w	ip, [r3, #16]
    c406:	f382 8811 	msr	BASEPRI, r2
	__asm__ volatile(
    c40a:	f04f 0320 	mov.w	r3, #32
    c40e:	f3ef 8211 	mrs	r2, BASEPRI
    c412:	f383 8811 	msr	BASEPRI, r3
	while (next) {
    c416:	4603      	mov	r3, r0
    c418:	2800      	cmp	r0, #0
    c41a:	d1d4      	bne.n	c3c6 <_nano_sys_clock_tick_announce+0x9e>
    c41c:	e001      	b.n	c422 <_nano_sys_clock_tick_announce+0xfa>
		} else if (ticks <= 0) {
    c41e:	2900      	cmp	r1, #0
    c420:	dcf1      	bgt.n	c406 <_nano_sys_clock_tick_announce+0xde>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c422:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
    c426:	9800      	ldr	r0, [sp, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c428:	42b0      	cmp	r0, r6
    c42a:	d103      	bne.n	c434 <_nano_sys_clock_tick_announce+0x10c>
	_handling_timeouts = 0;
    c42c:	2300      	movs	r3, #0
    c42e:	f8cb 3000 	str.w	r3, [fp]
    c432:	e7a1      	b.n	c378 <_nano_sys_clock_tick_announce+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
    c434:	2800      	cmp	r0, #0
    c436:	d0f9      	beq.n	c42c <_nano_sys_clock_tick_announce+0x104>
	return (node == list->tail) ? NULL : node->next;
    c438:	9b01      	ldr	r3, [sp, #4]
    c43a:	4298      	cmp	r0, r3
    c43c:	d101      	bne.n	c442 <_nano_sys_clock_tick_announce+0x11a>
    c43e:	2600      	movs	r6, #0
    c440:	e000      	b.n	c444 <_nano_sys_clock_tick_announce+0x11c>
    c442:	6806      	ldr	r6, [r0, #0]
	timeout->delta_ticks_from_prev = _INACTIVE;
    c444:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
		thread->base.timeout.wait_q = NULL;
    c448:	f04f 0900 	mov.w	r9, #0
	node->prev->next = node->next;
    c44c:	e890 000c 	ldmia.w	r0, {r2, r3}
    c450:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    c452:	6802      	ldr	r2, [r0, #0]
    c454:	6053      	str	r3, [r2, #4]
	struct k_thread *thread = timeout->thread;
    c456:	6883      	ldr	r3, [r0, #8]
	__asm__ volatile(
    c458:	f04f 0220 	mov.w	r2, #32
    c45c:	f3ef 8a11 	mrs	sl, BASEPRI
    c460:	f382 8811 	msr	BASEPRI, r2
	timeout->delta_ticks_from_prev = _INACTIVE;
    c464:	f8c0 8010 	str.w	r8, [r0, #16]
	if (thread) {
    c468:	b1fb      	cbz	r3, c4aa <_nano_sys_clock_tick_announce+0x182>
	if (timeout_obj->wait_q) {
    c46a:	68c2      	ldr	r2, [r0, #12]
    c46c:	b152      	cbz	r2, c484 <_nano_sys_clock_tick_announce+0x15c>
	node->prev->next = node->next;
    c46e:	6859      	ldr	r1, [r3, #4]
    c470:	681a      	ldr	r2, [r3, #0]
    c472:	600a      	str	r2, [r1, #0]
	node->next->prev = node->prev;
    c474:	681a      	ldr	r2, [r3, #0]
    c476:	6051      	str	r1, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
    c478:	7a5a      	ldrb	r2, [r3, #9]
		thread->base.timeout.wait_q = NULL;
    c47a:	f8c3 901c 	str.w	r9, [r3, #28]
    c47e:	f022 0202 	bic.w	r2, r2, #2
    c482:	725a      	strb	r2, [r3, #9]
	thread->base.thread_state &= ~_THREAD_PRESTART;
    c484:	7a5a      	ldrb	r2, [r3, #9]
    c486:	f022 0104 	bic.w	r1, r2, #4
	return !(_is_thread_prevented_from_running(thread) ||
    c48a:	f012 0f1b 	tst.w	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    c48e:	7259      	strb	r1, [r3, #9]
	return !(_is_thread_prevented_from_running(thread) ||
    c490:	d102      	bne.n	c498 <_nano_sys_clock_tick_announce+0x170>
    c492:	6a1a      	ldr	r2, [r3, #32]
    c494:	3201      	adds	r2, #1
    c496:	d013      	beq.n	c4c0 <_nano_sys_clock_tick_announce+0x198>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c498:	f38a 8811 	msr	BASEPRI, sl
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
    c49c:	2e00      	cmp	r6, #0
    c49e:	d0c5      	beq.n	c42c <_nano_sys_clock_tick_announce+0x104>
	return (node == list->tail) ? NULL : node->next;
    c4a0:	9b01      	ldr	r3, [sp, #4]
    c4a2:	42b3      	cmp	r3, r6
    c4a4:	d108      	bne.n	c4b8 <_nano_sys_clock_tick_announce+0x190>
    c4a6:	2300      	movs	r3, #0
    c4a8:	e007      	b.n	c4ba <_nano_sys_clock_tick_announce+0x192>
    c4aa:	f38a 8811 	msr	BASEPRI, sl
		if (timeout->func) {
    c4ae:	6943      	ldr	r3, [r0, #20]
    c4b0:	2b00      	cmp	r3, #0
    c4b2:	d0f3      	beq.n	c49c <_nano_sys_clock_tick_announce+0x174>
			timeout->func(timeout);
    c4b4:	4798      	blx	r3
    c4b6:	e7f1      	b.n	c49c <_nano_sys_clock_tick_announce+0x174>
    c4b8:	6833      	ldr	r3, [r6, #0]
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
    c4ba:	4630      	mov	r0, r6
    c4bc:	461e      	mov	r6, r3
    c4be:	e7c5      	b.n	c44c <_nano_sys_clock_tick_announce+0x124>
		_add_thread_to_ready_q(thread);
    c4c0:	4618      	mov	r0, r3
    c4c2:	f7ff fcaf 	bl	be24 <_add_thread_to_ready_q>
    c4c6:	e7e7      	b.n	c498 <_nano_sys_clock_tick_announce+0x170>
    c4c8:	20002c38 	.word	0x20002c38
    c4cc:	20002940 	.word	0x20002940
    c4d0:	20002c34 	.word	0x20002c34
    c4d4:	20002a64 	.word	0x20002a64
    c4d8:	20002c30 	.word	0x20002c30

0000c4dc <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
    c4dc:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
    c4de:	f44f 6280 	mov.w	r2, #1024	; 0x400
    c4e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c4e6:	4903      	ldr	r1, [pc, #12]	; (c4f4 <k_sys_work_q_init+0x18>)
    c4e8:	4803      	ldr	r0, [pc, #12]	; (c4f8 <k_sys_work_q_init+0x1c>)
    c4ea:	f000 f971 	bl	c7d0 <k_work_q_start>
		       sys_work_q_stack,
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);

	return 0;
}
    c4ee:	2000      	movs	r0, #0
    c4f0:	bd08      	pop	{r3, pc}
    c4f2:	bf00      	nop
    c4f4:	200047b8 	.word	0x200047b8
    c4f8:	20002c40 	.word	0x20002c40

0000c4fc <_is_thread_ready>:
	return !(_is_thread_prevented_from_running(thread) ||
    c4fc:	7a43      	ldrb	r3, [r0, #9]
    c4fe:	06da      	lsls	r2, r3, #27
    c500:	d104      	bne.n	c50c <_is_thread_ready+0x10>
    c502:	6a00      	ldr	r0, [r0, #32]
    c504:	1c43      	adds	r3, r0, #1
    c506:	4258      	negs	r0, r3
    c508:	4158      	adcs	r0, r3
    c50a:	4770      	bx	lr
    c50c:	2000      	movs	r0, #0
}
    c50e:	4770      	bx	lr

0000c510 <_abort_timeout>:
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    c510:	6903      	ldr	r3, [r0, #16]
    c512:	1c5a      	adds	r2, r3, #1
    c514:	d011      	beq.n	c53a <_abort_timeout+0x2a>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
    c516:	4a0a      	ldr	r2, [pc, #40]	; (c540 <_abort_timeout+0x30>)
    c518:	6952      	ldr	r2, [r2, #20]
    c51a:	4290      	cmp	r0, r2
    c51c:	bf1f      	itttt	ne
    c51e:	6801      	ldrne	r1, [r0, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
    c520:	690a      	ldrne	r2, [r1, #16]
    c522:	189b      	addne	r3, r3, r2
    c524:	610b      	strne	r3, [r1, #16]
	node->prev->next = node->next;
    c526:	e890 000c 	ldmia.w	r0, {r2, r3}
    c52a:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    c52c:	6802      	ldr	r2, [r0, #0]
    c52e:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
    c530:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c534:	6103      	str	r3, [r0, #16]
	return 0;
    c536:	2000      	movs	r0, #0
    c538:	4770      	bx	lr
		return _INACTIVE;
    c53a:	4618      	mov	r0, r3
}
    c53c:	4770      	bx	lr
    c53e:	bf00      	nop
    c540:	20002940 	.word	0x20002940

0000c544 <schedule_new_thread.part.13>:
_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_start, K_OBJ_THREAD, struct k_thread *);
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
    c544:	b5f0      	push	{r4, r5, r6, r7, lr}
	__asm__ volatile(
    c546:	f04f 0320 	mov.w	r3, #32
    c54a:	f3ef 8611 	mrs	r6, BASEPRI
    c54e:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
    c552:	4a19      	ldr	r2, [pc, #100]	; (c5b8 <schedule_new_thread.part.13+0x74>)
	timeout->thread = thread;
    c554:	6180      	str	r0, [r0, #24]
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
    c556:	230a      	movs	r3, #10
    c558:	3109      	adds	r1, #9
    c55a:	fbb1 f1f3 	udiv	r1, r1, r3
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (delay == 0) {
		k_thread_start(thread);
	} else {
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(delay);
    c55e:	3101      	adds	r1, #1
	timeout->delta_ticks_from_prev = timeout_in_ticks;
    c560:	6201      	str	r1, [r0, #32]
    c562:	4611      	mov	r1, r2
	timeout->wait_q = (sys_dlist_t *)wait_q;
    c564:	2300      	movs	r3, #0
    c566:	61c3      	str	r3, [r0, #28]
    c568:	f851 3f10 	ldr.w	r3, [r1, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c56c:	428b      	cmp	r3, r1
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
    c56e:	f100 0510 	add.w	r5, r0, #16
    c572:	d108      	bne.n	c586 <schedule_new_thread.part.13+0x42>
	node->next = list;
    c574:	6101      	str	r1, [r0, #16]
	node->prev = list->tail;
    c576:	6953      	ldr	r3, [r2, #20]
    c578:	6143      	str	r3, [r0, #20]
	list->tail->next = node;
    c57a:	6953      	ldr	r3, [r2, #20]
    c57c:	601d      	str	r5, [r3, #0]
	list->tail = node;
    c57e:	6155      	str	r5, [r2, #20]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c580:	f386 8811 	msr	BASEPRI, r6
    c584:	bdf0      	pop	{r4, r5, r6, r7, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
    c586:	2b00      	cmp	r3, #0
    c588:	d0f4      	beq.n	c574 <schedule_new_thread.part.13+0x30>
    c58a:	f8d2 e014 	ldr.w	lr, [r2, #20]
		if (*delta <= in_q->delta_ticks_from_prev) {
    c58e:	6a04      	ldr	r4, [r0, #32]
    c590:	691f      	ldr	r7, [r3, #16]
    c592:	42bc      	cmp	r4, r7
    c594:	dc08      	bgt.n	c5a8 <schedule_new_thread.part.13+0x64>
		node->prev = insert_point->prev;
    c596:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
    c598:	1b3c      	subs	r4, r7, r4
    c59a:	611c      	str	r4, [r3, #16]
    c59c:	6142      	str	r2, [r0, #20]
		node->next = insert_point;
    c59e:	6103      	str	r3, [r0, #16]
		insert_point->prev->next = node;
    c5a0:	685a      	ldr	r2, [r3, #4]
    c5a2:	6015      	str	r5, [r2, #0]
		insert_point->prev = node;
    c5a4:	605d      	str	r5, [r3, #4]
    c5a6:	e7eb      	b.n	c580 <schedule_new_thread.part.13+0x3c>
		*delta -= in_q->delta_ticks_from_prev;
    c5a8:	1be4      	subs	r4, r4, r7
	return (node == list->tail) ? NULL : node->next;
    c5aa:	4573      	cmp	r3, lr
    c5ac:	6204      	str	r4, [r0, #32]
    c5ae:	d0e1      	beq.n	c574 <schedule_new_thread.part.13+0x30>
    c5b0:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
    c5b2:	2b00      	cmp	r3, #0
    c5b4:	d1eb      	bne.n	c58e <schedule_new_thread.part.13+0x4a>
    c5b6:	e7dd      	b.n	c574 <schedule_new_thread.part.13+0x30>
    c5b8:	20002940 	.word	0x20002940

0000c5bc <k_is_in_isr>:
    c5bc:	f3ef 8005 	mrs	r0, IPSR
    c5c0:	280d      	cmp	r0, #13
    c5c2:	d807      	bhi.n	c5d4 <k_is_in_isr+0x18>
    c5c4:	b138      	cbz	r0, c5d6 <k_is_in_isr+0x1a>
    c5c6:	4b04      	ldr	r3, [pc, #16]	; (c5d8 <k_is_in_isr+0x1c>)
    c5c8:	6858      	ldr	r0, [r3, #4]
    c5ca:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
    c5ce:	f3c0 20c0 	ubfx	r0, r0, #11, #1
    c5d2:	4770      	bx	lr
    c5d4:	2001      	movs	r0, #1
}
    c5d6:	4770      	bx	lr
    c5d8:	e000ed00 	.word	0xe000ed00

0000c5dc <_is_thread_essential>:
	return _current->base.user_options & K_ESSENTIAL;
    c5dc:	4b02      	ldr	r3, [pc, #8]	; (c5e8 <_is_thread_essential+0xc>)
    c5de:	689b      	ldr	r3, [r3, #8]
    c5e0:	7a18      	ldrb	r0, [r3, #8]
}
    c5e2:	f000 0001 	and.w	r0, r0, #1
    c5e6:	4770      	bx	lr
    c5e8:	20002940 	.word	0x20002940

0000c5ec <_thread_entry>:
{
    c5ec:	b508      	push	{r3, lr}
    c5ee:	4604      	mov	r4, r0
    c5f0:	4608      	mov	r0, r1
    c5f2:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    c5f4:	461a      	mov	r2, r3
    c5f6:	47a0      	blx	r4
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    c5f8:	f7ff fd96 	bl	c128 <_impl_k_current_get>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
    c5fc:	f7f4 fc2e 	bl	e5c <_impl_k_thread_abort>

0000c600 <_impl_k_thread_start>:
{
    c600:	b510      	push	{r4, lr}
    c602:	4601      	mov	r1, r0
	__asm__ volatile(
    c604:	f04f 0320 	mov.w	r3, #32
    c608:	f3ef 8411 	mrs	r4, BASEPRI
    c60c:	f383 8811 	msr	BASEPRI, r3
    c610:	7a43      	ldrb	r3, [r0, #9]
	if (_has_thread_started(thread)) {
    c612:	075a      	lsls	r2, r3, #29
    c614:	d402      	bmi.n	c61c <_impl_k_thread_start+0x1c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c616:	f384 8811 	msr	BASEPRI, r4
    c61a:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    c61c:	f023 0304 	bic.w	r3, r3, #4
    c620:	7243      	strb	r3, [r0, #9]
	if (_is_thread_ready(thread)) {
    c622:	f7ff ff6b 	bl	c4fc <_is_thread_ready>
    c626:	2800      	cmp	r0, #0
    c628:	d0f5      	beq.n	c616 <_impl_k_thread_start+0x16>
		_add_thread_to_ready_q(thread);
    c62a:	4608      	mov	r0, r1
    c62c:	f7ff fbfa 	bl	be24 <_add_thread_to_ready_q>
	return _is_preempt(_current) && __must_switch_threads();
    c630:	4b07      	ldr	r3, [pc, #28]	; (c650 <_impl_k_thread_start+0x50>)
    c632:	689b      	ldr	r3, [r3, #8]
    c634:	895b      	ldrh	r3, [r3, #10]
    c636:	2b7f      	cmp	r3, #127	; 0x7f
    c638:	d8ed      	bhi.n	c616 <_impl_k_thread_start+0x16>
    c63a:	f7ff fced 	bl	c018 <__must_switch_threads>
    c63e:	2800      	cmp	r0, #0
    c640:	d0e9      	beq.n	c616 <_impl_k_thread_start+0x16>
	_update_time_slice_before_swap();
    c642:	f7ff fd9b 	bl	c17c <_update_time_slice_before_swap>
	return __swap(key);
    c646:	4620      	mov	r0, r4
}
    c648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c64c:	f7f4 b956 	b.w	8fc <__swap>
    c650:	20002940 	.word	0x20002940

0000c654 <_setup_new_thread>:
void _setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options)
{
    c654:	b410      	push	{r4}

	if (options & K_INHERIT_PERMS) {
		_thread_perms_inherit(_current, new_thread);
	}
#endif
}
    c656:	bc10      	pop	{r4}
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    c658:	f7f4 bb5c 	b.w	d14 <_new_thread>

0000c65c <_impl_k_thread_create>:
k_tid_t _impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
    c65c:	b570      	push	{r4, r5, r6, lr}
    c65e:	b086      	sub	sp, #24
    c660:	4604      	mov	r4, r0
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    c662:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    c664:	9604      	str	r6, [sp, #16]
    c666:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    c668:	9603      	str	r6, [sp, #12]
    c66a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    c66c:	9602      	str	r6, [sp, #8]
    c66e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
{
    c670:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    c672:	9601      	str	r6, [sp, #4]
    c674:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    c676:	9600      	str	r6, [sp, #0]
    c678:	f7f4 fb4c 	bl	d14 <_new_thread>
	__ASSERT(!_is_in_isr(), "Threads may not be created in ISRs");
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
			  prio, options);

	if (delay != K_FOREVER) {
    c67c:	1c6b      	adds	r3, r5, #1
    c67e:	d003      	beq.n	c688 <_impl_k_thread_create+0x2c>
	if (delay == 0) {
    c680:	b92d      	cbnz	r5, c68e <_impl_k_thread_create+0x32>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread);
    c682:	4620      	mov	r0, r4
    c684:	f7ff ffbc 	bl	c600 <_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}
	return new_thread;
}
    c688:	4620      	mov	r0, r4
    c68a:	b006      	add	sp, #24
    c68c:	bd70      	pop	{r4, r5, r6, pc}
    c68e:	4629      	mov	r1, r5
    c690:	4620      	mov	r0, r4
    c692:	f7ff ff57 	bl	c544 <schedule_new_thread.part.13>
    c696:	e7f7      	b.n	c688 <_impl_k_thread_create+0x2c>

0000c698 <_k_thread_single_abort>:
_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_resume, K_OBJ_THREAD, k_tid_t);
#endif

void _k_thread_single_abort(struct k_thread *thread)
{
	if (thread->fn_abort != NULL) {
    c698:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
    c69a:	b510      	push	{r4, lr}
    c69c:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
    c69e:	b103      	cbz	r3, c6a2 <_k_thread_single_abort+0xa>
		thread->fn_abort();
    c6a0:	4798      	blx	r3
	}

	if (_is_thread_ready(thread)) {
    c6a2:	4620      	mov	r0, r4
    c6a4:	f7ff ff2a 	bl	c4fc <_is_thread_ready>
    c6a8:	b138      	cbz	r0, c6ba <_k_thread_single_abort+0x22>
		_remove_thread_from_ready_q(thread);
    c6aa:	4620      	mov	r0, r4
    c6ac:	f7ff fc3e 	bl	bf2c <_remove_thread_from_ready_q>
		if (_is_thread_timeout_active(thread)) {
			_abort_thread_timeout(thread);
		}
	}

	thread->base.thread_state |= _THREAD_DEAD;
    c6b0:	7a63      	ldrb	r3, [r4, #9]
    c6b2:	f043 0308 	orr.w	r3, r3, #8
    c6b6:	7263      	strb	r3, [r4, #9]
    c6b8:	bd10      	pop	{r4, pc}
		if (_is_thread_pending(thread)) {
    c6ba:	7a63      	ldrb	r3, [r4, #9]
    c6bc:	079b      	lsls	r3, r3, #30
    c6be:	d508      	bpl.n	c6d2 <_k_thread_single_abort+0x3a>
	node->prev->next = node->next;
    c6c0:	e894 000c 	ldmia.w	r4, {r2, r3}
    c6c4:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    c6c6:	6822      	ldr	r2, [r4, #0]
    c6c8:	6053      	str	r3, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
    c6ca:	7a63      	ldrb	r3, [r4, #9]
    c6cc:	f023 0302 	bic.w	r3, r3, #2
    c6d0:	7263      	strb	r3, [r4, #9]
		if (_is_thread_timeout_active(thread)) {
    c6d2:	6a23      	ldr	r3, [r4, #32]
    c6d4:	3301      	adds	r3, #1
    c6d6:	d0eb      	beq.n	c6b0 <_k_thread_single_abort+0x18>
	return _abort_timeout(&thread->base.timeout);
    c6d8:	f104 0010 	add.w	r0, r4, #16
    c6dc:	f7ff ff18 	bl	c510 <_abort_timeout>
    c6e0:	e7e6      	b.n	c6b0 <_k_thread_single_abort+0x18>
	...

0000c6e4 <_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void _init_static_threads(void)
{
    c6e4:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
    c6e6:	4f21      	ldr	r7, [pc, #132]	; (c76c <_init_static_threads+0x88>)
    c6e8:	4d21      	ldr	r5, [pc, #132]	; (c770 <_init_static_threads+0x8c>)
{
    c6ea:	b087      	sub	sp, #28
    c6ec:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
    c6ee:	42bd      	cmp	r5, r7
    c6f0:	f105 042c 	add.w	r4, r5, #44	; 0x2c
    c6f4:	d314      	bcc.n	c720 <_init_static_threads+0x3c>
	--_current->base.sched_locked;
    c6f6:	4b1f      	ldr	r3, [pc, #124]	; (c774 <_init_static_threads+0x90>)
    c6f8:	689a      	ldr	r2, [r3, #8]
    c6fa:	7ad3      	ldrb	r3, [r2, #11]
    c6fc:	3b01      	subs	r3, #1
    c6fe:	72d3      	strb	r3, [r2, #11]
	__asm__ volatile(
    c700:	f04f 0320 	mov.w	r3, #32
    c704:	f3ef 8511 	mrs	r5, BASEPRI
    c708:	f383 8811 	msr	BASEPRI, r3
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
    c70c:	4c18      	ldr	r4, [pc, #96]	; (c770 <_init_static_threads+0x8c>)
    c70e:	42b4      	cmp	r4, r6
    c710:	d31f      	bcc.n	c752 <_init_static_threads+0x6e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c712:	f385 8811 	msr	BASEPRI, r5
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
}
    c716:	b007      	add	sp, #28
    c718:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
    c71c:	f7ff bcac 	b.w	c078 <k_sched_unlock>
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    c720:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    c724:	9304      	str	r3, [sp, #16]
    c726:	f854 3c10 	ldr.w	r3, [r4, #-16]
    c72a:	9303      	str	r3, [sp, #12]
    c72c:	f854 3c14 	ldr.w	r3, [r4, #-20]
    c730:	9302      	str	r3, [sp, #8]
    c732:	f854 3c18 	ldr.w	r3, [r4, #-24]
    c736:	9301      	str	r3, [sp, #4]
    c738:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    c73c:	9300      	str	r3, [sp, #0]
    c73e:	f1a4 002c 	sub.w	r0, r4, #44	; 0x2c
    c742:	c80f      	ldmia	r0, {r0, r1, r2, r3}
    c744:	f7f4 fae6 	bl	d14 <_new_thread>
		thread_data->init_thread->init_data = thread_data;
    c748:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    c74c:	64dd      	str	r5, [r3, #76]	; 0x4c
    c74e:	4625      	mov	r5, r4
    c750:	e7cd      	b.n	c6ee <_init_static_threads+0xa>
		if (thread_data->init_delay != K_FOREVER) {
    c752:	6a61      	ldr	r1, [r4, #36]	; 0x24
    c754:	1c4b      	adds	r3, r1, #1
    c756:	d003      	beq.n	c760 <_init_static_threads+0x7c>
			schedule_new_thread(thread_data->init_thread,
    c758:	6820      	ldr	r0, [r4, #0]
	if (delay == 0) {
    c75a:	b919      	cbnz	r1, c764 <_init_static_threads+0x80>
    c75c:	f7ff ff50 	bl	c600 <_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    c760:	342c      	adds	r4, #44	; 0x2c
    c762:	e7d4      	b.n	c70e <_init_static_threads+0x2a>
    c764:	f7ff feee 	bl	c544 <schedule_new_thread.part.13>
    c768:	e7fa      	b.n	c760 <_init_static_threads+0x7c>
    c76a:	bf00      	nop
    c76c:	20004f0c 	.word	0x20004f0c
    c770:	20004f0c 	.word	0x20004f0c
    c774:	20002940 	.word	0x20002940

0000c778 <_init_thread_base>:
void _init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
    c778:	7203      	strb	r3, [r0, #8]
	thread_base->thread_state = (u8_t)initial_state;
    c77a:	7242      	strb	r2, [r0, #9]

	thread_base->prio = priority;

	thread_base->sched_locked = 0;
    c77c:	2300      	movs	r3, #0
	t->delta_ticks_from_prev = _INACTIVE;
    c77e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	thread_base->prio = priority;
    c782:	7281      	strb	r1, [r0, #10]
	thread_base->sched_locked = 0;
    c784:	72c3      	strb	r3, [r0, #11]
    c786:	6202      	str	r2, [r0, #32]
	t->wait_q = NULL;
    c788:	61c3      	str	r3, [r0, #28]
	t->thread = NULL;
    c78a:	6183      	str	r3, [r0, #24]
	t->func = func;
    c78c:	6243      	str	r3, [r0, #36]	; 0x24
    c78e:	4770      	bx	lr

0000c790 <work_q_main>:
#include <kernel_structs.h>
#include <wait_q.h>
#include <errno.h>

static void work_q_main(void *work_q_ptr, void *p2, void *p3)
{
    c790:	b510      	push	{r4, lr}
    c792:	4604      	mov	r4, r0

	while (1) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
    c794:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    c798:	4620      	mov	r0, r4
    c79a:	f7ff fafc 	bl	bd96 <k_queue_get>
		if (!work) {
    c79e:	4603      	mov	r3, r0
    c7a0:	2800      	cmp	r0, #0
    c7a2:	d0f7      	beq.n	c794 <work_q_main+0x4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    c7a4:	3308      	adds	r3, #8
			continue;
		}

		handler = work->handler;
    c7a6:	6842      	ldr	r2, [r0, #4]
    c7a8:	f3bf 8f5b 	dmb	ish
    c7ac:	e853 1f00 	ldrex	r1, [r3]
    c7b0:	f021 0e01 	bic.w	lr, r1, #1
    c7b4:	e843 ec00 	strex	ip, lr, [r3]
    c7b8:	f1bc 0f00 	cmp.w	ip, #0
    c7bc:	d1f6      	bne.n	c7ac <work_q_main+0x1c>
    c7be:	f3bf 8f5b 	dmb	ish

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
    c7c2:	07cb      	lsls	r3, r1, #31
    c7c4:	d500      	bpl.n	c7c8 <work_q_main+0x38>
					      K_WORK_STATE_PENDING)) {
			handler(work);
    c7c6:	4790      	blx	r2
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    c7c8:	f7ff fc90 	bl	c0ec <_impl_k_yield>
    c7cc:	e7e2      	b.n	c794 <work_q_main+0x4>
	...

0000c7d0 <k_work_q_start>:
	}
}

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
    c7d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    c7d2:	b087      	sub	sp, #28
    c7d4:	4604      	mov	r4, r0
    c7d6:	461f      	mov	r7, r3
    c7d8:	460d      	mov	r5, r1
    c7da:	4616      	mov	r6, r2
	k_queue_init(&work_q->queue);
    c7dc:	f7ff fa86 	bl	bcec <k_queue_init>

    c7e0:	2000      	movs	r0, #0
    c7e2:	9005      	str	r0, [sp, #20]
    c7e4:	9004      	str	r0, [sp, #16]
    c7e6:	9002      	str	r0, [sp, #8]
    c7e8:	9001      	str	r0, [sp, #4]
    c7ea:	9703      	str	r7, [sp, #12]
    c7ec:	9400      	str	r4, [sp, #0]
    c7ee:	4b04      	ldr	r3, [pc, #16]	; (c800 <k_work_q_start+0x30>)
    c7f0:	4632      	mov	r2, r6
    c7f2:	4629      	mov	r1, r5
    c7f4:	f104 0010 	add.w	r0, r4, #16
    c7f8:	f7ff ff30 	bl	c65c <_impl_k_thread_create>
	k_thread_create(&work_q->thread, stack, stack_size, work_q_main,
			work_q, 0, 0, prio, 0, 0);
	_k_object_init(work_q);
}
    c7fc:	b007      	add	sp, #28
    c7fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c800:	0000c791 	.word	0x0000c791

0000c804 <_ready_thread>:
	thread->base.thread_state &= ~_THREAD_PRESTART;
    c804:	7a42      	ldrb	r2, [r0, #9]
    c806:	f022 0104 	bic.w	r1, r2, #4
	return !(_is_thread_prevented_from_running(thread) ||
    c80a:	f012 0f1b 	tst.w	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    c80e:	7241      	strb	r1, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
    c810:	d104      	bne.n	c81c <_ready_thread+0x18>
    c812:	6a03      	ldr	r3, [r0, #32]
    c814:	3301      	adds	r3, #1
    c816:	d101      	bne.n	c81c <_ready_thread+0x18>
		_add_thread_to_ready_q(thread);
    c818:	f7ff bb04 	b.w	be24 <_add_thread_to_ready_q>
    c81c:	4770      	bx	lr

0000c81e <_unpend_thread>:
	node->prev->next = node->next;
    c81e:	e890 000c 	ldmia.w	r0, {r2, r3}
    c822:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    c824:	6802      	ldr	r2, [r0, #0]
    c826:	6053      	str	r3, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
    c828:	7a43      	ldrb	r3, [r0, #9]
    c82a:	f023 0302 	bic.w	r3, r3, #2
    c82e:	7243      	strb	r3, [r0, #9]
    c830:	4770      	bx	lr
	...

0000c834 <_add_timeout.constprop.9>:
static inline void _add_timeout(struct k_thread *thread,
    c834:	b430      	push	{r4, r5}
	timeout->thread = thread;
    c836:	2400      	movs	r4, #0
static inline void _add_timeout(struct k_thread *thread,
    c838:	4603      	mov	r3, r0
	timeout->delta_ticks_from_prev = timeout_in_ticks;
    c83a:	6102      	str	r2, [r0, #16]
	timeout->thread = thread;
    c83c:	6084      	str	r4, [r0, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
    c83e:	60c1      	str	r1, [r0, #12]
	if (!timeout_in_ticks) {
    c840:	b972      	cbnz	r2, c860 <_add_timeout.constprop.9+0x2c>
	__asm__ volatile(
    c842:	f04f 0120 	mov.w	r1, #32
    c846:	f3ef 8211 	mrs	r2, BASEPRI
    c84a:	f381 8811 	msr	BASEPRI, r1
	timeout->delta_ticks_from_prev = _INACTIVE;
    c84e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    c852:	6101      	str	r1, [r0, #16]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c854:	f382 8811 	msr	BASEPRI, r2
		if (timeout->func) {
    c858:	6943      	ldr	r3, [r0, #20]
    c85a:	b16b      	cbz	r3, c878 <_add_timeout.constprop.9+0x44>
}
    c85c:	bc30      	pop	{r4, r5}
			timeout->func(timeout);
    c85e:	4718      	bx	r3
	return list->head == list;
    c860:	4911      	ldr	r1, [pc, #68]	; (c8a8 <_add_timeout.constprop.9+0x74>)
    c862:	4608      	mov	r0, r1
    c864:	f850 2f10 	ldr.w	r2, [r0, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c868:	4282      	cmp	r2, r0
    c86a:	d10d      	bne.n	c888 <_add_timeout.constprop.9+0x54>
	node->next = list;
    c86c:	6018      	str	r0, [r3, #0]
	node->prev = list->tail;
    c86e:	694a      	ldr	r2, [r1, #20]
    c870:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
    c872:	694a      	ldr	r2, [r1, #20]
    c874:	6013      	str	r3, [r2, #0]
	list->tail = node;
    c876:	614b      	str	r3, [r1, #20]
}
    c878:	bc30      	pop	{r4, r5}
    c87a:	4770      	bx	lr
		*delta -= in_q->delta_ticks_from_prev;
    c87c:	1b64      	subs	r4, r4, r5
    c87e:	611c      	str	r4, [r3, #16]
	return (node == list->tail) ? NULL : node->next;
    c880:	694c      	ldr	r4, [r1, #20]
    c882:	42a2      	cmp	r2, r4
    c884:	d0f2      	beq.n	c86c <_add_timeout.constprop.9+0x38>
    c886:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
    c888:	2a00      	cmp	r2, #0
    c88a:	d0ef      	beq.n	c86c <_add_timeout.constprop.9+0x38>
		if (*delta <= in_q->delta_ticks_from_prev) {
    c88c:	691c      	ldr	r4, [r3, #16]
    c88e:	6915      	ldr	r5, [r2, #16]
    c890:	42ac      	cmp	r4, r5
    c892:	dcf3      	bgt.n	c87c <_add_timeout.constprop.9+0x48>
		node->prev = insert_point->prev;
    c894:	6851      	ldr	r1, [r2, #4]
			in_q->delta_ticks_from_prev -= *delta;
    c896:	1b2c      	subs	r4, r5, r4
    c898:	6114      	str	r4, [r2, #16]
    c89a:	6059      	str	r1, [r3, #4]
		node->next = insert_point;
    c89c:	601a      	str	r2, [r3, #0]
		insert_point->prev->next = node;
    c89e:	6851      	ldr	r1, [r2, #4]
    c8a0:	600b      	str	r3, [r1, #0]
		insert_point->prev = node;
    c8a2:	6053      	str	r3, [r2, #4]
    c8a4:	e7e8      	b.n	c878 <_add_timeout.constprop.9+0x44>
    c8a6:	bf00      	nop
    c8a8:	20002940 	.word	0x20002940

0000c8ac <_timer_expiration_handler>:

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (timer->period > 0) {
    c8ac:	6a83      	ldr	r3, [r0, #40]	; 0x28
    c8ae:	2b00      	cmp	r3, #0
{
    c8b0:	b570      	push	{r4, r5, r6, lr}
    c8b2:	4604      	mov	r4, r0
    c8b4:	f100 0518 	add.w	r5, r0, #24
	if (timer->period > 0) {
    c8b8:	dd0b      	ble.n	c8d2 <_timer_expiration_handler+0x26>
	__asm__ volatile(
    c8ba:	f04f 0320 	mov.w	r3, #32
    c8be:	f3ef 8611 	mrs	r6, BASEPRI
    c8c2:	f383 8811 	msr	BASEPRI, r3
		key = irq_lock();
		_add_timeout(NULL, &timer->timeout, &timer->wait_q,
    c8c6:	6a82      	ldr	r2, [r0, #40]	; 0x28
    c8c8:	4629      	mov	r1, r5
    c8ca:	f7ff ffb3 	bl	c834 <_add_timeout.constprop.9>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c8ce:	f386 8811 	msr	BASEPRI, r6
				timer->period);
		irq_unlock(key);
	}

	/* update timer's status */
	timer->status += 1;
    c8d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    c8d4:	3301      	adds	r3, #1
    c8d6:	62e3      	str	r3, [r4, #44]	; 0x2c

	/* invoke timer expiry function */
	if (timer->expiry_fn) {
    c8d8:	6a23      	ldr	r3, [r4, #32]
    c8da:	b10b      	cbz	r3, c8e0 <_timer_expiration_handler+0x34>
		timer->expiry_fn(timer);
    c8dc:	4620      	mov	r0, r4
    c8de:	4798      	blx	r3
	return list->head == list;
    c8e0:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c8e2:	42ac      	cmp	r4, r5
    c8e4:	d010      	beq.n	c908 <_timer_expiration_handler+0x5c>
	}

	thread = (struct k_thread *)sys_dlist_peek_head(&timer->wait_q);

	if (!thread) {
    c8e6:	b17c      	cbz	r4, c908 <_timer_expiration_handler+0x5c>
	 * calling _unpend_thread() because a) this is the only place a thread
	 * can be taken off this pend queue, and b) the only place a thread
	 * can be put on the pend queue is at thread level, which of course
	 * cannot interrupt the current context.
	 */
	_unpend_thread(thread);
    c8e8:	4620      	mov	r0, r4
    c8ea:	f7ff ff98 	bl	c81e <_unpend_thread>
	__asm__ volatile(
    c8ee:	f04f 0320 	mov.w	r3, #32
    c8f2:	f3ef 8511 	mrs	r5, BASEPRI
    c8f6:	f383 8811 	msr	BASEPRI, r3

	key = irq_lock();
	_ready_thread(thread);
    c8fa:	4620      	mov	r0, r4
    c8fc:	f7ff ff82 	bl	c804 <_ready_thread>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c900:	f385 8811 	msr	BASEPRI, r5
    c904:	2300      	movs	r3, #0
    c906:	6663      	str	r3, [r4, #100]	; 0x64
    c908:	bd70      	pop	{r4, r5, r6, pc}

0000c90a <sys_dlist_remove>:
	node->prev->next = node->next;
    c90a:	e890 000c 	ldmia.w	r0, {r2, r3}
    c90e:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    c910:	6802      	ldr	r2, [r0, #0]
    c912:	6053      	str	r3, [r2, #4]
    c914:	4770      	bx	lr

0000c916 <clear_event_registrations>:

/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int last_registered,
					      unsigned int key)
{
    c916:	b570      	push	{r4, r5, r6, lr}
    c918:	2414      	movs	r4, #20
    c91a:	4615      	mov	r5, r2
    c91c:	fb04 0401 	mla	r4, r4, r1, r0
	event->poller = NULL;
    c920:	2600      	movs	r6, #0
	for (; last_registered >= 0; last_registered--) {
    c922:	2900      	cmp	r1, #0
    c924:	da00      	bge.n	c928 <clear_event_registrations+0x12>
		clear_event_registration(&events[last_registered]);
		irq_unlock(key);
		key = irq_lock();
	}
}
    c926:	bd70      	pop	{r4, r5, r6, pc}
	switch (event->type) {
    c928:	7b63      	ldrb	r3, [r4, #13]
	event->poller = NULL;
    c92a:	60a6      	str	r6, [r4, #8]
	switch (event->type) {
    c92c:	f003 030f 	and.w	r3, r3, #15
    c930:	2b02      	cmp	r3, #2
    c932:	d003      	beq.n	c93c <clear_event_registrations+0x26>
    c934:	2b04      	cmp	r3, #4
    c936:	d001      	beq.n	c93c <clear_event_registrations+0x26>
    c938:	2b01      	cmp	r3, #1
    c93a:	d102      	bne.n	c942 <clear_event_registrations+0x2c>
		sys_dlist_remove(&event->_node);
    c93c:	4620      	mov	r0, r4
    c93e:	f7ff ffe4 	bl	c90a <sys_dlist_remove>
    c942:	f385 8811 	msr	BASEPRI, r5
	__asm__ volatile(
    c946:	f04f 0320 	mov.w	r3, #32
    c94a:	f3ef 8511 	mrs	r5, BASEPRI
    c94e:	f383 8811 	msr	BASEPRI, r3
	for (; last_registered >= 0; last_registered--) {
    c952:	3901      	subs	r1, #1
    c954:	3c14      	subs	r4, #20
    c956:	e7e4      	b.n	c922 <clear_event_registrations+0xc>

0000c958 <signal_poll_event>:
}

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state,
			      int *must_reschedule)
{
    c958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	*must_reschedule = 0;
    c95a:	2300      	movs	r3, #0
    c95c:	6013      	str	r3, [r2, #0]

	if (!event->poller) {
    c95e:	6883      	ldr	r3, [r0, #8]
{
    c960:	4605      	mov	r5, r0
    c962:	460e      	mov	r6, r1
    c964:	4617      	mov	r7, r2
	if (!event->poller) {
    c966:	2b00      	cmp	r3, #0
    c968:	d049      	beq.n	c9fe <signal_poll_event+0xa6>
		goto ready_event;
	}

	struct k_thread *thread = event->poller->thread;
    c96a:	6819      	ldr	r1, [r3, #0]
	thread->base.thread_state &= ~states;
    c96c:	7a4b      	ldrb	r3, [r1, #9]
    c96e:	f023 0220 	bic.w	r2, r3, #32

	__ASSERT(event->poller->thread, "poller should have a thread\n");

	clear_polling_state(thread);

	if (!_is_thread_pending(thread)) {
    c972:	0798      	lsls	r0, r3, #30
    c974:	724a      	strb	r2, [r1, #9]
    c976:	d542      	bpl.n	c9fe <signal_poll_event+0xa6>
		goto ready_event;
	}

	if (_is_thread_timeout_expired(thread)) {
    c978:	6a0b      	ldr	r3, [r1, #32]
    c97a:	3302      	adds	r3, #2
    c97c:	d04a      	beq.n	ca14 <signal_poll_event+0xbc>
	sys_dlist_remove(&thread->base.k_q_node);
    c97e:	4608      	mov	r0, r1
    c980:	f7ff ffc3 	bl	c90a <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    c984:	7a4b      	ldrb	r3, [r1, #9]
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    c986:	6a0c      	ldr	r4, [r1, #32]
    c988:	f023 0302 	bic.w	r3, r3, #2
    c98c:	1c62      	adds	r2, r4, #1
    c98e:	724b      	strb	r3, [r1, #9]
	return _abort_timeout(&thread->base.timeout);
    c990:	f101 0010 	add.w	r0, r1, #16
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    c994:	d00c      	beq.n	c9b0 <signal_poll_event+0x58>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
    c996:	4b21      	ldr	r3, [pc, #132]	; (ca1c <signal_poll_event+0xc4>)
    c998:	695b      	ldr	r3, [r3, #20]
    c99a:	4298      	cmp	r0, r3
	return (node == list->tail) ? NULL : node->next;
    c99c:	bf1f      	itttt	ne
    c99e:	690a      	ldrne	r2, [r1, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
    c9a0:	6913      	ldrne	r3, [r2, #16]
    c9a2:	191b      	addne	r3, r3, r4
    c9a4:	6113      	strne	r3, [r2, #16]
	sys_dlist_remove(&timeout->node);
    c9a6:	f7ff ffb0 	bl	c90a <sys_dlist_remove>
	timeout->delta_ticks_from_prev = _INACTIVE;
    c9aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c9ae:	620b      	str	r3, [r1, #32]
	return !(_is_thread_prevented_from_running(thread) ||
    c9b0:	7a48      	ldrb	r0, [r1, #9]
		return -EAGAIN;
	}

	_unpend_thread(thread);
	_abort_thread_timeout(thread);
	_set_thread_return_value(thread,
    c9b2:	2e00      	cmp	r6, #0
    c9b4:	bf0c      	ite	eq
    c9b6:	f06f 0303 	mvneq.w	r3, #3
    c9ba:	2300      	movne	r3, #0
    c9bc:	f010 041f 	ands.w	r4, r0, #31
    c9c0:	664b      	str	r3, [r1, #100]	; 0x64
    c9c2:	d11c      	bne.n	c9fe <signal_poll_event+0xa6>
    c9c4:	6a0b      	ldr	r3, [r1, #32]
    c9c6:	3301      	adds	r3, #1
    c9c8:	d119      	bne.n	c9fe <signal_poll_event+0xa6>

	if (!_is_thread_ready(thread)) {
		goto ready_event;
	}

	_add_thread_to_ready_q(thread);
    c9ca:	4608      	mov	r0, r1
    c9cc:	f7ff fa2a 	bl	be24 <_add_thread_to_ready_q>
    c9d0:	f3ef 8305 	mrs	r3, IPSR
    c9d4:	2b0d      	cmp	r3, #13
    c9d6:	d81b      	bhi.n	ca10 <signal_poll_event+0xb8>
    c9d8:	b123      	cbz	r3, c9e4 <signal_poll_event+0x8c>
    c9da:	4b11      	ldr	r3, [pc, #68]	; (ca20 <signal_poll_event+0xc8>)
    c9dc:	6858      	ldr	r0, [r3, #4]
    c9de:	f410 6000 	ands.w	r0, r0, #2048	; 0x800
    c9e2:	d00b      	beq.n	c9fc <signal_poll_event+0xa4>
	return _is_preempt(_current) && __must_switch_threads();
    c9e4:	4b0d      	ldr	r3, [pc, #52]	; (ca1c <signal_poll_event+0xc4>)
    c9e6:	689b      	ldr	r3, [r3, #8]
    c9e8:	895b      	ldrh	r3, [r3, #10]
    c9ea:	2b7f      	cmp	r3, #127	; 0x7f
    c9ec:	d901      	bls.n	c9f2 <signal_poll_event+0x9a>
	*must_reschedule = !_is_in_isr() && _must_switch_threads();
    c9ee:	2000      	movs	r0, #0
    c9f0:	e004      	b.n	c9fc <signal_poll_event+0xa4>
    c9f2:	f7ff fb11 	bl	c018 <__must_switch_threads>
    c9f6:	3000      	adds	r0, #0
    c9f8:	bf18      	it	ne
    c9fa:	2001      	movne	r0, #1
    c9fc:	6038      	str	r0, [r7, #0]
	event->state |= state;
    c9fe:	7b6b      	ldrb	r3, [r5, #13]
    ca00:	ea46 1613 	orr.w	r6, r6, r3, lsr #4
    ca04:	f366 1307 	bfi	r3, r6, #4, #4
	event->poller = NULL;
    ca08:	2000      	movs	r0, #0
	event->state |= state;
    ca0a:	736b      	strb	r3, [r5, #13]
	event->poller = NULL;
    ca0c:	60a8      	str	r0, [r5, #8]

ready_event:
	set_event_ready(event, state);
	return 0;
    ca0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	*must_reschedule = !_is_in_isr() && _must_switch_threads();
    ca10:	4620      	mov	r0, r4
    ca12:	e7f3      	b.n	c9fc <signal_poll_event+0xa4>
		return -EAGAIN;
    ca14:	f06f 000a 	mvn.w	r0, #10
    ca18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ca1a:	bf00      	nop
    ca1c:	20002940 	.word	0x20002940
    ca20:	e000ed00 	.word	0xe000ed00

0000ca24 <add_event>:
	return list->head == list;
    ca24:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
    ca26:	4298      	cmp	r0, r3
{
    ca28:	b530      	push	{r4, r5, lr}
    ca2a:	d00a      	beq.n	ca42 <add_event+0x1e>
    ca2c:	6844      	ldr	r4, [r0, #4]
	if (!pending || _is_t1_higher_prio_than_t2(pending->poller->thread,
    ca2e:	b144      	cbz	r4, ca42 <add_event+0x1e>
    ca30:	68a5      	ldr	r5, [r4, #8]
    ca32:	6812      	ldr	r2, [r2, #0]
    ca34:	682d      	ldr	r5, [r5, #0]
    ca36:	f992 200a 	ldrsb.w	r2, [r2, #10]
    ca3a:	f995 500a 	ldrsb.w	r5, [r5, #10]
    ca3e:	4295      	cmp	r5, r2
    ca40:	da17      	bge.n	ca72 <add_event+0x4e>
	node->next = list;
    ca42:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
    ca44:	6843      	ldr	r3, [r0, #4]
    ca46:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
    ca48:	6843      	ldr	r3, [r0, #4]
    ca4a:	6019      	str	r1, [r3, #0]
	list->tail = node;
    ca4c:	6041      	str	r1, [r0, #4]
    ca4e:	bd30      	pop	{r4, r5, pc}
		if (_is_t1_higher_prio_than_t2(poller->thread,
    ca50:	689d      	ldr	r5, [r3, #8]
    ca52:	682d      	ldr	r5, [r5, #0]
    ca54:	f995 500a 	ldrsb.w	r5, [r5, #10]
    ca58:	4295      	cmp	r5, r2
    ca5a:	dd06      	ble.n	ca6a <add_event+0x46>
		node->prev = insert_point->prev;
    ca5c:	685a      	ldr	r2, [r3, #4]
    ca5e:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
    ca60:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
    ca62:	685a      	ldr	r2, [r3, #4]
    ca64:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
    ca66:	6059      	str	r1, [r3, #4]
    ca68:	bd30      	pop	{r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    ca6a:	42a3      	cmp	r3, r4
    ca6c:	d003      	beq.n	ca76 <add_event+0x52>
    ca6e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
    ca70:	b10b      	cbz	r3, ca76 <add_event+0x52>
    ca72:	2b00      	cmp	r3, #0
    ca74:	d1ec      	bne.n	ca50 <add_event+0x2c>
	node->prev = list->tail;
    ca76:	e881 0011 	stmia.w	r1, {r0, r4}
    ca7a:	e7e5      	b.n	ca48 <add_event+0x24>

0000ca7c <k_poll_event_init>:
{
    ca7c:	b530      	push	{r4, r5, lr}
	event->type = type;
    ca7e:	7b44      	ldrb	r4, [r0, #13]
	event->obj = obj;
    ca80:	6103      	str	r3, [r0, #16]
	event->type = type;
    ca82:	f361 0403 	bfi	r4, r1, #0, #4
	event->mode = mode;
    ca86:	7b81      	ldrb	r1, [r0, #14]
    ca88:	f362 0100 	bfi	r1, r2, #0, #1
    ca8c:	7381      	strb	r1, [r0, #14]
	event->unused = 0;
    ca8e:	89c2      	ldrh	r2, [r0, #14]
	event->poller = NULL;
    ca90:	2500      	movs	r5, #0
	event->state = K_POLL_STATE_NOT_READY;
    ca92:	f365 1407 	bfi	r4, r5, #4, #4
	event->unused = 0;
    ca96:	f365 024f 	bfi	r2, r5, #1, #15
	event->poller = NULL;
    ca9a:	6085      	str	r5, [r0, #8]
	event->state = K_POLL_STATE_NOT_READY;
    ca9c:	7344      	strb	r4, [r0, #13]
	event->unused = 0;
    ca9e:	81c2      	strh	r2, [r0, #14]
	event->obj = obj;
    caa0:	bd30      	pop	{r4, r5, pc}
	...

0000caa4 <k_poll>:
{
    caa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    caa8:	b087      	sub	sp, #28
    caaa:	4680      	mov	r8, r0
    caac:	9101      	str	r1, [sp, #4]
    caae:	4691      	mov	r9, r2
    cab0:	f04f 0320 	mov.w	r3, #32
    cab4:	f3ef 8111 	mrs	r1, BASEPRI
    cab8:	f383 8811 	msr	BASEPRI, r3
	set_polling_state(_current);
    cabc:	4d4a      	ldr	r5, [pc, #296]	; (cbe8 <k_poll+0x144>)
    cabe:	68aa      	ldr	r2, [r5, #8]
	thread->base.thread_state |= states;
    cac0:	7a53      	ldrb	r3, [r2, #9]
    cac2:	f043 0320 	orr.w	r3, r3, #32
    cac6:	7253      	strb	r3, [r2, #9]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    cac8:	f381 8811 	msr	BASEPRI, r1
	struct _poller poller = { .thread = _current };
    cacc:	f10d 0a18 	add.w	sl, sp, #24
    cad0:	68aa      	ldr	r2, [r5, #8]
    cad2:	f84a 2d0c 	str.w	r2, [sl, #-12]!
    cad6:	4604      	mov	r4, r0
	for (int ii = 0; ii < num_events; ii++) {
    cad8:	2700      	movs	r7, #0
	int last_registered = -1, rc;
    cada:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
	for (int ii = 0; ii < num_events; ii++) {
    cade:	9b01      	ldr	r3, [sp, #4]
    cae0:	429f      	cmp	r7, r3
    cae2:	db15      	blt.n	cb10 <k_poll+0x6c>
	__asm__ volatile(
    cae4:	f04f 0320 	mov.w	r3, #32
    cae8:	f3ef 8711 	mrs	r7, BASEPRI
    caec:	f383 8811 	msr	BASEPRI, r3
	return _is_thread_polling(_current);
    caf0:	68aa      	ldr	r2, [r5, #8]
    caf2:	7a53      	ldrb	r3, [r2, #9]
	if (!is_polling()) {
    caf4:	f013 0420 	ands.w	r4, r3, #32
    caf8:	d144      	bne.n	cb84 <k_poll+0xe0>
		clear_event_registrations(events, last_registered, key);
    cafa:	463a      	mov	r2, r7
    cafc:	4631      	mov	r1, r6
    cafe:	4640      	mov	r0, r8
    cb00:	f7ff ff09 	bl	c916 <clear_event_registrations>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    cb04:	f387 8811 	msr	BASEPRI, r7
}
    cb08:	4620      	mov	r0, r4
    cb0a:	b007      	add	sp, #28
    cb0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
    cb10:	f04f 0220 	mov.w	r2, #32
    cb14:	f3ef 8b11 	mrs	fp, BASEPRI
    cb18:	f382 8811 	msr	BASEPRI, r2
	switch (event->type) {
    cb1c:	7b61      	ldrb	r1, [r4, #13]
    cb1e:	f001 020f 	and.w	r2, r1, #15
    cb22:	2a02      	cmp	r2, #2
    cb24:	d003      	beq.n	cb2e <k_poll+0x8a>
    cb26:	2a04      	cmp	r2, #4
    cb28:	d004      	beq.n	cb34 <k_poll+0x90>
    cb2a:	2a01      	cmp	r2, #1
    cb2c:	d106      	bne.n	cb3c <k_poll+0x98>
		if (event->signal->signaled) {
    cb2e:	6920      	ldr	r0, [r4, #16]
    cb30:	6880      	ldr	r0, [r0, #8]
    cb32:	e001      	b.n	cb38 <k_poll+0x94>
		if (!k_queue_is_empty(event->queue)) {
    cb34:	6920      	ldr	r0, [r4, #16]
    cb36:	6800      	ldr	r0, [r0, #0]
		if (event->signal->signaled) {
    cb38:	2800      	cmp	r0, #0
    cb3a:	d148      	bne.n	cbce <k_poll+0x12a>
		} else if (timeout != K_NO_WAIT && is_polling()) {
    cb3c:	f1b9 0f00 	cmp.w	r9, #0
    cb40:	d016      	beq.n	cb70 <k_poll+0xcc>
    cb42:	68a9      	ldr	r1, [r5, #8]
    cb44:	7a49      	ldrb	r1, [r1, #9]
    cb46:	068b      	lsls	r3, r1, #26
    cb48:	d512      	bpl.n	cb70 <k_poll+0xcc>
	switch (event->type) {
    cb4a:	2a02      	cmp	r2, #2
    cb4c:	d007      	beq.n	cb5e <k_poll+0xba>
    cb4e:	2a04      	cmp	r2, #4
    cb50:	d013      	beq.n	cb7a <k_poll+0xd6>
    cb52:	2a01      	cmp	r2, #1
    cb54:	d109      	bne.n	cb6a <k_poll+0xc6>
		add_event(&event->signal->poll_events, event, poller);
    cb56:	4652      	mov	r2, sl
    cb58:	4621      	mov	r1, r4
    cb5a:	6920      	ldr	r0, [r4, #16]
    cb5c:	e003      	b.n	cb66 <k_poll+0xc2>
		add_event(&event->sem->poll_events, event, poller);
    cb5e:	6920      	ldr	r0, [r4, #16]
    cb60:	4652      	mov	r2, sl
    cb62:	4621      	mov	r1, r4
    cb64:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
    cb66:	f7ff ff5d 	bl	ca24 <add_event>
	event->poller = poller;
    cb6a:	f8c4 a008 	str.w	sl, [r4, #8]
				++last_registered;
    cb6e:	3601      	adds	r6, #1
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    cb70:	f38b 8811 	msr	BASEPRI, fp
	for (int ii = 0; ii < num_events; ii++) {
    cb74:	3701      	adds	r7, #1
    cb76:	3414      	adds	r4, #20
    cb78:	e7b1      	b.n	cade <k_poll+0x3a>
		add_event(&event->queue->poll_events, event, poller);
    cb7a:	6920      	ldr	r0, [r4, #16]
    cb7c:	4652      	mov	r2, sl
    cb7e:	4621      	mov	r1, r4
    cb80:	3008      	adds	r0, #8
    cb82:	e7f0      	b.n	cb66 <k_poll+0xc2>
	thread->base.thread_state &= ~states;
    cb84:	f023 0320 	bic.w	r3, r3, #32
    cb88:	7253      	strb	r3, [r2, #9]
	if (timeout == K_NO_WAIT) {
    cb8a:	f1b9 0f00 	cmp.w	r9, #0
    cb8e:	d104      	bne.n	cb9a <k_poll+0xf6>
    cb90:	f387 8811 	msr	BASEPRI, r7
		return -EAGAIN;
    cb94:	f06f 040a 	mvn.w	r4, #10
    cb98:	e7b6      	b.n	cb08 <k_poll+0x64>
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
    cb9a:	a804      	add	r0, sp, #16
	_pend_current_thread(&wait_q, timeout);
    cb9c:	4649      	mov	r1, r9
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
    cb9e:	9004      	str	r0, [sp, #16]
    cba0:	9005      	str	r0, [sp, #20]
	_pend_current_thread(&wait_q, timeout);
    cba2:	f7ff fa29 	bl	bff8 <_pend_current_thread>
	_update_time_slice_before_swap();
    cba6:	f7ff fae9 	bl	c17c <_update_time_slice_before_swap>
	return __swap(key);
    cbaa:	4638      	mov	r0, r7
    cbac:	f7f3 fea6 	bl	8fc <__swap>
    cbb0:	4604      	mov	r4, r0
	__asm__ volatile(
    cbb2:	f04f 0320 	mov.w	r3, #32
    cbb6:	f3ef 8511 	mrs	r5, BASEPRI
    cbba:	f383 8811 	msr	BASEPRI, r3
	clear_event_registrations(events, last_registered, key);
    cbbe:	462a      	mov	r2, r5
    cbc0:	4631      	mov	r1, r6
    cbc2:	4640      	mov	r0, r8
    cbc4:	f7ff fea7 	bl	c916 <clear_event_registrations>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    cbc8:	f385 8811 	msr	BASEPRI, r5
	return swap_rc;
    cbcc:	e79c      	b.n	cb08 <k_poll+0x64>
	event->state |= state;
    cbce:	ea42 1211 	orr.w	r2, r2, r1, lsr #4
    cbd2:	f362 1107 	bfi	r1, r2, #4, #4
	event->poller = NULL;
    cbd6:	2300      	movs	r3, #0
    cbd8:	60a3      	str	r3, [r4, #8]
	event->state |= state;
    cbda:	7361      	strb	r1, [r4, #13]
			clear_polling_state(_current);
    cbdc:	68a9      	ldr	r1, [r5, #8]
    cbde:	7a4a      	ldrb	r2, [r1, #9]
    cbe0:	f022 0220 	bic.w	r2, r2, #32
    cbe4:	724a      	strb	r2, [r1, #9]
    cbe6:	e7c3      	b.n	cb70 <k_poll+0xcc>
    cbe8:	20002940 	.word	0x20002940

0000cbec <_handle_obj_poll_events>:
}

/* returns 1 if a reschedule must take place, 0 otherwise */
int _handle_obj_poll_events(sys_dlist_t *events, u32_t state)
{
    cbec:	b513      	push	{r0, r1, r4, lr}
	return list->head == list;
    cbee:	6804      	ldr	r4, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node;

	if (sys_dlist_is_empty(list)) {
    cbf0:	42a0      	cmp	r0, r4
    cbf2:	d102      	bne.n	cbfa <_handle_obj_poll_events+0xe>
	struct k_poll_event *poll_event;
	int must_reschedule;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (!poll_event) {
		return 0;
    cbf4:	2000      	movs	r0, #0
	}

	(void) signal_poll_event(poll_event, state, &must_reschedule);
	return must_reschedule;
}
    cbf6:	b002      	add	sp, #8
    cbf8:	bd10      	pop	{r4, pc}
		return NULL;
	}

	node = list->head;
	sys_dlist_remove(node);
    cbfa:	4620      	mov	r0, r4
    cbfc:	f7ff fe85 	bl	c90a <sys_dlist_remove>
	if (!poll_event) {
    cc00:	2c00      	cmp	r4, #0
    cc02:	d0f7      	beq.n	cbf4 <_handle_obj_poll_events+0x8>
	(void) signal_poll_event(poll_event, state, &must_reschedule);
    cc04:	aa01      	add	r2, sp, #4
    cc06:	4620      	mov	r0, r4
    cc08:	f7ff fea6 	bl	c958 <signal_poll_event>
	return must_reschedule;
    cc0c:	9801      	ldr	r0, [sp, #4]
    cc0e:	e7f2      	b.n	cbf6 <_handle_obj_poll_events+0xa>

0000cc10 <_OffsetAbsSyms>:

#ifdef CONFIG_FLOAT
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread) -
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
    cc10:	4770      	bx	lr
