
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:
};
#endif

/* Linker needs this */
GEN_ABS_SYM_BEGIN(isr_tables_syms)
GEN_ABSOLUTE_SYM(__ISR_LIST_SIZEOF, sizeof(struct _isr_list));
       0:	20003fb8 	.word	0x20003fb8

#ifdef CONFIG_ERRNO
int *__errno(void)
{
	return &_current->errno_var;
}
       4:	00000ee5 	.word	0x00000ee5
       8:	00000f35 	.word	0x00000f35
       c:	00000d7d 	.word	0x00000d7d
      10:	00000d7d 	.word	0x00000d7d
      14:	00000d7d 	.word	0x00000d7d
      18:	00000d7d 	.word	0x00000d7d
      1c:	00000d7d 	.word	0x00000d7d
      20:	00000d7d 	.word	0x00000d7d
      24:	00000d7d 	.word	0x00000d7d
      28:	00000d7d 	.word	0x00000d7d
      2c:	00000971 	.word	0x00000971
      30:	00000d7d 	.word	0x00000d7d
      34:	00000d7d 	.word	0x00000d7d
      38:	0000092d 	.word	0x0000092d
      3c:	00000d7d 	.word	0x00000d7d

00000040 <_irq_vector_table>:
      40:	00000ea9 0000a337 00000ea9 00000ea9     ....7...........
      50:	00000ea9 00000ea9 00000ea9 00000ea9     ................
      60:	00000ea9 00000ea9 00000ea9 00000ea9     ................
      70:	00000ea9 00000ea9 00000ea9 00000ea9     ................
      80:	00000ea9 00000ea9 00000ea9 00000ea9     ................
      90:	00000ea9 00000ea9 00000ea9 00000ea9     ................
      a0:	00000ea9 00000ea9 00000ea9 00000ea9     ................
      b0:	00000ea9 00000ea9 00000ea9 00000ea9     ................
      c0:	00000ea9 00000ea9 00000ea9 00000ea9     ................
      d0:	00000ea9 00000ea9 00000ea9 00000ea9     ................
      e0:	00000ea9 00000ea9 00000ea9 00000ea9     ................
      f0:	00000ea9 00000ea9                       ........

000000f8 <_sw_isr_table>:
      f8:	00000000 0000178d 00000000 00000cf5     ................
     108:	00000000 00000cf5 00000000 00000cf5     ................
     118:	00000000 00000cf5 00000000 00000cf5     ................
     128:	20005108 00001971 00000000 00000cf5     .Q. q...........
     138:	00000000 00000cf5 00000000 00000cf5     ................
     148:	00000000 00000cf5 00000000 0000a2fd     ................
     158:	00000000 00000cf5 200050e4 00001d39     .........P. 9...
     168:	00000000 00000cf5 00000000 00000cf5     ................
     178:	00000000 00000cf5 00000000 00001e69     ............i...
     188:	00000000 00000cf5 00000000 00000cf5     ................
     198:	00000000 00000cf5 00000000 00000cf5     ................
     1a8:	00000000 00000cf5 00000000 00000cf5     ................
     1b8:	00000000 0000a331 00000000 00000cf5     ....1...........
     1c8:	00000000 00000cf5 00000000 00000cf5     ................
     1d8:	00000000 00000cf5 00000000 00000cf5     ................
     1e8:	00000000 00000cf5 00000000 00000cf5     ................
     1f8:	00000000 00000cf5 00000000 00000cf5     ................
     208:	00000000 00000cf5 00000000 00000cf5     ................
     218:	00000000 00000cf5 00000000 00000cf5     ................
     228:	00000000 00000cf5 00000000 00000cf5     ................
     238:	00000000 00000cf5 00000000 00000cf5     ................
     248:	00000000 00000cf5 00000000 00000cf5     ................
     258:	00000000 00000cf5 00000000 00000cf5     ................

00000268 <__aeabi_uldivmod>:
     268:	b953      	cbnz	r3, 280 <CONFIG_BT_HCI_TX_STACK_SIZE>
     26a:	b94a      	cbnz	r2, 280 <CONFIG_BT_HCI_TX_STACK_SIZE>
     26c:	2900      	cmp	r1, #0
     26e:	bf08      	it	eq
     270:	2800      	cmpeq	r0, #0
     272:	bf1c      	itt	ne
     274:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     278:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     27c:	f000 b98e 	b.w	59c <__aeabi_idiv0>
     280:	f1ad 0c08 	sub.w	ip, sp, #8
     284:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     288:	f000 f81a 	bl	2c0 <__udivmoddi4>
     28c:	f8dd e004 	ldr.w	lr, [sp, #4]
     290:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     294:	b004      	add	sp, #16
     296:	4770      	bx	lr

00000298 <__popcountsi2>:
     298:	0843      	lsrs	r3, r0, #1
     29a:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
     29e:	1ac0      	subs	r0, r0, r3
     2a0:	0883      	lsrs	r3, r0, #2
     2a2:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
     2a6:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
     2aa:	4418      	add	r0, r3
     2ac:	eb00 1010 	add.w	r0, r0, r0, lsr #4
     2b0:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
     2b4:	eb00 2000 	add.w	r0, r0, r0, lsl #8
     2b8:	eb00 4000 	add.w	r0, r0, r0, lsl #16
     2bc:	0e00      	lsrs	r0, r0, #24
     2be:	4770      	bx	lr

000002c0 <__udivmoddi4>:
     2c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     2c4:	468c      	mov	ip, r1
     2c6:	460d      	mov	r5, r1
     2c8:	4604      	mov	r4, r0
     2ca:	9e08      	ldr	r6, [sp, #32]
     2cc:	2b00      	cmp	r3, #0
     2ce:	d151      	bne.n	374 <__udivmoddi4+0xb4>
     2d0:	428a      	cmp	r2, r1
     2d2:	4617      	mov	r7, r2
     2d4:	d96d      	bls.n	3b2 <__udivmoddi4+0xf2>
     2d6:	fab2 fe82 	clz	lr, r2
     2da:	f1be 0f00 	cmp.w	lr, #0
     2de:	d00b      	beq.n	2f8 <__udivmoddi4+0x38>
     2e0:	f1ce 0c20 	rsb	ip, lr, #32
     2e4:	fa01 f50e 	lsl.w	r5, r1, lr
     2e8:	fa20 fc0c 	lsr.w	ip, r0, ip
     2ec:	fa02 f70e 	lsl.w	r7, r2, lr
     2f0:	ea4c 0c05 	orr.w	ip, ip, r5
     2f4:	fa00 f40e 	lsl.w	r4, r0, lr
     2f8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
     2fc:	0c25      	lsrs	r5, r4, #16
     2fe:	fbbc f8fa 	udiv	r8, ip, sl
     302:	fa1f f987 	uxth.w	r9, r7
     306:	fb0a cc18 	mls	ip, sl, r8, ip
     30a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     30e:	fb08 f309 	mul.w	r3, r8, r9
     312:	42ab      	cmp	r3, r5
     314:	d90a      	bls.n	32c <__udivmoddi4+0x6c>
     316:	19ed      	adds	r5, r5, r7
     318:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
     31c:	f080 8123 	bcs.w	566 <CONFIG_BT_RX_STACK_SIZE+0x166>
     320:	42ab      	cmp	r3, r5
     322:	f240 8120 	bls.w	566 <CONFIG_BT_RX_STACK_SIZE+0x166>
     326:	f1a8 0802 	sub.w	r8, r8, #2
     32a:	443d      	add	r5, r7
     32c:	1aed      	subs	r5, r5, r3
     32e:	b2a4      	uxth	r4, r4
     330:	fbb5 f0fa 	udiv	r0, r5, sl
     334:	fb0a 5510 	mls	r5, sl, r0, r5
     338:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     33c:	fb00 f909 	mul.w	r9, r0, r9
     340:	45a1      	cmp	r9, r4
     342:	d909      	bls.n	358 <__udivmoddi4+0x98>
     344:	19e4      	adds	r4, r4, r7
     346:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     34a:	f080 810a 	bcs.w	562 <CONFIG_BT_RX_STACK_SIZE+0x162>
     34e:	45a1      	cmp	r9, r4
     350:	f240 8107 	bls.w	562 <CONFIG_BT_RX_STACK_SIZE+0x162>
     354:	3802      	subs	r0, #2
     356:	443c      	add	r4, r7
     358:	eba4 0409 	sub.w	r4, r4, r9
     35c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     360:	2100      	movs	r1, #0
     362:	2e00      	cmp	r6, #0
     364:	d061      	beq.n	42a <CONFIG_BT_RX_STACK_SIZE+0x2a>
     366:	fa24 f40e 	lsr.w	r4, r4, lr
     36a:	2300      	movs	r3, #0
     36c:	6034      	str	r4, [r6, #0]
     36e:	6073      	str	r3, [r6, #4]
     370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     374:	428b      	cmp	r3, r1
     376:	d907      	bls.n	388 <__udivmoddi4+0xc8>
     378:	2e00      	cmp	r6, #0
     37a:	d054      	beq.n	426 <CONFIG_BT_RX_STACK_SIZE+0x26>
     37c:	2100      	movs	r1, #0
     37e:	e886 0021 	stmia.w	r6, {r0, r5}
     382:	4608      	mov	r0, r1
     384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     388:	fab3 f183 	clz	r1, r3
     38c:	2900      	cmp	r1, #0
     38e:	f040 808e 	bne.w	4ae <CONFIG_BT_RX_STACK_SIZE+0xae>
     392:	42ab      	cmp	r3, r5
     394:	d302      	bcc.n	39c <__udivmoddi4+0xdc>
     396:	4282      	cmp	r2, r0
     398:	f200 80fa 	bhi.w	590 <CONFIG_BT_RX_STACK_SIZE+0x190>
     39c:	1a84      	subs	r4, r0, r2
     39e:	eb65 0503 	sbc.w	r5, r5, r3
     3a2:	2001      	movs	r0, #1
     3a4:	46ac      	mov	ip, r5
     3a6:	2e00      	cmp	r6, #0
     3a8:	d03f      	beq.n	42a <CONFIG_BT_RX_STACK_SIZE+0x2a>
     3aa:	e886 1010 	stmia.w	r6, {r4, ip}
     3ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3b2:	b912      	cbnz	r2, 3ba <__udivmoddi4+0xfa>
     3b4:	2701      	movs	r7, #1
     3b6:	fbb7 f7f2 	udiv	r7, r7, r2
     3ba:	fab7 fe87 	clz	lr, r7
     3be:	f1be 0f00 	cmp.w	lr, #0
     3c2:	d134      	bne.n	42e <CONFIG_BT_RX_STACK_SIZE+0x2e>
     3c4:	1beb      	subs	r3, r5, r7
     3c6:	0c3a      	lsrs	r2, r7, #16
     3c8:	fa1f fc87 	uxth.w	ip, r7
     3cc:	2101      	movs	r1, #1
     3ce:	fbb3 f8f2 	udiv	r8, r3, r2
     3d2:	0c25      	lsrs	r5, r4, #16
     3d4:	fb02 3318 	mls	r3, r2, r8, r3
     3d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     3dc:	fb0c f308 	mul.w	r3, ip, r8
     3e0:	42ab      	cmp	r3, r5
     3e2:	d907      	bls.n	3f4 <__udivmoddi4+0x134>
     3e4:	19ed      	adds	r5, r5, r7
     3e6:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     3ea:	d202      	bcs.n	3f2 <__udivmoddi4+0x132>
     3ec:	42ab      	cmp	r3, r5
     3ee:	f200 80d1 	bhi.w	594 <CONFIG_BT_RX_STACK_SIZE+0x194>
     3f2:	4680      	mov	r8, r0
     3f4:	1aed      	subs	r5, r5, r3
     3f6:	b2a3      	uxth	r3, r4
     3f8:	fbb5 f0f2 	udiv	r0, r5, r2
     3fc:	fb02 5510 	mls	r5, r2, r0, r5
     400:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     404:	fb0c fc00 	mul.w	ip, ip, r0
     408:	45a4      	cmp	ip, r4
     40a:	d907      	bls.n	41c <CONFIG_BT_RX_STACK_SIZE+0x1c>
     40c:	19e4      	adds	r4, r4, r7
     40e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     412:	d202      	bcs.n	41a <CONFIG_BT_RX_STACK_SIZE+0x1a>
     414:	45a4      	cmp	ip, r4
     416:	f200 80b8 	bhi.w	58a <CONFIG_BT_RX_STACK_SIZE+0x18a>
     41a:	4618      	mov	r0, r3
     41c:	eba4 040c 	sub.w	r4, r4, ip
     420:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     424:	e79d      	b.n	362 <__udivmoddi4+0xa2>
     426:	4631      	mov	r1, r6
     428:	4630      	mov	r0, r6
     42a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     42e:	f1ce 0420 	rsb	r4, lr, #32
     432:	fa05 f30e 	lsl.w	r3, r5, lr
     436:	fa07 f70e 	lsl.w	r7, r7, lr
     43a:	fa20 f804 	lsr.w	r8, r0, r4
     43e:	0c3a      	lsrs	r2, r7, #16
     440:	fa25 f404 	lsr.w	r4, r5, r4
     444:	ea48 0803 	orr.w	r8, r8, r3
     448:	fbb4 f1f2 	udiv	r1, r4, r2
     44c:	ea4f 4518 	mov.w	r5, r8, lsr #16
     450:	fb02 4411 	mls	r4, r2, r1, r4
     454:	fa1f fc87 	uxth.w	ip, r7
     458:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
     45c:	fb01 f30c 	mul.w	r3, r1, ip
     460:	42ab      	cmp	r3, r5
     462:	fa00 f40e 	lsl.w	r4, r0, lr
     466:	d909      	bls.n	47c <CONFIG_BT_RX_STACK_SIZE+0x7c>
     468:	19ed      	adds	r5, r5, r7
     46a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
     46e:	f080 808a 	bcs.w	586 <CONFIG_BT_RX_STACK_SIZE+0x186>
     472:	42ab      	cmp	r3, r5
     474:	f240 8087 	bls.w	586 <CONFIG_BT_RX_STACK_SIZE+0x186>
     478:	3902      	subs	r1, #2
     47a:	443d      	add	r5, r7
     47c:	1aeb      	subs	r3, r5, r3
     47e:	fa1f f588 	uxth.w	r5, r8
     482:	fbb3 f0f2 	udiv	r0, r3, r2
     486:	fb02 3310 	mls	r3, r2, r0, r3
     48a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     48e:	fb00 f30c 	mul.w	r3, r0, ip
     492:	42ab      	cmp	r3, r5
     494:	d907      	bls.n	4a6 <CONFIG_BT_RX_STACK_SIZE+0xa6>
     496:	19ed      	adds	r5, r5, r7
     498:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
     49c:	d26f      	bcs.n	57e <CONFIG_BT_RX_STACK_SIZE+0x17e>
     49e:	42ab      	cmp	r3, r5
     4a0:	d96d      	bls.n	57e <CONFIG_BT_RX_STACK_SIZE+0x17e>
     4a2:	3802      	subs	r0, #2
     4a4:	443d      	add	r5, r7
     4a6:	1aeb      	subs	r3, r5, r3
     4a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     4ac:	e78f      	b.n	3ce <__udivmoddi4+0x10e>
     4ae:	f1c1 0720 	rsb	r7, r1, #32
     4b2:	fa22 f807 	lsr.w	r8, r2, r7
     4b6:	408b      	lsls	r3, r1
     4b8:	fa05 f401 	lsl.w	r4, r5, r1
     4bc:	ea48 0303 	orr.w	r3, r8, r3
     4c0:	fa20 fe07 	lsr.w	lr, r0, r7
     4c4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
     4c8:	40fd      	lsrs	r5, r7
     4ca:	ea4e 0e04 	orr.w	lr, lr, r4
     4ce:	fbb5 f9fc 	udiv	r9, r5, ip
     4d2:	ea4f 441e 	mov.w	r4, lr, lsr #16
     4d6:	fb0c 5519 	mls	r5, ip, r9, r5
     4da:	fa1f f883 	uxth.w	r8, r3
     4de:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
     4e2:	fb09 f408 	mul.w	r4, r9, r8
     4e6:	42ac      	cmp	r4, r5
     4e8:	fa02 f201 	lsl.w	r2, r2, r1
     4ec:	fa00 fa01 	lsl.w	sl, r0, r1
     4f0:	d908      	bls.n	504 <CONFIG_BT_RX_STACK_SIZE+0x104>
     4f2:	18ed      	adds	r5, r5, r3
     4f4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     4f8:	d243      	bcs.n	582 <CONFIG_BT_RX_STACK_SIZE+0x182>
     4fa:	42ac      	cmp	r4, r5
     4fc:	d941      	bls.n	582 <CONFIG_BT_RX_STACK_SIZE+0x182>
     4fe:	f1a9 0902 	sub.w	r9, r9, #2
     502:	441d      	add	r5, r3
     504:	1b2d      	subs	r5, r5, r4
     506:	fa1f fe8e 	uxth.w	lr, lr
     50a:	fbb5 f0fc 	udiv	r0, r5, ip
     50e:	fb0c 5510 	mls	r5, ip, r0, r5
     512:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
     516:	fb00 f808 	mul.w	r8, r0, r8
     51a:	45a0      	cmp	r8, r4
     51c:	d907      	bls.n	52e <CONFIG_BT_RX_STACK_SIZE+0x12e>
     51e:	18e4      	adds	r4, r4, r3
     520:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
     524:	d229      	bcs.n	57a <CONFIG_BT_RX_STACK_SIZE+0x17a>
     526:	45a0      	cmp	r8, r4
     528:	d927      	bls.n	57a <CONFIG_BT_RX_STACK_SIZE+0x17a>
     52a:	3802      	subs	r0, #2
     52c:	441c      	add	r4, r3
     52e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     532:	eba4 0408 	sub.w	r4, r4, r8
     536:	fba0 8902 	umull	r8, r9, r0, r2
     53a:	454c      	cmp	r4, r9
     53c:	46c6      	mov	lr, r8
     53e:	464d      	mov	r5, r9
     540:	d315      	bcc.n	56e <CONFIG_BT_RX_STACK_SIZE+0x16e>
     542:	d012      	beq.n	56a <CONFIG_BT_RX_STACK_SIZE+0x16a>
     544:	b156      	cbz	r6, 55c <CONFIG_BT_RX_STACK_SIZE+0x15c>
     546:	ebba 030e 	subs.w	r3, sl, lr
     54a:	eb64 0405 	sbc.w	r4, r4, r5
     54e:	fa04 f707 	lsl.w	r7, r4, r7
     552:	40cb      	lsrs	r3, r1
     554:	431f      	orrs	r7, r3
     556:	40cc      	lsrs	r4, r1
     558:	6037      	str	r7, [r6, #0]
     55a:	6074      	str	r4, [r6, #4]
     55c:	2100      	movs	r1, #0
     55e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     562:	4618      	mov	r0, r3
     564:	e6f8      	b.n	358 <__udivmoddi4+0x98>
     566:	4690      	mov	r8, r2
     568:	e6e0      	b.n	32c <__udivmoddi4+0x6c>
     56a:	45c2      	cmp	sl, r8
     56c:	d2ea      	bcs.n	544 <CONFIG_BT_RX_STACK_SIZE+0x144>
     56e:	ebb8 0e02 	subs.w	lr, r8, r2
     572:	eb69 0503 	sbc.w	r5, r9, r3
     576:	3801      	subs	r0, #1
     578:	e7e4      	b.n	544 <CONFIG_BT_RX_STACK_SIZE+0x144>
     57a:	4628      	mov	r0, r5
     57c:	e7d7      	b.n	52e <CONFIG_BT_RX_STACK_SIZE+0x12e>
     57e:	4640      	mov	r0, r8
     580:	e791      	b.n	4a6 <CONFIG_BT_RX_STACK_SIZE+0xa6>
     582:	4681      	mov	r9, r0
     584:	e7be      	b.n	504 <CONFIG_BT_RX_STACK_SIZE+0x104>
     586:	4601      	mov	r1, r0
     588:	e778      	b.n	47c <CONFIG_BT_RX_STACK_SIZE+0x7c>
     58a:	3802      	subs	r0, #2
     58c:	443c      	add	r4, r7
     58e:	e745      	b.n	41c <CONFIG_BT_RX_STACK_SIZE+0x1c>
     590:	4608      	mov	r0, r1
     592:	e708      	b.n	3a6 <__udivmoddi4+0xe6>
     594:	f1a8 0802 	sub.w	r8, r8, #2
     598:	443d      	add	r5, r7
     59a:	e72b      	b.n	3f4 <__udivmoddi4+0x134>

0000059c <__aeabi_idiv0>:
     59c:	4770      	bx	lr
     59e:	bf00      	nop

000005a0 <strcpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
     5a0:	3901      	subs	r1, #1
	char *dest = d;

	while (*s != '\0') {
     5a2:	4603      	mov	r3, r0
     5a4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
     5a8:	b90a      	cbnz	r2, 5ae <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
     5aa:	701a      	strb	r2, [r3, #0]

	return dest;
}
     5ac:	4770      	bx	lr
		*d = *s;
     5ae:	f803 2b01 	strb.w	r2, [r3], #1
     5b2:	e7f7      	b.n	5a4 <strcpy+0x4>

000005b4 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
     5b4:	b510      	push	{r4, lr}
     5b6:	3901      	subs	r1, #1
	char *dest = d;

	while ((n > 0) && *s != '\0') {
     5b8:	4603      	mov	r3, r0
     5ba:	b13a      	cbz	r2, 5cc <strncpy+0x18>
     5bc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
     5c0:	b92c      	cbnz	r4, 5ce <strncpy+0x1a>
     5c2:	441a      	add	r2, r3
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
     5c4:	f803 4b01 	strb.w	r4, [r3], #1
	while (n > 0) {
     5c8:	4293      	cmp	r3, r2
     5ca:	d1fb      	bne.n	5c4 <strncpy+0x10>
		d++;
		n--;
	}

	return dest;
}
     5cc:	bd10      	pop	{r4, pc}
		*d = *s;
     5ce:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
     5d2:	3a01      	subs	r2, #1
     5d4:	e7f1      	b.n	5ba <strncpy+0x6>

000005d6 <strcmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
     5d6:	3801      	subs	r0, #1
     5d8:	3901      	subs	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
     5da:	f810 3f01 	ldrb.w	r3, [r0, #1]!
     5de:	f811 2f01 	ldrb.w	r2, [r1, #1]!
     5e2:	4293      	cmp	r3, r2
     5e4:	d102      	bne.n	5ec <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x10>
     5e6:	2b00      	cmp	r3, #0
     5e8:	d1f7      	bne.n	5da <strcmp+0x4>
     5ea:	461a      	mov	r2, r3
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
     5ec:	1a98      	subs	r0, r3, r2
     5ee:	4770      	bx	lr

000005f0 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
     5f0:	b570      	push	{r4, r5, r6, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n)
     5f2:	b182      	cbz	r2, 616 <CONFIG_BT_CTLR_COMPANY_ID+0x25>
		return 0;

	while ((--n > 0) && (*c1 == *c2)) {
     5f4:	3a01      	subs	r2, #1
     5f6:	460c      	mov	r4, r1
     5f8:	4603      	mov	r3, r0
     5fa:	d103      	bne.n	604 <CONFIG_BT_CTLR_COMPANY_ID+0x13>
		c1++;
		c2++;
	}

	return *c1 - *c2;
     5fc:	781a      	ldrb	r2, [r3, #0]
     5fe:	7820      	ldrb	r0, [r4, #0]
     600:	1a10      	subs	r0, r2, r0
     602:	bd70      	pop	{r4, r5, r6, pc}
	while ((--n > 0) && (*c1 == *c2)) {
     604:	781e      	ldrb	r6, [r3, #0]
     606:	7825      	ldrb	r5, [r4, #0]
     608:	42ae      	cmp	r6, r5
     60a:	f100 0001 	add.w	r0, r0, #1
     60e:	f101 0101 	add.w	r1, r1, #1
     612:	d0ef      	beq.n	5f4 <CONFIG_BT_CTLR_COMPANY_ID+0x3>
     614:	e7f2      	b.n	5fc <CONFIG_BT_CTLR_COMPANY_ID+0xb>
		return 0;
     616:	4610      	mov	r0, r2
}
     618:	bd70      	pop	{r4, r5, r6, pc}

0000061a <memcpy>:
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
     61a:	ea81 0300 	eor.w	r3, r1, r0
     61e:	f013 0f03 	tst.w	r3, #3
{
     622:	b570      	push	{r4, r5, r6, lr}
     624:	4603      	mov	r3, r0
	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
     626:	d00b      	beq.n	640 <memcpy+0x26>
     628:	3b01      	subs	r3, #1
     62a:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
     62c:	4291      	cmp	r1, r2
     62e:	d11b      	bne.n	668 <memcpy+0x4e>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
     630:	bd70      	pop	{r4, r5, r6, pc}
			if (n == 0) {
     632:	2a00      	cmp	r2, #0
     634:	d0fc      	beq.n	630 <memcpy+0x16>
			*(d_byte++) = *(s_byte++);
     636:	f811 4b01 	ldrb.w	r4, [r1], #1
     63a:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
     63e:	3a01      	subs	r2, #1
		while (((unsigned int)d_byte) & 0x3) {
     640:	079c      	lsls	r4, r3, #30
     642:	d1f6      	bne.n	632 <memcpy+0x18>
     644:	1f1e      	subs	r6, r3, #4
     646:	460d      	mov	r5, r1
     648:	1b54      	subs	r4, r2, r5
     64a:	440c      	add	r4, r1
		while (n >= sizeof(unsigned int)) {
     64c:	2c03      	cmp	r4, #3
     64e:	d806      	bhi.n	65e <memcpy+0x44>
     650:	f022 0403 	bic.w	r4, r2, #3
     654:	4421      	add	r1, r4
     656:	4423      	add	r3, r4
     658:	f002 0203 	and.w	r2, r2, #3
     65c:	e7e4      	b.n	628 <memcpy+0xe>
			*(d_word++) = *(s_word++);
     65e:	f855 4b04 	ldr.w	r4, [r5], #4
     662:	f846 4f04 	str.w	r4, [r6, #4]!
     666:	e7ef      	b.n	648 <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
     668:	f811 4b01 	ldrb.w	r4, [r1], #1
     66c:	f803 4f01 	strb.w	r4, [r3, #1]!
     670:	e7dc      	b.n	62c <memcpy+0x12>

00000672 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
     672:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
     674:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
     676:	4603      	mov	r3, r0

	while (((unsigned int)d_byte) & 0x3) {
     678:	079c      	lsls	r4, r3, #30
     67a:	d111      	bne.n	6a0 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	unsigned int *d_word = (unsigned int *)d_byte;
	unsigned int c_word = (unsigned int)(unsigned char)c;

	c_word |= c_word << 8;
     67c:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
     680:	ea44 4404 	orr.w	r4, r4, r4, lsl #16

	while (n >= sizeof(unsigned int)) {
     684:	461e      	mov	r6, r3
     686:	1b95      	subs	r5, r2, r6
     688:	441d      	add	r5, r3
     68a:	2d03      	cmp	r5, #3
     68c:	d80e      	bhi.n	6ac <memset+0x3a>
     68e:	f022 0403 	bic.w	r4, r2, #3
     692:	4423      	add	r3, r4
     694:	f002 0203 	and.w	r2, r2, #3
     698:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
     69a:	4293      	cmp	r3, r2
     69c:	d109      	bne.n	6b2 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
     69e:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
     6a0:	2a00      	cmp	r2, #0
     6a2:	d0fc      	beq.n	69e <memset+0x2c>
		*(d_byte++) = c_byte;
     6a4:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
     6a8:	3a01      	subs	r2, #1
     6aa:	e7e5      	b.n	678 <memset+0x6>
		*(d_word++) = c_word;
     6ac:	f846 4b04 	str.w	r4, [r6], #4
     6b0:	e7e9      	b.n	686 <memset+0x14>
		*(d_byte++) = c_byte;
     6b2:	f803 1b01 	strb.w	r1, [r3], #1
     6b6:	e7f0      	b.n	69a <memset+0x28>

000006b8 <_stdout_hook_default>:
static int _stdout_hook_default(int c)
{
	(void)(c);  /* Prevent warning about unused argument */

	return EOF;
}
     6b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     6bc:	4770      	bx	lr
	...

000006c0 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
     6c0:	4b01      	ldr	r3, [pc, #4]	; (6c8 <__stdout_hook_install+0x8>)
     6c2:	6018      	str	r0, [r3, #0]
     6c4:	4770      	bx	lr
     6c6:	bf00      	nop
     6c8:	20004cf8 	.word	0x20004cf8

000006cc <bt_ext_ready>:

	printk("Beacon started\n");
}

static void bt_ext_ready(int err)
{
     6cc:	b510      	push	{r4, lr}
	if (err) {
     6ce:	4604      	mov	r4, r0
{
     6d0:	b086      	sub	sp, #24
	if (err) {
     6d2:	b128      	cbz	r0, 6e0 <bt_ext_ready+0x14>
		printk("Bluetooth init failed (err %d)\n", err);
     6d4:	4601      	mov	r1, r0
     6d6:	4810      	ldr	r0, [pc, #64]	; (718 <bt_ext_ready+0x4c>)

	/* Start advertising */
	err = bt_le_ext_adv_start(BT_LE_ADV_NCONN, ad, ARRAY_SIZE(ad),
			      sd, ARRAY_SIZE(sd));
	if (err) {
		printk("Advertising failed to start (err %d)\n", err);
     6d8:	f000 fe1c 	bl	1314 <printk>
		return;
	}

	printk("Beacon started\n");
}
     6dc:	b006      	add	sp, #24
     6de:	bd10      	pop	{r4, pc}
	printk("Bluetooth initialized\n");
     6e0:	480e      	ldr	r0, [pc, #56]	; (71c <bt_ext_ready+0x50>)
     6e2:	f000 fe17 	bl	1314 <printk>
	err = bt_le_ext_adv_start(BT_LE_ADV_NCONN, ad, ARRAY_SIZE(ad),
     6e6:	23a0      	movs	r3, #160	; 0xa0
     6e8:	9403      	str	r4, [sp, #12]
     6ea:	2201      	movs	r2, #1
     6ec:	f8ad 300e 	strh.w	r3, [sp, #14]
     6f0:	23f0      	movs	r3, #240	; 0xf0
     6f2:	9404      	str	r4, [sp, #16]
     6f4:	490a      	ldr	r1, [pc, #40]	; (720 <bt_ext_ready+0x54>)
     6f6:	f8ad 3010 	strh.w	r3, [sp, #16]
     6fa:	9200      	str	r2, [sp, #0]
     6fc:	4b09      	ldr	r3, [pc, #36]	; (724 <bt_ext_ready+0x58>)
     6fe:	9405      	str	r4, [sp, #20]
     700:	a803      	add	r0, sp, #12
     702:	f003 f837 	bl	3774 <bt_le_ext_adv_start>
	if (err) {
     706:	4601      	mov	r1, r0
     708:	b108      	cbz	r0, 70e <bt_ext_ready+0x42>
		printk("Advertising failed to start (err %d)\n", err);
     70a:	4807      	ldr	r0, [pc, #28]	; (728 <bt_ext_ready+0x5c>)
     70c:	e7e4      	b.n	6d8 <bt_ext_ready+0xc>
	printk("Beacon started\n");
     70e:	4807      	ldr	r0, [pc, #28]	; (72c <bt_ext_ready+0x60>)
     710:	f000 fe00 	bl	1314 <printk>
     714:	e7e2      	b.n	6dc <bt_ext_ready+0x10>
     716:	bf00      	nop
     718:	0000cc18 	.word	0x0000cc18
     71c:	0000cc38 	.word	0x0000cc38
     720:	0000cc10 	.word	0x0000cc10
     724:	0000cc9c 	.word	0x0000cc9c
     728:	0000cc4f 	.word	0x0000cc4f
     72c:	0000cc75 	.word	0x0000cc75

00000730 <main>:

void main(void)
{
     730:	b508      	push	{r3, lr}
	int err;

	printk("Starting Beacon Demo\n");
     732:	4807      	ldr	r0, [pc, #28]	; (750 <main+0x20>)
     734:	f000 fdee 	bl	1314 <printk>

	/* Initialize the Bluetooth Subsystem */
	err = bt_enable(bt_ext_ready);
     738:	4806      	ldr	r0, [pc, #24]	; (754 <main+0x24>)
     73a:	f002 ffb7 	bl	36ac <bt_enable>
	if (err) {
     73e:	4601      	mov	r1, r0
     740:	b120      	cbz	r0, 74c <main+0x1c>
		printk("Bluetooth init failed (err %d)\n", err);
     742:	4805      	ldr	r0, [pc, #20]	; (758 <main+0x28>)
	}
     744:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		printk("Bluetooth init failed (err %d)\n", err);
     748:	f000 bde4 	b.w	1314 <printk>
     74c:	bd08      	pop	{r3, pc}
     74e:	bf00      	nop
     750:	0000cc85 	.word	0x0000cc85
     754:	000006cd 	.word	0x000006cd
     758:	0000cc18 	.word	0x0000cc18

0000075c <errata_103>:
	return false;
}

static bool errata_136_nrf52840(void)
{
	if ((*(u32_t *)0x10000130ul == 0x8ul) &&
     75c:	4b05      	ldr	r3, [pc, #20]	; (774 <errata_103+0x18>)
     75e:	681b      	ldr	r3, [r3, #0]
     760:	2b08      	cmp	r3, #8
	    (*(u32_t *)0x10000134ul == 0x0ul)) {
     762:	bf01      	itttt	eq
     764:	4b04      	ldreq	r3, [pc, #16]	; (778 <errata_103+0x1c>)
	if ((*(u32_t *)0x10000130ul == 0x8ul) &&
     766:	6818      	ldreq	r0, [r3, #0]
     768:	fab0 f080 	clzeq	r0, r0
     76c:	0940      	lsreq	r0, r0, #5
		return true;
	}

	return false;
     76e:	bf18      	it	ne
     770:	2000      	movne	r0, #0
}
     772:	4770      	bx	lr
     774:	10000130 	.word	0x10000130
     778:	10000134 	.word	0x10000134

0000077c <nordicsemi_nrf52_init>:
{
	SystemCoreClock = __SYSTEM_CLOCK_64M;
}

static int nordicsemi_nrf52_init(struct device *arg)
{
     77c:	b508      	push	{r3, lr}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     77e:	f04f 0320 	mov.w	r3, #32
     782:	f3ef 8111 	mrs	r1, BASEPRI
     786:	f383 8811 	msr	BASEPRI, r3
	if (errata_36()) {
     78a:	f7ff ffe7 	bl	75c <errata_103>
     78e:	b140      	cbz	r0, 7a2 <nordicsemi_nrf52_init+0x26>
		NRF_CLOCK->EVENTS_DONE = 0;
     790:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     794:	2200      	movs	r2, #0
     796:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		NRF_CLOCK->EVENTS_CTTO = 0;
     79a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
		NRF_CLOCK->CTIV = 0;
     79e:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
	if (errata_98()) {
     7a2:	f7ff ffdb 	bl	75c <errata_103>
     7a6:	b110      	cbz	r0, 7ae <nordicsemi_nrf52_init+0x32>
		*(volatile u32_t *)0x4000568Cul = 0x00038148ul;
     7a8:	4b38      	ldr	r3, [pc, #224]	; (88c <CONFIG_ISR_STACK_SIZE+0x8c>)
     7aa:	4a39      	ldr	r2, [pc, #228]	; (890 <CONFIG_ISR_STACK_SIZE+0x90>)
     7ac:	601a      	str	r2, [r3, #0]
	if (errata_103()) {
     7ae:	f7ff ffd5 	bl	75c <errata_103>
     7b2:	b118      	cbz	r0, 7bc <nordicsemi_nrf52_init+0x40>
		NRF_CCM->MAXPACKETSIZE = 0xFBul;
     7b4:	4b37      	ldr	r3, [pc, #220]	; (894 <CONFIG_ISR_STACK_SIZE+0x94>)
     7b6:	22fb      	movs	r2, #251	; 0xfb
     7b8:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	if (errata_115()) {
     7bc:	f7ff ffce 	bl	75c <errata_103>
     7c0:	b148      	cbz	r0, 7d6 <nordicsemi_nrf52_init+0x5a>
			(*(volatile u32_t *) 0x40000EE4 & 0xFFFFFFF0) |
     7c2:	4835      	ldr	r0, [pc, #212]	; (898 <CONFIG_ISR_STACK_SIZE+0x98>)
			(*(u32_t *)0x10000258 & 0x0000000F);
     7c4:	4b35      	ldr	r3, [pc, #212]	; (89c <CONFIG_ISR_STACK_SIZE+0x9c>)
			(*(volatile u32_t *) 0x40000EE4 & 0xFFFFFFF0) |
     7c6:	6802      	ldr	r2, [r0, #0]
			(*(u32_t *)0x10000258 & 0x0000000F);
     7c8:	681b      	ldr	r3, [r3, #0]
			(*(volatile u32_t *) 0x40000EE4 & 0xFFFFFFF0) |
     7ca:	f022 020f 	bic.w	r2, r2, #15
			(*(u32_t *)0x10000258 & 0x0000000F);
     7ce:	f003 030f 	and.w	r3, r3, #15
			(*(volatile u32_t *) 0x40000EE4 & 0xFFFFFFF0) |
     7d2:	4313      	orrs	r3, r2
		*(volatile u32_t *)0x40000EE4 =
     7d4:	6003      	str	r3, [r0, #0]
	if (errata_120()) {
     7d6:	f7ff ffc1 	bl	75c <errata_103>
     7da:	b118      	cbz	r0, 7e4 <nordicsemi_nrf52_init+0x68>
		*(volatile u32_t *)0x40029640ul = 0x200ul;
     7dc:	4b30      	ldr	r3, [pc, #192]	; (8a0 <CONFIG_ISR_STACK_SIZE+0xa0>)
     7de:	f44f 7200 	mov.w	r2, #512	; 0x200
     7e2:	601a      	str	r2, [r3, #0]
	if (errata_136_nrf52840()) {
     7e4:	f7ff ffba 	bl	75c <errata_103>
     7e8:	b148      	cbz	r0, 7fe <nordicsemi_nrf52_init+0x82>
		if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk) {
     7ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     7ee:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     7f2:	07d2      	lsls	r2, r2, #31
			NRF_POWER->RESETREAS = ~POWER_RESETREAS_RESETPIN_Msk;
     7f4:	bf44      	itt	mi
     7f6:	f06f 0201 	mvnmi.w	r2, #1
     7fa:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
	if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
     7fe:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     802:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
     806:	2a00      	cmp	r2, #0
     808:	db03      	blt.n	812 <CONFIG_ISR_STACK_SIZE+0x12>
	    ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) !=
     80a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
	     (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
     80e:	2b00      	cmp	r3, #0
     810:	da2f      	bge.n	872 <CONFIG_ISR_STACK_SIZE+0x72>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
     812:	4b24      	ldr	r3, [pc, #144]	; (8a4 <CONFIG_ISR_STACK_SIZE+0xa4>)
     814:	2201      	movs	r2, #1
     816:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     81a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     81e:	2a00      	cmp	r2, #0
     820:	d0fb      	beq.n	81a <CONFIG_ISR_STACK_SIZE+0x1a>
		NRF_UICR->PSELRESET[0] = 18;
     822:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
     826:	2112      	movs	r1, #18
     828:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     82c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     830:	2a00      	cmp	r2, #0
     832:	d0fb      	beq.n	82c <CONFIG_ISR_STACK_SIZE+0x2c>
		NRF_UICR->PSELRESET[1] = 18;
     834:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     838:	2212      	movs	r2, #18
     83a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     83e:	4b19      	ldr	r3, [pc, #100]	; (8a4 <CONFIG_ISR_STACK_SIZE+0xa4>)
     840:	461a      	mov	r2, r3
     842:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
     846:	2900      	cmp	r1, #0
     848:	d0fb      	beq.n	842 <CONFIG_ISR_STACK_SIZE+0x42>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
     84a:	2100      	movs	r1, #0
     84c:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     850:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
     854:	2b00      	cmp	r3, #0
     856:	d0fb      	beq.n	850 <CONFIG_ISR_STACK_SIZE+0x50>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     858:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     85c:	4912      	ldr	r1, [pc, #72]	; (8a8 <CONFIG_ISR_STACK_SIZE+0xa8>)
     85e:	4b13      	ldr	r3, [pc, #76]	; (8ac <CONFIG_ISR_STACK_SIZE+0xac>)
     860:	68ca      	ldr	r2, [r1, #12]
     862:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
     866:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     868:	60cb      	str	r3, [r1, #12]
     86a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     86e:	bf00      	nop
     870:	e7fd      	b.n	86e <CONFIG_ISR_STACK_SIZE+0x6e>
static ALWAYS_INLINE void _ClearFaults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
     872:	4b0d      	ldr	r3, [pc, #52]	; (8a8 <CONFIG_ISR_STACK_SIZE+0xa8>)
     874:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     878:	629a      	str	r2, [r3, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
     87a:	62da      	str	r2, [r3, #44]	; 0x2c
	SystemCoreClock = __SYSTEM_CLOCK_64M;
     87c:	4b0c      	ldr	r3, [pc, #48]	; (8b0 <CONFIG_ISR_STACK_SIZE+0xb0>)
     87e:	4a0d      	ldr	r2, [pc, #52]	; (8b4 <CONFIG_ISR_STACK_SIZE+0xb4>)
     880:	601a      	str	r2, [r3, #0]
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
     882:	f381 8811 	msr	BASEPRI, r1
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     886:	2000      	movs	r0, #0
     888:	bd08      	pop	{r3, pc}
     88a:	bf00      	nop
     88c:	4000568c 	.word	0x4000568c
     890:	00038148 	.word	0x00038148
     894:	4000f000 	.word	0x4000f000
     898:	40000ee4 	.word	0x40000ee4
     89c:	10000258 	.word	0x10000258
     8a0:	40029640 	.word	0x40029640
     8a4:	4001e000 	.word	0x4001e000
     8a8:	e000ed00 	.word	0xe000ed00
     8ac:	05fa0004 	.word	0x05fa0004
     8b0:	20004e34 	.word	0x20004e34
     8b4:	03d09000 	.word	0x03d09000

000008b8 <_ExcExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
     8b8:	4808      	ldr	r0, [pc, #32]	; (8dc <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
     8ba:	6881      	ldr	r1, [r0, #8]

    /*
     * Non-preemptible thread ? Do not schedule (see explanation of
     * preempt field in kernel_struct.h).
     */
    ldrh r2, [r1, #_thread_offset_to_preempt]
     8bc:	894a      	ldrh	r2, [r1, #10]
    cmp r2, #_PREEMPT_THRESHOLD
     8be:	2a7f      	cmp	r2, #127	; 0x7f
    bhi _EXIT_EXC
     8c0:	d80b      	bhi.n	8da <_EXIT_EXC>

    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
     8c2:	69c0      	ldr	r0, [r0, #28]
    cmp r0, r1
     8c4:	4288      	cmp	r0, r1
    beq _EXIT_EXC
     8c6:	d008      	beq.n	8da <_EXIT_EXC>

#ifdef CONFIG_TIMESLICING
    push {lr}
     8c8:	b500      	push	{lr}
    bl _update_time_slice_before_swap
     8ca:	f00b fbdb 	bl	c084 <_update_time_slice_before_swap>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    pop {r0}
    mov lr, r0
#else
    pop {lr}
     8ce:	f85d eb04 	ldr.w	lr, [sp], #4
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TIMESLICING */

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
     8d2:	4903      	ldr	r1, [pc, #12]	; (8e0 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
     8d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
     8d8:	600a      	str	r2, [r1, #0]

000008da <_EXIT_EXC>:
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

    bx lr
     8da:	4770      	bx	lr
    ldr r0, =_kernel
     8dc:	200029cc 	.word	0x200029cc
    ldr r1, =_SCS_ICSR
     8e0:	e000ed04 	.word	0xe000ed04

000008e4 <_IntLibInit>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     8e4:	4804      	ldr	r0, [pc, #16]	; (8f8 <_IntLibInit+0x14>)
 * @return N/A
 */

void _IntLibInit(void)
{
	int irq = 0;
     8e6:	2300      	movs	r3, #0
     8e8:	2120      	movs	r1, #32
     8ea:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
     8ec:	3301      	adds	r3, #1
     8ee:	2b2e      	cmp	r3, #46	; 0x2e
     8f0:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
     8f4:	d1f9      	bne.n	8ea <_IntLibInit+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
     8f6:	4770      	bx	lr
     8f8:	e000e100 	.word	0xe000e100

000008fc <__swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
     8fc:	4a08      	ldr	r2, [pc, #32]	; (920 <__swap+0x24>)
	_current->arch.swap_return_value = _k_neg_eagain;
     8fe:	4909      	ldr	r1, [pc, #36]	; (924 <__swap+0x28>)
	_current->arch.basepri = key;
     900:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
     902:	6809      	ldr	r1, [r1, #0]
     904:	6659      	str	r1, [r3, #100]	; 0x64

	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
     906:	4908      	ldr	r1, [pc, #32]	; (928 <__swap+0x2c>)
	_current->arch.basepri = key;
     908:	6618      	str	r0, [r3, #96]	; 0x60
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
     90a:	684b      	ldr	r3, [r1, #4]
     90c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
     910:	604b      	str	r3, [r1, #4]
     912:	2300      	movs	r3, #0
     914:	f383 8811 	msr	BASEPRI, r3

	/* clear mask or enable all irqs to take a pendsv */
	irq_unlock(0);

	return _current->arch.swap_return_value;
     918:	6893      	ldr	r3, [r2, #8]
}
     91a:	6e58      	ldr	r0, [r3, #100]	; 0x64
     91c:	4770      	bx	lr
     91e:	bf00      	nop
     920:	200029cc 	.word	0x200029cc
     924:	0000eed4 	.word	0x0000eed4
     928:	e000ed00 	.word	0xe000ed00

0000092c <__pendsv>:
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_KERNEL_EVENT_LOGGER_CONTEXT_SWITCH  */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
     92c:	490e      	ldr	r1, [pc, #56]	; (968 <__pendsv+0x3c>)
    ldr r2, [r1, #_kernel_offset_to_current]
     92e:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
     930:	2028      	movs	r0, #40	; 0x28
    add r0, r2
     932:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
     934:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
     938:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
     93c:	4f0b      	ldr	r7, [pc, #44]	; (96c <__pendsv+0x40>)
    ldr v3, =_SCS_ICSR_UNPENDSV
     93e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
     942:	2020      	movs	r0, #32
    msr BASEPRI, r0
     944:	f380 8811 	msr	BASEPRI, r0
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, _kernel_offset_to_ready_q_cache]
     948:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
     94a:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
     94c:	603e      	str	r6, [r7, #0]

    /* Restore previous interrupt disable state (irq_lock key) */
    ldr r0, [r2, #_thread_offset_to_basepri]
     94e:	6e10      	ldr	r0, [r2, #96]	; 0x60
    movs.n r3, #0
     950:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
     952:	6613      	str	r3, [r2, #96]	; 0x60
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
     954:	f380 8811 	msr	BASEPRI, r0
    blx configure_mpu_user_context
    pop {r2, lr}
#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
     958:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
     95c:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    msr PSP, ip
     960:	f38c 8809 	msr	PSP, ip
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
    ldm sp!,{r0-r3} /* Load back regs ro to r4 */
#endif /* CONFIG_EXECUTION_BENCHMARKING */

    /* exc return */
    bx lr
     964:	4770      	bx	lr
     966:	0000      	.short	0x0000
    ldr r1, =_kernel
     968:	200029cc 	.word	0x200029cc
    ldr v4, =_SCS_ICSR
     96c:	e000ed04 	.word	0xe000ed04

00000970 <__svc>:
 *
 * @return N/A
 */

SECTION_FUNC(TEXT, __svc)
    tst lr, #0x4    /* did we come from thread mode ? */
     970:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
     974:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
     976:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
     97a:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
     97e:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read  encoding */
    ldrh r1, [r1, #-2]
     980:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 2: kernel panic or oops (software generated fatal exception)
    * 3: System call
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
     984:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    tst r2, #0x1
    bne _oops

    cmp r1, #0
#endif
    beq _context_switch
     988:	d001      	beq.n	98e <_context_switch>

    cmp r1, #2
     98a:	2902      	cmp	r1, #2
    beq _oops
     98c:	d007      	beq.n	99e <_oops>

0000098e <_context_switch>:
    /*
     * Unlock interrupts:
     * - in a SVC call, so protected against context switches
     * - allow PendSV, since it's running at prio 0xff
     */
    eors.n r0, r0
     98e:	4040      	eors	r0, r0
    msr BASEPRI, r0
     990:	f380 8811 	msr	BASEPRI, r0

     /* set PENDSV bit, pending the PendSV exception */
    ldr r1, =_SCS_ICSR
     994:	4904      	ldr	r1, [pc, #16]	; (9a8 <_oops+0xa>)
    ldr r2, =_SCS_ICSR_PENDSV
     996:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1, #0]
     99a:	600a      	str	r2, [r1, #0]

    /* handler mode exit, to PendSV */
    bx lr
     99c:	4770      	bx	lr

0000099e <_oops>:

_oops:
    push {lr}
     99e:	b500      	push	{lr}
    blx _do_kernel_oops
     9a0:	f000 fa2c 	bl	dfc <_do_kernel_oops>
    pop {pc}
     9a4:	bd00      	pop	{pc}
     9a6:	0000      	.short	0x0000
    ldr r1, =_SCS_ICSR
     9a8:	e000ed04 	.word	0xe000ed04

000009ac <_FaultThreadShow.isra.2>:
 *
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _FaultThreadShow(const NANO_ESF *esf)
     9ac:	b510      	push	{r4, lr}
     9ae:	4604      	mov	r4, r0

K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_WAKEUP, k_wakeup, k_tid_t, thread);

K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
     9b0:	f00b fb3e 	bl	c030 <_impl_k_current_get>
{
	PR_EXC("  Executing thread ID (thread): %p\n"
     9b4:	6822      	ldr	r2, [r4, #0]
     9b6:	4601      	mov	r1, r0
	       "  Faulting instruction address:  0x%x\n",
	       k_current_get(), esf->pc);
}
     9b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PR_EXC("  Executing thread ID (thread): %p\n"
     9bc:	4801      	ldr	r0, [pc, #4]	; (9c4 <_FaultThreadShow.isra.2+0x18>)
     9be:	f000 bca9 	b.w	1314 <printk>
     9c2:	bf00      	nop
     9c4:	0000ce15 	.word	0x0000ce15

000009c8 <_UsageFault>:
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _UsageFault(const NANO_ESF *esf)
{
     9c8:	b510      	push	{r4, lr}
     9ca:	4604      	mov	r4, r0
	PR_EXC("***** USAGE FAULT *****\n");
     9cc:	481a      	ldr	r0, [pc, #104]	; (a38 <_UsageFault+0x70>)
     9ce:	f000 fca1 	bl	1314 <printk>

	_FaultThreadShow(esf);
     9d2:	f104 0018 	add.w	r0, r4, #24

	/* bits are sticky: they stack and must be reset */
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
     9d6:	4c19      	ldr	r4, [pc, #100]	; (a3c <_UsageFault+0x74>)
	_FaultThreadShow(esf);
     9d8:	f7ff ffe8 	bl	9ac <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
     9dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     9de:	019a      	lsls	r2, r3, #6
     9e0:	d502      	bpl.n	9e8 <_UsageFault+0x20>
		PR_EXC("  Division by zero\n");
     9e2:	4817      	ldr	r0, [pc, #92]	; (a40 <_UsageFault+0x78>)
     9e4:	f000 fc96 	bl	1314 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) {
     9e8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     9ea:	01db      	lsls	r3, r3, #7
     9ec:	d502      	bpl.n	9f4 <_UsageFault+0x2c>
		PR_EXC("  Unaligned memory access\n");
     9ee:	4815      	ldr	r0, [pc, #84]	; (a44 <_UsageFault+0x7c>)
     9f0:	f000 fc90 	bl	1314 <printk>
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if (SCB->CFSR & SCB_CFSR_STKOF_Msk) {
		PR_EXC("  Stack overflow\n");
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if (SCB->CFSR & SCB_CFSR_NOCP_Msk) {
     9f4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     9f6:	0318      	lsls	r0, r3, #12
     9f8:	d502      	bpl.n	a00 <_UsageFault+0x38>
		PR_EXC("  No coprocessor instructions\n");
     9fa:	4813      	ldr	r0, [pc, #76]	; (a48 <_UsageFault+0x80>)
     9fc:	f000 fc8a 	bl	1314 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVPC_Msk) {
     a00:	4c0e      	ldr	r4, [pc, #56]	; (a3c <_UsageFault+0x74>)
     a02:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     a04:	0359      	lsls	r1, r3, #13
     a06:	d502      	bpl.n	a0e <_UsageFault+0x46>
		PR_EXC("  Illegal load of EXC_RETURN into PC\n");
     a08:	4810      	ldr	r0, [pc, #64]	; (a4c <_UsageFault+0x84>)
     a0a:	f000 fc83 	bl	1314 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVSTATE_Msk) {
     a0e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     a10:	039a      	lsls	r2, r3, #14
     a12:	d502      	bpl.n	a1a <_UsageFault+0x52>
		PR_EXC("  Illegal use of the EPSR\n");
     a14:	480e      	ldr	r0, [pc, #56]	; (a50 <_UsageFault+0x88>)
     a16:	f000 fc7d 	bl	1314 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) {
     a1a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     a1c:	03db      	lsls	r3, r3, #15
     a1e:	d502      	bpl.n	a26 <_UsageFault+0x5e>
		PR_EXC("  Attempt to execute undefined instruction\n");
     a20:	480c      	ldr	r0, [pc, #48]	; (a54 <_UsageFault+0x8c>)
     a22:	f000 fc77 	bl	1314 <printk>
	}

	/* clear USFR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
     a26:	4a05      	ldr	r2, [pc, #20]	; (a3c <_UsageFault+0x74>)
     a28:	6a93      	ldr	r3, [r2, #40]	; 0x28
     a2a:	ea6f 4303 	mvn.w	r3, r3, lsl #16
     a2e:	ea6f 4313 	mvn.w	r3, r3, lsr #16
     a32:	6293      	str	r3, [r2, #40]	; 0x28
     a34:	bd10      	pop	{r4, pc}
     a36:	bf00      	nop
     a38:	0000cf16 	.word	0x0000cf16
     a3c:	e000ed00 	.word	0xe000ed00
     a40:	0000cf2f 	.word	0x0000cf2f
     a44:	0000cf43 	.word	0x0000cf43
     a48:	0000cf5e 	.word	0x0000cf5e
     a4c:	0000cf7d 	.word	0x0000cf7d
     a50:	0000cfa3 	.word	0x0000cfa3
     a54:	0000cfbe 	.word	0x0000cfbe

00000a58 <_MpuFault>:
{
     a58:	b538      	push	{r3, r4, r5, lr}
     a5a:	4604      	mov	r4, r0
	PR_EXC("***** MPU FAULT *****\n");
     a5c:	4819      	ldr	r0, [pc, #100]	; (ac4 <_MpuFault+0x6c>)
{
     a5e:	460d      	mov	r5, r1
	PR_EXC("***** MPU FAULT *****\n");
     a60:	f000 fc58 	bl	1314 <printk>
	_FaultThreadShow(esf);
     a64:	f104 0018 	add.w	r0, r4, #24
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
     a68:	4c17      	ldr	r4, [pc, #92]	; (ac8 <_MpuFault+0x70>)
	_FaultThreadShow(esf);
     a6a:	f7ff ff9f 	bl	9ac <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
     a6e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     a70:	06d9      	lsls	r1, r3, #27
     a72:	d504      	bpl.n	a7e <_MpuFault+0x26>
		PR_EXC("  Stacking error\n");
     a74:	4815      	ldr	r0, [pc, #84]	; (acc <_MpuFault+0x74>)
}
     a76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		PR_EXC("  Floating-point lazy state preservation error\n");
     a7a:	f000 bc4b 	b.w	1314 <printk>
	} else if (SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) {
     a7e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     a80:	071a      	lsls	r2, r3, #28
     a82:	d501      	bpl.n	a88 <_MpuFault+0x30>
		PR_EXC("  Unstacking error\n");
     a84:	4812      	ldr	r0, [pc, #72]	; (ad0 <_MpuFault+0x78>)
     a86:	e7f6      	b.n	a76 <_MpuFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) {
     a88:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     a8a:	079b      	lsls	r3, r3, #30
     a8c:	d50f      	bpl.n	aae <_MpuFault+0x56>
		PR_EXC("  Data Access Violation\n");
     a8e:	4811      	ldr	r0, [pc, #68]	; (ad4 <_MpuFault+0x7c>)
     a90:	f000 fc40 	bl	1314 <printk>
		STORE_xFAR(mmfar, SCB->MMFAR);
     a94:	6b61      	ldr	r1, [r4, #52]	; 0x34
		if (SCB->CFSR & SCB_CFSR_MMARVALID_Msk) {
     a96:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     a98:	0618      	lsls	r0, r3, #24
     a9a:	d512      	bpl.n	ac2 <_MpuFault+0x6a>
			PR_EXC("  Address: 0x%x\n", mmfar);
     a9c:	480e      	ldr	r0, [pc, #56]	; (ad8 <_MpuFault+0x80>)
     a9e:	f000 fc39 	bl	1314 <printk>
			if (fromHardFault) {
     aa2:	b175      	cbz	r5, ac2 <_MpuFault+0x6a>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
     aa4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     aa6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
     aaa:	62a3      	str	r3, [r4, #40]	; 0x28
     aac:	bd38      	pop	{r3, r4, r5, pc}
	} else if (SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) {
     aae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     ab0:	07da      	lsls	r2, r3, #31
     ab2:	d501      	bpl.n	ab8 <_MpuFault+0x60>
		PR_EXC("  Instruction Access Violation\n");
     ab4:	4809      	ldr	r0, [pc, #36]	; (adc <_MpuFault+0x84>)
     ab6:	e7de      	b.n	a76 <_MpuFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_MLSPERR_Msk) {
     ab8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     aba:	069b      	lsls	r3, r3, #26
     abc:	d501      	bpl.n	ac2 <_MpuFault+0x6a>
		PR_EXC("  Floating-point lazy state preservation error\n");
     abe:	4808      	ldr	r0, [pc, #32]	; (ae0 <_MpuFault+0x88>)
     ac0:	e7d9      	b.n	a76 <_MpuFault+0x1e>
     ac2:	bd38      	pop	{r3, r4, r5, pc}
     ac4:	0000ce5f 	.word	0x0000ce5f
     ac8:	e000ed00 	.word	0xe000ed00
     acc:	0000ce76 	.word	0x0000ce76
     ad0:	0000ce88 	.word	0x0000ce88
     ad4:	0000ce9c 	.word	0x0000ce9c
     ad8:	0000ceb5 	.word	0x0000ceb5
     adc:	0000cec6 	.word	0x0000cec6
     ae0:	0000cee6 	.word	0x0000cee6

00000ae4 <_BusFault>:
{
     ae4:	b538      	push	{r3, r4, r5, lr}
     ae6:	4604      	mov	r4, r0
	PR_EXC("***** BUS FAULT *****\n");
     ae8:	481d      	ldr	r0, [pc, #116]	; (b60 <_BusFault+0x7c>)
{
     aea:	460d      	mov	r5, r1
	PR_EXC("***** BUS FAULT *****\n");
     aec:	f000 fc12 	bl	1314 <printk>
	_FaultThreadShow(esf);
     af0:	f104 0018 	add.w	r0, r4, #24
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
     af4:	4c1b      	ldr	r4, [pc, #108]	; (b64 <_BusFault+0x80>)
	_FaultThreadShow(esf);
     af6:	f7ff ff59 	bl	9ac <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
     afa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     afc:	04d8      	lsls	r0, r3, #19
     afe:	d504      	bpl.n	b0a <_BusFault+0x26>
		PR_EXC("  Stacking error\n");
     b00:	4819      	ldr	r0, [pc, #100]	; (b68 <_BusFault+0x84>)
}
     b02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		PR_EXC("  Floating-point lazy state preservation error\n");
     b06:	f000 bc05 	b.w	1314 <printk>
	} else if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
     b0a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     b0c:	0519      	lsls	r1, r3, #20
     b0e:	d501      	bpl.n	b14 <_BusFault+0x30>
		PR_EXC("  Unstacking error\n");
     b10:	4816      	ldr	r0, [pc, #88]	; (b6c <_BusFault+0x88>)
     b12:	e7f6      	b.n	b02 <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
     b14:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     b16:	059a      	lsls	r2, r3, #22
     b18:	d514      	bpl.n	b44 <_BusFault+0x60>
		PR_EXC("  Precise data bus error\n");
     b1a:	4815      	ldr	r0, [pc, #84]	; (b70 <_BusFault+0x8c>)
     b1c:	f000 fbfa 	bl	1314 <printk>
		STORE_xFAR(bfar, SCB->BFAR);
     b20:	6ba1      	ldr	r1, [r4, #56]	; 0x38
		if (SCB->CFSR & SCB_CFSR_BFARVALID_Msk) {
     b22:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     b24:	041b      	lsls	r3, r3, #16
     b26:	d507      	bpl.n	b38 <_BusFault+0x54>
			PR_EXC("  Address: 0x%x\n", bfar);
     b28:	4812      	ldr	r0, [pc, #72]	; (b74 <_BusFault+0x90>)
     b2a:	f000 fbf3 	bl	1314 <printk>
			if (fromHardFault) {
     b2e:	b11d      	cbz	r5, b38 <_BusFault+0x54>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
     b30:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     b32:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
     b36:	62a3      	str	r3, [r4, #40]	; 0x28
		if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
     b38:	4b0a      	ldr	r3, [pc, #40]	; (b64 <_BusFault+0x80>)
     b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     b3c:	0558      	lsls	r0, r3, #21
     b3e:	d50e      	bpl.n	b5e <_BusFault+0x7a>
			PR_EXC("  Imprecise data bus error\n");
     b40:	480d      	ldr	r0, [pc, #52]	; (b78 <_BusFault+0x94>)
     b42:	e7de      	b.n	b02 <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
     b44:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     b46:	0559      	lsls	r1, r3, #21
     b48:	d4fa      	bmi.n	b40 <_BusFault+0x5c>
	} else if (SCB->CFSR & SCB_CFSR_IBUSERR_Msk) {
     b4a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     b4c:	05da      	lsls	r2, r3, #23
     b4e:	d501      	bpl.n	b54 <_BusFault+0x70>
		PR_EXC("  Instruction bus error\n");
     b50:	480a      	ldr	r0, [pc, #40]	; (b7c <_BusFault+0x98>)
     b52:	e7d6      	b.n	b02 <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
     b54:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     b56:	049b      	lsls	r3, r3, #18
     b58:	d501      	bpl.n	b5e <_BusFault+0x7a>
		PR_EXC("  Floating-point lazy state preservation error\n");
     b5a:	4809      	ldr	r0, [pc, #36]	; (b80 <_BusFault+0x9c>)
     b5c:	e7d1      	b.n	b02 <_BusFault+0x1e>
     b5e:	bd38      	pop	{r3, r4, r5, pc}
     b60:	0000ccdc 	.word	0x0000ccdc
     b64:	e000ed00 	.word	0xe000ed00
     b68:	0000ce76 	.word	0x0000ce76
     b6c:	0000ce88 	.word	0x0000ce88
     b70:	0000ccf3 	.word	0x0000ccf3
     b74:	0000ceb5 	.word	0x0000ceb5
     b78:	0000cd0d 	.word	0x0000cd0d
     b7c:	0000cd29 	.word	0x0000cd29
     b80:	0000cee6 	.word	0x0000cee6

00000b84 <_Fault>:
 *
 * @param esf ESF on the stack, either MSP or PSP depending at what processor
 *            state the exception was taken.
 */
void _Fault(const NANO_ESF *esf)
{
     b84:	b538      	push	{r3, r4, r5, lr}
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
     b86:	4d27      	ldr	r5, [pc, #156]	; (c24 <_Fault+0xa0>)
     b88:	686b      	ldr	r3, [r5, #4]
     b8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
	switch (fault) {
     b8e:	1eda      	subs	r2, r3, #3
{
     b90:	4604      	mov	r4, r0
	switch (fault) {
     b92:	2a09      	cmp	r2, #9
     b94:	d83a      	bhi.n	c0c <_Fault+0x88>
     b96:	e8df f002 	tbb	[pc, r2]
     b9a:	3305      	.short	0x3305
     b9c:	39392f35 	.word	0x39392f35
     ba0:	37393939 	.word	0x37393939
	PR_EXC("***** HARD FAULT *****\n");
     ba4:	4820      	ldr	r0, [pc, #128]	; (c28 <_Fault+0xa4>)
     ba6:	f000 fbb5 	bl	1314 <printk>
	if (SCB->HFSR & SCB_HFSR_VECTTBL_Msk) {
     baa:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
     bac:	079a      	lsls	r2, r3, #30
     bae:	d503      	bpl.n	bb8 <_Fault+0x34>
		PR_EXC("  Bus fault on vector table read\n");
     bb0:	481e      	ldr	r0, [pc, #120]	; (c2c <_Fault+0xa8>)
	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
     bb2:	f000 fbaf 	bl	1314 <printk>
     bb6:	e00c      	b.n	bd2 <_Fault+0x4e>
	} else if (SCB->HFSR & SCB_HFSR_FORCED_Msk) {
     bb8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
     bba:	005b      	lsls	r3, r3, #1
     bbc:	d509      	bpl.n	bd2 <_Fault+0x4e>
		PR_EXC("  Fault escalation (see below)\n");
     bbe:	481c      	ldr	r0, [pc, #112]	; (c30 <_Fault+0xac>)
     bc0:	f000 fba8 	bl	1314 <printk>
		if (SCB_MMFSR) {
     bc4:	4b1b      	ldr	r3, [pc, #108]	; (c34 <_Fault+0xb0>)
     bc6:	781b      	ldrb	r3, [r3, #0]
     bc8:	b14b      	cbz	r3, bde <_Fault+0x5a>
			_MpuFault(esf, 1);
     bca:	2101      	movs	r1, #1
		_MpuFault(esf, 0);
     bcc:	4620      	mov	r0, r4
     bce:	f7ff ff43 	bl	a58 <_MpuFault>

	FAULT_DUMP(esf, fault);

	_SysFatalErrorHandler(_NANO_ERR_HW_EXCEPTION, esf);
     bd2:	4621      	mov	r1, r4
     bd4:	2000      	movs	r0, #0
}
     bd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(_NANO_ERR_HW_EXCEPTION, esf);
     bda:	f000 b913 	b.w	e04 <_SysFatalErrorHandler>
		} else if (SCB_BFSR) {
     bde:	4b16      	ldr	r3, [pc, #88]	; (c38 <_Fault+0xb4>)
     be0:	781b      	ldrb	r3, [r3, #0]
     be2:	b123      	cbz	r3, bee <_Fault+0x6a>
			_BusFault(esf, 1);
     be4:	2101      	movs	r1, #1
		_BusFault(esf, 0);
     be6:	4620      	mov	r0, r4
     be8:	f7ff ff7c 	bl	ae4 <_BusFault>
     bec:	e7f1      	b.n	bd2 <_Fault+0x4e>
		} else if (SCB_UFSR) {
     bee:	4b13      	ldr	r3, [pc, #76]	; (c3c <_Fault+0xb8>)
     bf0:	881b      	ldrh	r3, [r3, #0]
     bf2:	b29b      	uxth	r3, r3
     bf4:	2b00      	cmp	r3, #0
     bf6:	d0ec      	beq.n	bd2 <_Fault+0x4e>
		_UsageFault(esf);
     bf8:	4620      	mov	r0, r4
     bfa:	f7ff fee5 	bl	9c8 <_UsageFault>
     bfe:	e7e8      	b.n	bd2 <_Fault+0x4e>
		_MpuFault(esf, 0);
     c00:	2100      	movs	r1, #0
     c02:	e7e3      	b.n	bcc <_Fault+0x48>
		_BusFault(esf, 0);
     c04:	2100      	movs	r1, #0
     c06:	e7ee      	b.n	be6 <_Fault+0x62>
	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
     c08:	480d      	ldr	r0, [pc, #52]	; (c40 <_Fault+0xbc>)
     c0a:	e7d2      	b.n	bb2 <_Fault+0x2e>
	PR_EXC("***** %s %d) *****\n",
     c0c:	480d      	ldr	r0, [pc, #52]	; (c44 <_Fault+0xc0>)
     c0e:	490e      	ldr	r1, [pc, #56]	; (c48 <_Fault+0xc4>)
     c10:	f1a3 0210 	sub.w	r2, r3, #16
     c14:	2b0f      	cmp	r3, #15
     c16:	bfd8      	it	le
     c18:	4601      	movle	r1, r0
     c1a:	480c      	ldr	r0, [pc, #48]	; (c4c <_Fault+0xc8>)
     c1c:	f000 fb7a 	bl	1314 <printk>
     c20:	e7d7      	b.n	bd2 <_Fault+0x4e>
     c22:	bf00      	nop
     c24:	e000ed00 	.word	0xe000ed00
     c28:	0000cd70 	.word	0x0000cd70
     c2c:	0000cd88 	.word	0x0000cd88
     c30:	0000cdaa 	.word	0x0000cdaa
     c34:	e000ed28 	.word	0xe000ed28
     c38:	e000ed29 	.word	0xe000ed29
     c3c:	e000ed2a 	.word	0xe000ed2a
     c40:	0000cdca 	.word	0x0000cdca
     c44:	0000cd42 	.word	0x0000cd42
     c48:	0000cd57 	.word	0x0000cd57
     c4c:	0000ce01 	.word	0x0000ce01

00000c50 <_FaultInit>:
 */
void _FaultInit(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
     c50:	4a02      	ldr	r2, [pc, #8]	; (c5c <_FaultInit+0xc>)
     c52:	6953      	ldr	r3, [r2, #20]
     c54:	f043 0310 	orr.w	r3, r3, #16
     c58:	6153      	str	r3, [r2, #20]
     c5a:	4770      	bx	lr
     c5c:	e000ed00 	.word	0xe000ed00

00000c60 <_arch_irq_enable>:
 *
 * @return N/A
 */
void _arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
     c60:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
     c62:	2b00      	cmp	r3, #0
     c64:	db08      	blt.n	c78 <_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     c66:	2201      	movs	r2, #1
     c68:	f000 001f 	and.w	r0, r0, #31
     c6c:	fa02 f000 	lsl.w	r0, r2, r0
     c70:	095b      	lsrs	r3, r3, #5
     c72:	4a02      	ldr	r2, [pc, #8]	; (c7c <_arch_irq_enable+0x1c>)
     c74:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
     c78:	4770      	bx	lr
     c7a:	bf00      	nop
     c7c:	e000e100 	.word	0xe000e100

00000c80 <_arch_irq_disable>:
 *
 * @return N/A
 */
void _arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
     c80:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
     c82:	2b00      	cmp	r3, #0
     c84:	db0d      	blt.n	ca2 <_arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     c86:	2201      	movs	r2, #1
     c88:	095b      	lsrs	r3, r3, #5
     c8a:	f000 001f 	and.w	r0, r0, #31
     c8e:	fa02 f000 	lsl.w	r0, r2, r0
     c92:	3320      	adds	r3, #32
     c94:	4a03      	ldr	r2, [pc, #12]	; (ca4 <_arch_irq_disable+0x24>)
     c96:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
     c9a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     c9e:	f3bf 8f6f 	isb	sy
     ca2:	4770      	bx	lr
     ca4:	e000e100 	.word	0xe000e100

00000ca8 <_arch_irq_is_enabled>:
 * @param irq IRQ line
 * @return interrupt enable state, true or false
 */
int _arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & (1 << BIT_FROM_IRQ(irq));
     ca8:	0942      	lsrs	r2, r0, #5
     caa:	4b05      	ldr	r3, [pc, #20]	; (cc0 <_arch_irq_is_enabled+0x18>)
     cac:	f000 001f 	and.w	r0, r0, #31
     cb0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
     cb4:	2301      	movs	r3, #1
     cb6:	fa03 f000 	lsl.w	r0, r3, r0
}
     cba:	4010      	ands	r0, r2
     cbc:	4770      	bx	lr
     cbe:	bf00      	nop
     cc0:	e000e100 	.word	0xe000e100

00000cc4 <_irq_priority_set>:
	 */
	__ASSERT(prio <= ((1 << CONFIG_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << CONFIG_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
     cc4:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
     cc6:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     cc8:	bfa8      	it	ge
     cca:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
     cce:	f101 0101 	add.w	r1, r1, #1
     cd2:	ea4f 1141 	mov.w	r1, r1, lsl #5
     cd6:	bfad      	iteet	ge
     cd8:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     cdc:	f000 000f 	andlt.w	r0, r0, #15
     ce0:	4b03      	ldrlt	r3, [pc, #12]	; (cf0 <_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     ce2:	b2c9      	uxtbge	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     ce4:	bfb6      	itet	lt
     ce6:	b2c9      	uxtblt	r1, r1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     ce8:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     cec:	5419      	strblt	r1, [r3, r0]
     cee:	4770      	bx	lr
     cf0:	e000ed14 	.word	0xe000ed14

00000cf4 <_irq_spurious>:
 * @return N/A
 */
void _irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	__reserved();
     cf4:	f000 b842 	b.w	d7c <__bus_fault>

00000cf8 <_arch_isr_direct_pm>:
 * See https://jira.zephyrproject.org/browse/ZEP-1595
 */

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
     cf8:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
     cfa:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
     cfc:	4b04      	ldr	r3, [pc, #16]	; (d10 <_arch_isr_direct_pm+0x18>)
     cfe:	6998      	ldr	r0, [r3, #24]
     d00:	b118      	cbz	r0, d0a <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
     d02:	2200      	movs	r2, #0
     d04:	619a      	str	r2, [r3, #24]
		_sys_power_save_idle_exit(idle_val);
     d06:	f00a fe09 	bl	b91c <_sys_power_save_idle_exit>
	}

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
     d0a:	b662      	cpsie	i
     d0c:	bd08      	pop	{r3, pc}
     d0e:	bf00      	nop
     d10:	200029cc 	.word	0x200029cc

00000d14 <_new_thread>:

void _new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
     d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     d16:	460c      	mov	r4, r1
     d18:	4616      	mov	r6, r2
     d1a:	461f      	mov	r7, r3
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
     d1c:	2204      	movs	r2, #4
     d1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     d20:	9909      	ldr	r1, [sp, #36]	; 0x24
     d22:	4605      	mov	r5, r0
     d24:	f00b fcac 	bl	c680 <_init_thread_base>

	_new_thread_init(thread, pStackMem, stackEnd - pStackMem, priority,
			 options);

	/* carve the thread entry struct from the "base" of the stack */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
     d28:	f1a6 0120 	sub.w	r1, r6, #32
     d2c:	4421      	add	r1, r4
#else
	pInitCtx->pc = (u32_t)_thread_entry;
#endif

	/* force ARM mode by clearing LSB of address */
	pInitCtx->pc &= 0xfffffffe;
     d2e:	4a0c      	ldr	r2, [pc, #48]	; (d60 <_new_thread+0x4c>)
#if defined(CONFIG_USERSPACE)
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (u32_t)pStack;
     d30:	65ac      	str	r4, [r5, #88]	; 0x58
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
     d32:	f021 0107 	bic.w	r1, r1, #7
	thread->init_data = NULL;
     d36:	2300      	movs	r3, #0
	pInitCtx->pc &= 0xfffffffe;
     d38:	f022 0201 	bic.w	r2, r2, #1
     d3c:	64eb      	str	r3, [r5, #76]	; 0x4c
	thread->fn_abort = NULL;
     d3e:	652b      	str	r3, [r5, #80]	; 0x50
	thread->stack_info.size = (u32_t)stackSize;
     d40:	65ee      	str	r6, [r5, #92]	; 0x5c
     d42:	618a      	str	r2, [r1, #24]

	pInitCtx->a1 = (u32_t)pEntry;
	pInitCtx->a2 = (u32_t)parameter1;
     d44:	9a06      	ldr	r2, [sp, #24]
     d46:	604a      	str	r2, [r1, #4]
	pInitCtx->a3 = (u32_t)parameter2;
     d48:	9a07      	ldr	r2, [sp, #28]
     d4a:	608a      	str	r2, [r1, #8]
	pInitCtx->a4 = (u32_t)parameter3;
     d4c:	9a08      	ldr	r2, [sp, #32]
     d4e:	60ca      	str	r2, [r1, #12]
	pInitCtx->a1 = (u32_t)pEntry;
     d50:	600f      	str	r7, [r1, #0]
	pInitCtx->xpsr =
     d52:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     d56:	61ca      	str	r2, [r1, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
     d58:	64a9      	str	r1, [r5, #72]	; 0x48
	thread->arch.basepri = 0;
     d5a:	662b      	str	r3, [r5, #96]	; 0x60
     d5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     d5e:	bf00      	nop
     d60:	0000c4f5 	.word	0x0000c4f5

00000d64 <_CpuIdleInit>:
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
     d64:	4901      	ldr	r1, [pc, #4]	; (d6c <_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
     d66:	2210      	movs	r2, #16
	str r2, [r1]
     d68:	600a      	str	r2, [r1, #0]
	bx lr
     d6a:	4770      	bx	lr
	ldr r1, =_SCB_SCR
     d6c:	e000ed10 	.word	0xe000ed10

00000d70 <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
     d70:	4040      	eors	r0, r0
	msr BASEPRI, r0
     d72:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
     d76:	bf30      	wfi

	bx lr
     d78:	4770      	bx	lr
     d7a:	bf00      	nop

00000d7c <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
     d7c:	4040      	eors	r0, r0
	msr BASEPRI, r0
     d7e:	f380 8811 	msr	BASEPRI, r0

	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
     d82:	f8df c01c 	ldr.w	ip, [pc, #28]	; da0 <__bus_fault+0x24>
	ldr ip, [ip]
     d86:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
     d8a:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
     d8e:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
     d90:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
     d94:	f3ef 8009 	mrsne	r0, PSP
				 * frame is on the PSP */
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	push {lr}
     d98:	b500      	push	{lr}
	bl _Fault
     d9a:	f7ff fef3 	bl	b84 <_Fault>

	pop {pc}
     d9e:	bd00      	pop	{pc}
	ldr ip, =_SCS_ICSR
     da0:	e000ed04 	.word	0xe000ed04

00000da4 <_NanoFatalErrorHandler>:
 * @param pEsf pointer to the exception stack frame
 */
void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
	switch (reason) {
     da4:	2804      	cmp	r0, #4
{
     da6:	b538      	push	{r3, r4, r5, lr}
     da8:	4604      	mov	r4, r0
     daa:	460d      	mov	r5, r1
	switch (reason) {
     dac:	d013      	beq.n	dd6 <_NanoFatalErrorHandler+0x32>
     dae:	2805      	cmp	r0, #5
     db0:	d013      	beq.n	dda <_NanoFatalErrorHandler+0x36>
     db2:	2803      	cmp	r0, #3
     db4:	d113      	bne.n	dde <_NanoFatalErrorHandler+0x3a>
		printk("***** Stack Check Fail! *****\n");
		break;
#endif /* CONFIG_STACK_CANARIES */

	case _NANO_ERR_ALLOCATION_FAIL:
		printk("**** Kernel Allocation Failure! ****\n");
     db6:	480c      	ldr	r0, [pc, #48]	; (de8 <_NanoFatalErrorHandler+0x44>)
		break;

	case _NANO_ERR_KERNEL_OOPS:
		printk("***** Kernel OOPS! *****\n");
     db8:	f000 faac 	bl	1314 <printk>
     dbc:	f00b f938 	bl	c030 <_impl_k_current_get>

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
		break;
	}
	printk("Current thread ID = %p\n"
     dc0:	69aa      	ldr	r2, [r5, #24]
     dc2:	4601      	mov	r1, r0
     dc4:	4809      	ldr	r0, [pc, #36]	; (dec <_NanoFatalErrorHandler+0x48>)
     dc6:	f000 faa5 	bl	1314 <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	_SysFatalErrorHandler(reason, pEsf);
     dca:	4629      	mov	r1, r5
     dcc:	4620      	mov	r0, r4
}
     dce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(reason, pEsf);
     dd2:	f000 b817 	b.w	e04 <_SysFatalErrorHandler>
		printk("***** Kernel OOPS! *****\n");
     dd6:	4806      	ldr	r0, [pc, #24]	; (df0 <_NanoFatalErrorHandler+0x4c>)
     dd8:	e7ee      	b.n	db8 <_NanoFatalErrorHandler+0x14>
		printk("***** Kernel Panic! *****\n");
     dda:	4806      	ldr	r0, [pc, #24]	; (df4 <_NanoFatalErrorHandler+0x50>)
     ddc:	e7ec      	b.n	db8 <_NanoFatalErrorHandler+0x14>
		printk("**** Unknown Fatal Error %d! ****\n", reason);
     dde:	4601      	mov	r1, r0
     de0:	4805      	ldr	r0, [pc, #20]	; (df8 <_NanoFatalErrorHandler+0x54>)
     de2:	f000 fa97 	bl	1314 <printk>
		break;
     de6:	e7e9      	b.n	dbc <_NanoFatalErrorHandler+0x18>
     de8:	0000cfea 	.word	0x0000cfea
     dec:	0000d068 	.word	0x0000d068
     df0:	0000d010 	.word	0x0000d010
     df4:	0000d02a 	.word	0x0000d02a
     df8:	0000d045 	.word	0x0000d045

00000dfc <_do_kernel_oops>:

void _do_kernel_oops(const NANO_ESF *esf)
{
     dfc:	4601      	mov	r1, r0
	_NanoFatalErrorHandler(esf->r0, esf);
     dfe:	6800      	ldr	r0, [r0, #0]
     e00:	f7ff bfd0 	b.w	da4 <_NanoFatalErrorHandler>

00000e04 <_SysFatalErrorHandler>:
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
     e04:	2805      	cmp	r0, #5
{
     e06:	b510      	push	{r4, lr}
	if (reason == _NANO_ERR_KERNEL_PANIC) {
     e08:	d00c      	beq.n	e24 <_SysFatalErrorHandler+0x20>
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
     e0a:	f00b fb5b 	bl	c4c4 <k_is_in_isr>
     e0e:	b160      	cbz	r0, e2a <_SysFatalErrorHandler+0x26>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
     e10:	f00b fb58 	bl	c4c4 <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
     e14:	4b0c      	ldr	r3, [pc, #48]	; (e48 <_SysFatalErrorHandler+0x44>)
     e16:	490d      	ldr	r1, [pc, #52]	; (e4c <_SysFatalErrorHandler+0x48>)
     e18:	2800      	cmp	r0, #0
     e1a:	bf08      	it	eq
     e1c:	4619      	moveq	r1, r3
     e1e:	480c      	ldr	r0, [pc, #48]	; (e50 <_SysFatalErrorHandler+0x4c>)
     e20:	f000 fa78 	bl	1314 <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
     e24:	f7ff ffa4 	bl	d70 <k_cpu_idle>
     e28:	e7fc      	b.n	e24 <_SysFatalErrorHandler+0x20>
	if (k_is_in_isr() || _is_thread_essential()) {
     e2a:	f00b fb5b 	bl	c4e4 <_is_thread_essential>
     e2e:	2800      	cmp	r0, #0
     e30:	d1ee      	bne.n	e10 <_SysFatalErrorHandler+0xc>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
     e32:	4c08      	ldr	r4, [pc, #32]	; (e54 <_SysFatalErrorHandler+0x50>)
     e34:	4808      	ldr	r0, [pc, #32]	; (e58 <_SysFatalErrorHandler+0x54>)
     e36:	68a1      	ldr	r1, [r4, #8]
     e38:	f000 fa6c 	bl	1314 <printk>

K_SYSCALL_DECLARE1(K_SYSCALL_K_THREAD_CANCEL, k_thread_cancel, int, k_tid_t, thread);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
     e3c:	68a0      	ldr	r0, [r4, #8]
	}
	CODE_UNREACHABLE;
}
     e3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     e42:	f000 b80b 	b.w	e5c <_impl_k_thread_abort>
     e46:	bf00      	nop
     e48:	0000d0a8 	.word	0x0000d0a8
     e4c:	0000d0a4 	.word	0x0000d0a4
     e50:	0000d0b9 	.word	0x0000d0b9
     e54:	200029cc 	.word	0x200029cc
     e58:	0000d0d9 	.word	0x0000d0d9

00000e5c <_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void _k_thread_single_abort(struct k_thread *thread);

void _impl_k_thread_abort(k_tid_t thread)
{
     e5c:	b538      	push	{r3, r4, r5, lr}
     e5e:	4605      	mov	r5, r0
	__asm__ volatile(
     e60:	f04f 0320 	mov.w	r3, #32
     e64:	f3ef 8411 	mrs	r4, BASEPRI
     e68:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	_k_thread_single_abort(thread);
     e6c:	f00b fb98 	bl	c5a0 <_k_thread_single_abort>
	_thread_monitor_exit(thread);

	if (_current == thread) {
     e70:	4b0b      	ldr	r3, [pc, #44]	; (ea0 <_impl_k_thread_abort+0x44>)
     e72:	689b      	ldr	r3, [r3, #8]
     e74:	429d      	cmp	r5, r3
     e76:	d10d      	bne.n	e94 <_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
     e78:	4b0a      	ldr	r3, [pc, #40]	; (ea4 <_impl_k_thread_abort+0x48>)
     e7a:	685a      	ldr	r2, [r3, #4]
     e7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
     e80:	b922      	cbnz	r2, e8c <_impl_k_thread_abort+0x30>
extern unsigned int __swap(unsigned int key);

static inline unsigned int _Swap(unsigned int key)
{
	_check_stack_sentinel();
	_update_time_slice_before_swap();
     e82:	f00b f8ff 	bl	c084 <_update_time_slice_before_swap>

	return __swap(key);
     e86:	4620      	mov	r0, r4
     e88:	f7ff fd38 	bl	8fc <__swap>
			_Swap(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
     e8c:	685a      	ldr	r2, [r3, #4]
     e8e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
     e92:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule_threads(key);
     e94:	4620      	mov	r0, r4
}
     e96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_reschedule_threads(key);
     e9a:	f00b b857 	b.w	bf4c <_reschedule_threads>
     e9e:	bf00      	nop
     ea0:	200029cc 	.word	0x200029cc
     ea4:	e000ed00 	.word	0xe000ed00

00000ea8 <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {lr}		/* lr is now the first item on the stack */
     ea8:	b500      	push	{lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, _sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
     eaa:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
     eac:	4a0b      	ldr	r2, [pc, #44]	; (edc <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
     eae:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
     eb0:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	blx _sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
     eb2:	bf1e      	ittt	ne
	movne	r1, #0
     eb4:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
     eb6:	6191      	strne	r1, [r2, #24]
		blxne	_sys_power_save_idle_exit
     eb8:	f00a fd30 	blne	b91c <_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
     ebc:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
     ebe:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
     ec2:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
     ec6:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
     eca:	4905      	ldr	r1, [pc, #20]	; (ee0 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
     ecc:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
     ece:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r4 regs */
#endif
	blx r3		/* call ISR */
     ed0:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {lr}
     ed2:	f85d eb04 	ldr.w	lr, [sp], #4
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* exception return is done in _IntExit() */
	b _IntExit
     ed6:	f7ff bcef 	b.w	8b8 <_ExcExit>
     eda:	0000      	.short	0x0000
	ldr r2, =_kernel
     edc:	200029cc 	.word	0x200029cc
	ldr r1, =_sw_isr_table
     ee0:	000000f8 	.word	0x000000f8

00000ee4 <__reset>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
     ee4:	2020      	movs	r0, #32
    msr BASEPRI, r0
     ee6:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialisation.
     */
    ldr r0, =_interrupt_stack
     eea:	4805      	ldr	r0, [pc, #20]	; (f00 <__reset+0x1c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
     eec:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
     ef0:	1840      	adds	r0, r0, r1
    msr PSP, r0
     ef2:	f380 8809 	msr	PSP, r0
    movs.n r0, #2	/* switch to using PSP (bit1 of CONTROL reg) */
     ef6:	2002      	movs	r0, #2
    msr CONTROL, r0
     ef8:	f380 8814 	msr	CONTROL, r0

    b _PrepC
     efc:	f000 b806 	b.w	f0c <_PrepC>
    ldr r0, =_interrupt_stack
     f00:	200040f8 	.word	0x200040f8

00000f04 <_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(_SysNmiOnReset)

SECTION_FUNC(TEXT, _SysNmiOnReset)
    wfi
     f04:	bf30      	wfi
    b _SysNmiOnReset
     f06:	f7ff bffd 	b.w	f04 <_SysNmiOnReset>
     f0a:	bf00      	nop

00000f0c <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
     f0c:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
     f0e:	4b07      	ldr	r3, [pc, #28]	; (f2c <_PrepC+0x20>)
     f10:	4a07      	ldr	r2, [pc, #28]	; (f30 <_PrepC+0x24>)
     f12:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     f16:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
     f18:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     f1c:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	_bss_zero();
     f20:	f00a fd2c 	bl	b97c <_bss_zero>
	_data_copy();
     f24:	f00a fd34 	bl	b990 <_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0;
#endif
	_Cstart();
     f28:	f00a fd5a 	bl	b9e0 <_Cstart>
     f2c:	00000000 	.word	0x00000000
     f30:	e000ed00 	.word	0xe000ed00

00000f34 <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
     f34:	b508      	push	{r3, lr}
	handler();
     f36:	f7ff ffe5 	bl	f04 <_SysNmiOnReset>
	_ExcExit();
}
     f3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	_ExcExit();
     f3e:	f7ff bcbb 	b.w	8b8 <_ExcExit>
	...

00000f44 <arm_mpu_init>:
	}
}

static inline u8_t _get_num_regions(void)
{
	u32_t type = ARM_MPU_DEV->type;
     f44:	4b15      	ldr	r3, [pc, #84]	; (f9c <arm_mpu_init+0x58>)
static void _arm_mpu_config(void)
{
	u32_t r_index;

	/* ARM MPU supports up to 16 Regions */
	if (mpu_config.num_regions > _get_num_regions()) {
     f46:	4916      	ldr	r1, [pc, #88]	; (fa0 <arm_mpu_init+0x5c>)
	u32_t type = ARM_MPU_DEV->type;
     f48:	681a      	ldr	r2, [r3, #0]
	__DSB();
	__ISB();
}

static int arm_mpu_init(struct device *arg)
{
     f4a:	b530      	push	{r4, r5, lr}
	if (mpu_config.num_regions > _get_num_regions()) {
     f4c:	680d      	ldr	r5, [r1, #0]
     f4e:	f3c2 2207 	ubfx	r2, r2, #8, #8
     f52:	4295      	cmp	r5, r2
     f54:	d80f      	bhi.n	f76 <arm_mpu_init+0x32>
	ARM_MPU_DEV->ctrl = 0;
     f56:	2200      	movs	r2, #0
     f58:	6848      	ldr	r0, [r1, #4]
     f5a:	605a      	str	r2, [r3, #4]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
     f5c:	4295      	cmp	r5, r2
     f5e:	f100 000c 	add.w	r0, r0, #12
     f62:	d10a      	bne.n	f7a <arm_mpu_init+0x36>
	ARM_MPU_DEV->ctrl = ARM_MPU_ENABLE | ARM_MPU_PRIVDEFENA;
     f64:	2205      	movs	r2, #5
     f66:	605a      	str	r2, [r3, #4]
	arm_mpu_enabled = 1;
     f68:	4b0e      	ldr	r3, [pc, #56]	; (fa4 <arm_mpu_init+0x60>)
     f6a:	2201      	movs	r2, #1
     f6c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
     f6e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     f72:	f3bf 8f6f 	isb	sy
	ARG_UNUSED(arg);

	_arm_mpu_config();

	return 0;
}
     f76:	2000      	movs	r0, #0
     f78:	bd30      	pop	{r4, r5, pc}
		_region_init(r_index,
     f7a:	f850 1c0c 	ldr.w	r1, [r0, #-12]
     f7e:	f850 4c04 	ldr.w	r4, [r0, #-4]
	ARM_MPU_DEV->rnr = index;
     f82:	609a      	str	r2, [r3, #8]
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
     f84:	f021 011f 	bic.w	r1, r1, #31
				| REGION_VALID | index;
     f88:	f041 0110 	orr.w	r1, r1, #16
     f8c:	4311      	orrs	r1, r2
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
     f8e:	f044 0401 	orr.w	r4, r4, #1
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
     f92:	60d9      	str	r1, [r3, #12]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
     f94:	3201      	adds	r2, #1
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
     f96:	611c      	str	r4, [r3, #16]
     f98:	e7e0      	b.n	f5c <arm_mpu_init+0x18>
     f9a:	bf00      	nop
     f9c:	e000ed90 	.word	0xe000ed90
     fa0:	20004df0 	.word	0x20004df0
     fa4:	20000000 	.word	0x20000000

00000fa8 <_nop_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
     fa8:	2000      	movs	r0, #0
     faa:	4770      	bx	lr

00000fac <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     fac:	680b      	ldr	r3, [r1, #0]
     fae:	3301      	adds	r3, #1
     fb0:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     fb2:	4b01      	ldr	r3, [pc, #4]	; (fb8 <char_out+0xc>)
     fb4:	681b      	ldr	r3, [r3, #0]
     fb6:	4718      	bx	r3
     fb8:	20004e38 	.word	0x20004e38

00000fbc <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
     fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     fc0:	b085      	sub	sp, #20
     fc2:	469b      	mov	fp, r3
     fc4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
     fc6:	f8df a090 	ldr.w	sl, [pc, #144]	; 1058 <_printk_dec_ulong+0x9c>
     fca:	2c01      	cmp	r4, #1
     fcc:	bfb8      	it	lt
     fce:	2401      	movlt	r4, #1
     fd0:	2b01      	cmp	r3, #1
     fd2:	bf0c      	ite	eq
     fd4:	2330      	moveq	r3, #48	; 0x30
     fd6:	2320      	movne	r3, #32
     fd8:	4615      	mov	r5, r2
     fda:	4680      	mov	r8, r0
     fdc:	4689      	mov	r9, r1
     fde:	9401      	str	r4, [sp, #4]
     fe0:	9302      	str	r3, [sp, #8]
     fe2:	2601      	movs	r6, #1
     fe4:	270a      	movs	r7, #10
     fe6:	2200      	movs	r2, #0
     fe8:	f10a 0401 	add.w	r4, sl, #1
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
     fec:	b90a      	cbnz	r2, ff2 <_printk_dec_ulong+0x36>
     fee:	45aa      	cmp	sl, r5
     ff0:	d21f      	bcs.n	1032 <_printk_dec_ulong+0x76>
			found_largest_digit = 1;
			out((int)((remainder / (pos + 1)) + 48), ctx);
     ff2:	fbb5 f0f4 	udiv	r0, r5, r4
     ff6:	4649      	mov	r1, r9
     ff8:	3030      	adds	r0, #48	; 0x30
     ffa:	47c0      	blx	r8
			digits++;
     ffc:	3601      	adds	r6, #1
			found_largest_digit = 1;
     ffe:	2201      	movs	r2, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
    1000:	3f01      	subs	r7, #1
	while (pos >= 9) {
    1002:	2f01      	cmp	r7, #1
		remainder %= (pos + 1);
    1004:	fbb5 f1f4 	udiv	r1, r5, r4
		pos /= 10;
    1008:	f04f 030a 	mov.w	r3, #10
		remainder %= (pos + 1);
    100c:	fb04 5511 	mls	r5, r4, r1, r5
		pos /= 10;
    1010:	fbba faf3 	udiv	sl, sl, r3
	while (pos >= 9) {
    1014:	d1e8      	bne.n	fe8 <_printk_dec_ulong+0x2c>
	}
	out((int)(remainder + 48), ctx);
    1016:	4649      	mov	r1, r9
    1018:	f105 0030 	add.w	r0, r5, #48	; 0x30
    101c:	47c0      	blx	r8

	if (padding == PAD_SPACE_AFTER) {
    101e:	f1bb 0f03 	cmp.w	fp, #3
    1022:	d103      	bne.n	102c <_printk_dec_ulong+0x70>
		remaining = min_width - digits;
    1024:	9b01      	ldr	r3, [sp, #4]
    1026:	1b9c      	subs	r4, r3, r6
		while (remaining-- > 0) {
    1028:	2c00      	cmp	r4, #0
    102a:	dc0f      	bgt.n	104c <_printk_dec_ulong+0x90>
			out(' ', ctx);
		}
	}
}
    102c:	b005      	add	sp, #20
    102e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
    1032:	9b01      	ldr	r3, [sp, #4]
    1034:	42bb      	cmp	r3, r7
    1036:	dbe3      	blt.n	1000 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
    1038:	f1bb 0f02 	cmp.w	fp, #2
    103c:	d8e0      	bhi.n	1000 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    103e:	4649      	mov	r1, r9
    1040:	9802      	ldr	r0, [sp, #8]
    1042:	9203      	str	r2, [sp, #12]
			digits++;
    1044:	3601      	adds	r6, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    1046:	47c0      	blx	r8
			digits++;
    1048:	9a03      	ldr	r2, [sp, #12]
    104a:	e7d9      	b.n	1000 <_printk_dec_ulong+0x44>
			out(' ', ctx);
    104c:	4649      	mov	r1, r9
    104e:	2020      	movs	r0, #32
    1050:	47c0      	blx	r8
    1052:	3c01      	subs	r4, #1
    1054:	e7e8      	b.n	1028 <_printk_dec_ulong+0x6c>
    1056:	bf00      	nop
    1058:	3b9ac9ff 	.word	0x3b9ac9ff

0000105c <str_out>:
	int count;
};

static int str_out(int c, struct str_context *ctx)
{
	if (!ctx->str || ctx->count >= ctx->max) {
    105c:	680a      	ldr	r2, [r1, #0]
    105e:	688b      	ldr	r3, [r1, #8]
{
    1060:	b530      	push	{r4, r5, lr}
	if (!ctx->str || ctx->count >= ctx->max) {
    1062:	b112      	cbz	r2, 106a <str_out+0xe>
    1064:	684c      	ldr	r4, [r1, #4]
    1066:	42a3      	cmp	r3, r4
    1068:	db02      	blt.n	1070 <str_out+0x14>
		ctx->count++;
    106a:	3301      	adds	r3, #1
    106c:	608b      	str	r3, [r1, #8]
		return c;
    106e:	bd30      	pop	{r4, r5, pc}
	}

	if (ctx->count == ctx->max - 1) {
    1070:	1e65      	subs	r5, r4, #1
    1072:	42ab      	cmp	r3, r5
		ctx->str[ctx->count++] = '\0';
    1074:	bf0b      	itete	eq
    1076:	608c      	streq	r4, [r1, #8]
	} else {
		ctx->str[ctx->count++] = c;
    1078:	1c5c      	addne	r4, r3, #1
		ctx->str[ctx->count++] = '\0';
    107a:	2100      	moveq	r1, #0
		ctx->str[ctx->count++] = c;
    107c:	608c      	strne	r4, [r1, #8]
		ctx->str[ctx->count++] = '\0';
    107e:	bf0c      	ite	eq
    1080:	54d1      	strbeq	r1, [r2, r3]
		ctx->str[ctx->count++] = c;
    1082:	54d0      	strbne	r0, [r2, r3]
	}

	return c;
}
    1084:	bd30      	pop	{r4, r5, pc}
	...

00001088 <__printk_hook_install>:
	_char_out = fn;
    1088:	4b01      	ldr	r3, [pc, #4]	; (1090 <__printk_hook_install+0x8>)
    108a:	6018      	str	r0, [r3, #0]
    108c:	4770      	bx	lr
    108e:	bf00      	nop
    1090:	20004e38 	.word	0x20004e38

00001094 <_vprintk>:
{
    1094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1098:	b089      	sub	sp, #36	; 0x24
	int long_ctr = 0;
    109a:	f04f 0a00 	mov.w	sl, #0
{
    109e:	4606      	mov	r6, r0
    10a0:	460f      	mov	r7, r1
    10a2:	9204      	str	r2, [sp, #16]
    10a4:	461c      	mov	r4, r3
	int min_width = -1;
    10a6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
    10aa:	46d0      	mov	r8, sl
	int might_format = 0; /* 1 if encountered a '%' */
    10ac:	4655      	mov	r5, sl
	while (*fmt) {
    10ae:	9b04      	ldr	r3, [sp, #16]
    10b0:	7818      	ldrb	r0, [r3, #0]
    10b2:	b910      	cbnz	r0, 10ba <_vprintk+0x26>
}
    10b4:	b009      	add	sp, #36	; 0x24
    10b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!might_format) {
    10ba:	b945      	cbnz	r5, 10ce <_vprintk+0x3a>
			if (*fmt != '%') {
    10bc:	2825      	cmp	r0, #37	; 0x25
    10be:	f000 810c 	beq.w	12da <_vprintk+0x246>
				out((int)*fmt, ctx);
    10c2:	4639      	mov	r1, r7
    10c4:	47b0      	blx	r6
		++fmt;
    10c6:	9b04      	ldr	r3, [sp, #16]
    10c8:	3301      	adds	r3, #1
    10ca:	9304      	str	r3, [sp, #16]
    10cc:	e7ef      	b.n	10ae <_vprintk+0x1a>
			switch (*fmt) {
    10ce:	2864      	cmp	r0, #100	; 0x64
    10d0:	d061      	beq.n	1196 <_vprintk+0x102>
    10d2:	d819      	bhi.n	1108 <_vprintk+0x74>
    10d4:	2839      	cmp	r0, #57	; 0x39
    10d6:	d80a      	bhi.n	10ee <_vprintk+0x5a>
    10d8:	2831      	cmp	r0, #49	; 0x31
    10da:	d250      	bcs.n	117e <_vprintk+0xea>
    10dc:	282d      	cmp	r0, #45	; 0x2d
    10de:	d03c      	beq.n	115a <_vprintk+0xc6>
    10e0:	2830      	cmp	r0, #48	; 0x30
    10e2:	d03d      	beq.n	1160 <_vprintk+0xcc>
    10e4:	2825      	cmp	r0, #37	; 0x25
    10e6:	d108      	bne.n	10fa <_vprintk+0x66>
				out((int)'%', ctx);
    10e8:	4639      	mov	r1, r7
				out((int)*fmt, ctx);
    10ea:	47b0      	blx	r6
    10ec:	e06f      	b.n	11ce <_vprintk+0x13a>
			switch (*fmt) {
    10ee:	2858      	cmp	r0, #88	; 0x58
    10f0:	f000 8089 	beq.w	1206 <_vprintk+0x172>
    10f4:	2863      	cmp	r0, #99	; 0x63
    10f6:	f000 80ea 	beq.w	12ce <_vprintk+0x23a>
				out((int)'%', ctx);
    10fa:	4639      	mov	r1, r7
    10fc:	2025      	movs	r0, #37	; 0x25
    10fe:	47b0      	blx	r6
				out((int)*fmt, ctx);
    1100:	9b04      	ldr	r3, [sp, #16]
    1102:	4639      	mov	r1, r7
    1104:	7818      	ldrb	r0, [r3, #0]
    1106:	e7f0      	b.n	10ea <_vprintk+0x56>
			switch (*fmt) {
    1108:	2870      	cmp	r0, #112	; 0x70
    110a:	d072      	beq.n	11f2 <_vprintk+0x15e>
    110c:	d806      	bhi.n	111c <_vprintk+0x88>
    110e:	2869      	cmp	r0, #105	; 0x69
    1110:	d041      	beq.n	1196 <_vprintk+0x102>
    1112:	286c      	cmp	r0, #108	; 0x6c
    1114:	d03c      	beq.n	1190 <_vprintk+0xfc>
    1116:	2868      	cmp	r0, #104	; 0x68
    1118:	d0d5      	beq.n	10c6 <_vprintk+0x32>
    111a:	e7ee      	b.n	10fa <_vprintk+0x66>
    111c:	2875      	cmp	r0, #117	; 0x75
    111e:	d058      	beq.n	11d2 <_vprintk+0x13e>
    1120:	d817      	bhi.n	1152 <_vprintk+0xbe>
    1122:	2873      	cmp	r0, #115	; 0x73
    1124:	d1e9      	bne.n	10fa <_vprintk+0x66>
				char *s = va_arg(ap, char *);
    1126:	6823      	ldr	r3, [r4, #0]
    1128:	f104 0b04 	add.w	fp, r4, #4
    112c:	461c      	mov	r4, r3
				while (*s)
    112e:	4625      	mov	r5, r4
    1130:	f815 0b01 	ldrb.w	r0, [r5], #1
    1134:	2800      	cmp	r0, #0
    1136:	f040 80bf 	bne.w	12b8 <_vprintk+0x224>
				if (padding == PAD_SPACE_AFTER) {
    113a:	f1b8 0f03 	cmp.w	r8, #3
    113e:	f040 80d5 	bne.w	12ec <_vprintk+0x258>
					int remaining = min_width - (s - start);
    1142:	1ae4      	subs	r4, r4, r3
    1144:	eba9 0404 	sub.w	r4, r9, r4
					while (remaining-- > 0) {
    1148:	2c00      	cmp	r4, #0
    114a:	f300 80bb 	bgt.w	12c4 <_vprintk+0x230>
				char *s = va_arg(ap, char *);
    114e:	465c      	mov	r4, fp
    1150:	e03d      	b.n	11ce <_vprintk+0x13a>
			switch (*fmt) {
    1152:	2878      	cmp	r0, #120	; 0x78
    1154:	d057      	beq.n	1206 <_vprintk+0x172>
    1156:	287a      	cmp	r0, #122	; 0x7a
    1158:	e7de      	b.n	1118 <_vprintk+0x84>
				padding = PAD_SPACE_AFTER;
    115a:	f04f 0803 	mov.w	r8, #3
    115e:	e7b2      	b.n	10c6 <_vprintk+0x32>
				if (min_width < 0 && padding == PAD_NONE) {
    1160:	f1b9 0f00 	cmp.w	r9, #0
    1164:	da0e      	bge.n	1184 <_vprintk+0xf0>
    1166:	f1b8 0f00 	cmp.w	r8, #0
    116a:	f000 80bc 	beq.w	12e6 <_vprintk+0x252>
					min_width = *fmt - '0';
    116e:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
    1172:	f1b8 0f00 	cmp.w	r8, #0
    1176:	bf08      	it	eq
    1178:	f04f 0802 	moveq.w	r8, #2
    117c:	e7a3      	b.n	10c6 <_vprintk+0x32>
				if (min_width < 0) {
    117e:	f1b9 0f00 	cmp.w	r9, #0
    1182:	dbf4      	blt.n	116e <_vprintk+0xda>
					min_width = 10 * min_width + *fmt - '0';
    1184:	230a      	movs	r3, #10
    1186:	fb03 0909 	mla	r9, r3, r9, r0
    118a:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
    118e:	e7f0      	b.n	1172 <_vprintk+0xde>
				long_ctr++;
    1190:	f10a 0a01 	add.w	sl, sl, #1
    1194:	e797      	b.n	10c6 <_vprintk+0x32>
				if (long_ctr < 2) {
    1196:	f1ba 0f01 	cmp.w	sl, #1
					d = (long)va_arg(ap, long long);
    119a:	bfc5      	ittet	gt
    119c:	3407      	addgt	r4, #7
    119e:	f024 0307 	bicgt.w	r3, r4, #7
					d = va_arg(ap, long);
    11a2:	6825      	ldrle	r5, [r4, #0]
					d = (long)va_arg(ap, long long);
    11a4:	681d      	ldrgt	r5, [r3, #0]
					d = va_arg(ap, long);
    11a6:	bfd4      	ite	le
    11a8:	3404      	addle	r4, #4
					d = (long)va_arg(ap, long long);
    11aa:	f103 0408 	addgt.w	r4, r3, #8
				if (d < 0) {
    11ae:	2d00      	cmp	r5, #0
    11b0:	da05      	bge.n	11be <_vprintk+0x12a>
					out((int)'-', ctx);
    11b2:	4639      	mov	r1, r7
    11b4:	202d      	movs	r0, #45	; 0x2d
    11b6:	47b0      	blx	r6
					d = -d;
    11b8:	426d      	negs	r5, r5
					min_width--;
    11ba:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
    11be:	f8cd 9000 	str.w	r9, [sp]
    11c2:	4643      	mov	r3, r8
    11c4:	462a      	mov	r2, r5
				_printk_dec_ulong(out, ctx, u, padding,
    11c6:	4639      	mov	r1, r7
    11c8:	4630      	mov	r0, r6
    11ca:	f7ff fef7 	bl	fbc <_printk_dec_ulong>
			might_format = 0;
    11ce:	2500      	movs	r5, #0
				break;
    11d0:	e779      	b.n	10c6 <_vprintk+0x32>
				if (long_ctr < 2) {
    11d2:	f1ba 0f01 	cmp.w	sl, #1
					u = (unsigned long)va_arg(ap,
    11d6:	bfc5      	ittet	gt
    11d8:	3407      	addgt	r4, #7
    11da:	f024 0307 	bicgt.w	r3, r4, #7
					u = va_arg(ap, unsigned long);
    11de:	6822      	ldrle	r2, [r4, #0]
					u = (unsigned long)va_arg(ap,
    11e0:	681a      	ldrgt	r2, [r3, #0]
				_printk_dec_ulong(out, ctx, u, padding,
    11e2:	f8cd 9000 	str.w	r9, [sp]
					u = (unsigned long)va_arg(ap,
    11e6:	bfcc      	ite	gt
    11e8:	f103 0408 	addgt.w	r4, r3, #8
					u = va_arg(ap, unsigned long);
    11ec:	3404      	addle	r4, #4
				_printk_dec_ulong(out, ctx, u, padding,
    11ee:	4643      	mov	r3, r8
    11f0:	e7e9      	b.n	11c6 <_vprintk+0x132>
				  out('0', ctx);
    11f2:	4639      	mov	r1, r7
    11f4:	2030      	movs	r0, #48	; 0x30
    11f6:	47b0      	blx	r6
				  out('x', ctx);
    11f8:	4639      	mov	r1, r7
    11fa:	2078      	movs	r0, #120	; 0x78
    11fc:	47b0      	blx	r6
				  min_width = 8;
    11fe:	f04f 0908 	mov.w	r9, #8
				  padding = PAD_ZERO_BEFORE;
    1202:	f04f 0801 	mov.w	r8, #1
				if (long_ctr < 2) {
    1206:	f1ba 0f01 	cmp.w	sl, #1
					x = (unsigned long)va_arg(ap,
    120a:	bfc7      	ittee	gt
    120c:	3407      	addgt	r4, #7
    120e:	f024 0307 	bicgt.w	r3, r4, #7
					x = va_arg(ap, unsigned long);
    1212:	6823      	ldrle	r3, [r4, #0]
    1214:	9305      	strle	r3, [sp, #20]
					x = (unsigned long)va_arg(ap,
    1216:	bfc2      	ittt	gt
    1218:	f103 0408 	addgt.w	r4, r3, #8
    121c:	681b      	ldrgt	r3, [r3, #0]
    121e:	9305      	strgt	r3, [sp, #20]
	int remaining = 8; /* 8 digits max */
    1220:	f04f 0208 	mov.w	r2, #8
	int digits = 0;
    1224:	f04f 0300 	mov.w	r3, #0
					x = va_arg(ap, unsigned long);
    1228:	bfd8      	it	le
    122a:	3404      	addle	r4, #4
	int digits = 0;
    122c:	9303      	str	r3, [sp, #12]
	int found_largest_digit = 0;
    122e:	9307      	str	r3, [sp, #28]
	int size = sizeof(num) * 2;
    1230:	4693      	mov	fp, r2
		char nibble = (num >> ((size - 1) << 2) & 0xf);
    1232:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    1236:	9b05      	ldr	r3, [sp, #20]
    1238:	ea4f 008b 	mov.w	r0, fp, lsl #2
    123c:	fa23 f000 	lsr.w	r0, r3, r0
		if (nibble || found_largest_digit || size == 1) {
    1240:	f010 000f 	ands.w	r0, r0, #15
    1244:	d109      	bne.n	125a <_vprintk+0x1c6>
    1246:	9b07      	ldr	r3, [sp, #28]
    1248:	b913      	cbnz	r3, 1250 <_vprintk+0x1bc>
    124a:	f1bb 0f00 	cmp.w	fp, #0
    124e:	d122      	bne.n	1296 <_vprintk+0x202>
			nibble += nibble > 9 ? 87 : 48;
    1250:	f04f 0e30 	mov.w	lr, #48	; 0x30
    1254:	e007      	b.n	1266 <_vprintk+0x1d2>
	for (; size; size--) {
    1256:	9a06      	ldr	r2, [sp, #24]
    1258:	e7eb      	b.n	1232 <_vprintk+0x19e>
			nibble += nibble > 9 ? 87 : 48;
    125a:	2809      	cmp	r0, #9
    125c:	bf8c      	ite	hi
    125e:	f04f 0e57 	movhi.w	lr, #87	; 0x57
    1262:	f04f 0e30 	movls.w	lr, #48	; 0x30
			out((int)nibble, ctx);
    1266:	4639      	mov	r1, r7
    1268:	4470      	add	r0, lr
    126a:	9206      	str	r2, [sp, #24]
    126c:	47b0      	blx	r6
			digits++;
    126e:	9b03      	ldr	r3, [sp, #12]
			found_largest_digit = 1;
    1270:	9507      	str	r5, [sp, #28]
			digits++;
    1272:	3301      	adds	r3, #1
    1274:	9303      	str	r3, [sp, #12]
	for (; size; size--) {
    1276:	f1bb 0f00 	cmp.w	fp, #0
    127a:	d1ec      	bne.n	1256 <_vprintk+0x1c2>
	if (padding == PAD_SPACE_AFTER) {
    127c:	f1b8 0f03 	cmp.w	r8, #3
    1280:	d1a5      	bne.n	11ce <_vprintk+0x13a>
		remaining = min_width * 2 - digits;
    1282:	9b03      	ldr	r3, [sp, #12]
    1284:	ebc3 0549 	rsb	r5, r3, r9, lsl #1
		while (remaining-- > 0) {
    1288:	2d00      	cmp	r5, #0
    128a:	dda0      	ble.n	11ce <_vprintk+0x13a>
			out(' ', ctx);
    128c:	4639      	mov	r1, r7
    128e:	2020      	movs	r0, #32
    1290:	47b0      	blx	r6
    1292:	3d01      	subs	r5, #1
    1294:	e7f8      	b.n	1288 <_vprintk+0x1f4>
		if (remaining-- <= min_width) {
    1296:	1e53      	subs	r3, r2, #1
    1298:	4591      	cmp	r9, r2
    129a:	9306      	str	r3, [sp, #24]
    129c:	dbeb      	blt.n	1276 <_vprintk+0x1e2>
			if (padding == PAD_ZERO_BEFORE) {
    129e:	f1b8 0f01 	cmp.w	r8, #1
    12a2:	d103      	bne.n	12ac <_vprintk+0x218>
				out('0', ctx);
    12a4:	4639      	mov	r1, r7
    12a6:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
    12a8:	47b0      	blx	r6
    12aa:	e7e4      	b.n	1276 <_vprintk+0x1e2>
			} else if (padding == PAD_SPACE_BEFORE) {
    12ac:	f1b8 0f02 	cmp.w	r8, #2
    12b0:	d1e1      	bne.n	1276 <_vprintk+0x1e2>
				out(' ', ctx);
    12b2:	4639      	mov	r1, r7
    12b4:	2020      	movs	r0, #32
    12b6:	e7f7      	b.n	12a8 <_vprintk+0x214>
					out((int)(*s++), ctx);
    12b8:	4639      	mov	r1, r7
    12ba:	9303      	str	r3, [sp, #12]
    12bc:	462c      	mov	r4, r5
    12be:	47b0      	blx	r6
    12c0:	9b03      	ldr	r3, [sp, #12]
    12c2:	e734      	b.n	112e <_vprintk+0x9a>
						out(' ', ctx);
    12c4:	4639      	mov	r1, r7
    12c6:	2020      	movs	r0, #32
    12c8:	47b0      	blx	r6
    12ca:	3c01      	subs	r4, #1
    12cc:	e73c      	b.n	1148 <_vprintk+0xb4>
				out(c, ctx);
    12ce:	6820      	ldr	r0, [r4, #0]
				int c = va_arg(ap, int);
    12d0:	1d25      	adds	r5, r4, #4
				out(c, ctx);
    12d2:	4639      	mov	r1, r7
    12d4:	47b0      	blx	r6
				int c = va_arg(ap, int);
    12d6:	462c      	mov	r4, r5
    12d8:	e779      	b.n	11ce <_vprintk+0x13a>
				long_ctr = 0;
    12da:	46aa      	mov	sl, r5
				padding = PAD_NONE;
    12dc:	46a8      	mov	r8, r5
				min_width = -1;
    12de:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
				might_format = 1;
    12e2:	2501      	movs	r5, #1
    12e4:	e6ef      	b.n	10c6 <_vprintk+0x32>
					padding = PAD_ZERO_BEFORE;
    12e6:	f04f 0801 	mov.w	r8, #1
    12ea:	e6ec      	b.n	10c6 <_vprintk+0x32>
				char *s = va_arg(ap, char *);
    12ec:	465c      	mov	r4, fp
			might_format = 0;
    12ee:	4605      	mov	r5, r0
    12f0:	e6e9      	b.n	10c6 <_vprintk+0x32>
	...

000012f4 <vprintk>:
{
    12f4:	b513      	push	{r0, r1, r4, lr}
	struct out_context ctx = { 0 };
    12f6:	ac02      	add	r4, sp, #8
    12f8:	2300      	movs	r3, #0
    12fa:	f844 3d04 	str.w	r3, [r4, #-4]!
	_vprintk(char_out, &ctx, fmt, ap);
    12fe:	4602      	mov	r2, r0
    1300:	460b      	mov	r3, r1
    1302:	4803      	ldr	r0, [pc, #12]	; (1310 <vprintk+0x1c>)
    1304:	4621      	mov	r1, r4
    1306:	f7ff fec5 	bl	1094 <_vprintk>
}
    130a:	9801      	ldr	r0, [sp, #4]
    130c:	b002      	add	sp, #8
    130e:	bd10      	pop	{r4, pc}
    1310:	00000fad 	.word	0x00000fad

00001314 <printk>:
{
    1314:	b40f      	push	{r0, r1, r2, r3}
    1316:	b507      	push	{r0, r1, r2, lr}
    1318:	a904      	add	r1, sp, #16
    131a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    131e:	9101      	str	r1, [sp, #4]
	ret = vprintk(fmt, ap);
    1320:	f7ff ffe8 	bl	12f4 <vprintk>
}
    1324:	b003      	add	sp, #12
    1326:	f85d eb04 	ldr.w	lr, [sp], #4
    132a:	b004      	add	sp, #16
    132c:	4770      	bx	lr
	...

00001330 <snprintk>:

int snprintk(char *str, size_t size, const char *fmt, ...)
{
    1330:	b40c      	push	{r2, r3}
    1332:	b530      	push	{r4, r5, lr}
    1334:	b085      	sub	sp, #20
    1336:	ab08      	add	r3, sp, #32
    1338:	4604      	mov	r4, r0
    133a:	f853 2b04 	ldr.w	r2, [r3], #4
	struct str_context ctx = { str, size, 0 };
    133e:	9001      	str	r0, [sp, #4]
    1340:	9102      	str	r1, [sp, #8]
    1342:	2500      	movs	r5, #0
	va_list ap;

	va_start(ap, fmt);
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    1344:	a901      	add	r1, sp, #4
    1346:	4807      	ldr	r0, [pc, #28]	; (1364 <snprintk+0x34>)
	va_start(ap, fmt);
    1348:	9300      	str	r3, [sp, #0]
	struct str_context ctx = { str, size, 0 };
    134a:	9503      	str	r5, [sp, #12]
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    134c:	f7ff fea2 	bl	1094 <_vprintk>
	va_end(ap);

	if (ctx.count < ctx.max) {
    1350:	9803      	ldr	r0, [sp, #12]
    1352:	9b02      	ldr	r3, [sp, #8]
    1354:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    1356:	bfb8      	it	lt
    1358:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    135a:	b005      	add	sp, #20
    135c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    1360:	b002      	add	sp, #8
    1362:	4770      	bx	lr
    1364:	0000105d 	.word	0x0000105d

00001368 <vsnprintk>:

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    1368:	b530      	push	{r4, r5, lr}
    136a:	b085      	sub	sp, #20
    136c:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    136e:	9001      	str	r0, [sp, #4]
    1370:	9102      	str	r1, [sp, #8]
    1372:	2500      	movs	r5, #0

	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    1374:	a901      	add	r1, sp, #4
    1376:	4805      	ldr	r0, [pc, #20]	; (138c <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    1378:	9503      	str	r5, [sp, #12]
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    137a:	f7ff fe8b 	bl	1094 <_vprintk>

	if (ctx.count < ctx.max) {
    137e:	9803      	ldr	r0, [sp, #12]
    1380:	9b02      	ldr	r3, [sp, #8]
    1382:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    1384:	bfb8      	it	lt
    1386:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    1388:	b005      	add	sp, #20
    138a:	bd30      	pop	{r4, r5, pc}
    138c:	0000105d 	.word	0x0000105d

00001390 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_ENTROPY_DEVICE_RANDOM_GENERATOR, 1);
GEN_ABSOLUTE_SYM(CONFIG_HAS_CMSIS, 1);
GEN_ABSOLUTE_SYM(CONFIG_HAS_NRFX, 1);
GEN_ABSOLUTE_SYM(CONFIG_HAS_SEGGER_RTT, 1);
GEN_ABSOLUTE_SYM(CONFIG_TEST_EXTRA_STACKSIZE, 0);
GEN_ABSOLUTE_SYM(CONFIG_NUM_IRQS, 46);
    1390:	4770      	bx	lr

00001392 <_GetAvailWriteSpace>:
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
    1392:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
    1394:	68c1      	ldr	r1, [r0, #12]
  if (RdOff <= WrOff) {
    1396:	428b      	cmp	r3, r1
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
    1398:	bf9d      	ittte	ls
    139a:	6882      	ldrls	r2, [r0, #8]
    139c:	18d2      	addls	r2, r2, r3
    139e:	f102 32ff 	addls.w	r2, r2, #4294967295	; 0xffffffff
  } else {
    r = RdOff - WrOff - 1u;
    13a2:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
    13a6:	bf94      	ite	ls
    13a8:	1a50      	subls	r0, r2, r1
    r = RdOff - WrOff - 1u;
    13aa:	1a58      	subhi	r0, r3, r1
  }
  return r;
}
    13ac:	4770      	bx	lr

000013ae <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    13ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  WrOff = pRing->WrOff;
    13b2:	68c7      	ldr	r7, [r0, #12]
  Rem = pRing->SizeOfBuffer - WrOff;
    13b4:	6886      	ldr	r6, [r0, #8]
    13b6:	1bf6      	subs	r6, r6, r7
  if (Rem > NumBytes) {
    13b8:	4296      	cmp	r6, r2
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    13ba:	4604      	mov	r4, r0
    13bc:	4688      	mov	r8, r1
    13be:	4615      	mov	r5, r2
    13c0:	6840      	ldr	r0, [r0, #4]
  if (Rem > NumBytes) {
    13c2:	d906      	bls.n	13d2 <_WriteNoCheck+0x24>
    memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
    13c4:	4438      	add	r0, r7
    13c6:	f7ff f928 	bl	61a <memcpy>
    pRing->WrOff = WrOff + NumBytes;
    13ca:	443d      	add	r5, r7
    pRing->WrOff = NumBytesAtOnce;
    13cc:	60e5      	str	r5, [r4, #12]
    13ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    memcpy(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
    13d2:	4632      	mov	r2, r6
    13d4:	4438      	add	r0, r7
    NumBytesAtOnce = NumBytes - Rem;
    13d6:	1bad      	subs	r5, r5, r6
    memcpy(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
    13d8:	f7ff f91f 	bl	61a <memcpy>
    memcpy(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
    13dc:	462a      	mov	r2, r5
    13de:	eb08 0106 	add.w	r1, r8, r6
    13e2:	6860      	ldr	r0, [r4, #4]
    13e4:	f7ff f919 	bl	61a <memcpy>
    13e8:	e7f0      	b.n	13cc <_WriteNoCheck+0x1e>

000013ea <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    13ea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  WrOff = pRing->WrOff;
    13ee:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    13f0:	4606      	mov	r6, r0
    13f2:	4689      	mov	r9, r1
    13f4:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
    13f6:	f04f 0800 	mov.w	r8, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
    13fa:	6934      	ldr	r4, [r6, #16]
    13fc:	68b3      	ldr	r3, [r6, #8]
    memcpy(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
    13fe:	6870      	ldr	r0, [r6, #4]
    if (RdOff > WrOff) {
    1400:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    1402:	bf28      	it	cs
    1404:	18e4      	addcs	r4, r4, r3
    1406:	3c01      	subs	r4, #1
    1408:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
    140a:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    140c:	42bc      	cmp	r4, r7
    140e:	bf28      	it	cs
    1410:	463c      	movcs	r4, r7
    1412:	4294      	cmp	r4, r2
    1414:	bf28      	it	cs
    1416:	4614      	movcs	r4, r2
    memcpy(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
    1418:	4649      	mov	r1, r9
    141a:	4428      	add	r0, r5
    141c:	4622      	mov	r2, r4
    141e:	f7ff f8fc 	bl	61a <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
    1422:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
    1424:	4425      	add	r5, r4
      WrOff = 0u;
    1426:	429d      	cmp	r5, r3
    1428:	bf08      	it	eq
    142a:	2500      	moveq	r5, #0
  } while (NumBytes);
    142c:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
    142e:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
    1430:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
    1432:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
    1434:	d1e1      	bne.n	13fa <_WriteBlocking+0x10>
}
    1436:	4640      	mov	r0, r8
    1438:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000143c <_DoInit>:
static void _DoInit(void) {
    143c:	b510      	push	{r4, lr}
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    143e:	4c11      	ldr	r4, [pc, #68]	; (1484 <_DoInit+0x48>)
  p->aUp[0].sName         = "Terminal";
    1440:	4a11      	ldr	r2, [pc, #68]	; (1488 <_DoInit+0x4c>)
    1442:	61a2      	str	r2, [r4, #24]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    1444:	2303      	movs	r3, #3
    1446:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    1448:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    144a:	4b10      	ldr	r3, [pc, #64]	; (148c <_DoInit+0x50>)
    144c:	61e3      	str	r3, [r4, #28]
  p->aDown[0].sName         = "Terminal";
    144e:	6622      	str	r2, [r4, #96]	; 0x60
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    1450:	f44f 6380 	mov.w	r3, #1024	; 0x400
  p->aDown[0].pBuffer       = _acDownBuffer;
    1454:	4a0e      	ldr	r2, [pc, #56]	; (1490 <_DoInit+0x54>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    1456:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
    1458:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
    145a:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    145c:	2210      	movs	r2, #16
  p->aUp[0].RdOff         = 0u;
    145e:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    1460:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    1462:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
    1464:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    1466:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    1468:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    146a:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
    146c:	4909      	ldr	r1, [pc, #36]	; (1494 <_DoInit+0x58>)
    146e:	1de0      	adds	r0, r4, #7
    1470:	f7ff f896 	bl	5a0 <strcpy>
  strcpy(&p->acID[0], "SEGGER");
    1474:	4908      	ldr	r1, [pc, #32]	; (1498 <_DoInit+0x5c>)
    1476:	4620      	mov	r0, r4
    1478:	f7ff f892 	bl	5a0 <strcpy>
  p->acID[6] = ' ';
    147c:	2320      	movs	r3, #32
    147e:	71a3      	strb	r3, [r4, #6]
    1480:	bd10      	pop	{r4, pc}
    1482:	bf00      	nop
    1484:	20002af8 	.word	0x20002af8
    1488:	0000d0fe 	.word	0x0000d0fe
    148c:	20000011 	.word	0x20000011
    1490:	20000001 	.word	0x20000001
    1494:	0000d107 	.word	0x0000d107
    1498:	0000d10b 	.word	0x0000d10b

0000149c <SEGGER_RTT_WriteNoLock>:
*    (1) If there is not enough space in the "Up"-buffer, remaining characters of pBuffer are dropped.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    149c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  pData = (const char *)pBuffer;
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
    149e:	4c18      	ldr	r4, [pc, #96]	; (1500 <SEGGER_RTT_WriteNoLock+0x64>)
    14a0:	2318      	movs	r3, #24
    14a2:	fb00 3503 	mla	r5, r0, r3, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    14a6:	fb03 4000 	mla	r0, r3, r0, r4
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
    14aa:	4425      	add	r5, r4
  switch (pRing->Flags) {
    14ac:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    14ae:	2c01      	cmp	r4, #1
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    14b0:	460f      	mov	r7, r1
    14b2:	4616      	mov	r6, r2
  switch (pRing->Flags) {
    14b4:	d011      	beq.n	14da <SEGGER_RTT_WriteNoLock+0x3e>
    14b6:	d303      	bcc.n	14c0 <SEGGER_RTT_WriteNoLock+0x24>
    14b8:	2c02      	cmp	r4, #2
    14ba:	d01b      	beq.n	14f4 <SEGGER_RTT_WriteNoLock+0x58>
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
    break;
  default:
    Status = 0u;
    14bc:	2400      	movs	r4, #0
    break;
  }
  //
  // Finish up.
  //
  return Status;
    14be:	e00a      	b.n	14d6 <SEGGER_RTT_WriteNoLock+0x3a>
    Avail = _GetAvailWriteSpace(pRing);
    14c0:	4628      	mov	r0, r5
    14c2:	f7ff ff66 	bl	1392 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
    14c6:	42b0      	cmp	r0, r6
    14c8:	d305      	bcc.n	14d6 <SEGGER_RTT_WriteNoLock+0x3a>
      _WriteNoCheck(pRing, pData, NumBytes);
    14ca:	4632      	mov	r2, r6
    14cc:	4639      	mov	r1, r7
    14ce:	4628      	mov	r0, r5
    14d0:	f7ff ff6d 	bl	13ae <_WriteNoCheck>
    14d4:	4634      	mov	r4, r6
}
    14d6:	4620      	mov	r0, r4
    14d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
    14da:	4628      	mov	r0, r5
    14dc:	f7ff ff59 	bl	1392 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
    14e0:	4286      	cmp	r6, r0
    14e2:	4634      	mov	r4, r6
    14e4:	bf28      	it	cs
    14e6:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
    14e8:	4622      	mov	r2, r4
    14ea:	4639      	mov	r1, r7
    14ec:	4628      	mov	r0, r5
    14ee:	f7ff ff5e 	bl	13ae <_WriteNoCheck>
    break;
    14f2:	e7f0      	b.n	14d6 <SEGGER_RTT_WriteNoLock+0x3a>
    Status = _WriteBlocking(pRing, pData, NumBytes);
    14f4:	4628      	mov	r0, r5
}
    14f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
    14fa:	f7ff bf76 	b.w	13ea <_WriteBlocking>
    14fe:	bf00      	nop
    1500:	20002af8 	.word	0x20002af8

00001504 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    1504:	f7ff bf9a 	b.w	143c <_DoInit>

00001508 <sys_rand32_get>:
#include <entropy.h>

static atomic_t entropy_driver;

u32_t sys_rand32_get(void)
{
    1508:	b513      	push	{r0, r1, r4, lr}
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    150a:	4c11      	ldr	r4, [pc, #68]	; (1550 <sys_rand32_get+0x48>)
    150c:	f3bf 8f5b 	dmb	ish
    1510:	6820      	ldr	r0, [r4, #0]
    1512:	f3bf 8f5b 	dmb	ish
	struct device *dev = (struct device *)atomic_get(&entropy_driver);
	u32_t random_num;
	int ret;

	if (unlikely(!dev)) {
    1516:	b960      	cbnz	r0, 1532 <sys_rand32_get+0x2a>
		/* Only one entropy device exists, so this is safe even
		 * if the whole operation isn't atomic.
		 */
		dev = device_get_binding(CONFIG_ENTROPY_NAME);
    1518:	480e      	ldr	r0, [pc, #56]	; (1554 <sys_rand32_get+0x4c>)
    151a:	f00a f9d9 	bl	b8d0 <device_get_binding>
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    151e:	f3bf 8f5b 	dmb	ish
    1522:	e854 3f00 	ldrex	r3, [r4]
    1526:	e844 0200 	strex	r2, r0, [r4]
    152a:	2a00      	cmp	r2, #0
    152c:	d1f9      	bne.n	1522 <sys_rand32_get+0x1a>
    152e:	f3bf 8f5b 	dmb	ish
					    u16_t length)
{
	const struct entropy_driver_api *api = dev->driver_api;

	__ASSERT(api->get_entropy, "Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
    1532:	6843      	ldr	r3, [r0, #4]
    1534:	2204      	movs	r2, #4
    1536:	681b      	ldr	r3, [r3, #0]
    1538:	eb0d 0102 	add.w	r1, sp, r2
    153c:	4798      	blx	r3
		atomic_set(&entropy_driver, (atomic_t)(uintptr_t)dev);
	}

	ret = entropy_get_entropy(dev, (u8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
    153e:	2800      	cmp	r0, #0
    1540:	da02      	bge.n	1548 <sys_rand32_get+0x40>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
    1542:	f000 fcff 	bl	1f44 <_timer_cycle_get_32>
    1546:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
    1548:	9801      	ldr	r0, [sp, #4]
    154a:	b002      	add	sp, #8
    154c:	bd10      	pop	{r4, pc}
    154e:	bf00      	nop
    1550:	20000414 	.word	0x20000414
    1554:	0000d112 	.word	0x0000d112

00001558 <rtt_console_init>:

	return character;
}

static int rtt_console_init(struct device *d)
{
    1558:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	SEGGER_RTT_Init();

	__printk_hook_install(rtt_console_out);
    155a:	4c05      	ldr	r4, [pc, #20]	; (1570 <rtt_console_init+0x18>)
	SEGGER_RTT_Init();
    155c:	f7ff ffd2 	bl	1504 <SEGGER_RTT_Init>
	__printk_hook_install(rtt_console_out);
    1560:	4620      	mov	r0, r4
    1562:	f7ff fd91 	bl	1088 <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
    1566:	4620      	mov	r0, r4
    1568:	f7ff f8aa 	bl	6c0 <__stdout_hook_install>

	return 0;
}
    156c:	2000      	movs	r0, #0
    156e:	bd10      	pop	{r4, pc}
    1570:	00001575 	.word	0x00001575

00001574 <rtt_console_out>:
{
    1574:	b537      	push	{r0, r1, r2, r4, r5, lr}
	char c = (char)character;
    1576:	a902      	add	r1, sp, #8
{
    1578:	4604      	mov	r4, r0
	char c = (char)character;
    157a:	f801 0d01 	strb.w	r0, [r1, #-1]!
    157e:	f04f 0320 	mov.w	r3, #32
    1582:	f3ef 8511 	mrs	r5, BASEPRI
    1586:	f383 8811 	msr	BASEPRI, r3
	SEGGER_RTT_WriteNoLock(0, &c, 1);
    158a:	2201      	movs	r2, #1
    158c:	2000      	movs	r0, #0
    158e:	f7ff ff85 	bl	149c <SEGGER_RTT_WriteNoLock>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1592:	f385 8811 	msr	BASEPRI, r5
}
    1596:	4620      	mov	r0, r4
    1598:	b003      	add	sp, #12
    159a:	bd30      	pop	{r4, r5, pc}

0000159c <_m16src_stop>:
		return -EINPROGRESS;
	}
}

static int _m16src_stop(struct device *dev, clock_control_subsys_t sub_system)
{
    159c:	b510      	push	{r4, lr}
	__asm__ volatile(
    159e:	f04f 0320 	mov.w	r3, #32
    15a2:	f3ef 8211 	mrs	r2, BASEPRI
    15a6:	f383 8811 	msr	BASEPRI, r3
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
    15aa:	4c11      	ldr	r4, [pc, #68]	; (15f0 <_m16src_stop+0x54>)
    15ac:	7823      	ldrb	r3, [r4, #0]
    15ae:	b923      	cbnz	r3, 15ba <_m16src_stop+0x1e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    15b0:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EALREADY;
    15b4:	f06f 0044 	mvn.w	r0, #68	; 0x44
    15b8:	bd10      	pop	{r4, pc}
	}

	if (--m16src_ref) {
    15ba:	3b01      	subs	r3, #1
    15bc:	b2db      	uxtb	r3, r3
    15be:	7023      	strb	r3, [r4, #0]
    15c0:	b123      	cbz	r3, 15cc <_m16src_stop+0x30>
    15c2:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EBUSY;
    15c6:	f06f 000f 	mvn.w	r0, #15
    15ca:	bd10      	pop	{r4, pc}
	}

	if (m16src_grd) {
    15cc:	4b09      	ldr	r3, [pc, #36]	; (15f4 <_m16src_stop+0x58>)
    15ce:	7818      	ldrb	r0, [r3, #0]
    15d0:	2101      	movs	r1, #1
    15d2:	b128      	cbz	r0, 15e0 <_m16src_stop+0x44>
		m16src_ref++;
    15d4:	7021      	strb	r1, [r4, #0]
    15d6:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EAGAIN;
    15da:	f06f 000a 	mvn.w	r0, #10
    15de:	bd10      	pop	{r4, pc}
	}

	m16src_grd = 1;
    15e0:	7019      	strb	r1, [r3, #0]
    15e2:	f382 8811 	msr	BASEPRI, r2

	irq_unlock(imask);

	/* re-entrancy and mult-context safe, and reference count is zero, */

	NRF_CLOCK->TASKS_HFCLKSTOP = 1;
    15e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    15ea:	6051      	str	r1, [r2, #4]

	/* release resource guard */
	m16src_grd = 0;
    15ec:	7018      	strb	r0, [r3, #0]

	return 0;
}
    15ee:	bd10      	pop	{r4, pc}
    15f0:	2000041a 	.word	0x2000041a
    15f4:	20000419 	.word	0x20000419

000015f8 <_clock_control_init>:
		}
	}
}

static int _clock_control_init(struct device *dev)
{
    15f8:	b508      	push	{r3, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(NRF5_IRQ_POWER_CLOCK_IRQn,
    15fa:	2200      	movs	r2, #0
    15fc:	4610      	mov	r0, r2
    15fe:	2101      	movs	r1, #1
    1600:	f7ff fb60 	bl	cc4 <_irq_priority_set>
		    CONFIG_CLOCK_CONTROL_NRF5_IRQ_PRIORITY,
		    _power_clock_isr, 0, 0);

	irq_enable(POWER_CLOCK_IRQn);
    1604:	2000      	movs	r0, #0
    1606:	f7ff fb2b 	bl	c60 <_arch_irq_enable>

	return 0;
}
    160a:	2000      	movs	r0, #0
    160c:	bd08      	pop	{r3, pc}
	...

00001610 <_m16src_start>:
{
    1610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    1612:	f04f 0220 	mov.w	r2, #32
    1616:	f3ef 8311 	mrs	r3, BASEPRI
    161a:	f382 8811 	msr	BASEPRI, r2
	if (m16src_ref++) {
    161e:	4a25      	ldr	r2, [pc, #148]	; (16b4 <_m16src_start+0xa4>)
    1620:	7810      	ldrb	r0, [r2, #0]
    1622:	1c44      	adds	r4, r0, #1
    1624:	7014      	strb	r4, [r2, #0]
    1626:	b160      	cbz	r0, 1642 <_m16src_start+0x32>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1628:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) {
    162c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1630:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		return -EINPROGRESS;
    1634:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1638:	bf14      	ite	ne
    163a:	2000      	movne	r0, #0
    163c:	f06f 0043 	mvneq.w	r0, #67	; 0x43
}
    1640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (m16src_grd) {
    1642:	4d1d      	ldr	r5, [pc, #116]	; (16b8 <_m16src_start+0xa8>)
    1644:	782f      	ldrb	r7, [r5, #0]
    1646:	b12f      	cbz	r7, 1654 <_m16src_start+0x44>
		m16src_ref--;
    1648:	7010      	strb	r0, [r2, #0]
    164a:	f383 8811 	msr	BASEPRI, r3
		return -EAGAIN;
    164e:	f06f 000a 	mvn.w	r0, #10
    1652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	m16src_grd = 1;
    1654:	2601      	movs	r6, #1
    1656:	702e      	strb	r6, [r5, #0]
    1658:	f383 8811 	msr	BASEPRI, r3
    165c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
	if (blocking) {
    1660:	b319      	cbz	r1, 16aa <_m16src_start+0x9a>
		irq_disable(POWER_CLOCK_IRQn);
    1662:	4638      	mov	r0, r7
    1664:	f7ff fb0c 	bl	c80 <_arch_irq_disable>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1668:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
		intenset = NRF_CLOCK->INTENSET;
    166c:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    1670:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    1674:	6026      	str	r6, [r4, #0]
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    1676:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    167a:	b192      	cbz	r2, 16a2 <_m16src_start+0x92>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    167c:	2200      	movs	r2, #0
    167e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1682:	4a0e      	ldr	r2, [pc, #56]	; (16bc <_m16src_start+0xac>)
		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
    1684:	f013 0f01 	tst.w	r3, #1
    1688:	f04f 0301 	mov.w	r3, #1
			NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    168c:	bf08      	it	eq
    168e:	f8c4 3308 	streq.w	r3, [r4, #776]	; 0x308
		irq_enable(POWER_CLOCK_IRQn);
    1692:	2000      	movs	r0, #0
    1694:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    1698:	f7ff fae2 	bl	c60 <_arch_irq_enable>
	m16src_grd = 0;
    169c:	2300      	movs	r3, #0
    169e:	702b      	strb	r3, [r5, #0]
    16a0:	e7c4      	b.n	162c <_m16src_start+0x1c>
			__WFE();
    16a2:	bf20      	wfe
			__SEV();
    16a4:	bf40      	sev
			__WFE();
    16a6:	bf20      	wfe
    16a8:	e7e5      	b.n	1676 <_m16src_start+0x66>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    16aa:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    16ae:	6026      	str	r6, [r4, #0]
    16b0:	e7f4      	b.n	169c <_m16src_start+0x8c>
    16b2:	bf00      	nop
    16b4:	2000041a 	.word	0x2000041a
    16b8:	20000419 	.word	0x20000419
    16bc:	e000e100 	.word	0xe000e100

000016c0 <_k32src_start>:
{
    16c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    16c2:	4606      	mov	r6, r0
    16c4:	460c      	mov	r4, r1
	__asm__ volatile(
    16c6:	f04f 0220 	mov.w	r2, #32
    16ca:	f3ef 8311 	mrs	r3, BASEPRI
    16ce:	f382 8811 	msr	BASEPRI, r2
	if (k32src_initialized) {
    16d2:	4a2c      	ldr	r2, [pc, #176]	; (1784 <_k32src_start+0xc4>)
    16d4:	7815      	ldrb	r5, [r2, #0]
    16d6:	b165      	cbz	r5, 16f2 <_k32src_start+0x32>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    16d8:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) {
    16dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    16e0:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
		return -EINPROGRESS;
    16e4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
}
    16e8:	bf0c      	ite	eq
    16ea:	f06f 0043 	mvneq.w	r0, #67	; 0x43
    16ee:	2000      	movne	r0, #0
    16f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	k32src_initialized = 1;
    16f2:	2701      	movs	r7, #1
    16f4:	7017      	strb	r7, [r2, #0]
    16f6:	f383 8811 	msr	BASEPRI, r3
	irq_disable(POWER_CLOCK_IRQn);
    16fa:	4628      	mov	r0, r5
    16fc:	f7ff fac0 	bl	c80 <_arch_irq_disable>
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    1700:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    1704:	2102      	movs	r1, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    1706:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
	intenset = NRF_CLOCK->INTENSET;
    170a:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    170e:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
    1712:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
	NRF_CLOCK->TASKS_LFCLKSTART = 1;
    1716:	609f      	str	r7, [r3, #8]
	while (NRF_CLOCK->EVENTS_LFCLKSTARTED == 0) {
    1718:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    171c:	b371      	cbz	r1, 177c <_k32src_start+0xbc>
	if (!(intenset & CLOCK_INTENSET_LFCLKSTARTED_Msk)) {
    171e:	0792      	lsls	r2, r2, #30
    1720:	4f19      	ldr	r7, [pc, #100]	; (1788 <_k32src_start+0xc8>)
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    1722:	bf58      	it	pl
    1724:	2202      	movpl	r2, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    1726:	f04f 0100 	mov.w	r1, #0
    172a:	f04f 0501 	mov.w	r5, #1
    172e:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	irq_enable(POWER_CLOCK_IRQn);
    1732:	f04f 0000 	mov.w	r0, #0
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    1736:	bf58      	it	pl
    1738:	f8c3 2308 	strpl.w	r2, [r3, #776]	; 0x308
    173c:	f8c7 5180 	str.w	r5, [r7, #384]	; 0x180
	irq_enable(POWER_CLOCK_IRQn);
    1740:	f7ff fa8e 	bl	c60 <_arch_irq_enable>
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    1744:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	NRF_CLOCK->EVENTS_DONE = 0;
    1748:	2100      	movs	r1, #0
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    174a:	2218      	movs	r2, #24
    174c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	NRF_CLOCK->EVENTS_DONE = 0;
    1750:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
	NRF_CLOCK->EVENTS_CTTO = 0;
    1754:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    1758:	f014 0103 	ands.w	r1, r4, #3
    175c:	d1be      	bne.n	16dc <_k32src_start+0x1c>
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
    175e:	2010      	movs	r0, #16
    1760:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
		NRF_CLOCK->INTENSET =
    1764:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    1768:	4630      	mov	r0, r6
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    176a:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    176e:	f7ff ff4f 	bl	1610 <_m16src_start>
		if (!err) {
    1772:	2800      	cmp	r0, #0
    1774:	d1b2      	bne.n	16dc <_k32src_start+0x1c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1776:	f8c7 5100 	str.w	r5, [r7, #256]	; 0x100
    177a:	e7af      	b.n	16dc <_k32src_start+0x1c>
		__WFE();
    177c:	bf20      	wfe
		__SEV();
    177e:	bf40      	sev
		__WFE();
    1780:	bf20      	wfe
    1782:	e7c9      	b.n	1718 <_k32src_start+0x58>
    1784:	20000418 	.word	0x20000418
    1788:	e000e100 	.word	0xe000e100

0000178c <_power_clock_isr>:
{
    178c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    178e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
{
    1792:	4605      	mov	r5, r0
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    1794:	f8d3 e108 	ldr.w	lr, [r3, #264]	; 0x108
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    1798:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
    179c:	f8d3 440c 	ldr.w	r4, [r3, #1036]	; 0x40c
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
    17a0:	f8d3 7100 	ldr.w	r7, [r3, #256]	; 0x100
	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
    17a4:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
	done = (NRF_CLOCK->EVENTS_DONE != 0);
    17a8:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    17ac:	f8d3 6110 	ldr.w	r6, [r3, #272]	; 0x110
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    17b0:	f002 0201 	and.w	r2, r2, #1
	if (pof) {
    17b4:	f1be 0f00 	cmp.w	lr, #0
    17b8:	d003      	beq.n	17c2 <_power_clock_isr+0x36>
		NRF_POWER->EVENTS_POFWARN = 0;
    17ba:	f04f 0e00 	mov.w	lr, #0
    17be:	f8c3 e108 	str.w	lr, [r3, #264]	; 0x108
	if (hf) {
    17c2:	b127      	cbz	r7, 17ce <_power_clock_isr+0x42>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    17c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    17c8:	2700      	movs	r7, #0
    17ca:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
	if (hf_intenset && hf_stat) {
    17ce:	b13a      	cbz	r2, 17e0 <_power_clock_isr+0x54>
    17d0:	03e3      	lsls	r3, r4, #15
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    17d2:	bf41      	itttt	mi
    17d4:	f04f 4380 	movmi.w	r3, #1073741824	; 0x40000000
    17d8:	2201      	movmi	r2, #1
    17da:	f8c3 2308 	strmi.w	r2, [r3, #776]	; 0x308
		NRF_CLOCK->TASKS_CAL = 1;
    17de:	611a      	strmi	r2, [r3, #16]
	if (lf) {
    17e0:	b120      	cbz	r0, 17ec <_power_clock_isr+0x60>
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    17e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    17e6:	2200      	movs	r2, #0
    17e8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (done) {
    17ec:	b149      	cbz	r1, 1802 <_power_clock_isr+0x76>
		NRF_CLOCK->EVENTS_DONE = 0;
    17ee:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    17f2:	2100      	movs	r1, #0
    17f4:	f8c4 110c 	str.w	r1, [r4, #268]	; 0x10c
		err = _m16src_stop(dev, NULL);
    17f8:	4628      	mov	r0, r5
    17fa:	f7ff fecf 	bl	159c <_m16src_stop>
		NRF_CLOCK->TASKS_CTSTART = 1;
    17fe:	2301      	movs	r3, #1
    1800:	6163      	str	r3, [r4, #20]
	if (ctto) {
    1802:	b176      	cbz	r6, 1822 <_power_clock_isr+0x96>
		NRF_CLOCK->EVENTS_CTTO = 0;
    1804:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1808:	2100      	movs	r1, #0
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    180a:	2401      	movs	r4, #1
		NRF_CLOCK->EVENTS_CTTO = 0;
    180c:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
		err = _m16src_start(dev, false);
    1810:	4628      	mov	r0, r5
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    1812:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    1816:	f7ff fefb 	bl	1610 <_m16src_start>
		if (!err) {
    181a:	b910      	cbnz	r0, 1822 <_power_clock_isr+0x96>
    181c:	4b01      	ldr	r3, [pc, #4]	; (1824 <_power_clock_isr+0x98>)
    181e:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
    1822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1824:	e000e100 	.word	0xe000e100

00001828 <gpiote_find_channel>:
#define GPIOTE_CFG_PIN_GET(config) ((config & GPIOTE_CONFIG_PSEL_Msk) >> \
				GPIOTE_CONFIG_PSEL_Pos)

static int gpiote_find_channel(struct device *dev, u32_t pin)
{
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1828:	6803      	ldr	r3, [r0, #0]
    182a:	689b      	ldr	r3, [r3, #8]
    182c:	689a      	ldr	r2, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
		if ((data->gpiote_chan_mask & BIT(i)) &&
    182e:	6883      	ldr	r3, [r0, #8]
{
    1830:	b510      	push	{r4, lr}
		if ((data->gpiote_chan_mask & BIT(i)) &&
    1832:	68dc      	ldr	r4, [r3, #12]
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    1834:	2000      	movs	r0, #0
		if ((data->gpiote_chan_mask & BIT(i)) &&
    1836:	fa24 f300 	lsr.w	r3, r4, r0
    183a:	07db      	lsls	r3, r3, #31
    183c:	d507      	bpl.n	184e <gpiote_find_channel+0x26>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin)) {
    183e:	f500 73a2 	add.w	r3, r0, #324	; 0x144
    1842:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1846:	f3c3 2304 	ubfx	r3, r3, #8, #5
		if ((data->gpiote_chan_mask & BIT(i)) &&
    184a:	428b      	cmp	r3, r1
    184c:	d004      	beq.n	1858 <gpiote_find_channel+0x30>
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    184e:	3001      	adds	r0, #1
    1850:	2808      	cmp	r0, #8
    1852:	d1f0      	bne.n	1836 <gpiote_find_channel+0xe>
			return i;
		}
	}

	return -ENODEV;
    1854:	f06f 0012 	mvn.w	r0, #18
}
    1858:	bd10      	pop	{r4, pc}

0000185a <gpio_nrf5_read>:
}

static int gpio_nrf5_read(struct device *dev,
			  int access_op, u32_t pin, u32_t *value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    185a:	6800      	ldr	r0, [r0, #0]
    185c:	6880      	ldr	r0, [r0, #8]
    185e:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
    1860:	b941      	cbnz	r1, 1874 <gpio_nrf5_read+0x1a>
		*value = (gpio->IN >> pin) & 0x1;
    1862:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    1866:	fa21 f202 	lsr.w	r2, r1, r2
    186a:	f002 0201 	and.w	r2, r2, #1
	} else {
		*value = gpio->IN;
    186e:	601a      	str	r2, [r3, #0]
	}
	return 0;
}
    1870:	2000      	movs	r0, #0
    1872:	4770      	bx	lr
		*value = gpio->IN;
    1874:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
    1878:	e7f9      	b.n	186e <gpio_nrf5_read+0x14>

0000187a <gpio_nrf5_write>:

static int gpio_nrf5_write(struct device *dev,
			   int access_op, u32_t pin, u32_t value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    187a:	6800      	ldr	r0, [r0, #0]
    187c:	6880      	ldr	r0, [r0, #8]
    187e:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
    1880:	b949      	cbnz	r1, 1896 <gpio_nrf5_write+0x1c>
    1882:	2101      	movs	r1, #1
		if (value) { /* 1 */
			gpio->OUTSET = BIT(pin);
    1884:	4091      	lsls	r1, r2
		if (value) { /* 1 */
    1886:	b11b      	cbz	r3, 1890 <gpio_nrf5_write+0x16>
			gpio->OUTSET = BIT(pin);
    1888:	f8c0 1508 	str.w	r1, [r0, #1288]	; 0x508
		}
	} else {
		gpio->OUT = value;
	}
	return 0;
}
    188c:	2000      	movs	r0, #0
    188e:	4770      	bx	lr
			gpio->OUTCLR = BIT(pin);
    1890:	f8c0 150c 	str.w	r1, [r0, #1292]	; 0x50c
    1894:	e7fa      	b.n	188c <gpio_nrf5_write+0x12>
		gpio->OUT = value;
    1896:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
    189a:	e7f7      	b.n	188c <gpio_nrf5_write+0x12>

0000189c <gpio_nrf5_manage_callback>:

static int gpio_nrf5_manage_callback(struct device *dev,
				    struct gpio_callback *callback, bool set)
{
    189c:	b510      	push	{r4, lr}
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    189e:	6883      	ldr	r3, [r0, #8]
					 bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (set) {
    18a0:	b13a      	cbz	r2, 18b2 <gpio_nrf5_manage_callback+0x16>
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
    18a2:	681a      	ldr	r2, [r3, #0]
    18a4:	600a      	str	r2, [r1, #0]
	list->head = node;

	if (!list->tail) {
    18a6:	685a      	ldr	r2, [r3, #4]
	list->head = node;
    18a8:	6019      	str	r1, [r3, #0]
	if (!list->tail) {
    18aa:	b902      	cbnz	r2, 18ae <gpio_nrf5_manage_callback+0x12>
		list->tail = list->head;
    18ac:	6059      	str	r1, [r3, #4]

	_gpio_manage_callback(&data->callbacks, callback, set);

	return 0;
}
    18ae:	2000      	movs	r0, #0
    18b0:	bd10      	pop	{r4, pc}
    18b2:	6818      	ldr	r0, [r3, #0]
					     sys_snode_t *node)
{
	sys_snode_t *prev = NULL;
	sys_snode_t *test;

	SYS_SLIST_FOR_EACH_NODE(list, test) {
    18b4:	2800      	cmp	r0, #0
    18b6:	d0fa      	beq.n	18ae <gpio_nrf5_manage_callback+0x12>
		if (test == node) {
    18b8:	4281      	cmp	r1, r0
    18ba:	d10e      	bne.n	18da <gpio_nrf5_manage_callback+0x3e>
    18bc:	685c      	ldr	r4, [r3, #4]
    18be:	6808      	ldr	r0, [r1, #0]
	if (!prev_node) {
    18c0:	b932      	cbnz	r2, 18d0 <gpio_nrf5_manage_callback+0x34>
		if (list->tail == node) {
    18c2:	42a1      	cmp	r1, r4
		list->head = node->next;
    18c4:	6018      	str	r0, [r3, #0]
		if (list->tail == node) {
    18c6:	d100      	bne.n	18ca <gpio_nrf5_manage_callback+0x2e>
			list->tail = list->head;
    18c8:	6058      	str	r0, [r3, #4]
	node->next = NULL;
    18ca:	2300      	movs	r3, #0
    18cc:	600b      	str	r3, [r1, #0]
    18ce:	e7ee      	b.n	18ae <gpio_nrf5_manage_callback+0x12>
		if (list->tail == node) {
    18d0:	42a1      	cmp	r1, r4
		prev_node->next = node->next;
    18d2:	6010      	str	r0, [r2, #0]
			list->tail = prev_node;
    18d4:	bf08      	it	eq
    18d6:	605a      	streq	r2, [r3, #4]
    18d8:	e7f7      	b.n	18ca <gpio_nrf5_manage_callback+0x2e>
	SYS_SLIST_FOR_EACH_NODE(list, test) {
    18da:	4602      	mov	r2, r0
    18dc:	6800      	ldr	r0, [r0, #0]
    18de:	e7e9      	b.n	18b4 <gpio_nrf5_manage_callback+0x18>

000018e0 <gpio_nrf5_enable_callback>:


static int gpio_nrf5_enable_callback(struct device *dev,
				    int access_op, u32_t pin)
{
    18e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    18e2:	4614      	mov	r4, r2
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    18e4:	6802      	ldr	r2, [r0, #0]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    18e6:	6887      	ldr	r7, [r0, #8]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    18e8:	6892      	ldr	r2, [r2, #8]
	int i;

	if (access_op == GPIO_ACCESS_BY_PIN) {
    18ea:	460d      	mov	r5, r1
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    18ec:	6896      	ldr	r6, [r2, #8]
	if (access_op == GPIO_ACCESS_BY_PIN) {
    18ee:	b9a1      	cbnz	r1, 191a <gpio_nrf5_enable_callback+0x3a>

		i = gpiote_find_channel(dev, pin);
    18f0:	4621      	mov	r1, r4
    18f2:	f7ff ff99 	bl	1828 <gpiote_find_channel>
		if (i < 0) {
    18f6:	2800      	cmp	r0, #0
    18f8:	db11      	blt.n	191e <gpio_nrf5_enable_callback+0x3e>
			return i;
		}

		data->pin_callback_enables |= BIT(pin);
    18fa:	68ba      	ldr	r2, [r7, #8]
    18fc:	2301      	movs	r3, #1
    18fe:	fa03 f404 	lsl.w	r4, r3, r4
    1902:	4314      	orrs	r4, r2
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
    1904:	f100 0240 	add.w	r2, r0, #64	; 0x40
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
    1908:	fa03 f000 	lsl.w	r0, r3, r0
		data->pin_callback_enables |= BIT(pin);
    190c:	60bc      	str	r4, [r7, #8]
		gpiote->EVENTS_IN[i] = 0;
    190e:	f846 5022 	str.w	r5, [r6, r2, lsl #2]
		gpiote->INTENSET = BIT(i);
    1912:	f8c6 0304 	str.w	r0, [r6, #772]	; 0x304
	} else {
		return -ENOTSUP;
	}

	return 0;
    1916:	4628      	mov	r0, r5
    1918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOTSUP;
    191a:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
    191e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00001920 <gpio_nrf5_disable_callback>:


static int gpio_nrf5_disable_callback(struct device *dev,
				     int access_op, u32_t pin)
{
    1920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1922:	4614      	mov	r4, r2
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1924:	6802      	ldr	r2, [r0, #0]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    1926:	6886      	ldr	r6, [r0, #8]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1928:	6892      	ldr	r2, [r2, #8]
	int i;

	if (access_op == GPIO_ACCESS_BY_PIN) {
    192a:	460d      	mov	r5, r1
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    192c:	6897      	ldr	r7, [r2, #8]
	if (access_op == GPIO_ACCESS_BY_PIN) {
    192e:	b989      	cbnz	r1, 1954 <gpio_nrf5_disable_callback+0x34>
		i = gpiote_find_channel(dev, pin);
    1930:	4621      	mov	r1, r4
    1932:	f7ff ff79 	bl	1828 <gpiote_find_channel>
		if (i < 0) {
    1936:	2800      	cmp	r0, #0
    1938:	db0e      	blt.n	1958 <gpio_nrf5_disable_callback+0x38>
			return i;
		}

		data->pin_callback_enables &= ~(BIT(pin));
    193a:	68b2      	ldr	r2, [r6, #8]
    193c:	2301      	movs	r3, #1
    193e:	fa03 f404 	lsl.w	r4, r3, r4
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR = BIT(i);
    1942:	fa03 f000 	lsl.w	r0, r3, r0
		data->pin_callback_enables &= ~(BIT(pin));
    1946:	ea22 0404 	bic.w	r4, r2, r4
    194a:	60b4      	str	r4, [r6, #8]
		gpiote->INTENCLR = BIT(i);
    194c:	f8c7 0308 	str.w	r0, [r7, #776]	; 0x308
	} else {
		return -ENOTSUP;
	}

	return 0;
    1950:	4628      	mov	r0, r5
    1952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOTSUP;
    1954:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
    1958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000195a <gpio_nrf5_P0_init>:
		    &gpio_data_P0, &gpio_nrf5_P0_cfg,
		    POST_KERNEL, CONFIG_KERNEL_INIT_PRIORITY_DEFAULT,
		    &gpio_nrf5_drv_api_funcs);

static int gpio_nrf5_P0_init(struct device *dev)
{
    195a:	b508      	push	{r3, lr}
	IRQ_CONNECT(NRF5_IRQ_GPIOTE_IRQn, CONFIG_GPIO_NRF5_PORT_P0_PRI,
    195c:	2200      	movs	r2, #0
    195e:	2101      	movs	r1, #1
    1960:	2006      	movs	r0, #6
    1962:	f7ff f9af 	bl	cc4 <_irq_priority_set>
		    gpio_nrf5_port_isr, DEVICE_GET(gpio_nrf5_P0), 0);

	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    1966:	2006      	movs	r0, #6
    1968:	f7ff f97a 	bl	c60 <_arch_irq_enable>

	return 0;
}
    196c:	2000      	movs	r0, #0
    196e:	bd08      	pop	{r3, pc}

00001970 <gpio_nrf5_port_isr>:
{
    1970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1972:	6803      	ldr	r3, [r0, #0]
{
    1974:	4606      	mov	r6, r0
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1976:	689b      	ldr	r3, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    1978:	68b4      	ldr	r4, [r6, #8]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    197a:	6898      	ldr	r0, [r3, #8]
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    197c:	2200      	movs	r2, #0
	u32_t enabled_int, int_status = 0;
    197e:	4613      	mov	r3, r2
			gpiote->EVENTS_IN[i] = 0;
    1980:	4615      	mov	r5, r2
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
    1982:	2701      	movs	r7, #1
    1984:	eb00 0182 	add.w	r1, r0, r2, lsl #2
		if (gpiote->EVENTS_IN[i]) {
    1988:	f8d1 e100 	ldr.w	lr, [r1, #256]	; 0x100
    198c:	f1be 0f00 	cmp.w	lr, #0
    1990:	d008      	beq.n	19a4 <gpio_nrf5_port_isr+0x34>
			gpiote->EVENTS_IN[i] = 0;
    1992:	f8c1 5100 	str.w	r5, [r1, #256]	; 0x100
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
    1996:	f8d1 1510 	ldr.w	r1, [r1, #1296]	; 0x510
    199a:	f3c1 2104 	ubfx	r1, r1, #8, #5
    199e:	fa07 f101 	lsl.w	r1, r7, r1
    19a2:	430b      	orrs	r3, r1
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    19a4:	3201      	adds	r2, #1
    19a6:	2a08      	cmp	r2, #8
    19a8:	d1ec      	bne.n	1984 <gpio_nrf5_port_isr+0x14>
	enabled_int = int_status & data->pin_callback_enables;
    19aa:	68a5      	ldr	r5, [r4, #8]
	irq_disable(NRF5_IRQ_GPIOTE_IRQn);
    19ac:	2006      	movs	r0, #6
	enabled_int = int_status & data->pin_callback_enables;
    19ae:	401d      	ands	r5, r3
	irq_disable(NRF5_IRQ_GPIOTE_IRQn);
    19b0:	f7ff f966 	bl	c80 <_arch_irq_disable>
    19b4:	6824      	ldr	r4, [r4, #0]
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
    19b6:	b924      	cbnz	r4, 19c2 <gpio_nrf5_port_isr+0x52>
	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    19b8:	2006      	movs	r0, #6
}
    19ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    19be:	f7ff b94f 	b.w	c60 <_arch_irq_enable>
		if (cb->pin_mask & pins) {
    19c2:	68a3      	ldr	r3, [r4, #8]
    19c4:	421d      	tst	r5, r3
    19c6:	d0f5      	beq.n	19b4 <gpio_nrf5_port_isr+0x44>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
    19c8:	6863      	ldr	r3, [r4, #4]
    19ca:	462a      	mov	r2, r5
    19cc:	4621      	mov	r1, r4
    19ce:	4630      	mov	r0, r6
    19d0:	4798      	blx	r3
    19d2:	e7ef      	b.n	19b4 <gpio_nrf5_port_isr+0x44>

000019d4 <gpio_nrf5_config>:
{
    19d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    19d8:	4614      	mov	r4, r2
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    19da:	6802      	ldr	r2, [r0, #0]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    19dc:	6887      	ldr	r7, [r0, #8]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    19de:	6892      	ldr	r2, [r2, #8]
{
    19e0:	4680      	mov	r8, r0
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    19e2:	6895      	ldr	r5, [r2, #8]
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    19e4:	6810      	ldr	r0, [r2, #0]
	if (access_op == GPIO_ACCESS_BY_PIN) {
    19e6:	b119      	cbz	r1, 19f0 <gpio_nrf5_config+0x1c>
		return -ENOTSUP;
    19e8:	f06f 0022 	mvn.w	r0, #34	; 0x22
    19ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    19f0:	f403 7240 	and.w	r2, r3, #768	; 0x300
    19f4:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
		int ds_low = (flags & GPIO_DS_LOW_MASK) >> GPIO_DS_LOW_POS;
    19f8:	f3c3 3101 	ubfx	r1, r3, #12, #2
		int ds_high = (flags & GPIO_DS_HIGH_MASK) >> GPIO_DS_HIGH_POS;
    19fc:	f3c3 3981 	ubfx	r9, r3, #14, #2
		unsigned int sense = (flags & GPIO_PIN_CNF_SENSE_Msk);
    1a00:	f403 3e40 	and.w	lr, r3, #196608	; 0x30000
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    1a04:	d056      	beq.n	1ab4 <gpio_nrf5_config+0xe0>
		u8_t pull = GPIO_PULL_DISABLE;
    1a06:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    1a0a:	bf0c      	ite	eq
    1a0c:	2204      	moveq	r2, #4
    1a0e:	2200      	movne	r2, #0
			sense = GPIO_SENSE_DISABLE;
    1a10:	f5be 3f80 	cmp.w	lr, #65536	; 0x10000
    1a14:	bf08      	it	eq
    1a16:	f04f 0e00 	moveq.w	lr, #0
		if ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT) {
    1a1a:	f013 0f01 	tst.w	r3, #1
    1a1e:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 1ae8 <gpio_nrf5_config+0x114>
    1a22:	ea4f 0181 	mov.w	r1, r1, lsl #2
    1a26:	f504 76e0 	add.w	r6, r4, #448	; 0x1c0
    1a2a:	d04e      	beq.n	1aca <gpio_nrf5_config+0xf6>
			if (pull == GPIO_PULL_UP) {
    1a2c:	2a0c      	cmp	r2, #12
    1a2e:	d143      	bne.n	1ab8 <gpio_nrf5_config+0xe4>
				gpio->OUTSET = BIT(pin);
    1a30:	f04f 0e01 	mov.w	lr, #1
    1a34:	fa0e fe04 	lsl.w	lr, lr, r4
    1a38:	f8c0 e508 	str.w	lr, [r0, #1288]	; 0x508
					      drive_strength[ds_low][ds_high] |
    1a3c:	4449      	add	r1, r9
					      GPIO_INPUT_DISCONNECT |
    1a3e:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
    1a42:	f041 0103 	orr.w	r1, r1, #3
    1a46:	430a      	orrs	r2, r1
			gpio->PIN_CNF[pin] = (sense |
    1a48:	f840 2026 	str.w	r2, [r0, r6, lsl #2]
	if (flags & GPIO_INT) {
    1a4c:	f013 0002 	ands.w	r0, r3, #2
    1a50:	d047      	beq.n	1ae2 <gpio_nrf5_config+0x10e>
		if (flags & GPIO_INT_EDGE) {
    1a52:	0699      	lsls	r1, r3, #26
    1a54:	d5c8      	bpl.n	19e8 <gpio_nrf5_config+0x14>
			if (flags & GPIO_INT_DOUBLE_EDGE) {
    1a56:	065a      	lsls	r2, r3, #25
    1a58:	d43e      	bmi.n	1ad8 <gpio_nrf5_config+0x104>
				config |= GPIOTE_CFG_POL_H2L;
    1a5a:	f013 0f04 	tst.w	r3, #4
    1a5e:	bf14      	ite	ne
    1a60:	f44f 3680 	movne.w	r6, #65536	; 0x10000
    1a64:	f44f 3600 	moveq.w	r6, #131072	; 0x20000
		if (__builtin_popcount(data->gpiote_chan_mask) ==
    1a68:	68f8      	ldr	r0, [r7, #12]
    1a6a:	f7fe fc15 	bl	298 <__popcountsi2>
    1a6e:	2808      	cmp	r0, #8
    1a70:	d035      	beq.n	1ade <gpio_nrf5_config+0x10a>
		int i = gpiote_find_channel(dev, pin);
    1a72:	4621      	mov	r1, r4
    1a74:	4640      	mov	r0, r8
    1a76:	f7ff fed7 	bl	1828 <gpiote_find_channel>
		if (i < 0) {
    1a7a:	2800      	cmp	r0, #0
    1a7c:	68fb      	ldr	r3, [r7, #12]
    1a7e:	da08      	bge.n	1a92 <gpio_nrf5_config+0xbe>
			i = __builtin_ffs(~(data->gpiote_chan_mask)) - 1;
    1a80:	43da      	mvns	r2, r3
    1a82:	fa92 f0a2 	rbit	r0, r2
    1a86:	2a00      	cmp	r2, #0
    1a88:	fab0 f080 	clz	r0, r0
    1a8c:	bf08      	it	eq
    1a8e:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
		config |= GPIOTE_CFG_PIN(pin);
    1a92:	0224      	lsls	r4, r4, #8
		data->gpiote_chan_mask |= BIT(i);
    1a94:	2201      	movs	r2, #1
		config |= GPIOTE_CFG_PIN(pin);
    1a96:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
		data->gpiote_chan_mask |= BIT(i);
    1a9a:	4082      	lsls	r2, r0
		config |= GPIOTE_CFG_PIN(pin);
    1a9c:	f044 0401 	orr.w	r4, r4, #1
		gpiote->CONFIG[i] = config;
    1aa0:	f500 70a2 	add.w	r0, r0, #324	; 0x144
		data->gpiote_chan_mask |= BIT(i);
    1aa4:	4313      	orrs	r3, r2
		config |= GPIOTE_CFG_PIN(pin);
    1aa6:	4334      	orrs	r4, r6
		data->gpiote_chan_mask |= BIT(i);
    1aa8:	60fb      	str	r3, [r7, #12]
		gpiote->CONFIG[i] = config;
    1aaa:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
	return 0;
    1aae:	2000      	movs	r0, #0
    1ab0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			pull = GPIO_PULL_UP;
    1ab4:	220c      	movs	r2, #12
    1ab6:	e7ab      	b.n	1a10 <gpio_nrf5_config+0x3c>
			} else if (pull == GPIO_PULL_DOWN) {
    1ab8:	2a04      	cmp	r2, #4
				gpio->OUTCLR = BIT(pin);
    1aba:	bf02      	ittt	eq
    1abc:	f04f 0e01 	moveq.w	lr, #1
    1ac0:	fa0e fe04 	lsleq.w	lr, lr, r4
    1ac4:	f8c0 e50c 	streq.w	lr, [r0, #1292]	; 0x50c
    1ac8:	e7b8      	b.n	1a3c <gpio_nrf5_config+0x68>
					      drive_strength[ds_low][ds_high] |
    1aca:	4449      	add	r1, r9
    1acc:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
    1ad0:	430a      	orrs	r2, r1
    1ad2:	ea42 020e 	orr.w	r2, r2, lr
    1ad6:	e7b7      	b.n	1a48 <gpio_nrf5_config+0x74>
				config |= GPIOTE_CFG_POL_TOGG;
    1ad8:	f44f 3640 	mov.w	r6, #196608	; 0x30000
    1adc:	e7c4      	b.n	1a68 <gpio_nrf5_config+0x94>
			return -EIO;
    1ade:	f06f 0004 	mvn.w	r0, #4
}
    1ae2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1ae6:	bf00      	nop
    1ae8:	0000d14c 	.word	0x0000d14c

00001aec <uart_nrf5_poll_in>:
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */

static int uart_nrf5_poll_in(struct device *dev, unsigned char *c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    1aec:	6803      	ldr	r3, [r0, #0]
    1aee:	689b      	ldr	r3, [r3, #8]
    1af0:	681b      	ldr	r3, [r3, #0]

	if (!uart->EVENTS_RXDRDY) {
    1af2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
    1af6:	b132      	cbz	r2, 1b06 <uart_nrf5_poll_in+0x1a>
		return -1;
	}

	/* Clear the interrupt */
	uart->EVENTS_RXDRDY = 0;
    1af8:	2000      	movs	r0, #0
    1afa:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108

	/* got a character */
	*c = (unsigned char)uart->RXD;
    1afe:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    1b02:	700b      	strb	r3, [r1, #0]

	return 0;
    1b04:	4770      	bx	lr
		return -1;
    1b06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    1b0a:	4770      	bx	lr

00001b0c <uart_nrf5_poll_out>:
 * @return Sent character
 */
static unsigned char uart_nrf5_poll_out(struct device *dev,
					unsigned char c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    1b0c:	6803      	ldr	r3, [r0, #0]
    1b0e:	689b      	ldr	r3, [r3, #8]
    1b10:	681b      	ldr	r3, [r3, #0]

	/* send a character */
	uart->TXD = (u8_t)c;
    1b12:	f8c3 151c 	str.w	r1, [r3, #1308]	; 0x51c

	/* Wait for transmitter to be ready */
	while (!uart->EVENTS_TXDRDY) {
    1b16:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
    1b1a:	2a00      	cmp	r2, #0
    1b1c:	d0fb      	beq.n	1b16 <uart_nrf5_poll_out+0xa>
	}

	uart->EVENTS_TXDRDY = 0;
    1b1e:	2200      	movs	r2, #0
    1b20:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

	return c;
}
    1b24:	4608      	mov	r0, r1
    1b26:	4770      	bx	lr

00001b28 <uart_nrf5_err_check>:

/** Console I/O function */
static int uart_nrf5_err_check(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    1b28:	6803      	ldr	r3, [r0, #0]
    1b2a:	689b      	ldr	r3, [r3, #8]
    1b2c:	681b      	ldr	r3, [r3, #0]
	u32_t error = 0;

	if (uart->EVENTS_ERROR) {
    1b2e:	f8d3 0124 	ldr.w	r0, [r3, #292]	; 0x124
    1b32:	b118      	cbz	r0, 1b3c <uart_nrf5_err_check+0x14>
		/* register bitfields maps to the defines in uart.h */
		error = uart->ERRORSRC;
    1b34:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480

		/* Clear the register */
		uart->ERRORSRC = error;
    1b38:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
	}

	error = error & 0x0F;

	return error;
}
    1b3c:	f000 000f 	and.w	r0, r0, #15
    1b40:	4770      	bx	lr
	...

00001b44 <uart_nrf5_init>:
{
    1b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _uart *uart = UART_STRUCT(dev);
    1b46:	6803      	ldr	r3, [r0, #0]
    1b48:	689b      	ldr	r3, [r3, #8]
{
    1b4a:	4605      	mov	r5, r0
	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
    1b4c:	4818      	ldr	r0, [pc, #96]	; (1bb0 <uart_nrf5_init+0x6c>)
	volatile struct _uart *uart = UART_STRUCT(dev);
    1b4e:	681c      	ldr	r4, [r3, #0]
	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
    1b50:	f009 febe 	bl	b8d0 <device_get_binding>
static inline int _impl_gpio_config(struct device *port, int access_op,
				    u32_t pin, int flags)
{
	const struct gpio_driver_api *api = port->driver_api;

	return api->config(port, access_op, pin, flags);
    1b54:	6843      	ldr	r3, [r0, #4]
    1b56:	4606      	mov	r6, r0
    1b58:	681f      	ldr	r7, [r3, #0]
    1b5a:	2206      	movs	r2, #6
    1b5c:	f240 1301 	movw	r3, #257	; 0x101
    1b60:	2100      	movs	r1, #0
    1b62:	47b8      	blx	r7
    1b64:	6873      	ldr	r3, [r6, #4]
    1b66:	681f      	ldr	r7, [r3, #0]
    1b68:	2300      	movs	r3, #0
    1b6a:	4619      	mov	r1, r3
    1b6c:	2208      	movs	r2, #8
    1b6e:	4630      	mov	r0, r6
    1b70:	47b8      	blx	r7
	uart->PSELTXD = CONFIG_UART_NRF5_GPIO_TX_PIN;
    1b72:	2306      	movs	r3, #6
    1b74:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
	uart->PSELRXD = CONFIG_UART_NRF5_GPIO_RX_PIN;
    1b78:	2308      	movs	r3, #8
    1b7a:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
	DEV_DATA(dev)->baud_rate = CONFIG_UART_NRF5_BAUD_RATE;
    1b7e:	68ab      	ldr	r3, [r5, #8]
    1b80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
    1b84:	601a      	str	r2, [r3, #0]
	volatile struct _uart *uart = UART_STRUCT(dev);
    1b86:	682b      	ldr	r3, [r5, #0]
    1b88:	689b      	ldr	r3, [r3, #8]
    1b8a:	681b      	ldr	r3, [r3, #0]
	uart->BAUDRATE = divisor << UART_BAUDRATE_BAUDRATE_Pos;
    1b8c:	f04f 72eb 	mov.w	r2, #30801920	; 0x1d60000
    1b90:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	uart->ENABLE = (UART_ENABLE_ENABLE_Enabled << UART_ENABLE_ENABLE_Pos);
    1b94:	2304      	movs	r3, #4
    1b96:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	uart->EVENTS_TXDRDY = 0;
    1b9a:	2000      	movs	r0, #0
	uart->TASKS_STARTTX = 1;
    1b9c:	2301      	movs	r3, #1
	uart->EVENTS_TXDRDY = 0;
    1b9e:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
	uart->EVENTS_RXDRDY = 0;
    1ba2:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
	uart->TASKS_STARTTX = 1;
    1ba6:	60a3      	str	r3, [r4, #8]
	uart->TASKS_STARTRX = 1;
    1ba8:	6023      	str	r3, [r4, #0]
	dev->driver_api = &uart_nrf5_driver_api;
    1baa:	4b02      	ldr	r3, [pc, #8]	; (1bb4 <uart_nrf5_init+0x70>)
    1bac:	606b      	str	r3, [r5, #4]
}
    1bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1bb0:	0000d1b4 	.word	0x0000d1b4
    1bb4:	0000d1cc 	.word	0x0000d1cc

00001bb8 <get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static inline u8_t get(struct rand *rng, u8_t octets, u8_t *rand)
{
    1bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u8_t first, last, avail, remaining, *d, *s;

	__ASSERT_NO_MSG(rng);

	first = rng->first;
    1bbc:	7883      	ldrb	r3, [r0, #2]
	last = rng->last;
    1bbe:	78c4      	ldrb	r4, [r0, #3]

	d = &rand[octets];
	s = &rng->rand[first];
    1bc0:	1d1e      	adds	r6, r3, #4

	if (first <= last) {
    1bc2:	42a3      	cmp	r3, r4
	d = &rand[octets];
    1bc4:	440a      	add	r2, r1
	s = &rng->rand[first];
    1bc6:	4406      	add	r6, r0
	if (first <= last) {
    1bc8:	d81f      	bhi.n	1c0a <get+0x52>
		/* copy octets from contiguous memory */
		avail = last - first;
    1bca:	1ae4      	subs	r4, r4, r3
    1bcc:	b2e4      	uxtb	r4, r4
		if (octets < avail) {
    1bce:	42a1      	cmp	r1, r4
			remaining = avail - octets;
    1bd0:	bf3e      	ittt	cc
    1bd2:	1a64      	subcc	r4, r4, r1
    1bd4:	b2e7      	uxtbcc	r7, r4
    1bd6:	460c      	movcc	r4, r1
			avail = octets;
		} else {
			remaining = 0;
		}

		first += avail;
    1bd8:	4423      	add	r3, r4
		octets -= avail;
    1bda:	eba1 0104 	sub.w	r1, r1, r4
			remaining = 0;
    1bde:	bf28      	it	cs
    1be0:	2700      	movcs	r7, #0
		first += avail;
    1be2:	b2db      	uxtb	r3, r3
		octets -= avail;
    1be4:	b2c9      	uxtb	r1, r1
    1be6:	4434      	add	r4, r6

		while (avail--) {
    1be8:	42a6      	cmp	r6, r4
    1bea:	d109      	bne.n	1c00 <get+0x48>
			while (last--) {
				*(--d) = *s++;
			}
		}

		rng->first = first;
    1bec:	7083      	strb	r3, [r0, #2]
	}

	if (remaining < rng->threshold) {
    1bee:	7843      	ldrb	r3, [r0, #1]
    1bf0:	42bb      	cmp	r3, r7
		NRF_RNG->TASKS_START = 1;
    1bf2:	bf82      	ittt	hi
    1bf4:	4b20      	ldrhi	r3, [pc, #128]	; (1c78 <get+0xc0>)
    1bf6:	2201      	movhi	r2, #1
    1bf8:	601a      	strhi	r2, [r3, #0]
		NRF_RNG_regw_sideeffects();
#endif
	}

	return octets;
}
    1bfa:	4608      	mov	r0, r1
    1bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			*(--d) = *s++;
    1c00:	f816 5b01 	ldrb.w	r5, [r6], #1
    1c04:	f802 5d01 	strb.w	r5, [r2, #-1]!
    1c08:	e7ee      	b.n	1be8 <get+0x30>
		avail = rng->count - first;
    1c0a:	7805      	ldrb	r5, [r0, #0]
    1c0c:	1aed      	subs	r5, r5, r3
    1c0e:	b2ed      	uxtb	r5, r5
		if (octets < avail) {
    1c10:	42a9      	cmp	r1, r5
			remaining = avail + last - octets;
    1c12:	bf3f      	itttt	cc
    1c14:	1a67      	subcc	r7, r4, r1
    1c16:	19ed      	addcc	r5, r5, r7
    1c18:	b2ef      	uxtbcc	r7, r5
    1c1a:	460d      	movcc	r5, r1
			first += avail;
    1c1c:	bf38      	it	cc
    1c1e:	185b      	addcc	r3, r3, r1
		octets -= avail;
    1c20:	eba1 0105 	sub.w	r1, r1, r5
			first += avail;
    1c24:	bf32      	itee	cc
    1c26:	b2db      	uxtbcc	r3, r3
    1c28:	4627      	movcs	r7, r4
			first = 0;
    1c2a:	2300      	movcs	r3, #0
		octets -= avail;
    1c2c:	b2c9      	uxtb	r1, r1
    1c2e:	4696      	mov	lr, r2
    1c30:	eb06 0c05 	add.w	ip, r6, r5
		while (avail--) {
    1c34:	4566      	cmp	r6, ip
    1c36:	d119      	bne.n	1c6c <get+0xb4>
    1c38:	1b52      	subs	r2, r2, r5
		if (octets && last) {
    1c3a:	2900      	cmp	r1, #0
    1c3c:	d0d6      	beq.n	1bec <get+0x34>
    1c3e:	2c00      	cmp	r4, #0
    1c40:	d0d4      	beq.n	1bec <get+0x34>
			if (octets < last) {
    1c42:	428c      	cmp	r4, r1
    1c44:	bf8a      	itet	hi
    1c46:	460b      	movhi	r3, r1
    1c48:	4623      	movls	r3, r4
				remaining = last - octets;
    1c4a:	1a64      	subhi	r4, r4, r1
			s = &rng->rand[0];
    1c4c:	f100 0604 	add.w	r6, r0, #4
			octets -= last;
    1c50:	eba1 0103 	sub.w	r1, r1, r3
				remaining = last - octets;
    1c54:	bf8c      	ite	hi
    1c56:	b2e7      	uxtbhi	r7, r4
				remaining = 0;
    1c58:	2700      	movls	r7, #0
			octets -= last;
    1c5a:	b2c9      	uxtb	r1, r1
    1c5c:	18f4      	adds	r4, r6, r3
			while (last--) {
    1c5e:	42a6      	cmp	r6, r4
    1c60:	d0c4      	beq.n	1bec <get+0x34>
				*(--d) = *s++;
    1c62:	f816 5b01 	ldrb.w	r5, [r6], #1
    1c66:	f802 5d01 	strb.w	r5, [r2, #-1]!
    1c6a:	e7f8      	b.n	1c5e <get+0xa6>
			*(--d) = *s++;
    1c6c:	f816 8b01 	ldrb.w	r8, [r6], #1
    1c70:	f80e 8d01 	strb.w	r8, [lr, #-1]!
    1c74:	e7de      	b.n	1c34 <get+0x7c>
    1c76:	bf00      	nop
    1c78:	4000d000 	.word	0x4000d000

00001c7c <isr>:
#pragma GCC pop_options

static int isr(struct rand *rng, bool store)
{
    1c7c:	b530      	push	{r4, r5, lr}
	u8_t last;

	if (!rng) {
    1c7e:	b1d0      	cbz	r0, 1cb6 <isr+0x3a>
		return -ENOBUFS;
	}

	last = rng->last + 1;
    1c80:	78c2      	ldrb	r2, [r0, #3]
	if (last == rng->count) {
    1c82:	7805      	ldrb	r5, [r0, #0]
		last = 0;
	}

	if (last == rng->first) {
    1c84:	7884      	ldrb	r4, [r0, #2]
	last = rng->last + 1;
    1c86:	1c53      	adds	r3, r2, #1
    1c88:	b2db      	uxtb	r3, r3
		last = 0;
    1c8a:	42ab      	cmp	r3, r5
    1c8c:	bf08      	it	eq
    1c8e:	2300      	moveq	r3, #0
	if (last == rng->first) {
    1c90:	42a3      	cmp	r3, r4
    1c92:	d010      	beq.n	1cb6 <isr+0x3a>
		 * new value could be generated before NRF_RNG task is stopped.
		 */
		return -ENOBUFS;
	}

	if (!store) {
    1c94:	b161      	cbz	r1, 1cb0 <isr+0x34>
		return -EBUSY;
	}

	rng->rand[rng->last] = NRF_RNG->VALUE;
    1c96:	490a      	ldr	r1, [pc, #40]	; (1cc0 <isr+0x44>)
    1c98:	4402      	add	r2, r0
    1c9a:	f8d1 1508 	ldr.w	r1, [r1, #1288]	; 0x508
    1c9e:	7111      	strb	r1, [r2, #4]
	rng->last = last;
    1ca0:	70c3      	strb	r3, [r0, #3]

	last = rng->last + 1;
    1ca2:	3301      	adds	r3, #1
    1ca4:	b2db      	uxtb	r3, r3
	if (last == rng->count) {
		last = 0;
    1ca6:	429d      	cmp	r5, r3
    1ca8:	bf08      	it	eq
    1caa:	2300      	moveq	r3, #0
	}

	if (last == rng->first) {
    1cac:	42a3      	cmp	r3, r4
    1cae:	d005      	beq.n	1cbc <isr+0x40>
		return 0;
	}

	return -EBUSY;
    1cb0:	f06f 000f 	mvn.w	r0, #15
    1cb4:	bd30      	pop	{r4, r5, pc}
		return -ENOBUFS;
    1cb6:	f06f 0036 	mvn.w	r0, #54	; 0x36
    1cba:	bd30      	pop	{r4, r5, pc}
		return 0;
    1cbc:	2000      	movs	r0, #0
}
    1cbe:	bd30      	pop	{r4, r5, pc}
    1cc0:	4000d000 	.word	0x4000d000

00001cc4 <entropy_nrf5_init>:
		    entropy_nrf5_init, &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(struct device *device)
{
    1cc4:	b570      	push	{r4, r5, r6, lr}
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
    1cc6:	6884      	ldr	r4, [r0, #8]

K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex);

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    1cc8:	2201      	movs	r2, #1
    1cca:	4611      	mov	r1, r2
    1ccc:	4620      	mov	r0, r4
    1cce:	f00a fa03 	bl	c0d8 <_impl_k_sem_init>
    1cd2:	f104 0018 	add.w	r0, r4, #24
    1cd6:	2201      	movs	r2, #1
    1cd8:	2100      	movs	r1, #0
    1cda:	f00a f9fd 	bl	c0d8 <_impl_k_sem_init>
	rng->threshold = threshold;
    1cde:	2304      	movs	r3, #4
    1ce0:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
    1ce4:	230c      	movs	r3, #12
	rng->first = rng->last = 0;
    1ce6:	2500      	movs	r5, #0
	rng->threshold = threshold;
    1ce8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	rng->count = len;
    1cec:	2105      	movs	r1, #5
	init((struct rand *)dev_data->isr, RAND_ISR_LEN,
	     CONFIG_ENTROPY_NRF5_ISR_THRESHOLD);

	/* Enable or disable bias correction */
	if (IS_ENABLED(CONFIG_ENTROPY_NRF5_BIAS_CORRECTION)) {
		NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
    1cee:	4b11      	ldr	r3, [pc, #68]	; (1d34 <entropy_nrf5_init+0x70>)
	rng->count = len;
    1cf0:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
    1cf4:	260d      	movs	r6, #13
	rng->first = rng->last = 0;
    1cf6:	f884 5033 	strb.w	r5, [r4, #51]	; 0x33
    1cfa:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
	rng->count = len;
    1cfe:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
	rng->first = rng->last = 0;
    1d02:	f884 503f 	strb.w	r5, [r4, #63]	; 0x3f
    1d06:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
		NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
    1d0a:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
    1d0e:	f042 0201 	orr.w	r2, r2, #1
    1d12:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	} else {
		NRF_RNG->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
	}

	NRF_RNG->EVENTS_VALRDY = 0;
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
    1d16:	2201      	movs	r2, #1
	NRF_RNG->EVENTS_VALRDY = 0;
    1d18:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
	NRF_RNG->TASKS_START = 1;
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RNG_regw_sideeffects();
#endif

	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr_rand,
    1d1c:	4630      	mov	r0, r6
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
    1d1e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	NRF_RNG->TASKS_START = 1;
    1d22:	601a      	str	r2, [r3, #0]
	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr_rand,
    1d24:	462a      	mov	r2, r5
    1d26:	f7fe ffcd 	bl	cc4 <_irq_priority_set>
		    DEVICE_GET(entropy_nrf5), 0);
	irq_enable(NRF5_IRQ_RNG_IRQn);
    1d2a:	4630      	mov	r0, r6
    1d2c:	f7fe ff98 	bl	c60 <_arch_irq_enable>

	return 0;
}
    1d30:	4628      	mov	r0, r5
    1d32:	bd70      	pop	{r4, r5, r6, pc}
    1d34:	4000d000 	.word	0x4000d000

00001d38 <isr_rand>:
{
    1d38:	b538      	push	{r3, r4, r5, lr}
	if (NRF_RNG->EVENTS_VALRDY) {
    1d3a:	4b12      	ldr	r3, [pc, #72]	; (1d84 <isr_rand+0x4c>)
    1d3c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    1d40:	b1fb      	cbz	r3, 1d82 <isr_rand+0x4a>
		struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
    1d42:	6885      	ldr	r5, [r0, #8]
		ret = isr((struct rand *)dev_data->isr, true);
    1d44:	2101      	movs	r1, #1
    1d46:	f105 003c 	add.w	r0, r5, #60	; 0x3c
    1d4a:	f7ff ff97 	bl	1c7c <isr>
		if (ret != -EBUSY) {
    1d4e:	f110 0f10 	cmn.w	r0, #16
		ret = isr((struct rand *)dev_data->isr, true);
    1d52:	4604      	mov	r4, r0
		if (ret != -EBUSY) {
    1d54:	d00d      	beq.n	1d72 <isr_rand+0x3a>
			ret = isr((struct rand *)dev_data->thr,
    1d56:	f110 0437 	adds.w	r4, r0, #55	; 0x37
    1d5a:	bf14      	ite	ne
    1d5c:	2100      	movne	r1, #0
    1d5e:	2101      	moveq	r1, #1
    1d60:	f105 0030 	add.w	r0, r5, #48	; 0x30
    1d64:	f7ff ff8a 	bl	1c7c <isr>
    1d68:	4604      	mov	r4, r0

K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    1d6a:	f105 0018 	add.w	r0, r5, #24
    1d6e:	f00a f9bd 	bl	c0ec <_impl_k_sem_give>
		NRF_RNG->EVENTS_VALRDY = 0;
    1d72:	4b04      	ldr	r3, [pc, #16]	; (1d84 <isr_rand+0x4c>)
    1d74:	2200      	movs	r2, #0
		if (ret != -EBUSY) {
    1d76:	3410      	adds	r4, #16
		NRF_RNG->EVENTS_VALRDY = 0;
    1d78:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
			NRF_RNG->TASKS_STOP = 1;
    1d7c:	bf1c      	itt	ne
    1d7e:	2201      	movne	r2, #1
    1d80:	605a      	strne	r2, [r3, #4]
    1d82:	bd38      	pop	{r3, r4, r5, pc}
    1d84:	4000d000 	.word	0x4000d000

00001d88 <entropy_nrf5_get_entropy>:
{
    1d88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
    1d8c:	6885      	ldr	r5, [r0, #8]
{
    1d8e:	460f      	mov	r7, r1
    1d90:	4614      	mov	r4, r2
				k_sem_take(&dev_data->sem_sync, K_FOREVER);
    1d92:	f105 0818 	add.w	r8, r5, #24
	while (len) {
    1d96:	b914      	cbnz	r4, 1d9e <entropy_nrf5_get_entropy+0x16>
}
    1d98:	4620      	mov	r0, r4
    1d9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1d9e:	2cff      	cmp	r4, #255	; 0xff
    1da0:	4623      	mov	r3, r4
    1da2:	bf28      	it	cs
    1da4:	23ff      	movcs	r3, #255	; 0xff
		len -= len8;
    1da6:	1ae4      	subs	r4, r4, r3
    1da8:	b2de      	uxtb	r6, r3
    1daa:	b2a4      	uxth	r4, r4
			len8 = get((struct rand *)dev_data->thr, len8, buf);
    1dac:	f105 0930 	add.w	r9, r5, #48	; 0x30
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    1db0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    1db4:	4628      	mov	r0, r5
    1db6:	f00a f9f9 	bl	c1ac <_impl_k_sem_take>
    1dba:	4631      	mov	r1, r6
    1dbc:	463a      	mov	r2, r7
    1dbe:	4648      	mov	r0, r9
    1dc0:	f7ff fefa 	bl	1bb8 <get>
    1dc4:	4606      	mov	r6, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    1dc6:	4628      	mov	r0, r5
    1dc8:	f00a f990 	bl	c0ec <_impl_k_sem_give>
			if (len8) {
    1dcc:	2e00      	cmp	r6, #0
    1dce:	d0e2      	beq.n	1d96 <entropy_nrf5_get_entropy+0xe>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    1dd0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    1dd4:	4640      	mov	r0, r8
    1dd6:	f00a f9e9 	bl	c1ac <_impl_k_sem_take>
    1dda:	e7e9      	b.n	1db0 <entropy_nrf5_get_entropy+0x28>

00001ddc <rtc_compare_set>:
static void rtc_compare_set(u32_t rtc_ticks)
{
	u32_t rtc_now;

	/* Try to set CC value. We assume the procedure is always successful. */
	RTC_CC_VALUE = rtc_ticks;
    1ddc:	4b08      	ldr	r3, [pc, #32]	; (1e00 <rtc_compare_set+0x24>)
    1dde:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
	rtc_now = RTC_COUNTER;
    1de2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	 * by checking if the unsigned subtraction wraps around.
	 * If either of the above are true then instead of waiting for the CC
	 * event to trigger in the form of an interrupt, trigger it directly
	 * using the NVIC.
	 */
	if ((((rtc_ticks - rtc_now) & RTC_MASK) < RTC_MIN_DELTA) ||
    1de6:	1ac0      	subs	r0, r0, r3
    1de8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1dec:	4b05      	ldr	r3, [pc, #20]	; (1e04 <rtc_compare_set+0x28>)
    1dee:	3802      	subs	r0, #2
    1df0:	4298      	cmp	r0, r3
    1df2:	bf82      	ittt	hi
    1df4:	4b04      	ldrhi	r3, [pc, #16]	; (1e08 <rtc_compare_set+0x2c>)
    1df6:	f44f 3200 	movhi.w	r2, #131072	; 0x20000
    1dfa:	f8c3 2100 	strhi.w	r2, [r3, #256]	; 0x100
    1dfe:	4770      	bx	lr
    1e00:	40011000 	.word	0x40011000
    1e04:	007ffffd 	.word	0x007ffffd
    1e08:	e000e100 	.word	0xe000e100

00001e0c <rtc_announce_set_next>:
 * Since this function can be preempted, we need to take some provisions to
 * announce all expected sys ticks that have passed.
 *
 */
static void rtc_announce_set_next(void)
{
    1e0c:	b510      	push	{r4, lr}

	/* Read the RTC counter one single time in the beginning, so that an
	 * increase in the counter during this procedure leads to no race
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;
    1e0e:	4b12      	ldr	r3, [pc, #72]	; (1e58 <rtc_announce_set_next+0x4c>)

	/* Calculate how many RTC ticks elapsed since the last sys tick. */
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    1e10:	4c12      	ldr	r4, [pc, #72]	; (1e5c <rtc_announce_set_next+0x50>)
	rtc_now = RTC_COUNTER;
    1e12:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    1e16:	6822      	ldr	r2, [r4, #0]
    1e18:	1a80      	subs	r0, r0, r2
    1e1a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	/* If no sys ticks have elapsed, there is no point in incrementing the
	 * counters or announcing it.
	 */
	if (rtc_elapsed >= RTC_TICKS_PER_SYS_TICK) {
    1e1e:	f5b0 7fa3 	cmp.w	r0, #326	; 0x146
    1e22:	d911      	bls.n	1e48 <rtc_announce_set_next+0x3c>
		/* Calculate how many sys ticks elapsed since the last sys tick
		 * and notify the kernel if necessary.
		 */
		sys_elapsed = rtc_elapsed / RTC_TICKS_PER_SYS_TICK;

		if (sys_elapsed > expected_sys_ticks) {
    1e24:	490e      	ldr	r1, [pc, #56]	; (1e60 <rtc_announce_set_next+0x54>)
    1e26:	6809      	ldr	r1, [r1, #0]
		sys_elapsed = rtc_elapsed / RTC_TICKS_PER_SYS_TICK;
    1e28:	f240 1347 	movw	r3, #327	; 0x147
    1e2c:	fbb0 f0f3 	udiv	r0, r0, r3
    1e30:	4288      	cmp	r0, r1
    1e32:	bf28      	it	cs
    1e34:	4608      	movcs	r0, r1

		/* Store RTC_COUNTER floored to the last sys tick. This is
		 * done, so that ISR can properly calculate that 1 sys tick
		 * has passed.
		 */
		rtc_past = (rtc_past +
    1e36:	fb03 2300 	mla	r3, r3, r0, r2
				(sys_elapsed * RTC_TICKS_PER_SYS_TICK)
			   ) & RTC_MASK;
    1e3a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		rtc_past = (rtc_past +
    1e3e:	6023      	str	r3, [r4, #0]

		_sys_idle_elapsed_ticks = sys_elapsed;
    1e40:	4b08      	ldr	r3, [pc, #32]	; (1e64 <rtc_announce_set_next+0x58>)
    1e42:	6018      	str	r0, [r3, #0]
		_sys_clock_tick_announce();
    1e44:	f00a f9f4 	bl	c230 <_nano_sys_clock_tick_announce>
	}

	/* Set the RTC to the next sys tick */
	rtc_compare_set(rtc_past + RTC_TICKS_PER_SYS_TICK);
    1e48:	6820      	ldr	r0, [r4, #0]
}
    1e4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rtc_compare_set(rtc_past + RTC_TICKS_PER_SYS_TICK);
    1e4e:	f200 1047 	addw	r0, r0, #327	; 0x147
    1e52:	f7ff bfc3 	b.w	1ddc <rtc_compare_set>
    1e56:	bf00      	nop
    1e58:	40011000 	.word	0x40011000
    1e5c:	20000480 	.word	0x20000480
    1e60:	2000047c 	.word	0x2000047c
    1e64:	20005084 	.word	0x20005084

00001e68 <rtc1_nrf5_isr>:
 */
static void rtc1_nrf5_isr(void *arg)
{

	ARG_UNUSED(arg);
	RTC_CC_EVENT = 0;
    1e68:	4b02      	ldr	r3, [pc, #8]	; (1e74 <rtc1_nrf5_isr+0xc>)
    1e6a:	2200      	movs	r2, #0
    1e6c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	 */
	expected_sys_ticks = 0;
	/* Anounce elapsed of _sys_idle_elapsed_ticks systicks*/
	_sys_clock_tick_announce();
#else
	rtc_announce_set_next();
    1e70:	f7ff bfcc 	b.w	1e0c <rtc_announce_set_next>
    1e74:	40011000 	.word	0x40011000

00001e78 <_timer_idle_enter>:
	if ((sys_ticks < 0) ||
    1e78:	f246 4335 	movw	r3, #25653	; 0x6435
		sys_ticks = RTC_HALF / RTC_TICKS_PER_SYS_TICK;
    1e7c:	4298      	cmp	r0, r3
    1e7e:	bf28      	it	cs
    1e80:	4618      	movcs	r0, r3
	expected_sys_ticks = sys_ticks;
    1e82:	4b05      	ldr	r3, [pc, #20]	; (1e98 <_timer_idle_enter+0x20>)
    1e84:	6018      	str	r0, [r3, #0]
	rtc_compare_set(rtc_past + (sys_ticks * RTC_TICKS_PER_SYS_TICK));
    1e86:	4b05      	ldr	r3, [pc, #20]	; (1e9c <_timer_idle_enter+0x24>)
    1e88:	681b      	ldr	r3, [r3, #0]
    1e8a:	f240 1247 	movw	r2, #327	; 0x147
    1e8e:	fb02 3000 	mla	r0, r2, r0, r3
    1e92:	f7ff bfa3 	b.w	1ddc <rtc_compare_set>
    1e96:	bf00      	nop
    1e98:	2000047c 	.word	0x2000047c
    1e9c:	20000480 	.word	0x20000480

00001ea0 <_timer_idle_exit>:
{
    1ea0:	b508      	push	{r3, lr}
	RTC_CC_EVENT = 0;
    1ea2:	4b07      	ldr	r3, [pc, #28]	; (1ec0 <_timer_idle_exit+0x20>)
    1ea4:	2200      	movs	r2, #0
    1ea6:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1eaa:	4b06      	ldr	r3, [pc, #24]	; (1ec4 <_timer_idle_exit+0x24>)
    1eac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1eb0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	rtc_announce_set_next();
    1eb4:	f7ff ffaa 	bl	1e0c <rtc_announce_set_next>
	expected_sys_ticks = 1;
    1eb8:	4b03      	ldr	r3, [pc, #12]	; (1ec8 <_timer_idle_exit+0x28>)
    1eba:	2201      	movs	r2, #1
    1ebc:	601a      	str	r2, [r3, #0]
    1ebe:	bd08      	pop	{r3, pc}
    1ec0:	40011000 	.word	0x40011000
    1ec4:	e000e100 	.word	0xe000e100
    1ec8:	2000047c 	.word	0x2000047c

00001ecc <_sys_clock_driver_init>:
#endif

}

int _sys_clock_driver_init(struct device *device)
{
    1ecc:	b570      	push	{r4, r5, r6, lr}
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    1ece:	4818      	ldr	r0, [pc, #96]	; (1f30 <_sys_clock_driver_init+0x64>)
    1ed0:	f009 fcfe 	bl	b8d0 <device_get_binding>
	if (!clock) {
    1ed4:	b348      	cbz	r0, 1f2a <_sys_clock_driver_init+0x5e>
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->on(dev, sys);
    1ed6:	6843      	ldr	r3, [r0, #4]
#ifdef CONFIG_TICKLESS_IDLE
	expected_sys_ticks = 1;
#endif /* CONFIG_TICKLESS_IDLE */

	/* TODO: replace with counter driver to access RTC */
	SYS_CLOCK_RTC->PRESCALER = 0;
    1ed8:	4d16      	ldr	r5, [pc, #88]	; (1f34 <_sys_clock_driver_init+0x68>)
    1eda:	681b      	ldr	r3, [r3, #0]
    1edc:	2101      	movs	r1, #1
    1ede:	4798      	blx	r3
	rtc_past = 0;
    1ee0:	4b15      	ldr	r3, [pc, #84]	; (1f38 <_sys_clock_driver_init+0x6c>)
    1ee2:	2400      	movs	r4, #0
    1ee4:	601c      	str	r4, [r3, #0]
	expected_sys_ticks = 1;
    1ee6:	4b15      	ldr	r3, [pc, #84]	; (1f3c <_sys_clock_driver_init+0x70>)
    1ee8:	2601      	movs	r6, #1
    1eea:	601e      	str	r6, [r3, #0]
	SYS_CLOCK_RTC->CC[0] = RTC_TICKS_PER_SYS_TICK;
    1eec:	f240 1347 	movw	r3, #327	; 0x147
	SYS_CLOCK_RTC->PRESCALER = 0;
    1ef0:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
	SYS_CLOCK_RTC->CC[0] = RTC_TICKS_PER_SYS_TICK;
    1ef4:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
	SYS_CLOCK_RTC->EVTENSET = RTC_EVTENSET_COMPARE0_Msk;
    1ef8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    1efc:	f8c5 3344 	str.w	r3, [r5, #836]	; 0x344
	SYS_CLOCK_RTC->INTENSET = RTC_INTENSET_COMPARE0_Msk;
    1f00:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    1f04:	4b0e      	ldr	r3, [pc, #56]	; (1f40 <_sys_clock_driver_init+0x74>)

	/* Clear the event flag and possible pending interrupt */
	RTC_CC_EVENT = 0;
    1f06:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    1f0a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1f0e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ClearPendingIRQ(NRF5_IRQ_RTC1_IRQn);

	IRQ_CONNECT(NRF5_IRQ_RTC1_IRQn, 1, rtc1_nrf5_isr, 0, 0);
    1f12:	4631      	mov	r1, r6
    1f14:	4622      	mov	r2, r4
    1f16:	2011      	movs	r0, #17
    1f18:	f7fe fed4 	bl	cc4 <_irq_priority_set>
	irq_enable(NRF5_IRQ_RTC1_IRQn);
    1f1c:	2011      	movs	r0, #17
    1f1e:	f7fe fe9f 	bl	c60 <_arch_irq_enable>

	SYS_CLOCK_RTC->TASKS_CLEAR = 1;
    1f22:	60ae      	str	r6, [r5, #8]
	SYS_CLOCK_RTC->TASKS_START = 1;

	return 0;
    1f24:	4620      	mov	r0, r4
	SYS_CLOCK_RTC->TASKS_START = 1;
    1f26:	602e      	str	r6, [r5, #0]
	return 0;
    1f28:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    1f2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    1f2e:	bd70      	pop	{r4, r5, r6, pc}
    1f30:	0000d134 	.word	0x0000d134
    1f34:	40011000 	.word	0x40011000
    1f38:	20000480 	.word	0x20000480
    1f3c:	2000047c 	.word	0x2000047c
    1f40:	e000e100 	.word	0xe000e100

00001f44 <_timer_cycle_get_32>:

u32_t _timer_cycle_get_32(void)
{
    1f44:	b530      	push	{r4, r5, lr}
	u32_t elapsed_cycles;
	u32_t sys_clock_tick_count;
	u32_t rtc_prev;
	u32_t rtc_now;

	rtc_now = RTC_COUNTER;
    1f46:	4a0b      	ldr	r2, [pc, #44]	; (1f74 <_timer_cycle_get_32+0x30>)
	/* Discard value of  RTC_COUNTER read at LFCLK transition */
	do {
		sys_clock_tick_count = _sys_clock_tick_count;
    1f48:	480b      	ldr	r0, [pc, #44]	; (1f78 <_timer_cycle_get_32+0x34>)
	rtc_now = RTC_COUNTER;
    1f4a:	f8d2 1504 	ldr.w	r1, [r2, #1284]	; 0x504
		sys_clock_tick_count = _sys_clock_tick_count;
    1f4e:	e9d0 4500 	ldrd	r4, r5, [r0]
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
					     RTC_TICKS_PER_SYS_TICK)) &
				 RTC_MASK;
		rtc_prev = rtc_now;
		rtc_now = RTC_COUNTER;
    1f52:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	} while (rtc_now != rtc_prev);
    1f56:	4299      	cmp	r1, r3
    1f58:	d10a      	bne.n	1f70 <_timer_cycle_get_32+0x2c>

	return (sys_clock_tick_count * sys_clock_hw_cycles_per_tick) +
    1f5a:	4a08      	ldr	r2, [pc, #32]	; (1f7c <_timer_cycle_get_32+0x38>)
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
    1f5c:	f240 1347 	movw	r3, #327	; 0x147
    1f60:	fb03 1314 	mls	r3, r3, r4, r1
	return (sys_clock_tick_count * sys_clock_hw_cycles_per_tick) +
    1f64:	6810      	ldr	r0, [r2, #0]
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
    1f66:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	       elapsed_cycles;
}
    1f6a:	fb00 3004 	mla	r0, r0, r4, r3
    1f6e:	bd30      	pop	{r4, r5, pc}
    1f70:	4619      	mov	r1, r3
    1f72:	e7ec      	b.n	1f4e <_timer_cycle_get_32+0xa>
    1f74:	40011000 	.word	0x40011000
    1f78:	20002d78 	.word	0x20002d78
    1f7c:	20005088 	.word	0x20005088

00001f80 <bt_hex>:
#include <misc/util.h>
#include <bluetooth/bluetooth.h>
#include <bluetooth/hci.h>

const char *bt_hex(const void *buf, size_t len)
{
    1f80:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
    1f82:	f04f 0320 	mov.w	r3, #32
    1f86:	f3ef 8511 	mrs	r5, BASEPRI
    1f8a:	f383 8811 	msr	BASEPRI, r3
	unsigned int mask;
	char *str;
	int i;

	mask = irq_lock();
	str = hexbufs[curbuf++];
    1f8e:	4c14      	ldr	r4, [pc, #80]	; (1fe0 <bt_hex+0x60>)
    1f90:	4e14      	ldr	r6, [pc, #80]	; (1fe4 <bt_hex+0x64>)
    1f92:	7823      	ldrb	r3, [r4, #0]
    1f94:	eb03 12c3 	add.w	r2, r3, r3, lsl #7
    1f98:	3301      	adds	r3, #1
	curbuf %= ARRAY_SIZE(hexbufs);
    1f9a:	f003 0303 	and.w	r3, r3, #3
	str = hexbufs[curbuf++];
    1f9e:	4432      	add	r2, r6
	curbuf %= ARRAY_SIZE(hexbufs);
    1fa0:	7023      	strb	r3, [r4, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1fa2:	f385 8811 	msr	BASEPRI, r5
	irq_unlock(mask);

	len = min(len, (sizeof(hexbufs[0]) - 1) / 2);
    1fa6:	2940      	cmp	r1, #64	; 0x40
    1fa8:	bf28      	it	cs
    1faa:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    1fac:	4d0e      	ldr	r5, [pc, #56]	; (1fe8 <bt_hex+0x68>)
    1fae:	3801      	subs	r0, #1
    1fb0:	4613      	mov	r3, r2
    1fb2:	eb02 0641 	add.w	r6, r2, r1, lsl #1
	for (i = 0; i < len; i++) {
    1fb6:	42b3      	cmp	r3, r6
    1fb8:	d104      	bne.n	1fc4 <bt_hex+0x44>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    1fba:	2300      	movs	r3, #0
    1fbc:	f802 3011 	strb.w	r3, [r2, r1, lsl #1]

	return str;
}
    1fc0:	4610      	mov	r0, r2
    1fc2:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    1fc4:	7844      	ldrb	r4, [r0, #1]
    1fc6:	0924      	lsrs	r4, r4, #4
    1fc8:	3302      	adds	r3, #2
    1fca:	5d2c      	ldrb	r4, [r5, r4]
    1fcc:	f803 4c02 	strb.w	r4, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    1fd0:	f810 4f01 	ldrb.w	r4, [r0, #1]!
    1fd4:	f004 040f 	and.w	r4, r4, #15
    1fd8:	5d2c      	ldrb	r4, [r5, r4]
    1fda:	f803 4c01 	strb.w	r4, [r3, #-1]
    1fde:	e7ea      	b.n	1fb6 <bt_hex+0x36>
    1fe0:	200004e0 	.word	0x200004e0
    1fe4:	200004e1 	.word	0x200004e1
    1fe8:	0000d249 	.word	0x0000d249

00001fec <bt_addr_str>:

#if defined(CONFIG_BT_DEBUG)
const char *bt_addr_str(const bt_addr_t *addr)
{
    1fec:	b510      	push	{r4, lr}
	static char bufs[2][BT_ADDR_STR_LEN];
	static u8_t cur;
	char *str;

	str = bufs[cur++];
    1fee:	4a0f      	ldr	r2, [pc, #60]	; (202c <bt_addr_str+0x40>)
    1ff0:	4c0f      	ldr	r4, [pc, #60]	; (2030 <bt_addr_str+0x44>)
    1ff2:	7813      	ldrb	r3, [r2, #0]
    1ff4:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
    1ff8:	3301      	adds	r3, #1
{
    1ffa:	b086      	sub	sp, #24
	cur %= ARRAY_SIZE(bufs);
    1ffc:	f003 0301 	and.w	r3, r3, #1
    2000:	7013      	strb	r3, [r2, #0]
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_to_str(const bt_addr_t *addr, char *str, size_t len)
{
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X",
    2002:	7802      	ldrb	r2, [r0, #0]
    2004:	7943      	ldrb	r3, [r0, #5]
    2006:	9204      	str	r2, [sp, #16]
    2008:	7842      	ldrb	r2, [r0, #1]
    200a:	9203      	str	r2, [sp, #12]
    200c:	7882      	ldrb	r2, [r0, #2]
    200e:	9202      	str	r2, [sp, #8]
    2010:	78c2      	ldrb	r2, [r0, #3]
    2012:	9201      	str	r2, [sp, #4]
	str = bufs[cur++];
    2014:	eb04 0441 	add.w	r4, r4, r1, lsl #1
    2018:	7902      	ldrb	r2, [r0, #4]
    201a:	9200      	str	r2, [sp, #0]
    201c:	2112      	movs	r1, #18
    201e:	4a05      	ldr	r2, [pc, #20]	; (2034 <bt_addr_str+0x48>)
    2020:	4620      	mov	r0, r4
    2022:	f7ff f985 	bl	1330 <snprintk>
	bt_addr_to_str(addr, str, sizeof(bufs[cur]));

	return str;
}
    2026:	4620      	mov	r0, r4
    2028:	b006      	add	sp, #24
    202a:	bd10      	pop	{r4, pc}
    202c:	200004de 	.word	0x200004de
    2030:	20000484 	.word	0x20000484
    2034:	0000d22b 	.word	0x0000d22b

00002038 <bt_addr_le_str>:

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
    2038:	b570      	push	{r4, r5, r6, lr}
	static char bufs[2][BT_ADDR_LE_STR_LEN];
	static u8_t cur;
	char *str;

	str = bufs[cur++];
    203a:	4a1d      	ldr	r2, [pc, #116]	; (20b0 <bt_addr_le_str+0x78>)
    203c:	491d      	ldr	r1, [pc, #116]	; (20b4 <bt_addr_le_str+0x7c>)
    203e:	7813      	ldrb	r3, [r2, #0]
    2040:	eb03 0643 	add.w	r6, r3, r3, lsl #1
    2044:	3301      	adds	r3, #1
	cur %= ARRAY_SIZE(bufs);
    2046:	f003 0301 	and.w	r3, r3, #1
    204a:	7013      	strb	r3, [r2, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    204c:	7803      	ldrb	r3, [r0, #0]
{
    204e:	b08a      	sub	sp, #40	; 0x28
	str = bufs[cur++];
    2050:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
{
    2054:	4604      	mov	r4, r0
	str = bufs[cur++];
    2056:	440e      	add	r6, r1
    2058:	ad07      	add	r5, sp, #28
    205a:	2b03      	cmp	r3, #3
    205c:	d821      	bhi.n	20a2 <bt_addr_le_str+0x6a>
    205e:	e8df f003 	tbb	[pc, r3]
    2062:	1a02      	.short	0x1a02
    2064:	1e1c      	.short	0x1e1c
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    2066:	4914      	ldr	r1, [pc, #80]	; (20b8 <bt_addr_le_str+0x80>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    2068:	4628      	mov	r0, r5
    206a:	f7fe fa99 	bl	5a0 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    206e:	7862      	ldrb	r2, [r4, #1]
    2070:	9204      	str	r2, [sp, #16]
    2072:	78a2      	ldrb	r2, [r4, #2]
    2074:	9203      	str	r2, [sp, #12]
    2076:	78e2      	ldrb	r2, [r4, #3]
    2078:	9202      	str	r2, [sp, #8]
    207a:	7922      	ldrb	r2, [r4, #4]
    207c:	9201      	str	r2, [sp, #4]
    207e:	7962      	ldrb	r2, [r4, #5]
    2080:	9200      	str	r2, [sp, #0]
    2082:	79a3      	ldrb	r3, [r4, #6]
    2084:	9505      	str	r5, [sp, #20]
    2086:	4a0d      	ldr	r2, [pc, #52]	; (20bc <bt_addr_le_str+0x84>)
    2088:	211b      	movs	r1, #27
    208a:	4630      	mov	r0, r6
    208c:	f7ff f950 	bl	1330 <snprintk>
	bt_addr_le_to_str(addr, str, sizeof(bufs[cur]));

	return str;
}
    2090:	4630      	mov	r0, r6
    2092:	b00a      	add	sp, #40	; 0x28
    2094:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    2096:	490a      	ldr	r1, [pc, #40]	; (20c0 <bt_addr_le_str+0x88>)
    2098:	e7e6      	b.n	2068 <bt_addr_le_str+0x30>
		strcpy(type, "public id");
    209a:	490a      	ldr	r1, [pc, #40]	; (20c4 <bt_addr_le_str+0x8c>)
    209c:	e7e4      	b.n	2068 <bt_addr_le_str+0x30>
		strcpy(type, "random id");
    209e:	490a      	ldr	r1, [pc, #40]	; (20c8 <bt_addr_le_str+0x90>)
    20a0:	e7e2      	b.n	2068 <bt_addr_le_str+0x30>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    20a2:	4a0a      	ldr	r2, [pc, #40]	; (20cc <bt_addr_le_str+0x94>)
    20a4:	210a      	movs	r1, #10
    20a6:	4628      	mov	r0, r5
    20a8:	f7ff f942 	bl	1330 <snprintk>
    20ac:	e7df      	b.n	206e <bt_addr_le_str+0x36>
    20ae:	bf00      	nop
    20b0:	200004df 	.word	0x200004df
    20b4:	200004a8 	.word	0x200004a8
    20b8:	0000d1e6 	.word	0x0000d1e6
    20bc:	0000d208 	.word	0x0000d208
    20c0:	0000d1ed 	.word	0x0000d1ed
    20c4:	0000d1f4 	.word	0x0000d1f4
    20c8:	0000d1fe 	.word	0x0000d1fe
    20cc:	0000e12f 	.word	0x0000e12f

000020d0 <bt_monitor_init>:
#if defined(CONFIG_HAS_DTS) && !defined(CONFIG_BT_MONITOR_ON_DEV_NAME)
#define CONFIG_BT_MONITOR_ON_DEV_NAME CONFIG_UART_CONSOLE_ON_DEV_NAME
#endif

static int bt_monitor_init(struct device *d)
{
    20d0:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	monitor_dev = device_get_binding(CONFIG_BT_MONITOR_ON_DEV_NAME);
    20d2:	4807      	ldr	r0, [pc, #28]	; (20f0 <bt_monitor_init+0x20>)
	uart_irq_rx_disable(monitor_dev);
	uart_irq_tx_disable(monitor_dev);
#endif

#if !defined(CONFIG_UART_CONSOLE)
	__printk_hook_install(monitor_console_out);
    20d4:	4c07      	ldr	r4, [pc, #28]	; (20f4 <bt_monitor_init+0x24>)
	monitor_dev = device_get_binding(CONFIG_BT_MONITOR_ON_DEV_NAME);
    20d6:	f009 fbfb 	bl	b8d0 <device_get_binding>
    20da:	4b07      	ldr	r3, [pc, #28]	; (20f8 <bt_monitor_init+0x28>)
    20dc:	6018      	str	r0, [r3, #0]
	__printk_hook_install(monitor_console_out);
    20de:	4620      	mov	r0, r4
    20e0:	f7fe ffd2 	bl	1088 <__printk_hook_install>
	__stdout_hook_install(monitor_console_out);
    20e4:	4620      	mov	r0, r4
    20e6:	f7fe faeb 	bl	6c0 <__stdout_hook_install>
#endif

	return 0;
}
    20ea:	2000      	movs	r0, #0
    20ec:	bd10      	pop	{r4, pc}
    20ee:	bf00      	nop
    20f0:	0000d1bb 	.word	0x0000d1bb
    20f4:	0000236d 	.word	0x0000236d
    20f8:	20000784 	.word	0x20000784

000020fc <atomic_inc>:
}
    20fc:	f3bf 8f5b 	dmb	ish
    2100:	e850 3f00 	ldrex	r3, [r0]
    2104:	1c5a      	adds	r2, r3, #1
    2106:	e840 2100 	strex	r1, r2, [r0]
    210a:	2900      	cmp	r1, #0
    210c:	d1f8      	bne.n	2100 <atomic_inc+0x4>
    210e:	f3bf 8f5b 	dmb	ish
    2112:	4618      	mov	r0, r3
    2114:	4770      	bx	lr

00002116 <encode_drops>:
{
    2116:	b510      	push	{r4, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2118:	2300      	movs	r3, #0
    211a:	f3bf 8f5b 	dmb	ish
    211e:	e852 4f00 	ldrex	r4, [r2]
    2122:	e842 3e00 	strex	lr, r3, [r2]
    2126:	f1be 0f00 	cmp.w	lr, #0
    212a:	d1f8      	bne.n	211e <encode_drops+0x8>
    212c:	f3bf 8f5b 	dmb	ish
	if (count) {
    2130:	b16c      	cbz	r4, 214e <encode_drops+0x38>
		hdr->ext[hdr->hdr_len++] = type;
    2132:	7943      	ldrb	r3, [r0, #5]
    2134:	18c2      	adds	r2, r0, r3
		hdr->ext[hdr->hdr_len++] = min(count, 255);
    2136:	2cff      	cmp	r4, #255	; 0xff
		hdr->ext[hdr->hdr_len++] = type;
    2138:	7191      	strb	r1, [r2, #6]
		hdr->ext[hdr->hdr_len++] = min(count, 255);
    213a:	f103 0202 	add.w	r2, r3, #2
		hdr->ext[hdr->hdr_len++] = type;
    213e:	f103 0301 	add.w	r3, r3, #1
		hdr->ext[hdr->hdr_len++] = min(count, 255);
    2142:	7142      	strb	r2, [r0, #5]
    2144:	fa50 f083 	uxtab	r0, r0, r3
    2148:	bfa8      	it	ge
    214a:	24ff      	movge	r4, #255	; 0xff
    214c:	7184      	strb	r4, [r0, #6]
    214e:	bd10      	pop	{r4, pc}

00002150 <encode_hdr>:
	hdr->flags    = 0;
    2150:	2300      	movs	r3, #0
{
    2152:	b570      	push	{r4, r5, r6, lr}
	hdr->flags    = 0;
    2154:	7103      	strb	r3, [r0, #4]
	ts->type = BT_MONITOR_TS32;
    2156:	2308      	movs	r3, #8
    2158:	7183      	strb	r3, [r0, #6]
	hdr->opcode   = sys_cpu_to_le16(opcode);
    215a:	8041      	strh	r1, [r0, #2]
{
    215c:	4604      	mov	r4, r0
    215e:	4616      	mov	r6, r2
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t);
    2160:	f00a f85a 	bl	c218 <_impl_k_uptime_get>
	encode_drops(hdr, BT_MONITOR_COMMAND_DROPS, &drops.cmd);
    2164:	4d13      	ldr	r5, [pc, #76]	; (21b4 <encode_hdr+0x64>)
	ts->ts32 = sys_cpu_to_le32(k_uptime_get() * 10);
    2166:	230a      	movs	r3, #10
    2168:	4358      	muls	r0, r3
	hdr->hdr_len = sizeof(*ts);
    216a:	2305      	movs	r3, #5
    216c:	7163      	strb	r3, [r4, #5]
	ts->ts32 = sys_cpu_to_le32(k_uptime_get() * 10);
    216e:	f8c4 0007 	str.w	r0, [r4, #7]
	encode_drops(hdr, BT_MONITOR_COMMAND_DROPS, &drops.cmd);
    2172:	462a      	mov	r2, r5
    2174:	2101      	movs	r1, #1
    2176:	4620      	mov	r0, r4
    2178:	f7ff ffcd 	bl	2116 <encode_drops>
	encode_drops(hdr, BT_MONITOR_EVENT_DROPS, &drops.evt);
    217c:	1d2a      	adds	r2, r5, #4
    217e:	2102      	movs	r1, #2
    2180:	4620      	mov	r0, r4
    2182:	f7ff ffc8 	bl	2116 <encode_drops>
	encode_drops(hdr, BT_MONITOR_ACL_TX_DROPS, &drops.acl_tx);
    2186:	f105 0208 	add.w	r2, r5, #8
    218a:	2104      	movs	r1, #4
    218c:	4620      	mov	r0, r4
    218e:	f7ff ffc2 	bl	2116 <encode_drops>
	encode_drops(hdr, BT_MONITOR_ACL_RX_DROPS, &drops.acl_rx);
    2192:	f105 020c 	add.w	r2, r5, #12
    2196:	2103      	movs	r1, #3
    2198:	4620      	mov	r0, r4
    219a:	f7ff ffbc 	bl	2116 <encode_drops>
	encode_drops(hdr, BT_MONITOR_OTHER_DROPS, &drops.other);
    219e:	f105 0210 	add.w	r2, r5, #16
    21a2:	2107      	movs	r1, #7
    21a4:	4620      	mov	r0, r4
    21a6:	f7ff ffb6 	bl	2116 <encode_drops>
	hdr->data_len = sys_cpu_to_le16(4 + hdr->hdr_len + len);
    21aa:	7962      	ldrb	r2, [r4, #5]
    21ac:	3604      	adds	r6, #4
    21ae:	4432      	add	r2, r6
    21b0:	8022      	strh	r2, [r4, #0]
    21b2:	bd70      	pop	{r4, r5, r6, pc}
    21b4:	20000768 	.word	0x20000768

000021b8 <monitor_send>:
{
    21b8:	b570      	push	{r4, r5, r6, lr}
		uart_poll_out(monitor_dev, *buf++);
    21ba:	4e06      	ldr	r6, [pc, #24]	; (21d4 <monitor_send+0x1c>)
    21bc:	1845      	adds	r5, r0, r1
	const u8_t *buf = data;
    21be:	4604      	mov	r4, r0
	while (len--) {
    21c0:	42ac      	cmp	r4, r5
    21c2:	d100      	bne.n	21c6 <monitor_send+0xe>
}
    21c4:	bd70      	pop	{r4, r5, r6, pc}
		uart_poll_out(monitor_dev, *buf++);
    21c6:	6830      	ldr	r0, [r6, #0]
static inline unsigned char _impl_uart_poll_out(struct device *dev,
						unsigned char out_char)
{
	const struct uart_driver_api *api = dev->driver_api;

	return api->poll_out(dev, out_char);
    21c8:	f814 1b01 	ldrb.w	r1, [r4], #1
    21cc:	6843      	ldr	r3, [r0, #4]
    21ce:	685b      	ldr	r3, [r3, #4]
    21d0:	4798      	blx	r3
    21d2:	e7f5      	b.n	21c0 <monitor_send+0x8>
    21d4:	20000784 	.word	0x20000784

000021d8 <log_out>:
{
    21d8:	b508      	push	{r3, lr}
	uart_poll_out(monitor_dev, c);
    21da:	4b04      	ldr	r3, [pc, #16]	; (21ec <log_out+0x14>)
    21dc:	681b      	ldr	r3, [r3, #0]
    21de:	685a      	ldr	r2, [r3, #4]
    21e0:	b2c1      	uxtb	r1, r0
    21e2:	6852      	ldr	r2, [r2, #4]
    21e4:	4618      	mov	r0, r3
    21e6:	4790      	blx	r2
}
    21e8:	2000      	movs	r0, #0
    21ea:	bd08      	pop	{r3, pc}
    21ec:	20000784 	.word	0x20000784

000021f0 <bt_log>:
{
    21f0:	b40e      	push	{r1, r2, r3}
    21f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    21f6:	b08b      	sub	sp, #44	; 0x2c
    21f8:	ac11      	add	r4, sp, #68	; 0x44
	const char id[] = "bt";
    21fa:	4b2f      	ldr	r3, [pc, #188]	; (22b8 <bt_log+0xc8>)
{
    21fc:	f854 8b04 	ldr.w	r8, [r4], #4
	const char id[] = "bt";
    2200:	881a      	ldrh	r2, [r3, #0]
    2202:	789b      	ldrb	r3, [r3, #2]
    2204:	f8ad 2008 	strh.w	r2, [sp, #8]
	len = vsnprintk(NULL, 0, fmt, ap);
    2208:	2100      	movs	r1, #0
	const char id[] = "bt";
    220a:	f88d 300a 	strb.w	r3, [sp, #10]
	len = vsnprintk(NULL, 0, fmt, ap);
    220e:	4642      	mov	r2, r8
{
    2210:	4605      	mov	r5, r0
	len = vsnprintk(NULL, 0, fmt, ap);
    2212:	4623      	mov	r3, r4
    2214:	4608      	mov	r0, r1
	va_start(ap, fmt);
    2216:	9403      	str	r4, [sp, #12]
	len = vsnprintk(NULL, 0, fmt, ap);
    2218:	f7ff f8a6 	bl	1368 <vsnprintk>
	if (len < 0) {
    221c:	1e02      	subs	r2, r0, #0
    221e:	db17      	blt.n	2250 <bt_log+0x60>
	log.priority = prio;
    2220:	f88d 5004 	strb.w	r5, [sp, #4]
	log.ident_len = sizeof(id);
    2224:	2703      	movs	r7, #3
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2226:	4d25      	ldr	r5, [pc, #148]	; (22bc <bt_log+0xcc>)
    2228:	f88d 7005 	strb.w	r7, [sp, #5]
    222c:	f3bf 8f5b 	dmb	ish
    2230:	e855 6f00 	ldrex	r6, [r5]
    2234:	f046 0301 	orr.w	r3, r6, #1
    2238:	e845 3100 	strex	r1, r3, [r5]
    223c:	2900      	cmp	r1, #0
    223e:	d1f7      	bne.n	2230 <bt_log+0x40>
    2240:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(&flags, BT_LOG_BUSY)) {
    2244:	f016 0601 	ands.w	r6, r6, #1
    2248:	d007      	beq.n	225a <bt_log+0x6a>
		atomic_inc(&drops.other);
    224a:	481d      	ldr	r0, [pc, #116]	; (22c0 <bt_log+0xd0>)
    224c:	f7ff ff56 	bl	20fc <atomic_inc>
}
    2250:	b00b      	add	sp, #44	; 0x2c
    2252:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2256:	b003      	add	sp, #12
    2258:	4770      	bx	lr
	encode_hdr(&hdr, BT_MONITOR_USER_LOGGING,
    225a:	3206      	adds	r2, #6
    225c:	b292      	uxth	r2, r2
    225e:	210d      	movs	r1, #13
    2260:	a804      	add	r0, sp, #16
    2262:	f7ff ff75 	bl	2150 <encode_hdr>
	monitor_send(&hdr, BT_MONITOR_BASE_HDR_LEN + hdr.hdr_len);
    2266:	f89d 1015 	ldrb.w	r1, [sp, #21]
    226a:	a804      	add	r0, sp, #16
    226c:	3106      	adds	r1, #6
    226e:	f7ff ffa3 	bl	21b8 <monitor_send>
	monitor_send(&log, sizeof(log));
    2272:	2102      	movs	r1, #2
    2274:	a801      	add	r0, sp, #4
    2276:	f7ff ff9f 	bl	21b8 <monitor_send>
	monitor_send(id, sizeof(id));
    227a:	4639      	mov	r1, r7
    227c:	a802      	add	r0, sp, #8
    227e:	f7ff ff9b 	bl	21b8 <monitor_send>
	_vprintk(log_out, NULL, fmt, ap);
    2282:	4623      	mov	r3, r4
    2284:	4642      	mov	r2, r8
    2286:	4631      	mov	r1, r6
    2288:	480e      	ldr	r0, [pc, #56]	; (22c4 <bt_log+0xd4>)
	va_start(ap, fmt);
    228a:	9403      	str	r4, [sp, #12]
	_vprintk(log_out, NULL, fmt, ap);
    228c:	f7fe ff02 	bl	1094 <_vprintk>
	uart_poll_out(monitor_dev, '\0');
    2290:	4b0d      	ldr	r3, [pc, #52]	; (22c8 <bt_log+0xd8>)
    2292:	6818      	ldr	r0, [r3, #0]
    2294:	6843      	ldr	r3, [r0, #4]
    2296:	4631      	mov	r1, r6
    2298:	685b      	ldr	r3, [r3, #4]
    229a:	4798      	blx	r3
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    229c:	f3bf 8f5b 	dmb	ish
    22a0:	e855 3f00 	ldrex	r3, [r5]
    22a4:	f023 0301 	bic.w	r3, r3, #1
    22a8:	e845 3200 	strex	r2, r3, [r5]
    22ac:	2a00      	cmp	r2, #0
    22ae:	d1f7      	bne.n	22a0 <bt_log+0xb0>
    22b0:	f3bf 8f5b 	dmb	ish
    22b4:	e7cc      	b.n	2250 <bt_log+0x60>
    22b6:	bf00      	nop
    22b8:	0000d25a 	.word	0x0000d25a
    22bc:	2000077c 	.word	0x2000077c
    22c0:	20000778 	.word	0x20000778
    22c4:	000021d9 	.word	0x000021d9
    22c8:	20000784 	.word	0x20000784

000022cc <bt_monitor_send>:
{
    22cc:	b570      	push	{r4, r5, r6, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    22ce:	4c21      	ldr	r4, [pc, #132]	; (2354 <bt_monitor_send+0x88>)
    22d0:	f3bf 8f5b 	dmb	ish
    22d4:	b086      	sub	sp, #24
    22d6:	460e      	mov	r6, r1
    22d8:	4615      	mov	r5, r2
    22da:	e854 3f00 	ldrex	r3, [r4]
    22de:	f043 0201 	orr.w	r2, r3, #1
    22e2:	e844 2100 	strex	r1, r2, [r4]
    22e6:	2900      	cmp	r1, #0
    22e8:	d1f7      	bne.n	22da <bt_monitor_send+0xe>
    22ea:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(&flags, BT_LOG_BUSY)) {
    22ee:	07db      	lsls	r3, r3, #31
    22f0:	d513      	bpl.n	231a <bt_monitor_send+0x4e>
	switch (opcode) {
    22f2:	3802      	subs	r0, #2
    22f4:	2803      	cmp	r0, #3
    22f6:	d80e      	bhi.n	2316 <bt_monitor_send+0x4a>
    22f8:	e8df f000 	tbb	[pc, r0]
    22fc:	0b090702 	.word	0x0b090702
		atomic_inc(&drops.cmd);
    2300:	4815      	ldr	r0, [pc, #84]	; (2358 <bt_monitor_send+0x8c>)
		atomic_inc(&drops.other);
    2302:	f7ff fefb 	bl	20fc <atomic_inc>
}
    2306:	b006      	add	sp, #24
    2308:	bd70      	pop	{r4, r5, r6, pc}
		atomic_inc(&drops.evt);
    230a:	4814      	ldr	r0, [pc, #80]	; (235c <bt_monitor_send+0x90>)
    230c:	e7f9      	b.n	2302 <bt_monitor_send+0x36>
		atomic_inc(&drops.acl_tx);
    230e:	4814      	ldr	r0, [pc, #80]	; (2360 <bt_monitor_send+0x94>)
    2310:	e7f7      	b.n	2302 <bt_monitor_send+0x36>
		atomic_inc(&drops.acl_rx);
    2312:	4814      	ldr	r0, [pc, #80]	; (2364 <bt_monitor_send+0x98>)
    2314:	e7f5      	b.n	2302 <bt_monitor_send+0x36>
		atomic_inc(&drops.other);
    2316:	4814      	ldr	r0, [pc, #80]	; (2368 <bt_monitor_send+0x9c>)
    2318:	e7f3      	b.n	2302 <bt_monitor_send+0x36>
	encode_hdr(&hdr, opcode, len);
    231a:	b2aa      	uxth	r2, r5
    231c:	4601      	mov	r1, r0
    231e:	4668      	mov	r0, sp
    2320:	f7ff ff16 	bl	2150 <encode_hdr>
	monitor_send(&hdr, BT_MONITOR_BASE_HDR_LEN + hdr.hdr_len);
    2324:	f89d 1005 	ldrb.w	r1, [sp, #5]
    2328:	4668      	mov	r0, sp
    232a:	3106      	adds	r1, #6
    232c:	f7ff ff44 	bl	21b8 <monitor_send>
	monitor_send(data, len);
    2330:	4629      	mov	r1, r5
    2332:	4630      	mov	r0, r6
    2334:	f7ff ff40 	bl	21b8 <monitor_send>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2338:	f3bf 8f5b 	dmb	ish
    233c:	e854 3f00 	ldrex	r3, [r4]
    2340:	f023 0301 	bic.w	r3, r3, #1
    2344:	e844 3200 	strex	r2, r3, [r4]
    2348:	2a00      	cmp	r2, #0
    234a:	d1f7      	bne.n	233c <bt_monitor_send+0x70>
    234c:	f3bf 8f5b 	dmb	ish
    2350:	e7d9      	b.n	2306 <bt_monitor_send+0x3a>
    2352:	bf00      	nop
    2354:	2000077c 	.word	0x2000077c
    2358:	20000768 	.word	0x20000768
    235c:	2000076c 	.word	0x2000076c
    2360:	20000770 	.word	0x20000770
    2364:	20000774 	.word	0x20000774
    2368:	20000778 	.word	0x20000778

0000236c <monitor_console_out>:
{
    236c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    236e:	4b1f      	ldr	r3, [pc, #124]	; (23ec <monitor_console_out+0x80>)
    2370:	f3bf 8f5b 	dmb	ish
    2374:	4605      	mov	r5, r0
    2376:	e853 2f00 	ldrex	r2, [r3]
    237a:	f042 0102 	orr.w	r1, r2, #2
    237e:	e843 1000 	strex	r0, r1, [r3]
    2382:	2800      	cmp	r0, #0
    2384:	d1f7      	bne.n	2376 <monitor_console_out+0xa>
    2386:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(&flags, BT_CONSOLE_BUSY)) {
    238a:	f012 0f02 	tst.w	r2, #2
    238e:	461e      	mov	r6, r3
    2390:	d115      	bne.n	23be <monitor_console_out+0x52>
	if (c != '\n' && len < sizeof(buf) - 1) {
    2392:	2d0a      	cmp	r5, #10
    2394:	4c16      	ldr	r4, [pc, #88]	; (23f0 <monitor_console_out+0x84>)
    2396:	4917      	ldr	r1, [pc, #92]	; (23f4 <monitor_console_out+0x88>)
    2398:	d013      	beq.n	23c2 <monitor_console_out+0x56>
    239a:	6822      	ldr	r2, [r4, #0]
    239c:	2a7e      	cmp	r2, #126	; 0x7e
    239e:	d810      	bhi.n	23c2 <monitor_console_out+0x56>
		buf[len++] = c;
    23a0:	1c50      	adds	r0, r2, #1
    23a2:	548d      	strb	r5, [r1, r2]
    23a4:	6020      	str	r0, [r4, #0]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    23a6:	f3bf 8f5b 	dmb	ish
    23aa:	e853 2f00 	ldrex	r2, [r3]
    23ae:	f022 0202 	bic.w	r2, r2, #2
    23b2:	e843 2100 	strex	r1, r2, [r3]
    23b6:	2900      	cmp	r1, #0
    23b8:	d1f7      	bne.n	23aa <monitor_console_out+0x3e>
    23ba:	f3bf 8f5b 	dmb	ish
}
    23be:	4628      	mov	r0, r5
    23c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	buf[len++] = '\0';
    23c2:	6823      	ldr	r3, [r4, #0]
    23c4:	2700      	movs	r7, #0
    23c6:	1c5a      	adds	r2, r3, #1
    23c8:	54cf      	strb	r7, [r1, r3]
	bt_monitor_send(BT_MONITOR_SYSTEM_NOTE, buf, len);
    23ca:	200c      	movs	r0, #12
    23cc:	4909      	ldr	r1, [pc, #36]	; (23f4 <monitor_console_out+0x88>)
	buf[len++] = '\0';
    23ce:	6022      	str	r2, [r4, #0]
	bt_monitor_send(BT_MONITOR_SYSTEM_NOTE, buf, len);
    23d0:	f7ff ff7c 	bl	22cc <bt_monitor_send>
	len = 0;
    23d4:	6027      	str	r7, [r4, #0]
    23d6:	f3bf 8f5b 	dmb	ish
    23da:	e856 3f00 	ldrex	r3, [r6]
    23de:	f023 0302 	bic.w	r3, r3, #2
    23e2:	e846 3200 	strex	r2, r3, [r6]
    23e6:	2a00      	cmp	r2, #0
    23e8:	d0e7      	beq.n	23ba <monitor_console_out+0x4e>
    23ea:	e7f6      	b.n	23da <monitor_console_out+0x6e>
    23ec:	2000077c 	.word	0x2000077c
    23f0:	20000780 	.word	0x20000780
    23f4:	200006e5 	.word	0x200006e5

000023f8 <bt_monitor_new_index>:
{
    23f8:	b530      	push	{r4, r5, lr}
    23fa:	b085      	sub	sp, #20
    23fc:	4615      	mov	r5, r2
    23fe:	461c      	mov	r4, r3
	pkt.type = type;
    2400:	f88d 0000 	strb.w	r0, [sp]
	pkt.bus = bus;
    2404:	f88d 1001 	strb.w	r1, [sp, #1]
	memcpy(pkt.bdaddr, addr, 6);
    2408:	2206      	movs	r2, #6
    240a:	4629      	mov	r1, r5
    240c:	f10d 0002 	add.w	r0, sp, #2
    2410:	f7fe f903 	bl	61a <memcpy>
	strncpy(pkt.name, name, sizeof(pkt.name) - 1);
    2414:	4621      	mov	r1, r4
    2416:	2207      	movs	r2, #7
    2418:	a802      	add	r0, sp, #8
    241a:	f7fe f8cb 	bl	5b4 <strncpy>
	pkt.name[sizeof(pkt.name) - 1] = '\0';
    241e:	2000      	movs	r0, #0
	bt_monitor_send(BT_MONITOR_NEW_INDEX, &pkt, sizeof(pkt));
    2420:	2210      	movs	r2, #16
    2422:	4669      	mov	r1, sp
	pkt.name[sizeof(pkt.name) - 1] = '\0';
    2424:	f88d 000f 	strb.w	r0, [sp, #15]
	bt_monitor_send(BT_MONITOR_NEW_INDEX, &pkt, sizeof(pkt));
    2428:	f7ff ff50 	bl	22cc <bt_monitor_send>
}
    242c:	b005      	add	sp, #20
    242e:	bd30      	pop	{r4, r5, pc}

00002430 <ver_str>:
	return 0;
}

#if defined(CONFIG_BT_DEBUG)
static const char *ver_str(u8_t ver)
{
    2430:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
    2432:	4d0b      	ldr	r5, [pc, #44]	; (2460 <ver_str+0x30>)
{
    2434:	4606      	mov	r6, r0
	const char * const str[] = {
    2436:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    2438:	b08a      	sub	sp, #40	; 0x28
	const char * const str[] = {
    243a:	466c      	mov	r4, sp
    243c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    243e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2440:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2442:	e895 0003 	ldmia.w	r5, {r0, r1}
		"1.0b", "1.1", "1.2", "2.0", "2.1", "3.0", "4.0", "4.1", "4.2",
		"5.0",
	};

	if (ver < ARRAY_SIZE(str)) {
    2446:	2e09      	cmp	r6, #9
	const char * const str[] = {
    2448:	e884 0003 	stmia.w	r4, {r0, r1}
		return str[ver];
    244c:	bf9b      	ittet	ls
    244e:	ab0a      	addls	r3, sp, #40	; 0x28
    2450:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	}

	return "unknown";
    2454:	4803      	ldrhi	r0, [pc, #12]	; (2464 <ver_str+0x34>)
		return str[ver];
    2456:	f856 0c28 	ldrls.w	r0, [r6, #-40]
}
    245a:	b00a      	add	sp, #40	; 0x28
    245c:	bd70      	pop	{r4, r5, r6, pc}
    245e:	bf00      	nop
    2460:	0000cbc0 	.word	0x0000cbc0
    2464:	0000de04 	.word	0x0000de04

00002468 <valid_adv_param>:



static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    2468:	7803      	ldrb	r3, [r0, #0]
    246a:	8842      	ldrh	r2, [r0, #2]
    246c:	f013 0301 	ands.w	r3, r3, #1
    2470:	d105      	bne.n	247e <valid_adv_param+0x16>
		 * BT Core 4.2 [Vol 2, Part E, 7.8.5]
		 * The Advertising_Interval_Min and Advertising_Interval_Max
		 * shall not be set to less than 0x00A0 (100 ms) if the
		 * Advertising_Type is set to ADV_SCAN_IND or ADV_NONCONN_IND.
		 */
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    2472:	4909      	ldr	r1, [pc, #36]	; (2498 <valid_adv_param+0x30>)
    2474:	7b89      	ldrb	r1, [r1, #14]
    2476:	2908      	cmp	r1, #8
    2478:	d801      	bhi.n	247e <valid_adv_param+0x16>
    247a:	2a9f      	cmp	r2, #159	; 0x9f
    247c:	d90a      	bls.n	2494 <valid_adv_param+0x2c>
		    param->interval_min < 0x00a0) {
			return false;
		}
	}

	if (param->interval_min > param->interval_max ||
    247e:	8880      	ldrh	r0, [r0, #4]
    2480:	4282      	cmp	r2, r0
    2482:	d807      	bhi.n	2494 <valid_adv_param+0x2c>
    2484:	2a1f      	cmp	r2, #31
    2486:	d905      	bls.n	2494 <valid_adv_param+0x2c>
	    param->interval_min < 0x0020 || param->interval_max > 0x4000) {
    2488:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    248c:	bf8c      	ite	hi
    248e:	2000      	movhi	r0, #0
    2490:	2001      	movls	r0, #1
    2492:	4770      	bx	lr
			return false;
    2494:	2000      	movs	r0, #0
		return false;
	}

	return true;
}
    2496:	4770      	bx	lr
    2498:	20004e40 	.word	0x20004e40

0000249c <atomic_or>:
{
    249c:	b500      	push	{lr}
}
    249e:	f3bf 8f5b 	dmb	ish
    24a2:	e850 3f00 	ldrex	r3, [r0]
    24a6:	ea43 0201 	orr.w	r2, r3, r1
    24aa:	e840 2e00 	strex	lr, r2, [r0]
    24ae:	f1be 0f00 	cmp.w	lr, #0
    24b2:	d1f6      	bne.n	24a2 <atomic_or+0x6>
    24b4:	f3bf 8f5b 	dmb	ish
    24b8:	4618      	mov	r0, r3
    24ba:	f85d fb04 	ldr.w	pc, [sp], #4

000024be <atomic_and>:
{
    24be:	b500      	push	{lr}
}
    24c0:	f3bf 8f5b 	dmb	ish
    24c4:	e850 3f00 	ldrex	r3, [r0]
    24c8:	ea03 0201 	and.w	r2, r3, r1
    24cc:	e840 2e00 	strex	lr, r2, [r0]
    24d0:	f1be 0f00 	cmp.w	lr, #0
    24d4:	d1f6      	bne.n	24c4 <atomic_and+0x6>
    24d6:	f3bf 8f5b 	dmb	ish
    24da:	4618      	mov	r0, r3
    24dc:	f85d fb04 	ldr.w	pc, [sp], #4

000024e0 <hci_cmd_done>:
{
    24e0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    24e4:	4615      	mov	r5, r2
    24e6:	460f      	mov	r7, r1
    24e8:	4606      	mov	r6, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    24ea:	f009 fda1 	bl	c030 <_impl_k_current_get>
	BT_DBG("opcode 0x%04x status 0x%02x buf %p", opcode, status, buf);
    24ee:	4a27      	ldr	r2, [pc, #156]	; (258c <hci_cmd_done+0xac>)
    24f0:	4927      	ldr	r1, [pc, #156]	; (2590 <hci_cmd_done+0xb0>)
    24f2:	9502      	str	r5, [sp, #8]
    24f4:	4603      	mov	r3, r0
    24f6:	e88d 00c0 	stmia.w	sp, {r6, r7}
    24fa:	2007      	movs	r0, #7
    24fc:	f7ff fe78 	bl	21f0 <bt_log>
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    2500:	79a8      	ldrb	r0, [r5, #6]
    2502:	f8df 809c 	ldr.w	r8, [pc, #156]	; 25a0 <hci_cmd_done+0xc0>
    2506:	f009 f8ad 	bl	b664 <net_buf_pool_get>
    250a:	4580      	cmp	r8, r0
    250c:	d010      	beq.n	2530 <hci_cmd_done+0x50>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    250e:	79ac      	ldrb	r4, [r5, #6]
    2510:	4620      	mov	r0, r4
    2512:	f009 f8a7 	bl	b664 <net_buf_pool_get>
    2516:	f8cd 8008 	str.w	r8, [sp, #8]
    251a:	9001      	str	r0, [sp, #4]
    251c:	9400      	str	r4, [sp, #0]
    251e:	4633      	mov	r3, r6
    2520:	4a1a      	ldr	r2, [pc, #104]	; (258c <hci_cmd_done+0xac>)
    2522:	491c      	ldr	r1, [pc, #112]	; (2594 <hci_cmd_done+0xb4>)
    2524:	2004      	movs	r0, #4
    2526:	f7ff fe63 	bl	21f0 <bt_log>
}
    252a:	b004      	add	sp, #16
    252c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cmd(buf)->opcode != opcode) {
    2530:	4628      	mov	r0, r5
    2532:	f009 f89d 	bl	b670 <net_buf_id>
    2536:	4c18      	ldr	r4, [pc, #96]	; (2598 <hci_cmd_done+0xb8>)
    2538:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    253c:	8843      	ldrh	r3, [r0, #2]
    253e:	42b3      	cmp	r3, r6
    2540:	d00c      	beq.n	255c <hci_cmd_done+0x7c>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    2542:	4628      	mov	r0, r5
    2544:	f009 f894 	bl	b670 <net_buf_id>
    2548:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    254c:	4a0f      	ldr	r2, [pc, #60]	; (258c <hci_cmd_done+0xac>)
    254e:	8843      	ldrh	r3, [r0, #2]
    2550:	9300      	str	r3, [sp, #0]
    2552:	4912      	ldr	r1, [pc, #72]	; (259c <hci_cmd_done+0xbc>)
    2554:	4633      	mov	r3, r6
    2556:	2004      	movs	r0, #4
    2558:	f7ff fe4a 	bl	21f0 <bt_log>
	if (cmd(buf)->sync) {
    255c:	4628      	mov	r0, r5
    255e:	f009 f887 	bl	b670 <net_buf_id>
    2562:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    2566:	6843      	ldr	r3, [r0, #4]
    2568:	2b00      	cmp	r3, #0
    256a:	d0de      	beq.n	252a <hci_cmd_done+0x4a>
		cmd(buf)->status = status;
    256c:	4628      	mov	r0, r5
    256e:	f009 f87f 	bl	b670 <net_buf_id>
    2572:	f804 7030 	strb.w	r7, [r4, r0, lsl #3]
		k_sem_give(cmd(buf)->sync);
    2576:	4628      	mov	r0, r5
    2578:	f009 f87a 	bl	b670 <net_buf_id>
    257c:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    2580:	6840      	ldr	r0, [r0, #4]
}
    2582:	b004      	add	sp, #16
    2584:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2588:	f009 bdb0 	b.w	c0ec <_impl_k_sem_give>
    258c:	0000d2d1 	.word	0x0000d2d1
    2590:	0000d7db 	.word	0x0000d7db
    2594:	0000d807 	.word	0x0000d807
    2598:	20000788 	.word	0x20000788
    259c:	0000d840 	.word	0x0000d840
    25a0:	20005188 	.word	0x20005188

000025a4 <atomic_test_bit.constprop.23>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    25a4:	4b07      	ldr	r3, [pc, #28]	; (25c4 <atomic_test_bit.constprop.23+0x20>)
    25a6:	f3bf 8f5b 	dmb	ish
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    25aa:	0942      	lsrs	r2, r0, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    25ac:	eb03 0382 	add.w	r3, r3, r2, lsl #2

	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    25b0:	f000 001f 	and.w	r0, r0, #31
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    25b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    25b6:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    25ba:	fa43 f000 	asr.w	r0, r3, r0
}
    25be:	f000 0001 	and.w	r0, r0, #1
    25c2:	4770      	bx	lr
    25c4:	20004e40 	.word	0x20004e40

000025c8 <bt_hci_cmd_create>:
{
    25c8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    25cc:	4606      	mov	r6, r0
    25ce:	460f      	mov	r7, r1
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    25d0:	f009 fd2e 	bl	c030 <_impl_k_current_get>
	BT_DBG("opcode 0x%04x param_len %u", opcode, param_len);
    25d4:	4d1c      	ldr	r5, [pc, #112]	; (2648 <bt_hci_cmd_create+0x80>)
    25d6:	491d      	ldr	r1, [pc, #116]	; (264c <bt_hci_cmd_create+0x84>)
    25d8:	4603      	mov	r3, r0
    25da:	462a      	mov	r2, r5
    25dc:	e88d 00c0 	stmia.w	sp, {r6, r7}
    25e0:	2007      	movs	r0, #7
    25e2:	f7ff fe05 	bl	21f0 <bt_log>
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    25e6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    25ea:	4819      	ldr	r0, [pc, #100]	; (2650 <bt_hci_cmd_create+0x88>)
    25ec:	f009 f8ce 	bl	b78c <net_buf_alloc_fixed>
    25f0:	4604      	mov	r4, r0
    25f2:	f009 fd1d 	bl	c030 <_impl_k_current_get>
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    25f6:	f104 0808 	add.w	r8, r4, #8
	BT_DBG("buf %p", buf);
    25fa:	4603      	mov	r3, r0
    25fc:	462a      	mov	r2, r5
    25fe:	9400      	str	r4, [sp, #0]
    2600:	4914      	ldr	r1, [pc, #80]	; (2654 <bt_hci_cmd_create+0x8c>)
	cmd(buf)->opcode = opcode;
    2602:	4d15      	ldr	r5, [pc, #84]	; (2658 <bt_hci_cmd_create+0x90>)
	BT_DBG("buf %p", buf);
    2604:	2007      	movs	r0, #7
    2606:	f7ff fdf3 	bl	21f0 <bt_log>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	*(u8_t *)net_buf_user_data(buf) = type;
    260a:	f04f 0900 	mov.w	r9, #0
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    260e:	2100      	movs	r1, #0
    2610:	4640      	mov	r0, r8
    2612:	f009 f8da 	bl	b7ca <net_buf_simple_reserve>
    2616:	f884 9014 	strb.w	r9, [r4, #20]
	cmd(buf)->opcode = opcode;
    261a:	4620      	mov	r0, r4
    261c:	f009 f828 	bl	b670 <net_buf_id>
    2620:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    2624:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
    2626:	4620      	mov	r0, r4
    2628:	f009 f822 	bl	b670 <net_buf_id>
    262c:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
	hdr = net_buf_add(buf, sizeof(*hdr));
    2630:	2103      	movs	r1, #3
	cmd(buf)->sync = NULL;
    2632:	f8c0 9004 	str.w	r9, [r0, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    2636:	4640      	mov	r0, r8
    2638:	f009 f90a 	bl	b850 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
    263c:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
    263e:	7087      	strb	r7, [r0, #2]
}
    2640:	4620      	mov	r0, r4
    2642:	b002      	add	sp, #8
    2644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2648:	0000d261 	.word	0x0000d261
    264c:	0000d4d7 	.word	0x0000d4d7
    2650:	20005188 	.word	0x20005188
    2654:	0000d4fb 	.word	0x0000d4fb
    2658:	20000788 	.word	0x20000788

0000265c <bt_hci_cmd_send_sync>:
{
    265c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2660:	4680      	mov	r8, r0
    2662:	b08a      	sub	sp, #40	; 0x28
    2664:	4615      	mov	r5, r2
	if (!buf) {
    2666:	460c      	mov	r4, r1
    2668:	b921      	cbnz	r1, 2674 <bt_hci_cmd_send_sync+0x18>
		buf = bt_hci_cmd_create(opcode, 0);
    266a:	f7ff ffad 	bl	25c8 <bt_hci_cmd_create>
		if (!buf) {
    266e:	4604      	mov	r4, r0
    2670:	2800      	cmp	r0, #0
    2672:	d04b      	beq.n	270c <bt_hci_cmd_send_sync+0xb0>
    2674:	f009 fcdc 	bl	c030 <_impl_k_current_get>
	BT_DBG("buf %p opcode 0x%04x len %u", buf, opcode, buf->len);
    2678:	89a3      	ldrh	r3, [r4, #12]
    267a:	9302      	str	r3, [sp, #8]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    267c:	af04      	add	r7, sp, #16
    267e:	4603      	mov	r3, r0
    2680:	4a24      	ldr	r2, [pc, #144]	; (2714 <bt_hci_cmd_send_sync+0xb8>)
    2682:	4925      	ldr	r1, [pc, #148]	; (2718 <bt_hci_cmd_send_sync+0xbc>)
	cmd(buf)->sync = &sync_sem;
    2684:	4e25      	ldr	r6, [pc, #148]	; (271c <bt_hci_cmd_send_sync+0xc0>)
	BT_DBG("buf %p opcode 0x%04x len %u", buf, opcode, buf->len);
    2686:	2007      	movs	r0, #7
    2688:	e88d 0110 	stmia.w	sp, {r4, r8}
    268c:	f7ff fdb0 	bl	21f0 <bt_log>
    2690:	2201      	movs	r2, #1
    2692:	2100      	movs	r1, #0
    2694:	4638      	mov	r0, r7
    2696:	f009 fd1f 	bl	c0d8 <_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    269a:	4620      	mov	r0, r4
    269c:	f008 ffe8 	bl	b670 <net_buf_id>
    26a0:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
    26a4:	6047      	str	r7, [r0, #4]
	net_buf_ref(buf);
    26a6:	4620      	mov	r0, r4
    26a8:	f009 f8ce 	bl	b848 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    26ac:	4621      	mov	r1, r4
    26ae:	481c      	ldr	r0, [pc, #112]	; (2720 <bt_hci_cmd_send_sync+0xc4>)
    26b0:	f009 f88f 	bl	b7d2 <net_buf_put>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    26b4:	f242 7110 	movw	r1, #10000	; 0x2710
    26b8:	4638      	mov	r0, r7
    26ba:	f009 fd77 	bl	c1ac <_impl_k_sem_take>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    26be:	f009 fcb7 	bl	c030 <_impl_k_current_get>
    26c2:	4607      	mov	r7, r0
	BT_DBG("opcode 0x%04x status 0x%02x", opcode, cmd(buf)->status);
    26c4:	4620      	mov	r0, r4
    26c6:	f008 ffd3 	bl	b670 <net_buf_id>
    26ca:	f816 3030 	ldrb.w	r3, [r6, r0, lsl #3]
    26ce:	9301      	str	r3, [sp, #4]
    26d0:	4a10      	ldr	r2, [pc, #64]	; (2714 <bt_hci_cmd_send_sync+0xb8>)
    26d2:	4914      	ldr	r1, [pc, #80]	; (2724 <bt_hci_cmd_send_sync+0xc8>)
    26d4:	f8cd 8000 	str.w	r8, [sp]
    26d8:	463b      	mov	r3, r7
    26da:	2007      	movs	r0, #7
    26dc:	f7ff fd88 	bl	21f0 <bt_log>
	if (cmd(buf)->status) {
    26e0:	4620      	mov	r0, r4
    26e2:	f008 ffc5 	bl	b670 <net_buf_id>
    26e6:	f816 0030 	ldrb.w	r0, [r6, r0, lsl #3]
    26ea:	b138      	cbz	r0, 26fc <bt_hci_cmd_send_sync+0xa0>
		net_buf_unref(buf);
    26ec:	4620      	mov	r0, r4
    26ee:	f009 f87d 	bl	b7ec <net_buf_unref>
		err = -EIO;
    26f2:	f06f 0004 	mvn.w	r0, #4
}
    26f6:	b00a      	add	sp, #40	; 0x28
    26f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (rsp) {
    26fc:	b10d      	cbz	r5, 2702 <bt_hci_cmd_send_sync+0xa6>
			*rsp = buf;
    26fe:	602c      	str	r4, [r5, #0]
    2700:	e7f9      	b.n	26f6 <bt_hci_cmd_send_sync+0x9a>
			net_buf_unref(buf);
    2702:	4620      	mov	r0, r4
    2704:	f009 f872 	bl	b7ec <net_buf_unref>
		err = 0;
    2708:	4628      	mov	r0, r5
    270a:	e7f4      	b.n	26f6 <bt_hci_cmd_send_sync+0x9a>
			return -ENOBUFS;
    270c:	f06f 0036 	mvn.w	r0, #54	; 0x36
    2710:	e7f1      	b.n	26f6 <bt_hci_cmd_send_sync+0x9a>
    2712:	bf00      	nop
    2714:	0000d273 	.word	0x0000d273
    2718:	0000d54f 	.word	0x0000d54f
    271c:	20000788 	.word	0x20000788
    2720:	20004ef4 	.word	0x20004ef4
    2724:	0000d574 	.word	0x0000d574

00002728 <set_random_address>:
{
    2728:	b573      	push	{r0, r1, r4, r5, r6, lr}
    272a:	4605      	mov	r5, r0
    272c:	f009 fc80 	bl	c030 <_impl_k_current_get>
    2730:	4604      	mov	r4, r0
	BT_DBG("%s", bt_addr_str(addr));
    2732:	4628      	mov	r0, r5
    2734:	f7ff fc5a 	bl	1fec <bt_addr_str>
#define BT_ADDR_LE_NONE (&(bt_addr_le_t) { 0, \
			 { { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff } } })

static inline int bt_addr_cmp(const bt_addr_t *a, const bt_addr_t *b)
{
	return memcmp(a, b, sizeof(*a));
    2738:	4e18      	ldr	r6, [pc, #96]	; (279c <set_random_address+0x74>)
    273a:	9000      	str	r0, [sp, #0]
    273c:	4623      	mov	r3, r4
    273e:	4a18      	ldr	r2, [pc, #96]	; (27a0 <set_random_address+0x78>)
    2740:	4918      	ldr	r1, [pc, #96]	; (27a4 <set_random_address+0x7c>)
    2742:	2007      	movs	r0, #7
    2744:	f7ff fd54 	bl	21f0 <bt_log>
    2748:	2206      	movs	r2, #6
    274a:	f106 0108 	add.w	r1, r6, #8
    274e:	4628      	mov	r0, r5
    2750:	f7fd ff4e 	bl	5f0 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    2754:	4604      	mov	r4, r0
    2756:	b1d8      	cbz	r0, 2790 <set_random_address+0x68>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    2758:	2106      	movs	r1, #6
    275a:	f242 0005 	movw	r0, #8197	; 0x2005
    275e:	f7ff ff33 	bl	25c8 <bt_hci_cmd_create>
	if (!buf) {
    2762:	4604      	mov	r4, r0
    2764:	b1b8      	cbz	r0, 2796 <set_random_address+0x6e>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    2766:	2206      	movs	r2, #6
    2768:	4629      	mov	r1, r5
    276a:	3008      	adds	r0, #8
    276c:	f009 f876 	bl	b85c <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    2770:	4621      	mov	r1, r4
    2772:	2200      	movs	r2, #0
    2774:	f242 0005 	movw	r0, #8197	; 0x2005
    2778:	f7ff ff70 	bl	265c <bt_hci_cmd_send_sync>
	if (err) {
    277c:	4604      	mov	r4, r0
    277e:	b938      	cbnz	r0, 2790 <set_random_address+0x68>
	return memcmp(a, b, sizeof(*a));
}

static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    2780:	2206      	movs	r2, #6
    2782:	4629      	mov	r1, r5
    2784:	f106 0008 	add.w	r0, r6, #8
    2788:	f7fd ff47 	bl	61a <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    278c:	2301      	movs	r3, #1
    278e:	71f3      	strb	r3, [r6, #7]
}
    2790:	4620      	mov	r0, r4
    2792:	b002      	add	sp, #8
    2794:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    2796:	f06f 0436 	mvn.w	r4, #54	; 0x36
    279a:	e7f9      	b.n	2790 <set_random_address+0x68>
    279c:	20004e40 	.word	0x20004e40
    27a0:	0000d288 	.word	0x0000d288
    27a4:	0000dd18 	.word	0x0000dd18

000027a8 <le_set_private_addr>:
{
    27a8:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
    27aa:	2106      	movs	r1, #6
    27ac:	4668      	mov	r0, sp
    27ae:	f002 f92b 	bl	4a08 <bt_rand>
	if (err) {
    27b2:	b940      	cbnz	r0, 27c6 <le_set_private_addr+0x1e>
	nrpa.val[5] &= 0x3f;
    27b4:	f89d 3005 	ldrb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
    27b8:	4668      	mov	r0, sp
	nrpa.val[5] &= 0x3f;
    27ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    27be:	f88d 3005 	strb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
    27c2:	f7ff ffb1 	bl	2728 <set_random_address>
}
    27c6:	b003      	add	sp, #12
    27c8:	f85d fb04 	ldr.w	pc, [sp], #4

000027cc <set_le_scan_enable>:
{
    27cc:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    27ce:	2102      	movs	r1, #2
{
    27d0:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    27d2:	f242 000c 	movw	r0, #8204	; 0x200c
    27d6:	f7ff fef7 	bl	25c8 <bt_hci_cmd_create>
	if (!buf) {
    27da:	4604      	mov	r4, r0
    27dc:	b320      	cbz	r0, 2828 <set_le_scan_enable+0x5c>
	cp = net_buf_add(buf, sizeof(*cp));
    27de:	2102      	movs	r1, #2
    27e0:	3008      	adds	r0, #8
    27e2:	f009 f835 	bl	b850 <net_buf_simple_add>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    27e6:	2d01      	cmp	r5, #1
	cp = net_buf_add(buf, sizeof(*cp));
    27e8:	4601      	mov	r1, r0
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    27ea:	d114      	bne.n	2816 <set_le_scan_enable+0x4a>
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
    27ec:	200a      	movs	r0, #10
    27ee:	f7ff fed9 	bl	25a4 <atomic_test_bit.constprop.23>
    27f2:	7048      	strb	r0, [r1, #1]
	cp->enable = enable;
    27f4:	700d      	strb	r5, [r1, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    27f6:	2200      	movs	r2, #0
    27f8:	4621      	mov	r1, r4
    27fa:	f242 000c 	movw	r0, #8204	; 0x200c
    27fe:	f7ff ff2d 	bl	265c <bt_hci_cmd_send_sync>
	if (err) {
    2802:	4604      	mov	r4, r0
    2804:	b928      	cbnz	r0, 2812 <set_le_scan_enable+0x46>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    2806:	2d01      	cmp	r5, #1
    2808:	d108      	bne.n	281c <set_le_scan_enable+0x50>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    280a:	2180      	movs	r1, #128	; 0x80
    280c:	4808      	ldr	r0, [pc, #32]	; (2830 <set_le_scan_enable+0x64>)
    280e:	f7ff fe45 	bl	249c <atomic_or>
}
    2812:	4620      	mov	r0, r4
    2814:	bd38      	pop	{r3, r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    2816:	2300      	movs	r3, #0
    2818:	7043      	strb	r3, [r0, #1]
    281a:	e7eb      	b.n	27f4 <set_le_scan_enable+0x28>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    281c:	f06f 0180 	mvn.w	r1, #128	; 0x80
    2820:	4803      	ldr	r0, [pc, #12]	; (2830 <set_le_scan_enable+0x64>)
    2822:	f7ff fe4c 	bl	24be <atomic_and>
    2826:	e7f4      	b.n	2812 <set_le_scan_enable+0x46>
		return -ENOBUFS;
    2828:	f06f 0436 	mvn.w	r4, #54	; 0x36
    282c:	e7f1      	b.n	2812 <set_le_scan_enable+0x46>
    282e:	bf00      	nop
    2830:	20004eb0 	.word	0x20004eb0

00002834 <set_ext_ad>:
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
}

//#if defined(CONFIG_EXT_ADV)
static int set_ext_ad(u16_t hci_op, const struct bt_data *ad, size_t ad_len)
{
    2834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2838:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_ext_adv_data *set_data;
	struct net_buf *buf;
	int i;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    283a:	21fc      	movs	r1, #252	; 0xfc
{
    283c:	4607      	mov	r7, r0
    283e:	4690      	mov	r8, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    2840:	f7ff fec2 	bl	25c8 <bt_hci_cmd_create>
	if (!buf) {
    2844:	4606      	mov	r6, r0
    2846:	2800      	cmp	r0, #0
    2848:	d03c      	beq.n	28c4 <set_ext_ad+0x90>
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
    284a:	21fc      	movs	r1, #252	; 0xfc
    284c:	3008      	adds	r0, #8
    284e:	f008 ffff 	bl	b850 <net_buf_simple_add>

	memset(set_data, 0, sizeof(*set_data));
    2852:	22fc      	movs	r2, #252	; 0xfc
    2854:	2100      	movs	r1, #0
	set_data = net_buf_add(buf, sizeof(*set_data));
    2856:	4605      	mov	r5, r0
	memset(set_data, 0, sizeof(*set_data));
    2858:	f7fd ff0b 	bl	672 <memset>

	for (i = 0; i < ad_len; i++) {
    285c:	f04f 0900 	mov.w	r9, #0
    2860:	45c1      	cmp	r9, r8
    2862:	d106      	bne.n	2872 <set_ext_ad+0x3e>
		memcpy(&set_data->data[set_data->len], ad[i].data,
		       ad[i].data_len);
		set_data->len += ad[i].data_len;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    2864:	4631      	mov	r1, r6
    2866:	4638      	mov	r0, r7
    2868:	2200      	movs	r2, #0
}
    286a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    286e:	f7ff bef5 	b.w	265c <bt_hci_cmd_send_sync>
		if (set_data->len + ad[i].data_len + 2 > 251) {
    2872:	7862      	ldrb	r2, [r4, #1]
    2874:	782b      	ldrb	r3, [r5, #0]
    2876:	18d1      	adds	r1, r2, r3
    2878:	3102      	adds	r1, #2
    287a:	29fb      	cmp	r1, #251	; 0xfb
    287c:	f104 0408 	add.w	r4, r4, #8
    2880:	dd06      	ble.n	2890 <set_ext_ad+0x5c>
			net_buf_unref(buf);
    2882:	4630      	mov	r0, r6
    2884:	f008 ffb2 	bl	b7ec <net_buf_unref>
			return -EINVAL;
    2888:	f06f 0015 	mvn.w	r0, #21
    288c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		set_data->data[set_data->len++] = ad[i].data_len + 1;
    2890:	18e9      	adds	r1, r5, r3
    2892:	1c50      	adds	r0, r2, #1
    2894:	7048      	strb	r0, [r1, #1]
		set_data->data[set_data->len++] = ad[i].type;
    2896:	1c98      	adds	r0, r3, #2
    2898:	b2c0      	uxtb	r0, r0
		set_data->data[set_data->len++] = ad[i].data_len + 1;
    289a:	3301      	adds	r3, #1
		set_data->data[set_data->len++] = ad[i].type;
    289c:	7028      	strb	r0, [r5, #0]
    289e:	fa55 f383 	uxtab	r3, r5, r3
    28a2:	f814 1c08 	ldrb.w	r1, [r4, #-8]
    28a6:	7059      	strb	r1, [r3, #1]
		memcpy(&set_data->data[set_data->len], ad[i].data,
    28a8:	3001      	adds	r0, #1
    28aa:	f854 1c04 	ldr.w	r1, [r4, #-4]
    28ae:	4428      	add	r0, r5
    28b0:	f7fd feb3 	bl	61a <memcpy>
		set_data->len += ad[i].data_len;
    28b4:	782b      	ldrb	r3, [r5, #0]
    28b6:	f814 2c07 	ldrb.w	r2, [r4, #-7]
    28ba:	4413      	add	r3, r2
    28bc:	702b      	strb	r3, [r5, #0]
	for (i = 0; i < ad_len; i++) {
    28be:	f109 0901 	add.w	r9, r9, #1
    28c2:	e7cd      	b.n	2860 <set_ext_ad+0x2c>
		return -ENOBUFS;
    28c4:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    28c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000028cc <bt_le_scan_update>:
{
    28cc:	b508      	push	{r3, lr}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    28ce:	2008      	movs	r0, #8
    28d0:	f7ff fe68 	bl	25a4 <atomic_test_bit.constprop.23>
    28d4:	4601      	mov	r1, r0
    28d6:	b940      	cbnz	r0, 28ea <bt_le_scan_update+0x1e>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    28d8:	2007      	movs	r0, #7
    28da:	f7ff fe63 	bl	25a4 <atomic_test_bit.constprop.23>
    28de:	b120      	cbz	r0, 28ea <bt_le_scan_update+0x1e>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    28e0:	4608      	mov	r0, r1
}
    28e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    28e6:	f7ff bf71 	b.w	27cc <set_le_scan_enable>
}
    28ea:	2000      	movs	r0, #0
    28ec:	bd08      	pop	{r3, pc}
	...

000028f0 <bt_init.part.13>:
static int bt_init(void)
    28f0:	b508      	push	{r3, lr}
	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);
    28f2:	2200      	movs	r2, #0
    28f4:	4611      	mov	r1, r2
    28f6:	2008      	movs	r0, #8
    28f8:	f7ff fce8 	bl	22cc <bt_monitor_send>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    28fc:	2102      	movs	r1, #2
    28fe:	4804      	ldr	r0, [pc, #16]	; (2910 <bt_init.part.13+0x20>)
    2900:	f7ff fdcc 	bl	249c <atomic_or>
	bt_le_scan_update(false);
    2904:	2000      	movs	r0, #0
    2906:	f7ff ffe1 	bl	28cc <bt_le_scan_update>
}
    290a:	2000      	movs	r0, #0
    290c:	bd08      	pop	{r3, pc}
    290e:	bf00      	nop
    2910:	20004eb0 	.word	0x20004eb0

00002914 <bt_addr_le_create_static>:
	addr->type = BT_ADDR_LE_RANDOM;
    2914:	2301      	movs	r3, #1
{
    2916:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
    2918:	2106      	movs	r1, #6
{
    291a:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
    291c:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
    2920:	f002 f872 	bl	4a08 <bt_rand>
	if (err) {
    2924:	b918      	cbnz	r0, 292e <bt_addr_le_create_static+0x1a>
	BT_ADDR_SET_STATIC(&addr->a);
    2926:	79a3      	ldrb	r3, [r4, #6]
    2928:	f063 033f 	orn	r3, r3, #63	; 0x3f
    292c:	71a3      	strb	r3, [r4, #6]
}
    292e:	bd10      	pop	{r4, pc}

00002930 <hci_init>:
{
    2930:	b5f0      	push	{r4, r5, r6, r7, lr}
    2932:	b08b      	sub	sp, #44	; 0x2c
	err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    2934:	aa08      	add	r2, sp, #32
    2936:	2100      	movs	r1, #0
    2938:	f640 4003 	movw	r0, #3075	; 0xc03
    293c:	f7ff fe8e 	bl	265c <bt_hci_cmd_send_sync>
	if (err) {
    2940:	4604      	mov	r4, r0
    2942:	2800      	cmp	r0, #0
    2944:	f040 80b2 	bne.w	2aac <hci_init+0x17c>
	u8_t status = buf->data[0];
    2948:	9b08      	ldr	r3, [sp, #32]
    294a:	689b      	ldr	r3, [r3, #8]
    294c:	781c      	ldrb	r4, [r3, #0]
    294e:	f009 fb6f 	bl	c030 <_impl_k_current_get>
	BT_DBG("status %u", status);
    2952:	9400      	str	r4, [sp, #0]
    2954:	4603      	mov	r3, r0
    2956:	4ab3      	ldr	r2, [pc, #716]	; (2c24 <hci_init+0x2f4>)
    2958:	49b3      	ldr	r1, [pc, #716]	; (2c28 <hci_init+0x2f8>)
    295a:	2007      	movs	r0, #7
    295c:	f7ff fc48 	bl	21f0 <bt_log>
	if (status) {
    2960:	b96c      	cbnz	r4, 297e <hci_init+0x4e>
	scan_dev_found_cb = NULL;
    2962:	4bb2      	ldr	r3, [pc, #712]	; (2c2c <hci_init+0x2fc>)
    2964:	601c      	str	r4, [r3, #0]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2966:	4bb2      	ldr	r3, [pc, #712]	; (2c30 <hci_init+0x300>)
    2968:	f3bf 8f5b 	dmb	ish
    296c:	2201      	movs	r2, #1
    296e:	e853 1f00 	ldrex	r1, [r3]
    2972:	e843 2000 	strex	r0, r2, [r3]
    2976:	2800      	cmp	r0, #0
    2978:	d1f9      	bne.n	296e <hci_init+0x3e>
    297a:	f3bf 8f5b 	dmb	ish
	net_buf_unref(rsp);
    297e:	9808      	ldr	r0, [sp, #32]
    2980:	f008 ff34 	bl	b7ec <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    2984:	aa08      	add	r2, sp, #32
    2986:	2100      	movs	r1, #0
    2988:	f241 0003 	movw	r0, #4099	; 0x1003
    298c:	f7ff fe66 	bl	265c <bt_hci_cmd_send_sync>
	if (err) {
    2990:	4604      	mov	r4, r0
    2992:	2800      	cmp	r0, #0
    2994:	f040 808a 	bne.w	2aac <hci_init+0x17c>
    2998:	9b08      	ldr	r3, [sp, #32]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    299a:	4ea6      	ldr	r6, [pc, #664]	; (2c34 <hci_init+0x304>)
    299c:	689d      	ldr	r5, [r3, #8]
    299e:	f009 fb47 	bl	c030 <_impl_k_current_get>
	BT_DBG("status %u", rp->status);
    29a2:	f815 3b01 	ldrb.w	r3, [r5], #1
    29a6:	9300      	str	r3, [sp, #0]
    29a8:	4aa3      	ldr	r2, [pc, #652]	; (2c38 <hci_init+0x308>)
    29aa:	499f      	ldr	r1, [pc, #636]	; (2c28 <hci_init+0x2f8>)
    29ac:	4603      	mov	r3, r0
    29ae:	2007      	movs	r0, #7
    29b0:	f7ff fc1e 	bl	21f0 <bt_log>
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    29b4:	4629      	mov	r1, r5
    29b6:	2208      	movs	r2, #8
    29b8:	f106 0016 	add.w	r0, r6, #22
    29bc:	f7fd fe2d 	bl	61a <memcpy>
	net_buf_unref(rsp);
    29c0:	9808      	ldr	r0, [sp, #32]
    29c2:	f008 ff13 	bl	b7ec <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    29c6:	4621      	mov	r1, r4
    29c8:	aa08      	add	r2, sp, #32
    29ca:	f241 0001 	movw	r0, #4097	; 0x1001
    29ce:	f7ff fe45 	bl	265c <bt_hci_cmd_send_sync>
    29d2:	4635      	mov	r5, r6
	if (err) {
    29d4:	4604      	mov	r4, r0
    29d6:	2800      	cmp	r0, #0
    29d8:	d168      	bne.n	2aac <hci_init+0x17c>
    29da:	9b08      	ldr	r3, [sp, #32]
    29dc:	689f      	ldr	r7, [r3, #8]
    29de:	f009 fb27 	bl	c030 <_impl_k_current_get>
	BT_DBG("status %u", rp->status);
    29e2:	783b      	ldrb	r3, [r7, #0]
    29e4:	4990      	ldr	r1, [pc, #576]	; (2c28 <hci_init+0x2f8>)
    29e6:	9300      	str	r3, [sp, #0]
    29e8:	4a94      	ldr	r2, [pc, #592]	; (2c3c <hci_init+0x30c>)
    29ea:	4603      	mov	r3, r0
    29ec:	2007      	movs	r0, #7
    29ee:	f7ff fbff 	bl	21f0 <bt_log>
	bt_dev.hci_version = rp->hci_version;
    29f2:	787b      	ldrb	r3, [r7, #1]
    29f4:	73b3      	strb	r3, [r6, #14]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    29f6:	78fa      	ldrb	r2, [r7, #3]
    29f8:	78bb      	ldrb	r3, [r7, #2]
	net_buf_unref(rsp);
    29fa:	9808      	ldr	r0, [sp, #32]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    29fc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2a00:	8233      	strh	r3, [r6, #16]
	bt_dev.lmp_version = rp->lmp_version;
    2a02:	793b      	ldrb	r3, [r7, #4]
    2a04:	73f3      	strb	r3, [r6, #15]
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    2a06:	7a3a      	ldrb	r2, [r7, #8]
    2a08:	79fb      	ldrb	r3, [r7, #7]
    2a0a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2a0e:	8273      	strh	r3, [r6, #18]
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    2a10:	79ba      	ldrb	r2, [r7, #6]
    2a12:	797b      	ldrb	r3, [r7, #5]
    2a14:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2a18:	82b3      	strh	r3, [r6, #20]
	net_buf_unref(rsp);
    2a1a:	f008 fee7 	bl	b7ec <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    2a1e:	4621      	mov	r1, r4
    2a20:	aa08      	add	r2, sp, #32
    2a22:	f241 0009 	movw	r0, #4105	; 0x1009
    2a26:	f7ff fe19 	bl	265c <bt_hci_cmd_send_sync>
	if (err) {
    2a2a:	4604      	mov	r4, r0
    2a2c:	2800      	cmp	r0, #0
    2a2e:	d13d      	bne.n	2aac <hci_init+0x17c>
    2a30:	9b08      	ldr	r3, [sp, #32]
    2a32:	689f      	ldr	r7, [r3, #8]
    2a34:	f009 fafc 	bl	c030 <_impl_k_current_get>
	BT_DBG("status %u", rp->status);
    2a38:	f817 3b01 	ldrb.w	r3, [r7], #1
    2a3c:	9300      	str	r3, [sp, #0]
    2a3e:	4a80      	ldr	r2, [pc, #512]	; (2c40 <hci_init+0x310>)
    2a40:	4979      	ldr	r1, [pc, #484]	; (2c28 <hci_init+0x2f8>)
    2a42:	4603      	mov	r3, r0
    2a44:	2007      	movs	r0, #7
    2a46:	f7ff fbd3 	bl	21f0 <bt_log>
    2a4a:	2206      	movs	r2, #6
    2a4c:	4639      	mov	r1, r7
    2a4e:	1c70      	adds	r0, r6, #1
    2a50:	f7fd fde3 	bl	61a <memcpy>
	net_buf_unref(rsp);
    2a54:	9808      	ldr	r0, [sp, #32]
	bt_dev.id_addr.type = BT_ADDR_LE_PUBLIC;
    2a56:	7034      	strb	r4, [r6, #0]
	net_buf_unref(rsp);
    2a58:	f008 fec8 	bl	b7ec <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    2a5c:	4621      	mov	r1, r4
    2a5e:	aa08      	add	r2, sp, #32
    2a60:	f241 0002 	movw	r0, #4098	; 0x1002
    2a64:	f7ff fdfa 	bl	265c <bt_hci_cmd_send_sync>
	if (err) {
    2a68:	4604      	mov	r4, r0
    2a6a:	b9f8      	cbnz	r0, 2aac <hci_init+0x17c>
    2a6c:	9b08      	ldr	r3, [sp, #32]
    2a6e:	689f      	ldr	r7, [r3, #8]
    2a70:	f009 fade 	bl	c030 <_impl_k_current_get>
	BT_DBG("status %u", rp->status);
    2a74:	f817 3b01 	ldrb.w	r3, [r7], #1
    2a78:	9300      	str	r3, [sp, #0]
    2a7a:	4a72      	ldr	r2, [pc, #456]	; (2c44 <hci_init+0x314>)
    2a7c:	496a      	ldr	r1, [pc, #424]	; (2c28 <hci_init+0x2f8>)
    2a7e:	4603      	mov	r3, r0
    2a80:	2007      	movs	r0, #7
    2a82:	f7ff fbb5 	bl	21f0 <bt_log>
	memcpy(bt_dev.supported_commands, rp->commands,
    2a86:	2240      	movs	r2, #64	; 0x40
    2a88:	4639      	mov	r1, r7
    2a8a:	f106 001e 	add.w	r0, r6, #30
    2a8e:	f7fd fdc4 	bl	61a <memcpy>
	net_buf_unref(rsp);
    2a92:	9808      	ldr	r0, [sp, #32]
    2a94:	f008 feaa 	bl	b7ec <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    2a98:	7eb3      	ldrb	r3, [r6, #26]
    2a9a:	0658      	lsls	r0, r3, #25
    2a9c:	d409      	bmi.n	2ab2 <hci_init+0x182>
		BT_ERR("Non-LE capable controller detected!");
    2a9e:	4a6a      	ldr	r2, [pc, #424]	; (2c48 <hci_init+0x318>)
    2aa0:	496a      	ldr	r1, [pc, #424]	; (2c4c <hci_init+0x31c>)
    2aa2:	2003      	movs	r0, #3
    2aa4:	f7ff fba4 	bl	21f0 <bt_log>
		return -ENODEV;
    2aa8:	f06f 0412 	mvn.w	r4, #18
}
    2aac:	4620      	mov	r0, r4
    2aae:	b00b      	add	sp, #44	; 0x2c
    2ab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    2ab2:	4621      	mov	r1, r4
    2ab4:	aa08      	add	r2, sp, #32
    2ab6:	f242 0003 	movw	r0, #8195	; 0x2003
    2aba:	f7ff fdcf 	bl	265c <bt_hci_cmd_send_sync>
	if (err) {
    2abe:	4604      	mov	r4, r0
    2ac0:	2800      	cmp	r0, #0
    2ac2:	d1f3      	bne.n	2aac <hci_init+0x17c>
    2ac4:	9b08      	ldr	r3, [sp, #32]
    2ac6:	689e      	ldr	r6, [r3, #8]
    2ac8:	f009 fab2 	bl	c030 <_impl_k_current_get>
	BT_DBG("status %u", rp->status);
    2acc:	f816 3b01 	ldrb.w	r3, [r6], #1
    2ad0:	9300      	str	r3, [sp, #0]
    2ad2:	4a5f      	ldr	r2, [pc, #380]	; (2c50 <hci_init+0x320>)
    2ad4:	4954      	ldr	r1, [pc, #336]	; (2c28 <hci_init+0x2f8>)
    2ad6:	4603      	mov	r3, r0
    2ad8:	2007      	movs	r0, #7
    2ada:	f7ff fb89 	bl	21f0 <bt_log>
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    2ade:	4631      	mov	r1, r6
    2ae0:	2208      	movs	r2, #8
    2ae2:	f105 0078 	add.w	r0, r5, #120	; 0x78
    2ae6:	f7fd fd98 	bl	61a <memcpy>
	net_buf_unref(rsp);
    2aea:	9808      	ldr	r0, [sp, #32]
    2aec:	f008 fe7e 	bl	b7ec <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    2af0:	7eab      	ldrb	r3, [r5, #26]
    2af2:	0699      	lsls	r1, r3, #26
    2af4:	d57a      	bpl.n	2bec <hci_init+0x2bc>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    2af6:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
    2afa:	071a      	lsls	r2, r3, #28
    2afc:	f100 80b8 	bmi.w	2c70 <hci_init+0x340>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    2b00:	2108      	movs	r1, #8
    2b02:	f242 0001 	movw	r0, #8193	; 0x2001
    2b06:	f7ff fd5f 	bl	25c8 <bt_hci_cmd_create>
	if (!buf) {
    2b0a:	4604      	mov	r4, r0
    2b0c:	2800      	cmp	r0, #0
    2b0e:	d074      	beq.n	2bfa <hci_init+0x2ca>
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    2b10:	2108      	movs	r1, #8
    2b12:	4408      	add	r0, r1
    2b14:	f008 fe9c 	bl	b850 <net_buf_simple_add>
	if ((bt_dev.supported_commands[34] & 0x02) &&
    2b18:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    2b1c:	f003 0306 	and.w	r3, r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    2b20:	2b06      	cmp	r3, #6
    2b22:	bf14      	ite	ne
    2b24:	2302      	movne	r3, #2
    2b26:	f44f 73c1 	moveq.w	r3, #386	; 0x182
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    2b2a:	2200      	movs	r2, #0
    2b2c:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    2b2e:	0a1b      	lsrs	r3, r3, #8
    2b30:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
    2b32:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    2b34:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    2b36:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    2b38:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    2b3a:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    2b3c:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    2b3e:	4621      	mov	r1, r4
    2b40:	f242 0001 	movw	r0, #8193	; 0x2001
    2b44:	f7ff fd8a 	bl	265c <bt_hci_cmd_send_sync>
	if (err) {
    2b48:	4604      	mov	r4, r0
    2b4a:	2800      	cmp	r0, #0
    2b4c:	d1ae      	bne.n	2aac <hci_init+0x17c>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    2b4e:	2108      	movs	r1, #8
    2b50:	f640 4001 	movw	r0, #3073	; 0xc01
    2b54:	f7ff fd38 	bl	25c8 <bt_hci_cmd_create>
	if (!buf) {
    2b58:	4606      	mov	r6, r0
    2b5a:	2800      	cmp	r0, #0
    2b5c:	d04d      	beq.n	2bfa <hci_init+0x2ca>
	ev = net_buf_add(buf, sizeof(*ev));
    2b5e:	2108      	movs	r1, #8
    2b60:	4408      	add	r0, r1
    2b62:	f008 fe75 	bl	b850 <net_buf_simple_add>
    2b66:	2380      	movs	r3, #128	; 0x80
    2b68:	7043      	strb	r3, [r0, #1]
    2b6a:	2302      	movs	r3, #2
    2b6c:	70c3      	strb	r3, [r0, #3]
    2b6e:	2320      	movs	r3, #32
	dst[0] = val;
    2b70:	7004      	strb	r4, [r0, #0]
    2b72:	7084      	strb	r4, [r0, #2]
    2b74:	7104      	strb	r4, [r0, #4]
	dst[1] = val >> 8;
    2b76:	7144      	strb	r4, [r0, #5]
	dst[0] = val;
    2b78:	7184      	strb	r4, [r0, #6]
	dst[1] = val >> 8;
    2b7a:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    2b7c:	4622      	mov	r2, r4
    2b7e:	4631      	mov	r1, r6
    2b80:	f640 4001 	movw	r0, #3073	; 0xc01
    2b84:	f7ff fd6a 	bl	265c <bt_hci_cmd_send_sync>
	if (err) {
    2b88:	4604      	mov	r4, r0
    2b8a:	2800      	cmp	r0, #0
    2b8c:	d18e      	bne.n	2aac <hci_init+0x17c>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    2b8e:	4601      	mov	r1, r0
    2b90:	aa08      	add	r2, sp, #32
    2b92:	f64f 4001 	movw	r0, #64513	; 0xfc01
    2b96:	f7ff fd61 	bl	265c <bt_hci_cmd_send_sync>
	if (err) {
    2b9a:	2800      	cmp	r0, #0
    2b9c:	f000 808a 	beq.w	2cb4 <hci_init+0x384>
		BT_WARN("Vendor HCI extensions not available");
    2ba0:	4a2c      	ldr	r2, [pc, #176]	; (2c54 <hci_init+0x324>)
    2ba2:	492d      	ldr	r1, [pc, #180]	; (2c58 <hci_init+0x328>)
		BT_WARN("Failed to read supported vendor commands");
    2ba4:	2004      	movs	r0, #4
    2ba6:	f7ff fb23 	bl	21f0 <bt_log>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    2baa:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    2bac:	2207      	movs	r2, #7
    2bae:	a906      	add	r1, sp, #24
    2bb0:	4820      	ldr	r0, [pc, #128]	; (2c34 <hci_init+0x304>)
    2bb2:	9306      	str	r3, [sp, #24]
    2bb4:	f8cd 301b 	str.w	r3, [sp, #27]
    2bb8:	f7fd fd1a 	bl	5f0 <memcmp>
    2bbc:	2800      	cmp	r0, #0
    2bbe:	f040 80d9 	bne.w	2d74 <hci_init+0x444>
    2bc2:	f009 fa35 	bl	c030 <_impl_k_current_get>
	if (bt_storage) {
    2bc6:	4f25      	ldr	r7, [pc, #148]	; (2c5c <hci_init+0x32c>)
		BT_DBG("No public address. Trying to set static random.");
    2bc8:	4a25      	ldr	r2, [pc, #148]	; (2c60 <hci_init+0x330>)
    2bca:	4926      	ldr	r1, [pc, #152]	; (2c64 <hci_init+0x334>)
    2bcc:	4603      	mov	r3, r0
    2bce:	2007      	movs	r0, #7
    2bd0:	f7ff fb0e 	bl	21f0 <bt_log>
	if (bt_storage) {
    2bd4:	683b      	ldr	r3, [r7, #0]
    2bd6:	2b00      	cmp	r3, #0
    2bd8:	f040 8100 	bne.w	2ddc <hci_init+0x4ac>
	if (bt_dev.vs_commands[1] & BIT(0)) {
    2bdc:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
    2be0:	07db      	lsls	r3, r3, #31
    2be2:	f100 811a 	bmi.w	2e1a <hci_init+0x4ea>
		BT_WARN("Read Static Addresses command not available");
    2be6:	4a20      	ldr	r2, [pc, #128]	; (2c68 <hci_init+0x338>)
    2be8:	4920      	ldr	r1, [pc, #128]	; (2c6c <hci_init+0x33c>)
    2bea:	e11f      	b.n	2e2c <hci_init+0x4fc>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    2bec:	2102      	movs	r1, #2
    2bee:	f640 406d 	movw	r0, #3181	; 0xc6d
    2bf2:	f7ff fce9 	bl	25c8 <bt_hci_cmd_create>
		if (!buf) {
    2bf6:	4606      	mov	r6, r0
    2bf8:	b910      	cbnz	r0, 2c00 <hci_init+0x2d0>
		return -ENOBUFS;
    2bfa:	f06f 0436 	mvn.w	r4, #54	; 0x36
    2bfe:	e755      	b.n	2aac <hci_init+0x17c>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
    2c00:	2102      	movs	r1, #2
    2c02:	3008      	adds	r0, #8
    2c04:	f008 fe24 	bl	b850 <net_buf_simple_add>
		cp_le->le = 0x01;
    2c08:	2301      	movs	r3, #1
		cp_le->simul = 0x00;
    2c0a:	7044      	strb	r4, [r0, #1]
		cp_le->le = 0x01;
    2c0c:	7003      	strb	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    2c0e:	4622      	mov	r2, r4
    2c10:	4631      	mov	r1, r6
    2c12:	f640 406d 	movw	r0, #3181	; 0xc6d
    2c16:	f7ff fd21 	bl	265c <bt_hci_cmd_send_sync>
		if (err) {
    2c1a:	4604      	mov	r4, r0
    2c1c:	2800      	cmp	r0, #0
    2c1e:	f43f af6a 	beq.w	2af6 <hci_init+0x1c6>
    2c22:	e743      	b.n	2aac <hci_init+0x17c>
    2c24:	0000d2be 	.word	0x0000d2be
    2c28:	0000d877 	.word	0x0000d877
    2c2c:	200007e4 	.word	0x200007e4
    2c30:	20004eb0 	.word	0x20004eb0
    2c34:	20004e40 	.word	0x20004e40
    2c38:	0000d3c8 	.word	0x0000d3c8
    2c3c:	0000d360 	.word	0x0000d360
    2c40:	0000d378 	.word	0x0000d378
    2c44:	0000d3a7 	.word	0x0000d3a7
    2c48:	0000d402 	.word	0x0000d402
    2c4c:	0000d88a 	.word	0x0000d88a
    2c50:	0000d38d 	.word	0x0000d38d
    2c54:	0000d41a 	.word	0x0000d41a
    2c58:	0000d8b2 	.word	0x0000d8b2
    2c5c:	20002ba0 	.word	0x20002ba0
    2c60:	0000d426 	.word	0x0000d426
    2c64:	0000d992 	.word	0x0000d992
    2c68:	0000d40a 	.word	0x0000d40a
    2c6c:	0000da1c 	.word	0x0000da1c
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    2c70:	aa08      	add	r2, sp, #32
    2c72:	2100      	movs	r1, #0
    2c74:	f242 001c 	movw	r0, #8220	; 0x201c
    2c78:	f7ff fcf0 	bl	265c <bt_hci_cmd_send_sync>
		if (err) {
    2c7c:	4604      	mov	r4, r0
    2c7e:	2800      	cmp	r0, #0
    2c80:	f47f af14 	bne.w	2aac <hci_init+0x17c>
    2c84:	9b08      	ldr	r3, [sp, #32]
    2c86:	689c      	ldr	r4, [r3, #8]
    2c88:	f009 f9d2 	bl	c030 <_impl_k_current_get>
	BT_DBG("status %u", rp->status);
    2c8c:	7823      	ldrb	r3, [r4, #0]
    2c8e:	9300      	str	r3, [sp, #0]
    2c90:	4a8a      	ldr	r2, [pc, #552]	; (2ebc <hci_init+0x58c>)
    2c92:	498b      	ldr	r1, [pc, #556]	; (2ec0 <hci_init+0x590>)
    2c94:	4603      	mov	r3, r0
    2c96:	2007      	movs	r0, #7
    2c98:	f7ff faaa 	bl	21f0 <bt_log>
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    2c9c:	4623      	mov	r3, r4
		net_buf_unref(rsp);
    2c9e:	9808      	ldr	r0, [sp, #32]
    2ca0:	f853 2f01 	ldr.w	r2, [r3, #1]!
    2ca4:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    2ca6:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    2caa:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
		net_buf_unref(rsp);
    2cae:	f008 fd9d 	bl	b7ec <net_buf_unref>
    2cb2:	e725      	b.n	2b00 <hci_init+0x1d0>
	rp.info = (void *)rsp->data;
    2cb4:	9b08      	ldr	r3, [sp, #32]
	BT_INFO("HW Platform: %s (0x%04x)",
    2cb6:	4983      	ldr	r1, [pc, #524]	; (2ec4 <hci_init+0x594>)
	rp.info = (void *)rsp->data;
    2cb8:	689e      	ldr	r6, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
    2cba:	f8b6 3001 	ldrh.w	r3, [r6, #1]
	if (platform < ARRAY_SIZE(plat_str)) {
    2cbe:	2b03      	cmp	r3, #3
		return plat_str[platform];
    2cc0:	bf96      	itet	ls
    2cc2:	4a81      	ldrls	r2, [pc, #516]	; (2ec8 <hci_init+0x598>)
	return "unknown";
    2cc4:	4a81      	ldrhi	r2, [pc, #516]	; (2ecc <hci_init+0x59c>)
		return plat_str[platform];
    2cc6:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
    2cca:	2006      	movs	r0, #6
    2ccc:	f7ff fa90 	bl	21f0 <bt_log>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    2cd0:	f8b6 2001 	ldrh.w	r2, [r6, #1]
	BT_INFO("HW Variant: %s (0x%04x)",
    2cd4:	f8b6 3003 	ldrh.w	r3, [r6, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    2cd8:	2a02      	cmp	r2, #2
    2cda:	d12a      	bne.n	2d32 <hci_init+0x402>
	if (variant < ARRAY_SIZE(nordic_str)) {
    2cdc:	2b02      	cmp	r3, #2
    2cde:	d828      	bhi.n	2d32 <hci_init+0x402>
		return nordic_str[variant];
    2ce0:	4a7b      	ldr	r2, [pc, #492]	; (2ed0 <hci_init+0x5a0>)
    2ce2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
    2ce6:	497b      	ldr	r1, [pc, #492]	; (2ed4 <hci_init+0x5a4>)
    2ce8:	2006      	movs	r0, #6
    2cea:	f7ff fa81 	bl	21f0 <bt_log>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    2cee:	7973      	ldrb	r3, [r6, #5]
    2cf0:	f8d6 1009 	ldr.w	r1, [r6, #9]
    2cf4:	9102      	str	r1, [sp, #8]
	if (variant < ARRAY_SIZE(var_str)) {
    2cf6:	2b03      	cmp	r3, #3
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    2cf8:	f8b6 1007 	ldrh.w	r1, [r6, #7]
		return var_str[variant];
    2cfc:	bf98      	it	ls
    2cfe:	4a76      	ldrls	r2, [pc, #472]	; (2ed8 <hci_init+0x5a8>)
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    2d00:	9101      	str	r1, [sp, #4]
    2d02:	79b1      	ldrb	r1, [r6, #6]
		return var_str[variant];
    2d04:	bf94      	ite	ls
    2d06:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
	return "unknown";
    2d0a:	4a70      	ldrhi	r2, [pc, #448]	; (2ecc <hci_init+0x59c>)
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    2d0c:	9100      	str	r1, [sp, #0]
    2d0e:	2006      	movs	r0, #6
    2d10:	4972      	ldr	r1, [pc, #456]	; (2edc <hci_init+0x5ac>)
    2d12:	f7ff fa6d 	bl	21f0 <bt_log>
	net_buf_unref(rsp);
    2d16:	9808      	ldr	r0, [sp, #32]
    2d18:	f008 fd68 	bl	b7ec <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    2d1c:	aa08      	add	r2, sp, #32
    2d1e:	2100      	movs	r1, #0
    2d20:	f64f 4002 	movw	r0, #64514	; 0xfc02
    2d24:	f7ff fc9a 	bl	265c <bt_hci_cmd_send_sync>
	if (err) {
    2d28:	4606      	mov	r6, r0
    2d2a:	b120      	cbz	r0, 2d36 <hci_init+0x406>
		BT_WARN("Failed to read supported vendor features");
    2d2c:	4a6c      	ldr	r2, [pc, #432]	; (2ee0 <hci_init+0x5b0>)
    2d2e:	496d      	ldr	r1, [pc, #436]	; (2ee4 <hci_init+0x5b4>)
    2d30:	e738      	b.n	2ba4 <hci_init+0x274>
		return "unknown";
    2d32:	4a66      	ldr	r2, [pc, #408]	; (2ecc <hci_init+0x59c>)
    2d34:	e7d7      	b.n	2ce6 <hci_init+0x3b6>
	rp.cmds = (void *)rsp->data;
    2d36:	9b08      	ldr	r3, [sp, #32]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    2d38:	486b      	ldr	r0, [pc, #428]	; (2ee8 <hci_init+0x5b8>)
    2d3a:	6899      	ldr	r1, [r3, #8]
    2d3c:	2202      	movs	r2, #2
    2d3e:	3101      	adds	r1, #1
    2d40:	f7fd fc6b 	bl	61a <memcpy>
	net_buf_unref(rsp);
    2d44:	9808      	ldr	r0, [sp, #32]
    2d46:	f008 fd51 	bl	b7ec <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    2d4a:	aa08      	add	r2, sp, #32
    2d4c:	4631      	mov	r1, r6
    2d4e:	f64f 4003 	movw	r0, #64515	; 0xfc03
    2d52:	f7ff fc83 	bl	265c <bt_hci_cmd_send_sync>
	if (err) {
    2d56:	b110      	cbz	r0, 2d5e <hci_init+0x42e>
		BT_WARN("Failed to read supported vendor commands");
    2d58:	4a61      	ldr	r2, [pc, #388]	; (2ee0 <hci_init+0x5b0>)
    2d5a:	4964      	ldr	r1, [pc, #400]	; (2eec <hci_init+0x5bc>)
    2d5c:	e722      	b.n	2ba4 <hci_init+0x274>
	rp.feat = (void *)rsp->data;
    2d5e:	9b08      	ldr	r3, [sp, #32]
	memcpy(bt_dev.vs_features, rp.feat->features, BT_DEV_VS_FEAT_MAX);
    2d60:	4863      	ldr	r0, [pc, #396]	; (2ef0 <hci_init+0x5c0>)
    2d62:	6899      	ldr	r1, [r3, #8]
    2d64:	2201      	movs	r2, #1
    2d66:	4411      	add	r1, r2
    2d68:	f7fd fc57 	bl	61a <memcpy>
	net_buf_unref(rsp);
    2d6c:	9808      	ldr	r0, [sp, #32]
    2d6e:	f008 fd3d 	bl	b7ec <net_buf_unref>
    2d72:	e71a      	b.n	2baa <hci_init+0x27a>
	    !bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_NONE)) {
    2d74:	4b5f      	ldr	r3, [pc, #380]	; (2ef4 <hci_init+0x5c4>)
    2d76:	6818      	ldr	r0, [r3, #0]
    2d78:	889a      	ldrh	r2, [r3, #4]
    2d7a:	9008      	str	r0, [sp, #32]
    2d7c:	799b      	ldrb	r3, [r3, #6]
    2d7e:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
    2d82:	a908      	add	r1, sp, #32
    2d84:	2207      	movs	r2, #7
    2d86:	485c      	ldr	r0, [pc, #368]	; (2ef8 <hci_init+0x5c8>)
    2d88:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    2d8c:	f7fd fc30 	bl	5f0 <memcmp>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    2d90:	2800      	cmp	r0, #0
    2d92:	f43f af16 	beq.w	2bc2 <hci_init+0x292>
	BT_INFO("Identity: %s", bt_addr_le_str(&bt_dev.id_addr));
    2d96:	4858      	ldr	r0, [pc, #352]	; (2ef8 <hci_init+0x5c8>)
    2d98:	f7ff f94e 	bl	2038 <bt_addr_le_str>
    2d9c:	4957      	ldr	r1, [pc, #348]	; (2efc <hci_init+0x5cc>)
    2d9e:	4602      	mov	r2, r0
    2da0:	2006      	movs	r0, #6
    2da2:	f7ff fa25 	bl	21f0 <bt_log>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    2da6:	7bae      	ldrb	r6, [r5, #14]
    2da8:	4630      	mov	r0, r6
    2daa:	f7ff fb41 	bl	2430 <ver_str>
    2dae:	8aab      	ldrh	r3, [r5, #20]
    2db0:	9301      	str	r3, [sp, #4]
    2db2:	8a2b      	ldrh	r3, [r5, #16]
    2db4:	9300      	str	r3, [sp, #0]
    2db6:	4602      	mov	r2, r0
    2db8:	4633      	mov	r3, r6
    2dba:	4951      	ldr	r1, [pc, #324]	; (2f00 <hci_init+0x5d0>)
    2dbc:	2006      	movs	r0, #6
    2dbe:	f7ff fa17 	bl	21f0 <bt_log>
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
    2dc2:	7bee      	ldrb	r6, [r5, #15]
    2dc4:	4630      	mov	r0, r6
    2dc6:	f7ff fb33 	bl	2430 <ver_str>
    2dca:	8a6b      	ldrh	r3, [r5, #18]
    2dcc:	9300      	str	r3, [sp, #0]
    2dce:	4602      	mov	r2, r0
    2dd0:	4633      	mov	r3, r6
    2dd2:	494c      	ldr	r1, [pc, #304]	; (2f04 <hci_init+0x5d4>)
    2dd4:	2006      	movs	r0, #6
    2dd6:	f7ff fa0b 	bl	21f0 <bt_log>
    2dda:	e667      	b.n	2aac <hci_init+0x17c>
		ret = bt_storage->read(NULL, BT_STORAGE_ID_ADDR,
    2ddc:	2100      	movs	r1, #0
    2dde:	681e      	ldr	r6, [r3, #0]
    2de0:	4a45      	ldr	r2, [pc, #276]	; (2ef8 <hci_init+0x5c8>)
    2de2:	2307      	movs	r3, #7
    2de4:	4608      	mov	r0, r1
    2de6:	47b0      	blx	r6
		if (ret == sizeof(bt_dev.id_addr)) {
    2de8:	2807      	cmp	r0, #7
    2dea:	f47f aef7 	bne.w	2bdc <hci_init+0x2ac>
	if (bt_dev.id_addr.type != BT_ADDR_LE_RANDOM ||
    2dee:	782b      	ldrb	r3, [r5, #0]
    2df0:	2b01      	cmp	r3, #1
    2df2:	d104      	bne.n	2dfe <hci_init+0x4ce>
    2df4:	79ab      	ldrb	r3, [r5, #6]
    2df6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    2dfa:	2bc0      	cmp	r3, #192	; 0xc0
    2dfc:	d052      	beq.n	2ea4 <hci_init+0x574>
		BT_ERR("Only static random address supported as identity");
    2dfe:	4a42      	ldr	r2, [pc, #264]	; (2f08 <hci_init+0x5d8>)
    2e00:	4942      	ldr	r1, [pc, #264]	; (2f0c <hci_init+0x5dc>)
    2e02:	2003      	movs	r0, #3
    2e04:	f7ff f9f4 	bl	21f0 <bt_log>
		return -EINVAL;
    2e08:	f06f 0615 	mvn.w	r6, #21
			BT_ERR("Unable to set identity address");
    2e0c:	4a40      	ldr	r2, [pc, #256]	; (2f10 <hci_init+0x5e0>)
    2e0e:	4941      	ldr	r1, [pc, #260]	; (2f14 <hci_init+0x5e4>)
    2e10:	2003      	movs	r0, #3
    2e12:	f7ff f9ed 	bl	21f0 <bt_log>
			return err;
    2e16:	4634      	mov	r4, r6
    2e18:	e648      	b.n	2aac <hci_init+0x17c>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS,
    2e1a:	aa05      	add	r2, sp, #20
    2e1c:	2100      	movs	r1, #0
    2e1e:	f64f 4009 	movw	r0, #64521	; 0xfc09
    2e22:	f7ff fc1b 	bl	265c <bt_hci_cmd_send_sync>
		if (err) {
    2e26:	b128      	cbz	r0, 2e34 <hci_init+0x504>
			BT_WARN("Failed to read static addresses");
    2e28:	4a37      	ldr	r2, [pc, #220]	; (2f08 <hci_init+0x5d8>)
    2e2a:	493b      	ldr	r1, [pc, #236]	; (2f18 <hci_init+0x5e8>)
		BT_WARN("Read Static Addresses command not available");
    2e2c:	2004      	movs	r0, #4
    2e2e:	f7ff f9df 	bl	21f0 <bt_log>
    2e32:	e016      	b.n	2e62 <hci_init+0x532>
		rp = (void *)rsp->data;
    2e34:	9b05      	ldr	r3, [sp, #20]
    2e36:	6899      	ldr	r1, [r3, #8]
		if (rp->num_addrs) {
    2e38:	784b      	ldrb	r3, [r1, #1]
    2e3a:	b153      	cbz	r3, 2e52 <hci_init+0x522>
			bt_dev.id_addr.type = BT_ADDR_LE_RANDOM;
    2e3c:	2301      	movs	r3, #1
	memcpy(dst, src, sizeof(*dst));
    2e3e:	2206      	movs	r2, #6
    2e40:	3102      	adds	r1, #2
    2e42:	4836      	ldr	r0, [pc, #216]	; (2f1c <hci_init+0x5ec>)
    2e44:	702b      	strb	r3, [r5, #0]
    2e46:	f7fd fbe8 	bl	61a <memcpy>
			net_buf_unref(rsp);
    2e4a:	9805      	ldr	r0, [sp, #20]
    2e4c:	f008 fcce 	bl	b7ec <net_buf_unref>
    2e50:	e7cd      	b.n	2dee <hci_init+0x4be>
		BT_WARN("No static addresses stored in controller");
    2e52:	2004      	movs	r0, #4
    2e54:	4a2c      	ldr	r2, [pc, #176]	; (2f08 <hci_init+0x5d8>)
    2e56:	4932      	ldr	r1, [pc, #200]	; (2f20 <hci_init+0x5f0>)
    2e58:	f7ff f9ca 	bl	21f0 <bt_log>
		net_buf_unref(rsp);
    2e5c:	9805      	ldr	r0, [sp, #20]
    2e5e:	f008 fcc5 	bl	b7ec <net_buf_unref>
    2e62:	f009 f8e5 	bl	c030 <_impl_k_current_get>
	BT_DBG("Generating new static random address");
    2e66:	4a28      	ldr	r2, [pc, #160]	; (2f08 <hci_init+0x5d8>)
    2e68:	492e      	ldr	r1, [pc, #184]	; (2f24 <hci_init+0x5f4>)
    2e6a:	4603      	mov	r3, r0
    2e6c:	2007      	movs	r0, #7
    2e6e:	f7ff f9bf 	bl	21f0 <bt_log>
	err = bt_addr_le_create_static(&bt_dev.id_addr);
    2e72:	4821      	ldr	r0, [pc, #132]	; (2ef8 <hci_init+0x5c8>)
    2e74:	f7ff fd4e 	bl	2914 <bt_addr_le_create_static>
	if (err) {
    2e78:	4606      	mov	r6, r0
    2e7a:	2800      	cmp	r0, #0
    2e7c:	d1c6      	bne.n	2e0c <hci_init+0x4dc>
	if (bt_storage) {
    2e7e:	683b      	ldr	r3, [r7, #0]
    2e80:	b163      	cbz	r3, 2e9c <hci_init+0x56c>
		ret = bt_storage->write(NULL, BT_STORAGE_ID_ADDR,
    2e82:	685f      	ldr	r7, [r3, #4]
    2e84:	4a1c      	ldr	r2, [pc, #112]	; (2ef8 <hci_init+0x5c8>)
    2e86:	2307      	movs	r3, #7
    2e88:	4601      	mov	r1, r0
    2e8a:	47b8      	blx	r7
		if (ret != sizeof(bt_dev.id_addr)) {
    2e8c:	2807      	cmp	r0, #7
    2e8e:	d0ae      	beq.n	2dee <hci_init+0x4be>
			BT_ERR("Unable to store static address");
    2e90:	4a1d      	ldr	r2, [pc, #116]	; (2f08 <hci_init+0x5d8>)
    2e92:	4925      	ldr	r1, [pc, #148]	; (2f28 <hci_init+0x5f8>)
    2e94:	2003      	movs	r0, #3
		BT_WARN("Using temporary static random address");
    2e96:	f7ff f9ab 	bl	21f0 <bt_log>
    2e9a:	e7a8      	b.n	2dee <hci_init+0x4be>
    2e9c:	4a1a      	ldr	r2, [pc, #104]	; (2f08 <hci_init+0x5d8>)
    2e9e:	4923      	ldr	r1, [pc, #140]	; (2f2c <hci_init+0x5fc>)
    2ea0:	2004      	movs	r0, #4
    2ea2:	e7f8      	b.n	2e96 <hci_init+0x566>
	err = set_random_address(&bt_dev.id_addr.a);
    2ea4:	481d      	ldr	r0, [pc, #116]	; (2f1c <hci_init+0x5ec>)
    2ea6:	f7ff fc3f 	bl	2728 <set_random_address>
	if (err) {
    2eaa:	4606      	mov	r6, r0
    2eac:	2800      	cmp	r0, #0
    2eae:	d1ad      	bne.n	2e0c <hci_init+0x4dc>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2eb0:	2104      	movs	r1, #4
    2eb2:	481f      	ldr	r0, [pc, #124]	; (2f30 <hci_init+0x600>)
    2eb4:	f7ff faf2 	bl	249c <atomic_or>
    2eb8:	e76d      	b.n	2d96 <hci_init+0x466>
    2eba:	bf00      	nop
    2ebc:	0000d3e5 	.word	0x0000d3e5
    2ec0:	0000d877 	.word	0x0000d877
    2ec4:	0000d8da 	.word	0x0000d8da
    2ec8:	0000dd08 	.word	0x0000dd08
    2ecc:	0000de04 	.word	0x0000de04
    2ed0:	0000dcfc 	.word	0x0000dcfc
    2ed4:	0000d8f3 	.word	0x0000d8f3
    2ed8:	0000ddf4 	.word	0x0000ddf4
    2edc:	0000d90b 	.word	0x0000d90b
    2ee0:	0000d41a 	.word	0x0000d41a
    2ee4:	0000d938 	.word	0x0000d938
    2ee8:	20004e9f 	.word	0x20004e9f
    2eec:	0000d965 	.word	0x0000d965
    2ef0:	20004e9e 	.word	0x20004e9e
    2ef4:	0000cbe8 	.word	0x0000cbe8
    2ef8:	20004e40 	.word	0x20004e40
    2efc:	0000dafc 	.word	0x0000dafc
    2f00:	0000db09 	.word	0x0000db09
    2f04:	0000db47 	.word	0x0000db47
    2f08:	0000d40a 	.word	0x0000d40a
    2f0c:	0000dac7 	.word	0x0000dac7
    2f10:	0000d426 	.word	0x0000d426
    2f14:	0000db6e 	.word	0x0000db6e
    2f18:	0000d9cb 	.word	0x0000d9cb
    2f1c:	20004e41 	.word	0x20004e41
    2f20:	0000d9ef 	.word	0x0000d9ef
    2f24:	0000da4c 	.word	0x0000da4c
    2f28:	0000da7a 	.word	0x0000da7a
    2f2c:	0000da9d 	.word	0x0000da9d
    2f30:	20004eb0 	.word	0x20004eb0

00002f34 <init_work>:
{
    2f34:	b510      	push	{r4, lr}
	err = hci_init();
    2f36:	f7ff fcfb 	bl	2930 <hci_init>
	if (err) {
    2f3a:	b908      	cbnz	r0, 2f40 <init_work+0xc>
    2f3c:	f7ff fcd8 	bl	28f0 <bt_init.part.13>
	if (ready_cb) {
    2f40:	4b03      	ldr	r3, [pc, #12]	; (2f50 <init_work+0x1c>)
    2f42:	681b      	ldr	r3, [r3, #0]
    2f44:	b113      	cbz	r3, 2f4c <init_work+0x18>
}
    2f46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    2f4a:	4718      	bx	r3
    2f4c:	bd10      	pop	{r4, pc}
    2f4e:	bf00      	nop
    2f50:	200007e0 	.word	0x200007e0

00002f54 <bt_send>:
{
    2f54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    2f56:	4604      	mov	r4, r0
    2f58:	f009 f86a 	bl	c030 <_impl_k_current_get>
	BT_DBG("buf %p len %u type %u", buf, buf->len, bt_buf_get_type(buf));
    2f5c:	7d23      	ldrb	r3, [r4, #20]
    2f5e:	9302      	str	r3, [sp, #8]
    2f60:	89a3      	ldrh	r3, [r4, #12]
    2f62:	4a0d      	ldr	r2, [pc, #52]	; (2f98 <bt_send+0x44>)
    2f64:	9301      	str	r3, [sp, #4]
    2f66:	9400      	str	r4, [sp, #0]
    2f68:	4603      	mov	r3, r0
    2f6a:	490c      	ldr	r1, [pc, #48]	; (2f9c <bt_send+0x48>)
    2f6c:	2007      	movs	r0, #7
    2f6e:	f7ff f93f 	bl	21f0 <bt_log>
	 * pointer to an enum causes issues on qemu_x86 because the true
	 * size is 8-bit, but the enum is 32-bit on qemu_x86. So we put in
	 * a temporary cast to 8-bit to ensure only 8 bits are read from
	 * the pointer.
	 */
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    2f72:	7d23      	ldrb	r3, [r4, #20]
	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);
    2f74:	68a1      	ldr	r1, [r4, #8]
    2f76:	2b03      	cmp	r3, #3
    2f78:	bf96      	itet	ls
    2f7a:	4a09      	ldrls	r2, [pc, #36]	; (2fa0 <bt_send+0x4c>)
    2f7c:	20ff      	movhi	r0, #255	; 0xff
    2f7e:	5cd0      	ldrbls	r0, [r2, r3]
    2f80:	89a2      	ldrh	r2, [r4, #12]
    2f82:	f7ff f9a3 	bl	22cc <bt_monitor_send>
	return bt_dev.drv->send(buf);
    2f86:	4b07      	ldr	r3, [pc, #28]	; (2fa4 <bt_send+0x50>)
    2f88:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    2f8c:	68db      	ldr	r3, [r3, #12]
    2f8e:	4620      	mov	r0, r4
}
    2f90:	b004      	add	sp, #16
    2f92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_dev.drv->send(buf);
    2f96:	4718      	bx	r3
    2f98:	0000d42f 	.word	0x0000d42f
    2f9c:	0000d7bc 	.word	0x0000d7bc
    2fa0:	0000d25d 	.word	0x0000d25d
    2fa4:	20004e40 	.word	0x20004e40

00002fa8 <hci_tx_thread>:
{
    2fa8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    2fac:	f009 f840 	bl	c030 <_impl_k_current_get>
	BT_DBG("Started");
    2fb0:	4a5b      	ldr	r2, [pc, #364]	; (3120 <hci_tx_thread+0x178>)
    2fb2:	495c      	ldr	r1, [pc, #368]	; (3124 <hci_tx_thread+0x17c>)
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    2fb4:	4c5c      	ldr	r4, [pc, #368]	; (3128 <hci_tx_thread+0x180>)
		events[0].state = K_POLL_STATE_NOT_READY;
    2fb6:	4e5d      	ldr	r6, [pc, #372]	; (312c <hci_tx_thread+0x184>)
	BT_DBG("Started");
    2fb8:	4603      	mov	r3, r0
    2fba:	2007      	movs	r0, #7
    2fbc:	f7ff f918 	bl	21f0 <bt_log>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    2fc0:	f104 08b4 	add.w	r8, r4, #180	; 0xb4
		events[0].state = K_POLL_STATE_NOT_READY;
    2fc4:	7b73      	ldrb	r3, [r6, #13]
    2fc6:	f36f 1307 	bfc	r3, #4, #4
    2fca:	7373      	strb	r3, [r6, #13]
    2fcc:	f009 f830 	bl	c030 <_impl_k_current_get>
		BT_DBG("Calling k_poll with %d events", ev_count);
    2fd0:	2501      	movs	r5, #1
    2fd2:	4603      	mov	r3, r0
    2fd4:	4a52      	ldr	r2, [pc, #328]	; (3120 <hci_tx_thread+0x178>)
    2fd6:	4956      	ldr	r1, [pc, #344]	; (3130 <hci_tx_thread+0x188>)
    2fd8:	9500      	str	r5, [sp, #0]
    2fda:	2007      	movs	r0, #7
    2fdc:	f7ff f908 	bl	21f0 <bt_log>
		err = k_poll(events, ev_count, K_FOREVER);
    2fe0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2fe4:	4629      	mov	r1, r5
    2fe6:	4851      	ldr	r0, [pc, #324]	; (312c <hci_tx_thread+0x184>)
    2fe8:	f009 fce0 	bl	c9ac <k_poll>
		BT_ASSERT(err == 0);
    2fec:	b150      	cbz	r0, 3004 <hci_tx_thread+0x5c>
    2fee:	4a4c      	ldr	r2, [pc, #304]	; (3120 <hci_tx_thread+0x178>)
    2ff0:	4950      	ldr	r1, [pc, #320]	; (3134 <hci_tx_thread+0x18c>)
	BT_ASSERT(buf);
    2ff2:	2003      	movs	r0, #3
    2ff4:	f7ff f8fc 	bl	21f0 <bt_log>
    2ff8:	4040      	eors	r0, r0
    2ffa:	f380 8811 	msr	BASEPRI, r0
    2ffe:	f04f 0004 	mov.w	r0, #4
    3002:	df02      	svc	2
    3004:	f009 f814 	bl	c030 <_impl_k_current_get>
	BT_DBG("count %d", count);
    3008:	4a4b      	ldr	r2, [pc, #300]	; (3138 <hci_tx_thread+0x190>)
    300a:	494c      	ldr	r1, [pc, #304]	; (313c <hci_tx_thread+0x194>)
    300c:	9500      	str	r5, [sp, #0]
    300e:	4603      	mov	r3, r0
    3010:	2007      	movs	r0, #7
    3012:	f7ff f8ed 	bl	21f0 <bt_log>
    3016:	f009 f80b 	bl	c030 <_impl_k_current_get>
		BT_DBG("ev->state %u", ev->state);
    301a:	7b73      	ldrb	r3, [r6, #13]
    301c:	4a46      	ldr	r2, [pc, #280]	; (3138 <hci_tx_thread+0x190>)
    301e:	4948      	ldr	r1, [pc, #288]	; (3140 <hci_tx_thread+0x198>)
    3020:	091b      	lsrs	r3, r3, #4
    3022:	9300      	str	r3, [sp, #0]
    3024:	4603      	mov	r3, r0
    3026:	2007      	movs	r0, #7
    3028:	f7ff f8e2 	bl	21f0 <bt_log>
		switch (ev->state) {
    302c:	7b73      	ldrb	r3, [r6, #13]
    302e:	091b      	lsrs	r3, r3, #4
    3030:	2b01      	cmp	r3, #1
    3032:	d906      	bls.n	3042 <hci_tx_thread+0x9a>
    3034:	2b04      	cmp	r3, #4
    3036:	d007      	beq.n	3048 <hci_tx_thread+0xa0>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    3038:	4a3f      	ldr	r2, [pc, #252]	; (3138 <hci_tx_thread+0x190>)
    303a:	4942      	ldr	r1, [pc, #264]	; (3144 <hci_tx_thread+0x19c>)
    303c:	2004      	movs	r0, #4
    303e:	f7ff f8d7 	bl	21f0 <bt_log>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    3042:	f008 ffd7 	bl	bff4 <_impl_k_yield>
    3046:	e7bd      	b.n	2fc4 <hci_tx_thread+0x1c>
			if (ev->tag == BT_EVENT_CMD_TX) {
    3048:	7b37      	ldrb	r7, [r6, #12]
    304a:	2f00      	cmp	r7, #0
    304c:	d1f9      	bne.n	3042 <hci_tx_thread+0x9a>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    304e:	f008 ffef 	bl	c030 <_impl_k_current_get>
	BT_DBG("calling net_buf_get");
    3052:	4a3d      	ldr	r2, [pc, #244]	; (3148 <hci_tx_thread+0x1a0>)
    3054:	493d      	ldr	r1, [pc, #244]	; (314c <hci_tx_thread+0x1a4>)
    3056:	4603      	mov	r3, r0
    3058:	2007      	movs	r0, #7
    305a:	f7ff f8c9 	bl	21f0 <bt_log>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    305e:	4639      	mov	r1, r7
    3060:	4640      	mov	r0, r8
    3062:	f008 fb99 	bl	b798 <net_buf_get>
	BT_ASSERT(buf);
    3066:	4605      	mov	r5, r0
    3068:	2800      	cmp	r0, #0
    306a:	d056      	beq.n	311a <hci_tx_thread+0x172>
    306c:	f008 ffe0 	bl	c030 <_impl_k_current_get>
	BT_DBG("calling sem_take_wait");
    3070:	4a35      	ldr	r2, [pc, #212]	; (3148 <hci_tx_thread+0x1a0>)
    3072:	4937      	ldr	r1, [pc, #220]	; (3150 <hci_tx_thread+0x1a8>)
    3074:	4603      	mov	r3, r0
    3076:	2007      	movs	r0, #7
    3078:	f7ff f8ba 	bl	21f0 <bt_log>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    307c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3080:	4834      	ldr	r0, [pc, #208]	; (3154 <hci_tx_thread+0x1ac>)
    3082:	f009 f893 	bl	c1ac <_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    3086:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    308a:	2b00      	cmp	r3, #0
    308c:	d139      	bne.n	3102 <hci_tx_thread+0x15a>
	bt_dev.sent_cmd = net_buf_ref(buf);
    308e:	4628      	mov	r0, r5
    3090:	f008 fbda 	bl	b848 <net_buf_ref>
    3094:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    3098:	f008 ffca 	bl	c030 <_impl_k_current_get>
    309c:	4681      	mov	r9, r0
	BT_DBG("Sending command 0x%04x (buf %p) to driver",
    309e:	4628      	mov	r0, r5
    30a0:	f008 fae6 	bl	b670 <net_buf_id>
    30a4:	4f2c      	ldr	r7, [pc, #176]	; (3158 <hci_tx_thread+0x1b0>)
    30a6:	9501      	str	r5, [sp, #4]
    30a8:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
    30ac:	4a26      	ldr	r2, [pc, #152]	; (3148 <hci_tx_thread+0x1a0>)
    30ae:	8843      	ldrh	r3, [r0, #2]
    30b0:	9300      	str	r3, [sp, #0]
    30b2:	492a      	ldr	r1, [pc, #168]	; (315c <hci_tx_thread+0x1b4>)
    30b4:	464b      	mov	r3, r9
    30b6:	2007      	movs	r0, #7
    30b8:	f7ff f89a 	bl	21f0 <bt_log>
	err = bt_send(buf);
    30bc:	4628      	mov	r0, r5
    30be:	f7ff ff49 	bl	2f54 <bt_send>
	if (err) {
    30c2:	4603      	mov	r3, r0
    30c4:	2800      	cmp	r0, #0
    30c6:	d0bc      	beq.n	3042 <hci_tx_thread+0x9a>
		BT_ERR("Unable to send to driver (err %d)", err);
    30c8:	4a1f      	ldr	r2, [pc, #124]	; (3148 <hci_tx_thread+0x1a0>)
    30ca:	4925      	ldr	r1, [pc, #148]	; (3160 <hci_tx_thread+0x1b8>)
    30cc:	2003      	movs	r0, #3
    30ce:	f7ff f88f 	bl	21f0 <bt_log>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    30d2:	4820      	ldr	r0, [pc, #128]	; (3154 <hci_tx_thread+0x1ac>)
    30d4:	f009 f80a 	bl	c0ec <_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED,
    30d8:	4628      	mov	r0, r5
    30da:	f008 fac9 	bl	b670 <net_buf_id>
    30de:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
    30e2:	2200      	movs	r2, #0
    30e4:	211f      	movs	r1, #31
    30e6:	8840      	ldrh	r0, [r0, #2]
    30e8:	f7ff f9fa 	bl	24e0 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    30ec:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    30f0:	f008 fb7c 	bl	b7ec <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    30f4:	2300      	movs	r3, #0
		net_buf_unref(buf);
    30f6:	4628      	mov	r0, r5
		bt_dev.sent_cmd = NULL;
    30f8:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		net_buf_unref(buf);
    30fc:	f008 fb76 	bl	b7ec <net_buf_unref>
    3100:	e79f      	b.n	3042 <hci_tx_thread+0x9a>
		BT_ERR("Uncleared pending sent_cmd");
    3102:	4a11      	ldr	r2, [pc, #68]	; (3148 <hci_tx_thread+0x1a0>)
    3104:	4917      	ldr	r1, [pc, #92]	; (3164 <hci_tx_thread+0x1bc>)
    3106:	2003      	movs	r0, #3
    3108:	f7ff f872 	bl	21f0 <bt_log>
		net_buf_unref(bt_dev.sent_cmd);
    310c:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    3110:	f008 fb6c 	bl	b7ec <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    3114:	f8c4 70a0 	str.w	r7, [r4, #160]	; 0xa0
    3118:	e7b9      	b.n	308e <hci_tx_thread+0xe6>
	BT_ASSERT(buf);
    311a:	4a0b      	ldr	r2, [pc, #44]	; (3148 <hci_tx_thread+0x1a0>)
    311c:	4912      	ldr	r1, [pc, #72]	; (3168 <hci_tx_thread+0x1c0>)
    311e:	e768      	b.n	2ff2 <hci_tx_thread+0x4a>
    3120:	0000d352 	.word	0x0000d352
    3124:	0000db91 	.word	0x0000db91
    3128:	20004e40 	.word	0x20004e40
    312c:	20004f08 	.word	0x20004f08
    3130:	0000dba2 	.word	0x0000dba2
    3134:	0000dbc9 	.word	0x0000dbc9
    3138:	0000d343 	.word	0x0000d343
    313c:	0000dbe7 	.word	0x0000dbe7
    3140:	0000dbf9 	.word	0x0000dbf9
    3144:	0000dc0f 	.word	0x0000dc0f
    3148:	0000d33a 	.word	0x0000d33a
    314c:	0000dc34 	.word	0x0000dc34
    3150:	0000dc51 	.word	0x0000dc51
    3154:	20004ec8 	.word	0x20004ec8
    3158:	20000788 	.word	0x20000788
    315c:	0000dc70 	.word	0x0000dc70
    3160:	0000d529 	.word	0x0000d529
    3164:	0000dca3 	.word	0x0000dca3
    3168:	0000dcc2 	.word	0x0000dcc2

0000316c <bt_recv>:
{
    316c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3170:	7d03      	ldrb	r3, [r0, #20]
    3172:	2b03      	cmp	r3, #3
    3174:	4604      	mov	r4, r0
    3176:	bf98      	it	ls
    3178:	4ab5      	ldrls	r2, [pc, #724]	; (3450 <bt_recv+0x2e4>)
	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);
    317a:	68a1      	ldr	r1, [r4, #8]
    317c:	bf98      	it	ls
    317e:	5cd0      	ldrbls	r0, [r2, r3]
    3180:	89a2      	ldrh	r2, [r4, #12]
{
    3182:	b089      	sub	sp, #36	; 0x24
    3184:	bf88      	it	hi
    3186:	20ff      	movhi	r0, #255	; 0xff
	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);
    3188:	f7ff f8a0 	bl	22cc <bt_monitor_send>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    318c:	f008 ff50 	bl	c030 <_impl_k_current_get>
	BT_DBG("buf %p len %u", buf, buf->len);
    3190:	89a3      	ldrh	r3, [r4, #12]
    3192:	9301      	str	r3, [sp, #4]
    3194:	9400      	str	r4, [sp, #0]
    3196:	4603      	mov	r3, r0
    3198:	4aae      	ldr	r2, [pc, #696]	; (3454 <bt_recv+0x2e8>)
    319a:	49af      	ldr	r1, [pc, #700]	; (3458 <bt_recv+0x2ec>)
    319c:	2007      	movs	r0, #7
    319e:	f7ff f827 	bl	21f0 <bt_log>
    31a2:	7d26      	ldrb	r6, [r4, #20]
	switch (bt_buf_get_type(buf)) {
    31a4:	2e01      	cmp	r6, #1
    31a6:	f040 8146 	bne.w	3436 <bt_recv+0x2ca>
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    31aa:	68a7      	ldr	r7, [r4, #8]
    31ac:	f008 ff40 	bl	c030 <_impl_k_current_get>
	BT_DBG("event 0x%02x", hdr->evt);
    31b0:	783b      	ldrb	r3, [r7, #0]
    31b2:	9300      	str	r3, [sp, #0]
    31b4:	4aa9      	ldr	r2, [pc, #676]	; (345c <bt_recv+0x2f0>)
    31b6:	49aa      	ldr	r1, [pc, #680]	; (3460 <bt_recv+0x2f4>)
    31b8:	4603      	mov	r3, r0
    31ba:	2007      	movs	r0, #7
    31bc:	f7ff f818 	bl	21f0 <bt_log>
 * @return true if the event can be processed in the RX thread, false
 *         if it cannot.
 */
static inline bool bt_hci_evt_is_prio(u8_t evt)
{
	switch (evt) {
    31c0:	783b      	ldrb	r3, [r7, #0]
    31c2:	3b0e      	subs	r3, #14
    31c4:	2b01      	cmp	r3, #1
    31c6:	f200 816f 	bhi.w	34a8 <bt_recv+0x33c>
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    31ca:	4aa4      	ldr	r2, [pc, #656]	; (345c <bt_recv+0x2f0>)
    31cc:	49a5      	ldr	r1, [pc, #660]	; (3464 <bt_recv+0x2f8>)
    31ce:	2003      	movs	r0, #3
    31d0:	f7ff f80e 	bl	21f0 <bt_log>
    31d4:	4040      	eors	r0, r0
    31d6:	f380 8811 	msr	BASEPRI, r0
    31da:	f04f 0004 	mov.w	r0, #4
    31de:	df02      	svc	2
    31e0:	68a5      	ldr	r5, [r4, #8]
    31e2:	f008 ff25 	bl	c030 <_impl_k_current_get>
	BT_DBG("status: 0x%x", evt->status);
    31e6:	782b      	ldrb	r3, [r5, #0]
    31e8:	9300      	str	r3, [sp, #0]
    31ea:	4a9f      	ldr	r2, [pc, #636]	; (3468 <bt_recv+0x2fc>)
    31ec:	499f      	ldr	r1, [pc, #636]	; (346c <bt_recv+0x300>)
    31ee:	4603      	mov	r3, r0
    31f0:	2007      	movs	r0, #7
    31f2:	f7fe fffd 	bl	21f0 <bt_log>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    31f6:	f06f 0110 	mvn.w	r1, #16
    31fa:	489d      	ldr	r0, [pc, #628]	; (3470 <bt_recv+0x304>)
    31fc:	f7ff f95f 	bl	24be <atomic_and>
	if (!evt->status) {
    3200:	782b      	ldrb	r3, [r5, #0]
    3202:	b943      	cbnz	r3, 3216 <bt_recv+0xaa>
		memcpy(pub_key, evt->key, 64);
    3204:	1c69      	adds	r1, r5, #1
    3206:	2240      	movs	r2, #64	; 0x40
    3208:	489a      	ldr	r0, [pc, #616]	; (3474 <bt_recv+0x308>)
    320a:	f7fd fa06 	bl	61a <memcpy>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    320e:	2108      	movs	r1, #8
    3210:	4897      	ldr	r0, [pc, #604]	; (3470 <bt_recv+0x304>)
    3212:	f7ff f943 	bl	249c <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    3216:	4b98      	ldr	r3, [pc, #608]	; (3478 <bt_recv+0x30c>)
    3218:	681e      	ldr	r6, [r3, #0]
		cb->func(evt->status ? NULL : evt->key);
    321a:	1c6f      	adds	r7, r5, #1
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    321c:	b936      	cbnz	r6, 322c <bt_recv+0xc0>
	net_buf_unref(buf);
    321e:	4620      	mov	r0, r4
    3220:	f008 fae4 	bl	b7ec <net_buf_unref>
		return 0;
    3224:	2000      	movs	r0, #0
}
    3226:	b009      	add	sp, #36	; 0x24
    3228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		cb->func(evt->status ? NULL : evt->key);
    322c:	782a      	ldrb	r2, [r5, #0]
    322e:	6833      	ldr	r3, [r6, #0]
    3230:	2a00      	cmp	r2, #0
    3232:	bf0c      	ite	eq
    3234:	4638      	moveq	r0, r7
    3236:	2000      	movne	r0, #0
    3238:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    323a:	6876      	ldr	r6, [r6, #4]
    323c:	e7ee      	b.n	321c <bt_recv+0xb0>
    323e:	68a5      	ldr	r5, [r4, #8]
	if (dh_key_cb) {
    3240:	4e8e      	ldr	r6, [pc, #568]	; (347c <bt_recv+0x310>)
    3242:	f008 fef5 	bl	c030 <_impl_k_current_get>
	BT_DBG("status: 0x%x", evt->status);
    3246:	782b      	ldrb	r3, [r5, #0]
    3248:	9300      	str	r3, [sp, #0]
    324a:	4a8d      	ldr	r2, [pc, #564]	; (3480 <bt_recv+0x314>)
    324c:	4987      	ldr	r1, [pc, #540]	; (346c <bt_recv+0x300>)
    324e:	4603      	mov	r3, r0
    3250:	2007      	movs	r0, #7
    3252:	f7fe ffcd 	bl	21f0 <bt_log>
	if (dh_key_cb) {
    3256:	6832      	ldr	r2, [r6, #0]
    3258:	2a00      	cmp	r2, #0
    325a:	d0e0      	beq.n	321e <bt_recv+0xb2>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    325c:	782b      	ldrb	r3, [r5, #0]
    325e:	b923      	cbnz	r3, 326a <bt_recv+0xfe>
    3260:	1c68      	adds	r0, r5, #1
    3262:	4790      	blx	r2
		dh_key_cb = NULL;
    3264:	2300      	movs	r3, #0
    3266:	6033      	str	r3, [r6, #0]
    3268:	e7d9      	b.n	321e <bt_recv+0xb2>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    326a:	2000      	movs	r0, #0
    326c:	e7f9      	b.n	3262 <bt_recv+0xf6>
	u8_t num_reports = net_buf_pull_u8(buf);
    326e:	4628      	mov	r0, r5
    3270:	f008 fb0d 	bl	b88e <net_buf_simple_pull_u8>
    3274:	4680      	mov	r8, r0
    3276:	f008 fedb 	bl	c030 <_impl_k_current_get>
	BT_DBG("Adv number of reports %u",  num_reports);
    327a:	f8cd 8000 	str.w	r8, [sp]
    327e:	4603      	mov	r3, r0
    3280:	4a80      	ldr	r2, [pc, #512]	; (3484 <bt_recv+0x318>)
    3282:	4981      	ldr	r1, [pc, #516]	; (3488 <bt_recv+0x31c>)
		if (scan_dev_found_cb) {
    3284:	f8df a21c 	ldr.w	sl, [pc, #540]	; 34a4 <bt_recv+0x338>
	BT_DBG("Adv number of reports %u",  num_reports);
    3288:	2007      	movs	r0, #7
    328a:	f7fe ffb1 	bl	21f0 <bt_log>
	while (num_reports--) {
    328e:	f1b8 0f00 	cmp.w	r8, #0
    3292:	d0c4      	beq.n	321e <bt_recv+0xb2>
		info = (void *)buf->data;
    3294:	68a6      	ldr	r6, [r4, #8]
		net_buf_pull(buf, sizeof(*info));
    3296:	2109      	movs	r1, #9
    3298:	4628      	mov	r0, r5
    329a:	f008 faf0 	bl	b87e <net_buf_simple_pull>
		rssi = info->data[info->length];
    329e:	7a33      	ldrb	r3, [r6, #8]
    32a0:	4433      	add	r3, r6
		BT_DBG("%s event %u, len %u, rssi %d dBm",
    32a2:	1c77      	adds	r7, r6, #1
		rssi = info->data[info->length];
    32a4:	f993 b009 	ldrsb.w	fp, [r3, #9]
    32a8:	f008 fec2 	bl	c030 <_impl_k_current_get>
    32ac:	4681      	mov	r9, r0
		BT_DBG("%s event %u, len %u, rssi %d dBm",
    32ae:	4638      	mov	r0, r7
    32b0:	f7fe fec2 	bl	2038 <bt_addr_le_str>
    32b4:	f8cd b00c 	str.w	fp, [sp, #12]
    32b8:	7a33      	ldrb	r3, [r6, #8]
    32ba:	9302      	str	r3, [sp, #8]
    32bc:	7833      	ldrb	r3, [r6, #0]
    32be:	4a71      	ldr	r2, [pc, #452]	; (3484 <bt_recv+0x318>)
    32c0:	4972      	ldr	r1, [pc, #456]	; (348c <bt_recv+0x320>)
    32c2:	e88d 0009 	stmia.w	sp, {r0, r3}
    32c6:	464b      	mov	r3, r9
    32c8:	2007      	movs	r0, #7
    32ca:	f7fe ff91 	bl	21f0 <bt_log>
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    32ce:	7873      	ldrb	r3, [r6, #1]
    32d0:	3b02      	subs	r3, #2
    32d2:	2b01      	cmp	r3, #1
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    32d4:	f04f 0207 	mov.w	r2, #7
    32d8:	4639      	mov	r1, r7
    32da:	a806      	add	r0, sp, #24
    32dc:	d829      	bhi.n	3332 <bt_recv+0x1c6>
    32de:	f7fd f99c 	bl	61a <memcpy>
			id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    32e2:	f89d 3018 	ldrb.w	r3, [sp, #24]
    32e6:	3b02      	subs	r3, #2
    32e8:	f88d 3018 	strb.w	r3, [sp, #24]
		if (scan_dev_found_cb) {
    32ec:	f8da 3000 	ldr.w	r3, [sl]
    32f0:	b1ab      	cbz	r3, 331e <bt_recv+0x1b2>
 *  @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    32f2:	4628      	mov	r0, r5
    32f4:	f008 fad3 	bl	b89e <net_buf_simple_headroom>
	state->len = buf->len;
    32f8:	89a3      	ldrh	r3, [r4, #12]
    32fa:	9305      	str	r3, [sp, #20]
			buf->len = info->length;
    32fc:	7a33      	ldrb	r3, [r6, #8]
    32fe:	81a3      	strh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    3300:	4681      	mov	r9, r0
			scan_dev_found_cb(&id_addr, rssi, info->evt_type,
    3302:	462b      	mov	r3, r5
    3304:	7832      	ldrb	r2, [r6, #0]
    3306:	f8da 7000 	ldr.w	r7, [sl]
    330a:	4659      	mov	r1, fp
    330c:	a806      	add	r0, sp, #24
    330e:	47b8      	blx	r7
 *  @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
    3310:	6923      	ldr	r3, [r4, #16]
    3312:	fa13 f389 	uxtah	r3, r3, r9
    3316:	60a3      	str	r3, [r4, #8]
	buf->len = state->len;
    3318:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    331c:	81a3      	strh	r3, [r4, #12]
		net_buf_pull(buf, info->length + sizeof(rssi));
    331e:	7a31      	ldrb	r1, [r6, #8]
    3320:	4628      	mov	r0, r5
    3322:	3101      	adds	r1, #1
    3324:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    3328:	f008 faa9 	bl	b87e <net_buf_simple_pull>
    332c:	fa5f f888 	uxtb.w	r8, r8
    3330:	e7ad      	b.n	328e <bt_recv+0x122>
    3332:	f7fd f972 	bl	61a <memcpy>
    3336:	e7d9      	b.n	32ec <bt_recv+0x180>
	u8_t num_reports = net_buf_pull_u8(buf);
    3338:	4628      	mov	r0, r5
    333a:	f008 faa8 	bl	b88e <net_buf_simple_pull_u8>
    333e:	4680      	mov	r8, r0
    3340:	f008 fe76 	bl	c030 <_impl_k_current_get>
	BT_DBG("Adv number of reports %u",  num_reports);
    3344:	f8cd 8000 	str.w	r8, [sp]
    3348:	4603      	mov	r3, r0
    334a:	4a51      	ldr	r2, [pc, #324]	; (3490 <bt_recv+0x324>)
    334c:	494e      	ldr	r1, [pc, #312]	; (3488 <bt_recv+0x31c>)
		if (scan_dev_found_cb) {
    334e:	f8df a154 	ldr.w	sl, [pc, #340]	; 34a4 <bt_recv+0x338>
	BT_DBG("Adv number of reports %u",  num_reports);
    3352:	2007      	movs	r0, #7
    3354:	f7fe ff4c 	bl	21f0 <bt_log>
	while (num_reports--) {
    3358:	f1b8 0f00 	cmp.w	r8, #0
    335c:	f43f af5f 	beq.w	321e <bt_recv+0xb2>
		info = (void *)buf->data;
    3360:	68a6      	ldr	r6, [r4, #8]
		net_buf_pull(buf, sizeof(*info));
    3362:	2117      	movs	r1, #23
    3364:	4628      	mov	r0, r5
    3366:	f008 fa8a 	bl	b87e <net_buf_simple_pull>
		rssi = info->data[info->length];
    336a:	7db3      	ldrb	r3, [r6, #22]
    336c:	4433      	add	r3, r6
		BT_DBG("%s event %u, len %u, rssi %d dBm",
    336e:	1c77      	adds	r7, r6, #1
		rssi = info->data[info->length];
    3370:	f993 b017 	ldrsb.w	fp, [r3, #23]
    3374:	f008 fe5c 	bl	c030 <_impl_k_current_get>
    3378:	4681      	mov	r9, r0
		BT_DBG("%s event %u, len %u, rssi %d dBm",
    337a:	4638      	mov	r0, r7
    337c:	f7fe fe5c 	bl	2038 <bt_addr_le_str>
    3380:	f8cd b00c 	str.w	fp, [sp, #12]
    3384:	7db3      	ldrb	r3, [r6, #22]
    3386:	9302      	str	r3, [sp, #8]
    3388:	7833      	ldrb	r3, [r6, #0]
    338a:	4a41      	ldr	r2, [pc, #260]	; (3490 <bt_recv+0x324>)
    338c:	493f      	ldr	r1, [pc, #252]	; (348c <bt_recv+0x320>)
    338e:	e88d 0009 	stmia.w	sp, {r0, r3}
    3392:	464b      	mov	r3, r9
    3394:	2007      	movs	r0, #7
    3396:	f7fe ff2b 	bl	21f0 <bt_log>
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    339a:	7873      	ldrb	r3, [r6, #1]
    339c:	3b02      	subs	r3, #2
    339e:	2b01      	cmp	r3, #1
    33a0:	f04f 0207 	mov.w	r2, #7
    33a4:	4639      	mov	r1, r7
    33a6:	a806      	add	r0, sp, #24
    33a8:	d829      	bhi.n	33fe <bt_recv+0x292>
    33aa:	f7fd f936 	bl	61a <memcpy>
			id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    33ae:	f89d 3018 	ldrb.w	r3, [sp, #24]
    33b2:	3b02      	subs	r3, #2
    33b4:	f88d 3018 	strb.w	r3, [sp, #24]
		if (scan_dev_found_cb) {
    33b8:	f8da 3000 	ldr.w	r3, [sl]
    33bc:	b1ab      	cbz	r3, 33ea <bt_recv+0x27e>
	state->offset = net_buf_simple_headroom(buf);
    33be:	4628      	mov	r0, r5
    33c0:	f008 fa6d 	bl	b89e <net_buf_simple_headroom>
	state->len = buf->len;
    33c4:	89a3      	ldrh	r3, [r4, #12]
    33c6:	9305      	str	r3, [sp, #20]
			buf->len = info->length;
    33c8:	7db3      	ldrb	r3, [r6, #22]
    33ca:	81a3      	strh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    33cc:	4681      	mov	r9, r0
			scan_dev_found_cb(&id_addr, rssi, info->evt_type,
    33ce:	462b      	mov	r3, r5
    33d0:	7832      	ldrb	r2, [r6, #0]
    33d2:	f8da 7000 	ldr.w	r7, [sl]
    33d6:	4659      	mov	r1, fp
    33d8:	a806      	add	r0, sp, #24
    33da:	47b8      	blx	r7
	buf->data = buf->__buf + state->offset;
    33dc:	6923      	ldr	r3, [r4, #16]
    33de:	fa13 f389 	uxtah	r3, r3, r9
    33e2:	60a3      	str	r3, [r4, #8]
	buf->len = state->len;
    33e4:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    33e8:	81a3      	strh	r3, [r4, #12]
		net_buf_pull(buf, info->length + sizeof(rssi));
    33ea:	7db1      	ldrb	r1, [r6, #22]
    33ec:	4628      	mov	r0, r5
    33ee:	3101      	adds	r1, #1
    33f0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    33f4:	f008 fa43 	bl	b87e <net_buf_simple_pull>
    33f8:	fa5f f888 	uxtb.w	r8, r8
    33fc:	e7ac      	b.n	3358 <bt_recv+0x1ec>
    33fe:	f7fd f90c 	bl	61a <memcpy>
    3402:	e7d9      	b.n	33b8 <bt_recv+0x24c>
		BT_WARN("Unhandled LE event 0x%02x len %u: %s",
    3404:	89a5      	ldrh	r5, [r4, #12]
    3406:	68a0      	ldr	r0, [r4, #8]
    3408:	4629      	mov	r1, r5
    340a:	f7fe fdb9 	bl	1f80 <bt_hex>
    340e:	4a21      	ldr	r2, [pc, #132]	; (3494 <bt_recv+0x328>)
    3410:	4921      	ldr	r1, [pc, #132]	; (3498 <bt_recv+0x32c>)
    3412:	9001      	str	r0, [sp, #4]
    3414:	9500      	str	r5, [sp, #0]
    3416:	4633      	mov	r3, r6
		BT_WARN("Unhandled event 0x%02x len %u: %s", hdr->evt,
    3418:	2004      	movs	r0, #4
    341a:	f7fe fee9 	bl	21f0 <bt_log>
    341e:	e6fe      	b.n	321e <bt_recv+0xb2>
    3420:	89a5      	ldrh	r5, [r4, #12]
    3422:	68a0      	ldr	r0, [r4, #8]
    3424:	4629      	mov	r1, r5
    3426:	f7fe fdab 	bl	1f80 <bt_hex>
    342a:	9500      	str	r5, [sp, #0]
    342c:	9001      	str	r0, [sp, #4]
    342e:	463b      	mov	r3, r7
    3430:	4a0a      	ldr	r2, [pc, #40]	; (345c <bt_recv+0x2f0>)
    3432:	491a      	ldr	r1, [pc, #104]	; (349c <bt_recv+0x330>)
    3434:	e7f0      	b.n	3418 <bt_recv+0x2ac>
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    3436:	4633      	mov	r3, r6
    3438:	4a06      	ldr	r2, [pc, #24]	; (3454 <bt_recv+0x2e8>)
    343a:	4919      	ldr	r1, [pc, #100]	; (34a0 <bt_recv+0x334>)
    343c:	2003      	movs	r0, #3
    343e:	f7fe fed7 	bl	21f0 <bt_log>
		net_buf_unref(buf);
    3442:	4620      	mov	r0, r4
    3444:	f008 f9d2 	bl	b7ec <net_buf_unref>
		return -EINVAL;
    3448:	f06f 0015 	mvn.w	r0, #21
    344c:	e6eb      	b.n	3226 <bt_recv+0xba>
    344e:	bf00      	nop
    3450:	0000d25d 	.word	0x0000d25d
    3454:	0000d437 	.word	0x0000d437
    3458:	0000d5b4 	.word	0x0000d5b4
    345c:	0000d330 	.word	0x0000d330
    3460:	0000d5cb 	.word	0x0000d5cb
    3464:	0000d6c3 	.word	0x0000d6c3
    3468:	0000d29b 	.word	0x0000d29b
    346c:	0000d5fa 	.word	0x0000d5fa
    3470:	20004eb0 	.word	0x20004eb0
    3474:	2000079c 	.word	0x2000079c
    3478:	200007dc 	.word	0x200007dc
    347c:	20000798 	.word	0x20000798
    3480:	0000d2ac 	.word	0x0000d2ac
    3484:	0000d310 	.word	0x0000d310
    3488:	0000d610 	.word	0x0000d610
    348c:	0000d632 	.word	0x0000d632
    3490:	0000d2fe 	.word	0x0000d2fe
    3494:	0000d31e 	.word	0x0000d31e
    3498:	0000d65c 	.word	0x0000d65c
    349c:	0000d685 	.word	0x0000d685
    34a0:	0000d6ab 	.word	0x0000d6ab
    34a4:	200007e4 	.word	0x200007e4
	net_buf_pull(buf, sizeof(*hdr));
    34a8:	f104 0508 	add.w	r5, r4, #8
    34ac:	2102      	movs	r1, #2
    34ae:	4628      	mov	r0, r5
    34b0:	f008 f9e5 	bl	b87e <net_buf_simple_pull>
	switch (hdr->evt) {
    34b4:	783f      	ldrb	r7, [r7, #0]
    34b6:	2f3e      	cmp	r7, #62	; 0x3e
    34b8:	d1b2      	bne.n	3420 <bt_recv+0x2b4>
	struct bt_hci_evt_le_meta_event *evt = (void *)buf->data;
    34ba:	68a7      	ldr	r7, [r4, #8]
    34bc:	f008 fdb8 	bl	c030 <_impl_k_current_get>
	BT_DBG("subevent 0x%02x", evt->subevent);
    34c0:	783b      	ldrb	r3, [r7, #0]
    34c2:	9300      	str	r3, [sp, #0]
    34c4:	4a14      	ldr	r2, [pc, #80]	; (3518 <bt_recv+0x3ac>)
    34c6:	4915      	ldr	r1, [pc, #84]	; (351c <bt_recv+0x3b0>)
    34c8:	4603      	mov	r3, r0
    34ca:	2007      	movs	r0, #7
    34cc:	f7fe fe90 	bl	21f0 <bt_log>
	net_buf_pull(buf, sizeof(*evt));
    34d0:	4631      	mov	r1, r6
    34d2:	4628      	mov	r0, r5
    34d4:	f008 f9d3 	bl	b87e <net_buf_simple_pull>
	switch (evt->subevent) {
    34d8:	783e      	ldrb	r6, [r7, #0]
    34da:	1eb3      	subs	r3, r6, #2
    34dc:	2b0b      	cmp	r3, #11
    34de:	d891      	bhi.n	3404 <bt_recv+0x298>
    34e0:	a201      	add	r2, pc, #4	; (adr r2, 34e8 <bt_recv+0x37c>)
    34e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    34e6:	bf00      	nop
    34e8:	0000326f 	.word	0x0000326f
    34ec:	00003405 	.word	0x00003405
    34f0:	00003405 	.word	0x00003405
    34f4:	00003405 	.word	0x00003405
    34f8:	00003405 	.word	0x00003405
    34fc:	00003405 	.word	0x00003405
    3500:	000031e1 	.word	0x000031e1
    3504:	0000323f 	.word	0x0000323f
    3508:	00003405 	.word	0x00003405
    350c:	00003405 	.word	0x00003405
    3510:	00003405 	.word	0x00003405
    3514:	00003339 	.word	0x00003339
    3518:	0000d31e 	.word	0x0000d31e
    351c:	0000d5e1 	.word	0x0000d5e1

00003520 <bt_recv_prio>:
{
    3520:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    3524:	7d03      	ldrb	r3, [r0, #20]
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    3526:	6886      	ldr	r6, [r0, #8]
    3528:	2b03      	cmp	r3, #3
{
    352a:	4604      	mov	r4, r0
    352c:	bf96      	itet	ls
    352e:	4a37      	ldrls	r2, [pc, #220]	; (360c <bt_recv_prio+0xec>)
    3530:	20ff      	movhi	r0, #255	; 0xff
    3532:	5cd0      	ldrbls	r0, [r2, r3]
	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);
    3534:	89a2      	ldrh	r2, [r4, #12]
    3536:	4631      	mov	r1, r6
    3538:	f7fe fec8 	bl	22cc <bt_monitor_send>
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    353c:	7d23      	ldrb	r3, [r4, #20]
    353e:	2b01      	cmp	r3, #1
    3540:	d00a      	beq.n	3558 <bt_recv_prio+0x38>
    3542:	4a33      	ldr	r2, [pc, #204]	; (3610 <bt_recv_prio+0xf0>)
    3544:	4933      	ldr	r1, [pc, #204]	; (3614 <bt_recv_prio+0xf4>)
	BT_ASSERT(buf->len >= sizeof(*hdr));
    3546:	2003      	movs	r0, #3
    3548:	f7fe fe52 	bl	21f0 <bt_log>
    354c:	4040      	eors	r0, r0
    354e:	f380 8811 	msr	BASEPRI, r0
    3552:	f04f 0004 	mov.w	r0, #4
    3556:	df02      	svc	2
    3558:	89a3      	ldrh	r3, [r4, #12]
    355a:	2b01      	cmp	r3, #1
    355c:	d802      	bhi.n	3564 <bt_recv_prio+0x44>
    355e:	4a2c      	ldr	r2, [pc, #176]	; (3610 <bt_recv_prio+0xf0>)
    3560:	492d      	ldr	r1, [pc, #180]	; (3618 <bt_recv_prio+0xf8>)
    3562:	e7f0      	b.n	3546 <bt_recv_prio+0x26>
    3564:	7833      	ldrb	r3, [r6, #0]
    3566:	3b0e      	subs	r3, #14
    3568:	2b01      	cmp	r3, #1
    356a:	d84c      	bhi.n	3606 <bt_recv_prio+0xe6>
	net_buf_pull(buf, sizeof(*hdr));
    356c:	f104 0508 	add.w	r5, r4, #8
    3570:	2102      	movs	r1, #2
    3572:	4628      	mov	r0, r5
    3574:	f008 f983 	bl	b87e <net_buf_simple_pull>
	switch (hdr->evt) {
    3578:	7833      	ldrb	r3, [r6, #0]
    357a:	2b0e      	cmp	r3, #14
    357c:	d007      	beq.n	358e <bt_recv_prio+0x6e>
    357e:	2b0f      	cmp	r3, #15
    3580:	d027      	beq.n	35d2 <bt_recv_prio+0xb2>
		net_buf_unref(buf);
    3582:	4620      	mov	r0, r4
    3584:	f008 f932 	bl	b7ec <net_buf_unref>
		BT_ASSERT(0);
    3588:	4a21      	ldr	r2, [pc, #132]	; (3610 <bt_recv_prio+0xf0>)
    358a:	4924      	ldr	r1, [pc, #144]	; (361c <bt_recv_prio+0xfc>)
    358c:	e7db      	b.n	3546 <bt_recv_prio+0x26>
	struct bt_hci_evt_cmd_complete *evt = (void *)buf->data;
    358e:	68a3      	ldr	r3, [r4, #8]
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    3590:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	u8_t status, ncmd = evt->ncmd;
    3594:	781f      	ldrb	r7, [r3, #0]
    3596:	f008 fd4b 	bl	c030 <_impl_k_current_get>
	BT_DBG("opcode 0x%04x", opcode);
    359a:	4a21      	ldr	r2, [pc, #132]	; (3620 <bt_recv_prio+0x100>)
    359c:	4921      	ldr	r1, [pc, #132]	; (3624 <bt_recv_prio+0x104>)
    359e:	9600      	str	r6, [sp, #0]
    35a0:	4603      	mov	r3, r0
    35a2:	2007      	movs	r0, #7
    35a4:	f7fe fe24 	bl	21f0 <bt_log>
	net_buf_pull(buf, sizeof(*evt));
    35a8:	2103      	movs	r1, #3
    35aa:	4628      	mov	r0, r5
    35ac:	f008 f967 	bl	b87e <net_buf_simple_pull>
	status = buf->data[0];
    35b0:	68a3      	ldr	r3, [r4, #8]
	hci_cmd_done(opcode, status, buf);
    35b2:	4622      	mov	r2, r4
    35b4:	7819      	ldrb	r1, [r3, #0]
    35b6:	4630      	mov	r0, r6
    35b8:	f7fe ff92 	bl	24e0 <hci_cmd_done>
	if (ncmd) {
    35bc:	b117      	cbz	r7, 35c4 <bt_recv_prio+0xa4>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    35be:	481a      	ldr	r0, [pc, #104]	; (3628 <bt_recv_prio+0x108>)
    35c0:	f008 fd94 	bl	c0ec <_impl_k_sem_give>
	net_buf_unref(buf);
    35c4:	4620      	mov	r0, r4
    35c6:	f008 f911 	bl	b7ec <net_buf_unref>
}
    35ca:	2000      	movs	r0, #0
    35cc:	b002      	add	sp, #8
    35ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	struct bt_hci_evt_cmd_status *evt = (void *)buf->data;
    35d2:	68a6      	ldr	r6, [r4, #8]
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    35d4:	8877      	ldrh	r7, [r6, #2]
	u8_t ncmd = evt->ncmd;
    35d6:	f896 8001 	ldrb.w	r8, [r6, #1]
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    35da:	f008 fd29 	bl	c030 <_impl_k_current_get>
	BT_DBG("opcode 0x%04x", opcode);
    35de:	4a13      	ldr	r2, [pc, #76]	; (362c <bt_recv_prio+0x10c>)
    35e0:	4910      	ldr	r1, [pc, #64]	; (3624 <bt_recv_prio+0x104>)
    35e2:	9700      	str	r7, [sp, #0]
    35e4:	4603      	mov	r3, r0
    35e6:	2007      	movs	r0, #7
    35e8:	f7fe fe02 	bl	21f0 <bt_log>
	net_buf_pull(buf, sizeof(*evt));
    35ec:	2104      	movs	r1, #4
    35ee:	4628      	mov	r0, r5
    35f0:	f008 f945 	bl	b87e <net_buf_simple_pull>
	hci_cmd_done(opcode, evt->status, buf);
    35f4:	4622      	mov	r2, r4
    35f6:	7831      	ldrb	r1, [r6, #0]
    35f8:	4638      	mov	r0, r7
    35fa:	f7fe ff71 	bl	24e0 <hci_cmd_done>
	if (ncmd) {
    35fe:	f1b8 0f00 	cmp.w	r8, #0
    3602:	d0df      	beq.n	35c4 <bt_recv_prio+0xa4>
    3604:	e7db      	b.n	35be <bt_recv_prio+0x9e>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    3606:	4a02      	ldr	r2, [pc, #8]	; (3610 <bt_recv_prio+0xf0>)
    3608:	4909      	ldr	r1, [pc, #36]	; (3630 <bt_recv_prio+0x110>)
    360a:	e79c      	b.n	3546 <bt_recv_prio+0x26>
    360c:	0000d25d 	.word	0x0000d25d
    3610:	0000d43f 	.word	0x0000d43f
    3614:	0000d6f6 	.word	0x0000d6f6
    3618:	0000d72e 	.word	0x0000d72e
    361c:	0000d773 	.word	0x0000d773
    3620:	0000d2de 	.word	0x0000d2de
    3624:	0000d75c 	.word	0x0000d75c
    3628:	20004ec8 	.word	0x20004ec8
    362c:	0000d2ef 	.word	0x0000d2ef
    3630:	0000d78a 	.word	0x0000d78a

00003634 <bt_hci_driver_register>:
{
    3634:	b530      	push	{r4, r5, lr}
	if (bt_dev.drv) {
    3636:	4b18      	ldr	r3, [pc, #96]	; (3698 <bt_hci_driver_register+0x64>)
    3638:	f8d3 40c4 	ldr.w	r4, [r3, #196]	; 0xc4
{
    363c:	b085      	sub	sp, #20
    363e:	4605      	mov	r5, r0
	if (bt_dev.drv) {
    3640:	bb1c      	cbnz	r4, 368a <bt_hci_driver_register+0x56>
	if (!drv->open || !drv->send) {
    3642:	6882      	ldr	r2, [r0, #8]
    3644:	b322      	cbz	r2, 3690 <bt_hci_driver_register+0x5c>
    3646:	68c2      	ldr	r2, [r0, #12]
    3648:	b312      	cbz	r2, 3690 <bt_hci_driver_register+0x5c>
	bt_dev.drv = drv;
    364a:	f8c3 00c4 	str.w	r0, [r3, #196]	; 0xc4
    364e:	f008 fcef 	bl	c030 <_impl_k_current_get>
	BT_DBG("Registered %s", drv->name ? drv->name : "");
    3652:	682b      	ldr	r3, [r5, #0]
    3654:	4a11      	ldr	r2, [pc, #68]	; (369c <bt_hci_driver_register+0x68>)
    3656:	4912      	ldr	r1, [pc, #72]	; (36a0 <bt_hci_driver_register+0x6c>)
    3658:	2b00      	cmp	r3, #0
    365a:	bf08      	it	eq
    365c:	4613      	moveq	r3, r2
    365e:	9300      	str	r3, [sp, #0]
    3660:	4a10      	ldr	r2, [pc, #64]	; (36a4 <bt_hci_driver_register+0x70>)
    3662:	4603      	mov	r3, r0
    3664:	2007      	movs	r0, #7
    3666:	f7fe fdc3 	bl	21f0 <bt_log>
			     BT_ADDR_ANY, drv->name ? drv->name : "bt0");
    366a:	682b      	ldr	r3, [r5, #0]
	bt_monitor_new_index(BT_MONITOR_TYPE_PRIMARY, drv->bus,
    366c:	4a0e      	ldr	r2, [pc, #56]	; (36a8 <bt_hci_driver_register+0x74>)
    366e:	7929      	ldrb	r1, [r5, #4]
			     BT_ADDR_ANY, drv->name ? drv->name : "bt0");
    3670:	9402      	str	r4, [sp, #8]
	bt_monitor_new_index(BT_MONITOR_TYPE_PRIMARY, drv->bus,
    3672:	2b00      	cmp	r3, #0
    3674:	bf08      	it	eq
    3676:	4613      	moveq	r3, r2
    3678:	4620      	mov	r0, r4
    367a:	aa02      	add	r2, sp, #8
			     BT_ADDR_ANY, drv->name ? drv->name : "bt0");
    367c:	f8ad 400c 	strh.w	r4, [sp, #12]
	bt_monitor_new_index(BT_MONITOR_TYPE_PRIMARY, drv->bus,
    3680:	f7fe feba 	bl	23f8 <bt_monitor_new_index>
	return 0;
    3684:	4620      	mov	r0, r4
}
    3686:	b005      	add	sp, #20
    3688:	bd30      	pop	{r4, r5, pc}
		return -EALREADY;
    368a:	f06f 0044 	mvn.w	r0, #68	; 0x44
    368e:	e7fa      	b.n	3686 <bt_hci_driver_register+0x52>
		return -EINVAL;
    3690:	f06f 0015 	mvn.w	r0, #21
    3694:	e7f7      	b.n	3686 <bt_hci_driver_register+0x52>
    3696:	bf00      	nop
    3698:	20004e40 	.word	0x20004e40
    369c:	0000cc37 	.word	0x0000cc37
    36a0:	0000d59d 	.word	0x0000d59d
    36a4:	0000d44c 	.word	0x0000d44c
    36a8:	0000d599 	.word	0x0000d599

000036ac <bt_enable>:
{
    36ac:	b570      	push	{r4, r5, r6, lr}
	if (!bt_dev.drv) {
    36ae:	4d28      	ldr	r5, [pc, #160]	; (3750 <bt_enable+0xa4>)
    36b0:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
{
    36b4:	b086      	sub	sp, #24
    36b6:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    36b8:	b94b      	cbnz	r3, 36ce <bt_enable+0x22>
		BT_ERR("No HCI driver registered");
    36ba:	4a26      	ldr	r2, [pc, #152]	; (3754 <bt_enable+0xa8>)
    36bc:	4926      	ldr	r1, [pc, #152]	; (3758 <bt_enable+0xac>)
    36be:	2003      	movs	r0, #3
    36c0:	f7fe fd96 	bl	21f0 <bt_log>
		return -ENODEV;
    36c4:	f06f 0412 	mvn.w	r4, #18
}
    36c8:	4620      	mov	r0, r4
    36ca:	b006      	add	sp, #24
    36cc:	bd70      	pop	{r4, r5, r6, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    36ce:	2101      	movs	r1, #1
    36d0:	f105 0070 	add.w	r0, r5, #112	; 0x70
    36d4:	f7fe fee2 	bl	249c <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    36d8:	f010 0001 	ands.w	r0, r0, #1
    36dc:	d135      	bne.n	374a <bt_enable+0x9e>
	ready_cb = cb;
    36de:	4b1f      	ldr	r3, [pc, #124]	; (375c <bt_enable+0xb0>)

    36e0:	491f      	ldr	r1, [pc, #124]	; (3760 <bt_enable+0xb4>)
    36e2:	601e      	str	r6, [r3, #0]
    36e4:	f06f 0308 	mvn.w	r3, #8
    36e8:	9005      	str	r0, [sp, #20]
    36ea:	9004      	str	r0, [sp, #16]
    36ec:	9303      	str	r3, [sp, #12]
    36ee:	9002      	str	r0, [sp, #8]
    36f0:	9001      	str	r0, [sp, #4]
    36f2:	9000      	str	r0, [sp, #0]
    36f4:	4b1b      	ldr	r3, [pc, #108]	; (3764 <bt_enable+0xb8>)
    36f6:	481c      	ldr	r0, [pc, #112]	; (3768 <bt_enable+0xbc>)
    36f8:	f44f 726b 	mov.w	r2, #940	; 0x3ac
    36fc:	f008 ff32 	bl	c564 <_impl_k_thread_create>
	err = bt_dev.drv->open();
    3700:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
    3704:	689b      	ldr	r3, [r3, #8]
    3706:	4798      	blx	r3
	if (err) {
    3708:	4604      	mov	r4, r0
    370a:	b130      	cbz	r0, 371a <bt_enable+0x6e>
		BT_ERR("HCI driver open failed (%d)", err);
    370c:	4603      	mov	r3, r0
    370e:	4a11      	ldr	r2, [pc, #68]	; (3754 <bt_enable+0xa8>)
    3710:	4916      	ldr	r1, [pc, #88]	; (376c <bt_enable+0xc0>)
    3712:	2003      	movs	r0, #3
    3714:	f7fe fd6c 	bl	21f0 <bt_log>
		return err;
    3718:	e7d6      	b.n	36c8 <bt_enable+0x1c>
	if (!cb) {
    371a:	b94e      	cbnz	r6, 3730 <bt_enable+0x84>
	err = hci_init();
    371c:	f7ff f908 	bl	2930 <hci_init>
	if (err) {
    3720:	4604      	mov	r4, r0
    3722:	2800      	cmp	r0, #0
    3724:	d1d0      	bne.n	36c8 <bt_enable+0x1c>
}
    3726:	b006      	add	sp, #24
    3728:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    372c:	f7ff b8e0 	b.w	28f0 <bt_init.part.13>
    3730:	2101      	movs	r1, #1
    3732:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    3736:	f7fe feb1 	bl	249c <atomic_or>
 * @return N/A
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    373a:	07c3      	lsls	r3, r0, #31
    373c:	d4c4      	bmi.n	36c8 <bt_enable+0x1c>
		k_queue_append(&work_q->queue, work);
    373e:	f105 0164 	add.w	r1, r5, #100	; 0x64
    3742:	480b      	ldr	r0, [pc, #44]	; (3770 <bt_enable+0xc4>)
    3744:	f008 fa87 	bl	bc56 <k_queue_append>
    3748:	e7be      	b.n	36c8 <bt_enable+0x1c>
		return -EALREADY;
    374a:	f06f 0444 	mvn.w	r4, #68	; 0x44
    374e:	e7bb      	b.n	36c8 <bt_enable+0x1c>
    3750:	20004e40 	.word	0x20004e40
    3754:	0000d463 	.word	0x0000d463
    3758:	0000d49a 	.word	0x0000d49a
    375c:	200007e0 	.word	0x200007e0
    3760:	20002df8 	.word	0x20002df8
    3764:	00002fa9 	.word	0x00002fa9
    3768:	200007e8 	.word	0x200007e8
    376c:	0000d4b7 	.word	0x0000d4b7
    3770:	20002d80 	.word	0x20002d80

00003774 <bt_le_ext_adv_start>:


int bt_le_ext_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    3774:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3778:	b089      	sub	sp, #36	; 0x24
    377a:	4605      	mov	r5, r0
    377c:	460f      	mov	r7, r1
    377e:	4690      	mov	r8, r2
    3780:	461e      	mov	r6, r3
	struct bt_hci_cp_le_set_ext_adv_param set_param;
	struct net_buf *buf;
	int err;

	if (!valid_adv_param(param)) {
    3782:	f7fe fe71 	bl	2468 <valid_adv_param>
    3786:	b928      	cbnz	r0, 3794 <bt_le_ext_adv_start+0x20>
		return -EINVAL;
    3788:	f06f 0415 	mvn.w	r4, #21
	if (!(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING);
	}

	return 0;
}
    378c:	4620      	mov	r0, r4
    378e:	b009      	add	sp, #36	; 0x24
    3790:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    3794:	2005      	movs	r0, #5
    3796:	f7fe ff05 	bl	25a4 <atomic_test_bit.constprop.23>
    379a:	4604      	mov	r4, r0
    379c:	2800      	cmp	r0, #0
    379e:	f040 80a4 	bne.w	38ea <bt_le_ext_adv_start+0x176>
	memset(&set_param, 0, sizeof(set_param));
    37a2:	4601      	mov	r1, r0
    37a4:	2217      	movs	r2, #23
    37a6:	a802      	add	r0, sp, #8
    37a8:	f7fc ff63 	bl	672 <memset>
	set_param.prim_min_interval = sys_cpu_to_le16(param->interval_min);
    37ac:	886b      	ldrh	r3, [r5, #2]
    37ae:	f8ad 300b 	strh.w	r3, [sp, #11]
	set_param.prim_max_interval = sys_cpu_to_le16(param->interval_max);
    37b2:	88ab      	ldrh	r3, [r5, #4]
    37b4:	f8ad 300d 	strh.w	r3, [sp, #13]
	set_param.prim_channel_map  = 0x01;
    37b8:	2301      	movs	r3, #1
    37ba:	f88d 300f 	strb.w	r3, [sp, #15]
	set_param.prim_adv_phy  	= 0x01;
    37be:	f88d 301a 	strb.w	r3, [sp, #26]
	set_param.sec_adv_max_skip  = 5;                                   //0x01
    37c2:	2305      	movs	r3, #5
    37c4:	f88d 301b 	strb.w	r3, [sp, #27]
	u8_t direct_address[]		= {0x06,0x05,0x04,0x03,0x02,0x01};			//write address in reverse order
    37c8:	4b49      	ldr	r3, [pc, #292]	; (38f0 <bt_le_ext_adv_start+0x17c>)
	set_param.handle			= 0x00;
    37ca:	f88d 4008 	strb.w	r4, [sp, #8]
	u8_t direct_address[]		= {0x06,0x05,0x04,0x03,0x02,0x01};			//write address in reverse order
    37ce:	6818      	ldr	r0, [r3, #0]
    37d0:	9000      	str	r0, [sp, #0]
    37d2:	889b      	ldrh	r3, [r3, #4]
    37d4:	f8ad 3004 	strh.w	r3, [sp, #4]
	memcpy(&set_param.direct_addr.a.val, direct_address, sizeof(direct_address));
    37d8:	4669      	mov	r1, sp
	set_param.sid 				= 0x02;
    37da:	f04f 0902 	mov.w	r9, #2
	memcpy(&set_param.direct_addr.a.val, direct_address, sizeof(direct_address));
    37de:	2206      	movs	r2, #6
    37e0:	f10d 0012 	add.w	r0, sp, #18
	set_param.sid 				= 0x02;
    37e4:	f88d 901d 	strb.w	r9, [sp, #29]
	set_param.sec_adv_phy		= 0x00;  
    37e8:	f88d 401c 	strb.w	r4, [sp, #28]
	memcpy(&set_param.direct_addr.a.val, direct_address, sizeof(direct_address));
    37ec:	f7fc ff15 	bl	61a <memcpy>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    37f0:	782b      	ldrb	r3, [r5, #0]
    37f2:	07d9      	lsls	r1, r3, #31
    37f4:	d51a      	bpl.n	382c <bt_le_ext_adv_start+0xb8>
			if (atomic_test_bit(bt_dev.flags,
    37f6:	4648      	mov	r0, r9
    37f8:	f7fe fed4 	bl	25a4 <atomic_test_bit.constprop.23>
    37fc:	b110      	cbz	r0, 3804 <bt_le_ext_adv_start+0x90>
				set_random_address(&bt_dev.id_addr.a);
    37fe:	483d      	ldr	r0, [pc, #244]	; (38f4 <bt_le_ext_adv_start+0x180>)
    3800:	f7fe ff92 	bl	2728 <set_random_address>
			set_param.own_addr_type = bt_dev.id_addr.type;
    3804:	4b3c      	ldr	r3, [pc, #240]	; (38f8 <bt_le_ext_adv_start+0x184>)
    3806:	781b      	ldrb	r3, [r3, #0]
    3808:	f88d 3010 	strb.w	r3, [sp, #16]
		set_param.props = BT_HCI_LE_ADV_PROP_CONN | BT_HCI_LE_ADV_PROP_SCAN;				// BT_LE_ADV_IND;
    380c:	2303      	movs	r3, #3
    380e:	f88d 3009 	strb.w	r3, [sp, #9]
    3812:	2300      	movs	r3, #0
    3814:	f88d 300a 	strb.w	r3, [sp, #10]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EXT_ADV_PARAM, sizeof(set_param));
    3818:	2117      	movs	r1, #23
    381a:	f242 0036 	movw	r0, #8246	; 0x2036
    381e:	f7fe fed3 	bl	25c8 <bt_hci_cmd_create>
	if (!buf) {
    3822:	4604      	mov	r4, r0
    3824:	b9c8      	cbnz	r0, 385a <bt_le_ext_adv_start+0xe6>
		return -ENOBUFS;
    3826:	f06f 0436 	mvn.w	r4, #54	; 0x36
    382a:	e7af      	b.n	378c <bt_le_ext_adv_start+0x18>
		if (param->own_addr) {
    382c:	68a8      	ldr	r0, [r5, #8]
    382e:	b188      	cbz	r0, 3854 <bt_le_ext_adv_start+0xe0>
			if (!BT_ADDR_IS_NRPA(param->own_addr)) {
    3830:	7943      	ldrb	r3, [r0, #5]
    3832:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    3836:	d1a7      	bne.n	3788 <bt_le_ext_adv_start+0x14>
			err = set_random_address(param->own_addr);
    3838:	f7fe ff76 	bl	2728 <set_random_address>
			err = le_set_private_addr();
    383c:	4604      	mov	r4, r0
		if (err) {
    383e:	2800      	cmp	r0, #0
    3840:	d1a4      	bne.n	378c <bt_le_ext_adv_start+0x18>
		set_param.own_addr_type = BT_ADDR_LE_RANDOM;									//own_addr_type
    3842:	2301      	movs	r3, #1
    3844:	f88d 3010 	strb.w	r3, [sp, #16]
			set_param.props =  BT_HCI_LE_ADV_PROP_TX_POWER  ; //|BT_HCI_LE_ADV_PROP_DIRECT |BT_HCI_LE_ADV_PROP_SCAN |;		//BT_LE_ADV_SCAN_IND and trx pwr
    3848:	2340      	movs	r3, #64	; 0x40
    384a:	f88d 3009 	strb.w	r3, [sp, #9]
    384e:	f88d 000a 	strb.w	r0, [sp, #10]
    3852:	e7e1      	b.n	3818 <bt_le_ext_adv_start+0xa4>
			err = le_set_private_addr();
    3854:	f7fe ffa8 	bl	27a8 <le_set_private_addr>
    3858:	e7f0      	b.n	383c <bt_le_ext_adv_start+0xc8>
	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    385a:	2217      	movs	r2, #23
    385c:	a902      	add	r1, sp, #8
    385e:	3008      	adds	r0, #8
    3860:	f007 fffc 	bl	b85c <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EXT_ADV_PARAM, buf, NULL);
    3864:	4621      	mov	r1, r4
    3866:	2200      	movs	r2, #0
    3868:	f242 0036 	movw	r0, #8246	; 0x2036
    386c:	f7fe fef6 	bl	265c <bt_hci_cmd_send_sync>
	if (err) {
    3870:	4604      	mov	r4, r0
    3872:	2800      	cmp	r0, #0
    3874:	d18a      	bne.n	378c <bt_le_ext_adv_start+0x18>
	err = set_ext_ad(BT_HCI_OP_LE_SET_EXT_ADV_DATA, ad, ad_len);
    3876:	4642      	mov	r2, r8
    3878:	4639      	mov	r1, r7
    387a:	f242 0037 	movw	r0, #8247	; 0x2037
    387e:	f7fe ffd9 	bl	2834 <set_ext_ad>
	if (err) {
    3882:	4604      	mov	r4, r0
    3884:	2800      	cmp	r0, #0
    3886:	d181      	bne.n	378c <bt_le_ext_adv_start+0x18>
	if (sd || (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    3888:	bb2e      	cbnz	r6, 38d6 <bt_le_ext_adv_start+0x162>
    388a:	782b      	ldrb	r3, [r5, #0]
    388c:	07da      	lsls	r2, r3, #31
    388e:	d422      	bmi.n	38d6 <bt_le_ext_adv_start+0x162>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EXT_ADV_ENABLE, 1);
    3890:	2101      	movs	r1, #1
    3892:	f242 0039 	movw	r0, #8249	; 0x2039
    3896:	f7fe fe97 	bl	25c8 <bt_hci_cmd_create>
	if (!buf) {
    389a:	4604      	mov	r4, r0
    389c:	2800      	cmp	r0, #0
    389e:	d0c2      	beq.n	3826 <bt_le_ext_adv_start+0xb2>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    38a0:	2101      	movs	r1, #1
    38a2:	3008      	adds	r0, #8
    38a4:	f007 ffe3 	bl	b86e <net_buf_simple_add_u8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EXT_ADV_ENABLE, buf, NULL);
    38a8:	4621      	mov	r1, r4
    38aa:	2200      	movs	r2, #0
    38ac:	f242 0039 	movw	r0, #8249	; 0x2039
    38b0:	f7fe fed4 	bl	265c <bt_hci_cmd_send_sync>
	if (err) {
    38b4:	4604      	mov	r4, r0
    38b6:	2800      	cmp	r0, #0
    38b8:	f47f af68 	bne.w	378c <bt_le_ext_adv_start+0x18>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    38bc:	2120      	movs	r1, #32
    38be:	480f      	ldr	r0, [pc, #60]	; (38fc <bt_le_ext_adv_start+0x188>)
    38c0:	f7fe fdec 	bl	249c <atomic_or>
	if (!(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    38c4:	782b      	ldrb	r3, [r5, #0]
    38c6:	079b      	lsls	r3, r3, #30
    38c8:	f53f af60 	bmi.w	378c <bt_le_ext_adv_start+0x18>
    38cc:	2140      	movs	r1, #64	; 0x40
    38ce:	480b      	ldr	r0, [pc, #44]	; (38fc <bt_le_ext_adv_start+0x188>)
    38d0:	f7fe fde4 	bl	249c <atomic_or>
    38d4:	e75a      	b.n	378c <bt_le_ext_adv_start+0x18>
		err = set_ext_ad(BT_HCI_OP_LE_SET_EXT_SCAN_RSP_DATA, sd, sd_len);
    38d6:	9a10      	ldr	r2, [sp, #64]	; 0x40
    38d8:	4631      	mov	r1, r6
    38da:	f242 0038 	movw	r0, #8248	; 0x2038
    38de:	f7fe ffa9 	bl	2834 <set_ext_ad>
		if (err) {
    38e2:	4604      	mov	r4, r0
    38e4:	2800      	cmp	r0, #0
    38e6:	d0d3      	beq.n	3890 <bt_le_ext_adv_start+0x11c>
    38e8:	e750      	b.n	378c <bt_le_ext_adv_start+0x18>
		return -EALREADY;
    38ea:	f06f 0444 	mvn.w	r4, #68	; 0x44
    38ee:	e74d      	b.n	378c <bt_le_ext_adv_start+0x18>
    38f0:	0000cbef 	.word	0x0000cbef
    38f4:	20004e41 	.word	0x20004e41
    38f8:	20004e40 	.word	0x20004e40
    38fc:	20004eb0 	.word	0x20004eb0

00003900 <bt_buf_get_rx>:

	return bt_le_scan_update(false);
}

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, s32_t timeout)
{
    3900:	b538      	push	{r3, r4, r5, lr}
    3902:	4605      	mov	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    3904:	4805      	ldr	r0, [pc, #20]	; (391c <bt_buf_get_rx+0x1c>)
    3906:	f007 ff41 	bl	b78c <net_buf_alloc_fixed>
#endif

	if (buf) {
    390a:	4604      	mov	r4, r0
    390c:	b120      	cbz	r0, 3918 <bt_buf_get_rx+0x18>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    390e:	2100      	movs	r1, #0
    3910:	3008      	adds	r0, #8
    3912:	f007 ff5a 	bl	b7ca <net_buf_simple_reserve>
	*(u8_t *)net_buf_user_data(buf) = type;
    3916:	7525      	strb	r5, [r4, #20]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    3918:	4620      	mov	r0, r4
    391a:	bd38      	pop	{r3, r4, r5, pc}
    391c:	200051a8 	.word	0x200051a8

00003920 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(s32_t timeout)
{
    3920:	b573      	push	{r0, r1, r4, r5, r6, lr}
    3922:	4606      	mov	r6, r0
	__asm__ volatile(
    3924:	f04f 0320 	mov.w	r3, #32
    3928:	f3ef 8211 	mrs	r2, BASEPRI
    392c:	f383 8811 	msr	BASEPRI, r3
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    3930:	4b11      	ldr	r3, [pc, #68]	; (3978 <bt_buf_get_cmd_complete+0x58>)
	bt_dev.sent_cmd = NULL;
    3932:	2500      	movs	r5, #0
	buf = bt_dev.sent_cmd;
    3934:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
	bt_dev.sent_cmd = NULL;
    3938:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    393c:	f382 8811 	msr	BASEPRI, r2
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    3940:	f008 fb76 	bl	c030 <_impl_k_current_get>
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);
    3944:	9400      	str	r4, [sp, #0]
    3946:	4603      	mov	r3, r0
    3948:	4a0c      	ldr	r2, [pc, #48]	; (397c <bt_buf_get_cmd_complete+0x5c>)
    394a:	490d      	ldr	r1, [pc, #52]	; (3980 <bt_buf_get_cmd_complete+0x60>)
    394c:	2007      	movs	r0, #7
    394e:	f7fe fc4f 	bl	21f0 <bt_log>

	if (buf) {
    3952:	b934      	cbnz	r4, 3962 <bt_buf_get_cmd_complete+0x42>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    3954:	4631      	mov	r1, r6
    3956:	2001      	movs	r0, #1
}
    3958:	b002      	add	sp, #8
    395a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    395e:	f7ff bfcf 	b.w	3900 <bt_buf_get_rx>
    3962:	2301      	movs	r3, #1
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    3964:	f104 0008 	add.w	r0, r4, #8
    3968:	7523      	strb	r3, [r4, #20]
		buf->len = 0;
    396a:	81a5      	strh	r5, [r4, #12]
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    396c:	4629      	mov	r1, r5
    396e:	f007 ff2c 	bl	b7ca <net_buf_simple_reserve>
}
    3972:	4620      	mov	r0, r4
    3974:	b002      	add	sp, #8
    3976:	bd70      	pop	{r4, r5, r6, pc}
    3978:	20004e40 	.word	0x20004e40
    397c:	0000d46d 	.word	0x0000d46d
    3980:	0000d485 	.word	0x0000d485

00003984 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
    3984:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	*mem_head = mem_pool;
    3986:	6018      	str	r0, [r3, #0]

	/* Store free mem_count after the list's next pointer at an aligned
	 * memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    3988:	1dc3      	adds	r3, r0, #7
{
    398a:	4605      	mov	r5, r0
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    398c:	f023 0303 	bic.w	r3, r3, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    3990:	1e50      	subs	r0, r2, #1
{
    3992:	460e      	mov	r6, r1
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    3994:	b280      	uxth	r0, r0
{
    3996:	4614      	mov	r4, r2
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    3998:	801a      	strh	r2, [r3, #0]
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    399a:	2100      	movs	r1, #0
    399c:	2204      	movs	r2, #4
    399e:	fb06 5000 	mla	r0, r6, r0, r5
    39a2:	f7fc fe66 	bl	672 <memset>
    39a6:	3c02      	subs	r4, #2
    39a8:	b2a4      	uxth	r4, r4
	       sizeof(mem_pool));
	while (mem_count--) {
    39aa:	f64f 77ff 	movw	r7, #65535	; 0xffff
    39ae:	42bc      	cmp	r4, r7
    39b0:	d101      	bne.n	39b6 <mem_init+0x32>
		next = (u32_t)((u8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
		       (void *)&next, sizeof(next));
	}
}
    39b2:	b003      	add	sp, #12
    39b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			       (mem_size * (mem_count + 1)));
    39b6:	fb04 6006 	mla	r0, r4, r6, r6
		next = (u32_t)((u8_t *) mem_pool +
    39ba:	182b      	adds	r3, r5, r0
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    39bc:	2204      	movs	r2, #4
    39be:	1b80      	subs	r0, r0, r6
    39c0:	eb0d 0102 	add.w	r1, sp, r2
    39c4:	4428      	add	r0, r5
    39c6:	3c01      	subs	r4, #1
		next = (u32_t)((u8_t *) mem_pool +
    39c8:	9301      	str	r3, [sp, #4]
    39ca:	b2a4      	uxth	r4, r4
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    39cc:	f7fc fe25 	bl	61a <memcpy>
    39d0:	e7ed      	b.n	39ae <mem_init+0x2a>

000039d2 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    39d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (*mem_head) {
    39d4:	6805      	ldr	r5, [r0, #0]
{
    39d6:	4606      	mov	r6, r0
	if (*mem_head) {
    39d8:	b195      	cbz	r5, 3a00 <mem_acquire+0x2e>
		u16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    39da:	1deb      	adds	r3, r5, #7
    39dc:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    39e0:	2204      	movs	r2, #4
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    39e2:	881c      	ldrh	r4, [r3, #0]
		memcpy(&head, mem, sizeof(head));
    39e4:	4629      	mov	r1, r5
    39e6:	eb0d 0002 	add.w	r0, sp, r2
    39ea:	f7fc fe16 	bl	61a <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    39ee:	9b01      	ldr	r3, [sp, #4]
		free_count--;
    39f0:	3c01      	subs	r4, #1
    39f2:	b2a4      	uxth	r4, r4
		if (head) {
    39f4:	b11b      	cbz	r3, 39fe <mem_acquire+0x2c>
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
    39f6:	1dda      	adds	r2, r3, #7
    39f8:	f022 0203 	bic.w	r2, r2, #3
    39fc:	8014      	strh	r4, [r2, #0]
				free_count;
		}

		*mem_head = head;
    39fe:	6033      	str	r3, [r6, #0]
		return mem;
	}

	return NULL;
}
    3a00:	4628      	mov	r0, r5
    3a02:	b002      	add	sp, #8
    3a04:	bd70      	pop	{r4, r5, r6, pc}

00003a06 <mem_release>:

void mem_release(void *mem, void **mem_head)
{
    3a06:	b570      	push	{r4, r5, r6, lr}
	u16_t free_count = 0;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    3a08:	680c      	ldr	r4, [r1, #0]
{
    3a0a:	4606      	mov	r6, r0
    3a0c:	460d      	mov	r5, r1
	if (*mem_head) {
    3a0e:	b11c      	cbz	r4, 3a18 <mem_release+0x12>
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    3a10:	1de3      	adds	r3, r4, #7
    3a12:	f023 0303 	bic.w	r3, r3, #3
    3a16:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
    3a18:	2204      	movs	r2, #4
    3a1a:	4629      	mov	r1, r5
    3a1c:	4630      	mov	r0, r6
    3a1e:	f7fc fdfc 	bl	61a <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    3a22:	1df2      	adds	r2, r6, #7
    3a24:	f022 0203 	bic.w	r2, r2, #3
	free_count++;
    3a28:	1c63      	adds	r3, r4, #1
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    3a2a:	8013      	strh	r3, [r2, #0]

	*mem_head = mem;
    3a2c:	602e      	str	r6, [r5, #0]
    3a2e:	bd70      	pop	{r4, r5, r6, pc}

00003a30 <mem_get>:
}

void *mem_get(void *mem_pool, u16_t mem_size, u16_t index)
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
}
    3a30:	fb02 0001 	mla	r0, r2, r1, r0
    3a34:	4770      	bx	lr

00003a36 <mem_index_get>:

u16_t mem_index_get(void *mem, void *mem_pool, u16_t mem_size)
{
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
    3a36:	1a40      	subs	r0, r0, r1
    3a38:	b280      	uxth	r0, r0
}
    3a3a:	fbb0 f0f2 	udiv	r0, r0, r2
    3a3e:	4770      	bx	lr

00003a40 <mem_rcopy>:

void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
    3a40:	b510      	push	{r4, lr}
	src += len;
    3a42:	4411      	add	r1, r2
    3a44:	3801      	subs	r0, #1
	while (len--) {
    3a46:	f64f 73ff 	movw	r3, #65535	; 0xffff
    3a4a:	3a01      	subs	r2, #1
    3a4c:	b292      	uxth	r2, r2
    3a4e:	429a      	cmp	r2, r3
    3a50:	d100      	bne.n	3a54 <mem_rcopy+0x14>
		*dst++ = *--src;
	}
}
    3a52:	bd10      	pop	{r4, pc}
		*dst++ = *--src;
    3a54:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
    3a58:	f800 4f01 	strb.w	r4, [r0, #1]!
    3a5c:	e7f5      	b.n	3a4a <mem_rcopy+0xa>

00003a5e <memq_init>:
inline memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem);

memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* head and tail pointer to the initial link */
	*head = *tail = link;
    3a5e:	6010      	str	r0, [r2, #0]
    3a60:	6008      	str	r0, [r1, #0]

	return link;
}
    3a62:	4770      	bx	lr

00003a64 <memq_enqueue>:

memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
    3a64:	b510      	push	{r4, lr}
	/* make the current tail link's next point to new link */
	(*tail)->next = link;
    3a66:	6814      	ldr	r4, [r2, #0]
    3a68:	6020      	str	r0, [r4, #0]

	/* assign mem to current tail link's mem */
	(*tail)->mem = mem;
    3a6a:	6814      	ldr	r4, [r2, #0]
    3a6c:	6061      	str	r1, [r4, #4]

	/* increment the tail! */
	*tail = link;
    3a6e:	6010      	str	r0, [r2, #0]

	return link;
}
    3a70:	bd10      	pop	{r4, pc}

00003a72 <memq_peek>:

memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* if head and tail are equal, then queue empty */
	if (head == tail) {
    3a72:	4288      	cmp	r0, r1
    3a74:	d003      	beq.n	3a7e <memq_peek+0xc>
		return NULL;
	}

	/* extract the link's mem */
	if (mem) {
    3a76:	b11a      	cbz	r2, 3a80 <memq_peek+0xe>
		*mem = head->mem;
    3a78:	6843      	ldr	r3, [r0, #4]
    3a7a:	6013      	str	r3, [r2, #0]
    3a7c:	4770      	bx	lr
		return NULL;
    3a7e:	2000      	movs	r0, #0
	}

	return head;
}
    3a80:	4770      	bx	lr

00003a82 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *link;

	/* use memq peek to get the link and mem */
	link = memq_peek(*head, tail, mem);
    3a82:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    3a84:	4283      	cmp	r3, r0
    3a86:	d009      	beq.n	3a9c <memq_dequeue+0x1a>
	if (mem) {
    3a88:	b122      	cbz	r2, 3a94 <memq_dequeue+0x12>
		*mem = head->mem;
    3a8a:	6858      	ldr	r0, [r3, #4]
    3a8c:	6010      	str	r0, [r2, #0]
	if (!link) {
		return link;
	}

	/* increment the head to next link node */
	*head = link->next;
    3a8e:	681a      	ldr	r2, [r3, #0]
    3a90:	600a      	str	r2, [r1, #0]

	return link;
    3a92:	e001      	b.n	3a98 <memq_dequeue+0x16>
	if (!link) {
    3a94:	2b00      	cmp	r3, #0
    3a96:	d1fa      	bne.n	3a8e <memq_dequeue+0xc>
}
    3a98:	4618      	mov	r0, r3
    3a9a:	4770      	bx	lr
		return NULL;
    3a9c:	2300      	movs	r3, #0
    3a9e:	e7fb      	b.n	3a98 <memq_dequeue+0x16>

00003aa0 <mayfly_init>:
} mft[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

static memq_link_t mfl[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

void mayfly_init(void)
{
    3aa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (callee_id--) {
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(&mfl[callee_id][caller_id],
    3aa4:	4f11      	ldr	r7, [pc, #68]	; (3aec <mayfly_init+0x4c>)
    3aa6:	f8df 9048 	ldr.w	r9, [pc, #72]	; 3af0 <mayfly_init+0x50>
	callee_id = MAYFLY_CALLEE_COUNT;
    3aaa:	2604      	movs	r6, #4
	while (callee_id--) {
    3aac:	3e01      	subs	r6, #1
    3aae:	b2f6      	uxtb	r6, r6
    3ab0:	2eff      	cmp	r6, #255	; 0xff
    3ab2:	d019      	beq.n	3ae8 <mayfly_init+0x48>
    3ab4:	b233      	sxth	r3, r6
    3ab6:	ea4f 0883 	mov.w	r8, r3, lsl #2
    3aba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3abe:	011d      	lsls	r5, r3, #4
    3ac0:	2404      	movs	r4, #4
    3ac2:	f04f 0a0c 	mov.w	sl, #12
    3ac6:	e00a      	b.n	3ade <mayfly_init+0x3e>
    3ac8:	fb1a 5104 	smlabb	r1, sl, r4, r5
			memq_init(&mfl[callee_id][caller_id],
    3acc:	1d0a      	adds	r2, r1, #4
    3ace:	eb04 0008 	add.w	r0, r4, r8
    3ad2:	443a      	add	r2, r7
    3ad4:	4439      	add	r1, r7
    3ad6:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
    3ada:	f7ff ffc0 	bl	3a5e <memq_init>
		while (caller_id--) {
    3ade:	3c01      	subs	r4, #1
    3ae0:	b2e4      	uxtb	r4, r4
    3ae2:	2cff      	cmp	r4, #255	; 0xff
    3ae4:	d1f0      	bne.n	3ac8 <mayfly_init+0x28>
    3ae6:	e7e1      	b.n	3aac <mayfly_init+0xc>
    3ae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3aec:	200008d0 	.word	0x200008d0
    3af0:	20000850 	.word	0x20000850

00003af4 <mayfly_enable>:
		}
	}
}

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
    3af4:	b4f0      	push	{r4, r5, r6, r7}
    3af6:	4b12      	ldr	r3, [pc, #72]	; (3b40 <mayfly_enable+0x4c>)
    3af8:	4605      	mov	r5, r0
    3afa:	460f      	mov	r7, r1
    3afc:	260c      	movs	r6, #12
    3afe:	2430      	movs	r4, #48	; 0x30
	if (enable) {
    3b00:	b172      	cbz	r2, 3b20 <mayfly_enable+0x2c>
		if (mft[callee_id][caller_id].enable_req ==
    3b02:	4361      	muls	r1, r4
    3b04:	fb06 1400 	mla	r4, r6, r0, r1
    3b08:	4423      	add	r3, r4
    3b0a:	7a59      	ldrb	r1, [r3, #9]
    3b0c:	7a18      	ldrb	r0, [r3, #8]
    3b0e:	4281      	cmp	r1, r0
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    3b10:	bf04      	itt	eq
    3b12:	3101      	addeq	r1, #1
    3b14:	7219      	strbeq	r1, [r3, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    3b16:	4628      	mov	r0, r5
    3b18:	4639      	mov	r1, r7
			mft[callee_id][caller_id].disable_req++;

			mayfly_pend(caller_id, callee_id);
		}
	}
}
    3b1a:	bcf0      	pop	{r4, r5, r6, r7}
		mayfly_enable_cb(caller_id, callee_id, enable);
    3b1c:	f007 bcd2 	b.w	b4c4 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
    3b20:	434c      	muls	r4, r1
    3b22:	fb06 4400 	mla	r4, r6, r0, r4
    3b26:	4423      	add	r3, r4
    3b28:	7a9c      	ldrb	r4, [r3, #10]
    3b2a:	7ada      	ldrb	r2, [r3, #11]
    3b2c:	42a2      	cmp	r2, r4
    3b2e:	d104      	bne.n	3b3a <mayfly_enable+0x46>
			mft[callee_id][caller_id].disable_req++;
    3b30:	3201      	adds	r2, #1
    3b32:	729a      	strb	r2, [r3, #10]
}
    3b34:	bcf0      	pop	{r4, r5, r6, r7}
			mayfly_pend(caller_id, callee_id);
    3b36:	f007 bd0d 	b.w	b554 <mayfly_pend>
}
    3b3a:	bcf0      	pop	{r4, r5, r6, r7}
    3b3c:	4770      	bx	lr
    3b3e:	bf00      	nop
    3b40:	200008d0 	.word	0x200008d0

00003b44 <mayfly_enqueue>:

u32_t mayfly_enqueue(u8_t caller_id, u8_t callee_id, u8_t chain,
			struct mayfly *m)
{
    3b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3b46:	4605      	mov	r5, r0
    3b48:	460e      	mov	r6, r1
    3b4a:	461c      	mov	r4, r3
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    3b4c:	b18a      	cbz	r2, 3b72 <mayfly_enqueue+0x2e>
    3b4e:	2301      	movs	r3, #1
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
    3b50:	7862      	ldrb	r2, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    3b52:	7820      	ldrb	r0, [r4, #0]
    3b54:	1a80      	subs	r0, r0, r2
	if (state != 0) {
    3b56:	f010 0703 	ands.w	r7, r0, #3
    3b5a:	d029      	beq.n	3bb0 <mayfly_enqueue+0x6c>
		if (chain) {
    3b5c:	b303      	cbz	r3, 3ba0 <mayfly_enqueue+0x5c>
			if (state != 1) {
    3b5e:	2f01      	cmp	r7, #1
    3b60:	d039      	beq.n	3bd6 <mayfly_enqueue+0x92>
				/* mark as ready in queue */
				m->_req = ack + 1;
    3b62:	3201      	adds	r2, #1
    3b64:	b2d2      	uxtb	r2, r2
    3b66:	7022      	strb	r2, [r4, #0]
	/* new, add as ready in the queue */
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    3b68:	4631      	mov	r1, r6
    3b6a:	4628      	mov	r0, r5
    3b6c:	f007 fcf2 	bl	b554 <mayfly_pend>
    3b70:	e01c      	b.n	3bac <mayfly_enqueue+0x68>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    3b72:	f007 fcdd 	bl	b530 <mayfly_prio_is_equal>
    3b76:	2800      	cmp	r0, #0
    3b78:	d0e9      	beq.n	3b4e <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
    3b7a:	4631      	mov	r1, r6
    3b7c:	4628      	mov	r0, r5
    3b7e:	f007 fcbd 	bl	b4fc <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    3b82:	2800      	cmp	r0, #0
    3b84:	d0e3      	beq.n	3b4e <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
    3b86:	2330      	movs	r3, #48	; 0x30
    3b88:	220c      	movs	r2, #12
    3b8a:	4373      	muls	r3, r6
    3b8c:	fb02 3305 	mla	r3, r2, r5, r3
    3b90:	4a12      	ldr	r2, [pc, #72]	; (3bdc <mayfly_enqueue+0x98>)
    3b92:	441a      	add	r2, r3
		!mayfly_is_enabled(caller_id, callee_id) ||
    3b94:	7a93      	ldrb	r3, [r2, #10]
    3b96:	7ad2      	ldrb	r2, [r2, #11]
    3b98:	1a9b      	subs	r3, r3, r2
    3b9a:	bf18      	it	ne
    3b9c:	2301      	movne	r3, #1
    3b9e:	e7d7      	b.n	3b50 <mayfly_enqueue+0xc>
		m->_req = ack + 2;
    3ba0:	3202      	adds	r2, #2
    3ba2:	b2d2      	uxtb	r2, r2
    3ba4:	7022      	strb	r2, [r4, #0]
		m->fp(m->param);
    3ba6:	68e3      	ldr	r3, [r4, #12]
    3ba8:	68a0      	ldr	r0, [r4, #8]
    3baa:	4798      	blx	r3
		return 0;
    3bac:	2000      	movs	r0, #0
    3bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!chain) {
    3bb0:	2b00      	cmp	r3, #0
    3bb2:	d0f8      	beq.n	3ba6 <mayfly_enqueue+0x62>
	m->_req = ack + 1;
    3bb4:	3201      	adds	r2, #1
    3bb6:	b2d2      	uxtb	r2, r2
    3bb8:	7022      	strb	r2, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    3bba:	2304      	movs	r3, #4
    3bbc:	2230      	movs	r2, #48	; 0x30
    3bbe:	fb12 3206 	smlabb	r2, r2, r6, r3
    3bc2:	230c      	movs	r3, #12
    3bc4:	fb13 2305 	smlabb	r3, r3, r5, r2
    3bc8:	4a04      	ldr	r2, [pc, #16]	; (3bdc <mayfly_enqueue+0x98>)
    3bca:	6860      	ldr	r0, [r4, #4]
    3bcc:	441a      	add	r2, r3
    3bce:	4621      	mov	r1, r4
    3bd0:	f7ff ff48 	bl	3a64 <memq_enqueue>
    3bd4:	e7c8      	b.n	3b68 <mayfly_enqueue+0x24>
			return 1;
    3bd6:	4638      	mov	r0, r7

	return 0;
}
    3bd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3bda:	bf00      	nop
    3bdc:	200008d0 	.word	0x200008d0

00003be0 <mayfly_run>:

void mayfly_run(u8_t callee_id)
{
    3be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3be4:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    3be8:	b089      	sub	sp, #36	; 0x24
    3bea:	011b      	lsls	r3, r3, #4
	u8_t disable = 0;
	u8_t enable = 0;
    3bec:	f04f 0800 	mov.w	r8, #0
	while (caller_id--) {
		memq_link_t *link;
		struct mayfly *m = 0;

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
    3bf0:	4e43      	ldr	r6, [pc, #268]	; (3d00 <mayfly_run+0x120>)
    3bf2:	9304      	str	r3, [sp, #16]
{
    3bf4:	4605      	mov	r5, r0
	caller_id = MAYFLY_CALLER_COUNT;
    3bf6:	2404      	movs	r4, #4
	u8_t disable = 0;
    3bf8:	f8cd 8004 	str.w	r8, [sp, #4]
	while (caller_id--) {
    3bfc:	3c01      	subs	r4, #1
    3bfe:	b2e4      	uxtb	r4, r4
    3c00:	2cff      	cmp	r4, #255	; 0xff
    3c02:	d10b      	bne.n	3c1c <mayfly_run+0x3c>
			mft[callee_id][caller_id].enable_ack =
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    3c04:	9b01      	ldr	r3, [sp, #4]
    3c06:	2b00      	cmp	r3, #0
    3c08:	d076      	beq.n	3cf8 <mayfly_run+0x118>
    3c0a:	f1b8 0f00 	cmp.w	r8, #0
    3c0e:	d173      	bne.n	3cf8 <mayfly_run+0x118>
		mayfly_enable_cb(callee_id, callee_id, 0);
    3c10:	4642      	mov	r2, r8
    3c12:	4629      	mov	r1, r5
    3c14:	4628      	mov	r0, r5
    3c16:	f007 fc55 	bl	b4c4 <mayfly_enable_cb>
    3c1a:	e06d      	b.n	3cf8 <mayfly_run+0x118>
		struct mayfly *m = 0;
    3c1c:	f10d 0b20 	add.w	fp, sp, #32
    3c20:	2300      	movs	r3, #0
		link = memq_peek(mft[callee_id][caller_id].head,
    3c22:	270c      	movs	r7, #12
		struct mayfly *m = 0;
    3c24:	f84b 3d04 	str.w	r3, [fp, #-4]!
		link = memq_peek(mft[callee_id][caller_id].head,
    3c28:	f04f 0930 	mov.w	r9, #48	; 0x30
    3c2c:	fb07 f304 	mul.w	r3, r7, r4
    3c30:	fb09 3005 	mla	r0, r9, r5, r3
    3c34:	1831      	adds	r1, r6, r0
    3c36:	465a      	mov	r2, fp
    3c38:	6849      	ldr	r1, [r1, #4]
    3c3a:	5830      	ldr	r0, [r6, r0]
    3c3c:	9302      	str	r3, [sp, #8]
    3c3e:	f7ff ff18 	bl	3a72 <memq_peek>
				memq_dequeue(mft[callee_id][caller_id].tail,
    3c42:	9b04      	ldr	r3, [sp, #16]
    3c44:	fb17 3704 	smlabb	r7, r7, r4, r3
    3c48:	19f3      	adds	r3, r6, r7
		link = memq_peek(mft[callee_id][caller_id].head,
    3c4a:	4682      	mov	sl, r0
				memq_dequeue(mft[callee_id][caller_id].tail,
    3c4c:	9303      	str	r3, [sp, #12]
		while (link) {
    3c4e:	f1ba 0f00 	cmp.w	sl, #0
    3c52:	d119      	bne.n	3c88 <mayfly_run+0xa8>
		if (mft[callee_id][caller_id].disable_req !=
    3c54:	2230      	movs	r2, #48	; 0x30
    3c56:	230c      	movs	r3, #12
    3c58:	436a      	muls	r2, r5
    3c5a:	fb03 2204 	mla	r2, r3, r4, r2
    3c5e:	4432      	add	r2, r6
    3c60:	7a91      	ldrb	r1, [r2, #10]
    3c62:	7ad0      	ldrb	r0, [r2, #11]
    3c64:	4288      	cmp	r0, r1
			mft[callee_id][caller_id].disable_ack =
    3c66:	bf1e      	ittt	ne
    3c68:	72d1      	strbne	r1, [r2, #11]
			disable = 1;
    3c6a:	2201      	movne	r2, #1
    3c6c:	9201      	strne	r2, [sp, #4]
		if (mft[callee_id][caller_id].enable_req !=
    3c6e:	2230      	movs	r2, #48	; 0x30
    3c70:	436a      	muls	r2, r5
    3c72:	fb03 2304 	mla	r3, r3, r4, r2
    3c76:	4433      	add	r3, r6
    3c78:	7a1a      	ldrb	r2, [r3, #8]
    3c7a:	7a59      	ldrb	r1, [r3, #9]
    3c7c:	4291      	cmp	r1, r2
			mft[callee_id][caller_id].enable_ack =
    3c7e:	bf1c      	itt	ne
    3c80:	725a      	strbne	r2, [r3, #9]
			enable = 1;
    3c82:	f04f 0801 	movne.w	r8, #1
    3c86:	e7b9      	b.n	3bfc <mayfly_run+0x1c>
			req = m->_req;
    3c88:	9b07      	ldr	r3, [sp, #28]
    3c8a:	781f      	ldrb	r7, [r3, #0]
			state = (req - m->_ack) & 0x03;
    3c8c:	785a      	ldrb	r2, [r3, #1]
    3c8e:	1abf      	subs	r7, r7, r2
    3c90:	f007 0703 	and.w	r7, r7, #3
			if (state == 1) {
    3c94:	2f01      	cmp	r7, #1
    3c96:	d104      	bne.n	3ca2 <mayfly_run+0xc2>
				m->_ack--;
    3c98:	3a01      	subs	r2, #1
    3c9a:	705a      	strb	r2, [r3, #1]
				m->fp(m->param);
    3c9c:	6898      	ldr	r0, [r3, #8]
    3c9e:	68da      	ldr	r2, [r3, #12]
    3ca0:	4790      	blx	r2
			req = m->_req;
    3ca2:	9a07      	ldr	r2, [sp, #28]
    3ca4:	7813      	ldrb	r3, [r2, #0]
			if (((req - m->_ack) & 0x03) != 1) {
    3ca6:	7852      	ldrb	r2, [r2, #1]
			req = m->_req;
    3ca8:	b2db      	uxtb	r3, r3
			if (((req - m->_ack) & 0x03) != 1) {
    3caa:	1a9a      	subs	r2, r3, r2
    3cac:	f002 0203 	and.w	r2, r2, #3
    3cb0:	2a01      	cmp	r2, #1
    3cb2:	9305      	str	r3, [sp, #20]
    3cb4:	d00d      	beq.n	3cd2 <mayfly_run+0xf2>
				memq_dequeue(mft[callee_id][caller_id].tail,
    3cb6:	9b02      	ldr	r3, [sp, #8]
    3cb8:	9903      	ldr	r1, [sp, #12]
    3cba:	fb09 3005 	mla	r0, r9, r5, r3
    3cbe:	4430      	add	r0, r6
    3cc0:	2200      	movs	r2, #0
    3cc2:	6840      	ldr	r0, [r0, #4]
    3cc4:	f7ff fedd 	bl	3a82 <memq_dequeue>
				m->_link = link;
    3cc8:	9a07      	ldr	r2, [sp, #28]
				m->_ack = req;
    3cca:	9b05      	ldr	r3, [sp, #20]
				m->_link = link;
    3ccc:	f8c2 a004 	str.w	sl, [r2, #4]
				m->_ack = req;
    3cd0:	7053      	strb	r3, [r2, #1]
			link = memq_peek(mft[callee_id][caller_id].head,
    3cd2:	9b02      	ldr	r3, [sp, #8]
    3cd4:	fb09 3305 	mla	r3, r9, r5, r3
    3cd8:	18f1      	adds	r1, r6, r3
    3cda:	465a      	mov	r2, fp
    3cdc:	6849      	ldr	r1, [r1, #4]
    3cde:	58f0      	ldr	r0, [r6, r3]
    3ce0:	f7ff fec7 	bl	3a72 <memq_peek>
			if (state == 1) {
    3ce4:	2f01      	cmp	r7, #1
			link = memq_peek(mft[callee_id][caller_id].head,
    3ce6:	4682      	mov	sl, r0
			if (state == 1) {
    3ce8:	d1b1      	bne.n	3c4e <mayfly_run+0x6e>
				if (caller_id || link) {
    3cea:	b90c      	cbnz	r4, 3cf0 <mayfly_run+0x110>
    3cec:	2800      	cmp	r0, #0
    3cee:	d0b1      	beq.n	3c54 <mayfly_run+0x74>
					mayfly_pend(callee_id, callee_id);
    3cf0:	4629      	mov	r1, r5
    3cf2:	4628      	mov	r0, r5
    3cf4:	f007 fc2e 	bl	b554 <mayfly_pend>
	}
}
    3cf8:	b009      	add	sp, #36	; 0x24
    3cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3cfe:	bf00      	nop
    3d00:	200008d0 	.word	0x200008d0

00003d04 <util_ones_count_get>:

#include <zephyr/types.h>
#include "util.h"

u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
    3d04:	b510      	push	{r4, lr}
    3d06:	1e42      	subs	r2, r0, #1
	u8_t one_count = 0;
    3d08:	2000      	movs	r0, #0

	while (octets_len--) {
    3d0a:	3901      	subs	r1, #1
    3d0c:	b2c9      	uxtb	r1, r1
    3d0e:	29ff      	cmp	r1, #255	; 0xff
    3d10:	d100      	bne.n	3d14 <util_ones_count_get+0x10>
		}
		octets++;
	}

	return one_count;
}
    3d12:	bd10      	pop	{r4, pc}
		bite = *octets;
    3d14:	f812 3f01 	ldrb.w	r3, [r2, #1]!
		while (bite) {
    3d18:	2b00      	cmp	r3, #0
    3d1a:	d0f6      	beq.n	3d0a <util_ones_count_get+0x6>
			bite &= (bite - 1);
    3d1c:	1e5c      	subs	r4, r3, #1
			one_count++;
    3d1e:	3001      	adds	r0, #1
			bite &= (bite - 1);
    3d20:	4023      	ands	r3, r4
			one_count++;
    3d22:	b2c0      	uxtb	r0, r0
    3d24:	e7f8      	b.n	3d18 <util_ones_count_get+0x14>

00003d26 <ticker_dequeue>:

	return id;
}

static u32_t ticker_dequeue(struct ticker_instance *instance, u8_t id)
{
    3d26:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t current;
	u32_t total;

	/* find the ticker's position in ticker list */
	node = &instance->node[0];
	previous = instance->ticker_id_head;
    3d28:	7f43      	ldrb	r3, [r0, #29]
	node = &instance->node[0];
    3d2a:	6805      	ldr	r5, [r0, #0]
	current = previous;
    3d2c:	461a      	mov	r2, r3
	total = 0;
    3d2e:	2400      	movs	r4, #0
	ticker_current = 0;
	while (current != TICKER_NULL) {
    3d30:	2aff      	cmp	r2, #255	; 0xff
    3d32:	d101      	bne.n	3d38 <ticker_dequeue+0x12>
		current = ticker_current->next;
	}

	/* ticker not in active list */
	if (current == TICKER_NULL) {
		return 0;
    3d34:	2000      	movs	r0, #0
    3d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ticker_current = &node[current];
    3d38:	eb02 0782 	add.w	r7, r2, r2, lsl #2
		if (current == id) {
    3d3c:	428a      	cmp	r2, r1
		ticker_current = &node[current];
    3d3e:	eb05 06c7 	add.w	r6, r5, r7, lsl #3
    3d42:	f815 7037 	ldrb.w	r7, [r5, r7, lsl #3]
		if (current == id) {
    3d46:	d004      	beq.n	3d52 <ticker_dequeue+0x2c>
		total += ticker_current->ticks_to_expire;
    3d48:	68b3      	ldr	r3, [r6, #8]
    3d4a:	441c      	add	r4, r3
		current = ticker_current->next;
    3d4c:	4613      	mov	r3, r2
    3d4e:	463a      	mov	r2, r7
    3d50:	e7ee      	b.n	3d30 <ticker_dequeue+0xa>
	}

	/* ticker is the first in the list */
	if (previous == current) {
    3d52:	4293      	cmp	r3, r2
    3d54:	d100      	bne.n	3d58 <ticker_dequeue+0x32>
		instance->ticker_id_head = ticker_current->next;
    3d56:	7747      	strb	r7, [r0, #29]
	timeout = ticker_current->ticks_to_expire;

	/* link previous ticker with next of this ticker
	 * i.e. removing the ticker from list
	 */
	node[previous].next = ticker_current->next;
    3d58:	b21b      	sxth	r3, r3
    3d5a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3d5e:	7832      	ldrb	r2, [r6, #0]
	timeout = ticker_current->ticks_to_expire;
    3d60:	68b0      	ldr	r0, [r6, #8]
	node[previous].next = ticker_current->next;
    3d62:	f805 2033 	strb.w	r2, [r5, r3, lsl #3]

	/* if this is not the last ticker, increment the
	 * next ticker by this ticker timeout
	 */
	if (ticker_current->next != TICKER_NULL) {
    3d66:	7833      	ldrb	r3, [r6, #0]
    3d68:	2bff      	cmp	r3, #255	; 0xff
    3d6a:	d006      	beq.n	3d7a <ticker_dequeue+0x54>
		node[ticker_current->next].ticks_to_expire += timeout;
    3d6c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3d70:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    3d74:	689a      	ldr	r2, [r3, #8]
    3d76:	4402      	add	r2, r0
    3d78:	609a      	str	r2, [r3, #8]
	}

	return (total + timeout);
    3d7a:	4420      	add	r0, r4
    3d7c:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003d7e <ticks_to_expire_prep>:
			   instance);
}

static void ticks_to_expire_prep(struct ticker_node *ticker,
				 u32_t ticks_current, u32_t ticks_at_start)
{
    3d7e:	b530      	push	{r4, r5, lr}
	u32_t ticks_to_expire = ticker->ticks_to_expire;
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    3d80:	1a55      	subs	r5, r2, r1
    3d82:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
	u32_t ticks_to_expire = ticker->ticks_to_expire;
    3d86:	6883      	ldr	r3, [r0, #8]
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
    3d88:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    3d8a:	d109      	bne.n	3da0 <ticks_to_expire_prep+0x22>
	return cntr_cnt_get();
}

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    3d8c:	f025 427f 	bic.w	r2, r5, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    3d90:	441a      	add	r2, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
    3d92:	42a2      	cmp	r2, r4
    3d94:	d90e      	bls.n	3db4 <ticks_to_expire_prep+0x36>
		ticks_to_expire -= ticks_to_expire_minus;
    3d96:	1b12      	subs	r2, r2, r4
		ticks_to_expire_minus = 0;
    3d98:	2400      	movs	r4, #0
	ticker->ticks_to_expire = ticks_to_expire;
    3d9a:	6082      	str	r2, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    3d9c:	6144      	str	r4, [r0, #20]
    3d9e:	bd30      	pop	{r4, r5, pc}
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    3da0:	1a8a      	subs	r2, r1, r2
    3da2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    3da6:	4293      	cmp	r3, r2
    3da8:	d901      	bls.n	3dae <ticks_to_expire_prep+0x30>
			ticks_to_expire -= delta_current_start;
    3daa:	1a9a      	subs	r2, r3, r2
    3dac:	e7f1      	b.n	3d92 <ticks_to_expire_prep+0x14>
    3dae:	4422      	add	r2, r4
			ticks_to_expire_minus +=
    3db0:	1ad4      	subs	r4, r2, r3
			ticks_to_expire = 0;
    3db2:	2200      	movs	r2, #0
		ticks_to_expire_minus -= ticks_to_expire;
    3db4:	1aa4      	subs	r4, r4, r2
		ticks_to_expire = 0;
    3db6:	2200      	movs	r2, #0
    3db8:	e7ef      	b.n	3d9a <ticks_to_expire_prep+0x1c>

00003dba <ticker_job_op_cb>:
{
    3dba:	4603      	mov	r3, r0
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    3dbc:	2200      	movs	r2, #0
    3dbe:	701a      	strb	r2, [r3, #0]
	if (user_op->fp_op_func) {
    3dc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	user_op->status = status;
    3dc2:	6259      	str	r1, [r3, #36]	; 0x24
{
    3dc4:	4608      	mov	r0, r1
	if (user_op->fp_op_func) {
    3dc6:	b10a      	cbz	r2, 3dcc <ticker_job_op_cb+0x12>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    3dc8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    3dca:	4710      	bx	r2
    3dcc:	4770      	bx	lr

00003dce <ticker_worker>:
{
    3dce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (instance->job_guard) {
    3dd2:	7f85      	ldrb	r5, [r0, #30]
	instance->worker_trigger = 1;
    3dd4:	2301      	movs	r3, #1
{
    3dd6:	4604      	mov	r4, r0
	instance->worker_trigger = 1;
    3dd8:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
    3dda:	2d00      	cmp	r5, #0
    3ddc:	d14c      	bne.n	3e78 <ticker_worker+0xaa>
	if (instance->ticker_id_head == TICKER_NULL) {
    3dde:	7f43      	ldrb	r3, [r0, #29]
    3de0:	2bff      	cmp	r3, #255	; 0xff
    3de2:	d102      	bne.n	3dea <ticker_worker+0x1c>
		instance->worker_trigger = 0;
    3de4:	77c5      	strb	r5, [r0, #31]
		return;
    3de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
    3dea:	f006 ff13 	bl	ac14 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    3dee:	6967      	ldr	r7, [r4, #20]
	ticker_id_head = instance->ticker_id_head;
    3df0:	7f66      	ldrb	r6, [r4, #29]
	node = &instance->node[0];
    3df2:	f8d4 8000 	ldr.w	r8, [r4]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    3df6:	1bc7      	subs	r7, r0, r7
    3df8:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
	while (ticker_id_head != TICKER_NULL) {
    3dfc:	2eff      	cmp	r6, #255	; 0xff
    3dfe:	d006      	beq.n	3e0e <ticker_worker+0x40>
		ticker = &node[ticker_id_head];
    3e00:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    3e04:	eb08 01c6 	add.w	r1, r8, r6, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    3e08:	688b      	ldr	r3, [r1, #8]
		if (ticks_elapsed < ticks_to_expire) {
    3e0a:	429f      	cmp	r7, r3
    3e0c:	d218      	bcs.n	3e40 <ticker_worker+0x72>
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
    3e0e:	7aa2      	ldrb	r2, [r4, #10]
    3e10:	7ae3      	ldrb	r3, [r4, #11]
    3e12:	4293      	cmp	r3, r2
    3e14:	d105      	bne.n	3e22 <ticker_worker+0x54>
		last = instance->ticks_elapsed_last + 1;
    3e16:	3301      	adds	r3, #1
    3e18:	b2db      	uxtb	r3, r3
			last = 0;
    3e1a:	2b02      	cmp	r3, #2
    3e1c:	bf08      	it	eq
    3e1e:	2300      	moveq	r3, #0
		instance->ticks_elapsed_last = last;
    3e20:	72e3      	strb	r3, [r4, #11]
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    3e22:	7ae3      	ldrb	r3, [r4, #11]
    3e24:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    3e28:	2201      	movs	r2, #1
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    3e2a:	60dd      	str	r5, [r3, #12]
	instance->worker_trigger = 0;
    3e2c:	2300      	movs	r3, #0
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    3e2e:	6a65      	ldr	r5, [r4, #36]	; 0x24
	instance->worker_trigger = 0;
    3e30:	77e3      	strb	r3, [r4, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    3e32:	46ac      	mov	ip, r5
    3e34:	4623      	mov	r3, r4
    3e36:	2104      	movs	r1, #4
    3e38:	2003      	movs	r0, #3
}
    3e3a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    3e3e:	4760      	bx	ip
		ticks_elapsed -= ticks_to_expire;
    3e40:	1aff      	subs	r7, r7, r3
		ticks_expired += ticks_to_expire;
    3e42:	441d      	add	r5, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    3e44:	788a      	ldrb	r2, [r1, #2]
    3e46:	784b      	ldrb	r3, [r1, #1]
		ticker_id_head = ticker->next;
    3e48:	f818 6036 	ldrb.w	r6, [r8, r6, lsl #3]
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    3e4c:	1a9b      	subs	r3, r3, r2
    3e4e:	b2db      	uxtb	r3, r3
    3e50:	2b01      	cmp	r3, #1
    3e52:	d1d3      	bne.n	3dfc <ticker_worker+0x2e>
		if (ticker->timeout_func) {
    3e54:	f8d1 900c 	ldr.w	r9, [r1, #12]
		ticker->ack--;
    3e58:	3a01      	subs	r2, #1
    3e5a:	708a      	strb	r2, [r1, #2]
		if (ticker->timeout_func) {
    3e5c:	f1b9 0f00 	cmp.w	r9, #0
    3e60:	d0cc      	beq.n	3dfc <ticker_worker+0x2e>
					   ticks_expired -
    3e62:	6948      	ldr	r0, [r1, #20]
    3e64:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
    3e66:	8bca      	ldrh	r2, [r1, #30]
					   ticks_expired -
    3e68:	1a28      	subs	r0, r5, r0
    3e6a:	4418      	add	r0, r3
			ticker->timeout_func(ticks_at_expire,
    3e6c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3e70:	690b      	ldr	r3, [r1, #16]
    3e72:	6a49      	ldr	r1, [r1, #36]	; 0x24
    3e74:	47c8      	blx	r9
    3e76:	e7c1      	b.n	3dfc <ticker_worker+0x2e>
    3e78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00003e7c <ticker_job>:
{
    3e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->worker_trigger) {
    3e80:	7fc2      	ldrb	r2, [r0, #31]
{
    3e82:	b093      	sub	sp, #76	; 0x4c
    3e84:	4683      	mov	fp, r0
	if (instance->worker_trigger) {
    3e86:	2a00      	cmp	r2, #0
    3e88:	f040 83ba 	bne.w	4600 <ticker_job+0x784>
	ticks_previous = instance->ticks_current;
    3e8c:	6943      	ldr	r3, [r0, #20]
    3e8e:	9305      	str	r3, [sp, #20]
	instance->job_guard = 1;
    3e90:	2101      	movs	r1, #1
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    3e92:	7a83      	ldrb	r3, [r0, #10]
	instance->job_guard = 1;
    3e94:	7781      	strb	r1, [r0, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    3e96:	7ac0      	ldrb	r0, [r0, #11]
    3e98:	4298      	cmp	r0, r3
    3e9a:	f000 808f 	beq.w	3fbc <ticker_job+0x140>
		first = instance->ticks_elapsed_first + 1;
    3e9e:	440b      	add	r3, r1
    3ea0:	b2db      	uxtb	r3, r3
			first = 0;
    3ea2:	2b02      	cmp	r3, #2
    3ea4:	bf08      	it	eq
    3ea6:	2300      	moveq	r3, #0
		instance->ticks_elapsed_first = first;
    3ea8:	f88b 300a 	strb.w	r3, [fp, #10]
		ticks_elapsed =
    3eac:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
		flag_elapsed = 1;
    3eb0:	9101      	str	r1, [sp, #4]
		ticks_elapsed =
    3eb2:	f8d3 800c 	ldr.w	r8, [r3, #12]
		instance->ticks_current += ticks_elapsed;
    3eb6:	9b05      	ldr	r3, [sp, #20]
    3eb8:	4443      	add	r3, r8
		instance->ticks_current &= 0x00FFFFFF;
    3eba:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    3ebe:	f8cb 3014 	str.w	r3, [fp, #20]
	ticker_id_old_head = instance->ticker_id_head;
    3ec2:	f89b 301d 	ldrb.w	r3, [fp, #29]
    3ec6:	9303      	str	r3, [sp, #12]
	node = &instance->node[0];
    3ec8:	f8db 3000 	ldr.w	r3, [fp]
    3ecc:	9304      	str	r3, [sp, #16]
	users = &instance->user[0];
    3ece:	f8db 3004 	ldr.w	r3, [fp, #4]
    3ed2:	930b      	str	r3, [sp, #44]	; 0x2c
    3ed4:	f89b 3009 	ldrb.w	r3, [fp, #9]
    3ed8:	3b01      	subs	r3, #1
    3eda:	b2db      	uxtb	r3, r3
    3edc:	9302      	str	r3, [sp, #8]
	pending = 0;
    3ede:	2300      	movs	r3, #0
    3ee0:	9307      	str	r3, [sp, #28]
	insert_head = TICKER_NULL;
    3ee2:	f04f 0aff 	mov.w	sl, #255	; 0xff
	while (count_user--) {
    3ee6:	9b02      	ldr	r3, [sp, #8]
    3ee8:	2bff      	cmp	r3, #255	; 0xff
    3eea:	d16a      	bne.n	3fc2 <ticker_job+0x146>
	if (instance->ticker_id_head != ticker_id_old_head) {
    3eec:	f89b 301d 	ldrb.w	r3, [fp, #29]
	flag_compare_update = 0;
    3ef0:	9a03      	ldr	r2, [sp, #12]
    3ef2:	1a9b      	subs	r3, r3, r2
    3ef4:	bf18      	it	ne
    3ef6:	2301      	movne	r3, #1
    3ef8:	9302      	str	r3, [sp, #8]
	if (flag_elapsed) {
    3efa:	9b01      	ldr	r3, [sp, #4]
    3efc:	b1e3      	cbz	r3, 3f38 <ticker_job+0xbc>
	node = &instance->node[0];
    3efe:	f8db 3000 	ldr.w	r3, [fp]
    3f02:	9304      	str	r3, [sp, #16]
	ticks_expired = 0;
    3f04:	f04f 0900 	mov.w	r9, #0
	while (instance->ticker_id_head != TICKER_NULL) {
    3f08:	f89b 601d 	ldrb.w	r6, [fp, #29]
    3f0c:	2eff      	cmp	r6, #255	; 0xff
    3f0e:	d00c      	beq.n	3f2a <ticker_job+0xae>
		ticker = &node[id_expired];
    3f10:	b237      	sxth	r7, r6
    3f12:	9b04      	ldr	r3, [sp, #16]
    3f14:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    3f18:	eb03 04c7 	add.w	r4, r3, r7, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    3f1c:	68a5      	ldr	r5, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    3f1e:	4545      	cmp	r5, r8
    3f20:	f240 8136 	bls.w	4190 <ticker_job+0x314>
			ticker->ticks_to_expire -= ticks_elapsed;
    3f24:	eba5 0508 	sub.w	r5, r5, r8
    3f28:	60a5      	str	r5, [r4, #8]
			flag_compare_update = 1;
    3f2a:	9b02      	ldr	r3, [sp, #8]
    3f2c:	9a01      	ldr	r2, [sp, #4]
    3f2e:	9903      	ldr	r1, [sp, #12]
    3f30:	42b1      	cmp	r1, r6
    3f32:	bf18      	it	ne
    3f34:	4613      	movne	r3, r2
    3f36:	9302      	str	r3, [sp, #8]
	node = &instance->node[0];
    3f38:	f8db 3000 	ldr.w	r3, [fp]
    3f3c:	9308      	str	r3, [sp, #32]
	users = &instance->user[0];
    3f3e:	f8db 3004 	ldr.w	r3, [fp, #4]
    3f42:	9310      	str	r3, [sp, #64]	; 0x40
    3f44:	f89b 3009 	ldrb.w	r3, [fp, #9]
    3f48:	3b01      	subs	r3, #1
    3f4a:	b2db      	uxtb	r3, r3
    3f4c:	9301      	str	r3, [sp, #4]
	while (count_user--) {
    3f4e:	9b01      	ldr	r3, [sp, #4]
    3f50:	2bff      	cmp	r3, #255	; 0xff
    3f52:	f040 8170 	bne.w	4236 <ticker_job+0x3ba>
	if (instance->ticker_id_head != ticker_id_old_head) {
    3f56:	f89b 301d 	ldrb.w	r3, [fp, #29]
    3f5a:	9a03      	ldr	r2, [sp, #12]
    3f5c:	4293      	cmp	r3, r2
	if (!pending) {
    3f5e:	9b07      	ldr	r3, [sp, #28]
	if (instance->ticker_id_head != ticker_id_old_head) {
    3f60:	f040 8345 	bne.w	45ee <ticker_job+0x772>
	if (!pending) {
    3f64:	b95b      	cbnz	r3, 3f7e <ticker_job+0x102>
    3f66:	f89b 4009 	ldrb.w	r4, [fp, #9]
	users = &instance->user[0];
    3f6a:	f8db 3004 	ldr.w	r3, [fp, #4]
    3f6e:	9301      	str	r3, [sp, #4]
    3f70:	3c01      	subs	r4, #1
    3f72:	b2e4      	uxtb	r4, r4
		uop->status = TICKER_STATUS_SUCCESS;
    3f74:	f04f 0800 	mov.w	r8, #0
	while (count_user--) {
    3f78:	2cff      	cmp	r4, #255	; 0xff
    3f7a:	f040 82a0 	bne.w	44be <ticker_job+0x642>
	instance->job_guard = 0;
    3f7e:	2300      	movs	r3, #0
    3f80:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
    3f84:	9b02      	ldr	r3, [sp, #8]
    3f86:	b14b      	cbz	r3, 3f9c <ticker_job+0x120>
	if (instance->ticker_id_head == TICKER_NULL) {
    3f88:	f89b 301d 	ldrb.w	r3, [fp, #29]
    3f8c:	2bff      	cmp	r3, #255	; 0xff
    3f8e:	f040 82e9 	bne.w	4564 <ticker_job+0x6e8>
		if (cntr_stop() == 0) {
    3f92:	f006 fe1d 	bl	abd0 <cntr_stop>
    3f96:	b908      	cbnz	r0, 3f9c <ticker_job+0x120>
			instance->ticks_slot_previous = 0;
    3f98:	f8cb 0018 	str.w	r0, [fp, #24]
	if (instance->worker_trigger) {
    3f9c:	f89b 301f 	ldrb.w	r3, [fp, #31]
    3fa0:	2b00      	cmp	r3, #0
    3fa2:	f000 832d 	beq.w	4600 <ticker_job+0x784>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    3fa6:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    3faa:	465b      	mov	r3, fp
    3fac:	2201      	movs	r2, #1
    3fae:	2103      	movs	r1, #3
    3fb0:	2004      	movs	r0, #4
    3fb2:	46a4      	mov	ip, r4
}
    3fb4:	b013      	add	sp, #76	; 0x4c
    3fb6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    3fba:	4760      	bx	ip
		flag_elapsed = 0;
    3fbc:	9201      	str	r2, [sp, #4]
		ticks_elapsed = 0;
    3fbe:	4690      	mov	r8, r2
    3fc0:	e77f      	b.n	3ec2 <ticker_job+0x46>
		user = &users[count_user];
    3fc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3fc4:	9a02      	ldr	r2, [sp, #8]
    3fc6:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
		user_ops = &user->user_op[0];
    3fca:	687b      	ldr	r3, [r7, #4]
    3fcc:	9306      	str	r3, [sp, #24]
		while (user->middle != user->last) {
    3fce:	78f9      	ldrb	r1, [r7, #3]
    3fd0:	78be      	ldrb	r6, [r7, #2]
    3fd2:	428e      	cmp	r6, r1
    3fd4:	f000 80d7 	beq.w	4186 <ticker_job+0x30a>
			user_op = &user_ops[user->middle];
    3fd8:	9b06      	ldr	r3, [sp, #24]
			if (middle == user->count_user_op) {
    3fda:	7838      	ldrb	r0, [r7, #0]
			user_op = &user_ops[user->middle];
    3fdc:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    3fe0:	0112      	lsls	r2, r2, #4
    3fe2:	189d      	adds	r5, r3, r2
			middle = user->middle + 1;
    3fe4:	1c73      	adds	r3, r6, #1
    3fe6:	b2db      	uxtb	r3, r3
				middle = 0;
    3fe8:	4298      	cmp	r0, r3
    3fea:	bf08      	it	eq
    3fec:	2300      	moveq	r3, #0
			user->middle = middle;
    3fee:	70bb      	strb	r3, [r7, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    3ff0:	9b06      	ldr	r3, [sp, #24]
    3ff2:	5c9a      	ldrb	r2, [r3, r2]
    3ff4:	2a03      	cmp	r2, #3
    3ff6:	d9eb      	bls.n	3fd0 <ticker_job+0x154>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    3ff8:	2a05      	cmp	r2, #5
    3ffa:	d817      	bhi.n	402c <ticker_job+0x1b0>
			ticker = &node[user_op->id];
    3ffc:	7869      	ldrb	r1, [r5, #1]
    3ffe:	eb01 0381 	add.w	r3, r1, r1, lsl #2
    4002:	930a      	str	r3, [sp, #40]	; 0x28
    4004:	980a      	ldr	r0, [sp, #40]	; 0x28
    4006:	9b04      	ldr	r3, [sp, #16]
    4008:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
			state = (ticker->req - ticker->ack) & 0xff;
    400c:	7863      	ldrb	r3, [r4, #1]
    400e:	78a0      	ldrb	r0, [r4, #2]
    4010:	1a1b      	subs	r3, r3, r0
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    4012:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    4016:	d009      	beq.n	402c <ticker_job+0x1b0>
			    (state == 0) ||
    4018:	2a04      	cmp	r2, #4
    401a:	d10c      	bne.n	4036 <ticker_job+0x1ba>
			     (user_op->params.update.ticks_drift_plus == 0) &&
    401c:	686a      	ldr	r2, [r5, #4]
    401e:	b952      	cbnz	r2, 4036 <ticker_job+0x1ba>
			     (user_op->params.update.ticks_slot_plus == 0) &&
    4020:	68aa      	ldr	r2, [r5, #8]
    4022:	b942      	cbnz	r2, 4036 <ticker_job+0x1ba>
			     (user_op->params.update.lazy == 0) &&
    4024:	68ea      	ldr	r2, [r5, #12]
    4026:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    402a:	d104      	bne.n	4036 <ticker_job+0x1ba>
				ticker_job_op_cb(user_op,
    402c:	2101      	movs	r1, #1
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    402e:	4628      	mov	r0, r5
    4030:	f7ff fec3 	bl	3dba <ticker_job_op_cb>
    4034:	e7cb      	b.n	3fce <ticker_job+0x152>
			if (state == 1) {
    4036:	2b01      	cmp	r3, #1
    4038:	f040 809b 	bne.w	4172 <ticker_job+0x2f6>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    403c:	4658      	mov	r0, fp
    403e:	f7ff fe72 	bl	3d26 <ticker_dequeue>
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    4042:	782b      	ldrb	r3, [r5, #0]
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    4044:	60a0      	str	r0, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    4046:	2b04      	cmp	r3, #4
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    4048:	4606      	mov	r6, r0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    404a:	f040 8084 	bne.w	4156 <ticker_job+0x2da>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    404e:	f8db 3014 	ldr.w	r3, [fp, #20]
    4052:	9308      	str	r3, [sp, #32]
	ticks_now = cntr_cnt_get();
    4054:	f006 fdde 	bl	ac14 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    4058:	9b08      	ldr	r3, [sp, #32]
	ticks_now = cntr_cnt_get();
    405a:	9009      	str	r0, [sp, #36]	; 0x24
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    405c:	1ac3      	subs	r3, r0, r3
    405e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    4062:	4443      	add	r3, r8
	if (ticks_to_expire > ticks_elapsed) {
    4064:	429e      	cmp	r6, r3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    4066:	4602      	mov	r2, r0
		ticker->ticks_to_expire_minus += ticks_elapsed -
    4068:	bf9e      	ittt	ls
    406a:	6962      	ldrls	r2, [r4, #20]
    406c:	1b92      	subls	r2, r2, r6
    406e:	189b      	addls	r3, r3, r2
	if ((ticker->ticks_periodic != 0) &&
    4070:	6862      	ldr	r2, [r4, #4]
		ticker->ticks_to_expire_minus += ticks_elapsed -
    4072:	bf96      	itet	ls
    4074:	6163      	strls	r3, [r4, #20]
		ticks_to_expire -= ticks_elapsed;
    4076:	1af3      	subhi	r3, r6, r3
		ticks_to_expire = 0;
    4078:	2300      	movls	r3, #0
	if ((ticker->ticks_periodic != 0) &&
    407a:	b18a      	cbz	r2, 40a0 <ticker_job+0x224>
	    (user_op->params.update.lazy != 0)) {
    407c:	89a9      	ldrh	r1, [r5, #12]
	if ((ticker->ticks_periodic != 0) &&
    407e:	b179      	cbz	r1, 40a0 <ticker_job+0x224>
		user_op->params.update.lazy--;
    4080:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
    4084:	fa1f fe8e 	uxth.w	lr, lr
    4088:	f8a5 e00c 	strh.w	lr, [r5, #12]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    408c:	429a      	cmp	r2, r3
    408e:	d32b      	bcc.n	40e8 <ticker_job+0x26c>
		ticker->remainder_current -= 30517578UL;
    4090:	f8df 9324 	ldr.w	r9, [pc, #804]	; 43b8 <ticker_job+0x53c>
		while (ticker->lazy_current < user_op->params.update.lazy) {
    4094:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    4098:	45e6      	cmp	lr, ip
    409a:	d847      	bhi.n	412c <ticker_job+0x2b0>
		ticker->lazy_periodic = user_op->params.update.lazy;
    409c:	f8a4 e01c 	strh.w	lr, [r4, #28]
				  user_op->params.update.ticks_drift_plus;
    40a0:	88aa      	ldrh	r2, [r5, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    40a2:	9908      	ldr	r1, [sp, #32]
	ticker->ticks_to_expire = ticks_to_expire +
    40a4:	4413      	add	r3, r2
    40a6:	60a3      	str	r3, [r4, #8]
				user_op->params.update.ticks_drift_minus;
    40a8:	88ea      	ldrh	r2, [r5, #6]
	ticker->ticks_to_expire_minus +=
    40aa:	6963      	ldr	r3, [r4, #20]
    40ac:	4413      	add	r3, r2
    40ae:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    40b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    40b2:	4620      	mov	r0, r4
    40b4:	f7ff fe63 	bl	3d7e <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    40b8:	69a2      	ldr	r2, [r4, #24]
    40ba:	892b      	ldrh	r3, [r5, #8]
    40bc:	4413      	add	r3, r2
    40be:	61a3      	str	r3, [r4, #24]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    40c0:	896a      	ldrh	r2, [r5, #10]
    40c2:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
    40c4:	bf8c      	ite	hi
    40c6:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0;
    40c8:	2300      	movls	r3, #0
    40ca:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0) {
    40cc:	7bab      	ldrb	r3, [r5, #14]
    40ce:	b103      	cbz	r3, 40d2 <ticker_job+0x256>
		ticker->force = user_op->params.update.force;
    40d0:	70e3      	strb	r3, [r4, #3]
	ticker->next = *insert_head;
    40d2:	9b04      	ldr	r3, [sp, #16]
    40d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    40d6:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
		ticker->req++;
    40da:	7863      	ldrb	r3, [r4, #1]
	*insert_head = user_op->id;
    40dc:	f895 a001 	ldrb.w	sl, [r5, #1]
		ticker->req++;
    40e0:	3301      	adds	r3, #1
    40e2:	7063      	strb	r3, [r4, #1]
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    40e4:	2100      	movs	r1, #0
    40e6:	e7a2      	b.n	402e <ticker_job+0x1b2>
		       (ticker->lazy_current > user_op->params.update.lazy)) {
    40e8:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    40ec:	45e6      	cmp	lr, ip
    40ee:	d2cf      	bcs.n	4090 <ticker_job+0x214>
	if ((ticker->remainder_current >= BIT(31)) ||
    40f0:	6a61      	ldr	r1, [r4, #36]	; 0x24
    40f2:	4eaf      	ldr	r6, [pc, #700]	; (43b0 <ticker_job+0x534>)
    40f4:	48af      	ldr	r0, [pc, #700]	; (43b4 <ticker_job+0x538>)
    40f6:	198e      	adds	r6, r1, r6
    40f8:	4286      	cmp	r6, r0
		ticker->remainder_current += 30517578UL;
    40fa:	bf81      	itttt	hi
    40fc:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
    4100:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
    4104:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
    4108:	6261      	strhi	r1, [r4, #36]	; 0x24
	ticker->remainder_current -= ticker->remainder_periodic;
    410a:	6a66      	ldr	r6, [r4, #36]	; 0x24
    410c:	6a21      	ldr	r1, [r4, #32]
		decrement++;
    410e:	bf8c      	ite	hi
    4110:	f04f 0901 	movhi.w	r9, #1
	u8_t decrement = 0;
    4114:	f04f 0900 	movls.w	r9, #0
	ticker->remainder_current -= ticker->remainder_periodic;
    4118:	1a76      	subs	r6, r6, r1
			ticks_to_expire -= ticker->ticks_periodic +
    411a:	4491      	add	r9, r2
			ticker->lazy_current--;
    411c:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
	ticker->remainder_current -= ticker->remainder_periodic;
    4120:	6266      	str	r6, [r4, #36]	; 0x24
			ticks_to_expire -= ticker->ticks_periodic +
    4122:	eba3 0309 	sub.w	r3, r3, r9
			ticker->lazy_current--;
    4126:	f8a4 c01e 	strh.w	ip, [r4, #30]
    412a:	e7af      	b.n	408c <ticker_job+0x210>
	ticker->remainder_current += ticker->remainder_periodic;
    412c:	6a66      	ldr	r6, [r4, #36]	; 0x24
    412e:	6a21      	ldr	r1, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    4130:	48a0      	ldr	r0, [pc, #640]	; (43b4 <ticker_job+0x538>)
	ticker->remainder_current += ticker->remainder_periodic;
    4132:	440e      	add	r6, r1
	if ((ticker->remainder_current < BIT(31)) &&
    4134:	499e      	ldr	r1, [pc, #632]	; (43b0 <ticker_job+0x534>)
    4136:	1871      	adds	r1, r6, r1
    4138:	4281      	cmp	r1, r0
	return 0;
    413a:	bf8e      	itee	hi
    413c:	2100      	movhi	r1, #0
		return 1;
    413e:	2101      	movls	r1, #1
		ticker->remainder_current -= 30517578UL;
    4140:	444e      	addls	r6, r9
			ticks_to_expire += ticker->ticks_periodic +
    4142:	4411      	add	r1, r2
			ticker->lazy_current++;
    4144:	f10c 0c01 	add.w	ip, ip, #1
	ticker->remainder_current += ticker->remainder_periodic;
    4148:	bf8c      	ite	hi
    414a:	6266      	strhi	r6, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
    414c:	6266      	strls	r6, [r4, #36]	; 0x24
			ticks_to_expire += ticker->ticks_periodic +
    414e:	440b      	add	r3, r1
			ticker->lazy_current++;
    4150:	f8a4 c01e 	strh.w	ip, [r4, #30]
    4154:	e79e      	b.n	4094 <ticker_job+0x218>
		ticker->req = ticker->ack;
    4156:	78a3      	ldrb	r3, [r4, #2]
    4158:	7063      	strb	r3, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
    415a:	786b      	ldrb	r3, [r5, #1]
    415c:	f89b 201c 	ldrb.w	r2, [fp, #28]
    4160:	429a      	cmp	r2, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    4162:	bf01      	itttt	eq
    4164:	23ff      	moveq	r3, #255	; 0xff
    4166:	f88b 301c 	strbeq.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
    416a:	2300      	moveq	r3, #0
    416c:	f8cb 3018 	streq.w	r3, [fp, #24]
    4170:	e7b8      	b.n	40e4 <ticker_job+0x268>
				instance->sched_cb(TICKER_CALL_ID_JOB,
    4172:	2104      	movs	r1, #4
    4174:	465b      	mov	r3, fp
    4176:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    417a:	2201      	movs	r2, #1
    417c:	4608      	mov	r0, r1
    417e:	47a0      	blx	r4
				pending = 1;
    4180:	2301      	movs	r3, #1
				user->middle = prev;
    4182:	70be      	strb	r6, [r7, #2]
				pending = 1;
    4184:	9307      	str	r3, [sp, #28]
    4186:	9b02      	ldr	r3, [sp, #8]
    4188:	3b01      	subs	r3, #1
    418a:	b2db      	uxtb	r3, r3
    418c:	9302      	str	r3, [sp, #8]
    418e:	e6aa      	b.n	3ee6 <ticker_job+0x6a>
		if (instance->ticks_slot_previous > ticks_to_expire) {
    4190:	f8db 3018 	ldr.w	r3, [fp, #24]
    4194:	429d      	cmp	r5, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    4196:	bf29      	itett	cs
    4198:	23ff      	movcs	r3, #255	; 0xff
			instance->ticks_slot_previous -= ticks_to_expire;
    419a:	1b5b      	subcc	r3, r3, r5
			instance->ticker_id_slot_previous = TICKER_NULL;
    419c:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
    41a0:	2300      	movcs	r3, #0
    41a2:	f8cb 3018 	str.w	r3, [fp, #24]
		if (ticker->ticks_slot != 0) {
    41a6:	69a3      	ldr	r3, [r4, #24]
		ticks_expired += ticks_to_expire;
    41a8:	44a9      	add	r9, r5
		if (ticker->ticks_slot != 0) {
    41aa:	b11b      	cbz	r3, 41b4 <ticker_job+0x338>
			instance->ticker_id_slot_previous = id_expired;
    41ac:	f88b 601c 	strb.w	r6, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
    41b0:	f8cb 3018 	str.w	r3, [fp, #24]
		ticker->ticks_to_expire = 0;
    41b4:	2200      	movs	r2, #0
		instance->ticker_id_head = ticker->next;
    41b6:	9b04      	ldr	r3, [sp, #16]
		ticker->ticks_to_expire = 0;
    41b8:	60a2      	str	r2, [r4, #8]
		instance->ticker_id_head = ticker->next;
    41ba:	f813 3037 	ldrb.w	r3, [r3, r7, lsl #3]
    41be:	f88b 301d 	strb.w	r3, [fp, #29]
		if (ticker->ticks_periodic != 0) {
    41c2:	f8d4 e004 	ldr.w	lr, [r4, #4]
    41c6:	f1be 0f00 	cmp.w	lr, #0
    41ca:	d030      	beq.n	422e <ticker_job+0x3b2>
    41cc:	8ba0      	ldrh	r0, [r4, #28]
	if ((ticker->remainder_current < BIT(31)) &&
    41ce:	f8df c1e4 	ldr.w	ip, [pc, #484]	; 43b4 <ticker_job+0x538>
	ticker->remainder_current += ticker->remainder_periodic;
    41d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    41d4:	6a21      	ldr	r1, [r4, #32]
    41d6:	440b      	add	r3, r1
	if ((ticker->remainder_current < BIT(31)) &&
    41d8:	4975      	ldr	r1, [pc, #468]	; (43b0 <ticker_job+0x534>)
    41da:	1859      	adds	r1, r3, r1
    41dc:	4561      	cmp	r1, ip
		ticker->remainder_current -= 30517578UL;
    41de:	bf9f      	itttt	ls
    41e0:	f1a3 73e8 	subls.w	r3, r3, #30408704	; 0x1d00000
    41e4:	f5a3 33d4 	subls.w	r3, r3, #108544	; 0x1a800
    41e8:	f5a3 73a5 	subls.w	r3, r3, #330	; 0x14a
    41ec:	6263      	strls	r3, [r4, #36]	; 0x24
		return 1;
    41ee:	bf92      	itee	ls
    41f0:	9b01      	ldrls	r3, [sp, #4]
	ticker->remainder_current += ticker->remainder_periodic;
    41f2:	6263      	strhi	r3, [r4, #36]	; 0x24
	return 0;
    41f4:	2300      	movhi	r3, #0
				ticks_to_expire += ticker_remainder_inc(ticker);
    41f6:	4473      	add	r3, lr
			while (count--) {
    41f8:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
				ticks_to_expire += ticker_remainder_inc(ticker);
    41fc:	441a      	add	r2, r3
			while (count--) {
    41fe:	d2e8      	bcs.n	41d2 <ticker_job+0x356>
			ticks_to_expire_prep(ticker, instance->ticks_current,
    4200:	9b05      	ldr	r3, [sp, #20]
			ticker->ticks_to_expire = ticks_to_expire;
    4202:	60a2      	str	r2, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
    4204:	f8db 1014 	ldr.w	r1, [fp, #20]
    4208:	eb03 0209 	add.w	r2, r3, r9
    420c:	4620      	mov	r0, r4
    420e:	f7ff fdb6 	bl	3d7e <ticks_to_expire_prep>
			ticker->lazy_current = ticker->lazy_periodic;
    4212:	8ba3      	ldrh	r3, [r4, #28]
    4214:	83e3      	strh	r3, [r4, #30]
			ticker->force = 0;
    4216:	2300      	movs	r3, #0
    4218:	70e3      	strb	r3, [r4, #3]
			ticker->next = *insert_head;
    421a:	9b04      	ldr	r3, [sp, #16]
    421c:	f803 a037 	strb.w	sl, [r3, r7, lsl #3]
			ticker->req++;
    4220:	7863      	ldrb	r3, [r4, #1]
    4222:	3301      	adds	r3, #1
    4224:	7063      	strb	r3, [r4, #1]
		ticks_elapsed -= ticks_to_expire;
    4226:	eba8 0805 	sub.w	r8, r8, r5
    422a:	46b2      	mov	sl, r6
    422c:	e66c      	b.n	3f08 <ticker_job+0x8c>
			ticker->req = ticker->ack;
    422e:	78a3      	ldrb	r3, [r4, #2]
    4230:	7063      	strb	r3, [r4, #1]
    4232:	4656      	mov	r6, sl
    4234:	e7f7      	b.n	4226 <ticker_job+0x3aa>
		user = &users[count_user];
    4236:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4238:	9a01      	ldr	r2, [sp, #4]
    423a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    423e:	9304      	str	r3, [sp, #16]
		user_ops = (void *)&user->user_op[0];
    4240:	685b      	ldr	r3, [r3, #4]
    4242:	930a      	str	r3, [sp, #40]	; 0x28
		user_ops_first = user->first;
    4244:	9b04      	ldr	r3, [sp, #16]
    4246:	f893 9001 	ldrb.w	r9, [r3, #1]
		while ((insert_head != TICKER_NULL) ||
    424a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    424e:	f000 808e 	beq.w	436e <ticker_job+0x4f2>
				ticker = &node[id_insert];
    4252:	fa0f f38a 	sxth.w	r3, sl
    4256:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    425a:	9a08      	ldr	r2, [sp, #32]
				insert_head = ticker->next;
    425c:	46d0      	mov	r8, sl
    425e:	f812 a033 	ldrb.w	sl, [r2, r3, lsl #3]
				ticker = &node[id_insert];
    4262:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
				user_op = NULL;
    4266:	2500      	movs	r5, #0
	struct ticker_node *node = &instance->node[0];
    4268:	f8db 3000 	ldr.w	r3, [fp]
    426c:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker->next = TICKER_NULL;
    426e:	23ff      	movs	r3, #255	; 0xff
	if (ticker->lazy_current > ticker->lazy_periodic) {
    4270:	8ba2      	ldrh	r2, [r4, #28]
	ticker->next = TICKER_NULL;
    4272:	7023      	strb	r3, [r4, #0]
	if (ticker->lazy_current > ticker->lazy_periodic) {
    4274:	8be3      	ldrh	r3, [r4, #30]
    4276:	4293      	cmp	r3, r2
		skip = ticker->lazy_current -
    4278:	bf86      	itte	hi
    427a:	1a9b      	subhi	r3, r3, r2
    427c:	b29b      	uxthhi	r3, r3
		skip = 0;
    427e:	2300      	movls	r3, #0
    4280:	930c      	str	r3, [sp, #48]	; 0x30
	ticker_new = &node[id];
    4282:	fa0f f388 	sxth.w	r3, r8
    4286:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    428a:	00db      	lsls	r3, r3, #3
    428c:	9311      	str	r3, [sp, #68]	; 0x44
    428e:	9b11      	ldr	r3, [sp, #68]	; 0x44
	node = &instance->node[0];
    4290:	f8db 2000 	ldr.w	r2, [fp]
	ticks_slot_previous = instance->ticks_slot_previous;
    4294:	f8db 0018 	ldr.w	r0, [fp, #24]
    4298:	9005      	str	r0, [sp, #20]
	ticker_new = &node[id];
    429a:	eb02 0e03 	add.w	lr, r2, r3
	collide = ticker_id_slot_previous = TICKER_NULL;
    429e:	20ff      	movs	r0, #255	; 0xff
	current = instance->ticker_id_head;
    42a0:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker_new->ticks_to_expire;
    42a4:	f8de 1008 	ldr.w	r1, [lr, #8]
	previous = current;
    42a8:	9309      	str	r3, [sp, #36]	; 0x24
	collide = ticker_id_slot_previous = TICKER_NULL;
    42aa:	9006      	str	r0, [sp, #24]
	while ((current != TICKER_NULL) &&
    42ac:	2bff      	cmp	r3, #255	; 0xff
    42ae:	d007      	beq.n	42c0 <ticker_job+0x444>
		 (ticker_current = &node[current])->ticks_to_expire))) {
    42b0:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
    42b4:	eb02 06cc 	add.w	r6, r2, ip, lsl #3
		(ticks_to_expire_current =
    42b8:	68b0      	ldr	r0, [r6, #8]
	while ((current != TICKER_NULL) &&
    42ba:	4281      	cmp	r1, r0
    42bc:	f200 80a9 	bhi.w	4412 <ticker_job+0x596>
				     ticks_to_expire + ticker_new->ticks_slot);
    42c0:	f8de 0018 	ldr.w	r0, [lr, #24]
    42c4:	900d      	str	r0, [sp, #52]	; 0x34
	collide = ticker_by_slot_get(&node[0], current,
    42c6:	eb01 0c00 	add.w	ip, r1, r0
    42ca:	461e      	mov	r6, r3
	while (ticker_id_head != TICKER_NULL) {
    42cc:	2eff      	cmp	r6, #255	; 0xff
    42ce:	f040 80ae 	bne.w	442e <ticker_job+0x5b2>
	if ((ticker_new->ticks_slot == 0) ||
    42d2:	980d      	ldr	r0, [sp, #52]	; 0x34
    42d4:	b130      	cbz	r0, 42e4 <ticker_job+0x468>
    42d6:	9805      	ldr	r0, [sp, #20]
    42d8:	4281      	cmp	r1, r0
    42da:	f0c0 80bf 	bcc.w	445c <ticker_job+0x5e0>
	    ((ticks_slot_previous <= ticks_to_expire) &&
    42de:	2eff      	cmp	r6, #255	; 0xff
    42e0:	f040 818a 	bne.w	45f8 <ticker_job+0x77c>
		if (previous == current) {
    42e4:	9809      	ldr	r0, [sp, #36]	; 0x24
		ticker_new->ticks_to_expire = ticks_to_expire;
    42e6:	f8ce 1008 	str.w	r1, [lr, #8]
		if (previous == current) {
    42ea:	4283      	cmp	r3, r0
			node[previous].next = id;
    42ec:	bf18      	it	ne
    42ee:	f9bd 0024 	ldrshne.w	r0, [sp, #36]	; 0x24
		ticker_new->next = current;
    42f2:	f88e 3000 	strb.w	r3, [lr]
			node[previous].next = id;
    42f6:	bf16      	itet	ne
    42f8:	eb00 0080 	addne.w	r0, r0, r0, lsl #2
			instance->ticker_id_head = id;
    42fc:	f88b 801d 	strbeq.w	r8, [fp, #29]
			node[previous].next = id;
    4300:	f802 8030 	strbne.w	r8, [r2, r0, lsl #3]
		if (current != TICKER_NULL) {
    4304:	2bff      	cmp	r3, #255	; 0xff
    4306:	d006      	beq.n	4316 <ticker_job+0x49a>
			node[current].ticks_to_expire -= ticks_to_expire;
    4308:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    430c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    4310:	689a      	ldr	r2, [r3, #8]
    4312:	1a51      	subs	r1, r2, r1
    4314:	6099      	str	r1, [r3, #8]
	ticker->req = ticker->ack + 1;
    4316:	78a3      	ldrb	r3, [r4, #2]
    4318:	3301      	adds	r3, #1
    431a:	7063      	strb	r3, [r4, #1]
	return TICKER_STATUS_SUCCESS;
    431c:	2100      	movs	r1, #0
			if (user_op) {
    431e:	2d00      	cmp	r5, #0
    4320:	d093      	beq.n	424a <ticker_job+0x3ce>
				ticker_job_op_cb(user_op, status);
    4322:	4628      	mov	r0, r5
    4324:	f7ff fd49 	bl	3dba <ticker_job_op_cb>
    4328:	e78f      	b.n	424a <ticker_job+0x3ce>
				user_op = &user_ops[user_ops_first];
    432a:	eb09 0349 	add.w	r3, r9, r9, lsl #1
    432e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4330:	011b      	lsls	r3, r3, #4
    4332:	18d5      	adds	r5, r2, r3
				first = user_ops_first + 1;
    4334:	f109 0201 	add.w	r2, r9, #1
    4338:	fa5f f982 	uxtb.w	r9, r2
				if (first == user->count_user_op) {
    433c:	9a04      	ldr	r2, [sp, #16]
    433e:	7812      	ldrb	r2, [r2, #0]
					first = 0;
    4340:	454a      	cmp	r2, r9
    4342:	bf08      	it	eq
    4344:	f04f 0900 	moveq.w	r9, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    4348:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    434a:	5cd3      	ldrb	r3, [r2, r3]
    434c:	2b03      	cmp	r3, #3
    434e:	d10e      	bne.n	436e <ticker_job+0x4f2>
				id_insert = user_op->id;
    4350:	f895 8001 	ldrb.w	r8, [r5, #1]
				ticker = &node[id_insert];
    4354:	9b08      	ldr	r3, [sp, #32]
    4356:	eb08 0488 	add.w	r4, r8, r8, lsl #2
    435a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
				if (((ticker->req - ticker->ack) & 0xff) != 0) {
    435e:	7862      	ldrb	r2, [r4, #1]
    4360:	78a3      	ldrb	r3, [r4, #2]
    4362:	429a      	cmp	r2, r3
    4364:	d009      	beq.n	437a <ticker_job+0x4fe>
					ticker_job_op_cb(user_op,
    4366:	2101      	movs	r1, #1
    4368:	4628      	mov	r0, r5
    436a:	f7ff fd26 	bl	3dba <ticker_job_op_cb>
		while ((insert_head != TICKER_NULL) ||
    436e:	9b04      	ldr	r3, [sp, #16]
    4370:	789b      	ldrb	r3, [r3, #2]
    4372:	454b      	cmp	r3, r9
    4374:	d1d9      	bne.n	432a <ticker_job+0x4ae>
    4376:	9b01      	ldr	r3, [sp, #4]
    4378:	e5e6      	b.n	3f48 <ticker_job+0xcc>
	ticker->ticks_periodic = start->ticks_periodic;
    437a:	68eb      	ldr	r3, [r5, #12]
				ticker_job_op_start(ticker, user_op,
    437c:	f8db 1014 	ldr.w	r1, [fp, #20]
	ticker->ticks_periodic = start->ticks_periodic;
    4380:	6063      	str	r3, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    4382:	692b      	ldr	r3, [r5, #16]
    4384:	6223      	str	r3, [r4, #32]
	ticker->lazy_periodic = start->lazy;
    4386:	8aab      	ldrh	r3, [r5, #20]
    4388:	83a3      	strh	r3, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
    438a:	69ab      	ldr	r3, [r5, #24]
    438c:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
    438e:	69eb      	ldr	r3, [r5, #28]
    4390:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
    4392:	6a2b      	ldr	r3, [r5, #32]
    4394:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire_minus = 0;
    4396:	2600      	movs	r6, #0
	ticker->ticks_to_expire = start->ticks_first;
    4398:	68ab      	ldr	r3, [r5, #8]
    439a:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0;
    439c:	6166      	str	r6, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    439e:	686a      	ldr	r2, [r5, #4]
    43a0:	4620      	mov	r0, r4
    43a2:	f7ff fcec 	bl	3d7e <ticks_to_expire_prep>
	ticker->force = 1;
    43a6:	2301      	movs	r3, #1
	ticker->remainder_current = 0;
    43a8:	6266      	str	r6, [r4, #36]	; 0x24
	ticker->lazy_current = 0;
    43aa:	83e6      	strh	r6, [r4, #30]
	ticker->force = 1;
    43ac:	70e3      	strb	r3, [r4, #3]
    43ae:	e75b      	b.n	4268 <ticker_job+0x3ec>
    43b0:	ff172b5a 	.word	0xff172b5a
    43b4:	7f172b59 	.word	0x7f172b59
    43b8:	fe2e56b6 	.word	0xfe2e56b6
		if (ticker->ticks_periodic != 0) {
    43bc:	6860      	ldr	r0, [r4, #4]
    43be:	2800      	cmp	r0, #0
    43c0:	d07b      	beq.n	44ba <ticker_job+0x63e>
	ticker->remainder_current += ticker->remainder_periodic;
    43c2:	6a62      	ldr	r2, [r4, #36]	; 0x24
    43c4:	6a21      	ldr	r1, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    43c6:	4b90      	ldr	r3, [pc, #576]	; (4608 <ticker_job+0x78c>)
	ticker->remainder_current += ticker->remainder_periodic;
    43c8:	440a      	add	r2, r1
	if ((ticker->remainder_current < BIT(31)) &&
    43ca:	4990      	ldr	r1, [pc, #576]	; (460c <ticker_job+0x790>)
    43cc:	18d3      	adds	r3, r2, r3
    43ce:	428b      	cmp	r3, r1
		ticker->remainder_current -= 30517578UL;
    43d0:	bf9c      	itt	ls
    43d2:	f1a2 72e8 	subls.w	r2, r2, #30408704	; 0x1d00000
    43d6:	f5a2 32d4 	subls.w	r2, r2, #108544	; 0x1a800
			ticker->ticks_to_expire += ticker->ticks_periodic +
    43da:	68a3      	ldr	r3, [r4, #8]
	ticker->remainder_current += ticker->remainder_periodic;
    43dc:	bf8b      	itete	hi
    43de:	6262      	strhi	r2, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
    43e0:	f5a2 72a5 	subls.w	r2, r2, #330	; 0x14a
	return 0;
    43e4:	2200      	movhi	r2, #0
		ticker->remainder_current -= 30517578UL;
    43e6:	6262      	strls	r2, [r4, #36]	; 0x24
			ticker->ticks_to_expire += ticker->ticks_periodic +
    43e8:	4403      	add	r3, r0
		return 1;
    43ea:	bf98      	it	ls
    43ec:	2201      	movls	r2, #1
			ticker->ticks_to_expire += ticker->ticks_periodic +
    43ee:	4413      	add	r3, r2
			ticker->lazy_current++;
    43f0:	8be2      	ldrh	r2, [r4, #30]
			ticker->ticks_to_expire += ticker->ticks_periodic +
    43f2:	60a3      	str	r3, [r4, #8]
			ticker->lazy_current++;
    43f4:	3201      	adds	r2, #1
    43f6:	83e2      	strh	r2, [r4, #30]
			    ticker->ticks_to_expire_minus) {
    43f8:	6962      	ldr	r2, [r4, #20]
			if (ticker->ticks_to_expire >
    43fa:	4293      	cmp	r3, r2
    43fc:	f04f 0100 	mov.w	r1, #0
				ticker->ticks_to_expire -=
    4400:	bf89      	itett	hi
    4402:	1a9b      	subhi	r3, r3, r2
				ticker->ticks_to_expire_minus -=
    4404:	1ad3      	subls	r3, r2, r3
				ticker->ticks_to_expire -=
    4406:	60a3      	strhi	r3, [r4, #8]
				ticker->ticks_to_expire_minus = 0;
    4408:	6161      	strhi	r1, [r4, #20]
				ticker->ticks_to_expire_minus -=
    440a:	bf9c      	itt	ls
    440c:	6163      	strls	r3, [r4, #20]
				ticker->ticks_to_expire = 0;
    440e:	60a1      	strls	r1, [r4, #8]
    4410:	e73d      	b.n	428e <ticker_job+0x412>
		if (ticker_current->ticks_slot != 0) {
    4412:	69b6      	ldr	r6, [r6, #24]
		ticks_to_expire -= ticks_to_expire_current;
    4414:	1a09      	subs	r1, r1, r0
		if (ticker_current->ticks_slot != 0) {
    4416:	b946      	cbnz	r6, 442a <ticker_job+0x5ae>
			if (ticks_slot_previous > ticks_to_expire_current) {
    4418:	9f05      	ldr	r7, [sp, #20]
    441a:	42b8      	cmp	r0, r7
    441c:	d200      	bcs.n	4420 <ticker_job+0x5a4>
				ticks_slot_previous -= ticks_to_expire_current;
    441e:	1a3e      	subs	r6, r7, r0
		current = ticker_current->next;
    4420:	9309      	str	r3, [sp, #36]	; 0x24
    4422:	9605      	str	r6, [sp, #20]
    4424:	f812 303c 	ldrb.w	r3, [r2, ip, lsl #3]
    4428:	e740      	b.n	42ac <ticker_job+0x430>
		if (ticker_current->ticks_slot != 0) {
    442a:	9306      	str	r3, [sp, #24]
    442c:	e7f8      	b.n	4420 <ticker_job+0x5a4>
		ticker = &node[ticker_id_head];
    442e:	b230      	sxth	r0, r6
    4430:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    4434:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
    4438:	970e      	str	r7, [sp, #56]	; 0x38
		ticks_to_expire = ticker->ticks_to_expire;
    443a:	68bf      	ldr	r7, [r7, #8]
    443c:	970f      	str	r7, [sp, #60]	; 0x3c
		if (ticks_slot <= ticks_to_expire) {
    443e:	4567      	cmp	r7, ip
    4440:	d20a      	bcs.n	4458 <ticker_job+0x5dc>
		if (ticker->ticks_slot) {
    4442:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    4444:	69bf      	ldr	r7, [r7, #24]
    4446:	2f00      	cmp	r7, #0
    4448:	f47f af43 	bne.w	42d2 <ticker_job+0x456>
		ticks_slot -= ticks_to_expire;
    444c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    444e:	ebac 0c06 	sub.w	ip, ip, r6
		ticker_id_head = ticker->next;
    4452:	f812 6030 	ldrb.w	r6, [r2, r0, lsl #3]
    4456:	e739      	b.n	42cc <ticker_job+0x450>
			return TICKER_NULL;
    4458:	26ff      	movs	r6, #255	; 0xff
    445a:	e73a      	b.n	42d2 <ticker_job+0x456>
	while (id_insert !=
    445c:	9b06      	ldr	r3, [sp, #24]
    445e:	4598      	cmp	r8, r3
    4460:	f43f af59 	beq.w	4316 <ticker_job+0x49a>
		if (id_collide != TICKER_NULL) {
    4464:	9b06      	ldr	r3, [sp, #24]
    4466:	2bff      	cmp	r3, #255	; 0xff
    4468:	d0a8      	beq.n	43bc <ticker_job+0x540>
    446a:	461e      	mov	r6, r3
			struct ticker_node *ticker_collide = &node[id_collide];
    446c:	b233      	sxth	r3, r6
    446e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    4472:	9305      	str	r3, [sp, #20]
    4474:	9a05      	ldr	r2, [sp, #20]
    4476:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4478:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
			if (ticker_collide->lazy_current >
    447c:	8bfb      	ldrh	r3, [r7, #30]
			    ticker_collide->lazy_periodic) {
    447e:	8bba      	ldrh	r2, [r7, #28]
			if (ticker_collide->lazy_current >
    4480:	4293      	cmp	r3, r2
				skip_collide = ticker_collide->lazy_current -
    4482:	bf88      	it	hi
    4484:	1a9b      	subhi	r3, r3, r2
			if (ticker_collide->ticks_periodic &&
    4486:	687a      	ldr	r2, [r7, #4]
				skip_collide = ticker_collide->lazy_current -
    4488:	bf8c      	ite	hi
    448a:	b29b      	uxthhi	r3, r3
				skip_collide = 0;
    448c:	2300      	movls	r3, #0
			if (ticker_collide->ticks_periodic &&
    448e:	2a00      	cmp	r2, #0
    4490:	d094      	beq.n	43bc <ticker_job+0x540>
    4492:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4494:	4293      	cmp	r3, r2
    4496:	d891      	bhi.n	43bc <ticker_job+0x540>
			    skip_collide <= skip &&
    4498:	78fa      	ldrb	r2, [r7, #3]
    449a:	78e3      	ldrb	r3, [r4, #3]
    449c:	429a      	cmp	r2, r3
    449e:	d28d      	bcs.n	43bc <ticker_job+0x540>
					ticker_dequeue(instance, id_collide);
    44a0:	4631      	mov	r1, r6
    44a2:	4658      	mov	r0, fp
    44a4:	f7ff fc3f 	bl	3d26 <ticker_dequeue>
				ticker_collide->req = ticker_collide->ack;
    44a8:	78bb      	ldrb	r3, [r7, #2]
    44aa:	707b      	strb	r3, [r7, #1]
				ticker_collide->next = *insert_head;
    44ac:	9a05      	ldr	r2, [sp, #20]
    44ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
				ticker_collide->ticks_to_expire =
    44b0:	60b8      	str	r0, [r7, #8]
				ticker_collide->next = *insert_head;
    44b2:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
    44b6:	46b2      	mov	sl, r6
    44b8:	e6e9      	b.n	428e <ticker_job+0x412>
			return TICKER_STATUS_FAILURE;
    44ba:	2101      	movs	r1, #1
    44bc:	e72f      	b.n	431e <ticker_job+0x4a2>
		user = &users[count_user];
    44be:	9b01      	ldr	r3, [sp, #4]
    44c0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
		user_op = &user->user_op[0];
    44c4:	686e      	ldr	r6, [r5, #4]
		while (user->first != user->last) {
    44c6:	786b      	ldrb	r3, [r5, #1]
    44c8:	78ea      	ldrb	r2, [r5, #3]
    44ca:	429a      	cmp	r2, r3
    44cc:	d102      	bne.n	44d4 <ticker_job+0x658>
    44ce:	3c01      	subs	r4, #1
    44d0:	b2e4      	uxtb	r4, r4
    44d2:	e551      	b.n	3f78 <ticker_job+0xfc>
			ticker_job_op_inquire(instance, &user_op[user->first]);
    44d4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    44d8:	011b      	lsls	r3, r3, #4
    44da:	18f2      	adds	r2, r6, r3
	switch (uop->op) {
    44dc:	5cf3      	ldrb	r3, [r6, r3]
    44de:	2b01      	cmp	r3, #1
    44e0:	d025      	beq.n	452e <ticker_job+0x6b2>
    44e2:	2b02      	cmp	r3, #2
    44e4:	d12a      	bne.n	453c <ticker_job+0x6c0>
		ticker_by_next_slot_get(instance,
    44e6:	f8d2 c004 	ldr.w	ip, [r2, #4]
    44ea:	6893      	ldr	r3, [r2, #8]
	_ticker_id_head = *ticker_id_head;
    44ec:	f89c 0000 	ldrb.w	r0, [ip]
		ticker_by_next_slot_get(instance,
    44f0:	f8d2 900c 	ldr.w	r9, [r2, #12]
	node = instance->node;
    44f4:	f8db e000 	ldr.w	lr, [fp]
	if ((_ticker_id_head == TICKER_NULL) ||
    44f8:	28ff      	cmp	r0, #255	; 0xff
    44fa:	d004      	beq.n	4506 <ticker_job+0x68a>
    44fc:	6819      	ldr	r1, [r3, #0]
    44fe:	f8db 7014 	ldr.w	r7, [fp, #20]
    4502:	42b9      	cmp	r1, r7
    4504:	d023      	beq.n	454e <ticker_job+0x6d2>
		*ticks_current = instance->ticks_current;
    4506:	f8db 0014 	ldr.w	r0, [fp, #20]
		_ticker_id_head = instance->ticker_id_head;
    450a:	f89b 101d 	ldrb.w	r1, [fp, #29]
		*ticks_current = instance->ticks_current;
    450e:	6018      	str	r0, [r3, #0]
		_ticks_to_expire = 0;
    4510:	2300      	movs	r3, #0
	while ((_ticker_id_head != TICKER_NULL) &&
    4512:	29ff      	cmp	r1, #255	; 0xff
    4514:	d007      	beq.n	4526 <ticker_job+0x6aa>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0)) {
    4516:	eb01 0a81 	add.w	sl, r1, r1, lsl #2
    451a:	eb0e 00ca 	add.w	r0, lr, sl, lsl #3
	while ((_ticker_id_head != TICKER_NULL) &&
    451e:	6987      	ldr	r7, [r0, #24]
    4520:	6880      	ldr	r0, [r0, #8]
    4522:	b1df      	cbz	r7, 455c <ticker_job+0x6e0>
		_ticks_to_expire += ticker->ticks_to_expire;
    4524:	4403      	add	r3, r0
	*ticker_id_head = _ticker_id_head;
    4526:	f88c 1000 	strb.w	r1, [ip]
	*ticks_to_expire = _ticks_to_expire;
    452a:	f8c9 3000 	str.w	r3, [r9]
		fp_op_func = uop->fp_op_func;
    452e:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uop->status = TICKER_STATUS_SUCCESS;
    4530:	f8c2 8024 	str.w	r8, [r2, #36]	; 0x24
	if (fp_op_func) {
    4534:	b113      	cbz	r3, 453c <ticker_job+0x6c0>
		fp_op_func(uop->status, uop->op_context);
    4536:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    4538:	2000      	movs	r0, #0
    453a:	4798      	blx	r3
			first = user->first + 1;
    453c:	786b      	ldrb	r3, [r5, #1]
			if (first == user->count_user_op) {
    453e:	782a      	ldrb	r2, [r5, #0]
			first = user->first + 1;
    4540:	3301      	adds	r3, #1
    4542:	b2db      	uxtb	r3, r3
				first = 0;
    4544:	429a      	cmp	r2, r3
    4546:	bf08      	it	eq
    4548:	2300      	moveq	r3, #0
			user->first = first;
    454a:	706b      	strb	r3, [r5, #1]
    454c:	e7bb      	b.n	44c6 <ticker_job+0x64a>
		ticker = &node[_ticker_id_head];
    454e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
	_ticks_to_expire = *ticks_to_expire;
    4552:	f8d9 3000 	ldr.w	r3, [r9]
		_ticker_id_head = ticker->next;
    4556:	f81e 1030 	ldrb.w	r1, [lr, r0, lsl #3]
    455a:	e7da      	b.n	4512 <ticker_job+0x696>
		_ticks_to_expire += ticker->ticks_to_expire;
    455c:	4403      	add	r3, r0
		_ticker_id_head = ticker->next;
    455e:	f81e 103a 	ldrb.w	r1, [lr, sl, lsl #3]
    4562:	e7d6      	b.n	4512 <ticker_job+0x696>
	if (ticker_id_old_head == TICKER_NULL) {
    4564:	9b03      	ldr	r3, [sp, #12]
    4566:	2bff      	cmp	r3, #255	; 0xff
    4568:	d107      	bne.n	457a <ticker_job+0x6fe>
		ticks_current = cntr_cnt_get();
    456a:	f006 fb53 	bl	ac14 <cntr_cnt_get>
    456e:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
    4570:	f006 fb20 	bl	abb4 <cntr_start>
    4574:	b908      	cbnz	r0, 457a <ticker_job+0x6fe>
			instance->ticks_current = ticks_current;
    4576:	f8cb 4014 	str.w	r4, [fp, #20]
	ticker = &instance->node[instance->ticker_id_head];
    457a:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker->ticks_to_expire;
    457e:	f8db 2000 	ldr.w	r2, [fp]
	ticker = &instance->node[instance->ticker_id_head];
    4582:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	ticks_to_expire = ticker->ticks_to_expire;
    4586:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    458a:	260a      	movs	r6, #10
    458c:	689d      	ldr	r5, [r3, #8]
		ctr = cntr_cnt_get();
    458e:	f006 fb41 	bl	ac14 <cntr_cnt_get>
		cc = instance->ticks_current;
    4592:	f8db 4014 	ldr.w	r4, [fp, #20]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    4596:	1b03      	subs	r3, r0, r4
    4598:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
    459c:	3303      	adds	r3, #3
		cc += ((ticks_elapsed < ticks_to_expire) ?
    459e:	42ab      	cmp	r3, r5
    45a0:	bf2c      	ite	cs
    45a2:	18e4      	addcs	r4, r4, r3
    45a4:	1964      	addcc	r4, r4, r5
		cc &= 0x00FFFFFF;
    45a6:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		ctr = cntr_cnt_get();
    45aa:	4607      	mov	r7, r0
		instance->trigger_set_cb(cc);
    45ac:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
    45b0:	4620      	mov	r0, r4
    45b2:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
    45b4:	f006 fb2e 	bl	ac14 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    45b8:	1bc0      	subs	r0, r0, r7
    45ba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    45be:	1be4      	subs	r4, r4, r7
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
    45c0:	3003      	adds	r0, #3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    45c2:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
    45c6:	42a0      	cmp	r0, r4
    45c8:	f67f ace8 	bls.w	3f9c <ticker_job+0x120>
		LL_ASSERT(i);
    45cc:	3e01      	subs	r6, #1
    45ce:	d1de      	bne.n	458e <ticker_job+0x712>
    45d0:	4a0f      	ldr	r2, [pc, #60]	; (4610 <ticker_job+0x794>)
    45d2:	4910      	ldr	r1, [pc, #64]	; (4614 <ticker_job+0x798>)
    45d4:	2003      	movs	r0, #3
    45d6:	f7fd fe0b 	bl	21f0 <bt_log>
    45da:	4040      	eors	r0, r0
    45dc:	f380 8811 	msr	BASEPRI, r0
    45e0:	f04f 0004 	mov.w	r0, #4
    45e4:	df02      	svc	2
	instance->job_guard = 0;
    45e6:	2300      	movs	r3, #0
    45e8:	f88b 301e 	strb.w	r3, [fp, #30]
    45ec:	e4cc      	b.n	3f88 <ticker_job+0x10c>
	if (!pending) {
    45ee:	2b00      	cmp	r3, #0
    45f0:	d1f9      	bne.n	45e6 <ticker_job+0x76a>
		flag_compare_update = 1;
    45f2:	2301      	movs	r3, #1
    45f4:	9302      	str	r3, [sp, #8]
    45f6:	e4b6      	b.n	3f66 <ticker_job+0xea>
	while (id_insert !=
    45f8:	45b0      	cmp	r8, r6
    45fa:	f47f af37 	bne.w	446c <ticker_job+0x5f0>
    45fe:	e68a      	b.n	4316 <ticker_job+0x49a>
}
    4600:	b013      	add	sp, #76	; 0x4c
    4602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4606:	bf00      	nop
    4608:	ff172b5a 	.word	0xff172b5a
    460c:	7f172b59 	.word	0x7f172b59
    4610:	0000de0c 	.word	0x0000de0c
    4614:	0000de26 	.word	0x0000de26

00004618 <ticker_init>:
{
    4618:	b5f0      	push	{r4, r5, r6, r7, lr}
	instance->count_node = count_node;
    461a:	4d1a      	ldr	r5, [pc, #104]	; (4684 <ticker_init+0x6c>)
{
    461c:	9f05      	ldr	r7, [sp, #20]
    461e:	f89d 4018 	ldrb.w	r4, [sp, #24]
	instance->count_node = count_node;
    4622:	262c      	movs	r6, #44	; 0x2c
    4624:	4346      	muls	r6, r0
    4626:	eb05 0e06 	add.w	lr, r5, r6
	instance->node = node;
    462a:	51aa      	str	r2, [r5, r6]
	instance->count_node = count_node;
    462c:	f88e 1008 	strb.w	r1, [lr, #8]
	struct ticker_user_op *user_op_ = (void *)user_op;
    4630:	9907      	ldr	r1, [sp, #28]
	instance->count_user = count_user;
    4632:	f88e 3009 	strb.w	r3, [lr, #9]
	instance->user = user;
    4636:	f8ce 7004 	str.w	r7, [lr, #4]
	while (count_user--) {
    463a:	3b01      	subs	r3, #1
    463c:	b2db      	uxtb	r3, r3
    463e:	2bff      	cmp	r3, #255	; 0xff
    4640:	d111      	bne.n	4666 <ticker_init+0x4e>
	if (count_op) {
    4642:	b9ec      	cbnz	r4, 4680 <ticker_init+0x68>
	instance->caller_id_get_cb = caller_id_get_cb;
    4644:	222c      	movs	r2, #44	; 0x2c
    4646:	fb02 5200 	mla	r2, r2, r0, r5
    464a:	9908      	ldr	r1, [sp, #32]
    464c:	6211      	str	r1, [r2, #32]
	instance->sched_cb = sched_cb;
    464e:	9909      	ldr	r1, [sp, #36]	; 0x24
    4650:	6251      	str	r1, [r2, #36]	; 0x24
	instance->trigger_set_cb = trigger_set_cb;
    4652:	990a      	ldr	r1, [sp, #40]	; 0x28
    4654:	6291      	str	r1, [r2, #40]	; 0x28
	instance->ticker_id_head = TICKER_NULL;
    4656:	7753      	strb	r3, [r2, #29]
	instance->ticker_id_slot_previous = TICKER_NULL;
    4658:	7713      	strb	r3, [r2, #28]
	instance->ticks_slot_previous = 0;
    465a:	6194      	str	r4, [r2, #24]
	instance->ticks_current = 0;
    465c:	6154      	str	r4, [r2, #20]
	instance->ticks_elapsed_first = 0;
    465e:	7294      	strb	r4, [r2, #10]
	instance->ticks_elapsed_last = 0;
    4660:	72d4      	strb	r4, [r2, #11]
	return TICKER_STATUS_SUCCESS;
    4662:	4620      	mov	r0, r4
    4664:	bdf0      	pop	{r4, r5, r6, r7, pc}
		users[count_user].user_op = user_op_;
    4666:	b21a      	sxth	r2, r3
    4668:	eb07 06c2 	add.w	r6, r7, r2, lsl #3
    466c:	6071      	str	r1, [r6, #4]
		user_op_ += users[count_user].count_user_op;
    466e:	f817 2032 	ldrb.w	r2, [r7, r2, lsl #3]
    4672:	eb02 0642 	add.w	r6, r2, r2, lsl #1
		count_op -= users[count_user].count_user_op;
    4676:	1aa4      	subs	r4, r4, r2
		user_op_ += users[count_user].count_user_op;
    4678:	eb01 1106 	add.w	r1, r1, r6, lsl #4
		count_op -= users[count_user].count_user_op;
    467c:	b2e4      	uxtb	r4, r4
    467e:	e7dc      	b.n	463a <ticker_init+0x22>
		return TICKER_STATUS_FAILURE;
    4680:	2001      	movs	r0, #1
}
    4682:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4684:	20000990 	.word	0x20000990

00004688 <ticker_trigger>:
	instance = &_instance[instance_index];
    4688:	4a07      	ldr	r2, [pc, #28]	; (46a8 <ticker_trigger+0x20>)
    468a:	212c      	movs	r1, #44	; 0x2c
    468c:	fb00 2301 	mla	r3, r0, r1, r2
{
    4690:	b410      	push	{r4}
	if (instance->sched_cb) {
    4692:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    4694:	b12c      	cbz	r4, 46a2 <ticker_trigger+0x1a>
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    4696:	46a4      	mov	ip, r4
    4698:	2201      	movs	r2, #1
    469a:	2103      	movs	r1, #3
    469c:	2002      	movs	r0, #2
}
    469e:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    46a0:	4760      	bx	ip
}
    46a2:	bc10      	pop	{r4}
    46a4:	4770      	bx	lr
    46a6:	bf00      	nop
    46a8:	20000990 	.word	0x20000990

000046ac <ticker_start>:
{
    46ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    46b0:	4f25      	ldr	r7, [pc, #148]	; (4748 <ticker_start+0x9c>)
    46b2:	f04f 082c 	mov.w	r8, #44	; 0x2c
{
    46b6:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    46b8:	fb08 7000 	mla	r0, r8, r0, r7
    46bc:	fa0f fc81 	sxth.w	ip, r1
    46c0:	f8d0 e004 	ldr.w	lr, [r0, #4]
    46c4:	eb0e 06cc 	add.w	r6, lr, ip, lsl #3
	if (last >= user->count_user_op) {
    46c8:	f81e e03c 	ldrb.w	lr, [lr, ip, lsl #3]
	last = user->last + 1;
    46cc:	78f4      	ldrb	r4, [r6, #3]
    46ce:	1c65      	adds	r5, r4, #1
    46d0:	b2ed      	uxtb	r5, r5
		last = 0;
    46d2:	45ae      	cmp	lr, r5
    46d4:	bf98      	it	ls
    46d6:	2500      	movls	r5, #0
	if (last == user->first) {
    46d8:	f896 e001 	ldrb.w	lr, [r6, #1]
    46dc:	45ae      	cmp	lr, r5
    46de:	d02f      	beq.n	4740 <ticker_start+0x94>
	user_op = &user->user_op[user->last];
    46e0:	f8d6 c004 	ldr.w	ip, [r6, #4]
    46e4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    46e8:	ea4f 1e04 	mov.w	lr, r4, lsl #4
    46ec:	eb0c 040e 	add.w	r4, ip, lr
	user_op->op = TICKER_USER_OP_TYPE_START;
    46f0:	f04f 0a03 	mov.w	sl, #3
    46f4:	f80c a00e 	strb.w	sl, [ip, lr]
	user_op->params.start.ticks_at_start = ticks_anchor;
    46f8:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
    46fa:	9b08      	ldr	r3, [sp, #32]
    46fc:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    46fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4700:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    4702:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4704:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    4706:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4708:	61a3      	str	r3, [r4, #24]
	user_op->params.start.lazy = lazy;
    470a:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    470e:	82a3      	strh	r3, [r4, #20]
	user_op->params.start.fp_timeout_func = fp_timeout_func;
    4710:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4712:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
    4714:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4716:	6223      	str	r3, [r4, #32]
	user_op->status = TICKER_STATUS_BUSY;
    4718:	2302      	movs	r3, #2
    471a:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    471c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    471e:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    4720:	9b10      	ldr	r3, [sp, #64]	; 0x40
	user_op->id = ticker_id;
    4722:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    4724:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    4726:	70f5      	strb	r5, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    4728:	6a45      	ldr	r5, [r0, #36]	; 0x24
    472a:	6a03      	ldr	r3, [r0, #32]
    472c:	4608      	mov	r0, r1
    472e:	4798      	blx	r3
    4730:	fb09 7308 	mla	r3, r9, r8, r7
    4734:	2200      	movs	r2, #0
    4736:	2104      	movs	r1, #4
    4738:	47a8      	blx	r5
	return user_op->status;
    473a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    473c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    4740:	2001      	movs	r0, #1
}
    4742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4746:	bf00      	nop
    4748:	20000990 	.word	0x20000990

0000474c <ticker_update>:
{
    474c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    4750:	f8df 8090 	ldr.w	r8, [pc, #144]	; 47e4 <ticker_update+0x98>
    4754:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    4758:	fb0a 8e00 	mla	lr, sl, r0, r8
    475c:	b20f      	sxth	r7, r1
    475e:	f8de 5004 	ldr.w	r5, [lr, #4]
{
    4762:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    4764:	eb05 00c7 	add.w	r0, r5, r7, lsl #3
	if (last >= user->count_user_op) {
    4768:	f815 5037 	ldrb.w	r5, [r5, r7, lsl #3]
	last = user->last + 1;
    476c:	78c4      	ldrb	r4, [r0, #3]
    476e:	1c66      	adds	r6, r4, #1
    4770:	b2f6      	uxtb	r6, r6
		last = 0;
    4772:	42b5      	cmp	r5, r6
    4774:	bf98      	it	ls
    4776:	2600      	movls	r6, #0
	if (last == user->first) {
    4778:	7845      	ldrb	r5, [r0, #1]
    477a:	42b5      	cmp	r5, r6
    477c:	d02f      	beq.n	47de <ticker_update+0x92>
	user_op = &user->user_op[user->last];
    477e:	f8d0 c004 	ldr.w	ip, [r0, #4]
    4782:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    4786:	0125      	lsls	r5, r4, #4
    4788:	eb0c 0405 	add.w	r4, ip, r5
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    478c:	2704      	movs	r7, #4
    478e:	f80c 7005 	strb.w	r7, [ip, r5]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    4792:	80a3      	strh	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    4794:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    4798:	80e3      	strh	r3, [r4, #6]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    479a:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    479e:	8123      	strh	r3, [r4, #8]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    47a0:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    47a4:	8163      	strh	r3, [r4, #10]
	user_op->params.update.lazy = lazy;
    47a6:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    47aa:	81a3      	strh	r3, [r4, #12]
	user_op->params.update.force = force;
    47ac:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    47b0:	73a3      	strb	r3, [r4, #14]
	user_op->status = TICKER_STATUS_BUSY;
    47b2:	2302      	movs	r3, #2
    47b4:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    47b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    47b8:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    47ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	user_op->id = ticker_id;
    47bc:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    47be:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    47c0:	70c6      	strb	r6, [r0, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    47c2:	f8de 3020 	ldr.w	r3, [lr, #32]
    47c6:	f8de 5024 	ldr.w	r5, [lr, #36]	; 0x24
    47ca:	4608      	mov	r0, r1
    47cc:	4798      	blx	r3
    47ce:	fb09 830a 	mla	r3, r9, sl, r8
    47d2:	2200      	movs	r2, #0
    47d4:	4639      	mov	r1, r7
    47d6:	47a8      	blx	r5
	return user_op->status;
    47d8:	6a60      	ldr	r0, [r4, #36]	; 0x24
    47da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    47de:	2001      	movs	r0, #1
}
    47e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    47e4:	20000990 	.word	0x20000990

000047e8 <ticker_stop>:
{
    47e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    47ec:	f8df 906c 	ldr.w	r9, [pc, #108]	; 485c <ticker_stop+0x74>
    47f0:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    47f4:	fb0a 9e00 	mla	lr, sl, r0, r9
{
    47f8:	4680      	mov	r8, r0
	user = &instance->user[user_id];
    47fa:	f8de 0004 	ldr.w	r0, [lr, #4]
    47fe:	b20e      	sxth	r6, r1
    4800:	eb00 07c6 	add.w	r7, r0, r6, lsl #3
	if (last >= user->count_user_op) {
    4804:	f810 0036 	ldrb.w	r0, [r0, r6, lsl #3]
	last = user->last + 1;
    4808:	78fc      	ldrb	r4, [r7, #3]
    480a:	1c65      	adds	r5, r4, #1
    480c:	b2ed      	uxtb	r5, r5
		last = 0;
    480e:	42a8      	cmp	r0, r5
    4810:	bf98      	it	ls
    4812:	2500      	movls	r5, #0
	if (last == user->first) {
    4814:	7878      	ldrb	r0, [r7, #1]
    4816:	42a8      	cmp	r0, r5
    4818:	d01d      	beq.n	4856 <ticker_stop+0x6e>
	user_op = &user->user_op[user->last];
    481a:	6878      	ldr	r0, [r7, #4]
    481c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    4820:	0124      	lsls	r4, r4, #4
    4822:	1906      	adds	r6, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    4824:	f04f 0c05 	mov.w	ip, #5
    4828:	f800 c004 	strb.w	ip, [r0, r4]
	user_op->id = ticker_id;
    482c:	7072      	strb	r2, [r6, #1]
	user_op->fp_op_func = fp_op_func;
    482e:	62b3      	str	r3, [r6, #40]	; 0x28
	user_op->status = TICKER_STATUS_BUSY;
    4830:	2202      	movs	r2, #2
	user_op->op_context = op_context;
    4832:	9b08      	ldr	r3, [sp, #32]
	user_op->status = TICKER_STATUS_BUSY;
    4834:	6272      	str	r2, [r6, #36]	; 0x24
	user_op->op_context = op_context;
    4836:	62f3      	str	r3, [r6, #44]	; 0x2c
	user->last = last;
    4838:	70fd      	strb	r5, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    483a:	f8de 3020 	ldr.w	r3, [lr, #32]
    483e:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
    4842:	4608      	mov	r0, r1
    4844:	4798      	blx	r3
    4846:	fb08 930a 	mla	r3, r8, sl, r9
    484a:	2200      	movs	r2, #0
    484c:	2104      	movs	r1, #4
    484e:	47a0      	blx	r4
	return user_op->status;
    4850:	6a70      	ldr	r0, [r6, #36]	; 0x24
    4852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    4856:	2001      	movs	r0, #1
}
    4858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    485c:	20000990 	.word	0x20000990

00004860 <ticker_next_slot_get>:
{
    4860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    4864:	f8df 8078 	ldr.w	r8, [pc, #120]	; 48e0 <ticker_next_slot_get+0x80>
    4868:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
{
    486c:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    486e:	fb0a 8000 	mla	r0, sl, r0, r8
    4872:	fa0f fe81 	sxth.w	lr, r1
    4876:	6845      	ldr	r5, [r0, #4]
    4878:	eb05 07ce 	add.w	r7, r5, lr, lsl #3
	if (last >= user->count_user_op) {
    487c:	f815 503e 	ldrb.w	r5, [r5, lr, lsl #3]
	last = user->last + 1;
    4880:	78fc      	ldrb	r4, [r7, #3]
    4882:	1c66      	adds	r6, r4, #1
    4884:	b2f6      	uxtb	r6, r6
		last = 0;
    4886:	42b5      	cmp	r5, r6
    4888:	bf98      	it	ls
    488a:	2600      	movls	r6, #0
	if (last == user->first) {
    488c:	787d      	ldrb	r5, [r7, #1]
    488e:	42b5      	cmp	r5, r6
    4890:	d023      	beq.n	48da <ticker_next_slot_get+0x7a>
	user_op = &user->user_op[user->last];
    4892:	f8d7 c004 	ldr.w	ip, [r7, #4]
    4896:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    489a:	0125      	lsls	r5, r4, #4
    489c:	eb0c 0405 	add.w	r4, ip, r5
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
    48a0:	f04f 0e02 	mov.w	lr, #2
    48a4:	f80c e005 	strb.w	lr, [ip, r5]
	user_op->params.slot_get.ticks_current = ticks_current;
    48a8:	60a3      	str	r3, [r4, #8]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
    48aa:	9b08      	ldr	r3, [sp, #32]
    48ac:	60e3      	str	r3, [r4, #12]
	user_op->fp_op_func = fp_op_func;
    48ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
    48b0:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->id = TICKER_NULL;
    48b2:	25ff      	movs	r5, #255	; 0xff
	user_op->op_context = op_context;
    48b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	user_op->params.slot_get.ticker_id = ticker_id;
    48b6:	6062      	str	r2, [r4, #4]
	user_op->id = TICKER_NULL;
    48b8:	7065      	strb	r5, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
    48ba:	f8c4 e024 	str.w	lr, [r4, #36]	; 0x24
	user_op->op_context = op_context;
    48be:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    48c0:	70fe      	strb	r6, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    48c2:	6a45      	ldr	r5, [r0, #36]	; 0x24
    48c4:	6a03      	ldr	r3, [r0, #32]
    48c6:	4608      	mov	r0, r1
    48c8:	4798      	blx	r3
    48ca:	fb09 830a 	mla	r3, r9, sl, r8
    48ce:	2200      	movs	r2, #0
    48d0:	2104      	movs	r1, #4
    48d2:	47a8      	blx	r5
	return user_op->status;
    48d4:	6a60      	ldr	r0, [r4, #36]	; 0x24
    48d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    48da:	2001      	movs	r0, #1
}
    48dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    48e0:	20000990 	.word	0x20000990

000048e4 <ticker_job_idle_get>:
{
    48e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    48e8:	f8df 906c 	ldr.w	r9, [pc, #108]	; 4958 <ticker_job_idle_get+0x74>
    48ec:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    48f0:	fb0a 9e00 	mla	lr, sl, r0, r9
{
    48f4:	4680      	mov	r8, r0
	user = &instance->user[user_id];
    48f6:	f8de 0004 	ldr.w	r0, [lr, #4]
    48fa:	b20e      	sxth	r6, r1
    48fc:	eb00 07c6 	add.w	r7, r0, r6, lsl #3
	if (last >= user->count_user_op) {
    4900:	f810 0036 	ldrb.w	r0, [r0, r6, lsl #3]
	last = user->last + 1;
    4904:	78fc      	ldrb	r4, [r7, #3]
    4906:	1c65      	adds	r5, r4, #1
    4908:	b2ed      	uxtb	r5, r5
		last = 0;
    490a:	42a8      	cmp	r0, r5
    490c:	bf98      	it	ls
    490e:	2500      	movls	r5, #0
	if (last == user->first) {
    4910:	7878      	ldrb	r0, [r7, #1]
    4912:	42a8      	cmp	r0, r5
    4914:	d01d      	beq.n	4952 <ticker_job_idle_get+0x6e>
	user_op = &user->user_op[user->last];
    4916:	6878      	ldr	r0, [r7, #4]
    4918:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    491c:	0124      	lsls	r4, r4, #4
    491e:	1906      	adds	r6, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
    4920:	f04f 0c01 	mov.w	ip, #1
    4924:	f800 c004 	strb.w	ip, [r0, r4]
	user_op->id = TICKER_NULL;
    4928:	20ff      	movs	r0, #255	; 0xff
    492a:	7070      	strb	r0, [r6, #1]
	user_op->status = TICKER_STATUS_BUSY;
    492c:	2002      	movs	r0, #2
    492e:	6270      	str	r0, [r6, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    4930:	62b2      	str	r2, [r6, #40]	; 0x28
	user_op->op_context = op_context;
    4932:	62f3      	str	r3, [r6, #44]	; 0x2c
	user->last = last;
    4934:	70fd      	strb	r5, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    4936:	f8de 3020 	ldr.w	r3, [lr, #32]
    493a:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
    493e:	4608      	mov	r0, r1
    4940:	4798      	blx	r3
    4942:	fb08 930a 	mla	r3, r8, sl, r9
    4946:	2200      	movs	r2, #0
    4948:	2104      	movs	r1, #4
    494a:	47a0      	blx	r4
	return user_op->status;
    494c:	6a70      	ldr	r0, [r6, #36]	; 0x24
    494e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    4952:	2001      	movs	r0, #1
}
    4954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4958:	20000990 	.word	0x20000990

0000495c <ticker_job_sched>:
{
    495c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    4960:	4c08      	ldr	r4, [pc, #32]	; (4984 <ticker_job_sched+0x28>)
    4962:	252c      	movs	r5, #44	; 0x2c
    4964:	fb05 4300 	mla	r3, r5, r0, r4
{
    4968:	4606      	mov	r6, r0
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    496a:	6a5f      	ldr	r7, [r3, #36]	; 0x24
    496c:	6a1b      	ldr	r3, [r3, #32]
    496e:	4608      	mov	r0, r1
    4970:	4798      	blx	r3
    4972:	fb06 4305 	mla	r3, r6, r5, r4
    4976:	46bc      	mov	ip, r7
    4978:	2200      	movs	r2, #0
    497a:	2104      	movs	r1, #4
}
    497c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    4980:	4760      	bx	ip
    4982:	bf00      	nop
    4984:	20000990 	.word	0x20000990

00004988 <ticker_ticks_now_get>:
	return cntr_cnt_get();
    4988:	f006 b944 	b.w	ac14 <cntr_cnt_get>

0000498c <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    498c:	1a40      	subs	r0, r0, r1
}
    498e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    4992:	4770      	bx	lr

00004994 <ll_addr_get>:

static u8_t pub_addr[BDADDR_SIZE];
static u8_t rnd_addr[BDADDR_SIZE];

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
    4994:	b508      	push	{r3, lr}
    4996:	4603      	mov	r3, r0
	if (addr_type > 1) {
    4998:	2b01      	cmp	r3, #1
{
    499a:	4608      	mov	r0, r1
	if (addr_type > 1) {
    499c:	d80e      	bhi.n	49bc <ll_addr_get+0x28>
		return NULL;
	}

	if (addr_type) {
    499e:	b133      	cbz	r3, 49ae <ll_addr_get+0x1a>
		if (bdaddr) {
    49a0:	b119      	cbz	r1, 49aa <ll_addr_get+0x16>
			memcpy(bdaddr, rnd_addr, BDADDR_SIZE);
    49a2:	2206      	movs	r2, #6
    49a4:	4906      	ldr	r1, [pc, #24]	; (49c0 <ll_addr_get+0x2c>)
    49a6:	f7fb fe38 	bl	61a <memcpy>
		}

		return rnd_addr;
    49aa:	4805      	ldr	r0, [pc, #20]	; (49c0 <ll_addr_get+0x2c>)
    49ac:	bd08      	pop	{r3, pc}
	}

	if (bdaddr) {
    49ae:	b119      	cbz	r1, 49b8 <ll_addr_get+0x24>
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
    49b0:	2206      	movs	r2, #6
    49b2:	4904      	ldr	r1, [pc, #16]	; (49c4 <ll_addr_get+0x30>)
    49b4:	f7fb fe31 	bl	61a <memcpy>
	}

	return pub_addr;
    49b8:	4802      	ldr	r0, [pc, #8]	; (49c4 <ll_addr_get+0x30>)
}
    49ba:	bd08      	pop	{r3, pc}
		return NULL;
    49bc:	2000      	movs	r0, #0
    49be:	bd08      	pop	{r3, pc}
    49c0:	200009ee 	.word	0x200009ee
    49c4:	200009e8 	.word	0x200009e8

000049c8 <ll_addr_set>:

u32_t ll_addr_set(u8_t addr_type, u8_t const *const bdaddr)
{
    49c8:	b570      	push	{r4, r5, r6, lr}
    49ca:	4606      	mov	r6, r0
    49cc:	460d      	mov	r5, r1
	if (ll_adv_is_enabled() ||
    49ce:	f005 f879 	bl	9ac4 <ll_adv_is_enabled>
    49d2:	4604      	mov	r4, r0
    49d4:	b110      	cbz	r0, 49dc <ll_addr_set+0x14>
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
    49d6:	240c      	movs	r4, #12
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
}
    49d8:	4620      	mov	r0, r4
    49da:	bd70      	pop	{r4, r5, r6, pc}
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
    49dc:	f005 f888 	bl	9af0 <ll_scan_is_enabled>
	if (ll_adv_is_enabled() ||
    49e0:	f010 0f06 	tst.w	r0, #6
    49e4:	d1f7      	bne.n	49d6 <ll_addr_set+0xe>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    49e6:	2206      	movs	r2, #6
    49e8:	4629      	mov	r1, r5
	if (addr_type) {
    49ea:	b11e      	cbz	r6, 49f4 <ll_addr_set+0x2c>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    49ec:	4802      	ldr	r0, [pc, #8]	; (49f8 <ll_addr_set+0x30>)
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    49ee:	f7fb fe14 	bl	61a <memcpy>
    49f2:	e7f1      	b.n	49d8 <ll_addr_set+0x10>
    49f4:	4801      	ldr	r0, [pc, #4]	; (49fc <ll_addr_set+0x34>)
    49f6:	e7fa      	b.n	49ee <ll_addr_set+0x26>
    49f8:	200009ee 	.word	0x200009ee
    49fc:	200009e8 	.word	0x200009e8

00004a00 <ll_tx_pwr_get>:
}

void ll_tx_pwr_get(s8_t *min, s8_t *max)
{
	/* TODO: Support TX Power Level other than 0dBm */
	*min = 0;
    4a00:	2300      	movs	r3, #0
    4a02:	7003      	strb	r3, [r0, #0]
	*max = 0;
    4a04:	700b      	strb	r3, [r1, #0]
    4a06:	4770      	bx	lr

00004a08 <bt_rand>:
#include "common/log.h"

#include "hal/ecb.h"

int bt_rand(void *buf, size_t len)
{
    4a08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4a0a:	4607      	mov	r7, r0
    4a0c:	460e      	mov	r6, r1
	while (len) {
    4a0e:	460c      	mov	r4, r1
    4a10:	1b35      	subs	r5, r6, r4
    4a12:	443d      	add	r5, r7
    4a14:	b18c      	cbz	r4, 4a3a <bt_rand+0x32>
		u32_t v = sys_rand32_get();
    4a16:	f7fc fd77 	bl	1508 <sys_rand32_get>

		if (len >= sizeof(v)) {
    4a1a:	2c03      	cmp	r4, #3
		u32_t v = sys_rand32_get();
    4a1c:	9001      	str	r0, [sp, #4]
		if (len >= sizeof(v)) {
    4a1e:	d907      	bls.n	4a30 <bt_rand+0x28>
			memcpy(buf, &v, sizeof(v));
    4a20:	2204      	movs	r2, #4
    4a22:	eb0d 0102 	add.w	r1, sp, r2
    4a26:	4628      	mov	r0, r5
    4a28:	f7fb fdf7 	bl	61a <memcpy>

			buf += sizeof(v);
			len -= sizeof(v);
    4a2c:	3c04      	subs	r4, #4
    4a2e:	e7ef      	b.n	4a10 <bt_rand+0x8>
		} else {
			memcpy(buf, &v, len);
    4a30:	4622      	mov	r2, r4
    4a32:	a901      	add	r1, sp, #4
    4a34:	4628      	mov	r0, r5
    4a36:	f7fb fdf0 	bl	61a <memcpy>
			break;
		}
	}

	return 0;
}
    4a3a:	2000      	movs	r0, #0
    4a3c:	b003      	add	sp, #12
    4a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004a40 <_hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int _hci_driver_init(struct device *unused)
{
    4a40:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    4a42:	4802      	ldr	r0, [pc, #8]	; (4a4c <_hci_driver_init+0xc>)
    4a44:	f7fe fdf6 	bl	3634 <bt_hci_driver_register>

	return 0;
}
    4a48:	2000      	movs	r0, #0
    4a4a:	bd08      	pop	{r3, pc}
    4a4c:	0000de94 	.word	0x0000de94

00004a50 <recv_thread>:
{
    4a50:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		BT_DBG("blocking");
    4a52:	4d2f      	ldr	r5, [pc, #188]	; (4b10 <recv_thread+0xc0>)
    4a54:	4e2f      	ldr	r6, [pc, #188]	; (4b14 <recv_thread+0xc4>)
    4a56:	f007 faeb 	bl	c030 <_impl_k_current_get>
    4a5a:	462a      	mov	r2, r5
    4a5c:	4603      	mov	r3, r0
    4a5e:	4631      	mov	r1, r6
    4a60:	2007      	movs	r0, #7
    4a62:	f7fd fbc5 	bl	21f0 <bt_log>
		node_rx = k_fifo_get(&recv_fifo, K_FOREVER);
    4a66:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    4a6a:	482b      	ldr	r0, [pc, #172]	; (4b18 <recv_thread+0xc8>)
    4a6c:	f007 f917 	bl	bc9e <k_queue_get>
    4a70:	4604      	mov	r4, r0
    4a72:	f007 fadd 	bl	c030 <_impl_k_current_get>
		BT_DBG("unblocked");
    4a76:	462a      	mov	r2, r5
    4a78:	4603      	mov	r3, r0
    4a7a:	4928      	ldr	r1, [pc, #160]	; (4b1c <recv_thread+0xcc>)
    4a7c:	2007      	movs	r0, #7
    4a7e:	f7fd fbb7 	bl	21f0 <bt_log>
		if (node_rx && !buf) {
    4a82:	2c00      	cmp	r4, #0
    4a84:	d031      	beq.n	4aea <recv_thread+0x9a>
	s8_t class = hci_get_class(node_rx);
    4a86:	4620      	mov	r0, r4
    4a88:	f000 fede 	bl	5848 <hci_get_class>
	switch (class) {
    4a8c:	2802      	cmp	r0, #2
    4a8e:	9403      	str	r4, [sp, #12]
    4a90:	d82e      	bhi.n	4af0 <recv_thread+0xa0>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    4a92:	2801      	cmp	r0, #1
			buf = bt_buf_get_rx(BT_BUF_EVT, K_NO_WAIT);
    4a94:	bf0e      	itee	eq
    4a96:	2100      	moveq	r1, #0
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    4a98:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    4a9c:	2001      	movne	r0, #1
    4a9e:	f7fe ff2f 	bl	3900 <bt_buf_get_rx>
    4aa2:	4604      	mov	r4, r0
		if (buf) {
    4aa4:	b118      	cbz	r0, 4aae <recv_thread+0x5e>
			hci_evt_encode(node_rx, buf);
    4aa6:	4601      	mov	r1, r0
    4aa8:	9803      	ldr	r0, [sp, #12]
    4aaa:	f000 fe13 	bl	56d4 <hci_evt_encode>
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    4aae:	9b03      	ldr	r3, [sp, #12]
    4ab0:	2100      	movs	r1, #0
    4ab2:	88d8      	ldrh	r0, [r3, #6]
    4ab4:	f005 f8ec 	bl	9c90 <radio_rx_fc_set>
	node_rx->hdr.onion.next = 0;
    4ab8:	a804      	add	r0, sp, #16
    4aba:	2200      	movs	r2, #0
    4abc:	f850 3d04 	ldr.w	r3, [r0, #-4]!
    4ac0:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    4ac2:	f005 f87b 	bl	9bbc <ll_rx_mem_release>
		if (buf) {
    4ac6:	b184      	cbz	r4, 4aea <recv_thread+0x9a>
			if (buf->len) {
    4ac8:	89a3      	ldrh	r3, [r4, #12]
    4aca:	b1e3      	cbz	r3, 4b06 <recv_thread+0xb6>
    4acc:	f007 fab0 	bl	c030 <_impl_k_current_get>
				BT_DBG("Packet in: type:%u len:%u",
    4ad0:	89a3      	ldrh	r3, [r4, #12]
    4ad2:	9301      	str	r3, [sp, #4]
    4ad4:	7d23      	ldrb	r3, [r4, #20]
    4ad6:	9300      	str	r3, [sp, #0]
    4ad8:	462a      	mov	r2, r5
    4ada:	4603      	mov	r3, r0
    4adc:	4910      	ldr	r1, [pc, #64]	; (4b20 <recv_thread+0xd0>)
    4ade:	2007      	movs	r0, #7
    4ae0:	f7fd fb86 	bl	21f0 <bt_log>
				bt_recv(buf);
    4ae4:	4620      	mov	r0, r4
    4ae6:	f7fe fb41 	bl	316c <bt_recv>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    4aea:	f007 fa83 	bl	bff4 <_impl_k_yield>
    4aee:	e7b2      	b.n	4a56 <recv_thread+0x6>
		LL_ASSERT(0);
    4af0:	4a0c      	ldr	r2, [pc, #48]	; (4b24 <recv_thread+0xd4>)
    4af2:	490d      	ldr	r1, [pc, #52]	; (4b28 <recv_thread+0xd8>)
    4af4:	2003      	movs	r0, #3
    4af6:	f7fd fb7b 	bl	21f0 <bt_log>
    4afa:	4040      	eors	r0, r0
    4afc:	f380 8811 	msr	BASEPRI, r0
    4b00:	f04f 0004 	mov.w	r0, #4
    4b04:	df02      	svc	2
				net_buf_unref(buf);
    4b06:	4620      	mov	r0, r4
    4b08:	f006 fe70 	bl	b7ec <net_buf_unref>
    4b0c:	e7ed      	b.n	4aea <recv_thread+0x9a>
    4b0e:	bf00      	nop
    4b10:	0000de5a 	.word	0x0000de5a
    4b14:	0000df8f 	.word	0x0000df8f
    4b18:	20005178 	.word	0x20005178
    4b1c:	0000dfa1 	.word	0x0000dfa1
    4b20:	0000dfb4 	.word	0x0000dfb4
    4b24:	0000de4e 	.word	0x0000de4e
    4b28:	0000d773 	.word	0x0000d773

00004b2c <hci_driver_send>:
{
    4b2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    4b2e:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    4b30:	f007 fa7e 	bl	c030 <_impl_k_current_get>
	BT_DBG("enter");
    4b34:	4a1c      	ldr	r2, [pc, #112]	; (4ba8 <hci_driver_send+0x7c>)
    4b36:	491d      	ldr	r1, [pc, #116]	; (4bac <hci_driver_send+0x80>)
    4b38:	4603      	mov	r3, r0
    4b3a:	2007      	movs	r0, #7
    4b3c:	f7fd fb58 	bl	21f0 <bt_log>
	if (!buf->len) {
    4b40:	89a3      	ldrh	r3, [r4, #12]
    4b42:	b93b      	cbnz	r3, 4b54 <hci_driver_send+0x28>
		BT_ERR("Empty HCI packet");
    4b44:	4a18      	ldr	r2, [pc, #96]	; (4ba8 <hci_driver_send+0x7c>)
    4b46:	491a      	ldr	r1, [pc, #104]	; (4bb0 <hci_driver_send+0x84>)
    4b48:	2003      	movs	r0, #3
    4b4a:	f7fd fb51 	bl	21f0 <bt_log>
		return -EINVAL;
    4b4e:	f06f 0015 	mvn.w	r0, #21
    4b52:	e021      	b.n	4b98 <hci_driver_send+0x6c>
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    4b54:	7d23      	ldrb	r3, [r4, #20]
	switch (type) {
    4b56:	bb0b      	cbnz	r3, 4b9c <hci_driver_send+0x70>
	evt = hci_cmd_handle(buf);
    4b58:	4620      	mov	r0, r4
    4b5a:	f000 faad 	bl	50b8 <hci_cmd_handle>
	if (evt) {
    4b5e:	4605      	mov	r5, r0
    4b60:	b160      	cbz	r0, 4b7c <hci_driver_send+0x50>
    4b62:	f007 fa65 	bl	c030 <_impl_k_current_get>
		BT_DBG("Replying with event of %u bytes", evt->len);
    4b66:	89ab      	ldrh	r3, [r5, #12]
    4b68:	9300      	str	r3, [sp, #0]
    4b6a:	4a12      	ldr	r2, [pc, #72]	; (4bb4 <hci_driver_send+0x88>)
    4b6c:	4912      	ldr	r1, [pc, #72]	; (4bb8 <hci_driver_send+0x8c>)
    4b6e:	4603      	mov	r3, r0
    4b70:	2007      	movs	r0, #7
    4b72:	f7fd fb3d 	bl	21f0 <bt_log>
		bt_recv_prio(evt);
    4b76:	4628      	mov	r0, r5
    4b78:	f7fe fcd2 	bl	3520 <bt_recv_prio>
		net_buf_unref(buf);
    4b7c:	4620      	mov	r0, r4
    4b7e:	f006 fe35 	bl	b7ec <net_buf_unref>
    4b82:	f007 fa55 	bl	c030 <_impl_k_current_get>
	BT_DBG("exit: %d", err);
    4b86:	2400      	movs	r4, #0
    4b88:	4603      	mov	r3, r0
    4b8a:	9400      	str	r4, [sp, #0]
    4b8c:	2007      	movs	r0, #7
    4b8e:	4a06      	ldr	r2, [pc, #24]	; (4ba8 <hci_driver_send+0x7c>)
    4b90:	490a      	ldr	r1, [pc, #40]	; (4bbc <hci_driver_send+0x90>)
    4b92:	f7fd fb2d 	bl	21f0 <bt_log>
	return err;
    4b96:	4620      	mov	r0, r4
}
    4b98:	b003      	add	sp, #12
    4b9a:	bd30      	pop	{r4, r5, pc}
		BT_ERR("Unknown HCI type %u", type);
    4b9c:	4a02      	ldr	r2, [pc, #8]	; (4ba8 <hci_driver_send+0x7c>)
    4b9e:	4908      	ldr	r1, [pc, #32]	; (4bc0 <hci_driver_send+0x94>)
    4ba0:	2003      	movs	r0, #3
    4ba2:	f7fd fb25 	bl	21f0 <bt_log>
    4ba6:	e7d2      	b.n	4b4e <hci_driver_send+0x22>
    4ba8:	0000de71 	.word	0x0000de71
    4bac:	0000ded7 	.word	0x0000ded7
    4bb0:	0000dee6 	.word	0x0000dee6
    4bb4:	0000de66 	.word	0x0000de66
    4bb8:	0000defb 	.word	0x0000defb
    4bbc:	0000df24 	.word	0x0000df24
    4bc0:	0000df36 	.word	0x0000df36

00004bc4 <prio_recv_thread>:
{
    4bc4:	b573      	push	{r0, r1, r4, r5, r6, lr}
		BT_DBG("sem take...");
    4bc6:	4c18      	ldr	r4, [pc, #96]	; (4c28 <prio_recv_thread+0x64>)
    4bc8:	4e18      	ldr	r6, [pc, #96]	; (4c2c <prio_recv_thread+0x68>)
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    4bca:	4d19      	ldr	r5, [pc, #100]	; (4c30 <prio_recv_thread+0x6c>)
		while ((num_cmplt = ll_rx_get(&node_rx, &handle))) {
    4bcc:	f10d 0102 	add.w	r1, sp, #2
    4bd0:	a801      	add	r0, sp, #4
    4bd2:	f004 ffbb 	bl	9b4c <ll_rx_get>
    4bd6:	2800      	cmp	r0, #0
    4bd8:	d1f8      	bne.n	4bcc <prio_recv_thread+0x8>
		if (node_rx) {
    4bda:	9b01      	ldr	r3, [sp, #4]
    4bdc:	b173      	cbz	r3, 4bfc <prio_recv_thread+0x38>
			ll_rx_dequeue();
    4bde:	f005 fb01 	bl	a1e4 <ll_rx_dequeue>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    4be2:	f007 fa25 	bl	c030 <_impl_k_current_get>
			BT_DBG("RX node enqueue");
    4be6:	4622      	mov	r2, r4
    4be8:	4603      	mov	r3, r0
    4bea:	4912      	ldr	r1, [pc, #72]	; (4c34 <prio_recv_thread+0x70>)
    4bec:	2007      	movs	r0, #7
    4bee:	f7fd faff 	bl	21f0 <bt_log>
			k_fifo_put(&recv_fifo, node_rx);
    4bf2:	9901      	ldr	r1, [sp, #4]
    4bf4:	4810      	ldr	r0, [pc, #64]	; (4c38 <prio_recv_thread+0x74>)
    4bf6:	f007 f82e 	bl	bc56 <k_queue_append>
    4bfa:	e7e7      	b.n	4bcc <prio_recv_thread+0x8>
    4bfc:	f007 fa18 	bl	c030 <_impl_k_current_get>
		BT_DBG("sem take...");
    4c00:	4622      	mov	r2, r4
    4c02:	4603      	mov	r3, r0
    4c04:	4631      	mov	r1, r6
    4c06:	2007      	movs	r0, #7
    4c08:	f7fd faf2 	bl	21f0 <bt_log>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    4c0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    4c10:	4628      	mov	r0, r5
    4c12:	f007 facb 	bl	c1ac <_impl_k_sem_take>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    4c16:	f007 fa0b 	bl	c030 <_impl_k_current_get>
		BT_DBG("sem taken");
    4c1a:	4622      	mov	r2, r4
    4c1c:	4603      	mov	r3, r0
    4c1e:	4907      	ldr	r1, [pc, #28]	; (4c3c <prio_recv_thread+0x78>)
    4c20:	2007      	movs	r0, #7
    4c22:	f7fd fae5 	bl	21f0 <bt_log>
    4c26:	e7d1      	b.n	4bcc <prio_recv_thread+0x8>
    4c28:	0000de3d 	.word	0x0000de3d
    4c2c:	0000df67 	.word	0x0000df67
    4c30:	20005160 	.word	0x20005160
    4c34:	0000df4e 	.word	0x0000df4e
    4c38:	20005178 	.word	0x20005178
    4c3c:	0000df7c 	.word	0x0000df7c

00004c40 <hci_driver_open>:
{
    4c40:	b510      	push	{r4, lr}
	err = ll_init(&sem_prio_recv);
    4c42:	481b      	ldr	r0, [pc, #108]	; (4cb0 <hci_driver_open+0x70>)
{
    4c44:	b086      	sub	sp, #24
	err = ll_init(&sem_prio_recv);
    4c46:	f005 fb8d 	bl	a364 <ll_init>
	if (err) {
    4c4a:	4604      	mov	r4, r0
    4c4c:	b140      	cbz	r0, 4c60 <hci_driver_open+0x20>
		BT_ERR("LL initialization failed: %u", err);
    4c4e:	4a19      	ldr	r2, [pc, #100]	; (4cb4 <hci_driver_open+0x74>)
    4c50:	4919      	ldr	r1, [pc, #100]	; (4cb8 <hci_driver_open+0x78>)
    4c52:	4603      	mov	r3, r0
    4c54:	2003      	movs	r0, #3
	BT_DBG("Success.");
    4c56:	f7fd facb 	bl	21f0 <bt_log>
}
    4c5a:	4620      	mov	r0, r4
    4c5c:	b006      	add	sp, #24
    4c5e:	bd10      	pop	{r4, pc}
	hci_init(NULL);
    4c60:	f000 fe12 	bl	5888 <hci_init>

    4c64:	f06f 0309 	mvn.w	r3, #9
    4c68:	9303      	str	r3, [sp, #12]
    4c6a:	f44f 723b 	mov.w	r2, #748	; 0x2ec
    4c6e:	4b13      	ldr	r3, [pc, #76]	; (4cbc <hci_driver_open+0x7c>)
    4c70:	4913      	ldr	r1, [pc, #76]	; (4cc0 <hci_driver_open+0x80>)
    4c72:	9405      	str	r4, [sp, #20]
    4c74:	9404      	str	r4, [sp, #16]
    4c76:	9402      	str	r4, [sp, #8]
    4c78:	9401      	str	r4, [sp, #4]
    4c7a:	9400      	str	r4, [sp, #0]
    4c7c:	4811      	ldr	r0, [pc, #68]	; (4cc4 <hci_driver_open+0x84>)
    4c7e:	f007 fc71 	bl	c564 <_impl_k_thread_create>
    4c82:	f06f 0307 	mvn.w	r3, #7
    4c86:	f240 522c 	movw	r2, #1324	; 0x52c
    4c8a:	490f      	ldr	r1, [pc, #60]	; (4cc8 <hci_driver_open+0x88>)
    4c8c:	9303      	str	r3, [sp, #12]
    4c8e:	9405      	str	r4, [sp, #20]
    4c90:	4b0e      	ldr	r3, [pc, #56]	; (4ccc <hci_driver_open+0x8c>)
    4c92:	9404      	str	r4, [sp, #16]
    4c94:	9402      	str	r4, [sp, #8]
    4c96:	9401      	str	r4, [sp, #4]
    4c98:	9400      	str	r4, [sp, #0]
    4c9a:	480d      	ldr	r0, [pc, #52]	; (4cd0 <hci_driver_open+0x90>)
    4c9c:	f007 fc62 	bl	c564 <_impl_k_thread_create>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    4ca0:	f007 f9c6 	bl	c030 <_impl_k_current_get>
	BT_DBG("Success.");
    4ca4:	4a03      	ldr	r2, [pc, #12]	; (4cb4 <hci_driver_open+0x74>)
    4ca6:	490b      	ldr	r1, [pc, #44]	; (4cd4 <hci_driver_open+0x94>)
    4ca8:	4603      	mov	r3, r0
    4caa:	2007      	movs	r0, #7
    4cac:	e7d3      	b.n	4c56 <hci_driver_open+0x16>
    4cae:	bf00      	nop
    4cb0:	20005160 	.word	0x20005160
    4cb4:	0000de81 	.word	0x0000de81
    4cb8:	0000dea4 	.word	0x0000dea4
    4cbc:	00004bc5 	.word	0x00004bc5
    4cc0:	20003398 	.word	0x20003398
    4cc4:	20002c0c 	.word	0x20002c0c
    4cc8:	20003688 	.word	0x20003688
    4ccc:	00004a51 	.word	0x00004a51
    4cd0:	20002ba4 	.word	0x20002ba4
    4cd4:	0000dec5 	.word	0x0000dec5

00004cd8 <sys_put_le32>:
	dst[1] = val >> 8;
    4cd8:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
    4cdc:	7008      	strb	r0, [r1, #0]
	sys_put_le16(val >> 16, &dst[2]);
    4cde:	0c00      	lsrs	r0, r0, #16
	dst[0] = val;
    4ce0:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
    4ce2:	0a00      	lsrs	r0, r0, #8
    4ce4:	704b      	strb	r3, [r1, #1]
    4ce6:	70c8      	strb	r0, [r1, #3]
    4ce8:	4770      	bx	lr

00004cea <evt_create>:
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
			     u16_t handle, struct net_buf *buf);
#endif /* CONFIG_BT_CONN */

static void evt_create(struct net_buf *buf, u8_t evt, u8_t len)
{
    4cea:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_hdr *hdr;

	hdr = net_buf_add(buf, sizeof(*hdr));
    4cec:	3008      	adds	r0, #8
{
    4cee:	460d      	mov	r5, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
    4cf0:	2102      	movs	r1, #2
{
    4cf2:	4614      	mov	r4, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
    4cf4:	f006 fdac 	bl	b850 <net_buf_simple_add>
	hdr->evt = evt;
    4cf8:	7005      	strb	r5, [r0, #0]
	hdr->len = len;
    4cfa:	7044      	strb	r4, [r0, #1]
    4cfc:	bd38      	pop	{r3, r4, r5, pc}
	...

00004d00 <cmd_complete>:
}

static void *cmd_complete(struct net_buf **buf, u8_t plen)
{
    4d00:	b538      	push	{r3, r4, r5, lr}
    4d02:	4604      	mov	r4, r0
	struct bt_hci_evt_cmd_complete *cc;

	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    4d04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
{
    4d08:	460d      	mov	r5, r1
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    4d0a:	f7fe fe09 	bl	3920 <bt_buf_get_cmd_complete>

	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    4d0e:	1cea      	adds	r2, r5, #3
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    4d10:	6020      	str	r0, [r4, #0]
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    4d12:	b2d2      	uxtb	r2, r2
    4d14:	210e      	movs	r1, #14
    4d16:	f7ff ffe8 	bl	4cea <evt_create>

	cc = net_buf_add(*buf, sizeof(*cc));
    4d1a:	6820      	ldr	r0, [r4, #0]
    4d1c:	2103      	movs	r1, #3
    4d1e:	3008      	adds	r0, #8
    4d20:	f006 fd96 	bl	b850 <net_buf_simple_add>
	cc->ncmd = 1;
    4d24:	2301      	movs	r3, #1
    4d26:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(_opcode);
    4d28:	4b05      	ldr	r3, [pc, #20]	; (4d40 <cmd_complete+0x40>)
    4d2a:	881b      	ldrh	r3, [r3, #0]
    4d2c:	f8a0 3001 	strh.w	r3, [r0, #1]

	return net_buf_add(*buf, plen);
    4d30:	6820      	ldr	r0, [r4, #0]
    4d32:	4629      	mov	r1, r5
    4d34:	3008      	adds	r0, #8
}
    4d36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_buf_add(*buf, plen);
    4d3a:	f006 bd89 	b.w	b850 <net_buf_simple_add>
    4d3e:	bf00      	nop
    4d40:	200009f4 	.word	0x200009f4

00004d44 <meta_evt>:
	return buf;
}
#endif

static void *meta_evt(struct net_buf *buf, u8_t subevt, u8_t melen)
{
    4d44:	b570      	push	{r4, r5, r6, lr}
    4d46:	4604      	mov	r4, r0
    4d48:	4615      	mov	r5, r2
	struct bt_hci_evt_le_meta_event *me;

	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    4d4a:	3201      	adds	r2, #1
{
    4d4c:	460e      	mov	r6, r1
	me = net_buf_add(buf, sizeof(*me));
    4d4e:	3408      	adds	r4, #8
	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    4d50:	b2d2      	uxtb	r2, r2
    4d52:	213e      	movs	r1, #62	; 0x3e
    4d54:	f7ff ffc9 	bl	4cea <evt_create>
	me = net_buf_add(buf, sizeof(*me));
    4d58:	2101      	movs	r1, #1
    4d5a:	4620      	mov	r0, r4
    4d5c:	f006 fd78 	bl	b850 <net_buf_simple_add>
	me->subevent = subevt;
    4d60:	7006      	strb	r6, [r0, #0]

	return net_buf_add(buf, melen);
    4d62:	4629      	mov	r1, r5
    4d64:	4620      	mov	r0, r4
}
    4d66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return net_buf_add(buf, melen);
    4d6a:	f006 bd71 	b.w	b850 <net_buf_simple_add>
	...

00004d70 <le_advertising_report>:
}
#endif /* CONFIG_BT_CTLR_DUP_FILTER_LEN > 0 */

static void le_advertising_report(struct pdu_data *pdu_data, u8_t *b,
				  struct net_buf *buf)
{
    4d70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    4d72:	2301      	movs	r3, #1
    4d74:	f88d 3001 	strb.w	r3, [sp, #1]
    4d78:	2303      	movs	r3, #3
    4d7a:	f88d 3002 	strb.w	r3, [sp, #2]
    4d7e:	23ff      	movs	r3, #255	; 0xff
    4d80:	f88d 3003 	strb.w	r3, [sp, #3]
    4d84:	f88d 3005 	strb.w	r3, [sp, #5]
    4d88:	2302      	movs	r3, #2
    4d8a:	f88d 3006 	strb.w	r3, [sp, #6]
	if (adv->tx_addr) {
		ll_rl_crpa_set(0x00, NULL, rl_idx, &adv->adv_ind.addr[0]);
	}
#endif

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    4d8e:	4b25      	ldr	r3, [pc, #148]	; (4e24 <le_advertising_report+0xb4>)
{
    4d90:	4607      	mov	r7, r0
    4d92:	4610      	mov	r0, r2
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    4d94:	2204      	movs	r2, #4
    4d96:	f88d 2004 	strb.w	r2, [sp, #4]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    4d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
    4d9e:	2200      	movs	r2, #0
    4da0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    4da4:	2400      	movs	r4, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    4da6:	4313      	orrs	r3, r2
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    4da8:	f88d 4000 	strb.w	r4, [sp]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    4dac:	d038      	beq.n	4e20 <le_advertising_report+0xb0>
	if ((!direct && !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) ||
	    (direct && !(le_event_mask & BT_HCI_EVT_LE_DIRECT_ADV_REPORT))) {
		return;
	}
#else
	if (!(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) {
    4dae:	4b1e      	ldr	r3, [pc, #120]	; (4e28 <le_advertising_report+0xb8>)
    4db0:	e9d3 2300 	ldrd	r2, r3, [r3]
    4db4:	2300      	movs	r3, #0
    4db6:	f002 0202 	and.w	r2, r2, #2
    4dba:	4313      	orrs	r3, r2
    4dbc:	d030      	beq.n	4e20 <le_advertising_report+0xb0>
	if (dup_found(adv)) {
		return;
	}
#endif /* CONFIG_BT_CTLR_DUP_FILTER_LEN > 0 */

	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    4dbe:	783b      	ldrb	r3, [r7, #0]
    4dc0:	f003 030f 	and.w	r3, r3, #15
    4dc4:	2b01      	cmp	r3, #1
    4dc6:	787b      	ldrb	r3, [r7, #1]
		data_len = (adv->len - BDADDR_SIZE);
    4dc8:	bf1c      	itt	ne
    4dca:	1f9c      	subne	r4, r3, #6
    4dcc:	b2e4      	uxtbne	r4, r4
	} else {
		data_len = 0;
	}

	/* The Link Layer currently returns RSSI as an absolute value */
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    4dce:	4419      	add	r1, r3
	}
#endif /* CONFIG_BT_CTLR_EXT_SCAN_FP */

	info_len = sizeof(struct bt_hci_evt_le_advertising_info) + data_len +
		   sizeof(*prssi);
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    4dd0:	f104 020b 	add.w	r2, r4, #11
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    4dd4:	7a8e      	ldrb	r6, [r1, #10]
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    4dd6:	b2d2      	uxtb	r2, r2
    4dd8:	2102      	movs	r1, #2
    4dda:	f7ff ffb3 	bl	4d44 <meta_evt>
		       sizeof(*sep) + info_len);

	sep->num_reports = 1;
    4dde:	2301      	movs	r3, #1
    4de0:	7003      	strb	r3, [r0, #0]
	adv_info = (void *)(((u8_t *)sep) + sizeof(*sep));

	adv_info->evt_type = c_adv_type[adv->type];
    4de2:	783b      	ldrb	r3, [r7, #0]
    4de4:	aa02      	add	r2, sp, #8
    4de6:	f003 030f 	and.w	r3, r3, #15
    4dea:	4413      	add	r3, r2
	} else {
#else
	if (1) {
#endif /* CONFIG_BT_CTLR_PRIVACY */

		adv_info->addr.type = adv->tx_addr;
    4dec:	4639      	mov	r1, r7
	adv_info->evt_type = c_adv_type[adv->type];
    4dee:	f813 3c08 	ldrb.w	r3, [r3, #-8]
    4df2:	7043      	strb	r3, [r0, #1]
		adv_info->addr.type = adv->tx_addr;
    4df4:	f811 3b02 	ldrb.w	r3, [r1], #2
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    4df8:	4605      	mov	r5, r0
		adv_info->addr.type = adv->tx_addr;
    4dfa:	f3c3 1380 	ubfx	r3, r3, #6, #1
    4dfe:	7083      	strb	r3, [r0, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
    4e00:	2206      	movs	r2, #6
    4e02:	3003      	adds	r0, #3
    4e04:	f7fb fc09 	bl	61a <memcpy>
		       sizeof(bt_addr_t));
	}

	adv_info->length = data_len;
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    4e08:	350a      	adds	r5, #10
	adv_info->length = data_len;
    4e0a:	f805 4c01 	strb.w	r4, [r5, #-1]
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    4e0e:	4276      	negs	r6, r6
    4e10:	b276      	sxtb	r6, r6
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    4e12:	4622      	mov	r2, r4
    4e14:	f107 0108 	add.w	r1, r7, #8
    4e18:	4628      	mov	r0, r5
    4e1a:	f7fb fbfe 	bl	61a <memcpy>
	/* RSSI */
	prssi = &adv_info->data[0] + data_len;
	*prssi = rssi;
    4e1e:	552e      	strb	r6, [r5, r4]
}
    4e20:	b003      	add	sp, #12
    4e22:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4e24:	20004f20 	.word	0x20004f20
    4e28:	20004f28 	.word	0x20004f28

00004e2c <le_set_adv_param.isra.21>:
static void le_set_adv_param(struct net_buf *buf, struct net_buf **evt)
    4e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e2e:	b08b      	sub	sp, #44	; 0x2c
	status = ll_adv_params_set(cmd->handle, cmd->props, min_interval,
    4e30:	2400      	movs	r4, #0
    4e32:	7a03      	ldrb	r3, [r0, #8]
    4e34:	f8b0 2003 	ldrh.w	r2, [r0, #3]
    4e38:	7806      	ldrb	r6, [r0, #0]
static void le_set_adv_param(struct net_buf *buf, struct net_buf **evt)
    4e3a:	460d      	mov	r5, r1
	status = ll_adv_params_set(cmd->handle, cmd->props, min_interval,
    4e3c:	f8b0 1001 	ldrh.w	r1, [r0, #1]
    4e40:	9409      	str	r4, [sp, #36]	; 0x24
    4e42:	7d47      	ldrb	r7, [r0, #21]
    4e44:	9708      	str	r7, [sp, #32]
    4e46:	7d07      	ldrb	r7, [r0, #20]
    4e48:	9707      	str	r7, [sp, #28]
    4e4a:	7cc7      	ldrb	r7, [r0, #19]
    4e4c:	9706      	str	r7, [sp, #24]
    4e4e:	7c87      	ldrb	r7, [r0, #18]
    4e50:	9705      	str	r7, [sp, #20]
    4e52:	9404      	str	r4, [sp, #16]
    4e54:	7c04      	ldrb	r4, [r0, #16]
    4e56:	9403      	str	r4, [sp, #12]
    4e58:	79c4      	ldrb	r4, [r0, #7]
    4e5a:	9402      	str	r4, [sp, #8]
				   &cmd->direct_addr.a.val[0], cmd->prim_channel_map,
    4e5c:	f100 040a 	add.w	r4, r0, #10
	status = ll_adv_params_set(cmd->handle, cmd->props, min_interval,
    4e60:	9401      	str	r4, [sp, #4]
    4e62:	7a40      	ldrb	r0, [r0, #9]
    4e64:	9000      	str	r0, [sp, #0]
    4e66:	4630      	mov	r0, r6
    4e68:	f005 fb1a 	bl	a4a0 <ll_adv_params_set>
	ccst = cmd_complete(evt, sizeof(*ccst));
    4e6c:	2102      	movs	r1, #2
	status = ll_adv_params_set(cmd->handle, cmd->props, min_interval,
    4e6e:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    4e70:	4628      	mov	r0, r5
    4e72:	f7ff ff45 	bl	4d00 <cmd_complete>
	status = ll_adv_params_set(cmd->handle, cmd->props, min_interval,
    4e76:	7004      	strb	r4, [r0, #0]
}
    4e78:	b00b      	add	sp, #44	; 0x2c
    4e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004e7c <le_set_adv_enable.isra.25>:
static void le_set_adv_enable(struct net_buf *buf, struct net_buf **evt)
    4e7c:	b538      	push	{r3, r4, r5, lr}
	status = ll_adv_enable(cmd->enable);
    4e7e:	7800      	ldrb	r0, [r0, #0]
static void le_set_adv_enable(struct net_buf *buf, struct net_buf **evt)
    4e80:	460d      	mov	r5, r1
	status = ll_adv_enable(cmd->enable);
    4e82:	f005 fd73 	bl	a96c <ll_adv_enable>
	ccst = cmd_complete(evt, sizeof(*ccst));
    4e86:	2101      	movs	r1, #1
	status = ll_adv_enable(cmd->enable);
    4e88:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    4e8a:	4628      	mov	r0, r5
    4e8c:	f7ff ff38 	bl	4d00 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    4e90:	2c00      	cmp	r4, #0
    4e92:	bf0c      	ite	eq
    4e94:	2300      	moveq	r3, #0
    4e96:	230c      	movne	r3, #12
    4e98:	7003      	strb	r3, [r0, #0]
    4e9a:	bd38      	pop	{r3, r4, r5, pc}

00004e9c <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
    4e9c:	b570      	push	{r4, r5, r6, lr}
    4e9e:	4604      	mov	r4, r0
    4ea0:	4618      	mov	r0, r3
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    4ea2:	4b13      	ldr	r3, [pc, #76]	; (4ef0 <le_remote_feat_complete+0x54>)
{
    4ea4:	4616      	mov	r6, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    4ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
    4eaa:	2200      	movs	r2, #0
    4eac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    4eb0:	4313      	orrs	r3, r2
{
    4eb2:	460d      	mov	r5, r1
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    4eb4:	d01b      	beq.n	4eee <le_remote_feat_complete+0x52>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    4eb6:	4b0f      	ldr	r3, [pc, #60]	; (4ef4 <le_remote_feat_complete+0x58>)
    4eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
    4ebc:	2300      	movs	r3, #0
    4ebe:	f002 0208 	and.w	r2, r2, #8
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    4ec2:	4313      	orrs	r3, r2
    4ec4:	d013      	beq.n	4eee <le_remote_feat_complete+0x52>
		return;
	}

	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
    4ec6:	220b      	movs	r2, #11
    4ec8:	2104      	movs	r1, #4
    4eca:	f7ff ff3b 	bl	4d44 <meta_evt>

	sep->status = status;
	sep->handle = sys_cpu_to_le16(handle);
	if (!status) {
		memcpy(&sep->features[0],
    4ece:	2208      	movs	r2, #8
	sep->status = status;
    4ed0:	7004      	strb	r4, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    4ed2:	f8a0 6001 	strh.w	r6, [r0, #1]
    4ed6:	3003      	adds	r0, #3
	if (!status) {
    4ed8:	b924      	cbnz	r4, 4ee4 <le_remote_feat_complete+0x48>
		memcpy(&sep->features[0],
    4eda:	1d29      	adds	r1, r5, #4
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
    4edc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(&sep->features[0],
    4ee0:	f7fb bb9b 	b.w	61a <memcpy>
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    4ee4:	2100      	movs	r1, #0
}
    4ee6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    4eea:	f7fb bbc2 	b.w	672 <memset>
    4eee:	bd70      	pop	{r4, r5, r6, pc}
    4ef0:	20004f20 	.word	0x20004f20
    4ef4:	20004f28 	.word	0x20004f28

00004ef8 <bt_addr_le_to_str.constprop.37>:
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    4ef8:	b570      	push	{r4, r5, r6, lr}
	switch (addr->type) {
    4efa:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    4efc:	b08a      	sub	sp, #40	; 0x28
    4efe:	4604      	mov	r4, r0
    4f00:	460e      	mov	r6, r1
    4f02:	ad07      	add	r5, sp, #28
	switch (addr->type) {
    4f04:	2b03      	cmp	r3, #3
    4f06:	d820      	bhi.n	4f4a <bt_addr_le_to_str.constprop.37+0x52>
    4f08:	e8df f003 	tbb	[pc, r3]
    4f0c:	1d1b1902 	.word	0x1d1b1902
		strcpy(type, "public");
    4f10:	4911      	ldr	r1, [pc, #68]	; (4f58 <bt_addr_le_to_str.constprop.37+0x60>)
		strcpy(type, "random");
    4f12:	4628      	mov	r0, r5
    4f14:	f7fb fb44 	bl	5a0 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    4f18:	7862      	ldrb	r2, [r4, #1]
    4f1a:	9204      	str	r2, [sp, #16]
    4f1c:	78a2      	ldrb	r2, [r4, #2]
    4f1e:	9203      	str	r2, [sp, #12]
    4f20:	78e2      	ldrb	r2, [r4, #3]
    4f22:	9202      	str	r2, [sp, #8]
    4f24:	7922      	ldrb	r2, [r4, #4]
    4f26:	9201      	str	r2, [sp, #4]
    4f28:	7962      	ldrb	r2, [r4, #5]
    4f2a:	9200      	str	r2, [sp, #0]
    4f2c:	79a3      	ldrb	r3, [r4, #6]
    4f2e:	9505      	str	r5, [sp, #20]
    4f30:	4a0a      	ldr	r2, [pc, #40]	; (4f5c <bt_addr_le_to_str.constprop.37+0x64>)
    4f32:	211b      	movs	r1, #27
    4f34:	4630      	mov	r0, r6
    4f36:	f7fc f9fb 	bl	1330 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    4f3a:	b00a      	add	sp, #40	; 0x28
    4f3c:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    4f3e:	4908      	ldr	r1, [pc, #32]	; (4f60 <bt_addr_le_to_str.constprop.37+0x68>)
    4f40:	e7e7      	b.n	4f12 <bt_addr_le_to_str.constprop.37+0x1a>
		strcpy(type, "public id");
    4f42:	4908      	ldr	r1, [pc, #32]	; (4f64 <bt_addr_le_to_str.constprop.37+0x6c>)
    4f44:	e7e5      	b.n	4f12 <bt_addr_le_to_str.constprop.37+0x1a>
		strcpy(type, "random id");
    4f46:	4908      	ldr	r1, [pc, #32]	; (4f68 <bt_addr_le_to_str.constprop.37+0x70>)
    4f48:	e7e3      	b.n	4f12 <bt_addr_le_to_str.constprop.37+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    4f4a:	4a08      	ldr	r2, [pc, #32]	; (4f6c <bt_addr_le_to_str.constprop.37+0x74>)
    4f4c:	210a      	movs	r1, #10
    4f4e:	4628      	mov	r0, r5
    4f50:	f7fc f9ee 	bl	1330 <snprintk>
    4f54:	e7e0      	b.n	4f18 <bt_addr_le_to_str.constprop.37+0x20>
    4f56:	bf00      	nop
    4f58:	0000d1e6 	.word	0x0000d1e6
    4f5c:	0000d208 	.word	0x0000d208
    4f60:	0000d1ed 	.word	0x0000d1ed
    4f64:	0000d1f4 	.word	0x0000d1f4
    4f68:	0000d1fe 	.word	0x0000d1fe
    4f6c:	0000e12f 	.word	0x0000e12f

00004f70 <le_adv_ext_report>:
{
    4f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4f74:	460d      	mov	r5, r1
		  offsetof(struct pdu_adv, payload) + adv->len];
    4f76:	7841      	ldrb	r1, [r0, #1]
{
    4f78:	4616      	mov	r6, r2
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    4f7a:	186a      	adds	r2, r5, r1
{
    4f7c:	b090      	sub	sp, #64	; 0x40
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    4f7e:	7a97      	ldrb	r7, [r2, #10]
    4f80:	427f      	negs	r7, r7
    4f82:	b27f      	sxtb	r7, r7
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    4f84:	9704      	str	r7, [sp, #16]
    4f86:	7802      	ldrb	r2, [r0, #0]
    4f88:	9101      	str	r1, [sp, #4]
{
    4f8a:	4604      	mov	r4, r0
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    4f8c:	09d0      	lsrs	r0, r2, #7
    4f8e:	9003      	str	r0, [sp, #12]
    4f90:	f3c2 1080 	ubfx	r0, r2, #6, #1
    4f94:	f002 020f 	and.w	r2, r2, #15
    4f98:	9002      	str	r0, [sp, #8]
    4f9a:	9200      	str	r2, [sp, #0]
    4f9c:	493f      	ldr	r1, [pc, #252]	; (509c <le_adv_ext_report+0x12c>)
    4f9e:	4a40      	ldr	r2, [pc, #256]	; (50a0 <le_adv_ext_report+0x130>)
    4fa0:	2004      	movs	r0, #4
    4fa2:	f7fd f925 	bl	21f0 <bt_log>
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    4fa6:	7823      	ldrb	r3, [r4, #0]
    4fa8:	f003 030f 	and.w	r3, r3, #15
    4fac:	2b07      	cmp	r3, #7
    4fae:	d16e      	bne.n	508e <le_adv_ext_report+0x11e>
    4fb0:	7863      	ldrb	r3, [r4, #1]
    4fb2:	2b00      	cmp	r3, #0
    4fb4:	d06b      	beq.n	508e <le_adv_ext_report+0x11e>
		BT_WARN("Ext. adv mode= 0x%x, hdr len= %u", p->adv_mode,
    4fb6:	78a3      	ldrb	r3, [r4, #2]
    4fb8:	493a      	ldr	r1, [pc, #232]	; (50a4 <le_adv_ext_report+0x134>)
    4fba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    4fbe:	9200      	str	r2, [sp, #0]
    4fc0:	099b      	lsrs	r3, r3, #6
    4fc2:	2004      	movs	r0, #4
    4fc4:	4a36      	ldr	r2, [pc, #216]	; (50a0 <le_adv_ext_report+0x130>)
    4fc6:	f7fd f913 	bl	21f0 <bt_log>
		if (!p->ext_hdr_len) {
    4fca:	78a3      	ldrb	r3, [r4, #2]
    4fcc:	0698      	lsls	r0, r3, #26
    4fce:	d05b      	beq.n	5088 <le_adv_ext_report+0x118>
		if (h->adv_addr) {
    4fd0:	78e3      	ldrb	r3, [r4, #3]
    4fd2:	07d9      	lsls	r1, r3, #31
		ptr = (u8_t *)h + sizeof(*h);
    4fd4:	f104 0504 	add.w	r5, r4, #4
		if (h->adv_addr) {
    4fd8:	d518      	bpl.n	500c <le_adv_ext_report+0x9c>
			addr.type = adv->tx_addr;
    4fda:	7823      	ldrb	r3, [r4, #0]
    4fdc:	f10d 0840 	add.w	r8, sp, #64	; 0x40
    4fe0:	f3c3 1380 	ubfx	r3, r3, #6, #1
    4fe4:	f808 3d24 	strb.w	r3, [r8, #-36]!
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    4fe8:	2206      	movs	r2, #6
    4fea:	4629      	mov	r1, r5
    4fec:	f10d 001d 	add.w	r0, sp, #29
    4ff0:	f7fb fb13 	bl	61a <memcpy>
			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    4ff4:	a909      	add	r1, sp, #36	; 0x24
    4ff6:	4640      	mov	r0, r8
    4ff8:	f7ff ff7e 	bl	4ef8 <bt_addr_le_to_str.constprop.37>
			BT_WARN("AdvA: %s", addr_str);
    4ffc:	ab09      	add	r3, sp, #36	; 0x24
    4ffe:	4a28      	ldr	r2, [pc, #160]	; (50a0 <le_adv_ext_report+0x130>)
    5000:	4929      	ldr	r1, [pc, #164]	; (50a8 <le_adv_ext_report+0x138>)
    5002:	2004      	movs	r0, #4
			ptr += BDADDR_SIZE;
    5004:	f104 050a 	add.w	r5, r4, #10
			BT_WARN("AdvA: %s", addr_str);
    5008:	f7fd f8f2 	bl	21f0 <bt_log>
		if(h->tgt_addr){
    500c:	78e3      	ldrb	r3, [r4, #3]
    500e:	079a      	lsls	r2, r3, #30
			ptr += BDADDR_SIZE;
    5010:	bf48      	it	mi
    5012:	3506      	addmi	r5, #6
		if(h->adi){
    5014:	0718      	lsls	r0, r3, #28
			ptr += sizeof(*adi_ptr);
    5016:	bf48      	it	mi
    5018:	3502      	addmi	r5, #2
		if(h->aux_ptr){
    501a:	06d9      	lsls	r1, r3, #27
			ptr += sizeof(*ap);
    501c:	bf48      	it	mi
    501e:	3503      	addmi	r5, #3
		if (h->tx_pwr) {
    5020:	065a      	lsls	r2, r3, #25
    5022:	d506      	bpl.n	5032 <le_adv_ext_report+0xc2>
			BT_WARN("Tx pwr= %d dB", tx_pwr);
    5024:	f915 3b01 	ldrsb.w	r3, [r5], #1
    5028:	4a1d      	ldr	r2, [pc, #116]	; (50a0 <le_adv_ext_report+0x130>)
    502a:	4920      	ldr	r1, [pc, #128]	; (50ac <le_adv_ext_report+0x13c>)
    502c:	2004      	movs	r0, #4
    502e:	f7fd f8df 	bl	21f0 <bt_log>
		data_len = adv->len -(p->ext_hdr_len + offsetof(struct pdu_adv_com_ext_adv,
    5032:	78a2      	ldrb	r2, [r4, #2]
    5034:	f3c2 0305 	ubfx	r3, r2, #0, #6
    5038:	7862      	ldrb	r2, [r4, #1]
    503a:	1ad2      	subs	r2, r2, r3
    503c:	b2d2      	uxtb	r2, r2
    503e:	f102 38ff 	add.w	r8, r2, #4294967295	; 0xffffffff
		sep = meta_evt(buf, BT_HCI_EVT_LE_EXT_ADVERTISING_REPORT,
    5042:	3218      	adds	r2, #24
    5044:	4630      	mov	r0, r6
    5046:	b2d2      	uxtb	r2, r2
    5048:	210d      	movs	r1, #13
    504a:	f7ff fe7b 	bl	4d44 <meta_evt>
		sep->num_reports = 1;
    504e:	2301      	movs	r3, #1
    5050:	7003      	strb	r3, [r0, #0]
		if(h->adv_addr){
    5052:	78e3      	ldrb	r3, [r4, #3]
    5054:	07db      	lsls	r3, r3, #31
		data_len = adv->len -(p->ext_hdr_len + offsetof(struct pdu_adv_com_ext_adv,
    5056:	fa5f f888 	uxtb.w	r8, r8
		sep = meta_evt(buf, BT_HCI_EVT_LE_EXT_ADVERTISING_REPORT,
    505a:	4606      	mov	r6, r0
		if(h->adv_addr){
    505c:	d508      	bpl.n	5070 <le_adv_ext_report+0x100>
			adv_info->addr.type = addr.type;
    505e:	f89d 301c 	ldrb.w	r3, [sp, #28]
    5062:	7083      	strb	r3, [r0, #2]
			memcpy(&adv_info->addr.a.val[0], &addr.a.val[0],
    5064:	2206      	movs	r2, #6
    5066:	f10d 011d 	add.w	r1, sp, #29
    506a:	3003      	adds	r0, #3
    506c:	f7fb fad5 	bl	61a <memcpy>
		adv_info->evt_type = 0x07;
    5070:	2307      	movs	r3, #7
    5072:	7073      	strb	r3, [r6, #1]
		adv_info->length = data_len;
    5074:	f886 8017 	strb.w	r8, [r6, #23]
		memcpy(&adv_info->data[0], ptr, data_len);
    5078:	3618      	adds	r6, #24
    507a:	4642      	mov	r2, r8
    507c:	4629      	mov	r1, r5
    507e:	4630      	mov	r0, r6
    5080:	f7fb facb 	bl	61a <memcpy>
		*prssi = rssi;
    5084:	f806 7008 	strb.w	r7, [r6, r8]
}
    5088:	b010      	add	sp, #64	; 0x40
    508a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		le_advertising_report(pdu_data, b, buf);
    508e:	4632      	mov	r2, r6
    5090:	4629      	mov	r1, r5
    5092:	4620      	mov	r0, r4
    5094:	f7ff fe6c 	bl	4d70 <le_advertising_report>
	return;
    5098:	e7f6      	b.n	5088 <le_adv_ext_report+0x118>
    509a:	bf00      	nop
    509c:	0000e136 	.word	0x0000e136
    50a0:	0000e005 	.word	0x0000e005
    50a4:	0000e177 	.word	0x0000e177
    50a8:	0000e19c 	.word	0x0000e19c
    50ac:	0000e1a9 	.word	0x0000e1a9

000050b0 <sys_get_le64>:
{
    50b0:	4603      	mov	r3, r0
}
    50b2:	6800      	ldr	r0, [r0, #0]
    50b4:	6859      	ldr	r1, [r3, #4]
    50b6:	4770      	bx	lr

000050b8 <hci_cmd_handle>:
{
    50b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
    50ba:	8981      	ldrh	r1, [r0, #12]
{
    50bc:	b08f      	sub	sp, #60	; 0x3c
	struct net_buf *evt = NULL;
    50be:	2500      	movs	r5, #0
	if (cmd->len < sizeof(*chdr)) {
    50c0:	2902      	cmp	r1, #2
{
    50c2:	4604      	mov	r4, r0
	struct net_buf *evt = NULL;
    50c4:	9503      	str	r5, [sp, #12]
	if (cmd->len < sizeof(*chdr)) {
    50c6:	d807      	bhi.n	50d8 <hci_cmd_handle+0x20>
		BT_ERR("No HCI Command header");
    50c8:	4ac1      	ldr	r2, [pc, #772]	; (53d0 <hci_cmd_handle+0x318>)
    50ca:	49c2      	ldr	r1, [pc, #776]	; (53d4 <hci_cmd_handle+0x31c>)
		BT_ERR("Invalid HCI CMD packet length");
    50cc:	2003      	movs	r0, #3
    50ce:	f7fd f88f 	bl	21f0 <bt_log>
		return NULL;
    50d2:	4628      	mov	r0, r5
}
    50d4:	b00f      	add	sp, #60	; 0x3c
    50d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chdr = (void *)cmd->data;
    50d8:	6883      	ldr	r3, [r0, #8]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    50da:	4ebf      	ldr	r6, [pc, #764]	; (53d8 <hci_cmd_handle+0x320>)
    50dc:	781a      	ldrb	r2, [r3, #0]
    50de:	7858      	ldrb	r0, [r3, #1]
	if (cmd->len < chdr->param_len) {
    50e0:	789b      	ldrb	r3, [r3, #2]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    50e2:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	if (cmd->len < chdr->param_len) {
    50e6:	428b      	cmp	r3, r1
	_opcode = sys_le16_to_cpu(chdr->opcode);
    50e8:	8032      	strh	r2, [r6, #0]
	if (cmd->len < chdr->param_len) {
    50ea:	d902      	bls.n	50f2 <hci_cmd_handle+0x3a>
		BT_ERR("Invalid HCI CMD packet length");
    50ec:	4ab8      	ldr	r2, [pc, #736]	; (53d0 <hci_cmd_handle+0x318>)
    50ee:	49bb      	ldr	r1, [pc, #748]	; (53dc <hci_cmd_handle+0x324>)
    50f0:	e7ec      	b.n	50cc <hci_cmd_handle+0x14>
	net_buf_pull(cmd, sizeof(*chdr));
    50f2:	2103      	movs	r1, #3
    50f4:	f104 0008 	add.w	r0, r4, #8
    50f8:	f006 fbc1 	bl	b87e <net_buf_simple_pull>
	ocf = BT_OCF(_opcode);
    50fc:	8833      	ldrh	r3, [r6, #0]
    50fe:	f3c3 0209 	ubfx	r2, r3, #0, #10
	switch (BT_OGF(_opcode)) {
    5102:	0a9b      	lsrs	r3, r3, #10
    5104:	2b04      	cmp	r3, #4
    5106:	d06b      	beq.n	51e0 <hci_cmd_handle+0x128>
    5108:	d80e      	bhi.n	5128 <hci_cmd_handle+0x70>
    510a:	2b03      	cmp	r3, #3
    510c:	d02c      	beq.n	5168 <hci_cmd_handle+0xb0>
		ccst = cmd_complete(&evt, sizeof(*ccst));
    510e:	2101      	movs	r1, #1
    5110:	a803      	add	r0, sp, #12
    5112:	f7ff fdf5 	bl	4d00 <cmd_complete>
		BT_ERR("Invalid BT_HCI_ERR_UNKNOWN_CMD");
    5116:	4aae      	ldr	r2, [pc, #696]	; (53d0 <hci_cmd_handle+0x318>)
    5118:	49b1      	ldr	r1, [pc, #708]	; (53e0 <hci_cmd_handle+0x328>)
		ccst = cmd_complete(&evt, sizeof(*ccst));
    511a:	4604      	mov	r4, r0
		BT_ERR("Invalid BT_HCI_ERR_UNKNOWN_CMD");
    511c:	2003      	movs	r0, #3
    511e:	f7fd f867 	bl	21f0 <bt_log>
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    5122:	2301      	movs	r3, #1
    5124:	7023      	strb	r3, [r4, #0]
    5126:	e034      	b.n	5192 <hci_cmd_handle+0xda>
	switch (BT_OGF(_opcode)) {
    5128:	2b08      	cmp	r3, #8
    512a:	f000 80e6 	beq.w	52fa <hci_cmd_handle+0x242>
    512e:	2b3f      	cmp	r3, #63	; 0x3f
    5130:	d1ed      	bne.n	510e <hci_cmd_handle+0x56>
	switch (ocf) {
    5132:	3a01      	subs	r2, #1
    5134:	2a09      	cmp	r2, #9
    5136:	d8ea      	bhi.n	510e <hci_cmd_handle+0x56>
    5138:	a301      	add	r3, pc, #4	; (adr r3, 5140 <hci_cmd_handle+0x88>)
    513a:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    513e:	bf00      	nop
    5140:	000054ef 	.word	0x000054ef
    5144:	0000551d 	.word	0x0000551d
    5148:	00005545 	.word	0x00005545
    514c:	0000510f 	.word	0x0000510f
    5150:	0000510f 	.word	0x0000510f
    5154:	00005589 	.word	0x00005589
    5158:	0000510f 	.word	0x0000510f
    515c:	0000555b 	.word	0x0000555b
    5160:	00005593 	.word	0x00005593
    5164:	000055ff 	.word	0x000055ff
	switch (ocf) {
    5168:	2a03      	cmp	r2, #3
    516a:	d014      	beq.n	5196 <hci_cmd_handle+0xde>
    516c:	d808      	bhi.n	5180 <hci_cmd_handle+0xc8>
    516e:	2a01      	cmp	r2, #1
    5170:	d1cd      	bne.n	510e <hci_cmd_handle+0x56>
	event_mask = sys_get_le64(cmd->events);
    5172:	68a0      	ldr	r0, [r4, #8]
    5174:	f7ff ff9c 	bl	50b0 <sys_get_le64>
    5178:	4b9a      	ldr	r3, [pc, #616]	; (53e4 <hci_cmd_handle+0x32c>)
    517a:	e9c3 0100 	strd	r0, r1, [r3]
    517e:	e003      	b.n	5188 <hci_cmd_handle+0xd0>
	switch (ocf) {
    5180:	2a2d      	cmp	r2, #45	; 0x2d
    5182:	d017      	beq.n	51b4 <hci_cmd_handle+0xfc>
    5184:	2a63      	cmp	r2, #99	; 0x63
    5186:	d1c2      	bne.n	510e <hci_cmd_handle+0x56>
	ccst = cmd_complete(evt, sizeof(*ccst));
    5188:	2101      	movs	r1, #1
    518a:	a803      	add	r0, sp, #12
    518c:	f7ff fdb8 	bl	4d00 <cmd_complete>
	ccst->status = 0x00;
    5190:	7005      	strb	r5, [r0, #0]
	return evt;
    5192:	9803      	ldr	r0, [sp, #12]
    5194:	e79e      	b.n	50d4 <hci_cmd_handle+0x1c>
	event_mask = DEFAULT_EVENT_MASK;
    5196:	4b93      	ldr	r3, [pc, #588]	; (53e4 <hci_cmd_handle+0x32c>)
    5198:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    519c:	f641 71ff 	movw	r1, #8191	; 0x1fff
    51a0:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    51a4:	4b90      	ldr	r3, [pc, #576]	; (53e8 <hci_cmd_handle+0x330>)
    51a6:	201f      	movs	r0, #31
    51a8:	2100      	movs	r1, #0
    51aa:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
    51ae:	f004 fc2d 	bl	9a0c <ll_reset>
    51b2:	e7e9      	b.n	5188 <hci_cmd_handle+0xd0>
    51b4:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    51b6:	2104      	movs	r1, #4
    51b8:	a803      	add	r0, sp, #12
	handle = sys_le16_to_cpu(cmd->handle);
    51ba:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
    51bc:	789f      	ldrb	r7, [r3, #2]
	rp = cmd_complete(evt, sizeof(*rp));
    51be:	f7ff fd9f 	bl	4d00 <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    51c2:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    51c4:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(handle, type, &rp->tx_power_level);
    51c6:	1cc2      	adds	r2, r0, #3
    51c8:	4639      	mov	r1, r7
    51ca:	4630      	mov	r0, r6
    51cc:	f004 fcb4 	bl	9b38 <ll_tx_pwr_lvl_get>
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    51d0:	2800      	cmp	r0, #0
    51d2:	bf0c      	ite	eq
    51d4:	2300      	moveq	r3, #0
    51d6:	2302      	movne	r3, #2
    51d8:	7023      	strb	r3, [r4, #0]
	rp->handle = sys_cpu_to_le16(handle);
    51da:	f8a4 5001 	strh.w	r5, [r4, #1]
    51de:	e7d8      	b.n	5192 <hci_cmd_handle+0xda>
	switch (ocf) {
    51e0:	3a01      	subs	r2, #1
    51e2:	2a08      	cmp	r2, #8
    51e4:	d893      	bhi.n	510e <hci_cmd_handle+0x56>
    51e6:	a301      	add	r3, pc, #4	; (adr r3, 51ec <hci_cmd_handle+0x134>)
    51e8:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    51ec:	00005211 	.word	0x00005211
    51f0:	0000523b 	.word	0x0000523b
    51f4:	000052c7 	.word	0x000052c7
    51f8:	0000510f 	.word	0x0000510f
    51fc:	0000510f 	.word	0x0000510f
    5200:	0000510f 	.word	0x0000510f
    5204:	0000510f 	.word	0x0000510f
    5208:	0000510f 	.word	0x0000510f
    520c:	000052e3 	.word	0x000052e3
	rp = cmd_complete(evt, sizeof(*rp));
    5210:	2109      	movs	r1, #9
    5212:	a803      	add	r0, sp, #12
    5214:	f7ff fd74 	bl	4d00 <cmd_complete>
	rp->status = 0x00;
    5218:	2300      	movs	r3, #0
    521a:	7003      	strb	r3, [r0, #0]
	rp->hci_revision = sys_cpu_to_le16(0);
    521c:	7083      	strb	r3, [r0, #2]
    521e:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    5220:	f06f 030e 	mvn.w	r3, #14
    5224:	7143      	strb	r3, [r0, #5]
    5226:	2305      	movs	r3, #5
	rp->hci_version = BT_HCI_VERSION_5_0;
    5228:	2209      	movs	r2, #9
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    522a:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    522c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	rp->hci_version = BT_HCI_VERSION_5_0;
    5230:	7042      	strb	r2, [r0, #1]
	rp->lmp_version = RADIO_BLE_VERSION_NUMBER;
    5232:	7102      	strb	r2, [r0, #4]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    5234:	71c3      	strb	r3, [r0, #7]
    5236:	7203      	strb	r3, [r0, #8]
    5238:	e7ab      	b.n	5192 <hci_cmd_handle+0xda>
	rp = cmd_complete(evt, sizeof(*rp));
    523a:	2141      	movs	r1, #65	; 0x41
    523c:	a803      	add	r0, sp, #12
    523e:	f7ff fd5f 	bl	4d00 <cmd_complete>
	rp->status = 0x00;
    5242:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    5244:	4604      	mov	r4, r0
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    5246:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    5248:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    524c:	f7fb fa11 	bl	672 <memset>
	rp->commands[2] |= BIT(7);
    5250:	78e3      	ldrb	r3, [r4, #3]
	rp->commands[27] |= BIT(6) | BIT(7);
    5252:	7f20      	ldrb	r0, [r4, #28]
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
    5254:	7ea1      	ldrb	r1, [r4, #26]
	rp->commands[26] |= BIT(6) | BIT(7);
    5256:	7ee2      	ldrb	r2, [r4, #27]
	rp->commands[2] |= BIT(7);
    5258:	f063 037f 	orn	r3, r3, #127	; 0x7f
    525c:	70e3      	strb	r3, [r4, #3]
	rp->commands[5] |= BIT(6) | BIT(7);
    525e:	79a3      	ldrb	r3, [r4, #6]
    5260:	f063 033f 	orn	r3, r3, #63	; 0x3f
    5264:	71a3      	strb	r3, [r4, #6]
	rp->commands[10] |= BIT(2);
    5266:	7ae3      	ldrb	r3, [r4, #11]
    5268:	f043 0304 	orr.w	r3, r3, #4
    526c:	72e3      	strb	r3, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
    526e:	7be3      	ldrb	r3, [r4, #15]
    5270:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    5274:	73e3      	strb	r3, [r4, #15]
	rp->commands[15] |= BIT(1);
    5276:	7c23      	ldrb	r3, [r4, #16]
    5278:	f043 0302 	orr.w	r3, r3, #2
    527c:	7423      	strb	r3, [r4, #16]
	rp->commands[22] |= BIT(2);
    527e:	7de3      	ldrb	r3, [r4, #23]
    5280:	f043 0304 	orr.w	r3, r3, #4
    5284:	75e3      	strb	r3, [r4, #23]
	rp->commands[36] |= BIT(1);
    5286:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
	rp->commands[36] |= BIT(2) | BIT(3) | BIT(5) | BIT(7) | BIT(6) ;
    528a:	f063 0311 	orn	r3, r3, #17
    528e:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	rp->commands[37] |= BIT(5);
    5292:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
	rp->commands[27] |= BIT(6) | BIT(7);
    5296:	f060 003c 	orn	r0, r0, #60	; 0x3c
	rp->commands[37] |= BIT(5);
    529a:	f043 0320 	orr.w	r3, r3, #32
	rp->commands[27] |= BIT(6) | BIT(7);
    529e:	7720      	strb	r0, [r4, #28]
	rp->commands[37] |= BIT(5);
    52a0:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	rp->commands[28] |= BIT(3);
    52a4:	7f60      	ldrb	r0, [r4, #29]
	rp->commands[38] |= BIT(7);
    52a6:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	rp->commands[28] |= BIT(3);
    52aa:	f040 0008 	orr.w	r0, r0, #8
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    52ae:	f061 0108 	orn	r1, r1, #8
	rp->commands[26] |= BIT(0) | BIT(1);
    52b2:	f062 023c 	orn	r2, r2, #60	; 0x3c
	rp->commands[38] |= BIT(7);
    52b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[28] |= BIT(3);
    52ba:	7760      	strb	r0, [r4, #29]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    52bc:	76a1      	strb	r1, [r4, #26]
	rp->commands[26] |= BIT(0) | BIT(1);
    52be:	76e2      	strb	r2, [r4, #27]
	rp->commands[38] |= BIT(7);
    52c0:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
    52c4:	e765      	b.n	5192 <hci_cmd_handle+0xda>
	rp = cmd_complete(evt, sizeof(*rp));
    52c6:	2109      	movs	r1, #9
    52c8:	a803      	add	r0, sp, #12
    52ca:	f7ff fd19 	bl	4d00 <cmd_complete>
	rp->status = 0x00;
    52ce:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    52d0:	4604      	mov	r4, r0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    52d2:	2208      	movs	r2, #8
	rp->status = 0x00;
    52d4:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    52d8:	f7fb f9cb 	bl	672 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
    52dc:	2360      	movs	r3, #96	; 0x60
    52de:	7163      	strb	r3, [r4, #5]
    52e0:	e757      	b.n	5192 <hci_cmd_handle+0xda>
	rp = cmd_complete(evt, sizeof(*rp));
    52e2:	2107      	movs	r1, #7
    52e4:	a803      	add	r0, sp, #12
    52e6:	f7ff fd0b 	bl	4d00 <cmd_complete>
	rp->status = 0x00;
    52ea:	4601      	mov	r1, r0
    52ec:	2300      	movs	r3, #0
    52ee:	f801 3b01 	strb.w	r3, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
    52f2:	4618      	mov	r0, r3
    52f4:	f7ff fb4e 	bl	4994 <ll_addr_get>
    52f8:	e74b      	b.n	5192 <hci_cmd_handle+0xda>
	switch (ocf) {
    52fa:	2a10      	cmp	r2, #16
    52fc:	f000 80a6 	beq.w	544c <hci_cmd_handle+0x394>
    5300:	d847      	bhi.n	5392 <hci_cmd_handle+0x2da>
    5302:	2a06      	cmp	r2, #6
    5304:	f000 80e3 	beq.w	54ce <hci_cmd_handle+0x416>
    5308:	d822      	bhi.n	5350 <hci_cmd_handle+0x298>
    530a:	2a02      	cmp	r2, #2
    530c:	d07f      	beq.n	540e <hci_cmd_handle+0x356>
    530e:	d80f      	bhi.n	5330 <hci_cmd_handle+0x278>
    5310:	2a01      	cmp	r2, #1
    5312:	f47f aefc 	bne.w	510e <hci_cmd_handle+0x56>
	le_event_mask = sys_get_le64(cmd->events);
    5316:	68a0      	ldr	r0, [r4, #8]
    5318:	f7ff feca 	bl	50b0 <sys_get_le64>
    531c:	4b32      	ldr	r3, [pc, #200]	; (53e8 <hci_cmd_handle+0x330>)
    531e:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
    5322:	2101      	movs	r1, #1
    5324:	a803      	add	r0, sp, #12
    5326:	f7ff fceb 	bl	4d00 <cmd_complete>
	ccst->status = 0x00;
    532a:	2300      	movs	r3, #0
    532c:	7003      	strb	r3, [r0, #0]
    532e:	e730      	b.n	5192 <hci_cmd_handle+0xda>
	switch (ocf) {
    5330:	2a03      	cmp	r2, #3
    5332:	d079      	beq.n	5428 <hci_cmd_handle+0x370>
    5334:	2a05      	cmp	r2, #5
    5336:	f47f aeea 	bne.w	510e <hci_cmd_handle+0x56>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
    533a:	68a1      	ldr	r1, [r4, #8]
    533c:	2001      	movs	r0, #1
    533e:	f7ff fb43 	bl	49c8 <ll_addr_set>
	status = ll_wl_remove(&cmd->addr);
    5342:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    5344:	2101      	movs	r1, #1
    5346:	a803      	add	r0, sp, #12
    5348:	f7ff fcda 	bl	4d00 <cmd_complete>
	ccst->status = status;
    534c:	7004      	strb	r4, [r0, #0]
    534e:	e720      	b.n	5192 <hci_cmd_handle+0xda>
	switch (ocf) {
    5350:	2a09      	cmp	r2, #9
    5352:	f000 80c1 	beq.w	54d8 <hci_cmd_handle+0x420>
    5356:	d80b      	bhi.n	5370 <hci_cmd_handle+0x2b8>
    5358:	2a07      	cmp	r2, #7
    535a:	f000 8148 	beq.w	55ee <hci_cmd_handle+0x536>
    535e:	2a08      	cmp	r2, #8
    5360:	f47f aed5 	bne.w	510e <hci_cmd_handle+0x56>
    5364:	68a3      	ldr	r3, [r4, #8]
	ll_adv_data_set(cmd->len, &cmd->data[0]);
    5366:	1c59      	adds	r1, r3, #1
    5368:	7818      	ldrb	r0, [r3, #0]
    536a:	f005 fa57 	bl	a81c <ll_adv_data_set>
    536e:	e7d8      	b.n	5322 <hci_cmd_handle+0x26a>
	switch (ocf) {
    5370:	2a0a      	cmp	r2, #10
    5372:	f000 80b7 	beq.w	54e4 <hci_cmd_handle+0x42c>
    5376:	2a0f      	cmp	r2, #15
    5378:	f47f aec9 	bne.w	510e <hci_cmd_handle+0x56>
	rp = cmd_complete(evt, sizeof(*rp));
    537c:	2102      	movs	r1, #2
    537e:	a803      	add	r0, sp, #12
    5380:	f7ff fcbe 	bl	4d00 <cmd_complete>
	rp->status = 0x00;
    5384:	2300      	movs	r3, #0
    5386:	7003      	strb	r3, [r0, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    5388:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
    538a:	f005 fb63 	bl	aa54 <ll_wl_size_get>
    538e:	7060      	strb	r0, [r4, #1]
    5390:	e6ff      	b.n	5192 <hci_cmd_handle+0xda>
	switch (ocf) {
    5392:	2a1c      	cmp	r2, #28
    5394:	d07f      	beq.n	5496 <hci_cmd_handle+0x3de>
    5396:	d812      	bhi.n	53be <hci_cmd_handle+0x306>
    5398:	2a12      	cmp	r2, #18
    539a:	d064      	beq.n	5466 <hci_cmd_handle+0x3ae>
    539c:	d35f      	bcc.n	545e <hci_cmd_handle+0x3a6>
    539e:	2a17      	cmp	r2, #23
    53a0:	d065      	beq.n	546e <hci_cmd_handle+0x3b6>
    53a2:	2a18      	cmp	r2, #24
    53a4:	f47f aeb3 	bne.w	510e <hci_cmd_handle+0x56>
	rp = cmd_complete(evt, sizeof(*rp));
    53a8:	2109      	movs	r1, #9
    53aa:	a803      	add	r0, sp, #12
    53ac:	f7ff fca8 	bl	4d00 <cmd_complete>
	rp->status = 0x00;
    53b0:	2300      	movs	r3, #0
    53b2:	f800 3b01 	strb.w	r3, [r0], #1
	bt_rand(rp->rand, count);
    53b6:	2108      	movs	r1, #8
    53b8:	f7ff fb26 	bl	4a08 <bt_rand>
    53bc:	e6e9      	b.n	5192 <hci_cmd_handle+0xda>
	switch (ocf) {
    53be:	2a38      	cmp	r2, #56	; 0x38
    53c0:	f000 808a 	beq.w	54d8 <hci_cmd_handle+0x420>
    53c4:	d812      	bhi.n	53ec <hci_cmd_handle+0x334>
    53c6:	2a36      	cmp	r2, #54	; 0x36
    53c8:	f000 8081 	beq.w	54ce <hci_cmd_handle+0x416>
    53cc:	2a37      	cmp	r2, #55	; 0x37
    53ce:	e7c7      	b.n	5360 <hci_cmd_handle+0x2a8>
    53d0:	0000dff6 	.word	0x0000dff6
    53d4:	0000e05b 	.word	0x0000e05b
    53d8:	200009f4 	.word	0x200009f4
    53dc:	0000e075 	.word	0x0000e075
    53e0:	0000e0b3 	.word	0x0000e0b3
    53e4:	20004f20 	.word	0x20004f20
    53e8:	20004f28 	.word	0x20004f28
    53ec:	2a39      	cmp	r2, #57	; 0x39
    53ee:	d079      	beq.n	54e4 <hci_cmd_handle+0x42c>
    53f0:	2a4b      	cmp	r2, #75	; 0x4b
    53f2:	f47f ae8c 	bne.w	510e <hci_cmd_handle+0x56>
	rp = cmd_complete(evt, sizeof(*rp));
    53f6:	2103      	movs	r1, #3
    53f8:	a803      	add	r0, sp, #12
    53fa:	f7ff fc81 	bl	4d00 <cmd_complete>
	rp->status = 0x00;
    53fe:	4601      	mov	r1, r0
    5400:	2300      	movs	r3, #0
    5402:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    5406:	3001      	adds	r0, #1
    5408:	f7ff fafa 	bl	4a00 <ll_tx_pwr_get>
    540c:	e6c1      	b.n	5192 <hci_cmd_handle+0xda>
	rp = cmd_complete(evt, sizeof(*rp));
    540e:	2104      	movs	r1, #4
    5410:	a803      	add	r0, sp, #12
    5412:	f7ff fc75 	bl	4d00 <cmd_complete>
	rp->status = 0x00;
    5416:	2300      	movs	r3, #0
    5418:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    541a:	f06f 0204 	mvn.w	r2, #4
    541e:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    5420:	230a      	movs	r3, #10
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    5422:	7042      	strb	r2, [r0, #1]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    5424:	70c3      	strb	r3, [r0, #3]
    5426:	e6b4      	b.n	5192 <hci_cmd_handle+0xda>
	rp = cmd_complete(evt, sizeof(*rp));
    5428:	2109      	movs	r1, #9
    542a:	a803      	add	r0, sp, #12
    542c:	f7ff fc68 	bl	4d00 <cmd_complete>
	rp->status = 0x00;
    5430:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    5432:	4604      	mov	r4, r0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    5434:	2208      	movs	r2, #8
	rp->status = 0x00;
    5436:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    543a:	f7fb f91a 	bl	672 <memset>
	rp->features[0] = RADIO_BLE_FEAT & 0xFF;
    543e:	230c      	movs	r3, #12
    5440:	7063      	strb	r3, [r4, #1]
	rp->features[1] = (RADIO_BLE_FEAT >> 8)  & 0xFF;
    5442:	2340      	movs	r3, #64	; 0x40
    5444:	70a3      	strb	r3, [r4, #2]
	rp->features[2] = (RADIO_BLE_FEAT >> 16)  & 0xFF;
    5446:	2301      	movs	r3, #1
    5448:	70e3      	strb	r3, [r4, #3]
    544a:	e6a2      	b.n	5192 <hci_cmd_handle+0xda>
	ccst = cmd_complete(evt, sizeof(*ccst));
    544c:	2101      	movs	r1, #1
    544e:	a803      	add	r0, sp, #12
    5450:	f7ff fc56 	bl	4d00 <cmd_complete>
    5454:	4604      	mov	r4, r0
	ccst->status = ll_wl_clear();
    5456:	f005 faff 	bl	aa58 <ll_wl_clear>
    545a:	7020      	strb	r0, [r4, #0]
    545c:	e699      	b.n	5192 <hci_cmd_handle+0xda>
	status = ll_wl_add(&cmd->addr);
    545e:	68a0      	ldr	r0, [r4, #8]
    5460:	f005 fb10 	bl	aa84 <ll_wl_add>
    5464:	e76d      	b.n	5342 <hci_cmd_handle+0x28a>
	status = ll_wl_remove(&cmd->addr);
    5466:	68a0      	ldr	r0, [r4, #8]
    5468:	f005 fb44 	bl	aaf4 <ll_wl_remove>
    546c:	e769      	b.n	5342 <hci_cmd_handle+0x28a>
    546e:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    5470:	2300      	movs	r3, #0
    5472:	aa04      	add	r2, sp, #16
    5474:	f100 0110 	add.w	r1, r0, #16
    5478:	f005 fc00 	bl	ac7c <ecb_encrypt>
	rp = cmd_complete(evt, sizeof(*rp));
    547c:	2111      	movs	r1, #17
    547e:	a803      	add	r0, sp, #12
    5480:	f7ff fc3e 	bl	4d00 <cmd_complete>
	rp->status = 0x00;
    5484:	2300      	movs	r3, #0
	memcpy(rp->enc_data, enc_data, 16);
    5486:	2210      	movs	r2, #16
	rp->status = 0x00;
    5488:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
    548c:	eb0d 0102 	add.w	r1, sp, r2
	memcpy(rp->info, build_info, sizeof(build_info));
    5490:	f7fb f8c3 	bl	61a <memcpy>
    5494:	e67d      	b.n	5192 <hci_cmd_handle+0xda>
	rp = cmd_complete(evt, sizeof(*rp));
    5496:	2109      	movs	r1, #9
    5498:	a803      	add	r0, sp, #12
    549a:	f7ff fc31 	bl	4d00 <cmd_complete>
	rp->status = 0x00;
    549e:	4604      	mov	r4, r0
	rp = cmd_complete(evt, sizeof(*rp));
    54a0:	4606      	mov	r6, r0
	rp->status = 0x00;
    54a2:	f804 5b01 	strb.w	r5, [r4], #1
    54a6:	f006 fdc3 	bl	c030 <_impl_k_current_get>
	BT_DBG("states: 0x%08x%08x", (u32_t)(states >> 32),
    54aa:	2703      	movs	r7, #3
    54ac:	4603      	mov	r3, r0
    54ae:	4a86      	ldr	r2, [pc, #536]	; (56c8 <hci_cmd_handle+0x610>)
    54b0:	4986      	ldr	r1, [pc, #536]	; (56cc <hci_cmd_handle+0x614>)
    54b2:	2007      	movs	r0, #7
    54b4:	e88d 00a0 	stmia.w	sp, {r5, r7}
    54b8:	f7fc fe9a 	bl	21f0 <bt_log>
	sys_put_le32(val, dst);
    54bc:	4621      	mov	r1, r4
    54be:	4638      	mov	r0, r7
    54c0:	f7ff fc0a 	bl	4cd8 <sys_put_le32>
	sys_put_le32(val >> 32, &dst[4]);
    54c4:	1d71      	adds	r1, r6, #5
    54c6:	4628      	mov	r0, r5
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    54c8:	f7ff fc06 	bl	4cd8 <sys_put_le32>
    54cc:	e661      	b.n	5192 <hci_cmd_handle+0xda>
		le_set_adv_param(cmd, evt);
    54ce:	a903      	add	r1, sp, #12
    54d0:	68a0      	ldr	r0, [r4, #8]
    54d2:	f7ff fcab 	bl	4e2c <le_set_adv_param.isra.21>
    54d6:	e65c      	b.n	5192 <hci_cmd_handle+0xda>
    54d8:	68a3      	ldr	r3, [r4, #8]
	ll_scan_data_set(cmd->len, &cmd->data[0]);
    54da:	1c59      	adds	r1, r3, #1
    54dc:	7818      	ldrb	r0, [r3, #0]
    54de:	f005 fa03 	bl	a8e8 <ll_scan_data_set>
    54e2:	e71e      	b.n	5322 <hci_cmd_handle+0x26a>
		le_set_adv_enable(cmd, evt);
    54e4:	a903      	add	r1, sp, #12
    54e6:	68a0      	ldr	r0, [r4, #8]
    54e8:	f7ff fcc8 	bl	4e7c <le_set_adv_enable.isra.25>
    54ec:	e651      	b.n	5192 <hci_cmd_handle+0xda>
	rp = cmd_complete(evt, sizeof(*rp));
    54ee:	210d      	movs	r1, #13
    54f0:	a803      	add	r0, sp, #12
    54f2:	f7ff fc05 	bl	4d00 <cmd_complete>
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    54f6:	2202      	movs	r2, #2
    54f8:	7042      	strb	r2, [r0, #1]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    54fa:	70c2      	strb	r2, [r0, #3]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    54fc:	2201      	movs	r2, #1
    54fe:	7182      	strb	r2, [r0, #6]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    5500:	220b      	movs	r2, #11
	rp->status = 0x00;
    5502:	2300      	movs	r3, #0
	rp->fw_revision = KERNEL_VERSION_MINOR;
    5504:	71c2      	strb	r2, [r0, #7]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    5506:	2263      	movs	r2, #99	; 0x63
	rp->status = 0x00;
    5508:	7003      	strb	r3, [r0, #0]
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    550a:	7083      	strb	r3, [r0, #2]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    550c:	7103      	strb	r3, [r0, #4]
	rp->fw_variant = 0;
    550e:	7143      	strb	r3, [r0, #5]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    5510:	7203      	strb	r3, [r0, #8]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    5512:	7242      	strb	r2, [r0, #9]
    5514:	7283      	strb	r3, [r0, #10]
    5516:	72c3      	strb	r3, [r0, #11]
    5518:	7303      	strb	r3, [r0, #12]
    551a:	e63a      	b.n	5192 <hci_cmd_handle+0xda>
	rp = cmd_complete(evt, sizeof(*rp));
    551c:	2141      	movs	r1, #65	; 0x41
    551e:	a803      	add	r0, sp, #12
    5520:	f7ff fbee 	bl	4d00 <cmd_complete>
	rp->status = 0x00;
    5524:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    5526:	4604      	mov	r4, r0
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    5528:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    552a:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    552e:	f7fb f8a0 	bl	672 <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
    5532:	7863      	ldrb	r3, [r4, #1]
    5534:	f063 0358 	orn	r3, r3, #88	; 0x58
    5538:	7063      	strb	r3, [r4, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    553a:	78a3      	ldrb	r3, [r4, #2]
    553c:	f043 0303 	orr.w	r3, r3, #3
    5540:	70a3      	strb	r3, [r4, #2]
    5542:	e626      	b.n	5192 <hci_cmd_handle+0xda>
	rp = cmd_complete(evt, sizeof(*rp));
    5544:	2109      	movs	r1, #9
    5546:	a803      	add	r0, sp, #12
    5548:	f7ff fbda 	bl	4d00 <cmd_complete>
	rp->status = 0x00;
    554c:	2100      	movs	r1, #0
    554e:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    5552:	2208      	movs	r2, #8
		memset(rp->er, 0x00, sizeof(rp->er));
    5554:	f7fb f88d 	bl	672 <memset>
    5558:	e61b      	b.n	5192 <hci_cmd_handle+0xda>
	const char build_info[] = HCI_VS_BUILD_INFO;
    555a:	4b5d      	ldr	r3, [pc, #372]	; (56d0 <hci_cmd_handle+0x618>)
    555c:	aa04      	add	r2, sp, #16
    555e:	f103 0628 	add.w	r6, r3, #40	; 0x28
    5562:	4615      	mov	r5, r2
    5564:	6818      	ldr	r0, [r3, #0]
    5566:	6859      	ldr	r1, [r3, #4]
    5568:	4614      	mov	r4, r2
    556a:	c403      	stmia	r4!, {r0, r1}
    556c:	3308      	adds	r3, #8
    556e:	42b3      	cmp	r3, r6
    5570:	4622      	mov	r2, r4
    5572:	d1f7      	bne.n	5564 <hci_cmd_handle+0x4ac>
	rp = cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
    5574:	2129      	movs	r1, #41	; 0x29
    5576:	a803      	add	r0, sp, #12
    5578:	f7ff fbc2 	bl	4d00 <cmd_complete>
	rp->status = 0x00;
    557c:	2300      	movs	r3, #0
    557e:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
    5582:	2228      	movs	r2, #40	; 0x28
    5584:	4629      	mov	r1, r5
    5586:	e783      	b.n	5490 <hci_cmd_handle+0x3d8>
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    5588:	68a1      	ldr	r1, [r4, #8]
    558a:	2000      	movs	r0, #0
    558c:	f7ff fa1c 	bl	49c8 <ll_addr_set>
    5590:	e6c7      	b.n	5322 <hci_cmd_handle+0x26a>
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    5592:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    5596:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
    559a:	3201      	adds	r2, #1
    559c:	d106      	bne.n	55ac <hci_cmd_handle+0x4f4>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    559e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    55a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    55a6:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    55a8:	4293      	cmp	r3, r2
    55aa:	d020      	beq.n	55ee <hci_cmd_handle+0x536>
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
    55ac:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    55b0:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    55b4:	07db      	lsls	r3, r3, #31
    55b6:	d51a      	bpl.n	55ee <hci_cmd_handle+0x536>
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    55b8:	2118      	movs	r1, #24
    55ba:	a803      	add	r0, sp, #12
    55bc:	f7ff fba0 	bl	4d00 <cmd_complete>
		rp->status = 0x00;
    55c0:	2600      	movs	r6, #0
		rp->num_addrs = 1;
    55c2:	2301      	movs	r3, #1
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    55c4:	4604      	mov	r4, r0
		rp->num_addrs = 1;
    55c6:	7043      	strb	r3, [r0, #1]
		rp->status = 0x00;
    55c8:	7006      	strb	r6, [r0, #0]
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addr->bdaddr.val[0]);
    55ca:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    55ce:	1ca1      	adds	r1, r4, #2
    55d0:	f7ff fb82 	bl	4cd8 <sys_put_le32>
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addr->bdaddr.val[4]);
    55d4:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
	dst[0] = val;
    55d8:	71a3      	strb	r3, [r4, #6]
	dst[1] = val >> 8;
    55da:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addr->bdaddr);
    55de:	f063 033f 	orn	r3, r3, #63	; 0x3f
    55e2:	71e3      	strb	r3, [r4, #7]
		memset(addr->ir, 0x00, sizeof(addr->ir));
    55e4:	2210      	movs	r2, #16
    55e6:	4631      	mov	r1, r6
    55e8:	f104 0008 	add.w	r0, r4, #8
    55ec:	e7b2      	b.n	5554 <hci_cmd_handle+0x49c>
	rp = cmd_complete(evt, sizeof(*rp));
    55ee:	2102      	movs	r1, #2
    55f0:	a803      	add	r0, sp, #12
    55f2:	f7ff fb85 	bl	4d00 <cmd_complete>
	rp->status = 0x00;
    55f6:	2300      	movs	r3, #0
    55f8:	7003      	strb	r3, [r0, #0]
	rp->num_addrs = 0;
    55fa:	7043      	strb	r3, [r0, #1]
    55fc:	e5c9      	b.n	5192 <hci_cmd_handle+0xda>
	rp = cmd_complete(evt, sizeof(*rp));
    55fe:	2121      	movs	r1, #33	; 0x21
    5600:	a803      	add	r0, sp, #12
    5602:	f7ff fb7d 	bl	4d00 <cmd_complete>
	rp->status = 0x00;
    5606:	4603      	mov	r3, r0
    5608:	2200      	movs	r2, #0
    560a:	f803 2b01 	strb.w	r2, [r3], #1
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    560e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	rp = cmd_complete(evt, sizeof(*rp));
    5612:	4604      	mov	r4, r0
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    5614:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
    5618:	3101      	adds	r1, #1
    561a:	d04b      	beq.n	56b4 <hci_cmd_handle+0x5fc>
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    561c:	f8d2 1094 	ldr.w	r1, [r2, #148]	; 0x94
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    5620:	3101      	adds	r1, #1
    5622:	d047      	beq.n	56b4 <hci_cmd_handle+0x5fc>
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    5624:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    5628:	3101      	adds	r1, #1
    562a:	d043      	beq.n	56b4 <hci_cmd_handle+0x5fc>
	    (NRF_FICR->IR[3] != UINT32_MAX)) {
    562c:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    5630:	3101      	adds	r1, #1
    5632:	d03f      	beq.n	56b4 <hci_cmd_handle+0x5fc>
		sys_put_le32(NRF_FICR->IR[0], &rp->ir[0]);
    5634:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
    5638:	4619      	mov	r1, r3
    563a:	f7ff fb4d 	bl	4cd8 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[1], &rp->ir[4]);
    563e:	1d61      	adds	r1, r4, #5
    5640:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
    5644:	f7ff fb48 	bl	4cd8 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[2], &rp->ir[8]);
    5648:	f104 0109 	add.w	r1, r4, #9
    564c:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    5650:	f7ff fb42 	bl	4cd8 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[3], &rp->ir[12]);
    5654:	f104 010d 	add.w	r1, r4, #13
    5658:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
    565c:	f7ff fb3c 	bl	4cd8 <sys_put_le32>
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    5660:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5664:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    5668:	3301      	adds	r3, #1
    566a:	f104 0311 	add.w	r3, r4, #17
    566e:	d027      	beq.n	56c0 <hci_cmd_handle+0x608>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    5670:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    5674:	3101      	adds	r1, #1
    5676:	d023      	beq.n	56c0 <hci_cmd_handle+0x608>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    5678:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    567c:	3101      	adds	r1, #1
    567e:	d01f      	beq.n	56c0 <hci_cmd_handle+0x608>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
    5680:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    5684:	3101      	adds	r1, #1
    5686:	d01b      	beq.n	56c0 <hci_cmd_handle+0x608>
		sys_put_le32(NRF_FICR->ER[0], &rp->er[0]);
    5688:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
    568c:	4619      	mov	r1, r3
    568e:	f7ff fb23 	bl	4cd8 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[1], &rp->er[4]);
    5692:	f104 0115 	add.w	r1, r4, #21
    5696:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    569a:	f7ff fb1d 	bl	4cd8 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[2], &rp->er[8]);
    569e:	f104 0119 	add.w	r1, r4, #25
    56a2:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
    56a6:	f7ff fb17 	bl	4cd8 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    56aa:	f104 011d 	add.w	r1, r4, #29
    56ae:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
    56b2:	e709      	b.n	54c8 <hci_cmd_handle+0x410>
		memset(rp->ir, 0x00, sizeof(rp->ir));
    56b4:	2210      	movs	r2, #16
    56b6:	2100      	movs	r1, #0
    56b8:	4618      	mov	r0, r3
    56ba:	f7fa ffda 	bl	672 <memset>
    56be:	e7cf      	b.n	5660 <hci_cmd_handle+0x5a8>
		memset(rp->er, 0x00, sizeof(rp->er));
    56c0:	2210      	movs	r2, #16
    56c2:	2100      	movs	r1, #0
    56c4:	4618      	mov	r0, r3
    56c6:	e745      	b.n	5554 <hci_cmd_handle+0x49c>
    56c8:	0000dfe2 	.word	0x0000dfe2
    56cc:	0000e097 	.word	0x0000e097
    56d0:	0000e0d6 	.word	0x0000e0d6

000056d4 <hci_evt_encode>:

}
#endif

void hci_evt_encode(struct radio_pdu_node_rx *node_rx, struct net_buf *buf)
{
    56d4:	b570      	push	{r4, r5, r6, lr}
    56d6:	4604      	mov	r4, r0
    56d8:	b08c      	sub	sp, #48	; 0x30
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    56da:	7923      	ldrb	r3, [r4, #4]
    56dc:	2b01      	cmp	r3, #1
{
    56de:	460d      	mov	r5, r1
	pdu_data = (void *)node_rx->pdu_data;
    56e0:	f100 0008 	add.w	r0, r0, #8
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    56e4:	d061      	beq.n	57aa <hci_evt_encode+0xd6>
	switch (node_rx->hdr.type) {
    56e6:	3b02      	subs	r3, #2
    56e8:	2b03      	cmp	r3, #3
    56ea:	d853      	bhi.n	5794 <hci_evt_encode+0xc0>
    56ec:	e8df f003 	tbb	[pc, r3]
    56f0:	100e0802 	.word	0x100e0802
		le_advertising_report(pdu_data, b, buf);
    56f4:	460a      	mov	r2, r1
    56f6:	4621      	mov	r1, r4
    56f8:	f7ff fb3a 	bl	4d70 <le_advertising_report>
		encode_control(node_rx, pdu_data, buf);
	} else {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
    56fc:	b00c      	add	sp, #48	; 0x30
    56fe:	bd70      	pop	{r4, r5, r6, pc}
	le_adv_ext_report(pdu_data, b, buf, BIT(0));
    5700:	2301      	movs	r3, #1
	le_adv_ext_report(pdu_data, b, buf, BIT(2));
    5702:	462a      	mov	r2, r5
    5704:	4621      	mov	r1, r4
    5706:	f7ff fc33 	bl	4f70 <le_adv_ext_report>
    570a:	e7f7      	b.n	56fc <hci_evt_encode+0x28>
    570c:	2304      	movs	r3, #4
    570e:	e7f8      	b.n	5702 <hci_evt_encode+0x2e>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    5710:	4b44      	ldr	r3, [pc, #272]	; (5824 <hci_evt_encode+0x150>)
    5712:	e9d3 2300 	ldrd	r2, r3, [r3]
    5716:	2200      	movs	r2, #0
    5718:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    571c:	4313      	orrs	r3, r2
    571e:	f104 060a 	add.w	r6, r4, #10
    5722:	d007      	beq.n	5734 <hci_evt_encode+0x60>
	    !(le_event_mask & BT_EVT_MASK_LE_SCAN_REQ_RECEIVED)) {
    5724:	4b40      	ldr	r3, [pc, #256]	; (5828 <hci_evt_encode+0x154>)
    5726:	e9d3 2300 	ldrd	r2, r3, [r3]
    572a:	2300      	movs	r3, #0
    572c:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    5730:	4313      	orrs	r3, r2
    5732:	d11e      	bne.n	5772 <hci_evt_encode+0x9e>
		addr.type = adv->tx_addr;
    5734:	7a23      	ldrb	r3, [r4, #8]
    5736:	ad0c      	add	r5, sp, #48	; 0x30
    5738:	f3c3 1380 	ubfx	r3, r3, #6, #1
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    573c:	2206      	movs	r2, #6
    573e:	4631      	mov	r1, r6
    5740:	f10d 000d 	add.w	r0, sp, #13
		addr.type = adv->tx_addr;
    5744:	f805 3d24 	strb.w	r3, [r5, #-36]!
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    5748:	f7fa ff67 	bl	61a <memcpy>
			  offsetof(struct pdu_adv, payload) + adv->len];
    574c:	7a63      	ldrb	r3, [r4, #9]
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    574e:	441c      	add	r4, r3
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    5750:	ae05      	add	r6, sp, #20
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    5752:	7aa4      	ldrb	r4, [r4, #10]
    5754:	4264      	negs	r4, r4
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    5756:	4631      	mov	r1, r6
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    5758:	b264      	sxtb	r4, r4
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    575a:	4628      	mov	r0, r5
    575c:	f7ff fbcc 	bl	4ef8 <bt_addr_le_to_str.constprop.37>
		BT_WARN("handle: %d, addr: %s, rssi: %d dB.",
    5760:	9401      	str	r4, [sp, #4]
    5762:	9600      	str	r6, [sp, #0]
    5764:	2300      	movs	r3, #0
    5766:	4a31      	ldr	r2, [pc, #196]	; (582c <hci_evt_encode+0x158>)
    5768:	4931      	ldr	r1, [pc, #196]	; (5830 <hci_evt_encode+0x15c>)
    576a:	2004      	movs	r0, #4
    576c:	f7fc fd40 	bl	21f0 <bt_log>
    5770:	e7c4      	b.n	56fc <hci_evt_encode+0x28>
	sep = meta_evt(buf, BT_HCI_EVT_LE_SCAN_REQ_RECEIVED, sizeof(*sep));
    5772:	2208      	movs	r2, #8
    5774:	2113      	movs	r1, #19
    5776:	4628      	mov	r0, r5
    5778:	f7ff fae4 	bl	4d44 <meta_evt>
	sep->handle = 0;
    577c:	2300      	movs	r3, #0
    577e:	7003      	strb	r3, [r0, #0]
	sep->addr.type = adv->tx_addr;
    5780:	7a23      	ldrb	r3, [r4, #8]
    5782:	f3c3 1380 	ubfx	r3, r3, #6, #1
    5786:	7043      	strb	r3, [r0, #1]
	memcpy(&sep->addr.a.val[0], &adv->scan_req.scan_addr[0],
    5788:	2206      	movs	r2, #6
    578a:	4631      	mov	r1, r6
    578c:	3002      	adds	r0, #2
    578e:	f7fa ff44 	bl	61a <memcpy>
    5792:	e7b3      	b.n	56fc <hci_evt_encode+0x28>
		LL_ASSERT(0);
    5794:	4a27      	ldr	r2, [pc, #156]	; (5834 <hci_evt_encode+0x160>)
		LL_ASSERT(0);
    5796:	4928      	ldr	r1, [pc, #160]	; (5838 <hci_evt_encode+0x164>)
    5798:	2003      	movs	r0, #3
    579a:	f7fc fd29 	bl	21f0 <bt_log>
    579e:	4040      	eors	r0, r0
    57a0:	f380 8811 	msr	BASEPRI, r0
    57a4:	f04f 0004 	mov.w	r0, #4
    57a8:	df02      	svc	2
	switch (pdu_data->llctrl.opcode) {
    57aa:	7ae1      	ldrb	r1, [r4, #11]
    57ac:	88e6      	ldrh	r6, [r4, #6]
    57ae:	2909      	cmp	r1, #9
    57b0:	d00b      	beq.n	57ca <hci_evt_encode+0xf6>
    57b2:	290c      	cmp	r1, #12
    57b4:	d010      	beq.n	57d8 <hci_evt_encode+0x104>
    57b6:	2907      	cmp	r1, #7
    57b8:	d131      	bne.n	581e <hci_evt_encode+0x14a>
    57ba:	7b23      	ldrb	r3, [r4, #12]
	switch (pdu_data->llctrl.unknown_rsp.type) {
    57bc:	2b0e      	cmp	r3, #14
    57be:	d128      	bne.n	5812 <hci_evt_encode+0x13e>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    57c0:	462b      	mov	r3, r5
    57c2:	4632      	mov	r2, r6
    57c4:	2100      	movs	r1, #0
    57c6:	201a      	movs	r0, #26
    57c8:	e003      	b.n	57d2 <hci_evt_encode+0xfe>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    57ca:	4601      	mov	r1, r0
    57cc:	462b      	mov	r3, r5
    57ce:	4632      	mov	r2, r6
    57d0:	2000      	movs	r0, #0
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    57d2:	f7ff fb63 	bl	4e9c <le_remote_feat_complete>
    57d6:	e791      	b.n	56fc <hci_evt_encode+0x28>
	if (!(event_mask & BT_EVT_MASK_REMOTE_VERSION_INFO)) {
    57d8:	4b12      	ldr	r3, [pc, #72]	; (5824 <hci_evt_encode+0x150>)
    57da:	e9d3 2300 	ldrd	r2, r3, [r3]
    57de:	2300      	movs	r3, #0
    57e0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
    57e4:	4313      	orrs	r3, r2
    57e6:	d089      	beq.n	56fc <hci_evt_encode+0x28>
	evt_create(buf, BT_HCI_EVT_REMOTE_VERSION_INFO, sizeof(*ep));
    57e8:	2208      	movs	r2, #8
    57ea:	4628      	mov	r0, r5
    57ec:	f7ff fa7d 	bl	4cea <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    57f0:	2108      	movs	r1, #8
    57f2:	1868      	adds	r0, r5, r1
    57f4:	f006 f82c 	bl	b850 <net_buf_simple_add>
	ep->status = 0x00;
    57f8:	2300      	movs	r3, #0
    57fa:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    57fc:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->version = ver_ind->version_number;
    5800:	7b23      	ldrb	r3, [r4, #12]
    5802:	70c3      	strb	r3, [r0, #3]
	ep->manufacturer = sys_cpu_to_le16(ver_ind->company_id);
    5804:	f8b4 300d 	ldrh.w	r3, [r4, #13]
    5808:	8083      	strh	r3, [r0, #4]
	ep->subversion = sys_cpu_to_le16(ver_ind->sub_version_number);
    580a:	f8b4 300f 	ldrh.w	r3, [r4, #15]
    580e:	80c3      	strh	r3, [r0, #6]
    5810:	e774      	b.n	56fc <hci_evt_encode+0x28>
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
    5812:	4a0a      	ldr	r2, [pc, #40]	; (583c <hci_evt_encode+0x168>)
    5814:	490a      	ldr	r1, [pc, #40]	; (5840 <hci_evt_encode+0x16c>)
    5816:	2004      	movs	r0, #4
    5818:	f7fc fcea 	bl	21f0 <bt_log>
    581c:	e76e      	b.n	56fc <hci_evt_encode+0x28>
		LL_ASSERT(0);
    581e:	4a09      	ldr	r2, [pc, #36]	; (5844 <hci_evt_encode+0x170>)
    5820:	e7b9      	b.n	5796 <hci_evt_encode+0xc2>
    5822:	bf00      	nop
    5824:	20004f20 	.word	0x20004f20
    5828:	20004f28 	.word	0x20004f28
    582c:	0000e017 	.word	0x0000e017
    5830:	0000e0fe 	.word	0x0000e0fe
    5834:	0000e02c 	.word	0x0000e02c
    5838:	0000d773 	.word	0x0000d773
    583c:	0000e03b 	.word	0x0000e03b
    5840:	0000e125 	.word	0x0000e125
    5844:	0000e04a 	.word	0x0000e04a

00005848 <hci_get_class>:
{
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    5848:	7903      	ldrb	r3, [r0, #4]
    584a:	2b01      	cmp	r3, #1
    584c:	d00f      	beq.n	586e <hci_get_class+0x26>
    584e:	2b0a      	cmp	r3, #10
    5850:	d815      	bhi.n	587e <hci_get_class+0x36>
    5852:	2001      	movs	r0, #1
    5854:	fa00 f303 	lsl.w	r3, r0, r3
    5858:	f413 6fb0 	tst.w	r3, #1408	; 0x580
    585c:	d112      	bne.n	5884 <hci_get_class+0x3c>
    585e:	f013 0f3c 	tst.w	r3, #60	; 0x3c
    5862:	d110      	bne.n	5886 <hci_get_class+0x3e>
    5864:	f083 0340 	eor.w	r3, r3, #64	; 0x40
    5868:	f343 1080 	sbfx	r0, r3, #6, #1
    586c:	4770      	bx	lr
			return HCI_CLASS_EVT_CONNECTION;
		default:
			return -1;
		}

	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    586e:	7a03      	ldrb	r3, [r0, #8]
    5870:	f003 0303 	and.w	r3, r3, #3
    5874:	2b03      	cmp	r3, #3
		return HCI_CLASS_EVT_CONNECTION;
	} else {
		return HCI_CLASS_ACL_DATA;
    5876:	bf0c      	ite	eq
    5878:	2002      	moveq	r0, #2
    587a:	2003      	movne	r0, #3
    587c:	4770      	bx	lr
			return -1;
    587e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5882:	4770      	bx	lr
			return HCI_CLASS_EVT_CONNECTION;
    5884:	2002      	movs	r0, #2
	}
}
    5886:	4770      	bx	lr

00005888 <hci_init>:
	event_mask = DEFAULT_EVENT_MASK;
    5888:	4b06      	ldr	r3, [pc, #24]	; (58a4 <hci_init+0x1c>)
    588a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    588e:	f641 71ff 	movw	r1, #8191	; 0x1fff
    5892:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    5896:	4b04      	ldr	r3, [pc, #16]	; (58a8 <hci_init+0x20>)
    5898:	201f      	movs	r0, #31
    589a:	2100      	movs	r1, #0
    589c:	e9c3 0100 	strd	r0, r1, [r3]
    58a0:	4770      	bx	lr
    58a2:	bf00      	nop
    58a4:	20004f20 	.word	0x20004f20
    58a8:	20004f28 	.word	0x20004f28

000058ac <cpu_sleep>:
#ifndef _CPU_H_
#define _CPU_H_

static inline void cpu_sleep(void)
{
	__WFE();
    58ac:	bf20      	wfe
	__SEV();
    58ae:	bf40      	sev
	__WFE();
    58b0:	bf20      	wfe
    58b2:	4770      	bx	lr

000058b4 <pdu_len_cmp>:
	return nack;
}
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

static inline bool pdu_len_cmp(u8_t opcode, u8_t len)
{
    58b4:	b5f0      	push	{r4, r5, r6, r7, lr}
	const u8_t ctrl_len_lut[] = {
    58b6:	4b0d      	ldr	r3, [pc, #52]	; (58ec <pdu_len_cmp+0x38>)
{
    58b8:	b089      	sub	sp, #36	; 0x24
    58ba:	4605      	mov	r5, r0
    58bc:	460e      	mov	r6, r1
	const u8_t ctrl_len_lut[] = {
    58be:	aa01      	add	r2, sp, #4
    58c0:	f103 0718 	add.w	r7, r3, #24
    58c4:	6818      	ldr	r0, [r3, #0]
    58c6:	6859      	ldr	r1, [r3, #4]
    58c8:	4614      	mov	r4, r2
    58ca:	c403      	stmia	r4!, {r0, r1}
    58cc:	3308      	adds	r3, #8
    58ce:	42bb      	cmp	r3, r7
    58d0:	4622      	mov	r2, r4
    58d2:	d1f7      	bne.n	58c4 <pdu_len_cmp+0x10>
    58d4:	881b      	ldrh	r3, [r3, #0]
    58d6:	8023      	strh	r3, [r4, #0]
		 sizeof(struct pdu_data_llctrl_phy_upd_ind)),
		(offsetof(struct pdu_data_llctrl, min_used_chans_ind) +
		 sizeof(struct pdu_data_llctrl_min_used_chans_ind)),
	};

	return ctrl_len_lut[opcode] == len;
    58d8:	ab08      	add	r3, sp, #32
    58da:	441d      	add	r5, r3
    58dc:	f815 0c1c 	ldrb.w	r0, [r5, #-28]
}
    58e0:	1b83      	subs	r3, r0, r6
    58e2:	4258      	negs	r0, r3
    58e4:	4158      	adcs	r0, r3
    58e6:	b009      	add	sp, #36	; 0x24
    58e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    58ea:	bf00      	nop
    58ec:	0000cbf5 	.word	0x0000cbf5

000058f0 <ticker_if_done>:
}
#endif

static void ticker_if_done(u32_t status, void *ops_context)
{
	*((u32_t volatile *)ops_context) = status;
    58f0:	6008      	str	r0, [r1, #0]
    58f2:	4770      	bx	lr

000058f4 <prepare_reduced>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    58f4:	b918      	cbnz	r0, 58fe <prepare_reduced+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start |= XON_BITMASK;
    58f6:	680b      	ldr	r3, [r1, #0]
    58f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    58fc:	600b      	str	r3, [r1, #0]
    58fe:	4770      	bx	lr

00005900 <prepare_normal>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    5900:	b918      	cbnz	r0, 590a <prepare_normal+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start &= ~XON_BITMASK;
    5902:	680b      	ldr	r3, [r1, #0]
    5904:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    5908:	600b      	str	r3, [r1, #0]
    590a:	4770      	bx	lr

0000590c <chan_sel_remap>:
	}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */
}

static u8_t chan_sel_remap(u8_t *chan_map, u8_t chan_index)
{
    590c:	b570      	push	{r4, r5, r6, lr}
    590e:	1d03      	adds	r3, r0, #4
    5910:	1e45      	subs	r5, r0, #1
	u8_t chan_next;
	u8_t byte_count;

	chan_next = 0;
    5912:	2400      	movs	r4, #0
	byte_count = 5;
	while (byte_count--) {
    5914:	429d      	cmp	r5, r3
    5916:	d101      	bne.n	591c <chan_sel_remap+0x10>
    5918:	4620      	mov	r0, r4

		chan_map++;
	}

	return chan_next;
}
    591a:	bd70      	pop	{r4, r5, r6, pc}
		bite = *chan_map;
    591c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
		while (bit_count--) {
    5920:	2200      	movs	r2, #0
    5922:	18a0      	adds	r0, r4, r2
    5924:	2a08      	cmp	r2, #8
    5926:	b2c0      	uxtb	r0, r0
    5928:	d101      	bne.n	592e <chan_sel_remap+0x22>
    592a:	4604      	mov	r4, r0
    592c:	e7f2      	b.n	5914 <chan_sel_remap+0x8>
			if (bite & 0x01) {
    592e:	f016 0f01 	tst.w	r6, #1
    5932:	d003      	beq.n	593c <chan_sel_remap+0x30>
				if (chan_index == 0) {
    5934:	2900      	cmp	r1, #0
    5936:	d0f0      	beq.n	591a <chan_sel_remap+0xe>
				chan_index--;
    5938:	3901      	subs	r1, #1
    593a:	b2c9      	uxtb	r1, r1
			bite >>= 1;
    593c:	0876      	lsrs	r6, r6, #1
    593e:	3201      	adds	r2, #1
    5940:	e7ef      	b.n	5922 <chan_sel_remap+0x16>
	...

00005944 <packet_rx_reserve_get>:
			_radio.packet_rx_acquire);
	}
}

static inline struct radio_pdu_node_rx *packet_rx_reserve_get(u8_t count)
{
    5944:	b510      	push	{r4, lr}
	if (_radio.packet_rx_acquire >=
    5946:	4a0c      	ldr	r2, [pc, #48]	; (5978 <packet_rx_reserve_get+0x34>)
    5948:	f892 3742 	ldrb.w	r3, [r2, #1858]	; 0x742
	    _radio.packet_rx_last) {
    594c:	f892 1741 	ldrb.w	r1, [r2, #1857]	; 0x741
	if (_radio.packet_rx_acquire >=
    5950:	428b      	cmp	r3, r1
			_radio.packet_rx_last +
    5952:	bf38      	it	cc
    5954:	f892 4740 	ldrbcc.w	r4, [r2, #1856]	; 0x740
			_radio.packet_rx_last);
    5958:	f892 1741 	ldrb.w	r1, [r2, #1857]	; 0x741
			_radio.packet_rx_last +
    595c:	bf38      	it	cc
    595e:	191b      	addcc	r3, r3, r4
    5960:	1a5b      	subs	r3, r3, r1
    5962:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
    5964:	4298      	cmp	r0, r3
		return 0;
	}

	return _radio.packet_rx[_radio.packet_rx_last];
    5966:	bf9d      	ittte	ls
    5968:	f892 1741 	ldrbls.w	r1, [r2, #1857]	; 0x741
    596c:	f8d2 373c 	ldrls.w	r3, [r2, #1852]	; 0x73c
    5970:	f853 0021 	ldrls.w	r0, [r3, r1, lsl #2]
		return 0;
    5974:	2000      	movhi	r0, #0
}
    5976:	bd10      	pop	{r4, pc}
    5978:	200009f8 	.word	0x200009f8

0000597c <conn_update_req>:
}

#if defined (CONFIG_BT_CTLR_XTAL_ADVANCED) && \
    defined(CONFIG_BT_CTLR_SCHED_ADVANCED)
static u32_t conn_update_req(struct connection *conn)
{
    597c:	b530      	push	{r4, r5, lr}
	if (conn->llcp_req != conn->llcp_ack) {
    597e:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
    5982:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
    5986:	4299      	cmp	r1, r3
    5988:	d128      	bne.n	59dc <conn_update_req+0x60>
	if (conn->llcp_conn_param.req != conn->llcp_conn_param.ack) {
		return 1;
	}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	if (!conn->role) {
    598a:	f990 301d 	ldrsb.w	r3, [r0, #29]
    598e:	2b00      	cmp	r3, #0
    5990:	db26      	blt.n	59e0 <conn_update_req+0x64>
		conn->llcp.conn_upd.win_size = 1;
		conn->llcp.conn_upd.win_offset_us = 0;
		conn->llcp.conn_upd.interval = conn->conn_interval;
		conn->llcp.conn_upd.latency = conn->latency;
    5992:	8cc4      	ldrh	r4, [r0, #38]	; 0x26
		conn->llcp.conn_upd.interval = conn->conn_interval;
    5994:	8c82      	ldrh	r2, [r0, #36]	; 0x24
		conn->llcp.conn_upd.latency = conn->latency;
    5996:	f8a0 4064 	strh.w	r4, [r0, #100]	; 0x64
		conn->llcp.conn_upd.timeout = conn->conn_interval *
					      conn->supervision_reload *
    599a:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
		conn->llcp.conn_upd.interval = conn->conn_interval;
    599c:	f8a0 2062 	strh.w	r2, [r0, #98]	; 0x62
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    59a0:	4354      	muls	r4, r2
					      conn->supervision_reload *
    59a2:	227d      	movs	r2, #125	; 0x7d
    59a4:	4362      	muls	r2, r4
					      125 / 1000;
    59a6:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    59aa:	fb92 f2f4 	sdiv	r2, r2, r4
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    59ae:	f8a0 2066 	strh.w	r2, [r0, #102]	; 0x66
		/* conn->llcp.conn_upd.instant     = 0; */
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    59b2:	f890 2060 	ldrb.w	r2, [r0, #96]	; 0x60
		conn->llcp.conn_upd.win_size = 1;
    59b6:	2501      	movs	r5, #1
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    59b8:	f365 0201 	bfi	r2, r5, #0, #2
		conn->llcp.conn_upd.is_internal = 1;
    59bc:	b2d2      	uxtb	r2, r2
		conn->llcp.conn_upd.win_offset_us = 0;
    59be:	2300      	movs	r3, #0
		conn->llcp.conn_upd.is_internal = 1;
    59c0:	f042 0204 	orr.w	r2, r2, #4

		conn->llcp_type = LLCP_CONN_UPD;
		conn->llcp_ack--;
    59c4:	3901      	subs	r1, #1
		conn->llcp.conn_upd.win_size = 1;
    59c6:	f880 5070 	strb.w	r5, [r0, #112]	; 0x70
		conn->llcp.conn_upd.win_offset_us = 0;
    59ca:	66c3      	str	r3, [r0, #108]	; 0x6c
		conn->llcp.conn_upd.is_internal = 1;
    59cc:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
		conn->llcp_ack--;
    59d0:	f880 105d 	strb.w	r1, [r0, #93]	; 0x5d
		conn->llcp_type = LLCP_CONN_UPD;
    59d4:	f880 505e 	strb.w	r5, [r0, #94]	; 0x5e

		return 0;
    59d8:	4618      	mov	r0, r3
    59da:	bd30      	pop	{r4, r5, pc}
		return 1;
    59dc:	2001      	movs	r0, #1
    59de:	bd30      	pop	{r4, r5, pc}
		return 0;
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	}

	return 2;
    59e0:	2002      	movs	r0, #2
}
    59e2:	bd30      	pop	{r4, r5, pc}

000059e4 <tx_cmplt_get>:
	return 0;
}
#endif /* CONFIG_BT_CTLR_PHY */

static u8_t tx_cmplt_get(u16_t *handle, u8_t *first, u8_t last)
{
    59e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t _first;
	u8_t cmplt;

	_first = *first;
    59e8:	780c      	ldrb	r4, [r1, #0]
	if (_first == last) {
    59ea:	4294      	cmp	r4, r2
{
    59ec:	4681      	mov	r9, r0
    59ee:	460f      	mov	r7, r1
    59f0:	4690      	mov	r8, r2
	if (_first == last) {
    59f2:	d03d      	beq.n	5a70 <tx_cmplt_get+0x8c>
		return 0;
	}

	cmplt = 0;
	*handle = _radio.pkt_release[_first].handle;
    59f4:	4e1f      	ldr	r6, [pc, #124]	; (5a74 <tx_cmplt_get+0x90>)
    59f6:	f8d6 3770 	ldr.w	r3, [r6, #1904]	; 0x770
    59fa:	f833 3034 	ldrh.w	r3, [r3, r4, lsl #3]
    59fe:	8003      	strh	r3, [r0, #0]
	cmplt = 0;
    5a00:	2500      	movs	r5, #0
			_radio.pkt_release[_first].node_tx = (void *)1;

			cmplt++;
		} else {
			/* ctrl packet, hence not num cmplt */
			_radio.pkt_release[_first].node_tx = (void *)2;
    5a02:	f04f 0b02 	mov.w	fp, #2
		}

		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    5a06:	f206 7a64 	addw	sl, r6, #1892	; 0x764
		if (*handle != _radio.pkt_release[_first].handle) {
    5a0a:	b222      	sxth	r2, r4
    5a0c:	f8d6 0770 	ldr.w	r0, [r6, #1904]	; 0x770
    5a10:	f8b9 e000 	ldrh.w	lr, [r9]
    5a14:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    5a18:	f830 2032 	ldrh.w	r2, [r0, r2, lsl #3]
    5a1c:	4596      	cmp	lr, r2
    5a1e:	d120      	bne.n	5a62 <tx_cmplt_get+0x7e>
		node_tx = _radio.pkt_release[_first].node_tx;
    5a20:	6848      	ldr	r0, [r1, #4]
		if ((!node_tx) || (node_tx == (void *)1) ||
    5a22:	2801      	cmp	r0, #1
    5a24:	f020 0303 	bic.w	r3, r0, #3
    5a28:	d90a      	bls.n	5a40 <tx_cmplt_get+0x5c>
    5a2a:	b1f3      	cbz	r3, 5a6a <tx_cmplt_get+0x86>
		    ((((u32_t)node_tx & ~(0x00000003)) != 0) &&
    5a2c:	1d02      	adds	r2, r0, #4
    5a2e:	d01c      	beq.n	5a6a <tx_cmplt_get+0x86>
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    5a30:	7942      	ldrb	r2, [r0, #5]
    5a32:	b1d2      	cbz	r2, 5a6a <tx_cmplt_get+0x86>
		     ((pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_START) ||
    5a34:	7902      	ldrb	r2, [r0, #4]
    5a36:	f002 0203 	and.w	r2, r2, #3
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    5a3a:	3a01      	subs	r2, #1
    5a3c:	2a01      	cmp	r2, #1
    5a3e:	d814      	bhi.n	5a6a <tx_cmplt_get+0x86>
			_radio.pkt_release[_first].node_tx = (void *)1;
    5a40:	2201      	movs	r2, #1
			cmplt++;
    5a42:	4415      	add	r5, r2
			_radio.pkt_release[_first].node_tx = (void *)1;
    5a44:	604a      	str	r2, [r1, #4]
			cmplt++;
    5a46:	b2ed      	uxtb	r5, r5
		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
    5a48:	b113      	cbz	r3, 5a50 <tx_cmplt_get+0x6c>
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    5a4a:	4651      	mov	r1, sl
    5a4c:	f7fd ffdb 	bl	3a06 <mem_release>
		}

		_first = _first + 1;
    5a50:	3401      	adds	r4, #1
		if (_first == _radio.packet_tx_count) {
    5a52:	f896 2774 	ldrb.w	r2, [r6, #1908]	; 0x774
		_first = _first + 1;
    5a56:	b2e4      	uxtb	r4, r4
			_first = 0;
    5a58:	42a2      	cmp	r2, r4
    5a5a:	bf08      	it	eq
    5a5c:	2400      	moveq	r4, #0
		}

	} while (_first != last);
    5a5e:	4544      	cmp	r4, r8
    5a60:	d1d3      	bne.n	5a0a <tx_cmplt_get+0x26>

	*first = _first;
    5a62:	703c      	strb	r4, [r7, #0]

	return cmplt;
}
    5a64:	4628      	mov	r0, r5
    5a66:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			_radio.pkt_release[_first].node_tx = (void *)2;
    5a6a:	f8c1 b004 	str.w	fp, [r1, #4]
    5a6e:	e7eb      	b.n	5a48 <tx_cmplt_get+0x64>
		return 0;
    5a70:	2500      	movs	r5, #0
    5a72:	e7f7      	b.n	5a64 <tx_cmplt_get+0x80>
    5a74:	200009f8 	.word	0x200009f8

00005a78 <connection_get>:
{
    5a78:	b510      	push	{r4, lr}
	if (handle < _radio.connection_count) {
    5a7a:	4b09      	ldr	r3, [pc, #36]	; (5aa0 <connection_get+0x28>)
    5a7c:	f893 2718 	ldrb.w	r2, [r3, #1816]	; 0x718
    5a80:	4282      	cmp	r2, r0
{
    5a82:	4604      	mov	r4, r0
	if (handle < _radio.connection_count) {
    5a84:	d90a      	bls.n	5a9c <connection_get+0x24>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE, handle);
    5a86:	4602      	mov	r2, r0
    5a88:	f44f 7182 	mov.w	r1, #260	; 0x104
    5a8c:	f8d3 0710 	ldr.w	r0, [r3, #1808]	; 0x710
    5a90:	f7fd ffce 	bl	3a30 <mem_get>
		if ((conn) && (conn->handle == handle)) {
    5a94:	b110      	cbz	r0, 5a9c <connection_get+0x24>
    5a96:	8c03      	ldrh	r3, [r0, #32]
    5a98:	42a3      	cmp	r3, r4
    5a9a:	d000      	beq.n	5a9e <connection_get+0x26>
	return 0;
    5a9c:	2000      	movs	r0, #0
}
    5a9e:	bd10      	pop	{r4, pc}
    5aa0:	200009f8 	.word	0x200009f8

00005aa4 <role_disable>:
{
    5aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5aa8:	b086      	sub	sp, #24
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    5aaa:	2302      	movs	r3, #2
	switch (ticker_id_primary) {
    5aac:	2805      	cmp	r0, #5
{
    5aae:	4605      	mov	r5, r0
    5ab0:	460f      	mov	r7, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    5ab2:	9302      	str	r3, [sp, #8]
	switch (ticker_id_primary) {
    5ab4:	d00c      	beq.n	5ad0 <role_disable+0x2c>
    5ab6:	2806      	cmp	r0, #6
    5ab8:	d036      	beq.n	5b28 <role_disable+0x84>
		if (ticker_id_primary >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    5aba:	d93b      	bls.n	5b34 <role_disable+0x90>
			conn_handle = ticker_id_primary -
    5abc:	3807      	subs	r0, #7
			conn = connection_get(conn_handle);
    5abe:	b280      	uxth	r0, r0
    5ac0:	f7ff ffda 	bl	5a78 <connection_get>
			if (!conn) {
    5ac4:	2800      	cmp	r0, #0
    5ac6:	f000 80f3 	beq.w	5cb0 <role_disable+0x20c>
			ticks_active_to_start =
    5aca:	e890 0140 	ldmia.w	r0, {r6, r8}
		break;
    5ace:	e00f      	b.n	5af0 <role_disable+0x4c>
		ticks_xtal_to_start =
    5ad0:	4b78      	ldr	r3, [pc, #480]	; (5cb4 <role_disable+0x210>)
    5ad2:	699e      	ldr	r6, [r3, #24]
		ticks_active_to_start =
    5ad4:	f8d3 801c 	ldr.w	r8, [r3, #28]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    5ad8:	ab02      	add	r3, sp, #8
    5ada:	9300      	str	r3, [sp, #0]
    5adc:	460a      	mov	r2, r1
    5ade:	4b76      	ldr	r3, [pc, #472]	; (5cb8 <role_disable+0x214>)
    5ae0:	2103      	movs	r1, #3
    5ae2:	2000      	movs	r0, #0
    5ae4:	f7fe fe80 	bl	47e8 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    5ae8:	2802      	cmp	r0, #2
    5aea:	d00b      	beq.n	5b04 <role_disable+0x60>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    5aec:	9b02      	ldr	r3, [sp, #8]
    5aee:	b96b      	cbnz	r3, 5b0c <role_disable+0x68>
	LL_ASSERT(!_radio.ticker_id_stop);
    5af0:	4c70      	ldr	r4, [pc, #448]	; (5cb4 <role_disable+0x210>)
    5af2:	7ca3      	ldrb	r3, [r4, #18]
    5af4:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    5af8:	b1fb      	cbz	r3, 5b3a <role_disable+0x96>
    5afa:	4a70      	ldr	r2, [pc, #448]	; (5cbc <role_disable+0x218>)
    5afc:	4970      	ldr	r1, [pc, #448]	; (5cc0 <role_disable+0x21c>)
    5afe:	e00a      	b.n	5b16 <role_disable+0x72>
				cpu_sleep();
    5b00:	f7ff fed4 	bl	58ac <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
    5b04:	9b02      	ldr	r3, [sp, #8]
    5b06:	2b02      	cmp	r3, #2
    5b08:	d0fa      	beq.n	5b00 <role_disable+0x5c>
    5b0a:	e7ef      	b.n	5aec <role_disable+0x48>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    5b0c:	9b02      	ldr	r3, [sp, #8]
    5b0e:	2b01      	cmp	r3, #1
    5b10:	d0ee      	beq.n	5af0 <role_disable+0x4c>
    5b12:	4a6a      	ldr	r2, [pc, #424]	; (5cbc <role_disable+0x218>)
    5b14:	496b      	ldr	r1, [pc, #428]	; (5cc4 <role_disable+0x220>)
			LL_ASSERT(0);
    5b16:	2003      	movs	r0, #3
    5b18:	f7fc fb6a 	bl	21f0 <bt_log>
    5b1c:	4040      	eors	r0, r0
    5b1e:	f380 8811 	msr	BASEPRI, r0
    5b22:	f04f 0004 	mov.w	r0, #4
    5b26:	df02      	svc	2
		ticks_xtal_to_start =
    5b28:	4b62      	ldr	r3, [pc, #392]	; (5cb4 <role_disable+0x210>)
    5b2a:	f8d3 663c 	ldr.w	r6, [r3, #1596]	; 0x63c
		ticks_active_to_start =
    5b2e:	f8d3 8640 	ldr.w	r8, [r3, #1600]	; 0x640
		break;
    5b32:	e7dd      	b.n	5af0 <role_disable+0x4c>
			LL_ASSERT(0);
    5b34:	4a61      	ldr	r2, [pc, #388]	; (5cbc <role_disable+0x218>)
    5b36:	4964      	ldr	r1, [pc, #400]	; (5cc8 <role_disable+0x224>)
    5b38:	e7ed      	b.n	5b16 <role_disable+0x72>
	ret_cb = TICKER_STATUS_BUSY;
    5b3a:	ab06      	add	r3, sp, #24
    5b3c:	2202      	movs	r2, #2
	_radio.ticker_id_stop = ticker_id_primary;
    5b3e:	74a5      	strb	r5, [r4, #18]
	ret_cb = TICKER_STATUS_BUSY;
    5b40:	f843 2d10 	str.w	r2, [r3, #-16]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    5b44:	2103      	movs	r1, #3
    5b46:	9300      	str	r3, [sp, #0]
    5b48:	462a      	mov	r2, r5
    5b4a:	4b5b      	ldr	r3, [pc, #364]	; (5cb8 <role_disable+0x214>)
    5b4c:	f7fe fe4c 	bl	47e8 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    5b50:	2802      	cmp	r0, #2
    5b52:	d020      	beq.n	5b96 <role_disable+0xf2>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
    5b54:	9b02      	ldr	r3, [sp, #8]
    5b56:	2b00      	cmp	r3, #0
    5b58:	d15a      	bne.n	5c10 <role_disable+0x16c>
	if ((_radio.ticker_id_prepare == ticker_id_primary)
    5b5a:	7c23      	ldrb	r3, [r4, #16]
    5b5c:	429d      	cmp	r5, r3
    5b5e:	d002      	beq.n	5b66 <role_disable+0xc2>
	    || (_radio.ticker_id_event == ticker_id_primary)) {
    5b60:	7c63      	ldrb	r3, [r4, #17]
    5b62:	429d      	cmp	r5, r3
    5b64:	d150      	bne.n	5c08 <role_disable+0x164>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
    5b66:	ab06      	add	r3, sp, #24
    5b68:	2202      	movs	r2, #2
    5b6a:	f843 2d0c 	str.w	r2, [r3, #-12]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    5b6e:	2200      	movs	r2, #0
    5b70:	9300      	str	r3, [sp, #0]
    5b72:	2103      	movs	r1, #3
    5b74:	4b50      	ldr	r3, [pc, #320]	; (5cb8 <role_disable+0x214>)
    5b76:	4610      	mov	r0, r2
    5b78:	f7fe fe36 	bl	47e8 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    5b7c:	2802      	cmp	r0, #2
    5b7e:	d118      	bne.n	5bb2 <role_disable+0x10e>
		mayfly_enable(RADIO_TICKER_USER_ID_APP,
    5b80:	2201      	movs	r2, #1
    5b82:	4611      	mov	r1, r2
    5b84:	2003      	movs	r0, #3
    5b86:	f7fd ffb5 	bl	3af4 <mayfly_enable>
		LL_ASSERT(ret_cb_evt != TICKER_STATUS_BUSY);
    5b8a:	9b03      	ldr	r3, [sp, #12]
    5b8c:	2b02      	cmp	r3, #2
    5b8e:	d110      	bne.n	5bb2 <role_disable+0x10e>
    5b90:	4a4e      	ldr	r2, [pc, #312]	; (5ccc <role_disable+0x228>)
    5b92:	494f      	ldr	r1, [pc, #316]	; (5cd0 <role_disable+0x22c>)
    5b94:	e7bf      	b.n	5b16 <role_disable+0x72>
		if (_radio.ticker_id_event == ticker_id_primary) {
    5b96:	7c63      	ldrb	r3, [r4, #17]
    5b98:	429d      	cmp	r5, r3
    5b9a:	d104      	bne.n	5ba6 <role_disable+0x102>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    5b9c:	2201      	movs	r2, #1
    5b9e:	4611      	mov	r1, r2
    5ba0:	2003      	movs	r0, #3
    5ba2:	f7fd ffa7 	bl	3af4 <mayfly_enable>
		while (ret_cb == TICKER_STATUS_BUSY) {
    5ba6:	9b02      	ldr	r3, [sp, #8]
    5ba8:	2b02      	cmp	r3, #2
    5baa:	d1d3      	bne.n	5b54 <role_disable+0xb0>
			cpu_sleep();
    5bac:	f7ff fe7e 	bl	58ac <cpu_sleep>
    5bb0:	e7f9      	b.n	5ba6 <role_disable+0x102>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
    5bb2:	9803      	ldr	r0, [sp, #12]
    5bb4:	2800      	cmp	r0, #0
    5bb6:	d141      	bne.n	5c3c <role_disable+0x198>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
    5bb8:	2302      	movs	r3, #2
    5bba:	9304      	str	r3, [sp, #16]
		LL_ASSERT(_radio.ticker_id_prepare);
    5bbc:	7c23      	ldrb	r3, [r4, #16]
    5bbe:	b913      	cbnz	r3, 5bc6 <role_disable+0x122>
    5bc0:	4a42      	ldr	r2, [pc, #264]	; (5ccc <role_disable+0x228>)
    5bc2:	4944      	ldr	r1, [pc, #272]	; (5cd4 <role_disable+0x230>)
    5bc4:	e7a7      	b.n	5b16 <role_disable+0x72>
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    5bc6:	ab04      	add	r3, sp, #16
    5bc8:	9300      	str	r3, [sp, #0]
    5bca:	2201      	movs	r2, #1
    5bcc:	4b3a      	ldr	r3, [pc, #232]	; (5cb8 <role_disable+0x214>)
		_radio.ticker_id_prepare = 0;
    5bce:	7420      	strb	r0, [r4, #16]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    5bd0:	2103      	movs	r1, #3
    5bd2:	f7fe fe09 	bl	47e8 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    5bd6:	2802      	cmp	r0, #2
    5bd8:	d10a      	bne.n	5bf0 <role_disable+0x14c>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    5bda:	2201      	movs	r2, #1
    5bdc:	4611      	mov	r1, r2
    5bde:	2003      	movs	r0, #3
    5be0:	f7fd ff88 	bl	3af4 <mayfly_enable>
			LL_ASSERT(ret_cb_m0 != TICKER_STATUS_BUSY);
    5be4:	9b04      	ldr	r3, [sp, #16]
    5be6:	2b02      	cmp	r3, #2
    5be8:	d102      	bne.n	5bf0 <role_disable+0x14c>
    5bea:	4a38      	ldr	r2, [pc, #224]	; (5ccc <role_disable+0x228>)
    5bec:	493a      	ldr	r1, [pc, #232]	; (5cd8 <role_disable+0x234>)
    5bee:	e792      	b.n	5b16 <role_disable+0x72>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
    5bf0:	9a04      	ldr	r2, [sp, #16]
    5bf2:	b99a      	cbnz	r2, 5c1c <role_disable+0x178>
			ticks_xtal_to_start &= ~XON_BITMASK;
    5bf4:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
			if (ticks_active_to_start > ticks_xtal_to_start) {
    5bf8:	45b0      	cmp	r8, r6
    5bfa:	d91d      	bls.n	5c38 <role_disable+0x194>
				ret = mayfly_enqueue(
    5bfc:	4b37      	ldr	r3, [pc, #220]	; (5cdc <role_disable+0x238>)
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    5bfe:	4611      	mov	r1, r2
    5c00:	2003      	movs	r0, #3
    5c02:	f7fd ff9f 	bl	3b44 <mayfly_enqueue>
			LL_ASSERT(!ret);
    5c06:	b9a0      	cbnz	r0, 5c32 <role_disable+0x18e>
	if (!_radio.ticker_id_stop) {
    5c08:	7ca3      	ldrb	r3, [r4, #18]
    5c0a:	b90b      	cbnz	r3, 5c10 <role_disable+0x16c>
		ret_cb = TICKER_STATUS_FAILURE;
    5c0c:	2301      	movs	r3, #1
    5c0e:	9302      	str	r3, [sp, #8]
	_radio.ticker_id_stop = 0;
    5c10:	2300      	movs	r3, #0
    5c12:	74a3      	strb	r3, [r4, #18]
	return ret_cb;
    5c14:	9802      	ldr	r0, [sp, #8]
}
    5c16:	b006      	add	sp, #24
    5c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
    5c1c:	9b04      	ldr	r3, [sp, #16]
    5c1e:	2b01      	cmp	r3, #1
    5c20:	d144      	bne.n	5cac <role_disable+0x208>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    5c22:	2200      	movs	r2, #0
    5c24:	4611      	mov	r1, r2
    5c26:	4b2d      	ldr	r3, [pc, #180]	; (5cdc <role_disable+0x238>)
    5c28:	2003      	movs	r0, #3
    5c2a:	f7fd ff8b 	bl	3b44 <mayfly_enqueue>
			LL_ASSERT(!ret);
    5c2e:	4602      	mov	r2, r0
    5c30:	b110      	cbz	r0, 5c38 <role_disable+0x194>
			LL_ASSERT(!ret);
    5c32:	4a26      	ldr	r2, [pc, #152]	; (5ccc <role_disable+0x228>)
    5c34:	492a      	ldr	r1, [pc, #168]	; (5ce0 <role_disable+0x23c>)
    5c36:	e76e      	b.n	5b16 <role_disable+0x72>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    5c38:	4b2a      	ldr	r3, [pc, #168]	; (5ce4 <role_disable+0x240>)
    5c3a:	e7e0      	b.n	5bfe <role_disable+0x15a>
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
    5c3c:	9d03      	ldr	r5, [sp, #12]
    5c3e:	2d01      	cmp	r5, #1
    5c40:	d134      	bne.n	5cac <role_disable+0x208>
		if (ticker_id_stop != TICKER_NULL) {
    5c42:	2fff      	cmp	r7, #255	; 0xff
    5c44:	d01f      	beq.n	5c86 <role_disable+0x1e2>
			u32_t volatile ret_cb_stop = TICKER_STATUS_BUSY;
    5c46:	ab06      	add	r3, sp, #24
    5c48:	2202      	movs	r2, #2
    5c4a:	f843 2d04 	str.w	r2, [r3, #-4]!
			ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    5c4e:	2103      	movs	r1, #3
    5c50:	9300      	str	r3, [sp, #0]
    5c52:	463a      	mov	r2, r7
    5c54:	4b18      	ldr	r3, [pc, #96]	; (5cb8 <role_disable+0x214>)
    5c56:	2000      	movs	r0, #0
    5c58:	f7fe fdc6 	bl	47e8 <ticker_stop>
			if (ret == TICKER_STATUS_BUSY) {
    5c5c:	2802      	cmp	r0, #2
    5c5e:	d10a      	bne.n	5c76 <role_disable+0x1d2>
				mayfly_enable(RADIO_TICKER_USER_ID_APP,
    5c60:	462a      	mov	r2, r5
    5c62:	4629      	mov	r1, r5
    5c64:	2003      	movs	r0, #3
    5c66:	f7fd ff45 	bl	3af4 <mayfly_enable>
				LL_ASSERT(ret_cb_stop != TICKER_STATUS_BUSY);
    5c6a:	9b05      	ldr	r3, [sp, #20]
    5c6c:	2b02      	cmp	r3, #2
    5c6e:	d102      	bne.n	5c76 <role_disable+0x1d2>
    5c70:	4a16      	ldr	r2, [pc, #88]	; (5ccc <role_disable+0x228>)
    5c72:	491d      	ldr	r1, [pc, #116]	; (5ce8 <role_disable+0x244>)
    5c74:	e74f      	b.n	5b16 <role_disable+0x72>
			LL_ASSERT((ret_cb_stop == TICKER_STATUS_SUCCESS) ||
    5c76:	9b05      	ldr	r3, [sp, #20]
    5c78:	b12b      	cbz	r3, 5c86 <role_disable+0x1e2>
    5c7a:	9b05      	ldr	r3, [sp, #20]
    5c7c:	2b01      	cmp	r3, #1
    5c7e:	d002      	beq.n	5c86 <role_disable+0x1e2>
    5c80:	4a12      	ldr	r2, [pc, #72]	; (5ccc <role_disable+0x228>)
    5c82:	491a      	ldr	r1, [pc, #104]	; (5cec <role_disable+0x248>)
    5c84:	e747      	b.n	5b16 <role_disable+0x72>
		if (_radio.role != ROLE_NONE) {
    5c86:	7ce3      	ldrb	r3, [r4, #19]
    5c88:	2b00      	cmp	r3, #0
    5c8a:	d0bd      	beq.n	5c08 <role_disable+0x164>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    5c8c:	4b18      	ldr	r3, [pc, #96]	; (5cf0 <role_disable+0x24c>)
    5c8e:	2204      	movs	r2, #4
    5c90:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    5c92:	2200      	movs	r2, #0
    5c94:	4611      	mov	r1, r2
    5c96:	2003      	movs	r0, #3
    5c98:	f7fd ff54 	bl	3b44 <mayfly_enqueue>
			LL_ASSERT(!ret);
    5c9c:	2800      	cmp	r0, #0
    5c9e:	d1c8      	bne.n	5c32 <role_disable+0x18e>
			while (_radio.role != ROLE_NONE) {
    5ca0:	7ce3      	ldrb	r3, [r4, #19]
    5ca2:	2b00      	cmp	r3, #0
    5ca4:	d0b0      	beq.n	5c08 <role_disable+0x164>
				cpu_sleep();
    5ca6:	f7ff fe01 	bl	58ac <cpu_sleep>
    5caa:	e7f9      	b.n	5ca0 <role_disable+0x1fc>
		LL_ASSERT(0);
    5cac:	4a07      	ldr	r2, [pc, #28]	; (5ccc <role_disable+0x228>)
    5cae:	e742      	b.n	5b36 <role_disable+0x92>
				return 1;
    5cb0:	2001      	movs	r0, #1
    5cb2:	e7b0      	b.n	5c16 <role_disable+0x172>
    5cb4:	200009f8 	.word	0x200009f8
    5cb8:	000058f1 	.word	0x000058f1
    5cbc:	0000e549 	.word	0x0000e549
    5cc0:	0000ea65 	.word	0x0000ea65
    5cc4:	0000ea31 	.word	0x0000ea31
    5cc8:	0000d773 	.word	0x0000d773
    5ccc:	0000e535 	.word	0x0000e535
    5cd0:	0000ea91 	.word	0x0000ea91
    5cd4:	0000eab6 	.word	0x0000eab6
    5cd8:	0000eae4 	.word	0x0000eae4
    5cdc:	20004f70 	.word	0x20004f70
    5ce0:	0000eb08 	.word	0x0000eb08
    5ce4:	20005010 	.word	0x20005010
    5ce8:	0000eb22 	.word	0x0000eb22
    5cec:	0000eb48 	.word	0x0000eb48
    5cf0:	20004fa0 	.word	0x20004fa0

00005cf4 <chan_set>:
{
    5cf4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	pdu = (void *)_radio.advertiser.adv_data.data
    5cf8:	4e87      	ldr	r6, [pc, #540]	; (5f18 <chan_set+0x224>)
    5cfa:	f896 322d 	ldrb.w	r3, [r6, #557]	; 0x22d
	if(pdu->type == PDU_ADV_TYPE_EXT_IND){
    5cfe:	eb03 2303 	add.w	r3, r3, r3, lsl #8
    5d02:	4433      	add	r3, r6
{
    5d04:	4604      	mov	r4, r0
	if(pdu->type == PDU_ADV_TYPE_EXT_IND){
    5d06:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
    5d0a:	f003 030f 	and.w	r3, r3, #15
    5d0e:	2b07      	cmp	r3, #7
    5d10:	f040 80ed 	bne.w	5eee <chan_set+0x1fa>
		switch (chan) {
    5d14:	2826      	cmp	r0, #38	; 0x26
    5d16:	f8df 824c 	ldr.w	r8, [pc, #588]	; 5f64 <chan_set+0x270>
    5d1a:	d02e      	beq.n	5d7a <chan_set+0x86>
    5d1c:	2827      	cmp	r0, #39	; 0x27
    5d1e:	f8df 9248 	ldr.w	r9, [pc, #584]	; 5f68 <chan_set+0x274>
    5d22:	d034      	beq.n	5d8e <chan_set+0x9a>
    5d24:	2825      	cmp	r0, #37	; 0x25
    5d26:	d162      	bne.n	5dee <chan_set+0xfa>
			stop_time_37 = k_cycle_get_32();
    5d28:	f7fc f90c 	bl	1f44 <_timer_cycle_get_32>
			cycles_spent_37 = stop_time_37 - start_time37;
    5d2c:	4e7b      	ldr	r6, [pc, #492]	; (5f1c <chan_set+0x228>)
			stop_time_37 = k_cycle_get_32();
    5d2e:	4b7c      	ldr	r3, [pc, #496]	; (5f20 <chan_set+0x22c>)
			cycles_spent_37 = stop_time_37 - start_time37;
    5d30:	6837      	ldr	r7, [r6, #0]
			stop_time_37 = k_cycle_get_32();
    5d32:	6018      	str	r0, [r3, #0]
			cycles_spent_37 = stop_time_37 - start_time37;
    5d34:	4b7b      	ldr	r3, [pc, #492]	; (5f24 <chan_set+0x230>)
    5d36:	1bc7      	subs	r7, r0, r7
    5d38:	601f      	str	r7, [r3, #0]
			us_spent_37 = SYS_CLOCK_HW_CYCLES_TO_NS(cycles_spent_37)/1000;
    5d3a:	4b7b      	ldr	r3, [pc, #492]	; (5f28 <chan_set+0x234>)
    5d3c:	681a      	ldr	r2, [r3, #0]
    5d3e:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    5d42:	fb82 2305 	smull	r2, r3, r2, r5
    5d46:	fba2 0107 	umull	r0, r1, r2, r7
    5d4a:	f8d9 2000 	ldr.w	r2, [r9]
    5d4e:	fb07 1103 	mla	r1, r7, r3, r1
    5d52:	17d3      	asrs	r3, r2, #31
    5d54:	f7fa fa88 	bl	268 <__aeabi_uldivmod>
    5d58:	4b74      	ldr	r3, [pc, #464]	; (5f2c <chan_set+0x238>)
    5d5a:	fbb0 f0f5 	udiv	r0, r0, r5
    5d5e:	6018      	str	r0, [r3, #0]
			start_time = k_cycle_get_32();
    5d60:	f7fc f8f0 	bl	1f44 <_timer_cycle_get_32>
    5d64:	f8c8 0000 	str.w	r0, [r8]
			start_time37= k_cycle_get_32();
    5d68:	f7fc f8ec 	bl	1f44 <_timer_cycle_get_32>
			pckt_send++;
    5d6c:	4a70      	ldr	r2, [pc, #448]	; (5f30 <chan_set+0x23c>)
			start_time37= k_cycle_get_32();
    5d6e:	6030      	str	r0, [r6, #0]
			pckt_send++;
    5d70:	7813      	ldrb	r3, [r2, #0]
    5d72:	3301      	adds	r3, #1
    5d74:	7013      	strb	r3, [r2, #0]
			radio_freq_chan_set(2);
    5d76:	2002      	movs	r0, #2
    5d78:	e0ad      	b.n	5ed6 <chan_set+0x1e2>
			start_time = k_cycle_get_32();
    5d7a:	f7fc f8e3 	bl	1f44 <_timer_cycle_get_32>
			pckt_send++;
    5d7e:	4a6c      	ldr	r2, [pc, #432]	; (5f30 <chan_set+0x23c>)
			start_time = k_cycle_get_32();
    5d80:	f8c8 0000 	str.w	r0, [r8]
			pckt_send++;
    5d84:	7813      	ldrb	r3, [r2, #0]
    5d86:	3301      	adds	r3, #1
    5d88:	7013      	strb	r3, [r2, #0]
			radio_freq_chan_set(26);
    5d8a:	201a      	movs	r0, #26
    5d8c:	e0a3      	b.n	5ed6 <chan_set+0x1e2>
			stop_time_39 = k_cycle_get_32();
    5d8e:	f7fc f8d9 	bl	1f44 <_timer_cycle_get_32>
    5d92:	4b68      	ldr	r3, [pc, #416]	; (5f34 <chan_set+0x240>)
    5d94:	6018      	str	r0, [r3, #0]
			Time_difference = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_39 - start_time)/1000;
    5d96:	f8d8 3000 	ldr.w	r3, [r8]
    5d9a:	eba0 0e03 	sub.w	lr, r0, r3
    5d9e:	4b62      	ldr	r3, [pc, #392]	; (5f28 <chan_set+0x234>)
    5da0:	681a      	ldr	r2, [r3, #0]
    5da2:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
    5da6:	fb82 2307 	smull	r2, r3, r2, r7
    5daa:	fbae 0102 	umull	r0, r1, lr, r2
    5dae:	f8d9 2000 	ldr.w	r2, [r9]
    5db2:	fb0e 1103 	mla	r1, lr, r3, r1
    5db6:	17d3      	asrs	r3, r2, #31
    5db8:	f7fa fa56 	bl	268 <__aeabi_uldivmod>
    5dbc:	4b5e      	ldr	r3, [pc, #376]	; (5f38 <chan_set+0x244>)
    5dbe:	fbb0 f0f7 	udiv	r0, r0, r7
    5dc2:	6018      	str	r0, [r3, #0]
			pckt_send = 0;
    5dc4:	4b5a      	ldr	r3, [pc, #360]	; (5f30 <chan_set+0x23c>)
			Time_difference = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_39 - start_time)/1000;
    5dc6:	2500      	movs	r5, #0
			pckt_send = 0;
    5dc8:	701d      	strb	r5, [r3, #0]
			start_time = k_cycle_get_32();
    5dca:	f7fc f8bb 	bl	1f44 <_timer_cycle_get_32>
			_radio.ext_advertiser.current_slot++;
    5dce:	f896 3689 	ldrb.w	r3, [r6, #1673]	; 0x689
			if(_radio.ext_advertiser.current_slot > _radio.ext_advertiser.max_skip){
    5dd2:	f896 2688 	ldrb.w	r2, [r6, #1672]	; 0x688
			start_time = k_cycle_get_32();
    5dd6:	f8c8 0000 	str.w	r0, [r8]
			_radio.ext_advertiser.current_slot++;
    5dda:	3301      	adds	r3, #1
    5ddc:	b2db      	uxtb	r3, r3
			if(_radio.ext_advertiser.current_slot > _radio.ext_advertiser.max_skip){
    5dde:	429a      	cmp	r2, r3
			_radio.ext_advertiser.current_slot++;
    5de0:	f886 3689 	strb.w	r3, [r6, #1673]	; 0x689
			if(_radio.ext_advertiser.current_slot > _radio.ext_advertiser.max_skip){
    5de4:	d201      	bcs.n	5dea <chan_set+0xf6>
			_radio.ext_advertiser.current_slot= 0;
    5de6:	f886 5689 	strb.w	r5, [r6, #1673]	; 0x689
			radio_freq_chan_set(80);
    5dea:	2050      	movs	r0, #80	; 0x50
    5dec:	e073      	b.n	5ed6 <chan_set+0x1e2>
			stop_time_aux1 = k_cycle_get_32();
    5dee:	f7fc f8a9 	bl	1f44 <_timer_cycle_get_32>
    5df2:	4b52      	ldr	r3, [pc, #328]	; (5f3c <chan_set+0x248>)
    5df4:	6018      	str	r0, [r3, #0]
    5df6:	4b4c      	ldr	r3, [pc, #304]	; (5f28 <chan_set+0x234>)
    5df8:	681b      	ldr	r3, [r3, #0]
    5dfa:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    5dfe:	fb83 ab05 	smull	sl, fp, r3, r5
			us_spent_aux1 = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_aux1 - start_time)/1000;
    5e02:	f8d9 3000 	ldr.w	r3, [r9]
    5e06:	4619      	mov	r1, r3
    5e08:	17da      	asrs	r2, r3, #31
    5e0a:	f8d8 3000 	ldr.w	r3, [r8]
			us_spent_5 = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_aux1 - start_time_5)/1000;
    5e0e:	f8df 815c 	ldr.w	r8, [pc, #348]	; 5f6c <chan_set+0x278>
			us_spent_aux1 = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_aux1 - start_time)/1000;
    5e12:	1ac3      	subs	r3, r0, r3
			stop_time_aux1 = k_cycle_get_32();
    5e14:	4607      	mov	r7, r0
			us_spent_aux1 = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_aux1 - start_time)/1000;
    5e16:	e9cd 1200 	strd	r1, r2, [sp]
    5e1a:	fba3 010a 	umull	r0, r1, r3, sl
    5e1e:	fb03 110b 	mla	r1, r3, fp, r1
    5e22:	e9dd 2300 	ldrd	r2, r3, [sp]
    5e26:	f7fa fa1f 	bl	268 <__aeabi_uldivmod>
    5e2a:	4b45      	ldr	r3, [pc, #276]	; (5f40 <chan_set+0x24c>)
    5e2c:	fbb0 f0f5 	udiv	r0, r0, r5
    5e30:	6018      	str	r0, [r3, #0]
			us_spent_aux = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_aux1 - start_time37)/1000;
    5e32:	4b3a      	ldr	r3, [pc, #232]	; (5f1c <chan_set+0x228>)
    5e34:	681b      	ldr	r3, [r3, #0]
    5e36:	1afb      	subs	r3, r7, r3
    5e38:	fba3 010a 	umull	r0, r1, r3, sl
    5e3c:	fb03 110b 	mla	r1, r3, fp, r1
    5e40:	e9dd 2300 	ldrd	r2, r3, [sp]
    5e44:	f7fa fa10 	bl	268 <__aeabi_uldivmod>
    5e48:	4b3e      	ldr	r3, [pc, #248]	; (5f44 <chan_set+0x250>)
    5e4a:	fbb0 f0f5 	udiv	r0, r0, r5
    5e4e:	6018      	str	r0, [r3, #0]
			us_spent_5 = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_aux1 - start_time_5)/1000;
    5e50:	f8d8 3000 	ldr.w	r3, [r8]
    5e54:	1aff      	subs	r7, r7, r3
    5e56:	fba7 010a 	umull	r0, r1, r7, sl
    5e5a:	e9dd 2300 	ldrd	r2, r3, [sp]
    5e5e:	fb07 110b 	mla	r1, r7, fp, r1
    5e62:	f7fa fa01 	bl	268 <__aeabi_uldivmod>
    5e66:	4b38      	ldr	r3, [pc, #224]	; (5f48 <chan_set+0x254>)
    5e68:	fbb0 f0f5 	udiv	r0, r0, r5
    5e6c:	6018      	str	r0, [r3, #0]
 			stop_dynamic_cal = k_cycle_get_32(); 
    5e6e:	f7fc f869 	bl	1f44 <_timer_cycle_get_32>
    5e72:	4b36      	ldr	r3, [pc, #216]	; (5f4c <chan_set+0x258>)
			last_dynamic_cal = final_dynamic_cal;
    5e74:	4f36      	ldr	r7, [pc, #216]	; (5f50 <chan_set+0x25c>)
 			stop_dynamic_cal = k_cycle_get_32(); 
    5e76:	2100      	movs	r1, #0
    5e78:	e9c3 0100 	strd	r0, r1, [r3]
			last_dynamic_cal = final_dynamic_cal;
    5e7c:	4b35      	ldr	r3, [pc, #212]	; (5f54 <chan_set+0x260>)
    5e7e:	f8d7 b000 	ldr.w	fp, [r7]
    5e82:	687a      	ldr	r2, [r7, #4]
    5e84:	f8c3 b000 	str.w	fp, [r3]
    5e88:	605a      	str	r2, [r3, #4]
			final_dynamic_cal = SYS_CLOCK_HW_CYCLES_TO_NS(stop_dynamic_cal - start_dynamic_cal)/1000;
    5e8a:	4b33      	ldr	r3, [pc, #204]	; (5f58 <chan_set+0x264>)
    5e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
    5e90:	1a82      	subs	r2, r0, r2
    5e92:	eb61 0303 	sbc.w	r3, r1, r3
    5e96:	4924      	ldr	r1, [pc, #144]	; (5f28 <chan_set+0x234>)
    5e98:	6808      	ldr	r0, [r1, #0]
    5e9a:	fb80 0105 	smull	r0, r1, r0, r5
    5e9e:	4351      	muls	r1, r2
    5ea0:	fb00 1303 	mla	r3, r0, r3, r1
    5ea4:	fba2 0100 	umull	r0, r1, r2, r0
    5ea8:	f8d9 2000 	ldr.w	r2, [r9]
    5eac:	4419      	add	r1, r3
    5eae:	17d3      	asrs	r3, r2, #31
    5eb0:	f7fa f9da 	bl	268 <__aeabi_uldivmod>
    5eb4:	2300      	movs	r3, #0
    5eb6:	fbb0 f0f5 	udiv	r0, r0, r5
    5eba:	6038      	str	r0, [r7, #0]
			_radio.ext_advertiser.last_dynamic_cal = final_dynamic_cal-last_dynamic_cal;
    5ebc:	eba0 000b 	sub.w	r0, r0, fp
			final_dynamic_cal = SYS_CLOCK_HW_CYCLES_TO_NS(stop_dynamic_cal - start_dynamic_cal)/1000;
    5ec0:	607b      	str	r3, [r7, #4]
			_radio.ext_advertiser.last_dynamic_cal = final_dynamic_cal-last_dynamic_cal;
    5ec2:	f8c6 06a8 	str.w	r0, [r6, #1704]	; 0x6a8
			start_time_5 = k_cycle_get_32();
    5ec6:	f7fc f83d 	bl	1f44 <_timer_cycle_get_32>
    5eca:	f8c8 0000 	str.w	r0, [r8]
			if (chan < 11) {
    5ece:	2c0a      	cmp	r4, #10
    5ed0:	d809      	bhi.n	5ee6 <chan_set+0x1f2>
				radio_freq_chan_set(4 + (2 * chan));
    5ed2:	1ca0      	adds	r0, r4, #2
				radio_freq_chan_set(28 + (2 * (chan - 11)));
    5ed4:	0040      	lsls	r0, r0, #1
    5ed6:	f004 ffdd 	bl	ae94 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
    5eda:	4620      	mov	r0, r4
}
    5edc:	b003      	add	sp, #12
    5ede:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	radio_whiten_iv_set(chan);
    5ee2:	f004 bfdd 	b.w	aea0 <radio_whiten_iv_set>
			} else if (chan < 40) {
    5ee6:	2c27      	cmp	r4, #39	; 0x27
    5ee8:	d80a      	bhi.n	5f00 <chan_set+0x20c>
				radio_freq_chan_set(28 + (2 * (chan - 11)));
    5eea:	1ce0      	adds	r0, r4, #3
    5eec:	e7f2      	b.n	5ed4 <chan_set+0x1e0>
		switch (chan) {
    5eee:	2826      	cmp	r0, #38	; 0x26
    5ef0:	f43f af4b 	beq.w	5d8a <chan_set+0x96>
    5ef4:	2827      	cmp	r0, #39	; 0x27
    5ef6:	f43f af78 	beq.w	5dea <chan_set+0xf6>
    5efa:	2825      	cmp	r0, #37	; 0x25
    5efc:	d1e7      	bne.n	5ece <chan_set+0x1da>
    5efe:	e73a      	b.n	5d76 <chan_set+0x82>
				LL_ASSERT(0);
    5f00:	4a16      	ldr	r2, [pc, #88]	; (5f5c <chan_set+0x268>)
    5f02:	4917      	ldr	r1, [pc, #92]	; (5f60 <chan_set+0x26c>)
    5f04:	2003      	movs	r0, #3
    5f06:	f7fc f973 	bl	21f0 <bt_log>
    5f0a:	4040      	eors	r0, r0
    5f0c:	f380 8811 	msr	BASEPRI, r0
    5f10:	f04f 0004 	mov.w	r0, #4
    5f14:	df02      	svc	2
    5f16:	bf00      	nop
    5f18:	200009f8 	.word	0x200009f8
    5f1c:	20002c90 	.word	0x20002c90
    5f20:	20002cfc 	.word	0x20002cfc
    5f24:	20002d4c 	.word	0x20002d4c
    5f28:	2000508c 	.word	0x2000508c
    5f2c:	20002d68 	.word	0x20002d68
    5f30:	200011d0 	.word	0x200011d0
    5f34:	20002d00 	.word	0x20002d00
    5f38:	20002d50 	.word	0x20002d50
    5f3c:	20002d5c 	.word	0x20002d5c
    5f40:	20002d28 	.word	0x20002d28
    5f44:	20002c7c 	.word	0x20002c7c
    5f48:	20002d60 	.word	0x20002d60
    5f4c:	20002d20 	.word	0x20002d20
    5f50:	20001190 	.word	0x20001190
    5f54:	20001198 	.word	0x20001198
    5f58:	20002c88 	.word	0x20002c88
    5f5c:	0000e3b9 	.word	0x0000e3b9
    5f60:	0000d773 	.word	0x0000d773
    5f64:	20002d18 	.word	0x20002d18
    5f68:	20005088 	.word	0x20005088
    5f6c:	20002d3c 	.word	0x20002d3c

00005f70 <adv_setup>:
{
    5f70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (_radio.advertiser.adv_data.first !=
    5f74:	4c81      	ldr	r4, [pc, #516]	; (617c <adv_setup+0x20c>)
    5f76:	f894 322d 	ldrb.w	r3, [r4, #557]	; 0x22d
    5f7a:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    5f7e:	429a      	cmp	r2, r3
    5f80:	d006      	beq.n	5f90 <adv_setup+0x20>
		first = _radio.advertiser.adv_data.first + 1;
    5f82:	3301      	adds	r3, #1
    5f84:	b2db      	uxtb	r3, r3
			first = 0;
    5f86:	2b02      	cmp	r3, #2
    5f88:	bf08      	it	eq
    5f8a:	2300      	moveq	r3, #0
		_radio.advertiser.adv_data.first = first;
    5f8c:	f884 322d 	strb.w	r3, [r4, #557]	; 0x22d
	if (_radio.advertiser.scan_data.first != _radio.
    5f90:	f894 3635 	ldrb.w	r3, [r4, #1589]	; 0x635
    5f94:	f894 2636 	ldrb.w	r2, [r4, #1590]	; 0x636
    5f98:	429a      	cmp	r2, r3
    5f9a:	d006      	beq.n	5faa <adv_setup+0x3a>
		first = _radio.advertiser.scan_data.first + 1;
    5f9c:	3301      	adds	r3, #1
    5f9e:	b2db      	uxtb	r3, r3
			first = 0;
    5fa0:	2b02      	cmp	r3, #2
    5fa2:	bf08      	it	eq
    5fa4:	2300      	moveq	r3, #0
		_radio.advertiser.scan_data.first = first;
    5fa6:	f884 3635 	strb.w	r3, [r4, #1589]	; 0x635
	pdu = (void *)_radio.advertiser.adv_data.data
    5faa:	f894 722d 	ldrb.w	r7, [r4, #557]	; 0x22d
    5fae:	eb07 2707 	add.w	r7, r7, r7, lsl #8
    5fb2:	372b      	adds	r7, #43	; 0x2b
    5fb4:	eb04 0907 	add.w	r9, r4, r7
	if(pdu->type == PDU_ADV_TYPE_EXT_IND){
    5fb8:	5de3      	ldrb	r3, [r4, r7]
    5fba:	f003 030f 	and.w	r3, r3, #15
    5fbe:	2b07      	cmp	r3, #7
    5fc0:	d161      	bne.n	6086 <adv_setup+0x116>
			if(h->adv_addr){
    5fc2:	f899 3003 	ldrb.w	r3, [r9, #3]
    5fc6:	07dd      	lsls	r5, r3, #31
				ptr += BDADDR_SIZE;
    5fc8:	bf4c      	ite	mi
    5fca:	f109 050a 	addmi.w	r5, r9, #10
		ptr = (u8_t *)h + sizeof(*h);
    5fce:	f109 0504 	addpl.w	r5, r9, #4
			if(h->tgt_addr){
    5fd2:	079a      	lsls	r2, r3, #30
				ptr += BDADDR_SIZE;
    5fd4:	bf48      	it	mi
    5fd6:	3506      	addmi	r5, #6
			if(h->adi){
    5fd8:	071e      	lsls	r6, r3, #28
				ptr += sizeof(*adi_ptr);
    5fda:	bf48      	it	mi
    5fdc:	3502      	addmi	r5, #2
			if(h->aux_ptr){
    5fde:	06da      	lsls	r2, r3, #27
    5fe0:	d54b      	bpl.n	607a <adv_setup+0x10a>
					_radio.ext_advertiser.slot = ( _radio.ext_advertiser.prim_interval + _radio.ext_advertiser.ticker_offset) * _radio.ext_advertiser.current_slot;
    5fe2:	f8d4 26a4 	ldr.w	r2, [r4, #1700]	; 0x6a4
    5fe6:	f8d4 3680 	ldr.w	r3, [r4, #1664]	; 0x680
				if((_radio.advertiser.chan_map & 0x07)== 0x07) {
    5fea:	f894 6029 	ldrb.w	r6, [r4, #41]	; 0x29
					_radio.ext_advertiser.slot = ( _radio.ext_advertiser.prim_interval + _radio.ext_advertiser.ticker_offset) * _radio.ext_advertiser.current_slot;
    5fee:	4413      	add	r3, r2
    5ff0:	f894 2689 	ldrb.w	r2, [r4, #1673]	; 0x689
				if((_radio.advertiser.chan_map & 0x07)== 0x07) {
    5ff4:	f3c6 1602 	ubfx	r6, r6, #4, #3
					_radio.ext_advertiser.slot = ( _radio.ext_advertiser.prim_interval + _radio.ext_advertiser.ticker_offset) * _radio.ext_advertiser.current_slot;
    5ff8:	435a      	muls	r2, r3
				if((_radio.advertiser.chan_map & 0x07)== 0x07) {
    5ffa:	2e07      	cmp	r6, #7
					_radio.ext_advertiser.slot = ( _radio.ext_advertiser.prim_interval + _radio.ext_advertiser.ticker_offset) * _radio.ext_advertiser.current_slot;
    5ffc:	f8c4 268c 	str.w	r2, [r4, #1676]	; 0x68c
				if((_radio.advertiser.chan_map & 0x07)== 0x07) {
    6000:	f040 8095 	bne.w	612e <adv_setup+0x1be>
					if((_radio.advertiser.chan_map_current & 0x07) == 0x07){
    6004:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    6008:	f003 0307 	and.w	r3, r3, #7
    600c:	2b07      	cmp	r3, #7
    600e:	f040 8081 	bne.w	6114 <adv_setup+0x1a4>
						offset = (_radio.ext_advertiser.chan_37 -  _radio.ext_advertiser.slot );
    6012:	f8d4 0690 	ldr.w	r0, [r4, #1680]	; 0x690
    6016:	1a82      	subs	r2, r0, r2
    6018:	4610      	mov	r0, r2
    601a:	2100      	movs	r1, #0
						_radio.ext_advertiser.chan_offset = offset;
    601c:	f8c4 269c 	str.w	r2, [r4, #1692]	; 0x69c
				if(offset > 245700){
    6020:	4a57      	ldr	r2, [pc, #348]	; (6180 <adv_setup+0x210>)
    6022:	78ae      	ldrb	r6, [r5, #2]
    6024:	f895 8000 	ldrb.w	r8, [r5]
    6028:	2300      	movs	r3, #0
    602a:	428b      	cmp	r3, r1
    602c:	bf08      	it	eq
    602e:	4282      	cmpeq	r2, r0
    6030:	f080 808e 	bcs.w	6150 <adv_setup+0x1e0>
					ap->offs = offset/1200;
    6034:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
    6038:	2300      	movs	r3, #0
    603a:	f7fa f915 	bl	268 <__aeabi_uldivmod>
    603e:	f026 061f 	bic.w	r6, r6, #31
    6042:	7068      	strb	r0, [r5, #1]
    6044:	f3c0 2004 	ubfx	r0, r0, #8, #5
    6048:	4330      	orrs	r0, r6
    604a:	70a8      	strb	r0, [r5, #2]
					ap->offs_units = EXT_ADV_AUX_PTR_OFFS_UNITS_300;
    604c:	f048 0880 	orr.w	r8, r8, #128	; 0x80
				if(_radio.advertiser.ext_adv == 1){
    6050:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
					ap->offs_units = EXT_ADV_AUX_PTR_OFFS_UNITS_30;
    6054:	f885 8000 	strb.w	r8, [r5]
				if(_radio.advertiser.ext_adv == 1){
    6058:	07db      	lsls	r3, r3, #31
    605a:	d508      	bpl.n	606e <adv_setup+0xfe>
					_radio.ext_advertiser.aux_pckt_chan++;
    605c:	f894 36a0 	ldrb.w	r3, [r4, #1696]	; 0x6a0
    6060:	3301      	adds	r3, #1
    6062:	b2db      	uxtb	r3, r3
					if(_radio.ext_advertiser.aux_pckt_chan == 0x25){ //37 channel
    6064:	2b25      	cmp	r3, #37	; 0x25
						_radio.ext_advertiser.aux_pckt_chan = 0;
    6066:	bf08      	it	eq
    6068:	2300      	moveq	r3, #0
    606a:	f884 36a0 	strb.w	r3, [r4, #1696]	; 0x6a0
				ap->chan_idx = _radio.ext_advertiser.aux_pckt_chan;	
    606e:	782b      	ldrb	r3, [r5, #0]
    6070:	f894 26a0 	ldrb.w	r2, [r4, #1696]	; 0x6a0
    6074:	f362 0305 	bfi	r3, r2, #0, #6
    6078:	702b      	strb	r3, [r5, #0]
		_radio.advertiser.ext_adv = 0;
    607a:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    607e:	f36f 0300 	bfc	r3, #0, #1
    6082:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
		radio_pkt_tx_set(pdu);
    6086:	4648      	mov	r0, r9
    6088:	f004 ff68 	bl	af5c <radio_pkt_tx_set>
		if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
    608c:	5de3      	ldrb	r3, [r4, r7]
    608e:	f003 030f 	and.w	r3, r3, #15
    6092:	2b02      	cmp	r3, #2
    6094:	d06a      	beq.n	616c <adv_setup+0x1fc>
    6096:	2b07      	cmp	r3, #7
    6098:	d068      	beq.n	616c <adv_setup+0x1fc>
			_radio.state = STATE_TX;
    609a:	2302      	movs	r3, #2
			radio_tmr_tifs_set(RADIO_TIFS);
    609c:	2096      	movs	r0, #150	; 0x96
			_radio.state = STATE_TX;
    609e:	7523      	strb	r3, [r4, #20]
			radio_tmr_tifs_set(RADIO_TIFS);
    60a0:	f005 f866 	bl	b170 <radio_tmr_tifs_set>
			radio_switch_complete_and_rx(0);
    60a4:	2000      	movs	r0, #0
    60a6:	f004 ffd3 	bl	b050 <radio_switch_complete_and_rx>
		bitmap = _radio.advertiser.chan_map_current;
    60aa:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    60ae:	f3c3 0202 	ubfx	r2, r3, #0, #3
    60b2:	b2d3      	uxtb	r3, r2
    60b4:	4619      	mov	r1, r3
		while ((bitmap & 0x01) == 0) {
    60b6:	2000      	movs	r0, #0
    60b8:	07ce      	lsls	r6, r1, #31
    60ba:	f100 0501 	add.w	r5, r0, #1
    60be:	d55a      	bpl.n	6176 <adv_setup+0x206>
			(_radio.advertiser.chan_map_current - 1);
    60c0:	3b01      	subs	r3, #1
			_radio.advertiser.chan_map_current &=
    60c2:	4013      	ands	r3, r2
    60c4:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
		count++;
    60c8:	4d2e      	ldr	r5, [pc, #184]	; (6184 <adv_setup+0x214>)
			_radio.advertiser.chan_map_current &=
    60ca:	f363 0202 	bfi	r2, r3, #0, #3
    60ce:	4b2e      	ldr	r3, [pc, #184]	; (6188 <adv_setup+0x218>)
    60d0:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
		if(! _radio.advertiser.chan_map_current){	
    60d4:	f012 0f07 	tst.w	r2, #7
			chan_case ++;
    60d8:	bf08      	it	eq
    60da:	781a      	ldrbeq	r2, [r3, #0]
		count++;
    60dc:	7829      	ldrb	r1, [r5, #0]
			chan_case ++;
    60de:	bf0c      	ite	eq
    60e0:	3201      	addeq	r2, #1
*/			chan_case = 0 ;
    60e2:	2200      	movne	r2, #0
    60e4:	701a      	strb	r2, [r3, #0]
		_radio.ext_advertiser.event++;
    60e6:	f894 368a 	ldrb.w	r3, [r4, #1674]	; 0x68a
		if(_radio.ext_advertiser.event > _radio.ext_advertiser.max_skip){
    60ea:	f894 2688 	ldrb.w	r2, [r4, #1672]	; 0x688
		_radio.ext_advertiser.event++;
    60ee:	3301      	adds	r3, #1
    60f0:	b2db      	uxtb	r3, r3
		if(_radio.ext_advertiser.event > _radio.ext_advertiser.max_skip){
    60f2:	429a      	cmp	r2, r3
		count++;
    60f4:	f101 0101 	add.w	r1, r1, #1
		_radio.ext_advertiser.event++;
    60f8:	f884 368a 	strb.w	r3, [r4, #1674]	; 0x68a
		count++;
    60fc:	7029      	strb	r1, [r5, #0]
			_radio.ext_advertiser.event = 0;
    60fe:	bf38      	it	cc
    6100:	2300      	movcc	r3, #0
		chan_set(37 + chan);
    6102:	b2c0      	uxtb	r0, r0
			_radio.ext_advertiser.event = 0;
    6104:	bf38      	it	cc
    6106:	f884 368a 	strbcc.w	r3, [r4, #1674]	; 0x68a
		chan_set(37 + chan);
    610a:	3025      	adds	r0, #37	; 0x25
}
    610c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		chan_set(37 + chan);
    6110:	f7ff bdf0 	b.w	5cf4 <chan_set>
					}else if((_radio.advertiser.chan_map_current & 0x07) == 0x06){
    6114:	2b06      	cmp	r3, #6
    6116:	d104      	bne.n	6122 <adv_setup+0x1b2>
						offset = (_radio.ext_advertiser.chan_38 - _radio.ext_advertiser.slot );
    6118:	f8d4 0694 	ldr.w	r0, [r4, #1684]	; 0x694
						offset = (_radio.ext_advertiser.chan_39 - _radio.ext_advertiser.slot );
    611c:	1a80      	subs	r0, r0, r2
					offset = (_radio.ext_advertiser.chan_37 -  _radio.ext_advertiser.slot );
    611e:	2100      	movs	r1, #0
    6120:	e77e      	b.n	6020 <adv_setup+0xb0>
					}else if((_radio.advertiser.chan_map_current & 0x07) == 0x04){
    6122:	2b04      	cmp	r3, #4
    6124:	f47f af7c 	bne.w	6020 <adv_setup+0xb0>
						offset = (_radio.ext_advertiser.chan_39 - _radio.ext_advertiser.slot );
    6128:	f8d4 0698 	ldr.w	r0, [r4, #1688]	; 0x698
    612c:	e7f6      	b.n	611c <adv_setup+0x1ac>
					_radio.ext_advertiser.slot = ( _radio.ext_advertiser.prim_interval + _radio.ext_advertiser.ticker_offset ) * _radio.ext_advertiser.event;
    612e:	f894 668a 	ldrb.w	r6, [r4, #1674]	; 0x68a
    6132:	4373      	muls	r3, r6
    6134:	f8c4 368c 	str.w	r3, [r4, #1676]	; 0x68c
					if(_radio.ext_advertiser.event == 0){
    6138:	b926      	cbnz	r6, 6144 <adv_setup+0x1d4>
						start_dynamic_cal = k_cycle_get_32(); 
    613a:	f7fb ff03 	bl	1f44 <_timer_cycle_get_32>
    613e:	4b13      	ldr	r3, [pc, #76]	; (618c <adv_setup+0x21c>)
    6140:	e883 0041 	stmia.w	r3, {r0, r6}
					offset = (_radio.ext_advertiser.chan_37 -  _radio.ext_advertiser.slot );
    6144:	f8d4 0690 	ldr.w	r0, [r4, #1680]	; 0x690
    6148:	f8d4 368c 	ldr.w	r3, [r4, #1676]	; 0x68c
    614c:	1ac0      	subs	r0, r0, r3
    614e:	e7e6      	b.n	611e <adv_setup+0x1ae>
					ap->offs = offset /30;
    6150:	221e      	movs	r2, #30
    6152:	2300      	movs	r3, #0
    6154:	f7fa f888 	bl	268 <__aeabi_uldivmod>
    6158:	f026 061f 	bic.w	r6, r6, #31
    615c:	7068      	strb	r0, [r5, #1]
    615e:	f3c0 2004 	ubfx	r0, r0, #8, #5
    6162:	4306      	orrs	r6, r0
    6164:	70ae      	strb	r6, [r5, #2]
					ap->offs_units = EXT_ADV_AUX_PTR_OFFS_UNITS_30;
    6166:	f36f 18c7 	bfc	r8, #7, #1
    616a:	e771      	b.n	6050 <adv_setup+0xe0>
			_radio.state = STATE_CLOSE;
    616c:	2303      	movs	r3, #3
    616e:	7523      	strb	r3, [r4, #20]
			radio_switch_complete_and_disable();
    6170:	f004 ff84 	bl	b07c <radio_switch_complete_and_disable>
    6174:	e799      	b.n	60aa <adv_setup+0x13a>
			bitmap >>= 1;
    6176:	0849      	lsrs	r1, r1, #1
    6178:	4628      	mov	r0, r5
    617a:	e79d      	b.n	60b8 <adv_setup+0x148>
    617c:	200009f8 	.word	0x200009f8
    6180:	0003bfc4 	.word	0x0003bfc4
    6184:	2000118a 	.word	0x2000118a
    6188:	20001189 	.word	0x20001189
    618c:	20002c88 	.word	0x20002c88

00006190 <sched_after_mstr_free_slot_get>:
{
    6190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6194:	b08b      	sub	sp, #44	; 0x2c
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    6196:	2400      	movs	r4, #0
	ticker_id = ticker_id_prev = 0xff;
    6198:	25ff      	movs	r5, #255	; 0xff
				  _radio.connection_count)) {
    619a:	f8df 912c 	ldr.w	r9, [pc, #300]	; 62c8 <sched_after_mstr_free_slot_get+0x138>
	ticker_id = ticker_id_prev = 0xff;
    619e:	f88d 501f 	strb.w	r5, [sp, #31]
{
    61a2:	4680      	mov	r8, r0
    61a4:	4693      	mov	fp, r2
    61a6:	461f      	mov	r7, r3
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(RADIO_TICKER_JITTER_US << 3);
    61a8:	f101 0a04 	add.w	sl, r1, #4
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    61ac:	601c      	str	r4, [r3, #0]
    61ae:	9408      	str	r4, [sp, #32]
    61b0:	4626      	mov	r6, r4
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    61b2:	2302      	movs	r3, #2
    61b4:	9309      	str	r3, [sp, #36]	; 0x24
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    61b6:	ab09      	add	r3, sp, #36	; 0x24
    61b8:	9302      	str	r3, [sp, #8]
    61ba:	4b3f      	ldr	r3, [pc, #252]	; (62b8 <sched_after_mstr_free_slot_get+0x128>)
    61bc:	9301      	str	r3, [sp, #4]
    61be:	ab08      	add	r3, sp, #32
    61c0:	9300      	str	r3, [sp, #0]
    61c2:	f10d 021f 	add.w	r2, sp, #31
    61c6:	465b      	mov	r3, fp
    61c8:	4641      	mov	r1, r8
    61ca:	2000      	movs	r0, #0
    61cc:	f7fe fb48 	bl	4860 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    61d0:	2802      	cmp	r0, #2
    61d2:	d010      	beq.n	61f6 <sched_after_mstr_free_slot_get+0x66>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    61d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    61d6:	b193      	cbz	r3, 61fe <sched_after_mstr_free_slot_get+0x6e>
    61d8:	4a38      	ldr	r2, [pc, #224]	; (62bc <sched_after_mstr_free_slot_get+0x12c>)
    61da:	4939      	ldr	r1, [pc, #228]	; (62c0 <sched_after_mstr_free_slot_get+0x130>)
    61dc:	2003      	movs	r0, #3
    61de:	f7fc f807 	bl	21f0 <bt_log>
    61e2:	4040      	eors	r0, r0
    61e4:	f380 8811 	msr	BASEPRI, r0
    61e8:	f04f 0004 	mov.w	r0, #4
    61ec:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    61ee:	4641      	mov	r1, r8
    61f0:	2000      	movs	r0, #0
    61f2:	f7fe fbb3 	bl	495c <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    61f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    61f8:	2b02      	cmp	r3, #2
    61fa:	d0f8      	beq.n	61ee <sched_after_mstr_free_slot_get+0x5e>
    61fc:	e7ea      	b.n	61d4 <sched_after_mstr_free_slot_get+0x44>
		if (ticker_id == 0xff) {
    61fe:	f89d 201f 	ldrb.w	r2, [sp, #31]
    6202:	2aff      	cmp	r2, #255	; 0xff
    6204:	d04e      	beq.n	62a4 <sched_after_mstr_free_slot_get+0x114>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    6206:	2a06      	cmp	r2, #6
    6208:	d9d3      	bls.n	61b2 <sched_after_mstr_free_slot_get+0x22>
				  _radio.connection_count)) {
    620a:	f899 3718 	ldrb.w	r3, [r9, #1816]	; 0x718
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    620e:	3307      	adds	r3, #7
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    6210:	429a      	cmp	r2, r3
    6212:	dace      	bge.n	61b2 <sched_after_mstr_free_slot_get+0x22>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    6214:	3a07      	subs	r2, #7
    6216:	b292      	uxth	r2, r2
    6218:	f44f 7182 	mov.w	r1, #260	; 0x104
    621c:	f8d9 0710 	ldr.w	r0, [r9, #1808]	; 0x710
    6220:	f7fd fc06 	bl	3a30 <mem_get>
		if (conn && !conn->role) {
    6224:	2800      	cmp	r0, #0
    6226:	d0c4      	beq.n	61b2 <sched_after_mstr_free_slot_get+0x22>
    6228:	f990 301d 	ldrsb.w	r3, [r0, #29]
    622c:	2b00      	cmp	r3, #0
    622e:	dbc0      	blt.n	61b2 <sched_after_mstr_free_slot_get+0x22>
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    6230:	6803      	ldr	r3, [r0, #0]
			u32_t ticks_to_expire_normal = ticks_to_expire;
    6232:	9a08      	ldr	r2, [sp, #32]
    6234:	f8d0 e004 	ldr.w	lr, [r0, #4]
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    6238:	2b00      	cmp	r3, #0
    623a:	da12      	bge.n	6262 <sched_after_mstr_free_slot_get+0xd2>
    623c:	6881      	ldr	r1, [r0, #8]
				ticks_slot_abs_curr =
    623e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    6242:	4571      	cmp	r1, lr
    6244:	bf2c      	ite	cs
    6246:	1852      	addcs	r2, r2, r1
    6248:	4472      	addcc	r2, lr
				ticks_to_expire_normal -=
    624a:	1ad2      	subs	r2, r2, r3
			ticks_slot_abs_curr +=
    624c:	68c1      	ldr	r1, [r0, #12]
			if ((ticker_id_prev != 0xFF) &&
    624e:	2dff      	cmp	r5, #255	; 0xff
			ticks_slot_abs_curr +=
    6250:	f101 0104 	add.w	r1, r1, #4
    6254:	440b      	add	r3, r1
			if ((ticker_id_prev != 0xFF) &&
    6256:	d108      	bne.n	626a <sched_after_mstr_free_slot_get+0xda>
			ticker_id_prev = ticker_id;
    6258:	f89d 501f 	ldrb.w	r5, [sp, #31]
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    625c:	461c      	mov	r4, r3
			ticks_to_expire_prev = ticks_to_expire_normal;
    625e:	4616      	mov	r6, r2
    6260:	e7a7      	b.n	61b2 <sched_after_mstr_free_slot_get+0x22>
				u32_t ticks_prepare_to_start =
    6262:	4573      	cmp	r3, lr
    6264:	bf38      	it	cc
    6266:	4673      	movcc	r3, lr
    6268:	e7f0      	b.n	624c <sched_after_mstr_free_slot_get+0xbc>
			    (ticker_ticks_diff_get(ticks_to_expire_normal,
    626a:	4631      	mov	r1, r6
    626c:	4610      	mov	r0, r2
    626e:	9305      	str	r3, [sp, #20]
    6270:	9204      	str	r2, [sp, #16]
    6272:	f7fe fb8b 	bl	498c <ticker_ticks_diff_get>
			     (ticks_slot_abs_prev + ticks_slot_abs))) {
    6276:	eb04 010a 	add.w	r1, r4, sl
			if ((ticker_id_prev != 0xFF) &&
    627a:	4288      	cmp	r0, r1
    627c:	9a04      	ldr	r2, [sp, #16]
    627e:	9b05      	ldr	r3, [sp, #20]
    6280:	d9ea      	bls.n	6258 <sched_after_mstr_free_slot_get+0xc8>
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    6282:	4810      	ldr	r0, [pc, #64]	; (62c4 <sched_after_mstr_free_slot_get+0x134>)
    6284:	4434      	add	r4, r6
    6286:	fba4 0100 	umull	r0, r1, r4, r0
    628a:	2307      	movs	r3, #7
    628c:	fb03 1104 	mla	r1, r3, r4, r1
    6290:	a307      	add	r3, pc, #28	; (adr r3, 62b0 <sched_after_mstr_free_slot_get+0x120>)
    6292:	e9d3 2300 	ldrd	r2, r3, [r3]
    6296:	f7f9 ffe7 	bl	268 <__aeabi_uldivmod>
						    ticks_slot_abs_prev) +
    629a:	3080      	adds	r0, #128	; 0x80
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    629c:	6038      	str	r0, [r7, #0]
}
    629e:	b00b      	add	sp, #44	; 0x2c
    62a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (ticker_id_prev != 0xff) {
    62a4:	2dff      	cmp	r5, #255	; 0xff
    62a6:	d1ec      	bne.n	6282 <sched_after_mstr_free_slot_get+0xf2>
    62a8:	e7f9      	b.n	629e <sched_after_mstr_free_slot_get+0x10e>
    62aa:	bf00      	nop
    62ac:	f3af 8000 	nop.w
    62b0:	3b9aca00 	.word	0x3b9aca00
    62b4:	00000000 	.word	0x00000000
    62b8:	000058f1 	.word	0x000058f1
    62bc:	0000e347 	.word	0x0000e347
    62c0:	0000ebd3 	.word	0x0000ebd3
    62c4:	1afd498d 	.word	0x1afd498d
    62c8:	200009f8 	.word	0x200009f8

000062cc <isr_adv_ci_adva_check>:
{
    62cc:	b570      	push	{r4, r5, r6, lr}
	return (adv->tx_addr == ci->rx_addr) &&
    62ce:	7804      	ldrb	r4, [r0, #0]
    62d0:	780a      	ldrb	r2, [r1, #0]
    62d2:	f3c4 1380 	ubfx	r3, r4, #6, #1
    62d6:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    62da:	d119      	bne.n	6310 <isr_adv_ci_adva_check+0x44>
    62dc:	f004 040f 	and.w	r4, r4, #15
    62e0:	2c01      	cmp	r4, #1
    62e2:	f101 0608 	add.w	r6, r1, #8
    62e6:	f100 0502 	add.w	r5, r0, #2
    62ea:	d008      	beq.n	62fe <isr_adv_ci_adva_check+0x32>
		 (!memcmp(adv->adv_ind.addr, ci->connect_ind.adv_addr,
    62ec:	2206      	movs	r2, #6
    62ee:	4631      	mov	r1, r6
    62f0:	4628      	mov	r0, r5
    62f2:	f7fa f97d 	bl	5f0 <memcmp>
			 BDADDR_SIZE)) ||
    62f6:	fab0 f080 	clz	r0, r0
    62fa:	0940      	lsrs	r0, r0, #5
    62fc:	bd70      	pop	{r4, r5, r6, pc}
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
    62fe:	2206      	movs	r2, #6
    6300:	4631      	mov	r1, r6
    6302:	4628      	mov	r0, r5
    6304:	f7fa f974 	bl	5f0 <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
    6308:	2800      	cmp	r0, #0
    630a:	d1ef      	bne.n	62ec <isr_adv_ci_adva_check+0x20>
	return (adv->tx_addr == ci->rx_addr) &&
    630c:	4620      	mov	r0, r4
    630e:	bd70      	pop	{r4, r5, r6, pc}
    6310:	2000      	movs	r0, #0
}
    6312:	bd70      	pop	{r4, r5, r6, pc}

00006314 <rx_fc_lock>:
	packet_rx_allocate(0xff);
}

static void rx_fc_lock(u16_t handle)
{
	if (_radio.fc_req == _radio.fc_ack) {
    6314:	4a0b      	ldr	r2, [pc, #44]	; (6344 <rx_fc_lock+0x30>)
    6316:	f892 3780 	ldrb.w	r3, [r2, #1920]	; 0x780
    631a:	f892 1781 	ldrb.w	r1, [r2, #1921]	; 0x781
    631e:	4299      	cmp	r1, r3
    6320:	d10e      	bne.n	6340 <rx_fc_lock+0x2c>
		u8_t req;

		_radio.fc_handle[_radio.fc_req] = handle;
    6322:	f892 3780 	ldrb.w	r3, [r2, #1920]	; 0x780
    6326:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    632a:	f8a3 077a 	strh.w	r0, [r3, #1914]	; 0x77a
		req = _radio.fc_req + 1;
    632e:	f892 3780 	ldrb.w	r3, [r2, #1920]	; 0x780
    6332:	3301      	adds	r3, #1
    6334:	b2db      	uxtb	r3, r3
		if (req == TRIPLE_BUFFER_SIZE) {
			req = 0;
    6336:	2b03      	cmp	r3, #3
    6338:	bf08      	it	eq
    633a:	2300      	moveq	r3, #0
		}
		_radio.fc_req = req;
    633c:	f882 3780 	strb.w	r3, [r2, #1920]	; 0x780
    6340:	4770      	bx	lr
    6342:	bf00      	nop
    6344:	200009f8 	.word	0x200009f8

00006348 <ticker_success_assert>:
{
    6348:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    634a:	b150      	cbz	r0, 6362 <ticker_success_assert+0x1a>
    634c:	4a05      	ldr	r2, [pc, #20]	; (6364 <ticker_success_assert+0x1c>)
    634e:	4906      	ldr	r1, [pc, #24]	; (6368 <ticker_success_assert+0x20>)
    6350:	2003      	movs	r0, #3
    6352:	f7fb ff4d 	bl	21f0 <bt_log>
    6356:	4040      	eors	r0, r0
    6358:	f380 8811 	msr	BASEPRI, r0
    635c:	f04f 0004 	mov.w	r0, #4
    6360:	df02      	svc	2
    6362:	bd08      	pop	{r3, pc}
    6364:	0000e270 	.word	0x0000e270
    6368:	0000ecb7 	.word	0x0000ecb7

0000636c <ticker_stop_adv_assert>:
	if (status == TICKER_STATUS_FAILURE) {
    636c:	2801      	cmp	r0, #1
{
    636e:	b508      	push	{r3, lr}
    6370:	4b0c      	ldr	r3, [pc, #48]	; (63a4 <ticker_stop_adv_assert+0x38>)
	if (status == TICKER_STATUS_FAILURE) {
    6372:	d110      	bne.n	6396 <ticker_stop_adv_assert+0x2a>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_ADV) {
    6374:	7c9a      	ldrb	r2, [r3, #18]
    6376:	2a05      	cmp	r2, #5
    6378:	d102      	bne.n	6380 <ticker_stop_adv_assert+0x14>
			_radio.ticker_id_stop = 0;
    637a:	2200      	movs	r2, #0
    637c:	749a      	strb	r2, [r3, #18]
    637e:	bd08      	pop	{r3, pc}
			LL_ASSERT(0);
    6380:	4a09      	ldr	r2, [pc, #36]	; (63a8 <ticker_stop_adv_assert+0x3c>)
    6382:	490a      	ldr	r1, [pc, #40]	; (63ac <ticker_stop_adv_assert+0x40>)
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_ADV);
    6384:	2003      	movs	r0, #3
    6386:	f7fb ff33 	bl	21f0 <bt_log>
    638a:	4040      	eors	r0, r0
    638c:	f380 8811 	msr	BASEPRI, r0
    6390:	f04f 0004 	mov.w	r0, #4
    6394:	df02      	svc	2
    6396:	7c1b      	ldrb	r3, [r3, #16]
    6398:	2b05      	cmp	r3, #5
    639a:	d102      	bne.n	63a2 <ticker_stop_adv_assert+0x36>
    639c:	4a02      	ldr	r2, [pc, #8]	; (63a8 <ticker_stop_adv_assert+0x3c>)
    639e:	4904      	ldr	r1, [pc, #16]	; (63b0 <ticker_stop_adv_assert+0x44>)
    63a0:	e7f0      	b.n	6384 <ticker_stop_adv_assert+0x18>
    63a2:	bd08      	pop	{r3, pc}
    63a4:	200009f8 	.word	0x200009f8
    63a8:	0000e286 	.word	0x0000e286
    63ac:	0000d773 	.word	0x0000d773
    63b0:	0000ec21 	.word	0x0000ec21

000063b4 <ticker_stop_scan_assert>:
	if (status == TICKER_STATUS_FAILURE) {
    63b4:	2801      	cmp	r0, #1
{
    63b6:	b508      	push	{r3, lr}
    63b8:	4b0c      	ldr	r3, [pc, #48]	; (63ec <ticker_stop_scan_assert+0x38>)
	if (status == TICKER_STATUS_FAILURE) {
    63ba:	d110      	bne.n	63de <ticker_stop_scan_assert+0x2a>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_SCAN) {
    63bc:	7c9a      	ldrb	r2, [r3, #18]
    63be:	2a06      	cmp	r2, #6
    63c0:	d102      	bne.n	63c8 <ticker_stop_scan_assert+0x14>
			_radio.ticker_id_stop = 0;
    63c2:	2200      	movs	r2, #0
    63c4:	749a      	strb	r2, [r3, #18]
    63c6:	bd08      	pop	{r3, pc}
			LL_ASSERT(0);
    63c8:	4a09      	ldr	r2, [pc, #36]	; (63f0 <ticker_stop_scan_assert+0x3c>)
    63ca:	490a      	ldr	r1, [pc, #40]	; (63f4 <ticker_stop_scan_assert+0x40>)
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_SCAN);
    63cc:	2003      	movs	r0, #3
    63ce:	f7fb ff0f 	bl	21f0 <bt_log>
    63d2:	4040      	eors	r0, r0
    63d4:	f380 8811 	msr	BASEPRI, r0
    63d8:	f04f 0004 	mov.w	r0, #4
    63dc:	df02      	svc	2
    63de:	7c1b      	ldrb	r3, [r3, #16]
    63e0:	2b06      	cmp	r3, #6
    63e2:	d102      	bne.n	63ea <ticker_stop_scan_assert+0x36>
    63e4:	4a02      	ldr	r2, [pc, #8]	; (63f0 <ticker_stop_scan_assert+0x3c>)
    63e6:	4904      	ldr	r1, [pc, #16]	; (63f8 <ticker_stop_scan_assert+0x44>)
    63e8:	e7f0      	b.n	63cc <ticker_stop_scan_assert+0x18>
    63ea:	bd08      	pop	{r3, pc}
    63ec:	200009f8 	.word	0x200009f8
    63f0:	0000e29d 	.word	0x0000e29d
    63f4:	0000d773 	.word	0x0000d773
    63f8:	0000ec84 	.word	0x0000ec84

000063fc <ticker_update_slave_assert>:
{
    63fc:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    63fe:	b178      	cbz	r0, 6420 <ticker_update_slave_assert+0x24>
    6400:	4b08      	ldr	r3, [pc, #32]	; (6424 <ticker_update_slave_assert+0x28>)
    6402:	7c9b      	ldrb	r3, [r3, #18]
    6404:	b2c9      	uxtb	r1, r1
    6406:	4299      	cmp	r1, r3
    6408:	d00a      	beq.n	6420 <ticker_update_slave_assert+0x24>
    640a:	4a07      	ldr	r2, [pc, #28]	; (6428 <ticker_update_slave_assert+0x2c>)
    640c:	4907      	ldr	r1, [pc, #28]	; (642c <ticker_update_slave_assert+0x30>)
    640e:	2003      	movs	r0, #3
    6410:	f7fb feee 	bl	21f0 <bt_log>
    6414:	4040      	eors	r0, r0
    6416:	f380 8811 	msr	BASEPRI, r0
    641a:	f04f 0004 	mov.w	r0, #4
    641e:	df02      	svc	2
    6420:	bd08      	pop	{r3, pc}
    6422:	bf00      	nop
    6424:	200009f8 	.word	0x200009f8
    6428:	0000e2b5 	.word	0x0000e2b5
    642c:	0000ecd8 	.word	0x0000ecd8

00006430 <ticker_job_disable>:
	if (_radio.state != STATE_NONE) {
    6430:	4b04      	ldr	r3, [pc, #16]	; (6444 <ticker_job_disable+0x14>)
    6432:	7d1b      	ldrb	r3, [r3, #20]
    6434:	b123      	cbz	r3, 6440 <ticker_job_disable+0x10>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    6436:	2101      	movs	r1, #1
    6438:	2200      	movs	r2, #0
    643a:	4608      	mov	r0, r1
    643c:	f7fd bb5a 	b.w	3af4 <mayfly_enable>
    6440:	4770      	bx	lr
    6442:	bf00      	nop
    6444:	200009f8 	.word	0x200009f8

00006448 <hdr_conn_get>:
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    6448:	2806      	cmp	r0, #6
{
    644a:	b510      	push	{r4, lr}
    644c:	460c      	mov	r4, r1
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    644e:	d90a      	bls.n	6466 <hdr_conn_get+0x1e>
		*conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    6450:	4b09      	ldr	r3, [pc, #36]	; (6478 <hdr_conn_get+0x30>)
    6452:	1fc2      	subs	r2, r0, #7
    6454:	b292      	uxth	r2, r2
    6456:	f44f 7182 	mov.w	r1, #260	; 0x104
    645a:	f8d3 0710 	ldr.w	r0, [r3, #1808]	; 0x710
    645e:	f7fd fae7 	bl	3a30 <mem_get>
    6462:	6020      	str	r0, [r4, #0]
    6464:	bd10      	pop	{r4, pc}
	} else if (ticker_id == RADIO_TICKER_ID_ADV) {
    6466:	2805      	cmp	r0, #5
    6468:	d004      	beq.n	6474 <hdr_conn_get+0x2c>
	} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
    646a:	2806      	cmp	r0, #6
	return NULL;
    646c:	4803      	ldr	r0, [pc, #12]	; (647c <hdr_conn_get+0x34>)
    646e:	bf18      	it	ne
    6470:	2000      	movne	r0, #0
    6472:	bd10      	pop	{r4, pc}
		return &_radio.advertiser.hdr;
    6474:	4802      	ldr	r0, [pc, #8]	; (6480 <hdr_conn_get+0x38>)
}
    6476:	bd10      	pop	{r4, pc}
    6478:	200009f8 	.word	0x200009f8
    647c:	20001034 	.word	0x20001034
    6480:	20000a10 	.word	0x20000a10

00006484 <event_stop.part.12>:
static void event_stop(u32_t ticks_at_expire, u32_t remainder,
    6484:	b508      	push	{r3, lr}
	LL_ASSERT(!retval);
    6486:	4a05      	ldr	r2, [pc, #20]	; (649c <event_stop.part.12+0x18>)
    6488:	4905      	ldr	r1, [pc, #20]	; (64a0 <event_stop.part.12+0x1c>)
    648a:	2003      	movs	r0, #3
    648c:	f7fb feb0 	bl	21f0 <bt_log>
    6490:	4040      	eors	r0, r0
    6492:	f380 8811 	msr	BASEPRI, r0
    6496:	f04f 0004 	mov.w	r0, #4
    649a:	df02      	svc	2
    649c:	0000e399 	.word	0x0000e399
    64a0:	0000e690 	.word	0x0000e690

000064a4 <mayfly_xtal_retain.part.15>:
static void mayfly_xtal_retain(u8_t caller_id, u8_t retain)
    64a4:	b508      	push	{r3, lr}
		if (s_xtal_retained) {
    64a6:	4b0f      	ldr	r3, [pc, #60]	; (64e4 <mayfly_xtal_retain.part.15+0x40>)
    64a8:	781a      	ldrb	r2, [r3, #0]
    64aa:	b1d2      	cbz	r2, 64e2 <mayfly_xtal_retain.part.15+0x3e>
			s_xtal_retained = 0;
    64ac:	2200      	movs	r2, #0
    64ae:	701a      	strb	r2, [r3, #0]
			switch (caller_id) {
    64b0:	b1a8      	cbz	r0, 64de <mayfly_xtal_retain.part.15+0x3a>
    64b2:	2801      	cmp	r0, #1
    64b4:	d108      	bne.n	64c8 <mayfly_xtal_retain.part.15+0x24>
				p_mfy_xtal_stop = &s_mfy_xtal_stop[1];
    64b6:	4b0c      	ldr	r3, [pc, #48]	; (64e8 <mayfly_xtal_retain.part.15+0x44>)
			retval = mayfly_enqueue(caller_id,
    64b8:	2200      	movs	r2, #0
    64ba:	4611      	mov	r1, r2
    64bc:	f7fd fb42 	bl	3b44 <mayfly_enqueue>
			LL_ASSERT(!retval);
    64c0:	b178      	cbz	r0, 64e2 <mayfly_xtal_retain.part.15+0x3e>
    64c2:	4a0a      	ldr	r2, [pc, #40]	; (64ec <mayfly_xtal_retain.part.15+0x48>)
    64c4:	490a      	ldr	r1, [pc, #40]	; (64f0 <mayfly_xtal_retain.part.15+0x4c>)
    64c6:	e001      	b.n	64cc <mayfly_xtal_retain.part.15+0x28>
				LL_ASSERT(0);
    64c8:	4a08      	ldr	r2, [pc, #32]	; (64ec <mayfly_xtal_retain.part.15+0x48>)
    64ca:	490a      	ldr	r1, [pc, #40]	; (64f4 <mayfly_xtal_retain.part.15+0x50>)
			LL_ASSERT(!retval);
    64cc:	2003      	movs	r0, #3
    64ce:	f7fb fe8f 	bl	21f0 <bt_log>
    64d2:	4040      	eors	r0, r0
    64d4:	f380 8811 	msr	BASEPRI, r0
    64d8:	f04f 0004 	mov.w	r0, #4
    64dc:	df02      	svc	2
				p_mfy_xtal_stop = &s_mfy_xtal_stop[0];
    64de:	4b06      	ldr	r3, [pc, #24]	; (64f8 <mayfly_xtal_retain.part.15+0x54>)
    64e0:	e7ea      	b.n	64b8 <mayfly_xtal_retain.part.15+0x14>
    64e2:	bd08      	pop	{r3, pc}
    64e4:	20001224 	.word	0x20001224
    64e8:	20004ff0 	.word	0x20004ff0
    64ec:	0000e30b 	.word	0x0000e30b
    64f0:	0000e690 	.word	0x0000e690
    64f4:	0000d773 	.word	0x0000d773
    64f8:	20004fe0 	.word	0x20004fe0

000064fc <event_active>:
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    64fc:	2200      	movs	r2, #0
{
    64fe:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    6500:	4611      	mov	r1, r2
    6502:	4b08      	ldr	r3, [pc, #32]	; (6524 <event_active+0x28>)
    6504:	4610      	mov	r0, r2
    6506:	f7fd fb1d 	bl	3b44 <mayfly_enqueue>
	LL_ASSERT(!retval);
    650a:	b150      	cbz	r0, 6522 <event_active+0x26>
    650c:	4a06      	ldr	r2, [pc, #24]	; (6528 <event_active+0x2c>)
    650e:	4907      	ldr	r1, [pc, #28]	; (652c <event_active+0x30>)
    6510:	2003      	movs	r0, #3
    6512:	f7fb fe6d 	bl	21f0 <bt_log>
    6516:	4040      	eors	r0, r0
    6518:	f380 8811 	msr	BASEPRI, r0
    651c:	f04f 0004 	mov.w	r0, #4
    6520:	df02      	svc	2
    6522:	bd08      	pop	{r3, pc}
    6524:	20004f40 	.word	0x20004f40
    6528:	0000e2e4 	.word	0x0000e2e4
    652c:	0000e690 	.word	0x0000e690

00006530 <event_xtal>:
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    6530:	2200      	movs	r2, #0
{
    6532:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    6534:	4611      	mov	r1, r2
    6536:	4b08      	ldr	r3, [pc, #32]	; (6558 <event_xtal+0x28>)
    6538:	4610      	mov	r0, r2
    653a:	f7fd fb03 	bl	3b44 <mayfly_enqueue>
	LL_ASSERT(!retval);
    653e:	b150      	cbz	r0, 6556 <event_xtal+0x26>
    6540:	4a06      	ldr	r2, [pc, #24]	; (655c <event_xtal+0x2c>)
    6542:	4907      	ldr	r1, [pc, #28]	; (6560 <event_xtal+0x30>)
    6544:	2003      	movs	r0, #3
    6546:	f7fb fe53 	bl	21f0 <bt_log>
    654a:	4040      	eors	r0, r0
    654c:	f380 8811 	msr	BASEPRI, r0
    6550:	f04f 0004 	mov.w	r0, #4
    6554:	df02      	svc	2
    6556:	bd08      	pop	{r3, pc}
    6558:	20004fc0 	.word	0x20004fc0
    655c:	0000e300 	.word	0x0000e300
    6560:	0000e690 	.word	0x0000e690

00006564 <mayfly_radio_active>:
{
    6564:	b508      	push	{r3, lr}
    6566:	4a0e      	ldr	r2, [pc, #56]	; (65a0 <mayfly_radio_active+0x3c>)
		if (s_active++) {
    6568:	7813      	ldrb	r3, [r2, #0]
	if ((u32_t)params) {
    656a:	b138      	cbz	r0, 657c <mayfly_radio_active+0x18>
		if (s_active++) {
    656c:	1c59      	adds	r1, r3, #1
    656e:	7011      	strb	r1, [r2, #0]
    6570:	b9ab      	cbnz	r3, 659e <mayfly_radio_active+0x3a>
		radio_active_callback(1);
    6572:	2001      	movs	r0, #1
}
    6574:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		radio_active_callback(0);
    6578:	f003 beec 	b.w	a354 <radio_active_callback>
		LL_ASSERT(s_active);
    657c:	b953      	cbnz	r3, 6594 <mayfly_radio_active+0x30>
    657e:	4a09      	ldr	r2, [pc, #36]	; (65a4 <mayfly_radio_active+0x40>)
    6580:	4909      	ldr	r1, [pc, #36]	; (65a8 <mayfly_radio_active+0x44>)
    6582:	2003      	movs	r0, #3
    6584:	f7fb fe34 	bl	21f0 <bt_log>
    6588:	4040      	eors	r0, r0
    658a:	f380 8811 	msr	BASEPRI, r0
    658e:	f04f 0004 	mov.w	r0, #4
    6592:	df02      	svc	2
		if (--s_active) {
    6594:	3b01      	subs	r3, #1
    6596:	b2db      	uxtb	r3, r3
    6598:	7013      	strb	r3, [r2, #0]
    659a:	2b00      	cmp	r3, #0
    659c:	d0ea      	beq.n	6574 <mayfly_radio_active+0x10>
    659e:	bd08      	pop	{r3, pc}
    65a0:	200011d1 	.word	0x200011d1
    65a4:	0000e2d0 	.word	0x0000e2d0
    65a8:	0000e8c9 	.word	0x0000e8c9

000065ac <mayfly_radio_inactive>:
	mayfly_radio_active(0);
    65ac:	2000      	movs	r0, #0
    65ae:	f7ff bfd9 	b.w	6564 <mayfly_radio_active>
	...

000065b4 <mayfly_radio_stop>:
	enum state state = (enum state)((u32_t)params & 0xff);
    65b4:	b2c0      	uxtb	r0, r0
{
    65b6:	b508      	push	{r3, lr}
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
    65b8:	1f03      	subs	r3, r0, #4
    65ba:	2b01      	cmp	r3, #1
    65bc:	d90a      	bls.n	65d4 <mayfly_radio_stop+0x20>
    65be:	4a0d      	ldr	r2, [pc, #52]	; (65f4 <mayfly_radio_stop+0x40>)
    65c0:	490d      	ldr	r1, [pc, #52]	; (65f8 <mayfly_radio_stop+0x44>)
    65c2:	2003      	movs	r0, #3
    65c4:	f7fb fe14 	bl	21f0 <bt_log>
    65c8:	4040      	eors	r0, r0
    65ca:	f380 8811 	msr	BASEPRI, r0
    65ce:	f04f 0004 	mov.w	r0, #4
    65d2:	df02      	svc	2
	radio_used = ((_radio.state != STATE_NONE) &&
    65d4:	4a09      	ldr	r2, [pc, #36]	; (65fc <mayfly_radio_stop+0x48>)
    65d6:	7d13      	ldrb	r3, [r2, #20]
		      (_radio.state != STATE_STOP) &&
    65d8:	b13b      	cbz	r3, 65ea <mayfly_radio_stop+0x36>
	radio_used = ((_radio.state != STATE_NONE) &&
    65da:	3b04      	subs	r3, #4
    65dc:	2b01      	cmp	r3, #1
    65de:	d904      	bls.n	65ea <mayfly_radio_stop+0x36>
			_radio.state = state;
    65e0:	7510      	strb	r0, [r2, #20]
}
    65e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		radio_disable();
    65e6:	f004 bcd9 	b.w	af9c <radio_disable>
	if (radio_used || !radio_is_idle()) {
    65ea:	f004 fd09 	bl	b000 <radio_is_idle>
    65ee:	2800      	cmp	r0, #0
    65f0:	d0f7      	beq.n	65e2 <mayfly_radio_stop+0x2e>
}
    65f2:	bd08      	pop	{r3, pc}
    65f4:	0000e387 	.word	0x0000e387
    65f8:	0000e8e7 	.word	0x0000e8e7
    65fc:	200009f8 	.word	0x200009f8

00006600 <rx_packet_set>:
{
    6600:	b538      	push	{r3, r4, r5, lr}
    6602:	4605      	mov	r5, r0
    6604:	460c      	mov	r4, r1
	radio_phy_set(phy, 0);
    6606:	2100      	movs	r1, #0
    6608:	4608      	mov	r0, r1
    660a:	f004 fc2d 	bl	ae68 <radio_phy_set>
	if (conn->enc_rx) {
    660e:	f895 30a8 	ldrb.w	r3, [r5, #168]	; 0xa8
    6612:	06db      	lsls	r3, r3, #27
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
    6614:	f04f 0201 	mov.w	r2, #1
	if (conn->enc_rx) {
    6618:	d50d      	bpl.n	6636 <rx_packet_set+0x36>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
    661a:	211f      	movs	r1, #31
    661c:	2008      	movs	r0, #8
    661e:	f004 fc69 	bl	aef4 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&conn->ccm_rx, phy,
    6622:	4622      	mov	r2, r4
    6624:	2100      	movs	r1, #0
    6626:	f105 00a9 	add.w	r0, r5, #169	; 0xa9
    662a:	f004 fe9b 	bl	b364 <radio_ccm_rx_pkt_set>
}
    662e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		radio_pkt_rx_set(pdu_data_rx);
    6632:	f004 bc8d 	b.w	af50 <radio_pkt_rx_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
    6636:	2008      	movs	r0, #8
    6638:	211b      	movs	r1, #27
    663a:	f004 fc5b 	bl	aef4 <radio_pkt_configure>
		radio_pkt_rx_set(pdu_data_rx);
    663e:	4620      	mov	r0, r4
    6640:	e7f5      	b.n	662e <rx_packet_set+0x2e>
	...

00006644 <pdu_node_tx_release>:
{
    6644:	b538      	push	{r3, r4, r5, lr}
	last = _radio.packet_release_last + 1;
    6646:	4a15      	ldr	r2, [pc, #84]	; (669c <pdu_node_tx_release+0x58>)
    6648:	f892 3778 	ldrb.w	r3, [r2, #1912]	; 0x778
	if (last == _radio.packet_tx_count) {
    664c:	f892 4774 	ldrb.w	r4, [r2, #1908]	; 0x774
	last = _radio.packet_release_last + 1;
    6650:	3301      	adds	r3, #1
    6652:	b2db      	uxtb	r3, r3
		last = 0;
    6654:	429c      	cmp	r4, r3
    6656:	bf08      	it	eq
    6658:	2300      	moveq	r3, #0
	LL_ASSERT(last != _radio.packet_release_first);
    665a:	f892 4777 	ldrb.w	r4, [r2, #1911]	; 0x777
    665e:	429c      	cmp	r4, r3
    6660:	d10a      	bne.n	6678 <pdu_node_tx_release+0x34>
    6662:	4a0f      	ldr	r2, [pc, #60]	; (66a0 <pdu_node_tx_release+0x5c>)
    6664:	490f      	ldr	r1, [pc, #60]	; (66a4 <pdu_node_tx_release+0x60>)
    6666:	2003      	movs	r0, #3
    6668:	f7fb fdc2 	bl	21f0 <bt_log>
    666c:	4040      	eors	r0, r0
    666e:	f380 8811 	msr	BASEPRI, r0
    6672:	f04f 0004 	mov.w	r0, #4
    6676:	df02      	svc	2
	_radio.pkt_release[_radio.packet_release_last].handle = handle;
    6678:	f892 5778 	ldrb.w	r5, [r2, #1912]	; 0x778
    667c:	f8d2 4770 	ldr.w	r4, [r2, #1904]	; 0x770
    6680:	f824 0035 	strh.w	r0, [r4, r5, lsl #3]
	_radio.pkt_release[_radio.packet_release_last].node_tx = node_tx;
    6684:	f892 0778 	ldrb.w	r0, [r2, #1912]	; 0x778
    6688:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
    668c:	6061      	str	r1, [r4, #4]
	_radio.packet_release_last = last;
    668e:	f882 3778 	strb.w	r3, [r2, #1912]	; 0x778
}
    6692:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_event_callback();
    6696:	f003 be5f 	b.w	a358 <radio_event_callback>
    669a:	bf00      	nop
    669c:	200009f8 	.word	0x200009f8
    66a0:	0000e4d9 	.word	0x0000e4d9
    66a4:	0000e9c9 	.word	0x0000e9c9

000066a8 <packet_tx_enqueue>:
{
    66a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    66ac:	4c24      	ldr	r4, [pc, #144]	; (6740 <packet_tx_enqueue+0x98>)
{
    66ae:	4606      	mov	r6, r0
		node_tx_new->next = NULL;
    66b0:	2700      	movs	r7, #0
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    66b2:	b12e      	cbz	r6, 66c0 <packet_tx_enqueue+0x18>
    66b4:	f894 3775 	ldrb.w	r3, [r4, #1909]	; 0x775
    66b8:	f894 2776 	ldrb.w	r2, [r4, #1910]	; 0x776
    66bc:	429a      	cmp	r2, r3
    66be:	d101      	bne.n	66c4 <packet_tx_enqueue+0x1c>
    66c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    66c4:	f894 8775 	ldrb.w	r8, [r4, #1909]	; 0x775
    66c8:	f8d4 976c 	ldr.w	r9, [r4, #1900]	; 0x76c
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    66cc:	f8d4 0710 	ldr.w	r0, [r4, #1808]	; 0x710
    66d0:	f839 2038 	ldrh.w	r2, [r9, r8, lsl #3]
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    66d4:	eb09 03c8 	add.w	r3, r9, r8, lsl #3
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    66d8:	f44f 7182 	mov.w	r1, #260	; 0x104
		node_tx_new = pdu_data_q_tx->node_tx;
    66dc:	685d      	ldr	r5, [r3, #4]
		node_tx_new->next = NULL;
    66de:	602f      	str	r7, [r5, #0]
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    66e0:	f7fd f9a6 	bl	3a30 <mem_get>
    66e4:	4603      	mov	r3, r0
		if (conn->handle == pdu_data_q_tx->handle) {
    66e6:	f839 0038 	ldrh.w	r0, [r9, r8, lsl #3]
    66ea:	8c1a      	ldrh	r2, [r3, #32]
    66ec:	4282      	cmp	r2, r0
    66ee:	d11f      	bne.n	6730 <packet_tx_enqueue+0x88>
			if (conn->pkt_tx_data == 0) {
    66f0:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
    66f4:	b942      	cbnz	r2, 6708 <packet_tx_enqueue+0x60>
				if (conn->pkt_tx_head == 0) {
    66f6:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
				conn->pkt_tx_data = node_tx_new;
    66fa:	f8c3 50f8 	str.w	r5, [r3, #248]	; 0xf8
				if (conn->pkt_tx_head == 0) {
    66fe:	b91a      	cbnz	r2, 6708 <packet_tx_enqueue+0x60>
					conn->pkt_tx_head = node_tx_new;
    6700:	f8c3 50ec 	str.w	r5, [r3, #236]	; 0xec
					conn->pkt_tx_last = NULL;
    6704:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
			if (conn->pkt_tx_last) {
    6708:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
    670c:	b102      	cbz	r2, 6710 <packet_tx_enqueue+0x68>
				conn->pkt_tx_last->next = node_tx_new;
    670e:	6015      	str	r5, [r2, #0]
			conn->pkt_tx_last = node_tx_new;
    6710:	f8c3 50fc 	str.w	r5, [r3, #252]	; 0xfc
		first = _radio.packet_tx_first + 1;
    6714:	f894 3775 	ldrb.w	r3, [r4, #1909]	; 0x775
		if (first == _radio.packet_tx_count) {
    6718:	f894 2774 	ldrb.w	r2, [r4, #1908]	; 0x774
		first = _radio.packet_tx_first + 1;
    671c:	3301      	adds	r3, #1
    671e:	b2db      	uxtb	r3, r3
			first = 0;
    6720:	429a      	cmp	r2, r3
    6722:	bf08      	it	eq
    6724:	2300      	moveq	r3, #0
    6726:	3e01      	subs	r6, #1
		_radio.packet_tx_first = first;
    6728:	f884 3775 	strb.w	r3, [r4, #1909]	; 0x775
    672c:	b2f6      	uxtb	r6, r6
    672e:	e7c0      	b.n	66b2 <packet_tx_enqueue+0xa>
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    6730:	792b      	ldrb	r3, [r5, #4]
    6732:	f367 0301 	bfi	r3, r7, #0, #2
    6736:	712b      	strb	r3, [r5, #4]
			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
    6738:	4629      	mov	r1, r5
    673a:	f7ff ff83 	bl	6644 <pdu_node_tx_release>
    673e:	e7e9      	b.n	6714 <packet_tx_enqueue+0x6c>
    6740:	200009f8 	.word	0x200009f8

00006744 <connection_release>:
{
    6744:	b573      	push	{r0, r1, r4, r5, r6, lr}
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    6746:	2201      	movs	r2, #1
{
    6748:	4604      	mov	r4, r0
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    674a:	4611      	mov	r1, r2
    674c:	2000      	movs	r0, #0
    674e:	f7fd f9d1 	bl	3af4 <mayfly_enable>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    6752:	f894 2020 	ldrb.w	r2, [r4, #32]
	ticker_status =
    6756:	2100      	movs	r1, #0
    6758:	f242 731b 	movw	r3, #10011	; 0x271b
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    675c:	3207      	adds	r2, #7
	ticker_status =
    675e:	9300      	str	r3, [sp, #0]
    6760:	4608      	mov	r0, r1
    6762:	4b3c      	ldr	r3, [pc, #240]	; (6854 <connection_release+0x110>)
    6764:	b2d2      	uxtb	r2, r2
    6766:	f7fe f83f 	bl	47e8 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    676a:	f030 0102 	bics.w	r1, r0, #2
    676e:	d00a      	beq.n	6786 <connection_release+0x42>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    6770:	4a39      	ldr	r2, [pc, #228]	; (6858 <connection_release+0x114>)
    6772:	493a      	ldr	r1, [pc, #232]	; (685c <connection_release+0x118>)
    6774:	2003      	movs	r0, #3
    6776:	f7fb fd3b 	bl	21f0 <bt_log>
    677a:	4040      	eors	r0, r0
    677c:	f380 8811 	msr	BASEPRI, r0
    6780:	f04f 0004 	mov.w	r0, #4
    6784:	df02      	svc	2
	if ((_radio.state == STATE_ABORT) &&
    6786:	4b36      	ldr	r3, [pc, #216]	; (6860 <connection_release+0x11c>)
    6788:	7d1a      	ldrb	r2, [r3, #20]
    678a:	2a05      	cmp	r2, #5
    678c:	461d      	mov	r5, r3
    678e:	d11b      	bne.n	67c8 <connection_release+0x84>
					  conn->handle))) {
    6790:	8c22      	ldrh	r2, [r4, #32]
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
    6792:	7c18      	ldrb	r0, [r3, #16]
    6794:	3207      	adds	r2, #7
	if ((_radio.state == STATE_ABORT) &&
    6796:	4290      	cmp	r0, r2
    6798:	d116      	bne.n	67c8 <connection_release+0x84>
		_radio.ticker_id_prepare = 0;
    679a:	7419      	strb	r1, [r3, #16]
		ticker_status =
    679c:	f242 732c 	movw	r3, #10028	; 0x272c
    67a0:	9300      	str	r3, [sp, #0]
    67a2:	2201      	movs	r2, #1
    67a4:	4b2b      	ldr	r3, [pc, #172]	; (6854 <connection_release+0x110>)
    67a6:	4608      	mov	r0, r1
    67a8:	f7fe f81e 	bl	47e8 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    67ac:	f030 0202 	bics.w	r2, r0, #2
    67b0:	d1de      	bne.n	6770 <connection_release+0x2c>
		ticker_status =
    67b2:	f242 7333 	movw	r3, #10035	; 0x2733
    67b6:	9300      	str	r3, [sp, #0]
    67b8:	4611      	mov	r1, r2
    67ba:	4b26      	ldr	r3, [pc, #152]	; (6854 <connection_release+0x110>)
    67bc:	4610      	mov	r0, r2
    67be:	f7fe f813 	bl	47e8 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    67c2:	f030 0302 	bics.w	r3, r0, #2
    67c6:	d1d3      	bne.n	6770 <connection_release+0x2c>
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
    67c8:	f8d4 10ec 	ldr.w	r1, [r4, #236]	; 0xec
    67cc:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
    67d0:	4299      	cmp	r1, r3
    67d2:	d003      	beq.n	67dc <connection_release+0x98>
    67d4:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
    67d8:	4299      	cmp	r1, r3
    67da:	d101      	bne.n	67e0 <connection_release+0x9c>
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    67dc:	4e21      	ldr	r6, [pc, #132]	; (6864 <connection_release+0x120>)
    67de:	e012      	b.n	6806 <connection_release+0xc2>
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    67e0:	790b      	ldrb	r3, [r1, #4]
    67e2:	f36f 0301 	bfc	r3, #0, #2
    67e6:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    67e8:	680b      	ldr	r3, [r1, #0]
    67ea:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
		pdu_node_tx_release(conn->handle, node_tx);
    67ee:	8c20      	ldrh	r0, [r4, #32]
    67f0:	f7ff ff28 	bl	6644 <pdu_node_tx_release>
    67f4:	e7e8      	b.n	67c8 <connection_release+0x84>
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    67f6:	6803      	ldr	r3, [r0, #0]
    67f8:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
		conn->pkt_tx_ctrl = conn->pkt_tx_head;
    67fc:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    6800:	4631      	mov	r1, r6
    6802:	f7fd f900 	bl	3a06 <mem_release>
	while ((conn->pkt_tx_head) &&
    6806:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
    680a:	b118      	cbz	r0, 6814 <connection_release+0xd0>
    680c:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
    6810:	4298      	cmp	r0, r3
    6812:	d1f0      	bne.n	67f6 <connection_release+0xb2>
	conn->pkt_tx_ctrl = NULL;
    6814:	2300      	movs	r3, #0
    6816:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
	conn->pkt_tx_ctrl_last = NULL;
    681a:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
	while (conn->pkt_tx_head) {
    681e:	f8d4 10ec 	ldr.w	r1, [r4, #236]	; 0xec
    6822:	b951      	cbnz	r1, 683a <connection_release+0xf6>
	conn->handle = 0xffff;
    6824:	f64f 73ff 	movw	r3, #65535	; 0xffff
    6828:	8423      	strh	r3, [r4, #32]
	if (_radio.conn_upd == conn) {
    682a:	f8d5 3788 	ldr.w	r3, [r5, #1928]	; 0x788
    682e:	429c      	cmp	r4, r3
		_radio.conn_upd = NULL;
    6830:	bf08      	it	eq
    6832:	f8c5 1788 	streq.w	r1, [r5, #1928]	; 0x788
}
    6836:	b002      	add	sp, #8
    6838:	bd70      	pop	{r4, r5, r6, pc}
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    683a:	790b      	ldrb	r3, [r1, #4]
    683c:	f36f 0301 	bfc	r3, #0, #2
    6840:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    6842:	680b      	ldr	r3, [r1, #0]
    6844:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
		conn->pkt_tx_data = conn->pkt_tx_head;
    6848:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
		pdu_node_tx_release(conn->handle, node_tx);
    684c:	8c20      	ldrh	r0, [r4, #32]
    684e:	f7ff fef9 	bl	6644 <pdu_node_tx_release>
    6852:	e7e4      	b.n	681e <connection_release+0xda>
    6854:	00006349 	.word	0x00006349
    6858:	0000e4ed 	.word	0x0000e4ed
    685c:	0000e576 	.word	0x0000e576
    6860:	200009f8 	.word	0x200009f8
    6864:	20001154 	.word	0x20001154

00006868 <tx_packet_set>:
{
    6868:	b538      	push	{r3, r4, r5, lr}
    686a:	4605      	mov	r5, r0
    686c:	460c      	mov	r4, r1
	radio_phy_set(phy, flags);
    686e:	2100      	movs	r1, #0
    6870:	4608      	mov	r0, r1
    6872:	f004 faf9 	bl	ae68 <radio_phy_set>
	if (conn->enc_tx) {
    6876:	f895 30a8 	ldrb.w	r3, [r5, #168]	; 0xa8
    687a:	069b      	lsls	r3, r3, #26
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
    687c:	f04f 0201 	mov.w	r2, #1
	if (conn->enc_tx) {
    6880:	d50c      	bpl.n	689c <tx_packet_set+0x34>
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
    6882:	211f      	movs	r1, #31
    6884:	2008      	movs	r0, #8
    6886:	f004 fb35 	bl	aef4 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&conn->ccm_tx,
    688a:	4621      	mov	r1, r4
    688c:	f105 00ca 	add.w	r0, r5, #202	; 0xca
    6890:	f004 fda4 	bl	b3dc <radio_ccm_tx_pkt_set>
}
    6894:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		radio_pkt_tx_set(pdu_data_tx);
    6898:	f004 bb60 	b.w	af5c <radio_pkt_tx_set>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
    689c:	2008      	movs	r0, #8
    689e:	211b      	movs	r1, #27
    68a0:	f004 fb28 	bl	aef4 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
    68a4:	4620      	mov	r0, r4
    68a6:	e7f5      	b.n	6894 <tx_packet_set+0x2c>

000068a8 <sched_after_mstr_free_offset_get>:
{
    68a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    68aa:	4616      	mov	r6, r2
	u32_t ticks_anchor_offset = ticks_anchor;
    68ac:	aa02      	add	r2, sp, #8
{
    68ae:	461c      	mov	r4, r3
    68b0:	4605      	mov	r5, r0
	u32_t ticks_anchor_offset = ticks_anchor;
    68b2:	f842 6d04 	str.w	r6, [r2, #-4]!
	sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_JOB,
    68b6:	3127      	adds	r1, #39	; 0x27
    68b8:	2001      	movs	r0, #1
    68ba:	f7ff fc69 	bl	6190 <sched_after_mstr_free_slot_get>
	if (!*win_offset_us) {
    68be:	6823      	ldr	r3, [r4, #0]
    68c0:	b343      	cbz	r3, 6914 <sched_after_mstr_free_offset_get+0x6c>
	LL_ASSERT(!((ticks_anchor_offset - ticks_anchor) &
    68c2:	9801      	ldr	r0, [sp, #4]
    68c4:	1b83      	subs	r3, r0, r6
    68c6:	021b      	lsls	r3, r3, #8
    68c8:	d50a      	bpl.n	68e0 <sched_after_mstr_free_offset_get+0x38>
    68ca:	4a17      	ldr	r2, [pc, #92]	; (6928 <sched_after_mstr_free_offset_get+0x80>)
    68cc:	4917      	ldr	r1, [pc, #92]	; (692c <sched_after_mstr_free_offset_get+0x84>)
    68ce:	2003      	movs	r0, #3
    68d0:	f7fb fc8e 	bl	21f0 <bt_log>
    68d4:	4040      	eors	r0, r0
    68d6:	f380 8811 	msr	BASEPRI, r0
    68da:	f04f 0004 	mov.w	r0, #4
    68de:	df02      	svc	2
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
    68e0:	4631      	mov	r1, r6
    68e2:	f7fe f853 	bl	498c <ticker_ticks_diff_get>
    68e6:	4602      	mov	r2, r0
    68e8:	4811      	ldr	r0, [pc, #68]	; (6930 <sched_after_mstr_free_offset_get+0x88>)
    68ea:	2307      	movs	r3, #7
    68ec:	fba2 0100 	umull	r0, r1, r2, r0
    68f0:	fb03 1102 	mla	r1, r3, r2, r1
    68f4:	a30a      	add	r3, pc, #40	; (adr r3, 6920 <sched_after_mstr_free_offset_get+0x78>)
    68f6:	e9d3 2300 	ldrd	r2, r3, [r3]
    68fa:	f7f9 fcb5 	bl	268 <__aeabi_uldivmod>
    68fe:	6823      	ldr	r3, [r4, #0]
    6900:	4418      	add	r0, r3
	if ((*win_offset_us & BIT(31)) == 0) {
    6902:	2800      	cmp	r0, #0
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
    6904:	6020      	str	r0, [r4, #0]
	if ((*win_offset_us & BIT(31)) == 0) {
    6906:	db05      	blt.n	6914 <sched_after_mstr_free_offset_get+0x6c>
		u32_t conn_interval_us = conn_interval * 1250;
    6908:	f240 40e2 	movw	r0, #1250	; 0x4e2
    690c:	4368      	muls	r0, r5
		while (*win_offset_us > conn_interval_us) {
    690e:	6823      	ldr	r3, [r4, #0]
    6910:	4298      	cmp	r0, r3
    6912:	d301      	bcc.n	6918 <sched_after_mstr_free_offset_get+0x70>
}
    6914:	b002      	add	sp, #8
    6916:	bd70      	pop	{r4, r5, r6, pc}
			*win_offset_us -= conn_interval_us;
    6918:	1a1b      	subs	r3, r3, r0
    691a:	6023      	str	r3, [r4, #0]
    691c:	e7f7      	b.n	690e <sched_after_mstr_free_offset_get+0x66>
    691e:	bf00      	nop
    6920:	3b9aca00 	.word	0x3b9aca00
    6924:	00000000 	.word	0x00000000
    6928:	0000e366 	.word	0x0000e366
    692c:	0000eb86 	.word	0x0000eb86
    6930:	1afd498d 	.word	0x1afd498d

00006934 <mayfly_sched_win_offset_use>:
{
    6934:	b513      	push	{r0, r1, r4, lr}
	sched_after_mstr_free_offset_get(conn->conn_interval,
    6936:	f100 036c 	add.w	r3, r0, #108	; 0x6c
{
    693a:	4604      	mov	r4, r0
	sched_after_mstr_free_offset_get(conn->conn_interval,
    693c:	6f82      	ldr	r2, [r0, #120]	; 0x78
    693e:	68c1      	ldr	r1, [r0, #12]
    6940:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    6942:	f7ff ffb1 	bl	68a8 <sched_after_mstr_free_offset_get>
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    6946:	a902      	add	r1, sp, #8
    6948:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    694a:	6f60      	ldr	r0, [r4, #116]	; 0x74
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    694c:	f240 42e2 	movw	r2, #1250	; 0x4e2
    6950:	fbb3 f3f2 	udiv	r3, r3, r2
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    6954:	2202      	movs	r2, #2
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    6956:	f821 3d02 	strh.w	r3, [r1, #-2]!
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    695a:	f7f9 fe5e 	bl	61a <memcpy>
}
    695e:	b002      	add	sp, #8
    6960:	bd10      	pop	{r4, pc}
	...

00006964 <ticker_stop_adv_stop>:
{
    6964:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    6966:	4c45      	ldr	r4, [pc, #276]	; (6a7c <ticker_stop_adv_stop+0x118>)
	if (status != TICKER_STATUS_SUCCESS) {
    6968:	b170      	cbz	r0, 6988 <ticker_stop_adv_stop+0x24>
		LL_ASSERT(_radio.ticker_id_stop == RADIO_TICKER_ID_ADV);
    696a:	7ca3      	ldrb	r3, [r4, #18]
    696c:	2b05      	cmp	r3, #5
    696e:	f000 8083 	beq.w	6a78 <ticker_stop_adv_stop+0x114>
    6972:	4a43      	ldr	r2, [pc, #268]	; (6a80 <ticker_stop_adv_stop+0x11c>)
    6974:	4943      	ldr	r1, [pc, #268]	; (6a84 <ticker_stop_adv_stop+0x120>)
		LL_ASSERT(_radio.ticker_id_prepare);
    6976:	2003      	movs	r0, #3
    6978:	f7fb fc3a 	bl	21f0 <bt_log>
    697c:	4040      	eors	r0, r0
    697e:	f380 8811 	msr	BASEPRI, r0
    6982:	f04f 0004 	mov.w	r0, #4
    6986:	df02      	svc	2
	if ((_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV) ||
    6988:	7c23      	ldrb	r3, [r4, #16]
    698a:	2b05      	cmp	r3, #5
    698c:	d002      	beq.n	6994 <ticker_stop_adv_stop+0x30>
	    (_radio.ticker_id_event == RADIO_TICKER_ID_ADV)) {
    698e:	7c63      	ldrb	r3, [r4, #17]
	if ((_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV) ||
    6990:	2b05      	cmp	r3, #5
    6992:	d162      	bne.n	6a5a <ticker_stop_adv_stop+0xf6>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
    6994:	ab04      	add	r3, sp, #16
    6996:	2202      	movs	r2, #2
    6998:	f843 2d08 	str.w	r2, [r3, #-8]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    699c:	2200      	movs	r2, #0
    699e:	9300      	str	r3, [sp, #0]
    69a0:	2101      	movs	r1, #1
    69a2:	4b39      	ldr	r3, [pc, #228]	; (6a88 <ticker_stop_adv_stop+0x124>)
    69a4:	4610      	mov	r0, r2
    69a6:	f7fd ff1f 	bl	47e8 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    69aa:	2802      	cmp	r0, #2
    69ac:	d00d      	beq.n	69ca <ticker_stop_adv_stop+0x66>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
    69ae:	9802      	ldr	r0, [sp, #8]
    69b0:	b1c0      	cbz	r0, 69e4 <ticker_stop_adv_stop+0x80>
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
    69b2:	9802      	ldr	r0, [sp, #8]
    69b4:	2801      	cmp	r0, #1
    69b6:	d15c      	bne.n	6a72 <ticker_stop_adv_stop+0x10e>
		if (_radio.role != ROLE_NONE) {
    69b8:	7ce3      	ldrb	r3, [r4, #19]
    69ba:	2b00      	cmp	r3, #0
    69bc:	d04d      	beq.n	6a5a <ticker_stop_adv_stop+0xf6>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    69be:	4b33      	ldr	r3, [pc, #204]	; (6a8c <ticker_stop_adv_stop+0x128>)
    69c0:	2204      	movs	r2, #4
    69c2:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    69c4:	2200      	movs	r2, #0
    69c6:	4611      	mov	r1, r2
    69c8:	e043      	b.n	6a52 <ticker_stop_adv_stop+0xee>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    69ca:	2201      	movs	r2, #1
    69cc:	4611      	mov	r1, r2
    69ce:	4610      	mov	r0, r2
    69d0:	f7fd f890 	bl	3af4 <mayfly_enable>
		while (ret_cb_evt == TICKER_STATUS_BUSY) {
    69d4:	9b02      	ldr	r3, [sp, #8]
    69d6:	2b02      	cmp	r3, #2
    69d8:	d1e9      	bne.n	69ae <ticker_stop_adv_stop+0x4a>
			ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    69da:	2101      	movs	r1, #1
    69dc:	2000      	movs	r0, #0
    69de:	f7fd ffbd 	bl	495c <ticker_job_sched>
    69e2:	e7f7      	b.n	69d4 <ticker_stop_adv_stop+0x70>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
    69e4:	2302      	movs	r3, #2
    69e6:	9303      	str	r3, [sp, #12]
		LL_ASSERT(_radio.ticker_id_prepare);
    69e8:	7c23      	ldrb	r3, [r4, #16]
    69ea:	b913      	cbnz	r3, 69f2 <ticker_stop_adv_stop+0x8e>
    69ec:	4a28      	ldr	r2, [pc, #160]	; (6a90 <ticker_stop_adv_stop+0x12c>)
    69ee:	4929      	ldr	r1, [pc, #164]	; (6a94 <ticker_stop_adv_stop+0x130>)
    69f0:	e7c1      	b.n	6976 <ticker_stop_adv_stop+0x12>
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    69f2:	ab03      	add	r3, sp, #12
    69f4:	2201      	movs	r2, #1
		_radio.ticker_id_prepare = 0;
    69f6:	7420      	strb	r0, [r4, #16]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    69f8:	4611      	mov	r1, r2
    69fa:	9300      	str	r3, [sp, #0]
    69fc:	4b22      	ldr	r3, [pc, #136]	; (6a88 <ticker_stop_adv_stop+0x124>)
    69fe:	f7fd fef3 	bl	47e8 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    6a02:	2802      	cmp	r0, #2
    6a04:	d00f      	beq.n	6a26 <ticker_stop_adv_stop+0xc2>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
    6a06:	9a03      	ldr	r2, [sp, #12]
    6a08:	b1d2      	cbz	r2, 6a40 <ticker_stop_adv_stop+0xdc>
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
    6a0a:	9c03      	ldr	r4, [sp, #12]
    6a0c:	2c01      	cmp	r4, #1
    6a0e:	d130      	bne.n	6a72 <ticker_stop_adv_stop+0x10e>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    6a10:	2200      	movs	r2, #0
    6a12:	4611      	mov	r1, r2
    6a14:	4b20      	ldr	r3, [pc, #128]	; (6a98 <ticker_stop_adv_stop+0x134>)
    6a16:	4620      	mov	r0, r4
    6a18:	f7fd f894 	bl	3b44 <mayfly_enqueue>
			LL_ASSERT(!ret);
    6a1c:	4602      	mov	r2, r0
    6a1e:	b330      	cbz	r0, 6a6e <ticker_stop_adv_stop+0x10a>
			LL_ASSERT(!ret);
    6a20:	4a1b      	ldr	r2, [pc, #108]	; (6a90 <ticker_stop_adv_stop+0x12c>)
    6a22:	491e      	ldr	r1, [pc, #120]	; (6a9c <ticker_stop_adv_stop+0x138>)
    6a24:	e7a7      	b.n	6976 <ticker_stop_adv_stop+0x12>
			mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    6a26:	2201      	movs	r2, #1
    6a28:	4611      	mov	r1, r2
    6a2a:	4610      	mov	r0, r2
    6a2c:	f7fd f862 	bl	3af4 <mayfly_enable>
			while (ret_cb_m0 == TICKER_STATUS_BUSY) {
    6a30:	9b03      	ldr	r3, [sp, #12]
    6a32:	2b02      	cmp	r3, #2
    6a34:	d1e7      	bne.n	6a06 <ticker_stop_adv_stop+0xa2>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    6a36:	2101      	movs	r1, #1
    6a38:	2000      	movs	r0, #0
    6a3a:	f7fd ff8f 	bl	495c <ticker_job_sched>
    6a3e:	e7f7      	b.n	6a30 <ticker_stop_adv_stop+0xcc>
			u32_t ticks_xtal_to_start =
    6a40:	69a3      	ldr	r3, [r4, #24]
			if (_radio.advertiser.hdr.ticks_active_to_start >
    6a42:	69e1      	ldr	r1, [r4, #28]
			ticks_xtal_to_start &= ~XON_BITMASK;
    6a44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			if (_radio.advertiser.hdr.ticks_active_to_start >
    6a48:	428b      	cmp	r3, r1
    6a4a:	d210      	bcs.n	6a6e <ticker_stop_adv_stop+0x10a>
				ret = mayfly_enqueue(
    6a4c:	4b12      	ldr	r3, [pc, #72]	; (6a98 <ticker_stop_adv_stop+0x134>)
				ret = mayfly_enqueue(
    6a4e:	4611      	mov	r1, r2
    6a50:	2001      	movs	r0, #1
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    6a52:	f7fd f877 	bl	3b44 <mayfly_enqueue>
			LL_ASSERT(!ret);
    6a56:	2800      	cmp	r0, #0
    6a58:	d1e2      	bne.n	6a20 <ticker_stop_adv_stop+0xbc>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    6a5a:	2200      	movs	r2, #0
    6a5c:	4b10      	ldr	r3, [pc, #64]	; (6aa0 <ticker_stop_adv_stop+0x13c>)
    6a5e:	4611      	mov	r1, r2
    6a60:	2001      	movs	r0, #1
    6a62:	f7fd f86f 	bl	3b44 <mayfly_enqueue>
	LL_ASSERT(!retval);
    6a66:	b138      	cbz	r0, 6a78 <ticker_stop_adv_stop+0x114>
    6a68:	4a05      	ldr	r2, [pc, #20]	; (6a80 <ticker_stop_adv_stop+0x11c>)
    6a6a:	490e      	ldr	r1, [pc, #56]	; (6aa4 <ticker_stop_adv_stop+0x140>)
    6a6c:	e783      	b.n	6976 <ticker_stop_adv_stop+0x12>
				ret = mayfly_enqueue(
    6a6e:	4b0e      	ldr	r3, [pc, #56]	; (6aa8 <ticker_stop_adv_stop+0x144>)
    6a70:	e7ed      	b.n	6a4e <ticker_stop_adv_stop+0xea>
		LL_ASSERT(0);
    6a72:	4a07      	ldr	r2, [pc, #28]	; (6a90 <ticker_stop_adv_stop+0x12c>)
    6a74:	490d      	ldr	r1, [pc, #52]	; (6aac <ticker_stop_adv_stop+0x148>)
    6a76:	e77e      	b.n	6976 <ticker_stop_adv_stop+0x12>
}
    6a78:	b004      	add	sp, #16
    6a7a:	bd10      	pop	{r4, pc}
    6a7c:	200009f8 	.word	0x200009f8
    6a80:	0000e43a 	.word	0x0000e43a
    6a84:	0000ec54 	.word	0x0000ec54
    6a88:	000058f1 	.word	0x000058f1
    6a8c:	20004f90 	.word	0x20004f90
    6a90:	0000e41e 	.word	0x0000e41e
    6a94:	0000eab6 	.word	0x0000eab6
    6a98:	20004f60 	.word	0x20004f60
    6a9c:	0000eb08 	.word	0x0000eb08
    6aa0:	20004f30 	.word	0x20004f30
    6aa4:	0000e690 	.word	0x0000e690
    6aa8:	20005000 	.word	0x20005000
    6aac:	0000d773 	.word	0x0000d773

00006ab0 <isr_scan_tgta_check.isra.29>:
static inline bool isr_scan_tgta_check(bool init, struct pdu_adv *pdu,
    6ab0:	b570      	push	{r4, r5, r6, lr}
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    6ab2:	4c16      	ldr	r4, [pc, #88]	; (6b0c <isr_scan_tgta_check.isra.29+0x5c>)
    6ab4:	7803      	ldrb	r3, [r0, #0]
    6ab6:	f894 264d 	ldrb.w	r2, [r4, #1613]	; 0x64d
			BDADDR_SIZE) == 0))) ||
    6aba:	09db      	lsrs	r3, r3, #7
    6abc:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
static inline bool isr_scan_tgta_check(bool init, struct pdu_adv *pdu,
    6ac0:	4605      	mov	r5, r0
    6ac2:	460e      	mov	r6, r1
			BDADDR_SIZE) == 0))) ||
    6ac4:	d007      	beq.n	6ad6 <isr_scan_tgta_check.isra.29+0x26>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    6ac6:	f894 064d 	ldrb.w	r0, [r4, #1613]	; 0x64d
    6aca:	f3c0 1001 	ubfx	r0, r0, #4, #2
    6ace:	f010 0002 	ands.w	r0, r0, #2
    6ad2:	d10b      	bne.n	6aec <isr_scan_tgta_check.isra.29+0x3c>
    6ad4:	bd70      	pop	{r4, r5, r6, pc}
		(memcmp(&_radio.scanner.init_addr[0],
    6ad6:	f100 0108 	add.w	r1, r0, #8
    6ada:	2206      	movs	r2, #6
    6adc:	f204 604e 	addw	r0, r4, #1614	; 0x64e
    6ae0:	f7f9 fd86 	bl	5f0 <memcmp>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    6ae4:	2800      	cmp	r0, #0
    6ae6:	d1ee      	bne.n	6ac6 <isr_scan_tgta_check.isra.29+0x16>
			BDADDR_SIZE) == 0))) ||
    6ae8:	2001      	movs	r0, #1
    6aea:	bd70      	pop	{r4, r5, r6, pc}
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    6aec:	f995 3000 	ldrsb.w	r3, [r5]
    6af0:	2b00      	cmp	r3, #0
    6af2:	da09      	bge.n	6b08 <isr_scan_tgta_check.isra.29+0x58>
	    (pdu->rx_addr != 0) &&
    6af4:	7b6b      	ldrb	r3, [r5, #13]
    6af6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    6afa:	2b40      	cmp	r3, #64	; 0x40
    6afc:	d104      	bne.n	6b08 <isr_scan_tgta_check.isra.29+0x58>
		if (dir_report) {
    6afe:	2e00      	cmp	r6, #0
    6b00:	d0f2      	beq.n	6ae8 <isr_scan_tgta_check.isra.29+0x38>
			*dir_report = true;
    6b02:	2001      	movs	r0, #1
    6b04:	7030      	strb	r0, [r6, #0]
    6b06:	bd70      	pop	{r4, r5, r6, pc}
			BDADDR_SIZE) == 0))) ||
    6b08:	2000      	movs	r0, #0
}
    6b0a:	bd70      	pop	{r4, r5, r6, pc}
    6b0c:	200009f8 	.word	0x200009f8

00006b10 <packet_rx_enqueue>:
{
    6b10:	b510      	push	{r4, lr}
	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
    6b12:	4a19      	ldr	r2, [pc, #100]	; (6b78 <packet_rx_enqueue+0x68>)
    6b14:	f892 3741 	ldrb.w	r3, [r2, #1857]	; 0x741
    6b18:	f892 1742 	ldrb.w	r1, [r2, #1858]	; 0x742
    6b1c:	4299      	cmp	r1, r3
    6b1e:	d10a      	bne.n	6b36 <packet_rx_enqueue+0x26>
    6b20:	4a16      	ldr	r2, [pc, #88]	; (6b7c <packet_rx_enqueue+0x6c>)
    6b22:	4917      	ldr	r1, [pc, #92]	; (6b80 <packet_rx_enqueue+0x70>)
	LL_ASSERT(link);
    6b24:	2003      	movs	r0, #3
    6b26:	f7fb fb63 	bl	21f0 <bt_log>
    6b2a:	4040      	eors	r0, r0
    6b2c:	f380 8811 	msr	BASEPRI, r0
    6b30:	f04f 0004 	mov.w	r0, #4
    6b34:	df02      	svc	2
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    6b36:	f892 1741 	ldrb.w	r1, [r2, #1857]	; 0x741
    6b3a:	f8d2 373c 	ldr.w	r3, [r2, #1852]	; 0x73c
    6b3e:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    6b42:	f892 3778 	ldrb.w	r3, [r2, #1912]	; 0x778
	link = node_rx->hdr.onion.link;
    6b46:	6808      	ldr	r0, [r1, #0]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    6b48:	700b      	strb	r3, [r1, #0]
	last = _radio.packet_rx_last + 1;
    6b4a:	f892 3741 	ldrb.w	r3, [r2, #1857]	; 0x741
	if (last == _radio.packet_rx_count) {
    6b4e:	f892 4740 	ldrb.w	r4, [r2, #1856]	; 0x740
	last = _radio.packet_rx_last + 1;
    6b52:	3301      	adds	r3, #1
    6b54:	b2db      	uxtb	r3, r3
		last = 0;
    6b56:	429c      	cmp	r4, r3
    6b58:	bf08      	it	eq
    6b5a:	2300      	moveq	r3, #0
	_radio.packet_rx_last = last;
    6b5c:	f882 3741 	strb.w	r3, [r2, #1857]	; 0x741
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    6b60:	f502 62ea 	add.w	r2, r2, #1872	; 0x750
    6b64:	f7fc ff7e 	bl	3a64 <memq_enqueue>
	LL_ASSERT(link);
    6b68:	b910      	cbnz	r0, 6b70 <packet_rx_enqueue+0x60>
    6b6a:	4a04      	ldr	r2, [pc, #16]	; (6b7c <packet_rx_enqueue+0x6c>)
    6b6c:	4905      	ldr	r1, [pc, #20]	; (6b84 <packet_rx_enqueue+0x74>)
    6b6e:	e7d9      	b.n	6b24 <packet_rx_enqueue+0x14>
}
    6b70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
    6b74:	f003 bbf0 	b.w	a358 <radio_event_callback>
    6b78:	200009f8 	.word	0x200009f8
    6b7c:	0000e4c7 	.word	0x0000e4c7
    6b80:	0000e968 	.word	0x0000e968
    6b84:	0000e9af 	.word	0x0000e9af

00006b88 <mayfly_adv_stop>:
{
    6b88:	b510      	push	{r4, lr}
	node_rx = packet_rx_reserve_get(1);
    6b8a:	2001      	movs	r0, #1
    6b8c:	f7fe feda 	bl	5944 <packet_rx_reserve_get>
	LL_ASSERT(node_rx);
    6b90:	4604      	mov	r4, r0
    6b92:	b950      	cbnz	r0, 6baa <mayfly_adv_stop+0x22>
    6b94:	4a0d      	ldr	r2, [pc, #52]	; (6bcc <mayfly_adv_stop+0x44>)
    6b96:	490e      	ldr	r1, [pc, #56]	; (6bd0 <mayfly_adv_stop+0x48>)
    6b98:	2003      	movs	r0, #3
    6b9a:	f7fb fb29 	bl	21f0 <bt_log>
    6b9e:	4040      	eors	r0, r0
    6ba0:	f380 8811 	msr	BASEPRI, r0
    6ba4:	f04f 0004 	mov.w	r0, #4
    6ba8:	df02      	svc	2
	node_rx->hdr.handle = 0xffff;
    6baa:	f64f 73ff 	movw	r3, #65535	; 0xffff
    6bae:	80c3      	strh	r3, [r0, #6]
	node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    6bb0:	2306      	movs	r3, #6
    6bb2:	7103      	strb	r3, [r0, #4]
	memset(radio_le_conn_cmplt, 0x00, sizeof(struct radio_le_conn_cmplt));
    6bb4:	2210      	movs	r2, #16
    6bb6:	2100      	movs	r1, #0
    6bb8:	300b      	adds	r0, #11
    6bba:	f7f9 fd5a 	bl	672 <memset>
	radio_le_conn_cmplt->status = 0x3c;
    6bbe:	233c      	movs	r3, #60	; 0x3c
    6bc0:	72e3      	strb	r3, [r4, #11]
}
    6bc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	packet_rx_enqueue();
    6bc6:	f7ff bfa3 	b.w	6b10 <packet_rx_enqueue>
    6bca:	bf00      	nop
    6bcc:	0000e40e 	.word	0x0000e40e
    6bd0:	0000e8ac 	.word	0x0000e8ac

00006bd4 <terminate_ind_rx_enqueue>:
{
    6bd4:	b510      	push	{r4, lr}
    6bd6:	4603      	mov	r3, r0
    6bd8:	460a      	mov	r2, r1
	node_rx = (void *)&conn->llcp_terminate.radio_pdu_node_rx;
    6bda:	f100 019c 	add.w	r1, r0, #156	; 0x9c
	LL_ASSERT(node_rx->hdr.onion.link);
    6bde:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
    6be2:	b950      	cbnz	r0, 6bfa <terminate_ind_rx_enqueue+0x26>
    6be4:	4a11      	ldr	r2, [pc, #68]	; (6c2c <terminate_ind_rx_enqueue+0x58>)
    6be6:	4912      	ldr	r1, [pc, #72]	; (6c30 <terminate_ind_rx_enqueue+0x5c>)
	LL_ASSERT(link);
    6be8:	2003      	movs	r0, #3
    6bea:	f7fb fb01 	bl	21f0 <bt_log>
    6bee:	4040      	eors	r0, r0
    6bf0:	f380 8811 	msr	BASEPRI, r0
    6bf4:	f04f 0004 	mov.w	r0, #4
    6bf8:	df02      	svc	2
	node_rx->hdr.handle = conn->handle;
    6bfa:	8c1c      	ldrh	r4, [r3, #32]
    6bfc:	f8a3 40a2 	strh.w	r4, [r3, #162]	; 0xa2
	*((u8_t *)node_rx->pdu_data) = reason;
    6c00:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    6c04:	2407      	movs	r4, #7
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    6c06:	4a0b      	ldr	r2, [pc, #44]	; (6c34 <terminate_ind_rx_enqueue+0x60>)
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    6c08:	f883 40a0 	strb.w	r4, [r3, #160]	; 0xa0
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    6c0c:	f892 4778 	ldrb.w	r4, [r2, #1912]	; 0x778
    6c10:	f883 409c 	strb.w	r4, [r3, #156]	; 0x9c
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    6c14:	f502 62ea 	add.w	r2, r2, #1872	; 0x750
    6c18:	f7fc ff24 	bl	3a64 <memq_enqueue>
	LL_ASSERT(link);
    6c1c:	b910      	cbnz	r0, 6c24 <terminate_ind_rx_enqueue+0x50>
    6c1e:	4a03      	ldr	r2, [pc, #12]	; (6c2c <terminate_ind_rx_enqueue+0x58>)
    6c20:	4905      	ldr	r1, [pc, #20]	; (6c38 <terminate_ind_rx_enqueue+0x64>)
    6c22:	e7e1      	b.n	6be8 <terminate_ind_rx_enqueue+0x14>
}
    6c24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
    6c28:	f003 bb96 	b.w	a358 <radio_event_callback>
    6c2c:	0000e500 	.word	0x0000e500
    6c30:	0000ebf4 	.word	0x0000ebf4
    6c34:	200009f8 	.word	0x200009f8
    6c38:	0000e9af 	.word	0x0000e9af

00006c3c <isr_rx_scan_report.isra.37>:
static u32_t isr_rx_scan_report(u8_t rssi_ready, u8_t rl_idx, bool dir_report)
    6c3c:	b570      	push	{r4, r5, r6, lr}
    6c3e:	4606      	mov	r6, r0
	node_rx = packet_rx_reserve_get(3);
    6c40:	2003      	movs	r0, #3
    6c42:	f7fe fe7f 	bl	5944 <packet_rx_reserve_get>
	if (node_rx == 0) {
    6c46:	b368      	cbz	r0, 6ca4 <isr_rx_scan_report.isra.37+0x68>
	node_rx->hdr.handle = 0xffff;
    6c48:	f64f 73ff 	movw	r3, #65535	; 0xffff
    6c4c:	80c3      	strh	r3, [r0, #6]
	} else if (_radio.scanner.phy) {
    6c4e:	4b16      	ldr	r3, [pc, #88]	; (6ca8 <isr_rx_scan_report.isra.37+0x6c>)
    6c50:	f893 364d 	ldrb.w	r3, [r3, #1613]	; 0x64d
    6c54:	075a      	lsls	r2, r3, #29
    6c56:	d021      	beq.n	6c9c <isr_rx_scan_report.isra.37+0x60>
		switch (_radio.scanner.phy) {
    6c58:	f3c3 0302 	ubfx	r3, r3, #0, #3
    6c5c:	b2da      	uxtb	r2, r3
    6c5e:	2a01      	cmp	r2, #1
    6c60:	d00c      	beq.n	6c7c <isr_rx_scan_report.isra.37+0x40>
    6c62:	2a04      	cmp	r2, #4
    6c64:	d00b      	beq.n	6c7e <isr_rx_scan_report.isra.37+0x42>
			LL_ASSERT(0);
    6c66:	4a11      	ldr	r2, [pc, #68]	; (6cac <isr_rx_scan_report.isra.37+0x70>)
    6c68:	4911      	ldr	r1, [pc, #68]	; (6cb0 <isr_rx_scan_report.isra.37+0x74>)
    6c6a:	2003      	movs	r0, #3
    6c6c:	f7fb fac0 	bl	21f0 <bt_log>
    6c70:	4040      	eors	r0, r0
    6c72:	f380 8811 	msr	BASEPRI, r0
    6c76:	f04f 0004 	mov.w	r0, #4
    6c7a:	df02      	svc	2
			node_rx->hdr.type = NODE_RX_TYPE_EXT_1M_REPORT;
    6c7c:	2303      	movs	r3, #3
			     pdu_adv_rx->len] =
    6c7e:	7a44      	ldrb	r4, [r0, #9]
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    6c80:	7103      	strb	r3, [r0, #4]
	pdu_adv_rx = (void *)node_rx->pdu_data;
    6c82:	f100 0508 	add.w	r5, r0, #8
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    6c86:	3402      	adds	r4, #2
			     pdu_adv_rx->len] =
    6c88:	b156      	cbz	r6, 6ca0 <isr_rx_scan_report.isra.37+0x64>
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;
    6c8a:	f004 fa0f 	bl	b0ac <radio_rssi_get>
			     pdu_adv_rx->len] =
    6c8e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    6c92:	5528      	strb	r0, [r5, r4]
	packet_rx_enqueue();
    6c94:	f7ff ff3c 	bl	6b10 <packet_rx_enqueue>
	return 0;
    6c98:	2000      	movs	r0, #0
    6c9a:	bd70      	pop	{r4, r5, r6, pc}
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    6c9c:	2302      	movs	r3, #2
    6c9e:	e7ee      	b.n	6c7e <isr_rx_scan_report.isra.37+0x42>
			     pdu_adv_rx->len] =
    6ca0:	207f      	movs	r0, #127	; 0x7f
    6ca2:	e7f6      	b.n	6c92 <isr_rx_scan_report.isra.37+0x56>
		return 1;
    6ca4:	2001      	movs	r0, #1
}
    6ca6:	bd70      	pop	{r4, r5, r6, pc}
    6ca8:	200009f8 	.word	0x200009f8
    6cac:	0000e1e5 	.word	0x0000e1e5
    6cb0:	0000d773 	.word	0x0000d773

00006cb4 <prepare_normal_set>:
{
    6cb4:	b530      	push	{r4, r5, lr}
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    6cb6:	6804      	ldr	r4, [r0, #0]
    6cb8:	2c00      	cmp	r4, #0
{
    6cba:	b089      	sub	sp, #36	; 0x24
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    6cbc:	da22      	bge.n	6d04 <prepare_normal_set+0x50>
		u32_t ticks_prepare_to_start =
    6cbe:	6843      	ldr	r3, [r0, #4]
    6cc0:	6885      	ldr	r5, [r0, #8]
		ticker_status =
    6cc2:	9006      	str	r0, [sp, #24]
		u32_t ticks_drift_minus = (hdr->ticks_xtal_to_start &
    6cc4:	429d      	cmp	r5, r3
    6cc6:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
    6cca:	bf34      	ite	cc
    6ccc:	1ae4      	subcc	r4, r4, r3
    6cce:	1b64      	subcs	r4, r4, r5
		ticker_status =
    6cd0:	4b0d      	ldr	r3, [pc, #52]	; (6d08 <prepare_normal_set+0x54>)
    6cd2:	9305      	str	r3, [sp, #20]
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    6cd4:	b2a4      	uxth	r4, r4
		ticker_status =
    6cd6:	2300      	movs	r3, #0
    6cd8:	9304      	str	r3, [sp, #16]
    6cda:	9303      	str	r3, [sp, #12]
    6cdc:	9302      	str	r3, [sp, #8]
    6cde:	4618      	mov	r0, r3
    6ce0:	9401      	str	r4, [sp, #4]
    6ce2:	9400      	str	r4, [sp, #0]
    6ce4:	f7fd fd32 	bl	474c <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    6ce8:	f030 0302 	bics.w	r3, r0, #2
    6cec:	d00a      	beq.n	6d04 <prepare_normal_set+0x50>
    6cee:	4a07      	ldr	r2, [pc, #28]	; (6d0c <prepare_normal_set+0x58>)
    6cf0:	4907      	ldr	r1, [pc, #28]	; (6d10 <prepare_normal_set+0x5c>)
    6cf2:	2003      	movs	r0, #3
    6cf4:	f7fb fa7c 	bl	21f0 <bt_log>
    6cf8:	4040      	eors	r0, r0
    6cfa:	f380 8811 	msr	BASEPRI, r0
    6cfe:	f04f 0004 	mov.w	r0, #4
    6d02:	df02      	svc	2
}
    6d04:	b009      	add	sp, #36	; 0x24
    6d06:	bd30      	pop	{r4, r5, pc}
    6d08:	00005901 	.word	0x00005901
    6d0c:	0000e31e 	.word	0x0000e31e
    6d10:	0000e576 	.word	0x0000e576

00006d14 <preempt_calc>:
{
    6d14:	b570      	push	{r4, r5, r6, lr}
    6d16:	4614      	mov	r4, r2
    6d18:	460e      	mov	r6, r1
    6d1a:	4605      	mov	r5, r0
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);
    6d1c:	f7fd fe34 	bl	4988 <ticker_ticks_now_get>
	u32_t diff =
    6d20:	4621      	mov	r1, r4
    6d22:	f7fd fe33 	bl	498c <ticker_ticks_diff_get>
	diff += 3;
    6d26:	1cc4      	adds	r4, r0, #3
	if (diff > HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
    6d28:	2c09      	cmp	r4, #9
    6d2a:	f04f 0000 	mov.w	r0, #0
    6d2e:	d90d      	bls.n	6d4c <preempt_calc+0x38>
    6d30:	f7ff fbb8 	bl	64a4 <mayfly_xtal_retain.part.15>
		prepare_normal_set(hdr, RADIO_TICKER_USER_ID_WORKER, ticker_id);
    6d34:	4632      	mov	r2, r6
    6d36:	2100      	movs	r1, #0
    6d38:	4628      	mov	r0, r5
    6d3a:	f7ff ffbb 	bl	6cb4 <prepare_normal_set>
		diff += hdr->ticks_preempt_to_start;
    6d3e:	68ab      	ldr	r3, [r5, #8]
    6d40:	441c      	add	r4, r3
		if (diff <
    6d42:	2c26      	cmp	r4, #38	; 0x26
    6d44:	d800      	bhi.n	6d48 <preempt_calc+0x34>
			hdr->ticks_preempt_to_start = diff;
    6d46:	60ac      	str	r4, [r5, #8]
		return 1;
    6d48:	2001      	movs	r0, #1
}
    6d4a:	bd70      	pop	{r4, r5, r6, pc}
    6d4c:	bd70      	pop	{r4, r5, r6, pc}
	...

00006d50 <event_ext_adv>:
	LL_ASSERT(_radio.role == ROLE_NONE);
    6d50:	4b4b      	ldr	r3, [pc, #300]	; (6e80 <event_ext_adv+0x130>)
    6d52:	7cda      	ldrb	r2, [r3, #19]
{
    6d54:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
    6d56:	f002 01ff 	and.w	r1, r2, #255	; 0xff
{
    6d5a:	4605      	mov	r5, r0
    6d5c:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    6d5e:	b152      	cbz	r2, 6d76 <event_ext_adv+0x26>
    6d60:	4a48      	ldr	r2, [pc, #288]	; (6e84 <event_ext_adv+0x134>)
    6d62:	4949      	ldr	r1, [pc, #292]	; (6e88 <event_ext_adv+0x138>)
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_EXT_ADV);
    6d64:	2003      	movs	r0, #3
    6d66:	f7fb fa43 	bl	21f0 <bt_log>
    6d6a:	4040      	eors	r0, r0
    6d6c:	f380 8811 	msr	BASEPRI, r0
    6d70:	f04f 0004 	mov.w	r0, #4
    6d74:	df02      	svc	2
    6d76:	7c1b      	ldrb	r3, [r3, #16]
    6d78:	b2db      	uxtb	r3, r3
    6d7a:	2b08      	cmp	r3, #8
    6d7c:	d002      	beq.n	6d84 <event_ext_adv+0x34>
    6d7e:	4a41      	ldr	r2, [pc, #260]	; (6e84 <event_ext_adv+0x134>)
    6d80:	4942      	ldr	r1, [pc, #264]	; (6e8c <event_ext_adv+0x13c>)
    6d82:	e7ef      	b.n	6d64 <event_ext_adv+0x14>
	_radio.role = ROLE_ADV;
    6d84:	2201      	movs	r2, #1
    6d86:	74e2      	strb	r2, [r4, #19]
	_radio.ticker_id_prepare = 0;
    6d88:	7421      	strb	r1, [r4, #16]
	if (_radio.advertiser.adv_data.first !=
    6d8a:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
	_radio.ticker_id_event = RADIO_TICKER_ID_EXT_ADV;
    6d8e:	7463      	strb	r3, [r4, #17]
	if (_radio.advertiser.adv_data.first !=
    6d90:	f894 322d 	ldrb.w	r3, [r4, #557]	; 0x22d
	_radio.ticks_anchor = ticks_at_expire;
    6d94:	60a0      	str	r0, [r4, #8]
	if (_radio.advertiser.adv_data.first !=
    6d96:	429a      	cmp	r2, r3
    6d98:	d006      	beq.n	6da8 <event_ext_adv+0x58>
		first = _radio.advertiser.adv_data.first + 1;
    6d9a:	3301      	adds	r3, #1
    6d9c:	b2db      	uxtb	r3, r3
			first = 0;
    6d9e:	2b02      	cmp	r3, #2
    6da0:	bf08      	it	eq
    6da2:	2300      	moveq	r3, #0
		_radio.advertiser.adv_data.first = first;
    6da4:	f884 322d 	strb.w	r3, [r4, #557]	; 0x22d
	if (_radio.advertiser.scan_data.first != _radio.
    6da8:	f894 3635 	ldrb.w	r3, [r4, #1589]	; 0x635
    6dac:	f894 2636 	ldrb.w	r2, [r4, #1590]	; 0x636
    6db0:	429a      	cmp	r2, r3
    6db2:	d006      	beq.n	6dc2 <event_ext_adv+0x72>
		first = _radio.advertiser.scan_data.first + 1;
    6db4:	3301      	adds	r3, #1
    6db6:	b2db      	uxtb	r3, r3
			first = 0;
    6db8:	2b02      	cmp	r3, #2
    6dba:	bf08      	it	eq
    6dbc:	2300      	moveq	r3, #0
		_radio.advertiser.scan_data.first = first;
    6dbe:	f884 3635 	strb.w	r3, [r4, #1589]	; 0x635
	pdu = (void *)_radio.advertiser.adv_data.data
    6dc2:	f894 322d 	ldrb.w	r3, [r4, #557]	; 0x22d
	aux_pdu = (void *)_radio.advertiser.aux_adv_data.data
    6dc6:	f894 0432 	ldrb.w	r0, [r4, #1074]	; 0x432
	pdu = (void *)_radio.advertiser.adv_data.data
    6dca:	eb03 2303 	add.w	r3, r3, r3, lsl #8
	aux_pdu = (void *)_radio.advertiser.aux_adv_data.data
    6dce:	eb00 2000 	add.w	r0, r0, r0, lsl #8
	pdu = (void *)_radio.advertiser.adv_data.data
    6dd2:	f103 062b 	add.w	r6, r3, #43	; 0x2b
	aux_pdu = (void *)_radio.advertiser.aux_adv_data.data
    6dd6:	f200 202f 	addw	r0, r0, #559	; 0x22f
			radio_pkt_tx_set(aux_pdu);
    6dda:	4420      	add	r0, r4
    6ddc:	f004 f8be 	bl	af5c <radio_pkt_tx_set>
			if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
    6de0:	5da3      	ldrb	r3, [r4, r6]
    6de2:	f003 030f 	and.w	r3, r3, #15
    6de6:	2b02      	cmp	r3, #2
    6de8:	d033      	beq.n	6e52 <event_ext_adv+0x102>
    6dea:	2b07      	cmp	r3, #7
    6dec:	d031      	beq.n	6e52 <event_ext_adv+0x102>
				_radio.state = STATE_TX;
    6dee:	2302      	movs	r3, #2
				radio_tmr_tifs_set(RADIO_TIFS);
    6df0:	2096      	movs	r0, #150	; 0x96
				_radio.state = STATE_TX;
    6df2:	7523      	strb	r3, [r4, #20]
				radio_tmr_tifs_set(RADIO_TIFS);
    6df4:	f004 f9bc 	bl	b170 <radio_tmr_tifs_set>
				radio_switch_complete_and_rx(0);
    6df8:	2000      	movs	r0, #0
    6dfa:	f004 f929 	bl	b050 <radio_switch_complete_and_rx>
			_radio.ext_advertiser.current_slot = 0;
    6dfe:	2300      	movs	r3, #0
				chan_set(_radio.ext_advertiser.aux_pckt_chan);
    6e00:	f894 06a0 	ldrb.w	r0, [r4, #1696]	; 0x6a0
			_radio.ext_advertiser.current_slot = 0;
    6e04:	f884 3689 	strb.w	r3, [r4, #1673]	; 0x689
			_radio.ext_advertiser.event = 0;
    6e08:	f884 368a 	strb.w	r3, [r4, #1674]	; 0x68a
				chan_set(_radio.ext_advertiser.aux_pckt_chan);
    6e0c:	f7fe ff72 	bl	5cf4 <chan_set>
	if (_radio.advertiser.filter_policy) {
    6e10:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    6e14:	079b      	lsls	r3, r3, #30
    6e16:	d007      	beq.n	6e28 <event_ext_adv+0xd8>
		struct ll_filter *wl = ctrl_filter_get(true);
    6e18:	2001      	movs	r0, #1
    6e1a:	f003 fe05 	bl	aa28 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
    6e1e:	1c82      	adds	r2, r0, #2
    6e20:	7841      	ldrb	r1, [r0, #1]
    6e22:	7800      	ldrb	r0, [r0, #0]
    6e24:	f004 f95a 	bl	b0dc <radio_filter_configure>
	remainder_us = radio_tmr_start(1, ticks_at_expire +
    6e28:	68e2      	ldr	r2, [r4, #12]
    6e2a:	f105 0109 	add.w	r1, r5, #9
    6e2e:	2001      	movs	r0, #1
    6e30:	f004 f9aa 	bl	b188 <radio_tmr_start>
	radio_tmr_end_capture();
    6e34:	f004 fa78 	bl	b328 <radio_tmr_end_capture>
	if (preempt_calc(&_radio.advertiser.hdr, RADIO_TICKER_ID_ADV,
    6e38:	462a      	mov	r2, r5
    6e3a:	2105      	movs	r1, #5
    6e3c:	4814      	ldr	r0, [pc, #80]	; (6e90 <event_ext_adv+0x140>)
    6e3e:	f7ff ff69 	bl	6d14 <preempt_calc>
    6e42:	4603      	mov	r3, r0
    6e44:	b180      	cbz	r0, 6e68 <event_ext_adv+0x118>
		_radio.state = STATE_STOP;
    6e46:	2304      	movs	r3, #4
    6e48:	7523      	strb	r3, [r4, #20]
}
    6e4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		radio_disable();
    6e4e:	f004 b8a5 	b.w	af9c <radio_disable>
				_radio.state = STATE_CLOSE;
    6e52:	2303      	movs	r3, #3
    6e54:	7523      	strb	r3, [r4, #20]
				_radio.advertiser.ext_adv = 1;
    6e56:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    6e5a:	f043 0301 	orr.w	r3, r3, #1
    6e5e:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
				radio_switch_complete_and_disable();
    6e62:	f004 f90b 	bl	b07c <radio_switch_complete_and_disable>
    6e66:	e7ca      	b.n	6dfe <event_ext_adv+0xae>
		ticker_status =
    6e68:	4a0a      	ldr	r2, [pc, #40]	; (6e94 <event_ext_adv+0x144>)
    6e6a:	4601      	mov	r1, r0
    6e6c:	f7fd fd3a 	bl	48e4 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    6e70:	f030 0302 	bics.w	r3, r0, #2
    6e74:	d002      	beq.n	6e7c <event_ext_adv+0x12c>
    6e76:	4a03      	ldr	r2, [pc, #12]	; (6e84 <event_ext_adv+0x134>)
    6e78:	4907      	ldr	r1, [pc, #28]	; (6e98 <event_ext_adv+0x148>)
    6e7a:	e773      	b.n	6d64 <event_ext_adv+0x14>
    6e7c:	bd70      	pop	{r4, r5, r6, pc}
    6e7e:	bf00      	nop
    6e80:	200009f8 	.word	0x200009f8
    6e84:	0000e400 	.word	0x0000e400
    6e88:	0000e5eb 	.word	0x0000e5eb
    6e8c:	0000e619 	.word	0x0000e619
    6e90:	20000a10 	.word	0x20000a10
    6e94:	00006431 	.word	0x00006431
    6e98:	0000e576 	.word	0x0000e576

00006e9c <adv_scan_configure.constprop.48>:
static void adv_scan_configure(u8_t phy, u8_t flags)
    6e9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	u32_t aa = 0x8e89bed6;
    6e9e:	ad02      	add	r5, sp, #8
    6ea0:	4b10      	ldr	r3, [pc, #64]	; (6ee4 <adv_scan_configure.constprop.48+0x48>)
    6ea2:	f845 3d04 	str.w	r3, [r5, #-4]!
static void adv_scan_configure(u8_t phy, u8_t flags)
    6ea6:	4604      	mov	r4, r0
	radio_reset();
    6ea8:	f003 ffc4 	bl	ae34 <radio_reset>
	radio_tx_power_set(0);
    6eac:	2000      	movs	r0, #0
    6eae:	f003 ffeb 	bl	ae88 <radio_tx_power_set>
	radio_isr_set(isr);
    6eb2:	480d      	ldr	r0, [pc, #52]	; (6ee8 <adv_scan_configure.constprop.48+0x4c>)
    6eb4:	f003 ff88 	bl	adc8 <radio_isr_set>
	radio_phy_set(phy, flags);
    6eb8:	2101      	movs	r1, #1
    6eba:	4620      	mov	r0, r4
    6ebc:	f003 ffd4 	bl	ae68 <radio_phy_set>
	radio_aa_set((u8_t *)&aa);
    6ec0:	4628      	mov	r0, r5
    6ec2:	f003 ffff 	bl	aec4 <radio_aa_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, (phy << 1));
    6ec6:	0062      	lsls	r2, r4, #1
    6ec8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    6ecc:	21ff      	movs	r1, #255	; 0xff
    6ece:	2008      	movs	r0, #8
    6ed0:	f004 f810 	bl	aef4 <radio_pkt_configure>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    6ed4:	4905      	ldr	r1, [pc, #20]	; (6eec <adv_scan_configure.constprop.48+0x50>)
    6ed6:	f240 605b 	movw	r0, #1627	; 0x65b
    6eda:	f004 f89b 	bl	b014 <radio_crc_configure>
}
    6ede:	b003      	add	sp, #12
    6ee0:	bd30      	pop	{r4, r5, pc}
    6ee2:	bf00      	nop
    6ee4:	8e89bed6 	.word	0x8e89bed6
    6ee8:	00008131 	.word	0x00008131
    6eec:	00555555 	.word	0x00555555

00006ef0 <event_adv>:
	LL_ASSERT(_radio.role == ROLE_NONE);
    6ef0:	4b2e      	ldr	r3, [pc, #184]	; (6fac <event_adv+0xbc>)
    6ef2:	7cda      	ldrb	r2, [r3, #19]
{
    6ef4:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
    6ef6:	f002 01ff 	and.w	r1, r2, #255	; 0xff
{
    6efa:	4605      	mov	r5, r0
    6efc:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    6efe:	b152      	cbz	r2, 6f16 <event_adv+0x26>
    6f00:	4a2b      	ldr	r2, [pc, #172]	; (6fb0 <event_adv+0xc0>)
    6f02:	492c      	ldr	r1, [pc, #176]	; (6fb4 <event_adv+0xc4>)
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV);
    6f04:	2003      	movs	r0, #3
    6f06:	f7fb f973 	bl	21f0 <bt_log>
    6f0a:	4040      	eors	r0, r0
    6f0c:	f380 8811 	msr	BASEPRI, r0
    6f10:	f04f 0004 	mov.w	r0, #4
    6f14:	df02      	svc	2
    6f16:	7c1b      	ldrb	r3, [r3, #16]
    6f18:	b2db      	uxtb	r3, r3
    6f1a:	2b05      	cmp	r3, #5
    6f1c:	d002      	beq.n	6f24 <event_adv+0x34>
    6f1e:	4a24      	ldr	r2, [pc, #144]	; (6fb0 <event_adv+0xc0>)
    6f20:	4925      	ldr	r1, [pc, #148]	; (6fb8 <event_adv+0xc8>)
    6f22:	e7ef      	b.n	6f04 <event_adv+0x14>
	_radio.ticks_anchor = ticks_at_expire;
    6f24:	60a0      	str	r0, [r4, #8]
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    6f26:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
	_radio.role = ROLE_ADV;
    6f2a:	2601      	movs	r6, #1
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    6f2c:	f3c0 0042 	ubfx	r0, r0, #1, #3
	_radio.role = ROLE_ADV;
    6f30:	74e6      	strb	r6, [r4, #19]
	_radio.ticker_id_prepare = 0;
    6f32:	7421      	strb	r1, [r4, #16]
	_radio.ticker_id_event = RADIO_TICKER_ID_ADV;
    6f34:	7463      	strb	r3, [r4, #17]
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    6f36:	f7ff ffb1 	bl	6e9c <adv_scan_configure.constprop.48>
	_radio.advertiser.chan_map_current = _radio.advertiser.chan_map;
    6f3a:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    6f3e:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    6f42:	f3c3 1302 	ubfx	r3, r3, #4, #3
    6f46:	f363 0202 	bfi	r2, r3, #0, #3
    6f4a:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	adv_setup();
    6f4e:	f7ff f80f 	bl	5f70 <adv_setup>
	if (_radio.advertiser.filter_policy) {
    6f52:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    6f56:	079b      	lsls	r3, r3, #30
    6f58:	d007      	beq.n	6f6a <event_adv+0x7a>
		struct ll_filter *wl = ctrl_filter_get(true);
    6f5a:	4630      	mov	r0, r6
    6f5c:	f003 fd64 	bl	aa28 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
    6f60:	1c82      	adds	r2, r0, #2
    6f62:	7841      	ldrb	r1, [r0, #1]
    6f64:	7800      	ldrb	r0, [r0, #0]
    6f66:	f004 f8b9 	bl	b0dc <radio_filter_configure>
	remainder_us = radio_tmr_start(1, ticks_at_expire +
    6f6a:	68e2      	ldr	r2, [r4, #12]
    6f6c:	f105 0109 	add.w	r1, r5, #9
    6f70:	2001      	movs	r0, #1
    6f72:	f004 f909 	bl	b188 <radio_tmr_start>
	radio_tmr_end_capture();
    6f76:	f004 f9d7 	bl	b328 <radio_tmr_end_capture>
	if (preempt_calc(&_radio.advertiser.hdr, RADIO_TICKER_ID_ADV,
    6f7a:	462a      	mov	r2, r5
    6f7c:	2105      	movs	r1, #5
    6f7e:	480f      	ldr	r0, [pc, #60]	; (6fbc <event_adv+0xcc>)
    6f80:	f7ff fec8 	bl	6d14 <preempt_calc>
    6f84:	4603      	mov	r3, r0
    6f86:	b128      	cbz	r0, 6f94 <event_adv+0xa4>
		_radio.state = STATE_STOP;
    6f88:	2304      	movs	r3, #4
    6f8a:	7523      	strb	r3, [r4, #20]
}
    6f8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		radio_disable();
    6f90:	f004 b804 	b.w	af9c <radio_disable>
		ticker_status =
    6f94:	4a0a      	ldr	r2, [pc, #40]	; (6fc0 <event_adv+0xd0>)
    6f96:	4601      	mov	r1, r0
    6f98:	f7fd fca4 	bl	48e4 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    6f9c:	f030 0302 	bics.w	r3, r0, #2
    6fa0:	d002      	beq.n	6fa8 <event_adv+0xb8>
    6fa2:	4a03      	ldr	r2, [pc, #12]	; (6fb0 <event_adv+0xc0>)
    6fa4:	4907      	ldr	r1, [pc, #28]	; (6fc4 <event_adv+0xd4>)
    6fa6:	e7ad      	b.n	6f04 <event_adv+0x14>
    6fa8:	bd70      	pop	{r4, r5, r6, pc}
    6faa:	bf00      	nop
    6fac:	200009f8 	.word	0x200009f8
    6fb0:	0000e3f6 	.word	0x0000e3f6
    6fb4:	0000e5eb 	.word	0x0000e5eb
    6fb8:	0000e5b8 	.word	0x0000e5b8
    6fbc:	20000a10 	.word	0x20000a10
    6fc0:	00006431 	.word	0x00006431
    6fc4:	0000e576 	.word	0x0000e576

00006fc8 <event_stop.constprop.49>:
static void event_stop(u32_t ticks_at_expire, u32_t remainder,
    6fc8:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
    6fca:	4b05      	ldr	r3, [pc, #20]	; (6fe0 <event_stop.constprop.49+0x18>)
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    6fcc:	2200      	movs	r2, #0
	s_mfy_radio_stop.param = context;
    6fce:	6098      	str	r0, [r3, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    6fd0:	4611      	mov	r1, r2
    6fd2:	4610      	mov	r0, r2
    6fd4:	f7fc fdb6 	bl	3b44 <mayfly_enqueue>
	LL_ASSERT(!retval);
    6fd8:	b108      	cbz	r0, 6fde <event_stop.constprop.49+0x16>
    6fda:	f7ff fa53 	bl	6484 <event_stop.part.12>
    6fde:	bd08      	pop	{r3, pc}
    6fe0:	20004f80 	.word	0x20004f80

00006fe4 <event_common_prepare>:
{
    6fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u32_t _ticks_xtal_to_start = *ticks_xtal_to_start;
    6fe8:	6814      	ldr	r4, [r2, #0]
	u32_t _ticks_active_to_start = *ticks_active_to_start;
    6fea:	681d      	ldr	r5, [r3, #0]
{
    6fec:	b08d      	sub	sp, #52	; 0x34
	if (_ticks_xtal_to_start & XON_BITMASK) {
    6fee:	2c00      	cmp	r4, #0
{
    6ff0:	4681      	mov	r9, r0
    6ff2:	910b      	str	r1, [sp, #44]	; 0x2c
    6ff4:	4690      	mov	r8, r2
    6ff6:	469b      	mov	fp, r3
    6ff8:	f89d a05c 	ldrb.w	sl, [sp, #92]	; 0x5c
	if (_ticks_xtal_to_start & XON_BITMASK) {
    6ffc:	da03      	bge.n	7006 <event_common_prepare+0x22>
		_ticks_xtal_to_start =
    6ffe:	9c16      	ldr	r4, [sp, #88]	; 0x58
    7000:	42ac      	cmp	r4, r5
    7002:	bf38      	it	cc
    7004:	462c      	movcc	r4, r5
	if (_ticks_active_to_start < _ticks_xtal_to_start) {
    7006:	42ac      	cmp	r4, r5
    7008:	4f51      	ldr	r7, [pc, #324]	; (7150 <event_common_prepare+0x16c>)
    700a:	d920      	bls.n	704e <event_common_prepare+0x6a>
		ticker_status =
    700c:	f241 63e4 	movw	r3, #5860	; 0x16e4
    7010:	9308      	str	r3, [sp, #32]
    7012:	4b50      	ldr	r3, [pc, #320]	; (7154 <event_common_prepare+0x170>)
    7014:	9305      	str	r3, [sp, #20]
    7016:	2100      	movs	r1, #0
		ticks_to_active = _ticks_xtal_to_start - _ticks_active_to_start;
    7018:	1b63      	subs	r3, r4, r5
		ticker_status =
    701a:	9300      	str	r3, [sp, #0]
    701c:	9707      	str	r7, [sp, #28]
    701e:	464b      	mov	r3, r9
    7020:	9106      	str	r1, [sp, #24]
    7022:	9104      	str	r1, [sp, #16]
    7024:	9103      	str	r1, [sp, #12]
    7026:	9102      	str	r1, [sp, #8]
    7028:	9101      	str	r1, [sp, #4]
    702a:	2201      	movs	r2, #1
    702c:	4608      	mov	r0, r1
    702e:	f7fd fb3d 	bl	46ac <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    7032:	f030 0302 	bics.w	r3, r0, #2
    7036:	d030      	beq.n	709a <event_common_prepare+0xb6>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    7038:	4a47      	ldr	r2, [pc, #284]	; (7158 <event_common_prepare+0x174>)
    703a:	4948      	ldr	r1, [pc, #288]	; (715c <event_common_prepare+0x178>)
		LL_ASSERT(!retval);
    703c:	2003      	movs	r0, #3
    703e:	f7fb f8d7 	bl	21f0 <bt_log>
    7042:	4040      	eors	r0, r0
    7044:	f380 8811 	msr	BASEPRI, r0
    7048:	f04f 0004 	mov.w	r0, #4
    704c:	df02      	svc	2
	} else if (_ticks_active_to_start > _ticks_xtal_to_start) {
    704e:	d21d      	bcs.n	708c <event_common_prepare+0xa8>
		event_active(0, 0, 0, NULL);
    7050:	2300      	movs	r3, #0
    7052:	461a      	mov	r2, r3
    7054:	4619      	mov	r1, r3
    7056:	4618      	mov	r0, r3
    7058:	f7ff fa50 	bl	64fc <event_active>
		ticker_status =
    705c:	f241 63f9 	movw	r3, #5881	; 0x16f9
    7060:	2100      	movs	r1, #0
    7062:	9308      	str	r3, [sp, #32]
		ticks_to_xtal = _ticks_active_to_start - _ticks_xtal_to_start;
    7064:	1b2c      	subs	r4, r5, r4
		ticker_status =
    7066:	4b3e      	ldr	r3, [pc, #248]	; (7160 <event_common_prepare+0x17c>)
    7068:	9305      	str	r3, [sp, #20]
    706a:	9707      	str	r7, [sp, #28]
    706c:	464b      	mov	r3, r9
    706e:	9106      	str	r1, [sp, #24]
    7070:	9104      	str	r1, [sp, #16]
    7072:	9103      	str	r1, [sp, #12]
    7074:	9102      	str	r1, [sp, #8]
    7076:	9101      	str	r1, [sp, #4]
    7078:	9400      	str	r4, [sp, #0]
    707a:	2201      	movs	r2, #1
    707c:	4608      	mov	r0, r1
    707e:	f7fd fb15 	bl	46ac <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    7082:	f030 0302 	bics.w	r3, r0, #2
    7086:	d1d7      	bne.n	7038 <event_common_prepare+0x54>
    7088:	462c      	mov	r4, r5
    708a:	e00b      	b.n	70a4 <event_common_prepare+0xc0>
		event_active(0, 0, 0, NULL);
    708c:	2300      	movs	r3, #0
    708e:	461a      	mov	r2, r3
    7090:	4619      	mov	r1, r3
    7092:	4618      	mov	r0, r3
    7094:	f7ff fa32 	bl	64fc <event_active>
		event_xtal(0, 0, 0, NULL);
    7098:	2300      	movs	r3, #0
    709a:	461a      	mov	r2, r3
    709c:	4619      	mov	r1, r3
    709e:	4618      	mov	r0, r3
    70a0:	f7ff fa46 	bl	6530 <event_xtal>
	_radio.remainder_anchor = remainder;
    70a4:	4e2f      	ldr	r6, [pc, #188]	; (7164 <event_common_prepare+0x180>)
    70a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    70a8:	60f3      	str	r3, [r6, #12]
	ticker_status =
    70aa:	f241 7311 	movw	r3, #5905	; 0x1711
    70ae:	9308      	str	r3, [sp, #32]
    70b0:	9b19      	ldr	r3, [sp, #100]	; 0x64
    70b2:	9306      	str	r3, [sp, #24]
    70b4:	2200      	movs	r2, #0
    70b6:	9b18      	ldr	r3, [sp, #96]	; 0x60
    70b8:	9305      	str	r3, [sp, #20]
    70ba:	9707      	str	r7, [sp, #28]
    70bc:	464b      	mov	r3, r9
    70be:	9204      	str	r2, [sp, #16]
    70c0:	9203      	str	r2, [sp, #12]
    70c2:	9202      	str	r2, [sp, #8]
    70c4:	9201      	str	r2, [sp, #4]
    70c6:	9400      	str	r4, [sp, #0]
    70c8:	4611      	mov	r1, r2
    70ca:	4610      	mov	r0, r2
    70cc:	f7fd faee 	bl	46ac <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    70d0:	f030 0302 	bics.w	r3, r0, #2
    70d4:	d1b0      	bne.n	7038 <event_common_prepare+0x54>
	event_stop(0, 0, 0, (void *)STATE_ABORT);
    70d6:	2005      	movs	r0, #5
    70d8:	f7ff ff76 	bl	6fc8 <event_stop.constprop.49>
	if (_radio.ticks_active_to_start != _ticks_active_to_start) {
    70dc:	f8d6 3784 	ldr.w	r3, [r6, #1924]	; 0x784
    70e0:	429d      	cmp	r5, r3
    70e2:	d023      	beq.n	712c <event_common_prepare+0x148>
		*ticks_active_to_start = _radio.ticks_active_to_start;
    70e4:	f8cb 3000 	str.w	r3, [fp]
		if (*ticks_xtal_to_start & XON_BITMASK) {
    70e8:	f8d8 3000 	ldr.w	r3, [r8]
		ticker_status =
    70ec:	9705      	str	r7, [sp, #20]
		if (*ticks_xtal_to_start & XON_BITMASK) {
    70ee:	2b00      	cmp	r3, #0
			*ticks_xtal_to_start &= ~XON_BITMASK;
    70f0:	bfbc      	itt	lt
    70f2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    70f6:	f8c8 3000 	strlt.w	r3, [r8]
		ticks_to_start_new = (_radio.ticks_active_to_start <
    70fa:	f8d6 2784 	ldr.w	r2, [r6, #1924]	; 0x784
    70fe:	f8d8 1000 	ldr.w	r1, [r8]
    7102:	428a      	cmp	r2, r1
    7104:	bf38      	it	cc
    7106:	460a      	movcc	r2, r1
		ticker_status =
    7108:	f241 7141 	movw	r1, #5953	; 0x1741
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    710c:	b2a3      	uxth	r3, r4
    710e:	b292      	uxth	r2, r2
		ticker_status =
    7110:	9106      	str	r1, [sp, #24]
    7112:	2100      	movs	r1, #0
    7114:	9302      	str	r3, [sp, #8]
    7116:	9201      	str	r2, [sp, #4]
    7118:	9200      	str	r2, [sp, #0]
    711a:	9104      	str	r1, [sp, #16]
    711c:	9103      	str	r1, [sp, #12]
    711e:	4652      	mov	r2, sl
    7120:	4608      	mov	r0, r1
    7122:	f7fd fb13 	bl	474c <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    7126:	f030 0302 	bics.w	r3, r0, #2
    712a:	d185      	bne.n	7038 <event_common_prepare+0x54>
	packet_tx_enqueue(0xFF);
    712c:	20ff      	movs	r0, #255	; 0xff
    712e:	f7ff fabb 	bl	66a8 <packet_tx_enqueue>
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    7132:	4b0d      	ldr	r3, [pc, #52]	; (7168 <event_common_prepare+0x184>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    7134:	2201      	movs	r2, #1
    7136:	4611      	mov	r1, r2
    7138:	2000      	movs	r0, #0
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    713a:	f8c3 a008 	str.w	sl, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    713e:	f7fc fd01 	bl	3b44 <mayfly_enqueue>
		LL_ASSERT(!retval);
    7142:	b110      	cbz	r0, 714a <event_common_prepare+0x166>
    7144:	4a04      	ldr	r2, [pc, #16]	; (7158 <event_common_prepare+0x174>)
    7146:	4909      	ldr	r1, [pc, #36]	; (716c <event_common_prepare+0x188>)
    7148:	e778      	b.n	703c <event_common_prepare+0x58>
}
    714a:	b00d      	add	sp, #52	; 0x34
    714c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7150:	00006349 	.word	0x00006349
    7154:	000064fd 	.word	0x000064fd
    7158:	0000e3a4 	.word	0x0000e3a4
    715c:	0000e576 	.word	0x0000e576
    7160:	00006531 	.word	0x00006531
    7164:	200009f8 	.word	0x200009f8
    7168:	20005020 	.word	0x20005020
    716c:	0000e690 	.word	0x0000e690

00007170 <radio_event_adv_prepare>:
{
    7170:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    7172:	4a0f      	ldr	r2, [pc, #60]	; (71b0 <radio_event_adv_prepare+0x40>)
    7174:	7c13      	ldrb	r3, [r2, #16]
    7176:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    717a:	b153      	cbz	r3, 7192 <radio_event_adv_prepare+0x22>
    717c:	4a0d      	ldr	r2, [pc, #52]	; (71b4 <radio_event_adv_prepare+0x44>)
    717e:	490e      	ldr	r1, [pc, #56]	; (71b8 <radio_event_adv_prepare+0x48>)
    7180:	2003      	movs	r0, #3
    7182:	f7fb f835 	bl	21f0 <bt_log>
    7186:	4040      	eors	r0, r0
    7188:	f380 8811 	msr	BASEPRI, r0
    718c:	f04f 0004 	mov.w	r0, #4
    7190:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_ADV;
    7192:	2305      	movs	r3, #5
    7194:	7413      	strb	r3, [r2, #16]
	event_common_prepare(ticks_at_expire, remainder,
    7196:	9403      	str	r4, [sp, #12]
    7198:	4c08      	ldr	r4, [pc, #32]	; (71bc <radio_event_adv_prepare+0x4c>)
    719a:	9402      	str	r4, [sp, #8]
    719c:	9301      	str	r3, [sp, #4]
    719e:	6a13      	ldr	r3, [r2, #32]
    71a0:	9300      	str	r3, [sp, #0]
    71a2:	f102 031c 	add.w	r3, r2, #28
    71a6:	3218      	adds	r2, #24
    71a8:	f7ff ff1c 	bl	6fe4 <event_common_prepare>
}
    71ac:	b004      	add	sp, #16
    71ae:	bd10      	pop	{r4, pc}
    71b0:	200009f8 	.word	0x200009f8
    71b4:	0000e3c2 	.word	0x0000e3c2
    71b8:	0000ea02 	.word	0x0000ea02
    71bc:	00006ef1 	.word	0x00006ef1

000071c0 <radio_event_ext_adv_prepare>:
{
    71c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    71c2:	4a0f      	ldr	r2, [pc, #60]	; (7200 <radio_event_ext_adv_prepare+0x40>)
    71c4:	7c13      	ldrb	r3, [r2, #16]
    71c6:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    71ca:	b153      	cbz	r3, 71e2 <radio_event_ext_adv_prepare+0x22>
    71cc:	4a0d      	ldr	r2, [pc, #52]	; (7204 <radio_event_ext_adv_prepare+0x44>)
    71ce:	490e      	ldr	r1, [pc, #56]	; (7208 <radio_event_ext_adv_prepare+0x48>)
    71d0:	2003      	movs	r0, #3
    71d2:	f7fb f80d 	bl	21f0 <bt_log>
    71d6:	4040      	eors	r0, r0
    71d8:	f380 8811 	msr	BASEPRI, r0
    71dc:	f04f 0004 	mov.w	r0, #4
    71e0:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_EXT_ADV;
    71e2:	2308      	movs	r3, #8
    71e4:	7413      	strb	r3, [r2, #16]
	event_common_prepare(ticks_at_expire, remainder,
    71e6:	9403      	str	r4, [sp, #12]
    71e8:	4c08      	ldr	r4, [pc, #32]	; (720c <radio_event_ext_adv_prepare+0x4c>)
    71ea:	9402      	str	r4, [sp, #8]
    71ec:	9301      	str	r3, [sp, #4]
    71ee:	6a13      	ldr	r3, [r2, #32]
    71f0:	9300      	str	r3, [sp, #0]
    71f2:	f102 031c 	add.w	r3, r2, #28
    71f6:	3218      	adds	r2, #24
    71f8:	f7ff fef4 	bl	6fe4 <event_common_prepare>
}
    71fc:	b004      	add	sp, #16
    71fe:	bd10      	pop	{r4, pc}
    7200:	200009f8 	.word	0x200009f8
    7204:	0000e3da 	.word	0x0000e3da
    7208:	0000ea02 	.word	0x0000ea02
    720c:	00006d51 	.word	0x00006d51

00007210 <event_adv_stop>:
{
    7210:	b507      	push	{r0, r1, r2, lr}
	event_stop(0, 0, 0, (void *)STATE_ABORT);
    7212:	2005      	movs	r0, #5
    7214:	f7ff fed8 	bl	6fc8 <event_stop.constprop.49>
	ticker_status =
    7218:	f641 33ba 	movw	r3, #7098	; 0x1bba
    721c:	2100      	movs	r1, #0
    721e:	9300      	str	r3, [sp, #0]
    7220:	2205      	movs	r2, #5
    7222:	4b0a      	ldr	r3, [pc, #40]	; (724c <event_adv_stop+0x3c>)
    7224:	4608      	mov	r0, r1
    7226:	f7fd fadf 	bl	47e8 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    722a:	f030 0302 	bics.w	r3, r0, #2
    722e:	d00a      	beq.n	7246 <event_adv_stop+0x36>
    7230:	4a07      	ldr	r2, [pc, #28]	; (7250 <event_adv_stop+0x40>)
    7232:	4908      	ldr	r1, [pc, #32]	; (7254 <event_adv_stop+0x44>)
    7234:	2003      	movs	r0, #3
    7236:	f7fa ffdb 	bl	21f0 <bt_log>
    723a:	4040      	eors	r0, r0
    723c:	f380 8811 	msr	BASEPRI, r0
    7240:	f04f 0004 	mov.w	r0, #4
    7244:	df02      	svc	2
}
    7246:	b003      	add	sp, #12
    7248:	f85d fb04 	ldr.w	pc, [sp], #4
    724c:	00006965 	.word	0x00006965
    7250:	0000e44f 	.word	0x0000e44f
    7254:	0000e576 	.word	0x0000e576

00007258 <mayfly_xtal_stop_calc>:
{
    7258:	b570      	push	{r4, r5, r6, lr}
    725a:	b08e      	sub	sp, #56	; 0x38
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    725c:	2302      	movs	r3, #2
    725e:	9309      	str	r3, [sp, #36]	; 0x24
	ticker_id_next = 0xff;
    7260:	22ff      	movs	r2, #255	; 0xff
	struct connection *conn_curr = NULL;
    7262:	2300      	movs	r3, #0
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    7264:	4e78      	ldr	r6, [pc, #480]	; (7448 <mayfly_xtal_stop_calc+0x1f0>)
				    _radio.connection_count));
    7266:	4d79      	ldr	r5, [pc, #484]	; (744c <mayfly_xtal_stop_calc+0x1f4>)
	struct connection *conn_curr = NULL;
    7268:	930a      	str	r3, [sp, #40]	; 0x28
{
    726a:	4604      	mov	r4, r0
	struct connection *conn_next = NULL;
    726c:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker_id_next = 0xff;
    726e:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
	ticks_to_expire = 0;
    7272:	930c      	str	r3, [sp, #48]	; 0x30
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    7274:	ab09      	add	r3, sp, #36	; 0x24
    7276:	9302      	str	r3, [sp, #8]
    7278:	ab0c      	add	r3, sp, #48	; 0x30
    727a:	9300      	str	r3, [sp, #0]
    727c:	9601      	str	r6, [sp, #4]
    727e:	ab0d      	add	r3, sp, #52	; 0x34
    7280:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    7284:	2101      	movs	r1, #1
    7286:	2000      	movs	r0, #0
    7288:	f7fd faea 	bl	4860 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    728c:	2802      	cmp	r0, #2
    728e:	d010      	beq.n	72b2 <mayfly_xtal_stop_calc+0x5a>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    7290:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7292:	b193      	cbz	r3, 72ba <mayfly_xtal_stop_calc+0x62>
    7294:	4a6e      	ldr	r2, [pc, #440]	; (7450 <mayfly_xtal_stop_calc+0x1f8>)
    7296:	496f      	ldr	r1, [pc, #444]	; (7454 <mayfly_xtal_stop_calc+0x1fc>)
	LL_ASSERT(hdr_curr);
    7298:	2003      	movs	r0, #3
    729a:	f7fa ffa9 	bl	21f0 <bt_log>
    729e:	4040      	eors	r0, r0
    72a0:	f380 8811 	msr	BASEPRI, r0
    72a4:	f04f 0004 	mov.w	r0, #4
    72a8:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    72aa:	2101      	movs	r1, #1
    72ac:	2000      	movs	r0, #0
    72ae:	f7fd fb55 	bl	495c <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    72b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    72b4:	2b02      	cmp	r3, #2
    72b6:	d0f8      	beq.n	72aa <mayfly_xtal_stop_calc+0x52>
    72b8:	e7ea      	b.n	7290 <mayfly_xtal_stop_calc+0x38>
	} while (ticker_id_next != TICKER_NULL &&
    72ba:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				    _radio.connection_count));
    72be:	2bff      	cmp	r3, #255	; 0xff
    72c0:	d004      	beq.n	72cc <mayfly_xtal_stop_calc+0x74>
    72c2:	f895 2718 	ldrb.w	r2, [r5, #1816]	; 0x718
		 ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    72c6:	3207      	adds	r2, #7
	} while (ticker_id_next != TICKER_NULL &&
    72c8:	4293      	cmp	r3, r2
    72ca:	dad3      	bge.n	7274 <mayfly_xtal_stop_calc+0x1c>
	if ((ticker_id_next == TICKER_NULL) ||
    72cc:	1f5a      	subs	r2, r3, #5
    72ce:	b2d2      	uxtb	r2, r2
    72d0:	2af9      	cmp	r2, #249	; 0xf9
    72d2:	d805      	bhi.n	72e0 <mayfly_xtal_stop_calc+0x88>
				_radio.connection_count))) {
    72d4:	4a5d      	ldr	r2, [pc, #372]	; (744c <mayfly_xtal_stop_calc+0x1f4>)
    72d6:	f892 2718 	ldrb.w	r2, [r2, #1816]	; 0x718
	    (ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    72da:	3207      	adds	r2, #7
	    (ticker_id_next < RADIO_TICKER_ID_ADV) ||
    72dc:	4293      	cmp	r3, r2
    72de:	db04      	blt.n	72ea <mayfly_xtal_stop_calc+0x92>
    72e0:	2001      	movs	r0, #1
    72e2:	f7ff f8df 	bl	64a4 <mayfly_xtal_retain.part.15>
}
    72e6:	b00e      	add	sp, #56	; 0x38
    72e8:	bd70      	pop	{r4, r5, r6, pc}
	hdr_curr = hdr_conn_get(ticker_id_curr, &conn_curr);
    72ea:	a90a      	add	r1, sp, #40	; 0x28
    72ec:	b2e0      	uxtb	r0, r4
    72ee:	f7ff f8ab 	bl	6448 <hdr_conn_get>
	LL_ASSERT(hdr_curr);
    72f2:	b910      	cbnz	r0, 72fa <mayfly_xtal_stop_calc+0xa2>
    72f4:	4a56      	ldr	r2, [pc, #344]	; (7450 <mayfly_xtal_stop_calc+0x1f8>)
    72f6:	4958      	ldr	r1, [pc, #352]	; (7458 <mayfly_xtal_stop_calc+0x200>)
    72f8:	e7ce      	b.n	7298 <mayfly_xtal_stop_calc+0x40>
	if (hdr_curr->ticks_xtal_to_start & XON_BITMASK) {
    72fa:	6803      	ldr	r3, [r0, #0]
    72fc:	6844      	ldr	r4, [r0, #4]
    72fe:	2b00      	cmp	r3, #0
		ticks_slot_abs = (hdr_curr->ticks_active_to_start >
    7300:	bfb8      	it	lt
    7302:	6883      	ldrlt	r3, [r0, #8]
		ticks_slot_abs = (hdr_curr->ticks_active_to_start >
    7304:	429c      	cmp	r4, r3
    7306:	bf38      	it	cc
    7308:	461c      	movcc	r4, r3
	ticks_slot_abs += hdr_curr->ticks_slot;
    730a:	68c3      	ldr	r3, [r0, #12]
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    730c:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    7310:	a90b      	add	r1, sp, #44	; 0x2c
	ticks_slot_abs += hdr_curr->ticks_slot;
    7312:	441c      	add	r4, r3
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    7314:	f7ff f898 	bl	6448 <hdr_conn_get>
	LL_ASSERT(hdr_next);
    7318:	4605      	mov	r5, r0
    731a:	b910      	cbnz	r0, 7322 <mayfly_xtal_stop_calc+0xca>
    731c:	4a4c      	ldr	r2, [pc, #304]	; (7450 <mayfly_xtal_stop_calc+0x1f8>)
    731e:	494f      	ldr	r1, [pc, #316]	; (745c <mayfly_xtal_stop_calc+0x204>)
    7320:	e7ba      	b.n	7298 <mayfly_xtal_stop_calc+0x40>
	ticks_prepare_to_start_next = (hdr_next->ticks_active_to_start >
    7322:	6886      	ldr	r6, [r0, #8]
    7324:	6843      	ldr	r3, [r0, #4]
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
    7326:	6802      	ldr	r2, [r0, #0]
	ticks_prepare_to_start_next = (hdr_next->ticks_active_to_start >
    7328:	429e      	cmp	r6, r3
    732a:	bf38      	it	cc
    732c:	461e      	movcc	r6, r3
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
    732e:	2a00      	cmp	r2, #0
    7330:	da05      	bge.n	733e <mayfly_xtal_stop_calc+0xe6>
		ticks_to_expire -=
    7332:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			(hdr_next->ticks_xtal_to_start &
    7334:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
		ticks_to_expire -=
    7338:	4433      	add	r3, r6
    733a:	1a9b      	subs	r3, r3, r2
    733c:	930c      	str	r3, [sp, #48]	; 0x30
	if (ticks_to_expire >
    733e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	    (ticks_slot_abs +
    7340:	f104 0331 	add.w	r3, r4, #49	; 0x31
	if (ticks_to_expire >
    7344:	4293      	cmp	r3, r2
    7346:	d209      	bcs.n	735c <mayfly_xtal_stop_calc+0x104>
    7348:	2001      	movs	r0, #1
    734a:	f7ff f8ab 	bl	64a4 <mayfly_xtal_retain.part.15>
		prepare_normal_set(hdr_next, RADIO_TICKER_USER_ID_JOB,
    734e:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    7352:	2101      	movs	r1, #1
    7354:	4628      	mov	r0, r5
    7356:	f7ff fcad 	bl	6cb4 <prepare_normal_set>
    735a:	e7c4      	b.n	72e6 <mayfly_xtal_stop_calc+0x8e>
		if (!s_xtal_retained) {
    735c:	4b40      	ldr	r3, [pc, #256]	; (7460 <mayfly_xtal_stop_calc+0x208>)
    735e:	781a      	ldrb	r2, [r3, #0]
    7360:	b94a      	cbnz	r2, 7376 <mayfly_xtal_stop_calc+0x11e>
			s_xtal_retained = 1;
    7362:	2001      	movs	r0, #1
    7364:	7018      	strb	r0, [r3, #0]
			retval = mayfly_enqueue(caller_id,
    7366:	4611      	mov	r1, r2
    7368:	4b3e      	ldr	r3, [pc, #248]	; (7464 <mayfly_xtal_stop_calc+0x20c>)
    736a:	f7fc fbeb 	bl	3b44 <mayfly_enqueue>
			LL_ASSERT(!retval);
    736e:	b110      	cbz	r0, 7376 <mayfly_xtal_stop_calc+0x11e>
    7370:	4a3d      	ldr	r2, [pc, #244]	; (7468 <mayfly_xtal_stop_calc+0x210>)
    7372:	493e      	ldr	r1, [pc, #248]	; (746c <mayfly_xtal_stop_calc+0x214>)
    7374:	e790      	b.n	7298 <mayfly_xtal_stop_calc+0x40>
		if (!(hdr_next->ticks_xtal_to_start & XON_BITMASK) &&
    7376:	682b      	ldr	r3, [r5, #0]
    7378:	2b00      	cmp	r3, #0
    737a:	db17      	blt.n	73ac <mayfly_xtal_stop_calc+0x154>
    737c:	429e      	cmp	r6, r3
    737e:	d215      	bcs.n	73ac <mayfly_xtal_stop_calc+0x154>
			u32_t ticks_drift_plus = hdr_next->ticks_xtal_to_start -
    7380:	1b9b      	subs	r3, r3, r6
			ticker_status =
    7382:	2000      	movs	r0, #0
				ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    7384:	b29b      	uxth	r3, r3
			ticker_status =
    7386:	493a      	ldr	r1, [pc, #232]	; (7470 <mayfly_xtal_stop_calc+0x218>)
    7388:	9105      	str	r1, [sp, #20]
    738a:	9302      	str	r3, [sp, #8]
    738c:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    7390:	9506      	str	r5, [sp, #24]
    7392:	9004      	str	r0, [sp, #16]
    7394:	9003      	str	r0, [sp, #12]
    7396:	9001      	str	r0, [sp, #4]
    7398:	9000      	str	r0, [sp, #0]
    739a:	2101      	movs	r1, #1
    739c:	f7fd f9d6 	bl	474c <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    73a0:	f030 0302 	bics.w	r3, r0, #2
    73a4:	d002      	beq.n	73ac <mayfly_xtal_stop_calc+0x154>
    73a6:	4a2a      	ldr	r2, [pc, #168]	; (7450 <mayfly_xtal_stop_calc+0x1f8>)
    73a8:	4932      	ldr	r1, [pc, #200]	; (7474 <mayfly_xtal_stop_calc+0x21c>)
    73aa:	e775      	b.n	7298 <mayfly_xtal_stop_calc+0x40>
		if (!conn_curr || !conn_next) {
    73ac:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    73ae:	2e00      	cmp	r6, #0
    73b0:	d099      	beq.n	72e6 <mayfly_xtal_stop_calc+0x8e>
    73b2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    73b4:	2d00      	cmp	r5, #0
    73b6:	d096      	beq.n	72e6 <mayfly_xtal_stop_calc+0x8e>
		if (conn_curr->conn_interval == conn_next->conn_interval) {
    73b8:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
    73ba:	8caa      	ldrh	r2, [r5, #36]	; 0x24
    73bc:	429a      	cmp	r2, r3
    73be:	d192      	bne.n	72e6 <mayfly_xtal_stop_calc+0x8e>
			u32_t ticks_conn_interval = HAL_TICKER_US_TO_TICKS(
    73c0:	482d      	ldr	r0, [pc, #180]	; (7478 <mayfly_xtal_stop_calc+0x220>)
    73c2:	b292      	uxth	r2, r2
    73c4:	fba2 0100 	umull	r0, r1, r2, r0
    73c8:	f240 1323 	movw	r3, #291	; 0x123
    73cc:	fb03 1102 	mla	r1, r3, r2, r1
    73d0:	a31b      	add	r3, pc, #108	; (adr r3, 7440 <mayfly_xtal_stop_calc+0x1e8>)
    73d2:	e9d3 2300 	ldrd	r2, r3, [r3]
    73d6:	f7f8 ff47 	bl	268 <__aeabi_uldivmod>
    73da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    73dc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			while (ticks_to_expire > ticks_conn_interval) {
    73e0:	2200      	movs	r2, #0
    73e2:	4298      	cmp	r0, r3
    73e4:	d318      	bcc.n	7418 <mayfly_xtal_stop_calc+0x1c0>
    73e6:	b102      	cbz	r2, 73ea <mayfly_xtal_stop_calc+0x192>
    73e8:	930c      	str	r3, [sp, #48]	; 0x30
			if (conn_curr->role && !conn_next->role &&
    73ea:	f996 201d 	ldrsb.w	r2, [r6, #29]
    73ee:	2a00      	cmp	r2, #0
    73f0:	f995 201d 	ldrsb.w	r2, [r5, #29]
    73f4:	da13      	bge.n	741e <mayfly_xtal_stop_calc+0x1c6>
    73f6:	2a00      	cmp	r2, #0
    73f8:	f6ff af75 	blt.w	72e6 <mayfly_xtal_stop_calc+0x8e>
			     (ticks_slot_abs +
    73fc:	3414      	adds	r4, #20
			if (conn_curr->role && !conn_next->role &&
    73fe:	429c      	cmp	r4, r3
    7400:	f67f af71 	bls.w	72e6 <mayfly_xtal_stop_calc+0x8e>
				status = conn_update_req(conn_curr);
    7404:	4630      	mov	r0, r6
    7406:	f7fe fab9 	bl	597c <conn_update_req>
				if (status == 2) {
    740a:	2802      	cmp	r0, #2
    740c:	f47f af6b 	bne.w	72e6 <mayfly_xtal_stop_calc+0x8e>
					conn_update_req(conn_next);
    7410:	980b      	ldr	r0, [sp, #44]	; 0x2c
					conn_update_req(conn_curr);
    7412:	f7fe fab3 	bl	597c <conn_update_req>
    7416:	e766      	b.n	72e6 <mayfly_xtal_stop_calc+0x8e>
				ticks_to_expire -= ticks_conn_interval;
    7418:	1a1b      	subs	r3, r3, r0
    741a:	2201      	movs	r2, #1
    741c:	e7e1      	b.n	73e2 <mayfly_xtal_stop_calc+0x18a>
			} else if (!conn_curr->role && conn_next->role &&
    741e:	2a00      	cmp	r2, #0
    7420:	f6bf af61 	bge.w	72e6 <mayfly_xtal_stop_calc+0x8e>
				    (ticks_slot_abs +
    7424:	3414      	adds	r4, #20
			} else if (!conn_curr->role && conn_next->role &&
    7426:	429c      	cmp	r4, r3
    7428:	f67f af5d 	bls.w	72e6 <mayfly_xtal_stop_calc+0x8e>
				status = conn_update_req(conn_next);
    742c:	4628      	mov	r0, r5
    742e:	f7fe faa5 	bl	597c <conn_update_req>
				if (status == 2) {
    7432:	2802      	cmp	r0, #2
    7434:	f47f af57 	bne.w	72e6 <mayfly_xtal_stop_calc+0x8e>
					conn_update_req(conn_curr);
    7438:	980a      	ldr	r0, [sp, #40]	; 0x28
    743a:	e7ea      	b.n	7412 <mayfly_xtal_stop_calc+0x1ba>
    743c:	f3af 8000 	nop.w
    7440:	1afd498d 	.word	0x1afd498d
    7444:	00000007 	.word	0x00000007
    7448:	000058f1 	.word	0x000058f1
    744c:	200009f8 	.word	0x200009f8
    7450:	0000e331 	.word	0x0000e331
    7454:	0000ebd3 	.word	0x0000ebd3
    7458:	0000e92c 	.word	0x0000e92c
    745c:	0000e94a 	.word	0x0000e94a
    7460:	20001224 	.word	0x20001224
    7464:	20004fd0 	.word	0x20004fd0
    7468:	0000e30b 	.word	0x0000e30b
    746c:	0000e690 	.word	0x0000e690
    7470:	000058f5 	.word	0x000058f5
    7474:	0000e576 	.word	0x0000e576
    7478:	09ce5400 	.word	0x09ce5400

0000747c <packet_rx_allocate.constprop.51>:
static void packet_rx_allocate(u8_t max)
    747c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (max > _radio.link_rx_data_quota) {
    7480:	4d21      	ldr	r5, [pc, #132]	; (7508 <packet_rx_allocate.constprop.51+0x8c>)
	acquire = _radio.packet_rx_acquire + 1;
    7482:	f895 4742 	ldrb.w	r4, [r5, #1858]	; 0x742
	if (acquire == _radio.packet_rx_count) {
    7486:	f895 3740 	ldrb.w	r3, [r5, #1856]	; 0x740
	if (max > _radio.link_rx_data_quota) {
    748a:	f895 9754 	ldrb.w	r9, [r5, #1876]	; 0x754
	acquire = _radio.packet_rx_acquire + 1;
    748e:	3401      	adds	r4, #1
    7490:	b2e4      	uxtb	r4, r4
		acquire = 0;
    7492:	42a3      	cmp	r3, r4
    7494:	bf08      	it	eq
    7496:	2400      	moveq	r4, #0
		link = mem_acquire(&_radio.link_rx_free);
    7498:	f505 67e9 	add.w	r7, r5, #1864	; 0x748
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    749c:	f505 68e6 	add.w	r8, r5, #1840	; 0x730
	while ((max--) && (acquire != _radio.packet_rx_last)) {
    74a0:	f1b9 0f00 	cmp.w	r9, #0
    74a4:	d003      	beq.n	74ae <packet_rx_allocate.constprop.51+0x32>
    74a6:	f895 3741 	ldrb.w	r3, [r5, #1857]	; 0x741
    74aa:	429c      	cmp	r4, r3
    74ac:	d101      	bne.n	74b2 <packet_rx_allocate.constprop.51+0x36>
    74ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		link = mem_acquire(&_radio.link_rx_free);
    74b2:	4638      	mov	r0, r7
    74b4:	f7fc fa8d 	bl	39d2 <mem_acquire>
		if (!link) {
    74b8:	4606      	mov	r6, r0
    74ba:	2800      	cmp	r0, #0
    74bc:	d0f7      	beq.n	74ae <packet_rx_allocate.constprop.51+0x32>
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    74be:	4640      	mov	r0, r8
    74c0:	f7fc fa87 	bl	39d2 <mem_acquire>
		if (!node_rx) {
    74c4:	b928      	cbnz	r0, 74d2 <packet_rx_allocate.constprop.51+0x56>
			mem_release(link, &_radio.link_rx_free);
    74c6:	4630      	mov	r0, r6
    74c8:	4910      	ldr	r1, [pc, #64]	; (750c <packet_rx_allocate.constprop.51+0x90>)
}
    74ca:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			mem_release(link, &_radio.link_rx_free);
    74ce:	f7fc ba9a 	b.w	3a06 <mem_release>
		node_rx->hdr.onion.link = link;
    74d2:	6006      	str	r6, [r0, #0]
		_radio.packet_rx[_radio.packet_rx_acquire] = node_rx;
    74d4:	f895 2742 	ldrb.w	r2, [r5, #1858]	; 0x742
    74d8:	f8d5 373c 	ldr.w	r3, [r5, #1852]	; 0x73c
    74dc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
		_radio.packet_rx_acquire = acquire;
    74e0:	f885 4742 	strb.w	r4, [r5, #1858]	; 0x742
		if (acquire == _radio.packet_rx_count) {
    74e4:	f895 3740 	ldrb.w	r3, [r5, #1856]	; 0x740
		acquire = _radio.packet_rx_acquire + 1;
    74e8:	3401      	adds	r4, #1
    74ea:	b2e4      	uxtb	r4, r4
			acquire = 0;
    74ec:	42a3      	cmp	r3, r4
    74ee:	bf08      	it	eq
    74f0:	2400      	moveq	r4, #0
		_radio.link_rx_data_quota--;
    74f2:	f895 3754 	ldrb.w	r3, [r5, #1876]	; 0x754
    74f6:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    74fa:	3b01      	subs	r3, #1
    74fc:	f885 3754 	strb.w	r3, [r5, #1876]	; 0x754
    7500:	fa5f f989 	uxtb.w	r9, r9
    7504:	e7cc      	b.n	74a0 <packet_rx_allocate.constprop.51+0x24>
    7506:	bf00      	nop
    7508:	200009f8 	.word	0x200009f8
    750c:	20001140 	.word	0x20001140

00007510 <common_init>:
{
    7510:	b510      	push	{r4, lr}
	if (_radio.connection_count) {
    7512:	4c31      	ldr	r4, [pc, #196]	; (75d8 <common_init+0xc8>)
    7514:	f894 2718 	ldrb.w	r2, [r4, #1816]	; 0x718
    7518:	2a00      	cmp	r2, #0
    751a:	d03c      	beq.n	7596 <common_init+0x86>
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
    751c:	f204 7314 	addw	r3, r4, #1812	; 0x714
    7520:	f44f 7182 	mov.w	r1, #260	; 0x104
    7524:	f8d4 0710 	ldr.w	r0, [r4, #1808]	; 0x710
    7528:	f7fc fa2c 	bl	3984 <mem_init>
	mem_init(_radio.pkt_rx_data_pool,
    752c:	4b2b      	ldr	r3, [pc, #172]	; (75dc <common_init+0xcc>)
    752e:	f894 273a 	ldrb.w	r2, [r4, #1850]	; 0x73a
    7532:	f8b4 1738 	ldrh.w	r1, [r4, #1848]	; 0x738
    7536:	f8d4 072c 	ldr.w	r0, [r4, #1836]	; 0x72c
    753a:	f7fc fa23 	bl	3984 <mem_init>
		 (_radio.packet_rx_count + _radio.connection_count),
    753e:	f894 1740 	ldrb.w	r1, [r4, #1856]	; 0x740
    7542:	f894 2718 	ldrb.w	r2, [r4, #1816]	; 0x718
	mem_init(_radio.link_rx_pool, (sizeof(memq_link_t)),
    7546:	4b26      	ldr	r3, [pc, #152]	; (75e0 <common_init+0xd0>)
    7548:	f8d4 0744 	ldr.w	r0, [r4, #1860]	; 0x744
    754c:	440a      	add	r2, r1
    754e:	2108      	movs	r1, #8
    7550:	f7fc fa18 	bl	3984 <mem_init>
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
    7554:	4b23      	ldr	r3, [pc, #140]	; (75e4 <common_init+0xd4>)
    7556:	f8d4 0758 	ldr.w	r0, [r4, #1880]	; 0x758
    755a:	2202      	movs	r2, #2
    755c:	2124      	movs	r1, #36	; 0x24
    755e:	f7fc fa11 	bl	3984 <mem_init>
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
    7562:	f894 2774 	ldrb.w	r2, [r4, #1908]	; 0x774
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
    7566:	f8d4 0760 	ldr.w	r0, [r4, #1888]	; 0x760
    756a:	4b1f      	ldr	r3, [pc, #124]	; (75e8 <common_init+0xd8>)
    756c:	f8b4 1768 	ldrh.w	r1, [r4, #1896]	; 0x768
    7570:	3a01      	subs	r2, #1
    7572:	b292      	uxth	r2, r2
    7574:	f7fc fa06 	bl	3984 <mem_init>
	link = mem_acquire(&_radio.link_rx_free);
    7578:	4819      	ldr	r0, [pc, #100]	; (75e0 <common_init+0xd0>)
    757a:	f7fc fa2a 	bl	39d2 <mem_acquire>
	LL_ASSERT(link);
    757e:	b968      	cbnz	r0, 759c <common_init+0x8c>
    7580:	4a1a      	ldr	r2, [pc, #104]	; (75ec <common_init+0xdc>)
    7582:	491b      	ldr	r1, [pc, #108]	; (75f0 <common_init+0xe0>)
    7584:	2003      	movs	r0, #3
    7586:	f7fa fe33 	bl	21f0 <bt_log>
    758a:	4040      	eors	r0, r0
    758c:	f380 8811 	msr	BASEPRI, r0
    7590:	f04f 0004 	mov.w	r0, #4
    7594:	df02      	svc	2
		_radio.conn_free = NULL;
    7596:	f8c4 2714 	str.w	r2, [r4, #1812]	; 0x714
    759a:	e7c7      	b.n	752c <common_init+0x1c>
	memq_init(link, &_radio.link_rx_head, (void *)&_radio.link_rx_tail);
    759c:	4a15      	ldr	r2, [pc, #84]	; (75f4 <common_init+0xe4>)
    759e:	1f11      	subs	r1, r2, #4
    75a0:	f7fc fa5d 	bl	3a5e <memq_init>
	_radio.advertiser.chan_map = 0x07;
    75a4:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    75a8:	f043 0370 	orr.w	r3, r3, #112	; 0x70
    75ac:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	_radio.data_chan_map[0] = 0xFF;
    75b0:	23ff      	movs	r3, #255	; 0xff
    75b2:	f884 3722 	strb.w	r3, [r4, #1826]	; 0x722
	_radio.data_chan_map[1] = 0xFF;
    75b6:	f884 3723 	strb.w	r3, [r4, #1827]	; 0x723
	_radio.data_chan_map[2] = 0xFF;
    75ba:	f884 3724 	strb.w	r3, [r4, #1828]	; 0x724
	_radio.data_chan_map[3] = 0xFF;
    75be:	f884 3725 	strb.w	r3, [r4, #1829]	; 0x725
	_radio.data_chan_map[4] = 0x1F;
    75c2:	231f      	movs	r3, #31
    75c4:	f884 3726 	strb.w	r3, [r4, #1830]	; 0x726
	_radio.data_chan_count = 37;
    75c8:	2325      	movs	r3, #37	; 0x25
    75ca:	f884 3727 	strb.w	r3, [r4, #1831]	; 0x727
}
    75ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	packet_rx_allocate(0xFF);
    75d2:	f7ff bf53 	b.w	747c <packet_rx_allocate.constprop.51>
    75d6:	bf00      	nop
    75d8:	200009f8 	.word	0x200009f8
    75dc:	20001128 	.word	0x20001128
    75e0:	20001140 	.word	0x20001140
    75e4:	20001154 	.word	0x20001154
    75e8:	2000115c 	.word	0x2000115c
    75ec:	0000e1bb 	.word	0x0000e1bb
    75f0:	0000e9af 	.word	0x0000e9af
    75f4:	20001148 	.word	0x20001148

000075f8 <mayfly_xtal_start>:
	clock_control_on(_radio.hf_clock, NULL);
    75f8:	4b02      	ldr	r3, [pc, #8]	; (7604 <mayfly_xtal_start+0xc>)
    75fa:	6818      	ldr	r0, [r3, #0]
    75fc:	6843      	ldr	r3, [r0, #4]
    75fe:	2100      	movs	r1, #0
    7600:	681b      	ldr	r3, [r3, #0]
    7602:	4718      	bx	r3
    7604:	200009f8 	.word	0x200009f8

00007608 <mayfly_xtal_stop>:
	clock_control_off(_radio.hf_clock, NULL);
    7608:	4b02      	ldr	r3, [pc, #8]	; (7614 <mayfly_xtal_stop+0xc>)
    760a:	6818      	ldr	r0, [r3, #0]
static inline int clock_control_off(struct device *dev,
				    clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->off(dev, sys);
    760c:	6843      	ldr	r3, [r0, #4]
    760e:	2100      	movs	r1, #0
    7610:	685b      	ldr	r3, [r3, #4]
    7612:	4718      	bx	r3
    7614:	200009f8 	.word	0x200009f8

00007618 <chan_sel_2>:
{
    7618:	b5f0      	push	{r4, r5, r6, r7, lr}
	prn_e = counter ^ chan_id;
    761a:	4048      	eors	r0, r1
    761c:	2703      	movs	r7, #3
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    761e:	ea4f 2e10 	mov.w	lr, r0, lsr #8
    7622:	2608      	movs	r6, #8
	o = 0;
    7624:	2400      	movs	r4, #0
		o |= (i & 1);
    7626:	f00e 0501 	and.w	r5, lr, #1
    762a:	3e01      	subs	r6, #1
    762c:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
	for (iterate = 0; iterate < 8; iterate++) {
    7630:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
		o |= (i & 1);
    7634:	b2ec      	uxtb	r4, r5
		i >>= 1;
    7636:	ea4f 0e5e 	mov.w	lr, lr, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
    763a:	d1f4      	bne.n	7626 <chan_sel_2+0xe>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    763c:	0225      	lsls	r5, r4, #8
    763e:	b22d      	sxth	r5, r5
    7640:	b2c0      	uxtb	r0, r0
    7642:	f04f 0e08 	mov.w	lr, #8
	o = 0;
    7646:	4634      	mov	r4, r6
		o |= (i & 1);
    7648:	f000 0601 	and.w	r6, r0, #1
    764c:	ea46 0444 	orr.w	r4, r6, r4, lsl #1
    7650:	f10e 36ff 	add.w	r6, lr, #4294967295	; 0xffffffff
	for (iterate = 0; iterate < 8; iterate++) {
    7654:	f016 0eff 	ands.w	lr, r6, #255	; 0xff
		o |= (i & 1);
    7658:	b2e4      	uxtb	r4, r4
		i >>= 1;
    765a:	ea4f 0050 	mov.w	r0, r0, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
    765e:	d1f3      	bne.n	7648 <chan_sel_2+0x30>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    7660:	432c      	orrs	r4, r5
	return ((u32_t)a * 17 + b) & 0xFFFF;
    7662:	eb04 1404 	add.w	r4, r4, r4, lsl #4
    7666:	3f01      	subs	r7, #1
    7668:	440c      	add	r4, r1
	for (iterate = 0; iterate < 3; iterate++) {
    766a:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
	return ((u32_t)a * 17 + b) & 0xFFFF;
    766e:	b2a0      	uxth	r0, r4
	for (iterate = 0; iterate < 3; iterate++) {
    7670:	d1d5      	bne.n	761e <chan_sel_2+0x6>
	chan_next = prn_e % 37;
    7672:	2425      	movs	r4, #37	; 0x25
	prn_e ^= chan_id;
    7674:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
    7676:	fbb1 f0f4 	udiv	r0, r1, r4
    767a:	fb04 1010 	mls	r0, r4, r0, r1
    767e:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    7680:	08c4      	lsrs	r4, r0, #3
    7682:	f000 0507 	and.w	r5, r0, #7
    7686:	5d14      	ldrb	r4, [r2, r4]
    7688:	412c      	asrs	r4, r5
    768a:	07e4      	lsls	r4, r4, #31
    768c:	d407      	bmi.n	769e <chan_sel_2+0x86>
		chan_index = ((u32_t)chan_count * prn_e) >> 16;
    768e:	4359      	muls	r1, r3
		chan_next = chan_sel_remap(chan_map, chan_index);
    7690:	f3c1 4107 	ubfx	r1, r1, #16, #8
    7694:	4610      	mov	r0, r2
}
    7696:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		chan_next = chan_sel_remap(chan_map, chan_index);
    769a:	f7fe b937 	b.w	590c <chan_sel_remap>
}
    769e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000076a0 <ctrl_tx_enqueue>:
{
    76a0:	b510      	push	{r4, lr}
	    !conn->empty &&
    76a2:	f890 40a8 	ldrb.w	r4, [r0, #168]	; 0xa8
    76a6:	f8d0 20f0 	ldr.w	r2, [r0, #240]	; 0xf0
	if (
    76aa:	f014 0f80 	tst.w	r4, #128	; 0x80
    76ae:	d118      	bne.n	76e2 <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
    76b0:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
	    !conn->empty &&
    76b4:	b1ab      	cbz	r3, 76e2 <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
    76b6:	0724      	lsls	r4, r4, #28
    76b8:	d413      	bmi.n	76e2 <ctrl_tx_enqueue+0x42>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    76ba:	f8d0 40f8 	ldr.w	r4, [r0, #248]	; 0xf8
    76be:	42a3      	cmp	r3, r4
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    76c0:	bf04      	itt	eq
    76c2:	681c      	ldreq	r4, [r3, #0]
    76c4:	f8c0 40f8 	streq.w	r4, [r0, #248]	; 0xf8
		if (!conn->pkt_tx_ctrl) {
    76c8:	b992      	cbnz	r2, 76f0 <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head->next;
    76ca:	681a      	ldr	r2, [r3, #0]
    76cc:	600a      	str	r2, [r1, #0]
			conn->pkt_tx_head->next = node_tx;
    76ce:	6019      	str	r1, [r3, #0]
			conn->pkt_tx_ctrl = node_tx;
    76d0:	f8c0 10f0 	str.w	r1, [r0, #240]	; 0xf0
	conn->pkt_tx_ctrl_last = node_tx;
    76d4:	f8c0 10f4 	str.w	r1, [r0, #244]	; 0xf4
	if (node_tx->next == 0) {
    76d8:	680b      	ldr	r3, [r1, #0]
    76da:	b90b      	cbnz	r3, 76e0 <ctrl_tx_enqueue+0x40>
		conn->pkt_tx_last = node_tx;
    76dc:	f8c0 10fc 	str.w	r1, [r0, #252]	; 0xfc
    76e0:	bd10      	pop	{r4, pc}
		if (!conn->pkt_tx_ctrl) {
    76e2:	b92a      	cbnz	r2, 76f0 <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head;
    76e4:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
    76e8:	600b      	str	r3, [r1, #0]
			conn->pkt_tx_head = node_tx;
    76ea:	f8c0 10ec 	str.w	r1, [r0, #236]	; 0xec
    76ee:	e7ef      	b.n	76d0 <ctrl_tx_enqueue+0x30>
	node_tx->next = conn->pkt_tx_ctrl_last->next;
    76f0:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
    76f4:	681a      	ldr	r2, [r3, #0]
    76f6:	600a      	str	r2, [r1, #0]
	conn->pkt_tx_ctrl_last->next = node_tx;
    76f8:	6019      	str	r1, [r3, #0]
    76fa:	e7eb      	b.n	76d4 <ctrl_tx_enqueue+0x34>

000076fc <ctrl_tx_sec_enqueue>:
{
    76fc:	b410      	push	{r4}
	if (conn->pause_tx) {
    76fe:	f890 40a8 	ldrb.w	r4, [r0, #168]	; 0xa8
    7702:	0724      	lsls	r4, r4, #28
{
    7704:	460a      	mov	r2, r1
	if (conn->pause_tx) {
    7706:	d50f      	bpl.n	7728 <ctrl_tx_sec_enqueue+0x2c>
		if (!conn->pkt_tx_ctrl) {
    7708:	f8d0 10f0 	ldr.w	r1, [r0, #240]	; 0xf0
    770c:	b931      	cbnz	r1, 771c <ctrl_tx_sec_enqueue+0x20>
			node_tx->next = conn->pkt_tx_head;
    770e:	f8d0 10ec 	ldr.w	r1, [r0, #236]	; 0xec
    7712:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_head = node_tx;
    7714:	f8c0 20ec 	str.w	r2, [r0, #236]	; 0xec
}
    7718:	bc10      	pop	{r4}
    771a:	4770      	bx	lr
			node_tx->next = conn->pkt_tx_ctrl_last->next;
    771c:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
    7720:	6819      	ldr	r1, [r3, #0]
    7722:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_ctrl_last->next = node_tx;
    7724:	601a      	str	r2, [r3, #0]
    7726:	e7f7      	b.n	7718 <ctrl_tx_sec_enqueue+0x1c>
}
    7728:	bc10      	pop	{r4}
		ctrl_tx_enqueue(conn, node_tx);
    772a:	f7ff bfb9 	b.w	76a0 <ctrl_tx_enqueue>
	...

00007730 <feature_rsp_send>:
{
    7730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    7732:	4f21      	ldr	r7, [pc, #132]	; (77b8 <feature_rsp_send+0x88>)
{
    7734:	4605      	mov	r5, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    7736:	f207 705c 	addw	r0, r7, #1884	; 0x75c
{
    773a:	460e      	mov	r6, r1
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    773c:	f7fc f949 	bl	39d2 <mem_acquire>
	if (!node_tx) {
    7740:	4604      	mov	r4, r0
    7742:	b3b0      	cbz	r0, 77b2 <feature_rsp_send+0x82>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    7744:	7933      	ldrb	r3, [r6, #4]
	       (features[1] << 8) | (features[2] << 16);
    7746:	7971      	ldrb	r1, [r6, #5]
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    7748:	f8d7 271c 	ldr.w	r2, [r7, #1820]	; 0x71c
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    774c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    7750:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
    7754:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
    7758:	f043 0310 	orr.w	r3, r3, #16
    775c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	       (features[1] << 8) | (features[2] << 16);
    7760:	79b1      	ldrb	r1, [r6, #6]
    7762:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    7766:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
    776a:	f3c1 0110 	ubfx	r1, r1, #0, #17
    776e:	400b      	ands	r3, r1
    7770:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	_radio.conn_curr->common.fex_valid = 1;
    7774:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
    7778:	f043 0320 	orr.w	r3, r3, #32
    777c:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    7780:	7903      	ldrb	r3, [r0, #4]
    7782:	f043 0303 	orr.w	r3, r3, #3
    7786:	7103      	strb	r3, [r0, #4]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    7788:	2208      	movs	r2, #8
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    778a:	2309      	movs	r3, #9
    778c:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    778e:	71c3      	strb	r3, [r0, #7]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    7790:	2100      	movs	r1, #0
    7792:	4410      	add	r0, r2
    7794:	f7f8 ff6d 	bl	672 <memset>
		conn->llcp_features & 0xFF;
    7798:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
	pdu_ctrl_tx->llctrl.feature_req.features[0] =
    779c:	7223      	strb	r3, [r4, #8]
		(conn->llcp_features >> 8) & 0xFF;
    779e:	0a1a      	lsrs	r2, r3, #8
		(conn->llcp_features >> 16) & 0xFF;
    77a0:	0c1b      	lsrs	r3, r3, #16
	ctrl_tx_sec_enqueue(conn, node_tx);
    77a2:	4628      	mov	r0, r5
	pdu_ctrl_tx->llctrl.feature_req.features[1] =
    77a4:	7262      	strb	r2, [r4, #9]
	pdu_ctrl_tx->llctrl.feature_req.features[2] =
    77a6:	72a3      	strb	r3, [r4, #10]
	ctrl_tx_sec_enqueue(conn, node_tx);
    77a8:	4621      	mov	r1, r4
    77aa:	f7ff ffa7 	bl	76fc <ctrl_tx_sec_enqueue>
	return 0;
    77ae:	2000      	movs	r0, #0
    77b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
    77b2:	2001      	movs	r0, #1
}
    77b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    77b6:	bf00      	nop
    77b8:	200009f8 	.word	0x200009f8
    77bc:	00000000 	.word	0x00000000

000077c0 <event_connection_prepare>:
{
    77c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    77c4:	4d6d      	ldr	r5, [pc, #436]	; (797c <event_connection_prepare+0x1bc>)
{
    77c6:	461c      	mov	r4, r3
	LL_ASSERT(!_radio.ticker_id_prepare);
    77c8:	7c2b      	ldrb	r3, [r5, #16]
{
    77ca:	b08f      	sub	sp, #60	; 0x3c
    77cc:	4680      	mov	r8, r0
    77ce:	4689      	mov	r9, r1
	LL_ASSERT(!_radio.ticker_id_prepare);
    77d0:	b153      	cbz	r3, 77e8 <event_connection_prepare+0x28>
    77d2:	4a6b      	ldr	r2, [pc, #428]	; (7980 <event_connection_prepare+0x1c0>)
    77d4:	496b      	ldr	r1, [pc, #428]	; (7984 <event_connection_prepare+0x1c4>)
		LL_ASSERT(!retval);
    77d6:	2003      	movs	r0, #3
    77d8:	f7fa fd0a 	bl	21f0 <bt_log>
    77dc:	4040      	eors	r0, r0
    77de:	f380 8811 	msr	BASEPRI, r0
    77e2:	f04f 0004 	mov.w	r0, #4
    77e6:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_FIRST_CONNECTION +
    77e8:	f894 3020 	ldrb.w	r3, [r4, #32]
    77ec:	3307      	adds	r3, #7
    77ee:	b2db      	uxtb	r3, r3
    77f0:	742b      	strb	r3, [r5, #16]
	if (conn->role) {
    77f2:	f994 301d 	ldrsb.w	r3, [r4, #29]
    77f6:	2b00      	cmp	r3, #0
    77f8:	da09      	bge.n	780e <event_connection_prepare+0x4e>
		    conn->slave.window_widening_periodic_us * (lazy + 1);
    77fa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
		conn->slave.window_widening_prepare_us +=
    77fc:	6c61      	ldr	r1, [r4, #68]	; 0x44
		    conn->slave.window_widening_periodic_us * (lazy + 1);
    77fe:	fb02 3303 	mla	r3, r2, r3, r3
		conn->slave.window_widening_prepare_us +=
    7802:	440b      	add	r3, r1
		    conn->slave.window_widening_max_us) {
    7804:	6c21      	ldr	r1, [r4, #64]	; 0x40
		conn->slave.window_widening_prepare_us +=
    7806:	6463      	str	r3, [r4, #68]	; 0x44
		if (conn->slave.window_widening_prepare_us >
    7808:	428b      	cmp	r3, r1
			conn->slave.window_widening_prepare_us =
    780a:	bf88      	it	hi
    780c:	6461      	strhi	r1, [r4, #68]	; 0x44
	conn->latency_prepare += lazy;
    780e:	8d26      	ldrh	r6, [r4, #40]	; 0x28
	if (conn->llcp_ack != conn->llcp_req) {
    7810:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
	conn->latency_prepare += lazy;
    7814:	4432      	add	r2, r6
	event_counter = conn->event_counter + conn->latency_prepare;
    7816:	8c66      	ldrh	r6, [r4, #34]	; 0x22
	conn->latency_prepare += lazy;
    7818:	b292      	uxth	r2, r2
    781a:	8522      	strh	r2, [r4, #40]	; 0x28
	event_counter = conn->event_counter + conn->latency_prepare;
    781c:	4432      	add	r2, r6
    781e:	b296      	uxth	r6, r2
	if (conn->llcp_ack != conn->llcp_req) {
    7820:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
    7824:	429a      	cmp	r2, r3
    7826:	f000 8227 	beq.w	7c78 <event_connection_prepare+0x4b8>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    782a:	2005      	movs	r0, #5
    782c:	f7ff fbcc 	bl	6fc8 <event_stop.constprop.49>
		switch (conn->llcp_type) {
    7830:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
    7834:	3b01      	subs	r3, #1
    7836:	2b03      	cmp	r3, #3
    7838:	f200 8319 	bhi.w	7e6e <event_connection_prepare+0x6ae>
    783c:	e8df f013 	tbh	[pc, r3, lsl #1]
    7840:	01f40004 	.word	0x01f40004
    7844:	02c60298 	.word	0x02c60298
	if (!conn_upd) {
    7848:	f8d5 3788 	ldr.w	r3, [r5, #1928]	; 0x788
    784c:	b90b      	cbnz	r3, 7852 <event_connection_prepare+0x92>
		_radio.conn_upd = conn;
    784e:	f8c5 4788 	str.w	r4, [r5, #1928]	; 0x788
	if (conn->llcp.conn_upd.state != LLCP_CUI_STATE_INPROG) {
    7852:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
    7856:	f013 0303 	ands.w	r3, r3, #3
    785a:	d05b      	beq.n	7914 <event_connection_prepare+0x154>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    785c:	484a      	ldr	r0, [pc, #296]	; (7988 <event_connection_prepare+0x1c8>)
    785e:	f7fc f8b8 	bl	39d2 <mem_acquire>
		if (!node_tx) {
    7862:	4605      	mov	r5, r0
    7864:	2800      	cmp	r0, #0
    7866:	f000 8207 	beq.w	7c78 <event_connection_prepare+0x4b8>
		switch (conn->llcp.conn_upd.state) {
    786a:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
    786e:	f003 0203 	and.w	r2, r3, #3
    7872:	2a01      	cmp	r2, #1
    7874:	d14b      	bne.n	790e <event_connection_prepare+0x14e>
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    7876:	f36f 0301 	bfc	r3, #0, #2
    787a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
		event_counter + conn->latency + 6;
    787e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    7880:	3306      	adds	r3, #6
    7882:	4433      	add	r3, r6
    7884:	b29b      	uxth	r3, r3
	conn->llcp.conn_upd.instant =
    7886:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    788a:	7902      	ldrb	r2, [r0, #4]
    788c:	f042 0203 	orr.w	r2, r2, #3
    7890:	7102      	strb	r2, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    7892:	220c      	movs	r2, #12
    7894:	7142      	strb	r2, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    7896:	2200      	movs	r2, #0
    7898:	71c2      	strb	r2, [r0, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size =
    789a:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
    789e:	7202      	strb	r2, [r0, #8]
		win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    78a0:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
    78a2:	f240 41e2 	movw	r1, #1250	; 0x4e2
    78a6:	fbb2 f2f1 	udiv	r2, r2, r1
    78aa:	f8a0 2009 	strh.w	r2, [r0, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    78ae:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
    78b2:	f8a0 200b 	strh.w	r2, [r0, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    78b6:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
    78ba:	f8a0 200d 	strh.w	r2, [r0, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    78be:	f8b4 2066 	ldrh.w	r2, [r4, #102]	; 0x66
    78c2:	f8a0 200f 	strh.w	r2, [r0, #15]
	pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    78c6:	f8a0 3011 	strh.w	r3, [r0, #17]
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    78ca:	6822      	ldr	r2, [r4, #0]
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
    78cc:	f8c4 8078 	str.w	r8, [r4, #120]	; 0x78
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    78d0:	2a00      	cmp	r2, #0
    78d2:	da0a      	bge.n	78ea <event_connection_prepare+0x12a>
			u32_t ticks_prepare_to_start =
    78d4:	68a3      	ldr	r3, [r4, #8]
    78d6:	6861      	ldr	r1, [r4, #4]
				(conn->hdr.ticks_xtal_to_start &
    78d8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
			conn->llcp.conn_upd.ticks_anchor -=
    78dc:	428b      	cmp	r3, r1
    78de:	bf2c      	ite	cs
    78e0:	4443      	addcs	r3, r8
    78e2:	eb08 0301 	addcc.w	r3, r8, r1
    78e6:	1a9b      	subs	r3, r3, r2
    78e8:	67a3      	str	r3, [r4, #120]	; 0x78
		conn->llcp.conn_upd.pdu_win_offset = (u16_t *)
    78ea:	f105 0309 	add.w	r3, r5, #9
    78ee:	6763      	str	r3, [r4, #116]	; 0x74
		mayfly_sched_offset->fp = fp_mayfly_select_or_use;
    78f0:	4b26      	ldr	r3, [pc, #152]	; (798c <event_connection_prepare+0x1cc>)
    78f2:	4a27      	ldr	r2, [pc, #156]	; (7990 <event_connection_prepare+0x1d0>)
    78f4:	60da      	str	r2, [r3, #12]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    78f6:	2201      	movs	r2, #1
    78f8:	4611      	mov	r1, r2
    78fa:	2000      	movs	r0, #0
		mayfly_sched_offset->param = (void *)conn;
    78fc:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    78fe:	f7fc f921 	bl	3b44 <mayfly_enqueue>
		LL_ASSERT(!retval);
    7902:	2800      	cmp	r0, #0
    7904:	f000 81b4 	beq.w	7c70 <event_connection_prepare+0x4b0>
    7908:	4a22      	ldr	r2, [pc, #136]	; (7994 <event_connection_prepare+0x1d4>)
    790a:	4923      	ldr	r1, [pc, #140]	; (7998 <event_connection_prepare+0x1d8>)
    790c:	e763      	b.n	77d6 <event_connection_prepare+0x16>
			LL_ASSERT(0);
    790e:	4a23      	ldr	r2, [pc, #140]	; (799c <event_connection_prepare+0x1dc>)
			LL_ASSERT(0);
    7910:	4923      	ldr	r1, [pc, #140]	; (79a0 <event_connection_prepare+0x1e0>)
    7912:	e760      	b.n	77d6 <event_connection_prepare+0x16>
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    7914:	f8b4 7068 	ldrh.w	r7, [r4, #104]	; 0x68
    7918:	1bf7      	subs	r7, r6, r7
    791a:	b2bf      	uxth	r7, r7
	} else if (instant_latency <= 0x7FFF) {
    791c:	0438      	lsls	r0, r7, #16
    791e:	f100 81ab 	bmi.w	7c78 <event_connection_prepare+0x4b8>
		conn->llcp_ack = conn->llcp_req;
    7922:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
    7926:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
		if (_radio.conn_upd == conn) {
    792a:	f8d5 2788 	ldr.w	r2, [r5, #1928]	; 0x788
		_radio.ticker_id_prepare = 0;
    792e:	742b      	strb	r3, [r5, #16]
		if (_radio.conn_upd == conn) {
    7930:	4294      	cmp	r4, r2
			_radio.conn_upd = NULL;
    7932:	bf08      	it	eq
    7934:	f8c5 3788 	streq.w	r3, [r5, #1928]	; 0x788
		if ((conn->llcp.conn_upd.interval !=
    7938:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
    793c:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    793e:	429a      	cmp	r2, r3
    7940:	d114      	bne.n	796c <event_connection_prepare+0x1ac>
		     conn->conn_interval) ||
    7942:	f8b4 1064 	ldrh.w	r1, [r4, #100]	; 0x64
    7946:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    7948:	4299      	cmp	r1, r3
    794a:	d10f      	bne.n	796c <event_connection_prepare+0x1ac>
		    (RADIO_CONN_EVENTS(conn->llcp.conn_upd.timeout *
    794c:	f240 43e2 	movw	r3, #1250	; 0x4e2
    7950:	435a      	muls	r2, r3
    7952:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    7956:	f242 7110 	movw	r1, #10000	; 0x2710
    795a:	fb01 2303 	mla	r3, r1, r3, r2
    795e:	3b01      	subs	r3, #1
    7960:	fb93 f3f2 	sdiv	r3, r3, r2
		    (conn->llcp.conn_upd.latency != conn->latency) ||
    7964:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
    7966:	b29b      	uxth	r3, r3
    7968:	429a      	cmp	r2, r3
    796a:	d02e      	beq.n	79ca <event_connection_prepare+0x20a>
			node_rx = packet_rx_reserve_get(2);
    796c:	2002      	movs	r0, #2
    796e:	f7fd ffe9 	bl	5944 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    7972:	b9c8      	cbnz	r0, 79a8 <event_connection_prepare+0x1e8>
    7974:	4a09      	ldr	r2, [pc, #36]	; (799c <event_connection_prepare+0x1dc>)
		LL_ASSERT(node_rx);
    7976:	490b      	ldr	r1, [pc, #44]	; (79a4 <event_connection_prepare+0x1e4>)
    7978:	e72d      	b.n	77d6 <event_connection_prepare+0x16>
    797a:	bf00      	nop
    797c:	200009f8 	.word	0x200009f8
    7980:	0000e495 	.word	0x0000e495
    7984:	0000ea02 	.word	0x0000ea02
    7988:	20001154 	.word	0x20001154
    798c:	20004fb0 	.word	0x20004fb0
    7990:	00006935 	.word	0x00006935
    7994:	0000e45e 	.word	0x0000e45e
    7998:	0000e690 	.word	0x0000e690
    799c:	0000e472 	.word	0x0000e472
    79a0:	0000d773 	.word	0x0000d773
    79a4:	0000e8ac 	.word	0x0000e8ac
			node_rx->hdr.handle = conn->handle;
    79a8:	8c23      	ldrh	r3, [r4, #32]
    79aa:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    79ac:	2308      	movs	r3, #8
    79ae:	7103      	strb	r3, [r0, #4]
			radio_le_conn_update_cmplt->status =
    79b0:	2300      	movs	r3, #0
    79b2:	72c3      	strb	r3, [r0, #11]
			radio_le_conn_update_cmplt->interval =
    79b4:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
    79b8:	8183      	strh	r3, [r0, #12]
			radio_le_conn_update_cmplt->latency =
    79ba:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
    79be:	81c3      	strh	r3, [r0, #14]
			radio_le_conn_update_cmplt->timeout =
    79c0:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    79c4:	8203      	strh	r3, [r0, #16]
			packet_rx_enqueue();
    79c6:	f7ff f8a3 	bl	6b10 <packet_rx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    79ca:	6823      	ldr	r3, [r4, #0]
    79cc:	6866      	ldr	r6, [r4, #4]
    79ce:	2b00      	cmp	r3, #0
    79d0:	da09      	bge.n	79e6 <event_connection_prepare+0x226>
			u32_t ticks_prepare_to_start =
    79d2:	68a0      	ldr	r0, [r4, #8]
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    79d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    79d8:	42b0      	cmp	r0, r6
    79da:	bf2c      	ite	cs
    79dc:	4480      	addcs	r8, r0
    79de:	44b0      	addcc	r8, r6
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    79e0:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    79e2:	eba8 0803 	sub.w	r8, r8, r3
		conn_interval_old = instant_latency * conn->conn_interval;
    79e6:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
			conn->llcp.conn_upd.interval;
    79e8:	f8b4 a062 	ldrh.w	sl, [r4, #98]	; 0x62
    79ec:	49c4      	ldr	r1, [pc, #784]	; (7d00 <event_connection_prepare+0x540>)
		conn_interval_old = instant_latency * conn->conn_interval;
    79ee:	fb13 f307 	smulbb	r3, r3, r7
    79f2:	b29b      	uxth	r3, r3
		latency = conn_interval_old /
    79f4:	fbb3 f2fa 	udiv	r2, r3, sl
    79f8:	fa1f f982 	uxth.w	r9, r2
		conn_interval_new = latency *
    79fc:	fb1a f009 	smulbb	r0, sl, r9
    7a00:	b280      	uxth	r0, r0
		if (conn_interval_new > conn_interval_old) {
    7a02:	4283      	cmp	r3, r0
    7a04:	f080 80a3 	bcs.w	7b4e <event_connection_prepare+0x38e>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    7a08:	1ac0      	subs	r0, r0, r3
    7a0a:	f240 1223 	movw	r2, #291	; 0x123
    7a0e:	4342      	muls	r2, r0
    7a10:	17c3      	asrs	r3, r0, #31
    7a12:	fb01 2303 	mla	r3, r1, r3, r2
    7a16:	fba0 0101 	umull	r0, r1, r0, r1
    7a1a:	4419      	add	r1, r3
    7a1c:	a3b6      	add	r3, pc, #728	; (adr r3, 7cf8 <event_connection_prepare+0x538>)
    7a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
    7a22:	f7f8 fc21 	bl	268 <__aeabi_uldivmod>
    7a26:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    7a2a:	eb00 0308 	add.w	r3, r0, r8
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    7a2e:	930b      	str	r3, [sp, #44]	; 0x2c
		conn->latency_prepare -= (instant_latency - latency);
    7a30:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    7a32:	f8df b300 	ldr.w	fp, [pc, #768]	; 7d34 <event_connection_prepare+0x574>
    7a36:	1bdb      	subs	r3, r3, r7
    7a38:	444b      	add	r3, r9
    7a3a:	8523      	strh	r3, [r4, #40]	; 0x28
		ticks_slot_offset =
    7a3c:	6823      	ldr	r3, [r4, #0]
    7a3e:	429e      	cmp	r6, r3
    7a40:	bf38      	it	cc
    7a42:	461e      	movcc	r6, r3
		if (conn->role) {
    7a44:	f994 301d 	ldrsb.w	r3, [r4, #29]
		ticks_slot_offset =
    7a48:	960d      	str	r6, [sp, #52]	; 0x34
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
    7a4a:	f240 48e2 	movw	r8, #1250	; 0x4e2
		if (conn->role) {
    7a4e:	2b00      	cmp	r3, #0
    7a50:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    7a52:	930c      	str	r3, [sp, #48]	; 0x30
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
    7a54:	fb08 f60a 	mul.w	r6, r8, sl
		if (conn->role) {
    7a58:	f280 808a 	bge.w	7b70 <event_connection_prepare+0x3b0>
				conn->slave.window_widening_periodic_us *
    7a5c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
			conn->slave.window_widening_prepare_us -=
    7a5e:	6c62      	ldr	r2, [r4, #68]	; 0x44
    7a60:	fb03 2717 	mls	r7, r3, r7, r2
				(((gc_lookup_ppm[_radio.sca] +
    7a64:	f895 3728 	ldrb.w	r3, [r5, #1832]	; 0x728
    7a68:	4aa6      	ldr	r2, [pc, #664]	; (7d04 <event_connection_prepare+0x544>)
    7a6a:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
				   gc_lookup_ppm[conn->slave.sca]) *
    7a6e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    7a72:	f3c3 0382 	ubfx	r3, r3, #2, #3
    7a76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				conn->llcp.conn_upd.win_size * 1250;
    7a7a:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
				(((gc_lookup_ppm[_radio.sca] +
    7a7e:	441d      	add	r5, r3
				   gc_lookup_ppm[conn->slave.sca]) *
    7a80:	4375      	muls	r5, r6
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    7a82:	f505 2574 	add.w	r5, r5, #999424	; 0xf4000
    7a86:	4ba0      	ldr	r3, [pc, #640]	; (7d08 <event_connection_prepare+0x548>)
				conn->llcp.conn_upd.win_size * 1250;
    7a88:	fb08 f202 	mul.w	r2, r8, r2
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    7a8c:	f205 253f 	addw	r5, r5, #575	; 0x23f
    7a90:	fbb5 f5f3 	udiv	r5, r5, r3
				(conn_interval_us >> 1) - RADIO_TIFS;
    7a94:	0873      	lsrs	r3, r6, #1
				conn->slave.window_widening_periodic_us *
    7a96:	fb05 f009 	mul.w	r0, r5, r9
				(conn_interval_us >> 1) - RADIO_TIFS;
    7a9a:	3b96      	subs	r3, #150	; 0x96
			conn->slave.window_widening_prepare_us +=
    7a9c:	4407      	add	r7, r0
			conn->slave.window_size_prepare_us =
    7a9e:	64e2      	str	r2, [r4, #76]	; 0x4c
			conn->slave.ticks_to_offset = 0;
    7aa0:	2200      	movs	r2, #0
			conn->slave.window_widening_prepare_us +=
    7aa2:	429f      	cmp	r7, r3
    7aa4:	bf94      	ite	ls
    7aa6:	6467      	strls	r7, [r4, #68]	; 0x44
    7aa8:	6463      	strhi	r3, [r4, #68]	; 0x44
			conn->slave.window_widening_periodic_us =
    7aaa:	63e5      	str	r5, [r4, #60]	; 0x3c
			conn->slave.window_widening_max_us =
    7aac:	6423      	str	r3, [r4, #64]	; 0x40
			conn->slave.ticks_to_offset = 0;
    7aae:	65a2      	str	r2, [r4, #88]	; 0x58
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    7ab0:	fba0 010b 	umull	r0, r1, r0, fp
    7ab4:	a390      	add	r3, pc, #576	; (adr r3, 7cf8 <event_connection_prepare+0x538>)
    7ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
    7aba:	f7f8 fbd5 	bl	268 <__aeabi_uldivmod>
    7abe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7ac0:	1a1b      	subs	r3, r3, r0
    7ac2:	930b      	str	r3, [sp, #44]	; 0x2c
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    7ac4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7ac6:	fbb3 f0f8 	udiv	r0, r3, r8
    7aca:	fb08 f000 	mul.w	r0, r8, r0
    7ace:	a38a      	add	r3, pc, #552	; (adr r3, 7cf8 <event_connection_prepare+0x538>)
    7ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
    7ad4:	fba0 010b 	umull	r0, r1, r0, fp
    7ad8:	f7f8 fbc6 	bl	268 <__aeabi_uldivmod>
			periodic_us -= conn->slave.window_widening_periodic_us;
    7adc:	1b75      	subs	r5, r6, r5
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    7ade:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
		conn->latency = conn->llcp.conn_upd.latency;
    7ae2:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
    7ae6:	84e3      	strh	r3, [r4, #38]	; 0x26
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    7ae8:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
		conn->conn_interval = conn->llcp.conn_upd.interval;
    7aec:	f8a4 a024 	strh.w	sl, [r4, #36]	; 0x24
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    7af0:	f242 7210 	movw	r2, #10000	; 0x2710
    7af4:	fb02 6303 	mla	r3, r2, r3, r6
    7af8:	3b01      	subs	r3, #1
    7afa:	fbb3 f3f6 	udiv	r3, r3, r6
    7afe:	85e3      	strh	r3, [r4, #46]	; 0x2e
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    7b00:	4b82      	ldr	r3, [pc, #520]	; (7d0c <event_connection_prepare+0x54c>)
    7b02:	4433      	add	r3, r6
    7b04:	fbb3 f6f6 	udiv	r6, r3, r6
		if (!conn->llcp.conn_upd.is_internal) {
    7b08:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    7b0c:	8666      	strh	r6, [r4, #50]	; 0x32
		if (!conn->llcp.conn_upd.is_internal) {
    7b0e:	f013 0304 	ands.w	r3, r3, #4
			conn->supervision_expire = 0;
    7b12:	bf08      	it	eq
    7b14:	8623      	strheq	r3, [r4, #48]	; 0x30
		mayfly_was_enabled =
    7b16:	2101      	movs	r1, #1
    7b18:	2000      	movs	r0, #0
    7b1a:	f003 fcef 	bl	b4fc <mayfly_is_enabled>
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    7b1e:	2200      	movs	r2, #0
    7b20:	2101      	movs	r1, #1
		mayfly_was_enabled =
    7b22:	4681      	mov	r9, r0
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    7b24:	4610      	mov	r0, r2
    7b26:	f7fb ffe5 	bl	3af4 <mayfly_enable>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    7b2a:	f894 2020 	ldrb.w	r2, [r4, #32]
		ticker_status =
    7b2e:	f641 63b4 	movw	r3, #7860	; 0x1eb4
    7b32:	2100      	movs	r1, #0
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    7b34:	3207      	adds	r2, #7
		ticker_status =
    7b36:	9300      	str	r3, [sp, #0]
    7b38:	b2d2      	uxtb	r2, r2
    7b3a:	4b75      	ldr	r3, [pc, #468]	; (7d10 <event_connection_prepare+0x550>)
    7b3c:	4608      	mov	r0, r1
    7b3e:	f7fc fe53 	bl	47e8 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    7b42:	f030 0802 	bics.w	r8, r0, #2
    7b46:	d020      	beq.n	7b8a <event_connection_prepare+0x3ca>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    7b48:	4a72      	ldr	r2, [pc, #456]	; (7d14 <event_connection_prepare+0x554>)
    7b4a:	4973      	ldr	r1, [pc, #460]	; (7d18 <event_connection_prepare+0x558>)
    7b4c:	e643      	b.n	77d6 <event_connection_prepare+0x16>
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    7b4e:	fb0a 3212 	mls	r2, sl, r2, r3
    7b52:	b292      	uxth	r2, r2
    7b54:	fba2 0101 	umull	r0, r1, r2, r1
    7b58:	f240 1323 	movw	r3, #291	; 0x123
    7b5c:	fb03 1102 	mla	r1, r3, r2, r1
    7b60:	a365      	add	r3, pc, #404	; (adr r3, 7cf8 <event_connection_prepare+0x538>)
    7b62:	e9d3 2300 	ldrd	r2, r3, [r3]
    7b66:	f7f8 fb7f 	bl	268 <__aeabi_uldivmod>
    7b6a:	eba8 0300 	sub.w	r3, r8, r0
    7b6e:	e75e      	b.n	7a2e <event_connection_prepare+0x26e>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    7b70:	990c      	ldr	r1, [sp, #48]	; 0x30
    7b72:	a361      	add	r3, pc, #388	; (adr r3, 7cf8 <event_connection_prepare+0x538>)
    7b74:	e9d3 2300 	ldrd	r2, r3, [r3]
    7b78:	fba1 010b 	umull	r0, r1, r1, fp
    7b7c:	f7f8 fb74 	bl	268 <__aeabi_uldivmod>
    7b80:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_win_offset += 1;
    7b84:	1c47      	adds	r7, r0, #1
		periodic_us = conn_interval_us;
    7b86:	4635      	mov	r5, r6
    7b88:	e7ab      	b.n	7ae2 <event_connection_prepare+0x322>
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    7b8a:	fba5 ab0b 	umull	sl, fp, r5, fp
    7b8e:	a35a      	add	r3, pc, #360	; (adr r3, 7cf8 <event_connection_prepare+0x538>)
    7b90:	e9d3 2300 	ldrd	r2, r3, [r3]
    7b94:	4650      	mov	r0, sl
    7b96:	4659      	mov	r1, fp
    7b98:	f7f8 fb66 	bl	268 <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(periodic_us),
    7b9c:	4a5f      	ldr	r2, [pc, #380]	; (7d1c <event_connection_prepare+0x55c>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7b9e:	f894 6020 	ldrb.w	r6, [r4, #32]
    7ba2:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
				     HAL_TICKER_REMAINDER(periodic_us),
    7ba6:	2307      	movs	r3, #7
    7ba8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    7bac:	2100      	movs	r1, #0
    7bae:	4343      	muls	r3, r0
    7bb0:	fb02 3301 	mla	r3, r2, r1, r3
    7bb4:	fba0 0102 	umull	r0, r1, r0, r2
    7bb8:	ebba 0000 	subs.w	r0, sl, r0
    7bbc:	4419      	add	r1, r3
    7bbe:	eb6b 0101 	sbc.w	r1, fp, r1
    7bc2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    7bc6:	2300      	movs	r3, #0
    7bc8:	f7f8 fb4e 	bl	268 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7bcc:	68e3      	ldr	r3, [r4, #12]
    7bce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    7bd0:	f994 e01d 	ldrsb.w	lr, [r4, #29]
    7bd4:	4952      	ldr	r1, [pc, #328]	; (7d20 <event_connection_prepare+0x560>)
		ticker_status =
    7bd6:	9002      	str	r0, [sp, #8]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7bd8:	441a      	add	r2, r3
    7bda:	4613      	mov	r3, r2
    7bdc:	4a51      	ldr	r2, [pc, #324]	; (7d24 <event_connection_prepare+0x564>)
		ticker_status =
    7bde:	9304      	str	r3, [sp, #16]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7be0:	ea12 022e 	ands.w	r2, r2, lr, asr #32
    7be4:	bf38      	it	cc
    7be6:	460a      	movcc	r2, r1
    7be8:	3607      	adds	r6, #7
		ticker_status =
    7bea:	f641 61c4 	movw	r1, #7876	; 0x1ec4
    7bee:	9108      	str	r1, [sp, #32]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7bf0:	b2f6      	uxtb	r6, r6
		ticker_status =
    7bf2:	4947      	ldr	r1, [pc, #284]	; (7d10 <event_connection_prepare+0x550>)
    7bf4:	9107      	str	r1, [sp, #28]
    7bf6:	9205      	str	r2, [sp, #20]
    7bf8:	9406      	str	r4, [sp, #24]
    7bfa:	f8cd 800c 	str.w	r8, [sp, #12]
    7bfe:	9501      	str	r5, [sp, #4]
    7c00:	9700      	str	r7, [sp, #0]
    7c02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7c04:	4632      	mov	r2, r6
    7c06:	4641      	mov	r1, r8
    7c08:	4640      	mov	r0, r8
    7c0a:	f7fc fd4f 	bl	46ac <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    7c0e:	f030 0002 	bics.w	r0, r0, #2
    7c12:	d199      	bne.n	7b48 <event_connection_prepare+0x388>
		if (mayfly_was_enabled) {
    7c14:	f1b9 0f00 	cmp.w	r9, #0
    7c18:	d06b      	beq.n	7cf2 <event_connection_prepare+0x532>
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    7c1a:	2201      	movs	r2, #1
    7c1c:	4611      	mov	r1, r2
}
    7c1e:	b00f      	add	sp, #60	; 0x3c
    7c20:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    7c24:	f7fb bf66 	b.w	3af4 <mayfly_enable>
	if (conn->llcp.chan_map.initiate) {
    7c28:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
    7c2c:	2b00      	cmp	r3, #0
    7c2e:	f000 8083 	beq.w	7d38 <event_connection_prepare+0x578>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    7c32:	483d      	ldr	r0, [pc, #244]	; (7d28 <event_connection_prepare+0x568>)
    7c34:	f7fb fecd 	bl	39d2 <mem_acquire>
		if (node_tx) {
    7c38:	4605      	mov	r5, r0
    7c3a:	b1e8      	cbz	r0, 7c78 <event_connection_prepare+0x4b8>
			conn->llcp.chan_map.initiate = 0;
    7c3c:	2300      	movs	r3, #0
    7c3e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
				event_counter + conn->latency + 6;
    7c42:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    7c44:	3306      	adds	r3, #6
    7c46:	4433      	add	r3, r6
			conn->llcp.chan_map.instant =
    7c48:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    7c4c:	7903      	ldrb	r3, [r0, #4]
    7c4e:	f043 0303 	orr.w	r3, r3, #3
    7c52:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    7c54:	2308      	movs	r3, #8
    7c56:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    7c58:	2301      	movs	r3, #1
    7c5a:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
    7c5c:	2205      	movs	r2, #5
    7c5e:	f104 0161 	add.w	r1, r4, #97	; 0x61
    7c62:	3008      	adds	r0, #8
    7c64:	f7f8 fcd9 	bl	61a <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
    7c68:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    7c6c:	f8a5 300d 	strh.w	r3, [r5, #13]
			ctrl_tx_enqueue(conn, node_tx);
    7c70:	4629      	mov	r1, r5
    7c72:	4620      	mov	r0, r4
    7c74:	f7ff fd14 	bl	76a0 <ctrl_tx_enqueue>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
    7c78:	f894 2099 	ldrb.w	r2, [r4, #153]	; 0x99
    7c7c:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
    7c80:	429a      	cmp	r2, r3
    7c82:	d01d      	beq.n	7cc0 <event_connection_prepare+0x500>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    7c84:	2005      	movs	r0, #5
    7c86:	f7ff f99f 	bl	6fc8 <event_stop.constprop.49>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    7c8a:	4827      	ldr	r0, [pc, #156]	; (7d28 <event_connection_prepare+0x568>)
    7c8c:	f7fb fea1 	bl	39d2 <mem_acquire>
		if (node_tx) {
    7c90:	4601      	mov	r1, r0
    7c92:	b1a8      	cbz	r0, 7cc0 <event_connection_prepare+0x500>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
    7c94:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
    7c98:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    7c9c:	7903      	ldrb	r3, [r0, #4]
    7c9e:	f043 0303 	orr.w	r3, r3, #3
    7ca2:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    7ca4:	2302      	movs	r3, #2
    7ca6:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    7ca8:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.terminate_ind.error_code =
    7caa:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
    7cae:	7203      	strb	r3, [r0, #8]
			ctrl_tx_enqueue(conn, node_tx);
    7cb0:	4620      	mov	r0, r4
    7cb2:	f7ff fcf5 	bl	76a0 <ctrl_tx_enqueue>
			conn->procedure_expire = conn->supervision_reload;
    7cb6:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
			if (conn->procedure_expire <= 1) {
    7cb8:	2b01      	cmp	r3, #1
				conn->procedure_expire++;
    7cba:	bf98      	it	ls
    7cbc:	3301      	addls	r3, #1
    7cbe:	86a3      	strh	r3, [r4, #52]	; 0x34
	event_common_prepare(ticks_at_expire, remainder,
    7cc0:	f894 3020 	ldrb.w	r3, [r4, #32]
    7cc4:	f994 501d 	ldrsb.w	r5, [r4, #29]
    7cc8:	4818      	ldr	r0, [pc, #96]	; (7d2c <event_connection_prepare+0x56c>)
    7cca:	4919      	ldr	r1, [pc, #100]	; (7d30 <event_connection_prepare+0x570>)
    7ccc:	68a2      	ldr	r2, [r4, #8]
    7cce:	9403      	str	r4, [sp, #12]
    7cd0:	3307      	adds	r3, #7
    7cd2:	ea11 0125 	ands.w	r1, r1, r5, asr #32
    7cd6:	bf38      	it	cc
    7cd8:	4601      	movcc	r1, r0
    7cda:	b2db      	uxtb	r3, r3
    7cdc:	e88d 000c 	stmia.w	sp, {r2, r3}
    7ce0:	9102      	str	r1, [sp, #8]
    7ce2:	1d23      	adds	r3, r4, #4
    7ce4:	4622      	mov	r2, r4
    7ce6:	4649      	mov	r1, r9
    7ce8:	4640      	mov	r0, r8
	conn->event_counter = event_counter + 1;
    7cea:	3601      	adds	r6, #1
	event_common_prepare(ticks_at_expire, remainder,
    7cec:	f7ff f97a 	bl	6fe4 <event_common_prepare>
	conn->event_counter = event_counter + 1;
    7cf0:	8466      	strh	r6, [r4, #34]	; 0x22
}
    7cf2:	b00f      	add	sp, #60	; 0x3c
    7cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7cf8:	1afd498d 	.word	0x1afd498d
    7cfc:	00000007 	.word	0x00000007
    7d00:	09ce5400 	.word	0x09ce5400
    7d04:	0000e6ae 	.word	0x0000e6ae
    7d08:	000f4240 	.word	0x000f4240
    7d0c:	026259ff 	.word	0x026259ff
    7d10:	00006349 	.word	0x00006349
    7d14:	0000e472 	.word	0x0000e472
    7d18:	0000e576 	.word	0x0000e576
    7d1c:	1afd498d 	.word	0x1afd498d
    7d20:	00007e85 	.word	0x00007e85
    7d24:	00007e89 	.word	0x00007e89
    7d28:	20001154 	.word	0x20001154
    7d2c:	000097b5 	.word	0x000097b5
    7d30:	00007ec9 	.word	0x00007ec9
    7d34:	3b9aca00 	.word	0x3b9aca00
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    7d38:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    7d3c:	1af3      	subs	r3, r6, r3
    7d3e:	0419      	lsls	r1, r3, #16
    7d40:	d49a      	bmi.n	7c78 <event_connection_prepare+0x4b8>
		conn->llcp_ack = conn->llcp_req;
    7d42:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    7d46:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		memcpy(&conn->data_chan_map[0],
    7d4a:	f104 0517 	add.w	r5, r4, #23
    7d4e:	2205      	movs	r2, #5
    7d50:	f104 0161 	add.w	r1, r4, #97	; 0x61
    7d54:	4628      	mov	r0, r5
    7d56:	f7f8 fc60 	bl	61a <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    7d5a:	2105      	movs	r1, #5
    7d5c:	4628      	mov	r0, r5
    7d5e:	f7fb ffd1 	bl	3d04 <util_ones_count_get>
		conn->data_chan_count =
    7d62:	7f63      	ldrb	r3, [r4, #29]
    7d64:	f360 0305 	bfi	r3, r0, #0, #6
    7d68:	7763      	strb	r3, [r4, #29]
		conn->chm_update = 1;
    7d6a:	2301      	movs	r3, #1
    7d6c:	7723      	strb	r3, [r4, #28]
    7d6e:	e783      	b.n	7c78 <event_connection_prepare+0x4b8>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    7d70:	4840      	ldr	r0, [pc, #256]	; (7e74 <event_connection_prepare+0x6b4>)
    7d72:	f7fb fe2e 	bl	39d2 <mem_acquire>
	if (node_tx) {
    7d76:	4605      	mov	r5, r0
    7d78:	2800      	cmp	r0, #0
    7d7a:	f43f af7d 	beq.w	7c78 <event_connection_prepare+0x4b8>
		conn->llcp_ack = conn->llcp_req;
    7d7e:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    7d82:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		conn->llcp_features = RADIO_BLE_FEAT;
    7d86:	4b3c      	ldr	r3, [pc, #240]	; (7e78 <event_connection_prepare+0x6b8>)
    7d88:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    7d8c:	7903      	ldrb	r3, [r0, #4]
    7d8e:	f043 0303 	orr.w	r3, r3, #3
    7d92:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    7d94:	2309      	movs	r3, #9
    7d96:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode =
    7d98:	f994 301d 	ldrsb.w	r3, [r4, #29]
    7d9c:	2b00      	cmp	r3, #0
    7d9e:	bfac      	ite	ge
    7da0:	2308      	movge	r3, #8
    7da2:	230e      	movlt	r3, #14
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
    7da4:	2208      	movs	r2, #8
		pdu_ctrl_tx->llctrl.opcode =
    7da6:	71c3      	strb	r3, [r0, #7]
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
    7da8:	2100      	movs	r1, #0
    7daa:	4410      	add	r0, r2
    7dac:	f7f8 fc61 	bl	672 <memset>
			conn->llcp_features & 0xFF;
    7db0:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		pdu_ctrl_tx->llctrl.feature_req.features[0] =
    7db4:	722b      	strb	r3, [r5, #8]
			(conn->llcp_features >> 8) & 0xFF;
    7db6:	0a1a      	lsrs	r2, r3, #8
			(conn->llcp_features >> 16) & 0xFF;
    7db8:	0c1b      	lsrs	r3, r3, #16
		pdu_ctrl_tx->llctrl.feature_req.features[1] =
    7dba:	726a      	strb	r2, [r5, #9]
		pdu_ctrl_tx->llctrl.feature_req.features[2] =
    7dbc:	72ab      	strb	r3, [r5, #10]
		ctrl_tx_enqueue(conn, node_tx);
    7dbe:	4629      	mov	r1, r5
			ctrl_tx_enqueue(conn, node_tx);
    7dc0:	4620      	mov	r0, r4
    7dc2:	f7ff fc6d 	bl	76a0 <ctrl_tx_enqueue>
			conn->procedure_expire = conn->procedure_reload;
    7dc6:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    7dc8:	86a3      	strh	r3, [r4, #52]	; 0x34
    7dca:	e755      	b.n	7c78 <event_connection_prepare+0x4b8>
	if (conn->llcp_version.tx == 0) {
    7dcc:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
    7dd0:	07da      	lsls	r2, r3, #31
    7dd2:	d424      	bmi.n	7e1e <event_connection_prepare+0x65e>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    7dd4:	4827      	ldr	r0, [pc, #156]	; (7e74 <event_connection_prepare+0x6b4>)
    7dd6:	f7fb fdfc 	bl	39d2 <mem_acquire>
		if (node_tx) {
    7dda:	4601      	mov	r1, r0
    7ddc:	2800      	cmp	r0, #0
    7dde:	f43f af4b 	beq.w	7c78 <event_connection_prepare+0x4b8>
			conn->llcp_ack = conn->llcp_req;
    7de2:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    7de6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			conn->llcp_version.tx = 1;
    7dea:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
    7dee:	f043 0301 	orr.w	r3, r3, #1
    7df2:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    7df6:	7903      	ldrb	r3, [r0, #4]
    7df8:	f043 0303 	orr.w	r3, r3, #3
    7dfc:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len =
    7dfe:	2306      	movs	r3, #6
    7e00:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    7e02:	230c      	movs	r3, #12
    7e04:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.version_ind.version_number =
    7e06:	2309      	movs	r3, #9
    7e08:	7203      	strb	r3, [r0, #8]
			pdu_ctrl_tx->llctrl.version_ind.company_id =
    7e0a:	f06f 030e 	mvn.w	r3, #14
    7e0e:	7243      	strb	r3, [r0, #9]
    7e10:	2305      	movs	r3, #5
    7e12:	7283      	strb	r3, [r0, #10]
			pdu_ctrl_tx->llctrl.version_ind.sub_version_number =
    7e14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7e18:	72c3      	strb	r3, [r0, #11]
    7e1a:	7303      	strb	r3, [r0, #12]
    7e1c:	e7d0      	b.n	7dc0 <event_connection_prepare+0x600>
	} else if (conn->llcp_version.rx != 0) {
    7e1e:	079b      	lsls	r3, r3, #30
    7e20:	d523      	bpl.n	7e6a <event_connection_prepare+0x6aa>
		conn->llcp_ack = conn->llcp_req;
    7e22:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    7e26:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		node_rx = packet_rx_reserve_get(2);
    7e2a:	2002      	movs	r0, #2
    7e2c:	f7fd fd8a 	bl	5944 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    7e30:	b908      	cbnz	r0, 7e36 <event_connection_prepare+0x676>
    7e32:	4a12      	ldr	r2, [pc, #72]	; (7e7c <event_connection_prepare+0x6bc>)
    7e34:	e59f      	b.n	7976 <event_connection_prepare+0x1b6>
		node_rx->hdr.handle = conn->handle;
    7e36:	8c23      	ldrh	r3, [r4, #32]
    7e38:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    7e3a:	2301      	movs	r3, #1
    7e3c:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    7e3e:	7a03      	ldrb	r3, [r0, #8]
    7e40:	f043 0303 	orr.w	r3, r3, #3
    7e44:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len =
    7e46:	2306      	movs	r3, #6
    7e48:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode =
    7e4a:	230c      	movs	r3, #12
    7e4c:	72c3      	strb	r3, [r0, #11]
		pdu_ctrl_rx->llctrl.version_ind.version_number =
    7e4e:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
    7e52:	7303      	strb	r3, [r0, #12]
		pdu_ctrl_rx->llctrl.version_ind.company_id =
    7e54:	f8b4 3092 	ldrh.w	r3, [r4, #146]	; 0x92
    7e58:	f8a0 300d 	strh.w	r3, [r0, #13]
		pdu_ctrl_rx->llctrl.version_ind.sub_version_number =
    7e5c:	f8b4 3094 	ldrh.w	r3, [r4, #148]	; 0x94
    7e60:	f8a0 300f 	strh.w	r3, [r0, #15]
		packet_rx_enqueue();
    7e64:	f7fe fe54 	bl	6b10 <packet_rx_enqueue>
    7e68:	e706      	b.n	7c78 <event_connection_prepare+0x4b8>
		LL_ASSERT(0);
    7e6a:	4a04      	ldr	r2, [pc, #16]	; (7e7c <event_connection_prepare+0x6bc>)
    7e6c:	e550      	b.n	7910 <event_connection_prepare+0x150>
			LL_ASSERT(0);
    7e6e:	4a04      	ldr	r2, [pc, #16]	; (7e80 <event_connection_prepare+0x6c0>)
    7e70:	e54e      	b.n	7910 <event_connection_prepare+0x150>
    7e72:	bf00      	nop
    7e74:	20001154 	.word	0x20001154
    7e78:	0001400c 	.word	0x0001400c
    7e7c:	0000e486 	.word	0x0000e486
    7e80:	0000e495 	.word	0x0000e495

00007e84 <event_master_prepare>:
	event_connection_prepare(ticks_at_expire, remainder, lazy, context);
    7e84:	f7ff bc9c 	b.w	77c0 <event_connection_prepare>

00007e88 <event_slave_prepare>:
    7e88:	f7ff bc9a 	b.w	77c0 <event_connection_prepare>

00007e8c <connection_configure>:
{
    7e8c:	b510      	push	{r4, lr}
    7e8e:	4604      	mov	r4, r0
	radio_reset();
    7e90:	f002 ffd0 	bl	ae34 <radio_reset>
	radio_tx_power_set(0);
    7e94:	2000      	movs	r0, #0
    7e96:	f002 fff7 	bl	ae88 <radio_tx_power_set>
	radio_isr_set(isr);
    7e9a:	480a      	ldr	r0, [pc, #40]	; (7ec4 <connection_configure+0x38>)
    7e9c:	f002 ff94 	bl	adc8 <radio_isr_set>
	radio_aa_set(conn->access_addr);
    7ea0:	f104 0010 	add.w	r0, r4, #16
    7ea4:	f003 f80e 	bl	aec4 <radio_aa_set>
			     ((u32_t)conn->crc_init[1] << 8) |
    7ea8:	7d63      	ldrb	r3, [r4, #21]
			    (((u32_t)conn->crc_init[2] << 16) |
    7eaa:	7da1      	ldrb	r1, [r4, #22]
			     ((u32_t)conn->crc_init[1] << 8) |
    7eac:	021b      	lsls	r3, r3, #8
			    (((u32_t)conn->crc_init[2] << 16) |
    7eae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			     ((u32_t)conn->crc_init[0])));
    7eb2:	7d21      	ldrb	r1, [r4, #20]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    7eb4:	f240 605b 	movw	r0, #1627	; 0x65b
    7eb8:	4319      	orrs	r1, r3
}
    7eba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    7ebe:	f003 b8a9 	b.w	b014 <radio_crc_configure>
    7ec2:	bf00      	nop
    7ec4:	00008131 	.word	0x00008131

00007ec8 <event_slave>:
{
    7ec8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7ecc:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    7ece:	4b5e      	ldr	r3, [pc, #376]	; (8048 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x48>)
    7ed0:	7cda      	ldrb	r2, [r3, #19]
{
    7ed2:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    7ed4:	f002 06ff 	and.w	r6, r2, #255	; 0xff
    7ed8:	461d      	mov	r5, r3
    7eda:	b152      	cbz	r2, 7ef2 <event_slave+0x2a>
    7edc:	4a5b      	ldr	r2, [pc, #364]	; (804c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4c>)
    7ede:	495c      	ldr	r1, [pc, #368]	; (8050 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x50>)
	LL_ASSERT(_radio.ticker_id_prepare ==
    7ee0:	2003      	movs	r0, #3
    7ee2:	f7fa f985 	bl	21f0 <bt_log>
    7ee6:	4040      	eors	r0, r0
    7ee8:	f380 8811 	msr	BASEPRI, r0
    7eec:	f04f 0004 	mov.w	r0, #4
    7ef0:	df02      	svc	2
    7ef2:	7c1a      	ldrb	r2, [r3, #16]
    7ef4:	8c23      	ldrh	r3, [r4, #32]
    7ef6:	b2d2      	uxtb	r2, r2
    7ef8:	3307      	adds	r3, #7
    7efa:	429a      	cmp	r2, r3
    7efc:	d002      	beq.n	7f04 <event_slave+0x3c>
    7efe:	4a53      	ldr	r2, [pc, #332]	; (804c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4c>)
    7f00:	4954      	ldr	r1, [pc, #336]	; (8054 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x54>)
    7f02:	e7ed      	b.n	7ee0 <event_slave+0x18>
	_radio.role = ROLE_SLAVE;
    7f04:	2303      	movs	r3, #3
    7f06:	74eb      	strb	r3, [r5, #19]
	_radio.packet_counter = 0;
    7f08:	f885 6720 	strb.w	r6, [r5, #1824]	; 0x720
	_radio.crc_expire = 0;
    7f0c:	f885 6721 	strb.w	r6, [r5, #1825]	; 0x721
	_radio.state = STATE_RX;
    7f10:	2301      	movs	r3, #1
    7f12:	752b      	strb	r3, [r5, #20]
	conn->latency_event = conn->latency_prepare;
    7f14:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
    7f16:	f8c5 471c 	str.w	r4, [r5, #1820]	; 0x71c
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    7f1a:	b2d2      	uxtb	r2, r2
	conn->latency_event = conn->latency_prepare;
    7f1c:	8563      	strh	r3, [r4, #42]	; 0x2a
	_radio.ticks_anchor = ticks_at_expire;
    7f1e:	60a8      	str	r0, [r5, #8]
	conn->latency_prepare = 0;
    7f20:	8526      	strh	r6, [r4, #40]	; 0x28
	connection_configure(conn);
    7f22:	4620      	mov	r0, r4
	_radio.ticker_id_prepare = 0;
    7f24:	742e      	strb	r6, [r5, #16]
	_radio.ticker_id_event =
    7f26:	746a      	strb	r2, [r5, #17]
	connection_configure(conn);
    7f28:	f7ff ffb0 	bl	7e8c <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
    7f2c:	2096      	movs	r0, #150	; 0x96
    7f2e:	f003 f91f 	bl	b170 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
    7f32:	4633      	mov	r3, r6
    7f34:	4632      	mov	r2, r6
    7f36:	4631      	mov	r1, r6
    7f38:	4630      	mov	r0, r6
    7f3a:	f003 f895 	bl	b068 <radio_switch_complete_and_tx>
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    7f3e:	f895 2741 	ldrb.w	r2, [r5, #1857]	; 0x741
    7f42:	f8d5 373c 	ldr.w	r3, [r5, #1852]	; 0x73c
    7f46:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
	rx_packet_set(conn, (void *)
    7f4a:	4620      	mov	r0, r4
    7f4c:	3108      	adds	r1, #8
    7f4e:	f7fe fb57 	bl	6600 <rx_packet_set>
	if (conn->data_chan_sel) {
    7f52:	7f63      	ldrb	r3, [r4, #29]
    7f54:	f013 0f40 	tst.w	r3, #64	; 0x40
    7f58:	f104 0217 	add.w	r2, r4, #23
    7f5c:	d04a      	beq.n	7ff4 <event_slave+0x12c>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    7f5e:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    7f60:	8be1      	ldrh	r1, [r4, #30]
    7f62:	3801      	subs	r0, #1
    7f64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7f68:	b280      	uxth	r0, r0
    7f6a:	f7ff fb55 	bl	7618 <chan_sel_2>
	chan_set(data_chan_use);
    7f6e:	f7fd fec1 	bl	5cf4 <chan_set>
	conn->slave.window_widening_event_us +=
    7f72:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    7f74:	6c62      	ldr	r2, [r4, #68]	; 0x44
    7f76:	4413      	add	r3, r2
	conn->slave.window_widening_prepare_us = 0;
    7f78:	2200      	movs	r2, #0
    7f7a:	6462      	str	r2, [r4, #68]	; 0x44
	    conn->slave.window_widening_max_us) {
    7f7c:	6c22      	ldr	r2, [r4, #64]	; 0x40
	conn->slave.window_widening_event_us +=
    7f7e:	64a3      	str	r3, [r4, #72]	; 0x48
	if (conn->slave.window_widening_event_us >
    7f80:	4293      	cmp	r3, r2
		conn->slave.window_widening_event_us =
    7f82:	bf88      	it	hi
    7f84:	64a2      	strhi	r2, [r4, #72]	; 0x48
	conn->slave.window_size_event_us +=
    7f86:	6d23      	ldr	r3, [r4, #80]	; 0x50
    7f88:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
	conn->slave.window_size_prepare_us = 0;
    7f8a:	2600      	movs	r6, #0
	conn->slave.window_size_event_us +=
    7f8c:	4413      	add	r3, r2
    7f8e:	6523      	str	r3, [r4, #80]	; 0x50
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    7f90:	68ea      	ldr	r2, [r5, #12]
	conn->slave.window_size_prepare_us = 0;
    7f92:	64e6      	str	r6, [r4, #76]	; 0x4c
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    7f94:	f107 0109 	add.w	r1, r7, #9
    7f98:	4630      	mov	r0, r6
    7f9a:	f003 f8f5 	bl	b188 <radio_tmr_start>
    7f9e:	4680      	mov	r8, r0
	radio_tmr_aa_capture();
    7fa0:	f003 f98e 	bl	b2c0 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
    7fa4:	4630      	mov	r0, r6
    7fa6:	f003 f9ad 	bl	b304 <radio_tmr_aa_save>
    7faa:	6d23      	ldr	r3, [r4, #80]	; 0x50
	       (conn->slave.window_widening_event_us << 1) +
    7fac:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    7fae:	3378      	adds	r3, #120	; 0x78
	hcto += radio_rx_ready_delay_get(0, 0);
    7fb0:	4631      	mov	r1, r6
    7fb2:	4630      	mov	r0, r6
    7fb4:	eb03 0942 	add.w	r9, r3, r2, lsl #1
    7fb8:	f002 ffdd 	bl	af76 <radio_rx_ready_delay_get>
	hcto += addr_us_get(0);
    7fbc:	44c8      	add	r8, r9
	hcto += radio_rx_chain_delay_get(0, 0);
    7fbe:	4631      	mov	r1, r6
	hcto += addr_us_get(0);
    7fc0:	4480      	add	r8, r0
	hcto += radio_rx_chain_delay_get(0, 0);
    7fc2:	4630      	mov	r0, r6
    7fc4:	f002 ffd9 	bl	af7a <radio_rx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
    7fc8:	4440      	add	r0, r8
    7fca:	f003 f95b 	bl	b284 <radio_tmr_hcto_configure>
	if (preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    7fce:	f894 1020 	ldrb.w	r1, [r4, #32]
    7fd2:	3107      	adds	r1, #7
    7fd4:	463a      	mov	r2, r7
    7fd6:	b2c9      	uxtb	r1, r1
    7fd8:	4620      	mov	r0, r4
    7fda:	f7fe fe9b 	bl	6d14 <preempt_calc>
    7fde:	4603      	mov	r3, r0
    7fe0:	b340      	cbz	r0, 8034 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x34>
		_radio.state = STATE_STOP;
    7fe2:	2304      	movs	r3, #4
    7fe4:	752b      	strb	r3, [r5, #20]
		radio_disable();
    7fe6:	f002 ffd9 	bl	af9c <radio_disable>
	packet_tx_enqueue(2);
    7fea:	2002      	movs	r0, #2
}
    7fec:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	packet_tx_enqueue(2);
    7ff0:	f7fe bb5a 	b.w	66a8 <packet_tx_enqueue>
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    7ff4:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    7ff6:	7fa6      	ldrb	r6, [r4, #30]
    7ff8:	fb01 6606 	mla	r6, r1, r6, r6
    7ffc:	7fe1      	ldrb	r1, [r4, #31]
    7ffe:	2025      	movs	r0, #37	; 0x25
    8000:	440e      	add	r6, r1
    8002:	fb96 f1f0 	sdiv	r1, r6, r0
    8006:	fb00 6611 	mls	r6, r0, r1, r6
    800a:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    800c:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
    800e:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    8010:	5c51      	ldrb	r1, [r2, r1]
    8012:	f006 0607 	and.w	r6, r6, #7
    8016:	fa41 f606 	asr.w	r6, r1, r6
    801a:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
    801c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    8020:	d4a5      	bmi.n	7f6e <event_slave+0xa6>
		chan_index = chan_next % chan_count;
    8022:	fbb0 f1f3 	udiv	r1, r0, r3
    8026:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
    802a:	b2c9      	uxtb	r1, r1
    802c:	4610      	mov	r0, r2
    802e:	f7fd fc6d 	bl	590c <chan_sel_remap>
    8032:	e79c      	b.n	7f6e <event_slave+0xa6>
		ticker_status =
    8034:	4a08      	ldr	r2, [pc, #32]	; (8058 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x58>)
    8036:	4601      	mov	r1, r0
    8038:	f7fc fc54 	bl	48e4 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    803c:	f030 0302 	bics.w	r3, r0, #2
    8040:	d0d3      	beq.n	7fea <event_slave+0x122>
    8042:	4a02      	ldr	r2, [pc, #8]	; (804c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4c>)
    8044:	4905      	ldr	r1, [pc, #20]	; (805c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5c>)
    8046:	e74b      	b.n	7ee0 <event_slave+0x18>
    8048:	200009f8 	.word	0x200009f8
    804c:	0000e4ae 	.word	0x0000e4ae
    8050:	0000e5eb 	.word	0x0000e5eb
    8054:	0000e64c 	.word	0x0000e64c
    8058:	00006431 	.word	0x00006431
    805c:	0000e576 	.word	0x0000e576

00008060 <prepare_pdu_data_tx>:
{
    8060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	    conn->empty ||
    8062:	f890 30a8 	ldrb.w	r3, [r0, #168]	; 0xa8
	if (/* empty packet */
    8066:	061a      	lsls	r2, r3, #24
{
    8068:	4604      	mov	r4, r0
    806a:	460f      	mov	r7, r1
	if (/* empty packet */
    806c:	d409      	bmi.n	8082 <prepare_pdu_data_tx+0x22>
	    !conn->pkt_tx_head ||
    806e:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
	    conn->empty ||
    8072:	b135      	cbz	r5, 8082 <prepare_pdu_data_tx+0x22>
	    !conn->pkt_tx_head ||
    8074:	f013 0f08 	tst.w	r3, #8
    8078:	f8d0 e0f0 	ldr.w	lr, [r0, #240]	; 0xf0
    807c:	d022      	beq.n	80c4 <prepare_pdu_data_tx+0x64>
	    (conn->pause_tx && (conn->pkt_tx_head != conn->pkt_tx_ctrl))) {
    807e:	4575      	cmp	r5, lr
    8080:	d020      	beq.n	80c4 <prepare_pdu_data_tx+0x64>
	conn->empty = 1;
    8082:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    8086:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    808a:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
	pdu_data_tx = (void *)radio_pkt_empty_get();
    808e:	f002 ffd7 	bl	b040 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    8092:	7803      	ldrb	r3, [r0, #0]
    8094:	2201      	movs	r2, #1
    8096:	f362 0301 	bfi	r3, r2, #0, #2
	pdu_data_tx->len = 0;
    809a:	2200      	movs	r2, #0
    809c:	7042      	strb	r2, [r0, #1]
	if (conn->pkt_tx_head) {
    809e:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    80a2:	7003      	strb	r3, [r0, #0]
    80a4:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
    80a6:	b152      	cbz	r2, 80be <prepare_pdu_data_tx+0x5e>
		pdu_data_tx->md = 1;
    80a8:	f043 0310 	orr.w	r3, r3, #16
		pdu_data_tx->md = 0;
    80ac:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->rfu = 0;
    80ae:	7803      	ldrb	r3, [r0, #0]
    80b0:	f36f 1347 	bfc	r3, #5, #3
    80b4:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->resv = 0;
    80b6:	2300      	movs	r3, #0
    80b8:	7083      	strb	r3, [r0, #2]
	*pdu_data_tx = _pdu_data_tx;
    80ba:	6038      	str	r0, [r7, #0]
    80bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pdu_data_tx->md = 0;
    80be:	f362 1304 	bfi	r3, r2, #4, #1
    80c2:	e7f3      	b.n	80ac <prepare_pdu_data_tx+0x4c>
					conn->packet_tx_head_offset);
    80c4:	f894 3101 	ldrb.w	r3, [r4, #257]	; 0x101
		if (!conn->packet_tx_head_len) {
    80c8:	f894 1100 	ldrb.w	r1, [r4, #256]	; 0x100
		_pdu_data_tx = (void *)(conn->pkt_tx_head->pdu_data +
    80cc:	1d2a      	adds	r2, r5, #4
    80ce:	18d0      	adds	r0, r2, r3
		if (!conn->packet_tx_head_len) {
    80d0:	b911      	cbnz	r1, 80d8 <prepare_pdu_data_tx+0x78>
			conn->packet_tx_head_len = _pdu_data_tx->len;
    80d2:	7841      	ldrb	r1, [r0, #1]
    80d4:	f884 1100 	strb.w	r1, [r4, #256]	; 0x100
		if (conn->packet_tx_head_offset) {
    80d8:	b123      	cbz	r3, 80e4 <prepare_pdu_data_tx+0x84>
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    80da:	5cd1      	ldrb	r1, [r2, r3]
    80dc:	2601      	movs	r6, #1
    80de:	f366 0101 	bfi	r1, r6, #0, #2
    80e2:	54d1      	strb	r1, [r2, r3]
		_pdu_data_tx->len = conn->packet_tx_head_len -
    80e4:	f894 6100 	ldrb.w	r6, [r4, #256]	; 0x100
    80e8:	1af6      	subs	r6, r6, r3
    80ea:	b2f6      	uxtb	r6, r6
    80ec:	7046      	strb	r6, [r0, #1]
		_pdu_data_tx->md = 0;
    80ee:	5cd1      	ldrb	r1, [r2, r3]
		if (_pdu_data_tx->len > max_tx_octets) {
    80f0:	2e1b      	cmp	r6, #27
		_pdu_data_tx->md = 0;
    80f2:	f36f 1104 	bfc	r1, #4, #1
    80f6:	54d1      	strb	r1, [r2, r3]
		if (_pdu_data_tx->len > max_tx_octets) {
    80f8:	d905      	bls.n	8106 <prepare_pdu_data_tx+0xa6>
			_pdu_data_tx->len = max_tx_octets;
    80fa:	211b      	movs	r1, #27
    80fc:	7041      	strb	r1, [r0, #1]
			_pdu_data_tx->md = 1;
    80fe:	5cd1      	ldrb	r1, [r2, r3]
    8100:	f041 0110 	orr.w	r1, r1, #16
    8104:	54d1      	strb	r1, [r2, r3]
		if (conn->pkt_tx_head->next) {
    8106:	6829      	ldr	r1, [r5, #0]
    8108:	b119      	cbz	r1, 8112 <prepare_pdu_data_tx+0xb2>
			_pdu_data_tx->md = 1;
    810a:	5cd1      	ldrb	r1, [r2, r3]
    810c:	f041 0110 	orr.w	r1, r1, #16
    8110:	54d1      	strb	r1, [r2, r3]
		if (!conn->pkt_tx_ctrl &&
    8112:	f1be 0f00 	cmp.w	lr, #0
    8116:	d1ca      	bne.n	80ae <prepare_pdu_data_tx+0x4e>
    8118:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
    811c:	429d      	cmp	r5, r3
			conn->pkt_tx_ctrl = conn->pkt_tx_ctrl_last =
    811e:	bf1c      	itt	ne
    8120:	f8c4 50f4 	strne.w	r5, [r4, #244]	; 0xf4
    8124:	f8c4 50f0 	strne.w	r5, [r4, #240]	; 0xf0
    8128:	e7c1      	b.n	80ae <prepare_pdu_data_tx+0x4e>
    812a:	0000      	movs	r0, r0
    812c:	0000      	movs	r0, r0
	...

00008130 <isr>:
{
    8130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8134:	b08f      	sub	sp, #60	; 0x3c
	trx_done = radio_is_done();
    8136:	f002 ff59 	bl	afec <radio_is_done>
    813a:	b2c6      	uxtb	r6, r0
	if (trx_done) {
    813c:	b336      	cbz	r6, 818c <isr+0x5c>
		crc_ok = radio_crc_is_valid();
    813e:	f002 ff75 	bl	b02c <radio_crc_is_valid>
    8142:	b2c7      	uxtb	r7, r0
		devmatch_ok = radio_filter_has_match();
    8144:	f002 fff6 	bl	b134 <radio_filter_has_match>
    8148:	b2c4      	uxtb	r4, r0
		devmatch_id = radio_filter_match_get();
    814a:	f002 fffd 	bl	b148 <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
    814e:	f003 f9a5 	bl	b49c <radio_ar_has_match>
		irkmatch_id = radio_ar_match_get();
    8152:	f003 f991 	bl	b478 <radio_ar_match_get>
		rssi_ready = radio_rssi_is_ready();
    8156:	f002 ffb7 	bl	b0c8 <radio_rssi_is_ready>
    815a:	b2c5      	uxtb	r5, r0
	radio_status_reset();
    815c:	f002 ff30 	bl	afc0 <radio_status_reset>
	radio_tmr_status_reset();
    8160:	f002 fff8 	bl	b154 <radio_tmr_status_reset>
	radio_filter_status_reset();
    8164:	f002 ffde 	bl	b124 <radio_filter_status_reset>
	radio_ar_status_reset();
    8168:	f003 f98c 	bl	b484 <radio_ar_status_reset>
	radio_rssi_status_reset();
    816c:	f002 ffa4 	bl	b0b8 <radio_rssi_status_reset>
	switch (_radio.state) {
    8170:	4a6f      	ldr	r2, [pc, #444]	; (8330 <isr+0x200>)
    8172:	7d13      	ldrb	r3, [r2, #20]
    8174:	4693      	mov	fp, r2
    8176:	2b05      	cmp	r3, #5
    8178:	f201 8302 	bhi.w	9780 <isr+0x1650>
    817c:	e8df f013 	tbh	[pc, r3, lsl #1]
    8180:	0088005d 	.word	0x0088005d
    8184:	0989000a 	.word	0x0989000a
    8188:	09890989 	.word	0x09890989
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0;
    818c:	4635      	mov	r5, r6
    818e:	4634      	mov	r4, r6
    8190:	4637      	mov	r7, r6
    8192:	e7e3      	b.n	815c <isr+0x2c>
	_radio.state = STATE_RX;
    8194:	2301      	movs	r3, #1
    8196:	f88b 3014 	strb.w	r3, [fp, #20]
	hcto = radio_tmr_tifs_base_get()
    819a:	f003 f8dd 	bl	b358 <radio_tmr_tifs_base_get>
    819e:	4604      	mov	r4, r0
	radio_tmr_tifs_set(RADIO_TIFS);
    81a0:	2096      	movs	r0, #150	; 0x96
    81a2:	f002 ffe5 	bl	b170 <radio_tmr_tifs_set>
	switch (_radio.role) {
    81a6:	f89b 3013 	ldrb.w	r3, [fp, #19]
    81aa:	3b01      	subs	r3, #1
    81ac:	34c3      	adds	r4, #195	; 0xc3
    81ae:	2b03      	cmp	r3, #3
    81b0:	d86b      	bhi.n	828a <isr+0x15a>
    81b2:	e8df f003 	tbb	[pc, r3]
    81b6:	2102      	.short	0x2102
    81b8:	4545      	.short	0x4545
		radio_switch_complete_and_tx(0, 0, 0, 0);
    81ba:	2300      	movs	r3, #0
    81bc:	461a      	mov	r2, r3
    81be:	4619      	mov	r1, r3
    81c0:	4618      	mov	r0, r3
    81c2:	f002 ff51 	bl	b068 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(radio_pkt_scratch_get());
    81c6:	f002 ff3f 	bl	b048 <radio_pkt_scratch_get>
    81ca:	f002 fec1 	bl	af50 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    81ce:	f002 ff03 	bl	afd8 <radio_is_ready>
    81d2:	4605      	mov	r5, r0
    81d4:	b110      	cbz	r0, 81dc <isr+0xac>
		LL_ASSERT(!radio_is_ready());
    81d6:	4a57      	ldr	r2, [pc, #348]	; (8334 <isr+0x204>)
	LL_ASSERT(!radio_is_ready());
    81d8:	4957      	ldr	r1, [pc, #348]	; (8338 <isr+0x208>)
    81da:	e174      	b.n	84c6 <isr+0x396>
		hcto += radio_rx_chain_delay_get(0, 0);
    81dc:	4601      	mov	r1, r0
    81de:	f002 fecc 	bl	af7a <radio_rx_chain_delay_get>
		hcto -= radio_tx_chain_delay_get(0, 0);
    81e2:	4629      	mov	r1, r5
		hcto += addr_us_get(0);
    81e4:	4404      	add	r4, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    81e6:	4628      	mov	r0, r5
    81e8:	f002 fec3 	bl	af72 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    81ec:	1a20      	subs	r0, r4, r0
    81ee:	f003 f849 	bl	b284 <radio_tmr_hcto_configure>
		radio_tmr_end_capture();
    81f2:	f003 f899 	bl	b328 <radio_tmr_end_capture>
    81f6:	e020      	b.n	823a <isr+0x10a>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    81f8:	2300      	movs	r3, #0
    81fa:	4619      	mov	r1, r3
    81fc:	461a      	mov	r2, r3
    81fe:	4618      	mov	r0, r3
    8200:	f002 ff32 	bl	b068 <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
    8204:	f89b 2741 	ldrb.w	r2, [fp, #1857]	; 0x741
    8208:	f8db 373c 	ldr.w	r3, [fp, #1852]	; 0x73c
		radio_pkt_rx_set(_radio.packet_rx
    820c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    8210:	3008      	adds	r0, #8
    8212:	f002 fe9d 	bl	af50 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    8216:	f002 fedf 	bl	afd8 <radio_is_ready>
    821a:	4605      	mov	r5, r0
    821c:	2800      	cmp	r0, #0
    821e:	d1da      	bne.n	81d6 <isr+0xa6>
		hcto += radio_rx_chain_delay_get(0, 0);
    8220:	4601      	mov	r1, r0
    8222:	f002 feaa 	bl	af7a <radio_rx_chain_delay_get>
		hcto -= radio_tx_chain_delay_get(0, 0);
    8226:	4629      	mov	r1, r5
		hcto += addr_us_get(0);
    8228:	4404      	add	r4, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    822a:	4628      	mov	r0, r5
    822c:	f002 fea1 	bl	af72 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    8230:	1a20      	subs	r0, r4, r0
    8232:	f003 f827 	bl	b284 <radio_tmr_hcto_configure>
		radio_rssi_measure();
    8236:	f002 ff2f 	bl	b098 <radio_rssi_measure>
}
    823a:	b00f      	add	sp, #60	; 0x3c
    823c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		radio_switch_complete_and_tx(0, 0, 0, 0);
    8240:	2300      	movs	r3, #0
    8242:	461a      	mov	r2, r3
    8244:	4619      	mov	r1, r3
    8246:	4618      	mov	r0, r3
    8248:	f002 ff0e 	bl	b068 <radio_switch_complete_and_tx>
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    824c:	f89b 2741 	ldrb.w	r2, [fp, #1857]	; 0x741
    8250:	f8db 373c 	ldr.w	r3, [fp, #1852]	; 0x73c
		rx_packet_set(_radio.conn_curr,	(void *)
    8254:	f8db 071c 	ldr.w	r0, [fp, #1820]	; 0x71c
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    8258:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		rx_packet_set(_radio.conn_curr,	(void *)
    825c:	3108      	adds	r1, #8
    825e:	f7fe f9cf 	bl	6600 <rx_packet_set>
		LL_ASSERT(!radio_is_ready());
    8262:	f002 feb9 	bl	afd8 <radio_is_ready>
    8266:	4605      	mov	r5, r0
    8268:	2800      	cmp	r0, #0
    826a:	d1b4      	bne.n	81d6 <isr+0xa6>
		hcto += radio_rx_chain_delay_get(0, 0);
    826c:	4601      	mov	r1, r0
    826e:	f002 fe84 	bl	af7a <radio_rx_chain_delay_get>
		hcto -= radio_tx_chain_delay_get(0, 0);
    8272:	4629      	mov	r1, r5
		hcto += addr_us_get(0);
    8274:	4404      	add	r4, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    8276:	4628      	mov	r0, r5
    8278:	f002 fe7b 	bl	af72 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    827c:	1a20      	subs	r0, r4, r0
    827e:	f003 f801 	bl	b284 <radio_tmr_hcto_configure>
		packet_tx_enqueue(1);
    8282:	2001      	movs	r0, #1
    8284:	f7fe fa10 	bl	66a8 <packet_tx_enqueue>
    8288:	e7d7      	b.n	823a <isr+0x10a>
		LL_ASSERT(0);
    828a:	4a2a      	ldr	r2, [pc, #168]	; (8334 <isr+0x204>)
		LL_ASSERT(0);
    828c:	492b      	ldr	r1, [pc, #172]	; (833c <isr+0x20c>)
    828e:	e11a      	b.n	84c6 <isr+0x396>
	if (!((trx_done) || ((SILENT_CONNECTION) &&
    8290:	b92e      	cbnz	r6, 829e <isr+0x16e>
		_radio.state = STATE_CLOSE;
    8292:	2303      	movs	r3, #3
    8294:	f88b 3014 	strb.w	r3, [fp, #20]
		radio_disable();
    8298:	f002 fe80 	bl	af9c <radio_disable>
    829c:	e7cd      	b.n	823a <isr+0x10a>
	switch (_radio.role) {
    829e:	f89b 3013 	ldrb.w	r3, [fp, #19]
    82a2:	3b01      	subs	r3, #1
    82a4:	2b03      	cmp	r3, #3
    82a6:	f201 80f1 	bhi.w	948c <isr+0x135c>
    82aa:	e8df f013 	tbh	[pc, r3, lsl #1]
    82ae:	0004      	.short	0x0004
    82b0:	05150223 	.word	0x05150223
    82b4:	0515      	.short	0x0515
		if (crc_ok) {
    82b6:	2f00      	cmp	r7, #0
    82b8:	d0eb      	beq.n	8292 <isr+0x162>
	pdu_adv = (void *)radio_pkt_scratch_get();
    82ba:	f002 fec5 	bl	b048 <radio_pkt_scratch_get>
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    82be:	f89b 922d 	ldrb.w	r9, [fp, #557]	; 0x22d
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    82c2:	7802      	ldrb	r2, [r0, #0]
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    82c4:	eb09 2909 	add.w	r9, r9, r9, lsl #8
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    82c8:	f002 030f 	and.w	r3, r2, #15
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    82cc:	f109 092b 	add.w	r9, r9, #43	; 0x2b
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    82d0:	2b03      	cmp	r3, #3
	pdu_adv = (void *)radio_pkt_scratch_get();
    82d2:	4607      	mov	r7, r0
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    82d4:	eb0b 0509 	add.w	r5, fp, r9
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    82d8:	d134      	bne.n	8344 <isr+0x214>
    82da:	7843      	ldrb	r3, [r0, #1]
    82dc:	2b0c      	cmp	r3, #12
    82de:	d131      	bne.n	8344 <isr+0x214>
	return (((_radio.advertiser.filter_policy & 0x01) == 0) ||
    82e0:	f89b 302a 	ldrb.w	r3, [fp, #42]	; 0x2a
		(devmatch_ok)) &&
    82e4:	07db      	lsls	r3, r3, #31
    82e6:	d500      	bpl.n	82ea <isr+0x1ba>
	return (((_radio.advertiser.filter_policy & 0x01) == 0) ||
    82e8:	b364      	cbz	r4, 8344 <isr+0x214>
	return (adv->tx_addr == sr->rx_addr) &&
    82ea:	f81b 3009 	ldrb.w	r3, [fp, r9]
    82ee:	f3c3 1380 	ubfx	r3, r3, #6, #1
    82f2:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    82f6:	d125      	bne.n	8344 <isr+0x214>
		!memcmp(adv->adv_ind.addr, sr->scan_req.adv_addr, BDADDR_SIZE);
    82f8:	2206      	movs	r2, #6
    82fa:	f107 0108 	add.w	r1, r7, #8
    82fe:	1ca8      	adds	r0, r5, #2
    8300:	f7f8 f976 	bl	5f0 <memcmp>
	    (pdu_adv->len == sizeof(struct pdu_adv_scan_req)) &&
    8304:	b9f0      	cbnz	r0, 8344 <isr+0x214>
		_radio.state = STATE_CLOSE;
    8306:	2403      	movs	r4, #3
    8308:	f88b 4014 	strb.w	r4, [fp, #20]
		radio_switch_complete_and_disable();
    830c:	f002 feb6 	bl	b07c <radio_switch_complete_and_disable>
		radio_pkt_tx_set(&_radio.advertiser.scan_data.data
    8310:	f89b 0635 	ldrb.w	r0, [fp, #1589]	; 0x635
    8314:	eb00 2000 	add.w	r0, r0, r0, lsl #8
    8318:	f200 4033 	addw	r0, r0, #1075	; 0x433
    831c:	4458      	add	r0, fp
    831e:	f002 fe1d 	bl	af5c <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    8322:	f002 fe59 	bl	afd8 <radio_is_ready>
    8326:	2800      	cmp	r0, #0
    8328:	d087      	beq.n	823a <isr+0x10a>
    832a:	4a05      	ldr	r2, [pc, #20]	; (8340 <isr+0x210>)
    832c:	e754      	b.n	81d8 <isr+0xa8>
    832e:	bf00      	nop
    8330:	200009f8 	.word	0x200009f8
    8334:	0000e1c7 	.word	0x0000e1c7
    8338:	0000e6be 	.word	0x0000e6be
    833c:	0000d773 	.word	0x0000d773
    8340:	0000e1da 	.word	0x0000e1da
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
    8344:	783b      	ldrb	r3, [r7, #0]
    8346:	f003 030f 	and.w	r3, r3, #15
    834a:	2b05      	cmp	r3, #5
    834c:	d1a1      	bne.n	8292 <isr+0x162>
    834e:	787b      	ldrb	r3, [r7, #1]
    8350:	2b22      	cmp	r3, #34	; 0x22
    8352:	d19e      	bne.n	8292 <isr+0x162>
	if (adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    8354:	f81b 3009 	ldrb.w	r3, [fp, r9]
    8358:	f003 030f 	and.w	r3, r3, #15
    835c:	2b01      	cmp	r3, #1
    835e:	f040 80bd 	bne.w	84dc <isr+0x3ac>
		       isr_adv_ci_adva_check(adv, ci) &&
    8362:	4639      	mov	r1, r7
    8364:	4628      	mov	r0, r5
    8366:	f7fd ffb1 	bl	62cc <isr_adv_ci_adva_check>
    836a:	b188      	cbz	r0, 8390 <isr+0x260>
	return (adv->rx_addr == ci->tx_addr) &&
    836c:	783b      	ldrb	r3, [r7, #0]
    836e:	f81b 2009 	ldrb.w	r2, [fp, r9]
    8372:	f3c3 1380 	ubfx	r3, r3, #6, #1
    8376:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    837a:	f040 80ad 	bne.w	84d8 <isr+0x3a8>
	       !memcmp(adv->direct_ind.tgt_addr, ci->connect_ind.init_addr,
    837e:	2206      	movs	r2, #6
    8380:	1cb9      	adds	r1, r7, #2
    8382:	f105 0008 	add.w	r0, r5, #8
    8386:	f7f8 f933 	bl	5f0 <memcmp>
	return (adv->rx_addr == ci->tx_addr) &&
    838a:	fab0 f080 	clz	r0, r0
    838e:	0940      	lsrs	r0, r0, #5
		   (pdu_adv->len == sizeof(struct pdu_adv_connect_ind)) &&
    8390:	2800      	cmp	r0, #0
    8392:	f43f af7e 	beq.w	8292 <isr+0x162>
		   isr_adv_ci_check(_pdu_adv, pdu_adv, devmatch_ok, &rl_idx) &&
    8396:	f89b 3782 	ldrb.w	r3, [fp, #1922]	; 0x782
    839a:	b133      	cbz	r3, 83aa <isr+0x27a>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
    839c:	f89b 3780 	ldrb.w	r3, [fp, #1920]	; 0x780
    83a0:	f89b 2781 	ldrb.w	r2, [fp, #1921]	; 0x781
    83a4:	429a      	cmp	r2, r3
    83a6:	f47f af74 	bne.w	8292 <isr+0x162>
    83aa:	f8db 3638 	ldr.w	r3, [fp, #1592]	; 0x638
    83ae:	2b00      	cmp	r3, #0
    83b0:	f43f af6f 	beq.w	8292 <isr+0x162>
			node_rx = packet_rx_reserve_get(4);
    83b4:	2004      	movs	r0, #4
    83b6:	f7fd fac5 	bl	5944 <packet_rx_reserve_get>
		if (!node_rx) {
    83ba:	4605      	mov	r5, r0
    83bc:	2800      	cmp	r0, #0
    83be:	f43f af68 	beq.w	8292 <isr+0x162>
		_radio.state = STATE_STOP;
    83c2:	f04f 0a04 	mov.w	sl, #4
    83c6:	f88b a014 	strb.w	sl, [fp, #20]
		radio_disable();
    83ca:	f002 fde7 	bl	af9c <radio_disable>
		conn = _radio.advertiser.conn;
    83ce:	f8db 4638 	ldr.w	r4, [fp, #1592]	; 0x638
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    83d2:	f8db 1710 	ldr.w	r1, [fp, #1808]	; 0x710
		_radio.advertiser.conn = NULL;
    83d6:	f04f 0800 	mov.w	r8, #0
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    83da:	f44f 7282 	mov.w	r2, #260	; 0x104
    83de:	4620      	mov	r0, r4
		_radio.advertiser.conn = NULL;
    83e0:	f8cb 8638 	str.w	r8, [fp, #1592]	; 0x638
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    83e4:	f7fb fb27 	bl	3a36 <mem_index_get>
		memcpy(&conn->crc_init[0],
    83e8:	2203      	movs	r2, #3
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    83ea:	8420      	strh	r0, [r4, #32]
		memcpy(&conn->crc_init[0],
    83ec:	f107 0112 	add.w	r1, r7, #18
    83f0:	f104 0014 	add.w	r0, r4, #20
    83f4:	f7f8 f911 	bl	61a <memcpy>
		memcpy(&conn->access_addr[0],
    83f8:	f104 0310 	add.w	r3, r4, #16
    83fc:	4618      	mov	r0, r3
		memcpy(&conn->data_chan_map[0],
    83fe:	f104 0617 	add.w	r6, r4, #23
		memcpy(&conn->access_addr[0],
    8402:	4652      	mov	r2, sl
    8404:	f107 010e 	add.w	r1, r7, #14
    8408:	930a      	str	r3, [sp, #40]	; 0x28
    840a:	f7f8 f906 	bl	61a <memcpy>
		memcpy(&conn->data_chan_map[0],
    840e:	2205      	movs	r2, #5
    8410:	f107 011e 	add.w	r1, r7, #30
    8414:	4630      	mov	r0, r6
    8416:	f7f8 f900 	bl	61a <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    841a:	2105      	movs	r1, #5
    841c:	4630      	mov	r0, r6
    841e:	f7fb fc71 	bl	3d04 <util_ones_count_get>
		conn->data_chan_count =
    8422:	7f62      	ldrb	r2, [r4, #29]
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    8424:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		conn->data_chan_count =
    8426:	f360 0205 	bfi	r2, r0, #0, #6
    842a:	7762      	strb	r2, [r4, #29]
		conn->data_chan_hop = pdu_adv->connect_ind.hop;
    842c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    8430:	f3c2 0204 	ubfx	r2, r2, #0, #5
    8434:	77a2      	strb	r2, [r4, #30]
			pdu_adv->connect_ind.interval;
    8436:	8b3a      	ldrh	r2, [r7, #24]
		conn->conn_interval =
    8438:	84a2      	strh	r2, [r4, #36]	; 0x24
			pdu_adv->connect_ind.interval * 1250;
    843a:	f240 46e2 	movw	r6, #1250	; 0x4e2
    843e:	4356      	muls	r6, r2
		conn->latency = pdu_adv->connect_ind.latency;
    8440:	7ef9      	ldrb	r1, [r7, #27]
    8442:	7eba      	ldrb	r2, [r7, #26]
    8444:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    8448:	84e2      	strh	r2, [r4, #38]	; 0x26
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    844a:	4619      	mov	r1, r3
    844c:	4652      	mov	r2, sl
    844e:	f104 0054 	add.w	r0, r4, #84	; 0x54
    8452:	f7f8 f8e2 	bl	61a <memcpy>
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
    8456:	8bbb      	ldrh	r3, [r7, #28]
    8458:	f242 7210 	movw	r2, #10000	; 0x2710
    845c:	fb02 6303 	mla	r3, r2, r3, r6
    8460:	3b01      	subs	r3, #1
    8462:	fbb3 f3f6 	udiv	r3, r3, r6
    8466:	85e3      	strh	r3, [r4, #46]	; 0x2e
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
    8468:	4b97      	ldr	r3, [pc, #604]	; (86c8 <isr+0x598>)
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    846a:	4639      	mov	r1, r7
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
    846c:	4433      	add	r3, r6
    846e:	fbb3 f3f6 	udiv	r3, r3, r6
    8472:	8663      	strh	r3, [r4, #50]	; 0x32
		node_rx->hdr.handle = conn->handle;
    8474:	8c23      	ldrh	r3, [r4, #32]
		radio_le_conn_cmplt->status = 0x00;
    8476:	f885 800b 	strb.w	r8, [r5, #11]
		radio_le_conn_cmplt->role = 0x01;
    847a:	f04f 0801 	mov.w	r8, #1
    847e:	f885 800c 	strb.w	r8, [r5, #12]
		node_rx->hdr.handle = conn->handle;
    8482:	80eb      	strh	r3, [r5, #6]
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    8484:	f811 3b02 	ldrb.w	r3, [r1], #2
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    8488:	2206      	movs	r2, #6
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    848a:	f3c3 1380 	ubfx	r3, r3, #6, #1
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    848e:	712a      	strb	r2, [r5, #4]
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    8490:	736b      	strb	r3, [r5, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    8492:	f105 000e 	add.w	r0, r5, #14
    8496:	f7f8 f8c0 	bl	61a <memcpy>
			pdu_adv->connect_ind.interval;
    849a:	8b3b      	ldrh	r3, [r7, #24]
		radio_le_conn_cmplt->interval =
    849c:	82ab      	strh	r3, [r5, #20]
			pdu_adv->connect_ind.latency;
    849e:	8b7b      	ldrh	r3, [r7, #26]
		radio_le_conn_cmplt->latency =
    84a0:	82eb      	strh	r3, [r5, #22]
			pdu_adv->connect_ind.timeout;
    84a2:	8bbb      	ldrh	r3, [r7, #28]
		radio_le_conn_cmplt->timeout =
    84a4:	832b      	strh	r3, [r5, #24]
			pdu_adv->connect_ind.sca;
    84a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    84aa:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
    84ae:	76ab      	strb	r3, [r5, #26]
		rx_fc_lock(conn->handle);
    84b0:	8c20      	ldrh	r0, [r4, #32]
    84b2:	f7fd ff2f 	bl	6314 <rx_fc_lock>
		packet_rx_enqueue();
    84b6:	f7fe fb2b 	bl	6b10 <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
    84ba:	2003      	movs	r0, #3
    84bc:	f7fd fa42 	bl	5944 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    84c0:	b9d0      	cbnz	r0, 84f8 <isr+0x3c8>
    84c2:	4a82      	ldr	r2, [pc, #520]	; (86cc <isr+0x59c>)
			LL_ASSERT(node_rx);
    84c4:	4982      	ldr	r1, [pc, #520]	; (86d0 <isr+0x5a0>)
		LL_ASSERT(0);
    84c6:	2003      	movs	r0, #3
    84c8:	f7f9 fe92 	bl	21f0 <bt_log>
    84cc:	4040      	eors	r0, r0
    84ce:	f380 8811 	msr	BASEPRI, r0
    84d2:	f04f 0004 	mov.w	r0, #4
    84d6:	df02      	svc	2
	return (adv->rx_addr == ci->tx_addr) &&
    84d8:	2000      	movs	r0, #0
    84da:	e759      	b.n	8390 <isr+0x260>
	return (((_radio.advertiser.filter_policy & 0x02) == 0) ||
    84dc:	f89b 302a 	ldrb.w	r3, [fp, #42]	; 0x2a
		(devmatch_ok)) &&
    84e0:	079e      	lsls	r6, r3, #30
    84e2:	d500      	bpl.n	84e6 <isr+0x3b6>
	return (((_radio.advertiser.filter_policy & 0x02) == 0) ||
    84e4:	b134      	cbz	r4, 84f4 <isr+0x3c4>
	       isr_adv_ci_adva_check(adv, ci);
    84e6:	4639      	mov	r1, r7
    84e8:	4628      	mov	r0, r5
    84ea:	f7fd feef 	bl	62cc <isr_adv_ci_adva_check>
		(devmatch_ok)) &&
    84ee:	f000 0001 	and.w	r0, r0, #1
    84f2:	e74d      	b.n	8390 <isr+0x260>
    84f4:	4620      	mov	r0, r4
    84f6:	e7fa      	b.n	84ee <isr+0x3be>
			node_rx->hdr.handle = conn->handle;
    84f8:	8c23      	ldrh	r3, [r4, #32]
    84fa:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    84fc:	230a      	movs	r3, #10
    84fe:	7103      	strb	r3, [r0, #4]
			if (pdu_adv->chan_sel) {
    8500:	783b      	ldrb	r3, [r7, #0]
    8502:	f013 0320 	ands.w	r3, r3, #32
    8506:	f000 80d7 	beq.w	86b8 <isr+0x588>
					((u16_t)conn->access_addr[1] << 8) |
    850a:	7c62      	ldrb	r2, [r4, #17]
					conn->access_addr[0];
    850c:	7c23      	ldrb	r3, [r4, #16]
					((u16_t)conn->access_addr[3] << 8) |
    850e:	7ce1      	ldrb	r1, [r4, #19]
				u16_t aa_ls =
    8510:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
    8514:	7ca2      	ldrb	r2, [r4, #18]
				u16_t aa_ms =
    8516:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
    851a:	7f61      	ldrb	r1, [r4, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    851c:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
    851e:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    8522:	7761      	strb	r1, [r4, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    8524:	83e3      	strh	r3, [r4, #30]
				le_chan_sel_algo->chan_sel_algo = 0x01;
    8526:	f880 800b 	strb.w	r8, [r0, #11]
			packet_rx_enqueue();
    852a:	f7fe faf1 	bl	6b10 <packet_rx_enqueue>
		conn->slave.sca = pdu_adv->connect_ind.sca;
    852e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    8532:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
			(((gc_lookup_ppm[_radio.sca] +
    8536:	4967      	ldr	r1, [pc, #412]	; (86d4 <isr+0x5a4>)
		conn->slave.sca = pdu_adv->connect_ind.sca;
    8538:	0952      	lsrs	r2, r2, #5
    853a:	f362 0384 	bfi	r3, r2, #2, #3
    853e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
			(((gc_lookup_ppm[_radio.sca] +
    8542:	f89b 3728 	ldrb.w	r3, [fp, #1832]	; 0x728
			   gc_lookup_ppm[conn->slave.sca]) *
    8546:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
			(((gc_lookup_ppm[_radio.sca] +
    854a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    854e:	4413      	add	r3, r2
			   gc_lookup_ppm[conn->slave.sca]) *
    8550:	4373      	muls	r3, r6
			  conn_interval_us) + (1000000 - 1)) / 1000000;
    8552:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
    8556:	4a60      	ldr	r2, [pc, #384]	; (86d8 <isr+0x5a8>)
    8558:	f203 233f 	addw	r3, r3, #575	; 0x23f
    855c:	fbb3 f3f2 	udiv	r3, r3, r2
		conn->slave.window_widening_periodic_us =
    8560:	63e3      	str	r3, [r4, #60]	; 0x3c
			(conn_interval_us >> 1) - RADIO_TIFS;
    8562:	0873      	lsrs	r3, r6, #1
    8564:	3b96      	subs	r3, #150	; 0x96
		conn->slave.window_widening_max_us =
    8566:	6423      	str	r3, [r4, #64]	; 0x40
			pdu_adv->connect_ind.win_size * 1250;
    8568:	7d7b      	ldrb	r3, [r7, #21]
    856a:	f240 4ae2 	movw	sl, #1250	; 0x4e2
		conn->slave.window_size_prepare_us = 0;
    856e:	f04f 0800 	mov.w	r8, #0
			pdu_adv->connect_ind.win_size * 1250;
    8572:	fb0a f303 	mul.w	r3, sl, r3
		conn->slave.window_size_event_us =
    8576:	6523      	str	r3, [r4, #80]	; 0x50
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    8578:	4641      	mov	r1, r8
		conn->slave.window_size_prepare_us = 0;
    857a:	f8c4 804c 	str.w	r8, [r4, #76]	; 0x4c
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    857e:	4640      	mov	r0, r8
    8580:	f002 fcf9 	bl	af76 <radio_rx_ready_delay_get>
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    8584:	4955      	ldr	r1, [pc, #340]	; (86dc <isr+0x5ac>)
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    8586:	900a      	str	r0, [sp, #40]	; 0x28
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    8588:	f200 4052 	addw	r0, r0, #1106	; 0x452
    858c:	a34c      	add	r3, pc, #304	; (adr r3, 86c0 <isr+0x590>)
    858e:	e9d3 2300 	ldrd	r2, r3, [r3]
    8592:	fba0 0101 	umull	r0, r1, r0, r1
    8596:	f7f7 fe67 	bl	268 <__aeabi_uldivmod>
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    859a:	f8db 5784 	ldr.w	r5, [fp, #1924]	; 0x784
    859e:	6065      	str	r5, [r4, #4]
		conn->hdr.ticks_xtal_to_start =
    85a0:	2327      	movs	r3, #39	; 0x27
		ticks_slot_offset =
    85a2:	429d      	cmp	r5, r3
    85a4:	bf38      	it	cc
    85a6:	461d      	movcc	r5, r3
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    85a8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		conn->hdr.ticks_xtal_to_start =
    85ac:	6023      	str	r3, [r4, #0]
		conn_interval_us -=
    85ae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
		conn->hdr.ticks_slot =
    85b0:	60e0      	str	r0, [r4, #12]
		conn->hdr.ticks_preempt_to_start =
    85b2:	f8c4 8008 	str.w	r8, [r4, #8]
		conn_interval_us -=
    85b6:	1af6      	subs	r6, r6, r3
		conn_offset_us = radio_tmr_end_get();
    85b8:	f002 fec8 	bl	b34c <radio_tmr_end_get>
    85bc:	900b      	str	r0, [sp, #44]	; 0x2c
			((u64_t)pdu_adv->connect_ind.win_offset +
    85be:	8af8      	ldrh	r0, [r7, #22]
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    85c0:	4641      	mov	r1, r8
		conn_offset_us +=
    85c2:	fb00 aa0a 	mla	sl, r0, sl, sl
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    85c6:	4640      	mov	r0, r8
    85c8:	f002 fcd3 	bl	af72 <radio_tx_chain_delay_get>
    85cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    85ce:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
    85d2:	449a      	add	sl, r3
		conn_offset_us -= RADIO_TICKER_JITTER_US;
    85d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    85d6:	ebaa 0a00 	sub.w	sl, sl, r0
    85da:	ebaa 0303 	sub.w	r3, sl, r3
    85de:	930a      	str	r3, [sp, #40]	; 0x28
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    85e0:	f240 5323 	movw	r3, #1315	; 0x523
    85e4:	9300      	str	r3, [sp, #0]
    85e6:	2205      	movs	r2, #5
    85e8:	4b3d      	ldr	r3, [pc, #244]	; (86e0 <isr+0x5b0>)
    85ea:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 86dc <isr+0x5ac>
    85ee:	4641      	mov	r1, r8
    85f0:	4640      	mov	r0, r8
    85f2:	f7fc f8f9 	bl	47e8 <ticker_stop>
		ticker_stop_adv_assert(ticker_status, (void *)__LINE__);
    85f6:	f240 5124 	movw	r1, #1316	; 0x524
    85fa:	f7fd feb7 	bl	636c <ticker_stop_adv_assert>
		if (_pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    85fe:	f81b 3009 	ldrb.w	r3, [fp, r9]
    8602:	f003 030f 	and.w	r3, r3, #15
    8606:	2b01      	cmp	r3, #1
    8608:	d107      	bne.n	861a <isr+0x4ea>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    860a:	f8cd 8000 	str.w	r8, [sp]
    860e:	4643      	mov	r3, r8
    8610:	2203      	movs	r2, #3
    8612:	4641      	mov	r1, r8
    8614:	4640      	mov	r0, r8
    8616:	f7fc f8e7 	bl	47e8 <ticker_stop>
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    861a:	fba6 670a 	umull	r6, r7, r6, sl
    861e:	a328      	add	r3, pc, #160	; (adr r3, 86c0 <isr+0x590>)
    8620:	e9d3 2300 	ldrd	r2, r3, [r3]
    8624:	4630      	mov	r0, r6
    8626:	4639      	mov	r1, r7
    8628:	f7f7 fe1e 	bl	268 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    862c:	f8db 3008 	ldr.w	r3, [fp, #8]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    8630:	4a2c      	ldr	r2, [pc, #176]	; (86e4 <isr+0x5b4>)
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    8632:	eba3 0b05 	sub.w	fp, r3, r5
    8636:	f894 3020 	ldrb.w	r3, [r4, #32]
    863a:	9406      	str	r4, [sp, #24]
    863c:	3307      	adds	r3, #7
    863e:	b2db      	uxtb	r3, r3
    8640:	930b      	str	r3, [sp, #44]	; 0x2c
    8642:	f240 533b 	movw	r3, #1339	; 0x53b
    8646:	9308      	str	r3, [sp, #32]
    8648:	4b27      	ldr	r3, [pc, #156]	; (86e8 <isr+0x5b8>)
    864a:	9307      	str	r3, [sp, #28]
    864c:	4b27      	ldr	r3, [pc, #156]	; (86ec <isr+0x5bc>)
    864e:	9305      	str	r3, [sp, #20]
    8650:	68e3      	ldr	r3, [r4, #12]
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    8652:	4680      	mov	r8, r0
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    8654:	441d      	add	r5, r3
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    8656:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    865a:	2307      	movs	r3, #7
    865c:	2100      	movs	r1, #0
    865e:	4343      	muls	r3, r0
    8660:	fb02 3301 	mla	r3, r2, r1, r3
    8664:	fba0 0102 	umull	r0, r1, r0, r2
    8668:	1a30      	subs	r0, r6, r0
    866a:	4419      	add	r1, r3
    866c:	eb67 0101 	sbc.w	r1, r7, r1
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    8670:	2400      	movs	r4, #0
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    8672:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8676:	2300      	movs	r3, #0
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    8678:	9504      	str	r5, [sp, #16]
    867a:	9403      	str	r4, [sp, #12]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    867c:	f7f7 fdf4 	bl	268 <__aeabi_uldivmod>
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    8680:	990a      	ldr	r1, [sp, #40]	; 0x28
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    8682:	9002      	str	r0, [sp, #8]
    8684:	f028 437f 	bic.w	r3, r8, #4278190080	; 0xff000000
    8688:	9301      	str	r3, [sp, #4]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    868a:	fba1 010a 	umull	r0, r1, r1, sl
    868e:	a30c      	add	r3, pc, #48	; (adr r3, 86c0 <isr+0x590>)
    8690:	e9d3 2300 	ldrd	r2, r3, [r3]
    8694:	f7f7 fde8 	bl	268 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    8698:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    869c:	9000      	str	r0, [sp, #0]
    869e:	465b      	mov	r3, fp
    86a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    86a2:	4621      	mov	r1, r4
    86a4:	4620      	mov	r0, r4
    86a6:	f7fc f801 	bl	46ac <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    86aa:	f030 0302 	bics.w	r3, r0, #2
    86ae:	f43f adc4 	beq.w	823a <isr+0x10a>
    86b2:	4a06      	ldr	r2, [pc, #24]	; (86cc <isr+0x59c>)
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    86b4:	490e      	ldr	r1, [pc, #56]	; (86f0 <isr+0x5c0>)
    86b6:	e706      	b.n	84c6 <isr+0x396>
				le_chan_sel_algo->chan_sel_algo = 0x00;
    86b8:	72c3      	strb	r3, [r0, #11]
    86ba:	e736      	b.n	852a <isr+0x3fa>
    86bc:	f3af 8000 	nop.w
    86c0:	1afd498d 	.word	0x1afd498d
    86c4:	00000007 	.word	0x00000007
    86c8:	026259ff 	.word	0x026259ff
    86cc:	0000e1da 	.word	0x0000e1da
    86d0:	0000e8ac 	.word	0x0000e8ac
    86d4:	0000e6ae 	.word	0x0000e6ae
    86d8:	000f4240 	.word	0x000f4240
    86dc:	3b9aca00 	.word	0x3b9aca00
    86e0:	0000636d 	.word	0x0000636d
    86e4:	1afd498d 	.word	0x1afd498d
    86e8:	00006349 	.word	0x00006349
    86ec:	00007e89 	.word	0x00007e89
    86f0:	0000e576 	.word	0x0000e576
		if (crc_ok &&
    86f4:	2f00      	cmp	r7, #0
    86f6:	f000 82ab 	beq.w	8c50 <isr+0xb20>
	return ((_radio.scanner.filter_policy & 0x01) == 0) ||
    86fa:	f89b 364d 	ldrb.w	r3, [fp, #1613]	; 0x64d
    86fe:	06d8      	lsls	r0, r3, #27
    8700:	d502      	bpl.n	8708 <isr+0x5d8>
		if (crc_ok &&
    8702:	2c00      	cmp	r4, #0
    8704:	f000 82a4 	beq.w	8c50 <isr+0xb20>
	bool dir_report = false;
    8708:	2300      	movs	r3, #0
    870a:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    870e:	f89b 2741 	ldrb.w	r2, [fp, #1857]	; 0x741
    8712:	f8db 373c 	ldr.w	r3, [fp, #1852]	; 0x73c
    8716:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
		if(pdu_adv_rx->type == 0x07){			//PDU_ADV_TYPE_EXT_IND
    871a:	7a3b      	ldrb	r3, [r7, #8]
    871c:	f003 030f 	and.w	r3, r3, #15
    8720:	2b07      	cmp	r3, #7
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    8722:	f107 0408 	add.w	r4, r7, #8
		if(pdu_adv_rx->type == 0x07){			//PDU_ADV_TYPE_EXT_IND
    8726:	d169      	bne.n	87fc <isr+0x6cc>
		if(h->adv_addr){
    8728:	7afb      	ldrb	r3, [r7, #11]
    872a:	07d9      	lsls	r1, r3, #31
			ptr += BDADDR_SIZE;
    872c:	bf4c      	ite	mi
    872e:	f107 0612 	addmi.w	r6, r7, #18
		ptr = (u8_t *)h + sizeof(*h);
    8732:	f107 060c 	addpl.w	r6, r7, #12
		if(h->tgt_addr){
    8736:	079a      	lsls	r2, r3, #30
			ptr += BDADDR_SIZE;
    8738:	bf48      	it	mi
    873a:	3606      	addmi	r6, #6
		if(h->adi){
    873c:	0718      	lsls	r0, r3, #28
		if(pdu_adv_rx->len ==0x18){
    873e:	7a7b      	ldrb	r3, [r7, #9]
			ptr += sizeof(*adi_ptr);
    8740:	bf48      	it	mi
    8742:	3602      	addmi	r6, #2
		if(pdu_adv_rx->len ==0x18){
    8744:	2b18      	cmp	r3, #24
    8746:	d11d      	bne.n	8784 <isr+0x654>
			stop_time_int = k_cycle_get_32();
    8748:	f7f9 fbfc 	bl	1f44 <_timer_cycle_get_32>
    874c:	4bd2      	ldr	r3, [pc, #840]	; (8a98 <isr+0x968>)
    874e:	6018      	str	r0, [r3, #0]
			event_time_int = (stop_time_int - start_time_int);
    8750:	4bd2      	ldr	r3, [pc, #840]	; (8a9c <isr+0x96c>)
    8752:	681b      	ldr	r3, [r3, #0]
    8754:	eba0 0e03 	sub.w	lr, r0, r3
    8758:	4bd1      	ldr	r3, [pc, #836]	; (8aa0 <isr+0x970>)
    875a:	f8c3 e000 	str.w	lr, [r3]
			Time_difference_int = (SYS_CLOCK_HW_CYCLES_TO_NS(event_time_int))/1000;
    875e:	4bd1      	ldr	r3, [pc, #836]	; (8aa4 <isr+0x974>)
    8760:	681a      	ldr	r2, [r3, #0]
    8762:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
    8766:	fb82 2308 	smull	r2, r3, r2, r8
    876a:	fba2 010e 	umull	r0, r1, r2, lr
    876e:	fb0e 1103 	mla	r1, lr, r3, r1
    8772:	4bcd      	ldr	r3, [pc, #820]	; (8aa8 <isr+0x978>)
    8774:	681a      	ldr	r2, [r3, #0]
    8776:	17d3      	asrs	r3, r2, #31
    8778:	f7f7 fd76 	bl	268 <__aeabi_uldivmod>
    877c:	4bcb      	ldr	r3, [pc, #812]	; (8aac <isr+0x97c>)
    877e:	fbb0 f0f8 	udiv	r0, r0, r8
    8782:	6018      	str	r0, [r3, #0]
		if(h->aux_ptr && !aux_scan ){
    8784:	7afb      	ldrb	r3, [r7, #11]
    8786:	06d9      	lsls	r1, r3, #27
    8788:	d538      	bpl.n	87fc <isr+0x6cc>
    878a:	4bc9      	ldr	r3, [pc, #804]	; (8ab0 <isr+0x980>)
    878c:	781a      	ldrb	r2, [r3, #0]
    878e:	2a00      	cmp	r2, #0
    8790:	d134      	bne.n	87fc <isr+0x6cc>
			aux_scan = 0x01;
    8792:	2201      	movs	r2, #1
    8794:	701a      	strb	r2, [r3, #0]
			_radio.ext_scanner.chan_index = ap->chan_idx;
    8796:	7833      	ldrb	r3, [r6, #0]
    8798:	f3c3 0305 	ubfx	r3, r3, #0, #6
    879c:	f88b 36b0 	strb.w	r3, [fp, #1712]	; 0x6b0
			_radio.ext_scanner.chan_off	= ap->offs;
    87a0:	78b3      	ldrb	r3, [r6, #2]
    87a2:	7872      	ldrb	r2, [r6, #1]
    87a4:	f003 031f 	and.w	r3, r3, #31
    87a8:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    87ac:	4bc1      	ldr	r3, [pc, #772]	; (8ab4 <isr+0x984>)
    87ae:	b290      	uxth	r0, r2
    87b0:	2100      	movs	r1, #0
    87b2:	e9c3 0100 	strd	r0, r1, [r3]
			_radio.ext_scanner.chan_off_debug = ap->offs;
    87b6:	e9c3 0102 	strd	r0, r1, [r3, #8]
			_radio.ext_scanner.off_unit	= ap->offs_units;
    87ba:	7831      	ldrb	r1, [r6, #0]
    87bc:	f3c1 11c0 	ubfx	r1, r1, #7, #1
			if(_radio.ext_scanner.off_unit == 0 ){
    87c0:	f011 0fff 	tst.w	r1, #255	; 0xff
			_radio.ext_scanner.off_unit	= ap->offs_units;
    87c4:	f88b 16d4 	strb.w	r1, [fp, #1748]	; 0x6d4
    87c8:	4619      	mov	r1, r3
				_radio.ext_scanner.chan_off *= 30;
    87ca:	bf0c      	ite	eq
    87cc:	231e      	moveq	r3, #30
				_radio.ext_scanner.chan_off *= 1200;//300;
    87ce:	f44f 6396 	movne.w	r3, #1200	; 0x4b0
    87d2:	fba2 2303 	umull	r2, r3, r2, r3
    87d6:	e9c1 2300 	strd	r2, r3, [r1]
			_radio.ext_scanner.chan_off_calculation = _radio.ext_scanner.chan_off;
    87da:	e9d1 0100 	ldrd	r0, r1, [r1]
    87de:	4bb6      	ldr	r3, [pc, #728]	; (8ab8 <isr+0x988>)
    87e0:	e9c3 0100 	strd	r0, r1, [r3]
			start_time_ticker = k_cycle_get_32();
    87e4:	f7f9 fbae 	bl	1f44 <_timer_cycle_get_32>
    87e8:	4bb4      	ldr	r3, [pc, #720]	; (8abc <isr+0x98c>)
    87ea:	6018      	str	r0, [r3, #0]
			start_time_int = k_cycle_get_32();
    87ec:	f7f9 fbaa 	bl	1f44 <_timer_cycle_get_32>
    87f0:	4baa      	ldr	r3, [pc, #680]	; (8a9c <isr+0x96c>)
    87f2:	6018      	str	r0, [r3, #0]
		_radio.ext_scanner.ticks_now = ticker_ticks_now_get();
    87f4:	f7fc f8c8 	bl	4988 <ticker_ticks_now_get>
    87f8:	f8cb 070c 	str.w	r0, [fp, #1804]	; 0x70c
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    87fc:	f8db 3674 	ldr.w	r3, [fp, #1652]	; 0x674
    8800:	2b00      	cmp	r3, #0
    8802:	f000 80d0 	beq.w	89a6 <isr+0x876>
    8806:	f89b 3782 	ldrb.w	r3, [fp, #1922]	; 0x782
    880a:	b133      	cbz	r3, 881a <isr+0x6ea>
				      (_radio.fc_req == _radio.fc_ack)) &&
    880c:	f89b 3780 	ldrb.w	r3, [fp, #1920]	; 0x780
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    8810:	f89b 2781 	ldrb.w	r2, [fp, #1921]	; 0x781
    8814:	429a      	cmp	r2, r3
    8816:	f040 80c6 	bne.w	89a6 <isr+0x876>
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
    881a:	f89b 364d 	ldrb.w	r3, [fp, #1613]	; 0x64d
		isr_scan_init_adva_check(pdu, rl_idx)) &&
    881e:	06da      	lsls	r2, r3, #27
    8820:	f140 80b1 	bpl.w	8986 <isr+0x856>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
    8824:	7a3b      	ldrb	r3, [r7, #8]
		isr_scan_init_adva_check(pdu, rl_idx)) &&
    8826:	f013 030f 	ands.w	r3, r3, #15
    882a:	f040 8116 	bne.w	8a5a <isr+0x92a>
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
    882e:	f002 fd8d 	bl	b34c <radio_tmr_end_get>
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
    8832:	f8db 3648 	ldr.w	r3, [fp, #1608]	; 0x648
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
    8836:	f200 2616 	addw	r6, r0, #534	; 0x216
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
    883a:	48a1      	ldr	r0, [pc, #644]	; (8ac0 <isr+0x990>)
    883c:	2207      	movs	r2, #7
    883e:	fba3 0100 	umull	r0, r1, r3, r0
    8842:	fb02 1103 	mla	r1, r2, r3, r1
    8846:	a392      	add	r3, pc, #584	; (adr r3, 8a90 <isr+0x960>)
    8848:	e9d3 2300 	ldrd	r2, r3, [r3]
    884c:	f7f7 fd0c 	bl	268 <__aeabi_uldivmod>
    8850:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
	    isr_scan_init_check(pdu_adv_rx, rl_idx) &&
    8854:	4286      	cmp	r6, r0
    8856:	f080 80a6 	bcs.w	89a6 <isr+0x876>
			node_rx = packet_rx_reserve_get(4);
    885a:	2004      	movs	r0, #4
    885c:	f7fd f872 	bl	5944 <packet_rx_reserve_get>
		if (node_rx == 0) {
    8860:	4682      	mov	sl, r0
    8862:	2800      	cmp	r0, #0
    8864:	f000 81f4 	beq.w	8c50 <isr+0xb20>
		_radio.state = STATE_STOP;
    8868:	2604      	movs	r6, #4
		_radio.scanner.conn = NULL;
    886a:	2300      	movs	r3, #0
		conn = _radio.scanner.conn;
    886c:	f8db 4674 	ldr.w	r4, [fp, #1652]	; 0x674
		_radio.state = STATE_STOP;
    8870:	f88b 6014 	strb.w	r6, [fp, #20]
		_radio.scanner.conn = NULL;
    8874:	f8cb 3674 	str.w	r3, [fp, #1652]	; 0x674
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    8878:	f002 fbe6 	bl	b048 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_IND;
    887c:	7803      	ldrb	r3, [r0, #0]
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    887e:	4991      	ldr	r1, [pc, #580]	; (8ac4 <isr+0x994>)
			pdu_adv_tx->chan_sel = 1;
    8880:	f003 03d0 	and.w	r3, r3, #208	; 0xd0
    8884:	f043 0325 	orr.w	r3, r3, #37	; 0x25
    8888:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    888a:	7a3a      	ldrb	r2, [r7, #8]
    888c:	b2db      	uxtb	r3, r3
    888e:	f3c2 1280 	ubfx	r2, r2, #6, #1
    8892:	f362 13c7 	bfi	r3, r2, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_connect_ind);
    8896:	2222      	movs	r2, #34	; 0x22
    8898:	7042      	strb	r2, [r0, #1]
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    889a:	f89b 264d 	ldrb.w	r2, [fp, #1613]	; 0x64d
    889e:	09d2      	lsrs	r2, r2, #7
    88a0:	f362 1386 	bfi	r3, r2, #6, #1
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    88a4:	4605      	mov	r5, r0
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    88a6:	2206      	movs	r2, #6
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    88a8:	f800 3b02 	strb.w	r3, [r0], #2
		memcpy(&pdu_adv_tx->connect_ind.adv_addr[0],
    88ac:	f105 0908 	add.w	r9, r5, #8
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    88b0:	f7f7 feb3 	bl	61a <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.adv_addr[0],
    88b4:	2206      	movs	r2, #6
    88b6:	f107 010a 	add.w	r1, r7, #10
    88ba:	4648      	mov	r0, r9
    88bc:	f7f7 fead 	bl	61a <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.
    88c0:	4632      	mov	r2, r6
    88c2:	f104 0110 	add.w	r1, r4, #16
    88c6:	f105 000e 	add.w	r0, r5, #14
    88ca:	f7f7 fea6 	bl	61a <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.crc_init[0],
    88ce:	2203      	movs	r2, #3
    88d0:	f104 0114 	add.w	r1, r4, #20
    88d4:	f105 0012 	add.w	r0, r5, #18
    88d8:	f7f7 fe9f 	bl	61a <memcpy>
		pdu_adv_tx->connect_ind.win_size = 1;
    88dc:	2301      	movs	r3, #1
    88de:	756b      	strb	r3, [r5, #21]
			(u32_t)_radio.scanner.conn_interval * 1250;
    88e0:	f8bb 3668 	ldrh.w	r3, [fp, #1640]	; 0x668
		conn_interval_us =
    88e4:	f240 46e2 	movw	r6, #1250	; 0x4e2
    88e8:	435e      	muls	r6, r3
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    88ea:	f002 fd2f 	bl	b34c <radio_tmr_end_get>
		if (!_radio.remainder_anchor ||
    88ee:	f8db 300c 	ldr.w	r3, [fp, #12]
		if (_radio.scanner.win_offset_us == 0) {
    88f2:	f8db 8678 	ldr.w	r8, [fp, #1656]	; 0x678
		if (!_radio.remainder_anchor ||
    88f6:	2b00      	cmp	r3, #0
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    88f8:	bfcc      	ite	gt
    88fa:	f500 60db 	addgt.w	r0, r0, #1752	; 0x6d8
			conn_offset_us -= HAL_TICKER_TICKS_TO_US(1);
    88fe:	f200 60ba 	addwle	r0, r0, #1722	; 0x6ba
		if (_radio.scanner.win_offset_us == 0) {
    8902:	f1b8 0f00 	cmp.w	r8, #0
    8906:	f040 80b2 	bne.w	8a6e <isr+0x93e>
			pdu_adv_tx->connect_ind.win_offset = 0;
    890a:	f885 8016 	strb.w	r8, [r5, #22]
    890e:	f885 8017 	strb.w	r8, [r5, #23]
    8912:	4680      	mov	r8, r0
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
    8914:	2100      	movs	r1, #0
    8916:	4608      	mov	r0, r1
    8918:	f002 fb26 	bl	af68 <radio_tx_ready_delay_get>
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
    891c:	2100      	movs	r1, #0
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
    891e:	eba8 0800 	sub.w	r8, r8, r0
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
    8922:	4608      	mov	r0, r1
    8924:	f002 fb25 	bl	af72 <radio_tx_chain_delay_get>
    8928:	eba8 0000 	sub.w	r0, r8, r0
		conn_space_us += HAL_TICKER_TICKS_TO_US(1);
    892c:	f100 031e 	add.w	r3, r0, #30
    8930:	930a      	str	r3, [sp, #40]	; 0x28
		pdu_adv_tx->connect_ind.interval =
    8932:	f8bb 3668 	ldrh.w	r3, [fp, #1640]	; 0x668
    8936:	832b      	strh	r3, [r5, #24]
		pdu_adv_tx->connect_ind.latency =
    8938:	f8bb 366a 	ldrh.w	r3, [fp, #1642]	; 0x66a
    893c:	836b      	strh	r3, [r5, #26]
		pdu_adv_tx->connect_ind.timeout =
    893e:	f8bb 366c 	ldrh.w	r3, [fp, #1644]	; 0x66c
    8942:	83ab      	strh	r3, [r5, #28]
		memcpy(&pdu_adv_tx->connect_ind.chan_map[0],
    8944:	f104 0117 	add.w	r1, r4, #23
    8948:	2205      	movs	r2, #5
    894a:	f105 001e 	add.w	r0, r5, #30
    894e:	f7f7 fe64 	bl	61a <memcpy>
		pdu_adv_tx->connect_ind.hop =
    8952:	7fa2      	ldrb	r2, [r4, #30]
    8954:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    8958:	f362 0304 	bfi	r3, r2, #0, #5
    895c:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		pdu_adv_tx->connect_ind.sca = _radio.sca;
    8960:	f89b 2728 	ldrb.w	r2, [fp, #1832]	; 0x728
    8964:	f362 1347 	bfi	r3, r2, #5, #3
    8968:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		radio_switch_complete_and_disable();
    896c:	f002 fb86 	bl	b07c <radio_switch_complete_and_disable>
		radio_pkt_tx_set(pdu_adv_tx);
    8970:	4628      	mov	r0, r5
    8972:	f002 faf3 	bl	af5c <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    8976:	f002 fb2f 	bl	afd8 <radio_is_ready>
    897a:	4680      	mov	r8, r0
    897c:	2800      	cmp	r0, #0
    897e:	f000 80a7 	beq.w	8ad0 <isr+0x9a0>
		LL_ASSERT(!radio_is_ready());
    8982:	4a51      	ldr	r2, [pc, #324]	; (8ac8 <isr+0x998>)
    8984:	e428      	b.n	81d8 <isr+0xa8>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
    8986:	7a3a      	ldrb	r2, [r7, #8]
    8988:	f3c3 1380 	ubfx	r3, r3, #6, #1
    898c:	f3c2 1280 	ubfx	r2, r2, #6, #1
    8990:	4293      	cmp	r3, r2
    8992:	d108      	bne.n	89a6 <isr+0x876>
		(memcmp(&_radio.scanner.adv_addr[0],
    8994:	2206      	movs	r2, #6
    8996:	f107 010a 	add.w	r1, r7, #10
    899a:	484c      	ldr	r0, [pc, #304]	; (8acc <isr+0x99c>)
    899c:	f7f7 fe28 	bl	5f0 <memcmp>
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
    89a0:	2800      	cmp	r0, #0
    89a2:	f43f af3f 	beq.w	8824 <isr+0x6f4>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    89a6:	7a3b      	ldrb	r3, [r7, #8]
    89a8:	f013 030f 	ands.w	r3, r3, #15
    89ac:	d002      	beq.n	89b4 <isr+0x884>
    89ae:	2b06      	cmp	r3, #6
    89b0:	f040 815b 	bne.w	8c6a <isr+0xb3a>
		 (_radio.scanner.type != 0) &&
    89b4:	f89b 264d 	ldrb.w	r2, [fp, #1613]	; 0x64d
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    89b8:	0716      	lsls	r6, r2, #28
    89ba:	f140 8145 	bpl.w	8c48 <isr+0xb18>
		 (_radio.scanner.type != 0) &&
    89be:	f8db 2674 	ldr.w	r2, [fp, #1652]	; 0x674
    89c2:	2a00      	cmp	r2, #0
    89c4:	f040 8140 	bne.w	8c48 <isr+0xb18>
		err = isr_rx_scan_report(rssi_ready,
    89c8:	4628      	mov	r0, r5
    89ca:	f7fe f937 	bl	6c3c <isr_rx_scan_report.isra.37>
		if (err) {
    89ce:	2800      	cmp	r0, #0
    89d0:	f040 813e 	bne.w	8c50 <isr+0xb20>
		if(pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND){
    89d4:	7a3b      	ldrb	r3, [r7, #8]
    89d6:	f003 030f 	and.w	r3, r3, #15
    89da:	2b07      	cmp	r3, #7
    89dc:	d101      	bne.n	89e2 <isr+0x8b2>
			pdu_adv_tx = (void *)radio_pkt_scratch_get();
    89de:	f002 fb33 	bl	b048 <radio_pkt_scratch_get>
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    89e2:	f002 fb31 	bl	b048 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    89e6:	7803      	ldrb	r3, [r0, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    89e8:	4936      	ldr	r1, [pc, #216]	; (8ac4 <isr+0x994>)
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    89ea:	2503      	movs	r5, #3
    89ec:	f365 0303 	bfi	r3, r5, #0, #4
    89f0:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    89f2:	7a3a      	ldrb	r2, [r7, #8]
    89f4:	b2db      	uxtb	r3, r3
    89f6:	f3c2 1280 	ubfx	r2, r2, #6, #1
    89fa:	f362 13c7 	bfi	r3, r2, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_scan_req);
    89fe:	220c      	movs	r2, #12
    8a00:	7042      	strb	r2, [r0, #1]
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    8a02:	f89b 264d 	ldrb.w	r2, [fp, #1613]	; 0x64d
    8a06:	09d2      	lsrs	r2, r2, #7
    8a08:	f362 1386 	bfi	r3, r2, #6, #1
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    8a0c:	4604      	mov	r4, r0
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    8a0e:	2206      	movs	r2, #6
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    8a10:	f800 3b02 	strb.w	r3, [r0], #2
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    8a14:	f7f7 fe01 	bl	61a <memcpy>
		memcpy(&pdu_adv_tx->scan_req.adv_addr[0],
    8a18:	2206      	movs	r2, #6
    8a1a:	f107 010a 	add.w	r1, r7, #10
    8a1e:	f104 0008 	add.w	r0, r4, #8
    8a22:	f7f7 fdfa 	bl	61a <memcpy>
		_radio.scanner.state = 1;
    8a26:	f89b 364c 	ldrb.w	r3, [fp, #1612]	; 0x64c
    8a2a:	f043 0302 	orr.w	r3, r3, #2
    8a2e:	f88b 364c 	strb.w	r3, [fp, #1612]	; 0x64c
		radio_tmr_tifs_set(RADIO_TIFS);
    8a32:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
    8a34:	2302      	movs	r3, #2
    8a36:	f88b 3014 	strb.w	r3, [fp, #20]
		radio_tmr_tifs_set(RADIO_TIFS);
    8a3a:	f002 fb99 	bl	b170 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    8a3e:	2000      	movs	r0, #0
    8a40:	f002 fb06 	bl	b050 <radio_switch_complete_and_rx>
		radio_pkt_tx_set(pdu_adv_tx);
    8a44:	4620      	mov	r0, r4
    8a46:	f002 fa89 	bl	af5c <radio_pkt_tx_set>
		radio_tmr_end_capture();
    8a4a:	f002 fc6d 	bl	b328 <radio_tmr_end_capture>
		LL_ASSERT(!radio_is_ready());
    8a4e:	f002 fac3 	bl	afd8 <radio_is_ready>
    8a52:	2800      	cmp	r0, #0
    8a54:	f43f abf1 	beq.w	823a <isr+0x10a>
    8a58:	e793      	b.n	8982 <isr+0x852>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
    8a5a:	2b01      	cmp	r3, #1
    8a5c:	d1a7      	bne.n	89ae <isr+0x87e>
		  isr_scan_tgta_check(true, pdu, rl_idx, NULL)))));
    8a5e:	2100      	movs	r1, #0
    8a60:	4620      	mov	r0, r4
    8a62:	f7fe f825 	bl	6ab0 <isr_scan_tgta_check.isra.29>
				      (_radio.fc_req == _radio.fc_ack)) &&
    8a66:	2800      	cmp	r0, #0
    8a68:	d09d      	beq.n	89a6 <isr+0x876>
    8a6a:	e6e0      	b.n	882e <isr+0x6fe>
				conn_space_us += conn_interval_us;
    8a6c:	44b0      	add	r8, r6
			while ((conn_space_us & ((u32_t)1 << 31)) ||
    8a6e:	f1b8 0f00 	cmp.w	r8, #0
    8a72:	dbfb      	blt.n	8a6c <isr+0x93c>
    8a74:	4580      	cmp	r8, r0
    8a76:	d3f9      	bcc.n	8a6c <isr+0x93c>
			pdu_adv_tx->connect_ind.win_offset =
    8a78:	f240 43e2 	movw	r3, #1250	; 0x4e2
				(conn_space_us - conn_offset_us) / 1250;
    8a7c:	eba8 0000 	sub.w	r0, r8, r0
			pdu_adv_tx->connect_ind.win_offset =
    8a80:	fbb0 f0f3 	udiv	r0, r0, r3
			pdu_adv_tx->connect_ind.win_size++;
    8a84:	7d6b      	ldrb	r3, [r5, #21]
			pdu_adv_tx->connect_ind.win_offset =
    8a86:	82e8      	strh	r0, [r5, #22]
			pdu_adv_tx->connect_ind.win_size++;
    8a88:	3301      	adds	r3, #1
    8a8a:	756b      	strb	r3, [r5, #21]
    8a8c:	e742      	b.n	8914 <isr+0x7e4>
    8a8e:	bf00      	nop
    8a90:	3b9aca00 	.word	0x3b9aca00
    8a94:	00000000 	.word	0x00000000
    8a98:	20002d10 	.word	0x20002d10
    8a9c:	20002c80 	.word	0x20002c80
    8aa0:	20002d40 	.word	0x20002d40
    8aa4:	2000508c 	.word	0x2000508c
    8aa8:	20005088 	.word	0x20005088
    8aac:	20002d64 	.word	0x20002d64
    8ab0:	20001188 	.word	0x20001188
    8ab4:	200010b0 	.word	0x200010b0
    8ab8:	200010c0 	.word	0x200010c0
    8abc:	20002d38 	.word	0x20002d38
    8ac0:	1afd498d 	.word	0x1afd498d
    8ac4:	20001046 	.word	0x20001046
    8ac8:	0000e1f8 	.word	0x0000e1f8
    8acc:	2000104c 	.word	0x2000104c
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    8ad0:	f44f 7282 	mov.w	r2, #260	; 0x104
    8ad4:	f8db 1710 	ldr.w	r1, [fp, #1808]	; 0x710
    8ad8:	4620      	mov	r0, r4
    8ada:	f7fa ffac 	bl	3a36 <mem_index_get>
    8ade:	8420      	strh	r0, [r4, #32]
		radio_le_conn_cmplt->status = 0x00;
    8ae0:	f88a 800b 	strb.w	r8, [sl, #11]
		radio_le_conn_cmplt->role = 0x00;
    8ae4:	f88a 800c 	strb.w	r8, [sl, #12]
				pdu_adv_tx->rx_addr;
    8ae8:	782b      	ldrb	r3, [r5, #0]
		node_rx->hdr.handle = conn->handle;
    8aea:	f8aa 0006 	strh.w	r0, [sl, #6]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    8aee:	2206      	movs	r2, #6
				pdu_adv_tx->rx_addr;
    8af0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    8af4:	f88a 2004 	strb.w	r2, [sl, #4]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    8af8:	4649      	mov	r1, r9
			radio_le_conn_cmplt->peer_addr_type =
    8afa:	f88a 300d 	strb.w	r3, [sl, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    8afe:	f10a 000e 	add.w	r0, sl, #14
    8b02:	f7f7 fd8a 	bl	61a <memcpy>
		radio_le_conn_cmplt->interval = _radio.scanner.conn_interval;
    8b06:	f8bb 3668 	ldrh.w	r3, [fp, #1640]	; 0x668
    8b0a:	f8aa 3014 	strh.w	r3, [sl, #20]
		radio_le_conn_cmplt->latency = _radio.scanner.conn_latency;
    8b0e:	f8bb 366a 	ldrh.w	r3, [fp, #1642]	; 0x66a
    8b12:	f8aa 3016 	strh.w	r3, [sl, #22]
		radio_le_conn_cmplt->timeout = _radio.scanner.conn_timeout;
    8b16:	f8bb 366c 	ldrh.w	r3, [fp, #1644]	; 0x66c
    8b1a:	f8aa 3018 	strh.w	r3, [sl, #24]
			pdu_adv_tx->connect_ind.sca;
    8b1e:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    8b22:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
    8b26:	f88a 301a 	strb.w	r3, [sl, #26]
		rx_fc_lock(conn->handle);
    8b2a:	8c20      	ldrh	r0, [r4, #32]
    8b2c:	f7fd fbf2 	bl	6314 <rx_fc_lock>
		packet_rx_enqueue();
    8b30:	f7fd ffee 	bl	6b10 <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
    8b34:	2003      	movs	r0, #3
    8b36:	f7fc ff05 	bl	5944 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    8b3a:	b908      	cbnz	r0, 8b40 <isr+0xa10>
    8b3c:	4ab4      	ldr	r2, [pc, #720]	; (8e10 <isr+0xce0>)
    8b3e:	e4c1      	b.n	84c4 <isr+0x394>
			node_rx->hdr.handle = conn->handle;
    8b40:	8c23      	ldrh	r3, [r4, #32]
    8b42:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    8b44:	230a      	movs	r3, #10
    8b46:	7103      	strb	r3, [r0, #4]
			if (pdu_adv_rx->chan_sel) {
    8b48:	7a3b      	ldrb	r3, [r7, #8]
    8b4a:	f013 0320 	ands.w	r3, r3, #32
    8b4e:	d00e      	beq.n	8b6e <isr+0xa3e>
					((u16_t)conn->access_addr[1] << 8) |
    8b50:	7c62      	ldrb	r2, [r4, #17]
					conn->access_addr[0];
    8b52:	7c23      	ldrb	r3, [r4, #16]
					((u16_t)conn->access_addr[3] << 8) |
    8b54:	7ce1      	ldrb	r1, [r4, #19]
				u16_t aa_ls =
    8b56:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
    8b5a:	7ca2      	ldrb	r2, [r4, #18]
				u16_t aa_ms =
    8b5c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
    8b60:	7f61      	ldrb	r1, [r4, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    8b62:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
    8b64:	f041 0140 	orr.w	r1, r1, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
    8b68:	83e3      	strh	r3, [r4, #30]
				conn->data_chan_sel = 1;
    8b6a:	7761      	strb	r1, [r4, #29]
				le_chan_sel_algo->chan_sel_algo = 0x01;
    8b6c:	2301      	movs	r3, #1
				le_chan_sel_algo->chan_sel_algo = 0x00;
    8b6e:	72c3      	strb	r3, [r0, #11]
			packet_rx_enqueue();
    8b70:	f7fd ffce 	bl	6b10 <packet_rx_enqueue>
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    8b74:	f8db 3784 	ldr.w	r3, [fp, #1924]	; 0x784
    8b78:	6063      	str	r3, [r4, #4]
		ticks_slot_offset = (conn->hdr.ticks_active_to_start <
    8b7a:	2b27      	cmp	r3, #39	; 0x27
    8b7c:	bf38      	it	cc
    8b7e:	2327      	movcc	r3, #39	; 0x27
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
    8b80:	2227      	movs	r2, #39	; 0x27
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
    8b82:	2500      	movs	r5, #0
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
    8b84:	6022      	str	r2, [r4, #0]
		ticks_slot_offset = (conn->hdr.ticks_active_to_start <
    8b86:	4698      	mov	r8, r3
		conn->hdr.ticks_slot = _radio.scanner.ticks_conn_slot;
    8b88:	f8db 2670 	ldr.w	r2, [fp, #1648]	; 0x670
    8b8c:	60e2      	str	r2, [r4, #12]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    8b8e:	f44f 63ee 	mov.w	r3, #1904	; 0x770
    8b92:	2206      	movs	r2, #6
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
    8b94:	60a5      	str	r5, [r4, #8]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    8b96:	4629      	mov	r1, r5
    8b98:	9300      	str	r3, [sp, #0]
    8b9a:	4628      	mov	r0, r5
    8b9c:	4b9d      	ldr	r3, [pc, #628]	; (8e14 <isr+0xce4>)
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    8b9e:	f8df a288 	ldr.w	sl, [pc, #648]	; 8e28 <isr+0xcf8>
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    8ba2:	f7fb fe21 	bl	47e8 <ticker_stop>
		ticker_stop_scan_assert(ticker_status, (void *)__LINE__);
    8ba6:	f240 7171 	movw	r1, #1905	; 0x771
    8baa:	f7fd fc03 	bl	63b4 <ticker_stop_scan_assert>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    8bae:	462b      	mov	r3, r5
    8bb0:	2204      	movs	r2, #4
    8bb2:	4629      	mov	r1, r5
    8bb4:	9500      	str	r5, [sp, #0]
    8bb6:	4628      	mov	r0, r5
    8bb8:	f7fb fe16 	bl	47e8 <ticker_stop>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    8bbc:	f8db 3008 	ldr.w	r3, [fp, #8]
    8bc0:	f894 9020 	ldrb.w	r9, [r4, #32]
		ticker_status =
    8bc4:	9406      	str	r4, [sp, #24]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    8bc6:	eba3 0b08 	sub.w	fp, r3, r8
		ticker_status =
    8bca:	f44f 63f1 	mov.w	r3, #1928	; 0x788
    8bce:	9308      	str	r3, [sp, #32]
    8bd0:	4b91      	ldr	r3, [pc, #580]	; (8e18 <isr+0xce8>)
    8bd2:	9307      	str	r3, [sp, #28]
    8bd4:	4b91      	ldr	r3, [pc, #580]	; (8e1c <isr+0xcec>)
    8bd6:	9305      	str	r3, [sp, #20]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    8bd8:	68e3      	ldr	r3, [r4, #12]
		ticker_status =
    8bda:	9503      	str	r5, [sp, #12]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    8bdc:	fba6 670a 	umull	r6, r7, r6, sl
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    8be0:	4443      	add	r3, r8
		ticker_status =
    8be2:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    8be4:	4630      	mov	r0, r6
    8be6:	a388      	add	r3, pc, #544	; (adr r3, 8e08 <isr+0xcd8>)
    8be8:	e9d3 2300 	ldrd	r2, r3, [r3]
    8bec:	4639      	mov	r1, r7
    8bee:	f7f7 fb3b 	bl	268 <__aeabi_uldivmod>
    8bf2:	4610      	mov	r0, r2
    8bf4:	4619      	mov	r1, r3
    8bf6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8bfa:	2300      	movs	r3, #0
    8bfc:	f7f7 fb34 	bl	268 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    8c00:	a381      	add	r3, pc, #516	; (adr r3, 8e08 <isr+0xcd8>)
    8c02:	e9d3 2300 	ldrd	r2, r3, [r3]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    8c06:	9002      	str	r0, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    8c08:	4639      	mov	r1, r7
    8c0a:	4630      	mov	r0, r6
    8c0c:	f7f7 fb2c 	bl	268 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
    8c10:	990a      	ldr	r1, [sp, #40]	; 0x28
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    8c12:	9001      	str	r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
    8c14:	a37c      	add	r3, pc, #496	; (adr r3, 8e08 <isr+0xcd8>)
    8c16:	e9d3 2300 	ldrd	r2, r3, [r3]
    8c1a:	fba1 010a 	umull	r0, r1, r1, sl
    8c1e:	f7f7 fb23 	bl	268 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    8c22:	f109 0907 	add.w	r9, r9, #7
    8c26:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticker_status =
    8c2a:	fa5f f989 	uxtb.w	r9, r9
    8c2e:	9000      	str	r0, [sp, #0]
    8c30:	465b      	mov	r3, fp
    8c32:	464a      	mov	r2, r9
    8c34:	4629      	mov	r1, r5
    8c36:	4628      	mov	r0, r5
    8c38:	f7fb fd38 	bl	46ac <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    8c3c:	f030 0302 	bics.w	r3, r0, #2
    8c40:	f43f aafb 	beq.w	823a <isr+0x10a>
    8c44:	4a72      	ldr	r2, [pc, #456]	; (8e10 <isr+0xce0>)
    8c46:	e535      	b.n	86b4 <isr+0x584>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    8c48:	b97b      	cbnz	r3, 8c6a <isr+0xb3a>
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
    8c4a:	7a7b      	ldrb	r3, [r7, #9]
    8c4c:	2b00      	cmp	r3, #0
    8c4e:	d13b      	bne.n	8cc8 <isr+0xb98>
			_radio.state = STATE_CLOSE;
    8c50:	2303      	movs	r3, #3
    8c52:	f88b 3014 	strb.w	r3, [fp, #20]
			radio_disable();
    8c56:	f002 f9a1 	bl	af9c <radio_disable>
			_radio.scanner.state = 0;
    8c5a:	f89b 364c 	ldrb.w	r3, [fp, #1612]	; 0x64c
    8c5e:	f36f 0341 	bfc	r3, #1, #1
    8c62:	f88b 364c 	strb.w	r3, [fp, #1612]	; 0x64c
    8c66:	f7ff bae8 	b.w	823a <isr+0x10a>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    8c6a:	2b01      	cmp	r3, #1
    8c6c:	d00d      	beq.n	8c8a <isr+0xb5a>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    8c6e:	7a3b      	ldrb	r3, [r7, #8]
					&dir_report))) ||
    8c70:	f003 020b 	and.w	r2, r3, #11
    8c74:	2a02      	cmp	r2, #2
    8c76:	d0e8      	beq.n	8c4a <isr+0xb1a>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    8c78:	f003 030f 	and.w	r3, r3, #15
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND) ||
    8c7c:	2b07      	cmp	r3, #7
    8c7e:	d10b      	bne.n	8c98 <isr+0xb68>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
    8c80:	f89b 364d 	ldrb.w	r3, [fp, #1613]	; 0x64d
    8c84:	075c      	lsls	r4, r3, #29
    8c86:	d1e0      	bne.n	8c4a <isr+0xb1a>
    8c88:	e7e2      	b.n	8c50 <isr+0xb20>
		    isr_scan_tgta_check(false, pdu_adv_rx, rl_idx,
    8c8a:	a90d      	add	r1, sp, #52	; 0x34
    8c8c:	4620      	mov	r0, r4
    8c8e:	f7fd ff0f 	bl	6ab0 <isr_scan_tgta_check.isra.29>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
    8c92:	2800      	cmp	r0, #0
    8c94:	d1d9      	bne.n	8c4a <isr+0xb1a>
    8c96:	e7ea      	b.n	8c6e <isr+0xb3e>
		   (_radio.scanner.phy)) ||
    8c98:	2b04      	cmp	r3, #4
    8c9a:	d1d9      	bne.n	8c50 <isr+0xb20>
		   (_radio.scanner.state != 0) &&
    8c9c:	f89b 364c 	ldrb.w	r3, [fp, #1612]	; 0x64c
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
    8ca0:	0798      	lsls	r0, r3, #30
    8ca2:	d5d5      	bpl.n	8c50 <isr+0xb20>
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
    8ca4:	f002 f9d0 	bl	b048 <radio_pkt_scratch_get>
	return ((sreq->rx_addr == srsp->tx_addr) &&
    8ca8:	7a3b      	ldrb	r3, [r7, #8]
    8caa:	7802      	ldrb	r2, [r0, #0]
    8cac:	f3c3 1380 	ubfx	r3, r3, #6, #1
    8cb0:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    8cb4:	d1cc      	bne.n	8c50 <isr+0xb20>
		(memcmp(&sreq->scan_req.adv_addr[0],
    8cb6:	2206      	movs	r2, #6
    8cb8:	f107 010a 	add.w	r1, r7, #10
    8cbc:	3008      	adds	r0, #8
    8cbe:	f7f7 fc97 	bl	5f0 <memcmp>
		   (_radio.scanner.state != 0) &&
    8cc2:	2800      	cmp	r0, #0
    8cc4:	d0c1      	beq.n	8c4a <isr+0xb1a>
    8cc6:	e7c3      	b.n	8c50 <isr+0xb20>
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
    8cc8:	f8db 3674 	ldr.w	r3, [fp, #1652]	; 0x674
    8ccc:	2b00      	cmp	r3, #0
    8cce:	d1bf      	bne.n	8c50 <isr+0xb20>
		err = isr_rx_scan_report(rssi_ready,
    8cd0:	4628      	mov	r0, r5
    8cd2:	f7fd ffb3 	bl	6c3c <isr_rx_scan_report.isra.37>
    8cd6:	e7bb      	b.n	8c50 <isr+0xb20>
	_radio.packet_counter++;
    8cd8:	f89b 3720 	ldrb.w	r3, [fp, #1824]	; 0x720
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    8cdc:	f89b 2741 	ldrb.w	r2, [fp, #1857]	; 0x741
	_radio.packet_counter++;
    8ce0:	3301      	adds	r3, #1
    8ce2:	f88b 3720 	strb.w	r3, [fp, #1824]	; 0x720
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    8ce6:	f8db 373c 	ldr.w	r3, [fp, #1852]	; 0x73c
    8cea:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    8cee:	2301      	movs	r3, #1
    8cf0:	7133      	strb	r3, [r6, #4]
	if (crc_ok) {
    8cf2:	2f00      	cmp	r7, #0
    8cf4:	f000 838d 	beq.w	9412 <isr+0x12e2>
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
    8cf8:	f8db 371c 	ldr.w	r3, [fp, #1820]	; 0x71c
    8cfc:	7a30      	ldrb	r0, [r6, #8]
    8cfe:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
    8d02:	f3c0 0080 	ubfx	r0, r0, #2, #1
    8d06:	f002 0101 	and.w	r1, r2, #1
    8d0a:	4288      	cmp	r0, r1
    8d0c:	f000 80c6 	beq.w	8e9c <isr+0xd6c>
		_radio.conn_curr->sn++;
    8d10:	f081 0101 	eor.w	r1, r1, #1
    8d14:	f361 0200 	bfi	r2, r1, #0, #1
    8d18:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
		if (_radio.role == ROLE_SLAVE) {
    8d1c:	f89b 2013 	ldrb.w	r2, [fp, #19]
    8d20:	2a03      	cmp	r2, #3
			_radio.conn_curr->slave.latency_enabled = 1;
    8d22:	bf02      	ittt	eq
    8d24:	f893 2038 	ldrbeq.w	r2, [r3, #56]	; 0x38
    8d28:	f042 0201 	orreq.w	r2, r2, #1
    8d2c:	f883 2038 	strbeq.w	r2, [r3, #56]	; 0x38
		if (_radio.conn_curr->empty == 0) {
    8d30:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
    8d34:	0611      	lsls	r1, r2, #24
    8d36:	f100 80ad 	bmi.w	8e94 <isr+0xd64>
			node_tx = _radio.conn_curr->pkt_tx_head;
    8d3a:	f8d3 80ec 	ldr.w	r8, [r3, #236]	; 0xec
				_radio.conn_curr->packet_tx_head_offset);
    8d3e:	f893 e101 	ldrb.w	lr, [r3, #257]	; 0x101
			pdu_data_tx = (void *)(node_tx->pdu_data +
    8d42:	f108 0c04 	add.w	ip, r8, #4
    8d46:	eb0c 050e 	add.w	r5, ip, lr
			pdu_data_tx_len = pdu_data_tx->len;
    8d4a:	786c      	ldrb	r4, [r5, #1]
			if (pdu_data_tx_len != 0) {
    8d4c:	b90c      	cbnz	r4, 8d52 <isr+0xc22>
	u8_t terminate = 0;
    8d4e:	2500      	movs	r5, #0
    8d50:	e029      	b.n	8da6 <isr+0xc76>
				if (_radio.conn_curr->enc_tx) {
    8d52:	0692      	lsls	r2, r2, #26
    8d54:	d50a      	bpl.n	8d6c <isr+0xc3c>
					_radio.conn_curr->ccm_tx.counter++;
    8d56:	f8d3 00da 	ldr.w	r0, [r3, #218]	; 0xda
    8d5a:	f8d3 10de 	ldr.w	r1, [r3, #222]	; 0xde
    8d5e:	3001      	adds	r0, #1
    8d60:	f141 0100 	adc.w	r1, r1, #0
    8d64:	f8c3 00da 	str.w	r0, [r3, #218]	; 0xda
    8d68:	f8c3 10de 	str.w	r1, [r3, #222]	; 0xde
				if (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) {
    8d6c:	f81c 900e 	ldrb.w	r9, [ip, lr]
    8d70:	f009 0903 	and.w	r9, r9, #3
    8d74:	f1b9 0f03 	cmp.w	r9, #3
    8d78:	d1e9      	bne.n	8d4e <isr+0xc1e>
	switch (pdu_data_tx->llctrl.opcode) {
    8d7a:	78eb      	ldrb	r3, [r5, #3]
    8d7c:	2b02      	cmp	r3, #2
    8d7e:	d1e6      	bne.n	8d4e <isr+0xc1e>
		_radio.state = STATE_CLOSE;
    8d80:	f88b 9014 	strb.w	r9, [fp, #20]
		radio_disable();
    8d84:	f002 f90a 	bl	af9c <radio_disable>
		LL_ASSERT(!radio_is_ready());
    8d88:	f002 f926 	bl	afd8 <radio_is_ready>
    8d8c:	b110      	cbz	r0, 8d94 <isr+0xc64>
    8d8e:	4a24      	ldr	r2, [pc, #144]	; (8e20 <isr+0xcf0>)
    8d90:	f7ff ba22 	b.w	81d8 <isr+0xa8>
		     (pdu_data_tx->llctrl.terminate_ind.error_code == 0x13) ?
    8d94:	7929      	ldrb	r1, [r5, #4]
		terminate_ind_rx_enqueue(_radio.conn_curr,
    8d96:	f8db 071c 	ldr.w	r0, [fp, #1820]	; 0x71c
    8d9a:	2913      	cmp	r1, #19
    8d9c:	bf08      	it	eq
    8d9e:	2116      	moveq	r1, #22
    8da0:	f7fd ff18 	bl	6bd4 <terminate_ind_rx_enqueue>
		terminate = 1;
    8da4:	2501      	movs	r5, #1
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    8da6:	f8db 371c 	ldr.w	r3, [fp, #1820]	; 0x71c
    8daa:	f893 2101 	ldrb.w	r2, [r3, #257]	; 0x101
			if (_radio.conn_curr->packet_tx_head_offset ==
    8dae:	f893 1100 	ldrb.w	r1, [r3, #256]	; 0x100
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    8db2:	4422      	add	r2, r4
    8db4:	b2d2      	uxtb	r2, r2
			if (_radio.conn_curr->packet_tx_head_offset ==
    8db6:	4291      	cmp	r1, r2
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    8db8:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
			if (_radio.conn_curr->packet_tx_head_offset ==
    8dbc:	d11e      	bne.n	8dfc <isr+0xccc>
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    8dbe:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
    8dc2:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
	conn->packet_tx_head_len = 0;
    8dc6:	2000      	movs	r0, #0
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    8dc8:	428a      	cmp	r2, r1
	conn->packet_tx_head_len = 0;
    8dca:	f883 0100 	strb.w	r0, [r3, #256]	; 0x100
	conn->packet_tx_head_offset = 0;
    8dce:	f883 0101 	strb.w	r0, [r3, #257]	; 0x101
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    8dd2:	d12b      	bne.n	8e2c <isr+0xcfc>
		if (node_tx) {
    8dd4:	f1b8 0f00 	cmp.w	r8, #0
    8dd8:	d010      	beq.n	8dfc <isr+0xccc>
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
    8dda:	f8d3 10f4 	ldr.w	r1, [r3, #244]	; 0xf4
			conn->pkt_tx_head = conn->pkt_tx_head->next;
    8dde:	6814      	ldr	r4, [r2, #0]
    8de0:	f8c3 40ec 	str.w	r4, [r3, #236]	; 0xec
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
    8de4:	428a      	cmp	r2, r1
				conn->pkt_tx_ctrl = NULL;
    8de6:	bf06      	itte	eq
    8de8:	f8c3 00f0 	streq.w	r0, [r3, #240]	; 0xf0
				conn->pkt_tx_ctrl_last = NULL;
    8dec:	f8c3 00f4 	streq.w	r0, [r3, #244]	; 0xf4
				conn->pkt_tx_ctrl = conn->pkt_tx_head;
    8df0:	f8c3 40f0 	strne.w	r4, [r3, #240]	; 0xf0
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    8df4:	490b      	ldr	r1, [pc, #44]	; (8e24 <isr+0xcf4>)
    8df6:	4640      	mov	r0, r8
    8df8:	f7fa fe05 	bl	3a06 <mem_release>
	struct radio_pdu_node_tx *tx_release = NULL;
    8dfc:	f04f 0800 	mov.w	r8, #0
    8e00:	e01d      	b.n	8e3e <isr+0xd0e>
    8e02:	bf00      	nop
    8e04:	f3af 8000 	nop.w
    8e08:	1afd498d 	.word	0x1afd498d
    8e0c:	00000007 	.word	0x00000007
    8e10:	0000e1f8 	.word	0x0000e1f8
    8e14:	000063b5 	.word	0x000063b5
    8e18:	00006349 	.word	0x00006349
    8e1c:	00007e85 	.word	0x00007e85
    8e20:	0000e204 	.word	0x0000e204
    8e24:	20001154 	.word	0x20001154
    8e28:	3b9aca00 	.word	0x3b9aca00
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    8e2c:	f8d3 10f8 	ldr.w	r1, [r3, #248]	; 0xf8
    8e30:	428a      	cmp	r2, r1
    8e32:	6812      	ldr	r2, [r2, #0]
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    8e34:	bf08      	it	eq
    8e36:	f8c3 20f8 	streq.w	r2, [r3, #248]	; 0xf8
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    8e3a:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
	if (terminate) {
    8e3e:	b37d      	cbz	r5, 8ea0 <isr+0xd70>
		connection_release(_radio.conn_curr);
    8e40:	f8db 071c 	ldr.w	r0, [fp, #1820]	; 0x71c
    8e44:	f7fd fc7e 	bl	6744 <connection_release>
		_radio.conn_curr = NULL;
    8e48:	2500      	movs	r5, #0
				_radio.conn_curr = NULL;
    8e4a:	f8cb 571c 	str.w	r5, [fp, #1820]	; 0x71c
	if (!radio_tmr_aa_restore()) {
    8e4e:	f002 fa5f 	bl	b310 <radio_tmr_aa_restore>
    8e52:	b918      	cbnz	r0, 8e5c <isr+0xd2c>
		radio_tmr_aa_save(radio_tmr_aa_get());
    8e54:	f002 fa50 	bl	b2f8 <radio_tmr_aa_get>
    8e58:	f002 fa54 	bl	b304 <radio_tmr_aa_save>
	if (!_radio.conn_curr) {
    8e5c:	f8db 371c 	ldr.w	r3, [fp, #1820]	; 0x71c
    8e60:	2b00      	cmp	r3, #0
    8e62:	f43f a9ea 	beq.w	823a <isr+0x10a>
	if (tx_release) {
    8e66:	f1b8 0f00 	cmp.w	r8, #0
    8e6a:	d003      	beq.n	8e74 <isr+0xd44>
		pdu_node_tx_release(_radio.conn_curr->handle, tx_release);
    8e6c:	4641      	mov	r1, r8
    8e6e:	8c18      	ldrh	r0, [r3, #32]
    8e70:	f7fd fbe8 	bl	6644 <pdu_node_tx_release>
	if (rx_enqueue) {
    8e74:	2d00      	cmp	r5, #0
    8e76:	f43f a9e0 	beq.w	823a <isr+0x10a>
		rx_fc_lock(_radio.conn_curr->handle);
    8e7a:	f8db 371c 	ldr.w	r3, [fp, #1820]	; 0x71c
    8e7e:	8c18      	ldrh	r0, [r3, #32]
    8e80:	f7fd fa48 	bl	6314 <rx_fc_lock>
		node_rx->hdr.handle = _radio.conn_curr->handle;
    8e84:	f8db 371c 	ldr.w	r3, [fp, #1820]	; 0x71c
    8e88:	8c1b      	ldrh	r3, [r3, #32]
    8e8a:	80f3      	strh	r3, [r6, #6]
		packet_rx_enqueue();
    8e8c:	f7fd fe40 	bl	6b10 <packet_rx_enqueue>
    8e90:	f7ff b9d3 	b.w	823a <isr+0x10a>
			_radio.conn_curr->empty = 0;
    8e94:	f36f 12c7 	bfc	r2, #7, #1
    8e98:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
    8e9c:	f04f 0800 	mov.w	r8, #0
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    8ea0:	f8db 371c 	ldr.w	r3, [fp, #1820]	; 0x71c
    8ea4:	7a32      	ldrb	r2, [r6, #8]
    8ea6:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
    8eaa:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    8eae:	f3c3 0340 	ubfx	r3, r3, #1, #1
    8eb2:	429a      	cmp	r2, r3
    8eb4:	d03c      	beq.n	8f30 <isr+0xe00>
	u8_t rx_enqueue = 0;
    8eb6:	2500      	movs	r5, #0
		_radio.conn_curr->supervision_expire = 0;
    8eb8:	f8db 371c 	ldr.w	r3, [fp, #1820]	; 0x71c
		_radio.crc_expire = 0;
    8ebc:	2400      	movs	r4, #0
    8ebe:	f88b 4721 	strb.w	r4, [fp, #1825]	; 0x721
		_radio.conn_curr->supervision_expire = 0;
    8ec2:	861c      	strh	r4, [r3, #48]	; 0x30
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    8ec4:	f8db 071c 	ldr.w	r0, [fp, #1820]	; 0x71c
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
    8ec8:	a90d      	add	r1, sp, #52	; 0x34
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    8eca:	f890 90a8 	ldrb.w	r9, [r0, #168]	; 0xa8
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
    8ece:	f7ff f8c7 	bl	8060 <prepare_pdu_data_tx>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    8ed2:	f89b 3014 	ldrb.w	r3, [fp, #20]
    8ed6:	2b03      	cmp	r3, #3
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    8ed8:	ea4f 19d9 	mov.w	r9, r9, lsr #7
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    8edc:	d013      	beq.n	8f06 <isr+0xdd6>
    8ede:	2c00      	cmp	r4, #0
    8ee0:	f040 82b0 	bne.w	9444 <isr+0x1314>
    8ee4:	b13f      	cbz	r7, 8ef6 <isr+0xdc6>
			((crc_ok) && (pdu_data_rx->md == 0) &&
    8ee6:	7a33      	ldrb	r3, [r6, #8]
    8ee8:	06df      	lsls	r7, r3, #27
    8eea:	d404      	bmi.n	8ef6 <isr+0xdc6>
			 (pdu_data_tx->len == 0)) ||
    8eec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
			((crc_ok) && (pdu_data_rx->md == 0) &&
    8eee:	785b      	ldrb	r3, [r3, #1]
    8ef0:	2b00      	cmp	r3, #0
    8ef2:	f000 82a7 	beq.w	9444 <isr+0x1314>
			_radio.conn_curr->llcp_terminate.reason_peer) ?
    8ef6:	f8db 371c 	ldr.w	r3, [fp, #1820]	; 0x71c
			 (pdu_data_tx->len == 0)) ||
    8efa:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    8efe:	2b00      	cmp	r3, #0
    8f00:	bf0c      	ite	eq
    8f02:	2302      	moveq	r3, #2
    8f04:	2303      	movne	r3, #3
	if (_radio.state == STATE_CLOSE) {
    8f06:	2b03      	cmp	r3, #3
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    8f08:	f88b 3014 	strb.w	r3, [fp, #20]
	if (_radio.state == STATE_CLOSE) {
    8f0c:	f040 82b5 	bne.w	947a <isr+0x134a>
		if (_radio.role == ROLE_MASTER) {
    8f10:	f89b 3013 	ldrb.w	r3, [fp, #19]
    8f14:	2b04      	cmp	r3, #4
    8f16:	f040 8297 	bne.w	9448 <isr+0x1318>
			_radio.conn_curr->empty = is_empty_pdu_tx_retry;
    8f1a:	f8db 371c 	ldr.w	r3, [fp, #1820]	; 0x71c
    8f1e:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
    8f22:	f369 12c7 	bfi	r2, r9, #7, #1
    8f26:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
			radio_disable();
    8f2a:	f002 f837 	bl	af9c <radio_disable>
    8f2e:	e78e      	b.n	8e4e <isr+0xd1e>
	    (packet_rx_reserve_get(3) != 0) &&
    8f30:	2003      	movs	r0, #3
    8f32:	f7fc fd07 	bl	5944 <packet_rx_reserve_get>
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    8f36:	2800      	cmp	r0, #0
    8f38:	d0bd      	beq.n	8eb6 <isr+0xd86>
	    (packet_rx_reserve_get(3) != 0) &&
    8f3a:	f89b 3782 	ldrb.w	r3, [fp, #1922]	; 0x782
    8f3e:	b373      	cbz	r3, 8f9e <isr+0xe6e>
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    8f40:	f8db 374c 	ldr.w	r3, [fp, #1868]	; 0x74c
    8f44:	f8db 2750 	ldr.w	r2, [fp, #1872]	; 0x750
	    ((_radio.fc_ena == 0) ||
    8f48:	4293      	cmp	r3, r2
    8f4a:	d105      	bne.n	8f58 <isr+0xe28>
	      (_radio.fc_req == _radio.fc_ack)) ||
    8f4c:	f89b 2780 	ldrb.w	r2, [fp, #1920]	; 0x780
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    8f50:	f89b 1781 	ldrb.w	r1, [fp, #1921]	; 0x781
    8f54:	4291      	cmp	r1, r2
    8f56:	d022      	beq.n	8f9e <isr+0xe6e>
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    8f58:	f8db 2750 	ldr.w	r2, [fp, #1872]	; 0x750
	      (_radio.fc_req == _radio.fc_ack)) ||
    8f5c:	4293      	cmp	r3, r2
    8f5e:	d0aa      	beq.n	8eb6 <isr+0xd86>
	      (_radio.fc_req != _radio.fc_ack) &&
    8f60:	f89b 3780 	ldrb.w	r3, [fp, #1920]	; 0x780
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    8f64:	f89b 2781 	ldrb.w	r2, [fp, #1921]	; 0x781
    8f68:	429a      	cmp	r2, r3
    8f6a:	d0a4      	beq.n	8eb6 <isr+0xd86>
		(((_radio.fc_req == 0) &&
    8f6c:	f89b 3780 	ldrb.w	r3, [fp, #1920]	; 0x780
	      (_radio.fc_req != _radio.fc_ack) &&
    8f70:	b933      	cbnz	r3, 8f80 <isr+0xe50>
		   _radio.conn_curr->handle)) ||
    8f72:	f8db 371c 	ldr.w	r3, [fp, #1820]	; 0x71c
		(((_radio.fc_req == 0) &&
    8f76:	f8bb 277e 	ldrh.w	r2, [fp, #1918]	; 0x77e
    8f7a:	8c1b      	ldrh	r3, [r3, #32]
    8f7c:	429a      	cmp	r2, r3
    8f7e:	d00e      	beq.n	8f9e <isr+0xe6e>
		 ((_radio.fc_req != 0) &&
    8f80:	f89b 3780 	ldrb.w	r3, [fp, #1920]	; 0x780
		   _radio.conn_curr->handle)) ||
    8f84:	2b00      	cmp	r3, #0
    8f86:	d096      	beq.n	8eb6 <isr+0xd86>
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    8f88:	f89b 3780 	ldrb.w	r3, [fp, #1920]	; 0x780
		   _radio.conn_curr->handle)))))) {
    8f8c:	f8db 171c 	ldr.w	r1, [fp, #1820]	; 0x71c
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    8f90:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
		 ((_radio.fc_req != 0) &&
    8f94:	f8b3 2778 	ldrh.w	r2, [r3, #1912]	; 0x778
    8f98:	8c0b      	ldrh	r3, [r1, #32]
    8f9a:	429a      	cmp	r2, r3
    8f9c:	d18b      	bne.n	8eb6 <isr+0xd86>
		if (pdu_data_rx->len != 0) {
    8f9e:	f896 9009 	ldrb.w	r9, [r6, #9]
    8fa2:	f1b9 0f00 	cmp.w	r9, #0
    8fa6:	f000 81f0 	beq.w	938a <isr+0x125a>
			if (_radio.conn_curr->enc_rx) {
    8faa:	f8db 371c 	ldr.w	r3, [fp, #1820]	; 0x71c
    8fae:	f893 90a8 	ldrb.w	r9, [r3, #168]	; 0xa8
    8fb2:	f019 0910 	ands.w	r9, r9, #16
    8fb6:	d008      	beq.n	8fca <isr+0xe9a>
				done = radio_ccm_is_done();
    8fb8:	f002 fa36 	bl	b428 <radio_ccm_is_done>
				LL_ASSERT(done);
    8fbc:	b918      	cbnz	r0, 8fc6 <isr+0xe96>
    8fbe:	4ab7      	ldr	r2, [pc, #732]	; (929c <isr+0x116c>)
    8fc0:	49b7      	ldr	r1, [pc, #732]	; (92a0 <isr+0x1170>)
    8fc2:	f7ff ba80 	b.w	84c6 <isr+0x396>
				ccm_rx_increment = 1;
    8fc6:	f04f 0901 	mov.w	r9, #1
			if ((_radio.conn_curr->enc_rx &&
    8fca:	f8db 371c 	ldr.w	r3, [fp, #1820]	; 0x71c
    8fce:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
    8fd2:	06dc      	lsls	r4, r3, #27
    8fd4:	d40f      	bmi.n	8ff6 <isr+0xec6>
			    (_radio.conn_curr->pause_rx &&
    8fd6:	f8db 471c 	ldr.w	r4, [fp, #1820]	; 0x71c
    8fda:	7a33      	ldrb	r3, [r6, #8]
    8fdc:	f894 20a8 	ldrb.w	r2, [r4, #168]	; 0xa8
			     !radio_ccm_mic_is_valid()) ||
    8fe0:	f012 0f04 	tst.w	r2, #4
    8fe4:	d117      	bne.n	9016 <isr+0xee6>
			switch (pdu_data_rx->ll_id) {
    8fe6:	f013 0303 	ands.w	r3, r3, #3
    8fea:	f000 81ce 	beq.w	938a <isr+0x125a>
    8fee:	2b02      	cmp	r3, #2
    8ff0:	d848      	bhi.n	9084 <isr+0xf54>
				*rx_enqueue = 1;
    8ff2:	2501      	movs	r5, #1
    8ff4:	e0b7      	b.n	9166 <isr+0x1036>
			     !radio_ccm_mic_is_valid()) ||
    8ff6:	f002 fa35 	bl	b464 <radio_ccm_mic_is_valid>
			if ((_radio.conn_curr->enc_rx &&
    8ffa:	2800      	cmp	r0, #0
    8ffc:	d1eb      	bne.n	8fd6 <isr+0xea6>
				_radio.state = STATE_CLOSE;
    8ffe:	2403      	movs	r4, #3
    9000:	f88b 4014 	strb.w	r4, [fp, #20]
				radio_disable();
    9004:	f001 ffca 	bl	af9c <radio_disable>
				LL_ASSERT(!radio_is_ready());
    9008:	f001 ffe6 	bl	afd8 <radio_is_ready>
    900c:	4605      	mov	r5, r0
    900e:	b378      	cbz	r0, 9070 <isr+0xf40>
    9010:	4aa2      	ldr	r2, [pc, #648]	; (929c <isr+0x116c>)
    9012:	f7ff b8e1 	b.w	81d8 <isr+0xa8>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
    9016:	f003 0103 	and.w	r1, r3, #3
    901a:	2903      	cmp	r1, #3
    901c:	d1ef      	bne.n	8ffe <isr+0xece>
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
    901e:	f994 001d 	ldrsb.w	r0, [r4, #29]
	u8_t opcode = pdu_data->llctrl.opcode;
    9022:	7af1      	ldrb	r1, [r6, #11]
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
    9024:	2800      	cmp	r0, #0
    9026:	f002 0240 	and.w	r2, r2, #64	; 0x40
    902a:	db15      	blt.n	9058 <isr+0xf28>
	       (!conn->role &&
    902c:	b922      	cbnz	r2, 9038 <isr+0xf08>
		((!conn->refresh &&
    902e:	2902      	cmp	r1, #2
    9030:	d0d9      	beq.n	8fe6 <isr+0xeb6>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    9032:	2911      	cmp	r1, #17
    9034:	d8e3      	bhi.n	8ffe <isr+0xece>
    9036:	e009      	b.n	904c <isr+0xf1c>
		 (conn->refresh &&
    9038:	1e8a      	subs	r2, r1, #2
    903a:	b2d2      	uxtb	r2, r2
    903c:	2a09      	cmp	r2, #9
    903e:	d8f8      	bhi.n	9032 <isr+0xf02>
    9040:	f240 2005 	movw	r0, #517	; 0x205
    9044:	fa20 f202 	lsr.w	r2, r0, r2
    9048:	07d0      	lsls	r0, r2, #31
    904a:	d4cc      	bmi.n	8fe6 <isr+0xeb6>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    904c:	4a95      	ldr	r2, [pc, #596]	; (92a4 <isr+0x1174>)
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    904e:	fa22 f101 	lsr.w	r1, r2, r1
    9052:	07c9      	lsls	r1, r1, #31
    9054:	d5d3      	bpl.n	8ffe <isr+0xece>
    9056:	e7c6      	b.n	8fe6 <isr+0xeb6>
	       (conn->role &&
    9058:	b92a      	cbnz	r2, 9066 <isr+0xf36>
		((!conn->refresh &&
    905a:	2902      	cmp	r1, #2
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    905c:	d0c3      	beq.n	8fe6 <isr+0xeb6>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    905e:	2911      	cmp	r1, #17
    9060:	d8cd      	bhi.n	8ffe <isr+0xece>
    9062:	4a91      	ldr	r2, [pc, #580]	; (92a8 <isr+0x1178>)
    9064:	e7f3      	b.n	904e <isr+0xf1e>
		 (conn->refresh &&
    9066:	1e8a      	subs	r2, r1, #2
    9068:	2a01      	cmp	r2, #1
    906a:	d9bc      	bls.n	8fe6 <isr+0xeb6>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    906c:	290b      	cmp	r1, #11
    906e:	e7f5      	b.n	905c <isr+0xf2c>
				terminate_ind_rx_enqueue(_radio.conn_curr,
    9070:	f8db 071c 	ldr.w	r0, [fp, #1820]	; 0x71c
    9074:	213d      	movs	r1, #61	; 0x3d
    9076:	f7fd fdad 	bl	6bd4 <terminate_ind_rx_enqueue>
				connection_release(_radio.conn_curr);
    907a:	f8db 071c 	ldr.w	r0, [fp, #1820]	; 0x71c
    907e:	f7fd fb61 	bl	6744 <connection_release>
    9082:	e6e2      	b.n	8e4a <isr+0xd1a>
	switch (pdu_data_rx->llctrl.opcode) {
    9084:	7af5      	ldrb	r5, [r6, #11]
	pdu_data_rx = (void *)node_rx->pdu_data;
    9086:	f106 0a08 	add.w	sl, r6, #8
	switch (pdu_data_rx->llctrl.opcode) {
    908a:	2d19      	cmp	r5, #25
    908c:	f200 8186 	bhi.w	939c <isr+0x126c>
    9090:	e8df f015 	tbh	[pc, r5, lsl #1]
    9094:	0081001a 	.word	0x0081001a
    9098:	018400b5 	.word	0x018400b5
    909c:	01840184 	.word	0x01840184
    90a0:	017d0184 	.word	0x017d0184
    90a4:	00dd00c0 	.word	0x00dd00c0
    90a8:	01840184 	.word	0x01840184
    90ac:	01840112 	.word	0x01840112
    90b0:	018400d5 	.word	0x018400d5
    90b4:	01760184 	.word	0x01760184
    90b8:	01840184 	.word	0x01840184
    90bc:	01840184 	.word	0x01840184
    90c0:	01840184 	.word	0x01840184
    90c4:	01980184 	.word	0x01980184
		if (!_radio.conn_curr->role ||
    90c8:	f994 301d 	ldrsb.w	r3, [r4, #29]
    90cc:	2b00      	cmp	r3, #0
    90ce:	f280 8165 	bge.w	939c <isr+0x126c>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND,
    90d2:	7a71      	ldrb	r1, [r6, #9]
    90d4:	2000      	movs	r0, #0
    90d6:	f7fc fbed 	bl	58b4 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    90da:	2800      	cmp	r0, #0
    90dc:	f000 815e 	beq.w	939c <isr+0x126c>
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    90e0:	f8b6 1015 	ldrh.w	r1, [r6, #21]
	      conn->event_counter) & 0xFFFF) > 0x7FFF) {
    90e4:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    90e6:	1acb      	subs	r3, r1, r3
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    90e8:	041a      	lsls	r2, r3, #16
    90ea:	f100 834c 	bmi.w	9786 <isr+0x1656>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    90ee:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    90f2:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
    90f6:	429a      	cmp	r2, r3
    90f8:	d003      	beq.n	9102 <isr+0xfd2>
    90fa:	4a6c      	ldr	r2, [pc, #432]	; (92ac <isr+0x117c>)
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    90fc:	496c      	ldr	r1, [pc, #432]	; (92b0 <isr+0x1180>)
    90fe:	f7ff b9e2 	b.w	84c6 <isr+0x396>
	if (_radio.conn_upd == 0) {
    9102:	f8db 2788 	ldr.w	r2, [fp, #1928]	; 0x788
    9106:	b90a      	cbnz	r2, 910c <isr+0xfdc>
		_radio.conn_upd = conn;
    9108:	f8cb 4788 	str.w	r4, [fp, #1928]	; 0x788
	conn->llcp.conn_upd.win_size =
    910c:	7b32      	ldrb	r2, [r6, #12]
    910e:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
		pdu_data_rx->llctrl.conn_update_ind.win_offset * 1250;
    9112:	f8b6 000d 	ldrh.w	r0, [r6, #13]
    9116:	f240 42e2 	movw	r2, #1250	; 0x4e2
    911a:	4342      	muls	r2, r0
	conn->llcp.conn_upd.win_offset_us =
    911c:	66e2      	str	r2, [r4, #108]	; 0x6c
		pdu_data_rx->llctrl.conn_update_ind.interval;
    911e:	7c30      	ldrb	r0, [r6, #16]
    9120:	7bf2      	ldrb	r2, [r6, #15]
    9122:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.interval =
    9126:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
		pdu_data_rx->llctrl.conn_update_ind.latency;
    912a:	7cb0      	ldrb	r0, [r6, #18]
    912c:	7c72      	ldrb	r2, [r6, #17]
    912e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.latency =
    9132:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
		pdu_data_rx->llctrl.conn_update_ind.timeout;
    9136:	7cf2      	ldrb	r2, [r6, #19]
    9138:	7d30      	ldrb	r0, [r6, #20]
	conn->llcp.conn_upd.instant =
    913a:	f8a4 1068 	strh.w	r1, [r4, #104]	; 0x68
		pdu_data_rx->llctrl.conn_update_ind.timeout;
    913e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.timeout =
    9142:	f8a4 2066 	strh.w	r2, [r4, #102]	; 0x66
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    9146:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
	conn->llcp.conn_upd.is_internal = 0;
    914a:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    914e:	f36f 0282 	bfc	r2, #2, #1
    9152:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
	conn->llcp_ack--;
    9156:	3b01      	subs	r3, #1
	conn->llcp_type = LLCP_CONN_UPD;
    9158:	2201      	movs	r2, #1
			_radio.conn_curr->procedure_expire = 0;
    915a:	2500      	movs	r5, #0
	conn->llcp_type = LLCP_CONN_UPD;
    915c:	f884 205e 	strb.w	r2, [r4, #94]	; 0x5e
	conn->llcp_ack--;
    9160:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			_radio.conn_curr->procedure_expire = 0;
    9164:	86a5      	strh	r5, [r4, #52]	; 0x34
			_radio.conn_curr->nesn++;
    9166:	f8db 171c 	ldr.w	r1, [fp, #1820]	; 0x71c
    916a:	f891 30a8 	ldrb.w	r3, [r1, #168]	; 0xa8
    916e:	f083 0302 	eor.w	r3, r3, #2
    9172:	f881 30a8 	strb.w	r3, [r1, #168]	; 0xa8
			if (ccm_rx_increment) {
    9176:	f1b9 0f00 	cmp.w	r9, #0
    917a:	f43f ae9d 	beq.w	8eb8 <isr+0xd88>
				_radio.conn_curr->ccm_rx.counter++;
    917e:	f8d1 20b9 	ldr.w	r2, [r1, #185]	; 0xb9
    9182:	f8d1 30bd 	ldr.w	r3, [r1, #189]	; 0xbd
    9186:	3201      	adds	r2, #1
    9188:	f143 0300 	adc.w	r3, r3, #0
    918c:	f8c1 20b9 	str.w	r2, [r1, #185]	; 0xb9
    9190:	f8c1 30bd 	str.w	r3, [r1, #189]	; 0xbd
    9194:	e690      	b.n	8eb8 <isr+0xd88>
		if (!_radio.conn_curr->role ||
    9196:	f994 301d 	ldrsb.w	r3, [r4, #29]
    919a:	2b00      	cmp	r3, #0
    919c:	f280 80fe 	bge.w	939c <isr+0x126c>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CHAN_MAP_IND,
    91a0:	7a71      	ldrb	r1, [r6, #9]
    91a2:	2001      	movs	r0, #1
    91a4:	f7fc fb86 	bl	58b4 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    91a8:	2800      	cmp	r0, #0
    91aa:	f000 80f7 	beq.w	939c <isr+0x126c>
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    91ae:	f8b6 3011 	ldrh.w	r3, [r6, #17]
	      conn->event_counter) & 0xffff) > 0x7fff) {
    91b2:	8c62      	ldrh	r2, [r4, #34]	; 0x22
    91b4:	1a9b      	subs	r3, r3, r2
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    91b6:	041b      	lsls	r3, r3, #16
    91b8:	f100 82e5 	bmi.w	9786 <isr+0x1656>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    91bc:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
    91c0:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
    91c4:	429a      	cmp	r2, r3
    91c6:	d001      	beq.n	91cc <isr+0x109c>
    91c8:	4a3a      	ldr	r2, [pc, #232]	; (92b4 <isr+0x1184>)
    91ca:	e797      	b.n	90fc <isr+0xfcc>
	memcpy(&conn->llcp.chan_map.chm[0],
    91cc:	2205      	movs	r2, #5
    91ce:	f106 010c 	add.w	r1, r6, #12
    91d2:	f104 0061 	add.w	r0, r4, #97	; 0x61
    91d6:	f7f7 fa20 	bl	61a <memcpy>
		pdu_data_rx->llctrl.chan_map_ind.instant;
    91da:	7c73      	ldrb	r3, [r6, #17]
    91dc:	7cb2      	ldrb	r2, [r6, #18]
    91de:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp.chan_map.instant =
    91e2:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
	conn->llcp_type = LLCP_CHAN_MAP;
    91e6:	2302      	movs	r3, #2
    91e8:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
	conn->llcp_ack--;
    91ec:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
	conn->llcp.chan_map.initiate = 0;
    91f0:	2500      	movs	r5, #0
	conn->llcp_ack--;
    91f2:	3b01      	subs	r3, #1
	conn->llcp.chan_map.initiate = 0;
    91f4:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
	conn->llcp_ack--;
    91f8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    91fc:	e7b3      	b.n	9166 <isr+0x1036>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_TERMINATE_IND,
    91fe:	7a71      	ldrb	r1, [r6, #9]
    9200:	2002      	movs	r0, #2
    9202:	f7fc fb57 	bl	58b4 <pdu_len_cmp>
    9206:	2800      	cmp	r0, #0
    9208:	f000 80c8 	beq.w	939c <isr+0x126c>
		_radio.conn_curr->llcp_terminate.reason_peer =
    920c:	7b33      	ldrb	r3, [r6, #12]
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
    920e:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
    9212:	e0ba      	b.n	938a <isr+0x125a>
		if (!_radio.conn_curr->role ||
    9214:	f994 301d 	ldrsb.w	r3, [r4, #29]
    9218:	2b00      	cmp	r3, #0
    921a:	f280 80bf 	bge.w	939c <isr+0x126c>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_REQ,
    921e:	7a71      	ldrb	r1, [r6, #9]
    9220:	2008      	movs	r0, #8
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    9222:	f7fc fb47 	bl	58b4 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    9226:	2800      	cmp	r0, #0
    9228:	f000 80b8 	beq.w	939c <isr+0x126c>
		nack = feature_rsp_send(_radio.conn_curr, pdu_data_rx);
    922c:	4651      	mov	r1, sl
    922e:	4620      	mov	r0, r4
    9230:	f7fe fa7e 	bl	7730 <feature_rsp_send>
    9234:	4605      	mov	r5, r0
		if (!nack) {
    9236:	2800      	cmp	r0, #0
    9238:	f47f ae3d 	bne.w	8eb6 <isr+0xd86>
    923c:	e793      	b.n	9166 <isr+0x1036>
		if (_radio.conn_curr->role ||
    923e:	f994 301d 	ldrsb.w	r3, [r4, #29]
    9242:	2b00      	cmp	r3, #0
    9244:	f2c0 80aa 	blt.w	939c <isr+0x126c>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    9248:	7a71      	ldrb	r1, [r6, #9]
    924a:	200e      	movs	r0, #14
    924c:	e7e9      	b.n	9222 <isr+0x10f2>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_RSP,
    924e:	7a71      	ldrb	r1, [r6, #9]
    9250:	2009      	movs	r0, #9
    9252:	f7fc fb2f 	bl	58b4 <pdu_len_cmp>
    9256:	2800      	cmp	r0, #0
    9258:	f000 80a0 	beq.w	939c <isr+0x126c>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    925c:	7b33      	ldrb	r3, [r6, #12]
	       (features[1] << 8) | (features[2] << 16);
    925e:	7b72      	ldrb	r2, [r6, #13]
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    9260:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    9264:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
    9268:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
    926c:	f043 0310 	orr.w	r3, r3, #16
    9270:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	       (features[1] << 8) | (features[2] << 16);
    9274:	7bb2      	ldrb	r2, [r6, #14]
    9276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    927a:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
    927e:	f3c2 0210 	ubfx	r2, r2, #0, #17
    9282:	4013      	ands	r3, r2
    9284:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		_radio.conn_curr->common.fex_valid = 1;
    9288:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    928c:	f043 0320 	orr.w	r3, r3, #32
    9290:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		_radio.conn_curr->procedure_expire = 0;
    9294:	2300      	movs	r3, #0
    9296:	86a3      	strh	r3, [r4, #52]	; 0x34
    9298:	e6ab      	b.n	8ff2 <isr+0xec2>
    929a:	bf00      	nop
    929c:	0000e218 	.word	0x0000e218
    92a0:	0000e6f0 	.word	0x0000e6f0
    92a4:	00022060 	.word	0x00022060
    92a8:	00022040 	.word	0x00022040
    92ac:	0000e519 	.word	0x0000e519
    92b0:	0000e70a 	.word	0x0000e70a
    92b4:	0000e525 	.word	0x0000e525
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_VERSION_IND,
    92b8:	7a71      	ldrb	r1, [r6, #9]
    92ba:	200c      	movs	r0, #12
    92bc:	f7fc fafa 	bl	58b4 <pdu_len_cmp>
    92c0:	2800      	cmp	r0, #0
    92c2:	d06b      	beq.n	939c <isr+0x126c>
	if (!conn->llcp_version.tx) {
    92c4:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
    92c8:	f013 0501 	ands.w	r5, r3, #1
    92cc:	d152      	bne.n	9374 <isr+0x1244>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    92ce:	48ab      	ldr	r0, [pc, #684]	; (957c <isr+0x144c>)
    92d0:	f7fa fb7f 	bl	39d2 <mem_acquire>
		if (!node_tx) {
    92d4:	4601      	mov	r1, r0
    92d6:	2800      	cmp	r0, #0
    92d8:	f43f aded 	beq.w	8eb6 <isr+0xd86>
		conn->llcp_version.tx = 1;
    92dc:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
    92e0:	f043 0301 	orr.w	r3, r3, #1
    92e4:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    92e8:	7903      	ldrb	r3, [r0, #4]
    92ea:	f043 0303 	orr.w	r3, r3, #3
    92ee:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    92f0:	2306      	movs	r3, #6
    92f2:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    92f4:	230c      	movs	r3, #12
    92f6:	71c3      	strb	r3, [r0, #7]
		v->version_number = RADIO_BLE_VERSION_NUMBER;
    92f8:	2309      	movs	r3, #9
    92fa:	7203      	strb	r3, [r0, #8]
		v->company_id =	RADIO_BLE_COMPANY_ID;
    92fc:	f06f 030e 	mvn.w	r3, #14
    9300:	7243      	strb	r3, [r0, #9]
    9302:	2305      	movs	r3, #5
    9304:	7283      	strb	r3, [r0, #10]
		v->sub_version_number =	RADIO_BLE_SUB_VERSION_NUMBER;
    9306:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    930a:	72c3      	strb	r3, [r0, #11]
    930c:	7303      	strb	r3, [r0, #12]
		ctrl_tx_sec_enqueue(conn, node_tx);
    930e:	4620      	mov	r0, r4
    9310:	f7fe f9f4 	bl	76fc <ctrl_tx_sec_enqueue>
	conn->empty = 1;
    9314:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    9318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    931c:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
	pdu_data_tx = (void *)radio_pkt_empty_get();
    9320:	f001 fe8e 	bl	b040 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    9324:	7803      	ldrb	r3, [r0, #0]
	pdu_data_tx->len = 0;
    9326:	7045      	strb	r5, [r0, #1]
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    9328:	2201      	movs	r2, #1
    932a:	f362 0301 	bfi	r3, r2, #0, #2
	if (conn->pkt_tx_head) {
    932e:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    9332:	7003      	strb	r3, [r0, #0]
    9334:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
    9336:	b1c2      	cbz	r2, 936a <isr+0x123a>
		pdu_data_tx->md = 1;
    9338:	f043 0310 	orr.w	r3, r3, #16
    933c:	7003      	strb	r3, [r0, #0]
	conn->llcp_version.version_number = v->version_number;
    933e:	7b33      	ldrb	r3, [r6, #12]
    9340:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
	conn->llcp_version.company_id = v->company_id;
    9344:	7bb2      	ldrb	r2, [r6, #14]
    9346:	7b73      	ldrb	r3, [r6, #13]
    9348:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    934c:	f8a4 3092 	strh.w	r3, [r4, #146]	; 0x92
	conn->llcp_version.sub_version_number = v->sub_version_number;
    9350:	7bf3      	ldrb	r3, [r6, #15]
    9352:	7c32      	ldrb	r2, [r6, #16]
    9354:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    9358:	f8a4 3094 	strh.w	r3, [r4, #148]	; 0x94
	conn->llcp_version.rx = 1;
    935c:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
    9360:	f043 0302 	orr.w	r3, r3, #2
    9364:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    9368:	e6fd      	b.n	9166 <isr+0x1036>
		pdu_data_tx->md = 0;
    936a:	f362 1304 	bfi	r3, r2, #4, #1
    936e:	7003      	strb	r3, [r0, #0]
	u8_t rx_enqueue = 0;
    9370:	4615      	mov	r5, r2
    9372:	e7e4      	b.n	933e <isr+0x120e>
	} else if (!conn->llcp_version.rx) {
    9374:	f013 0302 	ands.w	r3, r3, #2
    9378:	d107      	bne.n	938a <isr+0x125a>
		conn->procedure_expire = 0;
    937a:	86a3      	strh	r3, [r4, #52]	; 0x34
		*rx_enqueue = 1;
    937c:	2501      	movs	r5, #1
    937e:	e7de      	b.n	933e <isr+0x120e>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND,
    9380:	7a71      	ldrb	r1, [r6, #9]
    9382:	2011      	movs	r0, #17
    9384:	f7fc fa96 	bl	58b4 <pdu_len_cmp>
    9388:	b140      	cbz	r0, 939c <isr+0x126c>
	u8_t rx_enqueue = 0;
    938a:	2500      	movs	r5, #0
    938c:	e6eb      	b.n	9166 <isr+0x1036>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP,
    938e:	7a71      	ldrb	r1, [r6, #9]
    9390:	2007      	movs	r0, #7
    9392:	f7fc fa8f 	bl	58b4 <pdu_len_cmp>
    9396:	2800      	cmp	r0, #0
    9398:	f47f af7c 	bne.w	9294 <isr+0x1164>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    939c:	4877      	ldr	r0, [pc, #476]	; (957c <isr+0x144c>)
    939e:	f7fa fb18 	bl	39d2 <mem_acquire>
	if (!node_tx) {
    93a2:	4601      	mov	r1, r0
    93a4:	2800      	cmp	r0, #0
    93a6:	f43f ad86 	beq.w	8eb6 <isr+0xd86>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    93aa:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.unknown_rsp.type = type;
    93ac:	7205      	strb	r5, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    93ae:	f043 0303 	orr.w	r3, r3, #3
    93b2:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
    93b4:	2302      	movs	r3, #2
    93b6:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
    93b8:	2307      	movs	r3, #7
    93ba:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, node_tx);
    93bc:	4620      	mov	r0, r4
    93be:	f7fe f96f 	bl	76a0 <ctrl_tx_enqueue>
    93c2:	e7e2      	b.n	938a <isr+0x125a>
		if (_radio.conn_curr->role ||
    93c4:	f994 301d 	ldrsb.w	r3, [r4, #29]
    93c8:	2b00      	cmp	r3, #0
    93ca:	dbe7      	blt.n	939c <isr+0x126c>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND,
    93cc:	7a71      	ldrb	r1, [r6, #9]
    93ce:	2019      	movs	r0, #25
    93d0:	f7fc fa70 	bl	58b4 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    93d4:	2800      	cmp	r0, #0
    93d6:	d0e1      	beq.n	939c <isr+0x126c>
			if (!(p->phys & 0x01)) {
    93d8:	7b35      	ldrb	r5, [r6, #12]
    93da:	f015 0501 	ands.w	r5, r5, #1
    93de:	f43f aec2 	beq.w	9166 <isr+0x1036>
			if (conn->llcp_req != conn->llcp_ack) {
    93e2:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
    93e6:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
    93ea:	429a      	cmp	r2, r3
    93ec:	d1cd      	bne.n	938a <isr+0x125a>
			memcpy(&conn->llcp.chan_map.chm[0],
    93ee:	2205      	movs	r2, #5
    93f0:	4963      	ldr	r1, [pc, #396]	; (9580 <isr+0x1450>)
    93f2:	f104 0061 	add.w	r0, r4, #97	; 0x61
    93f6:	f7f7 f910 	bl	61a <memcpy>
			conn->llcp.chan_map.initiate = 1;
    93fa:	2301      	movs	r3, #1
    93fc:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
			conn->llcp_type = LLCP_CHAN_MAP;
    9400:	2302      	movs	r3, #2
    9402:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
			conn->llcp_ack--;
    9406:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
    940a:	3b01      	subs	r3, #1
    940c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    9410:	e7bb      	b.n	938a <isr+0x125a>
		if (_radio.crc_expire == 0) {
    9412:	f89b 3721 	ldrb.w	r3, [fp, #1825]	; 0x721
    9416:	b913      	cbnz	r3, 941e <isr+0x12ee>
			_radio.crc_expire = 2;
    9418:	2302      	movs	r3, #2
    941a:	f88b 3721 	strb.w	r3, [fp, #1825]	; 0x721
		_radio.crc_expire--;
    941e:	f89b 4721 	ldrb.w	r4, [fp, #1825]	; 0x721
		if (!_radio.conn_curr->supervision_expire) {
    9422:	f8db 371c 	ldr.w	r3, [fp, #1820]	; 0x71c
		_radio.crc_expire--;
    9426:	3c01      	subs	r4, #1
    9428:	b2e4      	uxtb	r4, r4
    942a:	f88b 4721 	strb.w	r4, [fp, #1825]	; 0x721
		if (!_radio.conn_curr->supervision_expire) {
    942e:	8e1d      	ldrh	r5, [r3, #48]	; 0x30
		crc_close = (_radio.crc_expire == 0);
    9430:	fab4 f484 	clz	r4, r4
    9434:	0964      	lsrs	r4, r4, #5
		if (!_radio.conn_curr->supervision_expire) {
    9436:	b91d      	cbnz	r5, 9440 <isr+0x1310>
			_radio.conn_curr->supervision_expire =
    9438:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
    943a:	861a      	strh	r2, [r3, #48]	; 0x30
	struct radio_pdu_node_tx *tx_release = NULL;
    943c:	46a8      	mov	r8, r5
    943e:	e541      	b.n	8ec4 <isr+0xd94>
	u8_t rx_enqueue = 0;
    9440:	2500      	movs	r5, #0
    9442:	e7fb      	b.n	943c <isr+0x130c>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    9444:	2303      	movs	r3, #3
    9446:	e55e      	b.n	8f06 <isr+0xdd6>
			radio_switch_complete_and_disable();
    9448:	f001 fe18 	bl	b07c <radio_switch_complete_and_disable>
	pdu_data_tx->sn = _radio.conn_curr->sn;
    944c:	990d      	ldr	r1, [sp, #52]	; 0x34
    944e:	f8db 071c 	ldr.w	r0, [fp, #1820]	; 0x71c
    9452:	780b      	ldrb	r3, [r1, #0]
    9454:	f890 20a8 	ldrb.w	r2, [r0, #168]	; 0xa8
    9458:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
    945c:	f3c2 0240 	ubfx	r2, r2, #1, #1
    9460:	f362 0382 	bfi	r3, r2, #2, #1
    9464:	700b      	strb	r3, [r1, #0]
	tx_packet_set(_radio.conn_curr, pdu_data_tx);
    9466:	f7fd f9ff 	bl	6868 <tx_packet_set>
	LL_ASSERT(!radio_is_ready());
    946a:	f001 fdb5 	bl	afd8 <radio_is_ready>
    946e:	2800      	cmp	r0, #0
    9470:	f43f aced 	beq.w	8e4e <isr+0xd1e>
    9474:	4a43      	ldr	r2, [pc, #268]	; (9584 <isr+0x1454>)
    9476:	f7fe beaf 	b.w	81d8 <isr+0xa8>
		radio_tmr_tifs_set(RADIO_TIFS);
    947a:	2096      	movs	r0, #150	; 0x96
    947c:	f001 fe78 	bl	b170 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    9480:	2000      	movs	r0, #0
    9482:	f001 fde5 	bl	b050 <radio_switch_complete_and_rx>
		radio_tmr_end_capture();
    9486:	f001 ff4f 	bl	b328 <radio_tmr_end_capture>
    948a:	e7df      	b.n	944c <isr+0x131c>
		LL_ASSERT(0);
    948c:	4a3e      	ldr	r2, [pc, #248]	; (9588 <isr+0x1458>)
    948e:	f7fe befd 	b.w	828c <isr+0x15c>
	switch (_radio.role) {
    9492:	f89b 2013 	ldrb.w	r2, [fp, #19]
    9496:	2a04      	cmp	r2, #4
    9498:	f200 8162 	bhi.w	9760 <isr+0x1630>
    949c:	e8df f012 	tbh	[pc, r2, lsl #1]
    94a0:	00050154 	.word	0x00050154
    94a4:	0055002a 	.word	0x0055002a
    94a8:	0055      	.short	0x0055
	if ((_radio.state == STATE_CLOSE) &&
    94aa:	2b03      	cmp	r3, #3
    94ac:	d109      	bne.n	94c2 <isr+0x1392>
	    (_radio.advertiser.chan_map_current != 0)) {
    94ae:	f89b 3028 	ldrb.w	r3, [fp, #40]	; 0x28
	if ((_radio.state == STATE_CLOSE) &&
    94b2:	075d      	lsls	r5, r3, #29
    94b4:	d005      	beq.n	94c2 <isr+0x1392>
		adv_setup();
    94b6:	f7fc fd5b 	bl	5f70 <adv_setup>
		radio_tx_enable();
    94ba:	f001 fd69 	bl	af90 <radio_tx_enable>
    94be:	f7fe be98 	b.w	81f2 <isr+0xc2>
		radio_filter_disable();
    94c2:	f001 fe25 	bl	b110 <radio_filter_disable>
	_radio.role = ROLE_NONE;
    94c6:	2400      	movs	r4, #0
    94c8:	f88b 4013 	strb.w	r4, [fp, #19]
	_radio.state = STATE_NONE;
    94cc:	f88b 4014 	strb.w	r4, [fp, #20]
	_radio.ticker_id_event = 0;
    94d0:	f88b 4011 	strb.w	r4, [fp, #17]
	radio_tmr_stop();
    94d4:	f001 feca 	bl	b26c <radio_tmr_stop>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    94d8:	4622      	mov	r2, r4
    94da:	4621      	mov	r1, r4
    94dc:	4620      	mov	r0, r4
    94de:	4b2b      	ldr	r3, [pc, #172]	; (958c <isr+0x145c>)
    94e0:	f7fa fb30 	bl	3b44 <mayfly_enqueue>
	LL_ASSERT(!retval);
    94e4:	4604      	mov	r4, r0
    94e6:	2800      	cmp	r0, #0
    94e8:	f000 813d 	beq.w	9766 <isr+0x1636>
    94ec:	4a28      	ldr	r2, [pc, #160]	; (9590 <isr+0x1460>)
    94ee:	4929      	ldr	r1, [pc, #164]	; (9594 <isr+0x1464>)
    94f0:	f7fe bfe9 	b.w	84c6 <isr+0x396>
	if (_radio.state == STATE_CLOSE) {
    94f4:	2b03      	cmp	r3, #3
    94f6:	d11a      	bne.n	952e <isr+0x13fe>
		radio_tmr_tifs_set(RADIO_TIFS);
    94f8:	2096      	movs	r0, #150	; 0x96
    94fa:	f001 fe39 	bl	b170 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    94fe:	2300      	movs	r3, #0
    9500:	4619      	mov	r1, r3
    9502:	461a      	mov	r2, r3
    9504:	4618      	mov	r0, r3
    9506:	f001 fdaf 	bl	b068 <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
    950a:	f8db 373c 	ldr.w	r3, [fp, #1852]	; 0x73c
    950e:	f89b 2741 	ldrb.w	r2, [fp, #1857]	; 0x741
		radio_pkt_rx_set(_radio.packet_rx
    9512:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    9516:	3008      	adds	r0, #8
    9518:	f001 fd1a 	bl	af50 <radio_pkt_rx_set>
		radio_rssi_measure();
    951c:	f001 fdbc 	bl	b098 <radio_rssi_measure>
		_radio.state = STATE_RX;
    9520:	2301      	movs	r3, #1
    9522:	f88b 3014 	strb.w	r3, [fp, #20]
		radio_rx_enable();
    9526:	f001 fd2d 	bl	af84 <radio_rx_enable>
    952a:	f7fe be62 	b.w	81f2 <isr+0xc2>
		radio_filter_disable();
    952e:	f001 fdef 	bl	b110 <radio_filter_disable>
		if (_radio.state == STATE_ABORT) {
    9532:	f89b 3014 	ldrb.w	r3, [fp, #20]
    9536:	2b05      	cmp	r3, #5
    9538:	d1c5      	bne.n	94c6 <isr+0x1396>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    953a:	2300      	movs	r3, #0
    953c:	9300      	str	r3, [sp, #0]
    953e:	2204      	movs	r2, #4
    9540:	4619      	mov	r1, r3
    9542:	4618      	mov	r0, r3
    9544:	f7fb f950 	bl	47e8 <ticker_stop>
    9548:	e7bd      	b.n	94c6 <isr+0x1396>
	if (_radio.conn_curr == 0) {
    954a:	f8db 071c 	ldr.w	r0, [fp, #1820]	; 0x71c
    954e:	2800      	cmp	r0, #0
    9550:	d0b9      	beq.n	94c6 <isr+0x1396>
	reason_peer = _radio.conn_curr->llcp_terminate.reason_peer;
    9552:	f890 109b 	ldrb.w	r1, [r0, #155]	; 0x9b
	if (reason_peer && ((_radio.role == ROLE_SLAVE) ||
    9556:	b1f9      	cbz	r1, 9598 <isr+0x1468>
    9558:	f89b 3013 	ldrb.w	r3, [fp, #19]
    955c:	2b03      	cmp	r3, #3
    955e:	d003      	beq.n	9568 <isr+0x1438>
    9560:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    9564:	07dc      	lsls	r4, r3, #31
    9566:	d517      	bpl.n	9598 <isr+0x1468>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
    9568:	f7fd fb34 	bl	6bd4 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    956c:	f8db 071c 	ldr.w	r0, [fp, #1820]	; 0x71c
    9570:	f7fd f8e8 	bl	6744 <connection_release>
			_radio.conn_curr = NULL;
    9574:	2300      	movs	r3, #0
    9576:	f8cb 371c 	str.w	r3, [fp, #1820]	; 0x71c
    957a:	e7a4      	b.n	94c6 <isr+0x1396>
    957c:	20001154 	.word	0x20001154
    9580:	2000111a 	.word	0x2000111a
    9584:	0000e228 	.word	0x0000e228
    9588:	0000e234 	.word	0x0000e234
    958c:	20004f50 	.word	0x20004f50
    9590:	0000e2f1 	.word	0x0000e2f1
    9594:	0000e690 	.word	0x0000e690
	latency_event = _radio.conn_curr->latency_event;
    9598:	8d46      	ldrh	r6, [r0, #42]	; 0x2a
	if (_radio.packet_counter &&
    959a:	f89b 7720 	ldrb.w	r7, [fp, #1824]	; 0x720
	elapsed_event = latency_event + 1;
    959e:	1c75      	adds	r5, r6, #1
    95a0:	b2ad      	uxth	r5, r5
	if (_radio.packet_counter &&
    95a2:	2f00      	cmp	r7, #0
    95a4:	d06c      	beq.n	9680 <isr+0x1550>
		if (_radio.role == ROLE_SLAVE) {
    95a6:	f89b 3013 	ldrb.w	r3, [fp, #19]
    95aa:	2b03      	cmp	r3, #3
    95ac:	d15c      	bne.n	9668 <isr+0x1538>
			start_to_address_actual_us = radio_tmr_aa_restore() -
    95ae:	f001 feaf 	bl	b310 <radio_tmr_aa_restore>
    95b2:	4680      	mov	r8, r0
						     radio_tmr_ready_get();
    95b4:	f001 feb2 	bl	b31c <radio_tmr_ready_get>
				_radio.conn_curr->slave.window_widening_event_us;
    95b8:	f8db 771c 	ldr.w	r7, [fp, #1820]	; 0x71c
    95bc:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 97b0 <isr+0x1680>
			start_to_address_actual_us = radio_tmr_aa_restore() -
    95c0:	eba8 0800 	sub.w	r8, r8, r0
			window_widening_event_us =
    95c4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
    95c6:	f100 0a58 	add.w	sl, r0, #88	; 0x58
			if (start_to_address_actual_us <=
    95ca:	45d0      	cmp	r8, sl
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    95cc:	a376      	add	r3, pc, #472	; (adr r3, 97a8 <isr+0x1678>)
    95ce:	e9d3 2300 	ldrd	r2, r3, [r3]
			if (start_to_address_actual_us <=
    95d2:	d83c      	bhi.n	964e <isr+0x151e>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    95d4:	fba0 0109 	umull	r0, r1, r0, r9
    95d8:	f7f6 fe46 	bl	268 <__aeabi_uldivmod>
    95dc:	b284      	uxth	r4, r0
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    95de:	ebaa 0008 	sub.w	r0, sl, r8
    95e2:	a371      	add	r3, pc, #452	; (adr r3, 97a8 <isr+0x1678>)
    95e4:	e9d3 2300 	ldrd	r2, r3, [r3]
    95e8:	fba0 0109 	umull	r0, r1, r0, r9
    95ec:	f7f6 fe3c 	bl	268 <__aeabi_uldivmod>
    95f0:	b283      	uxth	r3, r0
			_radio.conn_curr->slave.window_widening_event_us = 0;
    95f2:	2200      	movs	r2, #0
    95f4:	64ba      	str	r2, [r7, #72]	; 0x48
			_radio.conn_curr->slave.window_size_event_us = 0;
    95f6:	653a      	str	r2, [r7, #80]	; 0x50
			if (_radio.conn_curr->pkt_tx_head) {
    95f8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
    95fc:	b372      	cbz	r2, 965c <isr+0x152c>
				if (pdu_data_tx->len ||
    95fe:	7952      	ldrb	r2, [r2, #5]
    9600:	b912      	cbnz	r2, 9608 <isr+0x14d8>
    9602:	f897 2101 	ldrb.w	r2, [r7, #257]	; 0x101
    9606:	b10a      	cbz	r2, 960c <isr+0x14dc>
					_radio.conn_curr->latency_event = 0;
    9608:	2200      	movs	r2, #0
				_radio.conn_curr->latency_event =
    960a:	857a      	strh	r2, [r7, #42]	; 0x2a
		_radio.conn_curr->connect_expire = 0;
    960c:	f8db 271c 	ldr.w	r2, [fp, #1820]	; 0x71c
    9610:	2100      	movs	r1, #0
    9612:	8591      	strh	r1, [r2, #44]	; 0x2c
	if (_radio.conn_curr->supervision_expire) {
    9614:	f8db 071c 	ldr.w	r0, [fp, #1820]	; 0x71c
    9618:	8e02      	ldrh	r2, [r0, #48]	; 0x30
    961a:	b1b2      	cbz	r2, 964a <isr+0x151a>
		if (_radio.conn_curr->supervision_expire > elapsed_event) {
    961c:	4295      	cmp	r5, r2
    961e:	f080 808b 	bcs.w	9738 <isr+0x1608>
			_radio.conn_curr->supervision_expire -= elapsed_event;
    9622:	1b52      	subs	r2, r2, r5
    9624:	b292      	uxth	r2, r2
			_radio.conn_curr->latency_event = 0;
    9626:	2100      	movs	r1, #0
			if (_radio.conn_curr->supervision_expire <= 6) {
    9628:	2a06      	cmp	r2, #6
			_radio.conn_curr->supervision_expire -= elapsed_event;
    962a:	8602      	strh	r2, [r0, #48]	; 0x30
			_radio.conn_curr->latency_event = 0;
    962c:	8541      	strh	r1, [r0, #42]	; 0x2a
			if (_radio.conn_curr->supervision_expire <= 6) {
    962e:	f240 8085 	bls.w	973c <isr+0x160c>
			else if (_radio.role == ROLE_SLAVE) {
    9632:	f89b 2013 	ldrb.w	r2, [fp, #19]
    9636:	2a03      	cmp	r2, #3
    9638:	d107      	bne.n	964a <isr+0x151a>
				if (latency_event != 0) {
    963a:	2e00      	cmp	r6, #0
    963c:	d17e      	bne.n	973c <isr+0x160c>
					force = _radio.conn_curr->slave.force & 0x01;
    963e:	6d47      	ldr	r7, [r0, #84]	; 0x54
					_radio.conn_curr->slave.force >>= 1;
    9640:	087a      	lsrs	r2, r7, #1
					if (force) {
    9642:	f017 0701 	ands.w	r7, r7, #1
    9646:	d135      	bne.n	96b4 <isr+0x1584>
					_radio.conn_curr->slave.force >>= 1;
    9648:	6542      	str	r2, [r0, #84]	; 0x54
	force = 0;
    964a:	2700      	movs	r7, #0
    964c:	e035      	b.n	96ba <isr+0x158a>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    964e:	fba8 0109 	umull	r0, r1, r8, r9
    9652:	f7f6 fe09 	bl	268 <__aeabi_uldivmod>
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    9656:	2302      	movs	r3, #2
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    9658:	b284      	uxth	r4, r0
    965a:	e7ca      	b.n	95f2 <isr+0x14c2>
			} else if (_radio.conn_curr->slave.latency_enabled) {
    965c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
    9660:	07d2      	lsls	r2, r2, #31
    9662:	d5d3      	bpl.n	960c <isr+0x14dc>
				_radio.conn_curr->latency_event =
    9664:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    9666:	e7d0      	b.n	960a <isr+0x14da>
		} else if (reason_peer) {
    9668:	b141      	cbz	r1, 967c <isr+0x154c>
			_radio.conn_curr->master.terminate_ack = 1;
    966a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    966e:	f043 0301 	orr.w	r3, r3, #1
    9672:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
	ticks_drift_minus = 0;
    9676:	2300      	movs	r3, #0
	ticks_drift_plus = 0;
    9678:	461c      	mov	r4, r3
    967a:	e7c7      	b.n	960c <isr+0x14dc>
	ticks_drift_minus = 0;
    967c:	460b      	mov	r3, r1
    967e:	e7fb      	b.n	9678 <isr+0x1548>
	else if (_radio.conn_curr->connect_expire) {
    9680:	8d84      	ldrh	r4, [r0, #44]	; 0x2c
    9682:	b184      	cbz	r4, 96a6 <isr+0x1576>
		if (_radio.conn_curr->connect_expire > elapsed_event) {
    9684:	42a5      	cmp	r5, r4
    9686:	d204      	bcs.n	9692 <isr+0x1562>
			_radio.conn_curr->connect_expire -= elapsed_event;
    9688:	1b64      	subs	r4, r4, r5
    968a:	8584      	strh	r4, [r0, #44]	; 0x2c
	ticks_drift_minus = 0;
    968c:	463c      	mov	r4, r7
    968e:	4623      	mov	r3, r4
    9690:	e7c0      	b.n	9614 <isr+0x14e4>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x3e);
    9692:	213e      	movs	r1, #62	; 0x3e
    9694:	f7fd fa9e 	bl	6bd4 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    9698:	f8db 071c 	ldr.w	r0, [fp, #1820]	; 0x71c
    969c:	f7fd f852 	bl	6744 <connection_release>
			_radio.conn_curr = NULL;
    96a0:	f8cb 771c 	str.w	r7, [fp, #1820]	; 0x71c
    96a4:	e70f      	b.n	94c6 <isr+0x1396>
		if (!_radio.conn_curr->supervision_expire) {
    96a6:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    96a8:	2b00      	cmp	r3, #0
    96aa:	d1f0      	bne.n	968e <isr+0x155e>
			_radio.conn_curr->supervision_expire =
    96ac:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    96ae:	8602      	strh	r2, [r0, #48]	; 0x30
	ticks_drift_plus = 0;
    96b0:	461c      	mov	r4, r3
    96b2:	e7af      	b.n	9614 <isr+0x14e4>
						_radio.conn_curr->slave.force |=
    96b4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    96b8:	6542      	str	r2, [r0, #84]	; 0x54
	if (_radio.conn_curr->procedure_expire != 0) {
    96ba:	8e82      	ldrh	r2, [r0, #52]	; 0x34
    96bc:	b11a      	cbz	r2, 96c6 <isr+0x1596>
		if (_radio.conn_curr->procedure_expire > elapsed_event) {
    96be:	4295      	cmp	r5, r2
    96c0:	d23e      	bcs.n	9740 <isr+0x1610>
			_radio.conn_curr->procedure_expire -= elapsed_event;
    96c2:	1b55      	subs	r5, r2, r5
    96c4:	8685      	strh	r5, [r0, #52]	; 0x34
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    96c6:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
    96ca:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
    96ce:	4291      	cmp	r1, r2
    96d0:	d006      	beq.n	96e0 <isr+0x15b0>
	    ((_radio.conn_curr->llcp_type == LLCP_CONN_UPD) ||
    96d2:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    96d6:	3a01      	subs	r2, #1
    96d8:	2a01      	cmp	r2, #1
		_radio.conn_curr->latency_event = 0;
    96da:	bf9c      	itt	ls
    96dc:	2200      	movls	r2, #0
    96de:	8542      	strhls	r2, [r0, #42]	; 0x2a
	if ((force) || (latency_event != _radio.conn_curr->latency_event)) {
    96e0:	b917      	cbnz	r7, 96e8 <isr+0x15b8>
    96e2:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
    96e4:	42b2      	cmp	r2, r6
    96e6:	d02d      	beq.n	9744 <isr+0x1614>
		lazy = _radio.conn_curr->latency_event + 1;
    96e8:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
    96ea:	3101      	adds	r1, #1
    96ec:	b289      	uxth	r1, r1
	if ((ticks_drift_plus != 0) || (ticks_drift_minus != 0) ||
    96ee:	b924      	cbnz	r4, 96fa <isr+0x15ca>
    96f0:	b91b      	cbnz	r3, 96fa <isr+0x15ca>
    96f2:	b911      	cbnz	r1, 96fa <isr+0x15ca>
	    (lazy != 0) || (force != 0)) {
    96f4:	2f00      	cmp	r7, #0
    96f6:	f43f aee6 	beq.w	94c6 <isr+0x1396>
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    96fa:	f890 5020 	ldrb.w	r5, [r0, #32]
		ticker_status =
    96fe:	4a24      	ldr	r2, [pc, #144]	; (9790 <isr+0x1660>)
    9700:	9103      	str	r1, [sp, #12]
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    9702:	3507      	adds	r5, #7
		ticker_status =
    9704:	2100      	movs	r1, #0
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    9706:	b2ed      	uxtb	r5, r5
		ticker_status =
    9708:	9205      	str	r2, [sp, #20]
    970a:	9300      	str	r3, [sp, #0]
				      (void *)(u32_t)ticker_id);
    970c:	9506      	str	r5, [sp, #24]
		ticker_status =
    970e:	4623      	mov	r3, r4
    9710:	9704      	str	r7, [sp, #16]
    9712:	9102      	str	r1, [sp, #8]
    9714:	9101      	str	r1, [sp, #4]
    9716:	462a      	mov	r2, r5
    9718:	4608      	mov	r0, r1
    971a:	f7fb f817 	bl	474c <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    971e:	f030 0302 	bics.w	r3, r0, #2
    9722:	f43f aed0 	beq.w	94c6 <isr+0x1396>
    9726:	f89b 3012 	ldrb.w	r3, [fp, #18]
    972a:	429d      	cmp	r5, r3
    972c:	f43f aecb 	beq.w	94c6 <isr+0x1396>
    9730:	4a18      	ldr	r2, [pc, #96]	; (9794 <isr+0x1664>)
    9732:	4919      	ldr	r1, [pc, #100]	; (9798 <isr+0x1668>)
    9734:	f7fe bec7 	b.w	84c6 <isr+0x396>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
    9738:	2108      	movs	r1, #8
    973a:	e715      	b.n	9568 <isr+0x1438>
				force = 1;
    973c:	2701      	movs	r7, #1
    973e:	e7bc      	b.n	96ba <isr+0x158a>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x22);
    9740:	2122      	movs	r1, #34	; 0x22
    9742:	e711      	b.n	9568 <isr+0x1438>
	lazy = 0;
    9744:	4639      	mov	r1, r7
    9746:	e7d2      	b.n	96ee <isr+0x15be>
		LL_ASSERT((_radio.state == STATE_STOP) ||
    9748:	3b04      	subs	r3, #4
    974a:	2b01      	cmp	r3, #1
    974c:	d903      	bls.n	9756 <isr+0x1626>
    974e:	4a13      	ldr	r2, [pc, #76]	; (979c <isr+0x166c>)
    9750:	4913      	ldr	r1, [pc, #76]	; (97a0 <isr+0x1670>)
    9752:	f7fe beb8 	b.w	84c6 <isr+0x396>
		_radio.state = STATE_NONE;
    9756:	2300      	movs	r3, #0
    9758:	f88b 3014 	strb.w	r3, [fp, #20]
    975c:	f7fe bd6d 	b.w	823a <isr+0x10a>
		LL_ASSERT(0);
    9760:	4a0e      	ldr	r2, [pc, #56]	; (979c <isr+0x166c>)
    9762:	f7fe bd93 	b.w	828c <isr+0x15c>
	clock_control_off(_radio.hf_clock, NULL);
    9766:	f8db 0000 	ldr.w	r0, [fp]
    976a:	6843      	ldr	r3, [r0, #4]
    976c:	4621      	mov	r1, r4
    976e:	685b      	ldr	r3, [r3, #4]
    9770:	4798      	blx	r3
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    9772:	2201      	movs	r2, #1
    9774:	4611      	mov	r1, r2
    9776:	4620      	mov	r0, r4
    9778:	f7fa f9bc 	bl	3af4 <mayfly_enable>
    977c:	f7fe bd5d 	b.w	823a <isr+0x10a>
		LL_ASSERT(0);
    9780:	4a08      	ldr	r2, [pc, #32]	; (97a4 <isr+0x1674>)
    9782:	f7fe bd83 	b.w	828c <isr+0x15c>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
    9786:	2328      	movs	r3, #40	; 0x28
    9788:	e541      	b.n	920e <isr+0x10de>
    978a:	bf00      	nop
    978c:	f3af 8000 	nop.w
    9790:	000063fd 	.word	0x000063fd
    9794:	0000e247 	.word	0x0000e247
    9798:	0000e740 	.word	0x0000e740
    979c:	0000e256 	.word	0x0000e256
    97a0:	0000e7aa 	.word	0x0000e7aa
    97a4:	0000e26c 	.word	0x0000e26c
    97a8:	1afd498d 	.word	0x1afd498d
    97ac:	00000007 	.word	0x00000007
    97b0:	3b9aca00 	.word	0x3b9aca00

000097b4 <event_master>:
{
    97b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    97b6:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    97b8:	4b4d      	ldr	r3, [pc, #308]	; (98f0 <event_master+0x13c>)
    97ba:	7cda      	ldrb	r2, [r3, #19]
{
    97bc:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    97be:	f002 06ff 	and.w	r6, r2, #255	; 0xff
    97c2:	461d      	mov	r5, r3
    97c4:	b152      	cbz	r2, 97dc <event_master+0x28>
    97c6:	4a4b      	ldr	r2, [pc, #300]	; (98f4 <event_master+0x140>)
    97c8:	494b      	ldr	r1, [pc, #300]	; (98f8 <event_master+0x144>)
	LL_ASSERT(_radio.ticker_id_prepare ==
    97ca:	2003      	movs	r0, #3
    97cc:	f7f8 fd10 	bl	21f0 <bt_log>
    97d0:	4040      	eors	r0, r0
    97d2:	f380 8811 	msr	BASEPRI, r0
    97d6:	f04f 0004 	mov.w	r0, #4
    97da:	df02      	svc	2
    97dc:	7c1b      	ldrb	r3, [r3, #16]
    97de:	8c22      	ldrh	r2, [r4, #32]
    97e0:	b2db      	uxtb	r3, r3
    97e2:	3207      	adds	r2, #7
    97e4:	4293      	cmp	r3, r2
    97e6:	d002      	beq.n	97ee <event_master+0x3a>
    97e8:	4a42      	ldr	r2, [pc, #264]	; (98f4 <event_master+0x140>)
    97ea:	4944      	ldr	r1, [pc, #272]	; (98fc <event_master+0x148>)
    97ec:	e7ed      	b.n	97ca <event_master+0x16>
	_radio.role = ROLE_MASTER;
    97ee:	2204      	movs	r2, #4
	_radio.packet_counter = 0;
    97f0:	f885 6720 	strb.w	r6, [r5, #1824]	; 0x720
	_radio.crc_expire = 0;
    97f4:	f885 6721 	strb.w	r6, [r5, #1825]	; 0x721
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    97f8:	b2db      	uxtb	r3, r3
	_radio.role = ROLE_MASTER;
    97fa:	74ea      	strb	r2, [r5, #19]
	_radio.ticker_id_prepare = 0;
    97fc:	742e      	strb	r6, [r5, #16]
	_radio.ticker_id_event =
    97fe:	746b      	strb	r3, [r5, #17]
	conn->latency_event = conn->latency_prepare;
    9800:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
    9802:	f8c5 471c 	str.w	r4, [r5, #1820]	; 0x71c
	_radio.state = STATE_TX;
    9806:	2002      	movs	r0, #2
	conn->latency_event = conn->latency_prepare;
    9808:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;
    980a:	8526      	strh	r6, [r4, #40]	; 0x28
	_radio.state = STATE_TX;
    980c:	7528      	strb	r0, [r5, #20]
	_radio.ticks_anchor = ticks_at_expire;
    980e:	60af      	str	r7, [r5, #8]
	packet_tx_enqueue(2);
    9810:	f7fc ff4a 	bl	66a8 <packet_tx_enqueue>
	prepare_pdu_data_tx(conn, &pdu_data_tx);
    9814:	a901      	add	r1, sp, #4
    9816:	4620      	mov	r0, r4
    9818:	f7fe fc22 	bl	8060 <prepare_pdu_data_tx>
	pdu_data_tx->sn = conn->sn;
    981c:	9901      	ldr	r1, [sp, #4]
    981e:	f894 20a8 	ldrb.w	r2, [r4, #168]	; 0xa8
    9822:	780b      	ldrb	r3, [r1, #0]
    9824:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = conn->nesn;
    9828:	f3c2 0240 	ubfx	r2, r2, #1, #1
    982c:	f362 0382 	bfi	r3, r2, #2, #1
    9830:	700b      	strb	r3, [r1, #0]
	connection_configure(conn);
    9832:	4620      	mov	r0, r4
    9834:	f7fe fb2a 	bl	7e8c <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
    9838:	2096      	movs	r0, #150	; 0x96
    983a:	f001 fc99 	bl	b170 <radio_tmr_tifs_set>
	radio_switch_complete_and_rx(0);
    983e:	4630      	mov	r0, r6
    9840:	f001 fc06 	bl	b050 <radio_switch_complete_and_rx>
	tx_packet_set(conn, pdu_data_tx);
    9844:	9901      	ldr	r1, [sp, #4]
    9846:	4620      	mov	r0, r4
    9848:	f7fd f80e 	bl	6868 <tx_packet_set>
	if (conn->data_chan_sel) {
    984c:	7f63      	ldrb	r3, [r4, #29]
    984e:	f013 0f40 	tst.w	r3, #64	; 0x40
    9852:	f104 0217 	add.w	r2, r4, #23
    9856:	d021      	beq.n	989c <event_master+0xe8>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    9858:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    985a:	8be1      	ldrh	r1, [r4, #30]
    985c:	3801      	subs	r0, #1
    985e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9862:	b280      	uxth	r0, r0
    9864:	f7fd fed8 	bl	7618 <chan_sel_2>
	chan_set(data_chan_use);
    9868:	f7fc fa44 	bl	5cf4 <chan_set>
		remainder_us = radio_tmr_start(1,
    986c:	68ea      	ldr	r2, [r5, #12]
    986e:	f107 0109 	add.w	r1, r7, #9
    9872:	2001      	movs	r0, #1
    9874:	f001 fc88 	bl	b188 <radio_tmr_start>
		radio_tmr_end_capture();
    9878:	f001 fd56 	bl	b328 <radio_tmr_end_capture>
	    preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    987c:	f894 1020 	ldrb.w	r1, [r4, #32]
    9880:	3107      	adds	r1, #7
    9882:	463a      	mov	r2, r7
    9884:	b2c9      	uxtb	r1, r1
    9886:	4620      	mov	r0, r4
    9888:	f7fd fa44 	bl	6d14 <preempt_calc>
	if (0 !=
    988c:	4603      	mov	r3, r0
    988e:	b328      	cbz	r0, 98dc <event_master+0x128>
		_radio.state = STATE_STOP;
    9890:	2304      	movs	r3, #4
    9892:	752b      	strb	r3, [r5, #20]
		radio_disable();
    9894:	f001 fb82 	bl	af9c <radio_disable>
}
    9898:	b003      	add	sp, #12
    989a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    989c:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    989e:	7fa6      	ldrb	r6, [r4, #30]
    98a0:	fb01 6606 	mla	r6, r1, r6, r6
    98a4:	7fe1      	ldrb	r1, [r4, #31]
    98a6:	2025      	movs	r0, #37	; 0x25
    98a8:	440e      	add	r6, r1
    98aa:	fb96 f1f0 	sdiv	r1, r6, r0
    98ae:	fb00 6611 	mls	r6, r0, r1, r6
    98b2:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    98b4:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
    98b6:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    98b8:	5c51      	ldrb	r1, [r2, r1]
    98ba:	f006 0607 	and.w	r6, r6, #7
    98be:	fa41 f606 	asr.w	r6, r1, r6
    98c2:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
    98c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    98c8:	d4ce      	bmi.n	9868 <event_master+0xb4>
		chan_index = chan_next % chan_count;
    98ca:	fbb0 f1f3 	udiv	r1, r0, r3
    98ce:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
    98d2:	b2c9      	uxtb	r1, r1
    98d4:	4610      	mov	r0, r2
    98d6:	f7fc f819 	bl	590c <chan_sel_remap>
    98da:	e7c5      	b.n	9868 <event_master+0xb4>
		ticker_status =
    98dc:	4a08      	ldr	r2, [pc, #32]	; (9900 <event_master+0x14c>)
    98de:	4601      	mov	r1, r0
    98e0:	f7fb f800 	bl	48e4 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    98e4:	f030 0302 	bics.w	r3, r0, #2
    98e8:	d0d6      	beq.n	9898 <event_master+0xe4>
    98ea:	4a02      	ldr	r2, [pc, #8]	; (98f4 <event_master+0x140>)
    98ec:	4905      	ldr	r1, [pc, #20]	; (9904 <event_master+0x150>)
    98ee:	e76c      	b.n	97ca <event_master+0x16>
    98f0:	200009f8 	.word	0x200009f8
    98f4:	0000e4ba 	.word	0x0000e4ba
    98f8:	0000e5eb 	.word	0x0000e5eb
    98fc:	0000e64c 	.word	0x0000e64c
    9900:	00006431 	.word	0x00006431
    9904:	0000e576 	.word	0x0000e576

00009908 <radio_init>:
{
    9908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	_radio.hf_clock = hf_clock;
    990c:	4e3e      	ldr	r6, [pc, #248]	; (9a08 <radio_init+0x100>)
{
    990e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    9910:	f89d c01c 	ldrb.w	ip, [sp, #28]
    9914:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
    9918:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    991c:	f89d e018 	ldrb.w	lr, [sp, #24]
	_radio.hf_clock = hf_clock;
    9920:	6030      	str	r0, [r6, #0]
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
    9922:	f44f 7082 	mov.w	r0, #260	; 0x104
    9926:	fb00 4003 	mla	r0, r0, r3, r4
	_radio.sca = sca;
    992a:	f886 1728 	strb.w	r1, [r6, #1832]	; 0x728
	_radio.conn_pool = mem_radio;
    992e:	f8c6 4710 	str.w	r4, [r6, #1808]	; 0x710
	mem_radio_end = mem_radio + mem_size;
    9932:	1961      	adds	r1, r4, r5
	tx_count_max += 1;
    9934:	f10c 0401 	add.w	r4, ip, #1
    9938:	b2e7      	uxtb	r7, r4
	_radio.entropy = entropy;
    993a:	6072      	str	r2, [r6, #4]
	    (offsetof(struct pdu_data, lldata) +
    993c:	f108 0403 	add.w	r4, r8, #3
	rx_count_max += 3;
    9940:	f10e 0203 	add.w	r2, lr, #3
	if ((PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA) <
    9944:	f5b4 7f81 	cmp.w	r4, #258	; 0x102
	rx_count_max += 3;
    9948:	b2d2      	uxtb	r2, r2
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
    994a:	bf98      	it	ls
    994c:	eb02 1442 	addls.w	r4, r2, r2, lsl #5
	_radio.packet_data_octets_max = packet_data_octets_max;
    9950:	f8a6 8734 	strh.w	r8, [r6, #1844]	; 0x734
		    (MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
    9954:	bf88      	it	hi
    9956:	f108 080e 	addhi.w	r8, r8, #14
	_radio.link_rx_data_quota = rx_count_max;
    995a:	f886 2754 	strb.w	r2, [r6, #1876]	; 0x754
		_radio.packet_rx_data_pool_size =
    995e:	bf8c      	ite	hi
    9960:	f028 0803 	bichi.w	r8, r8, #3
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
    9964:	eb02 0244 	addls.w	r2, r2, r4, lsl #1
	_radio.packet_rx_count = (rx_count_max + 1);
    9968:	f10e 0e04 	add.w	lr, lr, #4
	_radio.packet_tx_count = (tx_count_max + 1);
    996c:	f10c 0c02 	add.w	ip, ip, #2
	_radio.packet_rx_count = (rx_count_max + 1);
    9970:	fa5f fe8e 	uxtb.w	lr, lr
		_radio.packet_rx_data_pool_size =
    9974:	bf8c      	ite	hi
    9976:	fb18 f202 	smulbbhi	r2, r8, r2
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
    997a:	0092      	lslls	r2, r2, #2
	_radio.packet_tx_count = (tx_count_max + 1);
    997c:	fa5f fc8c 	uxtb.w	ip, ip
		_radio.packet_rx_data_pool_size =
    9980:	f8a6 2736 	strh.w	r2, [r6, #1846]	; 0x736
	_radio.packet_tx_count = (tx_count_max + 1);
    9984:	f886 c774 	strb.w	ip, [r6, #1908]	; 0x774
	_radio.packet_rx = (void *)mem_radio;
    9988:	f8c6 073c 	str.w	r0, [r6, #1852]	; 0x73c
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    998c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
	mem_radio +=
    9990:	eb00 008e 	add.w	r0, r0, lr, lsl #2
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    9994:	f8b6 4736 	ldrh.w	r4, [r6, #1846]	; 0x736
	_radio.pkt_tx = (void *)mem_radio;
    9998:	f8c6 076c 	str.w	r0, [r6, #1900]	; 0x76c
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    999c:	4460      	add	r0, ip
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    999e:	f44f 7286 	mov.w	r2, #268	; 0x10c
	_radio.pkt_release = (void *)mem_radio;
    99a2:	f8c6 0770 	str.w	r0, [r6, #1904]	; 0x770
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    99a6:	4460      	add	r0, ip
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    99a8:	f8a6 2738 	strh.w	r2, [r6, #1848]	; 0x738
	_radio.pkt_rx_data_pool = mem_radio;
    99ac:	f8c6 072c 	str.w	r0, [r6, #1836]	; 0x72c
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    99b0:	fbb4 f2f2 	udiv	r2, r4, r2
	mem_radio += _radio.packet_rx_data_pool_size;
    99b4:	4420      	add	r0, r4
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
    99b6:	eb0e 0403 	add.w	r4, lr, r3
	_radio.link_rx_pool = mem_radio;
    99ba:	f8c6 0744 	str.w	r0, [r6, #1860]	; 0x744
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
    99be:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    99c2:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
	_radio.pkt_tx_ctrl_pool = mem_radio;
    99c6:	f8c6 0758 	str.w	r0, [r6, #1880]	; 0x758
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    99ca:	340a      	adds	r4, #10
    99cc:	f024 0403 	bic.w	r4, r4, #3
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;
    99d0:	3048      	adds	r0, #72	; 0x48
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    99d2:	b2a4      	uxth	r4, r4
	_radio.packet_tx_data_size =
    99d4:	f8a6 4768 	strh.w	r4, [r6, #1896]	; 0x768
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);
    99d8:	fb07 0404 	mla	r4, r7, r4, r0
	if (retcode) {
    99dc:	1a64      	subs	r4, r4, r1
	_radio.connection_count = connection_count_max;
    99de:	f886 3718 	strb.w	r3, [r6, #1816]	; 0x718
	_radio.packet_rx_count = (rx_count_max + 1);
    99e2:	f886 e740 	strb.w	lr, [r6, #1856]	; 0x740
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    99e6:	f886 273a 	strb.w	r2, [r6, #1850]	; 0x73a
	_radio.pkt_tx_data_pool = mem_radio;
    99ea:	f8c6 0760 	str.w	r0, [r6, #1888]	; 0x760
	if (retcode) {
    99ee:	d003      	beq.n	99f8 <radio_init+0xf0>
		return (retcode + mem_size);
    99f0:	442c      	add	r4, r5
}
    99f2:	4620      	mov	r0, r4
    99f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_radio.fc_ena = 1;
    99f8:	2301      	movs	r3, #1
    99fa:	f886 3782 	strb.w	r3, [r6, #1922]	; 0x782
	common_init();
    99fe:	f7fd fd87 	bl	7510 <common_init>
	radio_setup();
    9a02:	f001 f9f5 	bl	adf0 <radio_setup>
	return retcode;
    9a06:	e7f4      	b.n	99f2 <radio_init+0xea>
    9a08:	200009f8 	.word	0x200009f8

00009a0c <ll_reset>:
{
    9a0c:	b538      	push	{r3, r4, r5, lr}
	role_disable(RADIO_TICKER_ID_ADV, RADIO_TICKER_ID_ADV_STOP);
    9a0e:	2103      	movs	r1, #3
    9a10:	2005      	movs	r0, #5
    9a12:	f7fc f847 	bl	5aa4 <role_disable>
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);
    9a16:	2104      	movs	r1, #4
    9a18:	2006      	movs	r0, #6
    9a1a:	f7fc f843 	bl	5aa4 <role_disable>
	for (conn_handle = 0; conn_handle < _radio.connection_count;
    9a1e:	4c22      	ldr	r4, [pc, #136]	; (9aa8 <ll_reset+0x9c>)
    9a20:	2500      	movs	r5, #0
    9a22:	f894 2718 	ldrb.w	r2, [r4, #1816]	; 0x718
    9a26:	b2ab      	uxth	r3, r5
    9a28:	429a      	cmp	r2, r3
    9a2a:	f105 0501 	add.w	r5, r5, #1
    9a2e:	d835      	bhi.n	9a9c <ll_reset+0x90>
	_radio.advertiser.is_enabled = 0;
    9a30:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    9a34:	f36f 13c7 	bfc	r3, #7, #1
    9a38:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	_radio.scanner.is_enabled = 0;
    9a3c:	f894 364c 	ldrb.w	r3, [r4, #1612]	; 0x64c
	_radio.advertiser.conn = NULL;
    9a40:	2000      	movs	r0, #0
	_radio.scanner.is_enabled = 0;
    9a42:	f360 0300 	bfi	r3, r0, #0, #1
    9a46:	f884 364c 	strb.w	r3, [r4, #1612]	; 0x64c
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    9a4a:	f44f 7286 	mov.w	r2, #268	; 0x10c
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    9a4e:	f8b4 3736 	ldrh.w	r3, [r4, #1846]	; 0x736
    9a52:	fbb3 f3f2 	udiv	r3, r3, r2
    9a56:	f884 373a 	strb.w	r3, [r4, #1850]	; 0x73a
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    9a5a:	f894 3740 	ldrb.w	r3, [r4, #1856]	; 0x740
	_radio.packet_rx_last = 0;
    9a5e:	f884 0741 	strb.w	r0, [r4, #1857]	; 0x741
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    9a62:	3b01      	subs	r3, #1
	_radio.packet_tx_first = 0;
    9a64:	f884 0775 	strb.w	r0, [r4, #1909]	; 0x775
	_radio.packet_release_last = 0;
    9a68:	f884 0778 	strb.w	r0, [r4, #1912]	; 0x778
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    9a6c:	f884 3754 	strb.w	r3, [r4, #1876]	; 0x754
	_radio.fc_ack = _radio.fc_req;
    9a70:	f894 3780 	ldrb.w	r3, [r4, #1920]	; 0x780
	_radio.advertiser.conn = NULL;
    9a74:	f8c4 0638 	str.w	r0, [r4, #1592]	; 0x638
	_radio.scanner.conn = NULL;
    9a78:	f8c4 0674 	str.w	r0, [r4, #1652]	; 0x674
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    9a7c:	f8a4 2738 	strh.w	r2, [r4, #1848]	; 0x738
	_radio.packet_rx_acquire = 0;
    9a80:	f884 0742 	strb.w	r0, [r4, #1858]	; 0x742
	_radio.packet_tx_last = 0;
    9a84:	f884 0776 	strb.w	r0, [r4, #1910]	; 0x776
	_radio.packet_release_first = 0;
    9a88:	f884 0777 	strb.w	r0, [r4, #1911]	; 0x777
	_radio.fc_ack = _radio.fc_req;
    9a8c:	f884 3781 	strb.w	r3, [r4, #1921]	; 0x781
	ll_filter_reset(false);
    9a90:	f001 f876 	bl	ab80 <ll_filter_reset>
}
    9a94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	common_init();
    9a98:	f7fd bd3a 	b.w	7510 <common_init>
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
    9a9c:	1da8      	adds	r0, r5, #6
    9a9e:	21ff      	movs	r1, #255	; 0xff
    9aa0:	b2c0      	uxtb	r0, r0
    9aa2:	f7fb ffff 	bl	5aa4 <role_disable>
    9aa6:	e7bc      	b.n	9a22 <ll_reset+0x16>
    9aa8:	200009f8 	.word	0x200009f8

00009aac <radio_adv_data_get>:
}
    9aac:	4800      	ldr	r0, [pc, #0]	; (9ab0 <radio_adv_data_get+0x4>)
    9aae:	4770      	bx	lr
    9ab0:	20000a23 	.word	0x20000a23

00009ab4 <radio_aux_adv_data_get>:
}
    9ab4:	4800      	ldr	r0, [pc, #0]	; (9ab8 <radio_aux_adv_data_get+0x4>)
    9ab6:	4770      	bx	lr
    9ab8:	20000c27 	.word	0x20000c27

00009abc <radio_scan_data_get>:
}
    9abc:	4800      	ldr	r0, [pc, #0]	; (9ac0 <radio_scan_data_get+0x4>)
    9abe:	4770      	bx	lr
    9ac0:	20000e2b 	.word	0x20000e2b

00009ac4 <ll_adv_is_enabled>:
	return _radio.advertiser.is_enabled;
    9ac4:	4b02      	ldr	r3, [pc, #8]	; (9ad0 <ll_adv_is_enabled+0xc>)
    9ac6:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
}
    9aca:	09c0      	lsrs	r0, r0, #7
    9acc:	4770      	bx	lr
    9ace:	bf00      	nop
    9ad0:	200009f8 	.word	0x200009f8

00009ad4 <radio_adv_filter_pol_get>:
	if (_radio.advertiser.is_enabled) {
    9ad4:	4b05      	ldr	r3, [pc, #20]	; (9aec <radio_adv_filter_pol_get+0x18>)
    9ad6:	f993 2028 	ldrsb.w	r2, [r3, #40]	; 0x28
    9ada:	2a00      	cmp	r2, #0
		return _radio.advertiser.filter_policy;
    9adc:	bfba      	itte	lt
    9ade:	f893 002a 	ldrblt.w	r0, [r3, #42]	; 0x2a
    9ae2:	f000 0003 	andlt.w	r0, r0, #3
    9ae6:	2000      	movge	r0, #0
}
    9ae8:	4770      	bx	lr
    9aea:	bf00      	nop
    9aec:	200009f8 	.word	0x200009f8

00009af0 <ll_scan_is_enabled>:
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    9af0:	4a09      	ldr	r2, [pc, #36]	; (9b18 <ll_scan_is_enabled+0x28>)
    9af2:	f892 364c 	ldrb.w	r3, [r2, #1612]	; 0x64c
    9af6:	f892 064d 	ldrb.w	r0, [r2, #1613]	; 0x64d
	       (_radio.scanner.conn ? BIT(2) : 0);
    9afa:	f8d2 2674 	ldr.w	r2, [r2, #1652]	; 0x674
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    9afe:	f3c0 00c0 	ubfx	r0, r0, #3, #1
	       (_radio.scanner.conn ? BIT(2) : 0);
    9b02:	2a00      	cmp	r2, #0
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    9b04:	f003 0301 	and.w	r3, r3, #1
    9b08:	fa03 f300 	lsl.w	r3, r3, r0
	       (_radio.scanner.conn ? BIT(2) : 0);
    9b0c:	bf14      	ite	ne
    9b0e:	2004      	movne	r0, #4
    9b10:	2000      	moveq	r0, #0
}
    9b12:	4318      	orrs	r0, r3
    9b14:	4770      	bx	lr
    9b16:	bf00      	nop
    9b18:	200009f8 	.word	0x200009f8

00009b1c <radio_scan_filter_pol_get>:
	if (_radio.scanner.is_enabled) {
    9b1c:	4b05      	ldr	r3, [pc, #20]	; (9b34 <radio_scan_filter_pol_get+0x18>)
    9b1e:	f893 064c 	ldrb.w	r0, [r3, #1612]	; 0x64c
    9b22:	f010 0001 	ands.w	r0, r0, #1
		return _radio.scanner.filter_policy;
    9b26:	bf1c      	itt	ne
    9b28:	f893 064d 	ldrbne.w	r0, [r3, #1613]	; 0x64d
    9b2c:	f3c0 1001 	ubfxne	r0, r0, #4, #2
}
    9b30:	4770      	bx	lr
    9b32:	bf00      	nop
    9b34:	200009f8 	.word	0x200009f8

00009b38 <ll_tx_pwr_lvl_get>:
{
    9b38:	b510      	push	{r4, lr}
    9b3a:	4614      	mov	r4, r2
	conn = connection_get(handle);
    9b3c:	f7fb ff9c 	bl	5a78 <connection_get>
	if (!conn) {
    9b40:	b110      	cbz	r0, 9b48 <ll_tx_pwr_lvl_get+0x10>
	*tx_pwr_lvl = 0;
    9b42:	2000      	movs	r0, #0
    9b44:	7020      	strb	r0, [r4, #0]
	return 0;
    9b46:	bd10      	pop	{r4, pc}
		return 1;
    9b48:	2001      	movs	r0, #1
}
    9b4a:	bd10      	pop	{r4, pc}

00009b4c <ll_rx_get>:
{
    9b4c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    9b50:	4605      	mov	r5, r0
    9b52:	4608      	mov	r0, r1
	if (_radio.link_rx_head != _radio.link_rx_tail) {
    9b54:	4918      	ldr	r1, [pc, #96]	; (9bb8 <ll_rx_get+0x6c>)
    9b56:	f8d1 374c 	ldr.w	r3, [r1, #1868]	; 0x74c
    9b5a:	f8d1 2750 	ldr.w	r2, [r1, #1872]	; 0x750
    9b5e:	4293      	cmp	r3, r2
    9b60:	460f      	mov	r7, r1
    9b62:	d01f      	beq.n	9ba4 <ll_rx_get+0x58>
		_node_rx = _radio.link_rx_head->mem;
    9b64:	f8d3 8004 	ldr.w	r8, [r3, #4]
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
    9b68:	f201 7177 	addw	r1, r1, #1911	; 0x777
    9b6c:	f898 2000 	ldrb.w	r2, [r8]
    9b70:	f7fb ff38 	bl	59e4 <tx_cmplt_get>
		if (!cmplt) {
    9b74:	4604      	mov	r4, r0
    9b76:	b9e0      	cbnz	r0, 9bb2 <ll_rx_get+0x66>
			first = _radio.packet_release_first;
    9b78:	ae02      	add	r6, sp, #8
    9b7a:	f897 3777 	ldrb.w	r3, [r7, #1911]	; 0x777
    9b7e:	f806 3d03 	strb.w	r3, [r6, #-3]!
				cmplt_curr = tx_cmplt_get(&h, &first,
    9b82:	f897 2778 	ldrb.w	r2, [r7, #1912]	; 0x778
    9b86:	4631      	mov	r1, r6
    9b88:	f10d 0006 	add.w	r0, sp, #6
    9b8c:	f7fb ff2a 	bl	59e4 <tx_cmplt_get>
				 (cmplt_prev != cmplt_curr));
    9b90:	b934      	cbnz	r4, 9ba0 <ll_rx_get+0x54>
			} while ((cmplt_prev != 0) ||
    9b92:	b928      	cbnz	r0, 9ba0 <ll_rx_get+0x54>
			*node_rx = _node_rx;
    9b94:	f8c5 8000 	str.w	r8, [r5]
}
    9b98:	4620      	mov	r0, r4
    9b9a:	b002      	add	sp, #8
    9b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
    9ba0:	4604      	mov	r4, r0
    9ba2:	e7ee      	b.n	9b82 <ll_rx_get+0x36>
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
    9ba4:	f891 2778 	ldrb.w	r2, [r1, #1912]	; 0x778
    9ba8:	f201 7177 	addw	r1, r1, #1911	; 0x777
    9bac:	f7fb ff1a 	bl	59e4 <tx_cmplt_get>
    9bb0:	4604      	mov	r4, r0
		*node_rx = NULL;
    9bb2:	2300      	movs	r3, #0
    9bb4:	602b      	str	r3, [r5, #0]
    9bb6:	e7ef      	b.n	9b98 <ll_rx_get+0x4c>
    9bb8:	200009f8 	.word	0x200009f8

00009bbc <ll_rx_mem_release>:
{
    9bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			mem_release(_node_rx_free,
    9bc0:	4c19      	ldr	r4, [pc, #100]	; (9c28 <ll_rx_mem_release+0x6c>)
{
    9bc2:	4605      	mov	r5, r0
	_node_rx = *node_rx;
    9bc4:	6800      	ldr	r0, [r0, #0]
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    9bc6:	f5a4 66e6 	sub.w	r6, r4, #1840	; 0x730
			mem_release(conn, &_radio.conn_free);
    9bca:	f1a4 071c 	sub.w	r7, r4, #28
	while (_node_rx) {
    9bce:	b920      	cbnz	r0, 9bda <ll_rx_mem_release+0x1e>
	*node_rx = _node_rx;
    9bd0:	6028      	str	r0, [r5, #0]
}
    9bd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	packet_rx_allocate(0xff);
    9bd6:	f7fd bc51 	b.w	747c <packet_rx_allocate.constprop.51>
		switch (_node_rx_free->hdr.type) {
    9bda:	7902      	ldrb	r2, [r0, #4]
		_node_rx = _node_rx->hdr.onion.next;
    9bdc:	f8d0 8000 	ldr.w	r8, [r0]
    9be0:	2a0a      	cmp	r2, #10
    9be2:	d807      	bhi.n	9bf4 <ll_rx_mem_release+0x38>
    9be4:	2301      	movs	r3, #1
    9be6:	4093      	lsls	r3, r2
    9be8:	f240 727e 	movw	r2, #1918	; 0x77e
    9bec:	4213      	tst	r3, r2
    9bee:	d10c      	bne.n	9c0a <ll_rx_mem_release+0x4e>
    9bf0:	061b      	lsls	r3, r3, #24
    9bf2:	d40f      	bmi.n	9c14 <ll_rx_mem_release+0x58>
			LL_ASSERT(0);
    9bf4:	4a0d      	ldr	r2, [pc, #52]	; (9c2c <ll_rx_mem_release+0x70>)
    9bf6:	490e      	ldr	r1, [pc, #56]	; (9c30 <ll_rx_mem_release+0x74>)
    9bf8:	2003      	movs	r0, #3
    9bfa:	f7f8 faf9 	bl	21f0 <bt_log>
    9bfe:	4040      	eors	r0, r0
    9c00:	f380 8811 	msr	BASEPRI, r0
    9c04:	f04f 0004 	mov.w	r0, #4
    9c08:	df02      	svc	2
			mem_release(_node_rx_free,
    9c0a:	4621      	mov	r1, r4
			mem_release(conn, &_radio.conn_free);
    9c0c:	f7f9 fefb 	bl	3a06 <mem_release>
{
    9c10:	4640      	mov	r0, r8
    9c12:	e7dc      	b.n	9bce <ll_rx_mem_release+0x12>
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    9c14:	88c2      	ldrh	r2, [r0, #6]
    9c16:	f8d6 0710 	ldr.w	r0, [r6, #1808]	; 0x710
    9c1a:	f44f 7182 	mov.w	r1, #260	; 0x104
    9c1e:	f7f9 ff07 	bl	3a30 <mem_get>
			mem_release(conn, &_radio.conn_free);
    9c22:	4639      	mov	r1, r7
    9c24:	e7f2      	b.n	9c0c <ll_rx_mem_release+0x50>
    9c26:	bf00      	nop
    9c28:	20001128 	.word	0x20001128
    9c2c:	0000e564 	.word	0x0000e564
    9c30:	0000d773 	.word	0x0000d773

00009c34 <do_radio_rx_fc_set>:
	}
}

u8_t do_radio_rx_fc_set(u16_t handle, u8_t req, u8_t ack)
{
	if (req == ack) {
    9c34:	4291      	cmp	r1, r2
{
    9c36:	b510      	push	{r4, lr}
    9c38:	4b14      	ldr	r3, [pc, #80]	; (9c8c <do_radio_rx_fc_set+0x58>)
	if (req == ack) {
    9c3a:	d119      	bne.n	9c70 <do_radio_rx_fc_set+0x3c>
		if (_radio.link_rx_head == _radio.link_rx_tail) {
    9c3c:	f8d3 2750 	ldr.w	r2, [r3, #1872]	; 0x750
    9c40:	f8d3 474c 	ldr.w	r4, [r3, #1868]	; 0x74c
    9c44:	4294      	cmp	r4, r2
    9c46:	d111      	bne.n	9c6c <do_radio_rx_fc_set+0x38>
			u8_t ack1 = ack;

			if (ack1 == 0) {
    9c48:	2900      	cmp	r1, #0
				ack1 = TRIPLE_BUFFER_SIZE;
    9c4a:	bf14      	ite	ne
    9c4c:	460a      	movne	r2, r1
    9c4e:	2203      	moveq	r2, #3
			}
			_radio.fc_handle[--ack1] = handle;
    9c50:	3a01      	subs	r2, #1
    9c52:	b2d2      	uxtb	r2, r2
    9c54:	eb03 0442 	add.w	r4, r3, r2, lsl #1
			_radio.fc_ack = ack1;
    9c58:	f883 2781 	strb.w	r2, [r3, #1921]	; 0x781

			/* check if ISR updated FC by changing fc_req */
			if (req != _radio.fc_req) {
    9c5c:	f893 2780 	ldrb.w	r2, [r3, #1920]	; 0x780
			_radio.fc_handle[--ack1] = handle;
    9c60:	f8a4 077a 	strh.w	r0, [r4, #1914]	; 0x77a
			if (req != _radio.fc_req) {
    9c64:	4291      	cmp	r1, r2
    9c66:	d00f      	beq.n	9c88 <do_radio_rx_fc_set+0x54>
				_radio.fc_ack = ack;
    9c68:	f883 1781 	strb.w	r1, [r3, #1921]	; 0x781

				return 1;
			}
		} else {
			return 1;
    9c6c:	2001      	movs	r0, #1
    9c6e:	bd10      	pop	{r4, pc}
		}
	} else if (((req == 0) &&
    9c70:	b929      	cbnz	r1, 9c7e <do_radio_rx_fc_set+0x4a>
    9c72:	f8b3 377e 	ldrh.w	r3, [r3, #1918]	; 0x77e
				return 1;
    9c76:	1a18      	subs	r0, r3, r0
    9c78:	bf18      	it	ne
    9c7a:	2001      	movne	r0, #1
    9c7c:	bd10      	pop	{r4, pc}
		    (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] != handle)) ||
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
    9c7e:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    9c82:	f8b3 3778 	ldrh.w	r3, [r3, #1912]	; 0x778
    9c86:	e7f6      	b.n	9c76 <do_radio_rx_fc_set+0x42>
		return 1;
	}

	return 0;
    9c88:	2000      	movs	r0, #0
}
    9c8a:	bd10      	pop	{r4, pc}
    9c8c:	200009f8 	.word	0x200009f8

00009c90 <radio_rx_fc_set>:

u8_t radio_rx_fc_set(u16_t handle, u8_t fc)
{
    9c90:	b430      	push	{r4, r5}
	if (_radio.fc_ena) {
    9c92:	4b14      	ldr	r3, [pc, #80]	; (9ce4 <radio_rx_fc_set+0x54>)
    9c94:	f893 2782 	ldrb.w	r2, [r3, #1922]	; 0x782
{
    9c98:	460d      	mov	r5, r1
	if (_radio.fc_ena) {
    9c9a:	b302      	cbz	r2, 9cde <radio_rx_fc_set+0x4e>
		u8_t req = _radio.fc_req;
    9c9c:	f893 2780 	ldrb.w	r2, [r3, #1920]	; 0x780
    9ca0:	b2d1      	uxtb	r1, r2
		u8_t ack = _radio.fc_ack;
    9ca2:	f893 2781 	ldrb.w	r2, [r3, #1921]	; 0x781

		if (fc) {
    9ca6:	b135      	cbz	r5, 9cb6 <radio_rx_fc_set+0x26>
			if (handle != 0xffff) {
    9ca8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    9cac:	4298      	cmp	r0, r3
    9cae:	d016      	beq.n	9cde <radio_rx_fc_set+0x4e>
			}
		}
	}

	return 0;
}
    9cb0:	bc30      	pop	{r4, r5}
				return do_radio_rx_fc_set(handle, req, ack);
    9cb2:	f7ff bfbf 	b.w	9c34 <do_radio_rx_fc_set>
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
    9cb6:	f8d3 074c 	ldr.w	r0, [r3, #1868]	; 0x74c
    9cba:	f8d3 4750 	ldr.w	r4, [r3, #1872]	; 0x750
    9cbe:	42a0      	cmp	r0, r4
    9cc0:	d10d      	bne.n	9cde <radio_rx_fc_set+0x4e>
    9cc2:	4291      	cmp	r1, r2
    9cc4:	d00b      	beq.n	9cde <radio_rx_fc_set+0x4e>
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    9cc6:	f8d3 4750 	ldr.w	r4, [r3, #1872]	; 0x750
			_radio.fc_ack = req;
    9cca:	f883 1781 	strb.w	r1, [r3, #1921]	; 0x781
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    9cce:	42a0      	cmp	r0, r4
    9cd0:	d005      	beq.n	9cde <radio_rx_fc_set+0x4e>
			    (req == _radio.fc_req)) {
    9cd2:	f893 0780 	ldrb.w	r0, [r3, #1920]	; 0x780
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    9cd6:	4281      	cmp	r1, r0
				_radio.fc_ack = ack;
    9cd8:	bf08      	it	eq
    9cda:	f883 2781 	strbeq.w	r2, [r3, #1921]	; 0x781
}
    9cde:	2000      	movs	r0, #0
    9ce0:	bc30      	pop	{r4, r5}
    9ce2:	4770      	bx	lr
    9ce4:	200009f8 	.word	0x200009f8

00009ce8 <ll_adv_scan_state_cb>:

	return 0;
}

void __weak ll_adv_scan_state_cb(u8_t bm)
{
    9ce8:	4770      	bx	lr
    9cea:	0000      	movs	r0, r0
    9cec:	0000      	movs	r0, r0
	...

00009cf0 <radio_adv_enable>:
{
    9cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9cf4:	b093      	sub	sp, #76	; 0x4c
	if (_radio.advertiser.is_enabled) {
    9cf6:	f8df 9284 	ldr.w	r9, [pc, #644]	; 9f7c <radio_adv_enable+0x28c>
{
    9cfa:	930b      	str	r3, [sp, #44]	; 0x2c
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    9cfc:	2302      	movs	r3, #2
    9cfe:	9311      	str	r3, [sp, #68]	; 0x44
	if (_radio.advertiser.is_enabled) {
    9d00:	f999 3028 	ldrsb.w	r3, [r9, #40]	; 0x28
{
    9d04:	f89d 8074 	ldrb.w	r8, [sp, #116]	; 0x74
    9d08:	f88d 203f 	strb.w	r2, [sp, #63]	; 0x3f
	if (_radio.advertiser.is_enabled) {
    9d0c:	2b00      	cmp	r3, #0
{
    9d0e:	4683      	mov	fp, r0
    9d10:	468a      	mov	sl, r1
    9d12:	464e      	mov	r6, r9
	if (_radio.advertiser.is_enabled) {
    9d14:	da01      	bge.n	9d1a <radio_adv_enable+0x2a>
	return BT_HCI_ERR_CMD_DISALLOWED;
    9d16:	200c      	movs	r0, #12
    9d18:	e223      	b.n	a162 <radio_adv_enable+0x472>
	pdu_adv = (void *)&_radio.advertiser.adv_data.data
    9d1a:	f899 722e 	ldrb.w	r7, [r9, #558]	; 0x22e
    9d1e:	eb07 2707 	add.w	r7, r7, r7, lsl #8
    9d22:	372b      	adds	r7, #43	; 0x2b
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
    9d24:	f819 3007 	ldrb.w	r3, [r9, r7]
    9d28:	f003 030f 	and.w	r3, r3, #15
    9d2c:	2b01      	cmp	r3, #1
    9d2e:	f200 80fb 	bhi.w	9f28 <radio_adv_enable+0x238>
		if (_radio.advertiser.conn) {
    9d32:	f8d9 4638 	ldr.w	r4, [r9, #1592]	; 0x638
    9d36:	2c00      	cmp	r4, #0
    9d38:	d1ed      	bne.n	9d16 <radio_adv_enable+0x26>
		link = mem_acquire(&_radio.link_rx_free);
    9d3a:	f509 60e9 	add.w	r0, r9, #1864	; 0x748
    9d3e:	f7f9 fe48 	bl	39d2 <mem_acquire>
		if (!link) {
    9d42:	900e      	str	r0, [sp, #56]	; 0x38
    9d44:	b158      	cbz	r0, 9d5e <radio_adv_enable+0x6e>
		conn = mem_acquire(&_radio.conn_free);
    9d46:	f209 7014 	addw	r0, r9, #1812	; 0x714
    9d4a:	f7f9 fe42 	bl	39d2 <mem_acquire>
		if (!conn) {
    9d4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9d50:	4605      	mov	r5, r0
    9d52:	b930      	cbnz	r0, 9d62 <radio_adv_enable+0x72>
			mem_release(link, &_radio.link_rx_free);
    9d54:	f509 61e9 	add.w	r1, r9, #1864	; 0x748
    9d58:	4618      	mov	r0, r3
    9d5a:	f7f9 fe54 	bl	3a06 <mem_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    9d5e:	2007      	movs	r0, #7
    9d60:	e1ff      	b.n	a162 <radio_adv_enable+0x472>
		conn->handle = 0xFFFF;
    9d62:	f64f 71ff 	movw	r1, #65535	; 0xffff
    9d66:	8401      	strh	r1, [r0, #32]
		conn->llcp_features = RADIO_BLE_FEAT;
    9d68:	497d      	ldr	r1, [pc, #500]	; (9f60 <radio_adv_enable+0x270>)
    9d6a:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
		conn->data_chan_sel = 0;
    9d6e:	7f41      	ldrb	r1, [r0, #29]
		conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
    9d70:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
		conn->data_chan_sel = 0;
    9d74:	f364 1186 	bfi	r1, r4, #6, #1
		conn->role = 1;
    9d78:	f061 017f 	orn	r1, r1, #127	; 0x7f
		conn->sn = 0;
    9d7c:	f890 30a8 	ldrb.w	r3, [r0, #168]	; 0xa8
		conn->role = 1;
    9d80:	7741      	strb	r1, [r0, #29]
		conn->connect_expire = 6;
    9d82:	2106      	movs	r1, #6
    9d84:	8581      	strh	r1, [r0, #44]	; 0x2c
		conn->common.fex_valid = 0;
    9d86:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
		conn->data_chan_use = 0;
    9d8a:	77c4      	strb	r4, [r0, #31]
		conn->sn = 0;
    9d8c:	f364 0300 	bfi	r3, r4, #0, #1
		conn->common.fex_valid = 0;
    9d90:	f364 1145 	bfi	r1, r4, #5, #1
		conn->nesn = 0;
    9d94:	f364 0341 	bfi	r3, r4, #1, #1
		conn->slave.latency_enabled = 0;
    9d98:	f364 0100 	bfi	r1, r4, #0, #1
		conn->pause_rx = 0;
    9d9c:	f364 0382 	bfi	r3, r4, #2, #1
		conn->slave.latency_cancel = 0;
    9da0:	f364 0141 	bfi	r1, r4, #1, #1
		conn->pause_tx = 0;
    9da4:	f364 03c3 	bfi	r3, r4, #3, #1
		conn->slave.latency_cancel = 0;
    9da8:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
		conn->enc_rx = 0;
    9dac:	f364 1304 	bfi	r3, r4, #4, #1
		conn->llcp_version.tx = 0;
    9db0:	f890 1090 	ldrb.w	r1, [r0, #144]	; 0x90
		conn->event_counter = 0;
    9db4:	8444      	strh	r4, [r0, #34]	; 0x22
		conn->enc_tx = 0;
    9db6:	f364 1345 	bfi	r3, r4, #5, #1
		conn->llcp_version.tx = 0;
    9dba:	f364 0100 	bfi	r1, r4, #0, #1
		conn->refresh = 0;
    9dbe:	f364 1386 	bfi	r3, r4, #6, #1
		conn->llcp_version.rx = 0;
    9dc2:	f364 0141 	bfi	r1, r4, #1, #1
		conn->empty = 0;
    9dc6:	f364 13c7 	bfi	r3, r4, #7, #1
		conn->latency_prepare = 0;
    9dca:	8504      	strh	r4, [r0, #40]	; 0x28
		conn->latency_event = 0;
    9dcc:	8544      	strh	r4, [r0, #42]	; 0x2a
		conn->slave.window_widening_prepare_us = 0;
    9dce:	6444      	str	r4, [r0, #68]	; 0x44
		conn->slave.window_widening_event_us = 0;
    9dd0:	6484      	str	r4, [r0, #72]	; 0x48
		conn->slave.ticks_to_offset = 0;
    9dd2:	6584      	str	r4, [r0, #88]	; 0x58
		conn->supervision_expire = 0;
    9dd4:	8604      	strh	r4, [r0, #48]	; 0x30
		conn->procedure_expire = 0;
    9dd6:	8684      	strh	r4, [r0, #52]	; 0x34
		conn->llcp_req = 0;
    9dd8:	f880 405c 	strb.w	r4, [r0, #92]	; 0x5c
		conn->llcp_ack = 0;
    9ddc:	f880 405d 	strb.w	r4, [r0, #93]	; 0x5d
		conn->llcp_version.rx = 0;
    9de0:	f880 1090 	strb.w	r1, [r0, #144]	; 0x90
		conn->llcp_terminate.req = 0;
    9de4:	f880 4098 	strb.w	r4, [r0, #152]	; 0x98
		conn->llcp_terminate.ack = 0;
    9de8:	f880 4099 	strb.w	r4, [r0, #153]	; 0x99
		conn->llcp_terminate.reason_peer = 0;
    9dec:	f880 409b 	strb.w	r4, [r0, #155]	; 0x9b
		conn->empty = 0;
    9df0:	f880 30a8 	strb.w	r3, [r0, #168]	; 0xa8
		conn->pkt_tx_head = NULL;
    9df4:	f8c0 40ec 	str.w	r4, [r0, #236]	; 0xec
		conn->pkt_tx_ctrl = NULL;
    9df8:	f8c0 40f0 	str.w	r4, [r0, #240]	; 0xf0
		conn->pkt_tx_ctrl_last = NULL;
    9dfc:	f8c0 40f4 	str.w	r4, [r0, #244]	; 0xf4
		conn->pkt_tx_data = NULL;
    9e00:	f8c0 40f8 	str.w	r4, [r0, #248]	; 0xf8
		conn->pkt_tx_last = NULL;
    9e04:	f8c0 40fc 	str.w	r4, [r0, #252]	; 0xfc
		conn->packet_tx_head_len = 0;
    9e08:	f880 4100 	strb.w	r4, [r0, #256]	; 0x100
		conn->packet_tx_head_offset = 0;
    9e0c:	f880 4101 	strb.w	r4, [r0, #257]	; 0x101
		_radio.advertiser.conn = conn;
    9e10:	f8c9 0638 	str.w	r0, [r9, #1592]	; 0x638
	_radio.advertiser.chan_map = chan_map;							//chan_map
    9e14:	a812      	add	r0, sp, #72	; 0x48
	_radio.advertiser.phy_p = phy_p; 								//set phy_p
    9e16:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
	_radio.advertiser.chan_map = chan_map;							//chan_map
    9e1a:	f810 1d09 	ldrb.w	r1, [r0, #-9]!
	_radio.advertiser.phy_p = phy_p; 								//set phy_p
    9e1e:	f36b 0343 	bfi	r3, fp, #1, #3
	_radio.advertiser.chan_map = chan_map;							//chan_map
    9e22:	f361 1306 	bfi	r3, r1, #4, #3
    9e26:	f886 3029 	strb.w	r3, [r6, #41]	; 0x29
	_radio.advertiser.filter_policy = filter_policy;				//filter plicy
    9e2a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9e2c:	f896 302a 	ldrb.w	r3, [r6, #42]	; 0x2a
    9e30:	f362 0301 	bfi	r3, r2, #0, #2
    9e34:	f886 302a 	strb.w	r3, [r6, #42]	; 0x2a
	_radio.advertiser.hdr.ticks_active_to_start =
    9e38:	f8d6 3784 	ldr.w	r3, [r6, #1924]	; 0x784
    9e3c:	61f3      	str	r3, [r6, #28]
	_radio.advertiser.hdr.ticks_xtal_to_start =
    9e3e:	2327      	movs	r3, #39	; 0x27
    9e40:	61b3      	str	r3, [r6, #24]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    9e42:	2101      	movs	r1, #1
	_radio.advertiser.hdr.ticks_preempt_to_start =
    9e44:	2300      	movs	r3, #0
    9e46:	6233      	str	r3, [r6, #32]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    9e48:	f7f9 ff5c 	bl	3d04 <util_ones_count_get>
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    9e4c:	f819 4007 	ldrb.w	r4, [r9, r7]
    9e50:	f004 040f 	and.w	r4, r4, #15
    9e54:	2c01      	cmp	r4, #1
    9e56:	d169      	bne.n	9f2c <radio_adv_enable+0x23c>
		slot_us = ((RADIO_TICKER_START_PART_US + 176 + 152 + 40) *
    9e58:	f44f 7327 	mov.w	r3, #668	; 0x29c
    9e5c:	4358      	muls	r0, r3
			   chan_cnt) - 40 + 352;
    9e5e:	f500 709c 	add.w	r0, r0, #312	; 0x138
	_radio.advertiser.hdr.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    9e62:	4f40      	ldr	r7, [pc, #256]	; (9f64 <radio_adv_enable+0x274>)
    9e64:	a33c      	add	r3, pc, #240	; (adr r3, 9f58 <radio_adv_enable+0x268>)
    9e66:	e9d3 2300 	ldrd	r2, r3, [r3]
    9e6a:	fba0 0107 	umull	r0, r1, r0, r7
    9e6e:	f7f6 f9fb 	bl	268 <__aeabi_uldivmod>
	ticks_slot_offset =
    9e72:	69f3      	ldr	r3, [r6, #28]
	_radio.advertiser.hdr.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    9e74:	6270      	str	r0, [r6, #36]	; 0x24
	ticks_slot_offset =
    9e76:	69b0      	ldr	r0, [r6, #24]
    9e78:	4283      	cmp	r3, r0
    9e7a:	bf38      	it	cc
    9e7c:	4603      	movcc	r3, r0
    9e7e:	930b      	str	r3, [sp, #44]	; 0x2c
    9e80:	46b9      	mov	r9, r7
	_radio.advertiser.is_hdcd = !interval &&
    9e82:	f1ba 0f00 	cmp.w	sl, #0
    9e86:	d15e      	bne.n	9f46 <radio_adv_enable+0x256>
    9e88:	1e62      	subs	r2, r4, #1
    9e8a:	4253      	negs	r3, r2
    9e8c:	4153      	adcs	r3, r2
    9e8e:	f896 4028 	ldrb.w	r4, [r6, #40]	; 0x28
    9e92:	f363 1486 	bfi	r4, r3, #6, #1
    9e96:	f886 4028 	strb.w	r4, [r6, #40]	; 0x28
	if (_radio.advertiser.is_hdcd) {
    9e9a:	f014 0440 	ands.w	r4, r4, #64	; 0x40
    9e9e:	d06f      	beq.n	9f80 <radio_adv_enable+0x290>
		u32_t ticks_now = ticker_ticks_now_get();
    9ea0:	f7fa fd72 	bl	4988 <ticker_ticks_now_get>
		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    9ea4:	6a73      	ldr	r3, [r6, #36]	; 0x24
    9ea6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9ea8:	4e2f      	ldr	r6, [pc, #188]	; (9f68 <radio_adv_enable+0x278>)
    9eaa:	9607      	str	r6, [sp, #28]
    9eac:	441a      	add	r2, r3
    9eae:	4613      	mov	r3, r2
		u32_t ticks_now = ticker_ticks_now_get();
    9eb0:	4607      	mov	r7, r0
		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    9eb2:	4a2e      	ldr	r2, [pc, #184]	; (9f6c <radio_adv_enable+0x27c>)
    9eb4:	9205      	str	r2, [sp, #20]
    9eb6:	2000      	movs	r0, #0
    9eb8:	ac11      	add	r4, sp, #68	; 0x44
    9eba:	9304      	str	r3, [sp, #16]
    9ebc:	e88d 0009 	stmia.w	sp, {r0, r3}
    9ec0:	9408      	str	r4, [sp, #32]
    9ec2:	9006      	str	r0, [sp, #24]
    9ec4:	9003      	str	r0, [sp, #12]
    9ec6:	9002      	str	r0, [sp, #8]
    9ec8:	463b      	mov	r3, r7
    9eca:	2205      	movs	r2, #5
    9ecc:	2103      	movs	r1, #3
    9ece:	f7fa fbed 	bl	46ac <ticker_start>
		if (ret == TICKER_STATUS_BUSY) {
    9ed2:	2802      	cmp	r0, #2
    9ed4:	d03b      	beq.n	9f4e <radio_adv_enable+0x25e>
		if (ret_cb != TICKER_STATUS_SUCCESS) {
    9ed6:	9811      	ldr	r0, [sp, #68]	; 0x44
    9ed8:	b9c8      	cbnz	r0, 9f0e <radio_adv_enable+0x21e>
		ret_cb = TICKER_STATUS_BUSY;
    9eda:	2302      	movs	r3, #2
    9edc:	9311      	str	r3, [sp, #68]	; 0x44
		ret =
    9ede:	4b24      	ldr	r3, [pc, #144]	; (9f70 <radio_adv_enable+0x280>)
    9ee0:	9305      	str	r3, [sp, #20]
    9ee2:	2203      	movs	r2, #3
    9ee4:	f24a 33fe 	movw	r3, #41982	; 0xa3fe
    9ee8:	9300      	str	r3, [sp, #0]
    9eea:	9408      	str	r4, [sp, #32]
    9eec:	9607      	str	r6, [sp, #28]
    9eee:	9006      	str	r0, [sp, #24]
    9ef0:	9004      	str	r0, [sp, #16]
    9ef2:	9003      	str	r0, [sp, #12]
    9ef4:	9002      	str	r0, [sp, #8]
    9ef6:	9001      	str	r0, [sp, #4]
    9ef8:	463b      	mov	r3, r7
    9efa:	4611      	mov	r1, r2
		ret=	
    9efc:	f7fa fbd6 	bl	46ac <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
    9f00:	2802      	cmp	r0, #2
    9f02:	f000 811a 	beq.w	a13a <radio_adv_enable+0x44a>
	if (ret_cb == TICKER_STATUS_SUCCESS) {
    9f06:	9811      	ldr	r0, [sp, #68]	; 0x44
    9f08:	2800      	cmp	r0, #0
    9f0a:	f000 811a 	beq.w	a142 <radio_adv_enable+0x452>
	if (conn) {
    9f0e:	2d00      	cmp	r5, #0
    9f10:	f43f af01 	beq.w	9d16 <radio_adv_enable+0x26>
		mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.
    9f14:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    9f18:	4916      	ldr	r1, [pc, #88]	; (9f74 <radio_adv_enable+0x284>)
    9f1a:	f7f9 fd74 	bl	3a06 <mem_release>
		mem_release(conn, &_radio.conn_free);
    9f1e:	4916      	ldr	r1, [pc, #88]	; (9f78 <radio_adv_enable+0x288>)
    9f20:	4628      	mov	r0, r5
    9f22:	f7f9 fd70 	bl	3a06 <mem_release>
    9f26:	e6f6      	b.n	9d16 <radio_adv_enable+0x26>
		conn = NULL;
    9f28:	2500      	movs	r5, #0
    9f2a:	e773      	b.n	9e14 <radio_adv_enable+0x124>
	} else if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
    9f2c:	2c02      	cmp	r4, #2
    9f2e:	d103      	bne.n	9f38 <radio_adv_enable+0x248>
		slot_us = (RADIO_TICKER_START_PART_US + 376) * chan_cnt;
    9f30:	f44f 7329 	mov.w	r3, #676	; 0x2a4
			   152 + 376) * chan_cnt;
    9f34:	4358      	muls	r0, r3
    9f36:	e794      	b.n	9e62 <radio_adv_enable+0x172>
	else if (pdu_adv->type == PDU_ADV_TYPE_EXT_IND) {
    9f38:	2c07      	cmp	r4, #7
		slot_us = ((RADIO_TICKER_START_PART_US + 2120) * chan_cnt) ;  // 265byte =2120us
    9f3a:	bf0c      	ite	eq
    9f3c:	f640 1374 	movweq	r3, #2420	; 0x974
			   152 + 376) * chan_cnt;
    9f40:	f240 53fc 	movwne	r3, #1532	; 0x5fc
    9f44:	e7f6      	b.n	9f34 <radio_adv_enable+0x244>
    9f46:	2300      	movs	r3, #0
    9f48:	e7a1      	b.n	9e8e <radio_adv_enable+0x19e>
				cpu_sleep();
    9f4a:	f7fb fcaf 	bl	58ac <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
    9f4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9f50:	2b02      	cmp	r3, #2
    9f52:	d0fa      	beq.n	9f4a <radio_adv_enable+0x25a>
    9f54:	e7bf      	b.n	9ed6 <radio_adv_enable+0x1e6>
    9f56:	bf00      	nop
    9f58:	1afd498d 	.word	0x1afd498d
    9f5c:	00000007 	.word	0x00000007
    9f60:	0001400c 	.word	0x0001400c
    9f64:	3b9aca00 	.word	0x3b9aca00
    9f68:	000058f1 	.word	0x000058f1
    9f6c:	00007171 	.word	0x00007171
    9f70:	00007211 	.word	0x00007211
    9f74:	20001140 	.word	0x20001140
    9f78:	2000110c 	.word	0x2000110c
    9f7c:	200009f8 	.word	0x200009f8
		u32_t ticks_now = ticker_ticks_now_get();
    9f80:	f7fa fd02 	bl	4988 <ticker_ticks_now_get>
		if(((u64_t)interval * 625) <= 100000){
    9f84:	fa1f f28a 	uxth.w	r2, sl
    9f88:	2300      	movs	r3, #0
		u32_t ticks_now = ticker_ticks_now_get();
    9f8a:	900e      	str	r0, [sp, #56]	; 0x38
		if(((u64_t)interval * 625) <= 100000){
    9f8c:	f240 2071 	movw	r0, #625	; 0x271
    9f90:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    9f94:	fbaa 0100 	umull	r0, r1, sl, r0
    9f98:	4a75      	ldr	r2, [pc, #468]	; (a170 <radio_adv_enable+0x480>)
		_radio.ext_advertiser.max_skip = skip;
    9f9a:	f886 8688 	strb.w	r8, [r6, #1672]	; 0x688
		if(((u64_t)interval * 625) <= 100000){
    9f9e:	2300      	movs	r3, #0
    9fa0:	428b      	cmp	r3, r1
    9fa2:	bf08      	it	eq
    9fa4:	4282      	cmpeq	r2, r0
    9fa6:	d30b      	bcc.n	9fc0 <radio_adv_enable+0x2d0>
		int calculation = max_skip / 5;
    9fa8:	2305      	movs	r3, #5
    9faa:	fbb8 f3f3 	udiv	r3, r8, r3
			if(calculation >= 5){
    9fae:	2b04      	cmp	r3, #4
    9fb0:	f240 80a5 	bls.w	a0fe <radio_adv_enable+0x40e>
				ticker_offset = 30 * (max_skip-5);
    9fb4:	f1a8 0405 	sub.w	r4, r8, #5
				ticker_offset = 30 * (max_skip-1);
    9fb8:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
				ticker_offset = 30 * max_skip;
    9fbc:	0064      	lsls	r4, r4, #1
    9fbe:	b2a4      	uxth	r4, r4
		_radio.ext_advertiser.aux_pckt_time = ((((u64_t)interval * 625 ) ) * skip) + 10000; //(10005 * offset) ;
    9fc0:	f240 2371 	movw	r3, #625	; 0x271
    9fc4:	fb03 f708 	mul.w	r7, r3, r8
    9fc8:	f242 7210 	movw	r2, #10000	; 0x2710
    9fcc:	fb0a 2707 	mla	r7, sl, r7, r2
		_radio.ext_advertiser.prim_interval = (u64_t)interval * 625;
    9fd0:	fb03 f30a 	mul.w	r3, r3, sl
		_radio.ext_advertiser.aux_pckt_time = ((((u64_t)interval * 625 ) ) * skip) + 10000; //(10005 * offset) ;
    9fd4:	f8c6 767c 	str.w	r7, [r6, #1660]	; 0x67c
		_radio.ext_advertiser.prim_interval = (u64_t)interval * 625;
    9fd8:	f8c6 3680 	str.w	r3, [r6, #1664]	; 0x680
		_radio.ext_advertiser.ticker_offset = 183 * (((u64_t)interval * 625 )/100000);
    9fdc:	4a64      	ldr	r2, [pc, #400]	; (a170 <radio_adv_enable+0x480>)
    9fde:	2300      	movs	r3, #0
    9fe0:	f7f6 f942 	bl	268 <__aeabi_uldivmod>
    9fe4:	23b7      	movs	r3, #183	; 0xb7
    9fe6:	4358      	muls	r0, r3
		pdu = (void *)_radio.advertiser.adv_data.data
    9fe8:	f896 322d 	ldrb.w	r3, [r6, #557]	; 0x22d
		_radio.ext_advertiser.ticker_offset = 183 * (((u64_t)interval * 625 )/100000);
    9fec:	f8c6 06a4 	str.w	r0, [r6, #1700]	; 0x6a4
		size = pdu->len + 2;
    9ff0:	eb03 2303 	add.w	r3, r3, r3, lsl #8
    9ff4:	4433      	add	r3, r6
		_radio.ext_advertiser.chan_37 = (_radio.ext_advertiser.aux_pckt_time +(_radio.ext_advertiser.ticker_offset *max_skip ) );
    9ff6:	fb00 7708 	mla	r7, r0, r8, r7
		size = pdu->len + 2;
    9ffa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
		_radio.ext_advertiser.chan_37 = (_radio.ext_advertiser.aux_pckt_time +(_radio.ext_advertiser.ticker_offset *max_skip ) );
    9ffe:	f8c6 7690 	str.w	r7, [r6, #1680]	; 0x690
		final_pckt_size = (size + 1 + 4 + 3)*8 ; 
    a002:	00db      	lsls	r3, r3, #3
    a004:	3350      	adds	r3, #80	; 0x50
		_radio.ext_advertiser.chan_38 = ((_radio.ext_advertiser.aux_pckt_time +(_radio.ext_advertiser.ticker_offset *max_skip ) ) -((final_pckt_size + 50)));
    a006:	f1a7 0232 	sub.w	r2, r7, #50	; 0x32
    a00a:	1ad2      	subs	r2, r2, r3
		_radio.ext_advertiser.chan_39 = ((_radio.ext_advertiser.aux_pckt_time +(_radio.ext_advertiser.ticker_offset *max_skip )) -(((final_pckt_size + 50)* 2))) ;
    a00c:	3332      	adds	r3, #50	; 0x32
    a00e:	eba7 0743 	sub.w	r7, r7, r3, lsl #1
		ret =
    a012:	4b58      	ldr	r3, [pc, #352]	; (a174 <radio_adv_enable+0x484>)
		_radio.ext_advertiser.chan_38 = ((_radio.ext_advertiser.aux_pckt_time +(_radio.ext_advertiser.ticker_offset *max_skip ) ) -((final_pckt_size + 50)));
    a014:	f8c6 2694 	str.w	r2, [r6, #1684]	; 0x694
		_radio.ext_advertiser.chan_39 = ((_radio.ext_advertiser.aux_pckt_time +(_radio.ext_advertiser.ticker_offset *max_skip )) -(((final_pckt_size + 50)* 2))) ;
    a018:	f8c6 7698 	str.w	r7, [r6, #1688]	; 0x698
		ret =
    a01c:	f04f 0b00 	mov.w	fp, #0
    a020:	9307      	str	r3, [sp, #28]
    a022:	af11      	add	r7, sp, #68	; 0x44
    a024:	4b54      	ldr	r3, [pc, #336]	; (a178 <radio_adv_enable+0x488>)
    a026:	9708      	str	r7, [sp, #32]
    a028:	f8cd b018 	str.w	fp, [sp, #24]
    a02c:	9305      	str	r3, [sp, #20]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    a02e:	6a73      	ldr	r3, [r6, #36]	; 0x24
    a030:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
				     HAL_TICKER_US_TO_TICKS(((u64_t)interval *				//ticks periodic
    a032:	4852      	ldr	r0, [pc, #328]	; (a17c <radio_adv_enable+0x48c>)
		ret =
    a034:	f8cd b00c 	str.w	fp, [sp, #12]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    a038:	4413      	add	r3, r2
		ret =
    a03a:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_US_TO_TICKS(((u64_t)interval *				//ticks periodic
    a03c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a03e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		ret =
    a040:	f8cd b008 	str.w	fp, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(((u64_t)interval *				//ticks periodic
    a044:	fba3 0100 	umull	r0, r1, r3, r0
    a048:	2391      	movs	r3, #145	; 0x91
    a04a:	fb03 1102 	mla	r1, r3, r2, r1
    a04e:	a346      	add	r3, pc, #280	; (adr r3, a168 <radio_adv_enable+0x478>)
    a050:	e9d3 2300 	ldrd	r2, r3, [r3]
    a054:	f7f6 f908 	bl	268 <__aeabi_uldivmod>
		ret =
    a058:	9b0e      	ldr	r3, [sp, #56]	; 0x38
				     HAL_TICKER_US_TO_TICKS(((u64_t)interval *				//ticks periodic
    a05a:	9001      	str	r0, [sp, #4]
		ret =
    a05c:	f8cd b000 	str.w	fp, [sp]
    a060:	2205      	movs	r2, #5
    a062:	2103      	movs	r1, #3
    a064:	4658      	mov	r0, fp
    a066:	f7fa fb21 	bl	46ac <ticker_start>
		if (ret == TICKER_STATUS_BUSY) {
    a06a:	2802      	cmp	r0, #2
    a06c:	4b41      	ldr	r3, [pc, #260]	; (a174 <radio_adv_enable+0x484>)
    a06e:	d05e      	beq.n	a12e <radio_adv_enable+0x43e>
		if (ret_cb != TICKER_STATUS_SUCCESS) {
    a070:	9e11      	ldr	r6, [sp, #68]	; 0x44
    a072:	2e00      	cmp	r6, #0
    a074:	f47f af4b 	bne.w	9f0e <radio_adv_enable+0x21e>
		ret=	
    a078:	9307      	str	r3, [sp, #28]
    a07a:	4b41      	ldr	r3, [pc, #260]	; (a180 <radio_adv_enable+0x490>)
    a07c:	9305      	str	r3, [sp, #20]
				    HAL_TICKER_US_TO_TICKS(	ticks_slot_offset +			
    a07e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		ret=	
    a080:	9708      	str	r7, [sp, #32]
		ret_cb = TICKER_STATUS_BUSY;
    a082:	2202      	movs	r2, #2
				    HAL_TICKER_US_TO_TICKS(	ticks_slot_offset +			
    a084:	f503 70bc 	add.w	r0, r3, #376	; 0x178
		ret_cb = TICKER_STATUS_BUSY;
    a088:	9211      	str	r2, [sp, #68]	; 0x44
				    HAL_TICKER_US_TO_TICKS(	ticks_slot_offset +			
    a08a:	fba0 0109 	umull	r0, r1, r0, r9
    a08e:	a336      	add	r3, pc, #216	; (adr r3, a168 <radio_adv_enable+0x478>)
    a090:	e9d3 2300 	ldrd	r2, r3, [r3]
		u8_t offset = skip + 1;
    a094:	f108 0801 	add.w	r8, r8, #1
		ret=	
    a098:	9606      	str	r6, [sp, #24]
		u64_t aux_pckt_interval = (((u64_t)interval * 625) * offset);
    a09a:	fa5f f888 	uxtb.w	r8, r8
				    HAL_TICKER_US_TO_TICKS(	ticks_slot_offset +			
    a09e:	f7f6 f8e3 	bl	268 <__aeabi_uldivmod>
		u64_t aux_pckt_interval = (((u64_t)interval * 625) * offset);
    a0a2:	fba8 ab0a 	umull	sl, fp, r8, sl
    a0a6:	f240 2171 	movw	r1, #625	; 0x271
    a0aa:	fbaa 2301 	umull	r2, r3, sl, r1
				    HAL_TICKER_US_TO_TICKS( aux_pckt_interval - ticker_offset ),			
    a0ae:	1b12      	subs	r2, r2, r4
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    a0b0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		u64_t aux_pckt_interval = (((u64_t)interval * 625) * offset);
    a0b4:	fb01 330b 	mla	r3, r1, fp, r3
				    HAL_TICKER_US_TO_TICKS( aux_pckt_interval - ticker_offset ),			
    a0b8:	f163 0300 	sbc.w	r3, r3, #0
		ret=	
    a0bc:	9004      	str	r0, [sp, #16]
				    HAL_TICKER_US_TO_TICKS( aux_pckt_interval - ticker_offset ),			
    a0be:	fba2 0109 	umull	r0, r1, r2, r9
    a0c2:	fb09 1103 	mla	r1, r9, r3, r1
    a0c6:	a328      	add	r3, pc, #160	; (adr r3, a168 <radio_adv_enable+0x478>)
    a0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret=	
    a0cc:	9603      	str	r6, [sp, #12]
    a0ce:	9602      	str	r6, [sp, #8]
				    HAL_TICKER_US_TO_TICKS( aux_pckt_interval - ticker_offset ),			
    a0d0:	f7f6 f8ca 	bl	268 <__aeabi_uldivmod>
					HAL_TICKER_US_TO_TICKS(	_radio.ext_advertiser.aux_pckt_time  ),			//ticks periodic
    a0d4:	4b2b      	ldr	r3, [pc, #172]	; (a184 <radio_adv_enable+0x494>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    a0d6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ret=	
    a0da:	9001      	str	r0, [sp, #4]
					HAL_TICKER_US_TO_TICKS(	_radio.ext_advertiser.aux_pckt_time  ),			//ticks periodic
    a0dc:	f8d3 067c 	ldr.w	r0, [r3, #1660]	; 0x67c
    a0e0:	a321      	add	r3, pc, #132	; (adr r3, a168 <radio_adv_enable+0x478>)
    a0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
    a0e6:	fba0 0109 	umull	r0, r1, r0, r9
    a0ea:	f7f6 f8bd 	bl	268 <__aeabi_uldivmod>
		ret=	
    a0ee:	2203      	movs	r2, #3
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    a0f0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ret=	
    a0f4:	9000      	str	r0, [sp, #0]
    a0f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a0f8:	4611      	mov	r1, r2
    a0fa:	4630      	mov	r0, r6
    a0fc:	e6fe      	b.n	9efc <radio_adv_enable+0x20c>
			}else if(calculation >= 4){
    a0fe:	d102      	bne.n	a106 <radio_adv_enable+0x416>
				ticker_offset = 30 * (max_skip-4);
    a100:	f1a8 0404 	sub.w	r4, r8, #4
    a104:	e758      	b.n	9fb8 <radio_adv_enable+0x2c8>
			}else if(calculation >=3){
    a106:	2b03      	cmp	r3, #3
    a108:	d102      	bne.n	a110 <radio_adv_enable+0x420>
				ticker_offset = 30 * (max_skip-3);
    a10a:	f1a8 0403 	sub.w	r4, r8, #3
    a10e:	e753      	b.n	9fb8 <radio_adv_enable+0x2c8>
			}else if(calculation >= 2){
    a110:	2b02      	cmp	r3, #2
    a112:	d102      	bne.n	a11a <radio_adv_enable+0x42a>
				ticker_offset = 30 * (max_skip-2);
    a114:	f1a8 0402 	sub.w	r4, r8, #2
    a118:	e74e      	b.n	9fb8 <radio_adv_enable+0x2c8>
			}else if(calculation >= 1){
    a11a:	2b01      	cmp	r3, #1
    a11c:	d102      	bne.n	a124 <radio_adv_enable+0x434>
				ticker_offset = 30 * (max_skip-1);
    a11e:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
    a122:	e749      	b.n	9fb8 <radio_adv_enable+0x2c8>
				ticker_offset = 30 * max_skip;
    a124:	ebc8 1408 	rsb	r4, r8, r8, lsl #4
    a128:	e748      	b.n	9fbc <radio_adv_enable+0x2cc>
				cpu_sleep();
    a12a:	f7fb fbbf 	bl	58ac <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
    a12e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    a130:	2a02      	cmp	r2, #2
    a132:	d0fa      	beq.n	a12a <radio_adv_enable+0x43a>
    a134:	e79c      	b.n	a070 <radio_adv_enable+0x380>
			cpu_sleep();
    a136:	f7fb fbb9 	bl	58ac <cpu_sleep>
		while (ret_cb == TICKER_STATUS_BUSY) {
    a13a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a13c:	2b02      	cmp	r3, #2
    a13e:	d0fa      	beq.n	a136 <radio_adv_enable+0x446>
    a140:	e6e1      	b.n	9f06 <radio_adv_enable+0x216>
		_radio.advertiser.is_enabled = 1;
    a142:	4b10      	ldr	r3, [pc, #64]	; (a184 <radio_adv_enable+0x494>)
    a144:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    a148:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    a14c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		if (!_radio.scanner.is_enabled) {
    a150:	f893 364c 	ldrb.w	r3, [r3, #1612]	; 0x64c
    a154:	f013 0401 	ands.w	r4, r3, #1
    a158:	d103      	bne.n	a162 <radio_adv_enable+0x472>
			ll_adv_scan_state_cb(BIT(0));
    a15a:	2001      	movs	r0, #1
    a15c:	f7ff fdc4 	bl	9ce8 <ll_adv_scan_state_cb>
		return 0;
    a160:	4620      	mov	r0, r4
}
    a162:	b013      	add	sp, #76	; 0x4c
    a164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a168:	1afd498d 	.word	0x1afd498d
    a16c:	00000007 	.word	0x00000007
    a170:	000186a0 	.word	0x000186a0
    a174:	000058f1 	.word	0x000058f1
    a178:	00007171 	.word	0x00007171
    a17c:	84e72a00 	.word	0x84e72a00
    a180:	000071c1 	.word	0x000071c1
    a184:	200009f8 	.word	0x200009f8

0000a188 <radio_adv_disable>:
{
    a188:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_ADV,
    a18a:	2103      	movs	r1, #3
    a18c:	2005      	movs	r0, #5
    a18e:	f7fb fc89 	bl	5aa4 <role_disable>
	if (!status) {
    a192:	4605      	mov	r5, r0
    a194:	b9e8      	cbnz	r0, a1d2 <radio_adv_disable+0x4a>
		_radio.advertiser.is_enabled = 0;
    a196:	4c10      	ldr	r4, [pc, #64]	; (a1d8 <radio_adv_disable+0x50>)
    a198:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    a19c:	f360 12c7 	bfi	r2, r0, #7, #1
    a1a0:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
		if (!_radio.scanner.is_enabled) {
    a1a4:	f894 264c 	ldrb.w	r2, [r4, #1612]	; 0x64c
    a1a8:	07d3      	lsls	r3, r2, #31
    a1aa:	d401      	bmi.n	a1b0 <radio_adv_disable+0x28>
			ll_adv_scan_state_cb(0);
    a1ac:	f7ff fd9c 	bl	9ce8 <ll_adv_scan_state_cb>
		conn = _radio.advertiser.conn;
    a1b0:	f8d4 6638 	ldr.w	r6, [r4, #1592]	; 0x638
		if (conn) {
    a1b4:	b15e      	cbz	r6, a1ce <radio_adv_disable+0x46>
			_radio.advertiser.conn = NULL;
    a1b6:	2300      	movs	r3, #0
    a1b8:	f8c4 3638 	str.w	r3, [r4, #1592]	; 0x638
			mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link,
    a1bc:	4907      	ldr	r1, [pc, #28]	; (a1dc <radio_adv_disable+0x54>)
    a1be:	f8d6 009c 	ldr.w	r0, [r6, #156]	; 0x9c
    a1c2:	f7f9 fc20 	bl	3a06 <mem_release>
			mem_release(conn, &_radio.conn_free);
    a1c6:	4906      	ldr	r1, [pc, #24]	; (a1e0 <radio_adv_disable+0x58>)
    a1c8:	4630      	mov	r0, r6
    a1ca:	f7f9 fc1c 	bl	3a06 <mem_release>
}
    a1ce:	4628      	mov	r0, r5
    a1d0:	bd70      	pop	{r4, r5, r6, pc}
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
    a1d2:	250c      	movs	r5, #12
    a1d4:	e7fb      	b.n	a1ce <radio_adv_disable+0x46>
    a1d6:	bf00      	nop
    a1d8:	200009f8 	.word	0x200009f8
    a1dc:	20001140 	.word	0x20001140
    a1e0:	2000110c 	.word	0x2000110c

0000a1e4 <ll_rx_dequeue>:
{
    a1e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
    a1e6:	4d3c      	ldr	r5, [pc, #240]	; (a2d8 <ll_rx_dequeue+0xf4>)
	struct radio_pdu_node_rx *node_rx = NULL;
    a1e8:	aa02      	add	r2, sp, #8
    a1ea:	2300      	movs	r3, #0
    a1ec:	f842 3d04 	str.w	r3, [r2, #-4]!
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
    a1f0:	f8d5 0750 	ldr.w	r0, [r5, #1872]	; 0x750
    a1f4:	f205 714c 	addw	r1, r5, #1868	; 0x74c
    a1f8:	f7f9 fc43 	bl	3a82 <memq_dequeue>
    a1fc:	462c      	mov	r4, r5
	LL_ASSERT(link);
    a1fe:	b950      	cbnz	r0, a216 <ll_rx_dequeue+0x32>
    a200:	4a36      	ldr	r2, [pc, #216]	; (a2dc <ll_rx_dequeue+0xf8>)
    a202:	4937      	ldr	r1, [pc, #220]	; (a2e0 <ll_rx_dequeue+0xfc>)
		LL_ASSERT(_radio.link_rx_data_quota <
    a204:	2003      	movs	r0, #3
    a206:	f7f7 fff3 	bl	21f0 <bt_log>
    a20a:	4040      	eors	r0, r0
    a20c:	f380 8811 	msr	BASEPRI, r0
    a210:	f04f 0004 	mov.w	r0, #4
    a214:	df02      	svc	2
	mem_release(link, &_radio.link_rx_free);
    a216:	f505 61e9 	add.w	r1, r5, #1864	; 0x748
    a21a:	f7f9 fbf4 	bl	3a06 <mem_release>
	switch (node_rx->hdr.type) {
    a21e:	9a01      	ldr	r2, [sp, #4]
    a220:	7911      	ldrb	r1, [r2, #4]
    a222:	290a      	cmp	r1, #10
    a224:	d807      	bhi.n	a236 <ll_rx_dequeue+0x52>
    a226:	2301      	movs	r3, #1
    a228:	408b      	lsls	r3, r1
    a22a:	f240 707e 	movw	r0, #1918	; 0x77e
    a22e:	4203      	tst	r3, r0
    a230:	d104      	bne.n	a23c <ll_rx_dequeue+0x58>
    a232:	0618      	lsls	r0, r3, #24
    a234:	d40f      	bmi.n	a256 <ll_rx_dequeue+0x72>
		LL_ASSERT(0);
    a236:	4a29      	ldr	r2, [pc, #164]	; (a2dc <ll_rx_dequeue+0xf8>)
    a238:	492a      	ldr	r1, [pc, #168]	; (a2e4 <ll_rx_dequeue+0x100>)
    a23a:	e7e3      	b.n	a204 <ll_rx_dequeue+0x20>
		LL_ASSERT(_radio.link_rx_data_quota <
    a23c:	f895 0740 	ldrb.w	r0, [r5, #1856]	; 0x740
    a240:	f895 3754 	ldrb.w	r3, [r5, #1876]	; 0x754
    a244:	3801      	subs	r0, #1
    a246:	4283      	cmp	r3, r0
    a248:	db02      	blt.n	a250 <ll_rx_dequeue+0x6c>
    a24a:	4a24      	ldr	r2, [pc, #144]	; (a2dc <ll_rx_dequeue+0xf8>)
    a24c:	4926      	ldr	r1, [pc, #152]	; (a2e8 <ll_rx_dequeue+0x104>)
    a24e:	e7d9      	b.n	a204 <ll_rx_dequeue+0x20>
		_radio.link_rx_data_quota++;
    a250:	3301      	adds	r3, #1
    a252:	f885 3754 	strb.w	r3, [r5, #1876]	; 0x754
	if (node_rx->hdr.type == NODE_RX_TYPE_CONNECTION) {
    a256:	2906      	cmp	r1, #6
    a258:	d12c      	bne.n	a2b4 <ll_rx_dequeue+0xd0>
		if ((radio_le_conn_cmplt->status == 0x3c) ||
    a25a:	7ad3      	ldrb	r3, [r2, #11]
    a25c:	2b3c      	cmp	r3, #60	; 0x3c
    a25e:	d008      	beq.n	a272 <ll_rx_dequeue+0x8e>
    a260:	7b12      	ldrb	r2, [r2, #12]
    a262:	b992      	cbnz	r2, a28a <ll_rx_dequeue+0xa6>
			LL_ASSERT(_radio.scanner.is_enabled);
    a264:	f894 364c 	ldrb.w	r3, [r4, #1612]	; 0x64c
    a268:	07d9      	lsls	r1, r3, #31
    a26a:	d425      	bmi.n	a2b8 <ll_rx_dequeue+0xd4>
    a26c:	4a1b      	ldr	r2, [pc, #108]	; (a2dc <ll_rx_dequeue+0xf8>)
    a26e:	491f      	ldr	r1, [pc, #124]	; (a2ec <ll_rx_dequeue+0x108>)
    a270:	e7c8      	b.n	a204 <ll_rx_dequeue+0x20>
				_radio.advertiser.conn = NULL;
    a272:	2300      	movs	r3, #0
				conn = _radio.advertiser.conn;
    a274:	f8d4 5638 	ldr.w	r5, [r4, #1592]	; 0x638
				_radio.advertiser.conn = NULL;
    a278:	f8c4 3638 	str.w	r3, [r4, #1592]	; 0x638
			LL_ASSERT(_radio.advertiser.is_enabled);
    a27c:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
    a280:	2b00      	cmp	r3, #0
    a282:	db04      	blt.n	a28e <ll_rx_dequeue+0xaa>
    a284:	4a15      	ldr	r2, [pc, #84]	; (a2dc <ll_rx_dequeue+0xf8>)
    a286:	491a      	ldr	r1, [pc, #104]	; (a2f0 <ll_rx_dequeue+0x10c>)
    a288:	e7bc      	b.n	a204 <ll_rx_dequeue+0x20>
		struct connection *conn = NULL;
    a28a:	2500      	movs	r5, #0
    a28c:	e7f6      	b.n	a27c <ll_rx_dequeue+0x98>
			_radio.advertiser.is_enabled = 0;
    a28e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    a292:	f36f 13c7 	bfc	r3, #7, #1
    a296:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (conn) {
    a29a:	b995      	cbnz	r5, a2c2 <ll_rx_dequeue+0xde>
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
    a29c:	f894 064c 	ldrb.w	r0, [r4, #1612]	; 0x64c
		     _radio.advertiser.is_enabled;
    a2a0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
    a2a4:	f000 0001 	and.w	r0, r0, #1
    a2a8:	0040      	lsls	r0, r0, #1
		if (!bm) {
    a2aa:	ea50 10d3 	orrs.w	r0, r0, r3, lsr #7
    a2ae:	d101      	bne.n	a2b4 <ll_rx_dequeue+0xd0>
			ll_adv_scan_state_cb(0);
    a2b0:	f7ff fd1a 	bl	9ce8 <ll_adv_scan_state_cb>
}
    a2b4:	b003      	add	sp, #12
    a2b6:	bd30      	pop	{r4, r5, pc}
			_radio.scanner.is_enabled = 0;
    a2b8:	f362 0300 	bfi	r3, r2, #0, #1
    a2bc:	f884 364c 	strb.w	r3, [r4, #1612]	; 0x64c
    a2c0:	e7ec      	b.n	a29c <ll_rx_dequeue+0xb8>
			mem_release(node_rx->hdr.onion.link,
    a2c2:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    a2c6:	490b      	ldr	r1, [pc, #44]	; (a2f4 <ll_rx_dequeue+0x110>)
    a2c8:	f7f9 fb9d 	bl	3a06 <mem_release>
			mem_release(conn, &_radio.conn_free);
    a2cc:	490a      	ldr	r1, [pc, #40]	; (a2f8 <ll_rx_dequeue+0x114>)
    a2ce:	4628      	mov	r0, r5
    a2d0:	f7f9 fb99 	bl	3a06 <mem_release>
    a2d4:	e7e2      	b.n	a29c <ll_rx_dequeue+0xb8>
    a2d6:	bf00      	nop
    a2d8:	200009f8 	.word	0x200009f8
    a2dc:	0000e556 	.word	0x0000e556
    a2e0:	0000e9af 	.word	0x0000e9af
    a2e4:	0000d773 	.word	0x0000d773
    a2e8:	0000e7fd 	.word	0x0000e7fd
    a2ec:	0000e87d 	.word	0x0000e87d
    a2f0:	0000e84b 	.word	0x0000e84b
    a2f4:	20001140 	.word	0x20001140
    a2f8:	2000110c 	.word	0x2000110c

0000a2fc <rtc0_nrf5_isr>:
	ISR_DIRECT_PM();
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
    a2fc:	b538      	push	{r3, r4, r5, lr}
	u32_t compare0, compare1;

	/* store interested events */
	compare0 = NRF_RTC0->EVENTS_COMPARE[0];
    a2fe:	4c0b      	ldr	r4, [pc, #44]	; (a32c <rtc0_nrf5_isr+0x30>)
    a300:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
	compare1 = NRF_RTC0->EVENTS_COMPARE[1];
    a304:	f8d4 5144 	ldr.w	r5, [r4, #324]	; 0x144

	/* On compare0 run ticker worker instance0 */
	if (compare0) {
    a308:	b122      	cbz	r2, a314 <rtc0_nrf5_isr+0x18>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
    a30a:	2000      	movs	r0, #0
    a30c:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140

		ticker_trigger(0);
    a310:	f7fa f9ba 	bl	4688 <ticker_trigger>
	}

	/* On compare1 run ticker worker instance1 */
	if (compare1) {
    a314:	b12d      	cbz	r5, a322 <rtc0_nrf5_isr+0x26>
		NRF_RTC0->EVENTS_COMPARE[1] = 0;
    a316:	2300      	movs	r3, #0
    a318:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144

		ticker_trigger(1);
    a31c:	2001      	movs	r0, #1
    a31e:	f7fa f9b3 	bl	4688 <ticker_trigger>
	}

	mayfly_run(MAYFLY_CALL_ID_0);
    a322:	2000      	movs	r0, #0
}
    a324:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	mayfly_run(MAYFLY_CALL_ID_0);
    a328:	f7f9 bc5a 	b.w	3be0 <mayfly_run>
    a32c:	4000b000 	.word	0x4000b000

0000a330 <swi4_nrf5_isr>:

static void swi4_nrf5_isr(void *arg)
{
	mayfly_run(MAYFLY_CALL_ID_1);
    a330:	2001      	movs	r0, #1
    a332:	f7f9 bc55 	b.w	3be0 <mayfly_run>

0000a336 <radio_nrf5_isr>:
ISR_DIRECT_DECLARE(radio_nrf5_isr)
    a336:	4668      	mov	r0, sp
    a338:	f020 0107 	bic.w	r1, r0, #7
    a33c:	468d      	mov	sp, r1
    a33e:	b501      	push	{r0, lr}
	isr_radio();
    a340:	f000 fd3a 	bl	adb8 <isr_radio>
	ISR_DIRECT_PM();
    a344:	f7f6 fcd8 	bl	cf8 <_arch_isr_direct_pm>
extern void _IntExit(void);

static inline void _arch_isr_direct_footer(int maybe_swap)
{
	if (maybe_swap) {
		_IntExit();
    a348:	f7f6 fab6 	bl	8b8 <_ExcExit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
    a34c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    a350:	4685      	mov	sp, r0
    a352:	4770      	bx	lr

0000a354 <radio_active_callback>:
{
    a354:	4770      	bx	lr
	...

0000a358 <radio_event_callback>:
	k_sem_give(sem_recv);
    a358:	4b01      	ldr	r3, [pc, #4]	; (a360 <radio_event_callback+0x8>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    a35a:	6818      	ldr	r0, [r3, #0]
    a35c:	f001 bec6 	b.w	c0ec <_impl_k_sem_give>
    a360:	20002670 	.word	0x20002670

0000a364 <ll_init>:
}

int ll_init(struct k_sem *sem_rx)
{
    a364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct device *clk_k32;
	struct device *clk_m16;
	struct device *entropy;
	u32_t err;

	sem_recv = sem_rx;
    a368:	4b3f      	ldr	r3, [pc, #252]	; (a468 <ll_init+0x104>)
{
    a36a:	b086      	sub	sp, #24
	sem_recv = sem_rx;
    a36c:	6018      	str	r0, [r3, #0]

	clk_k32 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    a36e:	483f      	ldr	r0, [pc, #252]	; (a46c <ll_init+0x108>)
    a370:	f001 faae 	bl	b8d0 <device_get_binding>
	if (!clk_k32) {
    a374:	b920      	cbnz	r0, a380 <ll_init+0x1c>
		return -ENODEV;
    a376:	f06f 0012 	mvn.w	r0, #18
	irq_enable(NRF5_IRQ_RADIO_IRQn);
	irq_enable(NRF5_IRQ_RTC0_IRQn);
	irq_enable(NRF5_IRQ_SWI4_IRQn);

	return 0;
}
    a37a:	b006      	add	sp, #24
    a37c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return api->on(dev, sys);
    a380:	6843      	ldr	r3, [r0, #4]
    a382:	2101      	movs	r1, #1
    a384:	681b      	ldr	r3, [r3, #0]
    a386:	4798      	blx	r3
	entropy = device_get_binding(CONFIG_ENTROPY_NAME);
    a388:	4839      	ldr	r0, [pc, #228]	; (a470 <ll_init+0x10c>)
    a38a:	f001 faa1 	bl	b8d0 <device_get_binding>
	if (!entropy) {
    a38e:	4604      	mov	r4, r0
    a390:	2800      	cmp	r0, #0
    a392:	d0f0      	beq.n	a376 <ll_init+0x12>
	cntr_init();
    a394:	f000 fc00 	bl	ab98 <cntr_init>
	mayfly_init();
    a398:	f7f9 fb82 	bl	3aa0 <mayfly_init>
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
    a39c:	4b35      	ldr	r3, [pc, #212]	; (a474 <ll_init+0x110>)
    a39e:	2208      	movs	r2, #8
    a3a0:	701a      	strb	r2, [r3, #0]
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
    a3a2:	2202      	movs	r2, #2
    a3a4:	761a      	strb	r2, [r3, #24]
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
    a3a6:	2000      	movs	r0, #0
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
    a3a8:	4a33      	ldr	r2, [pc, #204]	; (a478 <ll_init+0x114>)
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
    a3aa:	7418      	strb	r0, [r3, #16]
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
    a3ac:	2603      	movs	r6, #3
    a3ae:	721e      	strb	r6, [r3, #8]
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
    a3b0:	9205      	str	r2, [sp, #20]
    a3b2:	4a32      	ldr	r2, [pc, #200]	; (a47c <ll_init+0x118>)
    a3b4:	9204      	str	r2, [sp, #16]
    a3b6:	4a32      	ldr	r2, [pc, #200]	; (a480 <ll_init+0x11c>)
    a3b8:	9203      	str	r2, [sp, #12]
    a3ba:	4a32      	ldr	r2, [pc, #200]	; (a484 <ll_init+0x120>)
    a3bc:	9202      	str	r2, [sp, #8]
    a3be:	220d      	movs	r2, #13
    a3c0:	9201      	str	r2, [sp, #4]
    a3c2:	9300      	str	r3, [sp, #0]
    a3c4:	4a30      	ldr	r2, [pc, #192]	; (a488 <ll_init+0x124>)
    a3c6:	2304      	movs	r3, #4
    a3c8:	2107      	movs	r1, #7
    a3ca:	f7fa f925 	bl	4618 <ticker_init>
	LL_ASSERT(!err);
    a3ce:	4680      	mov	r8, r0
    a3d0:	b150      	cbz	r0, a3e8 <ll_init+0x84>
    a3d2:	4a2e      	ldr	r2, [pc, #184]	; (a48c <ll_init+0x128>)
    a3d4:	492e      	ldr	r1, [pc, #184]	; (a490 <ll_init+0x12c>)
    a3d6:	4630      	mov	r0, r6
    a3d8:	f7f7 ff0a 	bl	21f0 <bt_log>
    a3dc:	4040      	eors	r0, r0
    a3de:	f380 8811 	msr	BASEPRI, r0
    a3e2:	f04f 0004 	mov.w	r0, #4
    a3e6:	df02      	svc	2
	clk_m16 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_M16SRC_DRV_NAME);
    a3e8:	482a      	ldr	r0, [pc, #168]	; (a494 <ll_init+0x130>)
    a3ea:	f001 fa71 	bl	b8d0 <device_get_binding>
	if (!clk_m16) {
    a3ee:	2800      	cmp	r0, #0
    a3f0:	d0c1      	beq.n	a376 <ll_init+0x12>
	err = radio_init(clk_m16, CLOCK_CONTROL_NRF5_K32SRC_ACCURACY, entropy,
    a3f2:	4b29      	ldr	r3, [pc, #164]	; (a498 <ll_init+0x134>)
    a3f4:	9304      	str	r3, [sp, #16]
    a3f6:	23fb      	movs	r3, #251	; 0xfb
    a3f8:	9303      	str	r3, [sp, #12]
    a3fa:	9302      	str	r3, [sp, #8]
    a3fc:	f44f 5785 	mov.w	r7, #4256	; 0x10a0
    a400:	230a      	movs	r3, #10
    a402:	2501      	movs	r5, #1
    a404:	9301      	str	r3, [sp, #4]
    a406:	4622      	mov	r2, r4
    a408:	9705      	str	r7, [sp, #20]
    a40a:	9500      	str	r5, [sp, #0]
    a40c:	4643      	mov	r3, r8
    a40e:	2107      	movs	r1, #7
    a410:	f7ff fa7a 	bl	9908 <radio_init>
	if (err) {
    a414:	4604      	mov	r4, r0
    a416:	b148      	cbz	r0, a42c <ll_init+0xc8>
		BT_ERR("Required RAM size: %d, supplied: %u.", err,
    a418:	4603      	mov	r3, r0
    a41a:	9700      	str	r7, [sp, #0]
    a41c:	4630      	mov	r0, r6
    a41e:	4a1b      	ldr	r2, [pc, #108]	; (a48c <ll_init+0x128>)
    a420:	491e      	ldr	r1, [pc, #120]	; (a49c <ll_init+0x138>)
    a422:	f7f7 fee5 	bl	21f0 <bt_log>
		return -ENOMEM;
    a426:	f06f 000b 	mvn.w	r0, #11
    a42a:	e7a6      	b.n	a37a <ll_init+0x16>
	ll_filter_reset(true);
    a42c:	4628      	mov	r0, r5
    a42e:	f000 fba7 	bl	ab80 <ll_filter_reset>
	IRQ_DIRECT_CONNECT(NRF5_IRQ_RADIO_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
    a432:	4622      	mov	r2, r4
    a434:	4621      	mov	r1, r4
    a436:	4628      	mov	r0, r5
    a438:	f7f6 fc44 	bl	cc4 <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_RTC0_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
    a43c:	4622      	mov	r2, r4
    a43e:	4621      	mov	r1, r4
    a440:	200b      	movs	r0, #11
    a442:	f7f6 fc3f 	bl	cc4 <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_SWI4_IRQn, CONFIG_BT_CTLR_JOB_PRIO, swi4_nrf5_isr,
    a446:	4622      	mov	r2, r4
    a448:	4621      	mov	r1, r4
    a44a:	2018      	movs	r0, #24
    a44c:	f7f6 fc3a 	bl	cc4 <_irq_priority_set>
	irq_enable(NRF5_IRQ_RADIO_IRQn);
    a450:	4628      	mov	r0, r5
    a452:	f7f6 fc05 	bl	c60 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RTC0_IRQn);
    a456:	200b      	movs	r0, #11
    a458:	f7f6 fc02 	bl	c60 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_SWI4_IRQn);
    a45c:	2018      	movs	r0, #24
    a45e:	f7f6 fbff 	bl	c60 <_arch_irq_enable>
	return 0;
    a462:	4620      	mov	r0, r4
    a464:	e789      	b.n	a37a <ll_init+0x16>
    a466:	bf00      	nop
    a468:	20002670 	.word	0x20002670
    a46c:	0000d134 	.word	0x0000d134
    a470:	0000d112 	.word	0x0000d112
    a474:	20002650 	.word	0x20002650
    a478:	0000b659 	.word	0x0000b659
    a47c:	0000b5cd 	.word	0x0000b5cd
    a480:	0000b591 	.word	0x0000b591
    a484:	200023e0 	.word	0x200023e0
    a488:	200022c8 	.word	0x200022c8
    a48c:	0000ed23 	.word	0x0000ed23
    a490:	0000ed2b 	.word	0x0000ed2b
    a494:	0000d13f 	.word	0x0000d13f
    a498:	20001228 	.word	0x20001228
    a49c:	0000ed45 	.word	0x0000ed45

0000a4a0 <ll_adv_params_set>:
u32_t ll_adv_params_set(u8_t Adv_handle, u16_t evt_prop, u16_t interval,
			u8_t own_addr_type,
			u8_t direct_addr_type, u8_t const *const direct_addr,
			u8_t chan_map, u8_t filter_policy, u8_t *tx_pwr,
			u8_t phy_p, u8_t skip, u8_t phy_s, u8_t sid, u8_t sreq)
{
    a4a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a4a4:	b089      	sub	sp, #36	; 0x24
    a4a6:	4698      	mov	r8, r3
    a4a8:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
    a4ac:	9301      	str	r3, [sp, #4]
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    a4ae:	2300      	movs	r3, #0
    a4b0:	f88d 3018 	strb.w	r3, [sp, #24]
    a4b4:	2306      	movs	r3, #6
    a4b6:	2601      	movs	r6, #1
    a4b8:	f88d 301a 	strb.w	r3, [sp, #26]
    a4bc:	2502      	movs	r5, #2
    a4be:	2307      	movs	r3, #7
{
    a4c0:	9102      	str	r1, [sp, #8]
    a4c2:	4614      	mov	r4, r2
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    a4c4:	f88d 6019 	strb.w	r6, [sp, #25]
    a4c8:	f88d 501b 	strb.w	r5, [sp, #27]
    a4cc:	f88d 601c 	strb.w	r6, [sp, #28]
    a4d0:	f88d 301d 	strb.w	r3, [sp, #29]
	struct radio_adv_data *radio_adv_data;
	struct radio_adv_data *radio_aux_adv_data;
	struct pdu_adv *pdu;
	struct pdu_adv *aux_pdu;
	
	if (ll_adv_is_enabled()) {
    a4d4:	f7ff faf6 	bl	9ac4 <ll_adv_is_enabled>
    a4d8:	9902      	ldr	r1, [sp, #8]
    a4da:	4607      	mov	r7, r0
    a4dc:	2800      	cmp	r0, #0
    a4de:	f040 8194 	bne.w	a80a <ll_adv_params_set+0x36a>

#if defined(CONFIG_BT_CTLR_ADV_EXT)
	/* TODO: check and fail (0x12, invalid HCI cmd param) if invalid
	 * evt_prop bits.
	 */
	ll_adv.max_skip = skip;
    a4e2:	4bcb      	ldr	r3, [pc, #812]	; (a810 <ll_adv_params_set+0x370>)
    a4e4:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
    a4e8:	711a      	strb	r2, [r3, #4]
	
	u8_t adv_type;
	ll_adv.phy_p = BIT(0);
    a4ea:	781a      	ldrb	r2, [r3, #0]
    a4ec:	f366 1247 	bfi	r2, r6, #5, #3
    a4f0:	701a      	strb	r2, [r3, #0]
		adv_type = 0x05;
	}			
	/* extended */
	//if (adv_type > 0x04) {
		/* legacy */
		if (evt_prop & BIT(4)) {
    a4f2:	06ca      	lsls	r2, r1, #27
    a4f4:	f140 809b 	bpl.w	a62e <ll_adv_params_set+0x18e>
			u8_t const leg_adv_type[] = { 0x03, 0x04, 0x02, 0x00};
    a4f8:	2203      	movs	r2, #3
    a4fa:	f88d 2014 	strb.w	r2, [sp, #20]
    a4fe:	f88d 0017 	strb.w	r0, [sp, #23]
    a502:	2204      	movs	r2, #4

			adv_type = leg_adv_type[evt_prop & 0x03];

			/* high duty cycle directed */
			if (evt_prop & BIT(3)) {
    a504:	0708      	lsls	r0, r1, #28
			u8_t const leg_adv_type[] = { 0x03, 0x04, 0x02, 0x00};
    a506:	f88d 2015 	strb.w	r2, [sp, #21]
    a50a:	f88d 5016 	strb.w	r5, [sp, #22]
			if (evt_prop & BIT(3)) {
    a50e:	d408      	bmi.n	a522 <ll_adv_params_set+0x82>
			adv_type = leg_adv_type[evt_prop & 0x03];
    a510:	f001 0203 	and.w	r2, r1, #3
    a514:	a808      	add	r0, sp, #32
    a516:	4402      	add	r2, r0
    a518:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
	/* remember params so that set adv/scan data and adv enable
	 * interface can correctly update adv/scan data in the
	 * double buffer between caller and controller context.
	 */
	/* Set interval for Undirected or Low Duty Cycle Directed Advertising */
	if (adv_type == 0x01) {
    a51c:	42b2      	cmp	r2, r6
    a51e:	f040 8096 	bne.w	a64e <ll_adv_params_set+0x1ae>
		ll_adv.interval = 0;  				//interval = 0 for ADV_DIRECT_IND
    a522:	2200      	movs	r2, #0
    a524:	805a      	strh	r2, [r3, #2]
    a526:	2201      	movs	r2, #1
	} else {
		ll_adv.interval = interval;
	}
	ll_adv.chan_map = chan_map;  			
    a528:	7818      	ldrb	r0, [r3, #0]
    a52a:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
    a52e:	9103      	str	r1, [sp, #12]
    a530:	f364 0002 	bfi	r0, r4, #0, #3
	ll_adv.filter_policy = filter_policy;
    a534:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
    a538:	9202      	str	r2, [sp, #8]
    a53a:	f364 00c4 	bfi	r0, r4, #3, #2
    a53e:	7018      	strb	r0, [r3, #0]
	
	/* update the "current" primary adv data and Aux packet */
	radio_adv_data = radio_adv_data_get();
    a540:	f7ff fab4 	bl	9aac <radio_adv_data_get>
    a544:	4606      	mov	r6, r0
	radio_aux_adv_data = radio_aux_adv_data_get();
    a546:	f7ff fab5 	bl	9ab4 <radio_aux_adv_data_get>

	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
	aux_pdu = (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0];

	pdu->type = pdu_adv_type[adv_type];
    a54a:	9a02      	ldr	r2, [sp, #8]
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    a54c:	f896 3203 	ldrb.w	r3, [r6, #515]	; 0x203
	aux_pdu = (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0];
    a550:	f890 e203 	ldrb.w	lr, [r0, #515]	; 0x203
	pdu->type = pdu_adv_type[adv_type];
    a554:	a908      	add	r1, sp, #32
    a556:	440a      	add	r2, r1
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    a558:	eb03 2303 	add.w	r3, r3, r3, lsl #8
	pdu->type = pdu_adv_type[adv_type];
    a55c:	f812 2c08 	ldrb.w	r2, [r2, #-8]
    a560:	f816 c003 	ldrb.w	ip, [r6, r3]
	aux_pdu->type = pdu->type;
	
	pdu->rfu = 0;
	aux_pdu->rfu = pdu->rfu;

	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) && 
    a564:	9903      	ldr	r1, [sp, #12]
	pdu->type = pdu_adv_type[adv_type];
    a566:	f002 020f 	and.w	r2, r2, #15
    a56a:	f362 0c03 	bfi	ip, r2, #0, #4
    a56e:	f806 c003 	strb.w	ip, [r6, r3]
	aux_pdu = (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0];
    a572:	eb0e 2e0e 	add.w	lr, lr, lr, lsl #8
	    ll_adv.own_addr_type == BT_ADDR_LE_RANDOM_ID) {
		ll_adv.id_addr_type = direct_addr_type;
		memcpy(&ll_adv.id_addr, direct_addr, BDADDR_SIZE);
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */
	pdu->tx_addr =  own_addr_type & 0x1;
    a576:	f008 0801 	and.w	r8, r8, #1
	aux_pdu->type = pdu->type;
    a57a:	f810 c00e 	ldrb.w	ip, [r0, lr]
    a57e:	f362 0c03 	bfi	ip, r2, #0, #4
    a582:	f800 c00e 	strb.w	ip, [r0, lr]
	pdu->rfu = 0;
    a586:	5cf2      	ldrb	r2, [r6, r3]
    a588:	f36f 1204 	bfc	r2, #4, #1
    a58c:	54f2      	strb	r2, [r6, r3]
	aux_pdu->rfu = pdu->rfu;
    a58e:	f810 200e 	ldrb.w	r2, [r0, lr]
    a592:	f36f 1204 	bfc	r2, #4, #1
    a596:	f800 200e 	strb.w	r2, [r0, lr]
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) && 
    a59a:	5cf2      	ldrb	r2, [r6, r3]
    a59c:	f002 0c0f 	and.w	ip, r2, #15
    a5a0:	f1bc 0f01 	cmp.w	ip, #1
		pdu->chan_sel = 1;           // could be same for ext adv  LE Channel Selection Algorithm #2 feature 
    a5a4:	bf95      	itete	ls
    a5a6:	f042 0220 	orrls.w	r2, r2, #32
		pdu->chan_sel = 0;
    a5aa:	f36f 1245 	bfchi	r2, #5, #1
		pdu->chan_sel = 1;           // could be same for ext adv  LE Channel Selection Algorithm #2 feature 
    a5ae:	54f2      	strbls	r2, [r6, r3]
		pdu->chan_sel = 0;
    a5b0:	54f2      	strbhi	r2, [r6, r3]
		aux_pdu->chan_sel = pdu->chan_sel;
    a5b2:	bf95      	itete	ls
    a5b4:	f810 200e 	ldrbls.w	r2, [r0, lr]
		aux_pdu->chan_sel = pdu->chan_sel;
    a5b8:	f810 200e 	ldrbhi.w	r2, [r0, lr]
		aux_pdu->chan_sel = pdu->chan_sel;
    a5bc:	f042 0220 	orrls.w	r2, r2, #32
		aux_pdu->chan_sel = pdu->chan_sel;
    a5c0:	f36f 1245 	bfchi	r2, #5, #1
    a5c4:	f800 200e 	strb.w	r2, [r0, lr]
	pdu->tx_addr =  own_addr_type & 0x1;
    a5c8:	5cf2      	ldrb	r2, [r6, r3]
    a5ca:	f368 1286 	bfi	r2, r8, #6, #1
    a5ce:	54f2      	strb	r2, [r6, r3]
	aux_pdu->tx_addr = 0;						//not sending transmitting address in aux packet
    a5d0:	f810 200e 	ldrb.w	r2, [r0, lr]
    a5d4:	f36f 1286 	bfc	r2, #6, #1
    a5d8:	f800 200e 	strb.w	r2, [r0, lr]
	pdu->rx_addr = 0;  							
    a5dc:	5cf2      	ldrb	r2, [r6, r3]
    a5de:	f36f 12c7 	bfc	r2, #7, #1
    a5e2:	54f2      	strb	r2, [r6, r3]
	aux_pdu->rx_addr = pdu->rx_addr;
    a5e4:	f810 200e 	ldrb.w	r2, [r0, lr]
    a5e8:	f36f 12c7 	bfc	r2, #7, #1
    a5ec:	f800 200e 	strb.w	r2, [r0, lr]
	aux_pdu = (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0];
    a5f0:	eb00 050e 	add.w	r5, r0, lr
	if(evt_prop & BIT(2)){							// for directed ADV wuth public address
    a5f4:	f011 0004 	ands.w	r0, r1, #4
		pdu->rx_addr = 0;//direct_addr_type;
    a5f8:	bf1e      	ittt	ne
    a5fa:	5cf2      	ldrbne	r2, [r6, r3]
    a5fc:	f36f 12c7 	bfcne	r2, #7, #1
    a600:	54f2      	strbne	r2, [r6, r3]
	}

	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    a602:	5cf2      	ldrb	r2, [r6, r3]
    a604:	f002 0e0f 	and.w	lr, r2, #15
    a608:	f1be 0f01 	cmp.w	lr, #1
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    a60c:	eb06 0403 	add.w	r4, r6, r3
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    a610:	d11f      	bne.n	a652 <ll_adv_params_set+0x1b2>
		pdu->rx_addr = direct_addr_type;
    a612:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
    a616:	f361 12c7 	bfi	r2, r1, #7, #1
    a61a:	54f2      	strb	r2, [r6, r3]
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
    a61c:	9913      	ldr	r1, [sp, #76]	; 0x4c
    a61e:	2206      	movs	r2, #6
    a620:	f104 0008 	add.w	r0, r4, #8
    a624:	f7f5 fff9 	bl	61a <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
    a628:	230c      	movs	r3, #12
		/* NOTE: AdvA, filled at enable and RPA timeout */
		
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	} else if (pdu->len == 0) {
		pdu->len = BDADDR_SIZE;
    a62a:	7063      	strb	r3, [r4, #1]
    a62c:	e0c8      	b.n	a7c0 <ll_adv_params_set+0x320>
			if (((evt_prop & 0x03) == 0x03) ||
    a62e:	f001 0203 	and.w	r2, r1, #3
    a632:	2a03      	cmp	r2, #3
    a634:	f000 80f0 	beq.w	a818 <ll_adv_params_set+0x378>
    a638:	f001 020c 	and.w	r2, r1, #12
    a63c:	2a0c      	cmp	r2, #12
    a63e:	f000 80eb 	beq.w	a818 <ll_adv_params_set+0x378>
			ll_adv.phy_p = phy_p;
    a642:	781a      	ldrb	r2, [r3, #0]
    a644:	9801      	ldr	r0, [sp, #4]
    a646:	f360 1247 	bfi	r2, r0, #5, #3
    a64a:	701a      	strb	r2, [r3, #0]
			adv_type = 0x05; /* PDU_ADV_TYPE_EXT_IND */
    a64c:	2205      	movs	r2, #5
		ll_adv.interval = interval;
    a64e:	805c      	strh	r4, [r3, #2]
    a650:	e76a      	b.n	a528 <ll_adv_params_set+0x88>
	} else if (pdu->type == PDU_ADV_TYPE_EXT_IND) {
    a652:	f1be 0f07 	cmp.w	lr, #7
    a656:	f040 80d3 	bne.w	a800 <ll_adv_params_set+0x360>
		p->ext_hdr_len = 0;
    a65a:	78a2      	ldrb	r2, [r4, #2]
		p->adv_mode = 0x00;//evt_prop & 0x03;
    a65c:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    a660:	f36f 1287 	bfc	r2, #6, #2
    a664:	70a2      	strb	r2, [r4, #2]
		aux_p->ext_hdr_len = p->ext_hdr_len;
    a666:	78aa      	ldrb	r2, [r5, #2]
		aux_p->adv_mode = p->adv_mode;
    a668:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    a66c:	f36f 1287 	bfc	r2, #6, #2
    a670:	70aa      	strb	r2, [r5, #2]
		*(u8_t *)h = 0;
    a672:	2200      	movs	r2, #0
    a674:	70e2      	strb	r2, [r4, #3]
		*(u8_t *)aux_h = 0;
    a676:	70ea      	strb	r2, [r5, #3]
		if (!((evt_prop & BIT(5)) && !p->adv_mode && (phy_p != BIT(2)))) {
    a678:	068a      	lsls	r2, r1, #26
		p = (void *)&pdu->adv_ext_ind;
    a67a:	f104 0c02 	add.w	ip, r4, #2
		ptr = (u8_t *)h + sizeof(*h);
    a67e:	f104 0604 	add.w	r6, r4, #4
		aux_p = (void *)&aux_pdu->adv_ext_ind;
    a682:	f105 0e02 	add.w	lr, r5, #2
		aux_ptr = (u8_t *)aux_h + sizeof(*aux_h);
    a686:	f105 0304 	add.w	r3, r5, #4
		if (!((evt_prop & BIT(5)) && !p->adv_mode && (phy_p != BIT(2)))) {
    a68a:	d507      	bpl.n	a69c <ll_adv_params_set+0x1fc>
    a68c:	78a2      	ldrb	r2, [r4, #2]
    a68e:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    a692:	d103      	bne.n	a69c <ll_adv_params_set+0x1fc>
    a694:	9a01      	ldr	r2, [sp, #4]
    a696:	2a04      	cmp	r2, #4
    a698:	f040 80ac 	bne.w	a7f4 <ll_adv_params_set+0x354>
			h->adv_addr = 1;
    a69c:	78e2      	ldrb	r2, [r4, #3]
    a69e:	f042 0201 	orr.w	r2, r2, #1
    a6a2:	70e2      	strb	r2, [r4, #3]
			ptr += BDADDR_SIZE;
    a6a4:	f104 020a 	add.w	r2, r4, #10
		if(evt_prop & BIT(2)){
    a6a8:	b120      	cbz	r0, a6b4 <ll_adv_params_set+0x214>
			h->tgt_addr = 1;
    a6aa:	78e0      	ldrb	r0, [r4, #3]
    a6ac:	f040 0002 	orr.w	r0, r0, #2
    a6b0:	70e0      	strb	r0, [r4, #3]
			ptr += BDADDR_SIZE;
    a6b2:	3206      	adds	r2, #6
		if(evt_prop & BIT(6)){
    a6b4:	0648      	lsls	r0, r1, #25
    a6b6:	f140 809f 	bpl.w	a7f8 <ll_adv_params_set+0x358>
			h->adi = 1;
    a6ba:	78e1      	ldrb	r1, [r4, #3]
    a6bc:	f041 0108 	orr.w	r1, r1, #8
    a6c0:	70e1      	strb	r1, [r4, #3]
			aux_h->adi = h->adi;
    a6c2:	78e9      	ldrb	r1, [r5, #3]
    a6c4:	f041 0108 	orr.w	r1, r1, #8
    a6c8:	70e9      	strb	r1, [r5, #3]
			h->aux_ptr = 1;
    a6ca:	78e1      	ldrb	r1, [r4, #3]
			h->tx_pwr = 1;
    a6cc:	f041 0150 	orr.w	r1, r1, #80	; 0x50
    a6d0:	70e1      	strb	r1, [r4, #3]
			aux_h->tx_pwr = h->tx_pwr;
    a6d2:	78e9      	ldrb	r1, [r5, #3]
    a6d4:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    a6d8:	70e9      	strb	r1, [r5, #3]
			ptr += sizeof(*adi_ptr);
    a6da:	f102 0902 	add.w	r9, r2, #2
			adi_ptr = ptr;
    a6de:	4693      	mov	fp, r2
			aux_ptr ++;
    a6e0:	1de9      	adds	r1, r5, #7
			aux_adi_ptr = aux_ptr;
    a6e2:	469a      	mov	sl, r3
			ptr ++;
    a6e4:	3206      	adds	r2, #6
		len = ptr - (u8_t *)p;
    a6e6:	eba2 020c 	sub.w	r2, r2, ip
    a6ea:	b2d2      	uxtb	r2, r2
		if (len > (offsetof(struct pdu_adv_com_ext_adv,
    a6ec:	2a02      	cmp	r2, #2
			p->ext_hdr_len = (len -
    a6ee:	bf84      	itt	hi
    a6f0:	78a0      	ldrbhi	r0, [r4, #2]
    a6f2:	f102 3cff 	addhi.w	ip, r2, #4294967295	; 0xffffffff
		aux_len = aux_ptr - (u8_t *)aux_p;
    a6f6:	eba1 0e0e 	sub.w	lr, r1, lr
			pdu->len = offsetof(struct pdu_adv_com_ext_adv,
    a6fa:	bf98      	it	ls
    a6fc:	2201      	movls	r2, #1
		aux_len = aux_ptr - (u8_t *)aux_p;
    a6fe:	fa5f fe8e 	uxtb.w	lr, lr
			p->ext_hdr_len = (len -
    a702:	bf88      	it	hi
    a704:	f36c 0005 	bfihi	r0, ip, #0, #6
			pdu->len = offsetof(struct pdu_adv_com_ext_adv,
    a708:	7062      	strb	r2, [r4, #1]
			p->ext_hdr_len = (len -
    a70a:	bf88      	it	hi
    a70c:	70a0      	strbhi	r0, [r4, #2]
		if (aux_len > (offsetof(struct pdu_adv_com_ext_adv,
    a70e:	f1be 0f02 	cmp.w	lr, #2
			aux_p->ext_hdr_len = (aux_len -
    a712:	bf81      	itttt	hi
    a714:	78aa      	ldrbhi	r2, [r5, #2]
			aux_pdu->len = aux_len;
    a716:	f885 e001 	strbhi.w	lr, [r5, #1]
			aux_p->ext_hdr_len = (aux_len -
    a71a:	f10e 31ff 	addhi.w	r1, lr, #4294967295	; 0xffffffff
    a71e:	f361 0205 	bfihi	r2, r1, #0, #6
			aux_pdu->len = offsetof(struct pdu_adv_com_ext_adv,
    a722:	bf96      	itet	ls
    a724:	2201      	movls	r2, #1
			aux_p->ext_hdr_len = (aux_len -
    a726:	70aa      	strbhi	r2, [r5, #2]
			aux_pdu->len = offsetof(struct pdu_adv_com_ext_adv,
    a728:	706a      	strbls	r2, [r5, #1]
		if(h->adv_addr){
    a72a:	78e2      	ldrb	r2, [r4, #3]
    a72c:	07d1      	lsls	r1, r2, #31
			ptr += BDADDR_SIZE;
    a72e:	bf48      	it	mi
    a730:	f104 060a 	addmi.w	r6, r4, #10
		if(h->tgt_addr){
    a734:	0792      	lsls	r2, r2, #30
    a736:	d507      	bpl.n	a748 <ll_adv_params_set+0x2a8>
			memcpy(ptr, direct_addr, BDADDR_SIZE);
    a738:	4630      	mov	r0, r6
    a73a:	2206      	movs	r2, #6
    a73c:	9913      	ldr	r1, [sp, #76]	; 0x4c
    a73e:	9301      	str	r3, [sp, #4]
    a740:	f7f5 ff6b 	bl	61a <memcpy>
			ptr += BDADDR_SIZE;
    a744:	9b01      	ldr	r3, [sp, #4]
    a746:	3606      	adds	r6, #6
		if(h->adi){
    a748:	78e1      	ldrb	r1, [r4, #3]
    a74a:	070c      	lsls	r4, r1, #28
    a74c:	d518      	bpl.n	a780 <ll_adv_params_set+0x2e0>
			adi_ptr->did = 0x00;
    a74e:	f89b 3001 	ldrb.w	r3, [fp, #1]
			adi_ptr->sid = 0x03;//sid & 0x0f;
    a752:	2003      	movs	r0, #3
    a754:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
			adi_ptr->did = 0x00;
    a758:	2200      	movs	r2, #0
			adi_ptr->sid = 0x03;//sid & 0x0f;
    a75a:	f360 1307 	bfi	r3, r0, #4, #4
			adi_ptr->did = 0x00;
    a75e:	f88b 2000 	strb.w	r2, [fp]
			adi_ptr->sid = 0x03;//sid & 0x0f;
    a762:	f88b 3001 	strb.w	r3, [fp, #1]
			aux_adi_ptr->did = adi_ptr->did;
    a766:	f89a 3001 	ldrb.w	r3, [sl, #1]
    a76a:	f88a 2000 	strb.w	r2, [sl]
			aux_adi_ptr->sid = 0x02;//adi_ptr->sid;
    a76e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    a772:	2202      	movs	r2, #2
    a774:	f362 1307 	bfi	r3, r2, #4, #4
    a778:	f88a 3001 	strb.w	r3, [sl, #1]
			ptr += sizeof(*adi_ptr);
    a77c:	3602      	adds	r6, #2
			aux_ptr += sizeof(*aux_adi_ptr);
    a77e:	1dab      	adds	r3, r5, #6
		if(h->aux_ptr){
    a780:	06c8      	lsls	r0, r1, #27
    a782:	d50e      	bpl.n	a7a2 <ll_adv_params_set+0x302>
			ap->offs_units = 0;
    a784:	2203      	movs	r2, #3
    a786:	f889 2000 	strb.w	r2, [r9]
			ap->offs = 00;
    a78a:	f899 2002 	ldrb.w	r2, [r9, #2]
    a78e:	2000      	movs	r0, #0
			ap->phy = 0;
    a790:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
    a794:	f360 1247 	bfi	r2, r0, #5, #3
			ap->offs = 00;
    a798:	f889 0001 	strb.w	r0, [r9, #1]
			ap->phy = 0;
    a79c:	f889 2002 	strb.w	r2, [r9, #2]
			ptr += sizeof(*ap);
    a7a0:	3603      	adds	r6, #3
		if (h->tx_pwr) {
    a7a2:	064a      	lsls	r2, r1, #25
    a7a4:	d50a      	bpl.n	a7bc <ll_adv_params_set+0x31c>
			if (tx_pwr) {
    a7a6:	9a16      	ldr	r2, [sp, #88]	; 0x58
    a7a8:	b342      	cbz	r2, a7fc <ll_adv_params_set+0x35c>
				if (*tx_pwr != 0x7F) {
    a7aa:	7812      	ldrb	r2, [r2, #0]
    a7ac:	2a7f      	cmp	r2, #127	; 0x7f
    a7ae:	d102      	bne.n	a7b6 <ll_adv_params_set+0x316>
					*tx_pwr = _tx_pwr;
    a7b0:	9916      	ldr	r1, [sp, #88]	; 0x58
    a7b2:	2200      	movs	r2, #0
    a7b4:	700a      	strb	r2, [r1, #0]
			*ptr = _tx_pwr;
    a7b6:	7032      	strb	r2, [r6, #0]
			*aux_ptr = _tx_pwr;
    a7b8:	f803 2b01 	strb.w	r2, [r3], #1
		set_data_ptr = aux_ptr; 
    a7bc:	4a15      	ldr	r2, [pc, #84]	; (a814 <ll_adv_params_set+0x374>)
    a7be:	6013      	str	r3, [r2, #0]
	}

	/* update the current scan data */
	radio_adv_data = radio_scan_data_get();
    a7c0:	f7ff f97c 	bl	9abc <radio_scan_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    a7c4:	f890 2203 	ldrb.w	r2, [r0, #515]	; 0x203
    a7c8:	eb02 2202 	add.w	r2, r2, r2, lsl #8
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    a7cc:	2404      	movs	r4, #4
    a7ce:	5c83      	ldrb	r3, [r0, r2]
    a7d0:	f364 0303 	bfi	r3, r4, #0, #4
	pdu->rfu = 0;
	pdu->chan_sel = 0;
	pdu->tx_addr = own_addr_type & 0x1;
    a7d4:	f003 03cf 	and.w	r3, r3, #207	; 0xcf
    a7d8:	f368 1386 	bfi	r3, r8, #6, #1
	pdu->rx_addr = 0;
    a7dc:	f36f 13c7 	bfc	r3, #7, #1
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    a7e0:	1881      	adds	r1, r0, r2
	pdu->rx_addr = 0;
    a7e2:	5483      	strb	r3, [r0, r2]
	if (pdu->len == 0) {
    a7e4:	784b      	ldrb	r3, [r1, #1]
    a7e6:	b90b      	cbnz	r3, a7ec <ll_adv_params_set+0x34c>
		pdu->len = BDADDR_SIZE;
    a7e8:	2306      	movs	r3, #6
    a7ea:	704b      	strb	r3, [r1, #1]
	}

	return 0;
}
    a7ec:	4638      	mov	r0, r7
    a7ee:	b009      	add	sp, #36	; 0x24
    a7f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ptr = (u8_t *)h + sizeof(*h);
    a7f4:	4632      	mov	r2, r6
    a7f6:	e757      	b.n	a6a8 <ll_adv_params_set+0x208>
		aux_ptr = (u8_t *)aux_h + sizeof(*aux_h);
    a7f8:	4619      	mov	r1, r3
    a7fa:	e774      	b.n	a6e6 <ll_adv_params_set+0x246>
			_tx_pwr = 0;
    a7fc:	9a16      	ldr	r2, [sp, #88]	; 0x58
    a7fe:	e7da      	b.n	a7b6 <ll_adv_params_set+0x316>
	} else if (pdu->len == 0) {
    a800:	7863      	ldrb	r3, [r4, #1]
    a802:	2b00      	cmp	r3, #0
    a804:	d1dc      	bne.n	a7c0 <ll_adv_params_set+0x320>
		pdu->len = BDADDR_SIZE;
    a806:	2306      	movs	r3, #6
    a808:	e70f      	b.n	a62a <ll_adv_params_set+0x18a>
		return BT_HCI_ERR_CMD_DISALLOWED;
    a80a:	270c      	movs	r7, #12
    a80c:	e7ee      	b.n	a7ec <ll_adv_params_set+0x34c>
    a80e:	bf00      	nop
    a810:	20002674 	.word	0x20002674
    a814:	2000267c 	.word	0x2000267c
				return 0x12; /* invalid HCI cmd param */
    a818:	2712      	movs	r7, #18
    a81a:	e7e7      	b.n	a7ec <ll_adv_params_set+0x34c>

0000a81c <ll_adv_data_set>:

void ll_adv_data_set(u8_t len, u8_t const *const data)
{
    a81c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a820:	4688      	mov	r8, r1
    a822:	4606      	mov	r6, r0
	struct pdu_adv *pdu;
	u8_t last;


	/* Dont update data if directed or extended advertising. */
	radio_adv_data = radio_adv_data_get();
    a824:	f7ff f942 	bl	9aac <radio_adv_data_get>
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    a828:	f890 5203 	ldrb.w	r5, [r0, #515]	; 0x203
    a82c:	eb05 2205 	add.w	r2, r5, r5, lsl #8
	radio_adv_data = radio_adv_data_get();
    a830:	4604      	mov	r4, r0
	if(prev->type == PDU_ADV_TYPE_EXT_IND){
    a832:	f810 e002 	ldrb.w	lr, [r0, r2]
    a836:	f00e 030f 	and.w	r3, lr, #15
    a83a:	2b07      	cmp	r3, #7
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    a83c:	eb00 0102 	add.w	r1, r0, r2
	if(prev->type == PDU_ADV_TYPE_EXT_IND){
    a840:	d111      	bne.n	a866 <ll_adv_data_set+0x4a>
	
		struct radio_adv_data *radio_aux_adv_data;
		struct pdu_adv *aux_pdu;
		u8_t last;

		radio_aux_adv_data = radio_aux_adv_data_get();
    a842:	f7ff f937 	bl	9ab4 <radio_aux_adv_data_get>
		aux_pdu =  (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0]; 			//cofused about data[radio_aux_adv_data->last][0] name
    a846:	f890 4203 	ldrb.w	r4, [r0, #515]	; 0x203

		memcpy(set_data_ptr, data, len);
    a84a:	4b26      	ldr	r3, [pc, #152]	; (a8e4 <ll_adv_data_set+0xc8>)
		aux_pdu =  (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0]; 			//cofused about data[radio_aux_adv_data->last][0] name
    a84c:	eb04 2404 	add.w	r4, r4, r4, lsl #8
    a850:	4404      	add	r4, r0
		memcpy(set_data_ptr, data, len);
    a852:	4632      	mov	r2, r6
    a854:	6818      	ldr	r0, [r3, #0]
    a856:	4641      	mov	r1, r8
    a858:	f7f5 fedf 	bl	61a <memcpy>
		aux_pdu->len += len;
    a85c:	7863      	ldrb	r3, [r4, #1]
    a85e:	441e      	add	r6, r3
    a860:	7066      	strb	r6, [r4, #1]
    a862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}else{
		if ((prev->type == PDU_ADV_TYPE_DIRECT_IND)) {
    a866:	2b01      	cmp	r3, #1
    a868:	d039      	beq.n	a8de <ll_adv_data_set+0xc2>
		
		return;
		}

		/* use the last index in double buffer, */
		if (radio_adv_data->first == radio_adv_data->last) {
    a86a:	f890 3202 	ldrb.w	r3, [r0, #514]	; 0x202
    a86e:	42ab      	cmp	r3, r5
    a870:	d104      	bne.n	a87c <ll_adv_data_set+0x60>
			last = radio_adv_data->last + 1;
    a872:	3501      	adds	r5, #1
    a874:	b2ed      	uxtb	r5, r5
			if (last == DOUBLE_BUFFER_SIZE) {
				last = 0;
    a876:	2d02      	cmp	r5, #2
    a878:	bf08      	it	eq
    a87a:	2500      	moveq	r5, #0
		} else {
			last = radio_adv_data->last;
		}

		/* update adv pdu fields. */
		pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
    a87c:	eb05 2305 	add.w	r3, r5, r5, lsl #8
    a880:	18e7      	adds	r7, r4, r3
		pdu->type = prev->type;
    a882:	5ce0      	ldrb	r0, [r4, r3]
    a884:	f36e 0003 	bfi	r0, lr, #0, #4
		pdu->rfu = 0;
    a888:	f36f 1004 	bfc	r0, #4, #1
    a88c:	54e0      	strb	r0, [r4, r3]

		if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2)) {
			pdu->chan_sel = prev->chan_sel;
    a88e:	5ca0      	ldrb	r0, [r4, r2]
    a890:	f814 e003 	ldrb.w	lr, [r4, r3]
    a894:	f3c0 1040 	ubfx	r0, r0, #5, #1
    a898:	f360 1e45 	bfi	lr, r0, #5, #1
    a89c:	f804 e003 	strb.w	lr, [r4, r3]
		} else {
			pdu->chan_sel = 0;
		}

		pdu->tx_addr = prev->tx_addr;
    a8a0:	5ca0      	ldrb	r0, [r4, r2]
    a8a2:	fa5f fe8e 	uxtb.w	lr, lr
    a8a6:	f3c0 1080 	ubfx	r0, r0, #6, #1
    a8aa:	f360 1e86 	bfi	lr, r0, #6, #1
    a8ae:	f804 e003 	strb.w	lr, [r4, r3]
		pdu->rx_addr = prev->rx_addr;
    a8b2:	5ca2      	ldrb	r2, [r4, r2]
    a8b4:	fa5f f08e 	uxtb.w	r0, lr
    a8b8:	09d2      	lsrs	r2, r2, #7
    a8ba:	f362 10c7 	bfi	r0, r2, #7, #1
    a8be:	54e0      	strb	r0, [r4, r3]
		
		
		memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
    a8c0:	2206      	movs	r2, #6
    a8c2:	3102      	adds	r1, #2
    a8c4:	1cb8      	adds	r0, r7, #2
    a8c6:	f7f5 fea8 	bl	61a <memcpy>
		memcpy(&pdu->adv_ind.data[0], data, len);
    a8ca:	4632      	mov	r2, r6
    a8cc:	4641      	mov	r1, r8
    a8ce:	f107 0008 	add.w	r0, r7, #8
		pdu->len = BDADDR_SIZE + len;
    a8d2:	3606      	adds	r6, #6
		memcpy(&pdu->adv_ind.data[0], data, len);
    a8d4:	f7f5 fea1 	bl	61a <memcpy>
		pdu->len = BDADDR_SIZE + len;
    a8d8:	707e      	strb	r6, [r7, #1]
		
		/* commit the update so controller picks it. */
		radio_adv_data->last = last;
    a8da:	f884 5203 	strb.w	r5, [r4, #515]	; 0x203
    a8de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a8e2:	bf00      	nop
    a8e4:	2000267c 	.word	0x2000267c

0000a8e8 <ll_scan_data_set>:
	
//#endif	/* CONFIG_BT_CTLR_ADV_EXT */
}

void ll_scan_data_set(u8_t len, u8_t const *const data)
{
    a8e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a8ec:	4606      	mov	r6, r0
    a8ee:	460f      	mov	r7, r1
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* use the last index in double buffer, */
	radio_scan_data = radio_scan_data_get();
    a8f0:	f7ff f8e4 	bl	9abc <radio_scan_data_get>
	if (radio_scan_data->first == radio_scan_data->last) {
    a8f4:	f890 3203 	ldrb.w	r3, [r0, #515]	; 0x203
    a8f8:	f890 2202 	ldrb.w	r2, [r0, #514]	; 0x202
    a8fc:	429a      	cmp	r2, r3
	radio_scan_data = radio_scan_data_get();
    a8fe:	4604      	mov	r4, r0
	if (radio_scan_data->first == radio_scan_data->last) {
    a900:	d131      	bne.n	a966 <ll_scan_data_set+0x7e>
		last = radio_scan_data->last + 1;
    a902:	1c5d      	adds	r5, r3, #1
    a904:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
    a906:	2d02      	cmp	r5, #2
			last = 0;
    a908:	bf08      	it	eq
    a90a:	2500      	moveq	r5, #0
	}

	/* update scan pdu fields. */
	prev = (struct pdu_adv *)
	       &radio_scan_data->data[radio_scan_data->last][0];
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
    a90c:	eb05 2205 	add.w	r2, r5, r5, lsl #8
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    a910:	f04f 0e04 	mov.w	lr, #4
    a914:	5ca0      	ldrb	r0, [r4, r2]
    a916:	f36e 0003 	bfi	r0, lr, #0, #4
	pdu->rfu = 0;
	pdu->chan_sel = 0;
    a91a:	f000 00ef 	and.w	r0, r0, #239	; 0xef
    a91e:	f36f 1045 	bfc	r0, #5, #1
    a922:	54a0      	strb	r0, [r4, r2]
	prev = (struct pdu_adv *)
    a924:	eb03 2303 	add.w	r3, r3, r3, lsl #8
    a928:	18e1      	adds	r1, r4, r3
	pdu->tx_addr = prev->tx_addr;
    a92a:	5ce0      	ldrb	r0, [r4, r3]
    a92c:	5ca3      	ldrb	r3, [r4, r2]
    a92e:	f3c0 1080 	ubfx	r0, r0, #6, #1
    a932:	f360 1386 	bfi	r3, r0, #6, #1
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
    a936:	eb04 0802 	add.w	r8, r4, r2
	pdu->rx_addr = 0;
    a93a:	f36f 13c7 	bfc	r3, #7, #1
    a93e:	54a3      	strb	r3, [r4, r2]
	pdu->len = BDADDR_SIZE + len;
    a940:	1db3      	adds	r3, r6, #6
    a942:	f888 3001 	strb.w	r3, [r8, #1]
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
    a946:	2206      	movs	r2, #6
    a948:	3102      	adds	r1, #2
    a94a:	f108 0002 	add.w	r0, r8, #2
    a94e:	f7f5 fe64 	bl	61a <memcpy>
	memcpy(&pdu->scan_rsp.data[0], data, len);
    a952:	4632      	mov	r2, r6
    a954:	4639      	mov	r1, r7
    a956:	f108 0008 	add.w	r0, r8, #8
    a95a:	f7f5 fe5e 	bl	61a <memcpy>

	/* commit the update so controller picks it. */
	radio_scan_data->last = last;
    a95e:	f884 5203 	strb.w	r5, [r4, #515]	; 0x203
    a962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a966:	461d      	mov	r5, r3
    a968:	e7d0      	b.n	a90c <ll_scan_data_set+0x24>
	...

0000a96c <ll_adv_enable>:
}

u32_t ll_adv_enable(u8_t enable)
{
    a96c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct pdu_adv *pdu_scan;
	struct pdu_adv *pdu_adv;
	//struct pdu_adv *aux_pdu_adv;
	u32_t status;

	if (!enable) {
    a970:	b920      	cbnz	r0, a97c <ll_adv_enable+0x10>
	status = radio_adv_enable(ll_adv.interval, ll_adv.chan_map,
				  ll_adv.filter_policy, rl_idx);
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	return status;
}
    a972:	b003      	add	sp, #12
    a974:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		return radio_adv_disable();
    a978:	f7ff bc06 	b.w	a188 <radio_adv_disable>
	} else if (ll_adv_is_enabled()) {
    a97c:	f7ff f8a2 	bl	9ac4 <ll_adv_is_enabled>
    a980:	4607      	mov	r7, r0
    a982:	2800      	cmp	r0, #0
    a984:	d14c      	bne.n	aa20 <ll_adv_enable+0xb4>
	radio_adv_data = radio_adv_data_get();
    a986:	f7ff f891 	bl	9aac <radio_adv_data_get>
    a98a:	4680      	mov	r8, r0
	radio_scan_data = radio_scan_data_get();
    a98c:	f7ff f896 	bl	9abc <radio_scan_data_get>
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
    a990:	f898 4203 	ldrb.w	r4, [r8, #515]	; 0x203
    a994:	eb04 2404 	add.w	r4, r4, r4, lsl #8
	radio_scan_data = radio_scan_data_get();
    a998:	4605      	mov	r5, r0
	} else if (pdu_adv->type == PDU_ADV_TYPE_EXT_IND) {
    a99a:	f818 0004 	ldrb.w	r0, [r8, r4]
    a99e:	f000 030f 	and.w	r3, r0, #15
    a9a2:	2b07      	cmp	r3, #7
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
    a9a4:	eb08 0904 	add.w	r9, r8, r4
	} else if (pdu_adv->type == PDU_ADV_TYPE_EXT_IND) {
    a9a8:	d11f      	bne.n	a9ea <ll_adv_enable+0x7e>
		if (h->adv_addr) {
    a9aa:	f899 3003 	ldrb.w	r3, [r9, #3]
    a9ae:	07db      	lsls	r3, r3, #31
    a9b0:	d50a      	bpl.n	a9c8 <ll_adv_enable+0x5c>
			memcpy(ptr, ll_addr_get(pdu_adv->tx_addr, NULL),
    a9b2:	4639      	mov	r1, r7
    a9b4:	f3c0 1080 	ubfx	r0, r0, #6, #1
    a9b8:	f7f9 ffec 	bl	4994 <ll_addr_get>
    a9bc:	2206      	movs	r2, #6
    a9be:	4601      	mov	r1, r0
    a9c0:	f109 0004 	add.w	r0, r9, #4
			memcpy(&pdu_scan->scan_rsp.addr[0],
    a9c4:	f7f5 fe29 	bl	61a <memcpy>
				  ll_adv.chan_map, ll_adv.filter_policy,
    a9c8:	4b16      	ldr	r3, [pc, #88]	; (aa24 <ll_adv_enable+0xb8>)
    a9ca:	7818      	ldrb	r0, [r3, #0]
	status = radio_adv_enable(ll_adv.phy_p, ll_adv.interval,
    a9cc:	8859      	ldrh	r1, [r3, #2]
    a9ce:	791b      	ldrb	r3, [r3, #4]
    a9d0:	9301      	str	r3, [sp, #4]
    a9d2:	23ff      	movs	r3, #255	; 0xff
    a9d4:	9300      	str	r3, [sp, #0]
    a9d6:	f000 0207 	and.w	r2, r0, #7
    a9da:	f3c0 03c1 	ubfx	r3, r0, #3, #2
    a9de:	0940      	lsrs	r0, r0, #5
    a9e0:	f7ff f986 	bl	9cf0 <radio_adv_enable>
}
    a9e4:	b003      	add	sp, #12
    a9e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			       ll_addr_get(pdu_adv->tx_addr, NULL),
    a9ea:	4639      	mov	r1, r7
    a9ec:	f3c0 1080 	ubfx	r0, r0, #6, #1
			[radio_scan_data->last][0];
    a9f0:	f895 6203 	ldrb.w	r6, [r5, #515]	; 0x203
			       ll_addr_get(pdu_adv->tx_addr, NULL),
    a9f4:	f7f9 ffce 	bl	4994 <ll_addr_get>
			memcpy(&pdu_adv->adv_ind.addr[0],
    a9f8:	2206      	movs	r2, #6
    a9fa:	4601      	mov	r1, r0
    a9fc:	f109 0002 	add.w	r0, r9, #2
    aa00:	f7f5 fe0b 	bl	61a <memcpy>
			       ll_addr_get(pdu_adv->tx_addr, NULL),
    aa04:	f818 0004 	ldrb.w	r0, [r8, r4]
    aa08:	4639      	mov	r1, r7
    aa0a:	f3c0 1080 	ubfx	r0, r0, #6, #1
    aa0e:	f7f9 ffc1 	bl	4994 <ll_addr_get>
	pdu_scan = (struct pdu_adv *)&radio_scan_data->data
    aa12:	eb06 2606 	add.w	r6, r6, r6, lsl #8
    aa16:	4435      	add	r5, r6
			memcpy(&pdu_scan->scan_rsp.addr[0],
    aa18:	4601      	mov	r1, r0
    aa1a:	2206      	movs	r2, #6
    aa1c:	1ca8      	adds	r0, r5, #2
    aa1e:	e7d1      	b.n	a9c4 <ll_adv_enable+0x58>
		return 0;
    aa20:	2000      	movs	r0, #0
    aa22:	e7df      	b.n	a9e4 <ll_adv_enable+0x78>
    aa24:	20002674 	.word	0x20002674

0000aa28 <ctrl_filter_get>:
	return rl[rl_idx].wl;
}
#endif

struct ll_filter *ctrl_filter_get(bool whitelist)
{
    aa28:	b508      	push	{r3, lr}
	if (whitelist) {
		return &wl_filter;
	}
	return &rl_filter;
#else
	LL_ASSERT(whitelist);
    aa2a:	b950      	cbnz	r0, aa42 <ctrl_filter_get+0x1a>
    aa2c:	4a06      	ldr	r2, [pc, #24]	; (aa48 <ctrl_filter_get+0x20>)
    aa2e:	4907      	ldr	r1, [pc, #28]	; (aa4c <ctrl_filter_get+0x24>)
    aa30:	2003      	movs	r0, #3
    aa32:	f7f7 fbdd 	bl	21f0 <bt_log>
    aa36:	4040      	eors	r0, r0
    aa38:	f380 8811 	msr	BASEPRI, r0
    aa3c:	f04f 0004 	mov.w	r0, #4
    aa40:	df02      	svc	2
	return &wl_filter;
#endif
}
    aa42:	4803      	ldr	r0, [pc, #12]	; (aa50 <ctrl_filter_get+0x28>)
    aa44:	bd08      	pop	{r3, pc}
    aa46:	bf00      	nop
    aa48:	0000ed6e 	.word	0x0000ed6e
    aa4c:	0000ed7e 	.word	0x0000ed7e
    aa50:	20002680 	.word	0x20002680

0000aa54 <ll_wl_size_get>:

u32_t ll_wl_size_get(void)
{
	return WL_SIZE;
}
    aa54:	2008      	movs	r0, #8
    aa56:	4770      	bx	lr

0000aa58 <ll_wl_clear>:

u32_t ll_wl_clear(void)
{
    aa58:	b510      	push	{r4, lr}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    aa5a:	f7ff f83b 	bl	9ad4 <radio_adv_filter_pol_get>
    aa5e:	4604      	mov	r4, r0
    aa60:	b110      	cbz	r0, aa68 <ll_wl_clear+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
    aa62:	240c      	movs	r4, #12
	filter_clear(&wl_filter);
#endif /* CONFIG_BT_CTLR_PRIVACY */
	wl_anon = 0;

	return 0;
}
    aa64:	4620      	mov	r0, r4
    aa66:	bd10      	pop	{r4, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    aa68:	f7ff f858 	bl	9b1c <radio_scan_filter_pol_get>
    aa6c:	07c3      	lsls	r3, r0, #31
    aa6e:	d4f8      	bmi.n	aa62 <ll_wl_clear+0xa>
	filter->enable_bitmask = 0;
    aa70:	4b02      	ldr	r3, [pc, #8]	; (aa7c <ll_wl_clear+0x24>)
    aa72:	701c      	strb	r4, [r3, #0]
	filter->addr_type_bitmask = 0;
    aa74:	705c      	strb	r4, [r3, #1]
	wl_anon = 0;
    aa76:	4b02      	ldr	r3, [pc, #8]	; (aa80 <ll_wl_clear+0x28>)
    aa78:	701c      	strb	r4, [r3, #0]
	return 0;
    aa7a:	e7f3      	b.n	aa64 <ll_wl_clear+0xc>
    aa7c:	20002680 	.word	0x20002680
    aa80:	20002d6c 	.word	0x20002d6c

0000aa84 <ll_wl_add>:

u32_t ll_wl_add(bt_addr_le_t *addr)
{
    aa84:	b570      	push	{r4, r5, r6, lr}
    aa86:	4604      	mov	r4, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    aa88:	f7ff f824 	bl	9ad4 <radio_adv_filter_pol_get>
    aa8c:	4605      	mov	r5, r0
    aa8e:	b110      	cbz	r0, aa96 <ll_wl_add+0x12>
		return BT_HCI_ERR_CMD_DISALLOWED;
    aa90:	250c      	movs	r5, #12
#if defined(CONFIG_BT_CTLR_PRIVACY)
	return wl_add(addr);
#else
	return filter_add(&wl_filter, addr->type, addr->a.val);
#endif /* CONFIG_BT_CTLR_PRIVACY */
}
    aa92:	4628      	mov	r0, r5
    aa94:	bd70      	pop	{r4, r5, r6, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    aa96:	f7ff f841 	bl	9b1c <radio_scan_filter_pol_get>
    aa9a:	07c3      	lsls	r3, r0, #31
    aa9c:	d4f8      	bmi.n	aa90 <ll_wl_add+0xc>
	if (addr->type == ADDR_TYPE_ANON) {
    aa9e:	7823      	ldrb	r3, [r4, #0]
    aaa0:	2bff      	cmp	r3, #255	; 0xff
    aaa2:	d103      	bne.n	aaac <ll_wl_add+0x28>
		wl_anon = 1;
    aaa4:	4b11      	ldr	r3, [pc, #68]	; (aaec <ll_wl_add+0x68>)
    aaa6:	2201      	movs	r2, #1
    aaa8:	701a      	strb	r2, [r3, #0]
		return 0;
    aaaa:	e7f2      	b.n	aa92 <ll_wl_add+0xe>
	if (filter->enable_bitmask == 0xFF) {
    aaac:	4910      	ldr	r1, [pc, #64]	; (aaf0 <ll_wl_add+0x6c>)
    aaae:	780a      	ldrb	r2, [r1, #0]
    aab0:	2aff      	cmp	r2, #255	; 0xff
    aab2:	d018      	beq.n	aae6 <ll_wl_add+0x62>
    aab4:	4628      	mov	r0, r5
	     (filter->enable_bitmask & BIT(index));
    aab6:	fa22 f600 	lsr.w	r6, r2, r0
	for (index = 0;
    aaba:	07f6      	lsls	r6, r6, #31
    aabc:	d411      	bmi.n	aae2 <ll_wl_add+0x5e>
	filter->enable_bitmask |= BIT(index);
    aabe:	2601      	movs	r6, #1
    aac0:	4086      	lsls	r6, r0
    aac2:	4332      	orrs	r2, r6
    aac4:	700a      	strb	r2, [r1, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    aac6:	f003 0301 	and.w	r3, r3, #1
    aaca:	784a      	ldrb	r2, [r1, #1]
    aacc:	4083      	lsls	r3, r0
    aace:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    aad0:	2206      	movs	r2, #6
    aad2:	fb02 1000 	mla	r0, r2, r0, r1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    aad6:	704b      	strb	r3, [r1, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    aad8:	3002      	adds	r0, #2
    aada:	1c61      	adds	r1, r4, #1
    aadc:	f7f5 fd9d 	bl	61a <memcpy>
    aae0:	e7d7      	b.n	aa92 <ll_wl_add+0xe>
	     index++) {
    aae2:	3001      	adds	r0, #1
    aae4:	e7e7      	b.n	aab6 <ll_wl_add+0x32>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    aae6:	2507      	movs	r5, #7
    aae8:	e7d3      	b.n	aa92 <ll_wl_add+0xe>
    aaea:	bf00      	nop
    aaec:	20002d6c 	.word	0x20002d6c
    aaf0:	20002680 	.word	0x20002680

0000aaf4 <ll_wl_remove>:

u32_t ll_wl_remove(bt_addr_le_t *addr)
{
    aaf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    aaf8:	4607      	mov	r7, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    aafa:	f7fe ffeb 	bl	9ad4 <radio_adv_filter_pol_get>
    aafe:	4606      	mov	r6, r0
    ab00:	b118      	cbz	r0, ab0a <ll_wl_remove+0x16>
		return BT_HCI_ERR_CMD_DISALLOWED;
    ab02:	260c      	movs	r6, #12
#if defined(CONFIG_BT_CTLR_PRIVACY)
	return wl_remove(addr);
#else
	return filter_remove(&wl_filter, addr->type, addr->a.val);
#endif /* CONFIG_BT_CTLR_PRIVACY */
}
    ab04:	4630      	mov	r0, r6
    ab06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    ab0a:	f7ff f807 	bl	9b1c <radio_scan_filter_pol_get>
    ab0e:	07c1      	lsls	r1, r0, #31
    ab10:	d4f7      	bmi.n	ab02 <ll_wl_remove+0xe>
	if (addr->type == ADDR_TYPE_ANON) {
    ab12:	f897 8000 	ldrb.w	r8, [r7]
    ab16:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    ab1a:	d102      	bne.n	ab22 <ll_wl_remove+0x2e>
		wl_anon = 0;
    ab1c:	4b16      	ldr	r3, [pc, #88]	; (ab78 <ll_wl_remove+0x84>)
    ab1e:	701e      	strb	r6, [r3, #0]
		return 0;
    ab20:	e7f0      	b.n	ab04 <ll_wl_remove+0x10>
	if (!filter->enable_bitmask) {
    ab22:	4c16      	ldr	r4, [pc, #88]	; (ab7c <ll_wl_remove+0x88>)
    ab24:	7823      	ldrb	r3, [r4, #0]
    ab26:	b133      	cbz	r3, ab36 <ll_wl_remove+0x42>
    ab28:	2508      	movs	r5, #8
	return filter_remove(&wl_filter, addr->type, addr->a.val);
    ab2a:	3701      	adds	r7, #1
		    !memcmp(filter->bdaddr[index], bdaddr, BDADDR_SIZE)) {
    ab2c:	f04f 0906 	mov.w	r9, #6
	while (index--) {
    ab30:	f115 35ff 	adds.w	r5, r5, #4294967295	; 0xffffffff
    ab34:	d201      	bcs.n	ab3a <ll_wl_remove+0x46>
		return BT_HCI_ERR_INVALID_PARAM;
    ab36:	2612      	movs	r6, #18
    ab38:	e7e4      	b.n	ab04 <ll_wl_remove+0x10>
		if ((filter->enable_bitmask & BIT(index)) &&
    ab3a:	7823      	ldrb	r3, [r4, #0]
    ab3c:	40eb      	lsrs	r3, r5
    ab3e:	07da      	lsls	r2, r3, #31
    ab40:	d5f6      	bpl.n	ab30 <ll_wl_remove+0x3c>
		    (((filter->addr_type_bitmask >> index) & 0x01) ==
    ab42:	7863      	ldrb	r3, [r4, #1]
    ab44:	412b      	asrs	r3, r5
    ab46:	ea83 0308 	eor.w	r3, r3, r8
		if ((filter->enable_bitmask & BIT(index)) &&
    ab4a:	07db      	lsls	r3, r3, #31
    ab4c:	d4f0      	bmi.n	ab30 <ll_wl_remove+0x3c>
		    !memcmp(filter->bdaddr[index], bdaddr, BDADDR_SIZE)) {
    ab4e:	fb09 4005 	mla	r0, r9, r5, r4
    ab52:	2206      	movs	r2, #6
    ab54:	4639      	mov	r1, r7
    ab56:	3002      	adds	r0, #2
    ab58:	f7f5 fd4a 	bl	5f0 <memcmp>
		     (addr_type & 0x01)) &&
    ab5c:	2800      	cmp	r0, #0
    ab5e:	d1e7      	bne.n	ab30 <ll_wl_remove+0x3c>
			filter->enable_bitmask &= ~BIT(index);
    ab60:	2301      	movs	r3, #1
    ab62:	40ab      	lsls	r3, r5
    ab64:	7822      	ldrb	r2, [r4, #0]
    ab66:	43db      	mvns	r3, r3
    ab68:	b2db      	uxtb	r3, r3
    ab6a:	401a      	ands	r2, r3
    ab6c:	7022      	strb	r2, [r4, #0]
			filter->addr_type_bitmask &= ~BIT(index);
    ab6e:	7862      	ldrb	r2, [r4, #1]
    ab70:	4013      	ands	r3, r2
    ab72:	7063      	strb	r3, [r4, #1]
    ab74:	e7c6      	b.n	ab04 <ll_wl_remove+0x10>
    ab76:	bf00      	nop
    ab78:	20002d6c 	.word	0x20002d6c
    ab7c:	20002680 	.word	0x20002680

0000ab80 <ll_filter_reset>:

#endif /* CONFIG_BT_CTLR_PRIVACY */

void ll_filter_reset(bool init)
{
	wl_anon = 0;
    ab80:	4a03      	ldr	r2, [pc, #12]	; (ab90 <ll_filter_reset+0x10>)
    ab82:	2300      	movs	r3, #0
    ab84:	7013      	strb	r3, [r2, #0]
	filter->enable_bitmask = 0;
    ab86:	4a03      	ldr	r2, [pc, #12]	; (ab94 <ll_filter_reset+0x14>)
    ab88:	7013      	strb	r3, [r2, #0]
	filter->addr_type_bitmask = 0;
    ab8a:	7053      	strb	r3, [r2, #1]
    ab8c:	4770      	bx	lr
    ab8e:	bf00      	nop
    ab90:	20002d6c 	.word	0x20002d6c
    ab94:	20002680 	.word	0x20002680

0000ab98 <cntr_init>:

static u8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
    ab98:	4b05      	ldr	r3, [pc, #20]	; (abb0 <cntr_init+0x18>)
    ab9a:	2200      	movs	r2, #0
    ab9c:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	NRF_RTC->EVTENSET = (RTC_EVTENSET_COMPARE0_Msk |
    aba0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    aba4:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
			     RTC_EVTENSET_COMPARE1_Msk);
	NRF_RTC->INTENSET = (RTC_INTENSET_COMPARE0_Msk |
    aba8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    abac:	4770      	bx	lr
    abae:	bf00      	nop
    abb0:	4000b000 	.word	0x4000b000

0000abb4 <cntr_start>:
#endif
}

u32_t cntr_start(void)
{
	if (_refcount++) {
    abb4:	4a04      	ldr	r2, [pc, #16]	; (abc8 <cntr_start+0x14>)
    abb6:	7813      	ldrb	r3, [r2, #0]
    abb8:	1c59      	adds	r1, r3, #1
    abba:	7011      	strb	r1, [r2, #0]
    abbc:	2001      	movs	r0, #1
    abbe:	b913      	cbnz	r3, abc6 <cntr_start+0x12>
		return 1;
	}

	NRF_RTC->TASKS_START = 1;
    abc0:	4a02      	ldr	r2, [pc, #8]	; (abcc <cntr_start+0x18>)
    abc2:	6010      	str	r0, [r2, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
    abc4:	4618      	mov	r0, r3
}
    abc6:	4770      	bx	lr
    abc8:	200026b2 	.word	0x200026b2
    abcc:	4000b000 	.word	0x4000b000

0000abd0 <cntr_stop>:

u32_t cntr_stop(void)
{
    abd0:	b508      	push	{r3, lr}
	LL_ASSERT(_refcount);
    abd2:	4b0c      	ldr	r3, [pc, #48]	; (ac04 <cntr_stop+0x34>)
    abd4:	7818      	ldrb	r0, [r3, #0]
    abd6:	b950      	cbnz	r0, abee <cntr_stop+0x1e>
    abd8:	4a0b      	ldr	r2, [pc, #44]	; (ac08 <cntr_stop+0x38>)
    abda:	490c      	ldr	r1, [pc, #48]	; (ac0c <cntr_stop+0x3c>)
    abdc:	2003      	movs	r0, #3
    abde:	f7f7 fb07 	bl	21f0 <bt_log>
    abe2:	4040      	eors	r0, r0
    abe4:	f380 8811 	msr	BASEPRI, r0
    abe8:	f04f 0004 	mov.w	r0, #4
    abec:	df02      	svc	2

	if (--_refcount) {
    abee:	3801      	subs	r0, #1
    abf0:	b2c0      	uxtb	r0, r0
    abf2:	7018      	strb	r0, [r3, #0]
    abf4:	2301      	movs	r3, #1
    abf6:	b910      	cbnz	r0, abfe <cntr_stop+0x2e>
		return 1;
	}

	NRF_RTC->TASKS_STOP = 1;
    abf8:	4a05      	ldr	r2, [pc, #20]	; (ac10 <cntr_stop+0x40>)
    abfa:	6053      	str	r3, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
    abfc:	bd08      	pop	{r3, pc}
		return 1;
    abfe:	4618      	mov	r0, r3
}
    ac00:	bd08      	pop	{r3, pc}
    ac02:	bf00      	nop
    ac04:	200026b2 	.word	0x200026b2
    ac08:	0000ed9d 	.word	0x0000ed9d
    ac0c:	0000eda7 	.word	0x0000eda7
    ac10:	4000b000 	.word	0x4000b000

0000ac14 <cntr_cnt_get>:

u32_t cntr_cnt_get(void)
{
	return NRF_RTC->COUNTER;
    ac14:	4b01      	ldr	r3, [pc, #4]	; (ac1c <cntr_cnt_get+0x8>)
    ac16:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
}
    ac1a:	4770      	bx	lr
    ac1c:	4000b000 	.word	0x4000b000

0000ac20 <cntr_cmp_set>:

void cntr_cmp_set(u8_t cmp, u32_t value)
{
	NRF_RTC->CC[cmp] = value;
    ac20:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    ac24:	4b01      	ldr	r3, [pc, #4]	; (ac2c <cntr_cmp_set+0xc>)
    ac26:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
    ac2a:	4770      	bx	lr
    ac2c:	4000b000 	.word	0x4000b000

0000ac30 <do_ecb>:
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
	do {
		NRF_ECB->TASKS_STOPECB = 1;
    ac30:	4b11      	ldr	r3, [pc, #68]	; (ac78 <do_ecb+0x48>)
{
    ac32:	b570      	push	{r4, r5, r6, lr}
		NRF_ECB->TASKS_STOPECB = 1;
    ac34:	2101      	movs	r1, #1
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
    ac36:	2500      	movs	r5, #0
    ac38:	461a      	mov	r2, r3
		NRF_ECB->TASKS_STOPECB = 1;
    ac3a:	6059      	str	r1, [r3, #4]
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
    ac3c:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
    ac40:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
    ac44:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
		NRF_ECB->TASKS_STARTECB = 1;
    ac48:	6019      	str	r1, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
		NRF_ECB_regw_sideeffects_TASKS_STARTECB();
#endif
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    ac4a:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
    ac4e:	b934      	cbnz	r4, ac5e <do_ecb+0x2e>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    ac50:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    ac54:	b91c      	cbnz	r4, ac5e <do_ecb+0x2e>
		       (NRF_ECB->ECBDATAPTR != 0)) {
    ac56:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    ac5a:	2c00      	cmp	r4, #0
    ac5c:	d1f5      	bne.n	ac4a <do_ecb+0x1a>
			__WFE();
#else
			/*__WFE();*/
#endif
		}
		NRF_ECB->TASKS_STOPECB = 1;
    ac5e:	6051      	str	r1, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
#endif
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
    ac60:	f8d2 4104 	ldr.w	r4, [r2, #260]	; 0x104
    ac64:	2c00      	cmp	r4, #0
    ac66:	d1e8      	bne.n	ac3a <do_ecb+0xa>
    ac68:	f8d2 6504 	ldr.w	r6, [r2, #1284]	; 0x504
    ac6c:	2e00      	cmp	r6, #0
    ac6e:	d0e4      	beq.n	ac3a <do_ecb+0xa>

	NRF_ECB->ECBDATAPTR = 0;
    ac70:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
    ac74:	bd70      	pop	{r4, r5, r6, pc}
    ac76:	bf00      	nop
    ac78:	4000e000 	.word	0x4000e000

0000ac7c <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
    ac7c:	b570      	push	{r4, r5, r6, lr}
    ac7e:	b08c      	sub	sp, #48	; 0x30
    ac80:	460e      	mov	r6, r1
    ac82:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    ac84:	4601      	mov	r1, r0
    ac86:	2210      	movs	r2, #16
    ac88:	4668      	mov	r0, sp
{
    ac8a:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    ac8c:	f7f8 fed8 	bl	3a40 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
    ac90:	2210      	movs	r2, #16
    ac92:	eb0d 0002 	add.w	r0, sp, r2
    ac96:	4631      	mov	r1, r6
    ac98:	f7f8 fed2 	bl	3a40 <mem_rcopy>

	do_ecb(&ecb);
    ac9c:	4668      	mov	r0, sp
    ac9e:	f7ff ffc7 	bl	ac30 <do_ecb>

	if (cipher_text_le) {
    aca2:	b125      	cbz	r5, acae <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
    aca4:	2210      	movs	r2, #16
    aca6:	a908      	add	r1, sp, #32
    aca8:	4628      	mov	r0, r5
    acaa:	f7f8 fec9 	bl	3a40 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
    acae:	b124      	cbz	r4, acba <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
    acb0:	2210      	movs	r2, #16
    acb2:	a908      	add	r1, sp, #32
    acb4:	4620      	mov	r0, r4
    acb6:	f7f5 fcb0 	bl	61a <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
    acba:	b00c      	add	sp, #48	; 0x30
    acbc:	bd70      	pop	{r4, r5, r6, pc}
	...

0000acc0 <hal_radio_enable_on_tick_ppi_config_and_enable>:
#define HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX \
	((u32_t)&(NRF_RADIO->TASKS_RXEN))

static inline void hal_radio_enable_on_tick_ppi_config_and_enable(u8_t trx)
{
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_EVT =
    acc0:	4b07      	ldr	r3, [pc, #28]	; (ace0 <hal_radio_enable_on_tick_ppi_config_and_enable+0x20>)
    acc2:	4a08      	ldr	r2, [pc, #32]	; (ace4 <hal_radio_enable_on_tick_ppi_config_and_enable+0x24>)
    acc4:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
		HAL_RADIO_ENABLE_ON_TICK_PPI_EVT;
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
		(trx) ? HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_TX :
    acc8:	4907      	ldr	r1, [pc, #28]	; (ace8 <hal_radio_enable_on_tick_ppi_config_and_enable+0x28>)
    acca:	4a08      	ldr	r2, [pc, #32]	; (acec <hal_radio_enable_on_tick_ppi_config_and_enable+0x2c>)
    accc:	2800      	cmp	r0, #0
    acce:	bf14      	ite	ne
    acd0:	4610      	movne	r0, r2
    acd2:	4608      	moveq	r0, r1
			HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX;
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
    acd4:	2201      	movs	r2, #1
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
    acd6:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
    acda:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    acde:	4770      	bx	lr
    ace0:	4001f000 	.word	0x4001f000
    ace4:	40008140 	.word	0x40008140
    ace8:	40001004 	.word	0x40001004
    acec:	40001000 	.word	0x40001000

0000acf0 <sw_switch.isra.9>:
}

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
static u8_t sw_tifs_toggle;

static void sw_switch(u8_t dir, u8_t phy_curr, u8_t flags_curr, u8_t phy_next,
    acf0:	b5f0      	push	{r4, r5, r6, r7, lr}
		      u8_t flags_next)
{
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
    acf2:	4e2c      	ldr	r6, [pc, #176]	; (ada4 <sw_switch.isra.9+0xb4>)
	u8_t cc = SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle);
	u32_t delay;

	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_EVT =
    acf4:	4f2c      	ldr	r7, [pc, #176]	; (ada8 <sw_switch.isra.9+0xb8>)
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
    acf6:	7835      	ldrb	r5, [r6, #0]
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_EVT =
    acf8:	4b2c      	ldr	r3, [pc, #176]	; (adac <sw_switch.isra.9+0xbc>)
    acfa:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_EVT;
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_TASK =
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(sw_tifs_toggle);
    acfe:	b22b      	sxth	r3, r5
    ad00:	00dc      	lsls	r4, r3, #3
    ad02:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    ad06:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_TASK =
    ad0a:	f8c7 4564 	str.w	r4, [r7, #1380]	; 0x564
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
    ad0e:	f105 040b 	add.w	r4, r5, #11
    ad12:	b2e4      	uxtb	r4, r4
    ad14:	00e4      	lsls	r4, r4, #3

	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi) =
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(cc);
    ad16:	f5a7 37af 	sub.w	r7, r7, #89600	; 0x15e00
    ad1a:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    ad1e:	3fc0      	subs	r7, #192	; 0xc0
    ad20:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
    ad24:	eb07 0783 	add.w	r7, r7, r3, lsl #2
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi) =
    ad28:	f8c4 7510 	str.w	r7, [r4, #1296]	; 0x510

	if (dir) {
    ad2c:	2800      	cmp	r0, #0
    ad2e:	d034      	beq.n	ad9a <sw_switch.isra.9+0xaa>
static inline u32_t hal_radio_tx_ready_delay_ns_get(u8_t phy, u8_t flags)
{
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_1M_NS;
    ad30:	f649 77c4 	movw	r7, #40900	; 0x9fc4
    ad34:	f649 4040 	movw	r0, #40000	; 0x9c40
    ad38:	2a02      	cmp	r2, #2
    ad3a:	bf0c      	ite	eq
    ad3c:	4602      	moveq	r2, r0
    ad3e:	463a      	movne	r2, r7
static inline u32_t hal_radio_rx_chain_delay_ns_get(u8_t phy, u8_t flags)
{
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_NS;
    ad40:	f242 47b8 	movw	r7, #9400	; 0x24b8
    ad44:	f241 3088 	movw	r0, #5000	; 0x1388
    ad48:	2902      	cmp	r1, #2
    ad4a:	bf18      	it	ne
    ad4c:	4638      	movne	r0, r7
		/* TX */

		/* Calculate delay with respect to current (RX) and next
		 * (TX) PHY. If RX PHY is LE Coded, assume S8 coding scheme.
		 */
		delay = HAL_RADIO_NS2US_ROUND(
    ad4e:	f502 71fa 	add.w	r1, r2, #500	; 0x1f4
    ad52:	4401      	add	r1, r0
    ad54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ad58:	fbb1 f1f2 	udiv	r1, r1, r2
	((u32_t)&(NRF_RADIO->TASKS_RXEN))


static inline void hal_radio_txen_on_sw_switch(u8_t ppi)
{
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi) =
    ad5c:	4a14      	ldr	r2, [pc, #80]	; (adb0 <sw_switch.isra.9+0xc0>)
    ad5e:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    ad62:	009b      	lsls	r3, r3, #2
    ad64:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    ad68:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay <
		SW_SWITCH_TIMER->CC[cc]) {
    ad6c:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
	if (delay <
    ad70:	428a      	cmp	r2, r1
		SW_SWITCH_TIMER->CC[cc] -= delay;
    ad72:	bf8b      	itete	hi
    ad74:	f8d3 2540 	ldrhi.w	r2, [r3, #1344]	; 0x540
	} else {
		SW_SWITCH_TIMER->CC[cc] = 1;
    ad78:	2201      	movls	r2, #1
		SW_SWITCH_TIMER->CC[cc] -= delay;
    ad7a:	1a51      	subhi	r1, r2, r1
		SW_SWITCH_TIMER->CC[cc] = 1;
    ad7c:	f8c3 2540 	strls.w	r2, [r3, #1344]	; 0x540
		SW_SWITCH_TIMER->CC[cc] -= delay;
    ad80:	bf88      	it	hi
    ad82:	f8c3 1540 	strhi.w	r1, [r3, #1344]	; 0x540
	}

	NRF_PPI->CHENSET =
    ad86:	4b08      	ldr	r3, [pc, #32]	; (ada8 <sw_switch.isra.9+0xb8>)
    ad88:	f44f 6290 	mov.w	r2, #1152	; 0x480
    ad8c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	 * always need to capture the PDU END time-stamp.
	 */
	radio_tmr_end_capture();
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	sw_tifs_toggle += 1;
    ad90:	1c6b      	adds	r3, r5, #1
	sw_tifs_toggle &= 1;
    ad92:	f003 0301 	and.w	r3, r3, #1
    ad96:	7033      	strb	r3, [r6, #0]
    ad98:	bdf0      	pop	{r4, r5, r6, r7, pc}
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_TASK_TX;
}

static inline void hal_radio_rxen_on_sw_switch(u8_t ppi)
{
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi) =
    ad9a:	4a06      	ldr	r2, [pc, #24]	; (adb4 <sw_switch.isra.9+0xc4>)
    ad9c:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
		delay = HAL_RADIO_NS2US_CEIL(
    ada0:	212c      	movs	r1, #44	; 0x2c
    ada2:	e7de      	b.n	ad62 <sw_switch.isra.9+0x72>
    ada4:	200028d0 	.word	0x200028d0
    ada8:	4001f000 	.word	0x4001f000
    adac:	4000110c 	.word	0x4000110c
    adb0:	40001000 	.word	0x40001000
    adb4:	40001004 	.word	0x40001004

0000adb8 <isr_radio>:
	if (sfp_radio_isr) {
    adb8:	4b02      	ldr	r3, [pc, #8]	; (adc4 <isr_radio+0xc>)
    adba:	681b      	ldr	r3, [r3, #0]
    adbc:	b103      	cbz	r3, adc0 <isr_radio+0x8>
		sfp_radio_isr();
    adbe:	4718      	bx	r3
    adc0:	4770      	bx	lr
    adc2:	bf00      	nop
    adc4:	200028cc 	.word	0x200028cc

0000adc8 <radio_isr_set>:
	sfp_radio_isr = fp_radio_isr;	/* atomic assignment of 32-bit word */
    adc8:	4b06      	ldr	r3, [pc, #24]	; (ade4 <radio_isr_set+0x1c>)
    adca:	6018      	str	r0, [r3, #0]
	NRF_RADIO->INTENSET = (0 |
    adcc:	4b06      	ldr	r3, [pc, #24]	; (ade8 <radio_isr_set+0x20>)
    adce:	2210      	movs	r2, #16
    add0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    add4:	4b05      	ldr	r3, [pc, #20]	; (adec <radio_isr_set+0x24>)
    add6:	2202      	movs	r2, #2
    add8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
    addc:	2001      	movs	r0, #1
    adde:	f7f5 bf3f 	b.w	c60 <_arch_irq_enable>
    ade2:	bf00      	nop
    ade4:	200028cc 	.word	0x200028cc
    ade8:	40001000 	.word	0x40001000
    adec:	e000e100 	.word	0xe000e100

0000adf0 <radio_setup>:
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
    adf0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    adf4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
    adf8:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
    adfa:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
    adfe:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
    ae02:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
    ae06:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
    ae0a:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
    ae0e:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
    ae12:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
    ae16:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
    ae1a:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
    ae1e:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
    ae22:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
    ae26:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
    ae2a:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
    ae2e:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
    ae32:	4770      	bx	lr

0000ae34 <radio_reset>:
{
    ae34:	b508      	push	{r3, lr}
	irq_disable(RADIO_IRQn);
    ae36:	2001      	movs	r0, #1
    ae38:	f7f5 ff22 	bl	c80 <_arch_irq_disable>
	NRF_RADIO->POWER =
    ae3c:	4b08      	ldr	r3, [pc, #32]	; (ae60 <radio_reset+0x2c>)
    ae3e:	2200      	movs	r2, #0
    ae40:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	NRF_RADIO->POWER =
    ae44:	2201      	movs	r2, #1
    ae46:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
    ae4a:	4a06      	ldr	r2, [pc, #24]	; (ae64 <radio_reset+0x30>)
    ae4c:	6813      	ldr	r3, [r2, #0]
					 0xfffffffe) | 0x01000000;
    ae4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    ae52:	f023 0301 	bic.w	r3, r3, #1
    ae56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
    ae5a:	6013      	str	r3, [r2, #0]
    ae5c:	bd08      	pop	{r3, pc}
    ae5e:	bf00      	nop
    ae60:	40001000 	.word	0x40001000
    ae64:	40001774 	.word	0x40001774

0000ae68 <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
    ae68:	4b06      	ldr	r3, [pc, #24]	; (ae84 <radio_phy_set+0x1c>)
	switch (phy) {
    ae6a:	2802      	cmp	r0, #2
		mode = RADIO_MODE_MODE_Ble_1Mbit;
    ae6c:	bf0c      	ite	eq
    ae6e:	2204      	moveq	r2, #4
    ae70:	2203      	movne	r2, #3
    ae72:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
    ae76:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
    ae7a:	f042 0201 	orr.w	r2, r2, #1
    ae7e:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
    ae82:	4770      	bx	lr
    ae84:	40001000 	.word	0x40001000

0000ae88 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = power;
    ae88:	4b01      	ldr	r3, [pc, #4]	; (ae90 <radio_tx_power_set+0x8>)
    ae8a:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    ae8e:	4770      	bx	lr
    ae90:	40001000 	.word	0x40001000

0000ae94 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
    ae94:	4b01      	ldr	r3, [pc, #4]	; (ae9c <radio_freq_chan_set+0x8>)
    ae96:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    ae9a:	4770      	bx	lr
    ae9c:	40001000 	.word	0x40001000

0000aea0 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
    aea0:	4b07      	ldr	r3, [pc, #28]	; (aec0 <radio_whiten_iv_set+0x20>)
    aea2:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
    aea6:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
    aeaa:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
    aeae:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
    aeb2:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
    aeb6:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
    aeba:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    aebe:	4770      	bx	lr
    aec0:	40001000 	.word	0x40001000

0000aec4 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
    aec4:	4a0a      	ldr	r2, [pc, #40]	; (aef0 <radio_aa_set+0x2c>)
    aec6:	2300      	movs	r3, #0
    aec8:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
    aecc:	2301      	movs	r3, #1
    aece:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
    aed2:	78c3      	ldrb	r3, [r0, #3]
    aed4:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
    aed8:	7843      	ldrb	r3, [r0, #1]
    aeda:	7881      	ldrb	r1, [r0, #2]
    aedc:	041b      	lsls	r3, r3, #16
    aede:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    aee2:	7801      	ldrb	r1, [r0, #0]
    aee4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    aee8:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
    aeec:	4770      	bx	lr
    aeee:	bf00      	nop
    aef0:	40001000 	.word	0x40001000

0000aef4 <radio_pkt_configure>:
	switch (phy) {
    aef4:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
    aef8:	2b02      	cmp	r3, #2
{
    aefa:	b510      	push	{r4, lr}
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
    aefc:	bf0c      	ite	eq
    aefe:	f04f 7480 	moveq.w	r4, #16777216	; 0x1000000
    af02:	2400      	movne	r4, #0
	if (dc) {
    af04:	07d3      	lsls	r3, r2, #31
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
    af06:	f1c0 0308 	rsb	r3, r0, #8
    af0a:	ea4f 4303 	mov.w	r3, r3, lsl #16
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
    af0e:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
    af12:	f440 7080 	orr.w	r0, r0, #256	; 0x100
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
    af16:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
    af1a:	4a0b      	ldr	r2, [pc, #44]	; (af48 <radio_pkt_configure+0x54>)
			    RADIO_PCNF0_S1LEN_Msk) |
    af1c:	ea43 0300 	orr.w	r3, r3, r0
		extra |= (RADIO_PCNF0_S1INCL_Include <<
    af20:	bf48      	it	mi
    af22:	f444 1480 	orrmi.w	r4, r4, #1048576	; 0x100000
			    RADIO_PCNF0_S1LEN_Msk) |
    af26:	4323      	orrs	r3, r4
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
    af28:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
    af2c:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
    af30:	4b06      	ldr	r3, [pc, #24]	; (af4c <radio_pkt_configure+0x58>)
    af32:	4003      	ands	r3, r0
    af34:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((u32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
    af38:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
    af3c:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    af40:	4319      	orrs	r1, r3
    af42:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
    af46:	bd10      	pop	{r4, pc}
    af48:	40001000 	.word	0x40001000
    af4c:	fef80000 	.word	0xfef80000

0000af50 <radio_pkt_rx_set>:
    af50:	4b01      	ldr	r3, [pc, #4]	; (af58 <radio_pkt_rx_set+0x8>)
    af52:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    af56:	4770      	bx	lr
    af58:	40001000 	.word	0x40001000

0000af5c <radio_pkt_tx_set>:
	NRF_RADIO->PACKETPTR = (u32_t)tx_packet;
    af5c:	4b01      	ldr	r3, [pc, #4]	; (af64 <radio_pkt_tx_set+0x8>)
    af5e:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    af62:	4770      	bx	lr
    af64:	40001000 	.word	0x40001000

0000af68 <radio_tx_ready_delay_get>:
	switch (phy) {
    af68:	2802      	cmp	r0, #2
}
    af6a:	bf0c      	ite	eq
    af6c:	2028      	moveq	r0, #40	; 0x28
    af6e:	2029      	movne	r0, #41	; 0x29
    af70:	4770      	bx	lr

0000af72 <radio_tx_chain_delay_get>:
}
    af72:	2001      	movs	r0, #1
    af74:	4770      	bx	lr

0000af76 <radio_rx_ready_delay_get>:
}
    af76:	2029      	movs	r0, #41	; 0x29
    af78:	4770      	bx	lr

0000af7a <radio_rx_chain_delay_get>:
	switch (phy) {
    af7a:	2802      	cmp	r0, #2
}
    af7c:	bf0c      	ite	eq
    af7e:	2005      	moveq	r0, #5
    af80:	200a      	movne	r0, #10
    af82:	4770      	bx	lr

0000af84 <radio_rx_enable>:
	NRF_RADIO->TASKS_RXEN = 1;
    af84:	4b01      	ldr	r3, [pc, #4]	; (af8c <radio_rx_enable+0x8>)
    af86:	2201      	movs	r2, #1
    af88:	605a      	str	r2, [r3, #4]
    af8a:	4770      	bx	lr
    af8c:	40001000 	.word	0x40001000

0000af90 <radio_tx_enable>:
	NRF_RADIO->TASKS_TXEN = 1;
    af90:	4b01      	ldr	r3, [pc, #4]	; (af98 <radio_tx_enable+0x8>)
    af92:	2201      	movs	r2, #1
    af94:	601a      	str	r2, [r3, #0]
    af96:	4770      	bx	lr
    af98:	40001000 	.word	0x40001000

0000af9c <radio_disable>:
	NRF_PPI->CHENCLR = HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
    af9c:	4a07      	ldr	r2, [pc, #28]	; (afbc <radio_disable+0x20>)
    af9e:	f44f 6390 	mov.w	r3, #1152	; 0x480
    afa2:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	NRF_PPI->TASKS_CHG[SW_SWITCH_TIMER_TASK_GROUP(0)].DIS = 1;
    afa6:	2301      	movs	r3, #1
    afa8:	6053      	str	r3, [r2, #4]
	NRF_PPI->TASKS_CHG[SW_SWITCH_TIMER_TASK_GROUP(1)].DIS = 1;
    afaa:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
    afac:	f5a2 32f0 	sub.w	r2, r2, #122880	; 0x1e000
    afb0:	2100      	movs	r1, #0
    afb2:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
	NRF_RADIO->TASKS_DISABLE = 1;
    afb6:	6113      	str	r3, [r2, #16]
    afb8:	4770      	bx	lr
    afba:	bf00      	nop
    afbc:	4001f000 	.word	0x4001f000

0000afc0 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
    afc0:	4b04      	ldr	r3, [pc, #16]	; (afd4 <radio_status_reset+0x14>)
    afc2:	2200      	movs	r2, #0
    afc4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
    afc8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
    afcc:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    afd0:	4770      	bx	lr
    afd2:	bf00      	nop
    afd4:	40001000 	.word	0x40001000

0000afd8 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
    afd8:	4b03      	ldr	r3, [pc, #12]	; (afe8 <radio_is_ready+0x10>)
    afda:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
    afde:	3000      	adds	r0, #0
    afe0:	bf18      	it	ne
    afe2:	2001      	movne	r0, #1
    afe4:	4770      	bx	lr
    afe6:	bf00      	nop
    afe8:	40001000 	.word	0x40001000

0000afec <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
    afec:	4b03      	ldr	r3, [pc, #12]	; (affc <radio_is_done+0x10>)
    afee:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
    aff2:	3000      	adds	r0, #0
    aff4:	bf18      	it	ne
    aff6:	2001      	movne	r0, #1
    aff8:	4770      	bx	lr
    affa:	bf00      	nop
    affc:	40001000 	.word	0x40001000

0000b000 <radio_is_idle>:
	return (NRF_RADIO->STATE == 0);
    b000:	4b03      	ldr	r3, [pc, #12]	; (b010 <radio_is_idle+0x10>)
    b002:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
    b006:	fab0 f080 	clz	r0, r0
    b00a:	0940      	lsrs	r0, r0, #5
    b00c:	4770      	bx	lr
    b00e:	bf00      	nop
    b010:	40001000 	.word	0x40001000

0000b014 <radio_crc_configure>:
	NRF_RADIO->CRCCNF =
    b014:	4b04      	ldr	r3, [pc, #16]	; (b028 <radio_crc_configure+0x14>)
    b016:	f240 1203 	movw	r2, #259	; 0x103
    b01a:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_RADIO->CRCPOLY = polynomial;
    b01e:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
    b022:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
    b026:	4770      	bx	lr
    b028:	40001000 	.word	0x40001000

0000b02c <radio_crc_is_valid>:
	return (NRF_RADIO->CRCSTATUS != 0);
    b02c:	4b03      	ldr	r3, [pc, #12]	; (b03c <radio_crc_is_valid+0x10>)
    b02e:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    b032:	3000      	adds	r0, #0
    b034:	bf18      	it	ne
    b036:	2001      	movne	r0, #1
    b038:	4770      	bx	lr
    b03a:	bf00      	nop
    b03c:	40001000 	.word	0x40001000

0000b040 <radio_pkt_empty_get>:
}
    b040:	4800      	ldr	r0, [pc, #0]	; (b044 <radio_pkt_empty_get+0x4>)
    b042:	4770      	bx	lr
    b044:	200027c0 	.word	0x200027c0

0000b048 <radio_pkt_scratch_get>:
}
    b048:	4800      	ldr	r0, [pc, #0]	; (b04c <radio_pkt_scratch_get+0x4>)
    b04a:	4770      	bx	lr
    b04c:	200027c4 	.word	0x200027c4

0000b050 <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    b050:	4b04      	ldr	r3, [pc, #16]	; (b064 <radio_switch_complete_and_rx+0x14>)
    b052:	2203      	movs	r2, #3
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
    b054:	2100      	movs	r1, #0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    b056:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	sw_switch(0, 0, 0, phy_rx, 0);
    b05a:	4602      	mov	r2, r0
    b05c:	4608      	mov	r0, r1
    b05e:	f7ff be47 	b.w	acf0 <sw_switch.isra.9>
    b062:	bf00      	nop
    b064:	40001000 	.word	0x40001000

0000b068 <radio_switch_complete_and_tx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    b068:	4b03      	ldr	r3, [pc, #12]	; (b078 <radio_switch_complete_and_tx+0x10>)
    b06a:	2103      	movs	r1, #3
    b06c:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
    b070:	4601      	mov	r1, r0
    b072:	2001      	movs	r0, #1
    b074:	f7ff be3c 	b.w	acf0 <sw_switch.isra.9>
    b078:	40001000 	.word	0x40001000

0000b07c <radio_switch_complete_and_disable>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
    b07c:	4b05      	ldr	r3, [pc, #20]	; (b094 <radio_switch_complete_and_disable+0x18>)
    b07e:	2203      	movs	r2, #3
    b080:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_PPI->CHENCLR = HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
    b084:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
    b088:	f44f 6290 	mov.w	r2, #1152	; 0x480
    b08c:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    b090:	4770      	bx	lr
    b092:	bf00      	nop
    b094:	40001000 	.word	0x40001000

0000b098 <radio_rssi_measure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
    b098:	4a03      	ldr	r2, [pc, #12]	; (b0a8 <radio_rssi_measure+0x10>)
    b09a:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    b09e:	f443 7388 	orr.w	r3, r3, #272	; 0x110
    b0a2:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    b0a6:	4770      	bx	lr
    b0a8:	40001000 	.word	0x40001000

0000b0ac <radio_rssi_get>:
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}

u32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
    b0ac:	4b01      	ldr	r3, [pc, #4]	; (b0b4 <radio_rssi_get+0x8>)
    b0ae:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
    b0b2:	4770      	bx	lr
    b0b4:	40001000 	.word	0x40001000

0000b0b8 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
    b0b8:	4b02      	ldr	r3, [pc, #8]	; (b0c4 <radio_rssi_status_reset+0xc>)
    b0ba:	2200      	movs	r2, #0
    b0bc:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    b0c0:	4770      	bx	lr
    b0c2:	bf00      	nop
    b0c4:	40001000 	.word	0x40001000

0000b0c8 <radio_rssi_is_ready>:
}

u32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
    b0c8:	4b03      	ldr	r3, [pc, #12]	; (b0d8 <radio_rssi_is_ready+0x10>)
    b0ca:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
    b0ce:	3000      	adds	r0, #0
    b0d0:	bf18      	it	ne
    b0d2:	2001      	movne	r0, #1
    b0d4:	4770      	bx	lr
    b0d6:	bf00      	nop
    b0d8:	40001000 	.word	0x40001000

0000b0dc <radio_filter_configure>:

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
    b0dc:	b530      	push	{r4, r5, lr}
    b0de:	2400      	movs	r4, #0
    b0e0:	00a3      	lsls	r3, r4, #2
    b0e2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    b0e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
	u8_t index;

	for (index = 0; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
    b0ea:	6815      	ldr	r5, [r2, #0]
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    b0ec:	f8c3 5600 	str.w	r5, [r3, #1536]	; 0x600
    b0f0:	3401      	adds	r4, #1
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
    b0f2:	8895      	ldrh	r5, [r2, #4]
    b0f4:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	for (index = 0; index < 8; index++) {
    b0f8:	2c08      	cmp	r4, #8
		bdaddr += 6;
    b0fa:	f102 0206 	add.w	r2, r2, #6
	for (index = 0; index < 8; index++) {
    b0fe:	d1ef      	bne.n	b0e0 <radio_filter_configure+0x4>
	}

	NRF_RADIO->DACNF = ((u32_t)bitmask_addr_type << 8) | bitmask_enable;
    b100:	4b02      	ldr	r3, [pc, #8]	; (b10c <radio_filter_configure+0x30>)
    b102:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
    b106:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
    b10a:	bd30      	pop	{r4, r5, pc}
    b10c:	40001000 	.word	0x40001000

0000b110 <radio_filter_disable>:
}

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
    b110:	4a03      	ldr	r2, [pc, #12]	; (b120 <radio_filter_disable+0x10>)
    b112:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
    b116:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    b11a:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
    b11e:	4770      	bx	lr
    b120:	40001000 	.word	0x40001000

0000b124 <radio_filter_status_reset>:
}

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
    b124:	4b02      	ldr	r3, [pc, #8]	; (b130 <radio_filter_status_reset+0xc>)
    b126:	2200      	movs	r2, #0
    b128:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    b12c:	4770      	bx	lr
    b12e:	bf00      	nop
    b130:	40001000 	.word	0x40001000

0000b134 <radio_filter_has_match>:
}

u32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
    b134:	4b03      	ldr	r3, [pc, #12]	; (b144 <radio_filter_has_match+0x10>)
    b136:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
    b13a:	3000      	adds	r0, #0
    b13c:	bf18      	it	ne
    b13e:	2001      	movne	r0, #1
    b140:	4770      	bx	lr
    b142:	bf00      	nop
    b144:	40001000 	.word	0x40001000

0000b148 <radio_filter_match_get>:

u32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
    b148:	4b01      	ldr	r3, [pc, #4]	; (b150 <radio_filter_match_get+0x8>)
    b14a:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
    b14e:	4770      	bx	lr
    b150:	40001000 	.word	0x40001000

0000b154 <radio_tmr_status_reset>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
}

void radio_tmr_status_reset(void)
{
	NRF_RTC0->EVTENCLR = RTC_EVTENCLR_COMPARE2_Msk;
    b154:	4b05      	ldr	r3, [pc, #20]	; (b16c <radio_tmr_status_reset+0x18>)
    b156:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    b15a:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	NRF_PPI->CHENCLR =
    b15e:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
    b162:	227f      	movs	r2, #127	; 0x7f
    b164:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    b168:	4770      	bx	lr
    b16a:	bf00      	nop
    b16c:	4000b000 	.word	0x4000b000

0000b170 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(u32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	SW_SWITCH_TIMER->CC[SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle)] = tifs;
    b170:	4b03      	ldr	r3, [pc, #12]	; (b180 <radio_tmr_tifs_set+0x10>)
    b172:	4a04      	ldr	r2, [pc, #16]	; (b184 <radio_tmr_tifs_set+0x14>)
    b174:	781b      	ldrb	r3, [r3, #0]
    b176:	f503 73a8 	add.w	r3, r3, #336	; 0x150
    b17a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    b17e:	4770      	bx	lr
    b180:	200028d0 	.word	0x200028d0
    b184:	40009000 	.word	0x40009000

0000b188 <radio_tmr_start>:
#endif
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
    b188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
    b18c:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
    b190:	4c30      	ldr	r4, [pc, #192]	; (b254 <radio_tmr_start+0xcc>)
		ticks_start--;
		remainder += 30517578UL;
	}
	remainder /= 1000000UL;
    b192:	4d31      	ldr	r5, [pc, #196]	; (b258 <radio_tmr_start+0xd0>)
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
    b194:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
    b198:	42a3      	cmp	r3, r4
		remainder += 30517578UL;
    b19a:	bf88      	it	hi
    b19c:	f102 72e8 	addhi.w	r2, r2, #30408704	; 0x1d00000

	EVENT_TIMER->TASKS_CLEAR = 1;
    b1a0:	4b2e      	ldr	r3, [pc, #184]	; (b25c <radio_tmr_start+0xd4>)

#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(EVENT_TIMER_NBR);
#endif

	NRF_RTC0->CC[2] = ticks_start;
    b1a2:	4c2f      	ldr	r4, [pc, #188]	; (b260 <radio_tmr_start+0xd8>)
		remainder += 30517578UL;
    b1a4:	bf82      	ittt	hi
    b1a6:	f502 32d4 	addhi.w	r2, r2, #108544	; 0x1a800
		ticks_start--;
    b1aa:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
		remainder += 30517578UL;
    b1ae:	f502 72a5 	addhi.w	r2, r2, #330	; 0x14a
	EVENT_TIMER->TASKS_CLEAR = 1;
    b1b2:	2601      	movs	r6, #1
	remainder /= 1000000UL;
    b1b4:	fbb2 f5f5 	udiv	r5, r2, r5
	EVENT_TIMER->MODE = 0;
    b1b8:	2700      	movs	r7, #0
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
    b1ba:	2202      	movs	r2, #2
	EVENT_TIMER->PRESCALER = 4;
    b1bc:	f04f 0804 	mov.w	r8, #4
	EVENT_TIMER->TASKS_CLEAR = 1;
    b1c0:	60de      	str	r6, [r3, #12]
	EVENT_TIMER->MODE = 0;
    b1c2:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	EVENT_TIMER->PRESCALER = 4;
    b1c6:	f8c3 8510 	str.w	r8, [r3, #1296]	; 0x510
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
    b1ca:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	EVENT_TIMER->CC[0] = remainder;
    b1ce:	f8c3 5540 	str.w	r5, [r3, #1344]	; 0x540
	NRF_RTC0->CC[2] = ticks_start;
    b1d2:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
	NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE2_Msk;
    b1d6:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    b1da:	f8c4 1344 	str.w	r1, [r4, #836]	; 0x344

	HAL_EVENT_TIMER_START_PPI_REGISTER_EVT = HAL_EVENT_TIMER_START_EVT;
    b1de:	f504 34a0 	add.w	r4, r4, #81920	; 0x14000
    b1e2:	4920      	ldr	r1, [pc, #128]	; (b264 <radio_tmr_start+0xdc>)
    b1e4:	f8c4 1518 	str.w	r1, [r4, #1304]	; 0x518
	HAL_EVENT_TIMER_START_PPI_REGISTER_TASK = HAL_EVENT_TIMER_START_TASK;
    b1e8:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
	NRF_PPI->CHENSET = HAL_EVENT_TIMER_START_PPI_ENABLE;
    b1ec:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects_CHEN();
#endif

	hal_radio_enable_on_tick_ppi_config_and_enable(trx);
    b1f0:	f7ff fd66 	bl	acc0 <hal_radio_enable_on_tick_ppi_config_and_enable>
#if !defined(CONFIG_BT_CTLR_TIFS_HW)
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	SW_SWITCH_TIMER->TASKS_CLEAR = 1;
    b1f4:	4b1c      	ldr	r3, [pc, #112]	; (b268 <radio_tmr_start+0xe0>)
    b1f6:	60de      	str	r6, [r3, #12]
	SW_SWITCH_TIMER->MODE = 0;
    b1f8:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
    b1fc:	f8c3 8510 	str.w	r8, [r3, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
    b200:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
	SW_SWITCH_TIMER->TASKS_START = 1;
    b204:	601e      	str	r6, [r3, #0]
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(SW_SWITCH_TIMER_NBR);
	NRF_TIMER_regw_sideeffects_TASKS_START(SW_SWITCH_TIMER_NBR);
#endif
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	HAL_SW_SWITCH_TIMER_CLEAR_PPI_REGISTER_EVT =
    b206:	f5a3 43fd 	sub.w	r3, r3, #32384	; 0x7e80
    b20a:	3b74      	subs	r3, #116	; 0x74
    b20c:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
		HAL_SW_SWITCH_TIMER_CLEAR_PPI_EVT;
	HAL_SW_SWITCH_TIMER_CLEAR_PPI_REGISTER_TASK =
    b210:	f503 43fe 	add.w	r3, r3, #32512	; 0x7f00
    b214:	f8c4 354c 	str.w	r3, [r4, #1356]	; 0x54c
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || !defined(CONFIG_SOC_NRF52840)
	/* NOTE: PPI channel group disable is setup explicitly in sw_switch
	 *       function when Coded PHY on nRF52840 is supported.
	 */
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_EVT(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) =
    b218:	f503 739a 	add.w	r3, r3, #308	; 0x134
    b21c:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(
			SW_SWITCH_TIMER_EVTS_COMP(0));
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) =
    b220:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
    b224:	33c4      	adds	r3, #196	; 0xc4
    b226:	f8c4 3554 	str.w	r3, [r4, #1364]	; 0x554
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(0);

	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_EVT(
			HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(1)) =
    b22a:	f5a3 33af 	sub.w	r3, r3, #89600	; 0x15e00
    b22e:	3bc0      	subs	r3, #192	; 0xc0
    b230:	f8c4 3558 	str.w	r3, [r4, #1368]	; 0x558
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(
			SW_SWITCH_TIMER_EVTS_COMP(1));
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(1)) =
    b234:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
    b238:	33c8      	adds	r3, #200	; 0xc8
    b23a:	f8c4 355c 	str.w	r3, [r4, #1372]	; 0x55c
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(1);
#endif /* !CONFIG_BT_CTLR_PHY_CODED || !CONFIG_SOC_NRF52840 */

	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
    b23e:	f44f 6310 	mov.w	r3, #2304	; 0x900
    b242:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_0_INCLUDE |
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_0_INCLUDE;
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
    b246:	f44f 5390 	mov.w	r3, #4608	; 0x1200
    b24a:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
	NRF_PPI_regw_sideeffects();
#endif
	return remainder;
}
    b24e:	4628      	mov	r0, r5
    b250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b254:	7ff0bdbf 	.word	0x7ff0bdbf
    b258:	000f4240 	.word	0x000f4240
    b25c:	40008000 	.word	0x40008000
    b260:	4000b000 	.word	0x4000b000
    b264:	4000b148 	.word	0x4000b148
    b268:	40009000 	.word	0x40009000

0000b26c <radio_tmr_stop>:
	return start;
}

void radio_tmr_stop(void)
{
	EVENT_TIMER->TASKS_STOP = 1;
    b26c:	4a04      	ldr	r2, [pc, #16]	; (b280 <radio_tmr_stop+0x14>)
    b26e:	2301      	movs	r3, #1
    b270:	6053      	str	r3, [r2, #4]
	EVENT_TIMER->TASKS_SHUTDOWN = 1;
    b272:	6113      	str	r3, [r2, #16]
	NRF_TIMER_regw_sideeffects_TASKS_STOP(EVENT_TIMER_NBR);
	/* Shutdown not modelled (deprecated) */
#endif

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	SW_SWITCH_TIMER->TASKS_STOP = 1;
    b274:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    b278:	6053      	str	r3, [r2, #4]
	SW_SWITCH_TIMER->TASKS_SHUTDOWN = 1;
    b27a:	6113      	str	r3, [r2, #16]
    b27c:	4770      	bx	lr
    b27e:	bf00      	nop
    b280:	40008000 	.word	0x40008000

0000b284 <radio_tmr_hcto_configure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_tmr_hcto_configure(u32_t hcto)
{
	EVENT_TIMER->CC[1] = hcto;
    b284:	4b0c      	ldr	r3, [pc, #48]	; (b2b8 <radio_tmr_hcto_configure+0x34>)
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_CC(EVENT_TIMER_NBR, 1);
#endif

	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
    b286:	4a0d      	ldr	r2, [pc, #52]	; (b2bc <radio_tmr_hcto_configure+0x38>)
	EVENT_TIMER->CC[1] = hcto;
    b288:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
    b28c:	f503 33b8 	add.w	r3, r3, #94208	; 0x17000
    b290:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
    b294:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    b298:	3240      	adds	r2, #64	; 0x40
    b29a:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_EVT =
    b29e:	f502 7280 	add.w	r2, r2, #256	; 0x100
    b2a2:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
		HAL_RADIO_DISABLE_ON_HCTO_PPI_EVT;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_TASK =
    b2a6:	f5a2 42e2 	sub.w	r2, r2, #28928	; 0x7100
    b2aa:	3a34      	subs	r2, #52	; 0x34
    b2ac:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
		HAL_RADIO_DISABLE_ON_HCTO_PPI_TASK;
	NRF_PPI->CHENSET =
    b2b0:	2218      	movs	r2, #24
    b2b2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    b2b6:	4770      	bx	lr
    b2b8:	40008000 	.word	0x40008000
    b2bc:	40001104 	.word	0x40001104

0000b2c0 <radio_tmr_aa_capture>:
#endif
}

void radio_tmr_aa_capture(void)
{
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_EVT =
    b2c0:	4b0b      	ldr	r3, [pc, #44]	; (b2f0 <radio_tmr_aa_capture+0x30>)
    b2c2:	4a0c      	ldr	r2, [pc, #48]	; (b2f4 <radio_tmr_aa_capture+0x34>)
    b2c4:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
		HAL_RADIO_READY_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_TASK =
    b2c8:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    b2cc:	3240      	adds	r2, #64	; 0x40
    b2ce:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
		HAL_RADIO_READY_TIME_CAPTURE_PPI_TASK;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
    b2d2:	f5a2 42de 	sub.w	r2, r2, #28416	; 0x6f00
    b2d6:	3a3c      	subs	r2, #60	; 0x3c
    b2d8:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
    b2dc:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    b2e0:	3240      	adds	r2, #64	; 0x40
    b2e2:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	NRF_PPI->CHENSET =
    b2e6:	220c      	movs	r2, #12
    b2e8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    b2ec:	4770      	bx	lr
    b2ee:	bf00      	nop
    b2f0:	4001f000 	.word	0x4001f000
    b2f4:	40001100 	.word	0x40001100

0000b2f8 <radio_tmr_aa_get>:
#endif
}

u32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
    b2f8:	4b01      	ldr	r3, [pc, #4]	; (b300 <radio_tmr_aa_get+0x8>)
    b2fa:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
    b2fe:	4770      	bx	lr
    b300:	40008000 	.word	0x40008000

0000b304 <radio_tmr_aa_save>:

static u32_t radio_tmr_aa;

void radio_tmr_aa_save(u32_t aa)
{
	radio_tmr_aa = aa;
    b304:	4b01      	ldr	r3, [pc, #4]	; (b30c <radio_tmr_aa_save+0x8>)
    b306:	6018      	str	r0, [r3, #0]
    b308:	4770      	bx	lr
    b30a:	bf00      	nop
    b30c:	200028c8 	.word	0x200028c8

0000b310 <radio_tmr_aa_restore>:

u32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
}
    b310:	4b01      	ldr	r3, [pc, #4]	; (b318 <radio_tmr_aa_restore+0x8>)
    b312:	6818      	ldr	r0, [r3, #0]
    b314:	4770      	bx	lr
    b316:	bf00      	nop
    b318:	200028c8 	.word	0x200028c8

0000b31c <radio_tmr_ready_get>:

u32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
    b31c:	4b01      	ldr	r3, [pc, #4]	; (b324 <radio_tmr_ready_get+0x8>)
    b31e:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
    b322:	4770      	bx	lr
    b324:	40008000 	.word	0x40008000

0000b328 <radio_tmr_end_capture>:

void radio_tmr_end_capture(void)
{
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_EVT =
    b328:	4b06      	ldr	r3, [pc, #24]	; (b344 <radio_tmr_end_capture+0x1c>)
    b32a:	4a07      	ldr	r2, [pc, #28]	; (b348 <radio_tmr_end_capture+0x20>)
    b32c:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
		HAL_RADIO_END_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_TASK =
    b330:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    b334:	323c      	adds	r2, #60	; 0x3c
    b336:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
		HAL_RADIO_END_TIME_CAPTURE_PPI_TASK;
	NRF_PPI->CHENSET = HAL_RADIO_END_TIME_CAPTURE_PPI_ENABLE;
    b33a:	2220      	movs	r2, #32
    b33c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    b340:	4770      	bx	lr
    b342:	bf00      	nop
    b344:	4001f000 	.word	0x4001f000
    b348:	4000110c 	.word	0x4000110c

0000b34c <radio_tmr_end_get>:
    b34c:	4b01      	ldr	r3, [pc, #4]	; (b354 <radio_tmr_end_get+0x8>)
    b34e:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
    b352:	4770      	bx	lr
    b354:	40008000 	.word	0x40008000

0000b358 <radio_tmr_tifs_base_get>:
u32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
    b358:	4b01      	ldr	r3, [pc, #4]	; (b360 <radio_tmr_tifs_base_get+0x8>)
    b35a:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

u32_t radio_tmr_tifs_base_get(void)
{
	return radio_tmr_end_get();
}
    b35e:	4770      	bx	lr
    b360:	40008000 	.word	0x40008000

0000b364 <radio_ccm_rx_pkt_set>:
void *radio_ccm_rx_pkt_set(struct ccm *ccm, u8_t phy, void *pkt)
{

	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    b364:	4b16      	ldr	r3, [pc, #88]	; (b3c0 <radio_ccm_rx_pkt_set+0x5c>)
{
    b366:	b570      	push	{r4, r5, r6, lr}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    b368:	2400      	movs	r4, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    b36a:	2502      	movs	r5, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    b36c:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500

	/* Select CCM data rate based on current PHY in use. */
	switch (phy) {
	default:
	case BIT(0):
		mode |= (CCM_MODE_DATARATE_1Mbit <<
    b370:	4e14      	ldr	r6, [pc, #80]	; (b3c4 <radio_ccm_rx_pkt_set+0x60>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    b372:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
		mode |= (CCM_MODE_DATARATE_1Mbit <<
    b376:	4d14      	ldr	r5, [pc, #80]	; (b3c8 <radio_ccm_rx_pkt_set+0x64>)
    b378:	2902      	cmp	r1, #2
    b37a:	bf0c      	ite	eq
    b37c:	4629      	moveq	r1, r5
    b37e:	4631      	movne	r1, r6
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}
#endif /* CONFIG_SOC_SERIES_NRF52X */

	NRF_CCM->MODE = mode;
    b380:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
    b384:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)_pkt_scratch;
    b388:	4810      	ldr	r0, [pc, #64]	; (b3cc <radio_ccm_rx_pkt_set+0x68>)
    b38a:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)pkt;
    b38e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    b392:	4a0f      	ldr	r2, [pc, #60]	; (b3d0 <radio_ccm_rx_pkt_set+0x6c>)
    b394:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = 0;
	NRF_CCM->EVENTS_ENDCRYPT = 0;
	NRF_CCM->EVENTS_ERROR = 0;

	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
    b398:	490e      	ldr	r1, [pc, #56]	; (b3d4 <radio_ccm_rx_pkt_set+0x70>)
    b39a:	4a0f      	ldr	r2, [pc, #60]	; (b3d8 <radio_ccm_rx_pkt_set+0x74>)
	NRF_CCM->SHORTS = 0;
    b39c:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
    b3a0:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
    b3a4:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
    b3a8:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	HAL_TRIGGER_CRYPT_PPI_REGISTER_TASK = HAL_TRIGGER_CRYPT_PPI_TASK;
    b3ac:	f501 415f 	add.w	r1, r1, #57088	; 0xdf00
    b3b0:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
	NRF_PPI->CHENSET = HAL_TRIGGER_CRYPT_PPI_ENABLE;
    b3b4:	2140      	movs	r1, #64	; 0x40
    b3b6:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects();
#endif

	NRF_CCM->TASKS_KSGEN = 1;
    b3ba:	2201      	movs	r2, #1
    b3bc:	601a      	str	r2, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
    b3be:	bd70      	pop	{r4, r5, r6, pc}
    b3c0:	4000f000 	.word	0x4000f000
    b3c4:	01000001 	.word	0x01000001
    b3c8:	01010001 	.word	0x01010001
    b3cc:	200027c4 	.word	0x200027c4
    b3d0:	200026b4 	.word	0x200026b4
    b3d4:	40001104 	.word	0x40001104
    b3d8:	4001f000 	.word	0x4001f000

0000b3dc <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
    b3dc:	b510      	push	{r4, lr}
	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    b3de:	4b0e      	ldr	r3, [pc, #56]	; (b418 <radio_ccm_tx_pkt_set+0x3c>)
    b3e0:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    b3e2:	2402      	movs	r4, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    b3e4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    b3e8:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
    b3ec:	4c0b      	ldr	r4, [pc, #44]	; (b41c <radio_ccm_tx_pkt_set+0x40>)
    b3ee:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
    b3f2:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)pkt;
    b3f6:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
    b3fa:	4809      	ldr	r0, [pc, #36]	; (b420 <radio_ccm_tx_pkt_set+0x44>)
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    b3fc:	4909      	ldr	r1, [pc, #36]	; (b424 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
    b3fe:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    b402:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
    b406:	2101      	movs	r1, #1
    b408:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
    b40c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
    b410:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	NRF_CCM->TASKS_KSGEN = 1;
    b414:	6019      	str	r1, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
    b416:	bd10      	pop	{r4, pc}
    b418:	4000f000 	.word	0x4000f000
    b41c:	01010000 	.word	0x01010000
    b420:	200027c4 	.word	0x200027c4
    b424:	200026b4 	.word	0x200026b4

0000b428 <radio_ccm_is_done>:

u32_t radio_ccm_is_done(void)
{
	NRF_CCM->INTENSET = CCM_INTENSET_ENDCRYPT_Msk;
    b428:	4b0c      	ldr	r3, [pc, #48]	; (b45c <radio_ccm_is_done+0x34>)
    b42a:	2202      	movs	r2, #2
    b42c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENSET();
#endif
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
    b430:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    b434:	b16a      	cbz	r2, b452 <radio_ccm_is_done+0x2a>
		__WFE();
		__SEV();
		__WFE();
	}
	NRF_CCM->INTENCLR = CCM_INTENCLR_ENDCRYPT_Msk;
    b436:	2202      	movs	r2, #2
    b438:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    b43c:	4a08      	ldr	r2, [pc, #32]	; (b460 <radio_ccm_is_done+0x38>)
    b43e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    b442:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENCLR();
#endif
	NVIC_ClearPendingIRQ(CCM_AAR_IRQn);

	return (NRF_CCM->EVENTS_ERROR == 0);
    b446:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
    b44a:	fab0 f080 	clz	r0, r0
    b44e:	0940      	lsrs	r0, r0, #5
    b450:	4770      	bx	lr
		__WFE();
    b452:	bf20      	wfe
		__SEV();
    b454:	bf40      	sev
		__WFE();
    b456:	bf20      	wfe
    b458:	e7ea      	b.n	b430 <radio_ccm_is_done+0x8>
    b45a:	bf00      	nop
    b45c:	4000f000 	.word	0x4000f000
    b460:	e000e100 	.word	0xe000e100

0000b464 <radio_ccm_mic_is_valid>:

u32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
    b464:	4b03      	ldr	r3, [pc, #12]	; (b474 <radio_ccm_mic_is_valid+0x10>)
    b466:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    b46a:	3000      	adds	r0, #0
    b46c:	bf18      	it	ne
    b46e:	2001      	movne	r0, #1
    b470:	4770      	bx	lr
    b472:	bf00      	nop
    b474:	4000f000 	.word	0x4000f000

0000b478 <radio_ar_match_get>:
#endif
}

u32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
    b478:	4b01      	ldr	r3, [pc, #4]	; (b480 <radio_ar_match_get+0x8>)
    b47a:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    b47e:	4770      	bx	lr
    b480:	4000f000 	.word	0x4000f000

0000b484 <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
    b484:	4a04      	ldr	r2, [pc, #16]	; (b498 <radio_ar_status_reset+0x14>)
    b486:	2300      	movs	r3, #0
    b488:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

void radio_ar_status_reset(void)
{
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
    b48c:	f502 4260 	add.w	r2, r2, #57344	; 0xe000
    b490:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    b494:	4770      	bx	lr
    b496:	bf00      	nop
    b498:	40001000 	.word	0x40001000

0000b49c <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
    b49c:	4b08      	ldr	r3, [pc, #32]	; (b4c0 <radio_ar_has_match+0x24>)
    b49e:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
    b4a2:	b160      	cbz	r0, b4be <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
    b4a4:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
    b4a8:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
    b4ac:	b138      	cbz	r0, b4be <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
    b4ae:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
    b4b2:	b120      	cbz	r0, b4be <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
    b4b4:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
    b4b8:	fab0 f080 	clz	r0, r0
    b4bc:	0940      	lsrs	r0, r0, #5
}
    b4be:	4770      	bx	lr
    b4c0:	40001000 	.word	0x40001000

0000b4c4 <mayfly_enable_cb>:

void mayfly_enable_cb(u8_t caller_id, u8_t callee_id, u8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
    b4c4:	2901      	cmp	r1, #1
{
    b4c6:	b508      	push	{r3, lr}
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
    b4c8:	d00a      	beq.n	b4e0 <mayfly_enable_cb+0x1c>
    b4ca:	4a0a      	ldr	r2, [pc, #40]	; (b4f4 <mayfly_enable_cb+0x30>)
    b4cc:	490a      	ldr	r1, [pc, #40]	; (b4f8 <mayfly_enable_cb+0x34>)
    b4ce:	2003      	movs	r0, #3
    b4d0:	f7f6 fe8e 	bl	21f0 <bt_log>
    b4d4:	4040      	eors	r0, r0
    b4d6:	f380 8811 	msr	BASEPRI, r0
    b4da:	f04f 0004 	mov.w	r0, #4
    b4de:	df02      	svc	2

	if (enable) {
		irq_enable(SWI4_IRQn);
    b4e0:	2018      	movs	r0, #24
	if (enable) {
    b4e2:	b11a      	cbz	r2, b4ec <mayfly_enable_cb+0x28>
	} else {
		irq_disable(SWI4_IRQn);
	}
}
    b4e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		irq_enable(SWI4_IRQn);
    b4e8:	f7f5 bbba 	b.w	c60 <_arch_irq_enable>
}
    b4ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		irq_disable(SWI4_IRQn);
    b4f0:	f7f5 bbc6 	b.w	c80 <_arch_irq_disable>
    b4f4:	0000edc6 	.word	0x0000edc6
    b4f8:	0000edf5 	.word	0x0000edf5

0000b4fc <mayfly_is_enabled>:

u32_t mayfly_is_enabled(u8_t caller_id, u8_t callee_id)
{
    b4fc:	b508      	push	{r3, lr}
	(void)caller_id;

	switch (callee_id) {
    b4fe:	b161      	cbz	r1, b51a <mayfly_is_enabled+0x1e>
    b500:	2901      	cmp	r1, #1
    b502:	d00f      	beq.n	b524 <mayfly_is_enabled+0x28>

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(SWI4_IRQn);

	default:
		LL_ASSERT(0);
    b504:	4a08      	ldr	r2, [pc, #32]	; (b528 <mayfly_is_enabled+0x2c>)
    b506:	4909      	ldr	r1, [pc, #36]	; (b52c <mayfly_is_enabled+0x30>)
    b508:	2003      	movs	r0, #3
    b50a:	f7f6 fe71 	bl	21f0 <bt_log>
    b50e:	4040      	eors	r0, r0
    b510:	f380 8811 	msr	BASEPRI, r0
    b514:	f04f 0004 	mov.w	r0, #4
    b518:	df02      	svc	2
		return irq_is_enabled(RTC0_IRQn);
    b51a:	200b      	movs	r0, #11
		break;
	}

	return 0;
}
    b51c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		return irq_is_enabled(SWI4_IRQn);
    b520:	f7f5 bbc2 	b.w	ca8 <_arch_irq_is_enabled>
    b524:	2018      	movs	r0, #24
    b526:	e7f9      	b.n	b51c <mayfly_is_enabled+0x20>
    b528:	0000edd7 	.word	0x0000edd7
    b52c:	0000d773 	.word	0x0000d773

0000b530 <mayfly_prio_is_equal>:
u32_t mayfly_prio_is_equal(u8_t caller_id, u8_t callee_id)
{
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
	return (caller_id == callee_id) ||
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
    b530:	4288      	cmp	r0, r1
    b532:	d00a      	beq.n	b54a <mayfly_prio_is_equal+0x1a>
	return (caller_id == callee_id) ||
    b534:	b918      	cbnz	r0, b53e <mayfly_prio_is_equal+0xe>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
    b536:	1e4b      	subs	r3, r1, #1
    b538:	4258      	negs	r0, r3
    b53a:	4158      	adcs	r0, r3
    b53c:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
    b53e:	2801      	cmp	r0, #1
    b540:	d105      	bne.n	b54e <mayfly_prio_is_equal+0x1e>
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
    b542:	fab1 f081 	clz	r0, r1
    b546:	0940      	lsrs	r0, r0, #5
    b548:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
    b54a:	2001      	movs	r0, #1
    b54c:	4770      	bx	lr
    b54e:	2000      	movs	r0, #0
		(callee_id == MAYFLY_CALL_ID_WORKER));
#else
	/* TODO: check Kconfig set priorities */
	return caller_id == callee_id;
#endif
}
    b550:	4770      	bx	lr
	...

0000b554 <mayfly_pend>:

void mayfly_pend(u8_t caller_id, u8_t callee_id)
{
    b554:	b508      	push	{r3, lr}
    b556:	4b0b      	ldr	r3, [pc, #44]	; (b584 <mayfly_pend+0x30>)
	(void)caller_id;

	switch (callee_id) {
    b558:	b161      	cbz	r1, b574 <mayfly_pend+0x20>
    b55a:	2901      	cmp	r1, #1
    b55c:	d00f      	beq.n	b57e <mayfly_pend+0x2a>
	case MAYFLY_CALL_ID_JOB:
		NVIC_SetPendingIRQ(SWI4_IRQn);
		break;

	default:
		LL_ASSERT(0);
    b55e:	4a0a      	ldr	r2, [pc, #40]	; (b588 <mayfly_pend+0x34>)
    b560:	490a      	ldr	r1, [pc, #40]	; (b58c <mayfly_pend+0x38>)
    b562:	2003      	movs	r0, #3
    b564:	f7f6 fe44 	bl	21f0 <bt_log>
    b568:	4040      	eors	r0, r0
    b56a:	f380 8811 	msr	BASEPRI, r0
    b56e:	f04f 0004 	mov.w	r0, #4
    b572:	df02      	svc	2
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    b574:	f44f 6200 	mov.w	r2, #2048	; 0x800
    b578:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    b57c:	bd08      	pop	{r3, pc}
    b57e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    b582:	e7f9      	b.n	b578 <mayfly_pend+0x24>
    b584:	e000e100 	.word	0xe000e100
    b588:	0000ede9 	.word	0x0000ede9
    b58c:	0000d773 	.word	0x0000d773

0000b590 <hal_ticker_instance0_caller_id_get>:

u8_t hal_ticker_instance0_caller_id_get(u8_t user_id)
{
	u8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
    b590:	2803      	cmp	r0, #3
{
    b592:	b508      	push	{r3, lr}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
    b594:	d90a      	bls.n	b5ac <hal_ticker_instance0_caller_id_get+0x1c>
    b596:	4a09      	ldr	r2, [pc, #36]	; (b5bc <hal_ticker_instance0_caller_id_get+0x2c>)
    b598:	4909      	ldr	r1, [pc, #36]	; (b5c0 <hal_ticker_instance0_caller_id_get+0x30>)

	caller_id = caller_id_lut[user_id];
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
    b59a:	2003      	movs	r0, #3
    b59c:	f7f6 fe28 	bl	21f0 <bt_log>
    b5a0:	4040      	eors	r0, r0
    b5a2:	f380 8811 	msr	BASEPRI, r0
    b5a6:	f04f 0004 	mov.w	r0, #4
    b5aa:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
    b5ac:	4b05      	ldr	r3, [pc, #20]	; (b5c4 <hal_ticker_instance0_caller_id_get+0x34>)
    b5ae:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
    b5b0:	b910      	cbnz	r0, b5b8 <hal_ticker_instance0_caller_id_get+0x28>
    b5b2:	4a02      	ldr	r2, [pc, #8]	; (b5bc <hal_ticker_instance0_caller_id_get+0x2c>)
    b5b4:	4904      	ldr	r1, [pc, #16]	; (b5c8 <hal_ticker_instance0_caller_id_get+0x38>)
    b5b6:	e7f0      	b.n	b59a <hal_ticker_instance0_caller_id_get+0xa>

	return caller_id;
}
    b5b8:	bd08      	pop	{r3, pc}
    b5ba:	bf00      	nop
    b5bc:	0000ee19 	.word	0x0000ee19
    b5c0:	0000ee5b 	.word	0x0000ee5b
    b5c4:	0000ee57 	.word	0x0000ee57
    b5c8:	0000ee90 	.word	0x0000ee90

0000b5cc <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
    b5cc:	3802      	subs	r0, #2
{
    b5ce:	b510      	push	{r4, lr}
    b5d0:	461c      	mov	r4, r3
	switch (caller_id) {
    b5d2:	2803      	cmp	r0, #3
    b5d4:	d817      	bhi.n	b606 <hal_ticker_instance0_sched+0x3a>
    b5d6:	e8df f000 	tbb	[pc, r0]
    b5da:	0c02      	.short	0x0c02
    b5dc:	2a12      	.short	0x2a12
	case TICKER_CALL_ID_TRIGGER:
		switch (callee_id) {
    b5de:	2903      	cmp	r1, #3
    b5e0:	d111      	bne.n	b606 <hal_ticker_instance0_sched+0x3a>
		{
			static memq_link_t link;
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_worker};

			m.param = instance;
    b5e2:	4b16      	ldr	r3, [pc, #88]	; (b63c <hal_ticker_instance0_sched+0x70>)

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
    b5e4:	2100      	movs	r1, #0
			m.param = instance;
    b5e6:	609c      	str	r4, [r3, #8]
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_job};

			m.param = instance;

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
    b5e8:	2000      	movs	r0, #0

	default:
		LL_ASSERT(0);
		break;
	}
}
    b5ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
    b5ee:	f7f8 baa9 	b.w	3b44 <mayfly_enqueue>
		switch (callee_id) {
    b5f2:	2904      	cmp	r1, #4
    b5f4:	d107      	bne.n	b606 <hal_ticker_instance0_sched+0x3a>
			m.param = instance;
    b5f6:	4b12      	ldr	r3, [pc, #72]	; (b640 <hal_ticker_instance0_sched+0x74>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
    b5f8:	2101      	movs	r1, #1
			m.param = instance;
    b5fa:	609c      	str	r4, [r3, #8]
    b5fc:	e7f4      	b.n	b5e8 <hal_ticker_instance0_sched+0x1c>
		switch (callee_id) {
    b5fe:	2903      	cmp	r1, #3
    b600:	d00c      	beq.n	b61c <hal_ticker_instance0_sched+0x50>
    b602:	2904      	cmp	r1, #4
    b604:	d00f      	beq.n	b626 <hal_ticker_instance0_sched+0x5a>
		LL_ASSERT(0);
    b606:	4a0f      	ldr	r2, [pc, #60]	; (b644 <hal_ticker_instance0_sched+0x78>)
    b608:	490f      	ldr	r1, [pc, #60]	; (b648 <hal_ticker_instance0_sched+0x7c>)
    b60a:	2003      	movs	r0, #3
    b60c:	f7f6 fdf0 	bl	21f0 <bt_log>
    b610:	4040      	eors	r0, r0
    b612:	f380 8811 	msr	BASEPRI, r0
    b616:	f04f 0004 	mov.w	r0, #4
    b61a:	df02      	svc	2
			m.param = instance;
    b61c:	4b0b      	ldr	r3, [pc, #44]	; (b64c <hal_ticker_instance0_sched+0x80>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
    b61e:	2100      	movs	r1, #0
			m.param = instance;
    b620:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
    b622:	2001      	movs	r0, #1
    b624:	e7e1      	b.n	b5ea <hal_ticker_instance0_sched+0x1e>
			m.param = instance;
    b626:	4b0a      	ldr	r3, [pc, #40]	; (b650 <hal_ticker_instance0_sched+0x84>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
    b628:	2101      	movs	r1, #1
			m.param = instance;
    b62a:	609c      	str	r4, [r3, #8]
    b62c:	e7f9      	b.n	b622 <hal_ticker_instance0_sched+0x56>
		switch (callee_id) {
    b62e:	2904      	cmp	r1, #4
    b630:	d1e9      	bne.n	b606 <hal_ticker_instance0_sched+0x3a>
			m.param = instance;
    b632:	4b08      	ldr	r3, [pc, #32]	; (b654 <hal_ticker_instance0_sched+0x88>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
    b634:	2101      	movs	r1, #1
			m.param = instance;
    b636:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
    b638:	2003      	movs	r0, #3
    b63a:	e7d6      	b.n	b5ea <hal_ticker_instance0_sched+0x1e>
    b63c:	20005030 	.word	0x20005030
    b640:	20005040 	.word	0x20005040
    b644:	0000ee3c 	.word	0x0000ee3c
    b648:	0000d773 	.word	0x0000d773
    b64c:	20005050 	.word	0x20005050
    b650:	20005060 	.word	0x20005060
    b654:	20005070 	.word	0x20005070

0000b658 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(u32_t value)
{
	cntr_cmp_set(0, value);
    b658:	4601      	mov	r1, r0
    b65a:	2000      	movs	r0, #0
    b65c:	f7ff bae0 	b.w	ac20 <cntr_cmp_set>

0000b660 <fixed_data_unref>:

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
}

static void fixed_data_unref(struct net_buf *buf, u8_t *data)
{
    b660:	4770      	bx	lr
	...

0000b664 <net_buf_pool_get>:
}
    b664:	4b01      	ldr	r3, [pc, #4]	; (b66c <net_buf_pool_get+0x8>)
    b666:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    b66a:	4770      	bx	lr
    b66c:	20005188 	.word	0x20005188

0000b670 <net_buf_id>:
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    b670:	7982      	ldrb	r2, [r0, #6]
	return buf - pool->__bufs;
    b672:	4b04      	ldr	r3, [pc, #16]	; (b684 <net_buf_id+0x14>)
    b674:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    b678:	69db      	ldr	r3, [r3, #28]
    b67a:	1ac0      	subs	r0, r0, r3
}
    b67c:	4b02      	ldr	r3, [pc, #8]	; (b688 <net_buf_id+0x18>)
	return buf - pool->__bufs;
    b67e:	10c0      	asrs	r0, r0, #3
}
    b680:	4358      	muls	r0, r3
    b682:	4770      	bx	lr
    b684:	20005188 	.word	0x20005188
    b688:	aaaaaaab 	.word	0xaaaaaaab

0000b68c <fixed_data_alloc>:
{
    b68c:	b510      	push	{r4, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    b68e:	4b09      	ldr	r3, [pc, #36]	; (b6b4 <fixed_data_alloc+0x28>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    b690:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    b692:	eb03 1342 	add.w	r3, r3, r2, lsl #5
	*size = min(fixed->data_size, *size);
    b696:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    b698:	699b      	ldr	r3, [r3, #24]
    b69a:	685c      	ldr	r4, [r3, #4]
	*size = min(fixed->data_size, *size);
    b69c:	6823      	ldr	r3, [r4, #0]
    b69e:	429a      	cmp	r2, r3
    b6a0:	bf94      	ite	ls
    b6a2:	600a      	strls	r2, [r1, #0]
    b6a4:	600b      	strhi	r3, [r1, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
    b6a6:	f7ff ffe3 	bl	b670 <net_buf_id>
    b6aa:	e894 000c 	ldmia.w	r4, {r2, r3}
}
    b6ae:	fb02 3000 	mla	r0, r2, r0, r3
    b6b2:	bd10      	pop	{r4, pc}
    b6b4:	20005188 	.word	0x20005188

0000b6b8 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  s32_t timeout)
#endif
{
    b6b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    b6bc:	4605      	mov	r5, r0
    b6be:	9101      	str	r1, [sp, #4]
    b6c0:	4616      	mov	r6, r2
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
    b6c2:	f000 fd91 	bl	c1e8 <_impl_k_uptime_get_32>
    b6c6:	4607      	mov	r7, r0
	__asm__ volatile(
    b6c8:	f04f 0320 	mov.w	r3, #32
    b6cc:	f3ef 8811 	mrs	r8, BASEPRI
    b6d0:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
    b6d4:	8a6b      	ldrh	r3, [r5, #18]
    b6d6:	2b00      	cmp	r3, #0
    b6d8:	d03d      	beq.n	b756 <net_buf_alloc_len+0x9e>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
    b6da:	8a2a      	ldrh	r2, [r5, #16]
    b6dc:	429a      	cmp	r2, r3
    b6de:	d92a      	bls.n	b736 <net_buf_alloc_len+0x7e>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
    b6e0:	2100      	movs	r1, #0
    b6e2:	4628      	mov	r0, r5
    b6e4:	f000 fadb 	bl	bc9e <k_queue_get>
			if (buf) {
    b6e8:	4604      	mov	r4, r0
    b6ea:	b320      	cbz	r0, b736 <net_buf_alloc_len+0x7e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    b6ec:	f388 8811 	msr	BASEPRI, r8
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
    b6f0:	9b01      	ldr	r3, [sp, #4]
    b6f2:	2b00      	cmp	r3, #0
    b6f4:	d03c      	beq.n	b770 <net_buf_alloc_len+0xb8>
		if (timeout != K_NO_WAIT && timeout != K_FOREVER) {
    b6f6:	1c73      	adds	r3, r6, #1
    b6f8:	2b01      	cmp	r3, #1
    b6fa:	d906      	bls.n	b70a <net_buf_alloc_len+0x52>
    b6fc:	f000 fd74 	bl	c1e8 <_impl_k_uptime_get_32>
			u32_t diff = k_uptime_get_32() - alloc_start;
    b700:	1bc0      	subs	r0, r0, r7

			timeout -= min(timeout, diff);
    b702:	42b0      	cmp	r0, r6
    b704:	bf94      	ite	ls
    b706:	1a36      	subls	r6, r6, r0
    b708:	1bb6      	subhi	r6, r6, r6
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    b70a:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
    b70c:	4f1e      	ldr	r7, [pc, #120]	; (b788 <net_buf_alloc_len+0xd0>)
    b70e:	eb07 1343 	add.w	r3, r7, r3, lsl #5
    b712:	4632      	mov	r2, r6
    b714:	699b      	ldr	r3, [r3, #24]
    b716:	681b      	ldr	r3, [r3, #0]
    b718:	a901      	add	r1, sp, #4
    b71a:	681b      	ldr	r3, [r3, #0]
    b71c:	4620      	mov	r0, r4
    b71e:	4798      	blx	r3
    b720:	4605      	mov	r5, r0
		}

		buf->__buf = data_alloc(buf, &size, timeout);
    b722:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
    b724:	bb28      	cbnz	r0, b772 <net_buf_alloc_len+0xba>
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	k_lifo_put(&pool->free, buf);
    b726:	79a0      	ldrb	r0, [r4, #6]
    b728:	4621      	mov	r1, r4
    b72a:	eb07 1040 	add.w	r0, r7, r0, lsl #5
    b72e:	f000 fa96 	bl	bc5e <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
    b732:	462c      	mov	r4, r5
    b734:	e018      	b.n	b768 <net_buf_alloc_len+0xb0>
		uninit_count = pool->uninit_count--;
    b736:	8a6b      	ldrh	r3, [r5, #18]
    b738:	1e5a      	subs	r2, r3, #1
    b73a:	826a      	strh	r2, [r5, #18]
    b73c:	f388 8811 	msr	BASEPRI, r8
	buf = &pool->__bufs[pool->buf_count - uninit_count];
    b740:	8a2c      	ldrh	r4, [r5, #16]
    b742:	1ae4      	subs	r4, r4, r3
    b744:	69eb      	ldr	r3, [r5, #28]
    b746:	2218      	movs	r2, #24
    b748:	fb02 3404 	mla	r4, r2, r4, r3
	return pool - _net_buf_pool_list;
    b74c:	4b0e      	ldr	r3, [pc, #56]	; (b788 <net_buf_alloc_len+0xd0>)
    b74e:	1aed      	subs	r5, r5, r3
    b750:	116d      	asrs	r5, r5, #5
	buf->pool_id = pool_id(pool);
    b752:	71a5      	strb	r5, [r4, #6]
		goto success;
    b754:	e7cc      	b.n	b6f0 <net_buf_alloc_len+0x38>
    b756:	f388 8811 	msr	BASEPRI, r8
	buf = k_lifo_get(&pool->free, timeout);
    b75a:	4631      	mov	r1, r6
    b75c:	4628      	mov	r0, r5
    b75e:	f000 fa9e 	bl	bc9e <k_queue_get>
	if (!buf) {
    b762:	4604      	mov	r4, r0
    b764:	2800      	cmp	r0, #0
    b766:	d1c3      	bne.n	b6f0 <net_buf_alloc_len+0x38>
	pool->avail_count--;
	NET_BUF_ASSERT(pool->avail_count >= 0);
#endif

	return buf;
}
    b768:	4620      	mov	r0, r4
    b76a:	b002      	add	sp, #8
    b76c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		buf->__buf = NULL;
    b770:	6123      	str	r3, [r4, #16]
	buf->ref   = 1;
    b772:	2301      	movs	r3, #1
    b774:	7123      	strb	r3, [r4, #4]
	buf->flags = 0;
    b776:	2300      	movs	r3, #0
	buf->frags = NULL;
    b778:	6023      	str	r3, [r4, #0]
	buf->flags = 0;
    b77a:	7163      	strb	r3, [r4, #5]
	buf->size  = size;
    b77c:	9a01      	ldr	r2, [sp, #4]
	buf->len  = 0;
    b77e:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
    b780:	6923      	ldr	r3, [r4, #16]
    b782:	81e2      	strh	r2, [r4, #14]
    b784:	60a3      	str	r3, [r4, #8]
	return buf;
    b786:	e7ef      	b.n	b768 <net_buf_alloc_len+0xb0>
    b788:	20005188 	.word	0x20005188

0000b78c <net_buf_alloc_fixed>:
				       line);
}
#else
struct net_buf *net_buf_alloc_fixed(struct net_buf_pool *pool, s32_t timeout)
{
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    b78c:	6983      	ldr	r3, [r0, #24]

	return net_buf_alloc_len(pool, fixed->data_size, timeout);
    b78e:	685b      	ldr	r3, [r3, #4]
    b790:	460a      	mov	r2, r1
    b792:	6819      	ldr	r1, [r3, #0]
    b794:	f7ff bf90 	b.w	b6b8 <net_buf_alloc_len>

0000b798 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, s32_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, s32_t timeout)
#endif
{
    b798:	b570      	push	{r4, r5, r6, lr}
    b79a:	4606      	mov	r6, r0
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p timeout %d", func, line, fifo, timeout);

	buf = k_fifo_get(fifo, timeout);
    b79c:	f000 fa7f 	bl	bc9e <k_queue_get>
	if (!buf) {
    b7a0:	4605      	mov	r5, r0
    b7a2:	b128      	cbz	r0, b7b0 <net_buf_get+0x18>
    b7a4:	4604      	mov	r4, r0
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
    b7a6:	7963      	ldrb	r3, [r4, #5]
    b7a8:	f013 0301 	ands.w	r3, r3, #1
    b7ac:	d102      	bne.n	b7b4 <net_buf_get+0x1c>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
    b7ae:	6023      	str	r3, [r4, #0]

	return buf;
}
    b7b0:	4628      	mov	r0, r5
    b7b2:	bd70      	pop	{r4, r5, r6, pc}
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
    b7b4:	2100      	movs	r1, #0
    b7b6:	4630      	mov	r0, r6
    b7b8:	f000 fa71 	bl	bc9e <k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
    b7bc:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
    b7be:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
    b7c0:	f023 0301 	bic.w	r3, r3, #1
    b7c4:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
    b7c6:	4604      	mov	r4, r0
    b7c8:	e7ed      	b.n	b7a6 <net_buf_get+0xe>

0000b7ca <net_buf_simple_reserve>:
{
	NET_BUF_ASSERT(buf);
	NET_BUF_ASSERT(buf->len == 0);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
    b7ca:	6883      	ldr	r3, [r0, #8]
    b7cc:	4419      	add	r1, r3
    b7ce:	6001      	str	r1, [r0, #0]
    b7d0:	4770      	bx	lr

0000b7d2 <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
    b7d2:	b410      	push	{r4}
	struct net_buf *tail;

	NET_BUF_ASSERT(fifo);
	NET_BUF_ASSERT(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
    b7d4:	460a      	mov	r2, r1
    b7d6:	6814      	ldr	r4, [r2, #0]
    b7d8:	b914      	cbnz	r4, b7e0 <net_buf_put+0xe>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
}
    b7da:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
    b7dc:	f000 ba43 	b.w	bc66 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
    b7e0:	7953      	ldrb	r3, [r2, #5]
    b7e2:	f043 0301 	orr.w	r3, r3, #1
    b7e6:	7153      	strb	r3, [r2, #5]
    b7e8:	4622      	mov	r2, r4
    b7ea:	e7f4      	b.n	b7d6 <net_buf_put+0x4>

0000b7ec <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
    b7ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b7ee:	4d15      	ldr	r5, [pc, #84]	; (b844 <net_buf_unref+0x58>)
    b7f0:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
    b7f2:	2600      	movs	r6, #0
	while (buf) {
    b7f4:	b904      	cbnz	r4, b7f8 <net_buf_unref+0xc>
    b7f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (--buf->ref > 0) {
    b7f8:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
    b7fa:	6827      	ldr	r7, [r4, #0]
		if (--buf->ref > 0) {
    b7fc:	3b01      	subs	r3, #1
    b7fe:	b2db      	uxtb	r3, r3
    b800:	7123      	strb	r3, [r4, #4]
    b802:	2b00      	cmp	r3, #0
    b804:	d1f7      	bne.n	b7f6 <net_buf_unref+0xa>
		if (buf->__buf) {
    b806:	6921      	ldr	r1, [r4, #16]
    b808:	b159      	cbz	r1, b822 <net_buf_unref+0x36>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
    b80a:	7963      	ldrb	r3, [r4, #5]
    b80c:	079b      	lsls	r3, r3, #30
    b80e:	d407      	bmi.n	b820 <net_buf_unref+0x34>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    b810:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
    b812:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    b816:	4620      	mov	r0, r4
    b818:	699b      	ldr	r3, [r3, #24]
    b81a:	681b      	ldr	r3, [r3, #0]
    b81c:	689b      	ldr	r3, [r3, #8]
    b81e:	4798      	blx	r3
			buf->__buf = NULL;
    b820:	6126      	str	r6, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
    b822:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
    b824:	60a6      	str	r6, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		pool->avail_count++;
		NET_BUF_ASSERT(pool->avail_count <= pool->buf_count);
#endif

		if (pool->destroy) {
    b826:	eb05 1340 	add.w	r3, r5, r0, lsl #5
		buf->frags = NULL;
    b82a:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
    b82c:	695b      	ldr	r3, [r3, #20]
    b82e:	b11b      	cbz	r3, b838 <net_buf_unref+0x4c>
			pool->destroy(buf);
    b830:	4620      	mov	r0, r4
    b832:	4798      	blx	r3
{
    b834:	463c      	mov	r4, r7
    b836:	e7dd      	b.n	b7f4 <net_buf_unref+0x8>
	k_lifo_put(&pool->free, buf);
    b838:	4621      	mov	r1, r4
    b83a:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    b83e:	f000 fa0e 	bl	bc5e <k_queue_prepend>
    b842:	e7f7      	b.n	b834 <net_buf_unref+0x48>
    b844:	20005188 	.word	0x20005188

0000b848 <net_buf_ref>:
{
	NET_BUF_ASSERT(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
    b848:	7903      	ldrb	r3, [r0, #4]
    b84a:	3301      	adds	r3, #1
    b84c:	7103      	strb	r3, [r0, #4]
	return buf;
}
    b84e:	4770      	bx	lr

0000b850 <net_buf_simple_add>:
	return buf->data + buf->len;
    b850:	8883      	ldrh	r3, [r0, #4]
    b852:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
    b854:	4419      	add	r1, r3
    b856:	8081      	strh	r1, [r0, #4]
	return tail;
}
    b858:	18d0      	adds	r0, r2, r3
    b85a:	4770      	bx	lr

0000b85c <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
    b85c:	b430      	push	{r4, r5}
    b85e:	8883      	ldrh	r3, [r0, #4]
    b860:	6804      	ldr	r4, [r0, #0]
	buf->len += len;
    b862:	189d      	adds	r5, r3, r2
    b864:	8085      	strh	r5, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
    b866:	18e0      	adds	r0, r4, r3
}
    b868:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
    b86a:	f7f4 bed6 	b.w	61a <memcpy>

0000b86e <net_buf_simple_add_u8>:
    b86e:	8883      	ldrh	r3, [r0, #4]
    b870:	6802      	ldr	r2, [r0, #0]

u8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, u8_t val)
{
    b872:	b510      	push	{r4, lr}
	buf->len += len;
    b874:	1c5c      	adds	r4, r3, #1
    b876:	8084      	strh	r4, [r0, #4]
	u8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
    b878:	54d1      	strb	r1, [r2, r3]

	return u8;
}
    b87a:	18d0      	adds	r0, r2, r3
    b87c:	bd10      	pop	{r4, pc}

0000b87e <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
    b87e:	8883      	ldrh	r3, [r0, #4]
    b880:	1a5b      	subs	r3, r3, r1
    b882:	8083      	strh	r3, [r0, #4]
	return buf->data += len;
    b884:	6803      	ldr	r3, [r0, #0]
    b886:	4419      	add	r1, r3
    b888:	6001      	str	r1, [r0, #0]
}
    b88a:	4608      	mov	r0, r1
    b88c:	4770      	bx	lr

0000b88e <net_buf_simple_pull_u8>:

u8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
    b88e:	b508      	push	{r3, lr}
	u8_t val;

	val = buf->data[0];
    b890:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
    b892:	2101      	movs	r1, #1
	val = buf->data[0];
    b894:	781a      	ldrb	r2, [r3, #0]
	net_buf_simple_pull(buf, 1);
    b896:	f7ff fff2 	bl	b87e <net_buf_simple_pull>

	return val;
}
    b89a:	4610      	mov	r0, r2
    b89c:	bd08      	pop	{r3, pc}

0000b89e <net_buf_simple_headroom>:
	return sys_be32_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
    b89e:	6802      	ldr	r2, [r0, #0]
    b8a0:	6880      	ldr	r0, [r0, #8]
}
    b8a2:	1a10      	subs	r0, r2, r0
    b8a4:	4770      	bx	lr
	...

0000b8a8 <_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void _sys_device_do_config_level(int level)
{
    b8a8:	b538      	push	{r3, r4, r5, lr}
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1];
    b8aa:	4b08      	ldr	r3, [pc, #32]	; (b8cc <_sys_device_do_config_level+0x24>)
    b8ac:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    b8b0:	3001      	adds	r0, #1
    b8b2:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    b8b6:	4620      	mov	r0, r4
    b8b8:	42a8      	cmp	r0, r5
    b8ba:	f104 040c 	add.w	r4, r4, #12
    b8be:	d300      	bcc.n	b8c2 <_sys_device_do_config_level+0x1a>
		struct device_config *device = info->config;

		device->init(info);
		_k_object_init(info);
	}
}
    b8c0:	bd38      	pop	{r3, r4, r5, pc}
		device->init(info);
    b8c2:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    b8c6:	685b      	ldr	r3, [r3, #4]
    b8c8:	4798      	blx	r3
    b8ca:	e7f4      	b.n	b8b6 <_sys_device_do_config_level+0xe>
    b8cc:	0000eec0 	.word	0x0000eec0

0000b8d0 <device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
    b8d0:	4b10      	ldr	r3, [pc, #64]	; (b914 <device_get_binding+0x44>)
{
    b8d2:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
    b8d4:	4c10      	ldr	r4, [pc, #64]	; (b918 <device_get_binding+0x48>)
{
    b8d6:	4605      	mov	r5, r0
    b8d8:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
    b8da:	429c      	cmp	r4, r3
    b8dc:	d104      	bne.n	b8e8 <device_get_binding+0x18>
    b8de:	4c0e      	ldr	r4, [pc, #56]	; (b918 <device_get_binding+0x48>)
		if (info->driver_api != NULL && info->config->name == name) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
    b8e0:	42b4      	cmp	r4, r6
    b8e2:	d109      	bne.n	b8f8 <device_get_binding+0x28>
		if (!strcmp(name, info->config->name)) {
			return info;
		}
	}

	return NULL;
    b8e4:	2400      	movs	r4, #0
    b8e6:	e012      	b.n	b90e <device_get_binding+0x3e>
		if (info->driver_api != NULL && info->config->name == name) {
    b8e8:	6862      	ldr	r2, [r4, #4]
    b8ea:	b11a      	cbz	r2, b8f4 <device_get_binding+0x24>
    b8ec:	6822      	ldr	r2, [r4, #0]
    b8ee:	6812      	ldr	r2, [r2, #0]
    b8f0:	42aa      	cmp	r2, r5
    b8f2:	d00c      	beq.n	b90e <device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
    b8f4:	340c      	adds	r4, #12
    b8f6:	e7f0      	b.n	b8da <device_get_binding+0xa>
		if (!info->driver_api) {
    b8f8:	6863      	ldr	r3, [r4, #4]
    b8fa:	b90b      	cbnz	r3, b900 <device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
    b8fc:	340c      	adds	r4, #12
    b8fe:	e7ef      	b.n	b8e0 <device_get_binding+0x10>
		if (!strcmp(name, info->config->name)) {
    b900:	6823      	ldr	r3, [r4, #0]
    b902:	4628      	mov	r0, r5
    b904:	6819      	ldr	r1, [r3, #0]
    b906:	f7f4 fe66 	bl	5d6 <strcmp>
    b90a:	2800      	cmp	r0, #0
    b90c:	d1f6      	bne.n	b8fc <device_get_binding+0x2c>
}
    b90e:	4620      	mov	r0, r4
    b910:	bd70      	pop	{r4, r5, r6, pc}
    b912:	bf00      	nop
    b914:	2000512c 	.word	0x2000512c
    b918:	20005090 	.word	0x20005090

0000b91c <_sys_power_save_idle_exit>:
	if (_sys_pm_idle_exit_notify) {
		_sys_soc_resume();
	}
#endif

	if (_must_enter_tickless_idle(ticks)) {
    b91c:	1c43      	adds	r3, r0, #1
    b91e:	d003      	beq.n	b928 <_sys_power_save_idle_exit+0xc>
    b920:	4b03      	ldr	r3, [pc, #12]	; (b930 <_sys_power_save_idle_exit+0x14>)
    b922:	681b      	ldr	r3, [r3, #0]
    b924:	4298      	cmp	r0, r3
    b926:	db01      	blt.n	b92c <_sys_power_save_idle_exit+0x10>
		/* Resume normal periodic system timer interrupts */
		_timer_idle_exit();
    b928:	f7f6 baba 	b.w	1ea0 <_timer_idle_exit>
    b92c:	4770      	bx	lr
    b92e:	bf00      	nop
    b930:	20005080 	.word	0x20005080

0000b934 <idle>:
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    b934:	4d0f      	ldr	r5, [pc, #60]	; (b974 <idle+0x40>)
#else
#define IDLE_YIELD_IF_COOP() do { } while ((0))
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
    b936:	b580      	push	{r7, lr}
	if (_must_enter_tickless_idle(ticks)) {
    b938:	4f0f      	ldr	r7, [pc, #60]	; (b978 <idle+0x44>)
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b93a:	f105 0610 	add.w	r6, r5, #16
	__asm__ volatile(
    b93e:	f04f 0220 	mov.w	r2, #32
    b942:	f3ef 8311 	mrs	r3, BASEPRI
    b946:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
    b94a:	692b      	ldr	r3, [r5, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b94c:	42b3      	cmp	r3, r6
    b94e:	d00a      	beq.n	b966 <idle+0x32>
static inline s32_t _get_next_timeout_expiry(void)
{
	struct _timeout *t = (struct _timeout *)
			     sys_dlist_peek_head(&_timeout_q);

	return t ? t->delta_ticks_from_prev : K_FOREVER;
    b950:	b14b      	cbz	r3, b966 <idle+0x32>
    b952:	691c      	ldr	r4, [r3, #16]
    b954:	1c63      	adds	r3, r4, #1
    b956:	d008      	beq.n	b96a <idle+0x36>
    b958:	683b      	ldr	r3, [r7, #0]
    b95a:	42a3      	cmp	r3, r4
    b95c:	dd05      	ble.n	b96a <idle+0x36>
	_kernel.idle = ticks;
    b95e:	61ac      	str	r4, [r5, #24]
	k_cpu_idle();
    b960:	f7f5 fa06 	bl	d70 <k_cpu_idle>
    b964:	e7eb      	b.n	b93e <idle+0xa>
    b966:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		_timer_idle_enter(ticks);
    b96a:	4620      	mov	r0, r4
    b96c:	f7f6 fa84 	bl	1e78 <_timer_idle_enter>
    b970:	e7f5      	b.n	b95e <idle+0x2a>
    b972:	bf00      	nop
    b974:	200029cc 	.word	0x200029cc
    b978:	20005080 	.word	0x20005080

0000b97c <_bss_zero>:
 *
 * @return N/A
 */
void _bss_zero(void)
{
	memset(&__bss_start, 0,
    b97c:	4802      	ldr	r0, [pc, #8]	; (b988 <_bss_zero+0xc>)
    b97e:	4a03      	ldr	r2, [pc, #12]	; (b98c <_bss_zero+0x10>)
    b980:	2100      	movs	r1, #0
    b982:	1a12      	subs	r2, r2, r0
    b984:	f7f4 be75 	b.w	672 <memset>
    b988:	20000000 	.word	0x20000000
    b98c:	20002df8 	.word	0x20002df8

0000b990 <_data_copy>:
 *
 * @return N/A
 */
void _data_copy(void)
{
	memcpy(&__data_ram_start, &__data_rom_start,
    b990:	4802      	ldr	r0, [pc, #8]	; (b99c <_data_copy+0xc>)
    b992:	4a03      	ldr	r2, [pc, #12]	; (b9a0 <_data_copy+0x10>)
    b994:	4903      	ldr	r1, [pc, #12]	; (b9a4 <_data_copy+0x14>)
    b996:	1a12      	subs	r2, r2, r0
    b998:	f7f4 be3f 	b.w	61a <memcpy>
    b99c:	20004cf8 	.word	0x20004cf8
    b9a0:	200051c8 	.word	0x200051c8
    b9a4:	0000ef28 	.word	0x0000ef28

0000b9a8 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    b9a8:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
    b9aa:	2002      	movs	r0, #2
    b9ac:	f7ff ff7c 	bl	b8a8 <_sys_device_do_config_level>
	if (boot_delay > 0) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
    b9b0:	4908      	ldr	r1, [pc, #32]	; (b9d4 <bg_thread_main+0x2c>)
    b9b2:	4809      	ldr	r0, [pc, #36]	; (b9d8 <bg_thread_main+0x30>)
    b9b4:	f7f5 fcae 	bl	1314 <printk>

	/* Final init level before app starts */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
    b9b8:	2003      	movs	r0, #3
    b9ba:	f7ff ff75 	bl	b8a8 <_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	_init_static_threads();
    b9be:	f000 fe15 	bl	c5ec <_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
    b9c2:	f7f4 feb5 	bl	730 <main>

	/* Terminate thread normally since it has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
    b9c6:	4a05      	ldr	r2, [pc, #20]	; (b9dc <bg_thread_main+0x34>)
    b9c8:	7a13      	ldrb	r3, [r2, #8]
    b9ca:	f023 0301 	bic.w	r3, r3, #1
    b9ce:	7213      	strb	r3, [r2, #8]
    b9d0:	bd08      	pop	{r3, pc}
    b9d2:	bf00      	nop
    b9d4:	0000eedc 	.word	0x0000eedc
    b9d8:	0000eef8 	.word	0x0000eef8
    b9dc:	20002964 	.word	0x20002964

0000b9e0 <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
    b9e0:	b580      	push	{r7, lr}
    b9e2:	b086      	sub	sp, #24
    b9e4:	4e32      	ldr	r6, [pc, #200]	; (bab0 <_Cstart+0xd0>)
    b9e6:	af06      	add	r7, sp, #24
	_IntLibInit();
    b9e8:	f7f4 ff7c 	bl	8e4 <_IntLibInit>
    b9ec:	2324      	movs	r3, #36	; 0x24
    b9ee:	199a      	adds	r2, r3, r6
	list->head = (sys_dnode_t *)list;
    b9f0:	519a      	str	r2, [r3, r6]
    b9f2:	3308      	adds	r3, #8
	for (int ii = 0; ii < K_NUM_PRIORITIES; ii++) {
    b9f4:	f5b3 7f92 	cmp.w	r3, #292	; 0x124
	list->tail = (sys_dnode_t *)list;
    b9f8:	6052      	str	r2, [r2, #4]
    b9fa:	d1f8      	bne.n	b9ee <_Cstart+0xe>
	_ready_q.cache = _main_thread;
    b9fc:	4d2d      	ldr	r5, [pc, #180]	; (bab4 <_Cstart+0xd4>)
	_setup_new_thread(_main_thread, _main_stack,
    b9fe:	f8df 80dc 	ldr.w	r8, [pc, #220]	; badc <_Cstart+0xfc>
	_ready_q.cache = _main_thread;
    ba02:	61f5      	str	r5, [r6, #28]
	_setup_new_thread(_main_thread, _main_stack,
    ba04:	2400      	movs	r4, #0
    ba06:	f04f 0901 	mov.w	r9, #1
    ba0a:	4643      	mov	r3, r8
    ba0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    ba10:	4929      	ldr	r1, [pc, #164]	; (bab8 <_Cstart+0xd8>)
    ba12:	f8cd 9010 	str.w	r9, [sp, #16]
    ba16:	4628      	mov	r0, r5
    ba18:	9403      	str	r4, [sp, #12]
    ba1a:	9402      	str	r4, [sp, #8]
    ba1c:	9401      	str	r4, [sp, #4]
    ba1e:	9400      	str	r4, [sp, #0]
    ba20:	f000 fd9c 	bl	c55c <_setup_new_thread>
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    ba24:	7a6b      	ldrb	r3, [r5, #9]
	_add_thread_to_ready_q(_main_thread);
    ba26:	4628      	mov	r0, r5
    ba28:	f023 0304 	bic.w	r3, r3, #4
    ba2c:	726b      	strb	r3, [r5, #9]
    ba2e:	f000 f97d 	bl	bd2c <_add_thread_to_ready_q>
	_setup_new_thread(thr, stack,
    ba32:	230f      	movs	r3, #15
    ba34:	9303      	str	r3, [sp, #12]
    ba36:	4921      	ldr	r1, [pc, #132]	; (babc <_Cstart+0xdc>)
    ba38:	f8cd 9010 	str.w	r9, [sp, #16]
    ba3c:	9402      	str	r4, [sp, #8]
    ba3e:	9401      	str	r4, [sp, #4]
    ba40:	9400      	str	r4, [sp, #0]
    ba42:	4b1f      	ldr	r3, [pc, #124]	; (bac0 <_Cstart+0xe0>)
    ba44:	481f      	ldr	r0, [pc, #124]	; (bac4 <_Cstart+0xe4>)
    ba46:	f44f 72a0 	mov.w	r2, #320	; 0x140
    ba4a:	f000 fd87 	bl	c55c <_setup_new_thread>
    ba4e:	4b1d      	ldr	r3, [pc, #116]	; (bac4 <_Cstart+0xe4>)
    ba50:	4a1c      	ldr	r2, [pc, #112]	; (bac4 <_Cstart+0xe4>)
    ba52:	7a5b      	ldrb	r3, [r3, #9]
    ba54:	f023 0304 	bic.w	r3, r3, #4
    ba58:	7253      	strb	r3, [r2, #9]
	_add_thread_to_ready_q(thr);
    ba5a:	4610      	mov	r0, r2
    ba5c:	f000 f966 	bl	bd2c <_add_thread_to_ready_q>
	list->head = (sys_dnode_t *)list;
    ba60:	4b19      	ldr	r3, [pc, #100]	; (bac8 <_Cstart+0xe8>)
    ba62:	6133      	str	r3, [r6, #16]
	list->tail = (sys_dnode_t *)list;
    ba64:	6173      	str	r3, [r6, #20]
 * @return N/A
 */
static ALWAYS_INLINE void _InterruptStackSetup(void)
{
#ifdef CONFIG_MPU_REQUIRES_POWER_OF_TWO_ALIGNMENT
	u32_t msp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
    ba66:	4b19      	ldr	r3, [pc, #100]	; (bacc <_Cstart+0xec>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    ba68:	f383 8808 	msr	MSP, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    ba6c:	4b18      	ldr	r3, [pc, #96]	; (bad0 <_Cstart+0xf0>)
    ba6e:	22e0      	movs	r2, #224	; 0xe0
    ba70:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    ba74:	77dc      	strb	r4, [r3, #31]
    ba76:	761c      	strb	r4, [r3, #24]
    ba78:	765c      	strb	r4, [r3, #25]
    ba7a:	769c      	strb	r4, [r3, #26]
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    ba7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    ba7e:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
    ba82:	625a      	str	r2, [r3, #36]	; 0x24
extern void _CpuIdleInit(void);
static ALWAYS_INLINE void kernel_arch_init(void)
{
	_InterruptStackSetup();
	_ExcSetup();
	_FaultInit();
    ba84:	f7f5 f8e4 	bl	c50 <_FaultInit>
	_CpuIdleInit();
    ba88:	f7f5 f96c 	bl	d64 <_CpuIdleInit>
	 */

	prepare_multithreading(dummy_thread);

	/* perform basic hardware initialization */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    ba8c:	4620      	mov	r0, r4
    ba8e:	f7ff ff0b 	bl	b8a8 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    ba92:	4648      	mov	r0, r9
    ba94:	f7ff ff08 	bl	b8a8 <_sys_device_do_config_level>
		MPU_GUARD_ALIGN_AND_SIZE;
#else
	start_of_main_stack =
		K_THREAD_STACK_BUFFER(main_stack) + main_stack_size;
#endif
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
    ba98:	4b0e      	ldr	r3, [pc, #56]	; (bad4 <_Cstart+0xf4>)

	_current = main_thread;
    ba9a:	60b5      	str	r5, [r6, #8]
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
    ba9c:	f023 0307 	bic.w	r3, r3, #7

	/* the ready queue cache already contains the main thread */

	__asm__ __volatile__(
    baa0:	4a0d      	ldr	r2, [pc, #52]	; (bad8 <_Cstart+0xf8>)
    baa2:	f383 8809 	msr	PSP, r3
    baa6:	2100      	movs	r1, #0
    baa8:	f381 8811 	msr	BASEPRI, r1
    baac:	4640      	mov	r0, r8
    baae:	4710      	bx	r2
    bab0:	200029cc 	.word	0x200029cc
    bab4:	20002964 	.word	0x20002964
    bab8:	20003bb8 	.word	0x20003bb8
    babc:	20003fb8 	.word	0x20003fb8
    bac0:	0000b935 	.word	0x0000b935
    bac4:	200028fc 	.word	0x200028fc
    bac8:	200029dc 	.word	0x200029dc
    bacc:	200048f8 	.word	0x200048f8
    bad0:	e000ed00 	.word	0xe000ed00
    bad4:	20003fb8 	.word	0x20003fb8
    bad8:	0000c4f5 	.word	0x0000c4f5
    badc:	0000b9a9 	.word	0x0000b9a9

0000bae0 <get_bit_ptr>:

/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct k_mem_pool *p, int level, int bn, u32_t **word)
{
    bae0:	b510      	push	{r4, lr}
	u32_t *bitarray = level <= p->max_inline_level ?
    bae2:	7ac4      	ldrb	r4, [r0, #11]
    bae4:	68c0      	ldr	r0, [r0, #12]
		&p->levels[level].bits : p->levels[level].bits_p;
    bae6:	428c      	cmp	r4, r1
    bae8:	f04f 040c 	mov.w	r4, #12
    baec:	bfb6      	itet	lt
    baee:	4361      	mullt	r1, r4
    baf0:	fb04 0101 	mlage	r1, r4, r1, r0
    baf4:	5841      	ldrlt	r1, [r0, r1]

	*word = &bitarray[bn / 32];
    baf6:	2420      	movs	r4, #32
    baf8:	fb92 f4f4 	sdiv	r4, r2, r4
    bafc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    bb00:	6019      	str	r1, [r3, #0]

	return bn & 0x1f;
}
    bb02:	f002 001f 	and.w	r0, r2, #31
    bb06:	bd10      	pop	{r4, pc}

0000bb08 <set_free_bit>:

static void set_free_bit(struct k_mem_pool *p, int level, int bn)
{
    bb08:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
    bb0a:	ab01      	add	r3, sp, #4
    bb0c:	f7ff ffe8 	bl	bae0 <get_bit_ptr>

	*word |= (1<<bit);
    bb10:	9a01      	ldr	r2, [sp, #4]
    bb12:	2301      	movs	r3, #1
    bb14:	fa03 f000 	lsl.w	r0, r3, r0
    bb18:	6813      	ldr	r3, [r2, #0]
    bb1a:	4303      	orrs	r3, r0
    bb1c:	6013      	str	r3, [r2, #0]
}
    bb1e:	b003      	add	sp, #12
    bb20:	f85d fb04 	ldr.w	pc, [sp], #4

0000bb24 <init_static_pools>:
		set_free_bit(p, 0, i);
	}
}

int init_static_pools(struct device *unused)
{
    bb24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bb28:	4c30      	ldr	r4, [pc, #192]	; (bbec <init_static_pools+0xc8>)
	ARG_UNUSED(unused);
	struct k_mem_pool *p;

	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
    bb2a:	4e31      	ldr	r6, [pc, #196]	; (bbf0 <init_static_pools+0xcc>)
		sys_dlist_init(&p->levels[i].free_list);
    bb2c:	270c      	movs	r7, #12
    bb2e:	f1a4 0510 	sub.w	r5, r4, #16
	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
    bb32:	42b5      	cmp	r5, r6
    bb34:	d302      	bcc.n	bb3c <init_static_pools+0x18>
		init_mem_pool(p);
	}

	return 0;
}
    bb36:	2000      	movs	r0, #0
    bb38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    bb3c:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    bb40:	f834 ec08 	ldrh.w	lr, [r4, #-8]
	u32_t *bits = p->buf + buflen;
    bb44:	f854 0c10 	ldr.w	r0, [r4, #-16]
	list->head = (sys_dnode_t *)list;
    bb48:	6024      	str	r4, [r4, #0]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    bb4a:	fb03 fe0e 	mul.w	lr, r3, lr
	u32_t *bits = p->buf + buflen;
    bb4e:	4470      	add	r0, lr
	list->tail = (sys_dnode_t *)list;
    bb50:	6064      	str	r4, [r4, #4]
	for (i = 0; i < p->n_levels; i++) {
    bb52:	2100      	movs	r1, #0
			bits += (nblocks + 31)/32;
    bb54:	f04f 0c20 	mov.w	ip, #32
	for (i = 0; i < p->n_levels; i++) {
    bb58:	f814 2c06 	ldrb.w	r2, [r4, #-6]
    bb5c:	4291      	cmp	r1, r2
    bb5e:	db07      	blt.n	bb70 <init_static_pools+0x4c>
    bb60:	f04f 0800 	mov.w	r8, #0
	for (i = 0; i < p->n_max; i++) {
    bb64:	f834 3c08 	ldrh.w	r3, [r4, #-8]
    bb68:	4598      	cmp	r8, r3
    bb6a:	db24      	blt.n	bbb6 <init_static_pools+0x92>
    bb6c:	3418      	adds	r4, #24
    bb6e:	e7de      	b.n	bb2e <init_static_pools+0xa>
		sys_dlist_init(&p->levels[i].free_list);
    bb70:	f854 ac04 	ldr.w	sl, [r4, #-4]
		int nblocks = buflen / sz;
    bb74:	fbbe f2f3 	udiv	r2, lr, r3
		sys_dlist_init(&p->levels[i].free_list);
    bb78:	fb07 f901 	mul.w	r9, r7, r1
		if (nblocks < 32) {
    bb7c:	2a1f      	cmp	r2, #31
		sys_dlist_init(&p->levels[i].free_list);
    bb7e:	eb0a 0809 	add.w	r8, sl, r9
		sz = _ALIGN4(sz / 4);
    bb82:	ea4f 0393 	mov.w	r3, r3, lsr #2
		sys_dlist_init(&p->levels[i].free_list);
    bb86:	f108 0b04 	add.w	fp, r8, #4
			bits += (nblocks + 31)/32;
    bb8a:	bfc8      	it	gt
    bb8c:	321f      	addgt	r2, #31
		sz = _ALIGN4(sz / 4);
    bb8e:	f103 0303 	add.w	r3, r3, #3
	list->head = (sys_dnode_t *)list;
    bb92:	f8c8 b004 	str.w	fp, [r8, #4]
	list->tail = (sys_dnode_t *)list;
    bb96:	f8c8 b008 	str.w	fp, [r8, #8]
			bits += (nblocks + 31)/32;
    bb9a:	bfca      	itet	gt
    bb9c:	fb92 f2fc 	sdivgt	r2, r2, ip
			p->max_inline_level = i;
    bba0:	f804 1c05 	strble.w	r1, [r4, #-5]
			p->levels[i].bits_p = bits;
    bba4:	f84a 0009 	strgt.w	r0, [sl, r9]
		sz = _ALIGN4(sz / 4);
    bba8:	f023 0303 	bic.w	r3, r3, #3
			bits += (nblocks + 31)/32;
    bbac:	bfc8      	it	gt
    bbae:	eb00 0082 	addgt.w	r0, r0, r2, lsl #2
	for (i = 0; i < p->n_levels; i++) {
    bbb2:	3101      	adds	r1, #1
    bbb4:	e7d0      	b.n	bb58 <init_static_pools+0x34>
	return p->buf + lsz * block;
    bbb6:	f854 2c0c 	ldr.w	r2, [r4, #-12]
		sys_dlist_append(&p->levels[0].free_list, block);
    bbba:	f854 3c04 	ldr.w	r3, [r4, #-4]
	return p->buf + lsz * block;
    bbbe:	f854 0c10 	ldr.w	r0, [r4, #-16]
    bbc2:	fb02 f208 	mul.w	r2, r2, r8
		sys_dlist_append(&p->levels[0].free_list, block);
    bbc6:	f103 0e04 	add.w	lr, r3, #4
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
    bbca:	f840 e002 	str.w	lr, [r0, r2]
	return p->buf + lsz * block;
    bbce:	1881      	adds	r1, r0, r2
	node->prev = list->tail;
    bbd0:	689a      	ldr	r2, [r3, #8]
    bbd2:	604a      	str	r2, [r1, #4]

	list->tail->next = node;
    bbd4:	689a      	ldr	r2, [r3, #8]
		set_free_bit(p, 0, i);
    bbd6:	4628      	mov	r0, r5
    bbd8:	6011      	str	r1, [r2, #0]
	list->tail = node;
    bbda:	6099      	str	r1, [r3, #8]
    bbdc:	4642      	mov	r2, r8
    bbde:	2100      	movs	r1, #0
    bbe0:	f7ff ff92 	bl	bb08 <set_free_bit>
	for (i = 0; i < p->n_max; i++) {
    bbe4:	f108 0801 	add.w	r8, r8, #1
    bbe8:	e7bc      	b.n	bb64 <init_static_pools+0x40>
    bbea:	bf00      	nop
    bbec:	20005170 	.word	0x20005170
    bbf0:	20005160 	.word	0x20005160

0000bbf4 <k_queue_init>:
	list->head = NULL;
    bbf4:	2300      	movs	r3, #0
    bbf6:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
    bbf8:	6043      	str	r3, [r0, #4]
void k_queue_init(struct k_queue *queue)
{
	sys_slist_init(&queue->data_q);
	sys_dlist_init(&queue->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&queue->poll_events);
    bbfa:	f100 0308 	add.w	r3, r0, #8
	list->head = (sys_dnode_t *)list;
    bbfe:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
    bc00:	60c3      	str	r3, [r0, #12]
    bc02:	4770      	bx	lr

0000bc04 <k_queue_insert>:

	irq_unlock(key);
}

void k_queue_insert(struct k_queue *queue, void *prev, void *data)
{
    bc04:	b510      	push	{r4, lr}
    bc06:	f04f 0320 	mov.w	r3, #32
    bc0a:	f3ef 8411 	mrs	r4, BASEPRI
    bc0e:	f383 8811 	msr	BASEPRI, r3
	if (!prev) {
    bc12:	b931      	cbnz	r1, bc22 <k_queue_insert+0x1e>
	node->next = list->head;
    bc14:	6803      	ldr	r3, [r0, #0]
    bc16:	6013      	str	r3, [r2, #0]
	if (!list->tail) {
    bc18:	6843      	ldr	r3, [r0, #4]
	list->head = node;
    bc1a:	6002      	str	r2, [r0, #0]
	if (!list->tail) {
    bc1c:	b943      	cbnz	r3, bc30 <k_queue_insert+0x2c>
		list->tail = node;
    bc1e:	6042      	str	r2, [r0, #4]
    bc20:	e006      	b.n	bc30 <k_queue_insert+0x2c>
	} else if (!prev->next) {
    bc22:	680b      	ldr	r3, [r1, #0]
	node->next = NULL;
    bc24:	6013      	str	r3, [r2, #0]
	} else if (!prev->next) {
    bc26:	b98b      	cbnz	r3, bc4c <k_queue_insert+0x48>
	if (!list->tail) {
    bc28:	6843      	ldr	r3, [r0, #4]
    bc2a:	b96b      	cbnz	r3, bc48 <k_queue_insert+0x44>
		list->tail = node;
    bc2c:	6042      	str	r2, [r0, #4]
		list->head = node;
    bc2e:	6002      	str	r2, [r0, #0]
	return _handle_obj_poll_events(&queue->poll_events, state);
    bc30:	2104      	movs	r1, #4
    bc32:	3008      	adds	r0, #8
    bc34:	f000 ff5e 	bl	caf4 <_handle_obj_poll_events>
#endif /* !CONFIG_POLL */

	sys_slist_insert(&queue->data_q, prev, data);

#if defined(CONFIG_POLL)
	if (handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE)) {
    bc38:	b150      	cbz	r0, bc50 <k_queue_insert+0x4c>
	_update_time_slice_before_swap();
    bc3a:	f000 fa23 	bl	c084 <_update_time_slice_before_swap>
	return __swap(key);
    bc3e:	4620      	mov	r0, r4
		return;
	}
#endif /* CONFIG_POLL */

	irq_unlock(key);
}
    bc40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bc44:	f7f4 be5a 	b.w	8fc <__swap>
		list->tail->next = node;
    bc48:	601a      	str	r2, [r3, #0]
    bc4a:	e7e8      	b.n	bc1e <k_queue_insert+0x1a>
		prev->next = node;
    bc4c:	600a      	str	r2, [r1, #0]
    bc4e:	e7ef      	b.n	bc30 <k_queue_insert+0x2c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    bc50:	f384 8811 	msr	BASEPRI, r4
    bc54:	bd10      	pop	{r4, pc}

0000bc56 <k_queue_append>:

void k_queue_append(struct k_queue *queue, void *data)
{
	return k_queue_insert(queue, queue->data_q.tail, data);
    bc56:	460a      	mov	r2, r1
    bc58:	6841      	ldr	r1, [r0, #4]
    bc5a:	f7ff bfd3 	b.w	bc04 <k_queue_insert>

0000bc5e <k_queue_prepend>:
}

void k_queue_prepend(struct k_queue *queue, void *data)
{
	return k_queue_insert(queue, NULL, data);
    bc5e:	460a      	mov	r2, r1
    bc60:	2100      	movs	r1, #0
    bc62:	f7ff bfcf 	b.w	bc04 <k_queue_insert>

0000bc66 <k_queue_append_list>:
}

void k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
    bc66:	b510      	push	{r4, lr}
	__asm__ volatile(
    bc68:	f04f 0320 	mov.w	r3, #32
    bc6c:	f3ef 8411 	mrs	r4, BASEPRI
    bc70:	f383 8811 	msr	BASEPRI, r3
	if (!list->tail) {
    bc74:	6843      	ldr	r3, [r0, #4]
    bc76:	b96b      	cbnz	r3, bc94 <k_queue_append_list+0x2e>
		list->head = (sys_snode_t *)head;
    bc78:	6001      	str	r1, [r0, #0]
		list->tail = (sys_snode_t *)tail;
    bc7a:	6042      	str	r2, [r0, #4]
	return _handle_obj_poll_events(&queue->poll_events, state);
    bc7c:	2104      	movs	r1, #4
    bc7e:	3008      	adds	r0, #8
    bc80:	f000 ff38 	bl	caf4 <_handle_obj_poll_events>
			return;
		}
	}
#else
	sys_slist_append_list(&queue->data_q, head, tail);
	if (handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE)) {
    bc84:	b140      	cbz	r0, bc98 <k_queue_append_list+0x32>
	_update_time_slice_before_swap();
    bc86:	f000 f9fd 	bl	c084 <_update_time_slice_before_swap>
	return __swap(key);
    bc8a:	4620      	mov	r0, r4
		return;
	}
#endif /* !CONFIG_POLL */

	irq_unlock(key);
}
    bc8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bc90:	f7f4 be34 	b.w	8fc <__swap>
		list->tail->next = (sys_snode_t *)head;
    bc94:	6019      	str	r1, [r3, #0]
    bc96:	e7f0      	b.n	bc7a <k_queue_append_list+0x14>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    bc98:	f384 8811 	msr	BASEPRI, r4
    bc9c:	bd10      	pop	{r4, pc}

0000bc9e <k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *k_queue_get(struct k_queue *queue, s32_t timeout)
{
    bc9e:	b530      	push	{r4, r5, lr}
    bca0:	4604      	mov	r4, r0
    bca2:	b087      	sub	sp, #28
    bca4:	460d      	mov	r5, r1
	__asm__ volatile(
    bca6:	f04f 0220 	mov.w	r2, #32
    bcaa:	f3ef 8311 	mrs	r3, BASEPRI
    bcae:	f382 8811 	msr	BASEPRI, r2
    bcb2:	6802      	ldr	r2, [r0, #0]
	unsigned int key;
	void *data;

	key = irq_lock();

	if (likely(!sys_slist_is_empty(&queue->data_q))) {
    bcb4:	b152      	cbz	r2, bccc <k_queue_get+0x2e>
	list->head = node->next;
    bcb6:	6811      	ldr	r1, [r2, #0]
    bcb8:	6001      	str	r1, [r0, #0]
	if (list->tail == node) {
    bcba:	6840      	ldr	r0, [r0, #4]
    bcbc:	4282      	cmp	r2, r0
		list->tail = list->head;
    bcbe:	bf08      	it	eq
    bcc0:	6061      	streq	r1, [r4, #4]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    bcc2:	f383 8811 	msr	BASEPRI, r3
#else
	_pend_current_thread(&queue->wait_q, timeout);

	return _Swap(key) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
    bcc6:	4610      	mov	r0, r2
    bcc8:	b007      	add	sp, #28
    bcca:	bd30      	pop	{r4, r5, pc}
	if (timeout == K_NO_WAIT) {
    bccc:	b919      	cbnz	r1, bcd6 <k_queue_get+0x38>
    bcce:	f383 8811 	msr	BASEPRI, r3
			return NULL;
    bcd2:	2200      	movs	r2, #0
    bcd4:	e7f7      	b.n	bcc6 <k_queue_get+0x28>
    bcd6:	f383 8811 	msr	BASEPRI, r3
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
    bcda:	2104      	movs	r1, #4
    bcdc:	4603      	mov	r3, r0
    bcde:	eb0d 0001 	add.w	r0, sp, r1
    bce2:	f000 fe4f 	bl	c984 <k_poll_event_init>
		event.state = K_POLL_STATE_NOT_READY;
    bce6:	f89d 3011 	ldrb.w	r3, [sp, #17]
		err = k_poll(&event, 1, timeout);
    bcea:	462a      	mov	r2, r5
		event.state = K_POLL_STATE_NOT_READY;
    bcec:	f36f 1307 	bfc	r3, #4, #4
		err = k_poll(&event, 1, timeout);
    bcf0:	2101      	movs	r1, #1
    bcf2:	a801      	add	r0, sp, #4
		event.state = K_POLL_STATE_NOT_READY;
    bcf4:	f88d 3011 	strb.w	r3, [sp, #17]
		err = k_poll(&event, 1, timeout);
    bcf8:	f000 fe58 	bl	c9ac <k_poll>
		if (err) {
    bcfc:	2800      	cmp	r0, #0
    bcfe:	d1e8      	bne.n	bcd2 <k_queue_get+0x34>
	__asm__ volatile(
    bd00:	f04f 0320 	mov.w	r3, #32
    bd04:	f3ef 8111 	mrs	r1, BASEPRI
    bd08:	f383 8811 	msr	BASEPRI, r3
    bd0c:	6822      	ldr	r2, [r4, #0]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    bd0e:	b12a      	cbz	r2, bd1c <k_queue_get+0x7e>
	if (list->tail == node) {
    bd10:	6860      	ldr	r0, [r4, #4]
	list->head = node->next;
    bd12:	6813      	ldr	r3, [r2, #0]
    bd14:	6023      	str	r3, [r4, #0]
	if (list->tail == node) {
    bd16:	4282      	cmp	r2, r0
		list->tail = list->head;
    bd18:	bf08      	it	eq
    bd1a:	6063      	streq	r3, [r4, #4]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    bd1c:	f381 8811 	msr	BASEPRI, r1
	} while (!val && timeout == K_FOREVER);
    bd20:	2a00      	cmp	r2, #0
    bd22:	d1d0      	bne.n	bcc6 <k_queue_get+0x28>
    bd24:	1c6b      	adds	r3, r5, #1
    bd26:	d0de      	beq.n	bce6 <k_queue_get+0x48>
    bd28:	e7d3      	b.n	bcd2 <k_queue_get+0x34>
	...

0000bd2c <_add_thread_to_ready_q>:
 *
 * Interrupts must be locked when calling this function.
 */

void _add_thread_to_ready_q(struct k_thread *thread)
{
    bd2c:	b530      	push	{r4, r5, lr}
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
    bd2e:	f990 300a 	ldrsb.w	r3, [r0, #10]
	*bmap |= _get_ready_q_prio_bit(prio);
    bd32:	4911      	ldr	r1, [pc, #68]	; (bd78 <_add_thread_to_ready_q+0x4c>)
	return prio + _NUM_COOP_PRIO;
    bd34:	f103 0410 	add.w	r4, r3, #16
	return (prio + _NUM_COOP_PRIO) >> 5;
    bd38:	1162      	asrs	r2, r4, #5
    bd3a:	3206      	adds	r2, #6
    bd3c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
    bd40:	f004 051f 	and.w	r5, r4, #31
    bd44:	2401      	movs	r4, #1
    bd46:	40ac      	lsls	r4, r5
    bd48:	6895      	ldr	r5, [r2, #8]
	sys_dlist_t *q = &_ready_q.q[q_index];
    bd4a:	3314      	adds	r3, #20
	*bmap |= _get_ready_q_prio_bit(prio);
    bd4c:	432c      	orrs	r4, r5
	sys_dlist_t *q = &_ready_q.q[q_index];
    bd4e:	00db      	lsls	r3, r3, #3
	*bmap |= _get_ready_q_prio_bit(prio);
    bd50:	6094      	str	r4, [r2, #8]
	sys_dlist_t *q = &_ready_q.q[q_index];
    bd52:	1d1a      	adds	r2, r3, #4
    bd54:	440a      	add	r2, r1
	node->prev = list->tail;
    bd56:	440b      	add	r3, r1
	node->next = list;
    bd58:	6002      	str	r2, [r0, #0]
	node->prev = list->tail;
    bd5a:	689a      	ldr	r2, [r3, #8]
    bd5c:	6042      	str	r2, [r0, #4]
	list->tail->next = node;
    bd5e:	689a      	ldr	r2, [r3, #8]
    bd60:	6010      	str	r0, [r2, #0]
	list->tail = node;
    bd62:	6098      	str	r0, [r3, #8]
	sys_dlist_append(q, &thread->base.k_q_node);

# ifndef CONFIG_SMP
	struct k_thread **cache = &_ready_q.cache;

	*cache = _is_t1_higher_prio_than_t2(thread, *cache) ? thread : *cache;
    bd64:	69cb      	ldr	r3, [r1, #28]
    bd66:	f990 400a 	ldrsb.w	r4, [r0, #10]
    bd6a:	f993 200a 	ldrsb.w	r2, [r3, #10]
    bd6e:	4294      	cmp	r4, r2
    bd70:	bfa8      	it	ge
    bd72:	4618      	movge	r0, r3
    bd74:	61c8      	str	r0, [r1, #28]
    bd76:	bd30      	pop	{r4, r5, pc}
    bd78:	200029cc 	.word	0x200029cc

0000bd7c <_ready_thread>:
	thread->base.thread_state &= ~_THREAD_PRESTART;
    bd7c:	7a42      	ldrb	r2, [r0, #9]
    bd7e:	f022 0104 	bic.w	r1, r2, #4
	return !(_is_thread_prevented_from_running(thread) ||
    bd82:	f012 0f1b 	tst.w	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    bd86:	7241      	strb	r1, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
    bd88:	d104      	bne.n	bd94 <_ready_thread+0x18>
    bd8a:	6a03      	ldr	r3, [r0, #32]
    bd8c:	3301      	adds	r3, #1
    bd8e:	d101      	bne.n	bd94 <_ready_thread+0x18>

	/* needed to handle the start-with-delay case */
	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
		_add_thread_to_ready_q(thread);
    bd90:	f7ff bfcc 	b.w	bd2c <_add_thread_to_ready_q>
    bd94:	4770      	bx	lr
	...

0000bd98 <_add_timeout>:
{
    bd98:	b570      	push	{r4, r5, r6, lr}
	timeout->delta_ticks_from_prev = timeout_in_ticks;
    bd9a:	610b      	str	r3, [r1, #16]
	timeout->thread = thread;
    bd9c:	6088      	str	r0, [r1, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
    bd9e:	60ca      	str	r2, [r1, #12]
	if (!timeout_in_ticks) {
    bda0:	bb13      	cbnz	r3, bde8 <_add_timeout+0x50>
	__asm__ volatile(
    bda2:	f04f 0220 	mov.w	r2, #32
    bda6:	f3ef 8411 	mrs	r4, BASEPRI
    bdaa:	f382 8811 	msr	BASEPRI, r2
	timeout->delta_ticks_from_prev = _INACTIVE;
    bdae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    bdb2:	610a      	str	r2, [r1, #16]
	if (thread) {
    bdb4:	b180      	cbz	r0, bdd8 <_add_timeout+0x40>
	if (timeout_obj->wait_q) {
    bdb6:	68ca      	ldr	r2, [r1, #12]
    bdb8:	b14a      	cbz	r2, bdce <_add_timeout+0x36>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    bdba:	e890 0006 	ldmia.w	r0, {r1, r2}
    bdbe:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
    bdc0:	6801      	ldr	r1, [r0, #0]
    bdc2:	604a      	str	r2, [r1, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
    bdc4:	7a42      	ldrb	r2, [r0, #9]
		thread->base.timeout.wait_q = NULL;
    bdc6:	61c3      	str	r3, [r0, #28]
    bdc8:	f022 0202 	bic.w	r2, r2, #2
    bdcc:	7242      	strb	r2, [r0, #9]
		_ready_thread(thread);
    bdce:	f7ff ffd5 	bl	bd7c <_ready_thread>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    bdd2:	f384 8811 	msr	BASEPRI, r4
    bdd6:	bd70      	pop	{r4, r5, r6, pc}
    bdd8:	f384 8811 	msr	BASEPRI, r4
		if (timeout->func) {
    bddc:	694b      	ldr	r3, [r1, #20]
    bdde:	b32b      	cbz	r3, be2c <_add_timeout+0x94>
			timeout->func(timeout);
    bde0:	4608      	mov	r0, r1
}
    bde2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			timeout->func(timeout);
    bde6:	4718      	bx	r3
	return list->head == list;
    bde8:	4a11      	ldr	r2, [pc, #68]	; (be30 <_add_timeout+0x98>)
    bdea:	4610      	mov	r0, r2
    bdec:	f850 3f10 	ldr.w	r3, [r0, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    bdf0:	4283      	cmp	r3, r0
    bdf2:	d10c      	bne.n	be0e <_add_timeout+0x76>
	node->next = list;
    bdf4:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
    bdf6:	6953      	ldr	r3, [r2, #20]
    bdf8:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
    bdfa:	6953      	ldr	r3, [r2, #20]
    bdfc:	6019      	str	r1, [r3, #0]
	list->tail = node;
    bdfe:	6151      	str	r1, [r2, #20]
    be00:	bd70      	pop	{r4, r5, r6, pc}
		*delta -= in_q->delta_ticks_from_prev;
    be02:	1b64      	subs	r4, r4, r5
    be04:	610c      	str	r4, [r1, #16]
	return (node == list->tail) ? NULL : node->next;
    be06:	6954      	ldr	r4, [r2, #20]
    be08:	42a3      	cmp	r3, r4
    be0a:	d0f3      	beq.n	bdf4 <_add_timeout+0x5c>
    be0c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
    be0e:	2b00      	cmp	r3, #0
    be10:	d0f0      	beq.n	bdf4 <_add_timeout+0x5c>
		if (*delta <= in_q->delta_ticks_from_prev) {
    be12:	690c      	ldr	r4, [r1, #16]
    be14:	691d      	ldr	r5, [r3, #16]
    be16:	42ac      	cmp	r4, r5
    be18:	dcf3      	bgt.n	be02 <_add_timeout+0x6a>
		node->prev = insert_point->prev;
    be1a:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
    be1c:	1b2c      	subs	r4, r5, r4
    be1e:	611c      	str	r4, [r3, #16]
    be20:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
    be22:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
    be24:	685a      	ldr	r2, [r3, #4]
    be26:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
    be28:	6059      	str	r1, [r3, #4]
    be2a:	bd70      	pop	{r4, r5, r6, pc}
    be2c:	bd70      	pop	{r4, r5, r6, pc}
    be2e:	bf00      	nop
    be30:	200029cc 	.word	0x200029cc

0000be34 <_remove_thread_from_ready_q>:
	node->prev->next = node->next;
    be34:	e890 000a 	ldmia.w	r0, {r1, r3}
 *
 * Interrupts must be locked when calling this function.
 */

void _remove_thread_from_ready_q(struct k_thread *thread)
{
    be38:	b510      	push	{r4, lr}
#if defined(CONFIG_MULTITHREADING) && !defined(CONFIG_SMP)
	int q_index = _get_ready_q_q_index(thread->base.prio);
    be3a:	f990 200a 	ldrsb.w	r2, [r0, #10]
    be3e:	6019      	str	r1, [r3, #0]
	node->next->prev = node->prev;
    be40:	6801      	ldr	r1, [r0, #0]
	sys_dlist_t *q = &_ready_q.q[q_index];
    be42:	3214      	adds	r2, #20
    be44:	604b      	str	r3, [r1, #4]
    be46:	4b14      	ldr	r3, [pc, #80]	; (be98 <_remove_thread_from_ready_q+0x64>)
    be48:	00d2      	lsls	r2, r2, #3
    be4a:	1d11      	adds	r1, r2, #4
	return list->head == list;
    be4c:	441a      	add	r2, r3
    be4e:	4419      	add	r1, r3

	sys_dlist_remove(&thread->base.k_q_node);
	if (sys_dlist_is_empty(q)) {
    be50:	6852      	ldr	r2, [r2, #4]
    be52:	428a      	cmp	r2, r1
    be54:	d10f      	bne.n	be76 <_remove_thread_from_ready_q+0x42>
		clear_ready_q_prio_bit(thread->base.prio);
    be56:	f990 100a 	ldrsb.w	r1, [r0, #10]
	return (prio + _NUM_COOP_PRIO) >> 5;
    be5a:	3110      	adds	r1, #16
    be5c:	114a      	asrs	r2, r1, #5
	*bmap &= ~_get_ready_q_prio_bit(prio);
    be5e:	3206      	adds	r2, #6
    be60:	eb03 0282 	add.w	r2, r3, r2, lsl #2
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
    be64:	2401      	movs	r4, #1
    be66:	f001 011f 	and.w	r1, r1, #31
    be6a:	fa04 f101 	lsl.w	r1, r4, r1
    be6e:	6894      	ldr	r4, [r2, #8]
    be70:	ea24 0401 	bic.w	r4, r4, r1
    be74:	6094      	str	r4, [r2, #8]
	}

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? get_ready_q_head() : *cache;
    be76:	69da      	ldr	r2, [r3, #28]
    be78:	4290      	cmp	r0, r2
    be7a:	d10b      	bne.n	be94 <_remove_thread_from_ready_q+0x60>
	return __builtin_ffs(op);
    be7c:	6a19      	ldr	r1, [r3, #32]
    be7e:	fa91 f2a1 	rbit	r2, r1
    be82:	2900      	cmp	r1, #0
    be84:	fab2 f282 	clz	r2, r2
    be88:	bf08      	it	eq
    be8a:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
    be8e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    be92:	6a52      	ldr	r2, [r2, #36]	; 0x24
    be94:	61da      	str	r2, [r3, #28]
    be96:	bd10      	pop	{r4, pc}
    be98:	200029cc 	.word	0x200029cc

0000be9c <_pend_thread>:
#endif

/* pend the specified thread: it must *not* be in the ready queue */
/* must be called with interrupts locked */
void _pend_thread(struct k_thread *thread, _wait_q_t *wait_q, s32_t timeout)
{
    be9c:	b430      	push	{r4, r5}
    be9e:	680c      	ldr	r4, [r1, #0]
#ifdef CONFIG_MULTITHREADING
	sys_dlist_t *wait_q_list = (sys_dlist_t *)wait_q;
	struct k_thread *pending;

	SYS_DLIST_FOR_EACH_CONTAINER(wait_q_list, pending, base.k_q_node) {
    bea0:	42a1      	cmp	r1, r4
    bea2:	bf08      	it	eq
    bea4:	2400      	moveq	r4, #0
    bea6:	b314      	cbz	r4, beee <_pend_thread+0x52>
		if (_is_t1_higher_prio_than_t2(thread, pending)) {
    bea8:	f990 500a 	ldrsb.w	r5, [r0, #10]
    beac:	f994 300a 	ldrsb.w	r3, [r4, #10]
    beb0:	429d      	cmp	r5, r3
    beb2:	da16      	bge.n	bee2 <_pend_thread+0x46>
		node->prev = insert_point->prev;
    beb4:	6863      	ldr	r3, [r4, #4]
    beb6:	6043      	str	r3, [r0, #4]
		node->next = insert_point;
    beb8:	6004      	str	r4, [r0, #0]
		insert_point->prev->next = node;
    beba:	6863      	ldr	r3, [r4, #4]
    bebc:	6018      	str	r0, [r3, #0]
		insert_point->prev = node;
    bebe:	6060      	str	r0, [r4, #4]
	thread->base.thread_state |= _THREAD_PENDING;
    bec0:	7a43      	ldrb	r3, [r0, #9]
    bec2:	f043 0302 	orr.w	r3, r3, #2
    bec6:	7243      	strb	r3, [r0, #9]
	sys_dlist_append(wait_q_list, &thread->base.k_q_node);

inserted:
	_mark_thread_as_pending(thread);

	if (timeout != K_FOREVER) {
    bec8:	1c53      	adds	r3, r2, #1
    beca:	d017      	beq.n	befc <_pend_thread+0x60>
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
    becc:	3209      	adds	r2, #9
    bece:	230a      	movs	r3, #10
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(timeout);

		_add_thread_timeout(thread, wait_q, ticks);
	}
#endif
}
    bed0:	bc30      	pop	{r4, r5}
    bed2:	fbb2 f3f3 	udiv	r3, r2, r3
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
    bed6:	460a      	mov	r2, r1
    bed8:	3301      	adds	r3, #1
    beda:	f100 0110 	add.w	r1, r0, #16
    bede:	f7ff bf5b 	b.w	bd98 <_add_timeout>
	return (node == list->tail) ? NULL : node->next;
    bee2:	684b      	ldr	r3, [r1, #4]
    bee4:	429c      	cmp	r4, r3
    bee6:	d002      	beq.n	beee <_pend_thread+0x52>
    bee8:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(wait_q_list, pending, base.k_q_node) {
    beea:	2c00      	cmp	r4, #0
    beec:	d1db      	bne.n	bea6 <_pend_thread+0xa>
	node->next = list;
    beee:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
    bef0:	684b      	ldr	r3, [r1, #4]
    bef2:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
    bef4:	684b      	ldr	r3, [r1, #4]
    bef6:	6018      	str	r0, [r3, #0]
	list->tail = node;
    bef8:	6048      	str	r0, [r1, #4]
    befa:	e7e1      	b.n	bec0 <_pend_thread+0x24>
}
    befc:	bc30      	pop	{r4, r5}
    befe:	4770      	bx	lr

0000bf00 <_pend_current_thread>:

/* pend the current thread */
/* must be called with interrupts locked */
void _pend_current_thread(_wait_q_t *wait_q, s32_t timeout)
{
    bf00:	b570      	push	{r4, r5, r6, lr}
	_remove_thread_from_ready_q(_current);
    bf02:	4c06      	ldr	r4, [pc, #24]	; (bf1c <_pend_current_thread+0x1c>)
{
    bf04:	460e      	mov	r6, r1
    bf06:	4605      	mov	r5, r0
	_remove_thread_from_ready_q(_current);
    bf08:	68a0      	ldr	r0, [r4, #8]
    bf0a:	f7ff ff93 	bl	be34 <_remove_thread_from_ready_q>
	_pend_thread(_current, wait_q, timeout);
    bf0e:	4632      	mov	r2, r6
    bf10:	4629      	mov	r1, r5
    bf12:	68a0      	ldr	r0, [r4, #8]
}
    bf14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	_pend_thread(_current, wait_q, timeout);
    bf18:	f7ff bfc0 	b.w	be9c <_pend_thread>
    bf1c:	200029cc 	.word	0x200029cc

0000bf20 <__must_switch_threads>:
	ready_range = _ready_q.prio_bmap[0];
    bf20:	4a09      	ldr	r2, [pc, #36]	; (bf48 <__must_switch_threads+0x28>)
    bf22:	6a11      	ldr	r1, [r2, #32]

#ifdef CONFIG_KERNEL_DEBUG
	dump_ready_q();
#endif  /* CONFIG_KERNEL_DEBUG */

	return _is_prio_higher(_get_highest_ready_prio(), _current->base.prio);
    bf24:	6892      	ldr	r2, [r2, #8]
    bf26:	2900      	cmp	r1, #0
    bf28:	fa91 f3a1 	rbit	r3, r1
    bf2c:	f992 000a 	ldrsb.w	r0, [r2, #10]
    bf30:	fab3 f383 	clz	r3, r3
    bf34:	bf08      	it	eq
    bf36:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
	return abs_prio - _NUM_COOP_PRIO;
    bf3a:	3b10      	subs	r3, #16
#else
	return 0;
#endif
}
    bf3c:	4298      	cmp	r0, r3
    bf3e:	bfd4      	ite	le
    bf40:	2000      	movle	r0, #0
    bf42:	2001      	movgt	r0, #1
    bf44:	4770      	bx	lr
    bf46:	bf00      	nop
    bf48:	200029cc 	.word	0x200029cc

0000bf4c <_reschedule_threads>:
{
    bf4c:	b510      	push	{r4, lr}
	return _is_preempt(_current) && __must_switch_threads();
    bf4e:	4b0a      	ldr	r3, [pc, #40]	; (bf78 <_reschedule_threads+0x2c>)
    bf50:	689b      	ldr	r3, [r3, #8]
    bf52:	895b      	ldrh	r3, [r3, #10]
    bf54:	2b7f      	cmp	r3, #127	; 0x7f
    bf56:	4604      	mov	r4, r0
    bf58:	d802      	bhi.n	bf60 <_reschedule_threads+0x14>
    bf5a:	f7ff ffe1 	bl	bf20 <__must_switch_threads>
    bf5e:	b910      	cbnz	r0, bf66 <_reschedule_threads+0x1a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    bf60:	f384 8811 	msr	BASEPRI, r4
    bf64:	bd10      	pop	{r4, pc}
		_set_time(remaining);
	}

#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
    bf66:	4b05      	ldr	r3, [pc, #20]	; (bf7c <_reschedule_threads+0x30>)
    bf68:	2200      	movs	r2, #0
    bf6a:	4620      	mov	r0, r4
}
    bf6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_time_slice_elapsed = 0;
    bf70:	601a      	str	r2, [r3, #0]
    bf72:	f7f4 bcc3 	b.w	8fc <__swap>
    bf76:	bf00      	nop
    bf78:	200029cc 	.word	0x200029cc
    bf7c:	20002d74 	.word	0x20002d74

0000bf80 <k_sched_unlock>:
	__asm__ volatile(
    bf80:	f04f 0320 	mov.w	r3, #32
    bf84:	f3ef 8011 	mrs	r0, BASEPRI
    bf88:	f383 8811 	msr	BASEPRI, r3
	++_current->base.sched_locked;
    bf8c:	4b03      	ldr	r3, [pc, #12]	; (bf9c <k_sched_unlock+0x1c>)
    bf8e:	689a      	ldr	r2, [r3, #8]
    bf90:	7ad3      	ldrb	r3, [r2, #11]
    bf92:	3301      	adds	r3, #1
    bf94:	72d3      	strb	r3, [r2, #11]
	_reschedule_threads(key);
    bf96:	f7ff bfd9 	b.w	bf4c <_reschedule_threads>
    bf9a:	bf00      	nop
    bf9c:	200029cc 	.word	0x200029cc

0000bfa0 <_move_thread_to_end_of_prio_q>:
	int q_index = _get_ready_q_q_index(thread->base.prio);
    bfa0:	f990 300a 	ldrsb.w	r3, [r0, #10]
	sys_dlist_t *q = &_ready_q.q[q_index];
    bfa4:	4a12      	ldr	r2, [pc, #72]	; (bff0 <_move_thread_to_end_of_prio_q+0x50>)
{
    bfa6:	b530      	push	{r4, r5, lr}
	sys_dlist_t *q = &_ready_q.q[q_index];
    bfa8:	3314      	adds	r3, #20
    bfaa:	00db      	lsls	r3, r3, #3
    bfac:	1d19      	adds	r1, r3, #4
    bfae:	4411      	add	r1, r2
	if (sys_dlist_is_tail(q, &thread->base.k_q_node)) {
    bfb0:	684c      	ldr	r4, [r1, #4]
    bfb2:	42a0      	cmp	r0, r4
    bfb4:	d01b      	beq.n	bfee <_move_thread_to_end_of_prio_q+0x4e>
	node->prev->next = node->next;
    bfb6:	6844      	ldr	r4, [r0, #4]
    bfb8:	6805      	ldr	r5, [r0, #0]
    bfba:	6025      	str	r5, [r4, #0]
	node->next->prev = node->prev;
    bfbc:	6805      	ldr	r5, [r0, #0]
	node->prev = list->tail;
    bfbe:	4413      	add	r3, r2
	node->next->prev = node->prev;
    bfc0:	606c      	str	r4, [r5, #4]
	node->next = list;
    bfc2:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
    bfc4:	6899      	ldr	r1, [r3, #8]
    bfc6:	6041      	str	r1, [r0, #4]
	list->tail->next = node;
    bfc8:	6899      	ldr	r1, [r3, #8]
    bfca:	6008      	str	r0, [r1, #0]
	list->tail = node;
    bfcc:	6098      	str	r0, [r3, #8]
	*cache = *cache == thread ? get_ready_q_head() : *cache;
    bfce:	69d3      	ldr	r3, [r2, #28]
    bfd0:	4298      	cmp	r0, r3
    bfd2:	d10b      	bne.n	bfec <_move_thread_to_end_of_prio_q+0x4c>
	return __builtin_ffs(op);
    bfd4:	6a11      	ldr	r1, [r2, #32]
    bfd6:	fa91 f3a1 	rbit	r3, r1
    bfda:	2900      	cmp	r1, #0
    bfdc:	fab3 f383 	clz	r3, r3
    bfe0:	bf08      	it	eq
    bfe2:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    bfe6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    bfea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    bfec:	61d3      	str	r3, [r2, #28]
    bfee:	bd30      	pop	{r4, r5, pc}
    bff0:	200029cc 	.word	0x200029cc

0000bff4 <_impl_k_yield>:
{
    bff4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    bff6:	f04f 0320 	mov.w	r3, #32
    bffa:	f3ef 8511 	mrs	r5, BASEPRI
    bffe:	f383 8811 	msr	BASEPRI, r3
	_move_thread_to_end_of_prio_q(_current);
    c002:	4c09      	ldr	r4, [pc, #36]	; (c028 <_impl_k_yield+0x34>)
    c004:	68a0      	ldr	r0, [r4, #8]
    c006:	f7ff ffcb 	bl	bfa0 <_move_thread_to_end_of_prio_q>
	if (_current == _get_next_ready_thread()) {
    c00a:	68a2      	ldr	r2, [r4, #8]
    c00c:	69e3      	ldr	r3, [r4, #28]
    c00e:	429a      	cmp	r2, r3
    c010:	d102      	bne.n	c018 <_impl_k_yield+0x24>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c012:	f385 8811 	msr	BASEPRI, r5
    c016:	bd38      	pop	{r3, r4, r5, pc}
	_time_slice_elapsed = 0;
    c018:	4b04      	ldr	r3, [pc, #16]	; (c02c <_impl_k_yield+0x38>)
    c01a:	2200      	movs	r2, #0
    c01c:	601a      	str	r2, [r3, #0]
    c01e:	4628      	mov	r0, r5
}
    c020:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    c024:	f7f4 bc6a 	b.w	8fc <__swap>
    c028:	200029cc 	.word	0x200029cc
    c02c:	20002d74 	.word	0x20002d74

0000c030 <_impl_k_current_get>:
}
    c030:	4b01      	ldr	r3, [pc, #4]	; (c038 <_impl_k_current_get+0x8>)
    c032:	6898      	ldr	r0, [r3, #8]
    c034:	4770      	bx	lr
    c036:	bf00      	nop
    c038:	200029cc 	.word	0x200029cc

0000c03c <_is_thread_time_slicing>:
	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
    c03c:	4b0d      	ldr	r3, [pc, #52]	; (c074 <_is_thread_time_slicing+0x38>)
    c03e:	681b      	ldr	r3, [r3, #0]
    c040:	2b00      	cmp	r3, #0
    c042:	dd14      	ble.n	c06e <_is_thread_time_slicing+0x32>
	return thread == _idle_thread;
    c044:	4b0c      	ldr	r3, [pc, #48]	; (c078 <_is_thread_time_slicing+0x3c>)
    c046:	681b      	ldr	r3, [r3, #0]
    c048:	4298      	cmp	r0, r3
    c04a:	d010      	beq.n	c06e <_is_thread_time_slicing+0x32>
	    || _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
    c04c:	4a0b      	ldr	r2, [pc, #44]	; (c07c <_is_thread_time_slicing+0x40>)
    c04e:	f990 300a 	ldrsb.w	r3, [r0, #10]
    c052:	6812      	ldr	r2, [r2, #0]
    c054:	4293      	cmp	r3, r2
    c056:	db0a      	blt.n	c06e <_is_thread_time_slicing+0x32>
	return list->head != list->tail;
    c058:	f103 0214 	add.w	r2, r3, #20
    c05c:	4b08      	ldr	r3, [pc, #32]	; (c080 <_is_thread_time_slicing+0x44>)
    c05e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    c062:	6858      	ldr	r0, [r3, #4]
    c064:	689b      	ldr	r3, [r3, #8]
    c066:	1ac0      	subs	r0, r0, r3
    c068:	bf18      	it	ne
    c06a:	2001      	movne	r0, #1
	return sys_dlist_has_multiple_nodes(q);
    c06c:	4770      	bx	lr
		return 0;
    c06e:	2000      	movs	r0, #0
}
    c070:	4770      	bx	lr
    c072:	bf00      	nop
    c074:	20002af0 	.word	0x20002af0
    c078:	0000eed8 	.word	0x0000eed8
    c07c:	20002af4 	.word	0x20002af4
    c080:	200029cc 	.word	0x200029cc

0000c084 <_update_time_slice_before_swap>:
	_time_slice_elapsed = 0;
    c084:	4b01      	ldr	r3, [pc, #4]	; (c08c <_update_time_slice_before_swap+0x8>)
    c086:	2200      	movs	r2, #0
    c088:	601a      	str	r2, [r3, #0]
    c08a:	4770      	bx	lr
    c08c:	20002d74 	.word	0x20002d74

0000c090 <_unpend_first_thread>:
_find_first_thread_to_unpend(_wait_q_t *wait_q, struct k_thread *from)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	extern volatile int _handling_timeouts;

	if (_handling_timeouts) {
    c090:	4a10      	ldr	r2, [pc, #64]	; (c0d4 <_unpend_first_thread+0x44>)
    c092:	6812      	ldr	r2, [r2, #0]
}

/* unpend the first thread from a wait queue */
/* must be called with interrupts locked */
static inline struct k_thread *_unpend_first_thread(_wait_q_t *wait_q)
{
    c094:	4603      	mov	r3, r0
    c096:	6800      	ldr	r0, [r0, #0]
	if (_handling_timeouts) {
    c098:	b16a      	cbz	r2, c0b6 <_unpend_first_thread+0x26>
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c09a:	4283      	cmp	r3, r0
    c09c:	bf08      	it	eq
    c09e:	2000      	moveq	r0, #0
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
    c0a0:	b908      	cbnz	r0, c0a6 <_unpend_first_thread+0x16>
    c0a2:	2000      	movs	r0, #0
    c0a4:	4770      	bx	lr
			if (_is_thread_timeout_expired(thread)) {
    c0a6:	6a02      	ldr	r2, [r0, #32]
    c0a8:	3202      	adds	r2, #2
    c0aa:	d107      	bne.n	c0bc <_unpend_first_thread+0x2c>
	return (node == list->tail) ? NULL : node->next;
    c0ac:	685a      	ldr	r2, [r3, #4]
    c0ae:	4290      	cmp	r0, r2
    c0b0:	d0f7      	beq.n	c0a2 <_unpend_first_thread+0x12>
    c0b2:	6800      	ldr	r0, [r0, #0]
    c0b4:	e7f4      	b.n	c0a0 <_unpend_first_thread+0x10>
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c0b6:	4283      	cmp	r3, r0
    c0b8:	d00a      	beq.n	c0d0 <_unpend_first_thread+0x40>
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);

	if (thread) {
    c0ba:	b150      	cbz	r0, c0d2 <_unpend_first_thread+0x42>
	node->prev->next = node->next;
    c0bc:	e890 000c 	ldmia.w	r0, {r2, r3}
    c0c0:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    c0c2:	6802      	ldr	r2, [r0, #0]
    c0c4:	6053      	str	r3, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
    c0c6:	7a43      	ldrb	r3, [r0, #9]
    c0c8:	f023 0302 	bic.w	r3, r3, #2
    c0cc:	7243      	strb	r3, [r0, #9]
    c0ce:	4770      	bx	lr
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c0d0:	4610      	mov	r0, r2
		_unpend_thread(thread);
	}

	return thread;
}
    c0d2:	4770      	bx	lr
    c0d4:	20002d70 	.word	0x20002d70

0000c0d8 <_impl_k_sem_init>:

	sem->count = initial_count;
	sem->limit = limit;
	sys_dlist_init(&sem->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&sem->poll_events);
    c0d8:	f100 0310 	add.w	r3, r0, #16
	sem->count = initial_count;
    c0dc:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
    c0de:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
    c0e0:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
    c0e2:	6040      	str	r0, [r0, #4]
	list->head = (sys_dnode_t *)list;
    c0e4:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
    c0e6:	6143      	str	r3, [r0, #20]
    c0e8:	4770      	bx	lr
	...

0000c0ec <_impl_k_sem_give>:

	_set_thread_return_value(thread, 0);
}

void _impl_k_sem_give(struct k_sem *sem)
{
    c0ec:	b570      	push	{r4, r5, r6, lr}
    c0ee:	4605      	mov	r5, r0
	__asm__ volatile(
    c0f0:	f04f 0320 	mov.w	r3, #32
    c0f4:	f3ef 8611 	mrs	r6, BASEPRI
    c0f8:	f383 8811 	msr	BASEPRI, r3
	struct k_thread *thread = _unpend_first_thread(&sem->wait_q);
    c0fc:	f7ff ffc8 	bl	c090 <_unpend_first_thread>
	if (!thread) {
    c100:	4604      	mov	r4, r0
    c102:	b998      	cbnz	r0, c12c <_impl_k_sem_give+0x40>
	sem->count += (sem->count != sem->limit);
    c104:	68ab      	ldr	r3, [r5, #8]
    c106:	68ea      	ldr	r2, [r5, #12]
    c108:	429a      	cmp	r2, r3
    c10a:	bf18      	it	ne
    c10c:	3301      	addne	r3, #1
    c10e:	60ab      	str	r3, [r5, #8]
	return _handle_obj_poll_events(&sem->poll_events, state);
    c110:	2102      	movs	r1, #2
    c112:	f105 0010 	add.w	r0, r5, #16
    c116:	f000 fced 	bl	caf4 <_handle_obj_poll_events>
	unsigned int key;

	key = irq_lock();

	if (do_sem_give(sem)) {
    c11a:	2800      	cmp	r0, #0
    c11c:	d03b      	beq.n	c196 <_impl_k_sem_give+0xaa>
	_update_time_slice_before_swap();
    c11e:	f7ff ffb1 	bl	c084 <_update_time_slice_before_swap>
	return __swap(key);
    c122:	4630      	mov	r0, r6
		_Swap(key);
	} else {
		irq_unlock(key);
	}
}
    c124:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c128:	f7f4 bbe8 	b.w	8fc <__swap>
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    c12c:	6a01      	ldr	r1, [r0, #32]
	return _abort_timeout(&thread->base.timeout);
    c12e:	f100 0210 	add.w	r2, r0, #16
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    c132:	1c48      	adds	r0, r1, #1
    c134:	d00f      	beq.n	c156 <_impl_k_sem_give+0x6a>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
    c136:	4b1b      	ldr	r3, [pc, #108]	; (c1a4 <_impl_k_sem_give+0xb8>)
    c138:	695b      	ldr	r3, [r3, #20]
    c13a:	429a      	cmp	r2, r3
	return (node == list->tail) ? NULL : node->next;
    c13c:	bf1f      	itttt	ne
    c13e:	6922      	ldrne	r2, [r4, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
    c140:	6913      	ldrne	r3, [r2, #16]
    c142:	185b      	addne	r3, r3, r1
    c144:	6113      	strne	r3, [r2, #16]
	node->prev->next = node->next;
    c146:	6963      	ldr	r3, [r4, #20]
    c148:	6922      	ldr	r2, [r4, #16]
    c14a:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    c14c:	6922      	ldr	r2, [r4, #16]
    c14e:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
    c150:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c154:	6223      	str	r3, [r4, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
    c156:	7a63      	ldrb	r3, [r4, #9]
    c158:	f023 0204 	bic.w	r2, r3, #4
	return !(_is_thread_prevented_from_running(thread) ||
    c15c:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    c160:	7262      	strb	r2, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
    c162:	d102      	bne.n	c16a <_impl_k_sem_give+0x7e>
    c164:	6a23      	ldr	r3, [r4, #32]
    c166:	3301      	adds	r3, #1
    c168:	d018      	beq.n	c19c <_impl_k_sem_give+0xb0>
}

static ALWAYS_INLINE void
_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    c16a:	2300      	movs	r3, #0
    c16c:	6663      	str	r3, [r4, #100]	; 0x64
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    c16e:	f3ef 8305 	mrs	r3, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
    c172:	2b0d      	cmp	r3, #13
    c174:	d80f      	bhi.n	c196 <_impl_k_sem_give+0xaa>
    c176:	b11b      	cbz	r3, c180 <_impl_k_sem_give+0x94>
    c178:	4b0b      	ldr	r3, [pc, #44]	; (c1a8 <_impl_k_sem_give+0xbc>)
    c17a:	685b      	ldr	r3, [r3, #4]
    c17c:	051b      	lsls	r3, r3, #20
    c17e:	d50a      	bpl.n	c196 <_impl_k_sem_give+0xaa>
	return _is_preempt(_current) && __must_switch_threads();
    c180:	4b08      	ldr	r3, [pc, #32]	; (c1a4 <_impl_k_sem_give+0xb8>)
    c182:	689b      	ldr	r3, [r3, #8]
    c184:	895b      	ldrh	r3, [r3, #10]
    c186:	2b7f      	cmp	r3, #127	; 0x7f
    c188:	d805      	bhi.n	c196 <_impl_k_sem_give+0xaa>
    c18a:	f7ff fec9 	bl	bf20 <__must_switch_threads>
    c18e:	3000      	adds	r0, #0
    c190:	bf18      	it	ne
    c192:	2001      	movne	r0, #1
    c194:	e7c1      	b.n	c11a <_impl_k_sem_give+0x2e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c196:	f386 8811 	msr	BASEPRI, r6
    c19a:	bd70      	pop	{r4, r5, r6, pc}
		_add_thread_to_ready_q(thread);
    c19c:	4620      	mov	r0, r4
    c19e:	f7ff fdc5 	bl	bd2c <_add_thread_to_ready_q>
    c1a2:	e7e2      	b.n	c16a <_impl_k_sem_give+0x7e>
    c1a4:	200029cc 	.word	0x200029cc
    c1a8:	e000ed00 	.word	0xe000ed00

0000c1ac <_impl_k_sem_take>:
#ifdef CONFIG_USERSPACE
_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
#endif

int _impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
    c1ac:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    c1ae:	f04f 0320 	mov.w	r3, #32
    c1b2:	f3ef 8411 	mrs	r4, BASEPRI
    c1b6:	f383 8811 	msr	BASEPRI, r3
	__ASSERT(!_is_in_isr() || timeout == K_NO_WAIT, "");

	unsigned int key = irq_lock();

	if (likely(sem->count > 0)) {
    c1ba:	6883      	ldr	r3, [r0, #8]
    c1bc:	b12b      	cbz	r3, c1ca <_impl_k_sem_take+0x1e>
		sem->count--;
    c1be:	3b01      	subs	r3, #1
    c1c0:	6083      	str	r3, [r0, #8]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c1c2:	f384 8811 	msr	BASEPRI, r4
		irq_unlock(key);
		return 0;
    c1c6:	2000      	movs	r0, #0
    c1c8:	bd38      	pop	{r3, r4, r5, pc}
	}

	if (timeout == K_NO_WAIT) {
    c1ca:	b921      	cbnz	r1, c1d6 <_impl_k_sem_take+0x2a>
    c1cc:	f384 8811 	msr	BASEPRI, r4
		irq_unlock(key);
		return -EBUSY;
    c1d0:	f06f 000f 	mvn.w	r0, #15
    c1d4:	bd38      	pop	{r3, r4, r5, pc}
	}

	_pend_current_thread(&sem->wait_q, timeout);
    c1d6:	f7ff fe93 	bl	bf00 <_pend_current_thread>
	_update_time_slice_before_swap();
    c1da:	f7ff ff53 	bl	c084 <_update_time_slice_before_swap>
	return __swap(key);
    c1de:	4620      	mov	r0, r4

	return _Swap(key);
}
    c1e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    c1e4:	f7f4 bb8a 	b.w	8fc <__swap>

0000c1e8 <_impl_k_uptime_get_32>:
u32_t _tick_get_32(void)
{
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)_get_elapsed_clock_time();
#else
	return (u32_t)_sys_clock_tick_count;
    c1e8:	4b03      	ldr	r3, [pc, #12]	; (c1f8 <_impl_k_uptime_get_32+0x10>)
    c1ea:	e9d3 0100 	ldrd	r0, r1, [r3]
	return (u64_t)ticks * _ms_per_tick;
    c1ee:	230a      	movs	r3, #10
    c1f0:	fba0 0103 	umull	r0, r1, r0, r3
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get_32());
}
    c1f4:	4770      	bx	lr
    c1f6:	bf00      	nop
    c1f8:	20002d78 	.word	0x20002d78

0000c1fc <_tick_get>:
	__asm__ volatile(
    c1fc:	f04f 0220 	mov.w	r2, #32
    c200:	f3ef 8311 	mrs	r3, BASEPRI
    c204:	f382 8811 	msr	BASEPRI, r2
	unsigned int imask = irq_lock();

#ifdef CONFIG_TICKLESS_KERNEL
	tmp_sys_clock_tick_count = _get_elapsed_clock_time();
#else
	tmp_sys_clock_tick_count = _sys_clock_tick_count;
    c208:	4a02      	ldr	r2, [pc, #8]	; (c214 <_tick_get+0x18>)
    c20a:	e9d2 0100 	ldrd	r0, r1, [r2]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c20e:	f383 8811 	msr	BASEPRI, r3
#endif
	irq_unlock(imask);
	return tmp_sys_clock_tick_count;
}
    c212:	4770      	bx	lr
    c214:	20002d78 	.word	0x20002d78

0000c218 <_impl_k_uptime_get>:
FUNC_ALIAS(_tick_get, sys_tick_get, s64_t);

s64_t _impl_k_uptime_get(void)
{
    c218:	b510      	push	{r4, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get());
    c21a:	f7ff ffef 	bl	c1fc <_tick_get>
    c21e:	240a      	movs	r4, #10
    c220:	fba0 2304 	umull	r2, r3, r0, r4
    c224:	fb04 3301 	mla	r3, r4, r1, r3
}
    c228:	4610      	mov	r0, r2
    c22a:	4619      	mov	r1, r3
    c22c:	bd10      	pop	{r4, pc}
	...

0000c230 <_nano_sys_clock_tick_announce>:
 * timers that have expired and wake up the threads pending on them.
 *
 * @return N/A
 */
void _nano_sys_clock_tick_announce(s32_t ticks)
{
    c230:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c234:	4607      	mov	r7, r0
	__asm__ volatile(
    c236:	f04f 0320 	mov.w	r3, #32
    c23a:	f3ef 8011 	mrs	r0, BASEPRI
    c23e:	f383 8811 	msr	BASEPRI, r3

	K_DEBUG("ticks: %d\n", ticks);

	/* 64-bit value, ensure atomic access with irq lock */
	key = irq_lock();
	_sys_clock_tick_count += ticks;
    c242:	4963      	ldr	r1, [pc, #396]	; (c3d0 <_nano_sys_clock_tick_announce+0x1a0>)
    c244:	e9d1 4500 	ldrd	r4, r5, [r1]
    c248:	19e2      	adds	r2, r4, r7
    c24a:	eb45 73e7 	adc.w	r3, r5, r7, asr #31
    c24e:	e9c1 2300 	strd	r2, r3, [r1]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c252:	f380 8811 	msr	BASEPRI, r0
	list->head = (sys_dnode_t *)list;
    c256:	466e      	mov	r6, sp
    c258:	f8cd d000 	str.w	sp, [sp]
	list->tail = (sys_dnode_t *)list;
    c25c:	f8cd d004 	str.w	sp, [sp, #4]
	__asm__ volatile(
    c260:	f04f 0320 	mov.w	r3, #32
    c264:	f3ef 8011 	mrs	r0, BASEPRI
    c268:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
    c26c:	4c59      	ldr	r4, [pc, #356]	; (c3d4 <_nano_sys_clock_tick_announce+0x1a4>)
    c26e:	4621      	mov	r1, r4
    c270:	4602      	mov	r2, r0
    c272:	f851 3f10 	ldr.w	r3, [r1, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c276:	428b      	cmp	r3, r1
    c278:	d000      	beq.n	c27c <_nano_sys_clock_tick_announce+0x4c>
	if (!next) {
    c27a:	b9fb      	cbnz	r3, c2bc <_nano_sys_clock_tick_announce+0x8c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c27c:	f380 8811 	msr	BASEPRI, r0
	if (!_is_thread_time_slicing(_current)) {
    c280:	68a0      	ldr	r0, [r4, #8]
    c282:	f7ff fedb 	bl	c03c <_is_thread_time_slicing>
    c286:	b1b0      	cbz	r0, c2b6 <_nano_sys_clock_tick_announce+0x86>
	_time_slice_elapsed += __ticks_to_ms(ticks);
    c288:	4a53      	ldr	r2, [pc, #332]	; (c3d8 <_nano_sys_clock_tick_announce+0x1a8>)
    c28a:	6811      	ldr	r1, [r2, #0]
    c28c:	230a      	movs	r3, #10
    c28e:	fb07 1703 	mla	r7, r7, r3, r1
	if (_time_slice_elapsed >= _time_slice_duration) {
    c292:	4b52      	ldr	r3, [pc, #328]	; (c3dc <_nano_sys_clock_tick_announce+0x1ac>)
	_time_slice_elapsed += __ticks_to_ms(ticks);
    c294:	6017      	str	r7, [r2, #0]
	if (_time_slice_elapsed >= _time_slice_duration) {
    c296:	681b      	ldr	r3, [r3, #0]
    c298:	429f      	cmp	r7, r3
    c29a:	db0c      	blt.n	c2b6 <_nano_sys_clock_tick_announce+0x86>
		_time_slice_elapsed = 0;
    c29c:	2300      	movs	r3, #0
    c29e:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    c2a0:	f04f 0320 	mov.w	r3, #32
    c2a4:	f3ef 8511 	mrs	r5, BASEPRI
    c2a8:	f383 8811 	msr	BASEPRI, r3
		_move_thread_to_end_of_prio_q(_current);
    c2ac:	68a0      	ldr	r0, [r4, #8]
    c2ae:	f7ff fe77 	bl	bfa0 <_move_thread_to_end_of_prio_q>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c2b2:	f385 8811 	msr	BASEPRI, r5
	if ((!remaining && next_to) || (next_to < remaining)) {
		/* Clears current program if next_to = 0 and remaining > 0 */
		_set_time(next_to);
	}
#endif
}
    c2b6:	b003      	add	sp, #12
    c2b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_handling_timeouts = 1;
    c2bc:	4d48      	ldr	r5, [pc, #288]	; (c3e0 <_nano_sys_clock_tick_announce+0x1b0>)
    c2be:	2101      	movs	r1, #1
    c2c0:	6029      	str	r1, [r5, #0]
    c2c2:	46ab      	mov	fp, r5
    c2c4:	4639      	mov	r1, r7
			timeout->delta_ticks_from_prev = 0;
    c2c6:	f04f 0e00 	mov.w	lr, #0
			timeout->delta_ticks_from_prev = _EXPIRED;
    c2ca:	f06f 0c01 	mvn.w	ip, #1
		s32_t tmp = timeout->delta_ticks_from_prev;
    c2ce:	6918      	ldr	r0, [r3, #16]
		if (timeout->delta_ticks_from_prev < ticks) {
    c2d0:	4288      	cmp	r0, r1
			timeout->delta_ticks_from_prev -= ticks;
    c2d2:	bfaa      	itet	ge
    c2d4:	eba0 0801 	subge.w	r8, r0, r1
			timeout->delta_ticks_from_prev = 0;
    c2d8:	f8c3 e010 	strlt.w	lr, [r3, #16]
			timeout->delta_ticks_from_prev -= ticks;
    c2dc:	f8c3 8010 	strge.w	r8, [r3, #16]
		ticks -= tmp;
    c2e0:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    c2e2:	6960      	ldr	r0, [r4, #20]
		if (timeout->delta_ticks_from_prev == 0) {
    c2e4:	691d      	ldr	r5, [r3, #16]
    c2e6:	4298      	cmp	r0, r3
    c2e8:	bf14      	ite	ne
    c2ea:	6818      	ldrne	r0, [r3, #0]
    c2ec:	2000      	moveq	r0, #0
    c2ee:	b9d5      	cbnz	r5, c326 <_nano_sys_clock_tick_announce+0xf6>
	node->prev->next = node->next;
    c2f0:	e893 0220 	ldmia.w	r3, {r5, r9}
    c2f4:	f8c9 5000 	str.w	r5, [r9]
	node->next->prev = node->prev;
    c2f8:	681d      	ldr	r5, [r3, #0]
    c2fa:	f8c5 9004 	str.w	r9, [r5, #4]
	node->next = list->head;
    c2fe:	9d00      	ldr	r5, [sp, #0]
	node->prev = list;
    c300:	e883 0060 	stmia.w	r3, {r5, r6}
	list->head->prev = node;
    c304:	9d00      	ldr	r5, [sp, #0]
	list->head = node;
    c306:	9300      	str	r3, [sp, #0]
	list->head->prev = node;
    c308:	606b      	str	r3, [r5, #4]
			timeout->delta_ticks_from_prev = _EXPIRED;
    c30a:	f8c3 c010 	str.w	ip, [r3, #16]
    c30e:	f382 8811 	msr	BASEPRI, r2
	__asm__ volatile(
    c312:	f04f 0320 	mov.w	r3, #32
    c316:	f3ef 8211 	mrs	r2, BASEPRI
    c31a:	f383 8811 	msr	BASEPRI, r3
	while (next) {
    c31e:	4603      	mov	r3, r0
    c320:	2800      	cmp	r0, #0
    c322:	d1d4      	bne.n	c2ce <_nano_sys_clock_tick_announce+0x9e>
    c324:	e001      	b.n	c32a <_nano_sys_clock_tick_announce+0xfa>
		} else if (ticks <= 0) {
    c326:	2900      	cmp	r1, #0
    c328:	dcf1      	bgt.n	c30e <_nano_sys_clock_tick_announce+0xde>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c32a:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
    c32e:	9800      	ldr	r0, [sp, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c330:	42b0      	cmp	r0, r6
    c332:	d103      	bne.n	c33c <_nano_sys_clock_tick_announce+0x10c>
	_handling_timeouts = 0;
    c334:	2300      	movs	r3, #0
    c336:	f8cb 3000 	str.w	r3, [fp]
    c33a:	e7a1      	b.n	c280 <_nano_sys_clock_tick_announce+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
    c33c:	2800      	cmp	r0, #0
    c33e:	d0f9      	beq.n	c334 <_nano_sys_clock_tick_announce+0x104>
	return (node == list->tail) ? NULL : node->next;
    c340:	9b01      	ldr	r3, [sp, #4]
    c342:	4298      	cmp	r0, r3
    c344:	d101      	bne.n	c34a <_nano_sys_clock_tick_announce+0x11a>
    c346:	2600      	movs	r6, #0
    c348:	e000      	b.n	c34c <_nano_sys_clock_tick_announce+0x11c>
    c34a:	6806      	ldr	r6, [r0, #0]
	timeout->delta_ticks_from_prev = _INACTIVE;
    c34c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
		thread->base.timeout.wait_q = NULL;
    c350:	f04f 0900 	mov.w	r9, #0
	node->prev->next = node->next;
    c354:	e890 000c 	ldmia.w	r0, {r2, r3}
    c358:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    c35a:	6802      	ldr	r2, [r0, #0]
    c35c:	6053      	str	r3, [r2, #4]
	struct k_thread *thread = timeout->thread;
    c35e:	6883      	ldr	r3, [r0, #8]
	__asm__ volatile(
    c360:	f04f 0220 	mov.w	r2, #32
    c364:	f3ef 8a11 	mrs	sl, BASEPRI
    c368:	f382 8811 	msr	BASEPRI, r2
	timeout->delta_ticks_from_prev = _INACTIVE;
    c36c:	f8c0 8010 	str.w	r8, [r0, #16]
	if (thread) {
    c370:	b1fb      	cbz	r3, c3b2 <_nano_sys_clock_tick_announce+0x182>
	if (timeout_obj->wait_q) {
    c372:	68c2      	ldr	r2, [r0, #12]
    c374:	b152      	cbz	r2, c38c <_nano_sys_clock_tick_announce+0x15c>
	node->prev->next = node->next;
    c376:	6859      	ldr	r1, [r3, #4]
    c378:	681a      	ldr	r2, [r3, #0]
    c37a:	600a      	str	r2, [r1, #0]
	node->next->prev = node->prev;
    c37c:	681a      	ldr	r2, [r3, #0]
    c37e:	6051      	str	r1, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
    c380:	7a5a      	ldrb	r2, [r3, #9]
		thread->base.timeout.wait_q = NULL;
    c382:	f8c3 901c 	str.w	r9, [r3, #28]
    c386:	f022 0202 	bic.w	r2, r2, #2
    c38a:	725a      	strb	r2, [r3, #9]
	thread->base.thread_state &= ~_THREAD_PRESTART;
    c38c:	7a5a      	ldrb	r2, [r3, #9]
    c38e:	f022 0104 	bic.w	r1, r2, #4
	return !(_is_thread_prevented_from_running(thread) ||
    c392:	f012 0f1b 	tst.w	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    c396:	7259      	strb	r1, [r3, #9]
	return !(_is_thread_prevented_from_running(thread) ||
    c398:	d102      	bne.n	c3a0 <_nano_sys_clock_tick_announce+0x170>
    c39a:	6a1a      	ldr	r2, [r3, #32]
    c39c:	3201      	adds	r2, #1
    c39e:	d013      	beq.n	c3c8 <_nano_sys_clock_tick_announce+0x198>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c3a0:	f38a 8811 	msr	BASEPRI, sl
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
    c3a4:	2e00      	cmp	r6, #0
    c3a6:	d0c5      	beq.n	c334 <_nano_sys_clock_tick_announce+0x104>
	return (node == list->tail) ? NULL : node->next;
    c3a8:	9b01      	ldr	r3, [sp, #4]
    c3aa:	42b3      	cmp	r3, r6
    c3ac:	d108      	bne.n	c3c0 <_nano_sys_clock_tick_announce+0x190>
    c3ae:	2300      	movs	r3, #0
    c3b0:	e007      	b.n	c3c2 <_nano_sys_clock_tick_announce+0x192>
    c3b2:	f38a 8811 	msr	BASEPRI, sl
		if (timeout->func) {
    c3b6:	6943      	ldr	r3, [r0, #20]
    c3b8:	2b00      	cmp	r3, #0
    c3ba:	d0f3      	beq.n	c3a4 <_nano_sys_clock_tick_announce+0x174>
			timeout->func(timeout);
    c3bc:	4798      	blx	r3
    c3be:	e7f1      	b.n	c3a4 <_nano_sys_clock_tick_announce+0x174>
    c3c0:	6833      	ldr	r3, [r6, #0]
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
    c3c2:	4630      	mov	r0, r6
    c3c4:	461e      	mov	r6, r3
    c3c6:	e7c5      	b.n	c354 <_nano_sys_clock_tick_announce+0x124>
		_add_thread_to_ready_q(thread);
    c3c8:	4618      	mov	r0, r3
    c3ca:	f7ff fcaf 	bl	bd2c <_add_thread_to_ready_q>
    c3ce:	e7e7      	b.n	c3a0 <_nano_sys_clock_tick_announce+0x170>
    c3d0:	20002d78 	.word	0x20002d78
    c3d4:	200029cc 	.word	0x200029cc
    c3d8:	20002d74 	.word	0x20002d74
    c3dc:	20002af0 	.word	0x20002af0
    c3e0:	20002d70 	.word	0x20002d70

0000c3e4 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
    c3e4:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
    c3e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    c3ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c3ee:	4903      	ldr	r1, [pc, #12]	; (c3fc <k_sys_work_q_init+0x18>)
    c3f0:	4803      	ldr	r0, [pc, #12]	; (c400 <k_sys_work_q_init+0x1c>)
    c3f2:	f000 f971 	bl	c6d8 <k_work_q_start>
		       sys_work_q_stack,
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);

	return 0;
}
    c3f6:	2000      	movs	r0, #0
    c3f8:	bd08      	pop	{r3, pc}
    c3fa:	bf00      	nop
    c3fc:	200048f8 	.word	0x200048f8
    c400:	20002d80 	.word	0x20002d80

0000c404 <_is_thread_ready>:
	return !(_is_thread_prevented_from_running(thread) ||
    c404:	7a43      	ldrb	r3, [r0, #9]
    c406:	06da      	lsls	r2, r3, #27
    c408:	d104      	bne.n	c414 <_is_thread_ready+0x10>
    c40a:	6a00      	ldr	r0, [r0, #32]
    c40c:	1c43      	adds	r3, r0, #1
    c40e:	4258      	negs	r0, r3
    c410:	4158      	adcs	r0, r3
    c412:	4770      	bx	lr
    c414:	2000      	movs	r0, #0
}
    c416:	4770      	bx	lr

0000c418 <_abort_timeout>:
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    c418:	6903      	ldr	r3, [r0, #16]
    c41a:	1c5a      	adds	r2, r3, #1
    c41c:	d011      	beq.n	c442 <_abort_timeout+0x2a>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
    c41e:	4a0a      	ldr	r2, [pc, #40]	; (c448 <_abort_timeout+0x30>)
    c420:	6952      	ldr	r2, [r2, #20]
    c422:	4290      	cmp	r0, r2
    c424:	bf1f      	itttt	ne
    c426:	6801      	ldrne	r1, [r0, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
    c428:	690a      	ldrne	r2, [r1, #16]
    c42a:	189b      	addne	r3, r3, r2
    c42c:	610b      	strne	r3, [r1, #16]
	node->prev->next = node->next;
    c42e:	e890 000c 	ldmia.w	r0, {r2, r3}
    c432:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    c434:	6802      	ldr	r2, [r0, #0]
    c436:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
    c438:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c43c:	6103      	str	r3, [r0, #16]
	return 0;
    c43e:	2000      	movs	r0, #0
    c440:	4770      	bx	lr
		return _INACTIVE;
    c442:	4618      	mov	r0, r3
}
    c444:	4770      	bx	lr
    c446:	bf00      	nop
    c448:	200029cc 	.word	0x200029cc

0000c44c <schedule_new_thread.part.13>:
_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_start, K_OBJ_THREAD, struct k_thread *);
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
    c44c:	b5f0      	push	{r4, r5, r6, r7, lr}
	__asm__ volatile(
    c44e:	f04f 0320 	mov.w	r3, #32
    c452:	f3ef 8611 	mrs	r6, BASEPRI
    c456:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
    c45a:	4a19      	ldr	r2, [pc, #100]	; (c4c0 <schedule_new_thread.part.13+0x74>)
	timeout->thread = thread;
    c45c:	6180      	str	r0, [r0, #24]
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
    c45e:	230a      	movs	r3, #10
    c460:	3109      	adds	r1, #9
    c462:	fbb1 f1f3 	udiv	r1, r1, r3
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (delay == 0) {
		k_thread_start(thread);
	} else {
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(delay);
    c466:	3101      	adds	r1, #1
	timeout->delta_ticks_from_prev = timeout_in_ticks;
    c468:	6201      	str	r1, [r0, #32]
    c46a:	4611      	mov	r1, r2
	timeout->wait_q = (sys_dlist_t *)wait_q;
    c46c:	2300      	movs	r3, #0
    c46e:	61c3      	str	r3, [r0, #28]
    c470:	f851 3f10 	ldr.w	r3, [r1, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c474:	428b      	cmp	r3, r1
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
    c476:	f100 0510 	add.w	r5, r0, #16
    c47a:	d108      	bne.n	c48e <schedule_new_thread.part.13+0x42>
	node->next = list;
    c47c:	6101      	str	r1, [r0, #16]
	node->prev = list->tail;
    c47e:	6953      	ldr	r3, [r2, #20]
    c480:	6143      	str	r3, [r0, #20]
	list->tail->next = node;
    c482:	6953      	ldr	r3, [r2, #20]
    c484:	601d      	str	r5, [r3, #0]
	list->tail = node;
    c486:	6155      	str	r5, [r2, #20]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c488:	f386 8811 	msr	BASEPRI, r6
    c48c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
    c48e:	2b00      	cmp	r3, #0
    c490:	d0f4      	beq.n	c47c <schedule_new_thread.part.13+0x30>
    c492:	f8d2 e014 	ldr.w	lr, [r2, #20]
		if (*delta <= in_q->delta_ticks_from_prev) {
    c496:	6a04      	ldr	r4, [r0, #32]
    c498:	691f      	ldr	r7, [r3, #16]
    c49a:	42bc      	cmp	r4, r7
    c49c:	dc08      	bgt.n	c4b0 <schedule_new_thread.part.13+0x64>
		node->prev = insert_point->prev;
    c49e:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
    c4a0:	1b3c      	subs	r4, r7, r4
    c4a2:	611c      	str	r4, [r3, #16]
    c4a4:	6142      	str	r2, [r0, #20]
		node->next = insert_point;
    c4a6:	6103      	str	r3, [r0, #16]
		insert_point->prev->next = node;
    c4a8:	685a      	ldr	r2, [r3, #4]
    c4aa:	6015      	str	r5, [r2, #0]
		insert_point->prev = node;
    c4ac:	605d      	str	r5, [r3, #4]
    c4ae:	e7eb      	b.n	c488 <schedule_new_thread.part.13+0x3c>
		*delta -= in_q->delta_ticks_from_prev;
    c4b0:	1be4      	subs	r4, r4, r7
	return (node == list->tail) ? NULL : node->next;
    c4b2:	4573      	cmp	r3, lr
    c4b4:	6204      	str	r4, [r0, #32]
    c4b6:	d0e1      	beq.n	c47c <schedule_new_thread.part.13+0x30>
    c4b8:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
    c4ba:	2b00      	cmp	r3, #0
    c4bc:	d1eb      	bne.n	c496 <schedule_new_thread.part.13+0x4a>
    c4be:	e7dd      	b.n	c47c <schedule_new_thread.part.13+0x30>
    c4c0:	200029cc 	.word	0x200029cc

0000c4c4 <k_is_in_isr>:
    c4c4:	f3ef 8005 	mrs	r0, IPSR
    c4c8:	280d      	cmp	r0, #13
    c4ca:	d807      	bhi.n	c4dc <k_is_in_isr+0x18>
    c4cc:	b138      	cbz	r0, c4de <k_is_in_isr+0x1a>
    c4ce:	4b04      	ldr	r3, [pc, #16]	; (c4e0 <k_is_in_isr+0x1c>)
    c4d0:	6858      	ldr	r0, [r3, #4]
    c4d2:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
    c4d6:	f3c0 20c0 	ubfx	r0, r0, #11, #1
    c4da:	4770      	bx	lr
    c4dc:	2001      	movs	r0, #1
}
    c4de:	4770      	bx	lr
    c4e0:	e000ed00 	.word	0xe000ed00

0000c4e4 <_is_thread_essential>:
	return _current->base.user_options & K_ESSENTIAL;
    c4e4:	4b02      	ldr	r3, [pc, #8]	; (c4f0 <_is_thread_essential+0xc>)
    c4e6:	689b      	ldr	r3, [r3, #8]
    c4e8:	7a18      	ldrb	r0, [r3, #8]
}
    c4ea:	f000 0001 	and.w	r0, r0, #1
    c4ee:	4770      	bx	lr
    c4f0:	200029cc 	.word	0x200029cc

0000c4f4 <_thread_entry>:
{
    c4f4:	b508      	push	{r3, lr}
    c4f6:	4604      	mov	r4, r0
    c4f8:	4608      	mov	r0, r1
    c4fa:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    c4fc:	461a      	mov	r2, r3
    c4fe:	47a0      	blx	r4
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    c500:	f7ff fd96 	bl	c030 <_impl_k_current_get>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
    c504:	f7f4 fcaa 	bl	e5c <_impl_k_thread_abort>

0000c508 <_impl_k_thread_start>:
{
    c508:	b510      	push	{r4, lr}
    c50a:	4601      	mov	r1, r0
	__asm__ volatile(
    c50c:	f04f 0320 	mov.w	r3, #32
    c510:	f3ef 8411 	mrs	r4, BASEPRI
    c514:	f383 8811 	msr	BASEPRI, r3
    c518:	7a43      	ldrb	r3, [r0, #9]
	if (_has_thread_started(thread)) {
    c51a:	075a      	lsls	r2, r3, #29
    c51c:	d402      	bmi.n	c524 <_impl_k_thread_start+0x1c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c51e:	f384 8811 	msr	BASEPRI, r4
    c522:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    c524:	f023 0304 	bic.w	r3, r3, #4
    c528:	7243      	strb	r3, [r0, #9]
	if (_is_thread_ready(thread)) {
    c52a:	f7ff ff6b 	bl	c404 <_is_thread_ready>
    c52e:	2800      	cmp	r0, #0
    c530:	d0f5      	beq.n	c51e <_impl_k_thread_start+0x16>
		_add_thread_to_ready_q(thread);
    c532:	4608      	mov	r0, r1
    c534:	f7ff fbfa 	bl	bd2c <_add_thread_to_ready_q>
	return _is_preempt(_current) && __must_switch_threads();
    c538:	4b07      	ldr	r3, [pc, #28]	; (c558 <_impl_k_thread_start+0x50>)
    c53a:	689b      	ldr	r3, [r3, #8]
    c53c:	895b      	ldrh	r3, [r3, #10]
    c53e:	2b7f      	cmp	r3, #127	; 0x7f
    c540:	d8ed      	bhi.n	c51e <_impl_k_thread_start+0x16>
    c542:	f7ff fced 	bl	bf20 <__must_switch_threads>
    c546:	2800      	cmp	r0, #0
    c548:	d0e9      	beq.n	c51e <_impl_k_thread_start+0x16>
	_update_time_slice_before_swap();
    c54a:	f7ff fd9b 	bl	c084 <_update_time_slice_before_swap>
	return __swap(key);
    c54e:	4620      	mov	r0, r4
}
    c550:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c554:	f7f4 b9d2 	b.w	8fc <__swap>
    c558:	200029cc 	.word	0x200029cc

0000c55c <_setup_new_thread>:
void _setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options)
{
    c55c:	b410      	push	{r4}

	if (options & K_INHERIT_PERMS) {
		_thread_perms_inherit(_current, new_thread);
	}
#endif
}
    c55e:	bc10      	pop	{r4}
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    c560:	f7f4 bbd8 	b.w	d14 <_new_thread>

0000c564 <_impl_k_thread_create>:
k_tid_t _impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
    c564:	b570      	push	{r4, r5, r6, lr}
    c566:	b086      	sub	sp, #24
    c568:	4604      	mov	r4, r0
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    c56a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    c56c:	9604      	str	r6, [sp, #16]
    c56e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    c570:	9603      	str	r6, [sp, #12]
    c572:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    c574:	9602      	str	r6, [sp, #8]
    c576:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
{
    c578:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    c57a:	9601      	str	r6, [sp, #4]
    c57c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    c57e:	9600      	str	r6, [sp, #0]
    c580:	f7f4 fbc8 	bl	d14 <_new_thread>
	__ASSERT(!_is_in_isr(), "Threads may not be created in ISRs");
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
			  prio, options);

	if (delay != K_FOREVER) {
    c584:	1c6b      	adds	r3, r5, #1
    c586:	d003      	beq.n	c590 <_impl_k_thread_create+0x2c>
	if (delay == 0) {
    c588:	b92d      	cbnz	r5, c596 <_impl_k_thread_create+0x32>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread);
    c58a:	4620      	mov	r0, r4
    c58c:	f7ff ffbc 	bl	c508 <_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}
	return new_thread;
}
    c590:	4620      	mov	r0, r4
    c592:	b006      	add	sp, #24
    c594:	bd70      	pop	{r4, r5, r6, pc}
    c596:	4629      	mov	r1, r5
    c598:	4620      	mov	r0, r4
    c59a:	f7ff ff57 	bl	c44c <schedule_new_thread.part.13>
    c59e:	e7f7      	b.n	c590 <_impl_k_thread_create+0x2c>

0000c5a0 <_k_thread_single_abort>:
_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_resume, K_OBJ_THREAD, k_tid_t);
#endif

void _k_thread_single_abort(struct k_thread *thread)
{
	if (thread->fn_abort != NULL) {
    c5a0:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
    c5a2:	b510      	push	{r4, lr}
    c5a4:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
    c5a6:	b103      	cbz	r3, c5aa <_k_thread_single_abort+0xa>
		thread->fn_abort();
    c5a8:	4798      	blx	r3
	}

	if (_is_thread_ready(thread)) {
    c5aa:	4620      	mov	r0, r4
    c5ac:	f7ff ff2a 	bl	c404 <_is_thread_ready>
    c5b0:	b138      	cbz	r0, c5c2 <_k_thread_single_abort+0x22>
		_remove_thread_from_ready_q(thread);
    c5b2:	4620      	mov	r0, r4
    c5b4:	f7ff fc3e 	bl	be34 <_remove_thread_from_ready_q>
		if (_is_thread_timeout_active(thread)) {
			_abort_thread_timeout(thread);
		}
	}

	thread->base.thread_state |= _THREAD_DEAD;
    c5b8:	7a63      	ldrb	r3, [r4, #9]
    c5ba:	f043 0308 	orr.w	r3, r3, #8
    c5be:	7263      	strb	r3, [r4, #9]
    c5c0:	bd10      	pop	{r4, pc}
		if (_is_thread_pending(thread)) {
    c5c2:	7a63      	ldrb	r3, [r4, #9]
    c5c4:	079b      	lsls	r3, r3, #30
    c5c6:	d508      	bpl.n	c5da <_k_thread_single_abort+0x3a>
	node->prev->next = node->next;
    c5c8:	e894 000c 	ldmia.w	r4, {r2, r3}
    c5cc:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    c5ce:	6822      	ldr	r2, [r4, #0]
    c5d0:	6053      	str	r3, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
    c5d2:	7a63      	ldrb	r3, [r4, #9]
    c5d4:	f023 0302 	bic.w	r3, r3, #2
    c5d8:	7263      	strb	r3, [r4, #9]
		if (_is_thread_timeout_active(thread)) {
    c5da:	6a23      	ldr	r3, [r4, #32]
    c5dc:	3301      	adds	r3, #1
    c5de:	d0eb      	beq.n	c5b8 <_k_thread_single_abort+0x18>
	return _abort_timeout(&thread->base.timeout);
    c5e0:	f104 0010 	add.w	r0, r4, #16
    c5e4:	f7ff ff18 	bl	c418 <_abort_timeout>
    c5e8:	e7e6      	b.n	c5b8 <_k_thread_single_abort+0x18>
	...

0000c5ec <_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void _init_static_threads(void)
{
    c5ec:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
    c5ee:	4f21      	ldr	r7, [pc, #132]	; (c674 <_init_static_threads+0x88>)
    c5f0:	4d21      	ldr	r5, [pc, #132]	; (c678 <_init_static_threads+0x8c>)
{
    c5f2:	b087      	sub	sp, #28
    c5f4:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
    c5f6:	42bd      	cmp	r5, r7
    c5f8:	f105 042c 	add.w	r4, r5, #44	; 0x2c
    c5fc:	d314      	bcc.n	c628 <_init_static_threads+0x3c>
	--_current->base.sched_locked;
    c5fe:	4b1f      	ldr	r3, [pc, #124]	; (c67c <_init_static_threads+0x90>)
    c600:	689a      	ldr	r2, [r3, #8]
    c602:	7ad3      	ldrb	r3, [r2, #11]
    c604:	3b01      	subs	r3, #1
    c606:	72d3      	strb	r3, [r2, #11]
	__asm__ volatile(
    c608:	f04f 0320 	mov.w	r3, #32
    c60c:	f3ef 8511 	mrs	r5, BASEPRI
    c610:	f383 8811 	msr	BASEPRI, r3
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
    c614:	4c18      	ldr	r4, [pc, #96]	; (c678 <_init_static_threads+0x8c>)
    c616:	42b4      	cmp	r4, r6
    c618:	d31f      	bcc.n	c65a <_init_static_threads+0x6e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c61a:	f385 8811 	msr	BASEPRI, r5
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
}
    c61e:	b007      	add	sp, #28
    c620:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
    c624:	f7ff bcac 	b.w	bf80 <k_sched_unlock>
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    c628:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    c62c:	9304      	str	r3, [sp, #16]
    c62e:	f854 3c10 	ldr.w	r3, [r4, #-16]
    c632:	9303      	str	r3, [sp, #12]
    c634:	f854 3c14 	ldr.w	r3, [r4, #-20]
    c638:	9302      	str	r3, [sp, #8]
    c63a:	f854 3c18 	ldr.w	r3, [r4, #-24]
    c63e:	9301      	str	r3, [sp, #4]
    c640:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    c644:	9300      	str	r3, [sp, #0]
    c646:	f1a4 002c 	sub.w	r0, r4, #44	; 0x2c
    c64a:	c80f      	ldmia	r0, {r0, r1, r2, r3}
    c64c:	f7f4 fb62 	bl	d14 <_new_thread>
		thread_data->init_thread->init_data = thread_data;
    c650:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    c654:	64dd      	str	r5, [r3, #76]	; 0x4c
    c656:	4625      	mov	r5, r4
    c658:	e7cd      	b.n	c5f6 <_init_static_threads+0xa>
		if (thread_data->init_delay != K_FOREVER) {
    c65a:	6a61      	ldr	r1, [r4, #36]	; 0x24
    c65c:	1c4b      	adds	r3, r1, #1
    c65e:	d003      	beq.n	c668 <_init_static_threads+0x7c>
			schedule_new_thread(thread_data->init_thread,
    c660:	6820      	ldr	r0, [r4, #0]
	if (delay == 0) {
    c662:	b919      	cbnz	r1, c66c <_init_static_threads+0x80>
    c664:	f7ff ff50 	bl	c508 <_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    c668:	342c      	adds	r4, #44	; 0x2c
    c66a:	e7d4      	b.n	c616 <_init_static_threads+0x2a>
    c66c:	f7ff feee 	bl	c44c <schedule_new_thread.part.13>
    c670:	e7fa      	b.n	c668 <_init_static_threads+0x7c>
    c672:	bf00      	nop
    c674:	2000512c 	.word	0x2000512c
    c678:	2000512c 	.word	0x2000512c
    c67c:	200029cc 	.word	0x200029cc

0000c680 <_init_thread_base>:
void _init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
    c680:	7203      	strb	r3, [r0, #8]
	thread_base->thread_state = (u8_t)initial_state;
    c682:	7242      	strb	r2, [r0, #9]

	thread_base->prio = priority;

	thread_base->sched_locked = 0;
    c684:	2300      	movs	r3, #0
	t->delta_ticks_from_prev = _INACTIVE;
    c686:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	thread_base->prio = priority;
    c68a:	7281      	strb	r1, [r0, #10]
	thread_base->sched_locked = 0;
    c68c:	72c3      	strb	r3, [r0, #11]
    c68e:	6202      	str	r2, [r0, #32]
	t->wait_q = NULL;
    c690:	61c3      	str	r3, [r0, #28]
	t->thread = NULL;
    c692:	6183      	str	r3, [r0, #24]
	t->func = func;
    c694:	6243      	str	r3, [r0, #36]	; 0x24
    c696:	4770      	bx	lr

0000c698 <work_q_main>:
#include <kernel_structs.h>
#include <wait_q.h>
#include <errno.h>

static void work_q_main(void *work_q_ptr, void *p2, void *p3)
{
    c698:	b510      	push	{r4, lr}
    c69a:	4604      	mov	r4, r0

	while (1) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
    c69c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    c6a0:	4620      	mov	r0, r4
    c6a2:	f7ff fafc 	bl	bc9e <k_queue_get>
		if (!work) {
    c6a6:	4603      	mov	r3, r0
    c6a8:	2800      	cmp	r0, #0
    c6aa:	d0f7      	beq.n	c69c <work_q_main+0x4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    c6ac:	3308      	adds	r3, #8
			continue;
		}

		handler = work->handler;
    c6ae:	6842      	ldr	r2, [r0, #4]
    c6b0:	f3bf 8f5b 	dmb	ish
    c6b4:	e853 1f00 	ldrex	r1, [r3]
    c6b8:	f021 0e01 	bic.w	lr, r1, #1
    c6bc:	e843 ec00 	strex	ip, lr, [r3]
    c6c0:	f1bc 0f00 	cmp.w	ip, #0
    c6c4:	d1f6      	bne.n	c6b4 <work_q_main+0x1c>
    c6c6:	f3bf 8f5b 	dmb	ish

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
    c6ca:	07cb      	lsls	r3, r1, #31
    c6cc:	d500      	bpl.n	c6d0 <work_q_main+0x38>
					      K_WORK_STATE_PENDING)) {
			handler(work);
    c6ce:	4790      	blx	r2
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    c6d0:	f7ff fc90 	bl	bff4 <_impl_k_yield>
    c6d4:	e7e2      	b.n	c69c <work_q_main+0x4>
	...

0000c6d8 <k_work_q_start>:
	}
}

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
    c6d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    c6da:	b087      	sub	sp, #28
    c6dc:	4604      	mov	r4, r0
    c6de:	461f      	mov	r7, r3
    c6e0:	460d      	mov	r5, r1
    c6e2:	4616      	mov	r6, r2
	k_queue_init(&work_q->queue);
    c6e4:	f7ff fa86 	bl	bbf4 <k_queue_init>

    c6e8:	2000      	movs	r0, #0
    c6ea:	9005      	str	r0, [sp, #20]
    c6ec:	9004      	str	r0, [sp, #16]
    c6ee:	9002      	str	r0, [sp, #8]
    c6f0:	9001      	str	r0, [sp, #4]
    c6f2:	9703      	str	r7, [sp, #12]
    c6f4:	9400      	str	r4, [sp, #0]
    c6f6:	4b04      	ldr	r3, [pc, #16]	; (c708 <k_work_q_start+0x30>)
    c6f8:	4632      	mov	r2, r6
    c6fa:	4629      	mov	r1, r5
    c6fc:	f104 0010 	add.w	r0, r4, #16
    c700:	f7ff ff30 	bl	c564 <_impl_k_thread_create>
	k_thread_create(&work_q->thread, stack, stack_size, work_q_main,
			work_q, 0, 0, prio, 0, 0);
	_k_object_init(work_q);
}
    c704:	b007      	add	sp, #28
    c706:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c708:	0000c699 	.word	0x0000c699

0000c70c <_ready_thread>:
	thread->base.thread_state &= ~_THREAD_PRESTART;
    c70c:	7a42      	ldrb	r2, [r0, #9]
    c70e:	f022 0104 	bic.w	r1, r2, #4
	return !(_is_thread_prevented_from_running(thread) ||
    c712:	f012 0f1b 	tst.w	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    c716:	7241      	strb	r1, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
    c718:	d104      	bne.n	c724 <_ready_thread+0x18>
    c71a:	6a03      	ldr	r3, [r0, #32]
    c71c:	3301      	adds	r3, #1
    c71e:	d101      	bne.n	c724 <_ready_thread+0x18>
		_add_thread_to_ready_q(thread);
    c720:	f7ff bb04 	b.w	bd2c <_add_thread_to_ready_q>
    c724:	4770      	bx	lr

0000c726 <_unpend_thread>:
	node->prev->next = node->next;
    c726:	e890 000c 	ldmia.w	r0, {r2, r3}
    c72a:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    c72c:	6802      	ldr	r2, [r0, #0]
    c72e:	6053      	str	r3, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
    c730:	7a43      	ldrb	r3, [r0, #9]
    c732:	f023 0302 	bic.w	r3, r3, #2
    c736:	7243      	strb	r3, [r0, #9]
    c738:	4770      	bx	lr
	...

0000c73c <_add_timeout.constprop.9>:
static inline void _add_timeout(struct k_thread *thread,
    c73c:	b430      	push	{r4, r5}
	timeout->thread = thread;
    c73e:	2400      	movs	r4, #0
static inline void _add_timeout(struct k_thread *thread,
    c740:	4603      	mov	r3, r0
	timeout->delta_ticks_from_prev = timeout_in_ticks;
    c742:	6102      	str	r2, [r0, #16]
	timeout->thread = thread;
    c744:	6084      	str	r4, [r0, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
    c746:	60c1      	str	r1, [r0, #12]
	if (!timeout_in_ticks) {
    c748:	b972      	cbnz	r2, c768 <_add_timeout.constprop.9+0x2c>
	__asm__ volatile(
    c74a:	f04f 0120 	mov.w	r1, #32
    c74e:	f3ef 8211 	mrs	r2, BASEPRI
    c752:	f381 8811 	msr	BASEPRI, r1
	timeout->delta_ticks_from_prev = _INACTIVE;
    c756:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    c75a:	6101      	str	r1, [r0, #16]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c75c:	f382 8811 	msr	BASEPRI, r2
		if (timeout->func) {
    c760:	6943      	ldr	r3, [r0, #20]
    c762:	b16b      	cbz	r3, c780 <_add_timeout.constprop.9+0x44>
}
    c764:	bc30      	pop	{r4, r5}
			timeout->func(timeout);
    c766:	4718      	bx	r3
	return list->head == list;
    c768:	4911      	ldr	r1, [pc, #68]	; (c7b0 <_add_timeout.constprop.9+0x74>)
    c76a:	4608      	mov	r0, r1
    c76c:	f850 2f10 	ldr.w	r2, [r0, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c770:	4282      	cmp	r2, r0
    c772:	d10d      	bne.n	c790 <_add_timeout.constprop.9+0x54>
	node->next = list;
    c774:	6018      	str	r0, [r3, #0]
	node->prev = list->tail;
    c776:	694a      	ldr	r2, [r1, #20]
    c778:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
    c77a:	694a      	ldr	r2, [r1, #20]
    c77c:	6013      	str	r3, [r2, #0]
	list->tail = node;
    c77e:	614b      	str	r3, [r1, #20]
}
    c780:	bc30      	pop	{r4, r5}
    c782:	4770      	bx	lr
		*delta -= in_q->delta_ticks_from_prev;
    c784:	1b64      	subs	r4, r4, r5
    c786:	611c      	str	r4, [r3, #16]
	return (node == list->tail) ? NULL : node->next;
    c788:	694c      	ldr	r4, [r1, #20]
    c78a:	42a2      	cmp	r2, r4
    c78c:	d0f2      	beq.n	c774 <_add_timeout.constprop.9+0x38>
    c78e:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
    c790:	2a00      	cmp	r2, #0
    c792:	d0ef      	beq.n	c774 <_add_timeout.constprop.9+0x38>
		if (*delta <= in_q->delta_ticks_from_prev) {
    c794:	691c      	ldr	r4, [r3, #16]
    c796:	6915      	ldr	r5, [r2, #16]
    c798:	42ac      	cmp	r4, r5
    c79a:	dcf3      	bgt.n	c784 <_add_timeout.constprop.9+0x48>
		node->prev = insert_point->prev;
    c79c:	6851      	ldr	r1, [r2, #4]
			in_q->delta_ticks_from_prev -= *delta;
    c79e:	1b2c      	subs	r4, r5, r4
    c7a0:	6114      	str	r4, [r2, #16]
    c7a2:	6059      	str	r1, [r3, #4]
		node->next = insert_point;
    c7a4:	601a      	str	r2, [r3, #0]
		insert_point->prev->next = node;
    c7a6:	6851      	ldr	r1, [r2, #4]
    c7a8:	600b      	str	r3, [r1, #0]
		insert_point->prev = node;
    c7aa:	6053      	str	r3, [r2, #4]
    c7ac:	e7e8      	b.n	c780 <_add_timeout.constprop.9+0x44>
    c7ae:	bf00      	nop
    c7b0:	200029cc 	.word	0x200029cc

0000c7b4 <_timer_expiration_handler>:

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (timer->period > 0) {
    c7b4:	6a83      	ldr	r3, [r0, #40]	; 0x28
    c7b6:	2b00      	cmp	r3, #0
{
    c7b8:	b570      	push	{r4, r5, r6, lr}
    c7ba:	4604      	mov	r4, r0
    c7bc:	f100 0518 	add.w	r5, r0, #24
	if (timer->period > 0) {
    c7c0:	dd0b      	ble.n	c7da <_timer_expiration_handler+0x26>
	__asm__ volatile(
    c7c2:	f04f 0320 	mov.w	r3, #32
    c7c6:	f3ef 8611 	mrs	r6, BASEPRI
    c7ca:	f383 8811 	msr	BASEPRI, r3
		key = irq_lock();
		_add_timeout(NULL, &timer->timeout, &timer->wait_q,
    c7ce:	6a82      	ldr	r2, [r0, #40]	; 0x28
    c7d0:	4629      	mov	r1, r5
    c7d2:	f7ff ffb3 	bl	c73c <_add_timeout.constprop.9>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c7d6:	f386 8811 	msr	BASEPRI, r6
				timer->period);
		irq_unlock(key);
	}

	/* update timer's status */
	timer->status += 1;
    c7da:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    c7dc:	3301      	adds	r3, #1
    c7de:	62e3      	str	r3, [r4, #44]	; 0x2c

	/* invoke timer expiry function */
	if (timer->expiry_fn) {
    c7e0:	6a23      	ldr	r3, [r4, #32]
    c7e2:	b10b      	cbz	r3, c7e8 <_timer_expiration_handler+0x34>
		timer->expiry_fn(timer);
    c7e4:	4620      	mov	r0, r4
    c7e6:	4798      	blx	r3
	return list->head == list;
    c7e8:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c7ea:	42ac      	cmp	r4, r5
    c7ec:	d010      	beq.n	c810 <_timer_expiration_handler+0x5c>
	}

	thread = (struct k_thread *)sys_dlist_peek_head(&timer->wait_q);

	if (!thread) {
    c7ee:	b17c      	cbz	r4, c810 <_timer_expiration_handler+0x5c>
	 * calling _unpend_thread() because a) this is the only place a thread
	 * can be taken off this pend queue, and b) the only place a thread
	 * can be put on the pend queue is at thread level, which of course
	 * cannot interrupt the current context.
	 */
	_unpend_thread(thread);
    c7f0:	4620      	mov	r0, r4
    c7f2:	f7ff ff98 	bl	c726 <_unpend_thread>
	__asm__ volatile(
    c7f6:	f04f 0320 	mov.w	r3, #32
    c7fa:	f3ef 8511 	mrs	r5, BASEPRI
    c7fe:	f383 8811 	msr	BASEPRI, r3

	key = irq_lock();
	_ready_thread(thread);
    c802:	4620      	mov	r0, r4
    c804:	f7ff ff82 	bl	c70c <_ready_thread>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c808:	f385 8811 	msr	BASEPRI, r5
    c80c:	2300      	movs	r3, #0
    c80e:	6663      	str	r3, [r4, #100]	; 0x64
    c810:	bd70      	pop	{r4, r5, r6, pc}

0000c812 <sys_dlist_remove>:
	node->prev->next = node->next;
    c812:	e890 000c 	ldmia.w	r0, {r2, r3}
    c816:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    c818:	6802      	ldr	r2, [r0, #0]
    c81a:	6053      	str	r3, [r2, #4]
    c81c:	4770      	bx	lr

0000c81e <clear_event_registrations>:

/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int last_registered,
					      unsigned int key)
{
    c81e:	b570      	push	{r4, r5, r6, lr}
    c820:	2414      	movs	r4, #20
    c822:	4615      	mov	r5, r2
    c824:	fb04 0401 	mla	r4, r4, r1, r0
	event->poller = NULL;
    c828:	2600      	movs	r6, #0
	for (; last_registered >= 0; last_registered--) {
    c82a:	2900      	cmp	r1, #0
    c82c:	da00      	bge.n	c830 <clear_event_registrations+0x12>
		clear_event_registration(&events[last_registered]);
		irq_unlock(key);
		key = irq_lock();
	}
}
    c82e:	bd70      	pop	{r4, r5, r6, pc}
	switch (event->type) {
    c830:	7b63      	ldrb	r3, [r4, #13]
	event->poller = NULL;
    c832:	60a6      	str	r6, [r4, #8]
	switch (event->type) {
    c834:	f003 030f 	and.w	r3, r3, #15
    c838:	2b02      	cmp	r3, #2
    c83a:	d003      	beq.n	c844 <clear_event_registrations+0x26>
    c83c:	2b04      	cmp	r3, #4
    c83e:	d001      	beq.n	c844 <clear_event_registrations+0x26>
    c840:	2b01      	cmp	r3, #1
    c842:	d102      	bne.n	c84a <clear_event_registrations+0x2c>
		sys_dlist_remove(&event->_node);
    c844:	4620      	mov	r0, r4
    c846:	f7ff ffe4 	bl	c812 <sys_dlist_remove>
    c84a:	f385 8811 	msr	BASEPRI, r5
	__asm__ volatile(
    c84e:	f04f 0320 	mov.w	r3, #32
    c852:	f3ef 8511 	mrs	r5, BASEPRI
    c856:	f383 8811 	msr	BASEPRI, r3
	for (; last_registered >= 0; last_registered--) {
    c85a:	3901      	subs	r1, #1
    c85c:	3c14      	subs	r4, #20
    c85e:	e7e4      	b.n	c82a <clear_event_registrations+0xc>

0000c860 <signal_poll_event>:
}

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state,
			      int *must_reschedule)
{
    c860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	*must_reschedule = 0;
    c862:	2300      	movs	r3, #0
    c864:	6013      	str	r3, [r2, #0]

	if (!event->poller) {
    c866:	6883      	ldr	r3, [r0, #8]
{
    c868:	4605      	mov	r5, r0
    c86a:	460e      	mov	r6, r1
    c86c:	4617      	mov	r7, r2
	if (!event->poller) {
    c86e:	2b00      	cmp	r3, #0
    c870:	d049      	beq.n	c906 <signal_poll_event+0xa6>
		goto ready_event;
	}

	struct k_thread *thread = event->poller->thread;
    c872:	6819      	ldr	r1, [r3, #0]
	thread->base.thread_state &= ~states;
    c874:	7a4b      	ldrb	r3, [r1, #9]
    c876:	f023 0220 	bic.w	r2, r3, #32

	__ASSERT(event->poller->thread, "poller should have a thread\n");

	clear_polling_state(thread);

	if (!_is_thread_pending(thread)) {
    c87a:	0798      	lsls	r0, r3, #30
    c87c:	724a      	strb	r2, [r1, #9]
    c87e:	d542      	bpl.n	c906 <signal_poll_event+0xa6>
		goto ready_event;
	}

	if (_is_thread_timeout_expired(thread)) {
    c880:	6a0b      	ldr	r3, [r1, #32]
    c882:	3302      	adds	r3, #2
    c884:	d04a      	beq.n	c91c <signal_poll_event+0xbc>
	sys_dlist_remove(&thread->base.k_q_node);
    c886:	4608      	mov	r0, r1
    c888:	f7ff ffc3 	bl	c812 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    c88c:	7a4b      	ldrb	r3, [r1, #9]
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    c88e:	6a0c      	ldr	r4, [r1, #32]
    c890:	f023 0302 	bic.w	r3, r3, #2
    c894:	1c62      	adds	r2, r4, #1
    c896:	724b      	strb	r3, [r1, #9]
	return _abort_timeout(&thread->base.timeout);
    c898:	f101 0010 	add.w	r0, r1, #16
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    c89c:	d00c      	beq.n	c8b8 <signal_poll_event+0x58>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
    c89e:	4b21      	ldr	r3, [pc, #132]	; (c924 <signal_poll_event+0xc4>)
    c8a0:	695b      	ldr	r3, [r3, #20]
    c8a2:	4298      	cmp	r0, r3
	return (node == list->tail) ? NULL : node->next;
    c8a4:	bf1f      	itttt	ne
    c8a6:	690a      	ldrne	r2, [r1, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
    c8a8:	6913      	ldrne	r3, [r2, #16]
    c8aa:	191b      	addne	r3, r3, r4
    c8ac:	6113      	strne	r3, [r2, #16]
	sys_dlist_remove(&timeout->node);
    c8ae:	f7ff ffb0 	bl	c812 <sys_dlist_remove>
	timeout->delta_ticks_from_prev = _INACTIVE;
    c8b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c8b6:	620b      	str	r3, [r1, #32]
	return !(_is_thread_prevented_from_running(thread) ||
    c8b8:	7a48      	ldrb	r0, [r1, #9]
		return -EAGAIN;
	}

	_unpend_thread(thread);
	_abort_thread_timeout(thread);
	_set_thread_return_value(thread,
    c8ba:	2e00      	cmp	r6, #0
    c8bc:	bf0c      	ite	eq
    c8be:	f06f 0303 	mvneq.w	r3, #3
    c8c2:	2300      	movne	r3, #0
    c8c4:	f010 041f 	ands.w	r4, r0, #31
    c8c8:	664b      	str	r3, [r1, #100]	; 0x64
    c8ca:	d11c      	bne.n	c906 <signal_poll_event+0xa6>
    c8cc:	6a0b      	ldr	r3, [r1, #32]
    c8ce:	3301      	adds	r3, #1
    c8d0:	d119      	bne.n	c906 <signal_poll_event+0xa6>

	if (!_is_thread_ready(thread)) {
		goto ready_event;
	}

	_add_thread_to_ready_q(thread);
    c8d2:	4608      	mov	r0, r1
    c8d4:	f7ff fa2a 	bl	bd2c <_add_thread_to_ready_q>
    c8d8:	f3ef 8305 	mrs	r3, IPSR
    c8dc:	2b0d      	cmp	r3, #13
    c8de:	d81b      	bhi.n	c918 <signal_poll_event+0xb8>
    c8e0:	b123      	cbz	r3, c8ec <signal_poll_event+0x8c>
    c8e2:	4b11      	ldr	r3, [pc, #68]	; (c928 <signal_poll_event+0xc8>)
    c8e4:	6858      	ldr	r0, [r3, #4]
    c8e6:	f410 6000 	ands.w	r0, r0, #2048	; 0x800
    c8ea:	d00b      	beq.n	c904 <signal_poll_event+0xa4>
	return _is_preempt(_current) && __must_switch_threads();
    c8ec:	4b0d      	ldr	r3, [pc, #52]	; (c924 <signal_poll_event+0xc4>)
    c8ee:	689b      	ldr	r3, [r3, #8]
    c8f0:	895b      	ldrh	r3, [r3, #10]
    c8f2:	2b7f      	cmp	r3, #127	; 0x7f
    c8f4:	d901      	bls.n	c8fa <signal_poll_event+0x9a>
	*must_reschedule = !_is_in_isr() && _must_switch_threads();
    c8f6:	2000      	movs	r0, #0
    c8f8:	e004      	b.n	c904 <signal_poll_event+0xa4>
    c8fa:	f7ff fb11 	bl	bf20 <__must_switch_threads>
    c8fe:	3000      	adds	r0, #0
    c900:	bf18      	it	ne
    c902:	2001      	movne	r0, #1
    c904:	6038      	str	r0, [r7, #0]
	event->state |= state;
    c906:	7b6b      	ldrb	r3, [r5, #13]
    c908:	ea46 1613 	orr.w	r6, r6, r3, lsr #4
    c90c:	f366 1307 	bfi	r3, r6, #4, #4
	event->poller = NULL;
    c910:	2000      	movs	r0, #0
	event->state |= state;
    c912:	736b      	strb	r3, [r5, #13]
	event->poller = NULL;
    c914:	60a8      	str	r0, [r5, #8]

ready_event:
	set_event_ready(event, state);
	return 0;
    c916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	*must_reschedule = !_is_in_isr() && _must_switch_threads();
    c918:	4620      	mov	r0, r4
    c91a:	e7f3      	b.n	c904 <signal_poll_event+0xa4>
		return -EAGAIN;
    c91c:	f06f 000a 	mvn.w	r0, #10
    c920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c922:	bf00      	nop
    c924:	200029cc 	.word	0x200029cc
    c928:	e000ed00 	.word	0xe000ed00

0000c92c <add_event>:
	return list->head == list;
    c92c:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
    c92e:	4298      	cmp	r0, r3
{
    c930:	b530      	push	{r4, r5, lr}
    c932:	d00a      	beq.n	c94a <add_event+0x1e>
    c934:	6844      	ldr	r4, [r0, #4]
	if (!pending || _is_t1_higher_prio_than_t2(pending->poller->thread,
    c936:	b144      	cbz	r4, c94a <add_event+0x1e>
    c938:	68a5      	ldr	r5, [r4, #8]
    c93a:	6812      	ldr	r2, [r2, #0]
    c93c:	682d      	ldr	r5, [r5, #0]
    c93e:	f992 200a 	ldrsb.w	r2, [r2, #10]
    c942:	f995 500a 	ldrsb.w	r5, [r5, #10]
    c946:	4295      	cmp	r5, r2
    c948:	da17      	bge.n	c97a <add_event+0x4e>
	node->next = list;
    c94a:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
    c94c:	6843      	ldr	r3, [r0, #4]
    c94e:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
    c950:	6843      	ldr	r3, [r0, #4]
    c952:	6019      	str	r1, [r3, #0]
	list->tail = node;
    c954:	6041      	str	r1, [r0, #4]
    c956:	bd30      	pop	{r4, r5, pc}
		if (_is_t1_higher_prio_than_t2(poller->thread,
    c958:	689d      	ldr	r5, [r3, #8]
    c95a:	682d      	ldr	r5, [r5, #0]
    c95c:	f995 500a 	ldrsb.w	r5, [r5, #10]
    c960:	4295      	cmp	r5, r2
    c962:	dd06      	ble.n	c972 <add_event+0x46>
		node->prev = insert_point->prev;
    c964:	685a      	ldr	r2, [r3, #4]
    c966:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
    c968:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
    c96a:	685a      	ldr	r2, [r3, #4]
    c96c:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
    c96e:	6059      	str	r1, [r3, #4]
    c970:	bd30      	pop	{r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    c972:	42a3      	cmp	r3, r4
    c974:	d003      	beq.n	c97e <add_event+0x52>
    c976:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
    c978:	b10b      	cbz	r3, c97e <add_event+0x52>
    c97a:	2b00      	cmp	r3, #0
    c97c:	d1ec      	bne.n	c958 <add_event+0x2c>
	node->prev = list->tail;
    c97e:	e881 0011 	stmia.w	r1, {r0, r4}
    c982:	e7e5      	b.n	c950 <add_event+0x24>

0000c984 <k_poll_event_init>:
{
    c984:	b530      	push	{r4, r5, lr}
	event->type = type;
    c986:	7b44      	ldrb	r4, [r0, #13]
	event->obj = obj;
    c988:	6103      	str	r3, [r0, #16]
	event->type = type;
    c98a:	f361 0403 	bfi	r4, r1, #0, #4
	event->mode = mode;
    c98e:	7b81      	ldrb	r1, [r0, #14]
    c990:	f362 0100 	bfi	r1, r2, #0, #1
    c994:	7381      	strb	r1, [r0, #14]
	event->unused = 0;
    c996:	89c2      	ldrh	r2, [r0, #14]
	event->poller = NULL;
    c998:	2500      	movs	r5, #0
	event->state = K_POLL_STATE_NOT_READY;
    c99a:	f365 1407 	bfi	r4, r5, #4, #4
	event->unused = 0;
    c99e:	f365 024f 	bfi	r2, r5, #1, #15
	event->poller = NULL;
    c9a2:	6085      	str	r5, [r0, #8]
	event->state = K_POLL_STATE_NOT_READY;
    c9a4:	7344      	strb	r4, [r0, #13]
	event->unused = 0;
    c9a6:	81c2      	strh	r2, [r0, #14]
	event->obj = obj;
    c9a8:	bd30      	pop	{r4, r5, pc}
	...

0000c9ac <k_poll>:
{
    c9ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c9b0:	b087      	sub	sp, #28
    c9b2:	4680      	mov	r8, r0
    c9b4:	9101      	str	r1, [sp, #4]
    c9b6:	4691      	mov	r9, r2
    c9b8:	f04f 0320 	mov.w	r3, #32
    c9bc:	f3ef 8111 	mrs	r1, BASEPRI
    c9c0:	f383 8811 	msr	BASEPRI, r3
	set_polling_state(_current);
    c9c4:	4d4a      	ldr	r5, [pc, #296]	; (caf0 <k_poll+0x144>)
    c9c6:	68aa      	ldr	r2, [r5, #8]
	thread->base.thread_state |= states;
    c9c8:	7a53      	ldrb	r3, [r2, #9]
    c9ca:	f043 0320 	orr.w	r3, r3, #32
    c9ce:	7253      	strb	r3, [r2, #9]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c9d0:	f381 8811 	msr	BASEPRI, r1
	struct _poller poller = { .thread = _current };
    c9d4:	f10d 0a18 	add.w	sl, sp, #24
    c9d8:	68aa      	ldr	r2, [r5, #8]
    c9da:	f84a 2d0c 	str.w	r2, [sl, #-12]!
    c9de:	4604      	mov	r4, r0
	for (int ii = 0; ii < num_events; ii++) {
    c9e0:	2700      	movs	r7, #0
	int last_registered = -1, rc;
    c9e2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
	for (int ii = 0; ii < num_events; ii++) {
    c9e6:	9b01      	ldr	r3, [sp, #4]
    c9e8:	429f      	cmp	r7, r3
    c9ea:	db15      	blt.n	ca18 <k_poll+0x6c>
	__asm__ volatile(
    c9ec:	f04f 0320 	mov.w	r3, #32
    c9f0:	f3ef 8711 	mrs	r7, BASEPRI
    c9f4:	f383 8811 	msr	BASEPRI, r3
	return _is_thread_polling(_current);
    c9f8:	68aa      	ldr	r2, [r5, #8]
    c9fa:	7a53      	ldrb	r3, [r2, #9]
	if (!is_polling()) {
    c9fc:	f013 0420 	ands.w	r4, r3, #32
    ca00:	d144      	bne.n	ca8c <k_poll+0xe0>
		clear_event_registrations(events, last_registered, key);
    ca02:	463a      	mov	r2, r7
    ca04:	4631      	mov	r1, r6
    ca06:	4640      	mov	r0, r8
    ca08:	f7ff ff09 	bl	c81e <clear_event_registrations>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    ca0c:	f387 8811 	msr	BASEPRI, r7
}
    ca10:	4620      	mov	r0, r4
    ca12:	b007      	add	sp, #28
    ca14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
    ca18:	f04f 0220 	mov.w	r2, #32
    ca1c:	f3ef 8b11 	mrs	fp, BASEPRI
    ca20:	f382 8811 	msr	BASEPRI, r2
	switch (event->type) {
    ca24:	7b61      	ldrb	r1, [r4, #13]
    ca26:	f001 020f 	and.w	r2, r1, #15
    ca2a:	2a02      	cmp	r2, #2
    ca2c:	d003      	beq.n	ca36 <k_poll+0x8a>
    ca2e:	2a04      	cmp	r2, #4
    ca30:	d004      	beq.n	ca3c <k_poll+0x90>
    ca32:	2a01      	cmp	r2, #1
    ca34:	d106      	bne.n	ca44 <k_poll+0x98>
		if (event->signal->signaled) {
    ca36:	6920      	ldr	r0, [r4, #16]
    ca38:	6880      	ldr	r0, [r0, #8]
    ca3a:	e001      	b.n	ca40 <k_poll+0x94>
		if (!k_queue_is_empty(event->queue)) {
    ca3c:	6920      	ldr	r0, [r4, #16]
    ca3e:	6800      	ldr	r0, [r0, #0]
		if (event->signal->signaled) {
    ca40:	2800      	cmp	r0, #0
    ca42:	d148      	bne.n	cad6 <k_poll+0x12a>
		} else if (timeout != K_NO_WAIT && is_polling()) {
    ca44:	f1b9 0f00 	cmp.w	r9, #0
    ca48:	d016      	beq.n	ca78 <k_poll+0xcc>
    ca4a:	68a9      	ldr	r1, [r5, #8]
    ca4c:	7a49      	ldrb	r1, [r1, #9]
    ca4e:	068b      	lsls	r3, r1, #26
    ca50:	d512      	bpl.n	ca78 <k_poll+0xcc>
	switch (event->type) {
    ca52:	2a02      	cmp	r2, #2
    ca54:	d007      	beq.n	ca66 <k_poll+0xba>
    ca56:	2a04      	cmp	r2, #4
    ca58:	d013      	beq.n	ca82 <k_poll+0xd6>
    ca5a:	2a01      	cmp	r2, #1
    ca5c:	d109      	bne.n	ca72 <k_poll+0xc6>
		add_event(&event->signal->poll_events, event, poller);
    ca5e:	4652      	mov	r2, sl
    ca60:	4621      	mov	r1, r4
    ca62:	6920      	ldr	r0, [r4, #16]
    ca64:	e003      	b.n	ca6e <k_poll+0xc2>
		add_event(&event->sem->poll_events, event, poller);
    ca66:	6920      	ldr	r0, [r4, #16]
    ca68:	4652      	mov	r2, sl
    ca6a:	4621      	mov	r1, r4
    ca6c:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
    ca6e:	f7ff ff5d 	bl	c92c <add_event>
	event->poller = poller;
    ca72:	f8c4 a008 	str.w	sl, [r4, #8]
				++last_registered;
    ca76:	3601      	adds	r6, #1
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    ca78:	f38b 8811 	msr	BASEPRI, fp
	for (int ii = 0; ii < num_events; ii++) {
    ca7c:	3701      	adds	r7, #1
    ca7e:	3414      	adds	r4, #20
    ca80:	e7b1      	b.n	c9e6 <k_poll+0x3a>
		add_event(&event->queue->poll_events, event, poller);
    ca82:	6920      	ldr	r0, [r4, #16]
    ca84:	4652      	mov	r2, sl
    ca86:	4621      	mov	r1, r4
    ca88:	3008      	adds	r0, #8
    ca8a:	e7f0      	b.n	ca6e <k_poll+0xc2>
	thread->base.thread_state &= ~states;
    ca8c:	f023 0320 	bic.w	r3, r3, #32
    ca90:	7253      	strb	r3, [r2, #9]
	if (timeout == K_NO_WAIT) {
    ca92:	f1b9 0f00 	cmp.w	r9, #0
    ca96:	d104      	bne.n	caa2 <k_poll+0xf6>
    ca98:	f387 8811 	msr	BASEPRI, r7
		return -EAGAIN;
    ca9c:	f06f 040a 	mvn.w	r4, #10
    caa0:	e7b6      	b.n	ca10 <k_poll+0x64>
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
    caa2:	a804      	add	r0, sp, #16
	_pend_current_thread(&wait_q, timeout);
    caa4:	4649      	mov	r1, r9
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
    caa6:	9004      	str	r0, [sp, #16]
    caa8:	9005      	str	r0, [sp, #20]
	_pend_current_thread(&wait_q, timeout);
    caaa:	f7ff fa29 	bl	bf00 <_pend_current_thread>
	_update_time_slice_before_swap();
    caae:	f7ff fae9 	bl	c084 <_update_time_slice_before_swap>
	return __swap(key);
    cab2:	4638      	mov	r0, r7
    cab4:	f7f3 ff22 	bl	8fc <__swap>
    cab8:	4604      	mov	r4, r0
	__asm__ volatile(
    caba:	f04f 0320 	mov.w	r3, #32
    cabe:	f3ef 8511 	mrs	r5, BASEPRI
    cac2:	f383 8811 	msr	BASEPRI, r3
	clear_event_registrations(events, last_registered, key);
    cac6:	462a      	mov	r2, r5
    cac8:	4631      	mov	r1, r6
    caca:	4640      	mov	r0, r8
    cacc:	f7ff fea7 	bl	c81e <clear_event_registrations>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    cad0:	f385 8811 	msr	BASEPRI, r5
	return swap_rc;
    cad4:	e79c      	b.n	ca10 <k_poll+0x64>
	event->state |= state;
    cad6:	ea42 1211 	orr.w	r2, r2, r1, lsr #4
    cada:	f362 1107 	bfi	r1, r2, #4, #4
	event->poller = NULL;
    cade:	2300      	movs	r3, #0
    cae0:	60a3      	str	r3, [r4, #8]
	event->state |= state;
    cae2:	7361      	strb	r1, [r4, #13]
			clear_polling_state(_current);
    cae4:	68a9      	ldr	r1, [r5, #8]
    cae6:	7a4a      	ldrb	r2, [r1, #9]
    cae8:	f022 0220 	bic.w	r2, r2, #32
    caec:	724a      	strb	r2, [r1, #9]
    caee:	e7c3      	b.n	ca78 <k_poll+0xcc>
    caf0:	200029cc 	.word	0x200029cc

0000caf4 <_handle_obj_poll_events>:
}

/* returns 1 if a reschedule must take place, 0 otherwise */
int _handle_obj_poll_events(sys_dlist_t *events, u32_t state)
{
    caf4:	b513      	push	{r0, r1, r4, lr}
	return list->head == list;
    caf6:	6804      	ldr	r4, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node;

	if (sys_dlist_is_empty(list)) {
    caf8:	42a0      	cmp	r0, r4
    cafa:	d102      	bne.n	cb02 <_handle_obj_poll_events+0xe>
	struct k_poll_event *poll_event;
	int must_reschedule;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (!poll_event) {
		return 0;
    cafc:	2000      	movs	r0, #0
	}

	(void) signal_poll_event(poll_event, state, &must_reschedule);
	return must_reschedule;
}
    cafe:	b002      	add	sp, #8
    cb00:	bd10      	pop	{r4, pc}
		return NULL;
	}

	node = list->head;
	sys_dlist_remove(node);
    cb02:	4620      	mov	r0, r4
    cb04:	f7ff fe85 	bl	c812 <sys_dlist_remove>
	if (!poll_event) {
    cb08:	2c00      	cmp	r4, #0
    cb0a:	d0f7      	beq.n	cafc <_handle_obj_poll_events+0x8>
	(void) signal_poll_event(poll_event, state, &must_reschedule);
    cb0c:	aa01      	add	r2, sp, #4
    cb0e:	4620      	mov	r0, r4
    cb10:	f7ff fea6 	bl	c860 <signal_poll_event>
	return must_reschedule;
    cb14:	9801      	ldr	r0, [sp, #4]
    cb16:	e7f2      	b.n	cafe <_handle_obj_poll_events+0xa>

0000cb18 <_OffsetAbsSyms>:

#ifdef CONFIG_FLOAT
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread) -
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
    cb18:	4770      	bx	lr
